
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -D TARGET=2 --long-address --flat --intel-hex -o kernel.hex --list kernel_hex.lst --labels=kernel_hex.lbl src\kernel.asm
; Tue Jun 02 19:13:58 2020

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=2					TARGET=2

;******  Processing input file: src\kernel.asm

=1					TARGET_FLASH = 1              ; The code is being assembled for Flash
=2					TARGET_RAM = 2                ; The code is being assembled for RAM

;******  Processing file: src\macros_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\characters.asm

=$03					CHAR_CTRL_C = $03   ; CTRL-C
=$08					CHAR_BS = $08       ; Backspace (delete character to the left of the cursor)
=$09					CHAR_TAB = $09      ; TAB (moves cursor to next tabulated column)
=$0a					CHAR_LF = $0A       ; Line feed
=$0d					CHAR_CR = $0D       ; Carriage return
=$0f					CHAR_INS = $0F      ; Insert a space at the cursor
=$11					CHAR_UP = $11       ; Up arrow
=$1d					CHAR_RIGHT = $1D    ; Right arrow
=$20					CHAR_SP = $20       ; Space
=$91					CHAR_DOWN = $91     ; Down arrow
=$9d					CHAR_LEFT = $9D     ; Left arrow
=$7f					CHAR_DEL = $7F      ; Delete key (delete the character at the cursor)

;******  Return to file: src\kernel.asm


;******  Processing file: src\simulator_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_inc.asm

=$000000				BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000				TMPPTR1          = $000000 ; 4 byte temporary pointer
=$000004				TMPPTR2          = $000004 ; 4 byte temporary pointer
=$000008				OPL2_ADDY_PTR_LO = $000008 ; THis Points towards the Instruments Database
=$000009				OPL2_ADDY_PTR_MD = $000009
=$00000a				OPL2_ADDY_PTR_HI = $00000A
=$00000c				SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f				COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011				COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013				LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=25
=$000015				LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017				CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a				CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c				CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e				CURCOLOR         = $00001E ;1 Byte Color of next character to be printed to the screen.
=$00001f				COLORPOS         = $00001F ;3 Byte address of cursor's position in the color matrix
=$000022				STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024				STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$000026				OPL2_OPERATOR    = $000026 ;
=$000027				OPL2_CHANNEL     = $000027 ;
=$000028				OPL2_REG_REGION  = $000028 ; Offset to the Group of Registers
=$00002a				OPL2_REG_OFFSET  = $00002A ; 2 Bytes (16Bits)
=$00002c				OPL2_IND_ADDY_LL = $00002C ; 2 Bytes Reserved (Only need 3)
=$00002e				OPL2_IND_ADDY_HL = $00002E ; 2 Bytes Reserved (Only need 3)
=$000030				OPL2_NOTE        = $000030 ; 1 Byte
=$000031				OPL2_OCTAVE      = $000031 ; 1 Byte
=$000032				OPL2_PARAMETER0  = $000032 ; 1 Byte - Key On/Feedback
=$000033				OPL2_PARAMETER1  = $000033 ; 1 Byte
=$000034				OPL2_PARAMETER2  = $000034 ; 1 Byte
=$000035				OPL2_PARAMETER3  = $000035 ; 1 Byte
=$000036				OPL2_LOOP        = $000036 ;
=$000036				OPL2_BLOCK       = $000036
=$000038				SDCARD_FILE_PTR  = $000038 ; 3 Bytes Pointer to Filename to open
=$00003c				SDCARD_BYTE_NUM  = $00003C ; 2Bytes
=$00003f				SDCARD_PRSNT_MNT = $00003F ; 1 Byte, Indicate that the SDCard is Present and that it is Mounted
=$000040				BM_CLEAR_SCRN_X  = $000040
=$000042				BM_CLEAR_SCRN_Y  = $000042
=$000040				RAD_STARTLINE    = $000040 ; 1 Byte
=$000041				RAD_PATTERN_IDX  = $000041 ; 1 Byte
=$000042				RAD_LINE         = $000042 ; 1 Byte
=$000043				RAD_LINENUMBER   = $000043 ; 1 Byte
=$000044				RAD_CHANNEL_NUM  = $000044 ; 1 Byte
=$000045				RAD_ISLASTCHAN   = $000045 ; 1 Byte
=$000046				RAD_Y_POINTER    = $000046 ; 2 Bytes
=$000048				RAD_TICK         = $000048
=$00004a				RAD_CHANNEL_DATA = $00004A ; 2 Bytes
=$00004c				RAD_CHANNE_EFFCT = $00004C
=$00004d				RAD_TEMP         = $00004D
=$000050				RAD_ADDR         = $000050 ; 3 bytes to avoid OPL2 errors.
=$000053				RAD_PATTRN       = $000053 ; 1 bytes - offset to patter
=$000054				RAD_PTN_DEST     = $000054 ; 3 bytes - where to write the pattern data
=$000057				RAD_CHANNEL      = $000057 ; 2 bytes - 0 to 8
=$000059				RAD_LAST_NOTE    = $000059 ; 1 if this is the last note
=$00005a				RAD_LINE_PTR     = $00005A ; 2 bytes - offset to memory location
=$000040				BMP_X_SIZE       = $000040 ; 2 Bytes
=$000042				BMP_Y_SIZE       = $000042 ; 2 Bytes
=$000044				BMP_PRSE_SRC_PTR = $000044 ; 3 Bytes
=$000048				BMP_PRSE_DST_PTR = $000048 ; 3 Bytes
=$00004c				BMP_COLOR_PALET  = $00004C ; 2 Bytes
=$00004e				SCRN_X_STRIDE    = $00004E ; 2 Bytes, Basically How many Pixel Accross in Bitmap Mode
=$000050				BMP_FILE_SIZE    = $000050 ; 4 Bytes
=$000054				BMP_POSITION_X   = $000054 ; 2 Bytes Where, the BMP will be position on the X Axis
=$000056				BMP_POSITION_Y   = $000056 ; 2 Bytes Where, the BMP will be position on the Y Axis
=$000058				BMP_PALET_CHOICE = $000058 ;
=$0000e0				MOUSE_PTR        = $0000E0
=$0000e1				MOUSE_POS_X_LO   = $0000E1
=$0000e2				MOUSE_POS_X_HI   = $0000E2
=$0000e3				MOUSE_POS_Y_LO   = $0000E3
=$0000e4				MOUSE_POS_Y_HI   = $0000E4
=$0000f0				USER_TEMP        = $0000F0 ;32 Bytes Temp space for user programs
=$000100				GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000140				INT_CONTROLLER   = $000140 ; $000140...$00015F Interrupt Controller
=$000160				TIMER_CONTROLLER = $000160 ; $000160...$00017F Timer0/Timer1/Timer2 Block
=$000160				TIMER_CTRL_REGLL = $000160 ;
=$000161				TIMER_CTRL_REGLH = $000161 ;
=$000162				TIMER_CTRL_REGHL = $000162 ;
=$000163				TIMER_CTRL_REGHH = $000163 ;
=$000240				CPU_REGISTERS    = $000240 ; Byte
=$000240				CPUPC            = $000240 ;2 Bytes Program Counter (PC)
=$000242				CPUPBR           = $000242 ;2 Bytes Program Bank Register (K)
=$000244				CPUA             = $000244 ;2 Bytes Accumulator (A)
=$000246				CPUX             = $000246 ;2 Bytes X Register (X)
=$000248				CPUY             = $000248 ;2 Bytes Y Register (Y)
=$00024a				CPUSTACK         = $00024A ;2 Bytes Stack Pointer (S)
=$00024c				CPUDP            = $00024C ;2 Bytes Direct Page Register (D)
=$00024e				CPUDBR           = $00024E ;1 Byte  Data Bank Register (B)
=$00024f				CPUFLAGS         = $00024F ;1 Byte  Flags (P)
=$000250				MONITOR_VARS     = $000250 ; Byte  MONITOR Variables. BASIC variables may overlap this space
=$000250				MCMDADDR         = $000250 ;3 Bytes Address of the current line of text being processed by the command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
=$000253				MCMP_TEXT        = $000253 ;3 Bytes Address of symbol being evaluated for COMPARE routine
=$000256				MCMP_LEN         = $000256 ;2 Bytes Length of symbol being evaluated for COMPARE routine
=$000258				MCMD             = $000258 ;3 Bytes Address of the current command/function string
=$00025b				MCMD_LEN         = $00025B ;2 Bytes Length of the current command/function string
=$00025d				MARG1            = $00025D ;4 Bytes First command argument. May be data or address, depending on command
=$000261				MARG2            = $000261 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000265				MARG3            = $000265 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000269				MARG4            = $000269 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$00026d				MARG5            = $00026D ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000271				MARG6            = $000271 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000275				MARG7            = $000275 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000279				MARG8            = $000279 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000300				LOADFILE_VARS    = $000300 ; Byte
=$000300				LOADFILE_NAME    = $000300 ;3 Bytes (addr) Name of file to load. Address in Data Page
=$000303				LOADFILE_LEN     = $000303 ;1 Byte  Length of filename. 0=Null Terminated
=$000304				LOADPBR          = $000304 ;1 Byte  First Program Bank of loaded file ($05 segment)
=$000305				LOADPC           = $000305 ;2 Bytes Start address of loaded file ($05 segment)
=$000307				LOADDBR          = $000307 ;1 Byte  First data bank of loaded file ($06 segment)
=$000308				LOADADDR         = $000308 ;2 Bytes FIrst data address of loaded file ($06 segment)
=$00030a				LOADFILE_TYPE    = $00030A ;3 Bytes (addr) File type string in loaded data file. Actual string data will be in Bank 1. Valid values are BIN, PRG, P16
=$00030d				BLOCK_LEN        = $00030D ;2 Bytes Length of block being loaded
=$00030f				BLOCK_ADDR       = $00030F ;2 Bytes (temp) Address of block being loaded
=$000311				BLOCK_BANK       = $000311 ;1 Byte  (temp) Bank of block being loaded
=$000312				BLOCK_COUNT      = $000312 ;2 Bytes (temp) Counter of bytes read as file is loaded
=$000300				FDC_DRIVE        = $000300 ;1 byte - The number of the selected drive
=$000301				FDC_HEAD         = $000301 ;1 byte - The head number (0 or 1)
=$000302				FDC_CYLINDER     = $000302 ;1 byte - The cylinder number
=$000303				FDC_SECTOR       = $000303 ;1 byte - The sector number
=$000304				FDC_SECTOR_SIZE  = $000304 ;1 byte - The sector size code (2 = 512)
=$000305				FDC_SECPERTRK    = $000305 ;1 byte - The number of sectors per track (18 for 1.44 MB floppy)
=$000306				FDC_ST0          = $000306 ;1 byte - Status Register 0
=$000307				FDC_ST1          = $000307 ;1 byte - Status Register 1
=$000308				FDC_ST2          = $000308 ;1 byte - Status Register 2
=$000309				FDC_ST3          = $000309 ;1 byte - Status Register 3
=$00030a				FDC_PCN          = $00030A ;1 byte - Present Cylinder Number
=$00030b				FDC_STATUS       = $00030B ;1 byte - Status of what we think is going on with the FDC:
=$00030c				DIVIDEND         = $00030C ;4 bytes - Dividend for 32-bit division
=$000310				DIVISOR          = $000310 ;4 bytes - Divisor for 32-bit division
=$000314				REMAINDER        = $000314 ;4 bytes - Remainder for 32-bit division
=$000320				SDOS_VARIABLES   = $000320
=$000320				BIOS_STATUS      = $000320      ; 1 byte - Status of any BIOS operation
=$000321				BIOS_DEV         = $000321      ; 1 byte - Block device number for block operations
=$000322				BIOS_LBA         = $000322      ; 4 bytes - Address of block to read/write (this is the physical block, w/o reference to partition)
=$000326				BIOS_BUFF_PTR    = $000326      ; 4 bytes - 24-bit pointer to memory for read/write operations
=$00032a				BIOS_FIFO_COUNT  = $00032A      ; 2 bytes - The number of bytes read on the last block read
=$00032e				DOS_STATUS       = $00032E      ; 1 byte - The error code describing any error with file access
=$000330				DOS_CLUS_ID      = $000330      ; 4 bytes - The cluster desired for a DOS operation
=$000338				DOS_DIR_PTR      = $000338      ; 4 bytes - Pointer to a directory entry (assumed to be within DOS_SECTOR)
=$00033c				DOS_BUFF_PTR     = $00033C      ; 4 bytes - A pointer for DOS cluster read/write operations
=$000340				DOS_FD_PTR       = $000340      ; 4 bytes - A pointer to a file descriptor
=$000344				DOS_FAT_LBA      = $000344      ; 4 bytes - The LBA for a sector of the FAT we need to read/write
=$000348				DOS_TEMP         = $000348      ; 4 bytes - Temporary storage for DOS operations
=$00034c				DOS_FILE_SIZE    = $00034C      ; 4 bytes - The size of a file
=$000350				DOS_SRC_PTR      = $000350      ; 4 bytes - Pointer for transferring data
=$000354				DOS_DST_PTR      = $000354      ; 4 bytes - Pointer for transferring data
=$000358				DOS_END_PTR      = $000358      ; 4 bytes - Pointer to the last byte to save
=$00035c				DOS_RUN_PTR      = $00035C      ; 4 bytes - Pointer for starting a loaded program
=$000360				DOS_RUN_PARAM    = $000360      ; 4 bytes - Pointer to the ASCIIZ string for arguments in loading a program
=$000364				DOS_STR1_PTR     = $000364      ; 4 bytes - pointer to a string
=$000368				DOS_STR2_PTR     = $000368      ; 4 bytes - pointer to a string
=$00036b				DOS_SCRATCH      = $00036B      ; 4 bytes - general purpose short term storage
=$000400				DOS_PATH_BUFF    = $000400      ; 256 bytes - A buffer for path names
=$000500				FDC_PARAMETERS   = $000500      ; 16 bytes - a buffer of parameter data for the FDC
=$000510				FDC_RESULTS      = $000510      ; 16 bytes - Buffer for results of FDC commands
=$000530				FDC_PARAM_NUM    = $000530      ; 1 byte - The number of parameters to send to the FDC (including command)
=$000532				FDC_RESULT_NUM   = $000532      ; 1 byte - The number of results expected
=$000533				FDC_EXPECT_DAT   = $000533      ; 1 byte - 0 = the command expects no data, otherwise expects data
=$000534				FDC_CMD_RETRY    = $000534      ; 1 byte - a retry counter for commands
=$000700				CURRUART         = $000700 ; 3-bytes: the base address of the current UART
=$000703				CHAN_OUT         = $000703 ; 1-byte: the number of the current output channel (for PUTC, etc.)
=$000704				CHAN_IN          = $000704 ; 1-byte: the number of the current input channel (for GETCH, etc.)
=$000705				TIMERFLAGS       = $000705 ; 1-byte: flags to indicate that one of the timer interupts has triggered
=$80					TIMER0TRIGGER    = $80
=$40					TIMER1TRIGGER    = $40
=$20					TIMER2TRIGGER    = $20
=$000f00				KEY_BUFFER       = $000F00 ; 64 Bytes keyboard buffer
=$0080					KEY_BUFFER_SIZE  = $0080   ;128 Bytes (constant) keyboard buffer length
=$000f7f				KEY_BUFFER_END   = $000F7F ;  1 Byte  Last byte of keyboard buffer
=$000f83				KEY_BUFFER_CMD   = $000F83 ;  1 Byte  Indicates the Command Process Status
=$000f84				COMMAND_SIZE_STR = $000F84 ;  1 Byte
=$000f86				COMMAND_COMP_TMP = $000F86 ;  2 Bytes
=$000f87				KEYBOARD_SC_FLG  = $000F87 ;  1 Bytes that indicate the Status of Left Shift, Left CTRL, Left ALT, Right Shift
=$000f88				KEYBOARD_SC_TMP  = $000F88 ;  1 Byte, Interrupt Save Scan Code while Processing
=$000f89				KEYBOARD_LOCKS   = $000F89 ;  1 Byte, the status of the various lock keys
=$000f8a				KEYFLAG          = $000F8A ;  1 Byte, flag to indicate if CTRL-C has been pressed
=$000f8b				KEY_BUFFER_RPOS  = $000F8B ;  2 Byte, position of the character to read from the KEY_BUFFER
=$000f8d				KEY_BUFFER_WPOS  = $000F8D ;  2 Byte, position of the character to write to the KEY_BUFFER
=$001000				KERNEL_JMP_BEGIN = $001000 ; Reserved for the Kernel jump table
=$001fff				KERNEL_JMP_END   = $001FFF
=$002000				TEST_BEGIN       = $002000 ;28672 Bytes Test/diagnostic code for prototype.
=$007fff				TEST_END         = $007FFF ;0 Byte
=$008000				STACK_BEGIN      = $008000 ;32512 Bytes The default beginning of stack space
=$00feff				STACK_END        = $00FEFF ;0 Byte  End of stack space. Everything below this is I/O space
=$00ff00				ISR_BEGIN        = $00FF00 ; Byte  Beginning of CPU vectors in Direct page
=$00ff00				HRESET           = $00FF00 ;16 Bytes Handle RESET asserted. Reboot computer and re-initialize the kernel.
=$00ff10				HCOP             = $00FF10 ;16 Bytes Handle the COP instruction. Program use; not used by OS
=$00ff20				HBRK             = $00FF20 ;16 Bytes Handle the BRK instruction. Returns to BASIC Ready prompt.
=$00ff30				HABORT           = $00FF30 ;16 Bytes Handle ABORT asserted. Return to Ready prompt with an error message.
=$00ff40				HNMI             = $00FF40 ;32 Bytes Handle NMI
=$00ff60				HIRQ             = $00FF60 ;32 Bytes Handle IRQ
=$00ff80				Unused_FF80      = $00FF80 ;End of direct page Interrrupt handlers
=$00ffe0				VECTORS_BEGIN    = $00FFE0 ;0 Byte  Interrupt vectors
=$00ffe0				JMP_READY        = $00FFE0 ;4 Bytes Jumps to ROM READY routine. Modified whenever alternate command interpreter is loaded.
=$00ffe4				VECTOR_COP       = $00FFE4 ;2 Bytes Native COP Interrupt vector
=$00ffe6				VECTOR_BRK       = $00FFE6 ;2 Bytes Native BRK Interrupt vector
=$00ffe8				VECTOR_ABORT     = $00FFE8 ;2 Bytes Native ABORT Interrupt vector
=$00ffea				VECTOR_NMI       = $00FFEA ;2 Bytes Native NMI Interrupt vector
=$00ffec				VECTOR_RESET     = $00FFEC ;2 Bytes Unused (Native RESET vector)
=$00ffee				VECTOR_IRQ       = $00FFEE ;2 Bytes Native IRQ Vector
=$00fff0				RETURN           = $00FFF0 ;4 Bytes RETURN key handler. Points to BASIC or MONITOR subroutine to execute when RETURN is pressed.
=$00fff4				VECTOR_ECOP      = $00FFF4 ;2 Bytes Emulation mode interrupt handler
=$00fff6				VECTOR_EBRK      = $00FFF6 ;2 Bytes Emulation mode interrupt handler
=$00fff8				VECTOR_EABORT    = $00FFF8 ;2 Bytes Emulation mode interrupt handler
=$00fffa				VECTOR_ENMI      = $00FFFA ;2 Bytes Emulation mode interrupt handler
=$00fffc				VECTOR_ERESET    = $00FFFC ;2 Bytes Emulation mode interrupt handler
=$00fffe				VECTOR_EIRQ      = $00FFFE ;2 Bytes Emulation mode interrupt handler
=$010000				VECTORS_END      = $010000 ;*End of vector space
=$00ffff				BANK0_END        = $00FFFF ;End of Bank 00 and Direct page

;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_data.asm

>380000	00 a0 af			                .long $AFA000       ; SCREENBEGIN, 3 bytes, Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>380003	4c 00				                .word 76            ; COLS_VISIBLE, 2 bytes, Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>380005	64 00				                .word 100           ; COLS_PER_LINE, 2 bytes, Columns in memory per screen line. A virtual line can be this long. Default=128
>380007	38 00				                .word 56            ; LINES_VISIBLE, 2 bytes, The number of rows visible on the screen. Default=25
>380009	40 00				                .word 64            ; LINES_MAX, 2 bytes, The number of rows in memory for the screen. Default=64
>38000b	00 a0 af			                .long $AFA000       ; CURSORPOS, 3 bytes, The next character written to the screen will be written in this location.
>38000e	00 00				                .word 0             ; CURSORX, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380010	00 00				                .word 0             ; CURSORY, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380012	0f				                .byte $0F           ; CURCOLOR, 2 bytes, Color of next character to be printed to the screen.
>380013	00				                .byte $00           ; CURATTR, 2 bytes, Attribute of next character to be printed to the screen.
>380014	00 80				                .word STACK_BEGIN   ; STACKBOT, 2 bytes, Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
>380016	ff fe				                .word STACK_END     ; STACKTOP, 2 bytes, Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.

;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_code.asm

.ff00	18		clc		RHRESET         CLC
.ff01	fb		xce		                XCE
.ff02	5c 00 10 38	jmp $381000	                JML BOOT
.ff10					RHCOP
.ff10	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff12	8b		phb		                PHB
.ff13	0b		phd		                PHD
.ff14	48		pha		                PHA
.ff15	da		phx		                PHX
.ff16	5a		phy		                PHY
.ff17	5c 08 10 38	jmp $381008	                JML BREAK
.ff20					RHBRK
.ff20	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff22	8b		phb		                PHB
.ff23	0b		phd		                PHD
.ff24	48		pha		                PHA
.ff25	da		phx		                PHX
.ff26	5a		phy		                PHY
.ff27	5c 08 10 38	jmp $381008	                JML BREAK
.ff30					RHABORT
.ff30	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff32	8b		phb		                PHB
.ff33	0b		phd		                PHD
.ff34	48		pha		                PHA
.ff35	da		phx		                PHX
.ff36	5a		phy		                PHY
.ff37	5c 08 10 38	jmp $381008	                JML BREAK
.ff40					 RHNMI
.ff40	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff42	8b		phb		                PHB
.ff43	0b		phd		                PHD
.ff44	48		pha		                PHA
.ff45	da		phx		                PHX
.ff46	5a		phy		                PHY
.ff47	22 9a 12 38	jsl $38129a	                JSL NMI_HANDLER
.ff4b	7a		ply		                PLY
.ff4c	fa		plx		                PLX
.ff4d	68		pla		                PLA
.ff4e	2b		pld		                PLD
.ff4f	ab		plb		                PLB
.ff50	40		rti		                RTI
.ff60					RHIRQ
.ff60	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff62	8b		phb		                PHB
.ff63	0b		phd		                PHD
.ff64	48		pha		                PHA
.ff65	da		phx		                PHX
.ff66	5a		phy		                PHY
.ff67	22 2c 11 38	jsl $38112c	                JSL IRQ_HANDLER
.ff6b	7a		ply		                PLY
.ff6c	fa		plx		                PLX
.ff6d	68		pla		                PLA
.ff6e	2b		pld		                PLD
.ff6f	ab		plb		                PLB
.ff70	40		rti		                RTI
.ffe0	5c 04 00 3a	jmp $3a0004	JUMP_READY      JML MONITOR    ; Kernel READY routine. Rewrite this address to jump to a custom kernel.
>ffe4	10 ff				RVECTOR_COP     .addr HCOP     ; FFE4
>ffe6	20 ff				RVECTOR_BRK     .addr HBRK     ; FFE6
>ffe8	30 ff				RVECTOR_ABORT   .addr HABORT   ; FFE8
>ffea	40 ff				RVECTOR_NMI     .addr HNMI     ; FFEA
>ffec	00 00				                .word $0000    ; FFEC
>ffee	60 ff				RVECTOR_IRQ     .addr HIRQ    ; FFEE
.fff0	5c 59 06 39	jmp $390659	RRETURN         JML IRETURN
>fff4	10 ff				RVECTOR_ECOP    .addr HCOP     ; FFF4
>fff6	20 ff				RVECTOR_EBRK    .addr HBRK     ; FFF6
>fff8	30 ff				RVECTOR_EABORT  .addr HABORT   ; FFF8
>fffa	40 ff				RVECTOR_ENMI    .addr HNMI     ; FFFA
>fffc	00 ff				RVECTOR_ERESET  .addr HRESET   ; FFFC
>fffe	60 ff				RVECTOR_EIRQ    .addr HIRQ     ; FFFE

;******  Return to file: src\kernel.asm


;******  Processing file: src\Math_def.asm

=$000100				UNSIGNED_MULT_A_LO  = $000100
=$000101				UNSIGNED_MULT_A_HI  = $000101
=$000102				UNSIGNED_MULT_B_LO  = $000102
=$000103				UNSIGNED_MULT_B_HI  = $000103
=$000104				UNSIGNED_MULT_AL_LO = $000104
=$000105				UNSIGNED_MULT_AL_HI = $000105
=$000106				UNSIGNED_MULT_AH_LO = $000106
=$000107				UNSIGNED_MULT_AH_HI = $000107
=$000108				SIGNED_MULT_A_LO    = $000108
=$000109				SIGNED_MULT_A_HI    = $000109
=$00010a				SIGNED_MULT_B_LO    = $00010A
=$00010b				SIGNED_MULT_B_HI    = $00010B
=$00010c				SIGNED_MULT_AL_LO   = $00010C
=$00010d				SIGNED_MULT_AL_HI   = $00010D
=$00010e				SIGNED_MULT_AH_LO   = $00010E
=$00010f				SIGNED_MULT_AH_HI   = $00010F
=$000110				UNSIGNED_DIV_DEM_LO = $000110
=$000111				UNSIGNED_DIV_DEM_HI = $000111
=$000112				UNSIGNED_DIV_NUM_LO = $000112
=$000113				UNSIGNED_DIV_NUM_HI = $000113
=$000114				UNSIGNED_DIV_QUO_LO = $000114
=$000115				UNSIGNED_DIV_QUO_HI = $000115
=$000116				UNSIGNED_DIV_REM_LO = $000116
=$000117				UNSIGNED_DIV_REM_HI = $000117
=$000118				SIGNED_DIV_DEM_LO   = $000118
=$000119				SIGNED_DIV_DEM_HI   = $000119
=$00011a				SIGNED_DIV_NUM_LO   = $00011A
=$00011b				SIGNED_DIV_NUM_HI   = $00011B
=$00011c				SIGNED_DIV_QUO_LO   = $00011C
=$00011d				SIGNED_DIV_QUO_HI   = $00011D
=$00011e				SIGNED_DIV_REM_LO   = $00011E
=$00011f				SIGNED_DIV_REM_HI   = $00011F
=$000120				ADDER32_A_LL        = $000120
=$000121				ADDER32_A_LH        = $000121
=$000122				ADDER32_A_HL        = $000122
=$000123				ADDER32_A_HH        = $000123
=$000124				ADDER32_B_LL        = $000124
=$000125				ADDER32_B_LH        = $000125
=$000126				ADDER32_B_HL        = $000126
=$000127				ADDER32_B_HH        = $000127
=$000128				ADDER32_R_LL        = $000128
=$000129				ADDER32_R_LH        = $000129
=$00012a				ADDER32_R_HL        = $00012A
=$00012b				ADDER32_R_HH        = $00012B

;******  Return to file: src\kernel.asm


;******  Processing file: src\interrupt_def.asm

=$000140				INT_PENDING_REG0 = $000140 ;
=$000141				INT_PENDING_REG1 = $000141 ;
=$000142				INT_PENDING_REG2 = $000142 ;
=$000143				INT_PENDING_REG3 = $000143 ; FMX Model
=$000144				INT_POL_REG0     = $000144 ;
=$000145				INT_POL_REG1     = $000145 ;
=$000146				INT_POL_REG2     = $000146 ;
=$000147				INT_POL_REG7     = $000147 ; FMX Model
=$000148				INT_EDGE_REG0    = $000148 ;
=$000149				INT_EDGE_REG1    = $000149 ;
=$00014a				INT_EDGE_REG2    = $00014A ;
=$00014b				INT_EDGE_REG3    = $00014B ; FMX Model
=$00014c				INT_MASK_REG0    = $00014C ;
=$00014d				INT_MASK_REG1    = $00014D ;
=$00014e				INT_MASK_REG2    = $00014E ;
=$00014f				INT_MASK_REG3    = $00014F ; FMX Model
=$01					FNX0_INT00_SOF        = $01  ;Start of Frame @ 60FPS
=$02					FNX0_INT01_SOL        = $02  ;Start of Line (Programmable)
=$04					FNX0_INT02_TMR0       = $04  ;Timer 0 Interrupt
=$08					FNX0_INT03_TMR1       = $08  ;Timer 1 Interrupt
=$10					FNX0_INT04_TMR2       = $10  ;Timer 2 Interrupt
=$20					FNX0_INT05_RTC        = $20  ;Real-Time Clock Interrupt
=$40					FNX0_INT06_FDC        = $40  ;Floppy Disk Controller
=$80					FNX0_INT07_MOUSE      = $80  ; Mouse Interrupt (INT12 in SuperIO IOspace)
=$01					FNX1_INT00_KBD        = $01  ;Keyboard Interrupt
=$02					FNX1_INT01_SC0        = $02  ;VICKY_II (INT2) Sprite 2 Sprite Collision
=$04					FNX1_INT02_SC1        = $04  ;VICKY_II (INT3) Sprite 2 Tiles Collision
=$08					FNX1_INT03_COM2       = $08  ;Serial Port 2
=$10					FNX1_INT04_COM1       = $10  ;Serial Port 1
=$20					FNX1_INT05_MPU401     = $20  ;Midi Controller Interrupt
=$40					FNX1_INT06_LPT        = $40  ;Parallel Port
=$80					FNX1_INT07_SDCARD     = $80  ;SD Card Controller Interrupt (CH376S)
=$01					FNX2_INT00_OPL3       = $01  ;OPl3
=$02					FNX2_INT01_GABE_INT0  = $02  ;GABE (INT0) - TBD
=$04					FNX2_INT02_GABE_INT1  = $04  ;GABE (INT1) - TBD
=$08					FNX2_INT03_SDMA       = $08  ;VICKY_II (INT4)
=$10					FNX2_INT04_VDMA       = $10  ;VICKY_II (INT5)
=$20					FNX2_INT05_GABE_INT2  = $20  ;GABE (INT2) - TBD
=$40					FNX2_INT06_EXT        = $40  ;External Expansion
=$80					FNX2_INT07_SDCARD_INS = $80  ; SDCARD Insertion
=$01					FNX3_INT00_OPN2       = $01  ;OPN2
=$02					FNX3_INT01_OPM        = $02  ;OPM
=$04					FNX3_INT02_IDE        = $04  ;HDD IDE INTERRUPT
=$08					FNX3_INT03_TBD        = $08  ;TBD
=$10					FNX3_INT04_TBD        = $10  ;TBD
=$20					FNX3_INT05_TBD        = $20  ;GABE (INT2) - TBD
=$40					FNX3_INT06_TBD        = $40  ;External Expansion
=$80					FNX3_INT07_TBD        = $80  ; SDCARD Insertion

;******  Return to file: src\kernel.asm


;******  Processing file: src\dram_inc.asm

=$afa000				SCREEN_PAGE0     = $AFA000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
=$afc000				SCREEN_PAGE1     = $AFC000 ;8192 Bytes Additional page of display RAM. This can be used for page flipping or to handle multiple edit buffers.
=$b00000				SCREEN_END       = $B00000 ;End of display memory

;******  Return to file: src\kernel.asm


;******  Processing file: src\vicky_ii_def.asm

=$af0000				MASTER_CTRL_REG_L	      = $AF0000
=$01					Mstr_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$02					Mstr_Ctrl_Text_Overlay  = $02       ; Enable the Overlay of the text mode on top of Graphic Mode (the Background Color is ignored)
=$04					Mstr_Ctrl_Graph_Mode_En = $04       ; Enable the Graphic Mode
=$08					Mstr_Ctrl_Bitmap_En     = $08       ; Enable the Bitmap Module In Vicky
=$10					Mstr_Ctrl_TileMap_En    = $10       ; Enable the Tile Module in Vicky
=$20					Mstr_Ctrl_Sprite_En     = $20       ; Enable the Sprite Module in Vicky
=$40					Mstr_Ctrl_GAMMA_En      = $40       ; this Enable the GAMMA correction - The Analog and DVI have different color value, the GAMMA is great to correct the difference
=$80					Mstr_Ctrl_Disable_Vid   = $80       ; This will disable the Scanning of the Video hence giving 100% bandwith to the CPU
=$af0001				MASTER_CTRL_REG_H       = $AF0001
=$01					Mstr_Ctrl_Video_Mode0   = $01       ; 0 - 640x480 (Clock @ 25.175Mhz), 1 - 800x600 (Clock @ 40Mhz)
=$02					Mstr_Ctrl_Video_Mode1   = $02       ; 0 - No Pixel Doubling, 1- Pixel Doubling (Reduce the Pixel Resolution by 2)
=$af0002				VKY_RESERVED_00         = $AF0002
=$af0003				VKY_RESERVED_01         = $AF0003
=$01					Border_Ctrl_Enable      = $01
=$af0004				BORDER_CTRL_REG         = $AF0004 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$af0005				BORDER_COLOR_B          = $AF0005
=$af0006				BORDER_COLOR_G          = $AF0006
=$af0007				BORDER_COLOR_R          = $AF0007
=$af0008				BORDER_X_SIZE           = $AF0008; X-  Values: 0 - 32 (Default: 32)
=$af0009				BORDER_Y_SIZE           = $AF0009; Y- Values 0 -32 (Default: 32)
=$af000d				BACKGROUND_COLOR_B      = $AF000D ; When in Graphic Mode, if a pixel is "0" then the Background pixel is chosen
=$af000e				BACKGROUND_COLOR_G      = $AF000E
=$af000f				BACKGROUND_COLOR_R      = $AF000F ;
=$af0010				VKY_TXT_CURSOR_CTRL_REG = $AF0010   ;[0]  Enable Text Mode
=$01					Vky_Cursor_Enable       = $01
=$02					Vky_Cursor_Flash_Rate0  = $02
=$04					Vky_Cursor_Flash_Rate1  = $04
=$08					Vky_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10					Vky_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$af0011				VKY_TXT_START_ADD_PTR   = $AF0011   ; This is an offset to change the Starting address of the Text Mode Buffer (in x)
=$af0012				VKY_TXT_CURSOR_CHAR_REG = $AF0012
=$af0013				VKY_TXT_CURSOR_COLR_REG = $AF0013
=$af0014				VKY_TXT_CURSOR_X_REG_L  = $AF0014
=$af0015				VKY_TXT_CURSOR_X_REG_H  = $AF0015
=$af0016				VKY_TXT_CURSOR_Y_REG_L  = $AF0016
=$af0017				VKY_TXT_CURSOR_Y_REG_H  = $AF0017
=$af001b				VKY_LINE_IRQ_CTRL_REG   = $AF001B ;[0] - Enable Line 0, [1] -Enable Line 1
=$af001c				VKY_LINE0_CMP_VALUE_LO  = $AF001C ;Write Only [7:0]
=$af001d				VKY_LINE0_CMP_VALUE_HI  = $AF001D ;Write Only [3:0]
=$af001e				VKY_LINE1_CMP_VALUE_LO  = $AF001E ;Write Only [7:0]
=$af001f				VKY_LINE1_CMP_VALUE_HI  = $AF001F ;Write Only [3:0]
=$af001c				VKY_INFO_CHIP_NUM_L     = $AF001C
=$af001d				VKY_INFO_CHIP_NUM_H     = $AF001D
=$af001e				VKY_INFO_CHIP_VER_L     = $AF001E
=$af001f				VKY_INFO_CHIP_VER_H     = $AF001F
=$01					SPRITE_Enable             = $01
=$02					SPRITE_LUT0               = $02 ; This is the LUT that the Sprite will use
=$04					SPRITE_LUT1               = $04
=$08					SPRITE_LUT2               = $08 ; Only 4 LUT for Now, So this bit is not used.
=$10					SPRITE_DEPTH0             = $10 ; This is the Layer the Sprite will be Displayed in
=$20					SPRITE_DEPTH1             = $20
=$40					SPRITE_DEPTH2             = $40
=$af0200				SP00_CONTROL_REG        = $AF0200
=$af0201				SP00_ADDY_PTR_L         = $AF0201
=$af0202				SP00_ADDY_PTR_M         = $AF0202
=$af0203				SP00_ADDY_PTR_H         = $AF0203
=$af0204				SP00_X_POS_L            = $AF0204
=$af0205				SP00_X_POS_H            = $AF0205
=$af0206				SP00_Y_POS_L            = $AF0206
=$af0207				SP00_Y_POS_H            = $AF0207
=$af0208				SP01_CONTROL_REG        = $AF0208
=$af0209				SP01_ADDY_PTR_L         = $AF0209
=$af020a				SP01_ADDY_PTR_M         = $AF020A
=$af020b				SP01_ADDY_PTR_H         = $AF020B
=$af020c				SP01_X_POS_L            = $AF020C
=$af020d				SP01_X_POS_H            = $AF020D
=$af020e				SP01_Y_POS_L            = $AF020E
=$af020f				SP01_Y_POS_H            = $AF020F
=$af0210				SP02_CONTROL_REG        = $AF0210
=$af0211				SP02_ADDY_PTR_L         = $AF0211
=$af0212				SP02_ADDY_PTR_M         = $AF0212
=$af0213				SP02_ADDY_PTR_H         = $AF0213
=$af0214				SP02_X_POS_L            = $AF0214
=$af0215				SP02_X_POS_H            = $AF0215
=$af0216				SP02_Y_POS_L            = $AF0216
=$af0217				SP02_Y_POS_H            = $AF0217
=$af0218				SP03_CONTROL_REG        = $AF0218
=$af0219				SP03_ADDY_PTR_L         = $AF0219
=$af021a				SP03_ADDY_PTR_M         = $AF021A
=$af021b				SP03_ADDY_PTR_H         = $AF021B
=$af021c				SP03_X_POS_L            = $AF021C
=$af021d				SP03_X_POS_H            = $AF021D
=$af021e				SP03_Y_POS_L            = $AF021E
=$af021f				SP03_Y_POS_H            = $AF021F
=$af0220				SP04_CONTROL_REG        = $AF0220
=$af0221				SP04_ADDY_PTR_L         = $AF0221
=$af0222				SP04_ADDY_PTR_M         = $AF0222
=$af0223				SP04_ADDY_PTR_H         = $AF0223
=$af0224				SP04_X_POS_L            = $AF0224
=$af0225				SP04_X_POS_H            = $AF0225
=$af0226				SP04_Y_POS_L            = $AF0226
=$af0227				SP04_Y_POS_H            = $AF0227
=$af0228				SP05_CONTROL_REG        = $AF0228
=$af0229				SP05_ADDY_PTR_L         = $AF0229
=$af022a				SP05_ADDY_PTR_M         = $AF022A
=$af022b				SP05_ADDY_PTR_H         = $AF022B
=$af022c				SP05_X_POS_L            = $AF022C
=$af022d				SP05_X_POS_H            = $AF022D
=$af022e				SP05_Y_POS_L            = $AF022E
=$af022f				SP05_Y_POS_H            = $AF022F
=$af0230				SP06_CONTROL_REG        = $AF0230
=$af0231				SP06_ADDY_PTR_L         = $AF0231
=$af0232				SP06_ADDY_PTR_M         = $AF0232
=$af0233				SP06_ADDY_PTR_H         = $AF0233
=$af0234				SP06_X_POS_L            = $AF0234
=$af0235				SP06_X_POS_H            = $AF0235
=$af0236				SP06_Y_POS_L            = $AF0236
=$af0237				SP06_Y_POS_H            = $AF0237
=$af0238				SP07_CONTROL_REG        = $AF0238
=$af0239				SP07_ADDY_PTR_L         = $AF0239
=$af023a				SP07_ADDY_PTR_M         = $AF023A
=$af023b				SP07_ADDY_PTR_H         = $AF023B
=$af023c				SP07_X_POS_L            = $AF023C
=$af023d				SP07_X_POS_H            = $AF023D
=$af023e				SP07_Y_POS_L            = $AF023E
=$af023f				SP07_Y_POS_H            = $AF023F
=$af0240				SP08_CONTROL_REG        = $AF0240
=$af0241				SP08_ADDY_PTR_L         = $AF0241
=$af0242				SP08_ADDY_PTR_M         = $AF0242
=$af0243				SP08_ADDY_PTR_H         = $AF0243
=$af0244				SP08_X_POS_L            = $AF0244
=$af0245				SP08_X_POS_H            = $AF0245
=$af0246				SP08_Y_POS_L            = $AF0246
=$af0247				SP08_Y_POS_H            = $AF0247
=$af0248				SP09_CONTROL_REG        = $AF0248
=$af0249				SP09_ADDY_PTR_L         = $AF0249
=$af024a				SP09_ADDY_PTR_M         = $AF024A
=$af024b				SP09_ADDY_PTR_H         = $AF024B
=$af024c				SP09_X_POS_L            = $AF024C
=$af024d				SP09_X_POS_H            = $AF024D
=$af024e				SP09_Y_POS_L            = $AF024E
=$af024f				SP09_Y_POS_H            = $AF024F
=$af0250				SP10_CONTROL_REG        = $AF0250
=$af0251				SP10_ADDY_PTR_L         = $AF0251
=$af0252				SP10_ADDY_PTR_M         = $AF0252
=$af0253				SP10_ADDY_PTR_H         = $AF0253
=$af0254				SP10_X_POS_L            = $AF0254
=$af0255				SP10_X_POS_H            = $AF0255
=$af0256				SP10_Y_POS_L            = $AF0256
=$af0257				SP10_Y_POS_H            = $AF0257
=$af0258				SP11_CONTROL_REG        = $AF0258
=$af0259				SP11_ADDY_PTR_L         = $AF0259
=$af025a				SP11_ADDY_PTR_M         = $AF025A
=$af025b				SP11_ADDY_PTR_H         = $AF025B
=$af025c				SP11_X_POS_L            = $AF025C
=$af025d				SP11_X_POS_H            = $AF025D
=$af025e				SP11_Y_POS_L            = $AF025E
=$af025f				SP11_Y_POS_H            = $AF025F
=$af0260				SP12_CONTROL_REG        = $AF0260
=$af0261				SP12_ADDY_PTR_L         = $AF0261
=$af0262				SP12_ADDY_PTR_M         = $AF0262
=$af0263				SP12_ADDY_PTR_H         = $AF0263
=$af0264				SP12_X_POS_L            = $AF0264
=$af0265				SP12_X_POS_H            = $AF0265
=$af0266				SP12_Y_POS_L            = $AF0266
=$af0267				SP12_Y_POS_H            = $AF0267
=$af0268				SP13_CONTROL_REG        = $AF0268
=$af0269				SP13_ADDY_PTR_L         = $AF0269
=$af026a				SP13_ADDY_PTR_M         = $AF026A
=$af026b				SP13_ADDY_PTR_H         = $AF026B
=$af026c				SP13_X_POS_L            = $AF026C
=$af026d				SP13_X_POS_H            = $AF026D
=$af026e				SP13_Y_POS_L            = $AF026E
=$af026f				SP13_Y_POS_H            = $AF026F
=$af0270				SP14_CONTROL_REG        = $AF0270
=$af0271				SP14_ADDY_PTR_L         = $AF0271
=$af0272				SP14_ADDY_PTR_M         = $AF0272
=$af0273				SP14_ADDY_PTR_H         = $AF0273
=$af0274				SP14_X_POS_L            = $AF0274
=$af0275				SP14_X_POS_H            = $AF0275
=$af0276				SP14_Y_POS_L            = $AF0276
=$af0277				SP14_Y_POS_H            = $AF0277
=$af0278				SP15_CONTROL_REG        = $AF0278
=$af0279				SP15_ADDY_PTR_L         = $AF0279
=$af027a				SP15_ADDY_PTR_M         = $AF027A
=$af027b				SP15_ADDY_PTR_H         = $AF027B
=$af027c				SP15_X_POS_L            = $AF027C
=$af027d				SP15_X_POS_H            = $AF027D
=$af027e				SP15_Y_POS_L            = $AF027E
=$af027f				SP15_Y_POS_H            = $AF027F
=$af0280				SP16_CONTROL_REG        = $AF0280
=$af0281				SP16_ADDY_PTR_L         = $AF0281
=$af0282				SP16_ADDY_PTR_M         = $AF0282
=$af0283				SP16_ADDY_PTR_H         = $AF0283
=$af0284				SP16_X_POS_L            = $AF0284
=$af0285				SP16_X_POS_H            = $AF0285
=$af0286				SP16_Y_POS_L            = $AF0286
=$af0287				SP16_Y_POS_H            = $AF0287
=$af0288				SP17_CONTROL_REG        = $AF0288
=$af0289				SP17_ADDY_PTR_L         = $AF0289
=$af028a				SP17_ADDY_PTR_M         = $AF028A
=$af028b				SP17_ADDY_PTR_H         = $AF028B
=$af028c				SP17_X_POS_L            = $AF028C
=$af028d				SP17_X_POS_H            = $AF028D
=$af028e				SP17_Y_POS_L            = $AF028E
=$af028f				SP17_Y_POS_H            = $AF028F
=$af0500				MOUSE_PTR_GRAP0_START    = $AF0500 ; 16 x 16 = 256 Pixels (Grey Scale) 0 = Transparent, 1 = Black , 255 = White
=$af05ff				MOUSE_PTR_GRAP0_END      = $AF05FF ; Pointer 0
=$af0600				MOUSE_PTR_GRAP1_START    = $AF0600 ;
=$af06ff				MOUSE_PTR_GRAP1_END      = $AF06FF ; Pointer 1
=$af0700				MOUSE_PTR_CTRL_REG_L    = $AF0700 ; Bit[0] Enable, Bit[1] = 0  ( 0 = Pointer0, 1 = Pointer1)
=$af0701				MOUSE_PTR_CTRL_REG_H    = $AF0701 ;
=$af0702				MOUSE_PTR_X_POS_L       = $AF0702 ; X Position (0 - 639) (Can only read now) Writing will have no effect
=$af0703				MOUSE_PTR_X_POS_H       = $AF0703 ;
=$af0704				MOUSE_PTR_Y_POS_L       = $AF0704 ; Y Position (0 - 479) (Can only read now) Writing will have no effect
=$af0705				MOUSE_PTR_Y_POS_H       = $AF0705 ;
=$af0706				MOUSE_PTR_BYTE0         = $AF0706 ; Byte 0 of Mouse Packet (you must write 3 Bytes)
=$af0707				MOUSE_PTR_BYTE1         = $AF0707 ; Byte 1 of Mouse Packet (if you don't, then )
=$af0708				MOUSE_PTR_BYTE2         = $AF0708 ; Byte 2 of Mouse Packet (state Machine will be jammed in 1 state)
=$af070b				C256F_MODEL_MAJOR       = $AF070B ;
=$af070c				C256F_MODEL_MINOR       = $AF070C ;
=$af070d				FPGA_DOR                = $AF070D ;
=$af070e				FPGA_MOR                = $AF070E ;
=$af070f				FPGA_YOR                = $AF070F ;
=$af1f40				FG_CHAR_LUT_PTR         = $AF1F40
=$af1f80				BG_CHAR_LUT_PTR		      = $AF1F80
=$af2000				GRPH_LUT0_PTR		        = $AF2000
=$af2400				GRPH_LUT1_PTR		        = $AF2400
=$af2800				GRPH_LUT2_PTR		        = $AF2800
=$af2c00				GRPH_LUT3_PTR		        = $AF2C00
=$af3000				GRPH_LUT4_PTR		        = $AF3000
=$af3400				GRPH_LUT5_PTR		        = $AF3400
=$af3800				GRPH_LUT6_PTR		        = $AF3800
=$af3c00				GRPH_LUT7_PTR		        = $AF3C00
=$af4000				GAMMA_B_LUT_PTR		      = $AF4000
=$af4100				GAMMA_G_LUT_PTR		      = $AF4100
=$af4200				GAMMA_R_LUT_PTR		      = $AF4200
=$af5000				TILE_MAP0       		    = $AF5000     ;$AF5000 - $AF57FF
=$af5800				TILE_MAP1               = $AF5800     ;$AF5800 - $AF5FFF
=$af6000				TILE_MAP2               = $AF6000     ;$AF6000 - $AF67FF
=$af6800				TILE_MAP3               = $AF6800     ;$AF6800 - $AF6FFF
=$af8000				FONT_MEMORY_BANK0       = $AF8000     ;$AF8000 - $AF87FF
=$af8800				FONT_MEMORY_BANK1       = $AF8800     ;$AF8800 - $AF8FFF
=$afa000				CS_TEXT_MEM_PTR         = $AFA000
=$afc000				CS_COLOR_MEM_PTR        = $AFC000
=$afe000				BTX_START               = $AFE000     ; BEATRIX Registers
=$afffff				BTX_END                 = $AFFFFF

;******  Processing file: src\VKYII_CFP9553_BITMAP_def.asm

=$af0100				BM0_CONTROL_REG     = $AF0100
=$af0101				BM0_START_ADDY_L    = $AF0101
=$af0102				BM0_START_ADDY_M    = $AF0102
=$af0103				BM0_START_ADDY_H    = $AF0103
=$af0104				BM0_X_OFFSET        = $AF0104
=$af0105				BM0_Y_OFFSET        = $AF0105
=$af0106				BM0_PRIORITY        = $AF0106
=$af0107				BM0_RESERVED_7      = $AF0107
=$af0108				BM1_CONTROL_REG     = $AF0108
=$af0109				BM1_START_ADDY_L    = $AF0109
=$af010a				BM1_START_ADDY_M    = $AF010A
=$af010b				BM1_START_ADDY_H    = $AF010B
=$af010c				BM1_X_OFFSET        = $AF010C
=$af010d				BM1_Y_OFFSET        = $AF010D
=$af010e				BM1_PRIORITY        = $AF010E
=$af010f				BM1_RESERVED_7      = $AF010F

;******  Return to file: src\vicky_ii_def.asm


;******  Processing file: src\VKYII_CFP9553_TILEMAP_def.asm

=$01					TILE_Enable             = $01
=$af0200				TL0_CONTROL_REG         = $AF0200       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0201				TL0_START_ADDY_L        = $AF0201       ; Not USed right now - Starting Address to where is the MAP
=$af0202				TL0_START_ADDY_M        = $AF0202
=$af0203				TL0_START_ADDY_H        = $AF0203
=$af0204				TL0_TOTAL_X_SIZE_L      = $AF0204       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0205				TL0_TOTAL_X_SIZE_H      = $AF0205
=$af0206				TL0_TOTAL_Y_SIZE_L      = $AF0206       ; Size of the Map in Y Tile Count [9:0]
=$af0207				TL0_TOTAL_Y_SIZE_H      = $AF0207
=$af0208				TL0_WINDOW_X_POS_L      = $AF0208       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0209				TL0_WINDOW_X_POS_H      = $AF0209       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af020a				TL0_WINDOW_Y_POS_L      = $AF020A       ; Top Left Corner Position of the TileMAp Window in Y
=$af020b				TL0_WINDOW_Y_POS_H      = $AF020B       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af020c				TL1_CONTROL_REG         = $AF020C       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af020d				TL1_START_ADDY_L        = $AF020D       ; Not USed right now - Starting Address to where is the MAP
=$af020e				TL1_START_ADDY_M        = $AF020E
=$af020f				TL1_START_ADDY_H        = $AF020F
=$af0210				TL1_TOTAL_X_SIZE_L      = $AF0210       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0211				TL1_TOTAL_X_SIZE_H      = $AF0211
=$af0212				TL1_TOTAL_Y_SIZE_L      = $AF0212       ; Size of the Map in Y Tile Count [9:0]
=$af0213				TL1_TOTAL_Y_SIZE_H      = $AF0213
=$af0214				TL1_WINDOW_X_POS_L      = $AF0214       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0215				TL1_WINDOW_X_POS_H      = $AF0215       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0216				TL1_WINDOW_Y_POS_L      = $AF0216       ; Top Left Corner Position of the TileMAp Window in Y
=$af0217				TL1_WINDOW_Y_POS_H      = $AF0217       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0218				TL2_CONTROL_REG         = $AF0218       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0219				TL2_START_ADDY_L        = $AF0219       ; Not USed right now - Starting Address to where is the MAP
=$af021a				TL2_START_ADDY_M        = $AF021A
=$af021b				TL2_START_ADDY_H        = $AF021B
=$af021c				TL2_TOTAL_X_SIZE_L      = $AF021C       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af021d				TL2_TOTAL_X_SIZE_H      = $AF021D
=$af021e				TL2_TOTAL_Y_SIZE_L      = $AF021E       ; Size of the Map in Y Tile Count [9:0]
=$af021f				TL2_TOTAL_Y_SIZE_H      = $AF021F
=$af0220				TL2_WINDOW_X_POS_L      = $AF0220       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0221				TL2_WINDOW_X_POS_H      = $AF0221       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0222				TL2_WINDOW_Y_POS_L      = $AF0222       ; Top Left Corner Position of the TileMAp Window in Y
=$af0223				TL2_WINDOW_Y_POS_H      = $AF0223       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0224				TL3_CONTROL_REG         = $AF0224       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0225				TL3_START_ADDY_L        = $AF0225       ; Not USed right now - Starting Address to where is the MAP
=$af0226				TL3_START_ADDY_M        = $AF0226
=$af0227				TL3_START_ADDY_H        = $AF0227
=$af0228				TL3_TOTAL_X_SIZE_L      = $AF0228       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0229				TL3_TOTAL_X_SIZE_H      = $AF0229
=$af022a				TL3_TOTAL_Y_SIZE_L      = $AF022A       ; Size of the Map in Y Tile Count [9:0]
=$af022b				TL3_TOTAL_Y_SIZE_H      = $AF022B
=$af022c				TL3_WINDOW_X_POS_L      = $AF022C       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af022d				TL3_WINDOW_X_POS_H      = $AF022D       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af022e				TL3_WINDOW_Y_POS_L      = $AF022E       ; Top Left Corner Position of the TileMAp Window in Y
=$af022f				TL3_WINDOW_Y_POS_H      = $AF022F       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0280				TILESET0_ADDY_L         = $AF0280   ; Pointer to Tileset 0 [21:0]
=$af0281				TILESET0_ADDY_M         = $AF0281
=$af0282				TILESET0_ADDY_H         = $AF0282
=$af0283				TILESET0_ADDY_CFG       = $AF0283   ; [3] - TileStride256x256 [2:0] LUT
=$af0284				TILESET1_ADDY_L         = $AF0284
=$af0285				TILESET1_ADDY_M         = $AF0285
=$af0286				TILESET1_ADDY_H         = $AF0286
=$af0287				TILESET1_ADDY_CFG       = $AF0287
=$af0288				TILESET2_ADDY_L         = $AF0288
=$af0289				TILESET2_ADDY_M         = $AF0289
=$af028a				TILESET2_ADDY_H         = $AF028A
=$af028b				TILESET2_ADDY_CFG       = $AF028B
=$af028c				TILESET3_ADDY_L         = $AF028C
=$af028d				TILESET3_ADDY_M         = $AF028D
=$af028e				TILESET3_ADDY_H         = $AF028E
=$af028f				TILESET3_ADDY_CFG       = $AF028F
=$af0290				TILESET4_ADDY_L         = $AF0290
=$af0291				TILESET4_ADDY_M         = $AF0291
=$af0292				TILESET4_ADDY_H         = $AF0292
=$af0293				TILESET4_ADDY_CFG       = $AF0293
=$af0294				TILESET5_ADDY_L         = $AF0294
=$af0295				TILESET5_ADDY_M         = $AF0295
=$af0296				TILESET5_ADDY_H         = $AF0296
=$af0297				TILESET5_ADDY_CFG       = $AF0297
=$af0298				TILESET6_ADDY_L         = $AF0298
=$af0299				TILESET6_ADDY_M         = $AF0299
=$af029a				TILESET6_ADDY_H         = $AF029A
=$af029b				TILESET6_ADDY_CFG       = $AF029B
=$af029c				TILESET7_ADDY_L         = $AF029C
=$af029d				TILESET7_ADDY_M         = $AF029D
=$af029e				TILESET7_ADDY_H         = $AF029E
=$af029f				TILESET7_ADDY_CFG       = $AF029F

;******  Return to file: src\vicky_ii_def.asm


;******  Processing file: src\VKYII_CFP9553_VDMA_def.asm

=$af0400				VDMA_CONTROL_REG        = $AF0400
=$01					VDMA_CTRL_Enable        = $01
=$02					VDMA_CTRL_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04					VDMA_CTRL_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08					VDMA_CTRL_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10					VDMA_CTRL_SysRAM_Src    = $10     ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20					VDMA_CTRL_SysRAM_Dst    = $20     ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$80					VDMA_CTRL_Start_TRF     = $80     ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0401				VDMA_BYTE_2_WRITE       = $AF0401 ; Write Only - Byte to Write in the Fill Function
=$af0401				VDMA_STATUS_REG         = $AF0401 ; Read only
=$01					VDMA_STAT_Size_Err      = $01     ; If Set to 1, Overall Size is Invalid
=$02					VDMA_STAT_Dst_Add_Err   = $02     ; If Set to 1, Destination Address Invalid
=$04					VDMA_STAT_Src_Add_Err   = $04     ; If Set to 1, Source Address Invalid
=$80					VDMA_STAT_VDMA_IPS      = $80     ; If Set to 1, VDMA Transfer in Progress (this Inhibit CPU Access to Mem)
=$af0402				VDMA_SRC_ADDY_L         = $AF0402 ; Pointer to the Source of the Data to be stransfered
=$af0403				VDMA_SRC_ADDY_M         = $AF0403 ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0404				VDMA_SRC_ADDY_H         = $AF0404
=$af0405				VDMA_DST_ADDY_L         = $AF0405 ; Destination Pointer within Vicky's video memory Range
=$af0406				VDMA_DST_ADDY_M         = $AF0406 ; ($00_0000 - $3F_0000)
=$af0407				VDMA_DST_ADDY_H         = $AF0407
=$af0408				VDMA_SIZE_L             = $AF0408 ; Maximum Value: $40:0000 (4Megs)
=$af0409				VDMA_SIZE_M             = $AF0409
=$af040a				VDMA_SIZE_H             = $AF040A
=$af040b				VDMA_IGNORED            = $AF040B
=$af0408				VDMA_X_SIZE_L           = $AF0408 ; Maximum Value: 65535
=$af0409				VDMA_X_SIZE_H           = $AF0409
=$af040a				VDMA_Y_SIZE_L           = $AF040A ; Maximum Value: 65535
=$af040b				VDMA_Y_SIZE_H           = $AF040B
=$af040c				VDMA_SRC_STRIDE_L       = $AF040C ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040d				VDMA_SRC_STRIDE_H       = $AF040D ;
=$af040e				VDMA_DST_STRIDE_L       = $AF040E ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040f				VDMA_DST_STRIDE_H       = $AF040F ;

;******  Return to file: src\vicky_ii_def.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\super_io_def.asm

=$af1100				PME_STS_REG     = $AF1100
=$af1102				PME_EN_REG		  = $AF1102
=$af1104				PME_STS1_REG		= $AF1104
=$af1105				PME_STS2_REG		= $AF1105
=$af1106				PME_STS3_REG		= $AF1106
=$af1107				PME_STS4_REG		= $AF1107
=$af1108				PME_STS5_REG		= $AF1108
=$af110a				PME_EN1_REG     = $AF110A
=$af110b				PME_EN2_REG     = $AF110B
=$af110c				PME_EN3_REG     = $AF110C
=$af110d				PME_EN4_REG     = $AF110D
=$af110e				PME_EN5_REG     = $AF110E
=$af1110				SMI_STS1_REG		= $AF1110
=$af1111				SMI_STS2_REG		= $AF1111
=$af1112				SMI_STS3_REG		= $AF1112
=$af1113				SMI_STS4_REG		= $AF1113
=$af1114				SMI_STS5_REG		= $AF1114
=$af1116				SMI_EN1_REG     = $AF1116
=$af1117				SMI_EN2_REG     = $AF1117
=$af1118				SMI_EN3_REG     = $AF1118
=$af1119				SMI_EN4_REG     = $AF1119
=$af111a				SMI_EN5_REG     = $AF111A
=$af111c				MSC_ST_REG      = $AF111C
=$af111e				FORCE_DISK_CHANGE       = $AF111E
=$af111f				FLOPPY_DATA_RATE        = $AF111F
=$af1120				UART1_FIFO_CTRL_SHDW    = $AF1120
=$af1121				UART2_FIFO_CTRL_SHDW    = $AF1121
=$af1122				DEV_DISABLE_REG         = $AF1122
=$af1123				GP10_REG    		= $AF1123
=$af1124				GP11_REG    		= $AF1124
=$af1125				GP12_REG    		= $AF1125
=$af1126				GP13_REG    		= $AF1126
=$af1127				GP14_REG    		= $AF1127
=$af1128				GP15_REG    		= $AF1128
=$af1129				GP16_REG    		= $AF1129
=$af112a				GP17_REG    		= $AF112A
=$af112b				GP20_REG    		= $AF112B
=$af112c				GP21_REG    		= $AF112C
=$af112d				GP22_REG		= $AF112D
=$af112f				GP24_REG		= $AF112F
=$af1130				GP25_REG		= $AF1130
=$af1131				GP26_REG		= $AF1131
=$af1132				GP27_REG		= $AF1132
=$af1133				GP30_REG		= $AF1133
=$af1134				GP31_REG		= $AF1134
=$af1135				GP32_REG		= $AF1135
=$af1136				GP33_REG		= $AF1136
=$af1137				GP34_REG		= $AF1137
=$af1138				GP35_REG		= $AF1138
=$af1139				GP36_REG		= $AF1139
=$af113a				GP37_REG		= $AF113A
=$af113b				GP40_REG		= $AF113B
=$af113c				GP41_REG		= $AF113C
=$af113d				GP42_REG		= $AF113D
=$af113e				GP43_REG		= $AF113E
=$af113f				GP50_REG		= $AF113F
=$af1140				GP51_REG		= $AF1140
=$af1141				GP52_REG		= $AF1141
=$af1142				GP53_REG		= $AF1142
=$af1143				GP54_REG		= $AF1143
=$af1144				GP55_REG		= $AF1144
=$af1145				GP56_REG		= $AF1145
=$af1146				GP57_REG		= $AF1146
=$af1147				GP60_REG		= $AF1147
=$af1148				GP61_REG		= $AF1148
=$af114b				GP1_REG			= $AF114B
=$af114c				GP2_REG			= $AF114C
=$af114d				GP3_REG			= $AF114D
=$af114e				GP4_REG			= $AF114E
=$af114f				GP5_REG			= $AF114F
=$af1150				GP6_REG			= $AF1150
=$af1156				FAN1_REG		        = $AF1156
=$af1157				FAN2_REG            = $AF1157
=$af1158				FAN_CTRL_REG  	    = $AF1158
=$af1159				FAN1_TACH_REG       = $AF1159
=$af115a				FAN2_TACH_REG       = $AF115A
=$af115b				FAN1_PRELOAD_REG    = $AF115B
=$af115c				FAN2_PRELOAD_REG    = $AF115C
=$af115d				LED1_REG    		    = $AF115D
=$af115e				LED2_REG    		    = $AF115E
=$af115f				KEYBOARD_SCAN_CODE	= $AF115F

;******  Return to file: src\kernel.asm


;******  Processing file: src\keyboard_def.asm

=$af1064				STATUS_PORT 	= $AF1064
=$af1060				KBD_OUT_BUF 	= $AF1060
=$af1060				KBD_INPT_BUF	= $AF1060
=$af1064				KBD_CMD_BUF		= $AF1064
=$af1060				KBD_DATA_BUF	= $AF1060
=$af1060				PORT_A		    = $AF1060
=$af1061				PORT_B			= $AF1061
=$01					OUT_BUF_FULL    = $01
=$02					INPT_BUF_FULL	= $02
=$04					SYS_FLAG		= $04
=$08					CMD_DATA		= $08
=$10					KEYBD_INH       = $10
=$20					TRANS_TMOUT	    = $20
=$40					RCV_TMOUT		= $40
=$80					PARITY_EVEN		= $80
=$10					INH_KEYBOARD	= $10
=$ae					KBD_ENA			= $AE
=$ad					KBD_DIS			= $AD
=$f1					KB_MENU			= $F1
=$f4					KB_ENABLE		= $F4
=$f7					KB_MAKEBREAK    = $F7
=$fe					KB_ECHO			= $FE
=$ff					KB_RESET		= $FF
=$ed					KB_LED_CMD		= $ED
=$aa					KB_OK			= $AA
=$fa					KB_ACK			= $FA
=$ff					KB_OVERRUN		= $FF
=$fe					KB_RESEND		= $FE
=$f0					KB_BREAK		= $F0
=$10					KB_FA			= $10
=$20					KB_FE			= $20
=$40					KB_PR_LED		= $40
=$01					KB_SCROLL_LOCK  = $01
=$02					KB_NUM_LOCK     = $02
=$04					KB_CAPS_LOCK    = $04
=$80					KB_CTRL_C = $80             ; CTRL-C was pressed
=$60					KB_CREDITS = $60            ; Credits key was pressed

;******  Return to file: src\kernel.asm


;******  Processing file: src\SID_def.asm

=$afe400				SID0_V1_FREQ_LO    = $AFE400 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$afe401				SID0_V1_FREQ_HI    = $AFE401 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$afe402				SID0_V1_PW_LO      = $AFE402 ;SID - L - Voice 1 (Write Only) - PW LOW
=$afe403				SID0_V1_PW_HI      = $AFE403 ;SID - L - Voice 1 (Write Only) - PW HI
=$afe404				SID0_V1_CTRL       = $AFE404 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$afe405				SID0_V1_ATCK_DECY  = $AFE405 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$afe406				SID0_V1_SSTN_RLSE  = $AFE406 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$afe407				SID0_V2_FREQ_LO    = $AFE407 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$afe408				SID0_V2_FREQ_HI    = $AFE408 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$afe409				SID0_V2_PW_LO      = $AFE409 ;SID - L - Voice 2 (Write Only) - PW LOW
=$afe40a				SID0_V2_PW_HI      = $AFE40A ;SID - L - Voice 2 (Write Only) - PW HI
=$afe40b				SID0_V2_CTRL       = $AFE40B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$afe40c				SID0_V2_ATCK_DECY  = $AFE40C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$afe40d				SID0_V2_SSTN_RLSE  = $AFE40D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$afe40e				SID0_V3_FREQ_LO    = $AFE40E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$afe40f				SID0_V3_FREQ_HI    = $AFE40F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$afe410				SID0_V3_PW_LO      = $AFE410 ;SID - L - Voice 3 (Write Only) - PW LOW
=$afe411				SID0_V3_PW_HI      = $AFE411 ;SID - L - Voice 3 (Write Only) - PW HI
=$afe412				SID0_V3_CTRL       = $AFE412 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$afe413				SID0_V3_ATCK_DECY  = $AFE413 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$afe414				SID0_V3_SSTN_RLSE  = $AFE414 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$afe415				SID0_FC_LO         = $AFE415 ;SID - L - Filter (Write Only) - FC LOW
=$afe416				SID0_FC_HI         = $AFE416 ;SID - L - Filter (Write Only) - FC HI
=$afe417				SID0_RES_FILT      = $AFE417 ;SID - L - Filter (Write Only) - RES / FILT
=$afe418				SID0_MODE_VOL      = $AFE418 ;SID - L - Filter (Write Only) - MODE / VOL
=$afe419				SID0_POT_X         = $AFE419 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$afe41a				SID0_POT_Y         = $AFE41A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$afe41b				SID0_OSC3_RND      = $AFE41B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$afe41c				SID0_ENV3          = $AFE41C ;SID - L - Misc (Read Only)  - ENV3
=$afe41d				SID0_NOT_USED0     = $AFE41D ;SID - L - NOT USED
=$afe41e				SID0_NOT_USED1     = $AFE41E ;SID - L - NOT USED
=$afe41f				SID0_NOT_USED2     = $AFE41F ;SID - L - NOT USED

;******  Return to file: src\kernel.asm


;******  Processing file: src\RTC_def.asm

=$af0800				RTC_SEC       = $AF0800 ;Seconds Register
=$af0801				RTC_SEC_ALARM = $AF0801 ;Seconds Alarm Register
=$af0802				RTC_MIN       = $AF0802 ;Minutes Register
=$af0803				RTC_MIN_ALARM = $AF0803 ;Minutes Alarm Register
=$af0804				RTC_HRS       = $AF0804 ;Hours Register
=$af0805				RTC_HRS_ALARM = $AF0805 ;Hours Alarm Register
=$af0806				RTC_DAY       = $AF0806 ;Day Register
=$af0807				RTC_DAY_ALARM = $AF0807 ;Day Alarm Register
=$af0808				RTC_DOW       = $AF0808 ;Day of Week Register
=$af0809				RTC_MONTH     = $AF0809 ;Month Register
=$af080a				RTC_YEAR      = $AF080A ;Year Register
=$af080b				RTC_RATES     = $AF080B ;Rates Register
=$af080c				RTC_ENABLE    = $AF080C ;Enables Register
=$af080d				RTC_FLAGS     = $AF080D ;Flags Register
=$af080e				RTC_CTRL      = $AF080E ;Control Register
=$af080f				RTC_CENTURY   = $AF080F ;Century Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\io_def.asm

=0					CHAN_CONSOLE  = 0           ; ID for screen and keyboard access
=1					CHAN_COM1     = 1           ; ID for serial access on COM1 (external port)
=2					CHAN_COM2     = 2           ; ID for serial access on COM2 (internal port)
=3					CHAN_LPT      = 3           ; ID for parallel port
=$afe810				SDCARD_DATA   = $AFE810     ;(R/W) SDCARD (CH376S) Data PORT_A (A0 = 0)
=$afe811				SDCARD_CMD    = $AFE811     ;(R/W) SDCARD (CH376S) CMD/STATUS Port (A0 = 1)
=$afe812				SDCARD_STAT   = $AFE812     ;(R) SDCARD (Bit[0] = CD, Bit[1] = WP)
=$afe900				CODEC_DATA_LO = $AFE900     ;(W) LSB of Add/Data Reg to Control CODEC See WM8776 Spec
=$afe901				CODEC_DATA_HI = $AFE901     ;(W) MSB od Add/Data Reg to Control CODEC See WM8776 Spec
=$afe902				CODEC_WR_CTRL = $AFE902     ;(W) Bit[0] = 1 -> Start Writing the CODEC Control Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\Trinity_CFP9301_def.asm

=$afe800				JOYSTICK0           = $AFE800   ;(R) Joystick 0 - J7 (next to SD Card)
=$afe801				JOYSTICK1           = $AFE801   ;(R) Joystick 1 - J8
=$afe802				JOYSTICK2           = $AFE802   ;(R) Joystick 2 - J9
=$afe803				JOYSTICK3           = $AFE803   ;(R) Joystick 3 - J10 (Next to Buzzer)
=$afe804				JOYSTICK_MODE       = $AFE804
=$01					NES_SNES_EN0        = $01       ; Enable the NES/SNES Mode on Port 0
=$02					NES_SNES_EN1        = $02       ; Enable the NES/SNES Mode on Port 1
=$04					NES_SNES_JOY        = $04       ; 0 = NES, 1 = SNES
=$40					NES_SNES_DONE       = $40       ; Poll to see if the Deserializer is done
=$80					NES_SNES_TRIG       = $80       ; Set to start the Serializer
=$afe805				REVOFPCB_C          = $AFE805   ; You should read the ASCCII for "C"
=$afe806				REVOFPCB_4          = $AFE806   ; You should read the ASCCII for "4"
=$afe807				REVOFPCB_A          = $AFE807   ; You should read the ASCCII for "A"
=$afe808				NES_SNES0_DAT_LO    = $AFE808   ; Contains the 8bits From NES and SNES
=$afe809				SNES0_DAT_HI0       = $AFE809   ; Contains the extra 4 bit from the SNES Controller
=$afe80a				NES_SNES1_DAT_LO    = $AFE80A
=$afe80b				SNES1_DAT_HI0       = $AFE80B
=$afe80c				CFP9301_REV         = $AFE80C   ; Hardware Revision of the CPLD Code
=$afe80d				DIP_USER            = $AFE80D   ; Dip Switch 3/4/5 can be user Defined
=$afe80e				DIP_BOOTMODE        = $AFE80E
=$01					BOOT_MODE0          = $01
=$02					BOOT_MODE1          = $02
=$80					HD_INSTALLED        = $80
=$00					DIP_BOOT_IDE        = $00
=$01					DIP_BOOT_SDCARD     = $01
=$02					DIP_BOOT_FLOPPY     = $02
=$03					DIP_BOOT_BASIC      = $03

;******  Return to file: src\kernel.asm


;******  Processing file: src\Unity_CFP9307_def.asm

=$afe830				IDE_DATA      = $AFE830 ; 8-Bit Access here Only
=$afe831				IDE_ERROR     = $AFE831 ; Error Information register (only read when there is an error ) - Probably clears Error Bits
=$afe832				IDE_SECT_CNT  = $AFE832 ; Sector Count Register (also used to pass parameter for timeout for IDLE modus Command)
=$afe833				IDE_SECT_SRT  = $AFE833 ; Start Sector Register (0 = 256), so start @ 1
=$afe834				IDE_CLDR_LO   = $AFE834 ; Low Byte of Cylinder Numnber {7:0}
=$afe835				IDE_CLDR_HI   = $AFE835 ;  Hi Byte of Cylinder Number {9:8} (1023-0).
=$afe836				IDE_HEAD      = $AFE836 ; Head, device select, {3:0} HEad Number, 4 -> 0:Master, 1:Slave, {7:5} = 101 (legacy);
=$afe837				IDE_CMD_STAT  = $AFE837 ; Command/Status Register - Reading this will clear the Interrupt Registers
=$afe838				IDE_DATA_LO   = $AFE838 ; 16-bit access here
=$afe839				IDE_DATA_HI   = $AFE839 ;
=$01					IDE_ERR_AMNF = $01      ; Error: Address mark not found
=$02					IDE_ERR_TKZNF = $02     ; Error: Track 0 not found
=$04					IDE_ERR_ABRT = $04      ; Error: Aborted command
=$08					IDE_ERR_MCR = $08       ; Error: Media change request
=$10					IDE_ERR_IDNF = $10      ; Error: ID not found
=$20					IDE_ERR_MC = $20        ; Error: Media change
=$40					IDE_ERR_UNC = $40       ; Error: Uncorrectable data error
=$80					IDE_ERR_BBK = $80       ; Error: Bad block detected
=$80					IDE_STAT_BSY = $80      ; BSY (Busy) is set whenever the device has control of the command Block Registers.
=$40					IDE_STAT_DRDY = $40     ; DRDY (Device Ready) is set to indicate that the device is capable of accepting all command codes.
=$20					IDE_STAT_DF = $20       ; DF (Device Fault) indicates a device fault error has been detected.
=$10					IDE_STAT_DSC = $10      ; DSC (Device Seek Complete) indicates that the device heads are settled over a track.
=$08					IDE_STAT_DRQ = $08      ; DRQ (Data Request) indicates that the device is ready to transfer a word or byte of data between
=$04					IDE_STAT_CORR = $04     ; CORR (Corrected Data) is used to indicate a correctable data error.
=$02					IDE_STAT_IDX = $02      ; Vendor specific bit
=$01					IDE_STAT_ERR = $01      ; ERR (Error) indicates that an error occurred during execution of the previous command.
=$ec					IDE_CMD_IDENTIFY = $EC      ; Get device identification data
=$21					IDE_CMD_READ_SECTOR = $21   ; Read 1 or more sectors
=$30					IDE_CMD_WRITE_SECTOR = $30  ; Write 1 or more sectors

;******  Return to file: src\kernel.asm


;******  Processing file: src\GABE_Control_Registers_def.asm

=$afe880				GABE_MSTR_CTRL      = $AFE880
=$01					GABE_CTRL_PWR_LED   = $01     ; Controls the LED in the Front of the case (Next to the reset button)
=$02					GABE_CTRL_SDC_LED   = $02     ; Controls the LED in the Front of the Case (Next to SDCard)
=$10					GABE_CTRL_BUZZER    = $10     ; Controls the Buzzer
=$80					GABE_CTRL_WRM_RST   = $80     ; Warm Reset (needs to Setup other registers)
=$afe881				GABE_NOTUSED        = $AFE881 ; Reserved for future use
=$afe882				GABE_RST_AUTH0      = $AFE882 ; Must Contain the BYTE $AD for Reset to Activate
=$afe883				GABE_RST_AUTH1      = $AFE883 ; Must Contain the BYTE $DE for Reset to Activate
=$afe884				GABE_RNG_DAT_LO     = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885				GABE_RNG_DAT_HI     = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe884				GABE_RNG_SEED_LO    = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885				GABE_RNG_SEED_HI    = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe886				GABE_RNG_STAT       = $AFE886 ;
=$80					GABE_RNG_LFSR_DONE  = $80     ; indicates that Output = SEED Database
=$afe886				GABE_RNG_CTRL       = $AFE886 ;
=$01					GABE_RNG_CTRL_EN    = $01     ; Enable the LFSR BLOCK_LEN
=$02					GABE_RNG_CTRL_DV    = $02     ; After Setting the Seed Value, Toggle that Bit for it be registered
=$afe887				GABE_SYS_STAT       = $AFE887 ;
=$01					GABE_SYS_STAT_MID0  = $01     ; Machine ID -- LSB
=$02					GABE_SYS_STAT_MID1  = $02     ; Machine ID -- MSB
=$08					GABE_SYS_STAT_EXP   = $08     ; if Zero, there is an Expansion Card Preset
=$40					GABE_SYS_STAT_CPUA  = $40     ; Indicates the (8bit/16bit) Size of the Accumulator
=$80					GABE_SYS_STAT_CPUX  = $80     ; Indicates the (8bit/16bit) Size of the Accumulator

;******  Return to file: src\kernel.asm


;******  Processing file: src\fdc_inc.asm

=$af13f0				SIO_FDC  = $AF13F0
=$af13f0				SIO_FDC_SRA = $AF13F0 ; Read Only - Status Register A (not used in AT mode)
=$af13f1				SIO_FDC_SRB = $AF13F1 ; Read Only - Status Register B (not used in AT mode)
=$af13f2				SIO_FDC_DOR = $AF13F2 ; Read/Write - Digital Output Register
=$01					FDC_DOR_DSEL0 = $01     ; Drive 0 Select
=$02					FDC_DOR_DSEL1 = $02     ; Drive 1 Select
=$04					FDC_DOR_NRESET = $04    ; Reset the FDC
=$08					FDC_DOR_DMAEN = $08     ; Enable DMA
=$10					FDC_DOR_MOT0  = $10     ; Turn on motor 0
=$20					FDC_DOR_MOT1  = $20     ; Turn on motor 1
=$40					FDC_DOR_MOT2  = $40     ; Turn on motor 2
=$80					FDC_DOR_MOT3  = $80     ; Turn on motor 3
=$af13f3				SIO_FDC_TSR = $AF13F3   ; Read/Write - Tape Drive Status (not used on the C256)
=$af13f4				SIO_FDC_MSR = $AF13F4   ; Read - Main Status Register
=$01					FDC_MSR_DRV0BSY = $01   ; Indicates if drive 0 is busy
=$02					FDC_MSR_DRV1BSY = $02   ; Indicates if drive 1 is busy
=$10					FDC_MSR_CMDBSY = $10    ; Indicates if a command is in progress
=$20					FDC_MSR_NONDMA = $20    ;
=$40					FDC_MSR_DIO = $40       ; Data direction: 1 = read, 0 = write
=$80					FDC_MSR_RQM = $80       ; 1 = host can transfer data, 0 = host must wait
=$af13f4				SIO_FDC_DSR = $AF13F4   ; Write - Data Select Register
=$40					FDC_DSR_LOPWR = $40     ; Turn on low power mode
=$80					FDC_DSR_RESET = $80     ; Software reset of the FDC
=$af13f5				SIO_FDC_DTA = $AF13F5   ; Read/Write - Data - FIFO
=$af13f6				SIO_FDC_RSV = $AF13F6   ; Reserved
=$af13f7				SIO_FDC_DIR = $AF13F7   ; Read - Digital Input Register
=$80					FDC_DIR_DSKCHG = $80    ; Indicates if the disk has changed
=$af13f7				SIO_FDC_CCR = $AF13F7   ; Write - Configuration Control Register
=$03					FDC_ST0_DRVSEL = $03    ; Mask for the current selected drive
=$04					FDC_ST0_HEAD = $04      ; Bit for the current selected head
=$08					FDC_ST0_EC = $08        ; Bit for EQUIPMENT CHECK, error in recalibrate or relative seek
=$10					FDC_ST0_SEEKEND = $10   ; The FDC completed a seek, relative seek, or recalibrate
=$c0					FDC_ST0_INTCODE = $C0   ; Mask for interrupt code:
=$01					FDC_ST1_MA = $01        ; Missing address mark
=$02					FDC_ST1_NW = $02        ; Not writable (disk is write protected)
=$04					FDC_ST1_ND = $04        ; No data
=$10					FDC_ST1_OR = $10        ; Overrun/underrun of the data
=$20					FDC_ST1_DE = $20        ; Data error... a CRC check failed
=$80					FDC_ST1_EN = $80        ; End of cylinder: tried to acess a sector not on the track
=$01					FDC_ST2_MD = $01        ; Missing address mark: FDC cannot detect a data address mark
=$02					FDC_ST2_BC = $02        ; Bad cylinder
=$10					FDC_ST2_WC = $10        ; Wrong cylinder: track is not the same as expected
=$20					FDC_ST2_DD = $20        ; Data error in field: CRC error
=$40					FDC_ST2_CM = $40        ; Control mark
=$03					FDC_ST3_DRVSEL = $03    ; Drive select mask
=$04					FDC_ST3_HEAD = $04      ; Head address bit
=$10					FDC_ST3_TRACK0 = $10    ; Track 0: Status of the TRK0 pin
=$40					FDC_ST3_WP = $40        ; Write Protect: status of the WP pin
=2					FDC_CMD_READ_TRACK          = 2
=3					FDC_CMD_SPECIFY             = 3
=4					FDC_CMD_SENSE_DRIVE_STATUS  = 4
=5					FDC_CMD_WRITE_DATA          = 5
=6					FDC_CMD_READ_DATA           = 6
=7					FDC_CMD_RECALIBRATE         = 7
=8					FDC_CMD_SENSE_INTERRUPT     = 8
=9					FDC_CMD_WRITE_DELETED_DATA  = 9
=10					FDC_CMD_READ_ID             = 10
=12					FDC_CMD_READ_DELETED_DATA   = 12
=13					FDC_CMD_FORMAT_TRACK        = 13
=14					FDC_CMD_DUMPREG             = 14
=15					FDC_CMD_SEEK                = 15
=16					FDC_CMD_VERSION             = 16
=17					FDC_CMD_SCAN_EQUAL          = 17
=18					FDC_CMD_PERPENDICULAR_MODE  = 18
=19					FDC_CMD_CONFIGURE           = 19
=20					FDC_CMD_LOCK                = 20
=22					FDC_CMD_VERIFY              = 22
=25					FDC_CMD_SCAN_LOW_OR_EQUAL   = 25
=29					FDC_CMD_SCAN_HIGH_OR_EQUAL  = 29
=$80					FDC_CMD_MT = $80                    ; Command bit to turn on multi-track
=$40					FDC_CMD_MFM = $40                   ; Command bit to operate in MFM format
=$20					FDC_CMD_SK = $20                    ; Command bit to skip deleted sectors
=$40					FDC_CMD_EIS = $40                   ; Command bit to turn on implied seek
=1					FDC_DEVCMD_MOTOR_ON         = 1     ; Device code to turn the motor on
=2					FDC_DEVCMD_MOTOR_OFF        = 2     ; Device code to turn the motor off
=3					FDC_DEVCMD_RECAL            = 3     ; Device code to recalibrate the drive

;******  Return to file: src\kernel.asm


;******  Processing file: src\timer_def.asm

=$000160				TIMER0_CTRL_REG   = $000160 ; (Write - Control, Read Status)
=$01					TMR0_EN     = $01
=$02					TMR0_SCLR   = $02
=$04					TMR0_SLOAD  = $04 ; Use SLOAD is
=$08					TMR0_UPDWN  = $08
=$000161				TIMER0_CHARGE_L   = $000161 ; Use if you want to Precharge and countdown
=$000162				TIMER0_CHARGE_M   = $000162 ;
=$000163				TIMER0_CHARGE_H   = $000163 ;
=$000164				TIMER0_CMP_REG    = $000164 ;
=$01					TMR0_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02					TMR0_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$000165				TIMER0_CMP_L      = $000165 ; Load this Value for Countup
=$000166				TIMER0_CMP_M      = $000166 ;
=$000167				TIMER0_CMP_H      = $000167 ;
=$000168				TIMER1_CTRL_REG   = $000168 ;
=$01					TMR1_EN     = $01
=$02					TMR1_SCLR   = $02
=$04					TMR1_SLOAD  = $04
=$08					TMR1_UPDWN  = $08 ; 1 = Up, 0 = Down
=$000169				TIMER1_CHARGE_L   = $000169 ; Use if you want to Precharge and countdown
=$00016a				TIMER1_CHARGE_M   = $00016A ;
=$00016b				TIMER1_CHARGE_H   = $00016B ;
=$00016c				TIMER1_CMP_REG    = $00016C ;
=$01					TMR1_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02					TMR1_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$00016d				TIMER1_CMP_L      = $00016D ;
=$00016e				TIMER1_CMP_M      = $00016E ;
=$00016f				TIMER1_CMP_H      = $00016F ;

;******  Return to file: src\kernel.asm


;******  Processing file: src\basic_inc.asm

=$3a0000				BASIC = $3A0000
=3801092				MONITOR = BASIC + 4

;******  Return to file: src\kernel.asm


;******  Processing file: src\kernel_jumptable.asm

.381000	5c 00 04 39	jmp $390400	BOOT            JML IBOOT
.381004	5c 99 15 39	jmp $391599	RESTORE         JML IRESTORE
.381008	5c f8 05 39	jmp $3905f8	BREAK           JML IBREAK
.38100c	5c 3f 06 39	jmp $39063f	READY           JML IREADY
.381010	5c 9a 15 39	jmp $39159a	SCINIT          JML ISCINIT
.381014	5c 9b 15 39	jmp $39159b	IOINIT          JML IIOINIT
.381018	5c bc 06 39	jmp $3906bc	PUTC            JML IPUTC
.38101c	5c a5 06 39	jmp $3906a5	PUTS            JML IPUTS
.381020	5c ed 07 39	jmp $3907ed	PUTB            JML IPUTB
.381024	5c 49 40 39	jmp $394049	PUTBLOCK        JML IPUTBLOCK
.381028	5c 9c 15 39	jmp $39159c	SETLFS          JML ISETLFS
.38102c	5c 9d 15 39	jmp $39159d	SETNAM          JML ISETNAM
.381030	5c 9e 15 39	jmp $39159e	OPEN            JML IOPEN
.381034	5c 9f 15 39	jmp $39159f	CLOSE           JML ICLOSE
.381038	5c 5a 06 39	jmp $39065a	SETIN           JML ISETIN
.38103c	5c 63 06 39	jmp $390663	SETOUT          JML ISETOUT
.381040	5c a0 15 39	jmp $3915a0	GETB            JML IGETB
.381044	5c f6 3f 39	jmp $393ff6	GETBLOCK        JML IGETBLOCK
.381048	5c a1 15 39	jmp $3915a1	GETCH           JML IGETCH
.38104c	5c 75 06 39	jmp $390675	GETCHW          JML IGETCHW
.381050	5c 6c 06 39	jmp $39066c	GETCHE          JML IGETCHE
.381054	5c a2 15 39	jmp $3915a2	GETS            JML IGETS
.381058	5c a3 15 39	jmp $3915a3	GETLINE         JML IGETLINE
.38105c	5c a4 15 39	jmp $3915a4	GETFIELD        JML IGETFIELD
.381060	5c a5 15 39	jmp $3915a5	TRIM            JML ITRIM
.381064	5c a6 15 39	jmp $3915a6	PRINTC          JML IPRINTC
.381068	5c a7 15 39	jmp $3915a7	PRINTS          JML IPRINTS
.38106c	5c ee 07 39	jmp $3907ee	PRINTCR         JML IPRINTCR
.381070	5c a8 15 39	jmp $3915a8	PRINTF          JML IPRINTF
.381074	5c a9 15 39	jmp $3915a9	PRINTI          JML IPRINTI
.381078	5c ae 09 39	jmp $3909ae	PRINTH          JML IPRINTH
.38107c	5c aa 15 39	jmp $3915aa	PRINTAI         JML IPRINTAI
.381080	5c cb 09 39	jmp $3909cb	PRINTAH         JML IPRINTAH
.381084	5c f2 08 39	jmp $3908f2	LOCATE          JML ILOCATE
.381088	5c ab 15 39	jmp $3915ab	PUSHKEY         JML IPUSHKEY
.38108c	5c ac 15 39	jmp $3915ac	PUSHKEYS        JML IPUSHKEYS
.381090	5c 4e 08 39	jmp $39084e	CSRRIGHT        JML ICSRRIGHT
.381094	5c 81 08 39	jmp $390881	CSRLEFT         JML ICSRLEFT
.381098	5c a7 08 39	jmp $3908a7	CSRUP           JML ICSRUP
.38109c	5c cd 08 39	jmp $3908cd	CSRDOWN         JML ICSRDOWN
.3810a0	5c 3d 08 39	jmp $39083d	CSRHOME         JML ICSRHOME
.3810a4	5c 3e 09 39	jmp $39093e	SCROLLUP        JML ISCROLLUP
.3810a8	5c 19 0a 39	jmp $390a19	CLRSCREEN       JML ICLRSCREEN
.3810ac	5c e4 0a 39	jmp $390ae4	INITCHLUT	    JML IINITCHLUT
.3810b0	5c c1 0e 39	jmp $390ec1	INITSUPERIO	    JML IINITSUPERIO
.3810b4	5c c0 0f 39	jmp $390fc0	INITKEYBOARD    JML IINITKEYBOARD
.3810b8	5c 2b 11 39	jmp $39112b	TESTSID         JML ITESTSID
.3810bc	5c a0 0e 39	jmp $390ea0	INITCURSOR      JML IINITCURSOR
.3810c0	5c 56 0e 39	jmp $390e56	INITFONTSET     JML IINITFONTSET
.3810c4	5c 13 0b 39	jmp $390b13	INITGAMMATABLE  JML IINITGAMMATABLE
.3810c8	5c 33 0b 39	jmp $390b33	INITALLLUT      JML IINITALLLUT
.3810cc	5c f5 0b 39	jmp $390bf5	INITVKYTXTMODE  JML IINITVKYTXTMODE
.3810d0	5c e1 0c 39	jmp $390ce1	INITVKYGRPMODE  JML IINITVKYGRPMODE
.3810d4	5c 18 0d 39	jmp $390d18	INITTILEMODE    JML IINITTILEMODE
.3810d8	5c 19 0d 39	jmp $390d19	INITSPRITE      JML IINITSPRITE
.3810dc	5c fa 11 39	jmp $3911fa	INITCODEC       JML IINITCODEC
.3810e0	5c 76 12 39	jmp $391276	RESETCODEC      JML IRESETCODEC
.3810e4	5c e4 12 39	jmp $3912e4	BMP_PARSER      JML IBMP_PARSER
.3810e8	5c 99 12 39	jmp $391299	BM_FILL_SCREEN  JML IBM_FILL_SCREEN
.3810ec	5c 28 36 39	jmp $393628	OPL2_TONE_TEST  JML IOPL2_TONE_TEST
.3810f0	5c 53 51 39	jmp $395153	F_OPEN          JML IF_OPEN         ; open a file for reading/writing/creating
.3810f4	5c e6 51 39	jmp $3951e6	F_CREATE        JML IF_CREATE       ; create a new file
.3810f8	5c 20 52 39	jmp $395220	F_CLOSE         JML IF_CLOSE        ; close a file (make sure last cluster is written)
.3810fc	5c ad 52 39	jmp $3952ad	F_WRITE         JML IF_WRITE        ; write the current cluster to the file
.381100	5c 59 52 39	jmp $395259	F_READ          JML IF_READ         ; read the next cluster from the file
.381104	5c 53 53 39	jmp $395353	F_DELETE        JML IF_DELETE       ; delete a file / directory
.381108	5c 15 53 39	jmp $395315	F_DIROPEN       JML IF_DIROPEN      ; open a directory and seek the first directory entry
.38110c	5c 4f 53 39	jmp $39534f	F_DIRNEXT       JML IF_DIRNEXT      ; seek to the next directory of an open directory
.381110	5c ec 53 39	jmp $3953ec	F_DIRREAD       JML IF_DIRREAD      ; Read the directory entry for the specified file
.381114	5c 13 54 39	jmp $395413	F_DIRWRITE      JML IF_DIRWRITE     ; Write any changes in the current directory cluster back to the drive
.381118	5c 17 54 39	jmp $395417	F_LOAD          JML IF_LOAD         ; load a binary file into memory, supports multiple file formats
.38111c	5c f8 55 39	jmp $3955f8	F_SAVE          JML IF_SAVE         ; Save memory to a binary file
.381120	5c cc 3f 39	jmp $393fcc	CMDBLOCK        JML ICMDBLOCK       ; Send a command to a block device
.381124	5c 91 56 39	jmp $395691	F_RUN           JML IF_RUN          ; Load an run a binary file
.381128	5c 2e 0c 39	jmp $390c2e	SETSIZES        JML ISETSIZES

;******  Return to file: src\kernel.asm


;******  Processing file: src\Interrupt_Handler.asm

.38112c					IRQ_HANDLER
.38112c	e2 20		sep #$20	                SEP #$20        ; set A short
.38112e	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381132	c9 00		cmp #$00	                CMP #$00
.381134	f0 4a		beq $381180	                BEQ CHECK_PENDING_REG1
.381136	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.38113a	29 01		and #$01	                AND #FNX0_INT00_SOF
.38113c	c9 01		cmp #$01	                CMP #FNX0_INT00_SOF
.38113e	d0 09		bne $381149	                BNE SERVICE_NEXT_IRQ2
.381140	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381144	20 ea 11	jsr $3811ea	                JSR SOF_INTERRUPT
.381147	e2 20		sep #$20	                SEP #$20        ; set A short
.381149					SERVICE_NEXT_IRQ2
.381149	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.38114d	29 04		and #$04	                AND #FNX0_INT02_TMR0
.38114f	c9 04		cmp #$04	                CMP #FNX0_INT02_TMR0
.381151	d0 09		bne $38115c	                BNE SERVICE_NEXT_IRQ6
.381153	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381157	20 08 12	jsr $381208	                JSR TIMER0_INTERRUPT
.38115a	e2 20		sep #$20	                SEP #$20        ; set A short
.38115c					SERVICE_NEXT_IRQ6
.38115c	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381160	29 40		and #$40	                AND #FNX0_INT06_FDC
.381162	c9 40		cmp #$40	                CMP #FNX0_INT06_FDC
.381164	d0 09		bne $38116f	                BNE SERVICE_NEXT_IRQ7
.381166	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.38116a	20 63 12	jsr $381263	                JSR FDC_INTERRUPT
.38116d	e2 20		sep #$20	                SEP #$20        ; set A short
.38116f					SERVICE_NEXT_IRQ7
.38116f	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381173	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.381175	c9 80		cmp #$80	                CMP #FNX0_INT07_MOUSE
.381177	d0 07		bne $381180	                BNE CHECK_PENDING_REG1
.381179	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.38117d	20 22 12	jsr $381222	                JSR MOUSE_INTERRUPT
.381180					CHECK_PENDING_REG1
.381180	e2 20		sep #$20	                SEP #$20        ; set A short
.381182	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381186	c9 00		cmp #$00	                CMP #$00
.381188	f0 5d		beq $3811e7	                BEQ EXIT_IRQ_HANDLE
.38118a					SERVICE_NEXT_IRQ8
.38118a	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.38118e	29 01		and #$01	                AND #FNX1_INT00_KBD
.381190	c9 01		cmp #$01	                CMP #FNX1_INT00_KBD
.381192	d0 09		bne $38119d	                BNE SERVICE_NEXT_IRQ11
.381194	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.381198	20 9b 12	jsr $38129b	                JSR KEYBOARD_INTERRUPT
.38119b	e2 20		sep #$20	                SEP #$20        ; set A short
.38119d					SERVICE_NEXT_IRQ11
.38119d	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3811a1	29 08		and #$08	                AND #FNX1_INT03_COM2
.3811a3	c9 08		cmp #$08	                CMP #FNX1_INT03_COM2
.3811a5	d0 09		bne $3811b0	                BNE SERVICE_NEXT_IRQ12
.3811a7	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811ab	20 6e 12	jsr $38126e	                JSR COM2_INTERRUPT
.3811ae	e2 20		sep #$20	                SEP #$20        ; set A short
.3811b0					SERVICE_NEXT_IRQ12
.3811b0	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3811b4	29 10		and #$10	                AND #FNX1_INT04_COM1
.3811b6	c9 10		cmp #$10	                CMP #FNX1_INT04_COM1
.3811b8	d0 09		bne $3811c3	                BNE SERVICE_NEXT_IRQ13
.3811ba	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811be	20 79 12	jsr $381279	                JSR COM1_INTERRUPT
.3811c1	e2 20		sep #$20	                SEP #$20        ; set A short
.3811c3					SERVICE_NEXT_IRQ13
.3811c3	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3811c7	29 20		and #$20	                AND #FNX1_INT05_MPU401
.3811c9	c9 20		cmp #$20	                CMP #FNX1_INT05_MPU401
.3811cb	d0 09		bne $3811d6	                BNE SERVICE_NEXT_IRQ14
.3811cd	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811d1	20 84 12	jsr $381284	                JSR MPU401_INTERRUPT
.3811d4	e2 20		sep #$20	                SEP #$20        ; set A short
.3811d6					SERVICE_NEXT_IRQ14
.3811d6	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3811da	29 40		and #$40	                AND #FNX1_INT06_LPT
.3811dc	c9 40		cmp #$40	                CMP #FNX1_INT06_LPT
.3811de	d0 07		bne $3811e7	                BNE EXIT_IRQ_HANDLE
.3811e0	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811e4	20 8f 12	jsr $38128f	                JSR LPT1_INTERRUPT
.3811e7					EXIT_IRQ_HANDLE
.3811e7	c2 30		rep #$30	                REP #$30        ; set A&X long
.3811e9	6b		rtl		                RTL
.3811ea					SOF_INTERRUPT
.3811ea	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.3811ee	29 01		and #$01	                AND #FNX0_INT00_SOF
.3811f0	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.3811f4	c2 20		rep #$20	                REP #$20        ; set A long
.3811f6	af 4e e0 38	lda $38e04e	                LDA @l FDC_MOTOR_TIMER          ; Check the FDC motor count-down timer
.3811fa	f0 0b		beq $381207	                BEQ sof_int_done                ; If it's zero, do nothing
.3811fc	3a		dec a		                DEC A                           ; Otherwise, decrement it...
.3811fd	8f 4e e0 38	sta $38e04e	                STA @l FDC_MOTOR_TIMER
.381201	d0 04		bne $381207	                BNE sof_int_done                ; If it's not zero, we're done for this tick
.381203	22 44 5d 39	jsl $395d44	                JSL FDC_Motor_Off               ; Otherwise, turn off the motor
.381207	60		rts		sof_int_done    RTS
.381208					TIMER0_INTERRUPT
.381208	e2 20		sep #$20	                SEP #$20        ; set A short
.38120a	af 05 07 00	lda $000705	                LDA @l TIMERFLAGS               ; Flag that the interrupt has happened
.38120e	09 80		ora #$80	                ORA #TIMER0TRIGGER
.381210	8f 05 07 00	sta $000705	                STA @l TIMERFLAGS
.381214	60		rts		                RTS
.381215					TIMER2_INTERRUPT
.381215	e2 20		sep #$20	                SEP #$20        ; set A short
.381217	af 05 07 00	lda $000705	                LDA @l TIMERFLAGS               ; Flag that the interrupt has happened
.38121b	09 20		ora #$20	                ORA #TIMER2TRIGGER
.38121d	8f 05 07 00	sta $000705	                STA @l TIMERFLAGS
.381221	60		rts		                RTS
.381222					MOUSE_INTERRUPT
.381222	e2 20		sep #$20	                SEP #$20        ; set A short
.381224	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381228	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.38122a	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.38122e	af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF
.381232	a2 00 00	ldx #$0000	                LDX #$0000
.381235	e2 10		sep #$10	                SEP #$10        ; set X short
.381237	a6 e0		ldx $e0		                LDX MOUSE_PTR
.381239	9f 06 07 af	sta $af0706,x	                STA @lMOUSE_PTR_BYTE0, X
.38123d	e8		inx		                INX
.38123e	e0 03		cpx #$03	                CPX #$03
.381240	d0 1c		bne $38125e	                BNE EXIT_FOR_NEXT_VALUE
.381242	af 02 07 af	lda $af0702	                LDA @lMOUSE_PTR_X_POS_L
.381246	85 e1		sta $e1		                STA MOUSE_POS_X_LO
.381248	af 03 07 af	lda $af0703	                LDA @lMOUSE_PTR_X_POS_H
.38124c	85 e2		sta $e2		                STA MOUSE_POS_X_HI
.38124e	af 04 07 af	lda $af0704	                LDA @lMOUSE_PTR_Y_POS_L
.381252	85 e3		sta $e3		                STA MOUSE_POS_Y_LO
.381254	af 05 07 af	lda $af0705	                LDA @lMOUSE_PTR_Y_POS_H
.381258	85 e4		sta $e4		                STA MOUSE_POS_Y_HI
.38125a	e2 20		sep #$20	                SEP #$20        ; set A short
.38125c	a2 00		ldx #$00	                LDX #$00
.38125e					EXIT_FOR_NEXT_VALUE
.38125e	86 e0		stx $e0		                STX MOUSE_PTR
.381260	c2 10		rep #$10	                REP #$10        ; set X long
.381262	60		rts		                RTS
.381263					FDC_INTERRUPT
.381263	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381267	29 40		and #$40	                AND #FNX0_INT06_FDC
.381269	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.38126d	60		rts		                RTS
.38126e					COM2_INTERRUPT
.38126e	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381272	29 08		and #$08	                AND #FNX1_INT03_COM2
.381274	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.381278	60		rts		                RTS
.381279					COM1_INTERRUPT
.381279	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.38127d	29 10		and #$10	                AND #FNX1_INT04_COM1
.38127f	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.381283	60		rts		                RTS
.381284					MPU401_INTERRUPT
.381284	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381288	29 20		and #$20	                AND #FNX1_INT05_MPU401
.38128a	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.38128e	60		rts		                RTS
.38128f					LPT1_INTERRUPT
.38128f	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381293	29 40		and #$40	                AND #FNX1_INT06_LPT
.381295	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.381299	60		rts		                RTS
.38129a					NMI_HANDLER
.38129a	6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\keyboard.asm

.38129b					KEYBOARD_INTERRUPT
.38129b	48		pha		                PHA             ; begin setdp macro
.38129c	08		php		                PHP
.38129d	c2 20		rep #$20	                REP #$20        ; set A long
.38129f	a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.3812a2	5b		tcd		                TCD
.3812a3	28		plp		                PLP
.3812a4	68		pla		                PLA             ; end setdp macro
.3812a5	a2 00 00	ldx #$0000	                ldx #$0000
.3812a8	e2 10		sep #$10	                SEP #$10        ; set X short
.3812aa	e2 20		sep #$20	                SEP #$20        ; set A short
.3812ac	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3812b0	29 01		and #$01	                AND #FNX1_INT00_KBD
.3812b2	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3812b6					IRQ_HANDLER_FETCH
.3812b6	af 60 10 af	lda $af1060	                LDA @lKBD_INPT_BUF      ; Get Scan Code from KeyBoard
.3812ba	85 88		sta $0f88	                STA KEYBOARD_SC_TMP     ; Save Code Immediately
.3812bc	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the Prefix was picked up before
.3812be	29 80		and #$80	                AND #$80
.3812c0	c9 80		cmp #$80	                CMP #$80
.3812c2	d0 10		bne $3812d4	                BNE CHK_LSHIFT          ; No: do normal scan-code checks
.3812c4	a5 87		lda $0f87	PREFIX_ON       LDA KEYBOARD_SC_FLG     ; Otherwise: clear prefix
.3812c6	29 7f		and #$7f	                AND #$7F
.3812c8	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3812ca	a5 88		lda $0f88	                LDA KEYBOARD_SC_TMP     ; Get the prefixed scan-code's character
.3812cc	aa		tax		                TAX
.3812cd	bf 80 6f 39	lda $396f80,x	                LDA @lScanCode_Prefix_Set1, x
.3812d1	4c 77 13	jmp $381377	                JMP KB_WR_2_SCREEN      ; And save it
.3812d4	a5 88		lda $0f88	CHK_LSHIFT      LDA KEYBOARD_SC_TMP
.3812d6	c9 2a		cmp #$2a	                CMP #$2A                ; Left Shift Pressed
.3812d8	d0 03		bne $3812dd	                BNE NOT_KB_SET_LSHIFT
.3812da	82 ad 00	brl $38138a	                BRL KB_SET_SHIFT
.3812dd					NOT_KB_SET_LSHIFT
.3812dd	c9 aa		cmp #$aa	                CMP #$AA                ; Left Shift Unpressed
.3812df	d0 03		bne $3812e4	                BNE NOT_KB_CLR_LSHIFT
.3812e1	82 af 00	brl $381393	                BRL KB_CLR_SHIFT
.3812e4					NOT_KB_CLR_LSHIFT
.3812e4	c9 36		cmp #$36	                CMP #$36                ; Right Shift Pressed
.3812e6	d0 03		bne $3812eb	                BNE NOT_KB_SET_RSHIFT
.3812e8	82 9f 00	brl $38138a	                BRL KB_SET_SHIFT
.3812eb					NOT_KB_SET_RSHIFT
.3812eb	c9 b6		cmp #$b6	                CMP #$B6                ; Right Shift Unpressed
.3812ed	d0 03		bne $3812f2	                BNE NOT_KB_CLR_RSHIFT
.3812ef	82 a1 00	brl $381393	                BRL KB_CLR_SHIFT
.3812f2					NOT_KB_CLR_RSHIFT
.3812f2	c9 1d		cmp #$1d	                CMP #$1D                ; Left CTRL pressed
.3812f4	d0 03		bne $3812f9	                BNE NOT_KB_SET_CTRL
.3812f6	82 a3 00	brl $38139c	                BRL KB_SET_CTRL
.3812f9					NOT_KB_SET_CTRL
.3812f9	c9 9d		cmp #$9d	                CMP #$9D                ; Left CTRL Unpressed
.3812fb	d0 03		bne $381300	                BNE NOT_KB_CLR_CTRL
.3812fd	82 a5 00	brl $3813a5	                BRL KB_CLR_CTRL
.381300					NOT_KB_CLR_CTRL
.381300	c9 38		cmp #$38	                CMP #$38                ; Left ALT Pressed
.381302	d0 03		bne $381307	                BNE NOT_KB_SET_ALT
.381304	82 a7 00	brl $3813ae	                BRL KB_SET_ALT
.381307					NOT_KB_SET_ALT
.381307	c9 b8		cmp #$b8	                CMP #$B8                ; Left ALT Unpressed
.381309	d0 03		bne $38130e	                BNE NOT_KB_CLR_ALT
.38130b	82 a9 00	brl $3813b7	                BRL KB_CLR_ALT
.38130e	c9 e0		cmp #$e0	NOT_KB_CLR_ALT  CMP #$E0                ; Prefixed scan code
.381310	d0 03		bne $381315	                BNE NOT_PREFIXED
.381312	82 ab 00	brl $3813c0	                BRL KB_SET_PREFIX
.381315	c9 45		cmp #$45	NOT_PREFIXED    CMP #$45                ; Numlock Pressed
.381317	d0 03		bne $38131c	                BNE NOT_KB_SET_NUM
.381319	82 b6 00	brl $3813d2	                BRL KB_TOG_NUMLOCK
.38131c	c9 46		cmp #$46	NOT_KB_SET_NUM  CMP #$46                ; Scroll Lock Pressed
.38131e	d0 03		bne $381323	                BNE NOT_KB_SET_SCR
.381320	82 a6 00	brl $3813c9	                BRL KB_TOG_SCRLOCK
.381323	c9 3a		cmp #$3a	NOT_KB_SET_SCR  CMP #$3A                ; Caps Lock Pressed
.381325	d0 03		bne $38132a	                BNE NOT_KB_CAPSLOCK
.381327	82 bc 00	brl $3813e6	                BRL KB_TOG_CAPLOCK
.38132a	c9 58		cmp #$58	NOT_KB_CAPSLOCK CMP #$58                ; F12 Pressed
.38132c	d0 09		bne $381337	                BNE KB_UNPRESSED
.38132e	a9 60		lda #$60	                LDA #KB_CREDITS         ; Yes: flag that the CREDITS key has been pressed
.381330	8f 8a 0f 00	sta $000f8a	                STA @lKEYFLAG
.381334	82 b5 00	brl $3813ec	                BRL KB_CHECK_B_DONE
.381337	29 80		and #$80	KB_UNPRESSED    AND #$80                ; See if the Scan Code is press or Depressed
.381339	c9 80		cmp #$80	                CMP #$80                ; Depress Status - We will not do anything at this point
.38133b	d0 03		bne $381340	                BNE KB_NORM_SC
.38133d	82 ac 00	brl $3813ec	                BRL KB_CHECK_B_DONE
.381340	a5 88		lda $0f88	KB_NORM_SC      LDA KEYBOARD_SC_TMP       ;
.381342	aa		tax		                TAX
.381343	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the SHIFT Key is being Pushed
.381345	29 10		and #$10	                AND #$10
.381347	c9 10		cmp #$10	                CMP #$10
.381349	f0 17		beq $381362	                BEQ SHIFT_KEY_ON
.38134b	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the CTRL Key is being Pushed
.38134d	29 20		and #$20	                AND #$20
.38134f	c9 20		cmp #$20	                CMP #$20
.381351	f0 16		beq $381369	                BEQ CTRL_KEY_ON
.381353	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the ALT Key is being Pushed
.381355	29 40		and #$40	                AND #$40
.381357	c9 40		cmp #$40	                CMP #$40
.381359	f0 15		beq $381370	                BEQ ALT_KEY_ON
.38135b	bf 00 6d 39	lda $396d00,x	                LDA @lScanCode_Press_Set1, x
.38135f	82 15 00	brl $381377	                BRL KB_WR_2_SCREEN
.381362	bf 80 6d 39	lda $396d80,x	SHIFT_KEY_ON    LDA @lScanCode_Shift_Set1, x
.381366	82 0e 00	brl $381377	                BRL KB_WR_2_SCREEN
.381369	bf 00 6e 39	lda $396e00,x	CTRL_KEY_ON     LDA @lScanCode_Ctrl_Set1, x
.38136d	82 07 00	brl $381377	                BRL KB_WR_2_SCREEN
.381370	bf 80 6e 39	lda $396e80,x	ALT_KEY_ON      LDA @lScanCode_Alt_Set1, x
.381374	82 00 00	brl $381377	                BRL KB_WR_2_SCREEN
.381377	c9 18		cmp #$18	KB_WR_2_SCREEN  CMP #$18                ; Is it SysRq?
.381379	d0 03		bne $38137e	                BNE savechar
.38137b	4c fc 13	jmp $3813fc	                JMP programmerKey       ; Yes: trigger the programmer key
.38137e	48		pha		savechar        PHA
.38137f	c2 10		rep #$10	                REP #$10        ; set X long
.381381	20 08 14	jsr $381408	                JSR SAVEKEY
.381384	e2 20		sep #$20	                SEP #$20        ; set A short
.381386	68		pla		                PLA
.381387	4c ec 13	jmp $3813ec	                JMP KB_CHECK_B_DONE
.38138a	a5 87		lda $0f87	KB_SET_SHIFT    LDA KEYBOARD_SC_FLG
.38138c	09 10		ora #$10	                ORA #$10
.38138e	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.381390	4c ec 13	jmp $3813ec	                JMP KB_CHECK_B_DONE
.381393	a5 87		lda $0f87	KB_CLR_SHIFT    LDA KEYBOARD_SC_FLG
.381395	29 ef		and #$ef	                AND #$EF
.381397	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.381399	4c ec 13	jmp $3813ec	                JMP KB_CHECK_B_DONE
.38139c	a5 87		lda $0f87	KB_SET_CTRL     LDA KEYBOARD_SC_FLG
.38139e	09 20		ora #$20	                ORA #$20
.3813a0	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813a2	4c ec 13	jmp $3813ec	                JMP KB_CHECK_B_DONE
.3813a5	a5 87		lda $0f87	KB_CLR_CTRL     LDA KEYBOARD_SC_FLG
.3813a7	29 df		and #$df	                AND #$DF
.3813a9	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813ab	4c ec 13	jmp $3813ec	                JMP KB_CHECK_B_DONE
.3813ae	a5 87		lda $0f87	KB_SET_ALT      LDA KEYBOARD_SC_FLG
.3813b0	09 40		ora #$40	                ORA #$40
.3813b2	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813b4	4c ec 13	jmp $3813ec	                JMP KB_CHECK_B_DONE
.3813b7	a5 87		lda $0f87	KB_CLR_ALT      LDA KEYBOARD_SC_FLG
.3813b9	29 bf		and #$bf	                AND #$BF
.3813bb	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813bd	4c ec 13	jmp $3813ec	                JMP KB_CHECK_B_DONE
.3813c0	a5 87		lda $0f87	KB_SET_PREFIX   LDA KEYBOARD_SC_FLG
.3813c2	09 80		ora #$80	                ORA #$80
.3813c4	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813c6	4c ec 13	jmp $3813ec	                JMP KB_CHECK_B_DONE
.3813c9	a5 89		lda $0f89	KB_TOG_SCRLOCK  LDA KEYBOARD_LOCKS
.3813cb	49 01		eor #$01	                EOR #KB_SCROLL_LOCK         ; toggle the Scroll Lock flag
.3813cd	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.3813cf	4c ec 13	jmp $3813ec	                JMP KB_CHECK_B_DONE
.3813d2	a5 87		lda $0f87	KB_TOG_NUMLOCK  LDA KEYBOARD_SC_FLG         ; Check flags...
.3813d4	29 60		and #$60	                AND #$60                    ; ... is control-alt pressed?
.3813d6	c9 60		cmp #$60	                CMP #$60
.3813d8	d0 03		bne $3813dd	                BNE KB_TOG_NUMLOC2
.3813da	82 63 ff	brl $381340	                BRL KB_NORM_SC              ; No: treat as a BREAK key
.3813dd	a5 89		lda $0f89	KB_TOG_NUMLOC2  LDA KEYBOARD_LOCKS
.3813df	49 02		eor #$02	                EOR #KB_NUM_LOCK            ; toggle the Num Lock flag
.3813e1	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.3813e3	4c ec 13	jmp $3813ec	                JMP KB_CHECK_B_DONE
.3813e6	a5 89		lda $0f89	KB_TOG_CAPLOCK  LDA KEYBOARD_LOCKS
.3813e8	49 04		eor #$04	                EOR #KB_CAPS_LOCK           ; toggle the Caps Lock flag
.3813ea	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.3813ec					KB_CHECK_B_DONE
.3813ec	af 64 10 af	lda $af1064	                LDA STATUS_PORT
.3813f0	29 01		and #$01	                AND #OUT_BUF_FULL           ; Test bit $01 (if 1, Full)
.3813f2	c9 01		cmp #$01	                CMP #OUT_BUF_FULL           ; if Still Byte in the Buffer, fetch it out
.3813f4	d0 03		bne $3813f9	                BNE SET_LED
.3813f6	4c b6 12	jmp $3812b6	                JMP IRQ_HANDLER_FETCH
.3813f9					SET_LED
.3813f9					KB_DONE
.3813f9	c2 30		rep #$30	                REP #$30        ; set A&X long
.3813fb	60		rts		                RTS
.3813fc					programmerKey
.3813fc	c2 30		rep #$30	                REP #$30        ; set A&X long
.3813fe	68		pla		                PLA                     ; Get and throw-away the return address to the interrupt handler
.3813ff	2b		pld		                PLD                     ; Restore the registers that were present when the handler was invoked
.381400	ab		plb		                PLB
.381401	7a		ply		                PLY
.381402	fa		plx		                PLX
.381403	68		pla		                PLA
.381404	5c 08 10 38	jmp $381008	                JML BREAK               ; And go to the BRK handler directly to open the monitor
.381408					SAVEKEY
.381408	e2 20		sep #$20	                SEP #$20        ; set A short
.38140a	48		pha		                PHA                     ; Save the character
.38140b	a5 89		lda $0f89	                LDA KEYBOARD_LOCKS      ; Check the keyboard lock flags
.38140d	29 04		and #$04	                AND #KB_CAPS_LOCK       ; Is CAPS lock on?
.38140f	f0 0d		beq $38141e	                BEQ no_caps             ; No... just use the character as-is
.381411	68		pla		                PLA                     ; Get the character back
.381412	c9 61		cmp #$61	                CMP #'a'                ; Is it < 'a'
.381414	90 09		bcc $38141f	                BLT check_break         ; Yes: just use as-is
.381416	c9 7b		cmp #$7b	                CMP #'z'+1              ; Is it > 'z'
.381418	b0 05		bcs $38141f	                BGE check_break         ; Yes: just us as-is
.38141a	29 df		and #$df	                AND #%11011111          ; Conver to upper case
.38141c	80 01		bra $38141f	                BRA check_break
.38141e	68		pla		no_caps         PLA                     ; Restore the character
.38141f	c9 00		cmp #$00	check_break     CMP #0
.381421	f0 18		beq $38143b	                BEQ done
.381423	c9 03		cmp #$03	                CMP #CHAR_CTRL_C        ; Is it CTRL-C?
.381425	f0 15		beq $38143c	                BEQ flag_break          ; Yes: flag a break
.381427	a6 8d		ldx $0f8d	no_break        LDX KEY_BUFFER_WPOS     ; So the Receive Character is saved in the Buffer
.381429	e0 80 00	cpx #$0080	                CPX #KEY_BUFFER_SIZE    ; Make sure we haven't been overboard.
.38142c	b0 0d		bcs $38143b	                BCS done                ; Stop storing - An error should ensue here...
.38142e	9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER,X
.381432	e8		inx		                INX
.381433	86 8d		stx $0f8d	                STX KEY_BUFFER_WPOS
.381435	a9 00		lda #$00	                LDA #$00
.381437	9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER, X       ; Store a EOL in the following location for good measure
.38143b	60		rts		done            RTS
.38143c					flag_break
.38143c	e2 20		sep #$20	                SEP #$20        ; set A short
.38143e	a9 80		lda #$80	                LDA #KB_CTRL_C          ; Flag that an interrupt key has been pressed
.381440	85 8a		sta $0f8a	                STA KEYFLAG             ; The interpreter should see this soon and throw a BREAK
.381442	60		rts		                RTS
.381443					KBD_GETC
.381443	da		phx		                PHX
.381444	0b		phd		                PHD
.381445	08		php		                PHP
.381446	48		pha		                PHA             ; begin setdp macro
.381447	08		php		                PHP
.381448	c2 20		rep #$20	                REP #$20        ; set A long
.38144a	a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.38144d	5b		tcd		                TCD
.38144e	28		plp		                PLP
.38144f	68		pla		                PLA             ; end setdp macro
.381450	e2 20		sep #$20	                SEP #$20        ; set A short
.381452	c2 10		rep #$10	                REP #$10        ; set X long
.381454	58		cli		                CLI                     ; Make sure interrupts can happen
.381455	af 8a 0f 00	lda $000f8a	get_wait        LDA @lKEYFLAG           ; Check the keyboard control flag
.381459	29 60		and #$60	                AND #KB_CREDITS         ; Are the credits flagged?
.38145b	c9 60		cmp #$60	                CMP #KB_CREDITS
.38145d	d0 0a		bne $381469	                BNE check_buffer        ; No: check the key buffer
.38145f	a9 00		lda #$00	                LDA #0                  ; Yes: clear the flags
.381461	8f 8a 0f 00	sta $000f8a	                STA @lKEYFLAG
.381465	22 53 15 39	jsl $391553	                JSL SHOW_CREDITS        ; Then show the credits screen and wait for a key press
.381469	a6 8b		ldx $0f8b	check_buffer    LDX KEY_BUFFER_RPOS     ; Is KEY_BUFFER_RPOS < KEY_BUFFER_WPOS
.38146b	e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS
.38146d	90 02		bcc $381471	                BCC read_buff           ; Yes: a key is present, read it
.38146f	80 e4		bra $381455	                BRA get_wait            ; Otherwise, keep waiting
.381471	78		sei		read_buff       SEI                     ; Don't interrupt me!
.381472	b5 00		lda $0f00,x	                LDA KEY_BUFFER,X        ; Get the key
.381474	e8		inx		                INX                     ; And move to the next key
.381475	e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS     ; Did we just read the last key?
.381477	f0 07		beq $381480	                BEQ reset_indexes       ; Yes: return to 0 position
.381479	86 8b		stx $0f8b	                STX KEY_BUFFER_RPOS     ; Otherwise: Update the read index
.38147b	58		cli		                CLI
.38147c	28		plp		done            PLP                     ; Restore status and interrupts
.38147d	2b		pld		                PLD
.38147e	fa		plx		                PLX
.38147f	6b		rtl		                RTL
.381480	64 8b		stz $0f8b	reset_indexes   STZ KEY_BUFFER_RPOS     ; Reset read index to the beginning
.381482	64 8d		stz $0f8d	                STZ KEY_BUFFER_WPOS     ; Reset the write index to the beginning
.381484	80 f6		bra $38147c	                BRA done

;******  Return to file: src\kernel.asm

.390400					IBOOT
.390400	18		clc		                CLC               ; clear the carry flag
.390401	fb		xce		                XCE               ; move carry to emulation flag.
.390402	78		sei		                SEI               ; Disable interrupts
.390403	c2 30		rep #$30	                REP #$30        ; set A&X long
.390405	a9 ff fe	lda #$feff	                LDA #STACK_END    ; initialize stack pointer
.390408	1b		tcs		                TAS
.390409	a2 00 10	ldx #$1000	                LDX #<>BOOT       ; Copy the kernel jump table to bank 0
.39040c	a0 00 10	ldy #$1000	                LDY #<>BOOT       ; Ordinarily, this is done by GAVIN, but
.39040f	a9 00 01	lda #$0100	                LDA #$0100        ; this is ensures it can be reloaded in case of errors
.390412	54 00 38	mvn $38,$00	                MVN `BOOT,$00     ; Or during soft loading of the kernel from the debug port
.390415	48		pha		                PHA             ; begin setdp macro
.390416	08		php		                PHP
.390417	c2 20		rep #$20	                REP #$20        ; set A long
.390419	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39041c	5b		tcd		                TCD
.39041d	28		plp		                PLP
.39041e	68		pla		                PLA             ; end setdp macro
.39041f	e2 20		sep #$20	                SEP #$20        ; set A short
.390421	a2 00 00	ldx #$0000	                LDX #$0000
.390424	a9 00		lda #$00	                LDA #$00
.390426					CLEAR_MEM_LOOP
.390426	95 00		sta $00,x	                STA $0000, X
.390428	e8		inx		                INX
.390429	e0 00 01	cpx #$0100	                CPX #$0100
.39042c	d0 f8		bne $390426	                BNE CLEAR_MEM_LOOP
.39042e	ea		nop		                NOP
.39042f	a9 ff		lda #$ff	                LDA #$FF
.390431	8f 48 01 00	sta $000148	                STA @lINT_EDGE_REG0
.390435	8f 49 01 00	sta $000149	                STA @lINT_EDGE_REG1
.390439	8f 4a 01 00	sta $00014a	                STA @lINT_EDGE_REG2
.39043d	8f 4b 01 00	sta $00014b	                STA @lINT_EDGE_REG3
.390441	8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.390445	8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.390449	8f 4e 01 00	sta $00014e	                STA @lINT_MASK_REG2
.39044d	8f 4f 01 00	sta $00014f	                STA @lINT_MASK_REG3
.390451	22 10 11 39	jsl $391110	                JSL INITRTC               ; Initialize the RTC
.390455	c2 30		rep #$30	                REP #$30        ; set A&X long
.390457	a9 00 a0	lda #$a000	                LDA #<>SCREEN_PAGE0      ; store the initial screen buffer location
.39045a	85 0c		sta $0c		                STA SCREENBEGIN
.39045c	85 17		sta $17		                STA CURSORPOS
.39045e	a9 00 c0	lda #$c000	                LDA #<>CS_COLOR_MEM_PTR   ; Set the initial COLOR cursor position
.390461	85 1f		sta $1f		                STA COLORPOS
.390463	e2 20		sep #$20	                SEP #$20        ; set A short
.390465	a9 af		lda #$af	                LDA #`SCREEN_PAGE0
.390467	85 0e		sta $0e		                STA SCREENBEGIN+2
.390469	85 19		sta $19		                STA CURSORPOS+2
.39046b	a9 af		lda #$af	                LDA #`CS_COLOR_MEM_PTR    ; Set the initial COLOR cursor position
.39046d	85 21		sta $21		                STA COLORPOS+2
.39046f	e2 20		sep #$20	                SEP #$20        ; set A short
.390471	a9 00		lda #$00	                LDA #$00
.390473	8d 87 0f	sta $0f87	                STA KEYBOARD_SC_FLG     ; Clear the Keyboard Flag
.390476	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.390478	8f 00 f1 af	sta $aff100	                STA $AFF100
.39047c	a9 bf		lda #$bf	                LDA #$BF ; Channel Two - No Atteniation
.39047e	8f 00 f1 af	sta $aff100	                STA $AFF100
.390482	a9 df		lda #$df	                LDA #$DF ; Channel Two - No Atteniation
.390484	8f 00 f1 af	sta $aff100	                STA $AFF100
.390488	a9 ff		lda #$ff	                LDA #$FF ; Channel Two - No Atteniation
.39048a	8f 00 f1 af	sta $aff100	                STA $AFF100
.39048e	c2 30		rep #$30	                REP #$30        ; set A&X long
.390490	a2 48 00	ldx #$0048	                LDX #72
.390493	86 0f		stx $0f		                STX COLS_VISIBLE
.390495	a0 34 00	ldy #$0034	                LDY #52
.390498	84 13		sty $13		                STY LINES_VISIBLE
.39049a	a2 80 00	ldx #$0080	                LDX #128
.39049d	86 11		stx $11		                STX COLS_PER_LINE
.39049f	a0 40 00	ldy #$0040	                LDY #64
.3904a2	84 15		sty $15		                STY LINES_MAX
.3904a4	a9 ed 00	lda #$00ed	                LDA #$ED                  ; Set the default text color to light gray on dark gray
.3904a7	85 1e		sta $1e		                STA CURCOLOR
.3904a9	22 dc 10 38	jsl $3810dc	                JSL INITCODEC
.3904ad	22 b0 10 38	jsl $3810b0	                JSL INITSUPERIO
.3904b1	22 c4 10 38	jsl $3810c4	                JSL INITGAMMATABLE
.3904b5	22 c8 10 38	jsl $3810c8	                JSL INITALLLUT
.3904b9	22 ac 10 38	jsl $3810ac	                JSL INITCHLUT
.3904bd	22 81 0e 39	jsl $390e81	                JSL INITMOUSEPOINTER
.3904c1	22 bc 10 38	jsl $3810bc	                JSL INITCURSOR
.3904c5	22 cc 10 38	jsl $3810cc	                JSL INITVKYTXTMODE
.3904c9	22 56 0e 39	jsl $390e56	                JSL IINITFONTSET
.3904cd	22 19 0a 39	jsl $390a19	                JSL ICLRSCREEN  ; Clear Screen and Set a standard color in Color Memory
.3904d1	a9 01 00	lda #$0001	                LDA #CHAN_COM1    ; Initialize COM1
.3904d4	22 1c 57 39	jsl $39571c	                JSL UART_SELECT
.3904d8	22 88 57 39	jsl $395788	                JSL UART_INIT
.3904dc	a9 02 00	lda #$0002	                LDA #CHAN_COM2    ; Initialize COM2
.3904df	22 1c 57 39	jsl $39571c	                JSL UART_SELECT
.3904e3	22 88 57 39	jsl $395788	                JSL UART_INIT
.3904e7	a9 00 00	lda #$0000	                LDA #0
.3904ea	22 38 10 38	jsl $381038	                JSL SETIN
.3904ee	22 3c 10 38	jsl $38103c	                JSL SETOUT
.3904f2	c2 20		rep #$20	                REP #$20        ; set A long
.3904f4	a2 00 00	ldx #$0000	                LDX #0
.3904f7	a0 00 00	ldy #$0000	                LDY #0
.3904fa	22 f2 08 39	jsl $3908f2	                JSL ILOCATE
.3904fe	c2 30		rep #$30	                REP #$30        ; set A&X long
.390500					greet
.390500	48		pha		                PHA             ; begin setdbr macro
.390501	08		php		                PHP
.390502	e2 20		sep #$20	                SEP #$20        ; set A short
.390504	a9 39		lda #$39	                LDA #`greet_msg
.390506	48		pha		                PHA
.390507	ab		plb		                PLB
.390508	28		plp		                PLP
.390509	68		pla		                PLA             ; end setdbr macro
.39050a	a2 f0 67	ldx #$67f0	                LDX #<>greet_msg
.39050d	22 9c 06 39	jsl $39069c	                JSL IPRINT       ; print the first line
.390511	22 64 0a 39	jsl $390a64	                JSL ICOLORFLAG  ; This is to set the Color Memory for the Logo
.390515	48		pha		                PHA             ; begin setdp macro
.390516	08		php		                PHP
.390517	c2 20		rep #$20	                REP #$20        ; set A long
.390519	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39051c	5b		tcd		                TCD
.39051d	28		plp		                PLP
.39051e	68		pla		                PLA             ; end setdp macro
.39051f	22 b4 10 38	jsl $3810b4	                JSL INITKEYBOARD ;
.390523	e2 20		sep #$20	                SEP #$20        ; set A short
.390525	c2 10		rep #$10	                REP #$10        ; set X long
.390527	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.390529	8f 00 f1 af	sta $aff100	                STA $AFF100
.39052d	a9 bf		lda #$bf	                LDA #$BF ; Channel Two - No Atteniation
.39052f	8f 00 f1 af	sta $aff100	                STA $AFF100
.390533	a9 df		lda #$df	                LDA #$DF ; Channel Two - No Atteniation
.390535	8f 00 f1 af	sta $aff100	                STA $AFF100
.390539	a9 ff		lda #$ff	                LDA #$FF ; Channel Two - No Atteniation
.39053b	8f 00 f1 af	sta $aff100	                STA $AFF100
.39053f	a9 83		lda #$83	                LDA #$83 ; Channel Zero - No Atteniation
.390541	8f 00 f1 af	sta $aff100	                STA $AFF100
.390545	a9 12		lda #$12	                LDA #$12 ; Channel Zero - No Atteniation
.390547	8f 00 f1 af	sta $aff100	                STA $AFF100
.39054b	a9 90		lda #$90	                LDA #$90 ; Channel One - No Atteniation
.39054d	8f 00 f1 af	sta $aff100	                STA $AFF100
.390551	a2 00 40	ldx #$4000	                LDX #16384      ; 400ms
.390554	22 e1 14 39	jsl $3914e1	          		 	JSL ILOOP_MS
.390558	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.39055a	8f 00 f1 af	sta $aff100	                STA $AFF100
.39055e	58		cli		                CLI                   ; Make sure no Interrupt will come and fuck up Init before this point.
.39055f	e2 20		sep #$20	                SEP #$20        ; set A short
.390561	c2 10		rep #$10	                REP #$10        ; set X long
.390563	48		pha		                PHA             ; begin setdbr macro
.390564	08		php		                PHP
.390565	e2 20		sep #$20	                SEP #$20        ; set A short
.390567	a9 39		lda #$39	                LDA #`greet_msg
.390569	48		pha		                PHA
.39056a	ab		plb		                PLB
.39056b	28		plp		                PLP
.39056c	68		pla		                PLA             ; end setdbr macro
.39056d	a2 00 00	ldx #$0000	                LDX #0
.390570	bf 00 10 38	lda $381000,x	jmpcopy         LDA @l BOOT,X
.390574	9f 00 10 00	sta $001000,x	                STA @l $001000,X
.390578	e8		inx		                INX
.390579	e0 00 10	cpx #$1000	                CPX #$1000
.39057c	d0 f2		bne $390570	                BNE jmpcopy
.39057e	22 15 43 39	jsl $394315	                JSL DOS_INIT          ; Initialize the "disc operating system"
.390582	22 9e 5c 39	jsl $395c9e	                JSL FDC_INIT
.390586	af 0e e8 af	lda $afe80e	                LDA @lDIP_BOOTMODE    ; {HD_INSTALLED, 5'b0_0000, BOOT_MODE[1], BOOT_MODE[0]}
.39058a	29 03		and #$03	                AND #%00000011        ; Look at the mode bits
.39058c	c9 00		cmp #$00	                CMP #DIP_BOOT_IDE     ; DIP set for IDE?
.39058e	f0 28		beq $3905b8	                BEQ BOOTIDE           ; Yes: Boot from the IDE
.390590	c9 01		cmp #$01	                CMP #DIP_BOOT_SDCARD  ; DIP set for SD card?
.390592	f0 0b		beq $39059f	                BEQ BOOTSDC           ; Yes: try to boot from the SD card
.390594	c9 02		cmp #$02	                CMP #DIP_BOOT_FLOPPY  ; DIP set for floppy?
.390596	f0 3a		beq $3905d2	                BEQ BOOTFLOPPY        ; Yes: try to boot from the floppy
.390598	5c 00 00 3a	jmp $3a0000	BOOTBASIC       JML BASIC             ; Cold start of the BASIC interpreter (or its replacement)
.39059c	ea		nop		CREDIT_LOCK     NOP
.39059d	80 fd		bra $39059c	                BRA CREDIT_LOCK
.39059f					BOOTSDC
.39059f	e2 20		sep #$20	                SEP #$20        ; set A short
.3905a1	a9 02		lda #$02	                LDA #BIOS_DEV_SD
.3905a3	8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3905a7	22 46 43 39	jsl $394346	                JSL DOS_MOUNT         ; Mount the SDC
.3905ab	90 06		bcc $3905b3	                BCC sdc_error         ; Print an error message if couldn't get anything
.3905ad	22 c8 44 39	jsl $3944c8	                JSL DOS_TESTBOOT      ; Try to boot from the SDC's MBR
.3905b1	80 e5		bra $390598	                BRA BOOTBASIC         ; If we couldn't fall, into BASIC
.3905b3	a2 a7 6b	ldx #$6ba7	sdc_error       LDX #<>sdc_err_boot   ; Print a message saying SD card booting is not implemented
.3905b6	80 39		bra $3905f1	                BRA PR_BOOT_ERROR
.3905b8					BOOTIDE
.3905b8	e2 20		sep #$20	                SEP #$20        ; set A short
.3905ba	a9 06		lda #$06	                LDA #BIOS_DEV_HD0
.3905bc	8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3905c0	22 46 43 39	jsl $394346	                JSL DOS_MOUNT         ; Mount the IDE drive
.3905c4	90 07		bcc $3905cd	                BCC hdc_error         ; Print an error message if couldn't get anything
.3905c6	22 c8 44 39	jsl $3944c8	                JSL DOS_TESTBOOT      ; Try to boot from the IDE's MBR
.3905ca	82 cb ff	brl $390598	                BRL BOOTBASIC         ; If we couldn't fall, into BASIC
.3905cd	a2 c3 6b	ldx #$6bc3	hdc_error       LDX #<>ide_err_boot   ; Print a message saying SD card booting is not implemented
.3905d0	80 1f		bra $3905f1	                BRA PR_BOOT_ERROR
.3905d2	a2 0c 6c	ldx #$6c0c	BOOTFLOPPY      LDX #<>fdc_boot
.3905d5	22 9c 06 39	jsl $39069c	                JSL IPRINT
.3905d9	e2 20		sep #$20	                SEP #$20        ; set A short
.3905db	a9 00		lda #$00	                LDA #BIOS_DEV_FDC
.3905dd	8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3905e1	22 dc 61 39	jsl $3961dc	                JSL FDC_MOUNT         ; Mount the floppy drive
.3905e5	90 07		bcc $3905ee	                BCC fdc_error         ; Print an error message if couldn't get anything
.3905e7	22 c8 44 39	jsl $3944c8	                JSL DOS_TESTBOOT      ; Try to boot from the FDC's MBR
.3905eb	82 aa ff	brl $390598	                BRL BOOTBASIC         ; If we couldn't, fall into BASIC
.3905ee	a2 e6 6b	ldx #$6be6	fdc_error       LDX #<>fdc_err_boot   ; Print a message saying SD card booting is not implemented
.3905f1	22 9c 06 39	jsl $39069c	PR_BOOT_ERROR   JSL IPRINT
.3905f5	ea		nop		LOOP_FOREVER    NOP
.3905f6	80 fd		bra $3905f5	                BRA LOOP_FOREVER
.3905f8					IBREAK
.3905f8	48		pha		                PHA             ; begin setdp macro
.3905f9	08		php		                PHP
.3905fa	c2 20		rep #$20	                REP #$20        ; set A long
.3905fc	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3905ff	5b		tcd		                TCD
.390600	28		plp		                PLP
.390601	68		pla		                PLA             ; end setdp macro
.390602	68		pla		                PLA             ; Pull .Y and stuff it in the CPUY variable
.390603	8f 48 02 00	sta $000248	                STA CPUY
.390607	68		pla		                PLA             ; Pull .X and stuff it in the CPUY variable
.390608	8f 46 02 00	sta $000246	                STA CPUX
.39060c	68		pla		                PLA             ; Pull .A and stuff it in the CPUY variable
.39060d	8f 44 02 00	sta $000244	                STA CPUA
.390611	68		pla		                PLA
.390612	8f 4c 02 00	sta $00024c	                STA CPUDP       ; Pull Direct page
.390616	e2 20		sep #$20	                SEP #$20        ; set A short
.390618	68		pla		                PLA             ; Pull Data Bank (8 bits)
.390619	8f 4e 02 00	sta $00024e	                STA CPUDBR
.39061d	68		pla		                PLA             ; Pull Flags (8 bits)
.39061e	8f 4f 02 00	sta $00024f	                STA CPUFLAGS
.390622	c2 20		rep #$20	                REP #$20        ; set A long
.390624	68		pla		                PLA             ; Pull Program Counter (16 bits)
.390625	8f 40 02 00	sta $000240	                STA CPUPC
.390629	e2 20		sep #$20	                SEP #$20        ; set A short
.39062b	68		pla		                PLA             ; Pull Program Bank (8 bits)
.39062c	8f 42 02 00	sta $000242	                STA CPUPBR
.390630	c2 20		rep #$20	                REP #$20        ; set A long
.390632	3b		tsc		                TSA             ; Get the stack
.390633	8f 4a 02 00	sta $00024a	                STA CPUSTACK    ; Store the stack at immediately before the interrupt was asserted
.390637	a9 ff fe	lda #$feff	                LDA #<>STACK_END   ; initialize stack pointer back to the bootup value
.39063a	1b		tcs		                TAS
.39063b	5c 04 00 3a	jmp $3a0004	                JML MONITOR
.39063f					IREADY
.39063f	48		pha		                PHA             ; begin setdbr macro
.390640	08		php		                PHP
.390641	e2 20		sep #$20	                SEP #$20        ; set A short
.390643	a9 39		lda #$39	                LDA #`ready_msg
.390645	48		pha		                PHA
.390646	ab		plb		                PLB
.390647	28		plp		                PLP
.390648	68		pla		                PLA             ; end setdbr macro
.390649	e2 20		sep #$20	                SEP #$20        ; set A short
.39064b	a2 24 6c	ldx #$6c24	                LDX #<>ready_msg
.39064e	22 9c 06 39	jsl $39069c	                JSL IPRINT
.390652					IREADYWAIT
.390652	22 6c 06 39	jsl $39066c	                JSL IGETCHE
.390656	80 fa		bra $390652	                BRA IREADYWAIT
.390658	db		stp		IKEYDOWN        STP             ; Keyboard key pressed
.390659	db		stp		IRETURN         STP
.39065a	08		php		ISETIN          PHP
.39065b	e2 20		sep #$20	                SEP #$20        ; set A short
.39065d	8f 04 07 00	sta $000704	                STA @lCHAN_IN   ; Save the channel number
.390661	28		plp		                PLP
.390662	6b		rtl		                RTL
.390663	08		php		ISETOUT         PHP
.390664	e2 20		sep #$20	                SEP #$20        ; set A short
.390666	8f 03 07 00	sta $000703	                STA @lCHAN_OUT  ; Save the channel number
.39066a	28		plp		                PLP
.39066b	6b		rtl		                RTL
.39066c	22 75 06 39	jsl $390675	IGETCHE         JSL IGETCHW
.390670	22 bc 06 39	jsl $3906bc	                JSL IPUTC
.390674	6b		rtl		                RTL
.390675					IGETCHW
.390675	08		php		                PHP
.390676	e2 20		sep #$20	                SEP #$20        ; set A short
.390678	af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.39067c	f0 17		beq $390695	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.39067e	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.390680	f0 09		beq $39068b	                BEQ getc_uart       ; Yes: handle reading from the UART
.390682	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.390684	f0 05		beq $39068b	                BEQ getc_uart       ; Yes: handle reading from the UART
.390686	a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.390688	28		plp		                PLP
.390689	38		sec		                SEC                 ; And return carry set
.39068a	6b		rtl		                RTL
.39068b	22 1c 57 39	jsl $39571c	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.39068f	22 d0 57 39	jsl $3957d0	                JSL UART_GETC       ; Get the charater from the COM port
.390693	80 04		bra $390699	                BRA done
.390695	22 43 14 38	jsl $381443	getc_keyboard   JSL KBD_GETC        ; Get the character from the keyboard
.390699	28		plp		done            PLP
.39069a	18		clc		                CLC                 ; Return carry clear for valid data
.39069b	6b		rtl		                RTL
.39069c	22 a5 06 39	jsl $3906a5	IPRINT          JSL IPUTS
.3906a0	22 ee 07 39	jsl $3907ee	                JSL IPRINTCR
.3906a4	6b		rtl		                RTL
.3906a5	48		pha		IPUTS           PHA
.3906a6	08		php		                PHP
.3906a7	e2 20		sep #$20	                SEP #$20        ; set A short
.3906a9	c2 10		rep #$10	                REP #$10        ; set X long
.3906ab	bd 00 00	lda $390000,x	iputs1          LDA $0,b,x      ; read from the string
.3906ae	f0 08		beq $3906b8	                BEQ iputs_done
.3906b0	22 bc 06 39	jsl $3906bc	iputs2          JSL IPUTC
.3906b4	e8		inx		iputs3          INX
.3906b5	4c ab 06	jmp $3906ab	                JMP iputs1
.3906b8	e8		inx		iputs_done      INX
.3906b9	28		plp		                PLP
.3906ba	68		pla		                PLA
.3906bb	6b		rtl		                RTL
.3906bc					IPUTC
.3906bc	da		phx		                PHX
.3906bd	5a		phy		                PHY
.3906be	0b		phd		                PHD
.3906bf	8b		phb		                PHB
.3906c0	08		php		                PHP                 ; stash the flags (we'll be changing M)
.3906c1	48		pha		                PHA             ; begin setdp macro
.3906c2	08		php		                PHP
.3906c3	c2 20		rep #$20	                REP #$20        ; set A long
.3906c5	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3906c8	5b		tcd		                TCD
.3906c9	28		plp		                PLP
.3906ca	68		pla		                PLA             ; end setdp macro
.3906cb	48		pha		                PHA             ; begin setdbr macro
.3906cc	08		php		                PHP
.3906cd	e2 20		sep #$20	                SEP #$20        ; set A short
.3906cf	a9 00		lda #$00	                LDA #0
.3906d1	48		pha		                PHA
.3906d2	ab		plb		                PLB
.3906d3	28		plp		                PLP
.3906d4	68		pla		                PLA             ; end setdbr macro
.3906d5	e2 20		sep #$20	                SEP #$20        ; set A short
.3906d7	c2 10		rep #$10	                REP #$10        ; set X long
.3906d9	48		pha		                PHA                 ; Save the character to print
.3906da	af 03 07 00	lda $000703	                LDA @lCHAN_OUT      ; Check the output channel #
.3906de	f0 16		beq $3906f6	                BEQ putc_screen     ; If it's 0: print to the screen
.3906e0	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.3906e2	f0 07		beq $3906eb	                BEQ putc_uart       ; Yes: handle printing to the UART
.3906e4	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.3906e6	f0 03		beq $3906eb	                BEQ putc_uart       ; Yes: handle printing to the UART
.3906e8	68		pla		                PLA                 ; Otherwise, just exit
.3906e9	80 4f		bra $39073a	                BRA done
.3906eb	22 1c 57 39	jsl $39571c	putc_uart       JSL UART_SELECT     ; Point to the correct UART
.3906ef	68		pla		                PLA                 ; Recover the character to send
.3906f0	22 f1 57 39	jsl $3957f1	                JSL UART_PUTC       ; Send the character
.3906f4	80 44		bra $39073a	                BRA done
.3906f6	68		pla		putc_screen     PLA                 ; Get the character to print
.3906f7	c9 0a		cmp #$0a	                CMP #CHAR_LF        ; Linefeed moves cursor down one line
.3906f9	f0 61		beq $39075c	                BEQ go_down
.3906fb	c9 20		cmp #$20	                CMP #$20
.3906fd	90 19		bcc $390718	                BCC check_ctrl0     ; [$00..$1F]: check for arrows
.3906ff	c9 7f		cmp #$7f	                CMP #$7F
.390701	f0 3d		beq $390740	                BEQ do_del
.390703	b0 02		bcs $390707	                BCS check_A0        ; [$20..$7E]: print it
.390705	80 29		bra $390730	                BRA printc
.390707	c9 a0		cmp #$a0	check_A0        CMP #$A0
.390709	90 02		bcc $39070d	                BCC check_ctrl1
.39070b	80 23		bra $390730	                BRA printc          ; [$A0..$FF]: print it
.39070d	c9 91		cmp #$91	check_ctrl1     CMP #CHAR_DOWN      ; If the down arrow key was pressed
.39070f	f0 4b		beq $39075c	                BEQ go_down         ; ... move the cursor down one row
.390711	c9 9d		cmp #$9d	                CMP #CHAR_LEFT      ; If the left arrow key was pressed
.390713	f0 59		beq $39076e	                BEQ go_left         ; ... move the cursor left one column
.390715	4c 3a 07	jmp $39073a	                JMP done
.390718	c9 09		cmp #$09	check_ctrl0     CMP #CHAR_TAB       ; If it's a TAB...
.39071a	f0 58		beq $390774	                BEQ do_TAB          ; ... move to the next TAB stop
.39071c	c9 08		cmp #$08	                CMP #CHAR_BS        ; If it's a backspace...
.39071e	f0 2c		beq $39074c	                BEQ backspace       ; ... move the cursor back and replace with a space
.390720	c9 0d		cmp #$0d	                CMP #CHAR_CR        ; If the carriage return was pressed
.390722	f0 32		beq $390756	                BEQ do_cr           ; ... move cursor down and to the first column
.390724	c9 11		cmp #$11	                CMP #CHAR_UP        ; If the up arrow key was pressed
.390726	f0 3a		beq $390762	                BEQ go_up           ; ... move the cursor up one row
.390728	c9 1d		cmp #$1d	                CMP #CHAR_RIGHT     ; If the right arrow key was pressed
.39072a	f0 3c		beq $390768	                BEQ go_right        ; ... move the cursor right one column
.39072c	c9 0f		cmp #$0f	                CMP #CHAR_INS       ; If the insert key was pressed
.39072e	f0 16		beq $390746	                BEQ do_ins          ; ... insert a space
.390730	87 17		sta [$17]	printc          STA [CURSORPOS]     ; Save the character on the screen
.390732	a5 1e		lda $1e		                LDA CURCOLOR        ; Set the color based on CURCOLOR
.390734	87 1f		sta [$1f]	                STA [COLORPOS]
.390736	22 4e 08 39	jsl $39084e	                JSL ICSRRIGHT       ; And advance the cursor
.39073a	28		plp		done            PLP
.39073b	ab		plb		                PLB
.39073c	2b		pld		                PLD
.39073d	7a		ply		                PLY
.39073e	fa		plx		                PLX
.39073f	6b		rtl		                RTL
.390740	22 9b 07 39	jsl $39079b	do_del          JSL SCRSHIFTLL      ; Shift the current line left one space into the cursor
.390744	80 f4		bra $39073a	                BRA done
.390746	22 bf 07 39	jsl $3907bf	do_ins          JSL SCRSHIFTLR      ; Shift the current line right one space from the cursor
.39074a	80 ee		bra $39073a	                BRA done
.39074c	22 81 08 39	jsl $390881	backspace       JSL ICSRLEFT
.390750	22 9b 07 39	jsl $39079b	                JSL SCRSHIFTLL      ; Shift the current line left one space into the cursor
.390754	80 e4		bra $39073a	                BRA done
.390756	22 ee 07 39	jsl $3907ee	do_cr           JSL IPRINTCR        ; Move the cursor to the beginning of the next line
.39075a	80 de		bra $39073a	                BRA done
.39075c	22 cd 08 39	jsl $3908cd	go_down         JSL ICSRDOWN        ; Move the cursor down one row (might force a scroll)
.390760	80 d8		bra $39073a	                BRA done
.390762	22 a7 08 39	jsl $3908a7	go_up           JSL ICSRUP          ; Move the cursor up one line
.390766	80 d2		bra $39073a	                BRA done
.390768	22 4e 08 39	jsl $39084e	go_right        JSL ICSRRIGHT       ; Move the cursor right one column
.39076c	80 cc		bra $39073a	                BRA done
.39076e	22 81 08 39	jsl $390881	go_left         JSL ICSRLEFT        ; Move the cursor left one column
.390772	80 c6		bra $39073a	                BRA done
.390774					do_TAB
.390774	c2 20		rep #$20	                REP #$20        ; set A long
.390776	a5 1a		lda $1a		                LDA CURSORX         ; Get the current column
.390778	29 f8 ff	and #$fff8	                AND #$FFF8          ; See which group of 8 it's in
.39077b	18		clc		                CLC
.39077c	69 08 00	adc #$0008	                ADC #$0008          ; And move it to the next one
.39077f	aa		tax		                TAX
.390780	a4 1c		ldy $1c		                LDY CURSORY
.390782	e2 20		sep #$20	                SEP #$20        ; set A short
.390784	e4 0f		cpx $0f		set_xy          CPX COLS_VISIBLE    ; Check if we're still on screen horizontally
.390786	90 04		bcc $39078c	                BCC check_row       ; Yes: check the row
.390788	a2 00 00	ldx #$0000	                LDX #0              ; No: move to the first column...
.39078b	c8		iny		                INY                 ; ... and the next row
.39078c	c4 13		cpy $13		check_row       CPY LINES_VISIBLE   ; Check if we're still on the screen vertically
.39078e	90 05		bcc $390795	                BCC do_locate       ; Yes: reposition the cursor
.390790	22 3e 09 39	jsl $39093e	                JSL ISCROLLUP       ; No: scroll the screen
.390794	88		dey		                DEY                 ; And set the row to the last one
.390795	22 f2 08 39	jsl $3908f2	do_locate       JSL ILOCATE         ; Set the cursor position
.390799	80 9f		bra $39073a	                BRA done
.39079b	da		phx		SCRSHIFTLL      PHX
.39079c	5a		phy		                PHY
.39079d	48		pha		                PHA
.39079e	0b		phd		                PHD
.39079f	08		php		                PHP
.3907a0	48		pha		                PHA             ; begin setdp macro
.3907a1	08		php		                PHP
.3907a2	c2 20		rep #$20	                REP #$20        ; set A long
.3907a4	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3907a7	5b		tcd		                TCD
.3907a8	28		plp		                PLP
.3907a9	68		pla		                PLA             ; end setdp macro
.3907aa	c2 30		rep #$30	                REP #$30        ; set A&X long
.3907ac	a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.3907ae	a8		tay		                TAY                 ; Set it as the destination
.3907af	aa		tax		                TAX
.3907b0	e8		inx		                INX                 ; And set the next cell as the source
.3907b1	38		sec		                SEC                 ; Calculate the length of the block to move
.3907b2	a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.3907b4	e5 1a		sbc $1a		                SBC CURSORX
.3907b6	54 af af	mvn $af,$af	                MVN $AF, $AF        ; And move the block
.3907b9	28		plp		                PLP
.3907ba	2b		pld		                PLD
.3907bb	68		pla		                PLA
.3907bc	7a		ply		                PLY
.3907bd	fa		plx		                PLX
.3907be	6b		rtl		                RTL
.3907bf	da		phx		SCRSHIFTLR      PHX
.3907c0	48		pha		                PHA
.3907c1	0b		phd		                PHD
.3907c2	08		php		                PHP
.3907c3	48		pha		                PHA             ; begin setdp macro
.3907c4	08		php		                PHP
.3907c5	c2 20		rep #$20	                REP #$20        ; set A long
.3907c7	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3907ca	5b		tcd		                TCD
.3907cb	28		plp		                PLP
.3907cc	68		pla		                PLA             ; end setdp macro
.3907cd	c2 30		rep #$30	                REP #$30        ; set A&X long
.3907cf	a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.3907d1	29 80 ff	and #$ff80	                AND #$FF80          ; Mask off the column bits
.3907d4	09 7f 00	ora #$007f	                ORA #$007F          ; And compute the address of the last cell
.3907d7	a8		tay		                TAY                 ; And set that as the destination address
.3907d8	3a		dec a		                DEC A               ; Compute the address of the character to the left
.3907d9	aa		tax		                TAX                 ; And make it the source
.3907da	38		sec		                SEC                 ; Calculate the length of the block to move
.3907db	a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.3907dd	e5 1a		sbc $1a		                SBC CURSORX
.3907df	44 af af	mvp $af,$af	                MVP $AF, $AF        ; And move the block
.3907e2	e2 20		sep #$20	                SEP #$20        ; set A short
.3907e4	a9 20		lda #$20	                LDA #CHAR_SP        ; Put a blank space at the cursor position
.3907e6	87 17		sta [$17]	                STA [CURSORPOS]
.3907e8	28		plp		                PLP
.3907e9	2b		pld		                PLD
.3907ea	68		pla		                PLA
.3907eb	fa		plx		                PLX
.3907ec	6b		rtl		                RTL
.3907ed					IPUTB
.3907ed	6b		rtl		                RTL
.3907ee					IPRINTCR
.3907ee	da		phx		                PHX
.3907ef	5a		phy		                PHY
.3907f0	8b		phb		                PHB
.3907f1	0b		phd		                PHD
.3907f2	08		php		                PHP
.3907f3	48		pha		                PHA             ; begin setdbr macro
.3907f4	08		php		                PHP
.3907f5	e2 20		sep #$20	                SEP #$20        ; set A short
.3907f7	a9 00		lda #$00	                LDA #0
.3907f9	48		pha		                PHA
.3907fa	ab		plb		                PLB
.3907fb	28		plp		                PLP
.3907fc	68		pla		                PLA             ; end setdbr macro
.3907fd	48		pha		                PHA             ; begin setdp macro
.3907fe	08		php		                PHP
.3907ff	c2 20		rep #$20	                REP #$20        ; set A long
.390801	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390804	5b		tcd		                TCD
.390805	28		plp		                PLP
.390806	68		pla		                PLA             ; end setdp macro
.390807	e2 20		sep #$20	                SEP #$20        ; set A short
.390809	c2 10		rep #$10	                REP #$10        ; set X long
.39080b	af 03 07 00	lda $000703	                LDA @lCHAN_OUT
.39080f	f0 1c		beq $39082d	                BEQ scr_printcr
.390811	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.390813	f0 06		beq $39081b	                BEQ uart_printcr    ; Yes: handle printing to the UART
.390815	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.390817	f0 02		beq $39081b	                BEQ uart_printcr    ; Yes: handle printing to the UART
.390819	80 1c		bra $390837	                BRA done
.39081b	22 1c 57 39	jsl $39571c	uart_printcr    JSL UART_SELECT
.39081f	a9 0d		lda #$0d	                LDA #CHAR_CR
.390821	22 bc 06 39	jsl $3906bc	                JSL IPUTC
.390825	a9 0a		lda #$0a	                LDA #CHAR_LF
.390827	22 bc 06 39	jsl $3906bc	                JSL IPUTC
.39082b	80 0a		bra $390837	                BRA done
.39082d	a2 00 00	ldx #$0000	scr_printcr     LDX #0
.390830	a4 1c		ldy $1c		                LDY CURSORY
.390832	c8		iny		                INY
.390833	22 f2 08 39	jsl $3908f2	                JSL ILOCATE
.390837	28		plp		done            PLP
.390838	2b		pld		                PLD
.390839	ab		plb		                PLB
.39083a	7a		ply		                PLY
.39083b	fa		plx		                PLX
.39083c	6b		rtl		                RTL
.39083d	da		phx		ICSRHOME        PHX
.39083e	5a		phy		                PHY
.39083f	08		php		                PHP
.390840	a2 00 00	ldx #$0000	                LDX #0
.390843	a0 00 00	ldy #$0000	                LDY #0
.390846	22 f2 08 39	jsl $3908f2	                JSL ILOCATE
.39084a	28		plp		                PLP
.39084b	7a		ply		                PLY
.39084c	fa		plx		                PLX
.39084d	6b		rtl		                RTL
.39084e	da		phx		ICSRRIGHT       PHX
.39084f	5a		phy		                PHY
.390850	48		pha		                PHA
.390851	0b		phd		                PHD
.390852	08		php		                PHP
.390853	c2 20		rep #$20	                REP #$20        ; set A long
.390855	c2 10		rep #$10	                REP #$10        ; set X long
.390857	48		pha		                PHA             ; begin setdp macro
.390858	08		php		                PHP
.390859	c2 20		rep #$20	                REP #$20        ; set A long
.39085b	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.39085e	5b		tcd		                TCD
.39085f	28		plp		                PLP
.390860	68		pla		                PLA             ; end setdp macro
.390861	a6 1a		ldx $1a		                LDX CURSORX           ; Get the new column
.390863	e8		inx		                INX
.390864	a4 1c		ldy $1c		                LDY CURSORY           ; Get the current row
.390866	e4 0f		cpx $0f		                CPX COLS_VISIBLE      ; Are we off screen?
.390868	90 0d		bcc $390877	                BCC icsrright_nowrap  ; No: just set the position
.39086a	a2 00 00	ldx #$0000	                LDX #0                ; Yes: move to the first column
.39086d	c8		iny		                INY                   ; And move to the next row
.39086e	c4 13		cpy $13		                CPY LINES_VISIBLE     ; Are we still off screen?
.390870	90 05		bcc $390877	                BCC icsrright_nowrap  ; No: just set the position
.390872	88		dey		                DEY                   ; Yes: lock to the last row
.390873	22 3e 09 39	jsl $39093e	                JSL ISCROLLUP         ; But scroll the screen up
.390877					icsrright_nowrap
.390877	22 f2 08 39	jsl $3908f2	                JSL ILOCATE           ; Set the cursor position
.39087b	28		plp		                PLP
.39087c	2b		pld		                PLD
.39087d	68		pla		                PLA
.39087e	7a		ply		                PLY
.39087f	fa		plx		                PLX
.390880	6b		rtl		                RTL
.390881					ICSRLEFT
.390881	da		phx		                PHX
.390882	5a		phy		                PHY
.390883	48		pha		                PHA
.390884	0b		phd		                PHD
.390885	08		php		                PHP
.390886	c2 30		rep #$30	                REP #$30        ; set A&X long
.390888	48		pha		                PHA             ; begin setdp macro
.390889	08		php		                PHP
.39088a	c2 20		rep #$20	                REP #$20        ; set A long
.39088c	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.39088f	5b		tcd		                TCD
.390890	28		plp		                PLP
.390891	68		pla		                PLA             ; end setdp macro
.390892	a5 1a		lda $1a		                LDA CURSORX
.390894	f0 0b		beq $3908a1	                BEQ icsrleft_done_already_zero ; Check that we are not already @ Zero
.390896	a6 1a		ldx $1a		                LDX CURSORX
.390898	ca		dex		                DEX
.390899	86 1a		stx $1a		                STX CURSORX
.39089b	a4 1c		ldy $1c		                LDY CURSORY
.39089d	22 f2 08 39	jsl $3908f2	                JSL ILOCATE
.3908a1					icsrleft_done_already_zero
.3908a1	28		plp		                PLP
.3908a2	2b		pld		                PLD
.3908a3	68		pla		                PLA
.3908a4	7a		ply		                PLY
.3908a5	fa		plx		                PLX
.3908a6	6b		rtl		                RTL
.3908a7					ICSRUP
.3908a7	da		phx		                PHX
.3908a8	5a		phy		                PHY
.3908a9	48		pha		                PHA
.3908aa	0b		phd		                PHD
.3908ab	08		php		                PHP
.3908ac	c2 30		rep #$30	                REP #$30        ; set A&X long
.3908ae	48		pha		                PHA             ; begin setdp macro
.3908af	08		php		                PHP
.3908b0	c2 20		rep #$20	                REP #$20        ; set A long
.3908b2	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.3908b5	5b		tcd		                TCD
.3908b6	28		plp		                PLP
.3908b7	68		pla		                PLA             ; end setdp macro
.3908b8	a5 1c		lda $1c		                LDA CURSORY
.3908ba	f0 0b		beq $3908c7	                BEQ isrup_done_already_zero ; Check if we are not already @ Zero
.3908bc	a4 1c		ldy $1c		                LDY CURSORY
.3908be	88		dey		                DEY
.3908bf	84 1c		sty $1c		                STY CURSORY
.3908c1	a6 1a		ldx $1a		                LDX CURSORX
.3908c3	22 f2 08 39	jsl $3908f2	                JSL ILOCATE
.3908c7					isrup_done_already_zero
.3908c7	28		plp		                PLP
.3908c8	2b		pld		                PLD
.3908c9	68		pla		                PLA
.3908ca	7a		ply		                PLY
.3908cb	fa		plx		                PLX
.3908cc	6b		rtl		                RTL
.3908cd	da		phx		ICSRDOWN        PHX
.3908ce	5a		phy		                PHY
.3908cf	0b		phd		                PHD
.3908d0	c2 30		rep #$30	                REP #$30        ; set A&X long
.3908d2	48		pha		                PHA             ; begin setdp macro
.3908d3	08		php		                PHP
.3908d4	c2 20		rep #$20	                REP #$20        ; set A long
.3908d6	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.3908d9	5b		tcd		                TCD
.3908da	28		plp		                PLP
.3908db	68		pla		                PLA             ; end setdp macro
.3908dc	a6 1a		ldx $1a		                LDX CURSORX                 ; Get the current column
.3908de	a4 1c		ldy $1c		                LDY CURSORY                 ; Get the new row
.3908e0	c8		iny		                INY
.3908e1	c4 13		cpy $13		                CPY LINES_VISIBLE           ; Check to see if we're off screen
.3908e3	90 05		bcc $3908ea	                BCC icsrdown_noscroll       ; No: go ahead and set the position
.3908e5	88		dey		                DEY                         ; Yes: go back to the last row
.3908e6	22 3e 09 39	jsl $39093e	                JSL ISCROLLUP               ; But scroll the screen up
.3908ea					icsrdown_noscroll
.3908ea	22 f2 08 39	jsl $3908f2	                JSL ILOCATE                 ; And set the cursor position
.3908ee	2b		pld		                PLD
.3908ef	7a		ply		                PLY
.3908f0	fa		plx		                PLX
.3908f1	6b		rtl		                RTL
.3908f2	48		pha		ILOCATE         PHA
.3908f3	0b		phd		                PHD
.3908f4	08		php		                PHP
.3908f5	48		pha		                PHA             ; begin setdp macro
.3908f6	08		php		                PHP
.3908f7	c2 20		rep #$20	                REP #$20        ; set A long
.3908f9	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3908fc	5b		tcd		                TCD
.3908fd	28		plp		                PLP
.3908fe	68		pla		                PLA             ; end setdp macro
.3908ff	c2 30		rep #$30	                REP #$30        ; set A&X long
.390901					ilocate_scroll
.390901	c4 13		cpy $13		                CPY LINES_VISIBLE
.390903	90 07		bcc $39090c	                BCC ilocate_scrolldone
.390905	22 3e 09 39	jsl $39093e	                JSL ISCROLLUP
.390909	88		dey		                DEY
.39090a	80 f5		bra $390901	                BRA ilocate_scroll
.39090c					ilocate_scrolldone
.39090c	86 1a		stx $1a		                STX CURSORX
.39090e	84 1c		sty $1c		                STY CURSORY
.390910	a5 0c		lda $0c		                LDA SCREENBEGIN
.390912					ilocate_row
.390912	c0 00 00	cpy #$0000	                CPY #$0
.390915	f0 08		beq $39091f	                BEQ ilocate_right
.390917	18		clc		ilocate_down    CLC
.390918	65 11		adc $11		                ADC COLS_PER_LINE
.39091a	88		dey		                DEY
.39091b	f0 02		beq $39091f	                BEQ ilocate_right
.39091d	80 f8		bra $390917	                BRA ilocate_down
.39091f	18		clc		ilocate_right   CLC
.390920	65 1a		adc $1a		                ADC CURSORX             ; move the cursor right X columns
.390922	85 17		sta $17		                STA CURSORPOS
.390924	a4 1c		ldy $1c		                LDY CURSORY
.390926	98		tya		                TYA
.390927	8f 16 00 af	sta $af0016	                STA @lVKY_TXT_CURSOR_Y_REG_L  ;Store in Vicky's registers
.39092b	8a		txa		                TXA
.39092c	8f 14 00 af	sta $af0014	                STA @lVKY_TXT_CURSOR_X_REG_L  ;Store in Vicky's register
.390930	c2 20		rep #$20	                REP #$20        ; set A long
.390932	18		clc		                CLC
.390933	a5 17		lda $17		                LDA CURSORPOS
.390935	69 00 20	adc #$2000	                ADC #<>(CS_COLOR_MEM_PTR - CS_TEXT_MEM_PTR)
.390938	85 1f		sta $1f		                STA COLORPOS
.39093a	28		plp		ilocate_done    PLP
.39093b	2b		pld		                PLD
.39093c	68		pla		                PLA
.39093d	6b		rtl		                RTL
.39093e					ISCROLLUP
.39093e	48		pha		                PHA
.39093f	da		phx		                PHX
.390940	5a		phy		                PHY
.390941	8b		phb		                PHB
.390942	0b		phd		                PHD
.390943	08		php		                PHP
.390944	48		pha		                PHA             ; begin setdp macro
.390945	08		php		                PHP
.390946	c2 20		rep #$20	                REP #$20        ; set A long
.390948	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39094b	5b		tcd		                TCD
.39094c	28		plp		                PLP
.39094d	68		pla		                PLA             ; end setdp macro
.39094e	c2 30		rep #$30	                REP #$30        ; set A&X long
.390950	a5 11		lda $11		                LDA COLS_PER_LINE
.390952	8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.390956	a5 13		lda $13		                LDA LINES_VISIBLE
.390958	8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.39095c	af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.390960	85 00		sta $00		                STA TMPPTR1
.390962	18		clc		                CLC
.390963	a9 00 a0	lda #$a000	                LDA #$A000
.390966	a8		tay		                TAY
.390967	65 11		adc $11		                ADC COLS_PER_LINE
.390969	aa		tax		                TAX
.39096a	a5 00		lda $00		                LDA TMPPTR1
.39096c	54 af af	mvn $af,$af	                MVN $AF,$AF
.39096f	c2 30		rep #$30	                REP #$30        ; set A&X long
.390971	18		clc		                CLC
.390972	a9 00 c0	lda #$c000	                LDA #$C000
.390975	a8		tay		                TAY
.390976	65 11		adc $11		                ADC COLS_PER_LINE
.390978	aa		tax		                TAX
.390979	a5 00		lda $00		                LDA TMPPTR1
.39097b	54 af af	mvn $af,$af	                MVN $AF,$AF
.39097e	a5 00		lda $00		                LDA TMPPTR1
.390980	48		pha		                PHA
.390981	18		clc		                CLC
.390982	69 00 a0	adc #$a000	                ADC #<>CS_TEXT_MEM_PTR
.390985	85 00		sta $00		                STA TMPPTR1
.390987	a0 00 00	ldy #$0000	                LDY #0
.39098a	a9 20 00	lda #$0020	                LDA #' '
.39098d	97 00		sta [$00],y	clr_text        STA [TMPPTR1],Y
.39098f	c8		iny		                INY
.390990	c4 0f		cpy $0f		                CPY COLS_VISIBLE
.390992	d0 f9		bne $39098d	                BNE clr_text
.390994	68		pla		                PLA
.390995	18		clc		                CLC
.390996	69 00 c0	adc #$c000	                ADC #<>CS_COLOR_MEM_PTR
.390999	85 00		sta $00		                STA TMPPTR1
.39099b	a0 00 00	ldy #$0000	                LDY #0
.39099e	a5 1e		lda $1e		                LDA CURCOLOR
.3909a0	97 00		sta [$00],y	clr_color       STA [TMPPTR1],Y
.3909a2	c8		iny		                INY
.3909a3	c4 0f		cpy $0f		                CPY COLS_VISIBLE
.3909a5	d0 f9		bne $3909a0	                BNE clr_color
.3909a7	28		plp		                PLP
.3909a8	2b		pld		                PLD
.3909a9	ab		plb		                PLB
.3909aa	7a		ply		                PLY
.3909ab	fa		plx		                PLX
.3909ac	68		pla		                PLA
.3909ad	6b		rtl		                RTL
.3909ae	08		php		IPRINTH         PHP
.3909af	48		pha		                PHA
.3909b0					iprinth1
.3909b0	e2 20		sep #$20	                SEP #$20        ; set A short
.3909b2	bd 00 00	lda $0000,x	                LDA #0,b,x      ; Read the value to be printed
.3909b5	4a		lsr a		                LSR
.3909b6	4a		lsr a		                LSR
.3909b7	4a		lsr a		                LSR
.3909b8	4a		lsr a		                LSR
.3909b9	22 08 0a 39	jsl $390a08	                JSL iprint_digit
.3909bd	bd 00 00	lda $0000,x	                LDA #0,b,x
.3909c0	22 08 0a 39	jsl $390a08	                JSL iprint_digit
.3909c4	ca		dex		                DEX
.3909c5	88		dey		                DEY
.3909c6	d0 e8		bne $3909b0	                BNE iprinth1
.3909c8	68		pla		                PLA
.3909c9	28		plp		                PLP
.3909ca	6b		rtl		                RTL
.3909cb					IPRINTAH
.3909cb	48		pha		                PHA
.3909cc	08		php		                PHP
.3909cd	8f 44 02 00	sta $000244	                STA @lCPUA            ; Save A where we can use it multiple times
.3909d1	08		php		                PHP                   ; Get the processor status into A
.3909d2	e2 20		sep #$20	                SEP #$20        ; set A short
.3909d4	c2 10		rep #$10	                REP #$10        ; set X long
.3909d6	68		pla		                PLA
.3909d7	29 20		and #$20	                AND #%00100000        ; Is M = 1?
.3909d9	c9 20		cmp #$20	                CMP #%00100000
.3909db	f0 14		beq $3909f1	                BEQ eight_bit
.3909dd	af 46 02 00	lda $000246	                LDA @lCPUA+2          ; Get nibble [15..12]
.3909e1	4a		lsr a		                LSR A
.3909e2	4a		lsr a		                LSR A
.3909e3	4a		lsr a		                LSR A
.3909e4	4a		lsr a		                LSR A
.3909e5	22 08 0a 39	jsl $390a08	                JSL iprint_digit      ; And print it
.3909e9	af 46 02 00	lda $000246	                LDA @lCPUA+2          ; Get nibble [11..8]
.3909ed	22 08 0a 39	jsl $390a08	                JSL iprint_digit      ; And print it
.3909f1	af 44 02 00	lda $000244	eight_bit       LDA @lCPUA            ; Get nibble [7..4]
.3909f5	4a		lsr a		                LSR A
.3909f6	4a		lsr a		                LSR A
.3909f7	4a		lsr a		                LSR A
.3909f8	4a		lsr a		                LSR A
.3909f9	22 08 0a 39	jsl $390a08	                JSL iprint_digit      ; And print it
.3909fd	af 44 02 00	lda $000244	                LDA @lCPUA            ; Get nibble [3..0]
.390a01	22 08 0a 39	jsl $390a08	                JSL iprint_digit      ; And print it
.390a05	28		plp		                PLP
.390a06	68		pla		                PLA
.390a07	6b		rtl		                RTL
.390a08	da		phx		iprint_digit    PHX
.390a09	c2 20		rep #$20	                REP #$20        ; set A long
.390a0b	29 0f 00	and #$000f	                AND #$0F
.390a0e	aa		tax		                TAX
.390a0f	bf 38 6c 39	lda $396c38,x	                LDA hex_digits,X
.390a13	22 bc 06 39	jsl $3906bc	                JSL IPUTC       ; Print the digit
.390a17	fa		plx		                PLX
.390a18	6b		rtl		                RTL
.390a19	48		pha		ICLRSCREEN	    PHA
.390a1a	da		phx		                PHX
.390a1b	08		php		                PHP
.390a1c	e2 20		sep #$20	                SEP #$20        ; set A short
.390a1e	c2 10		rep #$10	                REP #$10        ; set X long
.390a20	a2 00 00	ldx #$0000	                LDX #$0000		          ; Only Use One Pointer
.390a23	a9 20		lda #$20	                LDA #$20		            ; Fill the Entire Screen with Space
.390a25	9f 00 a0 af	sta $afa000,x	iclearloop0	    STA CS_TEXT_MEM_PTR, x	;
.390a29	e8		inx		                inx
.390a2a	e0 00 20	cpx #$2000	                cpx #$2000
.390a2d	d0 f6		bne $390a25	                bne iclearloop0
.390a2f	a2 00 00	ldx #$0000	                LDX	#$0000		          ; Only Use One Pointer
.390a32	af 1e 00 00	lda $00001e	                LDA @lCURCOLOR          ; Fill the Color Memory with the current color
.390a36	9f 00 c0 af	sta $afc000,x	iclearloop1	    STA CS_COLOR_MEM_PTR, x	;
.390a3a	e8		inx		                inx
.390a3b	e0 00 20	cpx #$2000	                cpx #$2000
.390a3e	d0 f6		bne $390a36	                bne iclearloop1
.390a40	28		plp		                PLP
.390a41	fa		plx		                PLX
.390a42	68		pla		                PLA
.390a43	6b		rtl		                RTL
.390a44					COPYBYTES42
.390a44	08		php		                PHP
.390a45	0b		phd		                PHD
.390a46	48		pha		                PHA             ; begin setdp macro
.390a47	08		php		                PHP
.390a48	c2 20		rep #$20	                REP #$20        ; set A long
.390a4a	a9 00 00	lda #$0000	                LDA #TMPPTR1         ; set DP to page 0
.390a4d	5b		tcd		                TCD
.390a4e	28		plp		                PLP
.390a4f	68		pla		                PLA             ; end setdp macro
.390a50	e2 20		sep #$20	                SEP #$20        ; set A short
.390a52	c2 10		rep #$10	                REP #$10        ; set X long
.390a54	a0 00 00	ldy #$0000	                LDY #0
.390a57	b7 00		lda [$00],y	copy_loop       LDA [TMPPTR1],Y
.390a59	97 04		sta [$04],y	                STA [TMPPTR2],Y
.390a5b	c8		iny		                INY
.390a5c	c0 2a 00	cpy #$002a	                CPY #42
.390a5f	d0 f6		bne $390a57	                BNE copy_loop
.390a61	2b		pld		                PLD
.390a62	28		plp		                PLP
.390a63	60		rts		                RTS
.390a64					ICOLORFLAG
.390a64	48		pha		                PHA
.390a65	da		phx		                PHX
.390a66	5a		phy		                PHY
.390a67	08		php		                PHP
.390a68	8b		phb		                PHB
.390a69	0b		phd		                PHD
.390a6a	48		pha		                PHA             ; begin setdp macro
.390a6b	08		php		                PHP
.390a6c	c2 20		rep #$20	                REP #$20        ; set A long
.390a6e	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390a71	5b		tcd		                TCD
.390a72	28		plp		                PLP
.390a73	68		pla		                PLA             ; end setdp macro
.390a74	c2 30		rep #$30	                REP #$30        ; set A&X long
.390a76	a9 00 c0	lda #$c000	                LDA #<>CS_COLOR_MEM_PTR
.390a79	85 04		sta $04		                STA TMPPTR2
.390a7b	a9 af 00	lda #$00af	                LDA #`CS_COLOR_MEM_PTR
.390a7e	85 06		sta $06		                STA TMPPTR2+2
.390a80	a9 34 69	lda #$6934	                LDA #<>greet_clr_line1
.390a83	85 00		sta $00		                STA TMPPTR1
.390a85	a9 39 00	lda #$0039	                LDA #`greet_clr_line1
.390a88	85 02		sta $02		                STA TMPPTR1+2
.390a8a	20 44 0a	jsr $390a44	                JSR COPYBYTES42
.390a8d	18		clc		                CLC
.390a8e	a5 04		lda $04		                LDA TMPPTR2
.390a90	65 11		adc $11		                ADC COLS_PER_LINE
.390a92	85 04		sta $04		                STA TMPPTR2
.390a94	a9 5e 69	lda #$695e	                LDA #<>greet_clr_line2
.390a97	85 00		sta $00		                STA TMPPTR1
.390a99	a9 39 00	lda #$0039	                LDA #`greet_clr_line2
.390a9c	85 02		sta $02		                STA TMPPTR1+2
.390a9e	20 44 0a	jsr $390a44	                JSR COPYBYTES42
.390aa1	18		clc		                CLC
.390aa2	a5 04		lda $04		                LDA TMPPTR2
.390aa4	65 11		adc $11		                ADC COLS_PER_LINE
.390aa6	85 04		sta $04		                STA TMPPTR2
.390aa8	a9 88 69	lda #$6988	                LDA #<>greet_clr_line3
.390aab	85 00		sta $00		                STA TMPPTR1
.390aad	a9 39 00	lda #$0039	                LDA #`greet_clr_line3
.390ab0	85 02		sta $02		                STA TMPPTR1+2
.390ab2	20 44 0a	jsr $390a44	                JSR COPYBYTES42
.390ab5	18		clc		                CLC
.390ab6	a5 04		lda $04		                LDA TMPPTR2
.390ab8	65 11		adc $11		                ADC COLS_PER_LINE
.390aba	85 04		sta $04		                STA TMPPTR2
.390abc	a9 b2 69	lda #$69b2	                LDA #<>greet_clr_line4
.390abf	85 00		sta $00		                STA TMPPTR1
.390ac1	a9 39 00	lda #$0039	                LDA #`greet_clr_line4
.390ac4	85 02		sta $02		                STA TMPPTR1+2
.390ac6	20 44 0a	jsr $390a44	                JSR COPYBYTES42
.390ac9	18		clc		                CLC
.390aca	a5 04		lda $04		                LDA TMPPTR2
.390acc	65 11		adc $11		                ADC COLS_PER_LINE
.390ace	85 04		sta $04		                STA TMPPTR2
.390ad0	a9 dc 69	lda #$69dc	                LDA #<>greet_clr_line5
.390ad3	85 00		sta $00		                STA TMPPTR1
.390ad5	a9 39 00	lda #$0039	                LDA #`greet_clr_line5
.390ad8	85 02		sta $02		                STA TMPPTR1+2
.390ada	20 44 0a	jsr $390a44	                JSR COPYBYTES42
.390add	2b		pld		                PLD
.390ade	ab		plb		                PLB
.390adf	28		plp		                PLP
.390ae0	7a		ply		                PLY
.390ae1	fa		plx		                PLX
.390ae2	68		pla		                PLA
.390ae3	6b		rtl		                RTL
.390ae4	0b		phd		IINITCHLUT		  PHD
.390ae5	08		php		                PHP
.390ae6	48		pha		                PHA
.390ae7	da		phx		                PHX
.390ae8	e2 20		sep #$20	                SEP #$20        ; set A short
.390aea	e2 10		sep #$10	                SEP #$10        ; set X short
.390aec	a2 00		ldx #$00					        LDX	#$00
.390aee	bf 06 6a 39	lda $396a06,x	lutinitloop0	  LDA @lfg_color_lut,x		; get Local Data
.390af2	9f 40 1f af	sta $af1f40,x	                STA FG_CHAR_LUT_PTR,x	; Write in LUT Memory
.390af6	e8		inx		                inx
.390af7	e0 40		cpx #$40	                cpx #$40
.390af9	d0 f3		bne $390aee	                bne lutinitloop0
.390afb	a2 00		ldx #$00	                LDX	#$00
.390afd	bf 46 6a 39	lda $396a46,x	lutinitloop1	  LDA @lbg_color_lut,x		; get Local Data
.390b01	9f 80 1f af	sta $af1f80,x	                STA BG_CHAR_LUT_PTR,x	; Write in LUT Memory
.390b05	e8		inx		                INX
.390b06	e0 40		cpx #$40	                CPX #$40
.390b08	d0 f3		bne $390afd	                bne lutinitloop1
.390b0a	c2 20		rep #$20	                REP #$20        ; set A long
.390b0c	c2 10		rep #$10	                REP #$10        ; set X long
.390b0e	fa		plx		                PLX
.390b0f	68		pla		                PLA
.390b10	28		plp		                PLP
.390b11	2b		pld		                PLD
.390b12	6b		rtl		                RTL
.390b13					IINITGAMMATABLE
.390b13	e2 20		sep #$20	                SEP #$20        ; set A short
.390b15	c2 10		rep #$10	                REP #$10        ; set X long
.390b17	a2 00 00	ldx #$0000	                ldx #$0000
.390b1a	bf 00 71 39	lda $397100,x	initgammaloop   LDA GAMMA_1_8_Tbl, x
.390b1e	9f 00 40 af	sta $af4000,x	                STA GAMMA_B_LUT_PTR, x
.390b22	9f 00 41 af	sta $af4100,x	                STA GAMMA_G_LUT_PTR, x
.390b26	9f 00 42 af	sta $af4200,x	                STA GAMMA_R_LUT_PTR, x
.390b2a	e8		inx		                inx
.390b2b	e0 00 01	cpx #$0100	                cpx #$0100
.390b2e	d0 ea		bne $390b1a	                bne initgammaloop
.390b30	c2 30		rep #$30	                REP #$30        ; set A&X long
.390b32	6b		rtl		                RTL
.390b33	48		pha		IINITALLLUT     PHA
.390b34	da		phx		                PHX
.390b35	a2 00 00	ldx #$0000	                LDX #$0000
.390b38	e2 20		sep #$20	                SEP #$20        ; set A short
.390b3a	a9 00		lda #$00	                LDA #$00
.390b3c	85 0a		sta $0a		                STA $0A     ; Temp Location
.390b3e					iinit_lut_loop
.390b3e	86 02		stx $02		                STX $02
.390b40	a6 0a		ldx $0a		                LDX $0A
.390b42	bf 00 70 39	lda $397000,x	                LDA GAMMA_2_2_Tbl, x
.390b46	49 55		eor #$55	                EOR  #$55
.390b48	a6 02		ldx $02		                LDX $02
.390b4a	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390b4e	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390b52	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390b56	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390b5a	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390b5e	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390b62	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390b66	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390b6a	e8		inx		                inx
.390b6b	86 02		stx $02		                STX $02
.390b6d	a6 0a		ldx $0a		                LDX $0A
.390b6f	bf 00 72 39	lda $397200,x	                LDA RANDOM_LUT_Tbl, x
.390b73	a6 02		ldx $02		                LDX $02
.390b75	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390b79	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390b7d	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390b81	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390b85	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390b89	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390b8d	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390b91	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390b95	e8		inx		                inx
.390b96	86 02		stx $02		                STX $02
.390b98	a6 0a		ldx $0a		                LDX $0A
.390b9a	bf 00 71 39	lda $397100,x	                LDA GAMMA_1_8_Tbl, x
.390b9e	49 aa		eor #$aa	                EOR  #$AA
.390ba0	a6 02		ldx $02		                LDX $02
.390ba2	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390ba6	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390baa	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390bae	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390bb2	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390bb6	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390bba	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390bbe	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390bc2	e8		inx		                inx
.390bc3	a9 ff		lda #$ff	                LDA #$FF
.390bc5	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390bc9	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390bcd	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390bd1	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390bd5	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390bd9	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390bdd	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390be1	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390be5	e6 0a		inc $0a		                inc $0A
.390be7	e8		inx		                inx
.390be8	e0 00 04	cpx #$0400	                cpx #$0400
.390beb	f0 03		beq $390bf0	                beq iinit_lut_exit
.390bed	82 4e ff	brl $390b3e	                brl iinit_lut_loop
.390bf0					iinit_lut_exit
.390bf0	c2 30		rep #$30	                REP #$30        ; set A&X long
.390bf2	fa		plx		                PLX
.390bf3	68		pla		                PLA
.390bf4	6b		rtl		                RTL
.390bf5	48		pha		IINITVKYTXTMODE PHA
.390bf6	08		php		                PHP
.390bf7	e2 20		sep #$20	                SEP #$20        ; set A short
.390bf9	a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En       ; Okay, this Enables the Text Mode (Video Display)
.390bfb	8f 00 00 af	sta $af0000	                STA MASTER_CTRL_REG_L
.390bff	a9 00		lda #$00	                LDA #0                            ; 640x480 mode (80 columns max)
.390c01	8f 01 00 af	sta $af0001	                STA @lMASTER_CTRL_REG_H
.390c05	a9 20		lda #$20	                LDA #$20
.390c07	8f 05 00 af	sta $af0005	                STA BORDER_COLOR_B
.390c0b	8f 07 00 af	sta $af0007	                STA BORDER_COLOR_R
.390c0f	a9 00		lda #$00	                LDA #$00
.390c11	8f 06 00 af	sta $af0006	                STA BORDER_COLOR_G
.390c15	a9 01		lda #$01	                LDA #Border_Ctrl_Enable           ; Enable the Border
.390c17	8f 04 00 af	sta $af0004	                STA BORDER_CTRL_REG
.390c1b	a9 20		lda #$20	                LDA #32                           ; Set the border to the standard 32 pixels
.390c1d	8f 08 00 af	sta $af0008	                STA BORDER_X_SIZE
.390c21	8f 09 00 af	sta $af0009	                STA BORDER_Y_SIZE
.390c25	c2 30		rep #$30	                REP #$30        ; set A&X long
.390c27	22 2e 0c 39	jsl $390c2e	                JSL ISETSIZES                     ; Calculate the size of the text screen
.390c2b	28		plp		                PLP
.390c2c	68		pla		                PLA
.390c2d	6b		rtl		                RTL
.390c2e					ISETSIZES
.390c2e	48		pha		                PHA
.390c2f	da		phx		                PHX
.390c30	5a		phy		                PHY
.390c31	8b		phb		                PHB
.390c32	0b		phd		                PHD
.390c33	08		php		                PHP
.390c34	48		pha		                PHA             ; begin setdp macro
.390c35	08		php		                PHP
.390c36	c2 20		rep #$20	                REP #$20        ; set A long
.390c38	a9 00 00	lda #$0000	                LDA #<>BANK0_BEGIN         ; set DP to page 0
.390c3b	5b		tcd		                TCD
.390c3c	28		plp		                PLP
.390c3d	68		pla		                PLA             ; end setdp macro
.390c3e	48		pha		                PHA             ; begin setdbr macro
.390c3f	08		php		                PHP
.390c40	e2 20		sep #$20	                SEP #$20        ; set A short
.390c42	a9 00		lda #$00	                LDA #0
.390c44	48		pha		                PHA
.390c45	ab		plb		                PLB
.390c46	28		plp		                PLP
.390c47	68		pla		                PLA             ; end setdbr macro
.390c48	e2 30		sep #$30	                SEP #$30        ; set A&X short
.390c4a	af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.390c4e	29 03		and #$03	                AND #$03                    ; Mask off the resolution bits
.390c50	0a		asl a		                ASL A
.390c51	aa		tax		                TAX                         ; Index to the col/line count in X
.390c52	c2 20		rep #$20	                REP #$20        ; set A long
.390c54	bf d1 0c 39	lda $390cd1,x	                LDA cols_by_res,X           ; Get the number of columns
.390c58	85 11		sta $11		                STA COLS_PER_LINE           ; This is how many columns there are per line in the memory
.390c5a	85 0f		sta $0f		                STA COLS_VISIBLE            ; This is how many would be visible with no border
.390c5c	bf d9 0c 39	lda $390cd9,x	                LDA lines_by_res,X          ; Get the number of lines
.390c60	85 15		sta $15		                STA LINES_MAX               ; This is the total number of lines in memory
.390c62	85 13		sta $13		                STA LINES_VISIBLE           ; This is how many lines would be visible with no border
.390c64	e2 20		sep #$20	                SEP #$20        ; set A short
.390c66	af 04 00 af	lda $af0004	                LDA @l BORDER_CTRL_REG      ; Check to see if we have a border
.390c6a	89 01		bit #$01	                BIT #Border_Ctrl_Enable
.390c6c	f0 5c		beq $390cca	                BEQ done                    ; No border... the sizes are correct now
.390c6e	af 08 00 af	lda $af0008	                LDA @l BORDER_X_SIZE        ; Get the horizontal border width
.390c72	29 3f		and #$3f	                AND #$3F
.390c74	89 03		bit #$03	                BIT #$03                    ; Check the lower two bits... indicates a partial column is eaten
.390c76	d0 04		bne $390c7c	                BNE frac_width
.390c78	4a		lsr a		                LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.390c79	4a		lsr a		                LSR A
.390c7a	80 03		bra $390c7f	                BRA store_width
.390c7c	4a		lsr a		frac_width      LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.390c7d	4a		lsr a		                LSR A                       ; because a column is partially hidden
.390c7e	1a		inc a		                INC A
.390c7f	85 00		sta $00		store_width     STA TMPPTR1
.390c81	64 01		stz $01		                STZ TMPPTR1+1
.390c83	e2 20		sep #$20	                SEP #$20        ; set A short
.390c85	af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H    ; Check if we're pixel doubling
.390c89	89 02		bit #$02	                BIT #Mstr_Ctrl_Video_Mode1
.390c8b	f0 04		beq $390c91	                BEQ adjust_width            ; No... just adjust the width of the screen
.390c8d	c2 20		rep #$20	                REP #$20        ; set A long
.390c8f	46 00		lsr $00		                LSR TMPPTR1                 ; Yes... cut the adjustment in half
.390c91					adjust_width
.390c91	c2 20		rep #$20	                REP #$20        ; set A long
.390c93	38		sec		                SEC
.390c94	a5 11		lda $11		                LDA COLS_PER_LINE
.390c96	e5 00		sbc $00		                SBC TMPPTR1
.390c98	85 0f		sta $0f		                STA COLS_VISIBLE
.390c9a	af 09 00 af	lda $af0009	                LDA @l BORDER_Y_SIZE        ; Get the horizontal border width
.390c9e	29 3f 00	and #$003f	                AND #$3F
.390ca1	89 03 00	bit #$0003	                BIT #$03                    ; Check the lower two bits... indicates a partial column is eaten
.390ca4	d0 04		bne $390caa	                BNE frac_height
.390ca6	4a		lsr a		                LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.390ca7	4a		lsr a		                LSR A
.390ca8	80 03		bra $390cad	                BRA store_height
.390caa	4a		lsr a		frac_height     LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.390cab	4a		lsr a		                LSR A                       ; because a column is partially hidden
.390cac	1a		inc a		                INC A
.390cad	85 00		sta $00		store_height    STA TMPPTR1
.390caf	64 01		stz $01		                STZ TMPPTR1+1
.390cb1	e2 20		sep #$20	                SEP #$20        ; set A short
.390cb3	af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H    ; Check if we're pixel doubling
.390cb7	89 02		bit #$02	                BIT #Mstr_Ctrl_Video_Mode1
.390cb9	f0 04		beq $390cbf	                BEQ adjust_height           ; No... just adjust the height of the screen
.390cbb	c2 20		rep #$20	                REP #$20        ; set A long
.390cbd	46 00		lsr $00		                LSR TMPPTR1                 ; Yes... cut the adjustment in half
.390cbf					adjust_height
.390cbf	c2 20		rep #$20	                REP #$20        ; set A long
.390cc1	38		sec		                SEC
.390cc2	a5 15		lda $15		                LDA LINES_MAX
.390cc4	e5 00		sbc $00		                SBC TMPPTR1
.390cc6	85 13		sta $13		                STA LINES_VISIBLE
.390cc8	c2 30		rep #$30	                REP #$30        ; set A&X long
.390cca	28		plp		done            PLP
.390ccb	2b		pld		                PLD
.390ccc	ab		plb		                PLB
.390ccd	7a		ply		                PLY
.390cce	fa		plx		                PLX
.390ccf	68		pla		                PLA
.390cd0	6b		rtl		                RTL
>390cd1	50 00 64 00 28 00 32 00		cols_by_res     .word 80,100,40,50
>390cd9	3c 00 4b 00 1e 00 25 00		lines_by_res    .word 60,75,30,37
.390ce1					IINITVKYGRPMODE
.390ce1	48		pha		                PHA
.390ce2	e2 20		sep #$20	                SEP #$20        ; set A short
.390ce4	a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.390ce6	8f 00 01 af	sta $af0100	                STA @lBM0_CONTROL_REG
.390cea	a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.390cec	8f 01 01 af	sta $af0101	                STA @lBM0_START_ADDY_L
.390cf0	a9 c0		lda #$c0	                LDA #$C0
.390cf2	8f 02 01 af	sta $af0102	                STA @lBM0_START_ADDY_M
.390cf6	a9 00		lda #$00	                LDA #$00
.390cf8	8f 03 01 af	sta $af0103	                STA @lBM0_START_ADDY_H ; This address is always base from
.390cfc	a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.390cfe	8f 08 01 af	sta $af0108	                STA @lBM1_CONTROL_REG
.390d02	a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.390d04	8f 09 01 af	sta $af0109	                STA @lBM1_START_ADDY_L
.390d08	a9 c0		lda #$c0	                LDA #$C0
.390d0a	8f 0a 01 af	sta $af010a	                STA @lBM1_START_ADDY_M
.390d0e	a9 00		lda #$00	                LDA #$00
.390d10	8f 0b 01 af	sta $af010b	                STA @lBM1_START_ADDY_H ; This address is always base from
.390d14	c2 30		rep #$30	                REP #$30        ; set A&X long
.390d16	68		pla		                PLA
.390d17	6b		rtl		                RTL
.390d18					IINITTILEMODE
.390d18	6b		rtl		                RTL
.390d19	48		pha		IINITSPRITE     PHA
.390d1a	e2 20		sep #$20	                SEP #$20        ; set A short
.390d1c	a9 03		lda #$03	                LDA #$03    ; Enable 17 Sprites
.390d1e	8f 00 02 af	sta $af0200	                STA SP00_CONTROL_REG
.390d22	8f 08 02 af	sta $af0208	                STA SP01_CONTROL_REG
.390d26	8f 10 02 af	sta $af0210	                STA SP02_CONTROL_REG
.390d2a	8f 18 02 af	sta $af0218	                STA SP03_CONTROL_REG
.390d2e	8f 20 02 af	sta $af0220	                STA SP04_CONTROL_REG
.390d32	8f 28 02 af	sta $af0228	                STA SP05_CONTROL_REG
.390d36	8f 30 02 af	sta $af0230	                STA SP06_CONTROL_REG
.390d3a	8f 38 02 af	sta $af0238	                STA SP07_CONTROL_REG
.390d3e	8f 40 02 af	sta $af0240	                STA SP08_CONTROL_REG
.390d42	8f 48 02 af	sta $af0248	                STA SP09_CONTROL_REG
.390d46	8f 50 02 af	sta $af0250	                STA SP10_CONTROL_REG
.390d4a	8f 58 02 af	sta $af0258	                STA SP11_CONTROL_REG
.390d4e	8f 60 02 af	sta $af0260	                STA SP12_CONTROL_REG
.390d52	8f 68 02 af	sta $af0268	                STA SP13_CONTROL_REG
.390d56	8f 70 02 af	sta $af0270	                STA SP14_CONTROL_REG
.390d5a	8f 78 02 af	sta $af0278	                STA SP15_CONTROL_REG
.390d5e	8f 80 02 af	sta $af0280	                STA SP16_CONTROL_REG
.390d62	a9 09		lda #$09	                LDA #$09
.390d64	8f 03 02 af	sta $af0203	                STA SP00_ADDY_PTR_H
.390d68	8f 0b 02 af	sta $af020b	                STA SP01_ADDY_PTR_H
.390d6c	8f 13 02 af	sta $af0213	                STA SP02_ADDY_PTR_H
.390d70	8f 1b 02 af	sta $af021b	                STA SP03_ADDY_PTR_H
.390d74	8f 23 02 af	sta $af0223	                STA SP04_ADDY_PTR_H
.390d78	8f 2b 02 af	sta $af022b	                STA SP05_ADDY_PTR_H
.390d7c	8f 33 02 af	sta $af0233	                STA SP06_ADDY_PTR_H
.390d80	8f 3b 02 af	sta $af023b	                STA SP07_ADDY_PTR_H
.390d84	8f 43 02 af	sta $af0243	                STA SP08_ADDY_PTR_H
.390d88	8f 4b 02 af	sta $af024b	                STA SP09_ADDY_PTR_H
.390d8c	8f 53 02 af	sta $af0253	                STA SP10_ADDY_PTR_H
.390d90	8f 5b 02 af	sta $af025b	                STA SP11_ADDY_PTR_H
.390d94	8f 63 02 af	sta $af0263	                STA SP12_ADDY_PTR_H
.390d98	8f 6b 02 af	sta $af026b	                STA SP13_ADDY_PTR_H
.390d9c	8f 73 02 af	sta $af0273	                STA SP14_ADDY_PTR_H
.390da0	8f 7b 02 af	sta $af027b	                STA SP15_ADDY_PTR_H
.390da4	8f 83 02 af	sta $af0283	                STA SP16_ADDY_PTR_H
.390da8	a9 00		lda #$00	                LDA #$00
.390daa	8f 02 02 af	sta $af0202	                STA SP00_ADDY_PTR_M
.390dae	a9 04		lda #$04	                LDA #$04
.390db0	8f 0a 02 af	sta $af020a	                STA SP01_ADDY_PTR_M
.390db4	a9 08		lda #$08	                LDA #$08
.390db6	8f 12 02 af	sta $af0212	                STA SP02_ADDY_PTR_M
.390dba	a9 0c		lda #$0c	                LDA #$0C
.390dbc	8f 1a 02 af	sta $af021a	                STA SP03_ADDY_PTR_M
.390dc0	a9 10		lda #$10	                LDA #$10
.390dc2	8f 22 02 af	sta $af0222	                STA SP04_ADDY_PTR_M
.390dc6	a9 14		lda #$14	                LDA #$14
.390dc8	8f 2a 02 af	sta $af022a	                STA SP05_ADDY_PTR_M
.390dcc	a9 18		lda #$18	                LDA #$18
.390dce	8f 32 02 af	sta $af0232	                STA SP06_ADDY_PTR_M
.390dd2	a9 1c		lda #$1c	                LDA #$1C
.390dd4	8f 3a 02 af	sta $af023a	                STA SP07_ADDY_PTR_M
.390dd8	a9 20		lda #$20	                LDA #$20
.390dda	8f 42 02 af	sta $af0242	                STA SP08_ADDY_PTR_M
.390dde	a9 24		lda #$24	                LDA #$24
.390de0	8f 4a 02 af	sta $af024a	                STA SP09_ADDY_PTR_M
.390de4	a9 28		lda #$28	                LDA #$28
.390de6	8f 52 02 af	sta $af0252	                STA SP10_ADDY_PTR_M
.390dea	a9 2c		lda #$2c	                LDA #$2C
.390dec	8f 5a 02 af	sta $af025a	                STA SP11_ADDY_PTR_M
.390df0	a9 30		lda #$30	                LDA #$30
.390df2	8f 62 02 af	sta $af0262	                STA SP12_ADDY_PTR_M
.390df6	a9 34		lda #$34	                LDA #$34
.390df8	8f 6a 02 af	sta $af026a	                STA SP13_ADDY_PTR_M
.390dfc	a9 38		lda #$38	                LDA #$38
.390dfe	8f 72 02 af	sta $af0272	                STA SP14_ADDY_PTR_M
.390e02	a9 3c		lda #$3c	                LDA #$3C
.390e04	8f 7a 02 af	sta $af027a	                STA SP15_ADDY_PTR_M
.390e08	a9 40		lda #$40	                LDA #$40
.390e0a	8f 82 02 af	sta $af0282	                STA SP16_ADDY_PTR_M
.390e0e	a9 00		lda #$00	                LDA #$00
.390e10	8f 01 02 af	sta $af0201	                STA SP00_ADDY_PTR_L
.390e14	8f 09 02 af	sta $af0209	                STA SP01_ADDY_PTR_L
.390e18	8f 11 02 af	sta $af0211	                STA SP02_ADDY_PTR_L
.390e1c	8f 19 02 af	sta $af0219	                STA SP03_ADDY_PTR_L
.390e20	8f 21 02 af	sta $af0221	                STA SP04_ADDY_PTR_L
.390e24	8f 29 02 af	sta $af0229	                STA SP05_ADDY_PTR_L
.390e28	8f 31 02 af	sta $af0231	                STA SP06_ADDY_PTR_L
.390e2c	8f 39 02 af	sta $af0239	                STA SP07_ADDY_PTR_L
.390e30	8f 41 02 af	sta $af0241	                STA SP08_ADDY_PTR_L
.390e34	8f 49 02 af	sta $af0249	                STA SP09_ADDY_PTR_L
.390e38	8f 51 02 af	sta $af0251	                STA SP10_ADDY_PTR_L
.390e3c	8f 59 02 af	sta $af0259	                STA SP11_ADDY_PTR_L
.390e40	8f 61 02 af	sta $af0261	                STA SP12_ADDY_PTR_L
.390e44	8f 69 02 af	sta $af0269	                STA SP13_ADDY_PTR_L
.390e48	8f 71 02 af	sta $af0271	                STA SP14_ADDY_PTR_L
.390e4c	8f 79 02 af	sta $af0279	                STA SP15_ADDY_PTR_L
.390e50	8f 81 02 af	sta $af0281	                STA SP16_ADDY_PTR_L
.390e54	68		pla		                PLA
.390e55	6b		rtl		                RTL
.390e56					IINITFONTSET
.390e56	e2 20		sep #$20	                SEP #$20        ; set A short
.390e58	c2 10		rep #$10	                REP #$10        ; set X long
.390e5a	a2 00 00	ldx #$0000	                LDX #$0000
.390e5d					initFontsetbranch0
.390e5d	bf 00 f0 3f	lda $3ff000,x	                LDA @lFONT_4_BANK0,X    ; RAM Content
.390e61	9f 00 80 af	sta $af8000,x	                STA @lFONT_MEMORY_BANK0,X ; Vicky FONT RAM Bank
.390e65	e8		inx		                INX
.390e66	e0 00 08	cpx #$0800	                CPX #$0800
.390e69	d0 f2		bne $390e5d	                BNE initFontsetbranch0
.390e6b	ea		nop		                NOP
.390e6c	a2 00 00	ldx #$0000	                LDX #$0000
.390e6f					initFontsetbranch1
.390e6f	bf 00 f8 3f	lda $3ff800,x	                LDA @lFONT_4_BANK1,X
.390e73	9f 00 88 af	sta $af8800,x	                STA @lFONT_MEMORY_BANK1,X ; Vicky FONT RAM Bank
.390e77	e8		inx		                INX
.390e78	e0 00 08	cpx #$0800	                CPX #$0800
.390e7b	d0 f2		bne $390e6f	                BNE initFontsetbranch1
.390e7d	ea		nop		                NOP
.390e7e	c2 30		rep #$30	                REP #$30        ; set A&X long
.390e80	6b		rtl		                RTL
.390e81					INITMOUSEPOINTER
.390e81	e2 20		sep #$20	                SEP #$20        ; set A short
.390e83	c2 10		rep #$10	                REP #$10        ; set X long
.390e85	a2 00 00	ldx #$0000	                LDX #$0000
.390e88					FILL_MOUSE_MARKER
.390e88	bf 00 73 39	lda $397300,x	                LDA @lMOUSE_POINTER_PTR,X
.390e8c	9f 00 05 af	sta $af0500,x	                STA @lMOUSE_PTR_GRAP0_START, X
.390e90	e8		inx		                INX
.390e91	e0 00 01	cpx #$0100	                CPX #$0100
.390e94	d0 f2		bne $390e88	                BNE FILL_MOUSE_MARKER
.390e96	ea		nop		                nop
.390e97	a9 01		lda #$01	                LDA #$01
.390e99	8f 00 07 af	sta $af0700	                STA @lMOUSE_PTR_CTRL_REG_L  ; Enable Mouse, Mouse Pointer Graphic Bank 0
.390e9d	c2 30		rep #$30	                REP #$30        ; set A&X long
.390e9f	6b		rtl		                RTL
.390ea0	48		pha		IINITCURSOR     PHA
.390ea1	e2 20		sep #$20	                SEP #$20        ; set A short
.390ea3	a9 b1		lda #$b1	                LDA #$B1      ;The Cursor Character will be a Fully Filled Block
.390ea5	8f 12 00 af	sta $af0012	                STA VKY_TXT_CURSOR_CHAR_REG
.390ea9	a9 03		lda #$03	                LDA #$03      ;Set Cursor Enable And Flash Rate @1Hz
.390eab	8f 10 00 af	sta $af0010	                STA VKY_TXT_CURSOR_CTRL_REG ;
.390eaf	c2 30		rep #$30	                REP #$30        ; set A&X long
.390eb1	a9 00 00	lda #$0000	                LDA #$0000;
.390eb4	8f 14 00 af	sta $af0014	                STA VKY_TXT_CURSOR_X_REG_L; // Set the X to Position 1
.390eb8	a9 06 00	lda #$0006	                LDA #$0006;
.390ebb	8f 16 00 af	sta $af0016	                STA VKY_TXT_CURSOR_Y_REG_L; // Set the Y to Position 6 (Below)
.390ebf	68		pla		                PLA
.390ec0	6b		rtl		                RTL
.390ec1	0b		phd		IINITSUPERIO	  PHD
.390ec2	08		php		                PHP
.390ec3	48		pha		                PHA
.390ec4	e2 20		sep #$20	                SEP #$20        ; set A short
.390ec6	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390ec8	8f 23 11 af	sta $af1123	                STA GP10_REG
.390ecc	af 23 11 af	lda $af1123	                LDA GP10_REG
.390ed0	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390ed2	8f 24 11 af	sta $af1124	                STA GP11_REG
.390ed6	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390ed8	8f 25 11 af	sta $af1125	                STA GP12_REG
.390edc	a9 01		lda #$01	        				LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390ede	8f 26 11 af	sta $af1126	        				STA GP13_REG
.390ee2	a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BX) Bit[0] = 1, Bit[2] = 1
.390ee4	8f 27 11 af	sta $af1127	        				STA GP14_REG
.390ee8	a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BY) Bit[0] = 1, Bit[2] = 1
.390eea	8f 28 11 af	sta $af1128	        				STA GP15_REG
.390eee	a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BX) Bit[0] = 1, Bit[2] = 1
.390ef0	8f 29 11 af	sta $af1129	        				STA GP16_REG
.390ef4	a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BY) Bit[0] = 1, Bit[2] = 1
.390ef6	8f 2a 11 af	sta $af112a	        				STA GP17_REG
.390efa	a9 00		lda #$00	        				LDA #$00		;(C256 - HEADPHONE MUTE) - Output GPIO - Push-Pull (1 - Headphone On, 0 - HeadPhone Off)
.390efc	8f 2b 11 af	sta $af112b	        				STA GP20_REG
.390f00	a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390f02	8f 2f 11 af	sta $af112f					        STA GP24_REG
.390f06	a9 05		lda #$05					        LDA #$05		;(C256 - MIDI IN) Bit[0] = 1, Bit[2] = 1 (Page 132 Manual)
.390f08	8f 30 11 af	sta $af1130					        STA GP25_REG
.390f0c	a9 84		lda #$84				        	LDA #$84		;(C256 - MIDI OUT) Bit[2] = 1, Bit[7] = 1 (Open Drain - To be Checked)
.390f0e	8f 31 11 af	sta $af1131					        STA GP26_REG
.390f12	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 1) Setup as GPIO Input for now
.390f14	8f 33 11 af	sta $af1133					        STA GP30_REG
.390f18	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 4) Setup as GPIO Input for now
.390f1a	8f 34 11 af	sta $af1134					        STA GP31_REG
.390f1e	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 3) Setup as GPIO Input for now
.390f20	8f 35 11 af	sta $af1135					        STA GP32_REG
.390f24	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 6) Setup as GPIO Input for now
.390f26	8f 36 11 af	sta $af1136					        STA GP33_REG
.390f2a	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 5) Setup as GPIO Input for now
.390f2c	8f 37 11 af	sta $af1137					        STA GP34_REG
.390f30	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 8) Setup as GPIO Input for now
.390f32	8f 38 11 af	sta $af1138					        STA GP35_REG
.390f36	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 7) Setup as GPIO Input for now
.390f38	8f 39 11 af	sta $af1139					        STA GP36_REG
.390f3c	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 10) Setup as GPIO Input for now
.390f3e	8f 3a 11 af	sta $af113a					        STA GP37_REG
.390f42	a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390f44	8f 3d 11 af	sta $af113d					        STA GP42_REG
.390f48	a9 01		lda #$01				          LDA #$01		;(C256 - INPUT PLL CLK INTERRUPT) Default Value - Will keep it as an input for now, no real usage for now
.390f4a	8f 3e 11 af	sta $af113e					        STA GP43_REG
.390f4e	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RI2) - Input - Set Secondary Function
.390f50	8f 3f 11 af	sta $af113f					        STA GP50_REG
.390f54	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DCD2) - Input - Set Secondary Function
.390f56	8f 40 11 af	sta $af1140					        STA GP51_REG
.390f5a	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RXD2) - Input - Set Secondary Function
.390f5c	8f 41 11 af	sta $af1141					        STA GP52_REG
.390f60	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - TXD2) - Output - Set Secondary Function
.390f62	8f 42 11 af	sta $af1142					        STA GP53_REG
.390f66	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DSR2) - Input - Set Secondary Function
.390f68	8f 43 11 af	sta $af1143					        STA GP54_REG
.390f6c	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - RTS2) - Output - Set Secondary Function
.390f6e	8f 44 11 af	sta $af1144					        STA GP55_REG
.390f72	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - CTS2) - Input - Set Secondary Function
.390f74	8f 45 11 af	sta $af1145					        STA GP56_REG
.390f78	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - DTR2) - Output - Set Secondary Function
.390f7a	8f 46 11 af	sta $af1146					        STA GP57_REG
.390f7e	a9 84		lda #$84					        LDA #$84		;(C256 - LED1) - Open Drain - Output
.390f80	8f 47 11 af	sta $af1147					        STA GP60_REG
.390f84	a9 84		lda #$84					        LDA #$84		;(C256 - LED2) - Open Drain - Output
.390f86	8f 48 11 af	sta $af1148					        STA GP61_REG
.390f8a	a9 00		lda #$00				        	LDA #$00		;GPIO Data Register (GP10..GP17) - Not Used
.390f8c	8f 4b 11 af	sta $af114b					        STA GP1_REG
.390f90	a9 01		lda #$01					        LDA #$01		;GPIO Data Register (GP20..GP27) - Bit[0] - Headphone Mute (Enabling it)
.390f92	8f 4c 11 af	sta $af114c					        STA GP2_REG
.390f96	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP30..GP37) - Since it is in Output mode, nothing to write here.
.390f98	8f 4d 11 af	sta $af114d					        STA GP3_REG
.390f9c	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP40..GP47)  - Not Used
.390f9e	8f 4e 11 af	sta $af114e					        STA GP4_REG
.390fa2	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP50..GP57)  - Not Used
.390fa4	8f 4f 11 af	sta $af114f					        STA GP5_REG
.390fa8	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP60..GP61)  - Not Used
.390faa	8f 50 11 af	sta $af1150					        STA GP6_REG
.390fae	a9 01		lda #$01					        LDA #$01		;LED1 Output - Already setup by Vicky Init Phase, for now, I will leave it alone
.390fb0	8f 5d 11 af	sta $af115d					        STA LED1_REG
.390fb4	a9 02		lda #$02					        LDA #$02		;LED2 Output - However, I will setup this one, to make sure the Code works (Full On, when Code was ran)
.390fb6	8f 5e 11 af	sta $af115e					        STA LED2_REG
.390fba	c2 20		rep #$20	                REP #$20        ; set A long
.390fbc	68		pla		                PLA
.390fbd	28		plp						        PLP
.390fbe	2b		pld					        	PLD
.390fbf	6b		rtl		                RTL
.390fc0	0b		phd		IINITKEYBOARD	  PHD
.390fc1	08		php						        PHP
.390fc2	48		pha						        PHA
.390fc3	da		phx						        PHX
.390fc4	e2 20		sep #$20	                SEP #$20        ; set A short
.390fc6	c2 10		rep #$10	                REP #$10        ; set X long
.390fc8	18		clc		                CLC
.390fc9	20 79 10	jsr $391079	                JSR Poll_Inbuf ;
.390fcc	a9 aa		lda #$aa					        LDA #$AA			;Send self test command
.390fce	8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.390fd2	20 84 10	jsr $391084	                JSR Poll_Outbuf ;
.390fd5	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Check self test result
.390fd9	c9 55		cmp #$55					        CMP #$55
.390fdb	f0 03		beq $390fe0					        BEQ	passAAtest
.390fdd	82 89 00	brl $391069	                BRL initkb_loop_out
.390fe0					passAAtest
.390fe0	a9 ab		lda #$ab					        LDA #$AB			;Send test Interface command
.390fe2	8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.390fe6	20 84 10	jsr $391084	                JSR Poll_Outbuf ;
.390fe9	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Display Interface test results
.390fed	c9 00		cmp #$00					        CMP #$00			;Should be 00
.390fef	f0 03		beq $390ff4					        BEQ	passABtest
.390ff1	82 75 00	brl $391069	                BRL initkb_loop_out
.390ff4					passABtest
.390ff4	a9 60		lda #$60	                LDA #$60            ; Send Command 0x60 so to Enable Interrupt
.390ff6	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390ffa	20 79 10	jsr $391079	                JSR Poll_Inbuf ;
.390ffd	a9 69		lda #$69	                LDA #%01101001      ; Enable Interrupt
.390fff	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.391003	20 79 10	jsr $391079	                JSR Poll_Inbuf ;
.391006	a9 ff		lda #$ff	                LDA #$FF      ; Send Keyboard Reset command
.391008	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.39100c	a2 ff ff	ldx #$ffff	                LDX #$FFFF
.39100f	ca		dex		DLY_LOOP1       DEX
.391010	ea		nop		                NOP
.391011	ea		nop		                NOP
.391012	ea		nop		                NOP
.391013	ea		nop		                NOP
.391014	ea		nop		                NOP
.391015	ea		nop		                NOP
.391016	ea		nop		                NOP
.391017	ea		nop		                NOP
.391018	e0 00 00	cpx #$0000	                CPX #$0000
.39101b	d0 f2		bne $39100f	                BNE DLY_LOOP1
.39101d	20 84 10	jsr $391084	                JSR Poll_Outbuf ;
.391020	af 60 10 af	lda $af1060	                LDA KBD_OUT_BUF   ; Read Output Buffer
.391024					DO_CMD_F4_AGAIN
.391024	20 79 10	jsr $391079	                JSR Poll_Inbuf ;
.391027	a9 f4		lda #$f4					        LDA #$F4			; Enable the Keyboard
.391029	8f 60 10 af	sta $af1060					        STA KBD_DATA_BUF
.39102d	20 84 10	jsr $391084	                JSR Poll_Outbuf ;
.391030	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		; Clear the Output buffer
.391034	c9 fa		cmp #$fa	                CMP #$FA
.391036	d0 ec		bne $391024	                BNE DO_CMD_F4_AGAIN
.391038	20 8f 10	jsr $39108f	                JSR INIT_MOUSE
.39103b	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0  ; Read the Pending Register &
.39103f	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.391041	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0  ; Writing it back will clear the Active Bit
.391045	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1  ; Read the Pending Register &
.391049	29 01		and #$01	                AND #FNX1_INT00_KBD
.39104b	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1  ; Writing it back will clear the Active Bit
.39104f	af 4d 01 00	lda $00014d	                LDA @lINT_MASK_REG1
.391053	29 fe		and #$fe	                AND #~FNX1_INT00_KBD
.391055	8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.391059	af 4c 01 00	lda $00014c	                LDA @lINT_MASK_REG0
.39105d	29 7f		and #$7f	                AND #~FNX0_INT07_MOUSE
.39105f	8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.391063	a2 02 6b	ldx #$6b02	                LDX #<>Success_kb_init
.391066	38		sec		                SEC
.391067	b0 03		bcs $39106c	                BCS InitSuccess
.391069	a2 14 6b	ldx #$6b14	initkb_loop_out LDX #<>Failed_kb_init
.39106c	22 9c 06 39	jsl $39069c	InitSuccess     JSL IPRINT       ; print Message
.391070	c2 20		rep #$20	                REP #$20        ; set A long
.391072	c2 10		rep #$10	                REP #$10        ; set X long
.391074	fa		plx		                PLX
.391075	68		pla		                PLA
.391076	28		plp						        PLP
.391077	2b		pld						        PLD
.391078	6b		rtl		                RTL
.391079					Poll_Inbuf
.391079	af 64 10 af	lda $af1064	                LDA STATUS_PORT		; Load Status Byte
.39107d	29 02		and #$02					        AND	#<INPT_BUF_FULL	; Test bit $02 (if 0, Empty)
.39107f	c9 02		cmp #$02					        CMP #<INPT_BUF_FULL
.391081	f0 f6		beq $391079					        BEQ Poll_Inbuf
.391083	60		rts		                RTS
.391084					Poll_Outbuf
.391084	af 64 10 af	lda $af1064	                LDA STATUS_PORT
.391088	29 01		and #$01	                AND #OUT_BUF_FULL ; Test bit $01 (if 1, Full)
.39108a	c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.39108c	d0 f6		bne $391084	                BNE Poll_Outbuf
.39108e	60		rts		                RTS
.39108f					INIT_MOUSE
.39108f	20 79 10	jsr $391079	                JSR Poll_Inbuf
.391092	a9 a8		lda #$a8	                LDA #$A8          ; Enable the second PS2 Channel
.391094	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.391098					DO_CMD_A9_AGAIN
.391098	20 79 10	jsr $391079	                JSR Poll_Inbuf
.39109b	a9 a9		lda #$a9	                LDA #$A9          ; Tests second PS2 Channel
.39109d	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.3910a1	20 84 10	jsr $391084	                JSR Poll_Outbuf ;
.3910a4	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		; Clear the Output buffer
.3910a8	c9 00		cmp #$00	                CMP #$00
.3910aa	d0 ec		bne $391098	                BNE DO_CMD_A9_AGAIN
.3910ac	20 79 10	jsr $391079	                JSR Poll_Inbuf
.3910af	a9 20		lda #$20	                LDA #$20
.3910b1	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.3910b5	20 84 10	jsr $391084	                JSR Poll_Outbuf ;
.3910b8	af 60 10 af	lda $af1060	                LDA KBD_OUT_BUF
.3910bc	09 02		ora #$02	                ORA #$02
.3910be	48		pha		                PHA
.3910bf	20 79 10	jsr $391079	                JSR Poll_Inbuf
.3910c2	a9 60		lda #$60	                LDA #$60
.3910c4	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.3910c8	20 79 10	jsr $391079	                JSR Poll_Inbuf ;
.3910cb	68		pla		                PLA
.3910cc	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.3910d0	a9 f6		lda #$f6	                LDA #$F6        ;Tell the mouse to use default settings
.3910d2	20 f5 10	jsr $3910f5	                JSR MOUSE_WRITE
.3910d5	20 08 11	jsr $391108	                JSR MOUSE_READ
.3910d8	a9 e8		lda #$e8	                LDA #$E8
.3910da	20 f5 10	jsr $3910f5	                JSR MOUSE_WRITE
.3910dd	20 08 11	jsr $391108	                JSR MOUSE_READ
.3910e0	a9 00		lda #$00	                LDA #$00
.3910e2	20 f5 10	jsr $3910f5	                JSR MOUSE_WRITE
.3910e5	20 08 11	jsr $391108	                JSR MOUSE_READ
.3910e8	a9 f4		lda #$f4	                LDA #$F4        ; Enable the Mouse
.3910ea	20 f5 10	jsr $3910f5	                JSR MOUSE_WRITE
.3910ed	20 08 11	jsr $391108	                JSR MOUSE_READ
.3910f0	a9 00		lda #$00	                LDA #$00
.3910f2	85 e0		sta $e0		                STA MOUSE_PTR
.3910f4	60		rts		                RTS
.3910f5					MOUSE_WRITE
.3910f5	48		pha		                PHA
.3910f6	20 79 10	jsr $391079	                JSR Poll_Inbuf
.3910f9	a9 d4		lda #$d4	                LDA #$D4
.3910fb	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.3910ff	20 79 10	jsr $391079	                JSR Poll_Inbuf
.391102	68		pla		                PLA
.391103	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.391107	60		rts		                RTS
.391108					MOUSE_READ
.391108	20 84 10	jsr $391084	                JSR Poll_Outbuf ;
.39110b	af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF
.39110f	60		rts		                RTS
.391110	48		pha		INITRTC         PHA
.391111	08		php		                PHP
.391112	e2 20		sep #$20	                SEP #$20        ; set A short
.391114	a9 00		lda #$00	                LDA #0
.391116	8f 0b 08 af	sta $af080b	                STA @l RTC_RATES    ; Set watch dog timer and periodic interrupt rates to 0
.39111a	8f 0c 08 af	sta $af080c	                STA @l RTC_ENABLE   ; Disable all the alarms and interrupts
.39111e	af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL      ; Make sure the RTC will continue to tick in battery mode
.391122	09 04		ora #$04	                ORA #%00000100
.391124	8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.391128	28		plp		                PLP
.391129	68		pla		                PLA
.39112a	6b		rtl		                RTL
.39112b					ITESTSID
.39112b	a9 0f		lda #$0f	                LDA #$0F
.39112d	8f 18 e4 af	sta $afe418	                STA SID0_MODE_VOL
.391131	a9 be		lda #$be	                LDA #$BE
.391133	8f 05 e4 af	sta $afe405	                STA SID0_V1_ATCK_DECY
.391137	a9 f8		lda #$f8	                LDA #$F8
.391139	8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.39113d	a9 11		lda #$11	                LDA #$11
.39113f	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.391143	a9 25		lda #$25	                LDA #$25
.391145	8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.391149	a9 11		lda #$11	                LDA #$11
.39114b	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL
.39114f	a9 08		lda #$08	                LDA #$08
.391151	8f 03 e4 af	sta $afe403	                STA SID0_V1_PW_HI   ;G1
.391155	a9 00		lda #$00	                LDA #$00
.391157	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.39115b	a9 c6		lda #$c6	                LDA #$C6
.39115d	8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.391161	a9 08		lda #$08	                LDA #$08
.391163	8f 0a e4 af	sta $afe40a	                STA SID0_V2_PW_HI   ;G1
.391167	a9 00		lda #$00	                LDA #$00
.391169	8f 08 e4 af	sta $afe408	                STA SID0_V2_FREQ_HI
.39116d	a9 08		lda #$08	                LDA #$08
.39116f	8f 0c e4 af	sta $afe40c	                STA SID0_V2_ATCK_DECY
.391173	a9 c6		lda #$c6	                LDA #$C6
.391175	8f 0d e4 af	sta $afe40d	                STA SID0_V2_SSTN_RLSE
.391179	a9 08		lda #$08	                LDA #$08
.39117b	8f 11 e4 af	sta $afe411	                STA SID0_V3_PW_HI   ;G1
.39117f	a9 00		lda #$00	                LDA #$00
.391181	8f 0f e4 af	sta $afe40f	                STA SID0_V3_FREQ_HI
.391185	a9 08		lda #$08	                LDA #$08
.391187	8f 13 e4 af	sta $afe413	                STA SID0_V3_ATCK_DECY
.39118b	a9 c6		lda #$c6	                LDA #$C6
.39118d	8f 14 e4 af	sta $afe414	                STA SID0_V3_SSTN_RLSE
.391191	a9 36		lda #$36	                LDA #$36              ;Left Side (Rev A of Board)
.391193	8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.391197	a9 01		lda #$01	                LDA #$01
.391199	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI   ;G1
.39119d	a9 00		lda #$00	                LDA #$00              ;Left Side (Rev A of Board)
.39119f	8f 02 e4 af	sta $afe402	                STA SID0_V1_PW_LO
.3911a3	a9 08		lda #$08	                LDA #$08
.3911a5	8f 03 e4 af	sta $afe403	                STA SID0_V1_PW_HI   ;G1
.3911a9	a9 08		lda #$08	                LDA #$08
.3911ab	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL    ; Reset
.3911af	a9 0c		lda #$0c	                LDA #$0C
.3911b1	8f 07 e4 af	sta $afe407	                STA SID0_V2_FREQ_LO
.3911b5	a9 04		lda #$04	                LDA #$04
.3911b7	8f 08 e4 af	sta $afe408	                STA SID0_V2_FREQ_HI   ;B1
.3911bb	a9 00		lda #$00	                LDA #$00              ;Left Side (Rev A of Board)
.3911bd	8f 09 e4 af	sta $afe409	                STA SID0_V2_PW_LO
.3911c1	a9 08		lda #$08	                LDA #$08
.3911c3	8f 0a e4 af	sta $afe40a	                STA SID0_V2_PW_HI   ;G1
.3911c7	a9 08		lda #$08	                LDA #$08
.3911c9	8f 0b e4 af	sta $afe40b	                STA SID0_V2_CTRL    ; Reset
.3911cd	a9 00		lda #$00	                LDA #$00
.3911cf	8f 0e e4 af	sta $afe40e	                STA SID0_V3_FREQ_LO
.3911d3	a9 08		lda #$08	                LDA #$08
.3911d5	8f 0f e4 af	sta $afe40f	                STA SID0_V3_FREQ_HI   ;D
.3911d9	a9 00		lda #$00	                LDA #$00              ;Left Side (Rev A of Board)
.3911db	8f 10 e4 af	sta $afe410	                STA SID0_V3_PW_LO
.3911df	a9 08		lda #$08	                LDA #$08
.3911e1	8f 11 e4 af	sta $afe411	                STA SID0_V3_PW_HI   ;G1
.3911e5	a9 08		lda #$08	                LDA #$08
.3911e7	8f 12 e4 af	sta $afe412	                STA SID0_V3_CTRL    ; Reset
.3911eb	a9 10		lda #$10	                LDA #$10
.3911ed	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL    ; Triangle
.3911f1	8f 0b e4 af	sta $afe40b	                STA SID0_V2_CTRL    ; Triangle
.3911f5	8f 12 e4 af	sta $afe412	                STA SID0_V3_CTRL    ; Triangle
.3911f9	6b		rtl		                RTL
.3911fa	48		pha		IINITCODEC      PHA
.3911fb	c2 20		rep #$20	                REP #$20        ; set A long
.3911fd	a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R13 - Turn On Headphones
.391200	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391204	a9 01 00	lda #$0001	                LDA #$0001
.391207	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.39120b	20 8a 12	jsr $39128a	                JSR CODEC_TRF_FINISHED
.39120e	a9 0f 2a	lda #$2a0f	                LDA #%0010101000001111       ;R21 - Enable All the Analog In
.391211	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391215	a9 01 00	lda #$0001	                LDA #$0001
.391218	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.39121c	20 8a 12	jsr $39128a	                JSR CODEC_TRF_FINISHED
.39121f	a9 01 23	lda #$2301	                LDA #%0010001100000001      ;R17 - Enable All the Analog In
.391222	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391226	a9 01 00	lda #$0001	                LDA #$0001
.391229	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.39122d	20 8a 12	jsr $39128a	                JSR CODEC_TRF_FINISHED
.391230	a9 07 2c	lda #$2c07	                LDA #%0010110000000111      ;R22 - Enable all Analog Out
.391233	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391237	a9 01 00	lda #$0001	                LDA #$0001
.39123a	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.39123e	20 8a 12	jsr $39128a	                JSR CODEC_TRF_FINISHED
.391241	a9 02 14	lda #$1402	                LDA #%0001010000000010      ;R10 - DAC Interface Control
.391244	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391248	a9 01 00	lda #$0001	                LDA #$0001
.39124b	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.39124f	20 8a 12	jsr $39128a	                JSR CODEC_TRF_FINISHED
.391252	a9 02 16	lda #$1602	                LDA #%0001011000000010      ;R11 - ADC Interface Control
.391255	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391259	a9 01 00	lda #$0001	                LDA #$0001
.39125c	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391260	20 8a 12	jsr $39128a	                JSR CODEC_TRF_FINISHED
.391263	a9 d5 19	lda #$19d5	                LDA #%0001100111010101      ;R12 - Master Mode Control
.391266	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39126a	a9 01 00	lda #$0001	                LDA #$0001
.39126d	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391271	20 8a 12	jsr $39128a	                JSR CODEC_TRF_FINISHED
.391274	68		pla		                PLA
.391275	6b		rtl		                RTL
.391276					IRESETCODEC
.391276	c2 20		rep #$20	                REP #$20        ; set A long
.391278	a9 00 2e	lda #$2e00	                LDA #$2E00      ;R22 - Enable all Analog Out
.39127b	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39127f	a9 01 00	lda #$0001	                LDA #$0001
.391282	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391286	20 8a 12	jsr $39128a	                JSR CODEC_TRF_FINISHED
.391289	6b		rtl		                RTL
.39128a					CODEC_TRF_FINISHED
.39128a	e2 20		sep #$20	                SEP #$20        ; set A short
.39128c	af 02 e9 af	lda $afe902	CODEC_LOOP      LDA CODEC_WR_CTRL
.391290	29 01		and #$01	                AND #$01
.391292	c9 01		cmp #$01	                CMP #$01
.391294	f0 f6		beq $39128c	                BEQ CODEC_LOOP
.391296	c2 20		rep #$20	                REP #$20        ; set A long
.391298	60		rts		                RTS
.391299					IBM_FILL_SCREEN
.391299	c2 30		rep #$30	                REP #$30        ; set A&X long
.39129b	a9 00 00	lda #$0000	                LDA #$0000
.39129e	a2 00 00	ldx #$0000	                LDX #$0000
.3912a1					BM_FILL_SCREEN_LOOPY
.3912a1	a0 00 00	ldy #$0000	                LDY #$0000
.3912a4	e2 20		sep #$20	                SEP #$20        ; set A short
.3912a6					BM_FILL_SCREEN_LOOPX
.3912a6	97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.3912a8	c8		iny		                INY
.3912a9	c4 40		cpy $40		                CPY BM_CLEAR_SCRN_X              ; Transfer the First line
.3912ab	d0 f9		bne $3912a6	                BNE BM_FILL_SCREEN_LOOPX
.3912ad	20 b8 12	jsr $3912b8	                JSR BM_FILL_COMPUTE_Y_DST
.3912b0	e8		inx		                INX
.3912b1	e4 42		cpx $42		                CPX BM_CLEAR_SCRN_Y
.3912b3	d0 ec		bne $3912a1	                BNE BM_FILL_SCREEN_LOOPY
.3912b5	c2 30		rep #$30	                REP #$30        ; set A&X long
.3912b7	6b		rtl		                RTL
.3912b8					BM_FILL_COMPUTE_Y_DST
.3912b8	c2 20		rep #$20	                REP #$20        ; set A long
.3912ba	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR        ; Right now it is set @ $020000 (128K) + File Size
.3912bc	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3912c0	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2      ; Right now it is set @ $020000 (128K)
.3912c2	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.3912c6	a9 80 02	lda #$0280	                LDA #$280        ; Right now it is set @ $020000 (128K) + File Size
.3912c9	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.3912cd	a9 00 00	lda #$0000	                LDA #$0000
.3912d0	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.3912d4	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.3912d8	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.3912da	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.3912de	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.3912e0	a9 00 00	lda #$0000	                LDA #$0000
.3912e3	60		rts		                RTS
.3912e4					IBMP_PARSER
.3912e4	c2 30		rep #$30	                REP #$30        ; set A&X long
.3912e6	a0 00 00	ldy #$0000	                LDY #$0000
.3912e9	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y
.3912eb	c9 42 4d	cmp #$4d42	                CMP #$4D42
.3912ee	f0 03		beq $3912f3	                BEQ IBMP_PARSER_CONT
.3912f0	82 04 01	brl $3913f7	                BRL BMP_PARSER_END_WITH_ERROR
.3912f3					IBMP_PARSER_CONT
.3912f3	a0 02 00	ldy #$0002	                LDY #$0002
.3912f6	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size Low Short
.3912f8	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.3912fc	a0 04 00	ldy #$0004	                LDY #$0004
.3912ff	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size High Short
.391301	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.391305	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Store -1 in Adder (B)
.391308	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.39130c	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.391310	18		clc		                CLC
.391311	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.391315	85 50		sta $50		                STA BMP_FILE_SIZE
.391317	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.39131b	85 52		sta $52		                STA BMP_FILE_SIZE+2
.39131d	a0 12 00	ldy #$0012	                LDY #$0012
.391320	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.391322	85 40		sta $40		                STA BMP_X_SIZE
.391324	a0 16 00	ldy #$0016	                LDY #$0016
.391327	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.391329	85 42		sta $42		                STA BMP_Y_SIZE
.39132b	a0 2e 00	ldy #$002e	                LDY #$002E
.39132e	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.391330	0a		asl a		                ASL A; Multiply by 2
.391331	0a		asl a		                ASL A; Multiply by 2
.391332	85 4c		sta $4c		                STA BMP_COLOR_PALET         ;
.391334	e0 00 00	cpx #$0000	                CPX #$0000
.391337	d0 05		bne $39133e	                BNE BMP_LUT1_PICK
.391339	20 ff 13	jsr $3913ff	                JSR BMP_PARSER_UPDATE_LUT0   ; Go Upload the LUT0
.39133c	80 08		bra $391346	                BRA DONE_TRANSFER_LUT;
.39133e					  BMP_LUT1_PICK
.39133e	e0 01 00	cpx #$0001	                CPX #$0001
.391341	d0 03		bne $391346	                BNE BMP_LUT2_PICK
.391343	20 2f 14	jsr $39142f	                JSR BMP_PARSER_UPDATE_LUT1   ; Go Upload the LUT1
.391346					  BMP_LUT2_PICK
.391346					  DONE_TRANSFER_LUT
.391346	a5 56		lda $56		                LDA BMP_POSITION_Y
.391348	8f 00 01 00	sta $000100	                STA @lUNSIGNED_MULT_A_LO
.39134c	a5 4e		lda $4e		                LDA SCRN_X_STRIDE
.39134e	8f 02 01 00	sta $000102	                STA @lUNSIGNED_MULT_B_LO
.391352	af 04 01 00	lda $000104	                LDA @lUNSIGNED_MULT_AL_LO
.391356	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.39135a	af 06 01 00	lda $000106	                LDA @lUNSIGNED_MULT_AL_LO+2
.39135e	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.391362	a5 54		lda $54		                LDA BMP_POSITION_X
.391364	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Put the X Position Adder (B)
.391368	a9 00 00	lda #$0000	                LDA #$0000
.39136b	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.39136f	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in TEMP
.391373	85 f0		sta $f0		                STA USER_TEMP
.391375	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in TEMP
.391379	85 f2		sta $f2		                STA USER_TEMP+2
.39137b	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.39137d	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.391381	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.391383	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.391387	a5 f0		lda $f0		                LDA USER_TEMP
.391389	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store in 32Bit Adder (B)
.39138d	a5 f2		lda $f2		                LDA USER_TEMP+2
.39138f	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in 32Bit Adder (B)
.391393	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in BMP_PRSE_DST_PTR
.391397	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.391399	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in BMP_PRSE_DST_PTR
.39139d	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.39139f	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K)
.3913a1	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3913a5	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2        ; Right now it is set @ $020000 (128K)
.3913a7	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.3913ab	a5 50		lda $50		                LDA BMP_FILE_SIZE
.3913ad	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.3913b1	a5 52		lda $52		                LDA BMP_FILE_SIZE+2
.3913b3	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.3913b7	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.3913bb	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.3913bd	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.3913c1	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.3913c3	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.3913c5	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3913c9	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.3913cb	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.3913cf	18		clc		                CLC
.3913d0	a5 40		lda $40		                LDA BMP_X_SIZE              ; Load The Size in X of the image and Make it negative
.3913d2	49 ff ff	eor #$ffff	                EOR #$FFFF                  ; Inverse all bit
.3913d5	69 01 00	adc #$0001	                ADC #$0001                  ; Add 0 ()
.3913d8	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store the Results in reg B of ADDER32
.3913dc	a9 ff ff	lda #$ffff	                LDA #$FFFF
.3913df	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in the Reminder of the 32Bits B Register
.3913e3	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.3913e7	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.3913e9	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.3913ed	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.3913ef	20 5f 14	jsr $39145f	                JSR BMP_PARSER_DMA_SHIT_OUT  ; We are going to start with the slow method
.3913f2	a2 50 6b	ldx #$6b50	                LDX #<>bmp_parser_msg0
.3913f5	80 03		bra $3913fa	                BRA BMP_PARSER_END_NO_ERROR
.3913f7					BMP_PARSER_END_WITH_ERROR
.3913f7	a2 3c 6b	ldx #$6b3c	                LDX #<>bmp_parser_err0
.3913fa					BMP_PARSER_END_NO_ERROR
.3913fa	22 9c 06 39	jsl $39069c	                JSL IPRINT       ; print the first line
.3913fe	6b		rtl		                RTL
.3913ff					BMP_PARSER_UPDATE_LUT0
.3913ff	38		sec		                SEC
.391400	a0 7a 00	ldy #$007a	                LDY #$007A
.391403	a2 00 00	ldx #$0000	                LDX #$0000
.391406	e2 20		sep #$20	                SEP #$20        ; set A short
.391408					BMP_PARSER_UPDATE_LOOP
.391408	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.39140a	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR+0, X      ; The look-up Table point to a pixel Blue
.39140e	c8		iny		                INY
.39140f	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.391411	9f 01 20 af	sta $af2001,x	                STA @lGRPH_LUT0_PTR+1, X      ; The look-up Table point to a pixel Blue
.391415	c8		iny		                INY
.391416	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.391418	9f 02 20 af	sta $af2002,x	                STA @lGRPH_LUT0_PTR+2, X      ; The look-up Table point to a pixel Blue
.39141c	c8		iny		                INY
.39141d	a9 80		lda #$80	                LDA #$80
.39141f	9f 03 20 af	sta $af2003,x	                STA @lGRPH_LUT0_PTR+3, X      ; The look-up Table point to a pixel Blue
.391423	c8		iny		                INY ; For the Alpha Value, nobody cares
.391424	e8		inx		                INX
.391425	e8		inx		                INX
.391426	e8		inx		                INX
.391427	e8		inx		                INX
.391428	e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.39142a	d0 dc		bne $391408	                BNE BMP_PARSER_UPDATE_LOOP
.39142c	c2 20		rep #$20	                REP #$20        ; set A long
.39142e	60		rts		                RTS
.39142f					BMP_PARSER_UPDATE_LUT1
.39142f	38		sec		                SEC
.391430	a0 36 00	ldy #$0036	                LDY #$0036
.391433	a2 00 00	ldx #$0000	                LDX #$0000
.391436	e2 20		sep #$20	                SEP #$20        ; set A short
.391438					PALETTE_LUT1_LOOP
.391438	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.39143a	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR+0, X      ; The look-up Table point to a pixel Blue
.39143e	c8		iny		                INY
.39143f	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.391441	9f 01 24 af	sta $af2401,x	                STA @lGRPH_LUT1_PTR+1, X      ; The look-up Table point to a pixel Blue
.391445	c8		iny		                INY
.391446	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.391448	9f 02 24 af	sta $af2402,x	                STA @lGRPH_LUT1_PTR+2, X      ; The look-up Table point to a pixel Blue
.39144c	c8		iny		                INY
.39144d	a9 80		lda #$80	                LDA #$80
.39144f	9f 03 24 af	sta $af2403,x	                STA @lGRPH_LUT1_PTR+3, X      ; The look-up Table point to a pixel Blue
.391453	c8		iny		                INY ; For the Alpha Value, nobody cares
.391454	e8		inx		                INX
.391455	e8		inx		                INX
.391456	e8		inx		                INX
.391457	e8		inx		                INX
.391458	e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.39145a	d0 dc		bne $391438	                BNE PALETTE_LUT1_LOOP
.39145c	c2 20		rep #$20	                REP #$20        ; set A long
.39145e	60		rts		                RTS
.39145f					BMP_PARSER_DMA_SHIT_OUT
.39145f	a2 00 00	ldx #$0000	                LDX #$0000
.391462					BMP_PARSER_LOOPY
.391462	a0 00 00	ldy #$0000	                LDY #$0000
.391465	e2 20		sep #$20	                SEP #$20        ; set A short
.391467					BMP_PARSER_LOOPX
.391467	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Load First Pixel Y (will be linear)
.391469	97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.39146b	c8		iny		                INY
.39146c	c4 40		cpy $40		                CPY BMP_X_SIZE              ; Transfer the First line
.39146e	d0 f7		bne $391467	                BNE BMP_PARSER_LOOPX
.391470	20 7c 14	jsr $39147c	                JSR BMP_PARSER_COMPUTE_Y_SRC
.391473	20 97 14	jsr $391497	                JSR BMP_PARSER_COMPUTE_Y_DST
.391476	e8		inx		                INX
.391477	e4 42		cpx $42		                CPX BMP_Y_SIZE
.391479	d0 e7		bne $391462	                BNE BMP_PARSER_LOOPY
.39147b	60		rts		                RTS
.39147c					BMP_PARSER_COMPUTE_Y_SRC
.39147c	c2 20		rep #$20	                REP #$20        ; set A long
.39147e	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.391480	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.391484	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.391486	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.39148a	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.39148e	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.391490	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.391494	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.391496	60		rts		                RTS
.391497					BMP_PARSER_COMPUTE_Y_DST
.391497	c2 20		rep #$20	                REP #$20        ; set A long
.391499	18		clc		                CLC
.39149a	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.39149c	65 4e		adc $4e		                ADC SCRN_X_STRIDE        ; In Normal Circumstances, it is 640
.39149e	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.3914a0	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.3914a2	69 00 00	adc #$0000	                ADC #$0000
.3914a5	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.3914a7	60		rts		                RTS
.3914a8	ea		nop		ILOOP           NOP
.3914a9	ea		nop		                NOP
.3914aa	ea		nop		                NOP
.3914ab	ea		nop		                NOP
.3914ac	ea		nop		                NOP
.3914ad	ea		nop		                NOP
.3914ae	ea		nop		                NOP
.3914af	ea		nop		                NOP
.3914b0	ea		nop		                NOP
.3914b1	ea		nop		                NOP
.3914b2	6b		rtl		                RTL
.3914b3	22 a8 14 39	jsl $3914a8	ILOOP_1         JSL ILOOP
.3914b7	22 a8 14 39	jsl $3914a8	                JSL ILOOP
.3914bb	22 a8 14 39	jsl $3914a8	                JSL ILOOP
.3914bf	22 a8 14 39	jsl $3914a8	                JSL ILOOP
.3914c3	22 a8 14 39	jsl $3914a8	                JSL ILOOP
.3914c7	22 a8 14 39	jsl $3914a8	                JSL ILOOP
.3914cb	22 a8 14 39	jsl $3914a8	                JSL ILOOP
.3914cf	22 a8 14 39	jsl $3914a8	                JSL ILOOP
.3914d3	22 a8 14 39	jsl $3914a8	                JSL ILOOP
.3914d7	22 a8 14 39	jsl $3914a8	                JSL ILOOP
.3914db	6b		rtl		                RTL
.3914dc	22 b3 14 39	jsl $3914b3	ILOOP_1MS       JSL ILOOP_1
.3914e0	6b		rtl		                RTL
.3914e1	e0 00 00	cpx #$0000	ILOOP_MS        CPX #0
.3914e4	f0 07		beq $3914ed	                BEQ LOOP_MS_END
.3914e6	22 dc 14 39	jsl $3914dc	                JSL ILOOP_1MS
.3914ea	ca		dex		                DEX
.3914eb	80 f4		bra $3914e1	                BRA ILOOP_MS
.3914ed	6b		rtl		LOOP_MS_END     RTL
.3914ee					IDELAY
.3914ee	8b		phb		                PHB
.3914ef	08		php		                PHP
.3914f0	48		pha		                PHA             ; begin setdbr macro
.3914f1	08		php		                PHP
.3914f2	e2 20		sep #$20	                SEP #$20        ; set A short
.3914f4	a9 00		lda #$00	                LDA #0
.3914f6	48		pha		                PHA
.3914f7	ab		plb		                PLB
.3914f8	28		plp		                PLP
.3914f9	68		pla		                PLA             ; end setdbr macro
.3914fa	e2 20		sep #$20	                SEP #$20        ; set A short
.3914fc	a9 00		lda #$00	                LDA #0                      ; Stop the timer if it's running
.3914fe	8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.391502	af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Enable Timer 0 Interrupts
.391506	29 fb		and #$fb	                AND #~FNX0_INT02_TMR0
.391508	8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.39150c	a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.39150e	8d 05 07	sta $0705	                STA @w TIMERFLAGS
.391511	a9 00		lda #$00	                LDA #0
.391513	8f 61 01 00	sta $000161	                STA @l TIMER0_CHARGE_L      ; Clear the comparator for count-down
.391517	8f 62 01 00	sta $000162	                STA @l TIMER0_CHARGE_M
.39151b	8f 63 01 00	sta $000163	                STA @l TIMER0_CHARGE_H
.39151f	c2 30		rep #$30	                REP #$30        ; set A&X long
.391521	8a		txa		                TXA
.391522	8f 65 01 00	sta $000165	                STA @l TIMER0_CMP_L         ; Set the number of ticks
.391526	98		tya		                TYA
.391527	e2 20		sep #$20	                SEP #$20        ; set A short
.391529	8f 67 01 00	sta $000167	                STA @l TIMER0_CMP_H
.39152d	a9 09		lda #$09	                LDA #TMR0_EN | TMR0_UPDWN   ; Enable the timer to count up
.39152f	8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.391533	a9 80		lda #$80	                LDA #TIMER0TRIGGER          ; Timer zero's trigger flag
.391535	cb		wai		loop            WAI                         ; Wait for an interrupt
.391536	1c 05 07	trb $0705	                TRB @w TIMERFLAGS           ; Check for the flag
.391539	f0 fa		beq $391535	                BEQ loop                    ; Keep checking until it's set
.39153b	a9 00		lda #$00	                LDA #0                      ; Stop the timer
.39153d	8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.391541	a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.391543	8d 05 07	sta $0705	                STA @w TIMERFLAGS
.391546	af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Disable Timer 0 Interrupts
.39154a	09 04		ora #$04	                ORA #FNX0_INT02_TMR0
.39154c	8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.391550	28		plp		                PLP
.391551	ab		plb		                PLB
.391552	6b		rtl		                RTL
.391553					SHOW_CREDITS
.391553	48		pha		                PHA
.391554	da		phx		                PHX
.391555	5a		phy		                PHY
.391556	08		php		                PHP
.391557	e2 20		sep #$20	                SEP #$20        ; set A short
.391559	c2 10		rep #$10	                REP #$10        ; set X long
.39155b	af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Disable the cursor
.39155f	29 fe		and #$fe	                AND #~Vky_Cursor_Enable
.391561	8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.391565	a2 00 00	ldx #$0000	                LDX #0
.391568	bf 00 00 3b	lda $3b0000,x	credit_loop     LDA @lCREDITS_TEXT,X            ; Copy a byte of text
.39156c	9f 00 a0 af	sta $afa000,x	                STA @lCS_TEXT_MEM_PTR,X
.391570	bf 00 20 3b	lda $3b2000,x	                LDA @lCREDITS_COLOR,X           ; Copy a byte of color
.391574	9f 00 c0 af	sta $afc000,x	                STA @lCS_COLOR_MEM_PTR,X
.391578	e8		inx		                INX
.391579	e0 00 20	cpx #$2000	                CPX #128 * 64
.39157c	d0 ea		bne $391568	                BNE credit_loop
.39157e	22 75 06 39	jsl $390675	                JSL IGETCHW                     ; Wait for a keypress
.391582	22 19 0a 39	jsl $390a19	                JSL ICLRSCREEN                  ; Then clear the screen and return
.391586	22 3d 08 39	jsl $39083d	                JSL ICSRHOME                    ; Move cursor to the home position
.39158a	af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Enable the cursor
.39158e	09 01		ora #$01	                ORA #Vky_Cursor_Enable
.391590	8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.391594	28		plp		                PLP
.391595	7a		ply		                PLY
.391596	fa		plx		                PLX
.391597	68		pla		                PLA
.391598	6b		rtl		                RTL
.391599	00		brk #		IRESTORE        BRK ; Warm boot routine
.39159a	00		brk #		ISCINIT         BRK ;
.39159b	00		brk #		IIOINIT         BRK ;
.39159c	00		brk #		ISETLFS         BRK ; Obsolete (done in OPEN)
.39159d	00		brk #		ISETNAM         BRK ; Obsolete (done in OPEN)
.39159e	00		brk #		IOPEN           BRK ; Open a channel for reading and/or writing. Use SETLFS and SETNAM to set the channels and filename first.
.39159f	00		brk #		ICLOSE          BRK ; Close a channel
.3915a0	00		brk #		IGETB           BRK ; Get a byte from input channel. Return 0 if no input. Carry is set if no input.
.3915a1	00		brk #		IGETCH          BRK ; Get a character from the input channel. A=0 and Carry=1 if no data is wating
.3915a2	00		brk #		IGETS           BRK ; Get a string from the input channel. NULL terminates
.3915a3	00		brk #		IGETLINE        BRK ; Get a line of text from input channel. CR or NULL terminates.
.3915a4	00		brk #		IGETFIELD       BRK ; Get a field from the input channel. Value in A, CR, or NULL terminates
.3915a5	00		brk #		ITRIM           BRK ; Removes spaces at beginning and end of string.
.3915a6	00		brk #		IPRINTC         BRK ; Print character to screen. Handles terminal commands
.3915a7	00		brk #		IPRINTS         BRK ; Print string to screen. Handles terminal commands
.3915a8	00		brk #		IPRINTF         BRK ; Print a float value
.3915a9	00		brk #		IPRINTI         BRK ; Prints integer value in TEMP
.3915aa	00		brk #		IPRINTAI        BRK ; Prints integer value in A
.3915ab	00		brk #		IPUSHKEY        BRK ;
.3915ac	00		brk #		IPUSHKEYS       BRK ;
.3915ad	00		brk #		ISCRREADLINE    BRK ; Loads the MCMDADDR/BCMDADDR variable with the address of the current line on the screen. This is called when the RETURN key is pressed and is the first step in processing an immediate mode command.
.3915ae	00		brk #		ISCRGETWORD     BRK ; Read a current word on the screen. A word ends with a space, punctuation (except _), or any control character (value < 32). Loads the address into CMPTEXT_VAL and length into CMPTEXT_LEN variables.

;******  Processing file: src\OPL2_Library.asm


;******  Processing file: src\OPL3_def.asm

=$afe600				OPL3_R_BASE               = $AFE600
=$e600					OPL3_R_BASE_LL            = $E600
=$00af					OPL3_R_BASE_HL            = $00AF
=$afe601				OPL3_R_TEST               = $AFE601 ; TEST
=$afe602				OPL3_R_TIMER1             = $AFE602 ; TIMER-1
=$afe603				OPL3_R_TIMER2             = $AFE603 ; TIMER-2
=$afe604				OPL3_R_IRQ                = $AFE604 ;
=$afe605				OPL3_R_OPL3_MODE          = $AFE605 ; Set bit 0 to 1 if you want to use in OPL3 Mode
=$afe608				OPL3_R_CSM                = $AFE608 ;
=$afe620				OPL3_R_AM_VID_EG_KSR_MULT = $AFE620 ; $40..$35 (21 Registers)
=$afe640				OPL3_R_KSL_TL             = $AFE640;  $40..$55 (21 Registers)
=$afe660				OPL3_R_AR_DR              = $AFE660;  $60..$75 (21 Registers)
=$afe680				OPL3_R_SL_RR              = $AFE680;  $80..$95 (21 Registers)
=$afe6a0				OPL3_R_FNumber            = $AFE6A0;  $A0..$A8
=$afe6b0				OPL3_R_KON_BLOCK_FNumber  = $AFE6B0;  $B0..$B9
=$afe6bd				OPL3_R_DPTH_RHYTM         = $AFE6BD;  $BD
=$afe6c0				OPL3_R_FEEDBACK           = $AFE6C0;  $C0..$C9
=$afe6e0				OPL3_R_WAVE_SELECT        = $AFE6E0;  $E0..$F5
=$afe700				OPL3_L_BASE               = $AFE700
=$e700					OPL3_L_BASE_LL            = $E700
=$00af					OPL3_L_BASE_HL            = $00AF
=$afe701				OPL3_L_TEST               = $AFE701 ; TEST
=$afe702				OPL3_L_TIMER1             = $AFE702 ; TIMER-1
=$afe703				OPL3_L_TIMER2             = $AFE703 ; TIMER-2
=$afe704				OPL3_L_IRQ                = $AFE704 ;
=$afe708				OPL3_L_CSM                = $AFE708 ;
=$afe720				OPL3_L_AM_VID_EG_KSR_MULT = $AFE720 ; $40..$35 (21 Registers)
=$afe740				OPL3_L_KSL_TL             = $AFE740;  $40..$55 (21 Registers)
=$afe760				OPL3_L_AR_DR              = $AFE760;  $60..$75 (21 Registers)
=$afe780				OPL3_L_SL_RR              = $AFE780;  $80..$95 (21 Registers)
=$afe7a0				OPL3_L_FNumber            = $AFE7A0;  $A0..$A8
=$afe7b0				OPL3_L_KON_BLOCK_FNumber  = $AFE7B0;  $B0..$B9
=$afe7bd				OPL3_L_DPTH_RHYTM         = $AFE7BD;  $BD
=$afe7c0				OPL3_L_FEEDBACK           = $AFE7C0;  $C0..$C9
=$afe7e0				OPL3_L_WAVE_SELECT        = $AFE7E0;  $E0..$F5
=$80					TREMOLO    = $80
=$40					VIBRATO    = $40
=$20					SUSTAINING = $20
=$10					KSR        = $10
=$0f					MULTIPLIER = $0F
=$c0					KEY_SCALE  = $C0
=$3f					OP_LEVEL   = $3F
=$f0					ATTACK_RT  = $F0
=$0f					DECAY_RT   = $0F
=$f0					SUSTAIN_RT = $F0
=$0f					RELEASE_RT = $0F
=$0e					FEEDBACK   = $0E
=$01					ALGORITHM  = $01
=9					OPL2_NUM_CHANNELS = 9
=0					OPERATOR1 = 0
=1					OPERATOR2 = 1
=0					MODULATOR = 0
=1					CARRIER = 1
=0					FREQ_MODULATION = 0
=1					ADDITIVE_SYNTH  = 1
=$10					DRUM_BASS   = $10
=$08					DRUM_SNARE  = $08
=$04					DRUM_TOM    = $04
=$02					DRUM_CYMBAL = $02
=$01					DRUM_HI_HAT = $01
=1					NOTE_CS =   1
=2					NOTE_D =    2
=3					NOTE_DS =   3
=4					NOTE_E =    4
=5					NOTE_F =    5
=6					NOTE_FS =   6
=7					NOTE_G =    7
=8					NOTE_GS =   8
=9					NOTE_A =    9
=10					NOTE_AS =  10
=11					NOTE_B =   11
=12					NOTE_C =   12
>3915af	6b 01 81 01 98 01 b0 01		noteFNumbers    .word  $016B, $0181, $0198, $01B0, $01CA, $01E5, $0202, $0220, $0241, $0263, $0287, $02AE
>3915b7	ca 01 e5 01 02 02 20 02 41 02 63 02 87 02 ae 02
>3915c7	00 01 02 08 09 0a 10 11		registerOffsets_operator0 .byte $00, $01, $02, $08, $09, $0A, $10, $11, $12 ;initializers for operator 1 */
>3915cf	12
>3915d0	03 04 05 0b 0c 0d 13 14		registerOffsets_operator1 .byte $03, $04, $05, $0B, $0C, $0D, $13, $14, $15 ;initializers for operator 2 */
>3915d8	15
>3915d9	10 13 14 12 15 11		drumOffsets               .byte $10, $13, $14, $12, $15, $11
>3915df	10 08 04 02 01			drumBits                  .byte $10, $08, $04, $02, $01
>3915e4	20 40 60 80 e0 c0		instrumentBaseRegs        .byte $20, $40, $60, $80, $E0, $C0

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Instruments.asm

>3915ea	00 24 4f f2 0b 00 0e 31		INSTRUMENT_ACCORDN    .text $00, $24, $4F, $F2, $0B, $00, $0E, $31, $00, $52, $0B, $00, 'ACCORDN   '
>3915f2	00 52 0b 00 41 43 43 4f 52 44 4e 20 20 20
>391600	00 31 43 6e 17 01 02 22		INSTRUMENT_BAGPIPE1   .text $00, $31, $43, $6E, $17, $01, $02, $22, $05, $8B, $0C, $02, 'BAGPIPE1  '
>391608	05 8b 0c 02 42 41 47 50 49 50 45 31 20 20
>391616	00 30 00 ff a0 03 00 a3		INSTRUMENT_BAGPIPE2   .text $00, $30, $00, $FF, $A0, $03, $00, $A3, $00, $65, $0B, $02, 'BAGPIPE2  '
>39161e	00 65 0b 02 42 41 47 50 49 50 45 32 20 20
>39162c	00 31 87 a1 11 00 08 16		INSTRUMENT_BANJO1     .text $00, $31, $87, $A1, $11, $00, $08, $16, $80, $7D, $43, $00, 'BANJO1    '
>391634	80 7d 43 00 42 41 4e 4a 4f 31 20 20 20 20
>391642	00 01 15 25 2f 00 0a 21		INSTRUMENT_BASS1      .text $00, $01, $15, $25, $2F, $00, $0A, $21, $80, $65, $6C, $00, 'BASS1     '
>39164a	80 65 6c 00 42 41 53 53 31 20 20 20 20 20
>391658	00 01 1d f2 ef 00 0a 01		INSTRUMENT_BASS2      .text $00, $01, $1D, $F2, $EF, $00, $0A, $01, $00, $F5, $78, $00, 'BASS2     '
>391660	00 f5 78 00 42 41 53 53 32 20 20 20 20 20
>39166e	00 c0 6d f9 01 01 0e 41		INSTRUMENT_BASSHARP   .text $00, $C0, $6D, $F9, $01, $01, $0E, $41, $00, $F2, $73, $00, 'BASSHARP  '
>391676	00 f2 73 00 42 41 53 53 48 41 52 50 20 20
>391684	00 30 c8 d5 19 00 0c 71		INSTRUMENT_BASSOON1   .text $00, $30, $C8, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'BASSOON1  '
>39168c	80 61 1b 00 42 41 53 53 4f 4f 4e 31 20 20
>39169a	00 c1 4f b1 53 03 06 e0		INSTRUMENT_BASSTRLG   .text $00, $C1, $4F, $B1, $53, $03, $06, $E0, $00, $12, $74, $03, 'BASSTRLG  '
>3916a2	00 12 74 03 42 41 53 53 54 52 4c 47 20 20
>3916b0	06 00 0b a8 4c 00 00 00		INSTRUMENT_BDRUM1     .text $06, $00, $0B, $A8, $4C, $00, $00, $00, $00, $00, $00, $00, 'BDRUM1    '
>3916b8	00 00 00 00 42 44 52 55 4d 31 20 20 20 20
>3916c6	00 64 db ff 01 00 04 3e		INSTRUMENT_BELLONG    .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F3, $62, $00, 'BELLONG   '
>3916ce	c0 f3 62 00 42 45 4c 4c 4f 4e 47 20 20 20
>3916dc	00 07 4f f2 60 00 08 12		INSTRUMENT_BELLS      .text $00, $07, $4F, $F2, $60, $00, $08, $12, $00, $F2, $72, $00, 'BELLS     '
>3916e4	00 f2 72 00 42 45 4c 4c 53 20 20 20 20 20
>3916f2	00 64 db ff 01 00 04 3e		INSTRUMENT_BELSHORT   .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F5, $F3, $00, 'BELSHORT  '
>3916fa	c0 f5 f3 00 42 45 4c 53 48 4f 52 54 20 20
>391708	00 20 4b 7b 04 01 0e 21		INSTRUMENT_BNCEBASS   .text $00, $20, $4B, $7B, $04, $01, $0E, $21, $00, $F5, $72, $00, 'BNCEBASS  '
>391710	00 f5 72 00 42 4e 43 45 42 41 53 53 20 20
>39171e	00 21 16 71 ae 00 0e 21		INSTRUMENT_BRASS1     .text $00, $21, $16, $71, $AE, $00, $0E, $21, $00, $81, $9E, $00, 'BRASS1    '
>391726	00 81 9e 00 42 52 41 53 53 31 20 20 20 20
>391734	00 30 c5 52 11 00 00 31		INSTRUMENT_CBASSOON   .text $00, $30, $C5, $52, $11, $00, $00, $31, $80, $31, $2E, $00, 'CBASSOON  '
>39173c	80 31 2e 00 43 42 41 53 53 4f 4f 4e 20 20
>39174a	00 33 87 01 10 00 08 14		INSTRUMENT_CELESTA    .text $00, $33, $87, $01, $10, $00, $08, $14, $80, $7D, $33, $00, 'CELESTA   '
>391752	80 7d 33 00 43 45 4c 45 53 54 41 20 20 20
>391760	00 32 16 73 24 00 0e 21		INSTRUMENT_CLAR1      .text $00, $32, $16, $73, $24, $00, $0E, $21, $80, $75, $57, $00, 'CLAR1     '
>391768	80 75 57 00 43 4c 41 52 31 20 20 20 20 20
>391776	00 31 1c 41 1b 00 0c 60		INSTRUMENT_CLAR2      .text $00, $31, $1C, $41, $1B, $00, $0C, $60, $80, $42, $3B, $00, 'CLAR2     '
>39177e	80 42 3b 00 43 4c 41 52 32 20 20 20 20 20
>39178c	00 32 9a 51 1b 00 0c 61		INSTRUMENT_CLARINET   .text $00, $32, $9A, $51, $1B, $00, $0C, $61, $82, $A2, $3B, $00, 'CLARINET  '
>391794	82 a2 3b 00 43 4c 41 52 49 4e 45 54 20 20
>3917a2	00 11 0d f2 01 00 0a 15		INSTRUMENT_CLAVECIN   .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'CLAVECIN  '
>3917aa	0d f2 b1 00 43 4c 41 56 45 43 49 4e 20 20
>3917b8	00 00 02 f0 ff 00 06 11		INSTRUMENT_CROMORNE   .text $00, $00, $02, $F0, $FF, $00, $06, $11, $80, $F0, $FF, $00, 'CROMORNE  '
>3917c0	80 f0 ff 00 43 52 4f 4d 4f 52 4e 45 20 20
>3917ce	09 01 00 f5 b5 00 00 00		INSTRUMENT_CYMBAL1    .text $09, $01, $00, $F5, $B5, $00, $00, $00, $00, $00, $00, $00, 'CYMBAL1   '
>3917d6	00 00 00 00 43 59 4d 42 41 4c 31 20 20 20
>3917e4	00 05 8a f0 7b 00 08 01		INSTRUMENT_ELCLAV1    .text $00, $05, $8A, $F0, $7B, $00, $08, $01, $80, $F4, $7B, $00, 'ELCLAV1   '
>3917ec	80 f4 7b 00 45 4c 43 4c 41 56 31 20 20 20
>3917fa	00 01 49 f1 53 01 06 11		INSTRUMENT_ELCLAV2    .text $00, $01, $49, $F1, $53, $01, $06, $11, $00, $F1, $74, $02, 'ELCLAV2   '
>391802	00 f1 74 02 45 4c 43 4c 41 56 32 20 20 20
>391810	00 e0 6d 57 04 01 0e 61		INSTRUMENT_ELECFL     .text $00, $E0, $6D, $57, $04, $01, $0E, $61, $00, $67, $7D, $00, 'ELECFL    '
>391818	00 67 7d 00 45 4c 45 43 46 4c 20 20 20 20
>391826	00 13 97 9a 12 02 0e 91		INSTRUMENT_ELECVIBE   .text $00, $13, $97, $9A, $12, $02, $0E, $91, $80, $9B, $11, $00, 'ELECVIBE  '
>39182e	80 9b 11 00 45 4c 45 43 56 49 42 45 20 20
>39183c	00 f1 01 97 17 00 08 21		INSTRUMENT_ELGUIT1    .text $00, $F1, $01, $97, $17, $00, $08, $21, $0D, $F1, $18, $00, 'ELGUIT1   '
>391844	0d f1 18 00 45 4c 47 55 49 54 31 20 20 20
>391852	00 13 96 ff 21 00 0a 11		INSTRUMENT_ELGUIT2    .text $00, $13, $96, $FF, $21, $00, $0A, $11, $80, $FF, $03, $00, 'ELGUIT2   '
>39185a	80 ff 03 00 45 4c 47 55 49 54 32 20 20 20
>391868	00 07 8f 82 7d 00 0c 14		INSTRUMENT_ELGUIT3    .text $00, $07, $8F, $82, $7D, $00, $0C, $14, $80, $82, $7D, $00, 'ELGUIT3   '
>391870	80 82 7d 00 45 4c 47 55 49 54 33 20 20 20
>39187e	00 05 8f da 15 00 0a 01		INSTRUMENT_ELGUIT4    .text $00, $05, $8F, $DA, $15, $00, $0A, $01, $80, $F9, $14, $02, 'ELGUIT4   '
>391886	80 f9 14 02 45 4c 47 55 49 54 34 20 20 20
>391894	00 b2 cd 91 2a 02 09 b1		INSTRUMENT_ELORGAN1   .text $00, $B2, $CD, $91, $2A, $02, $09, $B1, $80, $91, $2A, $01, 'ELORGAN1  '
>39189c	80 91 2a 01 45 4c 4f 52 47 41 4e 31 20 20
>3918aa	00 01 4f f1 50 00 06 01		INSTRUMENT_ELPIANO1   .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'ELPIANO1  '
>3918b2	04 d2 7c 00 45 4c 50 49 41 4e 4f 31 20 20
>3918c0	00 02 22 f2 13 00 0e 02		INSTRUMENT_ELPIANO2   .text $00, $02, $22, $F2, $13, $00, $0E, $02, $00, $F5, $43, $00, 'ELPIANO2  '
>3918c8	00 f5 43 00 45 4c 50 49 41 4e 4f 32 20 20
>3918d6	00 81 63 f3 58 00 00 01		INSTRUMENT_EPIANO1A   .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'EPIANO1A  '
>3918de	80 f2 58 00 45 50 49 41 4e 4f 31 41 20 20
>3918ec	00 07 1f f5 fa 00 0e 01		INSTRUMENT_EPIANO1B   .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'EPIANO1B  '
>3918f4	57 f5 fa 00 45 50 49 41 4e 4f 31 42 20 20
>391902	00 21 83 74 17 00 07 a2		INSTRUMENT_FLUTE      .text $00, $21, $83, $74, $17, $00, $07, $A2, $8D, $65, $17, $00, 'FLUTE     '
>39190a	8d 65 17 00 46 4c 55 54 45 20 20 20 20 20
>391918	00 a1 27 74 8f 00 02 a1		INSTRUMENT_FLUTE1     .text $00, $A1, $27, $74, $8F, $00, $02, $A1, $80, $65, $2A, $00, 'FLUTE1    '
>391920	80 65 2a 00 46 4c 55 54 45 31 20 20 20 20
>39192e	00 e0 ec 6e 8f 00 0e 61		INSTRUMENT_FLUTE2     .text $00, $E0, $EC, $6E, $8F, $00, $0E, $61, $00, $65, $2A, $00, 'FLUTE2    '
>391936	00 65 2a 00 46 4c 55 54 45 32 20 20 20 20
>391944	00 21 9f 53 5a 00 0c 21		INSTRUMENT_FRHORN1    .text $00, $21, $9F, $53, $5A, $00, $0C, $21, $80, $AA, $1A, $00, 'FRHORN1   '
>39194c	80 aa 1a 00 46 52 48 4f 52 4e 31 20 20 20
>39195a	00 20 8e a5 8f 02 06 21		INSTRUMENT_FRHORN2    .text $00, $20, $8E, $A5, $8F, $02, $06, $21, $00, $36, $3D, $00, 'FRHORN2   '
>391962	00 36 3d 00 46 52 48 4f 52 4e 32 20 20 20
>391970	00 f0 18 55 ef 02 00 e0		INSTRUMENT_FSTRP1     .text $00, $F0, $18, $55, $EF, $02, $00, $E0, $80, $87, $1E, $03, 'FSTRP1    '
>391978	80 87 1e 03 46 53 54 52 50 31 20 20 20 20
>391986	00 70 16 55 2f 02 0c e0		INSTRUMENT_FSTRP2     .text $00, $70, $16, $55, $2F, $02, $0C, $E0, $80, $87, $1E, $03, 'FSTRP2    '
>39198e	80 87 1e 03 46 53 54 52 50 32 20 20 20 20
>39199c	00 f1 00 97 13 00 0a 25		INSTRUMENT_FUZGUIT1   .text $00, $F1, $00, $97, $13, $00, $0A, $25, $0D, $F1, $18, $01, 'FUZGUIT1  '
>3919a4	0d f1 18 01 46 55 5a 47 55 49 54 31 20 20
>3919b2	00 31 48 f1 53 00 06 32		INSTRUMENT_FUZGUIT2   .text $00, $31, $48, $F1, $53, $00, $06, $32, $00, $F2, $27, $02, 'FUZGUIT2  '
>3919ba	00 f2 27 02 46 55 5a 47 55 49 54 32 20 20
>3919c8	00 01 11 f2 1f 00 0a 01		INSTRUMENT_GUITAR1    .text $00, $01, $11, $F2, $1F, $00, $0A, $01, $00, $F5, $88, $00, 'GUITAR1   '
>3919d0	00 f5 88 00 47 55 49 54 41 52 31 20 20 20
>3919de	00 02 29 f5 75 00 00 01		INSTRUMENT_HARP1      .text $00, $02, $29, $F5, $75, $00, $00, $01, $83, $F2, $F3, $00, 'HARP1     '
>3919e6	83 f2 f3 00 48 41 52 50 31 20 20 20 20 20
>3919f4	00 02 99 f5 55 00 00 01		INSTRUMENT_HARP2      .text $00, $02, $99, $F5, $55, $00, $00, $01, $80, $F6, $53, $00, 'HARP2     '
>3919fc	80 f6 53 00 48 41 52 50 32 20 20 20 20 20
>391a0a	00 02 57 f5 56 00 00 01		INSTRUMENT_HARP3      .text $00, $02, $57, $F5, $56, $00, $00, $01, $80, $F6, $54, $00, 'HARP3     '
>391a12	80 f6 54 00 48 41 52 50 33 20 20 20 20 20
>391a20	00 02 29 f5 75 00 00 01		INSTRUMENT_HARPE1     .text $00, $02, $29, $F5, $75, $00, $00, $01, $03, $F2, $F3, $00, 'HARPE1    '
>391a28	03 f2 f3 00 48 41 52 50 45 31 20 20 20 20
>391a36	00 32 87 a1 10 00 08 16		INSTRUMENT_HARPSI1    .text $00, $32, $87, $A1, $10, $00, $08, $16, $80, $7D, $33, $00, 'HARPSI1   '
>391a3e	80 7d 33 00 48 41 52 50 53 49 31 20 20 20
>391a4c	00 33 87 a1 10 00 06 15		INSTRUMENT_HARPSI2    .text $00, $33, $87, $A1, $10, $00, $06, $15, $80, $7D, $43, $00, 'HARPSI2   '
>391a54	80 7d 43 00 48 41 52 50 53 49 32 20 20 20
>391a62	00 35 84 a8 10 00 08 18		INSTRUMENT_HARPSI3    .text $00, $35, $84, $A8, $10, $00, $08, $18, $80, $7D, $33, $00, 'HARPSI3   '
>391a6a	80 7d 33 00 48 41 52 50 53 49 33 20 20 20
>391a78	00 11 0d f2 01 00 0a 15		INSTRUMENT_HARPSI4    .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'HARPSI4   '
>391a80	0d f2 b1 00 48 41 52 50 53 49 34 20 20 20
>391a8e	00 36 87 8a 00 00 08 1a		INSTRUMENT_HARPSI5    .text $00, $36, $87, $8A, $00, $00, $08, $1A, $80, $7F, $33, $00, 'HARPSI5   '
>391a96	80 7f 33 00 48 41 52 50 53 49 35 20 20 20
>391aa4	00 f0 00 1e 11 01 08 e2		INSTRUMENT_HELICPTR   .text $00, $F0, $00, $1E, $11, $01, $08, $E2, $C0, $11, $11, $01, 'HELICPTR  '
>391aac	c0 11 11 01 48 45 4c 49 43 50 54 52 20 20
>391aba	0a 01 00 f7 b5 00 00 00		INSTRUMENT_HIHAT1     .text $0A, $01, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'HIHAT1    '
>391ac2	00 00 00 00 48 49 48 41 54 31 20 20 20 20
>391ad0	0a 01 03 da 18 00 00 00		INSTRUMENT_HIHAT2     .text $0A, $01, $03, $DA, $18, $00, $00, $00, $00, $00, $00, $00, 'HIHAT2    '
>391ad8	00 00 00 00 48 49 48 41 54 32 20 20 20 20
>391ae6	00 87 4d 78 42 00 0a 94		INSTRUMENT_JAVAICAN   .text $00, $87, $4D, $78, $42, $00, $0A, $94, $00, $85, $54, $00, 'JAVAICAN  '
>391aee	00 85 54 00 4a 41 56 41 49 43 41 4e 20 20
>391afc	00 03 5e 85 51 01 0e 11		INSTRUMENT_JAZZGUIT   .text $00, $03, $5E, $85, $51, $01, $0E, $11, $00, $D2, $71, $00, 'JAZZGUIT  '
>391b04	00 d2 71 00 4a 41 5a 5a 47 55 49 54 20 20
>391b12	00 00 50 f2 70 00 0e 13		INSTRUMENT_JEWSHARP   .text $00, $00, $50, $F2, $70, $00, $0E, $13, $00, $F2, $72, $00, 'JEWSHARP  '
>391b1a	00 f2 72 00 4a 45 57 53 48 41 52 50 20 20
>391b28	00 00 02 f0 fa 01 06 11		INSTRUMENT_KEYBRD1    .text $00, $00, $02, $F0, $FA, $01, $06, $11, $80, $F2, $FA, $01, 'KEYBRD1   '
>391b30	80 f2 fa 01 4b 45 59 42 52 44 31 20 20 20
>391b3e	00 01 8f f2 bd 00 08 14		INSTRUMENT_KEYBRD2    .text $00, $01, $8F, $F2, $BD, $00, $08, $14, $80, $82, $BD, $00, 'KEYBRD2   '
>391b46	80 82 bd 00 4b 45 59 42 52 44 32 20 20 20
>391b54	00 01 00 f0 f0 00 00 e4		INSTRUMENT_KEYBRD3    .text $00, $01, $00, $F0, $F0, $00, $00, $E4, $03, $F3, $36, $00, 'KEYBRD3   '
>391b5c	03 f3 36 00 4b 45 59 42 52 44 33 20 20 20
>391b6a	09 e6 00 25 b5 00 00 00		INSTRUMENT_LASER      .text $09, $E6, $00, $25, $B5, $00, $00, $00, $00, $00, $00, $00, 'LASER     '
>391b72	00 00 00 00 4c 41 53 45 52 20 20 20 20 20
>391b80	00 32 44 f8 ff 00 0e 11		INSTRUMENT_LOGDRUM1   .text $00, $32, $44, $F8, $FF, $00, $0E, $11, $00, $F5, $7F, $00, 'LOGDRUM1  '
>391b88	00 f5 7f 00 4c 4f 47 44 52 55 4d 31 20 20
>391b96	00 05 4e da 25 00 0a 01		INSTRUMENT_MARIMBA1   .text $00, $05, $4E, $DA, $25, $00, $0A, $01, $00, $F9, $15, $00, 'MARIMBA1  '
>391b9e	00 f9 15 00 4d 41 52 49 4d 42 41 31 20 20
>391bac	00 85 4e da 15 00 0a 81		INSTRUMENT_MARIMBA2   .text $00, $85, $4E, $DA, $15, $00, $0A, $81, $80, $F9, $13, $00, 'MARIMBA2  '
>391bb4	80 f9 13 00 4d 41 52 49 4d 42 41 32 20 20
>391bc2	00 30 00 fe 11 01 08 ae		INSTRUMENT_MDRNPHON   .text $00, $30, $00, $FE, $11, $01, $08, $AE, $C0, $F1, $19, $01, 'MDRNPHON  '
>391bca	c0 f1 19 01 4d 44 52 4e 50 48 4f 4e 20 20
>391bd8	07 0c 00 c8 b6 01 00 00		INSTRUMENT_MLTRDRUM   .text $07, $0C, $00, $C8, $B6, $01, $00, $00, $00, $00, $00, $00, 'MLTRDRUM  '
>391be0	00 00 00 00 4d 4c 54 52 44 52 55 4d 20 20
>391bee	00 20 90 f5 9e 02 0c 11		INSTRUMENT_MOOGSYNT   .text $00, $20, $90, $F5, $9E, $02, $0C, $11, $00, $F4, $5B, $03, 'MOOGSYNT  '
>391bf6	00 f4 5b 03 4d 4f 4f 47 53 59 4e 54 20 20
>391c04	00 0e 40 d1 53 00 0e 0e		INSTRUMENT_NOISE1     .text $00, $0E, $40, $D1, $53, $00, $0E, $0E, $00, $F2, $7F, $03, 'NOISE1    '
>391c0c	00 f2 7f 03 4e 4f 49 53 45 31 20 20 20 20
>391c1a	00 b1 c5 6e 17 00 02 22		INSTRUMENT_OBOE1      .text $00, $B1, $C5, $6E, $17, $00, $02, $22, $05, $8B, $0E, $00, 'OBOE1     '
>391c22	05 8b 0e 00 4f 42 4f 45 31 20 20 20 20 20
>391c30	00 65 d2 81 03 00 02 71		INSTRUMENT_ORGAN1     .text $00, $65, $D2, $81, $03, $00, $02, $71, $80, $F1, $05, $00, 'ORGAN1    '
>391c38	80 f1 05 00 4f 52 47 41 4e 31 20 20 20 20
>391c46	00 24 80 ff 0f 00 01 21		INSTRUMENT_ORGAN2     .text $00, $24, $80, $FF, $0F, $00, $01, $21, $80, $FF, $0F, $00, 'ORGAN2    '
>391c4e	80 ff 0f 00 4f 52 47 41 4e 32 20 20 20 20
>391c5c	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3     .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $80, $F0, $1F, $00, 'ORGAN3    '
>391c64	80 f0 1f 00 4f 52 47 41 4e 33 20 20 20 20
>391c72	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3A    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $8D, $F0, $13, $00, 'ORGAN3A   '
>391c7a	8d f0 13 00 4f 52 47 41 4e 33 41 20 20 20
>391c88	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3B    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $92, $F0, $12, $00, 'ORGAN3B   '
>391c90	92 f0 12 00 4f 52 47 41 4e 33 42 20 20 20
>391c9e	00 0c 00 f8 b5 00 01 00		INSTRUMENT_ORGNPERC   .text $00, $0C, $00, $F8, $B5, $00, $01, $00, $00, $D6, $4F, $00, 'ORGNPERC  '
>391ca6	00 d6 4f 00 4f 52 47 4e 50 45 52 43 20 20
>391cb4	00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE1     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F1, $B2, $00, 'PHONE1    '
>391cbc	08 f1 b2 00 50 48 4f 4e 45 31 20 20 20 20
>391cca	00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE2     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $0A, $F1, $B4, $00, 'PHONE2    '
>391cd2	0a f1 b4 00 50 48 4f 4e 45 32 20 20 20 20
>391ce0	00 81 63 f3 58 00 00 01		INSTRUMENT_PIAN1A     .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'PIAN1A    '
>391ce8	80 f2 58 00 50 49 41 4e 31 41 20 20 20 20
>391cf6	00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1B     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $26, $F5, $FA, $00, 'PIAN1B    '
>391cfe	26 f5 fa 00 50 49 41 4e 31 42 20 20 20 20
>391d0c	00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1C     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'PIAN1C    '
>391d14	57 f5 fa 00 50 49 41 4e 31 43 20 20 20 20
>391d22	00 03 4f f1 53 00 06 17		INSTRUMENT_PIANO      .text $00, $03, $4F, $F1, $53, $00, $06, $17, $00, $F2, $74, $00, 'PIANO     '
>391d2a	00 f2 74 00 50 49 41 4e 4f 20 20 20 20 20
>391d38	00 01 4f f1 53 00 06 11		INSTRUMENT_PIANO1     .text $00, $01, $4F, $F1, $53, $00, $06, $11, $00, $D2, $74, $00, 'PIANO1    '
>391d40	00 d2 74 00 50 49 41 4e 4f 31 20 20 20 20
>391d4e	00 41 9d f2 51 00 06 13		INSTRUMENT_PIANO2     .text $00, $41, $9D, $F2, $51, $00, $06, $13, $00, $F2, $F1, $00, 'PIANO2    '
>391d56	00 f2 f1 00 50 49 41 4e 4f 32 20 20 20 20
>391d64	00 01 4f f1 50 00 06 01		INSTRUMENT_PIANO3     .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'PIANO3    '
>391d6c	04 d2 7c 00 50 49 41 4e 4f 33 20 20 20 20
>391d7a	00 01 4d f1 60 00 08 11		INSTRUMENT_PIANO4     .text $00, $01, $4D, $F1, $60, $00, $08, $11, $00, $D2, $7B, $00, 'PIANO4    '
>391d82	00 d2 7b 00 50 49 41 4e 4f 34 20 20 20 20
>391d90	00 03 4f f1 53 00 06 17		INSTRUMENT_PIANOBEL   .text $00, $03, $4F, $F1, $53, $00, $06, $17, $03, $F2, $74, $00, 'PIANOBEL  '
>391d98	03 f2 74 00 50 49 41 4e 4f 42 45 4c 20 20
>391da6	00 01 cf f1 53 00 02 12		INSTRUMENT_PIANOF     .text $00, $01, $CF, $F1, $53, $00, $02, $12, $00, $F2, $83, $00, 'PIANOF    '
>391dae	00 f2 83 00 50 49 41 4e 4f 46 20 20 20 20
>391dbc	00 10 00 75 93 01 00 01		INSTRUMENT_POPBASS1   .text $00, $10, $00, $75, $93, $01, $00, $01, $00, $F5, $82, $01, 'POPBASS1  '
>391dc4	00 f5 82 01 50 4f 50 42 41 53 53 31 20 20
>391dd2	07 0c 00 c7 b4 00 00 00		INSTRUMENT_RKSNARE1   .text $07, $0C, $00, $C7, $B4, $00, $00, $00, $00, $00, $00, $00, 'RKSNARE1  '
>391dda	00 00 00 00 52 4b 53 4e 41 52 45 31 20 20
>391de8	00 01 4f 71 53 00 0a 12		INSTRUMENT_SAX1       .text $00, $01, $4F, $71, $53, $00, $0A, $12, $00, $52, $7C, $00, 'SAX1      '
>391df0	00 52 7c 00 53 41 58 31 20 20 20 20 20 20
>391dfe	00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH    .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH   '
>391e06	00 5c dc 00 53 43 52 41 54 43 48 20 20 20
>391e14	00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH4   .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH4  '
>391e1c	00 5c dc 00 53 43 52 41 54 43 48 34 20 20
>391e2a	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SDRUM2     .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SDRUM2    '
>391e32	00 f6 b4 00 53 44 52 55 4d 32 20 20 20 20
>391e40	00 e4 0e ff 3f 01 00 c0		INSTRUMENT_SHRTVIBE   .text $00, $E4, $0E, $FF, $3F, $01, $00, $C0, $00, $F3, $07, $00, 'SHRTVIBE  '
>391e48	00 f3 07 00 53 48 52 54 56 49 42 45 20 20
>391e56	00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR1     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $00, 'SITAR1    '
>391e5e	40 f1 53 00 53 49 54 41 52 31 20 20 20 20
>391e6c	00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR2     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $01, 'SITAR2    '
>391e74	40 f1 53 01 53 49 54 41 52 32 20 20 20 20
>391e82	00 61 0c 81 03 00 08 71		INSTRUMENT_SNAKEFL    .text $00, $61, $0C, $81, $03, $00, $08, $71, $80, $61, $0C, $00, 'SNAKEFL   '
>391e8a	80 61 0c 00 53 4e 41 4b 45 46 4c 20 20 20
>391e98	07 0c 00 f8 b5 00 00 00		INSTRUMENT_SNARE1     .text $07, $0C, $00, $F8, $B5, $00, $00, $00, $00, $00, $00, $00, 'SNARE1    '
>391ea0	00 00 00 00 53 4e 41 52 45 31 20 20 20 20
>391eae	00 06 00 f0 f0 00 0e c4		INSTRUMENT_SNRSUST    .text $00, $06, $00, $F0, $F0, $00, $0E, $C4, $03, $C4, $34, $00, 'SNRSUST   '
>391eb6	03 c4 34 00 53 4e 52 53 55 53 54 20 20 20
>391ec4	00 70 1c 51 03 02 0e 20		INSTRUMENT_SOLOVLN    .text $00, $70, $1C, $51, $03, $02, $0E, $20, $00, $54, $67, $02, 'SOLOVLN   '
>391ecc	00 54 67 02 53 4f 4c 4f 56 4c 4e 20 20 20
>391eda	00 01 46 f1 83 00 06 61		INSTRUMENT_STEELGT1   .text $00, $01, $46, $F1, $83, $00, $06, $61, $03, $31, $86, $00, 'STEELGT1  '
>391ee2	03 31 86 00 53 54 45 45 4c 47 54 31 20 20
>391ef0	00 01 47 f1 83 00 06 61		INSTRUMENT_STEELGT2   .text $00, $01, $47, $F1, $83, $00, $06, $61, $03, $91, $86, $00, 'STEELGT2  '
>391ef8	03 91 86 00 53 54 45 45 4c 47 54 32 20 20
>391f06	00 b1 8b 71 11 00 06 61		INSTRUMENT_STRINGS1   .text $00, $B1, $8B, $71, $11, $00, $06, $61, $40, $42, $15, $01, 'STRINGS1  '
>391f0e	40 42 15 01 53 54 52 49 4e 47 53 31 20 20
>391f1c	00 e1 4f b1 d3 03 06 21		INSTRUMENT_STRNLONG   .text $00, $E1, $4F, $B1, $D3, $03, $06, $21, $00, $12, $74, $01, 'STRNLONG  '
>391f24	00 12 74 01 53 54 52 4e 4c 4f 4e 47 20 20
>391f32	00 55 97 2a 02 00 00 12		INSTRUMENT_SYN1       .text $00, $55, $97, $2A, $02, $00, $00, $12, $80, $42, $F3, $00, 'SYN1      '
>391f3a	80 42 f3 00 53 59 4e 31 20 20 20 20 20 20
>391f48	00 13 97 9a 12 00 0e 11		INSTRUMENT_SYN2       .text $00, $13, $97, $9A, $12, $00, $0E, $11, $80, $9B, $14, $00, 'SYN2      '
>391f50	80 9b 14 00 53 59 4e 32 20 20 20 20 20 20
>391f5e	00 11 8a f1 11 00 06 01		INSTRUMENT_SYN3       .text $00, $11, $8A, $F1, $11, $00, $06, $01, $40, $F1, $B3, $00, 'SYN3      '
>391f66	40 f1 b3 00 53 59 4e 33 20 20 20 20 20 20
>391f74	00 21 0d e9 3a 00 0a 22		INSTRUMENT_SYN4       .text $00, $21, $0D, $E9, $3A, $00, $0A, $22, $80, $65, $6C, $00, 'SYN4      '
>391f7c	80 65 6c 00 53 59 4e 34 20 20 20 20 20 20
>391f8a	00 01 4f 71 53 00 06 19		INSTRUMENT_SYN5       .text $00, $01, $4F, $71, $53, $00, $06, $19, $00, $52, $7C, $00, 'SYN5      '
>391f92	00 52 7c 00 53 59 4e 35 20 20 20 20 20 20
>391fa0	00 24 0f 41 7e 00 0a 21		INSTRUMENT_SYN6       .text $00, $24, $0F, $41, $7E, $00, $0A, $21, $00, $F1, $5E, $00, 'SYN6      '
>391fa8	00 f1 5e 00 53 59 4e 36 20 20 20 20 20 20
>391fb6	00 07 87 f0 05 00 04 01		INSTRUMENT_SYN9       .text $00, $07, $87, $F0, $05, $00, $04, $01, $80, $F0, $05, $00, 'SYN9      '
>391fbe	80 f0 05 00 53 59 4e 39 20 20 20 20 20 20
>391fcc	00 26 03 e0 f0 00 08 1e		INSTRUMENT_SYNBAL1    .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'SYNBAL1   '
>391fd4	00 ff 31 00 53 59 4e 42 41 4c 31 20 20 20
>391fe2	00 28 03 e0 f0 00 04 13		INSTRUMENT_SYNBAL2    .text $00, $28, $03, $E0, $F0, $00, $04, $13, $00, $E8, $11, $00, 'SYNBAL2   '
>391fea	00 e8 11 00 53 59 4e 42 41 4c 32 20 20 20
>391ff8	00 30 88 d5 19 00 0c 71		INSTRUMENT_SYNBASS1   .text $00, $30, $88, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'SYNBASS1  '
>392000	80 61 1b 00 53 59 4e 42 41 53 53 31 20 20
>39200e	00 81 86 65 01 00 0c 11		INSTRUMENT_SYNBASS2   .text $00, $81, $86, $65, $01, $00, $0C, $11, $00, $32, $74, $00, 'SYNBASS2  '
>392016	00 32 74 00 53 59 4e 42 41 53 53 32 20 20
>392024	00 81 83 65 05 00 0a 51		INSTRUMENT_SYNBASS4   .text $00, $81, $83, $65, $05, $00, $0A, $51, $00, $32, $74, $00, 'SYNBASS4  '
>39202c	00 32 74 00 53 59 4e 42 41 53 53 34 20 20
>39203a	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR1    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F8, $B6, $00, 'SYNSNR1   '
>392042	00 f8 b6 00 53 59 4e 53 4e 52 31 20 20 20
>392050	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR2    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SYNSNR2   '
>392058	00 f6 b4 00 53 59 4e 53 4e 52 32 20 20 20
>392066	00 8f 81 ef 01 00 04 01		INSTRUMENT_TINCAN1    .text $00, $8F, $81, $EF, $01, $00, $04, $01, $00, $98, $F1, $00, 'TINCAN1   '
>39206e	00 98 f1 00 54 49 4e 43 41 4e 31 20 20 20
>39207c	08 04 00 f7 b5 00 00 00		INSTRUMENT_TOM1       .text $08, $04, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'TOM1      '
>392084	00 00 00 00 54 4f 4d 31 20 20 20 20 20 20
>392092	08 02 00 c8 97 00 00 00		INSTRUMENT_TOM2       .text $08, $02, $00, $C8, $97, $00, $00, $00, $00, $00, $00, $00, 'TOM2      '
>39209a	00 00 00 00 54 4f 4d 32 20 20 20 20 20 20
>3920a8	00 17 4f f2 61 00 08 12		INSTRUMENT_TRAINBEL   .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F2, $74, $00, 'TRAINBEL  '
>3920b0	08 f2 74 00 54 52 41 49 4e 42 45 4c 20 20
>3920be	00 26 03 e0 f0 00 08 1e		INSTRUMENT_TRIANGLE   .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'TRIANGLE  '
>3920c6	00 ff 31 00 54 52 49 41 4e 47 4c 45 20 20
>3920d4	00 b1 1c 41 1f 00 0e 61		INSTRUMENT_TROMB1     .text $00, $B1, $1C, $41, $1F, $00, $0E, $61, $80, $92, $3B, $00, 'TROMB1    '
>3920dc	80 92 3b 00 54 52 4f 4d 42 31 20 20 20 20
>3920ea	00 21 1c 53 1d 00 0c 61		INSTRUMENT_TROMB2     .text $00, $21, $1C, $53, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TROMB2    '
>3920f2	80 52 3b 00 54 52 4f 4d 42 32 20 20 20 20
>392100	00 31 1c 41 0b 00 0e 61		INSTRUMENT_TRUMPET1   .text $00, $31, $1C, $41, $0B, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET1  '
>392108	80 92 3b 00 54 52 55 4d 50 45 54 31 20 20
>392116	00 31 1c 23 1d 00 0c 61		INSTRUMENT_TRUMPET2   .text $00, $31, $1C, $23, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TRUMPET2  '
>39211e	80 52 3b 00 54 52 55 4d 50 45 54 32 20 20
>39212c	00 31 1c 41 01 00 0e 61		INSTRUMENT_TRUMPET3   .text $00, $31, $1C, $41, $01, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET3  '
>392134	80 92 3b 00 54 52 55 4d 50 45 54 33 20 20
>392142	00 31 1c 41 0b 00 0c 61		INSTRUMENT_TRUMPET4   .text $00, $31, $1C, $41, $0B, $00, $0C, $61, $80, $92, $3B, $00, 'TRUMPET4  '
>39214a	80 92 3b 00 54 52 55 4d 50 45 54 34 20 20
>392158	00 21 19 43 8c 00 0c 21		INSTRUMENT_TUBA1      .text $00, $21, $19, $43, $8C, $00, $0C, $21, $80, $85, $2F, $00, 'TUBA1     '
>392160	80 85 2f 00 54 55 42 41 31 20 20 20 20 20
>39216e	00 84 53 f5 33 00 06 a0		INSTRUMENT_VIBRA1     .text $00, $84, $53, $F5, $33, $00, $06, $A0, $80, $FD, $25, $00, 'VIBRA1    '
>392176	80 fd 25 00 56 49 42 52 41 31 20 20 20 20
>392184	00 06 73 f6 54 00 00 81		INSTRUMENT_VIBRA2     .text $00, $06, $73, $F6, $54, $00, $00, $81, $03, $F2, $B3, $00, 'VIBRA2    '
>39218c	03 f2 b3 00 56 49 42 52 41 32 20 20 20 20
>39219a	00 93 97 aa 12 02 0e 91		INSTRUMENT_VIBRA3     .text $00, $93, $97, $AA, $12, $02, $0E, $91, $80, $AC, $21, $00, 'VIBRA3    '
>3921a2	80 ac 21 00 56 49 42 52 41 33 20 20 20 20
>3921b0	00 31 1c 51 03 00 0e 61		INSTRUMENT_VIOLIN1    .text $00, $31, $1C, $51, $03, $00, $0E, $61, $80, $54, $67, $00, 'VIOLIN1   '
>3921b8	80 54 67 00 56 49 4f 4c 49 4e 31 20 20 20
>3921c6	00 e1 88 62 29 00 0c 22		INSTRUMENT_VIOLIN2    .text $00, $E1, $88, $62, $29, $00, $0C, $22, $80, $53, $2C, $00, 'VIOLIN2   '
>3921ce	80 53 2c 00 56 49 4f 4c 49 4e 32 20 20 20
>3921dc	00 e1 88 64 29 00 06 22		INSTRUMENT_VIOLIN3    .text $00, $E1, $88, $64, $29, $00, $06, $22, $83, $53, $2C, $00, 'VIOLIN3   '
>3921e4	83 53 2c 00 56 49 4f 4c 49 4e 33 20 20 20
>3921f2	00 31 9c f1 f9 00 0e 31		INSTRUMENT_VLNPIZZ1   .text $00, $31, $9C, $F1, $F9, $00, $0E, $31, $80, $F7, $E6, $00, 'VLNPIZZ1  '
>3921fa	80 f7 e6 00 56 4c 4e 50 49 5a 5a 31 20 20
>392208	00 00 02 00 f0 00 0e 14		INSTRUMENT_WAVE       .text $00, $00, $02, $00, $F0, $00, $0E, $14, $80, $1B, $A2, $00, 'WAVE      '
>392210	80 1b a2 00 57 41 56 45 20 20 20 20 20 20
>39221e	00 11 2d c8 2f 00 0c 31		INSTRUMENT_XYLO1      .text $00, $11, $2D, $C8, $2F, $00, $0C, $31, $00, $F5, $F5, $00, 'XYLO1     '
>392226	00 f5 f5 00 58 59 4c 4f 31 20 20 20 20 20
>392234	06 2e 00 ff 0f 00 00 00		INSTRUMENT_XYLO2      .text $06, $2E, $00, $FF, $0F, $00, $00, $00, $00, $00, $00, $00, 'XYLO2     '
>39223c	00 00 00 00 58 59 4c 4f 32 20 20 20 20 20
>39224a	00 06 00 ff f0 00 0e c4		INSTRUMENT_XYLO3      .text $00, $06, $00, $FF, $F0, $00, $0E, $C4, $00, $F8, $B5, $00, 'XYLO3     '
>392252	00 f8 b5 00 58 59 4c 4f 33 20 20 20 20 20

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Drums.asm

>392260	00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP2         .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>392268	00 87 fa 00
>39226c	00 01 00 78 97 09 00 02		DRUMINS_SCRATCH1      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>392274	00 88 98 03
>392278	00 01 00 78 97 09 00 02		DRUMINS_SCRATCH2      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>392280	00 88 98 03
>392284	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT2      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>39228c	00 f9 69 00
>392290	00 00 00 f8 6c 01 00 0e		DRUMINS_HIQ           .text $00, $00, $00, $F8, $6C, $01, $00, $0E, $80, $E8, $4A, $00
>392298	80 e8 4a 00
>39229c	00 25 1b fa f2 01 00 12		DRUMINS_WOODBLOK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>3922a4	00 f6 9a 00
>3922a8	00 06 03 f4 44 00 01 01		DRUMINS_GLOCK         .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>3922b0	1b f2 34 00
>3922b4	00 00 00 f9 f3 05 00 01		DRUMINS_BASS_DR2      .text $00, $00, $00, $F9, $F3, $05, $00, $01, $00, $F7, $8A, $00
>3922bc	00 f7 8a 00
>3922c0	00 01 07 fa fd 05 00 01		DRUMINS_BASS_DR1      .text $00, $01, $07, $FA, $FD, $05, $00, $01, $00, $F6, $47, $00
>3922c8	00 f6 47 00
>3922cc	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT       .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>3922d4	00 f9 69 00
>3922d8	00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_AC      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>3922e0	00 f7 a9 00
>3922e4	00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP          .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>3922ec	00 87 fa 00
>3922f0	00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_EL      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>3922f8	00 f7 a9 00
>3922fc	00 06 0a fa 1f 0c 00 11		DRUMINS_LO_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>392304	00 f5 f5 00
>392308	00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_CL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>392310	06 b8 d8 03
>392314	00 06 0a fa 1f 0c 00 11		DRUMINS_HI_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>39231c	00 f5 f5 00
>392320	00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_PL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>392328	06 b8 d8 03
>39232c	00 06 0a fa 1f 0c 00 11		DRUMINS_LOW_TOM       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>392334	00 f5 f5 00
>392338	00 2e 00 82 f6 05 00 04		DRUMINS_HIHAT_OP      .text $00, $2E, $00, $82, $F6, $05, $00, $04, $10, $74, $F8, $03
>392340	10 74 f8 03
>392344	00 06 0a fa 1f 0c 00 11		DRUMINS_LTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>39234c	00 f5 f5 00
>392350	00 06 0a fa 1f 0c 00 11		DRUMINS_HTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>392358	00 f5 f5 00
>39235c	00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH         .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>392364	05 c5 d4 03
>392368	00 06 0a fa 1f 0c 00 11		DRUMINS_TOM_HIGH      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>392370	00 f5 f5 00
>392374	00 29 10 94 00 0f 00 04		DRUMINS_RIDE_CY       .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>39237c	04 f9 44 03
>392380	00 2c 00 9f 00 0f 02 0e		DRUMINS_TAMBOUR       .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>392388	05 c5 d4 03
>39238c	00 29 10 94 00 0f 00 04		DRUMINS_CYMBAL        .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>392394	04 f9 44 03
>392398	00 2e 09 f5 f1 01 00 06		DRUMINS_TAMBOU2       .text $00, $2E, $09, $F5, $F1, $01, $00, $06, $03, $87, $F7, $03
>3923a0	03 87 f7 03
>3923a4	00 2c 00 9f 00 0f 02 0e		DRUMINS_SPLASH        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>3923ac	05 c5 d4 03
>3923b0	00 37 14 f7 a1 09 01 03		DRUMINS_COWBELL       .text $00, $37, $14, $F7, $A1, $09, $01, $03, $00, $F6, $28, $00
>3923b8	00 f6 28 00
>3923bc	00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH2        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>3923c4	05 c5 d4 03
>3923c8	00 80 00 ff 00 0d 01 00		DRUMINS_VIBRASLA      .text $00, $80, $00, $FF, $00, $0D, $01, $00, $00, $F5, $F7, $01
>3923d0	00 f5 f7 01
>3923d4	00 29 10 94 00 0f 00 04		DRUMINS_RIDE2         .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>3923dc	04 f9 44 03
>3923e0	00 25 c4 fa fa 01 00 03		DRUMINS_HI_BONGO      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>3923e8	00 99 f9 00
>3923ec	00 21 03 fb fa 01 01 02		DRUMINS_LO_BONGO      .text $00, $21, $03, $FB, $FA, $01, $01, $02, $00, $A8, $F7, $00
>3923f4	00 a8 f7 00
>3923f8	00 25 c4 fa fa 01 00 03		DRUMINS_MUTECONG      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>392400	00 99 f9 00
>392404	00 24 18 f9 fa 0f 02 03		DRUMINS_OPENCONG      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>39240c	00 a6 f6 00
>392410	00 24 18 f9 fa 0f 02 03		DRUMINS_LOWCONGA      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>392418	00 a6 f6 00
>39241c	00 05 14 f5 f5 07 02 03		DRUMINS_HI_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>392424	00 f6 36 02
>392428	00 05 14 f5 f5 07 02 03		DRUMINS_LO_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>392430	00 f6 36 02
>392434	00 1c 0c f9 31 0f 01 15		DRUMINS_HI_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>39243c	00 96 e8 01
>392440	00 1c 0c f9 31 0f 01 15		DRUMINS_LO_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>392448	00 96 e8 01
>39244c	00 0e 00 ff 01 0f 00 0e		DRUMINS_CABASA        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>392454	02 79 77 03
>392458	00 0e 00 ff 01 0f 00 0e		DRUMINS_MARACAS       .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>392460	02 79 77 03
>392464	00 20 15 af 07 05 01 0e		DRUMINS_S_WHISTL      .text $00, $20, $15, $AF, $07, $05, $01, $0E, $00, $A5, $2B, $02
>39246c	00 a5 2b 02
>392470	00 20 18 bf 07 01 01 0e		DRUMINS_L_WHISTL      .text $00, $20, $18, $BF, $07, $01, $01, $0E, $00, $93, $3B, $02
>392478	00 93 3b 02
>39247c	00 20 00 f0 f7 0b 00 08		DRUMINS_S_GUIRO       .text $00, $20, $00, $F0, $F7, $0B, $00, $08, $01, $89, $3B, $03
>392484	01 89 3b 03
>392488	00 20 00 f3 fa 09 00 08		DRUMINS_L_GUIRO       .text $00, $20, $00, $F3, $FA, $09, $00, $08, $0A, $53, $2B, $02
>392490	0a 53 2b 02
>392494	00 15 21 f8 9a 09 01 13		DRUMINS_CLAVES        .text $00, $15, $21, $F8, $9A, $09, $01, $13, $00, $F6, $89, $00
>39249c	00 f6 89 00
>3924a0	00 25 1b fa f2 01 00 12		DRUMINS_HI_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>3924a8	00 f6 9a 00
>3924ac	00 25 1b fa f2 01 00 12		DRUMINS_LO_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>3924b4	00 f6 9a 00
>3924b8	00 20 01 5f 07 01 00 08		DRUMINS_MU_CUICA      .text $00, $20, $01, $5F, $07, $01, $00, $08, $00, $87, $4B, $01
>3924c0	00 87 4b 01
>3924c4	00 25 12 57 f7 01 01 03		DRUMINS_OP_CUICA      .text $00, $25, $12, $57, $F7, $01, $01, $03, $00, $78, $67, $01
>3924cc	00 78 67 01
>3924d0	00 22 2f f1 f0 07 00 27		DRUMINS_MU_TRNGL      .text $00, $22, $2F, $F1, $F0, $07, $00, $27, $02, $F8, $FC, $00
>3924d8	02 f8 fc 00
>3924dc	00 26 44 f1 f0 07 00 27		DRUMINS_OP_TRNGL      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>3924e4	40 f5 f5 00
>3924e8	00 0e 00 ff 01 0f 00 0e		DRUMINS_SHAKER        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>3924f0	02 79 77 03
>3924f4	00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL1      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>3924fc	40 f5 f5 00
>392500	00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL2      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>392508	40 f5 f5 00
>39250c	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT3      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>392514	00 f9 69 00
>392518	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT4      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>392520	00 f9 69 00
>392524	00 02 1d f5 93 01 00 00		DRUMINS_TAIKO         .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>39252c	00 c6 45 00
=27					DRUM_NOTE_BASE = 27;
=60					NUM_MIDI_DRUMS = 60;
>392530	60 22 39 00 6c 22 39 00		midiDrums     .dword DRUMINS_CLAP2, DRUMINS_SCRATCH1, DRUMINS_SCRATCH2, DRUMINS_RIMSHOT2
>392538	78 22 39 00 84 22 39 00
>392540	90 22 39 00 9c 22 39 00		              .dword DRUMINS_HIQ, DRUMINS_WOODBLOK, DRUMINS_GLOCK, DRUMINS_BASS_DR2
>392548	a8 22 39 00 b4 22 39 00
>392550	c0 22 39 00 cc 22 39 00		              .dword DRUMINS_BASS_DR1, DRUMINS_RIMSHOT,  DRUMINS_SNARE_AC, DRUMINS_CLAP
>392558	d8 22 39 00 e4 22 39 00
>392560	f0 22 39 00 fc 22 39 00		              .dword DRUMINS_SNARE_EL, DRUMINS_LO_TOMS,  DRUMINS_HIHAT_CL, DRUMINS_HI_TOMS
>392568	08 23 39 00 14 23 39 00
>392570	20 23 39 00 2c 23 39 00		              .dword DRUMINS_HIHAT_PL, DRUMINS_LOW_TOM,	DRUMINS_HIHAT_OP, DRUMINS_LTOM_MID
>392578	38 23 39 00 44 23 39 00
>392580	50 23 39 00 5c 23 39 00		              .dword DRUMINS_HTOM_MID, DRUMINS_CRASH,    DRUMINS_TOM_HIGH, DRUMINS_RIDE_CY
>392588	68 23 39 00 74 23 39 00
>392590	80 23 39 00 8c 23 39 00		              .dword DRUMINS_TAMBOUR,  DRUMINS_CYMBAL,   DRUMINS_TAMBOU2,  DRUMINS_SPLASH
>392598	98 23 39 00 a4 23 39 00
>3925a0	b0 23 39 00 bc 23 39 00		              .dword DRUMINS_COWBELL,  DRUMINS_CRASH2, 	DRUMINS_VIBRASLA, DRUMINS_RIDE2
>3925a8	c8 23 39 00 d4 23 39 00
>3925b0	e0 23 39 00 ec 23 39 00		              .dword DRUMINS_HI_BONGO, DRUMINS_LO_BONGO, DRUMINS_MUTECONG, DRUMINS_OPENCONG
>3925b8	f8 23 39 00 04 24 39 00
>3925c0	10 24 39 00 1c 24 39 00		              .dword DRUMINS_LOWCONGA, DRUMINS_HI_TIMBA, DRUMINS_LO_TIMBA, DRUMINS_HI_AGOGO
>3925c8	28 24 39 00 34 24 39 00
>3925d0	40 24 39 00 4c 24 39 00		              .dword DRUMINS_LO_AGOGO, DRUMINS_CABASA, DRUMINS_MARACAS,  DRUMINS_S_WHISTL
>3925d8	58 24 39 00 64 24 39 00
>3925e0	70 24 39 00 7c 24 39 00		              .dword DRUMINS_L_WHISTL, DRUMINS_S_GUIRO,  DRUMINS_L_GUIRO,  DRUMINS_CLAVES
>3925e8	88 24 39 00 94 24 39 00
>3925f0	a0 24 39 00 ac 24 39 00		              .dword DRUMINS_HI_WDBLK, DRUMINS_LO_WDBLK, DRUMINS_MU_CUICA, DRUMINS_OP_CUICA
>3925f8	b8 24 39 00 c4 24 39 00
>392600	d0 24 39 00 dc 24 39 00		              .dword DRUMINS_MU_TRNGL, DRUMINS_OP_TRNGL, DRUMINS_SHAKER, DRUMINS_TRIANGL1
>392608	e8 24 39 00 f4 24 39 00
>392610	00 25 39 00 0c 25 39 00		              .dword DRUMINS_TRIANGL2, DRUMINS_RIMSHOT3, DRUMINS_RIMSHOT4, DRUMINS_TAIKO
>392618	18 25 39 00 24 25 39 00

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Instruments.asm

>392620	00 33 5a b2 50 01 00 31		MIDI_INSTRUMENT_PIANO1     .text $00, $33, $5A, $B2, $50, $01, $00, $31, $00, $B1, $F5, $01
>392628	00 b1 f5 01
>39262c	00 31 49 f2 53 07 01 11		MIDI_INSTRUMENT_PIANO2     .text $00, $31, $49, $F2, $53, $07, $01, $11, $03, $F1, $F5, $00
>392634	03 f1 f5 00
>392638	00 31 95 d1 83 0d 01 32		MIDI_INSTRUMENT_PIANO3     .text $00, $31, $95, $D1, $83, $0D, $01, $32, $03, $C1, $F5, $00
>392640	03 c1 f5 00
>392644	00 34 9b f3 63 01 01 11		MIDI_INSTRUMENT_HONKTONK   .text $00, $34, $9B, $F3, $63, $01, $01, $11, $00, $92, $F5, $01
>39264c	00 92 f5 01
>392650	00 27 28 f8 b7 01 02 91		MIDI_INSTRUMENT_EP1        .text $00, $27, $28, $F8, $B7, $01, $02, $91, $00, $F1, $F9, $00
>392658	00 f1 f9 00
>39265c	00 1a 2d f3 ee 01 01 11		MIDI_INSTRUMENT_EP2        .text $00, $1A, $2D, $F3, $EE, $01, $01, $11, $00, $F1, $F5, $00
>392664	00 f1 f5 00
>392668	00 35 95 f2 58 0f 01 32		MIDI_INSTRUMENT_HARPSIC    .text $00, $35, $95, $F2, $58, $0F, $01, $32, $02, $81, $F6, $01
>392670	02 81 f6 01
>392674	00 31 85 c9 40 01 00 35		MIDI_INSTRUMENT_CLAVIC     .text $00, $31, $85, $C9, $40, $01, $00, $35, $00, $C2, $B9, $01
>39267c	00 c2 b9 01
>392680	00 09 15 c7 64 08 00 01		MIDI_INSTRUMENT_CELESTA    .text $00, $09, $15, $C7, $64, $08, $00, $01, $05, $B2, $35, $00
>392688	05 b2 35 00
>39268c	00 06 03 f4 44 00 01 01		MIDI_INSTRUMENT_GLOCK      .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>392694	1b f2 34 00
>392698	00 04 06 a9 24 0a 01 01		MIDI_INSTRUMENT_MUSICBOX   .text $00, $04, $06, $A9, $24, $0A, $01, $01, $01, $F5, $74, $00
>3926a0	01 f5 74 00
>3926a4	00 d4 00 f6 33 00 00 f1		MIDI_INSTRUMENT_VIBES      .text $00, $D4, $00, $F6, $33, $00, $00, $F1, $00, $61, $E3, $00
>3926ac	00 61 e3 00
>3926b0	00 d4 00 f7 e8 04 00 d1		MIDI_INSTRUMENT_MARIMBA    .text $00, $D4, $00, $F7, $E8, $04, $00, $D1, $00, $A4, $64, $00
>3926b8	00 a4 64 00
>3926bc	00 36 16 f7 f7 01 00 31		MIDI_INSTRUMENT_XYLO       .text $00, $36, $16, $F7, $F7, $01, $00, $31, $07, $B5, $F5, $00
>3926c4	07 b5 f5 00
>3926c8	00 03 1b a2 43 0b 00 00		MIDI_INSTRUMENT_TUBEBELL   .text $00, $03, $1B, $A2, $43, $0B, $00, $00, $00, $F3, $74, $00
>3926d0	00 f3 74 00
>3926d4	00 c3 8e f8 35 01 01 11		MIDI_INSTRUMENT_SANTUR     .text $00, $C3, $8E, $F8, $35, $01, $01, $11, $00, $C3, $94, $01
>3926dc	00 c3 94 01
>3926e0	00 e2 07 f4 1b 06 01 e0		MIDI_INSTRUMENT_ORGAN1     .text $00, $E2, $07, $F4, $1B, $06, $01, $E0, $00, $F4, $0D, $01
>3926e8	00 f4 0d 01
>3926ec	00 f2 00 f6 2c 04 00 f0		MIDI_INSTRUMENT_ORGAN2     .text $00, $F2, $00, $F6, $2C, $04, $00, $F0, $00, $F5, $0B, $01
>3926f4	00 f5 0b 01
>3926f8	00 f1 06 b6 15 0a 00 f0		MIDI_INSTRUMENT_ORGAN3     .text $00, $F1, $06, $B6, $15, $0A, $00, $F0, $00, $BF, $07, $00
>392700	00 bf 07 00
>392704	00 22 03 79 16 08 01 e0		MIDI_INSTRUMENT_PIPEORG    .text $00, $22, $03, $79, $16, $08, $01, $E0, $00, $6D, $08, $01
>39270c	00 6d 08 01
>392710	00 31 27 63 06 01 00 72		MIDI_INSTRUMENT_REEDORG    .text $00, $31, $27, $63, $06, $01, $00, $72, $00, $51, $17, $01
>392718	00 51 17 01
>39271c	00 b4 1d 53 16 0f 01 71		MIDI_INSTRUMENT_ACORDIAN   .text $00, $B4, $1D, $53, $16, $0F, $01, $71, $00, $51, $17, $01
>392724	00 51 17 01
>392728	00 25 29 97 15 01 00 32		MIDI_INSTRUMENT_HARMONIC   .text $00, $25, $29, $97, $15, $01, $00, $32, $00, $53, $08, $01
>392730	00 53 08 01
>392734	00 24 9e 67 15 0f 00 31		MIDI_INSTRUMENT_BANDNEON   .text $00, $24, $9E, $67, $15, $0F, $00, $31, $00, $53, $06, $01
>39273c	00 53 06 01
>392740	00 13 27 a3 b4 05 01 31		MIDI_INSTRUMENT_NYLONGT    .text $00, $13, $27, $A3, $B4, $05, $01, $31, $00, $D2, $F8, $00
>392748	00 d2 f8 00
>39274c	00 17 a3 f3 32 01 00 11		MIDI_INSTRUMENT_STEELGT    .text $00, $17, $A3, $F3, $32, $01, $00, $11, $00, $E2, $C7, $01
>392754	00 e2 c7 01
>392758	00 33 24 d2 c1 0f 01 31		MIDI_INSTRUMENT_JAZZGT     .text $00, $33, $24, $D2, $C1, $0F, $01, $31, $00, $F1, $9C, $00
>392760	00 f1 9c 00
>392764	00 31 05 f8 44 01 00 32		MIDI_INSTRUMENT_CLEANGT    .text $00, $31, $05, $F8, $44, $01, $00, $32, $02, $F2, $C9, $01
>39276c	02 f2 c9 01
>392770	00 21 09 9c 7b 07 00 02		MIDI_INSTRUMENT_MUTEGT     .text $00, $21, $09, $9C, $7B, $07, $00, $02, $03, $95, $FB, $00
>392778	03 95 fb 00
>39277c	00 21 84 81 98 07 01 21		MIDI_INSTRUMENT_OVERDGT    .text $00, $21, $84, $81, $98, $07, $01, $21, $04, $A1, $59, $00
>392784	04 a1 59 00
>392788	00 b1 0c 78 43 01 00 22		MIDI_INSTRUMENT_DISTGT     .text $00, $B1, $0C, $78, $43, $01, $00, $22, $03, $91, $FC, $03
>392790	03 91 fc 03
>392794	00 00 0a 82 8c 09 00 08		MIDI_INSTRUMENT_GTHARMS    .text $00, $00, $0A, $82, $8C, $09, $00, $08, $02, $B4, $EC, $00
>39279c	02 b4 ec 00
>3927a0	00 21 13 ab 46 01 00 21		MIDI_INSTRUMENT_ACOUBASS   .text $00, $21, $13, $AB, $46, $01, $00, $21, $00, $93, $F7, $00
>3927a8	00 93 f7 00
>3927ac	00 01 0a f9 32 01 00 22		MIDI_INSTRUMENT_FINGBASS   .text $00, $01, $0A, $F9, $32, $01, $00, $22, $04, $C1, $58, $00
>3927b4	04 c1 58 00
>3927b8	00 21 07 fa 77 0b 00 22		MIDI_INSTRUMENT_PICKBASS   .text $00, $21, $07, $FA, $77, $0B, $00, $22, $02, $C3, $6A, $00
>3927c0	02 c3 6a 00
>3927c4	00 21 17 71 57 0b 00 21		MIDI_INSTRUMENT_FRETLESS   .text $00, $21, $17, $71, $57, $0B, $00, $21, $00, $62, $87, $00
>3927cc	00 62 87 00
>3927d0	00 25 01 fa 78 07 01 12		MIDI_INSTRUMENT_SLAPBAS1   .text $00, $25, $01, $FA, $78, $07, $01, $12, $00, $F3, $97, $00
>3927d8	00 f3 97 00
>3927dc	00 21 03 fa 88 0d 00 13		MIDI_INSTRUMENT_SLAPBAS2   .text $00, $21, $03, $FA, $88, $0D, $00, $13, $00, $B3, $97, $00
>3927e4	00 b3 97 00
>3927e8	00 21 09 f5 7f 09 01 23		MIDI_INSTRUMENT_SYNBASS1   .text $00, $21, $09, $F5, $7F, $09, $01, $23, $04, $F3, $CC, $00
>3927f0	04 f3 cc 00
>3927f4	00 01 10 a3 9b 09 00 01		MIDI_INSTRUMENT_SYNBASS2   .text $00, $01, $10, $A3, $9B, $09, $00, $01, $00, $93, $AA, $00
>3927fc	00 93 aa 00
>392800	00 e2 19 f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLIN     .text $00, $E2, $19, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>392808	00 78 08 01
>39280c	00 e2 1c f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLA      .text $00, $E2, $1C, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>392814	00 78 08 01
>392818	00 61 19 69 16 0b 01 61		MIDI_INSTRUMENT_CELLO      .text $00, $61, $19, $69, $16, $0B, $01, $61, $00, $54, $27, $01
>392820	00 54 27 01
>392824	00 71 18 82 31 0d 01 32		MIDI_INSTRUMENT_CONTRAB    .text $00, $71, $18, $82, $31, $0D, $01, $32, $00, $61, $56, $00
>39282c	00 61 56 00
>392830	00 e2 23 70 06 0d 01 e1		MIDI_INSTRUMENT_TREMSTR    .text $00, $E2, $23, $70, $06, $0D, $01, $E1, $00, $75, $16, $01
>392838	00 75 16 01
>39283c	00 02 00 88 e6 08 00 61		MIDI_INSTRUMENT_PIZZ       .text $00, $02, $00, $88, $E6, $08, $00, $61, $00, $F5, $F6, $01
>392844	00 f5 f6 01
>392848	00 12 20 f6 d5 0f 01 11		MIDI_INSTRUMENT_HARP       .text $00, $12, $20, $F6, $D5, $0F, $01, $11, $80, $F3, $E3, $00
>392850	80 f3 e3 00
>392854	00 61 0e f4 f4 01 01 00		MIDI_INSTRUMENT_TIMPANI    .text $00, $61, $0E, $F4, $F4, $01, $01, $00, $00, $B5, $F5, $00
>39285c	00 b5 f5 00
>392860	00 61 1e 9c 04 0f 01 21		MIDI_INSTRUMENT_STRINGS    .text $00, $61, $1E, $9C, $04, $0F, $01, $21, $80, $71, $16, $00
>392868	80 71 16 00
>39286c	00 a2 2a c0 d6 0f 02 21		MIDI_INSTRUMENT_SLOWSTR    .text $00, $A2, $2A, $C0, $D6, $0F, $02, $21, $00, $30, $55, $01
>392874	00 30 55 01
>392878	00 61 21 72 35 0f 01 61		MIDI_INSTRUMENT_SYNSTR1    .text $00, $61, $21, $72, $35, $0F, $01, $61, $00, $62, $36, $01
>392880	00 62 36 01
>392884	00 21 1a 72 23 0f 01 21		MIDI_INSTRUMENT_SYNSTR2    .text $00, $21, $1A, $72, $23, $0F, $01, $21, $02, $51, $07, $00
>39288c	02 51 07 00
>392890	00 e1 16 97 31 09 00 61		MIDI_INSTRUMENT_CHOIR      .text $00, $E1, $16, $97, $31, $09, $00, $61, $00, $62, $39, $00
>392898	00 62 39 00
>39289c	00 22 c3 79 45 01 00 21		MIDI_INSTRUMENT_OOHS       .text $00, $22, $C3, $79, $45, $01, $00, $21, $00, $66, $27, $00
>3928a4	00 66 27 00
>3928a8	00 21 de 63 55 01 01 21		MIDI_INSTRUMENT_SYNVOX     .text $00, $21, $DE, $63, $55, $01, $01, $21, $00, $73, $46, $00
>3928b0	00 73 46 00
>3928b4	00 42 05 86 f7 0a 00 50		MIDI_INSTRUMENT_ORCHIT     .text $00, $42, $05, $86, $F7, $0A, $00, $50, $00, $74, $76, $01
>3928bc	00 74 76 01
>3928c0	00 31 1c 61 02 0f 00 61		MIDI_INSTRUMENT_TRUMPET    .text $00, $31, $1C, $61, $02, $0F, $00, $61, $81, $92, $38, $00
>3928c8	81 92 38 00
>3928cc	00 71 1e 52 23 0f 00 61		MIDI_INSTRUMENT_TROMBONE   .text $00, $71, $1E, $52, $23, $0F, $00, $61, $02, $71, $19, $00
>3928d4	02 71 19 00
>3928d8	00 21 1a 76 16 0f 00 21		MIDI_INSTRUMENT_TUBA       .text $00, $21, $1A, $76, $16, $0F, $00, $21, $01, $81, $09, $00
>3928e0	01 81 09 00
>3928e4	00 25 28 89 2c 07 02 20		MIDI_INSTRUMENT_MUTETRP    .text $00, $25, $28, $89, $2C, $07, $02, $20, $00, $83, $4B, $02
>3928ec	00 83 4b 02
>3928f0	00 21 1f 79 16 09 00 a2		MIDI_INSTRUMENT_FRHORN     .text $00, $21, $1F, $79, $16, $09, $00, $A2, $05, $71, $59, $00
>3928f8	05 71 59 00
>3928fc	00 21 19 87 16 0f 00 21		MIDI_INSTRUMENT_BRASS1     .text $00, $21, $19, $87, $16, $0F, $00, $21, $03, $82, $39, $00
>392904	03 82 39 00
>392908	00 21 17 75 35 0f 00 22		MIDI_INSTRUMENT_SYNBRAS1   .text $00, $21, $17, $75, $35, $0F, $00, $22, $82, $84, $17, $00
>392910	82 84 17 00
>392914	00 21 22 62 58 0f 00 21		MIDI_INSTRUMENT_SYNBRAS2   .text $00, $21, $22, $62, $58, $0F, $00, $21, $02, $72, $16, $00
>39291c	02 72 16 00
>392920	00 b1 1b 59 07 01 01 a1		MIDI_INSTRUMENT_SOPSAX     .text $00, $B1, $1B, $59, $07, $01, $01, $A1, $00, $7B, $0A, $00
>392928	00 7b 0a 00
>39292c	00 21 16 9f 04 0b 00 21		MIDI_INSTRUMENT_ALTOSAX    .text $00, $21, $16, $9F, $04, $0B, $00, $21, $00, $85, $0C, $01
>392934	00 85 0c 01
>392938	00 21 0f a8 20 0d 00 23		MIDI_INSTRUMENT_TENSAX     .text $00, $21, $0F, $A8, $20, $0D, $00, $23, $00, $7B, $0A, $01
>392940	00 7b 0a 01
>392944	00 21 0f 88 04 09 00 26		MIDI_INSTRUMENT_BARISAX    .text $00, $21, $0F, $88, $04, $09, $00, $26, $00, $79, $18, $01
>39294c	00 79 18 01
>392950	00 31 18 8f 05 01 00 32		MIDI_INSTRUMENT_OBOE       .text $00, $31, $18, $8F, $05, $01, $00, $32, $01, $73, $08, $00
>392958	01 73 08 00
>39295c	00 a1 0a 8c 37 01 01 24		MIDI_INSTRUMENT_ENGLHORN   .text $00, $A1, $0A, $8C, $37, $01, $01, $24, $04, $77, $0A, $00
>392964	04 77 0a 00
>392968	00 31 04 a8 67 0b 00 75		MIDI_INSTRUMENT_BASSOON    .text $00, $31, $04, $A8, $67, $0B, $00, $75, $00, $51, $19, $00
>392970	00 51 19 00
>392974	00 a2 1f 77 26 01 01 21		MIDI_INSTRUMENT_CLARINET   .text $00, $A2, $1F, $77, $26, $01, $01, $21, $01, $74, $09, $00
>39297c	01 74 09 00
>392980	00 e1 07 b8 94 01 01 21		MIDI_INSTRUMENT_PICCOLO    .text $00, $E1, $07, $B8, $94, $01, $01, $21, $01, $63, $28, $00
>392988	01 63 28 00
>39298c	00 a1 93 87 59 01 00 e1		MIDI_INSTRUMENT_FLUTE1     .text $00, $A1, $93, $87, $59, $01, $00, $E1, $00, $65, $0A, $00
>392994	00 65 0a 00
>392998	00 22 10 9f 38 01 00 61		MIDI_INSTRUMENT_RECORDER   .text $00, $22, $10, $9F, $38, $01, $00, $61, $00, $67, $29, $00
>3929a0	00 67 29 00
>3929a4	00 e2 0d 88 9a 01 01 21		MIDI_INSTRUMENT_PANFLUTE   .text $00, $E2, $0D, $88, $9A, $01, $01, $21, $00, $67, $09, $00
>3929ac	00 67 09 00
>3929b0	00 a2 10 98 94 0f 00 21		MIDI_INSTRUMENT_BOTTLEB    .text $00, $A2, $10, $98, $94, $0F, $00, $21, $01, $6A, $28, $00
>3929b8	01 6a 28 00
>3929bc	00 f1 1c 86 26 0f 00 f1		MIDI_INSTRUMENT_SHAKU      .text $00, $F1, $1C, $86, $26, $0F, $00, $F1, $00, $55, $27, $00
>3929c4	00 55 27 00
>3929c8	00 e1 3f 9f 09 00 00 e1		MIDI_INSTRUMENT_WHISTLE    .text $00, $E1, $3F, $9F, $09, $00, $00, $E1, $00, $6F, $08, $00
>3929d0	00 6f 08 00
>3929d4	00 e2 3b f7 19 01 00 21		MIDI_INSTRUMENT_OCARINA    .text $00, $E2, $3B, $F7, $19, $01, $00, $21, $00, $7A, $07, $00
>3929dc	00 7a 07 00
>3929e0	00 22 1e 92 0c 0f 00 61		MIDI_INSTRUMENT_SQUARWAV   .text $00, $22, $1E, $92, $0C, $0F, $00, $61, $06, $A2, $0D, $00
>3929e8	06 a2 0d 00
>3929ec	00 21 15 f4 22 0f 01 21		MIDI_INSTRUMENT_SAWWAV     .text $00, $21, $15, $F4, $22, $0F, $01, $21, $00, $A3, $5F, $00
>3929f4	00 a3 5f 00
>3929f8	00 f2 20 47 66 03 01 f1		MIDI_INSTRUMENT_SYNCALLI   .text $00, $F2, $20, $47, $66, $03, $01, $F1, $00, $42, $27, $00
>392a00	00 42 27 00
>392a04	00 61 19 88 28 0f 00 61		MIDI_INSTRUMENT_CHIFLEAD   .text $00, $61, $19, $88, $28, $0F, $00, $61, $05, $B2, $49, $00
>392a0c	05 b2 49 00
>392a10	00 21 16 82 1b 01 00 23		MIDI_INSTRUMENT_CHARANG    .text $00, $21, $16, $82, $1B, $01, $00, $23, $00, $B2, $79, $01
>392a18	00 b2 79 01
>392a1c	00 21 00 ca 93 01 00 22		MIDI_INSTRUMENT_SOLOVOX    .text $00, $21, $00, $CA, $93, $01, $00, $22, $00, $7A, $1A, $00
>392a24	00 7a 1a 00
>392a28	00 23 00 92 c9 08 01 22		MIDI_INSTRUMENT_FIFTHSAW   .text $00, $23, $00, $92, $C9, $08, $01, $22, $00, $82, $28, $01
>392a30	00 82 28 01
>392a34	00 21 1d f3 7b 0f 00 22		MIDI_INSTRUMENT_BASSLEAD   .text $00, $21, $1D, $F3, $7B, $0F, $00, $22, $02, $C3, $5F, $00
>392a3c	02 c3 5f 00
>392a40	00 e1 00 81 25 00 01 a6		MIDI_INSTRUMENT_FANTASIA   .text $00, $E1, $00, $81, $25, $00, $01, $A6, $86, $C4, $95, $01
>392a48	86 c4 95 01
>392a4c	00 21 27 31 01 0f 00 21		MIDI_INSTRUMENT_WARMPAD    .text $00, $21, $27, $31, $01, $0F, $00, $21, $00, $44, $15, $00
>392a54	00 44 15 00
>392a58	00 60 14 83 35 0d 02 61		MIDI_INSTRUMENT_POLYSYN    .text $00, $60, $14, $83, $35, $0D, $02, $61, $00, $D1, $06, $00
>392a60	00 d1 06 00
>392a64	00 e1 5c d3 01 01 01 62		MIDI_INSTRUMENT_SPACEVOX   .text $00, $E1, $5C, $D3, $01, $01, $01, $62, $00, $82, $37, $00
>392a6c	00 82 37 00
>392a70	00 28 38 34 86 01 02 21		MIDI_INSTRUMENT_BOWEDGLS   .text $00, $28, $38, $34, $86, $01, $02, $21, $00, $41, $35, $00
>392a78	00 41 35 00
>392a7c	00 24 12 52 f3 05 01 23		MIDI_INSTRUMENT_METALPAD   .text $00, $24, $12, $52, $F3, $05, $01, $23, $02, $32, $F5, $01
>392a84	02 32 f5 01
>392a88	00 61 1d 62 a6 0b 00 a1		MIDI_INSTRUMENT_HALOPAD    .text $00, $61, $1D, $62, $A6, $0B, $00, $A1, $00, $61, $26, $00
>392a90	00 61 26 00
>392a94	00 22 0f 22 d5 0b 01 21		MIDI_INSTRUMENT_SWEEPPAD   .text $00, $22, $0F, $22, $D5, $0B, $01, $21, $84, $3F, $05, $01
>392a9c	84 3f 05 01
>392aa0	00 e3 1f f9 24 01 00 31		MIDI_INSTRUMENT_ICERAIN    .text $00, $E3, $1F, $F9, $24, $01, $00, $31, $01, $D1, $F6, $00
>392aa8	01 d1 f6 00
>392aac	00 63 00 41 55 06 01 a2		MIDI_INSTRUMENT_SOUNDTRK   .text $00, $63, $00, $41, $55, $06, $01, $A2, $00, $41, $05, $01
>392ab4	00 41 05 01
>392ab8	00 c7 25 a7 65 01 01 c1		MIDI_INSTRUMENT_CRYSTAL    .text $00, $C7, $25, $A7, $65, $01, $01, $C1, $05, $F3, $E4, $00
>392ac0	05 f3 e4 00
>392ac4	00 e3 19 f7 b7 01 01 61		MIDI_INSTRUMENT_ATMOSPH    .text $00, $E3, $19, $F7, $B7, $01, $01, $61, $00, $92, $F5, $01
>392acc	00 92 f5 01
>392ad0	00 66 9b a8 44 0f 00 41		MIDI_INSTRUMENT_BRIGHT     .text $00, $66, $9B, $A8, $44, $0F, $00, $41, $04, $F2, $E4, $01
>392ad8	04 f2 e4 01
>392adc	00 61 20 22 75 0d 00 61		MIDI_INSTRUMENT_GOBLIN     .text $00, $61, $20, $22, $75, $0D, $00, $61, $00, $45, $25, $00
>392ae4	00 45 25 00
>392ae8	00 e1 21 f6 84 0f 00 e1		MIDI_INSTRUMENT_ECHODROP   .text $00, $E1, $21, $F6, $84, $0F, $00, $E1, $01, $A3, $36, $00
>392af0	01 a3 36 00
>392af4	00 e2 14 73 64 0b 01 e1		MIDI_INSTRUMENT_STARTHEM   .text $00, $E2, $14, $73, $64, $0B, $01, $E1, $01, $98, $05, $01
>392afc	01 98 05 01
>392b00	00 21 0b 72 34 09 00 24		MIDI_INSTRUMENT_SITAR      .text $00, $21, $0B, $72, $34, $09, $00, $24, $02, $A3, $F6, $01
>392b08	02 a3 f6 01
>392b0c	00 21 16 f4 53 0d 00 04		MIDI_INSTRUMENT_BANJO      .text $00, $21, $16, $F4, $53, $0D, $00, $04, $00, $F6, $F8, $00
>392b14	00 f6 f8 00
>392b18	00 21 18 da 02 0d 00 35		MIDI_INSTRUMENT_SHAMISEN   .text $00, $21, $18, $DA, $02, $0D, $00, $35, $00, $F3, $F5, $00
>392b20	00 f3 f5 00
>392b24	00 25 0f fa 63 09 00 02		MIDI_INSTRUMENT_KOTO       .text $00, $25, $0F, $FA, $63, $09, $00, $02, $00, $94, $E5, $01
>392b2c	00 94 e5 01
>392b30	00 32 07 f9 96 01 00 11		MIDI_INSTRUMENT_KALIMBA    .text $00, $32, $07, $F9, $96, $01, $00, $11, $00, $84, $44, $00
>392b38	00 84 44 00
>392b3c	00 20 0e 97 18 09 02 25		MIDI_INSTRUMENT_BAGPIPE    .text $00, $20, $0E, $97, $18, $09, $02, $25, $03, $83, $18, $01
>392b44	03 83 18 01
>392b48	00 61 18 f6 29 01 00 62		MIDI_INSTRUMENT_FIDDLE     .text $00, $61, $18, $F6, $29, $01, $00, $62, $01, $78, $08, $01
>392b50	01 78 08 01
>392b54	00 e6 21 76 19 0b 00 61		MIDI_INSTRUMENT_SHANNAI    .text $00, $E6, $21, $76, $19, $0B, $00, $61, $03, $8E, $08, $01
>392b5c	03 8e 08 01
>392b60	00 27 23 f0 d4 01 00 05		MIDI_INSTRUMENT_TINKLBEL   .text $00, $27, $23, $F0, $D4, $01, $00, $05, $09, $F2, $46, $00
>392b68	09 f2 46 00
>392b6c	00 1c 0c f9 31 0f 01 15		MIDI_INSTRUMENT_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>392b74	00 96 e8 01
>392b78	00 02 00 75 16 06 02 01		MIDI_INSTRUMENT_STEELDRM   .text $00, $02, $00, $75, $16, $06, $02, $01, $00, $F6, $F6, $01
>392b80	00 f6 f6 01
>392b84	00 25 1b fa f2 01 00 12		MIDI_INSTRUMENT_WOODBLOK   .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>392b8c	00 f6 9a 00
>392b90	00 02 1d f5 93 01 00 00		MIDI_INSTRUMENT_TAIKO      .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>392b98	00 c6 45 00
>392b9c	00 11 15 f5 32 05 00 10		MIDI_INSTRUMENT_MELOTOM    .text $00, $11, $15, $F5, $32, $05, $00, $10, $00, $F4, $B4, $00
>392ba4	00 f4 b4 00
>392ba8	00 22 06 fa 99 09 00 01		MIDI_INSTRUMENT_SYNDRUM    .text $00, $22, $06, $FA, $99, $09, $00, $01, $00, $D5, $25, $00
>392bb0	00 d5 25 00
>392bb4	00 2e 00 ff 00 0f 02 0e		MIDI_INSTRUMENT_REVRSCYM   .text $00, $2E, $00, $FF, $00, $0F, $02, $0E, $0E, $21, $2D, $00
>392bbc	0e 21 2d 00
>392bc0	00 30 0b 56 e4 01 01 17		MIDI_INSTRUMENT_FRETNOIS   .text $00, $30, $0B, $56, $E4, $01, $01, $17, $00, $55, $87, $02
>392bc8	00 55 87 02
>392bcc	00 24 00 ff 03 0d 00 05		MIDI_INSTRUMENT_BRTHNOIS   .text $00, $24, $00, $FF, $03, $0D, $00, $05, $08, $98, $87, $01
>392bd4	08 98 87 01
>392bd8	00 0e 00 f0 00 0f 02 0a		MIDI_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F0, $00, $0F, $02, $0A, $04, $17, $04, $03
>392be0	04 17 04 03
>392be4	00 20 08 f6 f7 01 00 0e		MIDI_INSTRUMENT_BIRDS      .text $00, $20, $08, $F6, $F7, $01, $00, $0E, $05, $77, $F9, $02
>392bec	05 77 f9 02
>392bf0	00 20 14 f1 08 01 00 2e		MIDI_INSTRUMENT_TELEPHON   .text $00, $20, $14, $F1, $08, $01, $00, $2E, $02, $F4, $08, $00
>392bf8	02 f4 08 00
>392bfc	00 20 04 f2 00 03 01 23		MIDI_INSTRUMENT_HELICOPT   .text $00, $20, $04, $F2, $00, $03, $01, $23, $00, $36, $05, $01
>392c04	00 36 05 01
>392c08	00 2e 00 ff 02 0f 00 2a		MIDI_INSTRUMENT_APPLAUSE   .text $00, $2E, $00, $FF, $02, $0F, $00, $2A, $05, $32, $55, $03
>392c10	05 32 55 03
>392c14	00 20 00 a1 ef 0f 00 10		MIDI_INSTRUMENT_GUNSHOT    .text $00, $20, $00, $A1, $EF, $0F, $00, $10, $00, $F3, $DF, $00
>392c1c	00 f3 df 00
>392c20	20 26 39 00 2c 26 39 00		midiInstruments .dword MIDI_INSTRUMENT_PIANO1,   MIDI_INSTRUMENT_PIANO2,   MIDI_INSTRUMENT_PIANO3,   MIDI_INSTRUMENT_HONKTONK, MIDI_INSTRUMENT_EP1,      MIDI_INSTRUMENT_EP2
>392c28	38 26 39 00 44 26 39 00 50 26 39 00 5c 26 39 00
>392c38	68 26 39 00 74 26 39 00		              	.dword MIDI_INSTRUMENT_HARPSIC,  MIDI_INSTRUMENT_CLAVIC,   MIDI_INSTRUMENT_CELESTA,  MIDI_INSTRUMENT_GLOCK,    MIDI_INSTRUMENT_MUSICBOX, MIDI_INSTRUMENT_VIBES
>392c40	80 26 39 00 8c 26 39 00 98 26 39 00 a4 26 39 00
>392c50	b0 26 39 00 bc 26 39 00		              	.dword MIDI_INSTRUMENT_MARIMBA,  MIDI_INSTRUMENT_XYLO,     MIDI_INSTRUMENT_TUBEBELL, MIDI_INSTRUMENT_SANTUR,   MIDI_INSTRUMENT_ORGAN1,   MIDI_INSTRUMENT_ORGAN2
>392c58	c8 26 39 00 d4 26 39 00 e0 26 39 00 ec 26 39 00
>392c68	f8 26 39 00 04 27 39 00		              	.dword MIDI_INSTRUMENT_ORGAN3,   MIDI_INSTRUMENT_PIPEORG,  MIDI_INSTRUMENT_REEDORG,  MIDI_INSTRUMENT_ACORDIAN, MIDI_INSTRUMENT_HARMONIC, MIDI_INSTRUMENT_BANDNEON
>392c70	10 27 39 00 1c 27 39 00 28 27 39 00 34 27 39 00
>392c80	40 27 39 00 4c 27 39 00		              	.dword MIDI_INSTRUMENT_NYLONGT,  MIDI_INSTRUMENT_STEELGT,  MIDI_INSTRUMENT_JAZZGT,   MIDI_INSTRUMENT_CLEANGT,  MIDI_INSTRUMENT_MUTEGT,   MIDI_INSTRUMENT_OVERDGT
>392c88	58 27 39 00 64 27 39 00 70 27 39 00 7c 27 39 00
>392c98	88 27 39 00 94 27 39 00		              	.dword MIDI_INSTRUMENT_DISTGT,   MIDI_INSTRUMENT_GTHARMS,  MIDI_INSTRUMENT_ACOUBASS, MIDI_INSTRUMENT_FINGBASS, MIDI_INSTRUMENT_PICKBASS, MIDI_INSTRUMENT_FRETLESS
>392ca0	a0 27 39 00 ac 27 39 00 b8 27 39 00 c4 27 39 00
>392cb0	d0 27 39 00 dc 27 39 00		              	.dword MIDI_INSTRUMENT_SLAPBAS1, MIDI_INSTRUMENT_SLAPBAS2, MIDI_INSTRUMENT_SYNBASS1, MIDI_INSTRUMENT_SYNBASS2, MIDI_INSTRUMENT_VIOLIN,   MIDI_INSTRUMENT_VIOLA
>392cb8	e8 27 39 00 f4 27 39 00 00 28 39 00 0c 28 39 00
>392cc8	18 28 39 00 24 28 39 00		              	.dword MIDI_INSTRUMENT_CELLO,    MIDI_INSTRUMENT_CONTRAB,  MIDI_INSTRUMENT_TREMSTR,  MIDI_INSTRUMENT_PIZZ,     MIDI_INSTRUMENT_HARP,     MIDI_INSTRUMENT_TIMPANI
>392cd0	30 28 39 00 3c 28 39 00 48 28 39 00 54 28 39 00
>392ce0	60 28 39 00 6c 28 39 00		              	.dword MIDI_INSTRUMENT_STRINGS,  MIDI_INSTRUMENT_SLOWSTR,  MIDI_INSTRUMENT_SYNSTR1,  MIDI_INSTRUMENT_SYNSTR2,  MIDI_INSTRUMENT_CHOIR,    MIDI_INSTRUMENT_OOHS
>392ce8	78 28 39 00 84 28 39 00 90 28 39 00 9c 28 39 00
>392cf8	a8 28 39 00 b4 28 39 00		              	.dword MIDI_INSTRUMENT_SYNVOX,   MIDI_INSTRUMENT_ORCHIT,   MIDI_INSTRUMENT_TRUMPET,  MIDI_INSTRUMENT_TROMBONE, MIDI_INSTRUMENT_TUBA,     MIDI_INSTRUMENT_MUTETRP
>392d00	c0 28 39 00 cc 28 39 00 d8 28 39 00 e4 28 39 00
>392d10	f0 28 39 00 fc 28 39 00		              	.dword MIDI_INSTRUMENT_FRHORN,   MIDI_INSTRUMENT_BRASS1,   MIDI_INSTRUMENT_SYNBRAS1, MIDI_INSTRUMENT_SYNBRAS2, MIDI_INSTRUMENT_SOPSAX,   MIDI_INSTRUMENT_ALTOSAX
>392d18	08 29 39 00 14 29 39 00 20 29 39 00 2c 29 39 00
>392d28	38 29 39 00 44 29 39 00		              	.dword MIDI_INSTRUMENT_TENSAX,   MIDI_INSTRUMENT_BARISAX,  MIDI_INSTRUMENT_OBOE,     MIDI_INSTRUMENT_ENGLHORN, MIDI_INSTRUMENT_BASSOON,  MIDI_INSTRUMENT_CLARINET
>392d30	50 29 39 00 5c 29 39 00 68 29 39 00 74 29 39 00
>392d40	80 29 39 00 8c 29 39 00		              	.dword MIDI_INSTRUMENT_PICCOLO,  MIDI_INSTRUMENT_FLUTE1,   MIDI_INSTRUMENT_RECORDER, MIDI_INSTRUMENT_PANFLUTE, MIDI_INSTRUMENT_BOTTLEB,  MIDI_INSTRUMENT_SHAKU
>392d48	98 29 39 00 a4 29 39 00 b0 29 39 00 bc 29 39 00
>392d58	c8 29 39 00 d4 29 39 00		              	.dword MIDI_INSTRUMENT_WHISTLE,  MIDI_INSTRUMENT_OCARINA,  MIDI_INSTRUMENT_SQUARWAV, MIDI_INSTRUMENT_SAWWAV,   MIDI_INSTRUMENT_SYNCALLI, MIDI_INSTRUMENT_CHIFLEAD
>392d60	e0 29 39 00 ec 29 39 00 f8 29 39 00 04 2a 39 00
>392d70	10 2a 39 00 1c 2a 39 00		              	.dword MIDI_INSTRUMENT_CHARANG,  MIDI_INSTRUMENT_SOLOVOX,  MIDI_INSTRUMENT_FIFTHSAW, MIDI_INSTRUMENT_BASSLEAD, MIDI_INSTRUMENT_FANTASIA, MIDI_INSTRUMENT_WARMPAD
>392d78	28 2a 39 00 34 2a 39 00 40 2a 39 00 4c 2a 39 00
>392d88	58 2a 39 00 64 2a 39 00		              	.dword MIDI_INSTRUMENT_POLYSYN,  MIDI_INSTRUMENT_SPACEVOX, MIDI_INSTRUMENT_BOWEDGLS, MIDI_INSTRUMENT_METALPAD, MIDI_INSTRUMENT_HALOPAD,  MIDI_INSTRUMENT_SWEEPPAD
>392d90	70 2a 39 00 7c 2a 39 00 88 2a 39 00 94 2a 39 00
>392da0	a0 2a 39 00 ac 2a 39 00		              	.dword MIDI_INSTRUMENT_ICERAIN,  MIDI_INSTRUMENT_SOUNDTRK, MIDI_INSTRUMENT_CRYSTAL,  MIDI_INSTRUMENT_ATMOSPH,  MIDI_INSTRUMENT_BRIGHT,   MIDI_INSTRUMENT_GOBLIN
>392da8	b8 2a 39 00 c4 2a 39 00 d0 2a 39 00 dc 2a 39 00
>392db8	e8 2a 39 00 f4 2a 39 00		              	.dword MIDI_INSTRUMENT_ECHODROP, MIDI_INSTRUMENT_STARTHEM, MIDI_INSTRUMENT_SITAR,    MIDI_INSTRUMENT_BANJO,    MIDI_INSTRUMENT_SHAMISEN, MIDI_INSTRUMENT_KOTO
>392dc0	00 2b 39 00 0c 2b 39 00 18 2b 39 00 24 2b 39 00
>392dd0	30 2b 39 00 3c 2b 39 00		              	.dword MIDI_INSTRUMENT_KALIMBA,  MIDI_INSTRUMENT_BAGPIPE,  MIDI_INSTRUMENT_FIDDLE,   MIDI_INSTRUMENT_SHANNAI,  MIDI_INSTRUMENT_TINKLBEL, MIDI_INSTRUMENT_AGOGO
>392dd8	48 2b 39 00 54 2b 39 00 60 2b 39 00 6c 2b 39 00
>392de8	78 2b 39 00 84 2b 39 00		              	.dword MIDI_INSTRUMENT_STEELDRM, MIDI_INSTRUMENT_WOODBLOK, MIDI_INSTRUMENT_TAIKO,    MIDI_INSTRUMENT_MELOTOM,  MIDI_INSTRUMENT_SYNDRUM,  MIDI_INSTRUMENT_REVRSCYM
>392df0	90 2b 39 00 9c 2b 39 00 a8 2b 39 00 b4 2b 39 00
>392e00	c0 2b 39 00 cc 2b 39 00		              	.dword MIDI_INSTRUMENT_FRETNOIS, MIDI_INSTRUMENT_BRTHNOIS, MIDI_INSTRUMENT_SEASHORE, MIDI_INSTRUMENT_BIRDS,    MIDI_INSTRUMENT_TELEPHON, MIDI_INSTRUMENT_HELICOPT
>392e08	d8 2b 39 00 e4 2b 39 00 f0 2b 39 00 fc 2b 39 00
>392e18	08 2c 39 00 14 2c 39 00		              	.dword MIDI_INSTRUMENT_APPLAUSE, MIDI_INSTRUMENT_GUNSHOT

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Instruments_Win31.asm

>392e20	00 01 8f f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO1     .text $00, $01, $8F, $F2, $F4, $38, $00, $01, $0D, $F2, $F7, $00
>392e28	0d f2 f7 00
>392e2c	00 01 4b f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO2     .text $00, $01, $4B, $F2, $F4, $38, $00, $01, $07, $F2, $F7, $00
>392e34	07 f2 f7 00
>392e38	00 01 49 f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO3     .text $00, $01, $49, $F2, $F4, $38, $00, $01, $07, $F2, $F6, $00
>392e40	07 f2 f6 00
>392e44	00 81 12 f2 f7 00 00 41		MIDIW31_INSTRUMENT_HONKTONK   .text $00, $81, $12, $F2, $F7, $00, $00, $41, $07, $F2, $F7, $00
>392e4c	07 f2 f7 00
>392e50	00 01 57 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP1        .text $00, $01, $57, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>392e58	07 f2 f7 00
>392e5c	00 01 93 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP2        .text $00, $01, $93, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>392e64	07 f2 f7 00
>392e68	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HARPSIC    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392e70	00 00 00 00
>392e74	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLAVIC     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392e7c	00 00 00 00
>392e80	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELESTA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392e88	00 00 00 00
>392e8c	00 07 97 f3 f2 32 00 11		MIDIW31_INSTRUMENT_GLOCK      .text $00, $07, $97, $F3, $F2, $32, $00, $11, $87, $F2, $F1, $00
>392e94	87 f2 f1 00
>392e98	00 17 21 54 f4 32 00 01		MIDIW31_INSTRUMENT_MUSICBOX   .text $00, $17, $21, $54, $F4, $32, $00, $01, $07, $F4, $F4, $00
>392ea0	07 f4 f4 00
>392ea4	00 98 62 f3 f6 30 00 81		MIDIW31_INSTRUMENT_VIBES      .text $00, $98, $62, $F3, $F6, $30, $00, $81, $07, $F2, $F6, $00
>392eac	07 f2 f6 00
>392eb0	00 18 23 f6 f6 00 00 01		MIDIW31_INSTRUMENT_MARIMBA    .text $00, $18, $23, $F6, $F6, $00, $00, $01, $07, $E7, $F7, $00
>392eb8	07 e7 f7 00
>392ebc	00 15 91 f6 f6 00 00 01		MIDIW31_INSTRUMENT_XYLO       .text $00, $15, $91, $F6, $F6, $00, $00, $01, $07, $F6, $F6, $00
>392ec4	07 f6 f6 00
>392ec8	00 45 59 d3 f3 00 00 81		MIDIW31_INSTRUMENT_TUBEBELL   .text $00, $45, $59, $D3, $F3, $00, $00, $81, $87, $A3, $F3, $00
>392ed0	87 a3 f3 00
>392ed4	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SANTUR     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392edc	00 00 00 00
>392ee0	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392ee8	00 00 00 00
>392eec	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN2     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392ef4	00 00 00 00
>392ef8	00 70 44 aa 18 34 00 b1		MIDIW31_INSTRUMENT_ORGAN3     .text $00, $70, $44, $AA, $18, $34, $00, $B1, $07, $8A, $08, $00
>392f00	07 8a 08 00
>392f04	00 23 93 97 23 34 01 b1		MIDIW31_INSTRUMENT_PIPEORG    .text $00, $23, $93, $97, $23, $34, $01, $B1, $07, $55, $14, $00
>392f0c	07 55 14 00
>392f10	00 61 13 97 04 30 01 b1		MIDIW31_INSTRUMENT_REEDORG    .text $00, $61, $13, $97, $04, $30, $01, $B1, $87, $55, $04, $00
>392f18	87 55 04 00
>392f1c	00 24 48 98 2a 30 01 b1		MIDIW31_INSTRUMENT_ACORDIAN   .text $00, $24, $48, $98, $2A, $30, $01, $B1, $07, $46, $1A, $00
>392f24	07 46 1a 00
>392f28	00 61 13 91 06 00 01 21		MIDIW31_INSTRUMENT_HARMONIC   .text $00, $61, $13, $91, $06, $00, $01, $21, $07, $61, $07, $00
>392f30	07 61 07 00
>392f34	00 21 13 71 06 00 00 a1		MIDIW31_INSTRUMENT_BANDNEON   .text $00, $21, $13, $71, $06, $00, $00, $A1, $90, $61, $07, $00
>392f3c	90 61 07 00
>392f40	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_NYLONGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f48	00 00 00 00
>392f4c	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f54	00 00 00 00
>392f58	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_JAZZGT     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f60	00 00 00 00
>392f64	00 03 87 f6 22 36 01 21		MIDIW31_INSTRUMENT_CLEANGT    .text $00, $03, $87, $F6, $22, $36, $01, $21, $87, $F3, $F8, $00
>392f6c	87 f3 f8 00
>392f70	00 03 47 f9 54 30 00 21		MIDIW31_INSTRUMENT_MUTEGT     .text $00, $03, $47, $F9, $54, $30, $00, $21, $07, $F6, $3A, $00
>392f78	07 f6 3a 00
>392f7c	00 23 4a 91 41 38 01 21		MIDIW31_INSTRUMENT_OVERDGT    .text $00, $23, $4A, $91, $41, $38, $01, $21, $0C, $84, $19, $00
>392f84	0c 84 19 00
>392f88	00 23 4a 95 19 32 01 21		MIDIW31_INSTRUMENT_DISTGT     .text $00, $23, $4A, $95, $19, $32, $01, $21, $07, $94, $19, $00
>392f90	07 94 19 00
>392f94	00 09 a1 20 4f 00 00 84		MIDIW31_INSTRUMENT_GTHARMS    .text $00, $09, $A1, $20, $4F, $00, $00, $84, $87, $D1, $F8, $00
>392f9c	87 d1 f8 00
>392fa0	00 21 1e 94 06 00 00 a2		MIDIW31_INSTRUMENT_ACOUBASS   .text $00, $21, $1E, $94, $06, $00, $00, $A2, $07, $C3, $A6, $00
>392fa8	07 c3 a6 00
>392fac	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FINGBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392fb4	00 00 00 00
>392fb8	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_PICKBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392fc0	00 00 00 00
>392fc4	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRETLESS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392fcc	00 00 00 00
>392fd0	00 01 8b a1 9a 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS1   .text $00, $01, $8B, $A1, $9A, $38, $00, $21, $47, $F2, $DF, $00
>392fd8	47 f2 df 00
>392fdc	00 21 8b a2 16 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS2   .text $00, $21, $8B, $A2, $16, $38, $00, $21, $0F, $A1, $DF, $00
>392fe4	0f a1 df 00
>392fe8	00 31 8b f4 e8 3a 00 31		MIDIW31_INSTRUMENT_SYNBASS1   .text $00, $31, $8B, $F4, $E8, $3A, $00, $31, $07, $F1, $78, $00
>392ff0	07 f1 78 00
>392ff4	00 31 12 f1 28 30 00 31		MIDIW31_INSTRUMENT_SYNBASS2   .text $00, $31, $12, $F1, $28, $30, $00, $31, $07, $F1, $18, $00
>392ffc	07 f1 18 00
>393000	00 31 15 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLIN     .text $00, $31, $15, $DD, $13, $00, $01, $21, $07, $56, $26, $00
>393008	07 56 26 00
>39300c	00 31 16 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLA      .text $00, $31, $16, $DD, $13, $00, $01, $21, $07, $66, $06, $00
>393014	07 66 06 00
>393018	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELLO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393020	00 00 00 00
>393024	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CONTRAB    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39302c	00 00 00 00
>393030	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TREMSTR    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393038	00 00 00 00
>39303c	00 02 1a f5 75 30 01 01		MIDIW31_INSTRUMENT_PIZZ       .text $00, $02, $1A, $F5, $75, $30, $01, $01, $87, $85, $35, $00
>393044	87 85 35 00
>393048	00 02 1d f5 75 30 01 01		MIDIW31_INSTRUMENT_HARP       .text $00, $02, $1D, $F5, $75, $30, $01, $01, $87, $F3, $F4, $00
>393050	87 f3 f4 00
>393054	00 10 41 f5 05 32 01 11		MIDIW31_INSTRUMENT_TIMPANI    .text $00, $10, $41, $F5, $05, $32, $01, $11, $07, $F2, $C3, $00
>39305c	07 f2 c3 00
>393060	00 21 9b b1 25 3c 01 a2		MIDIW31_INSTRUMENT_STRINGS    .text $00, $21, $9B, $B1, $25, $3C, $01, $A2, $08, $72, $08, $00
>393068	08 72 08 00
>39306c	00 a1 98 7f 03 00 01 21		MIDIW31_INSTRUMENT_SLOWSTR    .text $00, $A1, $98, $7F, $03, $00, $01, $21, $07, $3F, $07, $01
>393074	07 3f 07 01
>393078	00 a1 93 c1 12 00 00 61		MIDIW31_INSTRUMENT_SYNSTR1    .text $00, $A1, $93, $C1, $12, $00, $00, $61, $07, $4F, $05, $00
>393080	07 4f 05 00
>393084	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNSTR2    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39308c	00 00 00 00
>393090	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CHOIR      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393098	00 00 00 00
>39309c	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OOHS       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3930a4	00 00 00 00
>3930a8	00 71 57 54 05 3c 00 72		MIDIW31_INSTRUMENT_SYNVOX     .text $00, $71, $57, $54, $05, $3C, $00, $72, $07, $7A, $05, $00
>3930b0	07 7a 05 00
>3930b4	00 90 00 54 63 38 00 41		MIDIW31_INSTRUMENT_ORCHIT     .text $00, $90, $00, $54, $63, $38, $00, $41, $07, $A5, $45, $00
>3930bc	07 a5 45 00
>3930c0	00 21 92 85 17 3c 00 21		MIDIW31_INSTRUMENT_TRUMPET    .text $00, $21, $92, $85, $17, $3C, $00, $21, $08, $8F, $09, $00
>3930c8	08 8f 09 00
>3930cc	00 21 94 75 17 32 00 21		MIDIW31_INSTRUMENT_TROMBONE   .text $00, $21, $94, $75, $17, $32, $00, $21, $0C, $8F, $09, $00
>3930d4	0c 8f 09 00
>3930d8	00 21 94 76 15 00 00 61		MIDIW31_INSTRUMENT_TUBA       .text $00, $21, $94, $76, $15, $00, $00, $61, $07, $82, $37, $00
>3930e0	07 82 37 00
>3930e4	00 31 43 9e 17 00 01 21		MIDIW31_INSTRUMENT_MUTETRP    .text $00, $31, $43, $9E, $17, $00, $01, $21, $07, $62, $2C, $01
>3930ec	07 62 2c 01
>3930f0	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRHORN     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3930f8	00 00 00 00
>3930fc	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BRASS1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393104	00 00 00 00
>393108	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNBRAS1   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393110	00 00 00 00
>393114	00 21 4d 54 3c 38 00 21		MIDIW31_INSTRUMENT_SYNBRAS2   .text $00, $21, $4D, $54, $3C, $38, $00, $21, $07, $A6, $1C, $00
>39311c	07 a6 1c 00
>393120	00 31 8f 93 02 38 01 61		MIDIW31_INSTRUMENT_SOPSAX     .text $00, $31, $8F, $93, $02, $38, $01, $61, $07, $72, $0B, $00
>393128	07 72 0b 00
>39312c	00 31 8e 93 03 38 01 61		MIDIW31_INSTRUMENT_ALTOSAX    .text $00, $31, $8E, $93, $03, $38, $01, $61, $07, $72, $09, $00
>393134	07 72 09 00
>393138	00 31 91 93 03 30 01 61		MIDIW31_INSTRUMENT_TENSAX     .text $00, $31, $91, $93, $03, $30, $01, $61, $07, $82, $09, $00
>393140	07 82 09 00
>393144	00 31 8e 93 0f 00 01 61		MIDIW31_INSTRUMENT_BARISAX    .text $00, $31, $8E, $93, $0F, $00, $01, $61, $07, $72, $0F, $00
>39314c	07 72 0f 00
>393150	00 21 4b aa 16 00 01 21		MIDIW31_INSTRUMENT_OBOE       .text $00, $21, $4B, $AA, $16, $00, $01, $21, $07, $8F, $0A, $00
>393158	07 8f 0a 00
>39315c	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ENGLHORN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393164	00 00 00 00
>393168	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSOON    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393170	00 00 00 00
>393174	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLARINET   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39317c	00 00 00 00
>393180	00 e1 1f 85 5f 30 00 e1		MIDIW31_INSTRUMENT_PICCOLO    .text $00, $E1, $1F, $85, $5F, $30, $00, $E1, $07, $65, $1A, $00
>393188	07 65 1a 00
>39318c	00 e1 46 88 5f 30 00 e1		MIDIW31_INSTRUMENT_FLUTE1     .text $00, $E1, $46, $88, $5F, $30, $00, $E1, $07, $65, $1A, $00
>393194	07 65 1a 00
>393198	00 a1 9c 75 1f 32 00 21		MIDIW31_INSTRUMENT_RECORDER   .text $00, $A1, $9C, $75, $1F, $32, $00, $21, $07, $75, $0A, $00
>3931a0	07 75 0a 00
>3931a4	00 31 8b 84 58 30 00 21		MIDIW31_INSTRUMENT_PANFLUTE   .text $00, $31, $8B, $84, $58, $30, $00, $21, $07, $65, $1A, $00
>3931ac	07 65 1a 00
>3931b0	00 e1 4c 66 56 00 00 a1		MIDIW31_INSTRUMENT_BOTTLEB    .text $00, $E1, $4C, $66, $56, $00, $00, $A1, $07, $65, $26, $00
>3931b8	07 65 26 00
>3931bc	00 62 cb 76 46 00 00 a1		MIDIW31_INSTRUMENT_SHAKU      .text $00, $62, $CB, $76, $46, $00, $00, $A1, $07, $55, $36, $00
>3931c4	07 55 36 00
>3931c8	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WHISTLE    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3931d0	00 00 00 00
>3931d4	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OCARINA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3931dc	00 00 00 00
>3931e0	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SQUARWAV   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3931e8	00 00 00 00
>3931ec	00 21 0e ff 0f 30 01 21		MIDIW31_INSTRUMENT_SAWWAV     .text $00, $21, $0E, $FF, $0F, $30, $01, $21, $07, $FF, $0F, $01
>3931f4	07 ff 0f 01
>3931f8	00 22 46 86 55 30 00 21		MIDIW31_INSTRUMENT_SYNCALLI   .text $00, $22, $46, $86, $55, $30, $00, $21, $87, $64, $18, $00
>393200	87 64 18 00
>393204	00 21 45 66 12 30 00 a1		MIDIW31_INSTRUMENT_CHIFLEAD   .text $00, $21, $45, $66, $12, $30, $00, $A1, $07, $96, $0A, $00
>39320c	07 96 0a 00
>393210	00 21 8b 92 2a 34 01 22		MIDIW31_INSTRUMENT_CHARANG    .text $00, $21, $8B, $92, $2A, $34, $01, $22, $07, $91, $2A, $00
>393218	07 91 2a 00
>39321c	00 a2 9e df 05 00 00 61		MIDIW31_INSTRUMENT_SOLOVOX    .text $00, $A2, $9E, $DF, $05, $00, $00, $61, $47, $6F, $07, $00
>393224	47 6f 07 00
>393228	00 20 1a ef 01 00 00 60		MIDIW31_INSTRUMENT_FIFTHSAW   .text $00, $20, $1A, $EF, $01, $00, $00, $60, $07, $8F, $06, $02
>393230	07 8f 06 02
>393234	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSLEAD   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39323c	00 00 00 00
>393240	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FANTASIA   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393248	00 00 00 00
>39324c	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WARMPAD    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393254	00 00 00 00
>393258	00 61 17 91 34 3c 00 61		MIDIW31_INSTRUMENT_POLYSYN    .text $00, $61, $17, $91, $34, $3C, $00, $61, $07, $55, $16, $00
>393260	07 55 16 00
>393264	00 71 5d 54 01 30 00 72		MIDIW31_INSTRUMENT_SPACEVOX   .text $00, $71, $5D, $54, $01, $30, $00, $72, $07, $6A, $03, $00
>39326c	07 6a 03 00
>393270	00 21 97 21 43 38 00 a2		MIDIW31_INSTRUMENT_BOWEDGLS   .text $00, $21, $97, $21, $43, $38, $00, $A2, $07, $42, $35, $00
>393278	07 42 35 00
>39327c	00 a1 1c a1 77 30 01 21		MIDIW31_INSTRUMENT_METALPAD   .text $00, $A1, $1C, $A1, $77, $30, $01, $21, $07, $31, $47, $01
>393284	07 31 47 01
>393288	00 21 89 11 33 00 00 61		MIDIW31_INSTRUMENT_HALOPAD    .text $00, $21, $89, $11, $33, $00, $00, $61, $0A, $42, $25, $00
>393290	0a 42 25 00
>393294	00 a1 15 11 47 00 01 21		MIDIW31_INSTRUMENT_SWEEPPAD   .text $00, $A1, $15, $11, $47, $00, $01, $21, $07, $CF, $07, $00
>39329c	07 cf 07 00
>3932a0	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ICERAIN    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3932a8	00 00 00 00
>3932ac	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SOUNDTRK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3932b4	00 00 00 00
>3932b8	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CRYSTAL    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3932c0	00 00 00 00
>3932c4	00 22 92 b1 81 3c 00 61		MIDIW31_INSTRUMENT_ATMOSPH    .text $00, $22, $92, $B1, $81, $3C, $00, $61, $8A, $F2, $26, $00
>3932cc	8a f2 26 00
>3932d0	00 41 4d f1 51 30 01 42		MIDIW31_INSTRUMENT_BRIGHT     .text $00, $41, $4D, $F1, $51, $30, $01, $42, $07, $F2, $F5, $00
>3932d8	07 f2 f5 00
>3932dc	00 61 94 11 51 36 01 a3		MIDIW31_INSTRUMENT_GOBLIN     .text $00, $61, $94, $11, $51, $36, $01, $A3, $87, $11, $13, $00
>3932e4	87 11 13 00
>3932e8	00 61 8c 11 31 3a 00 a1		MIDIW31_INSTRUMENT_ECHODROP   .text $00, $61, $8C, $11, $31, $3A, $00, $A1, $87, $1D, $03, $00
>3932f0	87 1d 03 00
>3932f4	00 a4 4c f3 73 00 01 61		MIDIW31_INSTRUMENT_STARTHEM   .text $00, $A4, $4C, $F3, $73, $00, $01, $61, $07, $81, $23, $00
>3932fc	07 81 23 00
>393300	00 02 85 d2 53 00 00 07		MIDIW31_INSTRUMENT_SITAR      .text $00, $02, $85, $D2, $53, $00, $00, $07, $0A, $F2, $F6, $01
>393308	0a f2 f6 01
>39330c	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BANJO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393314	00 00 00 00
>393318	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SHAMISEN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393320	00 00 00 00
>393324	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_KOTO       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39332c	00 00 00 00
>393330	00 04 4f fa 56 3c 00 01		MIDIW31_INSTRUMENT_KALIMBA    .text $00, $04, $4F, $FA, $56, $3C, $00, $01, $07, $C2, $05, $00
>393338	07 c2 05 00
>39333c	00 21 49 7c 20 36 00 22		MIDIW31_INSTRUMENT_BAGPIPE    .text $00, $21, $49, $7C, $20, $36, $00, $22, $07, $6F, $0C, $01
>393344	07 6f 0c 01
>393348	00 31 85 dd 33 3a 01 21		MIDIW31_INSTRUMENT_FIDDLE     .text $00, $31, $85, $DD, $33, $3A, $01, $21, $07, $56, $16, $00
>393350	07 56 16 00
>393354	00 20 04 da 05 30 02 21		MIDIW31_INSTRUMENT_SHANNAI    .text $00, $20, $04, $DA, $05, $30, $02, $21, $88, $8F, $0B, $00
>39335c	88 8f 0b 00
>393360	00 05 6a f1 e5 00 00 03		MIDIW31_INSTRUMENT_TINKLBEL   .text $00, $05, $6A, $F1, $E5, $00, $00, $03, $87, $C3, $E5, $00
>393368	87 c3 e5 00
>39336c	00 07 15 ec 26 00 00 02		MIDIW31_INSTRUMENT_AGOGO      .text $00, $07, $15, $EC, $26, $00, $00, $02, $07, $F8, $16, $00
>393374	07 f8 16 00
>393378	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELDRM   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393380	00 00 00 00
>393384	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WOODBLOK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39338c	00 00 00 00
>393390	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TAIKO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393398	00 00 00 00
>39339c	00 11 41 f8 47 34 02 10		MIDIW31_INSTRUMENT_MELOTOM    .text $00, $11, $41, $F8, $47, $34, $02, $10, $0A, $F3, $03, $00
>3933a4	0a f3 03 00
>3933a8	00 01 8e f1 06 3e 02 10		MIDIW31_INSTRUMENT_SYNDRUM    .text $00, $01, $8E, $F1, $06, $3E, $02, $10, $07, $F3, $02, $00
>3933b0	07 f3 02 00
>3933b4	00 0e 00 1f 00 3e 00 c0		MIDIW31_INSTRUMENT_REVRSCYM   .text $00, $0E, $00, $1F, $00, $3E, $00, $C0, $07, $1F, $FF, $03
>3933bc	07 1f ff 03
>3933c0	00 06 80 f8 24 38 00 03		MIDIW31_INSTRUMENT_FRETNOIS   .text $00, $06, $80, $F8, $24, $38, $00, $03, $8F, $56, $84, $02
>3933c8	8f 56 84 02
>3933cc	00 0e 00 f8 00 00 00 d0		MIDIW31_INSTRUMENT_BRTHNOIS   .text $00, $0E, $00, $F8, $00, $00, $00, $D0, $0C, $34, $04, $03
>3933d4	0c 34 04 03
>3933d8	00 0e 00 f6 00 00 00 c0		MIDIW31_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F6, $00, $00, $00, $C0, $07, $1F, $02, $03
>3933e0	07 1f 02 03
>3933e4	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BIRDS      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3933ec	00 00 00 00
>3933f0	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TELEPHON   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3933f8	00 00 00 00
>3933fc	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HELICOPT   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393404	00 00 00 00
>393408	00 26 00 ff 01 3e 00 e4		MIDIW31_INSTRUMENT_APPLAUSE   .text $00, $26, $00, $FF, $01, $3E, $00, $E4, $07, $12, $16, $01
>393410	07 12 16 01
>393414	00 00 00 f3 f0 3e 00 00		MIDIW31_INSTRUMENT_GUNSHOT    .text $00, $00, $00, $F3, $F0, $3E, $00, $00, $07, $F6, $C9, $02
>39341c	07 f6 c9 02
>393420	20 2e 39 00 2c 2e 39 00		midiInstrumentsw31 .dword MIDIW31_INSTRUMENT_PIANO1,   MIDIW31_INSTRUMENT_PIANO2,   MIDIW31_INSTRUMENT_PIANO3,   MIDIW31_INSTRUMENT_HONKTONK, MIDIW31_INSTRUMENT_EP1, MIDIW31_INSTRUMENT_EP2
>393428	38 2e 39 00 44 2e 39 00 50 2e 39 00 5c 2e 39 00
>393438	68 2e 39 00 74 2e 39 00		                   .dword MIDIW31_INSTRUMENT_HARPSIC,  MIDIW31_INSTRUMENT_CLAVIC,   MIDIW31_INSTRUMENT_CELESTA,  MIDIW31_INSTRUMENT_GLOCK,    MIDIW31_INSTRUMENT_MUSICBOX, MIDIW31_INSTRUMENT_VIBES
>393440	80 2e 39 00 8c 2e 39 00 98 2e 39 00 a4 2e 39 00
>393450	b0 2e 39 00 bc 2e 39 00			                 .dword MIDIW31_INSTRUMENT_MARIMBA,  MIDIW31_INSTRUMENT_XYLO,     MIDIW31_INSTRUMENT_TUBEBELL, MIDIW31_INSTRUMENT_SANTUR,   MIDIW31_INSTRUMENT_ORGAN1,   MIDIW31_INSTRUMENT_ORGAN2
>393458	c8 2e 39 00 d4 2e 39 00 e0 2e 39 00 ec 2e 39 00
>393468	f8 2e 39 00 04 2f 39 00			                 .dword MIDIW31_INSTRUMENT_ORGAN3,   MIDIW31_INSTRUMENT_PIPEORG,  MIDIW31_INSTRUMENT_REEDORG,  MIDIW31_INSTRUMENT_ACORDIAN, MIDIW31_INSTRUMENT_HARMONIC, MIDIW31_INSTRUMENT_BANDNEON
>393470	10 2f 39 00 1c 2f 39 00 28 2f 39 00 34 2f 39 00
>393480	40 2f 39 00 4c 2f 39 00		                     .dword MIDIW31_INSTRUMENT_NYLONGT,  MIDIW31_INSTRUMENT_STEELGT,  MIDIW31_INSTRUMENT_JAZZGT,   MIDIW31_INSTRUMENT_CLEANGT,  MIDIW31_INSTRUMENT_MUTEGT,   MIDIW31_INSTRUMENT_OVERDGT
>393488	58 2f 39 00 64 2f 39 00 70 2f 39 00 7c 2f 39 00
>393498	88 2f 39 00 94 2f 39 00			                 .dword MIDIW31_INSTRUMENT_DISTGT,   MIDIW31_INSTRUMENT_GTHARMS,  MIDIW31_INSTRUMENT_ACOUBASS, MIDIW31_INSTRUMENT_FINGBASS, MIDIW31_INSTRUMENT_PICKBASS, MIDIW31_INSTRUMENT_FRETLESS
>3934a0	a0 2f 39 00 ac 2f 39 00 b8 2f 39 00 c4 2f 39 00
>3934b0	d0 2f 39 00 dc 2f 39 00			                 .dword MIDIW31_INSTRUMENT_SLAPBAS1, MIDIW31_INSTRUMENT_SLAPBAS2, MIDIW31_INSTRUMENT_SYNBASS1, MIDIW31_INSTRUMENT_SYNBASS2, MIDIW31_INSTRUMENT_VIOLIN,   MIDIW31_INSTRUMENT_VIOLA
>3934b8	e8 2f 39 00 f4 2f 39 00 00 30 39 00 0c 30 39 00
>3934c8	18 30 39 00 24 30 39 00			                 .dword MIDIW31_INSTRUMENT_CELLO,    MIDIW31_INSTRUMENT_CONTRAB,  MIDIW31_INSTRUMENT_TREMSTR,  MIDIW31_INSTRUMENT_PIZZ,     MIDIW31_INSTRUMENT_HARP,     MIDIW31_INSTRUMENT_TIMPANI
>3934d0	30 30 39 00 3c 30 39 00 48 30 39 00 54 30 39 00
>3934e0	60 30 39 00 6c 30 39 00			                 .dword MIDIW31_INSTRUMENT_STRINGS,  MIDIW31_INSTRUMENT_SLOWSTR,  MIDIW31_INSTRUMENT_SYNSTR1,  MIDIW31_INSTRUMENT_SYNSTR2,  MIDIW31_INSTRUMENT_CHOIR,    MIDIW31_INSTRUMENT_OOHS
>3934e8	78 30 39 00 84 30 39 00 90 30 39 00 9c 30 39 00
>3934f8	a8 30 39 00 b4 30 39 00			                 .dword MIDIW31_INSTRUMENT_SYNVOX,   MIDIW31_INSTRUMENT_ORCHIT,   MIDIW31_INSTRUMENT_TRUMPET,  MIDIW31_INSTRUMENT_TROMBONE, MIDIW31_INSTRUMENT_TUBA,     MIDIW31_INSTRUMENT_MUTETRP
>393500	c0 30 39 00 cc 30 39 00 d8 30 39 00 e4 30 39 00
>393510	f0 30 39 00 fc 30 39 00			                 .dword MIDIW31_INSTRUMENT_FRHORN,   MIDIW31_INSTRUMENT_BRASS1,   MIDIW31_INSTRUMENT_SYNBRAS1, MIDIW31_INSTRUMENT_SYNBRAS2, MIDIW31_INSTRUMENT_SOPSAX,   MIDIW31_INSTRUMENT_ALTOSAX
>393518	08 31 39 00 14 31 39 00 20 31 39 00 2c 31 39 00
>393528	38 31 39 00 44 31 39 00			                 .dword MIDIW31_INSTRUMENT_TENSAX,   MIDIW31_INSTRUMENT_BARISAX,  MIDIW31_INSTRUMENT_OBOE,     MIDIW31_INSTRUMENT_ENGLHORN, MIDIW31_INSTRUMENT_BASSOON,  MIDIW31_INSTRUMENT_CLARINET
>393530	50 31 39 00 5c 31 39 00 68 31 39 00 74 31 39 00
>393540	80 31 39 00 8c 31 39 00			                 .dword MIDIW31_INSTRUMENT_PICCOLO,  MIDIW31_INSTRUMENT_FLUTE1,   MIDIW31_INSTRUMENT_RECORDER, MIDIW31_INSTRUMENT_PANFLUTE, MIDIW31_INSTRUMENT_BOTTLEB,  MIDIW31_INSTRUMENT_SHAKU
>393548	98 31 39 00 a4 31 39 00 b0 31 39 00 bc 31 39 00
>393558	c8 31 39 00 d4 31 39 00			                 .dword MIDIW31_INSTRUMENT_WHISTLE,  MIDIW31_INSTRUMENT_OCARINA,  MIDIW31_INSTRUMENT_SQUARWAV, MIDIW31_INSTRUMENT_SAWWAV,   MIDIW31_INSTRUMENT_SYNCALLI, MIDIW31_INSTRUMENT_CHIFLEAD
>393560	e0 31 39 00 ec 31 39 00 f8 31 39 00 04 32 39 00
>393570	10 32 39 00 1c 32 39 00			                 .dword MIDIW31_INSTRUMENT_CHARANG,  MIDIW31_INSTRUMENT_SOLOVOX,  MIDIW31_INSTRUMENT_FIFTHSAW, MIDIW31_INSTRUMENT_BASSLEAD, MIDIW31_INSTRUMENT_FANTASIA, MIDIW31_INSTRUMENT_WARMPAD
>393578	28 32 39 00 34 32 39 00 40 32 39 00 4c 32 39 00
>393588	58 32 39 00 64 32 39 00			                 .dword MIDIW31_INSTRUMENT_POLYSYN,  MIDIW31_INSTRUMENT_SPACEVOX, MIDIW31_INSTRUMENT_BOWEDGLS, MIDIW31_INSTRUMENT_METALPAD, MIDIW31_INSTRUMENT_HALOPAD,  MIDIW31_INSTRUMENT_SWEEPPAD
>393590	70 32 39 00 7c 32 39 00 88 32 39 00 94 32 39 00
>3935a0	a0 32 39 00 ac 32 39 00			                 .dword MIDIW31_INSTRUMENT_ICERAIN,  MIDIW31_INSTRUMENT_SOUNDTRK, MIDIW31_INSTRUMENT_CRYSTAL,  MIDIW31_INSTRUMENT_ATMOSPH,  MIDIW31_INSTRUMENT_BRIGHT,   MIDIW31_INSTRUMENT_GOBLIN
>3935a8	b8 32 39 00 c4 32 39 00 d0 32 39 00 dc 32 39 00
>3935b8	e8 32 39 00 f4 32 39 00			                 .dword MIDIW31_INSTRUMENT_ECHODROP, MIDIW31_INSTRUMENT_STARTHEM, MIDIW31_INSTRUMENT_SITAR,    MIDIW31_INSTRUMENT_BANJO,    MIDIW31_INSTRUMENT_SHAMISEN, MIDIW31_INSTRUMENT_KOTO
>3935c0	00 33 39 00 0c 33 39 00 18 33 39 00 24 33 39 00
>3935d0	30 33 39 00 3c 33 39 00			                 .dword MIDIW31_INSTRUMENT_KALIMBA,  MIDIW31_INSTRUMENT_BAGPIPE,  MIDIW31_INSTRUMENT_FIDDLE,   MIDIW31_INSTRUMENT_SHANNAI,  MIDIW31_INSTRUMENT_TINKLBEL, MIDIW31_INSTRUMENT_AGOGO
>3935d8	48 33 39 00 54 33 39 00 60 33 39 00 6c 33 39 00
>3935e8	78 33 39 00 84 33 39 00			                 .dword MIDIW31_INSTRUMENT_STEELDRM, MIDIW31_INSTRUMENT_WOODBLOK, MIDIW31_INSTRUMENT_TAIKO,    MIDIW31_INSTRUMENT_MELOTOM,  MIDIW31_INSTRUMENT_SYNDRUM,  MIDIW31_INSTRUMENT_REVRSCYM
>3935f0	90 33 39 00 9c 33 39 00 a8 33 39 00 b4 33 39 00
>393600	c0 33 39 00 cc 33 39 00			                 .dword MIDIW31_INSTRUMENT_FRETNOIS, MIDIW31_INSTRUMENT_BRTHNOIS, MIDIW31_INSTRUMENT_SEASHORE, MIDIW31_INSTRUMENT_BIRDS,    MIDIW31_INSTRUMENT_TELEPHON, MIDIW31_INSTRUMENT_HELICOPT
>393608	d8 33 39 00 e4 33 39 00 f0 33 39 00 fc 33 39 00
>393618	08 34 39 00 14 34 39 00			                 .dword MIDIW31_INSTRUMENT_APPLAUSE, MIDIW31_INSTRUMENT_GUNSHOT

;******  Return to file: src\OPL2_Library.asm

>393620	3c 42 44 45 47 49 4b 4c		NOTE_INTRO  .byte  $3C, $42, $44, $45, $47, $49, $4B, $4C
.393628					IOPL2_TONE_TEST
.393628	e2 20		sep #$20	                SEP #$20        ; set A short
.39362a	c2 10		rep #$10	                REP #$10        ; set X long
.39362c	a2 00 00	ldx #$0000	                LDX #0
.39362f					OPL2_TONE_TESTING_L1
.39362f	bf 20 36 39	lda $393620,x	                LDA NOTE_INTRO, X
.393633	29 0f		and #$0f	                AND #$F
.393635	85 30		sta $30		                STA OPL2_NOTE ; start at C
.393637	bf 20 36 39	lda $393620,x	                LDA NOTE_INTRO, X
.39363b	29 70		and #$70	                AND #$70
.39363d	4a		lsr a		                LSR A
.39363e	4a		lsr a		                LSR A
.39363f	4a		lsr a		                LSR A
.393640	4a		lsr a		                LSR A
.393641	85 31		sta $31		                STA OPL2_OCTAVE
.393643	8a		txa		                TXA
.393644	29 03		and #$03	                AND #$03        ; replace modulo 3 -  play each note on a different channel
.393646	85 27		sta $27		                STA OPL2_CHANNEL
.393648	22 18 38 39	jsl $393818	                JSL OPL2_PLAYNOTE
.39364c	a0 00 00	ldy #$0000	                LDY #$0000
.39364f					OPL2_TONE_TESTING_L2
.39364f	ea		nop		                NOP
.393650	ea		nop		                NOP
.393651	ea		nop		                NOP
.393652	ea		nop		                NOP
.393653	c8		iny		                INY
.393654	c0 ff ff	cpy #$ffff	                CPY #$FFFF
.393657	d0 f6		bne $39364f	                BNE OPL2_TONE_TESTING_L2
.393659	e8		inx		                INX
.39365a	e0 08 00	cpx #$0008	                CPX #8
.39365d	d0 d0		bne $39362f	                BNE OPL2_TONE_TESTING_L1
.39365f	6b		rtl		                RTL
.393660					OPL2_INIT
.393660	c2 20		rep #$20	                REP #$20        ; set A long
.393662	a9 00 00	lda #$0000	                LDA #$0000
.393665	85 28		sta $28		                STA OPL2_REG_REGION
.393667	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393669	85 30		sta $30		                STA OPL2_NOTE
.39366b	85 32		sta $32		                STA OPL2_PARAMETER0
.39366d	85 34		sta $34		                STA OPL2_PARAMETER2
.39366f	a9 ea 15	lda #$15ea	                LDA #<>INSTRUMENT_ACCORDN
.393672	85 50		sta $50		                STA RAD_ADDR
.393674	a9 39 00	lda #$0039	                LDA #<`INSTRUMENT_ACCORDN
.393677	85 52		sta $52		                STA RAD_ADDR + 2
.393679	e2 20		sep #$20	                SEP #$20        ; set A short
.39367b	6b		rtl		                RTL
.39367c					OPL2_Reset
.39367c	6b		rtl		                RTL
.39367d					OPL2_Get_FrequencyBlock
.39367d	6b		rtl		                RTL
.39367e					OPL2_GET_REGISTER
.39367e	48		pha		                PHA             ; begin setdp macro
.39367f	08		php		                PHP
.393680	c2 20		rep #$20	                REP #$20        ; set A long
.393682	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393685	5b		tcd		                TCD
.393686	28		plp		                PLP
.393687	68		pla		                PLA             ; end setdp macro
.393688	c2 20		rep #$20	                REP #$20        ; set A long
.39368a	18		clc		              CLC
.39368b	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39368e	65 32		adc $32		              ADC OPL2_PARAMETER0
.393690	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393692	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393695	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393697	e2 20		sep #$20	                SEP #$20        ; set A short
.393699	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39369b	6b		rtl		              RTL
.39369c					OPL2_GET_WAVEFORM_SELECT
.39369c	48		pha		                PHA             ; begin setdp macro
.39369d	08		php		                PHP
.39369e	c2 20		rep #$20	                REP #$20        ; set A long
.3936a0	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3936a3	5b		tcd		                TCD
.3936a4	28		plp		                PLP
.3936a5	68		pla		                PLA             ; end setdp macro
.3936a6	c2 20		rep #$20	                REP #$20        ; set A long
.3936a8	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3936ab	69 01 00	adc #$0001	              ADC #$0001
.3936ae	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3936b0	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3936b3	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3936b5	e2 20		sep #$20	                SEP #$20        ; set A short
.3936b7	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3936b9	29 20		and #$20	              AND #$20
.3936bb	6b		rtl		              RTL
.3936bc					OPL2_GET_SCALINGLEVEL
.3936bc	48		pha		                PHA             ; begin setdp macro
.3936bd	08		php		                PHP
.3936be	c2 20		rep #$20	                REP #$20        ; set A long
.3936c0	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3936c3	5b		tcd		                TCD
.3936c4	28		plp		                PLP
.3936c5	68		pla		                PLA             ; end setdp macro
.3936c6	c2 20		rep #$20	                REP #$20        ; set A long
.3936c8	a9 40 00	lda #$0040	              LDA #$0040  ;
.3936cb	85 28		sta $28		              STA OPL2_REG_REGION
.3936cd	20 7f 3f	jsr $393f7f	              JSR OPL2_GET_REG_OFFSET
.3936d0	e2 20		sep #$20	                SEP #$20        ; set A short
.3936d2	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3936d4	29 c0		and #$c0	              AND #$C0
.3936d6	4a		lsr a		              LSR A
.3936d7	4a		lsr a		              LSR A
.3936d8	4a		lsr a		              LSR A
.3936d9	4a		lsr a		              LSR A
.3936da	4a		lsr a		              LSR A
.3936db	4a		lsr a		              LSR A
.3936dc	6b		rtl		              RTL
.3936dd					OPL2_GET_BLOCK
.3936dd	48		pha		                PHA             ; begin setdp macro
.3936de	08		php		                PHP
.3936df	c2 20		rep #$20	                REP #$20        ; set A long
.3936e1	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3936e4	5b		tcd		                TCD
.3936e5	28		plp		                PLP
.3936e6	68		pla		                PLA             ; end setdp macro
.3936e7	e2 20		sep #$20	                SEP #$20        ; set A short
.3936e9	18		clc		              CLC
.3936ea	a5 27		lda $27		              LDA OPL2_CHANNEL
.3936ec	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.3936ee	69 b0		adc #$b0	              ADC #$B0
.3936f0	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.3936f2	a9 00		lda #$00	              LDA #$00
.3936f4	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.3936f6	c2 30		rep #$30	                REP #$30        ; set A&X long
.3936f8	18		clc		              CLC
.3936f9	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3936fc	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.3936fe	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393700	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393703	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393705	e2 20		sep #$20	                SEP #$20        ; set A short
.393707	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393709	29 1c		and #$1c	              AND #$1C
.39370b	4a		lsr a		              LSR A
.39370c	4a		lsr a		              LSR A
.39370d	6b		rtl		              RTL
.39370e					OPL2_GET_KEYON
.39370e	48		pha		                PHA             ; begin setdp macro
.39370f	08		php		                PHP
.393710	c2 20		rep #$20	                REP #$20        ; set A long
.393712	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393715	5b		tcd		                TCD
.393716	28		plp		                PLP
.393717	68		pla		                PLA             ; end setdp macro
.393718	e2 20		sep #$20	                SEP #$20        ; set A short
.39371a	18		clc		              CLC
.39371b	a5 27		lda $27		              LDA OPL2_CHANNEL
.39371d	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.39371f	69 b0		adc #$b0	              ADC #$B0
.393721	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393723	a9 00		lda #$00	              LDA #$00
.393725	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393727	c2 30		rep #$30	                REP #$30        ; set A&X long
.393729	18		clc		              CLC
.39372a	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39372d	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.39372f	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393731	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393734	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393736	e2 20		sep #$20	                SEP #$20        ; set A short
.393738	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39373a	29 20		and #$20	              AND #$20
.39373c	6b		rtl		              RTL
.39373d					OPL2_GET_FEEDBACK
.39373d	48		pha		                PHA             ; begin setdp macro
.39373e	08		php		                PHP
.39373f	c2 20		rep #$20	                REP #$20        ; set A long
.393741	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393744	5b		tcd		                TCD
.393745	28		plp		                PLP
.393746	68		pla		                PLA             ; end setdp macro
.393747	e2 20		sep #$20	                SEP #$20        ; set A short
.393749	18		clc		              CLC
.39374a	a5 27		lda $27		              LDA OPL2_CHANNEL
.39374c	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.39374e	69 c0		adc #$c0	              ADC #$C0
.393750	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393752	a9 00		lda #$00	              LDA #$00
.393754	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393756	c2 30		rep #$30	                REP #$30        ; set A&X long
.393758	18		clc		              CLC
.393759	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39375c	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.39375e	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393760	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393763	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393765	e2 20		sep #$20	                SEP #$20        ; set A short
.393767	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393769	29 e0		and #$e0	              AND #$E0
.39376b	4a		lsr a		              LSR
.39376c	6b		rtl		              RTL
.39376d					OPL2_GET_SYNTHMODE
.39376d	48		pha		                PHA             ; begin setdp macro
.39376e	08		php		                PHP
.39376f	c2 20		rep #$20	                REP #$20        ; set A long
.393771	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393774	5b		tcd		                TCD
.393775	28		plp		                PLP
.393776	68		pla		                PLA             ; end setdp macro
.393777	e2 20		sep #$20	                SEP #$20        ; set A short
.393779	18		clc		              CLC
.39377a	a5 27		lda $27		              LDA OPL2_CHANNEL
.39377c	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.39377e	69 c0		adc #$c0	              ADC #$C0
.393780	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393782	a9 00		lda #$00	              LDA #$00
.393784	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393786	c2 30		rep #$30	                REP #$30        ; set A&X long
.393788	18		clc		              CLC
.393789	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39378c	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.39378e	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393790	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393793	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393795	e2 20		sep #$20	                SEP #$20        ; set A short
.393797	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393799	29 01		and #$01	              AND #$01
.39379b	6b		rtl		              RTL
.39379c					OPL2_GET_DEEPTREMOLO
.39379c	48		pha		                PHA             ; begin setdp macro
.39379d	08		php		                PHP
.39379e	c2 20		rep #$20	                REP #$20        ; set A long
.3937a0	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3937a3	5b		tcd		                TCD
.3937a4	28		plp		                PLP
.3937a5	68		pla		                PLA             ; end setdp macro
.3937a6	c2 20		rep #$20	                REP #$20        ; set A long
.3937a8	a9 bd 00	lda #$00bd	              LDA #$00BD;
.3937ab	85 28		sta $28		              STA OPL2_REG_REGION
.3937ad	20 7f 3f	jsr $393f7f	              JSR OPL2_GET_REG_OFFSET
.3937b0	e2 20		sep #$20	                SEP #$20        ; set A short
.3937b2	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3937b4	29 80		and #$80	              AND #$80
.3937b6	6b		rtl		              RTL
.3937b7					OPL2_GET_DEEPVIBRATO
.3937b7	48		pha		                PHA             ; begin setdp macro
.3937b8	08		php		                PHP
.3937b9	c2 20		rep #$20	                REP #$20        ; set A long
.3937bb	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3937be	5b		tcd		                TCD
.3937bf	28		plp		                PLP
.3937c0	68		pla		                PLA             ; end setdp macro
.3937c1	c2 20		rep #$20	                REP #$20        ; set A long
.3937c3	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3937c6	69 bd 00	adc #$00bd	              ADC #$00BD
.3937c9	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3937cb	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3937ce	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3937d0	e2 20		sep #$20	                SEP #$20        ; set A short
.3937d2	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3937d4	29 40		and #$40	              AND #$40
.3937d6	6b		rtl		              RTL
.3937d7					OPL2_GET_PERCUSSION
.3937d7	48		pha		                PHA             ; begin setdp macro
.3937d8	08		php		                PHP
.3937d9	c2 20		rep #$20	                REP #$20        ; set A long
.3937db	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3937de	5b		tcd		                TCD
.3937df	28		plp		                PLP
.3937e0	68		pla		                PLA             ; end setdp macro
.3937e1	c2 20		rep #$20	                REP #$20        ; set A long
.3937e3	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3937e6	69 bd 00	adc #$00bd	              ADC #$00BD
.3937e9	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3937eb	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3937ee	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3937f0	e2 20		sep #$20	                SEP #$20        ; set A short
.3937f2	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3937f4	29 20		and #$20	              AND #$20
.3937f6	6b		rtl		              RTL
.3937f7					OPL2_GET_DRUMS
.3937f7	48		pha		                PHA             ; begin setdp macro
.3937f8	08		php		                PHP
.3937f9	c2 20		rep #$20	                REP #$20        ; set A long
.3937fb	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3937fe	5b		tcd		                TCD
.3937ff	28		plp		                PLP
.393800	68		pla		                PLA             ; end setdp macro
.393801	c2 20		rep #$20	                REP #$20        ; set A long
.393803	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393806	69 bd 00	adc #$00bd	              ADC #$00BD
.393809	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39380b	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.39380e	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393810	e2 20		sep #$20	                SEP #$20        ; set A short
.393812	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393814	29 1f		and #$1f	              AND #$1F
.393816	6b		rtl		              RTL
.393817					OPL2_Get_WaveForm
.393817	6b		rtl		                RTL
.393818					OPL2_PLAYNOTE
.393818	48		pha		                PHA             ; begin setdp macro
.393819	08		php		                PHP
.39381a	c2 20		rep #$20	                REP #$20        ; set A long
.39381c	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39381f	5b		tcd		                TCD
.393820	28		plp		                PLP
.393821	68		pla		                PLA             ; end setdp macro
.393822	e2 20		sep #$20	                SEP #$20        ; set A short
.393824	da		phx		                PHX
.393825	a9 00		lda #$00	                LDA #$00
.393827	85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.393829	20 00 3e	jsr $393e00	                JSR OPL2_SET_KEYON
.39382c	20 c5 3d	jsr $393dc5	                JSR OPL2_SET_BLOCK  ; OPL2_SET_BLOCK Already to OPL2_OCTAVE
.39382f	e2 10		sep #$10	                SEP #$10        ; set X short
.393831	a5 30		lda $30		                LDA OPL2_NOTE
.393833	3a		dec a		                DEC A
.393834	0a		asl a		                ASL A
.393835	aa		tax		                TAX
.393836	bf af 15 39	lda $3915af,x	                LDA @lnoteFNumbers,X
.39383a	85 32		sta $32		                STA OPL2_PARAMETER0 ; Store the 8it in Param OPL2_PARAMETER0
.39383c	e8		inx		                INX
.39383d	bf af 15 39	lda $3915af,x	                LDA @lnoteFNumbers,X
.393841	85 33		sta $33		                STA OPL2_PARAMETER1 ; Store the 8bit in Param OPL2_PARAMETER1
.393843	22 43 3d 39	jsl $393d43	                JSL OPL2_SET_FNUMBER
.393847	a9 01		lda #$01	                LDA #$01
.393849	85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.39384b	20 00 3e	jsr $393e00	                JSR OPL2_SET_KEYON
.39384e	c2 10		rep #$10	                REP #$10        ; set X long
.393850	fa		plx		                PLX
.393851	6b		rtl		                RTL
.393852					OPL2_PLAYDRUM
.393852	6b		rtl		                RTL
.393853					OPL2_SET_INSTRUMENT
.393853	48		pha		                PHA             ; begin setdp macro
.393854	08		php		                PHP
.393855	c2 20		rep #$20	                REP #$20        ; set A long
.393857	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39385a	5b		tcd		                TCD
.39385b	28		plp		                PLP
.39385c	68		pla		                PLA             ; end setdp macro
.39385d	38		sec		              SEC ; Set the WaveFormSelect to True
.39385e	22 41 3a 39	jsl $393a41	              JSL OPL2_SET_WAVEFORMSELECT;
.393862	e2 20		sep #$20	                SEP #$20        ; set A short
.393864	c2 10		rep #$10	                REP #$10        ; set X long
.393866	a0 00 00	ldy #$0000	              LDY #$0000
.393869	a2 00 00	ldx #$0000	              LDX #$0000
.39386c	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO],Y ; Pointer Location 0 in Instrument Profile
.39386e	85 35		sta $35		              STA OPL2_PARAMETER3
.393870	c8		iny		              INY
.393871	c9 06		cmp #$06	              CMP #$06
.393873	d0 03		bne $393878	              BNE PERCUSSION_NEXT07
.393875	82 70 01	brl $3939e8	              BRL Percussion_6
.393878					PERCUSSION_NEXT07
.393878	c9 07		cmp #$07	              CMP #$07
.39387a	d0 03		bne $39387f	              BNE PERCUSSION_NEXT08
.39387c	82 44 01	brl $3939c3	              BRL Percussion_7
.39387f					PERCUSSION_NEXT08
.39387f	c9 08		cmp #$08	              CMP #$08
.393881	d0 03		bne $393886	              BNE PERCUSSION_NEXT09
.393883	82 18 01	brl $39399e	              BRL Percussion_8
.393886					PERCUSSION_NEXT09
.393886	c9 09		cmp #$09	              CMP #$09
.393888	d0 03		bne $39388d	              BNE PERCUSSION_NEXT0A
.39388a	82 ec 00	brl $393979	              BRL Percussion_9
.39388d					PERCUSSION_NEXT0A
.39388d	c9 0a		cmp #$0a	              CMP #$0A
.39388f	d0 03		bne $393894	              BNE Percussion_Default
.393891	82 c0 00	brl $393954	              BRL Percussion_A
.393894					Percussion_Default
.393894	a9 00		lda #$00	              LDA #$00
.393896	85 26		sta $26		              STA OPL2_OPERATOR
.393898	c2 20		rep #$20	                REP #$20        ; set A long
.39389a	a9 20 00	lda #$0020	              LDA #$0020;
.39389d	85 28		sta $28		              STA OPL2_REG_REGION
.39389f	20 7f 3f	jsr $393f7f	              JSR OPL2_GET_REG_OFFSET
.3938a2	e2 20		sep #$20	                SEP #$20        ; set A short
.3938a4	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.3938a6	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3938a8	c8		iny		              INY
.3938a9	c2 20		rep #$20	                REP #$20        ; set A long
.3938ab	a9 40 00	lda #$0040	              LDA #$0040;
.3938ae	85 28		sta $28		              STA OPL2_REG_REGION
.3938b0	20 7f 3f	jsr $393f7f	              JSR OPL2_GET_REG_OFFSET
.3938b3	e2 20		sep #$20	                SEP #$20        ; set A short
.3938b5	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.3938b7	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3938b9	c8		iny		              INY
.3938ba	c2 20		rep #$20	                REP #$20        ; set A long
.3938bc	a9 60 00	lda #$0060	              LDA #$0060;
.3938bf	85 28		sta $28		              STA OPL2_REG_REGION
.3938c1	20 7f 3f	jsr $393f7f	              JSR OPL2_GET_REG_OFFSET
.3938c4	e2 20		sep #$20	                SEP #$20        ; set A short
.3938c6	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.3938c8	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3938ca	c8		iny		              INY
.3938cb	c2 20		rep #$20	                REP #$20        ; set A long
.3938cd	a9 80 00	lda #$0080	              LDA #$0080;
.3938d0	85 28		sta $28		              STA OPL2_REG_REGION
.3938d2	20 7f 3f	jsr $393f7f	              JSR OPL2_GET_REG_OFFSET
.3938d5	e2 20		sep #$20	                SEP #$20        ; set A short
.3938d7	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.3938d9	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3938db	c8		iny		              INY
.3938dc	c2 20		rep #$20	                REP #$20        ; set A long
.3938de	a9 e0 00	lda #$00e0	              LDA #$00E0;
.3938e1	85 28		sta $28		              STA OPL2_REG_REGION
.3938e3	20 7f 3f	jsr $393f7f	              JSR OPL2_GET_REG_OFFSET
.3938e6	e2 20		sep #$20	                SEP #$20        ; set A short
.3938e8	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.3938ea	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3938ec	c8		iny		              INY
.3938ed	e2 10		sep #$10	                SEP #$10        ; set X short
.3938ef	a5 27		lda $27		              LDA OPL2_CHANNEL
.3938f1	29 0f		and #$0f	              AND #$0F
.3938f3	aa		tax		              TAX
.3938f4	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 6 in Instrument Profile
.3938f6	9f c0 e6 af	sta $afe6c0,x	              STA @lOPL3_R_FEEDBACK,X
.3938fa	c8		iny		              INY
.3938fb	a9 01		lda #$01	              LDA #$01
.3938fd	85 26		sta $26		              STA OPL2_OPERATOR
.3938ff	c2 20		rep #$20	                REP #$20        ; set A long
.393901	a9 20 00	lda #$0020	              LDA #$0020;
.393904	85 28		sta $28		              STA OPL2_REG_REGION
.393906	20 7f 3f	jsr $393f7f	              JSR OPL2_GET_REG_OFFSET
.393909	e2 20		sep #$20	                SEP #$20        ; set A short
.39390b	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 7 in Instrument Profile
.39390d	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39390f	c8		iny		              INY
.393910	c2 20		rep #$20	                REP #$20        ; set A long
.393912	a9 40 00	lda #$0040	              LDA #$0040;
.393915	85 28		sta $28		              STA OPL2_REG_REGION
.393917	20 7f 3f	jsr $393f7f	              JSR OPL2_GET_REG_OFFSET
.39391a	e2 20		sep #$20	                SEP #$20        ; set A short
.39391c	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 8 in Instrument Profile
.39391e	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393920	c8		iny		              INY
.393921	c2 20		rep #$20	                REP #$20        ; set A long
.393923	a9 60 00	lda #$0060	              LDA #$0060;
.393926	85 28		sta $28		              STA OPL2_REG_REGION
.393928	20 7f 3f	jsr $393f7f	              JSR OPL2_GET_REG_OFFSET
.39392b	e2 20		sep #$20	                SEP #$20        ; set A short
.39392d	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 9 in Instrument Profile
.39392f	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393931	c8		iny		              INY
.393932	c2 20		rep #$20	                REP #$20        ; set A long
.393934	a9 80 00	lda #$0080	              LDA #$0080;
.393937	85 28		sta $28		              STA OPL2_REG_REGION
.393939	20 7f 3f	jsr $393f7f	              JSR OPL2_GET_REG_OFFSET
.39393c	e2 20		sep #$20	                SEP #$20        ; set A short
.39393e	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location A in Instrument Profile
.393940	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393942	c8		iny		              INY
.393943	c2 20		rep #$20	                REP #$20        ; set A long
.393945	a9 e0 00	lda #$00e0	              LDA #$00E0;
.393948	85 28		sta $28		              STA OPL2_REG_REGION
.39394a	20 7f 3f	jsr $393f7f	              JSR OPL2_GET_REG_OFFSET
.39394d	e2 20		sep #$20	                SEP #$20        ; set A short
.39394f	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location B in Instrument Profile
.393951	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393953	6b		rtl		                RTL
.393954					Percussion_A
.393954	e2 20		sep #$20	                SEP #$20        ; set A short
.393956	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393958	8f 31 e6 af	sta $afe631	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $11
.39395c	c8		iny		              INY
.39395d	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.39395f	8f 51 e6 af	sta $afe651	              STA @lOPL3_R_KSL_TL + $11
.393963	c8		iny		              INY
.393964	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393966	8f 71 e6 af	sta $afe671	              STA @lOPL3_R_AR_DR + $11
.39396a	c8		iny		              INY
.39396b	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.39396d	8f 91 e6 af	sta $afe691	              STA @lOPL3_R_SL_RR + $11
.393971	c8		iny		              INY
.393972	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393974	8f f1 e6 af	sta $afe6f1	              STA @lOPL3_R_WAVE_SELECT + $11
.393978	6b		rtl		                RTL
.393979					Percussion_9
.393979	e2 20		sep #$20	                SEP #$20        ; set A short
.39397b	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.39397d	8f 35 e6 af	sta $afe635	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $15
.393981	c8		iny		              INY
.393982	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393984	8f 55 e6 af	sta $afe655	              STA @lOPL3_R_KSL_TL + $15
.393988	c8		iny		              INY
.393989	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.39398b	8f 75 e6 af	sta $afe675	              STA @lOPL3_R_AR_DR + $15
.39398f	c8		iny		              INY
.393990	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393992	8f 95 e6 af	sta $afe695	              STA @lOPL3_R_SL_RR + $15
.393996	c8		iny		              INY
.393997	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393999	8f f5 e6 af	sta $afe6f5	              STA @lOPL3_R_WAVE_SELECT + $15
.39399d	6b		rtl		              RTL
.39399e					Percussion_8
.39399e	e2 20		sep #$20	                SEP #$20        ; set A short
.3939a0	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.3939a2	8f 32 e6 af	sta $afe632	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $12
.3939a6	c8		iny		              INY
.3939a7	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.3939a9	8f 52 e6 af	sta $afe652	              STA @lOPL3_R_KSL_TL + $12
.3939ad	c8		iny		              INY
.3939ae	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.3939b0	8f 72 e6 af	sta $afe672	              STA @lOPL3_R_AR_DR + $12
.3939b4	c8		iny		              INY
.3939b5	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.3939b7	8f 92 e6 af	sta $afe692	              STA @lOPL3_R_SL_RR + $12
.3939bb	c8		iny		              INY
.3939bc	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.3939be	8f f2 e6 af	sta $afe6f2	              STA @lOPL3_R_WAVE_SELECT + $12
.3939c2	6b		rtl		              RTL
.3939c3					Percussion_7
.3939c3	e2 20		sep #$20	                SEP #$20        ; set A short
.3939c5	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.3939c7	8f 34 e6 af	sta $afe634	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $14
.3939cb	c8		iny		              INY
.3939cc	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.3939ce	8f 54 e6 af	sta $afe654	              STA @lOPL3_R_KSL_TL + $14
.3939d2	c8		iny		              INY
.3939d3	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.3939d5	8f 74 e6 af	sta $afe674	              STA @lOPL3_R_AR_DR + $14
.3939d9	c8		iny		              INY
.3939da	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.3939dc	8f 94 e6 af	sta $afe694	              STA @lOPL3_R_SL_RR + $14
.3939e0	c8		iny		              INY
.3939e1	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.3939e3	8f f4 e6 af	sta $afe6f4	              STA @lOPL3_R_WAVE_SELECT + $14
.3939e7	6b		rtl		              RTL
.3939e8					Percussion_6
.3939e8	e2 20		sep #$20	                SEP #$20        ; set A short
.3939ea	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.3939ec	8f 30 e6 af	sta $afe630	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $10
.3939f0	8f 33 e6 af	sta $afe633	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $13
.3939f4	c8		iny		              INY
.3939f5	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.3939f7	8f 50 e6 af	sta $afe650	              STA @lOPL3_R_KSL_TL + $10
.3939fb	8f 53 e6 af	sta $afe653	              STA @lOPL3_R_KSL_TL + $13
.3939ff	c8		iny		              INY
.393a00	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393a02	8f 70 e6 af	sta $afe670	              STA @lOPL3_R_AR_DR + $10
.393a06	8f 73 e6 af	sta $afe673	              STA @lOPL3_R_AR_DR + $13
.393a0a	c8		iny		              INY
.393a0b	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393a0d	8f 90 e6 af	sta $afe690	              STA @lOPL3_R_SL_RR + $10
.393a11	8f 93 e6 af	sta $afe693	              STA @lOPL3_R_SL_RR + $13
.393a15	c8		iny		              INY
.393a16	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393a18	8f f0 e6 af	sta $afe6f0	              STA @lOPL3_R_WAVE_SELECT + $10
.393a1c	8f f3 e6 af	sta $afe6f3	              STA @lOPL3_R_WAVE_SELECT + $13
.393a20	6b		rtl		              RTL
.393a21					OPL2_SET_REGISTER
.393a21	48		pha		                PHA             ; begin setdp macro
.393a22	08		php		                PHP
.393a23	c2 20		rep #$20	                REP #$20        ; set A long
.393a25	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393a28	5b		tcd		                TCD
.393a29	28		plp		                PLP
.393a2a	68		pla		                PLA             ; end setdp macro
.393a2b	c2 20		rep #$20	                REP #$20        ; set A long
.393a2d	18		clc		              CLC
.393a2e	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393a31	65 32		adc $32		              ADC OPL2_PARAMETER0
.393a33	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393a35	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393a38	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393a3a	e2 20		sep #$20	                SEP #$20        ; set A short
.393a3c	a5 33		lda $33		              LDA OPL2_PARAMETER1
.393a3e	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a40	6b		rtl		              RTL
.393a41					OPL2_SET_WAVEFORMSELECT
.393a41	48		pha		                PHA             ; begin setdp macro
.393a42	08		php		                PHP
.393a43	c2 20		rep #$20	                REP #$20        ; set A long
.393a45	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393a48	5b		tcd		                TCD
.393a49	28		plp		                PLP
.393a4a	68		pla		                PLA             ; end setdp macro
.393a4b	c2 20		rep #$20	                REP #$20        ; set A long
.393a4d	a9 01 e6	lda #$e601	              LDA #<>OPL3_R_BASE + $0001
.393a50	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393a52	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393a55	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393a57	e2 20		sep #$20	                SEP #$20        ; set A short
.393a59	b0 07		bcs $393a62	              BCS OPL2_Set_WaveFormSelect_set
.393a5b	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393a5d	29 df		and #$df	              AND #$DF
.393a5f	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a61	6b		rtl		              RTL
.393a62					OPL2_Set_WaveFormSelect_set
.393a62	48		pha		                PHA             ; begin setdp macro
.393a63	08		php		                PHP
.393a64	c2 20		rep #$20	                REP #$20        ; set A long
.393a66	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393a69	5b		tcd		                TCD
.393a6a	28		plp		                PLP
.393a6b	68		pla		                PLA             ; end setdp macro
.393a6c	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393a6e	09 20 00	ora #$0020	              ORA #$20
.393a71	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a73	6b		rtl		                RTL
.393a74					OPL2_SET_TREMOLO
.393a74	48		pha		                PHA             ; begin setdp macro
.393a75	08		php		                PHP
.393a76	c2 20		rep #$20	                REP #$20        ; set A long
.393a78	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393a7b	5b		tcd		                TCD
.393a7c	28		plp		                PLP
.393a7d	68		pla		                PLA             ; end setdp macro
.393a7e	08		php		                PHP ; Push the Carry
.393a7f	c2 20		rep #$20	                REP #$20        ; set A long
.393a81	18		clc		                CLC
.393a82	a9 20 00	lda #$0020	                LDA #$0020 ;
.393a85	85 28		sta $28		                STA OPL2_REG_REGION
.393a87	20 7f 3f	jsr $393f7f	                JSR OPL2_GET_REG_OFFSET
.393a8a	28		plp		                PLP ; Pull the Carry out
.393a8b	e2 20		sep #$20	                SEP #$20        ; set A short
.393a8d	b0 08		bcs $393a97	                BCS OPL2_Set_Tremolo_Set;
.393a8f	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393a91	29 7f		and #$7f	                AND #$7F
.393a93	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393a95	80 06		bra $393a9d	                BRA OPL2_Set_Tremolo_Exit
.393a97					OPL2_Set_Tremolo_Set
.393a97	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393a99	09 80		ora #$80	                ORA #$80
.393a9b	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393a9d					OPL2_Set_Tremolo_Exit
.393a9d	6b		rtl		                RTL
.393a9e					OPL2_GET_TREMOLO
.393a9e	48		pha		                PHA             ; begin setdp macro
.393a9f	08		php		                PHP
.393aa0	c2 20		rep #$20	                REP #$20        ; set A long
.393aa2	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393aa5	5b		tcd		                TCD
.393aa6	28		plp		                PLP
.393aa7	68		pla		                PLA             ; end setdp macro
.393aa8	c2 20		rep #$20	                REP #$20        ; set A long
.393aaa	a9 20 00	lda #$0020	                LDA #$0020;
.393aad	85 28		sta $28		                STA OPL2_REG_REGION
.393aaf	20 7f 3f	jsr $393f7f	                JSR OPL2_GET_REG_OFFSET
.393ab2	e2 20		sep #$20	                SEP #$20        ; set A short
.393ab4	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393ab6	29 80		and #$80	                AND #$80
.393ab8	6b		rtl		                RTL
.393ab9					OPL2_SET_VIBRATO
.393ab9	48		pha		                PHA             ; begin setdp macro
.393aba	08		php		                PHP
.393abb	c2 20		rep #$20	                REP #$20        ; set A long
.393abd	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393ac0	5b		tcd		                TCD
.393ac1	28		plp		                PLP
.393ac2	68		pla		                PLA             ; end setdp macro
.393ac3	08		php		                PHP ; Push the Carry
.393ac4	c2 20		rep #$20	                REP #$20        ; set A long
.393ac6	18		clc		                CLC
.393ac7	a9 20 00	lda #$0020	                LDA #$0020;
.393aca	85 28		sta $28		                STA OPL2_REG_REGION
.393acc	20 7f 3f	jsr $393f7f	                JSR OPL2_GET_REG_OFFSET
.393acf	28		plp		                PLP ; Pull the Carry out
.393ad0	e2 20		sep #$20	                SEP #$20        ; set A short
.393ad2	b0 08		bcs $393adc	                BCS OPL2_Set_Vibrato_Set;
.393ad4	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393ad6	29 bf		and #$bf	                AND #$BF
.393ad8	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393ada	80 06		bra $393ae2	                BRA OPL2_Set_Vibrato_Exit
.393adc					OPL2_Set_Vibrato_Set
.393adc	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393ade	09 40		ora #$40	                ORA #$40
.393ae0	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393ae2					OPL2_Set_Vibrato_Exit
.393ae2	6b		rtl		                RTL
.393ae3					OPL2_GET_VIBRATO
.393ae3	48		pha		                PHA             ; begin setdp macro
.393ae4	08		php		                PHP
.393ae5	c2 20		rep #$20	                REP #$20        ; set A long
.393ae7	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393aea	5b		tcd		                TCD
.393aeb	28		plp		                PLP
.393aec	68		pla		                PLA             ; end setdp macro
.393aed	c2 20		rep #$20	                REP #$20        ; set A long
.393aef	a9 20 00	lda #$0020	                LDA #$0020;
.393af2	85 28		sta $28		                STA OPL2_REG_REGION
.393af4	20 7f 3f	jsr $393f7f	                JSR OPL2_GET_REG_OFFSET
.393af7	e2 20		sep #$20	                SEP #$20        ; set A short
.393af9	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393afb	29 40		and #$40	                AND #$40
.393afd	6b		rtl		                RTL
.393afe					OPL2_SET_MAINTAINSUSTAIN
.393afe	48		pha		                PHA             ; begin setdp macro
.393aff	08		php		                PHP
.393b00	c2 20		rep #$20	                REP #$20        ; set A long
.393b02	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b05	5b		tcd		                TCD
.393b06	28		plp		                PLP
.393b07	68		pla		                PLA             ; end setdp macro
.393b08	08		php		              PHP ; Push the Carry
.393b09	c2 20		rep #$20	                REP #$20        ; set A long
.393b0b	18		clc		              CLC
.393b0c	a9 20 00	lda #$0020	              LDA #$0020;
.393b0f	85 28		sta $28		              STA OPL2_REG_REGION
.393b11	20 7f 3f	jsr $393f7f	              JSR OPL2_GET_REG_OFFSET
.393b14	28		plp		              PLP ; Pull the Carry out
.393b15	e2 20		sep #$20	                SEP #$20        ; set A short
.393b17	b0 08		bcs $393b21	              BCS OPL2_Set_MaintainSustain_Set;
.393b19	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393b1b	29 df		and #$df	              AND #$DF
.393b1d	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393b1f	80 06		bra $393b27	              BRA OPL2_Set_MaintainSustain_Exit
.393b21					OPL2_Set_MaintainSustain_Set
.393b21	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393b23	09 20		ora #$20	              ORA #$20
.393b25	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393b27					OPL2_Set_MaintainSustain_Exit
.393b27	6b		rtl		                RTL
.393b28					OPL2_GET_MAINTAINSUSTAIN
.393b28	48		pha		                PHA             ; begin setdp macro
.393b29	08		php		                PHP
.393b2a	c2 20		rep #$20	                REP #$20        ; set A long
.393b2c	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b2f	5b		tcd		                TCD
.393b30	28		plp		                PLP
.393b31	68		pla		                PLA             ; end setdp macro
.393b32	c2 20		rep #$20	                REP #$20        ; set A long
.393b34	a9 20 00	lda #$0020	              LDA #$0020;
.393b37	85 28		sta $28		              STA OPL2_REG_REGION
.393b39	20 7f 3f	jsr $393f7f	              JSR OPL2_GET_REG_OFFSET
.393b3c	e2 20		sep #$20	                SEP #$20        ; set A short
.393b3e	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393b40	29 20		and #$20	              AND #$20
.393b42	6b		rtl		                RTL
.393b43					OPL2_SET_ENVELOPESCALING
.393b43	48		pha		                PHA             ; begin setdp macro
.393b44	08		php		                PHP
.393b45	c2 20		rep #$20	                REP #$20        ; set A long
.393b47	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b4a	5b		tcd		                TCD
.393b4b	28		plp		                PLP
.393b4c	68		pla		                PLA             ; end setdp macro
.393b4d	08		php		              PHP ; Push the Carry
.393b4e	c2 20		rep #$20	                REP #$20        ; set A long
.393b50	18		clc		              CLC
.393b51	a9 20 00	lda #$0020	              LDA #$0020;
.393b54	85 28		sta $28		              STA OPL2_REG_REGION
.393b56	20 7f 3f	jsr $393f7f	              JSR OPL2_GET_REG_OFFSET
.393b59	28		plp		              PLP ; Pull the Carry out
.393b5a	e2 20		sep #$20	                SEP #$20        ; set A short
.393b5c	b0 08		bcs $393b66	              BCS OPL2_Set_EnvelopeScaling_Set;
.393b5e	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393b60	29 ef		and #$ef	              AND #$EF
.393b62	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393b64	80 06		bra $393b6c	              BRA OPL2_Set_EnvelopeScaling_Exit
.393b66					OPL2_Set_EnvelopeScaling_Set
.393b66	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393b68	09 10		ora #$10	              ORA #$10
.393b6a	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393b6c					OPL2_Set_EnvelopeScaling_Exit
.393b6c	6b		rtl		                RTL
.393b6d					OPL2_GET_ENVELOPESCALING
.393b6d	48		pha		                PHA             ; begin setdp macro
.393b6e	08		php		                PHP
.393b6f	c2 20		rep #$20	                REP #$20        ; set A long
.393b71	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b74	5b		tcd		                TCD
.393b75	28		plp		                PLP
.393b76	68		pla		                PLA             ; end setdp macro
.393b77	c2 20		rep #$20	                REP #$20        ; set A long
.393b79	a9 20 00	lda #$0020	              LDA #$0020;
.393b7c	85 28		sta $28		              STA OPL2_REG_REGION
.393b7e	20 7f 3f	jsr $393f7f	              JSR OPL2_GET_REG_OFFSET
.393b81	e2 20		sep #$20	                SEP #$20        ; set A short
.393b83	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393b85	29 10		and #$10	              AND #$10
.393b87	6b		rtl		                RTL
.393b88					OPL2_GET_MODFREQMULTIPLE
.393b88	48		pha		                PHA             ; begin setdp macro
.393b89	08		php		                PHP
.393b8a	c2 20		rep #$20	                REP #$20        ; set A long
.393b8c	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b8f	5b		tcd		                TCD
.393b90	28		plp		                PLP
.393b91	68		pla		                PLA             ; end setdp macro
.393b92	c2 20		rep #$20	                REP #$20        ; set A long
.393b94	a9 20 00	lda #$0020	              LDA #$0020;
.393b97	85 28		sta $28		              STA OPL2_REG_REGION
.393b99	20 7f 3f	jsr $393f7f	              JSR OPL2_GET_REG_OFFSET
.393b9c	e2 20		sep #$20	                SEP #$20        ; set A short
.393b9e	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393ba0	29 0f		and #$0f	              AND #$0F
.393ba2	6b		rtl		              RTL
.393ba3					OPL2_SET_MODFREQMULTIPLE
.393ba3	48		pha		                PHA             ; begin setdp macro
.393ba4	08		php		                PHP
.393ba5	c2 20		rep #$20	                REP #$20        ; set A long
.393ba7	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393baa	5b		tcd		                TCD
.393bab	28		plp		                PLP
.393bac	68		pla		                PLA             ; end setdp macro
.393bad	c2 20		rep #$20	                REP #$20        ; set A long
.393baf	a9 20 00	lda #$0020	                LDA #$0020;
.393bb2	85 28		sta $28		                STA OPL2_REG_REGION
.393bb4	20 7f 3f	jsr $393f7f	                JSR OPL2_GET_REG_OFFSET
.393bb7	e2 20		sep #$20	                SEP #$20        ; set A short
.393bb9	a5 32		lda $32		                LDA OPL2_PARAMETER0
.393bbb	29 0f		and #$0f	                AND #$0F
.393bbd	85 32		sta $32		                STA OPL2_PARAMETER0
.393bbf	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393bc1	29 f0		and #$f0	                AND #$F0
.393bc3	05 32		ora $32		                ORA OPL2_PARAMETER0
.393bc5	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393bc7	6b		rtl		                RTL
.393bc8					OPL2_SET_SCALINGLEVEL
.393bc8	48		pha		                PHA             ; begin setdp macro
.393bc9	08		php		                PHP
.393bca	c2 20		rep #$20	                REP #$20        ; set A long
.393bcc	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393bcf	5b		tcd		                TCD
.393bd0	28		plp		                PLP
.393bd1	68		pla		                PLA             ; end setdp macro
.393bd2	c2 20		rep #$20	                REP #$20        ; set A long
.393bd4	a9 40 00	lda #$0040	                LDA #$0040;
.393bd7	85 28		sta $28		                STA OPL2_REG_REGION
.393bd9	20 7f 3f	jsr $393f7f	                JSR OPL2_GET_REG_OFFSET
.393bdc	e2 20		sep #$20	                SEP #$20        ; set A short
.393bde	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393be0	29 03		and #$03	                AND #$03
.393be2	0a		asl a		                ASL
.393be3	0a		asl a		                ASL
.393be4	0a		asl a		                ASL
.393be5	0a		asl a		                ASL
.393be6	0a		asl a		                ASL
.393be7	0a		asl a		                ASL
.393be8	85 32		sta $32		                STA OPL2_PARAMETER0
.393bea	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393bec	29 3f		and #$3f	                AND #$3F
.393bee	05 32		ora $32		                ORA OPL2_PARAMETER0
.393bf0	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393bf2	6b		rtl		                RTL
.393bf3					OPL2_SET_VOLUME
.393bf3	48		pha		                PHA             ; begin setdp macro
.393bf4	08		php		                PHP
.393bf5	c2 20		rep #$20	                REP #$20        ; set A long
.393bf7	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393bfa	5b		tcd		                TCD
.393bfb	28		plp		                PLP
.393bfc	68		pla		                PLA             ; end setdp macro
.393bfd	c2 20		rep #$20	                REP #$20        ; set A long
.393bff	a9 40 00	lda #$0040	                LDA #$0040  ;
.393c02	85 28		sta $28		                STA OPL2_REG_REGION
.393c04	20 7f 3f	jsr $393f7f	                JSR OPL2_GET_REG_OFFSET
.393c07	e2 20		sep #$20	                SEP #$20        ; set A short
.393c09	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Volume
.393c0b	29 3f		and #$3f	                AND #$3F
.393c0d	85 32		sta $32		                STA OPL2_PARAMETER0
.393c0f	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393c11	29 c0		and #$c0	                AND #$C0
.393c13	05 32		ora $32		                ORA OPL2_PARAMETER0
.393c15	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393c17	6b		rtl		                RTL
.393c18					OPL2_GET_VOLUME
.393c18	48		pha		                PHA             ; begin setdp macro
.393c19	08		php		                PHP
.393c1a	c2 20		rep #$20	                REP #$20        ; set A long
.393c1c	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c1f	5b		tcd		                TCD
.393c20	28		plp		                PLP
.393c21	68		pla		                PLA             ; end setdp macro
.393c22	c2 20		rep #$20	                REP #$20        ; set A long
.393c24	a9 40 00	lda #$0040	                LDA #$0040  ;
.393c27	85 28		sta $28		                STA OPL2_REG_REGION
.393c29	20 7f 3f	jsr $393f7f	                JSR OPL2_GET_REG_OFFSET
.393c2c	e2 20		sep #$20	                SEP #$20        ; set A short
.393c2e	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393c30	29 3f		and #$3f	                AND #$3F
.393c32	6b		rtl		                RTL
.393c33					OPL2_SET_ATTACK
.393c33	48		pha		                PHA             ; begin setdp macro
.393c34	08		php		                PHP
.393c35	c2 20		rep #$20	                REP #$20        ; set A long
.393c37	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c3a	5b		tcd		                TCD
.393c3b	28		plp		                PLP
.393c3c	68		pla		                PLA             ; end setdp macro
.393c3d	c2 20		rep #$20	                REP #$20        ; set A long
.393c3f	a9 60 00	lda #$0060	                LDA #$0060  ;
.393c42	85 28		sta $28		                STA OPL2_REG_REGION
.393c44	20 7f 3f	jsr $393f7f	                JSR OPL2_GET_REG_OFFSET
.393c47	e2 20		sep #$20	                SEP #$20        ; set A short
.393c49	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393c4b	29 0f		and #$0f	                AND #$0F
.393c4d	0a		asl a		                ASL
.393c4e	0a		asl a		                ASL
.393c4f	0a		asl a		                ASL
.393c50	0a		asl a		                ASL
.393c51	85 32		sta $32		                STA OPL2_PARAMETER0
.393c53	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393c55	29 0f		and #$0f	                AND #$0F
.393c57	05 32		ora $32		                ORA OPL2_PARAMETER0
.393c59	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393c5b	6b		rtl		                RTL
.393c5c					OPL2_GET_ATTACK
.393c5c	48		pha		                PHA             ; begin setdp macro
.393c5d	08		php		                PHP
.393c5e	c2 20		rep #$20	                REP #$20        ; set A long
.393c60	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c63	5b		tcd		                TCD
.393c64	28		plp		                PLP
.393c65	68		pla		                PLA             ; end setdp macro
.393c66	c2 20		rep #$20	                REP #$20        ; set A long
.393c68	a9 60 00	lda #$0060	                LDA #$0060
.393c6b	85 28		sta $28		                STA OPL2_REG_REGION
.393c6d	20 7f 3f	jsr $393f7f	                JSR OPL2_GET_REG_OFFSET
.393c70	e2 20		sep #$20	                SEP #$20        ; set A short
.393c72	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393c74	29 f0		and #$f0	                AND #$F0
.393c76	4a		lsr a		                LSR
.393c77	4a		lsr a		                LSR
.393c78	4a		lsr a		                LSR
.393c79	4a		lsr a		                LSR
.393c7a	6b		rtl		                RTL
.393c7b					OPL2_SET_DECAY
.393c7b	48		pha		                PHA             ; begin setdp macro
.393c7c	08		php		                PHP
.393c7d	c2 20		rep #$20	                REP #$20        ; set A long
.393c7f	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c82	5b		tcd		                TCD
.393c83	28		plp		                PLP
.393c84	68		pla		                PLA             ; end setdp macro
.393c85	c2 20		rep #$20	                REP #$20        ; set A long
.393c87	a9 60 00	lda #$0060	                LDA #$0060;
.393c8a	85 28		sta $28		                STA OPL2_REG_REGION
.393c8c	20 7f 3f	jsr $393f7f	                JSR OPL2_GET_REG_OFFSET
.393c8f	e2 20		sep #$20	                SEP #$20        ; set A short
.393c91	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393c93	29 0f		and #$0f	                AND #$0F
.393c95	85 32		sta $32		                STA OPL2_PARAMETER0
.393c97	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393c99	29 f0		and #$f0	                AND #$F0
.393c9b	05 32		ora $32		                ORA OPL2_PARAMETER0
.393c9d	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393c9f	6b		rtl		                RTL
.393ca0					OPL2_GET_DECAY
.393ca0	48		pha		                PHA             ; begin setdp macro
.393ca1	08		php		                PHP
.393ca2	c2 20		rep #$20	                REP #$20        ; set A long
.393ca4	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393ca7	5b		tcd		                TCD
.393ca8	28		plp		                PLP
.393ca9	68		pla		                PLA             ; end setdp macro
.393caa	c2 20		rep #$20	                REP #$20        ; set A long
.393cac	a9 60 00	lda #$0060	                LDA #$0060
.393caf	85 28		sta $28		                STA OPL2_REG_REGION
.393cb1	20 7f 3f	jsr $393f7f	                JSR OPL2_GET_REG_OFFSET
.393cb4	e2 20		sep #$20	                SEP #$20        ; set A short
.393cb6	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393cb8	29 0f		and #$0f	                AND #$0F
.393cba	6b		rtl		                RTL
.393cbb					OPL2_SET_SUSTAIN
.393cbb	48		pha		                PHA             ; begin setdp macro
.393cbc	08		php		                PHP
.393cbd	c2 20		rep #$20	                REP #$20        ; set A long
.393cbf	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393cc2	5b		tcd		                TCD
.393cc3	28		plp		                PLP
.393cc4	68		pla		                PLA             ; end setdp macro
.393cc5	c2 20		rep #$20	                REP #$20        ; set A long
.393cc7	a9 80 00	lda #$0080	                LDA #$0080;
.393cca	85 28		sta $28		                STA OPL2_REG_REGION
.393ccc	20 7f 3f	jsr $393f7f	                JSR OPL2_GET_REG_OFFSET
.393ccf	e2 20		sep #$20	                SEP #$20        ; set A short
.393cd1	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393cd3	29 0f		and #$0f	                AND #$0F
.393cd5	0a		asl a		                ASL
.393cd6	0a		asl a		                ASL
.393cd7	0a		asl a		                ASL
.393cd8	0a		asl a		                ASL
.393cd9	85 32		sta $32		                STA OPL2_PARAMETER0
.393cdb	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393cdd	29 0f		and #$0f	                AND #$0F
.393cdf	05 32		ora $32		                ORA OPL2_PARAMETER0
.393ce1	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393ce3	6b		rtl		                RTL
.393ce4					OPL2_GET_SUSTAIN
.393ce4	48		pha		                PHA             ; begin setdp macro
.393ce5	08		php		                PHP
.393ce6	c2 20		rep #$20	                REP #$20        ; set A long
.393ce8	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393ceb	5b		tcd		                TCD
.393cec	28		plp		                PLP
.393ced	68		pla		                PLA             ; end setdp macro
.393cee	c2 20		rep #$20	                REP #$20        ; set A long
.393cf0	a9 80 00	lda #$0080	                LDA #$0080
.393cf3	85 28		sta $28		                STA OPL2_REG_REGION
.393cf5	20 7f 3f	jsr $393f7f	                JSR OPL2_GET_REG_OFFSET
.393cf8	e2 20		sep #$20	                SEP #$20        ; set A short
.393cfa	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393cfc	29 f0		and #$f0	                AND #$F0
.393cfe	4a		lsr a		                LSR
.393cff	4a		lsr a		                LSR
.393d00	4a		lsr a		                LSR
.393d01	4a		lsr a		                LSR
.393d02	6b		rtl		                RTL
.393d03					OPL2_SET_RELEASE
.393d03	48		pha		                PHA             ; begin setdp macro
.393d04	08		php		                PHP
.393d05	c2 20		rep #$20	                REP #$20        ; set A long
.393d07	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d0a	5b		tcd		                TCD
.393d0b	28		plp		                PLP
.393d0c	68		pla		                PLA             ; end setdp macro
.393d0d	c2 20		rep #$20	                REP #$20        ; set A long
.393d0f	a9 80 00	lda #$0080	                LDA #$0080;
.393d12	85 28		sta $28		                STA OPL2_REG_REGION
.393d14	20 7f 3f	jsr $393f7f	                JSR OPL2_GET_REG_OFFSET
.393d17	e2 20		sep #$20	                SEP #$20        ; set A short
.393d19	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393d1b	29 0f		and #$0f	                AND #$0F
.393d1d	85 32		sta $32		                STA OPL2_PARAMETER0
.393d1f	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d21	29 f0		and #$f0	                AND #$F0
.393d23	05 32		ora $32		                ORA OPL2_PARAMETER0
.393d25	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393d27	6b		rtl		                RTL
.393d28					OPL2_GET_RELEASE
.393d28	48		pha		                PHA             ; begin setdp macro
.393d29	08		php		                PHP
.393d2a	c2 20		rep #$20	                REP #$20        ; set A long
.393d2c	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d2f	5b		tcd		                TCD
.393d30	28		plp		                PLP
.393d31	68		pla		                PLA             ; end setdp macro
.393d32	c2 20		rep #$20	                REP #$20        ; set A long
.393d34	a9 80 00	lda #$0080	                LDA #$0080
.393d37	85 28		sta $28		                STA OPL2_REG_REGION
.393d39	20 7f 3f	jsr $393f7f	                JSR OPL2_GET_REG_OFFSET
.393d3c	e2 20		sep #$20	                SEP #$20        ; set A short
.393d3e	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d40	29 0f		and #$0f	                AND #$0F
.393d42	6b		rtl		                RTL
.393d43					OPL2_SET_FNUMBER
.393d43	48		pha		                PHA             ; begin setdp macro
.393d44	08		php		                PHP
.393d45	c2 20		rep #$20	                REP #$20        ; set A long
.393d47	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d4a	5b		tcd		                TCD
.393d4b	28		plp		                PLP
.393d4c	68		pla		                PLA             ; end setdp macro
.393d4d	e2 20		sep #$20	                SEP #$20        ; set A short
.393d4f	18		clc		                CLC
.393d50	a5 27		lda $27		                LDA OPL2_CHANNEL
.393d52	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393d54	69 a0		adc #$a0	                ADC #$A0
.393d56	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393d58	a9 00		lda #$00	                LDA #$00
.393d5a	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393d5c	c2 30		rep #$30	                REP #$30        ; set A&X long
.393d5e	18		clc		                CLC
.393d5f	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393d62	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393d64	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393d66	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393d69	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393d6b	e2 20		sep #$20	                SEP #$20        ; set A short
.393d6d	a5 32		lda $32		                LDA OPL2_PARAMETER0     ; Load the first 8 Bits Value of FNumber
.393d6f	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]  ; Load
.393d71	18		clc		                CLC
.393d72	a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.393d74	69 10		adc #$10	                ADC #$10
.393d76	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393d78	a5 33		lda $33		                LDA OPL2_PARAMETER1
.393d7a	29 03		and #$03	                AND #$03
.393d7c	85 33		sta $33		                STA OPL2_PARAMETER1
.393d7e	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d80	29 fc		and #$fc	                AND #$FC
.393d82	05 33		ora $33		                ORA OPL2_PARAMETER1
.393d84	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393d86	6b		rtl		                RTL
.393d87					OPL2_GET_FNUMBER
.393d87	48		pha		                PHA             ; begin setdp macro
.393d88	08		php		                PHP
.393d89	c2 20		rep #$20	                REP #$20        ; set A long
.393d8b	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d8e	5b		tcd		                TCD
.393d8f	28		plp		                PLP
.393d90	68		pla		                PLA             ; end setdp macro
.393d91	e2 20		sep #$20	                SEP #$20        ; set A short
.393d93	18		clc		                CLC
.393d94	a5 27		lda $27		                LDA OPL2_CHANNEL
.393d96	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393d98	69 a0		adc #$a0	                ADC #$A0
.393d9a	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393d9c	a9 00		lda #$00	                LDA #$00
.393d9e	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393da0	c2 30		rep #$30	                REP #$30        ; set A&X long
.393da2	18		clc		                CLC
.393da3	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393da6	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393da8	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393daa	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393dad	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393daf	e2 20		sep #$20	                SEP #$20        ; set A short
.393db1	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393db3	85 32		sta $32		                STA OPL2_PARAMETER0
.393db5	18		clc		                CLC
.393db6	a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.393db8	69 10		adc #$10	                ADC #$10
.393dba	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393dbc	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393dbe	29 03		and #$03	                AND #$03
.393dc0	85 33		sta $33		                STA OPL2_PARAMETER1
.393dc2	6b		rtl		                RTL
.393dc3					OPL2_Set_Frequency
.393dc3	6b		rtl		                RTL
.393dc4					OPL2_Get_Frequency
.393dc4	6b		rtl		                RTL
.393dc5					OPL2_SET_BLOCK
.393dc5	48		pha		                PHA             ; begin setdp macro
.393dc6	08		php		                PHP
.393dc7	c2 20		rep #$20	                REP #$20        ; set A long
.393dc9	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393dcc	5b		tcd		                TCD
.393dcd	28		plp		                PLP
.393dce	68		pla		                PLA             ; end setdp macro
.393dcf	e2 20		sep #$20	                SEP #$20        ; set A short
.393dd1	18		clc		                CLC
.393dd2	a5 27		lda $27		                LDA OPL2_CHANNEL
.393dd4	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393dd6	69 b0		adc #$b0	                ADC #$B0
.393dd8	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393dda	a9 00		lda #$00	                LDA #$00
.393ddc	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393dde	c2 30		rep #$30	                REP #$30        ; set A&X long
.393de0	18		clc		                CLC
.393de1	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393de4	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393de6	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393de8	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393deb	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393ded	e2 20		sep #$20	                SEP #$20        ; set A short
.393def	a5 31		lda $31		                LDA OPL2_OCTAVE
.393df1	29 07		and #$07	                AND #$07
.393df3	0a		asl a		                ASL
.393df4	0a		asl a		                ASL
.393df5	85 31		sta $31		                STA OPL2_OCTAVE
.393df7	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393df9	29 e3		and #$e3	                AND #$E3
.393dfb	05 31		ora $31		                ORA OPL2_OCTAVE
.393dfd	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393dff	60		rts		                RTS
.393e00					OPL2_SET_KEYON
.393e00	48		pha		                PHA             ; begin setdp macro
.393e01	08		php		                PHP
.393e02	c2 20		rep #$20	                REP #$20        ; set A long
.393e04	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393e07	5b		tcd		                TCD
.393e08	28		plp		                PLP
.393e09	68		pla		                PLA             ; end setdp macro
.393e0a	e2 20		sep #$20	                SEP #$20        ; set A short
.393e0c	18		clc		                CLC
.393e0d	a5 27		lda $27		                LDA OPL2_CHANNEL
.393e0f	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393e11	69 b0		adc #$b0	                ADC #$B0
.393e13	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393e15	a9 00		lda #$00	                LDA #$00
.393e17	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393e19	c2 30		rep #$30	                REP #$30        ; set A&X long
.393e1b	18		clc		                CLC
.393e1c	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393e1f	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393e21	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393e23	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393e26	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393e28	e2 20		sep #$20	                SEP #$20        ; set A short
.393e2a	a5 32		lda $32		                LDA OPL2_PARAMETER0
.393e2c	29 01		and #$01	                AND #$01
.393e2e	f0 02		beq $393e32	                BEQ SET_KEYON_OFF
.393e30	a9 20		lda #$20	                LDA #$20
.393e32					    SET_KEYON_OFF
.393e32	85 32		sta $32		                STA OPL2_PARAMETER0
.393e34	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393e36	29 df		and #$df	                AND #$DF
.393e38	05 32		ora $32		                ORA OPL2_PARAMETER0
.393e3a	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393e3c	60		rts		                RTS
.393e3d					OPL2_SET_FEEDBACK
.393e3d	48		pha		                PHA             ; begin setdp macro
.393e3e	08		php		                PHP
.393e3f	c2 20		rep #$20	                REP #$20        ; set A long
.393e41	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393e44	5b		tcd		                TCD
.393e45	28		plp		                PLP
.393e46	68		pla		                PLA             ; end setdp macro
.393e47	e2 20		sep #$20	                SEP #$20        ; set A short
.393e49	18		clc		              CLC
.393e4a	a5 27		lda $27		              LDA OPL2_CHANNEL
.393e4c	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393e4e	69 c0		adc #$c0	              ADC #$C0
.393e50	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393e52	a9 00		lda #$00	              LDA #$00
.393e54	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393e56	c2 30		rep #$30	                REP #$30        ; set A&X long
.393e58	18		clc		              CLC
.393e59	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393e5c	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393e5e	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393e60	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393e63	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393e65	e2 20		sep #$20	                SEP #$20        ; set A short
.393e67	a5 32		lda $32		              LDA OPL2_PARAMETER0
.393e69	29 07		and #$07	              AND #$07
.393e6b	0a		asl a		              ASL
.393e6c	85 32		sta $32		              STA OPL2_PARAMETER0
.393e6e	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393e70	29 01		and #$01	              AND #$01
.393e72	05 32		ora $32		              ORA OPL2_PARAMETER0
.393e74	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393e76	6b		rtl		                RTL
.393e77					OPL2_SET_SYNTHMODE
.393e77	48		pha		                PHA             ; begin setdp macro
.393e78	08		php		                PHP
.393e79	c2 20		rep #$20	                REP #$20        ; set A long
.393e7b	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393e7e	5b		tcd		                TCD
.393e7f	28		plp		                PLP
.393e80	68		pla		                PLA             ; end setdp macro
.393e81	08		php		              PHP ; Push the Carry
.393e82	e2 20		sep #$20	                SEP #$20        ; set A short
.393e84	18		clc		              CLC
.393e85	a5 27		lda $27		              LDA OPL2_CHANNEL
.393e87	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393e89	69 c0		adc #$c0	              ADC #$C0
.393e8b	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393e8d	a9 00		lda #$00	              LDA #$00
.393e8f	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393e91	c2 30		rep #$30	                REP #$30        ; set A&X long
.393e93	18		clc		              CLC
.393e94	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393e97	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393e99	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393e9b	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393e9e	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393ea0	28		plp		              PLP ; Pull the Carry out
.393ea1	e2 20		sep #$20	                SEP #$20        ; set A short
.393ea3	b0 08		bcs $393ead	              BCS OPL2_Set_Synthmode_Set;
.393ea5	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393ea7	29 fe		and #$fe	              AND #$FE
.393ea9	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393eab	80 06		bra $393eb3	              BRA OPL2_Set_Synthmode_Exit
.393ead					OPL2_Set_Synthmode_Set
.393ead	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393eaf	09 01		ora #$01	              ORA #$01
.393eb1	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393eb3					OPL2_Set_Synthmode_Exit
.393eb3	6b		rtl		                RTL
.393eb4					OPL2_SET_DEEPTREMOLO
.393eb4	48		pha		                PHA             ; begin setdp macro
.393eb5	08		php		                PHP
.393eb6	c2 20		rep #$20	                REP #$20        ; set A long
.393eb8	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393ebb	5b		tcd		                TCD
.393ebc	28		plp		                PLP
.393ebd	68		pla		                PLA             ; end setdp macro
.393ebe	c2 20		rep #$20	                REP #$20        ; set A long
.393ec0	a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.393ec3	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393ec5	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393ec8	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393eca	e2 20		sep #$20	                SEP #$20        ; set A short
.393ecc	b0 08		bcs $393ed6	              BCS OPL2_Set_DeepTremolo_Set;
.393ece	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393ed0	29 7f		and #$7f	              AND #$7F
.393ed2	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393ed4	80 06		bra $393edc	              BRA OPL2_Set_DeepTremolo_Exit
.393ed6					OPL2_Set_DeepTremolo_Set
.393ed6	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393ed8	09 80		ora #$80	              ORA #$80
.393eda	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393edc					OPL2_Set_DeepTremolo_Exit
.393edc	6b		rtl		                RTL
.393edd					OPL2_SET_DEEPVIBRATO
.393edd	48		pha		                PHA             ; begin setdp macro
.393ede	08		php		                PHP
.393edf	c2 20		rep #$20	                REP #$20        ; set A long
.393ee1	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393ee4	5b		tcd		                TCD
.393ee5	28		plp		                PLP
.393ee6	68		pla		                PLA             ; end setdp macro
.393ee7	c2 20		rep #$20	                REP #$20        ; set A long
.393ee9	a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.393eec	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393eee	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393ef1	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393ef3	e2 20		sep #$20	                SEP #$20        ; set A short
.393ef5	b0 08		bcs $393eff	              BCS OPL2_Set_DeepVibrato_Set;
.393ef7	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393ef9	29 bf		and #$bf	              AND #$BF
.393efb	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393efd	80 06		bra $393f05	              BRA OPL2_Set_DeepVibrato_Exit
.393eff					OPL2_Set_DeepVibrato_Set
.393eff	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393f01	09 40		ora #$40	              ORA #$40
.393f03	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393f05					OPL2_Set_DeepVibrato_Exit
.393f05	6b		rtl		                RTL
.393f06					OPL2_SET_PERCUSSION
.393f06	48		pha		                PHA             ; begin setdp macro
.393f07	08		php		                PHP
.393f08	c2 20		rep #$20	                REP #$20        ; set A long
.393f0a	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393f0d	5b		tcd		                TCD
.393f0e	28		plp		                PLP
.393f0f	68		pla		                PLA             ; end setdp macro
.393f10	c2 20		rep #$20	                REP #$20        ; set A long
.393f12	a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.393f15	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393f17	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393f1a	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393f1c	e2 20		sep #$20	                SEP #$20        ; set A short
.393f1e	b0 08		bcs $393f28	                BCS OPL2_Set_Percussion_Set;
.393f20	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393f22	29 df		and #$df	                AND #$DF
.393f24	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393f26	80 06		bra $393f2e	                BRA OPL2_Set_Percussion_Exit
.393f28					OPL2_Set_Percussion_Set
.393f28	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393f2a	09 20		ora #$20	                ORA #$20
.393f2c	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393f2e					OPL2_Set_Percussion_Exit
.393f2e	6b		rtl		                RTL
.393f2f					OPL2_SET_DRUMS
.393f2f	48		pha		                PHA             ; begin setdp macro
.393f30	08		php		                PHP
.393f31	c2 20		rep #$20	                REP #$20        ; set A long
.393f33	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393f36	5b		tcd		                TCD
.393f37	28		plp		                PLP
.393f38	68		pla		                PLA             ; end setdp macro
.393f39	c2 20		rep #$20	                REP #$20        ; set A long
.393f3b	a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.393f3e	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393f40	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393f43	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393f45	e2 20		sep #$20	                SEP #$20        ; set A short
.393f47	a5 32		lda $32		                LDA OPL2_PARAMETER0
.393f49	29 1f		and #$1f	                AND #$1F
.393f4b	85 32		sta $32		                STA OPL2_PARAMETER0
.393f4d	49 ff		eor #$ff	                EOR #$FF
.393f4f	85 33		sta $33		                STA OPL2_PARAMETER1
.393f51	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393f53	25 33		and $33		                AND OPL2_PARAMETER1
.393f55	05 32		ora $32		                ORA OPL2_PARAMETER0
.393f57	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393f59	6b		rtl		                RTL
.393f5a					OPL2_SET_WAVEFORM
.393f5a	48		pha		                PHA             ; begin setdp macro
.393f5b	08		php		                PHP
.393f5c	c2 20		rep #$20	                REP #$20        ; set A long
.393f5e	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393f61	5b		tcd		                TCD
.393f62	28		plp		                PLP
.393f63	68		pla		                PLA             ; end setdp macro
.393f64	c2 20		rep #$20	                REP #$20        ; set A long
.393f66	a9 e0 00	lda #$00e0	                LDA #$00E0;
.393f69	85 28		sta $28		                STA OPL2_REG_REGION
.393f6b	20 7f 3f	jsr $393f7f	                JSR OPL2_GET_REG_OFFSET
.393f6e	e2 20		sep #$20	                SEP #$20        ; set A short
.393f70	a5 32		lda $32		                LDA OPL2_PARAMETER0
.393f72	29 03		and #$03	                AND #$03
.393f74	85 32		sta $32		                STA OPL2_PARAMETER0
.393f76	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393f78	29 fc		and #$fc	                AND #$FC
.393f7a	05 32		ora $32		                ORA OPL2_PARAMETER0
.393f7c	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393f7e	6b		rtl		                RTL
.393f7f					OPL2_GET_REG_OFFSET
.393f7f	e2 30		sep #$30	                SEP #$30        ; set A&X short
.393f81	a5 27		lda $27		                LDA OPL2_CHANNEL
.393f83	29 0f		and #$0f	                AND #$0F
.393f85	aa		tax		                TAX
.393f86	a5 26		lda $26		                LDA OPL2_OPERATOR   ; 0 = operator 1, other = operator 2
.393f88	d0 06		bne $393f90	                BNE OPL2_Get_Register_Offset_l0
.393f8a	bf c7 15 39	lda $3915c7,x	                LDA @lregisterOffsets_operator0, X
.393f8e	80 04		bra $393f94	                BRA OPL2_Get_Register_Offset_exit
.393f90					OPL2_Get_Register_Offset_l0
.393f90	bf d0 15 39	lda $3915d0,x	                LDA @lregisterOffsets_operator1, X
.393f94					OPL2_Get_Register_Offset_exit
.393f94	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393f96	a9 00		lda #$00	                LDA #$00
.393f98	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393f9a	c2 30		rep #$30	                REP #$30        ; set A&X long
.393f9c	18		clc		                CLC
.393f9d	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393fa0	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393fa2	65 28		adc $28		                ADC OPL2_REG_REGION ; Ex: $20, or $40, $60, $80 (in 16bits)
.393fa4	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393fa6	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393fa9	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393fab	60		rts		                RTS

;******  Return to file: src\kernel.asm


;******  Processing file: src\sdcard_controller_def.asm

=$afea00				SDC_VERSION_REG         = $AFEA00    ; Ought to read 12
=$afea01				SDC_CONTROL_REG         = $AFEA01    ; Bit0 1 = Reset core logic, and registers. Self clearing
=$afea02				SDC_TRANS_TYPE_REG      = $AFEA02  ; Bit[1:0]
=$00					SDC_TRANS_DIRECT      = $00   ; 00 = Direct Access
=$01					SDC_TRANS_INIT_SD     = $01   ; 01 = Init SD
=$02					SDC_TRANS_READ_BLK    = $02   ; 10 = RW_READ_BLOCK (512 Bytes)
=$03					SDC_TRANS_WRITE_BLK   = $03   ; 11 = RW_WRITE_SD_BLOCK
=$afea03				SDC_TRANS_CONTROL_REG   = $AFEA03
=$01					SDC_TRANS_START         = $01
=$afea04				SDC_TRANS_STATUS_REG    = $AFEA04
=$01					SDC_TRANS_BUSY          = $01     ;  1= Transaction Busy
=$afea05				SDC_TRANS_ERROR_REG     = $AFEA05
=$00					SDC_TRANS_INIT_NO_ERR   = $00   ; Init Error Report [1:0]
=$01					SDC_TRANS_INIT_CMD0_ERR = $01
=$02					SDC_TRANS_INIT_CMD1_ERR = $02
=$00					SDC_TRANS_RD_NO_ERR     = $00   ; Read Error Report [3:2]
=$04					SDC_TRANS_RD_CMD_ERR    = $04
=$08					SDC_TRANS_RD_TOKEN_ERR  = $08
=$00					SDC_TRANS_WR_NO_ERR     = $00   ; Write Report Error  [5:4]
=$10					SDC_TRANS_WR_CMD_ERR    = $10   ;
=$20					SDC_TRANS_WR_DATA_ERR   = $20
=$30					SDC_TRANS_WR_BUSY_ERR   = $30
=$afea06				SDC_DIRECT_ACCESS_REG   = $AFEA06 ; SPI Direct Read and Write - Set DATA before initiating direct Access Transaction
=$afea07				SDC_SD_ADDR_7_0_REG     = $AFEA07 ; Set the ADDR before a block read or block write
=$afea08				SDC_SD_ADDR_15_8_REG    = $AFEA08 ; Addr0 [8:0] Always should be 0, since each block is 512Bytes
=$afea09				SDC_SD_ADDR_23_16_REG   = $AFEA09
=$afea0a				SDC_SD_ADDR_31_24_REG   = $AFEA0A
=$afea0b				SDC_SPI_CLK_DEL_REG     = $AFEA0B
=$afea10				SDC_RX_FIFO_DATA_REG    = $AFEA10 ; Data from the Block Read
=$afea12				SDC_RX_FIFO_DATA_CNT_HI = $AFEA12 ; How many Bytes in the FIFO HI
=$afea13				SDC_RX_FIFO_DATA_CNT_LO = $AFEA13 ; How many Bytes in the FIFO LO
=$afea14				SDC_RX_FIFO_CTRL_REG    = $AFEA14 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)
=$afea20				SDC_TX_FIFO_DATA_REG    = $AFEA20 ; Write Data Block here
=$afea24				SDC_TX_FIFO_CTRL_REG    = $AFEA24 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)

;******  Return to file: src\kernel.asm


;******  Processing file: src\sdos.asm


;******  Processing file: src\sdos_fat.asm


;******  Processing file: src\sdos_bios.asm

=0					BIOS_DEV_FDC = 0                ; Floppy 0
=1					BIOS_DEV_FD1 = 1                ; Future support: Floppy 1 (not likely to be attached)
=2					BIOS_DEV_SD = 2                 ; SD card, partition 0
=3					BIOS_DEV_SD1 = 3                ; Future support: SD card, partition 1
=4					BIOS_DEV_SD2 = 4                ; Future support: SD card, partition 2
=5					BIOS_DEV_SD3 = 5                ; Future support: SD card, partition 3
=6					BIOS_DEV_HD0 = 6                ; Future support: IDE Drive 0, partition 0
=7					BIOS_DEV_HD1 = 7                ; Future support: IDE Drive 0, partition 1
=8					BIOS_DEV_HD2 = 8                ; Future support: IDE Drive 0, partition 2
=9					BIOS_DEV_HD3 = 9                ; Future support: IDE Drive 0, partition 3
=$80					BIOS_ERR_BADDEV = $80           ; BIOS bad device # error
=$81					BIOS_ERR_MOUNT = $81            ; BIOS failed to mount the device
=$82					BIOS_ERR_READ = $82             ; BIOS failed to read from a device
=$83					BIOS_ERR_WRITE = $83            ; BIOS failed to write to a device
=$84					BIOS_ERR_TRACK = $84            ; BIOS failed to seek to the correct track
=$85					BIOS_ERR_CMD = $85              ; A general block device command error
=$86					BIOS_ERR_WRITEPROT = $86        ; The media was write-protected
=$87					BIOS_ERR_NOMEDIA = $87          ; No media detected... unable to read/write in time
=$88					BIOS_ERR_RESULT = $88           ; Couldn't get the result bytes for some reason
=$89					BIOS_ERR_OOS = $89              ; FDC state is somehow out of sync with the driver.
=$8a					BIOS_ERR_NOTATA = $8A           ; IDE drive is not ATA
=$8b					BIOS_ERR_NOTINIT = $8B          ; Could not initilize the device
.393fac					ITRACE
.393fac	08		php		                PHP
.393fad	c2 30		rep #$30	                REP #$30        ; set A&X long
.393faf	8b		phb		                PHB                 ; Print the text
.393fb0	a3 06		lda $06,s	                LDA #6,S            ; Get bits[15..0] of string pointer
.393fb2	aa		tax		                TAX                 ; ... into X
.393fb3	e2 20		sep #$20	                SEP #$20        ; set A short
.393fb5	a3 08		lda $08,s	                LDA #8,S            ; Get bits[23..16] of string pointer
.393fb7	48		pha		                PHA
.393fb8	ab		plb		                PLB                 ; ... into B
.393fb9	22 a5 06 39	jsl $3906a5	                JSL IPUTS           ; Print the string
.393fbd	c2 20		rep #$20	                REP #$20        ; set A long
.393fbf	a3 04		lda $04,s	                LDA #4,S            ; Move P and return address down over the string pointer
.393fc1	83 08		sta $08,s	                STA #8,S
.393fc3	a3 02		lda $02,s	                LDA #2,S
.393fc5	83 06		sta $06,s	                STA #6,S
.393fc7	ab		plb		                PLB
.393fc8	68		pla		                PLA                 ; Clean up the stack
.393fc9	68		pla		                PLA
.393fca	28		plp		                PLP
.393fcb	6b		rtl		                RTL
.393fcc					ICMDBLOCK
.393fcc	0b		phd		                PHD
.393fcd	08		php		                PHP
.393fce	48		pha		                PHA             ; begin setdp macro
.393fcf	08		php		                PHP
.393fd0	c2 20		rep #$20	                REP #$20        ; set A long
.393fd2	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393fd5	5b		tcd		                TCD
.393fd6	28		plp		                PLP
.393fd7	68		pla		                PLA             ; end setdp macro
.393fd8	e2 20		sep #$20	                SEP #$20        ; set A short
.393fda	a5 01		lda $0321	                LDA BIOS_DEV                ; Get the device number
.393fdc	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Check to see if we're sending to the floppy
.393fde	d0 06		bne $393fe6	                BNE ret_success             ; No: just return
.393fe0	22 02 63 39	jsl $396302	                JSL FDC_CMDBLOCK            ; Yes: call upon the floppy code
.393fe4	90 0c		bcc $393ff2	                BCC pass_failure
.393fe6					ret_success
.393fe6	e2 20		sep #$20	                SEP #$20        ; set A short
.393fe8	64 00		stz $0320	                STZ BIOS_STATUS
.393fea	28		plp		                PLP
.393feb	2b		pld		                PLD
.393fec	38		sec		                SEC
.393fed	6b		rtl		                RTL
.393fee					ret_failure
.393fee	e2 20		sep #$20	                SEP #$20        ; set A short
.393ff0	85 00		sta $0320	                STA BIOS_STATUS
.393ff2	28		plp		pass_failure    PLP
.393ff3	2b		pld		                PLD
.393ff4	18		clc		                CLC
.393ff5	6b		rtl		                RTL
.393ff6					IGETBLOCK
.393ff6	0b		phd		                PHD
.393ff7	8b		phb		                PHB
.393ff8	08		php		                PHP
.393ff9	48		pha		                PHA             ; begin setdbr macro
.393ffa	08		php		                PHP
.393ffb	e2 20		sep #$20	                SEP #$20        ; set A short
.393ffd	a9 00		lda #$00	                LDA #0
.393fff	48		pha		                PHA
.394000	ab		plb		                PLB
.394001	28		plp		                PLP
.394002	68		pla		                PLA             ; end setdbr macro
.394003	48		pha		                PHA             ; begin setdp macro
.394004	08		php		                PHP
.394005	c2 20		rep #$20	                REP #$20        ; set A long
.394007	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39400a	5b		tcd		                TCD
.39400b	28		plp		                PLP
.39400c	68		pla		                PLA             ; end setdp macro
.39400d	e2 20		sep #$20	                SEP #$20        ; set A short
.39400f	a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.394011	c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.394013	f0 13		beq $394028	                BEQ sd_getblock                     ; Yes: go to the SDC GETBLOCK routine
.394015	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the floppy drive?
.394017	f0 17		beq $394030	                BEQ fd_getblock                     ; Yes: go to the FDC GETBLOCK routine
.394019	c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.39401b	f0 1b		beq $394038	                BEQ hd_getblock
.39401d	a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.39401f					ret_failure
.39401f	e2 20		sep #$20	                SEP #$20        ; set A short
.394021	85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.394023	28		plp		                PLP
.394024	ab		plb		                PLB
.394025	2b		pld		                PLD
.394026	38		sec		                SEC                                 ; Return failure
.394027	6b		rtl		                RTL
.394028	22 42 59 39	jsl $395942	sd_getblock     JSL SDC_GETBLOCK                    ; Call the SDC GETBLOCK routine
.39402c	b0 12		bcs $394040	                BCS ret_success
.39402e	80 ef		bra $39401f	                BRA ret_failure
.394030	22 0e 61 39	jsl $39610e	fd_getblock     JSL FDC_GETBLOCK                    ; Call the FDC GETBLOCK routine
.394034	b0 0a		bcs $394040	                BCS ret_success
.394036	80 e7		bra $39401f	                BRA ret_failure
.394038	22 c6 66 39	jsl $3966c6	hd_getblock     JSL IDE_GETBLOCK                    ; Call the IDE GETBLOCK routine
.39403c	b0 02		bcs $394040	                BCS ret_success
.39403e	80 df		bra $39401f	                BRA ret_failure
.394040					ret_success
.394040	e2 20		sep #$20	                SEP #$20        ; set A short
.394042	64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.394044	28		plp		                PLP
.394045	ab		plb		                PLB
.394046	2b		pld		                PLD
.394047	38		sec		                SEC                                 ; Return success
.394048	6b		rtl		                RTL
.394049					IPUTBLOCK
.394049	0b		phd		                PHD
.39404a	8b		phb		                PHB
.39404b	08		php		                PHP
.39404c	48		pha		                PHA             ; begin setdbr macro
.39404d	08		php		                PHP
.39404e	e2 20		sep #$20	                SEP #$20        ; set A short
.394050	a9 00		lda #$00	                LDA #0
.394052	48		pha		                PHA
.394053	ab		plb		                PLB
.394054	28		plp		                PLP
.394055	68		pla		                PLA             ; end setdbr macro
.394056	48		pha		                PHA             ; begin setdp macro
.394057	08		php		                PHP
.394058	c2 20		rep #$20	                REP #$20        ; set A long
.39405a	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39405d	5b		tcd		                TCD
.39405e	28		plp		                PLP
.39405f	68		pla		                PLA             ; end setdp macro
.394060	e2 20		sep #$20	                SEP #$20        ; set A short
.394062	a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.394064	c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.394066	f0 13		beq $39407b	                BEQ sd_putblock                     ; Yes: go to the SDC PUTBLOCK routine
.394068	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the FDC?
.39406a	f0 17		beq $394083	                BEQ fd_putblock                     ; Yes: go to the FDC PUTBLOCK routine
.39406c	c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.39406e	f0 1b		beq $39408b	                BEQ hd_putblock
.394070	a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.394072					ret_failure
.394072	e2 20		sep #$20	                SEP #$20        ; set A short
.394074	85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.394076	28		plp		                PLP
.394077	ab		plb		                PLB
.394078	2b		pld		                PLD
.394079	18		clc		                CLC                                 ; Return failure
.39407a	6b		rtl		                RTL
.39407b	22 e2 59 39	jsl $3959e2	sd_putblock     JSL SDC_PUTBLOCK                    ; Call the SDC PUTBLOCK routine
.39407f	90 f1		bcc $394072	                BCC ret_failure
.394081	80 10		bra $394093	                BRA ret_success
.394083	22 73 61 39	jsl $396173	fd_putblock     JSL FDC_PUTBLOCK                    ; Call the FDC PUTBLOCK routine
.394087	90 e9		bcc $394072	                BCC ret_failure
.394089	80 08		bra $394093	                BRA ret_success
.39408b	22 57 67 39	jsl $396757	hd_putblock     JSL IDE_PUTBLOCK                    ; Call the IDE PUTBLOCK routine
.39408f	90 e1		bcc $394072	                BCC ret_failure
.394091	80 00		bra $394093	                BRA ret_success
.394093					ret_success
.394093	e2 20		sep #$20	                SEP #$20        ; set A short
.394095	64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.394097	28		plp		                PLP
.394098	ab		plb		                PLB
.394099	2b		pld		                PLD
.39409a	38		sec		                SEC                                 ; Return success
.39409b	6b		rtl		                RTL

;******  Return to file: src\sdos_fat.asm


;******  Processing file: src\sdos_dir.asm

.39409c					DOS_DIROPEN
.39409c	da		phx		                PHX
.39409d	5a		phy		                PHY
.39409e	0b		phd		                PHD
.39409f	8b		phb		                PHB
.3940a0	08		php		                PHP
.3940a1	48		pha		                PHA             ; begin setdbr macro
.3940a2	08		php		                PHP
.3940a3	e2 20		sep #$20	                SEP #$20        ; set A short
.3940a5	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3940a7	48		pha		                PHA
.3940a8	ab		plb		                PLB
.3940a9	28		plp		                PLP
.3940aa	68		pla		                PLA             ; end setdbr macro
.3940ab	48		pha		                PHA             ; begin setdp macro
.3940ac	08		php		                PHP
.3940ad	c2 20		rep #$20	                REP #$20        ; set A long
.3940af	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3940b2	5b		tcd		                TCD
.3940b3	28		plp		                PLP
.3940b4	68		pla		                PLA             ; end setdp macro
.3940b5	ad 20 e0	lda $38e020	                LDA ROOT_DIR_FIRST_CLUSTER  ; Set the cluster (or sector for FAT12)
.3940b8	8d 32 e0	sta $38e032	                STA DOS_DIR_BLOCK_ID        ; to that of the root directory's start
.3940bb	ad 22 e0	lda $38e022	                LDA ROOT_DIR_FIRST_CLUSTER+2
.3940be	8d 34 e0	sta $38e034	                STA DOS_DIR_BLOCK_ID+2
.3940c1	a9 00 e1	lda #$e100	                LDA #<>DOS_DIR_CLUSTER      ; Point to the directory cluster buffer for loading
.3940c4	85 1c		sta $033c	                STA DOS_BUFF_PTR
.3940c6	85 18		sta $0338	                STA DOS_DIR_PTR
.3940c8	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.3940cb	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3940cd	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.3940cf	e2 20		sep #$20	                SEP #$20        ; set A short
.3940d1	ad 01 e0	lda $38e001	                LDA FILE_SYSTEM             ; Check the file system
.3940d4	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12        ; Is it FAT12?
.3940d6	d0 24		bne $3940fc	                BNE fetch_fat32             ; No: handle processing the diretory as FAT32
.3940d8					fetch_fat12
.3940d8	e2 20		sep #$20	                SEP #$20        ; set A short
.3940da	a9 00		lda #$00	                LDA #DOS_DIR_TYPE_FAT12ROOT ; Set the directory type to FAT12 root directory
.3940dc	8d 45 e0	sta $38e045	                STA DOS_DIR_TYPE
.3940df	c2 20		rep #$20	                REP #$20        ; set A long
.3940e1	a5 18		lda $0338	                LDA DOS_DIR_PTR             ; Set the BIOS buffer pointer
.3940e3	85 06		sta $0326	                STA BIOS_BUFF_PTR
.3940e5	a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.3940e7	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3940e9	ad 32 e0	lda $38e032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA of the sector
.3940ec	85 02		sta $0322	                STA BIOS_LBA
.3940ee	ad 34 e0	lda $38e034	                LDA DOS_DIR_BLOCK_ID+2
.3940f1	85 04		sta $0324	                STA BIOS_LBA+2
.3940f3	22 44 10 38	jsl $381044	                JSL GETBLOCK                ; Get the sector from the FAT12 device
.3940f7	b0 1f		bcs $394118	                BCS do_success              ; If sucessful, set the directory cursor
.3940f9	82 81 15	brl $39567d	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.3940fc					fetch_fat32
.3940fc	e2 20		sep #$20	                SEP #$20        ; set A short
.3940fe	a9 01		lda #$01	                LDA #DOS_DIR_TYPE_FILE      ; Set the directory type to file type (all FAT32, any FAT12 subdirectory)
.394100	8d 45 e0	sta $38e045	                STA DOS_DIR_TYPE
.394103	c2 20		rep #$20	                REP #$20        ; set A long
.394105	ad 32 e0	lda $38e032	                LDA DOS_DIR_BLOCK_ID
.394108	85 10		sta $0330	                STA DOS_CLUS_ID
.39410a	ad 34 e0	lda $38e034	                LDA DOS_DIR_BLOCK_ID+2
.39410d	85 12		sta $0332	                STA DOS_CLUS_ID+2
.39410f	22 57 45 39	jsl $394557	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.394113	b0 03		bcs $394118	                BCS do_success              ; If successful: set the directory cursor
.394115	82 65 15	brl $39567d	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.394118	82 69 15	brl $395684	do_success      BRL IF_SUCCESS
.39411b					DOS_DIRFIRST
.39411b	0b		phd		                PHD
.39411c	08		php		                PHP
.39411d	48		pha		                PHA             ; begin setdp macro
.39411e	08		php		                PHP
.39411f	c2 20		rep #$20	                REP #$20        ; set A long
.394121	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394124	5b		tcd		                TCD
.394125	28		plp		                PLP
.394126	68		pla		                PLA             ; end setdp macro
.394127	c2 20		rep #$20	                REP #$20        ; set A long
.394129	a9 00 e1	lda #$e100	                LDA #<>DOS_DIR_CLUSTER
.39412c	85 18		sta $0338	                STA DOS_DIR_PTR
.39412e	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.394131	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.394133	28		plp		                PLP
.394134	2b		pld		                PLD
.394135	6b		rtl		                RTL
.394136					DOS_DIRNEXT
.394136	da		phx		                PHX
.394137	5a		phy		                PHY
.394138	0b		phd		                PHD
.394139	8b		phb		                PHB
.39413a	08		php		                PHP
.39413b	48		pha		                PHA             ; begin setdbr macro
.39413c	08		php		                PHP
.39413d	e2 20		sep #$20	                SEP #$20        ; set A short
.39413f	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394141	48		pha		                PHA
.394142	ab		plb		                PLB
.394143	28		plp		                PLP
.394144	68		pla		                PLA             ; end setdbr macro
.394145	48		pha		                PHA             ; begin setdp macro
.394146	08		php		                PHP
.394147	c2 20		rep #$20	                REP #$20        ; set A long
.394149	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39414c	5b		tcd		                TCD
.39414d	28		plp		                PLP
.39414e	68		pla		                PLA             ; end setdp macro
.39414f	c2 20		rep #$20	                REP #$20        ; set A long
.394151	18		clc		                CLC                         ; Advance the directory entry pointer to the next entry
.394152	a5 18		lda $0338	                LDA DOS_DIR_PTR
.394154	69 20 00	adc #$0020	                ADC #DOS_DIR_ENTRY_SIZE
.394157	85 18		sta $0338	                STA DOS_DIR_PTR
.394159	a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.39415b	69 00 00	adc #$0000	                ADC #0
.39415e	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.394160	38		sec		                SEC                         ; Check to see if we've reached the end of the sector buffer
.394161	a9 00 e3	lda #$e300	                LDA #<>DOS_DIR_CLUSTER_END
.394164	e5 18		sbc $0338	                SBC DOS_DIR_PTR
.394166	85 28		sta $0348	                STA DOS_TEMP
.394168	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER_END
.39416b	e5 1a		sbc $033a	                SBC DOS_DIR_PTR+2
.39416d	85 2a		sta $034a	                STA DOS_TEMP+2
.39416f	30 0c		bmi $39417d	                BMI get_next_block          ; Yes: try to fetch the next directory entry
.394171	f0 03		beq $394176	                BEQ check_lower
.394173	82 0e 15	brl $395684	                BRL IF_SUCCESS
.394176	a5 28		lda $0348	check_lower     LDA DOS_TEMP
.394178	f0 03		beq $39417d	                BEQ get_next_block
.39417a	82 07 15	brl $395684	                BRL IF_SUCCESS
.39417d					get_next_block
.39417d	e2 20		sep #$20	                SEP #$20        ; set A short
.39417f	ad 45 e0	lda $38e045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.394182	c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE
.394184	f0 38		beq $3941be	                BEQ next_cluster            ; FILE TYPE: it's cluster based (FAT32, or FAT12 non-root)
.394186					next_sector
.394186	c2 20		rep #$20	                REP #$20        ; set A long
.394188	ad 32 e0	lda $38e032	                LDA DOS_DIR_BLOCK_ID
.39418b	1a		inc a		                INC A
.39418c	8d 32 e0	sta $38e032	                STA DOS_DIR_BLOCK_ID        ; Increment the sector number (FAT12 root directory is sector based)
.39418f	c9 0a 00	cmp #$000a	                CMP #10                     ; See if we're at the end (TODO: calculate this)
.394192	d0 07		bne $39419b	                BNE read_sector
.394194	e2 20		sep #$20	                SEP #$20        ; set A short
.394196	a9 00		lda #$00	                LDA #0
.394198	82 de 14	brl $395679	                BRL IF_FAILURE
.39419b					read_sector
.39419b	c2 20		rep #$20	                REP #$20        ; set A long
.39419d	ad 32 e0	lda $38e032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA to the sector #
.3941a0	85 02		sta $0322	                STA BIOS_LBA
.3941a2	ad 34 e0	lda $38e034	                LDA DOS_DIR_BLOCK_ID+2
.3941a5	85 04		sta $0324	                STA BIOS_LBA+2
.3941a7	a9 00 e1	lda #$e100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointers to the buffer
.3941aa	85 06		sta $0326	                STA BIOS_BUFF_PTR
.3941ac	85 18		sta $0338	                STA DOS_DIR_PTR
.3941ae	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.3941b1	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3941b3	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.3941b5	22 44 10 38	jsl $381044	                JSL GETBLOCK                ; Attempt to read the sector from the FAT12 device
.3941b9	b0 39		bcs $3941f4	                BCS do_success              ; If successful: set the directory cursor
.3941bb	82 bf 14	brl $39567d	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.3941be					next_cluster
.3941be	c2 20		rep #$20	                REP #$20        ; set A long
.3941c0	ad 32 e0	lda $38e032	                LDA DOS_DIR_BLOCK_ID        ; Get the current block (cluster) ID
.3941c3	85 10		sta $0330	                STA DOS_CLUS_ID
.3941c5	ad 34 e0	lda $38e034	                LDA DOS_DIR_BLOCK_ID+2
.3941c8	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3941ca	a9 00 e1	lda #$e100	                LDA #<>DOS_DIR_CLUSTER
.3941cd	85 1c		sta $033c	                STA DOS_BUFF_PTR
.3941cf	85 18		sta $0338	                STA DOS_DIR_PTR
.3941d1	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.3941d4	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3941d6	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.3941d8	22 62 49 39	jsl $394962	                JSL NEXTCLUSTER             ; Try to find the next cluster
.3941dc	b0 03		bcs $3941e1	                BCS set_next
.3941de	82 9c 14	brl $39567d	                BRL IF_PASSFAILURE          ; If error: pass it up the chain
.3941e1	a5 10		lda $0330	set_next        LDA DOS_CLUS_ID             ; Save the cluster as the current directory cluster
.3941e3	8d 32 e0	sta $38e032	                STA DOS_DIR_BLOCK_ID
.3941e6	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3941e8	8d 34 e0	sta $38e034	                STA DOS_DIR_BLOCK_ID+2
.3941eb	22 57 45 39	jsl $394557	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.3941ef	b0 03		bcs $3941f4	                BCS do_success              ; If successful: set the directory cursor
.3941f1	82 89 14	brl $39567d	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.3941f4	82 8d 14	brl $395684	do_success      BRL IF_SUCCESS
.3941f7					DOS_DIRFINDFREE
.3941f7	da		phx		                PHX
.3941f8	5a		phy		                PHY
.3941f9	0b		phd		                PHD
.3941fa	8b		phb		                PHB
.3941fb	08		php		                PHP
.3941fc	48		pha		                PHA             ; begin setdbr macro
.3941fd	08		php		                PHP
.3941fe	e2 20		sep #$20	                SEP #$20        ; set A short
.394200	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394202	48		pha		                PHA
.394203	ab		plb		                PLB
.394204	28		plp		                PLP
.394205	68		pla		                PLA             ; end setdbr macro
.394206	48		pha		                PHA             ; begin setdp macro
.394207	08		php		                PHP
.394208	c2 20		rep #$20	                REP #$20        ; set A long
.39420a	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39420d	5b		tcd		                TCD
.39420e	28		plp		                PLP
.39420f	68		pla		                PLA             ; end setdp macro
.394210	22 15 53 39	jsl $395315	                JSL IF_DIROPEN
.394214	b0 06		bcs $39421c	                BCS start_walk
.394216	a9 08 00	lda #$0008	                LDA #DOS_ERR_NODIR          ; Return that we could not read the directory
.394219	82 28 00	brl $394244	                BRL ret_failure
.39421c	a0 00 00	ldy #$0000	start_walk      LDY #0                      ; We check the first character of the entry
.39421f					chk_entry
.39421f	e2 20		sep #$20	                SEP #$20        ; set A short
.394221	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the first byte of the directory entry
.394223	f0 1c		beq $394241	                BEQ ret_success             ; If 0: we have a blank... return it
.394225	c9 e5		cmp #$e5	                CMP #DOS_DIR_ENT_UNUSED     ; Is it an unused (deleted) entry?
.394227	f0 18		beq $394241	                BEQ ret_success             ; Yes: return it
.394229	22 4f 53 39	jsl $39534f	                JSL IF_DIRNEXT              ; Go to the next directory entry
.39422d	b0 ed		bcs $39421c	                BCS start_walk              ; If we got one, start walking it
.39422f	22 47 42 39	jsl $394247	                JSL DOS_DIRAPPEND           ; If there isn't one, create a blank cluster
.394233	90 0f		bcc $394244	                BCC ret_failure             ; If that didn't work, return the failure
.394235	c2 20		rep #$20	                REP #$20        ; set A long
.394237	a9 00 e1	lda #$e100	                LDA #<>DOS_DIR_CLUSTER      ; Return the first entry
.39423a	85 18		sta $0338	                STA DOS_DIR_PTR
.39423c	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.39423f	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.394241	82 40 14	brl $395684	ret_success     BRL IF_SUCCESS
.394244	82 32 14	brl $395679	ret_failure     BRL IF_FAILURE
.394247					DOS_DIRAPPEND
.394247	da		phx		                PHX
.394248	8b		phb		                PHB
.394249	0b		phd		                PHD
.39424a	08		php		                PHP
.39424b	48		pha		                PHA             ; begin setdbr macro
.39424c	08		php		                PHP
.39424d	e2 20		sep #$20	                SEP #$20        ; set A short
.39424f	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394251	48		pha		                PHA
.394252	ab		plb		                PLB
.394253	28		plp		                PLP
.394254	68		pla		                PLA             ; end setdbr macro
.394255	48		pha		                PHA             ; begin setdp macro
.394256	08		php		                PHP
.394257	c2 20		rep #$20	                REP #$20        ; set A long
.394259	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39425c	5b		tcd		                TCD
.39425d	28		plp		                PLP
.39425e	68		pla		                PLA             ; end setdp macro
.39425f	e2 20		sep #$20	                SEP #$20        ; set A short
.394261	ad 45 e0	lda $38e045	                LDA DOS_DIR_TYPE
.394264	c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE          ; Are we looking at a file type directory
.394266	f0 09		beq $394271	                BEQ clr_sector                  ; Yes: clear out the directory data
.394268					ret_failure
.394268	e2 20		sep #$20	                SEP #$20        ; set A short
.39426a	a9 15		lda #$15	                LDA #DOS_ERR_DIRFULL            ; No: return a directory-full error
.39426c	85 0e		sta $032e	                STA DOS_STATUS
.39426e	82 3e 00	brl $3942af	                BRL pass_failure
.394271					clr_sector
.394271	c2 20		rep #$20	                REP #$20        ; set A long
.394273	a9 00 00	lda #$0000	                LDA #0
.394276	a2 00 00	ldx #$0000	                LDX #0
.394279	9d 00 e1	sta $38e100,x	clr_loop        STA DOS_DIR_CLUSTER,X           ; Clear the directory cluster
.39427c	e8		inx		                INX
.39427d	e8		inx		                INX
.39427e	e0 00 02	cpx #$0200	                CPX #512
.394281	d0 f6		bne $394279	                BNE clr_loop
.394283	a9 00 e1	lda #$e100	                LDA #<>DOS_DIR_CLUSTER          ; Point to the new, blank directory data
.394286	85 1c		sta $033c	                STA DOS_BUFF_PTR
.394288	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.39428b	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.39428d	ad 32 e0	lda $38e032	                LDA DOS_DIR_BLOCK_ID            ; We want to append it to the current directory
.394290	85 10		sta $0330	                STA DOS_CLUS_ID
.394292	ad 34 e0	lda $38e034	                LDA DOS_DIR_BLOCK_ID+2
.394295	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394297	22 51 4d 39	jsl $394d51	                JSL DOS_APPENDCLUS              ; Attempt to append the blank data as a new cluster
.39429b	90 12		bcc $3942af	                BCC pass_failure                ; If there was an error, pass it up the chain
.39429d	ad 36 e0	lda $38e036	                LDA DOS_NEW_CLUSTER             ; Set the block ID of the new directory cluster
.3942a0	8d 32 e0	sta $38e032	                STA DOS_DIR_BLOCK_ID
.3942a3	ad 38 e0	lda $38e038	                LDA DOS_NEW_CLUSTER+2
.3942a6	8d 34 e0	sta $38e034	                STA DOS_DIR_BLOCK_ID+2
.3942a9	28		plp		ret_success     PLP
.3942aa	2b		pld		                PLD
.3942ab	ab		plb		                PLB
.3942ac	fa		plx		                PLX
.3942ad	38		sec		                SEC
.3942ae	6b		rtl		                RTL
.3942af	28		plp		pass_failure    PLP
.3942b0	2b		pld		                PLD
.3942b1	ab		plb		                PLB
.3942b2	fa		plx		                PLX
.3942b3	18		clc		                CLC
.3942b4	6b		rtl		                RTL
.3942b5					DOS_DIRWRITE
.3942b5	da		phx		                PHX
.3942b6	5a		phy		                PHY
.3942b7	0b		phd		                PHD
.3942b8	8b		phb		                PHB
.3942b9	08		php		                PHP
.3942ba	48		pha		                PHA             ; begin setdbr macro
.3942bb	08		php		                PHP
.3942bc	e2 20		sep #$20	                SEP #$20        ; set A short
.3942be	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3942c0	48		pha		                PHA
.3942c1	ab		plb		                PLB
.3942c2	28		plp		                PLP
.3942c3	68		pla		                PLA             ; end setdbr macro
.3942c4	48		pha		                PHA             ; begin setdp macro
.3942c5	08		php		                PHP
.3942c6	c2 20		rep #$20	                REP #$20        ; set A long
.3942c8	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3942cb	5b		tcd		                TCD
.3942cc	28		plp		                PLP
.3942cd	68		pla		                PLA             ; end setdp macro
.3942ce	e2 20		sep #$20	                SEP #$20        ; set A short
.3942d0	ad 45 e0	lda $38e045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.3942d3	c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE      ; Is it a file type directory (FAT32 or FAT12 non-root?)
.3942d5	f0 1f		beq $3942f6	                BEQ write_cluster           ; Yes: write it back using a cluster ID
.3942d7					write_sector
.3942d7	c2 20		rep #$20	                REP #$20        ; set A long
.3942d9	ad 32 e0	lda $38e032	                LDA DOS_DIR_BLOCK_ID        ; Set the BIOS_LBA to the LBA of the sector
.3942dc	85 02		sta $0322	                STA BIOS_LBA
.3942de	ad 34 e0	lda $38e034	                LDA DOS_DIR_BLOCK_ID+2
.3942e1	85 04		sta $0324	                STA BIOS_LBA+2
.3942e3	a9 00 e1	lda #$e100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.3942e6	85 06		sta $0326	                STA BIOS_BUFF_PTR
.3942e8	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.3942eb	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3942ed	22 24 10 38	jsl $381024	                JSL PUTBLOCK                ; Try to write the sector to disk
.3942f1	b0 1f		bcs $394312	                BCS ret_success
.3942f3	82 83 13	brl $395679	ret_failure     BRL IF_FAILURE
.3942f6					write_cluster
.3942f6	c2 20		rep #$20	                REP #$20        ; set A long
.3942f8	ad 32 e0	lda $38e032	                LDA DOS_DIR_BLOCK_ID        ; Set the DOS_CLUS_ID to the ID of the cluster
.3942fb	85 10		sta $0330	                STA DOS_CLUS_ID
.3942fd	ad 34 e0	lda $38e034	                LDA DOS_DIR_BLOCK_ID+2
.394300	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394302	a9 00 e1	lda #$e100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.394305	85 1c		sta $033c	                STA DOS_BUFF_PTR
.394307	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.39430a	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.39430c	22 94 45 39	jsl $394594	                JSL DOS_PUTCLUSTER          ; Try to write the cluster to disk
.394310	90 e1		bcc $3942f3	                BCC ret_failure
.394312	82 6f 13	brl $395684	ret_success     BRL IF_SUCCESS

;******  Return to file: src\sdos_fat.asm

.0000					DEVICE_DESC
>0000					DEVNAME         .dword ?            ; A pointer to the ASCIIZ name of the device
>0004					DEVNUMBER       .byte ?           ; The BIOS_DEV number for the device
>0005					NEXT            .dword ?            ; A pointer to the next device descriptor
.0000					DIRENTRY
>0000					SHORTNAME               .fill 11        ; $00 - The short name of the file (8 name, 3 extension)
>000b					ATTRIBUTE               .byte ?         ; $0B - The attribute bits
>000c					IGNORED1                .word ?         ; $0C - Unused (by us) bytes
>000e					CREATE_TIME             .word ?         ; $0E - Creation time
>0010					CREATE_DATE             .word ?         ; $10 - Creation date
>0012					ACCESS_DATE             .word ?         ; $12 - Last access date
>0014					CLUSTER_H               .word ?         ; $14 - High word of the first cluster #
>0016					MODIFIED_TIME           .word ?         ; $16 - Last modified time
>0018					MODIFIED_DATE           .word ?         ; $18 - Last modified date
>001a					CLUSTER_L               .word ?         ; $1A - Low word of the first cluster #
>001c					SIZE                    .dword ?        ; $1C - The size of the file (in bytes)
=$01					DOS_ATTR_RO = $01                       ; File is read-only
=$02					DOS_ATTR_HIDDEN = $02                   ; File is hidden
=$04					DOS_ATTR_SYSTEM = $04                   ; File is a system file
=$08					DOS_ATTR_VOLUME = $08                   ; Entry is the volume label
=$10					DOS_ATTR_DIR = $10                      ; Entry is a directory
=$20					DOS_ATTR_ARCH = $20                     ; Entry has changed since last backup
=$0f					DOS_ATTR_LONGNAME = $0F                 ; Entry is the long file name
.0000					FILEDESC
>0000					STATUS              .byte ?             ; The status flags of the file descriptor (open, closed, error, EOF, etc.)
>0001					DEV                 .byte ?             ; The ID of the device holding the file
>0002					PATH                .dword ?            ; Pointer to a NULL terminated path string
>0006					CLUSTER             .dword ?            ; The current cluster of the file.
>000a					FIRST_CLUSTER       .dword ?            ; The ID of the first cluster in the file
>000e					BUFFER              .dword ?            ; Pointer to a cluster-sized buffer
>0012					SIZE                .dword ?            ; The size of the file
>0016					CREATE_DATE         .word ?             ; The creation date of the file
>0018					CREATE_TIME         .word ?             ; The creation time of the file
>001a					MODIFIED_DATE       .word ?             ; The modification date of the file
>001c					MODIFIED_TIME       .word ?             ; The modification time of the file
=$01					FD_STAT_READ = $01                      ; The file is readable
=$02					FD_STAT_WRITE = $02                     ; The file is writable
=$40					FD_STAT_OPEN = $40                      ; The file is open
=$60					FD_STAT_ERROR = $60                     ; The file is in an error condition
=$80					FD_STAT_EOF = $80                       ; The file cursor is at the end of the file
=$0fffffff				FAT_LAST_CLUSTER = $0FFFFFFF            ; Code to mark the last cluster of a file
=1					VOLUMEMAX = 1                           ; The maximum number of mounted volumes we support
=32					DOS_DIR_ENTRY_SIZE = 32                 ; The size of a directory entry
=512					DOS_SECTOR_SIZE = 512                   ; The size of a sector
=$e5					DOS_DIR_ENT_UNUSED = $E5                ; Marker for an unused directory entry
=$00					PART_TYPE_FAT12 = $00                   ; "Partition" type: FAT12, used for floppy disks
=$0c					PART_TYPE_FAT32_LBA = $0C               ; Patition type: FAT32 with LBA addressing
=$29					BPB_EXTENDED_RECORD = $29               ; If SIGNATUREB of the BPB has this byte, the volume label is valid
=0					DOS_DIR_TYPE_FAT12ROOT = 0              ; Directory is a FAT12 root directory
=1					DOS_DIR_TYPE_FILE = 1                   ; Directory is a file type directory
=1					DOS_ERR_READ = 1                        ; We could not read a sector, check BIOS_STATUS for details
=2					DOS_ERR_NOTMBR = 2                      ; We could not find the MBR
=3					DOS_ERR_NOFAT32 = 3                     ; We could not find a FAT32 parition using LBA
=4					DOS_ERR_NOINIT = 4                      ; We could not INIT the block device
=5					DOS_ERR_VOLID = 5                       ; Volume ID sector could not be loaded
=6					DOS_ERR_FAT = 6                         ; Can't scan the FAT for some reason
=7					DOS_ERR_BADPATH = 7                     ; The path was badly formatted
=8					DOS_ERR_NODIR = 8                       ; Could not read the directory
=9					DOS_ERR_NOTFOUND = 9                    ; File/directory requested was not found
=10					DOS_ERR_NOCLUSTER = 10                  ; There are no more clusters
=11					DOS_ERR_FILEEXISTS = 11                 ; There is already a file of that name
=12					DOS_ERR_NOTOPEN = 12                    ; File has not been open
=13					DOS_ERR_NOTREAD = 13                    ; File is not open for reading
=14					DOS_ERR_NOTWRITE = 14                   ; File is not open for writing
=15					DOS_ERR_OPEN = 15                       ; File is already open
=16					DOS_ERR_PGXSIG = 16                     ; File does not have the PGX signature
=17					DOS_ERR_NOEXEC = 17                     ; File does is not an executable format
=18					DOS_ERR_MEDIAFULL = 18                  ; There are no more free clusters on the drive
=19					DOS_ERR_WRITEPROT = 19                  ; The medium is write-protected
=20					DOS_ERR_FATUPDATE = 20                  ; Can't update the FAT
=21					DOS_ERR_DIRFULL = 21                    ; The directory is full
=446					PART0_OFF = 446                         ; Offset to the first partition in the MBR
=4					PART_TYPE_OFF = 4                       ; Offset to the partition's type
=8					PART_LBA_OFF = 8                        ; Offset to the LBA of the first sector of the partition
=13					PART_SECT_COUNT_OFF = 13                ; Offset to the sector count of the partition
=510					MBR_SIGNATURE = 510                     ; The offset to the MBR signature bytes
=11					BPB_BYTEPERSEC_OFF = 11                 ; Offset in the BPB sector to the Bytes Per Sector
=13					BPB_SECPERCLUS_OFF = 13                 ; Offset in the BPB sector to the Sectors Per Cluster
=14					BPB_RSRVCLUS_OFF = 14                   ; Offset in the BPB sector to the Number of Reserved Clusters
=16					BPB_NUMFAT_OFF = 16                     ; Offset in the BPB sector to the Number of FATs
=17					BPB_ROOT_MAX_ENTRY_OFF = 17             ; Offset in the BPB sector to the Maximum # of entries in the root directory (FAT12)
=19					BPB_TOTAL_SECTORS = 19                  ; Offset in the BPB sector to the number of sectors on the partition or disk (FAT12)
=$24					BPB_SECPERFAT_OFF = $24                 ; Offset in the BPB sector to the Sectors Per FAT
=38					BPB_SIGNATUREB = 38                     ; Offset in the BPB sector to the second signature byte
=39					BPB_VOLUMEID = 39                       ; Offset in the BPB sector to the volume ID
=$2c					BPB_ROOTCLUS_OFF = $2C                  ; Offset in the BPB sector to the Root Cluster Number
=510					BPB_SIGNATURE = 510                     ; The offset to the MBR signature bytes
=$38e000				DOS_HIGH_VARIABLES      = $38E000
=$38e000				DEVICE                  = $38E000       ; 1 byte - The number of the block device
=$38e001				FILE_SYSTEM             = $38E001       ; 1 byte - The type of filesystem (FAT12, FAT32, etc.)
=$38e002				PARTITION               = $38E002       ; 1 byte - The number of the partitions on the device
=$38e003				SECTORS_PER_CLUSTER     = $38E003       ; 1 byte - The number of sectors in a cluster
=$38e004				FIRSTSECTOR             = $38E004       ; 4 bytes - The LBA of the first sector on the volume
=$38e008				SECTORCOUNT             = $38E008       ; 4 bytes - The number of sectors in the volume
=$38e00c				NUM_RSRV_SEC            = $38E00C       ; 2 bytes - The number of hidden or reserved sectors
=$38e00e				CLUSTER_SIZE            = $38E00E       ; 2 bytes - The size of a cluster in bytes
=$38e010				SEC_PER_FAT             = $38E010       ; 4 bytes - The number of sectors per FAT
=$38e014				FAT_BEGIN_LBA           = $38E014       ; 4 bytes - The LBA of the first sector of FAT #1
=$38e018				FAT2_BEGIN_LBA          = $38E018       ; 4 bytes - The LBA of the first sector of FAT #2
=$38e01c				CLUSTER_BEGIN_LBA       = $38E01C       ; 4 bytes - The LBA of the first cluster in the storage area
=$38e020				ROOT_DIR_FIRST_CLUSTER  = $38E020       ; 4 bytes - The number of the first cluster in the root directory
=$38e024				ROOT_DIR_MAX_ENTRY      = $38E024       ; 2 bytes - The maximum number of entries in the root directory (0 = no limit)
=$38e026				VOLUME_ID               = $38E026       ; 4 bytes - The ID of the volume
=$38e02a				DOS_CURR_CLUS           = $38E02A       ; 4 bytes - The current cluster (for delete)
=$38e02e				DOS_NEXT_CLUS           = $38E02E       ; 4 bytes - The next cluster in a file (for delete)
=$38e032				DOS_DIR_BLOCK_ID        = $38E032       ; 4 bytes - The ID of the current directory block
=$38e036				DOS_NEW_CLUSTER         = $38E036       ; 4 bytes - Space to store a newly written cluster ID
=$38e03a				DOS_SHORT_NAME          = $38E03A       ; 11 bytes - The short name for a desired file
=$38e045				DOS_DIR_TYPE            = $38E045       ; 1 byte - a code indicating the type of the current directory (0 = cluster based, $80 = sector based)
=$38e046				DOS_CURR_DIR_ID         = $38E046       ; 4 byte - the ID of the first sector or cluster of the current directory
=$38e04a				DOS_DEV_NAMES           = $38E04A       ; 4 byte - pointer to the linked list of device names
=$38e04e				FDC_MOTOR_TIMER         = $38E04E       ; 2 bytes - count-down timer to automatically turn off the FDC spindle motor
=$38e100				DOS_DIR_CLUSTER         = $38E100       ; 512 bytes - A buffer for directory entries
=$38e300				DOS_DIR_CLUSTER_END     = $38E300       ; The byte just past the end of the directory cluster buffer
=$38e300				DOS_SECTOR              = $38E300       ; 512 bytes - A buffer for block device read/write
=$38e500				DOS_SECTOR_END          = $38E500       ; The byte just past the end of the cluster buffer
=$38e500				DOS_FAT_SECTORS         = $38E500       ; 1024 bytes - two sectors worth of the FAT
=$38e900				DOS_FAT_SECTORS_END     = $38E900       ; The byte just past the end of the FAT buffers
=$38e900				DOS_SPARE_SECTOR        = $38E900       ; A spare 512 byte buffer for loading sectors
=$38eb00				DOS_SPARE_SECTOR_END    = $38EB00
=$38eb00				DOS_SPARE_FD            = $38EB00       ; A spare file descriptor buffer
.394315					DOS_INIT
.394315	8b		phb		                PHB
.394316	0b		phd		                PHD
.394317	08		php		                PHP
.394318	48		pha		                PHA             ; begin setdbr macro
.394319	08		php		                PHP
.39431a	e2 20		sep #$20	                SEP #$20        ; set A short
.39431c	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39431e	48		pha		                PHA
.39431f	ab		plb		                PLB
.394320	28		plp		                PLP
.394321	68		pla		                PLA             ; end setdbr macro
.394322	48		pha		                PHA             ; begin setdp macro
.394323	08		php		                PHP
.394324	c2 20		rep #$20	                REP #$20        ; set A long
.394326	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394329	5b		tcd		                TCD
.39432a	28		plp		                PLP
.39432b	68		pla		                PLA             ; end setdp macro
.39432c	c2 20		rep #$20	                REP #$20        ; set A long
.39432e	a9 ec 45	lda #$45ec	                LDA #<>DOS_HD_DESC      ; Initialize the device names list
.394331	8f 4a e0 38	sta $38e04a	                STA @l DOS_DEV_NAMES
.394335	a9 39 00	lda #$0039	                LDA #`DOS_HD_DESC
.394338	8f 4c e0 38	sta $38e04c	                STA @l DOS_DEV_NAMES+2
.39433c	e2 20		sep #$20	                SEP #$20        ; set A short
.39433e	a9 02		lda #$02	                LDA #BIOS_DEV_SD        ; Default to the SD card
.394340	85 01		sta $0321	                STA BIOS_DEV
.394342	28		plp		                PLP
.394343	2b		pld		                PLD
.394344	ab		plb		                PLB
.394345	6b		rtl		                RTL
.394346					DOS_MOUNT
.394346	8b		phb		                PHB
.394347	0b		phd		                PHD
.394348	08		php		                PHP
.394349	48		pha		                PHA             ; begin setdbr macro
.39434a	08		php		                PHP
.39434b	e2 20		sep #$20	                SEP #$20        ; set A short
.39434d	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39434f	48		pha		                PHA
.394350	ab		plb		                PLB
.394351	28		plp		                PLP
.394352	68		pla		                PLA             ; end setdbr macro
.394353	48		pha		                PHA             ; begin setdp macro
.394354	08		php		                PHP
.394355	c2 20		rep #$20	                REP #$20        ; set A long
.394357	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39435a	5b		tcd		                TCD
.39435b	28		plp		                PLP
.39435c	68		pla		                PLA             ; end setdp macro
.39435d	e2 20		sep #$20	                SEP #$20        ; set A short
.39435f	a5 01		lda $0321	                LDA BIOS_DEV            ; Check the device
.394361	c9 02		cmp #$02	                CMP #BIOS_DEV_SD        ; Is it the SDC?
.394363	f0 1f		beq $394384	                BEQ do_sdc_mount        ; Yes: attempt to mount it
.394365	c9 06		cmp #$06	                CMP #BIOS_DEV_HD0       ; Is it HD0?
.394367	f0 26		beq $39438f	                BEQ do_ide_mount        ; Yes: attempt to mount the IDE drive
.394369	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC       ; Is it the FDC?
.39436b	f0 0b		beq $394378	                BEQ do_fdc_mount        ; Yes: attempt to mount it
.39436d	a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return a bad device error
.39436f	85 0e		sta $032e	                STA DOS_STATUS
.394371	a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV
.394373	85 00		sta $0320	                STA BIOS_STATUS
.394375	82 47 01	brl $3944bf	                BRL ret_failure
.394378	22 dc 61 39	jsl $3961dc	do_fdc_mount    JSL FDC_MOUNT           ; Attempt to mount the floppy disk
.39437c	b0 03		bcs $394381	                BCS fdc_success
.39437e	82 3e 01	brl $3944bf	                BRL ret_failure
.394381	82 32 01	brl $3944b6	fdc_success     BRL ret_success
.394384	22 00 59 39	jsl $395900	do_sdc_mount    JSL SDC_INIT            ; Yes: Initialize access to the SDC
.394388	b0 10		bcs $39439a	                BCS get_mbr             ; Continue if success
.39438a	a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.39438c	82 30 01	brl $3944bf	                BRL ret_failure
.39438f	22 d1 65 39	jsl $3965d1	do_ide_mount    JSL IDE_INIT            ; Yes: Initialize access to the IDE drive
.394393	b0 05		bcs $39439a	                BCS get_mbr             ; Continue if success
.394395	a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.394397	82 25 01	brl $3944bf	                BRL ret_failure
.39439a					get_mbr
.39439a	c2 30		rep #$30	                REP #$30        ; set A&X long
.39439c	64 02		stz $0322	                STZ BIOS_LBA            ; Get the MBR
.39439e	64 04		stz $0324	                STZ BIOS_LBA+2
.3943a0	a9 00 e3	lda #$e300	                LDA #<>DOS_SECTOR       ; Into DOS_SECTOR
.3943a3	85 06		sta $0326	                STA BIOS_BUFF_PTR
.3943a5	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.3943a8	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3943aa	22 44 10 38	jsl $381044	                JSL GETBLOCK            ; Try to read the MBR
.3943ae	b0 07		bcs $3943b7	                BCS chk_signature       ; If success, check the signature bytes
.3943b0	e2 20		sep #$20	                SEP #$20        ; set A short
.3943b2	a9 01		lda #$01	                LDA #DOS_ERR_READ       ; Otherwise: report we couldn't read the first sector
.3943b4	82 08 01	brl $3944bf	                BRL ret_failure
.3943b7					chk_signature
.3943b7	e2 20		sep #$20	                SEP #$20        ; set A short
.3943b9	ad fe e4	lda $38e4fe	                LDA DOS_SECTOR+MBR_SIGNATURE
.3943bc	c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.3943be	d0 07		bne $3943c7	                BNE not_mbr             ; No: signal we could find the MBR
.3943c0	ad ff e4	lda $38e4ff	                LDA DOS_SECTOR+MBR_SIGNATURE+1
.3943c3	c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.3943c5	f0 05		beq $3943cc	                BEQ chk_part_type       ; Yes: we have an MBR
.3943c7	a9 02		lda #$02	not_mbr         LDA #DOS_ERR_NOTMBR     ; Return that we didn't find the MBR
.3943c9	82 f3 00	brl $3944bf	                BRL ret_failure
.3943cc	ad c2 e4	lda $38e4c2	chk_part_type   LDA DOS_SECTOR+PART0_OFF+PART_TYPE_OFF
.3943cf	c9 0c		cmp #$0c	                CMP #PART_TYPE_FAT32_LBA
.3943d1	f0 05		beq $3943d8	                BEQ get_LBA             ; Is FAT32 with LBA?
.3943d3	a9 03		lda #$03	                LDA #DOS_ERR_NOFAT32    ; No: return No FAT32 found error
.3943d5	82 e7 00	brl $3944bf	                BRL ret_failure
.3943d8	8d 01 e0	sta $38e001	get_LBA         STA FILE_SYSTEM         ; Save the file system of the partition
.3943db	c2 20		rep #$20	                REP #$20        ; set A long
.3943dd	ad c6 e4	lda $38e4c6	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF
.3943e0	8d 04 e0	sta $38e004	                STA FIRSTSECTOR
.3943e3	ad c8 e4	lda $38e4c8	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF+2
.3943e6	8d 06 e0	sta $38e006	                STA FIRSTSECTOR+2
.3943e9	ad cb e4	lda $38e4cb	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF
.3943ec	8d 08 e0	sta $38e008	                STA SECTORCOUNT
.3943ef	ad cd e4	lda $38e4cd	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF+2
.3943f2	8d 0a e0	sta $38e00a	                STA SECTORCOUNT+2
.3943f5	e2 20		sep #$20	                SEP #$20        ; set A short
.3943f7	a5 01		lda $0321	                LDA BIOS_DEV            ; Save the device number
.3943f9	8d 00 e0	sta $38e000	                STA DEVICE
.3943fc	a9 00		lda #$00	                LDA #0
.3943fe	8d 02 e0	sta $38e002	                STA PARTITION           ; For the moment, we only support the first partition
.394401	c2 20		rep #$20	                REP #$20        ; set A long
.394403	a9 00 e3	lda #$e300	                LDA #<>DOS_SECTOR
.394406	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394408	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.39440b	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.39440d	ad 04 e0	lda $38e004	                LDA FIRSTSECTOR
.394410	85 02		sta $0322	                STA BIOS_LBA
.394412	ad 06 e0	lda $38e006	                LDA FIRSTSECTOR+2
.394415	85 04		sta $0324	                STA BIOS_LBA+2
.394417	22 44 10 38	jsl $381044	                JSL GETBLOCK            ; Attempt to load the volume ID
.39441b	b0 1c		bcs $394439	                BCS get_first_sec       ; Got it? Start parsing it
.39441d	e2 20		sep #$20	                SEP #$20        ; set A short
.39441f	a9 05		lda #$05	                LDA #DOS_ERR_VOLID      ; Otherwise: return an error
.394421	82 9b 00	brl $3944bf	                BRL ret_failure
.394424					chk_bpb_sig
.394424	e2 20		sep #$20	                SEP #$20        ; set A short
.394426	ad fe e4	lda $38e4fe	                LDA DOS_SECTOR+BPB_SIGNATURE
.394429	c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.39442b	d0 07		bne $394434	                BNE not_bpb             ; No: signal we could find the volume ID
.39442d	ad ff e4	lda $38e4ff	                LDA DOS_SECTOR+BPB_SIGNATURE+1
.394430	c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.394432	f0 05		beq $394439	                BEQ get_first_sec       ; Yes: we have an volume ID
.394434	a9 05		lda #$05	not_bpb         LDA #DOS_ERR_VOLID      ; Return that we didn't find the Volume ID (BPB)
.394436	82 86 00	brl $3944bf	                BRL ret_failure
.394439					get_first_sec
.394439	c2 20		rep #$20	                REP #$20        ; set A long
.39443b	ad 2c e3	lda $38e32c	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF
.39443e	8d 20 e0	sta $38e020	                STA ROOT_DIR_FIRST_CLUSTER
.394441	ad 2e e3	lda $38e32e	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF+2
.394444	8d 22 e0	sta $38e022	                STA ROOT_DIR_FIRST_CLUSTER+2
.394447	ad 0e e3	lda $38e30e	                LDA DOS_SECTOR+BPB_RSRVCLUS_OFF
.39444a	8d 0c e0	sta $38e00c	                STA NUM_RSRV_SEC
.39444d	18		clc		                CLC                     ; fat_begin_lba := FirstSector + Number_of_Reserved_Sectors
.39444e	ad 04 e0	lda $38e004	                LDA FIRSTSECTOR
.394451	6d 0c e0	adc $38e00c	                ADC NUM_RSRV_SEC
.394454	8d 14 e0	sta $38e014	                STA FAT_BEGIN_LBA
.394457	ad 06 e0	lda $38e006	                LDA FIRSTSECTOR+2
.39445a	69 00 00	adc #$0000	                ADC #0
.39445d	8d 16 e0	sta $38e016	                STA FAT_BEGIN_LBA+2
.394460	ad 24 e3	lda $38e324	                LDA DOS_SECTOR+BPB_SECPERFAT_OFF
.394463	8d 10 e0	sta $38e010	                STA SEC_PER_FAT
.394466	ad 26 e3	lda $38e326	                LDA DOS_SECTOR+BPB_SECPERFAT_OFF+2
.394469	8d 12 e0	sta $38e012	                STA SEC_PER_FAT+2
.39446c	ad 10 e0	lda $38e010	                LDA SEC_PER_FAT
.39446f	0a		asl a		                ASL A
.394470	8d 1c e0	sta $38e01c	                STA CLUSTER_BEGIN_LBA
.394473	ad 12 e0	lda $38e012	                LDA SEC_PER_FAT+2
.394476	2a		rol a		                ROL A
.394477	8d 1e e0	sta $38e01e	                STA CLUSTER_BEGIN_LBA+2
.39447a	18		clc		                CLC
.39447b	ad 1c e0	lda $38e01c	                LDA CLUSTER_BEGIN_LBA                    ; Sectors Per FAT * 2 + fat_begin_lba
.39447e	6d 14 e0	adc $38e014	                ADC FAT_BEGIN_LBA
.394481	8d 1c e0	sta $38e01c	                STA CLUSTER_BEGIN_LBA
.394484	ad 1e e0	lda $38e01e	                LDA CLUSTER_BEGIN_LBA+2
.394487	6d 16 e0	adc $38e016	                ADC FAT_BEGIN_LBA+2
.39448a	8d 1e e0	sta $38e01e	                STA CLUSTER_BEGIN_LBA+2
.39448d	e2 20		sep #$20	                SEP #$20        ; set A short
.39448f	ad 0d e3	lda $38e30d	                LDA DOS_SECTOR+BPB_SECPERCLUS_OFF
.394492	8d 03 e0	sta $38e003	                STA SECTORS_PER_CLUSTER
.394495	c2 20		rep #$20	                REP #$20        ; set A long
.394497	29 ff 00	and #$00ff	                AND #$00FF
.39449a	48		pha		                PHA                                     ; Save the number of sectors per cluster
.39449b	a9 00 02	lda #$0200	                LDA #<>DOS_SECTOR_SIZE                  ; Default to one sector's worth of bytes
.39449e	8d 0e e0	sta $38e00e	                STA CLUSTER_SIZE
.3944a1	a9 00 00	lda #$0000	                LDA #`DOS_SECTOR_SIZE
.3944a4	8d 10 e0	sta $38e010	                STA CLUSTER_SIZE+2
.3944a7	68		pla		                PLA                                     ; Restore the number of sectors per cluster
.3944a8	c9 01 00	cmp #$0001	clus_size_loop  CMP #1                                  ; If there's only one cluster, return success
.3944ab	f0 09		beq $3944b6	                BEQ ret_success
.3944ad	0e 0e e0	asl $38e00e	                ASL CLUSTER_SIZE                        ; Otherwise, multiply the number of bytes by 2
.3944b0	2e 10 e0	rol $38e010	                ROL CLUSTER_SIZE+2
.3944b3	4a		lsr a		                LSR A                                   ; And divide the number of sectors by 2
.3944b4	80 f2		bra $3944a8	                BRA clus_size_loop
.3944b6					ret_success
.3944b6	e2 20		sep #$20	                SEP #$20        ; set A short
.3944b8	64 0e		stz $032e	                STZ DOS_STATUS          ; Set status code to 0
.3944ba	28		plp		                PLP
.3944bb	2b		pld		                PLD
.3944bc	ab		plb		                PLB
.3944bd	38		sec		                SEC
.3944be	6b		rtl		                RTL
.3944bf					ret_failure
.3944bf	e2 20		sep #$20	                SEP #$20        ; set A short
.3944c1	85 0e		sta $032e	                STA DOS_STATUS          ; Save the status code
.3944c3	28		plp		                PLP
.3944c4	2b		pld		                PLD
.3944c5	ab		plb		                PLB
.3944c6	18		clc		                CLC
.3944c7	6b		rtl		                RTL
.3944c8					DOS_TESTBOOT
.3944c8	da		phx		                PHX
.3944c9	08		php		                PHP
.3944ca	c2 10		rep #$10	                REP #$10        ; set X long
.3944cc	e2 20		sep #$20	                SEP #$20        ; set A short
.3944ce	af 3e e3 38	lda $38e33e	                LDA @l DOS_SECTOR+FDC_BOOT_START
.3944d2	c9 80		cmp #$80	                CMP #$80                    ; Is the first byte a BRL instruction?
.3944d4	d0 2b		bne $394501	                BNE done                    ; No: just return
.3944d6	a2 00 00	ldx #$0000	                LDX #0
.3944d9	bf 03 e3 38	lda $38e303,x	magic_loop      LDA @l DOS_SECTOR+3,X       ; Check the "vendor" byte
.3944dd	df 04 45 39	cmp $394504,x	                CMP DOS_BOOT_MAGIC,X        ; Compare it against our boot magic code
.3944e1	d0 1e		bne $394501	                BNE done                    ; If it's not equal, just return
.3944e3	e8		inx		                INX                         ; Otherwise, check the next one
.3944e4	e0 08 00	cpx #$0008	                CPX #8
.3944e7	d0 f0		bne $3944d9	                BNE magic_loop              ; Until we've checked all 8 bytes
.3944e9	c2 20		rep #$20	                REP #$20        ; set A long
.3944eb	a2 00 00	ldx #$0000	                LDX #0
.3944ee	bf 00 e3 38	lda $38e300,x	copy_loop       LDA @l DOS_SECTOR,X         ; Copy the DOS_SECTOR to DOS_SPARE_SECTOR
.3944f2	9f 00 e9 38	sta $38e900,x	                STA @l DOS_SPARE_SECTOR,X
.3944f6	e8		inx		                INX
.3944f7	e8		inx		                INX
.3944f8	e0 00 02	cpx #$0200	                CPX #512
.3944fb	d0 f1		bne $3944ee	                BNE copy_loop
.3944fd	5c 3e e9 38	jmp $38e93e	                JML DOS_SPARE_SECTOR+FDC_BOOT_START
.394501	28		plp		done            PLP
.394502	fa		plx		                PLX
.394503	6b		rtl		                RTL
>394504	43 32 35 36 44 4f 53 20		DOS_BOOT_MAGIC  .text "C256DOS "
.39450c					DOS_CALC_LBA
.39450c	8b		phb		                PHB
.39450d	0b		phd		                PHD
.39450e	08		php		                PHP
.39450f	48		pha		                PHA             ; begin setdbr macro
.394510	08		php		                PHP
.394511	e2 20		sep #$20	                SEP #$20        ; set A short
.394513	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394515	48		pha		                PHA
.394516	ab		plb		                PLB
.394517	28		plp		                PLP
.394518	68		pla		                PLA             ; end setdbr macro
.394519	48		pha		                PHA             ; begin setdp macro
.39451a	08		php		                PHP
.39451b	c2 20		rep #$20	                REP #$20        ; set A long
.39451d	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394520	5b		tcd		                TCD
.394521	28		plp		                PLP
.394522	68		pla		                PLA             ; end setdp macro
.394523	c2 20		rep #$20	                REP #$20        ; set A long
.394525	38		sec		                SEC
.394526	a5 10		lda $0330	                LDA DOS_CLUS_ID                     ; cluster - 2
.394528	e9 02 00	sbc #$0002	                SBC #2
.39452b	85 28		sta $0348	                STA DOS_TEMP
.39452d	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.39452f	e9 00 00	sbc #$0000	                SBC #0
.394532	85 2a		sta $034a	                STA DOS_TEMP+2
.394534	e2 10		sep #$10	                SEP #$10        ; set X short
.394536	ae 03 e0	ldx $38e003	                LDX SECTORS_PER_CLUSTER
.394539	e0 01		cpx #$01	mult_loop       CPX #1
.39453b	f0 07		beq $394544	                BEQ add_offset
.39453d	06 28		asl $0348	                ASL DOS_TEMP
.39453f	26 28		rol $0348	                ROL DOS_TEMP
.394541	ca		dex		                DEX
.394542	80 f5		bra $394539	                BRA mult_loop
.394544	18		clc		add_offset      CLC
.394545	a5 28		lda $0348	                LDA DOS_TEMP                        ; cluster_being_lba + (cluster - 2) * SECTORS_PER_CLUSTER
.394547	6d 1c e0	adc $38e01c	                ADC CLUSTER_BEGIN_LBA
.39454a	85 02		sta $0322	                STA BIOS_LBA
.39454c	a5 2a		lda $034a	                LDA DOS_TEMP+2
.39454e	6d 1e e0	adc $38e01e	                ADC CLUSTER_BEGIN_LBA+2
.394551	85 04		sta $0324	                STA BIOS_LBA+2
.394553	28		plp		                PLP
.394554	2b		pld		                PLD
.394555	ab		plb		                PLB
.394556	6b		rtl		                RTL
.394557					DOS_GETCLUSTER
.394557	8b		phb		                PHB
.394558	0b		phd		                PHD
.394559	08		php		                PHP
.39455a	48		pha		                PHA             ; begin setdbr macro
.39455b	08		php		                PHP
.39455c	e2 20		sep #$20	                SEP #$20        ; set A short
.39455e	a9 00		lda #$00	                LDA #0
.394560	48		pha		                PHA
.394561	ab		plb		                PLB
.394562	28		plp		                PLP
.394563	68		pla		                PLA             ; end setdbr macro
.394564	48		pha		                PHA             ; begin setdp macro
.394565	08		php		                PHP
.394566	c2 20		rep #$20	                REP #$20        ; set A long
.394568	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39456b	5b		tcd		                TCD
.39456c	28		plp		                PLP
.39456d	68		pla		                PLA             ; end setdp macro
.39456e	c2 20		rep #$20	                REP #$20        ; set A long
.394570	a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.394572	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394574	a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.394576	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394578	22 0c 45 39	jsl $39450c	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.39457c	22 44 10 38	jsl $381044	                JSL GETBLOCK                        ; Get the first block of the cluster
.394580	90 09		bcc $39458b	                BCC ret_failure
.394582					ret_success
.394582	e2 20		sep #$20	                SEP #$20        ; set A short
.394584	64 0e		stz $032e	                STZ DOS_STATUS
.394586	28		plp		                PLP
.394587	2b		pld		                PLD
.394588	ab		plb		                PLB
.394589	38		sec		                SEC
.39458a	6b		rtl		                RTL
.39458b					ret_failure
.39458b	e2 20		sep #$20	                SEP #$20        ; set A short
.39458d	85 0e		sta $032e	                STA DOS_STATUS
.39458f	28		plp		                PLP
.394590	2b		pld		                PLD
.394591	ab		plb		                PLB
.394592	18		clc		                CLC
.394593	6b		rtl		                RTL
.394594					DOS_PUTCLUSTER
.394594	8b		phb		                PHB
.394595	0b		phd		                PHD
.394596	08		php		                PHP
.394597	48		pha		                PHA             ; begin setdbr macro
.394598	08		php		                PHP
.394599	e2 20		sep #$20	                SEP #$20        ; set A short
.39459b	a9 00		lda #$00	                LDA #0
.39459d	48		pha		                PHA
.39459e	ab		plb		                PLB
.39459f	28		plp		                PLP
.3945a0	68		pla		                PLA             ; end setdbr macro
.3945a1	48		pha		                PHA             ; begin setdp macro
.3945a2	08		php		                PHP
.3945a3	c2 20		rep #$20	                REP #$20        ; set A long
.3945a5	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3945a8	5b		tcd		                TCD
.3945a9	28		plp		                PLP
.3945aa	68		pla		                PLA             ; end setdp macro
.3945ab	c2 20		rep #$20	                REP #$20        ; set A long
.3945ad	a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.3945af	85 06		sta $0326	                STA BIOS_BUFF_PTR
.3945b1	a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.3945b3	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3945b5	22 0c 45 39	jsl $39450c	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.3945b9	22 24 10 38	jsl $381024	                JSL PUTBLOCK                        ; PUT the first block of the cluster
.3945bd	90 09		bcc $3945c8	                BCC ret_failure
.3945bf					ret_success
.3945bf	e2 20		sep #$20	                SEP #$20        ; set A short
.3945c1	64 0e		stz $032e	                STZ DOS_STATUS
.3945c3	28		plp		                PLP
.3945c4	2b		pld		                PLD
.3945c5	ab		plb		                PLB
.3945c6	38		sec		                SEC
.3945c7	6b		rtl		                RTL
.3945c8					ret_failure
.3945c8	e2 20		sep #$20	                SEP #$20        ; set A short
.3945ca	85 0e		sta $032e	                STA DOS_STATUS
.3945cc	28		plp		                PLP
.3945cd	2b		pld		                PLD
.3945ce	ab		plb		                PLB
.3945cf	18		clc		                CLC
.3945d0	6b		rtl		                RTL
>3945d1	40 46 00			DOS_FDC_NAME    .null "@F"
.3945d4					DOS_FDC_DESC
>3945d4	d1 45 39 00			DEVNAME         .dword DOS_FDC_NAME            ; A pointer to the ASCIIZ name of the device
>3945d8	00				DEVNUMBER       .byte BIOS_DEV_FDC           ; The BIOS_DEV number for the device
>3945d9	00 00 00 00			NEXT            .dword 0            ; A pointer to the next device descriptor
>3945dd	40 53 00			DOS_SDC_NAME    .null "@S"
.3945e0					DOS_SDC_DESC
>3945e0	dd 45 39 00			DEVNAME         .dword DOS_SDC_NAME            ; A pointer to the ASCIIZ name of the device
>3945e4	02				DEVNUMBER       .byte BIOS_DEV_SD           ; The BIOS_DEV number for the device
>3945e5	d4 45 39 00			NEXT            .dword DOS_FDC_DESC            ; A pointer to the next device descriptor
>3945e9	40 48 00			DOS_HDC_NAME    .null "@H"
.3945ec					DOS_HD_DESC
>3945ec	e9 45 39 00			DEVNAME         .dword DOS_HDC_NAME            ; A pointer to the ASCIIZ name of the device
>3945f0	06				DEVNUMBER       .byte BIOS_DEV_HD0           ; The BIOS_DEV number for the device
>3945f1	e0 45 39 00			NEXT            .dword DOS_SDC_DESC            ; A pointer to the next device descriptor
.3945f5					DOS_PARSE_DEV
.3945f5	8b		phb		                PHB
.3945f6	0b		phd		                PHD
.3945f7	08		php		                PHP
.3945f8	48		pha		                PHA             ; begin setdbr macro
.3945f9	08		php		                PHP
.3945fa	e2 20		sep #$20	                SEP #$20        ; set A short
.3945fc	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3945fe	48		pha		                PHA
.3945ff	ab		plb		                PLB
.394600	28		plp		                PLP
.394601	68		pla		                PLA             ; end setdbr macro
.394602	48		pha		                PHA             ; begin setdp macro
.394603	08		php		                PHP
.394604	c2 20		rep #$20	                REP #$20        ; set A long
.394606	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394609	5b		tcd		                TCD
.39460a	28		plp		                PLP
.39460b	68		pla		                PLA             ; end setdp macro
.39460c	c2 30		rep #$30	                REP #$30        ; set A&X long
.39460e	af 4a e0 38	lda $38e04a	                LDA @l DOS_DEV_NAMES        ; Point to the first device name to check
.394612	85 28		sta $0348	                STA DOS_TEMP
.394614	af 4c e0 38	lda $38e04c	                LDA @l DOS_DEV_NAMES+2
.394618	85 2a		sta $034a	                STA DOS_TEMP+2
.39461a	a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF        ; Make DOS_STR2_PTR point to the path to check
.39461d	85 48		sta $0368	                STA DOS_STR2_PTR
.39461f	a9 00 00	lda #$0000	                LDA #`DOS_PATH_BUFF
.394622	85 4a		sta $036a	                STA DOS_STR2_PTR+2
.394624	a0 00 00	ldy #$0000	dev_loop        LDY #DEVICE_DESC.DEVNAME    ; Get the name of the current device into DOS_STR1_PTR
.394627	b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.394629	85 44		sta $0364	                STA DOS_STR1_PTR
.39462b	c8		iny		                INY
.39462c	c8		iny		                INY
.39462d	b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.39462f	85 46		sta $0366	                STA DOS_STR1_PTR+2
.394631	e2 20		sep #$20	                SEP #$20        ; set A short
.394633	a0 00 00	ldy #$0000	                LDY #0
.394636	b7 44		lda [$0364],y	cmp_loop        LDA [DOS_STR1_PTR],Y        ; Get the Yth character of the device name
.394638	f0 24		beq $39465e	                BEQ found                   ; If it's NULL, we found a match
.39463a	d7 48		cmp [$0368],y	                CMP [DOS_STR2_PTR],Y        ; Compare it to the Yth character of the path
.39463c	d0 03		bne $394641	                BNE next_device             ; If no match, try to load the next device
.39463e	c8		iny		                INY                         ; Go to the next character
.39463f	80 f5		bra $394636	                BRA cmp_loop
.394641					next_device
.394641	c2 20		rep #$20	                REP #$20        ; set A long
.394643	a0 05 00	ldy #$0005	                LDY #DEVICE_DESC.NEXT       ; DOS_TEMP := DOS_TEMP->NEXT
.394646	b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.394648	48		pha		                PHA
.394649	c8		iny		                INY
.39464a	c8		iny		                INY
.39464b	b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.39464d	85 2a		sta $034a	                STA DOS_TEMP+2
.39464f	68		pla		                PLA
.394650	85 28		sta $0348	                STA DOS_TEMP
.394652	a5 28		lda $0348	                LDA DOS_TEMP                ; Is DOS_TEMP = NULL?
.394654	d0 ce		bne $394624	                BNE dev_loop                ; No: check this device
.394656	a5 2a		lda $034a	                LDA DOS_TEMP+2
.394658	d0 ca		bne $394624	                BNE dev_loop
.39465a	28		plp		done            PLP                         ; Otherwise, return having not found a match
.39465b	2b		pld		                PLD
.39465c	ab		plb		                PLB
.39465d	6b		rtl		                RTL
.39465e	22 6f 46 39	jsl $39466f	found           JSL DOS_ADJUSTPATH          ; Remove the device name from the buffer
.394662	e2 20		sep #$20	                SEP #$20        ; set A short
.394664	a0 04 00	ldy #$0004	                LDY #DEVICE_DESC.DEVNUMBER  ; Set the BIOS device number from the found device
.394667	b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.394669	8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.39466d	80 eb		bra $39465a	                BRA done
.39466f					DOS_ADJUSTPATH
.39466f	da		phx		                PHX
.394670	5a		phy		                PHY
.394671	8b		phb		                PHB
.394672	0b		phd		                PHD
.394673	08		php		                PHP
.394674	48		pha		                PHA             ; begin setdbr macro
.394675	08		php		                PHP
.394676	e2 20		sep #$20	                SEP #$20        ; set A short
.394678	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39467a	48		pha		                PHA
.39467b	ab		plb		                PLB
.39467c	28		plp		                PLP
.39467d	68		pla		                PLA             ; end setdbr macro
.39467e	48		pha		                PHA             ; begin setdp macro
.39467f	08		php		                PHP
.394680	c2 20		rep #$20	                REP #$20        ; set A long
.394682	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394685	5b		tcd		                TCD
.394686	28		plp		                PLP
.394687	68		pla		                PLA             ; end setdp macro
.394688	c2 30		rep #$30	                REP #$30        ; set A&X long
.39468a	84 4b		sty $036b	                STY DOS_SCRATCH                 ; Save the index to later compute the size
.39468c	98		tya		                TYA                             ; Compute the address of the first source byte
.39468d	18		clc		                CLC
.39468e	69 00 04	adc #$0400	                ADC #<>DOS_PATH_BUFF
.394691	aa		tax		                TAX
.394692	a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF            ; Compute the destination address for the source byte
.394695	a8		tay		                TAY
.394696	38		sec		                SEC                             ; Compute the number of bytes to copy
.394697	a9 00 01	lda #$0100	                LDA #256
.39469a	e5 4b		sbc $036b	                SBC DOS_SCRATCH
.39469c	54 00 00	mvn $00,$00	                MVN #`DOS_PATH_BUFF, #`DOS_PATH_BUFF
.39469f	28		plp		                PLP
.3946a0	2b		pld		                PLD
.3946a1	ab		plb		                PLB
.3946a2	7a		ply		                PLY
.3946a3	fa		plx		                PLX
.3946a4	6b		rtl		                RTL
.3946a5					DOS_PARSE_PATH
.3946a5	8b		phb		                PHB
.3946a6	0b		phd		                PHD
.3946a7	08		php		                PHP
.3946a8	48		pha		                PHA             ; begin setdbr macro
.3946a9	08		php		                PHP
.3946aa	e2 20		sep #$20	                SEP #$20        ; set A short
.3946ac	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3946ae	48		pha		                PHA
.3946af	ab		plb		                PLB
.3946b0	28		plp		                PLP
.3946b1	68		pla		                PLA             ; end setdbr macro
.3946b2	48		pha		                PHA             ; begin setdp macro
.3946b3	08		php		                PHP
.3946b4	c2 20		rep #$20	                REP #$20        ; set A long
.3946b6	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3946b9	5b		tcd		                TCD
.3946ba	28		plp		                PLP
.3946bb	68		pla		                PLA             ; end setdp macro
.3946bc	c2 10		rep #$10	                REP #$10        ; set X long
.3946be	e2 20		sep #$20	                SEP #$20        ; set A short
.3946c0	a2 00 00	ldx #$0000	                LDX #0
.3946c3	b5 e0		lda $0400,x	upcase_loop     LDA DOS_PATH_BUFF,X     ; Get the character
.3946c5	f0 1b		beq $3946e2	                BEQ parse_dev           ; If it's NULL, the path is upper case, attempt to parse the device
.3946c7	c9 20		cmp #$20	                CMP #' '                ; Is a control character?
.3946c9	b0 05		bcs $3946d0	                BGE check_case          ; No: check the case
.3946cb	a9 07		lda #$07	                LDA #DOS_ERR_BADPATH    ; Yes: return a bad path error
.3946cd	82 64 00	brl $394734	                BRL ret_failure
.3946d0	c9 61		cmp #$61	check_case      CMP #'a'                ; Is the character lower case?
.3946d2	90 08		bcc $3946dc	                BLT next_char
.3946d4	c9 7b		cmp #$7b	                CMP #'z'+1
.3946d6	b0 04		bcs $3946dc	                BGE next_char
.3946d8	29 5f		and #$5f	                AND #%01011111          ; Yes: Convert to uppercase
.3946da	95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.3946dc	e8		inx		next_char       INX                     ; Move to the next character
.3946dd	e0 00 01	cpx #$0100	                CPX #$100
.3946e0	d0 e1		bne $3946c3	                BNE upcase_loop
.3946e2	22 f5 45 39	jsl $3945f5	parse_dev       JSL DOS_PARSE_DEV       ; Parse and extract a device specifier ":xxx:"
.3946e6	a5 e0		lda $0400	                LDA DOS_PATH_BUFF       ; Check the first character of the path
.3946e8	c9 3a		cmp #$3a	                CMP #':'
.3946ea	d0 07		bne $3946f3	                BNE clr_name            ; If not colon, treat it as a file name
.3946ec	a0 01 00	ldy #$0001	                LDY #1                  ; Otherwise...
.3946ef	22 6f 46 39	jsl $39466f	                JSL DOS_ADJUSTPATH      ; For now, just remove the leading ":"
.3946f3	a0 00 00	ldy #$0000	clr_name        LDY #0                  ; Set the short name to blanks
.3946f6	a9 20		lda #$20	                LDA #' '
.3946f8	99 3a e0	sta $38e03a,y	clr_loop        STA DOS_SHORT_NAME,Y
.3946fb	c8		iny		                INY
.3946fc	c0 0b 00	cpy #$000b	                CPY #11
.3946ff	d0 f7		bne $3946f8	                BNE clr_loop
.394701	a2 00 00	ldx #$0000	                LDX #0
.394704	a0 00 00	ldy #$0000	                LDY #0
.394707	b5 e0		lda $0400,x	cpy_name_loop   LDA DOS_PATH_BUFF,X     ; Get the character of the name
.394709	f0 20		beq $39472b	                BEQ ret_success         ; If NULL: we've finished parsing the path
.39470b	c9 2e		cmp #$2e	                CMP #'.'                ; If it's a dot, we've finished the name part
.39470d	f0 0a		beq $394719	                BEQ cpy_ext             ; And move to the extension
.39470f	99 3a e0	sta $38e03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, store it to the name portion
.394712	e8		inx		                INX
.394713	c8		iny		                INY                     ; Move to the next character
.394714	c0 08 00	cpy #$0008	                CPY #8                  ; Have we processed 8?
.394717	d0 ee		bne $394707	                BNE cpy_name_loop       ; No: process this one
.394719	e8		inx		cpy_ext         INX                     ; Skip the dot
.39471a	a0 08 00	ldy #$0008	                LDY #8
.39471d	b5 e0		lda $0400,x	cpy_ext_loop    LDA DOS_PATH_BUFF,X     ; Get the character of the extension
.39471f	f0 0a		beq $39472b	                BEQ ret_success         ; If it's NULL, we've finished
.394721	99 3a e0	sta $38e03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, copy it to the short name
.394724	e8		inx		                INX
.394725	c8		iny		                INY                     ; Move to the next character
.394726	c0 0b 00	cpy #$000b	                CPY #11                 ; Have we processed the three ext characters?
.394729	d0 f2		bne $39471d	                BNE cpy_ext_loop        ; No: process this one
.39472b					ret_success
.39472b	e2 20		sep #$20	                SEP #$20        ; set A short
.39472d	64 0e		stz $032e	                STZ DOS_STATUS
.39472f	28		plp		                PLP
.394730	2b		pld		                PLD
.394731	ab		plb		                PLB
.394732	38		sec		                SEC
.394733	6b		rtl		                RTL
.394734					ret_failure
.394734	e2 20		sep #$20	                SEP #$20        ; set A short
.394736	85 0e		sta $032e	                STA DOS_STATUS
.394738	28		plp		                PLP
.394739	2b		pld		                PLD
.39473a	ab		plb		                PLB
.39473b	18		clc		                CLC
.39473c	6b		rtl		                RTL
.39473d					DOS_FINDFILE
.39473d	8b		phb		                PHB
.39473e	0b		phd		                PHD
.39473f	08		php		                PHP
.394740	48		pha		                PHA             ; begin setdbr macro
.394741	08		php		                PHP
.394742	e2 20		sep #$20	                SEP #$20        ; set A short
.394744	a9 00		lda #$00	                LDA #0
.394746	48		pha		                PHA
.394747	ab		plb		                PLB
.394748	28		plp		                PLP
.394749	68		pla		                PLA             ; end setdbr macro
.39474a	48		pha		                PHA             ; begin setdp macro
.39474b	08		php		                PHP
.39474c	c2 20		rep #$20	                REP #$20        ; set A long
.39474e	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394751	5b		tcd		                TCD
.394752	28		plp		                PLP
.394753	68		pla		                PLA             ; end setdp macro
.394754	c2 30		rep #$30	                REP #$30        ; set A&X long
.394756	22 a5 46 39	jsl $3946a5	                JSL DOS_PARSE_PATH              ; Break out the path into its components
.39475a	b0 05		bcs $394761	                BCS mount                       ; If success: try to open the directory
.39475c	28		plp		pass_failure    PLP                             ; If failure, just pass the failure back up
.39475d	2b		pld		                PLD
.39475e	ab		plb		                PLB
.39475f	18		clc		                CLC
.394760	6b		rtl		                RTL
.394761	22 46 43 39	jsl $394346	mount           JSL DOS_MOUNT
.394765					get_directory
.394765	c2 20		rep #$20	                REP #$20        ; set A long
.394767	22 9c 40 39	jsl $39409c	                JSL DOS_DIROPEN                 ; Get the directory
.39476b	b0 07		bcs $394774	                BCS scan_entries                ; If success: start scanning the directory entries
.39476d	e2 20		sep #$20	                SEP #$20        ; set A short
.39476f	a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Otherwise: return a no directory error
.394771	82 47 00	brl $3947bb	                BRL ret_failure
.394774	22 1b 41 39	jsl $39411b	scan_entries    JSL DOS_DIRFIRST                ; Move the DIR pointer to the beginning of the sector
.394778					scan_loop
.394778	e2 20		sep #$20	                SEP #$20        ; set A short
.39477a	a0 00 00	ldy #$0000	                LDY #0
.39477d	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y             ; Check the directory entry
.39477f	d0 05		bne $394786	                BNE chk_unused                  ; If there's an entry, check to see if it's unused
.394781	a9 09		lda #$09	                LDA #DOS_ERR_NOTFOUND           ; If end-of-directory, we couldn't find a match
.394783	82 35 00	brl $3947bb	                BRL ret_failure
.394786	c9 e5		cmp #$e5	chk_unused      CMP #DOS_DIR_ENT_UNUSED         ; If it's unused...
.394788	f0 26		beq $3947b0	                BEQ next_entry                  ; Go to the next entry
.39478a	a0 0b 00	ldy #$000b	                LDY #DIRENTRY.ATTRIBUTE         ; Check the entry's attributes
.39478d	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.39478f	89 08		bit #$08	                BIT #DOS_ATTR_VOLUME            ; Is it a volume name?
.394791	d0 1d		bne $3947b0	                BNE next_entry                  ; Yes: skip it!
.394793	29 0f		and #$0f	                AND #DOS_ATTR_LONGNAME
.394795	c9 0f		cmp #$0f	                CMP #DOS_ATTR_LONGNAME          ; Is it a long name field?
.394797	f0 17		beq $3947b0	                BEQ next_entry                  ; Yes: skip it!
.394799	a2 00 00	ldx #$0000	                LDX #0
.39479c	a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME
.39479f	b7 18		lda [$0338],y	scan_cmp_loop   LDA [DOS_DIR_PTR],Y             ; Get the X'th character of the entry
.3947a1	df 3a e0 38	cmp $38e03a,x	                CMP DOS_SHORT_NAME,X            ; And compare to the X'th character of the name we want
.3947a5	d0 09		bne $3947b0	                BNE next_entry                  ; If not equal: try the next entry
.3947a7	c8		iny		                INY                             ; Advance to the next character
.3947a8	e8		inx		                INX
.3947a9	e0 0b 00	cpx #$000b	                CPX #11                         ; Did we reach the end of the names?
.3947ac	f0 16		beq $3947c4	                BEQ match                       ; Yes: we have a match!
.3947ae	80 ef		bra $39479f	                BRA scan_cmp_loop               ; No: keep checking
.3947b0	22 36 41 39	jsl $394136	next_entry      JSL DOS_DIRNEXT                 ; Try to get the next directory entry
.3947b4	90 05		bcc $3947bb	                BCC ret_failure                 ; If we're at the end of the directory, return a failure.
.3947b6	82 bf ff	brl $394778	                BRL scan_loop                   ; If found: keep scanning
.3947b9	a9 08		lda #$08	bad_dir         LDA #DOS_ERR_NODIR              ; Otherwise: fail with a NODIR error (maybe something else is better)
.3947bb					ret_failure
.3947bb	e2 20		sep #$20	                SEP #$20        ; set A short
.3947bd	85 0e		sta $032e	                STA DOS_STATUS
.3947bf	28		plp		                PLP
.3947c0	2b		pld		                PLD
.3947c1	ab		plb		                PLB
.3947c2	18		clc		                CLC
.3947c3	6b		rtl		                RTL
.3947c4					match
.3947c4	c2 20		rep #$20	                REP #$20        ; set A long
.3947c6	a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L         ; Copy the cluster number from the directory entry
.3947c9	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3947cb	85 10		sta $0330	                STA DOS_CLUS_ID                 ; To DOS_CLUS_ID
.3947cd	a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.3947d0	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3947d2	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3947d4					ret_success
.3947d4	e2 20		sep #$20	                SEP #$20        ; set A short
.3947d6	64 0e		stz $032e	                STZ DOS_STATUS
.3947d8	28		plp		                PLP
.3947d9	2b		pld		                PLD
.3947da	ab		plb		                PLB
.3947db	38		sec		                SEC
.3947dc	6b		rtl		                RTL
.3947dd					DOS_READFILE
.3947dd	8b		phb		                PHB
.3947de	0b		phd		                PHD
.3947df	08		php		                PHP
.3947e0	48		pha		                PHA             ; begin setdbr macro
.3947e1	08		php		                PHP
.3947e2	e2 20		sep #$20	                SEP #$20        ; set A short
.3947e4	a9 00		lda #$00	                LDA #0
.3947e6	48		pha		                PHA
.3947e7	ab		plb		                PLB
.3947e8	28		plp		                PLP
.3947e9	68		pla		                PLA             ; end setdbr macro
.3947ea	48		pha		                PHA             ; begin setdp macro
.3947eb	08		php		                PHP
.3947ec	c2 20		rep #$20	                REP #$20        ; set A long
.3947ee	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3947f1	5b		tcd		                TCD
.3947f2	28		plp		                PLP
.3947f3	68		pla		                PLA             ; end setdp macro
.3947f4	c2 30		rep #$30	                REP #$30        ; set A&X long
.3947f6	a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.3947f8	48		pha		                PHA
.3947f9	a5 1c		lda $033c	                LDA DOS_BUFF_PTR
.3947fb	48		pha		                PHA
.3947fc	22 3d 47 39	jsl $39473d	                JSL DOS_FINDFILE                    ; Attempt to find the file's directory entry
.394800	68		pla		                PLA
.394801	85 1c		sta $033c	                STA DOS_BUFF_PTR
.394803	68		pla		                PLA
.394804	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394806	90 0f		bcc $394817	                BCC pass_failure                    ; If found: try to load the cluster
.394808	22 57 45 39	jsl $394557	load_cluster    JSL DOS_GETCLUSTER                  ; Get the first block of the cluster
.39480c	90 09		bcc $394817	                BCC pass_failure                    ; If there's an error... pass it up the chain
.39480e					ret_success
.39480e	e2 20		sep #$20	                SEP #$20        ; set A short
.394810	64 0e		stz $032e	                STZ DOS_STATUS
.394812	28		plp		                PLP
.394813	2b		pld		                PLD
.394814	ab		plb		                PLB
.394815	38		sec		                SEC
.394816	6b		rtl		                RTL
.394817	28		plp		pass_failure    PLP                                 ; Otherwise: pass any error up the chain
.394818	2b		pld		                PLD
.394819	ab		plb		                PLB
.39481a	18		clc		                CLC
.39481b	6b		rtl		                RTL
.39481c					ENTRYFORCLUS12
.39481c	8b		phb		                PHB
.39481d	0b		phd		                PHD
.39481e	08		php		                PHP
.39481f	48		pha		                PHA             ; begin setdbr macro
.394820	08		php		                PHP
.394821	e2 20		sep #$20	                SEP #$20        ; set A short
.394823	a9 00		lda #$00	                LDA #0
.394825	48		pha		                PHA
.394826	ab		plb		                PLB
.394827	28		plp		                PLP
.394828	68		pla		                PLA             ; end setdbr macro
.394829	48		pha		                PHA             ; begin setdp macro
.39482a	08		php		                PHP
.39482b	c2 20		rep #$20	                REP #$20        ; set A long
.39482d	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394830	5b		tcd		                TCD
.394831	28		plp		                PLP
.394832	68		pla		                PLA             ; end setdp macro
.394833	c2 30		rep #$30	                REP #$30        ; set A&X long
.394835	a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; DOS_TEMP := DOS_CLUS_ID * 3
.394837	0a		asl a		                ASL A
.394838	85 28		sta $0348	                STA DOS_TEMP
.39483a	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.39483c	2a		rol a		                ROL A
.39483d	85 2a		sta $034a	                STA DOS_TEMP+2
.39483f	18		clc		                CLC
.394840	a5 10		lda $0330	                LDA DOS_CLUS_ID
.394842	65 28		adc $0348	                ADC DOS_TEMP
.394844	85 28		sta $0348	                STA DOS_TEMP
.394846	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394848	65 2a		adc $034a	                ADC DOS_TEMP+2
.39484a	85 2a		sta $034a	                STA DOS_TEMP+2
.39484c	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := (DOS_CLUS_ID * 3) / 2
.39484e	66 28		ror $0348	                ROR DOS_TEMP                    ; DOS_TEMP is now the offset to the cluster's entry in the FAT
.394850	a5 28		lda $0348	                LDA DOS_TEMP                    ; X should be the offset within the FAT buffer
.394852	29 ff 03	and #$03ff	                AND #$003FF
.394855	aa		tax		                TAX
.394856	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394858	66 28		ror $0348	                ROR DOS_TEMP
.39485a	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.39485c	66 28		ror $0348	                ROR DOS_TEMP
.39485e	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394860	66 28		ror $0348	                ROR DOS_TEMP
.394862	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394864	66 28		ror $0348	                ROR DOS_TEMP
.394866	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394868	66 28		ror $0348	                ROR DOS_TEMP
.39486a	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.39486c	66 28		ror $0348	                ROR DOS_TEMP
.39486e	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394870	66 28		ror $0348	                ROR DOS_TEMP
.394872	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394874	66 28		ror $0348	                ROR DOS_TEMP
.394876	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394878	66 28		ror $0348	                ROR DOS_TEMP
.39487a	18		clc		                CLC                             ; DOS_FAT_LBA should be the LBA of the first FAT sector we need
.39487b	af 14 e0 38	lda $38e014	                LDA FAT_BEGIN_LBA
.39487f	65 28		adc $0348	                ADC DOS_TEMP
.394881	85 24		sta $0344	                STA DOS_FAT_LBA
.394883	af 16 e0 38	lda $38e016	                LDA FAT_BEGIN_LBA+2
.394887	65 2a		adc $034a	                ADC DOS_TEMP+2
.394889	85 26		sta $0346	                STA DOS_FAT_LBA+2
.39488b	28		plp		                PLP
.39488c	2b		pld		                PLD
.39488d	ab		plb		                PLB
.39488e	6b		rtl		                RTL
.39488f					FATFORCLUSTER12
.39488f	8b		phb		                PHB
.394890	0b		phd		                PHD
.394891	08		php		                PHP
.394892	48		pha		                PHA             ; begin setdbr macro
.394893	08		php		                PHP
.394894	e2 20		sep #$20	                SEP #$20        ; set A short
.394896	a9 00		lda #$00	                LDA #0
.394898	48		pha		                PHA
.394899	ab		plb		                PLB
.39489a	28		plp		                PLP
.39489b	68		pla		                PLA             ; end setdbr macro
.39489c	48		pha		                PHA             ; begin setdp macro
.39489d	08		php		                PHP
.39489e	c2 20		rep #$20	                REP #$20        ; set A long
.3948a0	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3948a3	5b		tcd		                TCD
.3948a4	28		plp		                PLP
.3948a5	68		pla		                PLA             ; end setdp macro
.3948a6	c2 30		rep #$30	                REP #$30        ; set A&X long
.3948a8	a2 00 00	ldx #$0000	                LDX #0
.3948ab	a9 5a 5a	lda #$5a5a	                LDA #$5A5A
.3948ae	8f 00 e5 38	sta $38e500	clr_loop        STA DOS_FAT_SECTORS
.3948b2	e8		inx		                INX
.3948b3	e8		inx		                INX
.3948b4	e0 00 04	cpx #$0400	                CPX #1024
.3948b7	d0 f5		bne $3948ae	                BNE clr_loop
.3948b9	22 1c 48 39	jsl $39481c	                JSL ENTRYFORCLUS12              ; Calculate the LBA
.3948bd	a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Point to the desired sector in the FAT
.3948bf	85 02		sta $0322	                STA BIOS_LBA
.3948c1	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.3948c3	85 04		sta $0324	                STA BIOS_LBA+2
.3948c5	a9 00 e5	lda #$e500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first 512 bytes of the FAT buffer
.3948c8	85 06		sta $0326	                STA BIOS_BUFF_PTR
.3948ca	a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.3948cd	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3948cf	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.3948d3	90 17		bcc $3948ec	                BCC error
.3948d5	e6 02		inc $0322	                INC BIOS_LBA                    ; Move to the next sector
.3948d7	a9 00 e7	lda #$e700	                LDA #<>DOS_FAT_SECTORS+512      ; And point to the second 512 bytes of teh FAT buffer
.3948da	85 06		sta $0326	                STA BIOS_BUFF_PTR
.3948dc	a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.3948df	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3948e1	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.3948e5	90 05		bcc $3948ec	                BCC error
.3948e7	28		plp		                PLP
.3948e8	2b		pld		                PLD
.3948e9	ab		plb		                PLB
.3948ea	38		sec		                SEC
.3948eb	6b		rtl		                RTL
.3948ec					error
.3948ec	e2 20		sep #$20	                SEP #$20        ; set A short
.3948ee	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.3948f0	85 0e		sta $032e	                STA DOS_STATUS
.3948f2	28		plp		                PLP
.3948f3	2b		pld		                PLD
.3948f4	ab		plb		                PLB
.3948f5	18		clc		                CLC
.3948f6	6b		rtl		                RTL
.3948f7					FATFORCLUSTER32
.3948f7	8b		phb		                PHB
.3948f8	0b		phd		                PHD
.3948f9	48		pha		                PHA             ; begin setdbr macro
.3948fa	08		php		                PHP
.3948fb	e2 20		sep #$20	                SEP #$20        ; set A short
.3948fd	a9 00		lda #$00	                LDA #0
.3948ff	48		pha		                PHA
.394900	ab		plb		                PLB
.394901	28		plp		                PLP
.394902	68		pla		                PLA             ; end setdbr macro
.394903	48		pha		                PHA             ; begin setdp macro
.394904	08		php		                PHP
.394905	c2 20		rep #$20	                REP #$20        ; set A long
.394907	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39490a	5b		tcd		                TCD
.39490b	28		plp		                PLP
.39490c	68		pla		                PLA             ; end setdp macro
.39490d	c2 30		rep #$30	                REP #$30        ; set A&X long
.39490f	a5 10		lda $0330	                LDA DOS_CLUS_ID
.394911	85 24		sta $0344	                STA DOS_FAT_LBA
.394913	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394915	85 26		sta $0346	                STA DOS_FAT_LBA+2
.394917	a2 07 00	ldx #$0007	                LDX #7
.39491a	46 26		lsr $0346	div_loop        LSR DOS_FAT_LBA+2
.39491c	66 24		ror $0344	                ROR DOS_FAT_LBA
.39491e	ca		dex		                DEX
.39491f	d0 f9		bne $39491a	                BNE div_loop
.394921	18		clc		                CLC
.394922	a5 24		lda $0344	                LDA DOS_FAT_LBA
.394924	6f 14 e0 38	adc $38e014	                ADC FAT_BEGIN_LBA
.394928	85 24		sta $0344	                STA DOS_FAT_LBA
.39492a	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.39492c	6f 16 e0 38	adc $38e016	                ADC FAT_BEGIN_LBA+2
.394930	85 26		sta $0346	                STA DOS_FAT_LBA+2
.394932	a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; We want to load the FAT sector
.394934	85 02		sta $0322	                STA BIOS_LBA
.394936	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394938	85 04		sta $0324	                STA BIOS_LBA+2
.39493a	a9 00 e5	lda #$e500	                LDA #<>DOS_FAT_SECTORS          ; We want to load the FAT sector in DOS_FAT_SECTORS
.39493d	85 06		sta $0326	                STA BIOS_BUFF_PTR
.39493f	a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394942	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394944	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Load the FAT entry
.394948	b0 06		bcs $394950	                BCS find_entry
.39494a	e2 20		sep #$20	                SEP #$20        ; set A short
.39494c	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.39494e	80 0e		bra $39495e	                BRA ret_failure
.394950					find_entry
.394950	c2 20		rep #$20	                REP #$20        ; set A long
.394952	a5 10		lda $0330	                LDA DOS_CLUS_ID
.394954	0a		asl a		                ASL A
.394955	0a		asl a		                ASL A                           ; * 4
.394956	29 7f 00	and #$007f	                AND #$7F                        ; DOS_CLUS_ID MOD 128
.394959	aa		tax		                TAX                             ; X should be the offset within the sector
.39495a	2b		pld		ret_success     PLD
.39495b	ab		plb		                PLB
.39495c	38		sec		                SEC                             ; return success
.39495d	6b		rtl		                RTL
.39495e	2b		pld		ret_failure     PLD
.39495f	ab		plb		                PLB
.394960	18		clc		                CLC                             ; Return failure
.394961	6b		rtl		                RTL
.394962					NEXTCLUSTER
.394962	08		php		                PHP
.394963	e2 20		sep #$20	                SEP #$20        ; set A short
.394965	af 01 e0 38	lda $38e001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394969	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.39496b	d0 08		bne $394975	                BNE fat32                       ; No: assume it's FAT32
.39496d	22 83 49 39	jsl $394983	fat12           JSL NEXTCLUSTER12               ; Lookup the next cluster from FAT12
.394971	90 0d		bcc $394980	                BCC pass_failure                ; If there was an error, pass it up the chain
.394973	80 06		bra $39497b	                BRA ret_success
.394975	22 eb 49 39	jsl $3949eb	fat32           JSL NEXTCLUSTER32               ; Lookup the next cluster from FAT32
.394979	90 05		bcc $394980	                BCC pass_failure                ; If there was an error, pass it up the chain
.39497b	64 0e		stz $032e	ret_success     STZ DOS_STATUS
.39497d	28		plp		                PLP
.39497e	38		sec		                SEC
.39497f	6b		rtl		                RTL
.394980	28		plp		pass_failure    PLP
.394981	18		clc		                CLC
.394982	6b		rtl		                RTL
.394983					NEXTCLUSTER12
.394983	8b		phb		                    PHB
.394984	0b		phd		                    PHD
.394985	08		php		                    PHP
.394986	48		pha		                PHA             ; begin setdbr macro
.394987	08		php		                PHP
.394988	e2 20		sep #$20	                SEP #$20        ; set A short
.39498a	a9 00		lda #$00	                LDA #0
.39498c	48		pha		                PHA
.39498d	ab		plb		                PLB
.39498e	28		plp		                PLP
.39498f	68		pla		                PLA             ; end setdbr macro
.394990	48		pha		                PHA             ; begin setdp macro
.394991	08		php		                PHP
.394992	c2 20		rep #$20	                REP #$20        ; set A long
.394994	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394997	5b		tcd		                TCD
.394998	28		plp		                PLP
.394999	68		pla		                PLA             ; end setdp macro
.39499a	c2 30		rep #$30	                REP #$30        ; set A&X long
.39499c	22 8f 48 39	jsl $39488f	                    JSL FATFORCLUSTER12             ; Attempt to load the FAT entries
.3949a0	b0 03		bcs $3949a5	                    BCS chk_clus_id
.3949a2	82 41 00	brl $3949e6	                    BRL pass_failure
.3949a5	a5 10		lda $0330	chk_clus_id         LDA DOS_CLUS_ID                 ; Check the cluster ID...
.3949a7	89 01 00	bit #$0001	                    BIT #1                          ; Is it odd?
.3949aa	d0 0d		bne $3949b9	                    BNE is_odd                      ; Yes: calculate the next cluster for odd
.3949ac					is_even
.3949ac	c2 20		rep #$20	                REP #$20        ; set A long
.3949ae	bf 00 e5 38	lda $38e500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] & $0FFF
.3949b2	29 ff 0f	and #$0fff	                    AND #$0FFF
.3949b5	85 28		sta $0348	                    STA DOS_TEMP
.3949b7	80 0c		bra $3949c5	                    BRA check_id
.3949b9					is_odd
.3949b9	c2 20		rep #$20	                REP #$20        ; set A long
.3949bb	bf 00 e5 38	lda $38e500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] >> 4
.3949bf	4a		lsr a		                    LSR A
.3949c0	4a		lsr a		                    LSR A
.3949c1	4a		lsr a		                    LSR A
.3949c2	4a		lsr a		                    LSR A
.3949c3	85 28		sta $0348	                    STA DOS_TEMP
.3949c5					check_id
.3949c5	c2 20		rep #$20	                REP #$20        ; set A long
.3949c7	a5 28		lda $0348	                    LDA DOS_TEMP                    ; Check the new cluster ID we got
.3949c9	29 f0 0f	and #$0ff0	                    AND #$0FF0                      ; Is it in the range $0FF0 -- $0FFF?
.3949cc	c9 f0 0f	cmp #$0ff0	                    CMP #$0FF0
.3949cf	f0 0f		beq $3949e0	                    BEQ no_more                     ; Yes: return that we've reached the end of the chain
.3949d1	a5 28		lda $0348	                    LDA DOS_TEMP                    ; Restore the "current" cluster ID
.3949d3	85 10		sta $0330	                    STA DOS_CLUS_ID
.3949d5	64 12		stz $0332	                    STZ DOS_CLUS_ID+2
.3949d7					ret_success
.3949d7	e2 20		sep #$20	                SEP #$20        ; set A short
.3949d9	64 0e		stz $032e	                    STZ DOS_STATUS
.3949db	28		plp		                    PLP
.3949dc	2b		pld		                    PLD
.3949dd	ab		plb		                    PLB
.3949de	38		sec		                    SEC
.3949df	6b		rtl		                    RTL
.3949e0					no_more
.3949e0	e2 20		sep #$20	                SEP #$20        ; set A short
.3949e2	a9 0a		lda #$0a	                    LDA #DOS_ERR_NOCLUSTER
.3949e4	85 0e		sta $032e	                    STA DOS_STATUS
.3949e6	28		plp		pass_failure        PLP
.3949e7	2b		pld		                    PLD
.3949e8	ab		plb		                    PLB
.3949e9	18		clc		                    CLC
.3949ea	6b		rtl		                    RTL
.3949eb					NEXTCLUSTER32
.3949eb	8b		phb		                PHB
.3949ec	0b		phd		                PHD
.3949ed	08		php		                PHP
.3949ee	48		pha		                PHA             ; begin setdbr macro
.3949ef	08		php		                PHP
.3949f0	e2 20		sep #$20	                SEP #$20        ; set A short
.3949f2	a9 00		lda #$00	                LDA #0
.3949f4	48		pha		                PHA
.3949f5	ab		plb		                PLB
.3949f6	28		plp		                PLP
.3949f7	68		pla		                PLA             ; end setdbr macro
.3949f8	48		pha		                PHA             ; begin setdp macro
.3949f9	08		php		                PHP
.3949fa	c2 20		rep #$20	                REP #$20        ; set A long
.3949fc	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3949ff	5b		tcd		                TCD
.394a00	28		plp		                PLP
.394a01	68		pla		                PLA             ; end setdp macro
.394a02	c2 30		rep #$30	                REP #$30        ; set A&X long
.394a04	22 f7 48 39	jsl $3948f7	                JSL FATFORCLUSTER32             ; Get the FAT entry for this cluster
.394a08	90 30		bcc $394a3a	                BCC ret_failure                 ; If it did not work, return the error
.394a0a	bf 00 e5 38	lda $38e500,x	                LDA DOS_FAT_SECTORS,X           ; Get the entry and copy it to DOS_TEMP
.394a0e	85 28		sta $0348	                STA DOS_TEMP
.394a10	bf 02 e5 38	lda $38e502,x	                LDA DOS_FAT_SECTORS+2,X
.394a14	85 2a		sta $034a	                STA DOS_TEMP+2
.394a16	a5 28		lda $0348	                LDA DOS_TEMP                    ; Is DOS_TEMP = $FFFFFFFF?
.394a18	c9 ff ff	cmp #$ffff	                CMP #$FFFF
.394a1b	d0 0c		bne $394a29	                BNE found_next
.394a1d	a5 2a		lda $034a	                LDA DOS_TEMP+2
.394a1f	c9 ff 0f	cmp #$0fff	                CMP #$0FFF
.394a22	d0 05		bne $394a29	                BNE found_next                  ; No: return this cluster as the next
.394a24	a9 0a 00	lda #$000a	                LDA #DOS_ERR_NOCLUSTER          ; Yes: return that there are no more clusters
.394a27	80 11		bra $394a3a	                BRA ret_failure
.394a29	a5 28		lda $0348	found_next      LDA DOS_TEMP                    ; No: return DOS_TEMP as the new DOS_CLUS_ID
.394a2b	85 10		sta $0330	                STA DOS_CLUS_ID
.394a2d	a5 2a		lda $034a	                LDA DOS_TEMP+2
.394a2f	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394a31					ret_success
.394a31	e2 20		sep #$20	                SEP #$20        ; set A short
.394a33	64 0e		stz $032e	                STZ DOS_STATUS                  ; Record success
.394a35	28		plp		                PLP
.394a36	2b		pld		                PLD
.394a37	ab		plb		                PLB
.394a38	38		sec		                SEC
.394a39	6b		rtl		                RTL
.394a3a	85 0e		sta $032e	ret_failure     STA DOS_STATUS                  ; Record the error condition
.394a3c	28		plp		                PLP
.394a3d	2b		pld		                PLD
.394a3e	ab		plb		                PLB
.394a3f	18		clc		                CLC
.394a40	6b		rtl		                RTL
.394a41					DOS_READNEXT
.394a41	08		php		                PHP
.394a42	c2 30		rep #$30	                REP #$30        ; set A&X long
.394a44	22 62 49 39	jsl $394962	                JSL NEXTCLUSTER                 ; Attempt to find the next cluster in the FAT
.394a48	90 09		bcc $394a53	                BCC pass_failure                ; If nothing found: pass the failure up the chain
.394a4a	22 57 45 39	jsl $394557	                JSL DOS_GETCLUSTER              ; Otherwise: attempt to read the cluster
.394a4e	90 03		bcc $394a53	                BCC pass_failure                ; If nothing read: pass the failure up the chain
.394a50	28		plp		ret_success     PLP
.394a51	38		sec		                SEC
.394a52	6b		rtl		                RTL
.394a53	28		plp		pass_failure    PLP
.394a54	18		clc		                CLC
.394a55	6b		rtl		                RTL
.394a56					DOS_FREECLUS
.394a56	08		php		                PHP
.394a57	48		pha		                PHA             ; begin setdp macro
.394a58	08		php		                PHP
.394a59	c2 20		rep #$20	                REP #$20        ; set A long
.394a5b	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394a5e	5b		tcd		                TCD
.394a5f	28		plp		                PLP
.394a60	68		pla		                PLA             ; end setdp macro
.394a61	e2 20		sep #$20	                SEP #$20        ; set A short
.394a63	af 01 e0 38	lda $38e001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394a67	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394a69	d0 08		bne $394a73	                BNE fat32                       ; No: assume it's FAT32
.394a6b	22 e7 4a 39	jsl $394ae7	fat12           JSL DOS_FREECLUS12              ; Find the next free cluster from FAT12
.394a6f	90 0d		bcc $394a7e	                BCC pass_failure                ; If there was an error, pass it up the chain
.394a71	80 06		bra $394a79	                BRA ret_success
.394a73	22 bf 4b 39	jsl $394bbf	fat32           JSL DOS_FREECLUS32              ; Find the next free cluster from FAT32
.394a77	90 05		bcc $394a7e	                BCC pass_failure                ; If there was an error, pass it up the chain
.394a79	64 0e		stz $032e	ret_success     STZ DOS_STATUS
.394a7b	28		plp		                PLP
.394a7c	38		sec		                SEC
.394a7d	6b		rtl		                RTL
.394a7e	28		plp		pass_failure    PLP
.394a7f	18		clc		                CLC
.394a80	6b		rtl		                RTL
.394a81					FDC_READ2FAT12
.394a81	8b		phb		                    PHB
.394a82	0b		phd		                    PHD
.394a83	08		php		                    PHP
.394a84	48		pha		                PHA             ; begin setdbr macro
.394a85	08		php		                PHP
.394a86	e2 20		sep #$20	                SEP #$20        ; set A short
.394a88	a9 00		lda #$00	                LDA #0
.394a8a	48		pha		                PHA
.394a8b	ab		plb		                PLB
.394a8c	28		plp		                PLP
.394a8d	68		pla		                PLA             ; end setdbr macro
.394a8e	48		pha		                PHA             ; begin setdp macro
.394a8f	08		php		                PHP
.394a90	c2 20		rep #$20	                REP #$20        ; set A long
.394a92	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394a95	5b		tcd		                TCD
.394a96	28		plp		                PLP
.394a97	68		pla		                PLA             ; end setdp macro
.394a98	c2 30		rep #$30	                REP #$30        ; set A&X long
.394a9a	a9 00 e5	lda #$e500	                    LDA #<>DOS_FAT_SECTORS          ; Set the location to store the sector
.394a9d	85 06		sta $0326	                    STA BIOS_BUFF_PTR
.394a9f	a9 38 00	lda #$0038	                    LDA #`DOS_FAT_SECTORS
.394aa2	85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.394aa4	a5 24		lda $0344	                    LDA DOS_FAT_LBA
.394aa6	85 02		sta $0322	                    STA BIOS_LBA
.394aa8	a5 26		lda $0346	                    LDA DOS_FAT_LBA+2
.394aaa	85 04		sta $0324	                    STA BIOS_LBA+2
.394aac	22 44 10 38	jsl $381044	                    JSL GETBLOCK                    ; Read the first sector
.394ab0	b0 07		bcs $394ab9	                    BCS inc_sect2                   ; If success: start getting the second sector
.394ab2	e2 20		sep #$20	                SEP #$20        ; set A short
.394ab4	a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.394ab6	82 1c 00	brl $394ad5	                    BRL ret_failure
.394ab9					inc_sect2
.394ab9	c2 20		rep #$20	                REP #$20        ; set A long
.394abb	e6 02		inc $0322	                    INC BIOS_LBA                    ; Move to the next sector
.394abd	d0 02		bne $394ac1	                    BNE inc_buff_ptr
.394abf	e6 04		inc $0324	                    INC BIOS_LBA+2
.394ac1	a9 00 e7	lda #$e700	inc_buff_ptr        LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394ac4	85 06		sta $0326	                    STA BIOS_BUFF_PTR
.394ac6	a9 38 00	lda #$0038	                    LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394ac9	85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.394acb	22 44 10 38	jsl $381044	                    JSL GETBLOCK                    ; Read the second sector
.394acf	b0 0d		bcs $394ade	                    BCS ret_success                 ; If success, return success
.394ad1	e2 20		sep #$20	                SEP #$20        ; set A short
.394ad3	a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.394ad5					ret_failure
.394ad5	e2 20		sep #$20	                SEP #$20        ; set A short
.394ad7	85 00		sta $0320	                    STA BIOS_STATUS
.394ad9	28		plp		                    PLP
.394ada	2b		pld		                    PLD
.394adb	ab		plb		                    PLB
.394adc	18		clc		                    CLC
.394add	6b		rtl		                    RTL
.394ade					ret_success
.394ade	e2 20		sep #$20	                SEP #$20        ; set A short
.394ae0	64 00		stz $0320	                    STZ BIOS_STATUS
.394ae2	28		plp		                    PLP
.394ae3	2b		pld		                    PLD
.394ae4	ab		plb		                    PLB
.394ae5	38		sec		                    SEC
.394ae6	6b		rtl		                    RTL
.394ae7					DOS_FREECLUS12
.394ae7	da		phx		                PHX
.394ae8	8b		phb		                PHB
.394ae9	0b		phd		                PHD
.394aea	08		php		                PHP
.394aeb	48		pha		                PHA             ; begin setdbr macro
.394aec	08		php		                PHP
.394aed	e2 20		sep #$20	                SEP #$20        ; set A short
.394aef	a9 00		lda #$00	                LDA #0
.394af1	48		pha		                PHA
.394af2	ab		plb		                PLB
.394af3	28		plp		                PLP
.394af4	68		pla		                PLA             ; end setdbr macro
.394af5	48		pha		                PHA             ; begin setdp macro
.394af6	08		php		                PHP
.394af7	c2 20		rep #$20	                REP #$20        ; set A long
.394af9	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394afc	5b		tcd		                TCD
.394afd	28		plp		                PLP
.394afe	68		pla		                PLA             ; end setdp macro
.394aff	c2 30		rep #$30	                REP #$30        ; set A&X long
.394b01	a9 02 00	lda #$0002	                LDA #2                          ; Cluster ID is 2 to start with
.394b04	85 10		sta $0330	                STA DOS_CLUS_ID
.394b06	a9 00 00	lda #$0000	                LDA #0
.394b09	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394b0b	22 1c 48 39	jsl $39481c	                JSL ENTRYFORCLUS12              ; Calculate the LBA and buffer offset for the cluster
.394b0f	22 81 4a 39	jsl $394a81	                JSL FDC_READ2FAT12              ; Read the first two sectors of the FAT
.394b13	b0 07		bcs $394b1c	                BCS start_of_fat                ; If success, move X to the start of the FAT
.394b15	e2 20		sep #$20	                SEP #$20        ; set A short
.394b17	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394b19	82 99 00	brl $394bb5	                BRL ret_failure
.394b1c					start_of_fat
.394b1c	c2 30		rep #$30	                REP #$30        ; set A&X long
.394b1e	a5 10		lda $0330	chk_cluster     LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.394b20	89 01 00	bit #$0001	                BIT #1
.394b23	d0 09		bne $394b2e	                BNE is_odd
.394b25	bf 00 e5 38	lda $38e500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an even numbered cluster
.394b29	29 ff 0f	and #$0fff	                AND #$0FFF
.394b2c	80 08		bra $394b36	                BRA chk_available
.394b2e	bf 00 e5 38	lda $38e500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an odd numbered cluster
.394b32	4a		lsr a		                LSR A
.394b33	4a		lsr a		                LSR A
.394b34	4a		lsr a		                LSR A
.394b35	4a		lsr a		                LSR A
.394b36					chk_available
.394b36	85 28		sta $0348	                STA DOS_TEMP
.394b38	c9 00 00	cmp #$0000	                CMP #0                          ; Is it available?
.394b3b	f0 03		beq $394b40	                BEQ chk_found
.394b3d	82 39 00	brl $394b79	                BRL next_cluster                ; No: advance to the next cluster
.394b40	8a		txa		chk_found       TXA
.394b41	85 2a		sta $034a	                STA DOS_TEMP+2
.394b43	a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.394b45	89 01 00	bit #$0001	                BIT #1
.394b48	d0 0d		bne $394b57	                BNE is_odd2
.394b4a					is_even2
.394b4a	bf 00 e5 38	lda $38e500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, even offset case
.394b4e	09 ff 0f	ora #$0fff	                ORA #$0FFF
.394b51	9f 00 e5 38	sta $38e500,x	                STA DOS_FAT_SECTORS,X
.394b55	80 0b		bra $394b62	                BRA write_fat
.394b57					is_odd2
.394b57	bf 00 e5 38	lda $38e500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, odd offset case
.394b5b	09 f0 ff	ora #$fff0	                ORA #$FFF0
.394b5e	9f 00 e5 38	sta $38e500,x	                STA DOS_FAT_SECTORS,X
.394b62	22 7c 4c 39	jsl $394c7c	write_fat       JSL WRITEFAT12                  ; Write the two FAT sectors back to disk
.394b66	b0 07		bcs $394b6f	                BCS ret_success                 ; If success: return success
.394b68	e2 20		sep #$20	                SEP #$20        ; set A short
.394b6a	a9 14		lda #$14	                LDA #DOS_ERR_FATUPDATE          ; Flag an error trying to write the FAT back
.394b6c	82 46 00	brl $394bb5	                BRL ret_failure
.394b6f					ret_success
.394b6f	e2 20		sep #$20	                SEP #$20        ; set A short
.394b71	64 0e		stz $032e	                STZ DOS_STATUS
.394b73	28		plp		                PLP
.394b74	2b		pld		                PLD
.394b75	ab		plb		                PLB
.394b76	fa		plx		                PLX
.394b77	38		sec		                SEC
.394b78	6b		rtl		                RTL
.394b79					next_cluster
.394b79	e6 10		inc $0330	                INC DOS_CLUS_ID                 ; And advance the cluster ID
.394b7b	d0 02		bne $394b7f	                BNE calc_entry
.394b7d	e6 12		inc $0332	                INC DOS_CLUS_ID+2
.394b7f	22 1c 48 39	jsl $39481c	calc_entry      JSL ENTRYFORCLUS12              ; Calculate the LBA and offset into the buffer for the cluster
.394b83	e0 00 00	cpx #$0000	                CPX #0                          ; Did we wrap around?
.394b86	f0 03		beq $394b8b	                BEQ chk_end_of_fat
.394b88	82 93 ff	brl $394b1e	                BRL chk_cluster                 ; No: go back and check it too
.394b8b					chk_end_of_fat
.394b8b	a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Are we at the end of the FAT?
.394b8d	cf 18 e0 38	cmp $38e018	                CMP FAT2_BEGIN_LBA              ; NOTE: we use the start sector of the second FAT as our sentinel
.394b91	d0 0f		bne $394ba2	                BNE next_2
.394b93	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394b95	cf 1a e0 38	cmp $38e01a	                CMP FAT2_BEGIN_LBA+2
.394b99	d0 07		bne $394ba2	                BNE next_2                      ; No: get the next to sectors
.394b9b	e2 20		sep #$20	                SEP #$20        ; set A short
.394b9d	a9 12		lda #$12	                LDA #DOS_ERR_MEDIAFULL          ; Yes: return media full
.394b9f	82 13 00	brl $394bb5	                BRL ret_failure
.394ba2					next_2
.394ba2	22 81 4a 39	jsl $394a81	                JSL FDC_READ2FAT12              ; Read the next two sectors of the FAT
.394ba6	90 06		bcc $394bae	                BCC fat_fail                    ; If failed: return error
.394ba8	a2 00 00	ldx #$0000	                LDX #0                          ; If success: Start scanning at the beginning of the sectors
.394bab	82 70 ff	brl $394b1e	                BRL chk_cluster                 ; And start checking from there
.394bae					fat_fail
.394bae	e2 20		sep #$20	                SEP #$20        ; set A short
.394bb0	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394bb2	82 00 00	brl $394bb5	                BRL ret_failure
.394bb5					ret_failure
.394bb5	e2 20		sep #$20	                SEP #$20        ; set A short
.394bb7	85 0e		sta $032e	                STA DOS_STATUS
.394bb9	28		plp		                PLP
.394bba	2b		pld		                PLD
.394bbb	ab		plb		                PLB
.394bbc	fa		plx		                PLX
.394bbd	18		clc		                CLC
.394bbe	6b		rtl		                RTL
.394bbf					DOS_FREECLUS32
.394bbf	8b		phb		                PHB
.394bc0	0b		phd		                PHD
.394bc1	08		php		                PHP
.394bc2	48		pha		                PHA             ; begin setdbr macro
.394bc3	08		php		                PHP
.394bc4	e2 20		sep #$20	                SEP #$20        ; set A short
.394bc6	a9 00		lda #$00	                LDA #0
.394bc8	48		pha		                PHA
.394bc9	ab		plb		                PLB
.394bca	28		plp		                PLP
.394bcb	68		pla		                PLA             ; end setdbr macro
.394bcc	48		pha		                PHA             ; begin setdp macro
.394bcd	08		php		                PHP
.394bce	c2 20		rep #$20	                REP #$20        ; set A long
.394bd0	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394bd3	5b		tcd		                TCD
.394bd4	28		plp		                PLP
.394bd5	68		pla		                PLA             ; end setdp macro
.394bd6	c2 30		rep #$30	                REP #$30        ; set A&X long
.394bd8	a9 00 e3	lda #$e300	                LDA #<>DOS_SECTOR               ; Set the location to store the sector
.394bdb	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394bdd	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.394be0	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394be2	af 14 e0 38	lda $38e014	                LDA FAT_BEGIN_LBA               ; Set the LBA to that of the first FAT sector
.394be6	85 02		sta $0322	                STA BIOS_LBA
.394be8	af 16 e0 38	lda $38e016	                LDA FAT_BEGIN_LBA+2
.394bec	85 04		sta $0324	                STA BIOS_LBA+2
.394bee	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Load the sector into memory
.394bf2	b0 07		bcs $394bfb	                BCS initial_entry               ; If OK: set the initial entry to check
.394bf4	e2 20		sep #$20	                SEP #$20        ; set A short
.394bf6	a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Return a NOFAT error
.394bf8	82 5e 00	brl $394c59	                BRL ret_failure
.394bfb					initial_entry
.394bfb	c2 20		rep #$20	                REP #$20        ; set A long
.394bfd	a9 02 00	lda #$0002	                LDA #2                          ; Set DOS_CLUS_ID to 2
.394c00	85 10		sta $0330	                STA DOS_CLUS_ID
.394c02	a9 00 00	lda #$0000	                LDA #0
.394c05	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394c07	a2 08 00	ldx #$0008	                LDX #8                          ; Set the offset to DOS_CLUS_ID * 4
.394c0a	bf 00 e3 38	lda $38e300,x	chk_entry       LDA DOS_SECTOR,X                ; Is the cluster entry == $00000000?
.394c0e	d0 06		bne $394c16	                BNE next_entry                  ; No: move to the next entry
.394c10	bf 02 e3 38	lda $38e302,x	                LDA DOS_SECTOR+2,X
.394c14	f0 29		beq $394c3f	                BEQ found_free                  ; Yes: go to allocate and return it
.394c16	e6 10		inc $0330	next_entry      INC DOS_CLUS_ID                 ; Move to the next cluster
.394c18	d0 02		bne $394c1c	                BNE inc_ptr
.394c1a	e6 12		inc $0332	                INC DOS_CLUS_ID+2
.394c1c	e8		inx		inc_ptr         INX                             ; Update the index to the entry
.394c1d	e8		inx		                INX
.394c1e	e8		inx		                INX
.394c1f	e8		inx		                INX
.394c20	e0 00 02	cpx #$0200	                CPX #DOS_SECTOR_SIZE            ; Are we outside the sector?
.394c23	90 e5		bcc $394c0a	                BLT chk_entry                   ; No: check this entry
.394c25	18		clc		                CLC                             ; Point to the next sector in the FAT
.394c26	a5 02		lda $0322	                LDA BIOS_LBA
.394c28	69 00 02	adc #$0200	                ADC #DOS_SECTOR_SIZE
.394c2b	85 02		sta $0322	                STA BIOS_LBA
.394c2d	a5 04		lda $0324	                LDA BIOS_LBA+2
.394c2f	69 00 00	adc #$0000	                ADC #0
.394c32	85 04		sta $0324	                STA BIOS_LBA+2
.394c34	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Attempt to read the block
.394c38	b0 00		bcs $394c3a	                BCS set_ptr                     ; If OK: set the pointer and check it
.394c3a	a2 00 00	ldx #$0000	set_ptr         LDX #0                          ; Set index pointer to the first entry
.394c3d	80 cb		bra $394c0a	                BRA chk_entry                   ; Check this entry
.394c3f					found_free
.394c3f	c2 20		rep #$20	                REP #$20        ; set A long
.394c41	a9 ff ff	lda #$ffff	                LDA #<>FAT_LAST_CLUSTER         ; Set the entry to $0FFFFFFF to make it the last entry in its chain
.394c44	9f 00 e3 38	sta $38e300,x	                STA DOS_SECTOR,X
.394c48	a9 ff 0f	lda #$0fff	                LDA #(FAT_LAST_CLUSTER >> 16)
.394c4b	9f 02 e3 38	sta $38e302,x	                STA DOS_SECTOR+2,X
.394c4f	22 24 10 38	jsl $381024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.394c53	b0 0d		bcs $394c62	                BCS ret_success                 ; If OK: return success
.394c55	e2 20		sep #$20	                SEP #$20        ; set A short
.394c57	a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Otherwise: return NOFAT error
.394c59					ret_failure
.394c59	e2 20		sep #$20	                SEP #$20        ; set A short
.394c5b	85 0e		sta $032e	                STA DOS_STATUS
.394c5d	28		plp		                PLP
.394c5e	2b		pld		                PLD
.394c5f	ab		plb		                PLB
.394c60	18		clc		                CLC
.394c61	6b		rtl		                RTL
.394c62					ret_success
.394c62	e2 20		sep #$20	                SEP #$20        ; set A short
.394c64	64 0e		stz $032e	                STZ DOS_STATUS
.394c66	28		plp		                PLP
.394c67	2b		pld		                PLD
.394c68	ab		plb		                PLB
.394c69	38		sec		                SEC
.394c6a	6b		rtl		                RTL
.394c6b					DELCLUSTER
.394c6b	e2 20		sep #$20	                SEP #$20        ; set A short
.394c6d	af 01 e0 38	lda $38e001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394c71	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394c73	d0 04		bne $394c79	                BNE fat32                       ; No: assume it's FAT32
.394c75	5c c3 4c 39	jmp $394cc3	fat12           JML DELCLUSTER12
.394c79	4c 11 4d	jmp $394d11	fat32           JMP DELCLUSTER32
.394c7c					WRITEFAT12
.394c7c	8b		phb		                PHB
.394c7d	0b		phd		                PHD
.394c7e	48		pha		                PHA             ; begin setdbr macro
.394c7f	08		php		                PHP
.394c80	e2 20		sep #$20	                SEP #$20        ; set A short
.394c82	a9 00		lda #$00	                LDA #0
.394c84	48		pha		                PHA
.394c85	ab		plb		                PLB
.394c86	28		plp		                PLP
.394c87	68		pla		                PLA             ; end setdbr macro
.394c88	48		pha		                PHA             ; begin setdp macro
.394c89	08		php		                PHP
.394c8a	c2 20		rep #$20	                REP #$20        ; set A long
.394c8c	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394c8f	5b		tcd		                TCD
.394c90	28		plp		                PLP
.394c91	68		pla		                PLA             ; end setdp macro
.394c92	c2 30		rep #$30	                REP #$30        ; set A&X long
.394c94	a9 00 e5	lda #$e500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first FAT sector in memory
.394c97	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394c99	a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394c9c	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394c9e	a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Set the LBA to that of the first sector's
.394ca0	85 02		sta $0322	                STA BIOS_LBA
.394ca2	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394ca4	85 04		sta $0324	                STA BIOS_LBA+2
.394ca6	22 24 10 38	jsl $381024	                JSL PUTBLOCK                    ; Write the first sector back to the block device
.394caa	90 14		bcc $394cc0	                BCC done
.394cac	a9 00 e7	lda #$e700	                LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394caf	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394cb1	a9 38 00	lda #$0038	                LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394cb4	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394cb6	e6 02		inc $0322	                INC BIOS_LBA                    ; Point to the next sector in the FAT
.394cb8	d0 02		bne $394cbc	                BNE put_second
.394cba	e6 04		inc $0324	                INC BIOS_LBA+2
.394cbc	22 24 10 38	jsl $381024	put_second      JSL PUTBLOCK                    ; Write the second sector back to the block device
.394cc0	2b		pld		done            PLD
.394cc1	ab		plb		                PLB
.394cc2	6b		rtl		                RTL
.394cc3					DELCLUSTER12
.394cc3	8b		phb		                PHB
.394cc4	0b		phd		                PHD
.394cc5	08		php		                PHP
.394cc6	48		pha		                PHA             ; begin setdbr macro
.394cc7	08		php		                PHP
.394cc8	e2 20		sep #$20	                SEP #$20        ; set A short
.394cca	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394ccc	48		pha		                PHA
.394ccd	ab		plb		                PLB
.394cce	28		plp		                PLP
.394ccf	68		pla		                PLA             ; end setdbr macro
.394cd0	48		pha		                PHA             ; begin setdp macro
.394cd1	08		php		                PHP
.394cd2	c2 20		rep #$20	                REP #$20        ; set A long
.394cd4	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394cd7	5b		tcd		                TCD
.394cd8	28		plp		                PLP
.394cd9	68		pla		                PLA             ; end setdp macro
.394cda	c2 30		rep #$30	                REP #$30        ; set A&X long
.394cdc	22 8f 48 39	jsl $39488f	                JSL FATFORCLUSTER12
.394ce0	8a		txa		                TXA                             ; Check to see if the index is odd or even
.394ce1	89 01 00	bit #$0001	                BIT #1
.394ce4	d0 08		bne $394cee	                BNE is_odd
.394ce6	bd 00 e5	lda $38e500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.394ce9	29 00 f0	and #$f000	                AND #$F000                      ; Mask out the lower 12 bits
.394cec	80 06		bra $394cf4	                BRA save_update
.394cee	bd 00 e5	lda $38e500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.394cf1	29 0f 00	and #$000f	                AND #$000F                      ; Mask out the upper 12 bits
.394cf4	9d 00 e5	sta $38e500,x	save_update     STA DOS_FAT_SECTORS,X           ; And write it back
.394cf7	22 7c 4c 39	jsl $394c7c	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.394cfb	b0 0b		bcs $394d08	                BCS ret_success
.394cfd					ret_failure
.394cfd	e2 20		sep #$20	                SEP #$20        ; set A short
.394cff	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394d01	85 0e		sta $032e	                STA DOS_STATUS
.394d03	28		plp		                PLP
.394d04	2b		pld		                PLD
.394d05	ab		plb		                PLB
.394d06	18		clc		                CLC
.394d07	6b		rtl		                RTL
.394d08					ret_success
.394d08	e2 20		sep #$20	                SEP #$20        ; set A short
.394d0a	64 0e		stz $032e	                STZ DOS_STATUS
.394d0c	28		plp		                PLP
.394d0d	2b		pld		                PLD
.394d0e	ab		plb		                PLB
.394d0f	38		sec		                SEC
.394d10	6b		rtl		                RTL
.394d11					DELCLUSTER32
.394d11	8b		phb		                PHB
.394d12	0b		phd		                PHD
.394d13	08		php		                PHP
.394d14	c2 30		rep #$30	                REP #$30        ; set A&X long
.394d16	48		pha		                PHA             ; begin setdbr macro
.394d17	08		php		                PHP
.394d18	e2 20		sep #$20	                SEP #$20        ; set A short
.394d1a	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394d1c	48		pha		                PHA
.394d1d	ab		plb		                PLB
.394d1e	28		plp		                PLP
.394d1f	68		pla		                PLA             ; end setdbr macro
.394d20	48		pha		                PHA             ; begin setdp macro
.394d21	08		php		                PHP
.394d22	c2 20		rep #$20	                REP #$20        ; set A long
.394d24	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394d27	5b		tcd		                TCD
.394d28	28		plp		                PLP
.394d29	68		pla		                PLA             ; end setdp macro
.394d2a	22 f7 48 39	jsl $3948f7	                JSL FATFORCLUSTER32
.394d2e	a9 00 00	lda #$0000	                LDA #0
.394d31	9d 00 e5	sta $38e500,x	                STA DOS_FAT_SECTORS,X           ; Set the cluster entry to 0
.394d34	9d 02 e5	sta $38e502,x	                STA DOS_FAT_SECTORS+2,X
.394d37	22 24 10 38	jsl $381024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.394d3b	b0 0b		bcs $394d48	                BCS ret_success
.394d3d					ret_failure
.394d3d	e2 20		sep #$20	                SEP #$20        ; set A short
.394d3f	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394d41	85 0e		sta $032e	                STA DOS_STATUS
.394d43	28		plp		                PLP
.394d44	2b		pld		                PLD
.394d45	ab		plb		                PLB
.394d46	18		clc		                CLC
.394d47	6b		rtl		                RTL
.394d48					ret_success
.394d48	e2 20		sep #$20	                SEP #$20        ; set A short
.394d4a	64 0e		stz $032e	                STZ DOS_STATUS
.394d4c	28		plp		                PLP
.394d4d	2b		pld		                PLD
.394d4e	ab		plb		                PLB
.394d4f	38		sec		                SEC
.394d50	6b		rtl		                RTL
.394d51					DOS_APPENDCLUS
.394d51	8b		phb		                PHB
.394d52	0b		phd		                PHD
.394d53	08		php		                PHP
.394d54	48		pha		                PHA             ; begin setdbr macro
.394d55	08		php		                PHP
.394d56	e2 20		sep #$20	                SEP #$20        ; set A short
.394d58	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394d5a	48		pha		                PHA
.394d5b	ab		plb		                PLB
.394d5c	28		plp		                PLP
.394d5d	68		pla		                PLA             ; end setdbr macro
.394d5e	48		pha		                PHA             ; begin setdp macro
.394d5f	08		php		                PHP
.394d60	c2 20		rep #$20	                REP #$20        ; set A long
.394d62	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394d65	5b		tcd		                TCD
.394d66	28		plp		                PLP
.394d67	68		pla		                PLA             ; end setdp macro
.394d68	c2 30		rep #$30	                REP #$30        ; set A&X long
.394d6a	a5 12		lda $0332	                LDA DOS_CLUS_ID+2               ; Save the cluster number for later
.394d6c	48		pha		                PHA
.394d6d	a5 10		lda $0330	                LDA DOS_CLUS_ID
.394d6f	48		pha		                PHA
.394d70	22 56 4a 39	jsl $394a56	                JSL DOS_FREECLUS                ; Find a free cluster on the block device
.394d74	b0 09		bcs $394d7f	                BCS save_cluster                ; If we got a cluster, write the data to it
.394d76	68		pla		fail_cleanup    PLA                             ; Restore the cluster of the file
.394d77	85 10		sta $0330	                STA DOS_CLUS_ID
.394d79	68		pla		                PLA
.394d7a	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394d7c	82 7d 00	brl $394dfc	                BRL pass_failure                ; Pass the failure back up the chain
.394d7f	a5 10		lda $0330	save_cluster    LDA DOS_CLUS_ID
.394d81	8d 36 e0	sta $38e036	                STA DOS_NEW_CLUSTER
.394d84	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394d86	8d 38 e0	sta $38e038	                STA DOS_NEW_CLUSTER+2
.394d89	22 94 45 39	jsl $394594	                JSL DOS_PUTCLUSTER              ; Write the data to the free cluster
.394d8d	90 e7		bcc $394d76	                BCC fail_cleanup                ; If failure: clean up stack and pass the failure up
.394d8f	68		pla		                PLA                             ; Restore the cluster of the file
.394d90	85 10		sta $0330	                STA DOS_CLUS_ID
.394d92	68		pla		                PLA
.394d93	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394d95	22 62 49 39	jsl $394962	walk_loop       JSL NEXTCLUSTER                 ; Try to get the next cluster in the chain
.394d99	b0 fa		bcs $394d95	                BCS walk_loop                   ; If found a cluster, keep walking the chain
.394d9b	e2 20		sep #$20	                SEP #$20        ; set A short
.394d9d	af 01 e0 38	lda $38e001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394da1	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394da3	d0 3d		bne $394de2	                BNE fat32                       ; No: assume it's FAT32
.394da5					fat12
.394da5	c2 20		rep #$20	                REP #$20        ; set A long
.394da7	22 1c 48 39	jsl $39481c	                JSL ENTRYFORCLUS12              ; Make sure we have the right offset for the cluster
.394dab	a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if the last cluster ID is even or odd
.394dad	89 01 00	bit #$0001	                BIT #1
.394db0	d0 11		bne $394dc3	                BNE is_odd
.394db2	ad 36 e0	lda $38e036	is_even         LDA DOS_NEW_CLUSTER             ; Handle the even case (change the lower 12 bits)
.394db5	29 ff 0f	and #$0fff	                AND #$0FFF
.394db8	8d 36 e0	sta $38e036	                STA DOS_NEW_CLUSTER
.394dbb	bd 00 e5	lda $38e500,x	                LDA DOS_FAT_SECTORS,X
.394dbe	29 00 f0	and #$f000	                AND #$F000
.394dc1	80 10		bra $394dd3	                BRA update_fat12
.394dc3	ad 36 e0	lda $38e036	is_odd          LDA DOS_NEW_CLUSTER             ; Handle the odd case (change the upper 12 bits)
.394dc6	0a		asl a		                ASL A
.394dc7	0a		asl a		                ASL A
.394dc8	0a		asl a		                ASL A
.394dc9	0a		asl a		                ASL A
.394dca	8d 36 e0	sta $38e036	                STA DOS_NEW_CLUSTER
.394dcd	bd 00 e5	lda $38e500,x	                LDA DOS_FAT_SECTORS,X
.394dd0	29 0f 00	and #$000f	                AND #$000F
.394dd3	0d 36 e0	ora $38e036	update_fat12    ORA DOS_NEW_CLUSTER
.394dd6	9d 00 e5	sta $38e500,x	                STA DOS_FAT_SECTORS,X
.394dd9	22 7c 4c 39	jsl $394c7c	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.394ddd	b0 22		bcs $394e01	                BCS ret_success
.394ddf	82 1a 00	brl $394dfc	                BRL pass_failure
.394de2					fat32
.394de2	c2 20		rep #$20	                REP #$20        ; set A long
.394de4	ad 36 e0	lda $38e036	                LDA DOS_NEW_CLUSTER             ; Write the ID of the new cluster to the end of the chain
.394de7	9d 00 e5	sta $38e500,x	                STA DOS_FAT_SECTORS,X
.394dea	ad 38 e0	lda $38e038	                LDA DOS_NEW_CLUSTER+2
.394ded	9d 02 e5	sta $38e502,x	                STA DOS_FAT_SECTORS+2,X
.394df0	22 24 10 38	jsl $381024	                JSL PUTBLOCK                    ; Write the FAT sector back (assumes BIOS_LBA and BIOS_BUFF_PTR haven't changed)
.394df4	b0 0b		bcs $394e01	                BCS ret_success
.394df6	e2 20		sep #$20	                SEP #$20        ; set A short
.394df8	a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Problem working with the FAT
.394dfa	85 0e		sta $032e	                STA DOS_STATUS
.394dfc	28		plp		pass_failure    PLP
.394dfd	2b		pld		                PLD
.394dfe	ab		plb		                PLB
.394dff	18		clc		                CLC
.394e00	6b		rtl		                RTL
.394e01					ret_success
.394e01	e2 20		sep #$20	                SEP #$20        ; set A short
.394e03	64 0e		stz $032e	                STZ DOS_STATUS
.394e05	28		plp		                PLP
.394e06	2b		pld		                PLD
.394e07	ab		plb		                PLB
.394e08	38		sec		                SEC
.394e09	6b		rtl		                RTL
.394e0a					BCD2BIN
.394e0a	8b		phb		                PHB
.394e0b	0b		phd		                PHD
.394e0c	08		php		                PHP
.394e0d	48		pha		                PHA             ; begin setdbr macro
.394e0e	08		php		                PHP
.394e0f	e2 20		sep #$20	                SEP #$20        ; set A short
.394e11	a9 00		lda #$00	                LDA #0
.394e13	48		pha		                PHA
.394e14	ab		plb		                PLB
.394e15	28		plp		                PLP
.394e16	68		pla		                PLA             ; end setdbr macro
.394e17	48		pha		                PHA             ; begin setdp macro
.394e18	08		php		                PHP
.394e19	c2 20		rep #$20	                REP #$20        ; set A long
.394e1b	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394e1e	5b		tcd		                TCD
.394e1f	28		plp		                PLP
.394e20	68		pla		                PLA             ; end setdp macro
.394e21	c2 30		rep #$30	                REP #$30        ; set A&X long
.394e23	85 28		sta $0348	                STA DOS_TEMP
.394e25	29 0f 00	and #$000f	                AND #$000F
.394e28	85 2a		sta $034a	                STA DOS_TEMP+2
.394e2a	a5 28		lda $0348	                LDA DOS_TEMP
.394e2c	4a		lsr a		                LSR A
.394e2d	4a		lsr a		                LSR A
.394e2e	4a		lsr a		                LSR A
.394e2f	4a		lsr a		                LSR A
.394e30	85 28		sta $0348	                STA DOS_TEMP
.394e32	29 0f 00	and #$000f	                AND #$000F
.394e35	8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.394e39	a9 0a 00	lda #$000a	                LDA #10
.394e3c	8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.394e40	af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.394e44	18		clc		                CLC
.394e45	65 2a		adc $034a	                ADC DOS_TEMP+2
.394e47	85 2a		sta $034a	                STA DOS_TEMP+2
.394e49	a5 28		lda $0348	                LDA DOS_TEMP
.394e4b	4a		lsr a		                LSR A
.394e4c	4a		lsr a		                LSR A
.394e4d	4a		lsr a		                LSR A
.394e4e	4a		lsr a		                LSR A
.394e4f	85 28		sta $0348	                STA DOS_TEMP
.394e51	29 0f 00	and #$000f	                AND #$000F
.394e54	8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.394e58	a9 64 00	lda #$0064	                LDA #100
.394e5b	8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.394e5f	af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.394e63	18		clc		                CLC
.394e64	65 2a		adc $034a	                ADC DOS_TEMP+2
.394e66	85 2a		sta $034a	                STA DOS_TEMP+2
.394e68	a5 28		lda $0348	                LDA DOS_TEMP
.394e6a	4a		lsr a		                LSR A
.394e6b	4a		lsr a		                LSR A
.394e6c	4a		lsr a		                LSR A
.394e6d	4a		lsr a		                LSR A
.394e6e	29 0f 00	and #$000f	                AND #$000F
.394e71	8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.394e75	a9 e8 03	lda #$03e8	                LDA #1000
.394e78	8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.394e7c	af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.394e80	18		clc		                CLC
.394e81	65 2a		adc $034a	                ADC DOS_TEMP+2
.394e83	28		plp		                PLP
.394e84	2b		pld		                PLD
.394e85	ab		plb		                PLB
.394e86	6b		rtl		                RTL
.394e87					DOS_RTCCREATE
.394e87	8b		phb		                PHB
.394e88	0b		phd		                PHD
.394e89	08		php		                PHP
.394e8a	48		pha		                PHA             ; begin setdbr macro
.394e8b	08		php		                PHP
.394e8c	e2 20		sep #$20	                SEP #$20        ; set A short
.394e8e	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394e90	48		pha		                PHA
.394e91	ab		plb		                PLB
.394e92	28		plp		                PLP
.394e93	68		pla		                PLA             ; end setdbr macro
.394e94	48		pha		                PHA             ; begin setdp macro
.394e95	08		php		                PHP
.394e96	c2 20		rep #$20	                REP #$20        ; set A long
.394e98	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394e9b	5b		tcd		                TCD
.394e9c	28		plp		                PLP
.394e9d	68		pla		                PLA             ; end setdp macro
.394e9e	c2 10		rep #$10	                REP #$10        ; set X long
.394ea0	e2 20		sep #$20	                SEP #$20        ; set A short
.394ea2	af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn off the updates to the clock
.394ea6	09 08		ora #$08	                ORA #%00001000
.394ea8	8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.394eac	af 0f 08 af	lda $af080f	                LDA @l RTC_CENTURY
.394eb0	85 29		sta $0349	                STA DOS_TEMP+1
.394eb2	af 0a 08 af	lda $af080a	                LDA @l RTC_YEAR             ; Get the year
.394eb6	85 28		sta $0348	                STA DOS_TEMP
.394eb8	c2 20		rep #$20	                REP #$20        ; set A long
.394eba	a5 28		lda $0348	                LDA DOS_TEMP
.394ebc	22 0a 4e 39	jsl $394e0a	                JSL BCD2BIN                 ; Convert it to binary
.394ec0	85 28		sta $0348	                STA DOS_TEMP
.394ec2	38		sec		                SEC                         ; Year is relative to 1980
.394ec3	e9 bc 07	sbc #$07bc	                SBC #1980
.394ec6	c2 20		rep #$20	                REP #$20        ; set A long
.394ec8	0a		asl a		                ASL A
.394ec9	0a		asl a		                ASL A
.394eca	0a		asl a		                ASL A
.394ecb	0a		asl a		                ASL A
.394ecc	0a		asl a		                ASL A
.394ecd	0a		asl a		                ASL A
.394ece	0a		asl a		                ASL A
.394ecf	0a		asl a		                ASL A
.394ed0	0a		asl a		                ASL A
.394ed1	29 00 fe	and #$fe00	                AND #$FE00
.394ed4	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.394ed7	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394ed9	e2 20		sep #$20	                SEP #$20        ; set A short
.394edb	af 09 08 af	lda $af0809	                LDA @l RTC_MONTH            ; Get the month
.394edf	c2 20		rep #$20	                REP #$20        ; set A long
.394ee1	29 ff 00	and #$00ff	                AND #$00FF
.394ee4	22 0a 4e 39	jsl $394e0a	                JSL BCD2BIN                 ; Convert it to binary
.394ee8	29 ff 00	and #$00ff	                AND #$00FF                  ; Move the year to bits 15 - 9
.394eeb	0a		asl a		                ASL A
.394eec	0a		asl a		                ASL A
.394eed	0a		asl a		                ASL A
.394eee	0a		asl a		                ASL A
.394eef	0a		asl a		                ASL A
.394ef0	29 e0 01	and #$01e0	                AND #$01E0                  ; Make sure only the month is covered
.394ef3	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.394ef6	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.394ef8	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394efa	e2 20		sep #$20	                SEP #$20        ; set A short
.394efc	af 06 08 af	lda $af0806	                LDA @l RTC_DAY              ; Get the day
.394f00	c2 20		rep #$20	                REP #$20        ; set A long
.394f02	29 ff 00	and #$00ff	                AND #$00FF
.394f05	22 0a 4e 39	jsl $394e0a	                JSL BCD2BIN                 ; Convert it to binary
.394f09	29 1f 00	and #$001f	                AND #$001F                  ; Make sure only the day is covered
.394f0c	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.394f0f	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.394f11	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394f13	e2 20		sep #$20	                SEP #$20        ; set A short
.394f15	af 04 08 af	lda $af0804	                LDA @l RTC_HRS              ; Get the hour
.394f19	29 1f		and #$1f	                AND #$1F                    ; Trim AM/PM bit
.394f1b	c2 20		rep #$20	                REP #$20        ; set A long
.394f1d	29 ff 00	and #$00ff	                AND #$00FF
.394f20	22 0a 4e 39	jsl $394e0a	                JSL BCD2BIN                 ; Convert it to binary
.394f24	c2 20		rep #$20	                REP #$20        ; set A long
.394f26	0a		asl a		                ASL A
.394f27	0a		asl a		                ASL A
.394f28	0a		asl a		                ASL A
.394f29	0a		asl a		                ASL A
.394f2a	0a		asl a		                ASL A
.394f2b	0a		asl a		                ASL A
.394f2c	0a		asl a		                ASL A
.394f2d	0a		asl a		                ASL A
.394f2e	0a		asl a		                ASL A
.394f2f	0a		asl a		                ASL A
.394f30	0a		asl a		                ASL A
.394f31	29 00 f8	and #$f800	                AND #$F800
.394f34	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.394f37	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394f39	e2 20		sep #$20	                SEP #$20        ; set A short
.394f3b	af 02 08 af	lda $af0802	                LDA @l RTC_MIN              ; Get the minute
.394f3f	c2 20		rep #$20	                REP #$20        ; set A long
.394f41	29 ff 00	and #$00ff	                AND #$00FF
.394f44	22 0a 4e 39	jsl $394e0a	                JSL BCD2BIN                 ; Convert it to binary
.394f48	c2 20		rep #$20	                REP #$20        ; set A long
.394f4a	0a		asl a		                ASL A
.394f4b	0a		asl a		                ASL A
.394f4c	0a		asl a		                ASL A
.394f4d	0a		asl a		                ASL A
.394f4e	0a		asl a		                ASL A
.394f4f	29 e0 07	and #$07e0	                AND #$07E0
.394f52	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.394f55	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.394f57	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394f59	e2 20		sep #$20	                SEP #$20        ; set A short
.394f5b	af 00 08 af	lda $af0800	                LDA @l RTC_SEC              ; Get the second
.394f5f	c2 20		rep #$20	                REP #$20        ; set A long
.394f61	29 ff 00	and #$00ff	                AND #$00FF
.394f64	22 0a 4e 39	jsl $394e0a	                JSL BCD2BIN                 ; Convert it to binary
.394f68	c2 20		rep #$20	                REP #$20        ; set A long
.394f6a	29 1f 00	and #$001f	                AND #$001F
.394f6d	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.394f70	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.394f72	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394f74	af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn on the updates again
.394f78	29 f7 00	and #$00f7	                AND #%11110111
.394f7b	8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.394f7f	28		plp		                PLP
.394f80	2b		pld		                PLD
.394f81	ab		plb		                PLB
.394f82	6b		rtl		                RTL
.394f83					DOS_CREATE
.394f83	8b		phb		                PHB
.394f84	0b		phd		                PHD
.394f85	08		php		                PHP
.394f86	48		pha		                PHA             ; begin setdbr macro
.394f87	08		php		                PHP
.394f88	e2 20		sep #$20	                SEP #$20        ; set A short
.394f8a	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394f8c	48		pha		                PHA
.394f8d	ab		plb		                PLB
.394f8e	28		plp		                PLP
.394f8f	68		pla		                PLA             ; end setdbr macro
.394f90	48		pha		                PHA             ; begin setdp macro
.394f91	08		php		                PHP
.394f92	c2 20		rep #$20	                REP #$20        ; set A long
.394f94	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394f97	5b		tcd		                TCD
.394f98	28		plp		                PLP
.394f99	68		pla		                PLA             ; end setdp macro
.394f9a	c2 30		rep #$30	                REP #$30        ; set A&X long
.394f9c	a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; DOS_TEMP := DOS_FD_PTR->PATH
.394f9f	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394fa1	85 28		sta $0348	                STA DOS_TEMP
.394fa3	c8		iny		                INY
.394fa4	c8		iny		                INY
.394fa5	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394fa7	85 2a		sta $034a	                STA DOS_TEMP+2
.394fa9	e2 20		sep #$20	                SEP #$20        ; set A short
.394fab	a0 00 00	ldy #$0000	                LDY #0
.394fae	a2 00 00	ldx #$0000	                LDX #0
.394fb1	b7 28		lda [$0348],y	path_loop       LDA [DOS_TEMP],Y                ; Get a byte of the path
.394fb3	95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X             ; ... save it to the path buffer
.394fb5	f0 04		beq $394fbb	                BEQ find_file                   ; If it's NULL, we're done
.394fb7	e8		inx		                INX
.394fb8	c8		iny		                INY
.394fb9	80 f6		bra $394fb1	                BRA path_loop
.394fbb	22 a5 46 39	jsl $3946a5	find_file       JSL DOS_PARSE_PATH
.394fbf	22 3d 47 39	jsl $39473d	                JSL DOS_FINDFILE
.394fc3	90 07		bcc $394fcc	                BCC set_device
.394fc5	e2 20		sep #$20	                SEP #$20        ; set A short
.394fc7	a9 0b		lda #$0b	                LDA #DOS_ERR_FILEEXISTS
.394fc9	82 c9 00	brl $395095	                BRL ret_failure
.394fcc					set_device
.394fcc	e2 20		sep #$20	                SEP #$20        ; set A short
.394fce	a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.394fd1	a5 01		lda $0321	                LDA BIOS_DEV
.394fd3	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394fd5					validate_name
.394fd5	22 56 4a 39	jsl $394a56	                JSL DOS_FREECLUS
.394fd9	b0 03		bcs $394fde	                BCS save_data
.394fdb	82 bb 00	brl $395099	                BRL pass_failure
.394fde					save_data
.394fde	c2 20		rep #$20	                REP #$20        ; set A long
.394fe0	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER
.394fe3	a5 10		lda $0330	                LDA DOS_CLUS_ID             ; DOS_FD_PTR->FIRST_CLUSTER := DOS_CLUS_ID
.394fe5	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394fe7	c8		iny		                INY
.394fe8	c8		iny		                INY
.394fe9	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394feb	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394fed	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; DOS_BUFF_PTR := DOS_FD_PTR->BUFFER
.394ff0	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394ff2	85 1c		sta $033c	                STA DOS_BUFF_PTR
.394ff4	c8		iny		                INY
.394ff5	c8		iny		                INY
.394ff6	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394ff8	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394ffa	22 94 45 39	jsl $394594	                JSL DOS_PUTCLUSTER
.394ffe	b0 00		bcs $395000	                BCS find_dir
.395000					find_dir
.395000	c2 20		rep #$20	                REP #$20        ; set A long
.395002	22 f7 41 39	jsl $3941f7	                JSL DOS_DIRFINDFREE
.395006	b0 1a		bcs $395022	                BCS set_entry
.395008	c2 20		rep #$20	                REP #$20        ; set A long
.39500a	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Failed to get the directory entry...
.39500d	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y              ; DOS_CLUS_ID := DOS_FD_PTR->FIRST_CLUSTER
.39500f	85 10		sta $0330	                STA DOS_CLUS_ID
.395011	c8		iny		                INY
.395012	c8		iny		                INY
.395013	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395015	85 12		sta $0332	                STA DOS_CLUS_ID+2
.395017	22 11 4d 39	jsl $394d11	                JSL DELCLUSTER32                ; Delete the cluster
.39501b	e2 20		sep #$20	                SEP #$20        ; set A short
.39501d	a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Return that we couldn't read the directory
.39501f	82 73 00	brl $395095	                BRL ret_failure
.395022					set_entry
.395022	e2 20		sep #$20	                SEP #$20        ; set A short
.395024	a0 00 00	ldy #$0000	                LDY #0
.395027	a9 00		lda #$00	                LDA #0                          ; NULL
.395029	97 18		sta [$0338],y	copy_dir_loop   STA [DOS_DIR_PTR],Y             ; Save it to the directory cluster
.39502b	c8		iny		                INY
.39502c	c0 20 00	cpy #$0020	                CPY #SIZE(DIRENTRY)
.39502f	d0 f8		bne $395029	                BNE copy_dir_loop
.395031	a0 00 00	ldy #$0000	                LDY #0
.395034	b9 3a e0	lda $38e03a,y	name_loop       LDA DOS_SHORT_NAME,Y            ; Copy the name over
.395037	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395039	c8		iny		                INY
.39503a	c0 0b 00	cpy #$000b	                CPY #11
.39503d	d0 f5		bne $395034	                BNE name_loop
.39503f	c2 20		rep #$20	                REP #$20        ; set A long
.395041	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; DOS_DIR_PTR->CLUSTER_L := DOS_FD_PTR->FIRST_CLUSTER[15..0]
.395044	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395046	a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.395049	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.39504b	a0 0c 00	ldy #$000c	                LDY #FILEDESC.FIRST_CLUSTER+2   ; DOS_DIR_PTR->CLUSTER_H := DOS_FD_PTR->FIRST_CLUSTER[31..16]
.39504e	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395050	a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.395053	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395055	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE              ; DOS_DIR_PTR->SIZE := DOS_FD_PTR->SIZE
.395058	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39505a	a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE
.39505d	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.39505f	a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.395062	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395064	a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.395067	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395069	22 87 4e 39	jsl $394e87	                JSL DOS_RTCCREATE               ; Pull the creation date-time from the RTC
.39506d	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; DOS_DIR_PTR->CREATE_DATE := DOS_FD_PTR->CREATE_DATE
.395070	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395072	a0 10 00	ldy #$0010	                LDY #DIRENTRY.CREATE_DATE
.395075	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395077	a0 18 00	ldy #$0018	                LDY #DIRENTRY.MODIFIED_DATE     ; And DOS_DIR_PTR->MODIFIED_DATE
.39507a	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.39507c	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME       ; DOS_DIR_PTR->CREATE_TIME := DOS_FD_PTR->CREATE_TIME
.39507f	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395081	a0 0e 00	ldy #$000e	                LDY #DIRENTRY.CREATE_TIME
.395084	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395086	a0 16 00	ldy #$0016	                LDY #DIRENTRY.MODIFIED_TIME     ; And DOS_DIR_PTR->MODIFIED_TIME
.395089	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.39508b	c2 20		rep #$20	                REP #$20        ; set A long
.39508d	22 b5 42 39	jsl $3942b5	                JSL DOS_DIRWRITE
.395091	b0 0b		bcs $39509e	                BCS ret_success
.395093	80 04		bra $395099	                BRA pass_failure
.395095					ret_failure
.395095	e2 20		sep #$20	                SEP #$20        ; set A short
.395097	85 0e		sta $032e	                STA DOS_STATUS
.395099	28		plp		pass_failure    PLP
.39509a	2b		pld		                PLD
.39509b	ab		plb		                PLB
.39509c	18		clc		                CLC
.39509d	6b		rtl		                RTL
.39509e					ret_success
.39509e	e2 20		sep #$20	                SEP #$20        ; set A short
.3950a0	64 0e		stz $032e	                STZ DOS_STATUS
.3950a2	28		plp		                PLP
.3950a3	2b		pld		                PLD
.3950a4	ab		plb		                PLB
.3950a5	38		sec		                SEC
.3950a6	6b		rtl		                RTL
.3950a7					DOS_COPYPATH
.3950a7	da		phx		                PHX
.3950a8	5a		phy		                PHY
.3950a9	8b		phb		                PHB
.3950aa	0b		phd		                PHD
.3950ab	08		php		                PHP
.3950ac	48		pha		                PHA             ; begin setdbr macro
.3950ad	08		php		                PHP
.3950ae	e2 20		sep #$20	                SEP #$20        ; set A short
.3950b0	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3950b2	48		pha		                PHA
.3950b3	ab		plb		                PLB
.3950b4	28		plp		                PLP
.3950b5	68		pla		                PLA             ; end setdbr macro
.3950b6	48		pha		                PHA             ; begin setdp macro
.3950b7	08		php		                PHP
.3950b8	c2 20		rep #$20	                REP #$20        ; set A long
.3950ba	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3950bd	5b		tcd		                TCD
.3950be	28		plp		                PLP
.3950bf	68		pla		                PLA             ; end setdp macro
.3950c0	c2 30		rep #$30	                REP #$30        ; set A&X long
.3950c2	a9 00 00	lda #$0000	                LDA #0                  ; Set the DOS_PATH_BUFF to all zeros
.3950c5	a2 00 00	ldx #$0000	                LDX #0
.3950c8	95 e0		sta $0400,x	clr_loop        STA DOS_PATH_BUFF,X
.3950ca	e8		inx		                INX
.3950cb	e8		inx		                INX
.3950cc	e0 00 01	cpx #$0100	                CPX #256
.3950cf	d0 f7		bne $3950c8	                BNE clr_loop
.3950d1	a5 20		lda $0340	                LDA DOS_FD_PTR          ; Is the DOS_FD_PTR null?
.3950d3	d0 04		bne $3950d9	                BNE get_path            ; No: attempt to fetch the path
.3950d5	a5 22		lda $0342	                LDA DOS_FD_PTR+2
.3950d7	f0 27		beq $395100	                BEQ done                ; Yes: return an empty buffer
.3950d9	a0 02 00	ldy #$0002	get_path        LDY #FILEDESC.PATH      ; Get the path buffer
.3950dc	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3950de	85 28		sta $0348	                STA DOS_TEMP
.3950e0	c8		iny		                INY
.3950e1	c8		iny		                INY
.3950e2	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3950e4	85 2a		sta $034a	                STA DOS_TEMP+2
.3950e6	a5 28		lda $0348	                LDA DOS_TEMP            ; Is the path pointer NULL?
.3950e8	d0 04		bne $3950ee	                BNE start_copy          ; No: start copying it
.3950ea	a5 2a		lda $034a	                LDA DOS_TEMP+2
.3950ec	f0 12		beq $395100	                BEQ done                ; Yes: return an empty buffer
.3950ee					start_copy
.3950ee	e2 20		sep #$20	                SEP #$20        ; set A short
.3950f0	a2 00 00	ldx #$0000	                LDX #0
.3950f3	a0 00 00	ldy #$0000	                LDY #0
.3950f6	b7 28		lda [$0348],y	loop            LDA [DOS_TEMP],Y
.3950f8	95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.3950fa	f0 04		beq $395100	                BEQ done
.3950fc	e8		inx		                INX
.3950fd	c8		iny		                INY
.3950fe	d0 f6		bne $3950f6	                BNE loop
.395100	28		plp		done            PLP
.395101	2b		pld		                PLD
.395102	ab		plb		                PLB
.395103	7a		ply		                PLY
.395104	fa		plx		                PLX
.395105	6b		rtl		                RTL

;******  Return to file: src\sdos.asm

.395106					DOS_TEST
.395106	8b		phb		                PHB
.395107	0b		phd		                PHD
.395108	08		php		                PHP
.395109	48		pha		                PHA             ; begin setdbr macro
.39510a	08		php		                PHP
.39510b	e2 20		sep #$20	                SEP #$20        ; set A short
.39510d	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39510f	48		pha		                PHA
.395110	ab		plb		                PLB
.395111	28		plp		                PLP
.395112	68		pla		                PLA             ; end setdbr macro
.395113	48		pha		                PHA             ; begin setdp macro
.395114	08		php		                PHP
.395115	c2 20		rep #$20	                REP #$20        ; set A long
.395117	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39511a	5b		tcd		                TCD
.39511b	28		plp		                PLP
.39511c	68		pla		                PLA             ; end setdp macro
.39511d	c2 30		rep #$30	                REP #$30        ; set A&X long
.39511f	a9 37 51	lda #$5137	                LDA #<>sample
.395122	8f 60 03 00	sta $000360	                STA @l DOS_RUN_PARAM
.395126	a9 39 00	lda #$0039	                LDA #`sample
.395129	8f 62 03 00	sta $000362	                STA @l DOS_RUN_PARAM+2
.39512d	22 91 56 39	jsl $395691	                JSL IF_RUN
.395131	b0 00		bcs $395133	                BCS done
.395133	28		plp		done            PLP
.395134	2b		pld		                PLD
.395135	ab		plb		                PLB
.395136	6b		rtl		                RTL
>395137	40 46 3a 53 41 4d 50 4c		sample          .null "@F:SAMPLE.PGX Hello, world!"
>39513f	45 2e 50 47 58 20 48 65 6c 6c 6f 2c 20 77 6f 72
>39514f	6c 64 21 00
.395153					IF_OPEN
.395153	da		phx		                PHX
.395154	5a		phy		                PHY
.395155	0b		phd		                PHD
.395156	8b		phb		                PHB
.395157	08		php		                PHP
.395158	48		pha		                PHA             ; begin setdbr macro
.395159	08		php		                PHP
.39515a	e2 20		sep #$20	                SEP #$20        ; set A short
.39515c	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39515e	48		pha		                PHA
.39515f	ab		plb		                PLB
.395160	28		plp		                PLP
.395161	68		pla		                PLA             ; end setdbr macro
.395162	48		pha		                PHA             ; begin setdp macro
.395163	08		php		                PHP
.395164	c2 20		rep #$20	                REP #$20        ; set A long
.395166	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395169	5b		tcd		                TCD
.39516a	28		plp		                PLP
.39516b	68		pla		                PLA             ; end setdp macro
.39516c	e2 20		sep #$20	                SEP #$20        ; set A short
.39516e	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Get the status to make sure a open is ok
.395171	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395173	89 40		bit #$40	                BIT #FD_STAT_OPEN
.395175	f0 05		beq $39517c	                BEQ ok_to_open
.395177	a9 0f		lda #$0f	                LDA #DOS_ERR_OPEN               ; If already open: throw an error
.395179	82 fd 04	brl $395679	                BRL IF_FAILURE
.39517c	22 a7 50 39	jsl $3950a7	ok_to_open      JSL DOS_COPYPATH                ; Copy the path to the path buffer
.395180	22 3d 47 39	jsl $39473d	                JSL DOS_FINDFILE                ; Attempt to find the file
.395184	b0 03		bcs $395189	                BCS is_found                    ; If OK: we found the file
.395186	82 f4 04	brl $39567d	                BRL IF_PASSFAILURE              ; Otherwise: pass the failure up the chain
.395189					is_found
.395189	e2 20		sep #$20	                SEP #$20        ; set A short
.39518b	a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.39518e	a5 01		lda $0321	                LDA BIOS_DEV
.395190	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395192	c2 20		rep #$20	                REP #$20        ; set A long
.395194	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Set the buffer point to the one provided in the file
.395197	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395199	85 1c		sta $033c	                STA DOS_BUFF_PTR
.39519b	c8		iny		                INY
.39519c	c8		iny		                INY
.39519d	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39519f	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3951a1	22 57 45 39	jsl $394557	                JSL DOS_GETCLUSTER              ; Attempt to load the cluster
.3951a5	b0 03		bcs $3951aa	                BCS read_cluster
.3951a7	82 d3 04	brl $39567d	                BRL IF_PASSFAILURE
.3951aa	a0 0a 00	ldy #$000a	read_cluster    LDY #FILEDESC.FIRST_CLUSTER     ; Set the first cluster in the file descriptor
.3951ad	a5 10		lda $0330	                LDA DOS_CLUS_ID
.3951af	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3951b1	c8		iny		                INY
.3951b2	c8		iny		                INY
.3951b3	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3951b5	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3951b7	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Set the current cluster in the file descriptor
.3951ba	a5 10		lda $0330	                LDA DOS_CLUS_ID
.3951bc	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3951be	c8		iny		                INY
.3951bf	c8		iny		                INY
.3951c0	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3951c2	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3951c4	a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE              ; Copy the filesize from the directory entry to the file descriptor
.3951c7	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3951c9	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE
.3951cc	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3951ce	a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.3951d1	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3951d3	a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.3951d6	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3951d8	e2 20		sep #$20	                SEP #$20        ; set A short
.3951da	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Mark file as open and readable
.3951dd	a9 41		lda #$41	                LDA #FD_STAT_OPEN | FD_STAT_READ
.3951df	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.3951e1	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3951e3	82 9e 04	brl $395684	                BRL IF_SUCCESS
.3951e6					IF_CREATE
.3951e6	da		phx		                PHX
.3951e7	5a		phy		                PHY
.3951e8	0b		phd		                PHD
.3951e9	8b		phb		                PHB
.3951ea	08		php		                PHP
.3951eb	48		pha		                PHA             ; begin setdbr macro
.3951ec	08		php		                PHP
.3951ed	e2 20		sep #$20	                SEP #$20        ; set A short
.3951ef	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3951f1	48		pha		                PHA
.3951f2	ab		plb		                PLB
.3951f3	28		plp		                PLP
.3951f4	68		pla		                PLA             ; end setdbr macro
.3951f5	48		pha		                PHA             ; begin setdp macro
.3951f6	08		php		                PHP
.3951f7	c2 20		rep #$20	                REP #$20        ; set A long
.3951f9	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3951fc	5b		tcd		                TCD
.3951fd	28		plp		                PLP
.3951fe	68		pla		                PLA             ; end setdp macro
.3951ff	22 83 4f 39	jsl $394f83	                JSL DOS_CREATE                  ; Attempt to create the file
.395203	90 18		bcc $39521d	                BCC pass_failure                ; If it fails: pass the failure up the chain
.395205	c2 30		rep #$30	                REP #$30        ; set A&X long
.395207	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Sets the current cluster to 0 to make sure the next write appends
.39520a	a9 00 00	lda #$0000	                LDA #0
.39520d	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39520f	c8		iny		                INY
.395210	c8		iny		                INY
.395211	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395213	e2 20		sep #$20	                SEP #$20        ; set A short
.395215	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS
.395218	a9 42		lda #$42	                LDA #FD_STAT_OPEN | FD_STAT_WRITE   ; Set the file to open and APPEND only
.39521a	82 67 04	brl $395684	                BRL IF_SUCCESS
.39521d	82 59 04	brl $395679	pass_failure    BRL IF_FAILURE
.395220					IF_CLOSE
.395220	da		phx		                PHX
.395221	5a		phy		                PHY
.395222	0b		phd		                PHD
.395223	8b		phb		                PHB
.395224	08		php		                PHP
.395225	48		pha		                PHA             ; begin setdbr macro
.395226	08		php		                PHP
.395227	e2 20		sep #$20	                SEP #$20        ; set A short
.395229	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39522b	48		pha		                PHA
.39522c	ab		plb		                PLB
.39522d	28		plp		                PLP
.39522e	68		pla		                PLA             ; end setdbr macro
.39522f	48		pha		                PHA             ; begin setdp macro
.395230	08		php		                PHP
.395231	c2 20		rep #$20	                REP #$20        ; set A long
.395233	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395236	5b		tcd		                TCD
.395237	28		plp		                PLP
.395238	68		pla		                PLA             ; end setdp macro
.395239	e2 20		sep #$20	                SEP #$20        ; set A short
.39523b	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Check to see if we were writing the file
.39523e	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395240	89 02		bit #$02	                BIT #FD_STAT_WRITE
.395242	f0 09		beq $39524d	                BEQ set_flag                    ; No, just mark it closed
.395244	22 ad 52 39	jsl $3952ad	                JSL IF_WRITE                    ; Attempt to write the cluster
.395248	b0 03		bcs $39524d	                BCS set_flag
.39524a	82 30 04	brl $39567d	                BRL IF_PASSFAILURE              ; If there was a problem, pass it up the chain
.39524d	a0 00 00	ldy #$0000	set_flag        LDY #FILEDESC.STATUS
.395250	a9 bf		lda #$bf	                LDA #~FD_STAT_OPEN              ; Mark file as closed
.395252	37 20		and [$0340],y	                AND [DOS_FD_PTR],Y
.395254	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395256	82 2b 04	brl $395684	                BRL IF_SUCCESS
.395259					IF_READ
.395259	da		phx		                PHX
.39525a	5a		phy		                PHY
.39525b	0b		phd		                PHD
.39525c	8b		phb		                PHB
.39525d	08		php		                PHP
.39525e	48		pha		                PHA             ; begin setdbr macro
.39525f	08		php		                PHP
.395260	e2 20		sep #$20	                SEP #$20        ; set A short
.395262	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395264	48		pha		                PHA
.395265	ab		plb		                PLB
.395266	28		plp		                PLP
.395267	68		pla		                PLA             ; end setdbr macro
.395268	48		pha		                PHA             ; begin setdp macro
.395269	08		php		                PHP
.39526a	c2 20		rep #$20	                REP #$20        ; set A long
.39526c	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39526f	5b		tcd		                TCD
.395270	28		plp		                PLP
.395271	68		pla		                PLA             ; end setdp macro
.395272	c2 10		rep #$10	                REP #$10        ; set X long
.395274	e2 20		sep #$20	                SEP #$20        ; set A short
.395276					get_dev
.395276	e2 20		sep #$20	                SEP #$20        ; set A short
.395278	a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.39527b	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39527d	85 01		sta $0321	                STA BIOS_DEV
.39527f	c2 20		rep #$20	                REP #$20        ; set A long
.395281	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.395284	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395286	85 10		sta $0330	                STA DOS_CLUS_ID
.395288	c8		iny		                INY
.395289	c8		iny		                INY
.39528a	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39528c	85 12		sta $0332	                STA DOS_CLUS_ID+2
.39528e	22 62 49 39	jsl $394962	                JSL NEXTCLUSTER                 ; Find the next cluster of the file
.395292	90 13		bcc $3952a7	                BCC pass_failure                ; If not OK: pass the failure up the chaing
.395294	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.395297	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395299	85 1c		sta $033c	                STA DOS_BUFF_PTR
.39529b	c8		iny		                INY
.39529c	c8		iny		                INY
.39529d	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39529f	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3952a1	22 57 45 39	jsl $394557	                JSL DOS_GETCLUSTER              ; Get the cluster
.3952a5	b0 03		bcs $3952aa	                BCS ret_success                 ; If ok: return success
.3952a7					pass_failure
.3952a7	82 d3 03	brl $39567d	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.3952aa	82 d7 03	brl $395684	ret_success     BRL IF_SUCCESS
.3952ad					IF_WRITE
.3952ad	da		phx		                PHX
.3952ae	5a		phy		                PHY
.3952af	0b		phd		                PHD
.3952b0	8b		phb		                PHB
.3952b1	08		php		                PHP
.3952b2	48		pha		                PHA             ; begin setdbr macro
.3952b3	08		php		                PHP
.3952b4	e2 20		sep #$20	                SEP #$20        ; set A short
.3952b6	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3952b8	48		pha		                PHA
.3952b9	ab		plb		                PLB
.3952ba	28		plp		                PLP
.3952bb	68		pla		                PLA             ; end setdbr macro
.3952bc	48		pha		                PHA             ; begin setdp macro
.3952bd	08		php		                PHP
.3952be	c2 20		rep #$20	                REP #$20        ; set A long
.3952c0	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3952c3	5b		tcd		                TCD
.3952c4	28		plp		                PLP
.3952c5	68		pla		                PLA             ; end setdp macro
.3952c6	c2 10		rep #$10	                REP #$10        ; set X long
.3952c8	e2 20		sep #$20	                SEP #$20        ; set A short
.3952ca	a0 01 00	ldy #$0001	get_dev         LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.3952cd	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3952cf	85 01		sta $0321	                STA BIOS_DEV
.3952d1	c2 20		rep #$20	                REP #$20        ; set A long
.3952d3	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.3952d6	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3952d8	85 1c		sta $033c	                STA DOS_BUFF_PTR
.3952da	c8		iny		                INY
.3952db	c8		iny		                INY
.3952dc	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3952de	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3952e0	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.3952e3	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3952e5	85 10		sta $0330	                STA DOS_CLUS_ID
.3952e7	c8		iny		                INY
.3952e8	c8		iny		                INY
.3952e9	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3952eb	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3952ed	d0 1a		bne $395309	                BNE rewrite_cluster             ; If the cluster ID <> 0, overwrite it
.3952ef	a5 10		lda $0330	                LDA DOS_CLUS_ID
.3952f1	d0 16		bne $395309	                BNE rewrite_cluster
.3952f3	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Get the file's first cluster
.3952f6	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3952f8	85 10		sta $0330	                STA DOS_CLUS_ID
.3952fa	c8		iny		                INY
.3952fb	c8		iny		                INY
.3952fc	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3952fe	85 12		sta $0332	                STA DOS_CLUS_ID+2
.395300	22 51 4d 39	jsl $394d51	                JSL DOS_APPENDCLUS              ; Append the cluster
.395304	b0 0c		bcs $395312	                BCS ret_success                 ; If OK: return success
.395306	82 74 03	brl $39567d	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.395309	22 94 45 39	jsl $394594	rewrite_cluster JSL DOS_PUTCLUSTER              ; Over-write the cluster
.39530d	b0 03		bcs $395312	                BCS ret_success                 ; If ok: return success
.39530f	82 6b 03	brl $39567d	pass_failure    BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.395312	82 6f 03	brl $395684	ret_success     BRL IF_SUCCESS
.395315					IF_DIROPEN
.395315	da		phx		                PHX
.395316	5a		phy		                PHY
.395317	0b		phd		                PHD
.395318	8b		phb		                PHB
.395319	08		php		                PHP
.39531a	48		pha		                PHA             ; begin setdbr macro
.39531b	08		php		                PHP
.39531c	e2 20		sep #$20	                SEP #$20        ; set A short
.39531e	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395320	48		pha		                PHA
.395321	ab		plb		                PLB
.395322	28		plp		                PLP
.395323	68		pla		                PLA             ; end setdbr macro
.395324	48		pha		                PHA             ; begin setdp macro
.395325	08		php		                PHP
.395326	c2 20		rep #$20	                REP #$20        ; set A long
.395328	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39532b	5b		tcd		                TCD
.39532c	28		plp		                PLP
.39532d	68		pla		                PLA             ; end setdp macro
.39532e	c2 30		rep #$30	                REP #$30        ; set A&X long
.395330	22 a7 50 39	jsl $3950a7	                JSL DOS_COPYPATH            ; Copy the path from the file descriptor to the path buffer
.395334	22 a5 46 39	jsl $3946a5	                JSL DOS_PARSE_PATH          ; Parse the path
.395338	22 46 43 39	jsl $394346	                JSL DOS_MOUNT               ; Make sure we've mounted the SDC.
.39533c	b0 03		bcs $395341	                BCS get_root_dir            ; If successful: get the root directory
.39533e	82 3c 03	brl $39567d	                BRL IF_PASSFAILURE          ; Otherwise: pass the error up the chain
.395341					get_root_dir
.395341	c2 30		rep #$30	                REP #$30        ; set A&X long
.395343	22 9c 40 39	jsl $39409c	                JSL DOS_DIROPEN
.395347	b0 03		bcs $39534c	                BCS success
.395349	82 31 03	brl $39567d	                BRL IF_PASSFAILURE
.39534c	82 35 03	brl $395684	success         BRL IF_SUCCESS
.39534f					IF_DIRNEXT
.39534f	5c 36 41 39	jmp $394136	                JML DOS_DIRNEXT
.395353					IF_DELETE
.395353	da		phx		                PHX
.395354	5a		phy		                PHY
.395355	0b		phd		                PHD
.395356	8b		phb		                PHB
.395357	08		php		                PHP
.395358	48		pha		                PHA             ; begin setdbr macro
.395359	08		php		                PHP
.39535a	e2 20		sep #$20	                SEP #$20        ; set A short
.39535c	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39535e	48		pha		                PHA
.39535f	ab		plb		                PLB
.395360	28		plp		                PLP
.395361	68		pla		                PLA             ; end setdbr macro
.395362	48		pha		                PHA             ; begin setdp macro
.395363	08		php		                PHP
.395364	c2 20		rep #$20	                REP #$20        ; set A long
.395366	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395369	5b		tcd		                TCD
.39536a	28		plp		                PLP
.39536b	68		pla		                PLA             ; end setdp macro
.39536c	c2 30		rep #$30	                REP #$30        ; set A&X long
.39536e	22 3d 47 39	jsl $39473d	                JSL DOS_FINDFILE
.395372	b0 03		bcs $395377	                BCS get_first_clus
.395374	82 06 03	brl $39567d	                BRL IF_PASSFAILURE
.395377					get_first_clus
.395377	a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.39537a	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.39537c	85 10		sta $0330	                STA DOS_CLUS_ID
.39537e	a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.395381	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.395383	85 12		sta $0332	                STA DOS_CLUS_ID+2
.395385	a5 10		lda $0330	                LDA DOS_CLUS_ID
.395387	8d 2a e0	sta $38e02a	                STA DOS_CURR_CLUS
.39538a	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.39538c	8d 2c e0	sta $38e02c	                STA DOS_CURR_CLUS+2
.39538f	22 62 49 39	jsl $394962	del_loop        JSL NEXTCLUSTER
.395393	90 2f		bcc $3953c4	                BCC del_one
.395395	a5 10		lda $0330	                LDA DOS_CLUS_ID
.395397	8d 2e e0	sta $38e02e	                STA DOS_NEXT_CLUS
.39539a	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.39539c	8d 30 e0	sta $38e030	                STA DOS_NEXT_CLUS+2
.39539f	ad 2a e0	lda $38e02a	                LDA DOS_CURR_CLUS
.3953a2	85 10		sta $0330	                STA DOS_CLUS_ID
.3953a4	ad 2c e0	lda $38e02c	                LDA DOS_CURR_CLUS+2
.3953a7	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3953a9	22 11 4d 39	jsl $394d11	                JSL DELCLUSTER32
.3953ad	b0 03		bcs $3953b2	                BCS go_next
.3953af	82 cb 02	brl $39567d	                BRL IF_PASSFAILURE
.3953b2					go_next
.3953b2	ad 2e e0	lda $38e02e	                LDA DOS_NEXT_CLUS
.3953b5	85 10		sta $0330	                STA DOS_CLUS_ID
.3953b7	8d 2a e0	sta $38e02a	                STA DOS_CURR_CLUS
.3953ba	ad 30 e0	lda $38e030	                LDA DOS_NEXT_CLUS+2
.3953bd	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3953bf	8d 2c e0	sta $38e02c	                STA DOS_CURR_CLUS+2
.3953c2	80 cb		bra $39538f	                BRA del_loop
.3953c4					del_one
.3953c4	ad 2a e0	lda $38e02a	                LDA DOS_CURR_CLUS
.3953c7	85 10		sta $0330	                STA DOS_CLUS_ID
.3953c9	ad 2c e0	lda $38e02c	                LDA DOS_CURR_CLUS+2
.3953cc	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3953ce	22 6b 4c 39	jsl $394c6b	                JSL DELCLUSTER
.3953d2	b0 03		bcs $3953d7	                BCS free_dir_entry
.3953d4	82 a6 02	brl $39567d	                BRL IF_PASSFAILURE
.3953d7					free_dir_entry
.3953d7	e2 20		sep #$20	                SEP #$20        ; set A short
.3953d9	a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME         ; Flag the directory entry as deleted
.3953dc	a9 e5		lda #$e5	                LDA #DOS_DIR_ENT_UNUSED
.3953de	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.3953e0	22 b5 42 39	jsl $3942b5	                JSL DOS_DIRWRITE                ; Write the directory entry back
.3953e4	b0 03		bcs $3953e9	                BCS ret_success
.3953e6	82 94 02	brl $39567d	                BRL IF_PASSFAILURE
.3953e9	82 98 02	brl $395684	ret_success     BRL IF_SUCCESS
.3953ec					IF_DIRREAD
.3953ec	da		phx		                PHX
.3953ed	5a		phy		                PHY
.3953ee	0b		phd		                PHD
.3953ef	8b		phb		                PHB
.3953f0	08		php		                PHP
.3953f1	48		pha		                PHA             ; begin setdbr macro
.3953f2	08		php		                PHP
.3953f3	e2 20		sep #$20	                SEP #$20        ; set A short
.3953f5	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3953f7	48		pha		                PHA
.3953f8	ab		plb		                PLB
.3953f9	28		plp		                PLP
.3953fa	68		pla		                PLA             ; end setdbr macro
.3953fb	48		pha		                PHA             ; begin setdp macro
.3953fc	08		php		                PHP
.3953fd	c2 20		rep #$20	                REP #$20        ; set A long
.3953ff	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395402	5b		tcd		                TCD
.395403	28		plp		                PLP
.395404	68		pla		                PLA             ; end setdp macro
.395405	c2 30		rep #$30	                REP #$30        ; set A&X long
.395407	22 3d 47 39	jsl $39473d	                JSL DOS_FINDFILE
.39540b	b0 03		bcs $395410	                BCS success
.39540d	82 69 02	brl $395679	                BRL IF_FAILURE
.395410	82 71 02	brl $395684	success         BRL IF_SUCCESS
.395413					IF_DIRWRITE
.395413	5c b5 42 39	jmp $3942b5	                JML DOS_DIRWRITE
.395417					IF_LOAD
.395417	da		phx		                PHX
.395418	5a		phy		                PHY
.395419	0b		phd		                PHD
.39541a	8b		phb		                PHB
.39541b	08		php		                PHP
.39541c	48		pha		                PHA             ; begin setdbr macro
.39541d	08		php		                PHP
.39541e	e2 20		sep #$20	                SEP #$20        ; set A short
.395420	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395422	48		pha		                PHA
.395423	ab		plb		                PLB
.395424	28		plp		                PLP
.395425	68		pla		                PLA             ; end setdbr macro
.395426	48		pha		                PHA             ; begin setdp macro
.395427	08		php		                PHP
.395428	c2 20		rep #$20	                REP #$20        ; set A long
.39542a	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39542d	5b		tcd		                TCD
.39542e	28		plp		                PLP
.39542f	68		pla		                PLA             ; end setdp macro
.395430	c2 30		rep #$30	                REP #$30        ; set A&X long
.395432	22 53 51 39	jsl $395153	                JSL IF_OPEN
.395436	b0 03		bcs $39543b	                BCS setup                   ; If success: start setting things up
.395438	82 42 02	brl $39567d	                BRL IF_PASSFAILURE          ; Otherwise: pass the failure up the chain
.39543b					setup
.39543b	c2 20		rep #$20	                REP #$20        ; set A long
.39543d	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE          ; Record the size of the file in DOS_FILE_SIZE
.395440	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395442	85 2c		sta $034c	                STA DOS_FILE_SIZE
.395444	c8		iny		                INY
.395445	c8		iny		                INY
.395446	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395448	85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.39544a	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; Set up the source pointer
.39544d	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39544f	85 30		sta $0350	                STA DOS_SRC_PTR
.395451	c8		iny		                INY
.395452	c8		iny		                INY
.395453	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395455	85 32		sta $0352	                STA DOS_SRC_PTR+2
.395457	a5 36		lda $0356	                LDA DOS_DST_PTR+2           ; Is there a destination address in RAM?
.395459	c9 40 00	cmp #$0040	                CMP #$0040
.39545c	b0 04		bcs $395462	                BGE load_by_type            ; No: try to load it by type
.39545e	5c 2c 55 39	jmp $39552c	                JML IF_LOADRAW              ; Otherwise, load it to the supplied destination
.395462	a0 08 00	ldy #$0008	load_by_type    LDY #8                      ; Point to the first extension byte
.395465	a2 00 00	ldx #$0000	                LDX #0                      ; and the first byte of the table
.395468					type_loop
.395468	e2 20		sep #$20	                SEP #$20        ; set A short
.39546a	bf ae 54 39	lda $3954ae,x	                LDA LOAD_TYPE_TABLE,X       ; Get 1st extension character of the entry
.39546e	f0 37		beq $3954a7	                BEQ no_match                ; If NULL... we didn't get a match
.395470	d9 3a e0	cmp $38e03a,y	                CMP DOS_SHORT_NAME,Y        ; Get the character of the extension
.395473	d0 28		bne $39549d	                BNE next_entry              ; If they don't match, try the next entry
.395475	bf af 54 39	lda $3954af,x	                LDA LOAD_TYPE_TABLE+1,X     ; Get 2nd extension character of the entry
.395479	d9 3b e0	cmp $38e03b,y	                CMP DOS_SHORT_NAME+1,Y      ; Get the 2nd character of the extension
.39547c	d0 1f		bne $39549d	                BNE next_entry              ; If they don't match, try the next entry
.39547e	bf b0 54 39	lda $3954b0,x	                LDA LOAD_TYPE_TABLE+2,X     ; Get 3rd extension character of the entry
.395482	d9 3c e0	cmp $38e03c,y	                CMP DOS_SHORT_NAME+2,Y      ; Get the 3rd character of the extension
.395485	d0 16		bne $39549d	                BNE next_entry              ; If they don't match, try the next entry
.395487	c2 20		rep #$20	                REP #$20        ; set A long
.395489	bf b1 54 39	lda $3954b1,x	                LDA LOAD_TYPE_TABLE+3,X     ; Get the low word of the address
.39548d	85 28		sta $0348	                STA DOS_TEMP                ; Save it to the jump vector
.39548f	e2 20		sep #$20	                SEP #$20        ; set A short
.395491	bf b3 54 39	lda $3954b3,x	                LDA LOAD_TYPE_TABLE+5,X     ; Get the high byte of the address
.395495	85 2a		sta $034a	                STA DOS_TEMP+2              ; Save it to the jump vector
.395497	a2 00 00	ldx #$0000	                LDX #0
.39549a	dc 48 03	jmp [$0348]	                JML [DOS_TEMP]              ; Jump to the loading routine
.39549d					next_entry
.39549d	c2 30		rep #$30	                REP #$30        ; set A&X long
.39549f	8a		txa		                TXA
.3954a0	18		clc		                CLC
.3954a1	69 06 00	adc #$0006	                ADC #6
.3954a4	aa		tax		                TAX
.3954a5	80 c1		bra $395468	                BRA type_loop               ; And check it against the file
.3954a7					no_match
.3954a7	e2 20		sep #$20	                SEP #$20        ; set A short
.3954a9	a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC         ; Return an not-executable error
.3954ab	82 cb 01	brl $395679	                BRL IF_FAILURE
>3954ae	50 47 58			LOAD_TYPE_TABLE .text "PGX"                 ; "PGX" --> IF_LOADPGX
>3954b1	b5 54				                .word <>IF_LOADPGX
>3954b3	39				                .byte `IF_LOADPGX
>3954b4	00				                .byte 0
.3954b5					IF_LOADPGX
.3954b5	c2 10		rep #$10	                REP #$10        ; set X long
.3954b7	e2 20		sep #$20	                SEP #$20        ; set A short
.3954b9	a0 00 00	ldy #$0000	                LDY #0
.3954bc	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Check for "PGX" signature
.3954be	c9 50		cmp #$50	                CMP #'P'
.3954c0	d0 15		bne $3954d7	                BNE fail_sig                        ; If not found, fail
.3954c2	c8		iny		                INY
.3954c3	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.3954c5	c9 47		cmp #$47	                CMP #'G'
.3954c7	d0 0e		bne $3954d7	                BNE fail_sig
.3954c9	c8		iny		                INY
.3954ca	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.3954cc	c9 58		cmp #$58	                CMP #'X'
.3954ce	d0 07		bne $3954d7	                BNE fail_sig
.3954d0	c8		iny		                INY                                 ; Check for CPU and version code ($01 for 65816)
.3954d1	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.3954d3	c9 01		cmp #$01	                CMP #$01
.3954d5	f0 06		beq $3954dd	                BEQ get_dest                        ; All passes: go to get the destination address
.3954d7	a9 10		lda #$10	fail_sig        LDA #DOS_ERR_PGXSIG                 ; Fail with a PGXSIG error code
.3954d9	22 79 56 39	jsl $395679	                JSL IF_FAILURE
.3954dd					get_dest
.3954dd	c2 20		rep #$20	                REP #$20        ; set A long
.3954df	c8		iny		                INY
.3954e0	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get low word of destination address
.3954e2	85 34		sta $0354	                STA DOS_DST_PTR                     ; And save it to the destination pointer
.3954e4	85 3c		sta $035c	                STA DOS_RUN_PTR                     ; And save it to the RUN pointer
.3954e6	c8		iny		                INY
.3954e7	c8		iny		                INY
.3954e8	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get high word of destination address
.3954ea	85 36		sta $0356	                STA DOS_DST_PTR+2
.3954ec	85 3e		sta $035e	                STA DOS_RUN_PTR+2
.3954ee	c8		iny		                INY                                 ; Point to the first data byte
.3954ef	c8		iny		                INY
.3954f0					copy_loop
.3954f0	e2 20		sep #$20	                SEP #$20        ; set A short
.3954f2	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Read a byte from the file
.3954f4	87 34		sta [$0354]	                STA [DOS_DST_PTR]                   ; Write it to the destination
.3954f6	c2 20		rep #$20	                REP #$20        ; set A long
.3954f8	e6 34		inc $0354	                INC DOS_DST_PTR                     ; Move to the next destination location
.3954fa	d0 02		bne $3954fe	                BNE dec_file_size
.3954fc	e6 34		inc $0354	                INC DOS_DST_PTR
.3954fe	38		sec		dec_file_size   SEC                                 ; Count down the number of bytes to read
.3954ff	a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.395501	e9 01 00	sbc #$0001	                SBC #1
.395504	85 2c		sta $034c	                STA DOS_FILE_SIZE
.395506	a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.395508	e9 00 00	sbc #$0000	                SBC #0
.39550b	85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.39550d	a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Are we at the end of the file?
.39550f	d0 04		bne $395515	                BNE next_byte
.395511	a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.395513	f0 14		beq $395529	                BEQ done                            ; Yes: we're done
.395515	c8		iny		next_byte       INY                                 ; Otherwise, move to the next source location
.395516	cc 0e e0	cpy $38e00e	                CPY CLUSTER_SIZE                    ; Are we at the end of the cluster?
.395519	d0 d5		bne $3954f0	                BNE copy_loop                       ; No: keep copying
.39551b	22 62 49 39	jsl $394962	                JSL NEXTCLUSTER                     ; Yes: Load the next cluster
.39551f	b0 03		bcs $395524	                BCS next_cluster
.395521	82 59 01	brl $39567d	                BRL IF_PASSFAILURE                  ; If failed: pass that up the chain
.395524	a0 00 00	ldy #$0000	next_cluster    LDY #0                              ; Reset the source index
.395527	80 c7		bra $3954f0	                BRA copy_loop                       ; Go back to copying
.395529	82 58 01	brl $395684	done            BRL IF_SUCCESS
.39552c					IF_LOADRAW
.39552c	c2 30		rep #$30	                REP #$30        ; set A&X long
.39552e	a0 00 00	ldy #$0000	copy_cluster    LDY #0
.395531					copy_loop
.395531	e2 20		sep #$20	                SEP #$20        ; set A short
.395533	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y         ; Copy byte from cluster to destination
.395535	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395537	c2 20		rep #$20	                REP #$20        ; set A long
.395539	38		sec		                SEC                         ; Count down the number of bytes left
.39553a	a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.39553c	e9 01 00	sbc #$0001	                SBC #1
.39553f	85 2c		sta $034c	                STA DOS_FILE_SIZE
.395541	a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.395543	e9 00 00	sbc #$0000	                SBC #0
.395546	85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.395548	d0 04		bne $39554e	                BNE continue
.39554a	a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.39554c	f0 1b		beq $395569	                BEQ close_file              ; If not: we're done
.39554e	c8		iny		continue        INY
.39554f	cc 0e e0	cpy $38e00e	                CPY CLUSTER_SIZE            ; Are we done with the cluster?
.395552	d0 dd		bne $395531	                BNE copy_loop               ; No: keep processing the bytes
.395554	18		clc		                CLC                         ; Advance the destination pointer to the next chunk of memory
.395555	a5 34		lda $0354	                LDA DOS_DST_PTR
.395557	6d 0e e0	adc $38e00e	                ADC CLUSTER_SIZE
.39555a	85 34		sta $0354	                STA DOS_DST_PTR
.39555c	a5 36		lda $0356	                LDA DOS_DST_PTR+2
.39555e	69 00 00	adc #$0000	                ADC #0
.395561	85 36		sta $0356	                STA DOS_DST_PTR+2
.395563	22 59 52 39	jsl $395259	                JSL IF_READ                 ; Yes: load the next cluster
.395567	b0 c5		bcs $39552e	                BCS copy_cluster            ; And start copying it
.395569					close_file
.395569	82 18 01	brl $395684	ret_success     BRL IF_SUCCESS
.39556c					IF_NULLBUFFER
.39556c	5a		phy		                PHY
.39556d	8b		phb		                PHB
.39556e	0b		phd		                PHD
.39556f	08		php		                PHP
.395570	48		pha		                PHA             ; begin setdbr macro
.395571	08		php		                PHP
.395572	e2 20		sep #$20	                SEP #$20        ; set A short
.395574	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395576	48		pha		                PHA
.395577	ab		plb		                PLB
.395578	28		plp		                PLP
.395579	68		pla		                PLA             ; end setdbr macro
.39557a	48		pha		                PHA             ; begin setdp macro
.39557b	08		php		                PHP
.39557c	c2 20		rep #$20	                REP #$20        ; set A long
.39557e	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395581	5b		tcd		                TCD
.395582	28		plp		                PLP
.395583	68		pla		                PLA             ; end setdp macro
.395584	c2 30		rep #$30	                REP #$30        ; set A&X long
.395586	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.395589	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39558b	85 28		sta $0348	                STA DOS_TEMP
.39558d	c8		iny		                INY
.39558e	c8		iny		                INY
.39558f	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395591	85 2a		sta $034a	                STA DOS_TEMP+2
.395593	a0 00 00	ldy #$0000	                LDY #0
.395596	a9 00 00	lda #$0000	                LDA #0
.395599	97 28		sta [$0348],y	loop            STA [DOS_TEMP],Y
.39559b	c8		iny		                INY
.39559c	c8		iny		                INY
.39559d	cc 0e e0	cpy $38e00e	                CPY CLUSTER_SIZE
.3955a0	d0 f7		bne $395599	                BNE loop
.3955a2	28		plp		                PLP
.3955a3	2b		pld		                PLD
.3955a4	ab		plb		                PLB
.3955a5	7a		ply		                PLY
.3955a6	6b		rtl		                RTL
.3955a7					IF_COPY2BUFF
.3955a7	5a		phy		                PHY
.3955a8	8b		phb		                PHB
.3955a9	0b		phd		                PHD
.3955aa	08		php		                PHP
.3955ab	48		pha		                PHA             ; begin setdbr macro
.3955ac	08		php		                PHP
.3955ad	e2 20		sep #$20	                SEP #$20        ; set A short
.3955af	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3955b1	48		pha		                PHA
.3955b2	ab		plb		                PLB
.3955b3	28		plp		                PLP
.3955b4	68		pla		                PLA             ; end setdbr macro
.3955b5	48		pha		                PHA             ; begin setdp macro
.3955b6	08		php		                PHP
.3955b7	c2 20		rep #$20	                REP #$20        ; set A long
.3955b9	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3955bc	5b		tcd		                TCD
.3955bd	28		plp		                PLP
.3955be	68		pla		                PLA             ; end setdp macro
.3955bf	c2 30		rep #$30	                REP #$30        ; set A&X long
.3955c1	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.3955c4	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3955c6	85 28		sta $0348	                STA DOS_TEMP
.3955c8	c8		iny		                INY
.3955c9	c8		iny		                INY
.3955ca	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3955cc	85 2a		sta $034a	                STA DOS_TEMP+2
.3955ce	a0 00 00	ldy #$0000	                LDY #0
.3955d1					copy_loop
.3955d1	e2 20		sep #$20	                SEP #$20        ; set A short
.3955d3	a7 30		lda [$0350]	                LDA [DOS_SRC_PTR]           ; Copy a byte
.3955d5	97 28		sta [$0348],y	                STA [DOS_TEMP],Y
.3955d7	c2 20		rep #$20	                REP #$20        ; set A long
.3955d9	c8		iny		                INY                         ; Count it
.3955da	cc 0e e0	cpy $38e00e	                CPY CLUSTER_SIZE            ; Have we reached the limit?
.3955dd	f0 14		beq $3955f3	                BEQ done                    ; Yes: we're done
.3955df	a5 30		lda $0350	                LDA DOS_SRC_PTR             ; Check if we copied the last byte
.3955e1	c5 38		cmp $0358	                CMP DOS_END_PTR
.3955e3	d0 06		bne $3955eb	                BNE next_byte
.3955e5	a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.3955e7	c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.3955e9	f0 08		beq $3955f3	                BEQ done                    ; Yes: we're done
.3955eb	e6 30		inc $0350	next_byte       INC DOS_SRC_PTR             ; No: advance the source pointer
.3955ed	d0 e2		bne $3955d1	                BNE copy_loop
.3955ef	e6 32		inc $0352	                INC DOS_SRC_PTR+2
.3955f1	80 de		bra $3955d1	                BRA copy_loop               ; And try this next byte
.3955f3	28		plp		done            PLP
.3955f4	2b		pld		                PLD
.3955f5	ab		plb		                PLB
.3955f6	7a		ply		                PLY
.3955f7	6b		rtl		                RTL
.3955f8					IF_SAVE
.3955f8	da		phx		                PHX
.3955f9	5a		phy		                PHY
.3955fa	0b		phd		                PHD
.3955fb	8b		phb		                PHB
.3955fc	08		php		                PHP
.3955fd	48		pha		                PHA             ; begin setdbr macro
.3955fe	08		php		                PHP
.3955ff	e2 20		sep #$20	                SEP #$20        ; set A short
.395601	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395603	48		pha		                PHA
.395604	ab		plb		                PLB
.395605	28		plp		                PLP
.395606	68		pla		                PLA             ; end setdbr macro
.395607	48		pha		                PHA             ; begin setdp macro
.395608	08		php		                PHP
.395609	c2 20		rep #$20	                REP #$20        ; set A long
.39560b	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39560e	5b		tcd		                TCD
.39560f	28		plp		                PLP
.395610	68		pla		                PLA             ; end setdp macro
.395611	c2 30		rep #$30	                REP #$30        ; set A&X long
.395613	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE := DOS_END_PTR - DOS_SRC_PTR
.395616	38		sec		                SEC
.395617	a5 38		lda $0358	                LDA DOS_END_PTR
.395619	e5 30		sbc $0350	                SBC DOS_SRC_PTR
.39561b	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39561d	c8		iny		                INY
.39561e	c8		iny		                INY
.39561f	a5 3a		lda $035a	                LDA DOS_END_PTR+2
.395621	e5 32		sbc $0352	                SBC DOS_SRC_PTR+2
.395623	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395625	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE++
.395628	18		clc		                CLC
.395629	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39562b	69 01 00	adc #$0001	                ADC #1
.39562e	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395630	90 09		bcc $39563b	                BCC first_block
.395632	c8		iny		                INY
.395633	c8		iny		                INY
.395634	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395636	69 00 00	adc #$0000	                ADC #0
.395639	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39563b	22 6c 55 39	jsl $39556c	first_block     JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.39563f	22 a7 55 39	jsl $3955a7	                JSL IF_COPY2BUFF        ; Copy first (at most) 512 bytes of data to FD buffer
.395643	22 e6 51 39	jsl $3951e6	                JSL IF_CREATE           ; Create file.
.395647	b0 03		bcs $39564c	                BCS check_for_end
.395649	82 31 00	brl $39567d	                BRL IF_PASSFAILURE      ; If we couldn't create the file, pass the failure up
.39564c	a5 30		lda $0350	check_for_end   LDA DOS_SRC_PTR         ; Check if we copied the last byte
.39564e	c5 38		cmp $0358	                CMP DOS_END_PTR
.395650	d0 06		bne $395658	                BNE next_block
.395652	a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.395654	c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.395656	f0 1d		beq $395675	                BEQ done                ; Yes: we're done
.395658	22 6c 55 39	jsl $39556c	next_block      JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.39565c	22 a7 55 39	jsl $3955a7	                JSL IF_COPY2BUFF        ; Copy next (at most) 512 bytes of data to FD buffer
.395660	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER   ; Make sure the CLUSTER is 0 to force an append
.395663	a9 00 00	lda #$0000	                LDA #0
.395666	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395668	c8		iny		                INY
.395669	c8		iny		                INY
.39566a	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39566c	22 ad 52 39	jsl $3952ad	                JSL IF_WRITE            ; Append to the file
.395670	b0 da		bcs $39564c	                BCS check_for_end       ; And try again
.395672	82 08 00	brl $39567d	                BRL IF_PASSFAILURE      ; If we couldn't update the file, pass the failure up
.395675	5c 84 56 39	jmp $395684	done            JML IF_SUCCESS
.395679					IF_FAILURE
.395679	e2 20		sep #$20	                SEP #$20        ; set A short
.39567b	85 0e		sta $032e	                STA DOS_STATUS
.39567d	28		plp		IF_PASSFAILURE  PLP
.39567e	18		clc		                CLC
.39567f	ab		plb		                PLB
.395680	2b		pld		                PLD
.395681	7a		ply		                PLY
.395682	fa		plx		                PLX
.395683	6b		rtl		                RTL
.395684					IF_SUCCESS
.395684	e2 20		sep #$20	                SEP #$20        ; set A short
.395686	64 00		stz $0320	                STZ BIOS_STATUS
.395688	64 0e		stz $032e	                STZ DOS_STATUS
.39568a	28		plp		                PLP
.39568b	38		sec		                SEC
.39568c	ab		plb		                PLB
.39568d	2b		pld		                PLD
.39568e	7a		ply		                PLY
.39568f	fa		plx		                PLX
.395690	6b		rtl		                RTL
.395691					IF_RUN
.395691	da		phx		                PHX
.395692	5a		phy		                PHY
.395693	0b		phd		                PHD
.395694	8b		phb		                PHB
.395695	08		php		                PHP
.395696	48		pha		                PHA             ; begin setdbr macro
.395697	08		php		                PHP
.395698	e2 20		sep #$20	                SEP #$20        ; set A short
.39569a	a9 00		lda #$00	                LDA #0
.39569c	48		pha		                PHA
.39569d	ab		plb		                PLB
.39569e	28		plp		                PLP
.39569f	68		pla		                PLA             ; end setdbr macro
.3956a0	48		pha		                PHA             ; begin setdp macro
.3956a1	08		php		                PHP
.3956a2	c2 20		rep #$20	                REP #$20        ; set A long
.3956a4	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3956a7	5b		tcd		                TCD
.3956a8	28		plp		                PLP
.3956a9	68		pla		                PLA             ; end setdp macro
.3956aa	e2 20		sep #$20	                SEP #$20        ; set A short
.3956ac	c2 10		rep #$10	                REP #$10        ; set X long
.3956ae	a9 00		lda #$00	                LDA #0                                  ; Zero out the file descriptor
.3956b0	a2 00 00	ldx #$0000	                LDX #0
.3956b3	9f 00 eb 38	sta $38eb00,x	clr_fd_loop     STA @l DOS_SPARE_FD,X
.3956b7	e8		inx		                INX
.3956b8	e0 1e 00	cpx #$001e	                CPX #SIZE(FILEDESC)
.3956bb	d0 f6		bne $3956b3	                BNE clr_fd_loop
.3956bd	c2 20		rep #$20	                REP #$20        ; set A long
.3956bf	a9 00 e9	lda #$e900	                LDA #<>DOS_SPARE_SECTOR                 ; Set the buffer for the file descriptor
.3956c2	8f 0e eb 38	sta $38eb0e	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER
.3956c6	a9 38 00	lda #$0038	                LDA #`DOS_SPARE_SECTOR
.3956c9	8f 10 eb 38	sta $38eb10	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER+2
.3956cd	a5 40		lda $0360	                LDA DOS_RUN_PARAM                        ; Set the path for the file descriptor
.3956cf	8f 02 eb 38	sta $38eb02	                STA @l DOS_SPARE_FD+FILEDESC.PATH
.3956d3	a5 42		lda $0362	                LDA DOS_RUN_PARAM+2
.3956d5	8f 04 eb 38	sta $38eb04	                STA @l DOS_SPARE_FD+FILEDESC.PATH+2
.3956d9	a9 00 00	lda #$0000	                LDA #0                                  ; Clear the run pointer
.3956dc	85 3c		sta $035c	                STA DOS_RUN_PTR                         ; This is used to check that we loaded an executable binary
.3956de	85 3e		sta $035e	                STA DOS_RUN_PTR+2
.3956e0	a9 00 eb	lda #$eb00	                LDA #<>DOS_SPARE_FD
.3956e3	85 20		sta $0340	                STA DOS_FD_PTR
.3956e5	a9 38 00	lda #$0038	                LDA #`DOS_SPARE_FD
.3956e8	85 22		sta $0342	                STA DOS_FD_PTR+2
.3956ea	a9 ff ff	lda #$ffff	                LDA #$FFFF                              ; We want to load to the address provided by the file
.3956ed	8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.3956f1	8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.3956f5	22 18 11 38	jsl $381118	                JSL F_LOAD                              ; Try to load the file
.3956f9	b0 14		bcs $39570f	                BCS try_execute
.3956fb	82 7f ff	brl $39567d	                BRL IF_PASSFAILURE                      ; On error: pass failure up the chain
.3956fe					chk_execute
.3956fe	c2 20		rep #$20	                REP #$20        ; set A long
.395700	a5 3c		lda $035c	                LDA DOS_RUN_PTR                         ; Check to see if we got a startup address back
.395702	d0 0b		bne $39570f	                BNE try_execute                         ; If so: call it
.395704	a5 3e		lda $035e	                LDA DOS_RUN_PTR+2
.395706	d0 07		bne $39570f	                BNE try_execute
.395708	e2 20		sep #$20	                SEP #$20        ; set A short
.39570a	a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC                     ; If not: return an error that it's not executable
.39570c	82 6a ff	brl $395679	                BRL IF_FAILURE
.39570f					try_execute
.39570f	e2 20		sep #$20	                SEP #$20        ; set A short
.395711	a9 5c		lda #$5c	                LDA #$5C                                ; Write a JML opcode
.395713	85 3b		sta $035b	                STA DOS_RUN_PTR-1
.395715	22 5b 03 00	jsl $00035b	                JSL DOS_RUN_PTR-1                       ; And call to it
.395719	82 68 ff	brl $395684	                BRL IF_SUCCESS                          ; Return success

;******  Return to file: src\kernel.asm


;******  Processing file: src\uart.asm

=$af13f8				UART1_BASE = $AF13F8        ; Base address for UART 1 (COM1)
=$af12f8				UART2_BASE = $AF12F8        ; Base address for UART 2 (COM2)
=$00					UART_TRHB = $00             ; Transmit/Receive Hold Buffer
=$00					UART_DLL = UART_TRHB        ; Divisor Latch Low Byte
=$01					UART_DLH = $01              ; Divisor Latch High Byte
=$01					UART_IER = UART_DLH         ; Interupt Enable Register
=$02					UART_FCR = $02              ; FIFO Control Register
=$02					UART_IIR = UART_FCR         ; Interupt Indentification Register
=$03					UART_LCR = $03              ; Line Control Register
=$04					UART_MCR = $04              ; Modem Control REgister
=$05					UART_LSR = $05              ; Line Status Register
=$06					UART_MSR = $06              ; Modem Status Register
=$07					UART_SR = $07               ; Scratch Register
=$20					UINT_LOW_POWER = $20        ; Enable Low Power Mode (16750)
=$10					UINT_SLEEP_MODE = $10       ; Enable Sleep Mode (16750)
=$08					UINT_MODEM_STATUS = $08     ; Enable Modem Status Interrupt
=$04					UINT_LINE_STATUS = $04      ; Enable Receiver Line Status Interupt
=$02					UINT_THR_EMPTY = $02        ; Enable Transmit Holding Register Empty interrupt
=$01					UINT_DATA_AVAIL = $01       ; Enable Recieve Data Available interupt
=$80					IIR_FIFO_ENABLED = $80      ; FIFO is enabled
=$40					IIR_FIFO_NONFUNC = $40      ; FIFO is not functioning
=$20					IIR_FIFO_64BYTE = $20       ; 64 byte FIFO enabled (16750)
=$00					IIR_MODEM_STATUS = $00      ; Modem Status Interrupt
=$02					IIR_THR_EMPTY = $02         ; Transmit Holding Register Empty Interrupt
=$04					IIR_DATA_AVAIL = $04        ; Data Available Interrupt
=$06					IIR_LINE_STATUS = $06       ; Line Status Interrupt
=$0c					IIR_TIMEOUT = $0C           ; Time-out Interrupt (16550 and later)
=$01					IIR_INTERRUPT_PENDING = $01 ; Interrupt Pending Flag
=$80					LCR_DLB = $80               ; Divisor Latch Access Bit
=$60					LCR_SBE = $60               ; Set Break Enable
=$00					LCR_PARITY_NONE = $00       ; Parity: None
=$08					LCR_PARITY_ODD = $08        ; Parity: Odd
=$18					LCR_PARITY_EVEN = $18       ; Parity: Even
=$28					LCR_PARITY_MARK = $28       ; Parity: Mark
=$38					LCR_PARITY_SPACE = $38      ; Parity: Space
=$00					LCR_STOPBIT_1 = $00         ; One Stop Bit
=$04					LCR_STOPBIT_2 = $04         ; 1.5 or 2 Stop Bits
=$00					LCR_DATABITS_5 = $00        ; Data Bits: 5
=$01					LCR_DATABITS_6 = $01        ; Data Bits: 6
=$02					LCR_DATABITS_7 = $02        ; Data Bits: 7
=$03					LCR_DATABITS_8 = $03        ; Data Bits: 8
=$80					LSR_ERR_RECIEVE = $80       ; Error in Received FIFO
=$40					LSR_XMIT_DONE = $40         ; All data has been transmitted
=$20					LSR_XMIT_EMPTY = $20        ; Empty transmit holding register
=$10					LSR_BREAK_INT = $10         ; Break interrupt
=$08					LSR_ERR_FRAME = $08         ; Framing error
=$04					LSR_ERR_PARITY = $04        ; Parity error
=$02					LSR_ERR_OVERRUN = $02       ; Overrun error
=$01					LSR_DATA_AVAIL = $01        ; Data is ready in the receive buffer
=384					UART_300 = 384              ; Code for 300 bps
=96					UART_1200 = 96              ; Code for 1200 bps
=48					UART_2400 = 48              ; Code for 2400 bps
=24					UART_4800 = 24              ; Code for 4800 bps
=12					UART_9600 = 12              ; Code for 9600 bps
=6					UART_19200 = 6              ; Code for 19200 bps
=3					UART_38400 = 3              ; Code for 28400 bps
=2					UART_57600 = 2              ; Code for 57600 bps
=1					UART_115200 = 1             ; Code for 115200 bps
.39571c					UART_SELECT
.39571c	08		php		            PHP
.39571d	c2 20		rep #$20	                REP #$20        ; set A long
.39571f	c9 02 00	cmp #$0002	            CMP #2
.395722	f0 07		beq $39572b	            BEQ is_COM2
.395724	c2 20		rep #$20	                REP #$20        ; set A long
.395726	a9 f8 13	lda #$13f8	            LDA #<>UART1_BASE
.395729	80 05		bra $395730	            BRA setaddr
.39572b					is_COM2
.39572b	c2 20		rep #$20	                REP #$20        ; set A long
.39572d	a9 f8 12	lda #$12f8	            LDA #<>UART2_BASE
.395730	8f 00 07 00	sta $000700	setaddr     STA @lCURRUART
.395734	e2 20		sep #$20	                SEP #$20        ; set A short
.395736	a9 af		lda #$af	            LDA #`UART1_BASE
.395738	8f 02 07 00	sta $000702	            STA @lCURRUART+2
.39573c	28		plp		            PLP
.39573d	6b		rtl		            RTL
.39573e					UART_SETBPS
.39573e	08		php		            PHP
.39573f	0b		phd		            PHD
.395740	48		pha		                PHA             ; begin setdp macro
.395741	08		php		                PHP
.395742	c2 20		rep #$20	                REP #$20        ; set A long
.395744	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395747	5b		tcd		                TCD
.395748	28		plp		                PLP
.395749	68		pla		                PLA             ; end setdp macro
.39574a	c2 30		rep #$30	                REP #$30        ; set A&X long
.39574c	48		pha		            PHA
.39574d	e2 20		sep #$20	                SEP #$20        ; set A short
.39574f	a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Enable divisor latch
.395752	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.395754	09 80		ora #$80	            ORA #LCR_DLB
.395756	97 00		sta [$0700],y	            STA [CURRUART],Y
.395758	c2 20		rep #$20	                REP #$20        ; set A long
.39575a	68		pla		            PLA
.39575b	a0 00 00	ldy #$0000	            LDY #UART_DLL
.39575e	97 00		sta [$0700],y	            STA [CURRUART],Y    ; Save the divisor to the UART
.395760	e2 20		sep #$20	                SEP #$20        ; set A short
.395762	a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Disable divisor latch
.395765	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.395767	49 80		eor #$80	            EOR #LCR_DLB
.395769	97 00		sta [$0700],y	            STA [CURRUART],Y
.39576b	2b		pld		            PLD
.39576c	28		plp		            PLP
.39576d	6b		rtl		            RTL
.39576e					UART_SETLCR
.39576e	08		php		            PHP
.39576f	0b		phd		            PHD
.395770	48		pha		                PHA             ; begin setdp macro
.395771	08		php		                PHP
.395772	c2 20		rep #$20	                REP #$20        ; set A long
.395774	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395777	5b		tcd		                TCD
.395778	28		plp		                PLP
.395779	68		pla		                PLA             ; end setdp macro
.39577a	e2 20		sep #$20	                SEP #$20        ; set A short
.39577c	c2 10		rep #$10	                REP #$10        ; set X long
.39577e	29 7f		and #$7f	            AND #$7F            ; We don't want to alter divisor latch
.395780	a0 03 00	ldy #$0003	            LDY #UART_LCR
.395783	97 00		sta [$0700],y	            STA [CURRUART],Y
.395785	2b		pld		            PLD
.395786	28		plp		            PLP
.395787	6b		rtl		            RTL
.395788					UART_INIT
.395788	08		php		            PHP
.395789	0b		phd		            PHD
.39578a	c2 30		rep #$30	                REP #$30        ; set A&X long
.39578c	48		pha		                PHA             ; begin setdp macro
.39578d	08		php		                PHP
.39578e	c2 20		rep #$20	                REP #$20        ; set A long
.395790	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395793	5b		tcd		                TCD
.395794	28		plp		                PLP
.395795	68		pla		                PLA             ; end setdp macro
.395796	a9 01 00	lda #$0001	            LDA #UART_115200
.395799	22 3e 57 39	jsl $39573e	            JSL UART_SETBPS
.39579d	e2 20		sep #$20	                SEP #$20        ; set A short
.39579f	a9 03		lda #$03	            LDA #LCR_PARITY_NONE | LCR_STOPBIT_1 | LCR_DATABITS_8
.3957a1	22 6e 57 39	jsl $39576e	            JSL UART_SETLCR
.3957a5	a9 e1		lda #$e1	            LDA #%11100001
.3957a7	a0 02 00	ldy #$0002	            LDY #UART_FCR
.3957aa	97 00		sta [$0700],y	            STA [CURRUART],Y
.3957ac	2b		pld		            PLD
.3957ad	28		plp		            PLP
.3957ae	6b		rtl		            RTL
.3957af					UART_HASBYT
.3957af	08		php		            PHP
.3957b0	0b		phd		            PHD
.3957b1	c2 30		rep #$30	                REP #$30        ; set A&X long
.3957b3	48		pha		                PHA             ; begin setdp macro
.3957b4	08		php		                PHP
.3957b5	c2 20		rep #$20	                REP #$20        ; set A long
.3957b7	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.3957ba	5b		tcd		                TCD
.3957bb	28		plp		                PLP
.3957bc	68		pla		                PLA             ; end setdp macro
.3957bd	e2 20		sep #$20	                SEP #$20        ; set A short
.3957bf	a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.3957c2	b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.3957c4	29 01		and #$01	            AND #LSR_DATA_AVAIL
.3957c6	d0 04		bne $3957cc	            BNE ret_true            ; If flag is set, return true
.3957c8	2b		pld		ret_false   PLD                     ; Return false
.3957c9	28		plp		            PLP
.3957ca	18		clc		            CLC
.3957cb	6b		rtl		            RTL
.3957cc	2b		pld		ret_true    PLD                     ; Return true
.3957cd	28		plp		            PLP
.3957ce	38		sec		            SEC
.3957cf	6b		rtl		            RTL
.3957d0					UART_GETC
.3957d0	08		php		            PHP
.3957d1	0b		phd		            PHD
.3957d2	c2 30		rep #$30	                REP #$30        ; set A&X long
.3957d4	48		pha		                PHA             ; begin setdp macro
.3957d5	08		php		                PHP
.3957d6	c2 20		rep #$20	                REP #$20        ; set A long
.3957d8	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.3957db	5b		tcd		                TCD
.3957dc	28		plp		                PLP
.3957dd	68		pla		                PLA             ; end setdp macro
.3957de	e2 20		sep #$20	                SEP #$20        ; set A short
.3957e0	a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.3957e3	b7 00		lda [$0700],y	wait_getc   LDA [CURRUART],Y
.3957e5	29 01		and #$01	            AND #LSR_DATA_AVAIL
.3957e7	f0 fa		beq $3957e3	            BEQ wait_getc           ; If the flag is clear, wait
.3957e9	a0 00 00	ldy #$0000	            LDY #UART_TRHB          ; Get the byte from the receive FIFO
.3957ec	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.3957ee	2b		pld		            PLD
.3957ef	28		plp		            PLP
.3957f0	6b		rtl		            RTL
.3957f1					UART_PUTC
.3957f1	08		php		            PHP
.3957f2	0b		phd		            PHD
.3957f3	c2 30		rep #$30	                REP #$30        ; set A&X long
.3957f5	48		pha		                PHA             ; begin setdp macro
.3957f6	08		php		                PHP
.3957f7	c2 20		rep #$20	                REP #$20        ; set A long
.3957f9	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.3957fc	5b		tcd		                TCD
.3957fd	28		plp		                PLP
.3957fe	68		pla		                PLA             ; end setdp macro
.3957ff	e2 20		sep #$20	                SEP #$20        ; set A short
.395801	48		pha		            PHA                     ; Wait for the transmit FIFO to free up
.395802	a0 05 00	ldy #$0005	            LDY #UART_LSR
.395805	b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.395807	29 20		and #$20	            AND #LSR_XMIT_EMPTY
.395809	f0 fa		beq $395805	            BEQ wait_putc
.39580b	68		pla		            PLA
.39580c	a0 00 00	ldy #$0000	            LDY #UART_TRHB
.39580f	97 00		sta [$0700],y	            STA [CURRUART],Y
.395811	2b		pld		            PLD
.395812	28		plp		            PLP
.395813	6b		rtl		            RTL
.395814					UART_PUTS
.395814	08		php		            PHP
.395815	e2 20		sep #$20	                SEP #$20        ; set A short
.395817	bd 00 00	lda $0000,x	put_loop    LDA #0,B,X
.39581a	f0 07		beq $395823	            BEQ done
.39581c	22 f1 57 39	jsl $3957f1	            JSL UART_PUTC
.395820	e8		inx		            INX
.395821	80 f4		bra $395817	            BRA put_loop
.395823	28		plp		done        PLP
.395824	6b		rtl		            RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\joystick.asm

.395825					JOYSTICK_SET_NES_MODE
.395825	e2 20		sep #$20	                SEP #$20        ; set A short
.395827	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.39582b	29 fb		and #$fb	          AND #~NES_SNES_JOY  ; 0 = NES (8 bit shift)
.39582d	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395831	6b		rtl		          RTL
.395832					JOYSTICK_SET_SNES_MODE
.395832	e2 20		sep #$20	                SEP #$20        ; set A short
.395834	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395838	29 fb		and #$fb	          AND #~NES_SNES_JOY
.39583a	09 04		ora #$04	          ORA #NES_SNES_JOY   ; 1 = SNES (12 Bit Shift)
.39583c	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395840	6b		rtl		          RTL
.395841					JOYSTICK_ENABLE_NES_SNES_PORT0
.395841	e2 20		sep #$20	                SEP #$20        ; set A short
.395843	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395847	29 fe		and #$fe	          AND #~NES_SNES_EN0
.395849	09 01		ora #$01	          ORA #NES_SNES_EN0
.39584b	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.39584f	6b		rtl		          RTL
.395850					JOYSTICK_ENABLE_NES_SNES_PORT1
.395850	e2 20		sep #$20	                SEP #$20        ; set A short
.395852	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395856	29 fd		and #$fd	          AND #~NES_SNES_EN1
.395858	09 02		ora #$02	          ORA #NES_SNES_EN1
.39585a	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.39585e	6b		rtl		          RTL
.39585f					JOYSTICK_DISABLE_NES_SNES_PORT0
.39585f	e2 20		sep #$20	                SEP #$20        ; set A short
.395861	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395865	29 fe		and #$fe	          AND #~NES_SNES_EN0
.395867	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.39586b	6b		rtl		          RTL
.39586c					JOYSTICK_DISABLE_NES_SNES_PORT1
.39586c	e2 20		sep #$20	                SEP #$20        ; set A short
.39586e	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395872	29 fd		and #$fd	          AND #~NES_SNES_EN1
.395874	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395878	6b		rtl		          RTL
.395879					JOYSTICK_NES_SNES_TRIG_WITH_POLL
.395879	e2 20		sep #$20	                SEP #$20        ; set A short
.39587b	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.39587f	29 03		and #$03	          AND #(NES_SNES_EN0 | NES_SNES_EN1)
.395881	c9 00		cmp #$00	          CMP #$00
.395883	f0 14		beq $395899	          BEQ END_OF_JOYSTICK_POLL
.395885	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395889	09 80		ora #$80	          ORA #NES_SNES_TRIG   ; Set to 1 (Will auto Clear)
.39588b	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.39588f					JOYSTICK_POLLING_ISNOTOVER
.39588f	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE ;
.395893	29 40		and #$40	          AND #NES_SNES_DONE
.395895	c9 40		cmp #$40	          CMP #NES_SNES_DONE
.395897	d0 f6		bne $39588f	          BNE JOYSTICK_POLLING_ISNOTOVER
.395899					END_OF_JOYSTICK_POLL
.395899	6b		rtl		          RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\sdc_library.asm

.39589a					SDC_TEST
.39589a	8b		phb		                PHB
.39589b	0b		phd		                PHD
.39589c	08		php		                PHP
.39589d	48		pha		                PHA             ; begin setdbr macro
.39589e	08		php		                PHP
.39589f	e2 20		sep #$20	                SEP #$20        ; set A short
.3958a1	a9 00		lda #$00	                LDA #0
.3958a3	48		pha		                PHA
.3958a4	ab		plb		                PLB
.3958a5	28		plp		                PLP
.3958a6	68		pla		                PLA             ; end setdbr macro
.3958a7	48		pha		                PHA             ; begin setdp macro
.3958a8	08		php		                PHP
.3958a9	c2 20		rep #$20	                REP #$20        ; set A long
.3958ab	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3958ae	5b		tcd		                TCD
.3958af	28		plp		                PLP
.3958b0	68		pla		                PLA             ; end setdp macro
.3958b1	e2 20		sep #$20	                SEP #$20        ; set A short
.3958b3	a9 f0		lda #$f0	                LDA #$F0                            ; Set white on black background
.3958b5	8d 1e 00	sta $001e	                STA @w CURCOLOR
.3958b8	22 a8 10 38	jsl $3810a8	                JSL CLRSCREEN
.3958bc	22 a0 10 38	jsl $3810a0	                JSL CSRHOME
.3958c0	22 00 59 39	jsl $395900	                JSL SDC_INIT                        ; Attempt to initilize the SDC interface
.3958c4	b0 03		bcs $3958c9	                BCS init_ok
.3958c6	82 15 00	brl $3958de	                BRL done
.3958c9	a9 02		lda #$02	init_ok         LDA #BIOS_DEV_SD
.3958cb	85 01		sta $0321	                STA BIOS_DEV
.3958cd	22 46 43 39	jsl $394346	                JSL DOS_MOUNT                       ; Attempt to mount the SDC
.3958d1	b0 03		bcs $3958d6	                BCS mount_ok
.3958d3	82 08 00	brl $3958de	                BRL done
.3958d6	22 15 53 39	jsl $395315	mount_ok        JSL IF_DIROPEN
.3958da	b0 02		bcs $3958de	                BCS all_ok
.3958dc	80 00		bra $3958de	                BRA done
.3958de					all_ok
.3958de	22 6c 10 38	jsl $38106c	done            JSL PRINTCR
.3958e2	28		plp		                PLP
.3958e3	2b		pld		                PLD
.3958e4	ab		plb		                PLB
.3958e5	6b		rtl		                RTL
.3958e6					SDC_WAITBUSY
.3958e6	08		php		                PHP
.3958e7	e2 20		sep #$20	                SEP #$20        ; set A short
.3958e9	af 04 ea af	lda $afea04	wait_xact       LDA @l SDC_TRANS_STATUS_REG         ; Wait for the transaction to complete
.3958ed	29 01		and #$01	                AND #SDC_TRANS_BUSY
.3958ef	c9 01		cmp #$01	                CMP #SDC_TRANS_BUSY
.3958f1	f0 f6		beq $3958e9	                BEQ wait_xact
.3958f3	28		plp		                PLP
.3958f4	6b		rtl		                RTL
.3958f5					SDC_RESET
.3958f5	08		php		                PHP
.3958f6	e2 20		sep #$20	                SEP #$20        ; set A short
.3958f8	a9 01		lda #$01	                LDA #1
.3958fa	8f 01 ea af	sta $afea01	                STA @l SDC_CONTROL_REG
.3958fe	28		plp		                PLP
.3958ff	6b		rtl		                RTL
.395900	0b		phd		SDC_INIT        PHD
.395901	8b		phb		                PHB
.395902	08		php		                PHP
.395903	48		pha		                PHA             ; begin setdbr macro
.395904	08		php		                PHP
.395905	e2 20		sep #$20	                SEP #$20        ; set A short
.395907	a9 00		lda #$00	                LDA #0
.395909	48		pha		                PHA
.39590a	ab		plb		                PLB
.39590b	28		plp		                PLP
.39590c	68		pla		                PLA             ; end setdbr macro
.39590d	48		pha		                PHA             ; begin setdp macro
.39590e	08		php		                PHP
.39590f	c2 20		rep #$20	                REP #$20        ; set A long
.395911	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395914	5b		tcd		                TCD
.395915	28		plp		                PLP
.395916	68		pla		                PLA             ; end setdp macro
.395917	e2 20		sep #$20	                SEP #$20        ; set A short
.395919	a9 01		lda #$01	                LDA #SDC_TRANS_INIT_SD
.39591b	8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG           ; Set Init SD
.39591f	a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.395921	8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.395925	22 e6 58 39	jsl $3958e6	                JSL SDC_WAITBUSY                    ; Wait for initialization to complete
.395929	af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.39592d	d0 07		bne $395936	                BNE ret_error                       ; Is there one? Process the error
.39592f	64 00		stz $0320	ret_success     STZ BIOS_STATUS
.395931	28		plp		                PLP
.395932	ab		plb		                PLB
.395933	2b		pld		                PLD
.395934	38		sec		                SEC
.395935	6b		rtl		                RTL
.395936	8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.395939	a9 8b		lda #$8b	                LDA #BIOS_ERR_NOTINIT
.39593b	85 00		sta $0320	                STA BIOS_STATUS
.39593d	28		plp		                PLP
.39593e	ab		plb		                PLB
.39593f	2b		pld		                PLD
.395940	18		clc		                CLC
.395941	6b		rtl		                RTL
.395942					SDC_GETBLOCK
.395942	0b		phd		                PHD
.395943	8b		phb		                PHB
.395944	08		php		                PHP
.395945	48		pha		                PHA             ; begin setdbr macro
.395946	08		php		                PHP
.395947	e2 20		sep #$20	                SEP #$20        ; set A short
.395949	a9 00		lda #$00	                LDA #0
.39594b	48		pha		                PHA
.39594c	ab		plb		                PLB
.39594d	28		plp		                PLP
.39594e	68		pla		                PLA             ; end setdbr macro
.39594f	48		pha		                PHA             ; begin setdp macro
.395950	08		php		                PHP
.395951	c2 20		rep #$20	                REP #$20        ; set A long
.395953	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395956	5b		tcd		                TCD
.395957	28		plp		                PLP
.395958	68		pla		                PLA             ; end setdp macro
.395959	e2 20		sep #$20	                SEP #$20        ; set A short
.39595b	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.39595f	09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.395961	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395965	a9 00		lda #$00	                LDA #0
.395967	8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.39596b	a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to read
.39596d	0a		asl a		                ASL A
.39596e	8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.395972	a5 03		lda $0323	                LDA BIOS_LBA+1
.395974	2a		rol a		                ROL A
.395975	8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.395979	a5 04		lda $0324	                LDA BIOS_LBA+2
.39597b	2a		rol a		                ROL A
.39597c	8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.395980	a9 02		lda #$02	                LDA #SDC_TRANS_READ_BLK             ; Set the transaction to READ
.395982	8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.395986	a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.395988	8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.39598c	22 e6 58 39	jsl $3958e6	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.395990	af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395994	d0 36		bne $3959cc	                BNE ret_error                       ; Is there one? Process the error
.395996	e2 20		sep #$20	                SEP #$20        ; set A short
.395998	af 13 ea af	lda $afea13	                LDA @l SDC_RX_FIFO_DATA_CNT_LO      ; Record the number of bytes read
.39599c	85 0a		sta $032a	                STA BIOS_FIFO_COUNT
.39599e	af 12 ea af	lda $afea12	                LDA @l SDC_RX_FIFO_DATA_CNT_HI
.3959a2	85 0b		sta $032b	                STA BIOS_FIFO_COUNT+1
.3959a4	c2 10		rep #$10	                REP #$10        ; set X long
.3959a6	a0 00 00	ldy #$0000	                LDY #0
.3959a9	af 10 ea af	lda $afea10	loop_rd         LDA @l SDC_RX_FIFO_DATA_REG         ; Get the byte...
.3959ad	97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y               ; Save it to the buffer
.3959af	c8		iny		                INY                                 ; Advance to the next byte
.3959b0	c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.3959b3	d0 f4		bne $3959a9	                BNE loop_rd                         ; No: keep reading
.3959b5	af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.3959b9	d0 11		bne $3959cc	                BNE ret_error                       ; Is there one? Process the error
.3959bb	64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.3959bd	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.3959c1	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.3959c3	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.3959c7	28		plp		                PLP
.3959c8	ab		plb		                PLB
.3959c9	2b		pld		                PLD
.3959ca	38		sec		                SEC
.3959cb	6b		rtl		                RTL
.3959cc	8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.3959cf	a9 82		lda #$82	                LDA #BIOS_ERR_READ
.3959d1	85 00		sta $0320	                STA BIOS_STATUS
.3959d3	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.3959d7	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.3959d9	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.3959dd	28		plp		                PLP
.3959de	ab		plb		                PLB
.3959df	2b		pld		                PLD
.3959e0	18		clc		                CLC
.3959e1	6b		rtl		                RTL
.3959e2					SDC_PUTBLOCK
.3959e2	0b		phd		                PHD
.3959e3	8b		phb		                PHB
.3959e4	08		php		                PHP
.3959e5	48		pha		                PHA             ; begin setdbr macro
.3959e6	08		php		                PHP
.3959e7	e2 20		sep #$20	                SEP #$20        ; set A short
.3959e9	a9 00		lda #$00	                LDA #0
.3959eb	48		pha		                PHA
.3959ec	ab		plb		                PLB
.3959ed	28		plp		                PLP
.3959ee	68		pla		                PLA             ; end setdbr macro
.3959ef	48		pha		                PHA             ; begin setdp macro
.3959f0	08		php		                PHP
.3959f1	c2 20		rep #$20	                REP #$20        ; set A long
.3959f3	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3959f6	5b		tcd		                TCD
.3959f7	28		plp		                PLP
.3959f8	68		pla		                PLA             ; end setdp macro
.3959f9	e2 20		sep #$20	                SEP #$20        ; set A short
.3959fb	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.3959ff	09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.395a01	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395a05	c2 10		rep #$10	                REP #$10        ; set X long
.395a07	a0 00 00	ldy #$0000	                LDY #0
.395a0a	b7 06		lda [$0326],y	loop_wr         LDA [BIOS_BUFF_PTR],Y               ; Get the byte...
.395a0c	8f 20 ea af	sta $afea20	                STA @l SDC_TX_FIFO_DATA_REG         ; Save it to the SDC
.395a10	c8		iny		                INY                                 ; Advance to the next byte
.395a11	c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.395a14	d0 f4		bne $395a0a	                BNE loop_wr                         ; No: keep writing
.395a16	a9 00		lda #$00	                LDA #0
.395a18	8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.395a1c	a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to write
.395a1e	0a		asl a		                ASL A
.395a1f	8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.395a23	a5 03		lda $0323	                LDA BIOS_LBA+1
.395a25	2a		rol a		                ROL A
.395a26	8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.395a2a	a5 04		lda $0324	                LDA BIOS_LBA+2
.395a2c	2a		rol a		                ROL A
.395a2d	8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.395a31	a9 03		lda #$03	                LDA #SDC_TRANS_WRITE_BLK            ; Set the transaction to WRITE
.395a33	8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.395a37	a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.395a39	8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.395a3d	22 e6 58 39	jsl $3958e6	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.395a41	af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395a45	d0 11		bne $395a58	                BNE ret_error                       ; Is there one? Process the error
.395a47	64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.395a49	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395a4d	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395a4f	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395a53	28		plp		                PLP
.395a54	ab		plb		                PLB
.395a55	2b		pld		                PLD
.395a56	38		sec		                SEC
.395a57	6b		rtl		                RTL
.395a58	8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.395a5b	a9 82		lda #$82	                LDA #BIOS_ERR_READ
.395a5d	85 00		sta $0320	                STA BIOS_STATUS
.395a5f	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395a63	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395a65	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395a69	28		plp		                PLP
.395a6a	ab		plb		                PLB
.395a6b	2b		pld		                PLD
.395a6c	18		clc		                CLC
.395a6d	6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\fdc_library.asm

=4295454				FDC_MOTOR_TIME = 4295454        ; Time to wait for the motor to come on: 300ms
=2147727				FDC_SEEK_TIME = 2147727         ; Time to wait for a seek to happen: 150ms
=1800					FDC_MOTOR_ON_TIME = 60 * 30     ; Time (in SOF interrupt counts) for the motor to stay on: ~30s?
=13					BPB_SECPERCLUS12_OFF = 13       ; Offset to sectors per cluster in a FAT12 boot sector
=17					BPB_ROOT_MAX_ENTRY12_OFF = 17   ; Offset to the maximum number of entries in the root directory in FAT12 boot sector
=22					BPB_SECPERFAT12_OFF = 22        ; Offset to sectors per FAT on a FAT12 boot sector
.395a6e					FDC_TEST
.395a6e	8b		phb		                    PHB
.395a6f	0b		phd		                    PHD
.395a70	08		php		                    PHP
.395a71	48		pha		                PHA             ; begin setdbr macro
.395a72	08		php		                PHP
.395a73	e2 20		sep #$20	                SEP #$20        ; set A short
.395a75	a9 00		lda #$00	                LDA #0
.395a77	48		pha		                PHA
.395a78	ab		plb		                PLB
.395a79	28		plp		                PLP
.395a7a	68		pla		                PLA             ; end setdbr macro
.395a7b	48		pha		                PHA             ; begin setdp macro
.395a7c	08		php		                PHP
.395a7d	c2 20		rep #$20	                REP #$20        ; set A long
.395a7f	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395a82	5b		tcd		                TCD
.395a83	28		plp		                PLP
.395a84	68		pla		                PLA             ; end setdp macro
.395a85	e2 20		sep #$20	                SEP #$20        ; set A short
.395a87	a9 f0		lda #$f0	                    LDA #$F0
.395a89	8d 1e 00	sta $001e	                    STA @w CURCOLOR
.395a8c	22 19 0a 39	jsl $390a19	                    JSL ICLRSCREEN
.395a90	22 3d 08 39	jsl $39083d	                    JSL ICSRHOME
.395a94	c2 30		rep #$30	                REP #$30        ; set A&X long
.395a96	22 9e 5c 39	jsl $395c9e	                    JSL FDC_Init
.395a9a	b0 03		bcs $395a9f	                    BCS init_ok
.395a9c	82 2a 00	brl $395ac9	                    BRL motor_off
.395a9f	22 45 63 39	jsl $396345	init_ok             JSL FDC_CHK_MEDIA
.395aa3	90 03		bcc $395aa8	                    BCC no_media
.395aa5	82 03 00	brl $395aab	                    BRL is_ok1
.395aa8					no_media
.395aa8	82 1e 00	brl $395ac9	                    BRL motor_off
.395aab	22 dc 61 39	jsl $3961dc	is_ok1              JSL FDC_MOUNT
.395aaf	90 03		bcc $395ab4	                    BCC mount_err
.395ab1	82 03 00	brl $395ab7	                    BRL is_ok2
.395ab4					mount_err
.395ab4	82 12 00	brl $395ac9	                    BRL motor_off
.395ab7					is_ok2
.395ab7	e2 20		sep #$20	                SEP #$20        ; set A short
.395ab9	a9 00		lda #$00	                    LDA #BIOS_DEV_FDC
.395abb	8f 21 03 00	sta $000321	                    STA @l BIOS_DEV
.395abf	c2 30		rep #$30	                REP #$30        ; set A&X long
.395ac1	22 e7 4a 39	jsl $394ae7	                    JSL DOS_FREECLUS12
.395ac5	b0 02		bcs $395ac9	                    BCS all_ok
.395ac7	80 00		bra $395ac9	                    BRA motor_off
.395ac9					all_ok
.395ac9	22 6c 10 38	jsl $38106c	motor_off           JSL PRINTCR
.395acd	22 44 5d 39	jsl $395d44	                    JSL FDC_Motor_Off
.395ad1	28		plp		                    PLP
.395ad2	2b		pld		                    PLD
.395ad3	ab		plb		                    PLB
.395ad4	6b		rtl		                    RTL
.395ad5					FDC_BRK_ON_ERR
.395ad5	08		php		                    PHP
.395ad6	e2 20		sep #$20	                SEP #$20        ; set A short
.395ad8	af 06 03 00	lda $000306	                    LDA @l FDC_ST0
.395adc	29 d0		and #$d0	                    AND #%11010000          ; Check only the error bits
.395ade	f0 03		beq $395ae3	                    BEQ done
.395ae0	ea		nop		lock                NOP
.395ae1	80 fd		bra $395ae0	                    BRA lock
.395ae3	28		plp		done                PLP
.395ae4	6b		rtl		                    RTL
>395ae5	40 46 3a 53 41 4d 50 4c		BOOT_FILE           .null "@F:SAMPLE.PGX Hello, world!"
>395aed	45 2e 50 47 58 20 48 65 6c 6c 6f 2c 20 77 6f 72
>395afd	6c 64 21 00
=$020000				TEST_LOCATION = $020000                     ; Location to try to load it
=$030000				TEST_BUFFER = $030000                       ; Temporary location for a cluster buffer
.395b01					FDC_Check_RQM
.395b01	08		php		                    PHP
.395b02	e2 20		sep #$20	                SEP #$20        ; set A short
.395b04	af f4 13 af	lda $af13f4	loop                LDA @l SIO_FDC_MSR
.395b08	89 80		bit #$80	                    BIT #FDC_MSR_RQM
.395b0a	f0 f8		beq $395b04	                    BEQ loop
.395b0c	28		plp		                    PLP
.395b0d	60		rts		                    RTS
.395b0e					FDC_Check_DRV0_BSY
.395b0e	08		php		                    PHP
.395b0f	e2 20		sep #$20	                SEP #$20        ; set A short
.395b11	af f4 13 af	lda $af13f4	fdc_drv0bsy_loop    LDA @l SIO_FDC_MSR
.395b15	89 01		bit #$01	                    BIT #FDC_MSR_DRV0BSY
.395b17	d0 f8		bne $395b11	                    BNE fdc_drv0bsy_loop
.395b19	28		plp		                    PLP
.395b1a	60		rts		                    RTS
.395b1b					FDC_Check_CMD_BSY
.395b1b	08		php		                    PHP
.395b1c	e2 20		sep #$20	                SEP #$20        ; set A short
.395b1e	af f4 13 af	lda $af13f4	fdc_cmd_loop        LDA @l SIO_FDC_MSR
.395b22	89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.395b24	d0 f8		bne $395b1e	                    BNE fdc_cmd_loop
.395b26	28		plp		                    PLP
.395b27	60		rts		                    RTS
.395b28					FDC_Can_Read_Data
.395b28	08		php		                    PHP
.395b29	e2 20		sep #$20	                SEP #$20        ; set A short
.395b2b	af f4 13 af	lda $af13f4	loop                LDA @l SIO_FDC_MSR
.395b2f	29 40		and #$40	                    AND #FDC_MSR_DIO
.395b31	c9 40		cmp #$40	                    CMP #FDC_MSR_DIO
.395b33	d0 f6		bne $395b2b	                    BNE loop
.395b35	28		plp		                    PLP
.395b36	60		rts		                    RTS
.395b37					FDC_CAN_WRITE
.395b37	08		php		                    PHP
.395b38	e2 20		sep #$20	                SEP #$20        ; set A short
.395b3a	af f4 13 af	lda $af13f4	loop                LDA @l SIO_FDC_MSR
.395b3e	29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.395b40	c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.395b42	d0 f6		bne $395b3a	                    BNE loop
.395b44	28		plp		                    PLP
.395b45	60		rts		                    RTS
.395b46					FDC_DELAY_10MS
.395b46	da		phx		                    PHX
.395b47	08		php		                    PHP
.395b48	c2 10		rep #$10	                REP #$10        ; set X long
.395b4a	a2 80 3e	ldx #$3e80	                    LDX #16000          ; Wait for around 10ms
.395b4d	ea		nop		loop                NOP                 ; Each iteration should take 9 cycles
.395b4e	ca		dex		                    DEX
.395b4f	e0 00 00	cpx #$0000	                    CPX #0
.395b52	d0 f9		bne $395b4d	                    BNE loop
.395b54	28		plp		                    PLP
.395b55	fa		plx		                    PLX
.395b56	6b		rtl		                    RTL
.395b57					FDC_COMMAND
.395b57	da		phx		                    PHX
.395b58	8b		phb		                    PHB
.395b59	0b		phd		                    PHD
.395b5a	08		php		                    PHP
.395b5b	48		pha		                PHA             ; begin setdbr macro
.395b5c	08		php		                PHP
.395b5d	e2 20		sep #$20	                SEP #$20        ; set A short
.395b5f	a9 00		lda #$00	                LDA #0
.395b61	48		pha		                PHA
.395b62	ab		plb		                PLB
.395b63	28		plp		                PLP
.395b64	68		pla		                PLA             ; end setdbr macro
.395b65	48		pha		                PHA             ; begin setdp macro
.395b66	08		php		                PHP
.395b67	c2 20		rep #$20	                REP #$20        ; set A long
.395b69	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395b6c	5b		tcd		                TCD
.395b6d	28		plp		                PLP
.395b6e	68		pla		                PLA             ; end setdp macro
.395b6f	22 46 5b 39	jsl $395b46	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms
.395b73	e2 30		sep #$30	                SEP #$30        ; set A&X short
.395b75	a2 00		ldx #$00	                    LDX #0
.395b77	a9 00		lda #$00	                    LDA #0
.395b79	9d 10 05	sta $0510,x	clr_results         STA FDC_RESULTS,X                       ; Clear the result buffer
.395b7c	e8		inx		                    INX
.395b7d	e0 10		cpx #$10	                    CPX #16
.395b7f	d0 f8		bne $395b79	                    BNE clr_results
.395b81	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Validate we can send a command
.395b85	29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.395b87	c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.395b89	f0 04		beq $395b8f	                    BEQ start_send                          ; If so, start sending
.395b8b	22 9e 5c 39	jsl $395c9e	fdc_reset           JSL FDC_INIT                            ; Reset the FDC
.395b8f	a9 30		lda #$30	start_send          LDA #'0'
.395b91	22 bc 06 39	jsl $3906bc	                    JSL IPUTC
.395b95	e2 10		sep #$10	                SEP #$10        ; set X short
.395b97	a2 00		ldx #$00	                    LDX #0
.395b99	20 01 5b	jsr $395b01	send_loop           JSR FDC_Check_RQM                       ; Wait until we can write
.395b9c	bd 00 05	lda $0500,x	                    LDA FDC_PARAMETERS,X                    ; Get the parameter/command byte to write
.395b9f	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; Send it
.395ba3	22 46 5b 39	jsl $395b46	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms for things to settle
.395ba7	e8		inx		                    INX                                     ; Advance to the next byte
.395ba8	ec 30 05	cpx $0530	                    CPX FDC_PARAM_NUM
.395bab	d0 ec		bne $395b99	                    BNE send_loop                           ; Keep sending until we've sent them all
.395bad	ad 33 05	lda $0533	                    LDA FDC_EXPECT_DAT                      ; Check the data expectation byte
.395bb0	d0 03		bne $395bb5	                    BNE chk_rd_wr
.395bb2	82 84 00	brl $395c39	                    BRL result_phase                        ; If 0: we just want a result
.395bb5	10 3a		bpl $395bf1	chk_rd_wr           BPL rd_data                             ; If >0: we want to read data
.395bb7					wr_data
.395bb7	a9 31		lda #$31	                    LDA #'1'
.395bb9	22 bc 06 39	jsl $3906bc	                    JSL IPUTC
.395bbd	af f4 13 af	lda $af13f4	wr_data_rdy         LDA @l SIO_FDC_MSR                      ; Wait for ready to write
.395bc1	89 80		bit #$80	                    BIT #FDC_MSR_RQM
.395bc3	f0 f8		beq $395bbd	                    BEQ wr_data_rdy
.395bc5	89 20		bit #$20	                    BIT #FDC_MSR_NONDMA                     ; Check if in execution mode
.395bc7	d0 03		bne $395bcc	                    BNE wr_data_phase                       ; If so: transfer the data
.395bc9	82 6d 00	brl $395c39	                    BRL result_phase                          ; If not: it's an error
.395bcc	a9 32		lda #$32	wr_data_phase       LDA #'2'
.395bce	22 bc 06 39	jsl $3906bc	                    JSL IPUTC
.395bd2	c2 10		rep #$10	                REP #$10        ; set X long
.395bd4	a0 00 00	ldy #$0000	                    LDY #0
.395bd7	af f4 13 af	lda $af13f4	wr_data_loop        LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.395bdb	89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.395bdd	f0 5a		beq $395c39	                    BEQ result_phase                        ; If not: break out to result phase
.395bdf	89 80		bit #$80	                    BIT #FDC_MSR_RQM
.395be1	f0 f4		beq $395bd7	                    BEQ wr_data_loop
.395be3	b7 26		lda [$0326],y	                    LDA [BIOS_BUFF_PTR],Y                   ; Get the data byte
.395be5	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; And save it to the buffer
.395be9	c8		iny		                    INY                                     ; Move to the next position
.395bea	c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.395bed	d0 e8		bne $395bd7	                    BNE wr_data_loop                        ; If not at the end, keep fetching
.395bef	80 48		bra $395c39	                    BRA result_phase                        ; ready for the result phase
.395bf1	a9 33		lda #$33	rd_data             LDA #'3'
.395bf3	22 bc 06 39	jsl $3906bc	                    JSL IPUTC
.395bf7	20 28 5b	jsr $395b28	                    JSR FDC_Can_Read_Data
.395bfa	a5 0b		lda $030b	rd_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.395bfc	30 05		bmi $395c03	                    BMI chk_rd_rdy                          ; If so, check to see if the data is ready
.395bfe	a9 87		lda #$87	                    LDA #BIOS_ERR_NOMEDIA                   ; Otherwise: throw a NOMEDIA error
.395c00	82 93 00	brl $395c96	                    BRL pass_error
.395c03	af f4 13 af	lda $af13f4	chk_rd_rdy          LDA @l SIO_FDC_MSR                      ; Wait for data to be ready
.395c07	29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.395c09	c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.395c0b	d0 ed		bne $395bfa	                    BNE rd_data_rdy
.395c0d	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.395c11	89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.395c13	d0 03		bne $395c18	                    BNE rd_data_phase                       ; If so: transfer the data
.395c15	82 7a 00	brl $395c92	                    BRL error                               ; If not: it's an error
.395c18	a9 34		lda #$34	rd_data_phase       LDA #'4'
.395c1a	22 bc 06 39	jsl $3906bc	                    JSL IPUTC
.395c1e	c2 10		rep #$10	                REP #$10        ; set X long
.395c20	a0 00 00	ldy #$0000	                    LDY #0
.395c23	af f4 13 af	lda $af13f4	rd_data_loop        LDA @l SIO_FDC_MSR                      ; Wait for the next byte to be ready
.395c27	29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.395c29	c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.395c2b	d0 f6		bne $395c23	                    BNE rd_data_loop
.395c2d	af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Get the data byte
.395c31	97 26		sta [$0326],y	                    STA [BIOS_BUFF_PTR],Y                   ; And save it to the buffer
.395c33	c8		iny		                    INY                                     ; Move to the next position
.395c34	c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.395c37	d0 ea		bne $395c23	                    BNE rd_data_loop                        ; If not at the end, keep fetching
.395c39	a9 35		lda #$35	result_phase        LDA #'5'
.395c3b	22 bc 06 39	jsl $3906bc	                    JSL IPUTC
.395c3f	ad 32 05	lda $0532	                    LDA FDC_RESULT_NUM                      ; If no results are expected...
.395c42	f0 28		beq $395c6c	                    BEQ chk_busy                                ; Then we're done
.395c44	e2 10		sep #$10	                SEP #$10        ; set X short
.395c46	a2 00		ldx #$00	                    LDX #0
.395c48	20 28 5b	jsr $395b28	result_loop         JSR FDC_Can_Read_Data                   ; Wait until we can read
.395c4b	af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Yes: get the data
.395c4f	20 28 5b	jsr $395b28	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.395c52	af f5 13 af	lda $af13f5	read_result         LDA @l SIO_FDC_DTA                      ; Yes: get the data
.395c56	9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X                       ; Save it to the result buffer
.395c59	20 01 5b	jsr $395b01	                    JSR FDC_Check_RQM
.395c5c	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395c60	29 50		and #$50	                    AND #FDC_MSR_DIO | FDC_MSR_CMDBSY
.395c62	c9 50		cmp #$50	                    CMP #FDC_MSR_DIO | FDC_MSR_CMDBSY
.395c64	d0 06		bne $395c6c	                    BNE chk_busy
.395c66	e8		inx		                    INX                                     ; Move to the next result positions
.395c67	ec 32 05	cpx $0532	                    CPX FDC_RESULT_NUM
.395c6a	d0 e6		bne $395c52	                    BNE read_result                         ; And keep looping until we've read all
.395c6c					chk_busy
.395c6c	c2 10		rep #$10	                REP #$10        ; set X long
.395c6e	a2 0a 00	ldx #$000a	                    LDX #10                                 ; Wait 10ms (I guess?)
.395c71	22 e1 14 39	jsl $3914e1	                    JSL ILOOP_MS
.395c75	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check the command busy bit
.395c79	89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.395c7b	f0 0d		beq $395c8a	                    BEQ done                                ; If not set: we're done
.395c7d	20 28 5b	jsr $395b28	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.395c80	af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Read the data
.395c84	9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X
.395c87	e8		inx		                    INX
.395c88	80 e2		bra $395c6c	                    BRA chk_busy                            ; And keep checking
.395c8a					done
.395c8a	64 20		stz $0320	                    STZ BIOS_STATUS
.395c8c	28		plp		                    PLP
.395c8d	2b		pld		                    PLD
.395c8e	ab		plb		                    PLB
.395c8f	fa		plx		                    PLX
.395c90	38		sec		                    SEC
.395c91	6b		rtl		                    RTL
.395c92					error
.395c92	e2 20		sep #$20	                SEP #$20        ; set A short
.395c94	a9 85		lda #$85	                    LDA #BIOS_ERR_CMD
.395c96	85 20		sta $0320	pass_error          STA BIOS_STATUS
.395c98	28		plp		                    PLP
.395c99	2b		pld		                    PLD
.395c9a	ab		plb		                    PLB
.395c9b	fa		plx		                    PLX
.395c9c	18		clc		                    CLC
.395c9d	6b		rtl		                    RTL
.395c9e					FDC_Init
.395c9e	08		php		                    PHP
.395c9f	c2 10		rep #$10	                REP #$10        ; set X long
.395ca1	e2 20		sep #$20	                SEP #$20        ; set A short
.395ca3	a9 00		lda #$00	                    LDA #0
.395ca5	8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.395ca9	a2 e8 03	ldx #$03e8	                    LDX #1000                   ; Wait
.395cac	a0 00 00	ldy #$0000	                    LDY #0
.395caf	22 ee 14 39	jsl $3914ee	                    JSL IDELAY
.395cb3	a9 04		lda #$04	                    LDA #FDC_DOR_NRESET         ; Reset the FDC
.395cb5	8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.395cb9	ea		nop		                    NOP
.395cba	ea		nop		                    NOP
.395cbb	ea		nop		                    NOP
.395cbc	ea		nop		                    NOP
.395cbd	a9 00		lda #$00	                    LDA #$00                    ; Make sure the Speed and Compensation has been set
.395cbf	8f f4 13 af	sta $af13f4	                    STA @l SIO_FDC_DSR
.395cc3	a9 00		lda #$00	                    LDA #$00                    ; Precompensation set to 0
.395cc5	8f f7 13 af	sta $af13f7	                    STA @l SIO_FDC_CCR
.395cc9	a2 8f c5	ldx #$c58f	                    LDX #<>FDC_SEEK_TIME
.395ccc	a0 20 00	ldy #$0020	                    LDY #`FDC_SEEK_TIME
.395ccf	22 ee 14 39	jsl $3914ee	                    JSL IDELAY
.395cd3	22 a4 5d 39	jsl $395da4	                    JSL FDC_Sense_Int_Status
.395cd7	90 21		bcc $395cfa	                    BCC pass_failure
.395cd9	22 a4 5d 39	jsl $395da4	                    JSL FDC_Sense_Int_Status
.395cdd	90 1b		bcc $395cfa	                    BCC pass_failure
.395cdf	22 a4 5d 39	jsl $395da4	                    JSL FDC_Sense_Int_Status
.395ce3	90 15		bcc $395cfa	                    BCC pass_failure
.395ce5	22 a4 5d 39	jsl $395da4	                    JSL FDC_Sense_Int_Status
.395ce9	90 0f		bcc $395cfa	                    BCC pass_failure
.395ceb	22 37 5e 39	jsl $395e37	                    JSL FDC_Configure_Command
.395cef	90 09		bcc $395cfa	                    BCC pass_failure
.395cf1	22 f2 5d 39	jsl $395df2	                    JSL FDC_Specify_Command
.395cf5	90 03		bcc $395cfa	                    BCC pass_failure
.395cf7	28		plp		                    PLP
.395cf8	38		sec		                    SEC
.395cf9	6b		rtl		                    RTL
.395cfa	28		plp		pass_failure        PLP
.395cfb	18		clc		                    CLC
.395cfc	6b		rtl		                    RTL
.395cfd					FDC_MOTOR_NEEDED
.395cfd	08		php		                    PHP
.395cfe	c2 20		rep #$20	                REP #$20        ; set A long
.395d00	78		sei		                    SEI                         ; Turn off interrupts
.395d01	a9 08 07	lda #$0708	                    LDA #FDC_MOTOR_ON_TIME      ; Reset the FDC timeout clock
.395d04	8f 4e e0 38	sta $38e04e	                    STA @l FDC_MOTOR_TIMER
.395d08	e2 20		sep #$20	                SEP #$20        ; set A short
.395d0a	af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.395d0e	29 fe		and #$fe	                    AND #~FNX0_INT00_SOF        ; Enable the SOF interrupt
.395d10	8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.395d14	28		plp		                    PLP
.395d15	6b		rtl		                    RTL
.395d16					FDC_Motor_On
.395d16	08		php		                    PHP
.395d17	22 fd 5c 39	jsl $395cfd	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.395d1b	e2 20		sep #$20	                SEP #$20        ; set A short
.395d1d	af f2 13 af	lda $af13f2	                    LDA @l SIO_FDC_DOR          ; Check to see if the motor is already on
.395d21	89 10		bit #$10	                    BIT #FDC_DOR_MOT0
.395d23	d0 1d		bne $395d42	                    BNE done                    ; If so: skip
.395d25	a9 14		lda #$14	                    LDA #FDC_DOR_MOT0 | FDC_DOR_NRESET
.395d27	8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.395d2b	20 01 5b	jsr $395b01	                    JSR FDC_Check_RQM           ; Make sure we can leave knowing that everything set properly
.395d2e	a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.395d31	a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.395d34	22 ee 14 39	jsl $3914ee	                    JSL IDELAY
.395d38	af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.395d3c	09 80		ora #$80	                    ORA #$80                    ; Flag that the motor should be on
.395d3e	8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.395d42	28		plp		done                PLP
.395d43	6b		rtl		                    RTL
.395d44					FDC_Motor_Off
.395d44	08		php		                    PHP
.395d45	e2 20		sep #$20	                SEP #$20        ; set A short
.395d47	a9 04		lda #$04	                    LDA #FDC_DOR_NRESET
.395d49	8f f2 13 af	sta $af13f2	                    STA @L SIO_FDC_DOR
.395d4d	c2 20		rep #$20	                REP #$20        ; set A long
.395d4f	78		sei		                    SEI                         ; Turn off interrupts
.395d50	a9 00 00	lda #$0000	                    LDA #0                      ; Set FDC motor timeout counter to 0 to disable it
.395d53	8f 4e e0 38	sta $38e04e	                    STA @l FDC_MOTOR_TIMER
.395d57	e2 20		sep #$20	                SEP #$20        ; set A short
.395d59	af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.395d5d	09 01		ora #$01	                    ORA #FNX0_INT00_SOF         ; Disable the SOF interrupt
.395d5f	8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.395d63	af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.395d67	29 7f		and #$7f	                    AND #$7F                    ; Flag that the motor should be off
.395d69	8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.395d6d	28		plp		                    PLP
.395d6e	6b		rtl		                    RTL
.395d6f					FDC_Recalibrate_Command
.395d6f	0b		phd		                    PHD
.395d70	08		php		                    PHP
.395d71	48		pha		                PHA             ; begin setdp macro
.395d72	08		php		                PHP
.395d73	c2 20		rep #$20	                REP #$20        ; set A long
.395d75	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395d78	5b		tcd		                TCD
.395d79	28		plp		                PLP
.395d7a	68		pla		                PLA             ; end setdp macro
.395d7b	22 fd 5c 39	jsl $395cfd	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.395d7f	e2 20		sep #$20	                SEP #$20        ; set A short
.395d81	a9 07		lda #$07	                    LDA #FDC_CMD_RECALIBRATE    ; RECALIBRATE Command
.395d83	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.395d86	a5 00		lda $0300	                    LDA FDC_DRIVE
.395d88	8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.395d8b	a9 02		lda #$02	                    LDA #2
.395d8d	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM           ; 2 parameters
.395d90	9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT          ; 0 data
.395d93	9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM          ; 0 results
.395d96	22 57 5b 39	jsl $395b57	                    JSL FDC_COMMAND             ; Issue the command
.395d9a	90 04		bcc $395da0	                    BCC pass_failure            ; If failure, pass the failure up
.395d9c	28		plp		                    PLP
.395d9d	2b		pld		                    PLD
.395d9e	38		sec		                    SEC
.395d9f	6b		rtl		                    RTL
.395da0	28		plp		pass_failure        PLP
.395da1	2b		pld		                    PLD
.395da2	18		clc		                    CLC
.395da3	6b		rtl		                    RTL
.395da4					FDC_Sense_Int_Status
.395da4	8b		phb		                    PHB
.395da5	0b		phd		                    PHD
.395da6	08		php		                    PHP
.395da7	48		pha		                PHA             ; begin setdbr macro
.395da8	08		php		                PHP
.395da9	e2 20		sep #$20	                SEP #$20        ; set A short
.395dab	a9 00		lda #$00	                LDA #0
.395dad	48		pha		                PHA
.395dae	ab		plb		                PLB
.395daf	28		plp		                PLP
.395db0	68		pla		                PLA             ; end setdbr macro
.395db1	48		pha		                PHA             ; begin setdp macro
.395db2	08		php		                PHP
.395db3	c2 20		rep #$20	                REP #$20        ; set A long
.395db5	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395db8	5b		tcd		                TCD
.395db9	28		plp		                PLP
.395dba	68		pla		                PLA             ; end setdp macro
.395dbb	c2 30		rep #$30	                REP #$30        ; set A&X long
.395dbd	a2 0a 00	ldx #$000a	                    LDX #10                            ; Wait for 10ms
.395dc0	22 e1 14 39	jsl $3914e1	                    JSL ILOOP_MS
.395dc4	e2 20		sep #$20	                SEP #$20        ; set A short
.395dc6	64 06		stz $0306	                    STZ FDC_ST0                         ; Clear ST0
.395dc8	a9 ff		lda #$ff	                    LDA #$FF
.395dca	85 0a		sta $030a	                    STA FDC_PCN                         ; Set PCN to some obviously bad value
.395dcc	20 1b 5b	jsr $395b1b	                    JSR FDC_Check_CMD_BSY               ; Check I can send a command
.395dcf	20 01 5b	jsr $395b01	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.395dd2	a9 08		lda #$08	                    LDA #FDC_CMD_SENSE_INTERRUPT
.395dd4	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395dd8	20 28 5b	jsr $395b28	                    JSR FDC_Can_Read_Data
.395ddb	20 01 5b	jsr $395b01	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.395dde	af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.395de2	85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.395de4	20 01 5b	jsr $395b01	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.395de7	af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.395deb	85 0a		sta $030a	                    STA FDC_PCN                         ; --- Cylinder ---
.395ded	28		plp		                    PLP
.395dee	2b		pld		                    PLD
.395def	ab		plb		                    PLB
.395df0	38		sec		                    SEC
.395df1	6b		rtl		                    RTL
.395df2					FDC_Specify_Command
.395df2	8b		phb		                    PHB
.395df3	0b		phd		                    PHD
.395df4	08		php		                    PHP
.395df5	48		pha		                PHA             ; begin setdbr macro
.395df6	08		php		                PHP
.395df7	e2 20		sep #$20	                SEP #$20        ; set A short
.395df9	a9 00		lda #$00	                LDA #0
.395dfb	48		pha		                PHA
.395dfc	ab		plb		                PLB
.395dfd	28		plp		                PLP
.395dfe	68		pla		                PLA             ; end setdbr macro
.395dff	48		pha		                PHA             ; begin setdp macro
.395e00	08		php		                PHP
.395e01	c2 20		rep #$20	                REP #$20        ; set A long
.395e03	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395e06	5b		tcd		                TCD
.395e07	28		plp		                PLP
.395e08	68		pla		                PLA             ; end setdp macro
.395e09	c2 30		rep #$30	                REP #$30        ; set A&X long
.395e0b	a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.395e0e	22 e1 14 39	jsl $3914e1	                    JSL ILOOP_MS
.395e12	e2 20		sep #$20	                SEP #$20        ; set A short
.395e14	20 1b 5b	jsr $395b1b	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.395e17	20 01 5b	jsr $395b01	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.395e1a	a9 03		lda #$03	                    LDA #FDC_CMD_SPECIFY    ; Specify Command
.395e1c	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395e20	20 01 5b	jsr $395b01	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.395e23	a9 cf		lda #$cf	                    LDA #$CF
.395e25	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395e29	20 01 5b	jsr $395b01	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.395e2c	a9 01		lda #$01	                    LDA #$01                ; 1 = Non-DMA
.395e2e	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395e32	28		plp		                    PLP
.395e33	2b		pld		                    PLD
.395e34	ab		plb		                    PLB
.395e35	38		sec		                    SEC
.395e36	6b		rtl		                    RTL
.395e37					FDC_Configure_Command
.395e37	8b		phb		                    PHB
.395e38	0b		phd		                    PHD
.395e39	08		php		                    PHP
.395e3a	48		pha		                PHA             ; begin setdbr macro
.395e3b	08		php		                PHP
.395e3c	e2 20		sep #$20	                SEP #$20        ; set A short
.395e3e	a9 00		lda #$00	                LDA #0
.395e40	48		pha		                PHA
.395e41	ab		plb		                PLB
.395e42	28		plp		                PLP
.395e43	68		pla		                PLA             ; end setdbr macro
.395e44	48		pha		                PHA             ; begin setdp macro
.395e45	08		php		                PHP
.395e46	c2 20		rep #$20	                REP #$20        ; set A long
.395e48	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395e4b	5b		tcd		                TCD
.395e4c	28		plp		                PLP
.395e4d	68		pla		                PLA             ; end setdp macro
.395e4e	c2 30		rep #$30	                REP #$30        ; set A&X long
.395e50	a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.395e53	22 e1 14 39	jsl $3914e1	                    JSL ILOOP_MS
.395e57	e2 20		sep #$20	                SEP #$20        ; set A short
.395e59	20 1b 5b	jsr $395b1b	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.395e5c	20 01 5b	jsr $395b01	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.395e5f	a9 13		lda #$13	                    LDA #FDC_CMD_CONFIGURE  ; Specify Command
.395e61	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395e65	20 01 5b	jsr $395b01	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.395e68	a9 00		lda #$00	                    LDA #$00
.395e6a	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395e6e	20 01 5b	jsr $395b01	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.395e71	a9 44		lda #$44	                    LDA #$44                ; Implied Seek, FIFOTHR = 4 byte
.395e73	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395e77	20 01 5b	jsr $395b01	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.395e7a	a9 00		lda #$00	                    LDA #$00
.395e7c	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395e80	20 1b 5b	jsr $395b1b	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.395e83	28		plp		                    PLP
.395e84	2b		pld		                    PLD
.395e85	ab		plb		                    PLB
.395e86	38		sec		                    SEC
.395e87	6b		rtl		                    RTL
.395e88					FDC_Read_ID_Command
.395e88	8b		phb		                    PHB
.395e89	0b		phd		                    PHD
.395e8a	08		php		                    PHP
.395e8b	48		pha		                PHA             ; begin setdbr macro
.395e8c	08		php		                PHP
.395e8d	e2 20		sep #$20	                SEP #$20        ; set A short
.395e8f	a9 00		lda #$00	                LDA #0
.395e91	48		pha		                PHA
.395e92	ab		plb		                PLB
.395e93	28		plp		                PLP
.395e94	68		pla		                PLA             ; end setdbr macro
.395e95	48		pha		                PHA             ; begin setdp macro
.395e96	08		php		                PHP
.395e97	c2 20		rep #$20	                REP #$20        ; set A long
.395e99	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395e9c	5b		tcd		                TCD
.395e9d	28		plp		                PLP
.395e9e	68		pla		                PLA             ; end setdp macro
.395e9f	e2 20		sep #$20	                SEP #$20        ; set A short
.395ea1	a9 0a		lda #$0a	                    LDA #FDC_CMD_READ_ID                ; READID Command
.395ea3	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.395ea6	a9 01		lda #$01	                    LDA #1
.395ea8	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.395eab	9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.395eae	a9 07		lda #$07	                    LDA #7
.395eb0	8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.395eb3	22 57 5b 39	jsl $395b57	                    JSL FDC_COMMAND                     ; Issue the command
.395eb7	90 27		bcc $395ee0	                    BCC pass_failure
.395eb9	ad 10 05	lda $0510	                    LDA FDC_RESULTS
.395ebc	85 06		sta $0306	                    STA FDC_ST0                         ; Get ST0
.395ebe	ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.395ec1	85 07		sta $0307	                    STA FDC_ST1                         ; Get ST1
.395ec3	ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.395ec6	85 08		sta $0308	                    STA FDC_ST2                         ; Get ST2
.395ec8	ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.395ecb	85 02		sta $0302	                    STA FDC_CYLINDER                    ; Get the cylinder
.395ecd	ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.395ed0	85 01		sta $0301	                    STA FDC_HEAD                        ; Get the head
.395ed2	ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.395ed5	85 0a		sta $030a	                    STA FDC_PCN                         ; Get the sector
.395ed7	ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.395eda	85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; Get the sector size code
.395edc	28		plp		                    PLP
.395edd	2b		pld		                    PLD
.395ede	ab		plb		                    PLB
.395edf	6b		rtl		                    RTL
.395ee0	28		plp		pass_failure        PLP
.395ee1	2b		pld		                    PLD
.395ee2	ab		plb		                    PLB
.395ee3	18		clc		                    CLC
.395ee4	6b		rtl		                    RTL
.395ee5					FDC_DumpReg_Command
.395ee5	0b		phd		                    PHD
.395ee6	08		php		                    PHP
.395ee7	e2 20		sep #$20	                SEP #$20        ; set A short
.395ee9	a9 0e		lda #$0e	                    LDA #FDC_CMD_DUMPREG                ; DUMPREG Command
.395eeb	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.395eee	a9 01		lda #$01	                    LDA #1
.395ef0	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.395ef3	9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.395ef6	a9 0a		lda #$0a	                    LDA #10
.395ef8	8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 10 results
.395efb	22 57 5b 39	jsl $395b57	                    JSL FDC_COMMAND                     ; Issue the command
.395eff	90 03		bcc $395f04	                    BCC pass_failure
.395f01	28		plp		                    PLP
.395f02	2b		pld		                    PLD
.395f03	6b		rtl		                    RTL
.395f04	28		plp		pass_failure        PLP
.395f05	2b		pld		                    PLD
.395f06	18		clc		                    CLC
.395f07	6b		rtl		                    RTL
.395f08					FDC_Seek_Track
.395f08	8b		phb		                    PHB
.395f09	0b		phd		                    PHD
.395f0a	08		php		                    PHP
.395f0b	48		pha		                PHA             ; begin setdbr macro
.395f0c	08		php		                PHP
.395f0d	e2 20		sep #$20	                SEP #$20        ; set A short
.395f0f	a9 00		lda #$00	                LDA #0
.395f11	48		pha		                PHA
.395f12	ab		plb		                PLB
.395f13	28		plp		                PLP
.395f14	68		pla		                PLA             ; end setdbr macro
.395f15	48		pha		                PHA             ; begin setdp macro
.395f16	08		php		                PHP
.395f17	c2 20		rep #$20	                REP #$20        ; set A long
.395f19	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395f1c	5b		tcd		                TCD
.395f1d	28		plp		                PLP
.395f1e	68		pla		                PLA             ; end setdp macro
.395f1f	22 fd 5c 39	jsl $395cfd	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.395f23	e2 20		sep #$20	                SEP #$20        ; set A short
.395f25	a9 0f		lda #$0f	                    LDA #FDC_CMD_SEEK                   ; Seek Command
.395f27	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.395f2a	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.395f2c	29 01		and #$01	                    AND #$01
.395f2e	0a		asl a		                    ASL A
.395f2f	0a		asl a		                    ASL A
.395f30	05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.395f32	8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.395f35	a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; And the track
.395f37	8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.395f3a	a9 03		lda #$03	                    LDA #3
.395f3c	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 3 parameter (the command)
.395f3f	9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.395f42	9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM                  ; 0 results
.395f45	22 57 5b 39	jsl $395b57	                    JSL FDC_COMMAND                     ; Issue the command
.395f49	90 05		bcc $395f50	                    BCC pass_failure
.395f4b	28		plp		                    PLP
.395f4c	2b		pld		                    PLD
.395f4d	ab		plb		                    PLB
.395f4e	38		sec		                    SEC
.395f4f	6b		rtl		                    RTL
.395f50	28		plp		pass_failure        PLP
.395f51	2b		pld		                    PLD
.395f52	ab		plb		                    PLB
.395f53	18		clc		                    CLC
.395f54	6b		rtl		                    RTL
.395f55					FDC_Read_Sector
.395f55	8b		phb		                    PHB
.395f56	0b		phd		                    PHD
.395f57	08		php		                    PHP
.395f58	48		pha		                PHA             ; begin setdbr macro
.395f59	08		php		                PHP
.395f5a	e2 20		sep #$20	                SEP #$20        ; set A short
.395f5c	a9 00		lda #$00	                LDA #0
.395f5e	48		pha		                PHA
.395f5f	ab		plb		                PLB
.395f60	28		plp		                PLP
.395f61	68		pla		                PLA             ; end setdbr macro
.395f62	48		pha		                PHA             ; begin setdp macro
.395f63	08		php		                PHP
.395f64	c2 20		rep #$20	                REP #$20        ; set A long
.395f66	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395f69	5b		tcd		                TCD
.395f6a	28		plp		                PLP
.395f6b	68		pla		                PLA             ; end setdp macro
.395f6c	22 fd 5c 39	jsl $395cfd	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.395f70	e2 20		sep #$20	                SEP #$20        ; set A short
.395f72	a9 06		lda #$06	                    LDA #FDC_CMD_READ_DATA              ; The READ_DATA command
.395f74	09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.395f76	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.395f79	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.395f7b	29 01		and #$01	                    AND #$01
.395f7d	0a		asl a		                    ASL A
.395f7e	0a		asl a		                    ASL A
.395f7f	05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.395f81	8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.395f84	a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.395f86	8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.395f89	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.395f8b	8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.395f8e	a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.395f90	8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.395f93	a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.395f95	8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.395f98	a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.395f9a	8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.395f9d	a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.395f9f	8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.395fa2	a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.395fa4	8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.395fa7	a9 09		lda #$09	                    LDA #9
.395fa9	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.395fac	a9 01		lda #$01	                    LDA #1
.395fae	8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect data
.395fb1	a9 07		lda #$07	                    LDA #7
.395fb3	8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.395fb6	22 57 5b 39	jsl $395b57	command             JSL FDC_COMMAND                     ; Issue the command
.395fba	08		php		                    PHP
.395fbb	ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.395fbe	85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ----
.395fc0	ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.395fc3	85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ----
.395fc5	ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.395fc8	85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ----
.395fca	ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.395fcd	85 02		sta $0302	                    STA FDC_CYLINDER                    ; -- C ---
.395fcf	ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.395fd2	85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.395fd4	ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.395fd7	85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.395fd9	ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.395fdc	85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.395fde	28		plp		                    PLP
.395fdf	90 04		bcc $395fe5	                    BCC pass_failure
.395fe1	28		plp		done                PLP
.395fe2	2b		pld		                    PLD
.395fe3	ab		plb		                    PLB
.395fe4	6b		rtl		                    RTL
.395fe5	28		plp		pass_failure        PLP
.395fe6	2b		pld		                    PLD
.395fe7	ab		plb		                    PLB
.395fe8	18		clc		                    CLC
.395fe9	6b		rtl		                    RTL
.395fea					FDC_Write_Sector
.395fea	8b		phb		                    PHB
.395feb	0b		phd		                    PHD
.395fec	08		php		                    PHP
.395fed	48		pha		                PHA             ; begin setdbr macro
.395fee	08		php		                PHP
.395fef	e2 20		sep #$20	                SEP #$20        ; set A short
.395ff1	a9 00		lda #$00	                LDA #0
.395ff3	48		pha		                PHA
.395ff4	ab		plb		                PLB
.395ff5	28		plp		                PLP
.395ff6	68		pla		                PLA             ; end setdbr macro
.395ff7	48		pha		                PHA             ; begin setdp macro
.395ff8	08		php		                PHP
.395ff9	c2 20		rep #$20	                REP #$20        ; set A long
.395ffb	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395ffe	5b		tcd		                TCD
.395fff	28		plp		                PLP
.396000	68		pla		                PLA             ; end setdp macro
.396001	e2 20		sep #$20	                SEP #$20        ; set A short
.396003	22 fd 5c 39	jsl $395cfd	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.396007	a9 05		lda #$05	                    LDA #FDC_CMD_WRITE_DATA             ; The WRITE_DATA command
.396009	09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.39600b	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.39600e	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.396010	29 01		and #$01	                    AND #$01
.396012	0a		asl a		                    ASL A
.396013	0a		asl a		                    ASL A
.396014	05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.396016	8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.396019	a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.39601b	8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.39601e	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.396020	8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.396023	a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.396025	8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.396028	a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.39602a	8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.39602d	a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.39602f	8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.396032	a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.396034	8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.396037	a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.396039	8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.39603c	a9 09		lda #$09	                    LDA #9
.39603e	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.396041	a9 ff		lda #$ff	                    LDA #$FF
.396043	8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect to write data
.396046	a9 07		lda #$07	                    LDA #7
.396048	8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.39604b	22 57 5b 39	jsl $395b57	command             JSL FDC_COMMAND                     ; Issue the command
.39604f	08		php		                    PHP
.396050	ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.396053	85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.396055	ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.396058	85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ---
.39605a	ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.39605d	85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ---
.39605f	ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.396062	85 02		sta $0302	                    STA FDC_CYLINDER                    ; --- C ---
.396064	ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.396067	85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.396069	ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.39606c	85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.39606e	ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.396071	85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.396073	28		plp		check_status        PLP
.396074	90 04		bcc $39607a	                    BCC pass_failure
.396076	28		plp		done                PLP
.396077	2b		pld		                    PLD
.396078	ab		plb		                    PLB
.396079	6b		rtl		                    RTL
.39607a	28		plp		pass_failure        PLP
.39607b	2b		pld		                    PLD
.39607c	ab		plb		                    PLB
.39607d	18		clc		                    CLC
.39607e	6b		rtl		                    RTL
.39607f					DIVIDE32
.39607f	da		phx		                    PHX
.396080	5a		phy		                    PHY
.396081	0b		phd		                    PHD
.396082	08		php		                    PHP
.396083	48		pha		                PHA             ; begin setdp macro
.396084	08		php		                PHP
.396085	c2 20		rep #$20	                REP #$20        ; set A long
.396087	a9 0c 03	lda #$030c	                LDA #DIVIDEND         ; set DP to page 0
.39608a	5b		tcd		                TCD
.39608b	28		plp		                PLP
.39608c	68		pla		                PLA             ; end setdp macro
.39608d	c2 30		rep #$30	                REP #$30        ; set A&X long
.39608f	64 08		stz $0314	                    STZ REMAINDER           ; Initialize the remainder
.396091	64 0a		stz $0316	                    STZ REMAINDER+2
.396093	a2 20 00	ldx #$0020	                    LDX #32                 ; Set the number of bits to process
.396096	06 00		asl $030c	loop                ASL DIVIDEND
.396098	26 02		rol $030e	                    ROL DIVIDEND+2
.39609a	26 08		rol $0314	                    ROL REMAINDER
.39609c	26 0a		rol $0316	                    ROL REMAINDER+2
.39609e	a5 08		lda $0314	                    LDA REMAINDER
.3960a0	38		sec		                    SEC
.3960a1	e5 04		sbc $0310	                    SBC DIVISOR
.3960a3	a8		tay		                    TAY
.3960a4	a5 0a		lda $0316	                    LDA REMAINDER+2
.3960a6	e5 06		sbc $0312	                    SBC DIVISOR+2
.3960a8	90 06		bcc $3960b0	                    BCC skip
.3960aa	85 0a		sta $0316	                    STA REMAINDER+2
.3960ac	84 08		sty $0314	                    STY REMAINDER
.3960ae	e6 00		inc $030c	                    INC DIVIDEND
.3960b0	ca		dex		skip                DEX
.3960b1	d0 e3		bne $396096	                    BNE loop
.3960b3	28		plp		                    PLP
.3960b4	2b		pld		                    PLD
.3960b5	7a		ply		                    PLY
.3960b6	fa		plx		                    PLX
.3960b7	60		rts		                    RTS
.3960b8					LBA2CHS
.3960b8	8b		phb		                    PHB
.3960b9	0b		phd		                    PHD
.3960ba	08		php		                    PHP
.3960bb	48		pha		                PHA             ; begin setdbr macro
.3960bc	08		php		                PHP
.3960bd	e2 20		sep #$20	                SEP #$20        ; set A short
.3960bf	a9 00		lda #$00	                LDA #0
.3960c1	48		pha		                PHA
.3960c2	ab		plb		                PLB
.3960c3	28		plp		                PLP
.3960c4	68		pla		                PLA             ; end setdbr macro
.3960c5	48		pha		                PHA             ; begin setdp macro
.3960c6	08		php		                PHP
.3960c7	c2 20		rep #$20	                REP #$20        ; set A long
.3960c9	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3960cc	5b		tcd		                TCD
.3960cd	28		plp		                PLP
.3960ce	68		pla		                PLA             ; end setdp macro
.3960cf	c2 30		rep #$30	                REP #$30        ; set A&X long
.3960d1	a5 22		lda $0322	                    LDA BIOS_LBA
.3960d3	85 0c		sta $030c	                    STA DIVIDEND
.3960d5	a5 24		lda $0324	                    LDA BIOS_LBA+2
.3960d7	85 0e		sta $030e	                    STA DIVIDEND+2
.3960d9	a9 24 00	lda #$0024	                    LDA #36
.3960dc	85 10		sta $0310	                    STA DIVISOR
.3960de	64 12		stz $0312	                    STZ DIVISOR+2
.3960e0	20 7f 60	jsr $39607f	                    JSR DIVIDE32
.3960e3	e2 20		sep #$20	                SEP #$20        ; set A short
.3960e5	a5 0c		lda $030c	                    LDA DIVIDEND
.3960e7	85 02		sta $0302	                    STA FDC_CYLINDER
.3960e9	c2 20		rep #$20	                REP #$20        ; set A long
.3960eb	a5 14		lda $0314	                    LDA REMAINDER
.3960ed	85 0c		sta $030c	                    STA DIVIDEND
.3960ef	a5 16		lda $0316	                    LDA REMAINDER+2
.3960f1	85 0e		sta $030e	                    STA DIVIDEND+2
.3960f3	a9 12 00	lda #$0012	                    LDA #18
.3960f6	85 10		sta $0310	                    STA DIVISOR
.3960f8	64 12		stz $0312	                    STZ DIVISOR+2
.3960fa	20 7f 60	jsr $39607f	                    JSR DIVIDE32
.3960fd	e2 20		sep #$20	                SEP #$20        ; set A short
.3960ff	a5 0c		lda $030c	                    LDA DIVIDEND
.396101	29 01		and #$01	                    AND #$01
.396103	85 01		sta $0301	                    STA FDC_HEAD
.396105	a5 14		lda $0314	                    LDA REMAINDER
.396107	1a		inc a		                    INC A
.396108	85 03		sta $0303	                    STA FDC_SECTOR
.39610a	28		plp		                    PLP
.39610b	2b		pld		                    PLD
.39610c	ab		plb		                    PLB
.39610d	6b		rtl		                    RTL
.39610e					FDC_GETBLOCK
.39610e	8b		phb		                    PHB
.39610f	0b		phd		                    PHD
.396110	08		php		                    PHP
.396111	48		pha		                PHA             ; begin setdbr macro
.396112	08		php		                PHP
.396113	e2 20		sep #$20	                SEP #$20        ; set A short
.396115	a9 00		lda #$00	                LDA #0
.396117	48		pha		                PHA
.396118	ab		plb		                PLB
.396119	28		plp		                PLP
.39611a	68		pla		                PLA             ; end setdbr macro
.39611b	48		pha		                PHA             ; begin setdp macro
.39611c	08		php		                PHP
.39611d	c2 20		rep #$20	                REP #$20        ; set A long
.39611f	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396122	5b		tcd		                TCD
.396123	28		plp		                PLP
.396124	68		pla		                PLA             ; end setdp macro
.396125	e2 20		sep #$20	                SEP #$20        ; set A short
.396127	a9 03		lda #$03	                    LDA #3                      ; We can retry 3 times
.396129	8d 34 05	sta $0534	                    STA FDC_CMD_RETRY
.39612c	c2 30		rep #$30	                REP #$30        ; set A&X long
.39612e	22 b8 60 39	jsl $3960b8	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.396132	e2 20		sep #$20	                SEP #$20        ; set A short
.396134	a5 03		lda $0303	                    LDA FDC_SECTOR              ; Just make sure the sector is ok
.396136	f0 29		beq $396161	                    BEQ read_failure
.396138					try_read
.396138	c2 20		rep #$20	                REP #$20        ; set A long
.39613a	22 55 5f 39	jsl $395f55	                    JSL FDC_Read_Sector         ; Read the sector
.39613e	90 14		bcc $396154	                    BCC retry
.396140	e2 20		sep #$20	                SEP #$20        ; set A short
.396142	a5 06		lda $0306	                    LDA FDC_ST0
.396144	29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.396146	d0 19		bne $396161	                    BNE read_failure
.396148					ret_success
.396148	e2 20		sep #$20	                SEP #$20        ; set A short
.39614a	a9 00		lda #$00	                    LDA #0
.39614c	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.39614f	28		plp		                    PLP
.396150	2b		pld		                    PLD
.396151	ab		plb		                    PLB
.396152	38		sec		                    SEC
.396153	6b		rtl		                    RTL
.396154					retry
.396154	e2 20		sep #$20	                SEP #$20        ; set A short
.396156	ce 34 05	dec $0534	                    DEC FDC_CMD_RETRY           ; Decrement the retry counter
.396159	30 13		bmi $39616e	                    BMI pass_failure            ; If it's gone negative, we should quit with an error
.39615b	22 9e 5c 39	jsl $395c9e	                    JSL FDC_INIT                ; Otherwise, reinitialize the FDC
.39615f	80 d7		bra $396138	                    BRA try_read                ; And try the read again
.396161					read_failure
.396161	e2 20		sep #$20	                SEP #$20        ; set A short
.396163	a9 82		lda #$82	                    LDA #BIOS_ERR_READ
.396165	80 04		bra $39616b	                    BRA ret_failure
.396167					seek_failure
.396167	e2 20		sep #$20	                SEP #$20        ; set A short
.396169	a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.39616b	8d 20 03	sta $0320	ret_failure         STA @w BIOS_STATUS
.39616e	28		plp		pass_failure        PLP
.39616f	2b		pld		                    PLD
.396170	ab		plb		                    PLB
.396171	18		clc		                    CLC
.396172	6b		rtl		                    RTL
.396173					FDC_PUTBLOCK
.396173	8b		phb		                    PHB
.396174	0b		phd		                    PHD
.396175	08		php		                    PHP
.396176	48		pha		                PHA             ; begin setdbr macro
.396177	08		php		                PHP
.396178	e2 20		sep #$20	                SEP #$20        ; set A short
.39617a	a9 00		lda #$00	                LDA #0
.39617c	48		pha		                PHA
.39617d	ab		plb		                PLB
.39617e	28		plp		                PLP
.39617f	68		pla		                PLA             ; end setdbr macro
.396180	48		pha		                PHA             ; begin setdp macro
.396181	08		php		                PHP
.396182	c2 20		rep #$20	                REP #$20        ; set A long
.396184	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396187	5b		tcd		                TCD
.396188	28		plp		                PLP
.396189	68		pla		                PLA             ; end setdp macro
.39618a	e2 20		sep #$20	                SEP #$20        ; set A short
.39618c	a9 03		lda #$03	                    LDA #3                      ; Set the number of retries we're willing to do
.39618e	8d 34 05	sta $0534	                    STA @w FDC_CMD_RETRY
.396191	c2 30		rep #$30	                REP #$30        ; set A&X long
.396193	22 b8 60 39	jsl $3960b8	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.396197	22 ea 5f 39	jsl $395fea	retry               JSL FDC_Write_Sector        ; Write the sector
.39619b	90 28		bcc $3961c5	                    BCC attempt_retry
.39619d	e2 20		sep #$20	                SEP #$20        ; set A short
.39619f	a5 06		lda $0306	                    LDA FDC_ST0
.3961a1	29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.3961a3	d0 0c		bne $3961b1	                    BNE write_failure
.3961a5					ret_success
.3961a5	e2 20		sep #$20	                SEP #$20        ; set A short
.3961a7	a9 00		lda #$00	                    LDA #0
.3961a9	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.3961ac	28		plp		                    PLP
.3961ad	2b		pld		                    PLD
.3961ae	ab		plb		                    PLB
.3961af	38		sec		                    SEC
.3961b0	6b		rtl		                    RTL
.3961b1					write_failure
.3961b1	e2 20		sep #$20	                SEP #$20        ; set A short
.3961b3	a5 07		lda $0307	                    LDA FDC_ST1                         ; Check ST1 for write protect
.3961b5	89 02		bit #$02	                    BIT #FDC_ST1_NW
.3961b7	f0 04		beq $3961bd	                    BEQ generic_err
.3961b9	a9 86		lda #$86	                    LDA #BIOS_ERR_WRITEPROT             ; Yes: return a write-protect error
.3961bb	80 17		bra $3961d4	                    BRA ret_failure
.3961bd	89 10		bit #$10	generic_err         BIT #FDC_ST1_OR                     ; TODO: properly handle over/under run errors
.3961bf	d0 e4		bne $3961a5	                    BNE ret_success
.3961c1	89 80		bit #$80	                    BIT #FDC_ST1_EN                     ; TODO: properly handle end-of-track
.3961c3	d0 e0		bne $3961a5	                    BNE ret_success
.3961c5					attempt_retry
.3961c5	e2 20		sep #$20	                SEP #$20        ; set A short
.3961c7	ce 34 05	dec $0534	                    DEC @w FDC_CMD_RETRY                ; Count down the retries
.3961ca	d0 cb		bne $396197	                    BNE retry                           ; And retry unless we have none left
.3961cc	a9 83		lda #$83	                    LDA #BIOS_ERR_WRITE                 ; Otherwise: return a generic write error
.3961ce	80 04		bra $3961d4	                    BRA ret_failure
.3961d0					seek_failure
.3961d0	e2 20		sep #$20	                SEP #$20        ; set A short
.3961d2	a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.3961d4					ret_failure
.3961d4	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.3961d7	28		plp		pass_failure        PLP
.3961d8	2b		pld		                    PLD
.3961d9	ab		plb		                    PLB
.3961da	18		clc		                    CLC
.3961db	6b		rtl		                    RTL
.3961dc					FDC_MOUNT
.3961dc	8b		phb		                    PHB
.3961dd	0b		phd		                    PHD
.3961de	08		php		                    PHP
.3961df	48		pha		                PHA             ; begin setdbr macro
.3961e0	08		php		                PHP
.3961e1	e2 20		sep #$20	                SEP #$20        ; set A short
.3961e3	a9 00		lda #$00	                LDA #0
.3961e5	48		pha		                PHA
.3961e6	ab		plb		                PLB
.3961e7	28		plp		                PLP
.3961e8	68		pla		                PLA             ; end setdbr macro
.3961e9	48		pha		                PHA             ; begin setdp macro
.3961ea	08		php		                PHP
.3961eb	c2 20		rep #$20	                REP #$20        ; set A long
.3961ed	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3961f0	5b		tcd		                TCD
.3961f1	28		plp		                PLP
.3961f2	68		pla		                PLA             ; end setdp macro
.3961f3	e2 20		sep #$20	                SEP #$20        ; set A short
.3961f5	c2 10		rep #$10	                REP #$10        ; set X long
.3961f7	a9 00		lda #$00	                    LDA #0
.3961f9	a2 00 00	ldx #$0000	                    LDX #0
.3961fc	9f 00 e3 38	sta $38e300,x	zero_loop           STA DOS_SECTOR,X
.396200	e8		inx		                    INX
.396201	e0 00 02	cpx #$0200	                    CPX #512
.396204	d0 f6		bne $3961fc	                    BNE zero_loop
.396206	a9 00		lda #$00	                    LDA #0                                  ; We only support drive 0
.396208	85 00		sta $0300	                    STA FDC_DRIVE
.39620a	22 16 5d 39	jsl $395d16	                    JSL FDC_Motor_On                        ; Turn the motor on
.39620e	c2 30		rep #$30	                REP #$30        ; set A&X long
.396210	a9 00 00	lda #$0000	                    LDA #0                                  ; We want sector 0
.396213	85 22		sta $0322	                    STA BIOS_LBA
.396215	85 24		sta $0324	                    STA BIOS_LBA+2
.396217	a9 00 e3	lda #$e300	                    LDA #<>DOS_SECTOR                       ; And load it into DOS_SECTOR
.39621a	85 26		sta $0326	                    STA BIOS_BUFF_PTR
.39621c	a9 38 00	lda #$0038	                    LDA #`DOS_SECTOR
.39621f	85 28		sta $0328	                    STA BIOS_BUFF_PTR+2
.396221	22 0e 61 39	jsl $39610e	                    JSL FDC_GETBLOCK                        ; Attempt to read the data
.396225	b0 03		bcs $39622a	                    BCS parse_boot                          ; If ok: start parsing the boot record
.396227	82 d3 00	brl $3962fd	                    BRL pass_failure                        ; Pass the error up the chain
.39622a					parse_boot
.39622a	e2 20		sep #$20	                SEP #$20        ; set A short
.39622c	a9 00		lda #$00	                    LDA #PART_TYPE_FAT12                    ; Set the file system to FAT12
.39622e	8f 01 e0 38	sta $38e001	                    STA @l FILE_SYSTEM
.396232	a9 00		lda #$00	                    LDA #0                                  ; There are no partitions on the disk
.396234	8f 02 e0 38	sta $38e002	                    STA @l PARTITION
.396238	e2 20		sep #$20	                SEP #$20        ; set A short
.39623a	af 0d e3 38	lda $38e30d	                    LDA DOS_SECTOR+BPB_SECPERCLUS12_OFF     ; Get the # of sectors per cluster (usually 1)
.39623e	8f 03 e0 38	sta $38e003	                    STA @l SECTORS_PER_CLUSTER
.396242	c2 20		rep #$20	                REP #$20        ; set A long
.396244	a9 00 00	lda #$0000	                    LDA #0                                  ; First sector of the "partition" is 0
.396247	8f 04 e0 38	sta $38e004	                    STA @l FIRSTSECTOR
.39624b	8f 06 e0 38	sta $38e006	                    STA @l FIRSTSECTOR+2
.39624f	af 16 e3 38	lda $38e316	                    LDA DOS_SECTOR+BPB_SECPERFAT12_OFF      ; Get the number of sectors per FAT
.396253	8f 10 e0 38	sta $38e010	                    STA @l SEC_PER_FAT
.396257	a9 00 00	lda #$0000	                    LDA #0
.39625a	8f 12 e0 38	sta $38e012	                    STA @l SEC_PER_FAT+2
.39625e	a9 01 00	lda #$0001	                    LDA #1                                  ; FAT#1 begins at sector 1
.396261	8f 14 e0 38	sta $38e014	                    STA @l FAT_BEGIN_LBA
.396265	18		clc		                    CLC
.396266	6f 10 e0 38	adc $38e010	                    ADC @l SEC_PER_FAT
.39626a	8f 18 e0 38	sta $38e018	                    STA @l FAT2_BEGIN_LBA                   ; FAT#2 begins SEC_PER_FAT sectors later
.39626e	a9 00 00	lda #$0000	                    LDA #0
.396271	8f 16 e0 38	sta $38e016	                    STA @l FAT_BEGIN_LBA+2
.396275	8f 1a e0 38	sta $38e01a	                    STA @L FAT2_BEGIN_LBA+2
.396279	18		clc		                    CLC                                     ; Calculate the root directory's starting sector
.39627a	af 18 e0 38	lda $38e018	                    LDA @l FAT2_BEGIN_LBA
.39627e	6f 10 e0 38	adc $38e010	                    ADC @l SEC_PER_FAT
.396282	8f 20 e0 38	sta $38e020	                    STA @l ROOT_DIR_FIRST_CLUSTER           ; ROOT_DIR_FIRST_CLUSTER will be a sector LBA for FAT12!
.396286	a9 00 00	lda #$0000	                    LDA #0
.396289	8f 22 e0 38	sta $38e022	                    STA @l ROOT_DIR_FIRST_CLUSTER+2
.39628d	af 11 e3 38	lda $38e311	                    LDA DOS_SECTOR+BPB_ROOT_MAX_ENTRY12_OFF ; Get the maximum number of directory entries for the root dir
.396291	8f 24 e0 38	sta $38e024	                    STA @l ROOT_DIR_MAX_ENTRY
.396295	4a		lsr a		                    LSR A                                   ; 16 entries per sector
.396296	4a		lsr a		                    LSR A
.396297	4a		lsr a		                    LSR A
.396298	4a		lsr a		                    LSR A                                   ; So now A is the number of sectors in the root directory
.396299	18		clc		                    CLC
.39629a	6f 20 e0 38	adc $38e020	                    ADC @L ROOT_DIR_FIRST_CLUSTER           ; Add that to the first sector LBA for the root directory
.39629e	8f 1c e0 38	sta $38e01c	                    STA @l CLUSTER_BEGIN_LBA                ; And that is the LBA for the first cluster
.3962a2	a9 00 00	lda #$0000	                    LDA #0
.3962a5	8f 1e e0 38	sta $38e01e	                    STA @l CLUSTER_BEGIN_LBA+2
.3962a9	af 13 e3 38	lda $38e313	                    LDA DOS_SECTOR+BPB_TOTAL_SECTORS        ; Set the sector limit
.3962ad	8f 08 e0 38	sta $38e008	                    STA @l SECTORCOUNT
.3962b1	a9 00 00	lda #$0000	                    LDA #0
.3962b4	8f 0a e0 38	sta $38e00a	                    STA @l SECTORCOUNT+2
.3962b8	af 0e e3 38	lda $38e30e	                    LDA DOS_SECTOR+BPB_RSRVCLUS_OFF         ; Get the number of reserved clusters
.3962bc	8f 0c e0 38	sta $38e00c	                    STA @l NUM_RSRV_SEC
.3962c0	a9 00 02	lda #$0200	                    LDA #DOS_SECTOR_SIZE                    ; Set the size of a FAT12 cluster
.3962c3	8f 0e e0 38	sta $38e00e	                    STA @l CLUSTER_SIZE
.3962c7	e2 20		sep #$20	                SEP #$20        ; set A short
.3962c9	af 26 e3 38	lda $38e326	                    LDA DOS_SECTOR+BPB_SIGNATUREB           ; Is signature B $29?
.3962cd	c9 29		cmp #$29	                    CMP #BPB_EXTENDED_RECORD
.3962cf	80 14		bra $3962e5	                    BRA no_volume_id                        ; No: there is no volume ID
.3962d1					is_extended
.3962d1	c2 20		rep #$20	                REP #$20        ; set A long
.3962d3	af 27 e3 38	lda $38e327	                    LDA DOS_SECTOR+BPB_VOLUMEID             ; Yes: set the volume ID
.3962d7	8f 26 e0 38	sta $38e026	                    STA @l VOLUME_ID
.3962db	af 29 e3 38	lda $38e329	                    LDA DOS_SECTOR+BPB_VOLUMEID+2
.3962df	8f 28 e0 38	sta $38e028	                    STA @l VOLUME_ID+2
.3962e3	80 0d		bra $3962f2	                    BRA ret_success
.3962e5					no_volume_id
.3962e5	c2 20		rep #$20	                REP #$20        ; set A long
.3962e7	a9 00 00	lda #$0000	                    LDA #0                                  ; No: blank the Volume ID
.3962ea	8f 26 e0 38	sta $38e026	                    STA @l VOLUME_ID
.3962ee	8f 28 e0 38	sta $38e028	                    STA @L VOLUME_ID+2
.3962f2					ret_success
.3962f2	e2 20		sep #$20	                SEP #$20        ; set A short
.3962f4	a9 00		lda #$00	                    LDA #0
.3962f6	85 20		sta $0320	                    STA BIOS_STATUS
.3962f8	28		plp		                    PLP
.3962f9	2b		pld		                    PLD
.3962fa	ab		plb		                    PLB
.3962fb	38		sec		                    SEC
.3962fc	6b		rtl		                    RTL
.3962fd	28		plp		pass_failure        PLP
.3962fe	2b		pld		                    PLD
.3962ff	ab		plb		                    PLB
.396300	18		clc		                    CLC
.396301	6b		rtl		                    RTL
.396302					FDC_CMDBLOCK
.396302	8b		phb		                    PHB
.396303	0b		phd		                    PHD
.396304	08		php		                    PHP
.396305	48		pha		                PHA             ; begin setdbr macro
.396306	08		php		                PHP
.396307	e2 20		sep #$20	                SEP #$20        ; set A short
.396309	a9 00		lda #$00	                LDA #0
.39630b	48		pha		                PHA
.39630c	ab		plb		                PLB
.39630d	28		plp		                PLP
.39630e	68		pla		                PLA             ; end setdbr macro
.39630f	48		pha		                PHA             ; begin setdp macro
.396310	08		php		                PHP
.396311	c2 20		rep #$20	                REP #$20        ; set A long
.396313	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396316	5b		tcd		                TCD
.396317	28		plp		                PLP
.396318	68		pla		                PLA             ; end setdp macro
.396319	e2 30		sep #$30	                SEP #$30        ; set A&X short
.39631b	e0 01		cpx #$01	                    CPX #FDC_DEVCMD_MOTOR_ON
.39631d	f0 0f		beq $39632e	                    BEQ motor_on
.39631f	e0 02		cpx #$02	                    CPX #FDC_DEVCMD_MOTOR_OFF
.396321	f0 11		beq $396334	                    BEQ motor_off
.396323	e0 03		cpx #$03	                    CPX #FDC_DEVCMD_RECAL
.396325	f0 13		beq $39633a	                    BEQ recalibrate
.396327	64 20		stz $0320	ret_success         STZ BIOS_STATUS
.396329	28		plp		                    PLP
.39632a	2b		pld		                    PLD
.39632b	ab		plb		                    PLB
.39632c	38		sec		                    SEC
.39632d	6b		rtl		                    RTL
.39632e	22 16 5d 39	jsl $395d16	motor_on            JSL FDC_Motor_On
.396332	80 f3		bra $396327	                    BRA ret_success
.396334	22 44 5d 39	jsl $395d44	motor_off           JSL FDC_Motor_Off
.396338	80 ed		bra $396327	                    BRA ret_success
.39633a	22 6f 5d 39	jsl $395d6f	recalibrate         JSL FDC_Recalibrate_Command
.39633e	b0 e7		bcs $396327	                    BCS ret_success
.396340	28		plp		pass_failure        PLP
.396341	2b		pld		                    PLD
.396342	ab		plb		                    PLB
.396343	18		clc		                    CLC
.396344	6b		rtl		                    RTL
.396345					FDC_CHK_MEDIA
.396345	0b		phd		                    PHD
.396346	08		php		                    PHP
.396347	48		pha		                PHA             ; begin setdp macro
.396348	08		php		                PHP
.396349	c2 20		rep #$20	                REP #$20        ; set A long
.39634b	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39634e	5b		tcd		                TCD
.39634f	28		plp		                PLP
.396350	68		pla		                PLA             ; end setdp macro
.396351	22 16 5d 39	jsl $395d16	                    JSL FDC_Motor_On                ; Turn on the motor
.396355	e2 20		sep #$20	                SEP #$20        ; set A short
.396357	af f7 13 af	lda $af13f7	                    LDA @l SIO_FDC_DIR              ; Check if the DSKCHG bit is set
.39635b	89 80		bit #$80	                    BIT #FDC_DIR_DSKCHG
.39635d	f0 42		beq $3963a1	                    BEQ ret_true                    ; If not: assume the disk is present
.39635f	a9 00		lda #$00	                    LDA #0
.396361	85 00		sta $0300	                    STA FDC_DRIVE
.396363	a9 00		lda #$00	                    LDA #0
.396365	85 01		sta $0301	                    STA FDC_HEAD
.396367	a9 50		lda #$50	                    LDA #80
.396369	85 02		sta $0302	                    STA FDC_CYLINDER
.39636b	22 08 5f 39	jsl $395f08	                    JSL FDC_Seek_Track              ; Attempt to seek to track 80
.39636f	90 34		bcc $3963a5	                    BCC ret_false                   ; If fail: return false
.396371	c2 10		rep #$10	                REP #$10        ; set X long
.396373	a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.396376	a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.396379	22 ee 14 39	jsl $3914ee	                    JSL IDELAY
.39637d	22 a4 5d 39	jsl $395da4	                    JSL FDC_Sense_Int_Status
.396381	a5 06		lda $0306	                    LDA FDC_ST0
.396383	29 d0		and #$d0	                    AND #%11010000
.396385	d0 1e		bne $3963a5	                    BNE ret_false
.396387	22 6f 5d 39	jsl $395d6f	                    JSL FDC_Recalibrate_Command     ; Attempt to recalibrate
.39638b	90 18		bcc $3963a5	                    BCC ret_false                   ; If fail: return false
.39638d	a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.396390	a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.396393	22 ee 14 39	jsl $3914ee	                    JSL IDELAY
.396397	22 a4 5d 39	jsl $395da4	                    JSL FDC_Sense_Int_Status
.39639b	a5 06		lda $0306	                    LDA FDC_ST0
.39639d	29 d0		and #$d0	                    AND #%11010000
.39639f	d0 04		bne $3963a5	                    BNE ret_false
.3963a1					ret_true
.3963a1	28		plp		                    PLP
.3963a2	2b		pld		                    PLD
.3963a3	38		sec		                    SEC
.3963a4	6b		rtl		                    RTL
.3963a5					ret_false
.3963a5	28		plp		                    PLP
.3963a6	2b		pld		                    PLD
.3963a7	18		clc		                    CLC
.3963a8	6b		rtl		                    RTL
.3963a9					FDC_WRITEVBR
.3963a9	8b		phb		                    PHB
.3963aa	0b		phd		                    PHD
.3963ab	08		php		                    PHP
.3963ac	48		pha		                PHA             ; begin setdbr macro
.3963ad	08		php		                PHP
.3963ae	e2 20		sep #$20	                SEP #$20        ; set A short
.3963b0	a9 00		lda #$00	                LDA #0
.3963b2	48		pha		                PHA
.3963b3	ab		plb		                PLB
.3963b4	28		plp		                PLP
.3963b5	68		pla		                PLA             ; end setdbr macro
.3963b6	48		pha		                PHA             ; begin setdp macro
.3963b7	08		php		                PHP
.3963b8	c2 20		rep #$20	                REP #$20        ; set A long
.3963ba	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3963bd	5b		tcd		                TCD
.3963be	28		plp		                PLP
.3963bf	68		pla		                PLA             ; end setdp macro
.3963c0	22 dc 61 39	jsl $3961dc	                    JSL FDC_MOUNT               ; Mount the floppy disk
.3963c4	c2 30		rep #$30	                REP #$30        ; set A&X long
.3963c6	a9 00 00	lda #$0000	                    LDA #0                      ; Clear the sector buffer
.3963c9	a2 00 00	ldx #$0000	                    LDX #0
.3963cc	9f 00 e3 38	sta $38e300,x	clr_loop            STA DOS_SECTOR,X
.3963d0	e8		inx		                    INX
.3963d1	e8		inx		                    INX
.3963d2	e0 00 02	cpx #$0200	                    CPX #512
.3963d5	d0 f5		bne $3963cc	                    BNE clr_loop
.3963d7	e2 20		sep #$20	                SEP #$20        ; set A short
.3963d9	a2 00 00	ldx #$0000	                    LDX #0                      ; Copy the prototype VBR to the sector buffer
.3963dc	bf 42 64 39	lda $396442,x	copy_loop           LDA FDC_VBR_BEGIN,X
.3963e0	9f 00 e3 38	sta $38e300,x	                    STA DOS_SECTOR,X
.3963e4	e8		inx		                    INX
.3963e5	e0 c9 00	cpx #$00c9	                    CPX #<>(FDC_VBR_END - FDC_VBR_BEGIN + 1)
.3963e8	d0 f2		bne $3963dc	                    BNE copy_loop
.3963ea	a0 00 00	ldy #$0000	                    LDY #0                      ; Copy the boot binary path to the VBR
.3963ed	a2 40 00	ldx #$0040	                    LDX #FDC_VBR_PATH
.3963f0	b7 3c		lda [$035c],y	path_copy_loop      LDA [DOS_RUN_PTR],Y
.3963f2	9f 00 e3 38	sta $38e300,x	                    STA DOS_SECTOR,X
.3963f6	f0 07		beq $3963ff	                    BEQ path_copy_done
.3963f8	e8		inx		                    INX
.3963f9	c8		iny		                    INY
.3963fa	c0 80 00	cpy #$0080	                    CPY #128
.3963fd	d0 f1		bne $3963f0	                    BNE path_copy_loop
.3963ff					path_copy_done
.3963ff	c2 20		rep #$20	                REP #$20        ; set A long
.396401	a9 55 aa	lda #$aa55	                    LDA #$AA55                  ; Set the VBR signature bytes at the end
.396404	8f fe e4 38	sta $38e4fe	                    STA DOS_SECTOR+BPB_SIGNATURE
.396408	c2 20		rep #$20	                REP #$20        ; set A long
.39640a	a9 00 e3	lda #$e300	                    LDA #<>DOS_SECTOR           ; Point to the BIOS buffer
.39640d	85 06		sta $0326	                    STA BIOS_BUFF_PTR
.39640f	a9 38 00	lda #$0038	                    LDA #`DOS_SECTOR
.396412	85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.396414	a9 01 00	lda #$0001	                    LDA #1                      ; Set the sector to #1 (boot record)
.396417	85 02		sta $0322	                    STA BIOS_LBA
.396419	a9 00 00	lda #$0000	                    LDA #0
.39641c	85 02		sta $0322	                    STA BIOS_LBA
.39641e	e2 20		sep #$20	                SEP #$20        ; set A short
.396420	a9 00		lda #$00	                    LDA #BIOS_DEV_FDC
.396422	85 01		sta $0321	                    STA BIOS_DEV
.396424	22 24 10 38	jsl $381024	                    JSL PUTBLOCK                ; Attempt to write the boot record
.396428	b0 09		bcs $396433	                    BCS ret_success
.39642a	22 44 5d 39	jsl $395d44	                    JSL FDC_Motor_Off
.39642e	28		plp		                    PLP                         ; Return the failure
.39642f	2b		pld		                    PLD
.396430	ab		plb		                    PLB
.396431	18		clc		                    CLC
.396432	6b		rtl		                    RTL
.396433	22 44 5d 39	jsl $395d44	ret_success         JSL FDC_Motor_Off
.396437	e2 20		sep #$20	                SEP #$20        ; set A short
.396439	a9 00		lda #$00	                    LDA #0
.39643b	85 00		sta $0320	                    STA BIOS_STATUS
.39643d	28		plp		                    PLP
.39643e	2b		pld		                    PLD
.39643f	ab		plb		                    PLB
.396440	38		sec		                    SEC
.396441	6b		rtl		                    RTL
=62					FDC_BOOT_START = 62                         ; Entry point to the boot code
=64					FDC_VBR_PATH = 64                           ; Offset to the path in the VBR
.396442					FDC_VBR_BEGIN
>396442	eb 00 90			start               .byte $EB, $00, $90     ; Entry point
>396445	43 32 35 36 44 4f 53 20		magic               .text "C256DOS "        ; OEM name / magic text for booting
>39644d	00 02				bytes_per_sec       .word 512               ; How many bytes per sector
>39644f	01				sec_per_cluster     .byte 1                 ; How many sectors per cluster
>396450	01 00				rsrv_sectors        .word 1                 ; Number of reserved sectors
>396452	02				num_fat             .byte 2                 ; Number of FATs
>396453	e0 00				max_dir_entry       .word (32-18)*16        ; Total number of root dir entries
>396455	40 0b				total_sectors       .word 2880              ; Total sectors
>396457	f0				media_descriptor    .byte $F0               ; 3.5" 1.44 MB floppy 80 tracks, 18 tracks per sector
>396458	09 00				sec_per_fat         .word 9                 ; Sectors per FAT
>39645a	12 00				sec_per_track       .word 18                ; Sectors per track
>39645c	02 00				num_head            .word 2                 ; Number of heads
>39645e	00 00 00 00			ignore2             .dword 0
>396462	00 00 00 00			fat32_sector        .dword 0                ; # of sectors in FAT32
>396466	00 00				ignore3             .word 0
>396468	29				boot_signature      .byte $29
>396469	78 56 34 12			volume_id           .dword $12345678        ; Replaced by code
>39646d	55 4e 54 49 54 4c 45 44		volume_name         .text "UNTITLED   "     ; Replace by code
>396475	20 20 20
>396478	46 41 54 31 32 20 20 20		fs_type             .text "FAT12   "
.396480	80 40		bra $3964c2	                    BRA vbr_start
>396482					file_path           .fill 64                ; Reserve 64 bytes for a path and any options
.3964c2					vbr_start
.3964c2	c2 20		rep #$20	                REP #$20        ; set A long
.3964c4	a9 40 e3	lda #$e340	                    LDA #<>(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.3964c7	8f 60 03 00	sta $000360	                    STA @l DOS_RUN_PARAM
.3964cb	a9 38 00	lda #$0038	                    LDA #`(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.3964ce	8f 62 03 00	sta $000362	                    STA @l DOS_RUN_PARAM+2
.3964d2	22 91 56 39	jsl $395691	                    JSL IF_RUN              ; And try to execute the binary file
.3964d6	b0 0c		bcs $3964e4	                    BCS lock                ; If it returned success... lock up... I guess?
.3964d8					error
.3964d8	e2 20		sep #$20	                SEP #$20        ; set A short
.3964da	4b		phk		                    PHK                     ; Otherwise, print an error message
.3964db	ab		plb		                    PLB
.3964dc	62 08 00	per $3964e7	                    PER message
.3964df	fa		plx		                    PLX
.3964e0	22 1c 10 38	jsl $38101c	                    JSL PUTS
.3964e4	ea		nop		lock                NOP                     ; And lock up
.3964e5	80 fd		bra $3964e4	                    BRA lock
>3964e7	43 6f 75 6c 64 20 6e 6f		message             .null "Could not find a bootable binary.",13
>3964ef	74 20 66 69 6e 64 20 61 20 62 6f 6f 74 61 62 6c
>3964ff	65 20 62 69 6e 61 72 79 2e 0d 00
.39650a					FDC_VBR_END

;******  Return to file: src\kernel.asm


;******  Processing file: src\ide_library.asm

.0000					IDE_ID
>0000	00 00				General_Config        .word $0000
>0002	00 00				Obsolete0             .word $0000
>0004	00 00				Specific_Config       .word $0000
>0006	00 00				Obsolete1             .word $0000
>0008	00 00				Retired0              .word $0000
>000a	00 00				Retired1              .word $0000
>000c	00 00				Obsolete2             .word $0000
>000e	00 00				Reserved_CFlash0      .word $0000
>0010	00 00				Reserved_CFlash1      .word $0000
>0012	00 00				Retired2              .word $0000
>0014	00 00 00 00 00 00 00 00		Serial_Number_String  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>001c	00 00 00 00 00 00 00 00 00 00 00 00
>0028	00 00 00 00			Retired3              .word $0000, $0000
>002c	00 00				Obsolete3             .word $0000
>002e	00 00 00 00 00 00 00 00		Firmware_Rev_String   .byte $00, $00, $00, $00, $00, $00, $00, $00
>0036	00 00 00 00 00 00 00 00		Model_Number_String   .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>003e	00 00 00 00 00 00 00 00
>0046	00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>004e	00 00 00 00 00 00 00 00
>0056	00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00
>005e	00 00				Max_Number_Logic_Sec  .word $0000
>0060	00 00				Trusted_Comp_Feature  .word $0000
>0062	00 00 00 00			Capabilities          .word $0000, $0000
>0066	00 00 00 00			Obsolete4             .word $0000, $0000
>006a	00 00				Free_Fall_Control     .word $0000
>006c	00 00 00 00 00 00 00 00		Obsolete5             .word $0000, $0000, $0000, $0000, $0000
>0074	00 00
>0076	00 00				Reserved0             .word $0000
>0078	00 00 00 00			Total_Addy_Logic_Sec  .word $0000, $0000
>007c	00 00				Obsolete6             .word $0000
>007e	00 00 00 00			Reserved1             .word $0000, $0000
>0082	00 00				Min_Multiword_DMA_Trf .word $0000
>0084	00 00				Manu_Recommended_Mult .word $0000
>0086	00 00				Min_PIO_Trf           .word $0000      ; Word 67
>0088	00 00				Min_PIO_Trf_with_IORD .word $0000      ; Word 68
>008a	00 00 00 00			Reserved2             .word $0000, $0000
>008e	00 00 00 00 00 00 00 00		Reserved3             .word $0000, $0000, $0000, $0000
>0096	00 00				Queue_Dept            .word $0000
>0098	00 00				SATA_Capabilities     .word $0000
>009a	00 00				Reserved_SATA         .word $0000
>009c	00 00				Sup_Feat_SATA         .word $0000
>009e	00 00				Sup_Feat_SATA_Enabled .word $0000    ; Word 79
>00a0	00 00				Major_Version_Number  .word $0000    ; Word 80
>00a2	00 00				Minor_Version_Number  .word $0000    ; Word 81
>00a4	00 00 00 00 00 00 00 00		Cmd_And_Features_Sup  .word $0000, $0000, $0000, $0000, $0000, $0000
>00ac	00 00 00 00
>00b0	00 00				UDMA_Modes            .word $0000
>00b2	00 00 00 00			Reserved4             .word $0000, $0000 ; Word 89
>00b6	00 00				Current_APM_Level     .word $0000
>00b8	00 00				Master_Password_Ident .word $0000
>00ba	00 00				Hardware_Reset_Result .word $0000
>00bc	00 00				Current_AAM_Value     .word $0000  ; Word 94
>00be	00 00				Stream_Min_Req_Size   .word $0000  ; Word 95
>00c0	00 00				Stream_Trf_Time_DMA   .word $0000  ; Word 96
>00c2	00 00				Stream_Access_Lat     .word $0000
>00c4	00 00 00 00			Streaming_Perf_Gran   .word $0000, $0000
>00c8	00 00 00 00 00 00 00 00		Tot_Num_Add_Logic_Sec .word $0000, $0000, $0000, $0000
>00d0	00 00				Streaming_Trf_Time    .word $0000 ; Word 104
>00d2	00 00				Reserved5             .word $0000 ; Word 105
.39650a					IDE_TEST
.39650a	08		php		                PHP
.39650b	c2 20		rep #$20	                REP #$20        ; set A long
.39650d	a9 00 e3	lda #$e300	                LDA #<>DOS_SECTOR
.396510	8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.396514	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.396517	8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.39651b	22 38 66 39	jsl $396638	                JSL IDE_IDENTIFY
.39651f	b0 03		bcs $396524	                BCS id_ok
.396521	82 ab 00	brl $3965cf	                BRL done
.396524					id_ok
.396524	c2 10		rep #$10	                REP #$10        ; set X long
.396526	e2 20		sep #$20	                SEP #$20        ; set A short
.396528	a0 28 00	ldy #$0028	                LDY #40
.39652b	a2 36 00	ldx #$0036	                LDX #27*2
.39652e	bf 01 e3 38	lda $38e301,x	pr_model        LDA DOS_SECTOR+1,X
.396532	22 18 10 38	jsl $381018	                JSL PUTC
.396536	bf 00 e3 38	lda $38e300,x	                LDA DOS_SECTOR,X
.39653a	22 18 10 38	jsl $381018	                JSL PUTC
.39653e	e8		inx		                INX
.39653f	e8		inx		                INX
.396540	88		dey		                DEY
.396541	88		dey		                DEY
.396542	d0 ea		bne $39652e	                BNE pr_model
.396544	c2 10		rep #$10	                REP #$10        ; set X long
.396546	e2 20		sep #$20	                SEP #$20        ; set A short
.396548	a0 14 00	ldy #$0014	                LDY #20
.39654b	a2 14 00	ldx #$0014	                LDX #10*2
.39654e	bf 01 e3 38	lda $38e301,x	pr_serial       LDA DOS_SECTOR+1,X
.396552	22 18 10 38	jsl $381018	                JSL PUTC
.396556	bf 00 e3 38	lda $38e300,x	                LDA DOS_SECTOR,X
.39655a	22 18 10 38	jsl $381018	                JSL PUTC
.39655e	e8		inx		                INX
.39655f	e8		inx		                INX
.396560	88		dey		                DEY
.396561	88		dey		                DEY
.396562	d0 ea		bne $39654e	                BNE pr_serial
.396564	22 6c 10 38	jsl $38106c	                JSL PRINTCR
.396568	c2 30		rep #$30	                REP #$30        ; set A&X long
.39656a	a9 01 00	lda #$0001	                LDA #1                 ; Set LBA = 1
.39656d	8f 22 03 00	sta $000322	                STA @l BIOS_LBA
.396571	a9 00 00	lda #$0000	                LDA #0
.396574	8f 24 03 00	sta $000324	                STA @l BIOS_LBA+2
.396578	a9 00 e3	lda #$e300	                LDA #<>DOS_SECTOR
.39657b	8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.39657f	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.396582	8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.396586	a2 00 00	ldx #$0000	                LDX #0                  ; Initialize the block to some recognizable data
.396589	a9 a5 5a	lda #$5aa5	                LDA #$5AA5
.39658c	9f 00 e3 38	sta $38e300,x	init_loop       STA DOS_SECTOR,X
.396590	e8		inx		                INX
.396591	e8		inx		                INX
.396592	e0 00 02	cpx #$0200	                CPX #512
.396595	d0 f5		bne $39658c	                BNE init_loop
.396597	22 57 67 39	jsl $396757	                JSL IDE_PUTBLOCK        ; Attempt to write the block
.39659b	b0 06		bcs $3965a3	                BCS read_sect1
.39659d	22 6c 10 38	jsl $38106c	                JSL PRINTCR
.3965a1	80 2c		bra $3965cf	                BRA done
.3965a3	a9 01 00	lda #$0001	read_sect1      LDA #1                 ; Set LBA = 1
.3965a6	8f 22 03 00	sta $000322	                STA @l BIOS_LBA
.3965aa	a9 00 00	lda #$0000	                LDA #0
.3965ad	8f 24 03 00	sta $000324	                STA @l BIOS_LBA+2
.3965b1	a9 00 e5	lda #$e500	                LDA #<>DOS_FAT_SECTORS
.3965b4	8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.3965b8	a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.3965bb	8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.3965bf	22 c6 66 39	jsl $3966c6	                JSL IDE_GETBLOCK        ; Attempt to read the block
.3965c3	b0 06		bcs $3965cb	                BCS all_ok
.3965c5	22 6c 10 38	jsl $38106c	                JSL PRINTCR
.3965c9	80 04		bra $3965cf	                BRA done
.3965cb					all_ok
.3965cb	22 6c 10 38	jsl $38106c	                JSL PRINTCR
.3965cf	28		plp		done            PLP
.3965d0	6b		rtl		                RTL
.3965d1					IDE_INIT
.3965d1	e2 20		sep #$20	                SEP #$20        ; set A short
.3965d3	20 f4 65	jsr $3965f4	              JSR IDE_DRIVE_BSY ; Check to see if drive is busy
.3965d6	a9 00		lda #$00	              LDA #$00
.3965d8	8f 35 e8 af	sta $afe835	              STA IDE_CLDR_HI
.3965dc	8f 34 e8 af	sta $afe834	              STA IDE_CLDR_LO
.3965e0	8f 32 e8 af	sta $afe832	              STA IDE_SECT_CNT
.3965e4	a9 01		lda #$01	              LDA #$01
.3965e6	8f 33 e8 af	sta $afe833	              STA IDE_SECT_SRT
.3965ea	a9 a0		lda #$a0	              LDA #$A0 ; HEAD 0 - Select Master Drive
.3965ec	8f 36 e8 af	sta $afe836	              STA IDE_HEAD
.3965f0	20 12 66	jsr $396612	              JSR IDE_DRV_READY_NOTBUSY
.3965f3	6b		rtl		              RTL
.3965f4					IDE_DRIVE_BSY
.3965f4	08		php		                PHP
.3965f5	e2 20		sep #$20	                SEP #$20        ; set A short
.3965f7	af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.3965fb	29 80		and #$80	                AND #IDE_STAT_BSY         ; Check for RDY Bit, this needs to be 1'b1
.3965fd	c9 80		cmp #$80	                CMP #IDE_STAT_BSY         ; If not go read again
.3965ff	f0 f6		beq $3965f7	                BEQ loop
.396601	28		plp		                PLP
.396602	60		rts		                RTS
.396603					IDE_DRIVE_READY
.396603	08		php		                PHP
.396604	e2 20		sep #$20	                SEP #$20        ; set A short
.396606	af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.39660a	29 40		and #$40	                AND #IDE_STAT_DRDY          ; Check to see if the Busy Signal is Cleared
.39660c	c9 40		cmp #$40	                CMP #IDE_STAT_DRDY          ; if it is still one, then go back to read again.
.39660e	d0 f6		bne $396606	                BNE loop
.396610	28		plp		                PLP
.396611	60		rts		                RTS
.396612					IDE_DRV_READY_NOTBUSY
.396612	08		php		                PHP
.396613	e2 20		sep #$20	                SEP #$20        ; set A short
.396615	af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT                 ; Check the status
.396619	29 c0		and #$c0	                AND #IDE_STAT_BSY | IDE_STAT_DRDY
.39661b	c9 40		cmp #$40	                CMP #IDE_STAT_DRDY                  ; Is it READY but not BUSY?
.39661d	d0 f6		bne $396615	                BNE loop                            ; No: keep waiting
.39661f	28		plp		ret_success     PLP                                 ; Return success
.396620	38		sec		                SEC
.396621	60		rts		                RTS
.396622	8f 07 03 00	sta $000307	ret_failure     STA @l FDC_ST1                      ; Save the status code to FDC_ST1
.396626	28		plp		                PLP                                 ; Return failure
.396627	18		clc		                CLC
.396628	60		rts		                RTS
.396629					IDE_NOT_DRQ
.396629	08		php		                PHP
.39662a	e2 20		sep #$20	                SEP #$20        ; set A short
.39662c	af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT     ; Get the status
.396630	29 08		and #$08	                AND #IDE_STAT_DRQ
.396632	c9 08		cmp #$08	                CMP #IDE_STAT_DRQ       ; Is the DRQ bit set?
.396634	d0 f6		bne $39662c	                BNE loop                ; No: keep waiting
.396636	28		plp		                PLP
.396637	60		rts		                RTS
.396638					IDE_IDENTIFY
.396638	5a		phy		                PHY
.396639	8b		phb		                PHB
.39663a	0b		phd		                PHD
.39663b	08		php		                PHP
.39663c	48		pha		                PHA             ; begin setdbr macro
.39663d	08		php		                PHP
.39663e	e2 20		sep #$20	                SEP #$20        ; set A short
.396640	a9 00		lda #$00	                LDA #0
.396642	48		pha		                PHA
.396643	ab		plb		                PLB
.396644	28		plp		                PLP
.396645	68		pla		                PLA             ; end setdbr macro
.396646	48		pha		                PHA             ; begin setdp macro
.396647	08		php		                PHP
.396648	c2 20		rep #$20	                REP #$20        ; set A long
.39664a	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39664d	5b		tcd		                TCD
.39664e	28		plp		                PLP
.39664f	68		pla		                PLA             ; end setdp macro
.396650	e2 20		sep #$20	                SEP #$20        ; set A short
.396652	20 12 66	jsr $396612	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.396655	a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.396657	29 07		and #$07	                AND #$07
.396659	09 a0		ora #$a0	                ORA #%10100000                  ; Select DEV=0 and LBA mode = 1
.39665b	8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.39665f	20 12 66	jsr $396612	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.396662	e2 20		sep #$20	                SEP #$20        ; set A short
.396664	a9 00		lda #$00	                LDA #0                          ; Clear sector count and LBA
.396666	8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.39666a	8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.39666e	8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.396672	8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.396676	a9 ec		lda #$ec	                LDA #IDE_CMD_IDENTIFY           ; The IDENTIFY command
.396678	8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT             ; Check the status
.39667c	f0 29		beq $3966a7	                BEQ no_media                    ; If 0: there is no drive
.39667e	20 f4 65	jsr $3965f4	                JSR IDE_DRIVE_BSY               ; Othewise: wait for drive to not be busy
.396681	20 12 66	jsr $396612	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396684	90 2d		bcc $3966b3	                BCC ret_failure                 ; If an error occurred, return it
.396686	c2 30		rep #$30	                REP #$30        ; set A&X long
.396688	a0 00 00	ldy #$0000	                LDY #0
.39668b	af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.39668f	97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.396691	c8		iny		                INY                             ; Move to the next position
.396692	c8		iny		                INY
.396693	c0 00 02	cpy #$0200	                CPY #512
.396696	d0 f3		bne $39668b	                BNE read_loop
.396698					ret_success
.396698	e2 20		sep #$20	                SEP #$20        ; set A short
.39669a	a9 00		lda #$00	                LDA #0
.39669c	85 00		sta $0320	                STA BIOS_STATUS
.39669e	8d 06 03	sta $0306	                STA @w FDC_ST0
.3966a1	28		plp		                PLP                             ; Return success
.3966a2	2b		pld		                PLD
.3966a3	ab		plb		                PLB
.3966a4	7a		ply		                PLY
.3966a5	38		sec		                SEC
.3966a6	6b		rtl		                RTL
.3966a7					no_media
.3966a7	e2 20		sep #$20	                SEP #$20        ; set A short
.3966a9	a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA
.3966ab	80 0a		bra $3966b7	                BRA pass_failure
.3966ad					not_ata
.3966ad	e2 20		sep #$20	                SEP #$20        ; set A short
.3966af	a9 8a		lda #$8a	                LDA #BIOS_ERR_NOTATA
.3966b1	80 04		bra $3966b7	                BRA pass_failure
.3966b3					ret_failure
.3966b3	e2 20		sep #$20	                SEP #$20        ; set A short
.3966b5	a9 82		lda #$82	                LDA #BIOS_ERR_READ
.3966b7	85 00		sta $0320	pass_failure    STA BIOS_STATUS
.3966b9	af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.3966bd	8d 06 03	sta $0306	                STA @w FDC_ST0
.3966c0	28		plp		                PLP
.3966c1	2b		pld		                PLD
.3966c2	ab		plb		                PLB
.3966c3	7a		ply		                PLY
.3966c4	18		clc		                CLC
.3966c5	6b		rtl		                RTL
.3966c6					IDE_GETBLOCK
.3966c6	5a		phy		                PHY
.3966c7	8b		phb		                PHB
.3966c8	0b		phd		                PHD
.3966c9	08		php		                PHP
.3966ca	48		pha		                PHA             ; begin setdbr macro
.3966cb	08		php		                PHP
.3966cc	e2 20		sep #$20	                SEP #$20        ; set A short
.3966ce	a9 00		lda #$00	                LDA #0
.3966d0	48		pha		                PHA
.3966d1	ab		plb		                PLB
.3966d2	28		plp		                PLP
.3966d3	68		pla		                PLA             ; end setdbr macro
.3966d4	48		pha		                PHA             ; begin setdp macro
.3966d5	08		php		                PHP
.3966d6	c2 20		rep #$20	                REP #$20        ; set A long
.3966d8	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3966db	5b		tcd		                TCD
.3966dc	28		plp		                PLP
.3966dd	68		pla		                PLA             ; end setdp macro
.3966de	e2 20		sep #$20	                SEP #$20        ; set A short
.3966e0	20 12 66	jsr $396612	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.3966e3	a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.3966e5	29 07		and #$07	                AND #$07
.3966e7	09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.3966e9	8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.3966ed	20 12 66	jsr $396612	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.3966f0	e2 20		sep #$20	                SEP #$20        ; set A short
.3966f2	a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.3966f4	8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.3966f8	a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.3966fa	8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.3966fe	a5 03		lda $0323	                LDA BIOS_LBA+1
.396700	8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.396704	a5 04		lda $0324	                LDA BIOS_LBA+2
.396706	8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.39670a	a9 21		lda #$21	                LDA #IDE_CMD_READ_SECTOR        ; The READ SECTOR command
.39670c	8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.396710	ea		nop		                NOP                             ; Wait about 500ns
.396711	ea		nop		                NOP
.396712	ea		nop		                NOP
.396713	ea		nop		                NOP
.396714	20 12 66	jsr $396612	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396717	90 2b		bcc $396744	                BCC ret_failure                 ; If an error occurred, return it
.396719	e2 20		sep #$20	                SEP #$20        ; set A short
.39671b	af 30 e8 af	lda $afe830	                LDA @l IDE_DATA                 ; Read and toss out one byte from the 8-bit interface
.39671f	a0 00 00	ldy #$0000	                LDY #0
.396722	c2 20		rep #$20	                REP #$20        ; set A long
.396724	af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.396728	97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.39672a	c8		iny		                INY                             ; Move to the next position
.39672b	c8		iny		                INY
.39672c	c0 00 02	cpy #$0200	                CPY #512
.39672f	d0 f3		bne $396724	                BNE read_loop
.396731	ea		nop		                NOP                             ; Wait about 500ns
.396732	ea		nop		                NOP
.396733	ea		nop		                NOP
.396734	ea		nop		                NOP
.396735					ret_success
.396735	e2 20		sep #$20	                SEP #$20        ; set A short
.396737	a9 00		lda #$00	                LDA #0
.396739	85 00		sta $0320	                STA BIOS_STATUS
.39673b	8d 06 03	sta $0306	                STA @w FDC_ST0
.39673e	28		plp		                PLP                             ; Return success
.39673f	2b		pld		                PLD
.396740	ab		plb		                PLB
.396741	7a		ply		                PLY
.396742	38		sec		                SEC
.396743	6b		rtl		                RTL
.396744					ret_failure
.396744	e2 20		sep #$20	                SEP #$20        ; set A short
.396746	af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.39674a	8d 06 03	sta $0306	                STA @w FDC_ST0
.39674d	a9 82		lda #$82	                LDA #BIOS_ERR_READ
.39674f	85 00		sta $0320	                STA BIOS_STATUS
.396751	28		plp		                PLP
.396752	2b		pld		                PLD
.396753	ab		plb		                PLB
.396754	7a		ply		                PLY
.396755	18		clc		                CLC
.396756	6b		rtl		                RTL
.396757					IDE_PUTBLOCK
.396757	5a		phy		                PHY
.396758	8b		phb		                PHB
.396759	0b		phd		                PHD
.39675a	08		php		                PHP
.39675b	48		pha		                PHA             ; begin setdbr macro
.39675c	08		php		                PHP
.39675d	e2 20		sep #$20	                SEP #$20        ; set A short
.39675f	a9 00		lda #$00	                LDA #0
.396761	48		pha		                PHA
.396762	ab		plb		                PLB
.396763	28		plp		                PLP
.396764	68		pla		                PLA             ; end setdbr macro
.396765	48		pha		                PHA             ; begin setdp macro
.396766	08		php		                PHP
.396767	c2 20		rep #$20	                REP #$20        ; set A long
.396769	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39676c	5b		tcd		                TCD
.39676d	28		plp		                PLP
.39676e	68		pla		                PLA             ; end setdp macro
.39676f	e2 20		sep #$20	                SEP #$20        ; set A short
.396771	20 12 66	jsr $396612	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.396774	a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.396776	29 07		and #$07	                AND #$07
.396778	09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.39677a	8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.39677e	20 12 66	jsr $396612	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.396781	e2 20		sep #$20	                SEP #$20        ; set A short
.396783	a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.396785	8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.396789	a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.39678b	8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.39678f	a5 03		lda $0323	                LDA BIOS_LBA+1
.396791	8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.396795	a5 04		lda $0324	                LDA BIOS_LBA+2
.396797	8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.39679b	a9 30		lda #$30	                LDA #IDE_CMD_WRITE_SECTOR       ; The READ SECTOR command
.39679d	8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.3967a1	ea		nop		                NOP                             ; Wait about 500ns
.3967a2	ea		nop		                NOP
.3967a3	ea		nop		                NOP
.3967a4	ea		nop		                NOP
.3967a5	20 12 66	jsr $396612	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.3967a8	90 33		bcc $3967dd	                BCC ret_failure                 ; If an error occurred, return it
.3967aa	c2 30		rep #$30	                REP #$30        ; set A&X long
.3967ac	a0 00 00	ldy #$0000	                LDY #0
.3967af	b7 06		lda [$0326],y	read_loop       LDA [BIOS_BUFF_PTR],Y           ; Get the word from the buffer
.3967b1	8f 38 e8 af	sta $afe838	                STA @l IDE_DATA_LO              ; Save the word to the device
.3967b5	c8		iny		                INY                             ; Move to the next position
.3967b6	c8		iny		                INY
.3967b7	c0 00 02	cpy #$0200	                CPY #512
.3967ba	d0 f3		bne $3967af	                BNE read_loop
.3967bc	ea		nop		                NOP                             ; Wait about 500ns
.3967bd	ea		nop		                NOP
.3967be	ea		nop		                NOP
.3967bf	ea		nop		                NOP
.3967c0	20 12 66	jsr $396612	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.3967c3	90 18		bcc $3967dd	                BCC ret_failure                 ; If an error occurred, return it
.3967c5	af 37 e8 af	lda $afe837	                LDA @l IDE_CMD_STAT             ; Check the status
.3967c9	89 21 00	bit #$0021	                BIT #IDE_STAT_ERR | IDE_STAT_DF
.3967cc	d0 0f		bne $3967dd	                BNE ret_failure                 ; If error: return failure
.3967ce					ret_success
.3967ce	e2 20		sep #$20	                SEP #$20        ; set A short
.3967d0	a9 00		lda #$00	                LDA #0
.3967d2	85 00		sta $0320	                STA BIOS_STATUS
.3967d4	8d 06 03	sta $0306	                STA @w FDC_ST0
.3967d7	28		plp		                PLP                             ; Return success
.3967d8	2b		pld		                PLD
.3967d9	ab		plb		                PLB
.3967da	7a		ply		                PLY
.3967db	38		sec		                SEC
.3967dc	6b		rtl		                RTL
.3967dd					ret_failure
.3967dd	e2 20		sep #$20	                SEP #$20        ; set A short
.3967df	af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.3967e3	8d 06 03	sta $0306	                STA @w FDC_ST0
.3967e6	a9 82		lda #$82	                LDA #BIOS_ERR_READ
.3967e8	85 00		sta $0320	                STA BIOS_STATUS
.3967ea	28		plp		                PLP
.3967eb	2b		pld		                PLD
.3967ec	ab		plb		                PLB
.3967ed	7a		ply		                PLY
.3967ee	18		clc		                CLC
.3967ef	6b		rtl		                RTL

;******  Return to file: src\kernel.asm

.3967f0					KERNEL_DATA
>3967f0	20 20 20 20 0b 0c 0b 0c		greet_msg       .text $20, $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, " FFFFFFF MMMMMMMM XX    XXX " ,$0D
>3967f8	0b 0c 0b 0c 0b 0c 20 46 46 46 46 46 46 46 20 4d
>396808	4d 4d 4d 4d 4d 4d 4d 20 58 58 20 20 20 20 58 58
>396818	58 20 0d
>39681b	20 20 20 0b 0c 0b 0c 0b		                .text $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM   XX XXX   ",$0D
>396823	0c 0b 0c 0b 0c 20 46 46 20 20 20 20 20 20 4d 4d
>396833	20 4d 4d 20 4d 4d 20 20 20 58 58 20 58 58 58 20
>396843	20 20 0d
>396846	20 20 0b 0c 0b 0c 0b 0c		                .text $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FFFFF   MM MM MM    XXX      ",$0D
>39684e	0b 0c 0b 0c 20 46 46 46 46 46 20 20 20 4d 4d 20
>39685e	4d 4d 20 4d 4d 20 20 20 20 58 58 58 20 20 20 20
>39686e	20 20 0d
>396871	20 0b 0c 0b 0c 0b 0c 0b		                .text $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM  XXX  XX     ",$0D
>396879	0c 0b 0c 20 46 46 20 20 20 20 20 20 4d 4d 20 4d
>396889	4d 20 4d 4d 20 20 58 58 58 20 20 58 58 20 20 20
>396899	20 20 0d
>39689c	0b 0c 0b 0c 0b 0c 0b 0c		                .text $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM XXX     XX    ",$0D
>3968a4	0b 0c 20 46 46 20 20 20 20 20 20 4d 4d 20 4d 4d
>3968b4	20 4d 4d 20 58 58 58 20 20 20 20 20 58 58 20 20
>3968c4	20 20 0d
>3968c7	0d 43 32 35 36 20 46 4f		                .text $0D, "C256 FOENIX FMX -- 3,670,016 Bytes Free", $0D
>3968cf	45 4e 49 58 20 46 4d 58 20 2d 2d 20 33 2c 36 37
>3968df	30 2c 30 31 36 20 42 79 74 65 73 20 46 72 65 65
>3968ef	0d
>3968f0	77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com - Kernel version: "
>3968f8	66 6f 65 6e 69 78 2e 63 6f 6d 20 2d 20 4b 65 72
>396908	6e 65 6c 20 76 65 72 73 69 6f 6e 3a 20

;******  Processing file: src\version.asm

>396915	76 30 2e 31 2e 30 2d 61		.text "v0.1.0-alpha+667 (2020-06-02)"
>39691d	6c 70 68 61 2b 36 36 37 20 28 32 30 32 30 2d 30
>39692d	36 2d 30 32 29

;******  Return to file: src\kernel.asm

>396932	0d 00				                .text $0D,$00
.396934					old_pc_style_stat
>396934	1d 1d 1d 1d 1d 1d 8d 8d		greet_clr_line1 .text $1D, $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>39693c	4d 4d 2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd
>39694c	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>39695c	fd fd
>39695e	1d 1d 1d 1d 1d 8d 8d 4d		greet_clr_line2 .text $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>396966	4d 2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd
>396976	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396986	fd fd
>396988	1d 1d 1d 1d 8d 8d 4d 4d		greet_clr_line3 .text $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>396990	2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd fd
>3969a0	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3969b0	fd fd
>3969b2	1d 1d 1d 8d 8d 4d 4d 2d		greet_clr_line4 .text $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>3969ba	2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd fd fd
>3969ca	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3969da	fd fd
>3969dc	1d 1d 8d 8d 4d 4d 2d 2d		greet_clr_line5 .text $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>3969e4	5d 5d fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3969f4	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396a04	fd fd
>396a06	00 00 00 ff			fg_color_lut	  .text $00, $00, $00, $FF
>396a0a	00 00 80 ff			                .text $00, $00, $80, $FF
>396a0e	00 80 00 ff			                .text $00, $80, $00, $FF
>396a12	80 00 00 ff			                .text $80, $00, $00, $FF
>396a16	00 80 80 ff			                .text $00, $80, $80, $FF
>396a1a	80 80 00 ff			                .text $80, $80, $00, $FF
>396a1e	80 00 80 ff			                .text $80, $00, $80, $FF
>396a22	80 80 80 ff			                .text $80, $80, $80, $FF
>396a26	00 45 ff ff			                .text $00, $45, $FF, $FF
>396a2a	13 45 8b ff			                .text $13, $45, $8B, $FF
>396a2e	00 00 20 ff			                .text $00, $00, $20, $FF
>396a32	00 20 00 ff			                .text $00, $20, $00, $FF
>396a36	20 00 00 ff			                .text $20, $00, $00, $FF
>396a3a	20 20 20 ff			                .text $20, $20, $20, $FF
>396a3e	40 40 40 ff			                .text $40, $40, $40, $FF
>396a42	ff ff ff ff			                .text $FF, $FF, $FF, $FF
>396a46	00 00 00 ff			bg_color_lut	  .text $00, $00, $00, $FF
>396a4a	00 00 80 ff			                .text $00, $00, $80, $FF
>396a4e	00 80 00 ff			                .text $00, $80, $00, $FF
>396a52	80 00 00 ff			                .text $80, $00, $00, $FF
>396a56	00 20 20 ff			                .text $00, $20, $20, $FF
>396a5a	20 20 00 ff			                .text $20, $20, $00, $FF
>396a5e	20 00 20 ff			                .text $20, $00, $20, $FF
>396a62	20 20 20 ff			                .text $20, $20, $20, $FF
>396a66	1e 69 d2 ff			                .text $1E, $69, $D2, $FF
>396a6a	13 45 8b ff			                .text $13, $45, $8B, $FF
>396a6e	00 00 20 ff			                .text $00, $00, $20, $FF
>396a72	00 20 00 ff			                .text $00, $20, $00, $FF
>396a76	40 00 00 ff			                .text $40, $00, $00, $FF
>396a7a	10 10 10 ff			                .text $10, $10, $10, $FF
>396a7e	40 40 40 ff			                .text $40, $40, $40, $FF
>396a82	ff ff ff ff			                .text $FF, $FF, $FF, $FF
>396a86	43 6d 64 20 30 78 41 41		pass_tst0xAAmsg .text "Cmd 0xAA Test passed...", $0D, $00
>396a8e	20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>396a9e	00
>396a9f	43 6d 64 20 30 78 41 42		pass_tst0xABmsg .text "Cmd 0xAB Test passed...", $0D, $00
>396aa7	20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>396ab7	00
>396ab8	43 6d 64 20 30 78 36 30		pass_cmd0x60msg .text "Cmd 0x60 Executed.", $0D, $00
>396ac0	20 45 78 65 63 75 74 65 64 2e 0d 00
>396acc	43 6d 64 20 30 78 46 46		pass_cmd0xFFmsg .text "Cmd 0xFF (Reset) Done.", $0D, $00
>396ad4	20 28 52 65 73 65 74 29 20 44 6f 6e 65 2e 0d 00
>396ae4	43 6d 64 20 30 78 45 45		pass_cmd0xEEmsg .text "Cmd 0xEE Echo Test passed...", $0D, $00
>396aec	20 45 63 68 6f 20 54 65 73 74 20 70 61 73 73 65
>396afc	64 2e 2e 2e 0d 00
>396b02	4b 65 79 62 6f 61 72 64		Success_kb_init .text "Keyboard Present", $0D, $00
>396b0a	20 50 72 65 73 65 6e 74 0d 00
>396b14	4e 6f 20 4b 65 79 62 6f		Failed_kb_init  .text "No Keyboard Attached or Failed Init...", $0D, $00
>396b1c	61 72 64 20 41 74 74 61 63 68 65 64 20 6f 72 20
>396b2c	46 61 69 6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>396b3c	4e 4f 20 53 49 47 4e 41		bmp_parser_err0 .text "NO SIGNATURE FOUND.", $00
>396b44	54 55 52 45 20 46 4f 55 4e 44 2e 00
>396b50	42 4d 50 20 4c 4f 41 44		bmp_parser_msg0 .text "BMP LOADED.", $00
>396b58	45 44 2e 00
>396b5c	45 58 45 43 55 54 49 4e		bmp_parser_msg1 .text "EXECUTING BMP PARSER", $00
>396b64	47 20 42 4d 50 20 50 41 52 53 45 52 00
>396b71	49 44 45 20 48 44 44 20		IDE_HDD_Present_msg0 .text "IDE HDD Present:", $00
>396b79	50 72 65 73 65 6e 74 3a 00
>396b82	42 6f 6f 74 20 44 49 50		boot_invalid    .text "Boot DIP switch settings are invalid", $00
>396b8a	20 73 77 69 74 63 68 20 73 65 74 74 69 6e 67 73
>396b9a	20 61 72 65 20 69 6e 76 61 6c 69 64 00
>396ba7	55 6e 61 62 6c 65 20 74		sdc_err_boot    .null "Unable to read the SD card."
>396baf	6f 20 72 65 61 64 20 74 68 65 20 53 44 20 63 61
>396bbf	72 64 2e 00
>396bc3	55 6e 61 62 6c 65 20 74		ide_err_boot    .null "Unable to read from the IDE drive."
>396bcb	6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>396bdb	49 44 45 20 64 72 69 76 65 2e 00
>396be6	55 6e 61 62 6c 65 20 74		fdc_err_boot    .null "Unable to read from the floppy drive."
>396bee	6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>396bfe	66 6c 6f 70 70 79 20 64 72 69 76 65 2e 00
>396c0c	42 6f 6f 74 69 6e 67 20		fdc_boot        .null "Booting from floppy...", 13
>396c14	66 72 6f 6d 20 66 6c 6f 70 70 79 2e 2e 2e 0d 00
>396c24	0d 52 45 41 44 59 2e 00		ready_msg       .null $0D,"READY."
>396c2c	41 42 4f 52 54 20 45 52		error_01        .null "ABORT ERROR"
>396c34	52 4f 52 00
>396c38	30 31 32 33 34 35 36 37		hex_digits      .text "0123456789ABCDEF",0
>396c40	38 39 41 42 43 44 45 46 00
>396c49					.align 256
>396d00	00 1b 31 32 33 34 35 36		ScanCode_Press_Set1   .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>396d08	37 38 39 30 2d 3d 08 09
>396d10	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>396d18	6f 70 5b 5d 0d 00 61 73
>396d20	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>396d28	27 60 00 5c 7a 78 63 76
>396d30	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>396d38	00 20 00 00 00 00 00 00
>396d40	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $11, $00, $00, $9D, $00, $1D, $00, $00    ; $40
>396d48	11 00 00 9d 00 1d 00 00
>396d50	91 00 00 00 00 00 00 00		                      .text $91, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>396d58	00 00 00 00 00 00 00 00
>396d60	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>396d68	00 00 00 00 00 00 00 00
>396d70	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>396d78	00 00 00 00 00 00 00 00
>396d80	00 00 21 40 23 24 25 5e		ScanCode_Shift_Set1   .text $00, $00, $21, $40, $23, $24, $25, $5E, $26, $2A, $28, $29, $5F, $2B, $08, $09    ; $00
>396d88	26 2a 28 29 5f 2b 08 09
>396d90	51 57 45 52 54 59 55 49		                      .text $51, $57, $45, $52, $54, $59, $55, $49, $4F, $50, $7B, $7D, $0D, $00, $41, $53    ; $10
>396d98	4f 50 7b 7d 0d 00 41 53
>396da0	44 46 47 48 4a 4b 4c 3a		                      .text $44, $46, $47, $48, $4A, $4B, $4C, $3A, $22, $7E, $00, $5C, $5A, $58, $43, $56    ; $20
>396da8	22 7e 00 5c 5a 58 43 56
>396db0	42 4e 4d 3c 3e 3f 00 00		                      .text $42, $4E, $4D, $3C, $3E, $3F, $00, $00, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>396db8	00 20 00 00 00 00 00 00
>396dc0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>396dc8	00 00 00 00 00 00 00 00
>396dd0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>396dd8	00 00 00 00 00 00 00 00
>396de0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>396de8	00 00 00 00 00 00 00 00
>396df0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>396df8	00 00 00 00 00 00 00 00
>396e00	00 1b 31 32 33 34 35 36		ScanCode_Ctrl_Set1    .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>396e08	37 38 39 30 2d 3d 08 09
>396e10	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>396e18	6f 70 5b 5d 0d 00 61 73
>396e20	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $03, $76    ; $20
>396e28	27 60 00 5c 7a 78 03 76
>396e30	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>396e38	00 20 00 00 00 00 00 00
>396e40	00 00 00 00 00 18 00 00		                      .text $00, $00, $00, $00, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>396e48	00 00 00 00 00 00 00 00
>396e50	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>396e58	00 00 00 00 00 00 00 00
>396e60	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>396e68	00 00 00 00 00 00 00 00
>396e70	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>396e78	00 00 00 00 00 00 00 00
>396e80	00 1b 31 32 33 34 35 36		ScanCode_Alt_Set1     .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>396e88	37 38 39 30 2d 3d 08 09
>396e90	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>396e98	6f 70 5b 5d 0d 00 61 73
>396ea0	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>396ea8	27 60 00 5c 7a 78 63 76
>396eb0	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>396eb8	00 20 00 00 00 00 00 00
>396ec0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>396ec8	00 00 00 00 00 00 00 00
>396ed0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>396ed8	00 00 00 00 00 00 00 00
>396ee0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>396ee8	00 00 00 00 00 00 00 00
>396ef0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>396ef8	00 00 00 00 00 00 00 00
>396f00	00 1b 31 32 33 34 35 36		ScanCode_NumLock_Set1 .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>396f08	37 38 39 30 2d 3d 08 09
>396f10	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>396f18	6f 70 5b 5d 0d 00 61 73
>396f20	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>396f28	27 60 00 5c 7a 78 63 76
>396f30	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>396f38	00 20 00 00 00 00 00 00
>396f40	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>396f48	00 00 00 00 00 00 00 00
>396f50	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>396f58	00 00 00 00 00 00 00 00
>396f60	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>396f68	00 00 00 00 00 00 00 00
>396f70	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>396f78	00 00 00 00 00 00 00 00
>396f80	00 00 00 00 00 00 00 00		ScanCode_Prefix_Set1  .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $00
>396f88	00 00 00 00 00 00 00 00
>396f90	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $10
>396f98	00 00 00 00 00 00 00 00
>396fa0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $20
>396fa8	00 00 00 00 00 00 00 00
>396fb0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $30
>396fb8	00 00 00 00 00 00 00 00
>396fc0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $11, $00, $00, $9D, $00, $1D, $00, $00    ; $40
>396fc8	11 00 00 9d 00 1d 00 00
>396fd0	91 00 0f 7f 00 00 00 00		                      .text $91, $00, $0F, $7F, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>396fd8	00 00 00 00 00 00 00 00
>396fe0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>396fe8	00 00 00 00 00 00 00 00
>396ff0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>396ff8	00 00 00 00 00 00 00 00
>397000					.align 256
>397000	00 14 1c 21 26 2a 2e 31		GAMMA_2_2_Tbl         .text  $00, $14, $1c, $21, $26, $2a, $2e, $31, $34, $37, $3a, $3d, $3f, $41, $44, $46
>397008	34 37 3a 3d 3f 41 44 46
>397010	48 4a 4c 4e 50 51 53 55		                      .text  $48, $4a, $4c, $4e, $50, $51, $53, $55, $57, $58, $5a, $5b, $5d, $5e, $60, $61
>397018	57 58 5a 5b 5d 5e 60 61
>397020	63 64 66 67 68 6a 6b 6c		                      .text  $63, $64, $66, $67, $68, $6a, $6b, $6c, $6d, $6f, $70, $71, $72, $73, $75, $76
>397028	6d 6f 70 71 72 73 75 76
>397030	77 78 79 7a 7b 7c 7d 7e		                      .text  $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $80, $81, $82, $83, $84, $85, $86, $87
>397038	80 81 82 83 84 85 86 87
>397040	88 88 89 8a 8b 8c 8d 8e		                      .text  $88, $88, $89, $8a, $8b, $8c, $8d, $8e, $8f, $90, $91, $92, $93, $93, $94, $95
>397048	8f 90 91 92 93 93 94 95
>397050	96 97 98 99 99 9a 9b 9c		                      .text  $96, $97, $98, $99, $99, $9a, $9b, $9c, $9d, $9e, $9e, $9f, $a0, $a1, $a2, $a2
>397058	9d 9e 9e 9f a0 a1 a2 a2
>397060	a3 a4 a5 a5 a6 a7 a8 a8		                      .text  $a3, $a4, $a5, $a5, $a6, $a7, $a8, $a8, $a9, $aa, $ab, $ab, $ac, $ad, $ae, $ae
>397068	a9 aa ab ab ac ad ae ae
>397070	af b0 b0 b1 b2 b2 b3 b4		                      .text  $AF, $b0, $b0, $b1, $b2, $b2, $b3, $b4, $b5, $b5, $b6, $b7, $b7, $b8, $b9, $b9
>397078	b5 b5 b6 b7 b7 b8 b9 b9
>397080	ba bb bb bc bd bd be be		                      .text  $ba, $bb, $bb, $bc, $bd, $bd, $be, $be, $bf, $c0, $c0, $c1, $c2, $c2, $c3, $c4
>397088	bf c0 c0 c1 c2 c2 c3 c4
>397090	c4 c5 c5 c6 c7 c7 c8 c8		                      .text  $c4, $c5, $c5, $c6, $c7, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cb, $cc, $cd, $cd
>397098	c9 ca ca cb cb cc cd cd
>3970a0	ce ce cf d0 d0 d1 d1 d2		                      .text  $ce, $ce, $cf, $d0, $d0, $d1, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d5, $d6, $d6
>3970a8	d2 d3 d4 d4 d5 d5 d6 d6
>3970b0	d7 d8 d8 d9 d9 da da db		                      .text  $d7, $d8, $d8, $d9, $d9, $da, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $df
>3970b8	db dc dc dd de de df df
>3970c0	e0 e0 e1 e1 e2 e2 e3 e3		                      .text  $e0, $e0, $e1, $e1, $e2, $e2, $e3, $e3, $e4, $e4, $e5, $e5, $e6, $e6, $e7, $e7
>3970c8	e4 e4 e5 e5 e6 e6 e7 e7
>3970d0	e8 e8 e9 e9 ea ea eb eb		                      .text  $e8, $e8, $e9, $e9, $ea, $ea, $eb, $eb, $ec, $ec, $ed, $ed, $ee, $ee, $ef, $ef
>3970d8	ec ec ed ed ee ee ef ef
>3970e0	f0 f0 f1 f1 f2 f2 f3 f3		                      .text  $f0, $f0, $f1, $f1, $f2, $f2, $f3, $f3, $f4, $f4, $f5, $f5, $f6, $f6, $f7, $f7
>3970e8	f4 f4 f5 f5 f6 f6 f7 f7
>3970f0	f8 f8 f9 f9 f9 fa fa fb		                      .text  $f8, $f8, $f9, $f9, $f9, $fa, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $fe, $ff
>3970f8	fb fc fc fd fd fe fe ff
>397100					.align 256
>397100	00 0b 11 15 19 1c 1f 22		GAMMA_1_8_Tbl         .text  $00, $0b, $11, $15, $19, $1c, $1f, $22, $25, $27, $2a, $2c, $2e, $30, $32, $34
>397108	25 27 2a 2c 2e 30 32 34
>397110	36 38 3a 3c 3d 3f 41 43		                      .text  $36, $38, $3a, $3c, $3d, $3f, $41, $43, $44, $46, $47, $49, $4a, $4c, $4d, $4f
>397118	44 46 47 49 4a 4c 4d 4f
>397120	50 51 53 54 55 57 58 59		                      .text  $50, $51, $53, $54, $55, $57, $58, $59, $5b, $5c, $5d, $5e, $60, $61, $62, $63
>397128	5b 5c 5d 5e 60 61 62 63
>397130	64 65 67 68 69 6a 6b 6c		                      .text  $64, $65, $67, $68, $69, $6a, $6b, $6c, $6d, $6e, $70, $71, $72, $73, $74, $75
>397138	6d 6e 70 71 72 73 74 75
>397140	76 77 78 79 7a 7b 7c 7d		                      .text  $76, $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $7f, $80, $81, $82, $83, $84, $84
>397148	7e 7f 80 81 82 83 84 84
>397150	85 86 87 88 89 8a 8b 8c		                      .text  $85, $86, $87, $88, $89, $8a, $8b, $8c, $8d, $8e, $8e, $8f, $90, $91, $92, $93
>397158	8d 8e 8e 8f 90 91 92 93
>397160	94 95 95 96 97 98 99 9a		                      .text  $94, $95, $95, $96, $97, $98, $99, $9a, $9a, $9b, $9c, $9d, $9e, $9f, $9f, $a0
>397168	9a 9b 9c 9d 9e 9f 9f a0
>397170	a1 a2 a3 a3 a4 a5 a6 a6		                      .text  $a1, $a2, $a3, $a3, $a4, $a5, $a6, $a6, $a7, $a8, $a9, $aa, $aa, $ab, $ac, $ad
>397178	a7 a8 a9 aa aa ab ac ad
>397180	ad ae af b0 b0 b1 b2 b3		                      .text  $ad, $ae, $af, $b0, $b0, $b1, $b2, $b3, $b3, $b4, $b5, $b6, $b6, $b7, $b8, $b8
>397188	b3 b4 b5 b6 b6 b7 b8 b8
>397190	b9 ba bb bb bc bd bd be		                      .text  $b9, $ba, $bb, $bb, $bc, $bd, $bd, $be, $bf, $bf, $c0, $c1, $c2, $c2, $c3, $c4
>397198	bf bf c0 c1 c2 c2 c3 c4
>3971a0	c4 c5 c6 c6 c7 c8 c8 c9		                      .text  $c4, $c5, $c6, $c6, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cc, $cc, $cd, $ce, $ce
>3971a8	ca ca cb cc cc cd ce ce
>3971b0	cf d0 d0 d1 d2 d2 d3 d4		                      .text  $cf, $d0, $d0, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d6, $d6, $d7, $d7, $d8, $d9
>3971b8	d4 d5 d6 d6 d7 d7 d8 d9
>3971c0	d9 da db db dc dc dd de		                      .text  $d9, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $e0, $e0, $e1, $e1, $e2, $e3
>3971c8	de df e0 e0 e1 e1 e2 e3
>3971d0	e3 e4 e4 e5 e6 e6 e7 e7		                      .text  $e3, $e4, $e4, $e5, $e6, $e6, $e7, $e7, $e8, $e9, $e9, $ea, $ea, $eb, $ec, $ec
>3971d8	e8 e9 e9 ea ea eb ec ec
>3971e0	ed ed ee ef ef f0 f0 f1		                      .text  $ed, $ed, $ee, $ef, $ef, $f0, $f0, $f1, $f1, $f2, $f3, $f3, $f4, $f4, $f5, $f5
>3971e8	f1 f2 f3 f3 f4 f4 f5 f5
>3971f0	f6 f7 f7 f8 f8 f9 f9 fa		                      .text  $f6, $f7, $f7, $f8, $f8, $f9, $f9, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $ff
>3971f8	fb fb fc fc fd fd fe ff
>397200					.align 256
>397200	1d c8 a7 ac 10 d6 52 7c		RANDOM_LUT_Tbl		    .text  $1d, $c8, $a7, $ac, $10, $d6, $52, $7c, $83, $dd, $ce, $39, $cd, $c5, $3b, $15
>397208	83 dd ce 39 cd c5 3b 15
>397210	22 55 3b 94 e0 33 1f 38						              .text  $22, $55, $3b, $94, $e0, $33, $1f, $38, $87, $12, $31, $65, $89, $27, $88, $42
>397218	87 12 31 65 89 27 88 42
>397220	b2 32 72 84 b2 b2 31 52						              .text  $b2, $32, $72, $84, $b2, $b2, $31, $52, $94, $ce, $56, $ec, $fe, $da, $58, $c9
>397228	94 ce 56 ec fe da 58 c9
>397230	c8 5b 53 2a 08 3b 19 c1						              .text  $c8, $5b, $53, $2a, $08, $3b, $19, $c1, $d0, $10, $2c, $b2, $4b, $ea, $32, $61
>397238	d0 10 2c b2 4b ea 32 61
>397240	da 34 33 8f 2b da 49 89						              .text  $da, $34, $33, $8f, $2b, $da, $49, $89, $a1, $e6, $ca, $2d, $b3, $ce, $b0, $79
>397248	a1 e6 ca 2d b3 ce b0 79
>397250	44 aa 32 82 91 e9 29 16						              .text  $44, $aa, $32, $82, $91, $e9, $29, $16, $5f, $e3, $fb, $bd, $15, $2e, $be, $f5
>397258	5f e3 fb bd 15 2e be f5
>397260	e9 4a e4 2e 60 24 94 35						              .text  $e9, $4a, $e4, $2e, $60, $24, $94, $35, $8d, $8f, $2c, $80, $0a, $5e, $99, $36
>397268	8d 8f 2c 80 0a 5e 99 36
>397270	ac ab 21 26 42 7c 5e bc						              .text  $ac, $ab, $21, $26, $42, $7c, $5e, $bc, $13, $52, $44, $2f, $e3, $ef, $44, $a2
>397278	13 52 44 2f e3 ef 44 a2
>397280	86 c1 9c 47 5f 36 6d 02						              .text  $86, $c1, $9c, $47, $5f, $36, $6d, $02, $be, $23, $02, $58, $0a, $52, $5e, $b4
>397288	be 23 02 58 0a 52 5e b4
>397290	9f 06 08 c9 97 cb 9e dd						              .text  $9f, $06, $08, $c9, $97, $cb, $9e, $dd, $d5, $cf, $3e, $df, $c4, $9e, $da, $bb
>397298	d5 cf 3e df c4 9e da bb
>3972a0	9b 5d c9 f5 d9 c3 7e 87						              .text  $9b, $5d, $c9, $f5, $d9, $c3, $7e, $87, $77, $7d, $b1, $3b, $4a, $68, $35, $6e
>3972a8	77 7d b1 3b 4a 68 35 6e
>3972b0	ee 47 ad 8f fd 73 2e 46						              .text  $ee, $47, $ad, $8f, $fd, $73, $2e, $46, $b5, $8f, $44, $63, $55, $6f, $e1, $50
>3972b8	b5 8f 44 63 55 6f e1 50
>3972c0	f4 b6 a3 4f 68 c4 a5 a4						              .text  $f4, $b6, $a3, $4f, $68, $c4, $a5, $a4, $57, $74, $b9, $bd, $05, $14, $50, $eb
>3972c8	57 74 b9 bd 05 14 50 eb
>3972d0	a5 5c 57 2f 99 dc 2e 8a						              .text  $a5, $5c, $57, $2f, $99, $dc, $2e, $8a, $44, $bc, $ec, $db, $22, $58, $fc, $be
>3972d8	44 bc ec db 22 58 fc be
>3972e0	5f 3f 50 bd 2a 36 ab ae						              .text  $5f, $3f, $50, $bd, $2a, $36, $ab, $ae, $24, $aa, $82, $11, $5c, $9f, $43, $4d
>3972e8	24 aa 82 11 5c 9f 43 4d
>3972f0	8f 0c 20 00 91 b6 45 9e						              .text  $8f, $0c, $20, $00, $91, $b6, $45, $9e, $3e, $3d, $66, $7e, $0a, $1c, $6b, $74
>3972f8	3e 3d 66 7e 0a 1c 6b 74
>397300					.align 16
>397300	00 01 01 00 00 00 00 00		MOUSE_POINTER_PTR     .text $00,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00
>397308	01 01 01 00 00 00 00 00
>397310	01 ff ff 01 00 00 01 01		                      .text $01,$FF,$FF,$01,$00,$00,$01,$01,$FF,$FF,$FF,$01,$00,$00,$00,$00
>397318	ff ff ff 01 00 00 00 00
>397320	01 ff ff ff 01 01 55 ff		                      .text $01,$FF,$FF,$FF,$01,$01,$55,$FF,$01,$55,$FF,$FF,$01,$00,$00,$00
>397328	01 55 ff ff 01 00 00 00
>397330	01 55 ff ff ff ff 01 55		                      .text $01,$55,$FF,$FF,$FF,$FF,$01,$55,$FF,$FF,$FF,$FF,$01,$00,$00,$00
>397338	ff ff ff ff 01 00 00 00
>397340	00 01 55 ff ff ff ff ff		                      .text $00,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$00,$00
>397348	ff ff 01 ff ff 01 00 00
>397350	00 00 01 55 ff ff ff ff		                      .text $00,$00,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$FF,$01,$00,$00
>397358	01 ff ff 01 ff 01 00 00
>397360	00 00 01 01 55 ff ff ff		                      .text $00,$00,$01,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$FF,$01,$00,$00
>397368	ff 01 ff ff ff 01 00 00
>397370	00 00 01 55 01 55 ff ff		                      .text $00,$00,$01,$55,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$01,$00
>397378	ff ff ff ff ff 01 01 00
>397380	00 00 01 55 55 55 ff ff		                      .text $00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01
>397388	ff ff ff ff 01 ff ff 01
>397390	00 00 00 01 55 55 55 ff		                      .text $00,$00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01
>397398	ff ff ff ff ff ff ff 01
>3973a0	00 00 00 00 01 55 55 55		                      .text $00,$00,$00,$00,$01,$55,$55,$55,$55,$55,$01,$FF,$FF,$55,$01,$00
>3973a8	55 55 01 ff ff 55 01 00
>3973b0	00 00 00 00 00 01 01 01		                      .text $00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$55,$FF,$55,$01,$00,$00
>3973b8	01 01 55 ff 55 01 00 00
>3973c0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$55,$01,$00,$00,$00
>3973c8	01 55 55 55 01 00 00 00
>3973d0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$01,$00,$00,$00,$00
>3973d8	01 55 55 01 00 00 00 00
>3973e0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00
>3973e8	00 01 01 00 00 00 00 00
>3973f0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>3973f8	00 00 00 00 00 00 00 00
.3ff000					FONT_4_BANK0
>3ff000	00 00 00 00 00 00 00 00		.binary "FONT/Bm437_PhoenixEGA_8x8.bin", 0, 2048
>3ff008	7e 81 a5 81 bd 99 81 7e 3c 7e db ff c3 7e 3c 00
>3ff018	00 ee fe fe 7c 38 10 00 10 38 7c fe 7c 38 10 00
>3ff028	00 3c 18 ff ff 08 18 00 10 38 7c fe fe 10 38 00
>3ff038	00 00 18 3c 18 00 00 00 ff ff e7 c3 e7 ff ff ff
>3ff048	00 3c 42 81 81 42 3c 00 ff c3 bd 7e 7e bd c3 ff
>3ff058	01 03 07 0f 1f 3f 7f ff ff fe fc f8 f0 e0 c0 80
>3ff068	04 06 07 04 04 fc f8 00 0c 0a 0d 0b f9 f9 1f 1f
>3ff078	00 92 7c 44 c6 7c 92 00 00 00 60 78 7e 78 60 00
>3ff088	00 00 06 1e 7e 1e 06 00 18 7e 18 18 18 18 7e 18
>3ff098	66 66 66 66 66 00 66 00 ff b6 76 36 36 36 36 00
>3ff0a8	7e c1 dc 22 22 1f 83 7e 00 00 00 7e 7e 00 00 00
>3ff0b8	18 7e 18 18 7e 18 00 ff 18 7e 18 18 18 18 18 00
>3ff0c8	18 18 18 18 18 7e 18 00 00 04 06 ff 06 04 00 00
>3ff0d8	00 20 60 ff 60 20 00 00 00 00 00 c0 c0 c0 ff 00
>3ff0e8	00 24 66 ff 66 24 00 00 00 00 10 38 7c fe 00 00
>3ff0f8	00 00 00 fe 7c 38 10 00 00 00 00 00 00 00 00 00
>3ff108	30 30 30 30 30 00 30 00 66 66 00 00 00 00 00 00
>3ff118	6c 6c fe 6c fe 6c 6c 00 10 7c d2 7c 86 7c 10 00
>3ff128	f0 96 fc 18 3e 72 de 00 30 48 30 78 ce cc 78 00
>3ff138	0c 0c 18 00 00 00 00 00 10 60 c0 c0 c0 60 10 00
>3ff148	10 0c 06 06 06 0c 10 00 00 54 38 fe 38 54 00 00
>3ff158	00 18 18 7e 18 18 00 00 00 00 00 00 00 00 18 70
>3ff168	00 00 00 7e 00 00 00 00 00 00 00 00 00 00 18 00
>3ff178	02 06 0c 18 30 60 c0 00 7c ce de f6 e6 e6 7c 00
>3ff188	18 38 78 18 18 18 3c 00 7c c6 06 0c 30 60 fe 00
>3ff198	7c c6 06 3c 06 c6 7c 00 0e 1e 36 66 fe 06 06 00
>3ff1a8	fe c0 c0 fc 06 06 fc 00 7c c6 c0 fc c6 c6 7c 00
>3ff1b8	fe 06 0c 18 30 60 60 00 7c c6 c6 7c c6 c6 7c 00
>3ff1c8	7c c6 c6 7e 06 c6 7c 00 00 30 00 00 00 30 00 00
>3ff1d8	00 30 00 00 00 30 20 00 00 1c 30 60 30 1c 00 00
>3ff1e8	00 00 7e 00 7e 00 00 00 00 70 18 0c 18 70 00 00
>3ff1f8	7c c6 0c 18 30 00 30 00 7c 82 9a aa aa 9e 7c 00
>3ff208	7c c6 c6 fe c6 c6 c6 00 fc 66 66 7c 66 66 fc 00
>3ff218	7c c6 c0 c0 c0 c6 7c 00 fc 66 66 66 66 66 fc 00
>3ff228	fe 62 68 78 68 62 fe 00 fe 62 68 78 68 60 f0 00
>3ff238	7c c6 c6 c0 de c6 7c 00 c6 c6 c6 fe c6 c6 c6 00
>3ff248	3c 18 18 18 18 18 3c 00 1e 0c 0c 0c 0c cc 78 00
>3ff258	c6 cc d8 f0 d8 cc c6 00 f0 60 60 60 60 62 fe 00
>3ff268	c6 ee fe d6 c6 c6 c6 00 c6 e6 f6 de ce c6 c6 00
>3ff278	7c c6 c6 c6 c6 c6 7c 00 fc 66 66 7c 60 60 f0 00
>3ff288	7c c6 c6 c6 c6 c6 7c 0c fc 66 66 7c 66 66 e6 00
>3ff298	7c c6 c0 7c 06 c6 7c 00 7e 5a 18 18 18 18 3c 00
>3ff2a8	c6 c6 c6 c6 c6 c6 7c 00 c6 c6 c6 c6 c6 6c 38 00
>3ff2b8	c6 c6 c6 c6 d6 ee c6 00 c6 6c 38 38 38 6c c6 00
>3ff2c8	66 66 66 3c 18 18 3c 00 fe c6 0c 18 30 66 fe 00
>3ff2d8	1c 18 18 18 18 18 1c 00 c0 60 30 18 0c 06 02 00
>3ff2e8	70 30 30 30 30 30 70 00 00 00 10 38 6c c6 00 00
>3ff2f8	00 00 00 00 00 00 00 ff 30 30 18 00 00 00 00 00
>3ff308	00 00 7c 06 7e c6 7e 00 c0 c0 fc c6 c6 c6 fc 00
>3ff318	00 00 7c c6 c0 c6 7c 00 06 06 7e c6 c6 c6 7e 00
>3ff328	00 00 7c c6 fe c0 7c 00 3c 66 60 f0 60 60 60 00
>3ff338	00 00 7e c6 c6 7e 06 7c c0 c0 fc c6 c6 c6 c6 00
>3ff348	18 00 38 18 18 18 3c 00 00 0c 00 1c 0c 0c cc 78
>3ff358	c0 c0 c6 d8 f0 d8 c6 00 38 18 18 18 18 18 3c 00
>3ff368	00 00 ee fe d6 c6 c6 00 00 00 fc c6 c6 c6 c6 00
>3ff378	00 00 7c c6 c6 c6 7c 00 00 00 fc c6 c6 fc c0 c0
>3ff388	00 00 7e c6 c6 7e 06 06 00 00 de 76 60 60 60 00
>3ff398	00 00 7c c0 7c 06 7c 00 18 18 7e 18 18 18 1e 00
>3ff3a8	00 00 c6 c6 c6 c6 7e 00 00 00 c6 c6 c6 6c 38 00
>3ff3b8	00 00 c6 c6 d6 fe c6 00 00 00 c6 6c 38 6c c6 00
>3ff3c8	00 00 c6 c6 c6 7e 06 7c 00 00 fe 0c 18 60 fe 00
>3ff3d8	0e 18 18 70 18 18 0e 00 18 18 18 00 18 18 18 00
>3ff3e8	e0 30 30 1c 30 30 e0 00 00 00 70 9a 0e 00 00 00
>3ff3f8	00 00 18 3c 66 ff 00 00 7c c6 c0 c0 c6 7c 18 70
>3ff408	66 00 c6 c6 c6 c6 7e 00 0e 18 7c c6 fe c0 7c 00
>3ff418	18 24 7c 06 7e c6 7e 00 66 00 7c 06 7e c6 7e 00
>3ff428	38 0c 7c 06 7e c6 7e 00 18 00 7c 06 7e c6 7e 00
>3ff438	00 00 7c c0 c0 7c 18 70 18 24 7c c6 fe c0 7c 00
>3ff448	66 00 7c c6 fe c0 7c 00 70 18 7c c6 fe c0 7c 00
>3ff458	66 00 38 18 18 18 3c 00 18 24 38 18 18 18 3c 00
>3ff468	38 0c 38 18 18 18 3c 00 66 00 7c c6 fe c6 c6 00
>3ff478	18 00 7c c6 fe c6 c6 00 0e 18 fe 60 78 60 fe 00
>3ff488	00 00 7c 1a 7e d8 7e 00 7e d8 d8 de f8 d8 de 00
>3ff498	18 24 7c c6 c6 c6 7c 00 66 00 7c c6 c6 c6 7c 00
>3ff4a8	38 0c 7c c6 c6 c6 7c 00 18 24 c6 c6 c6 c6 7e 00
>3ff4b8	38 0c c6 c6 c6 c6 7e 00 66 00 c6 c6 c6 7e 06 7c
>3ff4c8	66 7c c6 c6 c6 c6 7c 00 c6 00 c6 c6 c6 c6 7c 00
>3ff4d8	18 7c c6 c0 c6 7c 18 00 1e 32 30 78 30 70 fe 00
>3ff4e8	66 3c 18 7e 18 3c 18 00 fc c6 fc c0 cc de cc 0e
>3ff4f8	00 1c 32 30 fc 30 f0 00 0e 18 7c 06 7e c6 7e 00
>3ff508	1a 30 38 18 18 18 3c 00 0e 18 7c c6 c6 c6 7c 00
>3ff518	0e 18 c6 c6 c6 c6 7e 00 66 98 fc c6 c6 c6 c6 00
>3ff528	66 98 e6 f6 de ce c6 00 7c 06 7e c6 7e 00 fe 00
>3ff538	7c c6 c6 c6 7c 00 fe 00 18 00 18 30 60 c6 7c 00
>3ff548	00 00 fe c0 c0 c0 c0 00 00 00 fe 06 06 06 06 00
>3ff558	c0 c0 c0 de 06 0c 1e 00 c0 c0 c0 cc 1c 3e 0c 00
>3ff568	30 00 30 30 30 30 30 00 00 36 6c d8 6c 36 00 00
>3ff578	00 d8 6c 36 6c d8 00 00 aa aa aa aa aa aa aa aa
>3ff588	aa 55 aa 55 aa 55 aa 55 44 22 44 22 44 22 44 22
>3ff598	18 18 18 18 18 18 18 18 18 18 18 f8 18 18 18 18
>3ff5a8	18 18 18 f8 18 f8 18 18 36 36 36 f6 36 36 36 36
>3ff5b8	00 00 00 fe 36 36 36 36 00 00 00 f8 18 f8 18 18
>3ff5c8	36 36 36 f6 06 f6 36 36 36 36 36 36 36 36 36 36
>3ff5d8	00 00 00 fe 06 f6 36 36 36 36 36 f6 06 fe 00 00
>3ff5e8	36 36 36 fe 00 00 00 00 18 18 18 f8 18 f8 00 00
>3ff5f8	00 00 00 f8 18 18 18 18 18 18 18 1f 00 00 00 00
>3ff608	18 18 18 ff 00 00 00 00 00 00 00 ff 18 18 18 18
>3ff618	18 18 18 1f 18 18 18 18 00 00 00 ff 00 00 00 00
>3ff628	18 18 18 ff 18 18 18 18 18 18 18 1f 18 1f 18 18
>3ff638	36 36 36 37 36 36 36 36 36 36 36 37 30 3f 00 00
>3ff648	00 00 00 3f 30 37 36 36 36 36 36 f7 00 ff 00 00
>3ff658	00 00 00 ff 00 f7 36 36 36 36 36 37 30 37 36 36
>3ff668	00 00 00 ff 00 ff 00 00 36 36 36 f7 00 f7 36 36
>3ff678	18 18 18 ff 00 ff 00 00 36 36 36 ff 00 00 00 00
>3ff688	00 00 00 ff 00 ff 18 18 00 00 00 ff 36 36 36 36
>3ff698	36 36 36 3f 00 00 00 00 18 18 18 1f 18 1f 00 00
>3ff6a8	00 00 00 1f 18 1f 18 18 00 00 00 3f 36 36 36 36
>3ff6b8	36 36 36 ff 36 36 36 36 18 18 18 ff 18 ff 18 18
>3ff6c8	18 18 18 f8 00 00 00 00 00 00 00 1f 18 18 18 18
>3ff6d8	ff ff ff ff ff ff ff ff 00 00 00 00 ff ff ff ff
>3ff6e8	f0 f0 f0 f0 f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f
>3ff6f8	ff ff ff ff 00 00 00 00 00 00 77 98 98 77 00 00
>3ff708	1c 36 66 fc c6 c6 fc c0 fe 62 60 60 60 60 60 00
>3ff718	00 00 ff 66 66 66 66 00 fe 62 30 18 30 62 fe 00
>3ff728	00 00 3f 66 c6 cc 78 00 00 00 33 33 33 3e 30 f0
>3ff738	00 00 ff 18 18 18 18 00 3c 18 3c 66 66 3c 18 3c
>3ff748	00 7c c6 fe c6 7c 00 00 00 7e c3 c3 c3 66 e7 00
>3ff758	1e 19 3c 66 c6 cc 78 00 00 00 66 99 99 66 00 00
>3ff768	00 03 7c ce e6 7c c0 00 00 3e c0 fe c0 3e 00 00
>3ff778	00 7e c3 c3 c3 c3 00 00 00 fe 00 fe 00 fe 00 00
>3ff788	18 18 7e 18 18 7e 00 00 70 18 0c 18 70 00 fe 00
>3ff798	1c 30 60 30 1c 00 fe 00 00 0e 1b 18 18 18 18 18
>3ff7a8	18 18 18 18 18 d8 70 00 00 18 00 7e 00 18 00 00
>3ff7b8	00 76 dc 00 76 dc 00 00 3c 66 3c 00 00 00 00 00
>3ff7c8	00 18 3c 18 00 00 00 00 00 00 00 00 18 00 00 00
>3ff7d8	0f 0c 0c 0c ec 6c 38 00 d8 ec cc cc 00 00 00 00
>3ff7e8	f0 30 c0 f0 00 00 00 00 00 00 00 3c 3c 3c 3c 00
>3ff7f8	00 00 00 00 00 00 00 00
.3ff800					FONT_4_BANK1
>3ff800	00 00 00 00 00 00 00 00		.binary "FONT/CBM-ASCII_8x8.bin", 0, 2048
>3ff808	7c 82 aa 82 ba 92 82 7c 7c fe d6 fe c6 ee fe 7c
>3ff818	ff fd fb f5 eb d5 ab ff ff e1 fd 85 85 87 87 ff
>3ff828	ff bd db e7 e7 db bd ff ff 81 81 bd bd bd 81 ff
>3ff838	ff ff ff ff ff 81 81 ff 00 08 10 20 10 08 00 00
>3ff848	00 24 14 0c 14 24 00 00 00 8e 88 8c 88 e8 00 00
>3ff858	00 00 00 00 00 00 00 00 00 ee 88 cc 88 88 00 00
>3ff868	00 00 04 14 3c 10 00 00 00 30 4c 4c 30 00 00 00
>3ff878	00 38 28 38 28 00 00 00 ff 81 bd bd bd bd 81 ff
>3ff888	ff 55 aa 55 aa 55 aa ff ab d5 ab d5 ab d5 ab d5
>3ff898	ff 81 81 81 81 81 81 ff ff f9 e1 81 81 e1 f9 ff
>3ff8a8	ff 9f 87 81 81 87 9f ff ff e7 e7 c3 c3 81 81 ff
>3ff8b8	ff 81 81 c3 c3 e7 e7 ff 00 26 54 04 04 04 06 00
>3ff8c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 3 times (48 bytes)...
>3ff908	10 10 10 10 00 10 00 00 24 24 24 00 00 00 00 00
>3ff918	24 7e 24 24 7e 24 00 00 10 3c 50 38 14 78 10 00
>3ff928	62 64 08 10 20 4c 8c 00 30 48 48 30 58 4c 4c 38
>3ff938	10 10 10 00 00 00 00 00 08 10 20 20 20 20 10 08
>3ff948	10 08 04 04 04 04 08 10 00 24 18 7e 18 24 00 00
>3ff958	00 10 10 7c 10 10 00 00 00 00 00 00 10 10 20 00
>3ff968	00 00 00 3c 00 00 00 00 00 00 00 00 18 18 00 00
>3ff978	04 04 08 08 10 10 20 20 3c 46 4a 52 62 42 3c 00
>3ff988	10 30 10 10 10 10 38 00 38 44 04 18 20 40 7c 00
>3ff998	38 44 04 18 04 44 38 00 08 18 28 48 7c 08 08 00
>3ff9a8	7c 40 78 04 04 44 38 00 38 44 40 78 44 44 38 00
>3ff9b8	7c 44 04 08 08 10 10 00 38 44 44 38 44 44 38 00
>3ff9c8	38 44 44 3c 04 44 38 00 00 00 18 00 00 18 00 00
>3ff9d8	00 00 18 00 00 18 18 30 00 08 10 20 10 08 00 00
>3ff9e8	00 00 3c 00 3c 00 00 00 00 10 08 04 08 10 00 00
>3ff9f8	38 44 04 08 10 00 10 00 38 44 4c 4c 40 44 38 00
>3ffa08	10 28 44 7c 44 44 00 00 78 44 78 44 44 78 00 00
>3ffa18	38 44 40 40 44 38 00 00 78 44 44 44 44 78 00 00
>3ffa28	7c 40 78 40 40 7c 00 00 7c 40 78 40 40 40 00 00
>3ffa38	38 44 40 4c 44 38 00 00 44 44 7c 44 44 44 00 00
>3ffa48	38 10 10 10 10 38 00 00 1c 08 08 08 48 30 00 00
>3ffa58	24 28 30 30 28 24 00 00 20 20 20 20 20 3c 00 00
>3ffa68	44 6c 7c 54 44 44 00 00 44 64 54 4c 44 44 00 00
>3ffa78	38 44 44 44 44 38 00 00 78 44 44 78 40 40 00 00
>3ffa88	38 44 44 44 44 38 0c 00 78 44 44 78 48 44 00 00
>3ffa98	3c 40 38 04 04 78 00 00 7c 10 10 10 10 10 00 00
>3ffaa8	44 44 44 44 44 38 00 00 44 44 44 44 28 10 00 00
>3ffab8	82 82 82 92 92 6c 00 00 42 24 18 18 24 42 00 00
>3ffac8	44 44 28 10 10 10 00 00 7c 08 10 20 40 7c 00 00
>3ffad8	38 20 20 20 20 20 38 00 20 20 10 10 08 08 04 04
>3ffae8	38 08 08 08 08 08 38 00 00 10 28 44 00 00 00 00
>3ffaf8	00 00 00 00 00 00 00 7e 40 20 10 00 00 00 00 00
>3ffb08	00 38 04 3c 64 3c 00 00 40 40 78 44 44 78 00 00
>3ffb18	00 00 38 40 40 38 00 00 04 04 3c 44 44 3c 00 00
>3ffb28	00 38 44 7c 40 3c 00 00 0c 10 3c 10 10 10 00 00
>3ffb38	00 00 3c 44 44 3c 04 78 40 40 78 44 44 44 00 00
>3ffb48	10 00 30 10 10 38 00 00 08 00 08 08 08 08 08 30
>3ffb58	20 20 24 38 28 24 00 00 30 10 10 10 10 10 00 00
>3ffb68	00 00 68 54 54 44 00 00 00 00 38 24 24 24 00 00
>3ffb78	00 00 38 44 44 38 00 00 00 00 78 44 44 78 40 40
>3ffb88	00 00 3c 44 44 3c 04 04 00 00 78 44 40 40 00 00
>3ffb98	00 00 1c 30 0c 38 00 00 00 10 7c 10 10 10 0c 00
>3ffba8	00 00 44 44 44 3c 00 00 00 00 42 42 24 18 00 00
>3ffbb8	00 00 82 82 92 6c 00 00 00 00 24 18 18 24 00 00
>3ffbc8	00 00 24 24 24 1c 04 38 00 00 7c 18 30 7c 00 00
>3ffbd8	0c 10 10 30 30 10 10 0c 18 18 18 00 18 18 18 00
>3ffbe8	30 08 08 0c 0c 08 08 30 00 00 32 7e 4c 00 00 00
>3ffbf8	00 00 10 28 38 00 00 00 00 00 3c 3c 3c 3c 00 00
>3ffc08	00 00 3c 24 24 3c 00 00 00 00 18 3c 3c 18 00 00
>3ffc18	00 00 18 24 24 18 00 00 18 24 24 18 00 00 00 00
>3ffc28	00 3c 42 42 66 24 66 00 00 18 00 18 0c 06 66 3c
>3ffc38	0c 12 30 7c 30 62 fc 00 1c 20 70 20 70 20 1c 00
>3ffc48	02 06 0c d8 f0 e0 c0 00 18 18 ff 00 00 ff 00 00
>3ffc58	00 00 ff 00 00 ff 18 18 24 24 24 e7 e7 24 24 24
>3ffc68	18 18 ff 00 00 ff 18 18 24 24 24 27 27 24 24 24
>3ffc78	24 24 24 e4 e4 24 24 24 00 00 00 ff ff ff ff ff
>3ffc88	00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>3ffc98	ff ff ff ff ff ff ff 00 ff ff ff ff ff ff 00 00
>3ffca8	ff ff ff ff ff 00 00 00 ff ff ff ff 00 00 00 00
>3ffcb8	f8 f8 f8 f8 f8 f8 f8 f8 fc fc fc fc fc fc fc fc
>3ffcc8	fe fe fe fe fe fe fe fe 7f 7f 7f 7f 7f 7f 7f 7f
>3ffcd8	3f 3f 3f 3f 3f 3f 3f 3f 1f 1f 1f 1f 1f 1f 1f 1f
>3ffce8	0f 0f 0f 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00
>3ffcf8	00 00 00 00 00 00 00 00 ff ff ff ff ff ff ff ff
>3ffd08	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 00 ff ff ff ff
>3ffd18	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>3ffd28	80 80 80 80 80 80 80 80 aa 55 aa 55 aa 55 aa 55
>3ffd38	01 01 01 01 01 01 01 01 00 00 00 00 aa 55 aa 55
>3ffd48	ff fe fc f8 f0 e0 c0 80 03 03 03 03 03 03 03 03
>3ffd58	18 18 18 1f 1f 18 18 18 00 00 00 00 0f 0f 0f 0f
>3ffd68	18 18 18 1f 1f 00 00 00 00 00 00 f8 f8 18 18 18
>3ffd78	00 00 00 00 00 00 ff ff 00 00 00 1f 1f 18 18 18
>3ffd88	18 18 18 ff ff 00 00 00 00 00 00 ff ff 18 18 18
>3ffd98	18 18 18 f8 f8 18 18 18 c0 c0 c0 c0 c0 c0 c0 c0
>3ffda8	e0 e0 e0 e0 e0 e0 e0 e0 07 07 07 07 07 07 07 07
>3ffdb8	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00
>3ffdc8	00 00 00 00 00 ff ff ff 03 03 03 03 03 03 ff ff
>3ffdd8	00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>3ffde8	18 18 18 f8 f8 00 00 00 f0 f0 f0 f0 00 00 00 00
>3ffdf8	f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 ff ff 00 00 00
>3ffe08	08 1c 3e 7f 7f 1c 3e 00 18 18 18 18 18 18 18 18
>3ffe18	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00
>3ffe28	00 ff ff 00 00 00 00 00 00 00 00 00 ff ff 00 00
>3ffe38	30 30 30 30 30 30 30 30 0c 0c 0c 0c 0c 0c 0c 0c
>3ffe48	00 00 00 e0 f0 38 18 18 18 18 1c 0f 07 00 00 00
>3ffe58	18 18 38 f0 e0 00 00 00 c0 c0 c0 c0 c0 c0 ff ff
>3ffe68	c0 e0 70 38 1c 0e 07 03 03 07 0e 1c 38 70 e0 c0
>3ffe78	ff ff c0 c0 c0 c0 c0 c0 ff ff 03 03 03 03 03 03
>3ffe88	00 3c 7e 7e 7e 7e 3c 00 00 00 00 00 00 ff ff 00
>3ffe98	36 7f 7f 7f 3e 1c 08 00 60 60 60 60 60 60 60 60
>3ffea8	00 00 00 07 0f 1c 18 18 c3 e7 7e 3c 3c 7e e7 c3
>3ffeb8	00 3c 7e 66 66 7e 3c 00 18 18 66 66 18 18 3c 00
>3ffec8	06 06 06 06 06 06 06 06 08 1c 3e 7f 3e 1c 08 00
>3ffed8	18 18 18 ff ff 18 18 18 c0 c0 30 30 c0 c0 30 30
>3ffee8	18 18 18 18 18 18 18 18 00 00 03 3e 76 36 36 00
>3ffef8	ff 7f 3f 1f 0f 07 03 01 24 24 24 24 24 24 24 24
>3fff08	00 00 ff 00 00 ff 00 00 00 00 3f 20 20 27 24 24
>3fff18	00 00 ff 00 00 e7 24 24 00 00 fc 04 04 e4 24 24
>3fff28	24 24 27 20 20 3f 00 00 24 24 e7 00 00 ff 00 00
>3fff38	24 24 e4 04 04 fc 00 00 24 24 27 20 20 27 24 24
>3fff48	24 24 e4 04 04 e4 24 24 24 24 e7 00 00 e7 24 24
>3fff58	0f 0f 0f 0f f0 f0 f0 f0 01 03 07 0f 1f 3f 7f ff
>3fff68	80 c0 e0 f0 f8 fc fe ff 33 99 cc 66 33 99 cc 66
>3fff78	cc 99 33 66 cc 99 33 66 f0 f0 f0 f0 ff ff ff ff
>3fff88	0f 0f 0f 0f ff ff ff ff ff ff ff ff f0 f0 f0 f0
>3fff98	ff ff ff ff 0f 0f 0f 0f 05 0a 05 0a 00 00 00 00
>3fffa8	00 00 00 00 0a 05 0a 05 a0 50 a0 50 00 00 00 00
>3fffb8	00 00 00 00 a0 50 a0 50 0a 05 0a 05 0a 05 0a 05
>3fffc8	aa 55 aa 55 00 00 00 00 00 18 3c 7e 18 18 18 18
>3fffd8	00 10 30 7f 7f 30 10 00 00 08 0c fe fe 0c 08 00
>3fffe8	18 18 18 18 7e 3c 18 00 00 00 36 49 36 00 00 00
>3ffff8	00 00 00 00 00 00 00 00
>3a0000	5c 38 65 3a 5c 4a 4b 3a		.binary "binaries/basic816.bin"
>3a0008	5c 79 20 3a 5c 40 01 3a 5c 58 00 3a 5c d6 00 3a
>3a0018	5c 59 02 3a 5c e4 00 3a 5c ff 00 3a 5c 06 01 3a
>3a0028	0b 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 85 b3
>3a0038	c2 20 a5 a4 d0 06 e2 20 a5 a6 f0 11 c2 10 a4 a9
>3a0048	c4 a7 f0 09 e2 20 a5 b3 97 a4 c8 84 a9 28 2b 60
>3a0058	08 c2 10 e2 20 a9 01 20 1c 00 a2 00 00 a9 00 9f
>3a0068	00 4c 00 e8 e0 00 01 d0 f6 a2 00 00 20 14 00 c9
>3a0078	0d d0 03 4c cf 00 c9 9d d0 08 e0 00 00 f0 ed ca
>3a0088	80 39 c9 1d d0 0e bf 00 4c 00 f0 e0 e0 4f 00 f0
>3a0098	db e8 80 27 c9 08 d0 1a e0 00 00 f0 cf da bf 01
>3a00a8	4c 00 9f 00 4c 00 f0 06 e8 e0 ff 00 d0 f0 fa ca
>3a00b8	80 0e c9 20 90 b6 9f 00 4c 00 e8 20 18 00 80 ac
>3a00c8	a9 08 20 18 00 80 a5 a9 00 20 1c 00 28 60 22 4c
>3a00d8	10 00 60 20 14 00 48 20 18 00 68 60 08 e2 20 c9
>3a00e8	00 f0 08 af 10 00 af 09 01 80 06 af 10 00 af 29
>3a00f8	fe 8f 10 00 af 28 60 08 22 84 10 00 28 60 48 da
>3a0108	5a 0b 08 e2 20 c2 10 a2 00 00 a9 20 9f 00 a0 af
>3a0118	af 1e 00 00 9f 00 c0 af e8 e0 00 20 d0 ec 08 c2
>3a0128	20 48 a9 00 00 5b 68 28 a2 00 00 a0 00 00 22 84
>3a0138	10 00 28 2b 7a fa 68 60 da 5a 0b 08 08 c2 20 48
>3a0148	a9 00 08 5b 68 28 c2 30 af 0c 00 00 85 08 e2 20
>3a0158	af 0e 00 00 c2 20 29 ff 00 85 0a af 11 00 00 8f
>3a0168	08 01 00 af 1c 00 00 3a 8f 0a 01 00 18 a5 08 6f
>3a0178	0c 01 00 85 08 a5 0a 69 00 00 85 0a e2 20 af 0f
>3a0188	00 00 85 8d a0 00 00 a2 00 00 b7 08 9f 00 4f 00
>3a0198	e8 c8 c4 8d d0 f4 ca bf 00 4f 00 c9 20 d0 09 a9
>3a01a8	00 9f 00 4f 00 ca 10 ef 28 2b 7a fa 60 e2 20 a9
>3a01b8	48 8f 0f 00 00 a9 34 8f 13 00 00 a9 20 8f 08 00
>3a01c8	af 8f 09 00 af a2 00 00 a9 00 9f 10 f0 3a e8 e0
>3a01d8	12 00 d0 f6 a9 80 8f b2 08 00 e2 20 a9 00 8f 89
>3a01e8	0f 00 60 08 e2 20 48 48 a9 00 22 3c 10 00 68 22
>3a01f8	18 10 00 af 89 0f 00 29 01 d0 f8 68 28 60 08 e2
>3a0208	20 48 48 a9 01 22 3c 10 00 68 22 18 10 00 af 89
>3a0218	0f 00 29 01 d0 f8 68 28 60 08 c2 20 48 e2 20 a9
>3a0228	0d 20 18 00 c2 20 68 28 60 08 22 78 10 00 28 60
>3a0238	08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a5 b4
>3a0248	1a 85 b4 cf 13 00 00 90 05 20 14 00 64 b4 2b 28
>3a0258	60 da 5a 0b 08 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a0268	20 c2 10 8f b3 08 00 af b2 08 00 29 20 f0 07 af
>3a0278	b3 08 00 20 28 00 af b2 08 00 29 80 f0 07 af b3
>3a0288	08 00 20 eb 01 af b2 08 00 29 40 f0 14 af b3 08
>3a0298	00 20 06 02 af b3 08 00 c9 0d d0 05 a9 0a 20 06
>3a02a8	02 28 2b 7a fa 60 08 e2 20 bd 00 00 f0 06 20 18
>3a02b8	00 e8 80 f5 28 60 08 c2 20 48 48 4a 4a 4a 4a 4a
>3a02c8	4a 4a 4a 20 d8 02 68 29 ff 00 20 d8 02 68 28 60
>3a02d8	08 c2 20 48 e2 20 48 4a 4a 4a 4a 20 ef 02 68 20
>3a02e8	ef 02 c2 20 68 28 60 08 c2 30 da 29 0f 00 aa bf
>3a02f8	00 d0 3a 20 18 00 fa 28 60 08 e2 20 c9 5b b0 04
>3a0308	c9 41 b0 0b c9 7b b0 04 c9 61 b0 03 28 18 60 28
>3a0318	38 60 08 e2 20 c9 3a b0 04 c9 30 b0 03 28 18 60
>3a0328	28 38 60 08 e2 20 c9 3a b0 04 c9 30 b0 13 c9 67
>3a0338	b0 04 c9 61 b0 0b c9 47 b0 04 c9 41 b0 03 28 18
>3a0348	60 28 38 60 08 e2 20 c9 3a b0 04 c9 30 b0 12 c9
>3a0358	67 b0 04 c9 61 b0 0f c9 47 b0 04 c9 41 b0 09 28
>3a0368	60 38 e9 30 80 f9 29 df 38 e9 37 80 f2 08 e2 20
>3a0378	c9 7b b0 06 c9 61 90 02 29 df 28 60 08 e2 20 c2
>3a0388	10 bd 00 00 f0 09 20 75 03 9d 00 00 e8 80 f2 28
>3a0398	60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 20 48
>3a03a8	06 21 26 23 a5 21 85 0c a5 23 85 0e 06 0c 26 0e
>3a03b8	06 0c 26 0e 18 a5 21 65 0c 85 21 a5 23 65 0e 85
>3a03c8	23 68 2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68
>3a03d8	28 c2 20 a5 21 8f 12 01 00 a9 0a 00 8f 10 01 00
>3a03e8	af 14 01 00 85 21 64 23 af 16 01 00 85 27 64 29
>3a03f8	e2 20 a9 00 85 25 85 2b 2b 28 60 08 0b 08 c2 20
>3a0408	48 a9 00 08 5b 68 28 c2 20 a5 21 8f 12 01 00 a9
>3a0418	64 00 8f 10 01 00 af 14 01 00 85 21 64 23 af 16
>3a0428	01 00 85 27 64 29 e2 20 a9 00 85 25 85 2b 2b 28
>3a0438	60 08 c2 20 a5 21 d0 08 a5 23 d0 04 28 e2 02 60
>3a0448	28 c2 02 60 08 e2 20 a5 25 c9 00 d0 02 28 60 08
>3a0458	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08
>3a0468	00 c2 20 29 ff 00 20 53 18 e2 20 dc d2 08 08 e2
>3a0478	20 a5 25 c9 02 d0 02 28 60 08 c2 20 48 a9 00 08
>3a0488	5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00
>3a0498	20 53 18 e2 20 dc d2 08 08 e2 20 a5 25 c9 00 d0
>3a04a8	08 c2 20 a5 23 d0 21 28 60 08 c2 20 48 a9 00 08
>3a04b8	5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00
>3a04c8	20 53 18 e2 20 dc d2 08 08 c2 20 48 a9 00 08 5b
>3a04d8	68 28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff 00 20
>3a04e8	53 18 e2 20 dc d2 08 08 e2 20 a5 25 c9 00 d0 0e
>3a04f8	a5 24 d0 29 a5 23 d0 25 a5 22 d0 21 28 60 08 c2
>3a0508	20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00
>3a0518	c2 20 29 ff 00 20 53 18 e2 20 dc d2 08 08 c2 20
>3a0528	48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08 00 c2
>3a0538	20 29 ff 00 20 53 18 e2 20 dc d2 08 08 0b 08 c2
>3a0548	20 48 a9 00 08 5b 68 28 c2 30 64 21 64 23 e2 20
>3a0558	64 25 a7 00 c9 26 f0 44 e2 20 a7 00 20 1a 03 90
>3a0568	76 20 99 03 38 e9 30 c2 20 29 ff 00 18 65 21 85
>3a0578	21 a5 23 69 00 00 85 23 20 de 1a 80 db 08 c2 20
>3a0588	48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2
>3a0598	20 29 ff 00 20 53 18 e2 20 dc d2 08 20 de 1a a7
>3a05a8	00 c9 48 f0 04 c9 68 d0 d4 20 de 1a e2 20 a7 00
>3a05b8	20 2b 03 90 22 20 4c 03 c2 20 06 21 26 23 06 21
>3a05c8	26 23 06 21 26 23 06 21 26 23 29 ff 00 18 65 21
>3a05d8	85 21 20 de 1a 80 d5 2b 28 60 08 c2 30 38 a5 04
>3a05e8	e5 18 a8 e2 20 b7 18 f0 10 c9 20 f0 06 c9 09 f0
>3a05f8	02 28 60 88 c0 ff ff d0 ec a9 00 60 08 0b 08 c2
>3a0608	20 48 a9 00 08 5b 68 28 c2 30 a5 18 85 00 e2 20
>3a0618	a5 1a 85 02 20 ff 1a a7 00 20 1a 03 90 0c 20 44
>3a0628	05 c2 20 a5 21 85 d5 20 ff 1a c2 20 a5 00 85 18
>3a0638	e2 20 a5 02 85 1a 20 52 06 e2 20 20 c3 06 c9 00
>3a0648	f0 05 20 4c 08 80 f4 2b 28 60 08 c2 20 a5 18 85
>3a0658	00 a5 1a 85 02 a2 00 00 e2 20 a0 00 00 e0 00 00
>3a0668	f0 0d b7 00 f0 53 c9 3a f0 04 c9 20 d0 33 c8 b7
>3a0678	00 f0 46 c9 52 f0 10 c9 72 d0 26 b7 00 f0 3a c9
>3a0688	52 f0 04 c9 72 d0 1a c8 b7 00 f0 2d c9 45 f0 04
>3a0698	c9 65 d0 0d c8 b7 00 f0 20 c9 4d f0 0a c9 6d f0
>3a06a8	06 e8 20 de 1a 80 b3 a7 00 c9 3a d0 03 20 de 1a
>3a06b8	a9 03 85 1c a9 8e 20 4c 08 28 60 08 0b 08 c2 20
>3a06c8	48 a9 00 08 5b 68 28 e2 20 a9 7f 85 1c c2 10 20
>3a06d8	01 08 a5 1c d0 03 4c 66 07 c2 20 a5 18 85 00 e2
>3a06e8	20 a5 1a 85 02 c2 20 64 04 64 06 e2 30 a0 00 b7
>3a06f8	00 f0 da c9 8e f0 d6 c8 c4 1c 90 f3 c2 10 a7 00
>3a0708	c9 22 d0 05 20 88 07 80 28 a5 1c c9 01 f0 19 c2
>3a0718	20 a5 00 c5 18 d0 08 e2 20 a5 02 c5 1a f0 09 e2
>3a0728	20 a7 04 20 67 3d b0 09 e2 20 20 98 07 c9 00 d0
>3a0738	11 c2 20 a5 00 85 04 e2 20 a5 02 85 06 20 de 1a
>3a0748	80 a9 c9 81 d0 18 20 e2 05 c9 00 f0 14 89 80 10
>3a0758	0b 20 ed 08 c9 30 f0 04 a9 af 80 02 a9 81 2b 28
>3a0768	60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a0778	d1 08 00 c2 20 29 ff 00 20 53 18 e2 20 dc d2 08
>3a0788	08 e2 20 20 de 1a a7 00 f0 04 c9 22 d0 f5 28 60
>3a0798	08 0b c2 30 da 5a 08 c2 20 48 a9 00 08 5b 68 28
>3a07a8	a9 17 09 85 08 e2 20 a9 3a 85 0a a2 80 00 e2 20
>3a07b8	a0 01 00 b7 08 f0 26 c5 1c d0 29 c2 30 a0 02 00
>3a07c8	b7 08 85 0c e2 20 a9 3a 85 0e e2 10 a0 00 b7 00
>3a07d8	20 75 03 d7 0c d0 0d c8 c4 1c 90 f2 8a c2 10 7a
>3a07e8	fa 2b 28 60 c2 30 18 a5 08 69 08 00 85 08 e2 20
>3a07f8	a5 0a 69 00 85 0a e8 80 b5 08 0b 8b 08 c2 20 48
>3a0808	a9 00 08 5b 68 28 c2 30 a9 17 09 85 08 a9 3a 00
>3a0818	85 0a 64 0c e2 20 a0 01 00 b7 08 f0 1d c5 1c b0
>3a0828	06 c5 0c 90 02 85 0c c2 20 18 a5 08 69 08 00 85
>3a0838	08 a5 0a 69 00 00 85 0a 80 da e2 20 a5 0c 85 1c
>3a0848	ab 2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28
>3a0858	e2 20 87 00 c2 20 18 a5 00 69 01 00 85 08 a5 02
>3a0868	69 00 00 85 0a e2 10 a4 1c 88 e2 20 b7 08 87 08
>3a0878	f0 13 c2 20 18 a5 08 69 01 00 85 08 a5 0a 69 00
>3a0888	00 85 0a 80 e5 2b 28 60 08 c2 30 29 7f 00 0a 0a
>3a0898	0a 18 69 17 09 aa 28 60 08 8b 0b 08 c2 20 48 a9
>3a08a8	00 08 5b 68 28 08 e2 20 48 a9 3a 48 ab 68 28 e2
>3a08b8	20 c2 10 20 90 08 bd 00 00 c2 20 29 0f 00 2b ab
>3a08c8	28 60 08 8b 0b 08 c2 20 48 a9 00 08 5b 68 28 08
>3a08d8	e2 20 48 a9 3a 48 ab 68 28 c2 30 20 90 08 bd 04
>3a08e8	00 2b ab 28 60 08 8b 0b 08 c2 20 48 a9 00 08 5b
>3a08f8	68 28 08 e2 20 48 a9 3a 48 ab 68 28 e2 20 c2 10
>3a0908	20 90 08 bd 00 00 c2 20 29 f0 00 2b ab 28 60 03
>3a0918	01 10 d0 0c 21 00 00 03 01 12 d0 4b 21 00 00 02
>3a0928	01 14 d0 59 21 00 00 02 01 16 d0 72 21 00 00 02
>3a0938	03 18 d0 85 21 00 00 00 01 1c d0 00 00 00 00 04
>3a0948	01 1e d0 c7 21 00 00 04 01 20 d0 fd 21 00 00 04
>3a0958	01 22 d0 e2 21 00 00 05 03 24 d0 b6 21 00 00 06
>3a0968	03 28 d0 98 21 00 00 07 02 2c d0 a7 21 00 00 ff
>3a0978	01 2f d0 00 00 00 00 40 01 31 d0 00 00 00 00 20
>3a0988	03 33 d0 60 2f 00 00 20 05 37 d0 65 33 00 00 20
>3a0998	03 3d d0 b0 32 00 00 20 04 41 d0 50 32 00 00 20
>3a09a8	03 46 d0 47 32 00 00 20 02 4a d0 df 31 00 00 50
>3a09b8	04 4d d0 00 00 00 00 50 04 52 d0 00 00 00 00 20
>3a09c8	05 57 d0 22 31 00 00 20 06 5d d0 9b 31 00 00 20
>3a09d8	03 64 d0 77 2f 00 00 50 02 68 d0 00 00 00 00 50
>3a09e8	04 6b d0 00 00 00 00 20 04 70 d0 6b 30 00 00 20
>3a09f8	02 75 d0 71 2f 00 00 20 04 78 d0 74 2f 00 00 50
>3a0a08	05 7d d0 00 00 00 00 50 05 83 d0 00 00 00 00 20
>3a0a18	04 89 d0 6e 2f 00 00 20 03 8e d0 a6 32 00 00 20
>3a0a28	04 92 d0 41 2f 00 00 20 04 97 d0 d1 2e 00 00 20
>3a0a38	05 9c d0 67 2e 00 00 20 05 a2 d0 f4 2d 00 00 20
>3a0a48	03 a8 d0 f0 2d 00 00 20 04 ac d0 d1 2c 00 00 20
>3a0a58	04 b1 d0 e3 2d 00 00 20 07 b6 d0 e7 2d 00 00 20
>3a0a68	03 be d0 24 2c 00 00 20 04 c2 d0 8d 2b 00 00 04
>3a0a78	02 c7 d0 50 22 00 00 04 02 ca d0 33 22 00 00 04
>3a0a88	02 cd d0 18 22 00 00 30 01 d0 d0 ff 34 00 00 30
>3a0a98	03 d2 d0 19 39 00 00 30 04 d6 d0 69 39 00 00 30
>3a0aa8	05 db d0 fa 39 00 00 30 05 e1 d0 ac 39 00 00 30
>3a0ab8	04 e7 d0 39 3a 00 00 30 03 ec d0 8e 3a 00 00 30
>3a0ac8	03 f0 d0 d3 3a 00 00 30 03 f4 d0 5c 3b 00 00 30
>3a0ad8	03 f8 d0 e5 3b 00 00 30 03 fc d0 15 3c 00 00 30
>3a0ae8	04 00 d1 88 38 00 00 30 03 05 d1 27 38 00 00 30
>3a0af8	04 09 d1 d6 37 00 00 30 03 0e d1 80 37 00 00 30
>3a0b08	05 12 d1 b7 36 00 00 30 06 18 d1 d6 35 00 00 30
>3a0b18	04 1f d1 21 35 00 00 10 03 24 d1 a3 3c 00 00 10
>3a0b28	03 28 d1 6e 3c 00 00 10 04 2c d1 8f 47 00 00 10
>3a0b38	04 31 d1 ba 3c 00 00 10 03 36 d1 8d 44 00 00 20
>3a0b48	05 3a d1 61 46 00 00 10 04 40 d1 3c 47 00 00 20
>3a0b58	05 45 d1 46 48 00 00 20 03 4b d1 65 49 00 00 10
>3a0b68	04 4f d1 d2 48 00 00 20 06 54 d1 db 49 00 00 10
>3a0b78	07 5b d1 6b 3c 00 00 20 03 63 d1 19 2b 00 00 20
>3a0b88	05 67 d1 4b 2a 00 00 20 09 6d d1 d2 23 00 00 20
>3a0b98	09 77 d1 6d 23 00 00 20 0a 81 d1 9b 23 00 00 20
>3a0ba8	07 8c d1 da 22 00 00 30 08 94 d1 2a 34 00 00 20
>3a0bb8	07 9d d1 6f 22 00 00 30 08 a5 d1 97 34 00 00 20
>3a0bc8	08 ae d1 e3 24 00 00 20 08 b7 d1 3f 24 00 00 20
>3a0bd8	06 c0 d1 44 25 00 00 20 09 c7 d1 0c 26 00 00 20
>3a0be8	04 d1 d1 9f 27 00 00 20 04 d6 d1 e5 27 00 00 20
>3a0bf8	04 db d1 4b 28 00 00 20 06 e0 d1 f1 28 00 00 20
>3a0c08	08 e7 d1 7e 29 00 00 20 0a f0 d1 b2 29 00 00 00
>3a0c18	00 00 00 00 00 00 00 08 0b 08 c2 20 48 a9 00 08
>3a0c28	5b 68 28 c2 30 a9 ff ff 85 b8 e2 20 a9 37 85 ba
>3a0c38	c2 20 64 b5 64 bb e2 20 64 b7 64 bd 2b 28 60 5a
>3a0c48	08 e2 20 85 e8 c2 10 86 8d c2 20 a5 0e 48 a5 0c
>3a0c58	48 a5 12 48 a5 10 48 20 f7 0c b0 03 20 7b 0c 20
>3a0c68	83 0e c2 20 68 85 10 68 85 12 68 85 0c 68 85 0e
>3a0c78	28 7a 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a0c88	20 a6 8d ca 86 0c e8 c2 30 38 a5 b8 e5 0c 85 be
>3a0c98	e2 20 a5 ba e9 00 85 c0 20 83 0e e2 20 a5 e8 a0
>3a0ca8	00 00 97 c1 a9 00 a0 01 00 97 c1 a0 02 00 97 c1
>3a0cb8	c2 20 a9 00 00 97 c1 c2 20 18 a5 b8 69 01 00 a0
>3a0cc8	05 00 97 c1 e2 20 c8 c8 a5 ba 69 00 97 c1 c2 20
>3a0cd8	a5 be 85 b5 e2 20 a5 c0 85 b7 c2 20 38 a5 c1 e9
>3a0ce8	01 00 85 b8 e2 20 a5 c3 e9 00 85 ba 2b 28 60 08
>3a0cf8	0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 c2 20 a5
>3a0d08	bb 85 c7 e2 20 a5 bd 85 c9 a5 c7 d0 17 e2 20 a5
>3a0d18	c9 d0 11 c2 20 a9 00 00 85 cd e2 20 a9 00 85 cf
>3a0d28	2b 28 18 60 c2 20 a0 05 00 b7 c7 85 ca e2 20 c8
>3a0d38	c8 b7 c7 85 cc c2 20 18 a5 c7 65 8d 85 0c e2 20
>3a0d48	a5 c9 69 00 85 0e c2 20 18 a5 0c 69 08 00 85 0c
>3a0d58	e2 20 a5 0e 69 00 85 0e c2 20 a5 0c c5 ca d0 28
>3a0d68	e2 20 a5 0e c5 cc d0 20 c2 20 a5 cd d0 5d e2 20
>3a0d78	a5 cf d0 57 c2 20 a0 02 00 b7 c7 85 bb e2 20 c8
>3a0d88	c8 b7 c7 85 bd 4c 34 0e c2 20 a5 0c 69 08 00 85
>3a0d98	10 e2 20 a5 0e 69 00 85 12 e2 20 a5 c4 c5 10 b0
>3a0da8	3e 90 08 c2 20 a5 c4 c5 10 b0 34 c2 20 a5 c7 85
>3a0db8	cd e2 20 a5 c9 85 cf c2 20 a0 02 00 b7 cd 85 c7
>3a0dc8	e2 20 c8 c8 b7 cd 85 c9 4c 11 0d c2 20 a0 02 00
>3a0dd8	b7 c7 97 cd e2 20 c8 c8 b7 c7 97 cd 4c 34 0e c2
>3a0de8	20 a0 05 00 b7 c7 97 0c e2 20 c8 c8 b7 c7 97 0c
>3a0df8	c2 20 a0 02 00 b7 c7 97 0c e2 20 c8 c8 b7 c7 97
>3a0e08	0c c2 20 a5 cd d0 14 e2 20 a5 cd d0 0e c2 20 a5
>3a0e18	0c 85 bb e2 20 a5 0e 85 bd 80 11 c2 20 a0 02 00
>3a0e28	a5 0c 97 cd e2 20 c8 c8 a5 0e 97 cd c2 20 a5 c7
>3a0e38	85 c1 e2 20 a5 c9 85 c3 c2 20 a5 c1 85 b5 e2 20
>3a0e48	a5 c3 85 b7 c2 20 a0 05 00 a5 0c 97 c1 e2 20 c8
>3a0e58	c8 a5 0e 97 c1 c2 20 a0 02 00 a9 00 00 97 c1 e2
>3a0e68	20 c8 c8 97 c1 e2 20 a5 e8 e2 20 a0 00 00 97 c1
>3a0e78	a0 01 00 a9 00 97 c1 2b 28 38 60 08 c2 20 38 a5
>3a0e88	be e9 08 00 85 c1 e2 20 a5 c0 e9 00 85 c3 28 60
>3a0e98	08 e2 20 a5 c3 f0 04 c9 38 b0 12 c2 20 a5 c1 f0
>3a0ea8	0c e2 20 a0 01 00 b7 c1 1a 97 c1 28 60 00 ea 08
>3a0eb8	e2 20 a5 c3 f0 04 c9 38 b0 17 c2 20 a5 c1 f0 11
>3a0ec8	e2 20 a0 01 00 b7 c1 3a 97 c1 d0 03 20 db 0e 28
>3a0ed8	60 00 ea 08 c2 20 a5 bb d0 21 e2 20 a5 bd d0 1b
>3a0ee8	a5 c3 85 bd c2 20 a5 c1 85 bb a9 00 00 a0 02 00
>3a0ef8	97 c1 c8 c8 e2 20 97 c1 4c c2 0f e2 20 a5 bd c5
>3a0f08	c3 90 28 c2 20 a5 bb c5 c1 90 20 c2 20 a5 bb a0
>3a0f18	02 00 97 c1 e2 20 c8 c8 a5 bd 97 c1 c2 20 a5 c1
>3a0f28	85 bb e2 20 a5 c3 85 bd 4c c2 0f c2 20 a5 bb 85
>3a0f38	08 e2 20 a5 bd 85 0a e2 20 a0 04 00 b7 08 c5 c6
>3a0f48	90 32 d0 0b c2 20 a0 02 00 b7 08 c5 c4 90 25 c2
>3a0f58	20 a0 02 00 b7 08 97 c1 e2 20 c8 c8 b7 08 97 c1
>3a0f68	c2 20 a5 c1 a0 02 00 97 08 e2 20 a5 c3 c8 c8 97
>3a0f78	08 4c c2 0f c2 20 a0 02 00 b7 08 d0 08 e2 20 c8
>3a0f88	c8 b7 08 f0 19 c2 20 a0 02 00 b7 08 85 0c e2 20
>3a0f98	c8 c8 b7 08 85 0a c2 20 a5 0c 85 08 80 99 c2 20
>3a0fa8	a5 c1 a0 02 00 97 08 e2 20 c8 c8 a5 c3 97 08 a9
>3a0fb8	00 97 c1 c2 20 a0 02 00 97 c1 20 c7 0f 28 60 08
>3a0fc8	c2 20 a5 bb 85 c1 e2 20 a5 bd 85 c3 c2 20 a5 c1
>3a0fd8	d0 09 e2 20 a5 c3 d0 03 4c 6a 10 c2 20 a0 02 00
>3a0fe8	b7 c1 85 0c e2 20 c8 c8 b7 c1 85 0e c2 20 a0 05
>3a0ff8	00 b7 c1 85 10 e2 20 c8 c8 b7 c1 85 12 c2 20 a5
>3a1008	0c c5 10 d0 08 e2 20 a5 0e c5 12 f0 1f c2 20 a0
>3a1018	02 00 b7 c1 85 0c e2 20 c8 c8 b7 c1 85 0e c2 20
>3a1028	a5 0c 85 c1 e2 20 a5 0e 85 c3 80 a0 c2 20 a0 02
>3a1038	00 b7 c1 85 0c e2 20 c8 c8 b7 c1 85 0e c2 20 a0
>3a1048	02 00 b7 0c 97 c1 e2 20 c8 c8 b7 0c 97 c1 c2 20
>3a1058	a0 05 00 b7 0c 97 c1 e2 20 c8 c8 b7 0c 97 c1 4c
>3a1068	e3 0f 28 60 08 c2 10 e2 20 64 14 a5 e0 1a 1a 85
>3a1078	15 e2 20 a5 e1 85 16 c5 ba 90 29 f0 08 c2 20 a5
>3a1088	14 c5 b8 90 1f 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a1098	20 a9 03 8f d1 08 00 c2 20 29 ff 00 20 53 18 e2
>3a10a8	20 dc d2 08 28 60 c9 00 d0 05 c0 01 00 f0 05 09
>3a10b8	30 97 14 c8 60 08 c2 30 64 0c a5 23 10 1a 18 a5
>3a10c8	21 49 ff ff 69 01 00 85 21 a5 23 49 ff ff 69 00
>3a10d8	00 85 23 a9 ff ff 85 0c 64 10 64 12 a2 1f 00 f8
>3a10e8	06 21 26 23 a5 10 65 10 85 10 a5 12 65 12 85 12
>3a10f8	ca 10 ed d8 e2 20 20 6c 10 a0 00 00 a5 0c f0 04
>3a1108	a9 2d 80 02 a9 20 97 14 c8 a2 03 00 b5 10 29 f0
>3a1118	4a 4a 4a 4a 20 ae 10 b5 10 29 0f 20 ae 10 ca 10
>3a1128	eb c0 01 00 d0 0c a9 20 87 14 a0 01 00 a9 30 97
>3a1138	14 c8 a9 00 97 14 28 60 00 ea 08 e2 20 c2 10 a0
>3a1148	00 00 bd 00 00 f0 04 e8 c8 80 f7 28 60 08 0b 8b
>3a1158	08 c2 20 48 a9 00 08 5b 68 28 e2 20 c2 10 08 c2
>3a1168	20 48 e2 20 a5 23 48 ab c2 20 68 28 a6 21 20 42
>3a1178	11 84 0c 08 c2 20 48 e2 20 a5 29 48 ab c2 20 68
>3a1188	28 a6 27 20 42 11 c2 20 98 38 65 0c aa e2 20 a9
>3a1198	02 20 47 0c c2 20 a5 b5 85 08 e2 20 a5 b7 85 0a
>3a11a8	a0 00 00 08 c2 20 48 e2 20 a5 23 48 ab c2 20 68
>3a11b8	28 a6 21 bd 00 00 f0 06 97 08 e8 c8 80 f5 e2 20
>3a11c8	08 c2 20 48 e2 20 a5 29 48 ab c2 20 68 28 a6 27
>3a11d8	bd 00 00 97 08 f0 04 e8 c8 80 f5 c2 20 a5 08 85
>3a11e8	21 e2 20 a5 0a 85 23 a9 02 85 25 ab 2b 28 60 08
>3a11f8	0b 8b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 08 c2
>3a1208	20 48 e2 20 a5 23 48 ab c2 20 68 28 a6 21 20 42
>3a1218	11 98 aa e8 e2 20 a9 02 20 47 0c c2 20 a5 be 85
>3a1228	08 e2 20 a5 c0 85 0a a0 00 00 b7 21 97 08 f0 03
>3a1238	c8 80 f7 a5 08 85 21 a5 09 85 22 a5 0a 85 23 a9
>3a1248	00 85 24 ab 2b 28 60 08 e2 20 c2 10 a0 00 00 b7
>3a1258	21 f0 05 c8 80 f9 84 90 c2 30 c4 27 90 13 f0 11
>3a1268	a5 8d 30 0d f0 0b c4 8d b0 12 a5 27 d0 0e 4c d0
>3a1278	12 20 6c 10 e2 20 a9 00 87 14 80 39 20 6c 10 c2
>3a1288	30 18 a5 21 65 27 85 21 a5 23 69 00 00 85 23 a0
>3a1298	00 00 e2 20 a7 21 97 14 f0 1b c2 20 18 a5 21 69
>3a12a8	01 00 85 21 a5 23 69 00 00 85 23 c8 c4 8d d0 e2
>3a12b8	a9 00 00 97 14 c2 20 a5 14 85 21 a5 16 85 23 e2
>3a12c8	20 a9 02 85 25 20 f7 11 28 60 48 5a 0b 08 08 c2
>3a12d8	20 48 a9 00 08 5b 68 28 c2 30 a9 00 00 85 00 85
>3a12e8	18 a9 36 00 85 02 85 1a ad 8a 0f 30 20 a0 02 00
>3a12f8	b7 18 f0 0f c5 53 90 10 c5 57 f0 02 b0 05 20 34
>3a1308	13 80 e5 28 2b 7a 68 60 20 bb 1b 80 db 08 c2 20
>3a1318	48 a9 00 08 5b 68 28 e2 20 a9 01 8f d1 08 00 c2
>3a1328	20 29 ff 00 20 53 18 e2 20 dc d2 08 08 c2 30 85
>3a1338	21 64 23 20 bd 10 a5 14 1a 85 21 a5 16 85 23 20
>3a1348	da 33 18 a5 18 69 04 00 85 00 a5 1a 69 00 00 85
>3a1358	02 e2 20 a9 20 20 18 00 c2 20 20 73 13 90 fb e2
>3a1368	20 a9 0d 20 18 00 20 bb 1b 28 60 08 0b 8b 08 c2
>3a1378	20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab
>3a1388	68 28 e2 20 c2 10 a7 00 f0 3a 30 05 20 18 00 80
>3a1398	29 c2 20 29 7f 00 0a 0a 0a 18 69 17 09 85 08 a9
>3a13a8	3a 00 69 00 00 85 0a 08 e2 20 48 a9 3a 48 ab 68
>3a13b8	28 a0 02 00 b7 08 aa 20 ae 02 c2 20 20 de 1a ab
>3a13c8	2b 28 18 60 ab 2b 28 38 60 08 c2 20 a9 ff 6f 85
>3a13d8	1d a9 ff 7f 85 1f a9 ff ff 85 21 85 23 85 27 85
>3a13e8	29 e2 20 85 25 85 2b 28 60 08 0b 8b 08 c2 20 48
>3a13f8	a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28
>3a1408	c2 30 5a a4 1d bd 00 00 99 00 00 bd 02 00 99 02
>3a1418	00 e2 20 bd 04 00 99 04 00 c2 20 38 98 e9 05 00
>3a1428	85 1d 7a ab 2b 28 60 08 0b 8b 08 c2 20 48 a9 00
>3a1438	08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 30
>3a1448	5a 18 a5 1d 69 05 00 85 1d a8 b9 00 00 9d 00 00
>3a1458	b9 02 00 9d 02 00 e2 20 b9 04 00 9d 04 00 bd 00
>3a1468	00 7a ab 2b 28 60 08 0b 8b 08 c2 20 48 a9 00 08
>3a1478	5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 e2 20 c2
>3a1488	10 5a a4 1f 99 00 00 88 84 1f 7a ab 2b 28 60 08
>3a1498	0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48
>3a14a8	a9 00 48 ab 68 28 e2 20 c2 10 5a a4 1f c8 84 1f
>3a14b8	b9 00 00 c2 20 29 ff 00 7a ab 2b 28 60 08 e2 20
>3a14c8	a9 01 20 6e 14 28 60 5a 08 8b 08 e2 20 48 a9 00
>3a14d8	48 ab 68 28 e2 20 a4 1f b9 01 00 c9 01 d0 08 c2
>3a14e8	20 e6 1f ab 28 7a 60 08 c2 20 48 a9 00 08 5b 68
>3a14f8	28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00 20 53
>3a1508	18 e2 20 dc d2 08 08 0b 8b c2 20 48 08 c2 20 48
>3a1518	a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28
>3a1528	e2 20 c2 10 a4 1f c0 ff 7f f0 11 20 a0 08 85 0c
>3a1538	b9 01 00 20 a0 08 c5 0c f0 02 90 08 c2 20 68 ab
>3a1548	2b 28 18 60 c2 20 68 ab 2b 28 38 60 4c 44 05 08
>3a1558	e2 20 a9 00 8f 00 4d 00 a2 01 00 20 01 17 20 a0
>3a1568	04 c2 20 a5 21 9f 00 4d 00 e2 20 af 00 4d 00 1a
>3a1578	30 3e 8f 00 4d 00 e8 e8 20 ff 1a e2 20 a7 00 c9
>3a1588	8d f0 09 c9 2c d0 0a 20 de 1a 80 cf 20 de 1a 28
>3a1598	60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a15a8	d1 08 00 c2 20 29 ff 00 20 53 18 e2 20 dc d2 08
>3a15b8	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d1
>3a15c8	08 00 c2 20 29 ff 00 20 53 18 e2 20 dc d2 08 08
>3a15d8	20 e5 3f 90 23 e2 20 a5 e8 29 80 d0 06 20 3b 3e
>3a15e8	4c fe 15 e2 20 a9 8c 20 eb 1b 20 c5 14 20 57 15
>3a15f8	20 cc 42 20 cf 14 28 60 08 c2 20 48 a9 00 08 5b
>3a1608	68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00 20
>3a1618	53 18 e2 20 dc d2 08 08 0b 08 c2 20 48 a9 00 08
>3a1628	5b 68 28 e2 20 c2 10 20 de 1a a0 00 00 b7 00 f0
>3a1638	24 c9 22 f0 03 c8 80 f5 84 0c e2 20 a9 02 a6 0c
>3a1648	e8 20 47 0c a0 00 00 c4 0c f0 29 a7 00 97 be c8
>3a1658	20 de 1a 80 f2 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a1668	20 a9 02 8f d1 08 00 c2 20 29 ff 00 20 53 18 e2
>3a1678	20 dc d2 08 a9 00 97 be c2 20 a5 be 85 21 e2 20
>3a1688	a5 c0 85 23 a9 02 85 25 20 de 1a 2b 28 60 08 e2
>3a1698	20 a7 00 c2 20 29 ff 00 20 ca 08 85 2d 20 c5 14
>3a16a8	08 e2 20 48 a9 00 48 ab 68 28 20 ba 16 20 cf 14
>3a16b8	28 60 20 de 1a 6c 2d 08 08 0b 8b c2 20 48 08 c2
>3a16c8	20 48 a9 00 08 5b 68 28 c2 30 a2 27 08 20 2f 14
>3a16d8	a2 21 08 20 2f 14 20 97 14 20 ca 08 85 2d 08 e2
>3a16e8	20 48 a9 00 48 ab 68 28 20 fe 16 a2 21 08 20 f1
>3a16f8	13 68 ab 2b 28 60 6c 2d 08 08 08 c2 20 48 a9 00
>3a1708	08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 10
>3a1718	da e2 20 a7 00 d0 03 4c c4 17 30 33 c9 20 d0 03
>3a1728	4c be 17 c9 3a b0 04 c9 30 b0 56 c9 26 f0 52 c9
>3a1738	22 d0 03 4c d7 17 c9 5b b0 07 c9 41 90 03 4c e3
>3a1748	17 c9 7b b0 07 c9 61 90 03 4c e3 17 4c c4 17 c9
>3a1758	8c f0 40 c9 8d f0 41 20 ed 08 c9 30 d0 0c 20 96
>3a1768	16 a2 21 08 20 f1 13 4c 19 17 c9 00 d0 4e a7 00
>3a1778	a6 1f e0 ff 7f f0 05 20 0e 15 b0 12 20 6e 14 80
>3a1788	35 c2 20 20 54 15 a2 21 08 20 f1 13 80 83 20 c0
>3a1798	16 80 dd 20 6e 14 80 1e e2 20 a4 1f c0 ff 7f f0
>3a17a8	46 a4 1f b9 01 00 c9 01 f0 3d c9 8c f0 05 20 c0
>3a17b8	16 80 ee 20 97 14 20 de 1a 4c 19 17 a6 1f e0 ff
>3a17c8	7f b0 24 bd 01 00 c9 01 f0 1d 20 c0 16 80 ed 20
>3a17d8	1f 16 a2 21 08 20 f1 13 4c 19 17 20 d7 15 a2 21
>3a17e8	08 20 f1 13 4c 19 17 a2 21 08 20 2f 14 fa 28 60
>3a17f8	08 0b 8b 08 e2 20 48 a9 00 48 ab 68 28 08 c2 20
>3a1808	48 a9 00 08 5b 68 28 c2 30 a9 fd 5f 85 31 ab 2b
>3a1818	28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30
>3a1828	92 31 c6 31 c6 31 2b 28 60 08 c2 30 29 ff 00 20
>3a1838	1a 18 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28
>3a1848	c2 30 e6 31 e6 31 b2 31 2b 28 60 8b 0b 08 08 c2
>3a1858	20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab
>3a1868	68 28 c2 20 85 21 a9 00 00 85 23 e2 20 a9 00 85
>3a1878	25 85 e8 a9 3a 85 e7 c2 20 a9 ad 18 85 e5 20 82
>3a1888	3f c2 20 a5 d5 85 21 a5 d7 85 23 e2 20 a9 00 85
>3a1898	25 85 e8 a9 3a 85 e7 c2 20 a9 b1 18 85 e5 20 82
>3a18a8	3f 28 2b ab 60 45 52 52 00 45 52 4c 00 e2 20 c2
>3a18b8	10 20 21 02 af d1 08 00 0a c2 20 29 ff 00 a8 08
>3a18c8	e2 20 48 a9 3a 48 ab 68 28 be 07 19 20 ae 02 c2
>3a18d8	20 a5 d5 f0 27 a2 33 19 20 ae 02 08 e2 20 48 a9
>3a18e8	00 48 ab 68 28 c2 20 af d5 08 00 8f 21 08 00 a9
>3a18f8	00 00 8f 23 08 00 20 fa 33 20 21 02 4c c1 20 37
>3a1908	19 3a 19 40 19 4d 19 5b 19 69 19 7c 19 92 19 a2
>3a1918	19 b1 19 be 19 cf 19 de 19 eb 19 f9 19 08 1a 19
>3a1928	1a 32 1a 46 1a 5a 1a 70 1a 84 1a 20 61 74 00 4f
>3a1938	4b 00 42 72 65 61 6b 00 53 79 6e 74 61 78 20 65
>3a1948	72 72 6f 72 00 4f 75 74 20 6f 66 20 6d 65 6d 6f
>3a1958	72 79 00 54 79 70 65 20 6d 69 73 6d 61 74 63 68
>3a1968	00 56 61 72 69 61 62 6c 65 20 6e 6f 74 20 66 6f
>3a1978	75 6e 64 00 4c 69 6e 65 20 6e 75 6d 62 65 72 20
>3a1988	6e 6f 74 20 66 6f 75 6e 64 00 53 74 61 63 6b 20
>3a1998	75 6e 64 65 72 66 6c 6f 77 00 53 74 61 63 6b 20
>3a19a8	6f 76 65 72 66 6c 6f 77 00 4f 75 74 20 6f 66 20
>3a19b8	72 61 6e 67 65 00 49 6c 6c 65 67 61 6c 20 61 72
>3a19c8	67 75 6d 65 6e 74 00 46 69 6c 65 20 6e 6f 74 20
>3a19d8	66 6f 75 6e 64 00 4e 6f 74 20 61 20 6e 75 6d 62
>3a19e8	65 72 00 4d 61 74 68 20 6f 76 65 72 66 6c 6f 77
>3a19f8	00 4d 61 74 68 20 75 6e 64 65 72 66 6c 6f 77 00
>3a1a08	44 69 76 69 73 69 6f 6e 20 62 79 20 7a 65 72 6f
>3a1a18	00 55 6e 61 62 6c 65 20 74 6f 20 72 65 61 64 20
>3a1a28	64 69 72 65 63 74 6f 72 79 00 55 6e 61 62 6c 65
>3a1a38	20 74 6f 20 6c 6f 61 64 20 66 69 6c 65 00 55 6e
>3a1a48	61 62 6c 65 20 74 6f 20 73 61 76 65 20 66 69 6c
>3a1a58	65 00 55 6e 61 62 6c 65 20 74 6f 20 64 65 6c 65
>3a1a68	74 65 20 66 69 6c 65 00 43 6f 75 6c 64 20 6e 6f
>3a1a78	74 20 66 69 6e 64 20 66 69 6c 65 00 43 6f 75 6c
>3a1a88	64 20 6e 6f 74 20 75 70 64 61 74 65 20 64 69 72
>3a1a98	65 63 74 6f 72 79 00 08 0b 08 c2 20 48 a9 00 08
>3a1aa8	5b 68 28 e2 20 a9 00 85 d0 2b 28 60 0b 08 08 c2
>3a1ab8	20 48 a9 00 08 5b 68 28 08 c2 20 a9 b5 18 8f d2
>3a1ac8	08 00 e2 20 a9 3a 8f d4 08 00 28 20 a6 32 20 e7
>3a1ad8	2d 64 2f 28 2b 60 08 0b 08 c2 20 48 a9 00 08 5b
>3a1ae8	68 28 c2 20 18 a5 00 69 01 00 85 00 e2 20 a5 02
>3a1af8	69 00 85 02 2b 28 60 08 0b 08 c2 20 48 a9 00 08
>3a1b08	5b 68 28 e2 20 a7 00 f0 0f c9 20 f0 06 c9 09 f0
>3a1b18	02 80 05 20 de 1a 80 ed 2b 28 60 08 e2 20 a7 00
>3a1b28	f0 09 c9 3a f0 05 20 de 1a 80 f3 28 60 08 e2 20
>3a1b38	64 34 a7 00 f0 19 c5 35 f0 2c c9 98 f0 1e c9 9c
>3a1b48	f0 1a c9 9b f0 1a c9 9d f0 16 20 de 1a 80 e3 20
>3a1b58	bb 1b c2 20 a5 d5 f0 1d e2 20 80 d6 e6 34 80 ea
>3a1b68	c6 34 30 30 80 e4 a5 33 30 06 a5 34 f0 02 80 da
>3a1b78	20 de 1a 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a1b88	20 a9 02 8f d1 08 00 c2 20 29 ff 00 20 53 18 e2
>3a1b98	20 dc d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a1ba8	a9 02 8f d1 08 00 c2 20 29 ff 00 20 53 18 e2 20
>3a1bb8	dc d2 08 08 c2 30 a0 00 00 b7 18 85 0c 18 a5 18
>3a1bc8	65 0c 85 18 a5 1a 69 00 00 85 1a a0 02 00 b7 18
>3a1bd8	85 d5 18 a5 18 69 04 00 85 00 a5 1a 69 00 00 85
>3a1be8	02 28 60 08 e2 20 48 20 ff 1a 68 e2 20 c7 00 d0
>3a1bf8	08 20 de 1a 20 ff 1a 28 60 08 c2 20 48 a9 00 08
>3a1c08	5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00
>3a1c18	20 53 18 e2 20 dc d2 08 08 e2 20 20 ff 1a e2 20
>3a1c28	a7 00 f0 10 c9 3a f0 0c c5 35 f0 05 20 de 1a 80
>3a1c38	ef 28 38 60 28 18 60 5a 08 e2 20 a0 00 00 b7 00
>3a1c48	f0 0d c9 3a f0 07 c9 20 d0 05 c8 80 f1 a9 00 28
>3a1c58	7a 60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 20
>3a1c68	d1 13 e2 20 a9 00 85 da ad 8a 0f 30 4b a7 00 c9
>3a1c78	3a d0 03 20 de 1a 20 ff 1a a7 00 d0 03 4c 0a 1d
>3a1c88	20 01 03 b0 52 a7 00 10 10 20 ed 08 85 0c c9 20
>3a1c98	d0 03 4c f8 1c a5 d0 f0 51 08 c2 20 48 a9 00 08
>3a1ca8	5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00
>3a1cb8	20 53 18 e2 20 dc d2 08 08 c2 20 48 a9 00 08 5b
>3a1cc8	68 28 e2 20 a9 01 8f d1 08 00 c2 20 29 ff 00 20
>3a1cd8	53 18 e2 20 dc d2 08 20 b0 32 4c 0a 1d 08 e2 20
>3a1ce8	48 a9 00 48 ab 68 28 6c 2d 08 a5 0c c9 10 d0 a9
>3a1cf8	a7 00 20 ca 08 c2 20 85 2d 20 d1 13 20 de 1a 20
>3a1d08	e5 1c ab 2b 28 60 08 58 20 9f 1a 20 f8 17 e2 20
>3a1d18	9c 8a 0f c2 20 a5 18 85 00 a5 1a 85 02 4c 4c 1d
>3a1d28	08 c2 20 a0 02 00 b7 18 85 d5 e2 20 a5 da c9 03
>3a1d38	f0 12 c2 20 18 a5 18 69 04 00 85 00 e2 20 a5 1a
>3a1d48	69 00 85 02 c2 20 20 5a 1c e2 20 a5 da c9 03 f0
>3a1d58	f3 c9 00 d0 31 e2 20 20 ff 1a a7 00 f0 28 c9 3a
>3a1d68	f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>3a1d78	8f d1 08 00 c2 20 29 ff 00 20 53 18 e2 20 dc d2
>3a1d88	08 20 de 1a 80 be 28 60 08 58 e2 20 a9 80 85 d0
>3a1d98	9c 8a 0f 20 f8 17 c2 30 64 2f a0 02 00 b7 18 f0
>3a1da8	29 20 28 1d e2 20 a5 da c9 01 f0 1e c9 02 f0 ea
>3a1db8	c9 03 f0 e6 c2 20 a0 00 00 18 a5 18 77 18 85 18
>3a1dc8	e2 20 a5 1a 69 00 85 1a 80 d0 e2 20 a9 00 85 d0
>3a1dd8	28 60 08 c2 30 c2 20 a9 00 00 85 08 a9 36 00 85
>3a1de8	0a c2 20 a0 02 00 b7 08 f0 31 c5 21 f0 1e b0 2b
>3a1df8	c2 20 a0 00 00 18 a5 08 77 08 85 0c e2 20 a5 0a
>3a1e08	69 00 85 0a c2 20 a5 0c 85 08 80 d7 c2 20 a5 08
>3a1e18	85 18 e2 20 a5 0a 85 1a 28 38 60 28 18 60 08 e2
>3a1e28	20 a7 0c 87 08 c2 20 a5 0c c5 00 d0 08 e2 20 a5
>3a1e38	0e c5 02 f0 26 c2 20 18 a5 0c 69 01 00 85 0c e2
>3a1e48	20 a5 0e 69 00 85 0e c2 20 18 a5 08 69 01 00 85
>3a1e58	08 e2 20 a5 0a 69 00 85 0a 80 c4 28 60 08 e2 20
>3a1e68	a7 0c 87 08 c2 20 a5 0c c5 00 d0 06 a5 0e c5 02
>3a1e78	f0 26 c2 20 38 a5 0c e9 01 00 85 0c e2 20 a5 0e
>3a1e88	e9 00 85 0e c2 20 38 a5 08 e9 01 00 85 08 e2 20
>3a1e98	a5 0a e9 00 85 0a 80 c6 28 60 08 a0 00 00 c2 20
>3a1ea8	18 a5 08 77 08 85 0c e2 20 a5 0a 69 00 85 0e c2
>3a1eb8	20 18 a5 d7 69 04 00 85 00 e2 20 a5 d9 69 00 85
>3a1ec8	02 a0 00 00 c2 20 38 a5 d7 f7 08 85 d7 e2 20 a5
>3a1ed8	d9 e9 00 85 d9 20 26 1e 20 a6 32 28 60 08 08 c2
>3a1ee8	20 48 a9 00 08 5b 68 28 c2 30 a0 02 00 97 d7 18
>3a1ef8	a5 d7 69 04 00 85 08 e2 20 a5 d9 69 00 85 0a e2
>3a1f08	20 a0 00 00 b7 18 97 08 f0 03 c8 80 f7 c2 20 98
>3a1f18	18 69 05 00 85 0c c2 20 a0 00 00 a5 0c 97 d7 c2
>3a1f28	20 18 a5 d7 65 0c 85 0c e2 20 a5 d9 69 00 85 d9
>3a1f38	c2 20 a5 0c 85 d7 c2 20 a0 00 00 a9 00 00 97 d7
>3a1f48	c8 c0 05 00 d0 f8 20 a6 32 28 60 0b 08 08 c2 20
>3a1f58	48 a9 00 08 5b 68 28 c2 30 a9 00 00 85 08 a9 36
>3a1f68	00 85 0a a0 02 00 b7 08 f0 1d c5 d5 f0 25 b0 1d
>3a1f78	a0 00 00 18 a5 08 77 08 85 0c a5 0a 69 00 00 85
>3a1f88	0a a5 0c 85 08 80 dc a9 00 00 28 2b 60 a9 01 00
>3a1f98	28 2b 60 a9 02 00 28 2b 60 08 c2 30 a9 05 00 85
>3a1fa8	10 a0 00 00 e2 20 b7 18 f0 07 c2 20 e6 10 c8 80
>3a1fb8	f3 c2 20 a5 08 85 00 a5 0a 85 02 18 a5 d7 69 04
>3a1fc8	00 85 0c a5 d9 69 00 00 85 0e 18 a5 d7 65 10 85
>3a1fd8	d7 a5 d9 69 00 00 85 d9 18 a5 d7 69 04 00 85 08
>3a1fe8	a5 d9 69 00 00 85 0a 20 65 1e c2 20 a5 10 a0 00
>3a1ff8	00 97 00 a5 d5 a0 02 00 97 00 18 a5 00 69 04 00
>3a2008	85 00 a5 02 69 00 00 85 02 a0 00 00 e2 20 b7 18
>3a2018	97 00 f0 03 c8 80 f7 20 a6 32 28 60 08 c2 30 85
>3a2028	d5 20 53 1f c9 00 00 f0 2c c9 01 00 f0 22 c2 20
>3a2038	a5 08 48 a5 0a 48 20 a2 1e 68 85 0a 68 85 08 a5
>3a2048	18 85 00 a5 1a 85 02 20 ff 1a e2 20 a7 00 f0 0a
>3a2058	20 a1 1f 80 05 a5 d5 20 e5 1e 28 60 8b 08 08 e2
>3a2068	20 48 a9 3a 48 ab 68 28 a2 fb d1 20 ae 02 28 ab
>3a2078	60 08 e2 30 a9 01 20 1c 00 20 db 00 f0 06 c9 0d
>3a2088	f0 02 80 f5 28 60 0b 08 08 c2 20 48 a9 00 08 5b
>3a2098	68 28 c2 30 64 d5 a9 00 4f 85 18 a9 00 00 85 1a
>3a20a8	20 04 06 c2 20 a5 d5 d0 05 20 0e 1d 80 07 20 24
>3a20b8	20 28 2b 38 60 28 2b 18 60 c2 30 a2 ff fe 9a 20
>3a20c8	64 20 20 08 00 20 0c 00 a9 00 00 20 1c 00 20 8e
>3a20d8	20 b0 ef 80 ea e2 20 a5 25 c5 2b d0 06 c2 20 29
>3a20e8	ff 00 60 c2 20 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a20f8	20 a9 04 8f d1 08 00 c2 20 29 ff 00 20 53 18 e2
>3a2108	20 dc d2 08 20 dd 20 c2 20 c9 00 00 f0 27 c9 02
>3a2118	00 d0 03 4c 55 11 08 c2 20 48 a9 00 08 5b 68 28
>3a2128	e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00 20 53 18
>3a2138	e2 20 dc d2 08 18 a5 21 65 27 85 21 a5 23 65 29
>3a2148	85 23 60 38 a5 21 e5 27 85 21 a5 23 e5 29 85 23
>3a2158	60 a5 21 8f 08 01 00 a5 27 8f 0a 01 00 af 0c 01
>3a2168	00 85 21 af 0e 01 00 85 23 60 a5 21 8f 12 01 00
>3a2178	a5 27 8f 10 01 00 af 14 01 00 85 21 60 a5 21 8f
>3a2188	12 01 00 a5 27 8f 10 01 00 af 16 01 00 85 21 60
>3a2198	c2 20 a5 21 25 27 85 21 a5 23 25 29 85 23 60 c2
>3a21a8	20 a5 21 05 27 85 21 a5 23 05 29 85 23 60 c2 20
>3a21b8	a5 21 49 ff ff 85 21 a5 23 49 ff ff 85 23 60 c2
>3a21c8	20 a5 23 c5 29 90 0b a5 21 c5 27 90 05 64 21 64
>3a21d8	23 60 a9 ff ff 85 21 85 23 60 c2 20 a5 29 c5 23
>3a21e8	90 0b a5 27 c5 21 90 05 64 21 64 23 60 a9 ff ff
>3a21f8	85 21 85 23 60 c2 20 a5 29 c5 23 d0 0e a5 27 c5
>3a2208	21 d0 08 a9 ff ff 85 21 85 23 60 64 21 64 23 60
>3a2218	c2 20 a5 29 c5 23 d0 0e a5 27 c5 21 d0 08 a9 ff
>3a2228	ff 85 21 85 23 60 64 21 64 23 60 c2 20 a5 23 c5
>3a2238	29 90 10 d0 06 a5 21 c5 27 90 08 a9 ff ff 85 21
>3a2248	85 23 60 64 21 64 23 60 c2 20 a5 23 c5 29 90 0f
>3a2258	f0 05 64 21 64 23 60 a5 21 c5 27 f0 02 b0 f3 a9
>3a2268	ff ff 85 21 85 23 60 08 e2 20 20 01 17 20 ef 04
>3a2278	20 cd 03 a5 21 0a 0a 0a 0a 05 27 48 a9 2c 20 eb
>3a2288	1b 20 01 17 20 ef 04 20 cd 03 a5 21 0a 0a 0a 0a
>3a2298	05 27 48 a9 2c 20 eb 1b 20 01 17 20 ef 04 20 cd
>3a22a8	03 a5 21 0a 0a 0a 0a 05 27 48 af 0e 08 af 09 0c
>3a22b8	8f 0e 08 af 68 8f 00 08 af 68 8f 02 08 af 68 8f
>3a22c8	04 08 af af 0e 08 af 29 f7 8f 0e 08 af 20 23 1b
>3a22d8	28 60 08 e2 20 20 01 17 20 ef 04 20 cd 03 a5 21
>3a22e8	0a 0a 0a 0a 05 27 48 a9 2c 20 eb 1b 20 01 17 20
>3a22f8	ef 04 20 cd 03 a5 21 0a 0a 0a 0a 05 27 48 a9 2c
>3a2308	20 eb 1b 20 01 17 20 4c 04 20 03 04 c2 20 a5 21
>3a2318	85 90 a5 27 85 21 20 cd 03 e2 20 a5 21 0a 0a 0a
>3a2328	0a 05 27 48 c2 20 a5 90 85 21 20 cd 03 e2 20 a5
>3a2338	21 0a 0a 0a 0a 05 27 48 af 0e 08 af 09 0c 8f 0e
>3a2348	08 af 68 8f 0f 08 af 68 8f 0a 08 af 68 8f 09 08
>3a2358	af 68 8f 06 08 af af 0e 08 af 29 f7 8f 0e 08 af
>3a2368	20 23 1b 28 60 08 20 01 17 20 ef 04 e2 20 a5 21
>3a2378	29 0f 0a 0a 0a 0a 8f 53 08 00 a9 2c 20 eb 1b 20
>3a2388	01 17 20 ef 04 a5 21 29 0f 0f 53 08 00 8f 1e 00
>3a2398	00 28 60 08 e2 20 20 01 17 20 ef 04 a5 21 48 a9
>3a23a8	2c 20 eb 1b 20 01 17 20 ef 04 a5 21 48 a9 2c 20
>3a23b8	eb 1b 20 01 17 20 ef 04 a5 21 8f 08 00 af 68 8f
>3a23c8	09 00 af 68 8f 0a 00 af 28 60 08 e2 20 20 01 17
>3a23d8	20 4c 04 a5 21 f0 16 a9 01 8f 04 00 af a9 20 8f
>3a23e8	08 00 af 8f 09 00 af 22 28 11 00 80 0a a9 00 8f
>3a23f8	04 00 af 22 28 11 00 a9 2c 85 35 20 20 1c 90 35
>3a2408	20 de 1a 20 01 17 20 ef 04 a5 21 48 a9 2c 20 eb
>3a2418	1b 20 01 17 20 ef 04 a5 21 48 a9 2c 20 eb 1b 20
>3a2428	01 17 20 ef 04 a5 21 8f 05 00 af 68 8f 06 00 af
>3a2438	68 8f 07 00 af 28 60 08 c2 20 20 01 17 20 ef 04
>3a2448	a9 af 00 85 9e a5 21 c9 0a 00 b0 5c 0a aa bf cf
>3a2458	24 3a 85 9c a9 2c 00 20 eb 1b 20 01 17 20 ef 04
>3a2468	a5 21 0a 0a 18 65 9c 85 9c a9 2c 00 20 eb 1b 20
>3a2478	01 17 20 ef 04 a0 02 00 a5 21 e2 20 97 9c a9 2c
>3a2488	20 eb 1b 20 01 17 20 ef 04 a0 01 00 a5 21 e2 20
>3a2498	97 9c a9 2c 20 eb 1b 20 01 17 20 ef 04 a0 00 00
>3a24a8	a5 21 e2 20 97 9c 28 60 08 c2 20 48 a9 00 08 5b
>3a24b8	68 28 e2 20 a9 0a 8f d1 08 00 c2 20 29 ff 00 20
>3a24c8	53 18 e2 20 dc d2 08 00 20 00 24 00 28 00 2c 00
>3a24d8	30 00 34 00 38 00 3c 40 1f 80 1f da 5a 08 20 01
>3a24e8	17 20 4c 04 a5 21 8f 00 00 af 4a 4a 4a 4a 4a 4a
>3a24f8	4a 29 ff 0a aa 22 28 11 00 c2 20 af 1a 00 00 aa
>3a2508	af 1c 00 00 a8 20 20 00 28 7a fa 60 80 02 20 03
>3a2518	40 01 90 01 e0 01 58 02 f0 00 2c 01 50 00 64 00
>3a2528	28 00 32 00 3c 00 4b 00 1e 00 32 00 48 00 5c 00
>3a2538	20 00 2a 00 34 00 43 00 16 00 34 00 08 c2 20 20
>3a2548	01 17 20 ef 04 c2 20 a5 21 85 53 a9 2c 00 20 eb
>3a2558	1b 20 01 17 20 ef 04 e2 20 a5 53 d0 05 a5 21 0a
>3a2568	80 04 a5 21 38 2a 8f 40 01 af c2 20 a9 2c 00 85
>3a2578	35 20 20 1c b0 18 c2 20 08 c2 20 a9 00 00 85 21
>3a2588	a9 b0 00 85 23 e2 20 a9 00 85 25 28 80 08 c2 20
>3a2598	20 de 1a 20 01 17 e2 20 38 a5 23 8f 02 f0 3a e9
>3a25a8	b0 30 42 8f 43 01 af 8f 06 f0 3a a5 21 8f 00 f0
>3a25b8	3a 8f 41 01 af 8f 04 f0 3a a5 22 8f 42 01 af 8f
>3a25c8	05 f0 3a 8f 01 f0 3a a9 00 8f 07 f0 3a 8f 03 f0
>3a25d8	3a c2 20 af 08 f0 3a 8f 44 01 af af 0a f0 3a 8f
>3a25e8	46 01 af 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a25f8	20 a9 0a 8f d1 08 00 c2 20 29 ff 00 20 53 18 e2
>3a2608	20 dc d2 08 08 c2 20 af 04 f0 3a 8f 05 04 af af
>3a2618	0c f0 3a 8f 08 04 af e2 20 af 06 f0 3a 8f 07 04
>3a2628	af af 0e f0 3a 8f 0a 04 af a9 00 8f 01 04 af a9
>3a2638	85 8f 00 04 af af 01 04 af 30 fa a9 00 8f 00 04
>3a2648	af 28 60 08 c2 20 a5 5b 8f 08 01 00 af 08 f0 3a
>3a2658	8f 0a 01 00 18 af 0c 01 00 65 57 85 0c af 0e 01
>3a2668	00 69 00 00 85 0e 18 a5 0c 6f 00 f0 3a 85 9c a5
>3a2678	0e 6f 02 f0 3a 85 9e e2 20 a5 53 87 9c 28 60 c2
>3a2688	20 a9 01 00 85 db 38 a5 5f e5 57 85 67 10 0b 49
>3a2698	ff ff 1a 85 67 a9 ff ff 85 db a9 01 00 85 dd 38
>3a26a8	a5 63 e5 5b 85 6b 10 0b 49 ff ff 1a 85 6b a9 ff
>3a26b8	ff 85 dd a5 6b c5 67 b0 04 a5 67 80 06 a5 6b 49
>3a26c8	ff ff 1a 48 0a 68 6a 85 6f 20 4b 26 a5 57 c5 5f
>3a26d8	d0 06 a5 5b c5 63 f0 36 a5 6f 85 73 a5 67 49 ff
>3a26e8	ff 1a c5 73 10 10 f0 0e 38 a5 6f e5 6b 85 6f 18
>3a26f8	a5 57 65 db 85 57 a5 73 c5 6b 10 cd f0 cb 18 a5
>3a2708	6f 65 67 85 6f 18 a5 5b 65 dd 85 5b 80 bb 60 08
>3a2718	a9 00 00 8f 00 04 af c2 20 a5 5b 8f 08 01 00 af
>3a2728	08 f0 3a 8f 0a 01 00 18 af 0c 01 00 65 57 85 0c
>3a2738	e2 20 af 0e 01 00 69 00 85 0e c2 20 18 af 04 f0
>3a2748	3a 65 0c 8f 05 04 af e2 20 af 06 f0 3a 65 0e 8f
>3a2758	07 04 af c2 20 38 a5 5f e5 57 85 0c 8f 08 04 af
>3a2768	38 af 08 f0 3a 8f 0e 04 af 38 a5 63 e5 5b 8f 0a
>3a2778	04 af a9 01 00 8f 0c 04 af e2 20 af 53 08 00 8f
>3a2788	01 04 af a9 87 8f 00 04 af af 01 04 af 30 fa a9
>3a2798	00 8f 00 04 af 28 60 08 08 c2 20 48 a9 00 08 5b
>3a27a8	68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 30 20 01
>3a27b8	17 20 4c 04 a5 21 85 53 a9 2c 00 20 eb 1b 20 01
>3a27c8	17 20 4c 04 a5 21 85 57 a9 2c 00 20 eb 1b 20 01
>3a27d8	17 20 ef 04 a5 21 85 5b 20 4b 26 28 60 08 08 c2
>3a27e8	20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab
>3a27f8	68 28 c2 30 20 01 17 20 4c 04 a5 21 85 57 a9 2c
>3a2808	00 20 eb 1b 20 01 17 20 4c 04 a5 21 85 5b a9 2c
>3a2818	00 20 eb 1b 20 01 17 20 4c 04 a5 21 85 5f a9 2c
>3a2828	00 20 eb 1b 20 01 17 20 4c 04 a5 21 85 63 a9 2c
>3a2838	00 20 eb 1b 20 01 17 20 ef 04 a5 21 85 53 20 87
>3a2848	26 28 60 08 08 c2 20 48 a9 00 08 5b 68 28 08 e2
>3a2858	20 48 a9 00 48 ab 68 28 c2 30 20 01 17 20 4c 04
>3a2868	a5 21 85 57 a9 2c 00 20 eb 1b 20 01 17 20 4c 04
>3a2878	a5 21 85 5b a9 2c 00 20 eb 1b 20 01 17 20 4c 04
>3a2888	a5 21 85 5f a9 2c 00 20 eb 1b 20 01 17 20 4c 04
>3a2898	a5 21 85 63 a9 2c 00 20 eb 1b 20 01 17 20 ef 04
>3a28a8	a5 21 85 53 20 17 27 28 60 08 e2 20 a5 21 c9 12
>3a28b8	b0 18 0a 0a 0a 18 69 00 85 9c a9 02 69 00 85 9d
>3a28c8	a9 af 69 00 85 9e 64 9f 28 60 08 c2 20 48 a9 00
>3a28d8	08 5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff
>3a28e8	00 20 53 18 e2 20 dc d2 08 08 e2 20 20 01 17 20
>3a28f8	ef 04 20 b1 28 a5 21 8f 0e f0 3a a9 2c 20 eb 1b
>3a2908	20 01 17 20 ef 04 a5 21 c9 08 b0 4b 48 a9 2c 20
>3a2918	eb 1b 20 01 17 20 4c 04 c2 20 38 a5 21 e9 00 00
>3a2928	85 21 a5 23 e9 b0 00 85 23 30 2c c2 20 a5 21 a0
>3a2938	01 00 97 9c e2 20 a5 23 c8 c8 97 9c af 0e f0 3a
>3a2948	aa bf 10 f0 3a 29 f1 85 0c 68 0a 29 0e 05 0c 87
>3a2958	9c 9f 10 f0 3a 28 60 08 c2 20 48 a9 00 08 5b 68
>3a2968	28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff 00 20 53
>3a2978	18 e2 20 dc d2 08 08 c2 20 20 01 17 20 ef 04 20
>3a2988	b1 28 a9 2c 00 20 eb 1b 20 01 17 20 4c 04 a5 21
>3a2998	a0 04 00 97 9c a9 2c 00 20 eb 1b 20 01 17 20 4c
>3a29a8	04 a5 21 a0 06 00 97 9c 28 60 08 c2 20 20 01 17
>3a29b8	20 ef 04 20 b1 28 a5 21 8f 0e f0 3a a9 2c 00 20
>3a29c8	eb 1b 20 01 17 20 4c 04 a5 21 48 a9 2c 00 85 35
>3a29d8	20 20 1c b0 1c af 0e f0 3a aa bf 10 f0 3a 29 fe
>3a29e8	00 85 0c 68 29 01 00 05 0c 9f 10 f0 3a 87 9c 80
>3a29f8	31 e2 20 20 de 1a 20 01 17 20 ef 04 a5 21 c9 08
>3a2a08	b0 22 0a 0a 0a 0a 85 0c 68 29 01 05 0c 85 0c af
>3a2a18	0e f0 3a aa bf 10 f0 3a 29 8e 05 0c 87 9c 9f 10
>3a2a28	f0 3a 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a2a38	a9 09 8f d1 08 00 c2 20 29 ff 00 20 53 18 e2 20
>3a2a48	dc d2 08 08 20 ff 1a e2 20 a7 00 d0 03 4c f3 2a
>3a2a58	c9 3a d0 03 4c f3 2a c9 22 d0 0b 20 1f 16 20 da
>3a2a68	33 a9 3b 20 eb 1b 20 01 03 90 41 20 e5 3f 90 3c
>3a2a78	a9 3f 20 18 00 a9 20 20 18 00 20 10 00 e2 20 a5
>3a2a88	e8 c9 02 f0 46 c9 00 f0 65 c9 01 f0 60 08 c2 20
>3a2a98	48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2
>3a2aa8	20 29 ff 00 20 53 18 e2 20 dc d2 08 08 c2 20 48
>3a2ab8	a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20
>3a2ac8	29 ff 00 20 53 18 e2 20 dc d2 08 c2 20 a9 00 4c
>3a2ad8	85 21 a9 00 00 85 23 e2 20 a9 02 85 25 20 f7 11
>3a2ae8	c2 20 20 82 3f a9 0d 00 20 18 00 28 60 ea c2 20
>3a2af8	a5 00 85 3e a5 02 85 40 a9 00 4c 85 00 a9 00 00
>3a2b08	85 02 20 44 05 c2 20 a5 3e 85 00 a5 40 85 02 80
>3a2b18	cf 08 20 ff 1a e2 20 a7 00 f0 49 c9 3a f0 45 20
>3a2b28	01 03 90 42 20 e5 3f 90 3d 20 14 00 e2 20 8f 00
>3a2b38	4e 00 a9 00 8f 01 4e 00 c2 20 a9 00 4e 85 21 a9
>3a2b48	00 00 85 23 e2 20 a9 02 85 25 20 f7 11 20 82 3f
>3a2b58	20 ff 1a a7 00 f0 0d c9 3a f0 09 c9 2c d0 07 20
>3a2b68	de 1a 80 ae 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a2b78	e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00 20 53 18
>3a2b88	e2 20 dc d2 08 08 20 01 17 20 4c 04 e2 20 a9 5c
>3a2b98	85 a0 c2 20 a5 21 85 a1 e2 20 a5 23 85 a3 e2 20
>3a2ba8	a9 2c 85 35 20 20 1c 90 41 20 de 1a 20 01 17 20
>3a2bb8	a0 04 c2 20 a5 21 85 53 e2 20 a9 2c 85 35 20 20
>3a2bc8	1c 90 27 20 de 1a 20 01 17 20 a0 04 c2 20 a5 21
>3a2bd8	85 57 e2 20 a9 2c 85 35 20 20 1c 90 0d 20 de 1a
>3a2be8	20 01 17 20 a0 04 c2 20 a4 21 a6 57 a5 53 0b 8b
>3a2bf8	08 22 a0 08 00 28 ab 2b 20 23 1b 28 60 08 c2 20
>3a2c08	48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2
>3a2c18	20 29 ff 00 20 53 18 e2 20 dc d2 08 08 e2 20 20
>3a2c28	ff 1a 20 e5 3f 90 64 a9 8c 20 eb 1b a9 01 20 6e
>3a2c38	14 a2 01 00 a9 00 8f 00 4d 00 20 01 17 20 a0 04
>3a2c48	c2 20 a5 21 9f 00 4d 00 e2 20 af 00 4d 00 1a 8f
>3a2c58	00 4d 00 30 55 e8 e8 20 ff 1a a7 00 c9 2c f0 25
>3a2c68	c9 8d d0 27 20 de 1a 20 93 40 c2 20 a5 be 85 21
>3a2c78	e2 20 a5 c0 85 23 64 24 a5 e8 09 80 85 e8 85 25
>3a2c88	20 82 3f 28 60 20 de 1a 4c 42 2c 08 c2 20 48 a9
>3a2c98	00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29
>3a2ca8	ff 00 20 53 18 e2 20 dc d2 08 08 c2 20 48 a9 00
>3a2cb8	08 5b 68 28 e2 20 a9 0a 8f d1 08 00 c2 20 29 ff
>3a2cc8	00 20 53 18 e2 20 dc d2 08 08 20 ff 1a e2 20 a7
>3a2cd8	00 f0 28 c9 3a f0 24 20 01 03 90 21 20 e5 3f 90
>3a2ce8	1c 20 24 2d 20 82 3f 20 ff 1a a7 00 f0 0d c9 3a
>3a2cf8	f0 09 c9 2c d0 07 20 de 1a 80 cf 28 60 08 c2 20
>3a2d08	48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2
>3a2d18	20 29 ff 00 20 53 18 e2 20 dc d2 08 08 a5 02 85
>3a2d28	40 a5 00 85 3e a5 1a 85 44 a5 18 85 42 c2 20 a5
>3a2d38	38 d0 04 a5 36 f0 4e a5 36 85 00 a5 38 85 02 a5
>3a2d48	3a 85 18 a5 3c 85 1a e2 20 a7 00 f0 53 c9 3a f0
>3a2d58	4f c9 2c d0 03 20 de 1a 20 ff 1a a7 00 c9 22 f0
>3a2d68	4e 20 1a 03 b0 4e 08 c2 20 48 a9 00 08 5b 68 28
>3a2d78	e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00 20 53 18
>3a2d88	e2 20 dc d2 08 c2 20 a9 00 00 85 18 a9 36 00 85
>3a2d98	1a 18 a5 18 69 04 00 85 00 a5 1a 69 00 00 85 02
>3a2da8	e2 20 a9 80 85 33 a9 a8 85 35 20 35 1b 80 a9 20
>3a2db8	1f 16 80 03 20 54 15 c2 20 a5 00 85 36 a5 02 85
>3a2dc8	38 a5 18 85 3a a5 1a 85 3c a5 42 85 18 a5 44 85
>3a2dd8	1a a5 3e 85 00 a5 40 85 02 28 60 20 23 1b 60 64
>3a2de8	36 64 38 64 3a 64 3c 60 20 24 00 60 20 01 17 c2
>3a2df8	20 a5 23 48 a5 21 48 e2 20 a7 00 c9 2c d0 22 20
>3a2e08	de 1a 20 01 17 c2 20 a5 24 d0 35 68 85 08 68 85
>3a2e18	0a c2 20 a5 21 87 08 e2 20 a0 02 00 a5 23 97 08
>3a2e28	60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a2e38	d1 08 00 c2 20 29 ff 00 20 53 18 e2 20 dc d2 08
>3a2e48	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1
>3a2e58	08 00 c2 20 29 ff 00 20 53 18 e2 20 dc d2 08 20
>3a2e68	01 17 c2 20 a5 23 48 a5 21 48 e2 20 a7 00 c9 2c
>3a2e78	d0 19 20 de 1a 20 01 17 c2 20 a5 23 d0 2c 68 85
>3a2e88	08 68 85 0a c2 20 a5 21 87 08 60 08 c2 20 48 a9
>3a2e98	00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29
>3a2ea8	ff 00 20 53 18 e2 20 dc d2 08 08 c2 20 48 a9 00
>3a2eb8	08 5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff
>3a2ec8	00 20 53 18 e2 20 dc d2 08 20 01 17 c2 20 a5 23
>3a2ed8	48 a5 21 48 e2 20 a7 00 c9 2c d0 1f 20 de 1a 20
>3a2ee8	01 17 e2 20 a5 22 d0 32 c2 20 a5 23 d0 2c 68 85
>3a2ef8	08 68 85 0a e2 20 a5 21 87 08 60 08 c2 20 48 a9
>3a2f08	00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29
>3a2f18	ff 00 20 53 18 e2 20 dc d2 08 08 c2 20 48 a9 00
>3a2f28	08 5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff
>3a2f38	00 20 53 18 e2 20 dc d2 08 08 c2 20 48 a9 00 08
>3a2f48	5b 68 28 e2 20 a9 01 8f d1 08 00 c2 20 29 ff 00
>3a2f58	20 53 18 e2 20 dc d2 08 08 e2 20 a7 00 f0 05 20
>3a2f68	de 1a 80 f7 28 60 08 28 60 08 28 60 08 28 60 08
>3a2f78	c2 20 a5 1a 20 1a 18 a5 18 20 1a 18 a5 02 48 a5
>3a2f88	00 48 20 23 1b a5 02 20 1a 18 a5 00 20 1a 18 68
>3a2f98	85 00 68 85 02 20 ff 1a 20 e5 3f b0 1f 08 c2 20
>3a2fa8	48 a9 00 08 5b 68 28 e2 20 a9 05 8f d1 08 00 c2
>3a2fb8	20 29 ff 00 20 53 18 e2 20 dc d2 08 e2 20 a5 e8
>3a2fc8	20 31 18 a5 e7 20 31 18 c2 20 a5 e5 20 1a 18 20
>3a2fd8	ff 1a e2 20 a7 00 c9 87 d0 6a a5 e8 c9 00 f0 04
>3a2fe8	c9 01 f0 00 20 de 1a 20 01 17 20 82 3f e2 20 a9
>3a2ff8	99 20 eb 1b 20 01 17 c2 20 a5 25 20 1a 18 a5 23
>3a3008	20 1a 18 a5 21 20 1a 18 e2 20 a9 9a 85 35 20 20
>3a3018	1c 90 1b 20 de 1a 20 01 17 e2 20 a5 25 20 1a 18
>3a3028	c2 20 a5 23 20 1a 18 a5 21 20 1a 18 80 14 c2 20
>3a3038	a9 00 00 20 1a 18 a9 00 00 20 1a 18 a9 01 00 20
>3a3048	1a 18 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a3058	a9 02 8f d1 08 00 c2 20 29 ff 00 20 53 18 e2 20
>3a3068	dc d2 08 08 8b 08 e2 20 48 a9 00 48 ab 68 28 08
>3a3078	c2 20 48 a9 00 08 5b 68 28 c2 30 a4 31 c8 c8 c2
>3a3088	20 b9 0c 00 85 e5 b9 0e 00 e2 20 85 e7 b9 10 00
>3a3098	85 e8 c2 20 5a 20 3b 3e 7a c2 20 b9 00 00 85 27
>3a30a8	b9 02 00 85 29 e2 20 b9 04 00 85 2b c2 20 5a 20
>3a30b8	0c 21 20 82 3f 7a c2 20 b9 06 00 85 27 b9 08 00
>3a30c8	85 29 e2 20 b9 0a 00 85 2b c2 20 b9 02 00 30 0a
>3a30d8	20 50 22 20 39 04 f0 28 80 08 20 33 22 20 39 04
>3a30e8	f0 1e c2 20 b9 12 00 85 00 b9 14 00 85 02 b9 16
>3a30f8	00 85 18 b9 18 00 85 1a e2 20 a9 03 85 da 80 17
>3a3108	a2 21 08 20 2f 14 c2 20 18 a5 31 69 1a 00 85 31
>3a3118	a5 33 69 00 00 85 33 ab 28 60 08 a5 18 48 a5 1a
>3a3128	48 20 ff 1a 20 44 05 a5 21 f0 26 20 da 1d 90 42
>3a3138	e2 20 a9 02 85 da 20 23 1b c2 20 68 20 1a 18 68
>3a3148	20 1a 18 a5 02 20 1a 18 a5 00 20 1a 18 e6 2f 28
>3a3158	60 68 68 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a3168	02 8f d1 08 00 c2 20 29 ff 00 20 53 18 e2 20 dc
>3a3178	d2 08 68 68 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a3188	a9 06 8f d1 08 00 c2 20 29 ff 00 20 53 18 e2 20
>3a3198	dc d2 08 08 c2 30 a5 2f f0 1e 20 3c 18 85 00 20
>3a31a8	3c 18 85 02 20 3c 18 85 18 20 3c 18 85 1a c6 2f
>3a31b8	e2 20 a9 03 85 da 28 60 08 c2 20 48 a9 00 08 5b
>3a31c8	68 28 e2 20 a9 07 8f d1 08 00 c2 20 29 ff 00 20
>3a31d8	53 18 e2 20 dc d2 08 08 20 01 17 20 39 04 f0 1c
>3a31e8	e2 20 a9 94 20 eb 1b 20 44 05 20 39 04 f0 12 20
>3a31f8	da 1d 90 2c e2 20 a9 02 85 da 80 03 20 23 1b 28
>3a3208	60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a3218	d1 08 00 c2 20 29 ff 00 20 53 18 e2 20 dc d2 08
>3a3228	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 06 8f d1
>3a3238	08 00 c2 20 29 ff 00 20 53 18 e2 20 dc d2 08 08
>3a3248	e2 20 a9 01 85 da 28 60 08 20 ff 1a 20 44 05 a5
>3a3258	21 f0 0d 20 da 1d 90 27 e2 20 a9 02 85 da 28 60
>3a3268	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1
>3a3278	08 00 c2 20 29 ff 00 20 53 18 e2 20 dc d2 08 08
>3a3288	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 06 8f d1 08
>3a3298	00 c2 20 29 ff 00 20 53 18 e2 20 dc d2 08 20 d1
>3a32a8	13 20 1f 0c 20 3a 3d 60 08 a7 00 10 03 20 de 1a
>3a32b8	20 e5 3f b0 03 4c 27 33 e2 20 20 3f 1c c9 8c d0
>3a32c8	0e a9 8c 20 eb 1b a9 00 8f 00 4d 00 20 57 15 20
>3a32d8	ff 1a e2 20 a7 00 c9 87 f0 03 4c 27 33 20 de 1a
>3a32e8	a5 e8 48 a5 e7 48 a5 e6 48 a5 e5 48 20 01 17 68
>3a32f8	85 e5 68 85 e6 68 85 e7 68 85 e8 29 80 f0 1b 20
>3a3308	ad 3d 90 3a c2 20 a0 09 00 b7 08 85 be e2 20 c8
>3a3318	c8 b7 08 85 c0 20 74 42 80 03 20 82 3f 28 60 08
>3a3328	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08
>3a3338	00 c2 20 29 ff 00 20 53 18 e2 20 dc d2 08 08 c2
>3a3348	20 48 a9 00 08 5b 68 28 e2 20 a9 05 8f d1 08 00
>3a3358	c2 20 29 ff 00 20 53 18 e2 20 dc d2 08 08 e2 20
>3a3368	20 3f 1c c9 00 f0 66 20 01 17 e2 20 a5 25 c9 ff
>3a3378	f0 14 c9 02 d0 05 20 da 33 80 0b c9 00 d0 05 20
>3a3388	fa 33 80 02 80 4a 20 ff 1a a7 00 f0 40 c9 3a f0
>3a3398	3c c9 2c f0 23 c9 3b f0 24 08 c2 20 48 a9 00 08
>3a33a8	5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00
>3a33b8	20 53 18 e2 20 dc d2 08 a9 09 20 18 00 20 de 1a
>3a33c8	20 ff 1a a7 00 f0 09 c9 3a f0 05 80 9a 20 21 02
>3a33d8	28 60 08 8b 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a33e8	c2 10 a0 00 00 b7 21 f0 06 20 18 00 c8 80 f6 ab
>3a33f8	28 60 08 c2 20 20 bd 10 a5 14 85 21 a5 16 85 23
>3a3408	20 da 33 28 60 08 e2 20 85 b3 4a 4a 4a 4a 29 0f
>3a3418	18 69 30 97 14 c8 a5 b3 29 0f 18 69 30 97 14 c8
>3a3428	28 60 e2 20 a9 8c 20 eb 1b 08 20 01 17 e2 20 c2
>3a3438	10 af 0e 08 af 09 08 8f 0e 08 af 20 6c 10 a0 00
>3a3448	00 af 06 08 af 20 0d 34 a9 2f 97 14 c8 af 09 08
>3a3458	af 20 0d 34 a9 2f 97 14 c8 af 0f 08 af 20 0d 34
>3a3468	af 0a 08 af 20 0d 34 a9 00 97 14 af 0e 08 af 29
>3a3478	f7 8f 0e 08 af c2 20 a5 14 85 21 a5 16 85 23 e2
>3a3488	20 a9 02 85 25 20 f7 11 28 e2 20 20 de 1a 60 e2
>3a3498	20 a9 8c 20 eb 1b 08 20 01 17 e2 20 c2 10 af 0e
>3a34a8	08 af 09 08 8f 0e 08 af 20 6c 10 a0 00 00 af 04
>3a34b8	08 af 29 7f 20 0d 34 a9 3a 97 14 c8 af 02 08 af
>3a34c8	20 0d 34 a9 3a 97 14 c8 af 00 08 af 20 0d 34 a9
>3a34d8	00 97 14 af 0e 08 af 29 f7 8f 0e 08 af c2 20 a5
>3a34e8	14 85 21 a5 16 85 23 e2 20 a9 02 85 25 20 f7 11
>3a34f8	28 e2 20 20 de 1a 60 08 c2 20 20 01 17 20 4c 04
>3a3508	c2 20 a5 21 49 ff ff 85 21 a5 23 49 ff ff 85 23
>3a3518	e6 21 d0 03 e6 23 00 28 60 e2 20 a9 8c 20 eb 1b
>3a3528	08 c2 30 20 01 17 20 76 04 c2 20 a5 23 48 a5 21
>3a3538	48 20 ff 1a e2 20 a7 00 c9 2c f0 03 4c 98 35 20
>3a3548	de 1a 20 01 17 20 a0 04 c2 20 a5 21 48 20 ff 1a
>3a3558	e2 20 a7 00 c9 2c f0 03 4c 98 35 20 de 1a 20 01
>3a3568	17 20 a0 04 c2 20 a5 21 85 8d e2 20 a5 23 85 8f
>3a3578	c2 20 68 85 27 a9 00 00 85 29 68 85 21 68 85 23
>3a3588	e2 20 a9 02 85 25 20 4f 12 e2 20 20 de 1a 28 60
>3a3598	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1
>3a35a8	08 00 c2 20 29 ff 00 20 53 18 e2 20 dc d2 08 08
>3a35b8	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08
>3a35c8	00 c2 20 29 ff 00 20 53 18 e2 20 dc d2 08 e2 20
>3a35d8	a9 8c 20 eb 1b 08 c2 30 20 01 17 e2 20 a5 25 c9
>3a35e8	02 f0 03 4c 5a 36 c2 20 a5 23 48 a5 21 48 20 ff
>3a35f8	1a e2 20 a7 00 c9 2c f0 03 4c 79 36 20 de 1a 20
>3a3608	01 17 e2 20 a5 25 c9 00 d0 48 c2 20 a5 21 85 8d
>3a3618	c2 20 68 85 21 68 85 23 e2 20 a9 02 85 25 e2 20
>3a3628	a0 00 00 b7 21 f0 03 c8 80 f9 c2 20 98 38 e5 8d
>3a3638	30 09 85 27 a9 00 00 85 29 80 07 a9 00 00 85 27
>3a3648	85 29 e2 20 a9 00 85 2b 20 4f 12 e2 20 20 de 1a
>3a3658	28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>3a3668	8f d1 08 00 c2 20 29 ff 00 20 53 18 e2 20 dc d2
>3a3678	08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a3688	d1 08 00 c2 20 29 ff 00 20 53 18 e2 20 dc d2 08
>3a3698	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1
>3a36a8	08 00 c2 20 29 ff 00 20 53 18 e2 20 dc d2 08 e2
>3a36b8	20 a9 8c 20 eb 1b 08 c2 30 20 01 17 e2 20 a5 25
>3a36c8	c9 02 f0 03 4c 23 37 c2 20 a5 23 48 a5 21 48 20
>3a36d8	ff 1a e2 20 a7 00 c9 2c f0 03 4c 42 37 20 de 1a
>3a36e8	20 01 17 e2 20 a5 25 c9 00 d0 30 c2 20 a5 21 85
>3a36f8	8d c2 20 a9 00 00 85 27 a9 00 00 85 29 e2 20 a9
>3a3708	00 85 2b c2 20 68 85 21 68 85 23 e2 20 a9 02 85
>3a3718	25 20 4f 12 e2 20 20 de 1a 28 60 08 c2 20 48 a9
>3a3728	00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20 29
>3a3738	ff 00 20 53 18 e2 20 dc d2 08 08 c2 20 48 a9 00
>3a3748	08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff
>3a3758	00 20 53 18 e2 20 dc d2 08 08 c2 20 48 a9 00 08
>3a3768	5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff 00
>3a3778	20 53 18 e2 20 dc d2 08 e2 20 a9 8c 20 eb 1b 20
>3a3788	01 17 c2 10 e2 20 a5 25 c9 02 d0 23 c2 20 a5 00
>3a3798	85 3e a5 02 85 40 a5 21 85 00 a5 23 85 02 20 44
>3a37a8	05 a5 3e 85 00 a5 40 85 02 e2 20 20 de 1a 60 08
>3a37b8	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08
>3a37c8	00 c2 20 29 ff 00 20 53 18 e2 20 dc d2 08 e2 20
>3a37d8	a9 8c 20 eb 1b 08 20 01 17 c2 10 e2 20 a5 25 c9
>3a37e8	00 d0 1d 20 bd 10 c2 20 a5 14 85 21 a5 16 85 23
>3a37f8	e2 20 a9 02 85 25 20 f7 11 28 e2 20 20 de 1a 60
>3a3808	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1
>3a3818	08 00 c2 20 29 ff 00 20 53 18 e2 20 dc d2 08 e2
>3a3828	20 a9 8c 20 eb 1b 08 20 01 17 20 76 04 c2 20 64
>3a3838	0c 64 0e e2 30 a0 00 b7 21 c9 20 f0 04 c9 24 d0
>3a3848	03 c8 80 f3 b7 21 20 2b 03 90 1e c2 20 06 0c 26
>3a3858	0e 06 0c 26 0e 06 0c 26 0e 06 0c 26 0e e2 20 20
>3a3868	4c 03 05 0c 85 0c c8 80 db c2 20 a5 0c 85 21 a5
>3a3878	0e 85 23 e2 20 a9 00 85 25 28 e2 20 20 de 1a 60
>3a3888	e2 20 a9 8c 20 eb 1b 08 20 01 17 20 4c 04 20 6c
>3a3898	10 e2 30 a0 ff a9 00 97 14 88 a5 21 29 0f aa bf
>3a38a8	00 d0 3a 97 14 88 a5 21 29 f0 4a 4a 4a 4a aa bf
>3a38b8	00 d0 3a 97 14 88 a5 22 85 21 a5 23 85 22 a5 24
>3a38c8	85 23 a9 00 85 24 a5 21 d0 d0 a5 22 d0 cc a5 23
>3a38d8	d0 c8 98 38 65 14 85 21 a5 15 85 22 a5 16 85 23
>3a38e8	a5 17 85 24 a9 02 85 25 20 f7 11 28 e2 20 20 de
>3a38f8	1a 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>3a3908	8f d1 08 00 c2 20 29 ff 00 20 53 18 e2 20 dc d2
>3a3918	08 e2 20 a9 8c 20 eb 1b 20 01 17 e2 20 a5 25 c9
>3a3928	02 d0 1f 8b a5 23 48 ab c2 10 a6 21 20 42 11 ab
>3a3938	84 21 c2 20 64 23 e2 20 a9 00 85 25 e2 20 20 de
>3a3948	1a 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>3a3958	8f d1 08 00 c2 20 29 ff 00 20 53 18 e2 20 dc d2
>3a3968	08 e2 20 a9 8c 20 eb 1b 20 01 17 e2 20 a5 25 c9
>3a3978	00 d0 12 e2 20 a7 21 85 21 64 22 64 23 64 2e e2
>3a3988	20 20 de 1a 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a3998	20 a9 04 8f d1 08 00 c2 20 29 ff 00 20 53 18 e2
>3a39a8	20 dc d2 08 e2 20 a9 8c 20 eb 1b 20 01 17 e2 20
>3a39b8	a5 25 c9 00 d0 1d c2 20 a7 21 85 0c e2 20 a0 02
>3a39c8	00 b7 21 85 23 64 24 c2 20 a5 0c 85 21 e2 20 20
>3a39d8	de 1a 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a39e8	04 8f d1 08 00 c2 20 29 ff 00 20 53 18 e2 20 dc
>3a39f8	d2 08 e2 20 a9 8c 20 eb 1b 20 01 17 e2 20 a5 25
>3a3a08	c9 00 d0 0e c2 20 a7 21 85 21 64 23 e2 20 20 de
>3a3a18	1a 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>3a3a28	8f d1 08 00 c2 20 29 ff 00 20 53 18 e2 20 dc d2
>3a3a38	08 e2 20 a9 8c 20 eb 1b 20 01 17 e2 20 a5 25 c9
>3a3a48	00 d0 24 20 6c 10 a5 21 87 14 a9 00 a0 01 00 97
>3a3a58	14 c2 20 a5 14 85 21 a5 16 85 23 e2 20 a9 02 85
>3a3a68	25 e2 20 20 de 1a 60 08 c2 20 48 a9 00 08 5b 68
>3a3a78	28 e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00 20 53
>3a3a88	18 e2 20 dc d2 08 e2 20 a9 8c 20 eb 1b 20 01 17
>3a3a98	e2 20 a5 25 c9 02 d0 14 a7 21 85 21 64 22 64 23
>3a3aa8	64 24 a9 00 85 25 e2 20 20 de 1a 60 08 c2 20 48
>3a3ab8	a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20
>3a3ac8	29 ff 00 20 53 18 e2 20 dc d2 08 e2 20 a9 8c 20
>3a3ad8	eb 1b 20 01 17 e2 20 a5 25 c9 00 d0 39 e2 20 a5
>3a3ae8	24 d0 52 a5 23 d0 4e a5 22 d0 4a c2 10 20 6c 10
>3a3af8	a4 21 e2 20 a9 00 97 14 88 30 07 a9 20 97 14 88
>3a3b08	10 fb a9 02 85 25 c2 20 a5 14 85 21 a5 16 85 23
>3a3b18	e2 20 20 de 1a 60 08 c2 20 48 a9 00 08 5b 68 28
>3a3b28	e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00 20 53 18
>3a3b38	e2 20 dc d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a3b48	20 a9 09 8f d1 08 00 c2 20 29 ff 00 20 53 18 e2
>3a3b58	20 dc d2 08 e2 20 a9 8c 20 eb 1b 20 01 17 e2 20
>3a3b68	a5 25 c9 00 d0 39 e2 20 a5 24 d0 52 a5 23 d0 4e
>3a3b78	a5 22 d0 4a c2 10 20 6c 10 a4 21 e2 20 a9 00 97
>3a3b88	14 88 30 07 a9 09 97 14 88 10 fb a9 02 85 25 c2
>3a3b98	20 a5 14 85 21 a5 16 85 23 e2 20 20 de 1a 60 08
>3a3ba8	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08
>3a3bb8	00 c2 20 29 ff 00 20 53 18 e2 20 dc d2 08 08 c2
>3a3bc8	20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08 00
>3a3bd8	c2 20 29 ff 00 20 53 18 e2 20 dc d2 08 e2 20 a9
>3a3be8	8c 20 eb 1b 20 01 17 20 4c 04 c2 20 a5 23 10 17
>3a3bf8	49 ff ff 85 23 a5 21 49 ff ff 18 69 01 00 85 21
>3a3c08	a5 23 69 00 00 85 23 e2 20 20 de 1a 60 e2 20 a9
>3a3c18	8c 20 eb 1b 20 01 17 e2 20 a5 25 c9 00 d0 25 c2
>3a3c28	20 a5 23 30 12 d0 04 a5 21 f0 13 a9 00 00 85 23
>3a3c38	a9 01 00 85 21 80 07 a9 ff ff 85 23 85 21 e2 20
>3a3c48	20 de 1a 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a3c58	a9 04 8f d1 08 00 c2 20 29 ff 00 20 53 18 e2 20
>3a3c68	dc d2 08 00 ea 60 08 0b 08 c2 20 48 a9 00 08 5b
>3a3c78	68 28 c2 30 c2 20 a9 00 00 85 d7 e2 20 a9 36 85
>3a3c88	d9 c2 30 a9 00 00 a0 00 00 97 d7 a0 02 00 97 d7
>3a3c98	a0 04 00 97 d7 20 b4 1a 2b 28 60 8b 08 c2 20 a9
>3a3ca8	00 00 85 18 a9 36 00 85 1a 20 b4 1a 20 90 1d 28
>3a3cb8	ab 60 08 c2 20 64 53 a9 ff 7f 85 57 20 21 02 20
>3a3cc8	3f 1c 29 ff 00 c9 00 00 f0 2c c9 81 00 f0 1a 20
>3a3cd8	ff 1a 20 44 05 a5 21 85 53 20 3f 1c 29 ff 00 c9
>3a3ce8	00 00 f0 12 c9 81 00 d0 2a 20 eb 1b 20 ff 1a 20
>3a3cf8	44 05 a5 21 85 57 a5 1a 48 a5 18 48 a5 02 48 a5
>3a3d08	00 48 20 d2 12 68 85 00 68 85 02 68 85 18 68 85
>3a3d18	1a 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a3d28	02 8f d1 08 00 c2 20 29 ff 00 20 53 18 e2 20 dc
>3a3d38	d2 08 08 08 c2 20 48 a9 00 08 5b 68 28 c2 20 64
>3a3d48	e2 64 e5 e2 20 64 e4 64 e7 64 e8 c2 20 38 a5 d7
>3a3d58	69 04 00 85 df e2 20 a5 d9 69 00 85 e1 28 60 c9
>3a3d68	5f f0 1a c9 3a b0 04 c9 30 b0 12 c9 5b b0 04 c9
>3a3d78	41 b0 0a c9 7b b0 04 c9 61 b0 02 18 60 38 60 08
>3a3d88	e2 20 c2 10 a0 00 00 b7 0c f0 0a d7 e5 d0 13 c8
>3a3d98	c0 08 00 d0 f2 b7 e5 20 75 03 20 67 3d b0 03 28
>3a3da8	38 60 28 18 60 08 e2 20 c2 10 a0 00 00 a2 00 00
>3a3db8	b7 e5 f0 0b 20 75 03 9f 00 4e 00 c8 e8 80 f1 a9
>3a3dc8	00 9f 00 4e 00 c2 20 a9 00 4e 85 e5 e2 20 a9 00
>3a3dd8	85 e7 c2 20 a5 e2 85 08 d0 06 e2 20 a5 e4 f0 4d
>3a3de8	e2 20 a5 e4 85 0a a5 e8 a0 00 00 d7 08 d0 17 c2
>3a3df8	20 18 a5 08 69 01 00 85 0c e2 20 a5 0a 69 00 85
>3a3e08	0e 20 87 3d b0 2a a0 0d 00 c2 20 b7 08 85 0c c8
>3a3e18	c8 e2 20 b7 08 85 0e d0 06 c2 20 a5 0c f0 0e c2
>3a3e28	20 a5 0c 85 08 e2 20 a5 0e 85 0a 80 b9 28 18 60
>3a3e38	28 38 60 08 20 ad 3d b0 1f 08 c2 20 48 a9 00 08
>3a3e48	5b 68 28 e2 20 a9 05 8f d1 08 00 c2 20 29 ff 00
>3a3e58	20 53 18 e2 20 dc d2 08 c2 30 a0 09 00 b7 08 85
>3a3e68	21 c8 c8 b7 08 85 23 e2 20 a0 00 00 b7 08 85 25
>3a3e78	28 60 08 c2 20 18 a5 df 69 10 00 85 08 e2 20 a5
>3a3e88	e1 69 00 85 0a c5 ba 90 27 c2 20 a5 08 c5 b8 90
>3a3e98	1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>3a3ea8	d1 08 00 c2 20 29 ff 00 20 53 18 e2 20 dc d2 08
>3a3eb8	c2 20 a5 df 85 be e2 20 a5 e1 85 c0 c2 20 a5 08
>3a3ec8	85 df e2 20 a5 0a 85 e1 28 60 08 e2 20 a5 25 c5
>3a3ed8	e8 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a3ee8	04 8f d1 08 00 c2 20 29 ff 00 20 53 18 e2 20 dc
>3a3ef8	d2 08 c2 10 20 7a 3e c2 30 18 a5 be 69 01 00 85
>3a3f08	08 e2 20 a5 c0 69 00 85 0a a0 00 00 a9 00 97 08
>3a3f18	c8 c0 08 00 d0 f8 a0 00 00 b7 e5 f0 10 20 75 03
>3a3f28	20 67 3d 90 08 97 08 c8 c0 08 00 d0 ec c2 20 a0
>3a3f38	09 00 a5 21 97 be a5 23 c8 c8 97 be a5 e2 a0 0d
>3a3f48	00 97 be c8 c8 e2 20 a5 e4 97 be c2 20 a5 be 85
>3a3f58	e2 e2 20 a5 c0 85 e4 e2 20 a0 00 00 a5 25 97 be
>3a3f68	c9 02 f0 02 28 60 c2 20 a5 21 85 be e2 20 a5 23
>3a3f78	85 c0 20 83 0e 20 98 0e 80 ea 08 c2 30 a5 e2 d0
>3a3f88	06 e2 20 a5 e4 f0 05 20 ad 3d b0 05 20 d2 3e 80
>3a3f98	17 e2 20 a5 25 c9 02 f0 11 c2 30 a0 09 00 a5 21
>3a3fa8	97 08 c8 c8 a5 23 97 08 28 60 a0 09 00 b7 08 85
>3a3fb8	be c8 c8 e2 20 b7 08 85 c0 20 83 0e 20 b7 0e e2
>3a3fc8	20 a5 25 c9 02 f0 02 80 d0 c2 20 a5 21 85 be e2
>3a3fd8	20 a5 23 85 c0 20 83 0e 20 98 0e 80 bc 08 20 ff
>3a3fe8	1a e2 20 a7 00 20 01 03 90 42 c2 20 a5 00 85 e5
>3a3ff8	e2 20 a5 02 85 e7 20 de 1a a7 00 f0 0d c9 24 f0
>3a4008	14 c9 25 f0 09 20 67 3d b0 ec a9 00 80 0c 20 de
>3a4018	1a a9 00 80 05 20 de 1a a9 02 85 e8 20 3f 1c c9
>3a4028	8c d0 06 a5 e8 09 80 85 e8 28 38 60 28 18 60 08
>3a4038	c2 20 48 a9 00 08 5b 68 28 c2 20 a5 21 85 0c a5
>3a4048	23 64 0e 64 21 64 23 e2 20 64 26 a9 01 85 25 c2
>3a4058	20 a5 0c f0 35 10 0e e2 20 a9 80 85 26 c2 20 49
>3a4068	ff ff 1a 85 0c e2 20 e6 24 c2 20 46 0e 66 0c e2
>3a4078	20 66 23 66 22 66 21 c2 20 a5 0c c9 01 00 d0 e5
>3a4088	e2 20 06 26 66 23 66 22 66 21 60 08 20 83 0e c2
>3a4098	20 a9 01 00 85 21 a9 00 00 85 23 e2 20 af 00 4d
>3a40a8	00 c2 20 29 ff 00 85 8d a8 a2 01 00 c2 20 bf 00
>3a40b8	4d 00 85 27 a9 00 00 85 29 20 59 21 e8 e8 88 d0
>3a40c8	eb c2 20 a9 04 00 85 27 a9 00 00 85 29 20 59 21
>3a40d8	e2 20 af 00 4d 00 85 0c a9 00 85 0d c2 20 06 0c
>3a40e8	38 a5 21 65 0c 85 21 a5 23 69 00 00 85 23 d0 29
>3a40f8	e2 20 a5 e8 09 80 a6 21 20 47 0c e2 20 af 00 4d
>3a4108	00 87 be a0 01 00 a2 00 00 e2 20 bf 01 4d 00 97
>3a4118	be e4 8d f0 23 e8 c8 80 f0 08 c2 20 48 a9 00 08
>3a4128	5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff 00
>3a4138	20 53 18 e2 20 dc d2 08 e2 20 38 a5 be 67 be 85
>3a4148	08 a5 bf 69 00 85 09 a5 c0 69 00 85 0a 64 0b c2
>3a4158	20 a0 05 00 b7 c1 85 0c e2 20 c8 c8 b7 c1 85 0e
>3a4168	64 0f e2 20 a9 00 87 08 c2 20 18 a5 08 69 01 00
>3a4178	85 08 a5 0a 69 00 00 85 0a c5 0e d0 e5 a5 08 c5
>3a4188	0c d0 df 28 60 08 c2 20 64 08 64 0a e2 20 af 00
>3a4198	4d 00 85 8d 64 8e a2 01 00 e2 20 a7 be c5 8d f0
>3a41a8	1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f
>3a41b8	d1 08 00 c2 20 29 ff 00 20 53 18 e2 20 dc d2 08
>3a41c8	c9 01 f0 3a a0 01 00 e2 20 bf 00 4d 00 85 21 64
>3a41d8	22 64 23 64 24 b7 be 85 27 64 28 64 29 64 2a a5
>3a41e8	21 c5 27 b0 68 20 59 21 c2 20 18 a5 08 65 21 85
>3a41f8	08 a5 0a 65 23 85 0a e8 e8 c8 c4 8d d0 c9 e2 20
>3a4208	18 bf 00 4d 00 85 8e 65 08 85 08 a5 09 69 00 85
>3a4218	09 c2 20 a5 0a 69 00 00 85 0a c2 20 06 08 26 0a
>3a4228	06 08 26 0a e2 20 38 a5 08 65 8d 85 08 a5 09 69
>3a4238	00 85 09 c2 20 a5 0a 69 00 00 85 0a 18 a5 08 65
>3a4248	be 85 08 e2 20 a5 0a 65 c0 85 0a 28 60 08 c2 20
>3a4258	48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08 00 c2
>3a4268	20 29 ff 00 20 53 18 e2 20 dc d2 08 08 20 83 0e
>3a4278	e2 20 a0 00 00 b7 c1 29 7f c5 25 d0 28 a5 25 48
>3a4288	c2 20 a5 23 48 a5 21 48 20 8d 41 68 85 21 68 85
>3a4298	23 e2 20 68 85 25 c2 20 a5 21 87 08 a0 02 00 a5
>3a42a8	23 97 08 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a42b8	20 a9 04 8f d1 08 00 c2 20 29 ff 00 20 53 18 e2
>3a42c8	20 dc d2 08 08 20 83 0e f4 00 00 f4 00 00 e2 20
>3a42d8	48 20 8d 41 e2 20 68 c2 20 68 68 c2 20 a7 08 85
>3a42e8	21 a0 02 00 b7 08 85 23 e2 20 a0 00 00 b7 c1 29
>3a42f8	7f 85 25 28 60 da 0b 08 08 c2 20 48 a9 00 08 5b
>3a4308	68 28 c2 30 a5 23 89 f0 ff d0 29 89 0f 00 d0 0c
>3a4318	a5 21 89 00 fc d0 05 20 fa 33 80 2e a2 0a 00 46
>3a4328	23 66 21 ca d0 f9 20 fa 33 e2 20 a9 4b 20 18 00
>3a4338	c2 20 80 16 a2 14 00 46 23 66 21 ca d0 f9 20 fa
>3a4348	33 e2 20 a9 4d 20 18 00 c2 20 28 2b fa 60 0b 08
>3a4358	08 c2 20 48 a9 00 08 5b 68 28 c2 20 20 bd 10 20
>3a4368	78 43 a5 14 85 21 a5 16 85 23 20 da 33 28 2b 60
>3a4378	5a 0b 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a7
>3a4388	14 c9 20 d0 1c a0 02 00 b7 14 d0 06 a9 30 87 14
>3a4398	80 0f a0 01 00 b7 14 87 14 c2 20 e6 14 d0 02 e6
>3a43a8	16 28 2b 7a 60 0b 08 08 c2 20 48 a9 00 08 5b 68
>3a43b8	28 c2 20 8f 44 02 00 a2 09 00 4a ca d0 fc 18 69
>3a43c8	bc 07 85 21 64 23 e2 20 a9 00 85 25 c2 20 20 fa
>3a43d8	33 a9 2d 00 20 18 00 c2 20 af 44 02 00 a2 05 00
>3a43e8	4a ca d0 fc 29 0f 00 85 21 64 23 e2 20 a9 00 85
>3a43f8	25 c2 20 20 56 43 a9 2d 00 20 18 00 c2 20 af 44
>3a4408	02 00 29 1f 00 85 21 64 23 e2 20 a9 00 85 25 c2
>3a4418	20 20 56 43 28 2b 60 0b 08 08 c2 20 48 a9 00 08
>3a4428	5b 68 28 c2 20 8f 44 02 00 a2 0b 00 4a ca d0 fc
>3a4438	85 21 64 23 e2 20 a9 00 85 25 c2 20 20 fa 33 a9
>3a4448	3a 00 20 18 00 c2 20 af 44 02 00 a2 05 00 4a ca
>3a4458	d0 fc 29 0f 00 85 21 64 23 e2 20 a9 00 85 25 c2
>3a4468	20 20 56 43 a9 3a 00 20 18 00 c2 20 af 44 02 00
>3a4478	29 1f 00 85 21 64 23 e2 20 a9 00 85 25 c2 20 20
>3a4488	56 43 28 2b 60 0b 08 c2 30 a9 00 00 8f b4 08 00
>3a4498	8f b6 08 00 e2 20 20 3f 1c c9 00 f0 08 20 01 17
>3a44a8	20 76 04 80 11 c2 20 a9 00 00 85 21 85 23 e2 20
>3a44b8	a9 02 85 25 c2 20 20 17 46 22 08 11 00 b0 22 20
>3a44c8	c8 46 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 10
>3a44d8	8f d1 08 00 c2 20 29 ff 00 20 53 18 e2 20 dc d2
>3a44e8	08 08 c2 20 48 a9 20 03 5b 68 28 e2 20 a0 00 00
>3a44f8	b7 18 d0 03 82 d2 00 c9 e5 d0 03 82 bf 00 a0 0b
>3a4508	00 b7 18 89 08 f0 03 82 d5 00 89 02 f0 03 82 ac
>3a4518	00 29 0f c9 0f d0 03 82 a3 00 a0 00 00 b7 18 c9
>3a4528	20 f0 09 20 18 00 c8 c0 08 00 d0 f1 a0 08 00 b7
>3a4538	18 c9 20 f0 17 a9 2e 20 18 00 a0 08 00 b7 18 c9
>3a4548	20 f0 09 20 18 00 c8 c0 0b 00 d0 f1 a9 09 20 18
>3a4558	00 a0 0b 00 b7 18 89 08 d0 60 89 01 f0 05 a9 52
>3a4568	20 18 00 89 04 f0 05 a9 53 20 18 00 89 10 f0 05
>3a4578	a9 44 20 18 00 a9 09 20 18 00 c2 20 a0 1c 00 b7
>3a4588	18 8f 21 08 00 c8 c8 b7 18 8f 23 08 00 e2 20 a9
>3a4598	00 8f 25 08 00 20 fd 42 e2 20 a9 09 20 18 00 c2
>3a45a8	20 a0 10 00 b7 18 20 ad 43 e2 20 a9 20 20 18 00
>3a45b8	c2 20 a0 0e 00 b7 18 20 1f 44 20 21 02 20 38 02
>3a45c8	22 0c 11 00 90 03 82 18 ff 20 c8 46 08 c2 20 48
>3a45d8	a9 00 08 5b 68 28 20 23 1b 20 21 02 28 2b 60 08
>3a45e8	c2 20 48 a9 20 03 5b 68 28 e2 20 29 0f c9 0f f0
>3a45f8	cc a9 5b 20 18 00 a0 00 00 b7 18 c9 20 f0 09 20
>3a4608	18 00 c8 c0 08 00 d0 f1 a9 5d 20 18 00 80 ab 0b
>3a4618	08 08 c2 20 48 a9 20 03 5b 68 28 c2 30 a9 22 f2
>3a4628	85 20 a9 3a 00 85 22 a0 00 00 e2 20 a9 00 97 20
>3a4638	c8 c0 1e 00 d0 f8 c2 20 a9 22 f0 8f 30 f2 3a a9
>3a4648	3a 00 8f 32 f2 3a af 21 08 00 8f 24 f2 3a af 23
>3a4658	08 00 8f 26 f2 3a 28 2b 60 08 c2 30 20 ff 1a 20
>3a4668	01 17 20 76 04 20 17 46 e2 20 a9 2c 85 35 20 20
>3a4678	1c b0 0f c2 20 a9 ff ff 8f 54 03 00 8f 56 03 00
>3a4688	80 17 20 de 1a 20 01 17 20 4c 04 c2 20 a5 21 8f
>3a4698	54 03 00 a5 23 8f 56 03 00 22 18 11 00 b0 1f 08
>3a46a8	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 11 8f d1 08
>3a46b8	00 c2 20 29 ff 00 20 53 18 e2 20 dc d2 08 28 60
>3a46c8	8b 0b 08 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20
>3a46d8	48 a9 00 48 ab 68 28 e2 20 af 2e 03 00 85 21 a9
>3a46e8	00 85 22 85 23 85 24 a9 00 85 25 85 e8 a9 3a 85
>3a46f8	e7 c2 20 a9 2b 47 85 e5 20 82 3f e2 20 af 20 03
>3a4708	00 85 21 a9 00 85 22 85 23 85 24 a9 00 85 25 85
>3a4718	e8 a9 3a 85 e7 c2 20 a9 33 47 85 e5 20 82 3f 28
>3a4728	2b ab 60 44 4f 53 53 54 41 54 00 42 49 4f 53 53
>3a4738	54 41 54 00 08 c2 30 20 ff 1a 20 01 17 20 76 04
>3a4748	a5 21 8f 60 03 00 a5 23 8f 62 03 00 a9 ff ff 8f
>3a4758	54 03 00 8f 56 03 00 22 24 11 00 b0 25 20 53 18
>3a4768	20 c8 46 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a4778	11 8f d1 08 00 c2 20 29 ff 00 20 53 18 e2 20 dc
>3a4788	d2 08 20 53 18 28 60 08 c2 30 20 ff 1a 20 01 17
>3a4798	20 76 04 20 17 46 a9 00 00 8f 54 03 00 a9 01 00
>3a47a8	8f 56 03 00 20 6e 3c 22 18 11 00 b0 22 20 c8 46
>3a47b8	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 11 8f d1
>3a47c8	08 00 c2 20 29 ff 00 20 53 18 e2 20 dc d2 08 20
>3a47d8	c8 46 c2 20 a2 12 00 18 bf 22 f2 3a 69 00 00 85
>3a47e8	90 bf 24 f2 3a 69 01 00 85 92 e2 20 a9 00 87 90
>3a47f8	c2 20 a9 00 00 85 78 a9 01 00 85 7a a2 00 00 e2
>3a4808	20 a7 78 f0 28 c9 0d f0 12 c9 0a f0 04 9d 00 4f
>3a4818	e8 c2 20 e6 78 d0 e8 e6 7a 80 e4 e2 20 a9 00 9d
>3a4828	00 4f 20 8e 20 e6 78 d0 d3 e6 7a 80 cf e0 00 00
>3a4838	f0 0a e2 20 a9 00 9d 00 4f 20 8e 20 28 60 08 c2
>3a4848	30 20 ff 1a 20 01 17 20 76 04 20 17 46 e2 20 a9
>3a4858	2c 20 eb 1b c2 20 20 01 17 20 4c 04 a5 21 8f 50
>3a4868	03 00 a5 23 8f 52 03 00 e2 20 a9 2c c2 20 20 eb
>3a4878	1b 20 01 17 20 4c 04 a5 21 8f 58 03 00 a5 23 8f
>3a4888	5a 03 00 22 1c 11 00 b0 22 20 c8 46 08 c2 20 48
>3a4898	a9 00 08 5b 68 28 e2 20 a9 12 8f d1 08 00 c2 20
>3a48a8	29 ff 00 20 53 18 e2 20 dc d2 08 20 c8 46 28 60
>3a48b8	da 5a 08 a2 00 00 a0 00 00 e2 20 b7 21 9d 00 04
>3a48c8	f0 04 e8 c8 80 f5 28 7a fa 60 08 c2 30 20 ff 1a
>3a48d8	20 01 17 20 76 04 20 17 46 a9 00 00 85 a4 e2 20
>3a48e8	a9 01 85 a6 a9 20 85 b2 c2 20 a9 00 00 85 a9 a9
>3a48f8	ff ff 85 a7 c2 20 a9 00 00 85 53 85 55 a9 ff ff
>3a4908	85 57 a9 ff 7f 85 59 20 d2 12 e2 20 a9 80 85 b2
>3a4918	c2 20 c6 a9 18 a9 00 00 8f 50 03 00 65 a9 8f 58
>3a4928	03 00 a9 01 00 8f 52 03 00 69 00 00 8f 5a 03 00
>3a4938	22 1c 11 00 b0 22 20 c8 46 08 c2 20 48 a9 00 08
>3a4948	5b 68 28 e2 20 a9 12 8f d1 08 00 c2 20 29 ff 00
>3a4958	20 53 18 e2 20 dc d2 08 20 c8 46 28 60 08 c2 30
>3a4968	20 ff 1a 20 01 17 20 76 04 20 b8 48 22 04 11 00
>3a4978	b0 22 20 c8 46 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a4988	20 a9 13 8f d1 08 00 c2 20 29 ff 00 20 53 18 e2
>3a4998	20 dc d2 08 20 c8 46 28 60 da 08 e2 20 c9 61 90
>3a49a8	08 c9 7b b0 04 29 df 80 13 c9 20 90 13 a2 00 00
>3a49b8	df cc 49 3a f0 0a e8 e0 0f 00 d0 f4 28 38 fa 6b
>3a49c8	28 18 fa 6b 2a 2b 2c 2f 3a 3b 3c 3d 3e 3f 5c 5b
>3a49d8	5d 7c 22 08 08 c2 20 48 a9 00 08 5b 68 28 c2 30
>3a49e8	20 01 17 20 76 04 20 b8 48 22 10 11 00 b0 22 20
>3a49f8	c8 46 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 14
>3a4a08	8f d1 08 00 c2 20 29 ff 00 20 53 18 e2 20 dc d2
>3a4a18	08 e2 20 a9 2c 20 eb 1b c2 20 20 01 17 20 76 04
>3a4a28	ad 38 03 85 08 ad 3a 03 85 0a e2 20 a2 00 00 a9
>3a4a38	20 95 7c e8 e0 0b 00 d0 f8 a2 00 00 a0 00 00 b7
>3a4a48	21 f0 6d c9 2e f0 30 22 a1 49 3a b0 1f 08 c2 20
>3a4a58	48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d1 08 00 c2
>3a4a68	20 29 ff 00 20 53 18 e2 20 dc d2 08 95 7c c8 e8
>3a4a78	c0 08 00 d0 ca 80 01 c8 a2 08 00 b7 21 f0 31 22
>3a4a88	a1 49 3a b0 22 20 c8 46 08 c2 20 48 a9 00 08 5b
>3a4a98	68 28 e2 20 a9 0a 8f d1 08 00 c2 20 29 ff 00 20
>3a4aa8	53 18 e2 20 dc d2 08 95 7c c8 e8 c0 0b 00 d0 cb
>3a4ab8	a2 00 00 a0 00 00 b5 7c 97 08 e8 c8 c0 0b 00 d0
>3a4ac8	f5 22 14 11 00 b0 22 20 c8 46 08 c2 20 48 a9 00
>3a4ad8	08 5b 68 28 e2 20 a9 15 8f d1 08 00 c2 20 29 ff
>3a4ae8	00 20 53 18 e2 20 dc d2 08 20 c8 46 28 60 5c b3
>3a4af8	64 3a 5c 04 63 3a 5c b4 64 3a 5c 30 54 3a 5c 8d
>3a4b08	54 3a 5c c0 53 3a 5c 46 53 3a 5c c3 58 3a 5c b1
>3a4b18	4f 3a 5c de 52 3a 5c 99 52 3a 5c 23 52 3a 5c c2
>3a4b28	63 3a 5c bf 50 3a 5c 15 4f 3a 5c 3d 64 3a 5c ed
>3a4b38	4f 3a 5c b6 64 3a 5c af 64 3a 5c dc 51 3a 5c b7
>3a4b48	64 3a 18 fb c2 20 a9 ff fe 1b 58 5c 57 4b 3a c2
>3a4b58	30 22 15 4f 3a 20 08 00 20 0c 00 8b e2 20 a9 00
>3a4b68	48 ab a2 00 4f 20 84 03 ab 22 fa 4a 3a 22 02 4b
>3a4b78	3a 80 e2 08 8b e2 20 a9 3a 48 ab c2 10 a2 8e 4b
>3a4b88	20 ae 02 ab 28 6b 41 20 3c 73 74 61 72 74 3e 20
>3a4b98	3c 61 73 73 65 6d 62 6c 79 3e 0d 20 20 41 73 73
>3a4ba8	65 6d 62 6c 65 20 61 20 70 72 6f 67 72 61 6d 0d
>3a4bb8	0d 43 20 3c 73 74 61 72 74 31 3e 20 3c 73 74 61
>3a4bc8	72 74 32 3e 20 5b 6c 65 6e 20 28 31 20 69 66 20
>3a4bd8	62 6c 61 6e 6b 29 5d 0d 20 20 43 6f 6d 70 61 72
>3a4be8	65 20 74 6f 20 73 65 63 74 69 6f 6e 73 20 6f 66
>3a4bf8	20 6d 65 6d 6f 72 79 0d 0d 44 20 3c 73 74 61 72
>3a4c08	74 3e 20 5b 65 6e 64 5d 0d 20 20 44 69 73 61 73
>3a4c18	73 65 6d 62 6c 65 20 61 20 70 72 6f 67 72 61 6d
>3a4c28	0d 0d 46 20 3c 73 74 61 72 74 3e 20 3c 65 6e 64
>3a4c38	3e 20 3c 62 79 74 65 3e 0d 20 20 46 69 6c 6c 20
>3a4c48	61 20 62 6c 6f 63 6b 20 6f 66 20 6d 65 6d 6f 72
>3a4c58	79 20 77 69 74 68 20 61 20 62 79 74 65 0d 0d 47
>3a4c68	20 5b 61 64 64 72 65 73 73 5d 0d 20 20 53 74 61
>3a4c78	72 74 20 65 78 65 63 75 74 69 6f 6e 20 61 74 20
>3a4c88	61 20 6c 6f 63 61 74 69 6f 6e 0d 0d 4a 20 5b 61
>3a4c98	64 64 72 65 73 73 5d 20 2d 20 4a 75 6d 70 20 74
>3a4ca8	6f 20 61 20 6c 6f 63 61 74 69 6f 6e 20 69 6e 20
>3a4cb8	6d 65 6d 6f 72 79 0d 20 20 4a 75 6d 70 20 74 6f
>3a4cc8	20 61 20 6c 6f 63 61 74 69 6f 6e 20 69 6e 20 6d
>3a4cd8	65 6d 6f 72 79 0d 0d 48 20 3c 73 74 61 72 74 3e
>3a4ce8	20 3c 65 6e 64 3e 20 3c 62 79 74 65 3e 20 5b 62
>3a4cf8	79 74 65 5d 2e 2e 0d 20 20 48 75 6e 74 20 66 6f
>3a4d08	72 20 76 61 6c 75 65 73 20 69 6e 20 6d 65 6d 6f
>3a4d18	72 79 0d 0d 4c 20 20 20 20 20 4c 4f 41 44 20 20
>3a4d28	20 20 20 20 20 20 20 22 46 69 6c 65 22 20 5b 64
>3a4d38	65 73 74 69 6e 61 74 69 6f 6e 5d 0d 4d 20 3c 73
>3a4d48	74 61 72 74 3e 20 5b 65 6e 64 5d 0d 20 20 44 75
>3a4d58	6d 70 20 74 68 65 20 76 61 6c 75 65 20 69 6e 20
>3a4d68	6d 65 6d 6f 72 79 0d 0d 52 20 2d 20 44 69 73 70
>3a4d78	6c 61 79 20 74 68 65 20 76 61 6c 75 65 73 20 6f
>3a4d88	66 20 74 68 65 20 72 65 67 69 73 74 65 72 73 0d
>3a4d98	0d 3b 20 3c 50 43 3e 20 3c 41 3e 20 3c 58 3e 20
>3a4da8	3c 59 3e 20 3c 53 50 3e 20 3c 44 42 52 3e 20 3c
>3a4db8	44 50 3e 20 3c 4e 56 4d 58 44 49 5a 43 3e 0d 20
>3a4dc8	20 43 68 61 6e 67 65 20 74 68 65 20 63 6f 6e 74
>3a4dd8	65 6e 74 73 20 6f 66 20 74 68 65 20 72 65 67 69
>3a4de8	73 74 65 72 73 0d 0d 53 20 20 20 20 20 53 41 56
>3a4df8	45 20 20 20 20 20 20 20 20 20 22 46 69 6c 65 22
>3a4e08	20 3c 73 74 61 72 74 3e 20 3c 65 6e 64 3e 0d 54
>3a4e18	20 3c 73 74 61 72 74 3e 20 3c 65 6e 64 3e 20 3c
>3a4e28	64 65 73 74 69 6e 61 74 69 6f 6e 3e 0d 20 20 54
>3a4e38	72 61 6e 73 66 65 72 20 28 63 6f 70 79 29 20 64
>3a4e48	61 74 61 20 77 69 74 68 69 6e 20 6d 65 6d 6f 72
>3a4e58	79 0d 0d 57 20 3c 62 79 74 65 3e 0d 20 20 53 65
>3a4e68	74 20 74 68 65 20 72 65 67 69 73 74 65 72 20 77
>3a4e78	69 64 74 68 20 66 6c 61 67 73 20 66 6f 72 20 74
>3a4e88	68 65 20 64 69 73 61 73 73 65 6d 62 6c 65 72 0d
>3a4e98	0d 58 20 2d 20 52 65 74 75 72 6e 20 74 6f 20 42
>3a4ea8	41 53 49 43 0d 0d 3e 20 3c 73 74 61 72 74 3e 20
>3a4eb8	3c 62 79 74 65 3e 20 5b 62 79 74 65 5d 2e 2e 2e
>3a4ec8	0d 20 20 45 64 69 74 20 64 61 74 61 20 69 6e 20
>3a4ed8	6d 65 6d 6f 72 79 0d 0d 3f 20 2d 20 44 69 73 70
>3a4ee8	6c 61 79 20 61 20 73 68 6f 72 74 20 68 65 6c 70
>3a4ef8	20 73 63 72 65 65 6e 0d 0d 00 08 08 c2 20 48 a9
>3a4f08	46 08 5b 68 28 e2 20 a5 0d 85 4e 28 6b 08 e2 20
>3a4f18	48 a9 3a 48 ab 68 28 a2 f4 64 20 ae 02 e2 20 a9
>3a4f28	3b 20 18 00 a9 20 20 18 00 c2 30 08 e2 20 48 a9
>3a4f38	00 48 ab 68 28 a0 03 00 a2 42 02 20 31 02 c2 20
>3a4f48	a9 20 00 20 18 00 af 44 02 00 20 be 02 a9 20 00
>3a4f58	20 18 00 af 46 02 00 20 be 02 a9 20 00 20 18 00
>3a4f68	af 48 02 00 20 be 02 a9 20 00 20 18 00 af 4a 02
>3a4f78	00 20 be 02 a9 20 00 20 18 00 af 4e 02 00 20 d8
>3a4f88	02 a9 20 00 20 18 00 20 18 00 af 4c 02 00 20 be
>3a4f98	02 a9 20 00 20 18 00 08 e2 20 ad 4f 02 22 0d 62
>3a4fa8	3a 28 20 21 02 20 21 02 6b 08 0b 08 c2 20 48 a9
>3a4fb8	46 08 5b 68 28 e2 20 a5 15 87 0d e2 20 a5 0f c5
>3a4fc8	13 d0 0e c2 20 a5 0d c5 11 d0 06 20 21 02 2b 28
>3a4fd8	6b c2 20 18 a5 0d 69 01 00 85 0d e2 20 a5 0e 69
>3a4fe8	00 85 0e 80 d0 08 0b 08 c2 20 48 a9 46 08 5b 68
>3a4ff8	28 e2 20 a5 0f c5 17 90 45 c2 20 a5 0d c5 15 90
>3a5008	3d e2 20 a7 0d 87 15 a5 0f c5 13 d0 0b c2 20 a5
>3a5018	0d c5 11 d0 03 4c a4 50 c2 20 18 a5 0d 69 01 00
>3a5028	85 0d e2 20 a5 0e 69 00 85 0e c2 20 18 a5 15 69
>3a5038	01 00 85 15 e2 20 a5 16 69 00 85 16 80 c3 c2 20
>3a5048	38 a5 11 e5 0d 85 19 e2 20 a5 13 e5 0f 85 1b c2
>3a5058	20 18 a5 19 65 15 85 15 e2 20 a5 1b 65 17 85 17
>3a5068	e2 20 a7 11 87 15 a5 13 c5 0f d0 0a c2 20 a5 11
>3a5078	c5 0d d0 02 80 26 c2 20 38 a5 11 e9 01 00 85 11
>3a5088	e2 20 a5 12 e9 00 85 12 c2 20 38 a5 15 e9 01 00
>3a5098	85 15 e2 20 a5 16 e9 00 85 16 80 c4 20 21 02 2b
>3a50a8	28 6b 08 e2 20 c9 21 90 0b c9 7f 90 04 c9 a0 90
>3a50b8	03 28 38 6b 28 18 6b 08 8b 0b 08 c2 20 48 a9 46
>3a50c8	08 5b 68 28 e2 20 a9 00 8f b4 08 00 a5 31 c9 02
>3a50d8	b0 16 c9 01 90 20 c2 20 18 a5 0d 69 00 01 85 11
>3a50e8	e2 20 a5 0f 69 00 85 13 c2 20 a5 0d 85 32 e2 20
>3a50f8	a5 0f 85 34 80 12 c2 20 18 a5 32 69 00 01 85 11
>3a5108	e2 20 a5 34 69 00 85 13 e2 20 a0 00 00 c2 20 a5
>3a5118	32 85 19 e2 20 a5 34 85 1b e2 20 a7 19 22 aa 50
>3a5128	3a b0 02 a9 3f 99 7c 08 c2 20 18 a5 19 69 01 00
>3a5138	85 19 e2 20 a5 1b 69 00 85 1b c8 c0 08 00 90 db
>3a5148	a9 00 99 7c 08 a9 3e 20 18 00 a9 20 20 18 00 e2
>3a5158	20 a5 34 20 d8 02 a9 3a 20 18 00 c2 20 a5 32 20
>3a5168	be 02 c2 20 a9 08 00 85 47 e2 20 a9 20 20 18 00
>3a5178	a7 32 20 d8 02 22 ec 61 3a e2 20 c6 47 d0 ea a9
>3a5188	20 20 18 00 a9 20 20 18 00 08 e2 20 48 a9 00 48
>3a5198	ab 68 28 a2 7c 08 20 ae 02 20 21 02 20 38 02 a5
>3a51a8	34 c5 13 90 0f c2 20 a5 32 c5 11 90 07 20 21 02
>3a51b8	2b ab 28 6b 4c 10 51 08 8d 90 08 e2 20 bd 00 00
>3a51c8	99 00 00 ad 90 08 f0 0a c8 e8 e8 e8 e8 ce 90 08
>3a51d8	80 eb 28 6b 08 0b 8b 08 c2 20 48 a9 46 08 5b 68
>3a51e8	28 08 e2 20 48 a9 00 48 ab 68 28 c2 30 a5 0d 85
>3a51f8	32 a5 0f 85 34 e2 20 a5 31 3a 85 47 a2 57 08 a0
>3a5208	7c 08 22 bf 51 3a a0 00 00 b9 7c 08 87 32 22 ec
>3a5218	61 3a c8 c4 47 d0 f2 ab 2b 28 6b 08 0b 8b 08 c2
>3a5228	20 48 a9 46 08 5b 68 28 08 e2 20 48 a9 00 48 ab
>3a5238	68 28 e2 20 c2 10 a5 31 3a 3a 85 47 a2 5b 08 a0
>3a5248	7c 08 22 bf 51 3a c2 20 a5 0d 85 32 a5 0f 85 34
>3a5258	c2 20 a5 34 c5 13 d0 06 a5 32 c5 11 f0 2c e2 20
>3a5268	a0 00 00 b7 32 d9 7c 08 d0 1a c8 c4 47 d0 f4 c2
>3a5278	20 a5 32 85 4a a5 34 85 4c 22 96 5c 3a e2 20 a9
>3a5288	20 20 18 00 22 ec 61 3a 80 c6 20 21 02 ab 2b 28
>3a5298	6b 08 c2 20 48 a9 46 08 5b 68 28 e2 20 a5 31 f0
>3a52a8	0e c2 30 a5 0d 8f 40 02 00 a5 0f 8f 42 02 00 af
>3a52b8	46 02 00 aa af 48 02 00 a8 af 4a 02 00 1b af 4c
>3a52c8	02 00 5b e2 20 a9 3a 48 a9 52 48 a9 d9 48 4c 10
>3a52d8	53 ea 5c 04 00 3a 08 c2 20 48 a9 46 08 5b 68 28
>3a52e8	e2 20 a5 31 f0 c9 c2 30 a5 0d 8f 40 02 00 a5 0f
>3a52f8	8f 42 02 00 af 46 02 00 aa af 48 02 00 a8 af 4a
>3a5308	02 00 1b af 4c 02 00 5b e2 20 af 4e 02 00 48 ab
>3a5318	a9 5c 8f a0 08 00 af 42 02 00 8f a3 08 00 af 41
>3a5328	02 00 8f a2 08 00 af 40 02 00 8f a1 08 00 af 4f
>3a5338	02 00 48 c2 20 af 44 02 00 28 5c a0 08 00 08 0b
>3a5348	8b 08 e2 20 48 a9 3a 48 ab 68 28 08 c2 20 48 a9
>3a5358	46 08 5b 68 28 c2 10 e2 20 a5 31 c9 02 f0 0c c9
>3a5368	03 d0 11 c2 20 a5 15 85 47 80 11 c2 20 a9 01 00
>3a5378	85 47 80 08 a2 b8 64 20 ae 02 80 35 a5 0d 85 4a
>3a5388	a5 0f 85 4c a0 00 00 e2 20 a7 4a d7 11 f0 09 22
>3a5398	96 5c 3a a9 20 20 18 00 c2 20 18 a5 4a 69 01 00
>3a53a8	85 4a a5 4c 69 00 00 85 4c c8 c4 47 d0 d9 20 21
>3a53b8	02 20 21 02 ab 2b 28 6b 08 0b 8b 08 e2 20 48 a9
>3a53c8	00 48 ab 68 28 08 c2 20 48 a9 46 08 5b 68 28 e2
>3a53d8	20 a5 31 f0 4f a6 0d 8e 40 02 a6 0f 8e 42 02 c9
>3a53e8	01 f0 41 a6 11 8e 44 02 c9 02 f0 38 a6 15 8e 46
>3a53f8	02 c9 03 f0 2f a6 19 8e 48 02 c9 04 f0 26 a6 1d
>3a5408	8e 4a 02 c9 05 f0 1d e2 10 a6 21 8e 4e 02 c9 06
>3a5418	f0 12 c2 10 a6 25 8e 4c 02 c9 07 f0 07 e2 10 a6
>3a5428	29 8e 4f 02 ab 2b 28 6b 08 0b 8b 08 c2 20 48 a9
>3a5438	46 08 5b 68 28 e2 20 c2 10 a2 00 00 bf 25 65 3a
>3a5448	f0 18 c7 08 f0 03 e8 80 f3 c2 20 8a 0a aa bf 66
>3a5458	54 3a 8f 2d 08 00 22 8a 54 3a ab 2b 28 6b 06 4b
>3a5468	0e 4b 12 4b 16 4b 1a 4b 1e 4b 22 4b 26 4b 2a 4b
>3a5478	2e 4b 0a 4b 32 4b 36 4b 3a 4b 02 4f 3e 4b 42 4b
>3a5488	7b 4b 6c 2d 08 08 8b 0b 08 c2 20 48 a9 46 08 5b
>3a5498	68 28 e2 20 a5 31 c9 02 b0 03 4c 33 56 c2 20 a5
>3a54a8	0d 85 32 a5 0f 85 34 c2 20 22 35 58 3a c9 ff ff
>3a54b8	f0 10 85 54 e2 20 a5 31 c9 03 f0 36 a9 13 85 4f
>3a54c8	80 4c 20 21 02 08 e2 20 48 a9 3a 48 ab 68 28 c2
>3a54d8	10 a2 6a 56 20 ae 02 4c 33 56 20 21 02 08 e2 20
>3a54e8	48 a9 3a 48 ab 68 28 c2 10 a2 79 56 20 ae 02 4c
>3a54f8	33 56 e2 20 22 6b 58 3a c9 ff f0 de 85 4f c9 03
>3a5508	f0 62 c9 0b f0 5e c9 13 f0 04 c9 08 f0 00 22 63
>3a5518	57 3a b0 03 4c fc 55 87 32 22 ec 61 3a 08 e2 20
>3a5528	48 a9 00 48 ab 68 28 c2 20 a5 32 85 56 a5 34 85
>3a5538	58 e2 20 a5 4f c9 12 f0 6c c9 16 f0 68 c9 14 f0
>3a5548	7c 29 3f c9 02 d0 03 4c 2a 56 c2 20 29 ff 00 aa
>3a5558	e2 20 bf 32 61 3a c9 03 f0 57 c9 02 f0 5f c9 01
>3a5568	f0 67 80 71 c2 20 a5 54 c9 aa 5d f0 26 c9 0e 5e
>3a5578	f0 2a c9 8e 5d f0 1c c9 92 5d f0 17 c9 9a 5d f0
>3a5588	12 c9 82 5d f0 0d c9 96 5d f0 08 c9 7e 5d f0 03
>3a5598	4c 16 55 e2 20 a9 12 85 4f 4c 16 55 e2 20 a9 16
>3a55a8	85 4f 4c 16 55 22 a6 56 3a 90 60 c9 02 f0 0e 80
>3a55b8	18 a0 02 00 b9 96 08 97 56 22 ec 61 3a a0 01 00
>3a55c8	b9 96 08 97 56 22 ec 61 3a a0 00 00 b9 96 08 97
>3a55d8	56 22 ec 61 3a e2 20 a9 41 20 18 00 a9 20 20 18
>3a55e8	00 a6 32 86 4a a6 34 86 4c 22 96 5c 3a a9 20 20
>3a55f8	18 00 80 37 20 21 02 08 e2 20 48 a9 3a 48 ab 68
>3a5608	28 c2 10 a2 37 56 20 ae 02 80 20 20 21 02 08 e2
>3a5618	20 48 a9 3a 48 ab 68 28 c2 10 a2 87 56 20 ae 02
>3a5628	80 09 a5 4f 29 c0 d0 95 4c d1 55 2b ab 28 6b 41
>3a5638	64 64 72 65 73 73 69 6e 67 20 6d 6f 64 65 20 6e
>3a5648	6f 74 20 64 65 66 69 6e 65 64 20 66 6f 72 20 74
>3a5658	68 61 74 20 69 6e 73 74 72 75 63 74 69 6f 6e 2e
>3a5668	0d 00 42 61 64 20 6d 6e 65 6d 6f 6e 69 63 2e 0d
>3a5678	00 42 61 64 20 6f 70 65 72 61 6e 64 2e 0d 00 52
>3a5688	65 6c 61 74 69 76 65 20 6f 66 66 73 65 74 20 69
>3a5698	73 20 74 6f 6f 20 6c 61 72 67 65 2e 0d 00 08 0b
>3a56a8	08 c2 20 48 a9 46 08 5b 68 28 e2 20 a5 4f c9 12
>3a56b8	f0 0a c2 20 18 a5 32 69 02 00 80 08 c2 20 18 a5
>3a56c8	32 69 01 00 85 4a a5 34 69 00 00 85 4c 38 a5 50
>3a56d8	e5 4a 85 50 a5 52 e5 4c 85 52 e2 20 a5 4f c9 16
>3a56e8	f0 1e a5 50 30 0c a5 51 d0 2a a5 52 d0 26 a9 01
>3a56f8	80 26 a5 51 c9 ff d0 1c a5 52 c9 ff d0 16 80 18
>3a5708	a5 51 30 06 a5 52 d0 0c 80 0e a5 52 c9 ff d0 04
>3a5718	a9 02 80 04 2b 28 18 6b 2b 28 38 6b 08 0b c2 10
>3a5728	da 08 c2 20 48 a9 46 08 5b 68 28 e2 20 a2 00 00
>3a5738	df 00 d0 3a f0 08 e8 e0 10 00 f0 1b 80 f2 c2 20
>3a5748	06 50 26 52 06 50 26 52 06 50 26 52 06 50 26 52
>3a5758	e2 20 8a 05 50 85 50 fa 2b 28 6b 0b 8b 08 c2 20
>3a5768	48 a9 46 08 5b 68 28 08 e2 20 48 a9 3a 48 ab 68
>3a5778	28 e2 20 a5 4f 29 3f 85 4a c2 30 a2 00 00 a0 00
>3a5788	00 bd 30 5e f0 1b c5 54 d0 0d e2 20 b9 32 60 29
>3a5798	3f c5 4a f0 07 c2 20 e8 e8 c8 80 e5 98 38 ab 2b
>3a57a8	6b 18 ab 2b 6b 08 0b 08 c2 20 48 a9 46 08 5b 68
>3a57b8	28 e2 20 c2 10 a0 00 00 64 50 64 52 b7 03 f0 11
>3a57c8	c9 64 f0 19 48 b7 36 85 4a 68 c5 4a d0 0b c8 80
>3a57d8	eb b7 36 d0 04 2b 28 38 6b 2b 28 18 6b e2 20 b7
>3a57e8	36 c9 3a b0 04 c9 30 b0 14 c9 47 b0 04 c9 41 b0
>3a57f8	0c c9 67 b0 e4 c9 61 b0 02 80 de 29 df 22 24 57
>3a5808	3a 80 cb 0b 08 c2 20 48 a9 46 08 5b 68 28 a0 00
>3a5818	00 e2 20 b7 03 f0 03 c8 80 f9 c2 20 c8 5a 68 18
>3a5828	65 03 85 03 a5 05 69 00 00 85 05 2b 6b 0b 08 c2
>3a5838	20 48 a9 46 08 5b 68 28 c2 20 a5 11 85 36 a5 13
>3a5848	85 38 a9 be 5c 85 03 a9 3a 00 85 05 22 ad 57 3a
>3a5858	b0 0d 22 0b 58 3a a7 03 d0 f2 a9 ff ff 80 02 a5
>3a5868	03 2b 6b 08 0b 08 c2 20 48 a9 46 08 5b 68 28 c2
>3a5878	30 a5 15 85 36 a5 17 85 38 a9 4a 61 85 03 a9 3a
>3a5888	00 85 05 22 ad 57 3a b0 22 22 0b 58 3a c2 20 18
>3a5898	a5 03 69 01 00 85 03 a5 05 69 00 00 85 05 e2 20
>3a58a8	a7 03 d0 df c2 20 a9 ff ff 80 0d 22 0b 58 3a e2
>3a58b8	20 a7 03 c2 20 29 ff 00 2b 28 6b 08 8b 0b 08 c2
>3a58c8	20 48 a9 46 08 5b 68 28 e2 20 a9 00 8f b4 08 00
>3a58d8	a5 31 c9 02 b0 16 c9 01 90 20 c2 20 18 a5 0d 69
>3a58e8	00 01 85 11 e2 20 a5 0f 69 00 85 13 c2 20 a5 0d
>3a58f8	85 32 e2 20 a5 0f 85 34 80 12 c2 20 18 a5 32 69
>3a5908	00 01 85 11 e2 20 a5 34 69 00 85 13 22 2f 59 3a
>3a5918	e2 20 a5 34 c5 13 90 f4 c2 20 a5 32 c5 11 90 ec
>3a5928	20 21 02 2b ab 28 6b 08 0b e2 20 a9 41 20 18 00
>3a5938	a9 20 20 18 00 08 c2 20 48 a9 78 08 5b 68 28 c2
>3a5948	20 a5 00 85 18 e2 20 a5 02 85 1a 22 96 5c 3a a9
>3a5958	20 20 18 00 c2 20 18 a5 00 69 01 00 85 18 e2 20
>3a5968	a5 02 69 00 85 1a e2 20 c2 10 a7 00 c9 c2 d0 0b
>3a5978	48 a7 18 49 ff 2f 94 08 00 80 0b c9 e2 d0 0c 48
>3a5988	a7 18 0f 94 08 00 8f 94 08 00 68 c2 20 29 ff 00
>3a5998	0a aa bf 30 5e 3a aa 22 10 5c 3a e2 20 a7 00 aa
>3a59a8	bf 32 60 3a 22 ec 61 3a 22 bd 59 3a 20 21 02 20
>3a59b8	38 02 2b 28 6b 08 e2 20 48 29 3f 0a c2 10 aa 68
>3a59c8	7c cb 59 fb 59 16 5a 1d 5a 42 5a 49 5a 64 5a 86
>3a59d8	5a 97 5a d4 5a dc 5a ed 5a fe 5a 05 5b 2a 5b 57
>3a59e8	5b c3 5a a8 5a 75 5a 4a 5b 54 5b 68 5b 97 5b 45
>3a59f8	5b a8 5b a9 28 20 18 00 22 bf 5b 3a a9 2c 20 18
>3a5a08	00 a9 58 20 18 00 a9 29 20 18 00 4c b9 5b 22 bf
>3a5a18	5b 3a 4c b9 5b e2 20 48 a9 23 20 18 00 68 29 c0
>3a5a28	c9 00 f0 0f 4a 4a 2f 94 08 00 d0 07 22 c9 5b 3a
>3a5a38	4c b9 5b 22 bf 5b 3a 4c b9 5b 22 c9 5b 3a 4c b9
>3a5a48	5b a9 28 20 18 00 22 bf 5b 3a a9 29 20 18 00 a9
>3a5a58	2c 20 18 00 a9 59 20 18 00 4c b9 5b 22 bf 5b 3a
>3a5a68	a9 2c 20 18 00 a9 58 20 18 00 4c b9 5b 22 bf 5b
>3a5a78	3a a9 2c 20 18 00 a9 59 20 18 00 4c b9 5b 22 c9
>3a5a88	5b 3a a9 2c 20 18 00 a9 59 20 18 00 4c b9 5b 22
>3a5a98	c9 5b 3a a9 2c 20 18 00 a9 58 20 18 00 4c b9 5b
>3a5aa8	a9 28 20 18 00 22 c9 5b 3a a9 2c 20 18 00 a9 58
>3a5ab8	20 18 00 a9 29 20 18 00 4c b9 5b a9 28 20 18 00
>3a5ac8	22 bf 5b 3a a9 29 20 18 00 4c b9 5b a9 41 20 18
>3a5ad8	00 4c bd 5b 22 bf 5b 3a a9 2c 20 18 00 a9 53 20
>3a5ae8	18 00 4c b9 5b a9 5b 20 18 00 22 bf 5b 3a a9 5d
>3a5af8	20 18 00 4c b9 5b 22 d7 5b 3a 4c bd 5b a9 28 20
>3a5b08	18 00 22 bf 5b 3a a9 2c 20 18 00 a9 53 20 18 00
>3a5b18	a9 29 20 18 00 a9 2c 20 18 00 a9 59 20 18 00 4c
>3a5b28	b9 5b a9 5b 20 18 00 22 bf 5b 3a a9 5d 20 18 00
>3a5b38	a9 2c 20 18 00 a9 59 20 18 00 4c b9 5b a0 02 00
>3a5b48	80 03 a0 01 00 22 3d 5c 3a 4c bd 5b 4c bd 5b 22
>3a5b58	d7 5b 3a a9 2c 20 18 00 a9 58 20 18 00 4c bd 5b
>3a5b68	a9 23 20 18 00 8b a5 02 48 ab a6 00 e8 a0 01 00
>3a5b78	22 31 02 3a a9 2c 20 18 00 a9 23 20 18 00 a6 00
>3a5b88	a0 01 00 22 31 02 3a ab 22 ec 61 3a 4c b9 5b a9
>3a5b98	28 20 18 00 22 c9 5b 3a a9 29 20 18 00 4c b9 5b
>3a5ba8	a9 5b 20 18 00 22 c9 5b 3a a9 5d 20 18 00 4c b9
>3a5bb8	5b 22 ec 61 3a 28 6b 08 e2 20 a7 00 20 d8 02 28
>3a5bc8	6b 08 c2 30 a7 00 20 be 02 22 ec 61 3a 28 6b 08
>3a5bd8	8b 0b c2 30 5a 08 c2 20 48 a9 78 08 5b 68 28 08
>3a5be8	e2 20 48 a9 00 48 ab 68 28 e2 20 a0 00 00 a7 00
>3a5bf8	99 90 08 22 ec 61 3a c8 c0 03 00 d0 f1 22 96 5c
>3a5c08	3a c2 30 7a 2b ab 28 6b 08 8b e2 20 c2 10 08 e2
>3a5c18	20 48 a9 3a 48 ab 68 28 bd 00 00 20 18 00 e8 bd
>3a5c28	00 00 20 18 00 e8 bd 00 00 20 18 00 e8 a9 20 20
>3a5c38	18 00 ab 28 6b 08 0b 08 c2 20 48 a9 78 08 5b 68
>3a5c48	28 e2 20 c0 02 00 f0 14 a7 00 85 18 30 06 64 19
>3a5c58	64 1a 80 1e a9 ff 85 19 85 1a 80 16 a7 00 85 18
>3a5c68	22 ec 61 3a a7 00 85 19 30 04 64 1a 80 04 a9 ff
>3a5c78	85 1a c2 20 38 a5 00 65 18 85 18 e2 20 a5 02 65
>3a5c88	1a 85 1a 22 96 5c 3a 22 ec 61 3a 2b 28 6b 08 0b
>3a5c98	c2 20 48 08 c2 20 48 a9 46 08 5b 68 28 e2 20 a5
>3a5ca8	4c 20 d8 02 e2 20 a9 3a 20 18 00 c2 20 a5 4a 20
>3a5cb8	be 02 68 2b 28 6b 4f 52 41 00 41 4e 44 00 45 4f
>3a5cc8	52 00 41 44 43 00 53 54 41 00 4c 44 41 00 43 4d
>3a5cd8	50 00 53 42 43 00 41 53 4c 00 52 4f 4c 00 4c 53
>3a5ce8	52 00 52 4f 52 00 53 54 58 00 4c 44 58 00 44 45
>3a5cf8	43 00 49 4e 43 00 42 49 54 00 4a 4d 50 00 53 54
>3a5d08	59 00 4c 44 59 00 43 50 59 00 43 50 58 00 42 52
>3a5d18	4b 00 4a 53 52 00 52 54 49 00 52 54 53 00 50 48
>3a5d28	50 00 50 4c 50 00 50 48 41 00 50 4c 41 00 44 45
>3a5d38	59 00 54 41 59 00 49 4e 59 00 49 4e 58 00 43 4c
>3a5d48	43 00 53 45 43 00 43 4c 49 00 53 45 49 00 54 59
>3a5d58	41 00 43 4c 56 00 43 4c 44 00 53 45 44 00 54 58
>3a5d68	41 00 54 58 53 00 54 41 58 00 54 53 58 00 44 45
>3a5d78	58 00 4e 4f 50 00 42 50 4c 00 42 4d 49 00 42 56
>3a5d88	43 00 42 56 53 00 42 43 43 00 42 43 53 00 42 4e
>3a5d98	45 00 42 45 51 00 54 53 42 00 54 52 42 00 53 54
>3a5da8	5a 00 42 52 41 00 50 48 59 00 50 4c 59 00 50 48
>3a5db8	58 00 50 4c 58 00 50 48 44 00 50 4c 44 00 50 48
>3a5dc8	4b 00 52 54 4c 00 50 48 42 00 50 4c 42 00 57 41
>3a5dd8	49 00 58 42 41 00 54 43 53 00 54 53 43 00 54 43
>3a5de8	44 00 54 44 43 00 54 58 59 00 54 59 58 00 53 54
>3a5df8	50 00 58 43 45 00 43 4f 50 00 4a 53 4c 00 57 44
>3a5e08	4d 00 50 45 52 00 42 52 4c 00 52 45 50 00 53 45
>3a5e18	50 00 4d 56 50 00 4d 56 4e 00 50 45 49 00 50 45
>3a5e28	41 00 4a 4d 4c 00 00 00 16 5d be 5c fe 5d be 5c
>3a5e38	9e 5d be 5c de 5c be 5c 26 5d be 5c de 5c be 5d
>3a5e48	9e 5d be 5c de 5c be 5c 7e 5d be 5c be 5c be 5c
>3a5e58	a2 5d be 5c de 5c be 5c 46 5d be 5c fa 5c de 5d
>3a5e68	a2 5d be 5c de 5c be 5c 1a 5d c2 5c 02 5e c2 5c
>3a5e78	fe 5c c2 5c e2 5c c2 5c 2a 5d c2 5c e2 5c c2 5d
>3a5e88	fe 5c c2 5c e2 5c c2 5c 82 5d c2 5c c2 5c c2 5c
>3a5e98	fe 5c c2 5c e2 5c c2 5c 4a 5d c2 5c f6 5c e2 5d
>3a5ea8	fe 5c c2 5c e2 5c c2 5c 1e 5d c6 5c 06 5e c6 5c
>3a5eb8	1a 5e c6 5c e6 5c c6 5c 2e 5d c6 5c e6 5c c6 5d
>3a5ec8	02 5d c6 5c e6 5c c6 5c 86 5d c6 5c c6 5c c6 5c
>3a5ed8	1e 5e c6 5c e6 5c c6 5c 4e 5d c6 5c ae 5d e6 5d
>3a5ee8	2a 5e c6 5c e6 5c c6 5c 22 5d ca 5c 0a 5e ca 5c
>3a5ef8	a6 5d ca 5c ea 5c ca 5c 32 5d ca 5c ea 5c ca 5d
>3a5f08	02 5d ca 5c ea 5c ca 5c 8a 5d ca 5c ca 5c ca 5c
>3a5f18	a6 5d ca 5c ea 5c ca 5c 52 5d ca 5c b2 5d ea 5d
>3a5f28	02 5d ca 5c ea 5c ca 5c aa 5d ce 5c 0e 5e ce 5c
>3a5f38	06 5d ce 5c ee 5c ce 5c 36 5d fe 5c 66 5d ce 5d
>3a5f48	06 5d ce 5c ee 5c ce 5c 8e 5d ce 5c ce 5c ce 5c
>3a5f58	06 5d ce 5c ee 5c ce 5c 56 5d ce 5c 6a 5d ee 5d
>3a5f68	a6 5d ce 5c a6 5d ce 5c 0a 5d d2 5c f2 5c d2 5c
>3a5f78	0a 5d d2 5c f2 5c d2 5c 3a 5d d2 5c 6e 5d d2 5d
>3a5f88	0a 5d d2 5c f2 5c d2 5c 92 5d d2 5c d2 5c d2 5c
>3a5f98	0a 5d d2 5c f2 5c d2 5c 5a 5d d2 5c 72 5d f2 5d
>3a5fa8	0a 5d d2 5c f2 5c d2 5c 0e 5d d6 5c 12 5e d6 5c
>3a5fb8	0e 5d d6 5c f6 5c d6 5c 3e 5d d6 5c 76 5d d6 5d
>3a5fc8	0e 5d d6 5c f6 5c d6 5c 96 5d d6 5c d6 5c d6 5c
>3a5fd8	22 5e d6 5c f6 5c d6 5c 5e 5d d6 5c b6 5d f6 5d
>3a5fe8	2a 5e d6 5c f6 5c d6 5c 12 5d da 5c 16 5e da 5c
>3a5ff8	12 5d da 5c fa 5c da 5c 42 5d da 5c 7a 5d da 5d
>3a6008	12 5d da 5c fa 5c da 5c 9a 5d da 5c da 5c da 5c
>3a6018	26 5e da 5c fa 5c da 5c 62 5d da 5c ba 5d fa 5d
>3a6028	1a 5d da 5c fa 5c da 5c 00 00 13 00 02 09 01 01
>3a6038	01 0a 13 82 08 13 03 03 03 0b 12 04 0f 0c 01 05
>3a6048	05 0d 13 06 08 13 03 07 07 0e 03 00 0b 09 01 01
>3a6058	01 0a 13 82 08 13 03 03 03 0b 12 04 0f 0c 05 05
>3a6068	05 0d 13 06 08 13 07 07 07 0e 13 00 13 09 14 01
>3a6078	01 0a 13 82 08 13 03 03 03 0b 12 04 0f 0c 14 05
>3a6088	05 0d 13 06 13 13 0b 07 07 0b 13 00 16 09 01 01
>3a6098	01 0a 13 82 08 13 15 03 03 0b 12 04 0f 0c 05 05
>3a60a8	05 0d 13 06 13 13 10 07 07 0e 12 00 16 09 01 01
>3a60b8	01 0a 13 82 13 13 03 03 03 0b 12 04 0f 0c 05 05
>3a60c8	11 0d 13 06 13 13 03 07 07 0e 82 00 42 09 01 01
>3a60d8	01 0a 13 82 13 13 03 03 03 0b 12 04 0f 0c 05 05
>3a60e8	11 0d 13 06 13 13 07 07 06 0e 42 00 02 09 01 01
>3a60f8	01 0a 13 82 13 13 03 03 03 0b 12 04 0f 0c 01 05
>3a6108	05 0d 13 06 13 13 17 07 07 0e 42 00 02 09 01 01
>3a6118	01 0f 13 82 13 13 03 03 03 0b 12 04 0f 0c 03 05
>3a6128	05 0d 13 06 13 13 10 07 07 0e 01 01 01 02 01 01
>3a6138	02 02 00 01 01 03 01 01 03 01 02 01 01 00 02 02
>3a6148	02 02 41 00 08 64 64 3a 64 64 64 64 2c 58 00 0e
>3a6158	64 64 3a 64 64 64 64 00 0b 64 64 64 64 2c 58 00
>3a6168	07 64 64 64 64 2c 59 00 06 64 64 64 64 00 03 64
>3a6178	64 2c 58 00 05 64 64 2c 59 00 11 64 64 2c 53 00
>3a6188	09 64 64 00 01 23 64 64 64 64 00 c2 23 64 64 2c
>3a6198	23 64 64 00 14 23 64 64 00 02 28 64 64 2c 53 29
>3a61a8	2c 59 00 0c 28 64 64 64 64 2c 58 29 00 10 28 64
>3a61b8	64 64 64 29 00 10 28 64 64 2c 58 29 00 00 28 64
>3a61c8	64 29 2c 59 00 04 28 64 64 29 00 0f 5b 64 64 64
>3a61d8	64 5d 00 17 5b 64 64 5d 2c 59 00 0d 5b 64 64 5d
>3a61e8	00 0a 00 00 08 c2 20 48 18 af 78 08 00 69 01 00
>3a61f8	8f 78 08 00 e2 20 af 7a 08 00 69 00 8f 7a 08 00
>3a6208	c2 20 68 28 6b 08 c2 10 e2 20 da a2 08 00 0a b0
>3a6218	08 48 a9 30 20 18 00 80 06 48 a9 31 20 18 00 68
>3a6228	ca d0 eb fa 28 6b 08 c2 20 48 a9 46 08 5b 68 28
>3a6238	e2 20 a7 32 f0 0a c9 20 d0 06 22 ec 61 3a 80 f2
>3a6248	6b 08 08 c2 20 48 a9 46 08 5b 68 28 22 ec 61 3a
>3a6258	22 2e 62 3a c2 30 a5 31 c2 20 29 ff 00 0a 0a aa
>3a6268	a5 32 95 0d a5 34 95 0f e2 20 a7 32 f0 14 c9 22
>3a6278	f0 06 22 ec 61 3a 80 f2 a9 00 87 32 22 ec 61 3a
>3a6288	e6 31 28 6b 08 c2 20 48 a9 46 08 5b 68 28 e2 20
>3a6298	64 4a c2 20 64 50 64 52 e2 20 a7 32 c9 3a f0 0d
>3a62a8	20 2b 03 90 0e 22 24 57 3a a9 01 85 4a 22 ec 61
>3a62b8	3a 80 e5 a5 4a f0 16 a5 31 c2 20 29 ff 00 0a 0a
>3a62c8	aa a5 50 95 0d a5 52 95 0f e2 20 e6 31 6b e2 20
>3a62d8	64 31 22 2e 62 3a a7 32 f0 21 c9 22 d0 06 22 49
>3a62e8	62 3a 80 0a 22 8c 62 3a a5 31 c9 09 b0 0d a7 32
>3a62f8	f0 09 c9 20 f0 dc 20 2b 03 b0 d7 6b 08 0b 08 c2
>3a6308	20 48 a9 46 08 5b 68 28 c2 10 e2 20 a2 31 00 74
>3a6318	00 ca d0 fb a9 00 85 02 85 34 c2 20 a9 00 4f 85
>3a6328	00 85 32 e2 20 22 2e 62 3a c9 00 f0 38 c2 20 a5
>3a6338	32 85 08 e2 20 a5 34 85 0a a2 01 00 22 ec 61 3a
>3a6348	a7 32 d0 06 86 0b 64 31 80 1b c9 20 f0 03 e8 80
>3a6358	eb 86 0b a9 00 87 32 22 ec 61 3a a7 08 c9 41 f0
>3a6368	07 22 d6 62 3a 2b 28 6b 22 2e 62 3a a7 32 f0 f5
>3a6378	22 8c 62 3a 22 2e 62 3a a7 32 f0 e9 c2 20 a5 32
>3a6388	85 11 e2 20 a5 34 85 13 22 ec 61 3a a7 32 f0 26
>3a6398	c9 20 d0 f4 a9 00 87 32 e6 31 22 ec 61 3a 22 2e
>3a63a8	62 3a a7 32 f0 bf c2 20 a5 32 85 15 e2 20 a5 34
>3a63b8	85 17 e6 31 80 af e6 31 80 ab 08 c2 10 e2 20 a5
>3a63c8	31 d0 0f a2 b8 64 a9 3a 48 ab 20 ae 02 20 21 02
>3a63d8	80 61 c2 20 a5 0d 8f 21 08 00 a5 0f 8f 23 08 00
>3a63e8	20 17 46 e2 20 a5 31 c9 01 d0 0f c2 20 a9 ff ff
>3a63f8	8f 54 03 00 8f 56 03 00 80 0e c2 20 a5 11 8f 54
>3a6408	03 00 a5 13 8f 56 03 00 22 18 11 00 b0 25 e2 20
>3a6418	a2 de 64 a9 3a 48 ab 20 ae 02 af 2e 03 00 20 d8
>3a6428	02 a9 20 20 18 00 af 20 03 00 20 d8 02 20 21 02
>3a6438	20 21 02 28 6b 8b 08 c2 10 e2 20 a5 31 c9 03 f0
>3a6448	0f a2 b8 64 a9 3a 48 ab 20 ae 02 20 21 02 80 54
>3a6458	c2 20 a5 0d 8f 21 08 00 a5 0f 8f 23 08 00 20 17
>3a6468	46 a5 11 8f 50 03 00 a5 13 8f 52 03 00 a5 15 8f
>3a6478	58 03 00 a5 17 8f 5a 03 00 22 1c 11 00 b0 25 e2
>3a6488	20 a2 c8 64 a9 3a 48 ab 20 ae 02 af 2e 03 00 20
>3a6498	d8 02 a9 20 20 18 00 af 20 03 00 20 d8 02 20 21
>3a64a8	02 20 21 02 28 ab 6b 5c c1 20 3a 6b 00 00 00 00
>3a64b8	42 61 64 20 61 72 67 75 6d 65 6e 74 73 0d 0d 00
>3a64c8	55 6e 61 62 6c 65 20 74 6f 20 73 61 76 65 20 66
>3a64d8	69 6c 65 3a 20 00 55 6e 61 62 6c 65 20 74 6f 20
>3a64e8	6c 6f 61 64 20 66 69 6c 65 3a 20 00 0d 20 20 50
>3a64f8	43 20 20 20 20 20 41 20 20 20 20 58 20 20 20 20
>3a6508	59 20 20 20 20 53 50 20 20 20 44 42 52 20 44 50
>3a6518	20 20 20 4e 56 4d 58 44 49 5a 43 0d 00 41 43 44
>3a6528	46 47 4a 48 4c 4d 52 3b 53 54 56 57 58 3e 3f 00
>3a6538	18 fb 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48
>3a6548	a9 00 48 ab 68 28 c2 30 20 77 65 a9 ff fe 1b 08
>3a6558	e2 20 48 a9 3a 48 ab 68 28 a2 03 d2 20 ae 02 08
>3a6568	e2 20 48 a9 00 48 ab 68 28 4c c1 20 4c 74 65 08
>3a6578	20 b5 01 20 6e 3c 28 60 00 00 00 00 00 00 00 00
>3a6588	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 1702 times (27232 bytes)...
>3acff8	00 00 00 00 00 00 00 00 30 31 32 33 34 35 36 37
>3ad008	38 39 41 42 43 44 45 46 2b 00 2d 00 2a 00 2f 00
>3ad018	4d 4f 44 00 5e 00 3c 00 3d 00 3e 00 4e 4f 54 00
>3ad028	41 4e 44 00 4f 52 00 28 00 29 00 52 45 4d 00 50
>3ad038	52 49 4e 54 00 4c 45 54 00 47 4f 54 4f 00 45 4e
>3ad048	44 00 49 46 00 54 48 45 4e 00 45 4c 53 45 00 47
>3ad058	4f 53 55 42 00 52 45 54 55 52 4e 00 46 4f 52 00
>3ad068	54 4f 00 53 54 45 50 00 4e 45 58 54 00 44 4f 00
>3ad078	4c 4f 4f 50 00 57 48 49 4c 45 00 55 4e 54 49 4c
>3ad088	00 45 58 49 54 00 43 4c 52 00 53 54 4f 50 00 50
>3ad098	4f 4b 45 00 50 4f 4b 45 57 00 50 4f 4b 45 4c 00
>3ad0a8	43 4c 53 00 52 45 41 44 00 44 41 54 41 00 52 45
>3ad0b8	53 54 4f 52 45 00 44 49 4d 00 43 41 4c 4c 00 3c
>3ad0c8	3d 00 3e 3d 00 3c 3e 00 2d 00 4c 45 4e 00 50 45
>3ad0d8	45 4b 00 50 45 45 4b 57 00 50 45 45 4b 4c 00 43
>3ad0e8	48 52 24 00 41 53 43 00 53 50 43 00 54 41 42 00
>3ad0f8	41 42 53 00 53 47 4e 00 48 45 58 24 00 44 45 43
>3ad108	00 53 54 52 24 00 56 41 4c 00 4c 45 46 54 24 00
>3ad118	52 49 47 48 54 24 00 4d 49 44 24 00 52 55 4e 00
>3ad128	4e 45 57 00 4c 4f 41 44 00 4c 49 53 54 00 44 49
>3ad138	52 00 42 4c 4f 41 44 00 42 52 55 4e 00 42 53 41
>3ad148	56 45 00 44 45 4c 00 53 41 56 45 00 52 45 4e 41
>3ad158	4d 45 00 4d 4f 4e 49 54 4f 52 00 47 45 54 00 49
>3ad168	4e 50 55 54 00 53 45 54 42 4f 52 44 45 52 00 54
>3ad178	45 58 54 43 4f 4c 4f 52 00 53 45 54 42 47 43 4f
>3ad188	4c 4f 52 00 53 45 54 44 41 54 45 00 47 45 54 44
>3ad198	41 54 45 24 00 53 45 54 54 49 4d 45 00 47 45 54
>3ad1a8	54 49 4d 45 24 00 47 52 41 50 48 49 43 53 00 53
>3ad1b8	45 54 43 4f 4c 4f 52 00 50 49 58 4d 41 50 00 43
>3ad1c8	4c 52 50 49 58 4d 41 50 00 50 4c 4f 54 00 4c 49
>3ad1d8	4e 45 00 46 49 4c 4c 00 53 50 52 49 54 45 00 53
>3ad1e8	50 52 49 54 45 41 54 00 53 50 52 49 54 45 53 48
>3ad1f8	4f 57 00 0d 52 45 41 44 59 0d 00 43 32 35 36 20
>3ad208	46 6f 65 6e 69 78 20 42 41 53 49 43 38 31 36 20
>3ad218	76 30 2e 31 2e 30 2d 61 6c 70 68 61 2b 33 31 0d
>3ad228	00
>3b0000					.align 256
.3b0000					CREDITS_TEXT
>3b0000	54 68 69 73 20 69 73 20		                .text "This is the credits screen!"
>3b0008	74 68 65 20 63 72 65 64 69 74 73 20 73 63 72 65
>3b0018	65 6e 21
>3b001b	20 20 20 20 20 20 20 20		                .fill 128 - len("This is the credits screen!"), $20
>3b0023	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 4 times (64 bytes)...
>3b0073	20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0080	49 20 77 6f 75 6c 64 20		                .text "I would like to thank the academy."
>3b0088	6c 69 6b 65 20 74 6f 20 74 68 61 6e 6b 20 74 68
>3b0098	65 20 61 63 61 64 65 6d 79 2e
>3b00a2	20 20 20 20 20 20 20 20		                .fill 128 - len("I would like to thank the academy."), $20
>3b00aa	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 4 times (64 bytes)...
>3b00fa	20 20 20 20 20 20
>3b0100					                .text ""
>3b0100	20 20 20 20 20 20 20 20		                .fill 128 - len(""), $20
>3b0108	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 6 times (96 bytes)...
>3b0178	20 20 20 20 20 20 20 20
>3b0180	50 72 65 73 73 20 61 6e		                .text "Press any key to go back..."
>3b0188	79 20 6b 65 79 20 74 6f 20 67 6f 20 62 61 63 6b
>3b0198	2e 2e 2e
>3b019b	20 20 20 20 20 20 20 20		                .fill 128 - len("Press any key to go back..."), $20
>3b01a3	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 4 times (64 bytes)...
>3b01f3	20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0200	20 20 20 20 20 20 20 20		                .fill 128 * 60,$20
>3b0208	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 478 times (7648 bytes)...
>3b1ff8	20 20 20 20 20 20 20 20
>3b2000					.align 256
>3b2000	f3 f3 f3 f3 f3 f3 f3 f3		CREDITS_COLOR   .fill 128 * 64, $F3
>3b2008	f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3
;	...repeated 510 times (8160 bytes)...
>3b3ff8	f3 f3 f3 f3 f3 f3 f3 f3

;******  End of listing
