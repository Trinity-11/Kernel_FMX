
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -D TARGET=2 --long-address --flat --intel-hex -o kernel.hex --list kernel_hex.lst --labels=kernel_hex.lbl src\kernel.asm
; Wed Apr 08 20:07:49 2020

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=2					TARGET=2

;******  Processing input file: src\kernel.asm

=1					TARGET_FLASH = 1              ; The code is being assembled for Flash
=2					TARGET_RAM = 2                ; The code is being assembled for RAM

;******  Processing file: src\macros_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\characters.asm

=$03					CHAR_CTRL_C = $03   ; CTRL-C
=$08					CHAR_BS = $08       ; Backspace (delete character to the left of the cursor)
=$09					CHAR_TAB = $09      ; TAB (moves cursor to next tabulated column)
=$0a					CHAR_LF = $0A       ; Line feed
=$0d					CHAR_CR = $0D       ; Carriage return
=$0f					CHAR_INS = $0F      ; Insert a space at the cursor
=$11					CHAR_UP = $11       ; Up arrow
=$1d					CHAR_RIGHT = $1D    ; Right arrow
=$20					CHAR_SP = $20       ; Space
=$91					CHAR_DOWN = $91     ; Down arrow
=$9d					CHAR_LEFT = $9D     ; Left arrow
=$7f					CHAR_DEL = $7F      ; Delete key (delete the character at the cursor)

;******  Return to file: src\kernel.asm


;******  Processing file: src\simulator_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_inc.asm

=$000000				BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000				unused_0000      = $000000 ;12 Bytes unused
=$000008				OPL2_ADDY_PTR_LO = $000008  ; THis Points towards the Instruments Database
=$000009				OPL2_ADDY_PTR_MD = $000009
=$00000a				OPL2_ADDY_PTR_HI = $00000A
=$00000c				SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f				COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011				COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013				LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=25
=$000015				LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017				CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a				CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c				CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e				CURCOLOR         = $00001E ;1 Byte Color of next character to be printed to the screen.
=$00001f				COLORPOS         = $00001F ;3 Byte address of cursor's position in the color matrix
=$000022				STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024				STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$000026				OPL2_OPERATOR    = $000026 ;
=$000027				OPL2_CHANNEL     = $000027 ;
=$000028				OPL2_REG_REGION  = $000028 ; Offset to the Group of Registers
=$00002a				OPL2_REG_OFFSET  = $00002A ; 2 Bytes (16Bits)
=$00002c				OPL2_IND_ADDY_LL = $00002C ; 2 Bytes Reserved (Only need 3)
=$00002e				OPL2_IND_ADDY_HL = $00002E ; 2 Bytes Reserved (Only need 3)
=$000030				OPL2_NOTE        = $000030 ; 1 Byte
=$000031				OPL2_OCTAVE      = $000031 ; 1 Byte
=$000032				OPL2_PARAMETER0  = $000032 ; 1 Byte - Key On/Feedback
=$000033				OPL2_PARAMETER1  = $000033 ; 1 Byte
=$000034				OPL2_PARAMETER2  = $000034 ; 1 Byte
=$000035				OPL2_PARAMETER3  = $000035 ; 1 Byte
=$000036				OPL2_LOOP        = $000036 ;
=$000036				OPL2_BLOCK       = $000036
=$000038				SDCARD_FILE_PTR  = $000038 ; 3 Bytes Pointer to Filename to open
=$00003c				SDCARD_BYTE_NUM  = $00003C ; 2Bytes
=$00003f				SDCARD_PRSNT_MNT = $00003F ; 1 Byte, Indicate that the SDCard is Present and that it is Mounted
=$000040				BM_CLEAR_SCRN_X  = $000040
=$000042				BM_CLEAR_SCRN_Y  = $000042
=$000040				RAD_STARTLINE    = $000040 ; 1 Byte
=$000041				RAD_PATTERN_IDX  = $000041 ; 1 Byte
=$000042				RAD_LINE         = $000042 ; 1 Byte
=$000043				RAD_LINENUMBER   = $000043 ; 1 Byte
=$000044				RAD_CHANNEL_NUM  = $000044 ; 1 Byte
=$000045				RAD_ISLASTCHAN   = $000045 ; 1 Byte
=$000046				RAD_Y_POINTER    = $000046 ; 2 Bytes
=$000048				RAD_TICK         = $000048
=$00004a				RAD_CHANNEL_DATA = $00004A ; 2 Bytes
=$00004c				RAD_CHANNE_EFFCT = $00004C
=$00004d				RAD_TEMP         = $00004D
=$000050				RAD_ADDR         = $000050 ; 3 bytes to avoid OPL2 errors.
=$000053				RAD_PATTRN       = $000053 ; 1 bytes - offset to patter
=$000054				RAD_PTN_DEST     = $000054 ; 3 bytes - where to write the pattern data
=$000057				RAD_CHANNEL      = $000057 ; 2 bytes - 0 to 8
=$000059				RAD_LAST_NOTE    = $000059 ; 1 if this is the last note
=$00005a				RAD_LINE_PTR     = $00005A ; 2 bytes - offset to memory location
=$000040				BMP_X_SIZE       = $000040 ; 2 Bytes
=$000042				BMP_Y_SIZE       = $000042 ; 2 Bytes
=$000044				BMP_PRSE_SRC_PTR = $000044 ; 3 Bytes
=$000048				BMP_PRSE_DST_PTR = $000048 ; 3 Bytes
=$00004c				BMP_COLOR_PALET  = $00004C ; 2 Bytes
=$00004e				SCRN_X_STRIDE    = $00004E ; 2 Bytes, Basically How many Pixel Accross in Bitmap Mode
=$000050				BMP_FILE_SIZE    = $000050 ; 4 Bytes
=$000054				BMP_POSITION_X   = $000054 ; 2 Bytes Where, the BMP will be position on the X Axis
=$000056				BMP_POSITION_Y   = $000056 ; 2 Bytes Where, the BMP will be position on the Y Axis
=$000058				BMP_PALET_CHOICE = $000058 ;
=$0000e0				MOUSE_PTR        = $0000E0
=$0000e1				MOUSE_POS_X_LO   = $0000E1
=$0000e2				MOUSE_POS_X_HI   = $0000E2
=$0000e3				MOUSE_POS_Y_LO   = $0000E3
=$0000e4				MOUSE_POS_Y_HI   = $0000E4
=$0000f0				USER_TEMP        = $0000F0 ;32 Bytes Temp space for user programs
=$000100				GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000140				INT_CONTROLLER   = $000140 ; $000140...$00015F Interrupt Controller
=$000160				TIMER_CONTROLLER = $000160 ; $000160...$00017F Timer0/Timer1/Timer2 Block
=$000160				TIMER_CTRL_REGLL = $000160 ;
=$000161				TIMER_CTRL_REGLH = $000161 ;
=$000162				TIMER_CTRL_REGHL = $000162 ;
=$000163				TIMER_CTRL_REGHH = $000163 ;
=$000240				CPU_REGISTERS    = $000240 ; Byte
=$000240				CPUPC            = $000240 ;2 Bytes Program Counter (PC)
=$000242				CPUPBR           = $000242 ;2 Bytes Program Bank Register (K)
=$000244				CPUA             = $000244 ;2 Bytes Accumulator (A)
=$000246				CPUX             = $000246 ;2 Bytes X Register (X)
=$000248				CPUY             = $000248 ;2 Bytes Y Register (Y)
=$00024a				CPUSTACK         = $00024A ;2 Bytes Stack Pointer (S)
=$00024c				CPUDP            = $00024C ;2 Bytes Direct Page Register (D)
=$00024e				CPUDBR           = $00024E ;1 Byte  Data Bank Register (B)
=$00024f				CPUFLAGS         = $00024F ;1 Byte  Flags (P)
=$000250				MONITOR_VARS     = $000250 ; Byte  MONITOR Variables. BASIC variables may overlap this space
=$000250				MCMDADDR         = $000250 ;3 Bytes Address of the current line of text being processed by the command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
=$000253				MCMP_TEXT        = $000253 ;3 Bytes Address of symbol being evaluated for COMPARE routine
=$000256				MCMP_LEN         = $000256 ;2 Bytes Length of symbol being evaluated for COMPARE routine
=$000258				MCMD             = $000258 ;3 Bytes Address of the current command/function string
=$00025b				MCMD_LEN         = $00025B ;2 Bytes Length of the current command/function string
=$00025d				MARG1            = $00025D ;4 Bytes First command argument. May be data or address, depending on command
=$000261				MARG2            = $000261 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000265				MARG3            = $000265 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000269				MARG4            = $000269 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$00026d				MARG5            = $00026D ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000271				MARG6            = $000271 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000275				MARG7            = $000275 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000279				MARG8            = $000279 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000300				LOADFILE_VARS    = $000300 ; Byte
=$000300				LOADFILE_NAME    = $000300 ;3 Bytes (addr) Name of file to load. Address in Data Page
=$000303				LOADFILE_LEN     = $000303 ;1 Byte  Length of filename. 0=Null Terminated
=$000304				LOADPBR          = $000304 ;1 Byte  First Program Bank of loaded file ($05 segment)
=$000305				LOADPC           = $000305 ;2 Bytes Start address of loaded file ($05 segment)
=$000307				LOADDBR          = $000307 ;1 Byte  First data bank of loaded file ($06 segment)
=$000308				LOADADDR         = $000308 ;2 Bytes FIrst data address of loaded file ($06 segment)
=$00030a				LOADFILE_TYPE    = $00030A ;3 Bytes (addr) File type string in loaded data file. Actual string data will be in Bank 1. Valid values are BIN, PRG, P16
=$00030d				BLOCK_LEN        = $00030D ;2 Bytes Length of block being loaded
=$00030f				BLOCK_ADDR       = $00030F ;2 Bytes (temp) Address of block being loaded
=$000311				BLOCK_BANK       = $000311 ;1 Byte  (temp) Bank of block being loaded
=$000312				BLOCK_COUNT      = $000312 ;2 Bytes (temp) Counter of bytes read as file is loaded
=$000320				SDOS_VARIABLES   = $000320
=$000320				BIOS_STATUS      = $000320      ; 1 byte - Status of any BIOS operation
=$000321				BIOS_DEV         = $000321      ; 1 byte - Block device number for block operations
=$000322				BIOS_LBA         = $000322      ; 4 bytes - Address of block to read/write (this is the physical block, w/o reference to partition)
=$000326				BIOS_BUFF_PTR    = $000326      ; 4 bytes - 24-bit pointer to memory for read/write operations
=$00032a				BIOS_FIFO_COUNT  = $00032A      ; 2 bytes - The number of bytes read on the last block read
=$00032e				DOS_STATUS       = $00032E      ; 1 byte - The error code describing any error with file access
=$000330				DOS_CLUS_ID      = $000330      ; 4 bytes - The cluster desired for a DOS operation
=$000338				DOS_DIR_PTR      = $000338      ; 4 bytes - Pointer to a directory entry (assumed to be within DOS_SECTOR)
=$00033c				DOS_BUFF_PTR     = $00033C      ; 4 bytes - A pointer for DOS cluster read/write operations
=$000340				DOS_FD_PTR       = $000340      ; 4 bytes - A pointer to a file descriptor
=$000344				DOS_FAT_LBA      = $000344      ; 4 bytes - The LBA for a sector of the FAT we need to read/write
=$000348				DOS_TEMP         = $000348      ; 4 bytes - Temporary storage for DOS operations
=$00034c				DOS_FILE_SIZE    = $00034C      ; 4 bytes - The size of a file
=$000350				DOS_SRC_PTR      = $000350      ; 4 bytes - Pointer for transferring data
=$000354				DOS_DST_PTR      = $000354      ; 4 bytes - Pointer for transferring data
=$000358				DOS_END_PTR      = $000358      ; 4 bytes - Pointer to the last byte to save
=$00035c				DOS_RUN_PTR      = $00035C      ; 4 bytes - Pointer for starting a loaded program
=$000400				DOS_PATH_BUFF    = $000400      ; 256 bytes - A buffer for path names
=$000700				CURRUART         = $000700 ; 3-bytes: the base address of the current UART
=$000703				CHAN_OUT         = $000703 ; 1-byte: the number of the current output channel (for PUTC, etc.)
=$000704				CHAN_IN          = $000704 ; 1-byte: the number of the current input channel (for GETCH, etc.)
=$000f00				KEY_BUFFER       = $000F00 ; 64 Bytes keyboard buffer
=$0080					KEY_BUFFER_SIZE  = $0080   ;128 Bytes (constant) keyboard buffer length
=$000f7f				KEY_BUFFER_END   = $000F7F ;  1 Byte  Last byte of keyboard buffer
=$000f83				KEY_BUFFER_CMD   = $000F83 ;  1 Byte  Indicates the Command Process Status
=$000f84				COMMAND_SIZE_STR = $000F84 ;  1 Byte
=$000f86				COMMAND_COMP_TMP = $000F86 ;  2 Bytes
=$000f87				KEYBOARD_SC_FLG  = $000F87 ;  1 Bytes that indicate the Status of Left Shift, Left CTRL, Left ALT, Right Shift
=$000f88				KEYBOARD_SC_TMP  = $000F88 ;  1 Byte, Interrupt Save Scan Code while Processing
=$000f89				KEYBOARD_LOCKS   = $000F89 ;  1 Byte, the status of the various lock keys
=$000f8a				KEYFLAG          = $000F8A ;  1 Byte, flag to indicate if CTRL-C has been pressed
=$000f8b				KEY_BUFFER_RPOS  = $000F8B ;  2 Byte, position of the character to read from the KEY_BUFFER
=$000f8d				KEY_BUFFER_WPOS  = $000F8D ;  2 Byte, position of the character to write to the KEY_BUFFER
=$001000				KERNEL_JMP_BEGIN = $001000 ; Reserved for the Kernel jump table
=$001fff				KERNEL_JMP_END   = $001FFF
=$002000				TEST_BEGIN       = $002000 ;28672 Bytes Test/diagnostic code for prototype.
=$007fff				TEST_END         = $007FFF ;0 Byte
=$008000				STACK_BEGIN      = $008000 ;32512 Bytes The default beginning of stack space
=$00feff				STACK_END        = $00FEFF ;0 Byte  End of stack space. Everything below this is I/O space
=$00ff00				ISR_BEGIN        = $00FF00 ; Byte  Beginning of CPU vectors in Direct page
=$00ff00				HRESET           = $00FF00 ;16 Bytes Handle RESET asserted. Reboot computer and re-initialize the kernel.
=$00ff10				HCOP             = $00FF10 ;16 Bytes Handle the COP instruction. Program use; not used by OS
=$00ff20				HBRK             = $00FF20 ;16 Bytes Handle the BRK instruction. Returns to BASIC Ready prompt.
=$00ff30				HABORT           = $00FF30 ;16 Bytes Handle ABORT asserted. Return to Ready prompt with an error message.
=$00ff40				HNMI             = $00FF40 ;32 Bytes Handle NMI
=$00ff60				HIRQ             = $00FF60 ;32 Bytes Handle IRQ
=$00ff80				Unused_FF80      = $00FF80 ;End of direct page Interrrupt handlers
=$00ffe0				VECTORS_BEGIN    = $00FFE0 ;0 Byte  Interrupt vectors
=$00ffe0				JMP_READY        = $00FFE0 ;4 Bytes Jumps to ROM READY routine. Modified whenever alternate command interpreter is loaded.
=$00ffe4				VECTOR_COP       = $00FFE4 ;2 Bytes Native COP Interrupt vector
=$00ffe6				VECTOR_BRK       = $00FFE6 ;2 Bytes Native BRK Interrupt vector
=$00ffe8				VECTOR_ABORT     = $00FFE8 ;2 Bytes Native ABORT Interrupt vector
=$00ffea				VECTOR_NMI       = $00FFEA ;2 Bytes Native NMI Interrupt vector
=$00ffec				VECTOR_RESET     = $00FFEC ;2 Bytes Unused (Native RESET vector)
=$00ffee				VECTOR_IRQ       = $00FFEE ;2 Bytes Native IRQ Vector
=$00fff0				RETURN           = $00FFF0 ;4 Bytes RETURN key handler. Points to BASIC or MONITOR subroutine to execute when RETURN is pressed.
=$00fff4				VECTOR_ECOP      = $00FFF4 ;2 Bytes Emulation mode interrupt handler
=$00fff6				VECTOR_EBRK      = $00FFF6 ;2 Bytes Emulation mode interrupt handler
=$00fff8				VECTOR_EABORT    = $00FFF8 ;2 Bytes Emulation mode interrupt handler
=$00fffa				VECTOR_ENMI      = $00FFFA ;2 Bytes Emulation mode interrupt handler
=$00fffc				VECTOR_ERESET    = $00FFFC ;2 Bytes Emulation mode interrupt handler
=$00fffe				VECTOR_EIRQ      = $00FFFE ;2 Bytes Emulation mode interrupt handler
=$010000				VECTORS_END      = $010000 ;*End of vector space
=$00ffff				BANK0_END        = $00FFFF ;End of Bank 00 and Direct page

;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_data.asm

>380000	00 a0 af			                .long $AFA000       ; SCREENBEGIN, 3 bytes, Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>380003	4c 00				                .word 76            ; COLS_VISIBLE, 2 bytes, Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>380005	80 00				                .word 128           ; COLS_PER_LINE, 2 bytes, Columns in memory per screen line. A virtual line can be this long. Default=128
>380007	38 00				                .word 56            ; LINES_VISIBLE, 2 bytes, The number of rows visible on the screen. Default=25
>380009	40 00				                .word 64            ; LINES_MAX, 2 bytes, The number of rows in memory for the screen. Default=64
>38000b	00 a0 af			                .long $AFA000       ; CURSORPOS, 3 bytes, The next character written to the screen will be written in this location.
>38000e	00 00				                .word 0             ; CURSORX, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380010	00 00				                .word 0             ; CURSORY, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380012	0f				                .byte $0F           ; CURCOLOR, 2 bytes, Color of next character to be printed to the screen.
>380013	00				                .byte $00           ; CURATTR, 2 bytes, Attribute of next character to be printed to the screen.
>380014	00 80				                .word STACK_BEGIN   ; STACKBOT, 2 bytes, Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
>380016	ff fe				                .word STACK_END     ; STACKTOP, 2 bytes, Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.

;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_code.asm

.ff00	18		clc		RHRESET         CLC
.ff01	fb		xce		                XCE
.ff02	5c 00 10 38	jmp $381000	                JML BOOT
.ff10					RHCOP
.ff10	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff12	8b		phb		                PHB
.ff13	0b		phd		                PHD
.ff14	48		pha		                PHA
.ff15	da		phx		                PHX
.ff16	5a		phy		                PHY
.ff17	5c 08 10 38	jmp $381008	                JML BREAK
.ff20					RHBRK
.ff20	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff22	8b		phb		                PHB
.ff23	0b		phd		                PHD
.ff24	48		pha		                PHA
.ff25	da		phx		                PHX
.ff26	5a		phy		                PHY
.ff27	5c 08 10 38	jmp $381008	                JML BREAK
.ff30					RHABORT
.ff30	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff32	8b		phb		                PHB
.ff33	0b		phd		                PHD
.ff34	48		pha		                PHA
.ff35	da		phx		                PHX
.ff36	5a		phy		                PHY
.ff37	5c 08 10 38	jmp $381008	                JML BREAK
.ff40					 RHNMI
.ff40	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff42	8b		phb		                PHB
.ff43	0b		phd		                PHD
.ff44	48		pha		                PHA
.ff45	da		phx		                PHX
.ff46	5a		phy		                PHY
.ff47	22 4a 12 38	jsl $38124a	                JSL NMI_HANDLER
.ff4b	7a		ply		                PLY
.ff4c	fa		plx		                PLX
.ff4d	68		pla		                PLA
.ff4e	2b		pld		                PLD
.ff4f	ab		plb		                PLB
.ff50	40		rti		                RTI
.ff60					RHIRQ
.ff60	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff62	8b		phb		                PHB
.ff63	0b		phd		                PHD
.ff64	48		pha		                PHA
.ff65	da		phx		                PHX
.ff66	5a		phy		                PHY
.ff67	22 1c 11 38	jsl $38111c	                JSL IRQ_HANDLER
.ff6b	7a		ply		                PLY
.ff6c	fa		plx		                PLX
.ff6d	68		pla		                PLA
.ff6e	2b		pld		                PLD
.ff6f	ab		plb		                PLB
.ff70	40		rti		                RTI
.ffe0	5c 04 00 3a	jmp $3a0004	JUMP_READY      JML MONITOR    ; Kernel READY routine. Rewrite this address to jump to a custom kernel.
>ffe4	10 ff				RVECTOR_COP     .addr HCOP     ; FFE4
>ffe6	20 ff				RVECTOR_BRK     .addr HBRK     ; FFE6
>ffe8	30 ff				RVECTOR_ABORT   .addr HABORT   ; FFE8
>ffea	40 ff				RVECTOR_NMI     .addr HNMI     ; FFEA
>ffec	00 00				                .word $0000    ; FFEC
>ffee	60 ff				RVECTOR_IRQ     .addr HIRQ    ; FFEE
.fff0	5c eb 05 39	jmp $3905eb	RRETURN         JML IRETURN
>fff4	10 ff				RVECTOR_ECOP    .addr HCOP     ; FFF4
>fff6	20 ff				RVECTOR_EBRK    .addr HBRK     ; FFF6
>fff8	30 ff				RVECTOR_EABORT  .addr HABORT   ; FFF8
>fffa	40 ff				RVECTOR_ENMI    .addr HNMI     ; FFFA
>fffc	00 ff				RVECTOR_ERESET  .addr HRESET   ; FFFC
>fffe	60 ff				RVECTOR_EIRQ    .addr HIRQ     ; FFFE

;******  Return to file: src\kernel.asm


;******  Processing file: src\Math_def.asm

=$000100				UNSIGNED_MULT_A_LO  = $000100
=$000101				UNSIGNED_MULT_A_HI  = $000101
=$000102				UNSIGNED_MULT_B_LO  = $000102
=$000103				UNSIGNED_MULT_B_HI  = $000103
=$000104				UNSIGNED_MULT_AL_LO = $000104
=$000105				UNSIGNED_MULT_AL_HI = $000105
=$000106				UNSIGNED_MULT_AH_LO = $000106
=$000107				UNSIGNED_MULT_AH_HI = $000107
=$000108				SIGNED_MULT_A_LO    = $000108
=$000109				SIGNED_MULT_A_HI    = $000109
=$00010a				SIGNED_MULT_B_LO    = $00010A
=$00010b				SIGNED_MULT_B_HI    = $00010B
=$00010c				SIGNED_MULT_AL_LO   = $00010C
=$00010d				SIGNED_MULT_AL_HI   = $00010D
=$00010e				SIGNED_MULT_AH_LO   = $00010E
=$00010f				SIGNED_MULT_AH_HI   = $00010F
=$000110				UNSIGNED_DIV_DEM_LO = $000110
=$000111				UNSIGNED_DIV_DEM_HI = $000111
=$000112				UNSIGNED_DIV_NUM_LO = $000112
=$000113				UNSIGNED_DIV_NUM_HI = $000113
=$000114				UNSIGNED_DIV_QUO_LO = $000114
=$000115				UNSIGNED_DIV_QUO_HI = $000115
=$000116				UNSIGNED_DIV_REM_LO = $000116
=$000117				UNSIGNED_DIV_REM_HI = $000117
=$000118				SIGNED_DIV_DEM_LO   = $000118
=$000119				SIGNED_DIV_DEM_HI   = $000119
=$00011a				SIGNED_DIV_NUM_LO   = $00011A
=$00011b				SIGNED_DIV_NUM_HI   = $00011B
=$00011c				SIGNED_DIV_QUO_LO   = $00011C
=$00011d				SIGNED_DIV_QUO_HI   = $00011D
=$00011e				SIGNED_DIV_REM_LO   = $00011E
=$00011f				SIGNED_DIV_REM_HI   = $00011F
=$000120				ADDER32_A_LL        = $000120
=$000121				ADDER32_A_LH        = $000121
=$000122				ADDER32_A_HL        = $000122
=$000123				ADDER32_A_HH        = $000123
=$000124				ADDER32_B_LL        = $000124
=$000125				ADDER32_B_LH        = $000125
=$000126				ADDER32_B_HL        = $000126
=$000127				ADDER32_B_HH        = $000127
=$000128				ADDER32_R_LL        = $000128
=$000129				ADDER32_R_LH        = $000129
=$00012a				ADDER32_R_HL        = $00012A
=$00012b				ADDER32_R_HH        = $00012B

;******  Return to file: src\kernel.asm


;******  Processing file: src\interrupt_def.asm

=$000140				INT_PENDING_REG0 = $000140 ;
=$000141				INT_PENDING_REG1 = $000141 ;
=$000142				INT_PENDING_REG2 = $000142 ;
=$000143				INT_PENDING_REG3 = $000143 ; FMX Model
=$000144				INT_POL_REG0     = $000144 ;
=$000145				INT_POL_REG1     = $000145 ;
=$000146				INT_POL_REG2     = $000146 ;
=$000147				INT_POL_REG7     = $000147 ; FMX Model
=$000148				INT_EDGE_REG0    = $000148 ;
=$000149				INT_EDGE_REG1    = $000149 ;
=$00014a				INT_EDGE_REG2    = $00014A ;
=$00014b				INT_EDGE_REG3    = $00014B ; FMX Model
=$00014c				INT_MASK_REG0    = $00014C ;
=$00014d				INT_MASK_REG1    = $00014D ;
=$00014e				INT_MASK_REG2    = $00014E ;
=$00014f				INT_MASK_REG3    = $00014F ; FMX Model
=$01					FNX0_INT00_SOF        = $01  ;Start of Frame @ 60FPS
=$02					FNX0_INT01_SOL        = $02  ;Start of Line (Programmable)
=$04					FNX0_INT02_TMR0       = $04  ;Timer 0 Interrupt
=$08					FNX0_INT03_TMR1       = $08  ;Timer 1 Interrupt
=$10					FNX0_INT04_TMR2       = $10  ;Timer 2 Interrupt
=$20					FNX0_INT05_RTC        = $20  ;Real-Time Clock Interrupt
=$40					FNX0_INT06_FDC        = $40  ;Floppy Disk Controller
=$80					FNX0_INT07_MOUSE      = $80  ; Mouse Interrupt (INT12 in SuperIO IOspace)
=$01					FNX1_INT00_KBD        = $01  ;Keyboard Interrupt
=$02					FNX1_INT01_SC0        = $02  ;VICKY_II (INT2) Sprite 2 Sprite Collision
=$04					FNX1_INT02_SC1        = $04  ;VICKY_II (INT3) Sprite 2 Tiles Collision
=$08					FNX1_INT03_COM2       = $08  ;Serial Port 2
=$10					FNX1_INT04_COM1       = $10  ;Serial Port 1
=$20					FNX1_INT05_MPU401     = $20  ;Midi Controller Interrupt
=$40					FNX1_INT06_LPT        = $40  ;Parallel Port
=$80					FNX1_INT07_SDCARD     = $80  ;SD Card Controller Interrupt (CH376S)
=$01					FNX2_INT00_OPL3       = $01  ;OPl3
=$02					FNX2_INT01_GABE_INT0  = $02  ;GABE (INT0) - TBD
=$04					FNX2_INT02_GABE_INT1  = $04  ;GABE (INT1) - TBD
=$08					FNX2_INT03_SDMA       = $08  ;VICKY_II (INT4)
=$10					FNX2_INT04_VDMA       = $10  ;VICKY_II (INT5)
=$20					FNX2_INT05_GABE_INT2  = $20  ;GABE (INT2) - TBD
=$40					FNX2_INT06_EXT        = $40  ;External Expansion
=$80					FNX2_INT07_SDCARD_INS = $80  ; SDCARD Insertion
=$01					FNX3_INT00_OPN2       = $01  ;OPN2
=$02					FNX3_INT01_OPM        = $02  ;OPM
=$04					FNX3_INT02_IDE        = $04  ;HDD IDE INTERRUPT
=$08					FNX3_INT03_TBD        = $08  ;TBD
=$10					FNX3_INT04_TBD        = $10  ;TBD
=$20					FNX3_INT05_TBD        = $20  ;GABE (INT2) - TBD
=$40					FNX3_INT06_TBD        = $40  ;External Expansion
=$80					FNX3_INT07_TBD        = $80  ; SDCARD Insertion

;******  Return to file: src\kernel.asm


;******  Processing file: src\dram_inc.asm

=$afa000				SCREEN_PAGE0     = $AFA000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
=$afc000				SCREEN_PAGE1     = $AFC000 ;8192 Bytes Additional page of display RAM. This can be used for page flipping or to handle multiple edit buffers.
=$b00000				SCREEN_END       = $B00000 ;End of display memory

;******  Return to file: src\kernel.asm


;******  Processing file: src\vicky_def.asm

=$af0000				MASTER_CTRL_REG_L	      = $AF0000
=$01					Mstr_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$02					Mstr_Ctrl_Text_Overlay  = $02       ; Enable the Overlay of the text mode on top of Graphic Mode (the Background Color is ignored)
=$04					Mstr_Ctrl_Graph_Mode_En = $04       ; Enable the Graphic Mode
=$08					Mstr_Ctrl_Bitmap_En     = $08       ; Enable the Bitmap Module In Vicky
=$10					Mstr_Ctrl_TileMap_En    = $10       ; Enable the Tile Module in Vicky
=$20					Mstr_Ctrl_Sprite_En     = $20       ; Enable the Sprite Module in Vicky
=$40					Mstr_Ctrl_GAMMA_En      = $40       ; this Enable the GAMMA correction - The Analog and DVI have different color value, the GAMMA is great to correct the difference
=$80					Mstr_Ctrl_Disable_Vid   = $80       ; This will disable the Scanning of the Video hence giving 100% bandwith to the CPU
=$af0001				MASTER_CTRL_REG_H	      = $AF0001
=$af0002				VKY_RESERVED_00         = $AF0002
=$af0003				VKY_RESERVED_01         = $AF0003
=$01					Border_Ctrl_Enable      = $01
=$af0004				BORDER_CTRL_REG         = $AF0004 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$af0005				BORDER_COLOR_B          = $AF0005
=$af0006				BORDER_COLOR_G          = $AF0006
=$af0007				BORDER_COLOR_R          = $AF0007
=$af0008				BORDER_X_SIZE           = $AF0008; X-  Values: 0 - 32 (Default: 32)
=$af0009				BORDER_Y_SIZE           = $AF0009; Y- Values 0 -32 (Default: 32)
=$af000d				BACKGROUND_COLOR_B      = $AF000D ; When in Graphic Mode, if a pixel is "0" then the Background pixel is chosen
=$af000e				BACKGROUND_COLOR_G      = $AF000E
=$af000f				BACKGROUND_COLOR_R      = $AF000F ;
=$af0010				VKY_TXT_CURSOR_CTRL_REG = $AF0010   ;[0]  Enable Text Mode
=$01					Vky_Cursor_Enable       = $01
=$02					Vky_Cursor_Flash_Rate0  = $02
=$04					Vky_Cursor_Flash_Rate1  = $04
=$08					Vky_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10					Vky_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$af0011				VKY_TXT_START_ADD_PTR   = $AF0011   ; This is an offset to change the Starting address of the Text Mode Buffer (in x)
=$af0012				VKY_TXT_CURSOR_CHAR_REG = $AF0012
=$af0013				VKY_TXT_CURSOR_COLR_REG = $AF0013
=$af0014				VKY_TXT_CURSOR_X_REG_L  = $AF0014
=$af0015				VKY_TXT_CURSOR_X_REG_H  = $AF0015
=$af0016				VKY_TXT_CURSOR_Y_REG_L  = $AF0016
=$af0017				VKY_TXT_CURSOR_Y_REG_H  = $AF0017
=$af001b				VKY_LINE_IRQ_CTRL_REG   = $AF001B ;[0] - Enable Line 0, [1] -Enable Line 1
=$af001c				VKY_LINE0_CMP_VALUE_LO  = $AF001C ;Write Only [7:0]
=$af001d				VKY_LINE0_CMP_VALUE_HI  = $AF001D ;Write Only [3:0]
=$af001e				VKY_LINE1_CMP_VALUE_LO  = $AF001E ;Write Only [7:0]
=$af001f				VKY_LINE1_CMP_VALUE_HI  = $AF001F ;Write Only [3:0]
=$af001c				VKY_INFO_CHIP_NUM_L     = $AF001C
=$af001d				VKY_INFO_CHIP_NUM_H     = $AF001D
=$af001e				VKY_INFO_CHIP_VER_L     = $AF001E
=$af001f				VKY_INFO_CHIP_VER_H     = $AF001F
=$01					TILE_Enable             = $01
=$02					TILE_LUT0               = $02
=$04					TILE_LUT1               = $04
=$08					TILE_LUT2               = $08
=$80					TILESHEET_256x256_En    = $80   ; 0 -> Sequential, 1-> 256x256 Tile Sheet Striding
=$af0100				TL0_CONTROL_REG         = $AF0100       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0101				TL0_START_ADDY_L        = $AF0101       ; Not USed right now - Starting Address to where is the MAP
=$af0102				TL0_START_ADDY_M        = $AF0102
=$af0103				TL0_START_ADDY_H        = $AF0103
=$af0104				TL0_MAP_X_STRIDE_L      = $AF0104       ; The Stride of the Map
=$af0105				TL0_MAP_X_STRIDE_H      = $AF0105
=$af0106				TL0_MAP_Y_STRIDE_L      = $AF0106       ; The Stride of the Map
=$af0107				TL0_MAP_Y_STRIDE_H      = $AF0107
=$af0108				TL1_CONTROL_REG         = $AF0108       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0109				TL1_START_ADDY_L        = $AF0109       ; Not USed right now - Starting Address to where is the MAP
=$af010a				TL1_START_ADDY_M        = $AF010A
=$af010b				TL1_START_ADDY_H        = $AF010B
=$af010c				TL1_MAP_X_STRIDE_L      = $AF010C       ; The Stride of the Map
=$af010d				TL1_MAP_X_STRIDE_H      = $AF010D
=$af010e				TL1_MAP_Y_STRIDE_L      = $AF010E       ; The Stride of the Map
=$af010f				TL1_MAP_Y_STRIDE_H      = $AF010F
=$af0110				TL2_CONTROL_REG         = $AF0110       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0111				TL2_START_ADDY_L        = $AF0111       ; Not USed right now - Starting Address to where is the MAP
=$af0112				TL2_START_ADDY_M        = $AF0112
=$af0113				TL2_START_ADDY_H        = $AF0113
=$af0114				TL2_MAP_X_STRIDE_L      = $AF0114       ; The Stride of the Map
=$af0115				TL2_MAP_X_STRIDE_H      = $AF0115
=$af0116				TL2_MAP_Y_STRIDE_L      = $AF0116       ; The Stride of the Map
=$af0117				TL2_MAP_Y_STRIDE_H      = $AF0117
=$af0118				TL3_CONTROL_REG         = $AF0118       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0119				TL3_START_ADDY_L        = $AF0119       ; Not USed right now - Starting Address to where is the MAP
=$af011a				TL3_START_ADDY_M        = $AF011A
=$af011b				TL3_START_ADDY_H        = $AF011B
=$af011c				TL3_MAP_X_STRIDE_L      = $AF011C       ; The Stride of the Map
=$af011d				TL3_MAP_X_STRIDE_H      = $AF011D
=$af011e				TL3_MAP_Y_STRIDE_L      = $AF011E       ; The Stride of the Map
=$af011f				TL3_MAP_Y_STRIDE_H      = $AF011F
=$af0140				BM_CONTROL_REG          = $AF0140
=$af0141				BM_START_ADDY_L         = $AF0141
=$af0142				BM_START_ADDY_M         = $AF0142
=$af0143				BM_START_ADDY_H         = $AF0143
=$af0144				BM_X_SIZE_L             = $AF0144
=$af0145				BM_X_SIZE_H             = $AF0145
=$af0146				BM_Y_SIZE_L             = $AF0146
=$af0147				BM_Y_SIZE_H             = $AF0147
=$af0148				BM_RESERVED_0           = $AF0148
=$af0149				BM_RESERVED_1           = $AF0149
=$af014a				BM_RESERVED_2           = $AF014A
=$af014b				BM_RESERVED_3           = $AF014B
=$af014c				BM_RESERVED_4           = $AF014C
=$af014d				BM_RESERVED_5           = $AF014D
=$af014e				BM_RESERVED_6           = $AF014E
=$af014f				BM_RESERVED_7           = $AF014F
=$01					SPRITE_Enable             = $01
=$02					SPRITE_LUT0               = $02 ; This is the LUT that the Sprite will use
=$04					SPRITE_LUT1               = $04
=$08					SPRITE_LUT2               = $08 ; Only 4 LUT for Now, So this bit is not used.
=$10					SPRITE_DEPTH0             = $10 ; This is the Layer the Sprite will be Displayed in
=$20					SPRITE_DEPTH1             = $20
=$40					SPRITE_DEPTH2             = $40
=$af0200				SP00_CONTROL_REG        = $AF0200
=$af0201				SP00_ADDY_PTR_L         = $AF0201
=$af0202				SP00_ADDY_PTR_M         = $AF0202
=$af0203				SP00_ADDY_PTR_H         = $AF0203
=$af0204				SP00_X_POS_L            = $AF0204
=$af0205				SP00_X_POS_H            = $AF0205
=$af0206				SP00_Y_POS_L            = $AF0206
=$af0207				SP00_Y_POS_H            = $AF0207
=$af0208				SP01_CONTROL_REG        = $AF0208
=$af0209				SP01_ADDY_PTR_L         = $AF0209
=$af020a				SP01_ADDY_PTR_M         = $AF020A
=$af020b				SP01_ADDY_PTR_H         = $AF020B
=$af020c				SP01_X_POS_L            = $AF020C
=$af020d				SP01_X_POS_H            = $AF020D
=$af020e				SP01_Y_POS_L            = $AF020E
=$af020f				SP01_Y_POS_H            = $AF020F
=$af0210				SP02_CONTROL_REG        = $AF0210
=$af0211				SP02_ADDY_PTR_L         = $AF0211
=$af0212				SP02_ADDY_PTR_M         = $AF0212
=$af0213				SP02_ADDY_PTR_H         = $AF0213
=$af0214				SP02_X_POS_L            = $AF0214
=$af0215				SP02_X_POS_H            = $AF0215
=$af0216				SP02_Y_POS_L            = $AF0216
=$af0217				SP02_Y_POS_H            = $AF0217
=$af0218				SP03_CONTROL_REG        = $AF0218
=$af0219				SP03_ADDY_PTR_L         = $AF0219
=$af021a				SP03_ADDY_PTR_M         = $AF021A
=$af021b				SP03_ADDY_PTR_H         = $AF021B
=$af021c				SP03_X_POS_L            = $AF021C
=$af021d				SP03_X_POS_H            = $AF021D
=$af021e				SP03_Y_POS_L            = $AF021E
=$af021f				SP03_Y_POS_H            = $AF021F
=$af0220				SP04_CONTROL_REG        = $AF0220
=$af0221				SP04_ADDY_PTR_L         = $AF0221
=$af0222				SP04_ADDY_PTR_M         = $AF0222
=$af0223				SP04_ADDY_PTR_H         = $AF0223
=$af0224				SP04_X_POS_L            = $AF0224
=$af0225				SP04_X_POS_H            = $AF0225
=$af0226				SP04_Y_POS_L            = $AF0226
=$af0227				SP04_Y_POS_H            = $AF0227
=$af0228				SP05_CONTROL_REG        = $AF0228
=$af0229				SP05_ADDY_PTR_L         = $AF0229
=$af022a				SP05_ADDY_PTR_M         = $AF022A
=$af022b				SP05_ADDY_PTR_H         = $AF022B
=$af022c				SP05_X_POS_L            = $AF022C
=$af022d				SP05_X_POS_H            = $AF022D
=$af022e				SP05_Y_POS_L            = $AF022E
=$af022f				SP05_Y_POS_H            = $AF022F
=$af0230				SP06_CONTROL_REG        = $AF0230
=$af0231				SP06_ADDY_PTR_L         = $AF0231
=$af0232				SP06_ADDY_PTR_M         = $AF0232
=$af0233				SP06_ADDY_PTR_H         = $AF0233
=$af0234				SP06_X_POS_L            = $AF0234
=$af0235				SP06_X_POS_H            = $AF0235
=$af0236				SP06_Y_POS_L            = $AF0236
=$af0237				SP06_Y_POS_H            = $AF0237
=$af0238				SP07_CONTROL_REG        = $AF0238
=$af0239				SP07_ADDY_PTR_L         = $AF0239
=$af023a				SP07_ADDY_PTR_M         = $AF023A
=$af023b				SP07_ADDY_PTR_H         = $AF023B
=$af023c				SP07_X_POS_L            = $AF023C
=$af023d				SP07_X_POS_H            = $AF023D
=$af023e				SP07_Y_POS_L            = $AF023E
=$af023f				SP07_Y_POS_H            = $AF023F
=$af0240				SP08_CONTROL_REG        = $AF0240
=$af0241				SP08_ADDY_PTR_L         = $AF0241
=$af0242				SP08_ADDY_PTR_M         = $AF0242
=$af0243				SP08_ADDY_PTR_H         = $AF0243
=$af0244				SP08_X_POS_L            = $AF0244
=$af0245				SP08_X_POS_H            = $AF0245
=$af0246				SP08_Y_POS_L            = $AF0246
=$af0247				SP08_Y_POS_H            = $AF0247
=$af0248				SP09_CONTROL_REG        = $AF0248
=$af0249				SP09_ADDY_PTR_L         = $AF0249
=$af024a				SP09_ADDY_PTR_M         = $AF024A
=$af024b				SP09_ADDY_PTR_H         = $AF024B
=$af024c				SP09_X_POS_L            = $AF024C
=$af024d				SP09_X_POS_H            = $AF024D
=$af024e				SP09_Y_POS_L            = $AF024E
=$af024f				SP09_Y_POS_H            = $AF024F
=$af0250				SP10_CONTROL_REG        = $AF0250
=$af0251				SP10_ADDY_PTR_L         = $AF0251
=$af0252				SP10_ADDY_PTR_M         = $AF0252
=$af0253				SP10_ADDY_PTR_H         = $AF0253
=$af0254				SP10_X_POS_L            = $AF0254
=$af0255				SP10_X_POS_H            = $AF0255
=$af0256				SP10_Y_POS_L            = $AF0256
=$af0257				SP10_Y_POS_H            = $AF0257
=$af0258				SP11_CONTROL_REG        = $AF0258
=$af0259				SP11_ADDY_PTR_L         = $AF0259
=$af025a				SP11_ADDY_PTR_M         = $AF025A
=$af025b				SP11_ADDY_PTR_H         = $AF025B
=$af025c				SP11_X_POS_L            = $AF025C
=$af025d				SP11_X_POS_H            = $AF025D
=$af025e				SP11_Y_POS_L            = $AF025E
=$af025f				SP11_Y_POS_H            = $AF025F
=$af0260				SP12_CONTROL_REG        = $AF0260
=$af0261				SP12_ADDY_PTR_L         = $AF0261
=$af0262				SP12_ADDY_PTR_M         = $AF0262
=$af0263				SP12_ADDY_PTR_H         = $AF0263
=$af0264				SP12_X_POS_L            = $AF0264
=$af0265				SP12_X_POS_H            = $AF0265
=$af0266				SP12_Y_POS_L            = $AF0266
=$af0267				SP12_Y_POS_H            = $AF0267
=$af0268				SP13_CONTROL_REG        = $AF0268
=$af0269				SP13_ADDY_PTR_L         = $AF0269
=$af026a				SP13_ADDY_PTR_M         = $AF026A
=$af026b				SP13_ADDY_PTR_H         = $AF026B
=$af026c				SP13_X_POS_L            = $AF026C
=$af026d				SP13_X_POS_H            = $AF026D
=$af026e				SP13_Y_POS_L            = $AF026E
=$af026f				SP13_Y_POS_H            = $AF026F
=$af0270				SP14_CONTROL_REG        = $AF0270
=$af0271				SP14_ADDY_PTR_L         = $AF0271
=$af0272				SP14_ADDY_PTR_M         = $AF0272
=$af0273				SP14_ADDY_PTR_H         = $AF0273
=$af0274				SP14_X_POS_L            = $AF0274
=$af0275				SP14_X_POS_H            = $AF0275
=$af0276				SP14_Y_POS_L            = $AF0276
=$af0277				SP14_Y_POS_H            = $AF0277
=$af0278				SP15_CONTROL_REG        = $AF0278
=$af0279				SP15_ADDY_PTR_L         = $AF0279
=$af027a				SP15_ADDY_PTR_M         = $AF027A
=$af027b				SP15_ADDY_PTR_H         = $AF027B
=$af027c				SP15_X_POS_L            = $AF027C
=$af027d				SP15_X_POS_H            = $AF027D
=$af027e				SP15_Y_POS_L            = $AF027E
=$af027f				SP15_Y_POS_H            = $AF027F
=$af0280				SP16_CONTROL_REG        = $AF0280
=$af0281				SP16_ADDY_PTR_L         = $AF0281
=$af0282				SP16_ADDY_PTR_M         = $AF0282
=$af0283				SP16_ADDY_PTR_H         = $AF0283
=$af0284				SP16_X_POS_L            = $AF0284
=$af0285				SP16_X_POS_H            = $AF0285
=$af0286				SP16_Y_POS_L            = $AF0286
=$af0287				SP16_Y_POS_H            = $AF0287
=$af0288				SP17_CONTROL_REG        = $AF0288
=$af0289				SP17_ADDY_PTR_L         = $AF0289
=$af028a				SP17_ADDY_PTR_M         = $AF028A
=$af028b				SP17_ADDY_PTR_H         = $AF028B
=$af028c				SP17_X_POS_L            = $AF028C
=$af028d				SP17_X_POS_H            = $AF028D
=$af028e				SP17_Y_POS_L            = $AF028E
=$af028f				SP17_Y_POS_H            = $AF028F
=$af0400				VDMA_CONTROL_REG        = $AF0400
=$01					VDMA_CTRL_Enable        = $01
=$02					VDMA_CTRL_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04					VDMA_CTRL_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08					VDMA_CTRL_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$80					VDMA_CTRL_Start_TRF     = $80     ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0401				VDMA_BYTE_2_WRITE       = $AF0401 ; Write Only - Byte to Write in the Fill Function
=$af0401				VDMA_STATUS_REG         = $AF0401 ; Read only
=$01					VDMA_STAT_Size_Err      = $01     ; If Set to 1, Overall Size is Invalid
=$02					VDMA_STAT_Dst_Add_Err   = $02     ; If Set to 1, Destination Address Invalid
=$04					VDMA_STAT_Src_Add_Err   = $04     ; If Set to 1, Source Address Invalid
=$80					VDMA_STAT_VDMA_IPS      = $80     ; If Set to 1, VDMA Transfer in Progress (this Inhibit CPU Access to Mem)
=$af0402				VDMA_SRC_ADDY_L         = $AF0402 ; Pointer to the Source of the Data to be stransfered
=$af0403				VDMA_SRC_ADDY_M         = $AF0403 ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0404				VDMA_SRC_ADDY_H         = $AF0404
=$af0405				VDMA_DST_ADDY_L         = $AF0405 ; Destination Pointer within Vicky's video memory Range
=$af0406				VDMA_DST_ADDY_M         = $AF0406 ; ($00_0000 - $3F_0000)
=$af0407				VDMA_DST_ADDY_H         = $AF0407
=$af0408				VDMA_SIZE_L             = $AF0408 ; Maximum Value: $40:0000 (4Megs)
=$af0409				VDMA_SIZE_M             = $AF0409
=$af040a				VDMA_SIZE_H             = $AF040A
=$af040b				VDMA_IGNORED            = $AF040B
=$af0408				VDMA_X_SIZE_L           = $AF0408 ; Maximum Value: 65535
=$af0409				VDMA_X_SIZE_H           = $AF0409
=$af040a				VDMA_Y_SIZE_L           = $AF040A ; Maximum Value: 65535
=$af040b				VDMA_Y_SIZE_H           = $AF040B
=$af040c				VDMA_SRC_STRIDE_L       = $AF040C ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040d				VDMA_SRC_STRIDE_H       = $AF040D ;
=$af040e				VDMA_DST_STRIDE_L       = $AF040E ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040f				VDMA_DST_STRIDE_H       = $AF040F ;
=$af0500				MOUSE_PTR_GRAP0_START    = $AF0500 ; 16 x 16 = 256 Pixels (Grey Scale) 0 = Transparent, 1 = Black , 255 = White
=$af05ff				MOUSE_PTR_GRAP0_END      = $AF05FF ; Pointer 0
=$af0600				MOUSE_PTR_GRAP1_START    = $AF0600 ;
=$af06ff				MOUSE_PTR_GRAP1_END      = $AF06FF ; Pointer 1
=$af0700				MOUSE_PTR_CTRL_REG_L    = $AF0700 ; Bit[0] Enable, Bit[1] = 0  ( 0 = Pointer0, 1 = Pointer1)
=$af0701				MOUSE_PTR_CTRL_REG_H    = $AF0701 ;
=$af0702				MOUSE_PTR_X_POS_L       = $AF0702 ; X Position (0 - 639) (Can only read now) Writing will have no effect
=$af0703				MOUSE_PTR_X_POS_H       = $AF0703 ;
=$af0704				MOUSE_PTR_Y_POS_L       = $AF0704 ; Y Position (0 - 479) (Can only read now) Writing will have no effect
=$af0705				MOUSE_PTR_Y_POS_H       = $AF0705 ;
=$af0706				MOUSE_PTR_BYTE0         = $AF0706 ; Byte 0 of Mouse Packet (you must write 3 Bytes)
=$af0707				MOUSE_PTR_BYTE1         = $AF0707 ; Byte 1 of Mouse Packet (if you don't, then )
=$af0708				MOUSE_PTR_BYTE2         = $AF0708 ; Byte 2 of Mouse Packet (state Machine will be jammed in 1 state)
=$af070b				C256F_MODEL_MAJOR       = $AF070B ;
=$af070c				C256F_MODEL_MINOR       = $AF070C ;
=$af070d				FPGA_DOR                = $AF070D ;
=$af070e				FPGA_MOR                = $AF070E ;
=$af070f				FPGA_YOR                = $AF070F ;
=$af1f40				FG_CHAR_LUT_PTR         = $AF1F40
=$af1f80				BG_CHAR_LUT_PTR		      = $AF1F80
=$af2000				GRPH_LUT0_PTR		        = $AF2000
=$af2400				GRPH_LUT1_PTR		        = $AF2400
=$af2800				GRPH_LUT2_PTR		        = $AF2800
=$af2c00				GRPH_LUT3_PTR		        = $AF2C00
=$af3000				GRPH_LUT4_PTR		        = $AF3000
=$af3400				GRPH_LUT5_PTR		        = $AF3400
=$af3800				GRPH_LUT6_PTR		        = $AF3800
=$af3c00				GRPH_LUT7_PTR		        = $AF3C00
=$af4000				GAMMA_B_LUT_PTR		      = $AF4000
=$af4100				GAMMA_G_LUT_PTR		      = $AF4100
=$af4200				GAMMA_R_LUT_PTR		      = $AF4200
=$af5000				TILE_MAP0       		    = $AF5000     ;$AF5000 - $AF57FF
=$af5800				TILE_MAP1               = $AF5800     ;$AF5800 - $AF5FFF
=$af6000				TILE_MAP2               = $AF6000     ;$AF6000 - $AF67FF
=$af6800				TILE_MAP3               = $AF6800     ;$AF6800 - $AF6FFF
=$af8000				FONT_MEMORY_BANK0       = $AF8000     ;$AF8000 - $AF87FF
=$af8800				FONT_MEMORY_BANK1       = $AF8800     ;$AF8800 - $AF8FFF
=$afa000				CS_TEXT_MEM_PTR         = $AFA000
=$afc000				CS_COLOR_MEM_PTR        = $AFC000
=$afe000				BTX_START               = $AFE000     ; BEATRIX Registers
=$afffff				BTX_END                 = $AFFFFF

;******  Return to file: src\kernel.asm


;******  Processing file: src\super_io_def.asm

=$af1100				PME_STS_REG     = $AF1100
=$af1102				PME_EN_REG		  = $AF1102
=$af1104				PME_STS1_REG		= $AF1104
=$af1105				PME_STS2_REG		= $AF1105
=$af1106				PME_STS3_REG		= $AF1106
=$af1107				PME_STS4_REG		= $AF1107
=$af1108				PME_STS5_REG		= $AF1108
=$af110a				PME_EN1_REG     = $AF110A
=$af110b				PME_EN2_REG     = $AF110B
=$af110c				PME_EN3_REG     = $AF110C
=$af110d				PME_EN4_REG     = $AF110D
=$af110e				PME_EN5_REG     = $AF110E
=$af1110				SMI_STS1_REG		= $AF1110
=$af1111				SMI_STS2_REG		= $AF1111
=$af1112				SMI_STS3_REG		= $AF1112
=$af1113				SMI_STS4_REG		= $AF1113
=$af1114				SMI_STS5_REG		= $AF1114
=$af1116				SMI_EN1_REG     = $AF1116
=$af1117				SMI_EN2_REG     = $AF1117
=$af1118				SMI_EN3_REG     = $AF1118
=$af1119				SMI_EN4_REG     = $AF1119
=$af111a				SMI_EN5_REG     = $AF111A
=$af111c				MSC_ST_REG      = $AF111C
=$af111e				FORCE_DISK_CHANGE       = $AF111E
=$af111f				FLOPPY_DATA_RATE        = $AF111F
=$af1120				UART1_FIFO_CTRL_SHDW    = $AF1120
=$af1121				UART2_FIFO_CTRL_SHDW    = $AF1121
=$af1122				DEV_DISABLE_REG         = $AF1122
=$af1123				GP10_REG    		= $AF1123
=$af1124				GP11_REG    		= $AF1124
=$af1125				GP12_REG    		= $AF1125
=$af1126				GP13_REG    		= $AF1126
=$af1127				GP14_REG    		= $AF1127
=$af1128				GP15_REG    		= $AF1128
=$af1129				GP16_REG    		= $AF1129
=$af112a				GP17_REG    		= $AF112A
=$af112b				GP20_REG    		= $AF112B
=$af112c				GP21_REG    		= $AF112C
=$af112d				GP22_REG		= $AF112D
=$af112f				GP24_REG		= $AF112F
=$af1130				GP25_REG		= $AF1130
=$af1131				GP26_REG		= $AF1131
=$af1132				GP27_REG		= $AF1132
=$af1133				GP30_REG		= $AF1133
=$af1134				GP31_REG		= $AF1134
=$af1135				GP32_REG		= $AF1135
=$af1136				GP33_REG		= $AF1136
=$af1137				GP34_REG		= $AF1137
=$af1138				GP35_REG		= $AF1138
=$af1139				GP36_REG		= $AF1139
=$af113a				GP37_REG		= $AF113A
=$af113b				GP40_REG		= $AF113B
=$af113c				GP41_REG		= $AF113C
=$af113d				GP42_REG		= $AF113D
=$af113e				GP43_REG		= $AF113E
=$af113f				GP50_REG		= $AF113F
=$af1140				GP51_REG		= $AF1140
=$af1141				GP52_REG		= $AF1141
=$af1142				GP53_REG		= $AF1142
=$af1143				GP54_REG		= $AF1143
=$af1144				GP55_REG		= $AF1144
=$af1145				GP56_REG		= $AF1145
=$af1146				GP57_REG		= $AF1146
=$af1147				GP60_REG		= $AF1147
=$af1148				GP61_REG		= $AF1148
=$af114b				GP1_REG			= $AF114B
=$af114c				GP2_REG			= $AF114C
=$af114d				GP3_REG			= $AF114D
=$af114e				GP4_REG			= $AF114E
=$af114f				GP5_REG			= $AF114F
=$af1150				GP6_REG			= $AF1150
=$af1156				FAN1_REG		        = $AF1156
=$af1157				FAN2_REG            = $AF1157
=$af1158				FAN_CTRL_REG  	    = $AF1158
=$af1159				FAN1_TACH_REG       = $AF1159
=$af115a				FAN2_TACH_REG       = $AF115A
=$af115b				FAN1_PRELOAD_REG    = $AF115B
=$af115c				FAN2_PRELOAD_REG    = $AF115C
=$af115d				LED1_REG    		    = $AF115D
=$af115e				LED2_REG    		    = $AF115E
=$af115f				KEYBOARD_SCAN_CODE	= $AF115F

;******  Return to file: src\kernel.asm


;******  Processing file: src\keyboard_def.asm

=$af1064				STATUS_PORT 	= $AF1064
=$af1060				KBD_OUT_BUF 	= $AF1060
=$af1060				KBD_INPT_BUF	= $AF1060
=$af1064				KBD_CMD_BUF		= $AF1064
=$af1060				KBD_DATA_BUF	= $AF1060
=$af1060				PORT_A		    = $AF1060
=$af1061				PORT_B			= $AF1061
=$01					OUT_BUF_FULL    = $01
=$02					INPT_BUF_FULL	= $02
=$04					SYS_FLAG		= $04
=$08					CMD_DATA		= $08
=$10					KEYBD_INH       = $10
=$20					TRANS_TMOUT	    = $20
=$40					RCV_TMOUT		= $40
=$80					PARITY_EVEN		= $80
=$10					INH_KEYBOARD	= $10
=$ae					KBD_ENA			= $AE
=$ad					KBD_DIS			= $AD
=$f1					KB_MENU			= $F1
=$f4					KB_ENABLE		= $F4
=$f7					KB_MAKEBREAK    = $F7
=$fe					KB_ECHO			= $FE
=$ff					KB_RESET		= $FF
=$ed					KB_LED_CMD		= $ED
=$aa					KB_OK			= $AA
=$fa					KB_ACK			= $FA
=$ff					KB_OVERRUN		= $FF
=$fe					KB_RESEND		= $FE
=$f0					KB_BREAK		= $F0
=$10					KB_FA			= $10
=$20					KB_FE			= $20
=$40					KB_PR_LED		= $40
=$01					KB_SCROLL_LOCK  = $01
=$02					KB_NUM_LOCK     = $02
=$04					KB_CAPS_LOCK    = $04
=$80					KB_CTRL_C = $80             ; CTRL-C was pressed
=$60					KB_CREDITS = $60            ; Credits key was pressed

;******  Return to file: src\kernel.asm


;******  Processing file: src\SID_def.asm

=$afe400				SID0_V1_FREQ_LO    = $AFE400 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$afe401				SID0_V1_FREQ_HI    = $AFE401 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$afe402				SID0_V1_PW_LO      = $AFE402 ;SID - L - Voice 1 (Write Only) - PW LOW
=$afe403				SID0_V1_PW_HI      = $AFE403 ;SID - L - Voice 1 (Write Only) - PW HI
=$afe404				SID0_V1_CTRL       = $AFE404 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$afe405				SID0_V1_ATCK_DECY  = $AFE405 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$afe406				SID0_V1_SSTN_RLSE  = $AFE406 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$afe407				SID0_V2_FREQ_LO    = $AFE407 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$afe408				SID0_V2_FREQ_HI    = $AFE408 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$afe409				SID0_V2_PW_LO      = $AFE409 ;SID - L - Voice 2 (Write Only) - PW LOW
=$afe40a				SID0_V2_PW_HI      = $AFE40A ;SID - L - Voice 2 (Write Only) - PW HI
=$afe40b				SID0_V2_CTRL       = $AFE40B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$afe40c				SID0_V2_ATCK_DECY  = $AFE40C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$afe40d				SID0_V2_SSTN_RLSE  = $AFE40D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$afe40e				SID0_V3_FREQ_LO    = $AFE40E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$afe40f				SID0_V3_FREQ_HI    = $AFE40F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$afe410				SID0_V3_PW_LO      = $AFE410 ;SID - L - Voice 3 (Write Only) - PW LOW
=$afe411				SID0_V3_PW_HI      = $AFE411 ;SID - L - Voice 3 (Write Only) - PW HI
=$afe412				SID0_V3_CTRL       = $AFE412 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$afe413				SID0_V3_ATCK_DECY  = $AFE413 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$afe414				SID0_V3_SSTN_RLSE  = $AFE414 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$afe415				SID0_FC_LO         = $AFE415 ;SID - L - Filter (Write Only) - FC LOW
=$afe416				SID0_FC_HI         = $AFE416 ;SID - L - Filter (Write Only) - FC HI
=$afe417				SID0_RES_FILT      = $AFE417 ;SID - L - Filter (Write Only) - RES / FILT
=$afe418				SID0_MODE_VOL      = $AFE418 ;SID - L - Filter (Write Only) - MODE / VOL
=$afe419				SID0_POT_X         = $AFE419 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$afe41a				SID0_POT_Y         = $AFE41A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$afe41b				SID0_OSC3_RND      = $AFE41B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$afe41c				SID0_ENV3          = $AFE41C ;SID - L - Misc (Read Only)  - ENV3
=$afe41d				SID0_NOT_USED0     = $AFE41D ;SID - L - NOT USED
=$afe41e				SID0_NOT_USED1     = $AFE41E ;SID - L - NOT USED
=$afe41f				SID0_NOT_USED2     = $AFE41F ;SID - L - NOT USED

;******  Return to file: src\kernel.asm


;******  Processing file: src\RTC_def.asm

=$af0800				RTC_SEC       = $AF0800 ;Seconds Register
=$af0801				RTC_SEC_ALARM = $AF0801 ;Seconds Alarm Register
=$af0802				RTC_MIN       = $AF0802 ;Minutes Register
=$af0803				RTC_MIN_ALARM = $AF0803 ;Minutes Alarm Register
=$af0804				RTC_HRS       = $AF0804 ;Hours Register
=$af0805				RTC_HRS_ALARM = $AF0805 ;Hours Alarm Register
=$af0806				RTC_DAY       = $AF0806 ;Day Register
=$af0807				RTC_DAY_ALARM = $AF0807 ;Day Alarm Register
=$af0808				RTC_DOW       = $AF0808 ;Day of Week Register
=$af0809				RTC_MONTH     = $AF0809 ;Month Register
=$af080a				RTC_YEAR      = $AF080A ;Year Register
=$af080b				RTC_RATES     = $AF080B ;Rates Register
=$af080c				RTC_ENABLE    = $AF080C ;Enables Register
=$af080d				RTC_FLAGS     = $AF080D ;Flags Register
=$af080e				RTC_CTRL      = $AF080E ;Control Register
=$af080f				RTC_CENTURY   = $AF080F ;Century Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\io_def.asm

=0					CHAN_CONSOLE  = 0           ; ID for screen and keyboard access
=1					CHAN_COM1     = 1           ; ID for serial access on COM1 (external port)
=2					CHAN_COM2     = 2           ; ID for serial access on COM2 (internal port)
=3					CHAN_LPT      = 3           ; ID for parallel port
=$afe810				SDCARD_DATA   = $AFE810     ;(R/W) SDCARD (CH376S) Data PORT_A (A0 = 0)
=$afe811				SDCARD_CMD    = $AFE811     ;(R/W) SDCARD (CH376S) CMD/STATUS Port (A0 = 1)
=$afe812				SDCARD_STAT   = $AFE812     ;(R) SDCARD (Bit[0] = CD, Bit[1] = WP)
=$afe900				CODEC_DATA_LO = $AFE900     ;(W) LSB of Add/Data Reg to Control CODEC See WM8776 Spec
=$afe901				CODEC_DATA_HI = $AFE901     ;(W) MSB od Add/Data Reg to Control CODEC See WM8776 Spec
=$afe902				CODEC_WR_CTRL = $AFE902     ;(W) Bit[0] = 1 -> Start Writing the CODEC Control Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\Trinity_CFP9301_def.asm

=$afe800				JOYSTICK0           = $AFE800   ;(R) Joystick 0 - J7 (next to SD Card)
=$afe801				JOYSTICK1           = $AFE801   ;(R) Joystick 1 - J8
=$afe802				JOYSTICK2           = $AFE802   ;(R) Joystick 2 - J9
=$afe803				JOYSTICK3           = $AFE803   ;(R) Joystick 3 - J10 (Next to Buzzer)
=$afe804				JOYSTICK_MODE       = $AFE804
=$01					NES_SNES_EN0        = $01       ; Enable the NES/SNES Mode on Port 0
=$02					NES_SNES_EN1        = $02       ; Enable the NES/SNES Mode on Port 1
=$04					NES_SNES_JOY        = $04       ; 0 = NES, 1 = SNES
=$40					NES_SNES_DONE       = $40       ; Poll to see if the Deserializer is done
=$80					NES_SNES_TRIG       = $80       ; Set to start the Serializer
=$afe805				REVOFPCB_C          = $AFE805   ; You should read the ASCCII for "C"
=$afe806				REVOFPCB_4          = $AFE806   ; You should read the ASCCII for "4"
=$afe807				REVOFPCB_A          = $AFE807   ; You should read the ASCCII for "A"
=$afe808				NES_SNES0_DAT_LO    = $AFE808   ; Contains the 8bits From NES and SNES
=$afe809				SNES0_DAT_HI0       = $AFE809   ; Contains the extra 4 bit from the SNES Controller
=$afe80a				NES_SNES1_DAT_LO    = $AFE80A
=$afe80b				SNES1_DAT_HI0       = $AFE80B
=$afe80c				CFP9301_REV         = $AFE80C   ; Hardware Revision of the CPLD Code
=$afe80d				DIP_USER            = $AFE80D   ; Dip Switch 3/4/5 can be user Defined
=$afe80e				DIP_BOOTMODE        = $AFE80E
=$01					BOOT_MODE0          = $01
=$02					BOOT_MODE1          = $02
=$80					HD_INSTALLED        = $80
=$00					DIP_BOOT_IDE        = $00
=$01					DIP_BOOT_SDCARD     = $01
=$02					DIP_BOOT_FLOPPY     = $02
=$03					DIP_BOOT_BASIC      = $03

;******  Return to file: src\kernel.asm


;******  Processing file: src\Unity_CFP9307_def.asm

=$afe830				IDE_DATA      = $AFE830 ; 8Bit Access here Only
=$afe831				IDE_ERROR     = $AFE831 ; Error Information register (only read when there is an error ) - Probably clears Error Bits
=$afe832				IDE_SECT_CNT  = $AFE832 ; Sector Count Register (also used to pass parameter for timeout for IDLE modus Command)
=$afe833				IDE_SECT_SRT  = $AFE833 ; Start Sector Register (0 = 256), so start @ 1
=$afe834				IDE_CLDR_LO   = $AFE834 ; Low Byte of Cylinder Numnber {7:0}
=$afe835				IDE_CLDR_HI   = $AFE835 ;  Hi Byte of Cylinder Number {9:8} (1023-0).
=$afe836				IDE_HEAD      = $AFE836 ; Head, device select, {3:0} HEad Number, 4 -> 0:Master, 1:Slave, {7:5} = 101 (legacy);
=$afe837				IDE_CMD_STAT  = $AFE837 ; Command/Status Register - Reading this will clear the Interrupt Registers
=$afe838				IDE_DATA_LO   = $AFE838 ; The 16Bits Buffer is LITTLE ENDIAN, the 65C816 is BIG ENDIAN, but UNITY does the conversion
=$afe839				IDE_DATA_HI   = $AFE839 ;

;******  Return to file: src\kernel.asm


;******  Processing file: src\GABE_Control_Registers_def.asm

=$afe880				GABE_MSTR_CTRL      = $AFE880
=$01					GABE_CTRL_PWR_LED   = $01     ; Controls the LED in the Front of the case (Next to the reset button)
=$02					GABE_CTRL_SDC_LED   = $02     ; Controls the LED in the Front of the Case (Next to SDCard)
=$10					GABE_CTRL_BUZZER    = $10     ; Controls the Buzzer
=$80					GABE_CTRL_WRM_RST   = $80     ; Warm Reset (needs to Setup other registers)
=$afe881				GABE_NOTUSED        = $AFE881 ; Reserved for future use
=$afe882				GABE_RST_AUTH0      = $AFE882 ; Must Contain the BYTE $AD for Reset to Activate
=$afe883				GABE_RST_AUTH1      = $AFE883 ; Must Contain the BYTE $DE for Reset to Activate
=$afe884				GABE_RNG_DAT_LO     = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885				GABE_RNG_DAT_HI     = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe884				GABE_RNG_SEED_LO    = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885				GABE_RNG_SEED_HI    = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe886				GABE_RNG_STAT       = $AFE886 ;
=$80					GABE_RNG_LFSR_DONE  = $80     ; indicates that Output = SEED Database
=$afe886				GABE_RNG_CTRL       = $AFE886 ;
=$01					GABE_RNG_CTRL_EN    = $01     ; Enable the LFSR BLOCK_LEN
=$02					GABE_RNG_CTRL_DV    = $02     ; After Setting the Seed Value, Toggle that Bit for it be registered
=$afe887				GABE_SYS_STAT       = $AFE887 ;
=$01					GABE_SYS_STAT_MID0  = $01     ; Machine ID -- LSB
=$02					GABE_SYS_STAT_MID1  = $02     ; Machine ID -- MSB
=$08					GABE_SYS_STAT_EXP   = $08     ; if Zero, there is an Expansion Card Preset
=$40					GABE_SYS_STAT_CPUA  = $40     ; Indicates the (8bit/16bit) Size of the Accumulator
=$80					GABE_SYS_STAT_CPUX  = $80     ; Indicates the (8bit/16bit) Size of the Accumulator

;******  Return to file: src\kernel.asm


;******  Processing file: src\basic_inc.asm

=$3a0000				BASIC = $3A0000
=3801092				MONITOR = BASIC + 4

;******  Return to file: src\kernel.asm


;******  Processing file: src\kernel_jumptable.asm

.381000	5c 00 04 39	jmp $390400	BOOT            JML IBOOT
.381004	5c 3f 13 39	jmp $39133f	RESTORE         JML IRESTORE
.381008	5c 8a 05 39	jmp $39058a	BREAK           JML IBREAK
.38100c	5c d1 05 39	jmp $3905d1	READY           JML IREADY
.381010	5c 40 13 39	jmp $391340	SCINIT          JML ISCINIT
.381014	5c 41 13 39	jmp $391341	IOINIT          JML IIOINIT
.381018	5c 4e 06 39	jmp $39064e	PUTC            JML IPUTC
.38101c	5c 37 06 39	jmp $390637	PUTS            JML IPUTS
.381020	5c 73 07 39	jmp $390773	PUTB            JML IPUTB
.381024	5c 7f 3c 38	jmp $383c7f	PUTBLOCK        JML IPUTBLOCK
.381028	5c 42 13 39	jmp $391342	SETLFS          JML ISETLFS
.38102c	5c 43 13 39	jmp $391343	SETNAM          JML ISETNAM
.381030	5c 44 13 39	jmp $391344	OPEN            JML IOPEN
.381034	5c 45 13 39	jmp $391345	CLOSE           JML ICLOSE
.381038	5c ec 05 39	jmp $3905ec	SETIN           JML ISETIN
.38103c	5c f5 05 39	jmp $3905f5	SETOUT          JML ISETOUT
.381040	5c 46 13 39	jmp $391346	GETB            JML IGETB
.381044	5c 48 3c 38	jmp $383c48	GETBLOCK        JML IGETBLOCK
.381048	5c 47 13 39	jmp $391347	GETCH           JML IGETCH
.38104c	5c 07 06 39	jmp $390607	GETCHW          JML IGETCHW
.381050	5c fe 05 39	jmp $3905fe	GETCHE          JML IGETCHE
.381054	5c 48 13 39	jmp $391348	GETS            JML IGETS
.381058	5c 49 13 39	jmp $391349	GETLINE         JML IGETLINE
.38105c	5c 4a 13 39	jmp $39134a	GETFIELD        JML IGETFIELD
.381060	5c 4b 13 39	jmp $39134b	TRIM            JML ITRIM
.381064	5c 4c 13 39	jmp $39134c	PRINTC          JML IPRINTC
.381068	5c 4d 13 39	jmp $39134d	PRINTS          JML IPRINTS
.38106c	5c 74 07 39	jmp $390774	PRINTCR         JML IPRINTCR
.381070	5c 4e 13 39	jmp $39134e	PRINTF          JML IPRINTF
.381074	5c 4f 13 39	jmp $39134f	PRINTI          JML IPRINTI
.381078	5c d2 08 39	jmp $3908d2	PRINTH          JML IPRINTH
.38107c	5c 50 13 39	jmp $391350	PRINTAI         JML IPRINTAI
.381080	5c ef 08 39	jmp $3908ef	PRINTAH         JML IPRINTAH
.381084	5c 5e 08 39	jmp $39085e	LOCATE          JML ILOCATE
.381088	5c 51 13 39	jmp $391351	PUSHKEY         JML IPUSHKEY
.38108c	5c 52 13 39	jmp $391352	PUSHKEYS        JML IPUSHKEYS
.381090	5c ba 07 39	jmp $3907ba	CSRRIGHT        JML ICSRRIGHT
.381094	5c ed 07 39	jmp $3907ed	CSRLEFT         JML ICSRLEFT
.381098	5c 13 08 39	jmp $390813	CSRUP           JML ICSRUP
.38109c	5c 39 08 39	jmp $390839	CSRDOWN         JML ICSRDOWN
.3810a0	5c a9 07 39	jmp $3907a9	CSRHOME         JML ICSRHOME
.3810a4	5c aa 08 39	jmp $3908aa	SCROLLUP        JML ISCROLLUP
.3810a8	5c 3d 09 39	jmp $39093d	CLRSCREEN       JML ICLRSCREEN
.3810ac	5c a0 09 39	jmp $3909a0	INITCHLUT	    JML IINITCHLUT
.3810b0	5c ba 0c 39	jmp $390cba	INITSUPERIO	    JML IINITSUPERIO
.3810b4	5c b9 0d 39	jmp $390db9	INITKEYBOARD    JML IINITKEYBOARD
.3810b8	5c 15 0f 39	jmp $390f15	TESTSID         JML ITESTSID
.3810bc	5c 99 0c 39	jmp $390c99	INITCURSOR      JML IINITCURSOR
.3810c0	5c 4f 0c 39	jmp $390c4f	INITFONTSET     JML IINITFONTSET
.3810c4	5c cf 09 39	jmp $3909cf	INITGAMMATABLE  JML IINITGAMMATABLE
.3810c8	5c ef 09 39	jmp $3909ef	INITALLLUT      JML IINITALLLUT
.3810cc	5c b1 0a 39	jmp $390ab1	INITVKYTXTMODE  JML IINITVKYTXTMODE
.3810d0	5c da 0a 39	jmp $390ada	INITVKYGRPMODE  JML IINITVKYGRPMODE
.3810d4	5c 11 0b 39	jmp $390b11	INITTILEMODE    JML IINITTILEMODE
.3810d8	5c 12 0b 39	jmp $390b12	INITSPRITE      JML IINITSPRITE
.3810dc	5c 05 10 39	jmp $391005	INITCODEC       JML IINITCODEC
.3810e0	5c 81 10 39	jmp $391081	RESETCODEC      JML IRESETCODEC
.3810e4	5c ef 10 39	jmp $3910ef	BMP_PARSER      JML IBMP_PARSER
.3810e8	5c a4 10 39	jmp $3910a4	BM_FILL_SCREEN  JML IBM_FILL_SCREEN
.3810ec	5c c4 32 38	jmp $3832c4	OPL2_TONE_TEST  JML IOPL2_TONE_TEST
.3810f0	5c b2 44 38	jmp $3844b2	F_OPEN          JML IF_OPEN         ; open a file for reading/writing/creating
.3810f4	5c 3c 45 38	jmp $38453c	F_CREATE        JML IF_CREATE       ; create a new file
.3810f8	5c 76 45 38	jmp $384576	F_CLOSE         JML IF_CLOSE        ; close a file (make sure last cluster is written)
.3810fc	5c 25 46 38	jmp $384625	F_WRITE         JML IF_WRITE        ; write the current cluster to the file
.381100	5c af 45 38	jmp $3845af	F_READ          JML IF_READ         ; read the next cluster from the file
.381104	5c 50 47 38	jmp $384750	F_DELETE        JML IF_DELETE       ; delete a file / directory
.381108	5c ff 47 38	jmp $3847ff	F_RENAME        JML IF_RENAME       ; rename a file
.38110c	5c a4 46 38	jmp $3846a4	F_DIROPEN       JML IF_DIROPEN      ; open a directory and seek the first directory entry
.381110	5c f8 46 38	jmp $3846f8	F_DIRNEXT       JML IF_DIRNEXT      ; seek to the next directory of an open directory
.381114	5c 00 48 38	jmp $384800	F_LOAD          JML IF_LOAD         ; load a binary file into memory, supports multiple file formats
.381118	5c ea 49 38	jmp $3849ea	F_SAVE          JML IF_SAVE         ; Save memory to a binary file

;******  Return to file: src\kernel.asm


;******  Processing file: src\Interrupt_Handler.asm

.38111c					IRQ_HANDLER
.38111c	e2 20		sep #$20	                SEP #$20        ; set A short
.38111e	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381122	c9 00		cmp #$00	                CMP #$00
.381124	f0 37		beq $38115d	                BEQ CHECK_PENDING_REG1
.381126	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.38112a	29 01		and #$01	                AND #FNX0_INT00_SOF
.38112c	c9 01		cmp #$01	                CMP #FNX0_INT00_SOF
.38112e	d0 09		bne $381139	                BNE SERVICE_NEXT_IRQ6
.381130	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381134	20 c7 11	jsr $3811c7	                JSR SOF_INTERRUPT
.381137	e2 20		sep #$20	                SEP #$20        ; set A short
.381139					SERVICE_NEXT_IRQ6
.381139	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.38113d	29 40		and #$40	                AND #FNX0_INT06_FDC
.38113f	c9 40		cmp #$40	                CMP #FNX0_INT06_FDC
.381141	d0 09		bne $38114c	                BNE SERVICE_NEXT_IRQ7
.381143	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381147	20 13 12	jsr $381213	                JSR FDC_INTERRUPT
.38114a	e2 20		sep #$20	                SEP #$20        ; set A short
.38114c					SERVICE_NEXT_IRQ7
.38114c	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381150	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.381152	c9 80		cmp #$80	                CMP #FNX0_INT07_MOUSE
.381154	d0 07		bne $38115d	                BNE CHECK_PENDING_REG1
.381156	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.38115a	20 d2 11	jsr $3811d2	                JSR MOUSE_INTERRUPT
.38115d					CHECK_PENDING_REG1
.38115d	e2 20		sep #$20	                SEP #$20        ; set A short
.38115f	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381163	c9 00		cmp #$00	                CMP #$00
.381165	f0 5d		beq $3811c4	                BEQ EXIT_IRQ_HANDLE
.381167					SERVICE_NEXT_IRQ8
.381167	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.38116b	29 01		and #$01	                AND #FNX1_INT00_KBD
.38116d	c9 01		cmp #$01	                CMP #FNX1_INT00_KBD
.38116f	d0 09		bne $38117a	                BNE SERVICE_NEXT_IRQ11
.381171	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.381175	20 ed 4d	jsr $384ded	                JSR KEYBOARD_INTERRUPT
.381178	e2 20		sep #$20	                SEP #$20        ; set A short
.38117a					SERVICE_NEXT_IRQ11
.38117a	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.38117e	29 08		and #$08	                AND #FNX1_INT03_COM2
.381180	c9 08		cmp #$08	                CMP #FNX1_INT03_COM2
.381182	d0 09		bne $38118d	                BNE SERVICE_NEXT_IRQ12
.381184	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.381188	20 1e 12	jsr $38121e	                JSR COM2_INTERRUPT
.38118b	e2 20		sep #$20	                SEP #$20        ; set A short
.38118d					SERVICE_NEXT_IRQ12
.38118d	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381191	29 10		and #$10	                AND #FNX1_INT04_COM1
.381193	c9 10		cmp #$10	                CMP #FNX1_INT04_COM1
.381195	d0 09		bne $3811a0	                BNE SERVICE_NEXT_IRQ13
.381197	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.38119b	20 29 12	jsr $381229	                JSR COM1_INTERRUPT
.38119e	e2 20		sep #$20	                SEP #$20        ; set A short
.3811a0					SERVICE_NEXT_IRQ13
.3811a0	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3811a4	29 20		and #$20	                AND #FNX1_INT05_MPU401
.3811a6	c9 20		cmp #$20	                CMP #FNX1_INT05_MPU401
.3811a8	d0 09		bne $3811b3	                BNE SERVICE_NEXT_IRQ14
.3811aa	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811ae	20 34 12	jsr $381234	                JSR MPU401_INTERRUPT
.3811b1	e2 20		sep #$20	                SEP #$20        ; set A short
.3811b3					SERVICE_NEXT_IRQ14
.3811b3	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3811b7	29 40		and #$40	                AND #FNX1_INT06_LPT
.3811b9	c9 40		cmp #$40	                CMP #FNX1_INT06_LPT
.3811bb	d0 07		bne $3811c4	                BNE EXIT_IRQ_HANDLE
.3811bd	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811c1	20 3f 12	jsr $38123f	                JSR LPT1_INTERRUPT
.3811c4					EXIT_IRQ_HANDLE
.3811c4	c2 30		rep #$30	                REP #$30        ; set A&X long
.3811c6	6b		rtl		                RTL
.3811c7					SOF_INTERRUPT
.3811c7	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.3811cb	29 01		and #$01	                AND #FNX0_INT00_SOF
.3811cd	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.3811d1	60		rts		                RTS
.3811d2					MOUSE_INTERRUPT
.3811d2	e2 20		sep #$20	                SEP #$20        ; set A short
.3811d4	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.3811d8	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.3811da	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.3811de	af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF
.3811e2	a2 00 00	ldx #$0000	                LDX #$0000
.3811e5	e2 10		sep #$10	                SEP #$10        ; set X short
.3811e7	a6 e0		ldx $e0		                LDX MOUSE_PTR
.3811e9	9f 06 07 af	sta $af0706,x	                STA @lMOUSE_PTR_BYTE0, X
.3811ed	e8		inx		                INX
.3811ee	e0 03		cpx #$03	                CPX #$03
.3811f0	d0 1c		bne $38120e	                BNE EXIT_FOR_NEXT_VALUE
.3811f2	af 02 07 af	lda $af0702	                LDA @lMOUSE_PTR_X_POS_L
.3811f6	85 e1		sta $e1		                STA MOUSE_POS_X_LO
.3811f8	af 03 07 af	lda $af0703	                LDA @lMOUSE_PTR_X_POS_H
.3811fc	85 e2		sta $e2		                STA MOUSE_POS_X_HI
.3811fe	af 04 07 af	lda $af0704	                LDA @lMOUSE_PTR_Y_POS_L
.381202	85 e3		sta $e3		                STA MOUSE_POS_Y_LO
.381204	af 05 07 af	lda $af0705	                LDA @lMOUSE_PTR_Y_POS_H
.381208	85 e4		sta $e4		                STA MOUSE_POS_Y_HI
.38120a	e2 20		sep #$20	                SEP #$20        ; set A short
.38120c	a2 00		ldx #$00	                LDX #$00
.38120e					EXIT_FOR_NEXT_VALUE
.38120e	86 e0		stx $e0		                STX MOUSE_PTR
.381210	c2 10		rep #$10	                REP #$10        ; set X long
.381212	60		rts		                RTS
.381213					FDC_INTERRUPT
.381213	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381217	29 40		and #$40	                AND #FNX0_INT06_FDC
.381219	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.38121d	60		rts		                RTS
.38121e					COM2_INTERRUPT
.38121e	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381222	29 08		and #$08	                AND #FNX1_INT03_COM2
.381224	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.381228	60		rts		                RTS
.381229					COM1_INTERRUPT
.381229	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.38122d	29 10		and #$10	                AND #FNX1_INT04_COM1
.38122f	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.381233	60		rts		                RTS
.381234					MPU401_INTERRUPT
.381234	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381238	29 20		and #$20	                AND #FNX1_INT05_MPU401
.38123a	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.38123e	60		rts		                RTS
.38123f					LPT1_INTERRUPT
.38123f	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381243	29 40		and #$40	                AND #FNX1_INT06_LPT
.381245	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.381249	60		rts		                RTS
.38124a					NMI_HANDLER
.38124a	6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\OPL2_Library.asm


;******  Processing file: src\OPL3_def.asm

=$afe600				OPL3_R_BASE               = $AFE600
=$e600					OPL3_R_BASE_LL            = $E600
=$00af					OPL3_R_BASE_HL            = $00AF
=$afe601				OPL3_R_TEST               = $AFE601 ; TEST
=$afe602				OPL3_R_TIMER1             = $AFE602 ; TIMER-1
=$afe603				OPL3_R_TIMER2             = $AFE603 ; TIMER-2
=$afe604				OPL3_R_IRQ                = $AFE604 ;
=$afe605				OPL3_R_OPL3_MODE          = $AFE605 ; Set bit 0 to 1 if you want to use in OPL3 Mode
=$afe608				OPL3_R_CSM                = $AFE608 ;
=$afe620				OPL3_R_AM_VID_EG_KSR_MULT = $AFE620 ; $40..$35 (21 Registers)
=$afe640				OPL3_R_KSL_TL             = $AFE640;  $40..$55 (21 Registers)
=$afe660				OPL3_R_AR_DR              = $AFE660;  $60..$75 (21 Registers)
=$afe680				OPL3_R_SL_RR              = $AFE680;  $80..$95 (21 Registers)
=$afe6a0				OPL3_R_FNumber            = $AFE6A0;  $A0..$A8
=$afe6b0				OPL3_R_KON_BLOCK_FNumber  = $AFE6B0;  $B0..$B9
=$afe6bd				OPL3_R_DPTH_RHYTM         = $AFE6BD;  $BD
=$afe6c0				OPL3_R_FEEDBACK           = $AFE6C0;  $C0..$C9
=$afe6e0				OPL3_R_WAVE_SELECT        = $AFE6E0;  $E0..$F5
=$afe700				OPL3_L_BASE               = $AFE700
=$e700					OPL3_L_BASE_LL            = $E700
=$00af					OPL3_L_BASE_HL            = $00AF
=$afe701				OPL3_L_TEST               = $AFE701 ; TEST
=$afe702				OPL3_L_TIMER1             = $AFE702 ; TIMER-1
=$afe703				OPL3_L_TIMER2             = $AFE703 ; TIMER-2
=$afe704				OPL3_L_IRQ                = $AFE704 ;
=$afe708				OPL3_L_CSM                = $AFE708 ;
=$afe720				OPL3_L_AM_VID_EG_KSR_MULT = $AFE720 ; $40..$35 (21 Registers)
=$afe740				OPL3_L_KSL_TL             = $AFE740;  $40..$55 (21 Registers)
=$afe760				OPL3_L_AR_DR              = $AFE760;  $60..$75 (21 Registers)
=$afe780				OPL3_L_SL_RR              = $AFE780;  $80..$95 (21 Registers)
=$afe7a0				OPL3_L_FNumber            = $AFE7A0;  $A0..$A8
=$afe7b0				OPL3_L_KON_BLOCK_FNumber  = $AFE7B0;  $B0..$B9
=$afe7bd				OPL3_L_DPTH_RHYTM         = $AFE7BD;  $BD
=$afe7c0				OPL3_L_FEEDBACK           = $AFE7C0;  $C0..$C9
=$afe7e0				OPL3_L_WAVE_SELECT        = $AFE7E0;  $E0..$F5
=$80					TREMOLO    = $80
=$40					VIBRATO    = $40
=$20					SUSTAINING = $20
=$10					KSR        = $10
=$0f					MULTIPLIER = $0F
=$c0					KEY_SCALE  = $C0
=$3f					OP_LEVEL   = $3F
=$f0					ATTACK_RT  = $F0
=$0f					DECAY_RT   = $0F
=$f0					SUSTAIN_RT = $F0
=$0f					RELEASE_RT = $0F
=$0e					FEEDBACK   = $0E
=$01					ALGORITHM  = $01
=9					OPL2_NUM_CHANNELS = 9
=0					OPERATOR1 = 0
=1					OPERATOR2 = 1
=0					MODULATOR = 0
=1					CARRIER = 1
=0					FREQ_MODULATION = 0
=1					ADDITIVE_SYNTH  = 1
=$10					DRUM_BASS   = $10
=$08					DRUM_SNARE  = $08
=$04					DRUM_TOM    = $04
=$02					DRUM_CYMBAL = $02
=$01					DRUM_HI_HAT = $01
=1					NOTE_CS =   1
=2					NOTE_D =    2
=3					NOTE_DS =   3
=4					NOTE_E =    4
=5					NOTE_F =    5
=6					NOTE_FS =   6
=7					NOTE_G =    7
=8					NOTE_GS =   8
=9					NOTE_A =    9
=10					NOTE_AS =  10
=11					NOTE_B =   11
=12					NOTE_C =   12
>38124b	6b 01 81 01 98 01 b0 01		noteFNumbers    .word  $016B, $0181, $0198, $01B0, $01CA, $01E5, $0202, $0220, $0241, $0263, $0287, $02AE
>381253	ca 01 e5 01 02 02 20 02 41 02 63 02 87 02 ae 02
>381263	00 01 02 08 09 0a 10 11		registerOffsets_operator0 .byte $00, $01, $02, $08, $09, $0A, $10, $11, $12 ;initializers for operator 1 */
>38126b	12
>38126c	03 04 05 0b 0c 0d 13 14		registerOffsets_operator1 .byte $03, $04, $05, $0B, $0C, $0D, $13, $14, $15 ;initializers for operator 2 */
>381274	15
>381275	10 13 14 12 15 11		drumOffsets               .byte $10, $13, $14, $12, $15, $11
>38127b	10 08 04 02 01			drumBits                  .byte $10, $08, $04, $02, $01
>381280	20 40 60 80 e0 c0		instrumentBaseRegs        .byte $20, $40, $60, $80, $E0, $C0

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Instruments.asm

>381286	00 24 4f f2 0b 00 0e 31		INSTRUMENT_ACCORDN    .text $00, $24, $4F, $F2, $0B, $00, $0E, $31, $00, $52, $0B, $00, 'ACCORDN   '
>38128e	00 52 0b 00 41 43 43 4f 52 44 4e 20 20 20
>38129c	00 31 43 6e 17 01 02 22		INSTRUMENT_BAGPIPE1   .text $00, $31, $43, $6E, $17, $01, $02, $22, $05, $8B, $0C, $02, 'BAGPIPE1  '
>3812a4	05 8b 0c 02 42 41 47 50 49 50 45 31 20 20
>3812b2	00 30 00 ff a0 03 00 a3		INSTRUMENT_BAGPIPE2   .text $00, $30, $00, $FF, $A0, $03, $00, $A3, $00, $65, $0B, $02, 'BAGPIPE2  '
>3812ba	00 65 0b 02 42 41 47 50 49 50 45 32 20 20
>3812c8	00 31 87 a1 11 00 08 16		INSTRUMENT_BANJO1     .text $00, $31, $87, $A1, $11, $00, $08, $16, $80, $7D, $43, $00, 'BANJO1    '
>3812d0	80 7d 43 00 42 41 4e 4a 4f 31 20 20 20 20
>3812de	00 01 15 25 2f 00 0a 21		INSTRUMENT_BASS1      .text $00, $01, $15, $25, $2F, $00, $0A, $21, $80, $65, $6C, $00, 'BASS1     '
>3812e6	80 65 6c 00 42 41 53 53 31 20 20 20 20 20
>3812f4	00 01 1d f2 ef 00 0a 01		INSTRUMENT_BASS2      .text $00, $01, $1D, $F2, $EF, $00, $0A, $01, $00, $F5, $78, $00, 'BASS2     '
>3812fc	00 f5 78 00 42 41 53 53 32 20 20 20 20 20
>38130a	00 c0 6d f9 01 01 0e 41		INSTRUMENT_BASSHARP   .text $00, $C0, $6D, $F9, $01, $01, $0E, $41, $00, $F2, $73, $00, 'BASSHARP  '
>381312	00 f2 73 00 42 41 53 53 48 41 52 50 20 20
>381320	00 30 c8 d5 19 00 0c 71		INSTRUMENT_BASSOON1   .text $00, $30, $C8, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'BASSOON1  '
>381328	80 61 1b 00 42 41 53 53 4f 4f 4e 31 20 20
>381336	00 c1 4f b1 53 03 06 e0		INSTRUMENT_BASSTRLG   .text $00, $C1, $4F, $B1, $53, $03, $06, $E0, $00, $12, $74, $03, 'BASSTRLG  '
>38133e	00 12 74 03 42 41 53 53 54 52 4c 47 20 20
>38134c	06 00 0b a8 4c 00 00 00		INSTRUMENT_BDRUM1     .text $06, $00, $0B, $A8, $4C, $00, $00, $00, $00, $00, $00, $00, 'BDRUM1    '
>381354	00 00 00 00 42 44 52 55 4d 31 20 20 20 20
>381362	00 64 db ff 01 00 04 3e		INSTRUMENT_BELLONG    .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F3, $62, $00, 'BELLONG   '
>38136a	c0 f3 62 00 42 45 4c 4c 4f 4e 47 20 20 20
>381378	00 07 4f f2 60 00 08 12		INSTRUMENT_BELLS      .text $00, $07, $4F, $F2, $60, $00, $08, $12, $00, $F2, $72, $00, 'BELLS     '
>381380	00 f2 72 00 42 45 4c 4c 53 20 20 20 20 20
>38138e	00 64 db ff 01 00 04 3e		INSTRUMENT_BELSHORT   .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F5, $F3, $00, 'BELSHORT  '
>381396	c0 f5 f3 00 42 45 4c 53 48 4f 52 54 20 20
>3813a4	00 20 4b 7b 04 01 0e 21		INSTRUMENT_BNCEBASS   .text $00, $20, $4B, $7B, $04, $01, $0E, $21, $00, $F5, $72, $00, 'BNCEBASS  '
>3813ac	00 f5 72 00 42 4e 43 45 42 41 53 53 20 20
>3813ba	00 21 16 71 ae 00 0e 21		INSTRUMENT_BRASS1     .text $00, $21, $16, $71, $AE, $00, $0E, $21, $00, $81, $9E, $00, 'BRASS1    '
>3813c2	00 81 9e 00 42 52 41 53 53 31 20 20 20 20
>3813d0	00 30 c5 52 11 00 00 31		INSTRUMENT_CBASSOON   .text $00, $30, $C5, $52, $11, $00, $00, $31, $80, $31, $2E, $00, 'CBASSOON  '
>3813d8	80 31 2e 00 43 42 41 53 53 4f 4f 4e 20 20
>3813e6	00 33 87 01 10 00 08 14		INSTRUMENT_CELESTA    .text $00, $33, $87, $01, $10, $00, $08, $14, $80, $7D, $33, $00, 'CELESTA   '
>3813ee	80 7d 33 00 43 45 4c 45 53 54 41 20 20 20
>3813fc	00 32 16 73 24 00 0e 21		INSTRUMENT_CLAR1      .text $00, $32, $16, $73, $24, $00, $0E, $21, $80, $75, $57, $00, 'CLAR1     '
>381404	80 75 57 00 43 4c 41 52 31 20 20 20 20 20
>381412	00 31 1c 41 1b 00 0c 60		INSTRUMENT_CLAR2      .text $00, $31, $1C, $41, $1B, $00, $0C, $60, $80, $42, $3B, $00, 'CLAR2     '
>38141a	80 42 3b 00 43 4c 41 52 32 20 20 20 20 20
>381428	00 32 9a 51 1b 00 0c 61		INSTRUMENT_CLARINET   .text $00, $32, $9A, $51, $1B, $00, $0C, $61, $82, $A2, $3B, $00, 'CLARINET  '
>381430	82 a2 3b 00 43 4c 41 52 49 4e 45 54 20 20
>38143e	00 11 0d f2 01 00 0a 15		INSTRUMENT_CLAVECIN   .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'CLAVECIN  '
>381446	0d f2 b1 00 43 4c 41 56 45 43 49 4e 20 20
>381454	00 00 02 f0 ff 00 06 11		INSTRUMENT_CROMORNE   .text $00, $00, $02, $F0, $FF, $00, $06, $11, $80, $F0, $FF, $00, 'CROMORNE  '
>38145c	80 f0 ff 00 43 52 4f 4d 4f 52 4e 45 20 20
>38146a	09 01 00 f5 b5 00 00 00		INSTRUMENT_CYMBAL1    .text $09, $01, $00, $F5, $B5, $00, $00, $00, $00, $00, $00, $00, 'CYMBAL1   '
>381472	00 00 00 00 43 59 4d 42 41 4c 31 20 20 20
>381480	00 05 8a f0 7b 00 08 01		INSTRUMENT_ELCLAV1    .text $00, $05, $8A, $F0, $7B, $00, $08, $01, $80, $F4, $7B, $00, 'ELCLAV1   '
>381488	80 f4 7b 00 45 4c 43 4c 41 56 31 20 20 20
>381496	00 01 49 f1 53 01 06 11		INSTRUMENT_ELCLAV2    .text $00, $01, $49, $F1, $53, $01, $06, $11, $00, $F1, $74, $02, 'ELCLAV2   '
>38149e	00 f1 74 02 45 4c 43 4c 41 56 32 20 20 20
>3814ac	00 e0 6d 57 04 01 0e 61		INSTRUMENT_ELECFL     .text $00, $E0, $6D, $57, $04, $01, $0E, $61, $00, $67, $7D, $00, 'ELECFL    '
>3814b4	00 67 7d 00 45 4c 45 43 46 4c 20 20 20 20
>3814c2	00 13 97 9a 12 02 0e 91		INSTRUMENT_ELECVIBE   .text $00, $13, $97, $9A, $12, $02, $0E, $91, $80, $9B, $11, $00, 'ELECVIBE  '
>3814ca	80 9b 11 00 45 4c 45 43 56 49 42 45 20 20
>3814d8	00 f1 01 97 17 00 08 21		INSTRUMENT_ELGUIT1    .text $00, $F1, $01, $97, $17, $00, $08, $21, $0D, $F1, $18, $00, 'ELGUIT1   '
>3814e0	0d f1 18 00 45 4c 47 55 49 54 31 20 20 20
>3814ee	00 13 96 ff 21 00 0a 11		INSTRUMENT_ELGUIT2    .text $00, $13, $96, $FF, $21, $00, $0A, $11, $80, $FF, $03, $00, 'ELGUIT2   '
>3814f6	80 ff 03 00 45 4c 47 55 49 54 32 20 20 20
>381504	00 07 8f 82 7d 00 0c 14		INSTRUMENT_ELGUIT3    .text $00, $07, $8F, $82, $7D, $00, $0C, $14, $80, $82, $7D, $00, 'ELGUIT3   '
>38150c	80 82 7d 00 45 4c 47 55 49 54 33 20 20 20
>38151a	00 05 8f da 15 00 0a 01		INSTRUMENT_ELGUIT4    .text $00, $05, $8F, $DA, $15, $00, $0A, $01, $80, $F9, $14, $02, 'ELGUIT4   '
>381522	80 f9 14 02 45 4c 47 55 49 54 34 20 20 20
>381530	00 b2 cd 91 2a 02 09 b1		INSTRUMENT_ELORGAN1   .text $00, $B2, $CD, $91, $2A, $02, $09, $B1, $80, $91, $2A, $01, 'ELORGAN1  '
>381538	80 91 2a 01 45 4c 4f 52 47 41 4e 31 20 20
>381546	00 01 4f f1 50 00 06 01		INSTRUMENT_ELPIANO1   .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'ELPIANO1  '
>38154e	04 d2 7c 00 45 4c 50 49 41 4e 4f 31 20 20
>38155c	00 02 22 f2 13 00 0e 02		INSTRUMENT_ELPIANO2   .text $00, $02, $22, $F2, $13, $00, $0E, $02, $00, $F5, $43, $00, 'ELPIANO2  '
>381564	00 f5 43 00 45 4c 50 49 41 4e 4f 32 20 20
>381572	00 81 63 f3 58 00 00 01		INSTRUMENT_EPIANO1A   .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'EPIANO1A  '
>38157a	80 f2 58 00 45 50 49 41 4e 4f 31 41 20 20
>381588	00 07 1f f5 fa 00 0e 01		INSTRUMENT_EPIANO1B   .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'EPIANO1B  '
>381590	57 f5 fa 00 45 50 49 41 4e 4f 31 42 20 20
>38159e	00 21 83 74 17 00 07 a2		INSTRUMENT_FLUTE      .text $00, $21, $83, $74, $17, $00, $07, $A2, $8D, $65, $17, $00, 'FLUTE     '
>3815a6	8d 65 17 00 46 4c 55 54 45 20 20 20 20 20
>3815b4	00 a1 27 74 8f 00 02 a1		INSTRUMENT_FLUTE1     .text $00, $A1, $27, $74, $8F, $00, $02, $A1, $80, $65, $2A, $00, 'FLUTE1    '
>3815bc	80 65 2a 00 46 4c 55 54 45 31 20 20 20 20
>3815ca	00 e0 ec 6e 8f 00 0e 61		INSTRUMENT_FLUTE2     .text $00, $E0, $EC, $6E, $8F, $00, $0E, $61, $00, $65, $2A, $00, 'FLUTE2    '
>3815d2	00 65 2a 00 46 4c 55 54 45 32 20 20 20 20
>3815e0	00 21 9f 53 5a 00 0c 21		INSTRUMENT_FRHORN1    .text $00, $21, $9F, $53, $5A, $00, $0C, $21, $80, $AA, $1A, $00, 'FRHORN1   '
>3815e8	80 aa 1a 00 46 52 48 4f 52 4e 31 20 20 20
>3815f6	00 20 8e a5 8f 02 06 21		INSTRUMENT_FRHORN2    .text $00, $20, $8E, $A5, $8F, $02, $06, $21, $00, $36, $3D, $00, 'FRHORN2   '
>3815fe	00 36 3d 00 46 52 48 4f 52 4e 32 20 20 20
>38160c	00 f0 18 55 ef 02 00 e0		INSTRUMENT_FSTRP1     .text $00, $F0, $18, $55, $EF, $02, $00, $E0, $80, $87, $1E, $03, 'FSTRP1    '
>381614	80 87 1e 03 46 53 54 52 50 31 20 20 20 20
>381622	00 70 16 55 2f 02 0c e0		INSTRUMENT_FSTRP2     .text $00, $70, $16, $55, $2F, $02, $0C, $E0, $80, $87, $1E, $03, 'FSTRP2    '
>38162a	80 87 1e 03 46 53 54 52 50 32 20 20 20 20
>381638	00 f1 00 97 13 00 0a 25		INSTRUMENT_FUZGUIT1   .text $00, $F1, $00, $97, $13, $00, $0A, $25, $0D, $F1, $18, $01, 'FUZGUIT1  '
>381640	0d f1 18 01 46 55 5a 47 55 49 54 31 20 20
>38164e	00 31 48 f1 53 00 06 32		INSTRUMENT_FUZGUIT2   .text $00, $31, $48, $F1, $53, $00, $06, $32, $00, $F2, $27, $02, 'FUZGUIT2  '
>381656	00 f2 27 02 46 55 5a 47 55 49 54 32 20 20
>381664	00 01 11 f2 1f 00 0a 01		INSTRUMENT_GUITAR1    .text $00, $01, $11, $F2, $1F, $00, $0A, $01, $00, $F5, $88, $00, 'GUITAR1   '
>38166c	00 f5 88 00 47 55 49 54 41 52 31 20 20 20
>38167a	00 02 29 f5 75 00 00 01		INSTRUMENT_HARP1      .text $00, $02, $29, $F5, $75, $00, $00, $01, $83, $F2, $F3, $00, 'HARP1     '
>381682	83 f2 f3 00 48 41 52 50 31 20 20 20 20 20
>381690	00 02 99 f5 55 00 00 01		INSTRUMENT_HARP2      .text $00, $02, $99, $F5, $55, $00, $00, $01, $80, $F6, $53, $00, 'HARP2     '
>381698	80 f6 53 00 48 41 52 50 32 20 20 20 20 20
>3816a6	00 02 57 f5 56 00 00 01		INSTRUMENT_HARP3      .text $00, $02, $57, $F5, $56, $00, $00, $01, $80, $F6, $54, $00, 'HARP3     '
>3816ae	80 f6 54 00 48 41 52 50 33 20 20 20 20 20
>3816bc	00 02 29 f5 75 00 00 01		INSTRUMENT_HARPE1     .text $00, $02, $29, $F5, $75, $00, $00, $01, $03, $F2, $F3, $00, 'HARPE1    '
>3816c4	03 f2 f3 00 48 41 52 50 45 31 20 20 20 20
>3816d2	00 32 87 a1 10 00 08 16		INSTRUMENT_HARPSI1    .text $00, $32, $87, $A1, $10, $00, $08, $16, $80, $7D, $33, $00, 'HARPSI1   '
>3816da	80 7d 33 00 48 41 52 50 53 49 31 20 20 20
>3816e8	00 33 87 a1 10 00 06 15		INSTRUMENT_HARPSI2    .text $00, $33, $87, $A1, $10, $00, $06, $15, $80, $7D, $43, $00, 'HARPSI2   '
>3816f0	80 7d 43 00 48 41 52 50 53 49 32 20 20 20
>3816fe	00 35 84 a8 10 00 08 18		INSTRUMENT_HARPSI3    .text $00, $35, $84, $A8, $10, $00, $08, $18, $80, $7D, $33, $00, 'HARPSI3   '
>381706	80 7d 33 00 48 41 52 50 53 49 33 20 20 20
>381714	00 11 0d f2 01 00 0a 15		INSTRUMENT_HARPSI4    .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'HARPSI4   '
>38171c	0d f2 b1 00 48 41 52 50 53 49 34 20 20 20
>38172a	00 36 87 8a 00 00 08 1a		INSTRUMENT_HARPSI5    .text $00, $36, $87, $8A, $00, $00, $08, $1A, $80, $7F, $33, $00, 'HARPSI5   '
>381732	80 7f 33 00 48 41 52 50 53 49 35 20 20 20
>381740	00 f0 00 1e 11 01 08 e2		INSTRUMENT_HELICPTR   .text $00, $F0, $00, $1E, $11, $01, $08, $E2, $C0, $11, $11, $01, 'HELICPTR  '
>381748	c0 11 11 01 48 45 4c 49 43 50 54 52 20 20
>381756	0a 01 00 f7 b5 00 00 00		INSTRUMENT_HIHAT1     .text $0A, $01, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'HIHAT1    '
>38175e	00 00 00 00 48 49 48 41 54 31 20 20 20 20
>38176c	0a 01 03 da 18 00 00 00		INSTRUMENT_HIHAT2     .text $0A, $01, $03, $DA, $18, $00, $00, $00, $00, $00, $00, $00, 'HIHAT2    '
>381774	00 00 00 00 48 49 48 41 54 32 20 20 20 20
>381782	00 87 4d 78 42 00 0a 94		INSTRUMENT_JAVAICAN   .text $00, $87, $4D, $78, $42, $00, $0A, $94, $00, $85, $54, $00, 'JAVAICAN  '
>38178a	00 85 54 00 4a 41 56 41 49 43 41 4e 20 20
>381798	00 03 5e 85 51 01 0e 11		INSTRUMENT_JAZZGUIT   .text $00, $03, $5E, $85, $51, $01, $0E, $11, $00, $D2, $71, $00, 'JAZZGUIT  '
>3817a0	00 d2 71 00 4a 41 5a 5a 47 55 49 54 20 20
>3817ae	00 00 50 f2 70 00 0e 13		INSTRUMENT_JEWSHARP   .text $00, $00, $50, $F2, $70, $00, $0E, $13, $00, $F2, $72, $00, 'JEWSHARP  '
>3817b6	00 f2 72 00 4a 45 57 53 48 41 52 50 20 20
>3817c4	00 00 02 f0 fa 01 06 11		INSTRUMENT_KEYBRD1    .text $00, $00, $02, $F0, $FA, $01, $06, $11, $80, $F2, $FA, $01, 'KEYBRD1   '
>3817cc	80 f2 fa 01 4b 45 59 42 52 44 31 20 20 20
>3817da	00 01 8f f2 bd 00 08 14		INSTRUMENT_KEYBRD2    .text $00, $01, $8F, $F2, $BD, $00, $08, $14, $80, $82, $BD, $00, 'KEYBRD2   '
>3817e2	80 82 bd 00 4b 45 59 42 52 44 32 20 20 20
>3817f0	00 01 00 f0 f0 00 00 e4		INSTRUMENT_KEYBRD3    .text $00, $01, $00, $F0, $F0, $00, $00, $E4, $03, $F3, $36, $00, 'KEYBRD3   '
>3817f8	03 f3 36 00 4b 45 59 42 52 44 33 20 20 20
>381806	09 e6 00 25 b5 00 00 00		INSTRUMENT_LASER      .text $09, $E6, $00, $25, $B5, $00, $00, $00, $00, $00, $00, $00, 'LASER     '
>38180e	00 00 00 00 4c 41 53 45 52 20 20 20 20 20
>38181c	00 32 44 f8 ff 00 0e 11		INSTRUMENT_LOGDRUM1   .text $00, $32, $44, $F8, $FF, $00, $0E, $11, $00, $F5, $7F, $00, 'LOGDRUM1  '
>381824	00 f5 7f 00 4c 4f 47 44 52 55 4d 31 20 20
>381832	00 05 4e da 25 00 0a 01		INSTRUMENT_MARIMBA1   .text $00, $05, $4E, $DA, $25, $00, $0A, $01, $00, $F9, $15, $00, 'MARIMBA1  '
>38183a	00 f9 15 00 4d 41 52 49 4d 42 41 31 20 20
>381848	00 85 4e da 15 00 0a 81		INSTRUMENT_MARIMBA2   .text $00, $85, $4E, $DA, $15, $00, $0A, $81, $80, $F9, $13, $00, 'MARIMBA2  '
>381850	80 f9 13 00 4d 41 52 49 4d 42 41 32 20 20
>38185e	00 30 00 fe 11 01 08 ae		INSTRUMENT_MDRNPHON   .text $00, $30, $00, $FE, $11, $01, $08, $AE, $C0, $F1, $19, $01, 'MDRNPHON  '
>381866	c0 f1 19 01 4d 44 52 4e 50 48 4f 4e 20 20
>381874	07 0c 00 c8 b6 01 00 00		INSTRUMENT_MLTRDRUM   .text $07, $0C, $00, $C8, $B6, $01, $00, $00, $00, $00, $00, $00, 'MLTRDRUM  '
>38187c	00 00 00 00 4d 4c 54 52 44 52 55 4d 20 20
>38188a	00 20 90 f5 9e 02 0c 11		INSTRUMENT_MOOGSYNT   .text $00, $20, $90, $F5, $9E, $02, $0C, $11, $00, $F4, $5B, $03, 'MOOGSYNT  '
>381892	00 f4 5b 03 4d 4f 4f 47 53 59 4e 54 20 20
>3818a0	00 0e 40 d1 53 00 0e 0e		INSTRUMENT_NOISE1     .text $00, $0E, $40, $D1, $53, $00, $0E, $0E, $00, $F2, $7F, $03, 'NOISE1    '
>3818a8	00 f2 7f 03 4e 4f 49 53 45 31 20 20 20 20
>3818b6	00 b1 c5 6e 17 00 02 22		INSTRUMENT_OBOE1      .text $00, $B1, $C5, $6E, $17, $00, $02, $22, $05, $8B, $0E, $00, 'OBOE1     '
>3818be	05 8b 0e 00 4f 42 4f 45 31 20 20 20 20 20
>3818cc	00 65 d2 81 03 00 02 71		INSTRUMENT_ORGAN1     .text $00, $65, $D2, $81, $03, $00, $02, $71, $80, $F1, $05, $00, 'ORGAN1    '
>3818d4	80 f1 05 00 4f 52 47 41 4e 31 20 20 20 20
>3818e2	00 24 80 ff 0f 00 01 21		INSTRUMENT_ORGAN2     .text $00, $24, $80, $FF, $0F, $00, $01, $21, $80, $FF, $0F, $00, 'ORGAN2    '
>3818ea	80 ff 0f 00 4f 52 47 41 4e 32 20 20 20 20
>3818f8	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3     .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $80, $F0, $1F, $00, 'ORGAN3    '
>381900	80 f0 1f 00 4f 52 47 41 4e 33 20 20 20 20
>38190e	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3A    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $8D, $F0, $13, $00, 'ORGAN3A   '
>381916	8d f0 13 00 4f 52 47 41 4e 33 41 20 20 20
>381924	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3B    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $92, $F0, $12, $00, 'ORGAN3B   '
>38192c	92 f0 12 00 4f 52 47 41 4e 33 42 20 20 20
>38193a	00 0c 00 f8 b5 00 01 00		INSTRUMENT_ORGNPERC   .text $00, $0C, $00, $F8, $B5, $00, $01, $00, $00, $D6, $4F, $00, 'ORGNPERC  '
>381942	00 d6 4f 00 4f 52 47 4e 50 45 52 43 20 20
>381950	00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE1     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F1, $B2, $00, 'PHONE1    '
>381958	08 f1 b2 00 50 48 4f 4e 45 31 20 20 20 20
>381966	00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE2     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $0A, $F1, $B4, $00, 'PHONE2    '
>38196e	0a f1 b4 00 50 48 4f 4e 45 32 20 20 20 20
>38197c	00 81 63 f3 58 00 00 01		INSTRUMENT_PIAN1A     .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'PIAN1A    '
>381984	80 f2 58 00 50 49 41 4e 31 41 20 20 20 20
>381992	00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1B     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $26, $F5, $FA, $00, 'PIAN1B    '
>38199a	26 f5 fa 00 50 49 41 4e 31 42 20 20 20 20
>3819a8	00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1C     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'PIAN1C    '
>3819b0	57 f5 fa 00 50 49 41 4e 31 43 20 20 20 20
>3819be	00 03 4f f1 53 00 06 17		INSTRUMENT_PIANO      .text $00, $03, $4F, $F1, $53, $00, $06, $17, $00, $F2, $74, $00, 'PIANO     '
>3819c6	00 f2 74 00 50 49 41 4e 4f 20 20 20 20 20
>3819d4	00 01 4f f1 53 00 06 11		INSTRUMENT_PIANO1     .text $00, $01, $4F, $F1, $53, $00, $06, $11, $00, $D2, $74, $00, 'PIANO1    '
>3819dc	00 d2 74 00 50 49 41 4e 4f 31 20 20 20 20
>3819ea	00 41 9d f2 51 00 06 13		INSTRUMENT_PIANO2     .text $00, $41, $9D, $F2, $51, $00, $06, $13, $00, $F2, $F1, $00, 'PIANO2    '
>3819f2	00 f2 f1 00 50 49 41 4e 4f 32 20 20 20 20
>381a00	00 01 4f f1 50 00 06 01		INSTRUMENT_PIANO3     .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'PIANO3    '
>381a08	04 d2 7c 00 50 49 41 4e 4f 33 20 20 20 20
>381a16	00 01 4d f1 60 00 08 11		INSTRUMENT_PIANO4     .text $00, $01, $4D, $F1, $60, $00, $08, $11, $00, $D2, $7B, $00, 'PIANO4    '
>381a1e	00 d2 7b 00 50 49 41 4e 4f 34 20 20 20 20
>381a2c	00 03 4f f1 53 00 06 17		INSTRUMENT_PIANOBEL   .text $00, $03, $4F, $F1, $53, $00, $06, $17, $03, $F2, $74, $00, 'PIANOBEL  '
>381a34	03 f2 74 00 50 49 41 4e 4f 42 45 4c 20 20
>381a42	00 01 cf f1 53 00 02 12		INSTRUMENT_PIANOF     .text $00, $01, $CF, $F1, $53, $00, $02, $12, $00, $F2, $83, $00, 'PIANOF    '
>381a4a	00 f2 83 00 50 49 41 4e 4f 46 20 20 20 20
>381a58	00 10 00 75 93 01 00 01		INSTRUMENT_POPBASS1   .text $00, $10, $00, $75, $93, $01, $00, $01, $00, $F5, $82, $01, 'POPBASS1  '
>381a60	00 f5 82 01 50 4f 50 42 41 53 53 31 20 20
>381a6e	07 0c 00 c7 b4 00 00 00		INSTRUMENT_RKSNARE1   .text $07, $0C, $00, $C7, $B4, $00, $00, $00, $00, $00, $00, $00, 'RKSNARE1  '
>381a76	00 00 00 00 52 4b 53 4e 41 52 45 31 20 20
>381a84	00 01 4f 71 53 00 0a 12		INSTRUMENT_SAX1       .text $00, $01, $4F, $71, $53, $00, $0A, $12, $00, $52, $7C, $00, 'SAX1      '
>381a8c	00 52 7c 00 53 41 58 31 20 20 20 20 20 20
>381a9a	00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH    .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH   '
>381aa2	00 5c dc 00 53 43 52 41 54 43 48 20 20 20
>381ab0	00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH4   .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH4  '
>381ab8	00 5c dc 00 53 43 52 41 54 43 48 34 20 20
>381ac6	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SDRUM2     .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SDRUM2    '
>381ace	00 f6 b4 00 53 44 52 55 4d 32 20 20 20 20
>381adc	00 e4 0e ff 3f 01 00 c0		INSTRUMENT_SHRTVIBE   .text $00, $E4, $0E, $FF, $3F, $01, $00, $C0, $00, $F3, $07, $00, 'SHRTVIBE  '
>381ae4	00 f3 07 00 53 48 52 54 56 49 42 45 20 20
>381af2	00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR1     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $00, 'SITAR1    '
>381afa	40 f1 53 00 53 49 54 41 52 31 20 20 20 20
>381b08	00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR2     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $01, 'SITAR2    '
>381b10	40 f1 53 01 53 49 54 41 52 32 20 20 20 20
>381b1e	00 61 0c 81 03 00 08 71		INSTRUMENT_SNAKEFL    .text $00, $61, $0C, $81, $03, $00, $08, $71, $80, $61, $0C, $00, 'SNAKEFL   '
>381b26	80 61 0c 00 53 4e 41 4b 45 46 4c 20 20 20
>381b34	07 0c 00 f8 b5 00 00 00		INSTRUMENT_SNARE1     .text $07, $0C, $00, $F8, $B5, $00, $00, $00, $00, $00, $00, $00, 'SNARE1    '
>381b3c	00 00 00 00 53 4e 41 52 45 31 20 20 20 20
>381b4a	00 06 00 f0 f0 00 0e c4		INSTRUMENT_SNRSUST    .text $00, $06, $00, $F0, $F0, $00, $0E, $C4, $03, $C4, $34, $00, 'SNRSUST   '
>381b52	03 c4 34 00 53 4e 52 53 55 53 54 20 20 20
>381b60	00 70 1c 51 03 02 0e 20		INSTRUMENT_SOLOVLN    .text $00, $70, $1C, $51, $03, $02, $0E, $20, $00, $54, $67, $02, 'SOLOVLN   '
>381b68	00 54 67 02 53 4f 4c 4f 56 4c 4e 20 20 20
>381b76	00 01 46 f1 83 00 06 61		INSTRUMENT_STEELGT1   .text $00, $01, $46, $F1, $83, $00, $06, $61, $03, $31, $86, $00, 'STEELGT1  '
>381b7e	03 31 86 00 53 54 45 45 4c 47 54 31 20 20
>381b8c	00 01 47 f1 83 00 06 61		INSTRUMENT_STEELGT2   .text $00, $01, $47, $F1, $83, $00, $06, $61, $03, $91, $86, $00, 'STEELGT2  '
>381b94	03 91 86 00 53 54 45 45 4c 47 54 32 20 20
>381ba2	00 b1 8b 71 11 00 06 61		INSTRUMENT_STRINGS1   .text $00, $B1, $8B, $71, $11, $00, $06, $61, $40, $42, $15, $01, 'STRINGS1  '
>381baa	40 42 15 01 53 54 52 49 4e 47 53 31 20 20
>381bb8	00 e1 4f b1 d3 03 06 21		INSTRUMENT_STRNLONG   .text $00, $E1, $4F, $B1, $D3, $03, $06, $21, $00, $12, $74, $01, 'STRNLONG  '
>381bc0	00 12 74 01 53 54 52 4e 4c 4f 4e 47 20 20
>381bce	00 55 97 2a 02 00 00 12		INSTRUMENT_SYN1       .text $00, $55, $97, $2A, $02, $00, $00, $12, $80, $42, $F3, $00, 'SYN1      '
>381bd6	80 42 f3 00 53 59 4e 31 20 20 20 20 20 20
>381be4	00 13 97 9a 12 00 0e 11		INSTRUMENT_SYN2       .text $00, $13, $97, $9A, $12, $00, $0E, $11, $80, $9B, $14, $00, 'SYN2      '
>381bec	80 9b 14 00 53 59 4e 32 20 20 20 20 20 20
>381bfa	00 11 8a f1 11 00 06 01		INSTRUMENT_SYN3       .text $00, $11, $8A, $F1, $11, $00, $06, $01, $40, $F1, $B3, $00, 'SYN3      '
>381c02	40 f1 b3 00 53 59 4e 33 20 20 20 20 20 20
>381c10	00 21 0d e9 3a 00 0a 22		INSTRUMENT_SYN4       .text $00, $21, $0D, $E9, $3A, $00, $0A, $22, $80, $65, $6C, $00, 'SYN4      '
>381c18	80 65 6c 00 53 59 4e 34 20 20 20 20 20 20
>381c26	00 01 4f 71 53 00 06 19		INSTRUMENT_SYN5       .text $00, $01, $4F, $71, $53, $00, $06, $19, $00, $52, $7C, $00, 'SYN5      '
>381c2e	00 52 7c 00 53 59 4e 35 20 20 20 20 20 20
>381c3c	00 24 0f 41 7e 00 0a 21		INSTRUMENT_SYN6       .text $00, $24, $0F, $41, $7E, $00, $0A, $21, $00, $F1, $5E, $00, 'SYN6      '
>381c44	00 f1 5e 00 53 59 4e 36 20 20 20 20 20 20
>381c52	00 07 87 f0 05 00 04 01		INSTRUMENT_SYN9       .text $00, $07, $87, $F0, $05, $00, $04, $01, $80, $F0, $05, $00, 'SYN9      '
>381c5a	80 f0 05 00 53 59 4e 39 20 20 20 20 20 20
>381c68	00 26 03 e0 f0 00 08 1e		INSTRUMENT_SYNBAL1    .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'SYNBAL1   '
>381c70	00 ff 31 00 53 59 4e 42 41 4c 31 20 20 20
>381c7e	00 28 03 e0 f0 00 04 13		INSTRUMENT_SYNBAL2    .text $00, $28, $03, $E0, $F0, $00, $04, $13, $00, $E8, $11, $00, 'SYNBAL2   '
>381c86	00 e8 11 00 53 59 4e 42 41 4c 32 20 20 20
>381c94	00 30 88 d5 19 00 0c 71		INSTRUMENT_SYNBASS1   .text $00, $30, $88, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'SYNBASS1  '
>381c9c	80 61 1b 00 53 59 4e 42 41 53 53 31 20 20
>381caa	00 81 86 65 01 00 0c 11		INSTRUMENT_SYNBASS2   .text $00, $81, $86, $65, $01, $00, $0C, $11, $00, $32, $74, $00, 'SYNBASS2  '
>381cb2	00 32 74 00 53 59 4e 42 41 53 53 32 20 20
>381cc0	00 81 83 65 05 00 0a 51		INSTRUMENT_SYNBASS4   .text $00, $81, $83, $65, $05, $00, $0A, $51, $00, $32, $74, $00, 'SYNBASS4  '
>381cc8	00 32 74 00 53 59 4e 42 41 53 53 34 20 20
>381cd6	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR1    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F8, $B6, $00, 'SYNSNR1   '
>381cde	00 f8 b6 00 53 59 4e 53 4e 52 31 20 20 20
>381cec	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR2    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SYNSNR2   '
>381cf4	00 f6 b4 00 53 59 4e 53 4e 52 32 20 20 20
>381d02	00 8f 81 ef 01 00 04 01		INSTRUMENT_TINCAN1    .text $00, $8F, $81, $EF, $01, $00, $04, $01, $00, $98, $F1, $00, 'TINCAN1   '
>381d0a	00 98 f1 00 54 49 4e 43 41 4e 31 20 20 20
>381d18	08 04 00 f7 b5 00 00 00		INSTRUMENT_TOM1       .text $08, $04, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'TOM1      '
>381d20	00 00 00 00 54 4f 4d 31 20 20 20 20 20 20
>381d2e	08 02 00 c8 97 00 00 00		INSTRUMENT_TOM2       .text $08, $02, $00, $C8, $97, $00, $00, $00, $00, $00, $00, $00, 'TOM2      '
>381d36	00 00 00 00 54 4f 4d 32 20 20 20 20 20 20
>381d44	00 17 4f f2 61 00 08 12		INSTRUMENT_TRAINBEL   .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F2, $74, $00, 'TRAINBEL  '
>381d4c	08 f2 74 00 54 52 41 49 4e 42 45 4c 20 20
>381d5a	00 26 03 e0 f0 00 08 1e		INSTRUMENT_TRIANGLE   .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'TRIANGLE  '
>381d62	00 ff 31 00 54 52 49 41 4e 47 4c 45 20 20
>381d70	00 b1 1c 41 1f 00 0e 61		INSTRUMENT_TROMB1     .text $00, $B1, $1C, $41, $1F, $00, $0E, $61, $80, $92, $3B, $00, 'TROMB1    '
>381d78	80 92 3b 00 54 52 4f 4d 42 31 20 20 20 20
>381d86	00 21 1c 53 1d 00 0c 61		INSTRUMENT_TROMB2     .text $00, $21, $1C, $53, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TROMB2    '
>381d8e	80 52 3b 00 54 52 4f 4d 42 32 20 20 20 20
>381d9c	00 31 1c 41 0b 00 0e 61		INSTRUMENT_TRUMPET1   .text $00, $31, $1C, $41, $0B, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET1  '
>381da4	80 92 3b 00 54 52 55 4d 50 45 54 31 20 20
>381db2	00 31 1c 23 1d 00 0c 61		INSTRUMENT_TRUMPET2   .text $00, $31, $1C, $23, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TRUMPET2  '
>381dba	80 52 3b 00 54 52 55 4d 50 45 54 32 20 20
>381dc8	00 31 1c 41 01 00 0e 61		INSTRUMENT_TRUMPET3   .text $00, $31, $1C, $41, $01, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET3  '
>381dd0	80 92 3b 00 54 52 55 4d 50 45 54 33 20 20
>381dde	00 31 1c 41 0b 00 0c 61		INSTRUMENT_TRUMPET4   .text $00, $31, $1C, $41, $0B, $00, $0C, $61, $80, $92, $3B, $00, 'TRUMPET4  '
>381de6	80 92 3b 00 54 52 55 4d 50 45 54 34 20 20
>381df4	00 21 19 43 8c 00 0c 21		INSTRUMENT_TUBA1      .text $00, $21, $19, $43, $8C, $00, $0C, $21, $80, $85, $2F, $00, 'TUBA1     '
>381dfc	80 85 2f 00 54 55 42 41 31 20 20 20 20 20
>381e0a	00 84 53 f5 33 00 06 a0		INSTRUMENT_VIBRA1     .text $00, $84, $53, $F5, $33, $00, $06, $A0, $80, $FD, $25, $00, 'VIBRA1    '
>381e12	80 fd 25 00 56 49 42 52 41 31 20 20 20 20
>381e20	00 06 73 f6 54 00 00 81		INSTRUMENT_VIBRA2     .text $00, $06, $73, $F6, $54, $00, $00, $81, $03, $F2, $B3, $00, 'VIBRA2    '
>381e28	03 f2 b3 00 56 49 42 52 41 32 20 20 20 20
>381e36	00 93 97 aa 12 02 0e 91		INSTRUMENT_VIBRA3     .text $00, $93, $97, $AA, $12, $02, $0E, $91, $80, $AC, $21, $00, 'VIBRA3    '
>381e3e	80 ac 21 00 56 49 42 52 41 33 20 20 20 20
>381e4c	00 31 1c 51 03 00 0e 61		INSTRUMENT_VIOLIN1    .text $00, $31, $1C, $51, $03, $00, $0E, $61, $80, $54, $67, $00, 'VIOLIN1   '
>381e54	80 54 67 00 56 49 4f 4c 49 4e 31 20 20 20
>381e62	00 e1 88 62 29 00 0c 22		INSTRUMENT_VIOLIN2    .text $00, $E1, $88, $62, $29, $00, $0C, $22, $80, $53, $2C, $00, 'VIOLIN2   '
>381e6a	80 53 2c 00 56 49 4f 4c 49 4e 32 20 20 20
>381e78	00 e1 88 64 29 00 06 22		INSTRUMENT_VIOLIN3    .text $00, $E1, $88, $64, $29, $00, $06, $22, $83, $53, $2C, $00, 'VIOLIN3   '
>381e80	83 53 2c 00 56 49 4f 4c 49 4e 33 20 20 20
>381e8e	00 31 9c f1 f9 00 0e 31		INSTRUMENT_VLNPIZZ1   .text $00, $31, $9C, $F1, $F9, $00, $0E, $31, $80, $F7, $E6, $00, 'VLNPIZZ1  '
>381e96	80 f7 e6 00 56 4c 4e 50 49 5a 5a 31 20 20
>381ea4	00 00 02 00 f0 00 0e 14		INSTRUMENT_WAVE       .text $00, $00, $02, $00, $F0, $00, $0E, $14, $80, $1B, $A2, $00, 'WAVE      '
>381eac	80 1b a2 00 57 41 56 45 20 20 20 20 20 20
>381eba	00 11 2d c8 2f 00 0c 31		INSTRUMENT_XYLO1      .text $00, $11, $2D, $C8, $2F, $00, $0C, $31, $00, $F5, $F5, $00, 'XYLO1     '
>381ec2	00 f5 f5 00 58 59 4c 4f 31 20 20 20 20 20
>381ed0	06 2e 00 ff 0f 00 00 00		INSTRUMENT_XYLO2      .text $06, $2E, $00, $FF, $0F, $00, $00, $00, $00, $00, $00, $00, 'XYLO2     '
>381ed8	00 00 00 00 58 59 4c 4f 32 20 20 20 20 20
>381ee6	00 06 00 ff f0 00 0e c4		INSTRUMENT_XYLO3      .text $00, $06, $00, $FF, $F0, $00, $0E, $C4, $00, $F8, $B5, $00, 'XYLO3     '
>381eee	00 f8 b5 00 58 59 4c 4f 33 20 20 20 20 20

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Drums.asm

>381efc	00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP2         .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>381f04	00 87 fa 00
>381f08	00 01 00 78 97 09 00 02		DRUMINS_SCRATCH1      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>381f10	00 88 98 03
>381f14	00 01 00 78 97 09 00 02		DRUMINS_SCRATCH2      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>381f1c	00 88 98 03
>381f20	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT2      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>381f28	00 f9 69 00
>381f2c	00 00 00 f8 6c 01 00 0e		DRUMINS_HIQ           .text $00, $00, $00, $F8, $6C, $01, $00, $0E, $80, $E8, $4A, $00
>381f34	80 e8 4a 00
>381f38	00 25 1b fa f2 01 00 12		DRUMINS_WOODBLOK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>381f40	00 f6 9a 00
>381f44	00 06 03 f4 44 00 01 01		DRUMINS_GLOCK         .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>381f4c	1b f2 34 00
>381f50	00 00 00 f9 f3 05 00 01		DRUMINS_BASS_DR2      .text $00, $00, $00, $F9, $F3, $05, $00, $01, $00, $F7, $8A, $00
>381f58	00 f7 8a 00
>381f5c	00 01 07 fa fd 05 00 01		DRUMINS_BASS_DR1      .text $00, $01, $07, $FA, $FD, $05, $00, $01, $00, $F6, $47, $00
>381f64	00 f6 47 00
>381f68	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT       .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>381f70	00 f9 69 00
>381f74	00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_AC      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>381f7c	00 f7 a9 00
>381f80	00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP          .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>381f88	00 87 fa 00
>381f8c	00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_EL      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>381f94	00 f7 a9 00
>381f98	00 06 0a fa 1f 0c 00 11		DRUMINS_LO_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>381fa0	00 f5 f5 00
>381fa4	00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_CL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>381fac	06 b8 d8 03
>381fb0	00 06 0a fa 1f 0c 00 11		DRUMINS_HI_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>381fb8	00 f5 f5 00
>381fbc	00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_PL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>381fc4	06 b8 d8 03
>381fc8	00 06 0a fa 1f 0c 00 11		DRUMINS_LOW_TOM       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>381fd0	00 f5 f5 00
>381fd4	00 2e 00 82 f6 05 00 04		DRUMINS_HIHAT_OP      .text $00, $2E, $00, $82, $F6, $05, $00, $04, $10, $74, $F8, $03
>381fdc	10 74 f8 03
>381fe0	00 06 0a fa 1f 0c 00 11		DRUMINS_LTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>381fe8	00 f5 f5 00
>381fec	00 06 0a fa 1f 0c 00 11		DRUMINS_HTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>381ff4	00 f5 f5 00
>381ff8	00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH         .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>382000	05 c5 d4 03
>382004	00 06 0a fa 1f 0c 00 11		DRUMINS_TOM_HIGH      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>38200c	00 f5 f5 00
>382010	00 29 10 94 00 0f 00 04		DRUMINS_RIDE_CY       .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>382018	04 f9 44 03
>38201c	00 2c 00 9f 00 0f 02 0e		DRUMINS_TAMBOUR       .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>382024	05 c5 d4 03
>382028	00 29 10 94 00 0f 00 04		DRUMINS_CYMBAL        .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>382030	04 f9 44 03
>382034	00 2e 09 f5 f1 01 00 06		DRUMINS_TAMBOU2       .text $00, $2E, $09, $F5, $F1, $01, $00, $06, $03, $87, $F7, $03
>38203c	03 87 f7 03
>382040	00 2c 00 9f 00 0f 02 0e		DRUMINS_SPLASH        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>382048	05 c5 d4 03
>38204c	00 37 14 f7 a1 09 01 03		DRUMINS_COWBELL       .text $00, $37, $14, $F7, $A1, $09, $01, $03, $00, $F6, $28, $00
>382054	00 f6 28 00
>382058	00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH2        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>382060	05 c5 d4 03
>382064	00 80 00 ff 00 0d 01 00		DRUMINS_VIBRASLA      .text $00, $80, $00, $FF, $00, $0D, $01, $00, $00, $F5, $F7, $01
>38206c	00 f5 f7 01
>382070	00 29 10 94 00 0f 00 04		DRUMINS_RIDE2         .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>382078	04 f9 44 03
>38207c	00 25 c4 fa fa 01 00 03		DRUMINS_HI_BONGO      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>382084	00 99 f9 00
>382088	00 21 03 fb fa 01 01 02		DRUMINS_LO_BONGO      .text $00, $21, $03, $FB, $FA, $01, $01, $02, $00, $A8, $F7, $00
>382090	00 a8 f7 00
>382094	00 25 c4 fa fa 01 00 03		DRUMINS_MUTECONG      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>38209c	00 99 f9 00
>3820a0	00 24 18 f9 fa 0f 02 03		DRUMINS_OPENCONG      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>3820a8	00 a6 f6 00
>3820ac	00 24 18 f9 fa 0f 02 03		DRUMINS_LOWCONGA      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>3820b4	00 a6 f6 00
>3820b8	00 05 14 f5 f5 07 02 03		DRUMINS_HI_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>3820c0	00 f6 36 02
>3820c4	00 05 14 f5 f5 07 02 03		DRUMINS_LO_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>3820cc	00 f6 36 02
>3820d0	00 1c 0c f9 31 0f 01 15		DRUMINS_HI_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>3820d8	00 96 e8 01
>3820dc	00 1c 0c f9 31 0f 01 15		DRUMINS_LO_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>3820e4	00 96 e8 01
>3820e8	00 0e 00 ff 01 0f 00 0e		DRUMINS_CABASA        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>3820f0	02 79 77 03
>3820f4	00 0e 00 ff 01 0f 00 0e		DRUMINS_MARACAS       .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>3820fc	02 79 77 03
>382100	00 20 15 af 07 05 01 0e		DRUMINS_S_WHISTL      .text $00, $20, $15, $AF, $07, $05, $01, $0E, $00, $A5, $2B, $02
>382108	00 a5 2b 02
>38210c	00 20 18 bf 07 01 01 0e		DRUMINS_L_WHISTL      .text $00, $20, $18, $BF, $07, $01, $01, $0E, $00, $93, $3B, $02
>382114	00 93 3b 02
>382118	00 20 00 f0 f7 0b 00 08		DRUMINS_S_GUIRO       .text $00, $20, $00, $F0, $F7, $0B, $00, $08, $01, $89, $3B, $03
>382120	01 89 3b 03
>382124	00 20 00 f3 fa 09 00 08		DRUMINS_L_GUIRO       .text $00, $20, $00, $F3, $FA, $09, $00, $08, $0A, $53, $2B, $02
>38212c	0a 53 2b 02
>382130	00 15 21 f8 9a 09 01 13		DRUMINS_CLAVES        .text $00, $15, $21, $F8, $9A, $09, $01, $13, $00, $F6, $89, $00
>382138	00 f6 89 00
>38213c	00 25 1b fa f2 01 00 12		DRUMINS_HI_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>382144	00 f6 9a 00
>382148	00 25 1b fa f2 01 00 12		DRUMINS_LO_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>382150	00 f6 9a 00
>382154	00 20 01 5f 07 01 00 08		DRUMINS_MU_CUICA      .text $00, $20, $01, $5F, $07, $01, $00, $08, $00, $87, $4B, $01
>38215c	00 87 4b 01
>382160	00 25 12 57 f7 01 01 03		DRUMINS_OP_CUICA      .text $00, $25, $12, $57, $F7, $01, $01, $03, $00, $78, $67, $01
>382168	00 78 67 01
>38216c	00 22 2f f1 f0 07 00 27		DRUMINS_MU_TRNGL      .text $00, $22, $2F, $F1, $F0, $07, $00, $27, $02, $F8, $FC, $00
>382174	02 f8 fc 00
>382178	00 26 44 f1 f0 07 00 27		DRUMINS_OP_TRNGL      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>382180	40 f5 f5 00
>382184	00 0e 00 ff 01 0f 00 0e		DRUMINS_SHAKER        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>38218c	02 79 77 03
>382190	00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL1      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>382198	40 f5 f5 00
>38219c	00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL2      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>3821a4	40 f5 f5 00
>3821a8	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT3      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>3821b0	00 f9 69 00
>3821b4	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT4      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>3821bc	00 f9 69 00
>3821c0	00 02 1d f5 93 01 00 00		DRUMINS_TAIKO         .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>3821c8	00 c6 45 00
=27					DRUM_NOTE_BASE = 27;
=60					NUM_MIDI_DRUMS = 60;
>3821cc	fc 1e 38 00 08 1f 38 00		midiDrums     .dword DRUMINS_CLAP2, DRUMINS_SCRATCH1, DRUMINS_SCRATCH2, DRUMINS_RIMSHOT2
>3821d4	14 1f 38 00 20 1f 38 00
>3821dc	2c 1f 38 00 38 1f 38 00		              .dword DRUMINS_HIQ, DRUMINS_WOODBLOK, DRUMINS_GLOCK, DRUMINS_BASS_DR2
>3821e4	44 1f 38 00 50 1f 38 00
>3821ec	5c 1f 38 00 68 1f 38 00		              .dword DRUMINS_BASS_DR1, DRUMINS_RIMSHOT,  DRUMINS_SNARE_AC, DRUMINS_CLAP
>3821f4	74 1f 38 00 80 1f 38 00
>3821fc	8c 1f 38 00 98 1f 38 00		              .dword DRUMINS_SNARE_EL, DRUMINS_LO_TOMS,  DRUMINS_HIHAT_CL, DRUMINS_HI_TOMS
>382204	a4 1f 38 00 b0 1f 38 00
>38220c	bc 1f 38 00 c8 1f 38 00		              .dword DRUMINS_HIHAT_PL, DRUMINS_LOW_TOM,	DRUMINS_HIHAT_OP, DRUMINS_LTOM_MID
>382214	d4 1f 38 00 e0 1f 38 00
>38221c	ec 1f 38 00 f8 1f 38 00		              .dword DRUMINS_HTOM_MID, DRUMINS_CRASH,    DRUMINS_TOM_HIGH, DRUMINS_RIDE_CY
>382224	04 20 38 00 10 20 38 00
>38222c	1c 20 38 00 28 20 38 00		              .dword DRUMINS_TAMBOUR,  DRUMINS_CYMBAL,   DRUMINS_TAMBOU2,  DRUMINS_SPLASH
>382234	34 20 38 00 40 20 38 00
>38223c	4c 20 38 00 58 20 38 00		              .dword DRUMINS_COWBELL,  DRUMINS_CRASH2, 	DRUMINS_VIBRASLA, DRUMINS_RIDE2
>382244	64 20 38 00 70 20 38 00
>38224c	7c 20 38 00 88 20 38 00		              .dword DRUMINS_HI_BONGO, DRUMINS_LO_BONGO, DRUMINS_MUTECONG, DRUMINS_OPENCONG
>382254	94 20 38 00 a0 20 38 00
>38225c	ac 20 38 00 b8 20 38 00		              .dword DRUMINS_LOWCONGA, DRUMINS_HI_TIMBA, DRUMINS_LO_TIMBA, DRUMINS_HI_AGOGO
>382264	c4 20 38 00 d0 20 38 00
>38226c	dc 20 38 00 e8 20 38 00		              .dword DRUMINS_LO_AGOGO, DRUMINS_CABASA, DRUMINS_MARACAS,  DRUMINS_S_WHISTL
>382274	f4 20 38 00 00 21 38 00
>38227c	0c 21 38 00 18 21 38 00		              .dword DRUMINS_L_WHISTL, DRUMINS_S_GUIRO,  DRUMINS_L_GUIRO,  DRUMINS_CLAVES
>382284	24 21 38 00 30 21 38 00
>38228c	3c 21 38 00 48 21 38 00		              .dword DRUMINS_HI_WDBLK, DRUMINS_LO_WDBLK, DRUMINS_MU_CUICA, DRUMINS_OP_CUICA
>382294	54 21 38 00 60 21 38 00
>38229c	6c 21 38 00 78 21 38 00		              .dword DRUMINS_MU_TRNGL, DRUMINS_OP_TRNGL, DRUMINS_SHAKER, DRUMINS_TRIANGL1
>3822a4	84 21 38 00 90 21 38 00
>3822ac	9c 21 38 00 a8 21 38 00		              .dword DRUMINS_TRIANGL2, DRUMINS_RIMSHOT3, DRUMINS_RIMSHOT4, DRUMINS_TAIKO
>3822b4	b4 21 38 00 c0 21 38 00

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Instruments.asm

>3822bc	00 33 5a b2 50 01 00 31		MIDI_INSTRUMENT_PIANO1     .text $00, $33, $5A, $B2, $50, $01, $00, $31, $00, $B1, $F5, $01
>3822c4	00 b1 f5 01
>3822c8	00 31 49 f2 53 07 01 11		MIDI_INSTRUMENT_PIANO2     .text $00, $31, $49, $F2, $53, $07, $01, $11, $03, $F1, $F5, $00
>3822d0	03 f1 f5 00
>3822d4	00 31 95 d1 83 0d 01 32		MIDI_INSTRUMENT_PIANO3     .text $00, $31, $95, $D1, $83, $0D, $01, $32, $03, $C1, $F5, $00
>3822dc	03 c1 f5 00
>3822e0	00 34 9b f3 63 01 01 11		MIDI_INSTRUMENT_HONKTONK   .text $00, $34, $9B, $F3, $63, $01, $01, $11, $00, $92, $F5, $01
>3822e8	00 92 f5 01
>3822ec	00 27 28 f8 b7 01 02 91		MIDI_INSTRUMENT_EP1        .text $00, $27, $28, $F8, $B7, $01, $02, $91, $00, $F1, $F9, $00
>3822f4	00 f1 f9 00
>3822f8	00 1a 2d f3 ee 01 01 11		MIDI_INSTRUMENT_EP2        .text $00, $1A, $2D, $F3, $EE, $01, $01, $11, $00, $F1, $F5, $00
>382300	00 f1 f5 00
>382304	00 35 95 f2 58 0f 01 32		MIDI_INSTRUMENT_HARPSIC    .text $00, $35, $95, $F2, $58, $0F, $01, $32, $02, $81, $F6, $01
>38230c	02 81 f6 01
>382310	00 31 85 c9 40 01 00 35		MIDI_INSTRUMENT_CLAVIC     .text $00, $31, $85, $C9, $40, $01, $00, $35, $00, $C2, $B9, $01
>382318	00 c2 b9 01
>38231c	00 09 15 c7 64 08 00 01		MIDI_INSTRUMENT_CELESTA    .text $00, $09, $15, $C7, $64, $08, $00, $01, $05, $B2, $35, $00
>382324	05 b2 35 00
>382328	00 06 03 f4 44 00 01 01		MIDI_INSTRUMENT_GLOCK      .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>382330	1b f2 34 00
>382334	00 04 06 a9 24 0a 01 01		MIDI_INSTRUMENT_MUSICBOX   .text $00, $04, $06, $A9, $24, $0A, $01, $01, $01, $F5, $74, $00
>38233c	01 f5 74 00
>382340	00 d4 00 f6 33 00 00 f1		MIDI_INSTRUMENT_VIBES      .text $00, $D4, $00, $F6, $33, $00, $00, $F1, $00, $61, $E3, $00
>382348	00 61 e3 00
>38234c	00 d4 00 f7 e8 04 00 d1		MIDI_INSTRUMENT_MARIMBA    .text $00, $D4, $00, $F7, $E8, $04, $00, $D1, $00, $A4, $64, $00
>382354	00 a4 64 00
>382358	00 36 16 f7 f7 01 00 31		MIDI_INSTRUMENT_XYLO       .text $00, $36, $16, $F7, $F7, $01, $00, $31, $07, $B5, $F5, $00
>382360	07 b5 f5 00
>382364	00 03 1b a2 43 0b 00 00		MIDI_INSTRUMENT_TUBEBELL   .text $00, $03, $1B, $A2, $43, $0B, $00, $00, $00, $F3, $74, $00
>38236c	00 f3 74 00
>382370	00 c3 8e f8 35 01 01 11		MIDI_INSTRUMENT_SANTUR     .text $00, $C3, $8E, $F8, $35, $01, $01, $11, $00, $C3, $94, $01
>382378	00 c3 94 01
>38237c	00 e2 07 f4 1b 06 01 e0		MIDI_INSTRUMENT_ORGAN1     .text $00, $E2, $07, $F4, $1B, $06, $01, $E0, $00, $F4, $0D, $01
>382384	00 f4 0d 01
>382388	00 f2 00 f6 2c 04 00 f0		MIDI_INSTRUMENT_ORGAN2     .text $00, $F2, $00, $F6, $2C, $04, $00, $F0, $00, $F5, $0B, $01
>382390	00 f5 0b 01
>382394	00 f1 06 b6 15 0a 00 f0		MIDI_INSTRUMENT_ORGAN3     .text $00, $F1, $06, $B6, $15, $0A, $00, $F0, $00, $BF, $07, $00
>38239c	00 bf 07 00
>3823a0	00 22 03 79 16 08 01 e0		MIDI_INSTRUMENT_PIPEORG    .text $00, $22, $03, $79, $16, $08, $01, $E0, $00, $6D, $08, $01
>3823a8	00 6d 08 01
>3823ac	00 31 27 63 06 01 00 72		MIDI_INSTRUMENT_REEDORG    .text $00, $31, $27, $63, $06, $01, $00, $72, $00, $51, $17, $01
>3823b4	00 51 17 01
>3823b8	00 b4 1d 53 16 0f 01 71		MIDI_INSTRUMENT_ACORDIAN   .text $00, $B4, $1D, $53, $16, $0F, $01, $71, $00, $51, $17, $01
>3823c0	00 51 17 01
>3823c4	00 25 29 97 15 01 00 32		MIDI_INSTRUMENT_HARMONIC   .text $00, $25, $29, $97, $15, $01, $00, $32, $00, $53, $08, $01
>3823cc	00 53 08 01
>3823d0	00 24 9e 67 15 0f 00 31		MIDI_INSTRUMENT_BANDNEON   .text $00, $24, $9E, $67, $15, $0F, $00, $31, $00, $53, $06, $01
>3823d8	00 53 06 01
>3823dc	00 13 27 a3 b4 05 01 31		MIDI_INSTRUMENT_NYLONGT    .text $00, $13, $27, $A3, $B4, $05, $01, $31, $00, $D2, $F8, $00
>3823e4	00 d2 f8 00
>3823e8	00 17 a3 f3 32 01 00 11		MIDI_INSTRUMENT_STEELGT    .text $00, $17, $A3, $F3, $32, $01, $00, $11, $00, $E2, $C7, $01
>3823f0	00 e2 c7 01
>3823f4	00 33 24 d2 c1 0f 01 31		MIDI_INSTRUMENT_JAZZGT     .text $00, $33, $24, $D2, $C1, $0F, $01, $31, $00, $F1, $9C, $00
>3823fc	00 f1 9c 00
>382400	00 31 05 f8 44 01 00 32		MIDI_INSTRUMENT_CLEANGT    .text $00, $31, $05, $F8, $44, $01, $00, $32, $02, $F2, $C9, $01
>382408	02 f2 c9 01
>38240c	00 21 09 9c 7b 07 00 02		MIDI_INSTRUMENT_MUTEGT     .text $00, $21, $09, $9C, $7B, $07, $00, $02, $03, $95, $FB, $00
>382414	03 95 fb 00
>382418	00 21 84 81 98 07 01 21		MIDI_INSTRUMENT_OVERDGT    .text $00, $21, $84, $81, $98, $07, $01, $21, $04, $A1, $59, $00
>382420	04 a1 59 00
>382424	00 b1 0c 78 43 01 00 22		MIDI_INSTRUMENT_DISTGT     .text $00, $B1, $0C, $78, $43, $01, $00, $22, $03, $91, $FC, $03
>38242c	03 91 fc 03
>382430	00 00 0a 82 8c 09 00 08		MIDI_INSTRUMENT_GTHARMS    .text $00, $00, $0A, $82, $8C, $09, $00, $08, $02, $B4, $EC, $00
>382438	02 b4 ec 00
>38243c	00 21 13 ab 46 01 00 21		MIDI_INSTRUMENT_ACOUBASS   .text $00, $21, $13, $AB, $46, $01, $00, $21, $00, $93, $F7, $00
>382444	00 93 f7 00
>382448	00 01 0a f9 32 01 00 22		MIDI_INSTRUMENT_FINGBASS   .text $00, $01, $0A, $F9, $32, $01, $00, $22, $04, $C1, $58, $00
>382450	04 c1 58 00
>382454	00 21 07 fa 77 0b 00 22		MIDI_INSTRUMENT_PICKBASS   .text $00, $21, $07, $FA, $77, $0B, $00, $22, $02, $C3, $6A, $00
>38245c	02 c3 6a 00
>382460	00 21 17 71 57 0b 00 21		MIDI_INSTRUMENT_FRETLESS   .text $00, $21, $17, $71, $57, $0B, $00, $21, $00, $62, $87, $00
>382468	00 62 87 00
>38246c	00 25 01 fa 78 07 01 12		MIDI_INSTRUMENT_SLAPBAS1   .text $00, $25, $01, $FA, $78, $07, $01, $12, $00, $F3, $97, $00
>382474	00 f3 97 00
>382478	00 21 03 fa 88 0d 00 13		MIDI_INSTRUMENT_SLAPBAS2   .text $00, $21, $03, $FA, $88, $0D, $00, $13, $00, $B3, $97, $00
>382480	00 b3 97 00
>382484	00 21 09 f5 7f 09 01 23		MIDI_INSTRUMENT_SYNBASS1   .text $00, $21, $09, $F5, $7F, $09, $01, $23, $04, $F3, $CC, $00
>38248c	04 f3 cc 00
>382490	00 01 10 a3 9b 09 00 01		MIDI_INSTRUMENT_SYNBASS2   .text $00, $01, $10, $A3, $9B, $09, $00, $01, $00, $93, $AA, $00
>382498	00 93 aa 00
>38249c	00 e2 19 f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLIN     .text $00, $E2, $19, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>3824a4	00 78 08 01
>3824a8	00 e2 1c f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLA      .text $00, $E2, $1C, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>3824b0	00 78 08 01
>3824b4	00 61 19 69 16 0b 01 61		MIDI_INSTRUMENT_CELLO      .text $00, $61, $19, $69, $16, $0B, $01, $61, $00, $54, $27, $01
>3824bc	00 54 27 01
>3824c0	00 71 18 82 31 0d 01 32		MIDI_INSTRUMENT_CONTRAB    .text $00, $71, $18, $82, $31, $0D, $01, $32, $00, $61, $56, $00
>3824c8	00 61 56 00
>3824cc	00 e2 23 70 06 0d 01 e1		MIDI_INSTRUMENT_TREMSTR    .text $00, $E2, $23, $70, $06, $0D, $01, $E1, $00, $75, $16, $01
>3824d4	00 75 16 01
>3824d8	00 02 00 88 e6 08 00 61		MIDI_INSTRUMENT_PIZZ       .text $00, $02, $00, $88, $E6, $08, $00, $61, $00, $F5, $F6, $01
>3824e0	00 f5 f6 01
>3824e4	00 12 20 f6 d5 0f 01 11		MIDI_INSTRUMENT_HARP       .text $00, $12, $20, $F6, $D5, $0F, $01, $11, $80, $F3, $E3, $00
>3824ec	80 f3 e3 00
>3824f0	00 61 0e f4 f4 01 01 00		MIDI_INSTRUMENT_TIMPANI    .text $00, $61, $0E, $F4, $F4, $01, $01, $00, $00, $B5, $F5, $00
>3824f8	00 b5 f5 00
>3824fc	00 61 1e 9c 04 0f 01 21		MIDI_INSTRUMENT_STRINGS    .text $00, $61, $1E, $9C, $04, $0F, $01, $21, $80, $71, $16, $00
>382504	80 71 16 00
>382508	00 a2 2a c0 d6 0f 02 21		MIDI_INSTRUMENT_SLOWSTR    .text $00, $A2, $2A, $C0, $D6, $0F, $02, $21, $00, $30, $55, $01
>382510	00 30 55 01
>382514	00 61 21 72 35 0f 01 61		MIDI_INSTRUMENT_SYNSTR1    .text $00, $61, $21, $72, $35, $0F, $01, $61, $00, $62, $36, $01
>38251c	00 62 36 01
>382520	00 21 1a 72 23 0f 01 21		MIDI_INSTRUMENT_SYNSTR2    .text $00, $21, $1A, $72, $23, $0F, $01, $21, $02, $51, $07, $00
>382528	02 51 07 00
>38252c	00 e1 16 97 31 09 00 61		MIDI_INSTRUMENT_CHOIR      .text $00, $E1, $16, $97, $31, $09, $00, $61, $00, $62, $39, $00
>382534	00 62 39 00
>382538	00 22 c3 79 45 01 00 21		MIDI_INSTRUMENT_OOHS       .text $00, $22, $C3, $79, $45, $01, $00, $21, $00, $66, $27, $00
>382540	00 66 27 00
>382544	00 21 de 63 55 01 01 21		MIDI_INSTRUMENT_SYNVOX     .text $00, $21, $DE, $63, $55, $01, $01, $21, $00, $73, $46, $00
>38254c	00 73 46 00
>382550	00 42 05 86 f7 0a 00 50		MIDI_INSTRUMENT_ORCHIT     .text $00, $42, $05, $86, $F7, $0A, $00, $50, $00, $74, $76, $01
>382558	00 74 76 01
>38255c	00 31 1c 61 02 0f 00 61		MIDI_INSTRUMENT_TRUMPET    .text $00, $31, $1C, $61, $02, $0F, $00, $61, $81, $92, $38, $00
>382564	81 92 38 00
>382568	00 71 1e 52 23 0f 00 61		MIDI_INSTRUMENT_TROMBONE   .text $00, $71, $1E, $52, $23, $0F, $00, $61, $02, $71, $19, $00
>382570	02 71 19 00
>382574	00 21 1a 76 16 0f 00 21		MIDI_INSTRUMENT_TUBA       .text $00, $21, $1A, $76, $16, $0F, $00, $21, $01, $81, $09, $00
>38257c	01 81 09 00
>382580	00 25 28 89 2c 07 02 20		MIDI_INSTRUMENT_MUTETRP    .text $00, $25, $28, $89, $2C, $07, $02, $20, $00, $83, $4B, $02
>382588	00 83 4b 02
>38258c	00 21 1f 79 16 09 00 a2		MIDI_INSTRUMENT_FRHORN     .text $00, $21, $1F, $79, $16, $09, $00, $A2, $05, $71, $59, $00
>382594	05 71 59 00
>382598	00 21 19 87 16 0f 00 21		MIDI_INSTRUMENT_BRASS1     .text $00, $21, $19, $87, $16, $0F, $00, $21, $03, $82, $39, $00
>3825a0	03 82 39 00
>3825a4	00 21 17 75 35 0f 00 22		MIDI_INSTRUMENT_SYNBRAS1   .text $00, $21, $17, $75, $35, $0F, $00, $22, $82, $84, $17, $00
>3825ac	82 84 17 00
>3825b0	00 21 22 62 58 0f 00 21		MIDI_INSTRUMENT_SYNBRAS2   .text $00, $21, $22, $62, $58, $0F, $00, $21, $02, $72, $16, $00
>3825b8	02 72 16 00
>3825bc	00 b1 1b 59 07 01 01 a1		MIDI_INSTRUMENT_SOPSAX     .text $00, $B1, $1B, $59, $07, $01, $01, $A1, $00, $7B, $0A, $00
>3825c4	00 7b 0a 00
>3825c8	00 21 16 9f 04 0b 00 21		MIDI_INSTRUMENT_ALTOSAX    .text $00, $21, $16, $9F, $04, $0B, $00, $21, $00, $85, $0C, $01
>3825d0	00 85 0c 01
>3825d4	00 21 0f a8 20 0d 00 23		MIDI_INSTRUMENT_TENSAX     .text $00, $21, $0F, $A8, $20, $0D, $00, $23, $00, $7B, $0A, $01
>3825dc	00 7b 0a 01
>3825e0	00 21 0f 88 04 09 00 26		MIDI_INSTRUMENT_BARISAX    .text $00, $21, $0F, $88, $04, $09, $00, $26, $00, $79, $18, $01
>3825e8	00 79 18 01
>3825ec	00 31 18 8f 05 01 00 32		MIDI_INSTRUMENT_OBOE       .text $00, $31, $18, $8F, $05, $01, $00, $32, $01, $73, $08, $00
>3825f4	01 73 08 00
>3825f8	00 a1 0a 8c 37 01 01 24		MIDI_INSTRUMENT_ENGLHORN   .text $00, $A1, $0A, $8C, $37, $01, $01, $24, $04, $77, $0A, $00
>382600	04 77 0a 00
>382604	00 31 04 a8 67 0b 00 75		MIDI_INSTRUMENT_BASSOON    .text $00, $31, $04, $A8, $67, $0B, $00, $75, $00, $51, $19, $00
>38260c	00 51 19 00
>382610	00 a2 1f 77 26 01 01 21		MIDI_INSTRUMENT_CLARINET   .text $00, $A2, $1F, $77, $26, $01, $01, $21, $01, $74, $09, $00
>382618	01 74 09 00
>38261c	00 e1 07 b8 94 01 01 21		MIDI_INSTRUMENT_PICCOLO    .text $00, $E1, $07, $B8, $94, $01, $01, $21, $01, $63, $28, $00
>382624	01 63 28 00
>382628	00 a1 93 87 59 01 00 e1		MIDI_INSTRUMENT_FLUTE1     .text $00, $A1, $93, $87, $59, $01, $00, $E1, $00, $65, $0A, $00
>382630	00 65 0a 00
>382634	00 22 10 9f 38 01 00 61		MIDI_INSTRUMENT_RECORDER   .text $00, $22, $10, $9F, $38, $01, $00, $61, $00, $67, $29, $00
>38263c	00 67 29 00
>382640	00 e2 0d 88 9a 01 01 21		MIDI_INSTRUMENT_PANFLUTE   .text $00, $E2, $0D, $88, $9A, $01, $01, $21, $00, $67, $09, $00
>382648	00 67 09 00
>38264c	00 a2 10 98 94 0f 00 21		MIDI_INSTRUMENT_BOTTLEB    .text $00, $A2, $10, $98, $94, $0F, $00, $21, $01, $6A, $28, $00
>382654	01 6a 28 00
>382658	00 f1 1c 86 26 0f 00 f1		MIDI_INSTRUMENT_SHAKU      .text $00, $F1, $1C, $86, $26, $0F, $00, $F1, $00, $55, $27, $00
>382660	00 55 27 00
>382664	00 e1 3f 9f 09 00 00 e1		MIDI_INSTRUMENT_WHISTLE    .text $00, $E1, $3F, $9F, $09, $00, $00, $E1, $00, $6F, $08, $00
>38266c	00 6f 08 00
>382670	00 e2 3b f7 19 01 00 21		MIDI_INSTRUMENT_OCARINA    .text $00, $E2, $3B, $F7, $19, $01, $00, $21, $00, $7A, $07, $00
>382678	00 7a 07 00
>38267c	00 22 1e 92 0c 0f 00 61		MIDI_INSTRUMENT_SQUARWAV   .text $00, $22, $1E, $92, $0C, $0F, $00, $61, $06, $A2, $0D, $00
>382684	06 a2 0d 00
>382688	00 21 15 f4 22 0f 01 21		MIDI_INSTRUMENT_SAWWAV     .text $00, $21, $15, $F4, $22, $0F, $01, $21, $00, $A3, $5F, $00
>382690	00 a3 5f 00
>382694	00 f2 20 47 66 03 01 f1		MIDI_INSTRUMENT_SYNCALLI   .text $00, $F2, $20, $47, $66, $03, $01, $F1, $00, $42, $27, $00
>38269c	00 42 27 00
>3826a0	00 61 19 88 28 0f 00 61		MIDI_INSTRUMENT_CHIFLEAD   .text $00, $61, $19, $88, $28, $0F, $00, $61, $05, $B2, $49, $00
>3826a8	05 b2 49 00
>3826ac	00 21 16 82 1b 01 00 23		MIDI_INSTRUMENT_CHARANG    .text $00, $21, $16, $82, $1B, $01, $00, $23, $00, $B2, $79, $01
>3826b4	00 b2 79 01
>3826b8	00 21 00 ca 93 01 00 22		MIDI_INSTRUMENT_SOLOVOX    .text $00, $21, $00, $CA, $93, $01, $00, $22, $00, $7A, $1A, $00
>3826c0	00 7a 1a 00
>3826c4	00 23 00 92 c9 08 01 22		MIDI_INSTRUMENT_FIFTHSAW   .text $00, $23, $00, $92, $C9, $08, $01, $22, $00, $82, $28, $01
>3826cc	00 82 28 01
>3826d0	00 21 1d f3 7b 0f 00 22		MIDI_INSTRUMENT_BASSLEAD   .text $00, $21, $1D, $F3, $7B, $0F, $00, $22, $02, $C3, $5F, $00
>3826d8	02 c3 5f 00
>3826dc	00 e1 00 81 25 00 01 a6		MIDI_INSTRUMENT_FANTASIA   .text $00, $E1, $00, $81, $25, $00, $01, $A6, $86, $C4, $95, $01
>3826e4	86 c4 95 01
>3826e8	00 21 27 31 01 0f 00 21		MIDI_INSTRUMENT_WARMPAD    .text $00, $21, $27, $31, $01, $0F, $00, $21, $00, $44, $15, $00
>3826f0	00 44 15 00
>3826f4	00 60 14 83 35 0d 02 61		MIDI_INSTRUMENT_POLYSYN    .text $00, $60, $14, $83, $35, $0D, $02, $61, $00, $D1, $06, $00
>3826fc	00 d1 06 00
>382700	00 e1 5c d3 01 01 01 62		MIDI_INSTRUMENT_SPACEVOX   .text $00, $E1, $5C, $D3, $01, $01, $01, $62, $00, $82, $37, $00
>382708	00 82 37 00
>38270c	00 28 38 34 86 01 02 21		MIDI_INSTRUMENT_BOWEDGLS   .text $00, $28, $38, $34, $86, $01, $02, $21, $00, $41, $35, $00
>382714	00 41 35 00
>382718	00 24 12 52 f3 05 01 23		MIDI_INSTRUMENT_METALPAD   .text $00, $24, $12, $52, $F3, $05, $01, $23, $02, $32, $F5, $01
>382720	02 32 f5 01
>382724	00 61 1d 62 a6 0b 00 a1		MIDI_INSTRUMENT_HALOPAD    .text $00, $61, $1D, $62, $A6, $0B, $00, $A1, $00, $61, $26, $00
>38272c	00 61 26 00
>382730	00 22 0f 22 d5 0b 01 21		MIDI_INSTRUMENT_SWEEPPAD   .text $00, $22, $0F, $22, $D5, $0B, $01, $21, $84, $3F, $05, $01
>382738	84 3f 05 01
>38273c	00 e3 1f f9 24 01 00 31		MIDI_INSTRUMENT_ICERAIN    .text $00, $E3, $1F, $F9, $24, $01, $00, $31, $01, $D1, $F6, $00
>382744	01 d1 f6 00
>382748	00 63 00 41 55 06 01 a2		MIDI_INSTRUMENT_SOUNDTRK   .text $00, $63, $00, $41, $55, $06, $01, $A2, $00, $41, $05, $01
>382750	00 41 05 01
>382754	00 c7 25 a7 65 01 01 c1		MIDI_INSTRUMENT_CRYSTAL    .text $00, $C7, $25, $A7, $65, $01, $01, $C1, $05, $F3, $E4, $00
>38275c	05 f3 e4 00
>382760	00 e3 19 f7 b7 01 01 61		MIDI_INSTRUMENT_ATMOSPH    .text $00, $E3, $19, $F7, $B7, $01, $01, $61, $00, $92, $F5, $01
>382768	00 92 f5 01
>38276c	00 66 9b a8 44 0f 00 41		MIDI_INSTRUMENT_BRIGHT     .text $00, $66, $9B, $A8, $44, $0F, $00, $41, $04, $F2, $E4, $01
>382774	04 f2 e4 01
>382778	00 61 20 22 75 0d 00 61		MIDI_INSTRUMENT_GOBLIN     .text $00, $61, $20, $22, $75, $0D, $00, $61, $00, $45, $25, $00
>382780	00 45 25 00
>382784	00 e1 21 f6 84 0f 00 e1		MIDI_INSTRUMENT_ECHODROP   .text $00, $E1, $21, $F6, $84, $0F, $00, $E1, $01, $A3, $36, $00
>38278c	01 a3 36 00
>382790	00 e2 14 73 64 0b 01 e1		MIDI_INSTRUMENT_STARTHEM   .text $00, $E2, $14, $73, $64, $0B, $01, $E1, $01, $98, $05, $01
>382798	01 98 05 01
>38279c	00 21 0b 72 34 09 00 24		MIDI_INSTRUMENT_SITAR      .text $00, $21, $0B, $72, $34, $09, $00, $24, $02, $A3, $F6, $01
>3827a4	02 a3 f6 01
>3827a8	00 21 16 f4 53 0d 00 04		MIDI_INSTRUMENT_BANJO      .text $00, $21, $16, $F4, $53, $0D, $00, $04, $00, $F6, $F8, $00
>3827b0	00 f6 f8 00
>3827b4	00 21 18 da 02 0d 00 35		MIDI_INSTRUMENT_SHAMISEN   .text $00, $21, $18, $DA, $02, $0D, $00, $35, $00, $F3, $F5, $00
>3827bc	00 f3 f5 00
>3827c0	00 25 0f fa 63 09 00 02		MIDI_INSTRUMENT_KOTO       .text $00, $25, $0F, $FA, $63, $09, $00, $02, $00, $94, $E5, $01
>3827c8	00 94 e5 01
>3827cc	00 32 07 f9 96 01 00 11		MIDI_INSTRUMENT_KALIMBA    .text $00, $32, $07, $F9, $96, $01, $00, $11, $00, $84, $44, $00
>3827d4	00 84 44 00
>3827d8	00 20 0e 97 18 09 02 25		MIDI_INSTRUMENT_BAGPIPE    .text $00, $20, $0E, $97, $18, $09, $02, $25, $03, $83, $18, $01
>3827e0	03 83 18 01
>3827e4	00 61 18 f6 29 01 00 62		MIDI_INSTRUMENT_FIDDLE     .text $00, $61, $18, $F6, $29, $01, $00, $62, $01, $78, $08, $01
>3827ec	01 78 08 01
>3827f0	00 e6 21 76 19 0b 00 61		MIDI_INSTRUMENT_SHANNAI    .text $00, $E6, $21, $76, $19, $0B, $00, $61, $03, $8E, $08, $01
>3827f8	03 8e 08 01
>3827fc	00 27 23 f0 d4 01 00 05		MIDI_INSTRUMENT_TINKLBEL   .text $00, $27, $23, $F0, $D4, $01, $00, $05, $09, $F2, $46, $00
>382804	09 f2 46 00
>382808	00 1c 0c f9 31 0f 01 15		MIDI_INSTRUMENT_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>382810	00 96 e8 01
>382814	00 02 00 75 16 06 02 01		MIDI_INSTRUMENT_STEELDRM   .text $00, $02, $00, $75, $16, $06, $02, $01, $00, $F6, $F6, $01
>38281c	00 f6 f6 01
>382820	00 25 1b fa f2 01 00 12		MIDI_INSTRUMENT_WOODBLOK   .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>382828	00 f6 9a 00
>38282c	00 02 1d f5 93 01 00 00		MIDI_INSTRUMENT_TAIKO      .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>382834	00 c6 45 00
>382838	00 11 15 f5 32 05 00 10		MIDI_INSTRUMENT_MELOTOM    .text $00, $11, $15, $F5, $32, $05, $00, $10, $00, $F4, $B4, $00
>382840	00 f4 b4 00
>382844	00 22 06 fa 99 09 00 01		MIDI_INSTRUMENT_SYNDRUM    .text $00, $22, $06, $FA, $99, $09, $00, $01, $00, $D5, $25, $00
>38284c	00 d5 25 00
>382850	00 2e 00 ff 00 0f 02 0e		MIDI_INSTRUMENT_REVRSCYM   .text $00, $2E, $00, $FF, $00, $0F, $02, $0E, $0E, $21, $2D, $00
>382858	0e 21 2d 00
>38285c	00 30 0b 56 e4 01 01 17		MIDI_INSTRUMENT_FRETNOIS   .text $00, $30, $0B, $56, $E4, $01, $01, $17, $00, $55, $87, $02
>382864	00 55 87 02
>382868	00 24 00 ff 03 0d 00 05		MIDI_INSTRUMENT_BRTHNOIS   .text $00, $24, $00, $FF, $03, $0D, $00, $05, $08, $98, $87, $01
>382870	08 98 87 01
>382874	00 0e 00 f0 00 0f 02 0a		MIDI_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F0, $00, $0F, $02, $0A, $04, $17, $04, $03
>38287c	04 17 04 03
>382880	00 20 08 f6 f7 01 00 0e		MIDI_INSTRUMENT_BIRDS      .text $00, $20, $08, $F6, $F7, $01, $00, $0E, $05, $77, $F9, $02
>382888	05 77 f9 02
>38288c	00 20 14 f1 08 01 00 2e		MIDI_INSTRUMENT_TELEPHON   .text $00, $20, $14, $F1, $08, $01, $00, $2E, $02, $F4, $08, $00
>382894	02 f4 08 00
>382898	00 20 04 f2 00 03 01 23		MIDI_INSTRUMENT_HELICOPT   .text $00, $20, $04, $F2, $00, $03, $01, $23, $00, $36, $05, $01
>3828a0	00 36 05 01
>3828a4	00 2e 00 ff 02 0f 00 2a		MIDI_INSTRUMENT_APPLAUSE   .text $00, $2E, $00, $FF, $02, $0F, $00, $2A, $05, $32, $55, $03
>3828ac	05 32 55 03
>3828b0	00 20 00 a1 ef 0f 00 10		MIDI_INSTRUMENT_GUNSHOT    .text $00, $20, $00, $A1, $EF, $0F, $00, $10, $00, $F3, $DF, $00
>3828b8	00 f3 df 00
>3828bc	bc 22 38 00 c8 22 38 00		midiInstruments .dword MIDI_INSTRUMENT_PIANO1,   MIDI_INSTRUMENT_PIANO2,   MIDI_INSTRUMENT_PIANO3,   MIDI_INSTRUMENT_HONKTONK, MIDI_INSTRUMENT_EP1,      MIDI_INSTRUMENT_EP2
>3828c4	d4 22 38 00 e0 22 38 00 ec 22 38 00 f8 22 38 00
>3828d4	04 23 38 00 10 23 38 00		              	.dword MIDI_INSTRUMENT_HARPSIC,  MIDI_INSTRUMENT_CLAVIC,   MIDI_INSTRUMENT_CELESTA,  MIDI_INSTRUMENT_GLOCK,    MIDI_INSTRUMENT_MUSICBOX, MIDI_INSTRUMENT_VIBES
>3828dc	1c 23 38 00 28 23 38 00 34 23 38 00 40 23 38 00
>3828ec	4c 23 38 00 58 23 38 00		              	.dword MIDI_INSTRUMENT_MARIMBA,  MIDI_INSTRUMENT_XYLO,     MIDI_INSTRUMENT_TUBEBELL, MIDI_INSTRUMENT_SANTUR,   MIDI_INSTRUMENT_ORGAN1,   MIDI_INSTRUMENT_ORGAN2
>3828f4	64 23 38 00 70 23 38 00 7c 23 38 00 88 23 38 00
>382904	94 23 38 00 a0 23 38 00		              	.dword MIDI_INSTRUMENT_ORGAN3,   MIDI_INSTRUMENT_PIPEORG,  MIDI_INSTRUMENT_REEDORG,  MIDI_INSTRUMENT_ACORDIAN, MIDI_INSTRUMENT_HARMONIC, MIDI_INSTRUMENT_BANDNEON
>38290c	ac 23 38 00 b8 23 38 00 c4 23 38 00 d0 23 38 00
>38291c	dc 23 38 00 e8 23 38 00		              	.dword MIDI_INSTRUMENT_NYLONGT,  MIDI_INSTRUMENT_STEELGT,  MIDI_INSTRUMENT_JAZZGT,   MIDI_INSTRUMENT_CLEANGT,  MIDI_INSTRUMENT_MUTEGT,   MIDI_INSTRUMENT_OVERDGT
>382924	f4 23 38 00 00 24 38 00 0c 24 38 00 18 24 38 00
>382934	24 24 38 00 30 24 38 00		              	.dword MIDI_INSTRUMENT_DISTGT,   MIDI_INSTRUMENT_GTHARMS,  MIDI_INSTRUMENT_ACOUBASS, MIDI_INSTRUMENT_FINGBASS, MIDI_INSTRUMENT_PICKBASS, MIDI_INSTRUMENT_FRETLESS
>38293c	3c 24 38 00 48 24 38 00 54 24 38 00 60 24 38 00
>38294c	6c 24 38 00 78 24 38 00		              	.dword MIDI_INSTRUMENT_SLAPBAS1, MIDI_INSTRUMENT_SLAPBAS2, MIDI_INSTRUMENT_SYNBASS1, MIDI_INSTRUMENT_SYNBASS2, MIDI_INSTRUMENT_VIOLIN,   MIDI_INSTRUMENT_VIOLA
>382954	84 24 38 00 90 24 38 00 9c 24 38 00 a8 24 38 00
>382964	b4 24 38 00 c0 24 38 00		              	.dword MIDI_INSTRUMENT_CELLO,    MIDI_INSTRUMENT_CONTRAB,  MIDI_INSTRUMENT_TREMSTR,  MIDI_INSTRUMENT_PIZZ,     MIDI_INSTRUMENT_HARP,     MIDI_INSTRUMENT_TIMPANI
>38296c	cc 24 38 00 d8 24 38 00 e4 24 38 00 f0 24 38 00
>38297c	fc 24 38 00 08 25 38 00		              	.dword MIDI_INSTRUMENT_STRINGS,  MIDI_INSTRUMENT_SLOWSTR,  MIDI_INSTRUMENT_SYNSTR1,  MIDI_INSTRUMENT_SYNSTR2,  MIDI_INSTRUMENT_CHOIR,    MIDI_INSTRUMENT_OOHS
>382984	14 25 38 00 20 25 38 00 2c 25 38 00 38 25 38 00
>382994	44 25 38 00 50 25 38 00		              	.dword MIDI_INSTRUMENT_SYNVOX,   MIDI_INSTRUMENT_ORCHIT,   MIDI_INSTRUMENT_TRUMPET,  MIDI_INSTRUMENT_TROMBONE, MIDI_INSTRUMENT_TUBA,     MIDI_INSTRUMENT_MUTETRP
>38299c	5c 25 38 00 68 25 38 00 74 25 38 00 80 25 38 00
>3829ac	8c 25 38 00 98 25 38 00		              	.dword MIDI_INSTRUMENT_FRHORN,   MIDI_INSTRUMENT_BRASS1,   MIDI_INSTRUMENT_SYNBRAS1, MIDI_INSTRUMENT_SYNBRAS2, MIDI_INSTRUMENT_SOPSAX,   MIDI_INSTRUMENT_ALTOSAX
>3829b4	a4 25 38 00 b0 25 38 00 bc 25 38 00 c8 25 38 00
>3829c4	d4 25 38 00 e0 25 38 00		              	.dword MIDI_INSTRUMENT_TENSAX,   MIDI_INSTRUMENT_BARISAX,  MIDI_INSTRUMENT_OBOE,     MIDI_INSTRUMENT_ENGLHORN, MIDI_INSTRUMENT_BASSOON,  MIDI_INSTRUMENT_CLARINET
>3829cc	ec 25 38 00 f8 25 38 00 04 26 38 00 10 26 38 00
>3829dc	1c 26 38 00 28 26 38 00		              	.dword MIDI_INSTRUMENT_PICCOLO,  MIDI_INSTRUMENT_FLUTE1,   MIDI_INSTRUMENT_RECORDER, MIDI_INSTRUMENT_PANFLUTE, MIDI_INSTRUMENT_BOTTLEB,  MIDI_INSTRUMENT_SHAKU
>3829e4	34 26 38 00 40 26 38 00 4c 26 38 00 58 26 38 00
>3829f4	64 26 38 00 70 26 38 00		              	.dword MIDI_INSTRUMENT_WHISTLE,  MIDI_INSTRUMENT_OCARINA,  MIDI_INSTRUMENT_SQUARWAV, MIDI_INSTRUMENT_SAWWAV,   MIDI_INSTRUMENT_SYNCALLI, MIDI_INSTRUMENT_CHIFLEAD
>3829fc	7c 26 38 00 88 26 38 00 94 26 38 00 a0 26 38 00
>382a0c	ac 26 38 00 b8 26 38 00		              	.dword MIDI_INSTRUMENT_CHARANG,  MIDI_INSTRUMENT_SOLOVOX,  MIDI_INSTRUMENT_FIFTHSAW, MIDI_INSTRUMENT_BASSLEAD, MIDI_INSTRUMENT_FANTASIA, MIDI_INSTRUMENT_WARMPAD
>382a14	c4 26 38 00 d0 26 38 00 dc 26 38 00 e8 26 38 00
>382a24	f4 26 38 00 00 27 38 00		              	.dword MIDI_INSTRUMENT_POLYSYN,  MIDI_INSTRUMENT_SPACEVOX, MIDI_INSTRUMENT_BOWEDGLS, MIDI_INSTRUMENT_METALPAD, MIDI_INSTRUMENT_HALOPAD,  MIDI_INSTRUMENT_SWEEPPAD
>382a2c	0c 27 38 00 18 27 38 00 24 27 38 00 30 27 38 00
>382a3c	3c 27 38 00 48 27 38 00		              	.dword MIDI_INSTRUMENT_ICERAIN,  MIDI_INSTRUMENT_SOUNDTRK, MIDI_INSTRUMENT_CRYSTAL,  MIDI_INSTRUMENT_ATMOSPH,  MIDI_INSTRUMENT_BRIGHT,   MIDI_INSTRUMENT_GOBLIN
>382a44	54 27 38 00 60 27 38 00 6c 27 38 00 78 27 38 00
>382a54	84 27 38 00 90 27 38 00		              	.dword MIDI_INSTRUMENT_ECHODROP, MIDI_INSTRUMENT_STARTHEM, MIDI_INSTRUMENT_SITAR,    MIDI_INSTRUMENT_BANJO,    MIDI_INSTRUMENT_SHAMISEN, MIDI_INSTRUMENT_KOTO
>382a5c	9c 27 38 00 a8 27 38 00 b4 27 38 00 c0 27 38 00
>382a6c	cc 27 38 00 d8 27 38 00		              	.dword MIDI_INSTRUMENT_KALIMBA,  MIDI_INSTRUMENT_BAGPIPE,  MIDI_INSTRUMENT_FIDDLE,   MIDI_INSTRUMENT_SHANNAI,  MIDI_INSTRUMENT_TINKLBEL, MIDI_INSTRUMENT_AGOGO
>382a74	e4 27 38 00 f0 27 38 00 fc 27 38 00 08 28 38 00
>382a84	14 28 38 00 20 28 38 00		              	.dword MIDI_INSTRUMENT_STEELDRM, MIDI_INSTRUMENT_WOODBLOK, MIDI_INSTRUMENT_TAIKO,    MIDI_INSTRUMENT_MELOTOM,  MIDI_INSTRUMENT_SYNDRUM,  MIDI_INSTRUMENT_REVRSCYM
>382a8c	2c 28 38 00 38 28 38 00 44 28 38 00 50 28 38 00
>382a9c	5c 28 38 00 68 28 38 00		              	.dword MIDI_INSTRUMENT_FRETNOIS, MIDI_INSTRUMENT_BRTHNOIS, MIDI_INSTRUMENT_SEASHORE, MIDI_INSTRUMENT_BIRDS,    MIDI_INSTRUMENT_TELEPHON, MIDI_INSTRUMENT_HELICOPT
>382aa4	74 28 38 00 80 28 38 00 8c 28 38 00 98 28 38 00
>382ab4	a4 28 38 00 b0 28 38 00		              	.dword MIDI_INSTRUMENT_APPLAUSE, MIDI_INSTRUMENT_GUNSHOT

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Instruments_Win31.asm

>382abc	00 01 8f f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO1     .text $00, $01, $8F, $F2, $F4, $38, $00, $01, $0D, $F2, $F7, $00
>382ac4	0d f2 f7 00
>382ac8	00 01 4b f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO2     .text $00, $01, $4B, $F2, $F4, $38, $00, $01, $07, $F2, $F7, $00
>382ad0	07 f2 f7 00
>382ad4	00 01 49 f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO3     .text $00, $01, $49, $F2, $F4, $38, $00, $01, $07, $F2, $F6, $00
>382adc	07 f2 f6 00
>382ae0	00 81 12 f2 f7 00 00 41		MIDIW31_INSTRUMENT_HONKTONK   .text $00, $81, $12, $F2, $F7, $00, $00, $41, $07, $F2, $F7, $00
>382ae8	07 f2 f7 00
>382aec	00 01 57 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP1        .text $00, $01, $57, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>382af4	07 f2 f7 00
>382af8	00 01 93 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP2        .text $00, $01, $93, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>382b00	07 f2 f7 00
>382b04	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HARPSIC    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382b0c	00 00 00 00
>382b10	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLAVIC     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382b18	00 00 00 00
>382b1c	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELESTA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382b24	00 00 00 00
>382b28	00 07 97 f3 f2 32 00 11		MIDIW31_INSTRUMENT_GLOCK      .text $00, $07, $97, $F3, $F2, $32, $00, $11, $87, $F2, $F1, $00
>382b30	87 f2 f1 00
>382b34	00 17 21 54 f4 32 00 01		MIDIW31_INSTRUMENT_MUSICBOX   .text $00, $17, $21, $54, $F4, $32, $00, $01, $07, $F4, $F4, $00
>382b3c	07 f4 f4 00
>382b40	00 98 62 f3 f6 30 00 81		MIDIW31_INSTRUMENT_VIBES      .text $00, $98, $62, $F3, $F6, $30, $00, $81, $07, $F2, $F6, $00
>382b48	07 f2 f6 00
>382b4c	00 18 23 f6 f6 00 00 01		MIDIW31_INSTRUMENT_MARIMBA    .text $00, $18, $23, $F6, $F6, $00, $00, $01, $07, $E7, $F7, $00
>382b54	07 e7 f7 00
>382b58	00 15 91 f6 f6 00 00 01		MIDIW31_INSTRUMENT_XYLO       .text $00, $15, $91, $F6, $F6, $00, $00, $01, $07, $F6, $F6, $00
>382b60	07 f6 f6 00
>382b64	00 45 59 d3 f3 00 00 81		MIDIW31_INSTRUMENT_TUBEBELL   .text $00, $45, $59, $D3, $F3, $00, $00, $81, $87, $A3, $F3, $00
>382b6c	87 a3 f3 00
>382b70	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SANTUR     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382b78	00 00 00 00
>382b7c	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382b84	00 00 00 00
>382b88	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN2     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382b90	00 00 00 00
>382b94	00 70 44 aa 18 34 00 b1		MIDIW31_INSTRUMENT_ORGAN3     .text $00, $70, $44, $AA, $18, $34, $00, $B1, $07, $8A, $08, $00
>382b9c	07 8a 08 00
>382ba0	00 23 93 97 23 34 01 b1		MIDIW31_INSTRUMENT_PIPEORG    .text $00, $23, $93, $97, $23, $34, $01, $B1, $07, $55, $14, $00
>382ba8	07 55 14 00
>382bac	00 61 13 97 04 30 01 b1		MIDIW31_INSTRUMENT_REEDORG    .text $00, $61, $13, $97, $04, $30, $01, $B1, $87, $55, $04, $00
>382bb4	87 55 04 00
>382bb8	00 24 48 98 2a 30 01 b1		MIDIW31_INSTRUMENT_ACORDIAN   .text $00, $24, $48, $98, $2A, $30, $01, $B1, $07, $46, $1A, $00
>382bc0	07 46 1a 00
>382bc4	00 61 13 91 06 00 01 21		MIDIW31_INSTRUMENT_HARMONIC   .text $00, $61, $13, $91, $06, $00, $01, $21, $07, $61, $07, $00
>382bcc	07 61 07 00
>382bd0	00 21 13 71 06 00 00 a1		MIDIW31_INSTRUMENT_BANDNEON   .text $00, $21, $13, $71, $06, $00, $00, $A1, $90, $61, $07, $00
>382bd8	90 61 07 00
>382bdc	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_NYLONGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382be4	00 00 00 00
>382be8	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382bf0	00 00 00 00
>382bf4	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_JAZZGT     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382bfc	00 00 00 00
>382c00	00 03 87 f6 22 36 01 21		MIDIW31_INSTRUMENT_CLEANGT    .text $00, $03, $87, $F6, $22, $36, $01, $21, $87, $F3, $F8, $00
>382c08	87 f3 f8 00
>382c0c	00 03 47 f9 54 30 00 21		MIDIW31_INSTRUMENT_MUTEGT     .text $00, $03, $47, $F9, $54, $30, $00, $21, $07, $F6, $3A, $00
>382c14	07 f6 3a 00
>382c18	00 23 4a 91 41 38 01 21		MIDIW31_INSTRUMENT_OVERDGT    .text $00, $23, $4A, $91, $41, $38, $01, $21, $0C, $84, $19, $00
>382c20	0c 84 19 00
>382c24	00 23 4a 95 19 32 01 21		MIDIW31_INSTRUMENT_DISTGT     .text $00, $23, $4A, $95, $19, $32, $01, $21, $07, $94, $19, $00
>382c2c	07 94 19 00
>382c30	00 09 a1 20 4f 00 00 84		MIDIW31_INSTRUMENT_GTHARMS    .text $00, $09, $A1, $20, $4F, $00, $00, $84, $87, $D1, $F8, $00
>382c38	87 d1 f8 00
>382c3c	00 21 1e 94 06 00 00 a2		MIDIW31_INSTRUMENT_ACOUBASS   .text $00, $21, $1E, $94, $06, $00, $00, $A2, $07, $C3, $A6, $00
>382c44	07 c3 a6 00
>382c48	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FINGBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382c50	00 00 00 00
>382c54	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_PICKBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382c5c	00 00 00 00
>382c60	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRETLESS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382c68	00 00 00 00
>382c6c	00 01 8b a1 9a 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS1   .text $00, $01, $8B, $A1, $9A, $38, $00, $21, $47, $F2, $DF, $00
>382c74	47 f2 df 00
>382c78	00 21 8b a2 16 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS2   .text $00, $21, $8B, $A2, $16, $38, $00, $21, $0F, $A1, $DF, $00
>382c80	0f a1 df 00
>382c84	00 31 8b f4 e8 3a 00 31		MIDIW31_INSTRUMENT_SYNBASS1   .text $00, $31, $8B, $F4, $E8, $3A, $00, $31, $07, $F1, $78, $00
>382c8c	07 f1 78 00
>382c90	00 31 12 f1 28 30 00 31		MIDIW31_INSTRUMENT_SYNBASS2   .text $00, $31, $12, $F1, $28, $30, $00, $31, $07, $F1, $18, $00
>382c98	07 f1 18 00
>382c9c	00 31 15 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLIN     .text $00, $31, $15, $DD, $13, $00, $01, $21, $07, $56, $26, $00
>382ca4	07 56 26 00
>382ca8	00 31 16 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLA      .text $00, $31, $16, $DD, $13, $00, $01, $21, $07, $66, $06, $00
>382cb0	07 66 06 00
>382cb4	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELLO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382cbc	00 00 00 00
>382cc0	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CONTRAB    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382cc8	00 00 00 00
>382ccc	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TREMSTR    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382cd4	00 00 00 00
>382cd8	00 02 1a f5 75 30 01 01		MIDIW31_INSTRUMENT_PIZZ       .text $00, $02, $1A, $F5, $75, $30, $01, $01, $87, $85, $35, $00
>382ce0	87 85 35 00
>382ce4	00 02 1d f5 75 30 01 01		MIDIW31_INSTRUMENT_HARP       .text $00, $02, $1D, $F5, $75, $30, $01, $01, $87, $F3, $F4, $00
>382cec	87 f3 f4 00
>382cf0	00 10 41 f5 05 32 01 11		MIDIW31_INSTRUMENT_TIMPANI    .text $00, $10, $41, $F5, $05, $32, $01, $11, $07, $F2, $C3, $00
>382cf8	07 f2 c3 00
>382cfc	00 21 9b b1 25 3c 01 a2		MIDIW31_INSTRUMENT_STRINGS    .text $00, $21, $9B, $B1, $25, $3C, $01, $A2, $08, $72, $08, $00
>382d04	08 72 08 00
>382d08	00 a1 98 7f 03 00 01 21		MIDIW31_INSTRUMENT_SLOWSTR    .text $00, $A1, $98, $7F, $03, $00, $01, $21, $07, $3F, $07, $01
>382d10	07 3f 07 01
>382d14	00 a1 93 c1 12 00 00 61		MIDIW31_INSTRUMENT_SYNSTR1    .text $00, $A1, $93, $C1, $12, $00, $00, $61, $07, $4F, $05, $00
>382d1c	07 4f 05 00
>382d20	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNSTR2    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382d28	00 00 00 00
>382d2c	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CHOIR      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382d34	00 00 00 00
>382d38	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OOHS       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382d40	00 00 00 00
>382d44	00 71 57 54 05 3c 00 72		MIDIW31_INSTRUMENT_SYNVOX     .text $00, $71, $57, $54, $05, $3C, $00, $72, $07, $7A, $05, $00
>382d4c	07 7a 05 00
>382d50	00 90 00 54 63 38 00 41		MIDIW31_INSTRUMENT_ORCHIT     .text $00, $90, $00, $54, $63, $38, $00, $41, $07, $A5, $45, $00
>382d58	07 a5 45 00
>382d5c	00 21 92 85 17 3c 00 21		MIDIW31_INSTRUMENT_TRUMPET    .text $00, $21, $92, $85, $17, $3C, $00, $21, $08, $8F, $09, $00
>382d64	08 8f 09 00
>382d68	00 21 94 75 17 32 00 21		MIDIW31_INSTRUMENT_TROMBONE   .text $00, $21, $94, $75, $17, $32, $00, $21, $0C, $8F, $09, $00
>382d70	0c 8f 09 00
>382d74	00 21 94 76 15 00 00 61		MIDIW31_INSTRUMENT_TUBA       .text $00, $21, $94, $76, $15, $00, $00, $61, $07, $82, $37, $00
>382d7c	07 82 37 00
>382d80	00 31 43 9e 17 00 01 21		MIDIW31_INSTRUMENT_MUTETRP    .text $00, $31, $43, $9E, $17, $00, $01, $21, $07, $62, $2C, $01
>382d88	07 62 2c 01
>382d8c	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRHORN     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382d94	00 00 00 00
>382d98	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BRASS1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382da0	00 00 00 00
>382da4	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNBRAS1   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382dac	00 00 00 00
>382db0	00 21 4d 54 3c 38 00 21		MIDIW31_INSTRUMENT_SYNBRAS2   .text $00, $21, $4D, $54, $3C, $38, $00, $21, $07, $A6, $1C, $00
>382db8	07 a6 1c 00
>382dbc	00 31 8f 93 02 38 01 61		MIDIW31_INSTRUMENT_SOPSAX     .text $00, $31, $8F, $93, $02, $38, $01, $61, $07, $72, $0B, $00
>382dc4	07 72 0b 00
>382dc8	00 31 8e 93 03 38 01 61		MIDIW31_INSTRUMENT_ALTOSAX    .text $00, $31, $8E, $93, $03, $38, $01, $61, $07, $72, $09, $00
>382dd0	07 72 09 00
>382dd4	00 31 91 93 03 30 01 61		MIDIW31_INSTRUMENT_TENSAX     .text $00, $31, $91, $93, $03, $30, $01, $61, $07, $82, $09, $00
>382ddc	07 82 09 00
>382de0	00 31 8e 93 0f 00 01 61		MIDIW31_INSTRUMENT_BARISAX    .text $00, $31, $8E, $93, $0F, $00, $01, $61, $07, $72, $0F, $00
>382de8	07 72 0f 00
>382dec	00 21 4b aa 16 00 01 21		MIDIW31_INSTRUMENT_OBOE       .text $00, $21, $4B, $AA, $16, $00, $01, $21, $07, $8F, $0A, $00
>382df4	07 8f 0a 00
>382df8	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ENGLHORN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382e00	00 00 00 00
>382e04	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSOON    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382e0c	00 00 00 00
>382e10	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLARINET   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382e18	00 00 00 00
>382e1c	00 e1 1f 85 5f 30 00 e1		MIDIW31_INSTRUMENT_PICCOLO    .text $00, $E1, $1F, $85, $5F, $30, $00, $E1, $07, $65, $1A, $00
>382e24	07 65 1a 00
>382e28	00 e1 46 88 5f 30 00 e1		MIDIW31_INSTRUMENT_FLUTE1     .text $00, $E1, $46, $88, $5F, $30, $00, $E1, $07, $65, $1A, $00
>382e30	07 65 1a 00
>382e34	00 a1 9c 75 1f 32 00 21		MIDIW31_INSTRUMENT_RECORDER   .text $00, $A1, $9C, $75, $1F, $32, $00, $21, $07, $75, $0A, $00
>382e3c	07 75 0a 00
>382e40	00 31 8b 84 58 30 00 21		MIDIW31_INSTRUMENT_PANFLUTE   .text $00, $31, $8B, $84, $58, $30, $00, $21, $07, $65, $1A, $00
>382e48	07 65 1a 00
>382e4c	00 e1 4c 66 56 00 00 a1		MIDIW31_INSTRUMENT_BOTTLEB    .text $00, $E1, $4C, $66, $56, $00, $00, $A1, $07, $65, $26, $00
>382e54	07 65 26 00
>382e58	00 62 cb 76 46 00 00 a1		MIDIW31_INSTRUMENT_SHAKU      .text $00, $62, $CB, $76, $46, $00, $00, $A1, $07, $55, $36, $00
>382e60	07 55 36 00
>382e64	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WHISTLE    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382e6c	00 00 00 00
>382e70	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OCARINA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382e78	00 00 00 00
>382e7c	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SQUARWAV   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382e84	00 00 00 00
>382e88	00 21 0e ff 0f 30 01 21		MIDIW31_INSTRUMENT_SAWWAV     .text $00, $21, $0E, $FF, $0F, $30, $01, $21, $07, $FF, $0F, $01
>382e90	07 ff 0f 01
>382e94	00 22 46 86 55 30 00 21		MIDIW31_INSTRUMENT_SYNCALLI   .text $00, $22, $46, $86, $55, $30, $00, $21, $87, $64, $18, $00
>382e9c	87 64 18 00
>382ea0	00 21 45 66 12 30 00 a1		MIDIW31_INSTRUMENT_CHIFLEAD   .text $00, $21, $45, $66, $12, $30, $00, $A1, $07, $96, $0A, $00
>382ea8	07 96 0a 00
>382eac	00 21 8b 92 2a 34 01 22		MIDIW31_INSTRUMENT_CHARANG    .text $00, $21, $8B, $92, $2A, $34, $01, $22, $07, $91, $2A, $00
>382eb4	07 91 2a 00
>382eb8	00 a2 9e df 05 00 00 61		MIDIW31_INSTRUMENT_SOLOVOX    .text $00, $A2, $9E, $DF, $05, $00, $00, $61, $47, $6F, $07, $00
>382ec0	47 6f 07 00
>382ec4	00 20 1a ef 01 00 00 60		MIDIW31_INSTRUMENT_FIFTHSAW   .text $00, $20, $1A, $EF, $01, $00, $00, $60, $07, $8F, $06, $02
>382ecc	07 8f 06 02
>382ed0	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSLEAD   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382ed8	00 00 00 00
>382edc	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FANTASIA   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382ee4	00 00 00 00
>382ee8	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WARMPAD    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382ef0	00 00 00 00
>382ef4	00 61 17 91 34 3c 00 61		MIDIW31_INSTRUMENT_POLYSYN    .text $00, $61, $17, $91, $34, $3C, $00, $61, $07, $55, $16, $00
>382efc	07 55 16 00
>382f00	00 71 5d 54 01 30 00 72		MIDIW31_INSTRUMENT_SPACEVOX   .text $00, $71, $5D, $54, $01, $30, $00, $72, $07, $6A, $03, $00
>382f08	07 6a 03 00
>382f0c	00 21 97 21 43 38 00 a2		MIDIW31_INSTRUMENT_BOWEDGLS   .text $00, $21, $97, $21, $43, $38, $00, $A2, $07, $42, $35, $00
>382f14	07 42 35 00
>382f18	00 a1 1c a1 77 30 01 21		MIDIW31_INSTRUMENT_METALPAD   .text $00, $A1, $1C, $A1, $77, $30, $01, $21, $07, $31, $47, $01
>382f20	07 31 47 01
>382f24	00 21 89 11 33 00 00 61		MIDIW31_INSTRUMENT_HALOPAD    .text $00, $21, $89, $11, $33, $00, $00, $61, $0A, $42, $25, $00
>382f2c	0a 42 25 00
>382f30	00 a1 15 11 47 00 01 21		MIDIW31_INSTRUMENT_SWEEPPAD   .text $00, $A1, $15, $11, $47, $00, $01, $21, $07, $CF, $07, $00
>382f38	07 cf 07 00
>382f3c	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ICERAIN    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382f44	00 00 00 00
>382f48	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SOUNDTRK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382f50	00 00 00 00
>382f54	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CRYSTAL    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382f5c	00 00 00 00
>382f60	00 22 92 b1 81 3c 00 61		MIDIW31_INSTRUMENT_ATMOSPH    .text $00, $22, $92, $B1, $81, $3C, $00, $61, $8A, $F2, $26, $00
>382f68	8a f2 26 00
>382f6c	00 41 4d f1 51 30 01 42		MIDIW31_INSTRUMENT_BRIGHT     .text $00, $41, $4D, $F1, $51, $30, $01, $42, $07, $F2, $F5, $00
>382f74	07 f2 f5 00
>382f78	00 61 94 11 51 36 01 a3		MIDIW31_INSTRUMENT_GOBLIN     .text $00, $61, $94, $11, $51, $36, $01, $A3, $87, $11, $13, $00
>382f80	87 11 13 00
>382f84	00 61 8c 11 31 3a 00 a1		MIDIW31_INSTRUMENT_ECHODROP   .text $00, $61, $8C, $11, $31, $3A, $00, $A1, $87, $1D, $03, $00
>382f8c	87 1d 03 00
>382f90	00 a4 4c f3 73 00 01 61		MIDIW31_INSTRUMENT_STARTHEM   .text $00, $A4, $4C, $F3, $73, $00, $01, $61, $07, $81, $23, $00
>382f98	07 81 23 00
>382f9c	00 02 85 d2 53 00 00 07		MIDIW31_INSTRUMENT_SITAR      .text $00, $02, $85, $D2, $53, $00, $00, $07, $0A, $F2, $F6, $01
>382fa4	0a f2 f6 01
>382fa8	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BANJO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382fb0	00 00 00 00
>382fb4	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SHAMISEN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382fbc	00 00 00 00
>382fc0	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_KOTO       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382fc8	00 00 00 00
>382fcc	00 04 4f fa 56 3c 00 01		MIDIW31_INSTRUMENT_KALIMBA    .text $00, $04, $4F, $FA, $56, $3C, $00, $01, $07, $C2, $05, $00
>382fd4	07 c2 05 00
>382fd8	00 21 49 7c 20 36 00 22		MIDIW31_INSTRUMENT_BAGPIPE    .text $00, $21, $49, $7C, $20, $36, $00, $22, $07, $6F, $0C, $01
>382fe0	07 6f 0c 01
>382fe4	00 31 85 dd 33 3a 01 21		MIDIW31_INSTRUMENT_FIDDLE     .text $00, $31, $85, $DD, $33, $3A, $01, $21, $07, $56, $16, $00
>382fec	07 56 16 00
>382ff0	00 20 04 da 05 30 02 21		MIDIW31_INSTRUMENT_SHANNAI    .text $00, $20, $04, $DA, $05, $30, $02, $21, $88, $8F, $0B, $00
>382ff8	88 8f 0b 00
>382ffc	00 05 6a f1 e5 00 00 03		MIDIW31_INSTRUMENT_TINKLBEL   .text $00, $05, $6A, $F1, $E5, $00, $00, $03, $87, $C3, $E5, $00
>383004	87 c3 e5 00
>383008	00 07 15 ec 26 00 00 02		MIDIW31_INSTRUMENT_AGOGO      .text $00, $07, $15, $EC, $26, $00, $00, $02, $07, $F8, $16, $00
>383010	07 f8 16 00
>383014	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELDRM   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>38301c	00 00 00 00
>383020	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WOODBLOK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383028	00 00 00 00
>38302c	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TAIKO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383034	00 00 00 00
>383038	00 11 41 f8 47 34 02 10		MIDIW31_INSTRUMENT_MELOTOM    .text $00, $11, $41, $F8, $47, $34, $02, $10, $0A, $F3, $03, $00
>383040	0a f3 03 00
>383044	00 01 8e f1 06 3e 02 10		MIDIW31_INSTRUMENT_SYNDRUM    .text $00, $01, $8E, $F1, $06, $3E, $02, $10, $07, $F3, $02, $00
>38304c	07 f3 02 00
>383050	00 0e 00 1f 00 3e 00 c0		MIDIW31_INSTRUMENT_REVRSCYM   .text $00, $0E, $00, $1F, $00, $3E, $00, $C0, $07, $1F, $FF, $03
>383058	07 1f ff 03
>38305c	00 06 80 f8 24 38 00 03		MIDIW31_INSTRUMENT_FRETNOIS   .text $00, $06, $80, $F8, $24, $38, $00, $03, $8F, $56, $84, $02
>383064	8f 56 84 02
>383068	00 0e 00 f8 00 00 00 d0		MIDIW31_INSTRUMENT_BRTHNOIS   .text $00, $0E, $00, $F8, $00, $00, $00, $D0, $0C, $34, $04, $03
>383070	0c 34 04 03
>383074	00 0e 00 f6 00 00 00 c0		MIDIW31_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F6, $00, $00, $00, $C0, $07, $1F, $02, $03
>38307c	07 1f 02 03
>383080	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BIRDS      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383088	00 00 00 00
>38308c	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TELEPHON   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383094	00 00 00 00
>383098	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HELICOPT   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3830a0	00 00 00 00
>3830a4	00 26 00 ff 01 3e 00 e4		MIDIW31_INSTRUMENT_APPLAUSE   .text $00, $26, $00, $FF, $01, $3E, $00, $E4, $07, $12, $16, $01
>3830ac	07 12 16 01
>3830b0	00 00 00 f3 f0 3e 00 00		MIDIW31_INSTRUMENT_GUNSHOT    .text $00, $00, $00, $F3, $F0, $3E, $00, $00, $07, $F6, $C9, $02
>3830b8	07 f6 c9 02
>3830bc	bc 2a 38 00 c8 2a 38 00		midiInstrumentsw31 .dword MIDIW31_INSTRUMENT_PIANO1,   MIDIW31_INSTRUMENT_PIANO2,   MIDIW31_INSTRUMENT_PIANO3,   MIDIW31_INSTRUMENT_HONKTONK, MIDIW31_INSTRUMENT_EP1, MIDIW31_INSTRUMENT_EP2
>3830c4	d4 2a 38 00 e0 2a 38 00 ec 2a 38 00 f8 2a 38 00
>3830d4	04 2b 38 00 10 2b 38 00		                   .dword MIDIW31_INSTRUMENT_HARPSIC,  MIDIW31_INSTRUMENT_CLAVIC,   MIDIW31_INSTRUMENT_CELESTA,  MIDIW31_INSTRUMENT_GLOCK,    MIDIW31_INSTRUMENT_MUSICBOX, MIDIW31_INSTRUMENT_VIBES
>3830dc	1c 2b 38 00 28 2b 38 00 34 2b 38 00 40 2b 38 00
>3830ec	4c 2b 38 00 58 2b 38 00			                 .dword MIDIW31_INSTRUMENT_MARIMBA,  MIDIW31_INSTRUMENT_XYLO,     MIDIW31_INSTRUMENT_TUBEBELL, MIDIW31_INSTRUMENT_SANTUR,   MIDIW31_INSTRUMENT_ORGAN1,   MIDIW31_INSTRUMENT_ORGAN2
>3830f4	64 2b 38 00 70 2b 38 00 7c 2b 38 00 88 2b 38 00
>383104	94 2b 38 00 a0 2b 38 00			                 .dword MIDIW31_INSTRUMENT_ORGAN3,   MIDIW31_INSTRUMENT_PIPEORG,  MIDIW31_INSTRUMENT_REEDORG,  MIDIW31_INSTRUMENT_ACORDIAN, MIDIW31_INSTRUMENT_HARMONIC, MIDIW31_INSTRUMENT_BANDNEON
>38310c	ac 2b 38 00 b8 2b 38 00 c4 2b 38 00 d0 2b 38 00
>38311c	dc 2b 38 00 e8 2b 38 00		                     .dword MIDIW31_INSTRUMENT_NYLONGT,  MIDIW31_INSTRUMENT_STEELGT,  MIDIW31_INSTRUMENT_JAZZGT,   MIDIW31_INSTRUMENT_CLEANGT,  MIDIW31_INSTRUMENT_MUTEGT,   MIDIW31_INSTRUMENT_OVERDGT
>383124	f4 2b 38 00 00 2c 38 00 0c 2c 38 00 18 2c 38 00
>383134	24 2c 38 00 30 2c 38 00			                 .dword MIDIW31_INSTRUMENT_DISTGT,   MIDIW31_INSTRUMENT_GTHARMS,  MIDIW31_INSTRUMENT_ACOUBASS, MIDIW31_INSTRUMENT_FINGBASS, MIDIW31_INSTRUMENT_PICKBASS, MIDIW31_INSTRUMENT_FRETLESS
>38313c	3c 2c 38 00 48 2c 38 00 54 2c 38 00 60 2c 38 00
>38314c	6c 2c 38 00 78 2c 38 00			                 .dword MIDIW31_INSTRUMENT_SLAPBAS1, MIDIW31_INSTRUMENT_SLAPBAS2, MIDIW31_INSTRUMENT_SYNBASS1, MIDIW31_INSTRUMENT_SYNBASS2, MIDIW31_INSTRUMENT_VIOLIN,   MIDIW31_INSTRUMENT_VIOLA
>383154	84 2c 38 00 90 2c 38 00 9c 2c 38 00 a8 2c 38 00
>383164	b4 2c 38 00 c0 2c 38 00			                 .dword MIDIW31_INSTRUMENT_CELLO,    MIDIW31_INSTRUMENT_CONTRAB,  MIDIW31_INSTRUMENT_TREMSTR,  MIDIW31_INSTRUMENT_PIZZ,     MIDIW31_INSTRUMENT_HARP,     MIDIW31_INSTRUMENT_TIMPANI
>38316c	cc 2c 38 00 d8 2c 38 00 e4 2c 38 00 f0 2c 38 00
>38317c	fc 2c 38 00 08 2d 38 00			                 .dword MIDIW31_INSTRUMENT_STRINGS,  MIDIW31_INSTRUMENT_SLOWSTR,  MIDIW31_INSTRUMENT_SYNSTR1,  MIDIW31_INSTRUMENT_SYNSTR2,  MIDIW31_INSTRUMENT_CHOIR,    MIDIW31_INSTRUMENT_OOHS
>383184	14 2d 38 00 20 2d 38 00 2c 2d 38 00 38 2d 38 00
>383194	44 2d 38 00 50 2d 38 00			                 .dword MIDIW31_INSTRUMENT_SYNVOX,   MIDIW31_INSTRUMENT_ORCHIT,   MIDIW31_INSTRUMENT_TRUMPET,  MIDIW31_INSTRUMENT_TROMBONE, MIDIW31_INSTRUMENT_TUBA,     MIDIW31_INSTRUMENT_MUTETRP
>38319c	5c 2d 38 00 68 2d 38 00 74 2d 38 00 80 2d 38 00
>3831ac	8c 2d 38 00 98 2d 38 00			                 .dword MIDIW31_INSTRUMENT_FRHORN,   MIDIW31_INSTRUMENT_BRASS1,   MIDIW31_INSTRUMENT_SYNBRAS1, MIDIW31_INSTRUMENT_SYNBRAS2, MIDIW31_INSTRUMENT_SOPSAX,   MIDIW31_INSTRUMENT_ALTOSAX
>3831b4	a4 2d 38 00 b0 2d 38 00 bc 2d 38 00 c8 2d 38 00
>3831c4	d4 2d 38 00 e0 2d 38 00			                 .dword MIDIW31_INSTRUMENT_TENSAX,   MIDIW31_INSTRUMENT_BARISAX,  MIDIW31_INSTRUMENT_OBOE,     MIDIW31_INSTRUMENT_ENGLHORN, MIDIW31_INSTRUMENT_BASSOON,  MIDIW31_INSTRUMENT_CLARINET
>3831cc	ec 2d 38 00 f8 2d 38 00 04 2e 38 00 10 2e 38 00
>3831dc	1c 2e 38 00 28 2e 38 00			                 .dword MIDIW31_INSTRUMENT_PICCOLO,  MIDIW31_INSTRUMENT_FLUTE1,   MIDIW31_INSTRUMENT_RECORDER, MIDIW31_INSTRUMENT_PANFLUTE, MIDIW31_INSTRUMENT_BOTTLEB,  MIDIW31_INSTRUMENT_SHAKU
>3831e4	34 2e 38 00 40 2e 38 00 4c 2e 38 00 58 2e 38 00
>3831f4	64 2e 38 00 70 2e 38 00			                 .dword MIDIW31_INSTRUMENT_WHISTLE,  MIDIW31_INSTRUMENT_OCARINA,  MIDIW31_INSTRUMENT_SQUARWAV, MIDIW31_INSTRUMENT_SAWWAV,   MIDIW31_INSTRUMENT_SYNCALLI, MIDIW31_INSTRUMENT_CHIFLEAD
>3831fc	7c 2e 38 00 88 2e 38 00 94 2e 38 00 a0 2e 38 00
>38320c	ac 2e 38 00 b8 2e 38 00			                 .dword MIDIW31_INSTRUMENT_CHARANG,  MIDIW31_INSTRUMENT_SOLOVOX,  MIDIW31_INSTRUMENT_FIFTHSAW, MIDIW31_INSTRUMENT_BASSLEAD, MIDIW31_INSTRUMENT_FANTASIA, MIDIW31_INSTRUMENT_WARMPAD
>383214	c4 2e 38 00 d0 2e 38 00 dc 2e 38 00 e8 2e 38 00
>383224	f4 2e 38 00 00 2f 38 00			                 .dword MIDIW31_INSTRUMENT_POLYSYN,  MIDIW31_INSTRUMENT_SPACEVOX, MIDIW31_INSTRUMENT_BOWEDGLS, MIDIW31_INSTRUMENT_METALPAD, MIDIW31_INSTRUMENT_HALOPAD,  MIDIW31_INSTRUMENT_SWEEPPAD
>38322c	0c 2f 38 00 18 2f 38 00 24 2f 38 00 30 2f 38 00
>38323c	3c 2f 38 00 48 2f 38 00			                 .dword MIDIW31_INSTRUMENT_ICERAIN,  MIDIW31_INSTRUMENT_SOUNDTRK, MIDIW31_INSTRUMENT_CRYSTAL,  MIDIW31_INSTRUMENT_ATMOSPH,  MIDIW31_INSTRUMENT_BRIGHT,   MIDIW31_INSTRUMENT_GOBLIN
>383244	54 2f 38 00 60 2f 38 00 6c 2f 38 00 78 2f 38 00
>383254	84 2f 38 00 90 2f 38 00			                 .dword MIDIW31_INSTRUMENT_ECHODROP, MIDIW31_INSTRUMENT_STARTHEM, MIDIW31_INSTRUMENT_SITAR,    MIDIW31_INSTRUMENT_BANJO,    MIDIW31_INSTRUMENT_SHAMISEN, MIDIW31_INSTRUMENT_KOTO
>38325c	9c 2f 38 00 a8 2f 38 00 b4 2f 38 00 c0 2f 38 00
>38326c	cc 2f 38 00 d8 2f 38 00			                 .dword MIDIW31_INSTRUMENT_KALIMBA,  MIDIW31_INSTRUMENT_BAGPIPE,  MIDIW31_INSTRUMENT_FIDDLE,   MIDIW31_INSTRUMENT_SHANNAI,  MIDIW31_INSTRUMENT_TINKLBEL, MIDIW31_INSTRUMENT_AGOGO
>383274	e4 2f 38 00 f0 2f 38 00 fc 2f 38 00 08 30 38 00
>383284	14 30 38 00 20 30 38 00			                 .dword MIDIW31_INSTRUMENT_STEELDRM, MIDIW31_INSTRUMENT_WOODBLOK, MIDIW31_INSTRUMENT_TAIKO,    MIDIW31_INSTRUMENT_MELOTOM,  MIDIW31_INSTRUMENT_SYNDRUM,  MIDIW31_INSTRUMENT_REVRSCYM
>38328c	2c 30 38 00 38 30 38 00 44 30 38 00 50 30 38 00
>38329c	5c 30 38 00 68 30 38 00			                 .dword MIDIW31_INSTRUMENT_FRETNOIS, MIDIW31_INSTRUMENT_BRTHNOIS, MIDIW31_INSTRUMENT_SEASHORE, MIDIW31_INSTRUMENT_BIRDS,    MIDIW31_INSTRUMENT_TELEPHON, MIDIW31_INSTRUMENT_HELICOPT
>3832a4	74 30 38 00 80 30 38 00 8c 30 38 00 98 30 38 00
>3832b4	a4 30 38 00 b0 30 38 00			                 .dword MIDIW31_INSTRUMENT_APPLAUSE, MIDIW31_INSTRUMENT_GUNSHOT

;******  Return to file: src\OPL2_Library.asm

>3832bc	3c 42 44 45 47 49 4b 4c		NOTE_INTRO  .byte  $3C, $42, $44, $45, $47, $49, $4B, $4C
.3832c4					IOPL2_TONE_TEST
.3832c4	e2 20		sep #$20	                SEP #$20        ; set A short
.3832c6	c2 10		rep #$10	                REP #$10        ; set X long
.3832c8	a2 00 00	ldx #$0000	                LDX #0
.3832cb					OPL2_TONE_TESTING_L1
.3832cb	bf bc 32 38	lda $3832bc,x	                LDA NOTE_INTRO, X
.3832cf	29 0f		and #$0f	                AND #$F
.3832d1	85 30		sta $30		                STA OPL2_NOTE ; start at C
.3832d3	bf bc 32 38	lda $3832bc,x	                LDA NOTE_INTRO, X
.3832d7	29 70		and #$70	                AND #$70
.3832d9	4a		lsr a		                LSR A
.3832da	4a		lsr a		                LSR A
.3832db	4a		lsr a		                LSR A
.3832dc	4a		lsr a		                LSR A
.3832dd	85 31		sta $31		                STA OPL2_OCTAVE
.3832df	8a		txa		                TXA
.3832e0	29 03		and #$03	                AND #$03        ; replace modulo 3 -  play each note on a different channel
.3832e2	85 27		sta $27		                STA OPL2_CHANNEL
.3832e4	22 b4 34 38	jsl $3834b4	                JSL OPL2_PLAYNOTE
.3832e8	a0 00 00	ldy #$0000	                LDY #$0000
.3832eb					OPL2_TONE_TESTING_L2
.3832eb	ea		nop		                NOP
.3832ec	ea		nop		                NOP
.3832ed	ea		nop		                NOP
.3832ee	ea		nop		                NOP
.3832ef	c8		iny		                INY
.3832f0	c0 ff ff	cpy #$ffff	                CPY #$FFFF
.3832f3	d0 f6		bne $3832eb	                BNE OPL2_TONE_TESTING_L2
.3832f5	e8		inx		                INX
.3832f6	e0 08 00	cpx #$0008	                CPX #8
.3832f9	d0 d0		bne $3832cb	                BNE OPL2_TONE_TESTING_L1
.3832fb	6b		rtl		                RTL
.3832fc					OPL2_INIT
.3832fc	c2 20		rep #$20	                REP #$20        ; set A long
.3832fe	a9 00 00	lda #$0000	                LDA #$0000
.383301	85 28		sta $28		                STA OPL2_REG_REGION
.383303	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.383305	85 30		sta $30		                STA OPL2_NOTE
.383307	85 32		sta $32		                STA OPL2_PARAMETER0
.383309	85 34		sta $34		                STA OPL2_PARAMETER2
.38330b	a9 86 12	lda #$1286	                LDA #<>INSTRUMENT_ACCORDN
.38330e	85 50		sta $50		                STA RAD_ADDR
.383310	a9 38 00	lda #$0038	                LDA #<`INSTRUMENT_ACCORDN
.383313	85 52		sta $52		                STA RAD_ADDR + 2
.383315	e2 20		sep #$20	                SEP #$20        ; set A short
.383317	6b		rtl		                RTL
.383318					OPL2_Reset
.383318	6b		rtl		                RTL
.383319					OPL2_Get_FrequencyBlock
.383319	6b		rtl		                RTL
.38331a					OPL2_GET_REGISTER
.38331a	48		pha		                PHA             ; begin setdp macro
.38331b	08		php		                PHP
.38331c	c2 20		rep #$20	                REP #$20        ; set A long
.38331e	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383321	5b		tcd		                TCD
.383322	28		plp		                PLP
.383323	68		pla		                PLA             ; end setdp macro
.383324	c2 20		rep #$20	                REP #$20        ; set A long
.383326	18		clc		              CLC
.383327	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.38332a	65 32		adc $32		              ADC OPL2_PARAMETER0
.38332c	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.38332e	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.383331	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.383333	e2 20		sep #$20	                SEP #$20        ; set A short
.383335	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383337	6b		rtl		              RTL
.383338					OPL2_GET_WAVEFORM_SELECT
.383338	48		pha		                PHA             ; begin setdp macro
.383339	08		php		                PHP
.38333a	c2 20		rep #$20	                REP #$20        ; set A long
.38333c	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.38333f	5b		tcd		                TCD
.383340	28		plp		                PLP
.383341	68		pla		                PLA             ; end setdp macro
.383342	c2 20		rep #$20	                REP #$20        ; set A long
.383344	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.383347	69 01 00	adc #$0001	              ADC #$0001
.38334a	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.38334c	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.38334f	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.383351	e2 20		sep #$20	                SEP #$20        ; set A short
.383353	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383355	29 20		and #$20	              AND #$20
.383357	6b		rtl		              RTL
.383358					OPL2_GET_SCALINGLEVEL
.383358	48		pha		                PHA             ; begin setdp macro
.383359	08		php		                PHP
.38335a	c2 20		rep #$20	                REP #$20        ; set A long
.38335c	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.38335f	5b		tcd		                TCD
.383360	28		plp		                PLP
.383361	68		pla		                PLA             ; end setdp macro
.383362	c2 20		rep #$20	                REP #$20        ; set A long
.383364	a9 40 00	lda #$0040	              LDA #$0040  ;
.383367	85 28		sta $28		              STA OPL2_REG_REGION
.383369	20 1b 3c	jsr $383c1b	              JSR OPL2_GET_REG_OFFSET
.38336c	e2 20		sep #$20	                SEP #$20        ; set A short
.38336e	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383370	29 c0		and #$c0	              AND #$C0
.383372	4a		lsr a		              LSR A
.383373	4a		lsr a		              LSR A
.383374	4a		lsr a		              LSR A
.383375	4a		lsr a		              LSR A
.383376	4a		lsr a		              LSR A
.383377	4a		lsr a		              LSR A
.383378	6b		rtl		              RTL
.383379					OPL2_GET_BLOCK
.383379	48		pha		                PHA             ; begin setdp macro
.38337a	08		php		                PHP
.38337b	c2 20		rep #$20	                REP #$20        ; set A long
.38337d	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383380	5b		tcd		                TCD
.383381	28		plp		                PLP
.383382	68		pla		                PLA             ; end setdp macro
.383383	e2 20		sep #$20	                SEP #$20        ; set A short
.383385	18		clc		              CLC
.383386	a5 27		lda $27		              LDA OPL2_CHANNEL
.383388	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.38338a	69 b0		adc #$b0	              ADC #$B0
.38338c	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.38338e	a9 00		lda #$00	              LDA #$00
.383390	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.383392	c2 30		rep #$30	                REP #$30        ; set A&X long
.383394	18		clc		              CLC
.383395	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.383398	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.38339a	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.38339c	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.38339f	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3833a1	e2 20		sep #$20	                SEP #$20        ; set A short
.3833a3	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3833a5	29 1c		and #$1c	              AND #$1C
.3833a7	4a		lsr a		              LSR A
.3833a8	4a		lsr a		              LSR A
.3833a9	6b		rtl		              RTL
.3833aa					OPL2_GET_KEYON
.3833aa	48		pha		                PHA             ; begin setdp macro
.3833ab	08		php		                PHP
.3833ac	c2 20		rep #$20	                REP #$20        ; set A long
.3833ae	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3833b1	5b		tcd		                TCD
.3833b2	28		plp		                PLP
.3833b3	68		pla		                PLA             ; end setdp macro
.3833b4	e2 20		sep #$20	                SEP #$20        ; set A short
.3833b6	18		clc		              CLC
.3833b7	a5 27		lda $27		              LDA OPL2_CHANNEL
.3833b9	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.3833bb	69 b0		adc #$b0	              ADC #$B0
.3833bd	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.3833bf	a9 00		lda #$00	              LDA #$00
.3833c1	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.3833c3	c2 30		rep #$30	                REP #$30        ; set A&X long
.3833c5	18		clc		              CLC
.3833c6	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3833c9	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.3833cb	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3833cd	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3833d0	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3833d2	e2 20		sep #$20	                SEP #$20        ; set A short
.3833d4	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3833d6	29 20		and #$20	              AND #$20
.3833d8	6b		rtl		              RTL
.3833d9					OPL2_GET_FEEDBACK
.3833d9	48		pha		                PHA             ; begin setdp macro
.3833da	08		php		                PHP
.3833db	c2 20		rep #$20	                REP #$20        ; set A long
.3833dd	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3833e0	5b		tcd		                TCD
.3833e1	28		plp		                PLP
.3833e2	68		pla		                PLA             ; end setdp macro
.3833e3	e2 20		sep #$20	                SEP #$20        ; set A short
.3833e5	18		clc		              CLC
.3833e6	a5 27		lda $27		              LDA OPL2_CHANNEL
.3833e8	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.3833ea	69 c0		adc #$c0	              ADC #$C0
.3833ec	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.3833ee	a9 00		lda #$00	              LDA #$00
.3833f0	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.3833f2	c2 30		rep #$30	                REP #$30        ; set A&X long
.3833f4	18		clc		              CLC
.3833f5	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3833f8	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.3833fa	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3833fc	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3833ff	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.383401	e2 20		sep #$20	                SEP #$20        ; set A short
.383403	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383405	29 e0		and #$e0	              AND #$E0
.383407	4a		lsr a		              LSR
.383408	6b		rtl		              RTL
.383409					OPL2_GET_SYNTHMODE
.383409	48		pha		                PHA             ; begin setdp macro
.38340a	08		php		                PHP
.38340b	c2 20		rep #$20	                REP #$20        ; set A long
.38340d	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383410	5b		tcd		                TCD
.383411	28		plp		                PLP
.383412	68		pla		                PLA             ; end setdp macro
.383413	e2 20		sep #$20	                SEP #$20        ; set A short
.383415	18		clc		              CLC
.383416	a5 27		lda $27		              LDA OPL2_CHANNEL
.383418	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.38341a	69 c0		adc #$c0	              ADC #$C0
.38341c	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.38341e	a9 00		lda #$00	              LDA #$00
.383420	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.383422	c2 30		rep #$30	                REP #$30        ; set A&X long
.383424	18		clc		              CLC
.383425	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.383428	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.38342a	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.38342c	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.38342f	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.383431	e2 20		sep #$20	                SEP #$20        ; set A short
.383433	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383435	29 01		and #$01	              AND #$01
.383437	6b		rtl		              RTL
.383438					OPL2_GET_DEEPTREMOLO
.383438	48		pha		                PHA             ; begin setdp macro
.383439	08		php		                PHP
.38343a	c2 20		rep #$20	                REP #$20        ; set A long
.38343c	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.38343f	5b		tcd		                TCD
.383440	28		plp		                PLP
.383441	68		pla		                PLA             ; end setdp macro
.383442	c2 20		rep #$20	                REP #$20        ; set A long
.383444	a9 bd 00	lda #$00bd	              LDA #$00BD;
.383447	85 28		sta $28		              STA OPL2_REG_REGION
.383449	20 1b 3c	jsr $383c1b	              JSR OPL2_GET_REG_OFFSET
.38344c	e2 20		sep #$20	                SEP #$20        ; set A short
.38344e	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383450	29 80		and #$80	              AND #$80
.383452	6b		rtl		              RTL
.383453					OPL2_GET_DEEPVIBRATO
.383453	48		pha		                PHA             ; begin setdp macro
.383454	08		php		                PHP
.383455	c2 20		rep #$20	                REP #$20        ; set A long
.383457	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.38345a	5b		tcd		                TCD
.38345b	28		plp		                PLP
.38345c	68		pla		                PLA             ; end setdp macro
.38345d	c2 20		rep #$20	                REP #$20        ; set A long
.38345f	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.383462	69 bd 00	adc #$00bd	              ADC #$00BD
.383465	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.383467	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.38346a	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.38346c	e2 20		sep #$20	                SEP #$20        ; set A short
.38346e	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383470	29 40		and #$40	              AND #$40
.383472	6b		rtl		              RTL
.383473					OPL2_GET_PERCUSSION
.383473	48		pha		                PHA             ; begin setdp macro
.383474	08		php		                PHP
.383475	c2 20		rep #$20	                REP #$20        ; set A long
.383477	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.38347a	5b		tcd		                TCD
.38347b	28		plp		                PLP
.38347c	68		pla		                PLA             ; end setdp macro
.38347d	c2 20		rep #$20	                REP #$20        ; set A long
.38347f	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.383482	69 bd 00	adc #$00bd	              ADC #$00BD
.383485	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.383487	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.38348a	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.38348c	e2 20		sep #$20	                SEP #$20        ; set A short
.38348e	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383490	29 20		and #$20	              AND #$20
.383492	6b		rtl		              RTL
.383493					OPL2_GET_DRUMS
.383493	48		pha		                PHA             ; begin setdp macro
.383494	08		php		                PHP
.383495	c2 20		rep #$20	                REP #$20        ; set A long
.383497	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.38349a	5b		tcd		                TCD
.38349b	28		plp		                PLP
.38349c	68		pla		                PLA             ; end setdp macro
.38349d	c2 20		rep #$20	                REP #$20        ; set A long
.38349f	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3834a2	69 bd 00	adc #$00bd	              ADC #$00BD
.3834a5	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3834a7	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3834aa	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3834ac	e2 20		sep #$20	                SEP #$20        ; set A short
.3834ae	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3834b0	29 1f		and #$1f	              AND #$1F
.3834b2	6b		rtl		              RTL
.3834b3					OPL2_Get_WaveForm
.3834b3	6b		rtl		                RTL
.3834b4					OPL2_PLAYNOTE
.3834b4	48		pha		                PHA             ; begin setdp macro
.3834b5	08		php		                PHP
.3834b6	c2 20		rep #$20	                REP #$20        ; set A long
.3834b8	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3834bb	5b		tcd		                TCD
.3834bc	28		plp		                PLP
.3834bd	68		pla		                PLA             ; end setdp macro
.3834be	e2 20		sep #$20	                SEP #$20        ; set A short
.3834c0	da		phx		                PHX
.3834c1	a9 00		lda #$00	                LDA #$00
.3834c3	85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.3834c5	20 9c 3a	jsr $383a9c	                JSR OPL2_SET_KEYON
.3834c8	20 61 3a	jsr $383a61	                JSR OPL2_SET_BLOCK  ; OPL2_SET_BLOCK Already to OPL2_OCTAVE
.3834cb	e2 10		sep #$10	                SEP #$10        ; set X short
.3834cd	a5 30		lda $30		                LDA OPL2_NOTE
.3834cf	3a		dec a		                DEC A
.3834d0	0a		asl a		                ASL A
.3834d1	aa		tax		                TAX
.3834d2	bf 4b 12 38	lda $38124b,x	                LDA @lnoteFNumbers,X
.3834d6	85 32		sta $32		                STA OPL2_PARAMETER0 ; Store the 8it in Param OPL2_PARAMETER0
.3834d8	e8		inx		                INX
.3834d9	bf 4b 12 38	lda $38124b,x	                LDA @lnoteFNumbers,X
.3834dd	85 33		sta $33		                STA OPL2_PARAMETER1 ; Store the 8bit in Param OPL2_PARAMETER1
.3834df	22 df 39 38	jsl $3839df	                JSL OPL2_SET_FNUMBER
.3834e3	a9 01		lda #$01	                LDA #$01
.3834e5	85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.3834e7	20 9c 3a	jsr $383a9c	                JSR OPL2_SET_KEYON
.3834ea	c2 10		rep #$10	                REP #$10        ; set X long
.3834ec	fa		plx		                PLX
.3834ed	6b		rtl		                RTL
.3834ee					OPL2_PLAYDRUM
.3834ee	6b		rtl		                RTL
.3834ef					OPL2_SET_INSTRUMENT
.3834ef	48		pha		                PHA             ; begin setdp macro
.3834f0	08		php		                PHP
.3834f1	c2 20		rep #$20	                REP #$20        ; set A long
.3834f3	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3834f6	5b		tcd		                TCD
.3834f7	28		plp		                PLP
.3834f8	68		pla		                PLA             ; end setdp macro
.3834f9	38		sec		              SEC ; Set the WaveFormSelect to True
.3834fa	22 dd 36 38	jsl $3836dd	              JSL OPL2_SET_WAVEFORMSELECT;
.3834fe	e2 20		sep #$20	                SEP #$20        ; set A short
.383500	c2 10		rep #$10	                REP #$10        ; set X long
.383502	a0 00 00	ldy #$0000	              LDY #$0000
.383505	a2 00 00	ldx #$0000	              LDX #$0000
.383508	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO],Y ; Pointer Location 0 in Instrument Profile
.38350a	85 35		sta $35		              STA OPL2_PARAMETER3
.38350c	c8		iny		              INY
.38350d	c9 06		cmp #$06	              CMP #$06
.38350f	d0 03		bne $383514	              BNE PERCUSSION_NEXT07
.383511	82 70 01	brl $383684	              BRL Percussion_6
.383514					PERCUSSION_NEXT07
.383514	c9 07		cmp #$07	              CMP #$07
.383516	d0 03		bne $38351b	              BNE PERCUSSION_NEXT08
.383518	82 44 01	brl $38365f	              BRL Percussion_7
.38351b					PERCUSSION_NEXT08
.38351b	c9 08		cmp #$08	              CMP #$08
.38351d	d0 03		bne $383522	              BNE PERCUSSION_NEXT09
.38351f	82 18 01	brl $38363a	              BRL Percussion_8
.383522					PERCUSSION_NEXT09
.383522	c9 09		cmp #$09	              CMP #$09
.383524	d0 03		bne $383529	              BNE PERCUSSION_NEXT0A
.383526	82 ec 00	brl $383615	              BRL Percussion_9
.383529					PERCUSSION_NEXT0A
.383529	c9 0a		cmp #$0a	              CMP #$0A
.38352b	d0 03		bne $383530	              BNE Percussion_Default
.38352d	82 c0 00	brl $3835f0	              BRL Percussion_A
.383530					Percussion_Default
.383530	a9 00		lda #$00	              LDA #$00
.383532	85 26		sta $26		              STA OPL2_OPERATOR
.383534	c2 20		rep #$20	                REP #$20        ; set A long
.383536	a9 20 00	lda #$0020	              LDA #$0020;
.383539	85 28		sta $28		              STA OPL2_REG_REGION
.38353b	20 1b 3c	jsr $383c1b	              JSR OPL2_GET_REG_OFFSET
.38353e	e2 20		sep #$20	                SEP #$20        ; set A short
.383540	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.383542	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383544	c8		iny		              INY
.383545	c2 20		rep #$20	                REP #$20        ; set A long
.383547	a9 40 00	lda #$0040	              LDA #$0040;
.38354a	85 28		sta $28		              STA OPL2_REG_REGION
.38354c	20 1b 3c	jsr $383c1b	              JSR OPL2_GET_REG_OFFSET
.38354f	e2 20		sep #$20	                SEP #$20        ; set A short
.383551	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.383553	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383555	c8		iny		              INY
.383556	c2 20		rep #$20	                REP #$20        ; set A long
.383558	a9 60 00	lda #$0060	              LDA #$0060;
.38355b	85 28		sta $28		              STA OPL2_REG_REGION
.38355d	20 1b 3c	jsr $383c1b	              JSR OPL2_GET_REG_OFFSET
.383560	e2 20		sep #$20	                SEP #$20        ; set A short
.383562	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.383564	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383566	c8		iny		              INY
.383567	c2 20		rep #$20	                REP #$20        ; set A long
.383569	a9 80 00	lda #$0080	              LDA #$0080;
.38356c	85 28		sta $28		              STA OPL2_REG_REGION
.38356e	20 1b 3c	jsr $383c1b	              JSR OPL2_GET_REG_OFFSET
.383571	e2 20		sep #$20	                SEP #$20        ; set A short
.383573	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.383575	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383577	c8		iny		              INY
.383578	c2 20		rep #$20	                REP #$20        ; set A long
.38357a	a9 e0 00	lda #$00e0	              LDA #$00E0;
.38357d	85 28		sta $28		              STA OPL2_REG_REGION
.38357f	20 1b 3c	jsr $383c1b	              JSR OPL2_GET_REG_OFFSET
.383582	e2 20		sep #$20	                SEP #$20        ; set A short
.383584	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.383586	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383588	c8		iny		              INY
.383589	e2 10		sep #$10	                SEP #$10        ; set X short
.38358b	a5 27		lda $27		              LDA OPL2_CHANNEL
.38358d	29 0f		and #$0f	              AND #$0F
.38358f	aa		tax		              TAX
.383590	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 6 in Instrument Profile
.383592	9f c0 e6 af	sta $afe6c0,x	              STA @lOPL3_R_FEEDBACK,X
.383596	c8		iny		              INY
.383597	a9 01		lda #$01	              LDA #$01
.383599	85 26		sta $26		              STA OPL2_OPERATOR
.38359b	c2 20		rep #$20	                REP #$20        ; set A long
.38359d	a9 20 00	lda #$0020	              LDA #$0020;
.3835a0	85 28		sta $28		              STA OPL2_REG_REGION
.3835a2	20 1b 3c	jsr $383c1b	              JSR OPL2_GET_REG_OFFSET
.3835a5	e2 20		sep #$20	                SEP #$20        ; set A short
.3835a7	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 7 in Instrument Profile
.3835a9	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3835ab	c8		iny		              INY
.3835ac	c2 20		rep #$20	                REP #$20        ; set A long
.3835ae	a9 40 00	lda #$0040	              LDA #$0040;
.3835b1	85 28		sta $28		              STA OPL2_REG_REGION
.3835b3	20 1b 3c	jsr $383c1b	              JSR OPL2_GET_REG_OFFSET
.3835b6	e2 20		sep #$20	                SEP #$20        ; set A short
.3835b8	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 8 in Instrument Profile
.3835ba	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3835bc	c8		iny		              INY
.3835bd	c2 20		rep #$20	                REP #$20        ; set A long
.3835bf	a9 60 00	lda #$0060	              LDA #$0060;
.3835c2	85 28		sta $28		              STA OPL2_REG_REGION
.3835c4	20 1b 3c	jsr $383c1b	              JSR OPL2_GET_REG_OFFSET
.3835c7	e2 20		sep #$20	                SEP #$20        ; set A short
.3835c9	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 9 in Instrument Profile
.3835cb	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3835cd	c8		iny		              INY
.3835ce	c2 20		rep #$20	                REP #$20        ; set A long
.3835d0	a9 80 00	lda #$0080	              LDA #$0080;
.3835d3	85 28		sta $28		              STA OPL2_REG_REGION
.3835d5	20 1b 3c	jsr $383c1b	              JSR OPL2_GET_REG_OFFSET
.3835d8	e2 20		sep #$20	                SEP #$20        ; set A short
.3835da	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location A in Instrument Profile
.3835dc	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3835de	c8		iny		              INY
.3835df	c2 20		rep #$20	                REP #$20        ; set A long
.3835e1	a9 e0 00	lda #$00e0	              LDA #$00E0;
.3835e4	85 28		sta $28		              STA OPL2_REG_REGION
.3835e6	20 1b 3c	jsr $383c1b	              JSR OPL2_GET_REG_OFFSET
.3835e9	e2 20		sep #$20	                SEP #$20        ; set A short
.3835eb	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location B in Instrument Profile
.3835ed	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3835ef	6b		rtl		                RTL
.3835f0					Percussion_A
.3835f0	e2 20		sep #$20	                SEP #$20        ; set A short
.3835f2	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.3835f4	8f 31 e6 af	sta $afe631	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $11
.3835f8	c8		iny		              INY
.3835f9	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.3835fb	8f 51 e6 af	sta $afe651	              STA @lOPL3_R_KSL_TL + $11
.3835ff	c8		iny		              INY
.383600	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.383602	8f 71 e6 af	sta $afe671	              STA @lOPL3_R_AR_DR + $11
.383606	c8		iny		              INY
.383607	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.383609	8f 91 e6 af	sta $afe691	              STA @lOPL3_R_SL_RR + $11
.38360d	c8		iny		              INY
.38360e	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.383610	8f f1 e6 af	sta $afe6f1	              STA @lOPL3_R_WAVE_SELECT + $11
.383614	6b		rtl		                RTL
.383615					Percussion_9
.383615	e2 20		sep #$20	                SEP #$20        ; set A short
.383617	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.383619	8f 35 e6 af	sta $afe635	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $15
.38361d	c8		iny		              INY
.38361e	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.383620	8f 55 e6 af	sta $afe655	              STA @lOPL3_R_KSL_TL + $15
.383624	c8		iny		              INY
.383625	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.383627	8f 75 e6 af	sta $afe675	              STA @lOPL3_R_AR_DR + $15
.38362b	c8		iny		              INY
.38362c	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.38362e	8f 95 e6 af	sta $afe695	              STA @lOPL3_R_SL_RR + $15
.383632	c8		iny		              INY
.383633	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.383635	8f f5 e6 af	sta $afe6f5	              STA @lOPL3_R_WAVE_SELECT + $15
.383639	6b		rtl		              RTL
.38363a					Percussion_8
.38363a	e2 20		sep #$20	                SEP #$20        ; set A short
.38363c	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.38363e	8f 32 e6 af	sta $afe632	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $12
.383642	c8		iny		              INY
.383643	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.383645	8f 52 e6 af	sta $afe652	              STA @lOPL3_R_KSL_TL + $12
.383649	c8		iny		              INY
.38364a	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.38364c	8f 72 e6 af	sta $afe672	              STA @lOPL3_R_AR_DR + $12
.383650	c8		iny		              INY
.383651	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.383653	8f 92 e6 af	sta $afe692	              STA @lOPL3_R_SL_RR + $12
.383657	c8		iny		              INY
.383658	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.38365a	8f f2 e6 af	sta $afe6f2	              STA @lOPL3_R_WAVE_SELECT + $12
.38365e	6b		rtl		              RTL
.38365f					Percussion_7
.38365f	e2 20		sep #$20	                SEP #$20        ; set A short
.383661	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.383663	8f 34 e6 af	sta $afe634	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $14
.383667	c8		iny		              INY
.383668	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.38366a	8f 54 e6 af	sta $afe654	              STA @lOPL3_R_KSL_TL + $14
.38366e	c8		iny		              INY
.38366f	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.383671	8f 74 e6 af	sta $afe674	              STA @lOPL3_R_AR_DR + $14
.383675	c8		iny		              INY
.383676	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.383678	8f 94 e6 af	sta $afe694	              STA @lOPL3_R_SL_RR + $14
.38367c	c8		iny		              INY
.38367d	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.38367f	8f f4 e6 af	sta $afe6f4	              STA @lOPL3_R_WAVE_SELECT + $14
.383683	6b		rtl		              RTL
.383684					Percussion_6
.383684	e2 20		sep #$20	                SEP #$20        ; set A short
.383686	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.383688	8f 30 e6 af	sta $afe630	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $10
.38368c	8f 33 e6 af	sta $afe633	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $13
.383690	c8		iny		              INY
.383691	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.383693	8f 50 e6 af	sta $afe650	              STA @lOPL3_R_KSL_TL + $10
.383697	8f 53 e6 af	sta $afe653	              STA @lOPL3_R_KSL_TL + $13
.38369b	c8		iny		              INY
.38369c	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.38369e	8f 70 e6 af	sta $afe670	              STA @lOPL3_R_AR_DR + $10
.3836a2	8f 73 e6 af	sta $afe673	              STA @lOPL3_R_AR_DR + $13
.3836a6	c8		iny		              INY
.3836a7	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.3836a9	8f 90 e6 af	sta $afe690	              STA @lOPL3_R_SL_RR + $10
.3836ad	8f 93 e6 af	sta $afe693	              STA @lOPL3_R_SL_RR + $13
.3836b1	c8		iny		              INY
.3836b2	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.3836b4	8f f0 e6 af	sta $afe6f0	              STA @lOPL3_R_WAVE_SELECT + $10
.3836b8	8f f3 e6 af	sta $afe6f3	              STA @lOPL3_R_WAVE_SELECT + $13
.3836bc	6b		rtl		              RTL
.3836bd					OPL2_SET_REGISTER
.3836bd	48		pha		                PHA             ; begin setdp macro
.3836be	08		php		                PHP
.3836bf	c2 20		rep #$20	                REP #$20        ; set A long
.3836c1	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3836c4	5b		tcd		                TCD
.3836c5	28		plp		                PLP
.3836c6	68		pla		                PLA             ; end setdp macro
.3836c7	c2 20		rep #$20	                REP #$20        ; set A long
.3836c9	18		clc		              CLC
.3836ca	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3836cd	65 32		adc $32		              ADC OPL2_PARAMETER0
.3836cf	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3836d1	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3836d4	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3836d6	e2 20		sep #$20	                SEP #$20        ; set A short
.3836d8	a5 33		lda $33		              LDA OPL2_PARAMETER1
.3836da	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3836dc	6b		rtl		              RTL
.3836dd					OPL2_SET_WAVEFORMSELECT
.3836dd	48		pha		                PHA             ; begin setdp macro
.3836de	08		php		                PHP
.3836df	c2 20		rep #$20	                REP #$20        ; set A long
.3836e1	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3836e4	5b		tcd		                TCD
.3836e5	28		plp		                PLP
.3836e6	68		pla		                PLA             ; end setdp macro
.3836e7	c2 20		rep #$20	                REP #$20        ; set A long
.3836e9	a9 01 e6	lda #$e601	              LDA #<>OPL3_R_BASE + $0001
.3836ec	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3836ee	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3836f1	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3836f3	e2 20		sep #$20	                SEP #$20        ; set A short
.3836f5	b0 07		bcs $3836fe	              BCS OPL2_Set_WaveFormSelect_set
.3836f7	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3836f9	29 df		and #$df	              AND #$DF
.3836fb	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3836fd	6b		rtl		              RTL
.3836fe					OPL2_Set_WaveFormSelect_set
.3836fe	48		pha		                PHA             ; begin setdp macro
.3836ff	08		php		                PHP
.383700	c2 20		rep #$20	                REP #$20        ; set A long
.383702	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383705	5b		tcd		                TCD
.383706	28		plp		                PLP
.383707	68		pla		                PLA             ; end setdp macro
.383708	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.38370a	09 20 00	ora #$0020	              ORA #$20
.38370d	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.38370f	6b		rtl		                RTL
.383710					OPL2_SET_TREMOLO
.383710	48		pha		                PHA             ; begin setdp macro
.383711	08		php		                PHP
.383712	c2 20		rep #$20	                REP #$20        ; set A long
.383714	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383717	5b		tcd		                TCD
.383718	28		plp		                PLP
.383719	68		pla		                PLA             ; end setdp macro
.38371a	08		php		                PHP ; Push the Carry
.38371b	c2 20		rep #$20	                REP #$20        ; set A long
.38371d	18		clc		                CLC
.38371e	a9 20 00	lda #$0020	                LDA #$0020 ;
.383721	85 28		sta $28		                STA OPL2_REG_REGION
.383723	20 1b 3c	jsr $383c1b	                JSR OPL2_GET_REG_OFFSET
.383726	28		plp		                PLP ; Pull the Carry out
.383727	e2 20		sep #$20	                SEP #$20        ; set A short
.383729	b0 08		bcs $383733	                BCS OPL2_Set_Tremolo_Set;
.38372b	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.38372d	29 7f		and #$7f	                AND #$7F
.38372f	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383731	80 06		bra $383739	                BRA OPL2_Set_Tremolo_Exit
.383733					OPL2_Set_Tremolo_Set
.383733	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383735	09 80		ora #$80	                ORA #$80
.383737	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383739					OPL2_Set_Tremolo_Exit
.383739	6b		rtl		                RTL
.38373a					OPL2_GET_TREMOLO
.38373a	48		pha		                PHA             ; begin setdp macro
.38373b	08		php		                PHP
.38373c	c2 20		rep #$20	                REP #$20        ; set A long
.38373e	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383741	5b		tcd		                TCD
.383742	28		plp		                PLP
.383743	68		pla		                PLA             ; end setdp macro
.383744	c2 20		rep #$20	                REP #$20        ; set A long
.383746	a9 20 00	lda #$0020	                LDA #$0020;
.383749	85 28		sta $28		                STA OPL2_REG_REGION
.38374b	20 1b 3c	jsr $383c1b	                JSR OPL2_GET_REG_OFFSET
.38374e	e2 20		sep #$20	                SEP #$20        ; set A short
.383750	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383752	29 80		and #$80	                AND #$80
.383754	6b		rtl		                RTL
.383755					OPL2_SET_VIBRATO
.383755	48		pha		                PHA             ; begin setdp macro
.383756	08		php		                PHP
.383757	c2 20		rep #$20	                REP #$20        ; set A long
.383759	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.38375c	5b		tcd		                TCD
.38375d	28		plp		                PLP
.38375e	68		pla		                PLA             ; end setdp macro
.38375f	08		php		                PHP ; Push the Carry
.383760	c2 20		rep #$20	                REP #$20        ; set A long
.383762	18		clc		                CLC
.383763	a9 20 00	lda #$0020	                LDA #$0020;
.383766	85 28		sta $28		                STA OPL2_REG_REGION
.383768	20 1b 3c	jsr $383c1b	                JSR OPL2_GET_REG_OFFSET
.38376b	28		plp		                PLP ; Pull the Carry out
.38376c	e2 20		sep #$20	                SEP #$20        ; set A short
.38376e	b0 08		bcs $383778	                BCS OPL2_Set_Vibrato_Set;
.383770	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383772	29 bf		and #$bf	                AND #$BF
.383774	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383776	80 06		bra $38377e	                BRA OPL2_Set_Vibrato_Exit
.383778					OPL2_Set_Vibrato_Set
.383778	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.38377a	09 40		ora #$40	                ORA #$40
.38377c	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.38377e					OPL2_Set_Vibrato_Exit
.38377e	6b		rtl		                RTL
.38377f					OPL2_GET_VIBRATO
.38377f	48		pha		                PHA             ; begin setdp macro
.383780	08		php		                PHP
.383781	c2 20		rep #$20	                REP #$20        ; set A long
.383783	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383786	5b		tcd		                TCD
.383787	28		plp		                PLP
.383788	68		pla		                PLA             ; end setdp macro
.383789	c2 20		rep #$20	                REP #$20        ; set A long
.38378b	a9 20 00	lda #$0020	                LDA #$0020;
.38378e	85 28		sta $28		                STA OPL2_REG_REGION
.383790	20 1b 3c	jsr $383c1b	                JSR OPL2_GET_REG_OFFSET
.383793	e2 20		sep #$20	                SEP #$20        ; set A short
.383795	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383797	29 40		and #$40	                AND #$40
.383799	6b		rtl		                RTL
.38379a					OPL2_SET_MAINTAINSUSTAIN
.38379a	48		pha		                PHA             ; begin setdp macro
.38379b	08		php		                PHP
.38379c	c2 20		rep #$20	                REP #$20        ; set A long
.38379e	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3837a1	5b		tcd		                TCD
.3837a2	28		plp		                PLP
.3837a3	68		pla		                PLA             ; end setdp macro
.3837a4	08		php		              PHP ; Push the Carry
.3837a5	c2 20		rep #$20	                REP #$20        ; set A long
.3837a7	18		clc		              CLC
.3837a8	a9 20 00	lda #$0020	              LDA #$0020;
.3837ab	85 28		sta $28		              STA OPL2_REG_REGION
.3837ad	20 1b 3c	jsr $383c1b	              JSR OPL2_GET_REG_OFFSET
.3837b0	28		plp		              PLP ; Pull the Carry out
.3837b1	e2 20		sep #$20	                SEP #$20        ; set A short
.3837b3	b0 08		bcs $3837bd	              BCS OPL2_Set_MaintainSustain_Set;
.3837b5	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3837b7	29 df		and #$df	              AND #$DF
.3837b9	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3837bb	80 06		bra $3837c3	              BRA OPL2_Set_MaintainSustain_Exit
.3837bd					OPL2_Set_MaintainSustain_Set
.3837bd	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3837bf	09 20		ora #$20	              ORA #$20
.3837c1	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3837c3					OPL2_Set_MaintainSustain_Exit
.3837c3	6b		rtl		                RTL
.3837c4					OPL2_GET_MAINTAINSUSTAIN
.3837c4	48		pha		                PHA             ; begin setdp macro
.3837c5	08		php		                PHP
.3837c6	c2 20		rep #$20	                REP #$20        ; set A long
.3837c8	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3837cb	5b		tcd		                TCD
.3837cc	28		plp		                PLP
.3837cd	68		pla		                PLA             ; end setdp macro
.3837ce	c2 20		rep #$20	                REP #$20        ; set A long
.3837d0	a9 20 00	lda #$0020	              LDA #$0020;
.3837d3	85 28		sta $28		              STA OPL2_REG_REGION
.3837d5	20 1b 3c	jsr $383c1b	              JSR OPL2_GET_REG_OFFSET
.3837d8	e2 20		sep #$20	                SEP #$20        ; set A short
.3837da	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3837dc	29 20		and #$20	              AND #$20
.3837de	6b		rtl		                RTL
.3837df					OPL2_SET_ENVELOPESCALING
.3837df	48		pha		                PHA             ; begin setdp macro
.3837e0	08		php		                PHP
.3837e1	c2 20		rep #$20	                REP #$20        ; set A long
.3837e3	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3837e6	5b		tcd		                TCD
.3837e7	28		plp		                PLP
.3837e8	68		pla		                PLA             ; end setdp macro
.3837e9	08		php		              PHP ; Push the Carry
.3837ea	c2 20		rep #$20	                REP #$20        ; set A long
.3837ec	18		clc		              CLC
.3837ed	a9 20 00	lda #$0020	              LDA #$0020;
.3837f0	85 28		sta $28		              STA OPL2_REG_REGION
.3837f2	20 1b 3c	jsr $383c1b	              JSR OPL2_GET_REG_OFFSET
.3837f5	28		plp		              PLP ; Pull the Carry out
.3837f6	e2 20		sep #$20	                SEP #$20        ; set A short
.3837f8	b0 08		bcs $383802	              BCS OPL2_Set_EnvelopeScaling_Set;
.3837fa	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3837fc	29 ef		and #$ef	              AND #$EF
.3837fe	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383800	80 06		bra $383808	              BRA OPL2_Set_EnvelopeScaling_Exit
.383802					OPL2_Set_EnvelopeScaling_Set
.383802	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383804	09 10		ora #$10	              ORA #$10
.383806	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383808					OPL2_Set_EnvelopeScaling_Exit
.383808	6b		rtl		                RTL
.383809					OPL2_GET_ENVELOPESCALING
.383809	48		pha		                PHA             ; begin setdp macro
.38380a	08		php		                PHP
.38380b	c2 20		rep #$20	                REP #$20        ; set A long
.38380d	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383810	5b		tcd		                TCD
.383811	28		plp		                PLP
.383812	68		pla		                PLA             ; end setdp macro
.383813	c2 20		rep #$20	                REP #$20        ; set A long
.383815	a9 20 00	lda #$0020	              LDA #$0020;
.383818	85 28		sta $28		              STA OPL2_REG_REGION
.38381a	20 1b 3c	jsr $383c1b	              JSR OPL2_GET_REG_OFFSET
.38381d	e2 20		sep #$20	                SEP #$20        ; set A short
.38381f	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383821	29 10		and #$10	              AND #$10
.383823	6b		rtl		                RTL
.383824					OPL2_GET_MODFREQMULTIPLE
.383824	48		pha		                PHA             ; begin setdp macro
.383825	08		php		                PHP
.383826	c2 20		rep #$20	                REP #$20        ; set A long
.383828	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.38382b	5b		tcd		                TCD
.38382c	28		plp		                PLP
.38382d	68		pla		                PLA             ; end setdp macro
.38382e	c2 20		rep #$20	                REP #$20        ; set A long
.383830	a9 20 00	lda #$0020	              LDA #$0020;
.383833	85 28		sta $28		              STA OPL2_REG_REGION
.383835	20 1b 3c	jsr $383c1b	              JSR OPL2_GET_REG_OFFSET
.383838	e2 20		sep #$20	                SEP #$20        ; set A short
.38383a	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.38383c	29 0f		and #$0f	              AND #$0F
.38383e	6b		rtl		              RTL
.38383f					OPL2_SET_MODFREQMULTIPLE
.38383f	48		pha		                PHA             ; begin setdp macro
.383840	08		php		                PHP
.383841	c2 20		rep #$20	                REP #$20        ; set A long
.383843	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383846	5b		tcd		                TCD
.383847	28		plp		                PLP
.383848	68		pla		                PLA             ; end setdp macro
.383849	c2 20		rep #$20	                REP #$20        ; set A long
.38384b	a9 20 00	lda #$0020	                LDA #$0020;
.38384e	85 28		sta $28		                STA OPL2_REG_REGION
.383850	20 1b 3c	jsr $383c1b	                JSR OPL2_GET_REG_OFFSET
.383853	e2 20		sep #$20	                SEP #$20        ; set A short
.383855	a5 32		lda $32		                LDA OPL2_PARAMETER0
.383857	29 0f		and #$0f	                AND #$0F
.383859	85 32		sta $32		                STA OPL2_PARAMETER0
.38385b	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.38385d	29 f0		and #$f0	                AND #$F0
.38385f	05 32		ora $32		                ORA OPL2_PARAMETER0
.383861	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383863	6b		rtl		                RTL
.383864					OPL2_SET_SCALINGLEVEL
.383864	48		pha		                PHA             ; begin setdp macro
.383865	08		php		                PHP
.383866	c2 20		rep #$20	                REP #$20        ; set A long
.383868	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.38386b	5b		tcd		                TCD
.38386c	28		plp		                PLP
.38386d	68		pla		                PLA             ; end setdp macro
.38386e	c2 20		rep #$20	                REP #$20        ; set A long
.383870	a9 40 00	lda #$0040	                LDA #$0040;
.383873	85 28		sta $28		                STA OPL2_REG_REGION
.383875	20 1b 3c	jsr $383c1b	                JSR OPL2_GET_REG_OFFSET
.383878	e2 20		sep #$20	                SEP #$20        ; set A short
.38387a	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.38387c	29 03		and #$03	                AND #$03
.38387e	0a		asl a		                ASL
.38387f	0a		asl a		                ASL
.383880	0a		asl a		                ASL
.383881	0a		asl a		                ASL
.383882	0a		asl a		                ASL
.383883	0a		asl a		                ASL
.383884	85 32		sta $32		                STA OPL2_PARAMETER0
.383886	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383888	29 3f		and #$3f	                AND #$3F
.38388a	05 32		ora $32		                ORA OPL2_PARAMETER0
.38388c	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.38388e	6b		rtl		                RTL
.38388f					OPL2_SET_VOLUME
.38388f	48		pha		                PHA             ; begin setdp macro
.383890	08		php		                PHP
.383891	c2 20		rep #$20	                REP #$20        ; set A long
.383893	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383896	5b		tcd		                TCD
.383897	28		plp		                PLP
.383898	68		pla		                PLA             ; end setdp macro
.383899	c2 20		rep #$20	                REP #$20        ; set A long
.38389b	a9 40 00	lda #$0040	                LDA #$0040  ;
.38389e	85 28		sta $28		                STA OPL2_REG_REGION
.3838a0	20 1b 3c	jsr $383c1b	                JSR OPL2_GET_REG_OFFSET
.3838a3	e2 20		sep #$20	                SEP #$20        ; set A short
.3838a5	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Volume
.3838a7	29 3f		and #$3f	                AND #$3F
.3838a9	85 32		sta $32		                STA OPL2_PARAMETER0
.3838ab	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3838ad	29 c0		and #$c0	                AND #$C0
.3838af	05 32		ora $32		                ORA OPL2_PARAMETER0
.3838b1	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3838b3	6b		rtl		                RTL
.3838b4					OPL2_GET_VOLUME
.3838b4	48		pha		                PHA             ; begin setdp macro
.3838b5	08		php		                PHP
.3838b6	c2 20		rep #$20	                REP #$20        ; set A long
.3838b8	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3838bb	5b		tcd		                TCD
.3838bc	28		plp		                PLP
.3838bd	68		pla		                PLA             ; end setdp macro
.3838be	c2 20		rep #$20	                REP #$20        ; set A long
.3838c0	a9 40 00	lda #$0040	                LDA #$0040  ;
.3838c3	85 28		sta $28		                STA OPL2_REG_REGION
.3838c5	20 1b 3c	jsr $383c1b	                JSR OPL2_GET_REG_OFFSET
.3838c8	e2 20		sep #$20	                SEP #$20        ; set A short
.3838ca	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3838cc	29 3f		and #$3f	                AND #$3F
.3838ce	6b		rtl		                RTL
.3838cf					OPL2_SET_ATTACK
.3838cf	48		pha		                PHA             ; begin setdp macro
.3838d0	08		php		                PHP
.3838d1	c2 20		rep #$20	                REP #$20        ; set A long
.3838d3	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3838d6	5b		tcd		                TCD
.3838d7	28		plp		                PLP
.3838d8	68		pla		                PLA             ; end setdp macro
.3838d9	c2 20		rep #$20	                REP #$20        ; set A long
.3838db	a9 60 00	lda #$0060	                LDA #$0060  ;
.3838de	85 28		sta $28		                STA OPL2_REG_REGION
.3838e0	20 1b 3c	jsr $383c1b	                JSR OPL2_GET_REG_OFFSET
.3838e3	e2 20		sep #$20	                SEP #$20        ; set A short
.3838e5	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.3838e7	29 0f		and #$0f	                AND #$0F
.3838e9	0a		asl a		                ASL
.3838ea	0a		asl a		                ASL
.3838eb	0a		asl a		                ASL
.3838ec	0a		asl a		                ASL
.3838ed	85 32		sta $32		                STA OPL2_PARAMETER0
.3838ef	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3838f1	29 0f		and #$0f	                AND #$0F
.3838f3	05 32		ora $32		                ORA OPL2_PARAMETER0
.3838f5	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3838f7	6b		rtl		                RTL
.3838f8					OPL2_GET_ATTACK
.3838f8	48		pha		                PHA             ; begin setdp macro
.3838f9	08		php		                PHP
.3838fa	c2 20		rep #$20	                REP #$20        ; set A long
.3838fc	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3838ff	5b		tcd		                TCD
.383900	28		plp		                PLP
.383901	68		pla		                PLA             ; end setdp macro
.383902	c2 20		rep #$20	                REP #$20        ; set A long
.383904	a9 60 00	lda #$0060	                LDA #$0060
.383907	85 28		sta $28		                STA OPL2_REG_REGION
.383909	20 1b 3c	jsr $383c1b	                JSR OPL2_GET_REG_OFFSET
.38390c	e2 20		sep #$20	                SEP #$20        ; set A short
.38390e	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383910	29 f0		and #$f0	                AND #$F0
.383912	4a		lsr a		                LSR
.383913	4a		lsr a		                LSR
.383914	4a		lsr a		                LSR
.383915	4a		lsr a		                LSR
.383916	6b		rtl		                RTL
.383917					OPL2_SET_DECAY
.383917	48		pha		                PHA             ; begin setdp macro
.383918	08		php		                PHP
.383919	c2 20		rep #$20	                REP #$20        ; set A long
.38391b	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.38391e	5b		tcd		                TCD
.38391f	28		plp		                PLP
.383920	68		pla		                PLA             ; end setdp macro
.383921	c2 20		rep #$20	                REP #$20        ; set A long
.383923	a9 60 00	lda #$0060	                LDA #$0060;
.383926	85 28		sta $28		                STA OPL2_REG_REGION
.383928	20 1b 3c	jsr $383c1b	                JSR OPL2_GET_REG_OFFSET
.38392b	e2 20		sep #$20	                SEP #$20        ; set A short
.38392d	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.38392f	29 0f		and #$0f	                AND #$0F
.383931	85 32		sta $32		                STA OPL2_PARAMETER0
.383933	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383935	29 f0		and #$f0	                AND #$F0
.383937	05 32		ora $32		                ORA OPL2_PARAMETER0
.383939	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.38393b	6b		rtl		                RTL
.38393c					OPL2_GET_DECAY
.38393c	48		pha		                PHA             ; begin setdp macro
.38393d	08		php		                PHP
.38393e	c2 20		rep #$20	                REP #$20        ; set A long
.383940	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383943	5b		tcd		                TCD
.383944	28		plp		                PLP
.383945	68		pla		                PLA             ; end setdp macro
.383946	c2 20		rep #$20	                REP #$20        ; set A long
.383948	a9 60 00	lda #$0060	                LDA #$0060
.38394b	85 28		sta $28		                STA OPL2_REG_REGION
.38394d	20 1b 3c	jsr $383c1b	                JSR OPL2_GET_REG_OFFSET
.383950	e2 20		sep #$20	                SEP #$20        ; set A short
.383952	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383954	29 0f		and #$0f	                AND #$0F
.383956	6b		rtl		                RTL
.383957					OPL2_SET_SUSTAIN
.383957	48		pha		                PHA             ; begin setdp macro
.383958	08		php		                PHP
.383959	c2 20		rep #$20	                REP #$20        ; set A long
.38395b	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.38395e	5b		tcd		                TCD
.38395f	28		plp		                PLP
.383960	68		pla		                PLA             ; end setdp macro
.383961	c2 20		rep #$20	                REP #$20        ; set A long
.383963	a9 80 00	lda #$0080	                LDA #$0080;
.383966	85 28		sta $28		                STA OPL2_REG_REGION
.383968	20 1b 3c	jsr $383c1b	                JSR OPL2_GET_REG_OFFSET
.38396b	e2 20		sep #$20	                SEP #$20        ; set A short
.38396d	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.38396f	29 0f		and #$0f	                AND #$0F
.383971	0a		asl a		                ASL
.383972	0a		asl a		                ASL
.383973	0a		asl a		                ASL
.383974	0a		asl a		                ASL
.383975	85 32		sta $32		                STA OPL2_PARAMETER0
.383977	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383979	29 0f		and #$0f	                AND #$0F
.38397b	05 32		ora $32		                ORA OPL2_PARAMETER0
.38397d	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.38397f	6b		rtl		                RTL
.383980					OPL2_GET_SUSTAIN
.383980	48		pha		                PHA             ; begin setdp macro
.383981	08		php		                PHP
.383982	c2 20		rep #$20	                REP #$20        ; set A long
.383984	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383987	5b		tcd		                TCD
.383988	28		plp		                PLP
.383989	68		pla		                PLA             ; end setdp macro
.38398a	c2 20		rep #$20	                REP #$20        ; set A long
.38398c	a9 80 00	lda #$0080	                LDA #$0080
.38398f	85 28		sta $28		                STA OPL2_REG_REGION
.383991	20 1b 3c	jsr $383c1b	                JSR OPL2_GET_REG_OFFSET
.383994	e2 20		sep #$20	                SEP #$20        ; set A short
.383996	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383998	29 f0		and #$f0	                AND #$F0
.38399a	4a		lsr a		                LSR
.38399b	4a		lsr a		                LSR
.38399c	4a		lsr a		                LSR
.38399d	4a		lsr a		                LSR
.38399e	6b		rtl		                RTL
.38399f					OPL2_SET_RELEASE
.38399f	48		pha		                PHA             ; begin setdp macro
.3839a0	08		php		                PHP
.3839a1	c2 20		rep #$20	                REP #$20        ; set A long
.3839a3	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3839a6	5b		tcd		                TCD
.3839a7	28		plp		                PLP
.3839a8	68		pla		                PLA             ; end setdp macro
.3839a9	c2 20		rep #$20	                REP #$20        ; set A long
.3839ab	a9 80 00	lda #$0080	                LDA #$0080;
.3839ae	85 28		sta $28		                STA OPL2_REG_REGION
.3839b0	20 1b 3c	jsr $383c1b	                JSR OPL2_GET_REG_OFFSET
.3839b3	e2 20		sep #$20	                SEP #$20        ; set A short
.3839b5	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.3839b7	29 0f		and #$0f	                AND #$0F
.3839b9	85 32		sta $32		                STA OPL2_PARAMETER0
.3839bb	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3839bd	29 f0		and #$f0	                AND #$F0
.3839bf	05 32		ora $32		                ORA OPL2_PARAMETER0
.3839c1	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3839c3	6b		rtl		                RTL
.3839c4					OPL2_GET_RELEASE
.3839c4	48		pha		                PHA             ; begin setdp macro
.3839c5	08		php		                PHP
.3839c6	c2 20		rep #$20	                REP #$20        ; set A long
.3839c8	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3839cb	5b		tcd		                TCD
.3839cc	28		plp		                PLP
.3839cd	68		pla		                PLA             ; end setdp macro
.3839ce	c2 20		rep #$20	                REP #$20        ; set A long
.3839d0	a9 80 00	lda #$0080	                LDA #$0080
.3839d3	85 28		sta $28		                STA OPL2_REG_REGION
.3839d5	20 1b 3c	jsr $383c1b	                JSR OPL2_GET_REG_OFFSET
.3839d8	e2 20		sep #$20	                SEP #$20        ; set A short
.3839da	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3839dc	29 0f		and #$0f	                AND #$0F
.3839de	6b		rtl		                RTL
.3839df					OPL2_SET_FNUMBER
.3839df	48		pha		                PHA             ; begin setdp macro
.3839e0	08		php		                PHP
.3839e1	c2 20		rep #$20	                REP #$20        ; set A long
.3839e3	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3839e6	5b		tcd		                TCD
.3839e7	28		plp		                PLP
.3839e8	68		pla		                PLA             ; end setdp macro
.3839e9	e2 20		sep #$20	                SEP #$20        ; set A short
.3839eb	18		clc		                CLC
.3839ec	a5 27		lda $27		                LDA OPL2_CHANNEL
.3839ee	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.3839f0	69 a0		adc #$a0	                ADC #$A0
.3839f2	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.3839f4	a9 00		lda #$00	                LDA #$00
.3839f6	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.3839f8	c2 30		rep #$30	                REP #$30        ; set A&X long
.3839fa	18		clc		                CLC
.3839fb	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.3839fe	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.383a00	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.383a02	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.383a05	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.383a07	e2 20		sep #$20	                SEP #$20        ; set A short
.383a09	a5 32		lda $32		                LDA OPL2_PARAMETER0     ; Load the first 8 Bits Value of FNumber
.383a0b	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]  ; Load
.383a0d	18		clc		                CLC
.383a0e	a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.383a10	69 10		adc #$10	                ADC #$10
.383a12	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.383a14	a5 33		lda $33		                LDA OPL2_PARAMETER1
.383a16	29 03		and #$03	                AND #$03
.383a18	85 33		sta $33		                STA OPL2_PARAMETER1
.383a1a	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383a1c	29 fc		and #$fc	                AND #$FC
.383a1e	05 33		ora $33		                ORA OPL2_PARAMETER1
.383a20	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383a22	6b		rtl		                RTL
.383a23					OPL2_GET_FNUMBER
.383a23	48		pha		                PHA             ; begin setdp macro
.383a24	08		php		                PHP
.383a25	c2 20		rep #$20	                REP #$20        ; set A long
.383a27	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383a2a	5b		tcd		                TCD
.383a2b	28		plp		                PLP
.383a2c	68		pla		                PLA             ; end setdp macro
.383a2d	e2 20		sep #$20	                SEP #$20        ; set A short
.383a2f	18		clc		                CLC
.383a30	a5 27		lda $27		                LDA OPL2_CHANNEL
.383a32	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.383a34	69 a0		adc #$a0	                ADC #$A0
.383a36	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.383a38	a9 00		lda #$00	                LDA #$00
.383a3a	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.383a3c	c2 30		rep #$30	                REP #$30        ; set A&X long
.383a3e	18		clc		                CLC
.383a3f	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.383a42	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.383a44	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.383a46	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.383a49	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.383a4b	e2 20		sep #$20	                SEP #$20        ; set A short
.383a4d	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383a4f	85 32		sta $32		                STA OPL2_PARAMETER0
.383a51	18		clc		                CLC
.383a52	a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.383a54	69 10		adc #$10	                ADC #$10
.383a56	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.383a58	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383a5a	29 03		and #$03	                AND #$03
.383a5c	85 33		sta $33		                STA OPL2_PARAMETER1
.383a5e	6b		rtl		                RTL
.383a5f					OPL2_Set_Frequency
.383a5f	6b		rtl		                RTL
.383a60					OPL2_Get_Frequency
.383a60	6b		rtl		                RTL
.383a61					OPL2_SET_BLOCK
.383a61	48		pha		                PHA             ; begin setdp macro
.383a62	08		php		                PHP
.383a63	c2 20		rep #$20	                REP #$20        ; set A long
.383a65	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383a68	5b		tcd		                TCD
.383a69	28		plp		                PLP
.383a6a	68		pla		                PLA             ; end setdp macro
.383a6b	e2 20		sep #$20	                SEP #$20        ; set A short
.383a6d	18		clc		                CLC
.383a6e	a5 27		lda $27		                LDA OPL2_CHANNEL
.383a70	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.383a72	69 b0		adc #$b0	                ADC #$B0
.383a74	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.383a76	a9 00		lda #$00	                LDA #$00
.383a78	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.383a7a	c2 30		rep #$30	                REP #$30        ; set A&X long
.383a7c	18		clc		                CLC
.383a7d	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.383a80	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.383a82	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.383a84	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.383a87	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.383a89	e2 20		sep #$20	                SEP #$20        ; set A short
.383a8b	a5 31		lda $31		                LDA OPL2_OCTAVE
.383a8d	29 07		and #$07	                AND #$07
.383a8f	0a		asl a		                ASL
.383a90	0a		asl a		                ASL
.383a91	85 31		sta $31		                STA OPL2_OCTAVE
.383a93	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383a95	29 e3		and #$e3	                AND #$E3
.383a97	05 31		ora $31		                ORA OPL2_OCTAVE
.383a99	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383a9b	60		rts		                RTS
.383a9c					OPL2_SET_KEYON
.383a9c	48		pha		                PHA             ; begin setdp macro
.383a9d	08		php		                PHP
.383a9e	c2 20		rep #$20	                REP #$20        ; set A long
.383aa0	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383aa3	5b		tcd		                TCD
.383aa4	28		plp		                PLP
.383aa5	68		pla		                PLA             ; end setdp macro
.383aa6	e2 20		sep #$20	                SEP #$20        ; set A short
.383aa8	18		clc		                CLC
.383aa9	a5 27		lda $27		                LDA OPL2_CHANNEL
.383aab	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.383aad	69 b0		adc #$b0	                ADC #$B0
.383aaf	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.383ab1	a9 00		lda #$00	                LDA #$00
.383ab3	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.383ab5	c2 30		rep #$30	                REP #$30        ; set A&X long
.383ab7	18		clc		                CLC
.383ab8	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.383abb	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.383abd	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.383abf	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.383ac2	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.383ac4	e2 20		sep #$20	                SEP #$20        ; set A short
.383ac6	a5 32		lda $32		                LDA OPL2_PARAMETER0
.383ac8	29 01		and #$01	                AND #$01
.383aca	f0 02		beq $383ace	                BEQ SET_KEYON_OFF
.383acc	a9 20		lda #$20	                LDA #$20
.383ace					    SET_KEYON_OFF
.383ace	85 32		sta $32		                STA OPL2_PARAMETER0
.383ad0	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383ad2	29 df		and #$df	                AND #$DF
.383ad4	05 32		ora $32		                ORA OPL2_PARAMETER0
.383ad6	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383ad8	60		rts		                RTS
.383ad9					OPL2_SET_FEEDBACK
.383ad9	48		pha		                PHA             ; begin setdp macro
.383ada	08		php		                PHP
.383adb	c2 20		rep #$20	                REP #$20        ; set A long
.383add	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383ae0	5b		tcd		                TCD
.383ae1	28		plp		                PLP
.383ae2	68		pla		                PLA             ; end setdp macro
.383ae3	e2 20		sep #$20	                SEP #$20        ; set A short
.383ae5	18		clc		              CLC
.383ae6	a5 27		lda $27		              LDA OPL2_CHANNEL
.383ae8	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.383aea	69 c0		adc #$c0	              ADC #$C0
.383aec	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.383aee	a9 00		lda #$00	              LDA #$00
.383af0	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.383af2	c2 30		rep #$30	                REP #$30        ; set A&X long
.383af4	18		clc		              CLC
.383af5	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.383af8	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.383afa	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.383afc	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.383aff	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.383b01	e2 20		sep #$20	                SEP #$20        ; set A short
.383b03	a5 32		lda $32		              LDA OPL2_PARAMETER0
.383b05	29 07		and #$07	              AND #$07
.383b07	0a		asl a		              ASL
.383b08	85 32		sta $32		              STA OPL2_PARAMETER0
.383b0a	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383b0c	29 01		and #$01	              AND #$01
.383b0e	05 32		ora $32		              ORA OPL2_PARAMETER0
.383b10	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383b12	6b		rtl		                RTL
.383b13					OPL2_SET_SYNTHMODE
.383b13	48		pha		                PHA             ; begin setdp macro
.383b14	08		php		                PHP
.383b15	c2 20		rep #$20	                REP #$20        ; set A long
.383b17	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383b1a	5b		tcd		                TCD
.383b1b	28		plp		                PLP
.383b1c	68		pla		                PLA             ; end setdp macro
.383b1d	08		php		              PHP ; Push the Carry
.383b1e	e2 20		sep #$20	                SEP #$20        ; set A short
.383b20	18		clc		              CLC
.383b21	a5 27		lda $27		              LDA OPL2_CHANNEL
.383b23	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.383b25	69 c0		adc #$c0	              ADC #$C0
.383b27	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.383b29	a9 00		lda #$00	              LDA #$00
.383b2b	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.383b2d	c2 30		rep #$30	                REP #$30        ; set A&X long
.383b2f	18		clc		              CLC
.383b30	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.383b33	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.383b35	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.383b37	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.383b3a	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.383b3c	28		plp		              PLP ; Pull the Carry out
.383b3d	e2 20		sep #$20	                SEP #$20        ; set A short
.383b3f	b0 08		bcs $383b49	              BCS OPL2_Set_Synthmode_Set;
.383b41	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383b43	29 fe		and #$fe	              AND #$FE
.383b45	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383b47	80 06		bra $383b4f	              BRA OPL2_Set_Synthmode_Exit
.383b49					OPL2_Set_Synthmode_Set
.383b49	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383b4b	09 01		ora #$01	              ORA #$01
.383b4d	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383b4f					OPL2_Set_Synthmode_Exit
.383b4f	6b		rtl		                RTL
.383b50					OPL2_SET_DEEPTREMOLO
.383b50	48		pha		                PHA             ; begin setdp macro
.383b51	08		php		                PHP
.383b52	c2 20		rep #$20	                REP #$20        ; set A long
.383b54	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383b57	5b		tcd		                TCD
.383b58	28		plp		                PLP
.383b59	68		pla		                PLA             ; end setdp macro
.383b5a	c2 20		rep #$20	                REP #$20        ; set A long
.383b5c	a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.383b5f	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.383b61	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.383b64	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.383b66	e2 20		sep #$20	                SEP #$20        ; set A short
.383b68	b0 08		bcs $383b72	              BCS OPL2_Set_DeepTremolo_Set;
.383b6a	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383b6c	29 7f		and #$7f	              AND #$7F
.383b6e	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383b70	80 06		bra $383b78	              BRA OPL2_Set_DeepTremolo_Exit
.383b72					OPL2_Set_DeepTremolo_Set
.383b72	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383b74	09 80		ora #$80	              ORA #$80
.383b76	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383b78					OPL2_Set_DeepTremolo_Exit
.383b78	6b		rtl		                RTL
.383b79					OPL2_SET_DEEPVIBRATO
.383b79	48		pha		                PHA             ; begin setdp macro
.383b7a	08		php		                PHP
.383b7b	c2 20		rep #$20	                REP #$20        ; set A long
.383b7d	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383b80	5b		tcd		                TCD
.383b81	28		plp		                PLP
.383b82	68		pla		                PLA             ; end setdp macro
.383b83	c2 20		rep #$20	                REP #$20        ; set A long
.383b85	a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.383b88	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.383b8a	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.383b8d	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.383b8f	e2 20		sep #$20	                SEP #$20        ; set A short
.383b91	b0 08		bcs $383b9b	              BCS OPL2_Set_DeepVibrato_Set;
.383b93	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383b95	29 bf		and #$bf	              AND #$BF
.383b97	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383b99	80 06		bra $383ba1	              BRA OPL2_Set_DeepVibrato_Exit
.383b9b					OPL2_Set_DeepVibrato_Set
.383b9b	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383b9d	09 40		ora #$40	              ORA #$40
.383b9f	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383ba1					OPL2_Set_DeepVibrato_Exit
.383ba1	6b		rtl		                RTL
.383ba2					OPL2_SET_PERCUSSION
.383ba2	48		pha		                PHA             ; begin setdp macro
.383ba3	08		php		                PHP
.383ba4	c2 20		rep #$20	                REP #$20        ; set A long
.383ba6	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383ba9	5b		tcd		                TCD
.383baa	28		plp		                PLP
.383bab	68		pla		                PLA             ; end setdp macro
.383bac	c2 20		rep #$20	                REP #$20        ; set A long
.383bae	a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.383bb1	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.383bb3	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.383bb6	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.383bb8	e2 20		sep #$20	                SEP #$20        ; set A short
.383bba	b0 08		bcs $383bc4	                BCS OPL2_Set_Percussion_Set;
.383bbc	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383bbe	29 df		and #$df	                AND #$DF
.383bc0	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383bc2	80 06		bra $383bca	                BRA OPL2_Set_Percussion_Exit
.383bc4					OPL2_Set_Percussion_Set
.383bc4	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383bc6	09 20		ora #$20	                ORA #$20
.383bc8	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383bca					OPL2_Set_Percussion_Exit
.383bca	6b		rtl		                RTL
.383bcb					OPL2_SET_DRUMS
.383bcb	48		pha		                PHA             ; begin setdp macro
.383bcc	08		php		                PHP
.383bcd	c2 20		rep #$20	                REP #$20        ; set A long
.383bcf	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383bd2	5b		tcd		                TCD
.383bd3	28		plp		                PLP
.383bd4	68		pla		                PLA             ; end setdp macro
.383bd5	c2 20		rep #$20	                REP #$20        ; set A long
.383bd7	a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.383bda	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.383bdc	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.383bdf	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.383be1	e2 20		sep #$20	                SEP #$20        ; set A short
.383be3	a5 32		lda $32		                LDA OPL2_PARAMETER0
.383be5	29 1f		and #$1f	                AND #$1F
.383be7	85 32		sta $32		                STA OPL2_PARAMETER0
.383be9	49 ff		eor #$ff	                EOR #$FF
.383beb	85 33		sta $33		                STA OPL2_PARAMETER1
.383bed	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383bef	25 33		and $33		                AND OPL2_PARAMETER1
.383bf1	05 32		ora $32		                ORA OPL2_PARAMETER0
.383bf3	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383bf5	6b		rtl		                RTL
.383bf6					OPL2_SET_WAVEFORM
.383bf6	48		pha		                PHA             ; begin setdp macro
.383bf7	08		php		                PHP
.383bf8	c2 20		rep #$20	                REP #$20        ; set A long
.383bfa	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383bfd	5b		tcd		                TCD
.383bfe	28		plp		                PLP
.383bff	68		pla		                PLA             ; end setdp macro
.383c00	c2 20		rep #$20	                REP #$20        ; set A long
.383c02	a9 e0 00	lda #$00e0	                LDA #$00E0;
.383c05	85 28		sta $28		                STA OPL2_REG_REGION
.383c07	20 1b 3c	jsr $383c1b	                JSR OPL2_GET_REG_OFFSET
.383c0a	e2 20		sep #$20	                SEP #$20        ; set A short
.383c0c	a5 32		lda $32		                LDA OPL2_PARAMETER0
.383c0e	29 03		and #$03	                AND #$03
.383c10	85 32		sta $32		                STA OPL2_PARAMETER0
.383c12	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383c14	29 fc		and #$fc	                AND #$FC
.383c16	05 32		ora $32		                ORA OPL2_PARAMETER0
.383c18	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383c1a	6b		rtl		                RTL
.383c1b					OPL2_GET_REG_OFFSET
.383c1b	e2 30		sep #$30	                SEP #$30        ; set A&X short
.383c1d	a5 27		lda $27		                LDA OPL2_CHANNEL
.383c1f	29 0f		and #$0f	                AND #$0F
.383c21	aa		tax		                TAX
.383c22	a5 26		lda $26		                LDA OPL2_OPERATOR   ; 0 = operator 1, other = operator 2
.383c24	d0 06		bne $383c2c	                BNE OPL2_Get_Register_Offset_l0
.383c26	bf 63 12 38	lda $381263,x	                LDA @lregisterOffsets_operator0, X
.383c2a	80 04		bra $383c30	                BRA OPL2_Get_Register_Offset_exit
.383c2c					OPL2_Get_Register_Offset_l0
.383c2c	bf 6c 12 38	lda $38126c,x	                LDA @lregisterOffsets_operator1, X
.383c30					OPL2_Get_Register_Offset_exit
.383c30	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.383c32	a9 00		lda #$00	                LDA #$00
.383c34	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.383c36	c2 30		rep #$30	                REP #$30        ; set A&X long
.383c38	18		clc		                CLC
.383c39	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.383c3c	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.383c3e	65 28		adc $28		                ADC OPL2_REG_REGION ; Ex: $20, or $40, $60, $80 (in 16bits)
.383c40	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.383c42	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.383c45	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.383c47	60		rts		                RTS

;******  Return to file: src\kernel.asm


;******  Processing file: src\sdcard_controller_def.asm

=$afea00				SDC_VERSION_REG         = $AFEA00    ; Ought to read 12
=$afea01				SDC_CONTROL_REG         = $AFEA01    ; Bit0 1 = Reset core logic, and registers. Self clearing
=$afea02				SDC_TRANS_TYPE_REG      = $AFEA02  ; Bit[1:0]
=$00					SDC_TRANS_DIRECT      = $00   ; 00 = Direct Access
=$01					SDC_TRANS_INIT_SD     = $01   ; 01 = Init SD
=$02					SDC_TRANS_READ_BLK    = $02   ; 10 = RW_READ_BLOCK (512 Bytes)
=$03					SDC_TRANS_WRITE_BLK   = $03   ; 11 = RW_WRITE_SD_BLOCK
=$afea03				SDC_TRANS_CONTROL_REG   = $AFEA03
=$01					SDC_TRANS_START         = $01
=$afea04				SDC_TRANS_STATUS_REG    = $AFEA04
=$01					SDC_TRANS_BUSY          = $01     ;  1= Transaction Busy
=$afea05				SDC_TRANS_ERROR_REG     = $AFEA05
=$00					SDC_TRANS_INIT_NO_ERR   = $00   ; Init Error Report [1:0]
=$01					SDC_TRANS_INIT_CMD0_ERR = $01
=$02					SDC_TRANS_INIT_CMD1_ERR = $02
=$00					SDC_TRANS_RD_NO_ERR     = $00   ; Read Error Report [3:2]
=$04					SDC_TRANS_RD_CMD_ERR    = $04
=$08					SDC_TRANS_RD_TOKEN_ERR  = $08
=$00					SDC_TRANS_WR_NO_ERR     = $00   ; Write Report Error  [5:4]
=$10					SDC_TRANS_WR_CMD_ERR    = $10   ;
=$20					SDC_TRANS_WR_DATA_ERR   = $20
=$30					SDC_TRANS_WR_BUSY_ERR   = $30
=$afea06				SDC_DIRECT_ACCESS_REG   = $AFEA06 ; SPI Direct Read and Write - Set DATA before initiating direct Access Transaction
=$afea07				SDC_SD_ADDR_7_0_REG     = $AFEA07 ; Set the ADDR before a block read or block write
=$afea08				SDC_SD_ADDR_15_8_REG    = $AFEA08 ; Addr0 [8:0] Always should be 0, since each block is 512Bytes
=$afea09				SDC_SD_ADDR_23_16_REG   = $AFEA09
=$afea0a				SDC_SD_ADDR_31_24_REG   = $AFEA0A
=$afea0b				SDC_SPI_CLK_DEL_REG     = $AFEA0B
=$afea10				SDC_RX_FIFO_DATA_REG    = $AFEA10 ; Data from the Block Read
=$afea12				SDC_RX_FIFO_DATA_CNT_HI = $AFEA12 ; How many Bytes in the FIFO HI
=$afea13				SDC_RX_FIFO_DATA_CNT_LO = $AFEA13 ; How many Bytes in the FIFO LO
=$afea14				SDC_RX_FIFO_CTRL_REG    = $AFEA14 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)
=$afea20				SDC_TX_FIFO_DATA_REG    = $AFEA20 ; Write Data Block here
=$afea24				SDC_TX_FIFO_CTRL_REG    = $AFEA24 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)

;******  Return to file: src\kernel.asm


;******  Processing file: src\sdos.asm


;******  Processing file: src\sdos_fat.asm


;******  Processing file: src\sdos_bios.asm

=0					BIOS_DEV_HD0 = 0
=1					BIOS_DEV_HD1 = 1
=2					BIOS_DEV_SD = 2
=3					BIOS_DEV_FDC = 3
=$80					BIOS_ERR_BADDEV = $80           ; BIOS bad device # error
.383c48					IGETBLOCK
.383c48	0b		phd		                PHD
.383c49	8b		phb		                PHB
.383c4a	08		php		                PHP
.383c4b	48		pha		                PHA             ; begin setdbr macro
.383c4c	08		php		                PHP
.383c4d	e2 20		sep #$20	                SEP #$20        ; set A short
.383c4f	a9 00		lda #$00	                LDA #0
.383c51	48		pha		                PHA
.383c52	ab		plb		                PLB
.383c53	28		plp		                PLP
.383c54	68		pla		                PLA             ; end setdbr macro
.383c55	48		pha		                PHA             ; begin setdp macro
.383c56	08		php		                PHP
.383c57	c2 20		rep #$20	                REP #$20        ; set A long
.383c59	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.383c5c	5b		tcd		                TCD
.383c5d	28		plp		                PLP
.383c5e	68		pla		                PLA             ; end setdp macro
.383c5f	e2 20		sep #$20	                SEP #$20        ; set A short
.383c61	a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.383c63	c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.383c65	f0 0b		beq $383c72	                BEQ sd_getblock                     ; Yes: go to the SDC GETBLOCK routine
.383c67	a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.383c69					ret_failure
.383c69	e2 20		sep #$20	                SEP #$20        ; set A short
.383c6b	85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.383c6d	28		plp		                PLP
.383c6e	ab		plb		                PLB
.383c6f	2b		pld		                PLD
.383c70	38		sec		                SEC                                 ; Return failure
.383c71	6b		rtl		                RTL
.383c72	22 0d 3d 38	jsl $383d0d	sd_getblock     JSL SDCGETBLOCK                     ; Call the SDC GETBLOCK routine
.383c76					ret_success
.383c76	e2 20		sep #$20	                SEP #$20        ; set A short
.383c78	64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.383c7a	28		plp		                PLP
.383c7b	ab		plb		                PLB
.383c7c	2b		pld		                PLD
.383c7d	38		sec		                SEC                                 ; Return success
.383c7e	6b		rtl		                RTL
.383c7f					IPUTBLOCK
.383c7f	0b		phd		                PHD
.383c80	8b		phb		                PHB
.383c81	08		php		                PHP
.383c82	48		pha		                PHA             ; begin setdbr macro
.383c83	08		php		                PHP
.383c84	e2 20		sep #$20	                SEP #$20        ; set A short
.383c86	a9 00		lda #$00	                LDA #0
.383c88	48		pha		                PHA
.383c89	ab		plb		                PLB
.383c8a	28		plp		                PLP
.383c8b	68		pla		                PLA             ; end setdbr macro
.383c8c	48		pha		                PHA             ; begin setdp macro
.383c8d	08		php		                PHP
.383c8e	c2 20		rep #$20	                REP #$20        ; set A long
.383c90	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.383c93	5b		tcd		                TCD
.383c94	28		plp		                PLP
.383c95	68		pla		                PLA             ; end setdp macro
.383c96	e2 20		sep #$20	                SEP #$20        ; set A short
.383c98	a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.383c9a	c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.383c9c	f0 0b		beq $383ca9	                BEQ sd_putblock                     ; Yes: go to the SDC PUTBLOCK routine
.383c9e	a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.383ca0					ret_failure
.383ca0	e2 20		sep #$20	                SEP #$20        ; set A short
.383ca2	85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.383ca4	28		plp		                PLP
.383ca5	ab		plb		                PLB
.383ca6	2b		pld		                PLD
.383ca7	38		sec		                SEC                                 ; Return failure
.383ca8	6b		rtl		                RTL
.383ca9	22 a2 3d 38	jsl $383da2	sd_putblock     JSL SDCPUTBLOCK                     ; Call the SDC PUTBLOCK routine
.383cad					ret_success
.383cad	e2 20		sep #$20	                SEP #$20        ; set A short
.383caf	64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.383cb1	28		plp		                PLP
.383cb2	ab		plb		                PLB
.383cb3	2b		pld		                PLD
.383cb4	38		sec		                SEC                                 ; Return success
.383cb5	6b		rtl		                RTL
.383cb6					SDCWAITBUSY
.383cb6	08		php		                PHP
.383cb7	e2 20		sep #$20	                SEP #$20        ; set A short
.383cb9	af 04 ea af	lda $afea04	wait_xact       LDA @l SDC_TRANS_STATUS_REG         ; Wait for the transaction to complete
.383cbd	29 01		and #$01	                AND #SDC_TRANS_BUSY
.383cbf	c9 01		cmp #$01	                CMP #SDC_TRANS_BUSY
.383cc1	f0 f6		beq $383cb9	                BEQ wait_xact
.383cc3	28		plp		                PLP
.383cc4	6b		rtl		                RTL
.383cc5					SDCRESET
.383cc5	08		php		                PHP
.383cc6	e2 20		sep #$20	                SEP #$20        ; set A short
.383cc8	a9 01		lda #$01	                LDA #1
.383cca	8f 01 ea af	sta $afea01	                STA @l SDC_CONTROL_REG
.383cce	28		plp		                PLP
.383ccf	6b		rtl		                RTL
.383cd0	0b		phd		SDCINIT         PHD
.383cd1	8b		phb		                PHB
.383cd2	08		php		                PHP
.383cd3	48		pha		                PHA             ; begin setdbr macro
.383cd4	08		php		                PHP
.383cd5	e2 20		sep #$20	                SEP #$20        ; set A short
.383cd7	a9 00		lda #$00	                LDA #0
.383cd9	48		pha		                PHA
.383cda	ab		plb		                PLB
.383cdb	28		plp		                PLP
.383cdc	68		pla		                PLA             ; end setdbr macro
.383cdd	48		pha		                PHA             ; begin setdp macro
.383cde	08		php		                PHP
.383cdf	c2 20		rep #$20	                REP #$20        ; set A long
.383ce1	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.383ce4	5b		tcd		                TCD
.383ce5	28		plp		                PLP
.383ce6	68		pla		                PLA             ; end setdp macro
.383ce7	e2 20		sep #$20	                SEP #$20        ; set A short
.383ce9	a9 01		lda #$01	                LDA #SDC_TRANS_INIT_SD
.383ceb	8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG           ; Set Init SD
.383cef	a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.383cf1	8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.383cf5	22 b6 3c 38	jsl $383cb6	                JSL SDCWAITBUSY                     ; Wait for initialization to complete
.383cf9	af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.383cfd	d0 07		bne $383d06	                BNE ret_error                       ; Is there one? Process the error
.383cff	64 00		stz $0320	ret_success     STZ BIOS_STATUS
.383d01	28		plp		                PLP
.383d02	ab		plb		                PLB
.383d03	2b		pld		                PLD
.383d04	38		sec		                SEC
.383d05	6b		rtl		                RTL
.383d06	85 00		sta $0320	ret_error       STA BIOS_STATUS
.383d08	28		plp		                PLP
.383d09	ab		plb		                PLB
.383d0a	2b		pld		                PLD
.383d0b	18		clc		                CLC
.383d0c	6b		rtl		                RTL
.383d0d					SDCGETBLOCK
.383d0d	0b		phd		                PHD
.383d0e	8b		phb		                PHB
.383d0f	08		php		                PHP
.383d10	48		pha		                PHA             ; begin setdbr macro
.383d11	08		php		                PHP
.383d12	e2 20		sep #$20	                SEP #$20        ; set A short
.383d14	a9 00		lda #$00	                LDA #0
.383d16	48		pha		                PHA
.383d17	ab		plb		                PLB
.383d18	28		plp		                PLP
.383d19	68		pla		                PLA             ; end setdbr macro
.383d1a	48		pha		                PHA             ; begin setdp macro
.383d1b	08		php		                PHP
.383d1c	c2 20		rep #$20	                REP #$20        ; set A long
.383d1e	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.383d21	5b		tcd		                TCD
.383d22	28		plp		                PLP
.383d23	68		pla		                PLA             ; end setdp macro
.383d24	e2 20		sep #$20	                SEP #$20        ; set A short
.383d26	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.383d2a	09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.383d2c	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.383d30	a9 00		lda #$00	                LDA #0
.383d32	8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.383d36	a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to read
.383d38	0a		asl a		                ASL A
.383d39	8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.383d3d	a5 03		lda $0323	                LDA BIOS_LBA+1
.383d3f	2a		rol a		                ROL A
.383d40	8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.383d44	a5 04		lda $0324	                LDA BIOS_LBA+2
.383d46	2a		rol a		                ROL A
.383d47	8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.383d4b	a9 02		lda #$02	                LDA #SDC_TRANS_READ_BLK             ; Set the transaction to READ
.383d4d	8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.383d51	a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.383d53	8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.383d57	22 b6 3c 38	jsl $383cb6	                JSL SDCWAITBUSY                     ; Wait for transaction to complete
.383d5b	af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.383d5f	d0 30		bne $383d91	                BNE ret_error                       ; Is there one? Process the error
.383d61	e2 20		sep #$20	                SEP #$20        ; set A short
.383d63	af 13 ea af	lda $afea13	                LDA @l SDC_RX_FIFO_DATA_CNT_LO      ; Record the number of bytes read
.383d67	85 0a		sta $032a	                STA BIOS_FIFO_COUNT
.383d69	af 12 ea af	lda $afea12	                LDA @l SDC_RX_FIFO_DATA_CNT_HI
.383d6d	85 0b		sta $032b	                STA BIOS_FIFO_COUNT+1
.383d6f	c2 10		rep #$10	                REP #$10        ; set X long
.383d71	a0 00 00	ldy #$0000	                LDY #0
.383d74	af 10 ea af	lda $afea10	loop_rd         LDA @l SDC_RX_FIFO_DATA_REG         ; Get the byte...
.383d78	97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y               ; Save it to the buffer
.383d7a	c8		iny		                INY                                 ; Advance to the next byte
.383d7b	c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.383d7e	d0 f4		bne $383d74	                BNE loop_rd                         ; No: keep reading
.383d80	64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.383d82	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.383d86	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.383d88	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.383d8c	28		plp		                PLP
.383d8d	ab		plb		                PLB
.383d8e	2b		pld		                PLD
.383d8f	38		sec		                SEC
.383d90	6b		rtl		                RTL
.383d91	85 00		sta $0320	ret_error       STA BIOS_STATUS
.383d93	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.383d97	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.383d99	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.383d9d	28		plp		                PLP
.383d9e	ab		plb		                PLB
.383d9f	2b		pld		                PLD
.383da0	18		clc		                CLC
.383da1	6b		rtl		                RTL
.383da2					SDCPUTBLOCK
.383da2	0b		phd		                PHD
.383da3	8b		phb		                PHB
.383da4	08		php		                PHP
.383da5	48		pha		                PHA             ; begin setdbr macro
.383da6	08		php		                PHP
.383da7	e2 20		sep #$20	                SEP #$20        ; set A short
.383da9	a9 00		lda #$00	                LDA #0
.383dab	48		pha		                PHA
.383dac	ab		plb		                PLB
.383dad	28		plp		                PLP
.383dae	68		pla		                PLA             ; end setdbr macro
.383daf	48		pha		                PHA             ; begin setdp macro
.383db0	08		php		                PHP
.383db1	c2 20		rep #$20	                REP #$20        ; set A long
.383db3	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.383db6	5b		tcd		                TCD
.383db7	28		plp		                PLP
.383db8	68		pla		                PLA             ; end setdp macro
.383db9	e2 20		sep #$20	                SEP #$20        ; set A short
.383dbb	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.383dbf	09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.383dc1	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.383dc5	c2 10		rep #$10	                REP #$10        ; set X long
.383dc7	a0 00 00	ldy #$0000	                LDY #0
.383dca	b7 06		lda [$0326],y	loop_wr         LDA [BIOS_BUFF_PTR],Y               ; Get the byte...
.383dcc	8f 20 ea af	sta $afea20	                STA @l SDC_TX_FIFO_DATA_REG         ; Save it to the SDC
.383dd0	c8		iny		                INY                                 ; Advance to the next byte
.383dd1	c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.383dd4	d0 f4		bne $383dca	                BNE loop_wr                         ; No: keep writing
.383dd6	a9 00		lda #$00	                LDA #0
.383dd8	8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.383ddc	a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to write
.383dde	0a		asl a		                ASL A
.383ddf	8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.383de3	a5 03		lda $0323	                LDA BIOS_LBA+1
.383de5	2a		rol a		                ROL A
.383de6	8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.383dea	a5 04		lda $0324	                LDA BIOS_LBA+2
.383dec	2a		rol a		                ROL A
.383ded	8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.383df1	a9 03		lda #$03	                LDA #SDC_TRANS_WRITE_BLK            ; Set the transaction to WRITE
.383df3	8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.383df7	a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.383df9	8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.383dfd	22 b6 3c 38	jsl $383cb6	                JSL SDCWAITBUSY                     ; Wait for transaction to complete
.383e01	af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.383e05	d0 11		bne $383e18	                BNE ret_error                       ; Is there one? Process the error
.383e07	64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.383e09	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.383e0d	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.383e0f	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.383e13	28		plp		                PLP
.383e14	ab		plb		                PLB
.383e15	2b		pld		                PLD
.383e16	38		sec		                SEC
.383e17	6b		rtl		                RTL
.383e18	85 00		sta $0320	ret_error       STA BIOS_STATUS
.383e1a	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.383e1e	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.383e20	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.383e24	28		plp		                PLP
.383e25	ab		plb		                PLB
.383e26	2b		pld		                PLD
.383e27	18		clc		                CLC
.383e28	6b		rtl		                RTL

;******  Return to file: src\sdos_fat.asm

.0000					DIRENTRY
>0000					SHORTNAME               .fill 11        ; $00 - The short name of the file (8 name, 3 extension)
>000b					ATTRIBUTE               .byte ?         ; $0B - The attribute bits
>000c					IGNORED1                .word ?         ; $0C - Unused (by us) bytes
>000e					CREATE_TIME             .word ?         ; $0E - Creation time
>0010					CREATE_DATE             .word ?         ; $10 - Creation date
>0012					ACCESS_DATE             .word ?         ; $12 - Last access date
>0014					CLUSTER_H               .word ?         ; $14 - High word of the first cluster #
>0016					MODIFIED_TIME           .word ?         ; $16 - Last modified time
>0018					MODIFIED_DATE           .word ?         ; $18 - Last modified date
>001a					CLUSTER_L               .word ?         ; $1A - Low word of the first cluster #
>001c					SIZE                    .dword ?        ; $1C - The size of the file (in bytes)
=$01					DOS_ATTR_RO = $01                       ; File is read-only
=$02					DOS_ATTR_HIDDEN = $02                   ; File is hidden
=$04					DOS_ATTR_SYSTEM = $04                   ; File is a system file
=$08					DOS_ATTR_VOLUME = $08                   ; Entry is the volume label
=$10					DOS_ATTR_DIR = $10                      ; Entry is a directory
=$20					DOS_ATTR_ARCH = $20                     ; Entry has changed since last backup
=$0f					DOS_ATTR_LONGNAME = $0F                 ; Entry is the long file name
.0000					FILEDESC
>0000					STATUS              .byte ?             ; The status flags of the file descriptor (open, closed, error, EOF, etc.)
>0001					DEV                 .byte ?             ; The ID of the device holding the file
>0002					PATH                .dword ?            ; Pointer to a NULL terminated path string
>0006					CLUSTER             .dword ?            ; The current cluster of the file.
>000a					FIRST_CLUSTER       .dword ?            ; The ID of the first cluster in the file
>000e					BUFFER              .dword ?            ; Pointer to a cluster-sized buffer
>0012					SIZE                .dword ?            ; The size of the file
>0016					CREATE_DATE         .word ?             ; The creation date of the file
>0018					CREATE_TIME         .word ?             ; The creation time of the file
>001a					MODIFIED_DATE       .word ?             ; The modification date of the file
>001c					MODIFIED_TIME       .word ?             ; The modification time of the file
=$01					FD_STAT_READ = $01                      ; The file is readable
=$02					FD_STAT_WRITE = $02                     ; The file is writable
=$40					FD_STAT_OPEN = $40                      ; The file is open
=$60					FD_STAT_ERROR = $60                     ; The file is in an error condition
=$80					FD_STAT_EOF = $80                       ; The file cursor is at the end of the file
=$0fffffff				FAT_LAST_CLUSTER = $0FFFFFFF            ; Code to mark the last cluster of a file
=1					VOLUMEMAX = 1                           ; The maximum number of mounted volumes we support
=32					DOS_DIR_ENTRY_SIZE = 32                 ; The size of a directory entry
=512					DOS_SECTOR_SIZE = 512                   ; The size of a sector
=$e5					DOS_DIR_ENT_UNUSED = $E5                ; Marker for an unused directory entry
=446					PART0_OFF = 446                         ; Offset to the first partition in the MBR
=4					PART_TYPE_OFF = 4                       ; Offset to the partition's type
=8					PART_LBA_OFF = 8                        ; Offset to the LBA of the first sector of the partition
=13					PART_SECT_COUNT_OFF = 13                ; Offset to the sector count of the partition
=510					MBR_SIGNATURE = 510                     ; The offset to the MBR signature bytes
=$0c					PART_TYPE_FAT32_LBA = $0C               ; Patition type: FAT32 with LBA addressing
=$0b					BPB_BYTEPERSEC_OFF = $0B                ; Offset in the BPB sector to the Bytes Per Sector
=$0d					BPB_SECPERCLUS_OFF = $0D                ; Offset in the BPB sector to the Sectors Per Cluster
=$0e					BPB_RSRVCLUS_OFF = $0E                  ; Offset in the BPB sector to the Number of Reserved Clusters
=$10					BPB_NUMFAT_OFF = $10                    ; Offset in the BPB sector to the Number of FATs
=$24					BPB_SECPERFAT_OFF = $24                 ; Offset in the BPB sector to the Sectors Per FAT
=$2c					BPB_ROOTCLUS_OFF = $2C                  ; Offset in the BPB sector to the Root Cluster Number
=510					BPB_SIGNATURE = 510                     ; The offset to the MBR signature bytes
=1					DOS_ERR_READ = 1                        ; We could not read a sector, check BIOS_STATUS for details
=2					DOS_ERR_NOTMBR = 2                      ; We could not find the MBR
=3					DOS_ERR_NOFAT32 = 3                     ; We could not find a FAT32 parition using LBA
=4					DOS_ERR_NOINIT = 4                      ; We could not INIT the block device
=5					DOS_ERR_VOLID = 5                       ; Volume ID sector could not be loaded
=6					DOS_ERR_FAT = 6                         ; Can't scan the FAT for some reason
=7					DOS_ERR_BADPATH = 7                     ; The path was badly formatted
=8					DOS_ERR_NODIR = 8                       ; Could not read the directory
=9					DOS_ERR_NOTFOUND = 9                    ; File/directory requested was not found
=10					DOS_ERR_NOCLUSTER = 10                  ; There are no more clusters
=11					DOS_ERR_FILEEXISTS = 11                 ; There is already a file of that name
=12					DOS_ERR_NOTOPEN = 12                    ; File has not been open
=13					DOS_ERR_NOTREAD = 13                    ; File is not open for reading
=14					DOS_ERR_NOTWRITE = 14                   ; File is not open for writing
=15					DOS_ERR_OPEN = 15                       ; File is already open
=16					DOS_ERR_PGXSIG = 16                     ; File does not have the PGX signature
=17					DOS_ERR_NOEXEC = 17                     ; File does is not an executable format
=$37e000				DOS_HIGH_VARIABLES      = $37E000
=$37e000				DEVICE                  = $37E000       ; 1 byte - The number of the block device
=$37e001				PARTITION               = $37E001       ; 1 byte - The number of the partitions on the device
=$37e002				SECTORS_PER_CLUSTER     = $37E002       ; 1 byte - The number of sectors in a cluster
=$37e004				FIRSTSECTOR             = $37E004       ; 4 bytes - The LBA of the first sector on the volume
=$37e008				SECTORCOUNT             = $37E008       ; 4 bytes - The number of sectors in the volume
=$37e00c				NUM_RSRV_SEC            = $37E00C       ; 2 bytes - The number of hidden or reserved sectors
=$37e00e				CLUSTER_SIZE            = $37E00E       ; 2 bytes - The size of a cluster in bytes
=$37e010				SEC_PER_FAT             = $37E010       ; 4 bytes - The number of sectors per FAT
=$37e014				FAT_BEGIN_LBA           = $37E014       ; 4 bytes - The LBA of the first sector of the FAT
=$37e018				CLUSTER_BEGIN_LBA       = $37E018       ; 4 bytes - The LBA of the first cluster in the storage area
=$37e01c				ROOT_DIR_FIRST_CLUSTER  = $37E01C       ; 4 bytes - The number of the first cluster in the root directory
=$37e020				DOS_CURR_CLUS           = $37E020       ; 4 bytes - The current cluster (for delete)
=$37e024				DOS_NEXT_CLUS           = $37E024       ; 4 bytes - The next cluster in a file (for delete)
=$37e028				DOS_DIR_CLUS_ID         = $37E028       ; 4 bytes - The cluster ID of the current directory record
=$37e02c				DOS_NEW_CLUSTER         = $37E02C       ; 4 bytes - Space to store a newly written cluster ID
=$37e030				DOS_SHORT_NAME          = $37E030       ; 11 bytes - The short name for a desired file
=$37e140				DOS_DIR_CLUSTER         = $37E140       ; 512 bytes - A buffer for directory entries
=$37e340				DOS_DIR_CLUSTER_END     = $37E340       ; The byte just past the end of the directory cluster buffer
=$37e340				DOS_SECTOR              = $37E340       ; 512 bytes - A buffer for block device read/write
=$37e540				DOS_SECTOR_END          = $37E540       ; The byte just past the end of the cluster buffer
.383e29					DOS_MOUNT
.383e29	08		php		                PHP
.383e2a	e2 20		sep #$20	                SEP #$20        ; set A short
.383e2c	a5 01		lda $0321	                LDA BIOS_DEV            ; Check the device
.383e2e	c9 02		cmp #$02	                CMP #BIOS_DEV_SD        ; Is it the SDC?
.383e30	d0 0b		bne $383e3d	                BNE get_mbr
.383e32	22 d0 3c 38	jsl $383cd0	                JSL SDCINIT             ; Yes: Initialize access to the SDC
.383e36	b0 05		bcs $383e3d	                BCS get_mbr             ; Continue if success
.383e38	a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.383e3a	82 20 01	brl $383f5d	                BRL ret_failure
.383e3d					get_mbr
.383e3d	c2 30		rep #$30	                REP #$30        ; set A&X long
.383e3f	64 02		stz $0322	                STZ BIOS_LBA            ; Get the MBR
.383e41	64 04		stz $0324	                STZ BIOS_LBA+2
.383e43	a9 40 e3	lda #$e340	                LDA #<>DOS_SECTOR       ; Into DOS_SECTOR
.383e46	85 06		sta $0326	                STA BIOS_BUFF_PTR
.383e48	a9 37 00	lda #$0037	                LDA #`DOS_SECTOR
.383e4b	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.383e4d	22 44 10 38	jsl $381044	                JSL GETBLOCK            ; Try to read the MBR
.383e51	b0 07		bcs $383e5a	                BCS chk_signature       ; If success, check the signature bytes
.383e53	e2 20		sep #$20	                SEP #$20        ; set A short
.383e55	a9 01		lda #$01	                LDA #DOS_ERR_READ       ; Otherwise: report we couldn't read the first sector
.383e57	82 03 01	brl $383f5d	                BRL ret_failure
.383e5a					chk_signature
.383e5a	e2 20		sep #$20	                SEP #$20        ; set A short
.383e5c	ad 3e e5	lda $37e53e	                LDA DOS_SECTOR+MBR_SIGNATURE
.383e5f	c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.383e61	d0 07		bne $383e6a	                BNE not_mbr             ; No: signal we could find the MBR
.383e63	ad 3f e5	lda $37e53f	                LDA DOS_SECTOR+MBR_SIGNATURE+1
.383e66	c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.383e68	f0 05		beq $383e6f	                BEQ chk_part_type       ; Yes: we have an MBR
.383e6a	a9 02		lda #$02	not_mbr         LDA #DOS_ERR_NOTMBR     ; Return that we didn't find the MBR
.383e6c	82 ee 00	brl $383f5d	                BRL ret_failure
.383e6f	ad 02 e5	lda $37e502	chk_part_type   LDA DOS_SECTOR+PART0_OFF+PART_TYPE_OFF
.383e72	c9 0c		cmp #$0c	                CMP #PART_TYPE_FAT32_LBA
.383e74	f0 05		beq $383e7b	                BEQ get_LBA             ; Is FAT32 with LBA?
.383e76	a9 03		lda #$03	                LDA #DOS_ERR_NOFAT32    ; No: return No FAT32 found error
.383e78	82 e2 00	brl $383f5d	                BRL ret_failure
.383e7b					get_LBA
.383e7b	c2 20		rep #$20	                REP #$20        ; set A long
.383e7d	ad 06 e5	lda $37e506	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF
.383e80	8d 04 e0	sta $37e004	                STA FIRSTSECTOR
.383e83	ad 08 e5	lda $37e508	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF+2
.383e86	8d 06 e0	sta $37e006	                STA FIRSTSECTOR+2
.383e89	ad 0b e5	lda $37e50b	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF
.383e8c	8d 08 e0	sta $37e008	                STA SECTORCOUNT
.383e8f	ad 0d e5	lda $37e50d	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF+2
.383e92	8d 0a e0	sta $37e00a	                STA SECTORCOUNT+2
.383e95	e2 20		sep #$20	                SEP #$20        ; set A short
.383e97	a5 01		lda $0321	                LDA BIOS_DEV            ; Save the device number
.383e99	8d 00 e0	sta $37e000	                STA DEVICE
.383e9c	a9 00		lda #$00	                LDA #0
.383e9e	8d 01 e0	sta $37e001	                STA PARTITION    ; For the moment, we only support the first partition
.383ea1	c2 20		rep #$20	                REP #$20        ; set A long
.383ea3	a9 40 e3	lda #$e340	                LDA #<>DOS_SECTOR
.383ea6	85 06		sta $0326	                STA BIOS_BUFF_PTR
.383ea8	a9 37 00	lda #$0037	                LDA #`DOS_SECTOR
.383eab	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.383ead	ad 04 e0	lda $37e004	                LDA FIRSTSECTOR
.383eb0	85 02		sta $0322	                STA BIOS_LBA
.383eb2	ad 06 e0	lda $37e006	                LDA FIRSTSECTOR+2
.383eb5	85 04		sta $0324	                STA BIOS_LBA+2
.383eb7	22 44 10 38	jsl $381044	                JSL GETBLOCK            ; Attempt to load the volume ID
.383ebb	b0 1c		bcs $383ed9	                BCS get_first_sec       ; Got it? Start parsing it
.383ebd	e2 20		sep #$20	                SEP #$20        ; set A short
.383ebf	a9 05		lda #$05	                LDA #DOS_ERR_VOLID      ; Otherwise: return an error
.383ec1	82 99 00	brl $383f5d	                BRL ret_failure
.383ec4					chk_bpb_sig
.383ec4	e2 20		sep #$20	                SEP #$20        ; set A short
.383ec6	ad 3e e5	lda $37e53e	                LDA DOS_SECTOR+BPB_SIGNATURE
.383ec9	c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.383ecb	d0 07		bne $383ed4	                BNE not_bpb             ; No: signal we could find the volume ID
.383ecd	ad 3f e5	lda $37e53f	                LDA DOS_SECTOR+BPB_SIGNATURE+1
.383ed0	c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.383ed2	f0 05		beq $383ed9	                BEQ get_first_sec       ; Yes: we have an volume ID
.383ed4	a9 05		lda #$05	not_bpb         LDA #DOS_ERR_VOLID      ; Return that we didn't find the Volume ID (BPB)
.383ed6	82 84 00	brl $383f5d	                BRL ret_failure
.383ed9					get_first_sec
.383ed9	c2 20		rep #$20	                REP #$20        ; set A long
.383edb	ad 6c e3	lda $37e36c	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF
.383ede	8d 1c e0	sta $37e01c	                STA ROOT_DIR_FIRST_CLUSTER
.383ee1	ad 6e e3	lda $37e36e	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF+2
.383ee4	8d 1e e0	sta $37e01e	                STA ROOT_DIR_FIRST_CLUSTER+2
.383ee7	ad 4e e3	lda $37e34e	                LDA DOS_SECTOR+BPB_RSRVCLUS_OFF
.383eea	8d 0c e0	sta $37e00c	                STA NUM_RSRV_SEC
.383eed	18		clc		                CLC                     ; fat_begin_lba := FirstSector + Number_of_Reserved_Sectors
.383eee	ad 04 e0	lda $37e004	                LDA FIRSTSECTOR
.383ef1	6d 0c e0	adc $37e00c	                ADC NUM_RSRV_SEC
.383ef4	8d 14 e0	sta $37e014	                STA FAT_BEGIN_LBA
.383ef7	ad 06 e0	lda $37e006	                LDA FIRSTSECTOR+2
.383efa	69 00 00	adc #$0000	                ADC #0
.383efd	8d 16 e0	sta $37e016	                STA FAT_BEGIN_LBA+2
.383f00	ad 64 e3	lda $37e364	                LDA DOS_SECTOR+BPB_SECPERFAT_OFF
.383f03	8d 10 e0	sta $37e010	                STA SEC_PER_FAT
.383f06	ad 66 e3	lda $37e366	                LDA DOS_SECTOR+BPB_SECPERFAT_OFF+2
.383f09	8d 12 e0	sta $37e012	                STA SEC_PER_FAT+2
.383f0c	ad 10 e0	lda $37e010	                LDA SEC_PER_FAT
.383f0f	0a		asl a		                ASL A
.383f10	8d 18 e0	sta $37e018	                STA CLUSTER_BEGIN_LBA
.383f13	ad 12 e0	lda $37e012	                LDA SEC_PER_FAT+2
.383f16	2a		rol a		                ROL A
.383f17	8d 1a e0	sta $37e01a	                STA CLUSTER_BEGIN_LBA+2
.383f1a	18		clc		                CLC
.383f1b	ad 18 e0	lda $37e018	                LDA CLUSTER_BEGIN_LBA                    ; Sectors Per FAT * 2 + fat_begin_lba
.383f1e	6d 14 e0	adc $37e014	                ADC FAT_BEGIN_LBA
.383f21	8d 18 e0	sta $37e018	                STA CLUSTER_BEGIN_LBA
.383f24	ad 1a e0	lda $37e01a	                LDA CLUSTER_BEGIN_LBA+2
.383f27	6d 16 e0	adc $37e016	                ADC FAT_BEGIN_LBA+2
.383f2a	8d 1a e0	sta $37e01a	                STA CLUSTER_BEGIN_LBA+2
.383f2d	e2 20		sep #$20	                SEP #$20        ; set A short
.383f2f	ad 4d e3	lda $37e34d	                LDA DOS_SECTOR+BPB_SECPERCLUS_OFF
.383f32	8d 02 e0	sta $37e002	                STA SECTORS_PER_CLUSTER
.383f35	c2 20		rep #$20	                REP #$20        ; set A long
.383f37	29 ff 00	and #$00ff	                AND #$00FF
.383f3a	48		pha		                PHA                                     ; Save the number of sectors per cluster
.383f3b	a9 00 02	lda #$0200	                LDA #<>DOS_SECTOR_SIZE                  ; Default to one sector's worth of bytes
.383f3e	8d 0e e0	sta $37e00e	                STA CLUSTER_SIZE
.383f41	a9 00 00	lda #$0000	                LDA #`DOS_SECTOR_SIZE
.383f44	8d 10 e0	sta $37e010	                STA CLUSTER_SIZE+2
.383f47	68		pla		                PLA                                     ; Restore the number of sectors per cluster
.383f48	c9 01 00	cmp #$0001	clus_size_loop  CMP #1                                  ; If there's only one cluster, return success
.383f4b	f0 09		beq $383f56	                BEQ ret_success
.383f4d	0e 0e e0	asl $37e00e	                ASL CLUSTER_SIZE                        ; Otherwise, multiply the number of bytes by 2
.383f50	2e 10 e0	rol $37e010	                ROL CLUSTER_SIZE+2
.383f53	4a		lsr a		                LSR A                                   ; And divide the number of sectors by 2
.383f54	80 f2		bra $383f48	                BRA clus_size_loop
.383f56					ret_success
.383f56	e2 20		sep #$20	                SEP #$20        ; set A short
.383f58	64 0e		stz $032e	                STZ DOS_STATUS          ; Set status code to 0
.383f5a	28		plp		                PLP
.383f5b	38		sec		                SEC
.383f5c	6b		rtl		                RTL
.383f5d					ret_failure
.383f5d	e2 20		sep #$20	                SEP #$20        ; set A short
.383f5f	85 0e		sta $032e	                STA DOS_STATUS          ; Save the status code
.383f61	28		plp		                PLP
.383f62	18		clc		                CLC
.383f63	6b		rtl		                RTL
.383f64					DOS_CALC_LBA
.383f64	08		php		                PHP
.383f65	c2 20		rep #$20	                REP #$20        ; set A long
.383f67	38		sec		                SEC
.383f68	a5 10		lda $0330	                LDA DOS_CLUS_ID                     ; cluster - 2
.383f6a	e9 02 00	sbc #$0002	                SBC #2
.383f6d	85 28		sta $0348	                STA DOS_TEMP
.383f6f	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.383f71	e9 00 00	sbc #$0000	                SBC #0
.383f74	85 2a		sta $034a	                STA DOS_TEMP+2
.383f76	e2 10		sep #$10	                SEP #$10        ; set X short
.383f78	ae 02 e0	ldx $37e002	                LDX SECTORS_PER_CLUSTER
.383f7b	e0 01		cpx #$01	mult_loop       CPX #1
.383f7d	f0 07		beq $383f86	                BEQ add_offset
.383f7f	06 28		asl $0348	                ASL DOS_TEMP
.383f81	26 28		rol $0348	                ROL DOS_TEMP
.383f83	ca		dex		                DEX
.383f84	80 f5		bra $383f7b	                BRA mult_loop
.383f86	18		clc		add_offset      CLC
.383f87	a5 28		lda $0348	                LDA DOS_TEMP                        ; cluster_being_lba + (cluster - 2) * SECTORS_PER_CLUSTER
.383f89	6d 18 e0	adc $37e018	                ADC CLUSTER_BEGIN_LBA
.383f8c	85 02		sta $0322	                STA BIOS_LBA
.383f8e	a5 2a		lda $034a	                LDA DOS_TEMP+2
.383f90	6d 1a e0	adc $37e01a	                ADC CLUSTER_BEGIN_LBA+2
.383f93	85 04		sta $0324	                STA BIOS_LBA+2
.383f95	28		plp		                PLP
.383f96	6b		rtl		                RTL
.383f97					DOS_GETCLUSTER
.383f97	08		php		                PHP
.383f98	c2 20		rep #$20	                REP #$20        ; set A long
.383f9a	a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.383f9c	85 06		sta $0326	                STA BIOS_BUFF_PTR
.383f9e	a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.383fa0	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.383fa2	22 64 3f 38	jsl $383f64	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.383fa6	22 44 10 38	jsl $381044	                JSL GETBLOCK                        ; Get the first block of the cluster
.383faa	90 07		bcc $383fb3	                BCC ret_failure
.383fac					ret_success
.383fac	e2 20		sep #$20	                SEP #$20        ; set A short
.383fae	64 0e		stz $032e	                STZ DOS_STATUS
.383fb0	28		plp		                PLP
.383fb1	38		sec		                SEC
.383fb2	6b		rtl		                RTL
.383fb3					ret_failure
.383fb3	e2 20		sep #$20	                SEP #$20        ; set A short
.383fb5	85 0e		sta $032e	                STA DOS_STATUS
.383fb7	28		plp		                PLP
.383fb8	18		clc		                CLC
.383fb9	6b		rtl		                RTL
.383fba					DOS_PUTCLUSTER
.383fba	08		php		                PHP
.383fbb	c2 20		rep #$20	                REP #$20        ; set A long
.383fbd	a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.383fbf	85 06		sta $0326	                STA BIOS_BUFF_PTR
.383fc1	a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.383fc3	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.383fc5	22 64 3f 38	jsl $383f64	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.383fc9	22 24 10 38	jsl $381024	                JSL PUTBLOCK                        ; PUT the first block of the cluster
.383fcd	90 07		bcc $383fd6	                BCC ret_failure
.383fcf					ret_success
.383fcf	e2 20		sep #$20	                SEP #$20        ; set A short
.383fd1	64 0e		stz $032e	                STZ DOS_STATUS
.383fd3	28		plp		                PLP
.383fd4	38		sec		                SEC
.383fd5	6b		rtl		                RTL
.383fd6					ret_failure
.383fd6	e2 20		sep #$20	                SEP #$20        ; set A short
.383fd8	85 0e		sta $032e	                STA DOS_STATUS
.383fda	28		plp		                PLP
.383fdb	18		clc		                CLC
.383fdc	6b		rtl		                RTL
.383fdd					DOS_DIRFIRST
.383fdd	08		php		                PHP
.383fde	c2 20		rep #$20	                REP #$20        ; set A long
.383fe0	a9 40 e1	lda #$e140	                LDA #<>DOS_DIR_CLUSTER
.383fe3	85 18		sta $0338	                STA DOS_DIR_PTR
.383fe5	a9 37 00	lda #$0037	                LDA #`DOS_DIR_CLUSTER
.383fe8	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.383fea	28		plp		                PLP
.383feb	6b		rtl		                RTL
.383fec					DOS_DIRNEXT
.383fec	08		php		                PHP
.383fed	c2 20		rep #$20	                REP #$20        ; set A long
.383fef	18		clc		                CLC                         ; Advance the directory entry pointer to the next entry
.383ff0	a5 18		lda $0338	                LDA DOS_DIR_PTR
.383ff2	69 20 00	adc #$0020	                ADC #DOS_DIR_ENTRY_SIZE
.383ff5	85 18		sta $0338	                STA DOS_DIR_PTR
.383ff7	a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.383ff9	69 00 00	adc #$0000	                ADC #0
.383ffc	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.383ffe	38		sec		                SEC                         ; Check to see if we've reached the end of the sector buffer
.383fff	a9 40 e3	lda #$e340	                LDA #<>DOS_DIR_CLUSTER_END
.384002	e5 18		sbc $0338	                SBC DOS_DIR_PTR
.384004	a9 37 00	lda #$0037	                LDA #`DOS_DIR_CLUSTER_END
.384007	e5 1a		sbc $033a	                SBC DOS_DIR_PTR+2
.384009	30 03		bmi $38400e	                BMI ret_failure             ; Yes: return failure
.38400b	28		plp		ret_success     PLP
.38400c	38		sec		                SEC
.38400d	6b		rtl		                RTL
.38400e	28		plp		ret_failure     PLP
.38400f	18		clc		                CLC
.384010	6b		rtl		                RTL
.384011					DOS_PARSE_PATH
.384011	08		php		                PHP
.384012	c2 10		rep #$10	                REP #$10        ; set X long
.384014	e2 20		sep #$20	                SEP #$20        ; set A short
.384016	a2 00 00	ldx #$0000	                LDX #0
.384019	b5 e0		lda $0400,x	upcase_loop     LDA DOS_PATH_BUFF,X     ; Get the character
.38401b	f0 1b		beq $384038	                BEQ clr_name            ; If it's NULL, the path is upper case, clear the name
.38401d	c9 20		cmp #$20	                CMP #' '                ; Is a control character?
.38401f	b0 05		bcs $384026	                BGE check_case          ; No: check the case
.384021	a9 07		lda #$07	                LDA #DOS_ERR_BADPATH    ; Yes: return a bad path error
.384023	82 51 00	brl $384077	                BRL ret_failure
.384026	c9 61		cmp #$61	check_case      CMP #'a'                ; Is the character lower case?
.384028	90 08		bcc $384032	                BLT next_char
.38402a	c9 7b		cmp #$7b	                CMP #'z'+1
.38402c	b0 04		bcs $384032	                BGE next_char
.38402e	29 5f		and #$5f	                AND #%01011111          ; Yes: Convert to uppercase
.384030	95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.384032	e8		inx		next_char       INX                     ; Move to the next character
.384033	e0 00 01	cpx #$0100	                CPX #$100
.384036	d0 e1		bne $384019	                BNE upcase_loop
.384038	a0 00 00	ldy #$0000	clr_name        LDY #0                  ; Set the short name to blanks
.38403b	a9 20		lda #$20	                LDA #' '
.38403d	99 30 e0	sta $37e030,y	clr_loop        STA DOS_SHORT_NAME,Y
.384040	c8		iny		                INY
.384041	c0 0b 00	cpy #$000b	                CPY #11
.384044	d0 f7		bne $38403d	                BNE clr_loop
.384046	a2 00 00	ldx #$0000	                LDX #0
.384049	a0 00 00	ldy #$0000	                LDY #0
.38404c	b5 e0		lda $0400,x	cpy_name_loop   LDA DOS_PATH_BUFF,X     ; Get the character of the name
.38404e	f0 20		beq $384070	                BEQ ret_success         ; If NULL: we've finished parsing the path
.384050	c9 2e		cmp #$2e	                CMP #'.'                ; If it's a dot, we've finished the name part
.384052	f0 0a		beq $38405e	                BEQ cpy_ext             ; And move to the extension
.384054	99 30 e0	sta $37e030,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, store it to the name portion
.384057	e8		inx		                INX
.384058	c8		iny		                INY                     ; Move to the next character
.384059	c0 08 00	cpy #$0008	                CPY #8                  ; Have we processed 8?
.38405c	d0 ee		bne $38404c	                BNE cpy_name_loop       ; No: process this one
.38405e	e8		inx		cpy_ext         INX                     ; Skip the dot
.38405f	a0 08 00	ldy #$0008	                LDY #8
.384062	b5 e0		lda $0400,x	cpy_ext_loop    LDA DOS_PATH_BUFF,X     ; Get the character of the extension
.384064	f0 0a		beq $384070	                BEQ ret_success         ; If it's NULL, we've finished
.384066	99 30 e0	sta $37e030,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, copy it to the short name
.384069	e8		inx		                INX
.38406a	c8		iny		                INY                     ; Move to the next character
.38406b	c0 0b 00	cpy #$000b	                CPY #11                 ; Have we processed the three ext characters?
.38406e	d0 f2		bne $384062	                BNE cpy_ext_loop        ; No: process this one
.384070					ret_success
.384070	e2 20		sep #$20	                SEP #$20        ; set A short
.384072	64 0e		stz $032e	                STZ DOS_STATUS
.384074	28		plp		                PLP
.384075	38		sec		                SEC
.384076	6b		rtl		                RTL
.384077					ret_failure
.384077	e2 20		sep #$20	                SEP #$20        ; set A short
.384079	85 0e		sta $032e	                STA DOS_STATUS
.38407b	28		plp		                PLP
.38407c	18		clc		                CLC
.38407d	6b		rtl		                RTL
.38407e					DOS_FINDFILE
.38407e	08		php		                PHP
.38407f	c2 30		rep #$30	                REP #$30        ; set A&X long
.384081	22 11 40 38	jsl $384011	                JSL DOS_PARSE_PATH              ; Break out the path into its components
.384085	b0 03		bcs $38408a	                BCS mount                       ; If success: try to open the directory
.384087	28		plp		pass_failure    PLP                             ; If failure, just pass the failure back up
.384088	18		clc		                CLC
.384089	6b		rtl		                RTL
.38408a					mount
.38408a	e2 20		sep #$20	                SEP #$20        ; set A short
.38408c	a9 02		lda #$02	                LDA #BIOS_DEV_SD                ; Mount the drive... defaults to SDC
.38408e	85 01		sta $0321	                STA BIOS_DEV                    ; TODO: set from DOS_PARSE_PATH
.384090	22 29 3e 38	jsl $383e29	                JSL DOS_MOUNT
.384094					get_directory
.384094	c2 20		rep #$20	                REP #$20        ; set A long
.384096	a9 40 e1	lda #$e140	                LDA #<>DOS_DIR_CLUSTER          ; Load the directory cluster into the directory buffer
.384099	85 1c		sta $033c	                STA DOS_BUFF_PTR
.38409b	a9 37 00	lda #$0037	                LDA #`DOS_DIR_CLUSTER
.38409e	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3840a0	ad 1c e0	lda $37e01c	                LDA ROOT_DIR_FIRST_CLUSTER      ; Queue up loading the first sector of the root directory
.3840a3	85 10		sta $0330	                STA DOS_CLUS_ID
.3840a5	ad 1e e0	lda $37e01e	                LDA ROOT_DIR_FIRST_CLUSTER+2
.3840a8	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3840aa	22 97 3f 38	jsl $383f97	                JSL DOS_GETCLUSTER              ; Get the directory
.3840ae	b0 07		bcs $3840b7	                BCS scan_entries                ; If success: start scanning the directory entries
.3840b0	e2 20		sep #$20	                SEP #$20        ; set A short
.3840b2	a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Otherwise: return a no directory error
.3840b4	82 5f 00	brl $384116	                BRL ret_failure
.3840b7	22 dd 3f 38	jsl $383fdd	scan_entries    JSL DOS_DIRFIRST                ; Move the DIR pointer to the beginning of the sector
.3840bb					scan_loop
.3840bb	e2 20		sep #$20	                SEP #$20        ; set A short
.3840bd	a0 00 00	ldy #$0000	                LDY #0
.3840c0	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y             ; Check the directory entry
.3840c2	d0 05		bne $3840c9	                BNE chk_unused                  ; If there's an entry, check to see if it's unused
.3840c4	a9 09		lda #$09	                LDA #DOS_ERR_NOTFOUND           ; If end-of-directory, we couldn't find a match
.3840c6	82 4d 00	brl $384116	                BRL ret_failure
.3840c9	c9 e5		cmp #$e5	chk_unused      CMP #DOS_DIR_ENT_UNUSED         ; If it's unused...
.3840cb	f0 25		beq $3840f2	                BEQ next_entry                  ; Go to the next entry
.3840cd	a0 0b 00	ldy #$000b	                LDY #DIRENTRY.ATTRIBUTE         ; Check the entry's attributes
.3840d0	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3840d2	89 08		bit #$08	                BIT #DOS_ATTR_VOLUME            ; Is it a volume name?
.3840d4	d0 1c		bne $3840f2	                BNE next_entry                  ; Yes: skip it!
.3840d6	29 0f		and #$0f	                AND #DOS_ATTR_LONGNAME
.3840d8	c9 0f		cmp #$0f	                CMP #DOS_ATTR_LONGNAME          ; Is it a long name field?
.3840da	f0 16		beq $3840f2	                BEQ next_entry                  ; Yes: skip it!
.3840dc	a2 00 00	ldx #$0000	                LDX #0
.3840df	a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME
.3840e2	b7 18		lda [$0338],y	scan_cmp_loop   LDA [DOS_DIR_PTR],Y             ; Get the X'th character of the entry
.3840e4	dd 30 e0	cmp $37e030,x	                CMP DOS_SHORT_NAME,X            ; And compare to the X'th character of the name we want
.3840e7	d0 09		bne $3840f2	                BNE next_entry                  ; If not equal: try the next entry
.3840e9	c8		iny		                INY                             ; Advance to the next character
.3840ea	e8		inx		                INX
.3840eb	e0 0b 00	cpx #$000b	                CPX #11                         ; Did we reach the end of the names?
.3840ee	f0 2d		beq $38411d	                BEQ match                       ; Yes: we have a match!
.3840f0	80 f0		bra $3840e2	                BRA scan_cmp_loop               ; No: keep checking
.3840f2	22 ec 3f 38	jsl $383fec	next_entry      JSL DOS_DIRNEXT                 ; Try to get the next directory entry
.3840f6	82 c2 ff	brl $3840bb	                BRL scan_loop                   ; If found: keep scanning
.3840f9	c2 20		rep #$20	                REP #$20        ; set A long
.3840fb	22 b2 41 38	jsl $3841b2	                JSL NEXTCLUSTER32               ; Move to the next cluster of the directory
.3840ff	a9 40 e1	lda #$e140	set_buff_ptr    LDA #<>DOS_DIR_CLUSTER          ; Load the directory cluster into the directory buffer
.384102	85 1c		sta $033c	                STA DOS_BUFF_PTR
.384104	a9 37 00	lda #$0037	                LDA #`DOS_DIR_CLUSTER
.384107	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.384109	e2 20		sep #$20	                SEP #$20        ; set A short
.38410b	22 97 3f 38	jsl $383f97	                JSL DOS_GETCLUSTER              ; Attempt to load the directory cluster
.38410f	90 03		bcc $384114	                BCC bad_dir                     ; If failed: return an error
.384111	82 a3 ff	brl $3840b7	                BRL scan_entries                ; If loaded: scan it
.384114	a9 08		lda #$08	bad_dir         LDA #DOS_ERR_NODIR              ; Otherwise: fail with a NODIR error (maybe something else is better)
.384116					ret_failure
.384116	e2 20		sep #$20	                SEP #$20        ; set A short
.384118	85 0e		sta $032e	                STA DOS_STATUS
.38411a	28		plp		                PLP
.38411b	18		clc		                CLC
.38411c	6b		rtl		                RTL
.38411d					match
.38411d	c2 20		rep #$20	                REP #$20        ; set A long
.38411f	a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Save the ID of the directory cluster for later use
.384121	8d 28 e0	sta $37e028	                STA DOS_DIR_CLUS_ID
.384124	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.384126	8d 2a e0	sta $37e02a	                STA DOS_DIR_CLUS_ID+2
.384129	a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L         ; Copy the cluster number from the directory entry
.38412c	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.38412e	85 10		sta $0330	                STA DOS_CLUS_ID                 ; To DOS_CLUS_ID
.384130	a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.384133	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.384135	85 12		sta $0332	                STA DOS_CLUS_ID+2
.384137					ret_success
.384137	e2 20		sep #$20	                SEP #$20        ; set A short
.384139	64 0e		stz $032e	                STZ DOS_STATUS
.38413b	28		plp		                PLP
.38413c	38		sec		                SEC
.38413d	6b		rtl		                RTL
.38413e					DOS_READFILE
.38413e	08		php		                PHP
.38413f	c2 30		rep #$30	                REP #$30        ; set A&X long
.384141	a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.384143	48		pha		                PHA
.384144	a5 1c		lda $033c	                LDA DOS_BUFF_PTR
.384146	48		pha		                PHA
.384147	22 7e 40 38	jsl $38407e	                JSL DOS_FINDFILE                    ; Attempt to find the file's directory entry
.38414b	68		pla		                PLA
.38414c	85 1c		sta $033c	                STA DOS_BUFF_PTR
.38414e	68		pla		                PLA
.38414f	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.384151	90 0d		bcc $384160	                BCC pass_failure                    ; If found: try to load the cluster
.384153	22 97 3f 38	jsl $383f97	load_cluster    JSL DOS_GETCLUSTER                  ; Get the first block of the cluster
.384157	90 07		bcc $384160	                BCC pass_failure                    ; If there's an error... pass it up the chain
.384159					ret_success
.384159	e2 20		sep #$20	                SEP #$20        ; set A short
.38415b	64 0e		stz $032e	                STZ DOS_STATUS
.38415d	28		plp		                PLP
.38415e	38		sec		                SEC
.38415f	6b		rtl		                RTL
.384160	28		plp		pass_failure    PLP                                 ; Otherwise: pass any error up the chain
.384161	18		clc		                CLC
.384162	6b		rtl		                RTL
.384163					FATFORCLUSTER32
.384163	c2 30		rep #$30	                REP #$30        ; set A&X long
.384165	a5 10		lda $0330	                LDA DOS_CLUS_ID
.384167	85 24		sta $0344	                STA DOS_FAT_LBA
.384169	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.38416b	85 26		sta $0346	                STA DOS_FAT_LBA+2
.38416d	a2 07 00	ldx #$0007	                LDX #7
.384170	46 26		lsr $0346	div_loop        LSR DOS_FAT_LBA+2
.384172	66 24		ror $0344	                ROR DOS_FAT_LBA
.384174	ca		dex		                DEX
.384175	d0 f9		bne $384170	                BNE div_loop
.384177	18		clc		                CLC
.384178	a5 24		lda $0344	                LDA DOS_FAT_LBA
.38417a	6d 14 e0	adc $37e014	                ADC FAT_BEGIN_LBA
.38417d	85 24		sta $0344	                STA DOS_FAT_LBA
.38417f	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.384181	6d 16 e0	adc $37e016	                ADC FAT_BEGIN_LBA+2
.384184	85 26		sta $0346	                STA DOS_FAT_LBA+2
.384186	a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; We want to load the FAT sector
.384188	85 02		sta $0322	                STA BIOS_LBA
.38418a	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.38418c	85 04		sta $0324	                STA BIOS_LBA+2
.38418e	a9 40 e3	lda #$e340	                LDA #<>DOS_SECTOR               ; We want to load the FAT sector in DOS_SECTOR
.384191	85 06		sta $0326	                STA BIOS_BUFF_PTR
.384193	a9 37 00	lda #$0037	                LDA #`DOS_SECTOR
.384196	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.384198	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Load the FAT entry
.38419c	b0 06		bcs $3841a4	                BCS find_entry
.38419e	e2 20		sep #$20	                SEP #$20        ; set A short
.3841a0	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.3841a2	80 0c		bra $3841b0	                BRA ret_failure
.3841a4					find_entry
.3841a4	c2 20		rep #$20	                REP #$20        ; set A long
.3841a6	a5 10		lda $0330	                LDA DOS_CLUS_ID
.3841a8	0a		asl a		                ASL A
.3841a9	0a		asl a		                ASL A                           ; * 4
.3841aa	29 7f 00	and #$007f	                AND #$7F                        ; DOS_CLUS_ID MOD 128
.3841ad	aa		tax		                TAX                             ; X should be the offset within the sector
.3841ae	38		sec		ret_success     SEC                             ; return success
.3841af	6b		rtl		                RTL
.3841b0	18		clc		ret_failure     CLC                             ; Return failure
.3841b1	6b		rtl		                RTL
.3841b2					NEXTCLUSTER32
.3841b2	08		php		                PHP
.3841b3	c2 30		rep #$30	                REP #$30        ; set A&X long
.3841b5	22 63 41 38	jsl $384163	                JSL FATFORCLUSTER32             ; Get the FAT entry for this cluster
.3841b9	90 2c		bcc $3841e7	                BCC ret_failure                 ; If it did not work, return the error
.3841bb	bd 40 e3	lda $37e340,x	                LDA DOS_SECTOR,X                ; Get the entry and copy it to DOS_TEMP
.3841be	85 28		sta $0348	                STA DOS_TEMP
.3841c0	bd 42 e3	lda $37e342,x	                LDA DOS_SECTOR+2,X
.3841c3	85 2a		sta $034a	                STA DOS_TEMP+2
.3841c5	a5 28		lda $0348	                LDA DOS_TEMP                    ; Is DOS_TEMP = $FFFFFFFF?
.3841c7	c9 ff ff	cmp #$ffff	                CMP #$FFFF
.3841ca	d0 0c		bne $3841d8	                BNE found_next
.3841cc	a5 2a		lda $034a	                LDA DOS_TEMP+2
.3841ce	c9 ff 0f	cmp #$0fff	                CMP #$0FFF
.3841d1	d0 05		bne $3841d8	                BNE found_next                  ; No: return this cluster as the next
.3841d3	a9 0a 00	lda #$000a	                LDA #DOS_ERR_NOCLUSTER          ; Yes: return that there are no more clusters
.3841d6	80 0f		bra $3841e7	                BRA ret_failure
.3841d8	a5 28		lda $0348	found_next      LDA DOS_TEMP                    ; No: return DOS_TEMP as the new DOS_CLUS_ID
.3841da	85 10		sta $0330	                STA DOS_CLUS_ID
.3841dc	a5 2a		lda $034a	                LDA DOS_TEMP+2
.3841de	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3841e0					ret_success
.3841e0	e2 20		sep #$20	                SEP #$20        ; set A short
.3841e2	64 0e		stz $032e	                STZ DOS_STATUS                  ; Record success
.3841e4	28		plp		                PLP
.3841e5	38		sec		                SEC
.3841e6	6b		rtl		                RTL
.3841e7	85 0e		sta $032e	ret_failure     STA DOS_STATUS                  ; Record the error condition
.3841e9	28		plp		                PLP
.3841ea	18		clc		                CLC
.3841eb	6b		rtl		                RTL
.3841ec					DOS_READNEXT
.3841ec	08		php		                PHP
.3841ed	c2 30		rep #$30	                REP #$30        ; set A&X long
.3841ef	22 b2 41 38	jsl $3841b2	                JSL NEXTCLUSTER32               ; Attempt to find the next cluster in the FAT
.3841f3	90 09		bcc $3841fe	                BCC pass_failure                ; If nothing found: pass the failure up the chain
.3841f5	22 97 3f 38	jsl $383f97	                JSL DOS_GETCLUSTER              ; Otherwise: attempt to read the cluster
.3841f9	90 03		bcc $3841fe	                BCC pass_failure                ; If nothing read: pass the failure up the chain
.3841fb	28		plp		ret_success     PLP
.3841fc	38		sec		                SEC
.3841fd	6b		rtl		                RTL
.3841fe	28		plp		pass_failure    PLP
.3841ff	18		clc		                CLC
.384200	6b		rtl		                RTL
.384201					DOS_FREECLUS32
.384201	08		php		                PHP
.384202	c2 30		rep #$30	                REP #$30        ; set A&X long
.384204	a9 40 e3	lda #$e340	                LDA #<>DOS_SECTOR               ; Set the location to store the sector
.384207	85 06		sta $0326	                STA BIOS_BUFF_PTR
.384209	a9 37 00	lda #$0037	                LDA #`DOS_SECTOR
.38420c	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.38420e	ad 14 e0	lda $37e014	                LDA FAT_BEGIN_LBA               ; Set the LBA to that of the first FAT sector
.384211	85 02		sta $0322	                STA BIOS_LBA
.384213	ad 16 e0	lda $37e016	                LDA FAT_BEGIN_LBA+2
.384216	85 04		sta $0324	                STA BIOS_LBA+2
.384218	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Load the sector into memory
.38421c	b0 07		bcs $384225	                BCS initial_entry               ; If OK: set the initial entry to check
.38421e	e2 20		sep #$20	                SEP #$20        ; set A short
.384220	a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Return a NOFAT error
.384222	82 5a 00	brl $38427f	                BRL ret_failure
.384225					initial_entry
.384225	c2 20		rep #$20	                REP #$20        ; set A long
.384227	a9 02 00	lda #$0002	                LDA #2                          ; Set DOS_CLUS_ID to 2
.38422a	85 10		sta $0330	                STA DOS_CLUS_ID
.38422c	a9 00 00	lda #$0000	                LDA #0
.38422f	85 12		sta $0332	                STA DOS_CLUS_ID+2
.384231	a2 08 00	ldx #$0008	                LDX #8                          ; Set the offset to DOS_CLUS_ID * 4
.384234	bd 40 e3	lda $37e340,x	chk_entry       LDA DOS_SECTOR,X                ; Is the cluster entry == $00000000?
.384237	d0 05		bne $38423e	                BNE next_entry                  ; No: move to the next entry
.384239	bd 42 e3	lda $37e342,x	                LDA DOS_SECTOR+2,X
.38423c	f0 29		beq $384267	                BEQ found_free                  ; Yes: go to allocate and return it
.38423e	e6 10		inc $0330	next_entry      INC DOS_CLUS_ID                 ; Move to the next cluster
.384240	d0 02		bne $384244	                BNE inc_ptr
.384242	e6 12		inc $0332	                INC DOS_CLUS_ID+2
.384244	e8		inx		inc_ptr         INX                             ; Update the index to the entry
.384245	e8		inx		                INX
.384246	e8		inx		                INX
.384247	e8		inx		                INX
.384248	e0 00 02	cpx #$0200	                CPX #DOS_SECTOR_SIZE            ; Are we outside the sector?
.38424b	90 e7		bcc $384234	                BLT chk_entry                   ; No: check this entry
.38424d	18		clc		                CLC                             ; Point to the next sector in the FAT
.38424e	a5 02		lda $0322	                LDA BIOS_LBA
.384250	69 00 02	adc #$0200	                ADC #DOS_SECTOR_SIZE
.384253	85 02		sta $0322	                STA BIOS_LBA
.384255	a5 04		lda $0324	                LDA BIOS_LBA+2
.384257	69 00 00	adc #$0000	                ADC #0
.38425a	85 04		sta $0324	                STA BIOS_LBA+2
.38425c	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Attempt to read the block
.384260	b0 00		bcs $384262	                BCS set_ptr                     ; If OK: set the pointer and check it
.384262	a2 00 00	ldx #$0000	set_ptr         LDX #0                          ; Set index pointer to the first entry
.384265	80 cd		bra $384234	                BRA chk_entry                   ; Check this entry
.384267					found_free
.384267	c2 20		rep #$20	                REP #$20        ; set A long
.384269	a9 ff ff	lda #$ffff	                LDA #<>FAT_LAST_CLUSTER         ; Set the entry to $0FFFFFFF to make it the last entry in its chain
.38426c	9d 40 e3	sta $37e340,x	                STA DOS_SECTOR,X
.38426f	a9 ff 0f	lda #$0fff	                LDA #(FAT_LAST_CLUSTER >> 16)
.384272	9d 42 e3	sta $37e342,x	                STA DOS_SECTOR+2,X
.384275	22 24 10 38	jsl $381024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.384279	b0 0b		bcs $384286	                BCS ret_success                 ; If OK: return success
.38427b	e2 20		sep #$20	                SEP #$20        ; set A short
.38427d	a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Otherwise: return NOFAT error
.38427f					ret_failure
.38427f	e2 20		sep #$20	                SEP #$20        ; set A short
.384281	85 0e		sta $032e	                STA DOS_STATUS
.384283	28		plp		                PLP
.384284	18		clc		                CLC
.384285	6b		rtl		                RTL
.384286					ret_success
.384286	e2 20		sep #$20	                SEP #$20        ; set A short
.384288	64 0e		stz $032e	                STZ DOS_STATUS
.38428a	28		plp		                PLP
.38428b	38		sec		                SEC
.38428c	6b		rtl		                RTL
.38428d					DELCLUSTER32
.38428d	08		php		                PHP
.38428e	c2 30		rep #$30	                REP #$30        ; set A&X long
.384290	22 63 41 38	jsl $384163	                JSL FATFORCLUSTER32
.384294	a9 00 00	lda #$0000	                LDA #0
.384297	9d 40 e3	sta $37e340,x	                STA DOS_SECTOR,X                ; Set the cluster entry to 0
.38429a	9d 42 e3	sta $37e342,x	                STA DOS_SECTOR+2,X
.38429d	22 24 10 38	jsl $381024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.3842a1	b0 09		bcs $3842ac	                BCS ret_success
.3842a3					ret_failure
.3842a3	e2 20		sep #$20	                SEP #$20        ; set A short
.3842a5	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.3842a7	85 0e		sta $032e	                STA DOS_STATUS
.3842a9	28		plp		                PLP
.3842aa	18		clc		                CLC
.3842ab	6b		rtl		                RTL
.3842ac					ret_success
.3842ac	e2 20		sep #$20	                SEP #$20        ; set A short
.3842ae	64 0e		stz $032e	                STZ DOS_STATUS
.3842b0	28		plp		                PLP
.3842b1	38		sec		                SEC
.3842b2	6b		rtl		                RTL
.3842b3					DOS_APPENDCLUS
.3842b3	08		php		                PHP
.3842b4	c2 30		rep #$30	                REP #$30        ; set A&X long
.3842b6	a5 12		lda $0332	                LDA DOS_CLUS_ID+2               ; Save the cluster number for later
.3842b8	48		pha		                PHA
.3842b9	a5 10		lda $0330	                LDA DOS_CLUS_ID
.3842bb	48		pha		                PHA
.3842bc	22 01 42 38	jsl $384201	                JSL DOS_FREECLUS32              ; Find a free cluster on the block device
.3842c0	b0 08		bcs $3842ca	                BCS save_cluster                ; If we got a cluster, write the data to it
.3842c2	68		pla		fail_cleanup    PLA                             ; Restore the cluster of the file
.3842c3	85 10		sta $0330	                STA DOS_CLUS_ID
.3842c5	68		pla		                PLA
.3842c6	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3842c8	80 34		bra $3842fe	                BRA pass_failure                ; Pass the failure back up the chain
.3842ca	a5 10		lda $0330	save_cluster    LDA DOS_CLUS_ID
.3842cc	8d 2c e0	sta $37e02c	                STA DOS_NEW_CLUSTER
.3842cf	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3842d1	8d 2e e0	sta $37e02e	                STA DOS_NEW_CLUSTER+2
.3842d4	22 ba 3f 38	jsl $383fba	                JSL DOS_PUTCLUSTER              ; Write the data to the free cluster
.3842d8	90 e8		bcc $3842c2	                BCC fail_cleanup                ; If failure: clean up stack and pass the failure up
.3842da	68		pla		                PLA                             ; Restore the cluster of the file
.3842db	85 10		sta $0330	                STA DOS_CLUS_ID
.3842dd	68		pla		                PLA
.3842de	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3842e0	22 b2 41 38	jsl $3841b2	walk_loop       JSL NEXTCLUSTER32               ; Try to get the next cluster in the chain
.3842e4	b0 fa		bcs $3842e0	                BCS walk_loop                   ; If found a cluster, keep walking the chain
.3842e6	ad 2c e0	lda $37e02c	                LDA DOS_NEW_CLUSTER             ; Write the ID of the new cluster to the end of the chain
.3842e9	9d 40 e3	sta $37e340,x	                STA DOS_SECTOR,X
.3842ec	ad 2e e0	lda $37e02e	                LDA DOS_NEW_CLUSTER+2
.3842ef	9d 42 e3	sta $37e342,x	                STA DOS_SECTOR+2,X
.3842f2	22 24 10 38	jsl $381024	                JSL PUTBLOCK                    ; Write the FAT sector back (assumes BIOS_LBA and BIOS_BUFF_PTR haven't changed)
.3842f6	b0 09		bcs $384301	                BCS ret_success
.3842f8	e2 20		sep #$20	                SEP #$20        ; set A short
.3842fa	a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Problem working with the FAT
.3842fc	85 0e		sta $032e	                STA DOS_STATUS
.3842fe	28		plp		pass_failure    PLP
.3842ff	18		clc		                CLC
.384300	6b		rtl		                RTL
.384301					ret_success
.384301	e2 20		sep #$20	                SEP #$20        ; set A short
.384303	64 0e		stz $032e	                STZ DOS_STATUS
.384305	28		plp		                PLP
.384306	38		sec		                SEC
.384307	6b		rtl		                RTL
.384308					DOS_DIRFINDFREE
.384308	08		php		                PHP
.384309	c2 30		rep #$30	                REP #$30        ; set A&X long
.38430b	ad 28 e0	lda $37e028	                LDA DOS_DIR_CLUS_ID
.38430e	85 10		sta $0330	                STA DOS_CLUS_ID
.384310	ad 2a e0	lda $37e02a	                LDA DOS_DIR_CLUS_ID+2
.384313	85 12		sta $0332	                STA DOS_CLUS_ID+2
.384315	a9 40 e1	lda #$e140	load_dir_clus   LDA #<>DOS_DIR_CLUSTER
.384318	85 1c		sta $033c	                STA DOS_BUFF_PTR
.38431a	a9 37 00	lda #$0037	                LDA #`DOS_DIR_CLUSTER
.38431d	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.38431f	22 97 3f 38	jsl $383f97	                JSL DOS_GETCLUSTER
.384323	b0 06		bcs $38432b	                BCS start_walk
.384325	a9 08 00	lda #$0008	                LDA #DOS_ERR_NODIR          ; Return that we could not read the directory
.384328	82 1f 00	brl $38434a	                BRL ret_failure
.38432b	22 dd 3f 38	jsl $383fdd	start_walk      JSL DOS_DIRFIRST            ; Point to the first directory entry
.38432f	a0 00 00	ldy #$0000	                LDY #0                      ; We check the first character of the entry
.384332					chk_entry
.384332	e2 20		sep #$20	                SEP #$20        ; set A short
.384334	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the first byte of the directory entry
.384336	f0 19		beq $384351	                BEQ ret_success             ; If 0: we have a blank... return it
.384338	c9 e5		cmp #$e5	                CMP #DOS_DIR_ENT_UNUSED     ; Is it an unused (deleted) entry?
.38433a	f0 15		beq $384351	                BEQ ret_success             ; Yes: return it
.38433c	22 ec 3f 38	jsl $383fec	                JSL DOS_DIRNEXT             ; Move to the next directory entry
.384340	b0 f0		bcs $384332	                BCS chk_entry               ; If there is one, check this next entry
.384342	22 b2 41 38	jsl $3841b2	                JSL NEXTCLUSTER32           ; Move to the next cluster of the directory
.384346	b0 e3		bcs $38432b	                BCS start_walk              ; If we got one, start walking it
.384348	00		brk #		                BRK                         ; For the moment, just fail
.384349	ea		nop		                NOP                         ; TODO: add a new cluster to the end of the directory
.38434a					ret_failure
.38434a	e2 20		sep #$20	                SEP #$20        ; set A short
.38434c	85 0e		sta $032e	                STA DOS_STATUS              ; Return failure
.38434e	28		plp		                PLP
.38434f	18		clc		                CLC
.384350	6b		rtl		                RTL
.384351					ret_success
.384351	c2 20		rep #$20	                REP #$20        ; set A long
.384353	a5 10		lda $0330	                LDA DOS_CLUS_ID             ; Return the directory cluster we found
.384355	8d 28 e0	sta $37e028	                STA DOS_DIR_CLUS_ID
.384358	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.38435a	8d 2a e0	sta $37e02a	                STA DOS_DIR_CLUS_ID+2
.38435d	e2 20		sep #$20	                SEP #$20        ; set A short
.38435f	64 0e		stz $032e	                STZ DOS_STATUS              ; And return success
.384361	28		plp		                PLP
.384362	38		sec		                SEC
.384363	6b		rtl		                RTL
.384364					DOS_CREATE
.384364	08		php		                PHP
.384365	c2 30		rep #$30	                REP #$30        ; set A&X long
.384367	a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; DOS_TEMP := DOS_FD_PTR->PATH
.38436a	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.38436c	85 28		sta $0348	                STA DOS_TEMP
.38436e	c8		iny		                INY
.38436f	c8		iny		                INY
.384370	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.384372	85 2a		sta $034a	                STA DOS_TEMP+2
.384374	e2 20		sep #$20	                SEP #$20        ; set A short
.384376	a0 00 00	ldy #$0000	                LDY #0
.384379	a2 00 00	ldx #$0000	                LDX #0
.38437c	b7 28		lda [$0348],y	path_loop       LDA [DOS_TEMP],Y                ; Get a byte of the path
.38437e	95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X             ; ... save it to the path buffer
.384380	f0 04		beq $384386	                BEQ find_file                   ; If it's NULL, we're done
.384382	e8		inx		                INX
.384383	c8		iny		                INY
.384384	80 f6		bra $38437c	                BRA path_loop
.384386	22 11 40 38	jsl $384011	find_file       JSL DOS_PARSE_PATH
.38438a	22 7e 40 38	jsl $38407e	                JSL DOS_FINDFILE
.38438e	90 07		bcc $384397	                BCC validate_name
.384390	e2 20		sep #$20	                SEP #$20        ; set A short
.384392	a9 0b		lda #$0b	                LDA #DOS_ERR_FILEEXISTS
.384394	82 e9 00	brl $384480	                BRL ret_failure
.384397					validate_name
.384397	22 01 42 38	jsl $384201	                JSL DOS_FREECLUS32
.38439b	b0 03		bcs $3843a0	                BCS save_data
.38439d	82 e4 00	brl $384484	                BRL pass_failure
.3843a0					save_data
.3843a0	c2 20		rep #$20	                REP #$20        ; set A long
.3843a2	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER
.3843a5	a5 10		lda $0330	                LDA DOS_CLUS_ID             ; DOS_FD_PTR->FIRST_CLUSTER := DOS_CLUS_ID
.3843a7	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3843a9	c8		iny		                INY
.3843aa	c8		iny		                INY
.3843ab	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3843ad	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3843af	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; DOS_BUFF_PTR := DOS_FD_PTR->BUFFER
.3843b2	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3843b4	85 1c		sta $033c	                STA DOS_BUFF_PTR
.3843b6	c8		iny		                INY
.3843b7	c8		iny		                INY
.3843b8	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3843ba	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3843bc	22 ba 3f 38	jsl $383fba	                JSL DOS_PUTCLUSTER
.3843c0	b0 03		bcs $3843c5	                BCS find_dir
.3843c2	82 bf 00	brl $384484	                BRL pass_failure
.3843c5					find_dir
.3843c5	c2 20		rep #$20	                REP #$20        ; set A long
.3843c7	ad 1c e0	lda $37e01c	                LDA ROOT_DIR_FIRST_CLUSTER      ; Scan the root directory
.3843ca	8d 28 e0	sta $37e028	                STA DOS_DIR_CLUS_ID
.3843cd	ad 1e e0	lda $37e01e	                LDA ROOT_DIR_FIRST_CLUSTER+2
.3843d0	8d 2a e0	sta $37e02a	                STA DOS_DIR_CLUS_ID+2
.3843d3	22 08 43 38	jsl $384308	                JSL DOS_DIRFINDFREE
.3843d7	b0 1a		bcs $3843f3	                BCS set_entry
.3843d9	c2 20		rep #$20	                REP #$20        ; set A long
.3843db	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Failed to get the directory entry...
.3843de	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y              ; DOS_CLUS_ID := DOS_FD_PTR->FIRST_CLUSTER
.3843e0	85 10		sta $0330	                STA DOS_CLUS_ID
.3843e2	c8		iny		                INY
.3843e3	c8		iny		                INY
.3843e4	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3843e6	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3843e8	22 8d 42 38	jsl $38428d	                JSL DELCLUSTER32                ; Delete the cluster
.3843ec	e2 20		sep #$20	                SEP #$20        ; set A short
.3843ee	a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Return that we couldn't read the directory
.3843f0	82 8d 00	brl $384480	                BRL ret_failure
.3843f3					set_entry
.3843f3	e2 20		sep #$20	                SEP #$20        ; set A short
.3843f5	a0 00 00	ldy #$0000	                LDY #0
.3843f8	a9 00		lda #$00	                LDA #0                          ; NULL
.3843fa	97 18		sta [$0338],y	copy_dir_loop   STA [DOS_DIR_PTR],Y             ; Save it to the directory cluster
.3843fc	c8		iny		                INY
.3843fd	c0 20 00	cpy #$0020	                CPY #SIZE(DIRENTRY)
.384400	d0 f8		bne $3843fa	                BNE copy_dir_loop
.384402	a0 00 00	ldy #$0000	                LDY #0
.384405	b9 30 e0	lda $37e030,y	name_loop       LDA DOS_SHORT_NAME,Y            ; Copy the name over
.384408	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.38440a	c8		iny		                INY
.38440b	c0 0b 00	cpy #$000b	                CPY #11
.38440e	d0 f5		bne $384405	                BNE name_loop
.384410	c2 20		rep #$20	                REP #$20        ; set A long
.384412	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; DOS_DIR_PTR->CLUSTER_L := DOS_FD_PTR->FIRST_CLUSTER[15..0]
.384415	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.384417	a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.38441a	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.38441c	a0 0c 00	ldy #$000c	                LDY #FILEDESC.FIRST_CLUSTER+2   ; DOS_DIR_PTR->CLUSTER_H := DOS_FD_PTR->FIRST_CLUSTER[31..16]
.38441f	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.384421	a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.384424	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.384426	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE              ; DOS_DIR_PTR->SIZE := DOS_FD_PTR->SIZE
.384429	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.38442b	a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE
.38442e	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.384430	a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.384433	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.384435	a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.384438	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.38443a	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; DOS_DIR_PTR->CREATE_DATE := DOS_FD_PTR->CREATE_DATE
.38443d	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.38443f	a0 10 00	ldy #$0010	                LDY #DIRENTRY.CREATE_DATE
.384442	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.384444	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME       ; DOS_DIR_PTR->CREATE_TIME := DOS_FD_PTR->CREATE_TIME
.384447	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.384449	a0 0e 00	ldy #$000e	                LDY #DIRENTRY.CREATE_TIME
.38444c	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.38444e	a0 1a 00	ldy #$001a	                LDY #FILEDESC.MODIFIED_DATE     ; DOS_DIR_PTR->MODIFIED_DATE := DOS_FD_PTR->MODIFIED_DATE
.384451	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.384453	a0 18 00	ldy #$0018	                LDY #DIRENTRY.MODIFIED_DATE
.384456	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.384458	a0 1c 00	ldy #$001c	                LDY #FILEDESC.MODIFIED_TIME     ; DOS_DIR_PTR->MODIFIED_TIME := DOS_FD_PTR->MODIFIED_TIME
.38445b	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.38445d	a0 16 00	ldy #$0016	                LDY #DIRENTRY.MODIFIED_TIME
.384460	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.384462	c2 20		rep #$20	                REP #$20        ; set A long
.384464	ad 28 e0	lda $37e028	                LDA DOS_DIR_CLUS_ID
.384467	85 10		sta $0330	                STA DOS_CLUS_ID
.384469	ad 2a e0	lda $37e02a	                LDA DOS_DIR_CLUS_ID+2
.38446c	85 12		sta $0332	                STA DOS_CLUS_ID+2
.38446e	a9 40 e1	lda #$e140	                LDA #<>DOS_DIR_CLUSTER
.384471	85 1c		sta $033c	                STA DOS_BUFF_PTR
.384473	a9 37 00	lda #$0037	                LDA #`DOS_DIR_CLUSTER
.384476	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.384478	22 ba 3f 38	jsl $383fba	                JSL DOS_PUTCLUSTER
.38447c	b0 09		bcs $384487	                BCS ret_success
.38447e	80 04		bra $384484	                BRA pass_failure
.384480					ret_failure
.384480	e2 20		sep #$20	                SEP #$20        ; set A short
.384482	85 0e		sta $032e	                STA DOS_STATUS
.384484	28		plp		pass_failure    PLP
.384485	18		clc		                CLC
.384486	6b		rtl		                RTL
.384487					ret_success
.384487	e2 20		sep #$20	                SEP #$20        ; set A short
.384489	64 0e		stz $032e	                STZ DOS_STATUS
.38448b	28		plp		                PLP
.38448c	38		sec		                SEC
.38448d	6b		rtl		                RTL
.38448e					DOS_COPYPATH
.38448e	08		php		                PHP
.38448f	c2 30		rep #$30	                REP #$30        ; set A&X long
.384491	a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH
.384494	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.384496	85 28		sta $0348	                STA DOS_TEMP
.384498	c8		iny		                INY
.384499	c8		iny		                INY
.38449a	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.38449c	85 2a		sta $034a	                STA DOS_TEMP+2
.38449e	e2 20		sep #$20	                SEP #$20        ; set A short
.3844a0	a2 00 00	ldx #$0000	                LDX #0
.3844a3	a0 00 00	ldy #$0000	                LDY #0
.3844a6	b7 28		lda [$0348],y	loop            LDA [DOS_TEMP],Y
.3844a8	95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.3844aa	f0 04		beq $3844b0	                BEQ done
.3844ac	e8		inx		                INX
.3844ad	c8		iny		                INY
.3844ae	d0 f6		bne $3844a6	                BNE loop
.3844b0	28		plp		done            PLP
.3844b1	6b		rtl		                RTL

;******  Return to file: src\sdos.asm

.3844b2					IF_OPEN
.3844b2	da		phx		                PHX
.3844b3	5a		phy		                PHY
.3844b4	0b		phd		                PHD
.3844b5	8b		phb		                PHB
.3844b6	08		php		                PHP
.3844b7	48		pha		                PHA             ; begin setdbr macro
.3844b8	08		php		                PHP
.3844b9	e2 20		sep #$20	                SEP #$20        ; set A short
.3844bb	a9 37		lda #$37	                LDA #`DOS_HIGH_VARIABLES
.3844bd	48		pha		                PHA
.3844be	ab		plb		                PLB
.3844bf	28		plp		                PLP
.3844c0	68		pla		                PLA             ; end setdbr macro
.3844c1	48		pha		                PHA             ; begin setdp macro
.3844c2	08		php		                PHP
.3844c3	c2 20		rep #$20	                REP #$20        ; set A long
.3844c5	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3844c8	5b		tcd		                TCD
.3844c9	28		plp		                PLP
.3844ca	68		pla		                PLA             ; end setdp macro
.3844cb	e2 20		sep #$20	                SEP #$20        ; set A short
.3844cd	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Get the status to make sure a open is ok
.3844d0	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3844d2	89 40		bit #$40	                BIT #FD_STAT_OPEN
.3844d4	f0 05		beq $3844db	                BEQ ok_to_open
.3844d6	a9 0f		lda #$0f	                LDA #DOS_ERR_OPEN               ; If already open: throw an error
.3844d8	82 90 05	brl $384a6b	                BRL IF_FAILURE
.3844db	22 8e 44 38	jsl $38448e	ok_to_open      JSL DOS_COPYPATH                ; Copy the path to the path buffer
.3844df	22 7e 40 38	jsl $38407e	                JSL DOS_FINDFILE                ; Attempt to find the file
.3844e3	b0 03		bcs $3844e8	                BCS is_found                    ; If OK: we found the file
.3844e5	82 87 05	brl $384a6f	                BRL IF_PASSFAILURE              ; Otherwise: pass the failure up the chain
.3844e8					is_found
.3844e8	c2 20		rep #$20	                REP #$20        ; set A long
.3844ea	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Set the buffer point to the one provided in the file
.3844ed	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3844ef	85 1c		sta $033c	                STA DOS_BUFF_PTR
.3844f1	c8		iny		                INY
.3844f2	c8		iny		                INY
.3844f3	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3844f5	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3844f7	22 97 3f 38	jsl $383f97	                JSL DOS_GETCLUSTER              ; Attempt to load the cluster
.3844fb	b0 03		bcs $384500	                BCS read_cluster
.3844fd	82 6f 05	brl $384a6f	                BRL IF_PASSFAILURE
.384500	a0 0a 00	ldy #$000a	read_cluster    LDY #FILEDESC.FIRST_CLUSTER     ; Set the first cluster in the file descriptor
.384503	a5 10		lda $0330	                LDA DOS_CLUS_ID
.384505	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.384507	c8		iny		                INY
.384508	c8		iny		                INY
.384509	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.38450b	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.38450d	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Set the current cluster in the file descriptor
.384510	a5 10		lda $0330	                LDA DOS_CLUS_ID
.384512	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.384514	c8		iny		                INY
.384515	c8		iny		                INY
.384516	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.384518	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.38451a	a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE              ; Copy the filesize from the directory entry to the file descriptor
.38451d	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.38451f	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE
.384522	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.384524	a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.384527	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.384529	a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.38452c	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.38452e	e2 20		sep #$20	                SEP #$20        ; set A short
.384530	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Mark file as open and readable
.384533	a9 41		lda #$41	                LDA #FD_STAT_OPEN | FD_STAT_READ
.384535	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.384537	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.384539	82 3a 05	brl $384a76	                BRL IF_SUCCESS
.38453c					IF_CREATE
.38453c	da		phx		                PHX
.38453d	5a		phy		                PHY
.38453e	0b		phd		                PHD
.38453f	8b		phb		                PHB
.384540	08		php		                PHP
.384541	48		pha		                PHA             ; begin setdbr macro
.384542	08		php		                PHP
.384543	e2 20		sep #$20	                SEP #$20        ; set A short
.384545	a9 37		lda #$37	                LDA #`DOS_HIGH_VARIABLES
.384547	48		pha		                PHA
.384548	ab		plb		                PLB
.384549	28		plp		                PLP
.38454a	68		pla		                PLA             ; end setdbr macro
.38454b	48		pha		                PHA             ; begin setdp macro
.38454c	08		php		                PHP
.38454d	c2 20		rep #$20	                REP #$20        ; set A long
.38454f	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.384552	5b		tcd		                TCD
.384553	28		plp		                PLP
.384554	68		pla		                PLA             ; end setdp macro
.384555	22 64 43 38	jsl $384364	                JSL DOS_CREATE                  ; Attempt to create the file
.384559	90 18		bcc $384573	                BCC pass_failure                ; If it fails: pass the failure up the chain
.38455b	c2 30		rep #$30	                REP #$30        ; set A&X long
.38455d	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Sets the current cluster to 0 to make sure the next write appends
.384560	a9 00 00	lda #$0000	                LDA #0
.384563	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.384565	c8		iny		                INY
.384566	c8		iny		                INY
.384567	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.384569	e2 20		sep #$20	                SEP #$20        ; set A short
.38456b	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS
.38456e	a9 42		lda #$42	                LDA #FD_STAT_OPEN | FD_STAT_WRITE   ; Set the file to open and APPEND only
.384570	82 03 05	brl $384a76	                BRL IF_SUCCESS
.384573	82 f5 04	brl $384a6b	pass_failure    BRL IF_FAILURE
.384576					IF_CLOSE
.384576	da		phx		                PHX
.384577	5a		phy		                PHY
.384578	0b		phd		                PHD
.384579	8b		phb		                PHB
.38457a	08		php		                PHP
.38457b	48		pha		                PHA             ; begin setdbr macro
.38457c	08		php		                PHP
.38457d	e2 20		sep #$20	                SEP #$20        ; set A short
.38457f	a9 37		lda #$37	                LDA #`DOS_HIGH_VARIABLES
.384581	48		pha		                PHA
.384582	ab		plb		                PLB
.384583	28		plp		                PLP
.384584	68		pla		                PLA             ; end setdbr macro
.384585	48		pha		                PHA             ; begin setdp macro
.384586	08		php		                PHP
.384587	c2 20		rep #$20	                REP #$20        ; set A long
.384589	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.38458c	5b		tcd		                TCD
.38458d	28		plp		                PLP
.38458e	68		pla		                PLA             ; end setdp macro
.38458f	e2 20		sep #$20	                SEP #$20        ; set A short
.384591	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Check to see if we were writing the file
.384594	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.384596	89 02		bit #$02	                BIT #FD_STAT_WRITE
.384598	f0 09		beq $3845a3	                BEQ set_flag                    ; No, just mark it closed
.38459a	22 25 46 38	jsl $384625	                JSL IF_WRITE                    ; Attempt to write the cluster
.38459e	b0 03		bcs $3845a3	                BCS set_flag
.3845a0	82 cc 04	brl $384a6f	                BRL IF_PASSFAILURE              ; If there was a problem, pass it up the chain
.3845a3	a0 00 00	ldy #$0000	set_flag        LDY #FILEDESC.STATUS
.3845a6	a9 bf		lda #$bf	                LDA #~FD_STAT_OPEN              ; Mark file as closed
.3845a8	37 20		and [$0340],y	                AND [DOS_FD_PTR],Y
.3845aa	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3845ac	82 c7 04	brl $384a76	                BRL IF_SUCCESS
.3845af					IF_READ
.3845af	da		phx		                PHX
.3845b0	5a		phy		                PHY
.3845b1	0b		phd		                PHD
.3845b2	8b		phb		                PHB
.3845b3	08		php		                PHP
.3845b4	48		pha		                PHA             ; begin setdbr macro
.3845b5	08		php		                PHP
.3845b6	e2 20		sep #$20	                SEP #$20        ; set A short
.3845b8	a9 37		lda #$37	                LDA #`DOS_HIGH_VARIABLES
.3845ba	48		pha		                PHA
.3845bb	ab		plb		                PLB
.3845bc	28		plp		                PLP
.3845bd	68		pla		                PLA             ; end setdbr macro
.3845be	48		pha		                PHA             ; begin setdp macro
.3845bf	08		php		                PHP
.3845c0	c2 20		rep #$20	                REP #$20        ; set A long
.3845c2	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3845c5	5b		tcd		                TCD
.3845c6	28		plp		                PLP
.3845c7	68		pla		                PLA             ; end setdp macro
.3845c8	c2 10		rep #$10	                REP #$10        ; set X long
.3845ca	e2 20		sep #$20	                SEP #$20        ; set A short
.3845cc	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Get the status to make sure a read is ok
.3845cf	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3845d1	89 40		bit #$40	                BIT #FD_STAT_OPEN               ; Make sure the file is open
.3845d3	f0 05		beq $3845da	                BEQ chk_readable
.3845d5	a9 0c		lda #$0c	                LDA #DOS_ERR_NOTOPEN            ; If not: throw a NOTOPEN error
.3845d7	82 91 04	brl $384a6b	                BRL IF_FAILURE
.3845da	89 01		bit #$01	chk_readable    BIT #FD_STAT_READ               ; Make sure the file is readable
.3845dc	f0 05		beq $3845e3	                BEQ get_dev
.3845de	a9 0d		lda #$0d	                LDA #DOS_ERR_NOTREAD            ; If not: throw a NOTREAD error
.3845e0	82 88 04	brl $384a6b	                BRL IF_FAILURE
.3845e3	a0 01 00	ldy #$0001	get_dev         LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.3845e6	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3845e8	85 01		sta $0321	                STA BIOS_DEV
.3845ea	c2 20		rep #$20	                REP #$20        ; set A long
.3845ec	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.3845ef	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3845f1	85 10		sta $0330	                STA DOS_CLUS_ID
.3845f3	c8		iny		                INY
.3845f4	c8		iny		                INY
.3845f5	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3845f7	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3845f9	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.3845fc	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3845fe	85 1c		sta $033c	                STA DOS_BUFF_PTR
.384600	c8		iny		                INY
.384601	c8		iny		                INY
.384602	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.384604	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.384606	22 b2 41 38	jsl $3841b2	                JSL NEXTCLUSTER32               ; Find the next cluster of the file
.38460a	90 13		bcc $38461f	                BCC pass_failure                ; If not OK: pass the failure up the chaing
.38460c	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Update the file's current cluster
.38460f	a5 10		lda $0330	                LDA DOS_CLUS_ID
.384611	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.384613	c8		iny		                INY
.384614	c8		iny		                INY
.384615	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.384617	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.384619	22 97 3f 38	jsl $383f97	                JSL DOS_GETCLUSTER              ; Get the cluster
.38461d	b0 03		bcs $384622	                BCS ret_success                 ; If ok: return success
.38461f	82 4d 04	brl $384a6f	pass_failure    BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.384622	82 51 04	brl $384a76	ret_success     BRL IF_SUCCESS
.384625					IF_WRITE
.384625	da		phx		                PHX
.384626	5a		phy		                PHY
.384627	0b		phd		                PHD
.384628	8b		phb		                PHB
.384629	08		php		                PHP
.38462a	48		pha		                PHA             ; begin setdbr macro
.38462b	08		php		                PHP
.38462c	e2 20		sep #$20	                SEP #$20        ; set A short
.38462e	a9 37		lda #$37	                LDA #`DOS_HIGH_VARIABLES
.384630	48		pha		                PHA
.384631	ab		plb		                PLB
.384632	28		plp		                PLP
.384633	68		pla		                PLA             ; end setdbr macro
.384634	48		pha		                PHA             ; begin setdp macro
.384635	08		php		                PHP
.384636	c2 20		rep #$20	                REP #$20        ; set A long
.384638	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.38463b	5b		tcd		                TCD
.38463c	28		plp		                PLP
.38463d	68		pla		                PLA             ; end setdp macro
.38463e	c2 10		rep #$10	                REP #$10        ; set X long
.384640	e2 20		sep #$20	                SEP #$20        ; set A short
.384642	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Get the status to make sure a read is ok
.384645	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.384647	89 40		bit #$40	                BIT #FD_STAT_OPEN               ; Make sure the file is open
.384649	f0 05		beq $384650	                BEQ chk_readable
.38464b	a9 0c		lda #$0c	                LDA #DOS_ERR_NOTOPEN            ; If not: throw a NOTOPEN error
.38464d	82 1b 04	brl $384a6b	                BRL IF_FAILURE
.384650	89 02		bit #$02	chk_readable    BIT #FD_STAT_WRITE              ; Make sure the file is WRITE
.384652	f0 05		beq $384659	                BEQ get_dev
.384654	a9 0e		lda #$0e	                LDA #DOS_ERR_NOTWRITE           ; If not: throw a NOTWRITE error
.384656	82 12 04	brl $384a6b	                BRL IF_FAILURE
.384659	a0 01 00	ldy #$0001	get_dev         LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.38465c	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.38465e	85 01		sta $0321	                STA BIOS_DEV
.384660	c2 20		rep #$20	                REP #$20        ; set A long
.384662	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.384665	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.384667	85 1c		sta $033c	                STA DOS_BUFF_PTR
.384669	c8		iny		                INY
.38466a	c8		iny		                INY
.38466b	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.38466d	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.38466f	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.384672	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.384674	85 10		sta $0330	                STA DOS_CLUS_ID
.384676	c8		iny		                INY
.384677	c8		iny		                INY
.384678	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.38467a	85 12		sta $0332	                STA DOS_CLUS_ID+2
.38467c	d0 1a		bne $384698	                BNE rewrite_cluster             ; If the cluster ID <> 0, overwrite it
.38467e	a5 10		lda $0330	                LDA DOS_CLUS_ID
.384680	d0 16		bne $384698	                BNE rewrite_cluster
.384682	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Get the file's first cluster
.384685	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.384687	85 10		sta $0330	                STA DOS_CLUS_ID
.384689	c8		iny		                INY
.38468a	c8		iny		                INY
.38468b	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.38468d	85 12		sta $0332	                STA DOS_CLUS_ID+2
.38468f	22 b3 42 38	jsl $3842b3	                JSL DOS_APPENDCLUS              ; Append the cluster
.384693	b0 0c		bcs $3846a1	                BCS ret_success                 ; If OK: return success
.384695	82 d7 03	brl $384a6f	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.384698	22 ba 3f 38	jsl $383fba	rewrite_cluster JSL DOS_PUTCLUSTER              ; Over-write the cluster
.38469c	b0 03		bcs $3846a1	                BCS ret_success                 ; If ok: return success
.38469e	82 ce 03	brl $384a6f	pass_failure    BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.3846a1	82 d2 03	brl $384a76	ret_success     BRL IF_SUCCESS
.3846a4					IF_DIROPEN
.3846a4	da		phx		                PHX
.3846a5	5a		phy		                PHY
.3846a6	0b		phd		                PHD
.3846a7	8b		phb		                PHB
.3846a8	08		php		                PHP
.3846a9	48		pha		                PHA             ; begin setdbr macro
.3846aa	08		php		                PHP
.3846ab	e2 20		sep #$20	                SEP #$20        ; set A short
.3846ad	a9 37		lda #$37	                LDA #`DOS_HIGH_VARIABLES
.3846af	48		pha		                PHA
.3846b0	ab		plb		                PLB
.3846b1	28		plp		                PLP
.3846b2	68		pla		                PLA             ; end setdbr macro
.3846b3	48		pha		                PHA             ; begin setdp macro
.3846b4	08		php		                PHP
.3846b5	c2 20		rep #$20	                REP #$20        ; set A long
.3846b7	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3846ba	5b		tcd		                TCD
.3846bb	28		plp		                PLP
.3846bc	68		pla		                PLA             ; end setdp macro
.3846bd	e2 20		sep #$20	                SEP #$20        ; set A short
.3846bf	a9 02		lda #$02	                LDA #BIOS_DEV_SD
.3846c1	85 01		sta $0321	                STA BIOS_DEV
.3846c3	22 29 3e 38	jsl $383e29	                JSL DOS_MOUNT               ; Make sure we've mounted the SDC.
.3846c7	b0 03		bcs $3846cc	                BCS get_root_dir            ; If successful: get the root directory
.3846c9	82 a3 03	brl $384a6f	                BRL IF_PASSFAILURE          ; Otherwise: pass the error up the chain
.3846cc					get_root_dir
.3846cc	c2 20		rep #$20	                REP #$20        ; set A long
.3846ce	ad 1c e0	lda $37e01c	                LDA ROOT_DIR_FIRST_CLUSTER
.3846d1	8d 28 e0	sta $37e028	                STA DOS_DIR_CLUS_ID
.3846d4	85 10		sta $0330	                STA DOS_CLUS_ID
.3846d6	ad 1e e0	lda $37e01e	                LDA ROOT_DIR_FIRST_CLUSTER+2
.3846d9	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3846db	8d 2a e0	sta $37e02a	                STA DOS_DIR_CLUS_ID+2
.3846de	a9 40 e1	lda #$e140	                LDA #<>DOS_DIR_CLUSTER
.3846e1	85 1c		sta $033c	                STA DOS_BUFF_PTR
.3846e3	85 18		sta $0338	                STA DOS_DIR_PTR
.3846e5	a9 37 00	lda #$0037	                LDA #`DOS_DIR_CLUSTER
.3846e8	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3846ea	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.3846ec	22 97 3f 38	jsl $383f97	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.3846f0	b0 03		bcs $3846f5	                BCS do_success              ; If successful: set the directory cursor
.3846f2	82 7a 03	brl $384a6f	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.3846f5	82 7e 03	brl $384a76	do_success      BRL IF_SUCCESS
.3846f8					IF_DIRNEXT
.3846f8	da		phx		                PHX
.3846f9	5a		phy		                PHY
.3846fa	0b		phd		                PHD
.3846fb	8b		phb		                PHB
.3846fc	08		php		                PHP
.3846fd	48		pha		                PHA             ; begin setdbr macro
.3846fe	08		php		                PHP
.3846ff	e2 20		sep #$20	                SEP #$20        ; set A short
.384701	a9 37		lda #$37	                LDA #`DOS_HIGH_VARIABLES
.384703	48		pha		                PHA
.384704	ab		plb		                PLB
.384705	28		plp		                PLP
.384706	68		pla		                PLA             ; end setdbr macro
.384707	48		pha		                PHA             ; begin setdp macro
.384708	08		php		                PHP
.384709	c2 20		rep #$20	                REP #$20        ; set A long
.38470b	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.38470e	5b		tcd		                TCD
.38470f	28		plp		                PLP
.384710	68		pla		                PLA             ; end setdp macro
.384711	22 ec 3f 38	jsl $383fec	                JSL DOS_DIRNEXT             ; Attempt to move to the next entry
.384715	b0 36		bcs $38474d	                BCS do_success              ; If successful, return success
.384717	c2 20		rep #$20	                REP #$20        ; set A long
.384719	ad 28 e0	lda $37e028	                LDA DOS_DIR_CLUS_ID
.38471c	85 10		sta $0330	                STA DOS_CLUS_ID
.38471e	ad 2a e0	lda $37e02a	                LDA DOS_DIR_CLUS_ID+2
.384721	85 12		sta $0332	                STA DOS_CLUS_ID+2
.384723	a9 40 e1	lda #$e140	                LDA #<>DOS_DIR_CLUSTER
.384726	85 1c		sta $033c	                STA DOS_BUFF_PTR
.384728	85 18		sta $0338	                STA DOS_DIR_PTR
.38472a	a9 37 00	lda #$0037	                LDA #`DOS_DIR_CLUSTER
.38472d	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.38472f	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.384731	22 b2 41 38	jsl $3841b2	                JSL NEXTCLUSTER32           ; Try to find the next cluster
.384735	b0 03		bcs $38473a	                BCS set_next
.384737	82 35 03	brl $384a6f	                BRL IF_PASSFAILURE          ; If error: pass it up the chain
.38473a	a5 10		lda $0330	set_next        LDA DOS_CLUS_ID             ; Save the cluster as the current directory cluster
.38473c	8d 28 e0	sta $37e028	                STA DOS_DIR_CLUS_ID
.38473f	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.384741	8d 2a e0	sta $37e02a	                STA DOS_DIR_CLUS_ID+2
.384744	22 97 3f 38	jsl $383f97	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.384748	b0 03		bcs $38474d	                BCS do_success              ; If successful: set the directory cursor
.38474a	82 22 03	brl $384a6f	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.38474d	82 26 03	brl $384a76	do_success      BRL IF_SUCCESS
.384750					IF_DELETE
.384750	da		phx		                PHX
.384751	5a		phy		                PHY
.384752	0b		phd		                PHD
.384753	8b		phb		                PHB
.384754	08		php		                PHP
.384755	48		pha		                PHA             ; begin setdbr macro
.384756	08		php		                PHP
.384757	e2 20		sep #$20	                SEP #$20        ; set A short
.384759	a9 37		lda #$37	                LDA #`DOS_HIGH_VARIABLES
.38475b	48		pha		                PHA
.38475c	ab		plb		                PLB
.38475d	28		plp		                PLP
.38475e	68		pla		                PLA             ; end setdbr macro
.38475f	48		pha		                PHA             ; begin setdp macro
.384760	08		php		                PHP
.384761	c2 20		rep #$20	                REP #$20        ; set A long
.384763	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.384766	5b		tcd		                TCD
.384767	28		plp		                PLP
.384768	68		pla		                PLA             ; end setdp macro
.384769	c2 30		rep #$30	                REP #$30        ; set A&X long
.38476b	22 7e 40 38	jsl $38407e	                JSL DOS_FINDFILE
.38476f	b0 03		bcs $384774	                BCS get_first_clus
.384771	82 fb 02	brl $384a6f	                BRL IF_PASSFAILURE
.384774					get_first_clus
.384774	a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.384777	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.384779	85 10		sta $0330	                STA DOS_CLUS_ID
.38477b	a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.38477e	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.384780	85 12		sta $0332	                STA DOS_CLUS_ID+2
.384782	a5 10		lda $0330	                LDA DOS_CLUS_ID
.384784	8d 20 e0	sta $37e020	                STA DOS_CURR_CLUS
.384787	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.384789	8d 22 e0	sta $37e022	                STA DOS_CURR_CLUS+2
.38478c	22 b2 41 38	jsl $3841b2	del_loop        JSL NEXTCLUSTER32
.384790	90 2f		bcc $3847c1	                BCC del_one
.384792	a5 10		lda $0330	                LDA DOS_CLUS_ID
.384794	8d 24 e0	sta $37e024	                STA DOS_NEXT_CLUS
.384797	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.384799	8d 26 e0	sta $37e026	                STA DOS_NEXT_CLUS+2
.38479c	ad 20 e0	lda $37e020	                LDA DOS_CURR_CLUS
.38479f	85 10		sta $0330	                STA DOS_CLUS_ID
.3847a1	ad 22 e0	lda $37e022	                LDA DOS_CURR_CLUS+2
.3847a4	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3847a6	22 8d 42 38	jsl $38428d	                JSL DELCLUSTER32
.3847aa	b0 03		bcs $3847af	                BCS go_next
.3847ac	82 c0 02	brl $384a6f	                BRL IF_PASSFAILURE
.3847af					go_next
.3847af	ad 24 e0	lda $37e024	                LDA DOS_NEXT_CLUS
.3847b2	85 10		sta $0330	                STA DOS_CLUS_ID
.3847b4	8d 20 e0	sta $37e020	                STA DOS_CURR_CLUS
.3847b7	ad 26 e0	lda $37e026	                LDA DOS_NEXT_CLUS+2
.3847ba	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3847bc	8d 22 e0	sta $37e022	                STA DOS_CURR_CLUS+2
.3847bf	80 cb		bra $38478c	                BRA del_loop
.3847c1					del_one
.3847c1	ad 20 e0	lda $37e020	                LDA DOS_CURR_CLUS
.3847c4	85 10		sta $0330	                STA DOS_CLUS_ID
.3847c6	ad 22 e0	lda $37e022	                LDA DOS_CURR_CLUS+2
.3847c9	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3847cb	22 8d 42 38	jsl $38428d	                JSL DELCLUSTER32
.3847cf	b0 03		bcs $3847d4	                BCS free_dir_entry
.3847d1	82 9b 02	brl $384a6f	                BRL IF_PASSFAILURE
.3847d4					free_dir_entry
.3847d4	e2 20		sep #$20	                SEP #$20        ; set A short
.3847d6	a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME         ; Flag the directory entry as deleted
.3847d9	a9 e5		lda #$e5	                LDA #DOS_DIR_ENT_UNUSED
.3847db	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.3847dd	c2 20		rep #$20	                REP #$20        ; set A long
.3847df	ad 28 e0	lda $37e028	                LDA DOS_DIR_CLUS_ID             ; Set up to write the directory cluster
.3847e2	85 10		sta $0330	                STA DOS_CLUS_ID
.3847e4	ad 2a e0	lda $37e02a	                LDA DOS_DIR_CLUS_ID+2
.3847e7	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3847e9	a9 40 e1	lda #$e140	                LDA #<>DOS_DIR_CLUSTER          ; And its buffer
.3847ec	85 1c		sta $033c	                STA DOS_BUFF_PTR
.3847ee	a9 37 00	lda #$0037	                LDA #`DOS_DIR_CLUSTER
.3847f1	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3847f3	22 ba 3f 38	jsl $383fba	                JSL DOS_PUTCLUSTER              ; Write the cluster back
.3847f7	b0 03		bcs $3847fc	                BCS ret_success
.3847f9	82 73 02	brl $384a6f	                BRL IF_PASSFAILURE
.3847fc	82 77 02	brl $384a76	ret_success     BRL IF_SUCCESS
.3847ff	00		brk #		IF_RENAME       BRK
.384800					IF_LOAD
.384800	da		phx		                PHX
.384801	5a		phy		                PHY
.384802	0b		phd		                PHD
.384803	8b		phb		                PHB
.384804	08		php		                PHP
.384805	48		pha		                PHA             ; begin setdbr macro
.384806	08		php		                PHP
.384807	e2 20		sep #$20	                SEP #$20        ; set A short
.384809	a9 37		lda #$37	                LDA #`DOS_HIGH_VARIABLES
.38480b	48		pha		                PHA
.38480c	ab		plb		                PLB
.38480d	28		plp		                PLP
.38480e	68		pla		                PLA             ; end setdbr macro
.38480f	48		pha		                PHA             ; begin setdp macro
.384810	08		php		                PHP
.384811	c2 20		rep #$20	                REP #$20        ; set A long
.384813	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.384816	5b		tcd		                TCD
.384817	28		plp		                PLP
.384818	68		pla		                PLA             ; end setdp macro
.384819	c2 30		rep #$30	                REP #$30        ; set A&X long
.38481b	22 b2 44 38	jsl $3844b2	                JSL IF_OPEN
.38481f	b0 03		bcs $384824	                BCS setup                   ; If success: start setting things up
.384821	82 4b 02	brl $384a6f	                BRL IF_PASSFAILURE          ; Otherwise: pass the failure up the chain
.384824					setup
.384824	c2 20		rep #$20	                REP #$20        ; set A long
.384826	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE          ; Record the size of the file in DOS_FILE_SIZE
.384829	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.38482b	85 2c		sta $034c	                STA DOS_FILE_SIZE
.38482d	c8		iny		                INY
.38482e	c8		iny		                INY
.38482f	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.384831	85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.384833	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; Set up the source pointer
.384836	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.384838	85 30		sta $0350	                STA DOS_SRC_PTR
.38483a	c8		iny		                INY
.38483b	c8		iny		                INY
.38483c	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.38483e	85 32		sta $0352	                STA DOS_SRC_PTR+2
.384840	a5 36		lda $0356	                LDA DOS_DST_PTR+2           ; Is there a destination address in RAM?
.384842	c9 40 00	cmp #$0040	                CMP #$0040
.384845	b0 04		bcs $38484b	                BGE load_by_type            ; No: try to load it by type
.384847	5c 15 49 38	jmp $384915	                JML IF_LOADRAW              ; Otherwise, load it to the supplied destination
.38484b	a0 08 00	ldy #$0008	load_by_type    LDY #8                      ; Point to the first extension byte
.38484e	a2 00 00	ldx #$0000	                LDX #0                      ; and the first byte of the table
.384851					type_loop
.384851	e2 20		sep #$20	                SEP #$20        ; set A short
.384853	bf 97 48 38	lda $384897,x	                LDA LOAD_TYPE_TABLE,X       ; Get 1st extension character of the entry
.384857	f0 37		beq $384890	                BEQ no_match                ; If NULL... we didn't get a match
.384859	d9 30 e0	cmp $37e030,y	                CMP DOS_SHORT_NAME,Y        ; Get the character of the extension
.38485c	d0 28		bne $384886	                BNE next_entry              ; If they don't match, try the next entry
.38485e	bf 98 48 38	lda $384898,x	                LDA LOAD_TYPE_TABLE+1,X     ; Get 2nd extension character of the entry
.384862	d9 31 e0	cmp $37e031,y	                CMP DOS_SHORT_NAME+1,Y      ; Get the 2nd character of the extension
.384865	d0 1f		bne $384886	                BNE next_entry              ; If they don't match, try the next entry
.384867	bf 99 48 38	lda $384899,x	                LDA LOAD_TYPE_TABLE+2,X     ; Get 3rd extension character of the entry
.38486b	d9 32 e0	cmp $37e032,y	                CMP DOS_SHORT_NAME+2,Y      ; Get the 3rd character of the extension
.38486e	d0 16		bne $384886	                BNE next_entry              ; If they don't match, try the next entry
.384870	c2 20		rep #$20	                REP #$20        ; set A long
.384872	bf 9a 48 38	lda $38489a,x	                LDA LOAD_TYPE_TABLE+3,X     ; Get the low word of the address
.384876	85 28		sta $0348	                STA DOS_TEMP                ; Save it to the jump vector
.384878	e2 20		sep #$20	                SEP #$20        ; set A short
.38487a	bf 9c 48 38	lda $38489c,x	                LDA LOAD_TYPE_TABLE+5,X     ; Get the high byte of the address
.38487e	85 2a		sta $034a	                STA DOS_TEMP+2              ; Save it to the jump vector
.384880	a2 00 00	ldx #$0000	                LDX #0
.384883	dc 48 03	jmp [$0348]	                JML [DOS_TEMP]              ; Jump to the loading routine
.384886					next_entry
.384886	c2 30		rep #$30	                REP #$30        ; set A&X long
.384888	8a		txa		                TXA
.384889	18		clc		                CLC
.38488a	69 06 00	adc #$0006	                ADC #6
.38488d	aa		tax		                TAX
.38488e	80 c1		bra $384851	                BRA type_loop               ; And check it against the file
.384890					no_match
.384890	e2 20		sep #$20	                SEP #$20        ; set A short
.384892	a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC         ; Return an not-executable error
.384894	82 d4 01	brl $384a6b	                BRL IF_FAILURE
>384897	50 47 58			LOAD_TYPE_TABLE .text "PGX"                 ; "PGX" --> IF_LOADPGX
>38489a	9e 48				                .word <>IF_LOADPGX
>38489c	38				                .byte `IF_LOADPGX
>38489d	00				                .byte 0
.38489e					IF_LOADPGX
.38489e	c2 10		rep #$10	                REP #$10        ; set X long
.3848a0	e2 20		sep #$20	                SEP #$20        ; set A short
.3848a2	a0 00 00	ldy #$0000	                LDY #0
.3848a5	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Check for "PGX" signature
.3848a7	c9 50		cmp #$50	                CMP #'P'
.3848a9	d0 15		bne $3848c0	                BNE fail_sig                        ; If not found, fail
.3848ab	c8		iny		                INY
.3848ac	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.3848ae	c9 47		cmp #$47	                CMP #'G'
.3848b0	d0 0e		bne $3848c0	                BNE fail_sig
.3848b2	c8		iny		                INY
.3848b3	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.3848b5	c9 58		cmp #$58	                CMP #'X'
.3848b7	d0 07		bne $3848c0	                BNE fail_sig
.3848b9	c8		iny		                INY                                 ; Check for CPU and version code ($01 for 65816)
.3848ba	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.3848bc	c9 01		cmp #$01	                CMP #$01
.3848be	f0 06		beq $3848c6	                BEQ get_dest                        ; All passes: go to get the destination address
.3848c0	a9 10		lda #$10	fail_sig        LDA #DOS_ERR_PGXSIG                 ; Fail with a PGXSIG error code
.3848c2	22 6b 4a 38	jsl $384a6b	                JSL IF_FAILURE
.3848c6					get_dest
.3848c6	c2 20		rep #$20	                REP #$20        ; set A long
.3848c8	c8		iny		                INY
.3848c9	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get low word of destination address
.3848cb	85 34		sta $0354	                STA DOS_DST_PTR                     ; And save it to the destination pointer
.3848cd	85 3c		sta $035c	                STA DOS_RUN_PTR                     ; And save it to the RUN pointer
.3848cf	c8		iny		                INY
.3848d0	c8		iny		                INY
.3848d1	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get high word of destination address
.3848d3	85 36		sta $0356	                STA DOS_DST_PTR+2
.3848d5	85 3e		sta $035e	                STA DOS_RUN_PTR+2
.3848d7	c8		iny		                INY                                 ; Point to the first data byte
.3848d8	c8		iny		                INY
.3848d9					copy_loop
.3848d9	e2 20		sep #$20	                SEP #$20        ; set A short
.3848db	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Read a byte from the file
.3848dd	87 34		sta [$0354]	                STA [DOS_DST_PTR]                   ; Write it to the destination
.3848df	c2 20		rep #$20	                REP #$20        ; set A long
.3848e1	e6 34		inc $0354	                INC DOS_DST_PTR                     ; Move to the next destination location
.3848e3	d0 02		bne $3848e7	                BNE dec_file_size
.3848e5	e6 34		inc $0354	                INC DOS_DST_PTR
.3848e7	38		sec		dec_file_size   SEC                                 ; Count down the number of bytes to read
.3848e8	a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.3848ea	e9 01 00	sbc #$0001	                SBC #1
.3848ed	85 2c		sta $034c	                STA DOS_FILE_SIZE
.3848ef	a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.3848f1	e9 00 00	sbc #$0000	                SBC #0
.3848f4	85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.3848f6	a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Are we at the end of the file?
.3848f8	d0 04		bne $3848fe	                BNE next_byte
.3848fa	a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.3848fc	f0 14		beq $384912	                BEQ done                            ; Yes: we're done
.3848fe	c8		iny		next_byte       INY                                 ; Otherwise, move to the next source location
.3848ff	cc 0e e0	cpy $37e00e	                CPY CLUSTER_SIZE                    ; Are we at the end of the cluster?
.384902	d0 d5		bne $3848d9	                BNE copy_loop                       ; No: keep copying
.384904	22 b2 41 38	jsl $3841b2	                JSL NEXTCLUSTER32                   ; Yes: Load the next cluster
.384908	b0 03		bcs $38490d	                BCS next_cluster
.38490a	82 62 01	brl $384a6f	                BRL IF_PASSFAILURE                  ; If failed: pass that up the chain
.38490d	a0 00 00	ldy #$0000	next_cluster    LDY #0                              ; Reset the source index
.384910	80 c7		bra $3848d9	                BRA copy_loop                       ; Go back to copying
.384912	82 61 01	brl $384a76	done            BRL IF_SUCCESS
.384915					IF_LOADRAW
.384915	c2 30		rep #$30	                REP #$30        ; set A&X long
.384917	a0 00 00	ldy #$0000	copy_cluster    LDY #0
.38491a					copy_loop
.38491a	e2 20		sep #$20	                SEP #$20        ; set A short
.38491c	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y         ; Copy byte from cluster to destination
.38491e	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.384920	c2 20		rep #$20	                REP #$20        ; set A long
.384922	38		sec		                SEC                         ; Count down the number of bytes left
.384923	a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.384925	e9 01 00	sbc #$0001	                SBC #1
.384928	85 2c		sta $034c	                STA DOS_FILE_SIZE
.38492a	a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.38492c	e9 00 00	sbc #$0000	                SBC #0
.38492f	85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.384931	d0 04		bne $384937	                BNE continue
.384933	a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.384935	f0 1b		beq $384952	                BEQ close_file              ; If not: we're done
.384937	c8		iny		continue        INY
.384938	cc 0e e0	cpy $37e00e	                CPY CLUSTER_SIZE            ; Are we done with the cluster?
.38493b	d0 dd		bne $38491a	                BNE copy_loop               ; No: keep processing the bytes
.38493d	18		clc		                CLC                         ; Advance the destination pointer to the next chunk of memory
.38493e	a5 34		lda $0354	                LDA DOS_DST_PTR
.384940	6d 0e e0	adc $37e00e	                ADC CLUSTER_SIZE
.384943	85 34		sta $0354	                STA DOS_DST_PTR
.384945	a5 36		lda $0356	                LDA DOS_DST_PTR+2
.384947	69 00 00	adc #$0000	                ADC #0
.38494a	85 36		sta $0356	                STA DOS_DST_PTR+2
.38494c	22 b2 41 38	jsl $3841b2	                JSL NEXTCLUSTER32           ; Yes: load the next cluster
.384950	90 c5		bcc $384917	                BCC copy_cluster            ; And start copying it
.384952	22 76 45 38	jsl $384576	close_file      JSL IF_CLOSE                ; Close the file
.384956	b0 03		bcs $38495b	                BCS ret_success             ; If success: we're done
.384958	82 14 01	brl $384a6f	                BRL IF_PASSFAILURE          ; Otherwise: pass the failure up the chain
.38495b	82 18 01	brl $384a76	ret_success     BRL IF_SUCCESS
.38495e					IF_NULLBUFFER
.38495e	5a		phy		                PHY
.38495f	8b		phb		                PHB
.384960	0b		phd		                PHD
.384961	08		php		                PHP
.384962	48		pha		                PHA             ; begin setdbr macro
.384963	08		php		                PHP
.384964	e2 20		sep #$20	                SEP #$20        ; set A short
.384966	a9 37		lda #$37	                LDA #`DOS_HIGH_VARIABLES
.384968	48		pha		                PHA
.384969	ab		plb		                PLB
.38496a	28		plp		                PLP
.38496b	68		pla		                PLA             ; end setdbr macro
.38496c	48		pha		                PHA             ; begin setdp macro
.38496d	08		php		                PHP
.38496e	c2 20		rep #$20	                REP #$20        ; set A long
.384970	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.384973	5b		tcd		                TCD
.384974	28		plp		                PLP
.384975	68		pla		                PLA             ; end setdp macro
.384976	c2 30		rep #$30	                REP #$30        ; set A&X long
.384978	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.38497b	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.38497d	85 28		sta $0348	                STA DOS_TEMP
.38497f	c8		iny		                INY
.384980	c8		iny		                INY
.384981	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.384983	85 2a		sta $034a	                STA DOS_TEMP+2
.384985	a0 00 00	ldy #$0000	                LDY #0
.384988	a9 00 00	lda #$0000	                LDA #0
.38498b	97 28		sta [$0348],y	loop            STA [DOS_TEMP],Y
.38498d	c8		iny		                INY
.38498e	c8		iny		                INY
.38498f	cc 0e e0	cpy $37e00e	                CPY CLUSTER_SIZE
.384992	d0 f7		bne $38498b	                BNE loop
.384994	28		plp		                PLP
.384995	2b		pld		                PLD
.384996	ab		plb		                PLB
.384997	7a		ply		                PLY
.384998	6b		rtl		                RTL
.384999					IF_COPY2BUFF
.384999	5a		phy		                PHY
.38499a	8b		phb		                PHB
.38499b	0b		phd		                PHD
.38499c	08		php		                PHP
.38499d	48		pha		                PHA             ; begin setdbr macro
.38499e	08		php		                PHP
.38499f	e2 20		sep #$20	                SEP #$20        ; set A short
.3849a1	a9 37		lda #$37	                LDA #`DOS_HIGH_VARIABLES
.3849a3	48		pha		                PHA
.3849a4	ab		plb		                PLB
.3849a5	28		plp		                PLP
.3849a6	68		pla		                PLA             ; end setdbr macro
.3849a7	48		pha		                PHA             ; begin setdp macro
.3849a8	08		php		                PHP
.3849a9	c2 20		rep #$20	                REP #$20        ; set A long
.3849ab	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3849ae	5b		tcd		                TCD
.3849af	28		plp		                PLP
.3849b0	68		pla		                PLA             ; end setdp macro
.3849b1	c2 30		rep #$30	                REP #$30        ; set A&X long
.3849b3	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.3849b6	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3849b8	85 28		sta $0348	                STA DOS_TEMP
.3849ba	c8		iny		                INY
.3849bb	c8		iny		                INY
.3849bc	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3849be	85 2a		sta $034a	                STA DOS_TEMP+2
.3849c0	a0 00 00	ldy #$0000	                LDY #0
.3849c3					copy_loop
.3849c3	e2 20		sep #$20	                SEP #$20        ; set A short
.3849c5	a7 30		lda [$0350]	                LDA [DOS_SRC_PTR]           ; Copy a byte
.3849c7	97 28		sta [$0348],y	                STA [DOS_TEMP],Y
.3849c9	c2 20		rep #$20	                REP #$20        ; set A long
.3849cb	c8		iny		                INY                         ; Count it
.3849cc	cc 0e e0	cpy $37e00e	                CPY CLUSTER_SIZE            ; Have we reached the limit?
.3849cf	f0 14		beq $3849e5	                BEQ done                    ; Yes: we're done
.3849d1	a5 30		lda $0350	                LDA DOS_SRC_PTR             ; Check if we copied the last byte
.3849d3	c5 38		cmp $0358	                CMP DOS_END_PTR
.3849d5	d0 06		bne $3849dd	                BNE next_byte
.3849d7	a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.3849d9	c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.3849db	f0 08		beq $3849e5	                BEQ done                    ; Yes: we're done
.3849dd	e6 30		inc $0350	next_byte       INC DOS_SRC_PTR             ; No: advance the source pointer
.3849df	d0 e2		bne $3849c3	                BNE copy_loop
.3849e1	e6 32		inc $0352	                INC DOS_SRC_PTR+2
.3849e3	80 de		bra $3849c3	                BRA copy_loop               ; And try this next byte
.3849e5	28		plp		done            PLP
.3849e6	2b		pld		                PLD
.3849e7	ab		plb		                PLB
.3849e8	7a		ply		                PLY
.3849e9	6b		rtl		                RTL
.3849ea					IF_SAVE
.3849ea	da		phx		                PHX
.3849eb	5a		phy		                PHY
.3849ec	0b		phd		                PHD
.3849ed	8b		phb		                PHB
.3849ee	08		php		                PHP
.3849ef	48		pha		                PHA             ; begin setdbr macro
.3849f0	08		php		                PHP
.3849f1	e2 20		sep #$20	                SEP #$20        ; set A short
.3849f3	a9 37		lda #$37	                LDA #`DOS_HIGH_VARIABLES
.3849f5	48		pha		                PHA
.3849f6	ab		plb		                PLB
.3849f7	28		plp		                PLP
.3849f8	68		pla		                PLA             ; end setdbr macro
.3849f9	48		pha		                PHA             ; begin setdp macro
.3849fa	08		php		                PHP
.3849fb	c2 20		rep #$20	                REP #$20        ; set A long
.3849fd	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.384a00	5b		tcd		                TCD
.384a01	28		plp		                PLP
.384a02	68		pla		                PLA             ; end setdp macro
.384a03	c2 30		rep #$30	                REP #$30        ; set A&X long
.384a05	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE := DOS_END_PTR - DOS_SRC_PTR
.384a08	38		sec		                SEC
.384a09	a5 38		lda $0358	                LDA DOS_END_PTR
.384a0b	e5 30		sbc $0350	                SBC DOS_SRC_PTR
.384a0d	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.384a0f	c8		iny		                INY
.384a10	c8		iny		                INY
.384a11	a5 3a		lda $035a	                LDA DOS_END_PTR+2
.384a13	e5 32		sbc $0352	                SBC DOS_SRC_PTR+2
.384a15	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.384a17	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE++
.384a1a	18		clc		                CLC
.384a1b	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.384a1d	69 01 00	adc #$0001	                ADC #1
.384a20	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.384a22	90 09		bcc $384a2d	                BCC first_block
.384a24	c8		iny		                INY
.384a25	c8		iny		                INY
.384a26	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.384a28	69 00 00	adc #$0000	                ADC #0
.384a2b	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.384a2d	22 5e 49 38	jsl $38495e	first_block     JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.384a31	22 99 49 38	jsl $384999	                JSL IF_COPY2BUFF        ; Copy first (at most) 512 bytes of data to FD buffer
.384a35	22 3c 45 38	jsl $38453c	                JSL IF_CREATE           ; Create file.
.384a39	b0 03		bcs $384a3e	                BCS check_for_end
.384a3b	82 31 00	brl $384a6f	                BRL IF_PASSFAILURE      ; If we couldn't create the file, pass the failure up
.384a3e	a5 30		lda $0350	check_for_end   LDA DOS_SRC_PTR         ; Check if we copied the last byte
.384a40	c5 38		cmp $0358	                CMP DOS_END_PTR
.384a42	d0 06		bne $384a4a	                BNE next_block
.384a44	a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.384a46	c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.384a48	f0 1d		beq $384a67	                BEQ done                ; Yes: we're done
.384a4a	22 5e 49 38	jsl $38495e	next_block      JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.384a4e	22 99 49 38	jsl $384999	                JSL IF_COPY2BUFF        ; Copy next (at most) 512 bytes of data to FD buffer
.384a52	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER   ; Make sure the CLUSTER is 0 to force an append
.384a55	a9 00 00	lda #$0000	                LDA #0
.384a58	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.384a5a	c8		iny		                INY
.384a5b	c8		iny		                INY
.384a5c	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.384a5e	22 25 46 38	jsl $384625	                JSL IF_WRITE            ; Append to the file
.384a62	b0 da		bcs $384a3e	                BCS check_for_end       ; And try again
.384a64	82 08 00	brl $384a6f	                BRL IF_PASSFAILURE      ; If we couldn't update the file, pass the failure up
.384a67	5c 76 4a 38	jmp $384a76	done            JML IF_SUCCESS
.384a6b					IF_FAILURE
.384a6b	e2 20		sep #$20	                SEP #$20        ; set A short
.384a6d	85 0e		sta $032e	                STA DOS_STATUS
.384a6f	28		plp		IF_PASSFAILURE  PLP
.384a70	18		clc		                CLC
.384a71	ab		plb		                PLB
.384a72	2b		pld		                PLD
.384a73	7a		ply		                PLY
.384a74	fa		plx		                PLX
.384a75	6b		rtl		                RTL
.384a76					IF_SUCCESS
.384a76	e2 20		sep #$20	                SEP #$20        ; set A short
.384a78	64 00		stz $0320	                STZ BIOS_STATUS
.384a7a	64 0e		stz $032e	                STZ DOS_STATUS
.384a7c	28		plp		                PLP
.384a7d	38		sec		                SEC
.384a7e	ab		plb		                PLB
.384a7f	2b		pld		                PLD
.384a80	7a		ply		                PLY
.384a81	fa		plx		                PLX
.384a82	6b		rtl		                RTL
.384a83					IPRDIRENTRY
.384a83	8b		phb		                PHB
.384a84	0b		phd		                PHD
.384a85	08		php		                PHP
.384a86	48		pha		                PHA             ; begin setdbr macro
.384a87	08		php		                PHP
.384a88	e2 20		sep #$20	                SEP #$20        ; set A short
.384a8a	a9 37		lda #$37	                LDA #`DOS_HIGH_VARIABLES
.384a8c	48		pha		                PHA
.384a8d	ab		plb		                PLB
.384a8e	28		plp		                PLP
.384a8f	68		pla		                PLA             ; end setdbr macro
.384a90	48		pha		                PHA             ; begin setdp macro
.384a91	08		php		                PHP
.384a92	c2 20		rep #$20	                REP #$20        ; set A long
.384a94	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.384a97	5b		tcd		                TCD
.384a98	28		plp		                PLP
.384a99	68		pla		                PLA             ; end setdp macro
.384a9a	c2 10		rep #$10	                REP #$10        ; set X long
.384a9c	e2 20		sep #$20	                SEP #$20        ; set A short
.384a9e	a0 0b 00	ldy #$000b	                LDY #DIRENTRY.ATTRIBUTE         ; Check the file's attributes
.384aa1	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.384aa3	89 02		bit #$02	                BIT #DOS_ATTR_HIDDEN            ; Is it hidden?
.384aa5	d0 25		bne $384acc	                BNE ret_success                 ; Yes: skip this entry
.384aa7	29 0f		and #$0f	                AND #DOS_ATTR_LONGNAME          ; Is it a long name component?
.384aa9	c9 0f		cmp #$0f	                CMP #DOS_ATTR_LONGNAME
.384aab	f0 1f		beq $384acc	                BEQ ret_success                 ; Yes: skip this entry
.384aad	a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME         ; Check the first byte of the name
.384ab0	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y             ; If it's NULL, we're done with the whole list
.384ab2	f0 1d		beq $384ad1	                BEQ ret_failure
.384ab4	c9 e5		cmp #$e5	                CMP #DOS_DIR_ENT_UNUSED         ; If it's the unused marker
.384ab6	f0 14		beq $384acc	                BEQ ret_success                 ; Skip this entry
.384ab8					loop
.384ab8	e2 20		sep #$20	                SEP #$20        ; set A short
.384aba	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.384abc	22 4e 06 39	jsl $39064e	                JSL IPUTC
.384ac0	c8		iny		                INY
.384ac1	c0 0b 00	cpy #$000b	                CPY #DIRENTRY.SHORTNAME+11
.384ac4	d0 f2		bne $384ab8	                BNE loop
.384ac6	a9 0d		lda #$0d	                LDA #13
.384ac8	22 4e 06 39	jsl $39064e	                JSL IPUTC
.384acc	28		plp		ret_success     PLP
.384acd	38		sec		                SEC
.384ace	2b		pld		                PLD
.384acf	ab		plb		                PLB
.384ad0	6b		rtl		                RTL
.384ad1	28		plp		ret_failure     PLP
.384ad2	18		clc		                CLC
.384ad3	2b		pld		                PLD
.384ad4	ab		plb		                PLB
.384ad5	6b		rtl		                RTL
.384ad6					IPRDIRECTORY
.384ad6	8b		phb		                PHB
.384ad7	0b		phd		                PHD
.384ad8	08		php		                PHP
.384ad9	48		pha		                PHA             ; begin setdbr macro
.384ada	08		php		                PHP
.384adb	e2 20		sep #$20	                SEP #$20        ; set A short
.384add	a9 37		lda #$37	                LDA #`DOS_HIGH_VARIABLES
.384adf	48		pha		                PHA
.384ae0	ab		plb		                PLB
.384ae1	28		plp		                PLP
.384ae2	68		pla		                PLA             ; end setdbr macro
.384ae3	48		pha		                PHA             ; begin setdp macro
.384ae4	08		php		                PHP
.384ae5	c2 20		rep #$20	                REP #$20        ; set A long
.384ae7	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.384aea	5b		tcd		                TCD
.384aeb	28		plp		                PLP
.384aec	68		pla		                PLA             ; end setdp macro
.384aed	c2 30		rep #$30	                REP #$30        ; set A&X long
.384aef	22 a4 46 38	jsl $3846a4	                JSL IF_DIROPEN
.384af3	90 10		bcc $384b05	                BCC not_open
.384af5	22 83 4a 38	jsl $384a83	loop            JSL IPRDIRENTRY
.384af9	90 06		bcc $384b01	                BCC done
.384afb	22 f8 46 38	jsl $3846f8	                JSL IF_DIRNEXT
.384aff	b0 f4		bcs $384af5	                BCS loop
.384b01	28		plp		done            PLP
.384b02	2b		pld		                PLD
.384b03	ab		plb		                PLB
.384b04	6b		rtl		                RTL
.384b05	8b		phb		not_open        PHB
.384b06	a2 18 4b	ldx #$4b18	                LDX #<>ERR_NOT_OPEN
.384b09	e2 20		sep #$20	                SEP #$20        ; set A short
.384b0b	a9 38		lda #$38	                LDA #`ERR_NOT_OPEN
.384b0d	48		pha		                PHA
.384b0e	ab		plb		                PLB
.384b0f	22 37 06 39	jsl $390637	                JSL IPUTS
.384b13	ab		plb		                PLB
.384b14	28		plp		                PLP
.384b15	2b		pld		                PLD
.384b16	ab		plb		                PLB
.384b17	00		brk #		                BRK
>384b18	0d 43 6f 75 6c 64 20 6e		err_not_open    .null 13,"Could not open the directory.",13
>384b20	6f 74 20 6f 70 65 6e 20 74 68 65 20 64 69 72 65
>384b30	63 74 6f 72 79 2e 0d 00
.384b38					TESTLOAD
.384b38	8b		phb		                PHB
.384b39	0b		phd		                PHD
.384b3a	08		php		                PHP
.384b3b	48		pha		                PHA             ; begin setdbr macro
.384b3c	08		php		                PHP
.384b3d	e2 20		sep #$20	                SEP #$20        ; set A short
.384b3f	a9 37		lda #$37	                LDA #`DOS_HIGH_VARIABLES
.384b41	48		pha		                PHA
.384b42	ab		plb		                PLB
.384b43	28		plp		                PLP
.384b44	68		pla		                PLA             ; end setdbr macro
.384b45	48		pha		                PHA             ; begin setdp macro
.384b46	08		php		                PHP
.384b47	c2 20		rep #$20	                REP #$20        ; set A long
.384b49	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.384b4c	5b		tcd		                TCD
.384b4d	28		plp		                PLP
.384b4e	68		pla		                PLA             ; end setdp macro
.384b4f	c2 30		rep #$30	                REP #$30        ; set A&X long
.384b51	a9 00 00	lda #$0000	                LDA #0                  ; Set destination address to $02:0000
.384b54	85 34		sta $0354	                STA DOS_DST_PTR
.384b56	a9 02 00	lda #$0002	                LDA #$0002
.384b59	85 36		sta $0356	                STA DOS_DST_PTR+2
.384b5b	a9 aa 4b	lda #$4baa	                LDA #<>load_fd          ; Set pointer to the file descriptor
.384b5e	85 20		sta $0340	                STA DOS_FD_PTR
.384b60	a9 38 00	lda #$0038	                LDA #`load_fd
.384b63	85 22		sta $0342	                STA DOS_FD_PTR+2
.384b65	a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH      ; Set the path in the descriptor
.384b68	a9 c8 4b	lda #$4bc8	                LDA #<>load_path
.384b6b	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.384b6d	c8		iny		                INY
.384b6e	c8		iny		                INY
.384b6f	a9 38 00	lda #$0038	                LDA #`load_path
.384b72	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.384b74	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER    ; Set the buffer in the descriptor
.384b77	a9 ed 4b	lda #$4bed	                LDA #<>TESTBUFF
.384b7a	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.384b7c	c8		iny		                INY
.384b7d	c8		iny		                INY
.384b7e	a9 38 00	lda #$0038	                LDA #`TESTBUFF
.384b81	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.384b83	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS    ; Set the status to 0
.384b86	e2 20		sep #$20	                SEP #$20        ; set A short
.384b88	a9 00		lda #$00	                LDA #0
.384b8a	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.384b8c	c2 20		rep #$20	                REP #$20        ; set A long
.384b8e	22 00 48 38	jsl $384800	                JSL IF_LOAD             ; Attempt to load the file
.384b92	90 04		bcc $384b98	                BCC not_loaded
.384b94	28		plp		                PLP
.384b95	2b		pld		                PLD
.384b96	ab		plb		                PLB
.384b97	6b		rtl		                RTL
.384b98	8b		phb		not_loaded      PHB
.384b99	a2 d3 4b	ldx #$4bd3	                LDX #<>err_loaded
.384b9c	e2 20		sep #$20	                SEP #$20        ; set A short
.384b9e	a9 38		lda #$38	                LDA #`err_loaded
.384ba0	48		pha		                PHA
.384ba1	ab		plb		                PLB
.384ba2	22 37 06 39	jsl $390637	                JSL IPUTS
.384ba6	28		plp		                PLP
.384ba7	2b		pld		                PLD
.384ba8	ab		plb		                PLB
.384ba9	6b		rtl		                RTL
.384baa					load_fd
>384baa					STATUS              .byte ?             ; The status flags of the file descriptor (open, closed, error, EOF, etc.)
>384bab					DEV                 .byte ?             ; The ID of the device holding the file
>384bac					PATH                .dword ?            ; Pointer to a NULL terminated path string
>384bb0					CLUSTER             .dword ?            ; The current cluster of the file.
>384bb4					FIRST_CLUSTER       .dword ?            ; The ID of the first cluster in the file
>384bb8					BUFFER              .dword ?            ; Pointer to a cluster-sized buffer
>384bbc					SIZE                .dword ?            ; The size of the file
>384bc0					CREATE_DATE         .word ?             ; The creation date of the file
>384bc2					CREATE_TIME         .word ?             ; The creation time of the file
>384bc4					MODIFIED_DATE       .word ?             ; The modification date of the file
>384bc6					MODIFIED_TIME       .word ?             ; The modification time of the file
>384bc8	53 41 4d 50 4c 45 2e 50		load_path       .null "SAMPLE.PGX"
>384bd0	47 58 00
>384bd3	43 6f 75 6c 64 20 6e 6f		err_loaded      .null "Could not load the file.",13
>384bdb	74 20 6c 6f 61 64 20 74 68 65 20 66 69 6c 65 2e
>384beb	0d 00
>384bed					TESTBUFF        .fill 512

;******  Return to file: src\kernel.asm


;******  Processing file: src\keyboard.asm

.384ded					KEYBOARD_INTERRUPT
.384ded	48		pha		                PHA             ; begin setdp macro
.384dee	08		php		                PHP
.384def	c2 20		rep #$20	                REP #$20        ; set A long
.384df1	a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.384df4	5b		tcd		                TCD
.384df5	28		plp		                PLP
.384df6	68		pla		                PLA             ; end setdp macro
.384df7	a2 00 00	ldx #$0000	                ldx #$0000
.384dfa	e2 10		sep #$10	                SEP #$10        ; set X short
.384dfc	e2 20		sep #$20	                SEP #$20        ; set A short
.384dfe	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.384e02	29 01		and #$01	                AND #FNX1_INT00_KBD
.384e04	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.384e08					IRQ_HANDLER_FETCH
.384e08	af 60 10 af	lda $af1060	                LDA @lKBD_INPT_BUF      ; Get Scan Code from KeyBoard
.384e0c	85 88		sta $0f88	                STA KEYBOARD_SC_TMP     ; Save Code Immediately
.384e0e	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the Prefix was picked up before
.384e10	29 80		and #$80	                AND #$80
.384e12	c9 80		cmp #$80	                CMP #$80
.384e14	d0 10		bne $384e26	                BNE CHK_LSHIFT          ; No: do normal scan-code checks
.384e16	a5 87		lda $0f87	PREFIX_ON       LDA KEYBOARD_SC_FLG     ; Otherwise: clear prefix
.384e18	29 7f		and #$7f	                AND #$7F
.384e1a	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.384e1c	a5 88		lda $0f88	                LDA KEYBOARD_SC_TMP     ; Get the prefixed scan-code's character
.384e1e	aa		tax		                TAX
.384e1f	bf 80 1a 39	lda $391a80,x	                LDA @lScanCode_Prefix_Set1, x
.384e23	4c c9 4e	jmp $384ec9	                JMP KB_WR_2_SCREEN      ; And save it
.384e26	a5 88		lda $0f88	CHK_LSHIFT      LDA KEYBOARD_SC_TMP
.384e28	c9 2a		cmp #$2a	                CMP #$2A                ; Left Shift Pressed
.384e2a	d0 03		bne $384e2f	                BNE NOT_KB_SET_LSHIFT
.384e2c	82 ad 00	brl $384edc	                BRL KB_SET_SHIFT
.384e2f					NOT_KB_SET_LSHIFT
.384e2f	c9 aa		cmp #$aa	                CMP #$AA                ; Left Shift Unpressed
.384e31	d0 03		bne $384e36	                BNE NOT_KB_CLR_LSHIFT
.384e33	82 af 00	brl $384ee5	                BRL KB_CLR_SHIFT
.384e36					NOT_KB_CLR_LSHIFT
.384e36	c9 36		cmp #$36	                CMP #$36                ; Right Shift Pressed
.384e38	d0 03		bne $384e3d	                BNE NOT_KB_SET_RSHIFT
.384e3a	82 9f 00	brl $384edc	                BRL KB_SET_SHIFT
.384e3d					NOT_KB_SET_RSHIFT
.384e3d	c9 b6		cmp #$b6	                CMP #$B6                ; Right Shift Unpressed
.384e3f	d0 03		bne $384e44	                BNE NOT_KB_CLR_RSHIFT
.384e41	82 a1 00	brl $384ee5	                BRL KB_CLR_SHIFT
.384e44					NOT_KB_CLR_RSHIFT
.384e44	c9 1d		cmp #$1d	                CMP #$1D                ; Left CTRL pressed
.384e46	d0 03		bne $384e4b	                BNE NOT_KB_SET_CTRL
.384e48	82 a3 00	brl $384eee	                BRL KB_SET_CTRL
.384e4b					NOT_KB_SET_CTRL
.384e4b	c9 9d		cmp #$9d	                CMP #$9D                ; Left CTRL Unpressed
.384e4d	d0 03		bne $384e52	                BNE NOT_KB_CLR_CTRL
.384e4f	82 a5 00	brl $384ef7	                BRL KB_CLR_CTRL
.384e52					NOT_KB_CLR_CTRL
.384e52	c9 38		cmp #$38	                CMP #$38                ; Left ALT Pressed
.384e54	d0 03		bne $384e59	                BNE NOT_KB_SET_ALT
.384e56	82 a7 00	brl $384f00	                BRL KB_SET_ALT
.384e59					NOT_KB_SET_ALT
.384e59	c9 b8		cmp #$b8	                CMP #$B8                ; Left ALT Unpressed
.384e5b	d0 03		bne $384e60	                BNE NOT_KB_CLR_ALT
.384e5d	82 a9 00	brl $384f09	                BRL KB_CLR_ALT
.384e60	c9 e0		cmp #$e0	NOT_KB_CLR_ALT  CMP #$E0                ; Prefixed scan code
.384e62	d0 03		bne $384e67	                BNE NOT_PREFIXED
.384e64	82 ab 00	brl $384f12	                BRL KB_SET_PREFIX
.384e67	c9 45		cmp #$45	NOT_PREFIXED    CMP #$45                ; Numlock Pressed
.384e69	d0 03		bne $384e6e	                BNE NOT_KB_SET_NUM
.384e6b	82 b6 00	brl $384f24	                BRL KB_TOG_NUMLOCK
.384e6e	c9 46		cmp #$46	NOT_KB_SET_NUM  CMP #$46                ; Scroll Lock Pressed
.384e70	d0 03		bne $384e75	                BNE NOT_KB_SET_SCR
.384e72	82 a6 00	brl $384f1b	                BRL KB_TOG_SCRLOCK
.384e75	c9 3a		cmp #$3a	NOT_KB_SET_SCR  CMP #$3A                ; Caps Lock Pressed
.384e77	d0 03		bne $384e7c	                BNE NOT_KB_CAPSLOCK
.384e79	82 b1 00	brl $384f2d	                BRL KB_TOG_CAPLOCK
.384e7c	c9 58		cmp #$58	NOT_KB_CAPSLOCK CMP #$58                ; F12 Pressed
.384e7e	d0 09		bne $384e89	                BNE KB_UNPRESSED
.384e80	a9 60		lda #$60	                LDA #KB_CREDITS         ; Yes: flag that the CREDITS key has been pressed
.384e82	8f 8a 0f 00	sta $000f8a	                STA @lKEYFLAG
.384e86	82 aa 00	brl $384f33	                BRL KB_CHECK_B_DONE
.384e89	29 80		and #$80	KB_UNPRESSED    AND #$80                ; See if the Scan Code is press or Depressed
.384e8b	c9 80		cmp #$80	                CMP #$80                ; Depress Status - We will not do anything at this point
.384e8d	d0 03		bne $384e92	                BNE KB_NORM_SC
.384e8f	82 a1 00	brl $384f33	                BRL KB_CHECK_B_DONE
.384e92	a5 88		lda $0f88	KB_NORM_SC      LDA KEYBOARD_SC_TMP       ;
.384e94	aa		tax		                TAX
.384e95	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the SHIFT Key is being Pushed
.384e97	29 10		and #$10	                AND #$10
.384e99	c9 10		cmp #$10	                CMP #$10
.384e9b	f0 17		beq $384eb4	                BEQ SHIFT_KEY_ON
.384e9d	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the CTRL Key is being Pushed
.384e9f	29 20		and #$20	                AND #$20
.384ea1	c9 20		cmp #$20	                CMP #$20
.384ea3	f0 16		beq $384ebb	                BEQ CTRL_KEY_ON
.384ea5	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the ALT Key is being Pushed
.384ea7	29 40		and #$40	                AND #$40
.384ea9	c9 40		cmp #$40	                CMP #$40
.384eab	f0 15		beq $384ec2	                BEQ ALT_KEY_ON
.384ead	bf 00 18 39	lda $391800,x	                LDA @lScanCode_Press_Set1, x
.384eb1	82 15 00	brl $384ec9	                BRL KB_WR_2_SCREEN
.384eb4	bf 80 18 39	lda $391880,x	SHIFT_KEY_ON    LDA @lScanCode_Shift_Set1, x
.384eb8	82 0e 00	brl $384ec9	                BRL KB_WR_2_SCREEN
.384ebb	bf 00 19 39	lda $391900,x	CTRL_KEY_ON     LDA @lScanCode_Ctrl_Set1, x
.384ebf	82 07 00	brl $384ec9	                BRL KB_WR_2_SCREEN
.384ec2	bf 80 19 39	lda $391980,x	ALT_KEY_ON      LDA @lScanCode_Alt_Set1, x
.384ec6	82 00 00	brl $384ec9	                BRL KB_WR_2_SCREEN
.384ec9	c9 18		cmp #$18	KB_WR_2_SCREEN  CMP #$18                ; Is it SysRq?
.384ecb	d0 03		bne $384ed0	                BNE savechar
.384ecd	4c 43 4f	jmp $384f43	                JMP programmerKey       ; Yes: trigger the programmer key
.384ed0	48		pha		savechar        PHA
.384ed1	c2 10		rep #$10	                REP #$10        ; set X long
.384ed3	20 4f 4f	jsr $384f4f	                JSR SAVEKEY
.384ed6	e2 20		sep #$20	                SEP #$20        ; set A short
.384ed8	68		pla		                PLA
.384ed9	4c 33 4f	jmp $384f33	                JMP KB_CHECK_B_DONE
.384edc	a5 87		lda $0f87	KB_SET_SHIFT    LDA KEYBOARD_SC_FLG
.384ede	09 10		ora #$10	                ORA #$10
.384ee0	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.384ee2	4c 33 4f	jmp $384f33	                JMP KB_CHECK_B_DONE
.384ee5	a5 87		lda $0f87	KB_CLR_SHIFT    LDA KEYBOARD_SC_FLG
.384ee7	29 ef		and #$ef	                AND #$EF
.384ee9	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.384eeb	4c 33 4f	jmp $384f33	                JMP KB_CHECK_B_DONE
.384eee	a5 87		lda $0f87	KB_SET_CTRL     LDA KEYBOARD_SC_FLG
.384ef0	09 20		ora #$20	                ORA #$20
.384ef2	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.384ef4	4c 33 4f	jmp $384f33	                JMP KB_CHECK_B_DONE
.384ef7	a5 87		lda $0f87	KB_CLR_CTRL     LDA KEYBOARD_SC_FLG
.384ef9	29 df		and #$df	                AND #$DF
.384efb	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.384efd	4c 33 4f	jmp $384f33	                JMP KB_CHECK_B_DONE
.384f00	a5 87		lda $0f87	KB_SET_ALT      LDA KEYBOARD_SC_FLG
.384f02	09 40		ora #$40	                ORA #$40
.384f04	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.384f06	4c 33 4f	jmp $384f33	                JMP KB_CHECK_B_DONE
.384f09	a5 87		lda $0f87	KB_CLR_ALT      LDA KEYBOARD_SC_FLG
.384f0b	29 bf		and #$bf	                AND #$BF
.384f0d	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.384f0f	4c 33 4f	jmp $384f33	                JMP KB_CHECK_B_DONE
.384f12	a5 87		lda $0f87	KB_SET_PREFIX   LDA KEYBOARD_SC_FLG
.384f14	09 80		ora #$80	                ORA #$80
.384f16	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.384f18	4c 33 4f	jmp $384f33	                JMP KB_CHECK_B_DONE
.384f1b	a5 89		lda $0f89	KB_TOG_SCRLOCK  LDA KEYBOARD_LOCKS
.384f1d	49 01		eor #$01	                EOR #KB_SCROLL_LOCK         ; toggle the Scroll Lock flag
.384f1f	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.384f21	4c 33 4f	jmp $384f33	                JMP KB_CHECK_B_DONE
.384f24	a5 89		lda $0f89	KB_TOG_NUMLOCK  LDA KEYBOARD_LOCKS
.384f26	49 02		eor #$02	                EOR #KB_NUM_LOCK            ; toggle the Num Lock flag
.384f28	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.384f2a	4c 33 4f	jmp $384f33	                JMP KB_CHECK_B_DONE
.384f2d	a5 89		lda $0f89	KB_TOG_CAPLOCK  LDA KEYBOARD_LOCKS
.384f2f	49 04		eor #$04	                EOR #KB_CAPS_LOCK           ; toggle the Caps Lock flag
.384f31	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.384f33					KB_CHECK_B_DONE
.384f33	af 64 10 af	lda $af1064	                LDA STATUS_PORT
.384f37	29 01		and #$01	                AND #OUT_BUF_FULL           ; Test bit $01 (if 1, Full)
.384f39	c9 01		cmp #$01	                CMP #OUT_BUF_FULL           ; if Still Byte in the Buffer, fetch it out
.384f3b	d0 03		bne $384f40	                BNE SET_LED
.384f3d	4c 08 4e	jmp $384e08	                JMP IRQ_HANDLER_FETCH
.384f40					SET_LED
.384f40					KB_DONE
.384f40	c2 30		rep #$30	                REP #$30        ; set A&X long
.384f42	60		rts		                RTS
.384f43					programmerKey
.384f43	c2 30		rep #$30	                REP #$30        ; set A&X long
.384f45	68		pla		                PLA                     ; Get and throw-away the return address to the interrupt handler
.384f46	2b		pld		                PLD                     ; Restore the registers that were present when the handler was invoked
.384f47	ab		plb		                PLB
.384f48	7a		ply		                PLY
.384f49	fa		plx		                PLX
.384f4a	68		pla		                PLA
.384f4b	5c 08 10 38	jmp $381008	                JML BREAK               ; And go to the BRK handler directly to open the monitor
.384f4f					SAVEKEY
.384f4f	e2 20		sep #$20	                SEP #$20        ; set A short
.384f51	48		pha		                PHA                     ; Save the character
.384f52	a5 89		lda $0f89	                LDA KEYBOARD_LOCKS      ; Check the keyboard lock flags
.384f54	29 04		and #$04	                AND #KB_CAPS_LOCK       ; Is CAPS lock on?
.384f56	f0 0d		beq $384f65	                BEQ no_caps             ; No... just use the character as-is
.384f58	68		pla		                PLA                     ; Get the character back
.384f59	c9 61		cmp #$61	                CMP #'a'                ; Is it < 'a'
.384f5b	90 09		bcc $384f66	                BLT check_break         ; Yes: just use as-is
.384f5d	c9 7b		cmp #$7b	                CMP #'z'+1              ; Is it > 'z'
.384f5f	b0 05		bcs $384f66	                BGE check_break         ; Yes: just us as-is
.384f61	29 df		and #$df	                AND #%11011111          ; Conver to upper case
.384f63	80 01		bra $384f66	                BRA check_break
.384f65	68		pla		no_caps         PLA                     ; Restore the character
.384f66	c9 00		cmp #$00	check_break     CMP #0
.384f68	f0 18		beq $384f82	                BEQ done
.384f6a	c9 03		cmp #$03	                CMP #CHAR_CTRL_C        ; Is it CTRL-C?
.384f6c	f0 15		beq $384f83	                BEQ flag_break          ; Yes: flag a break
.384f6e	a6 8d		ldx $0f8d	no_break        LDX KEY_BUFFER_WPOS     ; So the Receive Character is saved in the Buffer
.384f70	e0 80 00	cpx #$0080	                CPX #KEY_BUFFER_SIZE    ; Make sure we haven't been overboard.
.384f73	b0 0d		bcs $384f82	                BCS done                ; Stop storing - An error should ensue here...
.384f75	9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER,X
.384f79	e8		inx		                INX
.384f7a	86 8d		stx $0f8d	                STX KEY_BUFFER_WPOS
.384f7c	a9 00		lda #$00	                LDA #$00
.384f7e	9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER, X       ; Store a EOL in the following location for good measure
.384f82	60		rts		done            RTS
.384f83					flag_break
.384f83	e2 20		sep #$20	                SEP #$20        ; set A short
.384f85	a9 80		lda #$80	                LDA #KB_CTRL_C          ; Flag that an interrupt key has been pressed
.384f87	85 8a		sta $0f8a	                STA KEYFLAG             ; The interpreter should see this soon and throw a BREAK
.384f89	60		rts		                RTS
.384f8a					KBD_GETC
.384f8a	da		phx		                PHX
.384f8b	0b		phd		                PHD
.384f8c	08		php		                PHP
.384f8d	48		pha		                PHA             ; begin setdp macro
.384f8e	08		php		                PHP
.384f8f	c2 20		rep #$20	                REP #$20        ; set A long
.384f91	a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.384f94	5b		tcd		                TCD
.384f95	28		plp		                PLP
.384f96	68		pla		                PLA             ; end setdp macro
.384f97	e2 20		sep #$20	                SEP #$20        ; set A short
.384f99	c2 10		rep #$10	                REP #$10        ; set X long
.384f9b	58		cli		                CLI                     ; Make sure interrupts can happen
.384f9c	af 8a 0f 00	lda $000f8a	get_wait        LDA @lKEYFLAG           ; Check the keyboard control flag
.384fa0	29 60		and #$60	                AND #KB_CREDITS         ; Are the credits flagged?
.384fa2	c9 60		cmp #$60	                CMP #KB_CREDITS
.384fa4	d0 0a		bne $384fb0	                BNE check_buffer        ; No: check the key buffer
.384fa6	a9 00		lda #$00	                LDA #0                  ; Yes: clear the flags
.384fa8	8f 8a 0f 00	sta $000f8a	                STA @lKEYFLAG
.384fac	22 f9 12 39	jsl $3912f9	                JSL SHOW_CREDITS        ; Then show the credits screen and wait for a key press
.384fb0	a6 8b		ldx $0f8b	check_buffer    LDX KEY_BUFFER_RPOS     ; Is KEY_BUFFER_RPOS < KEY_BUFFER_WPOS
.384fb2	e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS
.384fb4	90 02		bcc $384fb8	                BCC read_buff           ; Yes: a key is present, read it
.384fb6	80 e4		bra $384f9c	                BRA get_wait            ; Otherwise, keep waiting
.384fb8	78		sei		read_buff       SEI                     ; Don't interrupt me!
.384fb9	b5 00		lda $0f00,x	                LDA KEY_BUFFER,X        ; Get the key
.384fbb	e8		inx		                INX                     ; And move to the next key
.384fbc	e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS     ; Did we just read the last key?
.384fbe	f0 07		beq $384fc7	                BEQ reset_indexes       ; Yes: return to 0 position
.384fc0	86 8b		stx $0f8b	                STX KEY_BUFFER_RPOS     ; Otherwise: Update the read index
.384fc2	58		cli		                CLI
.384fc3	28		plp		done            PLP                     ; Restore status and interrupts
.384fc4	2b		pld		                PLD
.384fc5	fa		plx		                PLX
.384fc6	6b		rtl		                RTL
.384fc7	64 8b		stz $0f8b	reset_indexes   STZ KEY_BUFFER_RPOS     ; Reset read index to the beginning
.384fc9	64 8d		stz $0f8d	                STZ KEY_BUFFER_WPOS     ; Reset the write index to the beginning
.384fcb	80 f6		bra $384fc3	                BRA done

;******  Return to file: src\kernel.asm


;******  Processing file: src\uart.asm

=$af13f8				UART1_BASE = $AF13F8        ; Base address for UART 1 (COM1)
=$af12f8				UART2_BASE = $AF12F8        ; Base address for UART 2 (COM2)
=$00					UART_TRHB = $00             ; Transmit/Receive Hold Buffer
=$00					UART_DLL = UART_TRHB        ; Divisor Latch Low Byte
=$01					UART_DLH = $01              ; Divisor Latch High Byte
=$01					UART_IER = UART_DLH         ; Interupt Enable Register
=$02					UART_FCR = $02              ; FIFO Control Register
=$02					UART_IIR = UART_FCR         ; Interupt Indentification Register
=$03					UART_LCR = $03              ; Line Control Register
=$04					UART_MCR = $04              ; Modem Control REgister
=$05					UART_LSR = $05              ; Line Status Register
=$06					UART_MSR = $06              ; Modem Status Register
=$07					UART_SR = $07               ; Scratch Register
=$20					UINT_LOW_POWER = $20        ; Enable Low Power Mode (16750)
=$10					UINT_SLEEP_MODE = $10       ; Enable Sleep Mode (16750)
=$08					UINT_MODEM_STATUS = $08     ; Enable Modem Status Interrupt
=$04					UINT_LINE_STATUS = $04      ; Enable Receiver Line Status Interupt
=$02					UINT_THR_EMPTY = $02        ; Enable Transmit Holding Register Empty interrupt
=$01					UINT_DATA_AVAIL = $01       ; Enable Recieve Data Available interupt
=$80					IIR_FIFO_ENABLED = $80      ; FIFO is enabled
=$40					IIR_FIFO_NONFUNC = $40      ; FIFO is not functioning
=$20					IIR_FIFO_64BYTE = $20       ; 64 byte FIFO enabled (16750)
=$00					IIR_MODEM_STATUS = $00      ; Modem Status Interrupt
=$02					IIR_THR_EMPTY = $02         ; Transmit Holding Register Empty Interrupt
=$04					IIR_DATA_AVAIL = $04        ; Data Available Interrupt
=$06					IIR_LINE_STATUS = $06       ; Line Status Interrupt
=$0c					IIR_TIMEOUT = $0C           ; Time-out Interrupt (16550 and later)
=$01					IIR_INTERRUPT_PENDING = $01 ; Interrupt Pending Flag
=$80					LCR_DLB = $80               ; Divisor Latch Access Bit
=$60					LCR_SBE = $60               ; Set Break Enable
=$00					LCR_PARITY_NONE = $00       ; Parity: None
=$08					LCR_PARITY_ODD = $08        ; Parity: Odd
=$18					LCR_PARITY_EVEN = $18       ; Parity: Even
=$28					LCR_PARITY_MARK = $28       ; Parity: Mark
=$38					LCR_PARITY_SPACE = $38      ; Parity: Space
=$00					LCR_STOPBIT_1 = $00         ; One Stop Bit
=$04					LCR_STOPBIT_2 = $04         ; 1.5 or 2 Stop Bits
=$00					LCR_DATABITS_5 = $00        ; Data Bits: 5
=$01					LCR_DATABITS_6 = $01        ; Data Bits: 6
=$02					LCR_DATABITS_7 = $02        ; Data Bits: 7
=$03					LCR_DATABITS_8 = $03        ; Data Bits: 8
=$80					LSR_ERR_RECIEVE = $80       ; Error in Received FIFO
=$40					LSR_XMIT_DONE = $40         ; All data has been transmitted
=$20					LSR_XMIT_EMPTY = $20        ; Empty transmit holding register
=$10					LSR_BREAK_INT = $10         ; Break interrupt
=$08					LSR_ERR_FRAME = $08         ; Framing error
=$04					LSR_ERR_PARITY = $04        ; Parity error
=$02					LSR_ERR_OVERRUN = $02       ; Overrun error
=$01					LSR_DATA_AVAIL = $01        ; Data is ready in the receive buffer
=384					UART_300 = 384              ; Code for 300 bps
=96					UART_1200 = 96              ; Code for 1200 bps
=48					UART_2400 = 48              ; Code for 2400 bps
=24					UART_4800 = 24              ; Code for 4800 bps
=12					UART_9600 = 12              ; Code for 9600 bps
=6					UART_19200 = 6              ; Code for 19200 bps
=3					UART_38400 = 3              ; Code for 28400 bps
=2					UART_57600 = 2              ; Code for 57600 bps
=1					UART_115200 = 1             ; Code for 115200 bps
.384fcd					UART_SELECT
.384fcd	08		php		            PHP
.384fce	c2 20		rep #$20	                REP #$20        ; set A long
.384fd0	c9 02 00	cmp #$0002	            CMP #2
.384fd3	f0 07		beq $384fdc	            BEQ is_COM2
.384fd5	c2 20		rep #$20	                REP #$20        ; set A long
.384fd7	a9 f8 13	lda #$13f8	            LDA #<>UART1_BASE
.384fda	80 05		bra $384fe1	            BRA setaddr
.384fdc					is_COM2
.384fdc	c2 20		rep #$20	                REP #$20        ; set A long
.384fde	a9 f8 12	lda #$12f8	            LDA #<>UART2_BASE
.384fe1	8f 00 07 00	sta $000700	setaddr     STA @lCURRUART
.384fe5	e2 20		sep #$20	                SEP #$20        ; set A short
.384fe7	a9 af		lda #$af	            LDA #`UART1_BASE
.384fe9	8f 02 07 00	sta $000702	            STA @lCURRUART+2
.384fed	28		plp		            PLP
.384fee	6b		rtl		            RTL
.384fef					UART_SETBPS
.384fef	08		php		            PHP
.384ff0	0b		phd		            PHD
.384ff1	48		pha		                PHA             ; begin setdp macro
.384ff2	08		php		                PHP
.384ff3	c2 20		rep #$20	                REP #$20        ; set A long
.384ff5	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.384ff8	5b		tcd		                TCD
.384ff9	28		plp		                PLP
.384ffa	68		pla		                PLA             ; end setdp macro
.384ffb	c2 30		rep #$30	                REP #$30        ; set A&X long
.384ffd	48		pha		            PHA
.384ffe	e2 20		sep #$20	                SEP #$20        ; set A short
.385000	a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Enable divisor latch
.385003	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.385005	09 80		ora #$80	            ORA #LCR_DLB
.385007	97 00		sta [$0700],y	            STA [CURRUART],Y
.385009	c2 20		rep #$20	                REP #$20        ; set A long
.38500b	68		pla		            PLA
.38500c	a0 00 00	ldy #$0000	            LDY #UART_DLL
.38500f	97 00		sta [$0700],y	            STA [CURRUART],Y    ; Save the divisor to the UART
.385011	e2 20		sep #$20	                SEP #$20        ; set A short
.385013	a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Disable divisor latch
.385016	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.385018	49 80		eor #$80	            EOR #LCR_DLB
.38501a	97 00		sta [$0700],y	            STA [CURRUART],Y
.38501c	2b		pld		            PLD
.38501d	28		plp		            PLP
.38501e	6b		rtl		            RTL
.38501f					UART_SETLCR
.38501f	08		php		            PHP
.385020	0b		phd		            PHD
.385021	48		pha		                PHA             ; begin setdp macro
.385022	08		php		                PHP
.385023	c2 20		rep #$20	                REP #$20        ; set A long
.385025	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.385028	5b		tcd		                TCD
.385029	28		plp		                PLP
.38502a	68		pla		                PLA             ; end setdp macro
.38502b	e2 20		sep #$20	                SEP #$20        ; set A short
.38502d	c2 10		rep #$10	                REP #$10        ; set X long
.38502f	29 7f		and #$7f	            AND #$7F            ; We don't want to alter divisor latch
.385031	a0 03 00	ldy #$0003	            LDY #UART_LCR
.385034	97 00		sta [$0700],y	            STA [CURRUART],Y
.385036	2b		pld		            PLD
.385037	28		plp		            PLP
.385038	6b		rtl		            RTL
.385039					UART_INIT
.385039	08		php		            PHP
.38503a	0b		phd		            PHD
.38503b	c2 30		rep #$30	                REP #$30        ; set A&X long
.38503d	48		pha		                PHA             ; begin setdp macro
.38503e	08		php		                PHP
.38503f	c2 20		rep #$20	                REP #$20        ; set A long
.385041	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.385044	5b		tcd		                TCD
.385045	28		plp		                PLP
.385046	68		pla		                PLA             ; end setdp macro
.385047	a9 01 00	lda #$0001	            LDA #UART_115200
.38504a	22 ef 4f 38	jsl $384fef	            JSL UART_SETBPS
.38504e	e2 20		sep #$20	                SEP #$20        ; set A short
.385050	a9 03		lda #$03	            LDA #LCR_PARITY_NONE | LCR_STOPBIT_1 | LCR_DATABITS_8
.385052	22 1f 50 38	jsl $38501f	            JSL UART_SETLCR
.385056	a9 e1		lda #$e1	            LDA #%11100001
.385058	a0 02 00	ldy #$0002	            LDY #UART_FCR
.38505b	97 00		sta [$0700],y	            STA [CURRUART],Y
.38505d	2b		pld		            PLD
.38505e	28		plp		            PLP
.38505f	6b		rtl		            RTL
.385060					UART_HASBYT
.385060	08		php		            PHP
.385061	0b		phd		            PHD
.385062	c2 30		rep #$30	                REP #$30        ; set A&X long
.385064	48		pha		                PHA             ; begin setdp macro
.385065	08		php		                PHP
.385066	c2 20		rep #$20	                REP #$20        ; set A long
.385068	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.38506b	5b		tcd		                TCD
.38506c	28		plp		                PLP
.38506d	68		pla		                PLA             ; end setdp macro
.38506e	e2 20		sep #$20	                SEP #$20        ; set A short
.385070	a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.385073	b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.385075	29 01		and #$01	            AND #LSR_DATA_AVAIL
.385077	d0 04		bne $38507d	            BNE ret_true            ; If flag is set, return true
.385079	2b		pld		ret_false   PLD                     ; Return false
.38507a	28		plp		            PLP
.38507b	18		clc		            CLC
.38507c	6b		rtl		            RTL
.38507d	2b		pld		ret_true    PLD                     ; Return true
.38507e	28		plp		            PLP
.38507f	38		sec		            SEC
.385080	6b		rtl		            RTL
.385081					UART_GETC
.385081	08		php		            PHP
.385082	0b		phd		            PHD
.385083	c2 30		rep #$30	                REP #$30        ; set A&X long
.385085	48		pha		                PHA             ; begin setdp macro
.385086	08		php		                PHP
.385087	c2 20		rep #$20	                REP #$20        ; set A long
.385089	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.38508c	5b		tcd		                TCD
.38508d	28		plp		                PLP
.38508e	68		pla		                PLA             ; end setdp macro
.38508f	e2 20		sep #$20	                SEP #$20        ; set A short
.385091	a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.385094	b7 00		lda [$0700],y	wait_getc   LDA [CURRUART],Y
.385096	29 01		and #$01	            AND #LSR_DATA_AVAIL
.385098	f0 fa		beq $385094	            BEQ wait_getc           ; If the flag is clear, wait
.38509a	a0 00 00	ldy #$0000	            LDY #UART_TRHB          ; Get the byte from the receive FIFO
.38509d	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.38509f	2b		pld		            PLD
.3850a0	28		plp		            PLP
.3850a1	6b		rtl		            RTL
.3850a2					UART_PUTC
.3850a2	08		php		            PHP
.3850a3	0b		phd		            PHD
.3850a4	c2 30		rep #$30	                REP #$30        ; set A&X long
.3850a6	48		pha		                PHA             ; begin setdp macro
.3850a7	08		php		                PHP
.3850a8	c2 20		rep #$20	                REP #$20        ; set A long
.3850aa	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.3850ad	5b		tcd		                TCD
.3850ae	28		plp		                PLP
.3850af	68		pla		                PLA             ; end setdp macro
.3850b0	e2 20		sep #$20	                SEP #$20        ; set A short
.3850b2	48		pha		            PHA                     ; Wait for the transmit FIFO to free up
.3850b3	a0 05 00	ldy #$0005	            LDY #UART_LSR
.3850b6	b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.3850b8	29 20		and #$20	            AND #LSR_XMIT_EMPTY
.3850ba	f0 fa		beq $3850b6	            BEQ wait_putc
.3850bc	68		pla		            PLA
.3850bd	a0 00 00	ldy #$0000	            LDY #UART_TRHB
.3850c0	97 00		sta [$0700],y	            STA [CURRUART],Y
.3850c2	2b		pld		            PLD
.3850c3	28		plp		            PLP
.3850c4	6b		rtl		            RTL
.3850c5					UART_PUTS
.3850c5	08		php		            PHP
.3850c6	e2 20		sep #$20	                SEP #$20        ; set A short
.3850c8	bd 00 00	lda $0000,x	put_loop    LDA #0,B,X
.3850cb	f0 07		beq $3850d4	            BEQ done
.3850cd	22 a2 50 38	jsl $3850a2	            JSL UART_PUTC
.3850d1	e8		inx		            INX
.3850d2	80 f4		bra $3850c8	            BRA put_loop
.3850d4	28		plp		done        PLP
.3850d5	6b		rtl		            RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\joystick.asm

.3850d6					JOYSTICK_SET_NES_MODE
.3850d6	e2 20		sep #$20	                SEP #$20        ; set A short
.3850d8	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.3850dc	29 fb		and #$fb	          AND #~NES_SNES_JOY  ; 0 = NES (8 bit shift)
.3850de	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.3850e2	6b		rtl		          RTL
.3850e3					JOYSTICK_SET_SNES_MODE
.3850e3	e2 20		sep #$20	                SEP #$20        ; set A short
.3850e5	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.3850e9	29 fb		and #$fb	          AND #~NES_SNES_JOY
.3850eb	09 04		ora #$04	          ORA #NES_SNES_JOY   ; 1 = SNES (12 Bit Shift)
.3850ed	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.3850f1	6b		rtl		          RTL
.3850f2					JOYSTICK_ENABLE_NES_SNES_PORT0
.3850f2	e2 20		sep #$20	                SEP #$20        ; set A short
.3850f4	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.3850f8	29 fe		and #$fe	          AND #~NES_SNES_EN0
.3850fa	09 01		ora #$01	          ORA #NES_SNES_EN0
.3850fc	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.385100	6b		rtl		          RTL
.385101					JOYSTICK_ENABLE_NES_SNES_PORT1
.385101	e2 20		sep #$20	                SEP #$20        ; set A short
.385103	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.385107	29 fd		and #$fd	          AND #~NES_SNES_EN1
.385109	09 02		ora #$02	          ORA #NES_SNES_EN1
.38510b	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.38510f	6b		rtl		          RTL
.385110					JOYSTICK_DISABLE_NES_SNES_PORT0
.385110	e2 20		sep #$20	                SEP #$20        ; set A short
.385112	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.385116	29 fe		and #$fe	          AND #~NES_SNES_EN0
.385118	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.38511c	6b		rtl		          RTL
.38511d					JOYSTICK_DISABLE_NES_SNES_PORT1
.38511d	e2 20		sep #$20	                SEP #$20        ; set A short
.38511f	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.385123	29 fd		and #$fd	          AND #~NES_SNES_EN1
.385125	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.385129	6b		rtl		          RTL
.38512a					JOYSTICK_NES_SNES_TRIG_WITH_POLL
.38512a	e2 20		sep #$20	                SEP #$20        ; set A short
.38512c	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.385130	29 03		and #$03	          AND #(NES_SNES_EN0 | NES_SNES_EN1)
.385132	c9 00		cmp #$00	          CMP #$00
.385134	f0 14		beq $38514a	          BEQ END_OF_JOYSTICK_POLL
.385136	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.38513a	09 80		ora #$80	          ORA #NES_SNES_TRIG   ; Set to 1 (Will auto Clear)
.38513c	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.385140					JOYSTICK_POLLING_ISNOTOVER
.385140	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE ;
.385144	29 40		and #$40	          AND #NES_SNES_DONE
.385146	c9 40		cmp #$40	          CMP #NES_SNES_DONE
.385148	d0 f6		bne $385140	          BNE JOYSTICK_POLLING_ISNOTOVER
.38514a					END_OF_JOYSTICK_POLL
.38514a	6b		rtl		          RTL

;******  Return to file: src\kernel.asm

.390400					IBOOT
.390400	18		clc		                CLC           ; clear the carry flag
.390401	fb		xce		                XCE           ; move carry to emulation flag.
.390402	78		sei		                SEI
.390403	c2 30		rep #$30	                REP #$30        ; set A&X long
.390405	a9 ff fe	lda #$feff	                LDA #STACK_END   ; initialize stack pointer
.390408	1b		tcs		                TAS
.390409	48		pha		                PHA             ; begin setdp macro
.39040a	08		php		                PHP
.39040b	c2 20		rep #$20	                REP #$20        ; set A long
.39040d	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390410	5b		tcd		                TCD
.390411	28		plp		                PLP
.390412	68		pla		                PLA             ; end setdp macro
.390413	e2 20		sep #$20	                SEP #$20        ; set A short
.390415	a2 00 00	ldx #$0000	                LDX #$0000
.390418	a9 00		lda #$00	                LDA #$00
.39041a					CLEAR_MEM_LOOP
.39041a	95 00		sta $00,x	                STA $0000, X
.39041c	e8		inx		                INX
.39041d	e0 00 01	cpx #$0100	                CPX #$0100
.390420	d0 f8		bne $39041a	                BNE CLEAR_MEM_LOOP
.390422	ea		nop		                NOP
.390423	a9 ff		lda #$ff	                LDA #$FF
.390425	8f 48 01 00	sta $000148	                STA @lINT_EDGE_REG0
.390429	8f 49 01 00	sta $000149	                STA @lINT_EDGE_REG1
.39042d	8f 4a 01 00	sta $00014a	                STA @lINT_EDGE_REG2
.390431	8f 4b 01 00	sta $00014b	                STA @lINT_EDGE_REG3
.390435	8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.390439	8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.39043d	8f 4e 01 00	sta $00014e	                STA @lINT_MASK_REG2
.390441	8f 4f 01 00	sta $00014f	                STA @lINT_MASK_REG3
.390445	c2 30		rep #$30	                REP #$30        ; set A&X long
.390447	a9 00 a0	lda #$a000	                LDA #<>SCREEN_PAGE0      ; store the initial screen buffer location
.39044a	85 0c		sta $0c		                STA SCREENBEGIN
.39044c	85 17		sta $17		                STA CURSORPOS
.39044e	a9 00 c0	lda #$c000	                LDA #<>CS_COLOR_MEM_PTR   ; Set the initial COLOR cursor position
.390451	85 1f		sta $1f		                STA COLORPOS
.390453	e2 20		sep #$20	                SEP #$20        ; set A short
.390455	a9 af		lda #$af	                LDA #`SCREEN_PAGE0
.390457	85 0e		sta $0e		                STA SCREENBEGIN+2
.390459	85 19		sta $19		                STA CURSORPOS+2
.39045b	a9 af		lda #$af	                LDA #`CS_COLOR_MEM_PTR    ; Set the initial COLOR cursor position
.39045d	85 21		sta $21		                STA COLORPOS+2
.39045f	e2 20		sep #$20	                SEP #$20        ; set A short
.390461	a9 00		lda #$00	                LDA #$00
.390463	8d 87 0f	sta $0f87	                STA KEYBOARD_SC_FLG     ; Clear the Keyboard Flag
.390466	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.390468	8f 00 f1 af	sta $aff100	                STA $AFF100
.39046c	a9 bf		lda #$bf	                LDA #$BF ; Channel Two - No Atteniation
.39046e	8f 00 f1 af	sta $aff100	                STA $AFF100
.390472	a9 df		lda #$df	                LDA #$DF ; Channel Two - No Atteniation
.390474	8f 00 f1 af	sta $aff100	                STA $AFF100
.390478	a9 ff		lda #$ff	                LDA #$FF ; Channel Two - No Atteniation
.39047a	8f 00 f1 af	sta $aff100	                STA $AFF100
.39047e	c2 30		rep #$30	                REP #$30        ; set A&X long
.390480	a2 48 00	ldx #$0048	                LDX #72
.390483	86 0f		stx $0f		                STX COLS_VISIBLE
.390485	a0 34 00	ldy #$0034	                LDY #52
.390488	84 13		sty $13		                STY LINES_VISIBLE
.39048a	a2 80 00	ldx #$0080	                LDX #128
.39048d	86 11		stx $11		                STX COLS_PER_LINE
.39048f	a0 40 00	ldy #$0040	                LDY #64
.390492	84 15		sty $15		                STY LINES_MAX
.390494	a9 ed 00	lda #$00ed	                LDA #$ED                  ; Set the default text color to light gray on dark gray
.390497	85 1e		sta $1e		                STA CURCOLOR
.390499	22 dc 10 38	jsl $3810dc	                JSL INITCODEC
.39049d	22 b0 10 38	jsl $3810b0	                JSL INITSUPERIO
.3904a1	22 c4 10 38	jsl $3810c4	                JSL INITGAMMATABLE
.3904a5	22 c8 10 38	jsl $3810c8	                JSL INITALLLUT
.3904a9	22 ac 10 38	jsl $3810ac	                JSL INITCHLUT
.3904ad	22 7a 0c 39	jsl $390c7a	                JSL INITMOUSEPOINTER
.3904b1	22 bc 10 38	jsl $3810bc	                JSL INITCURSOR
.3904b5	22 cc 10 38	jsl $3810cc	                JSL INITVKYTXTMODE
.3904b9	22 4f 0c 39	jsl $390c4f	                JSL IINITFONTSET
.3904bd	22 3d 09 39	jsl $39093d	                JSL ICLRSCREEN  ; Clear Screen and Set a standard color in Color Memory
.3904c1	a9 01 00	lda #$0001	                LDA #CHAN_COM1    ; Initialize COM1
.3904c4	22 cd 4f 38	jsl $384fcd	                JSL UART_SELECT
.3904c8	22 39 50 38	jsl $385039	                JSL UART_INIT
.3904cc	a9 02 00	lda #$0002	                LDA #CHAN_COM2    ; Initialize COM2
.3904cf	22 cd 4f 38	jsl $384fcd	                JSL UART_SELECT
.3904d3	22 39 50 38	jsl $385039	                JSL UART_INIT
.3904d7	a9 00 00	lda #$0000	                LDA #0
.3904da	22 38 10 38	jsl $381038	                JSL SETIN
.3904de	22 3c 10 38	jsl $38103c	                JSL SETOUT
.3904e2	c2 20		rep #$20	                REP #$20        ; set A long
.3904e4	a2 00 00	ldx #$0000	                LDX #0
.3904e7	a0 00 00	ldy #$0000	                LDY #0
.3904ea	22 5e 08 39	jsl $39085e	                JSL ILOCATE
.3904ee	c2 30		rep #$30	                REP #$30        ; set A&X long
.3904f0					greet
.3904f0	48		pha		                PHA             ; begin setdbr macro
.3904f1	08		php		                PHP
.3904f2	e2 20		sep #$20	                SEP #$20        ; set A short
.3904f4	a9 39		lda #$39	                LDA #`greet_msg
.3904f6	48		pha		                PHA
.3904f7	ab		plb		                PLB
.3904f8	28		plp		                PLP
.3904f9	68		pla		                PLA             ; end setdbr macro
.3904fa	a2 55 13	ldx #$1355	                LDX #<>greet_msg
.3904fd	22 2e 06 39	jsl $39062e	                JSL IPRINT       ; print the first line
.390501	22 68 09 39	jsl $390968	                JSL ICOLORFLAG  ; This is to set the Color Memory for the Logo
.390505	48		pha		                PHA             ; begin setdp macro
.390506	08		php		                PHP
.390507	c2 20		rep #$20	                REP #$20        ; set A long
.390509	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39050c	5b		tcd		                TCD
.39050d	28		plp		                PLP
.39050e	68		pla		                PLA             ; end setdp macro
.39050f	22 b4 10 38	jsl $3810b4	                JSL INITKEYBOARD ;
.390513	e2 20		sep #$20	                SEP #$20        ; set A short
.390515	c2 10		rep #$10	                REP #$10        ; set X long
.390517	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.390519	8f 00 f1 af	sta $aff100	                STA $AFF100
.39051d	a9 bf		lda #$bf	                LDA #$BF ; Channel Two - No Atteniation
.39051f	8f 00 f1 af	sta $aff100	                STA $AFF100
.390523	a9 df		lda #$df	                LDA #$DF ; Channel Two - No Atteniation
.390525	8f 00 f1 af	sta $aff100	                STA $AFF100
.390529	a9 ff		lda #$ff	                LDA #$FF ; Channel Two - No Atteniation
.39052b	8f 00 f1 af	sta $aff100	                STA $AFF100
.39052f	a9 83		lda #$83	                LDA #$83 ; Channel Zero - No Atteniation
.390531	8f 00 f1 af	sta $aff100	                STA $AFF100
.390535	a9 12		lda #$12	                LDA #$12 ; Channel Zero - No Atteniation
.390537	8f 00 f1 af	sta $aff100	                STA $AFF100
.39053b	a9 90		lda #$90	                LDA #$90 ; Channel One - No Atteniation
.39053d	8f 00 f1 af	sta $aff100	                STA $AFF100
.390541	a2 00 40	ldx #$4000	                LDX #16384      ; 400ms
.390544	22 ec 12 39	jsl $3912ec	          		 	JSL ILOOP_MS
.390548	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.39054a	8f 00 f1 af	sta $aff100	                STA $AFF100
.39054e	58		cli		                CLI                   ; Make sure no Interrupt will come and fuck up Init before this point.
.39054f	e2 20		sep #$20	                SEP #$20        ; set A short
.390551	c2 10		rep #$10	                REP #$10        ; set X long
.390553	48		pha		                PHA             ; begin setdbr macro
.390554	08		php		                PHP
.390555	e2 20		sep #$20	                SEP #$20        ; set A short
.390557	a9 39		lda #$39	                LDA #`greet_msg
.390559	48		pha		                PHA
.39055a	ab		plb		                PLB
.39055b	28		plp		                PLP
.39055c	68		pla		                PLA             ; end setdbr macro
.39055d	af 0e e8 af	lda $afe80e	                LDA @lDIP_BOOTMODE    ; {HD_INSTALLED, 5'b0_0000, BOOT_MODE[1], BOOT_MODE[0]}
.390561	29 03		and #$03	                AND #%00000011        ; Look at the mode bits
.390563	c9 00		cmp #$00	                CMP #DIP_BOOT_IDE     ; DIP set for IDE?
.390565	f0 14		beq $39057b	                BEQ BOOTIDE           ; Yes: Boot from the IDE
.390567	c9 01		cmp #$01	                CMP #DIP_BOOT_SDCARD  ; DIP set for SD card?
.390569	f0 0b		beq $390576	                BEQ BOOTSDC           ; Yes: try to boot from the SD card
.39056b	c9 02		cmp #$02	                CMP #DIP_BOOT_FLOPPY  ; DIP set for floppy?
.39056d	f0 11		beq $390580	                BEQ BOOTFLOPPY        ; Yes: try to boot from the floppy
.39056f	5c 00 00 3a	jmp $3a0000	BOOTBASIC       JML BASIC             ; Cold start of the BASIC interpreter (or its replacement)
.390573	ea		nop		CREDIT_LOCK     NOP
.390574	80 fd		bra $390573	                BRA CREDIT_LOCK
.390576					BOOTSDC
.390576	a2 fa 16	ldx #$16fa	                LDX #<>sdcard_notimpl ; Print a message saying SD card booting is not implemented
.390579	80 08		bra $390583	                BRA PR_BOOT_ERROR
.39057b					BOOTIDE
.39057b	a2 27 17	ldx #$1727	                LDX #<>ide_notimpl    ; Print a message saying SD card booting is not implemented
.39057e	80 03		bra $390583	                BRA PR_BOOT_ERROR
.390580					BOOTFLOPPY
.390580	a2 56 17	ldx #$1756	                LDX #<>floppy_notimpl ; Print a message saying SD card booting is not implemented
.390583	22 2e 06 39	jsl $39062e	PR_BOOT_ERROR   JSL IPRINT
.390587	ea		nop		LOOP_FOREVER    NOP
.390588	80 fd		bra $390587	                BRA LOOP_FOREVER
.39058a					IBREAK
.39058a	48		pha		                PHA             ; begin setdp macro
.39058b	08		php		                PHP
.39058c	c2 20		rep #$20	                REP #$20        ; set A long
.39058e	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390591	5b		tcd		                TCD
.390592	28		plp		                PLP
.390593	68		pla		                PLA             ; end setdp macro
.390594	68		pla		                PLA             ; Pull .Y and stuff it in the CPUY variable
.390595	8f 48 02 00	sta $000248	                STA CPUY
.390599	68		pla		                PLA             ; Pull .X and stuff it in the CPUY variable
.39059a	8f 46 02 00	sta $000246	                STA CPUX
.39059e	68		pla		                PLA             ; Pull .A and stuff it in the CPUY variable
.39059f	8f 44 02 00	sta $000244	                STA CPUA
.3905a3	68		pla		                PLA
.3905a4	8f 4c 02 00	sta $00024c	                STA CPUDP       ; Pull Direct page
.3905a8	e2 20		sep #$20	                SEP #$20        ; set A short
.3905aa	68		pla		                PLA             ; Pull Data Bank (8 bits)
.3905ab	8f 4e 02 00	sta $00024e	                STA CPUDBR
.3905af	68		pla		                PLA             ; Pull Flags (8 bits)
.3905b0	8f 4f 02 00	sta $00024f	                STA CPUFLAGS
.3905b4	c2 20		rep #$20	                REP #$20        ; set A long
.3905b6	68		pla		                PLA             ; Pull Program Counter (16 bits)
.3905b7	8f 40 02 00	sta $000240	                STA CPUPC
.3905bb	e2 20		sep #$20	                SEP #$20        ; set A short
.3905bd	68		pla		                PLA             ; Pull Program Bank (8 bits)
.3905be	8f 42 02 00	sta $000242	                STA CPUPBR
.3905c2	c2 20		rep #$20	                REP #$20        ; set A long
.3905c4	3b		tsc		                TSA             ; Get the stack
.3905c5	8f 4a 02 00	sta $00024a	                STA CPUSTACK    ; Store the stack at immediately before the interrupt was asserted
.3905c9	a9 ff fe	lda #$feff	                LDA #<>STACK_END   ; initialize stack pointer back to the bootup value
.3905cc	1b		tcs		                TAS
.3905cd	5c 04 00 3a	jmp $3a0004	                JML MONITOR
.3905d1					IREADY
.3905d1	48		pha		                PHA             ; begin setdbr macro
.3905d2	08		php		                PHP
.3905d3	e2 20		sep #$20	                SEP #$20        ; set A short
.3905d5	a9 39		lda #$39	                LDA #`ready_msg
.3905d7	48		pha		                PHA
.3905d8	ab		plb		                PLB
.3905d9	28		plp		                PLP
.3905da	68		pla		                PLA             ; end setdbr macro
.3905db	e2 20		sep #$20	                SEP #$20        ; set A short
.3905dd	a2 88 17	ldx #$1788	                LDX #<>ready_msg
.3905e0	22 2e 06 39	jsl $39062e	                JSL IPRINT
.3905e4					IREADYWAIT
.3905e4	22 fe 05 39	jsl $3905fe	                JSL IGETCHE
.3905e8	80 fa		bra $3905e4	                BRA IREADYWAIT
.3905ea	db		stp		IKEYDOWN        STP             ; Keyboard key pressed
.3905eb	db		stp		IRETURN         STP
.3905ec	08		php		ISETIN          PHP
.3905ed	e2 20		sep #$20	                SEP #$20        ; set A short
.3905ef	8f 04 07 00	sta $000704	                STA @lCHAN_IN   ; Save the channel number
.3905f3	28		plp		                PLP
.3905f4	6b		rtl		                RTL
.3905f5	08		php		ISETOUT         PHP
.3905f6	e2 20		sep #$20	                SEP #$20        ; set A short
.3905f8	8f 03 07 00	sta $000703	                STA @lCHAN_OUT  ; Save the channel number
.3905fc	28		plp		                PLP
.3905fd	6b		rtl		                RTL
.3905fe	22 07 06 39	jsl $390607	IGETCHE         JSL IGETCHW
.390602	22 4e 06 39	jsl $39064e	                JSL IPUTC
.390606	6b		rtl		                RTL
.390607					IGETCHW
.390607	08		php		                PHP
.390608	e2 20		sep #$20	                SEP #$20        ; set A short
.39060a	af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.39060e	f0 17		beq $390627	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.390610	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.390612	f0 09		beq $39061d	                BEQ getc_uart       ; Yes: handle reading from the UART
.390614	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.390616	f0 05		beq $39061d	                BEQ getc_uart       ; Yes: handle reading from the UART
.390618	a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.39061a	28		plp		                PLP
.39061b	38		sec		                SEC                 ; And return carry set
.39061c	6b		rtl		                RTL
.39061d	22 cd 4f 38	jsl $384fcd	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.390621	22 81 50 38	jsl $385081	                JSL UART_GETC       ; Get the charater from the COM port
.390625	80 04		bra $39062b	                BRA done
.390627	22 8a 4f 38	jsl $384f8a	getc_keyboard   JSL KBD_GETC        ; Get the character from the keyboard
.39062b	28		plp		done            PLP
.39062c	18		clc		                CLC                 ; Return carry clear for valid data
.39062d	6b		rtl		                RTL
.39062e	22 37 06 39	jsl $390637	IPRINT          JSL IPUTS
.390632	22 74 07 39	jsl $390774	                JSL IPRINTCR
.390636	6b		rtl		                RTL
.390637	48		pha		IPUTS           PHA
.390638	08		php		                PHP
.390639	e2 20		sep #$20	                SEP #$20        ; set A short
.39063b	c2 10		rep #$10	                REP #$10        ; set X long
.39063d	bd 00 00	lda $390000,x	iputs1          LDA $0,b,x      ; read from the string
.390640	f0 08		beq $39064a	                BEQ iputs_done
.390642	22 4e 06 39	jsl $39064e	iputs2          JSL IPUTC
.390646	e8		inx		iputs3          INX
.390647	4c 3d 06	jmp $39063d	                JMP iputs1
.39064a	e8		inx		iputs_done      INX
.39064b	28		plp		                PLP
.39064c	68		pla		                PLA
.39064d	6b		rtl		                RTL
.39064e					IPUTC
.39064e	da		phx		                PHX
.39064f	5a		phy		                PHY
.390650	0b		phd		                PHD
.390651	8b		phb		                PHB
.390652	08		php		                PHP                 ; stash the flags (we'll be changing M)
.390653	48		pha		                PHA             ; begin setdp macro
.390654	08		php		                PHP
.390655	c2 20		rep #$20	                REP #$20        ; set A long
.390657	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39065a	5b		tcd		                TCD
.39065b	28		plp		                PLP
.39065c	68		pla		                PLA             ; end setdp macro
.39065d	48		pha		                PHA             ; begin setdbr macro
.39065e	08		php		                PHP
.39065f	e2 20		sep #$20	                SEP #$20        ; set A short
.390661	a9 00		lda #$00	                LDA #0
.390663	48		pha		                PHA
.390664	ab		plb		                PLB
.390665	28		plp		                PLP
.390666	68		pla		                PLA             ; end setdbr macro
.390667	e2 20		sep #$20	                SEP #$20        ; set A short
.390669	c2 10		rep #$10	                REP #$10        ; set X long
.39066b	48		pha		                PHA                 ; Save the character to print
.39066c	af 03 07 00	lda $000703	                LDA @lCHAN_OUT      ; Check the output channel #
.390670	f0 16		beq $390688	                BEQ putc_screen     ; If it's 0: print to the screen
.390672	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.390674	f0 07		beq $39067d	                BEQ putc_uart       ; Yes: handle printing to the UART
.390676	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.390678	f0 03		beq $39067d	                BEQ putc_uart       ; Yes: handle printing to the UART
.39067a	68		pla		                PLA                 ; Otherwise, just exit
.39067b	80 4f		bra $3906cc	                BRA done
.39067d	22 cd 4f 38	jsl $384fcd	putc_uart       JSL UART_SELECT     ; Point to the correct UART
.390681	68		pla		                PLA                 ; Recover the character to send
.390682	22 a2 50 38	jsl $3850a2	                JSL UART_PUTC       ; Send the character
.390686	80 44		bra $3906cc	                BRA done
.390688	68		pla		putc_screen     PLA                 ; Get the character to print
.390689	c9 0a		cmp #$0a	                CMP #CHAR_LF        ; Linefeed moves cursor down one line
.39068b	f0 61		beq $3906ee	                BEQ go_down
.39068d	c9 20		cmp #$20	                CMP #$20
.39068f	90 19		bcc $3906aa	                BCC check_ctrl0     ; [$00..$1F]: check for arrows
.390691	c9 7f		cmp #$7f	                CMP #$7F
.390693	f0 3d		beq $3906d2	                BEQ do_del
.390695	b0 02		bcs $390699	                BCS check_A0        ; [$20..$7E]: print it
.390697	80 29		bra $3906c2	                BRA printc
.390699	c9 a0		cmp #$a0	check_A0        CMP #$A0
.39069b	90 02		bcc $39069f	                BCC check_ctrl1
.39069d	80 23		bra $3906c2	                BRA printc          ; [$A0..$FF]: print it
.39069f	c9 91		cmp #$91	check_ctrl1     CMP #CHAR_DOWN      ; If the down arrow key was pressed
.3906a1	f0 4b		beq $3906ee	                BEQ go_down         ; ... move the cursor down one row
.3906a3	c9 9d		cmp #$9d	                CMP #CHAR_LEFT      ; If the left arrow key was pressed
.3906a5	f0 59		beq $390700	                BEQ go_left         ; ... move the cursor left one column
.3906a7	4c cc 06	jmp $3906cc	                JMP done
.3906aa	c9 09		cmp #$09	check_ctrl0     CMP #CHAR_TAB       ; If it's a TAB...
.3906ac	f0 58		beq $390706	                BEQ do_TAB          ; ... move to the next TAB stop
.3906ae	c9 08		cmp #$08	                CMP #CHAR_BS        ; If it's a backspace...
.3906b0	f0 2c		beq $3906de	                BEQ backspace       ; ... move the cursor back and replace with a space
.3906b2	c9 0d		cmp #$0d	                CMP #CHAR_CR        ; If the carriage return was pressed
.3906b4	f0 32		beq $3906e8	                BEQ do_cr           ; ... move cursor down and to the first column
.3906b6	c9 11		cmp #$11	                CMP #CHAR_UP        ; If the up arrow key was pressed
.3906b8	f0 3a		beq $3906f4	                BEQ go_up           ; ... move the cursor up one row
.3906ba	c9 1d		cmp #$1d	                CMP #CHAR_RIGHT     ; If the right arrow key was pressed
.3906bc	f0 3c		beq $3906fa	                BEQ go_right        ; ... move the cursor right one column
.3906be	c9 0f		cmp #$0f	                CMP #CHAR_INS       ; If the insert key was pressed
.3906c0	f0 16		beq $3906d8	                BEQ do_ins          ; ... insert a space
.3906c2	87 17		sta [$17]	printc          STA [CURSORPOS]     ; Save the character on the screen
.3906c4	a5 1e		lda $1e		                LDA CURCOLOR        ; Set the color based on CURCOLOR
.3906c6	87 1f		sta [$1f]	                STA [COLORPOS]
.3906c8	22 ba 07 39	jsl $3907ba	                JSL ICSRRIGHT       ; And advance the cursor
.3906cc	28		plp		done            PLP
.3906cd	ab		plb		                PLB
.3906ce	2b		pld		                PLD
.3906cf	7a		ply		                PLY
.3906d0	fa		plx		                PLX
.3906d1	6b		rtl		                RTL
.3906d2	22 2d 07 39	jsl $39072d	do_del          JSL SCRSHIFTLL      ; Shift the current line left one space into the cursor
.3906d6	80 f4		bra $3906cc	                BRA done
.3906d8	22 50 07 39	jsl $390750	do_ins          JSL SCRSHIFTLR      ; Shift the current line right one space from the cursor
.3906dc	80 ee		bra $3906cc	                BRA done
.3906de	22 ed 07 39	jsl $3907ed	backspace       JSL ICSRLEFT
.3906e2	22 2d 07 39	jsl $39072d	                JSL SCRSHIFTLL      ; Shift the current line left one space into the cursor
.3906e6	80 e4		bra $3906cc	                BRA done
.3906e8	22 74 07 39	jsl $390774	do_cr           JSL IPRINTCR        ; Move the cursor to the beginning of the next line
.3906ec	80 de		bra $3906cc	                BRA done
.3906ee	22 39 08 39	jsl $390839	go_down         JSL ICSRDOWN        ; Move the cursor down one row (might force a scroll)
.3906f2	80 d8		bra $3906cc	                BRA done
.3906f4	22 13 08 39	jsl $390813	go_up           JSL ICSRUP          ; Move the cursor up one line
.3906f8	80 d2		bra $3906cc	                BRA done
.3906fa	22 ba 07 39	jsl $3907ba	go_right        JSL ICSRRIGHT       ; Move the cursor right one column
.3906fe	80 cc		bra $3906cc	                BRA done
.390700	22 ed 07 39	jsl $3907ed	go_left         JSL ICSRLEFT        ; Move the cursor left one column
.390704	80 c6		bra $3906cc	                BRA done
.390706					do_TAB
.390706	c2 20		rep #$20	                REP #$20        ; set A long
.390708	a5 1a		lda $1a		                LDA CURSORX         ; Get the current column
.39070a	29 f8 ff	and #$fff8	                AND #$FFF8          ; See which group of 8 it's in
.39070d	18		clc		                CLC
.39070e	69 08 00	adc #$0008	                ADC #$0008          ; And move it to the next one
.390711	aa		tax		                TAX
.390712	a4 1c		ldy $1c		                LDY CURSORY
.390714	e2 20		sep #$20	                SEP #$20        ; set A short
.390716	e4 0f		cpx $0f		set_xy          CPX COLS_VISIBLE    ; Check if we're still on screen horizontally
.390718	90 04		bcc $39071e	                BCC check_row       ; Yes: check the row
.39071a	a2 00 00	ldx #$0000	                LDX #0              ; No: move to the first column...
.39071d	c8		iny		                INY                 ; ... and the next row
.39071e	c4 13		cpy $13		check_row       CPY LINES_VISIBLE   ; Check if we're still on the screen vertically
.390720	90 05		bcc $390727	                BCC do_locate       ; Yes: reposition the cursor
.390722	22 aa 08 39	jsl $3908aa	                JSL ISCROLLUP       ; No: scroll the screen
.390726	88		dey		                DEY                 ; And set the row to the last one
.390727	22 5e 08 39	jsl $39085e	do_locate       JSL ILOCATE         ; Set the cursor position
.39072b	80 9f		bra $3906cc	                BRA done
.39072d	da		phx		SCRSHIFTLL      PHX
.39072e	5a		phy		                PHY
.39072f	48		pha		                PHA
.390730	08		php		                PHP
.390731	48		pha		                PHA             ; begin setdp macro
.390732	08		php		                PHP
.390733	c2 20		rep #$20	                REP #$20        ; set A long
.390735	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390738	5b		tcd		                TCD
.390739	28		plp		                PLP
.39073a	68		pla		                PLA             ; end setdp macro
.39073b	c2 30		rep #$30	                REP #$30        ; set A&X long
.39073d	a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.39073f	a8		tay		                TAY                 ; Set it as the destination
.390740	aa		tax		                TAX
.390741	e8		inx		                INX                 ; And set the next cell as the source
.390742	38		sec		                SEC                 ; Calculate the length of the block to move
.390743	a9 7f 00	lda #$007f	                LDA #127            ; as 127 - X
.390746	e5 1a		sbc $1a		                SBC CURSORX
.390748	54 af af	mvn $af,$af	                MVN $AF, $AF        ; And move the block
.39074b	28		plp		                PLP
.39074c	68		pla		                PLA
.39074d	7a		ply		                PLY
.39074e	fa		plx		                PLX
.39074f	6b		rtl		                RTL
.390750	da		phx		SCRSHIFTLR      PHX
.390751	48		pha		                PHA
.390752	08		php		                PHP
.390753	c2 30		rep #$30	                REP #$30        ; set A&X long
.390755	a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.390757	29 80 ff	and #$ff80	                AND #$FF80          ; Mask off the column bits
.39075a	09 7f 00	ora #$007f	                ORA #$007F          ; And compute the address of the last cell
.39075d	a8		tay		                TAY                 ; And set that as the destination address
.39075e	3a		dec a		                DEC A               ; Compute the address of the character to the left
.39075f	aa		tax		                TAX                 ; And make it the source
.390760	38		sec		                SEC                 ; Calculate the length of the block to move
.390761	a9 7f 00	lda #$007f	                LDA #127            ; as 127 - X
.390764	e5 1a		sbc $1a		                SBC CURSORX
.390766	44 af af	mvp $af,$af	                MVP $AF, $AF        ; And move the block
.390769	e2 20		sep #$20	                SEP #$20        ; set A short
.39076b	a9 20		lda #$20	                LDA #CHAR_SP        ; Put a blank space at the cursor position
.39076d	87 17		sta [$17]	                STA [CURSORPOS]
.39076f	28		plp		                PLP
.390770	68		pla		                PLA
.390771	fa		plx		                PLX
.390772	6b		rtl		                RTL
.390773					IPUTB
.390773	6b		rtl		                RTL
.390774					IPRINTCR
.390774	da		phx		                PHX
.390775	5a		phy		                PHY
.390776	08		php		                PHP
.390777	e2 20		sep #$20	                SEP #$20        ; set A short
.390779	af 03 07 00	lda $000703	                LDA @lCHAN_OUT
.39077d	f0 1c		beq $39079b	                BEQ scr_printcr
.39077f	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.390781	f0 06		beq $390789	                BEQ uart_printcr    ; Yes: handle printing to the UART
.390783	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.390785	f0 02		beq $390789	                BEQ uart_printcr    ; Yes: handle printing to the UART
.390787	80 1c		bra $3907a5	                BRA done
.390789	22 cd 4f 38	jsl $384fcd	uart_printcr    JSL UART_SELECT
.39078d	a9 0d		lda #$0d	                LDA #CHAR_CR
.39078f	22 4e 06 39	jsl $39064e	                JSL IPUTC
.390793	a9 0a		lda #$0a	                LDA #CHAR_LF
.390795	22 4e 06 39	jsl $39064e	                JSL IPUTC
.390799	80 0a		bra $3907a5	                BRA done
.39079b	a2 00 00	ldx #$0000	scr_printcr     LDX #0
.39079e	a4 1c		ldy $1c		                LDY CURSORY
.3907a0	c8		iny		                INY
.3907a1	22 5e 08 39	jsl $39085e	                JSL ILOCATE
.3907a5	28		plp		done            PLP
.3907a6	7a		ply		                PLY
.3907a7	fa		plx		                PLX
.3907a8	6b		rtl		                RTL
.3907a9	da		phx		ICSRHOME        PHX
.3907aa	5a		phy		                PHY
.3907ab	08		php		                PHP
.3907ac	a2 00 00	ldx #$0000	                LDX #0
.3907af	a0 00 00	ldy #$0000	                LDY #0
.3907b2	22 5e 08 39	jsl $39085e	                JSL ILOCATE
.3907b6	28		plp		                PLP
.3907b7	7a		ply		                PLY
.3907b8	fa		plx		                PLX
.3907b9	6b		rtl		                RTL
.3907ba	da		phx		ICSRRIGHT       PHX
.3907bb	5a		phy		                PHY
.3907bc	48		pha		                PHA
.3907bd	0b		phd		                PHD
.3907be	08		php		                PHP
.3907bf	c2 20		rep #$20	                REP #$20        ; set A long
.3907c1	c2 10		rep #$10	                REP #$10        ; set X long
.3907c3	48		pha		                PHA             ; begin setdp macro
.3907c4	08		php		                PHP
.3907c5	c2 20		rep #$20	                REP #$20        ; set A long
.3907c7	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.3907ca	5b		tcd		                TCD
.3907cb	28		plp		                PLP
.3907cc	68		pla		                PLA             ; end setdp macro
.3907cd	a6 1a		ldx $1a		                LDX CURSORX           ; Get the new column
.3907cf	e8		inx		                INX
.3907d0	a4 1c		ldy $1c		                LDY CURSORY           ; Get the current row
.3907d2	e4 0f		cpx $0f		                CPX COLS_VISIBLE      ; Are we off screen?
.3907d4	90 0d		bcc $3907e3	                BCC icsrright_nowrap  ; No: just set the position
.3907d6	a2 00 00	ldx #$0000	                LDX #0                ; Yes: move to the first column
.3907d9	c8		iny		                INY                   ; And move to the next row
.3907da	c4 13		cpy $13		                CPY LINES_VISIBLE     ; Are we still off screen?
.3907dc	90 05		bcc $3907e3	                BCC icsrright_nowrap  ; No: just set the position
.3907de	88		dey		                DEY                   ; Yes: lock to the last row
.3907df	22 aa 08 39	jsl $3908aa	                JSL ISCROLLUP         ; But scroll the screen up
.3907e3					icsrright_nowrap
.3907e3	22 5e 08 39	jsl $39085e	                JSL ILOCATE           ; Set the cursor position
.3907e7	28		plp		                PLP
.3907e8	2b		pld		                PLD
.3907e9	68		pla		                PLA
.3907ea	7a		ply		                PLY
.3907eb	fa		plx		                PLX
.3907ec	6b		rtl		                RTL
.3907ed					ICSRLEFT
.3907ed	da		phx		                PHX
.3907ee	5a		phy		                PHY
.3907ef	48		pha		                PHA
.3907f0	0b		phd		                PHD
.3907f1	08		php		                PHP
.3907f2	c2 30		rep #$30	                REP #$30        ; set A&X long
.3907f4	48		pha		                PHA             ; begin setdp macro
.3907f5	08		php		                PHP
.3907f6	c2 20		rep #$20	                REP #$20        ; set A long
.3907f8	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.3907fb	5b		tcd		                TCD
.3907fc	28		plp		                PLP
.3907fd	68		pla		                PLA             ; end setdp macro
.3907fe	a5 1a		lda $1a		                LDA CURSORX
.390800	f0 0b		beq $39080d	                BEQ icsrleft_done_already_zero ; Check that we are not already @ Zero
.390802	a6 1a		ldx $1a		                LDX CURSORX
.390804	ca		dex		                DEX
.390805	86 1a		stx $1a		                STX CURSORX
.390807	a4 1c		ldy $1c		                LDY CURSORY
.390809	22 5e 08 39	jsl $39085e	                JSL ILOCATE
.39080d					icsrleft_done_already_zero
.39080d	28		plp		                PLP
.39080e	2b		pld		                PLD
.39080f	68		pla		                PLA
.390810	7a		ply		                PLY
.390811	fa		plx		                PLX
.390812	6b		rtl		                RTL
.390813					ICSRUP
.390813	da		phx		                PHX
.390814	5a		phy		                PHY
.390815	48		pha		                PHA
.390816	0b		phd		                PHD
.390817	08		php		                PHP
.390818	c2 30		rep #$30	                REP #$30        ; set A&X long
.39081a	48		pha		                PHA             ; begin setdp macro
.39081b	08		php		                PHP
.39081c	c2 20		rep #$20	                REP #$20        ; set A long
.39081e	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.390821	5b		tcd		                TCD
.390822	28		plp		                PLP
.390823	68		pla		                PLA             ; end setdp macro
.390824	a5 1c		lda $1c		                LDA CURSORY
.390826	f0 0b		beq $390833	                BEQ isrup_done_already_zero ; Check if we are not already @ Zero
.390828	a4 1c		ldy $1c		                LDY CURSORY
.39082a	88		dey		                DEY
.39082b	84 1c		sty $1c		                STY CURSORY
.39082d	a6 1a		ldx $1a		                LDX CURSORX
.39082f	22 5e 08 39	jsl $39085e	                JSL ILOCATE
.390833					isrup_done_already_zero
.390833	28		plp		                PLP
.390834	2b		pld		                PLD
.390835	68		pla		                PLA
.390836	7a		ply		                PLY
.390837	fa		plx		                PLX
.390838	6b		rtl		                RTL
.390839	da		phx		ICSRDOWN        PHX
.39083a	5a		phy		                PHY
.39083b	0b		phd		                PHD
.39083c	c2 30		rep #$30	                REP #$30        ; set A&X long
.39083e	48		pha		                PHA             ; begin setdp macro
.39083f	08		php		                PHP
.390840	c2 20		rep #$20	                REP #$20        ; set A long
.390842	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.390845	5b		tcd		                TCD
.390846	28		plp		                PLP
.390847	68		pla		                PLA             ; end setdp macro
.390848	a6 1a		ldx $1a		                LDX CURSORX                 ; Get the current column
.39084a	a4 1c		ldy $1c		                LDY CURSORY                 ; Get the new row
.39084c	c8		iny		                INY
.39084d	c4 13		cpy $13		                CPY LINES_VISIBLE           ; Check to see if we're off screen
.39084f	90 05		bcc $390856	                BCC icsrdown_noscroll       ; No: go ahead and set the position
.390851	88		dey		                DEY                         ; Yes: go back to the last row
.390852	22 aa 08 39	jsl $3908aa	                JSL ISCROLLUP               ; But scroll the screen up
.390856					icsrdown_noscroll
.390856	22 5e 08 39	jsl $39085e	                JSL ILOCATE                 ; And set the cursor position
.39085a	2b		pld		                PLD
.39085b	7a		ply		                PLY
.39085c	fa		plx		                PLX
.39085d	6b		rtl		                RTL
.39085e	48		pha		ILOCATE         PHA
.39085f	0b		phd		                PHD
.390860	08		php		                PHP
.390861	48		pha		                PHA             ; begin setdp macro
.390862	08		php		                PHP
.390863	c2 20		rep #$20	                REP #$20        ; set A long
.390865	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390868	5b		tcd		                TCD
.390869	28		plp		                PLP
.39086a	68		pla		                PLA             ; end setdp macro
.39086b	c2 30		rep #$30	                REP #$30        ; set A&X long
.39086d					ilocate_scroll
.39086d	c4 13		cpy $13		                CPY LINES_VISIBLE
.39086f	90 07		bcc $390878	                BCC ilocate_scrolldone
.390871	22 aa 08 39	jsl $3908aa	                JSL ISCROLLUP
.390875	88		dey		                DEY
.390876	80 f5		bra $39086d	                BRA ilocate_scroll
.390878					ilocate_scrolldone
.390878	86 1a		stx $1a		                STX CURSORX
.39087a	84 1c		sty $1c		                STY CURSORY
.39087c	a5 0c		lda $0c		                LDA SCREENBEGIN
.39087e					ilocate_row
.39087e	c0 00 00	cpy #$0000	                CPY #$0
.390881	f0 08		beq $39088b	                BEQ ilocate_right
.390883	18		clc		ilocate_down    CLC
.390884	65 11		adc $11		                ADC COLS_PER_LINE
.390886	88		dey		                DEY
.390887	f0 02		beq $39088b	                BEQ ilocate_right
.390889	80 f8		bra $390883	                BRA ilocate_down
.39088b	18		clc		ilocate_right   CLC
.39088c	65 1a		adc $1a		                ADC CURSORX             ; move the cursor right X columns
.39088e	85 17		sta $17		                STA CURSORPOS
.390890	a4 1c		ldy $1c		                LDY CURSORY
.390892	98		tya		                TYA
.390893	8f 16 00 af	sta $af0016	                STA @lVKY_TXT_CURSOR_Y_REG_L  ;Store in Vicky's registers
.390897	8a		txa		                TXA
.390898	8f 14 00 af	sta $af0014	                STA @lVKY_TXT_CURSOR_X_REG_L  ;Store in Vicky's register
.39089c	c2 20		rep #$20	                REP #$20        ; set A long
.39089e	18		clc		                CLC
.39089f	a5 17		lda $17		                LDA CURSORPOS
.3908a1	69 00 20	adc #$2000	                ADC #<>(CS_COLOR_MEM_PTR - CS_TEXT_MEM_PTR)
.3908a4	85 1f		sta $1f		                STA COLORPOS
.3908a6	28		plp		ilocate_done    PLP
.3908a7	2b		pld		                PLD
.3908a8	68		pla		                PLA
.3908a9	6b		rtl		                RTL
.3908aa					ISCROLLUP
.3908aa	48		pha		                PHA
.3908ab	da		phx		                PHX
.3908ac	5a		phy		                PHY
.3908ad	8b		phb		                PHB
.3908ae	08		php		                PHP
.3908af	c2 30		rep #$30	                REP #$30        ; set A&X long
.3908b1	18		clc		                CLC
.3908b2	a0 00 a0	ldy #$a000	                LDY #$A000
.3908b5	a2 80 a0	ldx #$a080	                LDX #$A080
.3908b8	a9 7f 1f	lda #$1f7f	                LDA #128 * 63 - 1
.3908bb	54 af af	mvn $af,$af	                MVN $AF,$AF
.3908be	c2 30		rep #$30	                REP #$30        ; set A&X long
.3908c0	a0 00 c0	ldy #$c000	                LDY #$C000
.3908c3	a2 80 c0	ldx #$c080	                LDX #$C080
.3908c6	a9 7f 1f	lda #$1f7f	                LDA #128 * 63 - 1
.3908c9	54 af af	mvn $af,$af	                MVN $AF,$AF
.3908cc	28		plp		                PLP
.3908cd	ab		plb		                PLB
.3908ce	7a		ply		                PLY
.3908cf	fa		plx		                PLX
.3908d0	68		pla		                PLA
.3908d1	6b		rtl		                RTL
.3908d2	08		php		IPRINTH         PHP
.3908d3	48		pha		                PHA
.3908d4					iprinth1
.3908d4	e2 20		sep #$20	                SEP #$20        ; set A short
.3908d6	bd 00 00	lda $0000,x	                LDA #0,b,x      ; Read the value to be printed
.3908d9	4a		lsr a		                LSR
.3908da	4a		lsr a		                LSR
.3908db	4a		lsr a		                LSR
.3908dc	4a		lsr a		                LSR
.3908dd	22 2c 09 39	jsl $39092c	                JSL iprint_digit
.3908e1	bd 00 00	lda $0000,x	                LDA #0,b,x
.3908e4	22 2c 09 39	jsl $39092c	                JSL iprint_digit
.3908e8	ca		dex		                DEX
.3908e9	88		dey		                DEY
.3908ea	d0 e8		bne $3908d4	                BNE iprinth1
.3908ec	68		pla		                PLA
.3908ed	28		plp		                PLP
.3908ee	6b		rtl		                RTL
.3908ef					IPRINTAH
.3908ef	48		pha		                PHA
.3908f0	08		php		                PHP
.3908f1	8f 44 02 00	sta $000244	                STA @lCPUA            ; Save A where we can use it multiple times
.3908f5	08		php		                PHP                   ; Get the processor status into A
.3908f6	e2 20		sep #$20	                SEP #$20        ; set A short
.3908f8	c2 10		rep #$10	                REP #$10        ; set X long
.3908fa	68		pla		                PLA
.3908fb	29 20		and #$20	                AND #%00100000        ; Is M = 1?
.3908fd	c9 20		cmp #$20	                CMP #%00100000
.3908ff	f0 14		beq $390915	                BEQ eight_bit
.390901	af 46 02 00	lda $000246	                LDA @lCPUA+2          ; Get nibble [15..12]
.390905	4a		lsr a		                LSR A
.390906	4a		lsr a		                LSR A
.390907	4a		lsr a		                LSR A
.390908	4a		lsr a		                LSR A
.390909	22 2c 09 39	jsl $39092c	                JSL iprint_digit      ; And print it
.39090d	af 46 02 00	lda $000246	                LDA @lCPUA+2          ; Get nibble [11..8]
.390911	22 2c 09 39	jsl $39092c	                JSL iprint_digit      ; And print it
.390915	af 44 02 00	lda $000244	eight_bit       LDA @lCPUA            ; Get nibble [7..4]
.390919	4a		lsr a		                LSR A
.39091a	4a		lsr a		                LSR A
.39091b	4a		lsr a		                LSR A
.39091c	4a		lsr a		                LSR A
.39091d	22 2c 09 39	jsl $39092c	                JSL iprint_digit      ; And print it
.390921	af 44 02 00	lda $000244	                LDA @lCPUA            ; Get nibble [3..0]
.390925	22 2c 09 39	jsl $39092c	                JSL iprint_digit      ; And print it
.390929	28		plp		                PLP
.39092a	68		pla		                PLA
.39092b	6b		rtl		                RTL
.39092c	da		phx		iprint_digit    PHX
.39092d	c2 20		rep #$20	                REP #$20        ; set A long
.39092f	29 0f 00	and #$000f	                AND #$0F
.390932	aa		tax		                TAX
.390933	bf 9c 17 39	lda $39179c,x	                LDA hex_digits,X
.390937	22 4e 06 39	jsl $39064e	                JSL IPUTC       ; Print the digit
.39093b	fa		plx		                PLX
.39093c	6b		rtl		                RTL
.39093d	48		pha		ICLRSCREEN	    PHA
.39093e	da		phx		                PHX
.39093f	08		php		                PHP
.390940	e2 20		sep #$20	                SEP #$20        ; set A short
.390942	c2 10		rep #$10	                REP #$10        ; set X long
.390944	a2 00 00	ldx #$0000	                LDX #$0000		          ; Only Use One Pointer
.390947	a9 20		lda #$20	                LDA #$20		            ; Fill the Entire Screen with Space
.390949	9f 00 a0 af	sta $afa000,x	iclearloop0	    STA CS_TEXT_MEM_PTR, x	;
.39094d	e8		inx		                inx
.39094e	e0 00 20	cpx #$2000	                cpx #$2000
.390951	d0 f6		bne $390949	                bne iclearloop0
.390953	a2 00 00	ldx #$0000	                LDX	#$0000		          ; Only Use One Pointer
.390956	af 1e 00 00	lda $00001e	                LDA @lCURCOLOR          ; Fill the Color Memory with the current color
.39095a	9f 00 c0 af	sta $afc000,x	iclearloop1	    STA CS_COLOR_MEM_PTR, x	;
.39095e	e8		inx		                inx
.39095f	e0 00 20	cpx #$2000	                cpx #$2000
.390962	d0 f6		bne $39095a	                bne iclearloop1
.390964	28		plp		                PLP
.390965	fa		plx		                PLX
.390966	68		pla		                PLA
.390967	6b		rtl		                RTL
.390968	48		pha		ICOLORFLAG      PHA
.390969	da		phx		                PHX
.39096a	08		php		                PHP
.39096b	e2 30		sep #$30	                SEP #$30        ; set A&X short
.39096d	a2 00		ldx #$00	                LDX #$00
.39096f	bf 87 14 39	lda $391487,x	iclearloop2	    LDA @lgreet_clr_line1,x
.390973	9f 00 c0 af	sta $afc000,x	                STA CS_COLOR_MEM_PTR,x
.390977	bf b1 14 39	lda $3914b1,x	                LDA @lgreet_clr_line2,x
.39097b	9f 80 c0 af	sta $afc080,x	                STA CS_COLOR_MEM_PTR + $80,x
.39097f	bf db 14 39	lda $3914db,x	                LDA @lgreet_clr_line3,x
.390983	9f 00 c1 af	sta $afc100,x	                STA CS_COLOR_MEM_PTR + $100,x
.390987	bf 05 15 39	lda $391505,x	                LDA @lgreet_clr_line4,x
.39098b	9f 80 c1 af	sta $afc180,x	                STA CS_COLOR_MEM_PTR + $180,x
.39098f	bf 2f 15 39	lda $39152f,x	                LDA @lgreet_clr_line5,x
.390993	9f 00 c2 af	sta $afc200,x	                STA CS_COLOR_MEM_PTR + $200,x
.390997	e8		inx		                inx
.390998	e0 2a		cpx #$2a	                cpx #42
.39099a	d0 d3		bne $39096f	                bne iclearloop2
.39099c	28		plp		                PLP
.39099d	fa		plx		                PLX
.39099e	68		pla		                PLA
.39099f	6b		rtl		                RTL
.3909a0	0b		phd		IINITCHLUT		  PHD
.3909a1	08		php		                PHP
.3909a2	48		pha		                PHA
.3909a3	da		phx		                PHX
.3909a4	e2 20		sep #$20	                SEP #$20        ; set A short
.3909a6	e2 10		sep #$10	                SEP #$10        ; set X short
.3909a8	a2 00		ldx #$00					        LDX	#$00
.3909aa	bf 59 15 39	lda $391559,x	lutinitloop0	  LDA @lfg_color_lut,x		; get Local Data
.3909ae	9f 40 1f af	sta $af1f40,x	                STA FG_CHAR_LUT_PTR,x	; Write in LUT Memory
.3909b2	e8		inx		                inx
.3909b3	e0 40		cpx #$40	                cpx #$40
.3909b5	d0 f3		bne $3909aa	                bne lutinitloop0
.3909b7	a2 00		ldx #$00	                LDX	#$00
.3909b9	bf 99 15 39	lda $391599,x	lutinitloop1	  LDA @lbg_color_lut,x		; get Local Data
.3909bd	9f 80 1f af	sta $af1f80,x	                STA BG_CHAR_LUT_PTR,x	; Write in LUT Memory
.3909c1	e8		inx		                INX
.3909c2	e0 40		cpx #$40	                CPX #$40
.3909c4	d0 f3		bne $3909b9	                bne lutinitloop1
.3909c6	c2 20		rep #$20	                REP #$20        ; set A long
.3909c8	c2 10		rep #$10	                REP #$10        ; set X long
.3909ca	fa		plx		                PLX
.3909cb	68		pla		                PLA
.3909cc	28		plp		                PLP
.3909cd	2b		pld		                PLD
.3909ce	6b		rtl		                RTL
.3909cf					IINITGAMMATABLE
.3909cf	e2 20		sep #$20	                SEP #$20        ; set A short
.3909d1	c2 10		rep #$10	                REP #$10        ; set X long
.3909d3	a2 00 00	ldx #$0000	                ldx #$0000
.3909d6	bf 00 1c 39	lda $391c00,x	initgammaloop   LDA GAMMA_1_8_Tbl, x
.3909da	9f 00 40 af	sta $af4000,x	                STA GAMMA_B_LUT_PTR, x
.3909de	9f 00 41 af	sta $af4100,x	                STA GAMMA_G_LUT_PTR, x
.3909e2	9f 00 42 af	sta $af4200,x	                STA GAMMA_R_LUT_PTR, x
.3909e6	e8		inx		                inx
.3909e7	e0 00 01	cpx #$0100	                cpx #$0100
.3909ea	d0 ea		bne $3909d6	                bne initgammaloop
.3909ec	c2 30		rep #$30	                REP #$30        ; set A&X long
.3909ee	6b		rtl		                RTL
.3909ef	48		pha		IINITALLLUT     PHA
.3909f0	da		phx		                PHX
.3909f1	a2 00 00	ldx #$0000	                LDX #$0000
.3909f4	e2 20		sep #$20	                SEP #$20        ; set A short
.3909f6	a9 00		lda #$00	                LDA #$00
.3909f8	85 0a		sta $0a		                STA $0A     ; Temp Location
.3909fa					iinit_lut_loop
.3909fa	86 02		stx $02		                STX $02
.3909fc	a6 0a		ldx $0a		                LDX $0A
.3909fe	bf 00 1b 39	lda $391b00,x	                LDA GAMMA_2_2_Tbl, x
.390a02	49 55		eor #$55	                EOR  #$55
.390a04	a6 02		ldx $02		                LDX $02
.390a06	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390a0a	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390a0e	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390a12	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390a16	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390a1a	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390a1e	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390a22	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390a26	e8		inx		                inx
.390a27	86 02		stx $02		                STX $02
.390a29	a6 0a		ldx $0a		                LDX $0A
.390a2b	bf 00 1d 39	lda $391d00,x	                LDA RANDOM_LUT_Tbl, x
.390a2f	a6 02		ldx $02		                LDX $02
.390a31	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390a35	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390a39	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390a3d	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390a41	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390a45	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390a49	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390a4d	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390a51	e8		inx		                inx
.390a52	86 02		stx $02		                STX $02
.390a54	a6 0a		ldx $0a		                LDX $0A
.390a56	bf 00 1c 39	lda $391c00,x	                LDA GAMMA_1_8_Tbl, x
.390a5a	49 aa		eor #$aa	                EOR  #$AA
.390a5c	a6 02		ldx $02		                LDX $02
.390a5e	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390a62	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390a66	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390a6a	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390a6e	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390a72	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390a76	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390a7a	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390a7e	e8		inx		                inx
.390a7f	a9 ff		lda #$ff	                LDA #$FF
.390a81	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390a85	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390a89	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390a8d	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390a91	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390a95	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390a99	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390a9d	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390aa1	e6 0a		inc $0a		                inc $0A
.390aa3	e8		inx		                inx
.390aa4	e0 00 04	cpx #$0400	                cpx #$0400
.390aa7	f0 03		beq $390aac	                beq iinit_lut_exit
.390aa9	82 4e ff	brl $3909fa	                brl iinit_lut_loop
.390aac					iinit_lut_exit
.390aac	c2 30		rep #$30	                REP #$30        ; set A&X long
.390aae	fa		plx		                PLX
.390aaf	68		pla		                PLA
.390ab0	6b		rtl		                RTL
.390ab1	48		pha		IINITVKYTXTMODE PHA
.390ab2	e2 20		sep #$20	                SEP #$20        ; set A short
.390ab4	a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En      ;Okay, this Enables the Text Mode (Video Display)
.390ab6	8f 00 00 af	sta $af0000	                STA MASTER_CTRL_REG_L
.390aba	a9 20		lda #$20	                LDA #$20
.390abc	8f 05 00 af	sta $af0005	                STA BORDER_COLOR_B
.390ac0	8f 07 00 af	sta $af0007	                STA BORDER_COLOR_R
.390ac4	a9 00		lda #$00	                LDA #$00
.390ac6	8f 06 00 af	sta $af0006	                STA BORDER_COLOR_G
.390aca	a9 01		lda #$01	                LDA #Border_Ctrl_Enable   ; Enable the Border
.390acc	8f 04 00 af	sta $af0004	                STA BORDER_CTRL_REG
.390ad0	a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En
.390ad2	8f 00 00 af	sta $af0000	                STA MASTER_CTRL_REG_L
.390ad6	c2 30		rep #$30	                REP #$30        ; set A&X long
.390ad8	68		pla		                PLA
.390ad9	6b		rtl		                RTL
.390ada					IINITVKYGRPMODE
.390ada	48		pha		                PHA
.390adb	e2 20		sep #$20	                SEP #$20        ; set A short
.390add	a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.390adf	8f 40 01 af	sta $af0140	                STA @lBM_CONTROL_REG
.390ae3	a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.390ae5	8f 41 01 af	sta $af0141	                STA @lBM_START_ADDY_L
.390ae9	a9 c0		lda #$c0	                LDA #$C0
.390aeb	8f 42 01 af	sta $af0142	                STA @lBM_START_ADDY_M
.390aef	a9 00		lda #$00	                LDA #$00
.390af1	8f 43 01 af	sta $af0143	                STA @lBM_START_ADDY_H ; This address is always base from
.390af5	a9 80		lda #$80	                LDA #$80
.390af7	8f 44 01 af	sta $af0144	                STA BM_X_SIZE_L
.390afb	a9 02		lda #$02	                LDA #$02
.390afd	8f 45 01 af	sta $af0145	                STA BM_X_SIZE_H         ; $0280 = 640
.390b01	a9 e0		lda #$e0	                LDA #$E0
.390b03	8f 46 01 af	sta $af0146	                STA BM_Y_SIZE_L
.390b07	a9 01		lda #$01	                LDA #$01
.390b09	8f 47 01 af	sta $af0147	                STA BM_Y_SIZE_H         ; $01E0 = 480
.390b0d	c2 30		rep #$30	                REP #$30        ; set A&X long
.390b0f	68		pla		                PLA
.390b10	6b		rtl		                RTL
.390b11					IINITTILEMODE
.390b11	6b		rtl		                RTL
.390b12	48		pha		IINITSPRITE     PHA
.390b13	e2 20		sep #$20	                SEP #$20        ; set A short
.390b15	a9 03		lda #$03	                LDA #$03    ; Enable 17 Sprites
.390b17	8f 00 02 af	sta $af0200	                STA SP00_CONTROL_REG
.390b1b	8f 08 02 af	sta $af0208	                STA SP01_CONTROL_REG
.390b1f	8f 10 02 af	sta $af0210	                STA SP02_CONTROL_REG
.390b23	8f 18 02 af	sta $af0218	                STA SP03_CONTROL_REG
.390b27	8f 20 02 af	sta $af0220	                STA SP04_CONTROL_REG
.390b2b	8f 28 02 af	sta $af0228	                STA SP05_CONTROL_REG
.390b2f	8f 30 02 af	sta $af0230	                STA SP06_CONTROL_REG
.390b33	8f 38 02 af	sta $af0238	                STA SP07_CONTROL_REG
.390b37	8f 40 02 af	sta $af0240	                STA SP08_CONTROL_REG
.390b3b	8f 48 02 af	sta $af0248	                STA SP09_CONTROL_REG
.390b3f	8f 50 02 af	sta $af0250	                STA SP10_CONTROL_REG
.390b43	8f 58 02 af	sta $af0258	                STA SP11_CONTROL_REG
.390b47	8f 60 02 af	sta $af0260	                STA SP12_CONTROL_REG
.390b4b	8f 68 02 af	sta $af0268	                STA SP13_CONTROL_REG
.390b4f	8f 70 02 af	sta $af0270	                STA SP14_CONTROL_REG
.390b53	8f 78 02 af	sta $af0278	                STA SP15_CONTROL_REG
.390b57	8f 80 02 af	sta $af0280	                STA SP16_CONTROL_REG
.390b5b	a9 09		lda #$09	                LDA #$09
.390b5d	8f 03 02 af	sta $af0203	                STA SP00_ADDY_PTR_H
.390b61	8f 0b 02 af	sta $af020b	                STA SP01_ADDY_PTR_H
.390b65	8f 13 02 af	sta $af0213	                STA SP02_ADDY_PTR_H
.390b69	8f 1b 02 af	sta $af021b	                STA SP03_ADDY_PTR_H
.390b6d	8f 23 02 af	sta $af0223	                STA SP04_ADDY_PTR_H
.390b71	8f 2b 02 af	sta $af022b	                STA SP05_ADDY_PTR_H
.390b75	8f 33 02 af	sta $af0233	                STA SP06_ADDY_PTR_H
.390b79	8f 3b 02 af	sta $af023b	                STA SP07_ADDY_PTR_H
.390b7d	8f 43 02 af	sta $af0243	                STA SP08_ADDY_PTR_H
.390b81	8f 4b 02 af	sta $af024b	                STA SP09_ADDY_PTR_H
.390b85	8f 53 02 af	sta $af0253	                STA SP10_ADDY_PTR_H
.390b89	8f 5b 02 af	sta $af025b	                STA SP11_ADDY_PTR_H
.390b8d	8f 63 02 af	sta $af0263	                STA SP12_ADDY_PTR_H
.390b91	8f 6b 02 af	sta $af026b	                STA SP13_ADDY_PTR_H
.390b95	8f 73 02 af	sta $af0273	                STA SP14_ADDY_PTR_H
.390b99	8f 7b 02 af	sta $af027b	                STA SP15_ADDY_PTR_H
.390b9d	8f 83 02 af	sta $af0283	                STA SP16_ADDY_PTR_H
.390ba1	a9 00		lda #$00	                LDA #$00
.390ba3	8f 02 02 af	sta $af0202	                STA SP00_ADDY_PTR_M
.390ba7	a9 04		lda #$04	                LDA #$04
.390ba9	8f 0a 02 af	sta $af020a	                STA SP01_ADDY_PTR_M
.390bad	a9 08		lda #$08	                LDA #$08
.390baf	8f 12 02 af	sta $af0212	                STA SP02_ADDY_PTR_M
.390bb3	a9 0c		lda #$0c	                LDA #$0C
.390bb5	8f 1a 02 af	sta $af021a	                STA SP03_ADDY_PTR_M
.390bb9	a9 10		lda #$10	                LDA #$10
.390bbb	8f 22 02 af	sta $af0222	                STA SP04_ADDY_PTR_M
.390bbf	a9 14		lda #$14	                LDA #$14
.390bc1	8f 2a 02 af	sta $af022a	                STA SP05_ADDY_PTR_M
.390bc5	a9 18		lda #$18	                LDA #$18
.390bc7	8f 32 02 af	sta $af0232	                STA SP06_ADDY_PTR_M
.390bcb	a9 1c		lda #$1c	                LDA #$1C
.390bcd	8f 3a 02 af	sta $af023a	                STA SP07_ADDY_PTR_M
.390bd1	a9 20		lda #$20	                LDA #$20
.390bd3	8f 42 02 af	sta $af0242	                STA SP08_ADDY_PTR_M
.390bd7	a9 24		lda #$24	                LDA #$24
.390bd9	8f 4a 02 af	sta $af024a	                STA SP09_ADDY_PTR_M
.390bdd	a9 28		lda #$28	                LDA #$28
.390bdf	8f 52 02 af	sta $af0252	                STA SP10_ADDY_PTR_M
.390be3	a9 2c		lda #$2c	                LDA #$2C
.390be5	8f 5a 02 af	sta $af025a	                STA SP11_ADDY_PTR_M
.390be9	a9 30		lda #$30	                LDA #$30
.390beb	8f 62 02 af	sta $af0262	                STA SP12_ADDY_PTR_M
.390bef	a9 34		lda #$34	                LDA #$34
.390bf1	8f 6a 02 af	sta $af026a	                STA SP13_ADDY_PTR_M
.390bf5	a9 38		lda #$38	                LDA #$38
.390bf7	8f 72 02 af	sta $af0272	                STA SP14_ADDY_PTR_M
.390bfb	a9 3c		lda #$3c	                LDA #$3C
.390bfd	8f 7a 02 af	sta $af027a	                STA SP15_ADDY_PTR_M
.390c01	a9 40		lda #$40	                LDA #$40
.390c03	8f 82 02 af	sta $af0282	                STA SP16_ADDY_PTR_M
.390c07	a9 00		lda #$00	                LDA #$00
.390c09	8f 01 02 af	sta $af0201	                STA SP00_ADDY_PTR_L
.390c0d	8f 09 02 af	sta $af0209	                STA SP01_ADDY_PTR_L
.390c11	8f 11 02 af	sta $af0211	                STA SP02_ADDY_PTR_L
.390c15	8f 19 02 af	sta $af0219	                STA SP03_ADDY_PTR_L
.390c19	8f 21 02 af	sta $af0221	                STA SP04_ADDY_PTR_L
.390c1d	8f 29 02 af	sta $af0229	                STA SP05_ADDY_PTR_L
.390c21	8f 31 02 af	sta $af0231	                STA SP06_ADDY_PTR_L
.390c25	8f 39 02 af	sta $af0239	                STA SP07_ADDY_PTR_L
.390c29	8f 41 02 af	sta $af0241	                STA SP08_ADDY_PTR_L
.390c2d	8f 49 02 af	sta $af0249	                STA SP09_ADDY_PTR_L
.390c31	8f 51 02 af	sta $af0251	                STA SP10_ADDY_PTR_L
.390c35	8f 59 02 af	sta $af0259	                STA SP11_ADDY_PTR_L
.390c39	8f 61 02 af	sta $af0261	                STA SP12_ADDY_PTR_L
.390c3d	8f 69 02 af	sta $af0269	                STA SP13_ADDY_PTR_L
.390c41	8f 71 02 af	sta $af0271	                STA SP14_ADDY_PTR_L
.390c45	8f 79 02 af	sta $af0279	                STA SP15_ADDY_PTR_L
.390c49	8f 81 02 af	sta $af0281	                STA SP16_ADDY_PTR_L
.390c4d	68		pla		                PLA
.390c4e	6b		rtl		                RTL
.390c4f					IINITFONTSET
.390c4f	e2 20		sep #$20	                SEP #$20        ; set A short
.390c51	c2 10		rep #$10	                REP #$10        ; set X long
.390c53	a2 00 00	ldx #$0000	                LDX #$0000
.390c56					initFontsetbranch0
.390c56	bf 00 f0 3f	lda $3ff000,x	                LDA @lFONT_4_BANK0,X    ; RAM Content
.390c5a	9f 00 80 af	sta $af8000,x	                STA @lFONT_MEMORY_BANK0,X ; Vicky FONT RAM Bank
.390c5e	e8		inx		                INX
.390c5f	e0 00 08	cpx #$0800	                CPX #$0800
.390c62	d0 f2		bne $390c56	                BNE initFontsetbranch0
.390c64	ea		nop		                NOP
.390c65	a2 00 00	ldx #$0000	                LDX #$0000
.390c68					initFontsetbranch1
.390c68	bf 00 f8 3f	lda $3ff800,x	                LDA @lFONT_4_BANK1,X
.390c6c	9f 00 88 af	sta $af8800,x	                STA @lFONT_MEMORY_BANK1,X ; Vicky FONT RAM Bank
.390c70	e8		inx		                INX
.390c71	e0 00 08	cpx #$0800	                CPX #$0800
.390c74	d0 f2		bne $390c68	                BNE initFontsetbranch1
.390c76	ea		nop		                NOP
.390c77	c2 30		rep #$30	                REP #$30        ; set A&X long
.390c79	6b		rtl		                RTL
.390c7a					INITMOUSEPOINTER
.390c7a	e2 20		sep #$20	                SEP #$20        ; set A short
.390c7c	c2 10		rep #$10	                REP #$10        ; set X long
.390c7e	a2 00 00	ldx #$0000	                LDX #$0000
.390c81					FILL_MOUSE_MARKER
.390c81	bf 00 1e 39	lda $391e00,x	                LDA @lMOUSE_POINTER_PTR,X
.390c85	9f 00 05 af	sta $af0500,x	                STA @lMOUSE_PTR_GRAP0_START, X
.390c89	e8		inx		                INX
.390c8a	e0 00 01	cpx #$0100	                CPX #$0100
.390c8d	d0 f2		bne $390c81	                BNE FILL_MOUSE_MARKER
.390c8f	ea		nop		                nop
.390c90	a9 01		lda #$01	                LDA #$01
.390c92	8f 00 07 af	sta $af0700	                STA @lMOUSE_PTR_CTRL_REG_L  ; Enable Mouse, Mouse Pointer Graphic Bank 0
.390c96	c2 30		rep #$30	                REP #$30        ; set A&X long
.390c98	6b		rtl		                RTL
.390c99	48		pha		IINITCURSOR     PHA
.390c9a	e2 20		sep #$20	                SEP #$20        ; set A short
.390c9c	a9 b1		lda #$b1	                LDA #$B1      ;The Cursor Character will be a Fully Filled Block
.390c9e	8f 12 00 af	sta $af0012	                STA VKY_TXT_CURSOR_CHAR_REG
.390ca2	a9 03		lda #$03	                LDA #$03      ;Set Cursor Enable And Flash Rate @1Hz
.390ca4	8f 10 00 af	sta $af0010	                STA VKY_TXT_CURSOR_CTRL_REG ;
.390ca8	c2 30		rep #$30	                REP #$30        ; set A&X long
.390caa	a9 00 00	lda #$0000	                LDA #$0000;
.390cad	8f 14 00 af	sta $af0014	                STA VKY_TXT_CURSOR_X_REG_L; // Set the X to Position 1
.390cb1	a9 06 00	lda #$0006	                LDA #$0006;
.390cb4	8f 16 00 af	sta $af0016	                STA VKY_TXT_CURSOR_Y_REG_L; // Set the Y to Position 6 (Below)
.390cb8	68		pla		                PLA
.390cb9	6b		rtl		                RTL
.390cba	0b		phd		IINITSUPERIO	  PHD
.390cbb	08		php		                PHP
.390cbc	48		pha		                PHA
.390cbd	e2 20		sep #$20	                SEP #$20        ; set A short
.390cbf	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390cc1	8f 23 11 af	sta $af1123	                STA GP10_REG
.390cc5	af 23 11 af	lda $af1123	                LDA GP10_REG
.390cc9	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390ccb	8f 24 11 af	sta $af1124	                STA GP11_REG
.390ccf	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390cd1	8f 25 11 af	sta $af1125	                STA GP12_REG
.390cd5	a9 01		lda #$01	        				LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390cd7	8f 26 11 af	sta $af1126	        				STA GP13_REG
.390cdb	a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BX) Bit[0] = 1, Bit[2] = 1
.390cdd	8f 27 11 af	sta $af1127	        				STA GP14_REG
.390ce1	a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BY) Bit[0] = 1, Bit[2] = 1
.390ce3	8f 28 11 af	sta $af1128	        				STA GP15_REG
.390ce7	a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BX) Bit[0] = 1, Bit[2] = 1
.390ce9	8f 29 11 af	sta $af1129	        				STA GP16_REG
.390ced	a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BY) Bit[0] = 1, Bit[2] = 1
.390cef	8f 2a 11 af	sta $af112a	        				STA GP17_REG
.390cf3	a9 00		lda #$00	        				LDA #$00		;(C256 - HEADPHONE MUTE) - Output GPIO - Push-Pull (1 - Headphone On, 0 - HeadPhone Off)
.390cf5	8f 2b 11 af	sta $af112b	        				STA GP20_REG
.390cf9	a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390cfb	8f 2f 11 af	sta $af112f					        STA GP24_REG
.390cff	a9 05		lda #$05					        LDA #$05		;(C256 - MIDI IN) Bit[0] = 1, Bit[2] = 1 (Page 132 Manual)
.390d01	8f 30 11 af	sta $af1130					        STA GP25_REG
.390d05	a9 84		lda #$84				        	LDA #$84		;(C256 - MIDI OUT) Bit[2] = 1, Bit[7] = 1 (Open Drain - To be Checked)
.390d07	8f 31 11 af	sta $af1131					        STA GP26_REG
.390d0b	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 1) Setup as GPIO Input for now
.390d0d	8f 33 11 af	sta $af1133					        STA GP30_REG
.390d11	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 4) Setup as GPIO Input for now
.390d13	8f 34 11 af	sta $af1134					        STA GP31_REG
.390d17	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 3) Setup as GPIO Input for now
.390d19	8f 35 11 af	sta $af1135					        STA GP32_REG
.390d1d	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 6) Setup as GPIO Input for now
.390d1f	8f 36 11 af	sta $af1136					        STA GP33_REG
.390d23	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 5) Setup as GPIO Input for now
.390d25	8f 37 11 af	sta $af1137					        STA GP34_REG
.390d29	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 8) Setup as GPIO Input for now
.390d2b	8f 38 11 af	sta $af1138					        STA GP35_REG
.390d2f	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 7) Setup as GPIO Input for now
.390d31	8f 39 11 af	sta $af1139					        STA GP36_REG
.390d35	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 10) Setup as GPIO Input for now
.390d37	8f 3a 11 af	sta $af113a					        STA GP37_REG
.390d3b	a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390d3d	8f 3d 11 af	sta $af113d					        STA GP42_REG
.390d41	a9 01		lda #$01				          LDA #$01		;(C256 - INPUT PLL CLK INTERRUPT) Default Value - Will keep it as an input for now, no real usage for now
.390d43	8f 3e 11 af	sta $af113e					        STA GP43_REG
.390d47	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RI2) - Input - Set Secondary Function
.390d49	8f 3f 11 af	sta $af113f					        STA GP50_REG
.390d4d	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DCD2) - Input - Set Secondary Function
.390d4f	8f 40 11 af	sta $af1140					        STA GP51_REG
.390d53	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RXD2) - Input - Set Secondary Function
.390d55	8f 41 11 af	sta $af1141					        STA GP52_REG
.390d59	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - TXD2) - Output - Set Secondary Function
.390d5b	8f 42 11 af	sta $af1142					        STA GP53_REG
.390d5f	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DSR2) - Input - Set Secondary Function
.390d61	8f 43 11 af	sta $af1143					        STA GP54_REG
.390d65	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - RTS2) - Output - Set Secondary Function
.390d67	8f 44 11 af	sta $af1144					        STA GP55_REG
.390d6b	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - CTS2) - Input - Set Secondary Function
.390d6d	8f 45 11 af	sta $af1145					        STA GP56_REG
.390d71	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - DTR2) - Output - Set Secondary Function
.390d73	8f 46 11 af	sta $af1146					        STA GP57_REG
.390d77	a9 84		lda #$84					        LDA #$84		;(C256 - LED1) - Open Drain - Output
.390d79	8f 47 11 af	sta $af1147					        STA GP60_REG
.390d7d	a9 84		lda #$84					        LDA #$84		;(C256 - LED2) - Open Drain - Output
.390d7f	8f 48 11 af	sta $af1148					        STA GP61_REG
.390d83	a9 00		lda #$00				        	LDA #$00		;GPIO Data Register (GP10..GP17) - Not Used
.390d85	8f 4b 11 af	sta $af114b					        STA GP1_REG
.390d89	a9 01		lda #$01					        LDA #$01		;GPIO Data Register (GP20..GP27) - Bit[0] - Headphone Mute (Enabling it)
.390d8b	8f 4c 11 af	sta $af114c					        STA GP2_REG
.390d8f	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP30..GP37) - Since it is in Output mode, nothing to write here.
.390d91	8f 4d 11 af	sta $af114d					        STA GP3_REG
.390d95	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP40..GP47)  - Not Used
.390d97	8f 4e 11 af	sta $af114e					        STA GP4_REG
.390d9b	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP50..GP57)  - Not Used
.390d9d	8f 4f 11 af	sta $af114f					        STA GP5_REG
.390da1	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP60..GP61)  - Not Used
.390da3	8f 50 11 af	sta $af1150					        STA GP6_REG
.390da7	a9 01		lda #$01					        LDA #$01		;LED1 Output - Already setup by Vicky Init Phase, for now, I will leave it alone
.390da9	8f 5d 11 af	sta $af115d					        STA LED1_REG
.390dad	a9 02		lda #$02					        LDA #$02		;LED2 Output - However, I will setup this one, to make sure the Code works (Full On, when Code was ran)
.390daf	8f 5e 11 af	sta $af115e					        STA LED2_REG
.390db3	c2 20		rep #$20	                REP #$20        ; set A long
.390db5	68		pla		                PLA
.390db6	28		plp						        PLP
.390db7	2b		pld					        	PLD
.390db8	6b		rtl		                RTL
.390db9	0b		phd		IINITKEYBOARD	  PHD
.390dba	08		php						        PHP
.390dbb	48		pha						        PHA
.390dbc	da		phx						        PHX
.390dbd	e2 20		sep #$20	                SEP #$20        ; set A short
.390dbf	c2 10		rep #$10	                REP #$10        ; set X long
.390dc1	18		clc		                CLC
.390dc2	20 72 0e	jsr $390e72	                JSR Poll_Inbuf ;
.390dc5	a9 aa		lda #$aa					        LDA #$AA			;Send self test command
.390dc7	8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.390dcb	20 7d 0e	jsr $390e7d	                JSR Poll_Outbuf ;
.390dce	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Check self test result
.390dd2	c9 55		cmp #$55					        CMP #$55
.390dd4	f0 03		beq $390dd9					        BEQ	passAAtest
.390dd6	82 89 00	brl $390e62	                BRL initkb_loop_out
.390dd9					passAAtest
.390dd9	a9 ab		lda #$ab					        LDA #$AB			;Send test Interface command
.390ddb	8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.390ddf	20 7d 0e	jsr $390e7d	                JSR Poll_Outbuf ;
.390de2	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Display Interface test results
.390de6	c9 00		cmp #$00					        CMP #$00			;Should be 00
.390de8	f0 03		beq $390ded					        BEQ	passABtest
.390dea	82 75 00	brl $390e62	                BRL initkb_loop_out
.390ded					passABtest
.390ded	a9 60		lda #$60	                LDA #$60            ; Send Command 0x60 so to Enable Interrupt
.390def	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390df3	20 72 0e	jsr $390e72	                JSR Poll_Inbuf ;
.390df6	a9 69		lda #$69	                LDA #%01101001      ; Enable Interrupt
.390df8	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.390dfc	20 72 0e	jsr $390e72	                JSR Poll_Inbuf ;
.390dff	a9 ff		lda #$ff	                LDA #$FF      ; Send Keyboard Reset command
.390e01	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.390e05	a2 ff ff	ldx #$ffff	                LDX #$FFFF
.390e08	ca		dex		DLY_LOOP1       DEX
.390e09	ea		nop		                NOP
.390e0a	ea		nop		                NOP
.390e0b	ea		nop		                NOP
.390e0c	ea		nop		                NOP
.390e0d	ea		nop		                NOP
.390e0e	ea		nop		                NOP
.390e0f	ea		nop		                NOP
.390e10	ea		nop		                NOP
.390e11	e0 00 00	cpx #$0000	                CPX #$0000
.390e14	d0 f2		bne $390e08	                BNE DLY_LOOP1
.390e16	20 7d 0e	jsr $390e7d	                JSR Poll_Outbuf ;
.390e19	af 60 10 af	lda $af1060	                LDA KBD_OUT_BUF   ; Read Output Buffer
.390e1d					DO_CMD_F4_AGAIN
.390e1d	20 72 0e	jsr $390e72	                JSR Poll_Inbuf ;
.390e20	a9 f4		lda #$f4					        LDA #$F4			; Enable the Keyboard
.390e22	8f 60 10 af	sta $af1060					        STA KBD_DATA_BUF
.390e26	20 7d 0e	jsr $390e7d	                JSR Poll_Outbuf ;
.390e29	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		; Clear the Output buffer
.390e2d	c9 fa		cmp #$fa	                CMP #$FA
.390e2f	d0 ec		bne $390e1d	                BNE DO_CMD_F4_AGAIN
.390e31	20 88 0e	jsr $390e88	                JSR INIT_MOUSE
.390e34	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0  ; Read the Pending Register &
.390e38	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.390e3a	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0  ; Writing it back will clear the Active Bit
.390e3e	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1  ; Read the Pending Register &
.390e42	29 01		and #$01	                AND #FNX1_INT00_KBD
.390e44	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1  ; Writing it back will clear the Active Bit
.390e48	af 4d 01 00	lda $00014d	                LDA @lINT_MASK_REG1
.390e4c	29 fe		and #$fe	                AND #~FNX1_INT00_KBD
.390e4e	8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.390e52	af 4c 01 00	lda $00014c	                LDA @lINT_MASK_REG0
.390e56	29 7f		and #$7f	                AND #~FNX0_INT07_MOUSE
.390e58	8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.390e5c	a2 55 16	ldx #$1655	                LDX #<>Success_kb_init
.390e5f	38		sec		                SEC
.390e60	b0 03		bcs $390e65	                BCS InitSuccess
.390e62	a2 67 16	ldx #$1667	initkb_loop_out LDX #<>Failed_kb_init
.390e65	22 2e 06 39	jsl $39062e	InitSuccess     JSL IPRINT       ; print Message
.390e69	c2 20		rep #$20	                REP #$20        ; set A long
.390e6b	c2 10		rep #$10	                REP #$10        ; set X long
.390e6d	fa		plx		                PLX
.390e6e	68		pla		                PLA
.390e6f	28		plp						        PLP
.390e70	2b		pld						        PLD
.390e71	6b		rtl		                RTL
.390e72					Poll_Inbuf
.390e72	af 64 10 af	lda $af1064	                LDA STATUS_PORT		; Load Status Byte
.390e76	29 02		and #$02					        AND	#<INPT_BUF_FULL	; Test bit $02 (if 0, Empty)
.390e78	c9 02		cmp #$02					        CMP #<INPT_BUF_FULL
.390e7a	f0 f6		beq $390e72					        BEQ Poll_Inbuf
.390e7c	60		rts		                RTS
.390e7d					Poll_Outbuf
.390e7d	af 64 10 af	lda $af1064	                LDA STATUS_PORT
.390e81	29 01		and #$01	                AND #OUT_BUF_FULL ; Test bit $01 (if 1, Full)
.390e83	c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.390e85	d0 f6		bne $390e7d	                BNE Poll_Outbuf
.390e87	60		rts		                RTS
.390e88					INIT_MOUSE
.390e88	20 72 0e	jsr $390e72	                JSR Poll_Inbuf
.390e8b	a9 a8		lda #$a8	                LDA #$A8          ; Enable the second PS2 Channel
.390e8d	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390e91					DO_CMD_A9_AGAIN
.390e91	20 72 0e	jsr $390e72	                JSR Poll_Inbuf
.390e94	a9 a9		lda #$a9	                LDA #$A9          ; Tests second PS2 Channel
.390e96	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390e9a	20 7d 0e	jsr $390e7d	                JSR Poll_Outbuf ;
.390e9d	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		; Clear the Output buffer
.390ea1	c9 00		cmp #$00	                CMP #$00
.390ea3	d0 ec		bne $390e91	                BNE DO_CMD_A9_AGAIN
.390ea5	20 72 0e	jsr $390e72	                JSR Poll_Inbuf
.390ea8	a9 20		lda #$20	                LDA #$20
.390eaa	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390eae	20 7d 0e	jsr $390e7d	                JSR Poll_Outbuf ;
.390eb1	af 60 10 af	lda $af1060	                LDA KBD_OUT_BUF
.390eb5	09 02		ora #$02	                ORA #$02
.390eb7	48		pha		                PHA
.390eb8	20 72 0e	jsr $390e72	                JSR Poll_Inbuf
.390ebb	a9 60		lda #$60	                LDA #$60
.390ebd	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390ec1	20 72 0e	jsr $390e72	                JSR Poll_Inbuf ;
.390ec4	68		pla		                PLA
.390ec5	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.390ec9	a9 f6		lda #$f6	                LDA #$F6        ;Tell the mouse to use default settings
.390ecb	20 ee 0e	jsr $390eee	                JSR MOUSE_WRITE
.390ece	20 01 0f	jsr $390f01	                JSR MOUSE_READ
.390ed1	a9 e8		lda #$e8	                LDA #$E8
.390ed3	20 ee 0e	jsr $390eee	                JSR MOUSE_WRITE
.390ed6	20 01 0f	jsr $390f01	                JSR MOUSE_READ
.390ed9	a9 00		lda #$00	                LDA #$00
.390edb	20 ee 0e	jsr $390eee	                JSR MOUSE_WRITE
.390ede	20 01 0f	jsr $390f01	                JSR MOUSE_READ
.390ee1	a9 f4		lda #$f4	                LDA #$F4        ; Enable the Mouse
.390ee3	20 ee 0e	jsr $390eee	                JSR MOUSE_WRITE
.390ee6	20 01 0f	jsr $390f01	                JSR MOUSE_READ
.390ee9	a9 00		lda #$00	                LDA #$00
.390eeb	85 e0		sta $e0		                STA MOUSE_PTR
.390eed	60		rts		                RTS
.390eee					MOUSE_WRITE
.390eee	48		pha		                PHA
.390eef	20 72 0e	jsr $390e72	                JSR Poll_Inbuf
.390ef2	a9 d4		lda #$d4	                LDA #$D4
.390ef4	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390ef8	20 72 0e	jsr $390e72	                JSR Poll_Inbuf
.390efb	68		pla		                PLA
.390efc	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.390f00	60		rts		                RTS
.390f01					MOUSE_READ
.390f01	20 7d 0e	jsr $390e7d	                JSR Poll_Outbuf ;
.390f04	af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF
.390f08	60		rts		                RTS
.390f09	48		pha		INITRTC         PHA
.390f0a	e2 20		sep #$20	                SEP #$20        ; set A short
.390f0c	af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL
.390f10	00		brk #		                BRK
.390f11	c2 20		rep #$20	                REP #$20        ; set A long
.390f13	68		pla		                PLA
.390f14	6b		rtl		                RTL
.390f15					ITESTSID
.390f15	a9 0f 00	lda #$000f	                LDA #$0F
.390f18	8f 18 e4 af	sta $afe418	                STA SID0_MODE_VOL
.390f1c	a9 be 00	lda #$00be	                LDA #$BE
.390f1f	8f 05 e4 af	sta $afe405	                STA SID0_V1_ATCK_DECY
.390f23	a9 f8 00	lda #$00f8	                LDA #$F8
.390f26	8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.390f2a	a9 11 00	lda #$0011	                LDA #$11
.390f2d	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.390f31	a9 25 00	lda #$0025	                LDA #$25
.390f34	8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.390f38	a9 11 00	lda #$0011	                LDA #$11
.390f3b	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL
.390f3f	a9 08 00	lda #$0008	                LDA #$08
.390f42	8f 03 e4 af	sta $afe403	                STA SID0_V1_PW_HI   ;G1
.390f46	a9 00 00	lda #$0000	                LDA #$00
.390f49	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.390f4d	a9 c6 00	lda #$00c6	                LDA #$C6
.390f50	8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.390f54	a9 08 00	lda #$0008	                LDA #$08
.390f57	8f 0a e4 af	sta $afe40a	                STA SID0_V2_PW_HI   ;G1
.390f5b	a9 00 00	lda #$0000	                LDA #$00
.390f5e	8f 08 e4 af	sta $afe408	                STA SID0_V2_FREQ_HI
.390f62	a9 08 00	lda #$0008	                LDA #$08
.390f65	8f 0c e4 af	sta $afe40c	                STA SID0_V2_ATCK_DECY
.390f69	a9 c6 00	lda #$00c6	                LDA #$C6
.390f6c	8f 0d e4 af	sta $afe40d	                STA SID0_V2_SSTN_RLSE
.390f70	a9 08 00	lda #$0008	                LDA #$08
.390f73	8f 11 e4 af	sta $afe411	                STA SID0_V3_PW_HI   ;G1
.390f77	a9 00 00	lda #$0000	                LDA #$00
.390f7a	8f 0f e4 af	sta $afe40f	                STA SID0_V3_FREQ_HI
.390f7e	a9 08 00	lda #$0008	                LDA #$08
.390f81	8f 13 e4 af	sta $afe413	                STA SID0_V3_ATCK_DECY
.390f85	a9 c6 00	lda #$00c6	                LDA #$C6
.390f88	8f 14 e4 af	sta $afe414	                STA SID0_V3_SSTN_RLSE
.390f8c	a9 36 00	lda #$0036	                LDA #$36              ;Left Side (Rev A of Board)
.390f8f	8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.390f93	a9 01 00	lda #$0001	                LDA #$01
.390f96	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI   ;G1
.390f9a	a9 00 00	lda #$0000	                LDA #$00              ;Left Side (Rev A of Board)
.390f9d	8f 02 e4 af	sta $afe402	                STA SID0_V1_PW_LO
.390fa1	a9 08 00	lda #$0008	                LDA #$08
.390fa4	8f 03 e4 af	sta $afe403	                STA SID0_V1_PW_HI   ;G1
.390fa8	a9 08 00	lda #$0008	                LDA #$08
.390fab	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL    ; Reset
.390faf	a9 0c 00	lda #$000c	                LDA #$0C
.390fb2	8f 07 e4 af	sta $afe407	                STA SID0_V2_FREQ_LO
.390fb6	a9 04 00	lda #$0004	                LDA #$04
.390fb9	8f 08 e4 af	sta $afe408	                STA SID0_V2_FREQ_HI   ;B1
.390fbd	a9 00 00	lda #$0000	                LDA #$00              ;Left Side (Rev A of Board)
.390fc0	8f 09 e4 af	sta $afe409	                STA SID0_V2_PW_LO
.390fc4	a9 08 00	lda #$0008	                LDA #$08
.390fc7	8f 0a e4 af	sta $afe40a	                STA SID0_V2_PW_HI   ;G1
.390fcb	a9 08 00	lda #$0008	                LDA #$08
.390fce	8f 0b e4 af	sta $afe40b	                STA SID0_V2_CTRL    ; Reset
.390fd2	a9 00 00	lda #$0000	                LDA #$00
.390fd5	8f 0e e4 af	sta $afe40e	                STA SID0_V3_FREQ_LO
.390fd9	a9 08 00	lda #$0008	                LDA #$08
.390fdc	8f 0f e4 af	sta $afe40f	                STA SID0_V3_FREQ_HI   ;D
.390fe0	a9 00 00	lda #$0000	                LDA #$00              ;Left Side (Rev A of Board)
.390fe3	8f 10 e4 af	sta $afe410	                STA SID0_V3_PW_LO
.390fe7	a9 08 00	lda #$0008	                LDA #$08
.390fea	8f 11 e4 af	sta $afe411	                STA SID0_V3_PW_HI   ;G1
.390fee	a9 08 00	lda #$0008	                LDA #$08
.390ff1	8f 12 e4 af	sta $afe412	                STA SID0_V3_CTRL    ; Reset
.390ff5	a9 10 00	lda #$0010	                LDA #$10
.390ff8	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL    ; Triangle
.390ffc	8f 0b e4 af	sta $afe40b	                STA SID0_V2_CTRL    ; Triangle
.391000	8f 12 e4 af	sta $afe412	                STA SID0_V3_CTRL    ; Triangle
.391004	6b		rtl		                RTL
.391005	48		pha		IINITCODEC      PHA
.391006	c2 20		rep #$20	                REP #$20        ; set A long
.391008	a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R13 - Turn On Headphones
.39100b	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39100f	a9 01 00	lda #$0001	                LDA #$0001
.391012	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391016	20 95 10	jsr $391095	                JSR CODEC_TRF_FINISHED
.391019	a9 0f 2a	lda #$2a0f	                LDA #%0010101000001111       ;R21 - Enable All the Analog In
.39101c	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391020	a9 01 00	lda #$0001	                LDA #$0001
.391023	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391027	20 95 10	jsr $391095	                JSR CODEC_TRF_FINISHED
.39102a	a9 01 23	lda #$2301	                LDA #%0010001100000001      ;R17 - Enable All the Analog In
.39102d	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391031	a9 01 00	lda #$0001	                LDA #$0001
.391034	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391038	20 95 10	jsr $391095	                JSR CODEC_TRF_FINISHED
.39103b	a9 07 2c	lda #$2c07	                LDA #%0010110000000111      ;R22 - Enable all Analog Out
.39103e	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391042	a9 01 00	lda #$0001	                LDA #$0001
.391045	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391049	20 95 10	jsr $391095	                JSR CODEC_TRF_FINISHED
.39104c	a9 02 14	lda #$1402	                LDA #%0001010000000010      ;R10 - DAC Interface Control
.39104f	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391053	a9 01 00	lda #$0001	                LDA #$0001
.391056	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.39105a	20 95 10	jsr $391095	                JSR CODEC_TRF_FINISHED
.39105d	a9 02 16	lda #$1602	                LDA #%0001011000000010      ;R11 - ADC Interface Control
.391060	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391064	a9 01 00	lda #$0001	                LDA #$0001
.391067	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.39106b	20 95 10	jsr $391095	                JSR CODEC_TRF_FINISHED
.39106e	a9 d5 19	lda #$19d5	                LDA #%0001100111010101      ;R12 - Master Mode Control
.391071	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391075	a9 01 00	lda #$0001	                LDA #$0001
.391078	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.39107c	20 95 10	jsr $391095	                JSR CODEC_TRF_FINISHED
.39107f	68		pla		                PLA
.391080	6b		rtl		                RTL
.391081					IRESETCODEC
.391081	c2 20		rep #$20	                REP #$20        ; set A long
.391083	a9 00 2e	lda #$2e00	                LDA #$2E00      ;R22 - Enable all Analog Out
.391086	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39108a	a9 01 00	lda #$0001	                LDA #$0001
.39108d	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391091	20 95 10	jsr $391095	                JSR CODEC_TRF_FINISHED
.391094	6b		rtl		                RTL
.391095					CODEC_TRF_FINISHED
.391095	e2 20		sep #$20	                SEP #$20        ; set A short
.391097	af 02 e9 af	lda $afe902	CODEC_LOOP      LDA CODEC_WR_CTRL
.39109b	29 01		and #$01	                AND #$01
.39109d	c9 01		cmp #$01	                CMP #$01
.39109f	f0 f6		beq $391097	                BEQ CODEC_LOOP
.3910a1	c2 20		rep #$20	                REP #$20        ; set A long
.3910a3	60		rts		                RTS
.3910a4					IBM_FILL_SCREEN
.3910a4	c2 30		rep #$30	                REP #$30        ; set A&X long
.3910a6	a9 00 00	lda #$0000	                LDA #$0000
.3910a9	a2 00 00	ldx #$0000	                LDX #$0000
.3910ac					BM_FILL_SCREEN_LOOPY
.3910ac	a0 00 00	ldy #$0000	                LDY #$0000
.3910af	e2 20		sep #$20	                SEP #$20        ; set A short
.3910b1					BM_FILL_SCREEN_LOOPX
.3910b1	97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.3910b3	c8		iny		                INY
.3910b4	c4 40		cpy $40		                CPY BM_CLEAR_SCRN_X              ; Transfer the First line
.3910b6	d0 f9		bne $3910b1	                BNE BM_FILL_SCREEN_LOOPX
.3910b8	20 c3 10	jsr $3910c3	                JSR BM_FILL_COMPUTE_Y_DST
.3910bb	e8		inx		                INX
.3910bc	e4 42		cpx $42		                CPX BM_CLEAR_SCRN_Y
.3910be	d0 ec		bne $3910ac	                BNE BM_FILL_SCREEN_LOOPY
.3910c0	c2 30		rep #$30	                REP #$30        ; set A&X long
.3910c2	6b		rtl		                RTL
.3910c3					BM_FILL_COMPUTE_Y_DST
.3910c3	c2 20		rep #$20	                REP #$20        ; set A long
.3910c5	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR        ; Right now it is set @ $020000 (128K) + File Size
.3910c7	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3910cb	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2      ; Right now it is set @ $020000 (128K)
.3910cd	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.3910d1	a9 80 02	lda #$0280	                LDA #$280        ; Right now it is set @ $020000 (128K) + File Size
.3910d4	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.3910d8	a9 00 00	lda #$0000	                LDA #$0000
.3910db	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.3910df	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.3910e3	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.3910e5	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.3910e9	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.3910eb	a9 00 00	lda #$0000	                LDA #$0000
.3910ee	60		rts		                RTS
.3910ef					IBMP_PARSER
.3910ef	c2 30		rep #$30	                REP #$30        ; set A&X long
.3910f1	a0 00 00	ldy #$0000	                LDY #$0000
.3910f4	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y
.3910f6	c9 42 4d	cmp #$4d42	                CMP #$4D42
.3910f9	f0 03		beq $3910fe	                BEQ IBMP_PARSER_CONT
.3910fb	82 04 01	brl $391202	                BRL BMP_PARSER_END_WITH_ERROR
.3910fe					IBMP_PARSER_CONT
.3910fe	a0 02 00	ldy #$0002	                LDY #$0002
.391101	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size Low Short
.391103	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.391107	a0 04 00	ldy #$0004	                LDY #$0004
.39110a	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size High Short
.39110c	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.391110	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Store -1 in Adder (B)
.391113	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.391117	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.39111b	18		clc		                CLC
.39111c	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.391120	85 50		sta $50		                STA BMP_FILE_SIZE
.391122	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.391126	85 52		sta $52		                STA BMP_FILE_SIZE+2
.391128	a0 12 00	ldy #$0012	                LDY #$0012
.39112b	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.39112d	85 40		sta $40		                STA BMP_X_SIZE
.39112f	a0 16 00	ldy #$0016	                LDY #$0016
.391132	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.391134	85 42		sta $42		                STA BMP_Y_SIZE
.391136	a0 2e 00	ldy #$002e	                LDY #$002E
.391139	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.39113b	0a		asl a		                ASL A; Multiply by 2
.39113c	0a		asl a		                ASL A; Multiply by 2
.39113d	85 4c		sta $4c		                STA BMP_COLOR_PALET         ;
.39113f	e0 00 00	cpx #$0000	                CPX #$0000
.391142	d0 05		bne $391149	                BNE BMP_LUT1_PICK
.391144	20 0a 12	jsr $39120a	                JSR BMP_PARSER_UPDATE_LUT0   ; Go Upload the LUT0
.391147	80 08		bra $391151	                BRA DONE_TRANSFER_LUT;
.391149					  BMP_LUT1_PICK
.391149	e0 01 00	cpx #$0001	                CPX #$0001
.39114c	d0 03		bne $391151	                BNE BMP_LUT2_PICK
.39114e	20 3a 12	jsr $39123a	                JSR BMP_PARSER_UPDATE_LUT1   ; Go Upload the LUT1
.391151					  BMP_LUT2_PICK
.391151					  DONE_TRANSFER_LUT
.391151	a5 56		lda $56		                LDA BMP_POSITION_Y
.391153	8f 00 01 00	sta $000100	                STA @lUNSIGNED_MULT_A_LO
.391157	a5 4e		lda $4e		                LDA SCRN_X_STRIDE
.391159	8f 02 01 00	sta $000102	                STA @lUNSIGNED_MULT_B_LO
.39115d	af 04 01 00	lda $000104	                LDA @lUNSIGNED_MULT_AL_LO
.391161	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.391165	af 06 01 00	lda $000106	                LDA @lUNSIGNED_MULT_AL_LO+2
.391169	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.39116d	a5 54		lda $54		                LDA BMP_POSITION_X
.39116f	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Put the X Position Adder (B)
.391173	a9 00 00	lda #$0000	                LDA #$0000
.391176	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.39117a	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in TEMP
.39117e	85 f0		sta $f0		                STA USER_TEMP
.391180	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in TEMP
.391184	85 f2		sta $f2		                STA USER_TEMP+2
.391186	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.391188	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.39118c	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.39118e	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.391192	a5 f0		lda $f0		                LDA USER_TEMP
.391194	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store in 32Bit Adder (B)
.391198	a5 f2		lda $f2		                LDA USER_TEMP+2
.39119a	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in 32Bit Adder (B)
.39119e	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in BMP_PRSE_DST_PTR
.3911a2	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.3911a4	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in BMP_PRSE_DST_PTR
.3911a8	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.3911aa	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K)
.3911ac	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3911b0	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2        ; Right now it is set @ $020000 (128K)
.3911b2	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.3911b6	a5 50		lda $50		                LDA BMP_FILE_SIZE
.3911b8	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.3911bc	a5 52		lda $52		                LDA BMP_FILE_SIZE+2
.3911be	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.3911c2	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.3911c6	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.3911c8	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.3911cc	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.3911ce	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.3911d0	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3911d4	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.3911d6	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.3911da	18		clc		                CLC
.3911db	a5 40		lda $40		                LDA BMP_X_SIZE              ; Load The Size in X of the image and Make it negative
.3911dd	49 ff ff	eor #$ffff	                EOR #$FFFF                  ; Inverse all bit
.3911e0	69 01 00	adc #$0001	                ADC #$0001                  ; Add 0 ()
.3911e3	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store the Results in reg B of ADDER32
.3911e7	a9 ff ff	lda #$ffff	                LDA #$FFFF
.3911ea	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in the Reminder of the 32Bits B Register
.3911ee	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.3911f2	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.3911f4	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.3911f8	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.3911fa	20 6a 12	jsr $39126a	                JSR BMP_PARSER_DMA_SHIT_OUT  ; We are going to start with the slow method
.3911fd	a2 a3 16	ldx #$16a3	                LDX #<>bmp_parser_msg0
.391200	80 03		bra $391205	                BRA BMP_PARSER_END_NO_ERROR
.391202					BMP_PARSER_END_WITH_ERROR
.391202	a2 8f 16	ldx #$168f	                LDX #<>bmp_parser_err0
.391205					BMP_PARSER_END_NO_ERROR
.391205	22 2e 06 39	jsl $39062e	                JSL IPRINT       ; print the first line
.391209	6b		rtl		                RTL
.39120a					BMP_PARSER_UPDATE_LUT0
.39120a	38		sec		                SEC
.39120b	a0 7a 00	ldy #$007a	                LDY #$007A
.39120e	a2 00 00	ldx #$0000	                LDX #$0000
.391211	e2 20		sep #$20	                SEP #$20        ; set A short
.391213					BMP_PARSER_UPDATE_LOOP
.391213	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.391215	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR+0, X      ; The look-up Table point to a pixel Blue
.391219	c8		iny		                INY
.39121a	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.39121c	9f 01 20 af	sta $af2001,x	                STA @lGRPH_LUT0_PTR+1, X      ; The look-up Table point to a pixel Blue
.391220	c8		iny		                INY
.391221	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.391223	9f 02 20 af	sta $af2002,x	                STA @lGRPH_LUT0_PTR+2, X      ; The look-up Table point to a pixel Blue
.391227	c8		iny		                INY
.391228	a9 80		lda #$80	                LDA #$80
.39122a	9f 03 20 af	sta $af2003,x	                STA @lGRPH_LUT0_PTR+3, X      ; The look-up Table point to a pixel Blue
.39122e	c8		iny		                INY ; For the Alpha Value, nobody cares
.39122f	e8		inx		                INX
.391230	e8		inx		                INX
.391231	e8		inx		                INX
.391232	e8		inx		                INX
.391233	e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.391235	d0 dc		bne $391213	                BNE BMP_PARSER_UPDATE_LOOP
.391237	c2 20		rep #$20	                REP #$20        ; set A long
.391239	60		rts		                RTS
.39123a					BMP_PARSER_UPDATE_LUT1
.39123a	38		sec		                SEC
.39123b	a0 36 00	ldy #$0036	                LDY #$0036
.39123e	a2 00 00	ldx #$0000	                LDX #$0000
.391241	e2 20		sep #$20	                SEP #$20        ; set A short
.391243					PALETTE_LUT1_LOOP
.391243	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.391245	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR+0, X      ; The look-up Table point to a pixel Blue
.391249	c8		iny		                INY
.39124a	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.39124c	9f 01 24 af	sta $af2401,x	                STA @lGRPH_LUT1_PTR+1, X      ; The look-up Table point to a pixel Blue
.391250	c8		iny		                INY
.391251	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.391253	9f 02 24 af	sta $af2402,x	                STA @lGRPH_LUT1_PTR+2, X      ; The look-up Table point to a pixel Blue
.391257	c8		iny		                INY
.391258	a9 80		lda #$80	                LDA #$80
.39125a	9f 03 24 af	sta $af2403,x	                STA @lGRPH_LUT1_PTR+3, X      ; The look-up Table point to a pixel Blue
.39125e	c8		iny		                INY ; For the Alpha Value, nobody cares
.39125f	e8		inx		                INX
.391260	e8		inx		                INX
.391261	e8		inx		                INX
.391262	e8		inx		                INX
.391263	e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.391265	d0 dc		bne $391243	                BNE PALETTE_LUT1_LOOP
.391267	c2 20		rep #$20	                REP #$20        ; set A long
.391269	60		rts		                RTS
.39126a					BMP_PARSER_DMA_SHIT_OUT
.39126a	a2 00 00	ldx #$0000	                LDX #$0000
.39126d					BMP_PARSER_LOOPY
.39126d	a0 00 00	ldy #$0000	                LDY #$0000
.391270	e2 20		sep #$20	                SEP #$20        ; set A short
.391272					BMP_PARSER_LOOPX
.391272	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Load First Pixel Y (will be linear)
.391274	97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.391276	c8		iny		                INY
.391277	c4 40		cpy $40		                CPY BMP_X_SIZE              ; Transfer the First line
.391279	d0 f7		bne $391272	                BNE BMP_PARSER_LOOPX
.39127b	20 87 12	jsr $391287	                JSR BMP_PARSER_COMPUTE_Y_SRC
.39127e	20 a2 12	jsr $3912a2	                JSR BMP_PARSER_COMPUTE_Y_DST
.391281	e8		inx		                INX
.391282	e4 42		cpx $42		                CPX BMP_Y_SIZE
.391284	d0 e7		bne $39126d	                BNE BMP_PARSER_LOOPY
.391286	60		rts		                RTS
.391287					BMP_PARSER_COMPUTE_Y_SRC
.391287	c2 20		rep #$20	                REP #$20        ; set A long
.391289	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.39128b	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.39128f	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.391291	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.391295	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.391299	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.39129b	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.39129f	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.3912a1	60		rts		                RTS
.3912a2					BMP_PARSER_COMPUTE_Y_DST
.3912a2	c2 20		rep #$20	                REP #$20        ; set A long
.3912a4	18		clc		                CLC
.3912a5	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.3912a7	65 4e		adc $4e		                ADC SCRN_X_STRIDE        ; In Normal Circumstances, it is 640
.3912a9	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.3912ab	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.3912ad	69 00 00	adc #$0000	                ADC #$0000
.3912b0	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.3912b2	60		rts		                RTS
.3912b3	ea		nop		ILOOP           NOP
.3912b4	ea		nop		                NOP
.3912b5	ea		nop		                NOP
.3912b6	ea		nop		                NOP
.3912b7	ea		nop		                NOP
.3912b8	ea		nop		                NOP
.3912b9	ea		nop		                NOP
.3912ba	ea		nop		                NOP
.3912bb	ea		nop		                NOP
.3912bc	ea		nop		                NOP
.3912bd	6b		rtl		                RTL
.3912be	22 b3 12 39	jsl $3912b3	ILOOP_1         JSL ILOOP
.3912c2	22 b3 12 39	jsl $3912b3	                JSL ILOOP
.3912c6	22 b3 12 39	jsl $3912b3	                JSL ILOOP
.3912ca	22 b3 12 39	jsl $3912b3	                JSL ILOOP
.3912ce	22 b3 12 39	jsl $3912b3	                JSL ILOOP
.3912d2	22 b3 12 39	jsl $3912b3	                JSL ILOOP
.3912d6	22 b3 12 39	jsl $3912b3	                JSL ILOOP
.3912da	22 b3 12 39	jsl $3912b3	                JSL ILOOP
.3912de	22 b3 12 39	jsl $3912b3	                JSL ILOOP
.3912e2	22 b3 12 39	jsl $3912b3	                JSL ILOOP
.3912e6	6b		rtl		                RTL
.3912e7	22 be 12 39	jsl $3912be	ILOOP_1MS       JSL ILOOP_1
.3912eb	6b		rtl		                RTL
.3912ec	e0 00 00	cpx #$0000	ILOOP_MS        CPX #0
.3912ef	f0 07		beq $3912f8	                BEQ LOOP_MS_END
.3912f1	22 e7 12 39	jsl $3912e7	                JSL ILOOP_1MS
.3912f5	ca		dex		                DEX
.3912f6	80 f4		bra $3912ec	                BRA ILOOP_MS
.3912f8	6b		rtl		LOOP_MS_END     RTL
.3912f9					SHOW_CREDITS
.3912f9	48		pha		                PHA
.3912fa	da		phx		                PHX
.3912fb	5a		phy		                PHY
.3912fc	08		php		                PHP
.3912fd	e2 20		sep #$20	                SEP #$20        ; set A short
.3912ff	c2 10		rep #$10	                REP #$10        ; set X long
.391301	af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Disable the cursor
.391305	29 fe		and #$fe	                AND #~Vky_Cursor_Enable
.391307	8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.39130b	a2 00 00	ldx #$0000	                LDX #0
.39130e	bf 00 00 3b	lda $3b0000,x	credit_loop     LDA @lCREDITS_TEXT,X            ; Copy a byte of text
.391312	9f 00 a0 af	sta $afa000,x	                STA @lCS_TEXT_MEM_PTR,X
.391316	bf 00 20 3b	lda $3b2000,x	                LDA @lCREDITS_COLOR,X           ; Copy a byte of color
.39131a	9f 00 c0 af	sta $afc000,x	                STA @lCS_COLOR_MEM_PTR,X
.39131e	e8		inx		                INX
.39131f	e0 00 20	cpx #$2000	                CPX #128 * 64
.391322	d0 ea		bne $39130e	                BNE credit_loop
.391324	22 07 06 39	jsl $390607	                JSL IGETCHW                     ; Wait for a keypress
.391328	22 3d 09 39	jsl $39093d	                JSL ICLRSCREEN                  ; Then clear the screen and return
.39132c	22 a9 07 39	jsl $3907a9	                JSL ICSRHOME                    ; Move cursor to the home position
.391330	af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Enable the cursor
.391334	09 01		ora #$01	                ORA #Vky_Cursor_Enable
.391336	8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.39133a	28		plp		                PLP
.39133b	7a		ply		                PLY
.39133c	fa		plx		                PLX
.39133d	68		pla		                PLA
.39133e	6b		rtl		                RTL
.39133f	00		brk #		IRESTORE        BRK ; Warm boot routine
.391340	00		brk #		ISCINIT         BRK ;
.391341	00		brk #		IIOINIT         BRK ;
.391342	00		brk #		ISETLFS         BRK ; Obsolete (done in OPEN)
.391343	00		brk #		ISETNAM         BRK ; Obsolete (done in OPEN)
.391344	00		brk #		IOPEN           BRK ; Open a channel for reading and/or writing. Use SETLFS and SETNAM to set the channels and filename first.
.391345	00		brk #		ICLOSE          BRK ; Close a channel
.391346	00		brk #		IGETB           BRK ; Get a byte from input channel. Return 0 if no input. Carry is set if no input.
.391347	00		brk #		IGETCH          BRK ; Get a character from the input channel. A=0 and Carry=1 if no data is wating
.391348	00		brk #		IGETS           BRK ; Get a string from the input channel. NULL terminates
.391349	00		brk #		IGETLINE        BRK ; Get a line of text from input channel. CR or NULL terminates.
.39134a	00		brk #		IGETFIELD       BRK ; Get a field from the input channel. Value in A, CR, or NULL terminates
.39134b	00		brk #		ITRIM           BRK ; Removes spaces at beginning and end of string.
.39134c	00		brk #		IPRINTC         BRK ; Print character to screen. Handles terminal commands
.39134d	00		brk #		IPRINTS         BRK ; Print string to screen. Handles terminal commands
.39134e	00		brk #		IPRINTF         BRK ; Print a float value
.39134f	00		brk #		IPRINTI         BRK ; Prints integer value in TEMP
.391350	00		brk #		IPRINTAI        BRK ; Prints integer value in A
.391351	00		brk #		IPUSHKEY        BRK ;
.391352	00		brk #		IPUSHKEYS       BRK ;
.391353	00		brk #		ISCRREADLINE    BRK ; Loads the MCMDADDR/BCMDADDR variable with the address of the current line on the screen. This is called when the RETURN key is pressed and is the first step in processing an immediate mode command.
.391354	00		brk #		ISCRGETWORD     BRK ; Read a current word on the screen. A word ends with a space, punctuation (except _), or any control character (value < 32). Loads the address into CMPTEXT_VAL and length into CMPTEXT_LEN variables.
.391355					KERNEL_DATA
>391355	20 20 20 20 0b 0c 0b 0c		greet_msg       .text $20, $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, " FFFFFFF MMMMMMMM XX    XXX " ,$0D
>39135d	0b 0c 0b 0c 0b 0c 20 46 46 46 46 46 46 46 20 4d
>39136d	4d 4d 4d 4d 4d 4d 4d 20 58 58 20 20 20 20 58 58
>39137d	58 20 0d
>391380	20 20 20 0b 0c 0b 0c 0b		                .text $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM   XX XXX   ",$0D
>391388	0c 0b 0c 0b 0c 20 46 46 20 20 20 20 20 20 4d 4d
>391398	20 4d 4d 20 4d 4d 20 20 20 58 58 20 58 58 58 20
>3913a8	20 20 0d
>3913ab	20 20 0b 0c 0b 0c 0b 0c		                .text $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FFFFF   MM MM MM    XXX      ",$0D
>3913b3	0b 0c 0b 0c 20 46 46 46 46 46 20 20 20 4d 4d 20
>3913c3	4d 4d 20 4d 4d 20 20 20 20 58 58 58 20 20 20 20
>3913d3	20 20 0d
>3913d6	20 0b 0c 0b 0c 0b 0c 0b		                .text $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM  XXX  XX     ",$0D
>3913de	0c 0b 0c 20 46 46 20 20 20 20 20 20 4d 4d 20 4d
>3913ee	4d 20 4d 4d 20 20 58 58 58 20 20 58 58 20 20 20
>3913fe	20 20 0d
>391401	0b 0c 0b 0c 0b 0c 0b 0c		                .text $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM XXX     XX    ",$0D
>391409	0b 0c 20 46 46 20 20 20 20 20 20 4d 4d 20 4d 4d
>391419	20 4d 4d 20 58 58 58 20 20 20 20 20 58 58 20 20
>391429	20 20 0d
>39142c	0d 43 32 35 36 20 46 4f		                .text $0D, "C256 FOENIX FMX -- 3,670,016 Bytes Free", $0D
>391434	45 4e 49 58 20 46 4d 58 20 2d 2d 20 33 2c 36 37
>391444	30 2c 30 31 36 20 42 79 74 65 73 20 46 72 65 65
>391454	0d
>391455	77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com - Kernel Date: "
>39145d	66 6f 65 6e 69 78 2e 63 6f 6d 20 2d 20 4b 65 72
>39146d	6e 65 6c 20 44 61 74 65 3a 20

;******  Processing file: src\version.asm

>391477	41 70 72 69 6c 20 30 38		.text "April 08, 2020"
>39147f	2c 20 32 30 32 30

;******  Return to file: src\kernel.asm

>391485	0d 00				                .text $0D,$00
.391487					old_pc_style_stat
>391487	1d 1d 1d 1d 1d 1d 8d 8d		greet_clr_line1 .text $1D, $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>39148f	4d 4d 2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd
>39149f	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3914af	fd fd
>3914b1	1d 1d 1d 1d 1d 8d 8d 4d		greet_clr_line2 .text $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>3914b9	4d 2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd
>3914c9	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3914d9	fd fd
>3914db	1d 1d 1d 1d 8d 8d 4d 4d		greet_clr_line3 .text $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>3914e3	2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd fd
>3914f3	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>391503	fd fd
>391505	1d 1d 1d 8d 8d 4d 4d 2d		greet_clr_line4 .text $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>39150d	2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd fd fd
>39151d	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>39152d	fd fd
>39152f	1d 1d 8d 8d 4d 4d 2d 2d		greet_clr_line5 .text $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>391537	5d 5d fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>391547	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>391557	fd fd
>391559	00 00 00 ff			fg_color_lut	  .text $00, $00, $00, $FF
>39155d	00 00 80 ff			                .text $00, $00, $80, $FF
>391561	00 80 00 ff			                .text $00, $80, $00, $FF
>391565	80 00 00 ff			                .text $80, $00, $00, $FF
>391569	00 80 80 ff			                .text $00, $80, $80, $FF
>39156d	80 80 00 ff			                .text $80, $80, $00, $FF
>391571	80 00 80 ff			                .text $80, $00, $80, $FF
>391575	80 80 80 ff			                .text $80, $80, $80, $FF
>391579	00 45 ff ff			                .text $00, $45, $FF, $FF
>39157d	13 45 8b ff			                .text $13, $45, $8B, $FF
>391581	00 00 20 ff			                .text $00, $00, $20, $FF
>391585	00 20 00 ff			                .text $00, $20, $00, $FF
>391589	20 00 00 ff			                .text $20, $00, $00, $FF
>39158d	20 20 20 ff			                .text $20, $20, $20, $FF
>391591	40 40 40 ff			                .text $40, $40, $40, $FF
>391595	ff ff ff ff			                .text $FF, $FF, $FF, $FF
>391599	00 00 00 ff			bg_color_lut	  .text $00, $00, $00, $FF
>39159d	00 00 80 ff			                .text $00, $00, $80, $FF
>3915a1	00 80 00 ff			                .text $00, $80, $00, $FF
>3915a5	80 00 00 ff			                .text $80, $00, $00, $FF
>3915a9	00 20 20 ff			                .text $00, $20, $20, $FF
>3915ad	20 20 00 ff			                .text $20, $20, $00, $FF
>3915b1	20 00 20 ff			                .text $20, $00, $20, $FF
>3915b5	20 20 20 ff			                .text $20, $20, $20, $FF
>3915b9	1e 69 d2 ff			                .text $1E, $69, $D2, $FF
>3915bd	13 45 8b ff			                .text $13, $45, $8B, $FF
>3915c1	00 00 20 ff			                .text $00, $00, $20, $FF
>3915c5	00 20 00 ff			                .text $00, $20, $00, $FF
>3915c9	40 00 00 ff			                .text $40, $00, $00, $FF
>3915cd	10 10 10 ff			                .text $10, $10, $10, $FF
>3915d1	40 40 40 ff			                .text $40, $40, $40, $FF
>3915d5	ff ff ff ff			                .text $FF, $FF, $FF, $FF
>3915d9	43 6d 64 20 30 78 41 41		pass_tst0xAAmsg .text "Cmd 0xAA Test passed...", $0D, $00
>3915e1	20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>3915f1	00
>3915f2	43 6d 64 20 30 78 41 42		pass_tst0xABmsg .text "Cmd 0xAB Test passed...", $0D, $00
>3915fa	20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>39160a	00
>39160b	43 6d 64 20 30 78 36 30		pass_cmd0x60msg .text "Cmd 0x60 Executed.", $0D, $00
>391613	20 45 78 65 63 75 74 65 64 2e 0d 00
>39161f	43 6d 64 20 30 78 46 46		pass_cmd0xFFmsg .text "Cmd 0xFF (Reset) Done.", $0D, $00
>391627	20 28 52 65 73 65 74 29 20 44 6f 6e 65 2e 0d 00
>391637	43 6d 64 20 30 78 45 45		pass_cmd0xEEmsg .text "Cmd 0xEE Echo Test passed...", $0D, $00
>39163f	20 45 63 68 6f 20 54 65 73 74 20 70 61 73 73 65
>39164f	64 2e 2e 2e 0d 00
>391655	4b 65 79 62 6f 61 72 64		Success_kb_init .text "Keyboard Present", $0D, $00
>39165d	20 50 72 65 73 65 6e 74 0d 00
>391667	4e 6f 20 4b 65 79 62 6f		Failed_kb_init  .text "No Keyboard Attached or Failed Init...", $0D, $00
>39166f	61 72 64 20 41 74 74 61 63 68 65 64 20 6f 72 20
>39167f	46 61 69 6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>39168f	4e 4f 20 53 49 47 4e 41		bmp_parser_err0 .text "NO SIGNATURE FOUND.", $00
>391697	54 55 52 45 20 46 4f 55 4e 44 2e 00
>3916a3	42 4d 50 20 4c 4f 41 44		bmp_parser_msg0 .text "BMP LOADED.", $00
>3916ab	45 44 2e 00
>3916af	45 58 45 43 55 54 49 4e		bmp_parser_msg1 .text "EXECUTING BMP PARSER", $00
>3916b7	47 20 42 4d 50 20 50 41 52 53 45 52 00
>3916c4	49 44 45 20 48 44 44 20		IDE_HDD_Present_msg0 .text "IDE HDD Present:", $00
>3916cc	50 72 65 73 65 6e 74 3a 00
>3916d5	42 6f 6f 74 20 44 49 50		boot_invalid    .text "Boot DIP switch settings are invalid", $00
>3916dd	20 73 77 69 74 63 68 20 73 65 74 74 69 6e 67 73
>3916ed	20 61 72 65 20 69 6e 76 61 6c 69 64 00
>3916fa	42 6f 6f 74 69 6e 67 20		sdcard_notimpl  .text "Booting from SD card is not yet implemented.", $00
>391702	66 72 6f 6d 20 53 44 20 63 61 72 64 20 69 73 20
>391712	6e 6f 74 20 79 65 74 20 69 6d 70 6c 65 6d 65 6e
>391722	74 65 64 2e 00
>391727	42 6f 6f 74 69 6e 67 20		ide_notimpl     .text "Booting from IDE drive is not yet implemented.", $00
>39172f	66 72 6f 6d 20 49 44 45 20 64 72 69 76 65 20 69
>39173f	73 20 6e 6f 74 20 79 65 74 20 69 6d 70 6c 65 6d
>39174f	65 6e 74 65 64 2e 00
>391756	42 6f 6f 74 69 6e 67 20		floppy_notimpl  .text "Booting from floppy drive is not yet implemented.", $00
>39175e	66 72 6f 6d 20 66 6c 6f 70 70 79 20 64 72 69 76
>39176e	65 20 69 73 20 6e 6f 74 20 79 65 74 20 69 6d 70
>39177e	6c 65 6d 65 6e 74 65 64 2e 00
>391788	0d 52 45 41 44 59 2e 00		ready_msg       .null $0D,"READY."
>391790	41 42 4f 52 54 20 45 52		error_01        .null "ABORT ERROR"
>391798	52 4f 52 00
>39179c	30 31 32 33 34 35 36 37		hex_digits      .text "0123456789ABCDEF",0
>3917a4	38 39 41 42 43 44 45 46 00
>3917ad					.align 256
>391800	00 1b 31 32 33 34 35 36		ScanCode_Press_Set1   .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>391808	37 38 39 30 2d 3d 08 09
>391810	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>391818	6f 70 5b 5d 0d 00 61 73
>391820	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>391828	27 60 00 5c 7a 78 63 76
>391830	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>391838	00 20 00 00 00 00 00 00
>391840	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $11, $00, $00, $9D, $00, $1D, $00, $00    ; $40
>391848	11 00 00 9d 00 1d 00 00
>391850	91 00 00 00 00 00 00 00		                      .text $91, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>391858	00 00 00 00 00 00 00 00
>391860	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>391868	00 00 00 00 00 00 00 00
>391870	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>391878	00 00 00 00 00 00 00 00
>391880	00 00 21 40 23 24 25 5e		ScanCode_Shift_Set1   .text $00, $00, $21, $40, $23, $24, $25, $5E, $26, $2A, $28, $29, $5F, $2B, $08, $09    ; $00
>391888	26 2a 28 29 5f 2b 08 09
>391890	51 57 45 52 54 59 55 49		                      .text $51, $57, $45, $52, $54, $59, $55, $49, $4F, $50, $7B, $7D, $0D, $00, $41, $53    ; $10
>391898	4f 50 7b 7d 0d 00 41 53
>3918a0	44 46 47 48 4a 4b 4c 3a		                      .text $44, $46, $47, $48, $4A, $4B, $4C, $3A, $22, $7E, $00, $5C, $5A, $58, $43, $56    ; $20
>3918a8	22 7e 00 5c 5a 58 43 56
>3918b0	42 4e 4d 3c 3e 3f 00 18		                      .text $42, $4E, $4D, $3C, $3E, $3F, $00, $18, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>3918b8	00 20 00 00 00 00 00 00
>3918c0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>3918c8	00 00 00 00 00 00 00 00
>3918d0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3918d8	00 00 00 00 00 00 00 00
>3918e0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3918e8	00 00 00 00 00 00 00 00
>3918f0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3918f8	00 00 00 00 00 00 00 00
>391900	00 1b 31 32 33 34 35 36		ScanCode_Ctrl_Set1    .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>391908	37 38 39 30 2d 3d 08 09
>391910	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>391918	6f 70 5b 5d 0d 00 61 73
>391920	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $03, $76    ; $20
>391928	27 60 00 5c 7a 78 03 76
>391930	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>391938	00 20 00 00 00 00 00 00
>391940	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>391948	00 00 00 00 00 00 00 00
>391950	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>391958	00 00 00 00 00 00 00 00
>391960	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>391968	00 00 00 00 00 00 00 00
>391970	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>391978	00 00 00 00 00 00 00 00
>391980	00 1b 31 32 33 34 35 36		ScanCode_Alt_Set1     .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>391988	37 38 39 30 2d 3d 08 09
>391990	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>391998	6f 70 5b 5d 0d 00 61 73
>3919a0	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>3919a8	27 60 00 5c 7a 78 63 76
>3919b0	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>3919b8	00 20 00 00 00 00 00 00
>3919c0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>3919c8	00 00 00 00 00 00 00 00
>3919d0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3919d8	00 00 00 00 00 00 00 00
>3919e0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3919e8	00 00 00 00 00 00 00 00
>3919f0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3919f8	00 00 00 00 00 00 00 00
>391a00	00 1b 31 32 33 34 35 36		ScanCode_NumLock_Set1 .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>391a08	37 38 39 30 2d 3d 08 09
>391a10	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>391a18	6f 70 5b 5d 0d 00 61 73
>391a20	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>391a28	27 60 00 5c 7a 78 63 76
>391a30	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>391a38	00 20 00 00 00 00 00 00
>391a40	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>391a48	00 00 00 00 00 00 00 00
>391a50	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>391a58	00 00 00 00 00 00 00 00
>391a60	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>391a68	00 00 00 00 00 00 00 00
>391a70	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>391a78	00 00 00 00 00 00 00 00
>391a80	00 00 00 00 00 00 00 00		ScanCode_Prefix_Set1  .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $00
>391a88	00 00 00 00 00 00 00 00
>391a90	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $10
>391a98	00 00 00 00 00 00 00 00
>391aa0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $20
>391aa8	00 00 00 00 00 00 00 00
>391ab0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $30
>391ab8	00 00 00 00 00 00 00 00
>391ac0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $11, $00, $00, $9D, $00, $1D, $00, $00    ; $40
>391ac8	11 00 00 9d 00 1d 00 00
>391ad0	91 00 0f 7f 00 00 00 00		                      .text $91, $00, $0F, $7F, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>391ad8	00 00 00 00 00 00 00 00
>391ae0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>391ae8	00 00 00 00 00 00 00 00
>391af0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>391af8	00 00 00 00 00 00 00 00
>391b00					.align 256
>391b00	00 14 1c 21 26 2a 2e 31		GAMMA_2_2_Tbl         .text  $00, $14, $1c, $21, $26, $2a, $2e, $31, $34, $37, $3a, $3d, $3f, $41, $44, $46
>391b08	34 37 3a 3d 3f 41 44 46
>391b10	48 4a 4c 4e 50 51 53 55		                      .text  $48, $4a, $4c, $4e, $50, $51, $53, $55, $57, $58, $5a, $5b, $5d, $5e, $60, $61
>391b18	57 58 5a 5b 5d 5e 60 61
>391b20	63 64 66 67 68 6a 6b 6c		                      .text  $63, $64, $66, $67, $68, $6a, $6b, $6c, $6d, $6f, $70, $71, $72, $73, $75, $76
>391b28	6d 6f 70 71 72 73 75 76
>391b30	77 78 79 7a 7b 7c 7d 7e		                      .text  $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $80, $81, $82, $83, $84, $85, $86, $87
>391b38	80 81 82 83 84 85 86 87
>391b40	88 88 89 8a 8b 8c 8d 8e		                      .text  $88, $88, $89, $8a, $8b, $8c, $8d, $8e, $8f, $90, $91, $92, $93, $93, $94, $95
>391b48	8f 90 91 92 93 93 94 95
>391b50	96 97 98 99 99 9a 9b 9c		                      .text  $96, $97, $98, $99, $99, $9a, $9b, $9c, $9d, $9e, $9e, $9f, $a0, $a1, $a2, $a2
>391b58	9d 9e 9e 9f a0 a1 a2 a2
>391b60	a3 a4 a5 a5 a6 a7 a8 a8		                      .text  $a3, $a4, $a5, $a5, $a6, $a7, $a8, $a8, $a9, $aa, $ab, $ab, $ac, $ad, $ae, $ae
>391b68	a9 aa ab ab ac ad ae ae
>391b70	af b0 b0 b1 b2 b2 b3 b4		                      .text  $AF, $b0, $b0, $b1, $b2, $b2, $b3, $b4, $b5, $b5, $b6, $b7, $b7, $b8, $b9, $b9
>391b78	b5 b5 b6 b7 b7 b8 b9 b9
>391b80	ba bb bb bc bd bd be be		                      .text  $ba, $bb, $bb, $bc, $bd, $bd, $be, $be, $bf, $c0, $c0, $c1, $c2, $c2, $c3, $c4
>391b88	bf c0 c0 c1 c2 c2 c3 c4
>391b90	c4 c5 c5 c6 c7 c7 c8 c8		                      .text  $c4, $c5, $c5, $c6, $c7, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cb, $cc, $cd, $cd
>391b98	c9 ca ca cb cb cc cd cd
>391ba0	ce ce cf d0 d0 d1 d1 d2		                      .text  $ce, $ce, $cf, $d0, $d0, $d1, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d5, $d6, $d6
>391ba8	d2 d3 d4 d4 d5 d5 d6 d6
>391bb0	d7 d8 d8 d9 d9 da da db		                      .text  $d7, $d8, $d8, $d9, $d9, $da, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $df
>391bb8	db dc dc dd de de df df
>391bc0	e0 e0 e1 e1 e2 e2 e3 e3		                      .text  $e0, $e0, $e1, $e1, $e2, $e2, $e3, $e3, $e4, $e4, $e5, $e5, $e6, $e6, $e7, $e7
>391bc8	e4 e4 e5 e5 e6 e6 e7 e7
>391bd0	e8 e8 e9 e9 ea ea eb eb		                      .text  $e8, $e8, $e9, $e9, $ea, $ea, $eb, $eb, $ec, $ec, $ed, $ed, $ee, $ee, $ef, $ef
>391bd8	ec ec ed ed ee ee ef ef
>391be0	f0 f0 f1 f1 f2 f2 f3 f3		                      .text  $f0, $f0, $f1, $f1, $f2, $f2, $f3, $f3, $f4, $f4, $f5, $f5, $f6, $f6, $f7, $f7
>391be8	f4 f4 f5 f5 f6 f6 f7 f7
>391bf0	f8 f8 f9 f9 f9 fa fa fb		                      .text  $f8, $f8, $f9, $f9, $f9, $fa, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $fe, $ff
>391bf8	fb fc fc fd fd fe fe ff
>391c00					.align 256
>391c00	00 0b 11 15 19 1c 1f 22		GAMMA_1_8_Tbl         .text  $00, $0b, $11, $15, $19, $1c, $1f, $22, $25, $27, $2a, $2c, $2e, $30, $32, $34
>391c08	25 27 2a 2c 2e 30 32 34
>391c10	36 38 3a 3c 3d 3f 41 43		                      .text  $36, $38, $3a, $3c, $3d, $3f, $41, $43, $44, $46, $47, $49, $4a, $4c, $4d, $4f
>391c18	44 46 47 49 4a 4c 4d 4f
>391c20	50 51 53 54 55 57 58 59		                      .text  $50, $51, $53, $54, $55, $57, $58, $59, $5b, $5c, $5d, $5e, $60, $61, $62, $63
>391c28	5b 5c 5d 5e 60 61 62 63
>391c30	64 65 67 68 69 6a 6b 6c		                      .text  $64, $65, $67, $68, $69, $6a, $6b, $6c, $6d, $6e, $70, $71, $72, $73, $74, $75
>391c38	6d 6e 70 71 72 73 74 75
>391c40	76 77 78 79 7a 7b 7c 7d		                      .text  $76, $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $7f, $80, $81, $82, $83, $84, $84
>391c48	7e 7f 80 81 82 83 84 84
>391c50	85 86 87 88 89 8a 8b 8c		                      .text  $85, $86, $87, $88, $89, $8a, $8b, $8c, $8d, $8e, $8e, $8f, $90, $91, $92, $93
>391c58	8d 8e 8e 8f 90 91 92 93
>391c60	94 95 95 96 97 98 99 9a		                      .text  $94, $95, $95, $96, $97, $98, $99, $9a, $9a, $9b, $9c, $9d, $9e, $9f, $9f, $a0
>391c68	9a 9b 9c 9d 9e 9f 9f a0
>391c70	a1 a2 a3 a3 a4 a5 a6 a6		                      .text  $a1, $a2, $a3, $a3, $a4, $a5, $a6, $a6, $a7, $a8, $a9, $aa, $aa, $ab, $ac, $ad
>391c78	a7 a8 a9 aa aa ab ac ad
>391c80	ad ae af b0 b0 b1 b2 b3		                      .text  $ad, $ae, $af, $b0, $b0, $b1, $b2, $b3, $b3, $b4, $b5, $b6, $b6, $b7, $b8, $b8
>391c88	b3 b4 b5 b6 b6 b7 b8 b8
>391c90	b9 ba bb bb bc bd bd be		                      .text  $b9, $ba, $bb, $bb, $bc, $bd, $bd, $be, $bf, $bf, $c0, $c1, $c2, $c2, $c3, $c4
>391c98	bf bf c0 c1 c2 c2 c3 c4
>391ca0	c4 c5 c6 c6 c7 c8 c8 c9		                      .text  $c4, $c5, $c6, $c6, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cc, $cc, $cd, $ce, $ce
>391ca8	ca ca cb cc cc cd ce ce
>391cb0	cf d0 d0 d1 d2 d2 d3 d4		                      .text  $cf, $d0, $d0, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d6, $d6, $d7, $d7, $d8, $d9
>391cb8	d4 d5 d6 d6 d7 d7 d8 d9
>391cc0	d9 da db db dc dc dd de		                      .text  $d9, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $e0, $e0, $e1, $e1, $e2, $e3
>391cc8	de df e0 e0 e1 e1 e2 e3
>391cd0	e3 e4 e4 e5 e6 e6 e7 e7		                      .text  $e3, $e4, $e4, $e5, $e6, $e6, $e7, $e7, $e8, $e9, $e9, $ea, $ea, $eb, $ec, $ec
>391cd8	e8 e9 e9 ea ea eb ec ec
>391ce0	ed ed ee ef ef f0 f0 f1		                      .text  $ed, $ed, $ee, $ef, $ef, $f0, $f0, $f1, $f1, $f2, $f3, $f3, $f4, $f4, $f5, $f5
>391ce8	f1 f2 f3 f3 f4 f4 f5 f5
>391cf0	f6 f7 f7 f8 f8 f9 f9 fa		                      .text  $f6, $f7, $f7, $f8, $f8, $f9, $f9, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $ff
>391cf8	fb fb fc fc fd fd fe ff
>391d00					.align 256
>391d00	1d c8 a7 ac 10 d6 52 7c		RANDOM_LUT_Tbl		    .text  $1d, $c8, $a7, $ac, $10, $d6, $52, $7c, $83, $dd, $ce, $39, $cd, $c5, $3b, $15
>391d08	83 dd ce 39 cd c5 3b 15
>391d10	22 55 3b 94 e0 33 1f 38						              .text  $22, $55, $3b, $94, $e0, $33, $1f, $38, $87, $12, $31, $65, $89, $27, $88, $42
>391d18	87 12 31 65 89 27 88 42
>391d20	b2 32 72 84 b2 b2 31 52						              .text  $b2, $32, $72, $84, $b2, $b2, $31, $52, $94, $ce, $56, $ec, $fe, $da, $58, $c9
>391d28	94 ce 56 ec fe da 58 c9
>391d30	c8 5b 53 2a 08 3b 19 c1						              .text  $c8, $5b, $53, $2a, $08, $3b, $19, $c1, $d0, $10, $2c, $b2, $4b, $ea, $32, $61
>391d38	d0 10 2c b2 4b ea 32 61
>391d40	da 34 33 8f 2b da 49 89						              .text  $da, $34, $33, $8f, $2b, $da, $49, $89, $a1, $e6, $ca, $2d, $b3, $ce, $b0, $79
>391d48	a1 e6 ca 2d b3 ce b0 79
>391d50	44 aa 32 82 91 e9 29 16						              .text  $44, $aa, $32, $82, $91, $e9, $29, $16, $5f, $e3, $fb, $bd, $15, $2e, $be, $f5
>391d58	5f e3 fb bd 15 2e be f5
>391d60	e9 4a e4 2e 60 24 94 35						              .text  $e9, $4a, $e4, $2e, $60, $24, $94, $35, $8d, $8f, $2c, $80, $0a, $5e, $99, $36
>391d68	8d 8f 2c 80 0a 5e 99 36
>391d70	ac ab 21 26 42 7c 5e bc						              .text  $ac, $ab, $21, $26, $42, $7c, $5e, $bc, $13, $52, $44, $2f, $e3, $ef, $44, $a2
>391d78	13 52 44 2f e3 ef 44 a2
>391d80	86 c1 9c 47 5f 36 6d 02						              .text  $86, $c1, $9c, $47, $5f, $36, $6d, $02, $be, $23, $02, $58, $0a, $52, $5e, $b4
>391d88	be 23 02 58 0a 52 5e b4
>391d90	9f 06 08 c9 97 cb 9e dd						              .text  $9f, $06, $08, $c9, $97, $cb, $9e, $dd, $d5, $cf, $3e, $df, $c4, $9e, $da, $bb
>391d98	d5 cf 3e df c4 9e da bb
>391da0	9b 5d c9 f5 d9 c3 7e 87						              .text  $9b, $5d, $c9, $f5, $d9, $c3, $7e, $87, $77, $7d, $b1, $3b, $4a, $68, $35, $6e
>391da8	77 7d b1 3b 4a 68 35 6e
>391db0	ee 47 ad 8f fd 73 2e 46						              .text  $ee, $47, $ad, $8f, $fd, $73, $2e, $46, $b5, $8f, $44, $63, $55, $6f, $e1, $50
>391db8	b5 8f 44 63 55 6f e1 50
>391dc0	f4 b6 a3 4f 68 c4 a5 a4						              .text  $f4, $b6, $a3, $4f, $68, $c4, $a5, $a4, $57, $74, $b9, $bd, $05, $14, $50, $eb
>391dc8	57 74 b9 bd 05 14 50 eb
>391dd0	a5 5c 57 2f 99 dc 2e 8a						              .text  $a5, $5c, $57, $2f, $99, $dc, $2e, $8a, $44, $bc, $ec, $db, $22, $58, $fc, $be
>391dd8	44 bc ec db 22 58 fc be
>391de0	5f 3f 50 bd 2a 36 ab ae						              .text  $5f, $3f, $50, $bd, $2a, $36, $ab, $ae, $24, $aa, $82, $11, $5c, $9f, $43, $4d
>391de8	24 aa 82 11 5c 9f 43 4d
>391df0	8f 0c 20 00 91 b6 45 9e						              .text  $8f, $0c, $20, $00, $91, $b6, $45, $9e, $3e, $3d, $66, $7e, $0a, $1c, $6b, $74
>391df8	3e 3d 66 7e 0a 1c 6b 74
>391e00					.align 16
>391e00	00 01 01 00 00 00 00 00		MOUSE_POINTER_PTR     .text $00,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00
>391e08	01 01 01 00 00 00 00 00
>391e10	01 ff ff 01 00 00 01 01		                      .text $01,$FF,$FF,$01,$00,$00,$01,$01,$FF,$FF,$FF,$01,$00,$00,$00,$00
>391e18	ff ff ff 01 00 00 00 00
>391e20	01 ff ff ff 01 01 55 ff		                      .text $01,$FF,$FF,$FF,$01,$01,$55,$FF,$01,$55,$FF,$FF,$01,$00,$00,$00
>391e28	01 55 ff ff 01 00 00 00
>391e30	01 55 ff ff ff ff 01 55		                      .text $01,$55,$FF,$FF,$FF,$FF,$01,$55,$FF,$FF,$FF,$FF,$01,$00,$00,$00
>391e38	ff ff ff ff 01 00 00 00
>391e40	00 01 55 ff ff ff ff ff		                      .text $00,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$00,$00
>391e48	ff ff 01 ff ff 01 00 00
>391e50	00 00 01 55 ff ff ff ff		                      .text $00,$00,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$FF,$01,$00,$00
>391e58	01 ff ff 01 ff 01 00 00
>391e60	00 00 01 01 55 ff ff ff		                      .text $00,$00,$01,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$FF,$01,$00,$00
>391e68	ff 01 ff ff ff 01 00 00
>391e70	00 00 01 55 01 55 ff ff		                      .text $00,$00,$01,$55,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$01,$00
>391e78	ff ff ff ff ff 01 01 00
>391e80	00 00 01 55 55 55 ff ff		                      .text $00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01
>391e88	ff ff ff ff 01 ff ff 01
>391e90	00 00 00 01 55 55 55 ff		                      .text $00,$00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01
>391e98	ff ff ff ff ff ff ff 01
>391ea0	00 00 00 00 01 55 55 55		                      .text $00,$00,$00,$00,$01,$55,$55,$55,$55,$55,$01,$FF,$FF,$55,$01,$00
>391ea8	55 55 01 ff ff 55 01 00
>391eb0	00 00 00 00 00 01 01 01		                      .text $00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$55,$FF,$55,$01,$00,$00
>391eb8	01 01 55 ff 55 01 00 00
>391ec0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$55,$01,$00,$00,$00
>391ec8	01 55 55 55 01 00 00 00
>391ed0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$01,$00,$00,$00,$00
>391ed8	01 55 55 01 00 00 00 00
>391ee0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00
>391ee8	00 01 01 00 00 00 00 00
>391ef0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>391ef8	00 00 00 00 00 00 00 00
.3ff000					FONT_4_BANK0
>3ff000	00 00 00 00 00 00 00 00		.binary "FONT/Bm437_PhoenixEGA_8x8.bin", 0, 2048
>3ff008	7e 81 a5 81 bd 99 81 7e 3c 7e db ff c3 7e 3c 00
>3ff018	00 ee fe fe 7c 38 10 00 10 38 7c fe 7c 38 10 00
>3ff028	00 3c 18 ff ff 08 18 00 10 38 7c fe fe 10 38 00
>3ff038	00 00 18 3c 18 00 00 00 ff ff e7 c3 e7 ff ff ff
>3ff048	00 3c 42 81 81 42 3c 00 ff c3 bd 7e 7e bd c3 ff
>3ff058	01 03 07 0f 1f 3f 7f ff ff fe fc f8 f0 e0 c0 80
>3ff068	04 06 07 04 04 fc f8 00 0c 0a 0d 0b f9 f9 1f 1f
>3ff078	00 92 7c 44 c6 7c 92 00 00 00 60 78 7e 78 60 00
>3ff088	00 00 06 1e 7e 1e 06 00 18 7e 18 18 18 18 7e 18
>3ff098	66 66 66 66 66 00 66 00 ff b6 76 36 36 36 36 00
>3ff0a8	7e c1 dc 22 22 1f 83 7e 00 00 00 7e 7e 00 00 00
>3ff0b8	18 7e 18 18 7e 18 00 ff 18 7e 18 18 18 18 18 00
>3ff0c8	18 18 18 18 18 7e 18 00 00 04 06 ff 06 04 00 00
>3ff0d8	00 20 60 ff 60 20 00 00 00 00 00 c0 c0 c0 ff 00
>3ff0e8	00 24 66 ff 66 24 00 00 00 00 10 38 7c fe 00 00
>3ff0f8	00 00 00 fe 7c 38 10 00 00 00 00 00 00 00 00 00
>3ff108	30 30 30 30 30 00 30 00 66 66 00 00 00 00 00 00
>3ff118	6c 6c fe 6c fe 6c 6c 00 10 7c d2 7c 86 7c 10 00
>3ff128	f0 96 fc 18 3e 72 de 00 30 48 30 78 ce cc 78 00
>3ff138	0c 0c 18 00 00 00 00 00 10 60 c0 c0 c0 60 10 00
>3ff148	10 0c 06 06 06 0c 10 00 00 54 38 fe 38 54 00 00
>3ff158	00 18 18 7e 18 18 00 00 00 00 00 00 00 00 18 70
>3ff168	00 00 00 7e 00 00 00 00 00 00 00 00 00 00 18 00
>3ff178	02 06 0c 18 30 60 c0 00 7c ce de f6 e6 e6 7c 00
>3ff188	18 38 78 18 18 18 3c 00 7c c6 06 0c 30 60 fe 00
>3ff198	7c c6 06 3c 06 c6 7c 00 0e 1e 36 66 fe 06 06 00
>3ff1a8	fe c0 c0 fc 06 06 fc 00 7c c6 c0 fc c6 c6 7c 00
>3ff1b8	fe 06 0c 18 30 60 60 00 7c c6 c6 7c c6 c6 7c 00
>3ff1c8	7c c6 c6 7e 06 c6 7c 00 00 30 00 00 00 30 00 00
>3ff1d8	00 30 00 00 00 30 20 00 00 1c 30 60 30 1c 00 00
>3ff1e8	00 00 7e 00 7e 00 00 00 00 70 18 0c 18 70 00 00
>3ff1f8	7c c6 0c 18 30 00 30 00 7c 82 9a aa aa 9e 7c 00
>3ff208	7c c6 c6 fe c6 c6 c6 00 fc 66 66 7c 66 66 fc 00
>3ff218	7c c6 c0 c0 c0 c6 7c 00 fc 66 66 66 66 66 fc 00
>3ff228	fe 62 68 78 68 62 fe 00 fe 62 68 78 68 60 f0 00
>3ff238	7c c6 c6 c0 de c6 7c 00 c6 c6 c6 fe c6 c6 c6 00
>3ff248	3c 18 18 18 18 18 3c 00 1e 0c 0c 0c 0c cc 78 00
>3ff258	c6 cc d8 f0 d8 cc c6 00 f0 60 60 60 60 62 fe 00
>3ff268	c6 ee fe d6 c6 c6 c6 00 c6 e6 f6 de ce c6 c6 00
>3ff278	7c c6 c6 c6 c6 c6 7c 00 fc 66 66 7c 60 60 f0 00
>3ff288	7c c6 c6 c6 c6 c6 7c 0c fc 66 66 7c 66 66 e6 00
>3ff298	7c c6 c0 7c 06 c6 7c 00 7e 5a 18 18 18 18 3c 00
>3ff2a8	c6 c6 c6 c6 c6 c6 7c 00 c6 c6 c6 c6 c6 6c 38 00
>3ff2b8	c6 c6 c6 c6 d6 ee c6 00 c6 6c 38 38 38 6c c6 00
>3ff2c8	66 66 66 3c 18 18 3c 00 fe c6 0c 18 30 66 fe 00
>3ff2d8	1c 18 18 18 18 18 1c 00 c0 60 30 18 0c 06 02 00
>3ff2e8	70 30 30 30 30 30 70 00 00 00 10 38 6c c6 00 00
>3ff2f8	00 00 00 00 00 00 00 ff 30 30 18 00 00 00 00 00
>3ff308	00 00 7c 06 7e c6 7e 00 c0 c0 fc c6 c6 c6 fc 00
>3ff318	00 00 7c c6 c0 c6 7c 00 06 06 7e c6 c6 c6 7e 00
>3ff328	00 00 7c c6 fe c0 7c 00 3c 66 60 f0 60 60 60 00
>3ff338	00 00 7e c6 c6 7e 06 7c c0 c0 fc c6 c6 c6 c6 00
>3ff348	18 00 38 18 18 18 3c 00 00 0c 00 1c 0c 0c cc 78
>3ff358	c0 c0 c6 d8 f0 d8 c6 00 38 18 18 18 18 18 3c 00
>3ff368	00 00 ee fe d6 c6 c6 00 00 00 fc c6 c6 c6 c6 00
>3ff378	00 00 7c c6 c6 c6 7c 00 00 00 fc c6 c6 fc c0 c0
>3ff388	00 00 7e c6 c6 7e 06 06 00 00 de 76 60 60 60 00
>3ff398	00 00 7c c0 7c 06 7c 00 18 18 7e 18 18 18 1e 00
>3ff3a8	00 00 c6 c6 c6 c6 7e 00 00 00 c6 c6 c6 6c 38 00
>3ff3b8	00 00 c6 c6 d6 fe c6 00 00 00 c6 6c 38 6c c6 00
>3ff3c8	00 00 c6 c6 c6 7e 06 7c 00 00 fe 0c 18 60 fe 00
>3ff3d8	0e 18 18 70 18 18 0e 00 18 18 18 00 18 18 18 00
>3ff3e8	e0 30 30 1c 30 30 e0 00 00 00 70 9a 0e 00 00 00
>3ff3f8	00 00 18 3c 66 ff 00 00 7c c6 c0 c0 c6 7c 18 70
>3ff408	66 00 c6 c6 c6 c6 7e 00 0e 18 7c c6 fe c0 7c 00
>3ff418	18 24 7c 06 7e c6 7e 00 66 00 7c 06 7e c6 7e 00
>3ff428	38 0c 7c 06 7e c6 7e 00 18 00 7c 06 7e c6 7e 00
>3ff438	00 00 7c c0 c0 7c 18 70 18 24 7c c6 fe c0 7c 00
>3ff448	66 00 7c c6 fe c0 7c 00 70 18 7c c6 fe c0 7c 00
>3ff458	66 00 38 18 18 18 3c 00 18 24 38 18 18 18 3c 00
>3ff468	38 0c 38 18 18 18 3c 00 66 00 7c c6 fe c6 c6 00
>3ff478	18 00 7c c6 fe c6 c6 00 0e 18 fe 60 78 60 fe 00
>3ff488	00 00 7c 1a 7e d8 7e 00 7e d8 d8 de f8 d8 de 00
>3ff498	18 24 7c c6 c6 c6 7c 00 66 00 7c c6 c6 c6 7c 00
>3ff4a8	38 0c 7c c6 c6 c6 7c 00 18 24 c6 c6 c6 c6 7e 00
>3ff4b8	38 0c c6 c6 c6 c6 7e 00 66 00 c6 c6 c6 7e 06 7c
>3ff4c8	66 7c c6 c6 c6 c6 7c 00 c6 00 c6 c6 c6 c6 7c 00
>3ff4d8	18 7c c6 c0 c6 7c 18 00 1e 32 30 78 30 70 fe 00
>3ff4e8	66 3c 18 7e 18 3c 18 00 fc c6 fc c0 cc de cc 0e
>3ff4f8	00 1c 32 30 fc 30 f0 00 0e 18 7c 06 7e c6 7e 00
>3ff508	1a 30 38 18 18 18 3c 00 0e 18 7c c6 c6 c6 7c 00
>3ff518	0e 18 c6 c6 c6 c6 7e 00 66 98 fc c6 c6 c6 c6 00
>3ff528	66 98 e6 f6 de ce c6 00 7c 06 7e c6 7e 00 fe 00
>3ff538	7c c6 c6 c6 7c 00 fe 00 18 00 18 30 60 c6 7c 00
>3ff548	00 00 fe c0 c0 c0 c0 00 00 00 fe 06 06 06 06 00
>3ff558	c0 c0 c0 de 06 0c 1e 00 c0 c0 c0 cc 1c 3e 0c 00
>3ff568	30 00 30 30 30 30 30 00 00 36 6c d8 6c 36 00 00
>3ff578	00 d8 6c 36 6c d8 00 00 aa aa aa aa aa aa aa aa
>3ff588	aa 55 aa 55 aa 55 aa 55 44 22 44 22 44 22 44 22
>3ff598	18 18 18 18 18 18 18 18 18 18 18 f8 18 18 18 18
>3ff5a8	18 18 18 f8 18 f8 18 18 36 36 36 f6 36 36 36 36
>3ff5b8	00 00 00 fe 36 36 36 36 00 00 00 f8 18 f8 18 18
>3ff5c8	36 36 36 f6 06 f6 36 36 36 36 36 36 36 36 36 36
>3ff5d8	00 00 00 fe 06 f6 36 36 36 36 36 f6 06 fe 00 00
>3ff5e8	36 36 36 fe 00 00 00 00 18 18 18 f8 18 f8 00 00
>3ff5f8	00 00 00 f8 18 18 18 18 18 18 18 1f 00 00 00 00
>3ff608	18 18 18 ff 00 00 00 00 00 00 00 ff 18 18 18 18
>3ff618	18 18 18 1f 18 18 18 18 00 00 00 ff 00 00 00 00
>3ff628	18 18 18 ff 18 18 18 18 18 18 18 1f 18 1f 18 18
>3ff638	36 36 36 37 36 36 36 36 36 36 36 37 30 3f 00 00
>3ff648	00 00 00 3f 30 37 36 36 36 36 36 f7 00 ff 00 00
>3ff658	00 00 00 ff 00 f7 36 36 36 36 36 37 30 37 36 36
>3ff668	00 00 00 ff 00 ff 00 00 36 36 36 f7 00 f7 36 36
>3ff678	18 18 18 ff 00 ff 00 00 36 36 36 ff 00 00 00 00
>3ff688	00 00 00 ff 00 ff 18 18 00 00 00 ff 36 36 36 36
>3ff698	36 36 36 3f 00 00 00 00 18 18 18 1f 18 1f 00 00
>3ff6a8	00 00 00 1f 18 1f 18 18 00 00 00 3f 36 36 36 36
>3ff6b8	36 36 36 ff 36 36 36 36 18 18 18 ff 18 ff 18 18
>3ff6c8	18 18 18 f8 00 00 00 00 00 00 00 1f 18 18 18 18
>3ff6d8	ff ff ff ff ff ff ff ff 00 00 00 00 ff ff ff ff
>3ff6e8	f0 f0 f0 f0 f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f
>3ff6f8	ff ff ff ff 00 00 00 00 00 00 77 98 98 77 00 00
>3ff708	1c 36 66 fc c6 c6 fc c0 fe 62 60 60 60 60 60 00
>3ff718	00 00 ff 66 66 66 66 00 fe 62 30 18 30 62 fe 00
>3ff728	00 00 3f 66 c6 cc 78 00 00 00 33 33 33 3e 30 f0
>3ff738	00 00 ff 18 18 18 18 00 3c 18 3c 66 66 3c 18 3c
>3ff748	00 7c c6 fe c6 7c 00 00 00 7e c3 c3 c3 66 e7 00
>3ff758	1e 19 3c 66 c6 cc 78 00 00 00 66 99 99 66 00 00
>3ff768	00 03 7c ce e6 7c c0 00 00 3e c0 fe c0 3e 00 00
>3ff778	00 7e c3 c3 c3 c3 00 00 00 fe 00 fe 00 fe 00 00
>3ff788	18 18 7e 18 18 7e 00 00 70 18 0c 18 70 00 fe 00
>3ff798	1c 30 60 30 1c 00 fe 00 00 0e 1b 18 18 18 18 18
>3ff7a8	18 18 18 18 18 d8 70 00 00 18 00 7e 00 18 00 00
>3ff7b8	00 76 dc 00 76 dc 00 00 3c 66 3c 00 00 00 00 00
>3ff7c8	00 18 3c 18 00 00 00 00 00 00 00 00 18 00 00 00
>3ff7d8	0f 0c 0c 0c ec 6c 38 00 d8 ec cc cc 00 00 00 00
>3ff7e8	f0 30 c0 f0 00 00 00 00 00 00 00 3c 3c 3c 3c 00
>3ff7f8	00 00 00 00 00 00 00 00
.3ff800					FONT_4_BANK1
>3ff800	00 00 00 00 00 00 00 00		.binary "FONT/CBM-ASCII_8x8.bin", 0, 2048
>3ff808	7c 82 aa 82 ba 92 82 7c 7c fe d6 fe c6 ee fe 7c
>3ff818	ff fd fb f5 eb d5 ab ff ff e1 fd 85 85 87 87 ff
>3ff828	ff bd db e7 e7 db bd ff ff 81 81 bd bd bd 81 ff
>3ff838	ff ff ff ff ff 81 81 ff 00 08 10 20 10 08 00 00
>3ff848	00 24 14 0c 14 24 00 00 00 8e 88 8c 88 e8 00 00
>3ff858	00 00 00 00 00 00 00 00 00 ee 88 cc 88 88 00 00
>3ff868	00 00 04 14 3c 10 00 00 00 30 4c 4c 30 00 00 00
>3ff878	00 38 28 38 28 00 00 00 ff 81 bd bd bd bd 81 ff
>3ff888	ff 55 aa 55 aa 55 aa ff ab d5 ab d5 ab d5 ab d5
>3ff898	ff 81 81 81 81 81 81 ff ff f9 e1 81 81 e1 f9 ff
>3ff8a8	ff 9f 87 81 81 87 9f ff ff e7 e7 c3 c3 81 81 ff
>3ff8b8	ff 81 81 c3 c3 e7 e7 ff 00 26 54 04 04 04 06 00
>3ff8c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 3 times (48 bytes)...
>3ff908	10 10 10 10 00 10 00 00 24 24 24 00 00 00 00 00
>3ff918	24 7e 24 24 7e 24 00 00 10 3c 50 38 14 78 10 00
>3ff928	62 64 08 10 20 4c 8c 00 30 48 48 30 58 4c 4c 38
>3ff938	10 10 10 00 00 00 00 00 08 10 20 20 20 20 10 08
>3ff948	10 08 04 04 04 04 08 10 00 24 18 7e 18 24 00 00
>3ff958	00 10 10 7c 10 10 00 00 00 00 00 00 10 10 20 00
>3ff968	00 00 00 3c 00 00 00 00 00 00 00 00 18 18 00 00
>3ff978	04 04 08 08 10 10 20 20 3c 46 4a 52 62 42 3c 00
>3ff988	10 30 10 10 10 10 38 00 38 44 04 18 20 40 7c 00
>3ff998	38 44 04 18 04 44 38 00 08 18 28 48 7c 08 08 00
>3ff9a8	7c 40 78 04 04 44 38 00 38 44 40 78 44 44 38 00
>3ff9b8	7c 44 04 08 08 10 10 00 38 44 44 38 44 44 38 00
>3ff9c8	38 44 44 3c 04 44 38 00 00 00 18 00 00 18 00 00
>3ff9d8	00 00 18 00 00 18 18 30 00 08 10 20 10 08 00 00
>3ff9e8	00 00 3c 00 3c 00 00 00 00 10 08 04 08 10 00 00
>3ff9f8	38 44 04 08 10 00 10 00 38 44 4c 4c 40 44 38 00
>3ffa08	10 28 44 7c 44 44 00 00 78 44 78 44 44 78 00 00
>3ffa18	38 44 40 40 44 38 00 00 78 44 44 44 44 78 00 00
>3ffa28	7c 40 78 40 40 7c 00 00 7c 40 78 40 40 40 00 00
>3ffa38	38 44 40 4c 44 38 00 00 44 44 7c 44 44 44 00 00
>3ffa48	38 10 10 10 10 38 00 00 1c 08 08 08 48 30 00 00
>3ffa58	24 28 30 30 28 24 00 00 20 20 20 20 20 3c 00 00
>3ffa68	44 6c 7c 54 44 44 00 00 44 64 54 4c 44 44 00 00
>3ffa78	38 44 44 44 44 38 00 00 78 44 44 78 40 40 00 00
>3ffa88	38 44 44 44 44 38 0c 00 78 44 44 78 48 44 00 00
>3ffa98	3c 40 38 04 04 78 00 00 7c 10 10 10 10 10 00 00
>3ffaa8	44 44 44 44 44 38 00 00 44 44 44 44 28 10 00 00
>3ffab8	82 82 82 92 92 6c 00 00 42 24 18 18 24 42 00 00
>3ffac8	44 44 28 10 10 10 00 00 7c 08 10 20 40 7c 00 00
>3ffad8	38 20 20 20 20 20 38 00 20 20 10 10 08 08 04 04
>3ffae8	38 08 08 08 08 08 38 00 00 10 28 44 00 00 00 00
>3ffaf8	00 00 00 00 00 00 00 7e 40 20 10 00 00 00 00 00
>3ffb08	00 38 04 3c 64 3c 00 00 40 40 78 44 44 78 00 00
>3ffb18	00 00 38 40 40 38 00 00 04 04 3c 44 44 3c 00 00
>3ffb28	00 38 44 7c 40 3c 00 00 0c 10 3c 10 10 10 00 00
>3ffb38	00 00 3c 44 44 3c 04 78 40 40 78 44 44 44 00 00
>3ffb48	10 00 30 10 10 38 00 00 08 00 08 08 08 08 08 30
>3ffb58	20 20 24 38 28 24 00 00 30 10 10 10 10 10 00 00
>3ffb68	00 00 68 54 54 44 00 00 00 00 38 24 24 24 00 00
>3ffb78	00 00 38 44 44 38 00 00 00 00 78 44 44 78 40 40
>3ffb88	00 00 3c 44 44 3c 04 04 00 00 78 44 40 40 00 00
>3ffb98	00 00 1c 30 0c 38 00 00 00 10 7c 10 10 10 0c 00
>3ffba8	00 00 44 44 44 3c 00 00 00 00 42 42 24 18 00 00
>3ffbb8	00 00 82 82 92 6c 00 00 00 00 24 18 18 24 00 00
>3ffbc8	00 00 24 24 24 1c 04 38 00 00 7c 18 30 7c 00 00
>3ffbd8	0c 10 10 30 30 10 10 0c 18 18 18 00 18 18 18 00
>3ffbe8	30 08 08 0c 0c 08 08 30 00 00 32 7e 4c 00 00 00
>3ffbf8	00 00 10 28 38 00 00 00 00 00 3c 3c 3c 3c 00 00
>3ffc08	00 00 3c 24 24 3c 00 00 00 00 18 3c 3c 18 00 00
>3ffc18	00 00 18 24 24 18 00 00 18 24 24 18 00 00 00 00
>3ffc28	00 3c 42 42 66 24 66 00 00 18 00 18 0c 06 66 3c
>3ffc38	0c 12 30 7c 30 62 fc 00 1c 20 70 20 70 20 1c 00
>3ffc48	02 06 0c d8 f0 e0 c0 00 18 18 ff 00 00 ff 00 00
>3ffc58	00 00 ff 00 00 ff 18 18 24 24 24 e7 e7 24 24 24
>3ffc68	18 18 ff 00 00 ff 18 18 24 24 24 27 27 24 24 24
>3ffc78	24 24 24 e4 e4 24 24 24 00 00 00 ff ff ff ff ff
>3ffc88	00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>3ffc98	ff ff ff ff ff ff ff 00 ff ff ff ff ff ff 00 00
>3ffca8	ff ff ff ff ff 00 00 00 ff ff ff ff 00 00 00 00
>3ffcb8	f8 f8 f8 f8 f8 f8 f8 f8 fc fc fc fc fc fc fc fc
>3ffcc8	fe fe fe fe fe fe fe fe 7f 7f 7f 7f 7f 7f 7f 7f
>3ffcd8	3f 3f 3f 3f 3f 3f 3f 3f 1f 1f 1f 1f 1f 1f 1f 1f
>3ffce8	0f 0f 0f 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00
>3ffcf8	00 00 00 00 00 00 00 00 ff ff ff ff ff ff ff ff
>3ffd08	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 00 ff ff ff ff
>3ffd18	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>3ffd28	80 80 80 80 80 80 80 80 aa 55 aa 55 aa 55 aa 55
>3ffd38	01 01 01 01 01 01 01 01 00 00 00 00 aa 55 aa 55
>3ffd48	ff fe fc f8 f0 e0 c0 80 03 03 03 03 03 03 03 03
>3ffd58	18 18 18 1f 1f 18 18 18 00 00 00 00 0f 0f 0f 0f
>3ffd68	18 18 18 1f 1f 00 00 00 00 00 00 f8 f8 18 18 18
>3ffd78	00 00 00 00 00 00 ff ff 00 00 00 1f 1f 18 18 18
>3ffd88	18 18 18 ff ff 00 00 00 00 00 00 ff ff 18 18 18
>3ffd98	18 18 18 f8 f8 18 18 18 c0 c0 c0 c0 c0 c0 c0 c0
>3ffda8	e0 e0 e0 e0 e0 e0 e0 e0 07 07 07 07 07 07 07 07
>3ffdb8	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00
>3ffdc8	00 00 00 00 00 ff ff ff 03 03 03 03 03 03 ff ff
>3ffdd8	00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>3ffde8	18 18 18 f8 f8 00 00 00 f0 f0 f0 f0 00 00 00 00
>3ffdf8	f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 ff ff 00 00 00
>3ffe08	08 1c 3e 7f 7f 1c 3e 00 18 18 18 18 18 18 18 18
>3ffe18	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00
>3ffe28	00 ff ff 00 00 00 00 00 00 00 00 00 ff ff 00 00
>3ffe38	30 30 30 30 30 30 30 30 0c 0c 0c 0c 0c 0c 0c 0c
>3ffe48	00 00 00 e0 f0 38 18 18 18 18 1c 0f 07 00 00 00
>3ffe58	18 18 38 f0 e0 00 00 00 c0 c0 c0 c0 c0 c0 ff ff
>3ffe68	c0 e0 70 38 1c 0e 07 03 03 07 0e 1c 38 70 e0 c0
>3ffe78	ff ff c0 c0 c0 c0 c0 c0 ff ff 03 03 03 03 03 03
>3ffe88	00 3c 7e 7e 7e 7e 3c 00 00 00 00 00 00 ff ff 00
>3ffe98	36 7f 7f 7f 3e 1c 08 00 60 60 60 60 60 60 60 60
>3ffea8	00 00 00 07 0f 1c 18 18 c3 e7 7e 3c 3c 7e e7 c3
>3ffeb8	00 3c 7e 66 66 7e 3c 00 18 18 66 66 18 18 3c 00
>3ffec8	06 06 06 06 06 06 06 06 08 1c 3e 7f 3e 1c 08 00
>3ffed8	18 18 18 ff ff 18 18 18 c0 c0 30 30 c0 c0 30 30
>3ffee8	18 18 18 18 18 18 18 18 00 00 03 3e 76 36 36 00
>3ffef8	ff 7f 3f 1f 0f 07 03 01 24 24 24 24 24 24 24 24
>3fff08	00 00 ff 00 00 ff 00 00 00 00 3f 20 20 27 24 24
>3fff18	00 00 ff 00 00 e7 24 24 00 00 fc 04 04 e4 24 24
>3fff28	24 24 27 20 20 3f 00 00 24 24 e7 00 00 ff 00 00
>3fff38	24 24 e4 04 04 fc 00 00 24 24 27 20 20 27 24 24
>3fff48	24 24 e4 04 04 e4 24 24 24 24 e7 00 00 e7 24 24
>3fff58	0f 0f 0f 0f f0 f0 f0 f0 01 03 07 0f 1f 3f 7f ff
>3fff68	80 c0 e0 f0 f8 fc fe ff 33 99 cc 66 33 99 cc 66
>3fff78	cc 99 33 66 cc 99 33 66 f0 f0 f0 f0 ff ff ff ff
>3fff88	0f 0f 0f 0f ff ff ff ff ff ff ff ff f0 f0 f0 f0
>3fff98	ff ff ff ff 0f 0f 0f 0f 05 0a 05 0a 00 00 00 00
>3fffa8	00 00 00 00 0a 05 0a 05 a0 50 a0 50 00 00 00 00
>3fffb8	00 00 00 00 a0 50 a0 50 0a 05 0a 05 0a 05 0a 05
>3fffc8	aa 55 aa 55 00 00 00 00 00 18 3c 7e 18 18 18 18
>3fffd8	00 10 30 7f 7f 30 10 00 00 08 0c fe fe 0c 08 00
>3fffe8	18 18 18 18 7e 3c 18 00 00 00 36 49 36 00 00 00
>3ffff8	00 00 00 00 00 00 00 00
>3a0000	5c fe 5d 3a 5c 6d 44 3a		.binary "binaries/basic816.bin"
>3a0008	5c b9 1e 3a 5c 3f 01 3a 5c 57 00 3a 5c d5 00 3a
>3a0018	5c 52 02 3a 5c e3 00 3a 5c fe 00 3a 5c 05 01 3a
>3a0028	8b e2 20 8d b3 08 08 c2 20 48 a9 00 08 5b 68 28
>3a0038	c2 20 a5 a4 d0 06 e2 20 a5 a6 f0 11 c2 10 a4 a9
>3a0048	c4 a7 f0 09 e2 20 a5 b3 97 a4 c8 84 a9 ab 60 08
>3a0058	c2 10 e2 20 a9 01 20 1c 00 a2 00 00 a9 00 9f 00
>3a0068	4c 00 e8 e0 00 01 d0 f6 a2 00 00 20 14 00 c9 0d
>3a0078	d0 03 4c ce 00 c9 9d d0 08 e0 00 00 f0 ed ca 80
>3a0088	39 c9 1d d0 0e bf 00 4c 00 f0 e0 e0 4f 00 f0 db
>3a0098	e8 80 27 c9 08 d0 1a e0 00 00 f0 cf da bf 01 4c
>3a00a8	00 9f 00 4c 00 f0 06 e8 e0 ff 00 d0 f0 fa ca 80
>3a00b8	0e c9 20 90 b6 9f 00 4c 00 e8 20 18 00 80 ac a9
>3a00c8	08 20 18 00 80 a5 a9 00 20 1c 00 28 60 22 4c 10
>3a00d8	38 60 20 14 00 48 20 18 00 68 60 08 e2 20 c9 00
>3a00e8	f0 08 af 10 00 af 09 01 80 06 af 10 00 af 29 fe
>3a00f8	8f 10 00 af 28 60 08 22 84 10 38 28 60 48 da 5a
>3a0108	0b 08 e2 20 c2 10 a2 00 00 a9 20 9f 00 a0 af af
>3a0118	1e 00 00 9f 00 c0 af e8 e0 00 20 d0 ec 08 c2 20
>3a0128	48 a9 00 00 5b 68 28 a2 00 00 a0 00 00 22 84 10
>3a0138	38 28 2b 7a fa 68 60 da 5a 0b 08 08 c2 20 48 a9
>3a0148	00 08 5b 68 28 c2 30 af 0c 00 00 85 08 e2 20 af
>3a0158	0e 00 00 c2 20 29 ff 00 85 0a a9 80 00 8f 08 01
>3a0168	00 af 1c 00 00 3a 8f 0a 01 00 18 a5 08 6f 0c 01
>3a0178	00 85 08 a5 0a 69 00 00 85 0a e2 20 a0 00 00 a2
>3a0188	00 00 b7 08 9f 00 4f 00 e8 c8 c0 80 00 d0 f3 ca
>3a0198	bf 00 4f 00 c9 20 d0 09 a9 00 9f 00 4f 00 ca 10
>3a01a8	ef 28 2b 7a fa 60 e2 20 a9 48 8f 0f 00 00 a9 34
>3a01b8	8f 13 00 00 a9 20 8f 08 00 af 8f 09 00 af a2 00
>3a01c8	00 a9 00 9f 10 f0 3a e8 e0 12 00 d0 f6 a9 80 8f
>3a01d8	b2 08 00 e2 20 a9 00 8f 89 0f 00 60 08 e2 20 48
>3a01e8	48 a9 00 22 3c 10 38 68 22 18 10 38 af 89 0f 00
>3a01f8	29 01 d0 f8 68 28 60 08 e2 20 48 48 a9 01 22 3c
>3a0208	10 38 68 22 18 10 38 af 89 0f 00 29 01 d0 f8 68
>3a0218	28 60 08 c2 20 48 e2 20 a9 0d 20 18 00 c2 20 68
>3a0228	28 60 08 22 78 10 38 28 60 08 0b 08 c2 20 48 a9
>3a0238	00 08 5b 68 28 e2 20 a5 b4 1a 85 b4 cf 13 00 00
>3a0248	90 05 20 14 00 64 b4 2b 28 60 08 e2 20 c2 10 da
>3a0258	5a 8f b3 08 00 af b2 08 00 29 20 f0 07 af b3 08
>3a0268	00 20 28 00 af b2 08 00 29 80 f0 07 af b3 08 00
>3a0278	20 e4 01 af b2 08 00 29 40 f0 14 af b3 08 00 20
>3a0288	ff 01 af b3 08 00 c9 0d d0 05 a9 0a 20 ff 01 7a
>3a0298	fa 28 60 08 e2 20 bd 00 00 f0 06 20 18 00 e8 80
>3a02a8	f5 28 60 08 c2 20 48 48 4a 4a 4a 4a 4a 4a 4a 4a
>3a02b8	20 c5 02 68 29 ff 00 20 c5 02 68 28 60 08 c2 20
>3a02c8	48 e2 20 48 4a 4a 4a 4a 20 dc 02 68 20 dc 02 c2
>3a02d8	20 68 28 60 08 c2 30 da 29 0f 00 aa bf 00 d0 3a
>3a02e8	20 18 00 fa 28 60 08 e2 20 c9 5b b0 04 c9 41 b0
>3a02f8	0b c9 7b b0 04 c9 61 b0 03 28 18 60 28 38 60 08
>3a0308	e2 20 c9 3a b0 04 c9 30 b0 03 28 18 60 28 38 60
>3a0318	08 e2 20 c9 3a b0 04 c9 30 b0 13 c9 67 b0 04 c9
>3a0328	61 b0 0b c9 47 b0 04 c9 41 b0 03 28 18 60 28 38
>3a0338	60 08 e2 20 c9 3a b0 04 c9 30 b0 12 c9 67 b0 04
>3a0348	c9 61 b0 0f c9 47 b0 04 c9 41 b0 09 28 60 38 e9
>3a0358	30 80 f9 29 df 38 e9 37 80 f2 08 e2 20 c9 7b b0
>3a0368	06 c9 61 90 02 29 df 28 60 08 e2 20 c2 10 bd 00
>3a0378	00 f0 09 20 62 03 9d 00 00 e8 80 f2 28 60 08 0b
>3a0388	08 c2 20 48 a9 00 08 5b 68 28 c2 20 48 06 21 26
>3a0398	23 a5 21 85 0c a5 23 85 0e 06 0c 26 0e 06 0c 26
>3a03a8	0e 18 a5 21 65 0c 85 21 a5 23 65 0e 85 23 68 2b
>3a03b8	28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 20
>3a03c8	a5 21 8f 12 01 00 a9 0a 00 8f 10 01 00 af 14 01
>3a03d8	00 85 21 64 23 af 16 01 00 85 27 64 29 e2 20 a9
>3a03e8	00 85 25 85 2b 2b 28 60 08 c2 20 a5 21 d0 08 a5
>3a03f8	23 d0 04 28 e2 02 60 28 c2 02 60 08 e2 20 a5 25
>3a0408	c9 00 d0 02 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a0418	e2 20 a9 04 8f d1 08 00 dc d2 08 08 e2 20 a5 25
>3a0428	c9 02 d0 02 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a0438	e2 20 a9 04 8f d1 08 00 dc d2 08 08 e2 20 a5 25
>3a0448	c9 00 d0 08 c2 20 a5 23 d0 17 28 60 08 c2 20 48
>3a0458	a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 dc d2
>3a0468	08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>3a0478	d1 08 00 dc d2 08 08 e2 20 a5 25 c9 00 d0 0e a5
>3a0488	24 d0 1f a5 23 d0 1b a5 22 d0 17 28 60 08 c2 20
>3a0498	48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 dc
>3a04a8	d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09
>3a04b8	8f d1 08 00 dc d2 08 08 0b 08 c2 20 48 a9 00 08
>3a04c8	5b 68 28 c2 30 64 21 64 23 e2 20 64 25 a7 00 c9
>3a04d8	26 f0 3a e2 20 a7 00 20 07 03 90 6c 20 86 03 38
>3a04e8	e9 30 c2 20 29 ff 00 18 65 21 85 21 a5 23 69 00
>3a04f8	00 85 23 20 5a 19 80 db 08 c2 20 48 a9 00 08 5b
>3a0508	68 28 e2 20 a9 02 8f d1 08 00 dc d2 08 20 5a 19
>3a0518	a7 00 c9 48 f0 04 c9 68 d0 de 20 5a 19 e2 20 a7
>3a0528	00 20 18 03 90 22 20 39 03 c2 20 06 21 26 23 06
>3a0538	21 26 23 06 21 26 23 06 21 26 23 29 ff 00 18 65
>3a0548	21 85 21 20 5a 19 80 d5 2b 28 60 08 c2 30 38 a5
>3a0558	04 e5 18 a8 e2 20 b7 18 f0 10 c9 20 f0 06 c9 09
>3a0568	f0 02 28 60 88 c0 ff ff d0 ec a9 00 60 08 0b 08
>3a0578	c2 20 48 a9 00 08 5b 68 28 c2 30 a5 18 85 00 e2
>3a0588	20 a5 1a 85 02 20 7b 19 a7 00 20 07 03 90 0c 20
>3a0598	bf 04 c2 20 a5 21 85 d5 20 7b 19 c2 20 a5 00 85
>3a05a8	18 e2 20 a5 02 85 1a 20 c3 05 e2 20 20 34 06 c9
>3a05b8	00 f0 05 20 b3 07 80 f4 2b 28 60 08 c2 20 a5 18
>3a05c8	85 00 a5 1a 85 02 a2 00 00 e2 20 a0 00 00 e0 00
>3a05d8	00 f0 0d b7 00 f0 53 c9 3a f0 04 c9 20 d0 33 c8
>3a05e8	b7 00 f0 46 c9 52 f0 10 c9 72 d0 26 b7 00 f0 3a
>3a05f8	c9 52 f0 04 c9 72 d0 1a c8 b7 00 f0 2d c9 45 f0
>3a0608	04 c9 65 d0 0d c8 b7 00 f0 20 c9 4d f0 0a c9 6d
>3a0618	f0 06 e8 20 5a 19 80 b3 a7 00 c9 3a d0 03 20 5a
>3a0628	19 a9 03 85 1c a9 8e 20 b3 07 28 60 08 0b 08 c2
>3a0638	20 48 a9 00 08 5b 68 28 e2 20 a9 7f 85 1c c2 10
>3a0648	20 68 07 a5 1c d0 03 4c d7 06 c2 20 a5 18 85 00
>3a0658	e2 20 a5 1a 85 02 c2 20 64 04 64 06 e2 30 a0 00
>3a0668	b7 00 f0 da c9 8e f0 d6 c8 c4 1c 90 f3 c2 10 a7
>3a0678	00 c9 22 d0 05 20 ef 06 80 28 a5 1c c9 01 f0 19
>3a0688	c2 20 a5 00 c5 18 d0 08 e2 20 a5 02 c5 1a f0 09
>3a0698	e2 20 a7 04 20 32 39 b0 09 e2 20 20 ff 06 c9 00
>3a06a8	d0 11 c2 20 a5 00 85 04 e2 20 a5 02 85 06 20 5a
>3a06b8	19 80 a9 c9 81 d0 18 20 53 05 c9 00 f0 14 89 80
>3a06c8	10 0b 20 54 08 c9 30 f0 04 a9 af 80 02 a9 81 2b
>3a06d8	28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>3a06e8	8f d1 08 00 dc d2 08 08 e2 20 20 5a 19 a7 00 f0
>3a06f8	04 c9 22 d0 f5 28 60 08 0b c2 30 da 5a 08 c2 20
>3a0708	48 a9 00 08 5b 68 28 a9 7e 08 85 08 e2 20 a9 3a
>3a0718	85 0a a2 80 00 e2 20 a0 01 00 b7 08 f0 26 c5 1c
>3a0728	d0 29 c2 30 a0 02 00 b7 08 85 0c e2 20 a9 3a 85
>3a0738	0e e2 10 a0 00 b7 00 20 62 03 d7 0c d0 0d c8 c4
>3a0748	1c 90 f2 8a c2 10 7a fa 2b 28 60 c2 30 18 a5 08
>3a0758	69 08 00 85 08 e2 20 a5 0a 69 00 85 0a e8 80 b5
>3a0768	08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 a9
>3a0778	7e 08 85 08 a9 3a 00 85 0a 64 0c e2 20 a0 01 00
>3a0788	b7 08 f0 1d c5 1c b0 06 c5 0c 90 02 85 0c c2 20
>3a0798	18 a5 08 69 08 00 85 08 a5 0a 69 00 00 85 0a 80
>3a07a8	da e2 20 a5 0c 85 1c ab 2b 28 60 08 0b 08 c2 20
>3a07b8	48 a9 00 08 5b 68 28 e2 20 87 00 c2 20 18 a5 00
>3a07c8	69 01 00 85 08 a5 02 69 00 00 85 0a e2 10 a4 1c
>3a07d8	88 e2 20 b7 08 87 08 f0 13 c2 20 18 a5 08 69 01
>3a07e8	00 85 08 a5 0a 69 00 00 85 0a 80 e5 2b 28 60 08
>3a07f8	c2 30 29 7f 00 0a 0a 0a 18 69 7e 08 aa 28 60 08
>3a0808	8b 0b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48
>3a0818	a9 3a 48 ab 68 28 e2 20 c2 10 20 f7 07 bd 00 00
>3a0828	c2 20 29 0f 00 2b ab 28 60 08 8b 0b 08 c2 20 48
>3a0838	a9 00 08 5b 68 28 08 e2 20 48 a9 3a 48 ab 68 28
>3a0848	c2 30 20 f7 07 bd 04 00 2b ab 28 60 08 8b 0b 08
>3a0858	c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 3a 48
>3a0868	ab 68 28 e2 20 c2 10 20 f7 07 bd 00 00 c2 20 29
>3a0878	f0 00 2b ab 28 60 03 01 10 d0 42 1f 00 00 03 01
>3a0888	12 d0 77 1f 00 00 02 01 14 d0 85 1f 00 00 02 01
>3a0898	16 d0 9e 1f 00 00 02 03 18 d0 b1 1f 00 00 00 01
>3a08a8	1c d0 00 00 00 00 04 01 1e d0 f3 1f 00 00 04 01
>3a08b8	20 d0 29 20 00 00 04 01 22 d0 0e 20 00 00 05 03
>3a08c8	24 d0 e2 1f 00 00 06 03 28 d0 c4 1f 00 00 07 02
>3a08d8	2c d0 d3 1f 00 00 ff 01 2f d0 00 00 00 00 40 01
>3a08e8	31 d0 00 00 00 00 20 03 33 d0 92 2c 00 00 20 05
>3a08f8	37 d0 29 30 00 00 20 03 3d d0 88 2f 00 00 20 04
>3a0908	41 d0 3c 2f 00 00 20 03 46 d0 33 2f 00 00 20 02
>3a0918	4a d0 df 2e 00 00 50 04 4d d0 00 00 00 00 50 04
>3a0928	52 d0 00 00 00 00 20 05 57 d0 40 2e 00 00 20 06
>3a0938	5d d0 a5 2e 00 00 20 03 64 d0 a9 2c 00 00 50 02
>3a0948	68 d0 00 00 00 00 50 04 6b d0 00 00 00 00 20 04
>3a0958	70 d0 89 2d 00 00 20 02 75 d0 a3 2c 00 00 20 04
>3a0968	78 d0 a6 2c 00 00 50 05 7d d0 00 00 00 00 50 05
>3a0978	83 d0 00 00 00 00 20 04 89 d0 a0 2c 00 00 20 03
>3a0988	8e d0 7e 2f 00 00 20 04 92 d0 7d 2c 00 00 20 04
>3a0998	97 d0 21 2c 00 00 20 05 9c d0 cb 2b 00 00 20 05
>3a09a8	a2 d0 6c 2b 00 00 20 03 a8 d0 68 2b 00 00 20 04
>3a09b8	ac d0 5d 2a 00 00 20 04 b1 d0 5b 2b 00 00 20 07
>3a09c8	b6 d0 5f 2b 00 00 20 03 be d0 c4 29 00 00 20 04
>3a09d8	c2 d0 37 29 00 00 04 02 c7 d0 7c 20 00 00 04 02
>3a09e8	ca d0 5f 20 00 00 04 02 cd d0 44 20 00 00 30 01
>3a09f8	d0 d0 b0 31 00 00 30 03 d2 d0 5c 35 00 00 30 04
>3a0a08	d6 d0 a2 35 00 00 30 05 db d0 1f 36 00 00 30 05
>3a0a18	e1 d0 db 35 00 00 30 04 e7 d0 54 36 00 00 30 03
>3a0a28	ec d0 9f 36 00 00 30 03 f0 d0 da 36 00 00 30 03
>3a0a38	f4 d0 4f 37 00 00 30 03 f8 d0 c4 37 00 00 30 03
>3a0a48	fc d0 f4 37 00 00 30 04 00 d1 d5 34 00 00 30 03
>3a0a58	05 d1 74 34 00 00 30 04 09 d1 2d 34 00 00 30 03
>3a0a68	0e d1 e1 33 00 00 30 05 12 d1 36 33 00 00 30 06
>3a0a78	18 d1 73 32 00 00 30 04 1f d1 d2 31 00 00 10 03
>3a0a88	24 d1 78 38 00 00 10 03 28 d1 43 38 00 00 10 04
>3a0a98	2c d1 4e 42 00 00 10 04 31 d1 8f 38 00 00 10 03
>3a0aa8	36 d1 12 40 00 00 20 05 3a d1 a2 41 00 00 10 04
>3a0ab8	40 d1 ff 41 00 00 20 05 45 d1 f5 42 00 00 20 03
>3a0ac8	4b d1 57 43 00 00 10 04 4f d1 96 43 00 00 10 07
>3a0ad8	54 d1 40 38 00 00 20 03 5c d1 cd 28 00 00 20 05
>3a0ae8	60 d1 13 28 00 00 20 09 66 d1 dc 21 00 00 20 09
>3a0af8	70 d1 77 21 00 00 20 0a 7a d1 a5 21 00 00 20 07
>3a0b08	85 d1 09 21 00 00 30 08 8d d1 e4 30 00 00 20 07
>3a0b18	96 d1 9b 20 00 00 30 08 9e d1 4a 31 00 00 20 08
>3a0b28	a7 d1 f3 22 00 00 20 08 b0 d1 59 22 00 00 20 06
>3a0b38	b9 d1 34 23 00 00 20 09 c0 d1 f2 23 00 00 20 04
>3a0b48	ca d1 85 25 00 00 20 04 cf d1 cb 25 00 00 20 04
>3a0b58	d4 d1 31 26 00 00 20 06 d9 d1 cd 26 00 00 20 08
>3a0b68	e0 d1 50 27 00 00 20 0a e9 d1 84 27 00 00 00 00
>3a0b78	00 00 00 00 00 00 08 0b 08 c2 20 48 a9 00 08 5b
>3a0b88	68 28 c2 30 a9 ff ff 85 b8 e2 20 a9 34 85 ba c2
>3a0b98	20 64 b5 64 bb e2 20 64 b7 64 bd 2b 28 60 5a 08
>3a0ba8	e2 20 85 e8 c2 10 86 8d c2 20 a5 0e 48 a5 0c 48
>3a0bb8	a5 12 48 a5 10 48 20 56 0c b0 03 20 da 0b 20 e2
>3a0bc8	0d c2 20 68 85 10 68 85 12 68 85 0c 68 85 0e 28
>3a0bd8	7a 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a0be8	a6 8d ca 86 0c e8 c2 30 38 a5 b8 e5 0c 85 be e2
>3a0bf8	20 a5 ba e9 00 85 c0 20 e2 0d e2 20 a5 e8 a0 00
>3a0c08	00 97 c1 a9 00 a0 01 00 97 c1 a0 02 00 97 c1 c2
>3a0c18	20 a9 00 00 97 c1 c2 20 18 a5 b8 69 01 00 a0 05
>3a0c28	00 97 c1 e2 20 c8 c8 a5 ba 69 00 97 c1 c2 20 a5
>3a0c38	be 85 b5 e2 20 a5 c0 85 b7 c2 20 38 a5 c1 e9 01
>3a0c48	00 85 b8 e2 20 a5 c3 e9 00 85 ba 2b 28 60 08 0b
>3a0c58	08 c2 20 48 a9 00 08 5b 68 28 c2 30 c2 20 a5 bb
>3a0c68	85 c7 e2 20 a5 bd 85 c9 a5 c7 d0 17 e2 20 a5 c9
>3a0c78	d0 11 c2 20 a9 00 00 85 cd e2 20 a9 00 85 cf 2b
>3a0c88	28 18 60 c2 20 a0 05 00 b7 c7 85 ca e2 20 c8 c8
>3a0c98	b7 c7 85 cc c2 20 18 a5 c7 65 8d 85 0c e2 20 a5
>3a0ca8	c9 69 00 85 0e c2 20 18 a5 0c 69 08 00 85 0c e2
>3a0cb8	20 a5 0e 69 00 85 0e c2 20 a5 0c c5 ca d0 28 e2
>3a0cc8	20 a5 0e c5 cc d0 20 c2 20 a5 cd d0 5d e2 20 a5
>3a0cd8	cf d0 57 c2 20 a0 02 00 b7 c7 85 bb e2 20 c8 c8
>3a0ce8	b7 c7 85 bd 4c 93 0d c2 20 a5 0c 69 08 00 85 10
>3a0cf8	e2 20 a5 0e 69 00 85 12 e2 20 a5 c4 c5 10 b0 3e
>3a0d08	90 08 c2 20 a5 c4 c5 10 b0 34 c2 20 a5 c7 85 cd
>3a0d18	e2 20 a5 c9 85 cf c2 20 a0 02 00 b7 cd 85 c7 e2
>3a0d28	20 c8 c8 b7 cd 85 c9 4c 70 0c c2 20 a0 02 00 b7
>3a0d38	c7 97 cd e2 20 c8 c8 b7 c7 97 cd 4c 93 0d c2 20
>3a0d48	a0 05 00 b7 c7 97 0c e2 20 c8 c8 b7 c7 97 0c c2
>3a0d58	20 a0 02 00 b7 c7 97 0c e2 20 c8 c8 b7 c7 97 0c
>3a0d68	c2 20 a5 cd d0 14 e2 20 a5 cd d0 0e c2 20 a5 0c
>3a0d78	85 bb e2 20 a5 0e 85 bd 80 11 c2 20 a0 02 00 a5
>3a0d88	0c 97 cd e2 20 c8 c8 a5 0e 97 cd c2 20 a5 c7 85
>3a0d98	c1 e2 20 a5 c9 85 c3 c2 20 a5 c1 85 b5 e2 20 a5
>3a0da8	c3 85 b7 c2 20 a0 05 00 a5 0c 97 c1 e2 20 c8 c8
>3a0db8	a5 0e 97 c1 c2 20 a0 02 00 a9 00 00 97 c1 e2 20
>3a0dc8	c8 c8 97 c1 e2 20 a5 e8 e2 20 a0 00 00 97 c1 a0
>3a0dd8	01 00 a9 00 97 c1 2b 28 38 60 08 c2 20 38 a5 be
>3a0de8	e9 08 00 85 c1 e2 20 a5 c0 e9 00 85 c3 28 60 08
>3a0df8	e2 20 a5 c3 f0 04 c9 35 b0 12 c2 20 a5 c1 f0 0c
>3a0e08	e2 20 a0 01 00 b7 c1 1a 97 c1 28 60 00 ea 08 e2
>3a0e18	20 a5 c3 f0 04 c9 35 b0 17 c2 20 a5 c1 f0 11 e2
>3a0e28	20 a0 01 00 b7 c1 3a 97 c1 d0 03 20 3a 0e 28 60
>3a0e38	00 ea 08 c2 20 a5 bb d0 21 e2 20 a5 bd d0 1b a5
>3a0e48	c3 85 bd c2 20 a5 c1 85 bb a9 00 00 a0 02 00 97
>3a0e58	c1 c8 c8 e2 20 97 c1 4c 21 0f e2 20 a5 bd c5 c3
>3a0e68	90 28 c2 20 a5 bb c5 c1 90 20 c2 20 a5 bb a0 02
>3a0e78	00 97 c1 e2 20 c8 c8 a5 bd 97 c1 c2 20 a5 c1 85
>3a0e88	bb e2 20 a5 c3 85 bd 4c 21 0f c2 20 a5 bb 85 08
>3a0e98	e2 20 a5 bd 85 0a e2 20 a0 04 00 b7 08 c5 c6 90
>3a0ea8	32 d0 0b c2 20 a0 02 00 b7 08 c5 c4 90 25 c2 20
>3a0eb8	a0 02 00 b7 08 97 c1 e2 20 c8 c8 b7 08 97 c1 c2
>3a0ec8	20 a5 c1 a0 02 00 97 08 e2 20 a5 c3 c8 c8 97 08
>3a0ed8	4c 21 0f c2 20 a0 02 00 b7 08 d0 08 e2 20 c8 c8
>3a0ee8	b7 08 f0 19 c2 20 a0 02 00 b7 08 85 0c e2 20 c8
>3a0ef8	c8 b7 08 85 0a c2 20 a5 0c 85 08 80 99 c2 20 a5
>3a0f08	c1 a0 02 00 97 08 e2 20 c8 c8 a5 c3 97 08 a9 00
>3a0f18	97 c1 c2 20 a0 02 00 97 c1 20 26 0f 28 60 08 c2
>3a0f28	20 a5 bb 85 c1 e2 20 a5 bd 85 c3 c2 20 a5 c1 d0
>3a0f38	09 e2 20 a5 c3 d0 03 4c c9 0f c2 20 a0 02 00 b7
>3a0f48	c1 85 0c e2 20 c8 c8 b7 c1 85 0e c2 20 a0 05 00
>3a0f58	b7 c1 85 10 e2 20 c8 c8 b7 c1 85 12 c2 20 a5 0c
>3a0f68	c5 10 d0 08 e2 20 a5 0e c5 12 f0 1f c2 20 a0 02
>3a0f78	00 b7 c1 85 0c e2 20 c8 c8 b7 c1 85 0e c2 20 a5
>3a0f88	0c 85 c1 e2 20 a5 0e 85 c3 80 a0 c2 20 a0 02 00
>3a0f98	b7 c1 85 0c e2 20 c8 c8 b7 c1 85 0e c2 20 a0 02
>3a0fa8	00 b7 0c 97 c1 e2 20 c8 c8 b7 0c 97 c1 c2 20 a0
>3a0fb8	05 00 b7 0c 97 c1 e2 20 c8 c8 b7 0c 97 c1 4c 42
>3a0fc8	0f 28 60 08 c2 10 e2 20 64 14 a5 e0 1a 1a 85 15
>3a0fd8	e2 20 a5 e1 85 16 c5 ba 90 1f f0 08 c2 20 a5 14
>3a0fe8	c5 b8 90 15 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a0ff8	a9 03 8f d1 08 00 dc d2 08 28 60 c9 00 d0 05 c0
>3a1008	01 00 f0 05 09 30 97 14 c8 60 08 c2 30 64 0c a5
>3a1018	23 10 1a 18 a5 21 49 ff ff 69 01 00 85 21 a5 23
>3a1028	49 ff ff 69 00 00 85 23 a9 ff ff 85 0c 64 10 64
>3a1038	12 a2 1f 00 f8 06 21 26 23 a5 10 65 10 85 10 a5
>3a1048	12 65 12 85 12 ca 10 ed d8 e2 20 20 cb 0f a0 00
>3a1058	00 a5 0c f0 04 a9 2d 80 02 a9 20 97 14 c8 a2 03
>3a1068	00 b5 10 29 f0 4a 4a 4a 4a 20 03 10 b5 10 29 0f
>3a1078	20 03 10 ca 10 eb c0 01 00 d0 04 a9 30 87 14 a9
>3a1088	00 97 14 28 60 00 ea 08 e2 20 c2 10 a0 00 00 bd
>3a1098	00 00 f0 04 e8 c8 80 f7 28 60 08 0b 8b 08 c2 20
>3a10a8	48 a9 00 08 5b 68 28 e2 20 c2 10 08 c2 20 48 e2
>3a10b8	20 a5 23 48 ab c2 20 68 28 a6 21 20 8f 10 84 0c
>3a10c8	08 c2 20 48 e2 20 a5 29 48 ab c2 20 68 28 a6 27
>3a10d8	20 8f 10 c2 20 98 38 65 0c aa e2 20 a9 02 20 a6
>3a10e8	0b c2 20 a5 b5 85 08 e2 20 a5 b7 85 0a a0 00 00
>3a10f8	08 c2 20 48 e2 20 a5 23 48 ab c2 20 68 28 a6 21
>3a1108	bd 00 00 f0 06 97 08 e8 c8 80 f5 e2 20 08 c2 20
>3a1118	48 e2 20 a5 29 48 ab c2 20 68 28 a6 27 bd 00 00
>3a1128	97 08 f0 04 e8 c8 80 f5 c2 20 a5 08 85 21 e2 20
>3a1138	a5 0a 85 23 a9 02 85 25 ab 2b 28 60 08 0b 8b 08
>3a1148	c2 20 48 a9 00 08 5b 68 28 c2 30 08 c2 20 48 e2
>3a1158	20 a5 23 48 ab c2 20 68 28 a6 21 20 8f 10 98 aa
>3a1168	e8 e2 20 a9 02 20 a6 0b c2 20 a5 be 85 08 e2 20
>3a1178	a5 c0 85 0a a0 00 00 b7 21 97 08 f0 03 c8 80 f7
>3a1188	a5 08 85 21 a5 09 85 22 a5 0a 85 23 a9 00 85 24
>3a1198	ab 2b 28 60 08 e2 20 c2 10 a0 00 00 b7 21 f0 05
>3a11a8	c8 80 f9 84 90 c2 30 c4 27 90 13 f0 11 a5 8d 30
>3a11b8	0d f0 0b c4 8d b0 12 a5 27 d0 0e 4c 1d 12 20 cb
>3a11c8	0f e2 20 a9 00 87 14 80 39 20 cb 0f c2 30 18 a5
>3a11d8	21 65 27 85 21 a5 23 69 00 00 85 23 a0 00 00 e2
>3a11e8	20 a7 21 97 14 f0 1b c2 20 18 a5 21 69 01 00 85
>3a11f8	21 a5 23 69 00 00 85 23 c8 c4 8d d0 e2 a9 00 00
>3a1208	97 14 c2 20 a5 14 85 21 a5 16 85 23 e2 20 a9 02
>3a1218	85 25 20 44 11 28 60 48 5a 0b 08 08 c2 20 48 a9
>3a1228	00 08 5b 68 28 c2 30 a9 00 00 85 00 85 18 a9 01
>3a1238	00 85 02 85 1a ad 8a 0f 30 20 a0 02 00 b7 18 f0
>3a1248	0f c5 53 90 10 c5 57 f0 02 b0 05 20 77 12 80 e5
>3a1258	28 2b 7a 68 60 20 23 1a 80 db 08 c2 20 48 a9 00
>3a1268	08 5b 68 28 e2 20 a9 01 8f d1 08 00 dc d2 08 08
>3a1278	c2 30 85 21 64 23 20 12 10 a5 14 1a 85 21 a5 16
>3a1288	85 23 20 94 30 18 a5 18 69 04 00 85 00 a5 1a 69
>3a1298	00 00 85 02 e2 20 a9 20 20 18 00 c2 20 20 b6 12
>3a12a8	90 fb e2 20 a9 0d 20 18 00 20 23 1a 28 60 08 0b
>3a12b8	8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9
>3a12c8	00 48 ab 68 28 e2 20 c2 10 a7 00 f0 3a 30 05 20
>3a12d8	18 00 80 29 c2 20 29 7f 00 0a 0a 0a 18 69 7e 08
>3a12e8	85 08 a9 3a 00 69 00 00 85 0a 08 e2 20 48 a9 3a
>3a12f8	48 ab 68 28 a0 02 00 b7 08 aa 20 9b 02 c2 20 20
>3a1308	5a 19 ab 2b 28 18 60 ab 2b 28 38 60 08 c2 20 a9
>3a1318	ff 6f 85 1d a9 ff 7f 85 1f a9 ff ff 85 21 85 23
>3a1328	85 27 85 29 e2 20 85 25 85 2b 28 60 08 0b 8b 08
>3a1338	c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48
>3a1348	ab 68 28 c2 30 5a a4 1d bd 00 00 99 00 00 bd 02
>3a1358	00 99 02 00 e2 20 bd 04 00 99 04 00 c2 20 38 98
>3a1368	e9 05 00 85 1d 7a ab 2b 28 60 08 0b 8b 08 c2 20
>3a1378	48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68
>3a1388	28 c2 30 5a 18 a5 1d 69 05 00 85 1d a8 b9 00 00
>3a1398	9d 00 00 b9 02 00 9d 02 00 e2 20 b9 04 00 9d 04
>3a13a8	00 bd 00 00 7a ab 2b 28 60 08 0b 8b 08 c2 20 48
>3a13b8	a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28
>3a13c8	e2 20 c2 10 5a a4 1f 99 00 00 88 84 1f 7a ab 2b
>3a13d8	28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08
>3a13e8	e2 20 48 a9 00 48 ab 68 28 e2 20 c2 10 5a a4 1f
>3a13f8	c8 84 1f b9 00 00 c2 20 29 ff 00 7a ab 2b 28 60
>3a1408	08 e2 20 a9 01 20 b1 13 28 60 5a 08 8b 08 e2 20
>3a1418	48 a9 00 48 ab 68 28 e2 20 a4 1f b9 01 00 c9 01
>3a1428	d0 08 c2 20 e6 1f ab 28 7a 60 08 c2 20 48 a9 00
>3a1438	08 5b 68 28 e2 20 a9 02 8f d1 08 00 dc d2 08 08
>3a1448	0b 8b c2 20 48 08 c2 20 48 a9 00 08 5b 68 28 08
>3a1458	e2 20 48 a9 00 48 ab 68 28 e2 20 c2 10 a4 1f c0
>3a1468	ff 7f f0 11 20 07 08 85 0c b9 01 00 20 07 08 c5
>3a1478	0c f0 02 90 08 c2 20 68 ab 2b 28 18 60 c2 20 68
>3a1488	ab 2b 28 38 60 4c bf 04 08 e2 20 a9 00 8f 00 4d
>3a1498	00 a2 01 00 20 12 16 20 43 04 c2 20 a5 21 9f 00
>3a14a8	4d 00 e2 20 af 00 4d 00 1a 30 34 8f 00 4d 00 e8
>3a14b8	e8 20 7b 19 e2 20 a7 00 c9 8d f0 09 c9 2c d0 0a
>3a14c8	20 5a 19 80 cf 20 5a 19 28 60 08 c2 20 48 a9 00
>3a14d8	08 5b 68 28 e2 20 a9 02 8f d1 08 00 dc d2 08 08
>3a14e8	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d1 08
>3a14f8	00 dc d2 08 08 20 92 3b 90 23 e2 20 a5 e8 29 80
>3a1508	d0 06 20 06 3a 4c 23 15 e2 20 a9 8c 20 53 1a 20
>3a1518	08 14 20 90 14 20 51 3e 20 12 14 28 60 08 c2 20
>3a1528	48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 dc
>3a1538	d2 08 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a1548	c2 10 20 5a 19 a0 00 00 b7 00 f0 24 c9 22 f0 03
>3a1558	c8 80 f5 84 0c e2 20 a9 02 a6 0c e8 20 a6 0b a0
>3a1568	00 00 c4 0c f0 1f a7 00 97 be c8 20 5a 19 80 f2
>3a1578	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1
>3a1588	08 00 dc d2 08 a9 00 97 be c2 20 a5 be 85 21 e2
>3a1598	20 a5 c0 85 23 a9 02 85 25 20 5a 19 2b 28 60 08
>3a15a8	e2 20 a7 00 c2 20 29 ff 00 20 31 08 85 2d 20 08
>3a15b8	14 08 e2 20 48 a9 00 48 ab 68 28 20 cb 15 20 12
>3a15c8	14 28 60 20 5a 19 6c 2d 08 08 0b 8b c2 20 48 08
>3a15d8	c2 20 48 a9 00 08 5b 68 28 c2 30 a2 27 08 20 72
>3a15e8	13 a2 21 08 20 72 13 20 da 13 20 31 08 85 2d 08
>3a15f8	e2 20 48 a9 00 48 ab 68 28 20 0f 16 a2 21 08 20
>3a1608	34 13 68 ab 2b 28 60 6c 2d 08 08 08 c2 20 48 a9
>3a1618	00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 c2
>3a1628	10 da e2 20 a7 00 d0 03 4c d5 16 30 33 c9 20 d0
>3a1638	03 4c cf 16 c9 3a b0 04 c9 30 b0 56 c9 26 f0 52
>3a1648	c9 22 d0 03 4c e8 16 c9 5b b0 07 c9 41 90 03 4c
>3a1658	f4 16 c9 7b b0 07 c9 61 90 03 4c f4 16 4c d5 16
>3a1668	c9 8c f0 40 c9 8d f0 41 20 54 08 c9 30 d0 0c 20
>3a1678	a7 15 a2 21 08 20 34 13 4c 2a 16 c9 00 d0 4e a7
>3a1688	00 a6 1f e0 ff 7f f0 05 20 47 14 b0 12 20 b1 13
>3a1698	80 35 c2 20 20 8d 14 a2 21 08 20 34 13 80 83 20
>3a16a8	d1 15 80 dd 20 b1 13 80 1e e2 20 a4 1f c0 ff 7f
>3a16b8	f0 46 a4 1f b9 01 00 c9 01 f0 3d c9 8c f0 05 20
>3a16c8	d1 15 80 ee 20 da 13 20 5a 19 4c 2a 16 a6 1f e0
>3a16d8	ff 7f b0 24 bd 01 00 c9 01 f0 1d 20 d1 15 80 ed
>3a16e8	20 3a 15 a2 21 08 20 34 13 4c 2a 16 20 fc 14 a2
>3a16f8	21 08 20 34 13 4c 2a 16 a2 21 08 20 72 13 fa 28
>3a1708	60 08 0b 8b 08 e2 20 48 a9 00 48 ab 68 28 08 c2
>3a1718	20 48 a9 00 08 5b 68 28 c2 30 a9 fd 5f 85 31 ab
>3a1728	2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2
>3a1738	30 92 31 c6 31 c6 31 2b 28 60 08 c2 30 29 ff 00
>3a1748	20 2b 17 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68
>3a1758	28 c2 30 e6 31 e6 31 b2 31 2b 28 60 e2 20 c2 10
>3a1768	20 1a 02 af d1 08 00 0a c2 20 29 ff 00 a8 08 e2
>3a1778	20 48 a9 3a 48 ab 68 28 be b6 17 20 9b 02 c2 20
>3a1788	a5 d5 f0 27 a2 de 17 20 9b 02 08 e2 20 48 a9 00
>3a1798	48 ab 68 28 c2 20 af d5 08 00 8f 21 08 00 a9 00
>3a17a8	00 8f 23 08 00 20 b4 30 20 1a 02 4c 01 1f e2 17
>3a17b8	e5 17 eb 17 f8 17 06 18 14 18 27 18 3d 18 4d 18
>3a17c8	5c 18 69 18 7a 18 89 18 96 18 a4 18 b3 18 c4 18
>3a17d8	dd 18 f1 18 05 19 20 61 74 00 4f 4b 00 42 72 65
>3a17e8	61 6b 00 53 79 6e 74 61 78 20 65 72 72 6f 72 00
>3a17f8	4f 75 74 20 6f 66 20 6d 65 6d 6f 72 79 00 54 79
>3a1808	70 65 20 6d 69 73 6d 61 74 63 68 00 56 61 72 69
>3a1818	61 62 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 00 4c
>3a1828	69 6e 65 20 6e 75 6d 62 65 72 20 6e 6f 74 20 66
>3a1838	6f 75 6e 64 00 53 74 61 63 6b 20 75 6e 64 65 72
>3a1848	66 6c 6f 77 00 53 74 61 63 6b 20 6f 76 65 72 66
>3a1858	6c 6f 77 00 4f 75 74 20 6f 66 20 72 61 6e 67 65
>3a1868	00 49 6c 6c 65 67 61 6c 20 61 72 67 75 6d 65 6e
>3a1878	74 00 46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64
>3a1888	00 4e 6f 74 20 61 20 6e 75 6d 62 65 72 00 4d 61
>3a1898	74 68 20 6f 76 65 72 66 6c 6f 77 00 4d 61 74 68
>3a18a8	20 75 6e 64 65 72 66 6c 6f 77 00 44 69 76 69 73
>3a18b8	69 6f 6e 20 62 79 20 7a 65 72 6f 00 55 6e 61 62
>3a18c8	6c 65 20 74 6f 20 72 65 61 64 20 64 69 72 65 63
>3a18d8	74 6f 72 79 00 55 6e 61 62 6c 65 20 74 6f 20 6c
>3a18e8	6f 61 64 20 66 69 6c 65 00 55 6e 61 62 6c 65 20
>3a18f8	74 6f 20 73 61 76 65 20 66 69 6c 65 00 55 6e 61
>3a1908	62 6c 65 20 74 6f 20 64 65 6c 65 74 65 20 66 69
>3a1918	6c 65 00 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a1928	20 a9 00 85 d0 2b 28 60 0b 08 08 c2 20 48 a9 00
>3a1938	08 5b 68 28 08 c2 20 a9 64 17 8f d2 08 00 e2 20
>3a1948	a9 3a 8f d4 08 00 28 20 7e 2f 20 5f 2b 64 2f 28
>3a1958	2b 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 20
>3a1968	18 a5 00 69 01 00 85 00 e2 20 a5 02 69 00 85 02
>3a1978	2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a1988	20 a7 00 f0 0f c9 20 f0 06 c9 09 f0 02 80 05 20
>3a1998	5a 19 80 ed 2b 28 60 08 e2 20 a7 00 f0 09 c9 3a
>3a19a8	f0 05 20 5a 19 80 f3 28 60 08 e2 20 64 34 a7 00
>3a19b8	f0 19 c5 35 f0 2c c9 98 f0 1e c9 9c f0 1a c9 9b
>3a19c8	f0 1a c9 9d f0 16 20 5a 19 80 e3 20 23 1a c2 20
>3a19d8	a5 d5 f0 1d e2 20 80 d6 e6 34 80 ea c6 34 30 26
>3a19e8	80 e4 a5 33 30 06 a5 34 f0 02 80 da 20 5a 19 28
>3a19f8	60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a1a08	d1 08 00 dc d2 08 08 c2 20 48 a9 00 08 5b 68 28
>3a1a18	e2 20 a9 02 8f d1 08 00 dc d2 08 08 c2 30 a0 00
>3a1a28	00 b7 18 85 0c 18 a5 18 65 0c 85 18 a5 1a 69 00
>3a1a38	00 85 1a a0 02 00 b7 18 85 d5 18 a5 18 69 04 00
>3a1a48	85 00 a5 1a 69 00 00 85 02 28 60 08 e2 20 48 20
>3a1a58	7b 19 68 e2 20 c7 00 d0 08 20 5a 19 20 7b 19 28
>3a1a68	60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a1a78	d1 08 00 dc d2 08 08 e2 20 20 7b 19 e2 20 a7 00
>3a1a88	f0 10 c9 3a f0 0c c5 35 f0 05 20 5a 19 80 ef 28
>3a1a98	38 60 28 18 60 5a 08 e2 20 a0 00 00 b7 00 f0 0d
>3a1aa8	c9 3a f0 07 c9 20 d0 05 c8 80 f1 a9 00 28 7a 60
>3a1ab8	08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 20 14 13
>3a1ac8	e2 20 a9 00 85 da ad 8a 0f 30 41 a7 00 c9 3a d0
>3a1ad8	03 20 5a 19 20 7b 19 a7 00 d0 03 4c 54 1b 20 ee
>3a1ae8	02 b0 3e a7 00 10 10 20 54 08 85 0c c9 20 d0 03
>3a1af8	4c 42 1b a5 d0 f0 3d 08 c2 20 48 a9 00 08 5b 68
>3a1b08	28 e2 20 a9 02 8f d1 08 00 dc d2 08 08 c2 20 48
>3a1b18	a9 00 08 5b 68 28 e2 20 a9 01 8f d1 08 00 dc d2
>3a1b28	08 20 88 2f 4c 54 1b 08 e2 20 48 a9 00 48 ab 68
>3a1b38	28 6c 2d 08 a5 0c c9 10 d0 bd a7 00 20 31 08 c2
>3a1b48	20 85 2d 20 14 13 20 5a 19 20 2f 1b ab 2b 28 60
>3a1b58	08 58 20 1b 19 20 09 17 e2 20 9c 8a 0f c2 20 a5
>3a1b68	18 85 00 a5 1a 85 02 4c 96 1b 08 c2 20 a0 02 00
>3a1b78	b7 18 85 d5 e2 20 a5 da c9 03 f0 12 c2 20 18 a5
>3a1b88	18 69 04 00 85 00 e2 20 a5 1a 69 00 85 02 c2 20
>3a1b98	20 b8 1a e2 20 a5 da c9 03 f0 f3 c9 00 d0 27 e2
>3a1ba8	20 20 7b 19 a7 00 f0 1e c9 3a f0 15 08 c2 20 48
>3a1bb8	a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 dc d2
>3a1bc8	08 20 5a 19 80 c8 28 60 08 58 e2 20 a9 80 85 d0
>3a1bd8	9c 8a 0f 20 09 17 c2 30 64 2f a0 02 00 b7 18 f0
>3a1be8	29 20 72 1b e2 20 a5 da c9 01 f0 1e c9 02 f0 ea
>3a1bf8	c9 03 f0 e6 c2 20 a0 00 00 18 a5 18 77 18 85 18
>3a1c08	e2 20 a5 1a 69 00 85 1a 80 d0 e2 20 a9 00 85 d0
>3a1c18	28 60 08 c2 30 c2 20 a9 00 00 85 08 a9 01 00 85
>3a1c28	0a c2 20 a0 02 00 b7 08 f0 31 c5 21 f0 1e b0 2b
>3a1c38	c2 20 a0 00 00 18 a5 08 77 08 85 0c e2 20 a5 0a
>3a1c48	69 00 85 0a c2 20 a5 0c 85 08 80 d7 c2 20 a5 08
>3a1c58	85 18 e2 20 a5 0a 85 1a 28 38 60 28 18 60 08 e2
>3a1c68	20 a7 0c 87 08 c2 20 a5 0c c5 00 d0 08 e2 20 a5
>3a1c78	0e c5 02 f0 26 c2 20 18 a5 0c 69 01 00 85 0c e2
>3a1c88	20 a5 0e 69 00 85 0e c2 20 18 a5 08 69 01 00 85
>3a1c98	08 e2 20 a5 0a 69 00 85 0a 80 c4 28 60 08 e2 20
>3a1ca8	a7 0c 87 08 c2 20 a5 0c c5 00 d0 06 a5 0e c5 02
>3a1cb8	f0 26 c2 20 38 a5 0c e9 01 00 85 0c e2 20 a5 0e
>3a1cc8	e9 00 85 0e c2 20 38 a5 08 e9 01 00 85 08 e2 20
>3a1cd8	a5 0a e9 00 85 0a 80 c6 28 60 08 a0 00 00 c2 20
>3a1ce8	18 a5 08 77 08 85 0c e2 20 a5 0a 69 00 85 0e c2
>3a1cf8	20 18 a5 d7 69 04 00 85 00 e2 20 a5 d9 69 00 85
>3a1d08	02 a0 00 00 c2 20 38 a5 d7 f7 08 85 d7 e2 20 a5
>3a1d18	d9 e9 00 85 d9 20 66 1c 20 7e 2f 28 60 08 08 c2
>3a1d28	20 48 a9 00 08 5b 68 28 c2 30 a0 02 00 97 d7 18
>3a1d38	a5 d7 69 04 00 85 08 e2 20 a5 d9 69 00 85 0a e2
>3a1d48	20 a0 00 00 b7 18 97 08 f0 03 c8 80 f7 c2 20 98
>3a1d58	18 69 05 00 85 0c c2 20 a0 00 00 a5 0c 97 d7 c2
>3a1d68	20 18 a5 d7 65 0c 85 0c e2 20 a5 d9 69 00 85 d9
>3a1d78	c2 20 a5 0c 85 d7 c2 20 a0 00 00 a9 00 00 97 d7
>3a1d88	c8 c0 05 00 d0 f8 20 7e 2f 28 60 0b 08 08 c2 20
>3a1d98	48 a9 00 08 5b 68 28 c2 30 a9 00 00 85 08 a9 01
>3a1da8	00 85 0a a0 02 00 b7 08 f0 1d c5 d5 f0 25 b0 1d
>3a1db8	a0 00 00 18 a5 08 77 08 85 0c a5 0a 69 00 00 85
>3a1dc8	0a a5 0c 85 08 80 dc a9 00 00 28 2b 60 a9 01 00
>3a1dd8	28 2b 60 a9 02 00 28 2b 60 08 c2 30 a9 05 00 85
>3a1de8	10 a0 00 00 e2 20 b7 18 f0 07 c2 20 e6 10 c8 80
>3a1df8	f3 c2 20 a5 08 85 00 a5 0a 85 02 18 a5 d7 69 04
>3a1e08	00 85 0c a5 d9 69 00 00 85 0e 18 a5 d7 65 10 85
>3a1e18	d7 a5 d9 69 00 00 85 d9 18 a5 d7 69 04 00 85 08
>3a1e28	a5 d9 69 00 00 85 0a 20 a5 1c c2 20 a5 10 a0 00
>3a1e38	00 97 00 a5 d5 a0 02 00 97 00 18 a5 00 69 04 00
>3a1e48	85 00 a5 02 69 00 00 85 02 a0 00 00 e2 20 b7 18
>3a1e58	97 00 f0 03 c8 80 f7 20 7e 2f 28 60 08 c2 30 85
>3a1e68	d5 20 93 1d c9 00 00 f0 2c c9 01 00 f0 22 c2 20
>3a1e78	a5 08 48 a5 0a 48 20 e2 1c 68 85 0a 68 85 08 a5
>3a1e88	18 85 00 a5 1a 85 02 20 7b 19 e2 20 a7 00 f0 0a
>3a1e98	20 e1 1d 80 05 a5 d5 20 25 1d 28 60 8b 08 08 e2
>3a1ea8	20 48 a9 3a 48 ab 68 28 a2 f4 d1 20 9b 02 28 ab
>3a1eb8	60 08 e2 30 a9 01 20 1c 00 20 da 00 f0 06 c9 0d
>3a1ec8	f0 02 80 f5 28 60 0b 08 08 c2 20 48 a9 00 08 5b
>3a1ed8	68 28 c2 30 64 d5 a9 00 4f 85 18 a9 00 00 85 1a
>3a1ee8	20 75 05 c2 20 a5 d5 d0 05 20 58 1b 80 07 20 64
>3a1ef8	1e 28 2b 38 60 28 2b 18 60 c2 30 a2 ff fe 9a 20
>3a1f08	a4 1e 20 08 00 20 0c 00 a9 00 00 20 1c 00 20 ce
>3a1f18	1e b0 ef 80 ea e2 20 a5 25 c5 2b d0 06 c2 20 29
>3a1f28	ff 00 60 c2 20 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a1f38	20 a9 04 8f d1 08 00 dc d2 08 20 1d 1f c2 20 c9
>3a1f48	00 00 f0 1d c9 02 00 d0 03 4c a2 10 08 c2 20 48
>3a1f58	a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 dc d2
>3a1f68	08 18 a5 21 65 27 85 21 a5 23 65 29 85 23 60 38
>3a1f78	a5 21 e5 27 85 21 a5 23 e5 29 85 23 60 a5 21 8f
>3a1f88	08 01 00 a5 27 8f 0a 01 00 af 0c 01 00 85 21 af
>3a1f98	0e 01 00 85 23 60 a5 21 8f 12 01 00 a5 27 8f 10
>3a1fa8	01 00 af 14 01 00 85 21 60 a5 21 8f 12 01 00 a5
>3a1fb8	27 8f 10 01 00 af 16 01 00 85 21 60 c2 20 a5 21
>3a1fc8	25 27 85 21 a5 23 25 29 85 23 60 c2 20 a5 21 05
>3a1fd8	27 85 21 a5 23 05 29 85 23 60 c2 20 a5 21 49 ff
>3a1fe8	ff 85 21 a5 23 49 ff ff 85 23 60 c2 20 a5 23 c5
>3a1ff8	29 90 0b a5 21 c5 27 90 05 64 21 64 23 60 a9 ff
>3a2008	ff 85 21 85 23 60 c2 20 a5 29 c5 23 90 0b a5 27
>3a2018	c5 21 90 05 64 21 64 23 60 a9 ff ff 85 21 85 23
>3a2028	60 c2 20 a5 29 c5 23 d0 0e a5 27 c5 21 d0 08 a9
>3a2038	ff ff 85 21 85 23 60 64 21 64 23 60 c2 20 a5 29
>3a2048	c5 23 d0 0e a5 27 c5 21 d0 08 a9 ff ff 85 21 85
>3a2058	23 60 64 21 64 23 60 c2 20 a5 23 c5 29 90 10 d0
>3a2068	06 a5 21 c5 27 90 08 a9 ff ff 85 21 85 23 60 64
>3a2078	21 64 23 60 c2 20 a5 23 c5 29 90 0f f0 05 64 21
>3a2088	64 23 60 a5 21 c5 27 f0 02 b0 f3 a9 ff ff 85 21
>3a2098	85 23 60 08 e2 20 20 12 16 20 7e 04 20 ba 03 a5
>3a20a8	21 0a 0a 0a 0a 05 27 85 0c a9 2c 20 53 1a 20 12
>3a20b8	16 20 7e 04 20 ba 03 a5 21 0a 0a 0a 0a 05 27 85
>3a20c8	0d a9 2c 20 53 1a 20 12 16 20 7e 04 20 ba 03 a5
>3a20d8	21 0a 0a 0a 0a 05 27 85 0e af 0e 08 af 09 08 8f
>3a20e8	0e 08 af a5 0c 8f 04 08 af a5 0d 8f 02 08 af a5
>3a20f8	0e 8f 00 08 af af 0e 08 af 29 f7 8f 0e 08 af 28
>3a2108	60 08 e2 20 20 12 16 20 7e 04 20 ba 03 a5 21 0a
>3a2118	0a 0a 0a 05 27 85 0c a9 2c 20 53 1a 20 12 16 20
>3a2128	7e 04 20 ba 03 a5 21 0a 0a 0a 0a 05 27 85 0d a9
>3a2138	2c 20 53 1a 20 12 16 20 7e 04 20 ba 03 a5 21 0a
>3a2148	0a 0a 0a 05 27 85 0e af 0e 08 af 09 08 8f 0e 08
>3a2158	af a5 0c 8f 06 08 af a5 0d 8f 09 08 af a5 0e 8f
>3a2168	0a 08 af af 0e 08 af 29 f7 8f 0e 08 af 28 60 08
>3a2178	20 12 16 20 7e 04 e2 20 a5 21 29 0f 0a 0a 0a 0a
>3a2188	8f 53 08 00 a9 2c 20 53 1a 20 12 16 20 7e 04 a5
>3a2198	21 29 0f 0f 53 08 00 8f 1e 00 00 28 60 08 e2 20
>3a21a8	20 12 16 20 7e 04 a5 21 48 a9 2c 20 53 1a 20 12
>3a21b8	16 20 7e 04 a5 21 48 a9 2c 20 53 1a 20 12 16 20
>3a21c8	7e 04 a5 21 8f 08 00 af 68 8f 09 00 af 68 8f 0a
>3a21d8	00 af 28 60 08 e2 20 20 12 16 20 03 04 a5 21 f0
>3a21e8	1e a9 01 8f 04 00 af a9 20 8f 08 00 af 8f 09 00
>3a21f8	af a9 48 8f 0f 00 00 a9 34 8f 13 00 00 80 12 a9
>3a2208	00 8f 04 00 af a9 50 8f 0f 00 00 a9 3c 8f 13 00
>3a2218	00 a9 2c 85 35 20 7e 1a 90 35 20 5a 19 20 12 16
>3a2228	20 7e 04 a5 21 48 a9 2c 20 53 1a 20 12 16 20 7e
>3a2238	04 a5 21 48 a9 2c 20 53 1a 20 12 16 20 7e 04 a5
>3a2248	21 8f 05 00 af 68 8f 06 00 af 68 8f 07 00 af 28
>3a2258	60 08 c2 20 20 12 16 20 7e 04 a9 af 00 85 9e a5
>3a2268	21 c9 0a 00 b0 5c 0a aa bf df 22 3a 85 9c a9 2c
>3a2278	00 20 53 1a 20 12 16 20 7e 04 a5 21 0a 0a 18 65
>3a2288	9c 85 9c a9 2c 00 20 53 1a 20 12 16 20 7e 04 a0
>3a2298	02 00 a5 21 e2 20 97 9c a9 2c 20 53 1a 20 12 16
>3a22a8	20 7e 04 a0 01 00 a5 21 e2 20 97 9c a9 2c 20 53
>3a22b8	1a 20 12 16 20 7e 04 a0 00 00 a5 21 e2 20 97 9c
>3a22c8	28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a
>3a22d8	8f d1 08 00 dc d2 08 00 20 00 24 00 28 00 2c 00
>3a22e8	30 00 34 00 38 00 3c 40 1f 80 1f 08 20 12 16 20
>3a22f8	7e 04 a5 21 8f 00 00 af c2 20 a9 80 02 8f 08 f0
>3a2308	3a a9 e0 01 8f 0a f0 3a af 08 f0 3a 8f 08 01 00
>3a2318	af 0a f0 3a 8f 0a 01 00 af 0c 01 00 8f 0c f0 3a
>3a2328	e2 20 af 0e 01 00 8f 0e f0 3a 28 60 08 c2 20 20
>3a2338	12 16 20 7e 04 c2 20 a5 21 85 53 a9 2c 00 20 53
>3a2348	1a 20 12 16 20 7e 04 e2 20 a5 53 d0 05 a5 21 0a
>3a2358	80 04 a5 21 38 2a 8f 40 01 af c2 20 a9 2c 00 85
>3a2368	35 20 7e 1a b0 18 c2 20 08 c2 20 a9 00 00 85 21
>3a2378	a9 b0 00 85 23 e2 20 a9 00 85 25 28 80 08 c2 20
>3a2388	20 5a 19 20 12 16 e2 20 38 a5 23 8f 02 f0 3a e9
>3a2398	b0 30 42 8f 43 01 af 8f 06 f0 3a a5 21 8f 00 f0
>3a23a8	3a 8f 41 01 af 8f 04 f0 3a a5 22 8f 42 01 af 8f
>3a23b8	05 f0 3a 8f 01 f0 3a a9 00 8f 07 f0 3a 8f 03 f0
>3a23c8	3a c2 20 af 08 f0 3a 8f 44 01 af af 0a f0 3a 8f
>3a23d8	46 01 af 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a23e8	20 a9 0a 8f d1 08 00 dc d2 08 08 c2 20 af 04 f0
>3a23f8	3a 8f 05 04 af af 0c f0 3a 8f 08 04 af e2 20 af
>3a2408	06 f0 3a 8f 07 04 af af 0e f0 3a 8f 0a 04 af a9
>3a2418	00 8f 01 04 af a9 85 8f 00 04 af af 01 04 af 30
>3a2428	fa a9 00 8f 00 04 af 28 60 08 c2 20 a5 5b 8f 08
>3a2438	01 00 af 08 f0 3a 8f 0a 01 00 18 af 0c 01 00 65
>3a2448	57 85 0c af 0e 01 00 69 00 00 85 0e 18 a5 0c 6f
>3a2458	00 f0 3a 85 9c a5 0e 6f 02 f0 3a 85 9e e2 20 a5
>3a2468	53 87 9c 28 60 c2 20 a9 01 00 85 db 38 a5 5f e5
>3a2478	57 85 67 10 0b 49 ff ff 1a 85 67 a9 ff ff 85 db
>3a2488	a9 01 00 85 dd 38 a5 63 e5 5b 85 6b 10 0b 49 ff
>3a2498	ff 1a 85 6b a9 ff ff 85 dd a5 6b c5 67 b0 04 a5
>3a24a8	67 80 06 a5 6b 49 ff ff 1a 48 0a 68 6a 85 6f 20
>3a24b8	31 24 a5 57 c5 5f d0 06 a5 5b c5 63 f0 36 a5 6f
>3a24c8	85 73 a5 67 49 ff ff 1a c5 73 10 10 f0 0e 38 a5
>3a24d8	6f e5 6b 85 6f 18 a5 57 65 db 85 57 a5 73 c5 6b
>3a24e8	10 cd f0 cb 18 a5 6f 65 67 85 6f 18 a5 5b 65 dd
>3a24f8	85 5b 80 bb 60 08 a9 00 00 8f 00 04 af c2 20 a5
>3a2508	5b 8f 08 01 00 af 08 f0 3a 8f 0a 01 00 18 af 0c
>3a2518	01 00 65 57 85 0c e2 20 af 0e 01 00 69 00 85 0e
>3a2528	c2 20 18 af 04 f0 3a 65 0c 8f 05 04 af e2 20 af
>3a2538	06 f0 3a 65 0e 8f 07 04 af c2 20 38 a5 5f e5 57
>3a2548	85 0c 8f 08 04 af 38 af 08 f0 3a 8f 0e 04 af 38
>3a2558	a5 63 e5 5b 8f 0a 04 af a9 01 00 8f 0c 04 af e2
>3a2568	20 af 53 08 00 8f 01 04 af a9 87 8f 00 04 af af
>3a2578	01 04 af 30 fa a9 00 8f 00 04 af 28 60 08 08 c2
>3a2588	20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab
>3a2598	68 28 c2 30 20 12 16 20 03 04 a5 21 85 53 a9 2c
>3a25a8	00 20 53 1a 20 12 16 20 03 04 a5 21 85 57 a9 2c
>3a25b8	00 20 53 1a 20 12 16 20 7e 04 a5 21 85 5b 20 31
>3a25c8	24 28 60 08 08 c2 20 48 a9 00 08 5b 68 28 08 e2
>3a25d8	20 48 a9 00 48 ab 68 28 c2 30 20 12 16 20 03 04
>3a25e8	a5 21 85 57 a9 2c 00 20 53 1a 20 12 16 20 03 04
>3a25f8	a5 21 85 5b a9 2c 00 20 53 1a 20 12 16 20 03 04
>3a2608	a5 21 85 5f a9 2c 00 20 53 1a 20 12 16 20 03 04
>3a2618	a5 21 85 63 a9 2c 00 20 53 1a 20 12 16 20 7e 04
>3a2628	a5 21 85 53 20 6d 24 28 60 08 08 c2 20 48 a9 00
>3a2638	08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 30
>3a2648	20 12 16 20 03 04 a5 21 85 57 a9 2c 00 20 53 1a
>3a2658	20 12 16 20 03 04 a5 21 85 5b a9 2c 00 20 53 1a
>3a2668	20 12 16 20 03 04 a5 21 85 5f a9 2c 00 20 53 1a
>3a2678	20 12 16 20 03 04 a5 21 85 63 a9 2c 00 20 53 1a
>3a2688	20 12 16 20 7e 04 a5 21 85 53 20 fd 24 28 60 08
>3a2698	e2 20 a5 21 c9 12 b0 18 0a 0a 0a 18 69 00 85 9c
>3a26a8	a9 02 69 00 85 9d a9 af 69 00 85 9e 64 9f 28 60
>3a26b8	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1
>3a26c8	08 00 dc d2 08 08 e2 20 20 12 16 20 7e 04 20 97
>3a26d8	26 a5 21 8f 0e f0 3a a9 2c 20 53 1a 20 12 16 20
>3a26e8	7e 04 a5 21 c9 08 b0 4b 48 a9 2c 20 53 1a 20 12
>3a26f8	16 20 03 04 c2 20 38 a5 21 e9 00 00 85 21 a5 23
>3a2708	e9 b0 00 85 23 30 2c c2 20 a5 21 a0 01 00 97 9c
>3a2718	e2 20 a5 23 c8 c8 97 9c af 0e f0 3a aa bf 10 f0
>3a2728	3a 29 f1 85 0c 68 0a 29 0e 05 0c 87 9c 9f 10 f0
>3a2738	3a 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a2748	09 8f d1 08 00 dc d2 08 08 c2 20 20 12 16 20 7e
>3a2758	04 20 97 26 a9 2c 00 20 53 1a 20 12 16 20 03 04
>3a2768	a5 21 a0 04 00 97 9c a9 2c 00 20 53 1a 20 12 16
>3a2778	20 03 04 a5 21 a0 06 00 97 9c 28 60 08 c2 20 20
>3a2788	12 16 20 7e 04 20 97 26 a5 21 8f 0e f0 3a a9 2c
>3a2798	00 20 53 1a 20 12 16 20 03 04 a5 21 48 a9 2c 00
>3a27a8	85 35 20 7e 1a b0 1c af 0e f0 3a aa bf 10 f0 3a
>3a27b8	29 fe 00 85 0c 68 29 01 00 05 0c 9f 10 f0 3a 87
>3a27c8	9c 80 31 e2 20 20 5a 19 20 12 16 20 7e 04 a5 21
>3a27d8	c9 08 b0 22 0a 0a 0a 0a 85 0c 68 29 01 05 0c 85
>3a27e8	0c af 0e f0 3a aa bf 10 f0 3a 29 8e 05 0c 87 9c
>3a27f8	9f 10 f0 3a 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a2808	e2 20 a9 09 8f d1 08 00 dc d2 08 08 20 7b 19 e2
>3a2818	20 a7 00 d0 03 4c a7 28 c9 3a d0 03 4c a7 28 c9
>3a2828	22 d0 0b 20 3a 15 20 94 30 a9 3b 20 53 1a 20 ee
>3a2838	02 90 37 20 92 3b 90 32 a9 3f 20 18 00 a9 20 20
>3a2848	18 00 20 10 00 e2 20 a5 e8 c9 02 f0 32 c9 00 f0
>3a2858	51 c9 01 f0 4c 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a2868	20 a9 04 8f d1 08 00 dc d2 08 08 c2 20 48 a9 00
>3a2878	08 5b 68 28 e2 20 a9 02 8f d1 08 00 dc d2 08 c2
>3a2888	20 a9 00 4c 85 21 a9 00 00 85 23 e2 20 a9 02 85
>3a2898	25 20 44 11 c2 20 20 2f 3b a9 0d 00 20 18 00 28
>3a28a8	60 ea c2 20 a5 00 85 3e a5 02 85 40 a9 00 4c 85
>3a28b8	00 a9 00 00 85 02 20 bf 04 c2 20 a5 3e 85 00 a5
>3a28c8	40 85 02 80 cf 08 20 7b 19 e2 20 a7 00 f0 49 c9
>3a28d8	3a f0 45 20 ee 02 90 42 20 92 3b 90 3d 20 14 00
>3a28e8	e2 20 8f 00 4e 00 a9 00 8f 01 4e 00 c2 20 a9 00
>3a28f8	4e 85 21 a9 00 00 85 23 e2 20 a9 02 85 25 20 44
>3a2908	11 20 2f 3b 20 7b 19 a7 00 f0 0d c9 3a f0 09 c9
>3a2918	2c d0 07 20 5a 19 80 ae 28 60 08 c2 20 48 a9 00
>3a2928	08 5b 68 28 e2 20 a9 02 8f d1 08 00 dc d2 08 08
>3a2938	20 12 16 20 03 04 e2 20 a9 5c 85 a0 c2 20 a5 21
>3a2948	85 a1 e2 20 a5 23 85 a3 e2 20 a9 2c 85 35 20 7e
>3a2958	1a 90 41 20 5a 19 20 12 16 20 43 04 c2 20 a5 21
>3a2968	85 53 e2 20 a9 2c 85 35 20 7e 1a 90 27 20 5a 19
>3a2978	20 12 16 20 43 04 c2 20 a5 21 85 57 e2 20 a9 2c
>3a2988	85 35 20 7e 1a 90 0d 20 5a 19 20 12 16 20 43 04
>3a2998	c2 20 a4 21 a6 57 a5 53 0b 8b 08 22 a0 08 00 28
>3a29a8	ab 2b 20 9f 19 28 60 08 c2 20 48 a9 00 08 5b 68
>3a29b8	28 e2 20 a9 04 8f d1 08 00 dc d2 08 08 e2 20 20
>3a29c8	7b 19 20 92 3b 90 64 a9 8c 20 53 1a a9 01 20 b1
>3a29d8	13 a2 01 00 a9 00 8f 00 4d 00 20 12 16 20 43 04
>3a29e8	c2 20 a5 21 9f 00 4d 00 e2 20 af 00 4d 00 1a 8f
>3a29f8	00 4d 00 30 4b e8 e8 20 7b 19 a7 00 c9 2c f0 25
>3a2a08	c9 8d d0 27 20 5a 19 20 40 3c c2 20 a5 be 85 21
>3a2a18	e2 20 a5 c0 85 23 64 24 a5 e8 09 80 85 e8 85 25
>3a2a28	20 2f 3b 28 60 20 5a 19 4c e2 29 08 c2 20 48 a9
>3a2a38	00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 dc d2 08
>3a2a48	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d1
>3a2a58	08 00 dc d2 08 08 20 7b 19 e2 20 a7 00 f0 28 c9
>3a2a68	3a f0 24 20 ee 02 90 21 20 92 3b 90 1c 20 a6 2a
>3a2a78	20 2f 3b 20 7b 19 a7 00 f0 0d c9 3a f0 09 c9 2c
>3a2a88	d0 07 20 5a 19 80 cf 28 60 08 c2 20 48 a9 00 08
>3a2a98	5b 68 28 e2 20 a9 02 8f d1 08 00 dc d2 08 08 a5
>3a2aa8	02 85 40 a5 00 85 3e a5 1a 85 44 a5 18 85 42 c2
>3a2ab8	20 a5 38 d0 04 a5 36 f0 44 a5 36 85 00 a5 38 85
>3a2ac8	02 a5 3a 85 18 a5 3c 85 1a e2 20 a7 00 f0 49 c9
>3a2ad8	3a f0 45 c9 2c d0 03 20 5a 19 20 7b 19 a7 00 c9
>3a2ae8	22 f0 44 20 07 03 b0 44 08 c2 20 48 a9 00 08 5b
>3a2af8	68 28 e2 20 a9 02 8f d1 08 00 dc d2 08 c2 20 a9
>3a2b08	00 00 85 18 a9 01 00 85 1a 18 a5 18 69 04 00 85
>3a2b18	00 a5 1a 69 00 00 85 02 e2 20 a9 80 85 33 a9 a8
>3a2b28	85 35 20 b1 19 80 b3 20 3a 15 80 03 20 8d 14 c2
>3a2b38	20 a5 00 85 36 a5 02 85 38 a5 18 85 3a a5 1a 85
>3a2b48	3c a5 42 85 18 a5 44 85 1a a5 3e 85 00 a5 40 85
>3a2b58	02 28 60 20 9f 19 60 64 36 64 38 64 3a 64 3c 60
>3a2b68	20 24 00 60 20 12 16 c2 20 a5 23 48 a5 21 48 e2
>3a2b78	20 a7 00 c9 2c d0 22 20 5a 19 20 12 16 c2 20 a5
>3a2b88	24 d0 2b 68 85 08 68 85 0a c2 20 a5 21 87 08 e2
>3a2b98	20 a0 02 00 a5 23 97 08 60 08 c2 20 48 a9 00 08
>3a2ba8	5b 68 28 e2 20 a9 02 8f d1 08 00 dc d2 08 08 c2
>3a2bb8	20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08 00
>3a2bc8	dc d2 08 20 12 16 c2 20 a5 23 48 a5 21 48 e2 20
>3a2bd8	a7 00 c9 2c d0 19 20 5a 19 20 12 16 c2 20 a5 23
>3a2be8	d0 22 68 85 08 68 85 0a c2 20 a5 21 87 08 60 08
>3a2bf8	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08
>3a2c08	00 dc d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a2c18	a9 09 8f d1 08 00 dc d2 08 20 12 16 c2 20 a5 23
>3a2c28	48 a5 21 48 e2 20 a7 00 c9 2c d0 1f 20 5a 19 20
>3a2c38	12 16 e2 20 a5 22 d0 28 c2 20 a5 23 d0 22 68 85
>3a2c48	08 68 85 0a e2 20 a5 21 87 08 60 08 c2 20 48 a9
>3a2c58	00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 dc d2 08
>3a2c68	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1
>3a2c78	08 00 dc d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a2c88	20 a9 01 8f d1 08 00 dc d2 08 08 e2 20 a7 00 f0
>3a2c98	05 20 5a 19 80 f7 28 60 08 28 60 08 28 60 08 28
>3a2ca8	60 08 c2 20 a5 1a 20 2b 17 a5 18 20 2b 17 a5 02
>3a2cb8	48 a5 00 48 20 9f 19 a5 02 20 2b 17 a5 00 20 2b
>3a2cc8	17 68 85 00 68 85 02 20 7b 19 20 92 3b b0 15 08
>3a2cd8	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 05 8f d1 08
>3a2ce8	00 dc d2 08 e2 20 a5 e8 20 42 17 a5 e7 20 42 17
>3a2cf8	c2 20 a5 e5 20 2b 17 20 7b 19 e2 20 a7 00 c9 87
>3a2d08	d0 6a a5 e8 c9 00 f0 04 c9 01 f0 00 20 5a 19 20
>3a2d18	12 16 20 2f 3b e2 20 a9 99 20 53 1a 20 12 16 c2
>3a2d28	20 a5 25 20 2b 17 a5 23 20 2b 17 a5 21 20 2b 17
>3a2d38	e2 20 a9 9a 85 35 20 7e 1a 90 1b 20 5a 19 20 12
>3a2d48	16 e2 20 a5 25 20 2b 17 c2 20 a5 23 20 2b 17 a5
>3a2d58	21 20 2b 17 80 14 c2 20 a9 00 00 20 2b 17 a9 00
>3a2d68	00 20 2b 17 a9 01 00 20 2b 17 28 60 08 c2 20 48
>3a2d78	a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 dc d2
>3a2d88	08 08 8b 08 e2 20 48 a9 00 48 ab 68 28 08 c2 20
>3a2d98	48 a9 00 08 5b 68 28 c2 30 a4 31 c8 c8 c2 20 b9
>3a2da8	0c 00 85 e5 b9 0e 00 e2 20 85 e7 b9 10 00 85 e8
>3a2db8	c2 20 5a 20 06 3a 7a c2 20 b9 00 00 85 27 b9 02
>3a2dc8	00 85 29 e2 20 b9 04 00 85 2b c2 20 5a 20 42 1f
>3a2dd8	20 2f 3b 7a c2 20 b9 06 00 85 27 b9 08 00 85 29
>3a2de8	e2 20 b9 0a 00 85 2b c2 20 b9 02 00 30 0a 20 7c
>3a2df8	20 20 f0 03 f0 28 80 08 20 5f 20 20 f0 03 f0 1e
>3a2e08	c2 20 b9 12 00 85 00 b9 14 00 85 02 b9 16 00 85
>3a2e18	18 b9 18 00 85 1a e2 20 a9 03 85 da 80 17 a2 21
>3a2e28	08 20 72 13 c2 20 18 a5 31 69 1a 00 85 31 a5 33
>3a2e38	69 00 00 85 33 ab 28 60 08 a5 18 48 a5 1a 48 20
>3a2e48	7b 19 20 bf 04 a5 21 f0 26 20 1a 1c 90 38 e2 20
>3a2e58	a9 02 85 da 20 9f 19 c2 20 68 20 2b 17 68 20 2b
>3a2e68	17 a5 02 20 2b 17 a5 00 20 2b 17 e6 2f 28 60 68
>3a2e78	68 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a2e88	d1 08 00 dc d2 08 68 68 08 c2 20 48 a9 00 08 5b
>3a2e98	68 28 e2 20 a9 06 8f d1 08 00 dc d2 08 08 c2 30
>3a2ea8	a5 2f f0 1e 20 4d 17 85 00 20 4d 17 85 02 20 4d
>3a2eb8	17 85 18 20 4d 17 85 1a c6 2f e2 20 a9 03 85 da
>3a2ec8	28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 07
>3a2ed8	8f d1 08 00 dc d2 08 08 20 12 16 20 f0 03 f0 1c
>3a2ee8	e2 20 a9 94 20 53 1a 20 bf 04 20 f0 03 f0 12 20
>3a2ef8	1a 1c 90 22 e2 20 a9 02 85 da 80 03 20 9f 19 28
>3a2f08	60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a2f18	d1 08 00 dc d2 08 08 c2 20 48 a9 00 08 5b 68 28
>3a2f28	e2 20 a9 06 8f d1 08 00 dc d2 08 08 e2 20 a9 01
>3a2f38	85 da 28 60 08 20 7b 19 20 bf 04 a5 21 f0 0d 20
>3a2f48	1a 1c 90 1d e2 20 a9 02 85 da 28 60 08 c2 20 48
>3a2f58	a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 dc d2
>3a2f68	08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 06 8f
>3a2f78	d1 08 00 dc d2 08 20 14 13 20 7e 0b 20 05 39 60
>3a2f88	08 a7 00 10 03 20 5a 19 20 92 3b b0 03 4c ff 2f
>3a2f98	e2 20 20 9d 1a c9 8c d0 0e a9 8c 20 53 1a a9 00
>3a2fa8	8f 00 4d 00 20 90 14 20 7b 19 e2 20 a7 00 c9 87
>3a2fb8	f0 03 4c ff 2f 20 5a 19 a5 e8 48 a5 e7 48 a5 e6
>3a2fc8	48 a5 e5 48 20 12 16 68 85 e5 68 85 e6 68 85 e7
>3a2fd8	68 85 e8 29 80 f0 1b 20 78 39 90 30 c2 20 a0 09
>3a2fe8	00 b7 08 85 be e2 20 c8 c8 b7 08 85 c0 20 03 3e
>3a2ff8	80 03 20 2f 3b 28 60 08 c2 20 48 a9 00 08 5b 68
>3a3008	28 e2 20 a9 02 8f d1 08 00 dc d2 08 08 c2 20 48
>3a3018	a9 00 08 5b 68 28 e2 20 a9 05 8f d1 08 00 dc d2
>3a3028	08 08 e2 20 20 9d 1a c9 00 f0 5c 20 12 16 e2 20
>3a3038	a5 25 c9 ff f0 14 c9 02 d0 05 20 94 30 80 0b c9
>3a3048	00 d0 05 20 b4 30 80 02 80 40 20 7b 19 a7 00 f0
>3a3058	36 c9 3a f0 32 c9 2c f0 19 c9 3b f0 1a 08 c2 20
>3a3068	48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 dc
>3a3078	d2 08 a9 09 20 18 00 20 5a 19 20 7b 19 a7 00 f0
>3a3088	09 c9 3a f0 05 80 a4 20 1a 02 28 60 08 8b 08 c2
>3a3098	20 48 a9 00 08 5b 68 28 e2 20 c2 10 a0 00 00 b7
>3a30a8	21 f0 06 20 18 00 c8 80 f6 ab 28 60 08 c2 20 20
>3a30b8	12 10 a5 14 85 21 a5 16 85 23 20 94 30 28 60 08
>3a30c8	e2 20 85 b3 4a 4a 4a 4a 29 0f 18 69 30 97 14 c8
>3a30d8	a5 b3 29 0f 18 69 30 97 14 c8 28 60 e2 20 a9 8c
>3a30e8	20 53 1a 08 20 12 16 e2 20 c2 10 af 0e 08 af 09
>3a30f8	08 8f 0e 08 af 20 cb 0f a0 00 00 af 06 08 af 20
>3a3108	c7 30 a9 2f 97 14 c8 af 09 08 af 20 c7 30 a9 2f
>3a3118	97 14 c8 af 0a 08 af 20 c7 30 a9 00 97 14 af 0e
>3a3128	08 af 29 f7 8f 0e 08 af c2 20 a5 14 85 21 a5 16
>3a3138	85 23 e2 20 a9 02 85 25 20 44 11 28 e2 20 20 5a
>3a3148	19 60 e2 20 a9 8c 20 53 1a 08 20 12 16 e2 20 c2
>3a3158	10 af 0e 08 af 09 08 8f 0e 08 af 20 cb 0f a0 00
>3a3168	00 af 04 08 af 20 c7 30 a9 3a 97 14 c8 af 02 08
>3a3178	af 20 c7 30 a9 3a 97 14 c8 af 00 08 af 20 c7 30
>3a3188	a9 00 97 14 af 0e 08 af 29 f7 8f 0e 08 af c2 20
>3a3198	a5 14 85 21 a5 16 85 23 e2 20 a9 02 85 25 20 44
>3a31a8	11 28 e2 20 20 5a 19 60 08 c2 20 20 12 16 20 03
>3a31b8	04 c2 20 a5 21 49 ff ff 85 21 a5 23 49 ff ff 85
>3a31c8	23 e6 21 d0 03 e6 23 00 28 60 e2 20 a9 8c 20 53
>3a31d8	1a 08 c2 30 20 12 16 20 23 04 c2 20 a5 23 48 a5
>3a31e8	21 48 20 7b 19 e2 20 a7 00 c9 2c f0 03 4c 49 32
>3a31f8	20 5a 19 20 12 16 20 43 04 c2 20 a5 21 48 20 7b
>3a3208	19 e2 20 a7 00 c9 2c f0 03 4c 49 32 20 5a 19 20
>3a3218	12 16 20 43 04 c2 20 a5 21 85 8d e2 20 a5 23 85
>3a3228	8f c2 20 68 85 27 a9 00 00 85 29 68 85 21 68 85
>3a3238	23 e2 20 a9 02 85 25 20 9c 11 e2 20 20 5a 19 28
>3a3248	60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a3258	d1 08 00 dc d2 08 08 c2 20 48 a9 00 08 5b 68 28
>3a3268	e2 20 a9 09 8f d1 08 00 dc d2 08 e2 20 a9 8c 20
>3a3278	53 1a 08 c2 30 20 12 16 e2 20 a5 25 c9 02 f0 03
>3a3288	4c f7 32 c2 20 a5 23 48 a5 21 48 20 7b 19 e2 20
>3a3298	a7 00 c9 2c f0 03 4c 0c 33 20 5a 19 20 12 16 e2
>3a32a8	20 a5 25 c9 00 d0 48 c2 20 a5 21 85 8d c2 20 68
>3a32b8	85 21 68 85 23 e2 20 a9 02 85 25 e2 20 a0 00 00
>3a32c8	b7 21 f0 03 c8 80 f9 c2 20 98 38 e5 8d 30 09 85
>3a32d8	27 a9 00 00 85 29 80 07 a9 00 00 85 27 85 29 e2
>3a32e8	20 a9 00 85 2b 20 9c 11 e2 20 20 5a 19 28 60 08
>3a32f8	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08
>3a3308	00 dc d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a3318	a9 02 8f d1 08 00 dc d2 08 08 c2 20 48 a9 00 08
>3a3328	5b 68 28 e2 20 a9 09 8f d1 08 00 dc d2 08 e2 20
>3a3338	a9 8c 20 53 1a 08 c2 30 20 12 16 e2 20 a5 25 c9
>3a3348	02 f0 03 4c a2 33 c2 20 a5 23 48 a5 21 48 20 7b
>3a3358	19 e2 20 a7 00 c9 2c f0 03 4c b7 33 20 5a 19 20
>3a3368	12 16 e2 20 a5 25 c9 00 d0 30 c2 20 a5 21 85 8d
>3a3378	c2 20 a9 00 00 85 27 a9 00 00 85 29 e2 20 a9 00
>3a3388	85 2b c2 20 68 85 21 68 85 23 e2 20 a9 02 85 25
>3a3398	20 9c 11 e2 20 20 5a 19 28 60 08 c2 20 48 a9 00
>3a33a8	08 5b 68 28 e2 20 a9 04 8f d1 08 00 dc d2 08 08
>3a33b8	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08
>3a33c8	00 dc d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a33d8	a9 09 8f d1 08 00 dc d2 08 e2 20 a9 8c 20 53 1a
>3a33e8	20 12 16 c2 10 e2 20 a5 25 c9 02 d0 23 c2 20 a5
>3a33f8	00 85 3e a5 02 85 40 a5 21 85 00 a5 23 85 02 20
>3a3408	bf 04 a5 3e 85 00 a5 40 85 02 e2 20 20 5a 19 60
>3a3418	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1
>3a3428	08 00 dc d2 08 e2 20 a9 8c 20 53 1a 08 20 12 16
>3a3438	c2 10 e2 20 a5 25 c9 00 d0 1d 20 12 10 c2 20 a5
>3a3448	14 85 21 a5 16 85 23 e2 20 a9 02 85 25 20 44 11
>3a3458	28 e2 20 20 5a 19 60 08 c2 20 48 a9 00 08 5b 68
>3a3468	28 e2 20 a9 04 8f d1 08 00 dc d2 08 e2 20 a9 8c
>3a3478	20 53 1a 08 20 12 16 20 23 04 c2 20 64 0c 64 0e
>3a3488	e2 30 a0 00 b7 21 c9 20 f0 04 c9 24 d0 03 c8 80
>3a3498	f3 b7 21 20 18 03 90 1e c2 20 06 0c 26 0e 06 0c
>3a34a8	26 0e 06 0c 26 0e 06 0c 26 0e e2 20 20 39 03 05
>3a34b8	0c 85 0c c8 80 db c2 20 a5 0c 85 21 a5 0e 85 23
>3a34c8	e2 20 a9 00 85 25 28 e2 20 20 5a 19 60 e2 20 a9
>3a34d8	8c 20 53 1a 08 20 12 16 20 03 04 20 cb 0f e2 30
>3a34e8	a0 ff a9 00 97 14 88 a5 21 29 0f aa bf 00 d0 3a
>3a34f8	97 14 88 a5 21 29 f0 4a 4a 4a 4a aa bf 00 d0 3a
>3a3508	97 14 88 a5 22 85 21 a5 23 85 22 a5 24 85 23 a9
>3a3518	00 85 24 a5 21 d0 d0 a5 22 d0 cc a5 23 d0 c8 98
>3a3528	38 65 14 85 21 a5 15 85 22 a5 16 85 23 a5 17 85
>3a3538	24 a9 02 85 25 20 44 11 28 e2 20 20 5a 19 60 08
>3a3548	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08
>3a3558	00 dc d2 08 e2 20 a9 8c 20 53 1a 20 12 16 e2 20
>3a3568	a5 25 c9 02 d0 1f 8b a5 23 48 ab c2 10 a6 21 20
>3a3578	8f 10 ab 84 21 c2 20 64 23 e2 20 a9 00 85 25 e2
>3a3588	20 20 5a 19 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a3598	20 a9 04 8f d1 08 00 dc d2 08 e2 20 a9 8c 20 53
>3a35a8	1a 20 12 16 e2 20 a5 25 c9 00 d0 12 e2 20 a7 21
>3a35b8	85 21 64 22 64 23 64 2e e2 20 20 5a 19 60 08 c2
>3a35c8	20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00
>3a35d8	dc d2 08 e2 20 a9 8c 20 53 1a 20 12 16 e2 20 a5
>3a35e8	25 c9 00 d0 1d c2 20 a7 21 85 0c e2 20 a0 02 00
>3a35f8	b7 21 85 23 64 24 c2 20 a5 0c 85 21 e2 20 20 5a
>3a3608	19 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>3a3618	8f d1 08 00 dc d2 08 e2 20 a9 8c 20 53 1a 20 12
>3a3628	16 e2 20 a5 25 c9 00 d0 0e c2 20 a7 21 85 21 64
>3a3638	23 e2 20 20 5a 19 60 08 c2 20 48 a9 00 08 5b 68
>3a3648	28 e2 20 a9 04 8f d1 08 00 dc d2 08 e2 20 a9 8c
>3a3658	20 53 1a 20 12 16 e2 20 a5 25 c9 00 d0 24 20 cb
>3a3668	0f a5 21 87 14 a9 00 a0 01 00 97 14 c2 20 a5 14
>3a3678	85 21 a5 16 85 23 e2 20 a9 02 85 25 e2 20 20 5a
>3a3688	19 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>3a3698	8f d1 08 00 dc d2 08 e2 20 a9 8c 20 53 1a 20 12
>3a36a8	16 e2 20 a5 25 c9 02 d0 14 a7 21 85 21 64 22 64
>3a36b8	23 64 24 a9 00 85 25 e2 20 20 5a 19 60 08 c2 20
>3a36c8	48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 dc
>3a36d8	d2 08 e2 20 a9 8c 20 53 1a 20 12 16 e2 20 a5 25
>3a36e8	c9 00 d0 39 e2 20 a5 24 d0 48 a5 23 d0 44 a5 22
>3a36f8	d0 40 c2 10 20 cb 0f a4 21 e2 20 a9 00 97 14 88
>3a3708	30 07 a9 20 97 14 88 10 fb a9 02 85 25 c2 20 a5
>3a3718	14 85 21 a5 16 85 23 e2 20 20 5a 19 60 08 c2 20
>3a3728	48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 dc
>3a3738	d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09
>3a3748	8f d1 08 00 dc d2 08 e2 20 a9 8c 20 53 1a 20 12
>3a3758	16 e2 20 a5 25 c9 00 d0 39 e2 20 a5 24 d0 48 a5
>3a3768	23 d0 44 a5 22 d0 40 c2 10 20 cb 0f a4 21 e2 20
>3a3778	a9 00 97 14 88 30 07 a9 09 97 14 88 10 fb a9 02
>3a3788	85 25 c2 20 a5 14 85 21 a5 16 85 23 e2 20 20 5a
>3a3798	19 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>3a37a8	8f d1 08 00 dc d2 08 08 c2 20 48 a9 00 08 5b 68
>3a37b8	28 e2 20 a9 09 8f d1 08 00 dc d2 08 e2 20 a9 8c
>3a37c8	20 53 1a 20 12 16 20 03 04 c2 20 a5 23 10 17 49
>3a37d8	ff ff 85 23 a5 21 49 ff ff 18 69 01 00 85 21 a5
>3a37e8	23 69 00 00 85 23 e2 20 20 5a 19 60 e2 20 a9 8c
>3a37f8	20 53 1a 20 12 16 e2 20 a5 25 c9 00 d0 25 c2 20
>3a3808	a5 23 30 12 d0 04 a5 21 f0 13 a9 00 00 85 23 a9
>3a3818	01 00 85 21 80 07 a9 ff ff 85 23 85 21 e2 20 20
>3a3828	5a 19 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a3838	04 8f d1 08 00 dc d2 08 00 ea 60 08 0b 08 c2 20
>3a3848	48 a9 00 08 5b 68 28 c2 30 c2 20 a9 00 00 85 d7
>3a3858	e2 20 a9 01 85 d9 c2 30 a9 00 00 a0 00 00 97 d7
>3a3868	a0 02 00 97 d7 a0 04 00 97 d7 20 30 19 2b 28 60
>3a3878	8b 08 c2 20 a9 00 00 85 18 a9 01 00 85 1a 20 30
>3a3888	19 20 d0 1b 28 ab 60 08 c2 20 64 53 a9 ff 7f 85
>3a3898	57 20 1a 02 20 9d 1a 29 ff 00 c9 00 00 f0 2c c9
>3a38a8	81 00 f0 1a 20 7b 19 20 bf 04 a5 21 85 53 20 9d
>3a38b8	1a 29 ff 00 c9 00 00 f0 12 c9 81 00 d0 2a 20 53
>3a38c8	1a 20 7b 19 20 bf 04 a5 21 85 57 a5 1a 48 a5 18
>3a38d8	48 a5 02 48 a5 00 48 20 1f 12 68 85 00 68 85 02
>3a38e8	68 85 18 68 85 1a 28 60 08 c2 20 48 a9 00 08 5b
>3a38f8	68 28 e2 20 a9 02 8f d1 08 00 dc d2 08 08 08 c2
>3a3908	20 48 a9 00 08 5b 68 28 c2 20 64 e2 64 e5 e2 20
>3a3918	64 e4 64 e7 64 e8 c2 20 38 a5 d7 69 04 00 85 df
>3a3928	e2 20 a5 d9 69 00 85 e1 28 60 c9 5f f0 1a c9 3a
>3a3938	b0 04 c9 30 b0 12 c9 5b b0 04 c9 41 b0 0a c9 7b
>3a3948	b0 04 c9 61 b0 02 18 60 38 60 08 e2 20 c2 10 a0
>3a3958	00 00 b7 0c f0 0a d7 e5 d0 13 c8 c0 08 00 d0 f2
>3a3968	b7 e5 20 62 03 20 32 39 b0 03 28 38 60 28 18 60
>3a3978	08 e2 20 c2 10 a0 00 00 a2 00 00 b7 e5 f0 0b 20
>3a3988	62 03 9f 00 4e 00 c8 e8 80 f1 a9 00 9f 00 4e 00
>3a3998	c2 20 a9 00 4e 85 e5 e2 20 a9 00 85 e7 c2 20 a5
>3a39a8	e2 85 08 d0 06 e2 20 a5 e4 f0 4d e2 20 a5 e4 85
>3a39b8	0a a5 e8 a0 00 00 d7 08 d0 17 c2 20 18 a5 08 69
>3a39c8	01 00 85 0c e2 20 a5 0a 69 00 85 0e 20 52 39 b0
>3a39d8	2a a0 0d 00 c2 20 b7 08 85 0c c8 c8 e2 20 b7 08
>3a39e8	85 0e d0 06 c2 20 a5 0c f0 0e c2 20 a5 0c 85 08
>3a39f8	e2 20 a5 0e 85 0a 80 b9 28 18 60 28 38 60 08 20
>3a3a08	78 39 b0 15 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a3a18	a9 05 8f d1 08 00 dc d2 08 c2 30 a0 09 00 b7 08
>3a3a28	85 21 c8 c8 b7 08 85 23 e2 20 a0 00 00 b7 08 85
>3a3a38	25 28 60 08 c2 20 18 a5 df 69 10 00 85 08 e2 20
>3a3a48	a5 e1 69 00 85 0a c5 ba 90 1d c2 20 a5 08 c5 b8
>3a3a58	90 15 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09
>3a3a68	8f d1 08 00 dc d2 08 c2 20 a5 df 85 be e2 20 a5
>3a3a78	e1 85 c0 c2 20 a5 08 85 df e2 20 a5 0a 85 e1 28
>3a3a88	60 08 e2 20 a5 25 c5 e8 f0 15 08 c2 20 48 a9 00
>3a3a98	08 5b 68 28 e2 20 a9 04 8f d1 08 00 dc d2 08 c2
>3a3aa8	10 20 3b 3a c2 30 18 a5 be 69 01 00 85 08 e2 20
>3a3ab8	a5 c0 69 00 85 0a a0 00 00 a9 00 97 08 c8 c0 08
>3a3ac8	00 d0 f8 a0 00 00 b7 e5 f0 10 20 62 03 20 32 39
>3a3ad8	90 08 97 08 c8 c0 08 00 d0 ec c2 20 a0 09 00 a5
>3a3ae8	21 97 be a5 23 c8 c8 97 be a5 e2 a0 0d 00 97 be
>3a3af8	c8 c8 e2 20 a5 e4 97 be c2 20 a5 be 85 e2 e2 20
>3a3b08	a5 c0 85 e4 e2 20 a0 00 00 a5 25 97 be c9 02 f0
>3a3b18	02 28 60 c2 20 a5 21 85 be e2 20 a5 23 85 c0 20
>3a3b28	e2 0d 20 f7 0d 80 ea 08 c2 30 a5 e2 d0 06 e2 20
>3a3b38	a5 e4 f0 05 20 78 39 b0 05 20 89 3a 80 17 e2 20
>3a3b48	a5 25 c9 02 f0 11 c2 30 a0 09 00 a5 21 97 08 c8
>3a3b58	c8 a5 23 97 08 28 60 a0 09 00 b7 08 85 be c8 c8
>3a3b68	e2 20 b7 08 85 c0 20 e2 0d 20 16 0e e2 20 a5 25
>3a3b78	c9 02 f0 02 80 d0 c2 20 a5 21 85 be e2 20 a5 23
>3a3b88	85 c0 20 e2 0d 20 f7 0d 80 bc 08 20 7b 19 e2 20
>3a3b98	a7 00 20 ee 02 90 42 c2 20 a5 00 85 e5 e2 20 a5
>3a3ba8	02 85 e7 20 5a 19 a7 00 f0 0d c9 24 f0 14 c9 25
>3a3bb8	f0 09 20 32 39 b0 ec a9 00 80 0c 20 5a 19 a9 00
>3a3bc8	80 05 20 5a 19 a9 02 85 e8 20 9d 1a c9 8c d0 06
>3a3bd8	a5 e8 09 80 85 e8 28 38 60 28 18 60 08 c2 20 48
>3a3be8	a9 00 08 5b 68 28 c2 20 a5 21 85 0c a5 23 64 0e
>3a3bf8	64 21 64 23 e2 20 64 26 a9 01 85 25 c2 20 a5 0c
>3a3c08	f0 35 10 0e e2 20 a9 80 85 26 c2 20 49 ff ff 1a
>3a3c18	85 0c e2 20 e6 24 c2 20 46 0e 66 0c e2 20 66 23
>3a3c28	66 22 66 21 c2 20 a5 0c c9 01 00 d0 e5 e2 20 06
>3a3c38	26 66 23 66 22 66 21 60 08 20 e2 0d c2 20 a9 01
>3a3c48	00 85 21 a9 00 00 85 23 e2 20 af 00 4d 00 c2 20
>3a3c58	29 ff 00 85 8d a8 a2 01 00 c2 20 bf 00 4d 00 85
>3a3c68	27 a9 00 00 85 29 20 85 1f e8 e8 88 d0 eb c2 20
>3a3c78	a9 04 00 85 27 a9 00 00 85 29 20 85 1f e2 20 af
>3a3c88	00 4d 00 85 0c a9 00 85 0d c2 20 06 0c 38 a5 21
>3a3c98	65 0c 85 21 a5 23 69 00 00 85 23 d0 29 e2 20 a5
>3a3ca8	e8 09 80 a6 21 20 a6 0b e2 20 af 00 4d 00 87 be
>3a3cb8	a0 01 00 a2 00 00 e2 20 bf 01 4d 00 97 be e4 8d
>3a3cc8	f0 19 e8 c8 80 f0 08 c2 20 48 a9 00 08 5b 68 28
>3a3cd8	e2 20 a9 09 8f d1 08 00 dc d2 08 e2 20 38 a5 be
>3a3ce8	67 be 85 08 a5 bf 69 00 85 09 a5 c0 69 00 85 0a
>3a3cf8	64 0b c2 20 a0 05 00 b7 c1 85 0c e2 20 c8 c8 b7
>3a3d08	c1 85 0e 64 0f e2 20 a9 00 87 08 c2 20 18 a5 08
>3a3d18	69 01 00 85 08 a5 0a 69 00 00 85 0a c5 0e d0 e5
>3a3d28	a5 08 c5 0c d0 df 28 60 08 c2 20 64 08 64 0a e2
>3a3d38	20 af 00 4d 00 85 8d 64 8e a2 01 00 e2 20 a7 be
>3a3d48	c5 8d f0 15 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a3d58	a9 0a 8f d1 08 00 dc d2 08 c9 01 f0 3a a0 01 00
>3a3d68	e2 20 bf 00 4d 00 85 21 64 22 64 23 64 24 b7 be
>3a3d78	85 27 64 28 64 29 64 2a a5 21 c5 27 b0 68 20 85
>3a3d88	1f c2 20 18 a5 08 65 21 85 08 a5 0a 65 23 85 0a
>3a3d98	e8 e8 c8 c4 8d d0 c9 e2 20 18 bf 00 4d 00 85 8e
>3a3da8	65 08 85 08 a5 09 69 00 85 09 c2 20 a5 0a 69 00
>3a3db8	00 85 0a c2 20 06 08 26 0a 06 08 26 0a e2 20 38
>3a3dc8	a5 08 65 8d 85 08 a5 09 69 00 85 09 c2 20 a5 0a
>3a3dd8	69 00 00 85 0a 18 a5 08 65 be 85 08 e2 20 a5 0a
>3a3de8	65 c0 85 0a 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a3df8	e2 20 a9 09 8f d1 08 00 dc d2 08 08 20 e2 0d e2
>3a3e08	20 a0 00 00 b7 c1 29 7f c5 25 d0 28 a5 25 48 c2
>3a3e18	20 a5 23 48 a5 21 48 20 30 3d 68 85 21 68 85 23
>3a3e28	e2 20 68 85 25 c2 20 a5 21 87 08 a0 02 00 a5 23
>3a3e38	97 08 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a3e48	a9 04 8f d1 08 00 dc d2 08 08 20 e2 0d f4 00 00
>3a3e58	f4 00 00 e2 20 48 20 30 3d e2 20 68 c2 20 68 68
>3a3e68	c2 20 a7 08 85 21 a0 02 00 b7 08 85 23 e2 20 a0
>3a3e78	00 00 b7 c1 29 7f 85 25 28 60 da 0b 08 08 c2 20
>3a3e88	48 a9 00 08 5b 68 28 c2 30 a5 23 89 f0 ff d0 29
>3a3e98	89 0f 00 d0 0c a5 21 89 00 fc d0 05 20 b4 30 80
>3a3ea8	2e a2 0a 00 46 23 66 21 ca d0 f9 20 b4 30 e2 20
>3a3eb8	a9 4b 20 18 00 c2 20 80 16 a2 14 00 46 23 66 21
>3a3ec8	ca d0 f9 20 b4 30 e2 20 a9 4d 20 18 00 c2 20 28
>3a3ed8	2b fa 60 0b 08 08 c2 20 48 a9 00 08 5b 68 28 c2
>3a3ee8	20 20 12 10 20 fd 3e a5 14 85 21 a5 16 85 23 20
>3a3ef8	94 30 28 2b 60 5a 0b 08 08 c2 20 48 a9 00 08 5b
>3a3f08	68 28 e2 20 a7 14 c9 20 d0 1c a0 02 00 b7 14 d0
>3a3f18	06 a9 30 87 14 80 0f a0 01 00 b7 14 87 14 c2 20
>3a3f28	e6 14 d0 02 e6 16 28 2b 7a 60 0b 08 08 c2 20 48
>3a3f38	a9 00 08 5b 68 28 c2 20 8f 44 02 00 a2 09 00 4a
>3a3f48	ca d0 fc 18 69 bc 07 85 21 64 23 e2 20 a9 00 85
>3a3f58	25 c2 20 20 b4 30 a9 2d 00 20 18 00 c2 20 af 44
>3a3f68	02 00 a2 05 00 4a ca d0 fc 29 0f 00 85 21 64 23
>3a3f78	e2 20 a9 00 85 25 c2 20 20 db 3e a9 2d 00 20 18
>3a3f88	00 c2 20 af 44 02 00 29 1f 00 85 21 64 23 e2 20
>3a3f98	a9 00 85 25 c2 20 20 db 3e 28 2b 60 0b 08 08 c2
>3a3fa8	20 48 a9 00 08 5b 68 28 c2 20 8f 44 02 00 a2 0b
>3a3fb8	00 4a ca d0 fc 85 21 64 23 e2 20 a9 00 85 25 c2
>3a3fc8	20 20 b4 30 a9 3a 00 20 18 00 c2 20 af 44 02 00
>3a3fd8	a2 05 00 4a ca d0 fc 29 0f 00 85 21 64 23 e2 20
>3a3fe8	a9 00 85 25 c2 20 20 db 3e a9 3a 00 20 18 00 c2
>3a3ff8	20 af 44 02 00 29 1f 00 85 21 64 23 e2 20 a9 00
>3a4008	85 25 c2 20 20 db 3e 28 2b 60 0b 08 08 c2 20 48
>3a4018	a9 20 03 5b 68 28 c2 30 a9 00 00 8f b4 08 00 8f
>3a4028	b6 08 00 e2 20 20 1a 02 22 0c 11 38 b0 15 08 c2
>3a4038	20 48 a9 00 08 5b 68 28 e2 20 a9 10 8f d1 08 00
>3a4048	dc d2 08 e2 20 a0 00 00 b7 18 d0 03 82 d2 00 c9
>3a4058	e5 d0 03 82 bf 00 a0 0b 00 b7 18 89 08 f0 03 82
>3a4068	c8 00 89 02 f0 03 82 ac 00 29 0f c9 0f d0 03 82
>3a4078	a3 00 a0 00 00 b7 18 c9 20 f0 09 20 18 00 c8 c0
>3a4088	08 00 d0 f1 a0 08 00 b7 18 c9 20 f0 17 a9 2e 20
>3a4098	18 00 a0 08 00 b7 18 c9 20 f0 09 20 18 00 c8 c0
>3a40a8	0b 00 d0 f1 a9 09 20 18 00 a0 0b 00 b7 18 89 08
>3a40b8	d0 60 89 01 f0 05 a9 52 20 18 00 89 04 f0 05 a9
>3a40c8	53 20 18 00 89 10 f0 05 a9 44 20 18 00 a9 09 20
>3a40d8	18 00 c2 20 a0 1c 00 b7 18 8f 21 08 00 c8 c8 b7
>3a40e8	18 8f 23 08 00 e2 20 a9 00 8f 25 08 00 20 82 3e
>3a40f8	e2 20 a9 09 20 18 00 c2 20 a0 10 00 b7 18 20 32
>3a4108	3f e2 20 a9 20 20 18 00 c2 20 a0 0e 00 b7 18 20
>3a4118	a4 3f 20 1a 02 20 31 02 22 10 11 38 90 03 82 22
>3a4128	ff 20 18 00 20 1a 02 28 2b 60 e2 20 29 0f c9 0f
>3a4138	f0 e3 a9 5b 20 18 00 a0 00 00 b7 18 c9 20 f0 09
>3a4148	20 18 00 c8 c0 08 00 d0 f1 a9 5d 20 18 00 80 c2
>3a4158	0b 08 08 c2 20 48 a9 20 03 5b 68 28 c2 30 a9 00
>3a4168	d2 85 20 a9 37 00 85 22 a0 00 00 e2 20 a9 00 97
>3a4178	20 c8 c0 1e 00 d0 f8 c2 20 a9 00 d0 8f 0e d2 37
>3a4188	a9 37 00 8f 10 d2 37 af 21 08 00 8f 02 d2 37 af
>3a4198	23 08 00 8f 04 d2 37 28 2b 60 08 c2 30 20 7b 19
>3a41a8	20 12 16 20 23 04 20 58 41 e2 20 a9 2c 85 35 20
>3a41b8	7e 1a b0 0f c2 20 a9 ff ff 8f 54 03 00 8f 56 03
>3a41c8	00 80 17 20 5a 19 20 12 16 20 03 04 c2 20 a5 21
>3a41d8	8f 54 03 00 a5 23 8f 56 03 00 22 14 11 38 b0 15
>3a41e8	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 11 8f d1
>3a41f8	08 00 dc d2 08 28 60 08 c2 30 20 7b 19 20 12 16
>3a4208	20 23 04 20 58 41 a9 ff ff 8f 54 03 00 8f 56 03
>3a4218	00 22 14 11 38 b0 15 08 c2 20 48 a9 00 08 5b 68
>3a4228	28 e2 20 a9 11 8f d1 08 00 dc d2 08 c2 20 af 5c
>3a4238	03 00 85 a1 e2 20 af 5e 03 00 85 a3 a9 5c 85 a0
>3a4248	22 a0 08 00 28 60 08 c2 30 20 7b 19 20 12 16 20
>3a4258	23 04 20 58 41 a9 00 00 8f 54 03 00 a9 02 00 8f
>3a4268	56 03 00 20 43 38 22 14 11 38 b0 15 08 c2 20 48
>3a4278	a9 00 08 5b 68 28 e2 20 a9 11 8f d1 08 00 dc d2
>3a4288	08 c2 20 a2 12 00 18 bf 00 d2 37 69 00 00 85 90
>3a4298	bf 02 d2 37 69 02 00 85 92 e2 20 a9 00 87 90 c2
>3a42a8	20 a9 00 00 85 78 a9 02 00 85 7a a2 00 00 e2 20
>3a42b8	a7 78 f0 28 c9 0d f0 12 c9 0a f0 04 9d 00 4f e8
>3a42c8	c2 20 e6 78 d0 e8 e6 7a 80 e4 e2 20 a9 00 9d 00
>3a42d8	4f 20 ce 1e e6 78 d0 d3 e6 7a 80 cf e0 00 00 f0
>3a42e8	0a e2 20 a9 00 9d 00 4f 20 ce 1e 28 60 08 c2 30
>3a42f8	20 7b 19 20 12 16 20 23 04 20 58 41 e2 20 a9 2c
>3a4308	20 53 1a c2 20 20 12 16 20 03 04 a5 21 8f 50 03
>3a4318	00 a5 23 8f 52 03 00 e2 20 a9 2c c2 20 20 53 1a
>3a4328	20 12 16 20 03 04 a5 21 8f 58 03 00 a5 23 8f 5a
>3a4338	03 00 22 18 11 38 b0 15 08 c2 20 48 a9 00 08 5b
>3a4348	68 28 e2 20 a9 12 8f d1 08 00 dc d2 08 28 60 08
>3a4358	c2 30 20 7b 19 20 12 16 20 23 04 20 58 41 a2 00
>3a4368	00 a0 00 00 e2 20 b7 21 9d 00 04 f0 04 e8 c8 80
>3a4378	f5 22 04 11 38 b0 15 08 c2 20 48 a9 00 08 5b 68
>3a4388	28 e2 20 a9 13 8f d1 08 00 dc d2 08 28 60 08 c2
>3a4398	30 20 7b 19 20 12 16 20 23 04 20 58 41 a9 00 00
>3a43a8	85 a4 e2 20 a9 02 85 a6 a9 20 85 b2 c2 20 a9 00
>3a43b8	00 85 a9 a9 ff ff 85 a7 c2 20 a9 00 00 85 53 85
>3a43c8	55 a9 ff ff 85 57 a9 ff 7f 85 59 20 1f 12 e2 20
>3a43d8	a9 80 85 b2 c2 20 c6 a9 18 a9 00 00 8f 50 03 00
>3a43e8	65 a9 8f 58 03 00 a9 02 00 8f 52 03 00 69 00 00
>3a43f8	8f 5a 03 00 22 18 11 38 b0 15 08 c2 20 48 a9 00
>3a4408	08 5b 68 28 e2 20 a9 12 8f d1 08 00 dc d2 08 28
>3a4418	60 5c 7a 5d 3a 5c d7 5b 3a 5c 7b 5d 3a 5c 03 4d
>3a4428	3a 5c 60 4d 3a 5c 93 4c 3a 5c 19 4c 3a 5c 96 51
>3a4438	3a 5c 84 48 3a 5c b1 4b 3a 5c 6c 4b 3a 5c f6 4a
>3a4448	3a 5c 95 5c 3a 5c 92 49 3a 5c e8 47 3a 5c 0a 5d
>3a4458	3a 5c c0 48 3a 5c 7d 5d 3a 5c 76 5d 3a 5c af 4a
>3a4468	3a 5c 7e 5d 3a 18 fb c2 20 a9 ff fe 1b 58 5c 7a
>3a4478	44 3a c2 30 22 e8 47 3a 20 08 00 20 0c 00 8b e2
>3a4488	20 a9 00 48 ab a2 00 4f 20 71 03 ab 22 1d 44 3a
>3a4498	22 25 44 3a 80 e2 08 8b e2 20 a9 3a 48 ab c2 10
>3a44a8	a2 b1 44 20 9b 02 ab 28 6b 41 20 3c 73 74 61 72
>3a44b8	74 3e 20 3c 61 73 73 65 6d 62 6c 79 3e 0d 20 20
>3a44c8	41 73 73 65 6d 62 6c 65 20 61 20 70 72 6f 67 72
>3a44d8	61 6d 0d 0d 43 20 3c 73 74 61 72 74 31 3e 20 3c
>3a44e8	73 74 61 72 74 32 3e 20 5b 6c 65 6e 20 28 31 20
>3a44f8	69 66 20 62 6c 61 6e 6b 29 5d 0d 20 20 43 6f 6d
>3a4508	70 61 72 65 20 74 6f 20 73 65 63 74 69 6f 6e 73
>3a4518	20 6f 66 20 6d 65 6d 6f 72 79 0d 0d 44 20 3c 73
>3a4528	74 61 72 74 3e 20 5b 65 6e 64 5d 0d 20 20 44 69
>3a4538	73 61 73 73 65 6d 62 6c 65 20 61 20 70 72 6f 67
>3a4548	72 61 6d 0d 0d 46 20 3c 73 74 61 72 74 3e 20 3c
>3a4558	65 6e 64 3e 20 3c 62 79 74 65 3e 0d 20 20 46 69
>3a4568	6c 6c 20 61 20 62 6c 6f 63 6b 20 6f 66 20 6d 65
>3a4578	6d 6f 72 79 20 77 69 74 68 20 61 20 62 79 74 65
>3a4588	0d 0d 47 20 5b 61 64 64 72 65 73 73 5d 0d 20 20
>3a4598	53 74 61 72 74 20 65 78 65 63 75 74 69 6f 6e 20
>3a45a8	61 74 20 61 20 6c 6f 63 61 74 69 6f 6e 0d 0d 4a
>3a45b8	20 5b 61 64 64 72 65 73 73 5d 20 2d 20 4a 75 6d
>3a45c8	70 20 74 6f 20 61 20 6c 6f 63 61 74 69 6f 6e 20
>3a45d8	69 6e 20 6d 65 6d 6f 72 79 0d 20 20 4a 75 6d 70
>3a45e8	20 74 6f 20 61 20 6c 6f 63 61 74 69 6f 6e 20 69
>3a45f8	6e 20 6d 65 6d 6f 72 79 0d 0d 48 20 3c 73 74 61
>3a4608	72 74 3e 20 3c 65 6e 64 3e 20 3c 62 79 74 65 3e
>3a4618	20 5b 62 79 74 65 5d 2e 2e 0d 20 20 48 75 6e 74
>3a4628	20 66 6f 72 20 76 61 6c 75 65 73 20 69 6e 20 6d
>3a4638	65 6d 6f 72 79 0d 0d 4d 20 3c 73 74 61 72 74 3e
>3a4648	20 5b 65 6e 64 5d 0d 20 20 44 75 6d 70 20 74 68
>3a4658	65 20 76 61 6c 75 65 20 69 6e 20 6d 65 6d 6f 72
>3a4668	79 0d 0d 52 20 2d 20 44 69 73 70 6c 61 79 20 74
>3a4678	68 65 20 76 61 6c 75 65 73 20 6f 66 20 74 68 65
>3a4688	20 72 65 67 69 73 74 65 72 73 0d 0d 3b 20 3c 50
>3a4698	43 3e 20 3c 41 3e 20 3c 58 3e 20 3c 59 3e 20 3c
>3a46a8	53 50 3e 20 3c 44 42 52 3e 20 3c 44 50 3e 20 3c
>3a46b8	4e 56 4d 58 44 49 5a 43 3e 0d 20 20 43 68 61 6e
>3a46c8	67 65 20 74 68 65 20 63 6f 6e 74 65 6e 74 73 20
>3a46d8	6f 66 20 74 68 65 20 72 65 67 69 73 74 65 72 73
>3a46e8	0d 0d 54 20 3c 73 74 61 72 74 3e 20 3c 65 6e 64
>3a46f8	3e 20 3c 64 65 73 74 69 6e 61 74 69 6f 6e 3e 0d
>3a4708	20 20 54 72 61 6e 73 66 65 72 20 28 63 6f 70 79
>3a4718	29 20 64 61 74 61 20 77 69 74 68 69 6e 20 6d 65
>3a4728	6d 6f 72 79 0d 0d 57 20 3c 62 79 74 65 3e 0d 20
>3a4738	20 53 65 74 20 74 68 65 20 72 65 67 69 73 74 65
>3a4748	72 20 77 69 64 74 68 20 66 6c 61 67 73 20 66 6f
>3a4758	72 20 74 68 65 20 64 69 73 61 73 73 65 6d 62 6c
>3a4768	65 72 0d 0d 58 20 2d 20 52 65 74 75 72 6e 20 74
>3a4778	6f 20 42 41 53 49 43 0d 0d 3e 20 3c 73 74 61 72
>3a4788	74 3e 20 3c 62 79 74 65 3e 20 5b 62 79 74 65 5d
>3a4798	2e 2e 2e 0d 20 20 45 64 69 74 20 64 61 74 61 20
>3a47a8	69 6e 20 6d 65 6d 6f 72 79 0d 0d 3f 20 2d 20 44
>3a47b8	69 73 70 6c 61 79 20 61 20 73 68 6f 72 74 20 68
>3a47c8	65 6c 70 20 73 63 72 65 65 6e 0d 0d 00 08 08 c2
>3a47d8	20 48 a9 46 08 5b 68 28 e2 20 a5 0d 85 4e 28 6b
>3a47e8	08 e2 20 48 a9 3a 48 ab 68 28 a2 ba 5d 20 9b 02
>3a47f8	e2 20 a9 3b 20 18 00 a9 20 20 18 00 c2 30 08 e2
>3a4808	20 48 a9 00 48 ab 68 28 a0 03 00 a2 42 02 20 2a
>3a4818	02 c2 20 a9 20 00 20 18 00 af 44 02 00 20 ab 02
>3a4828	a9 20 00 20 18 00 af 46 02 00 20 ab 02 a9 20 00
>3a4838	20 18 00 af 48 02 00 20 ab 02 a9 20 00 20 18 00
>3a4848	af 4a 02 00 20 ab 02 a9 20 00 20 18 00 af 4e 02
>3a4858	00 20 c5 02 a9 20 00 20 18 00 20 18 00 af 4c 02
>3a4868	00 20 ab 02 a9 20 00 20 18 00 08 e2 20 ad 4f 02
>3a4878	22 e0 5a 3a 28 20 1a 02 20 1a 02 6b 08 0b 08 c2
>3a4888	20 48 a9 46 08 5b 68 28 e2 20 a5 15 87 0d e2 20
>3a4898	a5 0f c5 13 d0 0e c2 20 a5 0d c5 11 d0 06 20 1a
>3a48a8	02 2b 28 6b c2 20 18 a5 0d 69 01 00 85 0d e2 20
>3a48b8	a5 0e 69 00 85 0e 80 d0 08 0b 08 c2 20 48 a9 46
>3a48c8	08 5b 68 28 e2 20 a5 0f c5 17 90 45 c2 20 a5 0d
>3a48d8	c5 15 90 3d e2 20 a7 0d 87 15 a5 0f c5 13 d0 0b
>3a48e8	c2 20 a5 0d c5 11 d0 03 4c 77 49 c2 20 18 a5 0d
>3a48f8	69 01 00 85 0d e2 20 a5 0e 69 00 85 0e c2 20 18
>3a4908	a5 15 69 01 00 85 15 e2 20 a5 16 69 00 85 16 80
>3a4918	c3 c2 20 38 a5 11 e5 0d 85 19 e2 20 a5 13 e5 0f
>3a4928	85 1b c2 20 18 a5 19 65 15 85 15 e2 20 a5 1b 65
>3a4938	17 85 17 e2 20 a7 11 87 15 a5 13 c5 0f d0 0a c2
>3a4948	20 a5 11 c5 0d d0 02 80 26 c2 20 38 a5 11 e9 01
>3a4958	00 85 11 e2 20 a5 12 e9 00 85 12 c2 20 38 a5 15
>3a4968	e9 01 00 85 15 e2 20 a5 16 e9 00 85 16 80 c4 20
>3a4978	1a 02 2b 28 6b 08 e2 20 c9 21 90 0b c9 7f 90 04
>3a4988	c9 a0 90 03 28 38 6b 28 18 6b 08 8b 0b 08 c2 20
>3a4998	48 a9 46 08 5b 68 28 e2 20 a9 00 8f b4 08 00 a5
>3a49a8	31 c9 02 b0 16 c9 01 90 20 c2 20 18 a5 0d 69 00
>3a49b8	01 85 11 e2 20 a5 0f 69 00 85 13 c2 20 a5 0d 85
>3a49c8	32 e2 20 a5 0f 85 34 80 12 c2 20 18 a5 32 69 00
>3a49d8	01 85 11 e2 20 a5 34 69 00 85 13 e2 20 a0 00 00
>3a49e8	c2 20 a5 32 85 19 e2 20 a5 34 85 1b e2 20 a7 19
>3a49f8	22 7d 49 3a b0 02 a9 3f 99 7c 08 c2 20 18 a5 19
>3a4a08	69 01 00 85 19 e2 20 a5 1b 69 00 85 1b c8 c0 08
>3a4a18	00 90 db a9 00 99 7c 08 a9 3e 20 18 00 a9 20 20
>3a4a28	18 00 e2 20 a5 34 20 c5 02 a9 3a 20 18 00 c2 20
>3a4a38	a5 32 20 ab 02 c2 20 a9 08 00 85 47 e2 20 a9 20
>3a4a48	20 18 00 a7 32 20 c5 02 22 bf 5a 3a e2 20 c6 47
>3a4a58	d0 ea a9 20 20 18 00 a9 20 20 18 00 08 e2 20 48
>3a4a68	a9 00 48 ab 68 28 a2 7c 08 20 9b 02 20 1a 02 20
>3a4a78	31 02 a5 34 c5 13 90 0f c2 20 a5 32 c5 11 90 07
>3a4a88	20 1a 02 2b ab 28 6b 4c e3 49 08 8d 90 08 e2 20
>3a4a98	bd 00 00 99 00 00 ad 90 08 f0 0a c8 e8 e8 e8 e8
>3a4aa8	ce 90 08 80 eb 28 6b 08 0b 8b 08 c2 20 48 a9 46
>3a4ab8	08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 30
>3a4ac8	a5 0d 85 32 a5 0f 85 34 e2 20 a5 31 3a 85 47 a2
>3a4ad8	57 08 a0 7c 08 22 92 4a 3a a0 00 00 b9 7c 08 87
>3a4ae8	32 22 bf 5a 3a c8 c4 47 d0 f2 ab 2b 28 6b 08 0b
>3a4af8	8b 08 c2 20 48 a9 46 08 5b 68 28 08 e2 20 48 a9
>3a4b08	00 48 ab 68 28 e2 20 c2 10 a5 31 3a 3a 85 47 a2
>3a4b18	5b 08 a0 7c 08 22 92 4a 3a c2 20 a5 0d 85 32 a5
>3a4b28	0f 85 34 c2 20 a5 34 c5 13 d0 06 a5 32 c5 11 f0
>3a4b38	2c e2 20 a0 00 00 b7 32 d9 7c 08 d0 1a c8 c4 47
>3a4b48	d0 f4 c2 20 a5 32 85 4a a5 34 85 4c 22 69 55 3a
>3a4b58	e2 20 a9 20 20 18 00 22 bf 5a 3a 80 c6 20 1a 02
>3a4b68	ab 2b 28 6b 08 c2 20 48 a9 46 08 5b 68 28 e2 20
>3a4b78	a5 31 f0 0e c2 30 a5 0d 8f 40 02 00 a5 0f 8f 42
>3a4b88	02 00 af 46 02 00 aa af 48 02 00 a8 af 4a 02 00
>3a4b98	1b af 4c 02 00 5b e2 20 a9 3a 48 a9 4b 48 a9 ac
>3a4ba8	48 4c e3 4b ea 5c 04 00 3a 08 c2 20 48 a9 46 08
>3a4bb8	5b 68 28 e2 20 a5 31 f0 c9 c2 30 a5 0d 8f 40 02
>3a4bc8	00 a5 0f 8f 42 02 00 af 46 02 00 aa af 48 02 00
>3a4bd8	a8 af 4a 02 00 1b af 4c 02 00 5b e2 20 af 4e 02
>3a4be8	00 48 ab a9 5c 8f a0 08 00 af 42 02 00 8f a3 08
>3a4bf8	00 af 41 02 00 8f a2 08 00 af 40 02 00 8f a1 08
>3a4c08	00 af 4f 02 00 48 c2 20 af 44 02 00 28 5c a0 08
>3a4c18	00 08 0b 8b 08 e2 20 48 a9 3a 48 ab 68 28 08 c2
>3a4c28	20 48 a9 46 08 5b 68 28 c2 10 e2 20 a5 31 c9 02
>3a4c38	f0 0c c9 03 d0 11 c2 20 a5 15 85 47 80 11 c2 20
>3a4c48	a9 01 00 85 47 80 08 a2 7f 5d 20 9b 02 80 35 a5
>3a4c58	0d 85 4a a5 0f 85 4c a0 00 00 e2 20 a7 4a d7 11
>3a4c68	f0 09 22 69 55 3a a9 20 20 18 00 c2 20 18 a5 4a
>3a4c78	69 01 00 85 4a a5 4c 69 00 00 85 4c c8 c4 47 d0
>3a4c88	d9 20 1a 02 20 1a 02 ab 2b 28 6b 08 0b 8b 08 e2
>3a4c98	20 48 a9 00 48 ab 68 28 08 c2 20 48 a9 46 08 5b
>3a4ca8	68 28 e2 20 a5 31 f0 4f a6 0d 8e 40 02 a6 0f 8e
>3a4cb8	42 02 c9 01 f0 41 a6 11 8e 44 02 c9 02 f0 38 a6
>3a4cc8	15 8e 46 02 c9 03 f0 2f a6 19 8e 48 02 c9 04 f0
>3a4cd8	26 a6 1d 8e 4a 02 c9 05 f0 1d e2 10 a6 21 8e 4e
>3a4ce8	02 c9 06 f0 12 c2 10 a6 25 8e 4c 02 c9 07 f0 07
>3a4cf8	e2 10 a6 29 8e 4f 02 ab 2b 28 6b 08 0b 8b 08 c2
>3a4d08	20 48 a9 46 08 5b 68 28 e2 20 c2 10 a2 00 00 bf
>3a4d18	eb 5d 3a f0 18 c7 08 f0 03 e8 80 f3 c2 20 8a 0a
>3a4d28	aa bf 39 4d 3a 8f 2d 08 00 22 5d 4d 3a ab 2b 28
>3a4d38	6b 29 44 31 44 35 44 39 44 3d 44 41 44 45 44 49
>3a4d48	44 4d 44 51 44 2d 44 55 44 59 44 5d 44 d5 47 61
>3a4d58	44 65 44 9e 44 6c 2d 08 08 8b 0b 08 c2 20 48 a9
>3a4d68	46 08 5b 68 28 e2 20 a5 31 c9 02 b0 03 4c 06 4f
>3a4d78	c2 20 a5 0d 85 32 a5 0f 85 34 c2 20 22 08 51 3a
>3a4d88	c9 ff ff f0 10 85 54 e2 20 a5 31 c9 03 f0 36 a9
>3a4d98	13 85 4f 80 4c 20 1a 02 08 e2 20 48 a9 3a 48 ab
>3a4da8	68 28 c2 10 a2 3d 4f 20 9b 02 4c 06 4f 20 1a 02
>3a4db8	08 e2 20 48 a9 3a 48 ab 68 28 c2 10 a2 4c 4f 20
>3a4dc8	9b 02 4c 06 4f e2 20 22 3e 51 3a c9 ff f0 de 85
>3a4dd8	4f c9 03 f0 62 c9 0b f0 5e c9 13 f0 04 c9 08 f0
>3a4de8	00 22 36 50 3a b0 03 4c cf 4e 87 32 22 bf 5a 3a
>3a4df8	08 e2 20 48 a9 00 48 ab 68 28 c2 20 a5 32 85 56
>3a4e08	a5 34 85 58 e2 20 a5 4f c9 12 f0 6c c9 16 f0 68
>3a4e18	c9 14 f0 7c 29 3f c9 02 d0 03 4c fd 4e c2 20 29
>3a4e28	ff 00 aa e2 20 bf 05 5a 3a c9 03 f0 57 c9 02 f0
>3a4e38	5f c9 01 f0 67 80 71 c2 20 a5 54 c9 7d 56 f0 26
>3a4e48	c9 e1 56 f0 2a c9 61 56 f0 1c c9 65 56 f0 17 c9
>3a4e58	6d 56 f0 12 c9 55 56 f0 0d c9 69 56 f0 08 c9 51
>3a4e68	56 f0 03 4c e9 4d e2 20 a9 12 85 4f 4c e9 4d e2
>3a4e78	20 a9 16 85 4f 4c e9 4d 22 79 4f 3a 90 60 c9 02
>3a4e88	f0 0e 80 18 a0 02 00 b9 96 08 97 56 22 bf 5a 3a
>3a4e98	a0 01 00 b9 96 08 97 56 22 bf 5a 3a a0 00 00 b9
>3a4ea8	96 08 97 56 22 bf 5a 3a e2 20 a9 41 20 18 00 a9
>3a4eb8	20 20 18 00 a6 32 86 4a a6 34 86 4c 22 69 55 3a
>3a4ec8	a9 20 20 18 00 80 37 20 1a 02 08 e2 20 48 a9 3a
>3a4ed8	48 ab 68 28 c2 10 a2 0a 4f 20 9b 02 80 20 20 1a
>3a4ee8	02 08 e2 20 48 a9 3a 48 ab 68 28 c2 10 a2 5a 4f
>3a4ef8	20 9b 02 80 09 a5 4f 29 c0 d0 95 4c a4 4e 2b ab
>3a4f08	28 6b 41 64 64 72 65 73 73 69 6e 67 20 6d 6f 64
>3a4f18	65 20 6e 6f 74 20 64 65 66 69 6e 65 64 20 66 6f
>3a4f28	72 20 74 68 61 74 20 69 6e 73 74 72 75 63 74 69
>3a4f38	6f 6e 2e 0d 00 42 61 64 20 6d 6e 65 6d 6f 6e 69
>3a4f48	63 2e 0d 00 42 61 64 20 6f 70 65 72 61 6e 64 2e
>3a4f58	0d 00 52 65 6c 61 74 69 76 65 20 6f 66 66 73 65
>3a4f68	74 20 69 73 20 74 6f 6f 20 6c 61 72 67 65 2e 0d
>3a4f78	00 08 0b 08 c2 20 48 a9 46 08 5b 68 28 e2 20 a5
>3a4f88	4f c9 12 f0 0a c2 20 18 a5 32 69 02 00 80 08 c2
>3a4f98	20 18 a5 32 69 01 00 85 4a a5 34 69 00 00 85 4c
>3a4fa8	38 a5 50 e5 4a 85 50 a5 52 e5 4c 85 52 e2 20 a5
>3a4fb8	4f c9 16 f0 1e a5 50 30 0c a5 51 d0 2a a5 52 d0
>3a4fc8	26 a9 01 80 26 a5 51 c9 ff d0 1c a5 52 c9 ff d0
>3a4fd8	16 80 18 a5 51 30 06 a5 52 d0 0c 80 0e a5 52 c9
>3a4fe8	ff d0 04 a9 02 80 04 2b 28 18 6b 2b 28 38 6b 08
>3a4ff8	0b c2 10 da 08 c2 20 48 a9 46 08 5b 68 28 e2 20
>3a5008	a2 00 00 df 00 d0 3a f0 08 e8 e0 10 00 f0 1b 80
>3a5018	f2 c2 20 06 50 26 52 06 50 26 52 06 50 26 52 06
>3a5028	50 26 52 e2 20 8a 05 50 85 50 fa 2b 28 6b 0b 8b
>3a5038	08 c2 20 48 a9 46 08 5b 68 28 08 e2 20 48 a9 3a
>3a5048	48 ab 68 28 e2 20 a5 4f 29 3f 85 4a c2 30 a2 00
>3a5058	00 a0 00 00 bd 03 57 f0 1b c5 54 d0 0d e2 20 b9
>3a5068	05 59 29 3f c5 4a f0 07 c2 20 e8 e8 c8 80 e5 98
>3a5078	38 ab 2b 6b 18 ab 2b 6b 08 0b 08 c2 20 48 a9 46
>3a5088	08 5b 68 28 e2 20 c2 10 a0 00 00 64 50 64 52 b7
>3a5098	03 f0 11 c9 64 f0 19 48 b7 36 85 4a 68 c5 4a d0
>3a50a8	0b c8 80 eb b7 36 d0 04 2b 28 38 6b 2b 28 18 6b
>3a50b8	e2 20 b7 36 c9 3a b0 04 c9 30 b0 14 c9 47 b0 04
>3a50c8	c9 41 b0 0c c9 67 b0 e4 c9 61 b0 02 80 de 29 df
>3a50d8	22 f7 4f 3a 80 cb 0b 08 c2 20 48 a9 46 08 5b 68
>3a50e8	28 a0 00 00 e2 20 b7 03 f0 03 c8 80 f9 c2 20 c8
>3a50f8	5a 68 18 65 03 85 03 a5 05 69 00 00 85 05 2b 6b
>3a5108	0b 08 c2 20 48 a9 46 08 5b 68 28 c2 20 a5 11 85
>3a5118	36 a5 13 85 38 a9 91 55 85 03 a9 3a 00 85 05 22
>3a5128	80 50 3a b0 0d 22 de 50 3a a7 03 d0 f2 a9 ff ff
>3a5138	80 02 a5 03 2b 6b 08 0b 08 c2 20 48 a9 46 08 5b
>3a5148	68 28 c2 30 a5 15 85 36 a5 17 85 38 a9 1d 5a 85
>3a5158	03 a9 3a 00 85 05 22 80 50 3a b0 22 22 de 50 3a
>3a5168	c2 20 18 a5 03 69 01 00 85 03 a5 05 69 00 00 85
>3a5178	05 e2 20 a7 03 d0 df c2 20 a9 ff ff 80 0d 22 de
>3a5188	50 3a e2 20 a7 03 c2 20 29 ff 00 2b 28 6b 08 8b
>3a5198	0b 08 c2 20 48 a9 46 08 5b 68 28 e2 20 a9 00 8f
>3a51a8	b4 08 00 a5 31 c9 02 b0 16 c9 01 90 20 c2 20 18
>3a51b8	a5 0d 69 00 01 85 11 e2 20 a5 0f 69 00 85 13 c2
>3a51c8	20 a5 0d 85 32 e2 20 a5 0f 85 34 80 12 c2 20 18
>3a51d8	a5 32 69 00 01 85 11 e2 20 a5 34 69 00 85 13 22
>3a51e8	02 52 3a e2 20 a5 34 c5 13 90 f4 c2 20 a5 32 c5
>3a51f8	11 90 ec 20 1a 02 2b ab 28 6b 08 0b e2 20 a9 41
>3a5208	20 18 00 a9 20 20 18 00 08 c2 20 48 a9 78 08 5b
>3a5218	68 28 c2 20 a5 00 85 18 e2 20 a5 02 85 1a 22 69
>3a5228	55 3a a9 20 20 18 00 c2 20 18 a5 00 69 01 00 85
>3a5238	18 e2 20 a5 02 69 00 85 1a e2 20 c2 10 a7 00 c9
>3a5248	c2 d0 0b 48 a7 18 49 ff 2f 94 08 00 80 0b c9 e2
>3a5258	d0 0c 48 a7 18 0f 94 08 00 8f 94 08 00 68 c2 20
>3a5268	29 ff 00 0a aa bf 03 57 3a aa 22 e3 54 3a e2 20
>3a5278	a7 00 aa bf 05 59 3a 22 bf 5a 3a 22 90 52 3a 20
>3a5288	1a 02 20 31 02 2b 28 6b 08 e2 20 48 29 3f 0a c2
>3a5298	10 aa 68 7c 9e 52 ce 52 e9 52 f0 52 15 53 1c 53
>3a52a8	37 53 59 53 6a 53 a7 53 af 53 c0 53 d1 53 d8 53
>3a52b8	fd 53 2a 54 96 53 7b 53 48 53 1d 54 27 54 3b 54
>3a52c8	6a 54 18 54 7b 54 a9 28 20 18 00 22 92 54 3a a9
>3a52d8	2c 20 18 00 a9 58 20 18 00 a9 29 20 18 00 4c 8c
>3a52e8	54 22 92 54 3a 4c 8c 54 e2 20 48 a9 23 20 18 00
>3a52f8	68 29 c0 c9 00 f0 0f 4a 4a 2f 94 08 00 d0 07 22
>3a5308	9c 54 3a 4c 8c 54 22 92 54 3a 4c 8c 54 22 9c 54
>3a5318	3a 4c 8c 54 a9 28 20 18 00 22 92 54 3a a9 29 20
>3a5328	18 00 a9 2c 20 18 00 a9 59 20 18 00 4c 8c 54 22
>3a5338	92 54 3a a9 2c 20 18 00 a9 58 20 18 00 4c 8c 54
>3a5348	22 92 54 3a a9 2c 20 18 00 a9 59 20 18 00 4c 8c
>3a5358	54 22 9c 54 3a a9 2c 20 18 00 a9 59 20 18 00 4c
>3a5368	8c 54 22 9c 54 3a a9 2c 20 18 00 a9 58 20 18 00
>3a5378	4c 8c 54 a9 28 20 18 00 22 9c 54 3a a9 2c 20 18
>3a5388	00 a9 58 20 18 00 a9 29 20 18 00 4c 8c 54 a9 28
>3a5398	20 18 00 22 92 54 3a a9 29 20 18 00 4c 8c 54 a9
>3a53a8	41 20 18 00 4c 90 54 22 92 54 3a a9 2c 20 18 00
>3a53b8	a9 53 20 18 00 4c 8c 54 a9 5b 20 18 00 22 92 54
>3a53c8	3a a9 5d 20 18 00 4c 8c 54 22 aa 54 3a 4c 90 54
>3a53d8	a9 28 20 18 00 22 92 54 3a a9 2c 20 18 00 a9 53
>3a53e8	20 18 00 a9 29 20 18 00 a9 2c 20 18 00 a9 59 20
>3a53f8	18 00 4c 8c 54 a9 5b 20 18 00 22 92 54 3a a9 5d
>3a5408	20 18 00 a9 2c 20 18 00 a9 59 20 18 00 4c 8c 54
>3a5418	a0 02 00 80 03 a0 01 00 22 10 55 3a 4c 90 54 4c
>3a5428	90 54 22 aa 54 3a a9 2c 20 18 00 a9 58 20 18 00
>3a5438	4c 90 54 a9 23 20 18 00 8b a5 02 48 ab a6 00 e8
>3a5448	a0 01 00 22 2a 02 3a a9 2c 20 18 00 a9 23 20 18
>3a5458	00 a6 00 a0 01 00 22 2a 02 3a ab 22 bf 5a 3a 4c
>3a5468	8c 54 a9 28 20 18 00 22 9c 54 3a a9 29 20 18 00
>3a5478	4c 8c 54 a9 5b 20 18 00 22 9c 54 3a a9 5d 20 18
>3a5488	00 4c 8c 54 22 bf 5a 3a 28 6b 08 e2 20 a7 00 20
>3a5498	c5 02 28 6b 08 c2 30 a7 00 20 ab 02 22 bf 5a 3a
>3a54a8	28 6b 08 8b 0b c2 30 5a 08 c2 20 48 a9 78 08 5b
>3a54b8	68 28 08 e2 20 48 a9 00 48 ab 68 28 e2 20 a0 00
>3a54c8	00 a7 00 99 90 08 22 bf 5a 3a c8 c0 03 00 d0 f1
>3a54d8	22 69 55 3a c2 30 7a 2b ab 28 6b 08 8b e2 20 c2
>3a54e8	10 08 e2 20 48 a9 3a 48 ab 68 28 bd 00 00 20 18
>3a54f8	00 e8 bd 00 00 20 18 00 e8 bd 00 00 20 18 00 e8
>3a5508	a9 20 20 18 00 ab 28 6b 08 0b 08 c2 20 48 a9 78
>3a5518	08 5b 68 28 e2 20 c0 02 00 f0 14 a7 00 85 18 30
>3a5528	06 64 19 64 1a 80 1e a9 ff 85 19 85 1a 80 16 a7
>3a5538	00 85 18 22 bf 5a 3a a7 00 85 19 30 04 64 1a 80
>3a5548	04 a9 ff 85 1a c2 20 38 a5 00 65 18 85 18 e2 20
>3a5558	a5 02 65 1a 85 1a 22 69 55 3a 22 bf 5a 3a 2b 28
>3a5568	6b 08 0b c2 20 48 08 c2 20 48 a9 46 08 5b 68 28
>3a5578	e2 20 a5 4c 20 c5 02 e2 20 a9 3a 20 18 00 c2 20
>3a5588	a5 4a 20 ab 02 68 2b 28 6b 4f 52 41 00 41 4e 44
>3a5598	00 45 4f 52 00 41 44 43 00 53 54 41 00 4c 44 41
>3a55a8	00 43 4d 50 00 53 42 43 00 41 53 4c 00 52 4f 4c
>3a55b8	00 4c 53 52 00 52 4f 52 00 53 54 58 00 4c 44 58
>3a55c8	00 44 45 43 00 49 4e 43 00 42 49 54 00 4a 4d 50
>3a55d8	00 53 54 59 00 4c 44 59 00 43 50 59 00 43 50 58
>3a55e8	00 42 52 4b 00 4a 53 52 00 52 54 49 00 52 54 53
>3a55f8	00 50 48 50 00 50 4c 50 00 50 48 41 00 50 4c 41
>3a5608	00 44 45 59 00 54 41 59 00 49 4e 59 00 49 4e 58
>3a5618	00 43 4c 43 00 53 45 43 00 43 4c 49 00 53 45 49
>3a5628	00 54 59 41 00 43 4c 56 00 43 4c 44 00 53 45 44
>3a5638	00 54 58 41 00 54 58 53 00 54 41 58 00 54 53 58
>3a5648	00 44 45 58 00 4e 4f 50 00 42 50 4c 00 42 4d 49
>3a5658	00 42 56 43 00 42 56 53 00 42 43 43 00 42 43 53
>3a5668	00 42 4e 45 00 42 45 51 00 54 53 42 00 54 52 42
>3a5678	00 53 54 5a 00 42 52 41 00 50 48 59 00 50 4c 59
>3a5688	00 50 48 58 00 50 4c 58 00 50 48 44 00 50 4c 44
>3a5698	00 50 48 4b 00 52 54 4c 00 50 48 42 00 50 4c 42
>3a56a8	00 57 41 49 00 58 42 41 00 54 43 53 00 54 53 43
>3a56b8	00 54 43 44 00 54 44 43 00 54 58 59 00 54 59 58
>3a56c8	00 53 54 50 00 58 43 45 00 43 4f 50 00 4a 53 4c
>3a56d8	00 57 44 4d 00 50 45 52 00 42 52 4c 00 52 45 50
>3a56e8	00 53 45 50 00 4d 56 50 00 4d 56 4e 00 50 45 49
>3a56f8	00 50 45 41 00 4a 4d 4c 00 00 00 e9 55 91 55 d1
>3a5708	56 91 55 71 56 91 55 b1 55 91 55 f9 55 91 55 b1
>3a5718	55 91 56 71 56 91 55 b1 55 91 55 51 56 91 55 91
>3a5728	55 91 55 75 56 91 55 b1 55 91 55 19 56 91 55 cd
>3a5738	55 b1 56 75 56 91 55 b1 55 91 55 ed 55 95 55 d5
>3a5748	56 95 55 d1 55 95 55 b5 55 95 55 fd 55 95 55 b5
>3a5758	55 95 56 d1 55 95 55 b5 55 95 55 55 56 95 55 95
>3a5768	55 95 55 d1 55 95 55 b5 55 95 55 1d 56 95 55 c9
>3a5778	55 b5 56 d1 55 95 55 b5 55 95 55 f1 55 99 55 d9
>3a5788	56 99 55 ed 56 99 55 b9 55 99 55 01 56 99 55 b9
>3a5798	55 99 56 d5 55 99 55 b9 55 99 55 59 56 99 55 99
>3a57a8	55 99 55 f1 56 99 55 b9 55 99 55 21 56 99 55 81
>3a57b8	56 b9 56 fd 56 99 55 b9 55 99 55 f5 55 9d 55 dd
>3a57c8	56 9d 55 79 56 9d 55 bd 55 9d 55 05 56 9d 55 bd
>3a57d8	55 9d 56 d5 55 9d 55 bd 55 9d 55 5d 56 9d 55 9d
>3a57e8	55 9d 55 79 56 9d 55 bd 55 9d 55 25 56 9d 55 85
>3a57f8	56 bd 56 d5 55 9d 55 bd 55 9d 55 7d 56 a1 55 e1
>3a5808	56 a1 55 d9 55 a1 55 c1 55 a1 55 09 56 d1 55 39
>3a5818	56 a1 56 d9 55 a1 55 c1 55 a1 55 61 56 a1 55 a1
>3a5828	55 a1 55 d9 55 a1 55 c1 55 a1 55 29 56 a1 55 3d
>3a5838	56 c1 56 79 56 a1 55 79 56 a1 55 dd 55 a5 55 c5
>3a5848	55 a5 55 dd 55 a5 55 c5 55 a5 55 0d 56 a5 55 41
>3a5858	56 a5 56 dd 55 a5 55 c5 55 a5 55 65 56 a5 55 a5
>3a5868	55 a5 55 dd 55 a5 55 c5 55 a5 55 2d 56 a5 55 45
>3a5878	56 c5 56 dd 55 a5 55 c5 55 a5 55 e1 55 a9 55 e5
>3a5888	56 a9 55 e1 55 a9 55 c9 55 a9 55 11 56 a9 55 49
>3a5898	56 a9 56 e1 55 a9 55 c9 55 a9 55 69 56 a9 55 a9
>3a58a8	55 a9 55 f5 56 a9 55 c9 55 a9 55 31 56 a9 55 89
>3a58b8	56 c9 56 fd 56 a9 55 c9 55 a9 55 e5 55 ad 55 e9
>3a58c8	56 ad 55 e5 55 ad 55 cd 55 ad 55 15 56 ad 55 4d
>3a58d8	56 ad 56 e5 55 ad 55 cd 55 ad 55 6d 56 ad 55 ad
>3a58e8	55 ad 55 f9 56 ad 55 cd 55 ad 55 35 56 ad 55 8d
>3a58f8	56 cd 56 ed 55 ad 55 cd 55 ad 55 00 00 13 00 02
>3a5908	09 01 01 01 0a 13 82 08 13 03 03 03 0b 12 04 0f
>3a5918	0c 01 05 05 0d 13 06 08 13 03 07 07 0e 03 00 0b
>3a5928	09 01 01 01 0a 13 82 08 13 03 03 03 0b 12 04 0f
>3a5938	0c 05 05 05 0d 13 06 08 13 07 07 07 0e 13 00 13
>3a5948	09 14 01 01 0a 13 82 08 13 03 03 03 0b 12 04 0f
>3a5958	0c 14 05 05 0d 13 06 13 13 0b 07 07 0b 13 00 16
>3a5968	09 01 01 01 0a 13 82 08 13 15 03 03 0b 12 04 0f
>3a5978	0c 05 05 05 0d 13 06 13 13 10 07 07 0e 12 00 16
>3a5988	09 01 01 01 0a 13 82 13 13 03 03 03 0b 12 04 0f
>3a5998	0c 05 05 11 0d 13 06 13 13 03 07 07 0e 82 00 42
>3a59a8	09 01 01 01 0a 13 82 13 13 03 03 03 0b 12 04 0f
>3a59b8	0c 05 05 11 0d 13 06 13 13 07 07 06 0e 42 00 02
>3a59c8	09 01 01 01 0a 13 82 13 13 03 03 03 0b 12 04 0f
>3a59d8	0c 01 05 05 0d 13 06 13 13 17 07 07 0e 42 00 02
>3a59e8	09 01 01 01 0f 13 82 13 13 03 03 03 0b 12 04 0f
>3a59f8	0c 03 05 05 0d 13 06 13 13 10 07 07 0e 01 01 01
>3a5a08	02 01 01 02 02 00 01 01 03 01 01 03 01 02 01 01
>3a5a18	00 02 02 02 02 41 00 08 64 64 3a 64 64 64 64 2c
>3a5a28	58 00 0e 64 64 3a 64 64 64 64 00 0b 64 64 64 64
>3a5a38	2c 58 00 07 64 64 64 64 2c 59 00 06 64 64 64 64
>3a5a48	00 03 64 64 2c 58 00 05 64 64 2c 59 00 11 64 64
>3a5a58	2c 53 00 09 64 64 00 01 23 64 64 64 64 00 c2 23
>3a5a68	64 64 2c 23 64 64 00 14 23 64 64 00 02 28 64 64
>3a5a78	2c 53 29 2c 59 00 0c 28 64 64 64 64 2c 58 29 00
>3a5a88	10 28 64 64 64 64 29 00 10 28 64 64 2c 58 29 00
>3a5a98	00 28 64 64 29 2c 59 00 04 28 64 64 29 00 0f 5b
>3a5aa8	64 64 64 64 5d 00 17 5b 64 64 5d 2c 59 00 0d 5b
>3a5ab8	64 64 5d 00 0a 00 00 08 c2 20 48 18 af 78 08 00
>3a5ac8	69 01 00 8f 78 08 00 e2 20 af 7a 08 00 69 00 8f
>3a5ad8	7a 08 00 c2 20 68 28 6b 08 c2 10 e2 20 da a2 08
>3a5ae8	00 0a b0 08 48 a9 30 20 18 00 80 06 48 a9 31 20
>3a5af8	18 00 68 ca d0 eb fa 28 6b 08 c2 20 48 a9 46 08
>3a5b08	5b 68 28 e2 20 a7 32 f0 0a c9 20 d0 06 22 bf 5a
>3a5b18	3a 80 f2 6b 08 08 c2 20 48 a9 46 08 5b 68 28 22
>3a5b28	bf 5a 3a 22 01 5b 3a c2 30 a5 31 c2 20 29 ff 00
>3a5b38	0a 0a aa a5 32 95 0d a5 34 95 0f e2 20 a7 32 f0
>3a5b48	14 c9 22 f0 06 22 bf 5a 3a 80 f2 a9 00 87 32 22
>3a5b58	bf 5a 3a e6 31 28 6b 08 c2 20 48 a9 46 08 5b 68
>3a5b68	28 e2 20 64 4a c2 20 64 50 64 52 e2 20 a7 32 c9
>3a5b78	3a f0 0d 20 18 03 90 0e 22 f7 4f 3a a9 01 85 4a
>3a5b88	22 bf 5a 3a 80 e5 a5 4a f0 16 a5 31 c2 20 29 ff
>3a5b98	00 0a 0a aa a5 50 95 0d a5 52 95 0f e2 20 e6 31
>3a5ba8	6b e2 20 64 31 22 01 5b 3a a7 32 f0 21 c9 22 d0
>3a5bb8	06 22 1c 5b 3a 80 0a 22 5f 5b 3a a5 31 c9 09 b0
>3a5bc8	0d a7 32 f0 09 c9 20 f0 dc 20 18 03 b0 d7 6b 08
>3a5bd8	0b 08 c2 20 48 a9 46 08 5b 68 28 c2 10 e2 20 a2
>3a5be8	31 00 74 00 ca d0 fb a9 00 85 02 85 34 c2 20 a9
>3a5bf8	00 4f 85 00 85 32 e2 20 22 01 5b 3a c9 00 f0 38
>3a5c08	c2 20 a5 32 85 08 e2 20 a5 34 85 0a a2 01 00 22
>3a5c18	bf 5a 3a a7 32 d0 06 86 0b 64 31 80 1b c9 20 f0
>3a5c28	03 e8 80 eb 86 0b a9 00 87 32 22 bf 5a 3a a7 08
>3a5c38	c9 41 f0 07 22 a9 5b 3a 2b 28 6b 22 01 5b 3a a7
>3a5c48	32 f0 f5 22 5f 5b 3a 22 01 5b 3a a7 32 f0 e9 c2
>3a5c58	20 a5 32 85 11 e2 20 a5 34 85 13 22 bf 5a 3a a7
>3a5c68	32 f0 26 c9 20 d0 f4 a9 00 87 32 e6 31 22 bf 5a
>3a5c78	3a 22 01 5b 3a a7 32 f0 bf c2 20 a5 32 85 15 e2
>3a5c88	20 a5 34 85 17 e6 31 80 af e6 31 80 ab 08 c2 10
>3a5c98	e2 20 a5 31 d0 0c a2 7f 5d a9 3a 48 ab 20 9b 02
>3a5ca8	80 5e c2 20 a5 0d 8f 21 08 00 a5 0f 8f 23 08 00
>3a5cb8	20 58 41 e2 20 a5 31 c9 01 d0 0f c2 20 a9 ff ff
>3a5cc8	8f 54 03 00 8f 56 03 00 80 0e c2 20 a5 11 8f 54
>3a5cd8	03 00 a5 13 8f 56 03 00 22 14 11 38 b0 22 e2 20
>3a5ce8	a2 a4 5d a9 3a 48 ab 20 9b 02 af 2e 03 00 20 c5
>3a5cf8	02 a9 20 20 18 00 af 20 03 00 20 c5 02 20 1a 02
>3a5d08	28 6b 8b 08 c2 10 e2 20 a5 31 c9 03 f0 0c a2 7f
>3a5d18	5d a9 3a 48 ab 20 9b 02 80 51 c2 20 a5 0d 8f 21
>3a5d28	08 00 a5 0f 8f 23 08 00 20 58 41 a5 11 8f 50 03
>3a5d38	00 a5 13 8f 52 03 00 a5 15 8f 58 03 00 a5 17 8f
>3a5d48	5a 03 00 22 18 11 38 b0 22 e2 20 a2 8e 5d a9 3a
>3a5d58	48 ab 20 9b 02 af 2e 03 00 20 c5 02 a9 20 20 18
>3a5d68	00 af 20 03 00 20 c5 02 20 1a 02 28 ab 6b 5c 01
>3a5d78	1f 3a 6b 00 00 00 00 42 61 64 20 61 72 67 75 6d
>3a5d88	65 6e 74 73 0d 00 55 6e 61 62 6c 65 20 74 6f 20
>3a5d98	73 61 76 65 20 66 69 6c 65 3a 20 00 55 6e 61 62
>3a5da8	6c 65 20 74 6f 20 6c 6f 61 64 20 66 69 6c 65 3a
>3a5db8	20 00 0d 20 20 50 43 20 20 20 20 20 41 20 20 20
>3a5dc8	20 58 20 20 20 20 59 20 20 20 20 53 50 20 20 20
>3a5dd8	44 42 52 20 44 50 20 20 20 4e 56 4d 58 44 49 5a
>3a5de8	43 0d 00 41 43 44 46 47 4a 48 4c 4d 52 3b 53 54
>3a5df8	56 57 58 3e 3f 00 18 fb 08 c2 20 48 a9 00 08 5b
>3a5e08	68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 30 20 3d
>3a5e18	5e a9 ff fe 1b 08 e2 20 48 a9 3a 48 ab 68 28 a2
>3a5e28	fc d1 20 9b 02 08 e2 20 48 a9 00 48 ab 68 28 4c
>3a5e38	01 1f 4c 3a 5e 08 20 ae 01 20 43 38 28 60 00 00
>3a5e48	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 1818 times (29088 bytes)...
>3acff8	00 00 00 00 00 00 00 00 30 31 32 33 34 35 36 37
>3ad008	38 39 41 42 43 44 45 46 2b 00 2d 00 2a 00 2f 00
>3ad018	4d 4f 44 00 5e 00 3c 00 3d 00 3e 00 4e 4f 54 00
>3ad028	41 4e 44 00 4f 52 00 28 00 29 00 52 45 4d 00 50
>3ad038	52 49 4e 54 00 4c 45 54 00 47 4f 54 4f 00 45 4e
>3ad048	44 00 49 46 00 54 48 45 4e 00 45 4c 53 45 00 47
>3ad058	4f 53 55 42 00 52 45 54 55 52 4e 00 46 4f 52 00
>3ad068	54 4f 00 53 54 45 50 00 4e 45 58 54 00 44 4f 00
>3ad078	4c 4f 4f 50 00 57 48 49 4c 45 00 55 4e 54 49 4c
>3ad088	00 45 58 49 54 00 43 4c 52 00 53 54 4f 50 00 50
>3ad098	4f 4b 45 00 50 4f 4b 45 57 00 50 4f 4b 45 4c 00
>3ad0a8	43 4c 53 00 52 45 41 44 00 44 41 54 41 00 52 45
>3ad0b8	53 54 4f 52 45 00 44 49 4d 00 43 41 4c 4c 00 3c
>3ad0c8	3d 00 3e 3d 00 3c 3e 00 2d 00 4c 45 4e 00 50 45
>3ad0d8	45 4b 00 50 45 45 4b 57 00 50 45 45 4b 4c 00 43
>3ad0e8	48 52 24 00 41 53 43 00 53 50 43 00 54 41 42 00
>3ad0f8	41 42 53 00 53 47 4e 00 48 45 58 24 00 44 45 43
>3ad108	00 53 54 52 24 00 56 41 4c 00 4c 45 46 54 24 00
>3ad118	52 49 47 48 54 24 00 4d 49 44 24 00 52 55 4e 00
>3ad128	4e 45 57 00 4c 4f 41 44 00 4c 49 53 54 00 44 49
>3ad138	52 00 42 4c 4f 41 44 00 42 52 55 4e 00 42 53 41
>3ad148	56 45 00 44 45 4c 00 53 41 56 45 00 4d 4f 4e 49
>3ad158	54 4f 52 00 47 45 54 00 49 4e 50 55 54 00 53 45
>3ad168	54 42 4f 52 44 45 52 00 54 45 58 54 43 4f 4c 4f
>3ad178	52 00 53 45 54 42 47 43 4f 4c 4f 52 00 53 45 54
>3ad188	44 41 54 45 00 47 45 54 44 41 54 45 24 00 53 45
>3ad198	54 54 49 4d 45 00 47 45 54 54 49 4d 45 24 00 47
>3ad1a8	52 41 50 48 49 43 53 00 53 45 54 43 4f 4c 4f 52
>3ad1b8	00 50 49 58 4d 41 50 00 43 4c 52 50 49 58 4d 41
>3ad1c8	50 00 50 4c 4f 54 00 4c 49 4e 45 00 46 49 4c 4c
>3ad1d8	00 53 50 52 49 54 45 00 53 50 52 49 54 45 41 54
>3ad1e8	00 53 50 52 49 54 45 53 48 4f 57 00 0d 52 45 41
>3ad1f8	44 59 0d 00 43 32 35 36 20 46 6f 65 6e 69 78 20
>3ad208	42 41 53 49 43 38 31 36 20 76 30 30 2e 30 30 20
>3ad218	61 6c 70 68 61 20 28 32 30 32 30 2d 30 34 2d 30
>3ad228	38 29 0d 00
>3b0000					.align 256
.3b0000					CREDITS_TEXT
>3b0000	54 68 69 73 20 69 73 20		                .text "This is the credits screen!"
>3b0008	74 68 65 20 63 72 65 64 69 74 73 20 73 63 72 65
>3b0018	65 6e 21
>3b001b	20 20 20 20 20 20 20 20		                .fill 128 - len("This is the credits screen!"), $20
>3b0023	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 4 times (64 bytes)...
>3b0073	20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0080	49 20 77 6f 75 6c 64 20		                .text "I would like to thank the academy."
>3b0088	6c 69 6b 65 20 74 6f 20 74 68 61 6e 6b 20 74 68
>3b0098	65 20 61 63 61 64 65 6d 79 2e
>3b00a2	20 20 20 20 20 20 20 20		                .fill 128 - len("I would like to thank the academy."), $20
>3b00aa	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 4 times (64 bytes)...
>3b00fa	20 20 20 20 20 20
>3b0100					                .text ""
>3b0100	20 20 20 20 20 20 20 20		                .fill 128 - len(""), $20
>3b0108	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 6 times (96 bytes)...
>3b0178	20 20 20 20 20 20 20 20
>3b0180	50 72 65 73 73 20 61 6e		                .text "Press any key to go back..."
>3b0188	79 20 6b 65 79 20 74 6f 20 67 6f 20 62 61 63 6b
>3b0198	2e 2e 2e
>3b019b	20 20 20 20 20 20 20 20		                .fill 128 - len("Press any key to go back..."), $20
>3b01a3	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 4 times (64 bytes)...
>3b01f3	20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0200	20 20 20 20 20 20 20 20		                .fill 128 * 60,$20
>3b0208	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 478 times (7648 bytes)...
>3b1ff8	20 20 20 20 20 20 20 20
>3b2000					.align 256
>3b2000	f3 f3 f3 f3 f3 f3 f3 f3		CREDITS_COLOR   .fill 128 * 64, $F3
>3b2008	f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3
;	...repeated 510 times (8160 bytes)...
>3b3ff8	f3 f3 f3 f3 f3 f3 f3 f3

;******  End of listing
