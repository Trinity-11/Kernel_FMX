
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -D TARGET=2 --long-address --flat --intel-hex -o kernel.hex --list kernel_hex.lst --labels=kernel_hex.lbl src\kernel.asm
; Sun Jun 28 19:17:16 2020

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=2					TARGET=2

;******  Processing input file: src\kernel.asm

=1					TARGET_FLASH = 1              ; The code is being assembled for Flash
=2					TARGET_RAM = 2                ; The code is being assembled for RAM

;******  Processing file: src\macros_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\characters.asm

=$03					CHAR_CTRL_C = $03   ; CTRL-C
=$08					CHAR_BS = $08       ; Backspace (delete character to the left of the cursor)
=$09					CHAR_TAB = $09      ; TAB (moves cursor to next tabulated column)
=$0a					CHAR_LF = $0A       ; Line feed
=$0d					CHAR_CR = $0D       ; Carriage return
=$0f					CHAR_INS = $0F      ; Insert a space at the cursor
=$11					CHAR_UP = $11       ; Up arrow
=$1d					CHAR_RIGHT = $1D    ; Right arrow
=$20					CHAR_SP = $20       ; Space
=$91					CHAR_DOWN = $91     ; Down arrow
=$9d					CHAR_LEFT = $9D     ; Left arrow
=$7f					CHAR_DEL = $7F      ; Delete key (delete the character at the cursor)

;******  Return to file: src\kernel.asm


;******  Processing file: src\simulator_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_inc.asm

=$000000				BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000				TMPPTR1          = $000000 ; 4 byte temporary pointer
=$000004				TMPPTR2          = $000004 ; 4 byte temporary pointer
=$000008				OPL2_ADDY_PTR_LO = $000008 ; THis Points towards the Instruments Database
=$000009				OPL2_ADDY_PTR_MD = $000009
=$00000a				OPL2_ADDY_PTR_HI = $00000A
=$00000c				SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f				COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011				COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013				LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=25
=$000015				LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017				CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a				CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c				CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e				CURCOLOR         = $00001E ;1 Byte Color of next character to be printed to the screen.
=$00001f				COLORPOS         = $00001F ;3 Byte address of cursor's position in the color matrix
=$000022				STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024				STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$000026				OPL2_OPERATOR    = $000026 ;
=$000027				OPL2_CHANNEL     = $000027 ;
=$000028				OPL2_REG_REGION  = $000028 ; Offset to the Group of Registers
=$00002a				OPL2_REG_OFFSET  = $00002A ; 2 Bytes (16Bits)
=$00002c				OPL2_IND_ADDY_LL = $00002C ; 2 Bytes Reserved (Only need 3)
=$00002e				OPL2_IND_ADDY_HL = $00002E ; 2 Bytes Reserved (Only need 3)
=$000030				OPL2_NOTE        = $000030 ; 1 Byte
=$000031				OPL2_OCTAVE      = $000031 ; 1 Byte
=$000032				OPL2_PARAMETER0  = $000032 ; 1 Byte - Key On/Feedback
=$000033				OPL2_PARAMETER1  = $000033 ; 1 Byte
=$000034				OPL2_PARAMETER2  = $000034 ; 1 Byte
=$000035				OPL2_PARAMETER3  = $000035 ; 1 Byte
=$000036				OPL2_LOOP        = $000036 ;
=$000036				OPL2_BLOCK       = $000036
=$000038				SDCARD_FILE_PTR  = $000038 ; 3 Bytes Pointer to Filename to open
=$00003c				SDCARD_BYTE_NUM  = $00003C ; 2Bytes
=$00003f				SDCARD_PRSNT_MNT = $00003F ; 1 Byte, Indicate that the SDCard is Present and that it is Mounted
=$000040				BM_CLEAR_SCRN_X  = $000040
=$000042				BM_CLEAR_SCRN_Y  = $000042
=$000040				RAD_STARTLINE    = $000040 ; 1 Byte
=$000041				RAD_PATTERN_IDX  = $000041 ; 1 Byte
=$000042				RAD_LINE         = $000042 ; 1 Byte
=$000043				RAD_LINENUMBER   = $000043 ; 1 Byte
=$000044				RAD_CHANNEL_NUM  = $000044 ; 1 Byte
=$000045				RAD_ISLASTCHAN   = $000045 ; 1 Byte
=$000046				RAD_Y_POINTER    = $000046 ; 2 Bytes
=$000048				RAD_TICK         = $000048
=$00004a				RAD_CHANNEL_DATA = $00004A ; 2 Bytes
=$00004c				RAD_CHANNE_EFFCT = $00004C
=$00004d				RAD_TEMP         = $00004D
=$000050				RAD_ADDR         = $000050 ; 3 bytes to avoid OPL2 errors.
=$000053				RAD_PATTRN       = $000053 ; 1 bytes - offset to patter
=$000054				RAD_PTN_DEST     = $000054 ; 3 bytes - where to write the pattern data
=$000057				RAD_CHANNEL      = $000057 ; 2 bytes - 0 to 8
=$000059				RAD_LAST_NOTE    = $000059 ; 1 if this is the last note
=$00005a				RAD_LINE_PTR     = $00005A ; 2 bytes - offset to memory location
=$000040				BMP_X_SIZE       = $000040 ; 2 Bytes
=$000042				BMP_Y_SIZE       = $000042 ; 2 Bytes
=$000044				BMP_PRSE_SRC_PTR = $000044 ; 3 Bytes
=$000048				BMP_PRSE_DST_PTR = $000048 ; 3 Bytes
=$00004c				BMP_COLOR_PALET  = $00004C ; 2 Bytes
=$00004e				SCRN_X_STRIDE    = $00004E ; 2 Bytes, Basically How many Pixel Accross in Bitmap Mode
=$000050				BMP_FILE_SIZE    = $000050 ; 4 Bytes
=$000054				BMP_POSITION_X   = $000054 ; 2 Bytes Where, the BMP will be position on the X Axis
=$000056				BMP_POSITION_Y   = $000056 ; 2 Bytes Where, the BMP will be position on the Y Axis
=$000058				BMP_PALET_CHOICE = $000058 ;
=$0000e0				MOUSE_PTR        = $0000E0
=$0000e1				MOUSE_POS_X_LO   = $0000E1
=$0000e2				MOUSE_POS_X_HI   = $0000E2
=$0000e3				MOUSE_POS_Y_LO   = $0000E3
=$0000e4				MOUSE_POS_Y_HI   = $0000E4
=$0000f0				USER_TEMP        = $0000F0 ;32 Bytes Temp space for user programs
=$000100				GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000140				INT_CONTROLLER   = $000140 ; $000140...$00015F Interrupt Controller
=$000160				TIMER_CONTROLLER = $000160 ; $000160...$00017F Timer0/Timer1/Timer2 Block
=$000160				TIMER_CTRL_REGLL = $000160 ;
=$000161				TIMER_CTRL_REGLH = $000161 ;
=$000162				TIMER_CTRL_REGHL = $000162 ;
=$000163				TIMER_CTRL_REGHH = $000163 ;
=$000240				CPU_REGISTERS    = $000240 ; Byte
=$000240				CPUPC            = $000240 ;2 Bytes Program Counter (PC)
=$000242				CPUPBR           = $000242 ;2 Bytes Program Bank Register (K)
=$000244				CPUA             = $000244 ;2 Bytes Accumulator (A)
=$000246				CPUX             = $000246 ;2 Bytes X Register (X)
=$000248				CPUY             = $000248 ;2 Bytes Y Register (Y)
=$00024a				CPUSTACK         = $00024A ;2 Bytes Stack Pointer (S)
=$00024c				CPUDP            = $00024C ;2 Bytes Direct Page Register (D)
=$00024e				CPUDBR           = $00024E ;1 Byte  Data Bank Register (B)
=$00024f				CPUFLAGS         = $00024F ;1 Byte  Flags (P)
=$000250				MONITOR_VARS     = $000250 ; Byte  MONITOR Variables. BASIC variables may overlap this space
=$000250				MCMDADDR         = $000250 ;3 Bytes Address of the current line of text being processed by the command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
=$000253				MCMP_TEXT        = $000253 ;3 Bytes Address of symbol being evaluated for COMPARE routine
=$000256				MCMP_LEN         = $000256 ;2 Bytes Length of symbol being evaluated for COMPARE routine
=$000258				MCMD             = $000258 ;3 Bytes Address of the current command/function string
=$00025b				MCMD_LEN         = $00025B ;2 Bytes Length of the current command/function string
=$00025d				MARG1            = $00025D ;4 Bytes First command argument. May be data or address, depending on command
=$000261				MARG2            = $000261 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000265				MARG3            = $000265 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000269				MARG4            = $000269 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$00026d				MARG5            = $00026D ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000271				MARG6            = $000271 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000275				MARG7            = $000275 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000279				MARG8            = $000279 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000300				LOADFILE_VARS    = $000300 ; Byte
=$000300				LOADFILE_NAME    = $000300 ;3 Bytes (addr) Name of file to load. Address in Data Page
=$000303				LOADFILE_LEN     = $000303 ;1 Byte  Length of filename. 0=Null Terminated
=$000304				LOADPBR          = $000304 ;1 Byte  First Program Bank of loaded file ($05 segment)
=$000305				LOADPC           = $000305 ;2 Bytes Start address of loaded file ($05 segment)
=$000307				LOADDBR          = $000307 ;1 Byte  First data bank of loaded file ($06 segment)
=$000308				LOADADDR         = $000308 ;2 Bytes FIrst data address of loaded file ($06 segment)
=$00030a				LOADFILE_TYPE    = $00030A ;3 Bytes (addr) File type string in loaded data file. Actual string data will be in Bank 1. Valid values are BIN, PRG, P16
=$00030d				BLOCK_LEN        = $00030D ;2 Bytes Length of block being loaded
=$00030f				BLOCK_ADDR       = $00030F ;2 Bytes (temp) Address of block being loaded
=$000311				BLOCK_BANK       = $000311 ;1 Byte  (temp) Bank of block being loaded
=$000312				BLOCK_COUNT      = $000312 ;2 Bytes (temp) Counter of bytes read as file is loaded
=$000300				FDC_DRIVE        = $000300 ;1 byte - The number of the selected drive
=$000301				FDC_HEAD         = $000301 ;1 byte - The head number (0 or 1)
=$000302				FDC_CYLINDER     = $000302 ;1 byte - The cylinder number
=$000303				FDC_SECTOR       = $000303 ;1 byte - The sector number
=$000304				FDC_SECTOR_SIZE  = $000304 ;1 byte - The sector size code (2 = 512)
=$000305				FDC_SECPERTRK    = $000305 ;1 byte - The number of sectors per track (18 for 1.44 MB floppy)
=$000306				FDC_ST0          = $000306 ;1 byte - Status Register 0
=$000307				FDC_ST1          = $000307 ;1 byte - Status Register 1
=$000308				FDC_ST2          = $000308 ;1 byte - Status Register 2
=$000309				FDC_ST3          = $000309 ;1 byte - Status Register 3
=$00030a				FDC_PCN          = $00030A ;1 byte - Present Cylinder Number
=$00030b				FDC_STATUS       = $00030B ;1 byte - Status of what we think is going on with the FDC:
=$00030c				DIVIDEND         = $00030C ;4 bytes - Dividend for 32-bit division
=$000310				DIVISOR          = $000310 ;4 bytes - Divisor for 32-bit division
=$000314				REMAINDER        = $000314 ;4 bytes - Remainder for 32-bit division
=$000320				SDOS_VARIABLES   = $000320
=$000320				BIOS_STATUS      = $000320      ; 1 byte - Status of any BIOS operation
=$000321				BIOS_DEV         = $000321      ; 1 byte - Block device number for block operations
=$000322				BIOS_LBA         = $000322      ; 4 bytes - Address of block to read/write (this is the physical block, w/o reference to partition)
=$000326				BIOS_BUFF_PTR    = $000326      ; 4 bytes - 24-bit pointer to memory for read/write operations
=$00032a				BIOS_FIFO_COUNT  = $00032A      ; 2 bytes - The number of bytes read on the last block read
=$00032c				BIOS_FLAGS       = $00032C      ; 1 byte - Flags for various BIOSy things:
=$00032d				BIOS_TIMER       = $00032D      ; 1 byte - the number of 1/60 ticks for a time out
=$00032e				DOS_STATUS       = $00032E      ; 1 byte - The error code describing any error with file access
=$000330				DOS_CLUS_ID      = $000330      ; 4 bytes - The cluster desired for a DOS operation
=$000338				DOS_DIR_PTR      = $000338      ; 4 bytes - Pointer to a directory entry (assumed to be within DOS_SECTOR)
=$00033c				DOS_BUFF_PTR     = $00033C      ; 4 bytes - A pointer for DOS cluster read/write operations
=$000340				DOS_FD_PTR       = $000340      ; 4 bytes - A pointer to a file descriptor
=$000344				DOS_FAT_LBA      = $000344      ; 4 bytes - The LBA for a sector of the FAT we need to read/write
=$000348				DOS_TEMP         = $000348      ; 4 bytes - Temporary storage for DOS operations
=$00034c				DOS_FILE_SIZE    = $00034C      ; 4 bytes - The size of a file
=$000350				DOS_SRC_PTR      = $000350      ; 4 bytes - Pointer for transferring data
=$000354				DOS_DST_PTR      = $000354      ; 4 bytes - Pointer for transferring data
=$000358				DOS_END_PTR      = $000358      ; 4 bytes - Pointer to the last byte to save
=$00035c				DOS_RUN_PTR      = $00035C      ; 4 bytes - Pointer for starting a loaded program
=$000360				DOS_RUN_PARAM    = $000360      ; 4 bytes - Pointer to the ASCIIZ string for arguments in loading a program
=$000364				DOS_STR1_PTR     = $000364      ; 4 bytes - pointer to a string
=$000368				DOS_STR2_PTR     = $000368      ; 4 bytes - pointer to a string
=$00036b				DOS_SCRATCH      = $00036B      ; 4 bytes - general purpose short term storage
=$000400				DOS_PATH_BUFF    = $000400      ; 256 bytes - A buffer for path names
=$000500				FDC_PARAMETERS   = $000500      ; 16 bytes - a buffer of parameter data for the FDC
=$000510				FDC_RESULTS      = $000510      ; 16 bytes - Buffer for results of FDC commands
=$000530				FDC_PARAM_NUM    = $000530      ; 1 byte - The number of parameters to send to the FDC (including command)
=$000532				FDC_RESULT_NUM   = $000532      ; 1 byte - The number of results expected
=$000533				FDC_EXPECT_DAT   = $000533      ; 1 byte - 0 = the command expects no data, otherwise expects data
=$000534				FDC_CMD_RETRY    = $000534      ; 1 byte - a retry counter for commands
=$000700				CURRUART         = $000700 ; 3-bytes: the base address of the current UART
=$000703				CHAN_OUT         = $000703 ; 1-byte: the number of the current output channel (for PUTC, etc.)
=$000704				CHAN_IN          = $000704 ; 1-byte: the number of the current input channel (for GETCH, etc.)
=$000705				TIMERFLAGS       = $000705 ; 1-byte: flags to indicate that one of the timer interupts has triggered
=$80					TIMER0TRIGGER    = $80
=$40					TIMER1TRIGGER    = $40
=$20					TIMER2TRIGGER    = $20
=$000f00				KEY_BUFFER       = $000F00 ; 64 Bytes keyboard buffer
=$0080					KEY_BUFFER_SIZE  = $0080   ;128 Bytes (constant) keyboard buffer length
=$000f7f				KEY_BUFFER_END   = $000F7F ;  1 Byte  Last byte of keyboard buffer
=$000f83				KEY_BUFFER_CMD   = $000F83 ;  1 Byte  Indicates the Command Process Status
=$000f84				COMMAND_SIZE_STR = $000F84 ;  1 Byte
=$000f86				COMMAND_COMP_TMP = $000F86 ;  2 Bytes
=$000f87				KEYBOARD_SC_FLG  = $000F87 ;  1 Bytes that indicate the Status of Left Shift, Left CTRL, Left ALT, Right Shift
=$000f88				KEYBOARD_SC_TMP  = $000F88 ;  1 Byte, Interrupt Save Scan Code while Processing
=$000f89				KEYBOARD_LOCKS   = $000F89 ;  1 Byte, the status of the various lock keys
=$000f8a				KEYFLAG          = $000F8A ;  1 Byte, flag to indicate if CTRL-C has been pressed
=$000f8b				KEY_BUFFER_RPOS  = $000F8B ;  2 Byte, position of the character to read from the KEY_BUFFER
=$000f8d				KEY_BUFFER_WPOS  = $000F8D ;  2 Byte, position of the character to write to the KEY_BUFFER
=$001000				KERNEL_JMP_BEGIN = $001000 ; Reserved for the Kernel jump table
=$001fff				KERNEL_JMP_END   = $001FFF
=$002000				TEST_BEGIN       = $002000 ;28672 Bytes Test/diagnostic code for prototype.
=$007fff				TEST_END         = $007FFF ;0 Byte
=$008000				STACK_BEGIN      = $008000 ;32512 Bytes The default beginning of stack space
=$00feff				STACK_END        = $00FEFF ;0 Byte  End of stack space. Everything below this is I/O space
=$00ff00				ISR_BEGIN        = $00FF00 ; Byte  Beginning of CPU vectors in Direct page
=$00ff00				HRESET           = $00FF00 ;16 Bytes Handle RESET asserted. Reboot computer and re-initialize the kernel.
=$00ff10				HCOP             = $00FF10 ;16 Bytes Handle the COP instruction. Program use; not used by OS
=$00ff20				HBRK             = $00FF20 ;16 Bytes Handle the BRK instruction. Returns to BASIC Ready prompt.
=$00ff30				HABORT           = $00FF30 ;16 Bytes Handle ABORT asserted. Return to Ready prompt with an error message.
=$00ff40				HNMI             = $00FF40 ;32 Bytes Handle NMI
=$00ff60				HIRQ             = $00FF60 ;32 Bytes Handle IRQ
=$00ff80				Unused_FF80      = $00FF80 ;End of direct page Interrrupt handlers
=$00ffe0				VECTORS_BEGIN    = $00FFE0 ;0 Byte  Interrupt vectors
=$00ffe0				JMP_READY        = $00FFE0 ;4 Bytes Jumps to ROM READY routine. Modified whenever alternate command interpreter is loaded.
=$00ffe4				VECTOR_COP       = $00FFE4 ;2 Bytes Native COP Interrupt vector
=$00ffe6				VECTOR_BRK       = $00FFE6 ;2 Bytes Native BRK Interrupt vector
=$00ffe8				VECTOR_ABORT     = $00FFE8 ;2 Bytes Native ABORT Interrupt vector
=$00ffea				VECTOR_NMI       = $00FFEA ;2 Bytes Native NMI Interrupt vector
=$00ffec				VECTOR_RESET     = $00FFEC ;2 Bytes Unused (Native RESET vector)
=$00ffee				VECTOR_IRQ       = $00FFEE ;2 Bytes Native IRQ Vector
=$00fff0				RETURN           = $00FFF0 ;4 Bytes RETURN key handler. Points to BASIC or MONITOR subroutine to execute when RETURN is pressed.
=$00fff4				VECTOR_ECOP      = $00FFF4 ;2 Bytes Emulation mode interrupt handler
=$00fff6				VECTOR_EBRK      = $00FFF6 ;2 Bytes Emulation mode interrupt handler
=$00fff8				VECTOR_EABORT    = $00FFF8 ;2 Bytes Emulation mode interrupt handler
=$00fffa				VECTOR_ENMI      = $00FFFA ;2 Bytes Emulation mode interrupt handler
=$00fffc				VECTOR_ERESET    = $00FFFC ;2 Bytes Emulation mode interrupt handler
=$00fffe				VECTOR_EIRQ      = $00FFFE ;2 Bytes Emulation mode interrupt handler
=$010000				VECTORS_END      = $010000 ;*End of vector space
=$00ffff				BANK0_END        = $00FFFF ;End of Bank 00 and Direct page

;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_data.asm

>380000	00 a0 af			                .long $AFA000       ; SCREENBEGIN, 3 bytes, Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>380003	4c 00				                .word 76            ; COLS_VISIBLE, 2 bytes, Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>380005	64 00				                .word 100           ; COLS_PER_LINE, 2 bytes, Columns in memory per screen line. A virtual line can be this long. Default=128
>380007	38 00				                .word 56            ; LINES_VISIBLE, 2 bytes, The number of rows visible on the screen. Default=25
>380009	40 00				                .word 64            ; LINES_MAX, 2 bytes, The number of rows in memory for the screen. Default=64
>38000b	00 a0 af			                .long $AFA000       ; CURSORPOS, 3 bytes, The next character written to the screen will be written in this location.
>38000e	00 00				                .word 0             ; CURSORX, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380010	00 00				                .word 0             ; CURSORY, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380012	0f				                .byte $0F           ; CURCOLOR, 2 bytes, Color of next character to be printed to the screen.
>380013	00				                .byte $00           ; CURATTR, 2 bytes, Attribute of next character to be printed to the screen.
>380014	00 80				                .word STACK_BEGIN   ; STACKBOT, 2 bytes, Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
>380016	ff fe				                .word STACK_END     ; STACKTOP, 2 bytes, Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.

;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_code.asm

.ff00	18		clc		RHRESET         CLC
.ff01	fb		xce		                XCE
.ff02	5c 00 10 38	jmp $381000	                JML BOOT
.ff10					RHCOP
.ff10	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff12	8b		phb		                PHB
.ff13	0b		phd		                PHD
.ff14	48		pha		                PHA
.ff15	da		phx		                PHX
.ff16	5a		phy		                PHY
.ff17	5c 08 10 38	jmp $381008	                JML BREAK
.ff20					RHBRK
.ff20	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff22	8b		phb		                PHB
.ff23	0b		phd		                PHD
.ff24	48		pha		                PHA
.ff25	da		phx		                PHX
.ff26	5a		phy		                PHY
.ff27	5c 08 10 38	jmp $381008	                JML BREAK
.ff30					RHABORT
.ff30	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff32	8b		phb		                PHB
.ff33	0b		phd		                PHD
.ff34	48		pha		                PHA
.ff35	da		phx		                PHX
.ff36	5a		phy		                PHY
.ff37	5c 08 10 38	jmp $381008	                JML BREAK
.ff40					 RHNMI
.ff40	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff42	8b		phb		                PHB
.ff43	0b		phd		                PHD
.ff44	48		pha		                PHA
.ff45	da		phx		                PHX
.ff46	5a		phy		                PHY
.ff47	22 c3 12 38	jsl $3812c3	                JSL NMI_HANDLER
.ff4b	7a		ply		                PLY
.ff4c	fa		plx		                PLX
.ff4d	68		pla		                PLA
.ff4e	2b		pld		                PLD
.ff4f	ab		plb		                PLB
.ff50	40		rti		                RTI
.ff60					RHIRQ
.ff60	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff62	8b		phb		                PHB
.ff63	0b		phd		                PHD
.ff64	48		pha		                PHA
.ff65	da		phx		                PHX
.ff66	5a		phy		                PHY
.ff67	22 3c 11 38	jsl $38113c	                JSL IRQ_HANDLER
.ff6b	7a		ply		                PLY
.ff6c	fa		plx		                PLX
.ff6d	68		pla		                PLA
.ff6e	2b		pld		                PLD
.ff6f	ab		plb		                PLB
.ff70	40		rti		                RTI
.ffe0	5c 04 00 3a	jmp $3a0004	JUMP_READY      JML MONITOR    ; Kernel READY routine. Rewrite this address to jump to a custom kernel.
>ffe4	10 ff				RVECTOR_COP     .addr HCOP     ; FFE4
>ffe6	20 ff				RVECTOR_BRK     .addr HBRK     ; FFE6
>ffe8	30 ff				RVECTOR_ABORT   .addr HABORT   ; FFE8
>ffea	40 ff				RVECTOR_NMI     .addr HNMI     ; FFEA
>ffec	00 00				                .word $0000    ; FFEC
>ffee	60 ff				RVECTOR_IRQ     .addr HIRQ    ; FFEE
.fff0	5c 79 06 39	jmp $390679	RRETURN         JML IRETURN
>fff4	10 ff				RVECTOR_ECOP    .addr HCOP     ; FFF4
>fff6	20 ff				RVECTOR_EBRK    .addr HBRK     ; FFF6
>fff8	30 ff				RVECTOR_EABORT  .addr HABORT   ; FFF8
>fffa	40 ff				RVECTOR_ENMI    .addr HNMI     ; FFFA
>fffc	00 ff				RVECTOR_ERESET  .addr HRESET   ; FFFC
>fffe	60 ff				RVECTOR_EIRQ    .addr HIRQ     ; FFFE

;******  Return to file: src\kernel.asm


;******  Processing file: src\Math_def.asm

=$000100				UNSIGNED_MULT_A_LO  = $000100
=$000101				UNSIGNED_MULT_A_HI  = $000101
=$000102				UNSIGNED_MULT_B_LO  = $000102
=$000103				UNSIGNED_MULT_B_HI  = $000103
=$000104				UNSIGNED_MULT_AL_LO = $000104
=$000105				UNSIGNED_MULT_AL_HI = $000105
=$000106				UNSIGNED_MULT_AH_LO = $000106
=$000107				UNSIGNED_MULT_AH_HI = $000107
=$000108				SIGNED_MULT_A_LO    = $000108
=$000109				SIGNED_MULT_A_HI    = $000109
=$00010a				SIGNED_MULT_B_LO    = $00010A
=$00010b				SIGNED_MULT_B_HI    = $00010B
=$00010c				SIGNED_MULT_AL_LO   = $00010C
=$00010d				SIGNED_MULT_AL_HI   = $00010D
=$00010e				SIGNED_MULT_AH_LO   = $00010E
=$00010f				SIGNED_MULT_AH_HI   = $00010F
=$000110				UNSIGNED_DIV_DEM_LO = $000110
=$000111				UNSIGNED_DIV_DEM_HI = $000111
=$000112				UNSIGNED_DIV_NUM_LO = $000112
=$000113				UNSIGNED_DIV_NUM_HI = $000113
=$000114				UNSIGNED_DIV_QUO_LO = $000114
=$000115				UNSIGNED_DIV_QUO_HI = $000115
=$000116				UNSIGNED_DIV_REM_LO = $000116
=$000117				UNSIGNED_DIV_REM_HI = $000117
=$000118				SIGNED_DIV_DEM_LO   = $000118
=$000119				SIGNED_DIV_DEM_HI   = $000119
=$00011a				SIGNED_DIV_NUM_LO   = $00011A
=$00011b				SIGNED_DIV_NUM_HI   = $00011B
=$00011c				SIGNED_DIV_QUO_LO   = $00011C
=$00011d				SIGNED_DIV_QUO_HI   = $00011D
=$00011e				SIGNED_DIV_REM_LO   = $00011E
=$00011f				SIGNED_DIV_REM_HI   = $00011F
=$000120				ADDER32_A_LL        = $000120
=$000121				ADDER32_A_LH        = $000121
=$000122				ADDER32_A_HL        = $000122
=$000123				ADDER32_A_HH        = $000123
=$000124				ADDER32_B_LL        = $000124
=$000125				ADDER32_B_LH        = $000125
=$000126				ADDER32_B_HL        = $000126
=$000127				ADDER32_B_HH        = $000127
=$000128				ADDER32_R_LL        = $000128
=$000129				ADDER32_R_LH        = $000129
=$00012a				ADDER32_R_HL        = $00012A
=$00012b				ADDER32_R_HH        = $00012B

;******  Return to file: src\kernel.asm


;******  Processing file: src\interrupt_def.asm

=$000140				INT_PENDING_REG0 = $000140 ;
=$000141				INT_PENDING_REG1 = $000141 ;
=$000142				INT_PENDING_REG2 = $000142 ;
=$000143				INT_PENDING_REG3 = $000143 ; FMX Model
=$000144				INT_POL_REG0     = $000144 ;
=$000145				INT_POL_REG1     = $000145 ;
=$000146				INT_POL_REG2     = $000146 ;
=$000147				INT_POL_REG7     = $000147 ; FMX Model
=$000148				INT_EDGE_REG0    = $000148 ;
=$000149				INT_EDGE_REG1    = $000149 ;
=$00014a				INT_EDGE_REG2    = $00014A ;
=$00014b				INT_EDGE_REG3    = $00014B ; FMX Model
=$00014c				INT_MASK_REG0    = $00014C ;
=$00014d				INT_MASK_REG1    = $00014D ;
=$00014e				INT_MASK_REG2    = $00014E ;
=$00014f				INT_MASK_REG3    = $00014F ; FMX Model
=$01					FNX0_INT00_SOF        = $01  ;Start of Frame @ 60FPS
=$02					FNX0_INT01_SOL        = $02  ;Start of Line (Programmable)
=$04					FNX0_INT02_TMR0       = $04  ;Timer 0 Interrupt
=$08					FNX0_INT03_TMR1       = $08  ;Timer 1 Interrupt
=$10					FNX0_INT04_TMR2       = $10  ;Timer 2 Interrupt
=$20					FNX0_INT05_RTC        = $20  ;Real-Time Clock Interrupt
=$40					FNX0_INT06_FDC        = $40  ;Floppy Disk Controller
=$80					FNX0_INT07_MOUSE      = $80  ; Mouse Interrupt (INT12 in SuperIO IOspace)
=$01					FNX1_INT00_KBD        = $01  ;Keyboard Interrupt
=$02					FNX1_INT01_SC0        = $02  ;VICKY_II (INT2) Sprite 2 Sprite Collision
=$04					FNX1_INT02_SC1        = $04  ;VICKY_II (INT3) Sprite 2 Tiles Collision
=$08					FNX1_INT03_COM2       = $08  ;Serial Port 2
=$10					FNX1_INT04_COM1       = $10  ;Serial Port 1
=$20					FNX1_INT05_MPU401     = $20  ;Midi Controller Interrupt
=$40					FNX1_INT06_LPT        = $40  ;Parallel Port
=$80					FNX1_INT07_SDCARD     = $80  ;SD Card Controller Interrupt (CH376S)
=$01					FNX2_INT00_OPL3       = $01  ;OPl3
=$02					FNX2_INT01_GABE_INT0  = $02  ;GABE (INT0) - TBD
=$04					FNX2_INT02_GABE_INT1  = $04  ;GABE (INT1) - TBD
=$08					FNX2_INT03_SDMA       = $08  ;VICKY_II (INT4)
=$10					FNX2_INT04_VDMA       = $10  ;VICKY_II (INT5)
=$20					FNX2_INT05_GABE_INT2  = $20  ;GABE (INT2) - TBD
=$40					FNX2_INT06_EXT        = $40  ;External Expansion
=$80					FNX2_INT07_SDCARD_INS = $80  ; SDCARD Insertion
=$01					FNX3_INT00_OPN2       = $01  ;OPN2
=$02					FNX3_INT01_OPM        = $02  ;OPM
=$04					FNX3_INT02_IDE        = $04  ;HDD IDE INTERRUPT
=$08					FNX3_INT03_TBD        = $08  ;TBD
=$10					FNX3_INT04_TBD        = $10  ;TBD
=$20					FNX3_INT05_TBD        = $20  ;GABE (INT2) - TBD
=$40					FNX3_INT06_TBD        = $40  ;External Expansion
=$80					FNX3_INT07_TBD        = $80  ; SDCARD Insertion

;******  Return to file: src\kernel.asm


;******  Processing file: src\dram_inc.asm

=$afa000				SCREEN_PAGE0     = $AFA000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
=$afc000				SCREEN_PAGE1     = $AFC000 ;8192 Bytes Additional page of display RAM. This can be used for page flipping or to handle multiple edit buffers.
=$b00000				SCREEN_END       = $B00000 ;End of display memory

;******  Return to file: src\kernel.asm


;******  Processing file: src\vicky_ii_def.asm

=$af0000				MASTER_CTRL_REG_L	      = $AF0000
=$01					Mstr_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$02					Mstr_Ctrl_Text_Overlay  = $02       ; Enable the Overlay of the text mode on top of Graphic Mode (the Background Color is ignored)
=$04					Mstr_Ctrl_Graph_Mode_En = $04       ; Enable the Graphic Mode
=$08					Mstr_Ctrl_Bitmap_En     = $08       ; Enable the Bitmap Module In Vicky
=$10					Mstr_Ctrl_TileMap_En    = $10       ; Enable the Tile Module in Vicky
=$20					Mstr_Ctrl_Sprite_En     = $20       ; Enable the Sprite Module in Vicky
=$40					Mstr_Ctrl_GAMMA_En      = $40       ; this Enable the GAMMA correction - The Analog and DVI have different color value, the GAMMA is great to correct the difference
=$80					Mstr_Ctrl_Disable_Vid   = $80       ; This will disable the Scanning of the Video hence giving 100% bandwith to the CPU
=$af0001				MASTER_CTRL_REG_H       = $AF0001
=$01					Mstr_Ctrl_Video_Mode0   = $01       ; 0 - 640x480 (Clock @ 25.175Mhz), 1 - 800x600 (Clock @ 40Mhz)
=$02					Mstr_Ctrl_Video_Mode1   = $02       ; 0 - No Pixel Doubling, 1- Pixel Doubling (Reduce the Pixel Resolution by 2)
=$af0002				VKY_RESERVED_00         = $AF0002
=$af0003				VKY_RESERVED_01         = $AF0003
=$01					Border_Ctrl_Enable      = $01
=$af0004				BORDER_CTRL_REG         = $AF0004 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$af0005				BORDER_COLOR_B          = $AF0005
=$af0006				BORDER_COLOR_G          = $AF0006
=$af0007				BORDER_COLOR_R          = $AF0007
=$af0008				BORDER_X_SIZE           = $AF0008; X-  Values: 0 - 32 (Default: 32)
=$af0009				BORDER_Y_SIZE           = $AF0009; Y- Values 0 -32 (Default: 32)
=$af000d				BACKGROUND_COLOR_B      = $AF000D ; When in Graphic Mode, if a pixel is "0" then the Background pixel is chosen
=$af000e				BACKGROUND_COLOR_G      = $AF000E
=$af000f				BACKGROUND_COLOR_R      = $AF000F ;
=$af0010				VKY_TXT_CURSOR_CTRL_REG = $AF0010   ;[0]  Enable Text Mode
=$01					Vky_Cursor_Enable       = $01
=$02					Vky_Cursor_Flash_Rate0  = $02
=$04					Vky_Cursor_Flash_Rate1  = $04
=$08					Vky_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10					Vky_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$af0011				VKY_TXT_START_ADD_PTR   = $AF0011   ; This is an offset to change the Starting address of the Text Mode Buffer (in x)
=$af0012				VKY_TXT_CURSOR_CHAR_REG = $AF0012
=$af0013				VKY_TXT_CURSOR_COLR_REG = $AF0013
=$af0014				VKY_TXT_CURSOR_X_REG_L  = $AF0014
=$af0015				VKY_TXT_CURSOR_X_REG_H  = $AF0015
=$af0016				VKY_TXT_CURSOR_Y_REG_L  = $AF0016
=$af0017				VKY_TXT_CURSOR_Y_REG_H  = $AF0017
=$af001b				VKY_LINE_IRQ_CTRL_REG   = $AF001B ;[0] - Enable Line 0, [1] -Enable Line 1
=$af001c				VKY_LINE0_CMP_VALUE_LO  = $AF001C ;Write Only [7:0]
=$af001d				VKY_LINE0_CMP_VALUE_HI  = $AF001D ;Write Only [3:0]
=$af001e				VKY_LINE1_CMP_VALUE_LO  = $AF001E ;Write Only [7:0]
=$af001f				VKY_LINE1_CMP_VALUE_HI  = $AF001F ;Write Only [3:0]
=$af001c				VKY_INFO_CHIP_NUM_L     = $AF001C
=$af001d				VKY_INFO_CHIP_NUM_H     = $AF001D
=$af001e				VKY_INFO_CHIP_VER_L     = $AF001E
=$af001f				VKY_INFO_CHIP_VER_H     = $AF001F
=$01					SPRITE_Enable             = $01
=$02					SPRITE_LUT0               = $02 ; This is the LUT that the Sprite will use
=$04					SPRITE_LUT1               = $04
=$08					SPRITE_LUT2               = $08 ; Only 4 LUT for Now, So this bit is not used.
=$10					SPRITE_DEPTH0             = $10 ; This is the Layer the Sprite will be Displayed in
=$20					SPRITE_DEPTH1             = $20
=$40					SPRITE_DEPTH2             = $40
=$af0200				SP00_CONTROL_REG        = $AF0200
=$af0201				SP00_ADDY_PTR_L         = $AF0201
=$af0202				SP00_ADDY_PTR_M         = $AF0202
=$af0203				SP00_ADDY_PTR_H         = $AF0203
=$af0204				SP00_X_POS_L            = $AF0204
=$af0205				SP00_X_POS_H            = $AF0205
=$af0206				SP00_Y_POS_L            = $AF0206
=$af0207				SP00_Y_POS_H            = $AF0207
=$af0208				SP01_CONTROL_REG        = $AF0208
=$af0209				SP01_ADDY_PTR_L         = $AF0209
=$af020a				SP01_ADDY_PTR_M         = $AF020A
=$af020b				SP01_ADDY_PTR_H         = $AF020B
=$af020c				SP01_X_POS_L            = $AF020C
=$af020d				SP01_X_POS_H            = $AF020D
=$af020e				SP01_Y_POS_L            = $AF020E
=$af020f				SP01_Y_POS_H            = $AF020F
=$af0210				SP02_CONTROL_REG        = $AF0210
=$af0211				SP02_ADDY_PTR_L         = $AF0211
=$af0212				SP02_ADDY_PTR_M         = $AF0212
=$af0213				SP02_ADDY_PTR_H         = $AF0213
=$af0214				SP02_X_POS_L            = $AF0214
=$af0215				SP02_X_POS_H            = $AF0215
=$af0216				SP02_Y_POS_L            = $AF0216
=$af0217				SP02_Y_POS_H            = $AF0217
=$af0218				SP03_CONTROL_REG        = $AF0218
=$af0219				SP03_ADDY_PTR_L         = $AF0219
=$af021a				SP03_ADDY_PTR_M         = $AF021A
=$af021b				SP03_ADDY_PTR_H         = $AF021B
=$af021c				SP03_X_POS_L            = $AF021C
=$af021d				SP03_X_POS_H            = $AF021D
=$af021e				SP03_Y_POS_L            = $AF021E
=$af021f				SP03_Y_POS_H            = $AF021F
=$af0220				SP04_CONTROL_REG        = $AF0220
=$af0221				SP04_ADDY_PTR_L         = $AF0221
=$af0222				SP04_ADDY_PTR_M         = $AF0222
=$af0223				SP04_ADDY_PTR_H         = $AF0223
=$af0224				SP04_X_POS_L            = $AF0224
=$af0225				SP04_X_POS_H            = $AF0225
=$af0226				SP04_Y_POS_L            = $AF0226
=$af0227				SP04_Y_POS_H            = $AF0227
=$af0228				SP05_CONTROL_REG        = $AF0228
=$af0229				SP05_ADDY_PTR_L         = $AF0229
=$af022a				SP05_ADDY_PTR_M         = $AF022A
=$af022b				SP05_ADDY_PTR_H         = $AF022B
=$af022c				SP05_X_POS_L            = $AF022C
=$af022d				SP05_X_POS_H            = $AF022D
=$af022e				SP05_Y_POS_L            = $AF022E
=$af022f				SP05_Y_POS_H            = $AF022F
=$af0230				SP06_CONTROL_REG        = $AF0230
=$af0231				SP06_ADDY_PTR_L         = $AF0231
=$af0232				SP06_ADDY_PTR_M         = $AF0232
=$af0233				SP06_ADDY_PTR_H         = $AF0233
=$af0234				SP06_X_POS_L            = $AF0234
=$af0235				SP06_X_POS_H            = $AF0235
=$af0236				SP06_Y_POS_L            = $AF0236
=$af0237				SP06_Y_POS_H            = $AF0237
=$af0238				SP07_CONTROL_REG        = $AF0238
=$af0239				SP07_ADDY_PTR_L         = $AF0239
=$af023a				SP07_ADDY_PTR_M         = $AF023A
=$af023b				SP07_ADDY_PTR_H         = $AF023B
=$af023c				SP07_X_POS_L            = $AF023C
=$af023d				SP07_X_POS_H            = $AF023D
=$af023e				SP07_Y_POS_L            = $AF023E
=$af023f				SP07_Y_POS_H            = $AF023F
=$af0240				SP08_CONTROL_REG        = $AF0240
=$af0241				SP08_ADDY_PTR_L         = $AF0241
=$af0242				SP08_ADDY_PTR_M         = $AF0242
=$af0243				SP08_ADDY_PTR_H         = $AF0243
=$af0244				SP08_X_POS_L            = $AF0244
=$af0245				SP08_X_POS_H            = $AF0245
=$af0246				SP08_Y_POS_L            = $AF0246
=$af0247				SP08_Y_POS_H            = $AF0247
=$af0248				SP09_CONTROL_REG        = $AF0248
=$af0249				SP09_ADDY_PTR_L         = $AF0249
=$af024a				SP09_ADDY_PTR_M         = $AF024A
=$af024b				SP09_ADDY_PTR_H         = $AF024B
=$af024c				SP09_X_POS_L            = $AF024C
=$af024d				SP09_X_POS_H            = $AF024D
=$af024e				SP09_Y_POS_L            = $AF024E
=$af024f				SP09_Y_POS_H            = $AF024F
=$af0250				SP10_CONTROL_REG        = $AF0250
=$af0251				SP10_ADDY_PTR_L         = $AF0251
=$af0252				SP10_ADDY_PTR_M         = $AF0252
=$af0253				SP10_ADDY_PTR_H         = $AF0253
=$af0254				SP10_X_POS_L            = $AF0254
=$af0255				SP10_X_POS_H            = $AF0255
=$af0256				SP10_Y_POS_L            = $AF0256
=$af0257				SP10_Y_POS_H            = $AF0257
=$af0258				SP11_CONTROL_REG        = $AF0258
=$af0259				SP11_ADDY_PTR_L         = $AF0259
=$af025a				SP11_ADDY_PTR_M         = $AF025A
=$af025b				SP11_ADDY_PTR_H         = $AF025B
=$af025c				SP11_X_POS_L            = $AF025C
=$af025d				SP11_X_POS_H            = $AF025D
=$af025e				SP11_Y_POS_L            = $AF025E
=$af025f				SP11_Y_POS_H            = $AF025F
=$af0260				SP12_CONTROL_REG        = $AF0260
=$af0261				SP12_ADDY_PTR_L         = $AF0261
=$af0262				SP12_ADDY_PTR_M         = $AF0262
=$af0263				SP12_ADDY_PTR_H         = $AF0263
=$af0264				SP12_X_POS_L            = $AF0264
=$af0265				SP12_X_POS_H            = $AF0265
=$af0266				SP12_Y_POS_L            = $AF0266
=$af0267				SP12_Y_POS_H            = $AF0267
=$af0268				SP13_CONTROL_REG        = $AF0268
=$af0269				SP13_ADDY_PTR_L         = $AF0269
=$af026a				SP13_ADDY_PTR_M         = $AF026A
=$af026b				SP13_ADDY_PTR_H         = $AF026B
=$af026c				SP13_X_POS_L            = $AF026C
=$af026d				SP13_X_POS_H            = $AF026D
=$af026e				SP13_Y_POS_L            = $AF026E
=$af026f				SP13_Y_POS_H            = $AF026F
=$af0270				SP14_CONTROL_REG        = $AF0270
=$af0271				SP14_ADDY_PTR_L         = $AF0271
=$af0272				SP14_ADDY_PTR_M         = $AF0272
=$af0273				SP14_ADDY_PTR_H         = $AF0273
=$af0274				SP14_X_POS_L            = $AF0274
=$af0275				SP14_X_POS_H            = $AF0275
=$af0276				SP14_Y_POS_L            = $AF0276
=$af0277				SP14_Y_POS_H            = $AF0277
=$af0278				SP15_CONTROL_REG        = $AF0278
=$af0279				SP15_ADDY_PTR_L         = $AF0279
=$af027a				SP15_ADDY_PTR_M         = $AF027A
=$af027b				SP15_ADDY_PTR_H         = $AF027B
=$af027c				SP15_X_POS_L            = $AF027C
=$af027d				SP15_X_POS_H            = $AF027D
=$af027e				SP15_Y_POS_L            = $AF027E
=$af027f				SP15_Y_POS_H            = $AF027F
=$af0280				SP16_CONTROL_REG        = $AF0280
=$af0281				SP16_ADDY_PTR_L         = $AF0281
=$af0282				SP16_ADDY_PTR_M         = $AF0282
=$af0283				SP16_ADDY_PTR_H         = $AF0283
=$af0284				SP16_X_POS_L            = $AF0284
=$af0285				SP16_X_POS_H            = $AF0285
=$af0286				SP16_Y_POS_L            = $AF0286
=$af0287				SP16_Y_POS_H            = $AF0287
=$af0288				SP17_CONTROL_REG        = $AF0288
=$af0289				SP17_ADDY_PTR_L         = $AF0289
=$af028a				SP17_ADDY_PTR_M         = $AF028A
=$af028b				SP17_ADDY_PTR_H         = $AF028B
=$af028c				SP17_X_POS_L            = $AF028C
=$af028d				SP17_X_POS_H            = $AF028D
=$af028e				SP17_Y_POS_L            = $AF028E
=$af028f				SP17_Y_POS_H            = $AF028F
=$af0500				MOUSE_PTR_GRAP0_START    = $AF0500 ; 16 x 16 = 256 Pixels (Grey Scale) 0 = Transparent, 1 = Black , 255 = White
=$af05ff				MOUSE_PTR_GRAP0_END      = $AF05FF ; Pointer 0
=$af0600				MOUSE_PTR_GRAP1_START    = $AF0600 ;
=$af06ff				MOUSE_PTR_GRAP1_END      = $AF06FF ; Pointer 1
=$af0700				MOUSE_PTR_CTRL_REG_L    = $AF0700 ; Bit[0] Enable, Bit[1] = 0  ( 0 = Pointer0, 1 = Pointer1)
=$af0701				MOUSE_PTR_CTRL_REG_H    = $AF0701 ;
=$af0702				MOUSE_PTR_X_POS_L       = $AF0702 ; X Position (0 - 639) (Can only read now) Writing will have no effect
=$af0703				MOUSE_PTR_X_POS_H       = $AF0703 ;
=$af0704				MOUSE_PTR_Y_POS_L       = $AF0704 ; Y Position (0 - 479) (Can only read now) Writing will have no effect
=$af0705				MOUSE_PTR_Y_POS_H       = $AF0705 ;
=$af0706				MOUSE_PTR_BYTE0         = $AF0706 ; Byte 0 of Mouse Packet (you must write 3 Bytes)
=$af0707				MOUSE_PTR_BYTE1         = $AF0707 ; Byte 1 of Mouse Packet (if you don't, then )
=$af0708				MOUSE_PTR_BYTE2         = $AF0708 ; Byte 2 of Mouse Packet (state Machine will be jammed in 1 state)
=$af070b				C256F_MODEL_MAJOR       = $AF070B ;
=$af070c				C256F_MODEL_MINOR       = $AF070C ;
=$af070d				FPGA_DOR                = $AF070D ;
=$af070e				FPGA_MOR                = $AF070E ;
=$af070f				FPGA_YOR                = $AF070F ;
=$af1f40				FG_CHAR_LUT_PTR         = $AF1F40
=$af1f80				BG_CHAR_LUT_PTR		      = $AF1F80
=$af2000				GRPH_LUT0_PTR		        = $AF2000
=$af2400				GRPH_LUT1_PTR		        = $AF2400
=$af2800				GRPH_LUT2_PTR		        = $AF2800
=$af2c00				GRPH_LUT3_PTR		        = $AF2C00
=$af3000				GRPH_LUT4_PTR		        = $AF3000
=$af3400				GRPH_LUT5_PTR		        = $AF3400
=$af3800				GRPH_LUT6_PTR		        = $AF3800
=$af3c00				GRPH_LUT7_PTR		        = $AF3C00
=$af4000				GAMMA_B_LUT_PTR		      = $AF4000
=$af4100				GAMMA_G_LUT_PTR		      = $AF4100
=$af4200				GAMMA_R_LUT_PTR		      = $AF4200
=$af5000				TILE_MAP0       		    = $AF5000     ;$AF5000 - $AF57FF
=$af5800				TILE_MAP1               = $AF5800     ;$AF5800 - $AF5FFF
=$af6000				TILE_MAP2               = $AF6000     ;$AF6000 - $AF67FF
=$af6800				TILE_MAP3               = $AF6800     ;$AF6800 - $AF6FFF
=$af8000				FONT_MEMORY_BANK0       = $AF8000     ;$AF8000 - $AF87FF
=$af8800				FONT_MEMORY_BANK1       = $AF8800     ;$AF8800 - $AF8FFF
=$afa000				CS_TEXT_MEM_PTR         = $AFA000
=$afc000				CS_COLOR_MEM_PTR        = $AFC000
=$afe000				BTX_START               = $AFE000     ; BEATRIX Registers
=$afffff				BTX_END                 = $AFFFFF

;******  Processing file: src\VKYII_CFP9553_BITMAP_def.asm

=$af0100				BM0_CONTROL_REG     = $AF0100
=$af0101				BM0_START_ADDY_L    = $AF0101
=$af0102				BM0_START_ADDY_M    = $AF0102
=$af0103				BM0_START_ADDY_H    = $AF0103
=$af0104				BM0_X_OFFSET        = $AF0104
=$af0105				BM0_Y_OFFSET        = $AF0105
=$af0106				BM0_PRIORITY        = $AF0106
=$af0107				BM0_RESERVED_7      = $AF0107
=$af0108				BM1_CONTROL_REG     = $AF0108
=$af0109				BM1_START_ADDY_L    = $AF0109
=$af010a				BM1_START_ADDY_M    = $AF010A
=$af010b				BM1_START_ADDY_H    = $AF010B
=$af010c				BM1_X_OFFSET        = $AF010C
=$af010d				BM1_Y_OFFSET        = $AF010D
=$af010e				BM1_PRIORITY        = $AF010E
=$af010f				BM1_RESERVED_7      = $AF010F

;******  Return to file: src\vicky_ii_def.asm


;******  Processing file: src\VKYII_CFP9553_TILEMAP_def.asm

=$01					TILE_Enable             = $01
=$af0200				TL0_CONTROL_REG         = $AF0200       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0201				TL0_START_ADDY_L        = $AF0201       ; Not USed right now - Starting Address to where is the MAP
=$af0202				TL0_START_ADDY_M        = $AF0202
=$af0203				TL0_START_ADDY_H        = $AF0203
=$af0204				TL0_TOTAL_X_SIZE_L      = $AF0204       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0205				TL0_TOTAL_X_SIZE_H      = $AF0205
=$af0206				TL0_TOTAL_Y_SIZE_L      = $AF0206       ; Size of the Map in Y Tile Count [9:0]
=$af0207				TL0_TOTAL_Y_SIZE_H      = $AF0207
=$af0208				TL0_WINDOW_X_POS_L      = $AF0208       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0209				TL0_WINDOW_X_POS_H      = $AF0209       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af020a				TL0_WINDOW_Y_POS_L      = $AF020A       ; Top Left Corner Position of the TileMAp Window in Y
=$af020b				TL0_WINDOW_Y_POS_H      = $AF020B       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af020c				TL1_CONTROL_REG         = $AF020C       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af020d				TL1_START_ADDY_L        = $AF020D       ; Not USed right now - Starting Address to where is the MAP
=$af020e				TL1_START_ADDY_M        = $AF020E
=$af020f				TL1_START_ADDY_H        = $AF020F
=$af0210				TL1_TOTAL_X_SIZE_L      = $AF0210       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0211				TL1_TOTAL_X_SIZE_H      = $AF0211
=$af0212				TL1_TOTAL_Y_SIZE_L      = $AF0212       ; Size of the Map in Y Tile Count [9:0]
=$af0213				TL1_TOTAL_Y_SIZE_H      = $AF0213
=$af0214				TL1_WINDOW_X_POS_L      = $AF0214       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0215				TL1_WINDOW_X_POS_H      = $AF0215       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0216				TL1_WINDOW_Y_POS_L      = $AF0216       ; Top Left Corner Position of the TileMAp Window in Y
=$af0217				TL1_WINDOW_Y_POS_H      = $AF0217       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0218				TL2_CONTROL_REG         = $AF0218       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0219				TL2_START_ADDY_L        = $AF0219       ; Not USed right now - Starting Address to where is the MAP
=$af021a				TL2_START_ADDY_M        = $AF021A
=$af021b				TL2_START_ADDY_H        = $AF021B
=$af021c				TL2_TOTAL_X_SIZE_L      = $AF021C       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af021d				TL2_TOTAL_X_SIZE_H      = $AF021D
=$af021e				TL2_TOTAL_Y_SIZE_L      = $AF021E       ; Size of the Map in Y Tile Count [9:0]
=$af021f				TL2_TOTAL_Y_SIZE_H      = $AF021F
=$af0220				TL2_WINDOW_X_POS_L      = $AF0220       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0221				TL2_WINDOW_X_POS_H      = $AF0221       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0222				TL2_WINDOW_Y_POS_L      = $AF0222       ; Top Left Corner Position of the TileMAp Window in Y
=$af0223				TL2_WINDOW_Y_POS_H      = $AF0223       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0224				TL3_CONTROL_REG         = $AF0224       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0225				TL3_START_ADDY_L        = $AF0225       ; Not USed right now - Starting Address to where is the MAP
=$af0226				TL3_START_ADDY_M        = $AF0226
=$af0227				TL3_START_ADDY_H        = $AF0227
=$af0228				TL3_TOTAL_X_SIZE_L      = $AF0228       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0229				TL3_TOTAL_X_SIZE_H      = $AF0229
=$af022a				TL3_TOTAL_Y_SIZE_L      = $AF022A       ; Size of the Map in Y Tile Count [9:0]
=$af022b				TL3_TOTAL_Y_SIZE_H      = $AF022B
=$af022c				TL3_WINDOW_X_POS_L      = $AF022C       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af022d				TL3_WINDOW_X_POS_H      = $AF022D       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af022e				TL3_WINDOW_Y_POS_L      = $AF022E       ; Top Left Corner Position of the TileMAp Window in Y
=$af022f				TL3_WINDOW_Y_POS_H      = $AF022F       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0280				TILESET0_ADDY_L         = $AF0280   ; Pointer to Tileset 0 [21:0]
=$af0281				TILESET0_ADDY_M         = $AF0281
=$af0282				TILESET0_ADDY_H         = $AF0282
=$af0283				TILESET0_ADDY_CFG       = $AF0283   ; [3] - TileStride256x256 [2:0] LUT
=$af0284				TILESET1_ADDY_L         = $AF0284
=$af0285				TILESET1_ADDY_M         = $AF0285
=$af0286				TILESET1_ADDY_H         = $AF0286
=$af0287				TILESET1_ADDY_CFG       = $AF0287
=$af0288				TILESET2_ADDY_L         = $AF0288
=$af0289				TILESET2_ADDY_M         = $AF0289
=$af028a				TILESET2_ADDY_H         = $AF028A
=$af028b				TILESET2_ADDY_CFG       = $AF028B
=$af028c				TILESET3_ADDY_L         = $AF028C
=$af028d				TILESET3_ADDY_M         = $AF028D
=$af028e				TILESET3_ADDY_H         = $AF028E
=$af028f				TILESET3_ADDY_CFG       = $AF028F
=$af0290				TILESET4_ADDY_L         = $AF0290
=$af0291				TILESET4_ADDY_M         = $AF0291
=$af0292				TILESET4_ADDY_H         = $AF0292
=$af0293				TILESET4_ADDY_CFG       = $AF0293
=$af0294				TILESET5_ADDY_L         = $AF0294
=$af0295				TILESET5_ADDY_M         = $AF0295
=$af0296				TILESET5_ADDY_H         = $AF0296
=$af0297				TILESET5_ADDY_CFG       = $AF0297
=$af0298				TILESET6_ADDY_L         = $AF0298
=$af0299				TILESET6_ADDY_M         = $AF0299
=$af029a				TILESET6_ADDY_H         = $AF029A
=$af029b				TILESET6_ADDY_CFG       = $AF029B
=$af029c				TILESET7_ADDY_L         = $AF029C
=$af029d				TILESET7_ADDY_M         = $AF029D
=$af029e				TILESET7_ADDY_H         = $AF029E
=$af029f				TILESET7_ADDY_CFG       = $AF029F

;******  Return to file: src\vicky_ii_def.asm


;******  Processing file: src\VKYII_CFP9553_VDMA_def.asm

=$af0400				VDMA_CONTROL_REG        = $AF0400
=$01					VDMA_CTRL_Enable        = $01
=$02					VDMA_CTRL_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04					VDMA_CTRL_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08					VDMA_CTRL_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10					VDMA_CTRL_SysRAM_Src    = $10     ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20					VDMA_CTRL_SysRAM_Dst    = $20     ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$80					VDMA_CTRL_Start_TRF     = $80     ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0401				VDMA_BYTE_2_WRITE       = $AF0401 ; Write Only - Byte to Write in the Fill Function
=$af0401				VDMA_STATUS_REG         = $AF0401 ; Read only
=$01					VDMA_STAT_Size_Err      = $01     ; If Set to 1, Overall Size is Invalid
=$02					VDMA_STAT_Dst_Add_Err   = $02     ; If Set to 1, Destination Address Invalid
=$04					VDMA_STAT_Src_Add_Err   = $04     ; If Set to 1, Source Address Invalid
=$80					VDMA_STAT_VDMA_IPS      = $80     ; If Set to 1, VDMA Transfer in Progress (this Inhibit CPU Access to Mem)
=$af0402				VDMA_SRC_ADDY_L         = $AF0402 ; Pointer to the Source of the Data to be stransfered
=$af0403				VDMA_SRC_ADDY_M         = $AF0403 ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0404				VDMA_SRC_ADDY_H         = $AF0404
=$af0405				VDMA_DST_ADDY_L         = $AF0405 ; Destination Pointer within Vicky's video memory Range
=$af0406				VDMA_DST_ADDY_M         = $AF0406 ; ($00_0000 - $3F_0000)
=$af0407				VDMA_DST_ADDY_H         = $AF0407
=$af0408				VDMA_SIZE_L             = $AF0408 ; Maximum Value: $40:0000 (4Megs)
=$af0409				VDMA_SIZE_M             = $AF0409
=$af040a				VDMA_SIZE_H             = $AF040A
=$af040b				VDMA_IGNORED            = $AF040B
=$af0408				VDMA_X_SIZE_L           = $AF0408 ; Maximum Value: 65535
=$af0409				VDMA_X_SIZE_H           = $AF0409
=$af040a				VDMA_Y_SIZE_L           = $AF040A ; Maximum Value: 65535
=$af040b				VDMA_Y_SIZE_H           = $AF040B
=$af040c				VDMA_SRC_STRIDE_L       = $AF040C ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040d				VDMA_SRC_STRIDE_H       = $AF040D ;
=$af040e				VDMA_DST_STRIDE_L       = $AF040E ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040f				VDMA_DST_STRIDE_H       = $AF040F ;

;******  Return to file: src\vicky_ii_def.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\super_io_def.asm

=$af1100				PME_STS_REG     = $AF1100
=$af1102				PME_EN_REG		  = $AF1102
=$af1104				PME_STS1_REG		= $AF1104
=$af1105				PME_STS2_REG		= $AF1105
=$af1106				PME_STS3_REG		= $AF1106
=$af1107				PME_STS4_REG		= $AF1107
=$af1108				PME_STS5_REG		= $AF1108
=$af110a				PME_EN1_REG     = $AF110A
=$af110b				PME_EN2_REG     = $AF110B
=$af110c				PME_EN3_REG     = $AF110C
=$af110d				PME_EN4_REG     = $AF110D
=$af110e				PME_EN5_REG     = $AF110E
=$af1110				SMI_STS1_REG		= $AF1110
=$af1111				SMI_STS2_REG		= $AF1111
=$af1112				SMI_STS3_REG		= $AF1112
=$af1113				SMI_STS4_REG		= $AF1113
=$af1114				SMI_STS5_REG		= $AF1114
=$af1116				SMI_EN1_REG     = $AF1116
=$af1117				SMI_EN2_REG     = $AF1117
=$af1118				SMI_EN3_REG     = $AF1118
=$af1119				SMI_EN4_REG     = $AF1119
=$af111a				SMI_EN5_REG     = $AF111A
=$af111c				MSC_ST_REG      = $AF111C
=$af111e				FORCE_DISK_CHANGE       = $AF111E
=$af111f				FLOPPY_DATA_RATE        = $AF111F
=$af1120				UART1_FIFO_CTRL_SHDW    = $AF1120
=$af1121				UART2_FIFO_CTRL_SHDW    = $AF1121
=$af1122				DEV_DISABLE_REG         = $AF1122
=$af1123				GP10_REG    		= $AF1123
=$af1124				GP11_REG    		= $AF1124
=$af1125				GP12_REG    		= $AF1125
=$af1126				GP13_REG    		= $AF1126
=$af1127				GP14_REG    		= $AF1127
=$af1128				GP15_REG    		= $AF1128
=$af1129				GP16_REG    		= $AF1129
=$af112a				GP17_REG    		= $AF112A
=$af112b				GP20_REG    		= $AF112B
=$af112c				GP21_REG    		= $AF112C
=$af112d				GP22_REG		= $AF112D
=$af112f				GP24_REG		= $AF112F
=$af1130				GP25_REG		= $AF1130
=$af1131				GP26_REG		= $AF1131
=$af1132				GP27_REG		= $AF1132
=$af1133				GP30_REG		= $AF1133
=$af1134				GP31_REG		= $AF1134
=$af1135				GP32_REG		= $AF1135
=$af1136				GP33_REG		= $AF1136
=$af1137				GP34_REG		= $AF1137
=$af1138				GP35_REG		= $AF1138
=$af1139				GP36_REG		= $AF1139
=$af113a				GP37_REG		= $AF113A
=$af113b				GP40_REG		= $AF113B
=$af113c				GP41_REG		= $AF113C
=$af113d				GP42_REG		= $AF113D
=$af113e				GP43_REG		= $AF113E
=$af113f				GP50_REG		= $AF113F
=$af1140				GP51_REG		= $AF1140
=$af1141				GP52_REG		= $AF1141
=$af1142				GP53_REG		= $AF1142
=$af1143				GP54_REG		= $AF1143
=$af1144				GP55_REG		= $AF1144
=$af1145				GP56_REG		= $AF1145
=$af1146				GP57_REG		= $AF1146
=$af1147				GP60_REG		= $AF1147
=$af1148				GP61_REG		= $AF1148
=$af114b				GP1_REG			= $AF114B
=$af114c				GP2_REG			= $AF114C
=$af114d				GP3_REG			= $AF114D
=$af114e				GP4_REG			= $AF114E
=$af114f				GP5_REG			= $AF114F
=$af1150				GP6_REG			= $AF1150
=$af1156				FAN1_REG		        = $AF1156
=$af1157				FAN2_REG            = $AF1157
=$af1158				FAN_CTRL_REG  	    = $AF1158
=$af1159				FAN1_TACH_REG       = $AF1159
=$af115a				FAN2_TACH_REG       = $AF115A
=$af115b				FAN1_PRELOAD_REG    = $AF115B
=$af115c				FAN2_PRELOAD_REG    = $AF115C
=$af115d				LED1_REG    		    = $AF115D
=$af115e				LED2_REG    		    = $AF115E
=$af115f				KEYBOARD_SCAN_CODE	= $AF115F

;******  Return to file: src\kernel.asm


;******  Processing file: src\keyboard_def.asm

=$af1064				STATUS_PORT 	= $AF1064
=$af1060				KBD_OUT_BUF 	= $AF1060
=$af1060				KBD_INPT_BUF	= $AF1060
=$af1064				KBD_CMD_BUF		= $AF1064
=$af1060				KBD_DATA_BUF	= $AF1060
=$af1060				PORT_A		    = $AF1060
=$af1061				PORT_B			= $AF1061
=$01					OUT_BUF_FULL    = $01
=$02					INPT_BUF_FULL	= $02
=$04					SYS_FLAG		= $04
=$08					CMD_DATA		= $08
=$10					KEYBD_INH       = $10
=$20					TRANS_TMOUT	    = $20
=$40					RCV_TMOUT		= $40
=$80					PARITY_EVEN		= $80
=$10					INH_KEYBOARD	= $10
=$ae					KBD_ENA			= $AE
=$ad					KBD_DIS			= $AD
=$f1					KB_MENU			= $F1
=$f4					KB_ENABLE		= $F4
=$f7					KB_MAKEBREAK    = $F7
=$fe					KB_ECHO			= $FE
=$ff					KB_RESET		= $FF
=$ed					KB_LED_CMD		= $ED
=$aa					KB_OK			= $AA
=$fa					KB_ACK			= $FA
=$ff					KB_OVERRUN		= $FF
=$fe					KB_RESEND		= $FE
=$f0					KB_BREAK		= $F0
=$10					KB_FA			= $10
=$20					KB_FE			= $20
=$40					KB_PR_LED		= $40
=$01					KB_SCROLL_LOCK  = $01
=$02					KB_NUM_LOCK     = $02
=$04					KB_CAPS_LOCK    = $04
=$80					KB_CTRL_C = $80             ; CTRL-C was pressed
=$60					KB_CREDITS = $60            ; Credits key was pressed

;******  Return to file: src\kernel.asm


;******  Processing file: src\SID_def.asm

=$afe400				SID0_V1_FREQ_LO    = $AFE400 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$afe401				SID0_V1_FREQ_HI    = $AFE401 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$afe402				SID0_V1_PW_LO      = $AFE402 ;SID - L - Voice 1 (Write Only) - PW LOW
=$afe403				SID0_V1_PW_HI      = $AFE403 ;SID - L - Voice 1 (Write Only) - PW HI
=$afe404				SID0_V1_CTRL       = $AFE404 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$afe405				SID0_V1_ATCK_DECY  = $AFE405 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$afe406				SID0_V1_SSTN_RLSE  = $AFE406 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$afe407				SID0_V2_FREQ_LO    = $AFE407 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$afe408				SID0_V2_FREQ_HI    = $AFE408 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$afe409				SID0_V2_PW_LO      = $AFE409 ;SID - L - Voice 2 (Write Only) - PW LOW
=$afe40a				SID0_V2_PW_HI      = $AFE40A ;SID - L - Voice 2 (Write Only) - PW HI
=$afe40b				SID0_V2_CTRL       = $AFE40B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$afe40c				SID0_V2_ATCK_DECY  = $AFE40C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$afe40d				SID0_V2_SSTN_RLSE  = $AFE40D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$afe40e				SID0_V3_FREQ_LO    = $AFE40E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$afe40f				SID0_V3_FREQ_HI    = $AFE40F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$afe410				SID0_V3_PW_LO      = $AFE410 ;SID - L - Voice 3 (Write Only) - PW LOW
=$afe411				SID0_V3_PW_HI      = $AFE411 ;SID - L - Voice 3 (Write Only) - PW HI
=$afe412				SID0_V3_CTRL       = $AFE412 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$afe413				SID0_V3_ATCK_DECY  = $AFE413 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$afe414				SID0_V3_SSTN_RLSE  = $AFE414 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$afe415				SID0_FC_LO         = $AFE415 ;SID - L - Filter (Write Only) - FC LOW
=$afe416				SID0_FC_HI         = $AFE416 ;SID - L - Filter (Write Only) - FC HI
=$afe417				SID0_RES_FILT      = $AFE417 ;SID - L - Filter (Write Only) - RES / FILT
=$afe418				SID0_MODE_VOL      = $AFE418 ;SID - L - Filter (Write Only) - MODE / VOL
=$afe419				SID0_POT_X         = $AFE419 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$afe41a				SID0_POT_Y         = $AFE41A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$afe41b				SID0_OSC3_RND      = $AFE41B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$afe41c				SID0_ENV3          = $AFE41C ;SID - L - Misc (Read Only)  - ENV3
=$afe41d				SID0_NOT_USED0     = $AFE41D ;SID - L - NOT USED
=$afe41e				SID0_NOT_USED1     = $AFE41E ;SID - L - NOT USED
=$afe41f				SID0_NOT_USED2     = $AFE41F ;SID - L - NOT USED

;******  Return to file: src\kernel.asm


;******  Processing file: src\RTC_def.asm

=$af0800				RTC_SEC       = $AF0800 ;Seconds Register
=$af0801				RTC_SEC_ALARM = $AF0801 ;Seconds Alarm Register
=$af0802				RTC_MIN       = $AF0802 ;Minutes Register
=$af0803				RTC_MIN_ALARM = $AF0803 ;Minutes Alarm Register
=$af0804				RTC_HRS       = $AF0804 ;Hours Register
=$af0805				RTC_HRS_ALARM = $AF0805 ;Hours Alarm Register
=$af0806				RTC_DAY       = $AF0806 ;Day Register
=$af0807				RTC_DAY_ALARM = $AF0807 ;Day Alarm Register
=$af0808				RTC_DOW       = $AF0808 ;Day of Week Register
=$af0809				RTC_MONTH     = $AF0809 ;Month Register
=$af080a				RTC_YEAR      = $AF080A ;Year Register
=$af080b				RTC_RATES     = $AF080B ;Rates Register
=$af080c				RTC_ENABLE    = $AF080C ;Enables Register
=$af080d				RTC_FLAGS     = $AF080D ;Flags Register
=$af080e				RTC_CTRL      = $AF080E ;Control Register
=$af080f				RTC_CENTURY   = $AF080F ;Century Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\io_def.asm

=0					CHAN_CONSOLE  = 0           ; ID for screen and keyboard access
=1					CHAN_COM1     = 1           ; ID for serial access on COM1 (external port)
=2					CHAN_COM2     = 2           ; ID for serial access on COM2 (internal port)
=3					CHAN_LPT      = 3           ; ID for parallel port
=$afe810				SDCARD_DATA   = $AFE810     ;(R/W) SDCARD (CH376S) Data PORT_A (A0 = 0)
=$afe811				SDCARD_CMD    = $AFE811     ;(R/W) SDCARD (CH376S) CMD/STATUS Port (A0 = 1)
=$afe812				SDCARD_STAT   = $AFE812     ;(R) SDCARD (Bit[0] = CD, Bit[1] = WP)
=$afe900				CODEC_DATA_LO = $AFE900     ;(W) LSB of Add/Data Reg to Control CODEC See WM8776 Spec
=$afe901				CODEC_DATA_HI = $AFE901     ;(W) MSB od Add/Data Reg to Control CODEC See WM8776 Spec
=$afe902				CODEC_WR_CTRL = $AFE902     ;(W) Bit[0] = 1 -> Start Writing the CODEC Control Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\Trinity_CFP9301_def.asm

=$afe800				JOYSTICK0           = $AFE800   ;(R) Joystick 0 - J7 (next to SD Card)
=$afe801				JOYSTICK1           = $AFE801   ;(R) Joystick 1 - J8
=$afe802				JOYSTICK2           = $AFE802   ;(R) Joystick 2 - J9
=$afe803				JOYSTICK3           = $AFE803   ;(R) Joystick 3 - J10 (Next to Buzzer)
=$afe804				JOYSTICK_MODE       = $AFE804
=$01					NES_SNES_EN0        = $01       ; Enable the NES/SNES Mode on Port 0
=$02					NES_SNES_EN1        = $02       ; Enable the NES/SNES Mode on Port 1
=$04					NES_SNES_JOY        = $04       ; 0 = NES, 1 = SNES
=$40					NES_SNES_DONE       = $40       ; Poll to see if the Deserializer is done
=$80					NES_SNES_TRIG       = $80       ; Set to start the Serializer
=$afe805				REVOFPCB_C          = $AFE805   ; You should read the ASCCII for "C"
=$afe806				REVOFPCB_4          = $AFE806   ; You should read the ASCCII for "4"
=$afe807				REVOFPCB_A          = $AFE807   ; You should read the ASCCII for "A"
=$afe808				NES_SNES0_DAT_LO    = $AFE808   ; Contains the 8bits From NES and SNES
=$afe809				SNES0_DAT_HI0       = $AFE809   ; Contains the extra 4 bit from the SNES Controller
=$afe80a				NES_SNES1_DAT_LO    = $AFE80A
=$afe80b				SNES1_DAT_HI0       = $AFE80B
=$afe80c				CFP9301_REV         = $AFE80C   ; Hardware Revision of the CPLD Code
=$afe80d				DIP_USER            = $AFE80D   ; Dip Switch 3/4/5 can be user Defined
=$afe80e				DIP_BOOTMODE        = $AFE80E
=$01					BOOT_MODE0          = $01
=$02					BOOT_MODE1          = $02
=$80					HD_INSTALLED        = $80
=$00					DIP_BOOT_IDE        = $00
=$01					DIP_BOOT_SDCARD     = $01
=$02					DIP_BOOT_FLOPPY     = $02
=$03					DIP_BOOT_BASIC      = $03

;******  Return to file: src\kernel.asm


;******  Processing file: src\Unity_CFP9307_def.asm

=$afe830				IDE_DATA      = $AFE830 ; 8-Bit Access here Only
=$afe831				IDE_ERROR     = $AFE831 ; Error Information register (only read when there is an error ) - Probably clears Error Bits
=$afe832				IDE_SECT_CNT  = $AFE832 ; Sector Count Register (also used to pass parameter for timeout for IDLE modus Command)
=$afe833				IDE_SECT_SRT  = $AFE833 ; Start Sector Register (0 = 256), so start @ 1
=$afe834				IDE_CLDR_LO   = $AFE834 ; Low Byte of Cylinder Numnber {7:0}
=$afe835				IDE_CLDR_HI   = $AFE835 ;  Hi Byte of Cylinder Number {9:8} (1023-0).
=$afe836				IDE_HEAD      = $AFE836 ; Head, device select, {3:0} HEad Number, 4 -> 0:Master, 1:Slave, {7:5} = 101 (legacy);
=$afe837				IDE_CMD_STAT  = $AFE837 ; Command/Status Register - Reading this will clear the Interrupt Registers
=$afe838				IDE_DATA_LO   = $AFE838 ; 16-bit access here
=$afe839				IDE_DATA_HI   = $AFE839 ;
=$01					IDE_ERR_AMNF = $01      ; Error: Address mark not found
=$02					IDE_ERR_TKZNF = $02     ; Error: Track 0 not found
=$04					IDE_ERR_ABRT = $04      ; Error: Aborted command
=$08					IDE_ERR_MCR = $08       ; Error: Media change request
=$10					IDE_ERR_IDNF = $10      ; Error: ID not found
=$20					IDE_ERR_MC = $20        ; Error: Media change
=$40					IDE_ERR_UNC = $40       ; Error: Uncorrectable data error
=$80					IDE_ERR_BBK = $80       ; Error: Bad block detected
=$80					IDE_STAT_BSY = $80      ; BSY (Busy) is set whenever the device has control of the command Block Registers.
=$40					IDE_STAT_DRDY = $40     ; DRDY (Device Ready) is set to indicate that the device is capable of accepting all command codes.
=$20					IDE_STAT_DF = $20       ; DF (Device Fault) indicates a device fault error has been detected.
=$10					IDE_STAT_DSC = $10      ; DSC (Device Seek Complete) indicates that the device heads are settled over a track.
=$08					IDE_STAT_DRQ = $08      ; DRQ (Data Request) indicates that the device is ready to transfer a word or byte of data between
=$04					IDE_STAT_CORR = $04     ; CORR (Corrected Data) is used to indicate a correctable data error.
=$02					IDE_STAT_IDX = $02      ; Vendor specific bit
=$01					IDE_STAT_ERR = $01      ; ERR (Error) indicates that an error occurred during execution of the previous command.
=$ec					IDE_CMD_IDENTIFY = $EC      ; Get device identification data
=$21					IDE_CMD_READ_SECTOR = $21   ; Read 1 or more sectors
=$30					IDE_CMD_WRITE_SECTOR = $30  ; Write 1 or more sectors

;******  Return to file: src\kernel.asm


;******  Processing file: src\GABE_Control_Registers_def.asm

=$afe880				GABE_MSTR_CTRL      = $AFE880
=$01					GABE_CTRL_PWR_LED   = $01     ; Controls the LED in the Front of the case (Next to the reset button)
=$02					GABE_CTRL_SDC_LED   = $02     ; Controls the LED in the Front of the Case (Next to SDCard)
=$10					GABE_CTRL_BUZZER    = $10     ; Controls the Buzzer
=$80					GABE_CTRL_WRM_RST   = $80     ; Warm Reset (needs to Setup other registers)
=$afe881				GABE_NOTUSED        = $AFE881 ; Reserved for future use
=$afe882				GABE_RST_AUTH0      = $AFE882 ; Must Contain the BYTE $AD for Reset to Activate
=$afe883				GABE_RST_AUTH1      = $AFE883 ; Must Contain the BYTE $DE for Reset to Activate
=$afe884				GABE_RNG_DAT_LO     = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885				GABE_RNG_DAT_HI     = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe884				GABE_RNG_SEED_LO    = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885				GABE_RNG_SEED_HI    = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe886				GABE_RNG_STAT       = $AFE886 ;
=$80					GABE_RNG_LFSR_DONE  = $80     ; indicates that Output = SEED Database
=$afe886				GABE_RNG_CTRL       = $AFE886 ;
=$01					GABE_RNG_CTRL_EN    = $01     ; Enable the LFSR BLOCK_LEN
=$02					GABE_RNG_CTRL_DV    = $02     ; After Setting the Seed Value, Toggle that Bit for it be registered
=$afe887				GABE_SYS_STAT       = $AFE887 ;
=$01					GABE_SYS_STAT_MID0  = $01     ; Machine ID -- LSB
=$02					GABE_SYS_STAT_MID1  = $02     ; Machine ID -- MSB
=$08					GABE_SYS_STAT_EXP   = $08     ; if Zero, there is an Expansion Card Preset
=$40					GABE_SYS_STAT_CPUA  = $40     ; Indicates the (8bit/16bit) Size of the Accumulator
=$80					GABE_SYS_STAT_CPUX  = $80     ; Indicates the (8bit/16bit) Size of the Accumulator

;******  Return to file: src\kernel.asm


;******  Processing file: src\fdc_inc.asm

=$af13f0				SIO_FDC  = $AF13F0
=$af13f0				SIO_FDC_SRA = $AF13F0 ; Read Only - Status Register A (not used in AT mode)
=$af13f1				SIO_FDC_SRB = $AF13F1 ; Read Only - Status Register B (not used in AT mode)
=$af13f2				SIO_FDC_DOR = $AF13F2 ; Read/Write - Digital Output Register
=$01					FDC_DOR_DSEL0 = $01     ; Drive 0 Select
=$02					FDC_DOR_DSEL1 = $02     ; Drive 1 Select
=$04					FDC_DOR_NRESET = $04    ; Reset the FDC
=$08					FDC_DOR_DMAEN = $08     ; Enable DMA
=$10					FDC_DOR_MOT0  = $10     ; Turn on motor 0
=$20					FDC_DOR_MOT1  = $20     ; Turn on motor 1
=$40					FDC_DOR_MOT2  = $40     ; Turn on motor 2
=$80					FDC_DOR_MOT3  = $80     ; Turn on motor 3
=$af13f3				SIO_FDC_TSR = $AF13F3   ; Read/Write - Tape Drive Status (not used on the C256)
=$af13f4				SIO_FDC_MSR = $AF13F4   ; Read - Main Status Register
=$01					FDC_MSR_DRV0BSY = $01   ; Indicates if drive 0 is busy
=$02					FDC_MSR_DRV1BSY = $02   ; Indicates if drive 1 is busy
=$10					FDC_MSR_CMDBSY = $10    ; Indicates if a command is in progress
=$20					FDC_MSR_NONDMA = $20    ;
=$40					FDC_MSR_DIO = $40       ; Data direction: 1 = read, 0 = write
=$80					FDC_MSR_RQM = $80       ; 1 = host can transfer data, 0 = host must wait
=$af13f4				SIO_FDC_DSR = $AF13F4   ; Write - Data Select Register
=$40					FDC_DSR_LOPWR = $40     ; Turn on low power mode
=$80					FDC_DSR_RESET = $80     ; Software reset of the FDC
=$af13f5				SIO_FDC_DTA = $AF13F5   ; Read/Write - Data - FIFO
=$af13f6				SIO_FDC_RSV = $AF13F6   ; Reserved
=$af13f7				SIO_FDC_DIR = $AF13F7   ; Read - Digital Input Register
=$80					FDC_DIR_DSKCHG = $80    ; Indicates if the disk has changed
=$af13f7				SIO_FDC_CCR = $AF13F7   ; Write - Configuration Control Register
=$03					FDC_ST0_DRVSEL = $03    ; Mask for the current selected drive
=$04					FDC_ST0_HEAD = $04      ; Bit for the current selected head
=$08					FDC_ST0_EC = $08        ; Bit for EQUIPMENT CHECK, error in recalibrate or relative seek
=$10					FDC_ST0_SEEKEND = $10   ; The FDC completed a seek, relative seek, or recalibrate
=$c0					FDC_ST0_INTCODE = $C0   ; Mask for interrupt code:
=$01					FDC_ST1_MA = $01        ; Missing address mark
=$02					FDC_ST1_NW = $02        ; Not writable (disk is write protected)
=$04					FDC_ST1_ND = $04        ; No data
=$10					FDC_ST1_OR = $10        ; Overrun/underrun of the data
=$20					FDC_ST1_DE = $20        ; Data error... a CRC check failed
=$80					FDC_ST1_EN = $80        ; End of cylinder: tried to acess a sector not on the track
=$01					FDC_ST2_MD = $01        ; Missing address mark: FDC cannot detect a data address mark
=$02					FDC_ST2_BC = $02        ; Bad cylinder
=$10					FDC_ST2_WC = $10        ; Wrong cylinder: track is not the same as expected
=$20					FDC_ST2_DD = $20        ; Data error in field: CRC error
=$40					FDC_ST2_CM = $40        ; Control mark
=$03					FDC_ST3_DRVSEL = $03    ; Drive select mask
=$04					FDC_ST3_HEAD = $04      ; Head address bit
=$10					FDC_ST3_TRACK0 = $10    ; Track 0: Status of the TRK0 pin
=$40					FDC_ST3_WP = $40        ; Write Protect: status of the WP pin
=2					FDC_CMD_READ_TRACK          = 2
=3					FDC_CMD_SPECIFY             = 3
=4					FDC_CMD_SENSE_DRIVE_STATUS  = 4
=5					FDC_CMD_WRITE_DATA          = 5
=6					FDC_CMD_READ_DATA           = 6
=7					FDC_CMD_RECALIBRATE         = 7
=8					FDC_CMD_SENSE_INTERRUPT     = 8
=9					FDC_CMD_WRITE_DELETED_DATA  = 9
=10					FDC_CMD_READ_ID             = 10
=12					FDC_CMD_READ_DELETED_DATA   = 12
=13					FDC_CMD_FORMAT_TRACK        = 13
=14					FDC_CMD_DUMPREG             = 14
=15					FDC_CMD_SEEK                = 15
=16					FDC_CMD_VERSION             = 16
=17					FDC_CMD_SCAN_EQUAL          = 17
=18					FDC_CMD_PERPENDICULAR_MODE  = 18
=19					FDC_CMD_CONFIGURE           = 19
=20					FDC_CMD_LOCK                = 20
=22					FDC_CMD_VERIFY              = 22
=25					FDC_CMD_SCAN_LOW_OR_EQUAL   = 25
=29					FDC_CMD_SCAN_HIGH_OR_EQUAL  = 29
=$80					FDC_CMD_MT = $80                    ; Command bit to turn on multi-track
=$40					FDC_CMD_MFM = $40                   ; Command bit to operate in MFM format
=$20					FDC_CMD_SK = $20                    ; Command bit to skip deleted sectors
=$40					FDC_CMD_EIS = $40                   ; Command bit to turn on implied seek
=1					FDC_DEVCMD_MOTOR_ON         = 1     ; Device code to turn the motor on
=2					FDC_DEVCMD_MOTOR_OFF        = 2     ; Device code to turn the motor off
=3					FDC_DEVCMD_RECAL            = 3     ; Device code to recalibrate the drive

;******  Return to file: src\kernel.asm


;******  Processing file: src\timer_def.asm

=$000160				TIMER0_CTRL_REG   = $000160 ; (Write - Control, Read Status)
=$01					TMR0_EN     = $01
=$02					TMR0_SCLR   = $02
=$04					TMR0_SLOAD  = $04 ; Use SLOAD is
=$08					TMR0_UPDWN  = $08
=$000161				TIMER0_CHARGE_L   = $000161 ; Use if you want to Precharge and countdown
=$000162				TIMER0_CHARGE_M   = $000162 ;
=$000163				TIMER0_CHARGE_H   = $000163 ;
=$000164				TIMER0_CMP_REG    = $000164 ;
=$01					TMR0_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02					TMR0_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$000165				TIMER0_CMP_L      = $000165 ; Load this Value for Countup
=$000166				TIMER0_CMP_M      = $000166 ;
=$000167				TIMER0_CMP_H      = $000167 ;
=$000168				TIMER1_CTRL_REG   = $000168 ;
=$01					TMR1_EN     = $01
=$02					TMR1_SCLR   = $02
=$04					TMR1_SLOAD  = $04
=$08					TMR1_UPDWN  = $08 ; 1 = Up, 0 = Down
=$000169				TIMER1_CHARGE_L   = $000169 ; Use if you want to Precharge and countdown
=$00016a				TIMER1_CHARGE_M   = $00016A ;
=$00016b				TIMER1_CHARGE_H   = $00016B ;
=$00016c				TIMER1_CMP_REG    = $00016C ;
=$01					TMR1_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02					TMR1_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$00016d				TIMER1_CMP_L      = $00016D ;
=$00016e				TIMER1_CMP_M      = $00016E ;
=$00016f				TIMER1_CMP_H      = $00016F ;

;******  Return to file: src\kernel.asm


;******  Processing file: src\basic_inc.asm

=$3a0000				BASIC = $3A0000
=3801092				MONITOR = BASIC + 4

;******  Return to file: src\kernel.asm


;******  Processing file: src\kernel_jumptable.asm

.381000	5c 00 04 39	jmp $390400	BOOT            JML IBOOT
.381004	5c b9 15 39	jmp $3915b9	RESTORE         JML IRESTORE
.381008	5c 18 06 39	jmp $390618	BREAK           JML IBREAK
.38100c	5c 5f 06 39	jmp $39065f	READY           JML IREADY
.381010	5c ba 15 39	jmp $3915ba	SCINIT          JML ISCINIT
.381014	5c bb 15 39	jmp $3915bb	IOINIT          JML IIOINIT
.381018	5c dc 06 39	jmp $3906dc	PUTC            JML IPUTC
.38101c	5c c5 06 39	jmp $3906c5	PUTS            JML IPUTS
.381020	5c 0d 08 39	jmp $39080d	PUTB            JML IPUTB
.381024	5c 8f 40 39	jmp $39408f	PUTBLOCK        JML IPUTBLOCK
.381028	5c bc 15 39	jmp $3915bc	SETLFS          JML ISETLFS
.38102c	5c bd 15 39	jmp $3915bd	SETNAM          JML ISETNAM
.381030	5c be 15 39	jmp $3915be	OPEN            JML IOPEN
.381034	5c bf 15 39	jmp $3915bf	CLOSE           JML ICLOSE
.381038	5c 7a 06 39	jmp $39067a	SETIN           JML ISETIN
.38103c	5c 83 06 39	jmp $390683	SETOUT          JML ISETOUT
.381040	5c c0 15 39	jmp $3915c0	GETB            JML IGETB
.381044	5c 3c 40 39	jmp $39403c	GETBLOCK        JML IGETBLOCK
.381048	5c c1 15 39	jmp $3915c1	GETCH           JML IGETCH
.38104c	5c 95 06 39	jmp $390695	GETCHW          JML IGETCHW
.381050	5c 8c 06 39	jmp $39068c	GETCHE          JML IGETCHE
.381054	5c c2 15 39	jmp $3915c2	GETS            JML IGETS
.381058	5c c3 15 39	jmp $3915c3	GETLINE         JML IGETLINE
.38105c	5c c4 15 39	jmp $3915c4	GETFIELD        JML IGETFIELD
.381060	5c c5 15 39	jmp $3915c5	TRIM            JML ITRIM
.381064	5c c6 15 39	jmp $3915c6	PRINTC          JML IPRINTC
.381068	5c c7 15 39	jmp $3915c7	PRINTS          JML IPRINTS
.38106c	5c 0e 08 39	jmp $39080e	PRINTCR         JML IPRINTCR
.381070	5c c8 15 39	jmp $3915c8	PRINTF          JML IPRINTF
.381074	5c c9 15 39	jmp $3915c9	PRINTI          JML IPRINTI
.381078	5c ce 09 39	jmp $3909ce	PRINTH          JML IPRINTH
.38107c	5c ca 15 39	jmp $3915ca	PRINTAI         JML IPRINTAI
.381080	5c eb 09 39	jmp $3909eb	PRINTAH         JML IPRINTAH
.381084	5c 12 09 39	jmp $390912	LOCATE          JML ILOCATE
.381088	5c cb 15 39	jmp $3915cb	PUSHKEY         JML IPUSHKEY
.38108c	5c cc 15 39	jmp $3915cc	PUSHKEYS        JML IPUSHKEYS
.381090	5c 6e 08 39	jmp $39086e	CSRRIGHT        JML ICSRRIGHT
.381094	5c a1 08 39	jmp $3908a1	CSRLEFT         JML ICSRLEFT
.381098	5c c7 08 39	jmp $3908c7	CSRUP           JML ICSRUP
.38109c	5c ed 08 39	jmp $3908ed	CSRDOWN         JML ICSRDOWN
.3810a0	5c 5d 08 39	jmp $39085d	CSRHOME         JML ICSRHOME
.3810a4	5c 5e 09 39	jmp $39095e	SCROLLUP        JML ISCROLLUP
.3810a8	5c 39 0a 39	jmp $390a39	CLRSCREEN       JML ICLRSCREEN
.3810ac	5c 04 0b 39	jmp $390b04	INITCHLUT	    JML IINITCHLUT
.3810b0	5c e1 0e 39	jmp $390ee1	INITSUPERIO	    JML IINITSUPERIO
.3810b4	5c e0 0f 39	jmp $390fe0	INITKEYBOARD    JML IINITKEYBOARD
.3810b8	5c 4b 11 39	jmp $39114b	TESTSID         JML ITESTSID
.3810bc	5c c0 0e 39	jmp $390ec0	INITCURSOR      JML IINITCURSOR
.3810c0	5c 76 0e 39	jmp $390e76	INITFONTSET     JML IINITFONTSET
.3810c4	5c 33 0b 39	jmp $390b33	INITGAMMATABLE  JML IINITGAMMATABLE
.3810c8	5c 53 0b 39	jmp $390b53	INITALLLUT      JML IINITALLLUT
.3810cc	5c 15 0c 39	jmp $390c15	INITVKYTXTMODE  JML IINITVKYTXTMODE
.3810d0	5c 01 0d 39	jmp $390d01	INITVKYGRPMODE  JML IINITVKYGRPMODE
.3810d4	5c 38 0d 39	jmp $390d38	INITTILEMODE    JML IINITTILEMODE
.3810d8	5c 39 0d 39	jmp $390d39	INITSPRITE      JML IINITSPRITE
.3810dc	5c 1a 12 39	jmp $39121a	INITCODEC       JML IINITCODEC
.3810e0	5c 96 12 39	jmp $391296	RESETCODEC      JML IRESETCODEC
.3810e4	5c 04 13 39	jmp $391304	BMP_PARSER      JML IBMP_PARSER
.3810e8	5c b9 12 39	jmp $3912b9	BM_FILL_SCREEN  JML IBM_FILL_SCREEN
.3810ec	5c 48 36 39	jmp $393648	OPL2_TONE_TEST  JML IOPL2_TONE_TEST
.3810f0	5c 70 52 39	jmp $395270	F_OPEN          JML IF_OPEN         ; open a file for reading/writing/creating
.3810f4	5c 03 53 39	jmp $395303	F_CREATE        JML IF_CREATE       ; create a new file
.3810f8	5c 3d 53 39	jmp $39533d	F_CLOSE         JML IF_CLOSE        ; close a file (make sure last cluster is written)
.3810fc	5c d6 53 39	jmp $3953d6	F_WRITE         JML IF_WRITE        ; write the current cluster to the file
.381100	5c 71 53 39	jmp $395371	F_READ          JML IF_READ         ; read the next cluster from the file
.381104	5c 80 54 39	jmp $395480	F_DELETE        JML IF_DELETE       ; delete a file / directory
.381108	5c 42 54 39	jmp $395442	F_DIROPEN       JML IF_DIROPEN      ; open a directory and seek the first directory entry
.38110c	5c 7c 54 39	jmp $39547c	F_DIRNEXT       JML IF_DIRNEXT      ; seek to the next directory of an open directory
.381110	5c 19 55 39	jmp $395519	F_DIRREAD       JML IF_DIRREAD      ; Read the directory entry for the specified file
.381114	5c 40 55 39	jmp $395540	F_DIRWRITE      JML IF_DIRWRITE     ; Write any changes in the current directory cluster back to the drive
.381118	5c 44 55 39	jmp $395544	F_LOAD          JML IF_LOAD         ; load a binary file into memory, supports multiple file formats
.38111c	5c 25 57 39	jmp $395725	F_SAVE          JML IF_SAVE         ; Save memory to a binary file
.381120	5c 12 40 39	jmp $394012	CMDBLOCK        JML ICMDBLOCK       ; Send a command to a block device
.381124	5c be 57 39	jmp $3957be	F_RUN           JML IF_RUN          ; Load an run a binary file
.381128	5c f6 43 39	jmp $3943f6	F_MOUNT         JML DOS_MOUNT       ; Mount the designated block device
.38112c	5c 4e 0c 39	jmp $390c4e	SETSIZES        JML ISETSIZES
.381130	5c e7 58 39	jmp $3958e7	F_COPY          JML IF_COPY         ; Copy a file
.381134	5c 49 58 39	jmp $395849	F_ALLOCFD       JML IF_ALLOCFD      ; Allocate a file descriptor
.381138	5c 9d 58 39	jmp $39589d	F_FREEFD        JML IF_FREEFD       ; Free a file descriptor

;******  Return to file: src\kernel.asm


;******  Processing file: src\Interrupt_Handler.asm

.38113c					IRQ_HANDLER
.38113c	e2 20		sep #$20	                SEP #$20        ; set A short
.38113e	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381142	c9 00		cmp #$00	                CMP #$00
.381144	f0 4a		beq $381190	                BEQ CHECK_PENDING_REG1
.381146	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.38114a	29 01		and #$01	                AND #FNX0_INT00_SOF
.38114c	c9 01		cmp #$01	                CMP #FNX0_INT00_SOF
.38114e	d0 09		bne $381159	                BNE SERVICE_NEXT_IRQ2
.381150	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381154	20 fa 11	jsr $3811fa	                JSR SOF_INTERRUPT
.381157	e2 20		sep #$20	                SEP #$20        ; set A short
.381159					SERVICE_NEXT_IRQ2
.381159	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.38115d	29 04		and #$04	                AND #FNX0_INT02_TMR0
.38115f	c9 04		cmp #$04	                CMP #FNX0_INT02_TMR0
.381161	d0 09		bne $38116c	                BNE SERVICE_NEXT_IRQ6
.381163	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381167	20 31 12	jsr $381231	                JSR TIMER0_INTERRUPT
.38116a	e2 20		sep #$20	                SEP #$20        ; set A short
.38116c					SERVICE_NEXT_IRQ6
.38116c	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381170	29 40		and #$40	                AND #FNX0_INT06_FDC
.381172	c9 40		cmp #$40	                CMP #FNX0_INT06_FDC
.381174	d0 09		bne $38117f	                BNE SERVICE_NEXT_IRQ7
.381176	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.38117a	20 8c 12	jsr $38128c	                JSR FDC_INTERRUPT
.38117d	e2 20		sep #$20	                SEP #$20        ; set A short
.38117f					SERVICE_NEXT_IRQ7
.38117f	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381183	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.381185	c9 80		cmp #$80	                CMP #FNX0_INT07_MOUSE
.381187	d0 07		bne $381190	                BNE CHECK_PENDING_REG1
.381189	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.38118d	20 4b 12	jsr $38124b	                JSR MOUSE_INTERRUPT
.381190					CHECK_PENDING_REG1
.381190	e2 20		sep #$20	                SEP #$20        ; set A short
.381192	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381196	c9 00		cmp #$00	                CMP #$00
.381198	f0 5d		beq $3811f7	                BEQ EXIT_IRQ_HANDLE
.38119a					SERVICE_NEXT_IRQ8
.38119a	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.38119e	29 01		and #$01	                AND #FNX1_INT00_KBD
.3811a0	c9 01		cmp #$01	                CMP #FNX1_INT00_KBD
.3811a2	d0 09		bne $3811ad	                BNE SERVICE_NEXT_IRQ11
.3811a4	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811a8	20 c4 12	jsr $3812c4	                JSR KEYBOARD_INTERRUPT
.3811ab	e2 20		sep #$20	                SEP #$20        ; set A short
.3811ad					SERVICE_NEXT_IRQ11
.3811ad	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3811b1	29 08		and #$08	                AND #FNX1_INT03_COM2
.3811b3	c9 08		cmp #$08	                CMP #FNX1_INT03_COM2
.3811b5	d0 09		bne $3811c0	                BNE SERVICE_NEXT_IRQ12
.3811b7	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811bb	20 97 12	jsr $381297	                JSR COM2_INTERRUPT
.3811be	e2 20		sep #$20	                SEP #$20        ; set A short
.3811c0					SERVICE_NEXT_IRQ12
.3811c0	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3811c4	29 10		and #$10	                AND #FNX1_INT04_COM1
.3811c6	c9 10		cmp #$10	                CMP #FNX1_INT04_COM1
.3811c8	d0 09		bne $3811d3	                BNE SERVICE_NEXT_IRQ13
.3811ca	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811ce	20 a2 12	jsr $3812a2	                JSR COM1_INTERRUPT
.3811d1	e2 20		sep #$20	                SEP #$20        ; set A short
.3811d3					SERVICE_NEXT_IRQ13
.3811d3	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3811d7	29 20		and #$20	                AND #FNX1_INT05_MPU401
.3811d9	c9 20		cmp #$20	                CMP #FNX1_INT05_MPU401
.3811db	d0 09		bne $3811e6	                BNE SERVICE_NEXT_IRQ14
.3811dd	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811e1	20 ad 12	jsr $3812ad	                JSR MPU401_INTERRUPT
.3811e4	e2 20		sep #$20	                SEP #$20        ; set A short
.3811e6					SERVICE_NEXT_IRQ14
.3811e6	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3811ea	29 40		and #$40	                AND #FNX1_INT06_LPT
.3811ec	c9 40		cmp #$40	                CMP #FNX1_INT06_LPT
.3811ee	d0 07		bne $3811f7	                BNE EXIT_IRQ_HANDLE
.3811f0	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811f4	20 b8 12	jsr $3812b8	                JSR LPT1_INTERRUPT
.3811f7					EXIT_IRQ_HANDLE
.3811f7	c2 30		rep #$30	                REP #$30        ; set A&X long
.3811f9	6b		rtl		                RTL
.3811fa					SOF_INTERRUPT
.3811fa	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.3811fe	29 01		and #$01	                AND #FNX0_INT00_SOF
.381200	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381204	c2 20		rep #$20	                REP #$20        ; set A long
.381206	af 4e a0 38	lda $38a04e	                LDA @l FDC_MOTOR_TIMER          ; Check the FDC motor count-down timer
.38120a	f0 0b		beq $381217	                BEQ sof_timeout                 ; If it's zero, check for the watchdog timeout
.38120c	3a		dec a		                DEC A                           ; Otherwise, decrement it...
.38120d	8f 4e a0 38	sta $38a04e	                STA @l FDC_MOTOR_TIMER
.381211	d0 04		bne $381217	                BNE sof_timeout                 ; If it's not zero, check for the watchdog timeout
.381213	22 f2 60 39	jsl $3960f2	                JSL FDC_Motor_Off               ; Otherwise, turn off the motor
.381217					sof_timeout
.381217	e2 20		sep #$20	                SEP #$20        ; set A short
.381219	af 2d 03 00	lda $00032d	                LDA @l BIOS_TIMER               ; Check the BIOS_TIMER
.38121d	f0 11		beq $381230	                BEQ sof_int_done                ; If it's 0, we don't do anything
.38121f	3a		dec a		                DEC A                           ; Count down one tick
.381220	8f 2d 03 00	sta $00032d	                STA @l BIOS_TIMER
.381224	d0 0a		bne $381230	                BNE sof_int_done                ; If not 0, we're done
.381226	af 2c 03 00	lda $00032c	                LDA @l BIOS_FLAGS               ; Otherwise: flag a time out event
.38122a	09 80		ora #$80	                ORA #BIOS_TIMEOUT
.38122c	8f 2c 03 00	sta $00032c	                STA @l BIOS_FLAGS
.381230	60		rts		sof_int_done    RTS
.381231					TIMER0_INTERRUPT
.381231	e2 20		sep #$20	                SEP #$20        ; set A short
.381233	af 05 07 00	lda $000705	                LDA @l TIMERFLAGS               ; Flag that the interrupt has happened
.381237	09 80		ora #$80	                ORA #TIMER0TRIGGER
.381239	8f 05 07 00	sta $000705	                STA @l TIMERFLAGS
.38123d	60		rts		                RTS
.38123e					TIMER2_INTERRUPT
.38123e	e2 20		sep #$20	                SEP #$20        ; set A short
.381240	af 05 07 00	lda $000705	                LDA @l TIMERFLAGS               ; Flag that the interrupt has happened
.381244	09 20		ora #$20	                ORA #TIMER2TRIGGER
.381246	8f 05 07 00	sta $000705	                STA @l TIMERFLAGS
.38124a	60		rts		                RTS
.38124b					MOUSE_INTERRUPT
.38124b	e2 20		sep #$20	                SEP #$20        ; set A short
.38124d	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381251	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.381253	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381257	af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF
.38125b	a2 00 00	ldx #$0000	                LDX #$0000
.38125e	e2 10		sep #$10	                SEP #$10        ; set X short
.381260	a6 e0		ldx $e0		                LDX MOUSE_PTR
.381262	9f 06 07 af	sta $af0706,x	                STA @lMOUSE_PTR_BYTE0, X
.381266	e8		inx		                INX
.381267	e0 03		cpx #$03	                CPX #$03
.381269	d0 1c		bne $381287	                BNE EXIT_FOR_NEXT_VALUE
.38126b	af 02 07 af	lda $af0702	                LDA @lMOUSE_PTR_X_POS_L
.38126f	85 e1		sta $e1		                STA MOUSE_POS_X_LO
.381271	af 03 07 af	lda $af0703	                LDA @lMOUSE_PTR_X_POS_H
.381275	85 e2		sta $e2		                STA MOUSE_POS_X_HI
.381277	af 04 07 af	lda $af0704	                LDA @lMOUSE_PTR_Y_POS_L
.38127b	85 e3		sta $e3		                STA MOUSE_POS_Y_LO
.38127d	af 05 07 af	lda $af0705	                LDA @lMOUSE_PTR_Y_POS_H
.381281	85 e4		sta $e4		                STA MOUSE_POS_Y_HI
.381283	e2 20		sep #$20	                SEP #$20        ; set A short
.381285	a2 00		ldx #$00	                LDX #$00
.381287					EXIT_FOR_NEXT_VALUE
.381287	86 e0		stx $e0		                STX MOUSE_PTR
.381289	c2 10		rep #$10	                REP #$10        ; set X long
.38128b	60		rts		                RTS
.38128c					FDC_INTERRUPT
.38128c	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381290	29 40		and #$40	                AND #FNX0_INT06_FDC
.381292	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381296	60		rts		                RTS
.381297					COM2_INTERRUPT
.381297	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.38129b	29 08		and #$08	                AND #FNX1_INT03_COM2
.38129d	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3812a1	60		rts		                RTS
.3812a2					COM1_INTERRUPT
.3812a2	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3812a6	29 10		and #$10	                AND #FNX1_INT04_COM1
.3812a8	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3812ac	60		rts		                RTS
.3812ad					MPU401_INTERRUPT
.3812ad	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3812b1	29 20		and #$20	                AND #FNX1_INT05_MPU401
.3812b3	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3812b7	60		rts		                RTS
.3812b8					LPT1_INTERRUPT
.3812b8	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3812bc	29 40		and #$40	                AND #FNX1_INT06_LPT
.3812be	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3812c2	60		rts		                RTS
.3812c3					NMI_HANDLER
.3812c3	6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\keyboard.asm

.3812c4					KEYBOARD_INTERRUPT
.3812c4	48		pha		                PHA             ; begin setdp macro
.3812c5	08		php		                PHP
.3812c6	c2 20		rep #$20	                REP #$20        ; set A long
.3812c8	a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.3812cb	5b		tcd		                TCD
.3812cc	28		plp		                PLP
.3812cd	68		pla		                PLA             ; end setdp macro
.3812ce	a2 00 00	ldx #$0000	                ldx #$0000
.3812d1	e2 10		sep #$10	                SEP #$10        ; set X short
.3812d3	e2 20		sep #$20	                SEP #$20        ; set A short
.3812d5	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3812d9	29 01		and #$01	                AND #FNX1_INT00_KBD
.3812db	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3812df					IRQ_HANDLER_FETCH
.3812df	af 60 10 af	lda $af1060	                LDA @lKBD_INPT_BUF      ; Get Scan Code from KeyBoard
.3812e3	85 88		sta $0f88	                STA KEYBOARD_SC_TMP     ; Save Code Immediately
.3812e5	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the Prefix was picked up before
.3812e7	29 80		and #$80	                AND #$80
.3812e9	c9 80		cmp #$80	                CMP #$80
.3812eb	d0 10		bne $3812fd	                BNE CHK_LSHIFT          ; No: do normal scan-code checks
.3812ed	a5 87		lda $0f87	PREFIX_ON       LDA KEYBOARD_SC_FLG     ; Otherwise: clear prefix
.3812ef	29 7f		and #$7f	                AND #$7F
.3812f1	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3812f3	a5 88		lda $0f88	                LDA KEYBOARD_SC_TMP     ; Get the prefixed scan-code's character
.3812f5	aa		tax		                TAX
.3812f6	bf 80 73 39	lda $397380,x	                LDA @lScanCode_Prefix_Set1, x
.3812fa	4c a0 13	jmp $3813a0	                JMP KB_WR_2_SCREEN      ; And save it
.3812fd	a5 88		lda $0f88	CHK_LSHIFT      LDA KEYBOARD_SC_TMP
.3812ff	c9 2a		cmp #$2a	                CMP #$2A                ; Left Shift Pressed
.381301	d0 03		bne $381306	                BNE NOT_KB_SET_LSHIFT
.381303	82 ad 00	brl $3813b3	                BRL KB_SET_SHIFT
.381306					NOT_KB_SET_LSHIFT
.381306	c9 aa		cmp #$aa	                CMP #$AA                ; Left Shift Unpressed
.381308	d0 03		bne $38130d	                BNE NOT_KB_CLR_LSHIFT
.38130a	82 af 00	brl $3813bc	                BRL KB_CLR_SHIFT
.38130d					NOT_KB_CLR_LSHIFT
.38130d	c9 36		cmp #$36	                CMP #$36                ; Right Shift Pressed
.38130f	d0 03		bne $381314	                BNE NOT_KB_SET_RSHIFT
.381311	82 9f 00	brl $3813b3	                BRL KB_SET_SHIFT
.381314					NOT_KB_SET_RSHIFT
.381314	c9 b6		cmp #$b6	                CMP #$B6                ; Right Shift Unpressed
.381316	d0 03		bne $38131b	                BNE NOT_KB_CLR_RSHIFT
.381318	82 a1 00	brl $3813bc	                BRL KB_CLR_SHIFT
.38131b					NOT_KB_CLR_RSHIFT
.38131b	c9 1d		cmp #$1d	                CMP #$1D                ; Left CTRL pressed
.38131d	d0 03		bne $381322	                BNE NOT_KB_SET_CTRL
.38131f	82 a3 00	brl $3813c5	                BRL KB_SET_CTRL
.381322					NOT_KB_SET_CTRL
.381322	c9 9d		cmp #$9d	                CMP #$9D                ; Left CTRL Unpressed
.381324	d0 03		bne $381329	                BNE NOT_KB_CLR_CTRL
.381326	82 a5 00	brl $3813ce	                BRL KB_CLR_CTRL
.381329					NOT_KB_CLR_CTRL
.381329	c9 38		cmp #$38	                CMP #$38                ; Left ALT Pressed
.38132b	d0 03		bne $381330	                BNE NOT_KB_SET_ALT
.38132d	82 a7 00	brl $3813d7	                BRL KB_SET_ALT
.381330					NOT_KB_SET_ALT
.381330	c9 b8		cmp #$b8	                CMP #$B8                ; Left ALT Unpressed
.381332	d0 03		bne $381337	                BNE NOT_KB_CLR_ALT
.381334	82 a9 00	brl $3813e0	                BRL KB_CLR_ALT
.381337	c9 e0		cmp #$e0	NOT_KB_CLR_ALT  CMP #$E0                ; Prefixed scan code
.381339	d0 03		bne $38133e	                BNE NOT_PREFIXED
.38133b	82 ab 00	brl $3813e9	                BRL KB_SET_PREFIX
.38133e	c9 45		cmp #$45	NOT_PREFIXED    CMP #$45                ; Numlock Pressed
.381340	d0 03		bne $381345	                BNE NOT_KB_SET_NUM
.381342	82 b6 00	brl $3813fb	                BRL KB_TOG_NUMLOCK
.381345	c9 46		cmp #$46	NOT_KB_SET_NUM  CMP #$46                ; Scroll Lock Pressed
.381347	d0 03		bne $38134c	                BNE NOT_KB_SET_SCR
.381349	82 a6 00	brl $3813f2	                BRL KB_TOG_SCRLOCK
.38134c	c9 3a		cmp #$3a	NOT_KB_SET_SCR  CMP #$3A                ; Caps Lock Pressed
.38134e	d0 03		bne $381353	                BNE NOT_KB_CAPSLOCK
.381350	82 bc 00	brl $38140f	                BRL KB_TOG_CAPLOCK
.381353	c9 58		cmp #$58	NOT_KB_CAPSLOCK CMP #$58                ; F12 Pressed
.381355	d0 09		bne $381360	                BNE KB_UNPRESSED
.381357	a9 60		lda #$60	                LDA #KB_CREDITS         ; Yes: flag that the CREDITS key has been pressed
.381359	8f 8a 0f 00	sta $000f8a	                STA @lKEYFLAG
.38135d	82 b5 00	brl $381415	                BRL KB_CHECK_B_DONE
.381360	29 80		and #$80	KB_UNPRESSED    AND #$80                ; See if the Scan Code is press or Depressed
.381362	c9 80		cmp #$80	                CMP #$80                ; Depress Status - We will not do anything at this point
.381364	d0 03		bne $381369	                BNE KB_NORM_SC
.381366	82 ac 00	brl $381415	                BRL KB_CHECK_B_DONE
.381369	a5 88		lda $0f88	KB_NORM_SC      LDA KEYBOARD_SC_TMP       ;
.38136b	aa		tax		                TAX
.38136c	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the SHIFT Key is being Pushed
.38136e	29 10		and #$10	                AND #$10
.381370	c9 10		cmp #$10	                CMP #$10
.381372	f0 17		beq $38138b	                BEQ SHIFT_KEY_ON
.381374	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the CTRL Key is being Pushed
.381376	29 20		and #$20	                AND #$20
.381378	c9 20		cmp #$20	                CMP #$20
.38137a	f0 16		beq $381392	                BEQ CTRL_KEY_ON
.38137c	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the ALT Key is being Pushed
.38137e	29 40		and #$40	                AND #$40
.381380	c9 40		cmp #$40	                CMP #$40
.381382	f0 15		beq $381399	                BEQ ALT_KEY_ON
.381384	bf 00 71 39	lda $397100,x	                LDA @lScanCode_Press_Set1, x
.381388	82 15 00	brl $3813a0	                BRL KB_WR_2_SCREEN
.38138b	bf 80 71 39	lda $397180,x	SHIFT_KEY_ON    LDA @lScanCode_Shift_Set1, x
.38138f	82 0e 00	brl $3813a0	                BRL KB_WR_2_SCREEN
.381392	bf 00 72 39	lda $397200,x	CTRL_KEY_ON     LDA @lScanCode_Ctrl_Set1, x
.381396	82 07 00	brl $3813a0	                BRL KB_WR_2_SCREEN
.381399	bf 80 72 39	lda $397280,x	ALT_KEY_ON      LDA @lScanCode_Alt_Set1, x
.38139d	82 00 00	brl $3813a0	                BRL KB_WR_2_SCREEN
.3813a0	c9 18		cmp #$18	KB_WR_2_SCREEN  CMP #$18                ; Is it SysRq?
.3813a2	d0 03		bne $3813a7	                BNE savechar
.3813a4	4c 25 14	jmp $381425	                JMP programmerKey       ; Yes: trigger the programmer key
.3813a7	48		pha		savechar        PHA
.3813a8	c2 10		rep #$10	                REP #$10        ; set X long
.3813aa	20 31 14	jsr $381431	                JSR SAVEKEY
.3813ad	e2 20		sep #$20	                SEP #$20        ; set A short
.3813af	68		pla		                PLA
.3813b0	4c 15 14	jmp $381415	                JMP KB_CHECK_B_DONE
.3813b3	a5 87		lda $0f87	KB_SET_SHIFT    LDA KEYBOARD_SC_FLG
.3813b5	09 10		ora #$10	                ORA #$10
.3813b7	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813b9	4c 15 14	jmp $381415	                JMP KB_CHECK_B_DONE
.3813bc	a5 87		lda $0f87	KB_CLR_SHIFT    LDA KEYBOARD_SC_FLG
.3813be	29 ef		and #$ef	                AND #$EF
.3813c0	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813c2	4c 15 14	jmp $381415	                JMP KB_CHECK_B_DONE
.3813c5	a5 87		lda $0f87	KB_SET_CTRL     LDA KEYBOARD_SC_FLG
.3813c7	09 20		ora #$20	                ORA #$20
.3813c9	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813cb	4c 15 14	jmp $381415	                JMP KB_CHECK_B_DONE
.3813ce	a5 87		lda $0f87	KB_CLR_CTRL     LDA KEYBOARD_SC_FLG
.3813d0	29 df		and #$df	                AND #$DF
.3813d2	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813d4	4c 15 14	jmp $381415	                JMP KB_CHECK_B_DONE
.3813d7	a5 87		lda $0f87	KB_SET_ALT      LDA KEYBOARD_SC_FLG
.3813d9	09 40		ora #$40	                ORA #$40
.3813db	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813dd	4c 15 14	jmp $381415	                JMP KB_CHECK_B_DONE
.3813e0	a5 87		lda $0f87	KB_CLR_ALT      LDA KEYBOARD_SC_FLG
.3813e2	29 bf		and #$bf	                AND #$BF
.3813e4	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813e6	4c 15 14	jmp $381415	                JMP KB_CHECK_B_DONE
.3813e9	a5 87		lda $0f87	KB_SET_PREFIX   LDA KEYBOARD_SC_FLG
.3813eb	09 80		ora #$80	                ORA #$80
.3813ed	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813ef	4c 15 14	jmp $381415	                JMP KB_CHECK_B_DONE
.3813f2	a5 89		lda $0f89	KB_TOG_SCRLOCK  LDA KEYBOARD_LOCKS
.3813f4	49 01		eor #$01	                EOR #KB_SCROLL_LOCK         ; toggle the Scroll Lock flag
.3813f6	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.3813f8	4c 15 14	jmp $381415	                JMP KB_CHECK_B_DONE
.3813fb	a5 87		lda $0f87	KB_TOG_NUMLOCK  LDA KEYBOARD_SC_FLG         ; Check flags...
.3813fd	29 60		and #$60	                AND #$60                    ; ... is control-alt pressed?
.3813ff	c9 60		cmp #$60	                CMP #$60
.381401	d0 03		bne $381406	                BNE KB_TOG_NUMLOC2
.381403	82 63 ff	brl $381369	                BRL KB_NORM_SC              ; No: treat as a BREAK key
.381406	a5 89		lda $0f89	KB_TOG_NUMLOC2  LDA KEYBOARD_LOCKS
.381408	49 02		eor #$02	                EOR #KB_NUM_LOCK            ; toggle the Num Lock flag
.38140a	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.38140c	4c 15 14	jmp $381415	                JMP KB_CHECK_B_DONE
.38140f	a5 89		lda $0f89	KB_TOG_CAPLOCK  LDA KEYBOARD_LOCKS
.381411	49 04		eor #$04	                EOR #KB_CAPS_LOCK           ; toggle the Caps Lock flag
.381413	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.381415					KB_CHECK_B_DONE
.381415	af 64 10 af	lda $af1064	                LDA STATUS_PORT
.381419	29 01		and #$01	                AND #OUT_BUF_FULL           ; Test bit $01 (if 1, Full)
.38141b	c9 01		cmp #$01	                CMP #OUT_BUF_FULL           ; if Still Byte in the Buffer, fetch it out
.38141d	d0 03		bne $381422	                BNE SET_LED
.38141f	4c df 12	jmp $3812df	                JMP IRQ_HANDLER_FETCH
.381422					SET_LED
.381422					KB_DONE
.381422	c2 30		rep #$30	                REP #$30        ; set A&X long
.381424	60		rts		                RTS
.381425					programmerKey
.381425	c2 30		rep #$30	                REP #$30        ; set A&X long
.381427	68		pla		                PLA                     ; Get and throw-away the return address to the interrupt handler
.381428	2b		pld		                PLD                     ; Restore the registers that were present when the handler was invoked
.381429	ab		plb		                PLB
.38142a	7a		ply		                PLY
.38142b	fa		plx		                PLX
.38142c	68		pla		                PLA
.38142d	5c 08 10 38	jmp $381008	                JML BREAK               ; And go to the BRK handler directly to open the monitor
.381431					SAVEKEY
.381431	e2 20		sep #$20	                SEP #$20        ; set A short
.381433	48		pha		                PHA                     ; Save the character
.381434	a5 89		lda $0f89	                LDA KEYBOARD_LOCKS      ; Check the keyboard lock flags
.381436	29 04		and #$04	                AND #KB_CAPS_LOCK       ; Is CAPS lock on?
.381438	f0 0d		beq $381447	                BEQ no_caps             ; No... just use the character as-is
.38143a	68		pla		                PLA                     ; Get the character back
.38143b	c9 61		cmp #$61	                CMP #'a'                ; Is it < 'a'
.38143d	90 09		bcc $381448	                BLT check_break         ; Yes: just use as-is
.38143f	c9 7b		cmp #$7b	                CMP #'z'+1              ; Is it > 'z'
.381441	b0 05		bcs $381448	                BGE check_break         ; Yes: just us as-is
.381443	29 df		and #$df	                AND #%11011111          ; Conver to upper case
.381445	80 01		bra $381448	                BRA check_break
.381447	68		pla		no_caps         PLA                     ; Restore the character
.381448	c9 00		cmp #$00	check_break     CMP #0
.38144a	f0 18		beq $381464	                BEQ done
.38144c	c9 03		cmp #$03	                CMP #CHAR_CTRL_C        ; Is it CTRL-C?
.38144e	f0 15		beq $381465	                BEQ flag_break          ; Yes: flag a break
.381450	a6 8d		ldx $0f8d	no_break        LDX KEY_BUFFER_WPOS     ; So the Receive Character is saved in the Buffer
.381452	e0 80 00	cpx #$0080	                CPX #KEY_BUFFER_SIZE    ; Make sure we haven't been overboard.
.381455	b0 0d		bcs $381464	                BCS done                ; Stop storing - An error should ensue here...
.381457	9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER,X
.38145b	e8		inx		                INX
.38145c	86 8d		stx $0f8d	                STX KEY_BUFFER_WPOS
.38145e	a9 00		lda #$00	                LDA #$00
.381460	9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER, X       ; Store a EOL in the following location for good measure
.381464	60		rts		done            RTS
.381465					flag_break
.381465	e2 20		sep #$20	                SEP #$20        ; set A short
.381467	a9 80		lda #$80	                LDA #KB_CTRL_C          ; Flag that an interrupt key has been pressed
.381469	85 8a		sta $0f8a	                STA KEYFLAG             ; The interpreter should see this soon and throw a BREAK
.38146b	60		rts		                RTS
.38146c					KBD_GETC
.38146c	da		phx		                PHX
.38146d	0b		phd		                PHD
.38146e	08		php		                PHP
.38146f	48		pha		                PHA             ; begin setdp macro
.381470	08		php		                PHP
.381471	c2 20		rep #$20	                REP #$20        ; set A long
.381473	a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.381476	5b		tcd		                TCD
.381477	28		plp		                PLP
.381478	68		pla		                PLA             ; end setdp macro
.381479	e2 20		sep #$20	                SEP #$20        ; set A short
.38147b	c2 10		rep #$10	                REP #$10        ; set X long
.38147d	58		cli		                CLI                     ; Make sure interrupts can happen
.38147e	af 8a 0f 00	lda $000f8a	get_wait        LDA @lKEYFLAG           ; Check the keyboard control flag
.381482	29 60		and #$60	                AND #KB_CREDITS         ; Are the credits flagged?
.381484	c9 60		cmp #$60	                CMP #KB_CREDITS
.381486	d0 0a		bne $381492	                BNE check_buffer        ; No: check the key buffer
.381488	a9 00		lda #$00	                LDA #0                  ; Yes: clear the flags
.38148a	8f 8a 0f 00	sta $000f8a	                STA @lKEYFLAG
.38148e	22 73 15 39	jsl $391573	                JSL SHOW_CREDITS        ; Then show the credits screen and wait for a key press
.381492	a6 8b		ldx $0f8b	check_buffer    LDX KEY_BUFFER_RPOS     ; Is KEY_BUFFER_RPOS < KEY_BUFFER_WPOS
.381494	e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS
.381496	90 02		bcc $38149a	                BCC read_buff           ; Yes: a key is present, read it
.381498	80 e4		bra $38147e	                BRA get_wait            ; Otherwise, keep waiting
.38149a	78		sei		read_buff       SEI                     ; Don't interrupt me!
.38149b	b5 00		lda $0f00,x	                LDA KEY_BUFFER,X        ; Get the key
.38149d	e8		inx		                INX                     ; And move to the next key
.38149e	e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS     ; Did we just read the last key?
.3814a0	f0 07		beq $3814a9	                BEQ reset_indexes       ; Yes: return to 0 position
.3814a2	86 8b		stx $0f8b	                STX KEY_BUFFER_RPOS     ; Otherwise: Update the read index
.3814a4	58		cli		                CLI
.3814a5	28		plp		done            PLP                     ; Restore status and interrupts
.3814a6	2b		pld		                PLD
.3814a7	fa		plx		                PLX
.3814a8	6b		rtl		                RTL
.3814a9	64 8b		stz $0f8b	reset_indexes   STZ KEY_BUFFER_RPOS     ; Reset read index to the beginning
.3814ab	64 8d		stz $0f8d	                STZ KEY_BUFFER_WPOS     ; Reset the write index to the beginning
.3814ad	80 f6		bra $3814a5	                BRA done

;******  Return to file: src\kernel.asm

.390400					IBOOT
.390400	18		clc		                CLC               ; clear the carry flag
.390401	fb		xce		                XCE               ; move carry to emulation flag.
.390402	78		sei		                SEI               ; Disable interrupts
.390403	c2 30		rep #$30	                REP #$30        ; set A&X long
.390405	a9 ff fe	lda #$feff	                LDA #STACK_END    ; initialize stack pointer
.390408	1b		tcs		                TAS
.390409	a2 00 10	ldx #$1000	                LDX #<>BOOT       ; Copy the kernel jump table to bank 0
.39040c	a0 00 10	ldy #$1000	                LDY #<>BOOT       ; Ordinarily, this is done by GAVIN, but
.39040f	a9 00 01	lda #$0100	                LDA #$0100        ; this is ensures it can be reloaded in case of errors
.390412	54 00 38	mvn $38,$00	                MVN `BOOT,$00     ; Or during soft loading of the kernel from the debug port
.390415	48		pha		                PHA             ; begin setdp macro
.390416	08		php		                PHP
.390417	c2 20		rep #$20	                REP #$20        ; set A long
.390419	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39041c	5b		tcd		                TCD
.39041d	28		plp		                PLP
.39041e	68		pla		                PLA             ; end setdp macro
.39041f	e2 20		sep #$20	                SEP #$20        ; set A short
.390421	a2 00 00	ldx #$0000	                LDX #$0000
.390424	a9 00		lda #$00	                LDA #$00
.390426					CLEAR_MEM_LOOP
.390426	95 00		sta $00,x	                STA $0000, X
.390428	e8		inx		                INX
.390429	e0 00 01	cpx #$0100	                CPX #$0100
.39042c	d0 f8		bne $390426	                BNE CLEAR_MEM_LOOP
.39042e	ea		nop		                NOP
.39042f	a9 ff		lda #$ff	                LDA #$FF
.390431	8f 48 01 00	sta $000148	                STA @lINT_EDGE_REG0
.390435	8f 49 01 00	sta $000149	                STA @lINT_EDGE_REG1
.390439	8f 4a 01 00	sta $00014a	                STA @lINT_EDGE_REG2
.39043d	8f 4b 01 00	sta $00014b	                STA @lINT_EDGE_REG3
.390441	8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.390445	8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.390449	8f 4e 01 00	sta $00014e	                STA @lINT_MASK_REG2
.39044d	8f 4f 01 00	sta $00014f	                STA @lINT_MASK_REG3
.390451	22 30 11 39	jsl $391130	                JSL INITRTC               ; Initialize the RTC
.390455	c2 30		rep #$30	                REP #$30        ; set A&X long
.390457	a9 00 a0	lda #$a000	                LDA #<>SCREEN_PAGE0      ; store the initial screen buffer location
.39045a	85 0c		sta $0c		                STA SCREENBEGIN
.39045c	85 17		sta $17		                STA CURSORPOS
.39045e	a9 00 c0	lda #$c000	                LDA #<>CS_COLOR_MEM_PTR   ; Set the initial COLOR cursor position
.390461	85 1f		sta $1f		                STA COLORPOS
.390463	e2 20		sep #$20	                SEP #$20        ; set A short
.390465	a9 af		lda #$af	                LDA #`SCREEN_PAGE0
.390467	85 0e		sta $0e		                STA SCREENBEGIN+2
.390469	85 19		sta $19		                STA CURSORPOS+2
.39046b	a9 af		lda #$af	                LDA #`CS_COLOR_MEM_PTR    ; Set the initial COLOR cursor position
.39046d	85 21		sta $21		                STA COLORPOS+2
.39046f	e2 20		sep #$20	                SEP #$20        ; set A short
.390471	a9 00		lda #$00	                LDA #$00
.390473	8d 87 0f	sta $0f87	                STA KEYBOARD_SC_FLG     ; Clear the Keyboard Flag
.390476	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.390478	8f 00 f1 af	sta $aff100	                STA $AFF100
.39047c	a9 bf		lda #$bf	                LDA #$BF ; Channel Two - No Atteniation
.39047e	8f 00 f1 af	sta $aff100	                STA $AFF100
.390482	a9 df		lda #$df	                LDA #$DF ; Channel Two - No Atteniation
.390484	8f 00 f1 af	sta $aff100	                STA $AFF100
.390488	a9 ff		lda #$ff	                LDA #$FF ; Channel Two - No Atteniation
.39048a	8f 00 f1 af	sta $aff100	                STA $AFF100
.39048e	c2 30		rep #$30	                REP #$30        ; set A&X long
.390490	a2 48 00	ldx #$0048	                LDX #72
.390493	86 0f		stx $0f		                STX COLS_VISIBLE
.390495	a0 34 00	ldy #$0034	                LDY #52
.390498	84 13		sty $13		                STY LINES_VISIBLE
.39049a	a2 80 00	ldx #$0080	                LDX #128
.39049d	86 11		stx $11		                STX COLS_PER_LINE
.39049f	a0 40 00	ldy #$0040	                LDY #64
.3904a2	84 15		sty $15		                STY LINES_MAX
.3904a4	a9 ed 00	lda #$00ed	                LDA #$ED                  ; Set the default text color to light gray on dark gray
.3904a7	85 1e		sta $1e		                STA CURCOLOR
.3904a9	22 dc 10 38	jsl $3810dc	                JSL INITCODEC
.3904ad	22 b0 10 38	jsl $3810b0	                JSL INITSUPERIO
.3904b1	22 c4 10 38	jsl $3810c4	                JSL INITGAMMATABLE
.3904b5	22 c8 10 38	jsl $3810c8	                JSL INITALLLUT
.3904b9	22 ac 10 38	jsl $3810ac	                JSL INITCHLUT
.3904bd	22 a1 0e 39	jsl $390ea1	                JSL INITMOUSEPOINTER
.3904c1	22 bc 10 38	jsl $3810bc	                JSL INITCURSOR
.3904c5	22 cc 10 38	jsl $3810cc	                JSL INITVKYTXTMODE
.3904c9	22 76 0e 39	jsl $390e76	                JSL IINITFONTSET
.3904cd	22 39 0a 39	jsl $390a39	                JSL ICLRSCREEN  ; Clear Screen and Set a standard color in Color Memory
.3904d1	a9 01 00	lda #$0001	                LDA #CHAN_COM1    ; Initialize COM1
.3904d4	22 fe 59 39	jsl $3959fe	                JSL UART_SELECT
.3904d8	22 6a 5a 39	jsl $395a6a	                JSL UART_INIT
.3904dc	a9 02 00	lda #$0002	                LDA #CHAN_COM2    ; Initialize COM2
.3904df	22 fe 59 39	jsl $3959fe	                JSL UART_SELECT
.3904e3	22 6a 5a 39	jsl $395a6a	                JSL UART_INIT
.3904e7	a9 00 00	lda #$0000	                LDA #0
.3904ea	22 38 10 38	jsl $381038	                JSL SETIN
.3904ee	22 3c 10 38	jsl $38103c	                JSL SETOUT
.3904f2	c2 20		rep #$20	                REP #$20        ; set A long
.3904f4	a2 00 00	ldx #$0000	                LDX #0
.3904f7	a0 00 00	ldy #$0000	                LDY #0
.3904fa	22 12 09 39	jsl $390912	                JSL ILOCATE
.3904fe	c2 30		rep #$30	                REP #$30        ; set A&X long
.390500					greet
.390500	48		pha		                PHA             ; begin setdbr macro
.390501	08		php		                PHP
.390502	e2 20		sep #$20	                SEP #$20        ; set A short
.390504	a9 39		lda #$39	                LDA #`greet_msg
.390506	48		pha		                PHA
.390507	ab		plb		                PLB
.390508	28		plp		                PLP
.390509	68		pla		                PLA             ; end setdbr macro
.39050a	a2 e5 6b	ldx #$6be5	                LDX #<>greet_msg
.39050d	22 bc 06 39	jsl $3906bc	                JSL IPRINT       ; print the first line
.390511	22 84 0a 39	jsl $390a84	                JSL ICOLORFLAG  ; This is to set the Color Memory for the Logo
.390515	48		pha		                PHA             ; begin setdp macro
.390516	08		php		                PHP
.390517	c2 20		rep #$20	                REP #$20        ; set A long
.390519	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39051c	5b		tcd		                TCD
.39051d	28		plp		                PLP
.39051e	68		pla		                PLA             ; end setdp macro
.39051f	22 b4 10 38	jsl $3810b4	                JSL INITKEYBOARD ;
.390523	e2 20		sep #$20	                SEP #$20        ; set A short
.390525	c2 10		rep #$10	                REP #$10        ; set X long
.390527	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.390529	8f 00 f1 af	sta $aff100	                STA $AFF100
.39052d	a9 bf		lda #$bf	                LDA #$BF ; Channel Two - No Atteniation
.39052f	8f 00 f1 af	sta $aff100	                STA $AFF100
.390533	a9 df		lda #$df	                LDA #$DF ; Channel Two - No Atteniation
.390535	8f 00 f1 af	sta $aff100	                STA $AFF100
.390539	a9 ff		lda #$ff	                LDA #$FF ; Channel Two - No Atteniation
.39053b	8f 00 f1 af	sta $aff100	                STA $AFF100
.39053f	a9 83		lda #$83	                LDA #$83 ; Channel Zero - No Atteniation
.390541	8f 00 f1 af	sta $aff100	                STA $AFF100
.390545	a9 12		lda #$12	                LDA #$12 ; Channel Zero - No Atteniation
.390547	8f 00 f1 af	sta $aff100	                STA $AFF100
.39054b	a9 90		lda #$90	                LDA #$90 ; Channel One - No Atteniation
.39054d	8f 00 f1 af	sta $aff100	                STA $AFF100
.390551	a2 00 40	ldx #$4000	                LDX #16384      ; 400ms
.390554	22 01 15 39	jsl $391501	          		 	JSL ILOOP_MS
.390558	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.39055a	8f 00 f1 af	sta $aff100	                STA $AFF100
.39055e	58		cli		                CLI                   ; Make sure no Interrupt will come and fuck up Init before this point.
.39055f	e2 20		sep #$20	                SEP #$20        ; set A short
.390561	c2 10		rep #$10	                REP #$10        ; set X long
.390563	48		pha		                PHA             ; begin setdbr macro
.390564	08		php		                PHP
.390565	e2 20		sep #$20	                SEP #$20        ; set A short
.390567	a9 39		lda #$39	                LDA #`greet_msg
.390569	48		pha		                PHA
.39056a	ab		plb		                PLB
.39056b	28		plp		                PLP
.39056c	68		pla		                PLA             ; end setdbr macro
.39056d	a2 00 00	ldx #$0000	                LDX #0
.390570	bf 00 10 38	lda $381000,x	jmpcopy         LDA @l BOOT,X
.390574	9f 00 10 00	sta $001000,x	                STA @l $001000,X
.390578	e8		inx		                INX
.390579	e0 00 10	cpx #$1000	                CPX #$1000
.39057c	d0 f2		bne $390570	                BNE jmpcopy
.39057e	22 5c 43 39	jsl $39435c	retry_boot      JSL DOS_INIT          ; Initialize the "disc operating system"
.390582	22 46 60 39	jsl $396046	                JSL FDC_INIT
.390586	af 0e e8 af	lda $afe80e	                LDA @lDIP_BOOTMODE    ; {HD_INSTALLED, 5'b0_0000, BOOT_MODE[1], BOOT_MODE[0]}
.39058a	29 03		and #$03	                AND #%00000011        ; Look at the mode bits
.39058c	c9 00		cmp #$00	                CMP #DIP_BOOT_IDE     ; DIP set for IDE?
.39058e	f0 28		beq $3905b8	                BEQ BOOTIDE           ; Yes: Boot from the IDE
.390590	c9 01		cmp #$01	                CMP #DIP_BOOT_SDCARD  ; DIP set for SD card?
.390592	f0 0b		beq $39059f	                BEQ BOOTSDC           ; Yes: try to boot from the SD card
.390594	c9 02		cmp #$02	                CMP #DIP_BOOT_FLOPPY  ; DIP set for floppy?
.390596	f0 3a		beq $3905d2	                BEQ BOOTFLOPPY        ; Yes: try to boot from the floppy
.390598	5c 00 00 3a	jmp $3a0000	BOOTBASIC       JML BASIC             ; Cold start of the BASIC interpreter (or its replacement)
.39059c	ea		nop		CREDIT_LOCK     NOP
.39059d	80 fd		bra $39059c	                BRA CREDIT_LOCK
.39059f					BOOTSDC
.39059f	e2 20		sep #$20	                SEP #$20        ; set A short
.3905a1	a9 02		lda #$02	                LDA #BIOS_DEV_SD
.3905a3	8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3905a7	22 f6 43 39	jsl $3943f6	                JSL DOS_MOUNT         ; Mount the SDC
.3905ab	90 06		bcc $3905b3	                BCC sdc_error         ; Print an error message if couldn't get anything
.3905ad	22 85 45 39	jsl $394585	                JSL DOS_TESTBOOT      ; Try to boot from the SDC's MBR
.3905b1	80 e5		bra $390598	                BRA BOOTBASIC         ; If we couldn't fall, into BASIC
.3905b3	a2 c2 6f	ldx #$6fc2	sdc_error       LDX #<>sdc_err_boot   ; Print a message saying SD card booting is not implemented
.3905b6	80 39		bra $3905f1	                BRA PR_BOOT_ERROR
.3905b8					BOOTIDE
.3905b8	e2 20		sep #$20	                SEP #$20        ; set A short
.3905ba	a9 06		lda #$06	                LDA #BIOS_DEV_HD0
.3905bc	8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3905c0	22 f6 43 39	jsl $3943f6	                JSL DOS_MOUNT         ; Mount the IDE drive
.3905c4	90 07		bcc $3905cd	                BCC hdc_error         ; Print an error message if couldn't get anything
.3905c6	22 85 45 39	jsl $394585	                JSL DOS_TESTBOOT      ; Try to boot from the IDE's MBR
.3905ca	82 cb ff	brl $390598	                BRL BOOTBASIC         ; If we couldn't fall, into BASIC
.3905cd	a2 de 6f	ldx #$6fde	hdc_error       LDX #<>ide_err_boot   ; Print a message saying SD card booting is not implemented
.3905d0	80 1f		bra $3905f1	                BRA PR_BOOT_ERROR
.3905d2	a2 27 70	ldx #$7027	BOOTFLOPPY      LDX #<>fdc_boot
.3905d5	22 bc 06 39	jsl $3906bc	                JSL IPRINT
.3905d9	e2 20		sep #$20	                SEP #$20        ; set A short
.3905db	a9 00		lda #$00	                LDA #BIOS_DEV_FDC
.3905dd	8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3905e1	22 d4 65 39	jsl $3965d4	                JSL FDC_MOUNT         ; Mount the floppy drive
.3905e5	90 07		bcc $3905ee	                BCC fdc_error         ; Print an error message if couldn't get anything
.3905e7	22 85 45 39	jsl $394585	                JSL DOS_TESTBOOT      ; Try to boot from the FDC's MBR
.3905eb	82 aa ff	brl $390598	                BRL BOOTBASIC         ; If we couldn't, fall into BASIC
.3905ee	a2 01 70	ldx #$7001	fdc_error       LDX #<>fdc_err_boot   ; Print a message saying SD card booting is not implemented
.3905f1	22 bc 06 39	jsl $3906bc	PR_BOOT_ERROR   JSL IPRINT            ; Print the error message in X
.3905f5	a2 9d 6f	ldx #$6f9d	                LDX #<>boot_retry     ; Print the boot retry prompt
.3905f8	22 bc 06 39	jsl $3906bc	                JSL IPRINT
.3905fc	22 95 06 39	jsl $390695	boot_wait_key   JSL IGETCHW           ; Wait for a keypress
.390600	c9 52		cmp #$52	                CMP #'R'              ; Was "R" pressed?
.390602	d0 03		bne $390607	                BNE chk_r_lc
.390604	82 77 ff	brl $39057e	                BRL retry_boot        ; Yes: retry the boot sequence
.390607	c9 72		cmp #$72	chk_r_lc        CMP #'r'
.390609	d0 03		bne $39060e	                BNE chk_b_lc
.39060b	82 70 ff	brl $39057e	                BRL retry_boot
.39060e	c9 62		cmp #$62	chk_b_lc        CMP #'b'              ; Was "B" pressed?
.390610	f0 86		beq $390598	                BEQ BOOTBASIC         ; Yes: try going to BASIC
.390612	c9 42		cmp #$42	                CMP #'B'
.390614	f0 82		beq $390598	                BEQ BOOTBASIC
.390616	80 e4		bra $3905fc	                BRA boot_wait_key     ; No: keep waiting
.390618					IBREAK
.390618	48		pha		                PHA             ; begin setdp macro
.390619	08		php		                PHP
.39061a	c2 20		rep #$20	                REP #$20        ; set A long
.39061c	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39061f	5b		tcd		                TCD
.390620	28		plp		                PLP
.390621	68		pla		                PLA             ; end setdp macro
.390622	68		pla		                PLA             ; Pull .Y and stuff it in the CPUY variable
.390623	8f 48 02 00	sta $000248	                STA CPUY
.390627	68		pla		                PLA             ; Pull .X and stuff it in the CPUY variable
.390628	8f 46 02 00	sta $000246	                STA CPUX
.39062c	68		pla		                PLA             ; Pull .A and stuff it in the CPUY variable
.39062d	8f 44 02 00	sta $000244	                STA CPUA
.390631	68		pla		                PLA
.390632	8f 4c 02 00	sta $00024c	                STA CPUDP       ; Pull Direct page
.390636	e2 20		sep #$20	                SEP #$20        ; set A short
.390638	68		pla		                PLA             ; Pull Data Bank (8 bits)
.390639	8f 4e 02 00	sta $00024e	                STA CPUDBR
.39063d	68		pla		                PLA             ; Pull Flags (8 bits)
.39063e	8f 4f 02 00	sta $00024f	                STA CPUFLAGS
.390642	c2 20		rep #$20	                REP #$20        ; set A long
.390644	68		pla		                PLA             ; Pull Program Counter (16 bits)
.390645	8f 40 02 00	sta $000240	                STA CPUPC
.390649	e2 20		sep #$20	                SEP #$20        ; set A short
.39064b	68		pla		                PLA             ; Pull Program Bank (8 bits)
.39064c	8f 42 02 00	sta $000242	                STA CPUPBR
.390650	c2 20		rep #$20	                REP #$20        ; set A long
.390652	3b		tsc		                TSA             ; Get the stack
.390653	8f 4a 02 00	sta $00024a	                STA CPUSTACK    ; Store the stack at immediately before the interrupt was asserted
.390657	a9 ff fe	lda #$feff	                LDA #<>STACK_END   ; initialize stack pointer back to the bootup value
.39065a	1b		tcs		                TAS
.39065b	5c 04 00 3a	jmp $3a0004	                JML MONITOR
.39065f					IREADY
.39065f	48		pha		                PHA             ; begin setdbr macro
.390660	08		php		                PHP
.390661	e2 20		sep #$20	                SEP #$20        ; set A short
.390663	a9 39		lda #$39	                LDA #`ready_msg
.390665	48		pha		                PHA
.390666	ab		plb		                PLB
.390667	28		plp		                PLP
.390668	68		pla		                PLA             ; end setdbr macro
.390669	e2 20		sep #$20	                SEP #$20        ; set A short
.39066b	a2 3e 70	ldx #$703e	                LDX #<>ready_msg
.39066e	22 bc 06 39	jsl $3906bc	                JSL IPRINT
.390672					IREADYWAIT
.390672	22 8c 06 39	jsl $39068c	                JSL IGETCHE
.390676	80 fa		bra $390672	                BRA IREADYWAIT
.390678	db		stp		IKEYDOWN        STP             ; Keyboard key pressed
.390679	db		stp		IRETURN         STP
.39067a	08		php		ISETIN          PHP
.39067b	e2 20		sep #$20	                SEP #$20        ; set A short
.39067d	8f 04 07 00	sta $000704	                STA @lCHAN_IN   ; Save the channel number
.390681	28		plp		                PLP
.390682	6b		rtl		                RTL
.390683	08		php		ISETOUT         PHP
.390684	e2 20		sep #$20	                SEP #$20        ; set A short
.390686	8f 03 07 00	sta $000703	                STA @lCHAN_OUT  ; Save the channel number
.39068a	28		plp		                PLP
.39068b	6b		rtl		                RTL
.39068c	22 95 06 39	jsl $390695	IGETCHE         JSL IGETCHW
.390690	22 dc 06 39	jsl $3906dc	                JSL IPUTC
.390694	6b		rtl		                RTL
.390695					IGETCHW
.390695	08		php		                PHP
.390696	e2 20		sep #$20	                SEP #$20        ; set A short
.390698	af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.39069c	f0 17		beq $3906b5	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.39069e	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.3906a0	f0 09		beq $3906ab	                BEQ getc_uart       ; Yes: handle reading from the UART
.3906a2	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.3906a4	f0 05		beq $3906ab	                BEQ getc_uart       ; Yes: handle reading from the UART
.3906a6	a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.3906a8	28		plp		                PLP
.3906a9	38		sec		                SEC                 ; And return carry set
.3906aa	6b		rtl		                RTL
.3906ab	22 fe 59 39	jsl $3959fe	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.3906af	22 b2 5a 39	jsl $395ab2	                JSL UART_GETC       ; Get the charater from the COM port
.3906b3	80 04		bra $3906b9	                BRA done
.3906b5	22 6c 14 38	jsl $38146c	getc_keyboard   JSL KBD_GETC        ; Get the character from the keyboard
.3906b9	28		plp		done            PLP
.3906ba	18		clc		                CLC                 ; Return carry clear for valid data
.3906bb	6b		rtl		                RTL
.3906bc	22 c5 06 39	jsl $3906c5	IPRINT          JSL IPUTS
.3906c0	22 0e 08 39	jsl $39080e	                JSL IPRINTCR
.3906c4	6b		rtl		                RTL
.3906c5	48		pha		IPUTS           PHA
.3906c6	08		php		                PHP
.3906c7	e2 20		sep #$20	                SEP #$20        ; set A short
.3906c9	c2 10		rep #$10	                REP #$10        ; set X long
.3906cb	bd 00 00	lda $390000,x	iputs1          LDA $0,b,x      ; read from the string
.3906ce	f0 08		beq $3906d8	                BEQ iputs_done
.3906d0	22 dc 06 39	jsl $3906dc	iputs2          JSL IPUTC
.3906d4	e8		inx		iputs3          INX
.3906d5	4c cb 06	jmp $3906cb	                JMP iputs1
.3906d8	e8		inx		iputs_done      INX
.3906d9	28		plp		                PLP
.3906da	68		pla		                PLA
.3906db	6b		rtl		                RTL
.3906dc					IPUTC
.3906dc	da		phx		                PHX
.3906dd	5a		phy		                PHY
.3906de	0b		phd		                PHD
.3906df	8b		phb		                PHB
.3906e0	08		php		                PHP                 ; stash the flags (we'll be changing M)
.3906e1	48		pha		                PHA             ; begin setdp macro
.3906e2	08		php		                PHP
.3906e3	c2 20		rep #$20	                REP #$20        ; set A long
.3906e5	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3906e8	5b		tcd		                TCD
.3906e9	28		plp		                PLP
.3906ea	68		pla		                PLA             ; end setdp macro
.3906eb	48		pha		                PHA             ; begin setdbr macro
.3906ec	08		php		                PHP
.3906ed	e2 20		sep #$20	                SEP #$20        ; set A short
.3906ef	a9 00		lda #$00	                LDA #0
.3906f1	48		pha		                PHA
.3906f2	ab		plb		                PLB
.3906f3	28		plp		                PLP
.3906f4	68		pla		                PLA             ; end setdbr macro
.3906f5	e2 20		sep #$20	                SEP #$20        ; set A short
.3906f7	c2 10		rep #$10	                REP #$10        ; set X long
.3906f9	48		pha		                PHA                 ; Save the character to print
.3906fa	af 03 07 00	lda $000703	                LDA @lCHAN_OUT      ; Check the output channel #
.3906fe	f0 16		beq $390716	                BEQ putc_screen     ; If it's 0: print to the screen
.390700	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.390702	f0 07		beq $39070b	                BEQ putc_uart       ; Yes: handle printing to the UART
.390704	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.390706	f0 03		beq $39070b	                BEQ putc_uart       ; Yes: handle printing to the UART
.390708	68		pla		                PLA                 ; Otherwise, just exit
.390709	80 4f		bra $39075a	                BRA done
.39070b	22 fe 59 39	jsl $3959fe	putc_uart       JSL UART_SELECT     ; Point to the correct UART
.39070f	68		pla		                PLA                 ; Recover the character to send
.390710	22 d3 5a 39	jsl $395ad3	                JSL UART_PUTC       ; Send the character
.390714	80 44		bra $39075a	                BRA done
.390716	68		pla		putc_screen     PLA                 ; Get the character to print
.390717	c9 0a		cmp #$0a	                CMP #CHAR_LF        ; Linefeed moves cursor down one line
.390719	f0 61		beq $39077c	                BEQ go_down
.39071b	c9 20		cmp #$20	                CMP #$20
.39071d	90 19		bcc $390738	                BCC check_ctrl0     ; [$00..$1F]: check for arrows
.39071f	c9 7f		cmp #$7f	                CMP #$7F
.390721	f0 3d		beq $390760	                BEQ do_del
.390723	b0 02		bcs $390727	                BCS check_A0        ; [$20..$7E]: print it
.390725	80 29		bra $390750	                BRA printc
.390727	c9 a0		cmp #$a0	check_A0        CMP #$A0
.390729	90 02		bcc $39072d	                BCC check_ctrl1
.39072b	80 23		bra $390750	                BRA printc          ; [$A0..$FF]: print it
.39072d	c9 91		cmp #$91	check_ctrl1     CMP #CHAR_DOWN      ; If the down arrow key was pressed
.39072f	f0 4b		beq $39077c	                BEQ go_down         ; ... move the cursor down one row
.390731	c9 9d		cmp #$9d	                CMP #CHAR_LEFT      ; If the left arrow key was pressed
.390733	f0 59		beq $39078e	                BEQ go_left         ; ... move the cursor left one column
.390735	4c 5a 07	jmp $39075a	                JMP done
.390738	c9 09		cmp #$09	check_ctrl0     CMP #CHAR_TAB       ; If it's a TAB...
.39073a	f0 58		beq $390794	                BEQ do_TAB          ; ... move to the next TAB stop
.39073c	c9 08		cmp #$08	                CMP #CHAR_BS        ; If it's a backspace...
.39073e	f0 2c		beq $39076c	                BEQ backspace       ; ... move the cursor back and replace with a space
.390740	c9 0d		cmp #$0d	                CMP #CHAR_CR        ; If the carriage return was pressed
.390742	f0 32		beq $390776	                BEQ do_cr           ; ... move cursor down and to the first column
.390744	c9 11		cmp #$11	                CMP #CHAR_UP        ; If the up arrow key was pressed
.390746	f0 3a		beq $390782	                BEQ go_up           ; ... move the cursor up one row
.390748	c9 1d		cmp #$1d	                CMP #CHAR_RIGHT     ; If the right arrow key was pressed
.39074a	f0 3c		beq $390788	                BEQ go_right        ; ... move the cursor right one column
.39074c	c9 0f		cmp #$0f	                CMP #CHAR_INS       ; If the insert key was pressed
.39074e	f0 16		beq $390766	                BEQ do_ins          ; ... insert a space
.390750	87 17		sta [$17]	printc          STA [CURSORPOS]     ; Save the character on the screen
.390752	a5 1e		lda $1e		                LDA CURCOLOR        ; Set the color based on CURCOLOR
.390754	87 1f		sta [$1f]	                STA [COLORPOS]
.390756	22 6e 08 39	jsl $39086e	                JSL ICSRRIGHT       ; And advance the cursor
.39075a	28		plp		done            PLP
.39075b	ab		plb		                PLB
.39075c	2b		pld		                PLD
.39075d	7a		ply		                PLY
.39075e	fa		plx		                PLX
.39075f	6b		rtl		                RTL
.390760	22 bb 07 39	jsl $3907bb	do_del          JSL SCRSHIFTLL      ; Shift the current line left one space into the cursor
.390764	80 f4		bra $39075a	                BRA done
.390766	22 df 07 39	jsl $3907df	do_ins          JSL SCRSHIFTLR      ; Shift the current line right one space from the cursor
.39076a	80 ee		bra $39075a	                BRA done
.39076c	22 a1 08 39	jsl $3908a1	backspace       JSL ICSRLEFT
.390770	22 bb 07 39	jsl $3907bb	                JSL SCRSHIFTLL      ; Shift the current line left one space into the cursor
.390774	80 e4		bra $39075a	                BRA done
.390776	22 0e 08 39	jsl $39080e	do_cr           JSL IPRINTCR        ; Move the cursor to the beginning of the next line
.39077a	80 de		bra $39075a	                BRA done
.39077c	22 ed 08 39	jsl $3908ed	go_down         JSL ICSRDOWN        ; Move the cursor down one row (might force a scroll)
.390780	80 d8		bra $39075a	                BRA done
.390782	22 c7 08 39	jsl $3908c7	go_up           JSL ICSRUP          ; Move the cursor up one line
.390786	80 d2		bra $39075a	                BRA done
.390788	22 6e 08 39	jsl $39086e	go_right        JSL ICSRRIGHT       ; Move the cursor right one column
.39078c	80 cc		bra $39075a	                BRA done
.39078e	22 a1 08 39	jsl $3908a1	go_left         JSL ICSRLEFT        ; Move the cursor left one column
.390792	80 c6		bra $39075a	                BRA done
.390794					do_TAB
.390794	c2 20		rep #$20	                REP #$20        ; set A long
.390796	a5 1a		lda $1a		                LDA CURSORX         ; Get the current column
.390798	29 f8 ff	and #$fff8	                AND #$FFF8          ; See which group of 8 it's in
.39079b	18		clc		                CLC
.39079c	69 08 00	adc #$0008	                ADC #$0008          ; And move it to the next one
.39079f	aa		tax		                TAX
.3907a0	a4 1c		ldy $1c		                LDY CURSORY
.3907a2	e2 20		sep #$20	                SEP #$20        ; set A short
.3907a4	e4 0f		cpx $0f		set_xy          CPX COLS_VISIBLE    ; Check if we're still on screen horizontally
.3907a6	90 04		bcc $3907ac	                BCC check_row       ; Yes: check the row
.3907a8	a2 00 00	ldx #$0000	                LDX #0              ; No: move to the first column...
.3907ab	c8		iny		                INY                 ; ... and the next row
.3907ac	c4 13		cpy $13		check_row       CPY LINES_VISIBLE   ; Check if we're still on the screen vertically
.3907ae	90 05		bcc $3907b5	                BCC do_locate       ; Yes: reposition the cursor
.3907b0	22 5e 09 39	jsl $39095e	                JSL ISCROLLUP       ; No: scroll the screen
.3907b4	88		dey		                DEY                 ; And set the row to the last one
.3907b5	22 12 09 39	jsl $390912	do_locate       JSL ILOCATE         ; Set the cursor position
.3907b9	80 9f		bra $39075a	                BRA done
.3907bb	da		phx		SCRSHIFTLL      PHX
.3907bc	5a		phy		                PHY
.3907bd	48		pha		                PHA
.3907be	0b		phd		                PHD
.3907bf	08		php		                PHP
.3907c0	48		pha		                PHA             ; begin setdp macro
.3907c1	08		php		                PHP
.3907c2	c2 20		rep #$20	                REP #$20        ; set A long
.3907c4	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3907c7	5b		tcd		                TCD
.3907c8	28		plp		                PLP
.3907c9	68		pla		                PLA             ; end setdp macro
.3907ca	c2 30		rep #$30	                REP #$30        ; set A&X long
.3907cc	a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.3907ce	a8		tay		                TAY                 ; Set it as the destination
.3907cf	aa		tax		                TAX
.3907d0	e8		inx		                INX                 ; And set the next cell as the source
.3907d1	38		sec		                SEC                 ; Calculate the length of the block to move
.3907d2	a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.3907d4	e5 1a		sbc $1a		                SBC CURSORX
.3907d6	54 af af	mvn $af,$af	                MVN $AF, $AF        ; And move the block
.3907d9	28		plp		                PLP
.3907da	2b		pld		                PLD
.3907db	68		pla		                PLA
.3907dc	7a		ply		                PLY
.3907dd	fa		plx		                PLX
.3907de	6b		rtl		                RTL
.3907df	da		phx		SCRSHIFTLR      PHX
.3907e0	48		pha		                PHA
.3907e1	0b		phd		                PHD
.3907e2	08		php		                PHP
.3907e3	48		pha		                PHA             ; begin setdp macro
.3907e4	08		php		                PHP
.3907e5	c2 20		rep #$20	                REP #$20        ; set A long
.3907e7	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3907ea	5b		tcd		                TCD
.3907eb	28		plp		                PLP
.3907ec	68		pla		                PLA             ; end setdp macro
.3907ed	c2 30		rep #$30	                REP #$30        ; set A&X long
.3907ef	a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.3907f1	29 80 ff	and #$ff80	                AND #$FF80          ; Mask off the column bits
.3907f4	09 7f 00	ora #$007f	                ORA #$007F          ; And compute the address of the last cell
.3907f7	a8		tay		                TAY                 ; And set that as the destination address
.3907f8	3a		dec a		                DEC A               ; Compute the address of the character to the left
.3907f9	aa		tax		                TAX                 ; And make it the source
.3907fa	38		sec		                SEC                 ; Calculate the length of the block to move
.3907fb	a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.3907fd	e5 1a		sbc $1a		                SBC CURSORX
.3907ff	44 af af	mvp $af,$af	                MVP $AF, $AF        ; And move the block
.390802	e2 20		sep #$20	                SEP #$20        ; set A short
.390804	a9 20		lda #$20	                LDA #CHAR_SP        ; Put a blank space at the cursor position
.390806	87 17		sta [$17]	                STA [CURSORPOS]
.390808	28		plp		                PLP
.390809	2b		pld		                PLD
.39080a	68		pla		                PLA
.39080b	fa		plx		                PLX
.39080c	6b		rtl		                RTL
.39080d					IPUTB
.39080d	6b		rtl		                RTL
.39080e					IPRINTCR
.39080e	da		phx		                PHX
.39080f	5a		phy		                PHY
.390810	8b		phb		                PHB
.390811	0b		phd		                PHD
.390812	08		php		                PHP
.390813	48		pha		                PHA             ; begin setdbr macro
.390814	08		php		                PHP
.390815	e2 20		sep #$20	                SEP #$20        ; set A short
.390817	a9 00		lda #$00	                LDA #0
.390819	48		pha		                PHA
.39081a	ab		plb		                PLB
.39081b	28		plp		                PLP
.39081c	68		pla		                PLA             ; end setdbr macro
.39081d	48		pha		                PHA             ; begin setdp macro
.39081e	08		php		                PHP
.39081f	c2 20		rep #$20	                REP #$20        ; set A long
.390821	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390824	5b		tcd		                TCD
.390825	28		plp		                PLP
.390826	68		pla		                PLA             ; end setdp macro
.390827	e2 20		sep #$20	                SEP #$20        ; set A short
.390829	c2 10		rep #$10	                REP #$10        ; set X long
.39082b	af 03 07 00	lda $000703	                LDA @lCHAN_OUT
.39082f	f0 1c		beq $39084d	                BEQ scr_printcr
.390831	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.390833	f0 06		beq $39083b	                BEQ uart_printcr    ; Yes: handle printing to the UART
.390835	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.390837	f0 02		beq $39083b	                BEQ uart_printcr    ; Yes: handle printing to the UART
.390839	80 1c		bra $390857	                BRA done
.39083b	22 fe 59 39	jsl $3959fe	uart_printcr    JSL UART_SELECT
.39083f	a9 0d		lda #$0d	                LDA #CHAR_CR
.390841	22 dc 06 39	jsl $3906dc	                JSL IPUTC
.390845	a9 0a		lda #$0a	                LDA #CHAR_LF
.390847	22 dc 06 39	jsl $3906dc	                JSL IPUTC
.39084b	80 0a		bra $390857	                BRA done
.39084d	a2 00 00	ldx #$0000	scr_printcr     LDX #0
.390850	a4 1c		ldy $1c		                LDY CURSORY
.390852	c8		iny		                INY
.390853	22 12 09 39	jsl $390912	                JSL ILOCATE
.390857	28		plp		done            PLP
.390858	2b		pld		                PLD
.390859	ab		plb		                PLB
.39085a	7a		ply		                PLY
.39085b	fa		plx		                PLX
.39085c	6b		rtl		                RTL
.39085d	da		phx		ICSRHOME        PHX
.39085e	5a		phy		                PHY
.39085f	08		php		                PHP
.390860	a2 00 00	ldx #$0000	                LDX #0
.390863	a0 00 00	ldy #$0000	                LDY #0
.390866	22 12 09 39	jsl $390912	                JSL ILOCATE
.39086a	28		plp		                PLP
.39086b	7a		ply		                PLY
.39086c	fa		plx		                PLX
.39086d	6b		rtl		                RTL
.39086e	da		phx		ICSRRIGHT       PHX
.39086f	5a		phy		                PHY
.390870	48		pha		                PHA
.390871	0b		phd		                PHD
.390872	08		php		                PHP
.390873	c2 20		rep #$20	                REP #$20        ; set A long
.390875	c2 10		rep #$10	                REP #$10        ; set X long
.390877	48		pha		                PHA             ; begin setdp macro
.390878	08		php		                PHP
.390879	c2 20		rep #$20	                REP #$20        ; set A long
.39087b	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.39087e	5b		tcd		                TCD
.39087f	28		plp		                PLP
.390880	68		pla		                PLA             ; end setdp macro
.390881	a6 1a		ldx $1a		                LDX CURSORX           ; Get the new column
.390883	e8		inx		                INX
.390884	a4 1c		ldy $1c		                LDY CURSORY           ; Get the current row
.390886	e4 0f		cpx $0f		                CPX COLS_VISIBLE      ; Are we off screen?
.390888	90 0d		bcc $390897	                BCC icsrright_nowrap  ; No: just set the position
.39088a	a2 00 00	ldx #$0000	                LDX #0                ; Yes: move to the first column
.39088d	c8		iny		                INY                   ; And move to the next row
.39088e	c4 13		cpy $13		                CPY LINES_VISIBLE     ; Are we still off screen?
.390890	90 05		bcc $390897	                BCC icsrright_nowrap  ; No: just set the position
.390892	88		dey		                DEY                   ; Yes: lock to the last row
.390893	22 5e 09 39	jsl $39095e	                JSL ISCROLLUP         ; But scroll the screen up
.390897					icsrright_nowrap
.390897	22 12 09 39	jsl $390912	                JSL ILOCATE           ; Set the cursor position
.39089b	28		plp		                PLP
.39089c	2b		pld		                PLD
.39089d	68		pla		                PLA
.39089e	7a		ply		                PLY
.39089f	fa		plx		                PLX
.3908a0	6b		rtl		                RTL
.3908a1					ICSRLEFT
.3908a1	da		phx		                PHX
.3908a2	5a		phy		                PHY
.3908a3	48		pha		                PHA
.3908a4	0b		phd		                PHD
.3908a5	08		php		                PHP
.3908a6	c2 30		rep #$30	                REP #$30        ; set A&X long
.3908a8	48		pha		                PHA             ; begin setdp macro
.3908a9	08		php		                PHP
.3908aa	c2 20		rep #$20	                REP #$20        ; set A long
.3908ac	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.3908af	5b		tcd		                TCD
.3908b0	28		plp		                PLP
.3908b1	68		pla		                PLA             ; end setdp macro
.3908b2	a5 1a		lda $1a		                LDA CURSORX
.3908b4	f0 0b		beq $3908c1	                BEQ icsrleft_done_already_zero ; Check that we are not already @ Zero
.3908b6	a6 1a		ldx $1a		                LDX CURSORX
.3908b8	ca		dex		                DEX
.3908b9	86 1a		stx $1a		                STX CURSORX
.3908bb	a4 1c		ldy $1c		                LDY CURSORY
.3908bd	22 12 09 39	jsl $390912	                JSL ILOCATE
.3908c1					icsrleft_done_already_zero
.3908c1	28		plp		                PLP
.3908c2	2b		pld		                PLD
.3908c3	68		pla		                PLA
.3908c4	7a		ply		                PLY
.3908c5	fa		plx		                PLX
.3908c6	6b		rtl		                RTL
.3908c7					ICSRUP
.3908c7	da		phx		                PHX
.3908c8	5a		phy		                PHY
.3908c9	48		pha		                PHA
.3908ca	0b		phd		                PHD
.3908cb	08		php		                PHP
.3908cc	c2 30		rep #$30	                REP #$30        ; set A&X long
.3908ce	48		pha		                PHA             ; begin setdp macro
.3908cf	08		php		                PHP
.3908d0	c2 20		rep #$20	                REP #$20        ; set A long
.3908d2	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.3908d5	5b		tcd		                TCD
.3908d6	28		plp		                PLP
.3908d7	68		pla		                PLA             ; end setdp macro
.3908d8	a5 1c		lda $1c		                LDA CURSORY
.3908da	f0 0b		beq $3908e7	                BEQ isrup_done_already_zero ; Check if we are not already @ Zero
.3908dc	a4 1c		ldy $1c		                LDY CURSORY
.3908de	88		dey		                DEY
.3908df	84 1c		sty $1c		                STY CURSORY
.3908e1	a6 1a		ldx $1a		                LDX CURSORX
.3908e3	22 12 09 39	jsl $390912	                JSL ILOCATE
.3908e7					isrup_done_already_zero
.3908e7	28		plp		                PLP
.3908e8	2b		pld		                PLD
.3908e9	68		pla		                PLA
.3908ea	7a		ply		                PLY
.3908eb	fa		plx		                PLX
.3908ec	6b		rtl		                RTL
.3908ed	da		phx		ICSRDOWN        PHX
.3908ee	5a		phy		                PHY
.3908ef	0b		phd		                PHD
.3908f0	c2 30		rep #$30	                REP #$30        ; set A&X long
.3908f2	48		pha		                PHA             ; begin setdp macro
.3908f3	08		php		                PHP
.3908f4	c2 20		rep #$20	                REP #$20        ; set A long
.3908f6	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.3908f9	5b		tcd		                TCD
.3908fa	28		plp		                PLP
.3908fb	68		pla		                PLA             ; end setdp macro
.3908fc	a6 1a		ldx $1a		                LDX CURSORX                 ; Get the current column
.3908fe	a4 1c		ldy $1c		                LDY CURSORY                 ; Get the new row
.390900	c8		iny		                INY
.390901	c4 13		cpy $13		                CPY LINES_VISIBLE           ; Check to see if we're off screen
.390903	90 05		bcc $39090a	                BCC icsrdown_noscroll       ; No: go ahead and set the position
.390905	88		dey		                DEY                         ; Yes: go back to the last row
.390906	22 5e 09 39	jsl $39095e	                JSL ISCROLLUP               ; But scroll the screen up
.39090a					icsrdown_noscroll
.39090a	22 12 09 39	jsl $390912	                JSL ILOCATE                 ; And set the cursor position
.39090e	2b		pld		                PLD
.39090f	7a		ply		                PLY
.390910	fa		plx		                PLX
.390911	6b		rtl		                RTL
.390912	48		pha		ILOCATE         PHA
.390913	0b		phd		                PHD
.390914	08		php		                PHP
.390915	48		pha		                PHA             ; begin setdp macro
.390916	08		php		                PHP
.390917	c2 20		rep #$20	                REP #$20        ; set A long
.390919	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39091c	5b		tcd		                TCD
.39091d	28		plp		                PLP
.39091e	68		pla		                PLA             ; end setdp macro
.39091f	c2 30		rep #$30	                REP #$30        ; set A&X long
.390921					ilocate_scroll
.390921	c4 13		cpy $13		                CPY LINES_VISIBLE
.390923	90 07		bcc $39092c	                BCC ilocate_scrolldone
.390925	22 5e 09 39	jsl $39095e	                JSL ISCROLLUP
.390929	88		dey		                DEY
.39092a	80 f5		bra $390921	                BRA ilocate_scroll
.39092c					ilocate_scrolldone
.39092c	86 1a		stx $1a		                STX CURSORX
.39092e	84 1c		sty $1c		                STY CURSORY
.390930	a5 0c		lda $0c		                LDA SCREENBEGIN
.390932					ilocate_row
.390932	c0 00 00	cpy #$0000	                CPY #$0
.390935	f0 08		beq $39093f	                BEQ ilocate_right
.390937	18		clc		ilocate_down    CLC
.390938	65 11		adc $11		                ADC COLS_PER_LINE
.39093a	88		dey		                DEY
.39093b	f0 02		beq $39093f	                BEQ ilocate_right
.39093d	80 f8		bra $390937	                BRA ilocate_down
.39093f	18		clc		ilocate_right   CLC
.390940	65 1a		adc $1a		                ADC CURSORX             ; move the cursor right X columns
.390942	85 17		sta $17		                STA CURSORPOS
.390944	a4 1c		ldy $1c		                LDY CURSORY
.390946	98		tya		                TYA
.390947	8f 16 00 af	sta $af0016	                STA @lVKY_TXT_CURSOR_Y_REG_L  ;Store in Vicky's registers
.39094b	8a		txa		                TXA
.39094c	8f 14 00 af	sta $af0014	                STA @lVKY_TXT_CURSOR_X_REG_L  ;Store in Vicky's register
.390950	c2 20		rep #$20	                REP #$20        ; set A long
.390952	18		clc		                CLC
.390953	a5 17		lda $17		                LDA CURSORPOS
.390955	69 00 20	adc #$2000	                ADC #<>(CS_COLOR_MEM_PTR - CS_TEXT_MEM_PTR)
.390958	85 1f		sta $1f		                STA COLORPOS
.39095a	28		plp		ilocate_done    PLP
.39095b	2b		pld		                PLD
.39095c	68		pla		                PLA
.39095d	6b		rtl		                RTL
.39095e					ISCROLLUP
.39095e	48		pha		                PHA
.39095f	da		phx		                PHX
.390960	5a		phy		                PHY
.390961	8b		phb		                PHB
.390962	0b		phd		                PHD
.390963	08		php		                PHP
.390964	48		pha		                PHA             ; begin setdp macro
.390965	08		php		                PHP
.390966	c2 20		rep #$20	                REP #$20        ; set A long
.390968	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39096b	5b		tcd		                TCD
.39096c	28		plp		                PLP
.39096d	68		pla		                PLA             ; end setdp macro
.39096e	c2 30		rep #$30	                REP #$30        ; set A&X long
.390970	a5 11		lda $11		                LDA COLS_PER_LINE
.390972	8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.390976	a5 13		lda $13		                LDA LINES_VISIBLE
.390978	8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.39097c	af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.390980	85 00		sta $00		                STA TMPPTR1
.390982	18		clc		                CLC
.390983	a9 00 a0	lda #$a000	                LDA #$A000
.390986	a8		tay		                TAY
.390987	65 11		adc $11		                ADC COLS_PER_LINE
.390989	aa		tax		                TAX
.39098a	a5 00		lda $00		                LDA TMPPTR1
.39098c	54 af af	mvn $af,$af	                MVN $AF,$AF
.39098f	c2 30		rep #$30	                REP #$30        ; set A&X long
.390991	18		clc		                CLC
.390992	a9 00 c0	lda #$c000	                LDA #$C000
.390995	a8		tay		                TAY
.390996	65 11		adc $11		                ADC COLS_PER_LINE
.390998	aa		tax		                TAX
.390999	a5 00		lda $00		                LDA TMPPTR1
.39099b	54 af af	mvn $af,$af	                MVN $AF,$AF
.39099e	a5 00		lda $00		                LDA TMPPTR1
.3909a0	48		pha		                PHA
.3909a1	18		clc		                CLC
.3909a2	69 00 a0	adc #$a000	                ADC #<>CS_TEXT_MEM_PTR
.3909a5	85 00		sta $00		                STA TMPPTR1
.3909a7	a0 00 00	ldy #$0000	                LDY #0
.3909aa	a9 20 00	lda #$0020	                LDA #' '
.3909ad	97 00		sta [$00],y	clr_text        STA [TMPPTR1],Y
.3909af	c8		iny		                INY
.3909b0	c4 0f		cpy $0f		                CPY COLS_VISIBLE
.3909b2	d0 f9		bne $3909ad	                BNE clr_text
.3909b4	68		pla		                PLA
.3909b5	18		clc		                CLC
.3909b6	69 00 c0	adc #$c000	                ADC #<>CS_COLOR_MEM_PTR
.3909b9	85 00		sta $00		                STA TMPPTR1
.3909bb	a0 00 00	ldy #$0000	                LDY #0
.3909be	a5 1e		lda $1e		                LDA CURCOLOR
.3909c0	97 00		sta [$00],y	clr_color       STA [TMPPTR1],Y
.3909c2	c8		iny		                INY
.3909c3	c4 0f		cpy $0f		                CPY COLS_VISIBLE
.3909c5	d0 f9		bne $3909c0	                BNE clr_color
.3909c7	28		plp		                PLP
.3909c8	2b		pld		                PLD
.3909c9	ab		plb		                PLB
.3909ca	7a		ply		                PLY
.3909cb	fa		plx		                PLX
.3909cc	68		pla		                PLA
.3909cd	6b		rtl		                RTL
.3909ce	08		php		IPRINTH         PHP
.3909cf	48		pha		                PHA
.3909d0					iprinth1
.3909d0	e2 20		sep #$20	                SEP #$20        ; set A short
.3909d2	bd 00 00	lda $0000,x	                LDA #0,b,x      ; Read the value to be printed
.3909d5	4a		lsr a		                LSR
.3909d6	4a		lsr a		                LSR
.3909d7	4a		lsr a		                LSR
.3909d8	4a		lsr a		                LSR
.3909d9	22 28 0a 39	jsl $390a28	                JSL iprint_digit
.3909dd	bd 00 00	lda $0000,x	                LDA #0,b,x
.3909e0	22 28 0a 39	jsl $390a28	                JSL iprint_digit
.3909e4	ca		dex		                DEX
.3909e5	88		dey		                DEY
.3909e6	d0 e8		bne $3909d0	                BNE iprinth1
.3909e8	68		pla		                PLA
.3909e9	28		plp		                PLP
.3909ea	6b		rtl		                RTL
.3909eb					IPRINTAH
.3909eb	48		pha		                PHA
.3909ec	08		php		                PHP
.3909ed	8f 44 02 00	sta $000244	                STA @lCPUA            ; Save A where we can use it multiple times
.3909f1	08		php		                PHP                   ; Get the processor status into A
.3909f2	e2 20		sep #$20	                SEP #$20        ; set A short
.3909f4	c2 10		rep #$10	                REP #$10        ; set X long
.3909f6	68		pla		                PLA
.3909f7	29 20		and #$20	                AND #%00100000        ; Is M = 1?
.3909f9	c9 20		cmp #$20	                CMP #%00100000
.3909fb	f0 14		beq $390a11	                BEQ eight_bit
.3909fd	af 46 02 00	lda $000246	                LDA @lCPUA+2          ; Get nibble [15..12]
.390a01	4a		lsr a		                LSR A
.390a02	4a		lsr a		                LSR A
.390a03	4a		lsr a		                LSR A
.390a04	4a		lsr a		                LSR A
.390a05	22 28 0a 39	jsl $390a28	                JSL iprint_digit      ; And print it
.390a09	af 46 02 00	lda $000246	                LDA @lCPUA+2          ; Get nibble [11..8]
.390a0d	22 28 0a 39	jsl $390a28	                JSL iprint_digit      ; And print it
.390a11	af 44 02 00	lda $000244	eight_bit       LDA @lCPUA            ; Get nibble [7..4]
.390a15	4a		lsr a		                LSR A
.390a16	4a		lsr a		                LSR A
.390a17	4a		lsr a		                LSR A
.390a18	4a		lsr a		                LSR A
.390a19	22 28 0a 39	jsl $390a28	                JSL iprint_digit      ; And print it
.390a1d	af 44 02 00	lda $000244	                LDA @lCPUA            ; Get nibble [3..0]
.390a21	22 28 0a 39	jsl $390a28	                JSL iprint_digit      ; And print it
.390a25	28		plp		                PLP
.390a26	68		pla		                PLA
.390a27	6b		rtl		                RTL
.390a28	da		phx		iprint_digit    PHX
.390a29	c2 20		rep #$20	                REP #$20        ; set A long
.390a2b	29 0f 00	and #$000f	                AND #$0F
.390a2e	aa		tax		                TAX
.390a2f	bf 52 70 39	lda $397052,x	                LDA hex_digits,X
.390a33	22 dc 06 39	jsl $3906dc	                JSL IPUTC       ; Print the digit
.390a37	fa		plx		                PLX
.390a38	6b		rtl		                RTL
.390a39	48		pha		ICLRSCREEN	    PHA
.390a3a	da		phx		                PHX
.390a3b	08		php		                PHP
.390a3c	e2 20		sep #$20	                SEP #$20        ; set A short
.390a3e	c2 10		rep #$10	                REP #$10        ; set X long
.390a40	a2 00 00	ldx #$0000	                LDX #$0000		          ; Only Use One Pointer
.390a43	a9 20		lda #$20	                LDA #$20		            ; Fill the Entire Screen with Space
.390a45	9f 00 a0 af	sta $afa000,x	iclearloop0	    STA CS_TEXT_MEM_PTR, x	;
.390a49	e8		inx		                inx
.390a4a	e0 00 20	cpx #$2000	                cpx #$2000
.390a4d	d0 f6		bne $390a45	                bne iclearloop0
.390a4f	a2 00 00	ldx #$0000	                LDX	#$0000		          ; Only Use One Pointer
.390a52	af 1e 00 00	lda $00001e	                LDA @lCURCOLOR          ; Fill the Color Memory with the current color
.390a56	9f 00 c0 af	sta $afc000,x	iclearloop1	    STA CS_COLOR_MEM_PTR, x	;
.390a5a	e8		inx		                inx
.390a5b	e0 00 20	cpx #$2000	                cpx #$2000
.390a5e	d0 f6		bne $390a56	                bne iclearloop1
.390a60	28		plp		                PLP
.390a61	fa		plx		                PLX
.390a62	68		pla		                PLA
.390a63	6b		rtl		                RTL
.390a64					COPYBYTES42
.390a64	08		php		                PHP
.390a65	0b		phd		                PHD
.390a66	48		pha		                PHA             ; begin setdp macro
.390a67	08		php		                PHP
.390a68	c2 20		rep #$20	                REP #$20        ; set A long
.390a6a	a9 00 00	lda #$0000	                LDA #TMPPTR1         ; set DP to page 0
.390a6d	5b		tcd		                TCD
.390a6e	28		plp		                PLP
.390a6f	68		pla		                PLA             ; end setdp macro
.390a70	e2 20		sep #$20	                SEP #$20        ; set A short
.390a72	c2 10		rep #$10	                REP #$10        ; set X long
.390a74	a0 00 00	ldy #$0000	                LDY #0
.390a77	b7 00		lda [$00],y	copy_loop       LDA [TMPPTR1],Y
.390a79	97 04		sta [$04],y	                STA [TMPPTR2],Y
.390a7b	c8		iny		                INY
.390a7c	c0 2a 00	cpy #$002a	                CPY #42
.390a7f	d0 f6		bne $390a77	                BNE copy_loop
.390a81	2b		pld		                PLD
.390a82	28		plp		                PLP
.390a83	60		rts		                RTS
.390a84					ICOLORFLAG
.390a84	48		pha		                PHA
.390a85	da		phx		                PHX
.390a86	5a		phy		                PHY
.390a87	08		php		                PHP
.390a88	8b		phb		                PHB
.390a89	0b		phd		                PHD
.390a8a	48		pha		                PHA             ; begin setdp macro
.390a8b	08		php		                PHP
.390a8c	c2 20		rep #$20	                REP #$20        ; set A long
.390a8e	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390a91	5b		tcd		                TCD
.390a92	28		plp		                PLP
.390a93	68		pla		                PLA             ; end setdp macro
.390a94	c2 30		rep #$30	                REP #$30        ; set A&X long
.390a96	a9 00 c0	lda #$c000	                LDA #<>CS_COLOR_MEM_PTR
.390a99	85 04		sta $04		                STA TMPPTR2
.390a9b	a9 af 00	lda #$00af	                LDA #`CS_COLOR_MEM_PTR
.390a9e	85 06		sta $06		                STA TMPPTR2+2
.390aa0	a9 29 6d	lda #$6d29	                LDA #<>greet_clr_line1
.390aa3	85 00		sta $00		                STA TMPPTR1
.390aa5	a9 39 00	lda #$0039	                LDA #`greet_clr_line1
.390aa8	85 02		sta $02		                STA TMPPTR1+2
.390aaa	20 64 0a	jsr $390a64	                JSR COPYBYTES42
.390aad	18		clc		                CLC
.390aae	a5 04		lda $04		                LDA TMPPTR2
.390ab0	65 11		adc $11		                ADC COLS_PER_LINE
.390ab2	85 04		sta $04		                STA TMPPTR2
.390ab4	a9 53 6d	lda #$6d53	                LDA #<>greet_clr_line2
.390ab7	85 00		sta $00		                STA TMPPTR1
.390ab9	a9 39 00	lda #$0039	                LDA #`greet_clr_line2
.390abc	85 02		sta $02		                STA TMPPTR1+2
.390abe	20 64 0a	jsr $390a64	                JSR COPYBYTES42
.390ac1	18		clc		                CLC
.390ac2	a5 04		lda $04		                LDA TMPPTR2
.390ac4	65 11		adc $11		                ADC COLS_PER_LINE
.390ac6	85 04		sta $04		                STA TMPPTR2
.390ac8	a9 7d 6d	lda #$6d7d	                LDA #<>greet_clr_line3
.390acb	85 00		sta $00		                STA TMPPTR1
.390acd	a9 39 00	lda #$0039	                LDA #`greet_clr_line3
.390ad0	85 02		sta $02		                STA TMPPTR1+2
.390ad2	20 64 0a	jsr $390a64	                JSR COPYBYTES42
.390ad5	18		clc		                CLC
.390ad6	a5 04		lda $04		                LDA TMPPTR2
.390ad8	65 11		adc $11		                ADC COLS_PER_LINE
.390ada	85 04		sta $04		                STA TMPPTR2
.390adc	a9 a7 6d	lda #$6da7	                LDA #<>greet_clr_line4
.390adf	85 00		sta $00		                STA TMPPTR1
.390ae1	a9 39 00	lda #$0039	                LDA #`greet_clr_line4
.390ae4	85 02		sta $02		                STA TMPPTR1+2
.390ae6	20 64 0a	jsr $390a64	                JSR COPYBYTES42
.390ae9	18		clc		                CLC
.390aea	a5 04		lda $04		                LDA TMPPTR2
.390aec	65 11		adc $11		                ADC COLS_PER_LINE
.390aee	85 04		sta $04		                STA TMPPTR2
.390af0	a9 d1 6d	lda #$6dd1	                LDA #<>greet_clr_line5
.390af3	85 00		sta $00		                STA TMPPTR1
.390af5	a9 39 00	lda #$0039	                LDA #`greet_clr_line5
.390af8	85 02		sta $02		                STA TMPPTR1+2
.390afa	20 64 0a	jsr $390a64	                JSR COPYBYTES42
.390afd	2b		pld		                PLD
.390afe	ab		plb		                PLB
.390aff	28		plp		                PLP
.390b00	7a		ply		                PLY
.390b01	fa		plx		                PLX
.390b02	68		pla		                PLA
.390b03	6b		rtl		                RTL
.390b04	0b		phd		IINITCHLUT		  PHD
.390b05	08		php		                PHP
.390b06	48		pha		                PHA
.390b07	da		phx		                PHX
.390b08	e2 20		sep #$20	                SEP #$20        ; set A short
.390b0a	e2 10		sep #$10	                SEP #$10        ; set X short
.390b0c	a2 00		ldx #$00					        LDX	#$00
.390b0e	bf fb 6d 39	lda $396dfb,x	lutinitloop0	  LDA @lfg_color_lut,x		; get Local Data
.390b12	9f 40 1f af	sta $af1f40,x	                STA FG_CHAR_LUT_PTR,x	; Write in LUT Memory
.390b16	e8		inx		                inx
.390b17	e0 40		cpx #$40	                cpx #$40
.390b19	d0 f3		bne $390b0e	                bne lutinitloop0
.390b1b	a2 00		ldx #$00	                LDX	#$00
.390b1d	bf 3b 6e 39	lda $396e3b,x	lutinitloop1	  LDA @lbg_color_lut,x		; get Local Data
.390b21	9f 80 1f af	sta $af1f80,x	                STA BG_CHAR_LUT_PTR,x	; Write in LUT Memory
.390b25	e8		inx		                INX
.390b26	e0 40		cpx #$40	                CPX #$40
.390b28	d0 f3		bne $390b1d	                bne lutinitloop1
.390b2a	c2 20		rep #$20	                REP #$20        ; set A long
.390b2c	c2 10		rep #$10	                REP #$10        ; set X long
.390b2e	fa		plx		                PLX
.390b2f	68		pla		                PLA
.390b30	28		plp		                PLP
.390b31	2b		pld		                PLD
.390b32	6b		rtl		                RTL
.390b33					IINITGAMMATABLE
.390b33	e2 20		sep #$20	                SEP #$20        ; set A short
.390b35	c2 10		rep #$10	                REP #$10        ; set X long
.390b37	a2 00 00	ldx #$0000	                ldx #$0000
.390b3a	bf 00 75 39	lda $397500,x	initgammaloop   LDA GAMMA_1_8_Tbl, x
.390b3e	9f 00 40 af	sta $af4000,x	                STA GAMMA_B_LUT_PTR, x
.390b42	9f 00 41 af	sta $af4100,x	                STA GAMMA_G_LUT_PTR, x
.390b46	9f 00 42 af	sta $af4200,x	                STA GAMMA_R_LUT_PTR, x
.390b4a	e8		inx		                inx
.390b4b	e0 00 01	cpx #$0100	                cpx #$0100
.390b4e	d0 ea		bne $390b3a	                bne initgammaloop
.390b50	c2 30		rep #$30	                REP #$30        ; set A&X long
.390b52	6b		rtl		                RTL
.390b53	48		pha		IINITALLLUT     PHA
.390b54	da		phx		                PHX
.390b55	a2 00 00	ldx #$0000	                LDX #$0000
.390b58	e2 20		sep #$20	                SEP #$20        ; set A short
.390b5a	a9 00		lda #$00	                LDA #$00
.390b5c	85 0a		sta $0a		                STA $0A     ; Temp Location
.390b5e					iinit_lut_loop
.390b5e	86 02		stx $02		                STX $02
.390b60	a6 0a		ldx $0a		                LDX $0A
.390b62	bf 00 74 39	lda $397400,x	                LDA GAMMA_2_2_Tbl, x
.390b66	49 55		eor #$55	                EOR  #$55
.390b68	a6 02		ldx $02		                LDX $02
.390b6a	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390b6e	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390b72	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390b76	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390b7a	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390b7e	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390b82	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390b86	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390b8a	e8		inx		                inx
.390b8b	86 02		stx $02		                STX $02
.390b8d	a6 0a		ldx $0a		                LDX $0A
.390b8f	bf 00 76 39	lda $397600,x	                LDA RANDOM_LUT_Tbl, x
.390b93	a6 02		ldx $02		                LDX $02
.390b95	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390b99	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390b9d	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390ba1	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390ba5	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390ba9	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390bad	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390bb1	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390bb5	e8		inx		                inx
.390bb6	86 02		stx $02		                STX $02
.390bb8	a6 0a		ldx $0a		                LDX $0A
.390bba	bf 00 75 39	lda $397500,x	                LDA GAMMA_1_8_Tbl, x
.390bbe	49 aa		eor #$aa	                EOR  #$AA
.390bc0	a6 02		ldx $02		                LDX $02
.390bc2	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390bc6	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390bca	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390bce	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390bd2	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390bd6	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390bda	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390bde	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390be2	e8		inx		                inx
.390be3	a9 ff		lda #$ff	                LDA #$FF
.390be5	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390be9	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390bed	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390bf1	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390bf5	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390bf9	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390bfd	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390c01	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390c05	e6 0a		inc $0a		                inc $0A
.390c07	e8		inx		                inx
.390c08	e0 00 04	cpx #$0400	                cpx #$0400
.390c0b	f0 03		beq $390c10	                beq iinit_lut_exit
.390c0d	82 4e ff	brl $390b5e	                brl iinit_lut_loop
.390c10					iinit_lut_exit
.390c10	c2 30		rep #$30	                REP #$30        ; set A&X long
.390c12	fa		plx		                PLX
.390c13	68		pla		                PLA
.390c14	6b		rtl		                RTL
.390c15	48		pha		IINITVKYTXTMODE PHA
.390c16	08		php		                PHP
.390c17	e2 20		sep #$20	                SEP #$20        ; set A short
.390c19	a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En       ; Okay, this Enables the Text Mode (Video Display)
.390c1b	8f 00 00 af	sta $af0000	                STA MASTER_CTRL_REG_L
.390c1f	a9 00		lda #$00	                LDA #0                            ; 640x480 mode (80 columns max)
.390c21	8f 01 00 af	sta $af0001	                STA @lMASTER_CTRL_REG_H
.390c25	a9 20		lda #$20	                LDA #$20
.390c27	8f 05 00 af	sta $af0005	                STA BORDER_COLOR_B
.390c2b	8f 07 00 af	sta $af0007	                STA BORDER_COLOR_R
.390c2f	a9 00		lda #$00	                LDA #$00
.390c31	8f 06 00 af	sta $af0006	                STA BORDER_COLOR_G
.390c35	a9 01		lda #$01	                LDA #Border_Ctrl_Enable           ; Enable the Border
.390c37	8f 04 00 af	sta $af0004	                STA BORDER_CTRL_REG
.390c3b	a9 20		lda #$20	                LDA #32                           ; Set the border to the standard 32 pixels
.390c3d	8f 08 00 af	sta $af0008	                STA BORDER_X_SIZE
.390c41	8f 09 00 af	sta $af0009	                STA BORDER_Y_SIZE
.390c45	c2 30		rep #$30	                REP #$30        ; set A&X long
.390c47	22 4e 0c 39	jsl $390c4e	                JSL ISETSIZES                     ; Calculate the size of the text screen
.390c4b	28		plp		                PLP
.390c4c	68		pla		                PLA
.390c4d	6b		rtl		                RTL
.390c4e					ISETSIZES
.390c4e	48		pha		                PHA
.390c4f	da		phx		                PHX
.390c50	5a		phy		                PHY
.390c51	8b		phb		                PHB
.390c52	0b		phd		                PHD
.390c53	08		php		                PHP
.390c54	48		pha		                PHA             ; begin setdp macro
.390c55	08		php		                PHP
.390c56	c2 20		rep #$20	                REP #$20        ; set A long
.390c58	a9 00 00	lda #$0000	                LDA #<>BANK0_BEGIN         ; set DP to page 0
.390c5b	5b		tcd		                TCD
.390c5c	28		plp		                PLP
.390c5d	68		pla		                PLA             ; end setdp macro
.390c5e	48		pha		                PHA             ; begin setdbr macro
.390c5f	08		php		                PHP
.390c60	e2 20		sep #$20	                SEP #$20        ; set A short
.390c62	a9 00		lda #$00	                LDA #0
.390c64	48		pha		                PHA
.390c65	ab		plb		                PLB
.390c66	28		plp		                PLP
.390c67	68		pla		                PLA             ; end setdbr macro
.390c68	e2 30		sep #$30	                SEP #$30        ; set A&X short
.390c6a	af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.390c6e	29 03		and #$03	                AND #$03                    ; Mask off the resolution bits
.390c70	0a		asl a		                ASL A
.390c71	aa		tax		                TAX                         ; Index to the col/line count in X
.390c72	c2 20		rep #$20	                REP #$20        ; set A long
.390c74	bf f1 0c 39	lda $390cf1,x	                LDA cols_by_res,X           ; Get the number of columns
.390c78	85 11		sta $11		                STA COLS_PER_LINE           ; This is how many columns there are per line in the memory
.390c7a	85 0f		sta $0f		                STA COLS_VISIBLE            ; This is how many would be visible with no border
.390c7c	bf f9 0c 39	lda $390cf9,x	                LDA lines_by_res,X          ; Get the number of lines
.390c80	85 15		sta $15		                STA LINES_MAX               ; This is the total number of lines in memory
.390c82	85 13		sta $13		                STA LINES_VISIBLE           ; This is how many lines would be visible with no border
.390c84	e2 20		sep #$20	                SEP #$20        ; set A short
.390c86	af 04 00 af	lda $af0004	                LDA @l BORDER_CTRL_REG      ; Check to see if we have a border
.390c8a	89 01		bit #$01	                BIT #Border_Ctrl_Enable
.390c8c	f0 5c		beq $390cea	                BEQ done                    ; No border... the sizes are correct now
.390c8e	af 08 00 af	lda $af0008	                LDA @l BORDER_X_SIZE        ; Get the horizontal border width
.390c92	29 3f		and #$3f	                AND #$3F
.390c94	89 03		bit #$03	                BIT #$03                    ; Check the lower two bits... indicates a partial column is eaten
.390c96	d0 04		bne $390c9c	                BNE frac_width
.390c98	4a		lsr a		                LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.390c99	4a		lsr a		                LSR A
.390c9a	80 03		bra $390c9f	                BRA store_width
.390c9c	4a		lsr a		frac_width      LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.390c9d	4a		lsr a		                LSR A                       ; because a column is partially hidden
.390c9e	1a		inc a		                INC A
.390c9f	85 00		sta $00		store_width     STA TMPPTR1
.390ca1	64 01		stz $01		                STZ TMPPTR1+1
.390ca3	e2 20		sep #$20	                SEP #$20        ; set A short
.390ca5	af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H    ; Check if we're pixel doubling
.390ca9	89 02		bit #$02	                BIT #Mstr_Ctrl_Video_Mode1
.390cab	f0 04		beq $390cb1	                BEQ adjust_width            ; No... just adjust the width of the screen
.390cad	c2 20		rep #$20	                REP #$20        ; set A long
.390caf	46 00		lsr $00		                LSR TMPPTR1                 ; Yes... cut the adjustment in half
.390cb1					adjust_width
.390cb1	c2 20		rep #$20	                REP #$20        ; set A long
.390cb3	38		sec		                SEC
.390cb4	a5 11		lda $11		                LDA COLS_PER_LINE
.390cb6	e5 00		sbc $00		                SBC TMPPTR1
.390cb8	85 0f		sta $0f		                STA COLS_VISIBLE
.390cba	af 09 00 af	lda $af0009	                LDA @l BORDER_Y_SIZE        ; Get the horizontal border width
.390cbe	29 3f 00	and #$003f	                AND #$3F
.390cc1	89 03 00	bit #$0003	                BIT #$03                    ; Check the lower two bits... indicates a partial column is eaten
.390cc4	d0 04		bne $390cca	                BNE frac_height
.390cc6	4a		lsr a		                LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.390cc7	4a		lsr a		                LSR A
.390cc8	80 03		bra $390ccd	                BRA store_height
.390cca	4a		lsr a		frac_height     LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.390ccb	4a		lsr a		                LSR A                       ; because a column is partially hidden
.390ccc	1a		inc a		                INC A
.390ccd	85 00		sta $00		store_height    STA TMPPTR1
.390ccf	64 01		stz $01		                STZ TMPPTR1+1
.390cd1	e2 20		sep #$20	                SEP #$20        ; set A short
.390cd3	af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H    ; Check if we're pixel doubling
.390cd7	89 02		bit #$02	                BIT #Mstr_Ctrl_Video_Mode1
.390cd9	f0 04		beq $390cdf	                BEQ adjust_height           ; No... just adjust the height of the screen
.390cdb	c2 20		rep #$20	                REP #$20        ; set A long
.390cdd	46 00		lsr $00		                LSR TMPPTR1                 ; Yes... cut the adjustment in half
.390cdf					adjust_height
.390cdf	c2 20		rep #$20	                REP #$20        ; set A long
.390ce1	38		sec		                SEC
.390ce2	a5 15		lda $15		                LDA LINES_MAX
.390ce4	e5 00		sbc $00		                SBC TMPPTR1
.390ce6	85 13		sta $13		                STA LINES_VISIBLE
.390ce8	c2 30		rep #$30	                REP #$30        ; set A&X long
.390cea	28		plp		done            PLP
.390ceb	2b		pld		                PLD
.390cec	ab		plb		                PLB
.390ced	7a		ply		                PLY
.390cee	fa		plx		                PLX
.390cef	68		pla		                PLA
.390cf0	6b		rtl		                RTL
>390cf1	50 00 64 00 28 00 32 00		cols_by_res     .word 80,100,40,50
>390cf9	3c 00 4b 00 1e 00 25 00		lines_by_res    .word 60,75,30,37
.390d01					IINITVKYGRPMODE
.390d01	48		pha		                PHA
.390d02	e2 20		sep #$20	                SEP #$20        ; set A short
.390d04	a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.390d06	8f 00 01 af	sta $af0100	                STA @lBM0_CONTROL_REG
.390d0a	a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.390d0c	8f 01 01 af	sta $af0101	                STA @lBM0_START_ADDY_L
.390d10	a9 c0		lda #$c0	                LDA #$C0
.390d12	8f 02 01 af	sta $af0102	                STA @lBM0_START_ADDY_M
.390d16	a9 00		lda #$00	                LDA #$00
.390d18	8f 03 01 af	sta $af0103	                STA @lBM0_START_ADDY_H ; This address is always base from
.390d1c	a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.390d1e	8f 08 01 af	sta $af0108	                STA @lBM1_CONTROL_REG
.390d22	a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.390d24	8f 09 01 af	sta $af0109	                STA @lBM1_START_ADDY_L
.390d28	a9 c0		lda #$c0	                LDA #$C0
.390d2a	8f 0a 01 af	sta $af010a	                STA @lBM1_START_ADDY_M
.390d2e	a9 00		lda #$00	                LDA #$00
.390d30	8f 0b 01 af	sta $af010b	                STA @lBM1_START_ADDY_H ; This address is always base from
.390d34	c2 30		rep #$30	                REP #$30        ; set A&X long
.390d36	68		pla		                PLA
.390d37	6b		rtl		                RTL
.390d38					IINITTILEMODE
.390d38	6b		rtl		                RTL
.390d39	48		pha		IINITSPRITE     PHA
.390d3a	e2 20		sep #$20	                SEP #$20        ; set A short
.390d3c	a9 03		lda #$03	                LDA #$03    ; Enable 17 Sprites
.390d3e	8f 00 02 af	sta $af0200	                STA SP00_CONTROL_REG
.390d42	8f 08 02 af	sta $af0208	                STA SP01_CONTROL_REG
.390d46	8f 10 02 af	sta $af0210	                STA SP02_CONTROL_REG
.390d4a	8f 18 02 af	sta $af0218	                STA SP03_CONTROL_REG
.390d4e	8f 20 02 af	sta $af0220	                STA SP04_CONTROL_REG
.390d52	8f 28 02 af	sta $af0228	                STA SP05_CONTROL_REG
.390d56	8f 30 02 af	sta $af0230	                STA SP06_CONTROL_REG
.390d5a	8f 38 02 af	sta $af0238	                STA SP07_CONTROL_REG
.390d5e	8f 40 02 af	sta $af0240	                STA SP08_CONTROL_REG
.390d62	8f 48 02 af	sta $af0248	                STA SP09_CONTROL_REG
.390d66	8f 50 02 af	sta $af0250	                STA SP10_CONTROL_REG
.390d6a	8f 58 02 af	sta $af0258	                STA SP11_CONTROL_REG
.390d6e	8f 60 02 af	sta $af0260	                STA SP12_CONTROL_REG
.390d72	8f 68 02 af	sta $af0268	                STA SP13_CONTROL_REG
.390d76	8f 70 02 af	sta $af0270	                STA SP14_CONTROL_REG
.390d7a	8f 78 02 af	sta $af0278	                STA SP15_CONTROL_REG
.390d7e	8f 80 02 af	sta $af0280	                STA SP16_CONTROL_REG
.390d82	a9 09		lda #$09	                LDA #$09
.390d84	8f 03 02 af	sta $af0203	                STA SP00_ADDY_PTR_H
.390d88	8f 0b 02 af	sta $af020b	                STA SP01_ADDY_PTR_H
.390d8c	8f 13 02 af	sta $af0213	                STA SP02_ADDY_PTR_H
.390d90	8f 1b 02 af	sta $af021b	                STA SP03_ADDY_PTR_H
.390d94	8f 23 02 af	sta $af0223	                STA SP04_ADDY_PTR_H
.390d98	8f 2b 02 af	sta $af022b	                STA SP05_ADDY_PTR_H
.390d9c	8f 33 02 af	sta $af0233	                STA SP06_ADDY_PTR_H
.390da0	8f 3b 02 af	sta $af023b	                STA SP07_ADDY_PTR_H
.390da4	8f 43 02 af	sta $af0243	                STA SP08_ADDY_PTR_H
.390da8	8f 4b 02 af	sta $af024b	                STA SP09_ADDY_PTR_H
.390dac	8f 53 02 af	sta $af0253	                STA SP10_ADDY_PTR_H
.390db0	8f 5b 02 af	sta $af025b	                STA SP11_ADDY_PTR_H
.390db4	8f 63 02 af	sta $af0263	                STA SP12_ADDY_PTR_H
.390db8	8f 6b 02 af	sta $af026b	                STA SP13_ADDY_PTR_H
.390dbc	8f 73 02 af	sta $af0273	                STA SP14_ADDY_PTR_H
.390dc0	8f 7b 02 af	sta $af027b	                STA SP15_ADDY_PTR_H
.390dc4	8f 83 02 af	sta $af0283	                STA SP16_ADDY_PTR_H
.390dc8	a9 00		lda #$00	                LDA #$00
.390dca	8f 02 02 af	sta $af0202	                STA SP00_ADDY_PTR_M
.390dce	a9 04		lda #$04	                LDA #$04
.390dd0	8f 0a 02 af	sta $af020a	                STA SP01_ADDY_PTR_M
.390dd4	a9 08		lda #$08	                LDA #$08
.390dd6	8f 12 02 af	sta $af0212	                STA SP02_ADDY_PTR_M
.390dda	a9 0c		lda #$0c	                LDA #$0C
.390ddc	8f 1a 02 af	sta $af021a	                STA SP03_ADDY_PTR_M
.390de0	a9 10		lda #$10	                LDA #$10
.390de2	8f 22 02 af	sta $af0222	                STA SP04_ADDY_PTR_M
.390de6	a9 14		lda #$14	                LDA #$14
.390de8	8f 2a 02 af	sta $af022a	                STA SP05_ADDY_PTR_M
.390dec	a9 18		lda #$18	                LDA #$18
.390dee	8f 32 02 af	sta $af0232	                STA SP06_ADDY_PTR_M
.390df2	a9 1c		lda #$1c	                LDA #$1C
.390df4	8f 3a 02 af	sta $af023a	                STA SP07_ADDY_PTR_M
.390df8	a9 20		lda #$20	                LDA #$20
.390dfa	8f 42 02 af	sta $af0242	                STA SP08_ADDY_PTR_M
.390dfe	a9 24		lda #$24	                LDA #$24
.390e00	8f 4a 02 af	sta $af024a	                STA SP09_ADDY_PTR_M
.390e04	a9 28		lda #$28	                LDA #$28
.390e06	8f 52 02 af	sta $af0252	                STA SP10_ADDY_PTR_M
.390e0a	a9 2c		lda #$2c	                LDA #$2C
.390e0c	8f 5a 02 af	sta $af025a	                STA SP11_ADDY_PTR_M
.390e10	a9 30		lda #$30	                LDA #$30
.390e12	8f 62 02 af	sta $af0262	                STA SP12_ADDY_PTR_M
.390e16	a9 34		lda #$34	                LDA #$34
.390e18	8f 6a 02 af	sta $af026a	                STA SP13_ADDY_PTR_M
.390e1c	a9 38		lda #$38	                LDA #$38
.390e1e	8f 72 02 af	sta $af0272	                STA SP14_ADDY_PTR_M
.390e22	a9 3c		lda #$3c	                LDA #$3C
.390e24	8f 7a 02 af	sta $af027a	                STA SP15_ADDY_PTR_M
.390e28	a9 40		lda #$40	                LDA #$40
.390e2a	8f 82 02 af	sta $af0282	                STA SP16_ADDY_PTR_M
.390e2e	a9 00		lda #$00	                LDA #$00
.390e30	8f 01 02 af	sta $af0201	                STA SP00_ADDY_PTR_L
.390e34	8f 09 02 af	sta $af0209	                STA SP01_ADDY_PTR_L
.390e38	8f 11 02 af	sta $af0211	                STA SP02_ADDY_PTR_L
.390e3c	8f 19 02 af	sta $af0219	                STA SP03_ADDY_PTR_L
.390e40	8f 21 02 af	sta $af0221	                STA SP04_ADDY_PTR_L
.390e44	8f 29 02 af	sta $af0229	                STA SP05_ADDY_PTR_L
.390e48	8f 31 02 af	sta $af0231	                STA SP06_ADDY_PTR_L
.390e4c	8f 39 02 af	sta $af0239	                STA SP07_ADDY_PTR_L
.390e50	8f 41 02 af	sta $af0241	                STA SP08_ADDY_PTR_L
.390e54	8f 49 02 af	sta $af0249	                STA SP09_ADDY_PTR_L
.390e58	8f 51 02 af	sta $af0251	                STA SP10_ADDY_PTR_L
.390e5c	8f 59 02 af	sta $af0259	                STA SP11_ADDY_PTR_L
.390e60	8f 61 02 af	sta $af0261	                STA SP12_ADDY_PTR_L
.390e64	8f 69 02 af	sta $af0269	                STA SP13_ADDY_PTR_L
.390e68	8f 71 02 af	sta $af0271	                STA SP14_ADDY_PTR_L
.390e6c	8f 79 02 af	sta $af0279	                STA SP15_ADDY_PTR_L
.390e70	8f 81 02 af	sta $af0281	                STA SP16_ADDY_PTR_L
.390e74	68		pla		                PLA
.390e75	6b		rtl		                RTL
.390e76					IINITFONTSET
.390e76	e2 20		sep #$20	                SEP #$20        ; set A short
.390e78	c2 10		rep #$10	                REP #$10        ; set X long
.390e7a	a2 00 00	ldx #$0000	                LDX #$0000
.390e7d					initFontsetbranch0
.390e7d	bf 00 f0 3f	lda $3ff000,x	                LDA @lFONT_4_BANK0,X    ; RAM Content
.390e81	9f 00 80 af	sta $af8000,x	                STA @lFONT_MEMORY_BANK0,X ; Vicky FONT RAM Bank
.390e85	e8		inx		                INX
.390e86	e0 00 08	cpx #$0800	                CPX #$0800
.390e89	d0 f2		bne $390e7d	                BNE initFontsetbranch0
.390e8b	ea		nop		                NOP
.390e8c	a2 00 00	ldx #$0000	                LDX #$0000
.390e8f					initFontsetbranch1
.390e8f	bf 00 f8 3f	lda $3ff800,x	                LDA @lFONT_4_BANK1,X
.390e93	9f 00 88 af	sta $af8800,x	                STA @lFONT_MEMORY_BANK1,X ; Vicky FONT RAM Bank
.390e97	e8		inx		                INX
.390e98	e0 00 08	cpx #$0800	                CPX #$0800
.390e9b	d0 f2		bne $390e8f	                BNE initFontsetbranch1
.390e9d	ea		nop		                NOP
.390e9e	c2 30		rep #$30	                REP #$30        ; set A&X long
.390ea0	6b		rtl		                RTL
.390ea1					INITMOUSEPOINTER
.390ea1	e2 20		sep #$20	                SEP #$20        ; set A short
.390ea3	c2 10		rep #$10	                REP #$10        ; set X long
.390ea5	a2 00 00	ldx #$0000	                LDX #$0000
.390ea8					FILL_MOUSE_MARKER
.390ea8	bf 00 77 39	lda $397700,x	                LDA @lMOUSE_POINTER_PTR,X
.390eac	9f 00 05 af	sta $af0500,x	                STA @lMOUSE_PTR_GRAP0_START, X
.390eb0	e8		inx		                INX
.390eb1	e0 00 01	cpx #$0100	                CPX #$0100
.390eb4	d0 f2		bne $390ea8	                BNE FILL_MOUSE_MARKER
.390eb6	ea		nop		                nop
.390eb7	a9 01		lda #$01	                LDA #$01
.390eb9	8f 00 07 af	sta $af0700	                STA @lMOUSE_PTR_CTRL_REG_L  ; Enable Mouse, Mouse Pointer Graphic Bank 0
.390ebd	c2 30		rep #$30	                REP #$30        ; set A&X long
.390ebf	6b		rtl		                RTL
.390ec0	48		pha		IINITCURSOR     PHA
.390ec1	e2 20		sep #$20	                SEP #$20        ; set A short
.390ec3	a9 b1		lda #$b1	                LDA #$B1      ;The Cursor Character will be a Fully Filled Block
.390ec5	8f 12 00 af	sta $af0012	                STA VKY_TXT_CURSOR_CHAR_REG
.390ec9	a9 03		lda #$03	                LDA #$03      ;Set Cursor Enable And Flash Rate @1Hz
.390ecb	8f 10 00 af	sta $af0010	                STA VKY_TXT_CURSOR_CTRL_REG ;
.390ecf	c2 30		rep #$30	                REP #$30        ; set A&X long
.390ed1	a9 00 00	lda #$0000	                LDA #$0000;
.390ed4	8f 14 00 af	sta $af0014	                STA VKY_TXT_CURSOR_X_REG_L; // Set the X to Position 1
.390ed8	a9 06 00	lda #$0006	                LDA #$0006;
.390edb	8f 16 00 af	sta $af0016	                STA VKY_TXT_CURSOR_Y_REG_L; // Set the Y to Position 6 (Below)
.390edf	68		pla		                PLA
.390ee0	6b		rtl		                RTL
.390ee1	0b		phd		IINITSUPERIO	  PHD
.390ee2	08		php		                PHP
.390ee3	48		pha		                PHA
.390ee4	e2 20		sep #$20	                SEP #$20        ; set A short
.390ee6	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390ee8	8f 23 11 af	sta $af1123	                STA GP10_REG
.390eec	af 23 11 af	lda $af1123	                LDA GP10_REG
.390ef0	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390ef2	8f 24 11 af	sta $af1124	                STA GP11_REG
.390ef6	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390ef8	8f 25 11 af	sta $af1125	                STA GP12_REG
.390efc	a9 01		lda #$01	        				LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390efe	8f 26 11 af	sta $af1126	        				STA GP13_REG
.390f02	a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BX) Bit[0] = 1, Bit[2] = 1
.390f04	8f 27 11 af	sta $af1127	        				STA GP14_REG
.390f08	a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BY) Bit[0] = 1, Bit[2] = 1
.390f0a	8f 28 11 af	sta $af1128	        				STA GP15_REG
.390f0e	a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BX) Bit[0] = 1, Bit[2] = 1
.390f10	8f 29 11 af	sta $af1129	        				STA GP16_REG
.390f14	a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BY) Bit[0] = 1, Bit[2] = 1
.390f16	8f 2a 11 af	sta $af112a	        				STA GP17_REG
.390f1a	a9 00		lda #$00	        				LDA #$00		;(C256 - HEADPHONE MUTE) - Output GPIO - Push-Pull (1 - Headphone On, 0 - HeadPhone Off)
.390f1c	8f 2b 11 af	sta $af112b	        				STA GP20_REG
.390f20	a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390f22	8f 2f 11 af	sta $af112f					        STA GP24_REG
.390f26	a9 05		lda #$05					        LDA #$05		;(C256 - MIDI IN) Bit[0] = 1, Bit[2] = 1 (Page 132 Manual)
.390f28	8f 30 11 af	sta $af1130					        STA GP25_REG
.390f2c	a9 84		lda #$84				        	LDA #$84		;(C256 - MIDI OUT) Bit[2] = 1, Bit[7] = 1 (Open Drain - To be Checked)
.390f2e	8f 31 11 af	sta $af1131					        STA GP26_REG
.390f32	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 1) Setup as GPIO Input for now
.390f34	8f 33 11 af	sta $af1133					        STA GP30_REG
.390f38	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 4) Setup as GPIO Input for now
.390f3a	8f 34 11 af	sta $af1134					        STA GP31_REG
.390f3e	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 3) Setup as GPIO Input for now
.390f40	8f 35 11 af	sta $af1135					        STA GP32_REG
.390f44	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 6) Setup as GPIO Input for now
.390f46	8f 36 11 af	sta $af1136					        STA GP33_REG
.390f4a	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 5) Setup as GPIO Input for now
.390f4c	8f 37 11 af	sta $af1137					        STA GP34_REG
.390f50	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 8) Setup as GPIO Input for now
.390f52	8f 38 11 af	sta $af1138					        STA GP35_REG
.390f56	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 7) Setup as GPIO Input for now
.390f58	8f 39 11 af	sta $af1139					        STA GP36_REG
.390f5c	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 10) Setup as GPIO Input for now
.390f5e	8f 3a 11 af	sta $af113a					        STA GP37_REG
.390f62	a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390f64	8f 3d 11 af	sta $af113d					        STA GP42_REG
.390f68	a9 01		lda #$01				          LDA #$01		;(C256 - INPUT PLL CLK INTERRUPT) Default Value - Will keep it as an input for now, no real usage for now
.390f6a	8f 3e 11 af	sta $af113e					        STA GP43_REG
.390f6e	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RI2) - Input - Set Secondary Function
.390f70	8f 3f 11 af	sta $af113f					        STA GP50_REG
.390f74	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DCD2) - Input - Set Secondary Function
.390f76	8f 40 11 af	sta $af1140					        STA GP51_REG
.390f7a	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RXD2) - Input - Set Secondary Function
.390f7c	8f 41 11 af	sta $af1141					        STA GP52_REG
.390f80	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - TXD2) - Output - Set Secondary Function
.390f82	8f 42 11 af	sta $af1142					        STA GP53_REG
.390f86	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DSR2) - Input - Set Secondary Function
.390f88	8f 43 11 af	sta $af1143					        STA GP54_REG
.390f8c	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - RTS2) - Output - Set Secondary Function
.390f8e	8f 44 11 af	sta $af1144					        STA GP55_REG
.390f92	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - CTS2) - Input - Set Secondary Function
.390f94	8f 45 11 af	sta $af1145					        STA GP56_REG
.390f98	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - DTR2) - Output - Set Secondary Function
.390f9a	8f 46 11 af	sta $af1146					        STA GP57_REG
.390f9e	a9 84		lda #$84					        LDA #$84		;(C256 - LED1) - Open Drain - Output
.390fa0	8f 47 11 af	sta $af1147					        STA GP60_REG
.390fa4	a9 84		lda #$84					        LDA #$84		;(C256 - LED2) - Open Drain - Output
.390fa6	8f 48 11 af	sta $af1148					        STA GP61_REG
.390faa	a9 00		lda #$00				        	LDA #$00		;GPIO Data Register (GP10..GP17) - Not Used
.390fac	8f 4b 11 af	sta $af114b					        STA GP1_REG
.390fb0	a9 01		lda #$01					        LDA #$01		;GPIO Data Register (GP20..GP27) - Bit[0] - Headphone Mute (Enabling it)
.390fb2	8f 4c 11 af	sta $af114c					        STA GP2_REG
.390fb6	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP30..GP37) - Since it is in Output mode, nothing to write here.
.390fb8	8f 4d 11 af	sta $af114d					        STA GP3_REG
.390fbc	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP40..GP47)  - Not Used
.390fbe	8f 4e 11 af	sta $af114e					        STA GP4_REG
.390fc2	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP50..GP57)  - Not Used
.390fc4	8f 4f 11 af	sta $af114f					        STA GP5_REG
.390fc8	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP60..GP61)  - Not Used
.390fca	8f 50 11 af	sta $af1150					        STA GP6_REG
.390fce	a9 01		lda #$01					        LDA #$01		;LED1 Output - Already setup by Vicky Init Phase, for now, I will leave it alone
.390fd0	8f 5d 11 af	sta $af115d					        STA LED1_REG
.390fd4	a9 02		lda #$02					        LDA #$02		;LED2 Output - However, I will setup this one, to make sure the Code works (Full On, when Code was ran)
.390fd6	8f 5e 11 af	sta $af115e					        STA LED2_REG
.390fda	c2 20		rep #$20	                REP #$20        ; set A long
.390fdc	68		pla		                PLA
.390fdd	28		plp						        PLP
.390fde	2b		pld					        	PLD
.390fdf	6b		rtl		                RTL
.390fe0	0b		phd		IINITKEYBOARD	  PHD
.390fe1	08		php						        PHP
.390fe2	48		pha						        PHA
.390fe3	da		phx						        PHX
.390fe4	e2 20		sep #$20	                SEP #$20        ; set A short
.390fe6	c2 10		rep #$10	                REP #$10        ; set X long
.390fe8	18		clc		                CLC
.390fe9	20 99 10	jsr $391099	                JSR Poll_Inbuf ;
.390fec	a9 aa		lda #$aa					        LDA #$AA			;Send self test command
.390fee	8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.390ff2	20 a4 10	jsr $3910a4	                JSR Poll_Outbuf ;
.390ff5	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Check self test result
.390ff9	c9 55		cmp #$55					        CMP #$55
.390ffb	f0 03		beq $391000					        BEQ	passAAtest
.390ffd	82 89 00	brl $391089	                BRL initkb_loop_out
.391000					passAAtest
.391000	a9 ab		lda #$ab					        LDA #$AB			;Send test Interface command
.391002	8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.391006	20 a4 10	jsr $3910a4	                JSR Poll_Outbuf ;
.391009	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Display Interface test results
.39100d	c9 00		cmp #$00					        CMP #$00			;Should be 00
.39100f	f0 03		beq $391014					        BEQ	passABtest
.391011	82 75 00	brl $391089	                BRL initkb_loop_out
.391014					passABtest
.391014	a9 60		lda #$60	                LDA #$60            ; Send Command 0x60 so to Enable Interrupt
.391016	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.39101a	20 99 10	jsr $391099	                JSR Poll_Inbuf ;
.39101d	a9 69		lda #$69	                LDA #%01101001      ; Enable Interrupt
.39101f	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.391023	20 99 10	jsr $391099	                JSR Poll_Inbuf ;
.391026	a9 ff		lda #$ff	                LDA #$FF      ; Send Keyboard Reset command
.391028	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.39102c	a2 ff ff	ldx #$ffff	                LDX #$FFFF
.39102f	ca		dex		DLY_LOOP1       DEX
.391030	ea		nop		                NOP
.391031	ea		nop		                NOP
.391032	ea		nop		                NOP
.391033	ea		nop		                NOP
.391034	ea		nop		                NOP
.391035	ea		nop		                NOP
.391036	ea		nop		                NOP
.391037	ea		nop		                NOP
.391038	e0 00 00	cpx #$0000	                CPX #$0000
.39103b	d0 f2		bne $39102f	                BNE DLY_LOOP1
.39103d	20 a4 10	jsr $3910a4	                JSR Poll_Outbuf ;
.391040	af 60 10 af	lda $af1060	                LDA KBD_OUT_BUF   ; Read Output Buffer
.391044					DO_CMD_F4_AGAIN
.391044	20 99 10	jsr $391099	                JSR Poll_Inbuf ;
.391047	a9 f4		lda #$f4					        LDA #$F4			; Enable the Keyboard
.391049	8f 60 10 af	sta $af1060					        STA KBD_DATA_BUF
.39104d	20 a4 10	jsr $3910a4	                JSR Poll_Outbuf ;
.391050	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		; Clear the Output buffer
.391054	c9 fa		cmp #$fa	                CMP #$FA
.391056	d0 ec		bne $391044	                BNE DO_CMD_F4_AGAIN
.391058	20 af 10	jsr $3910af	                JSR INIT_MOUSE
.39105b	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0  ; Read the Pending Register &
.39105f	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.391061	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0  ; Writing it back will clear the Active Bit
.391065	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1  ; Read the Pending Register &
.391069	29 01		and #$01	                AND #FNX1_INT00_KBD
.39106b	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1  ; Writing it back will clear the Active Bit
.39106f	af 4d 01 00	lda $00014d	                LDA @lINT_MASK_REG1
.391073	29 fe		and #$fe	                AND #~FNX1_INT00_KBD
.391075	8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.391079	af 4c 01 00	lda $00014c	                LDA @lINT_MASK_REG0
.39107d	29 7f		and #$7f	                AND #~FNX0_INT07_MOUSE
.39107f	8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.391083	a2 f7 6e	ldx #$6ef7	                LDX #<>Success_kb_init
.391086	38		sec		                SEC
.391087	b0 03		bcs $39108c	                BCS InitSuccess
.391089	a2 09 6f	ldx #$6f09	initkb_loop_out LDX #<>Failed_kb_init
.39108c	22 bc 06 39	jsl $3906bc	InitSuccess     JSL IPRINT       ; print Message
.391090	c2 20		rep #$20	                REP #$20        ; set A long
.391092	c2 10		rep #$10	                REP #$10        ; set X long
.391094	fa		plx		                PLX
.391095	68		pla		                PLA
.391096	28		plp						        PLP
.391097	2b		pld						        PLD
.391098	6b		rtl		                RTL
.391099					Poll_Inbuf
.391099	af 64 10 af	lda $af1064	                LDA STATUS_PORT		; Load Status Byte
.39109d	29 02		and #$02					        AND	#<INPT_BUF_FULL	; Test bit $02 (if 0, Empty)
.39109f	c9 02		cmp #$02					        CMP #<INPT_BUF_FULL
.3910a1	f0 f6		beq $391099					        BEQ Poll_Inbuf
.3910a3	60		rts		                RTS
.3910a4					Poll_Outbuf
.3910a4	af 64 10 af	lda $af1064	                LDA STATUS_PORT
.3910a8	29 01		and #$01	                AND #OUT_BUF_FULL ; Test bit $01 (if 1, Full)
.3910aa	c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.3910ac	d0 f6		bne $3910a4	                BNE Poll_Outbuf
.3910ae	60		rts		                RTS
.3910af					INIT_MOUSE
.3910af	20 99 10	jsr $391099	                JSR Poll_Inbuf
.3910b2	a9 a8		lda #$a8	                LDA #$A8          ; Enable the second PS2 Channel
.3910b4	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.3910b8					DO_CMD_A9_AGAIN
.3910b8	20 99 10	jsr $391099	                JSR Poll_Inbuf
.3910bb	a9 a9		lda #$a9	                LDA #$A9          ; Tests second PS2 Channel
.3910bd	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.3910c1	20 a4 10	jsr $3910a4	                JSR Poll_Outbuf ;
.3910c4	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		; Clear the Output buffer
.3910c8	c9 00		cmp #$00	                CMP #$00
.3910ca	d0 ec		bne $3910b8	                BNE DO_CMD_A9_AGAIN
.3910cc	20 99 10	jsr $391099	                JSR Poll_Inbuf
.3910cf	a9 20		lda #$20	                LDA #$20
.3910d1	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.3910d5	20 a4 10	jsr $3910a4	                JSR Poll_Outbuf ;
.3910d8	af 60 10 af	lda $af1060	                LDA KBD_OUT_BUF
.3910dc	09 02		ora #$02	                ORA #$02
.3910de	48		pha		                PHA
.3910df	20 99 10	jsr $391099	                JSR Poll_Inbuf
.3910e2	a9 60		lda #$60	                LDA #$60
.3910e4	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.3910e8	20 99 10	jsr $391099	                JSR Poll_Inbuf ;
.3910eb	68		pla		                PLA
.3910ec	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.3910f0	a9 f6		lda #$f6	                LDA #$F6        ;Tell the mouse to use default settings
.3910f2	20 15 11	jsr $391115	                JSR MOUSE_WRITE
.3910f5	20 28 11	jsr $391128	                JSR MOUSE_READ
.3910f8	a9 e8		lda #$e8	                LDA #$E8
.3910fa	20 15 11	jsr $391115	                JSR MOUSE_WRITE
.3910fd	20 28 11	jsr $391128	                JSR MOUSE_READ
.391100	a9 00		lda #$00	                LDA #$00
.391102	20 15 11	jsr $391115	                JSR MOUSE_WRITE
.391105	20 28 11	jsr $391128	                JSR MOUSE_READ
.391108	a9 f4		lda #$f4	                LDA #$F4        ; Enable the Mouse
.39110a	20 15 11	jsr $391115	                JSR MOUSE_WRITE
.39110d	20 28 11	jsr $391128	                JSR MOUSE_READ
.391110	a9 00		lda #$00	                LDA #$00
.391112	85 e0		sta $e0		                STA MOUSE_PTR
.391114	60		rts		                RTS
.391115					MOUSE_WRITE
.391115	48		pha		                PHA
.391116	20 99 10	jsr $391099	                JSR Poll_Inbuf
.391119	a9 d4		lda #$d4	                LDA #$D4
.39111b	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.39111f	20 99 10	jsr $391099	                JSR Poll_Inbuf
.391122	68		pla		                PLA
.391123	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.391127	60		rts		                RTS
.391128					MOUSE_READ
.391128	20 a4 10	jsr $3910a4	                JSR Poll_Outbuf ;
.39112b	af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF
.39112f	60		rts		                RTS
.391130	48		pha		INITRTC         PHA
.391131	08		php		                PHP
.391132	e2 20		sep #$20	                SEP #$20        ; set A short
.391134	a9 00		lda #$00	                LDA #0
.391136	8f 0b 08 af	sta $af080b	                STA @l RTC_RATES    ; Set watch dog timer and periodic interrupt rates to 0
.39113a	8f 0c 08 af	sta $af080c	                STA @l RTC_ENABLE   ; Disable all the alarms and interrupts
.39113e	af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL      ; Make sure the RTC will continue to tick in battery mode
.391142	09 04		ora #$04	                ORA #%00000100
.391144	8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.391148	28		plp		                PLP
.391149	68		pla		                PLA
.39114a	6b		rtl		                RTL
.39114b					ITESTSID
.39114b	a9 0f		lda #$0f	                LDA #$0F
.39114d	8f 18 e4 af	sta $afe418	                STA SID0_MODE_VOL
.391151	a9 be		lda #$be	                LDA #$BE
.391153	8f 05 e4 af	sta $afe405	                STA SID0_V1_ATCK_DECY
.391157	a9 f8		lda #$f8	                LDA #$F8
.391159	8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.39115d	a9 11		lda #$11	                LDA #$11
.39115f	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.391163	a9 25		lda #$25	                LDA #$25
.391165	8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.391169	a9 11		lda #$11	                LDA #$11
.39116b	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL
.39116f	a9 08		lda #$08	                LDA #$08
.391171	8f 03 e4 af	sta $afe403	                STA SID0_V1_PW_HI   ;G1
.391175	a9 00		lda #$00	                LDA #$00
.391177	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.39117b	a9 c6		lda #$c6	                LDA #$C6
.39117d	8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.391181	a9 08		lda #$08	                LDA #$08
.391183	8f 0a e4 af	sta $afe40a	                STA SID0_V2_PW_HI   ;G1
.391187	a9 00		lda #$00	                LDA #$00
.391189	8f 08 e4 af	sta $afe408	                STA SID0_V2_FREQ_HI
.39118d	a9 08		lda #$08	                LDA #$08
.39118f	8f 0c e4 af	sta $afe40c	                STA SID0_V2_ATCK_DECY
.391193	a9 c6		lda #$c6	                LDA #$C6
.391195	8f 0d e4 af	sta $afe40d	                STA SID0_V2_SSTN_RLSE
.391199	a9 08		lda #$08	                LDA #$08
.39119b	8f 11 e4 af	sta $afe411	                STA SID0_V3_PW_HI   ;G1
.39119f	a9 00		lda #$00	                LDA #$00
.3911a1	8f 0f e4 af	sta $afe40f	                STA SID0_V3_FREQ_HI
.3911a5	a9 08		lda #$08	                LDA #$08
.3911a7	8f 13 e4 af	sta $afe413	                STA SID0_V3_ATCK_DECY
.3911ab	a9 c6		lda #$c6	                LDA #$C6
.3911ad	8f 14 e4 af	sta $afe414	                STA SID0_V3_SSTN_RLSE
.3911b1	a9 36		lda #$36	                LDA #$36              ;Left Side (Rev A of Board)
.3911b3	8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.3911b7	a9 01		lda #$01	                LDA #$01
.3911b9	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI   ;G1
.3911bd	a9 00		lda #$00	                LDA #$00              ;Left Side (Rev A of Board)
.3911bf	8f 02 e4 af	sta $afe402	                STA SID0_V1_PW_LO
.3911c3	a9 08		lda #$08	                LDA #$08
.3911c5	8f 03 e4 af	sta $afe403	                STA SID0_V1_PW_HI   ;G1
.3911c9	a9 08		lda #$08	                LDA #$08
.3911cb	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL    ; Reset
.3911cf	a9 0c		lda #$0c	                LDA #$0C
.3911d1	8f 07 e4 af	sta $afe407	                STA SID0_V2_FREQ_LO
.3911d5	a9 04		lda #$04	                LDA #$04
.3911d7	8f 08 e4 af	sta $afe408	                STA SID0_V2_FREQ_HI   ;B1
.3911db	a9 00		lda #$00	                LDA #$00              ;Left Side (Rev A of Board)
.3911dd	8f 09 e4 af	sta $afe409	                STA SID0_V2_PW_LO
.3911e1	a9 08		lda #$08	                LDA #$08
.3911e3	8f 0a e4 af	sta $afe40a	                STA SID0_V2_PW_HI   ;G1
.3911e7	a9 08		lda #$08	                LDA #$08
.3911e9	8f 0b e4 af	sta $afe40b	                STA SID0_V2_CTRL    ; Reset
.3911ed	a9 00		lda #$00	                LDA #$00
.3911ef	8f 0e e4 af	sta $afe40e	                STA SID0_V3_FREQ_LO
.3911f3	a9 08		lda #$08	                LDA #$08
.3911f5	8f 0f e4 af	sta $afe40f	                STA SID0_V3_FREQ_HI   ;D
.3911f9	a9 00		lda #$00	                LDA #$00              ;Left Side (Rev A of Board)
.3911fb	8f 10 e4 af	sta $afe410	                STA SID0_V3_PW_LO
.3911ff	a9 08		lda #$08	                LDA #$08
.391201	8f 11 e4 af	sta $afe411	                STA SID0_V3_PW_HI   ;G1
.391205	a9 08		lda #$08	                LDA #$08
.391207	8f 12 e4 af	sta $afe412	                STA SID0_V3_CTRL    ; Reset
.39120b	a9 10		lda #$10	                LDA #$10
.39120d	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL    ; Triangle
.391211	8f 0b e4 af	sta $afe40b	                STA SID0_V2_CTRL    ; Triangle
.391215	8f 12 e4 af	sta $afe412	                STA SID0_V3_CTRL    ; Triangle
.391219	6b		rtl		                RTL
.39121a	48		pha		IINITCODEC      PHA
.39121b	c2 20		rep #$20	                REP #$20        ; set A long
.39121d	a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R13 - Turn On Headphones
.391220	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391224	a9 01 00	lda #$0001	                LDA #$0001
.391227	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.39122b	20 aa 12	jsr $3912aa	                JSR CODEC_TRF_FINISHED
.39122e	a9 0f 2a	lda #$2a0f	                LDA #%0010101000001111       ;R21 - Enable All the Analog In
.391231	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391235	a9 01 00	lda #$0001	                LDA #$0001
.391238	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.39123c	20 aa 12	jsr $3912aa	                JSR CODEC_TRF_FINISHED
.39123f	a9 01 23	lda #$2301	                LDA #%0010001100000001      ;R17 - Enable All the Analog In
.391242	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391246	a9 01 00	lda #$0001	                LDA #$0001
.391249	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.39124d	20 aa 12	jsr $3912aa	                JSR CODEC_TRF_FINISHED
.391250	a9 07 2c	lda #$2c07	                LDA #%0010110000000111      ;R22 - Enable all Analog Out
.391253	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391257	a9 01 00	lda #$0001	                LDA #$0001
.39125a	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.39125e	20 aa 12	jsr $3912aa	                JSR CODEC_TRF_FINISHED
.391261	a9 02 14	lda #$1402	                LDA #%0001010000000010      ;R10 - DAC Interface Control
.391264	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391268	a9 01 00	lda #$0001	                LDA #$0001
.39126b	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.39126f	20 aa 12	jsr $3912aa	                JSR CODEC_TRF_FINISHED
.391272	a9 02 16	lda #$1602	                LDA #%0001011000000010      ;R11 - ADC Interface Control
.391275	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391279	a9 01 00	lda #$0001	                LDA #$0001
.39127c	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391280	20 aa 12	jsr $3912aa	                JSR CODEC_TRF_FINISHED
.391283	a9 d5 19	lda #$19d5	                LDA #%0001100111010101      ;R12 - Master Mode Control
.391286	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39128a	a9 01 00	lda #$0001	                LDA #$0001
.39128d	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391291	20 aa 12	jsr $3912aa	                JSR CODEC_TRF_FINISHED
.391294	68		pla		                PLA
.391295	6b		rtl		                RTL
.391296					IRESETCODEC
.391296	c2 20		rep #$20	                REP #$20        ; set A long
.391298	a9 00 2e	lda #$2e00	                LDA #$2E00      ;R22 - Enable all Analog Out
.39129b	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39129f	a9 01 00	lda #$0001	                LDA #$0001
.3912a2	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.3912a6	20 aa 12	jsr $3912aa	                JSR CODEC_TRF_FINISHED
.3912a9	6b		rtl		                RTL
.3912aa					CODEC_TRF_FINISHED
.3912aa	e2 20		sep #$20	                SEP #$20        ; set A short
.3912ac	af 02 e9 af	lda $afe902	CODEC_LOOP      LDA CODEC_WR_CTRL
.3912b0	29 01		and #$01	                AND #$01
.3912b2	c9 01		cmp #$01	                CMP #$01
.3912b4	f0 f6		beq $3912ac	                BEQ CODEC_LOOP
.3912b6	c2 20		rep #$20	                REP #$20        ; set A long
.3912b8	60		rts		                RTS
.3912b9					IBM_FILL_SCREEN
.3912b9	c2 30		rep #$30	                REP #$30        ; set A&X long
.3912bb	a9 00 00	lda #$0000	                LDA #$0000
.3912be	a2 00 00	ldx #$0000	                LDX #$0000
.3912c1					BM_FILL_SCREEN_LOOPY
.3912c1	a0 00 00	ldy #$0000	                LDY #$0000
.3912c4	e2 20		sep #$20	                SEP #$20        ; set A short
.3912c6					BM_FILL_SCREEN_LOOPX
.3912c6	97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.3912c8	c8		iny		                INY
.3912c9	c4 40		cpy $40		                CPY BM_CLEAR_SCRN_X              ; Transfer the First line
.3912cb	d0 f9		bne $3912c6	                BNE BM_FILL_SCREEN_LOOPX
.3912cd	20 d8 12	jsr $3912d8	                JSR BM_FILL_COMPUTE_Y_DST
.3912d0	e8		inx		                INX
.3912d1	e4 42		cpx $42		                CPX BM_CLEAR_SCRN_Y
.3912d3	d0 ec		bne $3912c1	                BNE BM_FILL_SCREEN_LOOPY
.3912d5	c2 30		rep #$30	                REP #$30        ; set A&X long
.3912d7	6b		rtl		                RTL
.3912d8					BM_FILL_COMPUTE_Y_DST
.3912d8	c2 20		rep #$20	                REP #$20        ; set A long
.3912da	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR        ; Right now it is set @ $020000 (128K) + File Size
.3912dc	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3912e0	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2      ; Right now it is set @ $020000 (128K)
.3912e2	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.3912e6	a9 80 02	lda #$0280	                LDA #$280        ; Right now it is set @ $020000 (128K) + File Size
.3912e9	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.3912ed	a9 00 00	lda #$0000	                LDA #$0000
.3912f0	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.3912f4	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.3912f8	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.3912fa	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.3912fe	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.391300	a9 00 00	lda #$0000	                LDA #$0000
.391303	60		rts		                RTS
.391304					IBMP_PARSER
.391304	c2 30		rep #$30	                REP #$30        ; set A&X long
.391306	a0 00 00	ldy #$0000	                LDY #$0000
.391309	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y
.39130b	c9 42 4d	cmp #$4d42	                CMP #$4D42
.39130e	f0 03		beq $391313	                BEQ IBMP_PARSER_CONT
.391310	82 04 01	brl $391417	                BRL BMP_PARSER_END_WITH_ERROR
.391313					IBMP_PARSER_CONT
.391313	a0 02 00	ldy #$0002	                LDY #$0002
.391316	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size Low Short
.391318	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.39131c	a0 04 00	ldy #$0004	                LDY #$0004
.39131f	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size High Short
.391321	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.391325	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Store -1 in Adder (B)
.391328	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.39132c	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.391330	18		clc		                CLC
.391331	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.391335	85 50		sta $50		                STA BMP_FILE_SIZE
.391337	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.39133b	85 52		sta $52		                STA BMP_FILE_SIZE+2
.39133d	a0 12 00	ldy #$0012	                LDY #$0012
.391340	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.391342	85 40		sta $40		                STA BMP_X_SIZE
.391344	a0 16 00	ldy #$0016	                LDY #$0016
.391347	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.391349	85 42		sta $42		                STA BMP_Y_SIZE
.39134b	a0 2e 00	ldy #$002e	                LDY #$002E
.39134e	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.391350	0a		asl a		                ASL A; Multiply by 2
.391351	0a		asl a		                ASL A; Multiply by 2
.391352	85 4c		sta $4c		                STA BMP_COLOR_PALET         ;
.391354	e0 00 00	cpx #$0000	                CPX #$0000
.391357	d0 05		bne $39135e	                BNE BMP_LUT1_PICK
.391359	20 1f 14	jsr $39141f	                JSR BMP_PARSER_UPDATE_LUT0   ; Go Upload the LUT0
.39135c	80 08		bra $391366	                BRA DONE_TRANSFER_LUT;
.39135e					  BMP_LUT1_PICK
.39135e	e0 01 00	cpx #$0001	                CPX #$0001
.391361	d0 03		bne $391366	                BNE BMP_LUT2_PICK
.391363	20 4f 14	jsr $39144f	                JSR BMP_PARSER_UPDATE_LUT1   ; Go Upload the LUT1
.391366					  BMP_LUT2_PICK
.391366					  DONE_TRANSFER_LUT
.391366	a5 56		lda $56		                LDA BMP_POSITION_Y
.391368	8f 00 01 00	sta $000100	                STA @lUNSIGNED_MULT_A_LO
.39136c	a5 4e		lda $4e		                LDA SCRN_X_STRIDE
.39136e	8f 02 01 00	sta $000102	                STA @lUNSIGNED_MULT_B_LO
.391372	af 04 01 00	lda $000104	                LDA @lUNSIGNED_MULT_AL_LO
.391376	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.39137a	af 06 01 00	lda $000106	                LDA @lUNSIGNED_MULT_AL_LO+2
.39137e	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.391382	a5 54		lda $54		                LDA BMP_POSITION_X
.391384	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Put the X Position Adder (B)
.391388	a9 00 00	lda #$0000	                LDA #$0000
.39138b	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.39138f	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in TEMP
.391393	85 f0		sta $f0		                STA USER_TEMP
.391395	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in TEMP
.391399	85 f2		sta $f2		                STA USER_TEMP+2
.39139b	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.39139d	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.3913a1	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.3913a3	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.3913a7	a5 f0		lda $f0		                LDA USER_TEMP
.3913a9	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store in 32Bit Adder (B)
.3913ad	a5 f2		lda $f2		                LDA USER_TEMP+2
.3913af	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in 32Bit Adder (B)
.3913b3	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in BMP_PRSE_DST_PTR
.3913b7	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.3913b9	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in BMP_PRSE_DST_PTR
.3913bd	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.3913bf	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K)
.3913c1	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3913c5	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2        ; Right now it is set @ $020000 (128K)
.3913c7	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.3913cb	a5 50		lda $50		                LDA BMP_FILE_SIZE
.3913cd	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.3913d1	a5 52		lda $52		                LDA BMP_FILE_SIZE+2
.3913d3	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.3913d7	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.3913db	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.3913dd	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.3913e1	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.3913e3	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.3913e5	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3913e9	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.3913eb	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.3913ef	18		clc		                CLC
.3913f0	a5 40		lda $40		                LDA BMP_X_SIZE              ; Load The Size in X of the image and Make it negative
.3913f2	49 ff ff	eor #$ffff	                EOR #$FFFF                  ; Inverse all bit
.3913f5	69 01 00	adc #$0001	                ADC #$0001                  ; Add 0 ()
.3913f8	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store the Results in reg B of ADDER32
.3913fc	a9 ff ff	lda #$ffff	                LDA #$FFFF
.3913ff	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in the Reminder of the 32Bits B Register
.391403	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.391407	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.391409	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.39140d	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.39140f	20 7f 14	jsr $39147f	                JSR BMP_PARSER_DMA_SHIT_OUT  ; We are going to start with the slow method
.391412	a2 45 6f	ldx #$6f45	                LDX #<>bmp_parser_msg0
.391415	80 03		bra $39141a	                BRA BMP_PARSER_END_NO_ERROR
.391417					BMP_PARSER_END_WITH_ERROR
.391417	a2 31 6f	ldx #$6f31	                LDX #<>bmp_parser_err0
.39141a					BMP_PARSER_END_NO_ERROR
.39141a	22 bc 06 39	jsl $3906bc	                JSL IPRINT       ; print the first line
.39141e	6b		rtl		                RTL
.39141f					BMP_PARSER_UPDATE_LUT0
.39141f	38		sec		                SEC
.391420	a0 7a 00	ldy #$007a	                LDY #$007A
.391423	a2 00 00	ldx #$0000	                LDX #$0000
.391426	e2 20		sep #$20	                SEP #$20        ; set A short
.391428					BMP_PARSER_UPDATE_LOOP
.391428	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.39142a	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR+0, X      ; The look-up Table point to a pixel Blue
.39142e	c8		iny		                INY
.39142f	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.391431	9f 01 20 af	sta $af2001,x	                STA @lGRPH_LUT0_PTR+1, X      ; The look-up Table point to a pixel Blue
.391435	c8		iny		                INY
.391436	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.391438	9f 02 20 af	sta $af2002,x	                STA @lGRPH_LUT0_PTR+2, X      ; The look-up Table point to a pixel Blue
.39143c	c8		iny		                INY
.39143d	a9 80		lda #$80	                LDA #$80
.39143f	9f 03 20 af	sta $af2003,x	                STA @lGRPH_LUT0_PTR+3, X      ; The look-up Table point to a pixel Blue
.391443	c8		iny		                INY ; For the Alpha Value, nobody cares
.391444	e8		inx		                INX
.391445	e8		inx		                INX
.391446	e8		inx		                INX
.391447	e8		inx		                INX
.391448	e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.39144a	d0 dc		bne $391428	                BNE BMP_PARSER_UPDATE_LOOP
.39144c	c2 20		rep #$20	                REP #$20        ; set A long
.39144e	60		rts		                RTS
.39144f					BMP_PARSER_UPDATE_LUT1
.39144f	38		sec		                SEC
.391450	a0 36 00	ldy #$0036	                LDY #$0036
.391453	a2 00 00	ldx #$0000	                LDX #$0000
.391456	e2 20		sep #$20	                SEP #$20        ; set A short
.391458					PALETTE_LUT1_LOOP
.391458	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.39145a	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR+0, X      ; The look-up Table point to a pixel Blue
.39145e	c8		iny		                INY
.39145f	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.391461	9f 01 24 af	sta $af2401,x	                STA @lGRPH_LUT1_PTR+1, X      ; The look-up Table point to a pixel Blue
.391465	c8		iny		                INY
.391466	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.391468	9f 02 24 af	sta $af2402,x	                STA @lGRPH_LUT1_PTR+2, X      ; The look-up Table point to a pixel Blue
.39146c	c8		iny		                INY
.39146d	a9 80		lda #$80	                LDA #$80
.39146f	9f 03 24 af	sta $af2403,x	                STA @lGRPH_LUT1_PTR+3, X      ; The look-up Table point to a pixel Blue
.391473	c8		iny		                INY ; For the Alpha Value, nobody cares
.391474	e8		inx		                INX
.391475	e8		inx		                INX
.391476	e8		inx		                INX
.391477	e8		inx		                INX
.391478	e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.39147a	d0 dc		bne $391458	                BNE PALETTE_LUT1_LOOP
.39147c	c2 20		rep #$20	                REP #$20        ; set A long
.39147e	60		rts		                RTS
.39147f					BMP_PARSER_DMA_SHIT_OUT
.39147f	a2 00 00	ldx #$0000	                LDX #$0000
.391482					BMP_PARSER_LOOPY
.391482	a0 00 00	ldy #$0000	                LDY #$0000
.391485	e2 20		sep #$20	                SEP #$20        ; set A short
.391487					BMP_PARSER_LOOPX
.391487	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Load First Pixel Y (will be linear)
.391489	97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.39148b	c8		iny		                INY
.39148c	c4 40		cpy $40		                CPY BMP_X_SIZE              ; Transfer the First line
.39148e	d0 f7		bne $391487	                BNE BMP_PARSER_LOOPX
.391490	20 9c 14	jsr $39149c	                JSR BMP_PARSER_COMPUTE_Y_SRC
.391493	20 b7 14	jsr $3914b7	                JSR BMP_PARSER_COMPUTE_Y_DST
.391496	e8		inx		                INX
.391497	e4 42		cpx $42		                CPX BMP_Y_SIZE
.391499	d0 e7		bne $391482	                BNE BMP_PARSER_LOOPY
.39149b	60		rts		                RTS
.39149c					BMP_PARSER_COMPUTE_Y_SRC
.39149c	c2 20		rep #$20	                REP #$20        ; set A long
.39149e	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.3914a0	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3914a4	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.3914a6	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.3914aa	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.3914ae	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.3914b0	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.3914b4	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.3914b6	60		rts		                RTS
.3914b7					BMP_PARSER_COMPUTE_Y_DST
.3914b7	c2 20		rep #$20	                REP #$20        ; set A long
.3914b9	18		clc		                CLC
.3914ba	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.3914bc	65 4e		adc $4e		                ADC SCRN_X_STRIDE        ; In Normal Circumstances, it is 640
.3914be	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.3914c0	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.3914c2	69 00 00	adc #$0000	                ADC #$0000
.3914c5	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.3914c7	60		rts		                RTS
.3914c8	ea		nop		ILOOP           NOP
.3914c9	ea		nop		                NOP
.3914ca	ea		nop		                NOP
.3914cb	ea		nop		                NOP
.3914cc	ea		nop		                NOP
.3914cd	ea		nop		                NOP
.3914ce	ea		nop		                NOP
.3914cf	ea		nop		                NOP
.3914d0	ea		nop		                NOP
.3914d1	ea		nop		                NOP
.3914d2	6b		rtl		                RTL
.3914d3	22 c8 14 39	jsl $3914c8	ILOOP_1         JSL ILOOP
.3914d7	22 c8 14 39	jsl $3914c8	                JSL ILOOP
.3914db	22 c8 14 39	jsl $3914c8	                JSL ILOOP
.3914df	22 c8 14 39	jsl $3914c8	                JSL ILOOP
.3914e3	22 c8 14 39	jsl $3914c8	                JSL ILOOP
.3914e7	22 c8 14 39	jsl $3914c8	                JSL ILOOP
.3914eb	22 c8 14 39	jsl $3914c8	                JSL ILOOP
.3914ef	22 c8 14 39	jsl $3914c8	                JSL ILOOP
.3914f3	22 c8 14 39	jsl $3914c8	                JSL ILOOP
.3914f7	22 c8 14 39	jsl $3914c8	                JSL ILOOP
.3914fb	6b		rtl		                RTL
.3914fc	22 d3 14 39	jsl $3914d3	ILOOP_1MS       JSL ILOOP_1
.391500	6b		rtl		                RTL
.391501	e0 00 00	cpx #$0000	ILOOP_MS        CPX #0
.391504	f0 07		beq $39150d	                BEQ LOOP_MS_END
.391506	22 fc 14 39	jsl $3914fc	                JSL ILOOP_1MS
.39150a	ca		dex		                DEX
.39150b	80 f4		bra $391501	                BRA ILOOP_MS
.39150d	6b		rtl		LOOP_MS_END     RTL
.39150e					IDELAY
.39150e	8b		phb		                PHB
.39150f	08		php		                PHP
.391510	48		pha		                PHA             ; begin setdbr macro
.391511	08		php		                PHP
.391512	e2 20		sep #$20	                SEP #$20        ; set A short
.391514	a9 00		lda #$00	                LDA #0
.391516	48		pha		                PHA
.391517	ab		plb		                PLB
.391518	28		plp		                PLP
.391519	68		pla		                PLA             ; end setdbr macro
.39151a	e2 20		sep #$20	                SEP #$20        ; set A short
.39151c	a9 00		lda #$00	                LDA #0                      ; Stop the timer if it's running
.39151e	8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.391522	af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Enable Timer 0 Interrupts
.391526	29 fb		and #$fb	                AND #~FNX0_INT02_TMR0
.391528	8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.39152c	a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.39152e	8d 05 07	sta $0705	                STA @w TIMERFLAGS
.391531	a9 00		lda #$00	                LDA #0
.391533	8f 61 01 00	sta $000161	                STA @l TIMER0_CHARGE_L      ; Clear the comparator for count-down
.391537	8f 62 01 00	sta $000162	                STA @l TIMER0_CHARGE_M
.39153b	8f 63 01 00	sta $000163	                STA @l TIMER0_CHARGE_H
.39153f	c2 30		rep #$30	                REP #$30        ; set A&X long
.391541	8a		txa		                TXA
.391542	8f 65 01 00	sta $000165	                STA @l TIMER0_CMP_L         ; Set the number of ticks
.391546	98		tya		                TYA
.391547	e2 20		sep #$20	                SEP #$20        ; set A short
.391549	8f 67 01 00	sta $000167	                STA @l TIMER0_CMP_H
.39154d	a9 09		lda #$09	                LDA #TMR0_EN | TMR0_UPDWN   ; Enable the timer to count up
.39154f	8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.391553	a9 80		lda #$80	                LDA #TIMER0TRIGGER          ; Timer zero's trigger flag
.391555	cb		wai		loop            WAI                         ; Wait for an interrupt
.391556	1c 05 07	trb $0705	                TRB @w TIMERFLAGS           ; Check for the flag
.391559	f0 fa		beq $391555	                BEQ loop                    ; Keep checking until it's set
.39155b	a9 00		lda #$00	                LDA #0                      ; Stop the timer
.39155d	8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.391561	a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.391563	8d 05 07	sta $0705	                STA @w TIMERFLAGS
.391566	af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Disable Timer 0 Interrupts
.39156a	09 04		ora #$04	                ORA #FNX0_INT02_TMR0
.39156c	8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.391570	28		plp		                PLP
.391571	ab		plb		                PLB
.391572	6b		rtl		                RTL
.391573					SHOW_CREDITS
.391573	48		pha		                PHA
.391574	da		phx		                PHX
.391575	5a		phy		                PHY
.391576	08		php		                PHP
.391577	e2 20		sep #$20	                SEP #$20        ; set A short
.391579	c2 10		rep #$10	                REP #$10        ; set X long
.39157b	af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Disable the cursor
.39157f	29 fe		and #$fe	                AND #~Vky_Cursor_Enable
.391581	8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.391585	a2 00 00	ldx #$0000	                LDX #0
.391588	bf 00 00 3b	lda $3b0000,x	credit_loop     LDA @lCREDITS_TEXT,X            ; Copy a byte of text
.39158c	9f 00 a0 af	sta $afa000,x	                STA @lCS_TEXT_MEM_PTR,X
.391590	bf 00 20 3b	lda $3b2000,x	                LDA @lCREDITS_COLOR,X           ; Copy a byte of color
.391594	9f 00 c0 af	sta $afc000,x	                STA @lCS_COLOR_MEM_PTR,X
.391598	e8		inx		                INX
.391599	e0 00 20	cpx #$2000	                CPX #128 * 64
.39159c	d0 ea		bne $391588	                BNE credit_loop
.39159e	22 95 06 39	jsl $390695	                JSL IGETCHW                     ; Wait for a keypress
.3915a2	22 39 0a 39	jsl $390a39	                JSL ICLRSCREEN                  ; Then clear the screen and return
.3915a6	22 5d 08 39	jsl $39085d	                JSL ICSRHOME                    ; Move cursor to the home position
.3915aa	af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Enable the cursor
.3915ae	09 01		ora #$01	                ORA #Vky_Cursor_Enable
.3915b0	8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.3915b4	28		plp		                PLP
.3915b5	7a		ply		                PLY
.3915b6	fa		plx		                PLX
.3915b7	68		pla		                PLA
.3915b8	6b		rtl		                RTL
.3915b9	00		brk #		IRESTORE        BRK ; Warm boot routine
.3915ba	00		brk #		ISCINIT         BRK ;
.3915bb	00		brk #		IIOINIT         BRK ;
.3915bc	00		brk #		ISETLFS         BRK ; Obsolete (done in OPEN)
.3915bd	00		brk #		ISETNAM         BRK ; Obsolete (done in OPEN)
.3915be	00		brk #		IOPEN           BRK ; Open a channel for reading and/or writing. Use SETLFS and SETNAM to set the channels and filename first.
.3915bf	00		brk #		ICLOSE          BRK ; Close a channel
.3915c0	00		brk #		IGETB           BRK ; Get a byte from input channel. Return 0 if no input. Carry is set if no input.
.3915c1	00		brk #		IGETCH          BRK ; Get a character from the input channel. A=0 and Carry=1 if no data is wating
.3915c2	00		brk #		IGETS           BRK ; Get a string from the input channel. NULL terminates
.3915c3	00		brk #		IGETLINE        BRK ; Get a line of text from input channel. CR or NULL terminates.
.3915c4	00		brk #		IGETFIELD       BRK ; Get a field from the input channel. Value in A, CR, or NULL terminates
.3915c5	00		brk #		ITRIM           BRK ; Removes spaces at beginning and end of string.
.3915c6	00		brk #		IPRINTC         BRK ; Print character to screen. Handles terminal commands
.3915c7	00		brk #		IPRINTS         BRK ; Print string to screen. Handles terminal commands
.3915c8	00		brk #		IPRINTF         BRK ; Print a float value
.3915c9	00		brk #		IPRINTI         BRK ; Prints integer value in TEMP
.3915ca	00		brk #		IPRINTAI        BRK ; Prints integer value in A
.3915cb	00		brk #		IPUSHKEY        BRK ;
.3915cc	00		brk #		IPUSHKEYS       BRK ;
.3915cd	00		brk #		ISCRREADLINE    BRK ; Loads the MCMDADDR/BCMDADDR variable with the address of the current line on the screen. This is called when the RETURN key is pressed and is the first step in processing an immediate mode command.
.3915ce	00		brk #		ISCRGETWORD     BRK ; Read a current word on the screen. A word ends with a space, punctuation (except _), or any control character (value < 32). Loads the address into CMPTEXT_VAL and length into CMPTEXT_LEN variables.

;******  Processing file: src\OPL2_Library.asm


;******  Processing file: src\OPL3_def.asm

=$afe600				OPL3_R_BASE               = $AFE600
=$e600					OPL3_R_BASE_LL            = $E600
=$00af					OPL3_R_BASE_HL            = $00AF
=$afe601				OPL3_R_TEST               = $AFE601 ; TEST
=$afe602				OPL3_R_TIMER1             = $AFE602 ; TIMER-1
=$afe603				OPL3_R_TIMER2             = $AFE603 ; TIMER-2
=$afe604				OPL3_R_IRQ                = $AFE604 ;
=$afe605				OPL3_R_OPL3_MODE          = $AFE605 ; Set bit 0 to 1 if you want to use in OPL3 Mode
=$afe608				OPL3_R_CSM                = $AFE608 ;
=$afe620				OPL3_R_AM_VID_EG_KSR_MULT = $AFE620 ; $40..$35 (21 Registers)
=$afe640				OPL3_R_KSL_TL             = $AFE640;  $40..$55 (21 Registers)
=$afe660				OPL3_R_AR_DR              = $AFE660;  $60..$75 (21 Registers)
=$afe680				OPL3_R_SL_RR              = $AFE680;  $80..$95 (21 Registers)
=$afe6a0				OPL3_R_FNumber            = $AFE6A0;  $A0..$A8
=$afe6b0				OPL3_R_KON_BLOCK_FNumber  = $AFE6B0;  $B0..$B9
=$afe6bd				OPL3_R_DPTH_RHYTM         = $AFE6BD;  $BD
=$afe6c0				OPL3_R_FEEDBACK           = $AFE6C0;  $C0..$C9
=$afe6e0				OPL3_R_WAVE_SELECT        = $AFE6E0;  $E0..$F5
=$afe700				OPL3_L_BASE               = $AFE700
=$e700					OPL3_L_BASE_LL            = $E700
=$00af					OPL3_L_BASE_HL            = $00AF
=$afe701				OPL3_L_TEST               = $AFE701 ; TEST
=$afe702				OPL3_L_TIMER1             = $AFE702 ; TIMER-1
=$afe703				OPL3_L_TIMER2             = $AFE703 ; TIMER-2
=$afe704				OPL3_L_IRQ                = $AFE704 ;
=$afe708				OPL3_L_CSM                = $AFE708 ;
=$afe720				OPL3_L_AM_VID_EG_KSR_MULT = $AFE720 ; $40..$35 (21 Registers)
=$afe740				OPL3_L_KSL_TL             = $AFE740;  $40..$55 (21 Registers)
=$afe760				OPL3_L_AR_DR              = $AFE760;  $60..$75 (21 Registers)
=$afe780				OPL3_L_SL_RR              = $AFE780;  $80..$95 (21 Registers)
=$afe7a0				OPL3_L_FNumber            = $AFE7A0;  $A0..$A8
=$afe7b0				OPL3_L_KON_BLOCK_FNumber  = $AFE7B0;  $B0..$B9
=$afe7bd				OPL3_L_DPTH_RHYTM         = $AFE7BD;  $BD
=$afe7c0				OPL3_L_FEEDBACK           = $AFE7C0;  $C0..$C9
=$afe7e0				OPL3_L_WAVE_SELECT        = $AFE7E0;  $E0..$F5
=$80					TREMOLO    = $80
=$40					VIBRATO    = $40
=$20					SUSTAINING = $20
=$10					KSR        = $10
=$0f					MULTIPLIER = $0F
=$c0					KEY_SCALE  = $C0
=$3f					OP_LEVEL   = $3F
=$f0					ATTACK_RT  = $F0
=$0f					DECAY_RT   = $0F
=$f0					SUSTAIN_RT = $F0
=$0f					RELEASE_RT = $0F
=$0e					FEEDBACK   = $0E
=$01					ALGORITHM  = $01
=9					OPL2_NUM_CHANNELS = 9
=0					OPERATOR1 = 0
=1					OPERATOR2 = 1
=0					MODULATOR = 0
=1					CARRIER = 1
=0					FREQ_MODULATION = 0
=1					ADDITIVE_SYNTH  = 1
=$10					DRUM_BASS   = $10
=$08					DRUM_SNARE  = $08
=$04					DRUM_TOM    = $04
=$02					DRUM_CYMBAL = $02
=$01					DRUM_HI_HAT = $01
=1					NOTE_CS =   1
=2					NOTE_D =    2
=3					NOTE_DS =   3
=4					NOTE_E =    4
=5					NOTE_F =    5
=6					NOTE_FS =   6
=7					NOTE_G =    7
=8					NOTE_GS =   8
=9					NOTE_A =    9
=10					NOTE_AS =  10
=11					NOTE_B =   11
=12					NOTE_C =   12
>3915cf	6b 01 81 01 98 01 b0 01		noteFNumbers    .word  $016B, $0181, $0198, $01B0, $01CA, $01E5, $0202, $0220, $0241, $0263, $0287, $02AE
>3915d7	ca 01 e5 01 02 02 20 02 41 02 63 02 87 02 ae 02
>3915e7	00 01 02 08 09 0a 10 11		registerOffsets_operator0 .byte $00, $01, $02, $08, $09, $0A, $10, $11, $12 ;initializers for operator 1 */
>3915ef	12
>3915f0	03 04 05 0b 0c 0d 13 14		registerOffsets_operator1 .byte $03, $04, $05, $0B, $0C, $0D, $13, $14, $15 ;initializers for operator 2 */
>3915f8	15
>3915f9	10 13 14 12 15 11		drumOffsets               .byte $10, $13, $14, $12, $15, $11
>3915ff	10 08 04 02 01			drumBits                  .byte $10, $08, $04, $02, $01
>391604	20 40 60 80 e0 c0		instrumentBaseRegs        .byte $20, $40, $60, $80, $E0, $C0

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Instruments.asm

>39160a	00 24 4f f2 0b 00 0e 31		INSTRUMENT_ACCORDN    .text $00, $24, $4F, $F2, $0B, $00, $0E, $31, $00, $52, $0B, $00, 'ACCORDN   '
>391612	00 52 0b 00 41 43 43 4f 52 44 4e 20 20 20
>391620	00 31 43 6e 17 01 02 22		INSTRUMENT_BAGPIPE1   .text $00, $31, $43, $6E, $17, $01, $02, $22, $05, $8B, $0C, $02, 'BAGPIPE1  '
>391628	05 8b 0c 02 42 41 47 50 49 50 45 31 20 20
>391636	00 30 00 ff a0 03 00 a3		INSTRUMENT_BAGPIPE2   .text $00, $30, $00, $FF, $A0, $03, $00, $A3, $00, $65, $0B, $02, 'BAGPIPE2  '
>39163e	00 65 0b 02 42 41 47 50 49 50 45 32 20 20
>39164c	00 31 87 a1 11 00 08 16		INSTRUMENT_BANJO1     .text $00, $31, $87, $A1, $11, $00, $08, $16, $80, $7D, $43, $00, 'BANJO1    '
>391654	80 7d 43 00 42 41 4e 4a 4f 31 20 20 20 20
>391662	00 01 15 25 2f 00 0a 21		INSTRUMENT_BASS1      .text $00, $01, $15, $25, $2F, $00, $0A, $21, $80, $65, $6C, $00, 'BASS1     '
>39166a	80 65 6c 00 42 41 53 53 31 20 20 20 20 20
>391678	00 01 1d f2 ef 00 0a 01		INSTRUMENT_BASS2      .text $00, $01, $1D, $F2, $EF, $00, $0A, $01, $00, $F5, $78, $00, 'BASS2     '
>391680	00 f5 78 00 42 41 53 53 32 20 20 20 20 20
>39168e	00 c0 6d f9 01 01 0e 41		INSTRUMENT_BASSHARP   .text $00, $C0, $6D, $F9, $01, $01, $0E, $41, $00, $F2, $73, $00, 'BASSHARP  '
>391696	00 f2 73 00 42 41 53 53 48 41 52 50 20 20
>3916a4	00 30 c8 d5 19 00 0c 71		INSTRUMENT_BASSOON1   .text $00, $30, $C8, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'BASSOON1  '
>3916ac	80 61 1b 00 42 41 53 53 4f 4f 4e 31 20 20
>3916ba	00 c1 4f b1 53 03 06 e0		INSTRUMENT_BASSTRLG   .text $00, $C1, $4F, $B1, $53, $03, $06, $E0, $00, $12, $74, $03, 'BASSTRLG  '
>3916c2	00 12 74 03 42 41 53 53 54 52 4c 47 20 20
>3916d0	06 00 0b a8 4c 00 00 00		INSTRUMENT_BDRUM1     .text $06, $00, $0B, $A8, $4C, $00, $00, $00, $00, $00, $00, $00, 'BDRUM1    '
>3916d8	00 00 00 00 42 44 52 55 4d 31 20 20 20 20
>3916e6	00 64 db ff 01 00 04 3e		INSTRUMENT_BELLONG    .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F3, $62, $00, 'BELLONG   '
>3916ee	c0 f3 62 00 42 45 4c 4c 4f 4e 47 20 20 20
>3916fc	00 07 4f f2 60 00 08 12		INSTRUMENT_BELLS      .text $00, $07, $4F, $F2, $60, $00, $08, $12, $00, $F2, $72, $00, 'BELLS     '
>391704	00 f2 72 00 42 45 4c 4c 53 20 20 20 20 20
>391712	00 64 db ff 01 00 04 3e		INSTRUMENT_BELSHORT   .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F5, $F3, $00, 'BELSHORT  '
>39171a	c0 f5 f3 00 42 45 4c 53 48 4f 52 54 20 20
>391728	00 20 4b 7b 04 01 0e 21		INSTRUMENT_BNCEBASS   .text $00, $20, $4B, $7B, $04, $01, $0E, $21, $00, $F5, $72, $00, 'BNCEBASS  '
>391730	00 f5 72 00 42 4e 43 45 42 41 53 53 20 20
>39173e	00 21 16 71 ae 00 0e 21		INSTRUMENT_BRASS1     .text $00, $21, $16, $71, $AE, $00, $0E, $21, $00, $81, $9E, $00, 'BRASS1    '
>391746	00 81 9e 00 42 52 41 53 53 31 20 20 20 20
>391754	00 30 c5 52 11 00 00 31		INSTRUMENT_CBASSOON   .text $00, $30, $C5, $52, $11, $00, $00, $31, $80, $31, $2E, $00, 'CBASSOON  '
>39175c	80 31 2e 00 43 42 41 53 53 4f 4f 4e 20 20
>39176a	00 33 87 01 10 00 08 14		INSTRUMENT_CELESTA    .text $00, $33, $87, $01, $10, $00, $08, $14, $80, $7D, $33, $00, 'CELESTA   '
>391772	80 7d 33 00 43 45 4c 45 53 54 41 20 20 20
>391780	00 32 16 73 24 00 0e 21		INSTRUMENT_CLAR1      .text $00, $32, $16, $73, $24, $00, $0E, $21, $80, $75, $57, $00, 'CLAR1     '
>391788	80 75 57 00 43 4c 41 52 31 20 20 20 20 20
>391796	00 31 1c 41 1b 00 0c 60		INSTRUMENT_CLAR2      .text $00, $31, $1C, $41, $1B, $00, $0C, $60, $80, $42, $3B, $00, 'CLAR2     '
>39179e	80 42 3b 00 43 4c 41 52 32 20 20 20 20 20
>3917ac	00 32 9a 51 1b 00 0c 61		INSTRUMENT_CLARINET   .text $00, $32, $9A, $51, $1B, $00, $0C, $61, $82, $A2, $3B, $00, 'CLARINET  '
>3917b4	82 a2 3b 00 43 4c 41 52 49 4e 45 54 20 20
>3917c2	00 11 0d f2 01 00 0a 15		INSTRUMENT_CLAVECIN   .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'CLAVECIN  '
>3917ca	0d f2 b1 00 43 4c 41 56 45 43 49 4e 20 20
>3917d8	00 00 02 f0 ff 00 06 11		INSTRUMENT_CROMORNE   .text $00, $00, $02, $F0, $FF, $00, $06, $11, $80, $F0, $FF, $00, 'CROMORNE  '
>3917e0	80 f0 ff 00 43 52 4f 4d 4f 52 4e 45 20 20
>3917ee	09 01 00 f5 b5 00 00 00		INSTRUMENT_CYMBAL1    .text $09, $01, $00, $F5, $B5, $00, $00, $00, $00, $00, $00, $00, 'CYMBAL1   '
>3917f6	00 00 00 00 43 59 4d 42 41 4c 31 20 20 20
>391804	00 05 8a f0 7b 00 08 01		INSTRUMENT_ELCLAV1    .text $00, $05, $8A, $F0, $7B, $00, $08, $01, $80, $F4, $7B, $00, 'ELCLAV1   '
>39180c	80 f4 7b 00 45 4c 43 4c 41 56 31 20 20 20
>39181a	00 01 49 f1 53 01 06 11		INSTRUMENT_ELCLAV2    .text $00, $01, $49, $F1, $53, $01, $06, $11, $00, $F1, $74, $02, 'ELCLAV2   '
>391822	00 f1 74 02 45 4c 43 4c 41 56 32 20 20 20
>391830	00 e0 6d 57 04 01 0e 61		INSTRUMENT_ELECFL     .text $00, $E0, $6D, $57, $04, $01, $0E, $61, $00, $67, $7D, $00, 'ELECFL    '
>391838	00 67 7d 00 45 4c 45 43 46 4c 20 20 20 20
>391846	00 13 97 9a 12 02 0e 91		INSTRUMENT_ELECVIBE   .text $00, $13, $97, $9A, $12, $02, $0E, $91, $80, $9B, $11, $00, 'ELECVIBE  '
>39184e	80 9b 11 00 45 4c 45 43 56 49 42 45 20 20
>39185c	00 f1 01 97 17 00 08 21		INSTRUMENT_ELGUIT1    .text $00, $F1, $01, $97, $17, $00, $08, $21, $0D, $F1, $18, $00, 'ELGUIT1   '
>391864	0d f1 18 00 45 4c 47 55 49 54 31 20 20 20
>391872	00 13 96 ff 21 00 0a 11		INSTRUMENT_ELGUIT2    .text $00, $13, $96, $FF, $21, $00, $0A, $11, $80, $FF, $03, $00, 'ELGUIT2   '
>39187a	80 ff 03 00 45 4c 47 55 49 54 32 20 20 20
>391888	00 07 8f 82 7d 00 0c 14		INSTRUMENT_ELGUIT3    .text $00, $07, $8F, $82, $7D, $00, $0C, $14, $80, $82, $7D, $00, 'ELGUIT3   '
>391890	80 82 7d 00 45 4c 47 55 49 54 33 20 20 20
>39189e	00 05 8f da 15 00 0a 01		INSTRUMENT_ELGUIT4    .text $00, $05, $8F, $DA, $15, $00, $0A, $01, $80, $F9, $14, $02, 'ELGUIT4   '
>3918a6	80 f9 14 02 45 4c 47 55 49 54 34 20 20 20
>3918b4	00 b2 cd 91 2a 02 09 b1		INSTRUMENT_ELORGAN1   .text $00, $B2, $CD, $91, $2A, $02, $09, $B1, $80, $91, $2A, $01, 'ELORGAN1  '
>3918bc	80 91 2a 01 45 4c 4f 52 47 41 4e 31 20 20
>3918ca	00 01 4f f1 50 00 06 01		INSTRUMENT_ELPIANO1   .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'ELPIANO1  '
>3918d2	04 d2 7c 00 45 4c 50 49 41 4e 4f 31 20 20
>3918e0	00 02 22 f2 13 00 0e 02		INSTRUMENT_ELPIANO2   .text $00, $02, $22, $F2, $13, $00, $0E, $02, $00, $F5, $43, $00, 'ELPIANO2  '
>3918e8	00 f5 43 00 45 4c 50 49 41 4e 4f 32 20 20
>3918f6	00 81 63 f3 58 00 00 01		INSTRUMENT_EPIANO1A   .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'EPIANO1A  '
>3918fe	80 f2 58 00 45 50 49 41 4e 4f 31 41 20 20
>39190c	00 07 1f f5 fa 00 0e 01		INSTRUMENT_EPIANO1B   .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'EPIANO1B  '
>391914	57 f5 fa 00 45 50 49 41 4e 4f 31 42 20 20
>391922	00 21 83 74 17 00 07 a2		INSTRUMENT_FLUTE      .text $00, $21, $83, $74, $17, $00, $07, $A2, $8D, $65, $17, $00, 'FLUTE     '
>39192a	8d 65 17 00 46 4c 55 54 45 20 20 20 20 20
>391938	00 a1 27 74 8f 00 02 a1		INSTRUMENT_FLUTE1     .text $00, $A1, $27, $74, $8F, $00, $02, $A1, $80, $65, $2A, $00, 'FLUTE1    '
>391940	80 65 2a 00 46 4c 55 54 45 31 20 20 20 20
>39194e	00 e0 ec 6e 8f 00 0e 61		INSTRUMENT_FLUTE2     .text $00, $E0, $EC, $6E, $8F, $00, $0E, $61, $00, $65, $2A, $00, 'FLUTE2    '
>391956	00 65 2a 00 46 4c 55 54 45 32 20 20 20 20
>391964	00 21 9f 53 5a 00 0c 21		INSTRUMENT_FRHORN1    .text $00, $21, $9F, $53, $5A, $00, $0C, $21, $80, $AA, $1A, $00, 'FRHORN1   '
>39196c	80 aa 1a 00 46 52 48 4f 52 4e 31 20 20 20
>39197a	00 20 8e a5 8f 02 06 21		INSTRUMENT_FRHORN2    .text $00, $20, $8E, $A5, $8F, $02, $06, $21, $00, $36, $3D, $00, 'FRHORN2   '
>391982	00 36 3d 00 46 52 48 4f 52 4e 32 20 20 20
>391990	00 f0 18 55 ef 02 00 e0		INSTRUMENT_FSTRP1     .text $00, $F0, $18, $55, $EF, $02, $00, $E0, $80, $87, $1E, $03, 'FSTRP1    '
>391998	80 87 1e 03 46 53 54 52 50 31 20 20 20 20
>3919a6	00 70 16 55 2f 02 0c e0		INSTRUMENT_FSTRP2     .text $00, $70, $16, $55, $2F, $02, $0C, $E0, $80, $87, $1E, $03, 'FSTRP2    '
>3919ae	80 87 1e 03 46 53 54 52 50 32 20 20 20 20
>3919bc	00 f1 00 97 13 00 0a 25		INSTRUMENT_FUZGUIT1   .text $00, $F1, $00, $97, $13, $00, $0A, $25, $0D, $F1, $18, $01, 'FUZGUIT1  '
>3919c4	0d f1 18 01 46 55 5a 47 55 49 54 31 20 20
>3919d2	00 31 48 f1 53 00 06 32		INSTRUMENT_FUZGUIT2   .text $00, $31, $48, $F1, $53, $00, $06, $32, $00, $F2, $27, $02, 'FUZGUIT2  '
>3919da	00 f2 27 02 46 55 5a 47 55 49 54 32 20 20
>3919e8	00 01 11 f2 1f 00 0a 01		INSTRUMENT_GUITAR1    .text $00, $01, $11, $F2, $1F, $00, $0A, $01, $00, $F5, $88, $00, 'GUITAR1   '
>3919f0	00 f5 88 00 47 55 49 54 41 52 31 20 20 20
>3919fe	00 02 29 f5 75 00 00 01		INSTRUMENT_HARP1      .text $00, $02, $29, $F5, $75, $00, $00, $01, $83, $F2, $F3, $00, 'HARP1     '
>391a06	83 f2 f3 00 48 41 52 50 31 20 20 20 20 20
>391a14	00 02 99 f5 55 00 00 01		INSTRUMENT_HARP2      .text $00, $02, $99, $F5, $55, $00, $00, $01, $80, $F6, $53, $00, 'HARP2     '
>391a1c	80 f6 53 00 48 41 52 50 32 20 20 20 20 20
>391a2a	00 02 57 f5 56 00 00 01		INSTRUMENT_HARP3      .text $00, $02, $57, $F5, $56, $00, $00, $01, $80, $F6, $54, $00, 'HARP3     '
>391a32	80 f6 54 00 48 41 52 50 33 20 20 20 20 20
>391a40	00 02 29 f5 75 00 00 01		INSTRUMENT_HARPE1     .text $00, $02, $29, $F5, $75, $00, $00, $01, $03, $F2, $F3, $00, 'HARPE1    '
>391a48	03 f2 f3 00 48 41 52 50 45 31 20 20 20 20
>391a56	00 32 87 a1 10 00 08 16		INSTRUMENT_HARPSI1    .text $00, $32, $87, $A1, $10, $00, $08, $16, $80, $7D, $33, $00, 'HARPSI1   '
>391a5e	80 7d 33 00 48 41 52 50 53 49 31 20 20 20
>391a6c	00 33 87 a1 10 00 06 15		INSTRUMENT_HARPSI2    .text $00, $33, $87, $A1, $10, $00, $06, $15, $80, $7D, $43, $00, 'HARPSI2   '
>391a74	80 7d 43 00 48 41 52 50 53 49 32 20 20 20
>391a82	00 35 84 a8 10 00 08 18		INSTRUMENT_HARPSI3    .text $00, $35, $84, $A8, $10, $00, $08, $18, $80, $7D, $33, $00, 'HARPSI3   '
>391a8a	80 7d 33 00 48 41 52 50 53 49 33 20 20 20
>391a98	00 11 0d f2 01 00 0a 15		INSTRUMENT_HARPSI4    .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'HARPSI4   '
>391aa0	0d f2 b1 00 48 41 52 50 53 49 34 20 20 20
>391aae	00 36 87 8a 00 00 08 1a		INSTRUMENT_HARPSI5    .text $00, $36, $87, $8A, $00, $00, $08, $1A, $80, $7F, $33, $00, 'HARPSI5   '
>391ab6	80 7f 33 00 48 41 52 50 53 49 35 20 20 20
>391ac4	00 f0 00 1e 11 01 08 e2		INSTRUMENT_HELICPTR   .text $00, $F0, $00, $1E, $11, $01, $08, $E2, $C0, $11, $11, $01, 'HELICPTR  '
>391acc	c0 11 11 01 48 45 4c 49 43 50 54 52 20 20
>391ada	0a 01 00 f7 b5 00 00 00		INSTRUMENT_HIHAT1     .text $0A, $01, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'HIHAT1    '
>391ae2	00 00 00 00 48 49 48 41 54 31 20 20 20 20
>391af0	0a 01 03 da 18 00 00 00		INSTRUMENT_HIHAT2     .text $0A, $01, $03, $DA, $18, $00, $00, $00, $00, $00, $00, $00, 'HIHAT2    '
>391af8	00 00 00 00 48 49 48 41 54 32 20 20 20 20
>391b06	00 87 4d 78 42 00 0a 94		INSTRUMENT_JAVAICAN   .text $00, $87, $4D, $78, $42, $00, $0A, $94, $00, $85, $54, $00, 'JAVAICAN  '
>391b0e	00 85 54 00 4a 41 56 41 49 43 41 4e 20 20
>391b1c	00 03 5e 85 51 01 0e 11		INSTRUMENT_JAZZGUIT   .text $00, $03, $5E, $85, $51, $01, $0E, $11, $00, $D2, $71, $00, 'JAZZGUIT  '
>391b24	00 d2 71 00 4a 41 5a 5a 47 55 49 54 20 20
>391b32	00 00 50 f2 70 00 0e 13		INSTRUMENT_JEWSHARP   .text $00, $00, $50, $F2, $70, $00, $0E, $13, $00, $F2, $72, $00, 'JEWSHARP  '
>391b3a	00 f2 72 00 4a 45 57 53 48 41 52 50 20 20
>391b48	00 00 02 f0 fa 01 06 11		INSTRUMENT_KEYBRD1    .text $00, $00, $02, $F0, $FA, $01, $06, $11, $80, $F2, $FA, $01, 'KEYBRD1   '
>391b50	80 f2 fa 01 4b 45 59 42 52 44 31 20 20 20
>391b5e	00 01 8f f2 bd 00 08 14		INSTRUMENT_KEYBRD2    .text $00, $01, $8F, $F2, $BD, $00, $08, $14, $80, $82, $BD, $00, 'KEYBRD2   '
>391b66	80 82 bd 00 4b 45 59 42 52 44 32 20 20 20
>391b74	00 01 00 f0 f0 00 00 e4		INSTRUMENT_KEYBRD3    .text $00, $01, $00, $F0, $F0, $00, $00, $E4, $03, $F3, $36, $00, 'KEYBRD3   '
>391b7c	03 f3 36 00 4b 45 59 42 52 44 33 20 20 20
>391b8a	09 e6 00 25 b5 00 00 00		INSTRUMENT_LASER      .text $09, $E6, $00, $25, $B5, $00, $00, $00, $00, $00, $00, $00, 'LASER     '
>391b92	00 00 00 00 4c 41 53 45 52 20 20 20 20 20
>391ba0	00 32 44 f8 ff 00 0e 11		INSTRUMENT_LOGDRUM1   .text $00, $32, $44, $F8, $FF, $00, $0E, $11, $00, $F5, $7F, $00, 'LOGDRUM1  '
>391ba8	00 f5 7f 00 4c 4f 47 44 52 55 4d 31 20 20
>391bb6	00 05 4e da 25 00 0a 01		INSTRUMENT_MARIMBA1   .text $00, $05, $4E, $DA, $25, $00, $0A, $01, $00, $F9, $15, $00, 'MARIMBA1  '
>391bbe	00 f9 15 00 4d 41 52 49 4d 42 41 31 20 20
>391bcc	00 85 4e da 15 00 0a 81		INSTRUMENT_MARIMBA2   .text $00, $85, $4E, $DA, $15, $00, $0A, $81, $80, $F9, $13, $00, 'MARIMBA2  '
>391bd4	80 f9 13 00 4d 41 52 49 4d 42 41 32 20 20
>391be2	00 30 00 fe 11 01 08 ae		INSTRUMENT_MDRNPHON   .text $00, $30, $00, $FE, $11, $01, $08, $AE, $C0, $F1, $19, $01, 'MDRNPHON  '
>391bea	c0 f1 19 01 4d 44 52 4e 50 48 4f 4e 20 20
>391bf8	07 0c 00 c8 b6 01 00 00		INSTRUMENT_MLTRDRUM   .text $07, $0C, $00, $C8, $B6, $01, $00, $00, $00, $00, $00, $00, 'MLTRDRUM  '
>391c00	00 00 00 00 4d 4c 54 52 44 52 55 4d 20 20
>391c0e	00 20 90 f5 9e 02 0c 11		INSTRUMENT_MOOGSYNT   .text $00, $20, $90, $F5, $9E, $02, $0C, $11, $00, $F4, $5B, $03, 'MOOGSYNT  '
>391c16	00 f4 5b 03 4d 4f 4f 47 53 59 4e 54 20 20
>391c24	00 0e 40 d1 53 00 0e 0e		INSTRUMENT_NOISE1     .text $00, $0E, $40, $D1, $53, $00, $0E, $0E, $00, $F2, $7F, $03, 'NOISE1    '
>391c2c	00 f2 7f 03 4e 4f 49 53 45 31 20 20 20 20
>391c3a	00 b1 c5 6e 17 00 02 22		INSTRUMENT_OBOE1      .text $00, $B1, $C5, $6E, $17, $00, $02, $22, $05, $8B, $0E, $00, 'OBOE1     '
>391c42	05 8b 0e 00 4f 42 4f 45 31 20 20 20 20 20
>391c50	00 65 d2 81 03 00 02 71		INSTRUMENT_ORGAN1     .text $00, $65, $D2, $81, $03, $00, $02, $71, $80, $F1, $05, $00, 'ORGAN1    '
>391c58	80 f1 05 00 4f 52 47 41 4e 31 20 20 20 20
>391c66	00 24 80 ff 0f 00 01 21		INSTRUMENT_ORGAN2     .text $00, $24, $80, $FF, $0F, $00, $01, $21, $80, $FF, $0F, $00, 'ORGAN2    '
>391c6e	80 ff 0f 00 4f 52 47 41 4e 32 20 20 20 20
>391c7c	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3     .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $80, $F0, $1F, $00, 'ORGAN3    '
>391c84	80 f0 1f 00 4f 52 47 41 4e 33 20 20 20 20
>391c92	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3A    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $8D, $F0, $13, $00, 'ORGAN3A   '
>391c9a	8d f0 13 00 4f 52 47 41 4e 33 41 20 20 20
>391ca8	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3B    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $92, $F0, $12, $00, 'ORGAN3B   '
>391cb0	92 f0 12 00 4f 52 47 41 4e 33 42 20 20 20
>391cbe	00 0c 00 f8 b5 00 01 00		INSTRUMENT_ORGNPERC   .text $00, $0C, $00, $F8, $B5, $00, $01, $00, $00, $D6, $4F, $00, 'ORGNPERC  '
>391cc6	00 d6 4f 00 4f 52 47 4e 50 45 52 43 20 20
>391cd4	00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE1     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F1, $B2, $00, 'PHONE1    '
>391cdc	08 f1 b2 00 50 48 4f 4e 45 31 20 20 20 20
>391cea	00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE2     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $0A, $F1, $B4, $00, 'PHONE2    '
>391cf2	0a f1 b4 00 50 48 4f 4e 45 32 20 20 20 20
>391d00	00 81 63 f3 58 00 00 01		INSTRUMENT_PIAN1A     .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'PIAN1A    '
>391d08	80 f2 58 00 50 49 41 4e 31 41 20 20 20 20
>391d16	00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1B     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $26, $F5, $FA, $00, 'PIAN1B    '
>391d1e	26 f5 fa 00 50 49 41 4e 31 42 20 20 20 20
>391d2c	00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1C     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'PIAN1C    '
>391d34	57 f5 fa 00 50 49 41 4e 31 43 20 20 20 20
>391d42	00 03 4f f1 53 00 06 17		INSTRUMENT_PIANO      .text $00, $03, $4F, $F1, $53, $00, $06, $17, $00, $F2, $74, $00, 'PIANO     '
>391d4a	00 f2 74 00 50 49 41 4e 4f 20 20 20 20 20
>391d58	00 01 4f f1 53 00 06 11		INSTRUMENT_PIANO1     .text $00, $01, $4F, $F1, $53, $00, $06, $11, $00, $D2, $74, $00, 'PIANO1    '
>391d60	00 d2 74 00 50 49 41 4e 4f 31 20 20 20 20
>391d6e	00 41 9d f2 51 00 06 13		INSTRUMENT_PIANO2     .text $00, $41, $9D, $F2, $51, $00, $06, $13, $00, $F2, $F1, $00, 'PIANO2    '
>391d76	00 f2 f1 00 50 49 41 4e 4f 32 20 20 20 20
>391d84	00 01 4f f1 50 00 06 01		INSTRUMENT_PIANO3     .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'PIANO3    '
>391d8c	04 d2 7c 00 50 49 41 4e 4f 33 20 20 20 20
>391d9a	00 01 4d f1 60 00 08 11		INSTRUMENT_PIANO4     .text $00, $01, $4D, $F1, $60, $00, $08, $11, $00, $D2, $7B, $00, 'PIANO4    '
>391da2	00 d2 7b 00 50 49 41 4e 4f 34 20 20 20 20
>391db0	00 03 4f f1 53 00 06 17		INSTRUMENT_PIANOBEL   .text $00, $03, $4F, $F1, $53, $00, $06, $17, $03, $F2, $74, $00, 'PIANOBEL  '
>391db8	03 f2 74 00 50 49 41 4e 4f 42 45 4c 20 20
>391dc6	00 01 cf f1 53 00 02 12		INSTRUMENT_PIANOF     .text $00, $01, $CF, $F1, $53, $00, $02, $12, $00, $F2, $83, $00, 'PIANOF    '
>391dce	00 f2 83 00 50 49 41 4e 4f 46 20 20 20 20
>391ddc	00 10 00 75 93 01 00 01		INSTRUMENT_POPBASS1   .text $00, $10, $00, $75, $93, $01, $00, $01, $00, $F5, $82, $01, 'POPBASS1  '
>391de4	00 f5 82 01 50 4f 50 42 41 53 53 31 20 20
>391df2	07 0c 00 c7 b4 00 00 00		INSTRUMENT_RKSNARE1   .text $07, $0C, $00, $C7, $B4, $00, $00, $00, $00, $00, $00, $00, 'RKSNARE1  '
>391dfa	00 00 00 00 52 4b 53 4e 41 52 45 31 20 20
>391e08	00 01 4f 71 53 00 0a 12		INSTRUMENT_SAX1       .text $00, $01, $4F, $71, $53, $00, $0A, $12, $00, $52, $7C, $00, 'SAX1      '
>391e10	00 52 7c 00 53 41 58 31 20 20 20 20 20 20
>391e1e	00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH    .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH   '
>391e26	00 5c dc 00 53 43 52 41 54 43 48 20 20 20
>391e34	00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH4   .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH4  '
>391e3c	00 5c dc 00 53 43 52 41 54 43 48 34 20 20
>391e4a	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SDRUM2     .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SDRUM2    '
>391e52	00 f6 b4 00 53 44 52 55 4d 32 20 20 20 20
>391e60	00 e4 0e ff 3f 01 00 c0		INSTRUMENT_SHRTVIBE   .text $00, $E4, $0E, $FF, $3F, $01, $00, $C0, $00, $F3, $07, $00, 'SHRTVIBE  '
>391e68	00 f3 07 00 53 48 52 54 56 49 42 45 20 20
>391e76	00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR1     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $00, 'SITAR1    '
>391e7e	40 f1 53 00 53 49 54 41 52 31 20 20 20 20
>391e8c	00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR2     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $01, 'SITAR2    '
>391e94	40 f1 53 01 53 49 54 41 52 32 20 20 20 20
>391ea2	00 61 0c 81 03 00 08 71		INSTRUMENT_SNAKEFL    .text $00, $61, $0C, $81, $03, $00, $08, $71, $80, $61, $0C, $00, 'SNAKEFL   '
>391eaa	80 61 0c 00 53 4e 41 4b 45 46 4c 20 20 20
>391eb8	07 0c 00 f8 b5 00 00 00		INSTRUMENT_SNARE1     .text $07, $0C, $00, $F8, $B5, $00, $00, $00, $00, $00, $00, $00, 'SNARE1    '
>391ec0	00 00 00 00 53 4e 41 52 45 31 20 20 20 20
>391ece	00 06 00 f0 f0 00 0e c4		INSTRUMENT_SNRSUST    .text $00, $06, $00, $F0, $F0, $00, $0E, $C4, $03, $C4, $34, $00, 'SNRSUST   '
>391ed6	03 c4 34 00 53 4e 52 53 55 53 54 20 20 20
>391ee4	00 70 1c 51 03 02 0e 20		INSTRUMENT_SOLOVLN    .text $00, $70, $1C, $51, $03, $02, $0E, $20, $00, $54, $67, $02, 'SOLOVLN   '
>391eec	00 54 67 02 53 4f 4c 4f 56 4c 4e 20 20 20
>391efa	00 01 46 f1 83 00 06 61		INSTRUMENT_STEELGT1   .text $00, $01, $46, $F1, $83, $00, $06, $61, $03, $31, $86, $00, 'STEELGT1  '
>391f02	03 31 86 00 53 54 45 45 4c 47 54 31 20 20
>391f10	00 01 47 f1 83 00 06 61		INSTRUMENT_STEELGT2   .text $00, $01, $47, $F1, $83, $00, $06, $61, $03, $91, $86, $00, 'STEELGT2  '
>391f18	03 91 86 00 53 54 45 45 4c 47 54 32 20 20
>391f26	00 b1 8b 71 11 00 06 61		INSTRUMENT_STRINGS1   .text $00, $B1, $8B, $71, $11, $00, $06, $61, $40, $42, $15, $01, 'STRINGS1  '
>391f2e	40 42 15 01 53 54 52 49 4e 47 53 31 20 20
>391f3c	00 e1 4f b1 d3 03 06 21		INSTRUMENT_STRNLONG   .text $00, $E1, $4F, $B1, $D3, $03, $06, $21, $00, $12, $74, $01, 'STRNLONG  '
>391f44	00 12 74 01 53 54 52 4e 4c 4f 4e 47 20 20
>391f52	00 55 97 2a 02 00 00 12		INSTRUMENT_SYN1       .text $00, $55, $97, $2A, $02, $00, $00, $12, $80, $42, $F3, $00, 'SYN1      '
>391f5a	80 42 f3 00 53 59 4e 31 20 20 20 20 20 20
>391f68	00 13 97 9a 12 00 0e 11		INSTRUMENT_SYN2       .text $00, $13, $97, $9A, $12, $00, $0E, $11, $80, $9B, $14, $00, 'SYN2      '
>391f70	80 9b 14 00 53 59 4e 32 20 20 20 20 20 20
>391f7e	00 11 8a f1 11 00 06 01		INSTRUMENT_SYN3       .text $00, $11, $8A, $F1, $11, $00, $06, $01, $40, $F1, $B3, $00, 'SYN3      '
>391f86	40 f1 b3 00 53 59 4e 33 20 20 20 20 20 20
>391f94	00 21 0d e9 3a 00 0a 22		INSTRUMENT_SYN4       .text $00, $21, $0D, $E9, $3A, $00, $0A, $22, $80, $65, $6C, $00, 'SYN4      '
>391f9c	80 65 6c 00 53 59 4e 34 20 20 20 20 20 20
>391faa	00 01 4f 71 53 00 06 19		INSTRUMENT_SYN5       .text $00, $01, $4F, $71, $53, $00, $06, $19, $00, $52, $7C, $00, 'SYN5      '
>391fb2	00 52 7c 00 53 59 4e 35 20 20 20 20 20 20
>391fc0	00 24 0f 41 7e 00 0a 21		INSTRUMENT_SYN6       .text $00, $24, $0F, $41, $7E, $00, $0A, $21, $00, $F1, $5E, $00, 'SYN6      '
>391fc8	00 f1 5e 00 53 59 4e 36 20 20 20 20 20 20
>391fd6	00 07 87 f0 05 00 04 01		INSTRUMENT_SYN9       .text $00, $07, $87, $F0, $05, $00, $04, $01, $80, $F0, $05, $00, 'SYN9      '
>391fde	80 f0 05 00 53 59 4e 39 20 20 20 20 20 20
>391fec	00 26 03 e0 f0 00 08 1e		INSTRUMENT_SYNBAL1    .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'SYNBAL1   '
>391ff4	00 ff 31 00 53 59 4e 42 41 4c 31 20 20 20
>392002	00 28 03 e0 f0 00 04 13		INSTRUMENT_SYNBAL2    .text $00, $28, $03, $E0, $F0, $00, $04, $13, $00, $E8, $11, $00, 'SYNBAL2   '
>39200a	00 e8 11 00 53 59 4e 42 41 4c 32 20 20 20
>392018	00 30 88 d5 19 00 0c 71		INSTRUMENT_SYNBASS1   .text $00, $30, $88, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'SYNBASS1  '
>392020	80 61 1b 00 53 59 4e 42 41 53 53 31 20 20
>39202e	00 81 86 65 01 00 0c 11		INSTRUMENT_SYNBASS2   .text $00, $81, $86, $65, $01, $00, $0C, $11, $00, $32, $74, $00, 'SYNBASS2  '
>392036	00 32 74 00 53 59 4e 42 41 53 53 32 20 20
>392044	00 81 83 65 05 00 0a 51		INSTRUMENT_SYNBASS4   .text $00, $81, $83, $65, $05, $00, $0A, $51, $00, $32, $74, $00, 'SYNBASS4  '
>39204c	00 32 74 00 53 59 4e 42 41 53 53 34 20 20
>39205a	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR1    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F8, $B6, $00, 'SYNSNR1   '
>392062	00 f8 b6 00 53 59 4e 53 4e 52 31 20 20 20
>392070	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR2    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SYNSNR2   '
>392078	00 f6 b4 00 53 59 4e 53 4e 52 32 20 20 20
>392086	00 8f 81 ef 01 00 04 01		INSTRUMENT_TINCAN1    .text $00, $8F, $81, $EF, $01, $00, $04, $01, $00, $98, $F1, $00, 'TINCAN1   '
>39208e	00 98 f1 00 54 49 4e 43 41 4e 31 20 20 20
>39209c	08 04 00 f7 b5 00 00 00		INSTRUMENT_TOM1       .text $08, $04, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'TOM1      '
>3920a4	00 00 00 00 54 4f 4d 31 20 20 20 20 20 20
>3920b2	08 02 00 c8 97 00 00 00		INSTRUMENT_TOM2       .text $08, $02, $00, $C8, $97, $00, $00, $00, $00, $00, $00, $00, 'TOM2      '
>3920ba	00 00 00 00 54 4f 4d 32 20 20 20 20 20 20
>3920c8	00 17 4f f2 61 00 08 12		INSTRUMENT_TRAINBEL   .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F2, $74, $00, 'TRAINBEL  '
>3920d0	08 f2 74 00 54 52 41 49 4e 42 45 4c 20 20
>3920de	00 26 03 e0 f0 00 08 1e		INSTRUMENT_TRIANGLE   .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'TRIANGLE  '
>3920e6	00 ff 31 00 54 52 49 41 4e 47 4c 45 20 20
>3920f4	00 b1 1c 41 1f 00 0e 61		INSTRUMENT_TROMB1     .text $00, $B1, $1C, $41, $1F, $00, $0E, $61, $80, $92, $3B, $00, 'TROMB1    '
>3920fc	80 92 3b 00 54 52 4f 4d 42 31 20 20 20 20
>39210a	00 21 1c 53 1d 00 0c 61		INSTRUMENT_TROMB2     .text $00, $21, $1C, $53, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TROMB2    '
>392112	80 52 3b 00 54 52 4f 4d 42 32 20 20 20 20
>392120	00 31 1c 41 0b 00 0e 61		INSTRUMENT_TRUMPET1   .text $00, $31, $1C, $41, $0B, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET1  '
>392128	80 92 3b 00 54 52 55 4d 50 45 54 31 20 20
>392136	00 31 1c 23 1d 00 0c 61		INSTRUMENT_TRUMPET2   .text $00, $31, $1C, $23, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TRUMPET2  '
>39213e	80 52 3b 00 54 52 55 4d 50 45 54 32 20 20
>39214c	00 31 1c 41 01 00 0e 61		INSTRUMENT_TRUMPET3   .text $00, $31, $1C, $41, $01, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET3  '
>392154	80 92 3b 00 54 52 55 4d 50 45 54 33 20 20
>392162	00 31 1c 41 0b 00 0c 61		INSTRUMENT_TRUMPET4   .text $00, $31, $1C, $41, $0B, $00, $0C, $61, $80, $92, $3B, $00, 'TRUMPET4  '
>39216a	80 92 3b 00 54 52 55 4d 50 45 54 34 20 20
>392178	00 21 19 43 8c 00 0c 21		INSTRUMENT_TUBA1      .text $00, $21, $19, $43, $8C, $00, $0C, $21, $80, $85, $2F, $00, 'TUBA1     '
>392180	80 85 2f 00 54 55 42 41 31 20 20 20 20 20
>39218e	00 84 53 f5 33 00 06 a0		INSTRUMENT_VIBRA1     .text $00, $84, $53, $F5, $33, $00, $06, $A0, $80, $FD, $25, $00, 'VIBRA1    '
>392196	80 fd 25 00 56 49 42 52 41 31 20 20 20 20
>3921a4	00 06 73 f6 54 00 00 81		INSTRUMENT_VIBRA2     .text $00, $06, $73, $F6, $54, $00, $00, $81, $03, $F2, $B3, $00, 'VIBRA2    '
>3921ac	03 f2 b3 00 56 49 42 52 41 32 20 20 20 20
>3921ba	00 93 97 aa 12 02 0e 91		INSTRUMENT_VIBRA3     .text $00, $93, $97, $AA, $12, $02, $0E, $91, $80, $AC, $21, $00, 'VIBRA3    '
>3921c2	80 ac 21 00 56 49 42 52 41 33 20 20 20 20
>3921d0	00 31 1c 51 03 00 0e 61		INSTRUMENT_VIOLIN1    .text $00, $31, $1C, $51, $03, $00, $0E, $61, $80, $54, $67, $00, 'VIOLIN1   '
>3921d8	80 54 67 00 56 49 4f 4c 49 4e 31 20 20 20
>3921e6	00 e1 88 62 29 00 0c 22		INSTRUMENT_VIOLIN2    .text $00, $E1, $88, $62, $29, $00, $0C, $22, $80, $53, $2C, $00, 'VIOLIN2   '
>3921ee	80 53 2c 00 56 49 4f 4c 49 4e 32 20 20 20
>3921fc	00 e1 88 64 29 00 06 22		INSTRUMENT_VIOLIN3    .text $00, $E1, $88, $64, $29, $00, $06, $22, $83, $53, $2C, $00, 'VIOLIN3   '
>392204	83 53 2c 00 56 49 4f 4c 49 4e 33 20 20 20
>392212	00 31 9c f1 f9 00 0e 31		INSTRUMENT_VLNPIZZ1   .text $00, $31, $9C, $F1, $F9, $00, $0E, $31, $80, $F7, $E6, $00, 'VLNPIZZ1  '
>39221a	80 f7 e6 00 56 4c 4e 50 49 5a 5a 31 20 20
>392228	00 00 02 00 f0 00 0e 14		INSTRUMENT_WAVE       .text $00, $00, $02, $00, $F0, $00, $0E, $14, $80, $1B, $A2, $00, 'WAVE      '
>392230	80 1b a2 00 57 41 56 45 20 20 20 20 20 20
>39223e	00 11 2d c8 2f 00 0c 31		INSTRUMENT_XYLO1      .text $00, $11, $2D, $C8, $2F, $00, $0C, $31, $00, $F5, $F5, $00, 'XYLO1     '
>392246	00 f5 f5 00 58 59 4c 4f 31 20 20 20 20 20
>392254	06 2e 00 ff 0f 00 00 00		INSTRUMENT_XYLO2      .text $06, $2E, $00, $FF, $0F, $00, $00, $00, $00, $00, $00, $00, 'XYLO2     '
>39225c	00 00 00 00 58 59 4c 4f 32 20 20 20 20 20
>39226a	00 06 00 ff f0 00 0e c4		INSTRUMENT_XYLO3      .text $00, $06, $00, $FF, $F0, $00, $0E, $C4, $00, $F8, $B5, $00, 'XYLO3     '
>392272	00 f8 b5 00 58 59 4c 4f 33 20 20 20 20 20

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Drums.asm

>392280	00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP2         .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>392288	00 87 fa 00
>39228c	00 01 00 78 97 09 00 02		DRUMINS_SCRATCH1      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>392294	00 88 98 03
>392298	00 01 00 78 97 09 00 02		DRUMINS_SCRATCH2      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>3922a0	00 88 98 03
>3922a4	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT2      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>3922ac	00 f9 69 00
>3922b0	00 00 00 f8 6c 01 00 0e		DRUMINS_HIQ           .text $00, $00, $00, $F8, $6C, $01, $00, $0E, $80, $E8, $4A, $00
>3922b8	80 e8 4a 00
>3922bc	00 25 1b fa f2 01 00 12		DRUMINS_WOODBLOK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>3922c4	00 f6 9a 00
>3922c8	00 06 03 f4 44 00 01 01		DRUMINS_GLOCK         .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>3922d0	1b f2 34 00
>3922d4	00 00 00 f9 f3 05 00 01		DRUMINS_BASS_DR2      .text $00, $00, $00, $F9, $F3, $05, $00, $01, $00, $F7, $8A, $00
>3922dc	00 f7 8a 00
>3922e0	00 01 07 fa fd 05 00 01		DRUMINS_BASS_DR1      .text $00, $01, $07, $FA, $FD, $05, $00, $01, $00, $F6, $47, $00
>3922e8	00 f6 47 00
>3922ec	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT       .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>3922f4	00 f9 69 00
>3922f8	00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_AC      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>392300	00 f7 a9 00
>392304	00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP          .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>39230c	00 87 fa 00
>392310	00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_EL      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>392318	00 f7 a9 00
>39231c	00 06 0a fa 1f 0c 00 11		DRUMINS_LO_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>392324	00 f5 f5 00
>392328	00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_CL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>392330	06 b8 d8 03
>392334	00 06 0a fa 1f 0c 00 11		DRUMINS_HI_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>39233c	00 f5 f5 00
>392340	00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_PL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>392348	06 b8 d8 03
>39234c	00 06 0a fa 1f 0c 00 11		DRUMINS_LOW_TOM       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>392354	00 f5 f5 00
>392358	00 2e 00 82 f6 05 00 04		DRUMINS_HIHAT_OP      .text $00, $2E, $00, $82, $F6, $05, $00, $04, $10, $74, $F8, $03
>392360	10 74 f8 03
>392364	00 06 0a fa 1f 0c 00 11		DRUMINS_LTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>39236c	00 f5 f5 00
>392370	00 06 0a fa 1f 0c 00 11		DRUMINS_HTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>392378	00 f5 f5 00
>39237c	00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH         .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>392384	05 c5 d4 03
>392388	00 06 0a fa 1f 0c 00 11		DRUMINS_TOM_HIGH      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>392390	00 f5 f5 00
>392394	00 29 10 94 00 0f 00 04		DRUMINS_RIDE_CY       .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>39239c	04 f9 44 03
>3923a0	00 2c 00 9f 00 0f 02 0e		DRUMINS_TAMBOUR       .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>3923a8	05 c5 d4 03
>3923ac	00 29 10 94 00 0f 00 04		DRUMINS_CYMBAL        .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>3923b4	04 f9 44 03
>3923b8	00 2e 09 f5 f1 01 00 06		DRUMINS_TAMBOU2       .text $00, $2E, $09, $F5, $F1, $01, $00, $06, $03, $87, $F7, $03
>3923c0	03 87 f7 03
>3923c4	00 2c 00 9f 00 0f 02 0e		DRUMINS_SPLASH        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>3923cc	05 c5 d4 03
>3923d0	00 37 14 f7 a1 09 01 03		DRUMINS_COWBELL       .text $00, $37, $14, $F7, $A1, $09, $01, $03, $00, $F6, $28, $00
>3923d8	00 f6 28 00
>3923dc	00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH2        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>3923e4	05 c5 d4 03
>3923e8	00 80 00 ff 00 0d 01 00		DRUMINS_VIBRASLA      .text $00, $80, $00, $FF, $00, $0D, $01, $00, $00, $F5, $F7, $01
>3923f0	00 f5 f7 01
>3923f4	00 29 10 94 00 0f 00 04		DRUMINS_RIDE2         .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>3923fc	04 f9 44 03
>392400	00 25 c4 fa fa 01 00 03		DRUMINS_HI_BONGO      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>392408	00 99 f9 00
>39240c	00 21 03 fb fa 01 01 02		DRUMINS_LO_BONGO      .text $00, $21, $03, $FB, $FA, $01, $01, $02, $00, $A8, $F7, $00
>392414	00 a8 f7 00
>392418	00 25 c4 fa fa 01 00 03		DRUMINS_MUTECONG      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>392420	00 99 f9 00
>392424	00 24 18 f9 fa 0f 02 03		DRUMINS_OPENCONG      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>39242c	00 a6 f6 00
>392430	00 24 18 f9 fa 0f 02 03		DRUMINS_LOWCONGA      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>392438	00 a6 f6 00
>39243c	00 05 14 f5 f5 07 02 03		DRUMINS_HI_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>392444	00 f6 36 02
>392448	00 05 14 f5 f5 07 02 03		DRUMINS_LO_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>392450	00 f6 36 02
>392454	00 1c 0c f9 31 0f 01 15		DRUMINS_HI_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>39245c	00 96 e8 01
>392460	00 1c 0c f9 31 0f 01 15		DRUMINS_LO_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>392468	00 96 e8 01
>39246c	00 0e 00 ff 01 0f 00 0e		DRUMINS_CABASA        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>392474	02 79 77 03
>392478	00 0e 00 ff 01 0f 00 0e		DRUMINS_MARACAS       .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>392480	02 79 77 03
>392484	00 20 15 af 07 05 01 0e		DRUMINS_S_WHISTL      .text $00, $20, $15, $AF, $07, $05, $01, $0E, $00, $A5, $2B, $02
>39248c	00 a5 2b 02
>392490	00 20 18 bf 07 01 01 0e		DRUMINS_L_WHISTL      .text $00, $20, $18, $BF, $07, $01, $01, $0E, $00, $93, $3B, $02
>392498	00 93 3b 02
>39249c	00 20 00 f0 f7 0b 00 08		DRUMINS_S_GUIRO       .text $00, $20, $00, $F0, $F7, $0B, $00, $08, $01, $89, $3B, $03
>3924a4	01 89 3b 03
>3924a8	00 20 00 f3 fa 09 00 08		DRUMINS_L_GUIRO       .text $00, $20, $00, $F3, $FA, $09, $00, $08, $0A, $53, $2B, $02
>3924b0	0a 53 2b 02
>3924b4	00 15 21 f8 9a 09 01 13		DRUMINS_CLAVES        .text $00, $15, $21, $F8, $9A, $09, $01, $13, $00, $F6, $89, $00
>3924bc	00 f6 89 00
>3924c0	00 25 1b fa f2 01 00 12		DRUMINS_HI_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>3924c8	00 f6 9a 00
>3924cc	00 25 1b fa f2 01 00 12		DRUMINS_LO_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>3924d4	00 f6 9a 00
>3924d8	00 20 01 5f 07 01 00 08		DRUMINS_MU_CUICA      .text $00, $20, $01, $5F, $07, $01, $00, $08, $00, $87, $4B, $01
>3924e0	00 87 4b 01
>3924e4	00 25 12 57 f7 01 01 03		DRUMINS_OP_CUICA      .text $00, $25, $12, $57, $F7, $01, $01, $03, $00, $78, $67, $01
>3924ec	00 78 67 01
>3924f0	00 22 2f f1 f0 07 00 27		DRUMINS_MU_TRNGL      .text $00, $22, $2F, $F1, $F0, $07, $00, $27, $02, $F8, $FC, $00
>3924f8	02 f8 fc 00
>3924fc	00 26 44 f1 f0 07 00 27		DRUMINS_OP_TRNGL      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>392504	40 f5 f5 00
>392508	00 0e 00 ff 01 0f 00 0e		DRUMINS_SHAKER        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>392510	02 79 77 03
>392514	00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL1      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>39251c	40 f5 f5 00
>392520	00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL2      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>392528	40 f5 f5 00
>39252c	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT3      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>392534	00 f9 69 00
>392538	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT4      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>392540	00 f9 69 00
>392544	00 02 1d f5 93 01 00 00		DRUMINS_TAIKO         .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>39254c	00 c6 45 00
=27					DRUM_NOTE_BASE = 27;
=60					NUM_MIDI_DRUMS = 60;
>392550	80 22 39 00 8c 22 39 00		midiDrums     .dword DRUMINS_CLAP2, DRUMINS_SCRATCH1, DRUMINS_SCRATCH2, DRUMINS_RIMSHOT2
>392558	98 22 39 00 a4 22 39 00
>392560	b0 22 39 00 bc 22 39 00		              .dword DRUMINS_HIQ, DRUMINS_WOODBLOK, DRUMINS_GLOCK, DRUMINS_BASS_DR2
>392568	c8 22 39 00 d4 22 39 00
>392570	e0 22 39 00 ec 22 39 00		              .dword DRUMINS_BASS_DR1, DRUMINS_RIMSHOT,  DRUMINS_SNARE_AC, DRUMINS_CLAP
>392578	f8 22 39 00 04 23 39 00
>392580	10 23 39 00 1c 23 39 00		              .dword DRUMINS_SNARE_EL, DRUMINS_LO_TOMS,  DRUMINS_HIHAT_CL, DRUMINS_HI_TOMS
>392588	28 23 39 00 34 23 39 00
>392590	40 23 39 00 4c 23 39 00		              .dword DRUMINS_HIHAT_PL, DRUMINS_LOW_TOM,	DRUMINS_HIHAT_OP, DRUMINS_LTOM_MID
>392598	58 23 39 00 64 23 39 00
>3925a0	70 23 39 00 7c 23 39 00		              .dword DRUMINS_HTOM_MID, DRUMINS_CRASH,    DRUMINS_TOM_HIGH, DRUMINS_RIDE_CY
>3925a8	88 23 39 00 94 23 39 00
>3925b0	a0 23 39 00 ac 23 39 00		              .dword DRUMINS_TAMBOUR,  DRUMINS_CYMBAL,   DRUMINS_TAMBOU2,  DRUMINS_SPLASH
>3925b8	b8 23 39 00 c4 23 39 00
>3925c0	d0 23 39 00 dc 23 39 00		              .dword DRUMINS_COWBELL,  DRUMINS_CRASH2, 	DRUMINS_VIBRASLA, DRUMINS_RIDE2
>3925c8	e8 23 39 00 f4 23 39 00
>3925d0	00 24 39 00 0c 24 39 00		              .dword DRUMINS_HI_BONGO, DRUMINS_LO_BONGO, DRUMINS_MUTECONG, DRUMINS_OPENCONG
>3925d8	18 24 39 00 24 24 39 00
>3925e0	30 24 39 00 3c 24 39 00		              .dword DRUMINS_LOWCONGA, DRUMINS_HI_TIMBA, DRUMINS_LO_TIMBA, DRUMINS_HI_AGOGO
>3925e8	48 24 39 00 54 24 39 00
>3925f0	60 24 39 00 6c 24 39 00		              .dword DRUMINS_LO_AGOGO, DRUMINS_CABASA, DRUMINS_MARACAS,  DRUMINS_S_WHISTL
>3925f8	78 24 39 00 84 24 39 00
>392600	90 24 39 00 9c 24 39 00		              .dword DRUMINS_L_WHISTL, DRUMINS_S_GUIRO,  DRUMINS_L_GUIRO,  DRUMINS_CLAVES
>392608	a8 24 39 00 b4 24 39 00
>392610	c0 24 39 00 cc 24 39 00		              .dword DRUMINS_HI_WDBLK, DRUMINS_LO_WDBLK, DRUMINS_MU_CUICA, DRUMINS_OP_CUICA
>392618	d8 24 39 00 e4 24 39 00
>392620	f0 24 39 00 fc 24 39 00		              .dword DRUMINS_MU_TRNGL, DRUMINS_OP_TRNGL, DRUMINS_SHAKER, DRUMINS_TRIANGL1
>392628	08 25 39 00 14 25 39 00
>392630	20 25 39 00 2c 25 39 00		              .dword DRUMINS_TRIANGL2, DRUMINS_RIMSHOT3, DRUMINS_RIMSHOT4, DRUMINS_TAIKO
>392638	38 25 39 00 44 25 39 00

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Instruments.asm

>392640	00 33 5a b2 50 01 00 31		MIDI_INSTRUMENT_PIANO1     .text $00, $33, $5A, $B2, $50, $01, $00, $31, $00, $B1, $F5, $01
>392648	00 b1 f5 01
>39264c	00 31 49 f2 53 07 01 11		MIDI_INSTRUMENT_PIANO2     .text $00, $31, $49, $F2, $53, $07, $01, $11, $03, $F1, $F5, $00
>392654	03 f1 f5 00
>392658	00 31 95 d1 83 0d 01 32		MIDI_INSTRUMENT_PIANO3     .text $00, $31, $95, $D1, $83, $0D, $01, $32, $03, $C1, $F5, $00
>392660	03 c1 f5 00
>392664	00 34 9b f3 63 01 01 11		MIDI_INSTRUMENT_HONKTONK   .text $00, $34, $9B, $F3, $63, $01, $01, $11, $00, $92, $F5, $01
>39266c	00 92 f5 01
>392670	00 27 28 f8 b7 01 02 91		MIDI_INSTRUMENT_EP1        .text $00, $27, $28, $F8, $B7, $01, $02, $91, $00, $F1, $F9, $00
>392678	00 f1 f9 00
>39267c	00 1a 2d f3 ee 01 01 11		MIDI_INSTRUMENT_EP2        .text $00, $1A, $2D, $F3, $EE, $01, $01, $11, $00, $F1, $F5, $00
>392684	00 f1 f5 00
>392688	00 35 95 f2 58 0f 01 32		MIDI_INSTRUMENT_HARPSIC    .text $00, $35, $95, $F2, $58, $0F, $01, $32, $02, $81, $F6, $01
>392690	02 81 f6 01
>392694	00 31 85 c9 40 01 00 35		MIDI_INSTRUMENT_CLAVIC     .text $00, $31, $85, $C9, $40, $01, $00, $35, $00, $C2, $B9, $01
>39269c	00 c2 b9 01
>3926a0	00 09 15 c7 64 08 00 01		MIDI_INSTRUMENT_CELESTA    .text $00, $09, $15, $C7, $64, $08, $00, $01, $05, $B2, $35, $00
>3926a8	05 b2 35 00
>3926ac	00 06 03 f4 44 00 01 01		MIDI_INSTRUMENT_GLOCK      .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>3926b4	1b f2 34 00
>3926b8	00 04 06 a9 24 0a 01 01		MIDI_INSTRUMENT_MUSICBOX   .text $00, $04, $06, $A9, $24, $0A, $01, $01, $01, $F5, $74, $00
>3926c0	01 f5 74 00
>3926c4	00 d4 00 f6 33 00 00 f1		MIDI_INSTRUMENT_VIBES      .text $00, $D4, $00, $F6, $33, $00, $00, $F1, $00, $61, $E3, $00
>3926cc	00 61 e3 00
>3926d0	00 d4 00 f7 e8 04 00 d1		MIDI_INSTRUMENT_MARIMBA    .text $00, $D4, $00, $F7, $E8, $04, $00, $D1, $00, $A4, $64, $00
>3926d8	00 a4 64 00
>3926dc	00 36 16 f7 f7 01 00 31		MIDI_INSTRUMENT_XYLO       .text $00, $36, $16, $F7, $F7, $01, $00, $31, $07, $B5, $F5, $00
>3926e4	07 b5 f5 00
>3926e8	00 03 1b a2 43 0b 00 00		MIDI_INSTRUMENT_TUBEBELL   .text $00, $03, $1B, $A2, $43, $0B, $00, $00, $00, $F3, $74, $00
>3926f0	00 f3 74 00
>3926f4	00 c3 8e f8 35 01 01 11		MIDI_INSTRUMENT_SANTUR     .text $00, $C3, $8E, $F8, $35, $01, $01, $11, $00, $C3, $94, $01
>3926fc	00 c3 94 01
>392700	00 e2 07 f4 1b 06 01 e0		MIDI_INSTRUMENT_ORGAN1     .text $00, $E2, $07, $F4, $1B, $06, $01, $E0, $00, $F4, $0D, $01
>392708	00 f4 0d 01
>39270c	00 f2 00 f6 2c 04 00 f0		MIDI_INSTRUMENT_ORGAN2     .text $00, $F2, $00, $F6, $2C, $04, $00, $F0, $00, $F5, $0B, $01
>392714	00 f5 0b 01
>392718	00 f1 06 b6 15 0a 00 f0		MIDI_INSTRUMENT_ORGAN3     .text $00, $F1, $06, $B6, $15, $0A, $00, $F0, $00, $BF, $07, $00
>392720	00 bf 07 00
>392724	00 22 03 79 16 08 01 e0		MIDI_INSTRUMENT_PIPEORG    .text $00, $22, $03, $79, $16, $08, $01, $E0, $00, $6D, $08, $01
>39272c	00 6d 08 01
>392730	00 31 27 63 06 01 00 72		MIDI_INSTRUMENT_REEDORG    .text $00, $31, $27, $63, $06, $01, $00, $72, $00, $51, $17, $01
>392738	00 51 17 01
>39273c	00 b4 1d 53 16 0f 01 71		MIDI_INSTRUMENT_ACORDIAN   .text $00, $B4, $1D, $53, $16, $0F, $01, $71, $00, $51, $17, $01
>392744	00 51 17 01
>392748	00 25 29 97 15 01 00 32		MIDI_INSTRUMENT_HARMONIC   .text $00, $25, $29, $97, $15, $01, $00, $32, $00, $53, $08, $01
>392750	00 53 08 01
>392754	00 24 9e 67 15 0f 00 31		MIDI_INSTRUMENT_BANDNEON   .text $00, $24, $9E, $67, $15, $0F, $00, $31, $00, $53, $06, $01
>39275c	00 53 06 01
>392760	00 13 27 a3 b4 05 01 31		MIDI_INSTRUMENT_NYLONGT    .text $00, $13, $27, $A3, $B4, $05, $01, $31, $00, $D2, $F8, $00
>392768	00 d2 f8 00
>39276c	00 17 a3 f3 32 01 00 11		MIDI_INSTRUMENT_STEELGT    .text $00, $17, $A3, $F3, $32, $01, $00, $11, $00, $E2, $C7, $01
>392774	00 e2 c7 01
>392778	00 33 24 d2 c1 0f 01 31		MIDI_INSTRUMENT_JAZZGT     .text $00, $33, $24, $D2, $C1, $0F, $01, $31, $00, $F1, $9C, $00
>392780	00 f1 9c 00
>392784	00 31 05 f8 44 01 00 32		MIDI_INSTRUMENT_CLEANGT    .text $00, $31, $05, $F8, $44, $01, $00, $32, $02, $F2, $C9, $01
>39278c	02 f2 c9 01
>392790	00 21 09 9c 7b 07 00 02		MIDI_INSTRUMENT_MUTEGT     .text $00, $21, $09, $9C, $7B, $07, $00, $02, $03, $95, $FB, $00
>392798	03 95 fb 00
>39279c	00 21 84 81 98 07 01 21		MIDI_INSTRUMENT_OVERDGT    .text $00, $21, $84, $81, $98, $07, $01, $21, $04, $A1, $59, $00
>3927a4	04 a1 59 00
>3927a8	00 b1 0c 78 43 01 00 22		MIDI_INSTRUMENT_DISTGT     .text $00, $B1, $0C, $78, $43, $01, $00, $22, $03, $91, $FC, $03
>3927b0	03 91 fc 03
>3927b4	00 00 0a 82 8c 09 00 08		MIDI_INSTRUMENT_GTHARMS    .text $00, $00, $0A, $82, $8C, $09, $00, $08, $02, $B4, $EC, $00
>3927bc	02 b4 ec 00
>3927c0	00 21 13 ab 46 01 00 21		MIDI_INSTRUMENT_ACOUBASS   .text $00, $21, $13, $AB, $46, $01, $00, $21, $00, $93, $F7, $00
>3927c8	00 93 f7 00
>3927cc	00 01 0a f9 32 01 00 22		MIDI_INSTRUMENT_FINGBASS   .text $00, $01, $0A, $F9, $32, $01, $00, $22, $04, $C1, $58, $00
>3927d4	04 c1 58 00
>3927d8	00 21 07 fa 77 0b 00 22		MIDI_INSTRUMENT_PICKBASS   .text $00, $21, $07, $FA, $77, $0B, $00, $22, $02, $C3, $6A, $00
>3927e0	02 c3 6a 00
>3927e4	00 21 17 71 57 0b 00 21		MIDI_INSTRUMENT_FRETLESS   .text $00, $21, $17, $71, $57, $0B, $00, $21, $00, $62, $87, $00
>3927ec	00 62 87 00
>3927f0	00 25 01 fa 78 07 01 12		MIDI_INSTRUMENT_SLAPBAS1   .text $00, $25, $01, $FA, $78, $07, $01, $12, $00, $F3, $97, $00
>3927f8	00 f3 97 00
>3927fc	00 21 03 fa 88 0d 00 13		MIDI_INSTRUMENT_SLAPBAS2   .text $00, $21, $03, $FA, $88, $0D, $00, $13, $00, $B3, $97, $00
>392804	00 b3 97 00
>392808	00 21 09 f5 7f 09 01 23		MIDI_INSTRUMENT_SYNBASS1   .text $00, $21, $09, $F5, $7F, $09, $01, $23, $04, $F3, $CC, $00
>392810	04 f3 cc 00
>392814	00 01 10 a3 9b 09 00 01		MIDI_INSTRUMENT_SYNBASS2   .text $00, $01, $10, $A3, $9B, $09, $00, $01, $00, $93, $AA, $00
>39281c	00 93 aa 00
>392820	00 e2 19 f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLIN     .text $00, $E2, $19, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>392828	00 78 08 01
>39282c	00 e2 1c f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLA      .text $00, $E2, $1C, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>392834	00 78 08 01
>392838	00 61 19 69 16 0b 01 61		MIDI_INSTRUMENT_CELLO      .text $00, $61, $19, $69, $16, $0B, $01, $61, $00, $54, $27, $01
>392840	00 54 27 01
>392844	00 71 18 82 31 0d 01 32		MIDI_INSTRUMENT_CONTRAB    .text $00, $71, $18, $82, $31, $0D, $01, $32, $00, $61, $56, $00
>39284c	00 61 56 00
>392850	00 e2 23 70 06 0d 01 e1		MIDI_INSTRUMENT_TREMSTR    .text $00, $E2, $23, $70, $06, $0D, $01, $E1, $00, $75, $16, $01
>392858	00 75 16 01
>39285c	00 02 00 88 e6 08 00 61		MIDI_INSTRUMENT_PIZZ       .text $00, $02, $00, $88, $E6, $08, $00, $61, $00, $F5, $F6, $01
>392864	00 f5 f6 01
>392868	00 12 20 f6 d5 0f 01 11		MIDI_INSTRUMENT_HARP       .text $00, $12, $20, $F6, $D5, $0F, $01, $11, $80, $F3, $E3, $00
>392870	80 f3 e3 00
>392874	00 61 0e f4 f4 01 01 00		MIDI_INSTRUMENT_TIMPANI    .text $00, $61, $0E, $F4, $F4, $01, $01, $00, $00, $B5, $F5, $00
>39287c	00 b5 f5 00
>392880	00 61 1e 9c 04 0f 01 21		MIDI_INSTRUMENT_STRINGS    .text $00, $61, $1E, $9C, $04, $0F, $01, $21, $80, $71, $16, $00
>392888	80 71 16 00
>39288c	00 a2 2a c0 d6 0f 02 21		MIDI_INSTRUMENT_SLOWSTR    .text $00, $A2, $2A, $C0, $D6, $0F, $02, $21, $00, $30, $55, $01
>392894	00 30 55 01
>392898	00 61 21 72 35 0f 01 61		MIDI_INSTRUMENT_SYNSTR1    .text $00, $61, $21, $72, $35, $0F, $01, $61, $00, $62, $36, $01
>3928a0	00 62 36 01
>3928a4	00 21 1a 72 23 0f 01 21		MIDI_INSTRUMENT_SYNSTR2    .text $00, $21, $1A, $72, $23, $0F, $01, $21, $02, $51, $07, $00
>3928ac	02 51 07 00
>3928b0	00 e1 16 97 31 09 00 61		MIDI_INSTRUMENT_CHOIR      .text $00, $E1, $16, $97, $31, $09, $00, $61, $00, $62, $39, $00
>3928b8	00 62 39 00
>3928bc	00 22 c3 79 45 01 00 21		MIDI_INSTRUMENT_OOHS       .text $00, $22, $C3, $79, $45, $01, $00, $21, $00, $66, $27, $00
>3928c4	00 66 27 00
>3928c8	00 21 de 63 55 01 01 21		MIDI_INSTRUMENT_SYNVOX     .text $00, $21, $DE, $63, $55, $01, $01, $21, $00, $73, $46, $00
>3928d0	00 73 46 00
>3928d4	00 42 05 86 f7 0a 00 50		MIDI_INSTRUMENT_ORCHIT     .text $00, $42, $05, $86, $F7, $0A, $00, $50, $00, $74, $76, $01
>3928dc	00 74 76 01
>3928e0	00 31 1c 61 02 0f 00 61		MIDI_INSTRUMENT_TRUMPET    .text $00, $31, $1C, $61, $02, $0F, $00, $61, $81, $92, $38, $00
>3928e8	81 92 38 00
>3928ec	00 71 1e 52 23 0f 00 61		MIDI_INSTRUMENT_TROMBONE   .text $00, $71, $1E, $52, $23, $0F, $00, $61, $02, $71, $19, $00
>3928f4	02 71 19 00
>3928f8	00 21 1a 76 16 0f 00 21		MIDI_INSTRUMENT_TUBA       .text $00, $21, $1A, $76, $16, $0F, $00, $21, $01, $81, $09, $00
>392900	01 81 09 00
>392904	00 25 28 89 2c 07 02 20		MIDI_INSTRUMENT_MUTETRP    .text $00, $25, $28, $89, $2C, $07, $02, $20, $00, $83, $4B, $02
>39290c	00 83 4b 02
>392910	00 21 1f 79 16 09 00 a2		MIDI_INSTRUMENT_FRHORN     .text $00, $21, $1F, $79, $16, $09, $00, $A2, $05, $71, $59, $00
>392918	05 71 59 00
>39291c	00 21 19 87 16 0f 00 21		MIDI_INSTRUMENT_BRASS1     .text $00, $21, $19, $87, $16, $0F, $00, $21, $03, $82, $39, $00
>392924	03 82 39 00
>392928	00 21 17 75 35 0f 00 22		MIDI_INSTRUMENT_SYNBRAS1   .text $00, $21, $17, $75, $35, $0F, $00, $22, $82, $84, $17, $00
>392930	82 84 17 00
>392934	00 21 22 62 58 0f 00 21		MIDI_INSTRUMENT_SYNBRAS2   .text $00, $21, $22, $62, $58, $0F, $00, $21, $02, $72, $16, $00
>39293c	02 72 16 00
>392940	00 b1 1b 59 07 01 01 a1		MIDI_INSTRUMENT_SOPSAX     .text $00, $B1, $1B, $59, $07, $01, $01, $A1, $00, $7B, $0A, $00
>392948	00 7b 0a 00
>39294c	00 21 16 9f 04 0b 00 21		MIDI_INSTRUMENT_ALTOSAX    .text $00, $21, $16, $9F, $04, $0B, $00, $21, $00, $85, $0C, $01
>392954	00 85 0c 01
>392958	00 21 0f a8 20 0d 00 23		MIDI_INSTRUMENT_TENSAX     .text $00, $21, $0F, $A8, $20, $0D, $00, $23, $00, $7B, $0A, $01
>392960	00 7b 0a 01
>392964	00 21 0f 88 04 09 00 26		MIDI_INSTRUMENT_BARISAX    .text $00, $21, $0F, $88, $04, $09, $00, $26, $00, $79, $18, $01
>39296c	00 79 18 01
>392970	00 31 18 8f 05 01 00 32		MIDI_INSTRUMENT_OBOE       .text $00, $31, $18, $8F, $05, $01, $00, $32, $01, $73, $08, $00
>392978	01 73 08 00
>39297c	00 a1 0a 8c 37 01 01 24		MIDI_INSTRUMENT_ENGLHORN   .text $00, $A1, $0A, $8C, $37, $01, $01, $24, $04, $77, $0A, $00
>392984	04 77 0a 00
>392988	00 31 04 a8 67 0b 00 75		MIDI_INSTRUMENT_BASSOON    .text $00, $31, $04, $A8, $67, $0B, $00, $75, $00, $51, $19, $00
>392990	00 51 19 00
>392994	00 a2 1f 77 26 01 01 21		MIDI_INSTRUMENT_CLARINET   .text $00, $A2, $1F, $77, $26, $01, $01, $21, $01, $74, $09, $00
>39299c	01 74 09 00
>3929a0	00 e1 07 b8 94 01 01 21		MIDI_INSTRUMENT_PICCOLO    .text $00, $E1, $07, $B8, $94, $01, $01, $21, $01, $63, $28, $00
>3929a8	01 63 28 00
>3929ac	00 a1 93 87 59 01 00 e1		MIDI_INSTRUMENT_FLUTE1     .text $00, $A1, $93, $87, $59, $01, $00, $E1, $00, $65, $0A, $00
>3929b4	00 65 0a 00
>3929b8	00 22 10 9f 38 01 00 61		MIDI_INSTRUMENT_RECORDER   .text $00, $22, $10, $9F, $38, $01, $00, $61, $00, $67, $29, $00
>3929c0	00 67 29 00
>3929c4	00 e2 0d 88 9a 01 01 21		MIDI_INSTRUMENT_PANFLUTE   .text $00, $E2, $0D, $88, $9A, $01, $01, $21, $00, $67, $09, $00
>3929cc	00 67 09 00
>3929d0	00 a2 10 98 94 0f 00 21		MIDI_INSTRUMENT_BOTTLEB    .text $00, $A2, $10, $98, $94, $0F, $00, $21, $01, $6A, $28, $00
>3929d8	01 6a 28 00
>3929dc	00 f1 1c 86 26 0f 00 f1		MIDI_INSTRUMENT_SHAKU      .text $00, $F1, $1C, $86, $26, $0F, $00, $F1, $00, $55, $27, $00
>3929e4	00 55 27 00
>3929e8	00 e1 3f 9f 09 00 00 e1		MIDI_INSTRUMENT_WHISTLE    .text $00, $E1, $3F, $9F, $09, $00, $00, $E1, $00, $6F, $08, $00
>3929f0	00 6f 08 00
>3929f4	00 e2 3b f7 19 01 00 21		MIDI_INSTRUMENT_OCARINA    .text $00, $E2, $3B, $F7, $19, $01, $00, $21, $00, $7A, $07, $00
>3929fc	00 7a 07 00
>392a00	00 22 1e 92 0c 0f 00 61		MIDI_INSTRUMENT_SQUARWAV   .text $00, $22, $1E, $92, $0C, $0F, $00, $61, $06, $A2, $0D, $00
>392a08	06 a2 0d 00
>392a0c	00 21 15 f4 22 0f 01 21		MIDI_INSTRUMENT_SAWWAV     .text $00, $21, $15, $F4, $22, $0F, $01, $21, $00, $A3, $5F, $00
>392a14	00 a3 5f 00
>392a18	00 f2 20 47 66 03 01 f1		MIDI_INSTRUMENT_SYNCALLI   .text $00, $F2, $20, $47, $66, $03, $01, $F1, $00, $42, $27, $00
>392a20	00 42 27 00
>392a24	00 61 19 88 28 0f 00 61		MIDI_INSTRUMENT_CHIFLEAD   .text $00, $61, $19, $88, $28, $0F, $00, $61, $05, $B2, $49, $00
>392a2c	05 b2 49 00
>392a30	00 21 16 82 1b 01 00 23		MIDI_INSTRUMENT_CHARANG    .text $00, $21, $16, $82, $1B, $01, $00, $23, $00, $B2, $79, $01
>392a38	00 b2 79 01
>392a3c	00 21 00 ca 93 01 00 22		MIDI_INSTRUMENT_SOLOVOX    .text $00, $21, $00, $CA, $93, $01, $00, $22, $00, $7A, $1A, $00
>392a44	00 7a 1a 00
>392a48	00 23 00 92 c9 08 01 22		MIDI_INSTRUMENT_FIFTHSAW   .text $00, $23, $00, $92, $C9, $08, $01, $22, $00, $82, $28, $01
>392a50	00 82 28 01
>392a54	00 21 1d f3 7b 0f 00 22		MIDI_INSTRUMENT_BASSLEAD   .text $00, $21, $1D, $F3, $7B, $0F, $00, $22, $02, $C3, $5F, $00
>392a5c	02 c3 5f 00
>392a60	00 e1 00 81 25 00 01 a6		MIDI_INSTRUMENT_FANTASIA   .text $00, $E1, $00, $81, $25, $00, $01, $A6, $86, $C4, $95, $01
>392a68	86 c4 95 01
>392a6c	00 21 27 31 01 0f 00 21		MIDI_INSTRUMENT_WARMPAD    .text $00, $21, $27, $31, $01, $0F, $00, $21, $00, $44, $15, $00
>392a74	00 44 15 00
>392a78	00 60 14 83 35 0d 02 61		MIDI_INSTRUMENT_POLYSYN    .text $00, $60, $14, $83, $35, $0D, $02, $61, $00, $D1, $06, $00
>392a80	00 d1 06 00
>392a84	00 e1 5c d3 01 01 01 62		MIDI_INSTRUMENT_SPACEVOX   .text $00, $E1, $5C, $D3, $01, $01, $01, $62, $00, $82, $37, $00
>392a8c	00 82 37 00
>392a90	00 28 38 34 86 01 02 21		MIDI_INSTRUMENT_BOWEDGLS   .text $00, $28, $38, $34, $86, $01, $02, $21, $00, $41, $35, $00
>392a98	00 41 35 00
>392a9c	00 24 12 52 f3 05 01 23		MIDI_INSTRUMENT_METALPAD   .text $00, $24, $12, $52, $F3, $05, $01, $23, $02, $32, $F5, $01
>392aa4	02 32 f5 01
>392aa8	00 61 1d 62 a6 0b 00 a1		MIDI_INSTRUMENT_HALOPAD    .text $00, $61, $1D, $62, $A6, $0B, $00, $A1, $00, $61, $26, $00
>392ab0	00 61 26 00
>392ab4	00 22 0f 22 d5 0b 01 21		MIDI_INSTRUMENT_SWEEPPAD   .text $00, $22, $0F, $22, $D5, $0B, $01, $21, $84, $3F, $05, $01
>392abc	84 3f 05 01
>392ac0	00 e3 1f f9 24 01 00 31		MIDI_INSTRUMENT_ICERAIN    .text $00, $E3, $1F, $F9, $24, $01, $00, $31, $01, $D1, $F6, $00
>392ac8	01 d1 f6 00
>392acc	00 63 00 41 55 06 01 a2		MIDI_INSTRUMENT_SOUNDTRK   .text $00, $63, $00, $41, $55, $06, $01, $A2, $00, $41, $05, $01
>392ad4	00 41 05 01
>392ad8	00 c7 25 a7 65 01 01 c1		MIDI_INSTRUMENT_CRYSTAL    .text $00, $C7, $25, $A7, $65, $01, $01, $C1, $05, $F3, $E4, $00
>392ae0	05 f3 e4 00
>392ae4	00 e3 19 f7 b7 01 01 61		MIDI_INSTRUMENT_ATMOSPH    .text $00, $E3, $19, $F7, $B7, $01, $01, $61, $00, $92, $F5, $01
>392aec	00 92 f5 01
>392af0	00 66 9b a8 44 0f 00 41		MIDI_INSTRUMENT_BRIGHT     .text $00, $66, $9B, $A8, $44, $0F, $00, $41, $04, $F2, $E4, $01
>392af8	04 f2 e4 01
>392afc	00 61 20 22 75 0d 00 61		MIDI_INSTRUMENT_GOBLIN     .text $00, $61, $20, $22, $75, $0D, $00, $61, $00, $45, $25, $00
>392b04	00 45 25 00
>392b08	00 e1 21 f6 84 0f 00 e1		MIDI_INSTRUMENT_ECHODROP   .text $00, $E1, $21, $F6, $84, $0F, $00, $E1, $01, $A3, $36, $00
>392b10	01 a3 36 00
>392b14	00 e2 14 73 64 0b 01 e1		MIDI_INSTRUMENT_STARTHEM   .text $00, $E2, $14, $73, $64, $0B, $01, $E1, $01, $98, $05, $01
>392b1c	01 98 05 01
>392b20	00 21 0b 72 34 09 00 24		MIDI_INSTRUMENT_SITAR      .text $00, $21, $0B, $72, $34, $09, $00, $24, $02, $A3, $F6, $01
>392b28	02 a3 f6 01
>392b2c	00 21 16 f4 53 0d 00 04		MIDI_INSTRUMENT_BANJO      .text $00, $21, $16, $F4, $53, $0D, $00, $04, $00, $F6, $F8, $00
>392b34	00 f6 f8 00
>392b38	00 21 18 da 02 0d 00 35		MIDI_INSTRUMENT_SHAMISEN   .text $00, $21, $18, $DA, $02, $0D, $00, $35, $00, $F3, $F5, $00
>392b40	00 f3 f5 00
>392b44	00 25 0f fa 63 09 00 02		MIDI_INSTRUMENT_KOTO       .text $00, $25, $0F, $FA, $63, $09, $00, $02, $00, $94, $E5, $01
>392b4c	00 94 e5 01
>392b50	00 32 07 f9 96 01 00 11		MIDI_INSTRUMENT_KALIMBA    .text $00, $32, $07, $F9, $96, $01, $00, $11, $00, $84, $44, $00
>392b58	00 84 44 00
>392b5c	00 20 0e 97 18 09 02 25		MIDI_INSTRUMENT_BAGPIPE    .text $00, $20, $0E, $97, $18, $09, $02, $25, $03, $83, $18, $01
>392b64	03 83 18 01
>392b68	00 61 18 f6 29 01 00 62		MIDI_INSTRUMENT_FIDDLE     .text $00, $61, $18, $F6, $29, $01, $00, $62, $01, $78, $08, $01
>392b70	01 78 08 01
>392b74	00 e6 21 76 19 0b 00 61		MIDI_INSTRUMENT_SHANNAI    .text $00, $E6, $21, $76, $19, $0B, $00, $61, $03, $8E, $08, $01
>392b7c	03 8e 08 01
>392b80	00 27 23 f0 d4 01 00 05		MIDI_INSTRUMENT_TINKLBEL   .text $00, $27, $23, $F0, $D4, $01, $00, $05, $09, $F2, $46, $00
>392b88	09 f2 46 00
>392b8c	00 1c 0c f9 31 0f 01 15		MIDI_INSTRUMENT_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>392b94	00 96 e8 01
>392b98	00 02 00 75 16 06 02 01		MIDI_INSTRUMENT_STEELDRM   .text $00, $02, $00, $75, $16, $06, $02, $01, $00, $F6, $F6, $01
>392ba0	00 f6 f6 01
>392ba4	00 25 1b fa f2 01 00 12		MIDI_INSTRUMENT_WOODBLOK   .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>392bac	00 f6 9a 00
>392bb0	00 02 1d f5 93 01 00 00		MIDI_INSTRUMENT_TAIKO      .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>392bb8	00 c6 45 00
>392bbc	00 11 15 f5 32 05 00 10		MIDI_INSTRUMENT_MELOTOM    .text $00, $11, $15, $F5, $32, $05, $00, $10, $00, $F4, $B4, $00
>392bc4	00 f4 b4 00
>392bc8	00 22 06 fa 99 09 00 01		MIDI_INSTRUMENT_SYNDRUM    .text $00, $22, $06, $FA, $99, $09, $00, $01, $00, $D5, $25, $00
>392bd0	00 d5 25 00
>392bd4	00 2e 00 ff 00 0f 02 0e		MIDI_INSTRUMENT_REVRSCYM   .text $00, $2E, $00, $FF, $00, $0F, $02, $0E, $0E, $21, $2D, $00
>392bdc	0e 21 2d 00
>392be0	00 30 0b 56 e4 01 01 17		MIDI_INSTRUMENT_FRETNOIS   .text $00, $30, $0B, $56, $E4, $01, $01, $17, $00, $55, $87, $02
>392be8	00 55 87 02
>392bec	00 24 00 ff 03 0d 00 05		MIDI_INSTRUMENT_BRTHNOIS   .text $00, $24, $00, $FF, $03, $0D, $00, $05, $08, $98, $87, $01
>392bf4	08 98 87 01
>392bf8	00 0e 00 f0 00 0f 02 0a		MIDI_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F0, $00, $0F, $02, $0A, $04, $17, $04, $03
>392c00	04 17 04 03
>392c04	00 20 08 f6 f7 01 00 0e		MIDI_INSTRUMENT_BIRDS      .text $00, $20, $08, $F6, $F7, $01, $00, $0E, $05, $77, $F9, $02
>392c0c	05 77 f9 02
>392c10	00 20 14 f1 08 01 00 2e		MIDI_INSTRUMENT_TELEPHON   .text $00, $20, $14, $F1, $08, $01, $00, $2E, $02, $F4, $08, $00
>392c18	02 f4 08 00
>392c1c	00 20 04 f2 00 03 01 23		MIDI_INSTRUMENT_HELICOPT   .text $00, $20, $04, $F2, $00, $03, $01, $23, $00, $36, $05, $01
>392c24	00 36 05 01
>392c28	00 2e 00 ff 02 0f 00 2a		MIDI_INSTRUMENT_APPLAUSE   .text $00, $2E, $00, $FF, $02, $0F, $00, $2A, $05, $32, $55, $03
>392c30	05 32 55 03
>392c34	00 20 00 a1 ef 0f 00 10		MIDI_INSTRUMENT_GUNSHOT    .text $00, $20, $00, $A1, $EF, $0F, $00, $10, $00, $F3, $DF, $00
>392c3c	00 f3 df 00
>392c40	40 26 39 00 4c 26 39 00		midiInstruments .dword MIDI_INSTRUMENT_PIANO1,   MIDI_INSTRUMENT_PIANO2,   MIDI_INSTRUMENT_PIANO3,   MIDI_INSTRUMENT_HONKTONK, MIDI_INSTRUMENT_EP1,      MIDI_INSTRUMENT_EP2
>392c48	58 26 39 00 64 26 39 00 70 26 39 00 7c 26 39 00
>392c58	88 26 39 00 94 26 39 00		              	.dword MIDI_INSTRUMENT_HARPSIC,  MIDI_INSTRUMENT_CLAVIC,   MIDI_INSTRUMENT_CELESTA,  MIDI_INSTRUMENT_GLOCK,    MIDI_INSTRUMENT_MUSICBOX, MIDI_INSTRUMENT_VIBES
>392c60	a0 26 39 00 ac 26 39 00 b8 26 39 00 c4 26 39 00
>392c70	d0 26 39 00 dc 26 39 00		              	.dword MIDI_INSTRUMENT_MARIMBA,  MIDI_INSTRUMENT_XYLO,     MIDI_INSTRUMENT_TUBEBELL, MIDI_INSTRUMENT_SANTUR,   MIDI_INSTRUMENT_ORGAN1,   MIDI_INSTRUMENT_ORGAN2
>392c78	e8 26 39 00 f4 26 39 00 00 27 39 00 0c 27 39 00
>392c88	18 27 39 00 24 27 39 00		              	.dword MIDI_INSTRUMENT_ORGAN3,   MIDI_INSTRUMENT_PIPEORG,  MIDI_INSTRUMENT_REEDORG,  MIDI_INSTRUMENT_ACORDIAN, MIDI_INSTRUMENT_HARMONIC, MIDI_INSTRUMENT_BANDNEON
>392c90	30 27 39 00 3c 27 39 00 48 27 39 00 54 27 39 00
>392ca0	60 27 39 00 6c 27 39 00		              	.dword MIDI_INSTRUMENT_NYLONGT,  MIDI_INSTRUMENT_STEELGT,  MIDI_INSTRUMENT_JAZZGT,   MIDI_INSTRUMENT_CLEANGT,  MIDI_INSTRUMENT_MUTEGT,   MIDI_INSTRUMENT_OVERDGT
>392ca8	78 27 39 00 84 27 39 00 90 27 39 00 9c 27 39 00
>392cb8	a8 27 39 00 b4 27 39 00		              	.dword MIDI_INSTRUMENT_DISTGT,   MIDI_INSTRUMENT_GTHARMS,  MIDI_INSTRUMENT_ACOUBASS, MIDI_INSTRUMENT_FINGBASS, MIDI_INSTRUMENT_PICKBASS, MIDI_INSTRUMENT_FRETLESS
>392cc0	c0 27 39 00 cc 27 39 00 d8 27 39 00 e4 27 39 00
>392cd0	f0 27 39 00 fc 27 39 00		              	.dword MIDI_INSTRUMENT_SLAPBAS1, MIDI_INSTRUMENT_SLAPBAS2, MIDI_INSTRUMENT_SYNBASS1, MIDI_INSTRUMENT_SYNBASS2, MIDI_INSTRUMENT_VIOLIN,   MIDI_INSTRUMENT_VIOLA
>392cd8	08 28 39 00 14 28 39 00 20 28 39 00 2c 28 39 00
>392ce8	38 28 39 00 44 28 39 00		              	.dword MIDI_INSTRUMENT_CELLO,    MIDI_INSTRUMENT_CONTRAB,  MIDI_INSTRUMENT_TREMSTR,  MIDI_INSTRUMENT_PIZZ,     MIDI_INSTRUMENT_HARP,     MIDI_INSTRUMENT_TIMPANI
>392cf0	50 28 39 00 5c 28 39 00 68 28 39 00 74 28 39 00
>392d00	80 28 39 00 8c 28 39 00		              	.dword MIDI_INSTRUMENT_STRINGS,  MIDI_INSTRUMENT_SLOWSTR,  MIDI_INSTRUMENT_SYNSTR1,  MIDI_INSTRUMENT_SYNSTR2,  MIDI_INSTRUMENT_CHOIR,    MIDI_INSTRUMENT_OOHS
>392d08	98 28 39 00 a4 28 39 00 b0 28 39 00 bc 28 39 00
>392d18	c8 28 39 00 d4 28 39 00		              	.dword MIDI_INSTRUMENT_SYNVOX,   MIDI_INSTRUMENT_ORCHIT,   MIDI_INSTRUMENT_TRUMPET,  MIDI_INSTRUMENT_TROMBONE, MIDI_INSTRUMENT_TUBA,     MIDI_INSTRUMENT_MUTETRP
>392d20	e0 28 39 00 ec 28 39 00 f8 28 39 00 04 29 39 00
>392d30	10 29 39 00 1c 29 39 00		              	.dword MIDI_INSTRUMENT_FRHORN,   MIDI_INSTRUMENT_BRASS1,   MIDI_INSTRUMENT_SYNBRAS1, MIDI_INSTRUMENT_SYNBRAS2, MIDI_INSTRUMENT_SOPSAX,   MIDI_INSTRUMENT_ALTOSAX
>392d38	28 29 39 00 34 29 39 00 40 29 39 00 4c 29 39 00
>392d48	58 29 39 00 64 29 39 00		              	.dword MIDI_INSTRUMENT_TENSAX,   MIDI_INSTRUMENT_BARISAX,  MIDI_INSTRUMENT_OBOE,     MIDI_INSTRUMENT_ENGLHORN, MIDI_INSTRUMENT_BASSOON,  MIDI_INSTRUMENT_CLARINET
>392d50	70 29 39 00 7c 29 39 00 88 29 39 00 94 29 39 00
>392d60	a0 29 39 00 ac 29 39 00		              	.dword MIDI_INSTRUMENT_PICCOLO,  MIDI_INSTRUMENT_FLUTE1,   MIDI_INSTRUMENT_RECORDER, MIDI_INSTRUMENT_PANFLUTE, MIDI_INSTRUMENT_BOTTLEB,  MIDI_INSTRUMENT_SHAKU
>392d68	b8 29 39 00 c4 29 39 00 d0 29 39 00 dc 29 39 00
>392d78	e8 29 39 00 f4 29 39 00		              	.dword MIDI_INSTRUMENT_WHISTLE,  MIDI_INSTRUMENT_OCARINA,  MIDI_INSTRUMENT_SQUARWAV, MIDI_INSTRUMENT_SAWWAV,   MIDI_INSTRUMENT_SYNCALLI, MIDI_INSTRUMENT_CHIFLEAD
>392d80	00 2a 39 00 0c 2a 39 00 18 2a 39 00 24 2a 39 00
>392d90	30 2a 39 00 3c 2a 39 00		              	.dword MIDI_INSTRUMENT_CHARANG,  MIDI_INSTRUMENT_SOLOVOX,  MIDI_INSTRUMENT_FIFTHSAW, MIDI_INSTRUMENT_BASSLEAD, MIDI_INSTRUMENT_FANTASIA, MIDI_INSTRUMENT_WARMPAD
>392d98	48 2a 39 00 54 2a 39 00 60 2a 39 00 6c 2a 39 00
>392da8	78 2a 39 00 84 2a 39 00		              	.dword MIDI_INSTRUMENT_POLYSYN,  MIDI_INSTRUMENT_SPACEVOX, MIDI_INSTRUMENT_BOWEDGLS, MIDI_INSTRUMENT_METALPAD, MIDI_INSTRUMENT_HALOPAD,  MIDI_INSTRUMENT_SWEEPPAD
>392db0	90 2a 39 00 9c 2a 39 00 a8 2a 39 00 b4 2a 39 00
>392dc0	c0 2a 39 00 cc 2a 39 00		              	.dword MIDI_INSTRUMENT_ICERAIN,  MIDI_INSTRUMENT_SOUNDTRK, MIDI_INSTRUMENT_CRYSTAL,  MIDI_INSTRUMENT_ATMOSPH,  MIDI_INSTRUMENT_BRIGHT,   MIDI_INSTRUMENT_GOBLIN
>392dc8	d8 2a 39 00 e4 2a 39 00 f0 2a 39 00 fc 2a 39 00
>392dd8	08 2b 39 00 14 2b 39 00		              	.dword MIDI_INSTRUMENT_ECHODROP, MIDI_INSTRUMENT_STARTHEM, MIDI_INSTRUMENT_SITAR,    MIDI_INSTRUMENT_BANJO,    MIDI_INSTRUMENT_SHAMISEN, MIDI_INSTRUMENT_KOTO
>392de0	20 2b 39 00 2c 2b 39 00 38 2b 39 00 44 2b 39 00
>392df0	50 2b 39 00 5c 2b 39 00		              	.dword MIDI_INSTRUMENT_KALIMBA,  MIDI_INSTRUMENT_BAGPIPE,  MIDI_INSTRUMENT_FIDDLE,   MIDI_INSTRUMENT_SHANNAI,  MIDI_INSTRUMENT_TINKLBEL, MIDI_INSTRUMENT_AGOGO
>392df8	68 2b 39 00 74 2b 39 00 80 2b 39 00 8c 2b 39 00
>392e08	98 2b 39 00 a4 2b 39 00		              	.dword MIDI_INSTRUMENT_STEELDRM, MIDI_INSTRUMENT_WOODBLOK, MIDI_INSTRUMENT_TAIKO,    MIDI_INSTRUMENT_MELOTOM,  MIDI_INSTRUMENT_SYNDRUM,  MIDI_INSTRUMENT_REVRSCYM
>392e10	b0 2b 39 00 bc 2b 39 00 c8 2b 39 00 d4 2b 39 00
>392e20	e0 2b 39 00 ec 2b 39 00		              	.dword MIDI_INSTRUMENT_FRETNOIS, MIDI_INSTRUMENT_BRTHNOIS, MIDI_INSTRUMENT_SEASHORE, MIDI_INSTRUMENT_BIRDS,    MIDI_INSTRUMENT_TELEPHON, MIDI_INSTRUMENT_HELICOPT
>392e28	f8 2b 39 00 04 2c 39 00 10 2c 39 00 1c 2c 39 00
>392e38	28 2c 39 00 34 2c 39 00		              	.dword MIDI_INSTRUMENT_APPLAUSE, MIDI_INSTRUMENT_GUNSHOT

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Instruments_Win31.asm

>392e40	00 01 8f f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO1     .text $00, $01, $8F, $F2, $F4, $38, $00, $01, $0D, $F2, $F7, $00
>392e48	0d f2 f7 00
>392e4c	00 01 4b f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO2     .text $00, $01, $4B, $F2, $F4, $38, $00, $01, $07, $F2, $F7, $00
>392e54	07 f2 f7 00
>392e58	00 01 49 f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO3     .text $00, $01, $49, $F2, $F4, $38, $00, $01, $07, $F2, $F6, $00
>392e60	07 f2 f6 00
>392e64	00 81 12 f2 f7 00 00 41		MIDIW31_INSTRUMENT_HONKTONK   .text $00, $81, $12, $F2, $F7, $00, $00, $41, $07, $F2, $F7, $00
>392e6c	07 f2 f7 00
>392e70	00 01 57 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP1        .text $00, $01, $57, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>392e78	07 f2 f7 00
>392e7c	00 01 93 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP2        .text $00, $01, $93, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>392e84	07 f2 f7 00
>392e88	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HARPSIC    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392e90	00 00 00 00
>392e94	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLAVIC     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392e9c	00 00 00 00
>392ea0	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELESTA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392ea8	00 00 00 00
>392eac	00 07 97 f3 f2 32 00 11		MIDIW31_INSTRUMENT_GLOCK      .text $00, $07, $97, $F3, $F2, $32, $00, $11, $87, $F2, $F1, $00
>392eb4	87 f2 f1 00
>392eb8	00 17 21 54 f4 32 00 01		MIDIW31_INSTRUMENT_MUSICBOX   .text $00, $17, $21, $54, $F4, $32, $00, $01, $07, $F4, $F4, $00
>392ec0	07 f4 f4 00
>392ec4	00 98 62 f3 f6 30 00 81		MIDIW31_INSTRUMENT_VIBES      .text $00, $98, $62, $F3, $F6, $30, $00, $81, $07, $F2, $F6, $00
>392ecc	07 f2 f6 00
>392ed0	00 18 23 f6 f6 00 00 01		MIDIW31_INSTRUMENT_MARIMBA    .text $00, $18, $23, $F6, $F6, $00, $00, $01, $07, $E7, $F7, $00
>392ed8	07 e7 f7 00
>392edc	00 15 91 f6 f6 00 00 01		MIDIW31_INSTRUMENT_XYLO       .text $00, $15, $91, $F6, $F6, $00, $00, $01, $07, $F6, $F6, $00
>392ee4	07 f6 f6 00
>392ee8	00 45 59 d3 f3 00 00 81		MIDIW31_INSTRUMENT_TUBEBELL   .text $00, $45, $59, $D3, $F3, $00, $00, $81, $87, $A3, $F3, $00
>392ef0	87 a3 f3 00
>392ef4	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SANTUR     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392efc	00 00 00 00
>392f00	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f08	00 00 00 00
>392f0c	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN2     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f14	00 00 00 00
>392f18	00 70 44 aa 18 34 00 b1		MIDIW31_INSTRUMENT_ORGAN3     .text $00, $70, $44, $AA, $18, $34, $00, $B1, $07, $8A, $08, $00
>392f20	07 8a 08 00
>392f24	00 23 93 97 23 34 01 b1		MIDIW31_INSTRUMENT_PIPEORG    .text $00, $23, $93, $97, $23, $34, $01, $B1, $07, $55, $14, $00
>392f2c	07 55 14 00
>392f30	00 61 13 97 04 30 01 b1		MIDIW31_INSTRUMENT_REEDORG    .text $00, $61, $13, $97, $04, $30, $01, $B1, $87, $55, $04, $00
>392f38	87 55 04 00
>392f3c	00 24 48 98 2a 30 01 b1		MIDIW31_INSTRUMENT_ACORDIAN   .text $00, $24, $48, $98, $2A, $30, $01, $B1, $07, $46, $1A, $00
>392f44	07 46 1a 00
>392f48	00 61 13 91 06 00 01 21		MIDIW31_INSTRUMENT_HARMONIC   .text $00, $61, $13, $91, $06, $00, $01, $21, $07, $61, $07, $00
>392f50	07 61 07 00
>392f54	00 21 13 71 06 00 00 a1		MIDIW31_INSTRUMENT_BANDNEON   .text $00, $21, $13, $71, $06, $00, $00, $A1, $90, $61, $07, $00
>392f5c	90 61 07 00
>392f60	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_NYLONGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f68	00 00 00 00
>392f6c	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f74	00 00 00 00
>392f78	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_JAZZGT     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f80	00 00 00 00
>392f84	00 03 87 f6 22 36 01 21		MIDIW31_INSTRUMENT_CLEANGT    .text $00, $03, $87, $F6, $22, $36, $01, $21, $87, $F3, $F8, $00
>392f8c	87 f3 f8 00
>392f90	00 03 47 f9 54 30 00 21		MIDIW31_INSTRUMENT_MUTEGT     .text $00, $03, $47, $F9, $54, $30, $00, $21, $07, $F6, $3A, $00
>392f98	07 f6 3a 00
>392f9c	00 23 4a 91 41 38 01 21		MIDIW31_INSTRUMENT_OVERDGT    .text $00, $23, $4A, $91, $41, $38, $01, $21, $0C, $84, $19, $00
>392fa4	0c 84 19 00
>392fa8	00 23 4a 95 19 32 01 21		MIDIW31_INSTRUMENT_DISTGT     .text $00, $23, $4A, $95, $19, $32, $01, $21, $07, $94, $19, $00
>392fb0	07 94 19 00
>392fb4	00 09 a1 20 4f 00 00 84		MIDIW31_INSTRUMENT_GTHARMS    .text $00, $09, $A1, $20, $4F, $00, $00, $84, $87, $D1, $F8, $00
>392fbc	87 d1 f8 00
>392fc0	00 21 1e 94 06 00 00 a2		MIDIW31_INSTRUMENT_ACOUBASS   .text $00, $21, $1E, $94, $06, $00, $00, $A2, $07, $C3, $A6, $00
>392fc8	07 c3 a6 00
>392fcc	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FINGBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392fd4	00 00 00 00
>392fd8	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_PICKBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392fe0	00 00 00 00
>392fe4	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRETLESS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392fec	00 00 00 00
>392ff0	00 01 8b a1 9a 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS1   .text $00, $01, $8B, $A1, $9A, $38, $00, $21, $47, $F2, $DF, $00
>392ff8	47 f2 df 00
>392ffc	00 21 8b a2 16 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS2   .text $00, $21, $8B, $A2, $16, $38, $00, $21, $0F, $A1, $DF, $00
>393004	0f a1 df 00
>393008	00 31 8b f4 e8 3a 00 31		MIDIW31_INSTRUMENT_SYNBASS1   .text $00, $31, $8B, $F4, $E8, $3A, $00, $31, $07, $F1, $78, $00
>393010	07 f1 78 00
>393014	00 31 12 f1 28 30 00 31		MIDIW31_INSTRUMENT_SYNBASS2   .text $00, $31, $12, $F1, $28, $30, $00, $31, $07, $F1, $18, $00
>39301c	07 f1 18 00
>393020	00 31 15 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLIN     .text $00, $31, $15, $DD, $13, $00, $01, $21, $07, $56, $26, $00
>393028	07 56 26 00
>39302c	00 31 16 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLA      .text $00, $31, $16, $DD, $13, $00, $01, $21, $07, $66, $06, $00
>393034	07 66 06 00
>393038	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELLO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393040	00 00 00 00
>393044	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CONTRAB    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39304c	00 00 00 00
>393050	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TREMSTR    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393058	00 00 00 00
>39305c	00 02 1a f5 75 30 01 01		MIDIW31_INSTRUMENT_PIZZ       .text $00, $02, $1A, $F5, $75, $30, $01, $01, $87, $85, $35, $00
>393064	87 85 35 00
>393068	00 02 1d f5 75 30 01 01		MIDIW31_INSTRUMENT_HARP       .text $00, $02, $1D, $F5, $75, $30, $01, $01, $87, $F3, $F4, $00
>393070	87 f3 f4 00
>393074	00 10 41 f5 05 32 01 11		MIDIW31_INSTRUMENT_TIMPANI    .text $00, $10, $41, $F5, $05, $32, $01, $11, $07, $F2, $C3, $00
>39307c	07 f2 c3 00
>393080	00 21 9b b1 25 3c 01 a2		MIDIW31_INSTRUMENT_STRINGS    .text $00, $21, $9B, $B1, $25, $3C, $01, $A2, $08, $72, $08, $00
>393088	08 72 08 00
>39308c	00 a1 98 7f 03 00 01 21		MIDIW31_INSTRUMENT_SLOWSTR    .text $00, $A1, $98, $7F, $03, $00, $01, $21, $07, $3F, $07, $01
>393094	07 3f 07 01
>393098	00 a1 93 c1 12 00 00 61		MIDIW31_INSTRUMENT_SYNSTR1    .text $00, $A1, $93, $C1, $12, $00, $00, $61, $07, $4F, $05, $00
>3930a0	07 4f 05 00
>3930a4	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNSTR2    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3930ac	00 00 00 00
>3930b0	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CHOIR      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3930b8	00 00 00 00
>3930bc	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OOHS       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3930c4	00 00 00 00
>3930c8	00 71 57 54 05 3c 00 72		MIDIW31_INSTRUMENT_SYNVOX     .text $00, $71, $57, $54, $05, $3C, $00, $72, $07, $7A, $05, $00
>3930d0	07 7a 05 00
>3930d4	00 90 00 54 63 38 00 41		MIDIW31_INSTRUMENT_ORCHIT     .text $00, $90, $00, $54, $63, $38, $00, $41, $07, $A5, $45, $00
>3930dc	07 a5 45 00
>3930e0	00 21 92 85 17 3c 00 21		MIDIW31_INSTRUMENT_TRUMPET    .text $00, $21, $92, $85, $17, $3C, $00, $21, $08, $8F, $09, $00
>3930e8	08 8f 09 00
>3930ec	00 21 94 75 17 32 00 21		MIDIW31_INSTRUMENT_TROMBONE   .text $00, $21, $94, $75, $17, $32, $00, $21, $0C, $8F, $09, $00
>3930f4	0c 8f 09 00
>3930f8	00 21 94 76 15 00 00 61		MIDIW31_INSTRUMENT_TUBA       .text $00, $21, $94, $76, $15, $00, $00, $61, $07, $82, $37, $00
>393100	07 82 37 00
>393104	00 31 43 9e 17 00 01 21		MIDIW31_INSTRUMENT_MUTETRP    .text $00, $31, $43, $9E, $17, $00, $01, $21, $07, $62, $2C, $01
>39310c	07 62 2c 01
>393110	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRHORN     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393118	00 00 00 00
>39311c	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BRASS1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393124	00 00 00 00
>393128	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNBRAS1   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393130	00 00 00 00
>393134	00 21 4d 54 3c 38 00 21		MIDIW31_INSTRUMENT_SYNBRAS2   .text $00, $21, $4D, $54, $3C, $38, $00, $21, $07, $A6, $1C, $00
>39313c	07 a6 1c 00
>393140	00 31 8f 93 02 38 01 61		MIDIW31_INSTRUMENT_SOPSAX     .text $00, $31, $8F, $93, $02, $38, $01, $61, $07, $72, $0B, $00
>393148	07 72 0b 00
>39314c	00 31 8e 93 03 38 01 61		MIDIW31_INSTRUMENT_ALTOSAX    .text $00, $31, $8E, $93, $03, $38, $01, $61, $07, $72, $09, $00
>393154	07 72 09 00
>393158	00 31 91 93 03 30 01 61		MIDIW31_INSTRUMENT_TENSAX     .text $00, $31, $91, $93, $03, $30, $01, $61, $07, $82, $09, $00
>393160	07 82 09 00
>393164	00 31 8e 93 0f 00 01 61		MIDIW31_INSTRUMENT_BARISAX    .text $00, $31, $8E, $93, $0F, $00, $01, $61, $07, $72, $0F, $00
>39316c	07 72 0f 00
>393170	00 21 4b aa 16 00 01 21		MIDIW31_INSTRUMENT_OBOE       .text $00, $21, $4B, $AA, $16, $00, $01, $21, $07, $8F, $0A, $00
>393178	07 8f 0a 00
>39317c	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ENGLHORN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393184	00 00 00 00
>393188	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSOON    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393190	00 00 00 00
>393194	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLARINET   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39319c	00 00 00 00
>3931a0	00 e1 1f 85 5f 30 00 e1		MIDIW31_INSTRUMENT_PICCOLO    .text $00, $E1, $1F, $85, $5F, $30, $00, $E1, $07, $65, $1A, $00
>3931a8	07 65 1a 00
>3931ac	00 e1 46 88 5f 30 00 e1		MIDIW31_INSTRUMENT_FLUTE1     .text $00, $E1, $46, $88, $5F, $30, $00, $E1, $07, $65, $1A, $00
>3931b4	07 65 1a 00
>3931b8	00 a1 9c 75 1f 32 00 21		MIDIW31_INSTRUMENT_RECORDER   .text $00, $A1, $9C, $75, $1F, $32, $00, $21, $07, $75, $0A, $00
>3931c0	07 75 0a 00
>3931c4	00 31 8b 84 58 30 00 21		MIDIW31_INSTRUMENT_PANFLUTE   .text $00, $31, $8B, $84, $58, $30, $00, $21, $07, $65, $1A, $00
>3931cc	07 65 1a 00
>3931d0	00 e1 4c 66 56 00 00 a1		MIDIW31_INSTRUMENT_BOTTLEB    .text $00, $E1, $4C, $66, $56, $00, $00, $A1, $07, $65, $26, $00
>3931d8	07 65 26 00
>3931dc	00 62 cb 76 46 00 00 a1		MIDIW31_INSTRUMENT_SHAKU      .text $00, $62, $CB, $76, $46, $00, $00, $A1, $07, $55, $36, $00
>3931e4	07 55 36 00
>3931e8	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WHISTLE    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3931f0	00 00 00 00
>3931f4	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OCARINA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3931fc	00 00 00 00
>393200	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SQUARWAV   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393208	00 00 00 00
>39320c	00 21 0e ff 0f 30 01 21		MIDIW31_INSTRUMENT_SAWWAV     .text $00, $21, $0E, $FF, $0F, $30, $01, $21, $07, $FF, $0F, $01
>393214	07 ff 0f 01
>393218	00 22 46 86 55 30 00 21		MIDIW31_INSTRUMENT_SYNCALLI   .text $00, $22, $46, $86, $55, $30, $00, $21, $87, $64, $18, $00
>393220	87 64 18 00
>393224	00 21 45 66 12 30 00 a1		MIDIW31_INSTRUMENT_CHIFLEAD   .text $00, $21, $45, $66, $12, $30, $00, $A1, $07, $96, $0A, $00
>39322c	07 96 0a 00
>393230	00 21 8b 92 2a 34 01 22		MIDIW31_INSTRUMENT_CHARANG    .text $00, $21, $8B, $92, $2A, $34, $01, $22, $07, $91, $2A, $00
>393238	07 91 2a 00
>39323c	00 a2 9e df 05 00 00 61		MIDIW31_INSTRUMENT_SOLOVOX    .text $00, $A2, $9E, $DF, $05, $00, $00, $61, $47, $6F, $07, $00
>393244	47 6f 07 00
>393248	00 20 1a ef 01 00 00 60		MIDIW31_INSTRUMENT_FIFTHSAW   .text $00, $20, $1A, $EF, $01, $00, $00, $60, $07, $8F, $06, $02
>393250	07 8f 06 02
>393254	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSLEAD   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39325c	00 00 00 00
>393260	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FANTASIA   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393268	00 00 00 00
>39326c	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WARMPAD    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393274	00 00 00 00
>393278	00 61 17 91 34 3c 00 61		MIDIW31_INSTRUMENT_POLYSYN    .text $00, $61, $17, $91, $34, $3C, $00, $61, $07, $55, $16, $00
>393280	07 55 16 00
>393284	00 71 5d 54 01 30 00 72		MIDIW31_INSTRUMENT_SPACEVOX   .text $00, $71, $5D, $54, $01, $30, $00, $72, $07, $6A, $03, $00
>39328c	07 6a 03 00
>393290	00 21 97 21 43 38 00 a2		MIDIW31_INSTRUMENT_BOWEDGLS   .text $00, $21, $97, $21, $43, $38, $00, $A2, $07, $42, $35, $00
>393298	07 42 35 00
>39329c	00 a1 1c a1 77 30 01 21		MIDIW31_INSTRUMENT_METALPAD   .text $00, $A1, $1C, $A1, $77, $30, $01, $21, $07, $31, $47, $01
>3932a4	07 31 47 01
>3932a8	00 21 89 11 33 00 00 61		MIDIW31_INSTRUMENT_HALOPAD    .text $00, $21, $89, $11, $33, $00, $00, $61, $0A, $42, $25, $00
>3932b0	0a 42 25 00
>3932b4	00 a1 15 11 47 00 01 21		MIDIW31_INSTRUMENT_SWEEPPAD   .text $00, $A1, $15, $11, $47, $00, $01, $21, $07, $CF, $07, $00
>3932bc	07 cf 07 00
>3932c0	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ICERAIN    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3932c8	00 00 00 00
>3932cc	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SOUNDTRK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3932d4	00 00 00 00
>3932d8	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CRYSTAL    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3932e0	00 00 00 00
>3932e4	00 22 92 b1 81 3c 00 61		MIDIW31_INSTRUMENT_ATMOSPH    .text $00, $22, $92, $B1, $81, $3C, $00, $61, $8A, $F2, $26, $00
>3932ec	8a f2 26 00
>3932f0	00 41 4d f1 51 30 01 42		MIDIW31_INSTRUMENT_BRIGHT     .text $00, $41, $4D, $F1, $51, $30, $01, $42, $07, $F2, $F5, $00
>3932f8	07 f2 f5 00
>3932fc	00 61 94 11 51 36 01 a3		MIDIW31_INSTRUMENT_GOBLIN     .text $00, $61, $94, $11, $51, $36, $01, $A3, $87, $11, $13, $00
>393304	87 11 13 00
>393308	00 61 8c 11 31 3a 00 a1		MIDIW31_INSTRUMENT_ECHODROP   .text $00, $61, $8C, $11, $31, $3A, $00, $A1, $87, $1D, $03, $00
>393310	87 1d 03 00
>393314	00 a4 4c f3 73 00 01 61		MIDIW31_INSTRUMENT_STARTHEM   .text $00, $A4, $4C, $F3, $73, $00, $01, $61, $07, $81, $23, $00
>39331c	07 81 23 00
>393320	00 02 85 d2 53 00 00 07		MIDIW31_INSTRUMENT_SITAR      .text $00, $02, $85, $D2, $53, $00, $00, $07, $0A, $F2, $F6, $01
>393328	0a f2 f6 01
>39332c	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BANJO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393334	00 00 00 00
>393338	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SHAMISEN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393340	00 00 00 00
>393344	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_KOTO       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39334c	00 00 00 00
>393350	00 04 4f fa 56 3c 00 01		MIDIW31_INSTRUMENT_KALIMBA    .text $00, $04, $4F, $FA, $56, $3C, $00, $01, $07, $C2, $05, $00
>393358	07 c2 05 00
>39335c	00 21 49 7c 20 36 00 22		MIDIW31_INSTRUMENT_BAGPIPE    .text $00, $21, $49, $7C, $20, $36, $00, $22, $07, $6F, $0C, $01
>393364	07 6f 0c 01
>393368	00 31 85 dd 33 3a 01 21		MIDIW31_INSTRUMENT_FIDDLE     .text $00, $31, $85, $DD, $33, $3A, $01, $21, $07, $56, $16, $00
>393370	07 56 16 00
>393374	00 20 04 da 05 30 02 21		MIDIW31_INSTRUMENT_SHANNAI    .text $00, $20, $04, $DA, $05, $30, $02, $21, $88, $8F, $0B, $00
>39337c	88 8f 0b 00
>393380	00 05 6a f1 e5 00 00 03		MIDIW31_INSTRUMENT_TINKLBEL   .text $00, $05, $6A, $F1, $E5, $00, $00, $03, $87, $C3, $E5, $00
>393388	87 c3 e5 00
>39338c	00 07 15 ec 26 00 00 02		MIDIW31_INSTRUMENT_AGOGO      .text $00, $07, $15, $EC, $26, $00, $00, $02, $07, $F8, $16, $00
>393394	07 f8 16 00
>393398	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELDRM   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3933a0	00 00 00 00
>3933a4	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WOODBLOK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3933ac	00 00 00 00
>3933b0	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TAIKO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3933b8	00 00 00 00
>3933bc	00 11 41 f8 47 34 02 10		MIDIW31_INSTRUMENT_MELOTOM    .text $00, $11, $41, $F8, $47, $34, $02, $10, $0A, $F3, $03, $00
>3933c4	0a f3 03 00
>3933c8	00 01 8e f1 06 3e 02 10		MIDIW31_INSTRUMENT_SYNDRUM    .text $00, $01, $8E, $F1, $06, $3E, $02, $10, $07, $F3, $02, $00
>3933d0	07 f3 02 00
>3933d4	00 0e 00 1f 00 3e 00 c0		MIDIW31_INSTRUMENT_REVRSCYM   .text $00, $0E, $00, $1F, $00, $3E, $00, $C0, $07, $1F, $FF, $03
>3933dc	07 1f ff 03
>3933e0	00 06 80 f8 24 38 00 03		MIDIW31_INSTRUMENT_FRETNOIS   .text $00, $06, $80, $F8, $24, $38, $00, $03, $8F, $56, $84, $02
>3933e8	8f 56 84 02
>3933ec	00 0e 00 f8 00 00 00 d0		MIDIW31_INSTRUMENT_BRTHNOIS   .text $00, $0E, $00, $F8, $00, $00, $00, $D0, $0C, $34, $04, $03
>3933f4	0c 34 04 03
>3933f8	00 0e 00 f6 00 00 00 c0		MIDIW31_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F6, $00, $00, $00, $C0, $07, $1F, $02, $03
>393400	07 1f 02 03
>393404	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BIRDS      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39340c	00 00 00 00
>393410	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TELEPHON   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393418	00 00 00 00
>39341c	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HELICOPT   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393424	00 00 00 00
>393428	00 26 00 ff 01 3e 00 e4		MIDIW31_INSTRUMENT_APPLAUSE   .text $00, $26, $00, $FF, $01, $3E, $00, $E4, $07, $12, $16, $01
>393430	07 12 16 01
>393434	00 00 00 f3 f0 3e 00 00		MIDIW31_INSTRUMENT_GUNSHOT    .text $00, $00, $00, $F3, $F0, $3E, $00, $00, $07, $F6, $C9, $02
>39343c	07 f6 c9 02
>393440	40 2e 39 00 4c 2e 39 00		midiInstrumentsw31 .dword MIDIW31_INSTRUMENT_PIANO1,   MIDIW31_INSTRUMENT_PIANO2,   MIDIW31_INSTRUMENT_PIANO3,   MIDIW31_INSTRUMENT_HONKTONK, MIDIW31_INSTRUMENT_EP1, MIDIW31_INSTRUMENT_EP2
>393448	58 2e 39 00 64 2e 39 00 70 2e 39 00 7c 2e 39 00
>393458	88 2e 39 00 94 2e 39 00		                   .dword MIDIW31_INSTRUMENT_HARPSIC,  MIDIW31_INSTRUMENT_CLAVIC,   MIDIW31_INSTRUMENT_CELESTA,  MIDIW31_INSTRUMENT_GLOCK,    MIDIW31_INSTRUMENT_MUSICBOX, MIDIW31_INSTRUMENT_VIBES
>393460	a0 2e 39 00 ac 2e 39 00 b8 2e 39 00 c4 2e 39 00
>393470	d0 2e 39 00 dc 2e 39 00			                 .dword MIDIW31_INSTRUMENT_MARIMBA,  MIDIW31_INSTRUMENT_XYLO,     MIDIW31_INSTRUMENT_TUBEBELL, MIDIW31_INSTRUMENT_SANTUR,   MIDIW31_INSTRUMENT_ORGAN1,   MIDIW31_INSTRUMENT_ORGAN2
>393478	e8 2e 39 00 f4 2e 39 00 00 2f 39 00 0c 2f 39 00
>393488	18 2f 39 00 24 2f 39 00			                 .dword MIDIW31_INSTRUMENT_ORGAN3,   MIDIW31_INSTRUMENT_PIPEORG,  MIDIW31_INSTRUMENT_REEDORG,  MIDIW31_INSTRUMENT_ACORDIAN, MIDIW31_INSTRUMENT_HARMONIC, MIDIW31_INSTRUMENT_BANDNEON
>393490	30 2f 39 00 3c 2f 39 00 48 2f 39 00 54 2f 39 00
>3934a0	60 2f 39 00 6c 2f 39 00		                     .dword MIDIW31_INSTRUMENT_NYLONGT,  MIDIW31_INSTRUMENT_STEELGT,  MIDIW31_INSTRUMENT_JAZZGT,   MIDIW31_INSTRUMENT_CLEANGT,  MIDIW31_INSTRUMENT_MUTEGT,   MIDIW31_INSTRUMENT_OVERDGT
>3934a8	78 2f 39 00 84 2f 39 00 90 2f 39 00 9c 2f 39 00
>3934b8	a8 2f 39 00 b4 2f 39 00			                 .dword MIDIW31_INSTRUMENT_DISTGT,   MIDIW31_INSTRUMENT_GTHARMS,  MIDIW31_INSTRUMENT_ACOUBASS, MIDIW31_INSTRUMENT_FINGBASS, MIDIW31_INSTRUMENT_PICKBASS, MIDIW31_INSTRUMENT_FRETLESS
>3934c0	c0 2f 39 00 cc 2f 39 00 d8 2f 39 00 e4 2f 39 00
>3934d0	f0 2f 39 00 fc 2f 39 00			                 .dword MIDIW31_INSTRUMENT_SLAPBAS1, MIDIW31_INSTRUMENT_SLAPBAS2, MIDIW31_INSTRUMENT_SYNBASS1, MIDIW31_INSTRUMENT_SYNBASS2, MIDIW31_INSTRUMENT_VIOLIN,   MIDIW31_INSTRUMENT_VIOLA
>3934d8	08 30 39 00 14 30 39 00 20 30 39 00 2c 30 39 00
>3934e8	38 30 39 00 44 30 39 00			                 .dword MIDIW31_INSTRUMENT_CELLO,    MIDIW31_INSTRUMENT_CONTRAB,  MIDIW31_INSTRUMENT_TREMSTR,  MIDIW31_INSTRUMENT_PIZZ,     MIDIW31_INSTRUMENT_HARP,     MIDIW31_INSTRUMENT_TIMPANI
>3934f0	50 30 39 00 5c 30 39 00 68 30 39 00 74 30 39 00
>393500	80 30 39 00 8c 30 39 00			                 .dword MIDIW31_INSTRUMENT_STRINGS,  MIDIW31_INSTRUMENT_SLOWSTR,  MIDIW31_INSTRUMENT_SYNSTR1,  MIDIW31_INSTRUMENT_SYNSTR2,  MIDIW31_INSTRUMENT_CHOIR,    MIDIW31_INSTRUMENT_OOHS
>393508	98 30 39 00 a4 30 39 00 b0 30 39 00 bc 30 39 00
>393518	c8 30 39 00 d4 30 39 00			                 .dword MIDIW31_INSTRUMENT_SYNVOX,   MIDIW31_INSTRUMENT_ORCHIT,   MIDIW31_INSTRUMENT_TRUMPET,  MIDIW31_INSTRUMENT_TROMBONE, MIDIW31_INSTRUMENT_TUBA,     MIDIW31_INSTRUMENT_MUTETRP
>393520	e0 30 39 00 ec 30 39 00 f8 30 39 00 04 31 39 00
>393530	10 31 39 00 1c 31 39 00			                 .dword MIDIW31_INSTRUMENT_FRHORN,   MIDIW31_INSTRUMENT_BRASS1,   MIDIW31_INSTRUMENT_SYNBRAS1, MIDIW31_INSTRUMENT_SYNBRAS2, MIDIW31_INSTRUMENT_SOPSAX,   MIDIW31_INSTRUMENT_ALTOSAX
>393538	28 31 39 00 34 31 39 00 40 31 39 00 4c 31 39 00
>393548	58 31 39 00 64 31 39 00			                 .dword MIDIW31_INSTRUMENT_TENSAX,   MIDIW31_INSTRUMENT_BARISAX,  MIDIW31_INSTRUMENT_OBOE,     MIDIW31_INSTRUMENT_ENGLHORN, MIDIW31_INSTRUMENT_BASSOON,  MIDIW31_INSTRUMENT_CLARINET
>393550	70 31 39 00 7c 31 39 00 88 31 39 00 94 31 39 00
>393560	a0 31 39 00 ac 31 39 00			                 .dword MIDIW31_INSTRUMENT_PICCOLO,  MIDIW31_INSTRUMENT_FLUTE1,   MIDIW31_INSTRUMENT_RECORDER, MIDIW31_INSTRUMENT_PANFLUTE, MIDIW31_INSTRUMENT_BOTTLEB,  MIDIW31_INSTRUMENT_SHAKU
>393568	b8 31 39 00 c4 31 39 00 d0 31 39 00 dc 31 39 00
>393578	e8 31 39 00 f4 31 39 00			                 .dword MIDIW31_INSTRUMENT_WHISTLE,  MIDIW31_INSTRUMENT_OCARINA,  MIDIW31_INSTRUMENT_SQUARWAV, MIDIW31_INSTRUMENT_SAWWAV,   MIDIW31_INSTRUMENT_SYNCALLI, MIDIW31_INSTRUMENT_CHIFLEAD
>393580	00 32 39 00 0c 32 39 00 18 32 39 00 24 32 39 00
>393590	30 32 39 00 3c 32 39 00			                 .dword MIDIW31_INSTRUMENT_CHARANG,  MIDIW31_INSTRUMENT_SOLOVOX,  MIDIW31_INSTRUMENT_FIFTHSAW, MIDIW31_INSTRUMENT_BASSLEAD, MIDIW31_INSTRUMENT_FANTASIA, MIDIW31_INSTRUMENT_WARMPAD
>393598	48 32 39 00 54 32 39 00 60 32 39 00 6c 32 39 00
>3935a8	78 32 39 00 84 32 39 00			                 .dword MIDIW31_INSTRUMENT_POLYSYN,  MIDIW31_INSTRUMENT_SPACEVOX, MIDIW31_INSTRUMENT_BOWEDGLS, MIDIW31_INSTRUMENT_METALPAD, MIDIW31_INSTRUMENT_HALOPAD,  MIDIW31_INSTRUMENT_SWEEPPAD
>3935b0	90 32 39 00 9c 32 39 00 a8 32 39 00 b4 32 39 00
>3935c0	c0 32 39 00 cc 32 39 00			                 .dword MIDIW31_INSTRUMENT_ICERAIN,  MIDIW31_INSTRUMENT_SOUNDTRK, MIDIW31_INSTRUMENT_CRYSTAL,  MIDIW31_INSTRUMENT_ATMOSPH,  MIDIW31_INSTRUMENT_BRIGHT,   MIDIW31_INSTRUMENT_GOBLIN
>3935c8	d8 32 39 00 e4 32 39 00 f0 32 39 00 fc 32 39 00
>3935d8	08 33 39 00 14 33 39 00			                 .dword MIDIW31_INSTRUMENT_ECHODROP, MIDIW31_INSTRUMENT_STARTHEM, MIDIW31_INSTRUMENT_SITAR,    MIDIW31_INSTRUMENT_BANJO,    MIDIW31_INSTRUMENT_SHAMISEN, MIDIW31_INSTRUMENT_KOTO
>3935e0	20 33 39 00 2c 33 39 00 38 33 39 00 44 33 39 00
>3935f0	50 33 39 00 5c 33 39 00			                 .dword MIDIW31_INSTRUMENT_KALIMBA,  MIDIW31_INSTRUMENT_BAGPIPE,  MIDIW31_INSTRUMENT_FIDDLE,   MIDIW31_INSTRUMENT_SHANNAI,  MIDIW31_INSTRUMENT_TINKLBEL, MIDIW31_INSTRUMENT_AGOGO
>3935f8	68 33 39 00 74 33 39 00 80 33 39 00 8c 33 39 00
>393608	98 33 39 00 a4 33 39 00			                 .dword MIDIW31_INSTRUMENT_STEELDRM, MIDIW31_INSTRUMENT_WOODBLOK, MIDIW31_INSTRUMENT_TAIKO,    MIDIW31_INSTRUMENT_MELOTOM,  MIDIW31_INSTRUMENT_SYNDRUM,  MIDIW31_INSTRUMENT_REVRSCYM
>393610	b0 33 39 00 bc 33 39 00 c8 33 39 00 d4 33 39 00
>393620	e0 33 39 00 ec 33 39 00			                 .dword MIDIW31_INSTRUMENT_FRETNOIS, MIDIW31_INSTRUMENT_BRTHNOIS, MIDIW31_INSTRUMENT_SEASHORE, MIDIW31_INSTRUMENT_BIRDS,    MIDIW31_INSTRUMENT_TELEPHON, MIDIW31_INSTRUMENT_HELICOPT
>393628	f8 33 39 00 04 34 39 00 10 34 39 00 1c 34 39 00
>393638	28 34 39 00 34 34 39 00			                 .dword MIDIW31_INSTRUMENT_APPLAUSE, MIDIW31_INSTRUMENT_GUNSHOT

;******  Return to file: src\OPL2_Library.asm

>393640	3c 42 44 45 47 49 4b 4c		NOTE_INTRO  .byte  $3C, $42, $44, $45, $47, $49, $4B, $4C
.393648					IOPL2_TONE_TEST
.393648	e2 20		sep #$20	                SEP #$20        ; set A short
.39364a	c2 10		rep #$10	                REP #$10        ; set X long
.39364c	a2 00 00	ldx #$0000	                LDX #0
.39364f					OPL2_TONE_TESTING_L1
.39364f	bf 40 36 39	lda $393640,x	                LDA NOTE_INTRO, X
.393653	29 0f		and #$0f	                AND #$F
.393655	85 30		sta $30		                STA OPL2_NOTE ; start at C
.393657	bf 40 36 39	lda $393640,x	                LDA NOTE_INTRO, X
.39365b	29 70		and #$70	                AND #$70
.39365d	4a		lsr a		                LSR A
.39365e	4a		lsr a		                LSR A
.39365f	4a		lsr a		                LSR A
.393660	4a		lsr a		                LSR A
.393661	85 31		sta $31		                STA OPL2_OCTAVE
.393663	8a		txa		                TXA
.393664	29 03		and #$03	                AND #$03        ; replace modulo 3 -  play each note on a different channel
.393666	85 27		sta $27		                STA OPL2_CHANNEL
.393668	22 38 38 39	jsl $393838	                JSL OPL2_PLAYNOTE
.39366c	a0 00 00	ldy #$0000	                LDY #$0000
.39366f					OPL2_TONE_TESTING_L2
.39366f	ea		nop		                NOP
.393670	ea		nop		                NOP
.393671	ea		nop		                NOP
.393672	ea		nop		                NOP
.393673	c8		iny		                INY
.393674	c0 ff ff	cpy #$ffff	                CPY #$FFFF
.393677	d0 f6		bne $39366f	                BNE OPL2_TONE_TESTING_L2
.393679	e8		inx		                INX
.39367a	e0 08 00	cpx #$0008	                CPX #8
.39367d	d0 d0		bne $39364f	                BNE OPL2_TONE_TESTING_L1
.39367f	6b		rtl		                RTL
.393680					OPL2_INIT
.393680	c2 20		rep #$20	                REP #$20        ; set A long
.393682	a9 00 00	lda #$0000	                LDA #$0000
.393685	85 28		sta $28		                STA OPL2_REG_REGION
.393687	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393689	85 30		sta $30		                STA OPL2_NOTE
.39368b	85 32		sta $32		                STA OPL2_PARAMETER0
.39368d	85 34		sta $34		                STA OPL2_PARAMETER2
.39368f	a9 0a 16	lda #$160a	                LDA #<>INSTRUMENT_ACCORDN
.393692	85 50		sta $50		                STA RAD_ADDR
.393694	a9 39 00	lda #$0039	                LDA #<`INSTRUMENT_ACCORDN
.393697	85 52		sta $52		                STA RAD_ADDR + 2
.393699	e2 20		sep #$20	                SEP #$20        ; set A short
.39369b	6b		rtl		                RTL
.39369c					OPL2_Reset
.39369c	6b		rtl		                RTL
.39369d					OPL2_Get_FrequencyBlock
.39369d	6b		rtl		                RTL
.39369e					OPL2_GET_REGISTER
.39369e	48		pha		                PHA             ; begin setdp macro
.39369f	08		php		                PHP
.3936a0	c2 20		rep #$20	                REP #$20        ; set A long
.3936a2	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3936a5	5b		tcd		                TCD
.3936a6	28		plp		                PLP
.3936a7	68		pla		                PLA             ; end setdp macro
.3936a8	c2 20		rep #$20	                REP #$20        ; set A long
.3936aa	18		clc		              CLC
.3936ab	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3936ae	65 32		adc $32		              ADC OPL2_PARAMETER0
.3936b0	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3936b2	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3936b5	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3936b7	e2 20		sep #$20	                SEP #$20        ; set A short
.3936b9	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3936bb	6b		rtl		              RTL
.3936bc					OPL2_GET_WAVEFORM_SELECT
.3936bc	48		pha		                PHA             ; begin setdp macro
.3936bd	08		php		                PHP
.3936be	c2 20		rep #$20	                REP #$20        ; set A long
.3936c0	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3936c3	5b		tcd		                TCD
.3936c4	28		plp		                PLP
.3936c5	68		pla		                PLA             ; end setdp macro
.3936c6	c2 20		rep #$20	                REP #$20        ; set A long
.3936c8	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3936cb	69 01 00	adc #$0001	              ADC #$0001
.3936ce	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3936d0	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3936d3	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3936d5	e2 20		sep #$20	                SEP #$20        ; set A short
.3936d7	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3936d9	29 20		and #$20	              AND #$20
.3936db	6b		rtl		              RTL
.3936dc					OPL2_GET_SCALINGLEVEL
.3936dc	48		pha		                PHA             ; begin setdp macro
.3936dd	08		php		                PHP
.3936de	c2 20		rep #$20	                REP #$20        ; set A long
.3936e0	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3936e3	5b		tcd		                TCD
.3936e4	28		plp		                PLP
.3936e5	68		pla		                PLA             ; end setdp macro
.3936e6	c2 20		rep #$20	                REP #$20        ; set A long
.3936e8	a9 40 00	lda #$0040	              LDA #$0040  ;
.3936eb	85 28		sta $28		              STA OPL2_REG_REGION
.3936ed	20 9f 3f	jsr $393f9f	              JSR OPL2_GET_REG_OFFSET
.3936f0	e2 20		sep #$20	                SEP #$20        ; set A short
.3936f2	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3936f4	29 c0		and #$c0	              AND #$C0
.3936f6	4a		lsr a		              LSR A
.3936f7	4a		lsr a		              LSR A
.3936f8	4a		lsr a		              LSR A
.3936f9	4a		lsr a		              LSR A
.3936fa	4a		lsr a		              LSR A
.3936fb	4a		lsr a		              LSR A
.3936fc	6b		rtl		              RTL
.3936fd					OPL2_GET_BLOCK
.3936fd	48		pha		                PHA             ; begin setdp macro
.3936fe	08		php		                PHP
.3936ff	c2 20		rep #$20	                REP #$20        ; set A long
.393701	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393704	5b		tcd		                TCD
.393705	28		plp		                PLP
.393706	68		pla		                PLA             ; end setdp macro
.393707	e2 20		sep #$20	                SEP #$20        ; set A short
.393709	18		clc		              CLC
.39370a	a5 27		lda $27		              LDA OPL2_CHANNEL
.39370c	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.39370e	69 b0		adc #$b0	              ADC #$B0
.393710	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393712	a9 00		lda #$00	              LDA #$00
.393714	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393716	c2 30		rep #$30	                REP #$30        ; set A&X long
.393718	18		clc		              CLC
.393719	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39371c	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.39371e	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393720	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393723	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393725	e2 20		sep #$20	                SEP #$20        ; set A short
.393727	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393729	29 1c		and #$1c	              AND #$1C
.39372b	4a		lsr a		              LSR A
.39372c	4a		lsr a		              LSR A
.39372d	6b		rtl		              RTL
.39372e					OPL2_GET_KEYON
.39372e	48		pha		                PHA             ; begin setdp macro
.39372f	08		php		                PHP
.393730	c2 20		rep #$20	                REP #$20        ; set A long
.393732	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393735	5b		tcd		                TCD
.393736	28		plp		                PLP
.393737	68		pla		                PLA             ; end setdp macro
.393738	e2 20		sep #$20	                SEP #$20        ; set A short
.39373a	18		clc		              CLC
.39373b	a5 27		lda $27		              LDA OPL2_CHANNEL
.39373d	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.39373f	69 b0		adc #$b0	              ADC #$B0
.393741	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393743	a9 00		lda #$00	              LDA #$00
.393745	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393747	c2 30		rep #$30	                REP #$30        ; set A&X long
.393749	18		clc		              CLC
.39374a	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39374d	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.39374f	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393751	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393754	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393756	e2 20		sep #$20	                SEP #$20        ; set A short
.393758	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39375a	29 20		and #$20	              AND #$20
.39375c	6b		rtl		              RTL
.39375d					OPL2_GET_FEEDBACK
.39375d	48		pha		                PHA             ; begin setdp macro
.39375e	08		php		                PHP
.39375f	c2 20		rep #$20	                REP #$20        ; set A long
.393761	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393764	5b		tcd		                TCD
.393765	28		plp		                PLP
.393766	68		pla		                PLA             ; end setdp macro
.393767	e2 20		sep #$20	                SEP #$20        ; set A short
.393769	18		clc		              CLC
.39376a	a5 27		lda $27		              LDA OPL2_CHANNEL
.39376c	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.39376e	69 c0		adc #$c0	              ADC #$C0
.393770	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393772	a9 00		lda #$00	              LDA #$00
.393774	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393776	c2 30		rep #$30	                REP #$30        ; set A&X long
.393778	18		clc		              CLC
.393779	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39377c	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.39377e	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393780	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393783	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393785	e2 20		sep #$20	                SEP #$20        ; set A short
.393787	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393789	29 e0		and #$e0	              AND #$E0
.39378b	4a		lsr a		              LSR
.39378c	6b		rtl		              RTL
.39378d					OPL2_GET_SYNTHMODE
.39378d	48		pha		                PHA             ; begin setdp macro
.39378e	08		php		                PHP
.39378f	c2 20		rep #$20	                REP #$20        ; set A long
.393791	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393794	5b		tcd		                TCD
.393795	28		plp		                PLP
.393796	68		pla		                PLA             ; end setdp macro
.393797	e2 20		sep #$20	                SEP #$20        ; set A short
.393799	18		clc		              CLC
.39379a	a5 27		lda $27		              LDA OPL2_CHANNEL
.39379c	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.39379e	69 c0		adc #$c0	              ADC #$C0
.3937a0	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.3937a2	a9 00		lda #$00	              LDA #$00
.3937a4	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.3937a6	c2 30		rep #$30	                REP #$30        ; set A&X long
.3937a8	18		clc		              CLC
.3937a9	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3937ac	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.3937ae	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3937b0	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3937b3	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3937b5	e2 20		sep #$20	                SEP #$20        ; set A short
.3937b7	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3937b9	29 01		and #$01	              AND #$01
.3937bb	6b		rtl		              RTL
.3937bc					OPL2_GET_DEEPTREMOLO
.3937bc	48		pha		                PHA             ; begin setdp macro
.3937bd	08		php		                PHP
.3937be	c2 20		rep #$20	                REP #$20        ; set A long
.3937c0	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3937c3	5b		tcd		                TCD
.3937c4	28		plp		                PLP
.3937c5	68		pla		                PLA             ; end setdp macro
.3937c6	c2 20		rep #$20	                REP #$20        ; set A long
.3937c8	a9 bd 00	lda #$00bd	              LDA #$00BD;
.3937cb	85 28		sta $28		              STA OPL2_REG_REGION
.3937cd	20 9f 3f	jsr $393f9f	              JSR OPL2_GET_REG_OFFSET
.3937d0	e2 20		sep #$20	                SEP #$20        ; set A short
.3937d2	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3937d4	29 80		and #$80	              AND #$80
.3937d6	6b		rtl		              RTL
.3937d7					OPL2_GET_DEEPVIBRATO
.3937d7	48		pha		                PHA             ; begin setdp macro
.3937d8	08		php		                PHP
.3937d9	c2 20		rep #$20	                REP #$20        ; set A long
.3937db	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3937de	5b		tcd		                TCD
.3937df	28		plp		                PLP
.3937e0	68		pla		                PLA             ; end setdp macro
.3937e1	c2 20		rep #$20	                REP #$20        ; set A long
.3937e3	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3937e6	69 bd 00	adc #$00bd	              ADC #$00BD
.3937e9	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3937eb	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3937ee	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3937f0	e2 20		sep #$20	                SEP #$20        ; set A short
.3937f2	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3937f4	29 40		and #$40	              AND #$40
.3937f6	6b		rtl		              RTL
.3937f7					OPL2_GET_PERCUSSION
.3937f7	48		pha		                PHA             ; begin setdp macro
.3937f8	08		php		                PHP
.3937f9	c2 20		rep #$20	                REP #$20        ; set A long
.3937fb	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3937fe	5b		tcd		                TCD
.3937ff	28		plp		                PLP
.393800	68		pla		                PLA             ; end setdp macro
.393801	c2 20		rep #$20	                REP #$20        ; set A long
.393803	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393806	69 bd 00	adc #$00bd	              ADC #$00BD
.393809	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39380b	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.39380e	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393810	e2 20		sep #$20	                SEP #$20        ; set A short
.393812	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393814	29 20		and #$20	              AND #$20
.393816	6b		rtl		              RTL
.393817					OPL2_GET_DRUMS
.393817	48		pha		                PHA             ; begin setdp macro
.393818	08		php		                PHP
.393819	c2 20		rep #$20	                REP #$20        ; set A long
.39381b	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39381e	5b		tcd		                TCD
.39381f	28		plp		                PLP
.393820	68		pla		                PLA             ; end setdp macro
.393821	c2 20		rep #$20	                REP #$20        ; set A long
.393823	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393826	69 bd 00	adc #$00bd	              ADC #$00BD
.393829	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39382b	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.39382e	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393830	e2 20		sep #$20	                SEP #$20        ; set A short
.393832	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393834	29 1f		and #$1f	              AND #$1F
.393836	6b		rtl		              RTL
.393837					OPL2_Get_WaveForm
.393837	6b		rtl		                RTL
.393838					OPL2_PLAYNOTE
.393838	48		pha		                PHA             ; begin setdp macro
.393839	08		php		                PHP
.39383a	c2 20		rep #$20	                REP #$20        ; set A long
.39383c	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39383f	5b		tcd		                TCD
.393840	28		plp		                PLP
.393841	68		pla		                PLA             ; end setdp macro
.393842	e2 20		sep #$20	                SEP #$20        ; set A short
.393844	da		phx		                PHX
.393845	a9 00		lda #$00	                LDA #$00
.393847	85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.393849	20 20 3e	jsr $393e20	                JSR OPL2_SET_KEYON
.39384c	20 e5 3d	jsr $393de5	                JSR OPL2_SET_BLOCK  ; OPL2_SET_BLOCK Already to OPL2_OCTAVE
.39384f	e2 10		sep #$10	                SEP #$10        ; set X short
.393851	a5 30		lda $30		                LDA OPL2_NOTE
.393853	3a		dec a		                DEC A
.393854	0a		asl a		                ASL A
.393855	aa		tax		                TAX
.393856	bf cf 15 39	lda $3915cf,x	                LDA @lnoteFNumbers,X
.39385a	85 32		sta $32		                STA OPL2_PARAMETER0 ; Store the 8it in Param OPL2_PARAMETER0
.39385c	e8		inx		                INX
.39385d	bf cf 15 39	lda $3915cf,x	                LDA @lnoteFNumbers,X
.393861	85 33		sta $33		                STA OPL2_PARAMETER1 ; Store the 8bit in Param OPL2_PARAMETER1
.393863	22 63 3d 39	jsl $393d63	                JSL OPL2_SET_FNUMBER
.393867	a9 01		lda #$01	                LDA #$01
.393869	85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.39386b	20 20 3e	jsr $393e20	                JSR OPL2_SET_KEYON
.39386e	c2 10		rep #$10	                REP #$10        ; set X long
.393870	fa		plx		                PLX
.393871	6b		rtl		                RTL
.393872					OPL2_PLAYDRUM
.393872	6b		rtl		                RTL
.393873					OPL2_SET_INSTRUMENT
.393873	48		pha		                PHA             ; begin setdp macro
.393874	08		php		                PHP
.393875	c2 20		rep #$20	                REP #$20        ; set A long
.393877	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39387a	5b		tcd		                TCD
.39387b	28		plp		                PLP
.39387c	68		pla		                PLA             ; end setdp macro
.39387d	38		sec		              SEC ; Set the WaveFormSelect to True
.39387e	22 61 3a 39	jsl $393a61	              JSL OPL2_SET_WAVEFORMSELECT;
.393882	e2 20		sep #$20	                SEP #$20        ; set A short
.393884	c2 10		rep #$10	                REP #$10        ; set X long
.393886	a0 00 00	ldy #$0000	              LDY #$0000
.393889	a2 00 00	ldx #$0000	              LDX #$0000
.39388c	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO],Y ; Pointer Location 0 in Instrument Profile
.39388e	85 35		sta $35		              STA OPL2_PARAMETER3
.393890	c8		iny		              INY
.393891	c9 06		cmp #$06	              CMP #$06
.393893	d0 03		bne $393898	              BNE PERCUSSION_NEXT07
.393895	82 70 01	brl $393a08	              BRL Percussion_6
.393898					PERCUSSION_NEXT07
.393898	c9 07		cmp #$07	              CMP #$07
.39389a	d0 03		bne $39389f	              BNE PERCUSSION_NEXT08
.39389c	82 44 01	brl $3939e3	              BRL Percussion_7
.39389f					PERCUSSION_NEXT08
.39389f	c9 08		cmp #$08	              CMP #$08
.3938a1	d0 03		bne $3938a6	              BNE PERCUSSION_NEXT09
.3938a3	82 18 01	brl $3939be	              BRL Percussion_8
.3938a6					PERCUSSION_NEXT09
.3938a6	c9 09		cmp #$09	              CMP #$09
.3938a8	d0 03		bne $3938ad	              BNE PERCUSSION_NEXT0A
.3938aa	82 ec 00	brl $393999	              BRL Percussion_9
.3938ad					PERCUSSION_NEXT0A
.3938ad	c9 0a		cmp #$0a	              CMP #$0A
.3938af	d0 03		bne $3938b4	              BNE Percussion_Default
.3938b1	82 c0 00	brl $393974	              BRL Percussion_A
.3938b4					Percussion_Default
.3938b4	a9 00		lda #$00	              LDA #$00
.3938b6	85 26		sta $26		              STA OPL2_OPERATOR
.3938b8	c2 20		rep #$20	                REP #$20        ; set A long
.3938ba	a9 20 00	lda #$0020	              LDA #$0020;
.3938bd	85 28		sta $28		              STA OPL2_REG_REGION
.3938bf	20 9f 3f	jsr $393f9f	              JSR OPL2_GET_REG_OFFSET
.3938c2	e2 20		sep #$20	                SEP #$20        ; set A short
.3938c4	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.3938c6	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3938c8	c8		iny		              INY
.3938c9	c2 20		rep #$20	                REP #$20        ; set A long
.3938cb	a9 40 00	lda #$0040	              LDA #$0040;
.3938ce	85 28		sta $28		              STA OPL2_REG_REGION
.3938d0	20 9f 3f	jsr $393f9f	              JSR OPL2_GET_REG_OFFSET
.3938d3	e2 20		sep #$20	                SEP #$20        ; set A short
.3938d5	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.3938d7	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3938d9	c8		iny		              INY
.3938da	c2 20		rep #$20	                REP #$20        ; set A long
.3938dc	a9 60 00	lda #$0060	              LDA #$0060;
.3938df	85 28		sta $28		              STA OPL2_REG_REGION
.3938e1	20 9f 3f	jsr $393f9f	              JSR OPL2_GET_REG_OFFSET
.3938e4	e2 20		sep #$20	                SEP #$20        ; set A short
.3938e6	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.3938e8	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3938ea	c8		iny		              INY
.3938eb	c2 20		rep #$20	                REP #$20        ; set A long
.3938ed	a9 80 00	lda #$0080	              LDA #$0080;
.3938f0	85 28		sta $28		              STA OPL2_REG_REGION
.3938f2	20 9f 3f	jsr $393f9f	              JSR OPL2_GET_REG_OFFSET
.3938f5	e2 20		sep #$20	                SEP #$20        ; set A short
.3938f7	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.3938f9	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3938fb	c8		iny		              INY
.3938fc	c2 20		rep #$20	                REP #$20        ; set A long
.3938fe	a9 e0 00	lda #$00e0	              LDA #$00E0;
.393901	85 28		sta $28		              STA OPL2_REG_REGION
.393903	20 9f 3f	jsr $393f9f	              JSR OPL2_GET_REG_OFFSET
.393906	e2 20		sep #$20	                SEP #$20        ; set A short
.393908	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.39390a	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39390c	c8		iny		              INY
.39390d	e2 10		sep #$10	                SEP #$10        ; set X short
.39390f	a5 27		lda $27		              LDA OPL2_CHANNEL
.393911	29 0f		and #$0f	              AND #$0F
.393913	aa		tax		              TAX
.393914	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 6 in Instrument Profile
.393916	9f c0 e6 af	sta $afe6c0,x	              STA @lOPL3_R_FEEDBACK,X
.39391a	c8		iny		              INY
.39391b	a9 01		lda #$01	              LDA #$01
.39391d	85 26		sta $26		              STA OPL2_OPERATOR
.39391f	c2 20		rep #$20	                REP #$20        ; set A long
.393921	a9 20 00	lda #$0020	              LDA #$0020;
.393924	85 28		sta $28		              STA OPL2_REG_REGION
.393926	20 9f 3f	jsr $393f9f	              JSR OPL2_GET_REG_OFFSET
.393929	e2 20		sep #$20	                SEP #$20        ; set A short
.39392b	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 7 in Instrument Profile
.39392d	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39392f	c8		iny		              INY
.393930	c2 20		rep #$20	                REP #$20        ; set A long
.393932	a9 40 00	lda #$0040	              LDA #$0040;
.393935	85 28		sta $28		              STA OPL2_REG_REGION
.393937	20 9f 3f	jsr $393f9f	              JSR OPL2_GET_REG_OFFSET
.39393a	e2 20		sep #$20	                SEP #$20        ; set A short
.39393c	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 8 in Instrument Profile
.39393e	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393940	c8		iny		              INY
.393941	c2 20		rep #$20	                REP #$20        ; set A long
.393943	a9 60 00	lda #$0060	              LDA #$0060;
.393946	85 28		sta $28		              STA OPL2_REG_REGION
.393948	20 9f 3f	jsr $393f9f	              JSR OPL2_GET_REG_OFFSET
.39394b	e2 20		sep #$20	                SEP #$20        ; set A short
.39394d	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 9 in Instrument Profile
.39394f	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393951	c8		iny		              INY
.393952	c2 20		rep #$20	                REP #$20        ; set A long
.393954	a9 80 00	lda #$0080	              LDA #$0080;
.393957	85 28		sta $28		              STA OPL2_REG_REGION
.393959	20 9f 3f	jsr $393f9f	              JSR OPL2_GET_REG_OFFSET
.39395c	e2 20		sep #$20	                SEP #$20        ; set A short
.39395e	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location A in Instrument Profile
.393960	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393962	c8		iny		              INY
.393963	c2 20		rep #$20	                REP #$20        ; set A long
.393965	a9 e0 00	lda #$00e0	              LDA #$00E0;
.393968	85 28		sta $28		              STA OPL2_REG_REGION
.39396a	20 9f 3f	jsr $393f9f	              JSR OPL2_GET_REG_OFFSET
.39396d	e2 20		sep #$20	                SEP #$20        ; set A short
.39396f	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location B in Instrument Profile
.393971	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393973	6b		rtl		                RTL
.393974					Percussion_A
.393974	e2 20		sep #$20	                SEP #$20        ; set A short
.393976	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393978	8f 31 e6 af	sta $afe631	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $11
.39397c	c8		iny		              INY
.39397d	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.39397f	8f 51 e6 af	sta $afe651	              STA @lOPL3_R_KSL_TL + $11
.393983	c8		iny		              INY
.393984	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393986	8f 71 e6 af	sta $afe671	              STA @lOPL3_R_AR_DR + $11
.39398a	c8		iny		              INY
.39398b	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.39398d	8f 91 e6 af	sta $afe691	              STA @lOPL3_R_SL_RR + $11
.393991	c8		iny		              INY
.393992	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393994	8f f1 e6 af	sta $afe6f1	              STA @lOPL3_R_WAVE_SELECT + $11
.393998	6b		rtl		                RTL
.393999					Percussion_9
.393999	e2 20		sep #$20	                SEP #$20        ; set A short
.39399b	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.39399d	8f 35 e6 af	sta $afe635	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $15
.3939a1	c8		iny		              INY
.3939a2	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.3939a4	8f 55 e6 af	sta $afe655	              STA @lOPL3_R_KSL_TL + $15
.3939a8	c8		iny		              INY
.3939a9	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.3939ab	8f 75 e6 af	sta $afe675	              STA @lOPL3_R_AR_DR + $15
.3939af	c8		iny		              INY
.3939b0	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.3939b2	8f 95 e6 af	sta $afe695	              STA @lOPL3_R_SL_RR + $15
.3939b6	c8		iny		              INY
.3939b7	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.3939b9	8f f5 e6 af	sta $afe6f5	              STA @lOPL3_R_WAVE_SELECT + $15
.3939bd	6b		rtl		              RTL
.3939be					Percussion_8
.3939be	e2 20		sep #$20	                SEP #$20        ; set A short
.3939c0	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.3939c2	8f 32 e6 af	sta $afe632	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $12
.3939c6	c8		iny		              INY
.3939c7	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.3939c9	8f 52 e6 af	sta $afe652	              STA @lOPL3_R_KSL_TL + $12
.3939cd	c8		iny		              INY
.3939ce	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.3939d0	8f 72 e6 af	sta $afe672	              STA @lOPL3_R_AR_DR + $12
.3939d4	c8		iny		              INY
.3939d5	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.3939d7	8f 92 e6 af	sta $afe692	              STA @lOPL3_R_SL_RR + $12
.3939db	c8		iny		              INY
.3939dc	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.3939de	8f f2 e6 af	sta $afe6f2	              STA @lOPL3_R_WAVE_SELECT + $12
.3939e2	6b		rtl		              RTL
.3939e3					Percussion_7
.3939e3	e2 20		sep #$20	                SEP #$20        ; set A short
.3939e5	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.3939e7	8f 34 e6 af	sta $afe634	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $14
.3939eb	c8		iny		              INY
.3939ec	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.3939ee	8f 54 e6 af	sta $afe654	              STA @lOPL3_R_KSL_TL + $14
.3939f2	c8		iny		              INY
.3939f3	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.3939f5	8f 74 e6 af	sta $afe674	              STA @lOPL3_R_AR_DR + $14
.3939f9	c8		iny		              INY
.3939fa	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.3939fc	8f 94 e6 af	sta $afe694	              STA @lOPL3_R_SL_RR + $14
.393a00	c8		iny		              INY
.393a01	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393a03	8f f4 e6 af	sta $afe6f4	              STA @lOPL3_R_WAVE_SELECT + $14
.393a07	6b		rtl		              RTL
.393a08					Percussion_6
.393a08	e2 20		sep #$20	                SEP #$20        ; set A short
.393a0a	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393a0c	8f 30 e6 af	sta $afe630	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $10
.393a10	8f 33 e6 af	sta $afe633	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $13
.393a14	c8		iny		              INY
.393a15	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393a17	8f 50 e6 af	sta $afe650	              STA @lOPL3_R_KSL_TL + $10
.393a1b	8f 53 e6 af	sta $afe653	              STA @lOPL3_R_KSL_TL + $13
.393a1f	c8		iny		              INY
.393a20	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393a22	8f 70 e6 af	sta $afe670	              STA @lOPL3_R_AR_DR + $10
.393a26	8f 73 e6 af	sta $afe673	              STA @lOPL3_R_AR_DR + $13
.393a2a	c8		iny		              INY
.393a2b	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393a2d	8f 90 e6 af	sta $afe690	              STA @lOPL3_R_SL_RR + $10
.393a31	8f 93 e6 af	sta $afe693	              STA @lOPL3_R_SL_RR + $13
.393a35	c8		iny		              INY
.393a36	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393a38	8f f0 e6 af	sta $afe6f0	              STA @lOPL3_R_WAVE_SELECT + $10
.393a3c	8f f3 e6 af	sta $afe6f3	              STA @lOPL3_R_WAVE_SELECT + $13
.393a40	6b		rtl		              RTL
.393a41					OPL2_SET_REGISTER
.393a41	48		pha		                PHA             ; begin setdp macro
.393a42	08		php		                PHP
.393a43	c2 20		rep #$20	                REP #$20        ; set A long
.393a45	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393a48	5b		tcd		                TCD
.393a49	28		plp		                PLP
.393a4a	68		pla		                PLA             ; end setdp macro
.393a4b	c2 20		rep #$20	                REP #$20        ; set A long
.393a4d	18		clc		              CLC
.393a4e	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393a51	65 32		adc $32		              ADC OPL2_PARAMETER0
.393a53	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393a55	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393a58	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393a5a	e2 20		sep #$20	                SEP #$20        ; set A short
.393a5c	a5 33		lda $33		              LDA OPL2_PARAMETER1
.393a5e	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a60	6b		rtl		              RTL
.393a61					OPL2_SET_WAVEFORMSELECT
.393a61	48		pha		                PHA             ; begin setdp macro
.393a62	08		php		                PHP
.393a63	c2 20		rep #$20	                REP #$20        ; set A long
.393a65	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393a68	5b		tcd		                TCD
.393a69	28		plp		                PLP
.393a6a	68		pla		                PLA             ; end setdp macro
.393a6b	c2 20		rep #$20	                REP #$20        ; set A long
.393a6d	a9 01 e6	lda #$e601	              LDA #<>OPL3_R_BASE + $0001
.393a70	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393a72	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393a75	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393a77	e2 20		sep #$20	                SEP #$20        ; set A short
.393a79	b0 07		bcs $393a82	              BCS OPL2_Set_WaveFormSelect_set
.393a7b	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393a7d	29 df		and #$df	              AND #$DF
.393a7f	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a81	6b		rtl		              RTL
.393a82					OPL2_Set_WaveFormSelect_set
.393a82	48		pha		                PHA             ; begin setdp macro
.393a83	08		php		                PHP
.393a84	c2 20		rep #$20	                REP #$20        ; set A long
.393a86	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393a89	5b		tcd		                TCD
.393a8a	28		plp		                PLP
.393a8b	68		pla		                PLA             ; end setdp macro
.393a8c	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393a8e	09 20 00	ora #$0020	              ORA #$20
.393a91	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a93	6b		rtl		                RTL
.393a94					OPL2_SET_TREMOLO
.393a94	48		pha		                PHA             ; begin setdp macro
.393a95	08		php		                PHP
.393a96	c2 20		rep #$20	                REP #$20        ; set A long
.393a98	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393a9b	5b		tcd		                TCD
.393a9c	28		plp		                PLP
.393a9d	68		pla		                PLA             ; end setdp macro
.393a9e	08		php		                PHP ; Push the Carry
.393a9f	c2 20		rep #$20	                REP #$20        ; set A long
.393aa1	18		clc		                CLC
.393aa2	a9 20 00	lda #$0020	                LDA #$0020 ;
.393aa5	85 28		sta $28		                STA OPL2_REG_REGION
.393aa7	20 9f 3f	jsr $393f9f	                JSR OPL2_GET_REG_OFFSET
.393aaa	28		plp		                PLP ; Pull the Carry out
.393aab	e2 20		sep #$20	                SEP #$20        ; set A short
.393aad	b0 08		bcs $393ab7	                BCS OPL2_Set_Tremolo_Set;
.393aaf	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393ab1	29 7f		and #$7f	                AND #$7F
.393ab3	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393ab5	80 06		bra $393abd	                BRA OPL2_Set_Tremolo_Exit
.393ab7					OPL2_Set_Tremolo_Set
.393ab7	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393ab9	09 80		ora #$80	                ORA #$80
.393abb	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393abd					OPL2_Set_Tremolo_Exit
.393abd	6b		rtl		                RTL
.393abe					OPL2_GET_TREMOLO
.393abe	48		pha		                PHA             ; begin setdp macro
.393abf	08		php		                PHP
.393ac0	c2 20		rep #$20	                REP #$20        ; set A long
.393ac2	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393ac5	5b		tcd		                TCD
.393ac6	28		plp		                PLP
.393ac7	68		pla		                PLA             ; end setdp macro
.393ac8	c2 20		rep #$20	                REP #$20        ; set A long
.393aca	a9 20 00	lda #$0020	                LDA #$0020;
.393acd	85 28		sta $28		                STA OPL2_REG_REGION
.393acf	20 9f 3f	jsr $393f9f	                JSR OPL2_GET_REG_OFFSET
.393ad2	e2 20		sep #$20	                SEP #$20        ; set A short
.393ad4	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393ad6	29 80		and #$80	                AND #$80
.393ad8	6b		rtl		                RTL
.393ad9					OPL2_SET_VIBRATO
.393ad9	48		pha		                PHA             ; begin setdp macro
.393ada	08		php		                PHP
.393adb	c2 20		rep #$20	                REP #$20        ; set A long
.393add	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393ae0	5b		tcd		                TCD
.393ae1	28		plp		                PLP
.393ae2	68		pla		                PLA             ; end setdp macro
.393ae3	08		php		                PHP ; Push the Carry
.393ae4	c2 20		rep #$20	                REP #$20        ; set A long
.393ae6	18		clc		                CLC
.393ae7	a9 20 00	lda #$0020	                LDA #$0020;
.393aea	85 28		sta $28		                STA OPL2_REG_REGION
.393aec	20 9f 3f	jsr $393f9f	                JSR OPL2_GET_REG_OFFSET
.393aef	28		plp		                PLP ; Pull the Carry out
.393af0	e2 20		sep #$20	                SEP #$20        ; set A short
.393af2	b0 08		bcs $393afc	                BCS OPL2_Set_Vibrato_Set;
.393af4	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393af6	29 bf		and #$bf	                AND #$BF
.393af8	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393afa	80 06		bra $393b02	                BRA OPL2_Set_Vibrato_Exit
.393afc					OPL2_Set_Vibrato_Set
.393afc	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393afe	09 40		ora #$40	                ORA #$40
.393b00	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393b02					OPL2_Set_Vibrato_Exit
.393b02	6b		rtl		                RTL
.393b03					OPL2_GET_VIBRATO
.393b03	48		pha		                PHA             ; begin setdp macro
.393b04	08		php		                PHP
.393b05	c2 20		rep #$20	                REP #$20        ; set A long
.393b07	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b0a	5b		tcd		                TCD
.393b0b	28		plp		                PLP
.393b0c	68		pla		                PLA             ; end setdp macro
.393b0d	c2 20		rep #$20	                REP #$20        ; set A long
.393b0f	a9 20 00	lda #$0020	                LDA #$0020;
.393b12	85 28		sta $28		                STA OPL2_REG_REGION
.393b14	20 9f 3f	jsr $393f9f	                JSR OPL2_GET_REG_OFFSET
.393b17	e2 20		sep #$20	                SEP #$20        ; set A short
.393b19	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393b1b	29 40		and #$40	                AND #$40
.393b1d	6b		rtl		                RTL
.393b1e					OPL2_SET_MAINTAINSUSTAIN
.393b1e	48		pha		                PHA             ; begin setdp macro
.393b1f	08		php		                PHP
.393b20	c2 20		rep #$20	                REP #$20        ; set A long
.393b22	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b25	5b		tcd		                TCD
.393b26	28		plp		                PLP
.393b27	68		pla		                PLA             ; end setdp macro
.393b28	08		php		              PHP ; Push the Carry
.393b29	c2 20		rep #$20	                REP #$20        ; set A long
.393b2b	18		clc		              CLC
.393b2c	a9 20 00	lda #$0020	              LDA #$0020;
.393b2f	85 28		sta $28		              STA OPL2_REG_REGION
.393b31	20 9f 3f	jsr $393f9f	              JSR OPL2_GET_REG_OFFSET
.393b34	28		plp		              PLP ; Pull the Carry out
.393b35	e2 20		sep #$20	                SEP #$20        ; set A short
.393b37	b0 08		bcs $393b41	              BCS OPL2_Set_MaintainSustain_Set;
.393b39	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393b3b	29 df		and #$df	              AND #$DF
.393b3d	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393b3f	80 06		bra $393b47	              BRA OPL2_Set_MaintainSustain_Exit
.393b41					OPL2_Set_MaintainSustain_Set
.393b41	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393b43	09 20		ora #$20	              ORA #$20
.393b45	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393b47					OPL2_Set_MaintainSustain_Exit
.393b47	6b		rtl		                RTL
.393b48					OPL2_GET_MAINTAINSUSTAIN
.393b48	48		pha		                PHA             ; begin setdp macro
.393b49	08		php		                PHP
.393b4a	c2 20		rep #$20	                REP #$20        ; set A long
.393b4c	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b4f	5b		tcd		                TCD
.393b50	28		plp		                PLP
.393b51	68		pla		                PLA             ; end setdp macro
.393b52	c2 20		rep #$20	                REP #$20        ; set A long
.393b54	a9 20 00	lda #$0020	              LDA #$0020;
.393b57	85 28		sta $28		              STA OPL2_REG_REGION
.393b59	20 9f 3f	jsr $393f9f	              JSR OPL2_GET_REG_OFFSET
.393b5c	e2 20		sep #$20	                SEP #$20        ; set A short
.393b5e	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393b60	29 20		and #$20	              AND #$20
.393b62	6b		rtl		                RTL
.393b63					OPL2_SET_ENVELOPESCALING
.393b63	48		pha		                PHA             ; begin setdp macro
.393b64	08		php		                PHP
.393b65	c2 20		rep #$20	                REP #$20        ; set A long
.393b67	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b6a	5b		tcd		                TCD
.393b6b	28		plp		                PLP
.393b6c	68		pla		                PLA             ; end setdp macro
.393b6d	08		php		              PHP ; Push the Carry
.393b6e	c2 20		rep #$20	                REP #$20        ; set A long
.393b70	18		clc		              CLC
.393b71	a9 20 00	lda #$0020	              LDA #$0020;
.393b74	85 28		sta $28		              STA OPL2_REG_REGION
.393b76	20 9f 3f	jsr $393f9f	              JSR OPL2_GET_REG_OFFSET
.393b79	28		plp		              PLP ; Pull the Carry out
.393b7a	e2 20		sep #$20	                SEP #$20        ; set A short
.393b7c	b0 08		bcs $393b86	              BCS OPL2_Set_EnvelopeScaling_Set;
.393b7e	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393b80	29 ef		and #$ef	              AND #$EF
.393b82	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393b84	80 06		bra $393b8c	              BRA OPL2_Set_EnvelopeScaling_Exit
.393b86					OPL2_Set_EnvelopeScaling_Set
.393b86	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393b88	09 10		ora #$10	              ORA #$10
.393b8a	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393b8c					OPL2_Set_EnvelopeScaling_Exit
.393b8c	6b		rtl		                RTL
.393b8d					OPL2_GET_ENVELOPESCALING
.393b8d	48		pha		                PHA             ; begin setdp macro
.393b8e	08		php		                PHP
.393b8f	c2 20		rep #$20	                REP #$20        ; set A long
.393b91	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b94	5b		tcd		                TCD
.393b95	28		plp		                PLP
.393b96	68		pla		                PLA             ; end setdp macro
.393b97	c2 20		rep #$20	                REP #$20        ; set A long
.393b99	a9 20 00	lda #$0020	              LDA #$0020;
.393b9c	85 28		sta $28		              STA OPL2_REG_REGION
.393b9e	20 9f 3f	jsr $393f9f	              JSR OPL2_GET_REG_OFFSET
.393ba1	e2 20		sep #$20	                SEP #$20        ; set A short
.393ba3	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393ba5	29 10		and #$10	              AND #$10
.393ba7	6b		rtl		                RTL
.393ba8					OPL2_GET_MODFREQMULTIPLE
.393ba8	48		pha		                PHA             ; begin setdp macro
.393ba9	08		php		                PHP
.393baa	c2 20		rep #$20	                REP #$20        ; set A long
.393bac	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393baf	5b		tcd		                TCD
.393bb0	28		plp		                PLP
.393bb1	68		pla		                PLA             ; end setdp macro
.393bb2	c2 20		rep #$20	                REP #$20        ; set A long
.393bb4	a9 20 00	lda #$0020	              LDA #$0020;
.393bb7	85 28		sta $28		              STA OPL2_REG_REGION
.393bb9	20 9f 3f	jsr $393f9f	              JSR OPL2_GET_REG_OFFSET
.393bbc	e2 20		sep #$20	                SEP #$20        ; set A short
.393bbe	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393bc0	29 0f		and #$0f	              AND #$0F
.393bc2	6b		rtl		              RTL
.393bc3					OPL2_SET_MODFREQMULTIPLE
.393bc3	48		pha		                PHA             ; begin setdp macro
.393bc4	08		php		                PHP
.393bc5	c2 20		rep #$20	                REP #$20        ; set A long
.393bc7	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393bca	5b		tcd		                TCD
.393bcb	28		plp		                PLP
.393bcc	68		pla		                PLA             ; end setdp macro
.393bcd	c2 20		rep #$20	                REP #$20        ; set A long
.393bcf	a9 20 00	lda #$0020	                LDA #$0020;
.393bd2	85 28		sta $28		                STA OPL2_REG_REGION
.393bd4	20 9f 3f	jsr $393f9f	                JSR OPL2_GET_REG_OFFSET
.393bd7	e2 20		sep #$20	                SEP #$20        ; set A short
.393bd9	a5 32		lda $32		                LDA OPL2_PARAMETER0
.393bdb	29 0f		and #$0f	                AND #$0F
.393bdd	85 32		sta $32		                STA OPL2_PARAMETER0
.393bdf	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393be1	29 f0		and #$f0	                AND #$F0
.393be3	05 32		ora $32		                ORA OPL2_PARAMETER0
.393be5	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393be7	6b		rtl		                RTL
.393be8					OPL2_SET_SCALINGLEVEL
.393be8	48		pha		                PHA             ; begin setdp macro
.393be9	08		php		                PHP
.393bea	c2 20		rep #$20	                REP #$20        ; set A long
.393bec	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393bef	5b		tcd		                TCD
.393bf0	28		plp		                PLP
.393bf1	68		pla		                PLA             ; end setdp macro
.393bf2	c2 20		rep #$20	                REP #$20        ; set A long
.393bf4	a9 40 00	lda #$0040	                LDA #$0040;
.393bf7	85 28		sta $28		                STA OPL2_REG_REGION
.393bf9	20 9f 3f	jsr $393f9f	                JSR OPL2_GET_REG_OFFSET
.393bfc	e2 20		sep #$20	                SEP #$20        ; set A short
.393bfe	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393c00	29 03		and #$03	                AND #$03
.393c02	0a		asl a		                ASL
.393c03	0a		asl a		                ASL
.393c04	0a		asl a		                ASL
.393c05	0a		asl a		                ASL
.393c06	0a		asl a		                ASL
.393c07	0a		asl a		                ASL
.393c08	85 32		sta $32		                STA OPL2_PARAMETER0
.393c0a	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393c0c	29 3f		and #$3f	                AND #$3F
.393c0e	05 32		ora $32		                ORA OPL2_PARAMETER0
.393c10	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393c12	6b		rtl		                RTL
.393c13					OPL2_SET_VOLUME
.393c13	48		pha		                PHA             ; begin setdp macro
.393c14	08		php		                PHP
.393c15	c2 20		rep #$20	                REP #$20        ; set A long
.393c17	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c1a	5b		tcd		                TCD
.393c1b	28		plp		                PLP
.393c1c	68		pla		                PLA             ; end setdp macro
.393c1d	c2 20		rep #$20	                REP #$20        ; set A long
.393c1f	a9 40 00	lda #$0040	                LDA #$0040  ;
.393c22	85 28		sta $28		                STA OPL2_REG_REGION
.393c24	20 9f 3f	jsr $393f9f	                JSR OPL2_GET_REG_OFFSET
.393c27	e2 20		sep #$20	                SEP #$20        ; set A short
.393c29	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Volume
.393c2b	29 3f		and #$3f	                AND #$3F
.393c2d	85 32		sta $32		                STA OPL2_PARAMETER0
.393c2f	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393c31	29 c0		and #$c0	                AND #$C0
.393c33	05 32		ora $32		                ORA OPL2_PARAMETER0
.393c35	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393c37	6b		rtl		                RTL
.393c38					OPL2_GET_VOLUME
.393c38	48		pha		                PHA             ; begin setdp macro
.393c39	08		php		                PHP
.393c3a	c2 20		rep #$20	                REP #$20        ; set A long
.393c3c	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c3f	5b		tcd		                TCD
.393c40	28		plp		                PLP
.393c41	68		pla		                PLA             ; end setdp macro
.393c42	c2 20		rep #$20	                REP #$20        ; set A long
.393c44	a9 40 00	lda #$0040	                LDA #$0040  ;
.393c47	85 28		sta $28		                STA OPL2_REG_REGION
.393c49	20 9f 3f	jsr $393f9f	                JSR OPL2_GET_REG_OFFSET
.393c4c	e2 20		sep #$20	                SEP #$20        ; set A short
.393c4e	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393c50	29 3f		and #$3f	                AND #$3F
.393c52	6b		rtl		                RTL
.393c53					OPL2_SET_ATTACK
.393c53	48		pha		                PHA             ; begin setdp macro
.393c54	08		php		                PHP
.393c55	c2 20		rep #$20	                REP #$20        ; set A long
.393c57	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c5a	5b		tcd		                TCD
.393c5b	28		plp		                PLP
.393c5c	68		pla		                PLA             ; end setdp macro
.393c5d	c2 20		rep #$20	                REP #$20        ; set A long
.393c5f	a9 60 00	lda #$0060	                LDA #$0060  ;
.393c62	85 28		sta $28		                STA OPL2_REG_REGION
.393c64	20 9f 3f	jsr $393f9f	                JSR OPL2_GET_REG_OFFSET
.393c67	e2 20		sep #$20	                SEP #$20        ; set A short
.393c69	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393c6b	29 0f		and #$0f	                AND #$0F
.393c6d	0a		asl a		                ASL
.393c6e	0a		asl a		                ASL
.393c6f	0a		asl a		                ASL
.393c70	0a		asl a		                ASL
.393c71	85 32		sta $32		                STA OPL2_PARAMETER0
.393c73	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393c75	29 0f		and #$0f	                AND #$0F
.393c77	05 32		ora $32		                ORA OPL2_PARAMETER0
.393c79	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393c7b	6b		rtl		                RTL
.393c7c					OPL2_GET_ATTACK
.393c7c	48		pha		                PHA             ; begin setdp macro
.393c7d	08		php		                PHP
.393c7e	c2 20		rep #$20	                REP #$20        ; set A long
.393c80	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c83	5b		tcd		                TCD
.393c84	28		plp		                PLP
.393c85	68		pla		                PLA             ; end setdp macro
.393c86	c2 20		rep #$20	                REP #$20        ; set A long
.393c88	a9 60 00	lda #$0060	                LDA #$0060
.393c8b	85 28		sta $28		                STA OPL2_REG_REGION
.393c8d	20 9f 3f	jsr $393f9f	                JSR OPL2_GET_REG_OFFSET
.393c90	e2 20		sep #$20	                SEP #$20        ; set A short
.393c92	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393c94	29 f0		and #$f0	                AND #$F0
.393c96	4a		lsr a		                LSR
.393c97	4a		lsr a		                LSR
.393c98	4a		lsr a		                LSR
.393c99	4a		lsr a		                LSR
.393c9a	6b		rtl		                RTL
.393c9b					OPL2_SET_DECAY
.393c9b	48		pha		                PHA             ; begin setdp macro
.393c9c	08		php		                PHP
.393c9d	c2 20		rep #$20	                REP #$20        ; set A long
.393c9f	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393ca2	5b		tcd		                TCD
.393ca3	28		plp		                PLP
.393ca4	68		pla		                PLA             ; end setdp macro
.393ca5	c2 20		rep #$20	                REP #$20        ; set A long
.393ca7	a9 60 00	lda #$0060	                LDA #$0060;
.393caa	85 28		sta $28		                STA OPL2_REG_REGION
.393cac	20 9f 3f	jsr $393f9f	                JSR OPL2_GET_REG_OFFSET
.393caf	e2 20		sep #$20	                SEP #$20        ; set A short
.393cb1	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393cb3	29 0f		and #$0f	                AND #$0F
.393cb5	85 32		sta $32		                STA OPL2_PARAMETER0
.393cb7	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393cb9	29 f0		and #$f0	                AND #$F0
.393cbb	05 32		ora $32		                ORA OPL2_PARAMETER0
.393cbd	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393cbf	6b		rtl		                RTL
.393cc0					OPL2_GET_DECAY
.393cc0	48		pha		                PHA             ; begin setdp macro
.393cc1	08		php		                PHP
.393cc2	c2 20		rep #$20	                REP #$20        ; set A long
.393cc4	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393cc7	5b		tcd		                TCD
.393cc8	28		plp		                PLP
.393cc9	68		pla		                PLA             ; end setdp macro
.393cca	c2 20		rep #$20	                REP #$20        ; set A long
.393ccc	a9 60 00	lda #$0060	                LDA #$0060
.393ccf	85 28		sta $28		                STA OPL2_REG_REGION
.393cd1	20 9f 3f	jsr $393f9f	                JSR OPL2_GET_REG_OFFSET
.393cd4	e2 20		sep #$20	                SEP #$20        ; set A short
.393cd6	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393cd8	29 0f		and #$0f	                AND #$0F
.393cda	6b		rtl		                RTL
.393cdb					OPL2_SET_SUSTAIN
.393cdb	48		pha		                PHA             ; begin setdp macro
.393cdc	08		php		                PHP
.393cdd	c2 20		rep #$20	                REP #$20        ; set A long
.393cdf	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393ce2	5b		tcd		                TCD
.393ce3	28		plp		                PLP
.393ce4	68		pla		                PLA             ; end setdp macro
.393ce5	c2 20		rep #$20	                REP #$20        ; set A long
.393ce7	a9 80 00	lda #$0080	                LDA #$0080;
.393cea	85 28		sta $28		                STA OPL2_REG_REGION
.393cec	20 9f 3f	jsr $393f9f	                JSR OPL2_GET_REG_OFFSET
.393cef	e2 20		sep #$20	                SEP #$20        ; set A short
.393cf1	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393cf3	29 0f		and #$0f	                AND #$0F
.393cf5	0a		asl a		                ASL
.393cf6	0a		asl a		                ASL
.393cf7	0a		asl a		                ASL
.393cf8	0a		asl a		                ASL
.393cf9	85 32		sta $32		                STA OPL2_PARAMETER0
.393cfb	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393cfd	29 0f		and #$0f	                AND #$0F
.393cff	05 32		ora $32		                ORA OPL2_PARAMETER0
.393d01	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393d03	6b		rtl		                RTL
.393d04					OPL2_GET_SUSTAIN
.393d04	48		pha		                PHA             ; begin setdp macro
.393d05	08		php		                PHP
.393d06	c2 20		rep #$20	                REP #$20        ; set A long
.393d08	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d0b	5b		tcd		                TCD
.393d0c	28		plp		                PLP
.393d0d	68		pla		                PLA             ; end setdp macro
.393d0e	c2 20		rep #$20	                REP #$20        ; set A long
.393d10	a9 80 00	lda #$0080	                LDA #$0080
.393d13	85 28		sta $28		                STA OPL2_REG_REGION
.393d15	20 9f 3f	jsr $393f9f	                JSR OPL2_GET_REG_OFFSET
.393d18	e2 20		sep #$20	                SEP #$20        ; set A short
.393d1a	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d1c	29 f0		and #$f0	                AND #$F0
.393d1e	4a		lsr a		                LSR
.393d1f	4a		lsr a		                LSR
.393d20	4a		lsr a		                LSR
.393d21	4a		lsr a		                LSR
.393d22	6b		rtl		                RTL
.393d23					OPL2_SET_RELEASE
.393d23	48		pha		                PHA             ; begin setdp macro
.393d24	08		php		                PHP
.393d25	c2 20		rep #$20	                REP #$20        ; set A long
.393d27	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d2a	5b		tcd		                TCD
.393d2b	28		plp		                PLP
.393d2c	68		pla		                PLA             ; end setdp macro
.393d2d	c2 20		rep #$20	                REP #$20        ; set A long
.393d2f	a9 80 00	lda #$0080	                LDA #$0080;
.393d32	85 28		sta $28		                STA OPL2_REG_REGION
.393d34	20 9f 3f	jsr $393f9f	                JSR OPL2_GET_REG_OFFSET
.393d37	e2 20		sep #$20	                SEP #$20        ; set A short
.393d39	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393d3b	29 0f		and #$0f	                AND #$0F
.393d3d	85 32		sta $32		                STA OPL2_PARAMETER0
.393d3f	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d41	29 f0		and #$f0	                AND #$F0
.393d43	05 32		ora $32		                ORA OPL2_PARAMETER0
.393d45	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393d47	6b		rtl		                RTL
.393d48					OPL2_GET_RELEASE
.393d48	48		pha		                PHA             ; begin setdp macro
.393d49	08		php		                PHP
.393d4a	c2 20		rep #$20	                REP #$20        ; set A long
.393d4c	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d4f	5b		tcd		                TCD
.393d50	28		plp		                PLP
.393d51	68		pla		                PLA             ; end setdp macro
.393d52	c2 20		rep #$20	                REP #$20        ; set A long
.393d54	a9 80 00	lda #$0080	                LDA #$0080
.393d57	85 28		sta $28		                STA OPL2_REG_REGION
.393d59	20 9f 3f	jsr $393f9f	                JSR OPL2_GET_REG_OFFSET
.393d5c	e2 20		sep #$20	                SEP #$20        ; set A short
.393d5e	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d60	29 0f		and #$0f	                AND #$0F
.393d62	6b		rtl		                RTL
.393d63					OPL2_SET_FNUMBER
.393d63	48		pha		                PHA             ; begin setdp macro
.393d64	08		php		                PHP
.393d65	c2 20		rep #$20	                REP #$20        ; set A long
.393d67	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d6a	5b		tcd		                TCD
.393d6b	28		plp		                PLP
.393d6c	68		pla		                PLA             ; end setdp macro
.393d6d	e2 20		sep #$20	                SEP #$20        ; set A short
.393d6f	18		clc		                CLC
.393d70	a5 27		lda $27		                LDA OPL2_CHANNEL
.393d72	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393d74	69 a0		adc #$a0	                ADC #$A0
.393d76	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393d78	a9 00		lda #$00	                LDA #$00
.393d7a	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393d7c	c2 30		rep #$30	                REP #$30        ; set A&X long
.393d7e	18		clc		                CLC
.393d7f	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393d82	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393d84	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393d86	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393d89	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393d8b	e2 20		sep #$20	                SEP #$20        ; set A short
.393d8d	a5 32		lda $32		                LDA OPL2_PARAMETER0     ; Load the first 8 Bits Value of FNumber
.393d8f	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]  ; Load
.393d91	18		clc		                CLC
.393d92	a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.393d94	69 10		adc #$10	                ADC #$10
.393d96	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393d98	a5 33		lda $33		                LDA OPL2_PARAMETER1
.393d9a	29 03		and #$03	                AND #$03
.393d9c	85 33		sta $33		                STA OPL2_PARAMETER1
.393d9e	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393da0	29 fc		and #$fc	                AND #$FC
.393da2	05 33		ora $33		                ORA OPL2_PARAMETER1
.393da4	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393da6	6b		rtl		                RTL
.393da7					OPL2_GET_FNUMBER
.393da7	48		pha		                PHA             ; begin setdp macro
.393da8	08		php		                PHP
.393da9	c2 20		rep #$20	                REP #$20        ; set A long
.393dab	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393dae	5b		tcd		                TCD
.393daf	28		plp		                PLP
.393db0	68		pla		                PLA             ; end setdp macro
.393db1	e2 20		sep #$20	                SEP #$20        ; set A short
.393db3	18		clc		                CLC
.393db4	a5 27		lda $27		                LDA OPL2_CHANNEL
.393db6	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393db8	69 a0		adc #$a0	                ADC #$A0
.393dba	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393dbc	a9 00		lda #$00	                LDA #$00
.393dbe	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393dc0	c2 30		rep #$30	                REP #$30        ; set A&X long
.393dc2	18		clc		                CLC
.393dc3	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393dc6	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393dc8	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393dca	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393dcd	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393dcf	e2 20		sep #$20	                SEP #$20        ; set A short
.393dd1	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393dd3	85 32		sta $32		                STA OPL2_PARAMETER0
.393dd5	18		clc		                CLC
.393dd6	a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.393dd8	69 10		adc #$10	                ADC #$10
.393dda	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393ddc	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393dde	29 03		and #$03	                AND #$03
.393de0	85 33		sta $33		                STA OPL2_PARAMETER1
.393de2	6b		rtl		                RTL
.393de3					OPL2_Set_Frequency
.393de3	6b		rtl		                RTL
.393de4					OPL2_Get_Frequency
.393de4	6b		rtl		                RTL
.393de5					OPL2_SET_BLOCK
.393de5	48		pha		                PHA             ; begin setdp macro
.393de6	08		php		                PHP
.393de7	c2 20		rep #$20	                REP #$20        ; set A long
.393de9	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393dec	5b		tcd		                TCD
.393ded	28		plp		                PLP
.393dee	68		pla		                PLA             ; end setdp macro
.393def	e2 20		sep #$20	                SEP #$20        ; set A short
.393df1	18		clc		                CLC
.393df2	a5 27		lda $27		                LDA OPL2_CHANNEL
.393df4	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393df6	69 b0		adc #$b0	                ADC #$B0
.393df8	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393dfa	a9 00		lda #$00	                LDA #$00
.393dfc	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393dfe	c2 30		rep #$30	                REP #$30        ; set A&X long
.393e00	18		clc		                CLC
.393e01	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393e04	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393e06	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393e08	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393e0b	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393e0d	e2 20		sep #$20	                SEP #$20        ; set A short
.393e0f	a5 31		lda $31		                LDA OPL2_OCTAVE
.393e11	29 07		and #$07	                AND #$07
.393e13	0a		asl a		                ASL
.393e14	0a		asl a		                ASL
.393e15	85 31		sta $31		                STA OPL2_OCTAVE
.393e17	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393e19	29 e3		and #$e3	                AND #$E3
.393e1b	05 31		ora $31		                ORA OPL2_OCTAVE
.393e1d	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393e1f	60		rts		                RTS
.393e20					OPL2_SET_KEYON
.393e20	48		pha		                PHA             ; begin setdp macro
.393e21	08		php		                PHP
.393e22	c2 20		rep #$20	                REP #$20        ; set A long
.393e24	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393e27	5b		tcd		                TCD
.393e28	28		plp		                PLP
.393e29	68		pla		                PLA             ; end setdp macro
.393e2a	e2 20		sep #$20	                SEP #$20        ; set A short
.393e2c	18		clc		                CLC
.393e2d	a5 27		lda $27		                LDA OPL2_CHANNEL
.393e2f	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393e31	69 b0		adc #$b0	                ADC #$B0
.393e33	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393e35	a9 00		lda #$00	                LDA #$00
.393e37	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393e39	c2 30		rep #$30	                REP #$30        ; set A&X long
.393e3b	18		clc		                CLC
.393e3c	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393e3f	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393e41	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393e43	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393e46	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393e48	e2 20		sep #$20	                SEP #$20        ; set A short
.393e4a	a5 32		lda $32		                LDA OPL2_PARAMETER0
.393e4c	29 01		and #$01	                AND #$01
.393e4e	f0 02		beq $393e52	                BEQ SET_KEYON_OFF
.393e50	a9 20		lda #$20	                LDA #$20
.393e52					    SET_KEYON_OFF
.393e52	85 32		sta $32		                STA OPL2_PARAMETER0
.393e54	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393e56	29 df		and #$df	                AND #$DF
.393e58	05 32		ora $32		                ORA OPL2_PARAMETER0
.393e5a	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393e5c	60		rts		                RTS
.393e5d					OPL2_SET_FEEDBACK
.393e5d	48		pha		                PHA             ; begin setdp macro
.393e5e	08		php		                PHP
.393e5f	c2 20		rep #$20	                REP #$20        ; set A long
.393e61	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393e64	5b		tcd		                TCD
.393e65	28		plp		                PLP
.393e66	68		pla		                PLA             ; end setdp macro
.393e67	e2 20		sep #$20	                SEP #$20        ; set A short
.393e69	18		clc		              CLC
.393e6a	a5 27		lda $27		              LDA OPL2_CHANNEL
.393e6c	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393e6e	69 c0		adc #$c0	              ADC #$C0
.393e70	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393e72	a9 00		lda #$00	              LDA #$00
.393e74	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393e76	c2 30		rep #$30	                REP #$30        ; set A&X long
.393e78	18		clc		              CLC
.393e79	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393e7c	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393e7e	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393e80	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393e83	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393e85	e2 20		sep #$20	                SEP #$20        ; set A short
.393e87	a5 32		lda $32		              LDA OPL2_PARAMETER0
.393e89	29 07		and #$07	              AND #$07
.393e8b	0a		asl a		              ASL
.393e8c	85 32		sta $32		              STA OPL2_PARAMETER0
.393e8e	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393e90	29 01		and #$01	              AND #$01
.393e92	05 32		ora $32		              ORA OPL2_PARAMETER0
.393e94	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393e96	6b		rtl		                RTL
.393e97					OPL2_SET_SYNTHMODE
.393e97	48		pha		                PHA             ; begin setdp macro
.393e98	08		php		                PHP
.393e99	c2 20		rep #$20	                REP #$20        ; set A long
.393e9b	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393e9e	5b		tcd		                TCD
.393e9f	28		plp		                PLP
.393ea0	68		pla		                PLA             ; end setdp macro
.393ea1	08		php		              PHP ; Push the Carry
.393ea2	e2 20		sep #$20	                SEP #$20        ; set A short
.393ea4	18		clc		              CLC
.393ea5	a5 27		lda $27		              LDA OPL2_CHANNEL
.393ea7	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393ea9	69 c0		adc #$c0	              ADC #$C0
.393eab	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393ead	a9 00		lda #$00	              LDA #$00
.393eaf	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393eb1	c2 30		rep #$30	                REP #$30        ; set A&X long
.393eb3	18		clc		              CLC
.393eb4	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393eb7	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393eb9	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393ebb	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393ebe	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393ec0	28		plp		              PLP ; Pull the Carry out
.393ec1	e2 20		sep #$20	                SEP #$20        ; set A short
.393ec3	b0 08		bcs $393ecd	              BCS OPL2_Set_Synthmode_Set;
.393ec5	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393ec7	29 fe		and #$fe	              AND #$FE
.393ec9	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393ecb	80 06		bra $393ed3	              BRA OPL2_Set_Synthmode_Exit
.393ecd					OPL2_Set_Synthmode_Set
.393ecd	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393ecf	09 01		ora #$01	              ORA #$01
.393ed1	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393ed3					OPL2_Set_Synthmode_Exit
.393ed3	6b		rtl		                RTL
.393ed4					OPL2_SET_DEEPTREMOLO
.393ed4	48		pha		                PHA             ; begin setdp macro
.393ed5	08		php		                PHP
.393ed6	c2 20		rep #$20	                REP #$20        ; set A long
.393ed8	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393edb	5b		tcd		                TCD
.393edc	28		plp		                PLP
.393edd	68		pla		                PLA             ; end setdp macro
.393ede	c2 20		rep #$20	                REP #$20        ; set A long
.393ee0	a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.393ee3	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393ee5	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393ee8	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393eea	e2 20		sep #$20	                SEP #$20        ; set A short
.393eec	b0 08		bcs $393ef6	              BCS OPL2_Set_DeepTremolo_Set;
.393eee	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393ef0	29 7f		and #$7f	              AND #$7F
.393ef2	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393ef4	80 06		bra $393efc	              BRA OPL2_Set_DeepTremolo_Exit
.393ef6					OPL2_Set_DeepTremolo_Set
.393ef6	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393ef8	09 80		ora #$80	              ORA #$80
.393efa	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393efc					OPL2_Set_DeepTremolo_Exit
.393efc	6b		rtl		                RTL
.393efd					OPL2_SET_DEEPVIBRATO
.393efd	48		pha		                PHA             ; begin setdp macro
.393efe	08		php		                PHP
.393eff	c2 20		rep #$20	                REP #$20        ; set A long
.393f01	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393f04	5b		tcd		                TCD
.393f05	28		plp		                PLP
.393f06	68		pla		                PLA             ; end setdp macro
.393f07	c2 20		rep #$20	                REP #$20        ; set A long
.393f09	a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.393f0c	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393f0e	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393f11	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393f13	e2 20		sep #$20	                SEP #$20        ; set A short
.393f15	b0 08		bcs $393f1f	              BCS OPL2_Set_DeepVibrato_Set;
.393f17	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393f19	29 bf		and #$bf	              AND #$BF
.393f1b	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393f1d	80 06		bra $393f25	              BRA OPL2_Set_DeepVibrato_Exit
.393f1f					OPL2_Set_DeepVibrato_Set
.393f1f	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393f21	09 40		ora #$40	              ORA #$40
.393f23	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393f25					OPL2_Set_DeepVibrato_Exit
.393f25	6b		rtl		                RTL
.393f26					OPL2_SET_PERCUSSION
.393f26	48		pha		                PHA             ; begin setdp macro
.393f27	08		php		                PHP
.393f28	c2 20		rep #$20	                REP #$20        ; set A long
.393f2a	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393f2d	5b		tcd		                TCD
.393f2e	28		plp		                PLP
.393f2f	68		pla		                PLA             ; end setdp macro
.393f30	c2 20		rep #$20	                REP #$20        ; set A long
.393f32	a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.393f35	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393f37	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393f3a	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393f3c	e2 20		sep #$20	                SEP #$20        ; set A short
.393f3e	b0 08		bcs $393f48	                BCS OPL2_Set_Percussion_Set;
.393f40	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393f42	29 df		and #$df	                AND #$DF
.393f44	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393f46	80 06		bra $393f4e	                BRA OPL2_Set_Percussion_Exit
.393f48					OPL2_Set_Percussion_Set
.393f48	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393f4a	09 20		ora #$20	                ORA #$20
.393f4c	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393f4e					OPL2_Set_Percussion_Exit
.393f4e	6b		rtl		                RTL
.393f4f					OPL2_SET_DRUMS
.393f4f	48		pha		                PHA             ; begin setdp macro
.393f50	08		php		                PHP
.393f51	c2 20		rep #$20	                REP #$20        ; set A long
.393f53	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393f56	5b		tcd		                TCD
.393f57	28		plp		                PLP
.393f58	68		pla		                PLA             ; end setdp macro
.393f59	c2 20		rep #$20	                REP #$20        ; set A long
.393f5b	a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.393f5e	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393f60	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393f63	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393f65	e2 20		sep #$20	                SEP #$20        ; set A short
.393f67	a5 32		lda $32		                LDA OPL2_PARAMETER0
.393f69	29 1f		and #$1f	                AND #$1F
.393f6b	85 32		sta $32		                STA OPL2_PARAMETER0
.393f6d	49 ff		eor #$ff	                EOR #$FF
.393f6f	85 33		sta $33		                STA OPL2_PARAMETER1
.393f71	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393f73	25 33		and $33		                AND OPL2_PARAMETER1
.393f75	05 32		ora $32		                ORA OPL2_PARAMETER0
.393f77	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393f79	6b		rtl		                RTL
.393f7a					OPL2_SET_WAVEFORM
.393f7a	48		pha		                PHA             ; begin setdp macro
.393f7b	08		php		                PHP
.393f7c	c2 20		rep #$20	                REP #$20        ; set A long
.393f7e	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393f81	5b		tcd		                TCD
.393f82	28		plp		                PLP
.393f83	68		pla		                PLA             ; end setdp macro
.393f84	c2 20		rep #$20	                REP #$20        ; set A long
.393f86	a9 e0 00	lda #$00e0	                LDA #$00E0;
.393f89	85 28		sta $28		                STA OPL2_REG_REGION
.393f8b	20 9f 3f	jsr $393f9f	                JSR OPL2_GET_REG_OFFSET
.393f8e	e2 20		sep #$20	                SEP #$20        ; set A short
.393f90	a5 32		lda $32		                LDA OPL2_PARAMETER0
.393f92	29 03		and #$03	                AND #$03
.393f94	85 32		sta $32		                STA OPL2_PARAMETER0
.393f96	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393f98	29 fc		and #$fc	                AND #$FC
.393f9a	05 32		ora $32		                ORA OPL2_PARAMETER0
.393f9c	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393f9e	6b		rtl		                RTL
.393f9f					OPL2_GET_REG_OFFSET
.393f9f	e2 30		sep #$30	                SEP #$30        ; set A&X short
.393fa1	a5 27		lda $27		                LDA OPL2_CHANNEL
.393fa3	29 0f		and #$0f	                AND #$0F
.393fa5	aa		tax		                TAX
.393fa6	a5 26		lda $26		                LDA OPL2_OPERATOR   ; 0 = operator 1, other = operator 2
.393fa8	d0 06		bne $393fb0	                BNE OPL2_Get_Register_Offset_l0
.393faa	bf e7 15 39	lda $3915e7,x	                LDA @lregisterOffsets_operator0, X
.393fae	80 04		bra $393fb4	                BRA OPL2_Get_Register_Offset_exit
.393fb0					OPL2_Get_Register_Offset_l0
.393fb0	bf f0 15 39	lda $3915f0,x	                LDA @lregisterOffsets_operator1, X
.393fb4					OPL2_Get_Register_Offset_exit
.393fb4	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393fb6	a9 00		lda #$00	                LDA #$00
.393fb8	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393fba	c2 30		rep #$30	                REP #$30        ; set A&X long
.393fbc	18		clc		                CLC
.393fbd	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393fc0	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393fc2	65 28		adc $28		                ADC OPL2_REG_REGION ; Ex: $20, or $40, $60, $80 (in 16bits)
.393fc4	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393fc6	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393fc9	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393fcb	60		rts		                RTS

;******  Return to file: src\kernel.asm


;******  Processing file: src\sdcard_controller_def.asm

=$afea00				SDC_VERSION_REG         = $AFEA00    ; Ought to read 12
=$afea01				SDC_CONTROL_REG         = $AFEA01    ; Bit0 1 = Reset core logic, and registers. Self clearing
=$afea02				SDC_TRANS_TYPE_REG      = $AFEA02  ; Bit[1:0]
=$00					SDC_TRANS_DIRECT      = $00   ; 00 = Direct Access
=$01					SDC_TRANS_INIT_SD     = $01   ; 01 = Init SD
=$02					SDC_TRANS_READ_BLK    = $02   ; 10 = RW_READ_BLOCK (512 Bytes)
=$03					SDC_TRANS_WRITE_BLK   = $03   ; 11 = RW_WRITE_SD_BLOCK
=$afea03				SDC_TRANS_CONTROL_REG   = $AFEA03
=$01					SDC_TRANS_START         = $01
=$afea04				SDC_TRANS_STATUS_REG    = $AFEA04
=$01					SDC_TRANS_BUSY          = $01     ;  1= Transaction Busy
=$afea05				SDC_TRANS_ERROR_REG     = $AFEA05
=$00					SDC_TRANS_INIT_NO_ERR   = $00   ; Init Error Report [1:0]
=$01					SDC_TRANS_INIT_CMD0_ERR = $01
=$02					SDC_TRANS_INIT_CMD1_ERR = $02
=$00					SDC_TRANS_RD_NO_ERR     = $00   ; Read Error Report [3:2]
=$04					SDC_TRANS_RD_CMD_ERR    = $04
=$08					SDC_TRANS_RD_TOKEN_ERR  = $08
=$00					SDC_TRANS_WR_NO_ERR     = $00   ; Write Report Error  [5:4]
=$10					SDC_TRANS_WR_CMD_ERR    = $10   ;
=$20					SDC_TRANS_WR_DATA_ERR   = $20
=$30					SDC_TRANS_WR_BUSY_ERR   = $30
=$afea06				SDC_DIRECT_ACCESS_REG   = $AFEA06 ; SPI Direct Read and Write - Set DATA before initiating direct Access Transaction
=$afea07				SDC_SD_ADDR_7_0_REG     = $AFEA07 ; Set the ADDR before a block read or block write
=$afea08				SDC_SD_ADDR_15_8_REG    = $AFEA08 ; Addr0 [8:0] Always should be 0, since each block is 512Bytes
=$afea09				SDC_SD_ADDR_23_16_REG   = $AFEA09
=$afea0a				SDC_SD_ADDR_31_24_REG   = $AFEA0A
=$afea0b				SDC_SPI_CLK_DEL_REG     = $AFEA0B
=$afea10				SDC_RX_FIFO_DATA_REG    = $AFEA10 ; Data from the Block Read
=$afea12				SDC_RX_FIFO_DATA_CNT_HI = $AFEA12 ; How many Bytes in the FIFO HI
=$afea13				SDC_RX_FIFO_DATA_CNT_LO = $AFEA13 ; How many Bytes in the FIFO LO
=$afea14				SDC_RX_FIFO_CTRL_REG    = $AFEA14 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)
=$afea20				SDC_TX_FIFO_DATA_REG    = $AFEA20 ; Write Data Block here
=$afea24				SDC_TX_FIFO_CTRL_REG    = $AFEA24 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)

;******  Return to file: src\kernel.asm


;******  Processing file: src\sdos.asm


;******  Processing file: src\sdos_fat.asm


;******  Processing file: src\sdos_bios.asm

=$80					BIOS_TIMEOUT = $80              ; Flag to indicate if a time out has occurred (see ISETTIMEOUT)
=0					BIOS_DEV_FDC = 0                ; Floppy 0
=1					BIOS_DEV_FD1 = 1                ; Future support: Floppy 1 (not likely to be attached)
=2					BIOS_DEV_SD = 2                 ; SD card, partition 0
=3					BIOS_DEV_SD1 = 3                ; Future support: SD card, partition 1
=4					BIOS_DEV_SD2 = 4                ; Future support: SD card, partition 2
=5					BIOS_DEV_SD3 = 5                ; Future support: SD card, partition 3
=6					BIOS_DEV_HD0 = 6                ; Future support: IDE Drive 0, partition 0
=7					BIOS_DEV_HD1 = 7                ; Future support: IDE Drive 0, partition 1
=8					BIOS_DEV_HD2 = 8                ; Future support: IDE Drive 0, partition 2
=9					BIOS_DEV_HD3 = 9                ; Future support: IDE Drive 0, partition 3
=$80					BIOS_ERR_BADDEV = $80           ; BIOS bad device # error
=$81					BIOS_ERR_MOUNT = $81            ; BIOS failed to mount the device
=$82					BIOS_ERR_READ = $82             ; BIOS failed to read from a device
=$83					BIOS_ERR_WRITE = $83            ; BIOS failed to write to a device
=$84					BIOS_ERR_TRACK = $84            ; BIOS failed to seek to the correct track
=$85					BIOS_ERR_CMD = $85              ; A general block device command error
=$86					BIOS_ERR_WRITEPROT = $86        ; The media was write-protected
=$87					BIOS_ERR_NOMEDIA = $87          ; No media detected... unable to read/write in time
=$88					BIOS_ERR_RESULT = $88           ; Couldn't get the result bytes for some reason
=$89					BIOS_ERR_OOS = $89              ; FDC state is somehow out of sync with the driver.
=$8a					BIOS_ERR_NOTATA = $8A           ; IDE drive is not ATA
=$8b					BIOS_ERR_NOTINIT = $8B          ; Could not initilize the device
=$8c					BIOS_ERR_TIMEOUT = $8C          ; Timeout error
.393fcc					ITRACE
.393fcc	08		php		                PHP
.393fcd	c2 30		rep #$30	                REP #$30        ; set A&X long
.393fcf	8b		phb		                PHB                 ; Print the text
.393fd0	a3 06		lda $06,s	                LDA #6,S            ; Get bits[15..0] of string pointer
.393fd2	aa		tax		                TAX                 ; ... into X
.393fd3	e2 20		sep #$20	                SEP #$20        ; set A short
.393fd5	a3 08		lda $08,s	                LDA #8,S            ; Get bits[23..16] of string pointer
.393fd7	48		pha		                PHA
.393fd8	ab		plb		                PLB                 ; ... into B
.393fd9	22 c5 06 39	jsl $3906c5	                JSL IPUTS           ; Print the string
.393fdd	c2 20		rep #$20	                REP #$20        ; set A long
.393fdf	a3 04		lda $04,s	                LDA #4,S            ; Move P and return address down over the string pointer
.393fe1	83 08		sta $08,s	                STA #8,S
.393fe3	a3 02		lda $02,s	                LDA #2,S
.393fe5	83 06		sta $06,s	                STA #6,S
.393fe7	ab		plb		                PLB
.393fe8	68		pla		                PLA                 ; Clean up the stack
.393fe9	68		pla		                PLA
.393fea	28		plp		                PLP
.393feb	6b		rtl		                RTL
.393fec					ISETTIMEOUT
.393fec	8b		phb		                PHB
.393fed	0b		phd		                PHD
.393fee	08		php		                PHP
.393fef	48		pha		                PHA             ; begin setdbr macro
.393ff0	08		php		                PHP
.393ff1	e2 20		sep #$20	                SEP #$20        ; set A short
.393ff3	a9 00		lda #$00	                LDA #0
.393ff5	48		pha		                PHA
.393ff6	ab		plb		                PLB
.393ff7	28		plp		                PLP
.393ff8	68		pla		                PLA             ; end setdbr macro
.393ff9	48		pha		                PHA             ; begin setdp macro
.393ffa	08		php		                PHP
.393ffb	c2 20		rep #$20	                REP #$20        ; set A long
.393ffd	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394000	5b		tcd		                TCD
.394001	28		plp		                PLP
.394002	68		pla		                PLA             ; end setdp macro
.394003	78		sei		                SEI                             ; We don't want to be interrupted
.394004	e2 20		sep #$20	                SEP #$20        ; set A short
.394006	85 0d		sta $032d	                STA @b BIOS_TIMER               ; Set the number of ticks to wait
.394008	a5 0c		lda $032c	                LDA @b BIOS_FLAGS               ; Clear the BIOS_TIMEOUT flag
.39400a	29 7f		and #$7f	                AND #~BIOS_TIMEOUT
.39400c	85 0c		sta $032c	                STA @b BIOS_FLAGS
.39400e	28		plp		done            PLP
.39400f	2b		pld		                PLD
.394010	ab		plb		                PLB
.394011	6b		rtl		                RTL
.394012					ICMDBLOCK
.394012	0b		phd		                PHD
.394013	08		php		                PHP
.394014	48		pha		                PHA             ; begin setdp macro
.394015	08		php		                PHP
.394016	c2 20		rep #$20	                REP #$20        ; set A long
.394018	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39401b	5b		tcd		                TCD
.39401c	28		plp		                PLP
.39401d	68		pla		                PLA             ; end setdp macro
.39401e	e2 20		sep #$20	                SEP #$20        ; set A short
.394020	a5 01		lda $0321	                LDA BIOS_DEV                ; Get the device number
.394022	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Check to see if we're sending to the floppy
.394024	d0 06		bne $39402c	                BNE ret_success             ; No: just return
.394026	22 fa 66 39	jsl $3966fa	                JSL FDC_CMDBLOCK            ; Yes: call upon the floppy code
.39402a	90 0c		bcc $394038	                BCC pass_failure
.39402c					ret_success
.39402c	e2 20		sep #$20	                SEP #$20        ; set A short
.39402e	64 00		stz $0320	                STZ BIOS_STATUS
.394030	28		plp		                PLP
.394031	2b		pld		                PLD
.394032	38		sec		                SEC
.394033	6b		rtl		                RTL
.394034					ret_failure
.394034	e2 20		sep #$20	                SEP #$20        ; set A short
.394036	85 00		sta $0320	                STA BIOS_STATUS
.394038	28		plp		pass_failure    PLP
.394039	2b		pld		                PLD
.39403a	18		clc		                CLC
.39403b	6b		rtl		                RTL
.39403c					IGETBLOCK
.39403c	0b		phd		                PHD
.39403d	8b		phb		                PHB
.39403e	08		php		                PHP
.39403f	48		pha		                PHA             ; begin setdbr macro
.394040	08		php		                PHP
.394041	e2 20		sep #$20	                SEP #$20        ; set A short
.394043	a9 00		lda #$00	                LDA #0
.394045	48		pha		                PHA
.394046	ab		plb		                PLB
.394047	28		plp		                PLP
.394048	68		pla		                PLA             ; end setdbr macro
.394049	48		pha		                PHA             ; begin setdp macro
.39404a	08		php		                PHP
.39404b	c2 20		rep #$20	                REP #$20        ; set A long
.39404d	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394050	5b		tcd		                TCD
.394051	28		plp		                PLP
.394052	68		pla		                PLA             ; end setdp macro
.394053	e2 20		sep #$20	                SEP #$20        ; set A short
.394055	a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.394057	c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.394059	f0 13		beq $39406e	                BEQ sd_getblock                     ; Yes: go to the SDC GETBLOCK routine
.39405b	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the floppy drive?
.39405d	f0 17		beq $394076	                BEQ fd_getblock                     ; Yes: go to the FDC GETBLOCK routine
.39405f	c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.394061	f0 1b		beq $39407e	                BEQ hd_getblock
.394063	a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.394065					ret_failure
.394065	e2 20		sep #$20	                SEP #$20        ; set A short
.394067	85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.394069	28		plp		                PLP
.39406a	ab		plb		                PLB
.39406b	2b		pld		                PLD
.39406c	38		sec		                SEC                                 ; Return failure
.39406d	6b		rtl		                RTL
.39406e	22 24 5c 39	jsl $395c24	sd_getblock     JSL SDC_GETBLOCK                    ; Call the SDC GETBLOCK routine
.394072	b0 12		bcs $394086	                BCS ret_success
.394074	80 ef		bra $394065	                BRA ret_failure
.394076	22 03 65 39	jsl $396503	fd_getblock     JSL FDC_GETBLOCK                    ; Call the FDC GETBLOCK routine
.39407a	b0 0a		bcs $394086	                BCS ret_success
.39407c	80 e7		bra $394065	                BRA ret_failure
.39407e	22 bb 6a 39	jsl $396abb	hd_getblock     JSL IDE_GETBLOCK                    ; Call the IDE GETBLOCK routine
.394082	b0 02		bcs $394086	                BCS ret_success
.394084	80 df		bra $394065	                BRA ret_failure
.394086					ret_success
.394086	e2 20		sep #$20	                SEP #$20        ; set A short
.394088	64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.39408a	28		plp		                PLP
.39408b	ab		plb		                PLB
.39408c	2b		pld		                PLD
.39408d	38		sec		                SEC                                 ; Return success
.39408e	6b		rtl		                RTL
.39408f					IPUTBLOCK
.39408f	0b		phd		                PHD
.394090	8b		phb		                PHB
.394091	08		php		                PHP
.394092	48		pha		                PHA             ; begin setdbr macro
.394093	08		php		                PHP
.394094	e2 20		sep #$20	                SEP #$20        ; set A short
.394096	a9 00		lda #$00	                LDA #0
.394098	48		pha		                PHA
.394099	ab		plb		                PLB
.39409a	28		plp		                PLP
.39409b	68		pla		                PLA             ; end setdbr macro
.39409c	48		pha		                PHA             ; begin setdp macro
.39409d	08		php		                PHP
.39409e	c2 20		rep #$20	                REP #$20        ; set A long
.3940a0	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3940a3	5b		tcd		                TCD
.3940a4	28		plp		                PLP
.3940a5	68		pla		                PLA             ; end setdp macro
.3940a6	e2 20		sep #$20	                SEP #$20        ; set A short
.3940a8	a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.3940aa	c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.3940ac	f0 13		beq $3940c1	                BEQ sd_putblock                     ; Yes: go to the SDC PUTBLOCK routine
.3940ae	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the FDC?
.3940b0	f0 17		beq $3940c9	                BEQ fd_putblock                     ; Yes: go to the FDC PUTBLOCK routine
.3940b2	c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.3940b4	f0 1b		beq $3940d1	                BEQ hd_putblock
.3940b6	a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.3940b8					ret_failure
.3940b8	e2 20		sep #$20	                SEP #$20        ; set A short
.3940ba	85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.3940bc	28		plp		                PLP
.3940bd	ab		plb		                PLB
.3940be	2b		pld		                PLD
.3940bf	18		clc		                CLC                                 ; Return failure
.3940c0	6b		rtl		                RTL
.3940c1	22 c4 5c 39	jsl $395cc4	sd_putblock     JSL SDC_PUTBLOCK                    ; Call the SDC PUTBLOCK routine
.3940c5	90 f1		bcc $3940b8	                BCC ret_failure
.3940c7	80 10		bra $3940d9	                BRA ret_success
.3940c9	22 68 65 39	jsl $396568	fd_putblock     JSL FDC_PUTBLOCK                    ; Call the FDC PUTBLOCK routine
.3940cd	90 e9		bcc $3940b8	                BCC ret_failure
.3940cf	80 08		bra $3940d9	                BRA ret_success
.3940d1	22 4c 6b 39	jsl $396b4c	hd_putblock     JSL IDE_PUTBLOCK                    ; Call the IDE PUTBLOCK routine
.3940d5	90 e1		bcc $3940b8	                BCC ret_failure
.3940d7	80 00		bra $3940d9	                BRA ret_success
.3940d9					ret_success
.3940d9	e2 20		sep #$20	                SEP #$20        ; set A short
.3940db	64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.3940dd	28		plp		                PLP
.3940de	ab		plb		                PLB
.3940df	2b		pld		                PLD
.3940e0	38		sec		                SEC                                 ; Return success
.3940e1	6b		rtl		                RTL

;******  Return to file: src\sdos_fat.asm


;******  Processing file: src\sdos_dir.asm

.3940e2					DOS_DIROPEN
.3940e2	da		phx		                PHX
.3940e3	5a		phy		                PHY
.3940e4	0b		phd		                PHD
.3940e5	8b		phb		                PHB
.3940e6	08		php		                PHP
.3940e7	48		pha		                PHA             ; begin setdbr macro
.3940e8	08		php		                PHP
.3940e9	e2 20		sep #$20	                SEP #$20        ; set A short
.3940eb	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3940ed	48		pha		                PHA
.3940ee	ab		plb		                PLB
.3940ef	28		plp		                PLP
.3940f0	68		pla		                PLA             ; end setdbr macro
.3940f1	48		pha		                PHA             ; begin setdp macro
.3940f2	08		php		                PHP
.3940f3	c2 20		rep #$20	                REP #$20        ; set A long
.3940f5	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3940f8	5b		tcd		                TCD
.3940f9	28		plp		                PLP
.3940fa	68		pla		                PLA             ; end setdp macro
.3940fb	ad 20 a0	lda $38a020	                LDA ROOT_DIR_FIRST_CLUSTER  ; Set the cluster (or sector for FAT12)
.3940fe	8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID        ; to that of the root directory's start
.394101	ad 22 a0	lda $38a022	                LDA ROOT_DIR_FIRST_CLUSTER+2
.394104	8d 34 a0	sta $38a034	                STA DOS_DIR_BLOCK_ID+2
.394107	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Point to the directory cluster buffer for loading
.39410a	85 1c		sta $033c	                STA DOS_BUFF_PTR
.39410c	85 18		sta $0338	                STA DOS_DIR_PTR
.39410e	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.394111	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394113	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.394115	e2 20		sep #$20	                SEP #$20        ; set A short
.394117	ad 01 a0	lda $38a001	                LDA FILE_SYSTEM             ; Check the file system
.39411a	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12        ; Is it FAT12?
.39411c	d0 24		bne $394142	                BNE fetch_fat32             ; No: handle processing the diretory as FAT32
.39411e					fetch_fat12
.39411e	e2 20		sep #$20	                SEP #$20        ; set A short
.394120	a9 00		lda #$00	                LDA #DOS_DIR_TYPE_FAT12ROOT ; Set the directory type to FAT12 root directory
.394122	8d 45 a0	sta $38a045	                STA DOS_DIR_TYPE
.394125	c2 20		rep #$20	                REP #$20        ; set A long
.394127	a5 18		lda $0338	                LDA DOS_DIR_PTR             ; Set the BIOS buffer pointer
.394129	85 06		sta $0326	                STA BIOS_BUFF_PTR
.39412b	a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.39412d	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.39412f	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA of the sector
.394132	85 02		sta $0322	                STA BIOS_LBA
.394134	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.394137	85 04		sta $0324	                STA BIOS_LBA+2
.394139	22 44 10 38	jsl $381044	                JSL GETBLOCK                ; Get the sector from the FAT12 device
.39413d	b0 1f		bcs $39415e	                BCS do_success              ; If sucessful, set the directory cursor
.39413f	82 68 16	brl $3957aa	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.394142					fetch_fat32
.394142	e2 20		sep #$20	                SEP #$20        ; set A short
.394144	a9 01		lda #$01	                LDA #DOS_DIR_TYPE_FILE      ; Set the directory type to file type (all FAT32, any FAT12 subdirectory)
.394146	8d 45 a0	sta $38a045	                STA DOS_DIR_TYPE
.394149	c2 20		rep #$20	                REP #$20        ; set A long
.39414b	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID
.39414e	85 10		sta $0330	                STA DOS_CLUS_ID
.394150	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.394153	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394155	22 62 46 39	jsl $394662	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.394159	b0 03		bcs $39415e	                BCS do_success              ; If successful: set the directory cursor
.39415b	82 4c 16	brl $3957aa	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.39415e	00		brk #		do_success      BRK
.39415f	82 4f 16	brl $3957b1	                BRL IF_SUCCESS
.394162					DOS_DIRFIRST
.394162	0b		phd		                PHD
.394163	08		php		                PHP
.394164	48		pha		                PHA             ; begin setdp macro
.394165	08		php		                PHP
.394166	c2 20		rep #$20	                REP #$20        ; set A long
.394168	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39416b	5b		tcd		                TCD
.39416c	28		plp		                PLP
.39416d	68		pla		                PLA             ; end setdp macro
.39416e	c2 20		rep #$20	                REP #$20        ; set A long
.394170	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER
.394173	85 18		sta $0338	                STA DOS_DIR_PTR
.394175	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.394178	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.39417a	28		plp		                PLP
.39417b	2b		pld		                PLD
.39417c	6b		rtl		                RTL
.39417d					DOS_DIRNEXT
.39417d	da		phx		                PHX
.39417e	5a		phy		                PHY
.39417f	0b		phd		                PHD
.394180	8b		phb		                PHB
.394181	08		php		                PHP
.394182	48		pha		                PHA             ; begin setdbr macro
.394183	08		php		                PHP
.394184	e2 20		sep #$20	                SEP #$20        ; set A short
.394186	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394188	48		pha		                PHA
.394189	ab		plb		                PLB
.39418a	28		plp		                PLP
.39418b	68		pla		                PLA             ; end setdbr macro
.39418c	48		pha		                PHA             ; begin setdp macro
.39418d	08		php		                PHP
.39418e	c2 20		rep #$20	                REP #$20        ; set A long
.394190	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394193	5b		tcd		                TCD
.394194	28		plp		                PLP
.394195	68		pla		                PLA             ; end setdp macro
.394196	c2 20		rep #$20	                REP #$20        ; set A long
.394198	18		clc		                CLC                         ; Advance the directory entry pointer to the next entry
.394199	a5 18		lda $0338	                LDA DOS_DIR_PTR
.39419b	69 20 00	adc #$0020	                ADC #DOS_DIR_ENTRY_SIZE
.39419e	85 18		sta $0338	                STA DOS_DIR_PTR
.3941a0	a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.3941a2	69 00 00	adc #$0000	                ADC #0
.3941a5	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.3941a7	38		sec		                SEC                         ; Check to see if we've reached the end of the sector buffer
.3941a8	a9 00 a3	lda #$a300	                LDA #<>DOS_DIR_CLUSTER_END
.3941ab	e5 18		sbc $0338	                SBC DOS_DIR_PTR
.3941ad	85 28		sta $0348	                STA DOS_TEMP
.3941af	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER_END
.3941b2	e5 1a		sbc $033a	                SBC DOS_DIR_PTR+2
.3941b4	85 2a		sta $034a	                STA DOS_TEMP+2
.3941b6	30 0c		bmi $3941c4	                BMI get_next_block          ; Yes: try to fetch the next directory entry
.3941b8	f0 03		beq $3941bd	                BEQ check_lower
.3941ba	82 f4 15	brl $3957b1	                BRL IF_SUCCESS
.3941bd	a5 28		lda $0348	check_lower     LDA DOS_TEMP
.3941bf	f0 03		beq $3941c4	                BEQ get_next_block
.3941c1	82 ed 15	brl $3957b1	                BRL IF_SUCCESS
.3941c4					get_next_block
.3941c4	e2 20		sep #$20	                SEP #$20        ; set A short
.3941c6	ad 45 a0	lda $38a045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.3941c9	c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE
.3941cb	f0 38		beq $394205	                BEQ next_cluster            ; FILE TYPE: it's cluster based (FAT32, or FAT12 non-root)
.3941cd					next_sector
.3941cd	c2 20		rep #$20	                REP #$20        ; set A long
.3941cf	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID
.3941d2	1a		inc a		                INC A
.3941d3	8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID        ; Increment the sector number (FAT12 root directory is sector based)
.3941d6	c9 0a 00	cmp #$000a	                CMP #10                     ; See if we're at the end (TODO: calculate this)
.3941d9	d0 07		bne $3941e2	                BNE read_sector
.3941db	e2 20		sep #$20	                SEP #$20        ; set A short
.3941dd	a9 00		lda #$00	                LDA #0
.3941df	82 c4 15	brl $3957a6	                BRL IF_FAILURE
.3941e2					read_sector
.3941e2	c2 20		rep #$20	                REP #$20        ; set A long
.3941e4	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA to the sector #
.3941e7	85 02		sta $0322	                STA BIOS_LBA
.3941e9	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.3941ec	85 04		sta $0324	                STA BIOS_LBA+2
.3941ee	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointers to the buffer
.3941f1	85 06		sta $0326	                STA BIOS_BUFF_PTR
.3941f3	85 18		sta $0338	                STA DOS_DIR_PTR
.3941f5	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.3941f8	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3941fa	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.3941fc	22 44 10 38	jsl $381044	                JSL GETBLOCK                ; Attempt to read the sector from the FAT12 device
.394200	b0 39		bcs $39423b	                BCS do_success              ; If successful: set the directory cursor
.394202	82 a5 15	brl $3957aa	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.394205					next_cluster
.394205	c2 20		rep #$20	                REP #$20        ; set A long
.394207	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Get the current block (cluster) ID
.39420a	85 10		sta $0330	                STA DOS_CLUS_ID
.39420c	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.39420f	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394211	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER
.394214	85 1c		sta $033c	                STA DOS_BUFF_PTR
.394216	85 18		sta $0338	                STA DOS_DIR_PTR
.394218	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.39421b	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.39421d	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.39421f	22 6d 4a 39	jsl $394a6d	                JSL NEXTCLUSTER             ; Try to find the next cluster
.394223	b0 03		bcs $394228	                BCS set_next
.394225	82 82 15	brl $3957aa	                BRL IF_PASSFAILURE          ; If error: pass it up the chain
.394228	a5 10		lda $0330	set_next        LDA DOS_CLUS_ID             ; Save the cluster as the current directory cluster
.39422a	8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID
.39422d	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.39422f	8d 34 a0	sta $38a034	                STA DOS_DIR_BLOCK_ID+2
.394232	22 62 46 39	jsl $394662	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.394236	b0 03		bcs $39423b	                BCS do_success              ; If successful: set the directory cursor
.394238	82 6f 15	brl $3957aa	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.39423b	82 73 15	brl $3957b1	do_success      BRL IF_SUCCESS
.39423e					DOS_DIRFINDFREE
.39423e	da		phx		                PHX
.39423f	5a		phy		                PHY
.394240	0b		phd		                PHD
.394241	8b		phb		                PHB
.394242	08		php		                PHP
.394243	48		pha		                PHA             ; begin setdbr macro
.394244	08		php		                PHP
.394245	e2 20		sep #$20	                SEP #$20        ; set A short
.394247	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394249	48		pha		                PHA
.39424a	ab		plb		                PLB
.39424b	28		plp		                PLP
.39424c	68		pla		                PLA             ; end setdbr macro
.39424d	48		pha		                PHA             ; begin setdp macro
.39424e	08		php		                PHP
.39424f	c2 20		rep #$20	                REP #$20        ; set A long
.394251	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394254	5b		tcd		                TCD
.394255	28		plp		                PLP
.394256	68		pla		                PLA             ; end setdp macro
.394257	22 42 54 39	jsl $395442	                JSL IF_DIROPEN
.39425b	b0 06		bcs $394263	                BCS start_walk
.39425d	a9 08 00	lda #$0008	                LDA #DOS_ERR_NODIR          ; Return that we could not read the directory
.394260	82 28 00	brl $39428b	                BRL ret_failure
.394263	a0 00 00	ldy #$0000	start_walk      LDY #0                      ; We check the first character of the entry
.394266					chk_entry
.394266	e2 20		sep #$20	                SEP #$20        ; set A short
.394268	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the first byte of the directory entry
.39426a	f0 1c		beq $394288	                BEQ ret_success             ; If 0: we have a blank... return it
.39426c	c9 e5		cmp #$e5	                CMP #DOS_DIR_ENT_UNUSED     ; Is it an unused (deleted) entry?
.39426e	f0 18		beq $394288	                BEQ ret_success             ; Yes: return it
.394270	22 7c 54 39	jsl $39547c	                JSL IF_DIRNEXT              ; Go to the next directory entry
.394274	b0 ed		bcs $394263	                BCS start_walk              ; If we got one, start walking it
.394276	22 8e 42 39	jsl $39428e	                JSL DOS_DIRAPPEND           ; If there isn't one, create a blank cluster
.39427a	90 0f		bcc $39428b	                BCC ret_failure             ; If that didn't work, return the failure
.39427c	c2 20		rep #$20	                REP #$20        ; set A long
.39427e	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Return the first entry
.394281	85 18		sta $0338	                STA DOS_DIR_PTR
.394283	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.394286	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.394288	82 26 15	brl $3957b1	ret_success     BRL IF_SUCCESS
.39428b	82 18 15	brl $3957a6	ret_failure     BRL IF_FAILURE
.39428e					DOS_DIRAPPEND
.39428e	da		phx		                PHX
.39428f	8b		phb		                PHB
.394290	0b		phd		                PHD
.394291	08		php		                PHP
.394292	48		pha		                PHA             ; begin setdbr macro
.394293	08		php		                PHP
.394294	e2 20		sep #$20	                SEP #$20        ; set A short
.394296	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394298	48		pha		                PHA
.394299	ab		plb		                PLB
.39429a	28		plp		                PLP
.39429b	68		pla		                PLA             ; end setdbr macro
.39429c	48		pha		                PHA             ; begin setdp macro
.39429d	08		php		                PHP
.39429e	c2 20		rep #$20	                REP #$20        ; set A long
.3942a0	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3942a3	5b		tcd		                TCD
.3942a4	28		plp		                PLP
.3942a5	68		pla		                PLA             ; end setdp macro
.3942a6	e2 20		sep #$20	                SEP #$20        ; set A short
.3942a8	ad 45 a0	lda $38a045	                LDA DOS_DIR_TYPE
.3942ab	c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE          ; Are we looking at a file type directory
.3942ad	f0 09		beq $3942b8	                BEQ clr_sector                  ; Yes: clear out the directory data
.3942af					ret_failure
.3942af	e2 20		sep #$20	                SEP #$20        ; set A short
.3942b1	a9 15		lda #$15	                LDA #DOS_ERR_DIRFULL            ; No: return a directory-full error
.3942b3	85 0e		sta $032e	                STA DOS_STATUS
.3942b5	82 3e 00	brl $3942f6	                BRL pass_failure
.3942b8					clr_sector
.3942b8	c2 20		rep #$20	                REP #$20        ; set A long
.3942ba	a9 00 00	lda #$0000	                LDA #0
.3942bd	a2 00 00	ldx #$0000	                LDX #0
.3942c0	9d 00 a1	sta $38a100,x	clr_loop        STA DOS_DIR_CLUSTER,X           ; Clear the directory cluster
.3942c3	e8		inx		                INX
.3942c4	e8		inx		                INX
.3942c5	e0 00 02	cpx #$0200	                CPX #512
.3942c8	d0 f6		bne $3942c0	                BNE clr_loop
.3942ca	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER          ; Point to the new, blank directory data
.3942cd	85 1c		sta $033c	                STA DOS_BUFF_PTR
.3942cf	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.3942d2	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3942d4	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID            ; We want to append it to the current directory
.3942d7	85 10		sta $0330	                STA DOS_CLUS_ID
.3942d9	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.3942dc	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3942de	22 61 4e 39	jsl $394e61	                JSL DOS_APPENDCLUS              ; Attempt to append the blank data as a new cluster
.3942e2	90 12		bcc $3942f6	                BCC pass_failure                ; If there was an error, pass it up the chain
.3942e4	ad 36 a0	lda $38a036	                LDA DOS_NEW_CLUSTER             ; Set the block ID of the new directory cluster
.3942e7	8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID
.3942ea	ad 38 a0	lda $38a038	                LDA DOS_NEW_CLUSTER+2
.3942ed	8d 34 a0	sta $38a034	                STA DOS_DIR_BLOCK_ID+2
.3942f0	28		plp		ret_success     PLP
.3942f1	2b		pld		                PLD
.3942f2	ab		plb		                PLB
.3942f3	fa		plx		                PLX
.3942f4	38		sec		                SEC
.3942f5	6b		rtl		                RTL
.3942f6	28		plp		pass_failure    PLP
.3942f7	2b		pld		                PLD
.3942f8	ab		plb		                PLB
.3942f9	fa		plx		                PLX
.3942fa	18		clc		                CLC
.3942fb	6b		rtl		                RTL
.3942fc					DOS_DIRWRITE
.3942fc	da		phx		                PHX
.3942fd	5a		phy		                PHY
.3942fe	0b		phd		                PHD
.3942ff	8b		phb		                PHB
.394300	08		php		                PHP
.394301	48		pha		                PHA             ; begin setdbr macro
.394302	08		php		                PHP
.394303	e2 20		sep #$20	                SEP #$20        ; set A short
.394305	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394307	48		pha		                PHA
.394308	ab		plb		                PLB
.394309	28		plp		                PLP
.39430a	68		pla		                PLA             ; end setdbr macro
.39430b	48		pha		                PHA             ; begin setdp macro
.39430c	08		php		                PHP
.39430d	c2 20		rep #$20	                REP #$20        ; set A long
.39430f	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394312	5b		tcd		                TCD
.394313	28		plp		                PLP
.394314	68		pla		                PLA             ; end setdp macro
.394315	e2 20		sep #$20	                SEP #$20        ; set A short
.394317	ad 45 a0	lda $38a045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.39431a	c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE      ; Is it a file type directory (FAT32 or FAT12 non-root?)
.39431c	f0 1f		beq $39433d	                BEQ write_cluster           ; Yes: write it back using a cluster ID
.39431e					write_sector
.39431e	c2 20		rep #$20	                REP #$20        ; set A long
.394320	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the BIOS_LBA to the LBA of the sector
.394323	85 02		sta $0322	                STA BIOS_LBA
.394325	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.394328	85 04		sta $0324	                STA BIOS_LBA+2
.39432a	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.39432d	85 06		sta $0326	                STA BIOS_BUFF_PTR
.39432f	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.394332	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394334	22 24 10 38	jsl $381024	                JSL PUTBLOCK                ; Try to write the sector to disk
.394338	b0 1f		bcs $394359	                BCS ret_success
.39433a	82 69 14	brl $3957a6	ret_failure     BRL IF_FAILURE
.39433d					write_cluster
.39433d	c2 20		rep #$20	                REP #$20        ; set A long
.39433f	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the DOS_CLUS_ID to the ID of the cluster
.394342	85 10		sta $0330	                STA DOS_CLUS_ID
.394344	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.394347	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394349	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.39434c	85 1c		sta $033c	                STA DOS_BUFF_PTR
.39434e	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.394351	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394353	22 9f 46 39	jsl $39469f	                JSL DOS_PUTCLUSTER          ; Try to write the cluster to disk
.394357	90 e1		bcc $39433a	                BCC ret_failure
.394359	82 55 14	brl $3957b1	ret_success     BRL IF_SUCCESS

;******  Return to file: src\sdos_fat.asm

.0000					DEVICE_DESC
>0000					DEVNAME         .dword ?            ; A pointer to the ASCIIZ name of the device
>0004					DEVNUMBER       .byte ?           ; The BIOS_DEV number for the device
>0005					NEXT            .dword ?            ; A pointer to the next device descriptor
.0000					DIRENTRY
>0000					SHORTNAME               .fill 11        ; $00 - The short name of the file (8 name, 3 extension)
>000b					ATTRIBUTE               .byte ?         ; $0B - The attribute bits
>000c					IGNORED1                .word ?         ; $0C - Unused (by us) bytes
>000e					CREATE_TIME             .word ?         ; $0E - Creation time
>0010					CREATE_DATE             .word ?         ; $10 - Creation date
>0012					ACCESS_DATE             .word ?         ; $12 - Last access date
>0014					CLUSTER_H               .word ?         ; $14 - High word of the first cluster #
>0016					MODIFIED_TIME           .word ?         ; $16 - Last modified time
>0018					MODIFIED_DATE           .word ?         ; $18 - Last modified date
>001a					CLUSTER_L               .word ?         ; $1A - Low word of the first cluster #
>001c					SIZE                    .dword ?        ; $1C - The size of the file (in bytes)
=$01					DOS_ATTR_RO = $01                       ; File is read-only
=$02					DOS_ATTR_HIDDEN = $02                   ; File is hidden
=$04					DOS_ATTR_SYSTEM = $04                   ; File is a system file
=$08					DOS_ATTR_VOLUME = $08                   ; Entry is the volume label
=$10					DOS_ATTR_DIR = $10                      ; Entry is a directory
=$20					DOS_ATTR_ARCH = $20                     ; Entry has changed since last backup
=$0f					DOS_ATTR_LONGNAME = $0F                 ; Entry is the long file name
.0000					FILEDESC
>0000					STATUS              .byte ?             ; The status flags of the file descriptor (open, closed, error, EOF, etc.)
>0001					DEV                 .byte ?             ; The ID of the device holding the file
>0002					PATH                .dword ?            ; Pointer to a NULL terminated path string
>0006					CLUSTER             .dword ?            ; The current cluster of the file.
>000a					FIRST_CLUSTER       .dword ?            ; The ID of the first cluster in the file
>000e					BUFFER              .dword ?            ; Pointer to a cluster-sized buffer
>0012					SIZE                .dword ?            ; The size of the file
>0016					CREATE_DATE         .word ?             ; The creation date of the file
>0018					CREATE_TIME         .word ?             ; The creation time of the file
>001a					MODIFIED_DATE       .word ?             ; The modification date of the file
>001c					MODIFIED_TIME       .word ?             ; The modification time of the file
>001e					RESERVED            .word ?             ; Two reserved bytes to bring the descriptor up to 32 bytes
=$01					FD_STAT_READ = $01                      ; The file is readable
=$02					FD_STAT_WRITE = $02                     ; The file is writable
=$10					FD_STAT_ALLOC = $10                     ; The file descriptor has been allocated
=$20					FD_STAT_OPEN = $20                      ; The file is open
=$40					FD_STAT_ERROR = $40                     ; The file is in an error condition
=$80					FD_STAT_EOF = $80                       ; The file cursor is at the end of the file
=$0fffffff				FAT_LAST_CLUSTER = $0FFFFFFF            ; Code to mark the last cluster of a file
=1					VOLUMEMAX = 1                           ; The maximum number of mounted volumes we support
=32					DOS_DIR_ENTRY_SIZE = 32                 ; The size of a directory entry
=512					DOS_SECTOR_SIZE = 512                   ; The size of a sector
=$e5					DOS_DIR_ENT_UNUSED = $E5                ; Marker for an unused directory entry
=$00					PART_TYPE_FAT12 = $00                   ; "Partition" type: FAT12, used for floppy disks
=$0c					PART_TYPE_FAT32_LBA = $0C               ; Patition type: FAT32 with LBA addressing
=$29					BPB_EXTENDED_RECORD = $29               ; If SIGNATUREB of the BPB has this byte, the volume label is valid
=0					DOS_DIR_TYPE_FAT12ROOT = 0              ; Directory is a FAT12 root directory
=1					DOS_DIR_TYPE_FILE = 1                   ; Directory is a file type directory
=8					DOS_FD_MAX = 8                          ; The maximum number of open file descriptors
=1					DOS_ERR_READ = 1                        ; We could not read a sector, check BIOS_STATUS for details
=2					DOS_ERR_NOTMBR = 2                      ; We could not find the MBR
=3					DOS_ERR_NOFAT32 = 3                     ; We could not find a FAT32 parition using LBA
=4					DOS_ERR_NOINIT = 4                      ; We could not INIT the block device
=5					DOS_ERR_VOLID = 5                       ; Volume ID sector could not be loaded
=6					DOS_ERR_FAT = 6                         ; Can't scan the FAT for some reason
=7					DOS_ERR_BADPATH = 7                     ; The path was badly formatted
=8					DOS_ERR_NODIR = 8                       ; Could not read the directory
=9					DOS_ERR_NOTFOUND = 9                    ; File/directory requested was not found
=10					DOS_ERR_NOCLUSTER = 10                  ; There are no more clusters
=11					DOS_ERR_FILEEXISTS = 11                 ; There is already a file of that name
=12					DOS_ERR_NOTOPEN = 12                    ; File has not been open
=13					DOS_ERR_NOTREAD = 13                    ; File is not open for reading
=14					DOS_ERR_NOTWRITE = 14                   ; File is not open for writing
=15					DOS_ERR_OPEN = 15                       ; File is already open
=16					DOS_ERR_PGXSIG = 16                     ; File does not have the PGX signature
=17					DOS_ERR_NOEXEC = 17                     ; File does is not an executable format
=18					DOS_ERR_MEDIAFULL = 18                  ; There are no more free clusters on the drive
=19					DOS_ERR_WRITEPROT = 19                  ; The medium is write-protected
=20					DOS_ERR_FATUPDATE = 20                  ; Can't update the FAT
=21					DOS_ERR_DIRFULL = 21                    ; The directory is full
=22					DOS_ERR_NOFD = 22                       ; No file descriptors are available for allocation
=446					PART0_OFF = 446                         ; Offset to the first partition in the MBR
=4					PART_TYPE_OFF = 4                       ; Offset to the partition's type
=8					PART_LBA_OFF = 8                        ; Offset to the LBA of the first sector of the partition
=13					PART_SECT_COUNT_OFF = 13                ; Offset to the sector count of the partition
=510					MBR_SIGNATURE = 510                     ; The offset to the MBR signature bytes
=11					BPB_BYTEPERSEC_OFF = 11                 ; Offset in the BPB sector to the Bytes Per Sector
=13					BPB_SECPERCLUS_OFF = 13                 ; Offset in the BPB sector to the Sectors Per Cluster
=14					BPB_RSRVCLUS_OFF = 14                   ; Offset in the BPB sector to the Number of Reserved Clusters
=16					BPB_NUMFAT_OFF = 16                     ; Offset in the BPB sector to the Number of FATs
=17					BPB_ROOT_MAX_ENTRY_OFF = 17             ; Offset in the BPB sector to the Maximum # of entries in the root directory (FAT12)
=19					BPB_TOTAL_SECTORS = 19                  ; Offset in the BPB sector to the number of sectors on the partition or disk (FAT12)
=$24					BPB_SECPERFAT_OFF = $24                 ; Offset in the BPB sector to the Sectors Per FAT
=38					BPB_SIGNATUREB = 38                     ; Offset in the BPB sector to the second signature byte
=39					BPB_VOLUMEID = 39                       ; Offset in the BPB sector to the volume ID
=$2c					BPB_ROOTCLUS_OFF = $2C                  ; Offset in the BPB sector to the Root Cluster Number
=510					BPB_SIGNATURE = 510                     ; The offset to the MBR signature bytes
=$38a000				DOS_HIGH_VARIABLES      = $38A000
=$38a000				DEVICE                  = $38A000       ; 1 byte - The number of the block device
=$38a001				FILE_SYSTEM             = $38A001       ; 1 byte - The type of filesystem (FAT12, FAT32, etc.)
=$38a002				PARTITION               = $38A002       ; 1 byte - The number of the partitions on the device
=$38a003				SECTORS_PER_CLUSTER     = $38A003       ; 1 byte - The number of sectors in a cluster
=$38a004				FIRSTSECTOR             = $38A004       ; 4 bytes - The LBA of the first sector on the volume
=$38a008				SECTORCOUNT             = $38A008       ; 4 bytes - The number of sectors in the volume
=$38a00c				NUM_RSRV_SEC            = $38A00C       ; 2 bytes - The number of hidden or reserved sectors
=$38a00e				CLUSTER_SIZE            = $38A00E       ; 2 bytes - The size of a cluster in bytes
=$38a010				SEC_PER_FAT             = $38A010       ; 4 bytes - The number of sectors per FAT
=$38a014				FAT_BEGIN_LBA           = $38A014       ; 4 bytes - The LBA of the first sector of FAT #1
=$38a018				FAT2_BEGIN_LBA          = $38A018       ; 4 bytes - The LBA of the first sector of FAT #2
=$38a01c				CLUSTER_BEGIN_LBA       = $38A01C       ; 4 bytes - The LBA of the first cluster in the storage area
=$38a020				ROOT_DIR_FIRST_CLUSTER  = $38A020       ; 4 bytes - The number of the first cluster in the root directory
=$38a024				ROOT_DIR_MAX_ENTRY      = $38A024       ; 2 bytes - The maximum number of entries in the root directory (0 = no limit)
=$38a026				VOLUME_ID               = $38A026       ; 4 bytes - The ID of the volume
=$38a02a				DOS_CURR_CLUS           = $38A02A       ; 4 bytes - The current cluster (for delete)
=$38a02e				DOS_NEXT_CLUS           = $38A02E       ; 4 bytes - The next cluster in a file (for delete)
=$38a032				DOS_DIR_BLOCK_ID        = $38A032       ; 4 bytes - The ID of the current directory block
=$38a036				DOS_NEW_CLUSTER         = $38A036       ; 4 bytes - Space to store a newly written cluster ID
=$38a03a				DOS_SHORT_NAME          = $38A03A       ; 11 bytes - The short name for a desired file
=$38a045				DOS_DIR_TYPE            = $38A045       ; 1 byte - a code indicating the type of the current directory (0 = cluster based, $80 = sector based)
=$38a046				DOS_CURR_DIR_ID         = $38A046       ; 4 byte - the ID of the first sector or cluster of the current directory
=$38a04a				DOS_DEV_NAMES           = $38A04A       ; 4 byte - pointer to the linked list of device names
=$38a04e				FDC_MOTOR_TIMER         = $38A04E       ; 2 bytes - count-down timer to automatically turn off the FDC spindle motor
=$38a050				DOS_MOUNT_DEV           = $38A050       ; 1 byte - the device code of the currently mounted device
=$38a100				DOS_DIR_CLUSTER         = $38A100       ; 512 bytes - A buffer for directory entries
=$38a300				DOS_DIR_CLUSTER_END     = $38A300       ; The byte just past the end of the directory cluster buffer
=$38a300				DOS_SECTOR              = $38A300       ; 512 bytes - A buffer for block device read/write
=$38a500				DOS_SECTOR_END          = $38A500       ; The byte just past the end of the cluster buffer
=$38a500				DOS_FAT_SECTORS         = $38A500       ; 1024 bytes - two sectors worth of the FAT
=$38a900				DOS_FAT_SECTORS_END     = $38A900       ; The byte just past the end of the FAT buffers
=$38a900				DOS_BOOT_SECTOR         = $38A900       ; A sector for holding the boot sector
=$38ab00				DOS_BOOT_SECTOR_END     = $38AB00
=$38ab00				DOS_SPARE_SECTOR        = $38AB00       ; A spare 512 byte buffer for loading sectors
=$38ad00				DOS_SPARE_SECTOR_END    = $38AD00
=$38ad00				DOS_SPARE_FD            = $38AD00       ; A spare file descriptor buffer
=3714336				DOS_SPARE_FD_END        = DOS_SPARE_FD + SIZE(FILEDESC)
=3714336				DOS_FILE_DESCS          = DOS_SPARE_FD_END
=3714592				DOS_FILE_DESCS_END      = DOS_FILE_DESCS + SIZE(FILEDESC) * DOS_FD_MAX
=$38b000				DOS_FILE_BUFFS          = $38B000
=3719168				DOS_FILE_BUFFS_END      = DOS_FILE_BUFFS + DOS_SECTOR_SIZE * DOS_FD_MAX
.39435c					DOS_INIT
.39435c	8b		phb		                PHB
.39435d	0b		phd		                PHD
.39435e	08		php		                PHP
.39435f	48		pha		                PHA             ; begin setdbr macro
.394360	08		php		                PHP
.394361	e2 20		sep #$20	                SEP #$20        ; set A short
.394363	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394365	48		pha		                PHA
.394366	ab		plb		                PLB
.394367	28		plp		                PLP
.394368	68		pla		                PLA             ; end setdbr macro
.394369	48		pha		                PHA             ; begin setdp macro
.39436a	08		php		                PHP
.39436b	c2 20		rep #$20	                REP #$20        ; set A long
.39436d	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394370	5b		tcd		                TCD
.394371	28		plp		                PLP
.394372	68		pla		                PLA             ; end setdp macro
.394373	c2 20		rep #$20	                REP #$20        ; set A long
.394375	a9 f7 46	lda #$46f7	                LDA #<>DOS_HD_DESC      ; Initialize the device names list
.394378	8f 4a a0 38	sta $38a04a	                STA @l DOS_DEV_NAMES
.39437c	a9 39 00	lda #$0039	                LDA #`DOS_HD_DESC
.39437f	8f 4c a0 38	sta $38a04c	                STA @l DOS_DEV_NAMES+2
.394383	e2 20		sep #$20	                SEP #$20        ; set A short
.394385	a9 02		lda #$02	                LDA #BIOS_DEV_SD        ; Default to the SD card
.394387	85 01		sta $0321	                STA BIOS_DEV
.394389	a9 ff		lda #$ff	                LDA #$FF                ; Set the mounted device to a sentinel value
.39438b	8f 50 a0 38	sta $38a050	                STA @l DOS_MOUNT_DEV
.39438f	a9 00		lda #$00	                LDA #0
.394391	a2 00 00	ldx #$0000	                LDX #0
.394394	9d 20 ad	sta $38ad20,x	fd_zero_loop    STA @w DOS_FILE_DESCS,X
.394397	e8		inx		                INX
.394398	e0 00 01	cpx #$0100	                CPX #(DOS_FILE_DESCS_END - DOS_FILE_DESCS)
.39439b	d0 f7		bne $394394	                BNE fd_zero_loop
.39439d	a9 00		lda #$00	                LDA #0
.39439f	a2 00 00	ldx #$0000	                LDX #0
.3943a2	9d 00 b0	sta $38b000,x	sect_zero_loop  STA @w DOS_FILE_BUFFS,X
.3943a5	e8		inx		                INX
.3943a6	e0 00 10	cpx #$1000	                CPX #(DOS_FILE_BUFFS_END - DOS_FILE_BUFFS)
.3943a9	d0 f7		bne $3943a2	                BNE sect_zero_loop
.3943ab	c2 20		rep #$20	                REP #$20        ; set A long
.3943ad	a9 20 ad	lda #$ad20	                LDA #<>DOS_FILE_DESCS   ; Initialize a pointer to the file descriptors
.3943b0	85 20		sta $0340	                STA @b DOS_FD_PTR
.3943b2	a9 38 00	lda #$0038	                LDA #`DOS_FILE_DESCS
.3943b5	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.3943b7	a9 00 b0	lda #$b000	                LDA #<>DOS_FILE_BUFFS   ; Initialize a pointer to the sector buffers
.3943ba	85 28		sta $0348	                STA @b DOS_TEMP
.3943bc	a9 38 00	lda #$0038	                LDA #`DOS_FILE_BUFFS
.3943bf	85 2a		sta $034a	                STA @b DOS_TEMP+2
.3943c1	a2 08 00	ldx #$0008	                LDX #DOS_FD_MAX         ; Set how many file descriptors to update
.3943c4	a0 0e 00	ldy #$000e	fd_buff_loop    LDY #FILEDESC.BUFFER    ; Set the file descriptor's buffer pointer
.3943c7	a5 28		lda $0348	                LDA @b DOS_TEMP
.3943c9	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3943cb	c8		iny		                INY
.3943cc	c8		iny		                INY
.3943cd	a5 2a		lda $034a	                LDA @b DOS_TEMP+2
.3943cf	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3943d1	18		clc		                CLC                     ; Advance the file descriptor pointer to the next file descriptor
.3943d2	a5 20		lda $0340	                LDA @b DOS_FD_PTR
.3943d4	69 20 00	adc #$0020	                ADC #SIZE(FILEDESC)
.3943d7	85 20		sta $0340	                STA @b DOS_FD_PTR
.3943d9	a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.3943db	69 00 00	adc #$0000	                ADC #0
.3943de	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.3943e0	18		clc		                CLC                     ; Advance the sector buffer pointer to the next buffer
.3943e1	a5 28		lda $0348	                LDA @b DOS_TEMP
.3943e3	69 00 02	adc #$0200	                ADC #DOS_SECTOR_SIZE
.3943e6	85 28		sta $0348	                STA @b DOS_TEMP
.3943e8	a5 2a		lda $034a	                LDA @b DOS_TEMP+2
.3943ea	69 00 00	adc #$0000	                ADC #0
.3943ed	85 2a		sta $034a	                STA @b DOS_TEMP+2
.3943ef	ca		dex		                DEX                     ; Count down the descriptors...
.3943f0	d0 d2		bne $3943c4	                BNE fd_buff_loop        ; If not zero, keep setting the buffer pointers
.3943f2	28		plp		                PLP
.3943f3	2b		pld		                PLD
.3943f4	ab		plb		                PLB
.3943f5	6b		rtl		                RTL
.3943f6					DOS_MOUNT
.3943f6	8b		phb		                PHB
.3943f7	0b		phd		                PHD
.3943f8	08		php		                PHP
.3943f9	48		pha		                PHA             ; begin setdbr macro
.3943fa	08		php		                PHP
.3943fb	e2 20		sep #$20	                SEP #$20        ; set A short
.3943fd	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3943ff	48		pha		                PHA
.394400	ab		plb		                PLB
.394401	28		plp		                PLP
.394402	68		pla		                PLA             ; end setdbr macro
.394403	48		pha		                PHA             ; begin setdp macro
.394404	08		php		                PHP
.394405	c2 20		rep #$20	                REP #$20        ; set A long
.394407	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39440a	5b		tcd		                TCD
.39440b	28		plp		                PLP
.39440c	68		pla		                PLA             ; end setdp macro
.39440d	e2 20		sep #$20	                SEP #$20        ; set A short
.39440f	a5 01		lda $0321	                LDA BIOS_DEV            ; Get the device to moount
.394411	cf 50 a0 38	cmp $38a050	                CMP @l DOS_MOUNT_DEV    ; Is it already mounted?
.394415	d0 03		bne $39441a	                BNE try_mount           ; No: try to moount it
.394417	82 59 01	brl $394573	                BRL ret_success         ; Yes: just return success
.39441a	8f 50 a0 38	sta $38a050	try_mount       STA @l DOS_MOUNT_DEV    ; Save the device we're going to try to mount
.39441e	c9 02		cmp #$02	                CMP #BIOS_DEV_SD        ; Is it the SDC?
.394420	f0 1f		beq $394441	                BEQ do_sdc_mount        ; Yes: attempt to mount it
.394422	c9 06		cmp #$06	                CMP #BIOS_DEV_HD0       ; Is it HD0?
.394424	f0 26		beq $39444c	                BEQ do_ide_mount        ; Yes: attempt to mount the IDE drive
.394426	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC       ; Is it the FDC?
.394428	f0 0b		beq $394435	                BEQ do_fdc_mount        ; Yes: attempt to mount it
.39442a	a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return a bad device error
.39442c	85 0e		sta $032e	                STA DOS_STATUS
.39442e	a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV
.394430	85 00		sta $0320	                STA BIOS_STATUS
.394432	82 47 01	brl $39457c	                BRL ret_failure
.394435	22 d4 65 39	jsl $3965d4	do_fdc_mount    JSL FDC_MOUNT           ; Attempt to mount the floppy disk
.394439	b0 03		bcs $39443e	                BCS fdc_success
.39443b	82 3e 01	brl $39457c	                BRL ret_failure
.39443e	82 32 01	brl $394573	fdc_success     BRL ret_success
.394441	22 e2 5b 39	jsl $395be2	do_sdc_mount    JSL SDC_INIT            ; Yes: Initialize access to the SDC
.394445	b0 10		bcs $394457	                BCS get_mbr             ; Continue if success
.394447	a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.394449	82 30 01	brl $39457c	                BRL ret_failure
.39444c	22 c6 69 39	jsl $3969c6	do_ide_mount    JSL IDE_INIT            ; Yes: Initialize access to the IDE drive
.394450	b0 05		bcs $394457	                BCS get_mbr             ; Continue if success
.394452	a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.394454	82 25 01	brl $39457c	                BRL ret_failure
.394457					get_mbr
.394457	c2 30		rep #$30	                REP #$30        ; set A&X long
.394459	64 02		stz $0322	                STZ BIOS_LBA            ; Get the MBR
.39445b	64 04		stz $0324	                STZ BIOS_LBA+2
.39445d	a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR       ; Into DOS_SECTOR
.394460	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394462	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.394465	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394467	22 44 10 38	jsl $381044	                JSL GETBLOCK            ; Try to read the MBR
.39446b	b0 07		bcs $394474	                BCS chk_signature       ; If success, check the signature bytes
.39446d	e2 20		sep #$20	                SEP #$20        ; set A short
.39446f	a9 01		lda #$01	                LDA #DOS_ERR_READ       ; Otherwise: report we couldn't read the first sector
.394471	82 08 01	brl $39457c	                BRL ret_failure
.394474					chk_signature
.394474	e2 20		sep #$20	                SEP #$20        ; set A short
.394476	ad fe a4	lda $38a4fe	                LDA DOS_SECTOR+MBR_SIGNATURE
.394479	c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.39447b	d0 07		bne $394484	                BNE not_mbr             ; No: signal we could find the MBR
.39447d	ad ff a4	lda $38a4ff	                LDA DOS_SECTOR+MBR_SIGNATURE+1
.394480	c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.394482	f0 05		beq $394489	                BEQ chk_part_type       ; Yes: we have an MBR
.394484	a9 02		lda #$02	not_mbr         LDA #DOS_ERR_NOTMBR     ; Return that we didn't find the MBR
.394486	82 f3 00	brl $39457c	                BRL ret_failure
.394489	ad c2 a4	lda $38a4c2	chk_part_type   LDA DOS_SECTOR+PART0_OFF+PART_TYPE_OFF
.39448c	c9 0c		cmp #$0c	                CMP #PART_TYPE_FAT32_LBA
.39448e	f0 05		beq $394495	                BEQ get_LBA             ; Is FAT32 with LBA?
.394490	a9 03		lda #$03	                LDA #DOS_ERR_NOFAT32    ; No: return No FAT32 found error
.394492	82 e7 00	brl $39457c	                BRL ret_failure
.394495	8d 01 a0	sta $38a001	get_LBA         STA FILE_SYSTEM         ; Save the file system of the partition
.394498	c2 20		rep #$20	                REP #$20        ; set A long
.39449a	ad c6 a4	lda $38a4c6	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF
.39449d	8d 04 a0	sta $38a004	                STA FIRSTSECTOR
.3944a0	ad c8 a4	lda $38a4c8	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF+2
.3944a3	8d 06 a0	sta $38a006	                STA FIRSTSECTOR+2
.3944a6	ad cb a4	lda $38a4cb	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF
.3944a9	8d 08 a0	sta $38a008	                STA SECTORCOUNT
.3944ac	ad cd a4	lda $38a4cd	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF+2
.3944af	8d 0a a0	sta $38a00a	                STA SECTORCOUNT+2
.3944b2	e2 20		sep #$20	                SEP #$20        ; set A short
.3944b4	a5 01		lda $0321	                LDA BIOS_DEV            ; Save the device number
.3944b6	8d 00 a0	sta $38a000	                STA DEVICE
.3944b9	a9 00		lda #$00	                LDA #0
.3944bb	8d 02 a0	sta $38a002	                STA PARTITION           ; For the moment, we only support the first partition
.3944be	c2 20		rep #$20	                REP #$20        ; set A long
.3944c0	a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.3944c3	85 06		sta $0326	                STA BIOS_BUFF_PTR
.3944c5	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.3944c8	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3944ca	ad 04 a0	lda $38a004	                LDA FIRSTSECTOR
.3944cd	85 02		sta $0322	                STA BIOS_LBA
.3944cf	ad 06 a0	lda $38a006	                LDA FIRSTSECTOR+2
.3944d2	85 04		sta $0324	                STA BIOS_LBA+2
.3944d4	22 44 10 38	jsl $381044	                JSL GETBLOCK            ; Attempt to load the volume ID
.3944d8	b0 1c		bcs $3944f6	                BCS get_first_sec       ; Got it? Start parsing it
.3944da	e2 20		sep #$20	                SEP #$20        ; set A short
.3944dc	a9 05		lda #$05	                LDA #DOS_ERR_VOLID      ; Otherwise: return an error
.3944de	82 9b 00	brl $39457c	                BRL ret_failure
.3944e1					chk_bpb_sig
.3944e1	e2 20		sep #$20	                SEP #$20        ; set A short
.3944e3	ad fe a4	lda $38a4fe	                LDA DOS_SECTOR+BPB_SIGNATURE
.3944e6	c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.3944e8	d0 07		bne $3944f1	                BNE not_bpb             ; No: signal we could find the volume ID
.3944ea	ad ff a4	lda $38a4ff	                LDA DOS_SECTOR+BPB_SIGNATURE+1
.3944ed	c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.3944ef	f0 05		beq $3944f6	                BEQ get_first_sec       ; Yes: we have an volume ID
.3944f1	a9 05		lda #$05	not_bpb         LDA #DOS_ERR_VOLID      ; Return that we didn't find the Volume ID (BPB)
.3944f3	82 86 00	brl $39457c	                BRL ret_failure
.3944f6					get_first_sec
.3944f6	c2 20		rep #$20	                REP #$20        ; set A long
.3944f8	ad 2c a3	lda $38a32c	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF
.3944fb	8d 20 a0	sta $38a020	                STA ROOT_DIR_FIRST_CLUSTER
.3944fe	ad 2e a3	lda $38a32e	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF+2
.394501	8d 22 a0	sta $38a022	                STA ROOT_DIR_FIRST_CLUSTER+2
.394504	ad 0e a3	lda $38a30e	                LDA DOS_SECTOR+BPB_RSRVCLUS_OFF
.394507	8d 0c a0	sta $38a00c	                STA NUM_RSRV_SEC
.39450a	18		clc		                CLC                     ; fat_begin_lba := FirstSector + Number_of_Reserved_Sectors
.39450b	ad 04 a0	lda $38a004	                LDA FIRSTSECTOR
.39450e	6d 0c a0	adc $38a00c	                ADC NUM_RSRV_SEC
.394511	8d 14 a0	sta $38a014	                STA FAT_BEGIN_LBA
.394514	ad 06 a0	lda $38a006	                LDA FIRSTSECTOR+2
.394517	69 00 00	adc #$0000	                ADC #0
.39451a	8d 16 a0	sta $38a016	                STA FAT_BEGIN_LBA+2
.39451d	ad 24 a3	lda $38a324	                LDA DOS_SECTOR+BPB_SECPERFAT_OFF
.394520	8d 10 a0	sta $38a010	                STA SEC_PER_FAT
.394523	ad 26 a3	lda $38a326	                LDA DOS_SECTOR+BPB_SECPERFAT_OFF+2
.394526	8d 12 a0	sta $38a012	                STA SEC_PER_FAT+2
.394529	ad 10 a0	lda $38a010	                LDA SEC_PER_FAT
.39452c	0a		asl a		                ASL A
.39452d	8d 1c a0	sta $38a01c	                STA CLUSTER_BEGIN_LBA
.394530	ad 12 a0	lda $38a012	                LDA SEC_PER_FAT+2
.394533	2a		rol a		                ROL A
.394534	8d 1e a0	sta $38a01e	                STA CLUSTER_BEGIN_LBA+2
.394537	18		clc		                CLC
.394538	ad 1c a0	lda $38a01c	                LDA CLUSTER_BEGIN_LBA                    ; Sectors Per FAT * 2 + fat_begin_lba
.39453b	6d 14 a0	adc $38a014	                ADC FAT_BEGIN_LBA
.39453e	8d 1c a0	sta $38a01c	                STA CLUSTER_BEGIN_LBA
.394541	ad 1e a0	lda $38a01e	                LDA CLUSTER_BEGIN_LBA+2
.394544	6d 16 a0	adc $38a016	                ADC FAT_BEGIN_LBA+2
.394547	8d 1e a0	sta $38a01e	                STA CLUSTER_BEGIN_LBA+2
.39454a	e2 20		sep #$20	                SEP #$20        ; set A short
.39454c	ad 0d a3	lda $38a30d	                LDA DOS_SECTOR+BPB_SECPERCLUS_OFF
.39454f	8d 03 a0	sta $38a003	                STA SECTORS_PER_CLUSTER
.394552	c2 20		rep #$20	                REP #$20        ; set A long
.394554	29 ff 00	and #$00ff	                AND #$00FF
.394557	48		pha		                PHA                                     ; Save the number of sectors per cluster
.394558	a9 00 02	lda #$0200	                LDA #<>DOS_SECTOR_SIZE                  ; Default to one sector's worth of bytes
.39455b	8d 0e a0	sta $38a00e	                STA CLUSTER_SIZE
.39455e	a9 00 00	lda #$0000	                LDA #`DOS_SECTOR_SIZE
.394561	8d 10 a0	sta $38a010	                STA CLUSTER_SIZE+2
.394564	68		pla		                PLA                                     ; Restore the number of sectors per cluster
.394565	c9 01 00	cmp #$0001	clus_size_loop  CMP #1                                  ; If there's only one cluster, return success
.394568	f0 09		beq $394573	                BEQ ret_success
.39456a	0e 0e a0	asl $38a00e	                ASL CLUSTER_SIZE                        ; Otherwise, multiply the number of bytes by 2
.39456d	2e 10 a0	rol $38a010	                ROL CLUSTER_SIZE+2
.394570	4a		lsr a		                LSR A                                   ; And divide the number of sectors by 2
.394571	80 f2		bra $394565	                BRA clus_size_loop
.394573					ret_success
.394573	e2 20		sep #$20	                SEP #$20        ; set A short
.394575	64 0e		stz $032e	                STZ DOS_STATUS          ; Set status code to 0
.394577	28		plp		                PLP
.394578	2b		pld		                PLD
.394579	ab		plb		                PLB
.39457a	38		sec		                SEC
.39457b	6b		rtl		                RTL
.39457c					ret_failure
.39457c	e2 20		sep #$20	                SEP #$20        ; set A short
.39457e	85 0e		sta $032e	                STA DOS_STATUS          ; Save the status code
.394580	28		plp		                PLP
.394581	2b		pld		                PLD
.394582	ab		plb		                PLB
.394583	18		clc		                CLC
.394584	6b		rtl		                RTL
.394585					DOS_TESTBOOT
.394585	8b		phb		                PHB
.394586	0b		phd		                PHD
.394587	da		phx		                PHX
.394588	08		php		                PHP
.394589	48		pha		                PHA             ; begin setdbr macro
.39458a	08		php		                PHP
.39458b	e2 20		sep #$20	                SEP #$20        ; set A short
.39458d	a9 00		lda #$00	                LDA #0
.39458f	48		pha		                PHA
.394590	ab		plb		                PLB
.394591	28		plp		                PLP
.394592	68		pla		                PLA             ; end setdbr macro
.394593	48		pha		                PHA             ; begin setdp macro
.394594	08		php		                PHP
.394595	c2 20		rep #$20	                REP #$20        ; set A long
.394597	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39459a	5b		tcd		                TCD
.39459b	28		plp		                PLP
.39459c	68		pla		                PLA             ; end setdp macro
.39459d	c2 10		rep #$10	                REP #$10        ; set X long
.39459f					chk_dev
.39459f	e2 20		sep #$20	                SEP #$20        ; set A short
.3945a1	a5 01		lda $0321	                LDA @b BIOS_DEV             ; Look at the device #
.3945a3	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Is it the floppy drive?
.3945a5	f0 24		beq $3945cb	                BEQ chk_vbr_brl             ; Yes: check if BRL is in the right place in the VBR
.3945a7	c2 30		rep #$30	                REP #$30        ; set A&X long
.3945a9	a9 00 00	lda #$0000	                LDA #0                      ; Point to the MBR
.3945ac	85 02		sta $0322	                STA @b BIOS_LBA
.3945ae	85 04		sta $0324	                STA @b BIOS_LBA+2
.3945b0	a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR           ; And the buffer
.3945b3	85 06		sta $0326	                STA @b BIOS_BUFF_PTR
.3945b5	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.3945b8	85 08		sta $0328	                STA @b BIOS_BUFF_PTR+2
.3945ba	22 44 10 38	jsl $381044	                JSL GETBLOCK                ; Try to load the MBR
.3945be	b0 03		bcs $3945c3	                BCS chk_mbr_brl
.3945c0	82 47 00	brl $39460a	                BRL done                    ; If failed... just return
.3945c3					chk_mbr_brl
.3945c3	e2 20		sep #$20	                SEP #$20        ; set A short
.3945c5	af 00 a3 38	lda $38a300	                LDA @l DOS_SECTOR           ; Check the first byte of the MBR
.3945c9	80 04		bra $3945cf	                BRA chk_brl
.3945cb	af 3e a3 38	lda $38a33e	chk_vbr_brl     LDA @l DOS_SECTOR+FDC_BOOT_START
.3945cf	c9 80		cmp #$80	chk_brl         CMP #$80                    ; Is the first byte a BRL/BRA instruction?
.3945d1	f0 06		beq $3945d9	                BEQ chk_magic               ; Yes: check for the magic text
.3945d3	c9 82		cmp #$82	                CMP #$82
.3945d5	f0 02		beq $3945d9	                BEQ chk_magic
.3945d7	80 31		bra $39460a	                BRA done                    ; No: just return
.3945d9	a2 00 00	ldx #$0000	chk_magic       LDX #0
.3945dc	bf 03 a3 38	lda $38a303,x	magic_loop      LDA @l DOS_SECTOR+3,X       ; Check the "vendor" byte
.3945e0	df 0f 46 39	cmp $39460f,x	                CMP DOS_BOOT_MAGIC,X        ; Compare it against our boot magic code
.3945e4	d0 24		bne $39460a	                BNE done                    ; If it's not equal, just return
.3945e6	e8		inx		                INX                         ; Otherwise, check the next one
.3945e7	e0 08 00	cpx #$0008	                CPX #8
.3945ea	d0 f0		bne $3945dc	                BNE magic_loop              ; Until we've checked all 8 bytes
.3945ec	c2 30		rep #$30	                REP #$30        ; set A&X long
.3945ee	a9 00 02	lda #$0200	                LDA #DOS_SECTOR_SIZE
.3945f1	a2 00 a5	ldx #$a500	                LDX #<>(DOS_SECTOR+DOS_SECTOR_SIZE)
.3945f4	a0 00 ab	ldy #$ab00	                LDY #<>(DOS_BOOT_SECTOR+DOS_SECTOR_SIZE)
.3945f7	44 38 38	mvp $38,$38	                MVP #`DOS_SECTOR, #`DOS_BOOT_SECTOR
.3945fa	e2 20		sep #$20	                SEP #$20        ; set A short
.3945fc	a5 01		lda $0321	                LDA @b BIOS_DEV             ; Check the device
.3945fe	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Is it the FDC?
.394600	f0 04		beq $394606	                BEQ jmp_fdc_start           ; Yes: jump to the start of the VBR code
.394602	5c 00 a9 38	jmp $38a900	                JML DOS_BOOT_SECTOR         ; No: it's an MBR, start at the first byte
.394606	5c 3e a9 38	jmp $38a93e	jmp_fdc_start   JML DOS_BOOT_SECTOR+FDC_BOOT_START
.39460a	28		plp		done            PLP
.39460b	2b		pld		                PLD
.39460c	ab		plb		                PLB
.39460d	fa		plx		                PLX
.39460e	6b		rtl		                RTL
>39460f	43 32 35 36 44 4f 53 20		DOS_BOOT_MAGIC  .text "C256DOS "
.394617					DOS_CALC_LBA
.394617	8b		phb		                PHB
.394618	0b		phd		                PHD
.394619	08		php		                PHP
.39461a	48		pha		                PHA             ; begin setdbr macro
.39461b	08		php		                PHP
.39461c	e2 20		sep #$20	                SEP #$20        ; set A short
.39461e	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394620	48		pha		                PHA
.394621	ab		plb		                PLB
.394622	28		plp		                PLP
.394623	68		pla		                PLA             ; end setdbr macro
.394624	48		pha		                PHA             ; begin setdp macro
.394625	08		php		                PHP
.394626	c2 20		rep #$20	                REP #$20        ; set A long
.394628	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39462b	5b		tcd		                TCD
.39462c	28		plp		                PLP
.39462d	68		pla		                PLA             ; end setdp macro
.39462e	c2 20		rep #$20	                REP #$20        ; set A long
.394630	38		sec		                SEC
.394631	a5 10		lda $0330	                LDA DOS_CLUS_ID                     ; cluster - 2
.394633	e9 02 00	sbc #$0002	                SBC #2
.394636	85 28		sta $0348	                STA DOS_TEMP
.394638	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.39463a	e9 00 00	sbc #$0000	                SBC #0
.39463d	85 2a		sta $034a	                STA DOS_TEMP+2
.39463f	e2 10		sep #$10	                SEP #$10        ; set X short
.394641	ae 03 a0	ldx $38a003	                LDX SECTORS_PER_CLUSTER
.394644	e0 01		cpx #$01	mult_loop       CPX #1
.394646	f0 07		beq $39464f	                BEQ add_offset
.394648	06 28		asl $0348	                ASL DOS_TEMP
.39464a	26 28		rol $0348	                ROL DOS_TEMP
.39464c	ca		dex		                DEX
.39464d	80 f5		bra $394644	                BRA mult_loop
.39464f	18		clc		add_offset      CLC
.394650	a5 28		lda $0348	                LDA DOS_TEMP                        ; cluster_being_lba + (cluster - 2) * SECTORS_PER_CLUSTER
.394652	6d 1c a0	adc $38a01c	                ADC CLUSTER_BEGIN_LBA
.394655	85 02		sta $0322	                STA BIOS_LBA
.394657	a5 2a		lda $034a	                LDA DOS_TEMP+2
.394659	6d 1e a0	adc $38a01e	                ADC CLUSTER_BEGIN_LBA+2
.39465c	85 04		sta $0324	                STA BIOS_LBA+2
.39465e	28		plp		                PLP
.39465f	2b		pld		                PLD
.394660	ab		plb		                PLB
.394661	6b		rtl		                RTL
.394662					DOS_GETCLUSTER
.394662	8b		phb		                PHB
.394663	0b		phd		                PHD
.394664	08		php		                PHP
.394665	48		pha		                PHA             ; begin setdbr macro
.394666	08		php		                PHP
.394667	e2 20		sep #$20	                SEP #$20        ; set A short
.394669	a9 00		lda #$00	                LDA #0
.39466b	48		pha		                PHA
.39466c	ab		plb		                PLB
.39466d	28		plp		                PLP
.39466e	68		pla		                PLA             ; end setdbr macro
.39466f	48		pha		                PHA             ; begin setdp macro
.394670	08		php		                PHP
.394671	c2 20		rep #$20	                REP #$20        ; set A long
.394673	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394676	5b		tcd		                TCD
.394677	28		plp		                PLP
.394678	68		pla		                PLA             ; end setdp macro
.394679	c2 20		rep #$20	                REP #$20        ; set A long
.39467b	a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.39467d	85 06		sta $0326	                STA BIOS_BUFF_PTR
.39467f	a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.394681	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394683	22 17 46 39	jsl $394617	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.394687	22 44 10 38	jsl $381044	                JSL GETBLOCK                        ; Get the first block of the cluster
.39468b	90 09		bcc $394696	                BCC ret_failure
.39468d					ret_success
.39468d	e2 20		sep #$20	                SEP #$20        ; set A short
.39468f	64 0e		stz $032e	                STZ DOS_STATUS
.394691	28		plp		                PLP
.394692	2b		pld		                PLD
.394693	ab		plb		                PLB
.394694	38		sec		                SEC
.394695	6b		rtl		                RTL
.394696					ret_failure
.394696	e2 20		sep #$20	                SEP #$20        ; set A short
.394698	85 0e		sta $032e	                STA DOS_STATUS
.39469a	28		plp		                PLP
.39469b	2b		pld		                PLD
.39469c	ab		plb		                PLB
.39469d	18		clc		                CLC
.39469e	6b		rtl		                RTL
.39469f					DOS_PUTCLUSTER
.39469f	8b		phb		                PHB
.3946a0	0b		phd		                PHD
.3946a1	08		php		                PHP
.3946a2	48		pha		                PHA             ; begin setdbr macro
.3946a3	08		php		                PHP
.3946a4	e2 20		sep #$20	                SEP #$20        ; set A short
.3946a6	a9 00		lda #$00	                LDA #0
.3946a8	48		pha		                PHA
.3946a9	ab		plb		                PLB
.3946aa	28		plp		                PLP
.3946ab	68		pla		                PLA             ; end setdbr macro
.3946ac	48		pha		                PHA             ; begin setdp macro
.3946ad	08		php		                PHP
.3946ae	c2 20		rep #$20	                REP #$20        ; set A long
.3946b0	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3946b3	5b		tcd		                TCD
.3946b4	28		plp		                PLP
.3946b5	68		pla		                PLA             ; end setdp macro
.3946b6	c2 20		rep #$20	                REP #$20        ; set A long
.3946b8	a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.3946ba	85 06		sta $0326	                STA BIOS_BUFF_PTR
.3946bc	a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.3946be	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3946c0	22 17 46 39	jsl $394617	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.3946c4	22 24 10 38	jsl $381024	                JSL PUTBLOCK                        ; PUT the first block of the cluster
.3946c8	90 09		bcc $3946d3	                BCC ret_failure
.3946ca					ret_success
.3946ca	e2 20		sep #$20	                SEP #$20        ; set A short
.3946cc	64 0e		stz $032e	                STZ DOS_STATUS
.3946ce	28		plp		                PLP
.3946cf	2b		pld		                PLD
.3946d0	ab		plb		                PLB
.3946d1	38		sec		                SEC
.3946d2	6b		rtl		                RTL
.3946d3					ret_failure
.3946d3	e2 20		sep #$20	                SEP #$20        ; set A short
.3946d5	85 0e		sta $032e	                STA DOS_STATUS
.3946d7	28		plp		                PLP
.3946d8	2b		pld		                PLD
.3946d9	ab		plb		                PLB
.3946da	18		clc		                CLC
.3946db	6b		rtl		                RTL
>3946dc	40 46 00			DOS_FDC_NAME    .null "@F"
.3946df					DOS_FDC_DESC
>3946df	dc 46 39 00			DEVNAME         .dword DOS_FDC_NAME            ; A pointer to the ASCIIZ name of the device
>3946e3	00				DEVNUMBER       .byte BIOS_DEV_FDC           ; The BIOS_DEV number for the device
>3946e4	00 00 00 00			NEXT            .dword 0            ; A pointer to the next device descriptor
>3946e8	40 53 00			DOS_SDC_NAME    .null "@S"
.3946eb					DOS_SDC_DESC
>3946eb	e8 46 39 00			DEVNAME         .dword DOS_SDC_NAME            ; A pointer to the ASCIIZ name of the device
>3946ef	02				DEVNUMBER       .byte BIOS_DEV_SD           ; The BIOS_DEV number for the device
>3946f0	df 46 39 00			NEXT            .dword DOS_FDC_DESC            ; A pointer to the next device descriptor
>3946f4	40 48 00			DOS_HDC_NAME    .null "@H"
.3946f7					DOS_HD_DESC
>3946f7	f4 46 39 00			DEVNAME         .dword DOS_HDC_NAME            ; A pointer to the ASCIIZ name of the device
>3946fb	06				DEVNUMBER       .byte BIOS_DEV_HD0           ; The BIOS_DEV number for the device
>3946fc	eb 46 39 00			NEXT            .dword DOS_SDC_DESC            ; A pointer to the next device descriptor
.394700					DOS_PARSE_DEV
.394700	8b		phb		                PHB
.394701	0b		phd		                PHD
.394702	08		php		                PHP
.394703	48		pha		                PHA             ; begin setdbr macro
.394704	08		php		                PHP
.394705	e2 20		sep #$20	                SEP #$20        ; set A short
.394707	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394709	48		pha		                PHA
.39470a	ab		plb		                PLB
.39470b	28		plp		                PLP
.39470c	68		pla		                PLA             ; end setdbr macro
.39470d	48		pha		                PHA             ; begin setdp macro
.39470e	08		php		                PHP
.39470f	c2 20		rep #$20	                REP #$20        ; set A long
.394711	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394714	5b		tcd		                TCD
.394715	28		plp		                PLP
.394716	68		pla		                PLA             ; end setdp macro
.394717	c2 30		rep #$30	                REP #$30        ; set A&X long
.394719	af 4a a0 38	lda $38a04a	                LDA @l DOS_DEV_NAMES        ; Point to the first device name to check
.39471d	85 28		sta $0348	                STA DOS_TEMP
.39471f	af 4c a0 38	lda $38a04c	                LDA @l DOS_DEV_NAMES+2
.394723	85 2a		sta $034a	                STA DOS_TEMP+2
.394725	a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF        ; Make DOS_STR2_PTR point to the path to check
.394728	85 48		sta $0368	                STA DOS_STR2_PTR
.39472a	a9 00 00	lda #$0000	                LDA #`DOS_PATH_BUFF
.39472d	85 4a		sta $036a	                STA DOS_STR2_PTR+2
.39472f	a0 00 00	ldy #$0000	dev_loop        LDY #DEVICE_DESC.DEVNAME    ; Get the name of the current device into DOS_STR1_PTR
.394732	b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.394734	85 44		sta $0364	                STA DOS_STR1_PTR
.394736	c8		iny		                INY
.394737	c8		iny		                INY
.394738	b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.39473a	85 46		sta $0366	                STA DOS_STR1_PTR+2
.39473c	e2 20		sep #$20	                SEP #$20        ; set A short
.39473e	a0 00 00	ldy #$0000	                LDY #0
.394741	b7 44		lda [$0364],y	cmp_loop        LDA [DOS_STR1_PTR],Y        ; Get the Yth character of the device name
.394743	f0 24		beq $394769	                BEQ found                   ; If it's NULL, we found a match
.394745	d7 48		cmp [$0368],y	                CMP [DOS_STR2_PTR],Y        ; Compare it to the Yth character of the path
.394747	d0 03		bne $39474c	                BNE next_device             ; If no match, try to load the next device
.394749	c8		iny		                INY                         ; Go to the next character
.39474a	80 f5		bra $394741	                BRA cmp_loop
.39474c					next_device
.39474c	c2 20		rep #$20	                REP #$20        ; set A long
.39474e	a0 05 00	ldy #$0005	                LDY #DEVICE_DESC.NEXT       ; DOS_TEMP := DOS_TEMP->NEXT
.394751	b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.394753	48		pha		                PHA
.394754	c8		iny		                INY
.394755	c8		iny		                INY
.394756	b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.394758	85 2a		sta $034a	                STA DOS_TEMP+2
.39475a	68		pla		                PLA
.39475b	85 28		sta $0348	                STA DOS_TEMP
.39475d	a5 28		lda $0348	                LDA DOS_TEMP                ; Is DOS_TEMP = NULL?
.39475f	d0 ce		bne $39472f	                BNE dev_loop                ; No: check this device
.394761	a5 2a		lda $034a	                LDA DOS_TEMP+2
.394763	d0 ca		bne $39472f	                BNE dev_loop
.394765	28		plp		done            PLP                         ; Otherwise, return having not found a match
.394766	2b		pld		                PLD
.394767	ab		plb		                PLB
.394768	6b		rtl		                RTL
.394769	22 7a 47 39	jsl $39477a	found           JSL DOS_ADJUSTPATH          ; Remove the device name from the buffer
.39476d	e2 20		sep #$20	                SEP #$20        ; set A short
.39476f	a0 04 00	ldy #$0004	                LDY #DEVICE_DESC.DEVNUMBER  ; Set the BIOS device number from the found device
.394772	b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.394774	8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.394778	80 eb		bra $394765	                BRA done
.39477a					DOS_ADJUSTPATH
.39477a	da		phx		                PHX
.39477b	5a		phy		                PHY
.39477c	8b		phb		                PHB
.39477d	0b		phd		                PHD
.39477e	08		php		                PHP
.39477f	48		pha		                PHA             ; begin setdbr macro
.394780	08		php		                PHP
.394781	e2 20		sep #$20	                SEP #$20        ; set A short
.394783	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394785	48		pha		                PHA
.394786	ab		plb		                PLB
.394787	28		plp		                PLP
.394788	68		pla		                PLA             ; end setdbr macro
.394789	48		pha		                PHA             ; begin setdp macro
.39478a	08		php		                PHP
.39478b	c2 20		rep #$20	                REP #$20        ; set A long
.39478d	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394790	5b		tcd		                TCD
.394791	28		plp		                PLP
.394792	68		pla		                PLA             ; end setdp macro
.394793	c2 30		rep #$30	                REP #$30        ; set A&X long
.394795	84 4b		sty $036b	                STY DOS_SCRATCH                 ; Save the index to later compute the size
.394797	98		tya		                TYA                             ; Compute the address of the first source byte
.394798	18		clc		                CLC
.394799	69 00 04	adc #$0400	                ADC #<>DOS_PATH_BUFF
.39479c	aa		tax		                TAX
.39479d	a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF            ; Compute the destination address for the source byte
.3947a0	a8		tay		                TAY
.3947a1	38		sec		                SEC                             ; Compute the number of bytes to copy
.3947a2	a9 00 01	lda #$0100	                LDA #256
.3947a5	e5 4b		sbc $036b	                SBC DOS_SCRATCH
.3947a7	54 00 00	mvn $00,$00	                MVN #`DOS_PATH_BUFF, #`DOS_PATH_BUFF
.3947aa	28		plp		                PLP
.3947ab	2b		pld		                PLD
.3947ac	ab		plb		                PLB
.3947ad	7a		ply		                PLY
.3947ae	fa		plx		                PLX
.3947af	6b		rtl		                RTL
.3947b0					DOS_PARSE_PATH
.3947b0	8b		phb		                PHB
.3947b1	0b		phd		                PHD
.3947b2	08		php		                PHP
.3947b3	48		pha		                PHA             ; begin setdbr macro
.3947b4	08		php		                PHP
.3947b5	e2 20		sep #$20	                SEP #$20        ; set A short
.3947b7	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3947b9	48		pha		                PHA
.3947ba	ab		plb		                PLB
.3947bb	28		plp		                PLP
.3947bc	68		pla		                PLA             ; end setdbr macro
.3947bd	48		pha		                PHA             ; begin setdp macro
.3947be	08		php		                PHP
.3947bf	c2 20		rep #$20	                REP #$20        ; set A long
.3947c1	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3947c4	5b		tcd		                TCD
.3947c5	28		plp		                PLP
.3947c6	68		pla		                PLA             ; end setdp macro
.3947c7	c2 10		rep #$10	                REP #$10        ; set X long
.3947c9	e2 20		sep #$20	                SEP #$20        ; set A short
.3947cb	a2 00 00	ldx #$0000	                LDX #0
.3947ce	b5 e0		lda $0400,x	upcase_loop     LDA DOS_PATH_BUFF,X     ; Get the character
.3947d0	f0 1b		beq $3947ed	                BEQ parse_dev           ; If it's NULL, the path is upper case, attempt to parse the device
.3947d2	c9 20		cmp #$20	                CMP #' '                ; Is a control character?
.3947d4	b0 05		bcs $3947db	                BGE check_case          ; No: check the case
.3947d6	a9 07		lda #$07	                LDA #DOS_ERR_BADPATH    ; Yes: return a bad path error
.3947d8	82 64 00	brl $39483f	                BRL ret_failure
.3947db	c9 61		cmp #$61	check_case      CMP #'a'                ; Is the character lower case?
.3947dd	90 08		bcc $3947e7	                BLT next_char
.3947df	c9 7b		cmp #$7b	                CMP #'z'+1
.3947e1	b0 04		bcs $3947e7	                BGE next_char
.3947e3	29 5f		and #$5f	                AND #%01011111          ; Yes: Convert to uppercase
.3947e5	95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.3947e7	e8		inx		next_char       INX                     ; Move to the next character
.3947e8	e0 00 01	cpx #$0100	                CPX #$100
.3947eb	d0 e1		bne $3947ce	                BNE upcase_loop
.3947ed	22 00 47 39	jsl $394700	parse_dev       JSL DOS_PARSE_DEV       ; Parse and extract a device specifier ":xxx:"
.3947f1	a5 e0		lda $0400	                LDA DOS_PATH_BUFF       ; Check the first character of the path
.3947f3	c9 3a		cmp #$3a	                CMP #':'
.3947f5	d0 07		bne $3947fe	                BNE clr_name            ; If not colon, treat it as a file name
.3947f7	a0 01 00	ldy #$0001	                LDY #1                  ; Otherwise...
.3947fa	22 7a 47 39	jsl $39477a	                JSL DOS_ADJUSTPATH      ; For now, just remove the leading ":"
.3947fe	a0 00 00	ldy #$0000	clr_name        LDY #0                  ; Set the short name to blanks
.394801	a9 20		lda #$20	                LDA #' '
.394803	99 3a a0	sta $38a03a,y	clr_loop        STA DOS_SHORT_NAME,Y
.394806	c8		iny		                INY
.394807	c0 0b 00	cpy #$000b	                CPY #11
.39480a	d0 f7		bne $394803	                BNE clr_loop
.39480c	a2 00 00	ldx #$0000	                LDX #0
.39480f	a0 00 00	ldy #$0000	                LDY #0
.394812	b5 e0		lda $0400,x	cpy_name_loop   LDA DOS_PATH_BUFF,X     ; Get the character of the name
.394814	f0 20		beq $394836	                BEQ ret_success         ; If NULL: we've finished parsing the path
.394816	c9 2e		cmp #$2e	                CMP #'.'                ; If it's a dot, we've finished the name part
.394818	f0 0a		beq $394824	                BEQ cpy_ext             ; And move to the extension
.39481a	99 3a a0	sta $38a03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, store it to the name portion
.39481d	e8		inx		                INX
.39481e	c8		iny		                INY                     ; Move to the next character
.39481f	c0 08 00	cpy #$0008	                CPY #8                  ; Have we processed 8?
.394822	d0 ee		bne $394812	                BNE cpy_name_loop       ; No: process this one
.394824	e8		inx		cpy_ext         INX                     ; Skip the dot
.394825	a0 08 00	ldy #$0008	                LDY #8
.394828	b5 e0		lda $0400,x	cpy_ext_loop    LDA DOS_PATH_BUFF,X     ; Get the character of the extension
.39482a	f0 0a		beq $394836	                BEQ ret_success         ; If it's NULL, we've finished
.39482c	99 3a a0	sta $38a03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, copy it to the short name
.39482f	e8		inx		                INX
.394830	c8		iny		                INY                     ; Move to the next character
.394831	c0 0b 00	cpy #$000b	                CPY #11                 ; Have we processed the three ext characters?
.394834	d0 f2		bne $394828	                BNE cpy_ext_loop        ; No: process this one
.394836					ret_success
.394836	e2 20		sep #$20	                SEP #$20        ; set A short
.394838	64 0e		stz $032e	                STZ DOS_STATUS
.39483a	28		plp		                PLP
.39483b	2b		pld		                PLD
.39483c	ab		plb		                PLB
.39483d	38		sec		                SEC
.39483e	6b		rtl		                RTL
.39483f					ret_failure
.39483f	e2 20		sep #$20	                SEP #$20        ; set A short
.394841	85 0e		sta $032e	                STA DOS_STATUS
.394843	28		plp		                PLP
.394844	2b		pld		                PLD
.394845	ab		plb		                PLB
.394846	18		clc		                CLC
.394847	6b		rtl		                RTL
.394848					DOS_FINDFILE
.394848	8b		phb		                PHB
.394849	0b		phd		                PHD
.39484a	08		php		                PHP
.39484b	48		pha		                PHA             ; begin setdbr macro
.39484c	08		php		                PHP
.39484d	e2 20		sep #$20	                SEP #$20        ; set A short
.39484f	a9 00		lda #$00	                LDA #0
.394851	48		pha		                PHA
.394852	ab		plb		                PLB
.394853	28		plp		                PLP
.394854	68		pla		                PLA             ; end setdbr macro
.394855	48		pha		                PHA             ; begin setdp macro
.394856	08		php		                PHP
.394857	c2 20		rep #$20	                REP #$20        ; set A long
.394859	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39485c	5b		tcd		                TCD
.39485d	28		plp		                PLP
.39485e	68		pla		                PLA             ; end setdp macro
.39485f	c2 30		rep #$30	                REP #$30        ; set A&X long
.394861	22 b0 47 39	jsl $3947b0	                JSL DOS_PARSE_PATH              ; Break out the path into its components
.394865	b0 05		bcs $39486c	                BCS mount                       ; If success: try to open the directory
.394867	28		plp		pass_failure    PLP                             ; If failure, just pass the failure back up
.394868	2b		pld		                PLD
.394869	ab		plb		                PLB
.39486a	18		clc		                CLC
.39486b	6b		rtl		                RTL
.39486c	22 f6 43 39	jsl $3943f6	mount           JSL DOS_MOUNT
.394870					get_directory
.394870	c2 20		rep #$20	                REP #$20        ; set A long
.394872	22 e2 40 39	jsl $3940e2	                JSL DOS_DIROPEN                 ; Get the directory
.394876	b0 07		bcs $39487f	                BCS scan_entries                ; If success: start scanning the directory entries
.394878	e2 20		sep #$20	                SEP #$20        ; set A short
.39487a	a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Otherwise: return a no directory error
.39487c	82 47 00	brl $3948c6	                BRL ret_failure
.39487f	22 62 41 39	jsl $394162	scan_entries    JSL DOS_DIRFIRST                ; Move the DIR pointer to the beginning of the sector
.394883					scan_loop
.394883	e2 20		sep #$20	                SEP #$20        ; set A short
.394885	a0 00 00	ldy #$0000	                LDY #0
.394888	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y             ; Check the directory entry
.39488a	d0 05		bne $394891	                BNE chk_unused                  ; If there's an entry, check to see if it's unused
.39488c	a9 09		lda #$09	                LDA #DOS_ERR_NOTFOUND           ; If end-of-directory, we couldn't find a match
.39488e	82 35 00	brl $3948c6	                BRL ret_failure
.394891	c9 e5		cmp #$e5	chk_unused      CMP #DOS_DIR_ENT_UNUSED         ; If it's unused...
.394893	f0 26		beq $3948bb	                BEQ next_entry                  ; Go to the next entry
.394895	a0 0b 00	ldy #$000b	                LDY #DIRENTRY.ATTRIBUTE         ; Check the entry's attributes
.394898	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.39489a	89 08		bit #$08	                BIT #DOS_ATTR_VOLUME            ; Is it a volume name?
.39489c	d0 1d		bne $3948bb	                BNE next_entry                  ; Yes: skip it!
.39489e	29 0f		and #$0f	                AND #DOS_ATTR_LONGNAME
.3948a0	c9 0f		cmp #$0f	                CMP #DOS_ATTR_LONGNAME          ; Is it a long name field?
.3948a2	f0 17		beq $3948bb	                BEQ next_entry                  ; Yes: skip it!
.3948a4	a2 00 00	ldx #$0000	                LDX #0
.3948a7	a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME
.3948aa	b7 18		lda [$0338],y	scan_cmp_loop   LDA [DOS_DIR_PTR],Y             ; Get the X'th character of the entry
.3948ac	df 3a a0 38	cmp $38a03a,x	                CMP DOS_SHORT_NAME,X            ; And compare to the X'th character of the name we want
.3948b0	d0 09		bne $3948bb	                BNE next_entry                  ; If not equal: try the next entry
.3948b2	c8		iny		                INY                             ; Advance to the next character
.3948b3	e8		inx		                INX
.3948b4	e0 0b 00	cpx #$000b	                CPX #11                         ; Did we reach the end of the names?
.3948b7	f0 16		beq $3948cf	                BEQ match                       ; Yes: we have a match!
.3948b9	80 ef		bra $3948aa	                BRA scan_cmp_loop               ; No: keep checking
.3948bb	22 7d 41 39	jsl $39417d	next_entry      JSL DOS_DIRNEXT                 ; Try to get the next directory entry
.3948bf	90 05		bcc $3948c6	                BCC ret_failure                 ; If we're at the end of the directory, return a failure.
.3948c1	82 bf ff	brl $394883	                BRL scan_loop                   ; If found: keep scanning
.3948c4	a9 08		lda #$08	bad_dir         LDA #DOS_ERR_NODIR              ; Otherwise: fail with a NODIR error (maybe something else is better)
.3948c6					ret_failure
.3948c6	e2 20		sep #$20	                SEP #$20        ; set A short
.3948c8	85 0e		sta $032e	                STA DOS_STATUS
.3948ca	28		plp		                PLP
.3948cb	2b		pld		                PLD
.3948cc	ab		plb		                PLB
.3948cd	18		clc		                CLC
.3948ce	6b		rtl		                RTL
.3948cf					match
.3948cf	c2 20		rep #$20	                REP #$20        ; set A long
.3948d1	a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L         ; Copy the cluster number from the directory entry
.3948d4	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3948d6	85 10		sta $0330	                STA DOS_CLUS_ID                 ; To DOS_CLUS_ID
.3948d8	a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.3948db	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3948dd	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3948df					ret_success
.3948df	e2 20		sep #$20	                SEP #$20        ; set A short
.3948e1	64 0e		stz $032e	                STZ DOS_STATUS
.3948e3	28		plp		                PLP
.3948e4	2b		pld		                PLD
.3948e5	ab		plb		                PLB
.3948e6	38		sec		                SEC
.3948e7	6b		rtl		                RTL
.3948e8					DOS_READFILE
.3948e8	8b		phb		                PHB
.3948e9	0b		phd		                PHD
.3948ea	08		php		                PHP
.3948eb	48		pha		                PHA             ; begin setdbr macro
.3948ec	08		php		                PHP
.3948ed	e2 20		sep #$20	                SEP #$20        ; set A short
.3948ef	a9 00		lda #$00	                LDA #0
.3948f1	48		pha		                PHA
.3948f2	ab		plb		                PLB
.3948f3	28		plp		                PLP
.3948f4	68		pla		                PLA             ; end setdbr macro
.3948f5	48		pha		                PHA             ; begin setdp macro
.3948f6	08		php		                PHP
.3948f7	c2 20		rep #$20	                REP #$20        ; set A long
.3948f9	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3948fc	5b		tcd		                TCD
.3948fd	28		plp		                PLP
.3948fe	68		pla		                PLA             ; end setdp macro
.3948ff	c2 30		rep #$30	                REP #$30        ; set A&X long
.394901	a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.394903	48		pha		                PHA
.394904	a5 1c		lda $033c	                LDA DOS_BUFF_PTR
.394906	48		pha		                PHA
.394907	22 48 48 39	jsl $394848	                JSL DOS_FINDFILE                    ; Attempt to find the file's directory entry
.39490b	68		pla		                PLA
.39490c	85 1c		sta $033c	                STA DOS_BUFF_PTR
.39490e	68		pla		                PLA
.39490f	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394911	90 0f		bcc $394922	                BCC pass_failure                    ; If found: try to load the cluster
.394913	22 62 46 39	jsl $394662	load_cluster    JSL DOS_GETCLUSTER                  ; Get the first block of the cluster
.394917	90 09		bcc $394922	                BCC pass_failure                    ; If there's an error... pass it up the chain
.394919					ret_success
.394919	e2 20		sep #$20	                SEP #$20        ; set A short
.39491b	64 0e		stz $032e	                STZ DOS_STATUS
.39491d	28		plp		                PLP
.39491e	2b		pld		                PLD
.39491f	ab		plb		                PLB
.394920	38		sec		                SEC
.394921	6b		rtl		                RTL
.394922	28		plp		pass_failure    PLP                                 ; Otherwise: pass any error up the chain
.394923	2b		pld		                PLD
.394924	ab		plb		                PLB
.394925	18		clc		                CLC
.394926	6b		rtl		                RTL
.394927					ENTRYFORCLUS12
.394927	8b		phb		                PHB
.394928	0b		phd		                PHD
.394929	08		php		                PHP
.39492a	48		pha		                PHA             ; begin setdbr macro
.39492b	08		php		                PHP
.39492c	e2 20		sep #$20	                SEP #$20        ; set A short
.39492e	a9 00		lda #$00	                LDA #0
.394930	48		pha		                PHA
.394931	ab		plb		                PLB
.394932	28		plp		                PLP
.394933	68		pla		                PLA             ; end setdbr macro
.394934	48		pha		                PHA             ; begin setdp macro
.394935	08		php		                PHP
.394936	c2 20		rep #$20	                REP #$20        ; set A long
.394938	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39493b	5b		tcd		                TCD
.39493c	28		plp		                PLP
.39493d	68		pla		                PLA             ; end setdp macro
.39493e	c2 30		rep #$30	                REP #$30        ; set A&X long
.394940	a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; DOS_TEMP := DOS_CLUS_ID * 3
.394942	0a		asl a		                ASL A
.394943	85 28		sta $0348	                STA DOS_TEMP
.394945	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394947	2a		rol a		                ROL A
.394948	85 2a		sta $034a	                STA DOS_TEMP+2
.39494a	18		clc		                CLC
.39494b	a5 10		lda $0330	                LDA DOS_CLUS_ID
.39494d	65 28		adc $0348	                ADC DOS_TEMP
.39494f	85 28		sta $0348	                STA DOS_TEMP
.394951	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394953	65 2a		adc $034a	                ADC DOS_TEMP+2
.394955	85 2a		sta $034a	                STA DOS_TEMP+2
.394957	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := (DOS_CLUS_ID * 3) / 2
.394959	66 28		ror $0348	                ROR DOS_TEMP                    ; DOS_TEMP is now the offset to the cluster's entry in the FAT
.39495b	a5 28		lda $0348	                LDA DOS_TEMP                    ; X should be the offset within the FAT buffer
.39495d	29 ff 03	and #$03ff	                AND #$003FF
.394960	aa		tax		                TAX
.394961	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394963	66 28		ror $0348	                ROR DOS_TEMP
.394965	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394967	66 28		ror $0348	                ROR DOS_TEMP
.394969	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.39496b	66 28		ror $0348	                ROR DOS_TEMP
.39496d	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.39496f	66 28		ror $0348	                ROR DOS_TEMP
.394971	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394973	66 28		ror $0348	                ROR DOS_TEMP
.394975	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394977	66 28		ror $0348	                ROR DOS_TEMP
.394979	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.39497b	66 28		ror $0348	                ROR DOS_TEMP
.39497d	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.39497f	66 28		ror $0348	                ROR DOS_TEMP
.394981	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394983	66 28		ror $0348	                ROR DOS_TEMP
.394985	18		clc		                CLC                             ; DOS_FAT_LBA should be the LBA of the first FAT sector we need
.394986	af 14 a0 38	lda $38a014	                LDA FAT_BEGIN_LBA
.39498a	65 28		adc $0348	                ADC DOS_TEMP
.39498c	85 24		sta $0344	                STA DOS_FAT_LBA
.39498e	af 16 a0 38	lda $38a016	                LDA FAT_BEGIN_LBA+2
.394992	65 2a		adc $034a	                ADC DOS_TEMP+2
.394994	85 26		sta $0346	                STA DOS_FAT_LBA+2
.394996	28		plp		                PLP
.394997	2b		pld		                PLD
.394998	ab		plb		                PLB
.394999	6b		rtl		                RTL
.39499a					FATFORCLUSTER12
.39499a	8b		phb		                PHB
.39499b	0b		phd		                PHD
.39499c	08		php		                PHP
.39499d	48		pha		                PHA             ; begin setdbr macro
.39499e	08		php		                PHP
.39499f	e2 20		sep #$20	                SEP #$20        ; set A short
.3949a1	a9 00		lda #$00	                LDA #0
.3949a3	48		pha		                PHA
.3949a4	ab		plb		                PLB
.3949a5	28		plp		                PLP
.3949a6	68		pla		                PLA             ; end setdbr macro
.3949a7	48		pha		                PHA             ; begin setdp macro
.3949a8	08		php		                PHP
.3949a9	c2 20		rep #$20	                REP #$20        ; set A long
.3949ab	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3949ae	5b		tcd		                TCD
.3949af	28		plp		                PLP
.3949b0	68		pla		                PLA             ; end setdp macro
.3949b1	c2 30		rep #$30	                REP #$30        ; set A&X long
.3949b3	a2 00 00	ldx #$0000	                LDX #0
.3949b6	a9 5a 5a	lda #$5a5a	                LDA #$5A5A
.3949b9	8f 00 a5 38	sta $38a500	clr_loop        STA DOS_FAT_SECTORS
.3949bd	e8		inx		                INX
.3949be	e8		inx		                INX
.3949bf	e0 00 04	cpx #$0400	                CPX #1024
.3949c2	d0 f5		bne $3949b9	                BNE clr_loop
.3949c4	22 27 49 39	jsl $394927	                JSL ENTRYFORCLUS12              ; Calculate the LBA
.3949c8	a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Point to the desired sector in the FAT
.3949ca	85 02		sta $0322	                STA BIOS_LBA
.3949cc	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.3949ce	85 04		sta $0324	                STA BIOS_LBA+2
.3949d0	a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first 512 bytes of the FAT buffer
.3949d3	85 06		sta $0326	                STA BIOS_BUFF_PTR
.3949d5	a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.3949d8	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3949da	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.3949de	90 17		bcc $3949f7	                BCC error
.3949e0	e6 02		inc $0322	                INC BIOS_LBA                    ; Move to the next sector
.3949e2	a9 00 a7	lda #$a700	                LDA #<>DOS_FAT_SECTORS+512      ; And point to the second 512 bytes of teh FAT buffer
.3949e5	85 06		sta $0326	                STA BIOS_BUFF_PTR
.3949e7	a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.3949ea	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3949ec	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.3949f0	90 05		bcc $3949f7	                BCC error
.3949f2	28		plp		                PLP
.3949f3	2b		pld		                PLD
.3949f4	ab		plb		                PLB
.3949f5	38		sec		                SEC
.3949f6	6b		rtl		                RTL
.3949f7					error
.3949f7	e2 20		sep #$20	                SEP #$20        ; set A short
.3949f9	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.3949fb	85 0e		sta $032e	                STA DOS_STATUS
.3949fd	28		plp		                PLP
.3949fe	2b		pld		                PLD
.3949ff	ab		plb		                PLB
.394a00	18		clc		                CLC
.394a01	6b		rtl		                RTL
.394a02					FATFORCLUSTER32
.394a02	8b		phb		                PHB
.394a03	0b		phd		                PHD
.394a04	48		pha		                PHA             ; begin setdbr macro
.394a05	08		php		                PHP
.394a06	e2 20		sep #$20	                SEP #$20        ; set A short
.394a08	a9 00		lda #$00	                LDA #0
.394a0a	48		pha		                PHA
.394a0b	ab		plb		                PLB
.394a0c	28		plp		                PLP
.394a0d	68		pla		                PLA             ; end setdbr macro
.394a0e	48		pha		                PHA             ; begin setdp macro
.394a0f	08		php		                PHP
.394a10	c2 20		rep #$20	                REP #$20        ; set A long
.394a12	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394a15	5b		tcd		                TCD
.394a16	28		plp		                PLP
.394a17	68		pla		                PLA             ; end setdp macro
.394a18	c2 30		rep #$30	                REP #$30        ; set A&X long
.394a1a	a5 10		lda $0330	                LDA DOS_CLUS_ID
.394a1c	85 24		sta $0344	                STA DOS_FAT_LBA
.394a1e	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394a20	85 26		sta $0346	                STA DOS_FAT_LBA+2
.394a22	a2 07 00	ldx #$0007	                LDX #7
.394a25	46 26		lsr $0346	div_loop        LSR DOS_FAT_LBA+2
.394a27	66 24		ror $0344	                ROR DOS_FAT_LBA
.394a29	ca		dex		                DEX
.394a2a	d0 f9		bne $394a25	                BNE div_loop
.394a2c	18		clc		                CLC
.394a2d	a5 24		lda $0344	                LDA DOS_FAT_LBA
.394a2f	6f 14 a0 38	adc $38a014	                ADC FAT_BEGIN_LBA
.394a33	85 24		sta $0344	                STA DOS_FAT_LBA
.394a35	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394a37	6f 16 a0 38	adc $38a016	                ADC FAT_BEGIN_LBA+2
.394a3b	85 26		sta $0346	                STA DOS_FAT_LBA+2
.394a3d	a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; We want to load the FAT sector
.394a3f	85 02		sta $0322	                STA BIOS_LBA
.394a41	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394a43	85 04		sta $0324	                STA BIOS_LBA+2
.394a45	a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; We want to load the FAT sector in DOS_FAT_SECTORS
.394a48	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394a4a	a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394a4d	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394a4f	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Load the FAT entry
.394a53	b0 06		bcs $394a5b	                BCS find_entry
.394a55	e2 20		sep #$20	                SEP #$20        ; set A short
.394a57	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394a59	80 0e		bra $394a69	                BRA ret_failure
.394a5b					find_entry
.394a5b	c2 20		rep #$20	                REP #$20        ; set A long
.394a5d	a5 10		lda $0330	                LDA DOS_CLUS_ID
.394a5f	0a		asl a		                ASL A
.394a60	0a		asl a		                ASL A                           ; * 4
.394a61	29 ff 01	and #$01ff	                AND #$1FF                       ; DOS_CLUS_ID MOD 512
.394a64	aa		tax		                TAX                             ; X should be the offset within the sector
.394a65	2b		pld		ret_success     PLD
.394a66	ab		plb		                PLB
.394a67	38		sec		                SEC                             ; return success
.394a68	6b		rtl		                RTL
.394a69	2b		pld		ret_failure     PLD
.394a6a	ab		plb		                PLB
.394a6b	18		clc		                CLC                             ; Return failure
.394a6c	6b		rtl		                RTL
.394a6d					NEXTCLUSTER
.394a6d	08		php		                PHP
.394a6e	e2 20		sep #$20	                SEP #$20        ; set A short
.394a70	af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394a74	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394a76	d0 08		bne $394a80	                BNE fat32                       ; No: assume it's FAT32
.394a78	22 8e 4a 39	jsl $394a8e	fat12           JSL NEXTCLUSTER12               ; Lookup the next cluster from FAT12
.394a7c	90 0d		bcc $394a8b	                BCC pass_failure                ; If there was an error, pass it up the chain
.394a7e	80 06		bra $394a86	                BRA ret_success
.394a80	22 f6 4a 39	jsl $394af6	fat32           JSL NEXTCLUSTER32               ; Lookup the next cluster from FAT32
.394a84	90 05		bcc $394a8b	                BCC pass_failure                ; If there was an error, pass it up the chain
.394a86	64 0e		stz $032e	ret_success     STZ DOS_STATUS
.394a88	28		plp		                PLP
.394a89	38		sec		                SEC
.394a8a	6b		rtl		                RTL
.394a8b	28		plp		pass_failure    PLP
.394a8c	18		clc		                CLC
.394a8d	6b		rtl		                RTL
.394a8e					NEXTCLUSTER12
.394a8e	8b		phb		                    PHB
.394a8f	0b		phd		                    PHD
.394a90	08		php		                    PHP
.394a91	48		pha		                PHA             ; begin setdbr macro
.394a92	08		php		                PHP
.394a93	e2 20		sep #$20	                SEP #$20        ; set A short
.394a95	a9 00		lda #$00	                LDA #0
.394a97	48		pha		                PHA
.394a98	ab		plb		                PLB
.394a99	28		plp		                PLP
.394a9a	68		pla		                PLA             ; end setdbr macro
.394a9b	48		pha		                PHA             ; begin setdp macro
.394a9c	08		php		                PHP
.394a9d	c2 20		rep #$20	                REP #$20        ; set A long
.394a9f	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394aa2	5b		tcd		                TCD
.394aa3	28		plp		                PLP
.394aa4	68		pla		                PLA             ; end setdp macro
.394aa5	c2 30		rep #$30	                REP #$30        ; set A&X long
.394aa7	22 9a 49 39	jsl $39499a	                    JSL FATFORCLUSTER12             ; Attempt to load the FAT entries
.394aab	b0 03		bcs $394ab0	                    BCS chk_clus_id
.394aad	82 41 00	brl $394af1	                    BRL pass_failure
.394ab0	a5 10		lda $0330	chk_clus_id         LDA DOS_CLUS_ID                 ; Check the cluster ID...
.394ab2	89 01 00	bit #$0001	                    BIT #1                          ; Is it odd?
.394ab5	d0 0d		bne $394ac4	                    BNE is_odd                      ; Yes: calculate the next cluster for odd
.394ab7					is_even
.394ab7	c2 20		rep #$20	                REP #$20        ; set A long
.394ab9	bf 00 a5 38	lda $38a500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] & $0FFF
.394abd	29 ff 0f	and #$0fff	                    AND #$0FFF
.394ac0	85 28		sta $0348	                    STA DOS_TEMP
.394ac2	80 0c		bra $394ad0	                    BRA check_id
.394ac4					is_odd
.394ac4	c2 20		rep #$20	                REP #$20        ; set A long
.394ac6	bf 00 a5 38	lda $38a500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] >> 4
.394aca	4a		lsr a		                    LSR A
.394acb	4a		lsr a		                    LSR A
.394acc	4a		lsr a		                    LSR A
.394acd	4a		lsr a		                    LSR A
.394ace	85 28		sta $0348	                    STA DOS_TEMP
.394ad0					check_id
.394ad0	c2 20		rep #$20	                REP #$20        ; set A long
.394ad2	a5 28		lda $0348	                    LDA DOS_TEMP                    ; Check the new cluster ID we got
.394ad4	29 f0 0f	and #$0ff0	                    AND #$0FF0                      ; Is it in the range $0FF0 -- $0FFF?
.394ad7	c9 f0 0f	cmp #$0ff0	                    CMP #$0FF0
.394ada	f0 0f		beq $394aeb	                    BEQ no_more                     ; Yes: return that we've reached the end of the chain
.394adc	a5 28		lda $0348	                    LDA DOS_TEMP                    ; Restore the "current" cluster ID
.394ade	85 10		sta $0330	                    STA DOS_CLUS_ID
.394ae0	64 12		stz $0332	                    STZ DOS_CLUS_ID+2
.394ae2					ret_success
.394ae2	e2 20		sep #$20	                SEP #$20        ; set A short
.394ae4	64 0e		stz $032e	                    STZ DOS_STATUS
.394ae6	28		plp		                    PLP
.394ae7	2b		pld		                    PLD
.394ae8	ab		plb		                    PLB
.394ae9	38		sec		                    SEC
.394aea	6b		rtl		                    RTL
.394aeb					no_more
.394aeb	e2 20		sep #$20	                SEP #$20        ; set A short
.394aed	a9 0a		lda #$0a	                    LDA #DOS_ERR_NOCLUSTER
.394aef	85 0e		sta $032e	                    STA DOS_STATUS
.394af1	28		plp		pass_failure        PLP
.394af2	2b		pld		                    PLD
.394af3	ab		plb		                    PLB
.394af4	18		clc		                    CLC
.394af5	6b		rtl		                    RTL
.394af6					NEXTCLUSTER32
.394af6	8b		phb		                PHB
.394af7	0b		phd		                PHD
.394af8	08		php		                PHP
.394af9	48		pha		                PHA             ; begin setdbr macro
.394afa	08		php		                PHP
.394afb	e2 20		sep #$20	                SEP #$20        ; set A short
.394afd	a9 00		lda #$00	                LDA #0
.394aff	48		pha		                PHA
.394b00	ab		plb		                PLB
.394b01	28		plp		                PLP
.394b02	68		pla		                PLA             ; end setdbr macro
.394b03	48		pha		                PHA             ; begin setdp macro
.394b04	08		php		                PHP
.394b05	c2 20		rep #$20	                REP #$20        ; set A long
.394b07	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394b0a	5b		tcd		                TCD
.394b0b	28		plp		                PLP
.394b0c	68		pla		                PLA             ; end setdp macro
.394b0d	c2 30		rep #$30	                REP #$30        ; set A&X long
.394b0f	22 02 4a 39	jsl $394a02	                JSL FATFORCLUSTER32             ; Get the FAT entry for this cluster
.394b13	90 33		bcc $394b48	                BCC ret_failure                 ; If it did not work, return the error
.394b15	bf 00 a5 38	lda $38a500,x	                LDA DOS_FAT_SECTORS,X           ; Get the entry and copy it to DOS_TEMP
.394b19	85 28		sta $0348	                STA DOS_TEMP
.394b1b	bf 02 a5 38	lda $38a502,x	                LDA DOS_FAT_SECTORS+2,X
.394b1f	85 2a		sta $034a	                STA DOS_TEMP+2
.394b21	a5 28		lda $0348	                LDA DOS_TEMP                    ; Is DOS_TEMP = $FFFFFFFF?
.394b23	c9 ff ff	cmp #$ffff	                CMP #$FFFF
.394b26	d0 0d		bne $394b35	                BNE found_next
.394b28	a5 2a		lda $034a	                LDA DOS_TEMP+2
.394b2a	c9 ff 0f	cmp #$0fff	                CMP #$0FFF
.394b2d	d0 06		bne $394b35	                BNE found_next                  ; No: return this cluster as the next
.394b2f	e2 20		sep #$20	                SEP #$20        ; set A short
.394b31	a9 0a		lda #$0a	                LDA #DOS_ERR_NOCLUSTER          ; Yes: return that there are no more clusters
.394b33	80 13		bra $394b48	                BRA ret_failure
.394b35					found_next
.394b35	c2 20		rep #$20	                REP #$20        ; set A long
.394b37	a5 28		lda $0348	                LDA DOS_TEMP                    ; No: return DOS_TEMP as the new DOS_CLUS_ID
.394b39	85 10		sta $0330	                STA DOS_CLUS_ID
.394b3b	a5 2a		lda $034a	                LDA DOS_TEMP+2
.394b3d	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394b3f					ret_success
.394b3f	e2 20		sep #$20	                SEP #$20        ; set A short
.394b41	64 0e		stz $032e	                STZ DOS_STATUS                  ; Record success
.394b43	28		plp		                PLP
.394b44	2b		pld		                PLD
.394b45	ab		plb		                PLB
.394b46	38		sec		                SEC
.394b47	6b		rtl		                RTL
.394b48					ret_failure
.394b48	e2 20		sep #$20	                SEP #$20        ; set A short
.394b4a	85 0e		sta $032e	                STA DOS_STATUS                  ; Record the error condition
.394b4c	28		plp		                PLP
.394b4d	2b		pld		                PLD
.394b4e	ab		plb		                PLB
.394b4f	18		clc		                CLC
.394b50	6b		rtl		                RTL
.394b51					DOS_READNEXT
.394b51	08		php		                PHP
.394b52	c2 30		rep #$30	                REP #$30        ; set A&X long
.394b54	22 6d 4a 39	jsl $394a6d	                JSL NEXTCLUSTER                 ; Attempt to find the next cluster in the FAT
.394b58	90 09		bcc $394b63	                BCC pass_failure                ; If nothing found: pass the failure up the chain
.394b5a	22 62 46 39	jsl $394662	                JSL DOS_GETCLUSTER              ; Otherwise: attempt to read the cluster
.394b5e	90 03		bcc $394b63	                BCC pass_failure                ; If nothing read: pass the failure up the chain
.394b60	28		plp		ret_success     PLP
.394b61	38		sec		                SEC
.394b62	6b		rtl		                RTL
.394b63	28		plp		pass_failure    PLP
.394b64	18		clc		                CLC
.394b65	6b		rtl		                RTL
.394b66					DOS_FREECLUS
.394b66	08		php		                PHP
.394b67	48		pha		                PHA             ; begin setdp macro
.394b68	08		php		                PHP
.394b69	c2 20		rep #$20	                REP #$20        ; set A long
.394b6b	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394b6e	5b		tcd		                TCD
.394b6f	28		plp		                PLP
.394b70	68		pla		                PLA             ; end setdp macro
.394b71	e2 20		sep #$20	                SEP #$20        ; set A short
.394b73	af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394b77	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394b79	d0 08		bne $394b83	                BNE fat32                       ; No: assume it's FAT32
.394b7b	22 f7 4b 39	jsl $394bf7	fat12           JSL DOS_FREECLUS12              ; Find the next free cluster from FAT12
.394b7f	90 0d		bcc $394b8e	                BCC pass_failure                ; If there was an error, pass it up the chain
.394b81	80 06		bra $394b89	                BRA ret_success
.394b83	22 cf 4c 39	jsl $394ccf	fat32           JSL DOS_FREECLUS32              ; Find the next free cluster from FAT32
.394b87	90 05		bcc $394b8e	                BCC pass_failure                ; If there was an error, pass it up the chain
.394b89	64 0e		stz $032e	ret_success     STZ DOS_STATUS
.394b8b	28		plp		                PLP
.394b8c	38		sec		                SEC
.394b8d	6b		rtl		                RTL
.394b8e	28		plp		pass_failure    PLP
.394b8f	18		clc		                CLC
.394b90	6b		rtl		                RTL
.394b91					FDC_READ2FAT12
.394b91	8b		phb		                    PHB
.394b92	0b		phd		                    PHD
.394b93	08		php		                    PHP
.394b94	48		pha		                PHA             ; begin setdbr macro
.394b95	08		php		                PHP
.394b96	e2 20		sep #$20	                SEP #$20        ; set A short
.394b98	a9 00		lda #$00	                LDA #0
.394b9a	48		pha		                PHA
.394b9b	ab		plb		                PLB
.394b9c	28		plp		                PLP
.394b9d	68		pla		                PLA             ; end setdbr macro
.394b9e	48		pha		                PHA             ; begin setdp macro
.394b9f	08		php		                PHP
.394ba0	c2 20		rep #$20	                REP #$20        ; set A long
.394ba2	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394ba5	5b		tcd		                TCD
.394ba6	28		plp		                PLP
.394ba7	68		pla		                PLA             ; end setdp macro
.394ba8	c2 30		rep #$30	                REP #$30        ; set A&X long
.394baa	a9 00 a5	lda #$a500	                    LDA #<>DOS_FAT_SECTORS          ; Set the location to store the sector
.394bad	85 06		sta $0326	                    STA BIOS_BUFF_PTR
.394baf	a9 38 00	lda #$0038	                    LDA #`DOS_FAT_SECTORS
.394bb2	85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.394bb4	a5 24		lda $0344	                    LDA DOS_FAT_LBA
.394bb6	85 02		sta $0322	                    STA BIOS_LBA
.394bb8	a5 26		lda $0346	                    LDA DOS_FAT_LBA+2
.394bba	85 04		sta $0324	                    STA BIOS_LBA+2
.394bbc	22 44 10 38	jsl $381044	                    JSL GETBLOCK                    ; Read the first sector
.394bc0	b0 07		bcs $394bc9	                    BCS inc_sect2                   ; If success: start getting the second sector
.394bc2	e2 20		sep #$20	                SEP #$20        ; set A short
.394bc4	a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.394bc6	82 1c 00	brl $394be5	                    BRL ret_failure
.394bc9					inc_sect2
.394bc9	c2 20		rep #$20	                REP #$20        ; set A long
.394bcb	e6 02		inc $0322	                    INC BIOS_LBA                    ; Move to the next sector
.394bcd	d0 02		bne $394bd1	                    BNE inc_buff_ptr
.394bcf	e6 04		inc $0324	                    INC BIOS_LBA+2
.394bd1	a9 00 a7	lda #$a700	inc_buff_ptr        LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394bd4	85 06		sta $0326	                    STA BIOS_BUFF_PTR
.394bd6	a9 38 00	lda #$0038	                    LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394bd9	85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.394bdb	22 44 10 38	jsl $381044	                    JSL GETBLOCK                    ; Read the second sector
.394bdf	b0 0d		bcs $394bee	                    BCS ret_success                 ; If success, return success
.394be1	e2 20		sep #$20	                SEP #$20        ; set A short
.394be3	a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.394be5					ret_failure
.394be5	e2 20		sep #$20	                SEP #$20        ; set A short
.394be7	85 00		sta $0320	                    STA BIOS_STATUS
.394be9	28		plp		                    PLP
.394bea	2b		pld		                    PLD
.394beb	ab		plb		                    PLB
.394bec	18		clc		                    CLC
.394bed	6b		rtl		                    RTL
.394bee					ret_success
.394bee	e2 20		sep #$20	                SEP #$20        ; set A short
.394bf0	64 00		stz $0320	                    STZ BIOS_STATUS
.394bf2	28		plp		                    PLP
.394bf3	2b		pld		                    PLD
.394bf4	ab		plb		                    PLB
.394bf5	38		sec		                    SEC
.394bf6	6b		rtl		                    RTL
.394bf7					DOS_FREECLUS12
.394bf7	da		phx		                PHX
.394bf8	8b		phb		                PHB
.394bf9	0b		phd		                PHD
.394bfa	08		php		                PHP
.394bfb	48		pha		                PHA             ; begin setdbr macro
.394bfc	08		php		                PHP
.394bfd	e2 20		sep #$20	                SEP #$20        ; set A short
.394bff	a9 00		lda #$00	                LDA #0
.394c01	48		pha		                PHA
.394c02	ab		plb		                PLB
.394c03	28		plp		                PLP
.394c04	68		pla		                PLA             ; end setdbr macro
.394c05	48		pha		                PHA             ; begin setdp macro
.394c06	08		php		                PHP
.394c07	c2 20		rep #$20	                REP #$20        ; set A long
.394c09	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394c0c	5b		tcd		                TCD
.394c0d	28		plp		                PLP
.394c0e	68		pla		                PLA             ; end setdp macro
.394c0f	c2 30		rep #$30	                REP #$30        ; set A&X long
.394c11	a9 02 00	lda #$0002	                LDA #2                          ; Cluster ID is 2 to start with
.394c14	85 10		sta $0330	                STA DOS_CLUS_ID
.394c16	a9 00 00	lda #$0000	                LDA #0
.394c19	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394c1b	22 27 49 39	jsl $394927	                JSL ENTRYFORCLUS12              ; Calculate the LBA and buffer offset for the cluster
.394c1f	22 91 4b 39	jsl $394b91	                JSL FDC_READ2FAT12              ; Read the first two sectors of the FAT
.394c23	b0 07		bcs $394c2c	                BCS start_of_fat                ; If success, move X to the start of the FAT
.394c25	e2 20		sep #$20	                SEP #$20        ; set A short
.394c27	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394c29	82 99 00	brl $394cc5	                BRL ret_failure
.394c2c					start_of_fat
.394c2c	c2 30		rep #$30	                REP #$30        ; set A&X long
.394c2e	a5 10		lda $0330	chk_cluster     LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.394c30	89 01 00	bit #$0001	                BIT #1
.394c33	d0 09		bne $394c3e	                BNE is_odd
.394c35	bf 00 a5 38	lda $38a500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an even numbered cluster
.394c39	29 ff 0f	and #$0fff	                AND #$0FFF
.394c3c	80 08		bra $394c46	                BRA chk_available
.394c3e	bf 00 a5 38	lda $38a500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an odd numbered cluster
.394c42	4a		lsr a		                LSR A
.394c43	4a		lsr a		                LSR A
.394c44	4a		lsr a		                LSR A
.394c45	4a		lsr a		                LSR A
.394c46					chk_available
.394c46	85 28		sta $0348	                STA DOS_TEMP
.394c48	c9 00 00	cmp #$0000	                CMP #0                          ; Is it available?
.394c4b	f0 03		beq $394c50	                BEQ chk_found
.394c4d	82 39 00	brl $394c89	                BRL next_cluster                ; No: advance to the next cluster
.394c50	8a		txa		chk_found       TXA
.394c51	85 2a		sta $034a	                STA DOS_TEMP+2
.394c53	a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.394c55	89 01 00	bit #$0001	                BIT #1
.394c58	d0 0d		bne $394c67	                BNE is_odd2
.394c5a					is_even2
.394c5a	bf 00 a5 38	lda $38a500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, even offset case
.394c5e	09 ff 0f	ora #$0fff	                ORA #$0FFF
.394c61	9f 00 a5 38	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.394c65	80 0b		bra $394c72	                BRA write_fat
.394c67					is_odd2
.394c67	bf 00 a5 38	lda $38a500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, odd offset case
.394c6b	09 f0 ff	ora #$fff0	                ORA #$FFF0
.394c6e	9f 00 a5 38	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.394c72	22 8c 4d 39	jsl $394d8c	write_fat       JSL WRITEFAT12                  ; Write the two FAT sectors back to disk
.394c76	b0 07		bcs $394c7f	                BCS ret_success                 ; If success: return success
.394c78	e2 20		sep #$20	                SEP #$20        ; set A short
.394c7a	a9 14		lda #$14	                LDA #DOS_ERR_FATUPDATE          ; Flag an error trying to write the FAT back
.394c7c	82 46 00	brl $394cc5	                BRL ret_failure
.394c7f					ret_success
.394c7f	e2 20		sep #$20	                SEP #$20        ; set A short
.394c81	64 0e		stz $032e	                STZ DOS_STATUS
.394c83	28		plp		                PLP
.394c84	2b		pld		                PLD
.394c85	ab		plb		                PLB
.394c86	fa		plx		                PLX
.394c87	38		sec		                SEC
.394c88	6b		rtl		                RTL
.394c89					next_cluster
.394c89	e6 10		inc $0330	                INC DOS_CLUS_ID                 ; And advance the cluster ID
.394c8b	d0 02		bne $394c8f	                BNE calc_entry
.394c8d	e6 12		inc $0332	                INC DOS_CLUS_ID+2
.394c8f	22 27 49 39	jsl $394927	calc_entry      JSL ENTRYFORCLUS12              ; Calculate the LBA and offset into the buffer for the cluster
.394c93	e0 00 00	cpx #$0000	                CPX #0                          ; Did we wrap around?
.394c96	f0 03		beq $394c9b	                BEQ chk_end_of_fat
.394c98	82 93 ff	brl $394c2e	                BRL chk_cluster                 ; No: go back and check it too
.394c9b					chk_end_of_fat
.394c9b	a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Are we at the end of the FAT?
.394c9d	cf 18 a0 38	cmp $38a018	                CMP FAT2_BEGIN_LBA              ; NOTE: we use the start sector of the second FAT as our sentinel
.394ca1	d0 0f		bne $394cb2	                BNE next_2
.394ca3	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394ca5	cf 1a a0 38	cmp $38a01a	                CMP FAT2_BEGIN_LBA+2
.394ca9	d0 07		bne $394cb2	                BNE next_2                      ; No: get the next to sectors
.394cab	e2 20		sep #$20	                SEP #$20        ; set A short
.394cad	a9 12		lda #$12	                LDA #DOS_ERR_MEDIAFULL          ; Yes: return media full
.394caf	82 13 00	brl $394cc5	                BRL ret_failure
.394cb2					next_2
.394cb2	22 91 4b 39	jsl $394b91	                JSL FDC_READ2FAT12              ; Read the next two sectors of the FAT
.394cb6	90 06		bcc $394cbe	                BCC fat_fail                    ; If failed: return error
.394cb8	a2 00 00	ldx #$0000	                LDX #0                          ; If success: Start scanning at the beginning of the sectors
.394cbb	82 70 ff	brl $394c2e	                BRL chk_cluster                 ; And start checking from there
.394cbe					fat_fail
.394cbe	e2 20		sep #$20	                SEP #$20        ; set A short
.394cc0	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394cc2	82 00 00	brl $394cc5	                BRL ret_failure
.394cc5					ret_failure
.394cc5	e2 20		sep #$20	                SEP #$20        ; set A short
.394cc7	85 0e		sta $032e	                STA DOS_STATUS
.394cc9	28		plp		                PLP
.394cca	2b		pld		                PLD
.394ccb	ab		plb		                PLB
.394ccc	fa		plx		                PLX
.394ccd	18		clc		                CLC
.394cce	6b		rtl		                RTL
.394ccf					DOS_FREECLUS32
.394ccf	8b		phb		                PHB
.394cd0	0b		phd		                PHD
.394cd1	08		php		                PHP
.394cd2	48		pha		                PHA             ; begin setdbr macro
.394cd3	08		php		                PHP
.394cd4	e2 20		sep #$20	                SEP #$20        ; set A short
.394cd6	a9 00		lda #$00	                LDA #0
.394cd8	48		pha		                PHA
.394cd9	ab		plb		                PLB
.394cda	28		plp		                PLP
.394cdb	68		pla		                PLA             ; end setdbr macro
.394cdc	48		pha		                PHA             ; begin setdp macro
.394cdd	08		php		                PHP
.394cde	c2 20		rep #$20	                REP #$20        ; set A long
.394ce0	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394ce3	5b		tcd		                TCD
.394ce4	28		plp		                PLP
.394ce5	68		pla		                PLA             ; end setdp macro
.394ce6	c2 30		rep #$30	                REP #$30        ; set A&X long
.394ce8	a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR               ; Set the location to store the sector
.394ceb	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394ced	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.394cf0	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394cf2	af 14 a0 38	lda $38a014	                LDA FAT_BEGIN_LBA               ; Set the LBA to that of the first FAT sector
.394cf6	85 02		sta $0322	                STA BIOS_LBA
.394cf8	af 16 a0 38	lda $38a016	                LDA FAT_BEGIN_LBA+2
.394cfc	85 04		sta $0324	                STA BIOS_LBA+2
.394cfe	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Load the sector into memory
.394d02	b0 07		bcs $394d0b	                BCS initial_entry               ; If OK: set the initial entry to check
.394d04	e2 20		sep #$20	                SEP #$20        ; set A short
.394d06	a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Return a NOFAT error
.394d08	82 5e 00	brl $394d69	                BRL ret_failure
.394d0b					initial_entry
.394d0b	c2 20		rep #$20	                REP #$20        ; set A long
.394d0d	a9 02 00	lda #$0002	                LDA #2                          ; Set DOS_CLUS_ID to 2
.394d10	85 10		sta $0330	                STA DOS_CLUS_ID
.394d12	a9 00 00	lda #$0000	                LDA #0
.394d15	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394d17	a2 08 00	ldx #$0008	                LDX #8                          ; Set the offset to DOS_CLUS_ID * 4
.394d1a	bf 00 a3 38	lda $38a300,x	chk_entry       LDA DOS_SECTOR,X                ; Is the cluster entry == $00000000?
.394d1e	d0 06		bne $394d26	                BNE next_entry                  ; No: move to the next entry
.394d20	bf 02 a3 38	lda $38a302,x	                LDA DOS_SECTOR+2,X
.394d24	f0 29		beq $394d4f	                BEQ found_free                  ; Yes: go to allocate and return it
.394d26	e6 10		inc $0330	next_entry      INC DOS_CLUS_ID                 ; Move to the next cluster
.394d28	d0 02		bne $394d2c	                BNE inc_ptr
.394d2a	e6 12		inc $0332	                INC DOS_CLUS_ID+2
.394d2c	e8		inx		inc_ptr         INX                             ; Update the index to the entry
.394d2d	e8		inx		                INX
.394d2e	e8		inx		                INX
.394d2f	e8		inx		                INX
.394d30	e0 00 02	cpx #$0200	                CPX #DOS_SECTOR_SIZE            ; Are we outside the sector?
.394d33	90 e5		bcc $394d1a	                BLT chk_entry                   ; No: check this entry
.394d35	18		clc		                CLC                             ; Point to the next sector in the FAT
.394d36	a5 02		lda $0322	                LDA BIOS_LBA
.394d38	69 00 02	adc #$0200	                ADC #DOS_SECTOR_SIZE
.394d3b	85 02		sta $0322	                STA BIOS_LBA
.394d3d	a5 04		lda $0324	                LDA BIOS_LBA+2
.394d3f	69 00 00	adc #$0000	                ADC #0
.394d42	85 04		sta $0324	                STA BIOS_LBA+2
.394d44	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Attempt to read the block
.394d48	b0 00		bcs $394d4a	                BCS set_ptr                     ; If OK: set the pointer and check it
.394d4a	a2 00 00	ldx #$0000	set_ptr         LDX #0                          ; Set index pointer to the first entry
.394d4d	80 cb		bra $394d1a	                BRA chk_entry                   ; Check this entry
.394d4f					found_free
.394d4f	c2 20		rep #$20	                REP #$20        ; set A long
.394d51	a9 ff ff	lda #$ffff	                LDA #<>FAT_LAST_CLUSTER         ; Set the entry to $0FFFFFFF to make it the last entry in its chain
.394d54	9f 00 a3 38	sta $38a300,x	                STA DOS_SECTOR,X
.394d58	a9 ff 0f	lda #$0fff	                LDA #(FAT_LAST_CLUSTER >> 16)
.394d5b	9f 02 a3 38	sta $38a302,x	                STA DOS_SECTOR+2,X
.394d5f	22 24 10 38	jsl $381024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.394d63	b0 0d		bcs $394d72	                BCS ret_success                 ; If OK: return success
.394d65	e2 20		sep #$20	                SEP #$20        ; set A short
.394d67	a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Otherwise: return NOFAT error
.394d69					ret_failure
.394d69	e2 20		sep #$20	                SEP #$20        ; set A short
.394d6b	85 0e		sta $032e	                STA DOS_STATUS
.394d6d	28		plp		                PLP
.394d6e	2b		pld		                PLD
.394d6f	ab		plb		                PLB
.394d70	18		clc		                CLC
.394d71	6b		rtl		                RTL
.394d72					ret_success
.394d72	e2 20		sep #$20	                SEP #$20        ; set A short
.394d74	64 0e		stz $032e	                STZ DOS_STATUS
.394d76	28		plp		                PLP
.394d77	2b		pld		                PLD
.394d78	ab		plb		                PLB
.394d79	38		sec		                SEC
.394d7a	6b		rtl		                RTL
.394d7b					DELCLUSTER
.394d7b	e2 20		sep #$20	                SEP #$20        ; set A short
.394d7d	af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394d81	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394d83	d0 04		bne $394d89	                BNE fat32                       ; No: assume it's FAT32
.394d85	5c d3 4d 39	jmp $394dd3	fat12           JML DELCLUSTER12
.394d89	4c 21 4e	jmp $394e21	fat32           JMP DELCLUSTER32
.394d8c					WRITEFAT12
.394d8c	8b		phb		                PHB
.394d8d	0b		phd		                PHD
.394d8e	48		pha		                PHA             ; begin setdbr macro
.394d8f	08		php		                PHP
.394d90	e2 20		sep #$20	                SEP #$20        ; set A short
.394d92	a9 00		lda #$00	                LDA #0
.394d94	48		pha		                PHA
.394d95	ab		plb		                PLB
.394d96	28		plp		                PLP
.394d97	68		pla		                PLA             ; end setdbr macro
.394d98	48		pha		                PHA             ; begin setdp macro
.394d99	08		php		                PHP
.394d9a	c2 20		rep #$20	                REP #$20        ; set A long
.394d9c	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394d9f	5b		tcd		                TCD
.394da0	28		plp		                PLP
.394da1	68		pla		                PLA             ; end setdp macro
.394da2	c2 30		rep #$30	                REP #$30        ; set A&X long
.394da4	a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first FAT sector in memory
.394da7	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394da9	a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394dac	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394dae	a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Set the LBA to that of the first sector's
.394db0	85 02		sta $0322	                STA BIOS_LBA
.394db2	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394db4	85 04		sta $0324	                STA BIOS_LBA+2
.394db6	22 24 10 38	jsl $381024	                JSL PUTBLOCK                    ; Write the first sector back to the block device
.394dba	90 14		bcc $394dd0	                BCC done
.394dbc	a9 00 a7	lda #$a700	                LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394dbf	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394dc1	a9 38 00	lda #$0038	                LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394dc4	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394dc6	e6 02		inc $0322	                INC BIOS_LBA                    ; Point to the next sector in the FAT
.394dc8	d0 02		bne $394dcc	                BNE put_second
.394dca	e6 04		inc $0324	                INC BIOS_LBA+2
.394dcc	22 24 10 38	jsl $381024	put_second      JSL PUTBLOCK                    ; Write the second sector back to the block device
.394dd0	2b		pld		done            PLD
.394dd1	ab		plb		                PLB
.394dd2	6b		rtl		                RTL
.394dd3					DELCLUSTER12
.394dd3	8b		phb		                PHB
.394dd4	0b		phd		                PHD
.394dd5	08		php		                PHP
.394dd6	48		pha		                PHA             ; begin setdbr macro
.394dd7	08		php		                PHP
.394dd8	e2 20		sep #$20	                SEP #$20        ; set A short
.394dda	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394ddc	48		pha		                PHA
.394ddd	ab		plb		                PLB
.394dde	28		plp		                PLP
.394ddf	68		pla		                PLA             ; end setdbr macro
.394de0	48		pha		                PHA             ; begin setdp macro
.394de1	08		php		                PHP
.394de2	c2 20		rep #$20	                REP #$20        ; set A long
.394de4	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394de7	5b		tcd		                TCD
.394de8	28		plp		                PLP
.394de9	68		pla		                PLA             ; end setdp macro
.394dea	c2 30		rep #$30	                REP #$30        ; set A&X long
.394dec	22 9a 49 39	jsl $39499a	                JSL FATFORCLUSTER12
.394df0	8a		txa		                TXA                             ; Check to see if the index is odd or even
.394df1	89 01 00	bit #$0001	                BIT #1
.394df4	d0 08		bne $394dfe	                BNE is_odd
.394df6	bd 00 a5	lda $38a500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.394df9	29 00 f0	and #$f000	                AND #$F000                      ; Mask out the lower 12 bits
.394dfc	80 06		bra $394e04	                BRA save_update
.394dfe	bd 00 a5	lda $38a500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.394e01	29 0f 00	and #$000f	                AND #$000F                      ; Mask out the upper 12 bits
.394e04	9d 00 a5	sta $38a500,x	save_update     STA DOS_FAT_SECTORS,X           ; And write it back
.394e07	22 8c 4d 39	jsl $394d8c	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.394e0b	b0 0b		bcs $394e18	                BCS ret_success
.394e0d					ret_failure
.394e0d	e2 20		sep #$20	                SEP #$20        ; set A short
.394e0f	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394e11	85 0e		sta $032e	                STA DOS_STATUS
.394e13	28		plp		                PLP
.394e14	2b		pld		                PLD
.394e15	ab		plb		                PLB
.394e16	18		clc		                CLC
.394e17	6b		rtl		                RTL
.394e18					ret_success
.394e18	e2 20		sep #$20	                SEP #$20        ; set A short
.394e1a	64 0e		stz $032e	                STZ DOS_STATUS
.394e1c	28		plp		                PLP
.394e1d	2b		pld		                PLD
.394e1e	ab		plb		                PLB
.394e1f	38		sec		                SEC
.394e20	6b		rtl		                RTL
.394e21					DELCLUSTER32
.394e21	8b		phb		                PHB
.394e22	0b		phd		                PHD
.394e23	08		php		                PHP
.394e24	c2 30		rep #$30	                REP #$30        ; set A&X long
.394e26	48		pha		                PHA             ; begin setdbr macro
.394e27	08		php		                PHP
.394e28	e2 20		sep #$20	                SEP #$20        ; set A short
.394e2a	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394e2c	48		pha		                PHA
.394e2d	ab		plb		                PLB
.394e2e	28		plp		                PLP
.394e2f	68		pla		                PLA             ; end setdbr macro
.394e30	48		pha		                PHA             ; begin setdp macro
.394e31	08		php		                PHP
.394e32	c2 20		rep #$20	                REP #$20        ; set A long
.394e34	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394e37	5b		tcd		                TCD
.394e38	28		plp		                PLP
.394e39	68		pla		                PLA             ; end setdp macro
.394e3a	22 02 4a 39	jsl $394a02	                JSL FATFORCLUSTER32
.394e3e	a9 00 00	lda #$0000	                LDA #0
.394e41	9d 00 a5	sta $38a500,x	                STA DOS_FAT_SECTORS,X           ; Set the cluster entry to 0
.394e44	9d 02 a5	sta $38a502,x	                STA DOS_FAT_SECTORS+2,X
.394e47	22 24 10 38	jsl $381024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.394e4b	b0 0b		bcs $394e58	                BCS ret_success
.394e4d					ret_failure
.394e4d	e2 20		sep #$20	                SEP #$20        ; set A short
.394e4f	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394e51	85 0e		sta $032e	                STA DOS_STATUS
.394e53	28		plp		                PLP
.394e54	2b		pld		                PLD
.394e55	ab		plb		                PLB
.394e56	18		clc		                CLC
.394e57	6b		rtl		                RTL
.394e58					ret_success
.394e58	e2 20		sep #$20	                SEP #$20        ; set A short
.394e5a	64 0e		stz $032e	                STZ DOS_STATUS
.394e5c	28		plp		                PLP
.394e5d	2b		pld		                PLD
.394e5e	ab		plb		                PLB
.394e5f	38		sec		                SEC
.394e60	6b		rtl		                RTL
.394e61					DOS_APPENDCLUS
.394e61	8b		phb		                PHB
.394e62	0b		phd		                PHD
.394e63	08		php		                PHP
.394e64	48		pha		                PHA             ; begin setdbr macro
.394e65	08		php		                PHP
.394e66	e2 20		sep #$20	                SEP #$20        ; set A short
.394e68	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394e6a	48		pha		                PHA
.394e6b	ab		plb		                PLB
.394e6c	28		plp		                PLP
.394e6d	68		pla		                PLA             ; end setdbr macro
.394e6e	48		pha		                PHA             ; begin setdp macro
.394e6f	08		php		                PHP
.394e70	c2 20		rep #$20	                REP #$20        ; set A long
.394e72	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394e75	5b		tcd		                TCD
.394e76	28		plp		                PLP
.394e77	68		pla		                PLA             ; end setdp macro
.394e78	c2 30		rep #$30	                REP #$30        ; set A&X long
.394e7a	a5 12		lda $0332	                LDA DOS_CLUS_ID+2               ; Save the cluster number for later
.394e7c	48		pha		                PHA
.394e7d	a5 10		lda $0330	                LDA DOS_CLUS_ID
.394e7f	48		pha		                PHA
.394e80	22 66 4b 39	jsl $394b66	                JSL DOS_FREECLUS                ; Find a free cluster on the block device
.394e84	b0 09		bcs $394e8f	                BCS save_cluster                ; If we got a cluster, write the data to it
.394e86	68		pla		fail_cleanup    PLA                             ; Restore the cluster of the file
.394e87	85 10		sta $0330	                STA DOS_CLUS_ID
.394e89	68		pla		                PLA
.394e8a	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394e8c	82 7d 00	brl $394f0c	                BRL pass_failure                ; Pass the failure back up the chain
.394e8f	a5 10		lda $0330	save_cluster    LDA DOS_CLUS_ID
.394e91	8d 36 a0	sta $38a036	                STA DOS_NEW_CLUSTER
.394e94	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394e96	8d 38 a0	sta $38a038	                STA DOS_NEW_CLUSTER+2
.394e99	22 9f 46 39	jsl $39469f	                JSL DOS_PUTCLUSTER              ; Write the data to the free cluster
.394e9d	90 e7		bcc $394e86	                BCC fail_cleanup                ; If failure: clean up stack and pass the failure up
.394e9f	68		pla		                PLA                             ; Restore the cluster of the file
.394ea0	85 10		sta $0330	                STA DOS_CLUS_ID
.394ea2	68		pla		                PLA
.394ea3	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394ea5	22 6d 4a 39	jsl $394a6d	walk_loop       JSL NEXTCLUSTER                 ; Try to get the next cluster in the chain
.394ea9	b0 fa		bcs $394ea5	                BCS walk_loop                   ; If found a cluster, keep walking the chain
.394eab	e2 20		sep #$20	                SEP #$20        ; set A short
.394ead	af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394eb1	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394eb3	d0 3d		bne $394ef2	                BNE fat32                       ; No: assume it's FAT32
.394eb5					fat12
.394eb5	c2 20		rep #$20	                REP #$20        ; set A long
.394eb7	22 27 49 39	jsl $394927	                JSL ENTRYFORCLUS12              ; Make sure we have the right offset for the cluster
.394ebb	a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if the last cluster ID is even or odd
.394ebd	89 01 00	bit #$0001	                BIT #1
.394ec0	d0 11		bne $394ed3	                BNE is_odd
.394ec2	ad 36 a0	lda $38a036	is_even         LDA DOS_NEW_CLUSTER             ; Handle the even case (change the lower 12 bits)
.394ec5	29 ff 0f	and #$0fff	                AND #$0FFF
.394ec8	8d 36 a0	sta $38a036	                STA DOS_NEW_CLUSTER
.394ecb	bd 00 a5	lda $38a500,x	                LDA DOS_FAT_SECTORS,X
.394ece	29 00 f0	and #$f000	                AND #$F000
.394ed1	80 10		bra $394ee3	                BRA update_fat12
.394ed3	ad 36 a0	lda $38a036	is_odd          LDA DOS_NEW_CLUSTER             ; Handle the odd case (change the upper 12 bits)
.394ed6	0a		asl a		                ASL A
.394ed7	0a		asl a		                ASL A
.394ed8	0a		asl a		                ASL A
.394ed9	0a		asl a		                ASL A
.394eda	8d 36 a0	sta $38a036	                STA DOS_NEW_CLUSTER
.394edd	bd 00 a5	lda $38a500,x	                LDA DOS_FAT_SECTORS,X
.394ee0	29 0f 00	and #$000f	                AND #$000F
.394ee3	0d 36 a0	ora $38a036	update_fat12    ORA DOS_NEW_CLUSTER
.394ee6	9d 00 a5	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.394ee9	22 8c 4d 39	jsl $394d8c	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.394eed	b0 22		bcs $394f11	                BCS ret_success
.394eef	82 1a 00	brl $394f0c	                BRL pass_failure
.394ef2					fat32
.394ef2	c2 20		rep #$20	                REP #$20        ; set A long
.394ef4	ad 36 a0	lda $38a036	                LDA DOS_NEW_CLUSTER             ; Write the ID of the new cluster to the end of the chain
.394ef7	9d 00 a5	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.394efa	ad 38 a0	lda $38a038	                LDA DOS_NEW_CLUSTER+2
.394efd	9d 02 a5	sta $38a502,x	                STA DOS_FAT_SECTORS+2,X
.394f00	22 24 10 38	jsl $381024	                JSL PUTBLOCK                    ; Write the FAT sector back (assumes BIOS_LBA and BIOS_BUFF_PTR haven't changed)
.394f04	b0 0b		bcs $394f11	                BCS ret_success
.394f06	e2 20		sep #$20	                SEP #$20        ; set A short
.394f08	a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Problem working with the FAT
.394f0a	85 0e		sta $032e	                STA DOS_STATUS
.394f0c	28		plp		pass_failure    PLP
.394f0d	2b		pld		                PLD
.394f0e	ab		plb		                PLB
.394f0f	18		clc		                CLC
.394f10	6b		rtl		                RTL
.394f11					ret_success
.394f11	e2 20		sep #$20	                SEP #$20        ; set A short
.394f13	64 0e		stz $032e	                STZ DOS_STATUS
.394f15	28		plp		                PLP
.394f16	2b		pld		                PLD
.394f17	ab		plb		                PLB
.394f18	38		sec		                SEC
.394f19	6b		rtl		                RTL
.394f1a					BCD2BIN
.394f1a	8b		phb		                PHB
.394f1b	0b		phd		                PHD
.394f1c	08		php		                PHP
.394f1d	48		pha		                PHA             ; begin setdbr macro
.394f1e	08		php		                PHP
.394f1f	e2 20		sep #$20	                SEP #$20        ; set A short
.394f21	a9 00		lda #$00	                LDA #0
.394f23	48		pha		                PHA
.394f24	ab		plb		                PLB
.394f25	28		plp		                PLP
.394f26	68		pla		                PLA             ; end setdbr macro
.394f27	48		pha		                PHA             ; begin setdp macro
.394f28	08		php		                PHP
.394f29	c2 20		rep #$20	                REP #$20        ; set A long
.394f2b	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394f2e	5b		tcd		                TCD
.394f2f	28		plp		                PLP
.394f30	68		pla		                PLA             ; end setdp macro
.394f31	c2 30		rep #$30	                REP #$30        ; set A&X long
.394f33	85 28		sta $0348	                STA DOS_TEMP
.394f35	29 0f 00	and #$000f	                AND #$000F
.394f38	85 2a		sta $034a	                STA DOS_TEMP+2
.394f3a	a5 28		lda $0348	                LDA DOS_TEMP
.394f3c	4a		lsr a		                LSR A
.394f3d	4a		lsr a		                LSR A
.394f3e	4a		lsr a		                LSR A
.394f3f	4a		lsr a		                LSR A
.394f40	85 28		sta $0348	                STA DOS_TEMP
.394f42	29 0f 00	and #$000f	                AND #$000F
.394f45	8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.394f49	a9 0a 00	lda #$000a	                LDA #10
.394f4c	8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.394f50	af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.394f54	18		clc		                CLC
.394f55	65 2a		adc $034a	                ADC DOS_TEMP+2
.394f57	85 2a		sta $034a	                STA DOS_TEMP+2
.394f59	a5 28		lda $0348	                LDA DOS_TEMP
.394f5b	4a		lsr a		                LSR A
.394f5c	4a		lsr a		                LSR A
.394f5d	4a		lsr a		                LSR A
.394f5e	4a		lsr a		                LSR A
.394f5f	85 28		sta $0348	                STA DOS_TEMP
.394f61	29 0f 00	and #$000f	                AND #$000F
.394f64	8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.394f68	a9 64 00	lda #$0064	                LDA #100
.394f6b	8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.394f6f	af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.394f73	18		clc		                CLC
.394f74	65 2a		adc $034a	                ADC DOS_TEMP+2
.394f76	85 2a		sta $034a	                STA DOS_TEMP+2
.394f78	a5 28		lda $0348	                LDA DOS_TEMP
.394f7a	4a		lsr a		                LSR A
.394f7b	4a		lsr a		                LSR A
.394f7c	4a		lsr a		                LSR A
.394f7d	4a		lsr a		                LSR A
.394f7e	29 0f 00	and #$000f	                AND #$000F
.394f81	8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.394f85	a9 e8 03	lda #$03e8	                LDA #1000
.394f88	8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.394f8c	af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.394f90	18		clc		                CLC
.394f91	65 2a		adc $034a	                ADC DOS_TEMP+2
.394f93	28		plp		                PLP
.394f94	2b		pld		                PLD
.394f95	ab		plb		                PLB
.394f96	6b		rtl		                RTL
.394f97					DOS_RTCCREATE
.394f97	8b		phb		                PHB
.394f98	0b		phd		                PHD
.394f99	08		php		                PHP
.394f9a	48		pha		                PHA             ; begin setdbr macro
.394f9b	08		php		                PHP
.394f9c	e2 20		sep #$20	                SEP #$20        ; set A short
.394f9e	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394fa0	48		pha		                PHA
.394fa1	ab		plb		                PLB
.394fa2	28		plp		                PLP
.394fa3	68		pla		                PLA             ; end setdbr macro
.394fa4	48		pha		                PHA             ; begin setdp macro
.394fa5	08		php		                PHP
.394fa6	c2 20		rep #$20	                REP #$20        ; set A long
.394fa8	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394fab	5b		tcd		                TCD
.394fac	28		plp		                PLP
.394fad	68		pla		                PLA             ; end setdp macro
.394fae	c2 10		rep #$10	                REP #$10        ; set X long
.394fb0	e2 20		sep #$20	                SEP #$20        ; set A short
.394fb2	af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn off the updates to the clock
.394fb6	09 08		ora #$08	                ORA #%00001000
.394fb8	8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.394fbc	af 0f 08 af	lda $af080f	                LDA @l RTC_CENTURY
.394fc0	85 29		sta $0349	                STA DOS_TEMP+1
.394fc2	af 0a 08 af	lda $af080a	                LDA @l RTC_YEAR             ; Get the year
.394fc6	85 28		sta $0348	                STA DOS_TEMP
.394fc8	c2 20		rep #$20	                REP #$20        ; set A long
.394fca	a5 28		lda $0348	                LDA DOS_TEMP
.394fcc	22 1a 4f 39	jsl $394f1a	                JSL BCD2BIN                 ; Convert it to binary
.394fd0	85 28		sta $0348	                STA DOS_TEMP
.394fd2	38		sec		                SEC                         ; Year is relative to 1980
.394fd3	e9 bc 07	sbc #$07bc	                SBC #1980
.394fd6	c2 20		rep #$20	                REP #$20        ; set A long
.394fd8	0a		asl a		                ASL A
.394fd9	0a		asl a		                ASL A
.394fda	0a		asl a		                ASL A
.394fdb	0a		asl a		                ASL A
.394fdc	0a		asl a		                ASL A
.394fdd	0a		asl a		                ASL A
.394fde	0a		asl a		                ASL A
.394fdf	0a		asl a		                ASL A
.394fe0	0a		asl a		                ASL A
.394fe1	29 00 fe	and #$fe00	                AND #$FE00
.394fe4	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.394fe7	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394fe9	e2 20		sep #$20	                SEP #$20        ; set A short
.394feb	af 09 08 af	lda $af0809	                LDA @l RTC_MONTH            ; Get the month
.394fef	c2 20		rep #$20	                REP #$20        ; set A long
.394ff1	29 ff 00	and #$00ff	                AND #$00FF
.394ff4	22 1a 4f 39	jsl $394f1a	                JSL BCD2BIN                 ; Convert it to binary
.394ff8	29 ff 00	and #$00ff	                AND #$00FF                  ; Move the year to bits 15 - 9
.394ffb	0a		asl a		                ASL A
.394ffc	0a		asl a		                ASL A
.394ffd	0a		asl a		                ASL A
.394ffe	0a		asl a		                ASL A
.394fff	0a		asl a		                ASL A
.395000	29 e0 01	and #$01e0	                AND #$01E0                  ; Make sure only the month is covered
.395003	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.395006	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.395008	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39500a	e2 20		sep #$20	                SEP #$20        ; set A short
.39500c	af 06 08 af	lda $af0806	                LDA @l RTC_DAY              ; Get the day
.395010	c2 20		rep #$20	                REP #$20        ; set A long
.395012	29 ff 00	and #$00ff	                AND #$00FF
.395015	22 1a 4f 39	jsl $394f1a	                JSL BCD2BIN                 ; Convert it to binary
.395019	29 1f 00	and #$001f	                AND #$001F                  ; Make sure only the day is covered
.39501c	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.39501f	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.395021	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395023	e2 20		sep #$20	                SEP #$20        ; set A short
.395025	af 04 08 af	lda $af0804	                LDA @l RTC_HRS              ; Get the hour
.395029	29 1f		and #$1f	                AND #$1F                    ; Trim AM/PM bit
.39502b	c2 20		rep #$20	                REP #$20        ; set A long
.39502d	29 ff 00	and #$00ff	                AND #$00FF
.395030	22 1a 4f 39	jsl $394f1a	                JSL BCD2BIN                 ; Convert it to binary
.395034	c2 20		rep #$20	                REP #$20        ; set A long
.395036	0a		asl a		                ASL A
.395037	0a		asl a		                ASL A
.395038	0a		asl a		                ASL A
.395039	0a		asl a		                ASL A
.39503a	0a		asl a		                ASL A
.39503b	0a		asl a		                ASL A
.39503c	0a		asl a		                ASL A
.39503d	0a		asl a		                ASL A
.39503e	0a		asl a		                ASL A
.39503f	0a		asl a		                ASL A
.395040	0a		asl a		                ASL A
.395041	29 00 f8	and #$f800	                AND #$F800
.395044	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.395047	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395049	e2 20		sep #$20	                SEP #$20        ; set A short
.39504b	af 02 08 af	lda $af0802	                LDA @l RTC_MIN              ; Get the minute
.39504f	c2 20		rep #$20	                REP #$20        ; set A long
.395051	29 ff 00	and #$00ff	                AND #$00FF
.395054	22 1a 4f 39	jsl $394f1a	                JSL BCD2BIN                 ; Convert it to binary
.395058	c2 20		rep #$20	                REP #$20        ; set A long
.39505a	0a		asl a		                ASL A
.39505b	0a		asl a		                ASL A
.39505c	0a		asl a		                ASL A
.39505d	0a		asl a		                ASL A
.39505e	0a		asl a		                ASL A
.39505f	29 e0 07	and #$07e0	                AND #$07E0
.395062	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.395065	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.395067	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395069	e2 20		sep #$20	                SEP #$20        ; set A short
.39506b	af 00 08 af	lda $af0800	                LDA @l RTC_SEC              ; Get the second
.39506f	c2 20		rep #$20	                REP #$20        ; set A long
.395071	29 ff 00	and #$00ff	                AND #$00FF
.395074	22 1a 4f 39	jsl $394f1a	                JSL BCD2BIN                 ; Convert it to binary
.395078	c2 20		rep #$20	                REP #$20        ; set A long
.39507a	29 1f 00	and #$001f	                AND #$001F
.39507d	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.395080	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.395082	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395084	af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn on the updates again
.395088	29 f7 00	and #$00f7	                AND #%11110111
.39508b	8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.39508f	28		plp		                PLP
.395090	2b		pld		                PLD
.395091	ab		plb		                PLB
.395092	6b		rtl		                RTL
.395093					DOS_CREATE
.395093	8b		phb		                PHB
.395094	0b		phd		                PHD
.395095	08		php		                PHP
.395096	48		pha		                PHA             ; begin setdbr macro
.395097	08		php		                PHP
.395098	e2 20		sep #$20	                SEP #$20        ; set A short
.39509a	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39509c	48		pha		                PHA
.39509d	ab		plb		                PLB
.39509e	28		plp		                PLP
.39509f	68		pla		                PLA             ; end setdbr macro
.3950a0	48		pha		                PHA             ; begin setdp macro
.3950a1	08		php		                PHP
.3950a2	c2 20		rep #$20	                REP #$20        ; set A long
.3950a4	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3950a7	5b		tcd		                TCD
.3950a8	28		plp		                PLP
.3950a9	68		pla		                PLA             ; end setdp macro
.3950aa	c2 30		rep #$30	                REP #$30        ; set A&X long
.3950ac	a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; DOS_TEMP := DOS_FD_PTR->PATH
.3950af	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3950b1	85 28		sta $0348	                STA DOS_TEMP
.3950b3	c8		iny		                INY
.3950b4	c8		iny		                INY
.3950b5	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3950b7	85 2a		sta $034a	                STA DOS_TEMP+2
.3950b9	e2 20		sep #$20	                SEP #$20        ; set A short
.3950bb	a0 00 00	ldy #$0000	                LDY #0
.3950be	a2 00 00	ldx #$0000	                LDX #0
.3950c1	b7 28		lda [$0348],y	path_loop       LDA [DOS_TEMP],Y                ; Get a byte of the path
.3950c3	95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X             ; ... save it to the path buffer
.3950c5	f0 04		beq $3950cb	                BEQ find_file                   ; If it's NULL, we're done
.3950c7	e8		inx		                INX
.3950c8	c8		iny		                INY
.3950c9	80 f6		bra $3950c1	                BRA path_loop
.3950cb	22 b0 47 39	jsl $3947b0	find_file       JSL DOS_PARSE_PATH
.3950cf	22 48 48 39	jsl $394848	                JSL DOS_FINDFILE
.3950d3	90 07		bcc $3950dc	                BCC set_device
.3950d5	e2 20		sep #$20	                SEP #$20        ; set A short
.3950d7	a9 0b		lda #$0b	                LDA #DOS_ERR_FILEEXISTS
.3950d9	82 c9 00	brl $3951a5	                BRL ret_failure
.3950dc					set_device
.3950dc	e2 20		sep #$20	                SEP #$20        ; set A short
.3950de	a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.3950e1	a5 01		lda $0321	                LDA BIOS_DEV
.3950e3	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3950e5					validate_name
.3950e5	22 66 4b 39	jsl $394b66	                JSL DOS_FREECLUS
.3950e9	b0 03		bcs $3950ee	                BCS save_data
.3950eb	82 bb 00	brl $3951a9	                BRL pass_failure
.3950ee					save_data
.3950ee	c2 20		rep #$20	                REP #$20        ; set A long
.3950f0	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER
.3950f3	a5 10		lda $0330	                LDA DOS_CLUS_ID             ; DOS_FD_PTR->FIRST_CLUSTER := DOS_CLUS_ID
.3950f5	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3950f7	c8		iny		                INY
.3950f8	c8		iny		                INY
.3950f9	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3950fb	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3950fd	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; DOS_BUFF_PTR := DOS_FD_PTR->BUFFER
.395100	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395102	85 1c		sta $033c	                STA DOS_BUFF_PTR
.395104	c8		iny		                INY
.395105	c8		iny		                INY
.395106	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395108	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.39510a	22 9f 46 39	jsl $39469f	                JSL DOS_PUTCLUSTER
.39510e	b0 00		bcs $395110	                BCS find_dir
.395110					find_dir
.395110	c2 20		rep #$20	                REP #$20        ; set A long
.395112	22 3e 42 39	jsl $39423e	                JSL DOS_DIRFINDFREE
.395116	b0 1a		bcs $395132	                BCS set_entry
.395118	c2 20		rep #$20	                REP #$20        ; set A long
.39511a	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Failed to get the directory entry...
.39511d	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y              ; DOS_CLUS_ID := DOS_FD_PTR->FIRST_CLUSTER
.39511f	85 10		sta $0330	                STA DOS_CLUS_ID
.395121	c8		iny		                INY
.395122	c8		iny		                INY
.395123	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395125	85 12		sta $0332	                STA DOS_CLUS_ID+2
.395127	22 21 4e 39	jsl $394e21	                JSL DELCLUSTER32                ; Delete the cluster
.39512b	e2 20		sep #$20	                SEP #$20        ; set A short
.39512d	a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Return that we couldn't read the directory
.39512f	82 73 00	brl $3951a5	                BRL ret_failure
.395132					set_entry
.395132	e2 20		sep #$20	                SEP #$20        ; set A short
.395134	a0 00 00	ldy #$0000	                LDY #0
.395137	a9 00		lda #$00	                LDA #0                          ; NULL
.395139	97 18		sta [$0338],y	copy_dir_loop   STA [DOS_DIR_PTR],Y             ; Save it to the directory cluster
.39513b	c8		iny		                INY
.39513c	c0 20 00	cpy #$0020	                CPY #SIZE(DIRENTRY)
.39513f	d0 f8		bne $395139	                BNE copy_dir_loop
.395141	a0 00 00	ldy #$0000	                LDY #0
.395144	b9 3a a0	lda $38a03a,y	name_loop       LDA DOS_SHORT_NAME,Y            ; Copy the name over
.395147	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395149	c8		iny		                INY
.39514a	c0 0b 00	cpy #$000b	                CPY #11
.39514d	d0 f5		bne $395144	                BNE name_loop
.39514f	c2 20		rep #$20	                REP #$20        ; set A long
.395151	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; DOS_DIR_PTR->CLUSTER_L := DOS_FD_PTR->FIRST_CLUSTER[15..0]
.395154	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395156	a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.395159	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.39515b	a0 0c 00	ldy #$000c	                LDY #FILEDESC.FIRST_CLUSTER+2   ; DOS_DIR_PTR->CLUSTER_H := DOS_FD_PTR->FIRST_CLUSTER[31..16]
.39515e	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395160	a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.395163	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395165	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE              ; DOS_DIR_PTR->SIZE := DOS_FD_PTR->SIZE
.395168	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39516a	a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE
.39516d	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.39516f	a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.395172	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395174	a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.395177	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395179	22 97 4f 39	jsl $394f97	                JSL DOS_RTCCREATE               ; Pull the creation date-time from the RTC
.39517d	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; DOS_DIR_PTR->CREATE_DATE := DOS_FD_PTR->CREATE_DATE
.395180	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395182	a0 10 00	ldy #$0010	                LDY #DIRENTRY.CREATE_DATE
.395185	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395187	a0 18 00	ldy #$0018	                LDY #DIRENTRY.MODIFIED_DATE     ; And DOS_DIR_PTR->MODIFIED_DATE
.39518a	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.39518c	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME       ; DOS_DIR_PTR->CREATE_TIME := DOS_FD_PTR->CREATE_TIME
.39518f	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395191	a0 0e 00	ldy #$000e	                LDY #DIRENTRY.CREATE_TIME
.395194	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395196	a0 16 00	ldy #$0016	                LDY #DIRENTRY.MODIFIED_TIME     ; And DOS_DIR_PTR->MODIFIED_TIME
.395199	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.39519b	c2 20		rep #$20	                REP #$20        ; set A long
.39519d	22 fc 42 39	jsl $3942fc	                JSL DOS_DIRWRITE
.3951a1	b0 0b		bcs $3951ae	                BCS ret_success
.3951a3	80 04		bra $3951a9	                BRA pass_failure
.3951a5					ret_failure
.3951a5	e2 20		sep #$20	                SEP #$20        ; set A short
.3951a7	85 0e		sta $032e	                STA DOS_STATUS
.3951a9	28		plp		pass_failure    PLP
.3951aa	2b		pld		                PLD
.3951ab	ab		plb		                PLB
.3951ac	18		clc		                CLC
.3951ad	6b		rtl		                RTL
.3951ae					ret_success
.3951ae	e2 20		sep #$20	                SEP #$20        ; set A short
.3951b0	64 0e		stz $032e	                STZ DOS_STATUS
.3951b2	28		plp		                PLP
.3951b3	2b		pld		                PLD
.3951b4	ab		plb		                PLB
.3951b5	38		sec		                SEC
.3951b6	6b		rtl		                RTL
.3951b7					DOS_COPYPATH
.3951b7	da		phx		                PHX
.3951b8	5a		phy		                PHY
.3951b9	8b		phb		                PHB
.3951ba	0b		phd		                PHD
.3951bb	08		php		                PHP
.3951bc	48		pha		                PHA             ; begin setdbr macro
.3951bd	08		php		                PHP
.3951be	e2 20		sep #$20	                SEP #$20        ; set A short
.3951c0	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3951c2	48		pha		                PHA
.3951c3	ab		plb		                PLB
.3951c4	28		plp		                PLP
.3951c5	68		pla		                PLA             ; end setdbr macro
.3951c6	48		pha		                PHA             ; begin setdp macro
.3951c7	08		php		                PHP
.3951c8	c2 20		rep #$20	                REP #$20        ; set A long
.3951ca	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3951cd	5b		tcd		                TCD
.3951ce	28		plp		                PLP
.3951cf	68		pla		                PLA             ; end setdp macro
.3951d0	c2 30		rep #$30	                REP #$30        ; set A&X long
.3951d2	a9 00 00	lda #$0000	                LDA #0                  ; Set the DOS_PATH_BUFF to all zeros
.3951d5	a2 00 00	ldx #$0000	                LDX #0
.3951d8	95 e0		sta $0400,x	clr_loop        STA DOS_PATH_BUFF,X
.3951da	e8		inx		                INX
.3951db	e8		inx		                INX
.3951dc	e0 00 01	cpx #$0100	                CPX #256
.3951df	d0 f7		bne $3951d8	                BNE clr_loop
.3951e1	a5 20		lda $0340	                LDA DOS_FD_PTR          ; Is the DOS_FD_PTR null?
.3951e3	d0 04		bne $3951e9	                BNE get_path            ; No: attempt to fetch the path
.3951e5	a5 22		lda $0342	                LDA DOS_FD_PTR+2
.3951e7	f0 27		beq $395210	                BEQ done                ; Yes: return an empty buffer
.3951e9	a0 02 00	ldy #$0002	get_path        LDY #FILEDESC.PATH      ; Get the path buffer
.3951ec	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3951ee	85 28		sta $0348	                STA DOS_TEMP
.3951f0	c8		iny		                INY
.3951f1	c8		iny		                INY
.3951f2	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3951f4	85 2a		sta $034a	                STA DOS_TEMP+2
.3951f6	a5 28		lda $0348	                LDA DOS_TEMP            ; Is the path pointer NULL?
.3951f8	d0 04		bne $3951fe	                BNE start_copy          ; No: start copying it
.3951fa	a5 2a		lda $034a	                LDA DOS_TEMP+2
.3951fc	f0 12		beq $395210	                BEQ done                ; Yes: return an empty buffer
.3951fe					start_copy
.3951fe	e2 20		sep #$20	                SEP #$20        ; set A short
.395200	a2 00 00	ldx #$0000	                LDX #0
.395203	a0 00 00	ldy #$0000	                LDY #0
.395206	b7 28		lda [$0348],y	loop            LDA [DOS_TEMP],Y
.395208	95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.39520a	f0 04		beq $395210	                BEQ done
.39520c	e8		inx		                INX
.39520d	c8		iny		                INY
.39520e	d0 f6		bne $395206	                BNE loop
.395210	28		plp		done            PLP
.395211	2b		pld		                PLD
.395212	ab		plb		                PLB
.395213	7a		ply		                PLY
.395214	fa		plx		                PLX
.395215	6b		rtl		                RTL

;******  Return to file: src\sdos.asm

.395216					DOS_TEST
.395216	8b		phb		                PHB
.395217	0b		phd		                PHD
.395218	08		php		                PHP
.395219	48		pha		                PHA             ; begin setdbr macro
.39521a	08		php		                PHP
.39521b	e2 20		sep #$20	                SEP #$20        ; set A short
.39521d	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39521f	48		pha		                PHA
.395220	ab		plb		                PLB
.395221	28		plp		                PLP
.395222	68		pla		                PLA             ; end setdbr macro
.395223	48		pha		                PHA             ; begin setdp macro
.395224	08		php		                PHP
.395225	c2 20		rep #$20	                REP #$20        ; set A long
.395227	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39522a	5b		tcd		                TCD
.39522b	28		plp		                PLP
.39522c	68		pla		                PLA             ; end setdp macro
.39522d	c2 30		rep #$30	                REP #$30        ; set A&X long
.39522f	a9 55 52	lda #$5255	                LDA #<>src_file
.395232	8f 64 03 00	sta $000364	                STA @l DOS_STR1_PTR
.395236	a9 39 00	lda #$0039	                LDA #`src_file
.395239	8f 66 03 00	sta $000366	                STA @l DOS_STR1_PTR+2
.39523d	a9 62 52	lda #$5262	                LDA #<>dst_file
.395240	8f 68 03 00	sta $000368	                STA @l DOS_STR2_PTR
.395244	a9 39 00	lda #$0039	                LDA #`dst_file
.395247	8f 6a 03 00	sta $00036a	                STA @l DOS_STR2_PTR+2
.39524b	22 e7 58 39	jsl $3958e7	                JSL IF_COPY
.39524f	b0 00		bcs $395251	                BCS done
.395251	28		plp		done            PLP
.395252	2b		pld		                PLD
.395253	ab		plb		                PLB
.395254	6b		rtl		                RTL
>395255	40 73 3a 68 65 6c 6c 6f		src_file        .null "@s:hello.bas"
>39525d	2e 62 61 73 00
>395262	40 73 3a 68 65 6c 6c 6f		dst_file        .null "@s:hello2.bas"
>39526a	32 2e 62 61 73 00
.395270					IF_OPEN
.395270	da		phx		                PHX
.395271	5a		phy		                PHY
.395272	0b		phd		                PHD
.395273	8b		phb		                PHB
.395274	08		php		                PHP
.395275	48		pha		                PHA             ; begin setdbr macro
.395276	08		php		                PHP
.395277	e2 20		sep #$20	                SEP #$20        ; set A short
.395279	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39527b	48		pha		                PHA
.39527c	ab		plb		                PLB
.39527d	28		plp		                PLP
.39527e	68		pla		                PLA             ; end setdbr macro
.39527f	48		pha		                PHA             ; begin setdp macro
.395280	08		php		                PHP
.395281	c2 20		rep #$20	                REP #$20        ; set A long
.395283	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395286	5b		tcd		                TCD
.395287	28		plp		                PLP
.395288	68		pla		                PLA             ; end setdp macro
.395289	e2 20		sep #$20	                SEP #$20        ; set A short
.39528b	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Get the status to make sure a open is ok
.39528e	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395290	89 20		bit #$20	                BIT #FD_STAT_OPEN
.395292	f0 05		beq $395299	                BEQ ok_to_open
.395294	a9 0f		lda #$0f	                LDA #DOS_ERR_OPEN               ; If already open: throw an error
.395296	82 0d 05	brl $3957a6	                BRL IF_FAILURE
.395299	22 b7 51 39	jsl $3951b7	ok_to_open      JSL DOS_COPYPATH                ; Copy the path to the path buffer
.39529d	22 48 48 39	jsl $394848	                JSL DOS_FINDFILE                ; Attempt to find the file
.3952a1	b0 03		bcs $3952a6	                BCS is_found                    ; If OK: we found the file
.3952a3	82 04 05	brl $3957aa	                BRL IF_PASSFAILURE              ; Otherwise: pass the failure up the chain
.3952a6					is_found
.3952a6	e2 20		sep #$20	                SEP #$20        ; set A short
.3952a8	a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.3952ab	a5 01		lda $0321	                LDA BIOS_DEV
.3952ad	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3952af	c2 20		rep #$20	                REP #$20        ; set A long
.3952b1	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Set the buffer point to the one provided in the file
.3952b4	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3952b6	85 1c		sta $033c	                STA DOS_BUFF_PTR
.3952b8	c8		iny		                INY
.3952b9	c8		iny		                INY
.3952ba	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3952bc	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3952be	22 62 46 39	jsl $394662	                JSL DOS_GETCLUSTER              ; Attempt to load the cluster
.3952c2	b0 03		bcs $3952c7	                BCS read_cluster
.3952c4	82 e3 04	brl $3957aa	                BRL IF_PASSFAILURE
.3952c7	a0 0a 00	ldy #$000a	read_cluster    LDY #FILEDESC.FIRST_CLUSTER     ; Set the first cluster in the file descriptor
.3952ca	a5 10		lda $0330	                LDA DOS_CLUS_ID
.3952cc	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3952ce	c8		iny		                INY
.3952cf	c8		iny		                INY
.3952d0	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3952d2	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3952d4	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Set the current cluster in the file descriptor
.3952d7	a5 10		lda $0330	                LDA DOS_CLUS_ID
.3952d9	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3952db	c8		iny		                INY
.3952dc	c8		iny		                INY
.3952dd	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3952df	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3952e1	a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE              ; Copy the filesize from the directory entry to the file descriptor
.3952e4	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3952e6	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE
.3952e9	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3952eb	a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.3952ee	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3952f0	a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.3952f3	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3952f5	e2 20		sep #$20	                SEP #$20        ; set A short
.3952f7	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Mark file as open and readable
.3952fa	a9 21		lda #$21	                LDA #FD_STAT_OPEN | FD_STAT_READ
.3952fc	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.3952fe	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395300	82 ae 04	brl $3957b1	                BRL IF_SUCCESS
.395303					IF_CREATE
.395303	da		phx		                PHX
.395304	5a		phy		                PHY
.395305	0b		phd		                PHD
.395306	8b		phb		                PHB
.395307	08		php		                PHP
.395308	48		pha		                PHA             ; begin setdbr macro
.395309	08		php		                PHP
.39530a	e2 20		sep #$20	                SEP #$20        ; set A short
.39530c	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39530e	48		pha		                PHA
.39530f	ab		plb		                PLB
.395310	28		plp		                PLP
.395311	68		pla		                PLA             ; end setdbr macro
.395312	48		pha		                PHA             ; begin setdp macro
.395313	08		php		                PHP
.395314	c2 20		rep #$20	                REP #$20        ; set A long
.395316	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395319	5b		tcd		                TCD
.39531a	28		plp		                PLP
.39531b	68		pla		                PLA             ; end setdp macro
.39531c	22 93 50 39	jsl $395093	                JSL DOS_CREATE                  ; Attempt to create the file
.395320	90 18		bcc $39533a	                BCC pass_failure                ; If it fails: pass the failure up the chain
.395322	c2 30		rep #$30	                REP #$30        ; set A&X long
.395324	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Sets the current cluster to 0 to make sure the next write appends
.395327	a9 00 00	lda #$0000	                LDA #0
.39532a	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39532c	c8		iny		                INY
.39532d	c8		iny		                INY
.39532e	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395330	e2 20		sep #$20	                SEP #$20        ; set A short
.395332	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS
.395335	a9 22		lda #$22	                LDA #FD_STAT_OPEN | FD_STAT_WRITE   ; Set the file to open and APPEND only
.395337	82 77 04	brl $3957b1	                BRL IF_SUCCESS
.39533a	82 69 04	brl $3957a6	pass_failure    BRL IF_FAILURE
.39533d					IF_CLOSE
.39533d	da		phx		                PHX
.39533e	5a		phy		                PHY
.39533f	0b		phd		                PHD
.395340	8b		phb		                PHB
.395341	08		php		                PHP
.395342	48		pha		                PHA             ; begin setdbr macro
.395343	08		php		                PHP
.395344	e2 20		sep #$20	                SEP #$20        ; set A short
.395346	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395348	48		pha		                PHA
.395349	ab		plb		                PLB
.39534a	28		plp		                PLP
.39534b	68		pla		                PLA             ; end setdbr macro
.39534c	48		pha		                PHA             ; begin setdp macro
.39534d	08		php		                PHP
.39534e	c2 20		rep #$20	                REP #$20        ; set A long
.395350	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395353	5b		tcd		                TCD
.395354	28		plp		                PLP
.395355	68		pla		                PLA             ; end setdp macro
.395356	e2 20		sep #$20	                SEP #$20        ; set A short
.395358	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Check to see if we were writing the file
.39535b	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39535d	89 02		bit #$02	                BIT #FD_STAT_WRITE
.39535f	f0 09		beq $39536a	                BEQ set_flag                    ; No, just mark it closed
.395361	22 d6 53 39	jsl $3953d6	                JSL IF_WRITE                    ; Attempt to write the cluster
.395365	b0 03		bcs $39536a	                BCS set_flag
.395367	82 40 04	brl $3957aa	                BRL IF_PASSFAILURE              ; If there was a problem, pass it up the chain
.39536a	22 9d 58 39	jsl $39589d	set_flag        JSL IF_FREEFD                   ; Free the file descriptor as well
.39536e	82 40 04	brl $3957b1	                BRL IF_SUCCESS
.395371					IF_READ
.395371	da		phx		                PHX
.395372	5a		phy		                PHY
.395373	0b		phd		                PHD
.395374	8b		phb		                PHB
.395375	08		php		                PHP
.395376	48		pha		                PHA             ; begin setdbr macro
.395377	08		php		                PHP
.395378	e2 20		sep #$20	                SEP #$20        ; set A short
.39537a	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39537c	48		pha		                PHA
.39537d	ab		plb		                PLB
.39537e	28		plp		                PLP
.39537f	68		pla		                PLA             ; end setdbr macro
.395380	48		pha		                PHA             ; begin setdp macro
.395381	08		php		                PHP
.395382	c2 20		rep #$20	                REP #$20        ; set A long
.395384	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395387	5b		tcd		                TCD
.395388	28		plp		                PLP
.395389	68		pla		                PLA             ; end setdp macro
.39538a	c2 10		rep #$10	                REP #$10        ; set X long
.39538c	e2 20		sep #$20	                SEP #$20        ; set A short
.39538e					get_dev
.39538e	e2 20		sep #$20	                SEP #$20        ; set A short
.395390	a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.395393	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395395	85 01		sta $0321	                STA BIOS_DEV
.395397	22 f6 43 39	jsl $3943f6	                JSL DOS_MOUNT                   ; Make sure the device is mounted (if needed)
.39539b	c2 20		rep #$20	                REP #$20        ; set A long
.39539d	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.3953a0	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3953a2	85 10		sta $0330	                STA DOS_CLUS_ID
.3953a4	c8		iny		                INY
.3953a5	c8		iny		                INY
.3953a6	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3953a8	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3953aa	22 6d 4a 39	jsl $394a6d	                JSL NEXTCLUSTER                 ; Find the next cluster of the file
.3953ae	90 13		bcc $3953c3	                BCC pass_failure                ; If not OK: pass the failure up the chain
.3953b0	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.3953b3	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3953b5	85 1c		sta $033c	                STA DOS_BUFF_PTR
.3953b7	c8		iny		                INY
.3953b8	c8		iny		                INY
.3953b9	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3953bb	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3953bd	22 62 46 39	jsl $394662	                JSL DOS_GETCLUSTER              ; Get the cluster
.3953c1	b0 03		bcs $3953c6	                BCS ret_success                 ; If ok: return success
.3953c3					pass_failure
.3953c3	82 e4 03	brl $3957aa	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.3953c6	a0 06 00	ldy #$0006	ret_success     LDY #FILEDESC.CLUSTER           ; Save the new cluster as the file's current cluster
.3953c9	a5 10		lda $0330	                LDA DOS_CLUS_ID
.3953cb	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3953cd	c8		iny		                INY
.3953ce	c8		iny		                INY
.3953cf	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3953d1	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3953d3	82 db 03	brl $3957b1	                BRL IF_SUCCESS
.3953d6					IF_WRITE
.3953d6	da		phx		                PHX
.3953d7	5a		phy		                PHY
.3953d8	0b		phd		                PHD
.3953d9	8b		phb		                PHB
.3953da	08		php		                PHP
.3953db	48		pha		                PHA             ; begin setdbr macro
.3953dc	08		php		                PHP
.3953dd	e2 20		sep #$20	                SEP #$20        ; set A short
.3953df	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3953e1	48		pha		                PHA
.3953e2	ab		plb		                PLB
.3953e3	28		plp		                PLP
.3953e4	68		pla		                PLA             ; end setdbr macro
.3953e5	48		pha		                PHA             ; begin setdp macro
.3953e6	08		php		                PHP
.3953e7	c2 20		rep #$20	                REP #$20        ; set A long
.3953e9	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3953ec	5b		tcd		                TCD
.3953ed	28		plp		                PLP
.3953ee	68		pla		                PLA             ; end setdp macro
.3953ef	c2 10		rep #$10	                REP #$10        ; set X long
.3953f1	e2 20		sep #$20	                SEP #$20        ; set A short
.3953f3	a0 01 00	ldy #$0001	get_dev         LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.3953f6	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3953f8	85 01		sta $0321	                STA BIOS_DEV
.3953fa	22 f6 43 39	jsl $3943f6	                JSL DOS_MOUNT                   ; Make sure the device is mounted (if needed)
.3953fe	c2 20		rep #$20	                REP #$20        ; set A long
.395400	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.395403	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395405	85 1c		sta $033c	                STA DOS_BUFF_PTR
.395407	c8		iny		                INY
.395408	c8		iny		                INY
.395409	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39540b	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.39540d	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.395410	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395412	85 10		sta $0330	                STA DOS_CLUS_ID
.395414	c8		iny		                INY
.395415	c8		iny		                INY
.395416	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395418	85 12		sta $0332	                STA DOS_CLUS_ID+2
.39541a	d0 1a		bne $395436	                BNE rewrite_cluster             ; If the cluster ID <> 0, overwrite it
.39541c	a5 10		lda $0330	                LDA DOS_CLUS_ID
.39541e	d0 16		bne $395436	                BNE rewrite_cluster
.395420	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Get the file's first cluster
.395423	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395425	85 10		sta $0330	                STA DOS_CLUS_ID
.395427	c8		iny		                INY
.395428	c8		iny		                INY
.395429	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39542b	85 12		sta $0332	                STA DOS_CLUS_ID+2
.39542d	22 61 4e 39	jsl $394e61	                JSL DOS_APPENDCLUS              ; Append the cluster
.395431	b0 0c		bcs $39543f	                BCS ret_success                 ; If OK: return success
.395433	82 74 03	brl $3957aa	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.395436	22 9f 46 39	jsl $39469f	rewrite_cluster JSL DOS_PUTCLUSTER              ; Over-write the cluster
.39543a	b0 03		bcs $39543f	                BCS ret_success                 ; If ok: return success
.39543c	82 6b 03	brl $3957aa	pass_failure    BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.39543f	82 6f 03	brl $3957b1	ret_success     BRL IF_SUCCESS
.395442					IF_DIROPEN
.395442	da		phx		                PHX
.395443	5a		phy		                PHY
.395444	0b		phd		                PHD
.395445	8b		phb		                PHB
.395446	08		php		                PHP
.395447	48		pha		                PHA             ; begin setdbr macro
.395448	08		php		                PHP
.395449	e2 20		sep #$20	                SEP #$20        ; set A short
.39544b	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39544d	48		pha		                PHA
.39544e	ab		plb		                PLB
.39544f	28		plp		                PLP
.395450	68		pla		                PLA             ; end setdbr macro
.395451	48		pha		                PHA             ; begin setdp macro
.395452	08		php		                PHP
.395453	c2 20		rep #$20	                REP #$20        ; set A long
.395455	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395458	5b		tcd		                TCD
.395459	28		plp		                PLP
.39545a	68		pla		                PLA             ; end setdp macro
.39545b	c2 30		rep #$30	                REP #$30        ; set A&X long
.39545d	22 b7 51 39	jsl $3951b7	                JSL DOS_COPYPATH            ; Copy the path from the file descriptor to the path buffer
.395461	22 b0 47 39	jsl $3947b0	                JSL DOS_PARSE_PATH          ; Parse the path
.395465	22 f6 43 39	jsl $3943f6	                JSL DOS_MOUNT               ; Make sure we've mounted the SDC.
.395469	b0 03		bcs $39546e	                BCS get_root_dir            ; If successful: get the root directory
.39546b	82 3c 03	brl $3957aa	                BRL IF_PASSFAILURE          ; Otherwise: pass the error up the chain
.39546e					get_root_dir
.39546e	c2 30		rep #$30	                REP #$30        ; set A&X long
.395470	22 e2 40 39	jsl $3940e2	                JSL DOS_DIROPEN
.395474	b0 03		bcs $395479	                BCS success
.395476	82 31 03	brl $3957aa	                BRL IF_PASSFAILURE
.395479	82 35 03	brl $3957b1	success         BRL IF_SUCCESS
.39547c					IF_DIRNEXT
.39547c	5c 7d 41 39	jmp $39417d	                JML DOS_DIRNEXT
.395480					IF_DELETE
.395480	da		phx		                PHX
.395481	5a		phy		                PHY
.395482	0b		phd		                PHD
.395483	8b		phb		                PHB
.395484	08		php		                PHP
.395485	48		pha		                PHA             ; begin setdbr macro
.395486	08		php		                PHP
.395487	e2 20		sep #$20	                SEP #$20        ; set A short
.395489	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39548b	48		pha		                PHA
.39548c	ab		plb		                PLB
.39548d	28		plp		                PLP
.39548e	68		pla		                PLA             ; end setdbr macro
.39548f	48		pha		                PHA             ; begin setdp macro
.395490	08		php		                PHP
.395491	c2 20		rep #$20	                REP #$20        ; set A long
.395493	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395496	5b		tcd		                TCD
.395497	28		plp		                PLP
.395498	68		pla		                PLA             ; end setdp macro
.395499	c2 30		rep #$30	                REP #$30        ; set A&X long
.39549b	22 48 48 39	jsl $394848	                JSL DOS_FINDFILE
.39549f	b0 03		bcs $3954a4	                BCS get_first_clus
.3954a1	82 06 03	brl $3957aa	                BRL IF_PASSFAILURE
.3954a4					get_first_clus
.3954a4	a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.3954a7	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3954a9	85 10		sta $0330	                STA DOS_CLUS_ID
.3954ab	a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.3954ae	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3954b0	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3954b2	a5 10		lda $0330	                LDA DOS_CLUS_ID
.3954b4	8d 2a a0	sta $38a02a	                STA DOS_CURR_CLUS
.3954b7	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3954b9	8d 2c a0	sta $38a02c	                STA DOS_CURR_CLUS+2
.3954bc	22 6d 4a 39	jsl $394a6d	del_loop        JSL NEXTCLUSTER
.3954c0	90 2f		bcc $3954f1	                BCC del_one
.3954c2	a5 10		lda $0330	                LDA DOS_CLUS_ID
.3954c4	8d 2e a0	sta $38a02e	                STA DOS_NEXT_CLUS
.3954c7	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3954c9	8d 30 a0	sta $38a030	                STA DOS_NEXT_CLUS+2
.3954cc	ad 2a a0	lda $38a02a	                LDA DOS_CURR_CLUS
.3954cf	85 10		sta $0330	                STA DOS_CLUS_ID
.3954d1	ad 2c a0	lda $38a02c	                LDA DOS_CURR_CLUS+2
.3954d4	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3954d6	22 21 4e 39	jsl $394e21	                JSL DELCLUSTER32
.3954da	b0 03		bcs $3954df	                BCS go_next
.3954dc	82 cb 02	brl $3957aa	                BRL IF_PASSFAILURE
.3954df					go_next
.3954df	ad 2e a0	lda $38a02e	                LDA DOS_NEXT_CLUS
.3954e2	85 10		sta $0330	                STA DOS_CLUS_ID
.3954e4	8d 2a a0	sta $38a02a	                STA DOS_CURR_CLUS
.3954e7	ad 30 a0	lda $38a030	                LDA DOS_NEXT_CLUS+2
.3954ea	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3954ec	8d 2c a0	sta $38a02c	                STA DOS_CURR_CLUS+2
.3954ef	80 cb		bra $3954bc	                BRA del_loop
.3954f1					del_one
.3954f1	ad 2a a0	lda $38a02a	                LDA DOS_CURR_CLUS
.3954f4	85 10		sta $0330	                STA DOS_CLUS_ID
.3954f6	ad 2c a0	lda $38a02c	                LDA DOS_CURR_CLUS+2
.3954f9	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3954fb	22 7b 4d 39	jsl $394d7b	                JSL DELCLUSTER
.3954ff	b0 03		bcs $395504	                BCS free_dir_entry
.395501	82 a6 02	brl $3957aa	                BRL IF_PASSFAILURE
.395504					free_dir_entry
.395504	e2 20		sep #$20	                SEP #$20        ; set A short
.395506	a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME         ; Flag the directory entry as deleted
.395509	a9 e5		lda #$e5	                LDA #DOS_DIR_ENT_UNUSED
.39550b	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.39550d	22 fc 42 39	jsl $3942fc	                JSL DOS_DIRWRITE                ; Write the directory entry back
.395511	b0 03		bcs $395516	                BCS ret_success
.395513	82 94 02	brl $3957aa	                BRL IF_PASSFAILURE
.395516	82 98 02	brl $3957b1	ret_success     BRL IF_SUCCESS
.395519					IF_DIRREAD
.395519	da		phx		                PHX
.39551a	5a		phy		                PHY
.39551b	0b		phd		                PHD
.39551c	8b		phb		                PHB
.39551d	08		php		                PHP
.39551e	48		pha		                PHA             ; begin setdbr macro
.39551f	08		php		                PHP
.395520	e2 20		sep #$20	                SEP #$20        ; set A short
.395522	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395524	48		pha		                PHA
.395525	ab		plb		                PLB
.395526	28		plp		                PLP
.395527	68		pla		                PLA             ; end setdbr macro
.395528	48		pha		                PHA             ; begin setdp macro
.395529	08		php		                PHP
.39552a	c2 20		rep #$20	                REP #$20        ; set A long
.39552c	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39552f	5b		tcd		                TCD
.395530	28		plp		                PLP
.395531	68		pla		                PLA             ; end setdp macro
.395532	c2 30		rep #$30	                REP #$30        ; set A&X long
.395534	22 48 48 39	jsl $394848	                JSL DOS_FINDFILE
.395538	b0 03		bcs $39553d	                BCS success
.39553a	82 69 02	brl $3957a6	                BRL IF_FAILURE
.39553d	82 71 02	brl $3957b1	success         BRL IF_SUCCESS
.395540					IF_DIRWRITE
.395540	5c fc 42 39	jmp $3942fc	                JML DOS_DIRWRITE
.395544					IF_LOAD
.395544	da		phx		                PHX
.395545	5a		phy		                PHY
.395546	0b		phd		                PHD
.395547	8b		phb		                PHB
.395548	08		php		                PHP
.395549	48		pha		                PHA             ; begin setdbr macro
.39554a	08		php		                PHP
.39554b	e2 20		sep #$20	                SEP #$20        ; set A short
.39554d	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39554f	48		pha		                PHA
.395550	ab		plb		                PLB
.395551	28		plp		                PLP
.395552	68		pla		                PLA             ; end setdbr macro
.395553	48		pha		                PHA             ; begin setdp macro
.395554	08		php		                PHP
.395555	c2 20		rep #$20	                REP #$20        ; set A long
.395557	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39555a	5b		tcd		                TCD
.39555b	28		plp		                PLP
.39555c	68		pla		                PLA             ; end setdp macro
.39555d	c2 30		rep #$30	                REP #$30        ; set A&X long
.39555f	22 70 52 39	jsl $395270	                JSL IF_OPEN
.395563	b0 03		bcs $395568	                BCS setup                   ; If success: start setting things up
.395565	82 42 02	brl $3957aa	                BRL IF_PASSFAILURE          ; Otherwise: pass the failure up the chain
.395568					setup
.395568	c2 20		rep #$20	                REP #$20        ; set A long
.39556a	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE          ; Record the size of the file in DOS_FILE_SIZE
.39556d	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39556f	85 2c		sta $034c	                STA DOS_FILE_SIZE
.395571	c8		iny		                INY
.395572	c8		iny		                INY
.395573	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395575	85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.395577	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; Set up the source pointer
.39557a	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39557c	85 30		sta $0350	                STA DOS_SRC_PTR
.39557e	c8		iny		                INY
.39557f	c8		iny		                INY
.395580	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395582	85 32		sta $0352	                STA DOS_SRC_PTR+2
.395584	a5 36		lda $0356	                LDA DOS_DST_PTR+2           ; Is there a destination address in RAM?
.395586	c9 40 00	cmp #$0040	                CMP #$0040
.395589	b0 04		bcs $39558f	                BGE load_by_type            ; No: try to load it by type
.39558b	5c 59 56 39	jmp $395659	                JML IF_LOADRAW              ; Otherwise, load it to the supplied destination
.39558f	a0 08 00	ldy #$0008	load_by_type    LDY #8                      ; Point to the first extension byte
.395592	a2 00 00	ldx #$0000	                LDX #0                      ; and the first byte of the table
.395595					type_loop
.395595	e2 20		sep #$20	                SEP #$20        ; set A short
.395597	bf db 55 39	lda $3955db,x	                LDA LOAD_TYPE_TABLE,X       ; Get 1st extension character of the entry
.39559b	f0 37		beq $3955d4	                BEQ no_match                ; If NULL... we didn't get a match
.39559d	d9 3a a0	cmp $38a03a,y	                CMP DOS_SHORT_NAME,Y        ; Get the character of the extension
.3955a0	d0 28		bne $3955ca	                BNE next_entry              ; If they don't match, try the next entry
.3955a2	bf dc 55 39	lda $3955dc,x	                LDA LOAD_TYPE_TABLE+1,X     ; Get 2nd extension character of the entry
.3955a6	d9 3b a0	cmp $38a03b,y	                CMP DOS_SHORT_NAME+1,Y      ; Get the 2nd character of the extension
.3955a9	d0 1f		bne $3955ca	                BNE next_entry              ; If they don't match, try the next entry
.3955ab	bf dd 55 39	lda $3955dd,x	                LDA LOAD_TYPE_TABLE+2,X     ; Get 3rd extension character of the entry
.3955af	d9 3c a0	cmp $38a03c,y	                CMP DOS_SHORT_NAME+2,Y      ; Get the 3rd character of the extension
.3955b2	d0 16		bne $3955ca	                BNE next_entry              ; If they don't match, try the next entry
.3955b4	c2 20		rep #$20	                REP #$20        ; set A long
.3955b6	bf de 55 39	lda $3955de,x	                LDA LOAD_TYPE_TABLE+3,X     ; Get the low word of the address
.3955ba	85 28		sta $0348	                STA DOS_TEMP                ; Save it to the jump vector
.3955bc	e2 20		sep #$20	                SEP #$20        ; set A short
.3955be	bf e0 55 39	lda $3955e0,x	                LDA LOAD_TYPE_TABLE+5,X     ; Get the high byte of the address
.3955c2	85 2a		sta $034a	                STA DOS_TEMP+2              ; Save it to the jump vector
.3955c4	a2 00 00	ldx #$0000	                LDX #0
.3955c7	dc 48 03	jmp [$0348]	                JML [DOS_TEMP]              ; Jump to the loading routine
.3955ca					next_entry
.3955ca	c2 30		rep #$30	                REP #$30        ; set A&X long
.3955cc	8a		txa		                TXA
.3955cd	18		clc		                CLC
.3955ce	69 06 00	adc #$0006	                ADC #6
.3955d1	aa		tax		                TAX
.3955d2	80 c1		bra $395595	                BRA type_loop               ; And check it against the file
.3955d4					no_match
.3955d4	e2 20		sep #$20	                SEP #$20        ; set A short
.3955d6	a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC         ; Return an not-executable error
.3955d8	82 cb 01	brl $3957a6	                BRL IF_FAILURE
>3955db	50 47 58			LOAD_TYPE_TABLE .text "PGX"                 ; "PGX" --> IF_LOADPGX
>3955de	e2 55				                .word <>IF_LOADPGX
>3955e0	39				                .byte `IF_LOADPGX
>3955e1	00				                .byte 0
.3955e2					IF_LOADPGX
.3955e2	c2 10		rep #$10	                REP #$10        ; set X long
.3955e4	e2 20		sep #$20	                SEP #$20        ; set A short
.3955e6	a0 00 00	ldy #$0000	                LDY #0
.3955e9	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Check for "PGX" signature
.3955eb	c9 50		cmp #$50	                CMP #'P'
.3955ed	d0 15		bne $395604	                BNE fail_sig                        ; If not found, fail
.3955ef	c8		iny		                INY
.3955f0	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.3955f2	c9 47		cmp #$47	                CMP #'G'
.3955f4	d0 0e		bne $395604	                BNE fail_sig
.3955f6	c8		iny		                INY
.3955f7	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.3955f9	c9 58		cmp #$58	                CMP #'X'
.3955fb	d0 07		bne $395604	                BNE fail_sig
.3955fd	c8		iny		                INY                                 ; Check for CPU and version code ($01 for 65816)
.3955fe	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.395600	c9 01		cmp #$01	                CMP #$01
.395602	f0 06		beq $39560a	                BEQ get_dest                        ; All passes: go to get the destination address
.395604	a9 10		lda #$10	fail_sig        LDA #DOS_ERR_PGXSIG                 ; Fail with a PGXSIG error code
.395606	22 a6 57 39	jsl $3957a6	                JSL IF_FAILURE
.39560a					get_dest
.39560a	c2 20		rep #$20	                REP #$20        ; set A long
.39560c	c8		iny		                INY
.39560d	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get low word of destination address
.39560f	85 34		sta $0354	                STA DOS_DST_PTR                     ; And save it to the destination pointer
.395611	85 3c		sta $035c	                STA DOS_RUN_PTR                     ; And save it to the RUN pointer
.395613	c8		iny		                INY
.395614	c8		iny		                INY
.395615	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get high word of destination address
.395617	85 36		sta $0356	                STA DOS_DST_PTR+2
.395619	85 3e		sta $035e	                STA DOS_RUN_PTR+2
.39561b	c8		iny		                INY                                 ; Point to the first data byte
.39561c	c8		iny		                INY
.39561d					copy_loop
.39561d	e2 20		sep #$20	                SEP #$20        ; set A short
.39561f	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Read a byte from the file
.395621	87 34		sta [$0354]	                STA [DOS_DST_PTR]                   ; Write it to the destination
.395623	c2 20		rep #$20	                REP #$20        ; set A long
.395625	e6 34		inc $0354	                INC DOS_DST_PTR                     ; Move to the next destination location
.395627	d0 02		bne $39562b	                BNE dec_file_size
.395629	e6 34		inc $0354	                INC DOS_DST_PTR
.39562b	38		sec		dec_file_size   SEC                                 ; Count down the number of bytes to read
.39562c	a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.39562e	e9 01 00	sbc #$0001	                SBC #1
.395631	85 2c		sta $034c	                STA DOS_FILE_SIZE
.395633	a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.395635	e9 00 00	sbc #$0000	                SBC #0
.395638	85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.39563a	a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Are we at the end of the file?
.39563c	d0 04		bne $395642	                BNE next_byte
.39563e	a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.395640	f0 14		beq $395656	                BEQ done                            ; Yes: we're done
.395642	c8		iny		next_byte       INY                                 ; Otherwise, move to the next source location
.395643	cc 0e a0	cpy $38a00e	                CPY CLUSTER_SIZE                    ; Are we at the end of the cluster?
.395646	d0 d5		bne $39561d	                BNE copy_loop                       ; No: keep copying
.395648	22 51 4b 39	jsl $394b51	                JSL DOS_READNEXT                    ; Yes: Load the next cluster
.39564c	b0 03		bcs $395651	                BCS next_cluster
.39564e	82 59 01	brl $3957aa	                BRL IF_PASSFAILURE                  ; If failed: pass that up the chain
.395651	a0 00 00	ldy #$0000	next_cluster    LDY #0                              ; Reset the source index
.395654	80 c7		bra $39561d	                BRA copy_loop                       ; Go back to copying
.395656	82 58 01	brl $3957b1	done            BRL IF_SUCCESS
.395659					IF_LOADRAW
.395659	c2 30		rep #$30	                REP #$30        ; set A&X long
.39565b	a0 00 00	ldy #$0000	copy_cluster    LDY #0
.39565e					copy_loop
.39565e	e2 20		sep #$20	                SEP #$20        ; set A short
.395660	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y         ; Copy byte from cluster to destination
.395662	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395664	c2 20		rep #$20	                REP #$20        ; set A long
.395666	38		sec		                SEC                         ; Count down the number of bytes left
.395667	a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.395669	e9 01 00	sbc #$0001	                SBC #1
.39566c	85 2c		sta $034c	                STA DOS_FILE_SIZE
.39566e	a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.395670	e9 00 00	sbc #$0000	                SBC #0
.395673	85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.395675	d0 04		bne $39567b	                BNE continue
.395677	a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.395679	f0 1b		beq $395696	                BEQ close_file              ; If not: we're done
.39567b	c8		iny		continue        INY
.39567c	cc 0e a0	cpy $38a00e	                CPY CLUSTER_SIZE            ; Are we done with the cluster?
.39567f	d0 dd		bne $39565e	                BNE copy_loop               ; No: keep processing the bytes
.395681	18		clc		                CLC                         ; Advance the destination pointer to the next chunk of memory
.395682	a5 34		lda $0354	                LDA DOS_DST_PTR
.395684	6d 0e a0	adc $38a00e	                ADC CLUSTER_SIZE
.395687	85 34		sta $0354	                STA DOS_DST_PTR
.395689	a5 36		lda $0356	                LDA DOS_DST_PTR+2
.39568b	69 00 00	adc #$0000	                ADC #0
.39568e	85 36		sta $0356	                STA DOS_DST_PTR+2
.395690	22 71 53 39	jsl $395371	                JSL IF_READ                 ; Yes: load the next cluster
.395694	b0 c5		bcs $39565b	                BCS copy_cluster            ; And start copying it
.395696					close_file
.395696	82 18 01	brl $3957b1	ret_success     BRL IF_SUCCESS
.395699					IF_NULLBUFFER
.395699	5a		phy		                PHY
.39569a	8b		phb		                PHB
.39569b	0b		phd		                PHD
.39569c	08		php		                PHP
.39569d	48		pha		                PHA             ; begin setdbr macro
.39569e	08		php		                PHP
.39569f	e2 20		sep #$20	                SEP #$20        ; set A short
.3956a1	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3956a3	48		pha		                PHA
.3956a4	ab		plb		                PLB
.3956a5	28		plp		                PLP
.3956a6	68		pla		                PLA             ; end setdbr macro
.3956a7	48		pha		                PHA             ; begin setdp macro
.3956a8	08		php		                PHP
.3956a9	c2 20		rep #$20	                REP #$20        ; set A long
.3956ab	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3956ae	5b		tcd		                TCD
.3956af	28		plp		                PLP
.3956b0	68		pla		                PLA             ; end setdp macro
.3956b1	c2 30		rep #$30	                REP #$30        ; set A&X long
.3956b3	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.3956b6	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3956b8	85 28		sta $0348	                STA DOS_TEMP
.3956ba	c8		iny		                INY
.3956bb	c8		iny		                INY
.3956bc	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3956be	85 2a		sta $034a	                STA DOS_TEMP+2
.3956c0	a0 00 00	ldy #$0000	                LDY #0
.3956c3	a9 00 00	lda #$0000	                LDA #0
.3956c6	97 28		sta [$0348],y	loop            STA [DOS_TEMP],Y
.3956c8	c8		iny		                INY
.3956c9	c8		iny		                INY
.3956ca	cc 0e a0	cpy $38a00e	                CPY CLUSTER_SIZE
.3956cd	d0 f7		bne $3956c6	                BNE loop
.3956cf	28		plp		                PLP
.3956d0	2b		pld		                PLD
.3956d1	ab		plb		                PLB
.3956d2	7a		ply		                PLY
.3956d3	6b		rtl		                RTL
.3956d4					IF_COPY2BUFF
.3956d4	5a		phy		                PHY
.3956d5	8b		phb		                PHB
.3956d6	0b		phd		                PHD
.3956d7	08		php		                PHP
.3956d8	48		pha		                PHA             ; begin setdbr macro
.3956d9	08		php		                PHP
.3956da	e2 20		sep #$20	                SEP #$20        ; set A short
.3956dc	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3956de	48		pha		                PHA
.3956df	ab		plb		                PLB
.3956e0	28		plp		                PLP
.3956e1	68		pla		                PLA             ; end setdbr macro
.3956e2	48		pha		                PHA             ; begin setdp macro
.3956e3	08		php		                PHP
.3956e4	c2 20		rep #$20	                REP #$20        ; set A long
.3956e6	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3956e9	5b		tcd		                TCD
.3956ea	28		plp		                PLP
.3956eb	68		pla		                PLA             ; end setdp macro
.3956ec	c2 30		rep #$30	                REP #$30        ; set A&X long
.3956ee	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.3956f1	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3956f3	85 28		sta $0348	                STA DOS_TEMP
.3956f5	c8		iny		                INY
.3956f6	c8		iny		                INY
.3956f7	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3956f9	85 2a		sta $034a	                STA DOS_TEMP+2
.3956fb	a0 00 00	ldy #$0000	                LDY #0
.3956fe					copy_loop
.3956fe	e2 20		sep #$20	                SEP #$20        ; set A short
.395700	a7 30		lda [$0350]	                LDA [DOS_SRC_PTR]           ; Copy a byte
.395702	97 28		sta [$0348],y	                STA [DOS_TEMP],Y
.395704	c2 20		rep #$20	                REP #$20        ; set A long
.395706	c8		iny		                INY                         ; Count it
.395707	cc 0e a0	cpy $38a00e	                CPY CLUSTER_SIZE            ; Have we reached the limit?
.39570a	f0 14		beq $395720	                BEQ done                    ; Yes: we're done
.39570c	a5 30		lda $0350	                LDA DOS_SRC_PTR             ; Check if we copied the last byte
.39570e	c5 38		cmp $0358	                CMP DOS_END_PTR
.395710	d0 06		bne $395718	                BNE next_byte
.395712	a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.395714	c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.395716	f0 08		beq $395720	                BEQ done                    ; Yes: we're done
.395718	e6 30		inc $0350	next_byte       INC DOS_SRC_PTR             ; No: advance the source pointer
.39571a	d0 e2		bne $3956fe	                BNE copy_loop
.39571c	e6 32		inc $0352	                INC DOS_SRC_PTR+2
.39571e	80 de		bra $3956fe	                BRA copy_loop               ; And try this next byte
.395720	28		plp		done            PLP
.395721	2b		pld		                PLD
.395722	ab		plb		                PLB
.395723	7a		ply		                PLY
.395724	6b		rtl		                RTL
.395725					IF_SAVE
.395725	da		phx		                PHX
.395726	5a		phy		                PHY
.395727	0b		phd		                PHD
.395728	8b		phb		                PHB
.395729	08		php		                PHP
.39572a	48		pha		                PHA             ; begin setdbr macro
.39572b	08		php		                PHP
.39572c	e2 20		sep #$20	                SEP #$20        ; set A short
.39572e	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395730	48		pha		                PHA
.395731	ab		plb		                PLB
.395732	28		plp		                PLP
.395733	68		pla		                PLA             ; end setdbr macro
.395734	48		pha		                PHA             ; begin setdp macro
.395735	08		php		                PHP
.395736	c2 20		rep #$20	                REP #$20        ; set A long
.395738	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39573b	5b		tcd		                TCD
.39573c	28		plp		                PLP
.39573d	68		pla		                PLA             ; end setdp macro
.39573e	c2 30		rep #$30	                REP #$30        ; set A&X long
.395740	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE := DOS_END_PTR - DOS_SRC_PTR
.395743	38		sec		                SEC
.395744	a5 38		lda $0358	                LDA DOS_END_PTR
.395746	e5 30		sbc $0350	                SBC DOS_SRC_PTR
.395748	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39574a	c8		iny		                INY
.39574b	c8		iny		                INY
.39574c	a5 3a		lda $035a	                LDA DOS_END_PTR+2
.39574e	e5 32		sbc $0352	                SBC DOS_SRC_PTR+2
.395750	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395752	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE++
.395755	18		clc		                CLC
.395756	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395758	69 01 00	adc #$0001	                ADC #1
.39575b	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39575d	90 09		bcc $395768	                BCC first_block
.39575f	c8		iny		                INY
.395760	c8		iny		                INY
.395761	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395763	69 00 00	adc #$0000	                ADC #0
.395766	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395768	22 99 56 39	jsl $395699	first_block     JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.39576c	22 d4 56 39	jsl $3956d4	                JSL IF_COPY2BUFF        ; Copy first (at most) 512 bytes of data to FD buffer
.395770	22 03 53 39	jsl $395303	                JSL IF_CREATE           ; Create file.
.395774	b0 03		bcs $395779	                BCS check_for_end
.395776	82 31 00	brl $3957aa	                BRL IF_PASSFAILURE      ; If we couldn't create the file, pass the failure up
.395779	a5 30		lda $0350	check_for_end   LDA DOS_SRC_PTR         ; Check if we copied the last byte
.39577b	c5 38		cmp $0358	                CMP DOS_END_PTR
.39577d	d0 06		bne $395785	                BNE next_block
.39577f	a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.395781	c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.395783	f0 1d		beq $3957a2	                BEQ done                ; Yes: we're done
.395785	22 99 56 39	jsl $395699	next_block      JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.395789	22 d4 56 39	jsl $3956d4	                JSL IF_COPY2BUFF        ; Copy next (at most) 512 bytes of data to FD buffer
.39578d	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER   ; Make sure the CLUSTER is 0 to force an append
.395790	a9 00 00	lda #$0000	                LDA #0
.395793	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395795	c8		iny		                INY
.395796	c8		iny		                INY
.395797	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395799	22 d6 53 39	jsl $3953d6	                JSL IF_WRITE            ; Append to the file
.39579d	b0 da		bcs $395779	                BCS check_for_end       ; And try again
.39579f	82 08 00	brl $3957aa	                BRL IF_PASSFAILURE      ; If we couldn't update the file, pass the failure up
.3957a2	5c b1 57 39	jmp $3957b1	done            JML IF_SUCCESS
.3957a6					IF_FAILURE
.3957a6	e2 20		sep #$20	                SEP #$20        ; set A short
.3957a8	85 0e		sta $032e	                STA DOS_STATUS
.3957aa	28		plp		IF_PASSFAILURE  PLP
.3957ab	18		clc		                CLC
.3957ac	ab		plb		                PLB
.3957ad	2b		pld		                PLD
.3957ae	7a		ply		                PLY
.3957af	fa		plx		                PLX
.3957b0	6b		rtl		                RTL
.3957b1					IF_SUCCESS
.3957b1	e2 20		sep #$20	                SEP #$20        ; set A short
.3957b3	64 00		stz $0320	                STZ BIOS_STATUS
.3957b5	64 0e		stz $032e	                STZ DOS_STATUS
.3957b7	28		plp		                PLP
.3957b8	38		sec		                SEC
.3957b9	ab		plb		                PLB
.3957ba	2b		pld		                PLD
.3957bb	7a		ply		                PLY
.3957bc	fa		plx		                PLX
.3957bd	6b		rtl		                RTL
.3957be					IF_RUN
.3957be	da		phx		                PHX
.3957bf	5a		phy		                PHY
.3957c0	0b		phd		                PHD
.3957c1	8b		phb		                PHB
.3957c2	08		php		                PHP
.3957c3	48		pha		                PHA             ; begin setdbr macro
.3957c4	08		php		                PHP
.3957c5	e2 20		sep #$20	                SEP #$20        ; set A short
.3957c7	a9 00		lda #$00	                LDA #0
.3957c9	48		pha		                PHA
.3957ca	ab		plb		                PLB
.3957cb	28		plp		                PLP
.3957cc	68		pla		                PLA             ; end setdbr macro
.3957cd	48		pha		                PHA             ; begin setdp macro
.3957ce	08		php		                PHP
.3957cf	c2 20		rep #$20	                REP #$20        ; set A long
.3957d1	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3957d4	5b		tcd		                TCD
.3957d5	28		plp		                PLP
.3957d6	68		pla		                PLA             ; end setdp macro
.3957d7	e2 20		sep #$20	                SEP #$20        ; set A short
.3957d9	c2 10		rep #$10	                REP #$10        ; set X long
.3957db	a9 00		lda #$00	                LDA #0                                  ; Zero out the file descriptor
.3957dd	a2 00 00	ldx #$0000	                LDX #0
.3957e0	9f 00 ad 38	sta $38ad00,x	clr_fd_loop     STA @l DOS_SPARE_FD,X
.3957e4	e8		inx		                INX
.3957e5	e0 20 00	cpx #$0020	                CPX #SIZE(FILEDESC)
.3957e8	d0 f6		bne $3957e0	                BNE clr_fd_loop
.3957ea	c2 20		rep #$20	                REP #$20        ; set A long
.3957ec	a9 00 ab	lda #$ab00	                LDA #<>DOS_SPARE_SECTOR                 ; Set the buffer for the file descriptor
.3957ef	8f 0e ad 38	sta $38ad0e	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER
.3957f3	a9 38 00	lda #$0038	                LDA #`DOS_SPARE_SECTOR
.3957f6	8f 10 ad 38	sta $38ad10	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER+2
.3957fa	a5 40		lda $0360	                LDA DOS_RUN_PARAM                        ; Set the path for the file descriptor
.3957fc	8f 02 ad 38	sta $38ad02	                STA @l DOS_SPARE_FD+FILEDESC.PATH
.395800	a5 42		lda $0362	                LDA DOS_RUN_PARAM+2
.395802	8f 04 ad 38	sta $38ad04	                STA @l DOS_SPARE_FD+FILEDESC.PATH+2
.395806	a9 00 00	lda #$0000	                LDA #0                                  ; Clear the run pointer
.395809	85 3c		sta $035c	                STA DOS_RUN_PTR                         ; This is used to check that we loaded an executable binary
.39580b	85 3e		sta $035e	                STA DOS_RUN_PTR+2
.39580d	a9 00 ad	lda #$ad00	                LDA #<>DOS_SPARE_FD
.395810	85 20		sta $0340	                STA DOS_FD_PTR
.395812	a9 38 00	lda #$0038	                LDA #`DOS_SPARE_FD
.395815	85 22		sta $0342	                STA DOS_FD_PTR+2
.395817	a9 ff ff	lda #$ffff	                LDA #$FFFF                              ; We want to load to the address provided by the file
.39581a	8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.39581e	8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.395822	22 18 11 38	jsl $381118	                JSL F_LOAD                              ; Try to load the file
.395826	b0 14		bcs $39583c	                BCS try_execute
.395828	82 7f ff	brl $3957aa	                BRL IF_PASSFAILURE                      ; On error: pass failure up the chain
.39582b					chk_execute
.39582b	c2 20		rep #$20	                REP #$20        ; set A long
.39582d	a5 3c		lda $035c	                LDA DOS_RUN_PTR                         ; Check to see if we got a startup address back
.39582f	d0 0b		bne $39583c	                BNE try_execute                         ; If so: call it
.395831	a5 3e		lda $035e	                LDA DOS_RUN_PTR+2
.395833	d0 07		bne $39583c	                BNE try_execute
.395835	e2 20		sep #$20	                SEP #$20        ; set A short
.395837	a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC                     ; If not: return an error that it's not executable
.395839	82 6a ff	brl $3957a6	                BRL IF_FAILURE
.39583c					try_execute
.39583c	e2 20		sep #$20	                SEP #$20        ; set A short
.39583e	a9 5c		lda #$5c	                LDA #$5C                                ; Write a JML opcode
.395840	85 3b		sta $035b	                STA DOS_RUN_PTR-1
.395842	22 5b 03 00	jsl $00035b	                JSL DOS_RUN_PTR-1                       ; And call to it
.395846	82 68 ff	brl $3957b1	                BRL IF_SUCCESS                          ; Return success
.395849					IF_ALLOCFD
.395849	da		phx		                PHX
.39584a	5a		phy		                PHY
.39584b	0b		phd		                PHD
.39584c	8b		phb		                PHB
.39584d	08		php		                PHP
.39584e	48		pha		                PHA             ; begin setdbr macro
.39584f	08		php		                PHP
.395850	e2 20		sep #$20	                SEP #$20        ; set A short
.395852	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395854	48		pha		                PHA
.395855	ab		plb		                PLB
.395856	28		plp		                PLP
.395857	68		pla		                PLA             ; end setdbr macro
.395858	48		pha		                PHA             ; begin setdp macro
.395859	08		php		                PHP
.39585a	c2 20		rep #$20	                REP #$20        ; set A long
.39585c	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39585f	5b		tcd		                TCD
.395860	28		plp		                PLP
.395861	68		pla		                PLA             ; end setdp macro
.395862	c2 10		rep #$10	                REP #$10        ; set X long
.395864	a2 00 00	ldx #$0000	                LDX #0                              ; Point to the first file descriptor
.395867					chk_fd
.395867	e2 20		sep #$20	                SEP #$20        ; set A short
.395869	bd 20 ad	lda $38ad20,x	                LDA @w DOS_FILE_DESCS,X             ; Check the file descriptor's status
.39586c	89 10		bit #$10	                BIT #FD_STAT_ALLOC                  ; Is the file descriptor allocated?
.39586e	f0 14		beq $395884	                BEQ found                           ; No: flag and return the found descriptor
.395870					next_fd
.395870	c2 20		rep #$20	                REP #$20        ; set A long
.395872	8a		txa		                TXA                                 ; Yes: Move to the next file descriptor
.395873	18		clc		                CLC
.395874	69 20 00	adc #$0020	                ADC #SIZE(FILEDESC)
.395877	aa		tax		                TAX
.395878	e0 00 01	cpx #$0100	                CPX #SIZE(FILEDESC) * DOS_FD_MAX    ; Are we out of file descriptors?
.39587b	90 ea		bcc $395867	                BLT chk_fd                          ; No: check this new file descriptor
.39587d	e2 20		sep #$20	                SEP #$20        ; set A short
.39587f	a9 16		lda #$16	                LDA #DOS_ERR_NOFD                   ; Yes: Return failure (no file descriptors available)
.395881	82 22 ff	brl $3957a6	                BRL IF_FAILURE
.395884	09 10		ora #$10	found           ORA #FD_STAT_ALLOC                  ; No: Set the ALLOC bit
.395886	9d 20 ad	sta $38ad20,x	                STA @w DOS_FILE_DESCS,X             ; And store it in the file descriptor's status
.395889	c2 20		rep #$20	                REP #$20        ; set A long
.39588b	8a		txa		                TXA
.39588c	18		clc		                CLC
.39588d	69 20 ad	adc #$ad20	                ADC #<>DOS_FILE_DESCS
.395890	85 20		sta $0340	                STA @b DOS_FD_PTR
.395892	a9 38 00	lda #$0038	                LDA #`DOS_FILE_DESCS
.395895	69 00 00	adc #$0000	                ADC #0
.395898	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.39589a	82 14 ff	brl $3957b1	                BRL IF_SUCCESS                      ; Return this file descriptor
.39589d					IF_FREEFD
.39589d	da		phx		                PHX
.39589e	5a		phy		                PHY
.39589f	0b		phd		                PHD
.3958a0	8b		phb		                PHB
.3958a1	08		php		                PHP
.3958a2	48		pha		                PHA             ; begin setdbr macro
.3958a3	08		php		                PHP
.3958a4	e2 20		sep #$20	                SEP #$20        ; set A short
.3958a6	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3958a8	48		pha		                PHA
.3958a9	ab		plb		                PLB
.3958aa	28		plp		                PLP
.3958ab	68		pla		                PLA             ; end setdbr macro
.3958ac	48		pha		                PHA             ; begin setdp macro
.3958ad	08		php		                PHP
.3958ae	c2 20		rep #$20	                REP #$20        ; set A long
.3958b0	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3958b3	5b		tcd		                TCD
.3958b4	28		plp		                PLP
.3958b5	68		pla		                PLA             ; end setdp macro
.3958b6	e2 20		sep #$20	                SEP #$20        ; set A short
.3958b8	c2 10		rep #$10	                REP #$10        ; set X long
.3958ba	a9 00		lda #$00	                LDA #0
.3958bc	87 20		sta [$0340]	                STA [DOS_FD_PTR]
.3958be	82 f0 fe	brl $3957b1	                BRL IF_SUCCESS
.3958c1					DOS_SRC2DST
.3958c1	da		phx		                PHX
.3958c2	5a		phy		                PHY
.3958c3	0b		phd		                PHD
.3958c4	8b		phb		                PHB
.3958c5	08		php		                PHP
.3958c6	48		pha		                PHA             ; begin setdp macro
.3958c7	08		php		                PHP
.3958c8	c2 20		rep #$20	                REP #$20        ; set A long
.3958ca	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3958cd	5b		tcd		                TCD
.3958ce	28		plp		                PLP
.3958cf	68		pla		                PLA             ; end setdp macro
.3958d0	c2 30		rep #$30	                REP #$30        ; set A&X long
.3958d2	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.3958d5	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.3958d7	aa		tax		                TAX                                     ; X := source buffer address
.3958d8	b7 34		lda [$0354],y	                LDA [DOS_DST_PTR],Y
.3958da	a8		tay		                TAY                                     ; Y := destination buffer address
.3958db	a9 00 02	lda #$0200	                LDA #DOS_SECTOR_SIZE                    ; A := the size of the buffers
.3958de	54 38 38	mvn $38,$38	                MVN #`DOS_FILE_BUFFS,#`DOS_FILE_BUFFS   ; Copy the sector data
.3958e1	28		plp		                PLP
.3958e2	ab		plb		                PLB
.3958e3	2b		pld		                PLD
.3958e4	7a		ply		                PLY
.3958e5	fa		plx		                PLX
.3958e6	6b		rtl		                RTL
.3958e7					IF_COPY
.3958e7	da		phx		                PHX
.3958e8	5a		phy		                PHY
.3958e9	0b		phd		                PHD
.3958ea	8b		phb		                PHB
.3958eb	08		php		                PHP
.3958ec	48		pha		                PHA             ; begin setdbr macro
.3958ed	08		php		                PHP
.3958ee	e2 20		sep #$20	                SEP #$20        ; set A short
.3958f0	a9 00		lda #$00	                LDA #0
.3958f2	48		pha		                PHA
.3958f3	ab		plb		                PLB
.3958f4	28		plp		                PLP
.3958f5	68		pla		                PLA             ; end setdbr macro
.3958f6	48		pha		                PHA             ; begin setdp macro
.3958f7	08		php		                PHP
.3958f8	c2 20		rep #$20	                REP #$20        ; set A long
.3958fa	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3958fd	5b		tcd		                TCD
.3958fe	28		plp		                PLP
.3958ff	68		pla		                PLA             ; end setdp macro
.395900	22 49 58 39	jsl $395849	                JSL IF_ALLOCFD                  ; Allocate an FD for the source
.395904	b0 03		bcs $395909	                BCS set_src_path
.395906	82 a1 fe	brl $3957aa	                BRL IF_PASSFAILURE              ; If failed: pass the failure up the chain
.395909					set_src_path
.395909	c2 30		rep #$30	                REP #$30        ; set A&X long
.39590b	a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; Set the source path
.39590e	a5 44		lda $0364	                LDA @b DOS_STR1_PTR
.395910	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395912	c8		iny		                INY
.395913	c8		iny		                INY
.395914	a5 46		lda $0366	                LDA @b DOS_STR1_PTR+2
.395916	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395918					alloc_dest
.395918	c2 30		rep #$30	                REP #$30        ; set A&X long
.39591a	a5 20		lda $0340	                LDA @b DOS_FD_PTR               ; set DOS_SRC_PTR to the file descriptor pointer
.39591c	85 30		sta $0350	                STA @b DOS_SRC_PTR
.39591e	a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.395920	85 32		sta $0352	                STA @b DOS_SRC_PTR+2
.395922	22 49 58 39	jsl $395849	                JSL IF_ALLOCFD                  ; Allocate an FD for the destination
.395926	b0 0f		bcs $395937	                BCS set_paths                   ; If everything is ok... start setting the paths
.395928	a5 30		lda $0350	err_free_src_fd LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.39592a	85 20		sta $0340	                STA @b DOS_FD_PTR
.39592c	a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.39592e	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395930	22 9d 58 39	jsl $39589d	                JSL IF_FREEFD                   ; And free it
.395934	82 73 fe	brl $3957aa	                BRL IF_PASSFAILURE              ; Pass the failure up the chain
.395937					set_paths
.395937	c2 30		rep #$30	                REP #$30        ; set A&X long
.395939	a5 20		lda $0340	                LDA @b DOS_FD_PTR               ; Set DOS_DST_PTR to the file descriptor pointer for the destination
.39593b	85 34		sta $0354	                STA @b DOS_DST_PTR
.39593d	a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.39593f	85 36		sta $0356	                STA @b DOS_DST_PTR+2
.395941	a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; Set the destination path
.395944	a5 48		lda $0368	                LDA @b DOS_STR2_PTR
.395946	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395948	c8		iny		                INY
.395949	c8		iny		                INY
.39594a	a5 4a		lda $036a	                LDA @b DOS_STR2_PTR+2
.39594c	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.39594e	a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395950	85 20		sta $0340	                STA @b DOS_FD_PTR
.395952	a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395954	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395956	22 f0 10 38	jsl $3810f0	                JSL F_OPEN                      ; Try to open the file
.39595a	b0 0f		bcs $39596b	                BCS src_open                    ; If success, work with the openned file
.39595c	a5 34		lda $0354	err_free_dst_fd LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.39595e	85 20		sta $0340	                STA @b DOS_FD_PTR
.395960	a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395962	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395964	22 9d 58 39	jsl $39589d	                JSL IF_FREEFD                   ; And free it
.395968	82 bd ff	brl $395928	                BRL err_free_src_fd             ; Free the source file descriptor
.39596b	a0 12 00	ldy #$0012	src_open        LDY #FILEDESC.SIZE              ; destination file size := source file size
.39596e	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.395970	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395972	c8		iny		                INY
.395973	c8		iny		                INY
.395974	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.395976	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395978	22 c1 58 39	jsl $3958c1	                JSL DOS_SRC2DST                 ; Copy the first sector's worth of data
.39597c	a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.39597e	85 20		sta $0340	                STA @b DOS_FD_PTR
.395980	a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395982	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395984	22 f4 10 38	jsl $3810f4	                JSL F_CREATE                    ; Attempt to create the file
.395988	b0 0f		bcs $395999	                BCS read_next                   ; If sucessful, try to get the next cluster
.39598a	a5 30		lda $0350	err_src_close   LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.39598c	85 20		sta $0340	                STA @b DOS_FD_PTR
.39598e	a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395990	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395992	22 f8 10 38	jsl $3810f8	                JSL F_CLOSE                     ; Close the source file (maybe not really necessary)
.395996	82 c3 ff	brl $39595c	                BRL err_free_dst_fd             ; Free the file descriptors and return an error
.395999					read_next
.395999	a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.39599b	85 20		sta $0340	                STA @b DOS_FD_PTR
.39599d	a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.39599f	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.3959a1	22 00 11 38	jsl $381100	                JSL F_READ                      ; Attempt to read the next sector of the source
.3959a5	b0 19		bcs $3959c0	                BCS copy2dest                   ; If successful, copy the sector
.3959a7	e2 20		sep #$20	                SEP #$20        ; set A short
.3959a9	a5 0e		lda $032e	                LDA @b DOS_STATUS
.3959ab	c9 0a		cmp #$0a	                CMP #DOS_ERR_NOCLUSTER          ; Are there no more clusters in the source file?
.3959ad	f0 32		beq $3959e1	                BEQ file_copied                 ; Yes: we're done copying
.3959af					err_dest_close
.3959af	c2 20		rep #$20	                REP #$20        ; set A long
.3959b1	a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.3959b3	85 20		sta $0340	                STA @b DOS_FD_PTR
.3959b5	a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.3959b7	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.3959b9	22 f8 10 38	jsl $3810f8	                JSL F_CLOSE                     ; Attempt to close the destination
.3959bd	82 ca ff	brl $39598a	                BRL err_src_close               ; Close the source and throw an error
.3959c0					copy2dest
.3959c0	22 c1 58 39	jsl $3958c1	                JSL DOS_SRC2DST                 ; Copy the source sector to the destination sector
.3959c4	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; destination sector cluster ID := 0 to append
.3959c7	a9 00 00	lda #$0000	                LDA #0
.3959ca	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.3959cc	c8		iny		                INY
.3959cd	c8		iny		                INY
.3959ce	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.3959d0	a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.3959d2	85 20		sta $0340	                STA @b DOS_FD_PTR
.3959d4	a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.3959d6	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.3959d8	22 fc 10 38	jsl $3810fc	                JSL F_WRITE                     ; Attempt to write the destionation sector to the disk
.3959dc	90 d1		bcc $3959af	                BCC err_dest_close              ; If error: close all files and throw the error
.3959de	82 b8 ff	brl $395999	                BRL read_next                   ; Otherwise: repeat the loop
.3959e1					file_copied
.3959e1	c2 20		rep #$20	                REP #$20        ; set A long
.3959e3	a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.3959e5	85 20		sta $0340	                STA @b DOS_FD_PTR
.3959e7	a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.3959e9	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.3959eb	22 f8 10 38	jsl $3810f8	                JSL F_CLOSE                     ; Close the destination
.3959ef	a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.3959f1	85 20		sta $0340	                STA @b DOS_FD_PTR
.3959f3	a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.3959f5	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.3959f7	22 f8 10 38	jsl $3810f8	                JSL F_CLOSE                     ; Close the source
.3959fb	82 b3 fd	brl $3957b1	                BRL IF_SUCCESS

;******  Return to file: src\kernel.asm


;******  Processing file: src\uart.asm

=$af13f8				UART1_BASE = $AF13F8        ; Base address for UART 1 (COM1)
=$af12f8				UART2_BASE = $AF12F8        ; Base address for UART 2 (COM2)
=$00					UART_TRHB = $00             ; Transmit/Receive Hold Buffer
=$00					UART_DLL = UART_TRHB        ; Divisor Latch Low Byte
=$01					UART_DLH = $01              ; Divisor Latch High Byte
=$01					UART_IER = UART_DLH         ; Interupt Enable Register
=$02					UART_FCR = $02              ; FIFO Control Register
=$02					UART_IIR = UART_FCR         ; Interupt Indentification Register
=$03					UART_LCR = $03              ; Line Control Register
=$04					UART_MCR = $04              ; Modem Control REgister
=$05					UART_LSR = $05              ; Line Status Register
=$06					UART_MSR = $06              ; Modem Status Register
=$07					UART_SR = $07               ; Scratch Register
=$20					UINT_LOW_POWER = $20        ; Enable Low Power Mode (16750)
=$10					UINT_SLEEP_MODE = $10       ; Enable Sleep Mode (16750)
=$08					UINT_MODEM_STATUS = $08     ; Enable Modem Status Interrupt
=$04					UINT_LINE_STATUS = $04      ; Enable Receiver Line Status Interupt
=$02					UINT_THR_EMPTY = $02        ; Enable Transmit Holding Register Empty interrupt
=$01					UINT_DATA_AVAIL = $01       ; Enable Recieve Data Available interupt
=$80					IIR_FIFO_ENABLED = $80      ; FIFO is enabled
=$40					IIR_FIFO_NONFUNC = $40      ; FIFO is not functioning
=$20					IIR_FIFO_64BYTE = $20       ; 64 byte FIFO enabled (16750)
=$00					IIR_MODEM_STATUS = $00      ; Modem Status Interrupt
=$02					IIR_THR_EMPTY = $02         ; Transmit Holding Register Empty Interrupt
=$04					IIR_DATA_AVAIL = $04        ; Data Available Interrupt
=$06					IIR_LINE_STATUS = $06       ; Line Status Interrupt
=$0c					IIR_TIMEOUT = $0C           ; Time-out Interrupt (16550 and later)
=$01					IIR_INTERRUPT_PENDING = $01 ; Interrupt Pending Flag
=$80					LCR_DLB = $80               ; Divisor Latch Access Bit
=$60					LCR_SBE = $60               ; Set Break Enable
=$00					LCR_PARITY_NONE = $00       ; Parity: None
=$08					LCR_PARITY_ODD = $08        ; Parity: Odd
=$18					LCR_PARITY_EVEN = $18       ; Parity: Even
=$28					LCR_PARITY_MARK = $28       ; Parity: Mark
=$38					LCR_PARITY_SPACE = $38      ; Parity: Space
=$00					LCR_STOPBIT_1 = $00         ; One Stop Bit
=$04					LCR_STOPBIT_2 = $04         ; 1.5 or 2 Stop Bits
=$00					LCR_DATABITS_5 = $00        ; Data Bits: 5
=$01					LCR_DATABITS_6 = $01        ; Data Bits: 6
=$02					LCR_DATABITS_7 = $02        ; Data Bits: 7
=$03					LCR_DATABITS_8 = $03        ; Data Bits: 8
=$80					LSR_ERR_RECIEVE = $80       ; Error in Received FIFO
=$40					LSR_XMIT_DONE = $40         ; All data has been transmitted
=$20					LSR_XMIT_EMPTY = $20        ; Empty transmit holding register
=$10					LSR_BREAK_INT = $10         ; Break interrupt
=$08					LSR_ERR_FRAME = $08         ; Framing error
=$04					LSR_ERR_PARITY = $04        ; Parity error
=$02					LSR_ERR_OVERRUN = $02       ; Overrun error
=$01					LSR_DATA_AVAIL = $01        ; Data is ready in the receive buffer
=384					UART_300 = 384              ; Code for 300 bps
=96					UART_1200 = 96              ; Code for 1200 bps
=48					UART_2400 = 48              ; Code for 2400 bps
=24					UART_4800 = 24              ; Code for 4800 bps
=12					UART_9600 = 12              ; Code for 9600 bps
=6					UART_19200 = 6              ; Code for 19200 bps
=3					UART_38400 = 3              ; Code for 28400 bps
=2					UART_57600 = 2              ; Code for 57600 bps
=1					UART_115200 = 1             ; Code for 115200 bps
.3959fe					UART_SELECT
.3959fe	08		php		            PHP
.3959ff	c2 20		rep #$20	                REP #$20        ; set A long
.395a01	c9 02 00	cmp #$0002	            CMP #2
.395a04	f0 07		beq $395a0d	            BEQ is_COM2
.395a06	c2 20		rep #$20	                REP #$20        ; set A long
.395a08	a9 f8 13	lda #$13f8	            LDA #<>UART1_BASE
.395a0b	80 05		bra $395a12	            BRA setaddr
.395a0d					is_COM2
.395a0d	c2 20		rep #$20	                REP #$20        ; set A long
.395a0f	a9 f8 12	lda #$12f8	            LDA #<>UART2_BASE
.395a12	8f 00 07 00	sta $000700	setaddr     STA @lCURRUART
.395a16	e2 20		sep #$20	                SEP #$20        ; set A short
.395a18	a9 af		lda #$af	            LDA #`UART1_BASE
.395a1a	8f 02 07 00	sta $000702	            STA @lCURRUART+2
.395a1e	28		plp		            PLP
.395a1f	6b		rtl		            RTL
.395a20					UART_SETBPS
.395a20	08		php		            PHP
.395a21	0b		phd		            PHD
.395a22	48		pha		                PHA             ; begin setdp macro
.395a23	08		php		                PHP
.395a24	c2 20		rep #$20	                REP #$20        ; set A long
.395a26	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395a29	5b		tcd		                TCD
.395a2a	28		plp		                PLP
.395a2b	68		pla		                PLA             ; end setdp macro
.395a2c	c2 30		rep #$30	                REP #$30        ; set A&X long
.395a2e	48		pha		            PHA
.395a2f	e2 20		sep #$20	                SEP #$20        ; set A short
.395a31	a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Enable divisor latch
.395a34	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.395a36	09 80		ora #$80	            ORA #LCR_DLB
.395a38	97 00		sta [$0700],y	            STA [CURRUART],Y
.395a3a	c2 20		rep #$20	                REP #$20        ; set A long
.395a3c	68		pla		            PLA
.395a3d	a0 00 00	ldy #$0000	            LDY #UART_DLL
.395a40	97 00		sta [$0700],y	            STA [CURRUART],Y    ; Save the divisor to the UART
.395a42	e2 20		sep #$20	                SEP #$20        ; set A short
.395a44	a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Disable divisor latch
.395a47	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.395a49	49 80		eor #$80	            EOR #LCR_DLB
.395a4b	97 00		sta [$0700],y	            STA [CURRUART],Y
.395a4d	2b		pld		            PLD
.395a4e	28		plp		            PLP
.395a4f	6b		rtl		            RTL
.395a50					UART_SETLCR
.395a50	08		php		            PHP
.395a51	0b		phd		            PHD
.395a52	48		pha		                PHA             ; begin setdp macro
.395a53	08		php		                PHP
.395a54	c2 20		rep #$20	                REP #$20        ; set A long
.395a56	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395a59	5b		tcd		                TCD
.395a5a	28		plp		                PLP
.395a5b	68		pla		                PLA             ; end setdp macro
.395a5c	e2 20		sep #$20	                SEP #$20        ; set A short
.395a5e	c2 10		rep #$10	                REP #$10        ; set X long
.395a60	29 7f		and #$7f	            AND #$7F            ; We don't want to alter divisor latch
.395a62	a0 03 00	ldy #$0003	            LDY #UART_LCR
.395a65	97 00		sta [$0700],y	            STA [CURRUART],Y
.395a67	2b		pld		            PLD
.395a68	28		plp		            PLP
.395a69	6b		rtl		            RTL
.395a6a					UART_INIT
.395a6a	08		php		            PHP
.395a6b	0b		phd		            PHD
.395a6c	c2 30		rep #$30	                REP #$30        ; set A&X long
.395a6e	48		pha		                PHA             ; begin setdp macro
.395a6f	08		php		                PHP
.395a70	c2 20		rep #$20	                REP #$20        ; set A long
.395a72	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395a75	5b		tcd		                TCD
.395a76	28		plp		                PLP
.395a77	68		pla		                PLA             ; end setdp macro
.395a78	a9 01 00	lda #$0001	            LDA #UART_115200
.395a7b	22 20 5a 39	jsl $395a20	            JSL UART_SETBPS
.395a7f	e2 20		sep #$20	                SEP #$20        ; set A short
.395a81	a9 03		lda #$03	            LDA #LCR_PARITY_NONE | LCR_STOPBIT_1 | LCR_DATABITS_8
.395a83	22 50 5a 39	jsl $395a50	            JSL UART_SETLCR
.395a87	a9 e1		lda #$e1	            LDA #%11100001
.395a89	a0 02 00	ldy #$0002	            LDY #UART_FCR
.395a8c	97 00		sta [$0700],y	            STA [CURRUART],Y
.395a8e	2b		pld		            PLD
.395a8f	28		plp		            PLP
.395a90	6b		rtl		            RTL
.395a91					UART_HASBYT
.395a91	08		php		            PHP
.395a92	0b		phd		            PHD
.395a93	c2 30		rep #$30	                REP #$30        ; set A&X long
.395a95	48		pha		                PHA             ; begin setdp macro
.395a96	08		php		                PHP
.395a97	c2 20		rep #$20	                REP #$20        ; set A long
.395a99	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395a9c	5b		tcd		                TCD
.395a9d	28		plp		                PLP
.395a9e	68		pla		                PLA             ; end setdp macro
.395a9f	e2 20		sep #$20	                SEP #$20        ; set A short
.395aa1	a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.395aa4	b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.395aa6	29 01		and #$01	            AND #LSR_DATA_AVAIL
.395aa8	d0 04		bne $395aae	            BNE ret_true            ; If flag is set, return true
.395aaa	2b		pld		ret_false   PLD                     ; Return false
.395aab	28		plp		            PLP
.395aac	18		clc		            CLC
.395aad	6b		rtl		            RTL
.395aae	2b		pld		ret_true    PLD                     ; Return true
.395aaf	28		plp		            PLP
.395ab0	38		sec		            SEC
.395ab1	6b		rtl		            RTL
.395ab2					UART_GETC
.395ab2	08		php		            PHP
.395ab3	0b		phd		            PHD
.395ab4	c2 30		rep #$30	                REP #$30        ; set A&X long
.395ab6	48		pha		                PHA             ; begin setdp macro
.395ab7	08		php		                PHP
.395ab8	c2 20		rep #$20	                REP #$20        ; set A long
.395aba	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395abd	5b		tcd		                TCD
.395abe	28		plp		                PLP
.395abf	68		pla		                PLA             ; end setdp macro
.395ac0	e2 20		sep #$20	                SEP #$20        ; set A short
.395ac2	a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.395ac5	b7 00		lda [$0700],y	wait_getc   LDA [CURRUART],Y
.395ac7	29 01		and #$01	            AND #LSR_DATA_AVAIL
.395ac9	f0 fa		beq $395ac5	            BEQ wait_getc           ; If the flag is clear, wait
.395acb	a0 00 00	ldy #$0000	            LDY #UART_TRHB          ; Get the byte from the receive FIFO
.395ace	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.395ad0	2b		pld		            PLD
.395ad1	28		plp		            PLP
.395ad2	6b		rtl		            RTL
.395ad3					UART_PUTC
.395ad3	08		php		            PHP
.395ad4	0b		phd		            PHD
.395ad5	c2 30		rep #$30	                REP #$30        ; set A&X long
.395ad7	48		pha		                PHA             ; begin setdp macro
.395ad8	08		php		                PHP
.395ad9	c2 20		rep #$20	                REP #$20        ; set A long
.395adb	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395ade	5b		tcd		                TCD
.395adf	28		plp		                PLP
.395ae0	68		pla		                PLA             ; end setdp macro
.395ae1	e2 20		sep #$20	                SEP #$20        ; set A short
.395ae3	48		pha		            PHA                     ; Wait for the transmit FIFO to free up
.395ae4	a0 05 00	ldy #$0005	            LDY #UART_LSR
.395ae7	b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.395ae9	29 20		and #$20	            AND #LSR_XMIT_EMPTY
.395aeb	f0 fa		beq $395ae7	            BEQ wait_putc
.395aed	68		pla		            PLA
.395aee	a0 00 00	ldy #$0000	            LDY #UART_TRHB
.395af1	97 00		sta [$0700],y	            STA [CURRUART],Y
.395af3	2b		pld		            PLD
.395af4	28		plp		            PLP
.395af5	6b		rtl		            RTL
.395af6					UART_PUTS
.395af6	08		php		            PHP
.395af7	e2 20		sep #$20	                SEP #$20        ; set A short
.395af9	bd 00 00	lda $0000,x	put_loop    LDA #0,B,X
.395afc	f0 07		beq $395b05	            BEQ done
.395afe	22 d3 5a 39	jsl $395ad3	            JSL UART_PUTC
.395b02	e8		inx		            INX
.395b03	80 f4		bra $395af9	            BRA put_loop
.395b05	28		plp		done        PLP
.395b06	6b		rtl		            RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\joystick.asm

.395b07					JOYSTICK_SET_NES_MODE
.395b07	e2 20		sep #$20	                SEP #$20        ; set A short
.395b09	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395b0d	29 fb		and #$fb	          AND #~NES_SNES_JOY  ; 0 = NES (8 bit shift)
.395b0f	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395b13	6b		rtl		          RTL
.395b14					JOYSTICK_SET_SNES_MODE
.395b14	e2 20		sep #$20	                SEP #$20        ; set A short
.395b16	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395b1a	29 fb		and #$fb	          AND #~NES_SNES_JOY
.395b1c	09 04		ora #$04	          ORA #NES_SNES_JOY   ; 1 = SNES (12 Bit Shift)
.395b1e	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395b22	6b		rtl		          RTL
.395b23					JOYSTICK_ENABLE_NES_SNES_PORT0
.395b23	e2 20		sep #$20	                SEP #$20        ; set A short
.395b25	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395b29	29 fe		and #$fe	          AND #~NES_SNES_EN0
.395b2b	09 01		ora #$01	          ORA #NES_SNES_EN0
.395b2d	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395b31	6b		rtl		          RTL
.395b32					JOYSTICK_ENABLE_NES_SNES_PORT1
.395b32	e2 20		sep #$20	                SEP #$20        ; set A short
.395b34	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395b38	29 fd		and #$fd	          AND #~NES_SNES_EN1
.395b3a	09 02		ora #$02	          ORA #NES_SNES_EN1
.395b3c	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395b40	6b		rtl		          RTL
.395b41					JOYSTICK_DISABLE_NES_SNES_PORT0
.395b41	e2 20		sep #$20	                SEP #$20        ; set A short
.395b43	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395b47	29 fe		and #$fe	          AND #~NES_SNES_EN0
.395b49	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395b4d	6b		rtl		          RTL
.395b4e					JOYSTICK_DISABLE_NES_SNES_PORT1
.395b4e	e2 20		sep #$20	                SEP #$20        ; set A short
.395b50	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395b54	29 fd		and #$fd	          AND #~NES_SNES_EN1
.395b56	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395b5a	6b		rtl		          RTL
.395b5b					JOYSTICK_NES_SNES_TRIG_WITH_POLL
.395b5b	e2 20		sep #$20	                SEP #$20        ; set A short
.395b5d	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395b61	29 03		and #$03	          AND #(NES_SNES_EN0 | NES_SNES_EN1)
.395b63	c9 00		cmp #$00	          CMP #$00
.395b65	f0 14		beq $395b7b	          BEQ END_OF_JOYSTICK_POLL
.395b67	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395b6b	09 80		ora #$80	          ORA #NES_SNES_TRIG   ; Set to 1 (Will auto Clear)
.395b6d	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395b71					JOYSTICK_POLLING_ISNOTOVER
.395b71	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE ;
.395b75	29 40		and #$40	          AND #NES_SNES_DONE
.395b77	c9 40		cmp #$40	          CMP #NES_SNES_DONE
.395b79	d0 f6		bne $395b71	          BNE JOYSTICK_POLLING_ISNOTOVER
.395b7b					END_OF_JOYSTICK_POLL
.395b7b	6b		rtl		          RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\sdc_library.asm

.395b7c					SDC_TEST
.395b7c	8b		phb		                PHB
.395b7d	0b		phd		                PHD
.395b7e	08		php		                PHP
.395b7f	48		pha		                PHA             ; begin setdbr macro
.395b80	08		php		                PHP
.395b81	e2 20		sep #$20	                SEP #$20        ; set A short
.395b83	a9 00		lda #$00	                LDA #0
.395b85	48		pha		                PHA
.395b86	ab		plb		                PLB
.395b87	28		plp		                PLP
.395b88	68		pla		                PLA             ; end setdbr macro
.395b89	48		pha		                PHA             ; begin setdp macro
.395b8a	08		php		                PHP
.395b8b	c2 20		rep #$20	                REP #$20        ; set A long
.395b8d	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395b90	5b		tcd		                TCD
.395b91	28		plp		                PLP
.395b92	68		pla		                PLA             ; end setdp macro
.395b93	e2 20		sep #$20	                SEP #$20        ; set A short
.395b95	a9 f0		lda #$f0	                LDA #$F0                            ; Set white on black background
.395b97	8d 1e 00	sta $001e	                STA @w CURCOLOR
.395b9a	22 a8 10 38	jsl $3810a8	                JSL CLRSCREEN
.395b9e	22 a0 10 38	jsl $3810a0	                JSL CSRHOME
.395ba2	22 e2 5b 39	jsl $395be2	                JSL SDC_INIT                        ; Attempt to initilize the SDC interface
.395ba6	b0 03		bcs $395bab	                BCS init_ok
.395ba8	82 15 00	brl $395bc0	                BRL done
.395bab	a9 02		lda #$02	init_ok         LDA #BIOS_DEV_SD
.395bad	85 01		sta $0321	                STA BIOS_DEV
.395baf	22 f6 43 39	jsl $3943f6	                JSL DOS_MOUNT                       ; Attempt to mount the SDC
.395bb3	b0 03		bcs $395bb8	                BCS mount_ok
.395bb5	82 08 00	brl $395bc0	                BRL done
.395bb8	22 42 54 39	jsl $395442	mount_ok        JSL IF_DIROPEN
.395bbc	b0 02		bcs $395bc0	                BCS all_ok
.395bbe	80 00		bra $395bc0	                BRA done
.395bc0					all_ok
.395bc0	22 6c 10 38	jsl $38106c	done            JSL PRINTCR
.395bc4	28		plp		                PLP
.395bc5	2b		pld		                PLD
.395bc6	ab		plb		                PLB
.395bc7	6b		rtl		                RTL
.395bc8					SDC_WAITBUSY
.395bc8	08		php		                PHP
.395bc9	e2 20		sep #$20	                SEP #$20        ; set A short
.395bcb	af 04 ea af	lda $afea04	wait_xact       LDA @l SDC_TRANS_STATUS_REG         ; Wait for the transaction to complete
.395bcf	29 01		and #$01	                AND #SDC_TRANS_BUSY
.395bd1	c9 01		cmp #$01	                CMP #SDC_TRANS_BUSY
.395bd3	f0 f6		beq $395bcb	                BEQ wait_xact
.395bd5	28		plp		                PLP
.395bd6	6b		rtl		                RTL
.395bd7					SDC_RESET
.395bd7	08		php		                PHP
.395bd8	e2 20		sep #$20	                SEP #$20        ; set A short
.395bda	a9 01		lda #$01	                LDA #1
.395bdc	8f 01 ea af	sta $afea01	                STA @l SDC_CONTROL_REG
.395be0	28		plp		                PLP
.395be1	6b		rtl		                RTL
.395be2	0b		phd		SDC_INIT        PHD
.395be3	8b		phb		                PHB
.395be4	08		php		                PHP
.395be5	48		pha		                PHA             ; begin setdbr macro
.395be6	08		php		                PHP
.395be7	e2 20		sep #$20	                SEP #$20        ; set A short
.395be9	a9 00		lda #$00	                LDA #0
.395beb	48		pha		                PHA
.395bec	ab		plb		                PLB
.395bed	28		plp		                PLP
.395bee	68		pla		                PLA             ; end setdbr macro
.395bef	48		pha		                PHA             ; begin setdp macro
.395bf0	08		php		                PHP
.395bf1	c2 20		rep #$20	                REP #$20        ; set A long
.395bf3	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395bf6	5b		tcd		                TCD
.395bf7	28		plp		                PLP
.395bf8	68		pla		                PLA             ; end setdp macro
.395bf9	e2 20		sep #$20	                SEP #$20        ; set A short
.395bfb	a9 01		lda #$01	                LDA #SDC_TRANS_INIT_SD
.395bfd	8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG           ; Set Init SD
.395c01	a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.395c03	8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.395c07	22 c8 5b 39	jsl $395bc8	                JSL SDC_WAITBUSY                    ; Wait for initialization to complete
.395c0b	af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395c0f	d0 07		bne $395c18	                BNE ret_error                       ; Is there one? Process the error
.395c11	64 00		stz $0320	ret_success     STZ BIOS_STATUS
.395c13	28		plp		                PLP
.395c14	ab		plb		                PLB
.395c15	2b		pld		                PLD
.395c16	38		sec		                SEC
.395c17	6b		rtl		                RTL
.395c18	8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.395c1b	a9 8b		lda #$8b	                LDA #BIOS_ERR_NOTINIT
.395c1d	85 00		sta $0320	                STA BIOS_STATUS
.395c1f	28		plp		                PLP
.395c20	ab		plb		                PLB
.395c21	2b		pld		                PLD
.395c22	18		clc		                CLC
.395c23	6b		rtl		                RTL
.395c24					SDC_GETBLOCK
.395c24	0b		phd		                PHD
.395c25	8b		phb		                PHB
.395c26	08		php		                PHP
.395c27	48		pha		                PHA             ; begin setdbr macro
.395c28	08		php		                PHP
.395c29	e2 20		sep #$20	                SEP #$20        ; set A short
.395c2b	a9 00		lda #$00	                LDA #0
.395c2d	48		pha		                PHA
.395c2e	ab		plb		                PLB
.395c2f	28		plp		                PLP
.395c30	68		pla		                PLA             ; end setdbr macro
.395c31	48		pha		                PHA             ; begin setdp macro
.395c32	08		php		                PHP
.395c33	c2 20		rep #$20	                REP #$20        ; set A long
.395c35	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395c38	5b		tcd		                TCD
.395c39	28		plp		                PLP
.395c3a	68		pla		                PLA             ; end setdp macro
.395c3b	e2 20		sep #$20	                SEP #$20        ; set A short
.395c3d	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.395c41	09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.395c43	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395c47	a9 00		lda #$00	                LDA #0
.395c49	8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.395c4d	a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to read
.395c4f	0a		asl a		                ASL A
.395c50	8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.395c54	a5 03		lda $0323	                LDA BIOS_LBA+1
.395c56	2a		rol a		                ROL A
.395c57	8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.395c5b	a5 04		lda $0324	                LDA BIOS_LBA+2
.395c5d	2a		rol a		                ROL A
.395c5e	8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.395c62	a9 02		lda #$02	                LDA #SDC_TRANS_READ_BLK             ; Set the transaction to READ
.395c64	8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.395c68	a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.395c6a	8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.395c6e	22 c8 5b 39	jsl $395bc8	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.395c72	af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395c76	d0 36		bne $395cae	                BNE ret_error                       ; Is there one? Process the error
.395c78	e2 20		sep #$20	                SEP #$20        ; set A short
.395c7a	af 13 ea af	lda $afea13	                LDA @l SDC_RX_FIFO_DATA_CNT_LO      ; Record the number of bytes read
.395c7e	85 0a		sta $032a	                STA BIOS_FIFO_COUNT
.395c80	af 12 ea af	lda $afea12	                LDA @l SDC_RX_FIFO_DATA_CNT_HI
.395c84	85 0b		sta $032b	                STA BIOS_FIFO_COUNT+1
.395c86	c2 10		rep #$10	                REP #$10        ; set X long
.395c88	a0 00 00	ldy #$0000	                LDY #0
.395c8b	af 10 ea af	lda $afea10	loop_rd         LDA @l SDC_RX_FIFO_DATA_REG         ; Get the byte...
.395c8f	97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y               ; Save it to the buffer
.395c91	c8		iny		                INY                                 ; Advance to the next byte
.395c92	c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.395c95	d0 f4		bne $395c8b	                BNE loop_rd                         ; No: keep reading
.395c97	af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395c9b	d0 11		bne $395cae	                BNE ret_error                       ; Is there one? Process the error
.395c9d	64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.395c9f	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395ca3	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395ca5	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395ca9	28		plp		                PLP
.395caa	ab		plb		                PLB
.395cab	2b		pld		                PLD
.395cac	38		sec		                SEC
.395cad	6b		rtl		                RTL
.395cae	8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.395cb1	a9 82		lda #$82	                LDA #BIOS_ERR_READ
.395cb3	85 00		sta $0320	                STA BIOS_STATUS
.395cb5	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395cb9	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395cbb	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395cbf	28		plp		                PLP
.395cc0	ab		plb		                PLB
.395cc1	2b		pld		                PLD
.395cc2	18		clc		                CLC
.395cc3	6b		rtl		                RTL
.395cc4					SDC_PUTBLOCK
.395cc4	0b		phd		                PHD
.395cc5	8b		phb		                PHB
.395cc6	08		php		                PHP
.395cc7	48		pha		                PHA             ; begin setdbr macro
.395cc8	08		php		                PHP
.395cc9	e2 20		sep #$20	                SEP #$20        ; set A short
.395ccb	a9 00		lda #$00	                LDA #0
.395ccd	48		pha		                PHA
.395cce	ab		plb		                PLB
.395ccf	28		plp		                PLP
.395cd0	68		pla		                PLA             ; end setdbr macro
.395cd1	48		pha		                PHA             ; begin setdp macro
.395cd2	08		php		                PHP
.395cd3	c2 20		rep #$20	                REP #$20        ; set A long
.395cd5	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395cd8	5b		tcd		                TCD
.395cd9	28		plp		                PLP
.395cda	68		pla		                PLA             ; end setdp macro
.395cdb	e2 20		sep #$20	                SEP #$20        ; set A short
.395cdd	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.395ce1	09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.395ce3	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395ce7	c2 10		rep #$10	                REP #$10        ; set X long
.395ce9	a0 00 00	ldy #$0000	                LDY #0
.395cec	b7 06		lda [$0326],y	loop_wr         LDA [BIOS_BUFF_PTR],Y               ; Get the byte...
.395cee	8f 20 ea af	sta $afea20	                STA @l SDC_TX_FIFO_DATA_REG         ; Save it to the SDC
.395cf2	c8		iny		                INY                                 ; Advance to the next byte
.395cf3	c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.395cf6	d0 f4		bne $395cec	                BNE loop_wr                         ; No: keep writing
.395cf8	a9 00		lda #$00	                LDA #0
.395cfa	8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.395cfe	a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to write
.395d00	0a		asl a		                ASL A
.395d01	8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.395d05	a5 03		lda $0323	                LDA BIOS_LBA+1
.395d07	2a		rol a		                ROL A
.395d08	8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.395d0c	a5 04		lda $0324	                LDA BIOS_LBA+2
.395d0e	2a		rol a		                ROL A
.395d0f	8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.395d13	a9 03		lda #$03	                LDA #SDC_TRANS_WRITE_BLK            ; Set the transaction to WRITE
.395d15	8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.395d19	a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.395d1b	8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.395d1f	22 c8 5b 39	jsl $395bc8	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.395d23	af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395d27	d0 11		bne $395d3a	                BNE ret_error                       ; Is there one? Process the error
.395d29	64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.395d2b	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395d2f	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395d31	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395d35	28		plp		                PLP
.395d36	ab		plb		                PLB
.395d37	2b		pld		                PLD
.395d38	38		sec		                SEC
.395d39	6b		rtl		                RTL
.395d3a	8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.395d3d	a9 82		lda #$82	                LDA #BIOS_ERR_READ
.395d3f	85 00		sta $0320	                STA BIOS_STATUS
.395d41	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395d45	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395d47	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395d4b	28		plp		                PLP
.395d4c	ab		plb		                PLB
.395d4d	2b		pld		                PLD
.395d4e	18		clc		                CLC
.395d4f	6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\fdc_library.asm

=4295454				FDC_MOTOR_TIME = 4295454        ; Time to wait for the motor to come on: 300ms
=2147727				FDC_SEEK_TIME = 2147727         ; Time to wait for a seek to happen: 150ms
=900					FDC_MOTOR_ON_TIME = 60 * 15     ; Time (in SOF interrupt counts) for the motor to stay on: ~15s?
=30					FDC_WAIT_TIME = 30              ; Time (in SOF interrupt counts) to allow for a waiting loop to continue
=13					BPB_SECPERCLUS12_OFF = 13       ; Offset to sectors per cluster in a FAT12 boot sector
=17					BPB_ROOT_MAX_ENTRY12_OFF = 17   ; Offset to the maximum number of entries in the root directory in FAT12 boot sector
=22					BPB_SECPERFAT12_OFF = 22        ; Offset to sectors per FAT on a FAT12 boot sector
.395d50					FDC_TEST
.395d50	8b		phb		                    PHB
.395d51	0b		phd		                    PHD
.395d52	08		php		                    PHP
.395d53	48		pha		                PHA             ; begin setdbr macro
.395d54	08		php		                PHP
.395d55	e2 20		sep #$20	                SEP #$20        ; set A short
.395d57	a9 00		lda #$00	                LDA #0
.395d59	48		pha		                PHA
.395d5a	ab		plb		                PLB
.395d5b	28		plp		                PLP
.395d5c	68		pla		                PLA             ; end setdbr macro
.395d5d	48		pha		                PHA             ; begin setdp macro
.395d5e	08		php		                PHP
.395d5f	c2 20		rep #$20	                REP #$20        ; set A long
.395d61	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395d64	5b		tcd		                TCD
.395d65	28		plp		                PLP
.395d66	68		pla		                PLA             ; end setdp macro
.395d67	e2 20		sep #$20	                SEP #$20        ; set A short
.395d69	a9 f0		lda #$f0	                    LDA #$F0
.395d6b	8d 1e 00	sta $001e	                    STA @w CURCOLOR
.395d6e	22 39 0a 39	jsl $390a39	                    JSL ICLRSCREEN
.395d72	22 5d 08 39	jsl $39085d	                    JSL ICSRHOME
.395d76	c2 30		rep #$30	                REP #$30        ; set A&X long
.395d78	22 46 60 39	jsl $396046	                    JSL FDC_Init
.395d7c	b0 03		bcs $395d81	                    BCS init_ok
.395d7e	82 20 00	brl $395da1	                    BRL motor_off
.395d81	22 3d 67 39	jsl $39673d	init_ok             JSL FDC_CHK_MEDIA
.395d85	90 03		bcc $395d8a	                    BCC no_media
.395d87	82 03 00	brl $395d8d	                    BRL is_ok1
.395d8a					no_media
.395d8a	82 14 00	brl $395da1	                    BRL motor_off
.395d8d	22 d4 65 39	jsl $3965d4	is_ok1              JSL FDC_MOUNT
.395d91	90 03		bcc $395d96	                    BCC mount_err
.395d93	82 03 00	brl $395d99	                    BRL is_ok2
.395d96					mount_err
.395d96	82 08 00	brl $395da1	                    BRL motor_off
.395d99	22 ad 5d 39	jsl $395dad	is_ok2              JSL FDC_TEST_PUTBLOCK
.395d9d	b0 02		bcs $395da1	                    BCS all_ok
.395d9f	80 00		bra $395da1	                    BRA motor_off
.395da1					all_ok
.395da1	22 6c 10 38	jsl $38106c	motor_off           JSL PRINTCR
.395da5	22 f2 60 39	jsl $3960f2	                    JSL FDC_Motor_Off
.395da9	28		plp		                    PLP
.395daa	2b		pld		                    PLD
.395dab	ab		plb		                    PLB
.395dac	6b		rtl		                    RTL
.395dad					FDC_TEST_PUTBLOCK
.395dad	e2 20		sep #$20	                SEP #$20        ; set A short
.395daf	a9 00		lda #$00	                    LDA #0                          ; Initialize the data to write to the drive
.395db1	a2 00 00	ldx #$0000	                    LDX #0
.395db4	9f 00 00 03	sta $030000,x	init_loop           STA @l TEST_BUFFER,X
.395db8	1a		inc a		                    INC A
.395db9	e8		inx		                    INX
.395dba	e0 00 02	cpx #$0200	                    CPX #512
.395dbd	d0 f5		bne $395db4	                    BNE init_loop
.395dbf	c2 20		rep #$20	                REP #$20        ; set A long
.395dc1	a9 00 00	lda #$0000	                    LDA #<>TEST_BUFFER              ; Set BIOS_BUFF_PTR
.395dc4	8f 26 03 00	sta $000326	                    STA @l BIOS_BUFF_PTR
.395dc8	a9 03 00	lda #$0003	                    LDA #`TEST_BUFFER
.395dcb	8f 28 03 00	sta $000328	                    STA @l BIOS_BUFF_PTR+2
.395dcf	a9 64 00	lda #$0064	                    LDA #100                        ; Set LBA = 100
.395dd2	8f 22 03 00	sta $000322	                    STA @l BIOS_LBA
.395dd6	a9 00 00	lda #$0000	                    LDA #0
.395dd9	8f 24 03 00	sta $000324	                    STA @l BIOS_LBA+2
.395ddd	22 68 65 39	jsl $396568	                    JSL FDC_PUTBLOCK                ; Try to write the data
.395de1	6b		rtl		                    RTL
>395de2	40 46 3a 53 41 4d 50 4c		BOOT_FILE           .null "@F:SAMPLE.PGX Hello, world!"
>395dea	45 2e 50 47 58 20 48 65 6c 6c 6f 2c 20 77 6f 72
>395dfa	6c 64 21 00
=$020000				TEST_LOCATION = $020000                     ; Location to try to load it
=$030000				TEST_BUFFER = $030000                       ; Temporary location for a cluster buffer
.395dfe					FDC_Check_RQM
.395dfe	0b		phd		                    PHD
.395dff	08		php		                    PHP
.395e00	48		pha		                PHA             ; begin setdp macro
.395e01	08		php		                PHP
.395e02	c2 20		rep #$20	                REP #$20        ; set A long
.395e04	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395e07	5b		tcd		                TCD
.395e08	28		plp		                PLP
.395e09	68		pla		                PLA             ; end setdp macro
.395e0a	e2 20		sep #$20	                SEP #$20        ; set A short
.395e0c	a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395e0e	22 ec 3f 39	jsl $393fec	                    JSL ISETTIMEOUT
.395e12	a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395e14	30 12		bmi $395e28	                    BMI time_out            ; If so: signal a time out
.395e16	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395e1a	89 80		bit #$80	                    BIT #FDC_MSR_RQM
.395e1c	f0 f4		beq $395e12	                    BEQ loop
.395e1e	a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395e20	22 ec 3f 39	jsl $393fec	                    JSL ISETTIMEOUT
.395e24	28		plp		                    PLP
.395e25	2b		pld		                    PLD
.395e26	38		sec		                    SEC
.395e27	60		rts		                    RTS
.395e28	28		plp		time_out            PLP
.395e29	2b		pld		                    PLD
.395e2a	18		clc		                    CLC
.395e2b	60		rts		                    RTS
.395e2c					FDC_Check_DRV0_BSY
.395e2c	0b		phd		                    PHD
.395e2d	08		php		                    PHP
.395e2e	48		pha		                PHA             ; begin setdp macro
.395e2f	08		php		                PHP
.395e30	c2 20		rep #$20	                REP #$20        ; set A long
.395e32	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395e35	5b		tcd		                TCD
.395e36	28		plp		                PLP
.395e37	68		pla		                PLA             ; end setdp macro
.395e38	e2 20		sep #$20	                SEP #$20        ; set A short
.395e3a	a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395e3c	22 ec 3f 39	jsl $393fec	                    JSL ISETTIMEOUT
.395e40	a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395e42	30 12		bmi $395e56	                    BMI time_out            ; If so: signal a time out
.395e44	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395e48	89 01		bit #$01	                    BIT #FDC_MSR_DRV0BSY
.395e4a	d0 f4		bne $395e40	                    BNE loop
.395e4c	a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395e4e	22 ec 3f 39	jsl $393fec	                    JSL ISETTIMEOUT
.395e52	28		plp		                    PLP
.395e53	2b		pld		                    PLD
.395e54	38		sec		                    SEC
.395e55	60		rts		                    RTS
.395e56	28		plp		time_out            PLP
.395e57	2b		pld		                    PLD
.395e58	18		clc		                    CLC
.395e59	60		rts		                    RTS
.395e5a					FDC_Check_CMD_BSY
.395e5a	0b		phd		                    PHD
.395e5b	08		php		                    PHP
.395e5c	48		pha		                PHA             ; begin setdp macro
.395e5d	08		php		                PHP
.395e5e	c2 20		rep #$20	                REP #$20        ; set A long
.395e60	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395e63	5b		tcd		                TCD
.395e64	28		plp		                PLP
.395e65	68		pla		                PLA             ; end setdp macro
.395e66	e2 20		sep #$20	                SEP #$20        ; set A short
.395e68	a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395e6a	22 ec 3f 39	jsl $393fec	                    JSL ISETTIMEOUT
.395e6e	a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395e70	30 12		bmi $395e84	                    BMI time_out            ; If so: signal a time out
.395e72	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395e76	89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.395e78	d0 f4		bne $395e6e	                    BNE loop
.395e7a	a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395e7c	22 ec 3f 39	jsl $393fec	                    JSL ISETTIMEOUT
.395e80	28		plp		                    PLP
.395e81	2b		pld		                    PLD
.395e82	38		sec		                    SEC
.395e83	60		rts		                    RTS
.395e84	28		plp		time_out            PLP
.395e85	2b		pld		                    PLD
.395e86	18		clc		                    CLC
.395e87	60		rts		                    RTS
.395e88					FDC_Can_Read_Data
.395e88	0b		phd		                    PHD
.395e89	08		php		                    PHP
.395e8a	48		pha		                PHA             ; begin setdp macro
.395e8b	08		php		                PHP
.395e8c	c2 20		rep #$20	                REP #$20        ; set A long
.395e8e	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395e91	5b		tcd		                TCD
.395e92	28		plp		                PLP
.395e93	68		pla		                PLA             ; end setdp macro
.395e94	e2 20		sep #$20	                SEP #$20        ; set A short
.395e96	a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395e98	22 ec 3f 39	jsl $393fec	                    JSL ISETTIMEOUT
.395e9c	a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395e9e	30 14		bmi $395eb4	                    BMI time_out            ; If so: signal a time out
.395ea0	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395ea4	29 40		and #$40	                    AND #FDC_MSR_DIO
.395ea6	c9 40		cmp #$40	                    CMP #FDC_MSR_DIO
.395ea8	d0 f2		bne $395e9c	                    BNE loop
.395eaa	a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395eac	22 ec 3f 39	jsl $393fec	                    JSL ISETTIMEOUT
.395eb0	28		plp		                    PLP
.395eb1	2b		pld		                    PLD
.395eb2	38		sec		                    SEC
.395eb3	60		rts		                    RTS
.395eb4	28		plp		time_out            PLP
.395eb5	2b		pld		                    PLD
.395eb6	18		clc		                    CLC
.395eb7	60		rts		                    RTS
.395eb8					FDC_CAN_WRITE
.395eb8	0b		phd		                    PHD
.395eb9	08		php		                    PHP
.395eba	48		pha		                PHA             ; begin setdp macro
.395ebb	08		php		                PHP
.395ebc	c2 20		rep #$20	                REP #$20        ; set A long
.395ebe	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395ec1	5b		tcd		                TCD
.395ec2	28		plp		                PLP
.395ec3	68		pla		                PLA             ; end setdp macro
.395ec4	e2 20		sep #$20	                SEP #$20        ; set A short
.395ec6	a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395ec8	22 ec 3f 39	jsl $393fec	                    JSL ISETTIMEOUT
.395ecc	a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395ece	30 14		bmi $395ee4	                    BMI time_out            ; If so: signal a time out
.395ed0	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395ed4	29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.395ed6	c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.395ed8	d0 f2		bne $395ecc	                    BNE loop
.395eda	a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395edc	22 ec 3f 39	jsl $393fec	                    JSL ISETTIMEOUT
.395ee0	28		plp		                    PLP
.395ee1	2b		pld		                    PLD
.395ee2	38		sec		                    SEC
.395ee3	60		rts		                    RTS
.395ee4	28		plp		time_out            PLP
.395ee5	2b		pld		                    PLD
.395ee6	18		clc		                    CLC
.395ee7	60		rts		                    RTS
.395ee8					FDC_DELAY_10MS
.395ee8	da		phx		                    PHX
.395ee9	08		php		                    PHP
.395eea	c2 10		rep #$10	                REP #$10        ; set X long
.395eec	a2 80 3e	ldx #$3e80	                    LDX #16000          ; Wait for around 10ms
.395eef	ea		nop		loop                NOP                 ; Each iteration should take 9 cycles
.395ef0	ca		dex		                    DEX
.395ef1	e0 00 00	cpx #$0000	                    CPX #0
.395ef4	d0 f9		bne $395eef	                    BNE loop
.395ef6	28		plp		                    PLP
.395ef7	fa		plx		                    PLX
.395ef8	6b		rtl		                    RTL
.395ef9					FDC_COMMAND
.395ef9	da		phx		                    PHX
.395efa	8b		phb		                    PHB
.395efb	0b		phd		                    PHD
.395efc	08		php		                    PHP
.395efd	48		pha		                PHA             ; begin setdbr macro
.395efe	08		php		                PHP
.395eff	e2 20		sep #$20	                SEP #$20        ; set A short
.395f01	a9 00		lda #$00	                LDA #0
.395f03	48		pha		                PHA
.395f04	ab		plb		                PLB
.395f05	28		plp		                PLP
.395f06	68		pla		                PLA             ; end setdbr macro
.395f07	48		pha		                PHA             ; begin setdp macro
.395f08	08		php		                PHP
.395f09	c2 20		rep #$20	                REP #$20        ; set A long
.395f0b	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395f0e	5b		tcd		                TCD
.395f0f	28		plp		                PLP
.395f10	68		pla		                PLA             ; end setdp macro
.395f11	22 e8 5e 39	jsl $395ee8	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms
.395f15	e2 30		sep #$30	                SEP #$30        ; set A&X short
.395f17	a2 00		ldx #$00	                    LDX #0
.395f19	a9 00		lda #$00	                    LDA #0
.395f1b	9d 10 05	sta $0510,x	clr_results         STA FDC_RESULTS,X                       ; Clear the result buffer
.395f1e	e8		inx		                    INX
.395f1f	e0 10		cpx #$10	                    CPX #16
.395f21	d0 f8		bne $395f1b	                    BNE clr_results
.395f23	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Validate we can send a command
.395f27	29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.395f29	c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.395f2b	f0 04		beq $395f31	                    BEQ start_send                          ; If so, start sending
.395f2d	22 46 60 39	jsl $396046	fdc_reset           JSL FDC_INIT                            ; Reset the FDC
.395f31					start_send
.395f31	e2 10		sep #$10	                SEP #$10        ; set X short
.395f33	a2 00		ldx #$00	                    LDX #0
.395f35	20 fe 5d	jsr $395dfe	send_loop           JSR FDC_Check_RQM                       ; Wait until we can write
.395f38	b0 03		bcs $395f3d	                    BCS send_param
.395f3a	82 5e 00	brl $395f9b	                    BRL time_out                            ; If there was a timeout, flag the time out
.395f3d	bd 00 05	lda $0500,x	send_param          LDA FDC_PARAMETERS,X                    ; Get the parameter/command byte to write
.395f40	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; Send it
.395f44	22 e8 5e 39	jsl $395ee8	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms for things to settle
.395f48	e8		inx		                    INX                                     ; Advance to the next byte
.395f49	ec 30 05	cpx $0530	                    CPX FDC_PARAM_NUM
.395f4c	d0 e7		bne $395f35	                    BNE send_loop                           ; Keep sending until we've sent them all
.395f4e	ad 33 05	lda $0533	                    LDA FDC_EXPECT_DAT                      ; Check the data expectation byte
.395f51	d0 03		bne $395f56	                    BNE chk_data_dir
.395f53	82 80 00	brl $395fd6	                    BRL result_phase                        ; If 0: we just want a result
.395f56	10 3c		bpl $395f94	chk_data_dir        BPL rd_data                             ; If >0: we want to read data
.395f58					wr_data
.395f58	a5 0b		lda $030b	wr_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.395f5a	30 03		bmi $395f5f	                    BMI wr_chk_rqm
.395f5c	82 3c 00	brl $395f9b	                    BRL time_out                            ; If not, raise an error
.395f5f	af f4 13 af	lda $af13f4	wr_chk_rqm          LDA @l SIO_FDC_MSR                      ; Wait for ready to write
.395f63	89 80		bit #$80	                    BIT #FDC_MSR_RQM
.395f65	f0 f1		beq $395f58	                    BEQ wr_data_rdy
.395f67	89 20		bit #$20	                    BIT #FDC_MSR_NONDMA                     ; Check if in execution mode
.395f69	d0 03		bne $395f6e	                    BNE wr_data_phase                       ; If so: transfer the data
.395f6b	82 68 00	brl $395fd6	                    BRL result_phase                          ; If not: it's an error
.395f6e					wr_data_phase
.395f6e	c2 10		rep #$10	                REP #$10        ; set X long
.395f70	a0 00 00	ldy #$0000	                    LDY #0
.395f73	a5 0b		lda $030b	wr_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.395f75	30 03		bmi $395f7a	                    BMI wr_chk_nondma
.395f77	82 21 00	brl $395f9b	                    BRL time_out                            ; If not, raise an error
.395f7a	af f4 13 af	lda $af13f4	wr_chk_nondma       LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.395f7e	89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.395f80	f0 54		beq $395fd6	                    BEQ result_phase                        ; If not: break out to result phase
.395f82	89 80		bit #$80	                    BIT #FDC_MSR_RQM                        ; Check if we can read data
.395f84	f0 ed		beq $395f73	                    BEQ wr_data_loop                        ; No: keep waiting
.395f86	b7 26		lda [$0326],y	                    LDA [BIOS_BUFF_PTR],Y                   ; Get the data byte
.395f88	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; And save it to the buffer
.395f8c	c8		iny		                    INY                                     ; Move to the next position
.395f8d	c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.395f90	d0 e1		bne $395f73	                    BNE wr_data_loop                        ; If not at the end, keep fetching
.395f92	80 42		bra $395fd6	                    BRA result_phase                        ; ready for the result phase
.395f94	20 88 5e	jsr $395e88	rd_data             JSR FDC_Can_Read_Data
.395f97	a5 0b		lda $030b	rd_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.395f99	30 07		bmi $395fa2	                    BMI chk_rd_rdy                          ; If so, check to see if the data is ready
.395f9b					time_out
.395f9b	e2 20		sep #$20	                SEP #$20        ; set A short
.395f9d	a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT                   ; Otherwise: throw a BIOS_ERR_TIMEOUT error
.395f9f	82 9c 00	brl $39603e	                    BRL pass_error
.395fa2	af f4 13 af	lda $af13f4	chk_rd_rdy          LDA @l SIO_FDC_MSR                      ; Wait for data to be ready
.395fa6	29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.395fa8	c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.395faa	d0 eb		bne $395f97	                    BNE rd_data_rdy
.395fac	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.395fb0	89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.395fb2	d0 03		bne $395fb7	                    BNE rd_data_phase                       ; If so: transfer the data
.395fb4	82 83 00	brl $39603a	                    BRL error                               ; If not: it's an error
.395fb7					rd_data_phase
.395fb7	c2 10		rep #$10	                REP #$10        ; set X long
.395fb9	a0 00 00	ldy #$0000	                    LDY #0
.395fbc	a5 0b		lda $030b	rd_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.395fbe	10 db		bpl $395f9b	                    BPL time_out                            ; If not: throw a timeout error
.395fc0	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Wait for the next byte to be ready
.395fc4	29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.395fc6	c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.395fc8	d0 f2		bne $395fbc	                    BNE rd_data_loop
.395fca	af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Get the data byte
.395fce	97 26		sta [$0326],y	                    STA [BIOS_BUFF_PTR],Y                   ; And save it to the buffer
.395fd0	c8		iny		                    INY                                     ; Move to the next position
.395fd1	c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.395fd4	d0 e6		bne $395fbc	                    BNE rd_data_loop                        ; If not at the end, keep fetching
.395fd6	ad 32 05	lda $0532	result_phase        LDA FDC_RESULT_NUM                      ; If no results are expected...
.395fd9	f0 34		beq $39600f	                    BEQ chk_busy                            ; Then we're done
.395fdb	e2 10		sep #$10	                SEP #$10        ; set X short
.395fdd	a2 00		ldx #$00	                    LDX #0
.395fdf	a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME                      ; Set the watchdog timer
.395fe1	22 ec 3f 39	jsl $393fec	                    JSL ISETTIMEOUT
.395fe5	20 88 5e	jsr $395e88	result_loop         JSR FDC_Can_Read_Data                   ; Wait until we can read
.395fe8	90 b1		bcc $395f9b	                    BCC time_out                            ; If there was a time out, raise an error
.395fea	af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Yes: get the data
.395fee	20 88 5e	jsr $395e88	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.395ff1	90 a8		bcc $395f9b	                    BCC time_out                            ; If there was a time out, raise an error
.395ff3	af f5 13 af	lda $af13f5	read_result         LDA @l SIO_FDC_DTA                      ; Yes: get the data
.395ff7	9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X                       ; Save it to the result buffer
.395ffa	20 fe 5d	jsr $395dfe	                    JSR FDC_Check_RQM
.395ffd	90 9c		bcc $395f9b	                    BCC time_out                            ; If there was a time out, flag the error
.395fff	af f4 13 af	lda $af13f4	rd_chk_1            LDA @l SIO_FDC_MSR
.396003	29 50		and #$50	                    AND #FDC_MSR_DIO | FDC_MSR_CMDBSY
.396005	c9 50		cmp #$50	                    CMP #FDC_MSR_DIO | FDC_MSR_CMDBSY
.396007	d0 06		bne $39600f	                    BNE chk_busy
.396009	e8		inx		                    INX                                     ; Move to the next result positions
.39600a	ec 32 05	cpx $0532	                    CPX FDC_RESULT_NUM
.39600d	d0 e4		bne $395ff3	                    BNE read_result                         ; And keep looping until we've read all
.39600f					chk_busy
.39600f	c2 10		rep #$10	                REP #$10        ; set X long
.396011	a2 0a 00	ldx #$000a	                    LDX #10                                 ; Wait 10ms (I guess?)
.396014	22 01 15 39	jsl $391501	                    JSL ILOOP_MS
.396018	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check the command busy bit
.39601c	89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.39601e	f0 12		beq $396032	                    BEQ done                                ; If not set: we're done
.396020	20 88 5e	jsr $395e88	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.396023	b0 03		bcs $396028	                    BCS get_result_byte
.396025	82 73 ff	brl $395f9b	                    BRL time_out                            ; If there was a time out, flag the error
.396028	af f5 13 af	lda $af13f5	get_result_byte     LDA @l SIO_FDC_DTA                      ; Read the data
.39602c	9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X
.39602f	e8		inx		                    INX
.396030	80 dd		bra $39600f	                    BRA chk_busy                            ; And keep checking
.396032					done
.396032	64 20		stz $0320	                    STZ BIOS_STATUS
.396034	28		plp		                    PLP
.396035	2b		pld		                    PLD
.396036	ab		plb		                    PLB
.396037	fa		plx		                    PLX
.396038	38		sec		                    SEC
.396039	6b		rtl		                    RTL
.39603a					error
.39603a	e2 20		sep #$20	                SEP #$20        ; set A short
.39603c	a9 85		lda #$85	                    LDA #BIOS_ERR_CMD
.39603e	85 20		sta $0320	pass_error          STA BIOS_STATUS
.396040	28		plp		                    PLP
.396041	2b		pld		                    PLD
.396042	ab		plb		                    PLB
.396043	fa		plx		                    PLX
.396044	18		clc		                    CLC
.396045	6b		rtl		                    RTL
.396046					FDC_Init
.396046	08		php		                    PHP
.396047	c2 10		rep #$10	                REP #$10        ; set X long
.396049	e2 20		sep #$20	                SEP #$20        ; set A short
.39604b	a9 00		lda #$00	                    LDA #0
.39604d	8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.396051	a2 e8 03	ldx #$03e8	                    LDX #1000                   ; Wait
.396054	a0 00 00	ldy #$0000	                    LDY #0
.396057	22 0e 15 39	jsl $39150e	                    JSL IDELAY
.39605b	a9 04		lda #$04	                    LDA #FDC_DOR_NRESET         ; Reset the FDC
.39605d	8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.396061	ea		nop		                    NOP
.396062	ea		nop		                    NOP
.396063	ea		nop		                    NOP
.396064	ea		nop		                    NOP
.396065	a9 00		lda #$00	                    LDA #$00                    ; Make sure the Speed and Compensation has been set
.396067	8f f4 13 af	sta $af13f4	                    STA @l SIO_FDC_DSR
.39606b	a9 00		lda #$00	                    LDA #$00                    ; Precompensation set to 0
.39606d	8f f7 13 af	sta $af13f7	                    STA @l SIO_FDC_CCR
.396071	a2 8f c5	ldx #$c58f	                    LDX #<>FDC_SEEK_TIME
.396074	a0 20 00	ldy #$0020	                    LDY #`FDC_SEEK_TIME
.396077	22 0e 15 39	jsl $39150e	                    JSL IDELAY
.39607b	22 52 61 39	jsl $396152	                    JSL FDC_Sense_Int_Status
.39607f	90 21		bcc $3960a2	                    BCC pass_failure
.396081	22 52 61 39	jsl $396152	                    JSL FDC_Sense_Int_Status
.396085	90 1b		bcc $3960a2	                    BCC pass_failure
.396087	22 52 61 39	jsl $396152	                    JSL FDC_Sense_Int_Status
.39608b	90 15		bcc $3960a2	                    BCC pass_failure
.39608d	22 52 61 39	jsl $396152	                    JSL FDC_Sense_Int_Status
.396091	90 0f		bcc $3960a2	                    BCC pass_failure
.396093	22 14 62 39	jsl $396214	                    JSL FDC_Configure_Command
.396097	90 09		bcc $3960a2	                    BCC pass_failure
.396099	22 bb 61 39	jsl $3961bb	                    JSL FDC_Specify_Command
.39609d	90 03		bcc $3960a2	                    BCC pass_failure
.39609f	28		plp		                    PLP
.3960a0	38		sec		                    SEC
.3960a1	6b		rtl		                    RTL
.3960a2	28		plp		pass_failure        PLP
.3960a3	18		clc		                    CLC
.3960a4	6b		rtl		                    RTL
.3960a5					FDC_MOTOR_NEEDED
.3960a5	08		php		                    PHP
.3960a6	c2 20		rep #$20	                REP #$20        ; set A long
.3960a8	78		sei		                    SEI                         ; Turn off interrupts
.3960a9	a9 84 03	lda #$0384	                    LDA #FDC_MOTOR_ON_TIME      ; Reset the FDC timeout clock
.3960ac	8f 4e a0 38	sta $38a04e	                    STA @l FDC_MOTOR_TIMER
.3960b0	e2 20		sep #$20	                SEP #$20        ; set A short
.3960b2	af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.3960b6	29 fe		and #$fe	                    AND #~FNX0_INT00_SOF        ; Enable the SOF interrupt
.3960b8	8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.3960bc	28		plp		                    PLP
.3960bd	6b		rtl		                    RTL
.3960be					FDC_Motor_On
.3960be	08		php		                    PHP
.3960bf	22 a5 60 39	jsl $3960a5	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.3960c3	e2 20		sep #$20	                SEP #$20        ; set A short
.3960c5	af f2 13 af	lda $af13f2	                    LDA @l SIO_FDC_DOR          ; Check to see if the motor is already on
.3960c9	89 10		bit #$10	                    BIT #FDC_DOR_MOT0
.3960cb	d0 1f		bne $3960ec	                    BNE done                    ; If so: skip
.3960cd	a9 14		lda #$14	                    LDA #FDC_DOR_MOT0 | FDC_DOR_NRESET
.3960cf	8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.3960d3	20 fe 5d	jsr $395dfe	                    JSR FDC_Check_RQM           ; Make sure we can leave knowing that everything set properly
.3960d6	90 17		bcc $3960ef	                    BCC time_out
.3960d8	a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.3960db	a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.3960de	22 0e 15 39	jsl $39150e	                    JSL IDELAY
.3960e2	af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.3960e6	09 80		ora #$80	                    ORA #$80                    ; Flag that the motor should be on
.3960e8	8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.3960ec	28		plp		done                PLP
.3960ed	38		sec		                    SEC
.3960ee	6b		rtl		                    RTL
.3960ef	28		plp		time_out            PLP                         ; Return a timeout error
.3960f0	18		clc		                    CLC
.3960f1	6b		rtl		                    RTL
.3960f2					FDC_Motor_Off
.3960f2	08		php		                    PHP
.3960f3	e2 20		sep #$20	                SEP #$20        ; set A short
.3960f5	a9 04		lda #$04	                    LDA #FDC_DOR_NRESET
.3960f7	8f f2 13 af	sta $af13f2	                    STA @L SIO_FDC_DOR
.3960fb	c2 20		rep #$20	                REP #$20        ; set A long
.3960fd	78		sei		                    SEI                         ; Turn off interrupts
.3960fe	a9 00 00	lda #$0000	                    LDA #0                      ; Set FDC motor timeout counter to 0 to disable it
.396101	8f 4e a0 38	sta $38a04e	                    STA @l FDC_MOTOR_TIMER
.396105	e2 20		sep #$20	                SEP #$20        ; set A short
.396107	af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.39610b	09 01		ora #$01	                    ORA #FNX0_INT00_SOF         ; Disable the SOF interrupt
.39610d	8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.396111	af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.396115	29 7f		and #$7f	                    AND #$7F                    ; Flag that the motor should be off
.396117	8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.39611b	28		plp		                    PLP
.39611c	6b		rtl		                    RTL
.39611d					FDC_Recalibrate_Command
.39611d	0b		phd		                    PHD
.39611e	08		php		                    PHP
.39611f	48		pha		                PHA             ; begin setdp macro
.396120	08		php		                PHP
.396121	c2 20		rep #$20	                REP #$20        ; set A long
.396123	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396126	5b		tcd		                TCD
.396127	28		plp		                PLP
.396128	68		pla		                PLA             ; end setdp macro
.396129	22 a5 60 39	jsl $3960a5	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.39612d	e2 20		sep #$20	                SEP #$20        ; set A short
.39612f	a9 07		lda #$07	                    LDA #FDC_CMD_RECALIBRATE    ; RECALIBRATE Command
.396131	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.396134	a5 00		lda $0300	                    LDA FDC_DRIVE
.396136	8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.396139	a9 02		lda #$02	                    LDA #2
.39613b	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM           ; 2 parameters
.39613e	9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT          ; 0 data
.396141	9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM          ; 0 results
.396144	22 f9 5e 39	jsl $395ef9	                    JSL FDC_COMMAND             ; Issue the command
.396148	90 04		bcc $39614e	                    BCC pass_failure            ; If failure, pass the failure up
.39614a	28		plp		                    PLP
.39614b	2b		pld		                    PLD
.39614c	38		sec		                    SEC
.39614d	6b		rtl		                    RTL
.39614e	28		plp		pass_failure        PLP
.39614f	2b		pld		                    PLD
.396150	18		clc		                    CLC
.396151	6b		rtl		                    RTL
.396152					FDC_Sense_Int_Status
.396152	8b		phb		                    PHB
.396153	0b		phd		                    PHD
.396154	08		php		                    PHP
.396155	48		pha		                PHA             ; begin setdbr macro
.396156	08		php		                PHP
.396157	e2 20		sep #$20	                SEP #$20        ; set A short
.396159	a9 00		lda #$00	                LDA #0
.39615b	48		pha		                PHA
.39615c	ab		plb		                PLB
.39615d	28		plp		                PLP
.39615e	68		pla		                PLA             ; end setdbr macro
.39615f	48		pha		                PHA             ; begin setdp macro
.396160	08		php		                PHP
.396161	c2 20		rep #$20	                REP #$20        ; set A long
.396163	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396166	5b		tcd		                TCD
.396167	28		plp		                PLP
.396168	68		pla		                PLA             ; end setdp macro
.396169	c2 30		rep #$30	                REP #$30        ; set A&X long
.39616b	a2 0a 00	ldx #$000a	                    LDX #10                            ; Wait for 10ms
.39616e	22 01 15 39	jsl $391501	                    JSL ILOOP_MS
.396172	e2 20		sep #$20	                SEP #$20        ; set A short
.396174	64 06		stz $0306	                    STZ FDC_ST0                         ; Clear ST0
.396176	a9 ff		lda #$ff	                    LDA #$FF
.396178	85 0a		sta $030a	                    STA FDC_PCN                         ; Set PCN to some obviously bad value
.39617a	20 5a 5e	jsr $395e5a	                    JSR FDC_Check_CMD_BSY               ; Check I can send a command
.39617d	90 30		bcc $3961af	                    BCC time_out                        ; If there was a time out, raise an error
.39617f	20 fe 5d	jsr $395dfe	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.396182	90 2b		bcc $3961af	                    BCC time_out                        ; If there was a time out, raise an error
.396184	a9 08		lda #$08	                    LDA #FDC_CMD_SENSE_INTERRUPT
.396186	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.39618a	20 88 5e	jsr $395e88	                    JSR FDC_Can_Read_Data
.39618d	90 20		bcc $3961af	                    BCC time_out                        ; If there was a time out, raise an error
.39618f	20 fe 5d	jsr $395dfe	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.396192	90 1b		bcc $3961af	                    BCC time_out                        ; If there was a time out, raise an error
.396194	af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.396198	85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.39619a	20 fe 5d	jsr $395dfe	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.39619d	90 10		bcc $3961af	                    BCC time_out                        ; If there was a time out, raise an error
.39619f	af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.3961a3	85 0a		sta $030a	                    STA FDC_PCN                         ; --- Cylinder ---
.3961a5	e2 20		sep #$20	                SEP #$20        ; set A short
.3961a7	9c 20 03	stz $0320	                    STZ @w BIOS_STATUS
.3961aa	28		plp		                    PLP
.3961ab	2b		pld		                    PLD
.3961ac	ab		plb		                    PLB
.3961ad	38		sec		                    SEC
.3961ae	6b		rtl		                    RTL
.3961af					time_out
.3961af	e2 20		sep #$20	                SEP #$20        ; set A short
.3961b1	a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT               ; Return a time out error
.3961b3	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.3961b6	28		plp		                    PLP
.3961b7	2b		pld		                    PLD
.3961b8	ab		plb		                    PLB
.3961b9	18		clc		                    CLC
.3961ba	6b		rtl		                    RTL
.3961bb					FDC_Specify_Command
.3961bb	8b		phb		                    PHB
.3961bc	0b		phd		                    PHD
.3961bd	08		php		                    PHP
.3961be	48		pha		                PHA             ; begin setdbr macro
.3961bf	08		php		                PHP
.3961c0	e2 20		sep #$20	                SEP #$20        ; set A short
.3961c2	a9 00		lda #$00	                LDA #0
.3961c4	48		pha		                PHA
.3961c5	ab		plb		                PLB
.3961c6	28		plp		                PLP
.3961c7	68		pla		                PLA             ; end setdbr macro
.3961c8	48		pha		                PHA             ; begin setdp macro
.3961c9	08		php		                PHP
.3961ca	c2 20		rep #$20	                REP #$20        ; set A long
.3961cc	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3961cf	5b		tcd		                TCD
.3961d0	28		plp		                PLP
.3961d1	68		pla		                PLA             ; end setdp macro
.3961d2	c2 30		rep #$30	                REP #$30        ; set A&X long
.3961d4	a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.3961d7	22 01 15 39	jsl $391501	                    JSL ILOOP_MS
.3961db	e2 20		sep #$20	                SEP #$20        ; set A short
.3961dd	20 5a 5e	jsr $395e5a	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.3961e0	90 26		bcc $396208	                    BCC time_out            ; If there was a time out, raise an error
.3961e2	20 fe 5d	jsr $395dfe	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.3961e5	90 21		bcc $396208	                    BCC time_out            ; If there was a time out, raise an error
.3961e7	a9 03		lda #$03	                    LDA #FDC_CMD_SPECIFY    ; Specify Command
.3961e9	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.3961ed	20 fe 5d	jsr $395dfe	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.3961f0	90 16		bcc $396208	                    BCC time_out            ; If there was a time out, raise an error
.3961f2	a9 cf		lda #$cf	                    LDA #$CF
.3961f4	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.3961f8	20 fe 5d	jsr $395dfe	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.3961fb	90 0b		bcc $396208	                    BCC time_out            ; If there was a time out, raise an error
.3961fd	a9 01		lda #$01	                    LDA #$01                ; 1 = Non-DMA
.3961ff	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.396203	28		plp		                    PLP
.396204	2b		pld		                    PLD
.396205	ab		plb		                    PLB
.396206	38		sec		                    SEC
.396207	6b		rtl		                    RTL
.396208					time_out
.396208	e2 20		sep #$20	                SEP #$20        ; set A short
.39620a	a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.39620c	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.39620f	28		plp		                    PLP
.396210	2b		pld		                    PLD
.396211	ab		plb		                    PLB
.396212	18		clc		                    CLC
.396213	6b		rtl		                    RTL
.396214					FDC_Configure_Command
.396214	8b		phb		                    PHB
.396215	0b		phd		                    PHD
.396216	08		php		                    PHP
.396217	48		pha		                PHA             ; begin setdbr macro
.396218	08		php		                PHP
.396219	e2 20		sep #$20	                SEP #$20        ; set A short
.39621b	a9 00		lda #$00	                LDA #0
.39621d	48		pha		                PHA
.39621e	ab		plb		                PLB
.39621f	28		plp		                PLP
.396220	68		pla		                PLA             ; end setdbr macro
.396221	48		pha		                PHA             ; begin setdp macro
.396222	08		php		                PHP
.396223	c2 20		rep #$20	                REP #$20        ; set A long
.396225	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396228	5b		tcd		                TCD
.396229	28		plp		                PLP
.39622a	68		pla		                PLA             ; end setdp macro
.39622b	c2 30		rep #$30	                REP #$30        ; set A&X long
.39622d	a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.396230	22 01 15 39	jsl $391501	                    JSL ILOOP_MS
.396234	e2 20		sep #$20	                SEP #$20        ; set A short
.396236	20 5a 5e	jsr $395e5a	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.396239	90 36		bcc $396271	                    BCC time_out            ; If there was a time out, raise an error
.39623b	20 fe 5d	jsr $395dfe	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.39623e	90 31		bcc $396271	                    BCC time_out            ; If there was a time out, raise an error
.396240	a9 13		lda #$13	                    LDA #FDC_CMD_CONFIGURE  ; Specify Command
.396242	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.396246	20 fe 5d	jsr $395dfe	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.396249	90 26		bcc $396271	                    BCC time_out            ; If there was a time out, raise an error
.39624b	a9 00		lda #$00	                    LDA #$00
.39624d	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.396251	20 fe 5d	jsr $395dfe	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.396254	90 1b		bcc $396271	                    BCC time_out            ; If there was a time out, raise an error
.396256	a9 44		lda #$44	                    LDA #$44                ; Implied Seek, FIFOTHR = 4 byte
.396258	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.39625c	20 fe 5d	jsr $395dfe	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.39625f	90 10		bcc $396271	                    BCC time_out            ; If there was a time out, raise an error
.396261	a9 00		lda #$00	                    LDA #$00
.396263	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.396267	20 5a 5e	jsr $395e5a	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.39626a	90 05		bcc $396271	                    BCC time_out            ; If there was a time out, raise an error
.39626c	28		plp		                    PLP
.39626d	2b		pld		                    PLD
.39626e	ab		plb		                    PLB
.39626f	38		sec		                    SEC
.396270	6b		rtl		                    RTL
.396271					time_out
.396271	e2 20		sep #$20	                SEP #$20        ; set A short
.396273	a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.396275	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.396278	28		plp		                    PLP
.396279	2b		pld		                    PLD
.39627a	ab		plb		                    PLB
.39627b	18		clc		                    CLC
.39627c	6b		rtl		                    RTL
.39627d					FDC_Read_ID_Command
.39627d	8b		phb		                    PHB
.39627e	0b		phd		                    PHD
.39627f	08		php		                    PHP
.396280	48		pha		                PHA             ; begin setdbr macro
.396281	08		php		                PHP
.396282	e2 20		sep #$20	                SEP #$20        ; set A short
.396284	a9 00		lda #$00	                LDA #0
.396286	48		pha		                PHA
.396287	ab		plb		                PLB
.396288	28		plp		                PLP
.396289	68		pla		                PLA             ; end setdbr macro
.39628a	48		pha		                PHA             ; begin setdp macro
.39628b	08		php		                PHP
.39628c	c2 20		rep #$20	                REP #$20        ; set A long
.39628e	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396291	5b		tcd		                TCD
.396292	28		plp		                PLP
.396293	68		pla		                PLA             ; end setdp macro
.396294	e2 20		sep #$20	                SEP #$20        ; set A short
.396296	a9 0a		lda #$0a	                    LDA #FDC_CMD_READ_ID                ; READID Command
.396298	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.39629b	a9 01		lda #$01	                    LDA #1
.39629d	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.3962a0	9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.3962a3	a9 07		lda #$07	                    LDA #7
.3962a5	8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.3962a8	22 f9 5e 39	jsl $395ef9	                    JSL FDC_COMMAND                     ; Issue the command
.3962ac	90 27		bcc $3962d5	                    BCC pass_failure
.3962ae	ad 10 05	lda $0510	                    LDA FDC_RESULTS
.3962b1	85 06		sta $0306	                    STA FDC_ST0                         ; Get ST0
.3962b3	ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.3962b6	85 07		sta $0307	                    STA FDC_ST1                         ; Get ST1
.3962b8	ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.3962bb	85 08		sta $0308	                    STA FDC_ST2                         ; Get ST2
.3962bd	ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.3962c0	85 02		sta $0302	                    STA FDC_CYLINDER                    ; Get the cylinder
.3962c2	ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.3962c5	85 01		sta $0301	                    STA FDC_HEAD                        ; Get the head
.3962c7	ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.3962ca	85 0a		sta $030a	                    STA FDC_PCN                         ; Get the sector
.3962cc	ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.3962cf	85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; Get the sector size code
.3962d1	28		plp		                    PLP
.3962d2	2b		pld		                    PLD
.3962d3	ab		plb		                    PLB
.3962d4	6b		rtl		                    RTL
.3962d5	28		plp		pass_failure        PLP
.3962d6	2b		pld		                    PLD
.3962d7	ab		plb		                    PLB
.3962d8	18		clc		                    CLC
.3962d9	6b		rtl		                    RTL
.3962da					FDC_DumpReg_Command
.3962da	0b		phd		                    PHD
.3962db	08		php		                    PHP
.3962dc	e2 20		sep #$20	                SEP #$20        ; set A short
.3962de	a9 0e		lda #$0e	                    LDA #FDC_CMD_DUMPREG                ; DUMPREG Command
.3962e0	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.3962e3	a9 01		lda #$01	                    LDA #1
.3962e5	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.3962e8	9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.3962eb	a9 0a		lda #$0a	                    LDA #10
.3962ed	8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 10 results
.3962f0	22 f9 5e 39	jsl $395ef9	                    JSL FDC_COMMAND                     ; Issue the command
.3962f4	90 03		bcc $3962f9	                    BCC pass_failure
.3962f6	28		plp		                    PLP
.3962f7	2b		pld		                    PLD
.3962f8	6b		rtl		                    RTL
.3962f9	28		plp		pass_failure        PLP
.3962fa	2b		pld		                    PLD
.3962fb	18		clc		                    CLC
.3962fc	6b		rtl		                    RTL
.3962fd					FDC_Seek_Track
.3962fd	8b		phb		                    PHB
.3962fe	0b		phd		                    PHD
.3962ff	08		php		                    PHP
.396300	48		pha		                PHA             ; begin setdbr macro
.396301	08		php		                PHP
.396302	e2 20		sep #$20	                SEP #$20        ; set A short
.396304	a9 00		lda #$00	                LDA #0
.396306	48		pha		                PHA
.396307	ab		plb		                PLB
.396308	28		plp		                PLP
.396309	68		pla		                PLA             ; end setdbr macro
.39630a	48		pha		                PHA             ; begin setdp macro
.39630b	08		php		                PHP
.39630c	c2 20		rep #$20	                REP #$20        ; set A long
.39630e	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396311	5b		tcd		                TCD
.396312	28		plp		                PLP
.396313	68		pla		                PLA             ; end setdp macro
.396314	22 a5 60 39	jsl $3960a5	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.396318	e2 20		sep #$20	                SEP #$20        ; set A short
.39631a	a9 0f		lda #$0f	                    LDA #FDC_CMD_SEEK                   ; Seek Command
.39631c	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.39631f	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.396321	29 01		and #$01	                    AND #$01
.396323	0a		asl a		                    ASL A
.396324	0a		asl a		                    ASL A
.396325	05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.396327	8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.39632a	a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; And the track
.39632c	8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.39632f	a9 03		lda #$03	                    LDA #3
.396331	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 3 parameter (the command)
.396334	9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.396337	9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM                  ; 0 results
.39633a	22 f9 5e 39	jsl $395ef9	                    JSL FDC_COMMAND                     ; Issue the command
.39633e	90 05		bcc $396345	                    BCC pass_failure
.396340	28		plp		                    PLP
.396341	2b		pld		                    PLD
.396342	ab		plb		                    PLB
.396343	38		sec		                    SEC
.396344	6b		rtl		                    RTL
.396345	28		plp		pass_failure        PLP
.396346	2b		pld		                    PLD
.396347	ab		plb		                    PLB
.396348	18		clc		                    CLC
.396349	6b		rtl		                    RTL
.39634a					FDC_Read_Sector
.39634a	8b		phb		                    PHB
.39634b	0b		phd		                    PHD
.39634c	08		php		                    PHP
.39634d	48		pha		                PHA             ; begin setdbr macro
.39634e	08		php		                PHP
.39634f	e2 20		sep #$20	                SEP #$20        ; set A short
.396351	a9 00		lda #$00	                LDA #0
.396353	48		pha		                PHA
.396354	ab		plb		                PLB
.396355	28		plp		                PLP
.396356	68		pla		                PLA             ; end setdbr macro
.396357	48		pha		                PHA             ; begin setdp macro
.396358	08		php		                PHP
.396359	c2 20		rep #$20	                REP #$20        ; set A long
.39635b	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39635e	5b		tcd		                TCD
.39635f	28		plp		                PLP
.396360	68		pla		                PLA             ; end setdp macro
.396361	22 a5 60 39	jsl $3960a5	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.396365	e2 20		sep #$20	                SEP #$20        ; set A short
.396367	a9 06		lda #$06	                    LDA #FDC_CMD_READ_DATA              ; The READ_DATA command
.396369	09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.39636b	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.39636e	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.396370	29 01		and #$01	                    AND #$01
.396372	0a		asl a		                    ASL A
.396373	0a		asl a		                    ASL A
.396374	05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.396376	8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.396379	a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.39637b	8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.39637e	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.396380	8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.396383	a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.396385	8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.396388	a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.39638a	8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.39638d	a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.39638f	8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.396392	a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.396394	8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.396397	a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.396399	8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.39639c	a9 09		lda #$09	                    LDA #9
.39639e	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.3963a1	a9 01		lda #$01	                    LDA #1
.3963a3	8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect data
.3963a6	a9 07		lda #$07	                    LDA #7
.3963a8	8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.3963ab	22 f9 5e 39	jsl $395ef9	command             JSL FDC_COMMAND                     ; Issue the command
.3963af	08		php		                    PHP
.3963b0	ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.3963b3	85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ----
.3963b5	ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.3963b8	85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ----
.3963ba	ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.3963bd	85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ----
.3963bf	ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.3963c2	85 02		sta $0302	                    STA FDC_CYLINDER                    ; -- C ---
.3963c4	ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.3963c7	85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.3963c9	ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.3963cc	85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.3963ce	ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.3963d1	85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.3963d3	28		plp		                    PLP
.3963d4	90 04		bcc $3963da	                    BCC pass_failure
.3963d6	28		plp		done                PLP
.3963d7	2b		pld		                    PLD
.3963d8	ab		plb		                    PLB
.3963d9	6b		rtl		                    RTL
.3963da	28		plp		pass_failure        PLP
.3963db	2b		pld		                    PLD
.3963dc	ab		plb		                    PLB
.3963dd	18		clc		                    CLC
.3963de	6b		rtl		                    RTL
.3963df					FDC_Write_Sector
.3963df	8b		phb		                    PHB
.3963e0	0b		phd		                    PHD
.3963e1	08		php		                    PHP
.3963e2	48		pha		                PHA             ; begin setdbr macro
.3963e3	08		php		                PHP
.3963e4	e2 20		sep #$20	                SEP #$20        ; set A short
.3963e6	a9 00		lda #$00	                LDA #0
.3963e8	48		pha		                PHA
.3963e9	ab		plb		                PLB
.3963ea	28		plp		                PLP
.3963eb	68		pla		                PLA             ; end setdbr macro
.3963ec	48		pha		                PHA             ; begin setdp macro
.3963ed	08		php		                PHP
.3963ee	c2 20		rep #$20	                REP #$20        ; set A long
.3963f0	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3963f3	5b		tcd		                TCD
.3963f4	28		plp		                PLP
.3963f5	68		pla		                PLA             ; end setdp macro
.3963f6	e2 20		sep #$20	                SEP #$20        ; set A short
.3963f8	22 a5 60 39	jsl $3960a5	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.3963fc	a9 05		lda #$05	                    LDA #FDC_CMD_WRITE_DATA             ; The WRITE_DATA command
.3963fe	09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.396400	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.396403	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.396405	29 01		and #$01	                    AND #$01
.396407	0a		asl a		                    ASL A
.396408	0a		asl a		                    ASL A
.396409	05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.39640b	8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.39640e	a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.396410	8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.396413	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.396415	8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.396418	a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.39641a	8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.39641d	a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.39641f	8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.396422	a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.396424	8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.396427	a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.396429	8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.39642c	a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.39642e	8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.396431	a9 09		lda #$09	                    LDA #9
.396433	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.396436	a9 ff		lda #$ff	                    LDA #$FF
.396438	8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect to write data
.39643b	a9 07		lda #$07	                    LDA #7
.39643d	8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.396440	22 f9 5e 39	jsl $395ef9	command             JSL FDC_COMMAND                     ; Issue the command
.396444	08		php		                    PHP
.396445	ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.396448	85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.39644a	ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.39644d	85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ---
.39644f	ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.396452	85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ---
.396454	ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.396457	85 02		sta $0302	                    STA FDC_CYLINDER                    ; --- C ---
.396459	ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.39645c	85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.39645e	ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.396461	85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.396463	ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.396466	85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.396468	28		plp		check_status        PLP
.396469	90 04		bcc $39646f	                    BCC pass_failure
.39646b	28		plp		done                PLP
.39646c	2b		pld		                    PLD
.39646d	ab		plb		                    PLB
.39646e	6b		rtl		                    RTL
.39646f	28		plp		pass_failure        PLP
.396470	2b		pld		                    PLD
.396471	ab		plb		                    PLB
.396472	18		clc		                    CLC
.396473	6b		rtl		                    RTL
.396474					DIVIDE32
.396474	da		phx		                    PHX
.396475	5a		phy		                    PHY
.396476	0b		phd		                    PHD
.396477	08		php		                    PHP
.396478	48		pha		                PHA             ; begin setdp macro
.396479	08		php		                PHP
.39647a	c2 20		rep #$20	                REP #$20        ; set A long
.39647c	a9 0c 03	lda #$030c	                LDA #DIVIDEND         ; set DP to page 0
.39647f	5b		tcd		                TCD
.396480	28		plp		                PLP
.396481	68		pla		                PLA             ; end setdp macro
.396482	c2 30		rep #$30	                REP #$30        ; set A&X long
.396484	64 08		stz $0314	                    STZ REMAINDER           ; Initialize the remainder
.396486	64 0a		stz $0316	                    STZ REMAINDER+2
.396488	a2 20 00	ldx #$0020	                    LDX #32                 ; Set the number of bits to process
.39648b	06 00		asl $030c	loop                ASL DIVIDEND
.39648d	26 02		rol $030e	                    ROL DIVIDEND+2
.39648f	26 08		rol $0314	                    ROL REMAINDER
.396491	26 0a		rol $0316	                    ROL REMAINDER+2
.396493	a5 08		lda $0314	                    LDA REMAINDER
.396495	38		sec		                    SEC
.396496	e5 04		sbc $0310	                    SBC DIVISOR
.396498	a8		tay		                    TAY
.396499	a5 0a		lda $0316	                    LDA REMAINDER+2
.39649b	e5 06		sbc $0312	                    SBC DIVISOR+2
.39649d	90 06		bcc $3964a5	                    BCC skip
.39649f	85 0a		sta $0316	                    STA REMAINDER+2
.3964a1	84 08		sty $0314	                    STY REMAINDER
.3964a3	e6 00		inc $030c	                    INC DIVIDEND
.3964a5	ca		dex		skip                DEX
.3964a6	d0 e3		bne $39648b	                    BNE loop
.3964a8	28		plp		                    PLP
.3964a9	2b		pld		                    PLD
.3964aa	7a		ply		                    PLY
.3964ab	fa		plx		                    PLX
.3964ac	60		rts		                    RTS
.3964ad					LBA2CHS
.3964ad	8b		phb		                    PHB
.3964ae	0b		phd		                    PHD
.3964af	08		php		                    PHP
.3964b0	48		pha		                PHA             ; begin setdbr macro
.3964b1	08		php		                PHP
.3964b2	e2 20		sep #$20	                SEP #$20        ; set A short
.3964b4	a9 00		lda #$00	                LDA #0
.3964b6	48		pha		                PHA
.3964b7	ab		plb		                PLB
.3964b8	28		plp		                PLP
.3964b9	68		pla		                PLA             ; end setdbr macro
.3964ba	48		pha		                PHA             ; begin setdp macro
.3964bb	08		php		                PHP
.3964bc	c2 20		rep #$20	                REP #$20        ; set A long
.3964be	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3964c1	5b		tcd		                TCD
.3964c2	28		plp		                PLP
.3964c3	68		pla		                PLA             ; end setdp macro
.3964c4	c2 30		rep #$30	                REP #$30        ; set A&X long
.3964c6	a5 22		lda $0322	                    LDA BIOS_LBA
.3964c8	85 0c		sta $030c	                    STA DIVIDEND
.3964ca	a5 24		lda $0324	                    LDA BIOS_LBA+2
.3964cc	85 0e		sta $030e	                    STA DIVIDEND+2
.3964ce	a9 24 00	lda #$0024	                    LDA #36
.3964d1	85 10		sta $0310	                    STA DIVISOR
.3964d3	64 12		stz $0312	                    STZ DIVISOR+2
.3964d5	20 74 64	jsr $396474	                    JSR DIVIDE32
.3964d8	e2 20		sep #$20	                SEP #$20        ; set A short
.3964da	a5 0c		lda $030c	                    LDA DIVIDEND
.3964dc	85 02		sta $0302	                    STA FDC_CYLINDER
.3964de	c2 20		rep #$20	                REP #$20        ; set A long
.3964e0	a5 14		lda $0314	                    LDA REMAINDER
.3964e2	85 0c		sta $030c	                    STA DIVIDEND
.3964e4	a5 16		lda $0316	                    LDA REMAINDER+2
.3964e6	85 0e		sta $030e	                    STA DIVIDEND+2
.3964e8	a9 12 00	lda #$0012	                    LDA #18
.3964eb	85 10		sta $0310	                    STA DIVISOR
.3964ed	64 12		stz $0312	                    STZ DIVISOR+2
.3964ef	20 74 64	jsr $396474	                    JSR DIVIDE32
.3964f2	e2 20		sep #$20	                SEP #$20        ; set A short
.3964f4	a5 0c		lda $030c	                    LDA DIVIDEND
.3964f6	29 01		and #$01	                    AND #$01
.3964f8	85 01		sta $0301	                    STA FDC_HEAD
.3964fa	a5 14		lda $0314	                    LDA REMAINDER
.3964fc	1a		inc a		                    INC A
.3964fd	85 03		sta $0303	                    STA FDC_SECTOR
.3964ff	28		plp		                    PLP
.396500	2b		pld		                    PLD
.396501	ab		plb		                    PLB
.396502	6b		rtl		                    RTL
.396503					FDC_GETBLOCK
.396503	8b		phb		                    PHB
.396504	0b		phd		                    PHD
.396505	08		php		                    PHP
.396506	48		pha		                PHA             ; begin setdbr macro
.396507	08		php		                PHP
.396508	e2 20		sep #$20	                SEP #$20        ; set A short
.39650a	a9 00		lda #$00	                LDA #0
.39650c	48		pha		                PHA
.39650d	ab		plb		                PLB
.39650e	28		plp		                PLP
.39650f	68		pla		                PLA             ; end setdbr macro
.396510	48		pha		                PHA             ; begin setdp macro
.396511	08		php		                PHP
.396512	c2 20		rep #$20	                REP #$20        ; set A long
.396514	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396517	5b		tcd		                TCD
.396518	28		plp		                PLP
.396519	68		pla		                PLA             ; end setdp macro
.39651a	e2 20		sep #$20	                SEP #$20        ; set A short
.39651c	a9 03		lda #$03	                    LDA #3                      ; We can retry 3 times
.39651e	8d 34 05	sta $0534	                    STA FDC_CMD_RETRY
.396521	c2 30		rep #$30	                REP #$30        ; set A&X long
.396523	22 ad 64 39	jsl $3964ad	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.396527	e2 20		sep #$20	                SEP #$20        ; set A short
.396529	a5 03		lda $0303	                    LDA FDC_SECTOR              ; Just make sure the sector is ok
.39652b	f0 29		beq $396556	                    BEQ read_failure
.39652d					try_read
.39652d	c2 20		rep #$20	                REP #$20        ; set A long
.39652f	22 4a 63 39	jsl $39634a	                    JSL FDC_Read_Sector         ; Read the sector
.396533	90 14		bcc $396549	                    BCC retry
.396535	e2 20		sep #$20	                SEP #$20        ; set A short
.396537	a5 06		lda $0306	                    LDA FDC_ST0
.396539	29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.39653b	d0 19		bne $396556	                    BNE read_failure
.39653d					ret_success
.39653d	e2 20		sep #$20	                SEP #$20        ; set A short
.39653f	a9 00		lda #$00	                    LDA #0
.396541	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.396544	28		plp		                    PLP
.396545	2b		pld		                    PLD
.396546	ab		plb		                    PLB
.396547	38		sec		                    SEC
.396548	6b		rtl		                    RTL
.396549					retry
.396549	e2 20		sep #$20	                SEP #$20        ; set A short
.39654b	ce 34 05	dec $0534	                    DEC FDC_CMD_RETRY           ; Decrement the retry counter
.39654e	30 13		bmi $396563	                    BMI pass_failure            ; If it's gone negative, we should quit with an error
.396550	22 46 60 39	jsl $396046	                    JSL FDC_INIT                ; Otherwise, reinitialize the FDC
.396554	80 d7		bra $39652d	                    BRA try_read                ; And try the read again
.396556					read_failure
.396556	e2 20		sep #$20	                SEP #$20        ; set A short
.396558	a9 82		lda #$82	                    LDA #BIOS_ERR_READ
.39655a	80 04		bra $396560	                    BRA ret_failure
.39655c					seek_failure
.39655c	e2 20		sep #$20	                SEP #$20        ; set A short
.39655e	a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.396560	8d 20 03	sta $0320	ret_failure         STA @w BIOS_STATUS
.396563	28		plp		pass_failure        PLP
.396564	2b		pld		                    PLD
.396565	ab		plb		                    PLB
.396566	18		clc		                    CLC
.396567	6b		rtl		                    RTL
.396568					FDC_PUTBLOCK
.396568	8b		phb		                    PHB
.396569	0b		phd		                    PHD
.39656a	08		php		                    PHP
.39656b	48		pha		                PHA             ; begin setdbr macro
.39656c	08		php		                PHP
.39656d	e2 20		sep #$20	                SEP #$20        ; set A short
.39656f	a9 00		lda #$00	                LDA #0
.396571	48		pha		                PHA
.396572	ab		plb		                PLB
.396573	28		plp		                PLP
.396574	68		pla		                PLA             ; end setdbr macro
.396575	48		pha		                PHA             ; begin setdp macro
.396576	08		php		                PHP
.396577	c2 20		rep #$20	                REP #$20        ; set A long
.396579	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39657c	5b		tcd		                TCD
.39657d	28		plp		                PLP
.39657e	68		pla		                PLA             ; end setdp macro
.39657f	e2 20		sep #$20	                SEP #$20        ; set A short
.396581	a9 03		lda #$03	                    LDA #3                      ; Set the number of retries we're willing to do
.396583	8d 34 05	sta $0534	                    STA @w FDC_CMD_RETRY
.396586	c2 30		rep #$30	                REP #$30        ; set A&X long
.396588	22 ad 64 39	jsl $3964ad	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.39658c	22 df 63 39	jsl $3963df	retry               JSL FDC_Write_Sector        ; Write the sector
.396590	b0 03		bcs $396595	                    BCS chk_st0
.396592	82 28 00	brl $3965bd	                    BRL attempt_retry
.396595					chk_st0
.396595	e2 20		sep #$20	                SEP #$20        ; set A short
.396597	a5 06		lda $0306	                    LDA FDC_ST0
.396599	29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.39659b	d0 0c		bne $3965a9	                    BNE write_failure
.39659d					ret_success
.39659d	e2 20		sep #$20	                SEP #$20        ; set A short
.39659f	a9 00		lda #$00	                    LDA #0
.3965a1	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.3965a4	28		plp		                    PLP
.3965a5	2b		pld		                    PLD
.3965a6	ab		plb		                    PLB
.3965a7	38		sec		                    SEC
.3965a8	6b		rtl		                    RTL
.3965a9					write_failure
.3965a9	e2 20		sep #$20	                SEP #$20        ; set A short
.3965ab	a5 07		lda $0307	                    LDA FDC_ST1                         ; Check ST1 for write protect
.3965ad	89 02		bit #$02	                    BIT #FDC_ST1_NW
.3965af	f0 04		beq $3965b5	                    BEQ generic_err
.3965b1	a9 86		lda #$86	                    LDA #BIOS_ERR_WRITEPROT             ; Yes: return a write-protect error
.3965b3	80 17		bra $3965cc	                    BRA ret_failure
.3965b5	89 10		bit #$10	generic_err         BIT #FDC_ST1_OR                     ; TODO: properly handle over/under run errors
.3965b7	d0 e4		bne $39659d	                    BNE ret_success
.3965b9	89 80		bit #$80	                    BIT #FDC_ST1_EN                     ; TODO: properly handle end-of-track
.3965bb	d0 e0		bne $39659d	                    BNE ret_success
.3965bd					attempt_retry
.3965bd	e2 20		sep #$20	                SEP #$20        ; set A short
.3965bf	ce 34 05	dec $0534	                    DEC @w FDC_CMD_RETRY                ; Count down the retries
.3965c2	d0 c8		bne $39658c	                    BNE retry                           ; And retry unless we have none left
.3965c4	a9 83		lda #$83	                    LDA #BIOS_ERR_WRITE                 ; Otherwise: return a generic write error
.3965c6	80 04		bra $3965cc	                    BRA ret_failure
.3965c8					seek_failure
.3965c8	e2 20		sep #$20	                SEP #$20        ; set A short
.3965ca	a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.3965cc					ret_failure
.3965cc	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.3965cf	28		plp		pass_failure        PLP
.3965d0	2b		pld		                    PLD
.3965d1	ab		plb		                    PLB
.3965d2	18		clc		                    CLC
.3965d3	6b		rtl		                    RTL
.3965d4					FDC_MOUNT
.3965d4	8b		phb		                    PHB
.3965d5	0b		phd		                    PHD
.3965d6	08		php		                    PHP
.3965d7	48		pha		                PHA             ; begin setdbr macro
.3965d8	08		php		                PHP
.3965d9	e2 20		sep #$20	                SEP #$20        ; set A short
.3965db	a9 00		lda #$00	                LDA #0
.3965dd	48		pha		                PHA
.3965de	ab		plb		                PLB
.3965df	28		plp		                PLP
.3965e0	68		pla		                PLA             ; end setdbr macro
.3965e1	48		pha		                PHA             ; begin setdp macro
.3965e2	08		php		                PHP
.3965e3	c2 20		rep #$20	                REP #$20        ; set A long
.3965e5	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3965e8	5b		tcd		                TCD
.3965e9	28		plp		                PLP
.3965ea	68		pla		                PLA             ; end setdp macro
.3965eb	e2 20		sep #$20	                SEP #$20        ; set A short
.3965ed	c2 10		rep #$10	                REP #$10        ; set X long
.3965ef	a9 00		lda #$00	                    LDA #0
.3965f1	a2 00 00	ldx #$0000	                    LDX #0
.3965f4	9f 00 a3 38	sta $38a300,x	zero_loop           STA DOS_SECTOR,X
.3965f8	e8		inx		                    INX
.3965f9	e0 00 02	cpx #$0200	                    CPX #512
.3965fc	d0 f6		bne $3965f4	                    BNE zero_loop
.3965fe	a9 00		lda #$00	                    LDA #0                                  ; We only support drive 0
.396600	85 00		sta $0300	                    STA FDC_DRIVE
.396602	22 be 60 39	jsl $3960be	                    JSL FDC_Motor_On                        ; Turn the motor on
.396606	c2 30		rep #$30	                REP #$30        ; set A&X long
.396608	a9 00 00	lda #$0000	                    LDA #0                                  ; We want sector 0
.39660b	85 22		sta $0322	                    STA BIOS_LBA
.39660d	85 24		sta $0324	                    STA BIOS_LBA+2
.39660f	a9 00 a3	lda #$a300	                    LDA #<>DOS_SECTOR                       ; And load it into DOS_SECTOR
.396612	85 26		sta $0326	                    STA BIOS_BUFF_PTR
.396614	a9 38 00	lda #$0038	                    LDA #`DOS_SECTOR
.396617	85 28		sta $0328	                    STA BIOS_BUFF_PTR+2
.396619	22 03 65 39	jsl $396503	                    JSL FDC_GETBLOCK                        ; Attempt to read the data
.39661d	b0 03		bcs $396622	                    BCS parse_boot                          ; If ok: start parsing the boot record
.39661f	82 d3 00	brl $3966f5	                    BRL pass_failure                        ; Pass the error up the chain
.396622					parse_boot
.396622	e2 20		sep #$20	                SEP #$20        ; set A short
.396624	a9 00		lda #$00	                    LDA #PART_TYPE_FAT12                    ; Set the file system to FAT12
.396626	8f 01 a0 38	sta $38a001	                    STA @l FILE_SYSTEM
.39662a	a9 00		lda #$00	                    LDA #0                                  ; There are no partitions on the disk
.39662c	8f 02 a0 38	sta $38a002	                    STA @l PARTITION
.396630	e2 20		sep #$20	                SEP #$20        ; set A short
.396632	af 0d a3 38	lda $38a30d	                    LDA DOS_SECTOR+BPB_SECPERCLUS12_OFF     ; Get the # of sectors per cluster (usually 1)
.396636	8f 03 a0 38	sta $38a003	                    STA @l SECTORS_PER_CLUSTER
.39663a	c2 20		rep #$20	                REP #$20        ; set A long
.39663c	a9 00 00	lda #$0000	                    LDA #0                                  ; First sector of the "partition" is 0
.39663f	8f 04 a0 38	sta $38a004	                    STA @l FIRSTSECTOR
.396643	8f 06 a0 38	sta $38a006	                    STA @l FIRSTSECTOR+2
.396647	af 16 a3 38	lda $38a316	                    LDA DOS_SECTOR+BPB_SECPERFAT12_OFF      ; Get the number of sectors per FAT
.39664b	8f 10 a0 38	sta $38a010	                    STA @l SEC_PER_FAT
.39664f	a9 00 00	lda #$0000	                    LDA #0
.396652	8f 12 a0 38	sta $38a012	                    STA @l SEC_PER_FAT+2
.396656	a9 01 00	lda #$0001	                    LDA #1                                  ; FAT#1 begins at sector 1
.396659	8f 14 a0 38	sta $38a014	                    STA @l FAT_BEGIN_LBA
.39665d	18		clc		                    CLC
.39665e	6f 10 a0 38	adc $38a010	                    ADC @l SEC_PER_FAT
.396662	8f 18 a0 38	sta $38a018	                    STA @l FAT2_BEGIN_LBA                   ; FAT#2 begins SEC_PER_FAT sectors later
.396666	a9 00 00	lda #$0000	                    LDA #0
.396669	8f 16 a0 38	sta $38a016	                    STA @l FAT_BEGIN_LBA+2
.39666d	8f 1a a0 38	sta $38a01a	                    STA @L FAT2_BEGIN_LBA+2
.396671	18		clc		                    CLC                                     ; Calculate the root directory's starting sector
.396672	af 18 a0 38	lda $38a018	                    LDA @l FAT2_BEGIN_LBA
.396676	6f 10 a0 38	adc $38a010	                    ADC @l SEC_PER_FAT
.39667a	8f 20 a0 38	sta $38a020	                    STA @l ROOT_DIR_FIRST_CLUSTER           ; ROOT_DIR_FIRST_CLUSTER will be a sector LBA for FAT12!
.39667e	a9 00 00	lda #$0000	                    LDA #0
.396681	8f 22 a0 38	sta $38a022	                    STA @l ROOT_DIR_FIRST_CLUSTER+2
.396685	af 11 a3 38	lda $38a311	                    LDA DOS_SECTOR+BPB_ROOT_MAX_ENTRY12_OFF ; Get the maximum number of directory entries for the root dir
.396689	8f 24 a0 38	sta $38a024	                    STA @l ROOT_DIR_MAX_ENTRY
.39668d	4a		lsr a		                    LSR A                                   ; 16 entries per sector
.39668e	4a		lsr a		                    LSR A
.39668f	4a		lsr a		                    LSR A
.396690	4a		lsr a		                    LSR A                                   ; So now A is the number of sectors in the root directory
.396691	18		clc		                    CLC
.396692	6f 20 a0 38	adc $38a020	                    ADC @L ROOT_DIR_FIRST_CLUSTER           ; Add that to the first sector LBA for the root directory
.396696	8f 1c a0 38	sta $38a01c	                    STA @l CLUSTER_BEGIN_LBA                ; And that is the LBA for the first cluster
.39669a	a9 00 00	lda #$0000	                    LDA #0
.39669d	8f 1e a0 38	sta $38a01e	                    STA @l CLUSTER_BEGIN_LBA+2
.3966a1	af 13 a3 38	lda $38a313	                    LDA DOS_SECTOR+BPB_TOTAL_SECTORS        ; Set the sector limit
.3966a5	8f 08 a0 38	sta $38a008	                    STA @l SECTORCOUNT
.3966a9	a9 00 00	lda #$0000	                    LDA #0
.3966ac	8f 0a a0 38	sta $38a00a	                    STA @l SECTORCOUNT+2
.3966b0	af 0e a3 38	lda $38a30e	                    LDA DOS_SECTOR+BPB_RSRVCLUS_OFF         ; Get the number of reserved clusters
.3966b4	8f 0c a0 38	sta $38a00c	                    STA @l NUM_RSRV_SEC
.3966b8	a9 00 02	lda #$0200	                    LDA #DOS_SECTOR_SIZE                    ; Set the size of a FAT12 cluster
.3966bb	8f 0e a0 38	sta $38a00e	                    STA @l CLUSTER_SIZE
.3966bf	e2 20		sep #$20	                SEP #$20        ; set A short
.3966c1	af 26 a3 38	lda $38a326	                    LDA DOS_SECTOR+BPB_SIGNATUREB           ; Is signature B $29?
.3966c5	c9 29		cmp #$29	                    CMP #BPB_EXTENDED_RECORD
.3966c7	80 14		bra $3966dd	                    BRA no_volume_id                        ; No: there is no volume ID
.3966c9					is_extended
.3966c9	c2 20		rep #$20	                REP #$20        ; set A long
.3966cb	af 27 a3 38	lda $38a327	                    LDA DOS_SECTOR+BPB_VOLUMEID             ; Yes: set the volume ID
.3966cf	8f 26 a0 38	sta $38a026	                    STA @l VOLUME_ID
.3966d3	af 29 a3 38	lda $38a329	                    LDA DOS_SECTOR+BPB_VOLUMEID+2
.3966d7	8f 28 a0 38	sta $38a028	                    STA @l VOLUME_ID+2
.3966db	80 0d		bra $3966ea	                    BRA ret_success
.3966dd					no_volume_id
.3966dd	c2 20		rep #$20	                REP #$20        ; set A long
.3966df	a9 00 00	lda #$0000	                    LDA #0                                  ; No: blank the Volume ID
.3966e2	8f 26 a0 38	sta $38a026	                    STA @l VOLUME_ID
.3966e6	8f 28 a0 38	sta $38a028	                    STA @L VOLUME_ID+2
.3966ea					ret_success
.3966ea	e2 20		sep #$20	                SEP #$20        ; set A short
.3966ec	a9 00		lda #$00	                    LDA #0
.3966ee	85 20		sta $0320	                    STA BIOS_STATUS
.3966f0	28		plp		                    PLP
.3966f1	2b		pld		                    PLD
.3966f2	ab		plb		                    PLB
.3966f3	38		sec		                    SEC
.3966f4	6b		rtl		                    RTL
.3966f5	28		plp		pass_failure        PLP
.3966f6	2b		pld		                    PLD
.3966f7	ab		plb		                    PLB
.3966f8	18		clc		                    CLC
.3966f9	6b		rtl		                    RTL
.3966fa					FDC_CMDBLOCK
.3966fa	8b		phb		                    PHB
.3966fb	0b		phd		                    PHD
.3966fc	08		php		                    PHP
.3966fd	48		pha		                PHA             ; begin setdbr macro
.3966fe	08		php		                PHP
.3966ff	e2 20		sep #$20	                SEP #$20        ; set A short
.396701	a9 00		lda #$00	                LDA #0
.396703	48		pha		                PHA
.396704	ab		plb		                PLB
.396705	28		plp		                PLP
.396706	68		pla		                PLA             ; end setdbr macro
.396707	48		pha		                PHA             ; begin setdp macro
.396708	08		php		                PHP
.396709	c2 20		rep #$20	                REP #$20        ; set A long
.39670b	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39670e	5b		tcd		                TCD
.39670f	28		plp		                PLP
.396710	68		pla		                PLA             ; end setdp macro
.396711	e2 30		sep #$30	                SEP #$30        ; set A&X short
.396713	e0 01		cpx #$01	                    CPX #FDC_DEVCMD_MOTOR_ON
.396715	f0 0f		beq $396726	                    BEQ motor_on
.396717	e0 02		cpx #$02	                    CPX #FDC_DEVCMD_MOTOR_OFF
.396719	f0 11		beq $39672c	                    BEQ motor_off
.39671b	e0 03		cpx #$03	                    CPX #FDC_DEVCMD_RECAL
.39671d	f0 13		beq $396732	                    BEQ recalibrate
.39671f	64 20		stz $0320	ret_success         STZ BIOS_STATUS
.396721	28		plp		                    PLP
.396722	2b		pld		                    PLD
.396723	ab		plb		                    PLB
.396724	38		sec		                    SEC
.396725	6b		rtl		                    RTL
.396726	22 be 60 39	jsl $3960be	motor_on            JSL FDC_Motor_On
.39672a	80 f3		bra $39671f	                    BRA ret_success
.39672c	22 f2 60 39	jsl $3960f2	motor_off           JSL FDC_Motor_Off
.396730	80 ed		bra $39671f	                    BRA ret_success
.396732	22 1d 61 39	jsl $39611d	recalibrate         JSL FDC_Recalibrate_Command
.396736	b0 e7		bcs $39671f	                    BCS ret_success
.396738	28		plp		pass_failure        PLP
.396739	2b		pld		                    PLD
.39673a	ab		plb		                    PLB
.39673b	18		clc		                    CLC
.39673c	6b		rtl		                    RTL
.39673d					FDC_CHK_MEDIA
.39673d	0b		phd		                    PHD
.39673e	08		php		                    PHP
.39673f	48		pha		                PHA             ; begin setdp macro
.396740	08		php		                PHP
.396741	c2 20		rep #$20	                REP #$20        ; set A long
.396743	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396746	5b		tcd		                TCD
.396747	28		plp		                PLP
.396748	68		pla		                PLA             ; end setdp macro
.396749	22 be 60 39	jsl $3960be	                    JSL FDC_Motor_On                ; Turn on the motor
.39674d	e2 20		sep #$20	                SEP #$20        ; set A short
.39674f	af f7 13 af	lda $af13f7	                    LDA @l SIO_FDC_DIR              ; Check if the DSKCHG bit is set
.396753	89 80		bit #$80	                    BIT #FDC_DIR_DSKCHG
.396755	f0 42		beq $396799	                    BEQ ret_true                    ; If not: assume the disk is present
.396757	a9 00		lda #$00	                    LDA #0
.396759	85 00		sta $0300	                    STA FDC_DRIVE
.39675b	a9 00		lda #$00	                    LDA #0
.39675d	85 01		sta $0301	                    STA FDC_HEAD
.39675f	a9 50		lda #$50	                    LDA #80
.396761	85 02		sta $0302	                    STA FDC_CYLINDER
.396763	22 fd 62 39	jsl $3962fd	                    JSL FDC_Seek_Track              ; Attempt to seek to track 80
.396767	90 34		bcc $39679d	                    BCC ret_false                   ; If fail: return false
.396769	c2 10		rep #$10	                REP #$10        ; set X long
.39676b	a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.39676e	a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.396771	22 0e 15 39	jsl $39150e	                    JSL IDELAY
.396775	22 52 61 39	jsl $396152	                    JSL FDC_Sense_Int_Status
.396779	a5 06		lda $0306	                    LDA FDC_ST0
.39677b	29 d0		and #$d0	                    AND #%11010000
.39677d	d0 1e		bne $39679d	                    BNE ret_false
.39677f	22 1d 61 39	jsl $39611d	                    JSL FDC_Recalibrate_Command     ; Attempt to recalibrate
.396783	90 18		bcc $39679d	                    BCC ret_false                   ; If fail: return false
.396785	a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.396788	a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.39678b	22 0e 15 39	jsl $39150e	                    JSL IDELAY
.39678f	22 52 61 39	jsl $396152	                    JSL FDC_Sense_Int_Status
.396793	a5 06		lda $0306	                    LDA FDC_ST0
.396795	29 d0		and #$d0	                    AND #%11010000
.396797	d0 04		bne $39679d	                    BNE ret_false
.396799					ret_true
.396799	28		plp		                    PLP
.39679a	2b		pld		                    PLD
.39679b	38		sec		                    SEC
.39679c	6b		rtl		                    RTL
.39679d					ret_false
.39679d	28		plp		                    PLP
.39679e	2b		pld		                    PLD
.39679f	18		clc		                    CLC
.3967a0	6b		rtl		                    RTL
.3967a1					FDC_WRITEVBR
.3967a1	8b		phb		                    PHB
.3967a2	0b		phd		                    PHD
.3967a3	08		php		                    PHP
.3967a4	48		pha		                PHA             ; begin setdbr macro
.3967a5	08		php		                PHP
.3967a6	e2 20		sep #$20	                SEP #$20        ; set A short
.3967a8	a9 00		lda #$00	                LDA #0
.3967aa	48		pha		                PHA
.3967ab	ab		plb		                PLB
.3967ac	28		plp		                PLP
.3967ad	68		pla		                PLA             ; end setdbr macro
.3967ae	48		pha		                PHA             ; begin setdp macro
.3967af	08		php		                PHP
.3967b0	c2 20		rep #$20	                REP #$20        ; set A long
.3967b2	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3967b5	5b		tcd		                TCD
.3967b6	28		plp		                PLP
.3967b7	68		pla		                PLA             ; end setdp macro
.3967b8	22 d4 65 39	jsl $3965d4	                    JSL FDC_MOUNT               ; Mount the floppy disk
.3967bc	c2 30		rep #$30	                REP #$30        ; set A&X long
.3967be	a9 00 00	lda #$0000	                    LDA #0                      ; Clear the sector buffer
.3967c1	a2 00 00	ldx #$0000	                    LDX #0
.3967c4	9f 00 a3 38	sta $38a300,x	clr_loop            STA DOS_SECTOR,X
.3967c8	e8		inx		                    INX
.3967c9	e8		inx		                    INX
.3967ca	e0 00 02	cpx #$0200	                    CPX #512
.3967cd	d0 f5		bne $3967c4	                    BNE clr_loop
.3967cf	e2 20		sep #$20	                SEP #$20        ; set A short
.3967d1	a2 00 00	ldx #$0000	                    LDX #0                      ; Copy the prototype VBR to the sector buffer
.3967d4	bf 37 68 39	lda $396837,x	copy_loop           LDA FDC_VBR_BEGIN,X
.3967d8	9f 00 a3 38	sta $38a300,x	                    STA DOS_SECTOR,X
.3967dc	e8		inx		                    INX
.3967dd	e0 c9 00	cpx #$00c9	                    CPX #<>(FDC_VBR_END - FDC_VBR_BEGIN + 1)
.3967e0	d0 f2		bne $3967d4	                    BNE copy_loop
.3967e2	a0 00 00	ldy #$0000	                    LDY #0                      ; Copy the boot binary path to the VBR
.3967e5	a2 40 00	ldx #$0040	                    LDX #FDC_VBR_PATH
.3967e8	b7 3c		lda [$035c],y	path_copy_loop      LDA [DOS_RUN_PTR],Y
.3967ea	9f 00 a3 38	sta $38a300,x	                    STA DOS_SECTOR,X
.3967ee	f0 07		beq $3967f7	                    BEQ path_copy_done
.3967f0	e8		inx		                    INX
.3967f1	c8		iny		                    INY
.3967f2	c0 80 00	cpy #$0080	                    CPY #128
.3967f5	d0 f1		bne $3967e8	                    BNE path_copy_loop
.3967f7					path_copy_done
.3967f7	c2 20		rep #$20	                REP #$20        ; set A long
.3967f9	a9 55 aa	lda #$aa55	                    LDA #$AA55                  ; Set the VBR signature bytes at the end
.3967fc	8f fe a4 38	sta $38a4fe	                    STA DOS_SECTOR+BPB_SIGNATURE
.396800	c2 20		rep #$20	                REP #$20        ; set A long
.396802	a9 00 a3	lda #$a300	                    LDA #<>DOS_SECTOR           ; Point to the BIOS buffer
.396805	85 06		sta $0326	                    STA BIOS_BUFF_PTR
.396807	a9 38 00	lda #$0038	                    LDA #`DOS_SECTOR
.39680a	85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.39680c	a9 00 00	lda #$0000	                    LDA #0                      ; Set the sector to #0 (boot record)
.39680f	85 02		sta $0322	                    STA BIOS_LBA
.396811	85 04		sta $0324	                    STA BIOS_LBA+2
.396813	e2 20		sep #$20	                SEP #$20        ; set A short
.396815	a9 00		lda #$00	                    LDA #BIOS_DEV_FDC
.396817	85 01		sta $0321	                    STA BIOS_DEV
.396819	22 24 10 38	jsl $381024	                    JSL PUTBLOCK                ; Attempt to write the boot record
.39681d	b0 09		bcs $396828	                    BCS ret_success
.39681f	22 f2 60 39	jsl $3960f2	                    JSL FDC_Motor_Off
.396823	28		plp		                    PLP                         ; Return the failure
.396824	2b		pld		                    PLD
.396825	ab		plb		                    PLB
.396826	18		clc		                    CLC
.396827	6b		rtl		                    RTL
.396828	22 f2 60 39	jsl $3960f2	ret_success         JSL FDC_Motor_Off
.39682c	e2 20		sep #$20	                SEP #$20        ; set A short
.39682e	a9 00		lda #$00	                    LDA #0
.396830	85 00		sta $0320	                    STA BIOS_STATUS
.396832	28		plp		                    PLP
.396833	2b		pld		                    PLD
.396834	ab		plb		                    PLB
.396835	38		sec		                    SEC
.396836	6b		rtl		                    RTL
=62					FDC_BOOT_START = 62                         ; Entry point to the boot code
=64					FDC_VBR_PATH = 64                           ; Offset to the path in the VBR
.396837					FDC_VBR_BEGIN
>396837	eb 00 90			start               .byte $EB, $00, $90     ; Entry point
>39683a	43 32 35 36 44 4f 53 20		magic               .text "C256DOS "        ; OEM name / magic text for booting
>396842	00 02				bytes_per_sec       .word 512               ; How many bytes per sector
>396844	01				sec_per_cluster     .byte 1                 ; How many sectors per cluster
>396845	01 00				rsrv_sectors        .word 1                 ; Number of reserved sectors
>396847	02				num_fat             .byte 2                 ; Number of FATs
>396848	e0 00				max_dir_entry       .word (32-18)*16        ; Total number of root dir entries
>39684a	40 0b				total_sectors       .word 2880              ; Total sectors
>39684c	f0				media_descriptor    .byte $F0               ; 3.5" 1.44 MB floppy 80 tracks, 18 tracks per sector
>39684d	09 00				sec_per_fat         .word 9                 ; Sectors per FAT
>39684f	12 00				sec_per_track       .word 18                ; Sectors per track
>396851	02 00				num_head            .word 2                 ; Number of heads
>396853	00 00 00 00			ignore2             .dword 0
>396857	00 00 00 00			fat32_sector        .dword 0                ; # of sectors in FAT32
>39685b	00 00				ignore3             .word 0
>39685d	29				boot_signature      .byte $29
>39685e	78 56 34 12			volume_id           .dword $12345678        ; Replaced by code
>396862	55 4e 54 49 54 4c 45 44		volume_name         .text "UNTITLED   "     ; Replace by code
>39686a	20 20 20
>39686d	46 41 54 31 32 20 20 20		fs_type             .text "FAT12   "
.396875	80 40		bra $3968b7	                    BRA vbr_start
>396877					file_path           .fill 64                ; Reserve 64 bytes for a path and any options
.3968b7					vbr_start
.3968b7	c2 20		rep #$20	                REP #$20        ; set A long
.3968b9	a9 40 a3	lda #$a340	                    LDA #<>(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.3968bc	8f 60 03 00	sta $000360	                    STA @l DOS_RUN_PARAM
.3968c0	a9 38 00	lda #$0038	                    LDA #`(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.3968c3	8f 62 03 00	sta $000362	                    STA @l DOS_RUN_PARAM+2
.3968c7	22 be 57 39	jsl $3957be	                    JSL IF_RUN              ; And try to execute the binary file
.3968cb	b0 0c		bcs $3968d9	                    BCS lock                ; If it returned success... lock up... I guess?
.3968cd					error
.3968cd	e2 20		sep #$20	                SEP #$20        ; set A short
.3968cf	4b		phk		                    PHK                     ; Otherwise, print an error message
.3968d0	ab		plb		                    PLB
.3968d1	62 08 00	per $3968dc	                    PER message
.3968d4	fa		plx		                    PLX
.3968d5	22 1c 10 38	jsl $38101c	                    JSL PUTS
.3968d9	ea		nop		lock                NOP                     ; And lock up
.3968da	80 fd		bra $3968d9	                    BRA lock
>3968dc	43 6f 75 6c 64 20 6e 6f		message             .null "Could not find a bootable binary.",13
>3968e4	74 20 66 69 6e 64 20 61 20 62 6f 6f 74 61 62 6c
>3968f4	65 20 62 69 6e 61 72 79 2e 0d 00
.3968ff					FDC_VBR_END

;******  Return to file: src\kernel.asm


;******  Processing file: src\ide_library.asm

.0000					IDE_ID
>0000	00 00				General_Config        .word $0000
>0002	00 00				Obsolete0             .word $0000
>0004	00 00				Specific_Config       .word $0000
>0006	00 00				Obsolete1             .word $0000
>0008	00 00				Retired0              .word $0000
>000a	00 00				Retired1              .word $0000
>000c	00 00				Obsolete2             .word $0000
>000e	00 00				Reserved_CFlash0      .word $0000
>0010	00 00				Reserved_CFlash1      .word $0000
>0012	00 00				Retired2              .word $0000
>0014	00 00 00 00 00 00 00 00		Serial_Number_String  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>001c	00 00 00 00 00 00 00 00 00 00 00 00
>0028	00 00 00 00			Retired3              .word $0000, $0000
>002c	00 00				Obsolete3             .word $0000
>002e	00 00 00 00 00 00 00 00		Firmware_Rev_String   .byte $00, $00, $00, $00, $00, $00, $00, $00
>0036	00 00 00 00 00 00 00 00		Model_Number_String   .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>003e	00 00 00 00 00 00 00 00
>0046	00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>004e	00 00 00 00 00 00 00 00
>0056	00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00
>005e	00 00				Max_Number_Logic_Sec  .word $0000
>0060	00 00				Trusted_Comp_Feature  .word $0000
>0062	00 00 00 00			Capabilities          .word $0000, $0000
>0066	00 00 00 00			Obsolete4             .word $0000, $0000
>006a	00 00				Free_Fall_Control     .word $0000
>006c	00 00 00 00 00 00 00 00		Obsolete5             .word $0000, $0000, $0000, $0000, $0000
>0074	00 00
>0076	00 00				Reserved0             .word $0000
>0078	00 00 00 00			Total_Addy_Logic_Sec  .word $0000, $0000
>007c	00 00				Obsolete6             .word $0000
>007e	00 00 00 00			Reserved1             .word $0000, $0000
>0082	00 00				Min_Multiword_DMA_Trf .word $0000
>0084	00 00				Manu_Recommended_Mult .word $0000
>0086	00 00				Min_PIO_Trf           .word $0000      ; Word 67
>0088	00 00				Min_PIO_Trf_with_IORD .word $0000      ; Word 68
>008a	00 00 00 00			Reserved2             .word $0000, $0000
>008e	00 00 00 00 00 00 00 00		Reserved3             .word $0000, $0000, $0000, $0000
>0096	00 00				Queue_Dept            .word $0000
>0098	00 00				SATA_Capabilities     .word $0000
>009a	00 00				Reserved_SATA         .word $0000
>009c	00 00				Sup_Feat_SATA         .word $0000
>009e	00 00				Sup_Feat_SATA_Enabled .word $0000    ; Word 79
>00a0	00 00				Major_Version_Number  .word $0000    ; Word 80
>00a2	00 00				Minor_Version_Number  .word $0000    ; Word 81
>00a4	00 00 00 00 00 00 00 00		Cmd_And_Features_Sup  .word $0000, $0000, $0000, $0000, $0000, $0000
>00ac	00 00 00 00
>00b0	00 00				UDMA_Modes            .word $0000
>00b2	00 00 00 00			Reserved4             .word $0000, $0000 ; Word 89
>00b6	00 00				Current_APM_Level     .word $0000
>00b8	00 00				Master_Password_Ident .word $0000
>00ba	00 00				Hardware_Reset_Result .word $0000
>00bc	00 00				Current_AAM_Value     .word $0000  ; Word 94
>00be	00 00				Stream_Min_Req_Size   .word $0000  ; Word 95
>00c0	00 00				Stream_Trf_Time_DMA   .word $0000  ; Word 96
>00c2	00 00				Stream_Access_Lat     .word $0000
>00c4	00 00 00 00			Streaming_Perf_Gran   .word $0000, $0000
>00c8	00 00 00 00 00 00 00 00		Tot_Num_Add_Logic_Sec .word $0000, $0000, $0000, $0000
>00d0	00 00				Streaming_Trf_Time    .word $0000 ; Word 104
>00d2	00 00				Reserved5             .word $0000 ; Word 105
.3968ff					IDE_TEST
.3968ff	08		php		                PHP
.396900	c2 20		rep #$20	                REP #$20        ; set A long
.396902	a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.396905	8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.396909	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.39690c	8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.396910	22 2d 6a 39	jsl $396a2d	                JSL IDE_IDENTIFY
.396914	b0 03		bcs $396919	                BCS id_ok
.396916	82 ab 00	brl $3969c4	                BRL done
.396919					id_ok
.396919	c2 10		rep #$10	                REP #$10        ; set X long
.39691b	e2 20		sep #$20	                SEP #$20        ; set A short
.39691d	a0 28 00	ldy #$0028	                LDY #40
.396920	a2 36 00	ldx #$0036	                LDX #27*2
.396923	bf 01 a3 38	lda $38a301,x	pr_model        LDA DOS_SECTOR+1,X
.396927	22 18 10 38	jsl $381018	                JSL PUTC
.39692b	bf 00 a3 38	lda $38a300,x	                LDA DOS_SECTOR,X
.39692f	22 18 10 38	jsl $381018	                JSL PUTC
.396933	e8		inx		                INX
.396934	e8		inx		                INX
.396935	88		dey		                DEY
.396936	88		dey		                DEY
.396937	d0 ea		bne $396923	                BNE pr_model
.396939	c2 10		rep #$10	                REP #$10        ; set X long
.39693b	e2 20		sep #$20	                SEP #$20        ; set A short
.39693d	a0 14 00	ldy #$0014	                LDY #20
.396940	a2 14 00	ldx #$0014	                LDX #10*2
.396943	bf 01 a3 38	lda $38a301,x	pr_serial       LDA DOS_SECTOR+1,X
.396947	22 18 10 38	jsl $381018	                JSL PUTC
.39694b	bf 00 a3 38	lda $38a300,x	                LDA DOS_SECTOR,X
.39694f	22 18 10 38	jsl $381018	                JSL PUTC
.396953	e8		inx		                INX
.396954	e8		inx		                INX
.396955	88		dey		                DEY
.396956	88		dey		                DEY
.396957	d0 ea		bne $396943	                BNE pr_serial
.396959	22 6c 10 38	jsl $38106c	                JSL PRINTCR
.39695d	c2 30		rep #$30	                REP #$30        ; set A&X long
.39695f	a9 01 00	lda #$0001	                LDA #1                 ; Set LBA = 1
.396962	8f 22 03 00	sta $000322	                STA @l BIOS_LBA
.396966	a9 00 00	lda #$0000	                LDA #0
.396969	8f 24 03 00	sta $000324	                STA @l BIOS_LBA+2
.39696d	a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.396970	8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.396974	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.396977	8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.39697b	a2 00 00	ldx #$0000	                LDX #0                  ; Initialize the block to some recognizable data
.39697e	a9 a5 5a	lda #$5aa5	                LDA #$5AA5
.396981	9f 00 a3 38	sta $38a300,x	init_loop       STA DOS_SECTOR,X
.396985	e8		inx		                INX
.396986	e8		inx		                INX
.396987	e0 00 02	cpx #$0200	                CPX #512
.39698a	d0 f5		bne $396981	                BNE init_loop
.39698c	22 4c 6b 39	jsl $396b4c	                JSL IDE_PUTBLOCK        ; Attempt to write the block
.396990	b0 06		bcs $396998	                BCS read_sect1
.396992	22 6c 10 38	jsl $38106c	                JSL PRINTCR
.396996	80 2c		bra $3969c4	                BRA done
.396998	a9 01 00	lda #$0001	read_sect1      LDA #1                 ; Set LBA = 1
.39699b	8f 22 03 00	sta $000322	                STA @l BIOS_LBA
.39699f	a9 00 00	lda #$0000	                LDA #0
.3969a2	8f 24 03 00	sta $000324	                STA @l BIOS_LBA+2
.3969a6	a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS
.3969a9	8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.3969ad	a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.3969b0	8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.3969b4	22 bb 6a 39	jsl $396abb	                JSL IDE_GETBLOCK        ; Attempt to read the block
.3969b8	b0 06		bcs $3969c0	                BCS all_ok
.3969ba	22 6c 10 38	jsl $38106c	                JSL PRINTCR
.3969be	80 04		bra $3969c4	                BRA done
.3969c0					all_ok
.3969c0	22 6c 10 38	jsl $38106c	                JSL PRINTCR
.3969c4	28		plp		done            PLP
.3969c5	6b		rtl		                RTL
.3969c6					IDE_INIT
.3969c6	e2 20		sep #$20	                SEP #$20        ; set A short
.3969c8	20 e9 69	jsr $3969e9	              JSR IDE_DRIVE_BSY ; Check to see if drive is busy
.3969cb	a9 00		lda #$00	              LDA #$00
.3969cd	8f 35 e8 af	sta $afe835	              STA IDE_CLDR_HI
.3969d1	8f 34 e8 af	sta $afe834	              STA IDE_CLDR_LO
.3969d5	8f 32 e8 af	sta $afe832	              STA IDE_SECT_CNT
.3969d9	a9 01		lda #$01	              LDA #$01
.3969db	8f 33 e8 af	sta $afe833	              STA IDE_SECT_SRT
.3969df	a9 a0		lda #$a0	              LDA #$A0 ; HEAD 0 - Select Master Drive
.3969e1	8f 36 e8 af	sta $afe836	              STA IDE_HEAD
.3969e5	20 07 6a	jsr $396a07	              JSR IDE_DRV_READY_NOTBUSY
.3969e8	6b		rtl		              RTL
.3969e9					IDE_DRIVE_BSY
.3969e9	08		php		                PHP
.3969ea	e2 20		sep #$20	                SEP #$20        ; set A short
.3969ec	af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.3969f0	29 80		and #$80	                AND #IDE_STAT_BSY         ; Check for RDY Bit, this needs to be 1'b1
.3969f2	c9 80		cmp #$80	                CMP #IDE_STAT_BSY         ; If not go read again
.3969f4	f0 f6		beq $3969ec	                BEQ loop
.3969f6	28		plp		                PLP
.3969f7	60		rts		                RTS
.3969f8					IDE_DRIVE_READY
.3969f8	08		php		                PHP
.3969f9	e2 20		sep #$20	                SEP #$20        ; set A short
.3969fb	af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.3969ff	29 40		and #$40	                AND #IDE_STAT_DRDY          ; Check to see if the Busy Signal is Cleared
.396a01	c9 40		cmp #$40	                CMP #IDE_STAT_DRDY          ; if it is still one, then go back to read again.
.396a03	d0 f6		bne $3969fb	                BNE loop
.396a05	28		plp		                PLP
.396a06	60		rts		                RTS
.396a07					IDE_DRV_READY_NOTBUSY
.396a07	08		php		                PHP
.396a08	e2 20		sep #$20	                SEP #$20        ; set A short
.396a0a	af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT                 ; Check the status
.396a0e	29 c0		and #$c0	                AND #IDE_STAT_BSY | IDE_STAT_DRDY
.396a10	c9 40		cmp #$40	                CMP #IDE_STAT_DRDY                  ; Is it READY but not BUSY?
.396a12	d0 f6		bne $396a0a	                BNE loop                            ; No: keep waiting
.396a14	28		plp		ret_success     PLP                                 ; Return success
.396a15	38		sec		                SEC
.396a16	60		rts		                RTS
.396a17	8f 07 03 00	sta $000307	ret_failure     STA @l FDC_ST1                      ; Save the status code to FDC_ST1
.396a1b	28		plp		                PLP                                 ; Return failure
.396a1c	18		clc		                CLC
.396a1d	60		rts		                RTS
.396a1e					IDE_NOT_DRQ
.396a1e	08		php		                PHP
.396a1f	e2 20		sep #$20	                SEP #$20        ; set A short
.396a21	af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT     ; Get the status
.396a25	29 08		and #$08	                AND #IDE_STAT_DRQ
.396a27	c9 08		cmp #$08	                CMP #IDE_STAT_DRQ       ; Is the DRQ bit set?
.396a29	d0 f6		bne $396a21	                BNE loop                ; No: keep waiting
.396a2b	28		plp		                PLP
.396a2c	60		rts		                RTS
.396a2d					IDE_IDENTIFY
.396a2d	5a		phy		                PHY
.396a2e	8b		phb		                PHB
.396a2f	0b		phd		                PHD
.396a30	08		php		                PHP
.396a31	48		pha		                PHA             ; begin setdbr macro
.396a32	08		php		                PHP
.396a33	e2 20		sep #$20	                SEP #$20        ; set A short
.396a35	a9 00		lda #$00	                LDA #0
.396a37	48		pha		                PHA
.396a38	ab		plb		                PLB
.396a39	28		plp		                PLP
.396a3a	68		pla		                PLA             ; end setdbr macro
.396a3b	48		pha		                PHA             ; begin setdp macro
.396a3c	08		php		                PHP
.396a3d	c2 20		rep #$20	                REP #$20        ; set A long
.396a3f	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.396a42	5b		tcd		                TCD
.396a43	28		plp		                PLP
.396a44	68		pla		                PLA             ; end setdp macro
.396a45	e2 20		sep #$20	                SEP #$20        ; set A short
.396a47	20 07 6a	jsr $396a07	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.396a4a	a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.396a4c	29 07		and #$07	                AND #$07
.396a4e	09 a0		ora #$a0	                ORA #%10100000                  ; Select DEV=0 and LBA mode = 1
.396a50	8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.396a54	20 07 6a	jsr $396a07	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.396a57	e2 20		sep #$20	                SEP #$20        ; set A short
.396a59	a9 00		lda #$00	                LDA #0                          ; Clear sector count and LBA
.396a5b	8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.396a5f	8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.396a63	8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.396a67	8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.396a6b	a9 ec		lda #$ec	                LDA #IDE_CMD_IDENTIFY           ; The IDENTIFY command
.396a6d	8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT             ; Check the status
.396a71	f0 29		beq $396a9c	                BEQ no_media                    ; If 0: there is no drive
.396a73	20 e9 69	jsr $3969e9	                JSR IDE_DRIVE_BSY               ; Othewise: wait for drive to not be busy
.396a76	20 07 6a	jsr $396a07	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396a79	90 2d		bcc $396aa8	                BCC ret_failure                 ; If an error occurred, return it
.396a7b	c2 30		rep #$30	                REP #$30        ; set A&X long
.396a7d	a0 00 00	ldy #$0000	                LDY #0
.396a80	af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.396a84	97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.396a86	c8		iny		                INY                             ; Move to the next position
.396a87	c8		iny		                INY
.396a88	c0 00 02	cpy #$0200	                CPY #512
.396a8b	d0 f3		bne $396a80	                BNE read_loop
.396a8d					ret_success
.396a8d	e2 20		sep #$20	                SEP #$20        ; set A short
.396a8f	a9 00		lda #$00	                LDA #0
.396a91	85 00		sta $0320	                STA BIOS_STATUS
.396a93	8d 06 03	sta $0306	                STA @w FDC_ST0
.396a96	28		plp		                PLP                             ; Return success
.396a97	2b		pld		                PLD
.396a98	ab		plb		                PLB
.396a99	7a		ply		                PLY
.396a9a	38		sec		                SEC
.396a9b	6b		rtl		                RTL
.396a9c					no_media
.396a9c	e2 20		sep #$20	                SEP #$20        ; set A short
.396a9e	a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA
.396aa0	80 0a		bra $396aac	                BRA pass_failure
.396aa2					not_ata
.396aa2	e2 20		sep #$20	                SEP #$20        ; set A short
.396aa4	a9 8a		lda #$8a	                LDA #BIOS_ERR_NOTATA
.396aa6	80 04		bra $396aac	                BRA pass_failure
.396aa8					ret_failure
.396aa8	e2 20		sep #$20	                SEP #$20        ; set A short
.396aaa	a9 82		lda #$82	                LDA #BIOS_ERR_READ
.396aac	85 00		sta $0320	pass_failure    STA BIOS_STATUS
.396aae	af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.396ab2	8d 06 03	sta $0306	                STA @w FDC_ST0
.396ab5	28		plp		                PLP
.396ab6	2b		pld		                PLD
.396ab7	ab		plb		                PLB
.396ab8	7a		ply		                PLY
.396ab9	18		clc		                CLC
.396aba	6b		rtl		                RTL
.396abb					IDE_GETBLOCK
.396abb	5a		phy		                PHY
.396abc	8b		phb		                PHB
.396abd	0b		phd		                PHD
.396abe	08		php		                PHP
.396abf	48		pha		                PHA             ; begin setdbr macro
.396ac0	08		php		                PHP
.396ac1	e2 20		sep #$20	                SEP #$20        ; set A short
.396ac3	a9 00		lda #$00	                LDA #0
.396ac5	48		pha		                PHA
.396ac6	ab		plb		                PLB
.396ac7	28		plp		                PLP
.396ac8	68		pla		                PLA             ; end setdbr macro
.396ac9	48		pha		                PHA             ; begin setdp macro
.396aca	08		php		                PHP
.396acb	c2 20		rep #$20	                REP #$20        ; set A long
.396acd	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.396ad0	5b		tcd		                TCD
.396ad1	28		plp		                PLP
.396ad2	68		pla		                PLA             ; end setdp macro
.396ad3	e2 20		sep #$20	                SEP #$20        ; set A short
.396ad5	20 07 6a	jsr $396a07	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.396ad8	a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.396ada	29 07		and #$07	                AND #$07
.396adc	09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.396ade	8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.396ae2	20 07 6a	jsr $396a07	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.396ae5	e2 20		sep #$20	                SEP #$20        ; set A short
.396ae7	a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.396ae9	8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.396aed	a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.396aef	8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.396af3	a5 03		lda $0323	                LDA BIOS_LBA+1
.396af5	8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.396af9	a5 04		lda $0324	                LDA BIOS_LBA+2
.396afb	8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.396aff	a9 21		lda #$21	                LDA #IDE_CMD_READ_SECTOR        ; The READ SECTOR command
.396b01	8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.396b05	ea		nop		                NOP                             ; Wait about 500ns
.396b06	ea		nop		                NOP
.396b07	ea		nop		                NOP
.396b08	ea		nop		                NOP
.396b09	20 07 6a	jsr $396a07	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396b0c	90 2b		bcc $396b39	                BCC ret_failure                 ; If an error occurred, return it
.396b0e	e2 20		sep #$20	                SEP #$20        ; set A short
.396b10	af 30 e8 af	lda $afe830	                LDA @l IDE_DATA                 ; Read and toss out one byte from the 8-bit interface
.396b14	a0 00 00	ldy #$0000	                LDY #0
.396b17	c2 20		rep #$20	                REP #$20        ; set A long
.396b19	af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.396b1d	97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.396b1f	c8		iny		                INY                             ; Move to the next position
.396b20	c8		iny		                INY
.396b21	c0 00 02	cpy #$0200	                CPY #512
.396b24	d0 f3		bne $396b19	                BNE read_loop
.396b26	ea		nop		                NOP                             ; Wait about 500ns
.396b27	ea		nop		                NOP
.396b28	ea		nop		                NOP
.396b29	ea		nop		                NOP
.396b2a					ret_success
.396b2a	e2 20		sep #$20	                SEP #$20        ; set A short
.396b2c	a9 00		lda #$00	                LDA #0
.396b2e	85 00		sta $0320	                STA BIOS_STATUS
.396b30	8d 06 03	sta $0306	                STA @w FDC_ST0
.396b33	28		plp		                PLP                             ; Return success
.396b34	2b		pld		                PLD
.396b35	ab		plb		                PLB
.396b36	7a		ply		                PLY
.396b37	38		sec		                SEC
.396b38	6b		rtl		                RTL
.396b39					ret_failure
.396b39	e2 20		sep #$20	                SEP #$20        ; set A short
.396b3b	af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.396b3f	8d 06 03	sta $0306	                STA @w FDC_ST0
.396b42	a9 82		lda #$82	                LDA #BIOS_ERR_READ
.396b44	85 00		sta $0320	                STA BIOS_STATUS
.396b46	28		plp		                PLP
.396b47	2b		pld		                PLD
.396b48	ab		plb		                PLB
.396b49	7a		ply		                PLY
.396b4a	18		clc		                CLC
.396b4b	6b		rtl		                RTL
.396b4c					IDE_PUTBLOCK
.396b4c	5a		phy		                PHY
.396b4d	8b		phb		                PHB
.396b4e	0b		phd		                PHD
.396b4f	08		php		                PHP
.396b50	48		pha		                PHA             ; begin setdbr macro
.396b51	08		php		                PHP
.396b52	e2 20		sep #$20	                SEP #$20        ; set A short
.396b54	a9 00		lda #$00	                LDA #0
.396b56	48		pha		                PHA
.396b57	ab		plb		                PLB
.396b58	28		plp		                PLP
.396b59	68		pla		                PLA             ; end setdbr macro
.396b5a	48		pha		                PHA             ; begin setdp macro
.396b5b	08		php		                PHP
.396b5c	c2 20		rep #$20	                REP #$20        ; set A long
.396b5e	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.396b61	5b		tcd		                TCD
.396b62	28		plp		                PLP
.396b63	68		pla		                PLA             ; end setdp macro
.396b64	e2 20		sep #$20	                SEP #$20        ; set A short
.396b66	20 07 6a	jsr $396a07	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.396b69	a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.396b6b	29 07		and #$07	                AND #$07
.396b6d	09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.396b6f	8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.396b73	20 07 6a	jsr $396a07	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.396b76	e2 20		sep #$20	                SEP #$20        ; set A short
.396b78	a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.396b7a	8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.396b7e	a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.396b80	8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.396b84	a5 03		lda $0323	                LDA BIOS_LBA+1
.396b86	8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.396b8a	a5 04		lda $0324	                LDA BIOS_LBA+2
.396b8c	8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.396b90	a9 30		lda #$30	                LDA #IDE_CMD_WRITE_SECTOR       ; The READ SECTOR command
.396b92	8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.396b96	ea		nop		                NOP                             ; Wait about 500ns
.396b97	ea		nop		                NOP
.396b98	ea		nop		                NOP
.396b99	ea		nop		                NOP
.396b9a	20 07 6a	jsr $396a07	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396b9d	90 33		bcc $396bd2	                BCC ret_failure                 ; If an error occurred, return it
.396b9f	c2 30		rep #$30	                REP #$30        ; set A&X long
.396ba1	a0 00 00	ldy #$0000	                LDY #0
.396ba4	b7 06		lda [$0326],y	read_loop       LDA [BIOS_BUFF_PTR],Y           ; Get the word from the buffer
.396ba6	8f 38 e8 af	sta $afe838	                STA @l IDE_DATA_LO              ; Save the word to the device
.396baa	c8		iny		                INY                             ; Move to the next position
.396bab	c8		iny		                INY
.396bac	c0 00 02	cpy #$0200	                CPY #512
.396baf	d0 f3		bne $396ba4	                BNE read_loop
.396bb1	ea		nop		                NOP                             ; Wait about 500ns
.396bb2	ea		nop		                NOP
.396bb3	ea		nop		                NOP
.396bb4	ea		nop		                NOP
.396bb5	20 07 6a	jsr $396a07	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396bb8	90 18		bcc $396bd2	                BCC ret_failure                 ; If an error occurred, return it
.396bba	af 37 e8 af	lda $afe837	                LDA @l IDE_CMD_STAT             ; Check the status
.396bbe	89 21 00	bit #$0021	                BIT #IDE_STAT_ERR | IDE_STAT_DF
.396bc1	d0 0f		bne $396bd2	                BNE ret_failure                 ; If error: return failure
.396bc3					ret_success
.396bc3	e2 20		sep #$20	                SEP #$20        ; set A short
.396bc5	a9 00		lda #$00	                LDA #0
.396bc7	85 00		sta $0320	                STA BIOS_STATUS
.396bc9	8d 06 03	sta $0306	                STA @w FDC_ST0
.396bcc	28		plp		                PLP                             ; Return success
.396bcd	2b		pld		                PLD
.396bce	ab		plb		                PLB
.396bcf	7a		ply		                PLY
.396bd0	38		sec		                SEC
.396bd1	6b		rtl		                RTL
.396bd2					ret_failure
.396bd2	e2 20		sep #$20	                SEP #$20        ; set A short
.396bd4	af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.396bd8	8d 06 03	sta $0306	                STA @w FDC_ST0
.396bdb	a9 82		lda #$82	                LDA #BIOS_ERR_READ
.396bdd	85 00		sta $0320	                STA BIOS_STATUS
.396bdf	28		plp		                PLP
.396be0	2b		pld		                PLD
.396be1	ab		plb		                PLB
.396be2	7a		ply		                PLY
.396be3	18		clc		                CLC
.396be4	6b		rtl		                RTL

;******  Return to file: src\kernel.asm

.396be5					KERNEL_DATA
>396be5	20 20 20 20 0b 0c 0b 0c		greet_msg       .text $20, $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, " FFFFFFF MMMMMMMM XX    XXX " ,$0D
>396bed	0b 0c 0b 0c 0b 0c 20 46 46 46 46 46 46 46 20 4d
>396bfd	4d 4d 4d 4d 4d 4d 4d 20 58 58 20 20 20 20 58 58
>396c0d	58 20 0d
>396c10	20 20 20 0b 0c 0b 0c 0b		                .text $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM   XX XXX   ",$0D
>396c18	0c 0b 0c 0b 0c 20 46 46 20 20 20 20 20 20 4d 4d
>396c28	20 4d 4d 20 4d 4d 20 20 20 58 58 20 58 58 58 20
>396c38	20 20 0d
>396c3b	20 20 0b 0c 0b 0c 0b 0c		                .text $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FFFFF   MM MM MM    XXX      ",$0D
>396c43	0b 0c 0b 0c 20 46 46 46 46 46 20 20 20 4d 4d 20
>396c53	4d 4d 20 4d 4d 20 20 20 20 58 58 58 20 20 20 20
>396c63	20 20 0d
>396c66	20 0b 0c 0b 0c 0b 0c 0b		                .text $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM  XXX  XX     ",$0D
>396c6e	0c 0b 0c 20 46 46 20 20 20 20 20 20 4d 4d 20 4d
>396c7e	4d 20 4d 4d 20 20 58 58 58 20 20 58 58 20 20 20
>396c8e	20 20 0d
>396c91	0b 0c 0b 0c 0b 0c 0b 0c		                .text $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM XXX     XX    ",$0D
>396c99	0b 0c 20 46 46 20 20 20 20 20 20 4d 4d 20 4d 4d
>396ca9	20 4d 4d 20 58 58 58 20 20 20 20 20 58 58 20 20
>396cb9	20 20 0d
>396cbc	0d 43 32 35 36 20 46 4f		                .text $0D, "C256 FOENIX FMX -- 3,670,016 Bytes Free", $0D
>396cc4	45 4e 49 58 20 46 4d 58 20 2d 2d 20 33 2c 36 37
>396cd4	30 2c 30 31 36 20 42 79 74 65 73 20 46 72 65 65
>396ce4	0d
>396ce5	77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com - Kernel version: "
>396ced	66 6f 65 6e 69 78 2e 63 6f 6d 20 2d 20 4b 65 72
>396cfd	6e 65 6c 20 76 65 72 73 69 6f 6e 3a 20

;******  Processing file: src\version.asm

>396d0a	76 30 2e 31 2e 30 2d 61		.text "v0.1.0-alpha+676 (2020-06-28)"
>396d12	6c 70 68 61 2b 36 37 36 20 28 32 30 32 30 2d 30
>396d22	36 2d 32 38 29

;******  Return to file: src\kernel.asm

>396d27	0d 00				                .text $0D,$00
.396d29					old_pc_style_stat
>396d29	1d 1d 1d 1d 1d 1d 8d 8d		greet_clr_line1 .text $1D, $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>396d31	4d 4d 2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd
>396d41	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396d51	fd fd
>396d53	1d 1d 1d 1d 1d 8d 8d 4d		greet_clr_line2 .text $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>396d5b	4d 2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd
>396d6b	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396d7b	fd fd
>396d7d	1d 1d 1d 1d 8d 8d 4d 4d		greet_clr_line3 .text $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>396d85	2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd fd
>396d95	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396da5	fd fd
>396da7	1d 1d 1d 8d 8d 4d 4d 2d		greet_clr_line4 .text $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>396daf	2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd fd fd
>396dbf	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396dcf	fd fd
>396dd1	1d 1d 8d 8d 4d 4d 2d 2d		greet_clr_line5 .text $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>396dd9	5d 5d fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396de9	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396df9	fd fd
>396dfb	00 00 00 ff			fg_color_lut	  .text $00, $00, $00, $FF
>396dff	00 00 80 ff			                .text $00, $00, $80, $FF
>396e03	00 80 00 ff			                .text $00, $80, $00, $FF
>396e07	80 00 00 ff			                .text $80, $00, $00, $FF
>396e0b	00 80 80 ff			                .text $00, $80, $80, $FF
>396e0f	80 80 00 ff			                .text $80, $80, $00, $FF
>396e13	80 00 80 ff			                .text $80, $00, $80, $FF
>396e17	80 80 80 ff			                .text $80, $80, $80, $FF
>396e1b	00 45 ff ff			                .text $00, $45, $FF, $FF
>396e1f	13 45 8b ff			                .text $13, $45, $8B, $FF
>396e23	00 00 20 ff			                .text $00, $00, $20, $FF
>396e27	00 20 00 ff			                .text $00, $20, $00, $FF
>396e2b	20 00 00 ff			                .text $20, $00, $00, $FF
>396e2f	20 20 20 ff			                .text $20, $20, $20, $FF
>396e33	40 40 40 ff			                .text $40, $40, $40, $FF
>396e37	ff ff ff ff			                .text $FF, $FF, $FF, $FF
>396e3b	00 00 00 ff			bg_color_lut	  .text $00, $00, $00, $FF
>396e3f	00 00 80 ff			                .text $00, $00, $80, $FF
>396e43	00 80 00 ff			                .text $00, $80, $00, $FF
>396e47	80 00 00 ff			                .text $80, $00, $00, $FF
>396e4b	00 20 20 ff			                .text $00, $20, $20, $FF
>396e4f	20 20 00 ff			                .text $20, $20, $00, $FF
>396e53	20 00 20 ff			                .text $20, $00, $20, $FF
>396e57	20 20 20 ff			                .text $20, $20, $20, $FF
>396e5b	1e 69 d2 ff			                .text $1E, $69, $D2, $FF
>396e5f	13 45 8b ff			                .text $13, $45, $8B, $FF
>396e63	00 00 20 ff			                .text $00, $00, $20, $FF
>396e67	00 20 00 ff			                .text $00, $20, $00, $FF
>396e6b	40 00 00 ff			                .text $40, $00, $00, $FF
>396e6f	10 10 10 ff			                .text $10, $10, $10, $FF
>396e73	40 40 40 ff			                .text $40, $40, $40, $FF
>396e77	ff ff ff ff			                .text $FF, $FF, $FF, $FF
>396e7b	43 6d 64 20 30 78 41 41		pass_tst0xAAmsg .text "Cmd 0xAA Test passed...", $0D, $00
>396e83	20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>396e93	00
>396e94	43 6d 64 20 30 78 41 42		pass_tst0xABmsg .text "Cmd 0xAB Test passed...", $0D, $00
>396e9c	20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>396eac	00
>396ead	43 6d 64 20 30 78 36 30		pass_cmd0x60msg .text "Cmd 0x60 Executed.", $0D, $00
>396eb5	20 45 78 65 63 75 74 65 64 2e 0d 00
>396ec1	43 6d 64 20 30 78 46 46		pass_cmd0xFFmsg .text "Cmd 0xFF (Reset) Done.", $0D, $00
>396ec9	20 28 52 65 73 65 74 29 20 44 6f 6e 65 2e 0d 00
>396ed9	43 6d 64 20 30 78 45 45		pass_cmd0xEEmsg .text "Cmd 0xEE Echo Test passed...", $0D, $00
>396ee1	20 45 63 68 6f 20 54 65 73 74 20 70 61 73 73 65
>396ef1	64 2e 2e 2e 0d 00
>396ef7	4b 65 79 62 6f 61 72 64		Success_kb_init .text "Keyboard Present", $0D, $00
>396eff	20 50 72 65 73 65 6e 74 0d 00
>396f09	4e 6f 20 4b 65 79 62 6f		Failed_kb_init  .text "No Keyboard Attached or Failed Init...", $0D, $00
>396f11	61 72 64 20 41 74 74 61 63 68 65 64 20 6f 72 20
>396f21	46 61 69 6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>396f31	4e 4f 20 53 49 47 4e 41		bmp_parser_err0 .text "NO SIGNATURE FOUND.", $00
>396f39	54 55 52 45 20 46 4f 55 4e 44 2e 00
>396f45	42 4d 50 20 4c 4f 41 44		bmp_parser_msg0 .text "BMP LOADED.", $00
>396f4d	45 44 2e 00
>396f51	45 58 45 43 55 54 49 4e		bmp_parser_msg1 .text "EXECUTING BMP PARSER", $00
>396f59	47 20 42 4d 50 20 50 41 52 53 45 52 00
>396f66	49 44 45 20 48 44 44 20		IDE_HDD_Present_msg0 .text "IDE HDD Present:", $00
>396f6e	50 72 65 73 65 6e 74 3a 00
>396f77	42 6f 6f 74 20 44 49 50		boot_invalid    .null "Boot DIP switch settings are invalid."
>396f7f	20 73 77 69 74 63 68 20 73 65 74 74 69 6e 67 73
>396f8f	20 61 72 65 20 69 6e 76 61 6c 69 64 2e 00
>396f9d	50 72 65 73 73 20 52 20		boot_retry      .null "Press R to retry, B to go to BASIC.", 13
>396fa5	74 6f 20 72 65 74 72 79 2c 20 42 20 74 6f 20 67
>396fb5	6f 20 74 6f 20 42 41 53 49 43 2e 0d 00
>396fc2	55 6e 61 62 6c 65 20 74		sdc_err_boot    .null "Unable to read the SD card."
>396fca	6f 20 72 65 61 64 20 74 68 65 20 53 44 20 63 61
>396fda	72 64 2e 00
>396fde	55 6e 61 62 6c 65 20 74		ide_err_boot    .null "Unable to read from the IDE drive."
>396fe6	6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>396ff6	49 44 45 20 64 72 69 76 65 2e 00
>397001	55 6e 61 62 6c 65 20 74		fdc_err_boot    .null "Unable to read from the floppy drive."
>397009	6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>397019	66 6c 6f 70 70 79 20 64 72 69 76 65 2e 00
>397027	42 6f 6f 74 69 6e 67 20		fdc_boot        .null "Booting from floppy..."
>39702f	66 72 6f 6d 20 66 6c 6f 70 70 79 2e 2e 2e 00
>39703e	0d 52 45 41 44 59 2e 00		ready_msg       .null $0D,"READY."
>397046	41 42 4f 52 54 20 45 52		error_01        .null "ABORT ERROR"
>39704e	52 4f 52 00
>397052	30 31 32 33 34 35 36 37		hex_digits      .text "0123456789ABCDEF",0
>39705a	38 39 41 42 43 44 45 46 00
>397063					.align 256
>397100	00 1b 31 32 33 34 35 36		ScanCode_Press_Set1   .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>397108	37 38 39 30 2d 3d 08 09
>397110	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>397118	6f 70 5b 5d 0d 00 61 73
>397120	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>397128	27 60 00 5c 7a 78 63 76
>397130	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>397138	00 20 00 00 00 00 00 00
>397140	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $11, $00, $00, $9D, $00, $1D, $00, $00    ; $40
>397148	11 00 00 9d 00 1d 00 00
>397150	91 00 00 00 00 00 00 00		                      .text $91, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>397158	00 00 00 00 00 00 00 00
>397160	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>397168	00 00 00 00 00 00 00 00
>397170	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>397178	00 00 00 00 00 00 00 00
>397180	00 00 21 40 23 24 25 5e		ScanCode_Shift_Set1   .text $00, $00, $21, $40, $23, $24, $25, $5E, $26, $2A, $28, $29, $5F, $2B, $08, $09    ; $00
>397188	26 2a 28 29 5f 2b 08 09
>397190	51 57 45 52 54 59 55 49		                      .text $51, $57, $45, $52, $54, $59, $55, $49, $4F, $50, $7B, $7D, $0D, $00, $41, $53    ; $10
>397198	4f 50 7b 7d 0d 00 41 53
>3971a0	44 46 47 48 4a 4b 4c 3a		                      .text $44, $46, $47, $48, $4A, $4B, $4C, $3A, $22, $7E, $00, $5C, $5A, $58, $43, $56    ; $20
>3971a8	22 7e 00 5c 5a 58 43 56
>3971b0	42 4e 4d 3c 3e 3f 00 00		                      .text $42, $4E, $4D, $3C, $3E, $3F, $00, $00, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>3971b8	00 20 00 00 00 00 00 00
>3971c0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>3971c8	00 00 00 00 00 00 00 00
>3971d0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3971d8	00 00 00 00 00 00 00 00
>3971e0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3971e8	00 00 00 00 00 00 00 00
>3971f0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3971f8	00 00 00 00 00 00 00 00
>397200	00 1b 31 32 33 34 35 36		ScanCode_Ctrl_Set1    .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>397208	37 38 39 30 2d 3d 08 09
>397210	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>397218	6f 70 5b 5d 0d 00 61 73
>397220	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $03, $76    ; $20
>397228	27 60 00 5c 7a 78 03 76
>397230	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>397238	00 20 00 00 00 00 00 00
>397240	00 00 00 00 00 18 00 00		                      .text $00, $00, $00, $00, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>397248	00 00 00 00 00 00 00 00
>397250	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>397258	00 00 00 00 00 00 00 00
>397260	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>397268	00 00 00 00 00 00 00 00
>397270	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>397278	00 00 00 00 00 00 00 00
>397280	00 1b 31 32 33 34 35 36		ScanCode_Alt_Set1     .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>397288	37 38 39 30 2d 3d 08 09
>397290	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>397298	6f 70 5b 5d 0d 00 61 73
>3972a0	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>3972a8	27 60 00 5c 7a 78 63 76
>3972b0	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>3972b8	00 20 00 00 00 00 00 00
>3972c0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>3972c8	00 00 00 00 00 00 00 00
>3972d0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3972d8	00 00 00 00 00 00 00 00
>3972e0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3972e8	00 00 00 00 00 00 00 00
>3972f0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3972f8	00 00 00 00 00 00 00 00
>397300	00 1b 31 32 33 34 35 36		ScanCode_NumLock_Set1 .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>397308	37 38 39 30 2d 3d 08 09
>397310	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>397318	6f 70 5b 5d 0d 00 61 73
>397320	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>397328	27 60 00 5c 7a 78 63 76
>397330	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>397338	00 20 00 00 00 00 00 00
>397340	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>397348	00 00 00 00 00 00 00 00
>397350	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>397358	00 00 00 00 00 00 00 00
>397360	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>397368	00 00 00 00 00 00 00 00
>397370	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>397378	00 00 00 00 00 00 00 00
>397380	00 00 00 00 00 00 00 00		ScanCode_Prefix_Set1  .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $00
>397388	00 00 00 00 00 00 00 00
>397390	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $10
>397398	00 00 00 00 00 00 00 00
>3973a0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $20
>3973a8	00 00 00 00 00 00 00 00
>3973b0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $30
>3973b8	00 00 00 00 00 00 00 00
>3973c0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $11, $00, $00, $9D, $00, $1D, $00, $00    ; $40
>3973c8	11 00 00 9d 00 1d 00 00
>3973d0	91 00 0f 7f 00 00 00 00		                      .text $91, $00, $0F, $7F, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3973d8	00 00 00 00 00 00 00 00
>3973e0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3973e8	00 00 00 00 00 00 00 00
>3973f0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3973f8	00 00 00 00 00 00 00 00
>397400					.align 256
>397400	00 14 1c 21 26 2a 2e 31		GAMMA_2_2_Tbl         .text  $00, $14, $1c, $21, $26, $2a, $2e, $31, $34, $37, $3a, $3d, $3f, $41, $44, $46
>397408	34 37 3a 3d 3f 41 44 46
>397410	48 4a 4c 4e 50 51 53 55		                      .text  $48, $4a, $4c, $4e, $50, $51, $53, $55, $57, $58, $5a, $5b, $5d, $5e, $60, $61
>397418	57 58 5a 5b 5d 5e 60 61
>397420	63 64 66 67 68 6a 6b 6c		                      .text  $63, $64, $66, $67, $68, $6a, $6b, $6c, $6d, $6f, $70, $71, $72, $73, $75, $76
>397428	6d 6f 70 71 72 73 75 76
>397430	77 78 79 7a 7b 7c 7d 7e		                      .text  $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $80, $81, $82, $83, $84, $85, $86, $87
>397438	80 81 82 83 84 85 86 87
>397440	88 88 89 8a 8b 8c 8d 8e		                      .text  $88, $88, $89, $8a, $8b, $8c, $8d, $8e, $8f, $90, $91, $92, $93, $93, $94, $95
>397448	8f 90 91 92 93 93 94 95
>397450	96 97 98 99 99 9a 9b 9c		                      .text  $96, $97, $98, $99, $99, $9a, $9b, $9c, $9d, $9e, $9e, $9f, $a0, $a1, $a2, $a2
>397458	9d 9e 9e 9f a0 a1 a2 a2
>397460	a3 a4 a5 a5 a6 a7 a8 a8		                      .text  $a3, $a4, $a5, $a5, $a6, $a7, $a8, $a8, $a9, $aa, $ab, $ab, $ac, $ad, $ae, $ae
>397468	a9 aa ab ab ac ad ae ae
>397470	af b0 b0 b1 b2 b2 b3 b4		                      .text  $AF, $b0, $b0, $b1, $b2, $b2, $b3, $b4, $b5, $b5, $b6, $b7, $b7, $b8, $b9, $b9
>397478	b5 b5 b6 b7 b7 b8 b9 b9
>397480	ba bb bb bc bd bd be be		                      .text  $ba, $bb, $bb, $bc, $bd, $bd, $be, $be, $bf, $c0, $c0, $c1, $c2, $c2, $c3, $c4
>397488	bf c0 c0 c1 c2 c2 c3 c4
>397490	c4 c5 c5 c6 c7 c7 c8 c8		                      .text  $c4, $c5, $c5, $c6, $c7, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cb, $cc, $cd, $cd
>397498	c9 ca ca cb cb cc cd cd
>3974a0	ce ce cf d0 d0 d1 d1 d2		                      .text  $ce, $ce, $cf, $d0, $d0, $d1, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d5, $d6, $d6
>3974a8	d2 d3 d4 d4 d5 d5 d6 d6
>3974b0	d7 d8 d8 d9 d9 da da db		                      .text  $d7, $d8, $d8, $d9, $d9, $da, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $df
>3974b8	db dc dc dd de de df df
>3974c0	e0 e0 e1 e1 e2 e2 e3 e3		                      .text  $e0, $e0, $e1, $e1, $e2, $e2, $e3, $e3, $e4, $e4, $e5, $e5, $e6, $e6, $e7, $e7
>3974c8	e4 e4 e5 e5 e6 e6 e7 e7
>3974d0	e8 e8 e9 e9 ea ea eb eb		                      .text  $e8, $e8, $e9, $e9, $ea, $ea, $eb, $eb, $ec, $ec, $ed, $ed, $ee, $ee, $ef, $ef
>3974d8	ec ec ed ed ee ee ef ef
>3974e0	f0 f0 f1 f1 f2 f2 f3 f3		                      .text  $f0, $f0, $f1, $f1, $f2, $f2, $f3, $f3, $f4, $f4, $f5, $f5, $f6, $f6, $f7, $f7
>3974e8	f4 f4 f5 f5 f6 f6 f7 f7
>3974f0	f8 f8 f9 f9 f9 fa fa fb		                      .text  $f8, $f8, $f9, $f9, $f9, $fa, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $fe, $ff
>3974f8	fb fc fc fd fd fe fe ff
>397500					.align 256
>397500	00 0b 11 15 19 1c 1f 22		GAMMA_1_8_Tbl         .text  $00, $0b, $11, $15, $19, $1c, $1f, $22, $25, $27, $2a, $2c, $2e, $30, $32, $34
>397508	25 27 2a 2c 2e 30 32 34
>397510	36 38 3a 3c 3d 3f 41 43		                      .text  $36, $38, $3a, $3c, $3d, $3f, $41, $43, $44, $46, $47, $49, $4a, $4c, $4d, $4f
>397518	44 46 47 49 4a 4c 4d 4f
>397520	50 51 53 54 55 57 58 59		                      .text  $50, $51, $53, $54, $55, $57, $58, $59, $5b, $5c, $5d, $5e, $60, $61, $62, $63
>397528	5b 5c 5d 5e 60 61 62 63
>397530	64 65 67 68 69 6a 6b 6c		                      .text  $64, $65, $67, $68, $69, $6a, $6b, $6c, $6d, $6e, $70, $71, $72, $73, $74, $75
>397538	6d 6e 70 71 72 73 74 75
>397540	76 77 78 79 7a 7b 7c 7d		                      .text  $76, $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $7f, $80, $81, $82, $83, $84, $84
>397548	7e 7f 80 81 82 83 84 84
>397550	85 86 87 88 89 8a 8b 8c		                      .text  $85, $86, $87, $88, $89, $8a, $8b, $8c, $8d, $8e, $8e, $8f, $90, $91, $92, $93
>397558	8d 8e 8e 8f 90 91 92 93
>397560	94 95 95 96 97 98 99 9a		                      .text  $94, $95, $95, $96, $97, $98, $99, $9a, $9a, $9b, $9c, $9d, $9e, $9f, $9f, $a0
>397568	9a 9b 9c 9d 9e 9f 9f a0
>397570	a1 a2 a3 a3 a4 a5 a6 a6		                      .text  $a1, $a2, $a3, $a3, $a4, $a5, $a6, $a6, $a7, $a8, $a9, $aa, $aa, $ab, $ac, $ad
>397578	a7 a8 a9 aa aa ab ac ad
>397580	ad ae af b0 b0 b1 b2 b3		                      .text  $ad, $ae, $af, $b0, $b0, $b1, $b2, $b3, $b3, $b4, $b5, $b6, $b6, $b7, $b8, $b8
>397588	b3 b4 b5 b6 b6 b7 b8 b8
>397590	b9 ba bb bb bc bd bd be		                      .text  $b9, $ba, $bb, $bb, $bc, $bd, $bd, $be, $bf, $bf, $c0, $c1, $c2, $c2, $c3, $c4
>397598	bf bf c0 c1 c2 c2 c3 c4
>3975a0	c4 c5 c6 c6 c7 c8 c8 c9		                      .text  $c4, $c5, $c6, $c6, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cc, $cc, $cd, $ce, $ce
>3975a8	ca ca cb cc cc cd ce ce
>3975b0	cf d0 d0 d1 d2 d2 d3 d4		                      .text  $cf, $d0, $d0, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d6, $d6, $d7, $d7, $d8, $d9
>3975b8	d4 d5 d6 d6 d7 d7 d8 d9
>3975c0	d9 da db db dc dc dd de		                      .text  $d9, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $e0, $e0, $e1, $e1, $e2, $e3
>3975c8	de df e0 e0 e1 e1 e2 e3
>3975d0	e3 e4 e4 e5 e6 e6 e7 e7		                      .text  $e3, $e4, $e4, $e5, $e6, $e6, $e7, $e7, $e8, $e9, $e9, $ea, $ea, $eb, $ec, $ec
>3975d8	e8 e9 e9 ea ea eb ec ec
>3975e0	ed ed ee ef ef f0 f0 f1		                      .text  $ed, $ed, $ee, $ef, $ef, $f0, $f0, $f1, $f1, $f2, $f3, $f3, $f4, $f4, $f5, $f5
>3975e8	f1 f2 f3 f3 f4 f4 f5 f5
>3975f0	f6 f7 f7 f8 f8 f9 f9 fa		                      .text  $f6, $f7, $f7, $f8, $f8, $f9, $f9, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $ff
>3975f8	fb fb fc fc fd fd fe ff
>397600					.align 256
>397600	1d c8 a7 ac 10 d6 52 7c		RANDOM_LUT_Tbl		    .text  $1d, $c8, $a7, $ac, $10, $d6, $52, $7c, $83, $dd, $ce, $39, $cd, $c5, $3b, $15
>397608	83 dd ce 39 cd c5 3b 15
>397610	22 55 3b 94 e0 33 1f 38						              .text  $22, $55, $3b, $94, $e0, $33, $1f, $38, $87, $12, $31, $65, $89, $27, $88, $42
>397618	87 12 31 65 89 27 88 42
>397620	b2 32 72 84 b2 b2 31 52						              .text  $b2, $32, $72, $84, $b2, $b2, $31, $52, $94, $ce, $56, $ec, $fe, $da, $58, $c9
>397628	94 ce 56 ec fe da 58 c9
>397630	c8 5b 53 2a 08 3b 19 c1						              .text  $c8, $5b, $53, $2a, $08, $3b, $19, $c1, $d0, $10, $2c, $b2, $4b, $ea, $32, $61
>397638	d0 10 2c b2 4b ea 32 61
>397640	da 34 33 8f 2b da 49 89						              .text  $da, $34, $33, $8f, $2b, $da, $49, $89, $a1, $e6, $ca, $2d, $b3, $ce, $b0, $79
>397648	a1 e6 ca 2d b3 ce b0 79
>397650	44 aa 32 82 91 e9 29 16						              .text  $44, $aa, $32, $82, $91, $e9, $29, $16, $5f, $e3, $fb, $bd, $15, $2e, $be, $f5
>397658	5f e3 fb bd 15 2e be f5
>397660	e9 4a e4 2e 60 24 94 35						              .text  $e9, $4a, $e4, $2e, $60, $24, $94, $35, $8d, $8f, $2c, $80, $0a, $5e, $99, $36
>397668	8d 8f 2c 80 0a 5e 99 36
>397670	ac ab 21 26 42 7c 5e bc						              .text  $ac, $ab, $21, $26, $42, $7c, $5e, $bc, $13, $52, $44, $2f, $e3, $ef, $44, $a2
>397678	13 52 44 2f e3 ef 44 a2
>397680	86 c1 9c 47 5f 36 6d 02						              .text  $86, $c1, $9c, $47, $5f, $36, $6d, $02, $be, $23, $02, $58, $0a, $52, $5e, $b4
>397688	be 23 02 58 0a 52 5e b4
>397690	9f 06 08 c9 97 cb 9e dd						              .text  $9f, $06, $08, $c9, $97, $cb, $9e, $dd, $d5, $cf, $3e, $df, $c4, $9e, $da, $bb
>397698	d5 cf 3e df c4 9e da bb
>3976a0	9b 5d c9 f5 d9 c3 7e 87						              .text  $9b, $5d, $c9, $f5, $d9, $c3, $7e, $87, $77, $7d, $b1, $3b, $4a, $68, $35, $6e
>3976a8	77 7d b1 3b 4a 68 35 6e
>3976b0	ee 47 ad 8f fd 73 2e 46						              .text  $ee, $47, $ad, $8f, $fd, $73, $2e, $46, $b5, $8f, $44, $63, $55, $6f, $e1, $50
>3976b8	b5 8f 44 63 55 6f e1 50
>3976c0	f4 b6 a3 4f 68 c4 a5 a4						              .text  $f4, $b6, $a3, $4f, $68, $c4, $a5, $a4, $57, $74, $b9, $bd, $05, $14, $50, $eb
>3976c8	57 74 b9 bd 05 14 50 eb
>3976d0	a5 5c 57 2f 99 dc 2e 8a						              .text  $a5, $5c, $57, $2f, $99, $dc, $2e, $8a, $44, $bc, $ec, $db, $22, $58, $fc, $be
>3976d8	44 bc ec db 22 58 fc be
>3976e0	5f 3f 50 bd 2a 36 ab ae						              .text  $5f, $3f, $50, $bd, $2a, $36, $ab, $ae, $24, $aa, $82, $11, $5c, $9f, $43, $4d
>3976e8	24 aa 82 11 5c 9f 43 4d
>3976f0	8f 0c 20 00 91 b6 45 9e						              .text  $8f, $0c, $20, $00, $91, $b6, $45, $9e, $3e, $3d, $66, $7e, $0a, $1c, $6b, $74
>3976f8	3e 3d 66 7e 0a 1c 6b 74
>397700					.align 16
>397700	00 01 01 00 00 00 00 00		MOUSE_POINTER_PTR     .text $00,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00
>397708	01 01 01 00 00 00 00 00
>397710	01 ff ff 01 00 00 01 01		                      .text $01,$FF,$FF,$01,$00,$00,$01,$01,$FF,$FF,$FF,$01,$00,$00,$00,$00
>397718	ff ff ff 01 00 00 00 00
>397720	01 ff ff ff 01 01 55 ff		                      .text $01,$FF,$FF,$FF,$01,$01,$55,$FF,$01,$55,$FF,$FF,$01,$00,$00,$00
>397728	01 55 ff ff 01 00 00 00
>397730	01 55 ff ff ff ff 01 55		                      .text $01,$55,$FF,$FF,$FF,$FF,$01,$55,$FF,$FF,$FF,$FF,$01,$00,$00,$00
>397738	ff ff ff ff 01 00 00 00
>397740	00 01 55 ff ff ff ff ff		                      .text $00,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$00,$00
>397748	ff ff 01 ff ff 01 00 00
>397750	00 00 01 55 ff ff ff ff		                      .text $00,$00,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$FF,$01,$00,$00
>397758	01 ff ff 01 ff 01 00 00
>397760	00 00 01 01 55 ff ff ff		                      .text $00,$00,$01,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$FF,$01,$00,$00
>397768	ff 01 ff ff ff 01 00 00
>397770	00 00 01 55 01 55 ff ff		                      .text $00,$00,$01,$55,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$01,$00
>397778	ff ff ff ff ff 01 01 00
>397780	00 00 01 55 55 55 ff ff		                      .text $00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01
>397788	ff ff ff ff 01 ff ff 01
>397790	00 00 00 01 55 55 55 ff		                      .text $00,$00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01
>397798	ff ff ff ff ff ff ff 01
>3977a0	00 00 00 00 01 55 55 55		                      .text $00,$00,$00,$00,$01,$55,$55,$55,$55,$55,$01,$FF,$FF,$55,$01,$00
>3977a8	55 55 01 ff ff 55 01 00
>3977b0	00 00 00 00 00 01 01 01		                      .text $00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$55,$FF,$55,$01,$00,$00
>3977b8	01 01 55 ff 55 01 00 00
>3977c0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$55,$01,$00,$00,$00
>3977c8	01 55 55 55 01 00 00 00
>3977d0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$01,$00,$00,$00,$00
>3977d8	01 55 55 01 00 00 00 00
>3977e0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00
>3977e8	00 01 01 00 00 00 00 00
>3977f0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>3977f8	00 00 00 00 00 00 00 00
.3ff000					FONT_4_BANK0
>3ff000	00 00 00 00 00 00 00 00		.binary "FONT/Bm437_PhoenixEGA_8x8.bin", 0, 2048
>3ff008	7e 81 a5 81 bd 99 81 7e 3c 7e db ff c3 7e 3c 00
>3ff018	00 ee fe fe 7c 38 10 00 10 38 7c fe 7c 38 10 00
>3ff028	00 3c 18 ff ff 08 18 00 10 38 7c fe fe 10 38 00
>3ff038	00 00 18 3c 18 00 00 00 ff ff e7 c3 e7 ff ff ff
>3ff048	00 3c 42 81 81 42 3c 00 ff c3 bd 7e 7e bd c3 ff
>3ff058	01 03 07 0f 1f 3f 7f ff ff fe fc f8 f0 e0 c0 80
>3ff068	04 06 07 04 04 fc f8 00 0c 0a 0d 0b f9 f9 1f 1f
>3ff078	00 92 7c 44 c6 7c 92 00 00 00 60 78 7e 78 60 00
>3ff088	00 00 06 1e 7e 1e 06 00 18 7e 18 18 18 18 7e 18
>3ff098	66 66 66 66 66 00 66 00 ff b6 76 36 36 36 36 00
>3ff0a8	7e c1 dc 22 22 1f 83 7e 00 00 00 7e 7e 00 00 00
>3ff0b8	18 7e 18 18 7e 18 00 ff 18 7e 18 18 18 18 18 00
>3ff0c8	18 18 18 18 18 7e 18 00 00 04 06 ff 06 04 00 00
>3ff0d8	00 20 60 ff 60 20 00 00 00 00 00 c0 c0 c0 ff 00
>3ff0e8	00 24 66 ff 66 24 00 00 00 00 10 38 7c fe 00 00
>3ff0f8	00 00 00 fe 7c 38 10 00 00 00 00 00 00 00 00 00
>3ff108	30 30 30 30 30 00 30 00 66 66 00 00 00 00 00 00
>3ff118	6c 6c fe 6c fe 6c 6c 00 10 7c d2 7c 86 7c 10 00
>3ff128	f0 96 fc 18 3e 72 de 00 30 48 30 78 ce cc 78 00
>3ff138	0c 0c 18 00 00 00 00 00 10 60 c0 c0 c0 60 10 00
>3ff148	10 0c 06 06 06 0c 10 00 00 54 38 fe 38 54 00 00
>3ff158	00 18 18 7e 18 18 00 00 00 00 00 00 00 00 18 70
>3ff168	00 00 00 7e 00 00 00 00 00 00 00 00 00 00 18 00
>3ff178	02 06 0c 18 30 60 c0 00 7c ce de f6 e6 e6 7c 00
>3ff188	18 38 78 18 18 18 3c 00 7c c6 06 0c 30 60 fe 00
>3ff198	7c c6 06 3c 06 c6 7c 00 0e 1e 36 66 fe 06 06 00
>3ff1a8	fe c0 c0 fc 06 06 fc 00 7c c6 c0 fc c6 c6 7c 00
>3ff1b8	fe 06 0c 18 30 60 60 00 7c c6 c6 7c c6 c6 7c 00
>3ff1c8	7c c6 c6 7e 06 c6 7c 00 00 30 00 00 00 30 00 00
>3ff1d8	00 30 00 00 00 30 20 00 00 1c 30 60 30 1c 00 00
>3ff1e8	00 00 7e 00 7e 00 00 00 00 70 18 0c 18 70 00 00
>3ff1f8	7c c6 0c 18 30 00 30 00 7c 82 9a aa aa 9e 7c 00
>3ff208	7c c6 c6 fe c6 c6 c6 00 fc 66 66 7c 66 66 fc 00
>3ff218	7c c6 c0 c0 c0 c6 7c 00 fc 66 66 66 66 66 fc 00
>3ff228	fe 62 68 78 68 62 fe 00 fe 62 68 78 68 60 f0 00
>3ff238	7c c6 c6 c0 de c6 7c 00 c6 c6 c6 fe c6 c6 c6 00
>3ff248	3c 18 18 18 18 18 3c 00 1e 0c 0c 0c 0c cc 78 00
>3ff258	c6 cc d8 f0 d8 cc c6 00 f0 60 60 60 60 62 fe 00
>3ff268	c6 ee fe d6 c6 c6 c6 00 c6 e6 f6 de ce c6 c6 00
>3ff278	7c c6 c6 c6 c6 c6 7c 00 fc 66 66 7c 60 60 f0 00
>3ff288	7c c6 c6 c6 c6 c6 7c 0c fc 66 66 7c 66 66 e6 00
>3ff298	7c c6 c0 7c 06 c6 7c 00 7e 5a 18 18 18 18 3c 00
>3ff2a8	c6 c6 c6 c6 c6 c6 7c 00 c6 c6 c6 c6 c6 6c 38 00
>3ff2b8	c6 c6 c6 c6 d6 ee c6 00 c6 6c 38 38 38 6c c6 00
>3ff2c8	66 66 66 3c 18 18 3c 00 fe c6 0c 18 30 66 fe 00
>3ff2d8	1c 18 18 18 18 18 1c 00 c0 60 30 18 0c 06 02 00
>3ff2e8	70 30 30 30 30 30 70 00 00 00 10 38 6c c6 00 00
>3ff2f8	00 00 00 00 00 00 00 ff 30 30 18 00 00 00 00 00
>3ff308	00 00 7c 06 7e c6 7e 00 c0 c0 fc c6 c6 c6 fc 00
>3ff318	00 00 7c c6 c0 c6 7c 00 06 06 7e c6 c6 c6 7e 00
>3ff328	00 00 7c c6 fe c0 7c 00 3c 66 60 f0 60 60 60 00
>3ff338	00 00 7e c6 c6 7e 06 7c c0 c0 fc c6 c6 c6 c6 00
>3ff348	18 00 38 18 18 18 3c 00 00 0c 00 1c 0c 0c cc 78
>3ff358	c0 c0 c6 d8 f0 d8 c6 00 38 18 18 18 18 18 3c 00
>3ff368	00 00 ee fe d6 c6 c6 00 00 00 fc c6 c6 c6 c6 00
>3ff378	00 00 7c c6 c6 c6 7c 00 00 00 fc c6 c6 fc c0 c0
>3ff388	00 00 7e c6 c6 7e 06 06 00 00 de 76 60 60 60 00
>3ff398	00 00 7c c0 7c 06 7c 00 18 18 7e 18 18 18 1e 00
>3ff3a8	00 00 c6 c6 c6 c6 7e 00 00 00 c6 c6 c6 6c 38 00
>3ff3b8	00 00 c6 c6 d6 fe c6 00 00 00 c6 6c 38 6c c6 00
>3ff3c8	00 00 c6 c6 c6 7e 06 7c 00 00 fe 0c 18 60 fe 00
>3ff3d8	0e 18 18 70 18 18 0e 00 18 18 18 00 18 18 18 00
>3ff3e8	e0 30 30 1c 30 30 e0 00 00 00 70 9a 0e 00 00 00
>3ff3f8	00 00 18 3c 66 ff 00 00 7c c6 c0 c0 c6 7c 18 70
>3ff408	66 00 c6 c6 c6 c6 7e 00 0e 18 7c c6 fe c0 7c 00
>3ff418	18 24 7c 06 7e c6 7e 00 66 00 7c 06 7e c6 7e 00
>3ff428	38 0c 7c 06 7e c6 7e 00 18 00 7c 06 7e c6 7e 00
>3ff438	00 00 7c c0 c0 7c 18 70 18 24 7c c6 fe c0 7c 00
>3ff448	66 00 7c c6 fe c0 7c 00 70 18 7c c6 fe c0 7c 00
>3ff458	66 00 38 18 18 18 3c 00 18 24 38 18 18 18 3c 00
>3ff468	38 0c 38 18 18 18 3c 00 66 00 7c c6 fe c6 c6 00
>3ff478	18 00 7c c6 fe c6 c6 00 0e 18 fe 60 78 60 fe 00
>3ff488	00 00 7c 1a 7e d8 7e 00 7e d8 d8 de f8 d8 de 00
>3ff498	18 24 7c c6 c6 c6 7c 00 66 00 7c c6 c6 c6 7c 00
>3ff4a8	38 0c 7c c6 c6 c6 7c 00 18 24 c6 c6 c6 c6 7e 00
>3ff4b8	38 0c c6 c6 c6 c6 7e 00 66 00 c6 c6 c6 7e 06 7c
>3ff4c8	66 7c c6 c6 c6 c6 7c 00 c6 00 c6 c6 c6 c6 7c 00
>3ff4d8	18 7c c6 c0 c6 7c 18 00 1e 32 30 78 30 70 fe 00
>3ff4e8	66 3c 18 7e 18 3c 18 00 fc c6 fc c0 cc de cc 0e
>3ff4f8	00 1c 32 30 fc 30 f0 00 0e 18 7c 06 7e c6 7e 00
>3ff508	1a 30 38 18 18 18 3c 00 0e 18 7c c6 c6 c6 7c 00
>3ff518	0e 18 c6 c6 c6 c6 7e 00 66 98 fc c6 c6 c6 c6 00
>3ff528	66 98 e6 f6 de ce c6 00 7c 06 7e c6 7e 00 fe 00
>3ff538	7c c6 c6 c6 7c 00 fe 00 18 00 18 30 60 c6 7c 00
>3ff548	00 00 fe c0 c0 c0 c0 00 00 00 fe 06 06 06 06 00
>3ff558	c0 c0 c0 de 06 0c 1e 00 c0 c0 c0 cc 1c 3e 0c 00
>3ff568	30 00 30 30 30 30 30 00 00 36 6c d8 6c 36 00 00
>3ff578	00 d8 6c 36 6c d8 00 00 aa aa aa aa aa aa aa aa
>3ff588	aa 55 aa 55 aa 55 aa 55 44 22 44 22 44 22 44 22
>3ff598	18 18 18 18 18 18 18 18 18 18 18 f8 18 18 18 18
>3ff5a8	18 18 18 f8 18 f8 18 18 36 36 36 f6 36 36 36 36
>3ff5b8	00 00 00 fe 36 36 36 36 00 00 00 f8 18 f8 18 18
>3ff5c8	36 36 36 f6 06 f6 36 36 36 36 36 36 36 36 36 36
>3ff5d8	00 00 00 fe 06 f6 36 36 36 36 36 f6 06 fe 00 00
>3ff5e8	36 36 36 fe 00 00 00 00 18 18 18 f8 18 f8 00 00
>3ff5f8	00 00 00 f8 18 18 18 18 18 18 18 1f 00 00 00 00
>3ff608	18 18 18 ff 00 00 00 00 00 00 00 ff 18 18 18 18
>3ff618	18 18 18 1f 18 18 18 18 00 00 00 ff 00 00 00 00
>3ff628	18 18 18 ff 18 18 18 18 18 18 18 1f 18 1f 18 18
>3ff638	36 36 36 37 36 36 36 36 36 36 36 37 30 3f 00 00
>3ff648	00 00 00 3f 30 37 36 36 36 36 36 f7 00 ff 00 00
>3ff658	00 00 00 ff 00 f7 36 36 36 36 36 37 30 37 36 36
>3ff668	00 00 00 ff 00 ff 00 00 36 36 36 f7 00 f7 36 36
>3ff678	18 18 18 ff 00 ff 00 00 36 36 36 ff 00 00 00 00
>3ff688	00 00 00 ff 00 ff 18 18 00 00 00 ff 36 36 36 36
>3ff698	36 36 36 3f 00 00 00 00 18 18 18 1f 18 1f 00 00
>3ff6a8	00 00 00 1f 18 1f 18 18 00 00 00 3f 36 36 36 36
>3ff6b8	36 36 36 ff 36 36 36 36 18 18 18 ff 18 ff 18 18
>3ff6c8	18 18 18 f8 00 00 00 00 00 00 00 1f 18 18 18 18
>3ff6d8	ff ff ff ff ff ff ff ff 00 00 00 00 ff ff ff ff
>3ff6e8	f0 f0 f0 f0 f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f
>3ff6f8	ff ff ff ff 00 00 00 00 00 00 77 98 98 77 00 00
>3ff708	1c 36 66 fc c6 c6 fc c0 fe 62 60 60 60 60 60 00
>3ff718	00 00 ff 66 66 66 66 00 fe 62 30 18 30 62 fe 00
>3ff728	00 00 3f 66 c6 cc 78 00 00 00 33 33 33 3e 30 f0
>3ff738	00 00 ff 18 18 18 18 00 3c 18 3c 66 66 3c 18 3c
>3ff748	00 7c c6 fe c6 7c 00 00 00 7e c3 c3 c3 66 e7 00
>3ff758	1e 19 3c 66 c6 cc 78 00 00 00 66 99 99 66 00 00
>3ff768	00 03 7c ce e6 7c c0 00 00 3e c0 fe c0 3e 00 00
>3ff778	00 7e c3 c3 c3 c3 00 00 00 fe 00 fe 00 fe 00 00
>3ff788	18 18 7e 18 18 7e 00 00 70 18 0c 18 70 00 fe 00
>3ff798	1c 30 60 30 1c 00 fe 00 00 0e 1b 18 18 18 18 18
>3ff7a8	18 18 18 18 18 d8 70 00 00 18 00 7e 00 18 00 00
>3ff7b8	00 76 dc 00 76 dc 00 00 3c 66 3c 00 00 00 00 00
>3ff7c8	00 18 3c 18 00 00 00 00 00 00 00 00 18 00 00 00
>3ff7d8	0f 0c 0c 0c ec 6c 38 00 d8 ec cc cc 00 00 00 00
>3ff7e8	f0 30 c0 f0 00 00 00 00 00 00 00 3c 3c 3c 3c 00
>3ff7f8	00 00 00 00 00 00 00 00
.3ff800					FONT_4_BANK1
>3ff800	00 00 00 00 00 00 00 00		.binary "FONT/CBM-ASCII_8x8.bin", 0, 2048
>3ff808	7c 82 aa 82 ba 92 82 7c 7c fe d6 fe c6 ee fe 7c
>3ff818	ff fd fb f5 eb d5 ab ff ff e1 fd 85 85 87 87 ff
>3ff828	ff bd db e7 e7 db bd ff ff 81 81 bd bd bd 81 ff
>3ff838	ff ff ff ff ff 81 81 ff 00 08 10 20 10 08 00 00
>3ff848	00 24 14 0c 14 24 00 00 00 8e 88 8c 88 e8 00 00
>3ff858	00 00 00 00 00 00 00 00 00 ee 88 cc 88 88 00 00
>3ff868	00 00 04 14 3c 10 00 00 00 30 4c 4c 30 00 00 00
>3ff878	00 38 28 38 28 00 00 00 ff 81 bd bd bd bd 81 ff
>3ff888	ff 55 aa 55 aa 55 aa ff ab d5 ab d5 ab d5 ab d5
>3ff898	ff 81 81 81 81 81 81 ff ff f9 e1 81 81 e1 f9 ff
>3ff8a8	ff 9f 87 81 81 87 9f ff ff e7 e7 c3 c3 81 81 ff
>3ff8b8	ff 81 81 c3 c3 e7 e7 ff 00 26 54 04 04 04 06 00
>3ff8c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 3 times (48 bytes)...
>3ff908	10 10 10 10 00 10 00 00 24 24 24 00 00 00 00 00
>3ff918	24 7e 24 24 7e 24 00 00 10 3c 50 38 14 78 10 00
>3ff928	62 64 08 10 20 4c 8c 00 30 48 48 30 58 4c 4c 38
>3ff938	10 10 10 00 00 00 00 00 08 10 20 20 20 20 10 08
>3ff948	10 08 04 04 04 04 08 10 00 24 18 7e 18 24 00 00
>3ff958	00 10 10 7c 10 10 00 00 00 00 00 00 10 10 20 00
>3ff968	00 00 00 3c 00 00 00 00 00 00 00 00 18 18 00 00
>3ff978	04 04 08 08 10 10 20 20 3c 46 4a 52 62 42 3c 00
>3ff988	10 30 10 10 10 10 38 00 38 44 04 18 20 40 7c 00
>3ff998	38 44 04 18 04 44 38 00 08 18 28 48 7c 08 08 00
>3ff9a8	7c 40 78 04 04 44 38 00 38 44 40 78 44 44 38 00
>3ff9b8	7c 44 04 08 08 10 10 00 38 44 44 38 44 44 38 00
>3ff9c8	38 44 44 3c 04 44 38 00 00 00 18 00 00 18 00 00
>3ff9d8	00 00 18 00 00 18 18 30 00 08 10 20 10 08 00 00
>3ff9e8	00 00 3c 00 3c 00 00 00 00 10 08 04 08 10 00 00
>3ff9f8	38 44 04 08 10 00 10 00 38 44 4c 4c 40 44 38 00
>3ffa08	10 28 44 7c 44 44 00 00 78 44 78 44 44 78 00 00
>3ffa18	38 44 40 40 44 38 00 00 78 44 44 44 44 78 00 00
>3ffa28	7c 40 78 40 40 7c 00 00 7c 40 78 40 40 40 00 00
>3ffa38	38 44 40 4c 44 38 00 00 44 44 7c 44 44 44 00 00
>3ffa48	38 10 10 10 10 38 00 00 1c 08 08 08 48 30 00 00
>3ffa58	24 28 30 30 28 24 00 00 20 20 20 20 20 3c 00 00
>3ffa68	44 6c 7c 54 44 44 00 00 44 64 54 4c 44 44 00 00
>3ffa78	38 44 44 44 44 38 00 00 78 44 44 78 40 40 00 00
>3ffa88	38 44 44 44 44 38 0c 00 78 44 44 78 48 44 00 00
>3ffa98	3c 40 38 04 04 78 00 00 7c 10 10 10 10 10 00 00
>3ffaa8	44 44 44 44 44 38 00 00 44 44 44 44 28 10 00 00
>3ffab8	82 82 82 92 92 6c 00 00 42 24 18 18 24 42 00 00
>3ffac8	44 44 28 10 10 10 00 00 7c 08 10 20 40 7c 00 00
>3ffad8	38 20 20 20 20 20 38 00 20 20 10 10 08 08 04 04
>3ffae8	38 08 08 08 08 08 38 00 00 10 28 44 00 00 00 00
>3ffaf8	00 00 00 00 00 00 00 7e 40 20 10 00 00 00 00 00
>3ffb08	00 38 04 3c 64 3c 00 00 40 40 78 44 44 78 00 00
>3ffb18	00 00 38 40 40 38 00 00 04 04 3c 44 44 3c 00 00
>3ffb28	00 38 44 7c 40 3c 00 00 0c 10 3c 10 10 10 00 00
>3ffb38	00 00 3c 44 44 3c 04 78 40 40 78 44 44 44 00 00
>3ffb48	10 00 30 10 10 38 00 00 08 00 08 08 08 08 08 30
>3ffb58	20 20 24 38 28 24 00 00 30 10 10 10 10 10 00 00
>3ffb68	00 00 68 54 54 44 00 00 00 00 38 24 24 24 00 00
>3ffb78	00 00 38 44 44 38 00 00 00 00 78 44 44 78 40 40
>3ffb88	00 00 3c 44 44 3c 04 04 00 00 78 44 40 40 00 00
>3ffb98	00 00 1c 30 0c 38 00 00 00 10 7c 10 10 10 0c 00
>3ffba8	00 00 44 44 44 3c 00 00 00 00 42 42 24 18 00 00
>3ffbb8	00 00 82 82 92 6c 00 00 00 00 24 18 18 24 00 00
>3ffbc8	00 00 24 24 24 1c 04 38 00 00 7c 18 30 7c 00 00
>3ffbd8	0c 10 10 30 30 10 10 0c 18 18 18 00 18 18 18 00
>3ffbe8	30 08 08 0c 0c 08 08 30 00 00 32 7e 4c 00 00 00
>3ffbf8	00 00 10 28 38 00 00 00 00 00 3c 3c 3c 3c 00 00
>3ffc08	00 00 3c 24 24 3c 00 00 00 00 18 3c 3c 18 00 00
>3ffc18	00 00 18 24 24 18 00 00 18 24 24 18 00 00 00 00
>3ffc28	00 3c 42 42 66 24 66 00 00 18 00 18 0c 06 66 3c
>3ffc38	0c 12 30 7c 30 62 fc 00 1c 20 70 20 70 20 1c 00
>3ffc48	02 06 0c d8 f0 e0 c0 00 18 18 ff 00 00 ff 00 00
>3ffc58	00 00 ff 00 00 ff 18 18 24 24 24 e7 e7 24 24 24
>3ffc68	18 18 ff 00 00 ff 18 18 24 24 24 27 27 24 24 24
>3ffc78	24 24 24 e4 e4 24 24 24 00 00 00 ff ff ff ff ff
>3ffc88	00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>3ffc98	ff ff ff ff ff ff ff 00 ff ff ff ff ff ff 00 00
>3ffca8	ff ff ff ff ff 00 00 00 ff ff ff ff 00 00 00 00
>3ffcb8	f8 f8 f8 f8 f8 f8 f8 f8 fc fc fc fc fc fc fc fc
>3ffcc8	fe fe fe fe fe fe fe fe 7f 7f 7f 7f 7f 7f 7f 7f
>3ffcd8	3f 3f 3f 3f 3f 3f 3f 3f 1f 1f 1f 1f 1f 1f 1f 1f
>3ffce8	0f 0f 0f 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00
>3ffcf8	00 00 00 00 00 00 00 00 ff ff ff ff ff ff ff ff
>3ffd08	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 00 ff ff ff ff
>3ffd18	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>3ffd28	80 80 80 80 80 80 80 80 aa 55 aa 55 aa 55 aa 55
>3ffd38	01 01 01 01 01 01 01 01 00 00 00 00 aa 55 aa 55
>3ffd48	ff fe fc f8 f0 e0 c0 80 03 03 03 03 03 03 03 03
>3ffd58	18 18 18 1f 1f 18 18 18 00 00 00 00 0f 0f 0f 0f
>3ffd68	18 18 18 1f 1f 00 00 00 00 00 00 f8 f8 18 18 18
>3ffd78	00 00 00 00 00 00 ff ff 00 00 00 1f 1f 18 18 18
>3ffd88	18 18 18 ff ff 00 00 00 00 00 00 ff ff 18 18 18
>3ffd98	18 18 18 f8 f8 18 18 18 c0 c0 c0 c0 c0 c0 c0 c0
>3ffda8	e0 e0 e0 e0 e0 e0 e0 e0 07 07 07 07 07 07 07 07
>3ffdb8	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00
>3ffdc8	00 00 00 00 00 ff ff ff 03 03 03 03 03 03 ff ff
>3ffdd8	00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>3ffde8	18 18 18 f8 f8 00 00 00 f0 f0 f0 f0 00 00 00 00
>3ffdf8	f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 ff ff 00 00 00
>3ffe08	08 1c 3e 7f 7f 1c 3e 00 18 18 18 18 18 18 18 18
>3ffe18	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00
>3ffe28	00 ff ff 00 00 00 00 00 00 00 00 00 ff ff 00 00
>3ffe38	30 30 30 30 30 30 30 30 0c 0c 0c 0c 0c 0c 0c 0c
>3ffe48	00 00 00 e0 f0 38 18 18 18 18 1c 0f 07 00 00 00
>3ffe58	18 18 38 f0 e0 00 00 00 c0 c0 c0 c0 c0 c0 ff ff
>3ffe68	c0 e0 70 38 1c 0e 07 03 03 07 0e 1c 38 70 e0 c0
>3ffe78	ff ff c0 c0 c0 c0 c0 c0 ff ff 03 03 03 03 03 03
>3ffe88	00 3c 7e 7e 7e 7e 3c 00 00 00 00 00 00 ff ff 00
>3ffe98	36 7f 7f 7f 3e 1c 08 00 60 60 60 60 60 60 60 60
>3ffea8	00 00 00 07 0f 1c 18 18 c3 e7 7e 3c 3c 7e e7 c3
>3ffeb8	00 3c 7e 66 66 7e 3c 00 18 18 66 66 18 18 3c 00
>3ffec8	06 06 06 06 06 06 06 06 08 1c 3e 7f 3e 1c 08 00
>3ffed8	18 18 18 ff ff 18 18 18 c0 c0 30 30 c0 c0 30 30
>3ffee8	18 18 18 18 18 18 18 18 00 00 03 3e 76 36 36 00
>3ffef8	ff 7f 3f 1f 0f 07 03 01 24 24 24 24 24 24 24 24
>3fff08	00 00 ff 00 00 ff 00 00 00 00 3f 20 20 27 24 24
>3fff18	00 00 ff 00 00 e7 24 24 00 00 fc 04 04 e4 24 24
>3fff28	24 24 27 20 20 3f 00 00 24 24 e7 00 00 ff 00 00
>3fff38	24 24 e4 04 04 fc 00 00 24 24 27 20 20 27 24 24
>3fff48	24 24 e4 04 04 e4 24 24 24 24 e7 00 00 e7 24 24
>3fff58	0f 0f 0f 0f f0 f0 f0 f0 01 03 07 0f 1f 3f 7f ff
>3fff68	80 c0 e0 f0 f8 fc fe ff 33 99 cc 66 33 99 cc 66
>3fff78	cc 99 33 66 cc 99 33 66 f0 f0 f0 f0 ff ff ff ff
>3fff88	0f 0f 0f 0f ff ff ff ff ff ff ff ff f0 f0 f0 f0
>3fff98	ff ff ff ff 0f 0f 0f 0f 05 0a 05 0a 00 00 00 00
>3fffa8	00 00 00 00 0a 05 0a 05 a0 50 a0 50 00 00 00 00
>3fffb8	00 00 00 00 a0 50 a0 50 0a 05 0a 05 0a 05 0a 05
>3fffc8	aa 55 aa 55 00 00 00 00 00 18 3c 7e 18 18 18 18
>3fffd8	00 10 30 7f 7f 30 10 00 00 08 0c fe fe 0c 08 00
>3fffe8	18 18 18 18 7e 3c 18 00 00 00 36 49 36 00 00 00
>3ffff8	00 00 00 00 00 00 00 00
>3a0000	5c bb 65 3a 5c cd 4b 3a		.binary "binaries/basic816.bin"
>3a0008	5c 9b 20 3a 5c 40 01 3a 5c 58 00 3a 5c d6 00 3a
>3a0018	5c 59 02 3a 5c e4 00 3a 5c ff 00 3a 5c 06 01 3a
>3a0028	0b 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 85 b3
>3a0038	c2 20 a5 a4 d0 06 e2 20 a5 a6 f0 11 c2 10 a4 a9
>3a0048	c4 a7 f0 09 e2 20 a5 b3 97 a4 c8 84 a9 28 2b 60
>3a0058	08 c2 10 e2 20 a9 01 20 1c 00 a2 00 00 a9 00 9f
>3a0068	00 4c 00 e8 e0 00 01 d0 f6 a2 00 00 20 14 00 c9
>3a0078	0d d0 03 4c cf 00 c9 9d d0 08 e0 00 00 f0 ed ca
>3a0088	80 39 c9 1d d0 0e bf 00 4c 00 f0 e0 e0 4f 00 f0
>3a0098	db e8 80 27 c9 08 d0 1a e0 00 00 f0 cf da bf 01
>3a00a8	4c 00 9f 00 4c 00 f0 06 e8 e0 ff 00 d0 f0 fa ca
>3a00b8	80 0e c9 20 90 b6 9f 00 4c 00 e8 20 18 00 80 ac
>3a00c8	a9 08 20 18 00 80 a5 a9 00 20 1c 00 28 60 22 4c
>3a00d8	10 00 60 20 14 00 48 20 18 00 68 60 08 e2 20 c9
>3a00e8	00 f0 08 af 10 00 af 09 01 80 06 af 10 00 af 29
>3a00f8	fe 8f 10 00 af 28 60 08 22 84 10 00 28 60 48 da
>3a0108	5a 0b 08 e2 20 c2 10 a2 00 00 a9 20 9f 00 a0 af
>3a0118	af 1e 00 00 9f 00 c0 af e8 e0 00 20 d0 ec 08 c2
>3a0128	20 48 a9 00 00 5b 68 28 a2 00 00 a0 00 00 22 84
>3a0138	10 00 28 2b 7a fa 68 60 da 5a 0b 08 08 c2 20 48
>3a0148	a9 00 08 5b 68 28 c2 30 af 0c 00 00 85 08 e2 20
>3a0158	af 0e 00 00 c2 20 29 ff 00 85 0a af 11 00 00 8f
>3a0168	08 01 00 af 1c 00 00 3a 8f 0a 01 00 18 a5 08 6f
>3a0178	0c 01 00 85 08 a5 0a 69 00 00 85 0a e2 20 af 0f
>3a0188	00 00 85 8d a0 00 00 a2 00 00 b7 08 9f 00 4f 00
>3a0198	e8 c8 c4 8d d0 f4 ca bf 00 4f 00 c9 20 d0 09 a9
>3a01a8	00 9f 00 4f 00 ca 10 ef 28 2b 7a fa 60 e2 20 a9
>3a01b8	48 8f 0f 00 00 a9 34 8f 13 00 00 a9 20 8f 08 00
>3a01c8	af 8f 09 00 af a2 00 00 a9 00 9f 10 f0 3a e8 e0
>3a01d8	12 00 d0 f6 a9 80 8f b2 08 00 e2 20 a9 00 8f 89
>3a01e8	0f 00 60 08 e2 20 48 48 a9 00 22 3c 10 00 68 22
>3a01f8	18 10 00 af 89 0f 00 29 01 d0 f8 68 28 60 08 e2
>3a0208	20 48 48 a9 01 22 3c 10 00 68 22 18 10 00 af 89
>3a0218	0f 00 29 01 d0 f8 68 28 60 08 c2 20 48 e2 20 a9
>3a0228	0d 20 18 00 c2 20 68 28 60 08 22 78 10 00 28 60
>3a0238	08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a5 b4
>3a0248	1a 85 b4 cf 13 00 00 90 05 20 14 00 64 b4 2b 28
>3a0258	60 da 5a 0b 08 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a0268	20 c2 10 8f b3 08 00 af b2 08 00 29 20 f0 07 af
>3a0278	b3 08 00 20 28 00 af b2 08 00 29 80 f0 07 af b3
>3a0288	08 00 20 eb 01 af b2 08 00 29 40 f0 14 af b3 08
>3a0298	00 20 06 02 af b3 08 00 c9 0d d0 05 a9 0a 20 06
>3a02a8	02 28 2b 7a fa 60 08 e2 20 bd 00 00 f0 06 20 18
>3a02b8	00 e8 80 f5 28 60 08 c2 20 48 48 4a 4a 4a 4a 4a
>3a02c8	4a 4a 4a 20 d8 02 68 29 ff 00 20 d8 02 68 28 60
>3a02d8	08 c2 20 48 e2 20 48 4a 4a 4a 4a 20 ef 02 68 20
>3a02e8	ef 02 c2 20 68 28 60 08 c2 30 da 29 0f 00 aa bf
>3a02f8	00 d0 3a 20 18 00 fa 28 60 08 e2 20 c9 5b b0 04
>3a0308	c9 41 b0 0b c9 7b b0 04 c9 61 b0 03 28 18 60 28
>3a0318	38 60 08 e2 20 c9 3a b0 04 c9 30 b0 03 28 18 60
>3a0328	28 38 60 08 e2 20 c9 3a b0 04 c9 30 b0 13 c9 67
>3a0338	b0 04 c9 61 b0 0b c9 47 b0 04 c9 41 b0 03 28 18
>3a0348	60 28 38 60 08 e2 20 c9 3a b0 04 c9 30 b0 12 c9
>3a0358	67 b0 04 c9 61 b0 0f c9 47 b0 04 c9 41 b0 09 28
>3a0368	60 38 e9 30 80 f9 29 df 38 e9 37 80 f2 08 e2 20
>3a0378	c9 7b b0 06 c9 61 90 02 29 df 28 60 08 e2 20 c2
>3a0388	10 bd 00 00 f0 09 20 75 03 9d 00 00 e8 80 f2 28
>3a0398	60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 20 48
>3a03a8	06 21 26 23 a5 21 85 0c a5 23 85 0e 06 0c 26 0e
>3a03b8	06 0c 26 0e 18 a5 21 65 0c 85 21 a5 23 65 0e 85
>3a03c8	23 68 2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68
>3a03d8	28 c2 20 a5 21 8f 12 01 00 a9 0a 00 8f 10 01 00
>3a03e8	af 14 01 00 85 21 64 23 af 16 01 00 85 27 64 29
>3a03f8	e2 20 a9 00 85 25 85 2b 2b 28 60 08 0b 08 c2 20
>3a0408	48 a9 00 08 5b 68 28 c2 20 a5 21 8f 12 01 00 a9
>3a0418	64 00 8f 10 01 00 af 14 01 00 85 21 64 23 af 16
>3a0428	01 00 85 27 64 29 e2 20 a9 00 85 25 85 2b 2b 28
>3a0438	60 08 c2 20 a5 21 d0 08 a5 23 d0 04 28 e2 02 60
>3a0448	28 c2 02 60 08 e2 20 a5 25 c9 00 d0 02 28 60 08
>3a0458	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08
>3a0468	00 c2 20 29 ff 00 20 5b 18 e2 20 dc d2 08 08 e2
>3a0478	20 a5 25 c9 02 d0 02 28 60 08 c2 20 48 a9 00 08
>3a0488	5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00
>3a0498	20 5b 18 e2 20 dc d2 08 08 e2 20 a5 25 c9 00 d0
>3a04a8	08 c2 20 a5 23 d0 21 28 60 08 c2 20 48 a9 00 08
>3a04b8	5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00
>3a04c8	20 5b 18 e2 20 dc d2 08 08 c2 20 48 a9 00 08 5b
>3a04d8	68 28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff 00 20
>3a04e8	5b 18 e2 20 dc d2 08 08 e2 20 a5 25 c9 00 d0 0e
>3a04f8	a5 24 d0 29 a5 23 d0 25 a5 22 d0 21 28 60 08 c2
>3a0508	20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00
>3a0518	c2 20 29 ff 00 20 5b 18 e2 20 dc d2 08 08 c2 20
>3a0528	48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08 00 c2
>3a0538	20 29 ff 00 20 5b 18 e2 20 dc d2 08 08 0b 08 c2
>3a0548	20 48 a9 00 08 5b 68 28 c2 30 64 21 64 23 e2 20
>3a0558	64 25 a7 00 c9 26 f0 44 e2 20 a7 00 20 1a 03 90
>3a0568	76 20 99 03 38 e9 30 c2 20 29 ff 00 18 65 21 85
>3a0578	21 a5 23 69 00 00 85 23 20 00 1b 80 db 08 c2 20
>3a0588	48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2
>3a0598	20 29 ff 00 20 5b 18 e2 20 dc d2 08 20 00 1b a7
>3a05a8	00 c9 48 f0 04 c9 68 d0 d4 20 00 1b e2 20 a7 00
>3a05b8	20 2b 03 90 22 20 4c 03 c2 20 06 21 26 23 06 21
>3a05c8	26 23 06 21 26 23 06 21 26 23 29 ff 00 18 65 21
>3a05d8	85 21 20 00 1b 80 d5 2b 28 60 08 c2 30 38 a5 04
>3a05e8	e5 18 a8 e2 20 b7 18 f0 10 c9 20 f0 06 c9 09 f0
>3a05f8	02 28 60 88 c0 ff ff d0 ec a9 00 60 08 0b 08 c2
>3a0608	20 48 a9 00 08 5b 68 28 c2 30 a5 18 85 00 e2 20
>3a0618	a5 1a 85 02 20 21 1b a7 00 20 1a 03 90 0c 20 44
>3a0628	05 c2 20 a5 21 85 d5 20 21 1b c2 20 a5 00 85 18
>3a0638	e2 20 a5 02 85 1a 20 52 06 e2 20 20 c3 06 c9 00
>3a0648	f0 05 20 4c 08 80 f4 2b 28 60 08 c2 20 a5 18 85
>3a0658	00 a5 1a 85 02 a2 00 00 e2 20 a0 00 00 e0 00 00
>3a0668	f0 0d b7 00 f0 53 c9 3a f0 04 c9 20 d0 33 c8 b7
>3a0678	00 f0 46 c9 52 f0 10 c9 72 d0 26 b7 00 f0 3a c9
>3a0688	52 f0 04 c9 72 d0 1a c8 b7 00 f0 2d c9 45 f0 04
>3a0698	c9 65 d0 0d c8 b7 00 f0 20 c9 4d f0 0a c9 6d f0
>3a06a8	06 e8 20 00 1b 80 b3 a7 00 c9 3a d0 03 20 00 1b
>3a06b8	a9 03 85 1c a9 8e 20 4c 08 28 60 08 0b 08 c2 20
>3a06c8	48 a9 00 08 5b 68 28 e2 20 a9 7f 85 1c c2 10 20
>3a06d8	01 08 a5 1c d0 03 4c 66 07 c2 20 a5 18 85 00 e2
>3a06e8	20 a5 1a 85 02 c2 20 64 04 64 06 e2 30 a0 00 b7
>3a06f8	00 f0 da c9 8e f0 d6 c8 c4 1c 90 f3 c2 10 a7 00
>3a0708	c9 22 d0 05 20 88 07 80 28 a5 1c c9 01 f0 19 c2
>3a0718	20 a5 00 c5 18 d0 08 e2 20 a5 02 c5 1a f0 09 e2
>3a0728	20 a7 04 20 89 3d b0 09 e2 20 20 98 07 c9 00 d0
>3a0738	11 c2 20 a5 00 85 04 e2 20 a5 02 85 06 20 00 1b
>3a0748	80 a9 c9 81 d0 18 20 e2 05 c9 00 f0 14 89 80 10
>3a0758	0b 20 ed 08 c9 30 f0 04 a9 af 80 02 a9 81 2b 28
>3a0768	60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a0778	d1 08 00 c2 20 29 ff 00 20 5b 18 e2 20 dc d2 08
>3a0788	08 e2 20 20 00 1b a7 00 f0 04 c9 22 d0 f5 28 60
>3a0798	08 0b c2 30 da 5a 08 c2 20 48 a9 00 08 5b 68 28
>3a07a8	a9 17 09 85 08 e2 20 a9 3a 85 0a a2 80 00 e2 20
>3a07b8	a0 01 00 b7 08 f0 26 c5 1c d0 29 c2 30 a0 02 00
>3a07c8	b7 08 85 0c e2 20 a9 3a 85 0e e2 10 a0 00 b7 00
>3a07d8	20 75 03 d7 0c d0 0d c8 c4 1c 90 f2 8a c2 10 7a
>3a07e8	fa 2b 28 60 c2 30 18 a5 08 69 08 00 85 08 e2 20
>3a07f8	a5 0a 69 00 85 0a e8 80 b5 08 0b 8b 08 c2 20 48
>3a0808	a9 00 08 5b 68 28 c2 30 a9 17 09 85 08 a9 3a 00
>3a0818	85 0a 64 0c e2 20 a0 01 00 b7 08 f0 1d c5 1c b0
>3a0828	06 c5 0c 90 02 85 0c c2 20 18 a5 08 69 08 00 85
>3a0838	08 a5 0a 69 00 00 85 0a 80 da e2 20 a5 0c 85 1c
>3a0848	ab 2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28
>3a0858	e2 20 87 00 c2 20 18 a5 00 69 01 00 85 08 a5 02
>3a0868	69 00 00 85 0a e2 10 a4 1c 88 e2 20 b7 08 87 08
>3a0878	f0 13 c2 20 18 a5 08 69 01 00 85 08 a5 0a 69 00
>3a0888	00 85 0a 80 e5 2b 28 60 08 c2 30 29 7f 00 0a 0a
>3a0898	0a 18 69 17 09 aa 28 60 08 8b 0b 08 c2 20 48 a9
>3a08a8	00 08 5b 68 28 08 e2 20 48 a9 3a 48 ab 68 28 e2
>3a08b8	20 c2 10 20 90 08 bd 00 00 c2 20 29 0f 00 2b ab
>3a08c8	28 60 08 8b 0b 08 c2 20 48 a9 00 08 5b 68 28 08
>3a08d8	e2 20 48 a9 3a 48 ab 68 28 c2 30 20 90 08 bd 04
>3a08e8	00 2b ab 28 60 08 8b 0b 08 c2 20 48 a9 00 08 5b
>3a08f8	68 28 08 e2 20 48 a9 3a 48 ab 68 28 e2 20 c2 10
>3a0908	20 90 08 bd 00 00 c2 20 29 f0 00 2b ab 28 60 03
>3a0918	01 10 d0 2e 21 00 00 03 01 12 d0 6d 21 00 00 02
>3a0928	01 14 d0 7b 21 00 00 02 01 16 d0 94 21 00 00 02
>3a0938	03 18 d0 a7 21 00 00 00 01 1c d0 00 00 00 00 04
>3a0948	01 1e d0 e9 21 00 00 04 01 20 d0 1f 22 00 00 04
>3a0958	01 22 d0 04 22 00 00 05 03 24 d0 d8 21 00 00 06
>3a0968	03 28 d0 ba 21 00 00 07 02 2c d0 c9 21 00 00 ff
>3a0978	01 2f d0 00 00 00 00 40 01 31 d0 00 00 00 00 20
>3a0988	03 33 d0 82 2f 00 00 20 05 37 d0 87 33 00 00 20
>3a0998	03 3d d0 d2 32 00 00 20 04 41 d0 72 32 00 00 20
>3a09a8	03 46 d0 69 32 00 00 20 02 4a d0 01 32 00 00 50
>3a09b8	04 4d d0 00 00 00 00 50 04 52 d0 00 00 00 00 20
>3a09c8	05 57 d0 44 31 00 00 20 06 5d d0 bd 31 00 00 20
>3a09d8	03 64 d0 99 2f 00 00 50 02 68 d0 00 00 00 00 50
>3a09e8	04 6b d0 00 00 00 00 20 04 70 d0 8d 30 00 00 20
>3a09f8	02 75 d0 93 2f 00 00 20 04 78 d0 96 2f 00 00 50
>3a0a08	05 7d d0 00 00 00 00 50 05 83 d0 00 00 00 00 20
>3a0a18	04 89 d0 90 2f 00 00 20 03 8e d0 c8 32 00 00 20
>3a0a28	04 92 d0 63 2f 00 00 20 04 97 d0 f3 2e 00 00 20
>3a0a38	05 9c d0 89 2e 00 00 20 05 a2 d0 16 2e 00 00 20
>3a0a48	03 a8 d0 12 2e 00 00 20 04 ac d0 f3 2c 00 00 20
>3a0a58	04 b1 d0 05 2e 00 00 20 07 b6 d0 09 2e 00 00 20
>3a0a68	03 be d0 46 2c 00 00 20 04 c2 d0 af 2b 00 00 04
>3a0a78	02 c7 d0 72 22 00 00 04 02 ca d0 55 22 00 00 04
>3a0a88	02 cd d0 3a 22 00 00 30 01 d0 d0 21 35 00 00 30
>3a0a98	03 d2 d0 3b 39 00 00 30 04 d6 d0 8b 39 00 00 30
>3a0aa8	05 db d0 1c 3a 00 00 30 05 e1 d0 ce 39 00 00 30
>3a0ab8	04 e7 d0 5b 3a 00 00 30 03 ec d0 b0 3a 00 00 30
>3a0ac8	03 f0 d0 f5 3a 00 00 30 03 f4 d0 7e 3b 00 00 30
>3a0ad8	03 f8 d0 07 3c 00 00 30 03 fc d0 37 3c 00 00 30
>3a0ae8	04 00 d1 aa 38 00 00 30 03 05 d1 49 38 00 00 30
>3a0af8	04 09 d1 f8 37 00 00 30 03 0e d1 a2 37 00 00 30
>3a0b08	05 12 d1 d9 36 00 00 30 06 18 d1 f8 35 00 00 30
>3a0b18	04 1f d1 43 35 00 00 10 03 24 d1 c5 3c 00 00 10
>3a0b28	03 28 d1 90 3c 00 00 10 04 2c d1 b1 47 00 00 10
>3a0b38	04 31 d1 dc 3c 00 00 10 03 36 d1 af 44 00 00 20
>3a0b48	05 3a d1 83 46 00 00 10 04 40 d1 5e 47 00 00 20
>3a0b58	05 45 d1 68 48 00 00 20 03 4b d1 87 49 00 00 10
>3a0b68	04 4f d1 f4 48 00 00 20 06 54 d1 fd 49 00 00 20
>3a0b78	04 5b d1 18 4b 00 00 10 07 60 d1 8d 3c 00 00 20
>3a0b88	03 68 d1 3b 2b 00 00 20 05 6c d1 6d 2a 00 00 20
>3a0b98	09 72 d1 f4 23 00 00 20 09 7c d1 8f 23 00 00 20
>3a0ba8	0a 86 d1 bd 23 00 00 20 07 91 d1 fc 22 00 00 30
>3a0bb8	08 99 d1 4c 34 00 00 20 07 a2 d1 91 22 00 00 30
>3a0bc8	08 aa d1 b9 34 00 00 20 08 b3 d1 05 25 00 00 20
>3a0bd8	08 bc d1 61 24 00 00 20 06 c5 d1 66 25 00 00 20
>3a0be8	09 cc d1 2e 26 00 00 20 04 d6 d1 c1 27 00 00 20
>3a0bf8	04 db d1 07 28 00 00 20 04 e0 d1 6d 28 00 00 20
>3a0c08	06 e5 d1 13 29 00 00 20 08 ec d1 a0 29 00 00 20
>3a0c18	0a f5 d1 d4 29 00 00 00 00 00 00 00 00 00 00 08
>3a0c28	0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 a9 ff ff
>3a0c38	85 b8 e2 20 a9 37 85 ba c2 20 64 b5 64 bb e2 20
>3a0c48	64 b7 64 bd 2b 28 60 5a 08 e2 20 85 e8 c2 10 86
>3a0c58	8d c2 20 a5 0e 48 a5 0c 48 a5 12 48 a5 10 48 20
>3a0c68	ff 0c b0 03 20 83 0c 20 8b 0e c2 20 68 85 10 68
>3a0c78	85 12 68 85 0c 68 85 0e 28 7a 60 08 0b 08 c2 20
>3a0c88	48 a9 00 08 5b 68 28 e2 20 a6 8d ca 86 0c e8 c2
>3a0c98	30 38 a5 b8 e5 0c 85 be e2 20 a5 ba e9 00 85 c0
>3a0ca8	20 8b 0e e2 20 a5 e8 a0 00 00 97 c1 a9 00 a0 01
>3a0cb8	00 97 c1 a0 02 00 97 c1 c2 20 a9 00 00 97 c1 c2
>3a0cc8	20 18 a5 b8 69 01 00 a0 05 00 97 c1 e2 20 c8 c8
>3a0cd8	a5 ba 69 00 97 c1 c2 20 a5 be 85 b5 e2 20 a5 c0
>3a0ce8	85 b7 c2 20 38 a5 c1 e9 01 00 85 b8 e2 20 a5 c3
>3a0cf8	e9 00 85 ba 2b 28 60 08 0b 08 c2 20 48 a9 00 08
>3a0d08	5b 68 28 c2 30 c2 20 a5 bb 85 c7 e2 20 a5 bd 85
>3a0d18	c9 a5 c7 d0 17 e2 20 a5 c9 d0 11 c2 20 a9 00 00
>3a0d28	85 cd e2 20 a9 00 85 cf 2b 28 18 60 c2 20 a0 05
>3a0d38	00 b7 c7 85 ca e2 20 c8 c8 b7 c7 85 cc c2 20 18
>3a0d48	a5 c7 65 8d 85 0c e2 20 a5 c9 69 00 85 0e c2 20
>3a0d58	18 a5 0c 69 08 00 85 0c e2 20 a5 0e 69 00 85 0e
>3a0d68	c2 20 a5 0c c5 ca d0 28 e2 20 a5 0e c5 cc d0 20
>3a0d78	c2 20 a5 cd d0 5d e2 20 a5 cf d0 57 c2 20 a0 02
>3a0d88	00 b7 c7 85 bb e2 20 c8 c8 b7 c7 85 bd 4c 3c 0e
>3a0d98	c2 20 a5 0c 69 08 00 85 10 e2 20 a5 0e 69 00 85
>3a0da8	12 e2 20 a5 c4 c5 10 b0 3e 90 08 c2 20 a5 c4 c5
>3a0db8	10 b0 34 c2 20 a5 c7 85 cd e2 20 a5 c9 85 cf c2
>3a0dc8	20 a0 02 00 b7 cd 85 c7 e2 20 c8 c8 b7 cd 85 c9
>3a0dd8	4c 19 0d c2 20 a0 02 00 b7 c7 97 cd e2 20 c8 c8
>3a0de8	b7 c7 97 cd 4c 3c 0e c2 20 a0 05 00 b7 c7 97 0c
>3a0df8	e2 20 c8 c8 b7 c7 97 0c c2 20 a0 02 00 b7 c7 97
>3a0e08	0c e2 20 c8 c8 b7 c7 97 0c c2 20 a5 cd d0 14 e2
>3a0e18	20 a5 cd d0 0e c2 20 a5 0c 85 bb e2 20 a5 0e 85
>3a0e28	bd 80 11 c2 20 a0 02 00 a5 0c 97 cd e2 20 c8 c8
>3a0e38	a5 0e 97 cd c2 20 a5 c7 85 c1 e2 20 a5 c9 85 c3
>3a0e48	c2 20 a5 c1 85 b5 e2 20 a5 c3 85 b7 c2 20 a0 05
>3a0e58	00 a5 0c 97 c1 e2 20 c8 c8 a5 0e 97 c1 c2 20 a0
>3a0e68	02 00 a9 00 00 97 c1 e2 20 c8 c8 97 c1 e2 20 a5
>3a0e78	e8 e2 20 a0 00 00 97 c1 a0 01 00 a9 00 97 c1 2b
>3a0e88	28 38 60 08 c2 20 38 a5 be e9 08 00 85 c1 e2 20
>3a0e98	a5 c0 e9 00 85 c3 28 60 08 e2 20 a5 c3 f0 04 c9
>3a0ea8	38 b0 12 c2 20 a5 c1 f0 0c e2 20 a0 01 00 b7 c1
>3a0eb8	1a 97 c1 28 60 00 ea 08 e2 20 a5 c3 f0 04 c9 38
>3a0ec8	b0 17 c2 20 a5 c1 f0 11 e2 20 a0 01 00 b7 c1 3a
>3a0ed8	97 c1 d0 03 20 e3 0e 28 60 00 ea 08 c2 20 a5 bb
>3a0ee8	d0 21 e2 20 a5 bd d0 1b a5 c3 85 bd c2 20 a5 c1
>3a0ef8	85 bb a9 00 00 a0 02 00 97 c1 c8 c8 e2 20 97 c1
>3a0f08	4c ca 0f e2 20 a5 bd c5 c3 90 28 c2 20 a5 bb c5
>3a0f18	c1 90 20 c2 20 a5 bb a0 02 00 97 c1 e2 20 c8 c8
>3a0f28	a5 bd 97 c1 c2 20 a5 c1 85 bb e2 20 a5 c3 85 bd
>3a0f38	4c ca 0f c2 20 a5 bb 85 08 e2 20 a5 bd 85 0a e2
>3a0f48	20 a0 04 00 b7 08 c5 c6 90 32 d0 0b c2 20 a0 02
>3a0f58	00 b7 08 c5 c4 90 25 c2 20 a0 02 00 b7 08 97 c1
>3a0f68	e2 20 c8 c8 b7 08 97 c1 c2 20 a5 c1 a0 02 00 97
>3a0f78	08 e2 20 a5 c3 c8 c8 97 08 4c ca 0f c2 20 a0 02
>3a0f88	00 b7 08 d0 08 e2 20 c8 c8 b7 08 f0 19 c2 20 a0
>3a0f98	02 00 b7 08 85 0c e2 20 c8 c8 b7 08 85 0a c2 20
>3a0fa8	a5 0c 85 08 80 99 c2 20 a5 c1 a0 02 00 97 08 e2
>3a0fb8	20 c8 c8 a5 c3 97 08 a9 00 97 c1 c2 20 a0 02 00
>3a0fc8	97 c1 20 cf 0f 28 60 08 c2 20 a5 bb 85 c1 e2 20
>3a0fd8	a5 bd 85 c3 c2 20 a5 c1 d0 09 e2 20 a5 c3 d0 03
>3a0fe8	4c 72 10 c2 20 a0 02 00 b7 c1 85 0c e2 20 c8 c8
>3a0ff8	b7 c1 85 0e c2 20 a0 05 00 b7 c1 85 10 e2 20 c8
>3a1008	c8 b7 c1 85 12 c2 20 a5 0c c5 10 d0 08 e2 20 a5
>3a1018	0e c5 12 f0 1f c2 20 a0 02 00 b7 c1 85 0c e2 20
>3a1028	c8 c8 b7 c1 85 0e c2 20 a5 0c 85 c1 e2 20 a5 0e
>3a1038	85 c3 80 a0 c2 20 a0 02 00 b7 c1 85 0c e2 20 c8
>3a1048	c8 b7 c1 85 0e c2 20 a0 02 00 b7 0c 97 c1 e2 20
>3a1058	c8 c8 b7 0c 97 c1 c2 20 a0 05 00 b7 0c 97 c1 e2
>3a1068	20 c8 c8 b7 0c 97 c1 4c eb 0f 28 60 08 c2 10 e2
>3a1078	20 64 14 a5 e0 1a 1a 85 15 e2 20 a5 e1 85 16 c5
>3a1088	ba 90 29 f0 08 c2 20 a5 14 c5 b8 90 1f 08 c2 20
>3a1098	48 a9 00 08 5b 68 28 e2 20 a9 03 8f d1 08 00 c2
>3a10a8	20 29 ff 00 20 5b 18 e2 20 dc d2 08 28 60 c9 00
>3a10b8	d0 05 c0 01 00 f0 05 09 30 97 14 c8 60 08 c2 30
>3a10c8	64 0c a5 23 10 1a 18 a5 21 49 ff ff 69 01 00 85
>3a10d8	21 a5 23 49 ff ff 69 00 00 85 23 a9 ff ff 85 0c
>3a10e8	64 10 64 12 a2 1f 00 f8 06 21 26 23 a5 10 65 10
>3a10f8	85 10 a5 12 65 12 85 12 ca 10 ed d8 e2 20 20 74
>3a1108	10 a0 00 00 a5 0c f0 04 a9 2d 80 02 a9 20 97 14
>3a1118	c8 a2 03 00 b5 10 29 f0 4a 4a 4a 4a 20 b6 10 b5
>3a1128	10 29 0f 20 b6 10 ca 10 eb c0 01 00 d0 0c a9 20
>3a1138	87 14 a0 01 00 a9 30 97 14 c8 a9 00 97 14 28 60
>3a1148	00 ea 08 e2 20 c2 10 a0 00 00 bd 00 00 f0 04 e8
>3a1158	c8 80 f7 28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b
>3a1168	68 28 e2 20 c2 10 08 c2 20 48 e2 20 a5 23 48 ab
>3a1178	c2 20 68 28 a6 21 20 4a 11 84 0c 08 c2 20 48 e2
>3a1188	20 a5 29 48 ab c2 20 68 28 a6 27 20 4a 11 c2 20
>3a1198	98 38 65 0c aa e2 20 a9 02 20 4f 0c c2 20 a5 b5
>3a11a8	85 08 e2 20 a5 b7 85 0a a0 00 00 08 c2 20 48 e2
>3a11b8	20 a5 23 48 ab c2 20 68 28 a6 21 bd 00 00 f0 06
>3a11c8	97 08 e8 c8 80 f5 e2 20 08 c2 20 48 e2 20 a5 29
>3a11d8	48 ab c2 20 68 28 a6 27 bd 00 00 97 08 f0 04 e8
>3a11e8	c8 80 f5 c2 20 a5 08 85 21 e2 20 a5 0a 85 23 a9
>3a11f8	02 85 25 ab 2b 28 60 08 0b 8b 08 c2 20 48 a9 00
>3a1208	08 5b 68 28 c2 30 08 c2 20 48 e2 20 a5 23 48 ab
>3a1218	c2 20 68 28 a6 21 20 4a 11 98 aa e8 e2 20 a9 02
>3a1228	20 4f 0c c2 20 a5 be 85 08 e2 20 a5 c0 85 0a a0
>3a1238	00 00 b7 21 97 08 f0 03 c8 80 f7 a5 08 85 21 a5
>3a1248	09 85 22 a5 0a 85 23 a9 00 85 24 ab 2b 28 60 08
>3a1258	e2 20 c2 10 a0 00 00 b7 21 f0 05 c8 80 f9 84 90
>3a1268	c2 30 c4 27 90 13 f0 11 a5 8d 30 0d f0 0b c4 8d
>3a1278	b0 12 a5 27 d0 0e 4c d8 12 20 74 10 e2 20 a9 00
>3a1288	87 14 80 39 20 74 10 c2 30 18 a5 21 65 27 85 21
>3a1298	a5 23 69 00 00 85 23 a0 00 00 e2 20 a7 21 97 14
>3a12a8	f0 1b c2 20 18 a5 21 69 01 00 85 21 a5 23 69 00
>3a12b8	00 85 23 c8 c4 8d d0 e2 a9 00 00 97 14 c2 20 a5
>3a12c8	14 85 21 a5 16 85 23 e2 20 a9 02 85 25 20 ff 11
>3a12d8	28 60 48 5a 0b 08 08 c2 20 48 a9 00 08 5b 68 28
>3a12e8	c2 30 a9 00 00 85 00 85 18 a9 36 00 85 02 85 1a
>3a12f8	ad 8a 0f 30 20 a0 02 00 b7 18 f0 0f c5 53 90 10
>3a1308	c5 57 f0 02 b0 05 20 3c 13 80 e5 28 2b 7a 68 60
>3a1318	20 dd 1b 80 db 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a1328	20 a9 01 8f d1 08 00 c2 20 29 ff 00 20 5b 18 e2
>3a1338	20 dc d2 08 08 c2 30 85 21 64 23 20 c5 10 a5 14
>3a1348	1a 85 21 a5 16 85 23 20 fc 33 18 a5 18 69 04 00
>3a1358	85 00 a5 1a 69 00 00 85 02 e2 20 a9 20 20 18 00
>3a1368	c2 20 20 7b 13 90 fb e2 20 a9 0d 20 18 00 20 dd
>3a1378	1b 28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28
>3a1388	08 e2 20 48 a9 00 48 ab 68 28 e2 20 c2 10 a7 00
>3a1398	f0 3a 30 05 20 18 00 80 29 c2 20 29 7f 00 0a 0a
>3a13a8	0a 18 69 17 09 85 08 a9 3a 00 69 00 00 85 0a 08
>3a13b8	e2 20 48 a9 3a 48 ab 68 28 a0 02 00 b7 08 aa 20
>3a13c8	ae 02 c2 20 20 00 1b ab 2b 28 18 60 ab 2b 28 38
>3a13d8	60 08 c2 20 a9 ff 6f 85 1d a9 ff 7f 85 1f a9 ff
>3a13e8	ff 85 21 85 23 85 27 85 29 e2 20 85 25 85 2b 28
>3a13f8	60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2
>3a1408	20 48 a9 00 48 ab 68 28 c2 30 5a a4 1d bd 00 00
>3a1418	99 00 00 bd 02 00 99 02 00 e2 20 bd 04 00 99 04
>3a1428	00 c2 20 38 98 e9 05 00 85 1d 7a ab 2b 28 60 08
>3a1438	0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48
>3a1448	a9 00 48 ab 68 28 c2 30 5a 18 a5 1d 69 05 00 85
>3a1458	1d a8 b9 00 00 9d 00 00 b9 02 00 9d 02 00 e2 20
>3a1468	b9 04 00 9d 04 00 bd 00 00 7a ab 2b 28 60 08 0b
>3a1478	8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9
>3a1488	00 48 ab 68 28 e2 20 c2 10 5a a4 1f 99 00 00 88
>3a1498	84 1f 7a ab 2b 28 60 08 0b 8b 08 c2 20 48 a9 00
>3a14a8	08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 e2 20
>3a14b8	c2 10 5a a4 1f c8 84 1f b9 00 00 c2 20 29 ff 00
>3a14c8	7a ab 2b 28 60 08 e2 20 a9 01 20 76 14 28 60 5a
>3a14d8	08 8b 08 e2 20 48 a9 00 48 ab 68 28 e2 20 a4 1f
>3a14e8	b9 01 00 c9 01 d0 08 c2 20 e6 1f ab 28 7a 60 08
>3a14f8	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08
>3a1508	00 c2 20 29 ff 00 20 5b 18 e2 20 dc d2 08 08 0b
>3a1518	8b c2 20 48 08 c2 20 48 a9 00 08 5b 68 28 08 e2
>3a1528	20 48 a9 00 48 ab 68 28 e2 20 c2 10 a4 1f c0 ff
>3a1538	7f f0 11 20 a0 08 85 0c b9 01 00 20 a0 08 c5 0c
>3a1548	f0 02 90 08 c2 20 68 ab 2b 28 18 60 c2 20 68 ab
>3a1558	2b 28 38 60 4c 44 05 08 e2 20 a9 00 8f 00 4d 00
>3a1568	a2 01 00 20 09 17 20 a0 04 c2 20 a5 21 9f 00 4d
>3a1578	00 e2 20 af 00 4d 00 1a 30 3e 8f 00 4d 00 e8 e8
>3a1588	20 21 1b e2 20 a7 00 c9 8d f0 09 c9 2c d0 0a 20
>3a1598	00 1b 80 cf 20 00 1b 28 60 08 c2 20 48 a9 00 08
>3a15a8	5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00
>3a15b8	20 5b 18 e2 20 dc d2 08 08 c2 20 48 a9 00 08 5b
>3a15c8	68 28 e2 20 a9 0a 8f d1 08 00 c2 20 29 ff 00 20
>3a15d8	5b 18 e2 20 dc d2 08 08 20 07 40 90 23 e2 20 a5
>3a15e8	e8 29 80 d0 06 20 5d 3e 4c 06 16 e2 20 a9 8c 20
>3a15f8	0d 1c 20 cd 14 20 5f 15 20 ee 42 20 d7 14 28 60
>3a1608	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1
>3a1618	08 00 c2 20 29 ff 00 20 5b 18 e2 20 dc d2 08 08
>3a1628	0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 c2 10 20
>3a1638	00 1b a0 00 00 b7 00 f0 24 c9 22 f0 03 c8 80 f5
>3a1648	84 0c e2 20 a9 02 a6 0c e8 20 4f 0c a0 00 00 c4
>3a1658	0c f0 29 a7 00 97 be c8 20 00 1b 80 f2 08 c2 20
>3a1668	48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2
>3a1678	20 29 ff 00 20 5b 18 e2 20 dc d2 08 a9 00 97 be
>3a1688	c2 20 a5 be 85 21 e2 20 a5 c0 85 23 a9 02 85 25
>3a1698	20 00 1b 2b 28 60 08 e2 20 a7 00 c2 20 29 ff 00
>3a16a8	20 ca 08 85 2d 20 cd 14 08 e2 20 48 a9 00 48 ab
>3a16b8	68 28 20 c2 16 20 d7 14 28 60 20 00 1b 6c 2d 08
>3a16c8	08 0b 8b c2 20 48 08 c2 20 48 a9 00 08 5b 68 28
>3a16d8	c2 30 a2 27 08 20 37 14 a2 21 08 20 37 14 20 9f
>3a16e8	14 20 ca 08 85 2d 08 e2 20 48 a9 00 48 ab 68 28
>3a16f8	20 06 17 a2 21 08 20 f9 13 68 ab 2b 28 60 6c 2d
>3a1708	08 08 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48
>3a1718	a9 00 48 ab 68 28 c2 10 da e2 20 a7 00 d0 03 4c
>3a1728	cc 17 30 33 c9 20 d0 03 4c c6 17 c9 3a b0 04 c9
>3a1738	30 b0 56 c9 26 f0 52 c9 22 d0 03 4c df 17 c9 5b
>3a1748	b0 07 c9 41 90 03 4c eb 17 c9 7b b0 07 c9 61 90
>3a1758	03 4c eb 17 4c cc 17 c9 8c f0 40 c9 8d f0 41 20
>3a1768	ed 08 c9 30 d0 0c 20 9e 16 a2 21 08 20 f9 13 4c
>3a1778	21 17 c9 00 d0 4e a7 00 a6 1f e0 ff 7f f0 05 20
>3a1788	16 15 b0 12 20 76 14 80 35 c2 20 20 5c 15 a2 21
>3a1798	08 20 f9 13 80 83 20 c8 16 80 dd 20 76 14 80 1e
>3a17a8	e2 20 a4 1f c0 ff 7f f0 46 a4 1f b9 01 00 c9 01
>3a17b8	f0 3d c9 8c f0 05 20 c8 16 80 ee 20 9f 14 20 00
>3a17c8	1b 4c 21 17 a6 1f e0 ff 7f b0 24 bd 01 00 c9 01
>3a17d8	f0 1d 20 c8 16 80 ed 20 27 16 a2 21 08 20 f9 13
>3a17e8	4c 21 17 20 df 15 a2 21 08 20 f9 13 4c 21 17 a2
>3a17f8	21 08 20 37 14 fa 28 60 08 0b 8b 08 e2 20 48 a9
>3a1808	00 48 ab 68 28 08 c2 20 48 a9 00 08 5b 68 28 c2
>3a1818	30 a9 fd 5f 85 31 ab 2b 28 60 08 0b 08 c2 20 48
>3a1828	a9 00 08 5b 68 28 c2 30 92 31 c6 31 c6 31 2b 28
>3a1838	60 08 c2 30 29 ff 00 20 22 18 28 60 08 0b 08 c2
>3a1848	20 48 a9 00 08 5b 68 28 c2 30 e6 31 e6 31 b2 31
>3a1858	2b 28 60 8b 0b 08 08 c2 20 48 a9 00 08 5b 68 28
>3a1868	08 e2 20 48 a9 00 48 ab 68 28 c2 20 85 21 a9 00
>3a1878	00 85 23 e2 20 a9 00 85 25 85 e8 a9 3a 85 e7 c2
>3a1888	20 a9 b5 18 85 e5 20 a4 3f c2 20 a5 d5 85 21 a5
>3a1898	d7 85 23 e2 20 a9 00 85 25 85 e8 a9 3a 85 e7 c2
>3a18a8	20 a9 b9 18 85 e5 20 a4 3f 28 2b ab 60 45 52 52
>3a18b8	00 45 52 4c 00 e2 20 c2 10 20 21 02 af d1 08 00
>3a18c8	0a c2 20 29 ff 00 a8 08 e2 20 48 a9 3a 48 ab 68
>3a18d8	28 be 0f 19 20 ae 02 c2 20 a5 d5 f0 27 a2 3d 19
>3a18e8	20 ae 02 08 e2 20 48 a9 00 48 ab 68 28 c2 20 af
>3a18f8	d5 08 00 8f 21 08 00 a9 00 00 8f 23 08 00 20 1c
>3a1908	34 20 21 02 4c e3 20 41 19 44 19 4a 19 57 19 65
>3a1918	19 73 19 86 19 9c 19 ac 19 bb 19 c8 19 d9 19 e8
>3a1928	19 f5 19 03 1a 12 1a 23 1a 3c 1a 50 1a 64 1a 7a
>3a1938	1a 8e 1a a9 1a 20 61 74 00 4f 4b 00 42 72 65 61
>3a1948	6b 00 53 79 6e 74 61 78 20 65 72 72 6f 72 00 4f
>3a1958	75 74 20 6f 66 20 6d 65 6d 6f 72 79 00 54 79 70
>3a1968	65 20 6d 69 73 6d 61 74 63 68 00 56 61 72 69 61
>3a1978	62 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 00 4c 69
>3a1988	6e 65 20 6e 75 6d 62 65 72 20 6e 6f 74 20 66 6f
>3a1998	75 6e 64 00 53 74 61 63 6b 20 75 6e 64 65 72 66
>3a19a8	6c 6f 77 00 53 74 61 63 6b 20 6f 76 65 72 66 6c
>3a19b8	6f 77 00 4f 75 74 20 6f 66 20 72 61 6e 67 65 00
>3a19c8	49 6c 6c 65 67 61 6c 20 61 72 67 75 6d 65 6e 74
>3a19d8	00 46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 00
>3a19e8	4e 6f 74 20 61 20 6e 75 6d 62 65 72 00 4d 61 74
>3a19f8	68 20 6f 76 65 72 66 6c 6f 77 00 4d 61 74 68 20
>3a1a08	75 6e 64 65 72 66 6c 6f 77 00 44 69 76 69 73 69
>3a1a18	6f 6e 20 62 79 20 7a 65 72 6f 00 55 6e 61 62 6c
>3a1a28	65 20 74 6f 20 72 65 61 64 20 64 69 72 65 63 74
>3a1a38	6f 72 79 00 55 6e 61 62 6c 65 20 74 6f 20 6c 6f
>3a1a48	61 64 20 66 69 6c 65 00 55 6e 61 62 6c 65 20 74
>3a1a58	6f 20 73 61 76 65 20 66 69 6c 65 00 55 6e 61 62
>3a1a68	6c 65 20 74 6f 20 64 65 6c 65 74 65 20 66 69 6c
>3a1a78	65 00 43 6f 75 6c 64 20 6e 6f 74 20 66 69 6e 64
>3a1a88	20 66 69 6c 65 00 43 6f 75 6c 64 20 6e 6f 74 20
>3a1a98	75 70 64 61 74 65 20 64 69 72 65 63 74 6f 72 79
>3a1aa8	00 43 6f 75 6c 64 20 6e 6f 74 20 63 6f 70 79 20
>3a1ab8	74 68 65 20 66 69 6c 65 00 08 0b 08 c2 20 48 a9
>3a1ac8	00 08 5b 68 28 e2 20 a9 00 85 d0 2b 28 60 0b 08
>3a1ad8	08 c2 20 48 a9 00 08 5b 68 28 08 c2 20 a9 bd 18
>3a1ae8	8f d2 08 00 e2 20 a9 3a 8f d4 08 00 28 20 c8 32
>3a1af8	20 09 2e 64 2f 28 2b 60 08 0b 08 c2 20 48 a9 00
>3a1b08	08 5b 68 28 c2 20 18 a5 00 69 01 00 85 00 e2 20
>3a1b18	a5 02 69 00 85 02 2b 28 60 08 0b 08 c2 20 48 a9
>3a1b28	00 08 5b 68 28 e2 20 a7 00 f0 0f c9 20 f0 06 c9
>3a1b38	09 f0 02 80 05 20 00 1b 80 ed 2b 28 60 08 e2 20
>3a1b48	a7 00 f0 09 c9 3a f0 05 20 00 1b 80 f3 28 60 08
>3a1b58	e2 20 64 34 a7 00 f0 19 c5 35 f0 2c c9 98 f0 1e
>3a1b68	c9 9c f0 1a c9 9b f0 1a c9 9d f0 16 20 00 1b 80
>3a1b78	e3 20 dd 1b c2 20 a5 d5 f0 1d e2 20 80 d6 e6 34
>3a1b88	80 ea c6 34 30 30 80 e4 a5 33 30 06 a5 34 f0 02
>3a1b98	80 da 20 00 1b 28 60 08 c2 20 48 a9 00 08 5b 68
>3a1ba8	28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00 20 5b
>3a1bb8	18 e2 20 dc d2 08 08 c2 20 48 a9 00 08 5b 68 28
>3a1bc8	e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00 20 5b 18
>3a1bd8	e2 20 dc d2 08 08 c2 30 a0 00 00 b7 18 85 0c 18
>3a1be8	a5 18 65 0c 85 18 a5 1a 69 00 00 85 1a a0 02 00
>3a1bf8	b7 18 85 d5 18 a5 18 69 04 00 85 00 a5 1a 69 00
>3a1c08	00 85 02 28 60 08 e2 20 48 20 21 1b 68 e2 20 c7
>3a1c18	00 d0 08 20 00 1b 20 21 1b 28 60 08 c2 20 48 a9
>3a1c28	00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29
>3a1c38	ff 00 20 5b 18 e2 20 dc d2 08 08 e2 20 20 21 1b
>3a1c48	e2 20 a7 00 f0 10 c9 3a f0 0c c5 35 f0 05 20 00
>3a1c58	1b 80 ef 28 38 60 28 18 60 5a 08 e2 20 a0 00 00
>3a1c68	b7 00 f0 0d c9 3a f0 07 c9 20 d0 05 c8 80 f1 a9
>3a1c78	00 28 7a 60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68
>3a1c88	28 20 d9 13 e2 20 a9 00 85 da ad 8a 0f 30 4b a7
>3a1c98	00 c9 3a d0 03 20 00 1b 20 21 1b a7 00 d0 03 4c
>3a1ca8	2c 1d 20 01 03 b0 52 a7 00 10 10 20 ed 08 85 0c
>3a1cb8	c9 20 d0 03 4c 1a 1d a5 d0 f0 51 08 c2 20 48 a9
>3a1cc8	00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29
>3a1cd8	ff 00 20 5b 18 e2 20 dc d2 08 08 c2 20 48 a9 00
>3a1ce8	08 5b 68 28 e2 20 a9 01 8f d1 08 00 c2 20 29 ff
>3a1cf8	00 20 5b 18 e2 20 dc d2 08 20 d2 32 4c 2c 1d 08
>3a1d08	e2 20 48 a9 00 48 ab 68 28 6c 2d 08 a5 0c c9 10
>3a1d18	d0 a9 a7 00 20 ca 08 c2 20 85 2d 20 d9 13 20 00
>3a1d28	1b 20 07 1d ab 2b 28 60 08 58 20 c1 1a 20 00 18
>3a1d38	e2 20 9c 8a 0f c2 20 a5 18 85 00 a5 1a 85 02 4c
>3a1d48	6e 1d 08 c2 20 a0 02 00 b7 18 85 d5 e2 20 a5 da
>3a1d58	c9 03 f0 12 c2 20 18 a5 18 69 04 00 85 00 e2 20
>3a1d68	a5 1a 69 00 85 02 c2 20 20 7c 1c e2 20 a5 da c9
>3a1d78	03 f0 f3 c9 00 d0 31 e2 20 20 21 1b a7 00 f0 28
>3a1d88	c9 3a f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a1d98	a9 02 8f d1 08 00 c2 20 29 ff 00 20 5b 18 e2 20
>3a1da8	dc d2 08 20 00 1b 80 be 28 60 08 58 e2 20 a9 80
>3a1db8	85 d0 9c 8a 0f 20 00 18 c2 30 64 2f a0 02 00 b7
>3a1dc8	18 f0 29 20 4a 1d e2 20 a5 da c9 01 f0 1e c9 02
>3a1dd8	f0 ea c9 03 f0 e6 c2 20 a0 00 00 18 a5 18 77 18
>3a1de8	85 18 e2 20 a5 1a 69 00 85 1a 80 d0 e2 20 a9 00
>3a1df8	85 d0 28 60 08 c2 30 c2 20 a9 00 00 85 08 a9 36
>3a1e08	00 85 0a c2 20 a0 02 00 b7 08 f0 31 c5 21 f0 1e
>3a1e18	b0 2b c2 20 a0 00 00 18 a5 08 77 08 85 0c e2 20
>3a1e28	a5 0a 69 00 85 0a c2 20 a5 0c 85 08 80 d7 c2 20
>3a1e38	a5 08 85 18 e2 20 a5 0a 85 1a 28 38 60 28 18 60
>3a1e48	08 e2 20 a7 0c 87 08 c2 20 a5 0c c5 00 d0 08 e2
>3a1e58	20 a5 0e c5 02 f0 26 c2 20 18 a5 0c 69 01 00 85
>3a1e68	0c e2 20 a5 0e 69 00 85 0e c2 20 18 a5 08 69 01
>3a1e78	00 85 08 e2 20 a5 0a 69 00 85 0a 80 c4 28 60 08
>3a1e88	e2 20 a7 0c 87 08 c2 20 a5 0c c5 00 d0 06 a5 0e
>3a1e98	c5 02 f0 26 c2 20 38 a5 0c e9 01 00 85 0c e2 20
>3a1ea8	a5 0e e9 00 85 0e c2 20 38 a5 08 e9 01 00 85 08
>3a1eb8	e2 20 a5 0a e9 00 85 0a 80 c6 28 60 08 a0 00 00
>3a1ec8	c2 20 18 a5 08 77 08 85 0c e2 20 a5 0a 69 00 85
>3a1ed8	0e c2 20 18 a5 d7 69 04 00 85 00 e2 20 a5 d9 69
>3a1ee8	00 85 02 a0 00 00 c2 20 38 a5 d7 f7 08 85 d7 e2
>3a1ef8	20 a5 d9 e9 00 85 d9 20 48 1e 20 c8 32 28 60 08
>3a1f08	08 c2 20 48 a9 00 08 5b 68 28 c2 30 a0 02 00 97
>3a1f18	d7 18 a5 d7 69 04 00 85 08 e2 20 a5 d9 69 00 85
>3a1f28	0a e2 20 a0 00 00 b7 18 97 08 f0 03 c8 80 f7 c2
>3a1f38	20 98 18 69 05 00 85 0c c2 20 a0 00 00 a5 0c 97
>3a1f48	d7 c2 20 18 a5 d7 65 0c 85 0c e2 20 a5 d9 69 00
>3a1f58	85 d9 c2 20 a5 0c 85 d7 c2 20 a0 00 00 a9 00 00
>3a1f68	97 d7 c8 c0 05 00 d0 f8 20 c8 32 28 60 0b 08 08
>3a1f78	c2 20 48 a9 00 08 5b 68 28 c2 30 a9 00 00 85 08
>3a1f88	a9 36 00 85 0a a0 02 00 b7 08 f0 1d c5 d5 f0 25
>3a1f98	b0 1d a0 00 00 18 a5 08 77 08 85 0c a5 0a 69 00
>3a1fa8	00 85 0a a5 0c 85 08 80 dc a9 00 00 28 2b 60 a9
>3a1fb8	01 00 28 2b 60 a9 02 00 28 2b 60 08 c2 30 a9 05
>3a1fc8	00 85 10 a0 00 00 e2 20 b7 18 f0 07 c2 20 e6 10
>3a1fd8	c8 80 f3 c2 20 a5 08 85 00 a5 0a 85 02 18 a5 d7
>3a1fe8	69 04 00 85 0c a5 d9 69 00 00 85 0e 18 a5 d7 65
>3a1ff8	10 85 d7 a5 d9 69 00 00 85 d9 18 a5 d7 69 04 00
>3a2008	85 08 a5 d9 69 00 00 85 0a 20 87 1e c2 20 a5 10
>3a2018	a0 00 00 97 00 a5 d5 a0 02 00 97 00 18 a5 00 69
>3a2028	04 00 85 00 a5 02 69 00 00 85 02 a0 00 00 e2 20
>3a2038	b7 18 97 00 f0 03 c8 80 f7 20 c8 32 28 60 08 c2
>3a2048	30 85 d5 20 75 1f c9 00 00 f0 2c c9 01 00 f0 22
>3a2058	c2 20 a5 08 48 a5 0a 48 20 c4 1e 68 85 0a 68 85
>3a2068	08 a5 18 85 00 a5 1a 85 02 20 21 1b e2 20 a7 00
>3a2078	f0 0a 20 c3 1f 80 05 a5 d5 20 07 1f 28 60 8b 08
>3a2088	08 e2 20 48 a9 3a 48 ab 68 28 a2 00 d2 20 ae 02
>3a2098	28 ab 60 08 e2 30 a9 01 20 1c 00 20 db 00 f0 06
>3a20a8	c9 0d f0 02 80 f5 28 60 0b 08 08 c2 20 48 a9 00
>3a20b8	08 5b 68 28 c2 30 64 d5 a9 00 4f 85 18 a9 00 00
>3a20c8	85 1a 20 04 06 c2 20 a5 d5 d0 05 20 30 1d 80 07
>3a20d8	20 46 20 28 2b 38 60 28 2b 18 60 c2 30 a2 ff fe
>3a20e8	9a 20 86 20 20 08 00 20 0c 00 a9 00 00 20 1c 00
>3a20f8	20 b0 20 b0 ef 80 ea e2 20 a5 25 c5 2b d0 06 c2
>3a2108	20 29 ff 00 60 c2 20 08 c2 20 48 a9 00 08 5b 68
>3a2118	28 e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00 20 5b
>3a2128	18 e2 20 dc d2 08 20 ff 20 c2 20 c9 00 00 f0 27
>3a2138	c9 02 00 d0 03 4c 5d 11 08 c2 20 48 a9 00 08 5b
>3a2148	68 28 e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00 20
>3a2158	5b 18 e2 20 dc d2 08 18 a5 21 65 27 85 21 a5 23
>3a2168	65 29 85 23 60 38 a5 21 e5 27 85 21 a5 23 e5 29
>3a2178	85 23 60 a5 21 8f 08 01 00 a5 27 8f 0a 01 00 af
>3a2188	0c 01 00 85 21 af 0e 01 00 85 23 60 a5 21 8f 12
>3a2198	01 00 a5 27 8f 10 01 00 af 14 01 00 85 21 60 a5
>3a21a8	21 8f 12 01 00 a5 27 8f 10 01 00 af 16 01 00 85
>3a21b8	21 60 c2 20 a5 21 25 27 85 21 a5 23 25 29 85 23
>3a21c8	60 c2 20 a5 21 05 27 85 21 a5 23 05 29 85 23 60
>3a21d8	c2 20 a5 21 49 ff ff 85 21 a5 23 49 ff ff 85 23
>3a21e8	60 c2 20 a5 23 c5 29 90 0b a5 21 c5 27 90 05 64
>3a21f8	21 64 23 60 a9 ff ff 85 21 85 23 60 c2 20 a5 29
>3a2208	c5 23 90 0b a5 27 c5 21 90 05 64 21 64 23 60 a9
>3a2218	ff ff 85 21 85 23 60 c2 20 a5 29 c5 23 d0 0e a5
>3a2228	27 c5 21 d0 08 a9 ff ff 85 21 85 23 60 64 21 64
>3a2238	23 60 c2 20 a5 29 c5 23 d0 0e a5 27 c5 21 d0 08
>3a2248	a9 ff ff 85 21 85 23 60 64 21 64 23 60 c2 20 a5
>3a2258	23 c5 29 90 10 d0 06 a5 21 c5 27 90 08 a9 ff ff
>3a2268	85 21 85 23 60 64 21 64 23 60 c2 20 a5 23 c5 29
>3a2278	90 0f f0 05 64 21 64 23 60 a5 21 c5 27 f0 02 b0
>3a2288	f3 a9 ff ff 85 21 85 23 60 08 e2 20 20 09 17 20
>3a2298	ef 04 20 cd 03 a5 21 0a 0a 0a 0a 05 27 48 a9 2c
>3a22a8	20 0d 1c 20 09 17 20 ef 04 20 cd 03 a5 21 0a 0a
>3a22b8	0a 0a 05 27 48 a9 2c 20 0d 1c 20 09 17 20 ef 04
>3a22c8	20 cd 03 a5 21 0a 0a 0a 0a 05 27 48 af 0e 08 af
>3a22d8	09 0c 8f 0e 08 af 68 8f 00 08 af 68 8f 02 08 af
>3a22e8	68 8f 04 08 af af 0e 08 af 29 f7 8f 0e 08 af 20
>3a22f8	45 1b 28 60 08 e2 20 20 09 17 20 ef 04 20 cd 03
>3a2308	a5 21 0a 0a 0a 0a 05 27 48 a9 2c 20 0d 1c 20 09
>3a2318	17 20 ef 04 20 cd 03 a5 21 0a 0a 0a 0a 05 27 48
>3a2328	a9 2c 20 0d 1c 20 09 17 20 4c 04 20 03 04 c2 20
>3a2338	a5 21 85 90 a5 27 85 21 20 cd 03 e2 20 a5 21 0a
>3a2348	0a 0a 0a 05 27 48 c2 20 a5 90 85 21 20 cd 03 e2
>3a2358	20 a5 21 0a 0a 0a 0a 05 27 48 af 0e 08 af 09 0c
>3a2368	8f 0e 08 af 68 8f 0f 08 af 68 8f 0a 08 af 68 8f
>3a2378	09 08 af 68 8f 06 08 af af 0e 08 af 29 f7 8f 0e
>3a2388	08 af 20 45 1b 28 60 08 20 09 17 20 ef 04 e2 20
>3a2398	a5 21 29 0f 0a 0a 0a 0a 8f 53 08 00 a9 2c 20 0d
>3a23a8	1c 20 09 17 20 ef 04 a5 21 29 0f 0f 53 08 00 8f
>3a23b8	1e 00 00 28 60 08 e2 20 20 09 17 20 ef 04 a5 21
>3a23c8	48 a9 2c 20 0d 1c 20 09 17 20 ef 04 a5 21 48 a9
>3a23d8	2c 20 0d 1c 20 09 17 20 ef 04 a5 21 8f 08 00 af
>3a23e8	68 8f 09 00 af 68 8f 0a 00 af 28 60 08 e2 20 20
>3a23f8	09 17 20 4c 04 a5 21 f0 16 a9 01 8f 04 00 af a9
>3a2408	20 8f 08 00 af 8f 09 00 af 22 2c 11 00 80 0a a9
>3a2418	00 8f 04 00 af 22 2c 11 00 a9 2c 85 35 20 42 1c
>3a2428	90 35 20 00 1b 20 09 17 20 ef 04 a5 21 48 a9 2c
>3a2438	20 0d 1c 20 09 17 20 ef 04 a5 21 48 a9 2c 20 0d
>3a2448	1c 20 09 17 20 ef 04 a5 21 8f 05 00 af 68 8f 06
>3a2458	00 af 68 8f 07 00 af 28 60 08 c2 20 20 09 17 20
>3a2468	ef 04 a9 af 00 85 9e a5 21 c9 0a 00 b0 5c 0a aa
>3a2478	bf f1 24 3a 85 9c a9 2c 00 20 0d 1c 20 09 17 20
>3a2488	ef 04 a5 21 0a 0a 18 65 9c 85 9c a9 2c 00 20 0d
>3a2498	1c 20 09 17 20 ef 04 a0 02 00 a5 21 e2 20 97 9c
>3a24a8	a9 2c 20 0d 1c 20 09 17 20 ef 04 a0 01 00 a5 21
>3a24b8	e2 20 97 9c a9 2c 20 0d 1c 20 09 17 20 ef 04 a0
>3a24c8	00 00 a5 21 e2 20 97 9c 28 60 08 c2 20 48 a9 00
>3a24d8	08 5b 68 28 e2 20 a9 0a 8f d1 08 00 c2 20 29 ff
>3a24e8	00 20 5b 18 e2 20 dc d2 08 00 20 00 24 00 28 00
>3a24f8	2c 00 30 00 34 00 38 00 3c 40 1f 80 1f da 5a 08
>3a2508	20 09 17 20 4c 04 a5 21 8f 00 00 af 4a 4a 4a 4a
>3a2518	4a 4a 4a 29 ff 0a aa 22 2c 11 00 c2 20 af 1a 00
>3a2528	00 aa af 1c 00 00 a8 20 20 00 28 7a fa 60 80 02
>3a2538	20 03 40 01 90 01 e0 01 58 02 f0 00 2c 01 50 00
>3a2548	64 00 28 00 32 00 3c 00 4b 00 1e 00 32 00 48 00
>3a2558	5c 00 20 00 2a 00 34 00 43 00 16 00 34 00 08 c2
>3a2568	20 20 09 17 20 ef 04 c2 20 a5 21 85 53 a9 2c 00
>3a2578	20 0d 1c 20 09 17 20 ef 04 e2 20 a5 53 d0 05 a5
>3a2588	21 0a 80 04 a5 21 38 2a 8f 40 01 af c2 20 a9 2c
>3a2598	00 85 35 20 42 1c b0 18 c2 20 08 c2 20 a9 00 00
>3a25a8	85 21 a9 b0 00 85 23 e2 20 a9 00 85 25 28 80 08
>3a25b8	c2 20 20 00 1b 20 09 17 e2 20 38 a5 23 8f 02 f0
>3a25c8	3a e9 b0 30 42 8f 43 01 af 8f 06 f0 3a a5 21 8f
>3a25d8	00 f0 3a 8f 41 01 af 8f 04 f0 3a a5 22 8f 42 01
>3a25e8	af 8f 05 f0 3a 8f 01 f0 3a a9 00 8f 07 f0 3a 8f
>3a25f8	03 f0 3a c2 20 af 08 f0 3a 8f 44 01 af af 0a f0
>3a2608	3a 8f 46 01 af 28 60 08 c2 20 48 a9 00 08 5b 68
>3a2618	28 e2 20 a9 0a 8f d1 08 00 c2 20 29 ff 00 20 5b
>3a2628	18 e2 20 dc d2 08 08 c2 20 af 04 f0 3a 8f 05 04
>3a2638	af af 0c f0 3a 8f 08 04 af e2 20 af 06 f0 3a 8f
>3a2648	07 04 af af 0e f0 3a 8f 0a 04 af a9 00 8f 01 04
>3a2658	af a9 85 8f 00 04 af af 01 04 af 30 fa a9 00 8f
>3a2668	00 04 af 28 60 08 c2 20 a5 5b 8f 08 01 00 af 08
>3a2678	f0 3a 8f 0a 01 00 18 af 0c 01 00 65 57 85 0c af
>3a2688	0e 01 00 69 00 00 85 0e 18 a5 0c 6f 00 f0 3a 85
>3a2698	9c a5 0e 6f 02 f0 3a 85 9e e2 20 a5 53 87 9c 28
>3a26a8	60 c2 20 a9 01 00 85 db 38 a5 5f e5 57 85 67 10
>3a26b8	0b 49 ff ff 1a 85 67 a9 ff ff 85 db a9 01 00 85
>3a26c8	dd 38 a5 63 e5 5b 85 6b 10 0b 49 ff ff 1a 85 6b
>3a26d8	a9 ff ff 85 dd a5 6b c5 67 b0 04 a5 67 80 06 a5
>3a26e8	6b 49 ff ff 1a 48 0a 68 6a 85 6f 20 6d 26 a5 57
>3a26f8	c5 5f d0 06 a5 5b c5 63 f0 36 a5 6f 85 73 a5 67
>3a2708	49 ff ff 1a c5 73 10 10 f0 0e 38 a5 6f e5 6b 85
>3a2718	6f 18 a5 57 65 db 85 57 a5 73 c5 6b 10 cd f0 cb
>3a2728	18 a5 6f 65 67 85 6f 18 a5 5b 65 dd 85 5b 80 bb
>3a2738	60 08 a9 00 00 8f 00 04 af c2 20 a5 5b 8f 08 01
>3a2748	00 af 08 f0 3a 8f 0a 01 00 18 af 0c 01 00 65 57
>3a2758	85 0c e2 20 af 0e 01 00 69 00 85 0e c2 20 18 af
>3a2768	04 f0 3a 65 0c 8f 05 04 af e2 20 af 06 f0 3a 65
>3a2778	0e 8f 07 04 af c2 20 38 a5 5f e5 57 85 0c 8f 08
>3a2788	04 af 38 af 08 f0 3a 8f 0e 04 af 38 a5 63 e5 5b
>3a2798	8f 0a 04 af a9 01 00 8f 0c 04 af e2 20 af 53 08
>3a27a8	00 8f 01 04 af a9 87 8f 00 04 af af 01 04 af 30
>3a27b8	fa a9 00 8f 00 04 af 28 60 08 08 c2 20 48 a9 00
>3a27c8	08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 30
>3a27d8	20 09 17 20 4c 04 a5 21 85 53 a9 2c 00 20 0d 1c
>3a27e8	20 09 17 20 4c 04 a5 21 85 57 a9 2c 00 20 0d 1c
>3a27f8	20 09 17 20 ef 04 a5 21 85 5b 20 6d 26 28 60 08
>3a2808	08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00
>3a2818	48 ab 68 28 c2 30 20 09 17 20 4c 04 a5 21 85 57
>3a2828	a9 2c 00 20 0d 1c 20 09 17 20 4c 04 a5 21 85 5b
>3a2838	a9 2c 00 20 0d 1c 20 09 17 20 4c 04 a5 21 85 5f
>3a2848	a9 2c 00 20 0d 1c 20 09 17 20 4c 04 a5 21 85 63
>3a2858	a9 2c 00 20 0d 1c 20 09 17 20 ef 04 a5 21 85 53
>3a2868	20 a9 26 28 60 08 08 c2 20 48 a9 00 08 5b 68 28
>3a2878	08 e2 20 48 a9 00 48 ab 68 28 c2 30 20 09 17 20
>3a2888	4c 04 a5 21 85 57 a9 2c 00 20 0d 1c 20 09 17 20
>3a2898	4c 04 a5 21 85 5b a9 2c 00 20 0d 1c 20 09 17 20
>3a28a8	4c 04 a5 21 85 5f a9 2c 00 20 0d 1c 20 09 17 20
>3a28b8	4c 04 a5 21 85 63 a9 2c 00 20 0d 1c 20 09 17 20
>3a28c8	ef 04 a5 21 85 53 20 39 27 28 60 08 e2 20 a5 21
>3a28d8	c9 12 b0 18 0a 0a 0a 18 69 00 85 9c a9 02 69 00
>3a28e8	85 9d a9 af 69 00 85 9e 64 9f 28 60 08 c2 20 48
>3a28f8	a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20
>3a2908	29 ff 00 20 5b 18 e2 20 dc d2 08 08 e2 20 20 09
>3a2918	17 20 ef 04 20 d3 28 a5 21 8f 0e f0 3a a9 2c 20
>3a2928	0d 1c 20 09 17 20 ef 04 a5 21 c9 08 b0 4b 48 a9
>3a2938	2c 20 0d 1c 20 09 17 20 4c 04 c2 20 38 a5 21 e9
>3a2948	00 00 85 21 a5 23 e9 b0 00 85 23 30 2c c2 20 a5
>3a2958	21 a0 01 00 97 9c e2 20 a5 23 c8 c8 97 9c af 0e
>3a2968	f0 3a aa bf 10 f0 3a 29 f1 85 0c 68 0a 29 0e 05
>3a2978	0c 87 9c 9f 10 f0 3a 28 60 08 c2 20 48 a9 00 08
>3a2988	5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff 00
>3a2998	20 5b 18 e2 20 dc d2 08 08 c2 20 20 09 17 20 ef
>3a29a8	04 20 d3 28 a9 2c 00 20 0d 1c 20 09 17 20 4c 04
>3a29b8	a5 21 a0 04 00 97 9c a9 2c 00 20 0d 1c 20 09 17
>3a29c8	20 4c 04 a5 21 a0 06 00 97 9c 28 60 08 c2 20 20
>3a29d8	09 17 20 ef 04 20 d3 28 a5 21 8f 0e f0 3a a9 2c
>3a29e8	00 20 0d 1c 20 09 17 20 4c 04 a5 21 48 a9 2c 00
>3a29f8	85 35 20 42 1c b0 1c af 0e f0 3a aa bf 10 f0 3a
>3a2a08	29 fe 00 85 0c 68 29 01 00 05 0c 9f 10 f0 3a 87
>3a2a18	9c 80 31 e2 20 20 00 1b 20 09 17 20 ef 04 a5 21
>3a2a28	c9 08 b0 22 0a 0a 0a 0a 85 0c 68 29 01 05 0c 85
>3a2a38	0c af 0e f0 3a aa bf 10 f0 3a 29 8e 05 0c 87 9c
>3a2a48	9f 10 f0 3a 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a2a58	e2 20 a9 09 8f d1 08 00 c2 20 29 ff 00 20 5b 18
>3a2a68	e2 20 dc d2 08 08 20 21 1b e2 20 a7 00 d0 03 4c
>3a2a78	15 2b c9 3a d0 03 4c 15 2b c9 22 d0 0b 20 27 16
>3a2a88	20 fc 33 a9 3b 20 0d 1c 20 01 03 90 41 20 07 40
>3a2a98	90 3c a9 3f 20 18 00 a9 20 20 18 00 20 10 00 e2
>3a2aa8	20 a5 e8 c9 02 f0 46 c9 00 f0 65 c9 01 f0 60 08
>3a2ab8	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08
>3a2ac8	00 c2 20 29 ff 00 20 5b 18 e2 20 dc d2 08 08 c2
>3a2ad8	20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00
>3a2ae8	c2 20 29 ff 00 20 5b 18 e2 20 dc d2 08 c2 20 a9
>3a2af8	00 4c 85 21 a9 00 00 85 23 e2 20 a9 02 85 25 20
>3a2b08	ff 11 c2 20 20 a4 3f a9 0d 00 20 18 00 28 60 ea
>3a2b18	c2 20 a5 00 85 3e a5 02 85 40 a9 00 4c 85 00 a9
>3a2b28	00 00 85 02 20 44 05 c2 20 a5 3e 85 00 a5 40 85
>3a2b38	02 80 cf 08 20 21 1b e2 20 a7 00 f0 49 c9 3a f0
>3a2b48	45 20 01 03 90 42 20 07 40 90 3d 20 14 00 e2 20
>3a2b58	8f 00 4e 00 a9 00 8f 01 4e 00 c2 20 a9 00 4e 85
>3a2b68	21 a9 00 00 85 23 e2 20 a9 02 85 25 20 ff 11 20
>3a2b78	a4 3f 20 21 1b a7 00 f0 0d c9 3a f0 09 c9 2c d0
>3a2b88	07 20 00 1b 80 ae 28 60 08 c2 20 48 a9 00 08 5b
>3a2b98	68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00 20
>3a2ba8	5b 18 e2 20 dc d2 08 08 20 09 17 20 4c 04 e2 20
>3a2bb8	a9 5c 85 a0 c2 20 a5 21 85 a1 e2 20 a5 23 85 a3
>3a2bc8	e2 20 a9 2c 85 35 20 42 1c 90 41 20 00 1b 20 09
>3a2bd8	17 20 a0 04 c2 20 a5 21 85 53 e2 20 a9 2c 85 35
>3a2be8	20 42 1c 90 27 20 00 1b 20 09 17 20 a0 04 c2 20
>3a2bf8	a5 21 85 57 e2 20 a9 2c 85 35 20 42 1c 90 0d 20
>3a2c08	00 1b 20 09 17 20 a0 04 c2 20 a4 21 a6 57 a5 53
>3a2c18	0b 8b 08 22 a0 08 00 28 ab 2b 20 45 1b 28 60 08
>3a2c28	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08
>3a2c38	00 c2 20 29 ff 00 20 5b 18 e2 20 dc d2 08 08 e2
>3a2c48	20 20 21 1b 20 07 40 90 64 a9 8c 20 0d 1c a9 01
>3a2c58	20 76 14 a2 01 00 a9 00 8f 00 4d 00 20 09 17 20
>3a2c68	a0 04 c2 20 a5 21 9f 00 4d 00 e2 20 af 00 4d 00
>3a2c78	1a 8f 00 4d 00 30 55 e8 e8 20 21 1b a7 00 c9 2c
>3a2c88	f0 25 c9 8d d0 27 20 00 1b 20 b5 40 c2 20 a5 be
>3a2c98	85 21 e2 20 a5 c0 85 23 64 24 a5 e8 09 80 85 e8
>3a2ca8	85 25 20 a4 3f 28 60 20 00 1b 4c 64 2c 08 c2 20
>3a2cb8	48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2
>3a2cc8	20 29 ff 00 20 5b 18 e2 20 dc d2 08 08 c2 20 48
>3a2cd8	a9 00 08 5b 68 28 e2 20 a9 0a 8f d1 08 00 c2 20
>3a2ce8	29 ff 00 20 5b 18 e2 20 dc d2 08 08 20 21 1b e2
>3a2cf8	20 a7 00 f0 28 c9 3a f0 24 20 01 03 90 21 20 07
>3a2d08	40 90 1c 20 46 2d 20 a4 3f 20 21 1b a7 00 f0 0d
>3a2d18	c9 3a f0 09 c9 2c d0 07 20 00 1b 80 cf 28 60 08
>3a2d28	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08
>3a2d38	00 c2 20 29 ff 00 20 5b 18 e2 20 dc d2 08 08 a5
>3a2d48	02 85 40 a5 00 85 3e a5 1a 85 44 a5 18 85 42 c2
>3a2d58	20 a5 38 d0 04 a5 36 f0 4e a5 36 85 00 a5 38 85
>3a2d68	02 a5 3a 85 18 a5 3c 85 1a e2 20 a7 00 f0 53 c9
>3a2d78	3a f0 4f c9 2c d0 03 20 00 1b 20 21 1b a7 00 c9
>3a2d88	22 f0 4e 20 1a 03 b0 4e 08 c2 20 48 a9 00 08 5b
>3a2d98	68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00 20
>3a2da8	5b 18 e2 20 dc d2 08 c2 20 a9 00 00 85 18 a9 36
>3a2db8	00 85 1a 18 a5 18 69 04 00 85 00 a5 1a 69 00 00
>3a2dc8	85 02 e2 20 a9 80 85 33 a9 a8 85 35 20 57 1b 80
>3a2dd8	a9 20 27 16 80 03 20 5c 15 c2 20 a5 00 85 36 a5
>3a2de8	02 85 38 a5 18 85 3a a5 1a 85 3c a5 42 85 18 a5
>3a2df8	44 85 1a a5 3e 85 00 a5 40 85 02 28 60 20 45 1b
>3a2e08	60 64 36 64 38 64 3a 64 3c 60 20 24 00 60 20 09
>3a2e18	17 c2 20 a5 23 48 a5 21 48 e2 20 a7 00 c9 2c d0
>3a2e28	22 20 00 1b 20 09 17 c2 20 a5 24 d0 35 68 85 08
>3a2e38	68 85 0a c2 20 a5 21 87 08 e2 20 a0 02 00 a5 23
>3a2e48	97 08 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a2e58	02 8f d1 08 00 c2 20 29 ff 00 20 5b 18 e2 20 dc
>3a2e68	d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09
>3a2e78	8f d1 08 00 c2 20 29 ff 00 20 5b 18 e2 20 dc d2
>3a2e88	08 20 09 17 c2 20 a5 23 48 a5 21 48 e2 20 a7 00
>3a2e98	c9 2c d0 19 20 00 1b 20 09 17 c2 20 a5 23 d0 2c
>3a2ea8	68 85 08 68 85 0a c2 20 a5 21 87 08 60 08 c2 20
>3a2eb8	48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2
>3a2ec8	20 29 ff 00 20 5b 18 e2 20 dc d2 08 08 c2 20 48
>3a2ed8	a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20
>3a2ee8	29 ff 00 20 5b 18 e2 20 dc d2 08 20 09 17 c2 20
>3a2ef8	a5 23 48 a5 21 48 e2 20 a7 00 c9 2c d0 1f 20 00
>3a2f08	1b 20 09 17 e2 20 a5 22 d0 32 c2 20 a5 23 d0 2c
>3a2f18	68 85 08 68 85 0a e2 20 a5 21 87 08 60 08 c2 20
>3a2f28	48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2
>3a2f38	20 29 ff 00 20 5b 18 e2 20 dc d2 08 08 c2 20 48
>3a2f48	a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20
>3a2f58	29 ff 00 20 5b 18 e2 20 dc d2 08 08 c2 20 48 a9
>3a2f68	00 08 5b 68 28 e2 20 a9 01 8f d1 08 00 c2 20 29
>3a2f78	ff 00 20 5b 18 e2 20 dc d2 08 08 e2 20 a7 00 f0
>3a2f88	05 20 00 1b 80 f7 28 60 08 28 60 08 28 60 08 28
>3a2f98	60 08 c2 20 a5 1a 20 22 18 a5 18 20 22 18 a5 02
>3a2fa8	48 a5 00 48 20 45 1b a5 02 20 22 18 a5 00 20 22
>3a2fb8	18 68 85 00 68 85 02 20 21 1b 20 07 40 b0 1f 08
>3a2fc8	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 05 8f d1 08
>3a2fd8	00 c2 20 29 ff 00 20 5b 18 e2 20 dc d2 08 e2 20
>3a2fe8	a5 e8 20 39 18 a5 e7 20 39 18 c2 20 a5 e5 20 22
>3a2ff8	18 20 21 1b e2 20 a7 00 c9 87 d0 6a a5 e8 c9 00
>3a3008	f0 04 c9 01 f0 00 20 00 1b 20 09 17 20 a4 3f e2
>3a3018	20 a9 99 20 0d 1c 20 09 17 c2 20 a5 25 20 22 18
>3a3028	a5 23 20 22 18 a5 21 20 22 18 e2 20 a9 9a 85 35
>3a3038	20 42 1c 90 1b 20 00 1b 20 09 17 e2 20 a5 25 20
>3a3048	22 18 c2 20 a5 23 20 22 18 a5 21 20 22 18 80 14
>3a3058	c2 20 a9 00 00 20 22 18 a9 00 00 20 22 18 a9 01
>3a3068	00 20 22 18 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a3078	e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00 20 5b 18
>3a3088	e2 20 dc d2 08 08 8b 08 e2 20 48 a9 00 48 ab 68
>3a3098	28 08 c2 20 48 a9 00 08 5b 68 28 c2 30 a4 31 c8
>3a30a8	c8 c2 20 b9 0c 00 85 e5 b9 0e 00 e2 20 85 e7 b9
>3a30b8	10 00 85 e8 c2 20 5a 20 5d 3e 7a c2 20 b9 00 00
>3a30c8	85 27 b9 02 00 85 29 e2 20 b9 04 00 85 2b c2 20
>3a30d8	5a 20 2e 21 20 a4 3f 7a c2 20 b9 06 00 85 27 b9
>3a30e8	08 00 85 29 e2 20 b9 0a 00 85 2b c2 20 b9 02 00
>3a30f8	30 0a 20 72 22 20 39 04 f0 28 80 08 20 55 22 20
>3a3108	39 04 f0 1e c2 20 b9 12 00 85 00 b9 14 00 85 02
>3a3118	b9 16 00 85 18 b9 18 00 85 1a e2 20 a9 03 85 da
>3a3128	80 17 a2 21 08 20 37 14 c2 20 18 a5 31 69 1a 00
>3a3138	85 31 a5 33 69 00 00 85 33 ab 28 60 08 a5 18 48
>3a3148	a5 1a 48 20 21 1b 20 44 05 a5 21 f0 26 20 fc 1d
>3a3158	90 42 e2 20 a9 02 85 da 20 45 1b c2 20 68 20 22
>3a3168	18 68 20 22 18 a5 02 20 22 18 a5 00 20 22 18 e6
>3a3178	2f 28 60 68 68 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a3188	20 a9 02 8f d1 08 00 c2 20 29 ff 00 20 5b 18 e2
>3a3198	20 dc d2 08 68 68 08 c2 20 48 a9 00 08 5b 68 28
>3a31a8	e2 20 a9 06 8f d1 08 00 c2 20 29 ff 00 20 5b 18
>3a31b8	e2 20 dc d2 08 08 c2 30 a5 2f f0 1e 20 44 18 85
>3a31c8	00 20 44 18 85 02 20 44 18 85 18 20 44 18 85 1a
>3a31d8	c6 2f e2 20 a9 03 85 da 28 60 08 c2 20 48 a9 00
>3a31e8	08 5b 68 28 e2 20 a9 07 8f d1 08 00 c2 20 29 ff
>3a31f8	00 20 5b 18 e2 20 dc d2 08 08 20 09 17 20 39 04
>3a3208	f0 1c e2 20 a9 94 20 0d 1c 20 44 05 20 39 04 f0
>3a3218	12 20 fc 1d 90 2c e2 20 a9 02 85 da 80 03 20 45
>3a3228	1b 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a3238	02 8f d1 08 00 c2 20 29 ff 00 20 5b 18 e2 20 dc
>3a3248	d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 06
>3a3258	8f d1 08 00 c2 20 29 ff 00 20 5b 18 e2 20 dc d2
>3a3268	08 08 e2 20 a9 01 85 da 28 60 08 20 21 1b 20 44
>3a3278	05 a5 21 f0 0d 20 fc 1d 90 27 e2 20 a9 02 85 da
>3a3288	28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>3a3298	8f d1 08 00 c2 20 29 ff 00 20 5b 18 e2 20 dc d2
>3a32a8	08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 06 8f
>3a32b8	d1 08 00 c2 20 29 ff 00 20 5b 18 e2 20 dc d2 08
>3a32c8	20 d9 13 20 27 0c 20 5c 3d 60 08 a7 00 10 03 20
>3a32d8	00 1b 20 07 40 b0 03 4c 49 33 e2 20 20 61 1c c9
>3a32e8	8c d0 0e a9 8c 20 0d 1c a9 00 8f 00 4d 00 20 5f
>3a32f8	15 20 21 1b e2 20 a7 00 c9 87 f0 03 4c 49 33 20
>3a3308	00 1b a5 e8 48 a5 e7 48 a5 e6 48 a5 e5 48 20 09
>3a3318	17 68 85 e5 68 85 e6 68 85 e7 68 85 e8 29 80 f0
>3a3328	1b 20 cf 3d 90 3a c2 20 a0 09 00 b7 08 85 be e2
>3a3338	20 c8 c8 b7 08 85 c0 20 96 42 80 03 20 a4 3f 28
>3a3348	60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a3358	d1 08 00 c2 20 29 ff 00 20 5b 18 e2 20 dc d2 08
>3a3368	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 05 8f d1
>3a3378	08 00 c2 20 29 ff 00 20 5b 18 e2 20 dc d2 08 08
>3a3388	e2 20 20 61 1c c9 00 f0 66 20 09 17 e2 20 a5 25
>3a3398	c9 ff f0 14 c9 02 d0 05 20 fc 33 80 0b c9 00 d0
>3a33a8	05 20 1c 34 80 02 80 4a 20 21 1b a7 00 f0 40 c9
>3a33b8	3a f0 3c c9 2c f0 23 c9 3b f0 24 08 c2 20 48 a9
>3a33c8	00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29
>3a33d8	ff 00 20 5b 18 e2 20 dc d2 08 a9 09 20 18 00 20
>3a33e8	00 1b 20 21 1b a7 00 f0 09 c9 3a f0 05 80 9a 20
>3a33f8	21 02 28 60 08 8b 08 c2 20 48 a9 00 08 5b 68 28
>3a3408	e2 20 c2 10 a0 00 00 b7 21 f0 06 20 18 00 c8 80
>3a3418	f6 ab 28 60 08 c2 20 20 c5 10 a5 14 85 21 a5 16
>3a3428	85 23 20 fc 33 28 60 08 e2 20 85 b3 4a 4a 4a 4a
>3a3438	29 0f 18 69 30 97 14 c8 a5 b3 29 0f 18 69 30 97
>3a3448	14 c8 28 60 e2 20 a9 8c 20 0d 1c 08 20 09 17 e2
>3a3458	20 c2 10 af 0e 08 af 09 08 8f 0e 08 af 20 74 10
>3a3468	a0 00 00 af 06 08 af 20 2f 34 a9 2f 97 14 c8 af
>3a3478	09 08 af 20 2f 34 a9 2f 97 14 c8 af 0f 08 af 20
>3a3488	2f 34 af 0a 08 af 20 2f 34 a9 00 97 14 af 0e 08
>3a3498	af 29 f7 8f 0e 08 af c2 20 a5 14 85 21 a5 16 85
>3a34a8	23 e2 20 a9 02 85 25 20 ff 11 28 e2 20 20 00 1b
>3a34b8	60 e2 20 a9 8c 20 0d 1c 08 20 09 17 e2 20 c2 10
>3a34c8	af 0e 08 af 09 08 8f 0e 08 af 20 74 10 a0 00 00
>3a34d8	af 04 08 af 29 7f 20 2f 34 a9 3a 97 14 c8 af 02
>3a34e8	08 af 20 2f 34 a9 3a 97 14 c8 af 00 08 af 20 2f
>3a34f8	34 a9 00 97 14 af 0e 08 af 29 f7 8f 0e 08 af c2
>3a3508	20 a5 14 85 21 a5 16 85 23 e2 20 a9 02 85 25 20
>3a3518	ff 11 28 e2 20 20 00 1b 60 08 c2 20 20 09 17 20
>3a3528	4c 04 c2 20 a5 21 49 ff ff 85 21 a5 23 49 ff ff
>3a3538	85 23 e6 21 d0 03 e6 23 00 28 60 e2 20 a9 8c 20
>3a3548	0d 1c 08 c2 30 20 09 17 20 76 04 c2 20 a5 23 48
>3a3558	a5 21 48 20 21 1b e2 20 a7 00 c9 2c f0 03 4c ba
>3a3568	35 20 00 1b 20 09 17 20 a0 04 c2 20 a5 21 48 20
>3a3578	21 1b e2 20 a7 00 c9 2c f0 03 4c ba 35 20 00 1b
>3a3588	20 09 17 20 a0 04 c2 20 a5 21 85 8d e2 20 a5 23
>3a3598	85 8f c2 20 68 85 27 a9 00 00 85 29 68 85 21 68
>3a35a8	85 23 e2 20 a9 02 85 25 20 57 12 e2 20 20 00 1b
>3a35b8	28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>3a35c8	8f d1 08 00 c2 20 29 ff 00 20 5b 18 e2 20 dc d2
>3a35d8	08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>3a35e8	d1 08 00 c2 20 29 ff 00 20 5b 18 e2 20 dc d2 08
>3a35f8	e2 20 a9 8c 20 0d 1c 08 c2 30 20 09 17 e2 20 a5
>3a3608	25 c9 02 f0 03 4c 7c 36 c2 20 a5 23 48 a5 21 48
>3a3618	20 21 1b e2 20 a7 00 c9 2c f0 03 4c 9b 36 20 00
>3a3628	1b 20 09 17 e2 20 a5 25 c9 00 d0 48 c2 20 a5 21
>3a3638	85 8d c2 20 68 85 21 68 85 23 e2 20 a9 02 85 25
>3a3648	e2 20 a0 00 00 b7 21 f0 03 c8 80 f9 c2 20 98 38
>3a3658	e5 8d 30 09 85 27 a9 00 00 85 29 80 07 a9 00 00
>3a3668	85 27 85 29 e2 20 a9 00 85 2b 20 57 12 e2 20 20
>3a3678	00 1b 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a3688	a9 04 8f d1 08 00 c2 20 29 ff 00 20 5b 18 e2 20
>3a3698	dc d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a36a8	02 8f d1 08 00 c2 20 29 ff 00 20 5b 18 e2 20 dc
>3a36b8	d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09
>3a36c8	8f d1 08 00 c2 20 29 ff 00 20 5b 18 e2 20 dc d2
>3a36d8	08 e2 20 a9 8c 20 0d 1c 08 c2 30 20 09 17 e2 20
>3a36e8	a5 25 c9 02 f0 03 4c 45 37 c2 20 a5 23 48 a5 21
>3a36f8	48 20 21 1b e2 20 a7 00 c9 2c f0 03 4c 64 37 20
>3a3708	00 1b 20 09 17 e2 20 a5 25 c9 00 d0 30 c2 20 a5
>3a3718	21 85 8d c2 20 a9 00 00 85 27 a9 00 00 85 29 e2
>3a3728	20 a9 00 85 2b c2 20 68 85 21 68 85 23 e2 20 a9
>3a3738	02 85 25 20 57 12 e2 20 20 00 1b 28 60 08 c2 20
>3a3748	48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2
>3a3758	20 29 ff 00 20 5b 18 e2 20 dc d2 08 08 c2 20 48
>3a3768	a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20
>3a3778	29 ff 00 20 5b 18 e2 20 dc d2 08 08 c2 20 48 a9
>3a3788	00 08 5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20 29
>3a3798	ff 00 20 5b 18 e2 20 dc d2 08 e2 20 a9 8c 20 0d
>3a37a8	1c 20 09 17 c2 10 e2 20 a5 25 c9 02 d0 23 c2 20
>3a37b8	a5 00 85 3e a5 02 85 40 a5 21 85 00 a5 23 85 02
>3a37c8	20 44 05 a5 3e 85 00 a5 40 85 02 e2 20 20 00 1b
>3a37d8	60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f
>3a37e8	d1 08 00 c2 20 29 ff 00 20 5b 18 e2 20 dc d2 08
>3a37f8	e2 20 a9 8c 20 0d 1c 08 20 09 17 c2 10 e2 20 a5
>3a3808	25 c9 00 d0 1d 20 c5 10 c2 20 a5 14 85 21 a5 16
>3a3818	85 23 e2 20 a9 02 85 25 20 ff 11 28 e2 20 20 00
>3a3828	1b 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>3a3838	8f d1 08 00 c2 20 29 ff 00 20 5b 18 e2 20 dc d2
>3a3848	08 e2 20 a9 8c 20 0d 1c 08 20 09 17 20 76 04 c2
>3a3858	20 64 0c 64 0e e2 30 a0 00 b7 21 c9 20 f0 04 c9
>3a3868	24 d0 03 c8 80 f3 b7 21 20 2b 03 90 1e c2 20 06
>3a3878	0c 26 0e 06 0c 26 0e 06 0c 26 0e 06 0c 26 0e e2
>3a3888	20 20 4c 03 05 0c 85 0c c8 80 db c2 20 a5 0c 85
>3a3898	21 a5 0e 85 23 e2 20 a9 00 85 25 28 e2 20 20 00
>3a38a8	1b 60 e2 20 a9 8c 20 0d 1c 08 20 09 17 20 4c 04
>3a38b8	20 74 10 e2 30 a0 ff a9 00 97 14 88 a5 21 29 0f
>3a38c8	aa bf 00 d0 3a 97 14 88 a5 21 29 f0 4a 4a 4a 4a
>3a38d8	aa bf 00 d0 3a 97 14 88 a5 22 85 21 a5 23 85 22
>3a38e8	a5 24 85 23 a9 00 85 24 a5 21 d0 d0 a5 22 d0 cc
>3a38f8	a5 23 d0 c8 98 38 65 14 85 21 a5 15 85 22 a5 16
>3a3908	85 23 a5 17 85 24 a9 02 85 25 20 ff 11 28 e2 20
>3a3918	20 00 1b 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a3928	a9 04 8f d1 08 00 c2 20 29 ff 00 20 5b 18 e2 20
>3a3938	dc d2 08 e2 20 a9 8c 20 0d 1c 20 09 17 e2 20 a5
>3a3948	25 c9 02 d0 1f 8b a5 23 48 ab c2 10 a6 21 20 4a
>3a3958	11 ab 84 21 c2 20 64 23 e2 20 a9 00 85 25 e2 20
>3a3968	20 00 1b 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a3978	a9 04 8f d1 08 00 c2 20 29 ff 00 20 5b 18 e2 20
>3a3988	dc d2 08 e2 20 a9 8c 20 0d 1c 20 09 17 e2 20 a5
>3a3998	25 c9 00 d0 12 e2 20 a7 21 85 21 64 22 64 23 64
>3a39a8	2e e2 20 20 00 1b 60 08 c2 20 48 a9 00 08 5b 68
>3a39b8	28 e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00 20 5b
>3a39c8	18 e2 20 dc d2 08 e2 20 a9 8c 20 0d 1c 20 09 17
>3a39d8	e2 20 a5 25 c9 00 d0 1d c2 20 a7 21 85 0c e2 20
>3a39e8	a0 02 00 b7 21 85 23 64 24 c2 20 a5 0c 85 21 e2
>3a39f8	20 20 00 1b 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a3a08	20 a9 04 8f d1 08 00 c2 20 29 ff 00 20 5b 18 e2
>3a3a18	20 dc d2 08 e2 20 a9 8c 20 0d 1c 20 09 17 e2 20
>3a3a28	a5 25 c9 00 d0 0e c2 20 a7 21 85 21 64 23 e2 20
>3a3a38	20 00 1b 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a3a48	a9 04 8f d1 08 00 c2 20 29 ff 00 20 5b 18 e2 20
>3a3a58	dc d2 08 e2 20 a9 8c 20 0d 1c 20 09 17 e2 20 a5
>3a3a68	25 c9 00 d0 24 20 74 10 a5 21 87 14 a9 00 a0 01
>3a3a78	00 97 14 c2 20 a5 14 85 21 a5 16 85 23 e2 20 a9
>3a3a88	02 85 25 e2 20 20 00 1b 60 08 c2 20 48 a9 00 08
>3a3a98	5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00
>3a3aa8	20 5b 18 e2 20 dc d2 08 e2 20 a9 8c 20 0d 1c 20
>3a3ab8	09 17 e2 20 a5 25 c9 02 d0 14 a7 21 85 21 64 22
>3a3ac8	64 23 64 24 a9 00 85 25 e2 20 20 00 1b 60 08 c2
>3a3ad8	20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00
>3a3ae8	c2 20 29 ff 00 20 5b 18 e2 20 dc d2 08 e2 20 a9
>3a3af8	8c 20 0d 1c 20 09 17 e2 20 a5 25 c9 00 d0 39 e2
>3a3b08	20 a5 24 d0 52 a5 23 d0 4e a5 22 d0 4a c2 10 20
>3a3b18	74 10 a4 21 e2 20 a9 00 97 14 88 30 07 a9 20 97
>3a3b28	14 88 10 fb a9 02 85 25 c2 20 a5 14 85 21 a5 16
>3a3b38	85 23 e2 20 20 00 1b 60 08 c2 20 48 a9 00 08 5b
>3a3b48	68 28 e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00 20
>3a3b58	5b 18 e2 20 dc d2 08 08 c2 20 48 a9 00 08 5b 68
>3a3b68	28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff 00 20 5b
>3a3b78	18 e2 20 dc d2 08 e2 20 a9 8c 20 0d 1c 20 09 17
>3a3b88	e2 20 a5 25 c9 00 d0 39 e2 20 a5 24 d0 52 a5 23
>3a3b98	d0 4e a5 22 d0 4a c2 10 20 74 10 a4 21 e2 20 a9
>3a3ba8	00 97 14 88 30 07 a9 09 97 14 88 10 fb a9 02 85
>3a3bb8	25 c2 20 a5 14 85 21 a5 16 85 23 e2 20 20 00 1b
>3a3bc8	60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f
>3a3bd8	d1 08 00 c2 20 29 ff 00 20 5b 18 e2 20 dc d2 08
>3a3be8	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1
>3a3bf8	08 00 c2 20 29 ff 00 20 5b 18 e2 20 dc d2 08 e2
>3a3c08	20 a9 8c 20 0d 1c 20 09 17 20 4c 04 c2 20 a5 23
>3a3c18	10 17 49 ff ff 85 23 a5 21 49 ff ff 18 69 01 00
>3a3c28	85 21 a5 23 69 00 00 85 23 e2 20 20 00 1b 60 e2
>3a3c38	20 a9 8c 20 0d 1c 20 09 17 e2 20 a5 25 c9 00 d0
>3a3c48	25 c2 20 a5 23 30 12 d0 04 a5 21 f0 13 a9 00 00
>3a3c58	85 23 a9 01 00 85 21 80 07 a9 ff ff 85 23 85 21
>3a3c68	e2 20 20 00 1b 60 08 c2 20 48 a9 00 08 5b 68 28
>3a3c78	e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00 20 5b 18
>3a3c88	e2 20 dc d2 08 00 ea 60 08 0b 08 c2 20 48 a9 00
>3a3c98	08 5b 68 28 c2 30 c2 20 a9 00 00 85 d7 e2 20 a9
>3a3ca8	36 85 d9 c2 30 a9 00 00 a0 00 00 97 d7 a0 02 00
>3a3cb8	97 d7 a0 04 00 97 d7 20 d6 1a 2b 28 60 8b 08 c2
>3a3cc8	20 a9 00 00 85 18 a9 36 00 85 1a 20 d6 1a 20 b2
>3a3cd8	1d 28 ab 60 08 c2 20 64 53 a9 ff 7f 85 57 20 21
>3a3ce8	02 20 61 1c 29 ff 00 c9 00 00 f0 2c c9 81 00 f0
>3a3cf8	1a 20 21 1b 20 44 05 a5 21 85 53 20 61 1c 29 ff
>3a3d08	00 c9 00 00 f0 12 c9 81 00 d0 2a 20 0d 1c 20 21
>3a3d18	1b 20 44 05 a5 21 85 57 a5 1a 48 a5 18 48 a5 02
>3a3d28	48 a5 00 48 20 da 12 68 85 00 68 85 02 68 85 18
>3a3d38	68 85 1a 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a3d48	20 a9 02 8f d1 08 00 c2 20 29 ff 00 20 5b 18 e2
>3a3d58	20 dc d2 08 08 08 c2 20 48 a9 00 08 5b 68 28 c2
>3a3d68	20 64 e2 64 e5 e2 20 64 e4 64 e7 64 e8 c2 20 38
>3a3d78	a5 d7 69 04 00 85 df e2 20 a5 d9 69 00 85 e1 28
>3a3d88	60 c9 5f f0 1a c9 3a b0 04 c9 30 b0 12 c9 5b b0
>3a3d98	04 c9 41 b0 0a c9 7b b0 04 c9 61 b0 02 18 60 38
>3a3da8	60 08 e2 20 c2 10 a0 00 00 b7 0c f0 0a d7 e5 d0
>3a3db8	13 c8 c0 08 00 d0 f2 b7 e5 20 75 03 20 89 3d b0
>3a3dc8	03 28 38 60 28 18 60 08 e2 20 c2 10 a0 00 00 a2
>3a3dd8	00 00 b7 e5 f0 0b 20 75 03 9f 00 4e 00 c8 e8 80
>3a3de8	f1 a9 00 9f 00 4e 00 c2 20 a9 00 4e 85 e5 e2 20
>3a3df8	a9 00 85 e7 c2 20 a5 e2 85 08 d0 06 e2 20 a5 e4
>3a3e08	f0 4d e2 20 a5 e4 85 0a a5 e8 a0 00 00 d7 08 d0
>3a3e18	17 c2 20 18 a5 08 69 01 00 85 0c e2 20 a5 0a 69
>3a3e28	00 85 0e 20 a9 3d b0 2a a0 0d 00 c2 20 b7 08 85
>3a3e38	0c c8 c8 e2 20 b7 08 85 0e d0 06 c2 20 a5 0c f0
>3a3e48	0e c2 20 a5 0c 85 08 e2 20 a5 0e 85 0a 80 b9 28
>3a3e58	18 60 28 38 60 08 20 cf 3d b0 1f 08 c2 20 48 a9
>3a3e68	00 08 5b 68 28 e2 20 a9 05 8f d1 08 00 c2 20 29
>3a3e78	ff 00 20 5b 18 e2 20 dc d2 08 c2 30 a0 09 00 b7
>3a3e88	08 85 21 c8 c8 b7 08 85 23 e2 20 a0 00 00 b7 08
>3a3e98	85 25 28 60 08 c2 20 18 a5 df 69 10 00 85 08 e2
>3a3ea8	20 a5 e1 69 00 85 0a c5 ba 90 27 c2 20 a5 08 c5
>3a3eb8	b8 90 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a3ec8	09 8f d1 08 00 c2 20 29 ff 00 20 5b 18 e2 20 dc
>3a3ed8	d2 08 c2 20 a5 df 85 be e2 20 a5 e1 85 c0 c2 20
>3a3ee8	a5 08 85 df e2 20 a5 0a 85 e1 28 60 08 e2 20 a5
>3a3ef8	25 c5 e8 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a3f08	20 a9 04 8f d1 08 00 c2 20 29 ff 00 20 5b 18 e2
>3a3f18	20 dc d2 08 c2 10 20 9c 3e c2 30 18 a5 be 69 01
>3a3f28	00 85 08 e2 20 a5 c0 69 00 85 0a a0 00 00 a9 00
>3a3f38	97 08 c8 c0 08 00 d0 f8 a0 00 00 b7 e5 f0 10 20
>3a3f48	75 03 20 89 3d 90 08 97 08 c8 c0 08 00 d0 ec c2
>3a3f58	20 a0 09 00 a5 21 97 be a5 23 c8 c8 97 be a5 e2
>3a3f68	a0 0d 00 97 be c8 c8 e2 20 a5 e4 97 be c2 20 a5
>3a3f78	be 85 e2 e2 20 a5 c0 85 e4 e2 20 a0 00 00 a5 25
>3a3f88	97 be c9 02 f0 02 28 60 c2 20 a5 21 85 be e2 20
>3a3f98	a5 23 85 c0 20 8b 0e 20 a0 0e 80 ea 08 c2 30 a5
>3a3fa8	e2 d0 06 e2 20 a5 e4 f0 05 20 cf 3d b0 05 20 f4
>3a3fb8	3e 80 17 e2 20 a5 25 c9 02 f0 11 c2 30 a0 09 00
>3a3fc8	a5 21 97 08 c8 c8 a5 23 97 08 28 60 a0 09 00 b7
>3a3fd8	08 85 be c8 c8 e2 20 b7 08 85 c0 20 8b 0e 20 bf
>3a3fe8	0e e2 20 a5 25 c9 02 f0 02 80 d0 c2 20 a5 21 85
>3a3ff8	be e2 20 a5 23 85 c0 20 8b 0e 20 a0 0e 80 bc 08
>3a4008	20 21 1b e2 20 a7 00 20 01 03 90 42 c2 20 a5 00
>3a4018	85 e5 e2 20 a5 02 85 e7 20 00 1b a7 00 f0 0d c9
>3a4028	24 f0 14 c9 25 f0 09 20 89 3d b0 ec a9 00 80 0c
>3a4038	20 00 1b a9 00 80 05 20 00 1b a9 02 85 e8 20 61
>3a4048	1c c9 8c d0 06 a5 e8 09 80 85 e8 28 38 60 28 18
>3a4058	60 08 c2 20 48 a9 00 08 5b 68 28 c2 20 a5 21 85
>3a4068	0c a5 23 64 0e 64 21 64 23 e2 20 64 26 a9 01 85
>3a4078	25 c2 20 a5 0c f0 35 10 0e e2 20 a9 80 85 26 c2
>3a4088	20 49 ff ff 1a 85 0c e2 20 e6 24 c2 20 46 0e 66
>3a4098	0c e2 20 66 23 66 22 66 21 c2 20 a5 0c c9 01 00
>3a40a8	d0 e5 e2 20 06 26 66 23 66 22 66 21 60 08 20 8b
>3a40b8	0e c2 20 a9 01 00 85 21 a9 00 00 85 23 e2 20 af
>3a40c8	00 4d 00 c2 20 29 ff 00 85 8d a8 a2 01 00 c2 20
>3a40d8	bf 00 4d 00 85 27 a9 00 00 85 29 20 7b 21 e8 e8
>3a40e8	88 d0 eb c2 20 a9 04 00 85 27 a9 00 00 85 29 20
>3a40f8	7b 21 e2 20 af 00 4d 00 85 0c a9 00 85 0d c2 20
>3a4108	06 0c 38 a5 21 65 0c 85 21 a5 23 69 00 00 85 23
>3a4118	d0 29 e2 20 a5 e8 09 80 a6 21 20 4f 0c e2 20 af
>3a4128	00 4d 00 87 be a0 01 00 a2 00 00 e2 20 bf 01 4d
>3a4138	00 97 be e4 8d f0 23 e8 c8 80 f0 08 c2 20 48 a9
>3a4148	00 08 5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20 29
>3a4158	ff 00 20 5b 18 e2 20 dc d2 08 e2 20 38 a5 be 67
>3a4168	be 85 08 a5 bf 69 00 85 09 a5 c0 69 00 85 0a 64
>3a4178	0b c2 20 a0 05 00 b7 c1 85 0c e2 20 c8 c8 b7 c1
>3a4188	85 0e 64 0f e2 20 a9 00 87 08 c2 20 18 a5 08 69
>3a4198	01 00 85 08 a5 0a 69 00 00 85 0a c5 0e d0 e5 a5
>3a41a8	08 c5 0c d0 df 28 60 08 c2 20 64 08 64 0a e2 20
>3a41b8	af 00 4d 00 85 8d 64 8e a2 01 00 e2 20 a7 be c5
>3a41c8	8d f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a41d8	0a 8f d1 08 00 c2 20 29 ff 00 20 5b 18 e2 20 dc
>3a41e8	d2 08 c9 01 f0 3a a0 01 00 e2 20 bf 00 4d 00 85
>3a41f8	21 64 22 64 23 64 24 b7 be 85 27 64 28 64 29 64
>3a4208	2a a5 21 c5 27 b0 68 20 7b 21 c2 20 18 a5 08 65
>3a4218	21 85 08 a5 0a 65 23 85 0a e8 e8 c8 c4 8d d0 c9
>3a4228	e2 20 18 bf 00 4d 00 85 8e 65 08 85 08 a5 09 69
>3a4238	00 85 09 c2 20 a5 0a 69 00 00 85 0a c2 20 06 08
>3a4248	26 0a 06 08 26 0a e2 20 38 a5 08 65 8d 85 08 a5
>3a4258	09 69 00 85 09 c2 20 a5 0a 69 00 00 85 0a 18 a5
>3a4268	08 65 be 85 08 e2 20 a5 0a 65 c0 85 0a 28 60 08
>3a4278	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08
>3a4288	00 c2 20 29 ff 00 20 5b 18 e2 20 dc d2 08 08 20
>3a4298	8b 0e e2 20 a0 00 00 b7 c1 29 7f c5 25 d0 28 a5
>3a42a8	25 48 c2 20 a5 23 48 a5 21 48 20 af 41 68 85 21
>3a42b8	68 85 23 e2 20 68 85 25 c2 20 a5 21 87 08 a0 02
>3a42c8	00 a5 23 97 08 28 60 08 c2 20 48 a9 00 08 5b 68
>3a42d8	28 e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00 20 5b
>3a42e8	18 e2 20 dc d2 08 08 20 8b 0e f4 00 00 f4 00 00
>3a42f8	e2 20 48 20 af 41 e2 20 68 c2 20 68 68 c2 20 a7
>3a4308	08 85 21 a0 02 00 b7 08 85 23 e2 20 a0 00 00 b7
>3a4318	c1 29 7f 85 25 28 60 da 0b 08 08 c2 20 48 a9 00
>3a4328	08 5b 68 28 c2 30 a5 23 89 f0 ff d0 29 89 0f 00
>3a4338	d0 0c a5 21 89 00 fc d0 05 20 1c 34 80 2e a2 0a
>3a4348	00 46 23 66 21 ca d0 f9 20 1c 34 e2 20 a9 4b 20
>3a4358	18 00 c2 20 80 16 a2 14 00 46 23 66 21 ca d0 f9
>3a4368	20 1c 34 e2 20 a9 4d 20 18 00 c2 20 28 2b fa 60
>3a4378	0b 08 08 c2 20 48 a9 00 08 5b 68 28 c2 20 20 c5
>3a4388	10 20 9a 43 a5 14 85 21 a5 16 85 23 20 fc 33 28
>3a4398	2b 60 5a 0b 08 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a43a8	20 a7 14 c9 20 d0 1c a0 02 00 b7 14 d0 06 a9 30
>3a43b8	87 14 80 0f a0 01 00 b7 14 87 14 c2 20 e6 14 d0
>3a43c8	02 e6 16 28 2b 7a 60 0b 08 08 c2 20 48 a9 00 08
>3a43d8	5b 68 28 c2 20 8f 44 02 00 a2 09 00 4a ca d0 fc
>3a43e8	18 69 bc 07 85 21 64 23 e2 20 a9 00 85 25 c2 20
>3a43f8	20 1c 34 a9 2d 00 20 18 00 c2 20 af 44 02 00 a2
>3a4408	05 00 4a ca d0 fc 29 0f 00 85 21 64 23 e2 20 a9
>3a4418	00 85 25 c2 20 20 78 43 a9 2d 00 20 18 00 c2 20
>3a4428	af 44 02 00 29 1f 00 85 21 64 23 e2 20 a9 00 85
>3a4438	25 c2 20 20 78 43 28 2b 60 0b 08 08 c2 20 48 a9
>3a4448	00 08 5b 68 28 c2 20 8f 44 02 00 a2 0b 00 4a ca
>3a4458	d0 fc 85 21 64 23 e2 20 a9 00 85 25 c2 20 20 1c
>3a4468	34 a9 3a 00 20 18 00 c2 20 af 44 02 00 a2 05 00
>3a4478	4a ca d0 fc 29 0f 00 85 21 64 23 e2 20 a9 00 85
>3a4488	25 c2 20 20 78 43 a9 3a 00 20 18 00 c2 20 af 44
>3a4498	02 00 29 1f 00 85 21 64 23 e2 20 a9 00 85 25 c2
>3a44a8	20 20 78 43 28 2b 60 0b 08 c2 30 a9 00 00 8f b4
>3a44b8	08 00 8f b6 08 00 e2 20 20 61 1c c9 00 f0 08 20
>3a44c8	09 17 20 76 04 80 11 c2 20 a9 00 00 85 21 85 23
>3a44d8	e2 20 a9 02 85 25 c2 20 20 39 46 22 08 11 00 b0
>3a44e8	22 20 ea 46 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a44f8	a9 10 8f d1 08 00 c2 20 29 ff 00 20 5b 18 e2 20
>3a4508	dc d2 08 08 c2 20 48 a9 20 03 5b 68 28 e2 20 a0
>3a4518	00 00 b7 18 d0 03 82 d2 00 c9 e5 d0 03 82 bf 00
>3a4528	a0 0b 00 b7 18 89 08 f0 03 82 d5 00 89 02 f0 03
>3a4538	82 ac 00 29 0f c9 0f d0 03 82 a3 00 a0 00 00 b7
>3a4548	18 c9 20 f0 09 20 18 00 c8 c0 08 00 d0 f1 a0 08
>3a4558	00 b7 18 c9 20 f0 17 a9 2e 20 18 00 a0 08 00 b7
>3a4568	18 c9 20 f0 09 20 18 00 c8 c0 0b 00 d0 f1 a9 09
>3a4578	20 18 00 a0 0b 00 b7 18 89 08 d0 60 89 01 f0 05
>3a4588	a9 52 20 18 00 89 04 f0 05 a9 53 20 18 00 89 10
>3a4598	f0 05 a9 44 20 18 00 a9 09 20 18 00 c2 20 a0 1c
>3a45a8	00 b7 18 8f 21 08 00 c8 c8 b7 18 8f 23 08 00 e2
>3a45b8	20 a9 00 8f 25 08 00 20 1f 43 e2 20 a9 09 20 18
>3a45c8	00 c2 20 a0 10 00 b7 18 20 cf 43 e2 20 a9 20 20
>3a45d8	18 00 c2 20 a0 0e 00 b7 18 20 41 44 20 21 02 20
>3a45e8	38 02 22 0c 11 00 90 03 82 18 ff 20 ea 46 08 c2
>3a45f8	20 48 a9 00 08 5b 68 28 20 45 1b 20 21 02 28 2b
>3a4608	60 08 c2 20 48 a9 20 03 5b 68 28 e2 20 29 0f c9
>3a4618	0f f0 cc a9 5b 20 18 00 a0 00 00 b7 18 c9 20 f0
>3a4628	09 20 18 00 c8 c0 08 00 d0 f1 a9 5d 20 18 00 80
>3a4638	ab 0b 08 08 c2 20 48 a9 20 03 5b 68 28 c2 30 a9
>3a4648	22 f2 85 20 a9 3a 00 85 22 a0 00 00 e2 20 a9 00
>3a4658	97 20 c8 c0 1e 00 d0 f8 c2 20 a9 22 f0 8f 30 f2
>3a4668	3a a9 3a 00 8f 32 f2 3a af 21 08 00 8f 24 f2 3a
>3a4678	af 23 08 00 8f 26 f2 3a 28 2b 60 08 c2 30 20 21
>3a4688	1b 20 09 17 20 76 04 20 39 46 e2 20 a9 2c 85 35
>3a4698	20 42 1c b0 0f c2 20 a9 ff ff 8f 54 03 00 8f 56
>3a46a8	03 00 80 17 20 00 1b 20 09 17 20 4c 04 c2 20 a5
>3a46b8	21 8f 54 03 00 a5 23 8f 56 03 00 22 18 11 00 b0
>3a46c8	1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 11 8f
>3a46d8	d1 08 00 c2 20 29 ff 00 20 5b 18 e2 20 dc d2 08
>3a46e8	28 60 8b 0b 08 08 c2 20 48 a9 00 08 5b 68 28 08
>3a46f8	e2 20 48 a9 00 48 ab 68 28 e2 20 af 2e 03 00 85
>3a4708	21 a9 00 85 22 85 23 85 24 a9 00 85 25 85 e8 a9
>3a4718	3a 85 e7 c2 20 a9 4d 47 85 e5 20 a4 3f e2 20 af
>3a4728	20 03 00 85 21 a9 00 85 22 85 23 85 24 a9 00 85
>3a4738	25 85 e8 a9 3a 85 e7 c2 20 a9 55 47 85 e5 20 a4
>3a4748	3f 28 2b ab 60 44 4f 53 53 54 41 54 00 42 49 4f
>3a4758	53 53 54 41 54 00 08 c2 30 20 21 1b 20 09 17 20
>3a4768	76 04 a5 21 8f 60 03 00 a5 23 8f 62 03 00 a9 ff
>3a4778	ff 8f 54 03 00 8f 56 03 00 22 24 11 00 b0 25 20
>3a4788	5b 18 20 ea 46 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a4798	20 a9 11 8f d1 08 00 c2 20 29 ff 00 20 5b 18 e2
>3a47a8	20 dc d2 08 20 5b 18 28 60 08 c2 30 20 21 1b 20
>3a47b8	09 17 20 76 04 20 39 46 a9 00 00 8f 54 03 00 a9
>3a47c8	01 00 8f 56 03 00 20 90 3c 22 18 11 00 b0 22 20
>3a47d8	ea 46 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 11
>3a47e8	8f d1 08 00 c2 20 29 ff 00 20 5b 18 e2 20 dc d2
>3a47f8	08 20 ea 46 c2 20 a2 12 00 18 bf 22 f2 3a 69 00
>3a4808	00 85 90 bf 24 f2 3a 69 01 00 85 92 e2 20 a9 00
>3a4818	87 90 c2 20 a9 00 00 85 78 a9 01 00 85 7a a2 00
>3a4828	00 e2 20 a7 78 f0 28 c9 0d f0 12 c9 0a f0 04 9d
>3a4838	00 4f e8 c2 20 e6 78 d0 e8 e6 7a 80 e4 e2 20 a9
>3a4848	00 9d 00 4f 20 b0 20 e6 78 d0 d3 e6 7a 80 cf e0
>3a4858	00 00 f0 0a e2 20 a9 00 9d 00 4f 20 b0 20 28 60
>3a4868	08 c2 30 20 21 1b 20 09 17 20 76 04 20 39 46 e2
>3a4878	20 a9 2c 20 0d 1c c2 20 20 09 17 20 4c 04 a5 21
>3a4888	8f 50 03 00 a5 23 8f 52 03 00 e2 20 a9 2c c2 20
>3a4898	20 0d 1c 20 09 17 20 4c 04 a5 21 8f 58 03 00 a5
>3a48a8	23 8f 5a 03 00 22 1c 11 00 b0 22 20 ea 46 08 c2
>3a48b8	20 48 a9 00 08 5b 68 28 e2 20 a9 12 8f d1 08 00
>3a48c8	c2 20 29 ff 00 20 5b 18 e2 20 dc d2 08 20 ea 46
>3a48d8	28 60 da 5a 08 a2 00 00 a0 00 00 e2 20 b7 21 9d
>3a48e8	00 04 f0 04 e8 c8 80 f5 28 7a fa 60 08 c2 30 20
>3a48f8	21 1b 20 09 17 20 76 04 20 39 46 a9 00 00 85 a4
>3a4908	e2 20 a9 01 85 a6 a9 20 85 b2 c2 20 a9 00 00 85
>3a4918	a9 a9 ff ff 85 a7 c2 20 a9 00 00 85 53 85 55 a9
>3a4928	ff ff 85 57 a9 ff 7f 85 59 20 da 12 e2 20 a9 80
>3a4938	85 b2 c2 20 c6 a9 18 a9 00 00 8f 50 03 00 65 a9
>3a4948	8f 58 03 00 a9 01 00 8f 52 03 00 69 00 00 8f 5a
>3a4958	03 00 22 1c 11 00 b0 22 20 ea 46 08 c2 20 48 a9
>3a4968	00 08 5b 68 28 e2 20 a9 12 8f d1 08 00 c2 20 29
>3a4978	ff 00 20 5b 18 e2 20 dc d2 08 20 ea 46 28 60 08
>3a4988	c2 30 20 21 1b 20 09 17 20 76 04 20 da 48 22 04
>3a4998	11 00 b0 22 20 ea 46 08 c2 20 48 a9 00 08 5b 68
>3a49a8	28 e2 20 a9 13 8f d1 08 00 c2 20 29 ff 00 20 5b
>3a49b8	18 e2 20 dc d2 08 20 ea 46 28 60 da 08 e2 20 c9
>3a49c8	61 90 08 c9 7b b0 04 29 df 80 13 c9 20 90 13 a2
>3a49d8	00 00 df ee 49 3a f0 0a e8 e0 0f 00 d0 f4 28 38
>3a49e8	fa 6b 28 18 fa 6b 2a 2b 2c 2f 3a 3b 3c 3d 3e 3f
>3a49f8	5c 5b 5d 7c 22 08 08 c2 20 48 a9 00 08 5b 68 28
>3a4a08	c2 30 20 09 17 20 76 04 20 da 48 22 10 11 00 b0
>3a4a18	22 20 ea 46 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a4a28	a9 14 8f d1 08 00 c2 20 29 ff 00 20 5b 18 e2 20
>3a4a38	dc d2 08 e2 20 a9 2c 20 0d 1c c2 20 20 09 17 20
>3a4a48	76 04 ad 38 03 85 08 ad 3a 03 85 0a e2 20 a2 00
>3a4a58	00 a9 20 95 7c e8 e0 0b 00 d0 f8 a2 00 00 a0 00
>3a4a68	00 b7 21 f0 6d c9 2e f0 30 22 c3 49 3a b0 1f 08
>3a4a78	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d1 08
>3a4a88	00 c2 20 29 ff 00 20 5b 18 e2 20 dc d2 08 95 7c
>3a4a98	c8 e8 c0 08 00 d0 ca 80 01 c8 a2 08 00 b7 21 f0
>3a4aa8	31 22 c3 49 3a b0 22 20 ea 46 08 c2 20 48 a9 00
>3a4ab8	08 5b 68 28 e2 20 a9 0a 8f d1 08 00 c2 20 29 ff
>3a4ac8	00 20 5b 18 e2 20 dc d2 08 95 7c c8 e8 c0 0b 00
>3a4ad8	d0 cb a2 00 00 a0 00 00 b5 7c 97 08 e8 c8 c0 0b
>3a4ae8	00 d0 f5 22 14 11 00 b0 22 20 ea 46 08 c2 20 48
>3a4af8	a9 00 08 5b 68 28 e2 20 a9 15 8f d1 08 00 c2 20
>3a4b08	29 ff 00 20 5b 18 e2 20 dc d2 08 20 ea 46 28 60
>3a4b18	08 08 c2 20 48 a9 00 08 5b 68 28 c2 30 20 09 17
>3a4b28	20 76 04 a5 21 8f 64 03 00 a5 23 8f 66 03 00 e2
>3a4b38	20 a9 2c 20 0d 1c c2 20 20 09 17 20 76 04 a5 21
>3a4b48	8f 68 03 00 a5 23 8f 6a 03 00 22 30 11 00 b0 1f
>3a4b58	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 16 8f d1
>3a4b68	08 00 c2 20 29 ff 00 20 5b 18 e2 20 dc d2 08 28
>3a4b78	60 5c 36 65 3a 5c 87 63 3a 5c 37 65 3a 5c b3 54
>3a4b88	3a 5c 10 55 3a 5c 43 54 3a 5c c9 53 3a 5c 46 59
>3a4b98	3a 5c 34 50 3a 5c 61 53 3a 5c 1c 53 3a 5c a6 52
>3a4ba8	3a 5c 45 64 3a 5c 42 51 3a 5c 98 4f 3a 5c c0 64
>3a4bb8	3a 5c 70 50 3a 5c 39 65 3a 5c 32 65 3a 5c 5f 52
>3a4bc8	3a 5c 3a 65 3a 18 fb c2 20 a9 ff fe 1b 58 5c da
>3a4bd8	4b 3a c2 30 22 98 4f 3a 20 08 00 20 0c 00 8b e2
>3a4be8	20 a9 00 48 ab a2 00 4f 20 84 03 ab 22 7d 4b 3a
>3a4bf8	22 85 4b 3a 80 e2 08 8b e2 20 a9 3a 48 ab c2 10
>3a4c08	a2 11 4c 20 ae 02 ab 28 6b 41 20 3c 73 74 61 72
>3a4c18	74 3e 20 3c 61 73 73 65 6d 62 6c 79 3e 0d 20 20
>3a4c28	41 73 73 65 6d 62 6c 65 20 61 20 70 72 6f 67 72
>3a4c38	61 6d 0d 0d 43 20 3c 73 74 61 72 74 31 3e 20 3c
>3a4c48	73 74 61 72 74 32 3e 20 5b 6c 65 6e 20 28 31 20
>3a4c58	69 66 20 62 6c 61 6e 6b 29 5d 0d 20 20 43 6f 6d
>3a4c68	70 61 72 65 20 74 6f 20 73 65 63 74 69 6f 6e 73
>3a4c78	20 6f 66 20 6d 65 6d 6f 72 79 0d 0d 44 20 3c 73
>3a4c88	74 61 72 74 3e 20 5b 65 6e 64 5d 0d 20 20 44 69
>3a4c98	73 61 73 73 65 6d 62 6c 65 20 61 20 70 72 6f 67
>3a4ca8	72 61 6d 0d 0d 46 20 3c 73 74 61 72 74 3e 20 3c
>3a4cb8	65 6e 64 3e 20 3c 62 79 74 65 3e 0d 20 20 46 69
>3a4cc8	6c 6c 20 61 20 62 6c 6f 63 6b 20 6f 66 20 6d 65
>3a4cd8	6d 6f 72 79 20 77 69 74 68 20 61 20 62 79 74 65
>3a4ce8	0d 0d 47 20 5b 61 64 64 72 65 73 73 5d 0d 20 20
>3a4cf8	53 74 61 72 74 20 65 78 65 63 75 74 69 6f 6e 20
>3a4d08	61 74 20 61 20 6c 6f 63 61 74 69 6f 6e 0d 0d 4a
>3a4d18	20 5b 61 64 64 72 65 73 73 5d 20 2d 20 4a 75 6d
>3a4d28	70 20 74 6f 20 61 20 6c 6f 63 61 74 69 6f 6e 20
>3a4d38	69 6e 20 6d 65 6d 6f 72 79 0d 20 20 4a 75 6d 70
>3a4d48	20 74 6f 20 61 20 6c 6f 63 61 74 69 6f 6e 20 69
>3a4d58	6e 20 6d 65 6d 6f 72 79 0d 0d 48 20 3c 73 74 61
>3a4d68	72 74 3e 20 3c 65 6e 64 3e 20 3c 62 79 74 65 3e
>3a4d78	20 5b 62 79 74 65 5d 2e 2e 0d 20 20 48 75 6e 74
>3a4d88	20 66 6f 72 20 76 61 6c 75 65 73 20 69 6e 20 6d
>3a4d98	65 6d 6f 72 79 0d 0d 4c 20 20 20 20 20 4c 4f 41
>3a4da8	44 20 20 20 20 20 20 20 20 20 22 46 69 6c 65 22
>3a4db8	20 5b 64 65 73 74 69 6e 61 74 69 6f 6e 5d 0d 4d
>3a4dc8	20 3c 73 74 61 72 74 3e 20 5b 65 6e 64 5d 0d 20
>3a4dd8	20 44 75 6d 70 20 74 68 65 20 76 61 6c 75 65 20
>3a4de8	69 6e 20 6d 65 6d 6f 72 79 0d 0d 52 20 2d 20 44
>3a4df8	69 73 70 6c 61 79 20 74 68 65 20 76 61 6c 75 65
>3a4e08	73 20 6f 66 20 74 68 65 20 72 65 67 69 73 74 65
>3a4e18	72 73 0d 0d 3b 20 3c 50 43 3e 20 3c 41 3e 20 3c
>3a4e28	58 3e 20 3c 59 3e 20 3c 53 50 3e 20 3c 44 42 52
>3a4e38	3e 20 3c 44 50 3e 20 3c 4e 56 4d 58 44 49 5a 43
>3a4e48	3e 0d 20 20 43 68 61 6e 67 65 20 74 68 65 20 63
>3a4e58	6f 6e 74 65 6e 74 73 20 6f 66 20 74 68 65 20 72
>3a4e68	65 67 69 73 74 65 72 73 0d 0d 53 20 20 20 20 20
>3a4e78	53 41 56 45 20 20 20 20 20 20 20 20 20 22 46 69
>3a4e88	6c 65 22 20 3c 73 74 61 72 74 3e 20 3c 65 6e 64
>3a4e98	3e 0d 54 20 3c 73 74 61 72 74 3e 20 3c 65 6e 64
>3a4ea8	3e 20 3c 64 65 73 74 69 6e 61 74 69 6f 6e 3e 0d
>3a4eb8	20 20 54 72 61 6e 73 66 65 72 20 28 63 6f 70 79
>3a4ec8	29 20 64 61 74 61 20 77 69 74 68 69 6e 20 6d 65
>3a4ed8	6d 6f 72 79 0d 0d 57 20 3c 62 79 74 65 3e 0d 20
>3a4ee8	20 53 65 74 20 74 68 65 20 72 65 67 69 73 74 65
>3a4ef8	72 20 77 69 64 74 68 20 66 6c 61 67 73 20 66 6f
>3a4f08	72 20 74 68 65 20 64 69 73 61 73 73 65 6d 62 6c
>3a4f18	65 72 0d 0d 58 20 2d 20 52 65 74 75 72 6e 20 74
>3a4f28	6f 20 42 41 53 49 43 0d 0d 3e 20 3c 73 74 61 72
>3a4f38	74 3e 20 3c 62 79 74 65 3e 20 5b 62 79 74 65 5d
>3a4f48	2e 2e 2e 0d 20 20 45 64 69 74 20 64 61 74 61 20
>3a4f58	69 6e 20 6d 65 6d 6f 72 79 0d 0d 3f 20 2d 20 44
>3a4f68	69 73 70 6c 61 79 20 61 20 73 68 6f 72 74 20 68
>3a4f78	65 6c 70 20 73 63 72 65 65 6e 0d 0d 00 08 08 c2
>3a4f88	20 48 a9 46 08 5b 68 28 e2 20 a5 0d 85 4e 28 6b
>3a4f98	08 e2 20 48 a9 3a 48 ab 68 28 a2 77 65 20 ae 02
>3a4fa8	e2 20 a9 3b 20 18 00 a9 20 20 18 00 c2 30 08 e2
>3a4fb8	20 48 a9 00 48 ab 68 28 a0 03 00 a2 42 02 20 31
>3a4fc8	02 c2 20 a9 20 00 20 18 00 af 44 02 00 20 be 02
>3a4fd8	a9 20 00 20 18 00 af 46 02 00 20 be 02 a9 20 00
>3a4fe8	20 18 00 af 48 02 00 20 be 02 a9 20 00 20 18 00
>3a4ff8	af 4a 02 00 20 be 02 a9 20 00 20 18 00 af 4e 02
>3a5008	00 20 d8 02 a9 20 00 20 18 00 20 18 00 af 4c 02
>3a5018	00 20 be 02 a9 20 00 20 18 00 08 e2 20 ad 4f 02
>3a5028	22 90 62 3a 28 20 21 02 20 21 02 6b 08 0b 08 c2
>3a5038	20 48 a9 46 08 5b 68 28 e2 20 a5 15 87 0d e2 20
>3a5048	a5 0f c5 13 d0 0e c2 20 a5 0d c5 11 d0 06 20 21
>3a5058	02 2b 28 6b c2 20 18 a5 0d 69 01 00 85 0d e2 20
>3a5068	a5 0e 69 00 85 0e 80 d0 08 0b 08 c2 20 48 a9 46
>3a5078	08 5b 68 28 e2 20 a5 0f c5 17 90 45 c2 20 a5 0d
>3a5088	c5 15 90 3d e2 20 a7 0d 87 15 a5 0f c5 13 d0 0b
>3a5098	c2 20 a5 0d c5 11 d0 03 4c 27 51 c2 20 18 a5 0d
>3a50a8	69 01 00 85 0d e2 20 a5 0e 69 00 85 0e c2 20 18
>3a50b8	a5 15 69 01 00 85 15 e2 20 a5 16 69 00 85 16 80
>3a50c8	c3 c2 20 38 a5 11 e5 0d 85 19 e2 20 a5 13 e5 0f
>3a50d8	85 1b c2 20 18 a5 19 65 15 85 15 e2 20 a5 1b 65
>3a50e8	17 85 17 e2 20 a7 11 87 15 a5 13 c5 0f d0 0a c2
>3a50f8	20 a5 11 c5 0d d0 02 80 26 c2 20 38 a5 11 e9 01
>3a5108	00 85 11 e2 20 a5 12 e9 00 85 12 c2 20 38 a5 15
>3a5118	e9 01 00 85 15 e2 20 a5 16 e9 00 85 16 80 c4 20
>3a5128	21 02 2b 28 6b 08 e2 20 c9 21 90 0b c9 7f 90 04
>3a5138	c9 a0 90 03 28 38 6b 28 18 6b 08 8b 0b 08 c2 20
>3a5148	48 a9 46 08 5b 68 28 e2 20 a9 00 8f b4 08 00 a5
>3a5158	31 c9 02 b0 16 c9 01 90 20 c2 20 18 a5 0d 69 00
>3a5168	01 85 11 e2 20 a5 0f 69 00 85 13 c2 20 a5 0d 85
>3a5178	32 e2 20 a5 0f 85 34 80 12 c2 20 18 a5 32 69 00
>3a5188	01 85 11 e2 20 a5 34 69 00 85 13 e2 20 a0 00 00
>3a5198	c2 20 a5 32 85 19 e2 20 a5 34 85 1b e2 20 a7 19
>3a51a8	22 2d 51 3a b0 02 a9 3f 99 7c 08 c2 20 18 a5 19
>3a51b8	69 01 00 85 19 e2 20 a5 1b 69 00 85 1b c8 c0 08
>3a51c8	00 90 db a9 00 99 7c 08 a9 3e 20 18 00 a9 20 20
>3a51d8	18 00 e2 20 a5 34 20 d8 02 a9 3a 20 18 00 c2 20
>3a51e8	a5 32 20 be 02 c2 20 a9 08 00 85 47 e2 20 a9 20
>3a51f8	20 18 00 a7 32 20 d8 02 22 6f 62 3a e2 20 c6 47
>3a5208	d0 ea a9 20 20 18 00 a9 20 20 18 00 08 e2 20 48
>3a5218	a9 00 48 ab 68 28 a2 7c 08 20 ae 02 20 21 02 20
>3a5228	38 02 a5 34 c5 13 90 0f c2 20 a5 32 c5 11 90 07
>3a5238	20 21 02 2b ab 28 6b 4c 93 51 08 8d 90 08 e2 20
>3a5248	bd 00 00 99 00 00 ad 90 08 f0 0a c8 e8 e8 e8 e8
>3a5258	ce 90 08 80 eb 28 6b 08 0b 8b 08 c2 20 48 a9 46
>3a5268	08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 30
>3a5278	a5 0d 85 32 a5 0f 85 34 e2 20 a5 31 3a 85 47 a2
>3a5288	57 08 a0 7c 08 22 42 52 3a a0 00 00 b9 7c 08 87
>3a5298	32 22 6f 62 3a c8 c4 47 d0 f2 ab 2b 28 6b 08 0b
>3a52a8	8b 08 c2 20 48 a9 46 08 5b 68 28 08 e2 20 48 a9
>3a52b8	00 48 ab 68 28 e2 20 c2 10 a5 31 3a 3a 85 47 a2
>3a52c8	5b 08 a0 7c 08 22 42 52 3a c2 20 a5 0d 85 32 a5
>3a52d8	0f 85 34 c2 20 a5 34 c5 13 d0 06 a5 32 c5 11 f0
>3a52e8	2c e2 20 a0 00 00 b7 32 d9 7c 08 d0 1a c8 c4 47
>3a52f8	d0 f4 c2 20 a5 32 85 4a a5 34 85 4c 22 19 5d 3a
>3a5308	e2 20 a9 20 20 18 00 22 6f 62 3a 80 c6 20 21 02
>3a5318	ab 2b 28 6b 08 c2 20 48 a9 46 08 5b 68 28 e2 20
>3a5328	a5 31 f0 0e c2 30 a5 0d 8f 40 02 00 a5 0f 8f 42
>3a5338	02 00 af 46 02 00 aa af 48 02 00 a8 af 4a 02 00
>3a5348	1b af 4c 02 00 5b e2 20 a9 3a 48 a9 53 48 a9 5c
>3a5358	48 4c 93 53 ea 5c 04 00 3a 08 c2 20 48 a9 46 08
>3a5368	5b 68 28 e2 20 a5 31 f0 c9 c2 30 a5 0d 8f 40 02
>3a5378	00 a5 0f 8f 42 02 00 af 46 02 00 aa af 48 02 00
>3a5388	a8 af 4a 02 00 1b af 4c 02 00 5b e2 20 af 4e 02
>3a5398	00 48 ab a9 5c 8f a0 08 00 af 42 02 00 8f a3 08
>3a53a8	00 af 41 02 00 8f a2 08 00 af 40 02 00 8f a1 08
>3a53b8	00 af 4f 02 00 48 c2 20 af 44 02 00 28 5c a0 08
>3a53c8	00 08 0b 8b 08 e2 20 48 a9 3a 48 ab 68 28 08 c2
>3a53d8	20 48 a9 46 08 5b 68 28 c2 10 e2 20 a5 31 c9 02
>3a53e8	f0 0c c9 03 d0 11 c2 20 a5 15 85 47 80 11 c2 20
>3a53f8	a9 01 00 85 47 80 08 a2 3b 65 20 ae 02 80 35 a5
>3a5408	0d 85 4a a5 0f 85 4c a0 00 00 e2 20 a7 4a d7 11
>3a5418	f0 09 22 19 5d 3a a9 20 20 18 00 c2 20 18 a5 4a
>3a5428	69 01 00 85 4a a5 4c 69 00 00 85 4c c8 c4 47 d0
>3a5438	d9 20 21 02 20 21 02 ab 2b 28 6b 08 0b 8b 08 e2
>3a5448	20 48 a9 00 48 ab 68 28 08 c2 20 48 a9 46 08 5b
>3a5458	68 28 e2 20 a5 31 f0 4f a6 0d 8e 40 02 a6 0f 8e
>3a5468	42 02 c9 01 f0 41 a6 11 8e 44 02 c9 02 f0 38 a6
>3a5478	15 8e 46 02 c9 03 f0 2f a6 19 8e 48 02 c9 04 f0
>3a5488	26 a6 1d 8e 4a 02 c9 05 f0 1d e2 10 a6 21 8e 4e
>3a5498	02 c9 06 f0 12 c2 10 a6 25 8e 4c 02 c9 07 f0 07
>3a54a8	e2 10 a6 29 8e 4f 02 ab 2b 28 6b 08 0b 8b 08 c2
>3a54b8	20 48 a9 46 08 5b 68 28 e2 20 c2 10 a2 00 00 bf
>3a54c8	a8 65 3a f0 18 c7 08 f0 03 e8 80 f3 c2 20 8a 0a
>3a54d8	aa bf e9 54 3a 8f 2d 08 00 22 0d 55 3a ab 2b 28
>3a54e8	6b 89 4b 91 4b 95 4b 99 4b 9d 4b a1 4b a5 4b a9
>3a54f8	4b ad 4b b1 4b 8d 4b b5 4b b9 4b bd 4b 85 4f c1
>3a5508	4b c5 4b fe 4b 6c 2d 08 08 8b 0b 08 c2 20 48 a9
>3a5518	46 08 5b 68 28 e2 20 a5 31 c9 02 b0 03 4c b6 56
>3a5528	c2 20 a5 0d 85 32 a5 0f 85 34 c2 20 22 b8 58 3a
>3a5538	c9 ff ff f0 10 85 54 e2 20 a5 31 c9 03 f0 36 a9
>3a5548	13 85 4f 80 4c 20 21 02 08 e2 20 48 a9 3a 48 ab
>3a5558	68 28 c2 10 a2 ed 56 20 ae 02 4c b6 56 20 21 02
>3a5568	08 e2 20 48 a9 3a 48 ab 68 28 c2 10 a2 fc 56 20
>3a5578	ae 02 4c b6 56 e2 20 22 ee 58 3a c9 ff f0 de 85
>3a5588	4f c9 03 f0 62 c9 0b f0 5e c9 13 f0 04 c9 08 f0
>3a5598	00 22 e6 57 3a b0 03 4c 7f 56 87 32 22 6f 62 3a
>3a55a8	08 e2 20 48 a9 00 48 ab 68 28 c2 20 a5 32 85 56
>3a55b8	a5 34 85 58 e2 20 a5 4f c9 12 f0 6c c9 16 f0 68
>3a55c8	c9 14 f0 7c 29 3f c9 02 d0 03 4c ad 56 c2 20 29
>3a55d8	ff 00 aa e2 20 bf b5 61 3a c9 03 f0 57 c9 02 f0
>3a55e8	5f c9 01 f0 67 80 71 c2 20 a5 54 c9 2d 5e f0 26
>3a55f8	c9 91 5e f0 2a c9 11 5e f0 1c c9 15 5e f0 17 c9
>3a5608	1d 5e f0 12 c9 05 5e f0 0d c9 19 5e f0 08 c9 01
>3a5618	5e f0 03 4c 99 55 e2 20 a9 12 85 4f 4c 99 55 e2
>3a5628	20 a9 16 85 4f 4c 99 55 22 29 57 3a 90 60 c9 02
>3a5638	f0 0e 80 18 a0 02 00 b9 96 08 97 56 22 6f 62 3a
>3a5648	a0 01 00 b9 96 08 97 56 22 6f 62 3a a0 00 00 b9
>3a5658	96 08 97 56 22 6f 62 3a e2 20 a9 41 20 18 00 a9
>3a5668	20 20 18 00 a6 32 86 4a a6 34 86 4c 22 19 5d 3a
>3a5678	a9 20 20 18 00 80 37 20 21 02 08 e2 20 48 a9 3a
>3a5688	48 ab 68 28 c2 10 a2 ba 56 20 ae 02 80 20 20 21
>3a5698	02 08 e2 20 48 a9 3a 48 ab 68 28 c2 10 a2 0a 57
>3a56a8	20 ae 02 80 09 a5 4f 29 c0 d0 95 4c 54 56 2b ab
>3a56b8	28 6b 41 64 64 72 65 73 73 69 6e 67 20 6d 6f 64
>3a56c8	65 20 6e 6f 74 20 64 65 66 69 6e 65 64 20 66 6f
>3a56d8	72 20 74 68 61 74 20 69 6e 73 74 72 75 63 74 69
>3a56e8	6f 6e 2e 0d 00 42 61 64 20 6d 6e 65 6d 6f 6e 69
>3a56f8	63 2e 0d 00 42 61 64 20 6f 70 65 72 61 6e 64 2e
>3a5708	0d 00 52 65 6c 61 74 69 76 65 20 6f 66 66 73 65
>3a5718	74 20 69 73 20 74 6f 6f 20 6c 61 72 67 65 2e 0d
>3a5728	00 08 0b 08 c2 20 48 a9 46 08 5b 68 28 e2 20 a5
>3a5738	4f c9 12 f0 0a c2 20 18 a5 32 69 02 00 80 08 c2
>3a5748	20 18 a5 32 69 01 00 85 4a a5 34 69 00 00 85 4c
>3a5758	38 a5 50 e5 4a 85 50 a5 52 e5 4c 85 52 e2 20 a5
>3a5768	4f c9 16 f0 1e a5 50 30 0c a5 51 d0 2a a5 52 d0
>3a5778	26 a9 01 80 26 a5 51 c9 ff d0 1c a5 52 c9 ff d0
>3a5788	16 80 18 a5 51 30 06 a5 52 d0 0c 80 0e a5 52 c9
>3a5798	ff d0 04 a9 02 80 04 2b 28 18 6b 2b 28 38 6b 08
>3a57a8	0b c2 10 da 08 c2 20 48 a9 46 08 5b 68 28 e2 20
>3a57b8	a2 00 00 df 00 d0 3a f0 08 e8 e0 10 00 f0 1b 80
>3a57c8	f2 c2 20 06 50 26 52 06 50 26 52 06 50 26 52 06
>3a57d8	50 26 52 e2 20 8a 05 50 85 50 fa 2b 28 6b 0b 8b
>3a57e8	08 c2 20 48 a9 46 08 5b 68 28 08 e2 20 48 a9 3a
>3a57f8	48 ab 68 28 e2 20 a5 4f 29 3f 85 4a c2 30 a2 00
>3a5808	00 a0 00 00 bd b3 5e f0 1b c5 54 d0 0d e2 20 b9
>3a5818	b5 60 29 3f c5 4a f0 07 c2 20 e8 e8 c8 80 e5 98
>3a5828	38 ab 2b 6b 18 ab 2b 6b 08 0b 08 c2 20 48 a9 46
>3a5838	08 5b 68 28 e2 20 c2 10 a0 00 00 64 50 64 52 b7
>3a5848	03 f0 11 c9 64 f0 19 48 b7 36 85 4a 68 c5 4a d0
>3a5858	0b c8 80 eb b7 36 d0 04 2b 28 38 6b 2b 28 18 6b
>3a5868	e2 20 b7 36 c9 3a b0 04 c9 30 b0 14 c9 47 b0 04
>3a5878	c9 41 b0 0c c9 67 b0 e4 c9 61 b0 02 80 de 29 df
>3a5888	22 a7 57 3a 80 cb 0b 08 c2 20 48 a9 46 08 5b 68
>3a5898	28 a0 00 00 e2 20 b7 03 f0 03 c8 80 f9 c2 20 c8
>3a58a8	5a 68 18 65 03 85 03 a5 05 69 00 00 85 05 2b 6b
>3a58b8	0b 08 c2 20 48 a9 46 08 5b 68 28 c2 20 a5 11 85
>3a58c8	36 a5 13 85 38 a9 41 5d 85 03 a9 3a 00 85 05 22
>3a58d8	30 58 3a b0 0d 22 8e 58 3a a7 03 d0 f2 a9 ff ff
>3a58e8	80 02 a5 03 2b 6b 08 0b 08 c2 20 48 a9 46 08 5b
>3a58f8	68 28 c2 30 a5 15 85 36 a5 17 85 38 a9 cd 61 85
>3a5908	03 a9 3a 00 85 05 22 30 58 3a b0 22 22 8e 58 3a
>3a5918	c2 20 18 a5 03 69 01 00 85 03 a5 05 69 00 00 85
>3a5928	05 e2 20 a7 03 d0 df c2 20 a9 ff ff 80 0d 22 8e
>3a5938	58 3a e2 20 a7 03 c2 20 29 ff 00 2b 28 6b 08 8b
>3a5948	0b 08 c2 20 48 a9 46 08 5b 68 28 e2 20 a9 00 8f
>3a5958	b4 08 00 a5 31 c9 02 b0 16 c9 01 90 20 c2 20 18
>3a5968	a5 0d 69 00 01 85 11 e2 20 a5 0f 69 00 85 13 c2
>3a5978	20 a5 0d 85 32 e2 20 a5 0f 85 34 80 12 c2 20 18
>3a5988	a5 32 69 00 01 85 11 e2 20 a5 34 69 00 85 13 22
>3a5998	b2 59 3a e2 20 a5 34 c5 13 90 f4 c2 20 a5 32 c5
>3a59a8	11 90 ec 20 21 02 2b ab 28 6b 08 0b e2 20 a9 41
>3a59b8	20 18 00 a9 20 20 18 00 08 c2 20 48 a9 78 08 5b
>3a59c8	68 28 c2 20 a5 00 85 18 e2 20 a5 02 85 1a 22 19
>3a59d8	5d 3a a9 20 20 18 00 c2 20 18 a5 00 69 01 00 85
>3a59e8	18 e2 20 a5 02 69 00 85 1a e2 20 c2 10 a7 00 c9
>3a59f8	c2 d0 0b 48 a7 18 49 ff 2f 94 08 00 80 0b c9 e2
>3a5a08	d0 0c 48 a7 18 0f 94 08 00 8f 94 08 00 68 c2 20
>3a5a18	29 ff 00 0a aa bf b3 5e 3a aa 22 93 5c 3a e2 20
>3a5a28	a7 00 aa bf b5 60 3a 22 6f 62 3a 22 40 5a 3a 20
>3a5a38	21 02 20 38 02 2b 28 6b 08 e2 20 48 29 3f 0a c2
>3a5a48	10 aa 68 7c 4e 5a 7e 5a 99 5a a0 5a c5 5a cc 5a
>3a5a58	e7 5a 09 5b 1a 5b 57 5b 5f 5b 70 5b 81 5b 88 5b
>3a5a68	ad 5b da 5b 46 5b 2b 5b f8 5a cd 5b d7 5b eb 5b
>3a5a78	1a 5c c8 5b 2b 5c a9 28 20 18 00 22 42 5c 3a a9
>3a5a88	2c 20 18 00 a9 58 20 18 00 a9 29 20 18 00 4c 3c
>3a5a98	5c 22 42 5c 3a 4c 3c 5c e2 20 48 a9 23 20 18 00
>3a5aa8	68 29 c0 c9 00 f0 0f 4a 4a 2f 94 08 00 d0 07 22
>3a5ab8	4c 5c 3a 4c 3c 5c 22 42 5c 3a 4c 3c 5c 22 4c 5c
>3a5ac8	3a 4c 3c 5c a9 28 20 18 00 22 42 5c 3a a9 29 20
>3a5ad8	18 00 a9 2c 20 18 00 a9 59 20 18 00 4c 3c 5c 22
>3a5ae8	42 5c 3a a9 2c 20 18 00 a9 58 20 18 00 4c 3c 5c
>3a5af8	22 42 5c 3a a9 2c 20 18 00 a9 59 20 18 00 4c 3c
>3a5b08	5c 22 4c 5c 3a a9 2c 20 18 00 a9 59 20 18 00 4c
>3a5b18	3c 5c 22 4c 5c 3a a9 2c 20 18 00 a9 58 20 18 00
>3a5b28	4c 3c 5c a9 28 20 18 00 22 4c 5c 3a a9 2c 20 18
>3a5b38	00 a9 58 20 18 00 a9 29 20 18 00 4c 3c 5c a9 28
>3a5b48	20 18 00 22 42 5c 3a a9 29 20 18 00 4c 3c 5c a9
>3a5b58	41 20 18 00 4c 40 5c 22 42 5c 3a a9 2c 20 18 00
>3a5b68	a9 53 20 18 00 4c 3c 5c a9 5b 20 18 00 22 42 5c
>3a5b78	3a a9 5d 20 18 00 4c 3c 5c 22 5a 5c 3a 4c 40 5c
>3a5b88	a9 28 20 18 00 22 42 5c 3a a9 2c 20 18 00 a9 53
>3a5b98	20 18 00 a9 29 20 18 00 a9 2c 20 18 00 a9 59 20
>3a5ba8	18 00 4c 3c 5c a9 5b 20 18 00 22 42 5c 3a a9 5d
>3a5bb8	20 18 00 a9 2c 20 18 00 a9 59 20 18 00 4c 3c 5c
>3a5bc8	a0 02 00 80 03 a0 01 00 22 c0 5c 3a 4c 40 5c 4c
>3a5bd8	40 5c 22 5a 5c 3a a9 2c 20 18 00 a9 58 20 18 00
>3a5be8	4c 40 5c a9 23 20 18 00 8b a5 02 48 ab a6 00 e8
>3a5bf8	a0 01 00 22 31 02 3a a9 2c 20 18 00 a9 23 20 18
>3a5c08	00 a6 00 a0 01 00 22 31 02 3a ab 22 6f 62 3a 4c
>3a5c18	3c 5c a9 28 20 18 00 22 4c 5c 3a a9 29 20 18 00
>3a5c28	4c 3c 5c a9 5b 20 18 00 22 4c 5c 3a a9 5d 20 18
>3a5c38	00 4c 3c 5c 22 6f 62 3a 28 6b 08 e2 20 a7 00 20
>3a5c48	d8 02 28 6b 08 c2 30 a7 00 20 be 02 22 6f 62 3a
>3a5c58	28 6b 08 8b 0b c2 30 5a 08 c2 20 48 a9 78 08 5b
>3a5c68	68 28 08 e2 20 48 a9 00 48 ab 68 28 e2 20 a0 00
>3a5c78	00 a7 00 99 90 08 22 6f 62 3a c8 c0 03 00 d0 f1
>3a5c88	22 19 5d 3a c2 30 7a 2b ab 28 6b 08 8b e2 20 c2
>3a5c98	10 08 e2 20 48 a9 3a 48 ab 68 28 bd 00 00 20 18
>3a5ca8	00 e8 bd 00 00 20 18 00 e8 bd 00 00 20 18 00 e8
>3a5cb8	a9 20 20 18 00 ab 28 6b 08 0b 08 c2 20 48 a9 78
>3a5cc8	08 5b 68 28 e2 20 c0 02 00 f0 14 a7 00 85 18 30
>3a5cd8	06 64 19 64 1a 80 1e a9 ff 85 19 85 1a 80 16 a7
>3a5ce8	00 85 18 22 6f 62 3a a7 00 85 19 30 04 64 1a 80
>3a5cf8	04 a9 ff 85 1a c2 20 38 a5 00 65 18 85 18 e2 20
>3a5d08	a5 02 65 1a 85 1a 22 19 5d 3a 22 6f 62 3a 2b 28
>3a5d18	6b 08 0b c2 20 48 08 c2 20 48 a9 46 08 5b 68 28
>3a5d28	e2 20 a5 4c 20 d8 02 e2 20 a9 3a 20 18 00 c2 20
>3a5d38	a5 4a 20 be 02 68 2b 28 6b 4f 52 41 00 41 4e 44
>3a5d48	00 45 4f 52 00 41 44 43 00 53 54 41 00 4c 44 41
>3a5d58	00 43 4d 50 00 53 42 43 00 41 53 4c 00 52 4f 4c
>3a5d68	00 4c 53 52 00 52 4f 52 00 53 54 58 00 4c 44 58
>3a5d78	00 44 45 43 00 49 4e 43 00 42 49 54 00 4a 4d 50
>3a5d88	00 53 54 59 00 4c 44 59 00 43 50 59 00 43 50 58
>3a5d98	00 42 52 4b 00 4a 53 52 00 52 54 49 00 52 54 53
>3a5da8	00 50 48 50 00 50 4c 50 00 50 48 41 00 50 4c 41
>3a5db8	00 44 45 59 00 54 41 59 00 49 4e 59 00 49 4e 58
>3a5dc8	00 43 4c 43 00 53 45 43 00 43 4c 49 00 53 45 49
>3a5dd8	00 54 59 41 00 43 4c 56 00 43 4c 44 00 53 45 44
>3a5de8	00 54 58 41 00 54 58 53 00 54 41 58 00 54 53 58
>3a5df8	00 44 45 58 00 4e 4f 50 00 42 50 4c 00 42 4d 49
>3a5e08	00 42 56 43 00 42 56 53 00 42 43 43 00 42 43 53
>3a5e18	00 42 4e 45 00 42 45 51 00 54 53 42 00 54 52 42
>3a5e28	00 53 54 5a 00 42 52 41 00 50 48 59 00 50 4c 59
>3a5e38	00 50 48 58 00 50 4c 58 00 50 48 44 00 50 4c 44
>3a5e48	00 50 48 4b 00 52 54 4c 00 50 48 42 00 50 4c 42
>3a5e58	00 57 41 49 00 58 42 41 00 54 43 53 00 54 53 43
>3a5e68	00 54 43 44 00 54 44 43 00 54 58 59 00 54 59 58
>3a5e78	00 53 54 50 00 58 43 45 00 43 4f 50 00 4a 53 4c
>3a5e88	00 57 44 4d 00 50 45 52 00 42 52 4c 00 52 45 50
>3a5e98	00 53 45 50 00 4d 56 50 00 4d 56 4e 00 50 45 49
>3a5ea8	00 50 45 41 00 4a 4d 4c 00 00 00 99 5d 41 5d 81
>3a5eb8	5e 41 5d 21 5e 41 5d 61 5d 41 5d a9 5d 41 5d 61
>3a5ec8	5d 41 5e 21 5e 41 5d 61 5d 41 5d 01 5e 41 5d 41
>3a5ed8	5d 41 5d 25 5e 41 5d 61 5d 41 5d c9 5d 41 5d 7d
>3a5ee8	5d 61 5e 25 5e 41 5d 61 5d 41 5d 9d 5d 45 5d 85
>3a5ef8	5e 45 5d 81 5d 45 5d 65 5d 45 5d ad 5d 45 5d 65
>3a5f08	5d 45 5e 81 5d 45 5d 65 5d 45 5d 05 5e 45 5d 45
>3a5f18	5d 45 5d 81 5d 45 5d 65 5d 45 5d cd 5d 45 5d 79
>3a5f28	5d 65 5e 81 5d 45 5d 65 5d 45 5d a1 5d 49 5d 89
>3a5f38	5e 49 5d 9d 5e 49 5d 69 5d 49 5d b1 5d 49 5d 69
>3a5f48	5d 49 5e 85 5d 49 5d 69 5d 49 5d 09 5e 49 5d 49
>3a5f58	5d 49 5d a1 5e 49 5d 69 5d 49 5d d1 5d 49 5d 31
>3a5f68	5e 69 5e ad 5e 49 5d 69 5d 49 5d a5 5d 4d 5d 8d
>3a5f78	5e 4d 5d 29 5e 4d 5d 6d 5d 4d 5d b5 5d 4d 5d 6d
>3a5f88	5d 4d 5e 85 5d 4d 5d 6d 5d 4d 5d 0d 5e 4d 5d 4d
>3a5f98	5d 4d 5d 29 5e 4d 5d 6d 5d 4d 5d d5 5d 4d 5d 35
>3a5fa8	5e 6d 5e 85 5d 4d 5d 6d 5d 4d 5d 2d 5e 51 5d 91
>3a5fb8	5e 51 5d 89 5d 51 5d 71 5d 51 5d b9 5d 81 5d e9
>3a5fc8	5d 51 5e 89 5d 51 5d 71 5d 51 5d 11 5e 51 5d 51
>3a5fd8	5d 51 5d 89 5d 51 5d 71 5d 51 5d d9 5d 51 5d ed
>3a5fe8	5d 71 5e 29 5e 51 5d 29 5e 51 5d 8d 5d 55 5d 75
>3a5ff8	5d 55 5d 8d 5d 55 5d 75 5d 55 5d bd 5d 55 5d f1
>3a6008	5d 55 5e 8d 5d 55 5d 75 5d 55 5d 15 5e 55 5d 55
>3a6018	5d 55 5d 8d 5d 55 5d 75 5d 55 5d dd 5d 55 5d f5
>3a6028	5d 75 5e 8d 5d 55 5d 75 5d 55 5d 91 5d 59 5d 95
>3a6038	5e 59 5d 91 5d 59 5d 79 5d 59 5d c1 5d 59 5d f9
>3a6048	5d 59 5e 91 5d 59 5d 79 5d 59 5d 19 5e 59 5d 59
>3a6058	5d 59 5d a5 5e 59 5d 79 5d 59 5d e1 5d 59 5d 39
>3a6068	5e 79 5e ad 5e 59 5d 79 5d 59 5d 95 5d 5d 5d 99
>3a6078	5e 5d 5d 95 5d 5d 5d 7d 5d 5d 5d c5 5d 5d 5d fd
>3a6088	5d 5d 5e 95 5d 5d 5d 7d 5d 5d 5d 1d 5e 5d 5d 5d
>3a6098	5d 5d 5d a9 5e 5d 5d 7d 5d 5d 5d e5 5d 5d 5d 3d
>3a60a8	5e 7d 5e 9d 5d 5d 5d 7d 5d 5d 5d 00 00 13 00 02
>3a60b8	09 01 01 01 0a 13 82 08 13 03 03 03 0b 12 04 0f
>3a60c8	0c 01 05 05 0d 13 06 08 13 03 07 07 0e 03 00 0b
>3a60d8	09 01 01 01 0a 13 82 08 13 03 03 03 0b 12 04 0f
>3a60e8	0c 05 05 05 0d 13 06 08 13 07 07 07 0e 13 00 13
>3a60f8	09 14 01 01 0a 13 82 08 13 03 03 03 0b 12 04 0f
>3a6108	0c 14 05 05 0d 13 06 13 13 0b 07 07 0b 13 00 16
>3a6118	09 01 01 01 0a 13 82 08 13 15 03 03 0b 12 04 0f
>3a6128	0c 05 05 05 0d 13 06 13 13 10 07 07 0e 12 00 16
>3a6138	09 01 01 01 0a 13 82 13 13 03 03 03 0b 12 04 0f
>3a6148	0c 05 05 11 0d 13 06 13 13 03 07 07 0e 82 00 42
>3a6158	09 01 01 01 0a 13 82 13 13 03 03 03 0b 12 04 0f
>3a6168	0c 05 05 11 0d 13 06 13 13 07 07 06 0e 42 00 02
>3a6178	09 01 01 01 0a 13 82 13 13 03 03 03 0b 12 04 0f
>3a6188	0c 01 05 05 0d 13 06 13 13 17 07 07 0e 42 00 02
>3a6198	09 01 01 01 0f 13 82 13 13 03 03 03 0b 12 04 0f
>3a61a8	0c 03 05 05 0d 13 06 13 13 10 07 07 0e 01 01 01
>3a61b8	02 01 01 02 02 00 01 01 03 01 01 03 01 02 01 01
>3a61c8	00 02 02 02 02 41 00 08 64 64 3a 64 64 64 64 2c
>3a61d8	58 00 0e 64 64 3a 64 64 64 64 00 0b 64 64 64 64
>3a61e8	2c 58 00 07 64 64 64 64 2c 59 00 06 64 64 64 64
>3a61f8	00 03 64 64 2c 58 00 05 64 64 2c 59 00 11 64 64
>3a6208	2c 53 00 09 64 64 00 01 23 64 64 64 64 00 c2 23
>3a6218	64 64 2c 23 64 64 00 14 23 64 64 00 02 28 64 64
>3a6228	2c 53 29 2c 59 00 0c 28 64 64 64 64 2c 58 29 00
>3a6238	10 28 64 64 64 64 29 00 10 28 64 64 2c 58 29 00
>3a6248	00 28 64 64 29 2c 59 00 04 28 64 64 29 00 0f 5b
>3a6258	64 64 64 64 5d 00 17 5b 64 64 5d 2c 59 00 0d 5b
>3a6268	64 64 5d 00 0a 00 00 08 c2 20 48 18 af 78 08 00
>3a6278	69 01 00 8f 78 08 00 e2 20 af 7a 08 00 69 00 8f
>3a6288	7a 08 00 c2 20 68 28 6b 08 c2 10 e2 20 da a2 08
>3a6298	00 0a b0 08 48 a9 30 20 18 00 80 06 48 a9 31 20
>3a62a8	18 00 68 ca d0 eb fa 28 6b 08 c2 20 48 a9 46 08
>3a62b8	5b 68 28 e2 20 a7 32 f0 0a c9 20 d0 06 22 6f 62
>3a62c8	3a 80 f2 6b 08 08 c2 20 48 a9 46 08 5b 68 28 22
>3a62d8	6f 62 3a 22 b1 62 3a c2 30 a5 31 c2 20 29 ff 00
>3a62e8	0a 0a aa a5 32 95 0d a5 34 95 0f e2 20 a7 32 f0
>3a62f8	14 c9 22 f0 06 22 6f 62 3a 80 f2 a9 00 87 32 22
>3a6308	6f 62 3a e6 31 28 6b 08 c2 20 48 a9 46 08 5b 68
>3a6318	28 e2 20 64 4a c2 20 64 50 64 52 e2 20 a7 32 c9
>3a6328	3a f0 0d 20 2b 03 90 0e 22 a7 57 3a a9 01 85 4a
>3a6338	22 6f 62 3a 80 e5 a5 4a f0 16 a5 31 c2 20 29 ff
>3a6348	00 0a 0a aa a5 50 95 0d a5 52 95 0f e2 20 e6 31
>3a6358	6b e2 20 64 31 22 b1 62 3a a7 32 f0 21 c9 22 d0
>3a6368	06 22 cc 62 3a 80 0a 22 0f 63 3a a5 31 c9 09 b0
>3a6378	0d a7 32 f0 09 c9 20 f0 dc 20 2b 03 b0 d7 6b 08
>3a6388	0b 08 c2 20 48 a9 46 08 5b 68 28 c2 10 e2 20 a2
>3a6398	31 00 74 00 ca d0 fb a9 00 85 02 85 34 c2 20 a9
>3a63a8	00 4f 85 00 85 32 e2 20 22 b1 62 3a c9 00 f0 38
>3a63b8	c2 20 a5 32 85 08 e2 20 a5 34 85 0a a2 01 00 22
>3a63c8	6f 62 3a a7 32 d0 06 86 0b 64 31 80 1b c9 20 f0
>3a63d8	03 e8 80 eb 86 0b a9 00 87 32 22 6f 62 3a a7 08
>3a63e8	c9 41 f0 07 22 59 63 3a 2b 28 6b 22 b1 62 3a a7
>3a63f8	32 f0 f5 22 0f 63 3a 22 b1 62 3a a7 32 f0 e9 c2
>3a6408	20 a5 32 85 11 e2 20 a5 34 85 13 22 6f 62 3a a7
>3a6418	32 f0 26 c9 20 d0 f4 a9 00 87 32 e6 31 22 6f 62
>3a6428	3a 22 b1 62 3a a7 32 f0 bf c2 20 a5 32 85 15 e2
>3a6438	20 a5 34 85 17 e6 31 80 af e6 31 80 ab 08 c2 10
>3a6448	e2 20 a5 31 d0 0f a2 3b 65 a9 3a 48 ab 20 ae 02
>3a6458	20 21 02 80 61 c2 20 a5 0d 8f 21 08 00 a5 0f 8f
>3a6468	23 08 00 20 39 46 e2 20 a5 31 c9 01 d0 0f c2 20
>3a6478	a9 ff ff 8f 54 03 00 8f 56 03 00 80 0e c2 20 a5
>3a6488	11 8f 54 03 00 a5 13 8f 56 03 00 22 18 11 00 b0
>3a6498	25 e2 20 a2 61 65 a9 3a 48 ab 20 ae 02 af 2e 03
>3a64a8	00 20 d8 02 a9 20 20 18 00 af 20 03 00 20 d8 02
>3a64b8	20 21 02 20 21 02 28 6b 8b 08 c2 10 e2 20 a5 31
>3a64c8	c9 03 f0 0f a2 3b 65 a9 3a 48 ab 20 ae 02 20 21
>3a64d8	02 80 54 c2 20 a5 0d 8f 21 08 00 a5 0f 8f 23 08
>3a64e8	00 20 39 46 a5 11 8f 50 03 00 a5 13 8f 52 03 00
>3a64f8	a5 15 8f 58 03 00 a5 17 8f 5a 03 00 22 1c 11 00
>3a6508	b0 25 e2 20 a2 4b 65 a9 3a 48 ab 20 ae 02 af 2e
>3a6518	03 00 20 d8 02 a9 20 20 18 00 af 20 03 00 20 d8
>3a6528	02 20 21 02 20 21 02 28 ab 6b 5c e3 20 3a 6b 00
>3a6538	00 00 00 42 61 64 20 61 72 67 75 6d 65 6e 74 73
>3a6548	0d 0d 00 55 6e 61 62 6c 65 20 74 6f 20 73 61 76
>3a6558	65 20 66 69 6c 65 3a 20 00 55 6e 61 62 6c 65 20
>3a6568	74 6f 20 6c 6f 61 64 20 66 69 6c 65 3a 20 00 0d
>3a6578	20 20 50 43 20 20 20 20 20 41 20 20 20 20 58 20
>3a6588	20 20 20 59 20 20 20 20 53 50 20 20 20 44 42 52
>3a6598	20 44 50 20 20 20 4e 56 4d 58 44 49 5a 43 0d 00
>3a65a8	41 43 44 46 47 4a 48 4c 4d 52 3b 53 54 56 57 58
>3a65b8	3e 3f 00 18 fb 08 c2 20 48 a9 00 08 5b 68 28 08
>3a65c8	e2 20 48 a9 00 48 ab 68 28 c2 30 20 fa 65 a9 ff
>3a65d8	fe 1b 08 e2 20 48 a9 3a 48 ab 68 28 a2 08 d2 20
>3a65e8	ae 02 08 e2 20 48 a9 00 48 ab 68 28 4c e3 20 4c
>3a65f8	f7 65 08 20 b5 01 20 90 3c 28 60 00 00 00 00 00
>3a6608	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 1694 times (27104 bytes)...
>3acff8	00 00 00 00 00 00 00 00 30 31 32 33 34 35 36 37
>3ad008	38 39 41 42 43 44 45 46 2b 00 2d 00 2a 00 2f 00
>3ad018	4d 4f 44 00 5e 00 3c 00 3d 00 3e 00 4e 4f 54 00
>3ad028	41 4e 44 00 4f 52 00 28 00 29 00 52 45 4d 00 50
>3ad038	52 49 4e 54 00 4c 45 54 00 47 4f 54 4f 00 45 4e
>3ad048	44 00 49 46 00 54 48 45 4e 00 45 4c 53 45 00 47
>3ad058	4f 53 55 42 00 52 45 54 55 52 4e 00 46 4f 52 00
>3ad068	54 4f 00 53 54 45 50 00 4e 45 58 54 00 44 4f 00
>3ad078	4c 4f 4f 50 00 57 48 49 4c 45 00 55 4e 54 49 4c
>3ad088	00 45 58 49 54 00 43 4c 52 00 53 54 4f 50 00 50
>3ad098	4f 4b 45 00 50 4f 4b 45 57 00 50 4f 4b 45 4c 00
>3ad0a8	43 4c 53 00 52 45 41 44 00 44 41 54 41 00 52 45
>3ad0b8	53 54 4f 52 45 00 44 49 4d 00 43 41 4c 4c 00 3c
>3ad0c8	3d 00 3e 3d 00 3c 3e 00 2d 00 4c 45 4e 00 50 45
>3ad0d8	45 4b 00 50 45 45 4b 57 00 50 45 45 4b 4c 00 43
>3ad0e8	48 52 24 00 41 53 43 00 53 50 43 00 54 41 42 00
>3ad0f8	41 42 53 00 53 47 4e 00 48 45 58 24 00 44 45 43
>3ad108	00 53 54 52 24 00 56 41 4c 00 4c 45 46 54 24 00
>3ad118	52 49 47 48 54 24 00 4d 49 44 24 00 52 55 4e 00
>3ad128	4e 45 57 00 4c 4f 41 44 00 4c 49 53 54 00 44 49
>3ad138	52 00 42 4c 4f 41 44 00 42 52 55 4e 00 42 53 41
>3ad148	56 45 00 44 45 4c 00 53 41 56 45 00 52 45 4e 41
>3ad158	4d 45 00 43 4f 50 59 00 4d 4f 4e 49 54 4f 52 00
>3ad168	47 45 54 00 49 4e 50 55 54 00 53 45 54 42 4f 52
>3ad178	44 45 52 00 54 45 58 54 43 4f 4c 4f 52 00 53 45
>3ad188	54 42 47 43 4f 4c 4f 52 00 53 45 54 44 41 54 45
>3ad198	00 47 45 54 44 41 54 45 24 00 53 45 54 54 49 4d
>3ad1a8	45 00 47 45 54 54 49 4d 45 24 00 47 52 41 50 48
>3ad1b8	49 43 53 00 53 45 54 43 4f 4c 4f 52 00 50 49 58
>3ad1c8	4d 41 50 00 43 4c 52 50 49 58 4d 41 50 00 50 4c
>3ad1d8	4f 54 00 4c 49 4e 45 00 46 49 4c 4c 00 53 50 52
>3ad1e8	49 54 45 00 53 50 52 49 54 45 41 54 00 53 50 52
>3ad1f8	49 54 45 53 48 4f 57 00 0d 52 45 41 44 59 0d 00
>3ad208	43 32 35 36 20 46 6f 65 6e 69 78 20 42 41 53 49
>3ad218	43 38 31 36 20 76 30 2e 31 2e 30 2d 61 6c 70 68
>3ad228	61 2b 33 33 0d 00
>3b0000					.align 256
.3b0000					CREDITS_TEXT
>3b0000	54 68 69 73 20 69 73 20		                .text "This is the credits screen!"
>3b0008	74 68 65 20 63 72 65 64 69 74 73 20 73 63 72 65
>3b0018	65 6e 21
>3b001b	20 20 20 20 20 20 20 20		                .fill 128 - len("This is the credits screen!"), $20
>3b0023	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 4 times (64 bytes)...
>3b0073	20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0080	49 20 77 6f 75 6c 64 20		                .text "I would like to thank the academy."
>3b0088	6c 69 6b 65 20 74 6f 20 74 68 61 6e 6b 20 74 68
>3b0098	65 20 61 63 61 64 65 6d 79 2e
>3b00a2	20 20 20 20 20 20 20 20		                .fill 128 - len("I would like to thank the academy."), $20
>3b00aa	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 4 times (64 bytes)...
>3b00fa	20 20 20 20 20 20
>3b0100					                .text ""
>3b0100	20 20 20 20 20 20 20 20		                .fill 128 - len(""), $20
>3b0108	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 6 times (96 bytes)...
>3b0178	20 20 20 20 20 20 20 20
>3b0180	50 72 65 73 73 20 61 6e		                .text "Press any key to go back..."
>3b0188	79 20 6b 65 79 20 74 6f 20 67 6f 20 62 61 63 6b
>3b0198	2e 2e 2e
>3b019b	20 20 20 20 20 20 20 20		                .fill 128 - len("Press any key to go back..."), $20
>3b01a3	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 4 times (64 bytes)...
>3b01f3	20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0200	20 20 20 20 20 20 20 20		                .fill 128 * 60,$20
>3b0208	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 478 times (7648 bytes)...
>3b1ff8	20 20 20 20 20 20 20 20
>3b2000					.align 256
>3b2000	f3 f3 f3 f3 f3 f3 f3 f3		CREDITS_COLOR   .fill 128 * 64, $F3
>3b2008	f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3
;	...repeated 510 times (8160 bytes)...
>3b3ff8	f3 f3 f3 f3 f3 f3 f3 f3

;******  End of listing
