
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -D TARGET=2 --long-address --flat --intel-hex -o kernel.hex --list kernel_hex.lst --labels=kernel_hex.lbl src\kernel.asm
; Sun Dec 29 19:05:43 2019

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=2					TARGET=2

;******  Processing input file: src\kernel.asm

=1					TARGET_FLASH = 1              ; The code is being assembled for Flash
=2					TARGET_RAM = 2                ; The code is being assembled for RAM

;******  Processing file: src\macros_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\characters.asm

=$03					CHAR_CTRL_C = $03   ; CTRL-C
=$08					CHAR_BS = $08       ; Backspace (delete character to the left of the cursor)
=$09					CHAR_TAB = $09      ; TAB (moves cursor to next tabulated column)
=$0a					CHAR_LF = $0A       ; Line feed
=$0d					CHAR_CR = $0D       ; Carriage return
=$0f					CHAR_INS = $0F      ; Insert a space at the cursor
=$11					CHAR_UP = $11       ; Up arrow
=$1d					CHAR_RIGHT = $1D    ; Right arrow
=$20					CHAR_SP = $20       ; Space
=$91					CHAR_DOWN = $91     ; Down arrow
=$9d					CHAR_LEFT = $9D     ; Left arrow
=$7f					CHAR_DEL = $7F      ; Delete key (delete the character at the cursor)

;******  Return to file: src\kernel.asm


;******  Processing file: src\simulator_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_inc.asm

=$000000				BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000				unused_0000      = $000000 ;12 Bytes unused
=$000008				OPL2_ADDY_PTR_LO = $000008  ; THis Points towards the Instruments Database
=$000009				OPL2_ADDY_PTR_MD = $000009
=$00000a				OPL2_ADDY_PTR_HI = $00000A
=$00000c				SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f				COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011				COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013				LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=25
=$000015				LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017				CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a				CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c				CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e				CURCOLOR         = $00001E ;2 Bytes Color of next character to be printed to the screen.
=$000020				CURATTR          = $000020 ;2 Bytes Attribute of next character to be printed to the screen.
=$000022				STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024				STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$000026				OPL2_OPERATOR    = $000026 ;
=$000027				OPL2_CHANNEL     = $000027 ;
=$000028				OPL2_REG_REGION  = $000028 ; Offset to the Group of Registers
=$00002a				OPL2_REG_OFFSET  = $00002A ; 2 Bytes (16Bits)
=$00002c				OPL2_IND_ADDY_LL = $00002C ; 2 Bytes Reserved (Only need 3)
=$00002e				OPL2_IND_ADDY_HL = $00002E ; 2 Bytes Reserved (Only need 3)
=$000030				OPL2_NOTE        = $000030 ; 1 Byte
=$000031				OPL2_OCTAVE      = $000031 ; 1 Byte
=$000032				OPL2_PARAMETER0  = $000032 ; 1 Byte - Key On/Feedback
=$000033				OPL2_PARAMETER1  = $000033 ; 1 Byte
=$000034				OPL2_PARAMETER2  = $000034 ; 1 Byte
=$000035				OPL2_PARAMETER3  = $000035 ; 1 Byte
=$000036				OPL2_LOOP        = $000036 ;
=$000036				OPL2_BLOCK       = $000036
=$000038				SDCARD_FILE_PTR  = $000038 ; 3 Bytes Pointer to Filename to open
=$00003c				SDCARD_BYTE_NUM  = $00003C ; 2Bytes
=$00003f				SDCARD_PRSNT_MNT = $00003F ; 1 Byte, Indicate that the SDCard is Present and that it is Mounted
=$000040				BM_CLEAR_SCRN_X  = $000040
=$000042				BM_CLEAR_SCRN_Y  = $000042
=$000040				RAD_STARTLINE    = $000040 ; 1 Byte
=$000041				RAD_PATTERN_IDX  = $000041 ; 1 Byte
=$000042				RAD_LINE         = $000042 ; 1 Byte
=$000043				RAD_LINENUMBER   = $000043 ; 1 Byte
=$000044				RAD_CHANNEL_NUM  = $000044 ; 1 Byte
=$000045				RAD_ISLASTCHAN   = $000045 ; 1 Byte
=$000046				RAD_Y_POINTER    = $000046 ; 2 Bytes
=$000048				RAD_TICK         = $000048
=$00004a				RAD_CHANNEL_DATA = $00004A ; 2 Bytes
=$00004c				RAD_CHANNE_EFFCT = $00004C
=$00004d				RAD_TEMP         = $00004D
=$000040				BMP_X_SIZE       = $000040 ; 2 Bytes
=$000042				BMP_Y_SIZE       = $000042 ; 2 Bytes
=$000044				BMP_PRSE_SRC_PTR = $000044 ; 3 Bytes
=$000048				BMP_PRSE_DST_PTR = $000048 ; 3 Bytes
=$00004c				BMP_COLOR_PALET  = $00004C ; 2 Bytes
=$00004e				SCRN_X_STRIDE    = $00004E ; 2 Bytes, Basically How many Pixel Accross in Bitmap Mode
=$000050				BMP_FILE_SIZE    = $000050 ; 4 Bytes
=$000054				BMP_POSITION_X   = $000054 ; 2 Bytes Where, the BMP will be position on the X Axis
=$000056				BMP_POSITION_Y   = $000056 ; 2 Bytes Where, the BMP will be position on the Y Axis
=$000058				BMP_PALET_CHOICE = $000058 ;
=$0000e0				MOUSE_PTR        = $0000E0
=$0000e1				MOUSE_POS_X_LO   = $0000E1
=$0000e2				MOUSE_POS_X_HI   = $0000E2
=$0000e3				MOUSE_POS_Y_LO   = $0000E3
=$0000e4				MOUSE_POS_Y_HI   = $0000E4
=$0000f0				USER_TEMP        = $0000F0 ;32 Bytes Temp space for user programs
=$000100				GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000100				MULTIPLIER_0     = $000100 ;0 Byte  Unsigned multiplier
=$000100				M0_OPERAND_A     = $000100 ;2 Bytes Operand A (ie: A x B)
=$000102				M0_OPERAND_B     = $000102 ;2 Bytes Operand B (ie: A x B)
=$000104				M0_RESULT        = $000104 ;4 Bytes Result of A x B
=$000108				MULTIPLIER_1     = $000108 ;0 Byte  Signed Multiplier
=$000108				M1_OPERAND_A     = $000108 ;2 Bytes Operand A (ie: A x B)
=$00010a				M1_OPERAND_B     = $00010A ;2 Bytes Operand B (ie: A x B)
=$00010c				M1_RESULT        = $00010C ;4 Bytes Result of A x B
=$000108				DIVIDER_0        = $000108 ;0 Byte  Unsigned divider
=$000108				D0_OPERAND_A     = $000108 ;2 Bytes Divider 0 Dividend ex: A in  A/B
=$00010a				D0_OPERAND_B     = $00010A ;2 Bytes Divider 0 Divisor ex B in A/B
=$00010c				D0_RESULT        = $00010C ;2 Bytes Quotient result of A/B ex: 7/2 = 3 r 1
=$00010e				D0_REMAINDER     = $00010E ;2 Bytes Remainder of A/B ex: 1 in 7/2=3 r 1
=$000110				DIVIDER_1        = $000110 ;0 Byte  Signed divider
=$000110				D1_OPERAND_A     = $000110 ;2 Bytes Divider 1 Dividend ex: A in  A/B
=$000112				D1_OPERAND_B     = $000112 ;2 Bytes Divider 1 Divisor ex B in A/B
=$000114				D1_RESULT        = $000114 ;2 Bytes Signed quotient result of A/B ex: 7/2 = 3 r 1
=$000116				D1_REMAINDER     = $000116 ;2 Bytes Signed remainder of A/B ex: 1 in 7/2=3 r 1
=$000120				ADDER_SIGNED_32  = $000120 ; The 32 Bit Adders takes 12Byte that are NOT RAM Location
=$000140				INT_CONTROLLER   = $000140 ; $000140...$00015F Interrupt Controller
=$000160				TIMER_CONTROLLER = $000160 ; $000160...$00017F Timer0/Timer1/Timer2 Block
=$000160				TIMER_CTRL_REGLL = $000160 ;
=$000161				TIMER_CTRL_REGLH = $000161 ;
=$000162				TIMER_CTRL_REGHL = $000162 ;
=$000163				TIMER_CTRL_REGHH = $000163 ;
=$000240				CPU_REGISTERS    = $000240 ; Byte
=$000240				CPUPC            = $000240 ;2 Bytes Program Counter (PC)
=$000242				CPUPBR           = $000242 ;2 Bytes Program Bank Register (K)
=$000244				CPUA             = $000244 ;2 Bytes Accumulator (A)
=$000246				CPUX             = $000246 ;2 Bytes X Register (X)
=$000248				CPUY             = $000248 ;2 Bytes Y Register (Y)
=$00024a				CPUSTACK         = $00024A ;2 Bytes Stack Pointer (S)
=$00024c				CPUDP            = $00024C ;2 Bytes Direct Page Register (D)
=$00024e				CPUDBR           = $00024E ;1 Byte  Data Bank Register (B)
=$00024f				CPUFLAGS         = $00024F ;1 Byte  Flags (P)
=$000250				MONITOR_VARS     = $000250 ; Byte  MONITOR Variables. BASIC variables may overlap this space
=$000250				MCMDADDR         = $000250 ;3 Bytes Address of the current line of text being processed by the command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
=$000253				MCMP_TEXT        = $000253 ;3 Bytes Address of symbol being evaluated for COMPARE routine
=$000256				MCMP_LEN         = $000256 ;2 Bytes Length of symbol being evaluated for COMPARE routine
=$000258				MCMD             = $000258 ;3 Bytes Address of the current command/function string
=$00025b				MCMD_LEN         = $00025B ;2 Bytes Length of the current command/function string
=$00025d				MARG1            = $00025D ;4 Bytes First command argument. May be data or address, depending on command
=$000261				MARG2            = $000261 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000265				MARG3            = $000265 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000269				MARG4            = $000269 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$00026d				MARG5            = $00026D ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000271				MARG6            = $000271 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000275				MARG7            = $000275 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000279				MARG8            = $000279 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000300				LOADFILE_VARS    = $000300 ; Byte
=$000300				LOADFILE_NAME    = $000300 ;3 Bytes (addr) Name of file to load. Address in Data Page
=$000303				LOADFILE_LEN     = $000303 ;1 Byte  Length of filename. 0=Null Terminated
=$000304				LOADPBR          = $000304 ;1 Byte  First Program Bank of loaded file ($05 segment)
=$000305				LOADPC           = $000305 ;2 Bytes Start address of loaded file ($05 segment)
=$000307				LOADDBR          = $000307 ;1 Byte  First data bank of loaded file ($06 segment)
=$000308				LOADADDR         = $000308 ;2 Bytes FIrst data address of loaded file ($06 segment)
=$00030a				LOADFILE_TYPE    = $00030A ;3 Bytes (addr) File type string in loaded data file. Actual string data will be in Bank 1. Valid values are BIN, PRG, P16
=$00030d				BLOCK_LEN        = $00030D ;2 Bytes Length of block being loaded
=$00030f				BLOCK_ADDR       = $00030F ;2 Bytes (temp) Address of block being loaded
=$000311				BLOCK_BANK       = $000311 ;1 Byte  (temp) Bank of block being loaded
=$000312				BLOCK_COUNT      = $000312 ;2 Bytes (temp) Counter of bytes read as file is loaded
=$000320				SDOS_BLOCK_BEGIN = $000320 ;
=$000324				SDOS_LOAD_ADDY   = $000324 ; 4 Bytes (Uses 3 Only)
=$000328				SDOS_FILE_SIZE   = $000328 ;
=$00032c				SDOS_BYTE_NUMBER = $00032C ; Number of Byte to Read or Write before changing the Pointer
=$000330				SDOS_REG_WR32_AD = $000330 ; 4 Bytes (Used to read and Write Values in/from CH376S)
=$000334				SDOS_BYTE_PTR    = $000334
=$000380				SDOS_FILE_NAME   = $000380 ; // Max of 128 Chars
=$000400				SDOS_BLK_BEGIN   = $000400 ; 512 Bytes to Store SD Card Incoming or Outcoming Block
=$0006ff				SDOS_BLK_END     = $0006FF ;
=$000700				CURRUART         = $000700 ; 3-bytes: the base address of the current UART
=$000703				CHAN_OUT         = $000703 ; 1-byte: the number of the current output channel (for PUTC, etc.)
=$000704				CHAN_IN          = $000704 ; 1-byte: the number of the current input channel (for GETCH, etc.)
=$000f00				KEY_BUFFER       = $000F00 ;64 Bytes keyboard buffer
=$0080					KEY_BUFFER_SIZE  = $0080 ;128 Bytes (constant) keyboard buffer length
=$000f7f				KEY_BUFFER_END   = $000F7F ;1 Byte  Last byte of keyboard buffer
=$000f83				KEY_BUFFER_CMD   = $000F83 ;1 Byte  Indicates the Command Process Status
=$000f84				COMMAND_SIZE_STR = $000F84 ; 1 Byte
=$000f86				COMMAND_COMP_TMP = $000F86 ; 2 Bytes
=$000f87				KEYBOARD_SC_FLG  = $000F87 ;1 Bytes that indicate the Status of Left Shift, Left CTRL, Left ALT, Right Shift
=$000f88				KEYBOARD_SC_TMP  = $000F88 ;1 Byte, Interrupt Save Scan Code while Processing
=$000f89				KEYBOARD_LOCKS   = $000F89 ;1 Byte, the status of the various lock keys
=$000f8a				KEYFLAG          = $000F8A ;1 Byte, flag to indicate if CTRL-C has been pressed
=$000f8b				KEY_BUFFER_RPOS  = $000F8B ;2 Byte, position of the character to read from the KEY_BUFFER
=$000f8d				KEY_BUFFER_WPOS  = $000F8D ;2 Byte, position of the character to write to the KEY_BUFFER
=$001000				TEST_BEGIN       = $001000 ;28672 Bytes Test/diagnostic code for prototype.
=$007fff				TEST_END         = $007FFF ;0 Byte
=$008000				STACK_BEGIN      = $008000 ;32512 Bytes The default beginning of stack space
=$00feff				STACK_END        = $00FEFF ;0 Byte  End of stack space. Everything below this is I/O space
=$00ff00				ISR_BEGIN        = $00FF00 ; Byte  Beginning of CPU vectors in Direct page
=$00ff00				HRESET           = $00FF00 ;16 Bytes Handle RESET asserted. Reboot computer and re-initialize the kernel.
=$00ff10				HCOP             = $00FF10 ;16 Bytes Handle the COP instruction. Program use; not used by OS
=$00ff20				HBRK             = $00FF20 ;16 Bytes Handle the BRK instruction. Returns to BASIC Ready prompt.
=$00ff30				HABORT           = $00FF30 ;16 Bytes Handle ABORT asserted. Return to Ready prompt with an error message.
=$00ff40				HNMI             = $00FF40 ;32 Bytes Handle NMI
=$00ff60				HIRQ             = $00FF60 ;32 Bytes Handle IRQ
=$00ff80				Unused_FF80      = $00FF80 ;End of direct page Interrrupt handlers
=$38ffe0				VECTORS_BEGIN    = $38FFE0 ;0 Byte  Interrupt vectors
=$00ffe0				JMP_READY        = $00FFE0 ;4 Bytes Jumps to ROM READY routine. Modified whenever alternate command interpreter is loaded.
=$00ffe4				VECTOR_COP       = $00FFE4 ;2 Bytes Native COP Interrupt vector
=$00ffe6				VECTOR_BRK       = $00FFE6 ;2 Bytes Native BRK Interrupt vector
=$00ffe8				VECTOR_ABORT     = $00FFE8 ;2 Bytes Native ABORT Interrupt vector
=$00ffea				VECTOR_NMI       = $00FFEA ;2 Bytes Native NMI Interrupt vector
=$00ffec				VECTOR_RESET     = $00FFEC ;2 Bytes Unused (Native RESET vector)
=$00ffee				VECTOR_IRQ       = $00FFEE ;2 Bytes Native IRQ Vector
=$00fff0				RETURN           = $00FFF0 ;4 Bytes RETURN key handler. Points to BASIC or MONITOR subroutine to execute when RETURN is pressed.
=$00fff4				VECTOR_ECOP      = $00FFF4 ;2 Bytes Emulation mode interrupt handler
=$00fff6				VECTOR_EBRK      = $00FFF6 ;2 Bytes Emulation mode interrupt handler
=$00fff8				VECTOR_EABORT    = $00FFF8 ;2 Bytes Emulation mode interrupt handler
=$00fffa				VECTOR_ENMI      = $00FFFA ;2 Bytes Emulation mode interrupt handler
=$00fffc				VECTOR_ERESET    = $00FFFC ;2 Bytes Emulation mode interrupt handler
=$00fffe				VECTOR_EIRQ      = $00FFFE ;2 Bytes Emulation mode interrupt handler
=$400000				VECTORS_END      = $400000 ;*End of vector space
=$00ffff				BANK0_END        = $00FFFF ;End of Bank 00 and Direct page

;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_data.asm

>380000	00 a0 af			                .long $AFA000       ; SCREENBEGIN, 3 bytes, Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>380003	4c 00				                .word 76            ; COLS_VISIBLE, 2 bytes, Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>380005	80 00				                .word 128           ; COLS_PER_LINE, 2 bytes, Columns in memory per screen line. A virtual line can be this long. Default=128
>380007	38 00				                .word 56            ; LINES_VISIBLE, 2 bytes, The number of rows visible on the screen. Default=25
>380009	40 00				                .word 64            ; LINES_MAX, 2 bytes, The number of rows in memory for the screen. Default=64
>38000b	00 a0 af			                .long $AFA000       ; CURSORPOS, 3 bytes, The next character written to the screen will be written in this location.
>38000e	00 00				                .word 0             ; CURSORX, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380010	00 00				                .word 0             ; CURSORY, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380012	0f				                .byte $0F           ; CURCOLOR, 2 bytes, Color of next character to be printed to the screen.
>380013	00				                .byte $00           ; CURATTR, 2 bytes, Attribute of next character to be printed to the screen.
>380014	00 80				                .word STACK_BEGIN   ; STACKBOT, 2 bytes, Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
>380016	ff fe				                .word STACK_END     ; STACKTOP, 2 bytes, Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.

;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_code.asm

.ff00	18		clc		RHRESET         CLC
.ff01	fb		xce		                XCE
.ff02	5c 00 00 39	jmp $390000	                JML BOOT
.ff10					RHCOP
.ff10	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff12	8b		phb		                PHB
.ff13	0b		phd		                PHD
.ff14	48		pha		                PHA
.ff15	da		phx		                PHX
.ff16	5a		phy		                PHY
.ff17	5c 08 00 39	jmp $390008	                JML BREAK
.ff20					RHBRK
.ff20	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff22	8b		phb		                PHB
.ff23	0b		phd		                PHD
.ff24	48		pha		                PHA
.ff25	da		phx		                PHX
.ff26	5a		phy		                PHY
.ff27	5c 08 00 39	jmp $390008	                JML BREAK
.ff30					RHABORT
.ff30	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff32	8b		phb		                PHB
.ff33	0b		phd		                PHD
.ff34	48		pha		                PHA
.ff35	da		phx		                PHX
.ff36	5a		phy		                PHY
.ff37	5c 08 00 39	jmp $390008	                JML BREAK
.ff40					 RHNMI
.ff40	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff42	8b		phb		                PHB
.ff43	0b		phd		                PHD
.ff44	48		pha		                PHA
.ff45	da		phx		                PHX
.ff46	5a		phy		                PHY
.ff47	22 ad 82 39	jsl $3982ad	                JSL NMI_HANDLER
.ff4b	7a		ply		                PLY
.ff4c	fa		plx		                PLX
.ff4d	68		pla		                PLA
.ff4e	2b		pld		                PLD
.ff4f	ab		plb		                PLB
.ff50	40		rti		                RTI
.ff60					RHIRQ
.ff60	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff62	8b		phb		                PHB
.ff63	0b		phd		                PHD
.ff64	48		pha		                PHA
.ff65	da		phx		                PHX
.ff66	5a		phy		                PHY
.ff67	22 7f 81 39	jsl $39817f	                JSL IRQ_HANDLER
.ff6b	7a		ply		                PLY
.ff6c	fa		plx		                PLX
.ff6d	68		pla		                PLA
.ff6e	2b		pld		                PLD
.ff6f	ab		plb		                PLB
.ff70	40		rti		                RTI

;******  Return to file: src\kernel.asm


;******  Processing file: src\Math_def.asm

=$000100				UNSIGNED_MULT_A_LO  = $000100
=$000101				UNSIGNED_MULT_A_HI  = $000101
=$000102				UNSIGNED_MULT_B_LO  = $000102
=$000103				UNSIGNED_MULT_B_HI  = $000103
=$000104				UNSIGNED_MULT_AL_LO = $000104
=$000105				UNSIGNED_MULT_AL_HI = $000105
=$000106				UNSIGNED_MULT_AH_LO = $000106
=$000107				UNSIGNED_MULT_AH_HI = $000107
=$000108				SIGNED_MULT_A_LO    = $000108
=$000109				SIGNED_MULT_A_HI    = $000109
=$00010a				SIGNED_MULT_B_LO    = $00010A
=$00010b				SIGNED_MULT_B_HI    = $00010B
=$00010c				SIGNED_MULT_AL_LO   = $00010C
=$00010d				SIGNED_MULT_AL_HI   = $00010D
=$00010e				SIGNED_MULT_AH_LO   = $00010E
=$00010f				SIGNED_MULT_AH_HI   = $00010F
=$000110				UNSIGNED_DIV_DEM_LO = $000110
=$000111				UNSIGNED_DIV_DEM_HI = $000111
=$000112				UNSIGNED_DIV_NUM_LO = $000112
=$000113				UNSIGNED_DIV_NUM_HI = $000113
=$000114				UNSIGNED_DIV_QUO_LO = $000114
=$000115				UNSIGNED_DIV_QUO_HI = $000115
=$000116				UNSIGNED_DIV_REM_LO = $000116
=$000117				UNSIGNED_DIV_REM_HI = $000117
=$000118				SIGNED_DIV_DEM_LO   = $000118
=$000119				SIGNED_DIV_DEM_HI   = $000119
=$00011a				SIGNED_DIV_NUM_LO   = $00011A
=$00011b				SIGNED_DIV_NUM_HI   = $00011B
=$00011c				SIGNED_DIV_QUO_LO   = $00011C
=$00011d				SIGNED_DIV_QUO_HI   = $00011D
=$00011e				SIGNED_DIV_REM_LO   = $00011E
=$00011f				SIGNED_DIV_REM_HI   = $00011F
=$000120				ADDER32_A_LL        = $000120
=$000121				ADDER32_A_LH        = $000121
=$000122				ADDER32_A_HL        = $000122
=$000123				ADDER32_A_HH        = $000123
=$000124				ADDER32_B_LL        = $000124
=$000125				ADDER32_B_LH        = $000125
=$000126				ADDER32_B_HL        = $000126
=$000127				ADDER32_B_HH        = $000127
=$000128				ADDER32_R_LL        = $000128
=$000129				ADDER32_R_LH        = $000129
=$00012a				ADDER32_R_HL        = $00012A
=$00012b				ADDER32_R_HH        = $00012B

;******  Return to file: src\kernel.asm


;******  Processing file: src\interrupt_def.asm

=$000140				INT_PENDING_REG0 = $000140 ;
=$000141				INT_PENDING_REG1 = $000141 ;
=$000142				INT_PENDING_REG2 = $000142 ;
=$000144				INT_POL_REG0     = $000144 ;
=$000145				INT_POL_REG1     = $000145 ;
=$000146				INT_POL_REG2     = $000146 ;
=$000148				INT_EDGE_REG0    = $000148 ;
=$000149				INT_EDGE_REG1    = $000149 ;
=$00014a				INT_EDGE_REG2    = $00014A ;
=$00014c				INT_MASK_REG0    = $00014C ;
=$00014d				INT_MASK_REG1    = $00014D ;
=$00014e				INT_MASK_REG2    = $00014E ;
=$01					FNX0_INT00_SOF    = $01  ;Start of Frame @ 60FPS
=$02					FNX0_INT01_SOL    = $02  ;Start of Line (Programmable)
=$04					FNX0_INT02_TMR0   = $04  ;Timer 0 Interrupt
=$08					FNX0_INT03_TMR1   = $08  ;Timer 1 Interrupt
=$10					FNX0_INT04_TMR2   = $10  ;Timer 2 Interrupt
=$20					FNX0_INT05_RTC    = $20  ;Real-Time Clock Interrupt
=$40					FNX0_INT06_FDC    = $40  ;Floppy Disk Controller
=$80					FNX0_INT07_MOUSE  = $80  ; Mouse Interrupt (INT12 in SuperIO IOspace)
=$01					FNX1_INT00_KBD    = $01  ;Keyboard Interrupt
=$02					FNX1_INT01_SC0    = $02  ;Sprite 2 Sprite Collision
=$04					FNX1_INT02_SC1    = $04  ;Sprite 2 Tiles Collision
=$08					FNX1_INT03_COM2   = $08  ;Serial Port 2
=$10					FNX1_INT04_COM1   = $10  ;Serial Port 1
=$20					FNX1_INT05_MPU401 = $20  ;Midi Controller Interrupt
=$40					FNX1_INT06_LPT    = $40  ;Parallel Port
=$80					FNX1_INT07_SDCARD = $80  ;SD Card Controller Interrupt
=$01					FNX2_INT00_OPL2R  = $01  ;OPl2 Right Channel
=$02					FNX2_INT01_OPL2L  = $02  ;OPL2 Left Channel
=$04					FNX2_INT02_BTX_INT= $04  ;Beatrix Interrupt (TBD)
=$08					FNX2_INT03_SDMA   = $08  ;System DMA
=$10					FNX2_INT04_VDMA   = $10  ;Video DMA
=$20					FNX2_INT05_DACHP  = $20  ;DAC Hot Plug
=$40					FNX2_INT06_EXT    = $40  ;External Expansion
=$80					FNX2_INT07_ALLONE = $80  ; Not Used - Always 1

;******  Return to file: src\kernel.asm


;******  Processing file: src\dram_inc.asm

=$afa000				SCREEN_PAGE0     = $AFA000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
=$afc000				SCREEN_PAGE1     = $AFC000 ;8192 Bytes Additional page of display RAM. This can be used for page flipping or to handle multiple edit buffers.
=$b00000				SCREEN_END       = $B00000 ;End of display memory

;******  Return to file: src\kernel.asm


;******  Processing file: src\vicky_def.asm

=$af0000				MASTER_CTRL_REG_L	      = $AF0000
=$01					Mstr_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$02					Mstr_Ctrl_Text_Overlay  = $02       ; Enable the Overlay of the text mode on top of Graphic Mode (the Background Color is ignored)
=$04					Mstr_Ctrl_Graph_Mode_En = $04       ; Enable the Graphic Mode
=$08					Mstr_Ctrl_Bitmap_En     = $08       ; Enable the Bitmap Module In Vicky
=$10					Mstr_Ctrl_TileMap_En    = $10       ; Enable the Tile Module in Vicky
=$20					Mstr_Ctrl_Sprite_En     = $20       ; Enable the Sprite Module in Vicky
=$40					Mstr_Ctrl_GAMMA_En      = $40       ; this Enable the GAMMA correction - The Analog and DVI have different color value, the GAMMA is great to correct the difference
=$80					Mstr_Ctrl_Disable_Vid   = $80       ; This will disable the Scanning of the Video hence giving 100% bandwith to the CPU
=$af0001				MASTER_CTRL_REG_H	      = $AF0001
=$af0002				VKY_RESERVED_00         = $AF0002
=$af0003				VKY_RESERVED_01         = $AF0003
=$01					Border_Ctrl_Enable      = $01
=$af0004				BORDER_CTRL_REG         = $AF0004 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$af0005				BORDER_COLOR_B          = $AF0005
=$af0006				BORDER_COLOR_G          = $AF0006
=$af0007				BORDER_COLOR_R          = $AF0007
=$af0008				BORDER_X_SIZE           = $AF0008; X-  Values: 0 - 32 (Default: 32)
=$af0009				BORDER_Y_SIZE           = $AF0009; Y- Values 0 -32 (Default: 32)
=$af000d				BACKGROUND_COLOR_B      = $AF000D ; When in Graphic Mode, if a pixel is "0" then the Background pixel is chosen
=$af000e				BACKGROUND_COLOR_G      = $AF000E
=$af000f				BACKGROUND_COLOR_R      = $AF000F ;
=$af0010				VKY_TXT_CURSOR_CTRL_REG = $AF0010   ;[0]  Enable Text Mode
=$01					Vky_Cursor_Enable       = $01
=$02					Vky_Cursor_Flash_Rate0  = $02
=$04					Vky_Cursor_Flash_Rate1  = $04
=$08					Vky_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10					Vky_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$af0011				VKY_TXT_START_ADD_PTR   = $AF0011   ; This is an offset to change the Starting address of the Text Mode Buffer (in x)
=$af0012				VKY_TXT_CURSOR_CHAR_REG = $AF0012
=$af0013				VKY_TXT_CURSOR_COLR_REG = $AF0013
=$af0014				VKY_TXT_CURSOR_X_REG_L  = $AF0014
=$af0015				VKY_TXT_CURSOR_X_REG_H  = $AF0015
=$af0016				VKY_TXT_CURSOR_Y_REG_L  = $AF0016
=$af0017				VKY_TXT_CURSOR_Y_REG_H  = $AF0017
=$af001b				VKY_LINE_IRQ_CTRL_REG   = $AF001B ;[0] - Enable Line 0, [1] -Enable Line 1
=$af001c				VKY_LINE0_CMP_VALUE_LO  = $AF001C ;Write Only [7:0]
=$af001d				VKY_LINE0_CMP_VALUE_HI  = $AF001D ;Write Only [3:0]
=$af001e				VKY_LINE1_CMP_VALUE_LO  = $AF001E ;Write Only [7:0]
=$af001f				VKY_LINE1_CMP_VALUE_HI  = $AF001F ;Write Only [3:0]
=$af001c				VKY_INFO_CHIP_NUM_L     = $AF001C
=$af001d				VKY_INFO_CHIP_NUM_H     = $AF001D
=$af001e				VKY_INFO_CHIP_VER_L     = $AF001E
=$af001f				VKY_INFO_CHIP_VER_H     = $AF001F
=$01					TILE_Enable             = $01
=$02					TILE_LUT0               = $02
=$04					TILE_LUT1               = $04
=$08					TILE_LUT2               = $08
=$80					TILESHEET_256x256_En    = $80   ; 0 -> Sequential, 1-> 256x256 Tile Sheet Striding
=$af0100				TL0_CONTROL_REG         = $AF0100       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0101				TL0_START_ADDY_L        = $AF0101       ; Not USed right now - Starting Address to where is the MAP
=$af0102				TL0_START_ADDY_M        = $AF0102
=$af0103				TL0_START_ADDY_H        = $AF0103
=$af0104				TL0_MAP_X_STRIDE_L      = $AF0104       ; The Stride of the Map
=$af0105				TL0_MAP_X_STRIDE_H      = $AF0105
=$af0106				TL0_MAP_Y_STRIDE_L      = $AF0106       ; The Stride of the Map
=$af0107				TL0_MAP_Y_STRIDE_H      = $AF0107
=$af0108				TL1_CONTROL_REG         = $AF0108       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0109				TL1_START_ADDY_L        = $AF0109       ; Not USed right now - Starting Address to where is the MAP
=$af010a				TL1_START_ADDY_M        = $AF010A
=$af010b				TL1_START_ADDY_H        = $AF010B
=$af010c				TL1_MAP_X_STRIDE_L      = $AF010C       ; The Stride of the Map
=$af010d				TL1_MAP_X_STRIDE_H      = $AF010D
=$af010e				TL1_MAP_Y_STRIDE_L      = $AF010E       ; The Stride of the Map
=$af010f				TL1_MAP_Y_STRIDE_H      = $AF010F
=$af0110				TL2_CONTROL_REG         = $AF0110       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0111				TL2_START_ADDY_L        = $AF0111       ; Not USed right now - Starting Address to where is the MAP
=$af0112				TL2_START_ADDY_M        = $AF0112
=$af0113				TL2_START_ADDY_H        = $AF0113
=$af0114				TL2_MAP_X_STRIDE_L      = $AF0114       ; The Stride of the Map
=$af0115				TL2_MAP_X_STRIDE_H      = $AF0115
=$af0116				TL2_MAP_Y_STRIDE_L      = $AF0116       ; The Stride of the Map
=$af0117				TL2_MAP_Y_STRIDE_H      = $AF0117
=$af0118				TL3_CONTROL_REG         = $AF0118       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0119				TL3_START_ADDY_L        = $AF0119       ; Not USed right now - Starting Address to where is the MAP
=$af011a				TL3_START_ADDY_M        = $AF011A
=$af011b				TL3_START_ADDY_H        = $AF011B
=$af011c				TL3_MAP_X_STRIDE_L      = $AF011C       ; The Stride of the Map
=$af011d				TL3_MAP_X_STRIDE_H      = $AF011D
=$af011e				TL3_MAP_Y_STRIDE_L      = $AF011E       ; The Stride of the Map
=$af011f				TL3_MAP_Y_STRIDE_H      = $AF011F
=$af0140				BM_CONTROL_REG          = $AF0140
=$af0141				BM_START_ADDY_L         = $AF0141
=$af0142				BM_START_ADDY_M         = $AF0142
=$af0143				BM_START_ADDY_H         = $AF0143
=$af0144				BM_X_SIZE_L             = $AF0144
=$af0145				BM_X_SIZE_H             = $AF0145
=$af0146				BM_Y_SIZE_L             = $AF0146
=$af0147				BM_Y_SIZE_H             = $AF0147
=$af0148				BM_RESERVED_0           = $AF0148
=$af0149				BM_RESERVED_1           = $AF0149
=$af014a				BM_RESERVED_2           = $AF014A
=$af014b				BM_RESERVED_3           = $AF014B
=$af014c				BM_RESERVED_4           = $AF014C
=$af014d				BM_RESERVED_5           = $AF014D
=$af014e				BM_RESERVED_6           = $AF014E
=$af014f				BM_RESERVED_7           = $AF014F
=$01					SPRITE_Enable             = $01
=$02					SPRITE_LUT0               = $02 ; This is the LUT that the Sprite will use
=$04					SPRITE_LUT1               = $04
=$08					SPRITE_LUT2               = $08 ; Only 4 LUT for Now, So this bit is not used.
=$10					SPRITE_DEPTH0             = $10 ; This is the Layer the Sprite will be Displayed in
=$20					SPRITE_DEPTH1             = $20
=$40					SPRITE_DEPTH2             = $40
=$af0200				SP00_CONTROL_REG        = $AF0200
=$af0201				SP00_ADDY_PTR_L         = $AF0201
=$af0202				SP00_ADDY_PTR_M         = $AF0202
=$af0203				SP00_ADDY_PTR_H         = $AF0203
=$af0204				SP00_X_POS_L            = $AF0204
=$af0205				SP00_X_POS_H            = $AF0205
=$af0206				SP00_Y_POS_L            = $AF0206
=$af0207				SP00_Y_POS_H            = $AF0207
=$af0208				SP01_CONTROL_REG        = $AF0208
=$af0209				SP01_ADDY_PTR_L         = $AF0209
=$af020a				SP01_ADDY_PTR_M         = $AF020A
=$af020b				SP01_ADDY_PTR_H         = $AF020B
=$af020c				SP01_X_POS_L            = $AF020C
=$af020d				SP01_X_POS_H            = $AF020D
=$af020e				SP01_Y_POS_L            = $AF020E
=$af020f				SP01_Y_POS_H            = $AF020F
=$af0210				SP02_CONTROL_REG        = $AF0210
=$af0211				SP02_ADDY_PTR_L         = $AF0211
=$af0212				SP02_ADDY_PTR_M         = $AF0212
=$af0213				SP02_ADDY_PTR_H         = $AF0213
=$af0214				SP02_X_POS_L            = $AF0214
=$af0215				SP02_X_POS_H            = $AF0215
=$af0216				SP02_Y_POS_L            = $AF0216
=$af0217				SP02_Y_POS_H            = $AF0217
=$af0218				SP03_CONTROL_REG        = $AF0218
=$af0219				SP03_ADDY_PTR_L         = $AF0219
=$af021a				SP03_ADDY_PTR_M         = $AF021A
=$af021b				SP03_ADDY_PTR_H         = $AF021B
=$af021c				SP03_X_POS_L            = $AF021C
=$af021d				SP03_X_POS_H            = $AF021D
=$af021e				SP03_Y_POS_L            = $AF021E
=$af021f				SP03_Y_POS_H            = $AF021F
=$af0220				SP04_CONTROL_REG        = $AF0220
=$af0221				SP04_ADDY_PTR_L         = $AF0221
=$af0222				SP04_ADDY_PTR_M         = $AF0222
=$af0223				SP04_ADDY_PTR_H         = $AF0223
=$af0224				SP04_X_POS_L            = $AF0224
=$af0225				SP04_X_POS_H            = $AF0225
=$af0226				SP04_Y_POS_L            = $AF0226
=$af0227				SP04_Y_POS_H            = $AF0227
=$af0228				SP05_CONTROL_REG        = $AF0228
=$af0229				SP05_ADDY_PTR_L         = $AF0229
=$af022a				SP05_ADDY_PTR_M         = $AF022A
=$af022b				SP05_ADDY_PTR_H         = $AF022B
=$af022c				SP05_X_POS_L            = $AF022C
=$af022d				SP05_X_POS_H            = $AF022D
=$af022e				SP05_Y_POS_L            = $AF022E
=$af022f				SP05_Y_POS_H            = $AF022F
=$af0230				SP06_CONTROL_REG        = $AF0230
=$af0231				SP06_ADDY_PTR_L         = $AF0231
=$af0232				SP06_ADDY_PTR_M         = $AF0232
=$af0233				SP06_ADDY_PTR_H         = $AF0233
=$af0234				SP06_X_POS_L            = $AF0234
=$af0235				SP06_X_POS_H            = $AF0235
=$af0236				SP06_Y_POS_L            = $AF0236
=$af0237				SP06_Y_POS_H            = $AF0237
=$af0238				SP07_CONTROL_REG        = $AF0238
=$af0239				SP07_ADDY_PTR_L         = $AF0239
=$af023a				SP07_ADDY_PTR_M         = $AF023A
=$af023b				SP07_ADDY_PTR_H         = $AF023B
=$af023c				SP07_X_POS_L            = $AF023C
=$af023d				SP07_X_POS_H            = $AF023D
=$af023e				SP07_Y_POS_L            = $AF023E
=$af023f				SP07_Y_POS_H            = $AF023F
=$af0240				SP08_CONTROL_REG        = $AF0240
=$af0241				SP08_ADDY_PTR_L         = $AF0241
=$af0242				SP08_ADDY_PTR_M         = $AF0242
=$af0243				SP08_ADDY_PTR_H         = $AF0243
=$af0244				SP08_X_POS_L            = $AF0244
=$af0245				SP08_X_POS_H            = $AF0245
=$af0246				SP08_Y_POS_L            = $AF0246
=$af0247				SP08_Y_POS_H            = $AF0247
=$af0248				SP09_CONTROL_REG        = $AF0248
=$af0249				SP09_ADDY_PTR_L         = $AF0249
=$af024a				SP09_ADDY_PTR_M         = $AF024A
=$af024b				SP09_ADDY_PTR_H         = $AF024B
=$af024c				SP09_X_POS_L            = $AF024C
=$af024d				SP09_X_POS_H            = $AF024D
=$af024e				SP09_Y_POS_L            = $AF024E
=$af024f				SP09_Y_POS_H            = $AF024F
=$af0250				SP10_CONTROL_REG        = $AF0250
=$af0251				SP10_ADDY_PTR_L         = $AF0251
=$af0252				SP10_ADDY_PTR_M         = $AF0252
=$af0253				SP10_ADDY_PTR_H         = $AF0253
=$af0254				SP10_X_POS_L            = $AF0254
=$af0255				SP10_X_POS_H            = $AF0255
=$af0256				SP10_Y_POS_L            = $AF0256
=$af0257				SP10_Y_POS_H            = $AF0257
=$af0258				SP11_CONTROL_REG        = $AF0258
=$af0259				SP11_ADDY_PTR_L         = $AF0259
=$af025a				SP11_ADDY_PTR_M         = $AF025A
=$af025b				SP11_ADDY_PTR_H         = $AF025B
=$af025c				SP11_X_POS_L            = $AF025C
=$af025d				SP11_X_POS_H            = $AF025D
=$af025e				SP11_Y_POS_L            = $AF025E
=$af025f				SP11_Y_POS_H            = $AF025F
=$af0260				SP12_CONTROL_REG        = $AF0260
=$af0261				SP12_ADDY_PTR_L         = $AF0261
=$af0262				SP12_ADDY_PTR_M         = $AF0262
=$af0263				SP12_ADDY_PTR_H         = $AF0263
=$af0264				SP12_X_POS_L            = $AF0264
=$af0265				SP12_X_POS_H            = $AF0265
=$af0266				SP12_Y_POS_L            = $AF0266
=$af0267				SP12_Y_POS_H            = $AF0267
=$af0268				SP13_CONTROL_REG        = $AF0268
=$af0269				SP13_ADDY_PTR_L         = $AF0269
=$af026a				SP13_ADDY_PTR_M         = $AF026A
=$af026b				SP13_ADDY_PTR_H         = $AF026B
=$af026c				SP13_X_POS_L            = $AF026C
=$af026d				SP13_X_POS_H            = $AF026D
=$af026e				SP13_Y_POS_L            = $AF026E
=$af026f				SP13_Y_POS_H            = $AF026F
=$af0270				SP14_CONTROL_REG        = $AF0270
=$af0271				SP14_ADDY_PTR_L         = $AF0271
=$af0272				SP14_ADDY_PTR_M         = $AF0272
=$af0273				SP14_ADDY_PTR_H         = $AF0273
=$af0274				SP14_X_POS_L            = $AF0274
=$af0275				SP14_X_POS_H            = $AF0275
=$af0276				SP14_Y_POS_L            = $AF0276
=$af0277				SP14_Y_POS_H            = $AF0277
=$af0278				SP15_CONTROL_REG        = $AF0278
=$af0279				SP15_ADDY_PTR_L         = $AF0279
=$af027a				SP15_ADDY_PTR_M         = $AF027A
=$af027b				SP15_ADDY_PTR_H         = $AF027B
=$af027c				SP15_X_POS_L            = $AF027C
=$af027d				SP15_X_POS_H            = $AF027D
=$af027e				SP15_Y_POS_L            = $AF027E
=$af027f				SP15_Y_POS_H            = $AF027F
=$af0280				SP16_CONTROL_REG        = $AF0280
=$af0281				SP16_ADDY_PTR_L         = $AF0281
=$af0282				SP16_ADDY_PTR_M         = $AF0282
=$af0283				SP16_ADDY_PTR_H         = $AF0283
=$af0284				SP16_X_POS_L            = $AF0284
=$af0285				SP16_X_POS_H            = $AF0285
=$af0286				SP16_Y_POS_L            = $AF0286
=$af0287				SP16_Y_POS_H            = $AF0287
=$af0288				SP17_CONTROL_REG        = $AF0288
=$af0289				SP17_ADDY_PTR_L         = $AF0289
=$af028a				SP17_ADDY_PTR_M         = $AF028A
=$af028b				SP17_ADDY_PTR_H         = $AF028B
=$af028c				SP17_X_POS_L            = $AF028C
=$af028d				SP17_X_POS_H            = $AF028D
=$af028e				SP17_Y_POS_L            = $AF028E
=$af028f				SP17_Y_POS_H            = $AF028F
=$af0400				VDMA_CONTROL_REG        = $AF0400
=$01					VDMA_CTRL_Enable        = $01
=$02					VDMA_CTRL_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04					VDMA_CTRL_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08					VDMA_CTRL_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$80					VDMA_CTRL_Start_TRF     = $80     ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0401				VDMA_BYTE_2_WRITE       = $AF0401 ; Write Only - Byte to Write in the Fill Function
=$af0401				VDMA_STATUS_REG         = $AF0401 ; Read only
=$01					VDMA_STAT_Size_Err      = $01     ; If Set to 1, Overall Size is Invalid
=$02					VDMA_STAT_Dst_Add_Err   = $02     ; If Set to 1, Destination Address Invalid
=$04					VDMA_STAT_Src_Add_Err   = $04     ; If Set to 1, Source Address Invalid
=$80					VDMA_STAT_VDMA_IPS      = $80     ; If Set to 1, VDMA Transfer in Progress (this Inhibit CPU Access to Mem)
=$af0402				VDMA_SRC_ADDY_L         = $AF0402 ; Pointer to the Source of the Data to be stransfered
=$af0403				VDMA_SRC_ADDY_M         = $AF0403 ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0404				VDMA_SRC_ADDY_H         = $AF0404
=$af0405				VDMA_DST_ADDY_L         = $AF0405 ; Destination Pointer within Vicky's video memory Range
=$af0406				VDMA_DST_ADDY_M         = $AF0406 ; ($00_0000 - $3F_0000)
=$af0407				VDMA_DST_ADDY_H         = $AF0407
=$af0408				VDMA_SIZE_L             = $AF0408 ; Maximum Value: $40:0000 (4Megs)
=$af0409				VDMA_SIZE_M             = $AF0409
=$af040a				VDMA_SIZE_H             = $AF040A
=$af040b				VDMA_IGNORED            = $AF040B
=$af0408				VDMA_X_SIZE_L           = $AF0408 ; Maximum Value: 65535
=$af0409				VDMA_X_SIZE_H           = $AF0409
=$af040a				VDMA_Y_SIZE_L           = $AF040A ; Maximum Value: 65535
=$af040b				VDMA_Y_SIZE_H           = $AF040B
=$af040c				VDMA_SRC_STRIDE_L       = $AF040C ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040d				VDMA_SRC_STRIDE_H       = $AF040D ;
=$af040e				VDMA_DST_STRIDE_L       = $AF040E ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040f				VDMA_DST_STRIDE_H       = $AF040F ;
=$af0500				MOUSE_PTR_GRAP0_START    = $AF0500 ; 16 x 16 = 256 Pixels (Grey Scale) 0 = Transparent, 1 = Black , 255 = White
=$af05ff				MOUSE_PTR_GRAP0_END      = $AF05FF ; Pointer 0
=$af0600				MOUSE_PTR_GRAP1_START    = $AF0600 ;
=$af06ff				MOUSE_PTR_GRAP1_END      = $AF06FF ; Pointer 1
=$af0700				MOUSE_PTR_CTRL_REG_L    = $AF0700 ; Bit[0] Enable, Bit[1] = 0  ( 0 = Pointer0, 1 = Pointer1)
=$af0701				MOUSE_PTR_CTRL_REG_H    = $AF0701 ;
=$af0702				MOUSE_PTR_X_POS_L       = $AF0702 ; X Position (0 - 639) (Can only read now) Writing will have no effect
=$af0703				MOUSE_PTR_X_POS_H       = $AF0703 ;
=$af0704				MOUSE_PTR_Y_POS_L       = $AF0704 ; Y Position (0 - 479) (Can only read now) Writing will have no effect
=$af0705				MOUSE_PTR_Y_POS_H       = $AF0705 ;
=$af0706				MOUSE_PTR_BYTE0         = $AF0706 ; Byte 0 of Mouse Packet (you must write 3 Bytes)
=$af0707				MOUSE_PTR_BYTE1         = $AF0707 ; Byte 1 of Mouse Packet (if you don't, then )
=$af0708				MOUSE_PTR_BYTE2         = $AF0708 ; Byte 2 of Mouse Packet (state Machine will be jammed in 1 state)
=$af070b				C256F_MODEL_MAJOR       = $AF070B ;
=$af070c				C256F_MODEL_MINOR       = $AF070C ;
=$af070d				FPGA_DOR                = $AF070D ;
=$af070e				FPGA_MOR                = $AF070E ;
=$af070f				FPGA_YOR                = $AF070F ;
=$af1f40				FG_CHAR_LUT_PTR         = $AF1F40
=$af1f80				BG_CHAR_LUT_PTR		      = $AF1F80
=$af2000				GRPH_LUT0_PTR		        = $AF2000
=$af2400				GRPH_LUT1_PTR		        = $AF2400
=$af2800				GRPH_LUT2_PTR		        = $AF2800
=$af2c00				GRPH_LUT3_PTR		        = $AF2C00
=$af3000				GRPH_LUT4_PTR		        = $AF3000
=$af3400				GRPH_LUT5_PTR		        = $AF3400
=$af3800				GRPH_LUT6_PTR		        = $AF3800
=$af3c00				GRPH_LUT7_PTR		        = $AF3C00
=$af4000				GAMMA_B_LUT_PTR		      = $AF4000
=$af4100				GAMMA_G_LUT_PTR		      = $AF4100
=$af4200				GAMMA_R_LUT_PTR		      = $AF4200
=$af5000				TILE_MAP0       		    = $AF5000     ;$AF5000 - $AF57FF
=$af5800				TILE_MAP1               = $AF5800     ;$AF5800 - $AF5FFF
=$af6000				TILE_MAP2               = $AF6000     ;$AF6000 - $AF67FF
=$af6800				TILE_MAP3               = $AF6800     ;$AF6800 - $AF6FFF
=$af8000				FONT_MEMORY_BANK0       = $AF8000     ;$AF8000 - $AF87FF
=$af8800				FONT_MEMORY_BANK1       = $AF8800     ;$AF8800 - $AF8FFF
=$afa000				CS_TEXT_MEM_PTR         = $AFA000
=$afc000				CS_COLOR_MEM_PTR        = $AFC000
=$afe000				BTX_START               = $AFE000     ; BEATRIX Registers
=$afffff				BTX_END                 = $AFFFFF

;******  Return to file: src\kernel.asm


;******  Processing file: src\super_io_def.asm

=$af1100				PME_STS_REG     = $AF1100
=$af1102				PME_EN_REG		  = $AF1102
=$af1104				PME_STS1_REG		= $AF1104
=$af1105				PME_STS2_REG		= $AF1105
=$af1106				PME_STS3_REG		= $AF1106
=$af1107				PME_STS4_REG		= $AF1107
=$af1108				PME_STS5_REG		= $AF1108
=$af110a				PME_EN1_REG     = $AF110A
=$af110b				PME_EN2_REG     = $AF110B
=$af110c				PME_EN3_REG     = $AF110C
=$af110d				PME_EN4_REG     = $AF110D
=$af110e				PME_EN5_REG     = $AF110E
=$af1110				SMI_STS1_REG		= $AF1110
=$af1111				SMI_STS2_REG		= $AF1111
=$af1112				SMI_STS3_REG		= $AF1112
=$af1113				SMI_STS4_REG		= $AF1113
=$af1114				SMI_STS5_REG		= $AF1114
=$af1116				SMI_EN1_REG     = $AF1116
=$af1117				SMI_EN2_REG     = $AF1117
=$af1118				SMI_EN3_REG     = $AF1118
=$af1119				SMI_EN4_REG     = $AF1119
=$af111a				SMI_EN5_REG     = $AF111A
=$af111c				MSC_ST_REG      = $AF111C
=$af111e				FORCE_DISK_CHANGE       = $AF111E
=$af111f				FLOPPY_DATA_RATE        = $AF111F
=$af1120				UART1_FIFO_CTRL_SHDW    = $AF1120
=$af1121				UART2_FIFO_CTRL_SHDW    = $AF1121
=$af1122				DEV_DISABLE_REG         = $AF1122
=$af1123				GP10_REG    		= $AF1123
=$af1124				GP11_REG    		= $AF1124
=$af1125				GP12_REG    		= $AF1125
=$af1126				GP13_REG    		= $AF1126
=$af1127				GP14_REG    		= $AF1127
=$af1128				GP15_REG    		= $AF1128
=$af1129				GP16_REG    		= $AF1129
=$af112a				GP17_REG    		= $AF112A
=$af112b				GP20_REG    		= $AF112B
=$af112c				GP21_REG    		= $AF112C
=$af112d				GP22_REG		= $AF112D
=$af112f				GP24_REG		= $AF112F
=$af1130				GP25_REG		= $AF1130
=$af1131				GP26_REG		= $AF1131
=$af1132				GP27_REG		= $AF1132
=$af1133				GP30_REG		= $AF1133
=$af1134				GP31_REG		= $AF1134
=$af1135				GP32_REG		= $AF1135
=$af1136				GP33_REG		= $AF1136
=$af1137				GP34_REG		= $AF1137
=$af1138				GP35_REG		= $AF1138
=$af1139				GP36_REG		= $AF1139
=$af113a				GP37_REG		= $AF113A
=$af113b				GP40_REG		= $AF113B
=$af113c				GP41_REG		= $AF113C
=$af113d				GP42_REG		= $AF113D
=$af113e				GP43_REG		= $AF113E
=$af113f				GP50_REG		= $AF113F
=$af1140				GP51_REG		= $AF1140
=$af1141				GP52_REG		= $AF1141
=$af1142				GP53_REG		= $AF1142
=$af1143				GP54_REG		= $AF1143
=$af1144				GP55_REG		= $AF1144
=$af1145				GP56_REG		= $AF1145
=$af1146				GP57_REG		= $AF1146
=$af1147				GP60_REG		= $AF1147
=$af1148				GP61_REG		= $AF1148
=$af114b				GP1_REG			= $AF114B
=$af114c				GP2_REG			= $AF114C
=$af114d				GP3_REG			= $AF114D
=$af114e				GP4_REG			= $AF114E
=$af114f				GP5_REG			= $AF114F
=$af1150				GP6_REG			= $AF1150
=$af1156				FAN1_REG		        = $AF1156
=$af1157				FAN2_REG            = $AF1157
=$af1158				FAN_CTRL_REG  	    = $AF1158
=$af1159				FAN1_TACH_REG       = $AF1159
=$af115a				FAN2_TACH_REG       = $AF115A
=$af115b				FAN1_PRELOAD_REG    = $AF115B
=$af115c				FAN2_PRELOAD_REG    = $AF115C
=$af115d				LED1_REG    		    = $AF115D
=$af115e				LED2_REG    		    = $AF115E
=$af115f				KEYBOARD_SCAN_CODE	= $AF115F

;******  Return to file: src\kernel.asm


;******  Processing file: src\keyboard_def.asm

=$af1064				STATUS_PORT 	= $AF1064
=$af1060				KBD_OUT_BUF 	= $AF1060
=$af1060				KBD_INPT_BUF	= $AF1060
=$af1064				KBD_CMD_BUF		= $AF1064
=$af1060				KBD_DATA_BUF	= $AF1060
=$af1060				PORT_A		    = $AF1060
=$af1061				PORT_B			= $AF1061
=$01					OUT_BUF_FULL    = $01
=$02					INPT_BUF_FULL	= $02
=$04					SYS_FLAG		= $04
=$08					CMD_DATA		= $08
=$10					KEYBD_INH       = $10
=$20					TRANS_TMOUT	    = $20
=$40					RCV_TMOUT		= $40
=$80					PARITY_EVEN		= $80
=$10					INH_KEYBOARD	= $10
=$ae					KBD_ENA			= $AE
=$ad					KBD_DIS			= $AD
=$f1					KB_MENU			= $F1
=$f4					KB_ENABLE		= $F4
=$f7					KB_MAKEBREAK    = $F7
=$fe					KB_ECHO			= $FE
=$ff					KB_RESET		= $FF
=$ed					KB_LED_CMD		= $ED
=$aa					KB_OK			= $AA
=$fa					KB_ACK			= $FA
=$ff					KB_OVERRUN		= $FF
=$fe					KB_RESEND		= $FE
=$f0					KB_BREAK		= $F0
=$10					KB_FA			= $10
=$20					KB_FE			= $20
=$40					KB_PR_LED		= $40
=$01					KB_SCROLL_LOCK  = $01
=$02					KB_NUM_LOCK     = $02
=$04					KB_CAPS_LOCK    = $04

;******  Return to file: src\kernel.asm


;******  Processing file: src\SID_def.asm

=$afe400				SID0_V1_FREQ_LO    = $AFE400 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$afe401				SID0_V1_FREQ_HI    = $AFE401 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$afe402				SID0_V1_PW_LO      = $AFE402 ;SID - L - Voice 1 (Write Only) - PW LOW
=$afe403				SID0_V1_PW_HI      = $AFE403 ;SID - L - Voice 1 (Write Only) - PW HI
=$afe404				SID0_V1_CTRL       = $AFE404 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$afe405				SID0_V1_ATCK_DECY  = $AFE405 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$afe406				SID0_V1_SSTN_RLSE  = $AFE406 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$afe407				SID0_V2_FREQ_LO    = $AFE407 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$afe408				SID0_V2_FREQ_HI    = $AFE408 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$afe409				SID0_V2_PW_LO      = $AFE409 ;SID - L - Voice 2 (Write Only) - PW LOW
=$afe40a				SID0_V2_PW_HI      = $AFE40A ;SID - L - Voice 2 (Write Only) - PW HI
=$afe40b				SID0_V2_CTRL       = $AFE40B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$afe40c				SID0_V2_ATCK_DECY  = $AFE40C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$afe40d				SID0_V2_SSTN_RLSE  = $AFE40D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$afe40e				SID0_V3_FREQ_LO    = $AFE40E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$afe40f				SID0_V3_FREQ_HI    = $AFE40F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$afe410				SID0_V3_PW_LO      = $AFE410 ;SID - L - Voice 3 (Write Only) - PW LOW
=$afe411				SID0_V3_PW_HI      = $AFE411 ;SID - L - Voice 3 (Write Only) - PW HI
=$afe412				SID0_V3_CTRL       = $AFE412 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$afe413				SID0_V3_ATCK_DECY  = $AFE413 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$afe414				SID0_V3_SSTN_RLSE  = $AFE414 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$afe415				SID0_FC_LO         = $AFE415 ;SID - L - Filter (Write Only) - FC LOW
=$afe416				SID0_FC_HI         = $AFE416 ;SID - L - Filter (Write Only) - FC HI
=$afe417				SID0_RES_FILT      = $AFE417 ;SID - L - Filter (Write Only) - RES / FILT
=$afe418				SID0_MODE_VOL      = $AFE418 ;SID - L - Filter (Write Only) - MODE / VOL
=$afe419				SID0_POT_X         = $AFE419 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$afe41a				SID0_POT_Y         = $AFE41A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$afe41b				SID0_OSC3_RND      = $AFE41B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$afe41c				SID0_ENV3          = $AFE41C ;SID - L - Misc (Read Only)  - ENV3
=$afe41d				SID0_NOT_USED0     = $AFE41D ;SID - L - NOT USED
=$afe41e				SID0_NOT_USED1     = $AFE41E ;SID - L - NOT USED
=$afe41f				SID0_NOT_USED2     = $AFE41F ;SID - L - NOT USED

;******  Return to file: src\kernel.asm


;******  Processing file: src\RTC_def.asm

=$af0800				RTC_SEC       = $AF0800 ;Seconds Register
=$af0801				RTC_SEC_ALARM = $AF0801 ;Seconds Alarm Register
=$af0802				RTC_MIN       = $AF0802 ;Minutes Register
=$af0803				RTC_MIN_ALARM = $AF0803 ;Minutes Alarm Register
=$af0804				RTC_HRS       = $AF0804 ;Hours Register
=$af0805				RTC_HRS_ALARM = $AF0805 ;Hours Alarm Register
=$af0806				RTC_DAY       = $AF0806 ;Day Register
=$af0807				RTC_DAY_ALARM = $AF0807 ;Day Alarm Register
=$af0808				RTC_DOW       = $AF0808 ;Day of Week Register
=$af0809				RTC_MONTH     = $AF0809 ;Month Register
=$af080a				RTC_YEAR      = $AF080A ;Year Register
=$af080b				RTC_RATES     = $AF080B ;Rates Register
=$af080c				RTC_ENABLE    = $AF080C ;Enables Register
=$af080d				RTC_FLAGS     = $AF080D ;Flags Register
=$af080e				RTC_CTRL      = $AF080E ;Control Register
=$af080f				RTC_CENTURY   = $AF080F ;Century Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\io_def.asm

=$afe800				JOYSTICK0     = $AFE800  ;(R) Joystick 0 - J7 (Next to Buzzer)
=$afe801				JOYSTICK1     = $AFE801  ;(R) Joystick 1 - J8
=$afe802				JOYSTICK2     = $AFE802  ;(R) Joystick 2 - J9
=$afe803				JOYSTICK3     = $AFE803  ;(R) Joystick 3 - J10 (next to SD Card)
=$afe804				LFSR          = $AFE804
=$afe808				PCB_REV_C     = $AFE808
=$afe809				PCB_REV_X     = $AFE809
=$afe80a				PCB_REV_1     = $AFE80A
=$afe80b				PCB_REV_EOL   = $AFE80B
=$afe80c				DIP_OPTIONS   = $AFE80C
=$afe80d				DIP_MEM_SIZE  = $AFE80D
=$afe80e				DIP_BOOTMODE  = $AFE80E
=$80					HD_INSTALLED  = $80
=$02					BOOT_MODE1    = $02
=$01					BOOT_MODE0    = $01
=$afe80f				MACHINE_ID    = $AFE80F
=$afe810				SDCARD_DATA   = $AFE810  ;(R/W) SDCARD (CH376S) Data PORT_A (A0 = 0)
=$afe811				SDCARD_CMD    = $AFE811  ;(R/W) SDCARD (CH376S) CMD/STATUS Port (A0 = 1)
=$afe812				SDCARD_STAT   = $AFE812  ;(R) SDCARD (Bit[0] = CD, Bit[1] = WP)
=$afe900				CODEC_DATA_LO = $AFE900  ;(W) LSB of Add/Data Reg to Control CODEC See WM8776 Spec
=$afe901				CODEC_DATA_HI = $AFE901  ;(W) MSB od Add/Data Reg to Control CODEC See WM8776 Spec
=$afe902				CODEC_WR_CTRL = $AFE902  ;(W) Bit[0] = 1 -> Start Writing the CODEC Control Register
=$afe830				IDE_DATA_LO   = $AFE830 ; ALways Read or Write that Register in 16Bits
=$afe831				IDE_DATA_HI   = $AFE831
=$afe832				IDE_ERROR     = $AFE832 ; Error Information register (only read when there is an error ) - Probably clears Error Bits
=$afe834				IDE_SECT_CNT  = $AFE834 ; Sector Count Register (also used to pass parameter for timeout for IDLE modus Command)
=$afe836				IDE_SECT_SRT  = $AFE836 ; Start Sector Register (0 = 256), so start @ 1
=$afe838				IDE_CLDR_LO   = $AFE838 ; Low Byte of Cylinder Numnber {7:0}
=$afe83a				IDE_CLDR_HI   = $AFE83A ;  Hi Byte of Cylinder Number {9:8} (1023-0).
=$afe83c				IDE_HEAD      = $AFE83C ; Head, device select, {3:0} HEad Number, 4 -> 0:Master, 1:Slave, {7:5} = 101 (legacy);
=$afe83e				IDE_CMD_STAT  = $AFE83E ; Command/Status Register - Reading this will clear the Interrupt Registers

;******  Return to file: src\kernel.asm


;******  Processing file: src\monitor.asm

.398000	5c 5c 80 39	jmp $39805c	MONITOR         JML IMONITOR
.398004	5c 8a 80 39	jmp $39808a	MSTATUS         JML IMSTATUS
.398008	5c 68 80 39	jmp $398068	MREADY          JML IMREADY
.39800c	5c 35 81 39	jmp $398135	MRETURN         JML IMRETURN
.398010	5c 36 81 39	jmp $398136	MPARSE          JML IMPARSE
.398014	5c 37 81 39	jmp $398137	MPARSE1         JML IMPARSE1
.398018	5c 38 81 39	jmp $398138	MEXECUTE        JML IMEXECUTE
.39801c	5c 39 81 39	jmp $398139	MASSEMBLE       JML IMASSEMBLE
.398020	5c 3a 81 39	jmp $39813a	MASSEMBLEA      JML IMASSEMBLEA
.398024	5c 3b 81 39	jmp $39813b	MCOMPARE        JML IMCOMPARE
.398028	5c 3c 81 39	jmp $39813c	MDISASSEMBLE    JML IMDISASSEMBLE
.39802c	5c 3d 81 39	jmp $39813d	MFILL           JML IMFILL
.398030	5c 3f 81 39	jmp $39813f	MJUMP           JML IMJUMP
.398034	5c 40 81 39	jmp $398140	MHUNT           JML IMHUNT
.398038	5c 41 81 39	jmp $398141	MLOAD           JML IMLOAD
.39803c	5c 42 81 39	jmp $398142	MMEMORY         JML IMMEMORY
.398040	5c 43 81 39	jmp $398143	MREGISTERS      JML IMREGISTERS
.398044	5c 44 81 39	jmp $398144	MSAVE           JML IMSAVE
.398048	5c 45 81 39	jmp $398145	MTRANSFER       JML IMTRANSFER
.39804c	5c 46 81 39	jmp $398146	MVERIFY         JML IMVERIFY
.398050	5c 47 81 39	jmp $398147	MEXIT           JML IMEXIT
.398054	5c 48 81 39	jmp $398148	MMODIFY         JML IMMODIFY
.398058	5c 49 81 39	jmp $398149	MDOS            JML IMDOS
.39805c	18		clc		IMONITOR        CLC           ; clear the carry flag
.39805d	fb		xce		                XCE           ; move carry to emulation flag.
.39805e	c2 20		rep #$20	                REP #$20        ; set A long
.398060	a9 ff fe	lda #$feff	                LDA #STACK_END ; Reset the stack
.398063	1b		tcs		                TAS
.398064	5c 68 80 39	jmp $398068	                JML IMREADY
.398068					IMREADY
.398068	c2 30		rep #$30	                REP #$30        ; set A&X long
.39806a	a9 68 80	lda #$8068	                LDA #<>IMREADY
.39806d	8d e1 ff	sta $ffe1	                STA JMP_READY+1
.398070	e2 20		sep #$20	                SEP #$20        ; set A short
.398072	a9 39		lda #$39	                LDA #`IMREADY
.398074	8d e3 ff	sta $ffe3	                STA JMP_READY+3
.398077	c2 20		rep #$20	                REP #$20        ; set A long
.398079	a9 35 81	lda #$8135	                LDA #<>IMRETURN
.39807c	8d f1 ff	sta $fff1	                STA RETURN+1
.39807f	e2 20		sep #$20	                SEP #$20        ; set A short
.398081	a9 39		lda #$39	                LDA #`IMRETURN
.398083	8d f3 ff	sta $fff3	                STA RETURN+3
.398086	5c 8a 80 39	jmp $39808a	                JML IMSTATUS
.39808a					IMSTATUS
.39808a	48		pha		                PHA             ; begin setdbr macro
.39808b	08		php		                PHP
.39808c	e2 20		sep #$20	                SEP #$20        ; set A short
.39808e	a9 39		lda #$39		            LDA #`mregisters_msg
.398090	48		pha		                PHA
.398091	ab		plb		                PLB
.398092	28		plp		                PLP
.398093	68		pla		                PLA             ; end setdbr macro
.398094	a2 50 81	ldx #$8150	                LDX #<>mregisters_msg
.398097	22 44 06 39	jsl $390644	                JSL IPRINT
.39809b	e2 20		sep #$20	                SEP #$20        ; set A short
.39809d	a9 3b		lda #$3b	                LDA #';'
.39809f	22 64 06 39	jsl $390664	                JSL IPUTC
.3980a3	c2 30		rep #$30	                REP #$30        ; set A&X long
.3980a5	48		pha		                PHA             ; begin setdbr macro
.3980a6	08		php		                PHP
.3980a7	e2 20		sep #$20	                SEP #$20        ; set A short
.3980a9	a9 00		lda #$00		            LDA #$0
.3980ab	48		pha		                PHA
.3980ac	ab		plb		                PLB
.3980ad	28		plp		                PLP
.3980ae	68		pla		                PLA             ; end setdbr macro
.3980af	a0 03 00	ldy #$0003	                LDY #3
.3980b2	a2 42 02	ldx #$0242	                LDX #CPUPC+2
.3980b5	22 92 08 39	jsl $390892	                JSL IPRINTH
.3980b9	a5 20		lda $20		                LDA ' '
.3980bb	22 64 06 39	jsl $390664	                JSL IPUTC
.3980bf	a0 02 00	ldy #$0002	                LDY #2
.3980c2	a2 45 02	ldx #$0245	                LDX #CPUA+1
.3980c5	22 92 08 39	jsl $390892	                JSL IPRINTH
.3980c9	a5 20		lda $20		                LDA ' '
.3980cb	22 64 06 39	jsl $390664	                JSL IPUTC
.3980cf	a0 02 00	ldy #$0002	                LDY #2
.3980d2	a2 47 02	ldx #$0247	                LDX #CPUX+1
.3980d5	22 92 08 39	jsl $390892	                JSL IPRINTH
.3980d9	a5 20		lda $20		                LDA ' '
.3980db	22 64 06 39	jsl $390664	                JSL IPUTC
.3980df	a0 02 00	ldy #$0002	                LDY #2
.3980e2	a2 49 02	ldx #$0249	                LDX #CPUY+1
.3980e5	22 92 08 39	jsl $390892	                JSL IPRINTH
.3980e9	a5 20		lda $20		                LDA ' '
.3980eb	22 64 06 39	jsl $390664	                JSL IPUTC
.3980ef	a0 02 00	ldy #$0002	                LDY #2
.3980f2	a2 4b 02	ldx #$024b	                LDX #CPUSTACK+1
.3980f5	22 92 08 39	jsl $390892	                JSL IPRINTH
.3980f9	a5 20		lda $20		                LDA ' '
.3980fb	22 64 06 39	jsl $390664	                JSL IPUTC
.3980ff	a0 01 00	ldy #$0001	                LDY #1
.398102	a2 4e 02	ldx #$024e	                LDX #CPUDBR
.398105	22 92 08 39	jsl $390892	                JSL IPRINTH
.398109	a5 20		lda $20		                LDA ' '
.39810b	22 64 06 39	jsl $390664	                JSL IPUTC
.39810f	22 64 06 39	jsl $390664	                JSL IPUTC
.398113	a0 02 00	ldy #$0002	                LDY #2
.398116	a2 4d 02	ldx #$024d	                LDX #CPUDP+1
.398119	22 92 08 39	jsl $390892	                JSL IPRINTH
.39811d	a5 20		lda $20		                LDA ' '
.39811f	22 64 06 39	jsl $390664	                JSL IPUTC
.398123	a0 01 00	ldy #$0001	                LDY #1
.398126	a2 4f 02	ldx #$024f	                LDX #CPUFLAGS
.398129	22 92 08 39	jsl $390892	                JSL IPRINTH
.39812d	22 73 07 39	jsl $390773	                JSL IPRINTCR
.398131	5c f2 05 39	jmp $3905f2	                JML IREADYWAIT
.398135	6b		rtl		IMRETURN        RTL ; Handle RETURN key (ie: execute command)
.398136	00		brk #		IMPARSE         BRK ; Parse the current command line
.398137	00		brk #		IMPARSE1        BRK ; Parse one word on the current command line
.398138	00		brk #		IMEXECUTE       BRK ; Execute the current command line (requires MCMD and MARG1-MARG8 to be populated)
.398139	00		brk #		IMASSEMBLE      BRK ; Assemble a line of text.
.39813a	00		brk #		IMASSEMBLEA     BRK ; Assemble a line of text.
.39813b	00		brk #		IMCOMPARE       BRK ; Compare memory. len=1
.39813c	00		brk #		IMDISASSEMBLE   BRK ; Disassemble memory. end=1 instruction
.39813d	00		brk #		IMFILL          BRK ; Fill memory with specified value. Start and end must be in the same bank.
.39813e	00		brk #		IMGO            BRK ; Execute from specified address
.39813f	00		brk #		IMJUMP          BRK ; Execute from spefified address
.398140	00		brk #		IMHUNT          BRK ; Hunt (find) value in memory
.398141	00		brk #		IMLOAD          BRK ; Load data from disk. Device=1 (internal floppy) Start=Address in file
.398142	00		brk #		IMMEMORY        BRK ; View memory
.398143	00		brk #		IMREGISTERS     BRK ; View/edit registers
.398144	00		brk #		IMSAVE          BRK ; Save memory to disk
.398145	00		brk #		IMTRANSFER      BRK ; Transfer (copy) data in memory
.398146	00		brk #		IMVERIFY        BRK ; Verify memory and file on disk
.398147	00		brk #		IMEXIT          BRK ; Exit monitor and return to BASIC command prompt
.398148	00		brk #		IMMODIFY        BRK ; Modify memory
.398149	00		brk #		IMDOS           BRK ; Execute DOS command
.39814a					MMESSAGES
>39814a	45 72 72 6f 72 00		MMERROR         .text "Error", $00
>398150	0d 20 50 43 20 20 20 20		mregisters_msg  .null $0D," PC     A    X    Y    SP   DBR DP   NVMXDIZC"
>398158	20 41 20 20 20 20 58 20 20 20 20 59 20 20 20 20
>398168	53 50 20 20 20 44 42 52 20 44 50 20 20 20 4e 56
>398178	4d 58 44 49 5a 43 00

;******  Return to file: src\kernel.asm


;******  Processing file: src\Interrupt_Handler.asm

.39817f					IRQ_HANDLER
.39817f	e2 20		sep #$20	                SEP #$20        ; set A short
.398181	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.398185	c9 00		cmp #$00	                CMP #$00
.398187	f0 37		beq $3981c0	                BEQ CHECK_PENDING_REG1
.398189	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.39818d	29 01		and #$01	                AND #FNX0_INT00_SOF
.39818f	c9 01		cmp #$01	                CMP #FNX0_INT00_SOF
.398191	d0 09		bne $39819c	                BNE SERVICE_NEXT_IRQ6
.398193	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.398197	20 2a 82	jsr $39822a	                JSR SOF_INTERRUPT
.39819a	e2 20		sep #$20	                SEP #$20        ; set A short
.39819c					SERVICE_NEXT_IRQ6
.39819c	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.3981a0	29 40		and #$40	                AND #FNX0_INT06_FDC
.3981a2	c9 40		cmp #$40	                CMP #FNX0_INT06_FDC
.3981a4	d0 09		bne $3981af	                BNE SERVICE_NEXT_IRQ7
.3981a6	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.3981aa	20 76 82	jsr $398276	                JSR FDC_INTERRUPT
.3981ad	e2 20		sep #$20	                SEP #$20        ; set A short
.3981af					SERVICE_NEXT_IRQ7
.3981af	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.3981b3	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.3981b5	c9 80		cmp #$80	                CMP #FNX0_INT07_MOUSE
.3981b7	d0 07		bne $3981c0	                BNE CHECK_PENDING_REG1
.3981b9	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.3981bd	20 35 82	jsr $398235	                JSR MOUSE_INTERRUPT
.3981c0					CHECK_PENDING_REG1
.3981c0	e2 20		sep #$20	                SEP #$20        ; set A short
.3981c2	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3981c6	c9 00		cmp #$00	                CMP #$00
.3981c8	f0 5d		beq $398227	                BEQ EXIT_IRQ_HANDLE
.3981ca					SERVICE_NEXT_IRQ8
.3981ca	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3981ce	29 01		and #$01	                AND #FNX1_INT00_KBD
.3981d0	c9 01		cmp #$01	                CMP #FNX1_INT00_KBD
.3981d2	d0 09		bne $3981dd	                BNE SERVICE_NEXT_IRQ11
.3981d4	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3981d8	20 44 96	jsr $399644	                JSR KEYBOARD_INTERRUPT
.3981db	e2 20		sep #$20	                SEP #$20        ; set A short
.3981dd					SERVICE_NEXT_IRQ11
.3981dd	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3981e1	29 08		and #$08	                AND #FNX1_INT03_COM2
.3981e3	c9 08		cmp #$08	                CMP #FNX1_INT03_COM2
.3981e5	d0 09		bne $3981f0	                BNE SERVICE_NEXT_IRQ12
.3981e7	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3981eb	20 81 82	jsr $398281	                JSR COM2_INTERRUPT
.3981ee	e2 20		sep #$20	                SEP #$20        ; set A short
.3981f0					SERVICE_NEXT_IRQ12
.3981f0	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3981f4	29 10		and #$10	                AND #FNX1_INT04_COM1
.3981f6	c9 10		cmp #$10	                CMP #FNX1_INT04_COM1
.3981f8	d0 09		bne $398203	                BNE SERVICE_NEXT_IRQ13
.3981fa	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3981fe	20 8c 82	jsr $39828c	                JSR COM1_INTERRUPT
.398201	e2 20		sep #$20	                SEP #$20        ; set A short
.398203					SERVICE_NEXT_IRQ13
.398203	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.398207	29 20		and #$20	                AND #FNX1_INT05_MPU401
.398209	c9 20		cmp #$20	                CMP #FNX1_INT05_MPU401
.39820b	d0 09		bne $398216	                BNE SERVICE_NEXT_IRQ14
.39820d	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.398211	20 97 82	jsr $398297	                JSR MPU401_INTERRUPT
.398214	e2 20		sep #$20	                SEP #$20        ; set A short
.398216					SERVICE_NEXT_IRQ14
.398216	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.39821a	29 40		and #$40	                AND #FNX1_INT06_LPT
.39821c	c9 40		cmp #$40	                CMP #FNX1_INT06_LPT
.39821e	d0 07		bne $398227	                BNE EXIT_IRQ_HANDLE
.398220	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.398224	20 a2 82	jsr $3982a2	                JSR LPT1_INTERRUPT
.398227					EXIT_IRQ_HANDLE
.398227	c2 30		rep #$30	                REP #$30        ; set A&X long
.398229	6b		rtl		                RTL
.39822a					SOF_INTERRUPT
.39822a	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.39822e	29 01		and #$01	                AND #FNX0_INT00_SOF
.398230	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.398234	60		rts		                RTS
.398235					MOUSE_INTERRUPT
.398235	e2 20		sep #$20	                SEP #$20        ; set A short
.398237	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.39823b	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.39823d	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.398241	af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF
.398245	a2 00 00	ldx #$0000	                LDX #$0000
.398248	e2 10		sep #$10	                SEP #$10        ; set X short
.39824a	a6 e0		ldx $e0		                LDX MOUSE_PTR
.39824c	9f 06 07 af	sta $af0706,x	                STA @lMOUSE_PTR_BYTE0, X
.398250	e8		inx		                INX
.398251	e0 03		cpx #$03	                CPX #$03
.398253	d0 1c		bne $398271	                BNE EXIT_FOR_NEXT_VALUE
.398255	af 02 07 af	lda $af0702	                LDA @lMOUSE_PTR_X_POS_L
.398259	85 e1		sta $e1		                STA MOUSE_POS_X_LO
.39825b	af 03 07 af	lda $af0703	                LDA @lMOUSE_PTR_X_POS_H
.39825f	85 e2		sta $e2		                STA MOUSE_POS_X_HI
.398261	af 04 07 af	lda $af0704	                LDA @lMOUSE_PTR_Y_POS_L
.398265	85 e3		sta $e3		                STA MOUSE_POS_Y_LO
.398267	af 05 07 af	lda $af0705	                LDA @lMOUSE_PTR_Y_POS_H
.39826b	85 e4		sta $e4		                STA MOUSE_POS_Y_HI
.39826d	e2 20		sep #$20	                SEP #$20        ; set A short
.39826f	a2 00		ldx #$00	                LDX #$00
.398271					EXIT_FOR_NEXT_VALUE
.398271	86 e0		stx $e0		                STX MOUSE_PTR
.398273	c2 10		rep #$10	                REP #$10        ; set X long
.398275	60		rts		                RTS
.398276					FDC_INTERRUPT
.398276	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.39827a	29 40		and #$40	                AND #FNX0_INT06_FDC
.39827c	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.398280	60		rts		                RTS
.398281					COM2_INTERRUPT
.398281	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.398285	29 08		and #$08	                AND #FNX1_INT03_COM2
.398287	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.39828b	60		rts		                RTS
.39828c					COM1_INTERRUPT
.39828c	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.398290	29 10		and #$10	                AND #FNX1_INT04_COM1
.398292	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.398296	60		rts		                RTS
.398297					MPU401_INTERRUPT
.398297	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.39829b	29 20		and #$20	                AND #FNX1_INT05_MPU401
.39829d	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3982a1	60		rts		                RTS
.3982a2					LPT1_INTERRUPT
.3982a2	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3982a6	29 40		and #$40	                AND #FNX1_INT06_LPT
.3982a8	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3982ac	60		rts		                RTS
.3982ad					NMI_HANDLER
.3982ad	6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\SDOS.asm


;******  Processing file: src\ch376s_inc.asm

=$00					DEF_NULL_CHAR       = $00
=$2a					DEF_WILDCARD_CHAR   = $2A
=$5c					DEF_SEPAR_CHAR1     = $5C
=$2f					DEF_SEPAR_CHAR2     = $2F
=$0a					CH_CMD_RD_VAR8        = $0A     ; Read 8Bit Value
=$0b					CH_CMD_WR_VAR8        = $0B     ; Write 8Bit Value to controller
=$0c					CH_CMD_RD_VAR32       = $0C     ; Read 32Bit Value
=$0d					CH_CMD_WR_VAR32       = $0D
=$15					CH_CMD_SET_MODE       = $15     ; Set the Controller's mode, in our Case in SDCARD
=$22					CH_CMD_GET_STATUS     = $22     ; Get Interrupt Status
=$27					CH_CMD_RD_DATA0       = $27     ;
=$2f					CH_CMD_SET_FILENAME   = $2F     ;SET_FILE_NAME
=$31					CH_CMD_DISK_MOUNT     = $31     ;DISK_MOUNT
=$32					CH_CMD_FILE_OPEN      = $32     ;FILE_OPEN
=$33					CH_CMD_FILE_ENUM_GO   = $33
=$36					CH_CMD_FILE_CLOSE     = $36     ; To be Implemented
=$39					CH_CMD_BYTE_LOCATE    = $39
=$3a					CH_CMD_BYTE_READ      = $3A
=$3b					CH_CMD_BYTE_RD_GO     = $3B
=$3c					CH_CMD_BYTE_WRITE     = $3C
=$3d					CH_CMD_BYTE_WR_GO     = $3D
=$44					CH_VAR_DISK_ROOT		  = $44
=$48					CH_VAR_DSK_TOTAL_CLUS	= $48
=$4c					CH_VAR_DSK_START_LBA	= $4C
=$50					CH_VAR_DSK_DAT_START	= $50
=$54					CH_VAR_LBA_BUFFER		  = $54
=$58					CH_VAR_LBA_CURRENT		= $58
=$5c					CH_VAR_FAT_DIR_LBA		= $5C
=$60					CH_VAR_START_CLUSTER	= $60
=$64					CH_VAR_CURRENT_CLUST	= $64
=$68					CH_VAR_FILE_SIZE		  = $68
=$6c					CH_VAR_CURRENT_OFFSET	= $6C
=$14					CH376S_STAT_SUCCESS  = $14
=$17					CH376S_STAT_BUF_OVF  = $17
=$1d					CH376S_STAT_DSK_RD   = $1D
=$1e					CH376S_STAT_DSK_WR   = $1E
=$41					CH376S_ERR_OPEN_DIR  = $41
=$42					CH376S_ERR_MISS_FIL  = $42
=$43					CH376S_ERR_FND_NAME  = $43
=$82					CH376S_ERR_DISK_DSC  = $82
=$84					CH376S_ERR_LRG_SEC   = $84
=$92					CH376S_ERR_PARTTION  = $92
=$a1					CH376S_ERR_NOT_FORM  = $A1
=$b1					CH376S_ERR_DSK_FULL  = $B1
=$b2					CH376S_FDT_OVER      = $B2
=$b4					CH376S_FILE_CLOSED   = $B4
=$00					SDCARD_PRSNT_NO_CARD = $00
=$01					SDCARD_PRSNT_CD      = $01
=$02					SDCARD_PRSNT_WP      = $02
=$04					SDCARD_PRSNT_MNTED   = $04  ; Card is present and Mounted1

;******  Return to file: src\SDOS.asm

.3982ae	5c 80 84 39	jmp $398480	SDOS_CHECK_CD JML ISDOS_CHK_CD ; Check if Card is Present
.3982b2	5c 8f 84 39	jmp $39848f	SDOS_CHECK_WP JML ISDOS_CHK_WP ; Check if Card is Write Protected
.3982b6	5c ce 82 39	jmp $3982ce	SDOS_INIT     JML ISDOS_INIT
.3982ba	5c 1b 83 39	jmp $39831b	SDOS_DIR      JML ISDOS_DIR
.3982be	5c d5 83 39	jmp $3983d5	SDOS_CHDIR    JML ISDOS_CHDIR
.3982c2	5c d6 83 39	jmp $3983d6	SDOS_LOAD     JML ISDOS_LOAD
.3982c6	5c da 83 39	jmp $3983da	SDOS_SAVE     JML ISDOS_SAVE
.3982ca	5c db 83 39	jmp $3983db	SDOS_EXEC     JML ISDOS_EXEC
.3982ce					ISDOS_INIT
.3982ce	e2 20		sep #$20	                SEP #$20        ; set A short
.3982d0	af 41 01 00	lda $000141	              LDA @lINT_PENDING_REG1  ; Read the Pending Register &
.3982d4	29 7f		and #$7f	              AND #~FNX1_INT07_SDCARD   ; Enable
.3982d6	8f 41 01 00	sta $000141	              STA @lINT_PENDING_REG1
.3982da	a9 06		lda #$06	              LDA #$06
.3982dc	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD
.3982e0	20 51 84	jsr $398451	              JSR DLYCMD_2_DTA
.3982e3	a9 a8		lda #$a8	              LDA #$A8
.3982e5	8f 10 e8 af	sta $afe810	              STA @lSDCARD_DATA
.3982e9	20 56 84	jsr $398456	              JSR DLYDTA_2_DTA
.3982ec	20 56 84	jsr $398456	              JSR DLYDTA_2_DTA
.3982ef	20 56 84	jsr $398456	              JSR DLYDTA_2_DTA
.3982f2	af 10 e8 af	lda $afe810	              LDA @lSDCARD_DATA
.3982f6	20 51 84	jsr $398451	              JSR DLYCMD_2_DTA
.3982f9	a9 15		lda #$15	              LDA #CH_CMD_SET_MODE
.3982fb	8f 11 e8 af	sta $afe811	              STA @lSDCARD_CMD
.3982ff	20 51 84	jsr $398451	              JSR DLYCMD_2_DTA
.398302	20 51 84	jsr $398451	              JSR DLYCMD_2_DTA
.398305	a9 03		lda #$03	              LDA #$03            ; Mode 3 - SDCARD
.398307	8f 10 e8 af	sta $afe810	              STA @lSDCARD_DATA     ; Write the MODE and Wait for around ~10us
.39830b					ISDOS_WAIT_FOR_MODE_SW
.39830b	20 56 84	jsr $398456	              JSR DLYDTA_2_DTA ; Wait 0.6us
.39830e	af 10 e8 af	lda $afe810	              LDA @lSDCARD_DATA
.398312	c9 51		cmp #$51	              CMP #$51   ; CMD_RET_SUCCESS		EQU		051H, CMD_RET_ABORT		EQU		05FH
.398314	d0 f5		bne $39830b	              BNE ISDOS_WAIT_FOR_MODE_SW
.398316	af 10 e8 af	lda $afe810	              LDA @lSDCARD_DATA     ; See the Status Output
.39831a	6b		rtl		              RTL
.39831b					ISDOS_DIR
.39831b	e2 20		sep #$20	                SEP #$20        ; set A short
.39831d	c2 10		rep #$10	                REP #$10        ; set X long
.39831f	20 dc 83	jsr $3983dc	              JSR ISDOS_MOUNT_CARD;     First to See if the Card is Present
.398322	a2 00 00	ldx #$0000	              LDX #$0000
.398325					ISDOS_DIR_TRF
.398325	bf 72 86 39	lda $398672,x	              LDA sd_card_dir_string,X    ; /
.398329	9f 80 03 00	sta $000380,x	              STA @lSDOS_FILE_NAME,X
.39832d	e8		inx		              INX
.39832e	e0 03 00	cpx #$0003	              CPX #$0003
.398331	d0 f2		bne $398325	              BNE ISDOS_DIR_TRF
.398333	20 11 84	jsr $398411	              JSR SDOS_FILE_OPEN         ; Now that the file name is set, go open File
.398336	c9 1d		cmp #$1d	              CMP #CH376S_STAT_DSK_RD
.398338	f0 03		beq $39833d	              BEQ ISDOS_DIR_CONT0
.39833a	82 80 00	brl $3983bd	              BRL ISDOS_MISS_FILE
.39833d					ISDOS_DIR_CONT0
.39833d					ISDOS_NEXT_ENTRY
.39833d	a9 27		lda #$27	              LDA #CH_CMD_RD_DATA0
.39833f	8f 11 e8 af	sta $afe811	              STA @lSDCARD_CMD
.398343	20 51 84	jsr $398451	              JSR DLYCMD_2_DTA;
.398346	af 10 e8 af	lda $afe810	              LDA @lSDCARD_DATA  ;  Load First Data
.39834a	a0 00 00	ldy #$0000	              LDY #$0000
.39834d	a2 00 00	ldx #$0000	              LDX #$0000
.398350	a8		tay		              TAY              ; GET Size (Save in Case we need it)
.398351					ISDOS_DIR_GET_CHAR
.398351	20 56 84	jsr $398456	              JSR DLYDTA_2_DTA ; Wait 0.6us
.398354	af 10 e8 af	lda $afe810	              LDA @lSDCARD_DATA  ;
.398358	22 64 06 39	jsl $390664	              JSL IPUTC        ; Print the character
.39835c	e8		inx		              INX
.39835d	e0 08 00	cpx #$0008	              CPX #$0008
.398360	d0 03		bne $398365	              BNE ISDOS_DIR_CONT1
.398362	20 ce 83	jsr $3983ce	              JSR ISDOS_DISPLAY_DOT
.398365					ISDOS_DIR_CONT1
.398365	e0 0b 00	cpx #$000b	              CPX #$000B          ; the First 11th Character is the file name
.398368	d0 e7		bne $398351	              BNE ISDOS_DIR_GET_CHAR
.39836a	a9 20		lda #$20	              LDA #$20
.39836c	22 64 06 39	jsl $390664	              JSL IPUTC        ; Print the character
.398370	a9 28		lda #$28	              LDA #'('
.398372	22 64 06 39	jsl $390664	              JSL IPUTC        ; Print the character
.398376	af 10 e8 af	lda $afe810	              LDA @lSDCARD_DATA  ;
.39837a	29 10		and #$10	              AND #$10
.39837c	c9 10		cmp #$10	              CMP #$10
.39837e	f0 04		beq $398384	              BEQ ISDOS_DIR_ATTR0
.398380	a9 46		lda #$46	              LDA #'F'
.398382	80 02		bra $398386	              BRA ISDOS_DIR_ATTR1
.398384					ISDOS_DIR_ATTR0
.398384	a9 44		lda #$44	              LDA #'D'
.398386					ISDOS_DIR_ATTR1
.398386	22 64 06 39	jsl $390664	              JSL IPUTC        ; Print the character
.39838a	a9 29		lda #$29	              LDA #')'
.39838c	22 64 06 39	jsl $390664	              JSL IPUTC        ; Print the character
.398390	a9 0d		lda #$0d	              LDA #$0D         ; Carriage Return
.398392	22 64 06 39	jsl $390664	              JSL IPUTC        ; Print the character
.398396					ISDOS_DIR_GET_CHAR_FINISH
.398396	20 56 84	jsr $398456	              JSR DLYDTA_2_DTA ; Wait 0.6us
.398399	af 10 e8 af	lda $afe810	              LDA @lSDCARD_DATA  ; After the name Just empty the buffer
.39839d	e8		inx		              INX
.39839e	e0 20 00	cpx #$0020	              CPX #$0020
.3983a1	d0 f3		bne $398396	              BNE ISDOS_DIR_GET_CHAR_FINISH
.3983a3	20 51 84	jsr $398451	              JSR DLYCMD_2_DTA
.3983a6	a9 33		lda #$33	              LDA #CH_CMD_FILE_ENUM_GO
.3983a8	8f 11 e8 af	sta $afe811	              STA @lSDCARD_CMD
.3983ac	20 5c 84	jsr $39845c	              JSR SDCARD_WAIT_4_INT       ; Go Wait for Interrupt
.3983af	c9 1d		cmp #$1d	              CMP #CH376S_STAT_DSK_RD
.3983b1	f0 8a		beq $39833d	              BEQ ISDOS_NEXT_ENTRY
.3983b3	c9 42		cmp #$42	              CMP #CH376S_ERR_MISS_FIL
.3983b5	d0 06		bne $3983bd	              BNE  ISDOS_MISS_FILE
.3983b7	a2 fd 86	ldx #$86fd	              LDX #<>sd_card_msg5   ; End of File
.3983ba	82 09 00	brl $3983c6	              BRL ISDOS_DIR_DONE
.3983bd					ISDOS_MISS_FILE
.3983bd	a2 88 86	ldx #$8688	              LDX #<>sd_card_err0
.3983c0	82 03 00	brl $3983c6	              BRL ISDOS_DIR_DONE
.3983c3					NO_SDCARD_PRESENT
.3983c3	a2 75 86	ldx #$8675	              LDX #<>sd_no_card_msg
.3983c6					ISDOS_DIR_DONE
.3983c6	22 44 06 39	jsl $390644	              JSL IPRINT       ; print the first line
.3983ca	20 21 84	jsr $398421	              JSR SDOS_FILE_CLOSE
.3983cd	6b		rtl		              RTL;
.3983ce					ISDOS_DISPLAY_DOT
.3983ce	a9 2e		lda #$2e	              LDA #'.'
.3983d0	22 64 06 39	jsl $390664	              JSL IPUTC        ; Print the character
.3983d4	60		rts		              RTS;
.3983d5	00		brk #		ISDOS_CHDIR   BRK;
.3983d6					ISDOS_LOAD
.3983d6	20 fd 84	jsr $3984fd	              JSR SDOS_READ_FILE;
.3983d9	6b		rtl		              RTL;
.3983da	00		brk #		ISDOS_SAVE    BRK;
.3983db	00		brk #		ISDOS_EXEC    BRK;
.3983dc					ISDOS_MOUNT_CARD
.3983dc	e2 20		sep #$20	                SEP #$20        ; set A short
.3983de	c2 10		rep #$10	                REP #$10        ; set X long
.3983e0	a0 00 00	ldy #$0000	              LDY #$0000
.3983e3	a9 01		lda #$01	              LDA #$01
.3983e5	85 3f		sta $3f		              STA SDCARD_PRSNT_MNT        ; Bit[0] = Card Present
.3983e7					TRY_MOUNT_AGAIN
.3983e7	a9 31		lda #$31	              LDA #CH_CMD_DISK_MOUNT      ; If Present, go Mount it.
.3983e9	8f 11 e8 af	sta $afe811	              STA @lSDCARD_CMD              ;
.3983ed	20 5c 84	jsr $39845c	              JSR SDCARD_WAIT_4_INT       ;
.3983f0	c9 14		cmp #$14	              CMP #CH376S_STAT_SUCCESS    ;
.3983f2	f0 09		beq $3983fd	              BEQ ISDOS_MOUNTED
.3983f4	c8		iny		              INY
.3983f5	c0 05 00	cpy #$0005	              CPY #$0005
.3983f8	d0 ed		bne $3983e7	              BNE TRY_MOUNT_AGAIN
.3983fa	4c 04 84	jmp $398404	              JMP SDCARD_ERROR_MOUNT
.3983fd					ISDOS_MOUNTED
.3983fd	a5 3f		lda $3f		              LDA SDCARD_PRSNT_MNT
.3983ff	29 fb		and #$fb	              AND #~SDCARD_PRSNT_MNTED
.398401	09 04		ora #$04	              ORA #SDCARD_PRSNT_MNTED     ; Set Bit to Indicate that is mounted
.398403	60		rts		              RTS
.398404					SDCARD_ERROR_MOUNT
.398404	a2 d8 86	ldx #$86d8	              LDX #<>sd_card_msg3         ; Print Screen the Message "Card Detected"
.398407	22 44 06 39	jsl $390644	              JSL IPRINT       ; print the first line
.39840b	60		rts		              RTS
.39840c	a9 00		lda #$00	ISDOS_NO_CARD LDA #SDCARD_PRSNT_NO_CARD
.39840e	85 3f		sta $3f		              STA SDCARD_PRSNT_MNT
.398410	60		rts		              RTS
.398411					SDOS_FILE_OPEN
.398411	20 34 84	jsr $398434	              JSR SDOS_SET_FILE_NAME ; Make Sure the Pointer to the File Name is properly
.398414	20 51 84	jsr $398451	              JSR DLYCMD_2_DTA
.398417	a9 32		lda #$32	              LDA #CH_CMD_FILE_OPEN ;
.398419	8f 11 e8 af	sta $afe811	              STA @lSDCARD_CMD          ; Go Request to open the File
.39841d	20 5c 84	jsr $39845c	              JSR SDCARD_WAIT_4_INT   ; A Interrupt is Generated, so go polling it
.398420	60		rts		              RTS
.398421					SDOS_FILE_CLOSE
.398421	a9 36		lda #$36	              LDA #CH_CMD_FILE_CLOSE ;
.398423	8f 11 e8 af	sta $afe811	              STA @lSDCARD_CMD          ; Go Request to open the File
.398427	20 51 84	jsr $398451	              JSR DLYCMD_2_DTA
.39842a	a9 00		lda #$00	              LDA #$00                ; FALSE
.39842c	8f 10 e8 af	sta $afe810	              STA @lSDCARD_DATA         ; Store into the Data Register of the CH376s
.398430	20 5c 84	jsr $39845c	              JSR SDCARD_WAIT_4_INT   ; A Interrupt is Generated, so go polling it
.398433	60		rts		              RTS
.398434					SDOS_SET_FILE_NAME
.398434	a9 2f		lda #$2f	              LDA #CH_CMD_SET_FILENAME
.398436	8f 11 e8 af	sta $afe811	              STA @lSDCARD_CMD
.39843a	20 51 84	jsr $398451	              JSR DLYCMD_2_DTA
.39843d	a2 00 00	ldx #$0000	              LDX #$0000
.398440					SDOS_SET_FILE_LOOP
.398440	bf 80 03 00	lda $000380,x	              LDA @lSDOS_FILE_NAME, X   ; This is where the FileName ought to be.
.398444	8f 10 e8 af	sta $afe810	              STA @lSDCARD_DATA         ; Store into the Data Register of the CH376s
.398448	20 56 84	jsr $398456	              JSR DLYDTA_2_DTA
.39844b	e8		inx		              INX
.39844c	c9 00		cmp #$00	              CMP #$00              ; Check end of Line
.39844e	d0 f0		bne $398440	              BNE SDOS_SET_FILE_LOOP
.398450	60		rts		              RTS
.398451					DLYCMD_2_DTA
.398451	ea		nop		              NOP
.398452	ea		nop		              NOP
.398453	ea		nop		              NOP
.398454	ea		nop		              NOP
.398455	ea		nop		              NOP
.398456					DLYDTA_2_DTA
.398456	ea		nop		              NOP
.398457	ea		nop		              NOP
.398458	ea		nop		              NOP
.398459	ea		nop		              NOP
.39845a	ea		nop		              NOP
.39845b	60		rts		              RTS;
.39845c					SDCARD_WAIT_4_INT
.39845c	e2 20		sep #$20	                SEP #$20        ; set A short
.39845e					SDCARD_BUSY_INT
.39845e	af 41 01 00	lda $000141	              LDA @lINT_PENDING_REG1  ; Check to See if the Pending Register for the SD_INT is Set
.398462	29 80		and #$80	              AND #FNX1_INT07_SDCARD  ;
.398464	c9 80		cmp #$80	              CMP #FNX1_INT07_SDCARD
.398466	d0 f6		bne $39845e	              BNE SDCARD_BUSY_INT   ; Go Check again to see if it is checked
.398468	8f 41 01 00	sta $000141	              STA @lINT_PENDING_REG1    ;Interrupt as occured, clear the Pending Register for next time.
.39846c	20 51 84	jsr $398451	              JSR DLYCMD_2_DTA ;
.39846f	20 51 84	jsr $398451	              JSR DLYCMD_2_DTA ;
.398472	a9 22		lda #$22	              LDA #CH_CMD_GET_STATUS
.398474	8f 11 e8 af	sta $afe811	              STA @lSDCARD_CMD;
.398478	20 51 84	jsr $398451	              JSR DLYCMD_2_DTA;   ; 1.5us Delay to get the Value Return
.39847b	af 10 e8 af	lda $afe810	              LDA @lSDCARD_DATA;
.39847f	60		rts		              RTS           ;
.398480					ISDOS_CHK_CD
.398480	e2 20		sep #$20	                SEP #$20        ; set A short
.398482	18		clc		              CLC
.398483	af 12 e8 af	lda $afe812	              LDA SDCARD_STAT;  BIT[0] = Cd, BIT[1] = WP
.398487	29 01		and #$01	              AND #$01
.398489	c9 01		cmp #$01	              CMP #$01
.39848b	f0 01		beq $39848e	              BEQ SDCD_NOT_PRST;
.39848d	38		sec		              SEC
.39848e	60		rts		SDCD_NOT_PRST RTS
.39848f					ISDOS_CHK_WP
.39848f	e2 20		sep #$20	                SEP #$20        ; set A short
.398491	18		clc		              CLC
.398492	af 12 e8 af	lda $afe812	              LDA SDCARD_STAT;  BIT[0] = Cd, BIT[1] = WP
.398496	29 02		and #$02	              AND #$02
.398498	d0 01		bne $39849b	              BNE SDCD_NOT_WP;
.39849a	38		sec		              SEC
.39849b	60		rts		SDCD_NOT_WP   RTS
.39849c					ISDOS_GET_FILE_SIZE
.39849c	e2 20		sep #$20	                SEP #$20        ; set A short
.39849e	a9 0c		lda #$0c	              LDA #CH_CMD_RD_VAR32
.3984a0	8f 11 e8 af	sta $afe811	              STA @lSDCARD_CMD;
.3984a4	20 51 84	jsr $398451	              JSR DLYCMD_2_DTA;   ; 3us Delay to get the Value Return
.3984a7	a9 68		lda #$68	              LDA #CH_VAR_FILE_SIZE
.3984a9	8f 10 e8 af	sta $afe810	              STA @lSDCARD_DATA;
.3984ad	20 51 84	jsr $398451	              JSR DLYCMD_2_DTA
.3984b0	af 10 e8 af	lda $afe810	              LDA @lSDCARD_DATA         ;LSB First
.3984b4	8f 28 03 00	sta $000328	              STA @lSDOS_FILE_SIZE+0
.3984b8	8f 20 01 00	sta $000120	              STA @lADDER32_A_LL;     ; Store in ADDER32 REgister A
.3984bc	20 56 84	jsr $398456	              JSR DLYDTA_2_DTA
.3984bf	af 10 e8 af	lda $afe810	              LDA @lSDCARD_DATA
.3984c3	8f 29 03 00	sta $000329	              STA @lSDOS_FILE_SIZE+1
.3984c7	8f 21 01 00	sta $000121	              STA @lADDER32_A_LH;     ; Store in ADDER32 REgister A
.3984cb	20 56 84	jsr $398456	              JSR DLYDTA_2_DTA
.3984ce	af 10 e8 af	lda $afe810	              LDA @lSDCARD_DATA
.3984d2	8f 2a 03 00	sta $00032a	              STA @lSDOS_FILE_SIZE+2
.3984d6	8f 22 01 00	sta $000122	              STA @lADDER32_A_HL;     ; Store in ADDER32 REgister A
.3984da	20 56 84	jsr $398456	              JSR DLYDTA_2_DTA
.3984dd	af 10 e8 af	lda $afe810	              LDA @lSDCARD_DATA
.3984e1	8f 2b 03 00	sta $00032b	              STA @lSDOS_FILE_SIZE+3   ;MSB Last
.3984e5	8f 23 01 00	sta $000123	              STA @lADDER32_A_HH;     ; Store in ADDER32 REgister A
.3984e9	20 56 84	jsr $398456	              JSR DLYDTA_2_DTA
.3984ec	af 28 01 00	lda $000128	              LDA @lADDER32_R_LL;
.3984f0	af 29 01 00	lda $000129	              LDA @lADDER32_R_LH;
.3984f4	af 2a 01 00	lda $00012a	              LDA @lADDER32_R_HL;
.3984f8	af 2b 01 00	lda $00012b	              LDA @lADDER32_R_HH;
.3984fc	60		rts		              RTS
.3984fd					SDOS_READ_FILE
.3984fd	c2 30		rep #$30	                REP #$30        ; set A&X long
.3984ff	20 0a 86	jsr $39860a	              JSR SDOS_SETUP_ADDER_B;
.398502	e2 20		sep #$20	                SEP #$20        ; set A short
.398504	20 11 84	jsr $398411	              JSR SDOS_FILE_OPEN
.398507	c9 14		cmp #$14	              CMP #CH376S_STAT_SUCCESS ; if the file open successfully, let's go on.
.398509	f0 03		beq $39850e	              BEQ SDOS_READ_FILE_KEEP_GOING
.39850b	82 91 00	brl $39859f	              BRL SDOS_READ_END
.39850e					SDOS_READ_FILE_KEEP_GOING
.39850e	a2 0c 87	ldx #$870c	              LDX #<>sd_card_msg6         ; Print Screen the Message "FILE FOUND, LOADING..."
.398511	22 44 06 39	jsl $390644	              JSL IPRINT       ; print the first line
.398515	20 9c 84	jsr $39849c	              JSR ISDOS_GET_FILE_SIZE   ; Get the File Size in 32Bits
.398518	c2 20		rep #$20	                REP #$20        ; set A long
.39851a	20 2e 86	jsr $39862e	              JSR SDOS_SETUP_CH376S_BUFFER_SIZE;
.39851d	a9 00 00	lda #$0000	              LDA #$0000
.398520	8f 3c 00 00	sta $00003c	              STA @lSDCARD_BYTE_NUM; Just make sure the High Part of the Size is Zero
.398524	8f 34 03 00	sta $000334	              STA @lSDOS_BYTE_PTR   ; Clear the Byte Pointer 32 Bytes Register
.398528	8f 36 03 00	sta $000336	              STA @lSDOS_BYTE_PTR+2 ; This is to Relocated the Pointer after you passed the 64K Boundary
.39852c	e2 20		sep #$20	                SEP #$20        ; set A short
.39852e					SDOS_READ_FILE_GO_FETCH_A_NEW_64KBlock
.39852e	a9 3a		lda #$3a	              LDA #CH_CMD_BYTE_READ
.398530	8f 11 e8 af	sta $afe811	              STA @lSDCARD_CMD;
.398534	20 51 84	jsr $398451	              JSR DLYCMD_2_DTA;   ; 3us Delay to get the Value Return
.398537	af 2c 03 00	lda $00032c	              LDA @lSDOS_BYTE_NUMBER
.39853b	8f 10 e8 af	sta $afe810	              STA @lSDCARD_DATA
.39853f	20 56 84	jsr $398456	              JSR DLYDTA_2_DTA;   ; 1.5us Delay to get the Value Return
.398542	af 2d 03 00	lda $00032d	              LDA @lSDOS_BYTE_NUMBER+1
.398546	8f 10 e8 af	sta $afe810	              STA @lSDCARD_DATA
.39854a	20 5c 84	jsr $39845c	              JSR SDCARD_WAIT_4_INT
.39854d	c9 1d		cmp #$1d	              CMP #CH376S_STAT_DSK_RD ;
.39854f	f0 03		beq $398554	              BEQ SDOS_READ_FILE_GO_FETCH_A_NEW_BLOCK
.398551	82 4b 00	brl $39859f	              BRL SDOS_READ_END
.398554					SDOS_READ_FILE_GO_FETCH_A_NEW_BLOCK
.398554	20 4d 86	jsr $39864d	              JSR SDOS_READ_BLOCK
.398557	a9 3b		lda #$3b	              LDA #CH_CMD_BYTE_RD_GO
.398559	8f 11 e8 af	sta $afe811	              STA @lSDCARD_CMD
.39855d	20 5c 84	jsr $39845c	              JSR SDCARD_WAIT_4_INT
.398560	c9 1d		cmp #$1d	              CMP #CH376S_STAT_DSK_RD ;
.398562	d0 05		bne $398569	              BNE SDOS_READ_PROC_DONE
.398564	20 a9 85	jsr $3985a9	              JSR SDOS_ADJUST_POINTER  ; Go Adjust the Address
.398567	80 eb		bra $398554	              BRA SDOS_READ_FILE_GO_FETCH_A_NEW_BLOCK
.398569					SDOS_READ_PROC_DONE
.398569	c2 20		rep #$20	                REP #$20        ; set A long
.39856b	af 2c 03 00	lda $00032c	              LDA @lSDOS_BYTE_NUMBER  ; Load the Previously number of Byte
.39856f	c9 ff ff	cmp #$ffff	              CMP #$FFFF
.398572	d0 24		bne $398598	              BNE SDOS_READ_DONE1                  ; if it equal 64K, then the file is bugger than 64K
.398574	af 28 01 00	lda $000128	              LDA @lADDER32_R_LL
.398578	8f 20 01 00	sta $000120	              STA @lADDER32_A_LL
.39857c	af 2a 01 00	lda $00012a	              LDA @lADDER32_R_HL
.398580	8f 22 01 00	sta $000122	              STA @lADDER32_A_HL
.398584	20 2e 86	jsr $39862e	              JSR SDOS_SETUP_CH376S_BUFFER_SIZE ;
.398587	20 f0 85	jsr $3985f0	              JSR SDOS_COMPUTE_LOCATE_POINTER
.39858a	e2 20		sep #$20	                SEP #$20        ; set A short
.39858c	20 bb 85	jsr $3985bb	              JSR SDOS_BYTE_LOCATE    ; Apply the new location for the CH376S
.39858f	20 5c 84	jsr $39845c	              JSR SDCARD_WAIT_4_INT
.398592	c9 14		cmp #$14	              CMP #CH376S_STAT_SUCCESS ;
.398594	d0 09		bne $39859f	              BNE SDOS_READ_END
.398596	80 96		bra $39852e	              BRA SDOS_READ_FILE_GO_FETCH_A_NEW_64KBlock ; Let's go fetch a new block of 64K or less
.398598					SDOS_READ_DONE1
.398598	a9 00		lda #$00	              LDA #$00
.39859a	a2 23 87	ldx #$8723	              LDX #<>sd_card_msg7         ; Print Screen the Message "FILE LOADED"
.39859d	80 05		bra $3985a4	              BRA SDOS_READ_PROC_DONE1
.39859f					SDOS_READ_END
.39859f	a9 ff		lda #$ff	              LDA #$FF
.3985a1	a2 9e 86	ldx #$869e	              LDX #<>sd_card_err1         ;"ERROR LOADING FILE"
.3985a4					SDOS_READ_PROC_DONE1
.3985a4	22 44 06 39	jsl $390644	              JSL IPRINT       ; print the first line
.3985a8	60		rts		              RTS;
.3985a9					SDOS_ADJUST_POINTER
.3985a9	c2 20		rep #$20	                REP #$20        ; set A long
.3985ab	18		clc		              CLC
.3985ac	a5 38		lda $38		              LDA SDCARD_FILE_PTR ;Load the Pointer
.3985ae	65 3c		adc $3c		              ADC SDCARD_BYTE_NUM
.3985b0	85 38		sta $38		              STA SDCARD_FILE_PTR;
.3985b2	e2 20		sep #$20	                SEP #$20        ; set A short
.3985b4	a5 3a		lda $3a		              LDA SDCARD_FILE_PTR+2;
.3985b6	69 00		adc #$00	              ADC #$00          ; This is just add up the Carry
.3985b8	85 3a		sta $3a		              STA SDCARD_FILE_PTR+2;
.3985ba					SDOS_ADJ_DONE
.3985ba	60		rts		              RTS
.3985bb					SDOS_BYTE_LOCATE
.3985bb	e2 20		sep #$20	                SEP #$20        ; set A short
.3985bd	a9 39		lda #$39	              LDA #CH_CMD_BYTE_LOCATE
.3985bf	8f 11 e8 af	sta $afe811	              STA @lSDCARD_CMD
.3985c3	20 51 84	jsr $398451	              JSR DLYCMD_2_DTA
.3985c6	af 34 03 00	lda $000334	              LDA @lSDOS_BYTE_PTR
.3985ca	8f 10 e8 af	sta $afe810	              STA @lSDCARD_DATA
.3985ce	20 56 84	jsr $398456	              JSR DLYDTA_2_DTA
.3985d1	af 35 03 00	lda $000335	              LDA @lSDOS_BYTE_PTR+1
.3985d5	8f 10 e8 af	sta $afe810	              STA @lSDCARD_DATA
.3985d9	20 56 84	jsr $398456	              JSR DLYDTA_2_DTA
.3985dc	af 36 03 00	lda $000336	              LDA @lSDOS_BYTE_PTR+2
.3985e0	8f 10 e8 af	sta $afe810	              STA @lSDCARD_DATA
.3985e4	20 56 84	jsr $398456	              JSR DLYDTA_2_DTA
.3985e7	af 37 03 00	lda $000337	              LDA @lSDOS_BYTE_PTR+3
.3985eb	8f 10 e8 af	sta $afe810	              STA @lSDCARD_DATA
.3985ef	60		rts		              RTS
.3985f0					SDOS_COMPUTE_LOCATE_POINTER
.3985f0	c2 20		rep #$20	                REP #$20        ; set A long
.3985f2	18		clc		              CLC
.3985f3	af 34 03 00	lda $000334	              LDA @lSDOS_BYTE_PTR ; $00330
.3985f7	69 ff ff	adc #$ffff	              ADC #$FFFF
.3985fa	8f 34 03 00	sta $000334	              STA @lSDOS_BYTE_PTR
.3985fe	af 36 03 00	lda $000336	              LDA @lSDOS_BYTE_PTR+2
.398602	69 00 00	adc #$0000	              ADC #$0000          ; this is to Add the Carry
.398605	8f 36 03 00	sta $000336	              STA @lSDOS_BYTE_PTR+2
.398609	60		rts		              RTS
.39860a					SDOS_SETUP_ADDER_B
.39860a	c2 20		rep #$20	                REP #$20        ; set A long
.39860c	a9 01 00	lda #$0001	              LDA #$0001
.39860f	8f 24 01 00	sta $000124	              STA @lADDER32_B_LL
.398613	a9 ff ff	lda #$ffff	              LDA #$FFFF
.398616	8f 26 01 00	sta $000126	              STA @lADDER32_B_HL
.39861a	60		rts		              RTS
.39861b					SDOS_LOAD_ADDER_A_WITH_SIZE
.39861b	c2 20		rep #$20	                REP #$20        ; set A long
.39861d	af 28 03 00	lda $000328	              LDA @lSDOS_FILE_SIZE;
.398621	8f 20 01 00	sta $000120	              STA @lADDER32_A_LL;
.398625	af 2a 03 00	lda $00032a	              LDA @lSDOS_FILE_SIZE+2;
.398629	8f 22 01 00	sta $000122	              STA @lADDER32_A_HL;
.39862d	60		rts		              RTS
.39862e					SDOS_SETUP_CH376S_BUFFER_SIZE
.39862e	c2 20		rep #$20	                REP #$20        ; set A long
.398630	af 2a 01 00	lda $00012a	              LDA  @lADDER32_R_HL
.398634	29 00 80	and #$8000	              AND #$8000          ; Check if it is negative
.398637	c9 00 80	cmp #$8000	              CMP #$8000          ; if it is then just put the Size of the file in ByteNumber
.39863a	f0 08		beq $398644	              BEQ SDOS_SETUP_SMALLR_THAN64K
.39863c	a9 ff ff	lda #$ffff	              LDA #$FFFF
.39863f	8f 2c 03 00	sta $00032c	              STA @lSDOS_BYTE_NUMBER
.398643	60		rts		              RTS
.398644					SDOS_SETUP_SMALLR_THAN64K
.398644	af 20 01 00	lda $000120	              LDA @lADDER32_A_LL
.398648	8f 2c 03 00	sta $00032c	              STA @lSDOS_BYTE_NUMBER
.39864c	60		rts		              RTS
.39864d					SDOS_READ_BLOCK
.39864d	e2 20		sep #$20	                SEP #$20        ; set A short
.39864f	a9 27		lda #$27	              LDA #CH_CMD_RD_DATA0
.398651	8f 11 e8 af	sta $afe811	              STA @lSDCARD_CMD;
.398655	20 51 84	jsr $398451	              JSR DLYCMD_2_DTA;   ; 3us Delay to get the Value Return
.398658	af 10 e8 af	lda $afe810	              LDA @lSDCARD_DATA     ; Read First Byte for Number of Byte to Read
.39865c	85 3c		sta $3c		              STA SDCARD_BYTE_NUM  ; Store the Number of byte to be read
.39865e	20 56 84	jsr $398456	              JSR DLYDTA_2_DTA;   ; 3us Delay to get the Value Return
.398661	a0 00 00	ldy #$0000	              LDY #$0000
.398664					SDOS_READ_MORE
.398664	af 10 e8 af	lda $afe810	              LDA @lSDCARD_DATA
.398668	97 38		sta [$38],y	              STA [SDCARD_FILE_PTR], Y        ; Store Block Data Sector Begin
.39866a	c8		iny		              INY
.39866b	c4 3c		cpy $3c		              CPY SDCARD_BYTE_NUM
.39866d	d0 f5		bne $398664	              BNE SDOS_READ_MORE
.39866f	a5 3c		lda $3c		              LDA SDCARD_BYTE_NUM  ; Reload the Number of Byte Read
.398671	60		rts		              RTS
>398672	2f 2a 00			sd_card_dir_string  .text $2F, $2A ,$00
>398675	4e 4f 20 53 44 43 41 52		sd_no_card_msg      .text "NO SDCARD PRESENT", $0D, $00
>39867d	44 20 50 52 45 53 45 4e 54 0d 00
>398688	45 52 52 4f 52 20 49 4e		sd_card_err0        .text "ERROR IN READIND CARD", $00
>398690	20 52 45 41 44 49 4e 44 20 43 41 52 44 00
>39869e	45 52 52 4f 52 20 4c 4f		sd_card_err1        .text "ERROR LOADING FILE", $00
>3986a6	41 44 49 4e 47 20 46 49 4c 45 00
>3986b1	4e 61 6d 65 3a 20 0d 00		sd_card_msg0        .text "Name: ", $0D,$00
>3986b9	53 44 43 41 52 44 20 44		sd_card_msg1        .text "SDCARD DETECTED", $00
>3986c1	45 54 45 43 54 45 44 00
>3986c9	53 44 43 41 52 44 20 4d		sd_card_msg2        .text "SDCARD MOUNTED", $00
>3986d1	4f 55 4e 54 45 44 00
>3986d8	46 41 49 4c 45 44 20 54		sd_card_msg3        .text "FAILED TO MOUNT SDCARD", $0D, $00
>3986e0	4f 20 4d 4f 55 4e 54 20 53 44 43 41 52 44 0d 00
>3986f0	46 49 4c 45 20 4f 50 45		sd_card_msg4        .text "FILE OPENED", $0D, $00
>3986f8	4e 45 44 0d 00
>3986fd	45 4e 44 20 4f 46 20 4c		sd_card_msg5        .text "END OF LINE...", $00
>398705	49 4e 45 2e 2e 2e 00
>39870c	46 49 4c 45 20 46 4f 55		sd_card_msg6        .text "FILE FOUND, LOADING...", $00
>398714	4e 44 2c 20 4c 4f 41 44 49 4e 47 2e 2e 2e 00
>398723	46 49 4c 45 20 4c 4f 41		sd_card_msg7        .text "FILE LOADED", $00
>39872b	44 45 44 00

;******  Return to file: src\kernel.asm


;******  Processing file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_def.asm

=$afe500				OPL2_L_BASE               = $AFE500
=$afe501				OPL2_L_TEST               = $AFE501 ; TEST
=$afe502				OPL2_L_TIMER1             = $AFE502 ; TIMER-1
=$afe503				OPL2_L_TIMER2             = $AFE503 ; TIMER-2
=$afe504				OPL2_L_IRQ                = $AFE504 ;
=$afe508				OPL2_L_CSM                = $AFE508 ;
=$afe520				OPL2_L_AM_VID_EG_KSR_MULT = $AFE520 ; $40..$35 (21 Registers)
=$afee40				OPL2_L_KSL_TL             = $AFEE40;  $40..$55 (21 Registers)
=$afe560				OPL2_L_AR_DR              = $AFE560;  $60..$75 (21 Registers)
=$afe580				OPL2_L_SL_RR              = $AFE580;  $80..$95 (21 Registers)
=$afe5a0				OPL2_L_FNumber            = $AFE5A0;  $A0..$A8
=$afe5b0				OPL2_L_KON_BLOCK_FNumber  = $AFE5B0;  $B0..$B9
=$afe5bd				OPL2_L_DPTH_RHYTM         = $AFE5BD;  $BD
=$afe5c0				OPL2_L_FEEDBACK           = $AFE5C0;  $C0..$C9
=$afe5e0				OPL2_L_WAVE_SELECT        = $AFE5E0;  $E0..$F5
=$afe600				OPL2_R_BASE               = $AFE600
=$afe601				OPL2_R_TEST               = $AFE601 ; TEST
=$afe602				OPL2_R_TIMER1             = $AFE602 ; TIMER-1
=$afe603				OPL2_R_TIMER2             = $AFE603 ; TIMER-2
=$afe604				OPL2_R_IRQ                = $AFE604 ;
=$afe608				OPL2_R_CSM                = $AFE608 ;
=$afe620				OPL2_R_AM_VID_EG_KSR_MULT = $AFE620 ; $40..$35 (21 Registers)
=$afe640				OPL2_R_KSL_TL             = $AFE640;  $40..$55 (21 Registers)
=$afe660				OPL2_R_AR_DR              = $AFE660;  $60..$75 (21 Registers)
=$afe680				OPL2_R_SL_RR              = $AFE680;  $80..$95 (21 Registers)
=$afe6a0				OPL2_R_FNumber            = $AFE6A0;  $A0..$A8
=$afe6b0				OPL2_R_KON_BLOCK_FNumber  = $AFE6B0;  $B0..$B9
=$afe6bd				OPL2_R_DPTH_RHYTM         = $AFE6BD;  $BD
=$afe6c0				OPL2_R_FEEDBACK           = $AFE6C0;  $C0..$C9
=$afe6e0				OPL2_R_WAVE_SELECT        = $AFE6E0;  $E0..$F5
=$e700					OPL2_S_BASE_LL            = $E700
=$00af					OPL2_S_BASE_HL            = $00AF
=$afe701				OPL2_S_TEST               = $AFE701 ; TEST
=$afe702				OPL2_S_TIMER1             = $AFE702 ; TIMER-1
=$afe703				OPL2_S_TIMER2             = $AFE703 ; TIMER-2
=$afe704				OPL2_S_IRQ                = $AFE704 ;
=$afe708				OPL2_S_CSM                = $AFE708 ;
=$afe720				OPL2_S_AM_VID_EG_KSR_MULT = $AFE720 ; $20..$35 (21 Registers)
=$afe740				OPL2_S_KSL_TL             = $AFE740;  $40..$55 (21 Registers)
=$afe760				OPL2_S_AR_DR              = $AFE760;  $60..$75 (21 Registers)
=$afe780				OPL2_S_SL_RR              = $AFE780;  $80..$95 (21 Registers)
=$afe7a0				OPL2_S_FNumber            = $AFE7A0;  $A0..$A8
=$afe7b0				OPL2_S_KON_BLOCK_FNumber  = $AFE7B0;  $B0..$B9
=$afe7bd				OPL2_S_DPTH_RHYTM         = $AFE7BD;  $BD
=$afe7c0				OPL2_S_FEEDBACK           = $AFE7C0;  $C0..$C9
=$afe7e0				OPL2_S_WAVE_SELECT        = $AFE7E0;  $E0..$F5
=9					OPL2_NUM_CHANNELS = 9
=0					OPERATOR1 = 0
=1					OPERATOR2 = 1
=0					MODULATOR = 0
=1					CARRIER = 1
=0					FREQ_MODULATION = 0
=1					ADDITIVE_SYNTH  = 1
=$10					DRUM_BASS   = $10
=$08					DRUM_SNARE  = $08
=$04					DRUM_TOM    = $04
=$02					DRUM_CYMBAL = $02
=$01					DRUM_HI_HAT = $01
=0					NOTE_C =    0
=1					NOTE_CS =   1
=2					NOTE_D =    2
=3					NOTE_DS =   3
=4					NOTE_E =    4
=5					NOTE_F =    5
=6					NOTE_FS =   6
=7					NOTE_G =    7
=8					NOTE_GS =   8
=9					NOTE_A =    9
=10					NOTE_AS =  10
=11					NOTE_B =   11
>39872f	6b 01 81 01 98 01 b0 01		noteFNumbers    .word  $016B, $0181, $0198, $01B0, $01CA, $01E5, $0202, $0220, $0241, $0263, $0287, $02AE
>398737	ca 01 e5 01 02 02 20 02 41 02 63 02 87 02 ae 02
>398747	00 01 02 08 09 0a 10 11		registerOffsets_operator0 .byte $00, $01, $02, $08, $09, $0A, $10, $11, $12 ;initializers for operator 1 */
>39874f	12
>398750	03 04 05 0b 0c 0d 13 14		registerOffsets_operator1 .byte $03, $04, $05, $0B, $0C, $0D, $13, $14, $15 ;initializers for operator 2 */
>398758	15
>398759	10 13 14 12 15 11		drumOffsets               .byte $10, $13, $14, $12, $15, $11
>39875f	10 08 04 02 01			drumBits                  .byte $10, $08, $04, $02, $01
>398764	20 40 60 80 e0 c0		instrumentBaseRegs        .byte $20, $40, $60, $80, $E0, $C0

;******  Return to file: src\OPL2_Library.asm

.39876a					IOPL2_TONE_TEST
.39876a	e2 20		sep #$20	                SEP #$20        ; set A short
.39876c	a9 01		lda #$01	              LDA #$01
.39876e	85 26		sta $26		              STA OPL2_OPERATOR
.398770	c2 30		rep #$30	                REP #$30        ; set A&X long
.398772	22 ea 87 39	jsl $3987ea	              JSL OPL2_INIT
.398776	e2 20		sep #$20	                SEP #$20        ; set A short
.398778	a9 00		lda #$00	              LDA #$00
.39877a	85 36		sta $36		              STA OPL2_LOOP
.39877c					OPL2_TONE_TESTING_L0
.39877c	e2 20		sep #$20	                SEP #$20        ; set A short
.39877e	a5 36		lda $36		              LDA OPL2_LOOP
.398780	85 27		sta $27		              STA OPL2_CHANNEL
.398782	38		sec		              SEC
.398783	22 6e 8b 39	jsl $398b6e	              JSL OPL2_SET_TREMOLO
.398787	38		sec		              SEC
.398788	22 9f 8b 39	jsl $398b9f	              JSL OPL2_SET_VIBRATO
.39878c	a9 04		lda #$04	              LDA #$04
.39878e	85 32		sta $32		              STA OPL2_PARAMETER0
.398790	22 43 8c 39	jsl $398c43	              JSL OPL2_SET_MULTIPLIER
.398794	a9 0a		lda #$0a	              LDA #$0A
.398796	85 32		sta $32		              STA OPL2_PARAMETER0
.398798	22 ab 8c 39	jsl $398cab	              JSL OPL2_SET_ATTACK
.39879c	a9 04		lda #$04	              LDA #$04
.39879e	85 32		sta $32		              STA OPL2_PARAMETER0
.3987a0	22 df 8c 39	jsl $398cdf	              JSL OPL2_SET_DECAY
.3987a4	a9 0f		lda #$0f	              LDA #$0F
.3987a6	85 32		sta $32		              STA OPL2_PARAMETER0
.3987a8	22 0b 8d 39	jsl $398d0b	              JSL OPL2_SET_SUSTAIN
.3987ac	a9 0f		lda #$0f	              LDA #$0F
.3987ae	85 32		sta $32		              STA OPL2_PARAMETER0
.3987b0	22 3f 8d 39	jsl $398d3f	              JSL OPL2_SET_RELEASE
.3987b4	e2 20		sep #$20	                SEP #$20        ; set A short
.3987b6	e6 36		inc $36		              INC OPL2_LOOP
.3987b8	a5 36		lda $36		              LDA OPL2_LOOP
.3987ba	c9 03		cmp #$03	              CMP #$03
.3987bc	d0 be		bne $39877c	              BNE OPL2_TONE_TESTING_L0
.3987be	a9 00		lda #$00	              LDA #$00
.3987c0	85 36		sta $36		              STA OPL2_LOOP
.3987c2					OPL2_TONE_TESTING_L1
.3987c2	85 30		sta $30		              STA OPL2_NOTE
.3987c4	29 03		and #$03	              AND #$03        ; replace modulo 3
.3987c6	85 27		sta $27		              STA OPL2_CHANNEL
.3987c8	a9 03		lda #$03	              LDA #$03
.3987ca	85 31		sta $31		              STA OPL2_OCTAVE
.3987cc	22 2c 89 39	jsl $39892c	              JSL OPL2_PLAYNOTE
.3987d0	e2 20		sep #$20	                SEP #$20        ; set A short
.3987d2	c2 10		rep #$10	                REP #$10        ; set X long
.3987d4	a2 00 00	ldx #$0000	              LDX #$0000
.3987d7					OPL2_TONE_TESTING_L2
.3987d7	ea		nop		              NOP
.3987d8	ea		nop		              NOP
.3987d9	ea		nop		              NOP
.3987da	ea		nop		              NOP
.3987db	e8		inx		              INX
.3987dc	e0 ff ff	cpx #$ffff	              CPX #$FFFF
.3987df	d0 f6		bne $3987d7	              BNE OPL2_TONE_TESTING_L2
.3987e1	e6 36		inc $36		              INC OPL2_LOOP
.3987e3	a5 36		lda $36		              LDA OPL2_LOOP
.3987e5	c9 0c		cmp #$0c	              CMP #12
.3987e7	d0 d9		bne $3987c2	              BNE OPL2_TONE_TESTING_L1
.3987e9	6b		rtl		              RTL
.3987ea					OPL2_INIT
.3987ea	c2 20		rep #$20	                REP #$20        ; set A long
.3987ec	a9 00 00	lda #$0000	              LDA #$0000
.3987ef	85 28		sta $28		              STA OPL2_REG_REGION
.3987f1	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.3987f3	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3987f5	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3987f7	85 30		sta $30		              STA OPL2_NOTE
.3987f9	85 32		sta $32		              STA OPL2_PARAMETER0
.3987fb	85 34		sta $34		              STA OPL2_PARAMETER2
.3987fd	6b		rtl		              RTL
.3987fe					OPL2_Reset
.3987fe	6b		rtl		              RTL
.3987ff					OPL2_Get_FrequencyBlock
.3987ff	6b		rtl		              RTL
.398800					OPL2_GET_REGISTER
.398800	c2 20		rep #$20	                REP #$20        ; set A long
.398802	18		clc		              CLC
.398803	a9 00 e7	lda #$e700	              LDA #OPL2_S_BASE_LL
.398806	65 32		adc $32		              ADC OPL2_PARAMETER0
.398808	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39880a	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.39880d	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39880f	e2 20		sep #$20	                SEP #$20        ; set A short
.398811	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398813	6b		rtl		              RTL
.398814					OPL2_GET_WAVEFORM_SELECT
.398814	c2 20		rep #$20	                REP #$20        ; set A long
.398816	a9 00 e7	lda #$e700	              LDA #OPL2_S_BASE_LL
.398819	69 01 00	adc #$0001	              ADC #$0001
.39881c	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39881e	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.398821	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.398823	e2 20		sep #$20	                SEP #$20        ; set A short
.398825	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398827	29 20		and #$20	              AND #$20
.398829	6b		rtl		              RTL
.39882a					OPL2_GET_SCALINGLEVEL
.39882a	c2 20		rep #$20	                REP #$20        ; set A long
.39882c	a9 40 00	lda #$0040	              LDA #$0040  ;
.39882f	85 28		sta $28		              STA OPL2_REG_REGION
.398831	20 38 8f	jsr $398f38	              JSR OPL2_GET_REG_OFFSET
.398834	e2 20		sep #$20	                SEP #$20        ; set A short
.398836	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398838	29 c0		and #$c0	              AND #$C0
.39883a	4a		lsr a		              LSR A
.39883b	4a		lsr a		              LSR A
.39883c	4a		lsr a		              LSR A
.39883d	4a		lsr a		              LSR A
.39883e	4a		lsr a		              LSR A
.39883f	4a		lsr a		              LSR A
.398840	6b		rtl		              RTL
.398841					OPL2_GET_BLOCK
.398841	e2 20		sep #$20	                SEP #$20        ; set A short
.398843	18		clc		              CLC
.398844	a5 27		lda $27		              LDA OPL2_CHANNEL
.398846	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.398848	69 b0		adc #$b0	              ADC #$B0
.39884a	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.39884c	a9 00		lda #$00	              LDA #$00
.39884e	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.398850	c2 30		rep #$30	                REP #$30        ; set A&X long
.398852	18		clc		              CLC
.398853	a9 00 e7	lda #$e700	              LDA #OPL2_S_BASE_LL
.398856	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.398858	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39885a	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.39885d	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39885f	e2 20		sep #$20	                SEP #$20        ; set A short
.398861	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398863	29 1c		and #$1c	              AND #$1C
.398865	4a		lsr a		              LSR A
.398866	4a		lsr a		              LSR A
.398867	6b		rtl		              RTL
.398868					OPL2_GET_KEYON
.398868	e2 20		sep #$20	                SEP #$20        ; set A short
.39886a	18		clc		              CLC
.39886b	a5 27		lda $27		              LDA OPL2_CHANNEL
.39886d	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.39886f	69 b0		adc #$b0	              ADC #$B0
.398871	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.398873	a9 00		lda #$00	              LDA #$00
.398875	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.398877	c2 30		rep #$30	                REP #$30        ; set A&X long
.398879	18		clc		              CLC
.39887a	a9 00 e7	lda #$e700	              LDA #OPL2_S_BASE_LL
.39887d	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.39887f	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.398881	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.398884	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.398886	e2 20		sep #$20	                SEP #$20        ; set A short
.398888	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39888a	29 20		and #$20	              AND #$20
.39888c	6b		rtl		              RTL
.39888d					OPL2_GET_FEEDBACK
.39888d	e2 20		sep #$20	                SEP #$20        ; set A short
.39888f	18		clc		              CLC
.398890	a5 27		lda $27		              LDA OPL2_CHANNEL
.398892	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.398894	69 c0		adc #$c0	              ADC #$C0
.398896	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.398898	a9 00		lda #$00	              LDA #$00
.39889a	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.39889c	c2 30		rep #$30	                REP #$30        ; set A&X long
.39889e	18		clc		              CLC
.39889f	a9 00 e7	lda #$e700	              LDA #OPL2_S_BASE_LL
.3988a2	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.3988a4	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3988a6	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.3988a9	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3988ab	e2 20		sep #$20	                SEP #$20        ; set A short
.3988ad	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3988af	29 e0		and #$e0	              AND #$E0
.3988b1	4a		lsr a		              LSR
.3988b2	6b		rtl		              RTL
.3988b3					OPL2_GET_SYNTHMODE
.3988b3	e2 20		sep #$20	                SEP #$20        ; set A short
.3988b5	18		clc		              CLC
.3988b6	a5 27		lda $27		              LDA OPL2_CHANNEL
.3988b8	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.3988ba	69 c0		adc #$c0	              ADC #$C0
.3988bc	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.3988be	a9 00		lda #$00	              LDA #$00
.3988c0	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.3988c2	c2 30		rep #$30	                REP #$30        ; set A&X long
.3988c4	18		clc		              CLC
.3988c5	a9 00 e7	lda #$e700	              LDA #OPL2_S_BASE_LL
.3988c8	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.3988ca	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3988cc	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.3988cf	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3988d1	e2 20		sep #$20	                SEP #$20        ; set A short
.3988d3	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3988d5	29 01		and #$01	              AND #$01
.3988d7	6b		rtl		              RTL
.3988d8					OPL2_GET_DEEPTREMOLO
.3988d8	c2 20		rep #$20	                REP #$20        ; set A long
.3988da	a9 bd 00	lda #$00bd	              LDA #$00BD;
.3988dd	85 28		sta $28		              STA OPL2_REG_REGION
.3988df	20 38 8f	jsr $398f38	              JSR OPL2_GET_REG_OFFSET
.3988e2	e2 20		sep #$20	                SEP #$20        ; set A short
.3988e4	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3988e6	29 80		and #$80	              AND #$80
.3988e8	6b		rtl		              RTL
.3988e9					OPL2_GET_DEEPVIBRATO
.3988e9	c2 20		rep #$20	                REP #$20        ; set A long
.3988eb	a9 00 e7	lda #$e700	              LDA #OPL2_S_BASE_LL
.3988ee	69 bd 00	adc #$00bd	              ADC #$00BD
.3988f1	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3988f3	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.3988f6	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3988f8	e2 20		sep #$20	                SEP #$20        ; set A short
.3988fa	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3988fc	29 40		and #$40	              AND #$40
.3988fe	6b		rtl		              RTL
.3988ff					OPL2_GET_PERCUSSION
.3988ff	c2 20		rep #$20	                REP #$20        ; set A long
.398901	a9 00 e7	lda #$e700	              LDA #OPL2_S_BASE_LL
.398904	69 bd 00	adc #$00bd	              ADC #$00BD
.398907	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.398909	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.39890c	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39890e	e2 20		sep #$20	                SEP #$20        ; set A short
.398910	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398912	29 20		and #$20	              AND #$20
.398914	6b		rtl		              RTL
.398915					OPL2_GET_DRUMS
.398915	c2 20		rep #$20	                REP #$20        ; set A long
.398917	a9 00 e7	lda #$e700	              LDA #OPL2_S_BASE_LL
.39891a	69 bd 00	adc #$00bd	              ADC #$00BD
.39891d	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39891f	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.398922	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.398924	e2 20		sep #$20	                SEP #$20        ; set A short
.398926	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398928	29 1f		and #$1f	              AND #$1F
.39892a	6b		rtl		              RTL
.39892b					OPL2_Get_WaveForm
.39892b	6b		rtl		              RTL
.39892c					OPL2_PLAYNOTE
.39892c	e2 20		sep #$20	                SEP #$20        ; set A short
.39892e	a9 00		lda #$00	              LDA #$00
.398930	85 32		sta $32		              STA OPL2_PARAMETER0 ; Set Keyon False
.398932	20 08 8e	jsr $398e08	              JSR OPL2_SET_KEYON
.398935	a5 30		lda $30		              LDA OPL2_NOTE    ;Divide Note/12
.398937	8d 08 01	sta $0108	              STA D0_OPERAND_A
.39893a	a9 00		lda #$00	              LDA #$00
.39893c	8d 09 01	sta $0109	              STA D0_OPERAND_A+1
.39893f	8d 0b 01	sta $010b	              STA D0_OPERAND_B+1
.398942	a9 0c		lda #$0c	              LDA #$0C
.398944	8d 0a 01	sta $010a	              STA D0_OPERAND_B
.398947	18		clc		              CLC
.398948	a5 31		lda $31		              LDA OPL2_OCTAVE
.39894a	6d 0c 01	adc $010c	              ADC D0_RESULT
.39894d	85 31		sta $31		              STA OPL2_OCTAVE
.39894f	20 d7 8d	jsr $398dd7	              JSR OPL2_SET_BLOCK  ; OPL2_SET_BLOCK Already to OPL2_OCTAVE
.398952	c2 20		rep #$20	                REP #$20        ; set A long
.398954	18		clc		              CLC
.398955	a5 30		lda $30		              LDA OPL2_NOTE
.398957	29 ff 00	and #$00ff	              AND #$00FF
.39895a	6d 0e 01	adc $010e	              ADC D0_REMAINDER    ; Remainder of the Division Modulo
.39895d	0a		asl a		              ASL A ;<<<<<<<<<<<<<<<<<<<<<<<<<
.39895e	aa		tax		              TAX
.39895f	bf 2f 87 39	lda $39872f,x	              LDA @lnoteFNumbers,X
.398963	85 32		sta $32		              STA OPL2_PARAMETER0 ; Store the 16bit in Param OPL2_PARAMETER0 & OPL2_PARAMETER1
.398965	22 6b 8d 39	jsl $398d6b	              JSL OPL2_SET_FNUMBER
.398969	e2 20		sep #$20	                SEP #$20        ; set A short
.39896b	a9 01		lda #$01	              LDA #$01
.39896d	85 32		sta $32		              STA OPL2_PARAMETER0 ; Set Keyon False
.39896f	20 08 8e	jsr $398e08	              JSR OPL2_SET_KEYON
.398972	c2 10		rep #$10	                REP #$10        ; set X long
.398974	6b		rtl		              RTL
.398975					OPL2_PLAYDRUM
.398975	6b		rtl		              RTL
.398976					OPL2_SET_INSTRUMENT
.398976	38		sec		              SEC ; Set the WaveFormSelect to True
.398977	22 50 8b 39	jsl $398b50	              JSL OPL2_SET_WAVEFORMSELECT;
.39897b	e2 20		sep #$20	                SEP #$20        ; set A short
.39897d	c2 10		rep #$10	                REP #$10        ; set X long
.39897f	a0 00 00	ldy #$0000	              LDY #$0000
.398982	a2 00 00	ldx #$0000	              LDX #$0000
.398985	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO],Y ; Pointer Location 0 in Instrument Profile
.398987	85 35		sta $35		              STA OPL2_PARAMETER3
.398989	c8		iny		              INY
.39898a	c9 06		cmp #$06	              CMP #$06
.39898c	d0 03		bne $398991	              BNE PERCUSSION_NEXT07
.39898e	82 70 01	brl $398b01	              BRL Percussion_6
.398991					PERCUSSION_NEXT07
.398991	c9 07		cmp #$07	              CMP #$07
.398993	d0 03		bne $398998	              BNE PERCUSSION_NEXT08
.398995	82 44 01	brl $398adc	              BRL Percussion_7
.398998					PERCUSSION_NEXT08
.398998	c9 08		cmp #$08	              CMP #$08
.39899a	d0 03		bne $39899f	              BNE PERCUSSION_NEXT09
.39899c	82 18 01	brl $398ab7	              BRL Percussion_8
.39899f					PERCUSSION_NEXT09
.39899f	c9 09		cmp #$09	              CMP #$09
.3989a1	d0 03		bne $3989a6	              BNE PERCUSSION_NEXT0A
.3989a3	82 ec 00	brl $398a92	              BRL Percussion_9
.3989a6					PERCUSSION_NEXT0A
.3989a6	c9 0a		cmp #$0a	              CMP #$0A
.3989a8	d0 03		bne $3989ad	              BNE Percussion_Default
.3989aa	82 c0 00	brl $398a6d	              BRL Percussion_A
.3989ad					Percussion_Default
.3989ad	a9 00		lda #$00	              LDA #$00
.3989af	85 26		sta $26		              STA OPL2_OPERATOR
.3989b1	c2 20		rep #$20	                REP #$20        ; set A long
.3989b3	a9 20 00	lda #$0020	              LDA #$0020;
.3989b6	85 28		sta $28		              STA OPL2_REG_REGION
.3989b8	20 38 8f	jsr $398f38	              JSR OPL2_GET_REG_OFFSET
.3989bb	e2 20		sep #$20	                SEP #$20        ; set A short
.3989bd	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.3989bf	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3989c1	c8		iny		              INY
.3989c2	c2 20		rep #$20	                REP #$20        ; set A long
.3989c4	a9 40 00	lda #$0040	              LDA #$0040;
.3989c7	85 28		sta $28		              STA OPL2_REG_REGION
.3989c9	20 38 8f	jsr $398f38	              JSR OPL2_GET_REG_OFFSET
.3989cc	e2 20		sep #$20	                SEP #$20        ; set A short
.3989ce	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.3989d0	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3989d2	c8		iny		              INY
.3989d3	c2 20		rep #$20	                REP #$20        ; set A long
.3989d5	a9 60 00	lda #$0060	              LDA #$0060;
.3989d8	85 28		sta $28		              STA OPL2_REG_REGION
.3989da	20 38 8f	jsr $398f38	              JSR OPL2_GET_REG_OFFSET
.3989dd	e2 20		sep #$20	                SEP #$20        ; set A short
.3989df	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.3989e1	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3989e3	c8		iny		              INY
.3989e4	c2 20		rep #$20	                REP #$20        ; set A long
.3989e6	a9 80 00	lda #$0080	              LDA #$0080;
.3989e9	85 28		sta $28		              STA OPL2_REG_REGION
.3989eb	20 38 8f	jsr $398f38	              JSR OPL2_GET_REG_OFFSET
.3989ee	e2 20		sep #$20	                SEP #$20        ; set A short
.3989f0	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.3989f2	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3989f4	c8		iny		              INY
.3989f5	c2 20		rep #$20	                REP #$20        ; set A long
.3989f7	a9 e0 00	lda #$00e0	              LDA #$00E0;
.3989fa	85 28		sta $28		              STA OPL2_REG_REGION
.3989fc	20 38 8f	jsr $398f38	              JSR OPL2_GET_REG_OFFSET
.3989ff	e2 20		sep #$20	                SEP #$20        ; set A short
.398a01	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.398a03	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398a05	c8		iny		              INY
.398a06	e2 10		sep #$10	                SEP #$10        ; set X short
.398a08	a5 27		lda $27		              LDA OPL2_CHANNEL
.398a0a	29 0f		and #$0f	              AND #$0F
.398a0c	aa		tax		              TAX
.398a0d	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 6 in Instrument Profile
.398a0f	9f c0 e6 af	sta $afe6c0,x	              STA @lOPL2_R_FEEDBACK,X
.398a13	c8		iny		              INY
.398a14	a9 01		lda #$01	              LDA #$01
.398a16	85 26		sta $26		              STA OPL2_OPERATOR
.398a18	c2 20		rep #$20	                REP #$20        ; set A long
.398a1a	a9 20 00	lda #$0020	              LDA #$0020;
.398a1d	85 28		sta $28		              STA OPL2_REG_REGION
.398a1f	20 38 8f	jsr $398f38	              JSR OPL2_GET_REG_OFFSET
.398a22	e2 20		sep #$20	                SEP #$20        ; set A short
.398a24	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 7 in Instrument Profile
.398a26	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398a28	c8		iny		              INY
.398a29	c2 20		rep #$20	                REP #$20        ; set A long
.398a2b	a9 40 00	lda #$0040	              LDA #$0040;
.398a2e	85 28		sta $28		              STA OPL2_REG_REGION
.398a30	20 38 8f	jsr $398f38	              JSR OPL2_GET_REG_OFFSET
.398a33	e2 20		sep #$20	                SEP #$20        ; set A short
.398a35	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 8 in Instrument Profile
.398a37	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398a39	c8		iny		              INY
.398a3a	c2 20		rep #$20	                REP #$20        ; set A long
.398a3c	a9 60 00	lda #$0060	              LDA #$0060;
.398a3f	85 28		sta $28		              STA OPL2_REG_REGION
.398a41	20 38 8f	jsr $398f38	              JSR OPL2_GET_REG_OFFSET
.398a44	e2 20		sep #$20	                SEP #$20        ; set A short
.398a46	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 9 in Instrument Profile
.398a48	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398a4a	c8		iny		              INY
.398a4b	c2 20		rep #$20	                REP #$20        ; set A long
.398a4d	a9 80 00	lda #$0080	              LDA #$0080;
.398a50	85 28		sta $28		              STA OPL2_REG_REGION
.398a52	20 38 8f	jsr $398f38	              JSR OPL2_GET_REG_OFFSET
.398a55	e2 20		sep #$20	                SEP #$20        ; set A short
.398a57	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location A in Instrument Profile
.398a59	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398a5b	c8		iny		              INY
.398a5c	c2 20		rep #$20	                REP #$20        ; set A long
.398a5e	a9 e0 00	lda #$00e0	              LDA #$00E0;
.398a61	85 28		sta $28		              STA OPL2_REG_REGION
.398a63	20 38 8f	jsr $398f38	              JSR OPL2_GET_REG_OFFSET
.398a66	e2 20		sep #$20	                SEP #$20        ; set A short
.398a68	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location B in Instrument Profile
.398a6a	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398a6c	6b		rtl		              RTL
.398a6d					Percussion_A
.398a6d	e2 20		sep #$20	                SEP #$20        ; set A short
.398a6f	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.398a71	8f 31 e7 af	sta $afe731	              STA @lOPL2_S_AM_VID_EG_KSR_MULT + $11
.398a75	c8		iny		              INY
.398a76	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.398a78	8f 51 e7 af	sta $afe751	              STA @lOPL2_S_KSL_TL + $11
.398a7c	c8		iny		              INY
.398a7d	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.398a7f	8f 71 e7 af	sta $afe771	              STA @lOPL2_S_AR_DR + $11
.398a83	c8		iny		              INY
.398a84	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.398a86	8f 91 e7 af	sta $afe791	              STA @lOPL2_S_SL_RR + $11
.398a8a	c8		iny		              INY
.398a8b	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.398a8d	8f f1 e7 af	sta $afe7f1	              STA @lOPL2_S_WAVE_SELECT + $11
.398a91	6b		rtl		              RTL
.398a92					Percussion_9
.398a92	e2 20		sep #$20	                SEP #$20        ; set A short
.398a94	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.398a96	8f 35 e7 af	sta $afe735	              STA @lOPL2_S_AM_VID_EG_KSR_MULT + $15
.398a9a	c8		iny		              INY
.398a9b	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.398a9d	8f 55 e7 af	sta $afe755	              STA @lOPL2_S_KSL_TL + $15
.398aa1	c8		iny		              INY
.398aa2	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.398aa4	8f 75 e7 af	sta $afe775	              STA @lOPL2_S_AR_DR + $15
.398aa8	c8		iny		              INY
.398aa9	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.398aab	8f 95 e7 af	sta $afe795	              STA @lOPL2_S_SL_RR + $15
.398aaf	c8		iny		              INY
.398ab0	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.398ab2	8f f5 e7 af	sta $afe7f5	              STA @lOPL2_S_WAVE_SELECT + $15
.398ab6	6b		rtl		              RTL
.398ab7					Percussion_8
.398ab7	e2 20		sep #$20	                SEP #$20        ; set A short
.398ab9	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.398abb	8f 32 e7 af	sta $afe732	              STA @lOPL2_S_AM_VID_EG_KSR_MULT + $12
.398abf	c8		iny		              INY
.398ac0	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.398ac2	8f 52 e7 af	sta $afe752	              STA @lOPL2_S_KSL_TL + $12
.398ac6	c8		iny		              INY
.398ac7	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.398ac9	8f 72 e7 af	sta $afe772	              STA @lOPL2_S_AR_DR + $12
.398acd	c8		iny		              INY
.398ace	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.398ad0	8f 92 e7 af	sta $afe792	              STA @lOPL2_S_SL_RR + $12
.398ad4	c8		iny		              INY
.398ad5	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.398ad7	8f f2 e7 af	sta $afe7f2	              STA @lOPL2_S_WAVE_SELECT + $12
.398adb	6b		rtl		              RTL
.398adc					Percussion_7
.398adc	e2 20		sep #$20	                SEP #$20        ; set A short
.398ade	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.398ae0	8f 34 e7 af	sta $afe734	              STA @lOPL2_S_AM_VID_EG_KSR_MULT + $14
.398ae4	c8		iny		              INY
.398ae5	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.398ae7	8f 54 e7 af	sta $afe754	              STA @lOPL2_S_KSL_TL + $14
.398aeb	c8		iny		              INY
.398aec	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.398aee	8f 74 e7 af	sta $afe774	              STA @lOPL2_S_AR_DR + $14
.398af2	c8		iny		              INY
.398af3	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.398af5	8f 94 e7 af	sta $afe794	              STA @lOPL2_S_SL_RR + $14
.398af9	c8		iny		              INY
.398afa	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.398afc	8f f4 e7 af	sta $afe7f4	              STA @lOPL2_S_WAVE_SELECT + $14
.398b00	6b		rtl		              RTL
.398b01					Percussion_6
.398b01	e2 20		sep #$20	                SEP #$20        ; set A short
.398b03	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.398b05	8f 30 e7 af	sta $afe730	              STA @lOPL2_S_AM_VID_EG_KSR_MULT + $10
.398b09	8f 33 e7 af	sta $afe733	              STA @lOPL2_S_AM_VID_EG_KSR_MULT + $13
.398b0d	c8		iny		              INY
.398b0e	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.398b10	8f 50 e7 af	sta $afe750	              STA @lOPL2_S_KSL_TL + $10
.398b14	8f 53 e7 af	sta $afe753	              STA @lOPL2_S_KSL_TL + $13
.398b18	c8		iny		              INY
.398b19	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.398b1b	8f 70 e7 af	sta $afe770	              STA @lOPL2_S_AR_DR + $10
.398b1f	8f 73 e7 af	sta $afe773	              STA @lOPL2_S_AR_DR + $13
.398b23	c8		iny		              INY
.398b24	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.398b26	8f 90 e7 af	sta $afe790	              STA @lOPL2_S_SL_RR + $10
.398b2a	8f 93 e7 af	sta $afe793	              STA @lOPL2_S_SL_RR + $13
.398b2e	c8		iny		              INY
.398b2f	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.398b31	8f f0 e7 af	sta $afe7f0	              STA @lOPL2_S_WAVE_SELECT + $10
.398b35	8f f3 e7 af	sta $afe7f3	              STA @lOPL2_S_WAVE_SELECT + $13
.398b39	6b		rtl		              RTL
.398b3a					OPL2_SET_REGISTER
.398b3a	c2 20		rep #$20	                REP #$20        ; set A long
.398b3c	18		clc		              CLC
.398b3d	a9 00 e7	lda #$e700	              LDA #OPL2_S_BASE_LL
.398b40	65 32		adc $32		              ADC OPL2_PARAMETER0
.398b42	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.398b44	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.398b47	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.398b49	e2 20		sep #$20	                SEP #$20        ; set A short
.398b4b	a5 33		lda $33		              LDA OPL2_PARAMETER1
.398b4d	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398b4f	6b		rtl		              RTL
.398b50					OPL2_SET_WAVEFORMSELECT
.398b50	c2 20		rep #$20	                REP #$20        ; set A long
.398b52	a9 01 e7	lda #$e701	              LDA #OPL2_S_BASE_LL + $0001
.398b55	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.398b57	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.398b5a	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.398b5c	e2 20		sep #$20	                SEP #$20        ; set A short
.398b5e	b0 07		bcs $398b67	              BCS OPL2_Set_WaveFormSelect_set
.398b60	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398b62	29 df		and #$df	              AND #$DF
.398b64	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398b66	6b		rtl		              RTL
.398b67					OPL2_Set_WaveFormSelect_set
.398b67	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398b69	09 20		ora #$20	              ORA #$20
.398b6b	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398b6d	6b		rtl		              RTL
.398b6e					OPL2_SET_TREMOLO
.398b6e	08		php		              PHP ; Push the Carry
.398b6f	c2 20		rep #$20	                REP #$20        ; set A long
.398b71	18		clc		              CLC
.398b72	a9 20 00	lda #$0020	              LDA #$0020;
.398b75	85 28		sta $28		              STA OPL2_REG_REGION
.398b77	20 38 8f	jsr $398f38	              JSR OPL2_GET_REG_OFFSET
.398b7a	28		plp		              PLP ; Pull the Carry out
.398b7b	e2 20		sep #$20	                SEP #$20        ; set A short
.398b7d	b0 08		bcs $398b87	              BCS OPL2_Set_Tremolo_Set;
.398b7f	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398b81	29 7f		and #$7f	              AND #$7F
.398b83	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398b85	80 06		bra $398b8d	              BRA OPL2_Set_Tremolo_Exit
.398b87					OPL2_Set_Tremolo_Set
.398b87	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398b89	09 80		ora #$80	              ORA #$80
.398b8b	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398b8d					OPL2_Set_Tremolo_Exit
.398b8d	6b		rtl		              RTL
.398b8e					OPL2_GET_TREMOLO
.398b8e	c2 20		rep #$20	                REP #$20        ; set A long
.398b90	a9 20 00	lda #$0020	              LDA #$0020;
.398b93	85 28		sta $28		              STA OPL2_REG_REGION
.398b95	20 38 8f	jsr $398f38	              JSR OPL2_GET_REG_OFFSET
.398b98	e2 20		sep #$20	                SEP #$20        ; set A short
.398b9a	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398b9c	29 80		and #$80	              AND #$80
.398b9e	6b		rtl		              RTL
.398b9f					OPL2_SET_VIBRATO
.398b9f	08		php		              PHP ; Push the Carry
.398ba0	c2 20		rep #$20	                REP #$20        ; set A long
.398ba2	18		clc		              CLC
.398ba3	a9 20 00	lda #$0020	              LDA #$0020;
.398ba6	85 28		sta $28		              STA OPL2_REG_REGION
.398ba8	20 38 8f	jsr $398f38	              JSR OPL2_GET_REG_OFFSET
.398bab	28		plp		              PLP ; Pull the Carry out
.398bac	e2 20		sep #$20	                SEP #$20        ; set A short
.398bae	b0 08		bcs $398bb8	              BCS OPL2_Set_Vibrato_Set;
.398bb0	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398bb2	29 bf		and #$bf	              AND #$BF
.398bb4	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398bb6	80 06		bra $398bbe	              BRA OPL2_Set_Vibrato_Exit
.398bb8					OPL2_Set_Vibrato_Set
.398bb8	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398bba	09 40		ora #$40	              ORA #$40
.398bbc	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398bbe					OPL2_Set_Vibrato_Exit
.398bbe	6b		rtl		              RTL
.398bbf					OPL2_GET_VIBRATO
.398bbf	c2 20		rep #$20	                REP #$20        ; set A long
.398bc1	a9 20 00	lda #$0020	              LDA #$0020;
.398bc4	85 28		sta $28		              STA OPL2_REG_REGION
.398bc6	20 38 8f	jsr $398f38	              JSR OPL2_GET_REG_OFFSET
.398bc9	e2 20		sep #$20	                SEP #$20        ; set A short
.398bcb	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398bcd	29 40		and #$40	              AND #$40
.398bcf	6b		rtl		              RTL
.398bd0					OPL2_SET_MAINTAINSUSTAIN
.398bd0	08		php		              PHP ; Push the Carry
.398bd1	c2 20		rep #$20	                REP #$20        ; set A long
.398bd3	18		clc		              CLC
.398bd4	a9 20 00	lda #$0020	              LDA #$0020;
.398bd7	85 28		sta $28		              STA OPL2_REG_REGION
.398bd9	20 38 8f	jsr $398f38	              JSR OPL2_GET_REG_OFFSET
.398bdc	28		plp		              PLP ; Pull the Carry out
.398bdd	e2 20		sep #$20	                SEP #$20        ; set A short
.398bdf	b0 08		bcs $398be9	              BCS OPL2_Set_MaintainSustain_Set;
.398be1	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398be3	29 df		and #$df	              AND #$DF
.398be5	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398be7	80 06		bra $398bef	              BRA OPL2_Set_MaintainSustain_Exit
.398be9					OPL2_Set_MaintainSustain_Set
.398be9	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398beb	09 20		ora #$20	              ORA #$20
.398bed	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398bef					OPL2_Set_MaintainSustain_Exit
.398bef	6b		rtl		              RTL
.398bf0					OPL2_GET_MAINTAINSUSTAIN
.398bf0	c2 20		rep #$20	                REP #$20        ; set A long
.398bf2	a9 20 00	lda #$0020	              LDA #$0020;
.398bf5	85 28		sta $28		              STA OPL2_REG_REGION
.398bf7	20 38 8f	jsr $398f38	              JSR OPL2_GET_REG_OFFSET
.398bfa	e2 20		sep #$20	                SEP #$20        ; set A short
.398bfc	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398bfe	29 20		and #$20	              AND #$20
.398c00	6b		rtl		              RTL
.398c01					OPL2_SET_ENVELOPESCALING
.398c01	08		php		              PHP ; Push the Carry
.398c02	c2 20		rep #$20	                REP #$20        ; set A long
.398c04	18		clc		              CLC
.398c05	a9 20 00	lda #$0020	              LDA #$0020;
.398c08	85 28		sta $28		              STA OPL2_REG_REGION
.398c0a	20 38 8f	jsr $398f38	              JSR OPL2_GET_REG_OFFSET
.398c0d	28		plp		              PLP ; Pull the Carry out
.398c0e	e2 20		sep #$20	                SEP #$20        ; set A short
.398c10	b0 08		bcs $398c1a	              BCS OPL2_Set_EnvelopeScaling_Set;
.398c12	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398c14	29 ef		and #$ef	              AND #$EF
.398c16	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398c18	80 06		bra $398c20	              BRA OPL2_Set_EnvelopeScaling_Exit
.398c1a					OPL2_Set_EnvelopeScaling_Set
.398c1a	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398c1c	09 10		ora #$10	              ORA #$10
.398c1e	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398c20					OPL2_Set_EnvelopeScaling_Exit
.398c20	6b		rtl		              RTL
.398c21					OPL2_GET_ENVELOPESCALING
.398c21	c2 20		rep #$20	                REP #$20        ; set A long
.398c23	a9 20 00	lda #$0020	              LDA #$0020;
.398c26	85 28		sta $28		              STA OPL2_REG_REGION
.398c28	20 38 8f	jsr $398f38	              JSR OPL2_GET_REG_OFFSET
.398c2b	e2 20		sep #$20	                SEP #$20        ; set A short
.398c2d	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398c2f	29 10		and #$10	              AND #$10
.398c31	6b		rtl		              RTL
.398c32					OPL2_GET_MULTIPLIER
.398c32	c2 20		rep #$20	                REP #$20        ; set A long
.398c34	a9 20 00	lda #$0020	              LDA #$0020;
.398c37	85 28		sta $28		              STA OPL2_REG_REGION
.398c39	20 38 8f	jsr $398f38	              JSR OPL2_GET_REG_OFFSET
.398c3c	e2 20		sep #$20	                SEP #$20        ; set A short
.398c3e	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398c40	29 0f		and #$0f	              AND #$0F
.398c42	6b		rtl		              RTL
.398c43					OPL2_SET_MULTIPLIER
.398c43	c2 20		rep #$20	                REP #$20        ; set A long
.398c45	a9 20 00	lda #$0020	              LDA #$0020;
.398c48	85 28		sta $28		              STA OPL2_REG_REGION
.398c4a	20 38 8f	jsr $398f38	              JSR OPL2_GET_REG_OFFSET
.398c4d	e2 20		sep #$20	                SEP #$20        ; set A short
.398c4f	a5 32		lda $32		              LDA OPL2_PARAMETER0
.398c51	29 0f		and #$0f	              AND #$0F
.398c53	85 32		sta $32		              STA OPL2_PARAMETER0
.398c55	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398c57	29 f0		and #$f0	              AND #$F0
.398c59	05 32		ora $32		              ORA OPL2_PARAMETER0
.398c5b	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398c5d	6b		rtl		              RTL
.398c5e					OPL2_SET_SCALINGLEVEL
.398c5e	c2 20		rep #$20	                REP #$20        ; set A long
.398c60	a9 40 00	lda #$0040	              LDA #$0040;
.398c63	85 28		sta $28		              STA OPL2_REG_REGION
.398c65	20 38 8f	jsr $398f38	              JSR OPL2_GET_REG_OFFSET
.398c68	e2 20		sep #$20	                SEP #$20        ; set A short
.398c6a	a5 32		lda $32		              LDA OPL2_PARAMETER0 ; Attack
.398c6c	29 03		and #$03	              AND #$03
.398c6e	0a		asl a		              ASL
.398c6f	0a		asl a		              ASL
.398c70	0a		asl a		              ASL
.398c71	0a		asl a		              ASL
.398c72	0a		asl a		              ASL
.398c73	0a		asl a		              ASL
.398c74	85 32		sta $32		              STA OPL2_PARAMETER0
.398c76	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398c78	29 3f		and #$3f	              AND #$3F
.398c7a	05 32		ora $32		              ORA OPL2_PARAMETER0
.398c7c	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398c7e	6b		rtl		              RTL
.398c7f					OPL2_SET_VOLUME
.398c7f	c2 20		rep #$20	                REP #$20        ; set A long
.398c81	a9 40 00	lda #$0040	              LDA #$0040  ;
.398c84	85 28		sta $28		              STA OPL2_REG_REGION
.398c86	20 38 8f	jsr $398f38	              JSR OPL2_GET_REG_OFFSET
.398c89	e2 20		sep #$20	                SEP #$20        ; set A short
.398c8b	a5 32		lda $32		              LDA OPL2_PARAMETER0 ; Volume
.398c8d	29 3f		and #$3f	              AND #$3F
.398c8f	85 32		sta $32		              STA OPL2_PARAMETER0
.398c91	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398c93	29 c0		and #$c0	              AND #$C0
.398c95	05 32		ora $32		              ORA OPL2_PARAMETER0
.398c97	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398c99	6b		rtl		              RTL
.398c9a					OPL2_GET_VOLUME
.398c9a	c2 20		rep #$20	                REP #$20        ; set A long
.398c9c	a9 40 00	lda #$0040	              LDA #$0040  ;
.398c9f	85 28		sta $28		              STA OPL2_REG_REGION
.398ca1	20 38 8f	jsr $398f38	              JSR OPL2_GET_REG_OFFSET
.398ca4	e2 20		sep #$20	                SEP #$20        ; set A short
.398ca6	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398ca8	29 3f		and #$3f	              AND #$3F
.398caa	6b		rtl		              RTL
.398cab					OPL2_SET_ATTACK
.398cab	c2 20		rep #$20	                REP #$20        ; set A long
.398cad	a9 60 00	lda #$0060	              LDA #$0060  ;
.398cb0	85 28		sta $28		              STA OPL2_REG_REGION
.398cb2	20 38 8f	jsr $398f38	              JSR OPL2_GET_REG_OFFSET
.398cb5	e2 20		sep #$20	                SEP #$20        ; set A short
.398cb7	a5 32		lda $32		              LDA OPL2_PARAMETER0 ; Attack
.398cb9	29 0f		and #$0f	              AND #$0F
.398cbb	0a		asl a		              ASL
.398cbc	0a		asl a		              ASL
.398cbd	0a		asl a		              ASL
.398cbe	0a		asl a		              ASL
.398cbf	85 32		sta $32		              STA OPL2_PARAMETER0
.398cc1	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398cc3	29 0f		and #$0f	              AND #$0F
.398cc5	05 32		ora $32		              ORA OPL2_PARAMETER0
.398cc7	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398cc9	6b		rtl		              RTL
.398cca					OPL2_GET_ATTACK
.398cca	c2 20		rep #$20	                REP #$20        ; set A long
.398ccc	a9 60 00	lda #$0060	              LDA #$0060
.398ccf	85 28		sta $28		              STA OPL2_REG_REGION
.398cd1	20 38 8f	jsr $398f38	              JSR OPL2_GET_REG_OFFSET
.398cd4	e2 20		sep #$20	                SEP #$20        ; set A short
.398cd6	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398cd8	29 f0		and #$f0	              AND #$F0
.398cda	4a		lsr a		              LSR
.398cdb	4a		lsr a		              LSR
.398cdc	4a		lsr a		              LSR
.398cdd	4a		lsr a		              LSR
.398cde	6b		rtl		              RTL
.398cdf					OPL2_SET_DECAY
.398cdf	c2 20		rep #$20	                REP #$20        ; set A long
.398ce1	a9 60 00	lda #$0060	              LDA #$0060;
.398ce4	85 28		sta $28		              STA OPL2_REG_REGION
.398ce6	20 38 8f	jsr $398f38	              JSR OPL2_GET_REG_OFFSET
.398ce9	e2 20		sep #$20	                SEP #$20        ; set A short
.398ceb	a5 32		lda $32		              LDA OPL2_PARAMETER0 ; Attack
.398ced	29 0f		and #$0f	              AND #$0F
.398cef	85 32		sta $32		              STA OPL2_PARAMETER0
.398cf1	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398cf3	29 f0		and #$f0	              AND #$F0
.398cf5	05 32		ora $32		              ORA OPL2_PARAMETER0
.398cf7	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398cf9	6b		rtl		              RTL
.398cfa					OPL2_GET_DECAY
.398cfa	c2 20		rep #$20	                REP #$20        ; set A long
.398cfc	a9 60 00	lda #$0060	              LDA #$0060
.398cff	85 28		sta $28		              STA OPL2_REG_REGION
.398d01	20 38 8f	jsr $398f38	              JSR OPL2_GET_REG_OFFSET
.398d04	e2 20		sep #$20	                SEP #$20        ; set A short
.398d06	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398d08	29 0f		and #$0f	              AND #$0F
.398d0a	6b		rtl		              RTL
.398d0b					OPL2_SET_SUSTAIN
.398d0b	c2 20		rep #$20	                REP #$20        ; set A long
.398d0d	a9 80 00	lda #$0080	              LDA #$0080;
.398d10	85 28		sta $28		              STA OPL2_REG_REGION
.398d12	20 38 8f	jsr $398f38	              JSR OPL2_GET_REG_OFFSET
.398d15	e2 20		sep #$20	                SEP #$20        ; set A short
.398d17	a5 32		lda $32		              LDA OPL2_PARAMETER0 ; Attack
.398d19	29 0f		and #$0f	              AND #$0F
.398d1b	0a		asl a		              ASL
.398d1c	0a		asl a		              ASL
.398d1d	0a		asl a		              ASL
.398d1e	0a		asl a		              ASL
.398d1f	85 32		sta $32		              STA OPL2_PARAMETER0
.398d21	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398d23	29 0f		and #$0f	              AND #$0F
.398d25	05 32		ora $32		              ORA OPL2_PARAMETER0
.398d27	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398d29	6b		rtl		              RTL
.398d2a					OPL2_GET_SUSTAIN
.398d2a	c2 20		rep #$20	                REP #$20        ; set A long
.398d2c	a9 80 00	lda #$0080	              LDA #$0080
.398d2f	85 28		sta $28		              STA OPL2_REG_REGION
.398d31	20 38 8f	jsr $398f38	              JSR OPL2_GET_REG_OFFSET
.398d34	e2 20		sep #$20	                SEP #$20        ; set A short
.398d36	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398d38	29 f0		and #$f0	              AND #$F0
.398d3a	4a		lsr a		              LSR
.398d3b	4a		lsr a		              LSR
.398d3c	4a		lsr a		              LSR
.398d3d	4a		lsr a		              LSR
.398d3e	6b		rtl		              RTL
.398d3f					OPL2_SET_RELEASE
.398d3f	c2 20		rep #$20	                REP #$20        ; set A long
.398d41	a9 80 00	lda #$0080	              LDA #$0080;
.398d44	85 28		sta $28		              STA OPL2_REG_REGION
.398d46	20 38 8f	jsr $398f38	              JSR OPL2_GET_REG_OFFSET
.398d49	e2 20		sep #$20	                SEP #$20        ; set A short
.398d4b	a5 32		lda $32		              LDA OPL2_PARAMETER0 ; Attack
.398d4d	29 0f		and #$0f	              AND #$0F
.398d4f	85 32		sta $32		              STA OPL2_PARAMETER0
.398d51	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398d53	29 f0		and #$f0	              AND #$F0
.398d55	05 32		ora $32		              ORA OPL2_PARAMETER0
.398d57	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398d59	6b		rtl		              RTL
.398d5a					OPL2_GET_RELEASE
.398d5a	c2 20		rep #$20	                REP #$20        ; set A long
.398d5c	a9 80 00	lda #$0080	              LDA #$0080
.398d5f	85 28		sta $28		              STA OPL2_REG_REGION
.398d61	20 38 8f	jsr $398f38	              JSR OPL2_GET_REG_OFFSET
.398d64	e2 20		sep #$20	                SEP #$20        ; set A short
.398d66	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398d68	29 0f		and #$0f	              AND #$0F
.398d6a	6b		rtl		              RTL
.398d6b					OPL2_SET_FNUMBER
.398d6b	e2 20		sep #$20	                SEP #$20        ; set A short
.398d6d	18		clc		              CLC
.398d6e	a5 27		lda $27		              LDA OPL2_CHANNEL
.398d70	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.398d72	69 a0		adc #$a0	              ADC #$A0
.398d74	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.398d76	a9 00		lda #$00	              LDA #$00
.398d78	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.398d7a	c2 30		rep #$30	                REP #$30        ; set A&X long
.398d7c	18		clc		              CLC
.398d7d	a9 00 e7	lda #$e700	              LDA #OPL2_S_BASE_LL
.398d80	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.398d82	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.398d84	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.398d87	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.398d89	e2 20		sep #$20	                SEP #$20        ; set A short
.398d8b	a5 32		lda $32		              LDA OPL2_PARAMETER0     ; Load the 16Bits Value of FNumber
.398d8d	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]  ; Load
.398d8f	18		clc		              CLC
.398d90	a5 2c		lda $2c		              LDA OPL2_IND_ADDY_LL
.398d92	69 10		adc #$10	              ADC #$10
.398d94	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.398d96	a5 33		lda $33		              LDA OPL2_PARAMETER1
.398d98	29 03		and #$03	              AND #$03
.398d9a	85 33		sta $33		              STA OPL2_PARAMETER1
.398d9c	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398d9e	29 fc		and #$fc	              AND #$FC
.398da0	05 33		ora $33		              ORA OPL2_PARAMETER1
.398da2	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398da4	6b		rtl		              RTL
.398da5					OPL2_GET_FNUMBER
.398da5	e2 20		sep #$20	                SEP #$20        ; set A short
.398da7	18		clc		              CLC
.398da8	a5 27		lda $27		              LDA OPL2_CHANNEL
.398daa	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.398dac	69 a0		adc #$a0	              ADC #$A0
.398dae	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.398db0	a9 00		lda #$00	              LDA #$00
.398db2	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.398db4	c2 30		rep #$30	                REP #$30        ; set A&X long
.398db6	18		clc		              CLC
.398db7	a9 00 e7	lda #$e700	              LDA #OPL2_S_BASE_LL
.398dba	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.398dbc	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.398dbe	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.398dc1	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.398dc3	e2 20		sep #$20	                SEP #$20        ; set A short
.398dc5	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398dc7	85 32		sta $32		              STA OPL2_PARAMETER0
.398dc9	18		clc		              CLC
.398dca	a5 2c		lda $2c		              LDA OPL2_IND_ADDY_LL
.398dcc	69 10		adc #$10	              ADC #$10
.398dce	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.398dd0	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398dd2	29 03		and #$03	              AND #$03
.398dd4	85 33		sta $33		              STA OPL2_PARAMETER1
.398dd6	6b		rtl		              RTL
.398dd7					OPL2_SET_BLOCK
.398dd7	e2 20		sep #$20	                SEP #$20        ; set A short
.398dd9	18		clc		              CLC
.398dda	a5 27		lda $27		              LDA OPL2_CHANNEL
.398ddc	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.398dde	69 b0		adc #$b0	              ADC #$B0
.398de0	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.398de2	a9 00		lda #$00	              LDA #$00
.398de4	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.398de6	c2 30		rep #$30	                REP #$30        ; set A&X long
.398de8	18		clc		              CLC
.398de9	a9 00 e7	lda #$e700	              LDA #OPL2_S_BASE_LL
.398dec	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.398dee	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.398df0	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.398df3	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.398df5	e2 20		sep #$20	                SEP #$20        ; set A short
.398df7	a5 31		lda $31		              LDA OPL2_OCTAVE
.398df9	29 07		and #$07	              AND #$07
.398dfb	0a		asl a		              ASL
.398dfc	0a		asl a		              ASL
.398dfd	85 31		sta $31		              STA OPL2_OCTAVE
.398dff	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398e01	29 e3		and #$e3	              AND #$E3
.398e03	05 31		ora $31		              ORA OPL2_OCTAVE
.398e05	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398e07	60		rts		              RTS
.398e08					OPL2_SET_KEYON
.398e08	e2 20		sep #$20	                SEP #$20        ; set A short
.398e0a	18		clc		              CLC
.398e0b	a5 27		lda $27		              LDA OPL2_CHANNEL
.398e0d	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.398e0f	69 b0		adc #$b0	              ADC #$B0
.398e11	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.398e13	a9 00		lda #$00	              LDA #$00
.398e15	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.398e17	c2 30		rep #$30	                REP #$30        ; set A&X long
.398e19	18		clc		              CLC
.398e1a	a9 00 e7	lda #$e700	              LDA #OPL2_S_BASE_LL
.398e1d	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.398e1f	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.398e21	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.398e24	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.398e26	e2 20		sep #$20	                SEP #$20        ; set A short
.398e28	a5 32		lda $32		              LDA OPL2_PARAMETER0
.398e2a	29 01		and #$01	              AND #$01
.398e2c	0a		asl a		              ASL
.398e2d	0a		asl a		              ASL
.398e2e	0a		asl a		              ASL
.398e2f	0a		asl a		              ASL
.398e30	0a		asl a		              ASL
.398e31	85 32		sta $32		              STA OPL2_PARAMETER0
.398e33	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398e35	29 df		and #$df	              AND #$DF
.398e37	05 32		ora $32		              ORA OPL2_PARAMETER0
.398e39	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398e3b	60		rts		              RTS
.398e3c					OPL2_SET_FEEDBACK
.398e3c	e2 20		sep #$20	                SEP #$20        ; set A short
.398e3e	18		clc		              CLC
.398e3f	a5 27		lda $27		              LDA OPL2_CHANNEL
.398e41	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.398e43	69 c0		adc #$c0	              ADC #$C0
.398e45	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.398e47	a9 00		lda #$00	              LDA #$00
.398e49	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.398e4b	c2 30		rep #$30	                REP #$30        ; set A&X long
.398e4d	18		clc		              CLC
.398e4e	a9 00 e7	lda #$e700	              LDA #OPL2_S_BASE_LL
.398e51	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.398e53	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.398e55	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.398e58	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.398e5a	e2 20		sep #$20	                SEP #$20        ; set A short
.398e5c	a5 32		lda $32		              LDA OPL2_PARAMETER0
.398e5e	29 07		and #$07	              AND #$07
.398e60	0a		asl a		              ASL
.398e61	85 32		sta $32		              STA OPL2_PARAMETER0
.398e63	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398e65	29 01		and #$01	              AND #$01
.398e67	05 32		ora $32		              ORA OPL2_PARAMETER0
.398e69	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398e6b	6b		rtl		              RTL
.398e6c					OPL2_SET_SYNTHMODE
.398e6c	08		php		              PHP ; Push the Carry
.398e6d	e2 20		sep #$20	                SEP #$20        ; set A short
.398e6f	18		clc		              CLC
.398e70	a5 27		lda $27		              LDA OPL2_CHANNEL
.398e72	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.398e74	69 c0		adc #$c0	              ADC #$C0
.398e76	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.398e78	a9 00		lda #$00	              LDA #$00
.398e7a	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.398e7c	c2 30		rep #$30	                REP #$30        ; set A&X long
.398e7e	18		clc		              CLC
.398e7f	a9 00 e7	lda #$e700	              LDA #OPL2_S_BASE_LL
.398e82	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.398e84	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.398e86	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.398e89	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.398e8b	28		plp		              PLP ; Pull the Carry out
.398e8c	e2 20		sep #$20	                SEP #$20        ; set A short
.398e8e	b0 08		bcs $398e98	              BCS OPL2_Set_Synthmode_Set;
.398e90	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398e92	29 fe		and #$fe	              AND #$FE
.398e94	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398e96	80 06		bra $398e9e	              BRA OPL2_Set_Synthmode_Exit
.398e98					OPL2_Set_Synthmode_Set
.398e98	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398e9a	09 01		ora #$01	              ORA #$01
.398e9c	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398e9e					OPL2_Set_Synthmode_Exit
.398e9e	6b		rtl		              RTL
.398e9f					OPL2_SET_DEEPTREMOLO
.398e9f	c2 20		rep #$20	                REP #$20        ; set A long
.398ea1	a9 bd e7	lda #$e7bd	              LDA #OPL2_S_BASE_LL + $00BD
.398ea4	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.398ea6	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.398ea9	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.398eab	e2 20		sep #$20	                SEP #$20        ; set A short
.398ead	b0 08		bcs $398eb7	              BCS OPL2_Set_DeepTremolo_Set;
.398eaf	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398eb1	29 7f		and #$7f	              AND #$7F
.398eb3	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398eb5	80 06		bra $398ebd	              BRA OPL2_Set_DeepTremolo_Exit
.398eb7					OPL2_Set_DeepTremolo_Set
.398eb7	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398eb9	09 80		ora #$80	              ORA #$80
.398ebb	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398ebd					OPL2_Set_DeepTremolo_Exit
.398ebd	6b		rtl		              RTL
.398ebe					OPL2_SET_DEEPVIBRATO
.398ebe	c2 20		rep #$20	                REP #$20        ; set A long
.398ec0	a9 bd e7	lda #$e7bd	              LDA #OPL2_S_BASE_LL + $00BD
.398ec3	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.398ec5	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.398ec8	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.398eca	e2 20		sep #$20	                SEP #$20        ; set A short
.398ecc	b0 08		bcs $398ed6	              BCS OPL2_Set_DeepVibrato_Set;
.398ece	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398ed0	29 bf		and #$bf	              AND #$BF
.398ed2	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398ed4	80 06		bra $398edc	              BRA OPL2_Set_DeepVibrato_Exit
.398ed6					OPL2_Set_DeepVibrato_Set
.398ed6	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398ed8	09 40		ora #$40	              ORA #$40
.398eda	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398edc					OPL2_Set_DeepVibrato_Exit
.398edc	6b		rtl		              RTL
.398edd					OPL2_SET_PERCUSSION
.398edd	c2 20		rep #$20	                REP #$20        ; set A long
.398edf	a9 bd e7	lda #$e7bd	              LDA #OPL2_S_BASE_LL + $00BD
.398ee2	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.398ee4	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.398ee7	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.398ee9	e2 20		sep #$20	                SEP #$20        ; set A short
.398eeb	b0 08		bcs $398ef5	              BCS OPL2_Set_Percussion_Set;
.398eed	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398eef	29 df		and #$df	              AND #$DF
.398ef1	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398ef3	80 06		bra $398efb	              BRA OPL2_Set_Percussion_Exit
.398ef5					OPL2_Set_Percussion_Set
.398ef5	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398ef7	09 20		ora #$20	              ORA #$20
.398ef9	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398efb					OPL2_Set_Percussion_Exit
.398efb	6b		rtl		              RTL
.398efc					OPL2_SET_DRUMS
.398efc	c2 20		rep #$20	                REP #$20        ; set A long
.398efe	a9 bd e7	lda #$e7bd	              LDA #OPL2_S_BASE_LL + $00BD
.398f01	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.398f03	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.398f06	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.398f08	e2 20		sep #$20	                SEP #$20        ; set A short
.398f0a	a5 32		lda $32		              LDA OPL2_PARAMETER0
.398f0c	29 1f		and #$1f	              AND #$1F
.398f0e	85 32		sta $32		              STA OPL2_PARAMETER0
.398f10	49 ff		eor #$ff	              EOR #$FF
.398f12	85 33		sta $33		              STA OPL2_PARAMETER1
.398f14	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398f16	25 33		and $33		              AND OPL2_PARAMETER1
.398f18	05 32		ora $32		              ORA OPL2_PARAMETER0
.398f1a	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398f1c	6b		rtl		              RTL
.398f1d					OPL2_SET_WAVEFORM
.398f1d	c2 20		rep #$20	                REP #$20        ; set A long
.398f1f	a9 e0 00	lda #$00e0	              LDA #$00E0;
.398f22	85 28		sta $28		              STA OPL2_REG_REGION
.398f24	20 38 8f	jsr $398f38	              JSR OPL2_GET_REG_OFFSET
.398f27	e2 20		sep #$20	                SEP #$20        ; set A short
.398f29	a5 32		lda $32		              LDA OPL2_PARAMETER0
.398f2b	29 03		and #$03	              AND #$03
.398f2d	85 32		sta $32		              STA OPL2_PARAMETER0
.398f2f	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.398f31	29 fc		and #$fc	              AND #$FC
.398f33	05 32		ora $32		              ORA OPL2_PARAMETER0
.398f35	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.398f37	6b		rtl		              RTL
.398f38					OPL2_GET_REG_OFFSET
.398f38	e2 30		sep #$30	                SEP #$30        ; set A&X short
.398f3a	a5 27		lda $27		              LDA OPL2_CHANNEL
.398f3c	29 0f		and #$0f	              AND #$0F
.398f3e	aa		tax		              TAX
.398f3f	a5 26		lda $26		              LDA OPL2_OPERATOR   ; Check which Operator In used
.398f41	29 01		and #$01	              AND #$01            ; if ZERO = The operator 1, One = Operator 2
.398f43	c9 01		cmp #$01	              CMP #$01
.398f45	f0 06		beq $398f4d	              BEQ OPL2_Get_Register_Offset_l0
.398f47	bf 47 87 39	lda $398747,x	              LDA @lregisterOffsets_operator0, X
.398f4b	80 04		bra $398f51	              BRA OPL2_Get_Register_Offset_exit
.398f4d					OPL2_Get_Register_Offset_l0
.398f4d	bf 50 87 39	lda $398750,x	              LDA @lregisterOffsets_operator1, X
.398f51					OPL2_Get_Register_Offset_exit
.398f51	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.398f53	a9 00		lda #$00	              LDA #$00
.398f55	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.398f57	c2 30		rep #$30	                REP #$30        ; set A&X long
.398f59	18		clc		              CLC
.398f5a	a9 00 e7	lda #$e700	              LDA #OPL2_S_BASE_LL
.398f5d	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.398f5f	65 28		adc $28		              ADC OPL2_REG_REGION ; Ex: $20, or $40, $60, $80 (in 16bits)
.398f61	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.398f63	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.398f66	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.398f68	60		rts		              RTS

;******  Return to file: src\kernel.asm


;******  Processing file: src\ide_library.asm

.0000					IDE_ID
>0000	00 00				General_Config        .word $0000
>0002	00 00				Obsolete0             .word $0000
>0004	00 00				Specific_Config       .word $0000
>0006	00 00				Obsolete1             .word $0000
>0008	00 00				Retired0              .word $0000
>000a	00 00				Retired1              .word $0000
>000c	00 00				Obsolete2             .word $0000
>000e	00 00				Reserved_CFlash0      .word $0000
>0010	00 00				Reserved_CFlash1      .word $0000
>0012	00 00				Retired2              .word $0000
>0014	00 00 00 00 00 00 00 00		Serial_Number_String  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>001c	00 00 00 00 00 00 00 00 00 00 00 00
>0028	00 00 00 00			Retired3              .word $0000, $0000
>002c	00 00				Obsolete3             .word $0000
>002e	00 00 00 00 00 00 00 00		Firmware_Rev_String   .byte $00, $00, $00, $00, $00, $00, $00, $00
>0036	00 00 00 00 00 00 00 00		Model_Number_String   .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>003e	00 00 00 00 00 00 00 00
>0046	00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>004e	00 00 00 00 00 00 00 00
>0056	00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00
>005e	00 00				Max_Number_Logic_Sec  .word $0000
>0060	00 00				Trusted_Comp_Feature  .word $0000
>0062	00 00 00 00			Capabilities          .word $0000, $0000
>0066	00 00 00 00			Obsolete4             .word $0000, $0000
>006a	00 00				Free_Fall_Control     .word $0000
>006c	00 00 00 00 00 00 00 00		Obsolete5             .word $0000, $0000, $0000, $0000, $0000
>0074	00 00
>0076	00 00				Reserved0             .word $0000
>0078	00 00 00 00			Total_Addy_Logic_Sec  .word $0000, $0000
>007c	00 00				Obsolete6             .word $0000
>007e	00 00 00 00			Reserved1             .word $0000, $0000
>0082	00 00				Min_Multiword_DMA_Trf .word $0000
>0084	00 00				Manu_Recommended_Mult .word $0000
>0086	00 00				Min_PIO_Trf           .word $0000      ; Word 67
>0088	00 00				Min_PIO_Trf_with_IORD .word $0000      ; Word 68
>008a	00 00 00 00			Reserved2             .word $0000, $0000
>008e	00 00 00 00 00 00 00 00		Reserved3             .word $0000, $0000, $0000, $0000
>0096	00 00				Queue_Dept            .word $0000
>0098	00 00				SATA_Capabilities     .word $0000
>009a	00 00				Reserved_SATA         .word $0000
>009c	00 00				Sup_Feat_SATA         .word $0000
>009e	00 00				Sup_Feat_SATA_Enabled .word $0000    ; Word 79
>00a0	00 00				Major_Version_Number  .word $0000    ; Word 80
>00a2	00 00				Minor_Version_Number  .word $0000    ; Word 81
>00a4	00 00 00 00 00 00 00 00		Cmd_And_Features_Sup  .word $0000, $0000, $0000, $0000, $0000, $0000
>00ac	00 00 00 00
>00b0	00 00				UDMA_Modes            .word $0000
>00b2	00 00 00 00			Reserved4             .word $0000, $0000 ; Word 89
>00b6	00 00				Current_APM_Level     .word $0000
>00b8	00 00				Master_Password_Ident .word $0000
>00ba	00 00				Hardware_Reset_Result .word $0000
>00bc	00 00				Current_AAM_Value     .word $0000  ; Word 94
>00be	00 00				Stream_Min_Req_Size   .word $0000  ; Word 95
>00c0	00 00				Stream_Trf_Time_DMA   .word $0000  ; Word 96
>00c2	00 00				Stream_Access_Lat     .word $0000
>00c4	00 00 00 00			Streaming_Perf_Gran   .word $0000, $0000
>00c8	00 00 00 00 00 00 00 00		Tot_Num_Add_Logic_Sec .word $0000, $0000, $0000, $0000
>00d0	00 00				Streaming_Trf_Time    .word $0000 ; Word 104
>00d2	00 00				Reserved5             .word $0000 ; Word 105
.398f69					IDE_INIT
.398f69	e2 20		sep #$20	                SEP #$20        ; set A short
.398f6b	20 8c 8f	jsr $398f8c	              JSR IDE_DRIVE_BSY ; Check to see if drive is busy
.398f6e	a9 00		lda #$00	              LDA #$00
.398f70	8f 3a e8 af	sta $afe83a	              STA IDE_CLDR_HI
.398f74	8f 38 e8 af	sta $afe838	              STA IDE_CLDR_LO
.398f78	8f 34 e8 af	sta $afe834	              STA IDE_SECT_CNT
.398f7c	a9 01		lda #$01	              LDA #$01
.398f7e	8f 36 e8 af	sta $afe836	              STA IDE_SECT_SRT
.398f82	a9 a0		lda #$a0	              LDA #$A0 ; HEAD 0 - Select Master Drive
.398f84	8f 3c e8 af	sta $afe83c	              STA IDE_HEAD
.398f88	20 a2 8f	jsr $398fa2	              JSR IDE_DRV_READY_NOTBUSY
.398f8b	6b		rtl		              RTL
.398f8c					IDE_DRIVE_BSY
.398f8c	af 3e e8 af	lda $afe83e	              LDA IDE_CMD_STAT
.398f90	29 80		and #$80	              AND #$80    ;; Check for RDY Bit, this needs to be 1'b1
.398f92	c9 80		cmp #$80	              CMP #$80    ;; If not go read again
.398f94	f0 f6		beq $398f8c	              BEQ IDE_DRIVE_BSY
.398f96	60		rts		              RTS
.398f97					IDE_DRIVE_READY
.398f97	af 3e e8 af	lda $afe83e	              LDA IDE_CMD_STAT
.398f9b	29 40		and #$40	              AND #$40    ;; Check to see if the Busy Signal is Cleared
.398f9d	c9 40		cmp #$40	              CMP #$40    ; if it is still one, then go back to read again.
.398f9f	d0 f6		bne $398f97	              BNE IDE_DRIVE_READY
.398fa1	60		rts		              RTS
.398fa2					IDE_DRV_READY_NOTBUSY
.398fa2	af 3e e8 af	lda $afe83e	              LDA IDE_CMD_STAT
.398fa6	29 40		and #$40	              AND #$40    ;; Check to see if the Busy Signal is Cleared
.398fa8	c9 40		cmp #$40	              CMP #$40    ; if it is still one, then go back to read again.
.398faa	d0 f6		bne $398fa2	              BNE IDE_DRV_READY_NOTBUSY
.398fac	af 3e e8 af	lda $afe83e	              LDA IDE_CMD_STAT
.398fb0	29 80		and #$80	              AND #$80    ;; Check for RDY Bit, this needs to be 1'b1
.398fb2	c9 80		cmp #$80	              CMP #$80    ;; If not go read again
.398fb4	f0 ec		beq $398fa2	              BEQ IDE_DRV_READY_NOTBUSY
.398fb6	60		rts		              RTS
.398fb7					IDE_NOT_DRQ
.398fb7	af 3e e8 af	lda $afe83e	              LDA IDE_CMD_STAT
.398fbb	29 08		and #$08	              AND #$08
.398fbd	c9 08		cmp #$08	              CMP #$08
.398fbf	d0 f6		bne $398fb7	              BNE IDE_NOT_DRQ
.398fc1	60		rts		              RTS
.398fc2					IDE_GET_512BYTES
.398fc2	c2 30		rep #$30	                REP #$30        ; set A&X long
.398fc4	af 30 e8 af	lda $afe830	              LDA IDE_DATA_LO
.398fc8	a2 00 00	ldx #$0000	              LDX #$0000
.398fcb					IDE_GET_INFO_KEEP_FETCHING
.398fcb	af 30 e8 af	lda $afe830	              LDA IDE_DATA_LO
.398fcf	9d 00 04	sta $0400,x	              STA SDOS_BLK_BEGIN, X
.398fd2	e8		inx		              INX
.398fd3	e8		inx		              INX
.398fd4	e0 00 02	cpx #$0200	              CPX #$0200
.398fd7	d0 f2		bne $398fcb	              BNE IDE_GET_INFO_KEEP_FETCHING
.398fd9	6b		rtl		              RTL
.398fda					IDE_GET_INFO
.398fda	e2 20		sep #$20	                SEP #$20        ; set A short
.398fdc	20 8c 8f	jsr $398f8c	              JSR IDE_DRIVE_BSY
.398fdf	a9 ec		lda #$ec	              LDA #$EC              ; Send the Command #$EC to fetch the INFO about the HDD
.398fe1	8f 3e e8 af	sta $afe83e	              STA IDE_CMD_STAT
.398fe5	20 a2 8f	jsr $398fa2	              JSR IDE_DRV_READY_NOTBUSY
.398fe8	20 b7 8f	jsr $398fb7	              JSR IDE_NOT_DRQ       ; Wait for the Drive to let us know that the Data is ready
.398feb	22 c2 8f 39	jsl $398fc2	              JSL IDE_GET_512BYTES
.398fef	e2 20		sep #$20	                SEP #$20        ; set A short
.398ff1	c2 10		rep #$10	                REP #$10        ; set X long
.398ff3	a2 00 00	ldx #$0000	              LDX #$0000
.398ff6					GET_INFO_LOOP
.398ff6	bd 37 04	lda $0437,x	              LDA SDOS_BLK_BEGIN+55, X    ; Model String
.398ff9	22 64 06 39	jsl $390664	              JSL IPUTC
.398ffd	bd 36 04	lda $0436,x	              LDA SDOS_BLK_BEGIN+54, X    ; Model String
.399000	22 64 06 39	jsl $390664	              JSL IPUTC
.399004	e8		inx		              INX
.399005	e8		inx		              INX
.399006	e0 28 00	cpx #$0028	              CPX #40
.399009	d0 eb		bne $398ff6	              BNE GET_INFO_LOOP
.39900b	6b		rtl		              RTL
.39900c					IDE_DISPLAY_INFO

;******  Return to file: src\kernel.asm


;******  Processing file: src\YM26XX.asm


;******  Processing file: src\YM26XX_def.asm

=$aff000				OPM_BASE_ADDRESS		= $AFF000 ;  $AF:F000-AF:F0FF
=$aff100				PSG_BASE_ADDRESS		= $AFF100
=$fae600				OPL3_BASE_ADRESS		= $FAE600 ;  $AF:E600-AF:E7FF
=$aff200				OPN2_BASE_ADDRESS		= $AFF200 ;  $AF:F200-AF:F3FF
=$100					OPN2_OFFSET_PART_II		= $100
=11530786				OPN2_22_LFO				= OPN2_BASE_ADDRESS + $22;	LFO enable 	|	LFO frequency
=11530788				OPN2_23_TIMER_A_H		= OPN2_BASE_ADDRESS + $24;	Timer A MSBs
=11530789				OPN2_24_TIMER_A_L		= OPN2_BASE_ADDRESS + $25;	Timer A LSBs
=11530790				OPN2_25_TIMER_B			= OPN2_BASE_ADDRESS + $26;	Timer B
=11530791				OPN2_27_CHANEL_3_MODE	= OPN2_BASE_ADDRESS + $27;	Ch3 mode 	Reset B 	Reset A 	Enable B 	Enable A 	Load B 	Load A
=11530791				OPN2_27_TIMER_CONF		= OPN2_BASE_ADDRESS + $27;	Ch3 mode 	Reset B 	Reset A 	Enable B 	Enable A 	Load B 	Load A
=11530792				OPN2_28_KEY_ON_OFF		= OPN2_BASE_ADDRESS + $28;	Operator Channel
=11530794				OPN2_2A_ADC				= OPN2_BASE_ADDRESS + $2A;	DAC
=11530795				OPN2_2B_ADC_EN			= OPN2_BASE_ADDRESS + $2B;	DAC en
=11530800				OPN2_30_ADSR__DT1_MUL__CH1_OP1		= OPN2_BASE_ADDRESS + $30;	DT1 	MUL
=11530801				OPN2_31_ADSR__DT1_MUL__CH2_OP1		= OPN2_BASE_ADDRESS + $31;	DT1 	MUL
=11530802				OPN2_32_ADSR__DT1_MUL__CH3_OP1		= OPN2_BASE_ADDRESS + $32;	DT1 	MUL
=11530804				OPN2_34_ADSR__DT1_MUL__CH1_OP2		= OPN2_BASE_ADDRESS + $34;	DT1 	MUL
=11530805				OPN2_35_ADSR__DT1_MUL__CH2_OP2		= OPN2_BASE_ADDRESS + $35;	DT1 	MUL
=11530806				OPN2_36_ADSR__DT1_MUL__CH3_OP2		= OPN2_BASE_ADDRESS + $36;	DT1 	MUL
=11530808				OPN2_38_ADSR__DT1_MUL__CH1_OP3		= OPN2_BASE_ADDRESS + $38;	DT1 	MUL
=11530809				OPN2_39_ADSR__DT1_MUL__CH2_OP3		= OPN2_BASE_ADDRESS + $39;	DT1 	MUL
=11530810				OPN2_3A_ADSR__DT1_MUL__CH3_OP3		= OPN2_BASE_ADDRESS + $3A;	DT1 	MUL
=11530812				OPN2_3C_ADSR__DT1_MUL__CH1_OP4		= OPN2_BASE_ADDRESS + $3C;	DT1 	MUL
=11530813				OPN2_3D_ADSR__DT1_MUL__CH2_OP4		= OPN2_BASE_ADDRESS + $3D;	DT1 	MUL
=11530814				OPN2_3E_ADSR__DT1_MUL__CH3_OP4		= OPN2_BASE_ADDRESS + $3E;	DT1 	MUL
=11531056				OPN2_30_ADSR__DT1_MUL__CH1_OP5		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $30;	DT1 	MUL
=11531057				OPN2_31_ADSR__DT1_MUL__CH2_OP5		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $31;	DT1 	MUL
=11531058				OPN2_32_ADSR__DT1_MUL__CH3_OP5		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $32;	DT1 	MUL
=11531060				OPN2_34_ADSR__DT1_MUL__CH1_OP6		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $34;	DT1 	MUL
=11531061				OPN2_35_ADSR__DT1_MUL__CH2_OP6		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $35;	DT1 	MUL
=11531062				OPN2_36_ADSR__DT1_MUL__CH3_OP6		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $36;	DT1 	MUL
=11531064				OPN2_38_ADSR__DT1_MUL__CH1_OP7		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $38;	DT1 	MUL
=11531065				OPN2_39_ADSR__DT1_MUL__CH2_OP7		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $39;	DT1 	MUL
=11531066				OPN2_3A_ADSR__DT1_MUL__CH3_OP7		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $3A;	DT1 	MUL
=11531068				OPN2_3C_ADSR__DT1_MUL__CH1_OP8		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $3C;	DT1 	MUL
=11531069				OPN2_3D_ADSR__DT1_MUL__CH2_OP8		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $3D;	DT1 	MUL
=11531070				OPN2_3E_ADSR__DT1_MUL__CH3_OP8		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $3E;	DT1 	MUL
=11530816				OPN2_40_ADSR__LT__CH1_OP1		= OPN2_BASE_ADDRESS + $40;	LT
=11530817				OPN2_41_ADSR__LT__CH2_OP1		= OPN2_BASE_ADDRESS + $41;	LT
=11530818				OPN2_42_ADSR__LT__CH3_OP1		= OPN2_BASE_ADDRESS + $42;	LT
=11530820				OPN2_44_ADSR__LT__CH1_OP2		= OPN2_BASE_ADDRESS + $44;	LT
=11530821				OPN2_45_ADSR__LT__CH2_OP2		= OPN2_BASE_ADDRESS + $45;	LT
=11530822				OPN2_46_ADSR__LT__CH3_OP2		= OPN2_BASE_ADDRESS + $46;	LT
=11530824				OPN2_48_ADSR__LT__CH1_OP3		= OPN2_BASE_ADDRESS + $48;	LT
=11530825				OPN2_49_ADSR__LT__CH2_OP3		= OPN2_BASE_ADDRESS + $49;	LT
=11530826				OPN2_4A_ADSR__LT__CH3_OP3		= OPN2_BASE_ADDRESS + $4A;	LT
=11530828				OPN2_4C_ADSR__LT__CH1_OP4		= OPN2_BASE_ADDRESS + $4C;	LT
=11530829				OPN2_4D_ADSR__LT__CH2_OP4		= OPN2_BASE_ADDRESS + $4D;	LT
=11530830				OPN2_4E_ADSR__LT__CH3_OP4		= OPN2_BASE_ADDRESS + $4E;	LT
=11531072				OPN2_40_ADSR__LT__CH1_OP5		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $40;	LT
=11531073				OPN2_41_ADSR__LT__CH2_OP5		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $41;	LT
=11531074				OPN2_42_ADSR__LT__CH3_OP5		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $42;	LT
=11531076				OPN2_44_ADSR__LT__CH1_OP6		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $44;	LT
=11531077				OPN2_45_ADSR__LT__CH2_OP6		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $45;	LT
=11531078				OPN2_46_ADSR__LT__CH3_OP6		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $46;	LT
=11531080				OPN2_48_ADSR__LT__CH1_OP7		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $48;	LT
=11531081				OPN2_49_ADSR__LT__CH2_OP7		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $49;	LT
=11531082				OPN2_4A_ADSR__LT__CH3_OP7		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $4A;	LT
=11531084				OPN2_4C_ADSR__LT__CH1_OP8		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $4C;	LT
=11531085				OPN2_4D_ADSR__LT__CH2_OP8		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $4D;	LT
=11531086				OPN2_4E_ADSR__LT__CH3_OP8		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $4E;	LT
=11530832				OPN2_50_ADSR__SR_AR__CH1_OP1		= OPN2_BASE_ADDRESS + $50;	SR AR
=11530833				OPN2_51_ADSR__SR_AR__CH2_OP1		= OPN2_BASE_ADDRESS + $51;	SR AR
=11530834				OPN2_52_ADSR__SR_AR__CH3_OP1		= OPN2_BASE_ADDRESS + $52;	SR AR
=11530836				OPN2_54_ADSR__SR_AR__CH1_OP2		= OPN2_BASE_ADDRESS + $54;	SR AR
=11530837				OPN2_55_ADSR__SR_AR__CH2_OP2		= OPN2_BASE_ADDRESS + $55;	SR AR
=11530838				OPN2_56_ADSR__SR_AR__CH3_OP2		= OPN2_BASE_ADDRESS + $56;	SR AR
=11530840				OPN2_58_ADSR__SR_AR__CH1_OP3		= OPN2_BASE_ADDRESS + $58;	SR AR
=11530841				OPN2_59_ADSR__SR_AR__CH2_OP3		= OPN2_BASE_ADDRESS + $59;	SR AR
=11530842				OPN2_5A_ADSR__SR_AR__CH3_OP3		= OPN2_BASE_ADDRESS + $5A;	SR AR
=11530844				OPN2_5C_ADSR__SR_AR__CH1_OP4		= OPN2_BASE_ADDRESS + $5C;	SR AR
=11530845				OPN2_5D_ADSR__SR_AR__CH2_OP4		= OPN2_BASE_ADDRESS + $5D;	SR AR
=11530846				OPN2_5E_ADSR__SR_AR__CH3_OP4		= OPN2_BASE_ADDRESS + $5E;	SR AR
=11531088				OPN2_50_ADSR__SR_AR__CH1_OP5		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $50;	SR AR
=11531089				OPN2_51_ADSR__SR_AR__CH2_OP5		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $51;	SR AR
=11531090				OPN2_52_ADSR__SR_AR__CH3_OP5		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $52;	SR AR
=11531092				OPN2_54_ADSR__SR_AR__CH1_OP6		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $54;	SR AR
=11531093				OPN2_55_ADSR__SR_AR__CH2_OP6		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $55;	SR AR
=11531094				OPN2_56_ADSR__SR_AR__CH3_OP6		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $56;	SR AR
=11531096				OPN2_58_ADSR__SR_AR__CH1_OP7		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $58;	SR AR
=11531097				OPN2_59_ADSR__SR_AR__CH2_OP7		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $59;	SR AR
=11531098				OPN2_5A_ADSR__SR_AR__CH3_OP7		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $5A;	SR AR
=11531100				OPN2_5C_ADSR__SR_AR__CH1_OP8		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $5C;	SR AR
=11531101				OPN2_5D_ADSR__SR_AR__CH2_OP8		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $5D;	SR AR
=11531102				OPN2_5E_ADSR__SR_AR__CH3_OP8		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $5E;	SR AR
=11530848				OPN2_60_ADSR__AM_D1R__CH1_OP1		= OPN2_BASE_ADDRESS + $60;	AM D1R
=11530849				OPN2_61_ADSR__AM_D1R__CH2_OP1		= OPN2_BASE_ADDRESS + $61;	AM D1R
=11530850				OPN2_62_ADSR__AM_D1R__CH3_OP1		= OPN2_BASE_ADDRESS + $62;	AM D1R
=11530852				OPN2_64_ADSR__AM_D1R__CH1_OP2		= OPN2_BASE_ADDRESS + $64;	AM D1R
=11530853				OPN2_65_ADSR__AM_D1R__CH2_OP2		= OPN2_BASE_ADDRESS + $65;	AM D1R
=11530854				OPN2_66_ADSR__AM_D1R__CH3_OP2		= OPN2_BASE_ADDRESS + $66;	AM D1R
=11530856				OPN2_68_ADSR__AM_D1R__CH1_OP3		= OPN2_BASE_ADDRESS + $68;	AM D1R
=11530857				OPN2_69_ADSR__AM_D1R__CH2_OP3		= OPN2_BASE_ADDRESS + $69;	AM D1R
=11530858				OPN2_6A_ADSR__AM_D1R__CH3_OP3		= OPN2_BASE_ADDRESS + $6A;	AM D1R
=11530860				OPN2_6C_ADSR__AM_D1R__CH1_OP4		= OPN2_BASE_ADDRESS + $6C;	AM D1R
=11530861				OPN2_6D_ADSR__AM_D1R__CH2_OP4		= OPN2_BASE_ADDRESS + $6D;	AM D1R
=11530862				OPN2_6E_ADSR__AM_D1R__CH3_OP4		= OPN2_BASE_ADDRESS + $6E;	AM D1R
=11531104				OPN2_60_ADSR__AM_D1R__CH1_OP5		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $60;	AM D1R
=11531105				OPN2_61_ADSR__AM_D1R__CH2_OP5		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $61;	AM D1R
=11531106				OPN2_62_ADSR__AM_D1R__CH3_OP5		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $62;	AM D1R
=11531108				OPN2_64_ADSR__AM_D1R__CH1_OP6		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $64;	AM D1R
=11531109				OPN2_65_ADSR__AM_D1R__CH2_OP6		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $65;	AM D1R
=11531110				OPN2_66_ADSR__AM_D1R__CH3_OP6		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $66;	AM D1R
=11531112				OPN2_68_ADSR__AM_D1R__CH1_OP7		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $68;	AM D1R
=11531113				OPN2_69_ADSR__AM_D1R__CH2_OP7		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $69;	AM D1R
=11531114				OPN2_6A_ADSR__AM_D1R__CH3_OP7		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $6A;	AM D1R
=11531116				OPN2_6C_ADSR__AM_D1R__CH1_OP8		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $6C;	AM D1R
=11531117				OPN2_6D_ADSR__AM_D1R__CH2_OP8		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $6D;	AM D1R
=11531118				OPN2_6E_ADSR__AM_D1R__CH3_OP8		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $6E;	AM D1R
=11530864				OPN2_70_ADSR__D2R__CH1_OP1		= OPN2_BASE_ADDRESS + $70;	D2R
=11530865				OPN2_71_ADSR__D2R__CH2_OP1		= OPN2_BASE_ADDRESS + $71;	D2R
=11530866				OPN2_72_ADSR__D2R__CH3_OP1		= OPN2_BASE_ADDRESS + $72;	D2R
=11530868				OPN2_74_ADSR__D2R__CH1_OP2		= OPN2_BASE_ADDRESS + $74;	D2R
=11530869				OPN2_75_ADSR__D2R__CH2_OP2		= OPN2_BASE_ADDRESS + $75;	D2R
=11530870				OPN2_76_ADSR__D2R__CH3_OP2		= OPN2_BASE_ADDRESS + $76;	D2R
=11530872				OPN2_78_ADSR__D2R__CH1_OP3		= OPN2_BASE_ADDRESS + $78;	D2R
=11530873				OPN2_79_ADSR__D2R__CH2_OP3		= OPN2_BASE_ADDRESS + $79;	D2R
=11530874				OPN2_7A_ADSR__D2R__CH3_OP3		= OPN2_BASE_ADDRESS + $7A;	D2R
=11530876				OPN2_7C_ADSR__D2R__CH1_OP4		= OPN2_BASE_ADDRESS + $7C;	D2R
=11530877				OPN2_7D_ADSR__D2R__CH2_OP4		= OPN2_BASE_ADDRESS + $7D;	D2R
=11530878				OPN2_7E_ADSR__D2R__CH3_OP4		= OPN2_BASE_ADDRESS + $7E;	D2R
=11531120				OPN2_70_ADSR__D2R__CH1_OP5		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $70;	D2R
=11531121				OPN2_71_ADSR__D2R__CH2_OP5		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $71;	D2R
=11531122				OPN2_72_ADSR__D2R__CH3_OP5		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $72;	D2R
=11531124				OPN2_74_ADSR__D2R__CH1_OP6		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $74;	D2R
=11531125				OPN2_75_ADSR__D2R__CH2_OP6		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $75;	D2R
=11531126				OPN2_76_ADSR__D2R__CH3_OP6		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $76;	D2R
=11531128				OPN2_78_ADSR__D2R__CH1_OP7		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $78;	D2R
=11531129				OPN2_79_ADSR__D2R__CH2_OP7		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $79;	D2R
=11531130				OPN2_7A_ADSR__D2R__CH3_OP7		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $7A;	D2R
=11531132				OPN2_7C_ADSR__D2R__CH1_OP8		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $7C;	D2R
=11531133				OPN2_7D_ADSR__D2R__CH2_OP8		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $7D;	D2R
=11531134				OPN2_7E_ADSR__D2R__CH3_OP8		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $7E;	D2R
=11530880				OPN2_80_ADSR__D1L_RR__CH1_OP1		= OPN2_BASE_ADDRESS + $80;	D1L RR
=11530881				OPN2_81_ADSR__D1L_RR__CH2_OP1		= OPN2_BASE_ADDRESS + $81;	D1L RR
=11530882				OPN2_82_ADSR__D1L_RR__CH3_OP1		= OPN2_BASE_ADDRESS + $82;	D1L RR
=11530884				OPN2_84_ADSR__D1L_RR__CH1_OP2		= OPN2_BASE_ADDRESS + $84;	D1L RR
=11530885				OPN2_85_ADSR__D1L_RR__CH2_OP2		= OPN2_BASE_ADDRESS + $85;	D1L RR
=11530886				OPN2_86_ADSR__D1L_RR__CH3_OP2		= OPN2_BASE_ADDRESS + $86;	D1L RR
=11530888				OPN2_88_ADSR__D1L_RR__CH1_OP3		= OPN2_BASE_ADDRESS + $88;	D1L RR
=11530889				OPN2_89_ADSR__D1L_RR__CH2_OP3		= OPN2_BASE_ADDRESS + $89;	D1L RR
=11530890				OPN2_8A_ADSR__D1L_RR__CH3_OP3		= OPN2_BASE_ADDRESS + $8A;	D1L RR
=11530892				OPN2_8C_ADSR__D1L_RR__CH1_OP4		= OPN2_BASE_ADDRESS + $8C;	D1L RR
=11530893				OPN2_8D_ADSR__D1L_RR__CH2_OP4		= OPN2_BASE_ADDRESS + $8D;	D1L RR
=11530894				OPN2_8E_ADSR__D1L_RR__CH3_OP4		= OPN2_BASE_ADDRESS + $8E;	D1L RR
=11531136				OPN2_80_ADSR__D1L_RR__CH1_OP5		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $80;	D1L RR
=11531137				OPN2_81_ADSR__D1L_RR__CH2_OP5		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $81;	D1L RR
=11531138				OPN2_82_ADSR__D1L_RR__CH3_OP5		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $82;	D1L RR
=11531140				OPN2_84_ADSR__D1L_RR__CH1_OP6		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $84;	D1L RR
=11531141				OPN2_85_ADSR__D1L_RR__CH2_OP6		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $85;	D1L RR
=11531142				OPN2_86_ADSR__D1L_RR__CH3_OP6		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $86;	D1L RR
=11531144				OPN2_88_ADSR__D1L_RR__CH1_OP7		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $88;	D1L RR
=11531145				OPN2_89_ADSR__D1L_RR__CH2_OP7		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $89;	D1L RR
=11531146				OPN2_8A_ADSR__D1L_RR__CH3_OP7		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $8A;	D1L RR
=11531148				OPN2_8C_ADSR__D1L_RR__CH1_OP8		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $8C;	D1L RR
=11531149				OPN2_8D_ADSR__D1L_RR__CH2_OP8		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $8D;	D1L RR
=11531150				OPN2_8E_ADSR__D1L_RR__CH3_OP8		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $8E;	D1L RR
=11530896				OPN2_90_ADSR__D1L_RR__CH1_OP1		= OPN2_BASE_ADDRESS + $90;	D1L RR
=11530897				OPN2_91_ADSR__D1L_RR__CH2_OP1		= OPN2_BASE_ADDRESS + $91;	D1L RR
=11530898				OPN2_92_ADSR__D1L_RR__CH3_OP1		= OPN2_BASE_ADDRESS + $92;	D1L RR
=11530900				OPN2_94_ADSR__D1L_RR__CH1_OP2		= OPN2_BASE_ADDRESS + $94;	D1L RR
=11530901				OPN2_95_ADSR__D1L_RR__CH2_OP2		= OPN2_BASE_ADDRESS + $95;	D1L RR
=11530902				OPN2_96_ADSR__D1L_RR__CH3_OP2		= OPN2_BASE_ADDRESS + $96;	D1L RR
=11530904				OPN2_98_ADSR__D1L_RR__CH1_OP3		= OPN2_BASE_ADDRESS + $98;	D1L RR
=11530905				OPN2_99_ADSR__D1L_RR__CH2_OP3		= OPN2_BASE_ADDRESS + $99;	D1L RR
=11530906				OPN2_9A_ADSR__D1L_RR__CH3_OP3		= OPN2_BASE_ADDRESS + $9A;	D1L RR
=11530908				OPN2_9C_ADSR__D1L_RR__CH1_OP4		= OPN2_BASE_ADDRESS + $9C;	D1L RR
=11530909				OPN2_9D_ADSR__D1L_RR__CH2_OP4		= OPN2_BASE_ADDRESS + $9D;	D1L RR
=11530910				OPN2_9E_ADSR__D1L_RR__CH3_OP4		= OPN2_BASE_ADDRESS + $9E;	D1L RR
=11531152				OPN2_90_ADSR__D1L_RR__CH4_OP1		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $90;	D1L RR
=11531153				OPN2_91_ADSR__D1L_RR__CH5_OP1		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $91;	D1L RR
=11531154				OPN2_92_ADSR__D1L_RR__CH6_OP1		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $92;	D1L RR
=11531156				OPN2_94_ADSR__D1L_RR__CH4_OP2		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $94;	D1L RR
=11531157				OPN2_95_ADSR__D1L_RR__CH5_OP2		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $95;	D1L RR
=11531158				OPN2_96_ADSR__D1L_RR__CH6_OP2		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $96;	D1L RR
=11531160				OPN2_98_ADSR__D1L_RR__CH4_OP3		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $98;	D1L RR
=11531161				OPN2_99_ADSR__D1L_RR__CH5_OP3		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $99;	D1L RR
=11531162				OPN2_9A_ADSR__D1L_RR__CH6_OP3		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $9A;	D1L RR
=11531164				OPN2_9C_ADSR__D1L_RR__CH4_OP4		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $9C;	D1L RR
=11531165				OPN2_9D_ADSR__D1L_RR__CH5_OP4		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $9D;	D1L RR
=11531166				OPN2_9E_ADSR__D1L_RR__CH6_OP4		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $9E;	D1L RR
=11530912				OPN2_A0_CH1_FRECANCY_L				= OPN2_BASE_ADDRESS + $A0;	Frequency number LSB
=11530913				OPN2_A1_CH2_FRECANCY_L				= OPN2_BASE_ADDRESS + $A1;	Frequency number LSB
=11530914				OPN2_A2_CH3_FRECANCY_L				= OPN2_BASE_ADDRESS + $A2;	Frequency number LSB
=11530914				OPN2_A2_CH3_FRECANCY_OP1_L			= OPN2_BASE_ADDRESS + $A2;	Frequency number LSB Chanel 3 Operator 1 if special mode
=11530920				OPN2_A8_CH3_FRECANCY_OP2_L			= OPN2_BASE_ADDRESS + $A8;	Frequency number LSB Chanel 3 Operator 2 if special mode
=11530921				OPN2_A9_CH3_FRECANCY_OP3_L			= OPN2_BASE_ADDRESS + $A9;	Frequency number LSB Chanel 3 Operator 3 if special mode
=11530922				OPN2_AA_CH3_FRECANCY_OP4_L			= OPN2_BASE_ADDRESS + $AA;	Frequency number LSB Chanel 3 Operator 4 if special mode
=11531168				OPN2_A0_CH4_FRECANCY_L				= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $A0;	Frequency number LSB
=11531169				OPN2_A1_CH5_FRECANCY_L				= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $A1;	Frequency number LSB
=11531170				OPN2_A2_CH6_FRECANCY_L				= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $A2;	Frequency number LSB
=11530916				OPN2_A4_CH1_OCTAVE_FRECANCY_H		= OPN2_BASE_ADDRESS + $A4;	OCTAVE and Frequency number MSB
=11530917				OPN2_A5_CH2_OCTAVE_FRECANCY_H		= OPN2_BASE_ADDRESS + $A5;	OCTAVE and Frequency number MSB
=11530918				OPN2_A6_CH3_OCTAVE_FRECANCY_H		= OPN2_BASE_ADDRESS + $A6;	OCTAVE and Frequency number MSB
=11530918				OPN2_A6_CH3_OCTAVE_FRECANCY_OP1_H	= OPN2_BASE_ADDRESS + $A6;	OCTAVE and Frequency number MSB Chanel 3 Operator 1 if special mode
=11530924				OPN2_AC_CH3_OCTAVE_FRECANCY_OP2_H	= OPN2_BASE_ADDRESS + $AC;	OCTAVE and Frequency number MSB Chanel 3 Operator 2 if special mode
=11530925				OPN2_AD_CH3_OCTAVE_FRECANCY_OP3_H	= OPN2_BASE_ADDRESS + $AD;	OCTAVE and Frequency number MSB Chanel 3 Operator 3 if special mode
=11530926				OPN2_AE_CH3_OCTAVE_FRECANCY_OP4_H	= OPN2_BASE_ADDRESS + $AE;	OCTAVE and Frequency number MSB Chanel 3 Operator 4 if special mode
=11531172				OPN2_A4_CH4_OCTAVE_FRECANCY_H		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $A4;	OCTAVE and Frequency number MSB
=11531173				OPN2_A5_CH5_OCTAVE_FRECANCY_H		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $A5;	OCTAVE and Frequency number MSB
=11531174				OPN2_A6_CH6_OCTAVE_FRECANCY_H		= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $A6;	OCTAVE and Frequency number MSB
=11530928				OPN2_B0_CH1_FEEDBACK_ALGO			= OPN2_BASE_ADDRESS + $B0;
=11530929				OPN2_B1_CH2_FEEDBACK_ALGO			= OPN2_BASE_ADDRESS + $B1;
=11530930				OPN2_B2_CH3_FEEDBACK_ALGO			= OPN2_BASE_ADDRESS + $B2;
=11531184				OPN2_B0_CH4_FEEDBACK_ALGO			= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $B0;
=11531185				OPN2_B1_CH5_FEEDBACK_ALGO			= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $B1;
=11531186				OPN2_B2_CH6_FEEDBACK_ALGO			= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $B2;
=11530932				OPN2_B4_CH1_L_R_AMS_FMS				= OPN2_BASE_ADDRESS + $B4;
=11530933				OPN2_B5_CH2_L_R_AMS_FMS				= OPN2_BASE_ADDRESS + $B5;
=11530934				OPN2_B6_CH3_L_R_AMS_FMS				= OPN2_BASE_ADDRESS + $B6;
=11531188				OPN2_B4_CH4_L_R_AMS_FMS				= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $B4;
=11531189				OPN2_B5_CH5_L_R_AMS_FMS				= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $B5;
=11531190				OPN2_B6_CH6_L_R_AMS_FMS				= OPN2_BASE_ADDRESS + OPN2_OFFSET_PART_II + $B6;
=11530241				OPM_01_TEST					= OPM_BASE_ADDRESS + $01;
=11530248				OPM_08_KEY_ON_OFF		= OPM_BASE_ADDRESS + $08;
=11530255				OPM_0F_NE_NFREQ			= OPM_BASE_ADDRESS + $0F;
=11530256				OPM_10_CLK_A1				= OPM_BASE_ADDRESS + $10;
=11530257				OPM_11_CLK_A2				= OPM_BASE_ADDRESS + $11;
=11530258				OPM_12_CLK_B				= OPM_BASE_ADDRESS + $12;
=11530260				OPM_14_CMS_FLAG_RESET_IRQEN_LOAD	= OPM_BASE_ADDRESS + $14;
=11530264				OPM_18_LFRQ					= OPM_BASE_ADDRESS + $18;
=11530265				OPM_19_PMD_AMD			= OPM_BASE_ADDRESS + $19;
=11530267				OPM_1B_CT_W					= OPM_BASE_ADDRESS + $1B;
=11530272				OPM_20_A_RL_FR_CONNECT	= OPM_BASE_ADDRESS + $20;
=11530273				OPM_21_B_RL_FR_CONNECT	= OPM_BASE_ADDRESS + $21;
=11530274				OPM_22_C_RL_FR_CONNECT	= OPM_BASE_ADDRESS + $22;
=11530275				OPM_23_D_RL_FR_CONNECT	= OPM_BASE_ADDRESS + $23;
=11530276				OPM_24_E_RL_FR_CONNECT	= OPM_BASE_ADDRESS + $24;
=11530277				OPM_25_F_RL_FR_CONNECT	= OPM_BASE_ADDRESS + $25;
=11530278				OPM_26_G_RL_FR_CONNECT	= OPM_BASE_ADDRESS + $26;
=11530279				OPM_27_H_RL_FR_CONNECT	= OPM_BASE_ADDRESS + $27;
=11530280				OPM_28_A_KC							= OPM_BASE_ADDRESS + $28;
=11530281				OPM_29_B_KC							= OPM_BASE_ADDRESS + $29;
=11530282				OPM_2A_C_KC							= OPM_BASE_ADDRESS + $2A;
=11530283				OPM_2B_D_KC							= OPM_BASE_ADDRESS + $2B;
=11530284				OPM_2C_E_KC							= OPM_BASE_ADDRESS + $2C;
=11530285				OPM_2D_F_KC							= OPM_BASE_ADDRESS + $2D;
=11530286				OPM_2E_G_KC							= OPM_BASE_ADDRESS + $2E;
=11530287				OPM_2F_H_KC							= OPM_BASE_ADDRESS + $2F;
=11530288				OPM_30_A_KF							= OPM_BASE_ADDRESS + $30;
=11530289				OPM_31_B_KF							= OPM_BASE_ADDRESS + $31;
=11530290				OPM_32_C_KF							= OPM_BASE_ADDRESS + $32;
=11530291				OPM_33_D_KF							= OPM_BASE_ADDRESS + $33;
=11530292				OPM_34_E_KF							= OPM_BASE_ADDRESS + $34;
=11530293				OPM_35_F_KF							= OPM_BASE_ADDRESS + $35;
=11530294				OPM_36_G_KF							= OPM_BASE_ADDRESS + $36;
=11530295				OPM_37_H_KF							= OPM_BASE_ADDRESS + $37;
=11530296				OPM_38_A_PMS_AMS				= OPM_BASE_ADDRESS + $38;
=11530297				OPM_39_B_PMS_AMS				= OPM_BASE_ADDRESS + $39;
=11530298				OPM_3A_C_PMS_AMS				= OPM_BASE_ADDRESS + $3A;
=11530299				OPM_3B_D_PMS_AMS				= OPM_BASE_ADDRESS + $3B;
=11530300				OPM_3C_E_PMS_AMS				= OPM_BASE_ADDRESS + $3C;
=11530301				OPM_3D_F_PMS_AMS				= OPM_BASE_ADDRESS + $3D;
=11530302				OPM_3E_G_PMS_AMS				= OPM_BASE_ADDRESS + $3E;
=11530303				OPM_3F_H_PMS_AMS				= OPM_BASE_ADDRESS + $3F;
=11530304				OPM_40_A_M1_DT1_MUL			= OPM_BASE_ADDRESS + $40;
=11530305				OPM_41_B_M1_DT1_MUL			= OPM_BASE_ADDRESS + $41;
=11530306				OPM_42_C_M1_DT1_MUL			= OPM_BASE_ADDRESS + $42;
=11530307				OPM_43_D_M1_DT1_MUL			= OPM_BASE_ADDRESS + $43;
=11530308				OPM_44_E_M1_DT1_MUL			= OPM_BASE_ADDRESS + $44;
=11530309				OPM_45_F_M1_DT1_MUL			= OPM_BASE_ADDRESS + $45;
=11530310				OPM_46_G_M1_DT1_MUL			= OPM_BASE_ADDRESS + $46;
=11530311				OPM_47_H_M1_DT1_MUL			= OPM_BASE_ADDRESS + $47;
=11530312				OPM_48_A_M2_DT1_MUL			= OPM_BASE_ADDRESS + $48;
=11530313				OPM_49_B_M2_DT1_MUL			= OPM_BASE_ADDRESS + $49;
=11530314				OPM_4A_C_M2_DT1_MUL			= OPM_BASE_ADDRESS + $4A;
=11530315				OPM_4B_D_M2_DT1_MUL			= OPM_BASE_ADDRESS + $4B;
=11530316				OPM_4C_E_M2_DT1_MUL			= OPM_BASE_ADDRESS + $4C;
=11530317				OPM_4D_F_M2_DT1_MUL			= OPM_BASE_ADDRESS + $4D;
=11530318				OPM_4E_G_M2_DT1_MUL			= OPM_BASE_ADDRESS + $4E;
=11530319				OPM_4F_H_M2_DT1_MUL			= OPM_BASE_ADDRESS + $4F;
=11530320				OPM_50_A_C1_DT1_MUL			= OPM_BASE_ADDRESS + $50;
=11530321				OPM_51_B_C1_DT1_MUL			= OPM_BASE_ADDRESS + $51;
=11530322				OPM_52_C_C1_DT1_MUL			= OPM_BASE_ADDRESS + $52;
=11530323				OPM_53_D_C1_DT1_MUL			= OPM_BASE_ADDRESS + $53;
=11530324				OPM_54_E_C1_DT1_MUL			= OPM_BASE_ADDRESS + $54;
=11530325				OPM_55_F_C1_DT1_MUL			= OPM_BASE_ADDRESS + $55;
=11530326				OPM_56_G_C1_DT1_MUL			= OPM_BASE_ADDRESS + $56;
=11530327				OPM_57_H_C1_DT1_MUL			= OPM_BASE_ADDRESS + $57;
=11530328				OPM_58_A_C2_DT1_MUL			= OPM_BASE_ADDRESS + $58;
=11530329				OPM_59_B_C2_DT1_MUL			= OPM_BASE_ADDRESS + $59;
=11530330				OPM_5A_C_C2_DT1_MUL			= OPM_BASE_ADDRESS + $5A;
=11530331				OPM_5B_D_C2_DT1_MUL			= OPM_BASE_ADDRESS + $5B;
=11530332				OPM_5C_E_C2_DT1_MUL			= OPM_BASE_ADDRESS + $5C;
=11530333				OPM_5D_F_C2_DT1_MUL			= OPM_BASE_ADDRESS + $5D;
=11530334				OPM_5E_G_C2_DT1_MUL			= OPM_BASE_ADDRESS + $5E;
=11530335				OPM_5F_H_C2_DT1_MUL			= OPM_BASE_ADDRESS + $5F;
=11530336				OPM_60_A_M1_TL				= OPM_BASE_ADDRESS + $60;
=11530337				OPM_61_B_M1_TL				= OPM_BASE_ADDRESS + $61;
=11530338				OPM_62_C_M1_TL				= OPM_BASE_ADDRESS + $62;
=11530339				OPM_63_D_M1_TL				= OPM_BASE_ADDRESS + $63;
=11530340				OPM_64_E_M1_TL				= OPM_BASE_ADDRESS + $64;
=11530341				OPM_65_F_M1_TL				= OPM_BASE_ADDRESS + $65;
=11530342				OPM_66_G_M1_TL				= OPM_BASE_ADDRESS + $66;
=11530343				OPM_67_H_M1_TL				= OPM_BASE_ADDRESS + $67;
=11530344				OPM_68_A_M2_TL				= OPM_BASE_ADDRESS + $68;
=11530345				OPM_69_B_M2_TL				= OPM_BASE_ADDRESS + $69;
=11530346				OPM_6A_C_M2_TL				= OPM_BASE_ADDRESS + $6A;
=11530347				OPM_6B_D_M2_TL				= OPM_BASE_ADDRESS + $6B;
=11530348				OPM_6C_E_M2_TL				= OPM_BASE_ADDRESS + $6C;
=11530349				OPM_6D_F_M2_TL				= OPM_BASE_ADDRESS + $6D;
=11530350				OPM_6E_G_M2_TL				= OPM_BASE_ADDRESS + $6E;
=11530351				OPM_6F_H_M2_TL				= OPM_BASE_ADDRESS + $6F;
=11530352				OPM_70_A_C1_TL				= OPM_BASE_ADDRESS + $70;
=11530353				OPM_71_B_C1_TL				= OPM_BASE_ADDRESS + $71;
=11530354				OPM_72_C_C1_TL				= OPM_BASE_ADDRESS + $72;
=11530355				OPM_73_D_C1_TL				= OPM_BASE_ADDRESS + $73;
=11530356				OPM_74_E_C1_TL				= OPM_BASE_ADDRESS + $74;
=11530357				OPM_75_F_C1_TL				= OPM_BASE_ADDRESS + $75;
=11530358				OPM_76_G_C1_TL				= OPM_BASE_ADDRESS + $76;
=11530359				OPM_77_H_C1_TL				= OPM_BASE_ADDRESS + $77;
=11530360				OPM_78_A_C2_TL				= OPM_BASE_ADDRESS + $78;
=11530361				OPM_79_B_C2_TL				= OPM_BASE_ADDRESS + $79;
=11530362				OPM_7A_C_C2_TL				= OPM_BASE_ADDRESS + $7A;
=11530363				OPM_7B_D_C2_TL				= OPM_BASE_ADDRESS + $7B;
=11530364				OPM_7C_E_C2_TL				= OPM_BASE_ADDRESS + $7C;
=11530365				OPM_7D_F_C2_TL				= OPM_BASE_ADDRESS + $7D;
=11530366				OPM_7E_G_C2_TL				= OPM_BASE_ADDRESS + $7E;
=11530367				OPM_7F_H_C2_TL				= OPM_BASE_ADDRESS + $7F;
=11530368				OPM_80_A_M1_KS_AR			= OPM_BASE_ADDRESS + $80;
=11530369				OPM_81_B_M1_KS_AR			= OPM_BASE_ADDRESS + $81;
=11530370				OPM_82_C_M1_KS_AR			= OPM_BASE_ADDRESS + $82;
=11530371				OPM_83_D_M1_KS_AR			= OPM_BASE_ADDRESS + $83;
=11530372				OPM_84_E_M1_KS_AR			= OPM_BASE_ADDRESS + $84;
=11530373				OPM_85_F_M1_KS_AR			= OPM_BASE_ADDRESS + $85;
=11530374				OPM_86_G_M1_KS_AR			= OPM_BASE_ADDRESS + $86;
=11530375				OPM_87_H_M1_KS_AR			= OPM_BASE_ADDRESS + $87;
=11530376				OPM_88_A_M2_KS_AR			= OPM_BASE_ADDRESS + $88;
=11530377				OPM_89_B_M2_KS_AR			= OPM_BASE_ADDRESS + $89;
=11530378				OPM_8A_C_M2_KS_AR			= OPM_BASE_ADDRESS + $8A;
=11530379				OPM_8B_D_M2_KS_AR			= OPM_BASE_ADDRESS + $8B;
=11530380				OPM_8C_E_M2_KS_AR			= OPM_BASE_ADDRESS + $8C;
=11530381				OPM_8D_F_M2_KS_AR			= OPM_BASE_ADDRESS + $8D;
=11530382				OPM_8E_G_M2_KS_AR			= OPM_BASE_ADDRESS + $8E;
=11530383				OPM_8F_H_M2_KS_AR			= OPM_BASE_ADDRESS + $8F;
=11530384				OPM_90_A_C1_KS_AR			= OPM_BASE_ADDRESS + $90;
=11530385				OPM_91_B_C1_KS_AR			= OPM_BASE_ADDRESS + $91;
=11530386				OPM_92_C_C1_KS_AR			= OPM_BASE_ADDRESS + $92;
=11530387				OPM_93_D_C1_KS_AR			= OPM_BASE_ADDRESS + $93;
=11530388				OPM_94_E_C1_KS_AR			= OPM_BASE_ADDRESS + $94;
=11530389				OPM_95_F_C1_KS_AR			= OPM_BASE_ADDRESS + $95;
=11530390				OPM_96_G_C1_KS_AR			= OPM_BASE_ADDRESS + $96;
=11530391				OPM_97_H_C1_KS_AR			= OPM_BASE_ADDRESS + $97;
=11530392				OPM_98_A_C2_KS_AR			= OPM_BASE_ADDRESS + $98;
=11530393				OPM_99_B_C2_KS_AR			= OPM_BASE_ADDRESS + $99;
=11530394				OPM_9A_C_C2_KS_AR			= OPM_BASE_ADDRESS + $9A;
=11530395				OPM_9B_D_C2_KS_AR			= OPM_BASE_ADDRESS + $9B;
=11530396				OPM_9C_E_C2_KS_AR			= OPM_BASE_ADDRESS + $9C;
=11530397				OPM_9D_F_C2_KS_AR			= OPM_BASE_ADDRESS + $9D;
=11530398				OPM_9E_G_C2_KS_AR			= OPM_BASE_ADDRESS + $9E;
=11530399				OPM_9F_H_C2_KS_AR			= OPM_BASE_ADDRESS + $9F;
=11530400				OPM_A0_A_M1_AMS_EN_D1R		= OPM_BASE_ADDRESS + $A0;
=11530401				OPM_A1_B_M1_AMS_EN_D1R		= OPM_BASE_ADDRESS + $A1;
=11530402				OPM_A2_C_M1_AMS_EN_D1R		= OPM_BASE_ADDRESS + $A2;
=11530403				OPM_A3_D_M1_AMS_EN_D1R		= OPM_BASE_ADDRESS + $A3;
=11530404				OPM_A4_E_M1_AMS_EN_D1R		= OPM_BASE_ADDRESS + $A4;
=11530405				OPM_A5_F_M1_AMS_EN_D1R		= OPM_BASE_ADDRESS + $A5;
=11530406				OPM_A6_G_M1_AMS_EN_D1R		= OPM_BASE_ADDRESS + $A6;
=11530407				OPM_A7_H_M1_AMS_EN_D1R		= OPM_BASE_ADDRESS + $A7;
=11530408				OPM_A8_A_M2_AMS_EN_D1R		= OPM_BASE_ADDRESS + $A8;
=11530409				OPM_A9_B_M2_AMS_EN_D1R		= OPM_BASE_ADDRESS + $A9;
=11530410				OPM_AA_C_M2_AMS_EN_D1R		= OPM_BASE_ADDRESS + $AA;
=11530411				OPM_AB_D_M2_AMS_EN_D1R		= OPM_BASE_ADDRESS + $AB;
=11530412				OPM_AC_E_M2_AMS_EN_D1R		= OPM_BASE_ADDRESS + $AC;
=11530413				OPM_AD_F_M2_AMS_EN_D1R		= OPM_BASE_ADDRESS + $AD;
=11530414				OPM_AE_G_M2_AMS_EN_D1R		= OPM_BASE_ADDRESS + $AE;
=11530415				OPM_AF_H_M2_AMS_EN_D1R		= OPM_BASE_ADDRESS + $AF;
=11530416				OPM_B0_A_C1_AMS_EN_D1R		= OPM_BASE_ADDRESS + $B0;
=11530417				OPM_B1_B_C1_AMS_EN_D1R		= OPM_BASE_ADDRESS + $B1;
=11530418				OPM_B2_C_C1_AMS_EN_D1R		= OPM_BASE_ADDRESS + $B2;
=11530419				OPM_B3_D_C1_AMS_EN_D1R		= OPM_BASE_ADDRESS + $B3;
=11530420				OPM_B4_E_C1_AMS_EN_D1R		= OPM_BASE_ADDRESS + $B4;
=11530421				OPM_B5_F_C1_AMS_EN_D1R		= OPM_BASE_ADDRESS + $B5;
=11530422				OPM_B6_G_C1_AMS_EN_D1R		= OPM_BASE_ADDRESS + $B6;
=11530423				OPM_B7_H_C1_AMS_EN_D1R		= OPM_BASE_ADDRESS + $B7;
=11530424				OPM_B8_A_C2_AMS_EN_D1R		= OPM_BASE_ADDRESS + $B8;
=11530425				OPM_B9_B_C2_AMS_EN_D1R		= OPM_BASE_ADDRESS + $B9;
=11530426				OPM_BA_C_C2_AMS_EN_D1R		= OPM_BASE_ADDRESS + $BA;
=11530427				OPM_BB_D_C2_AMS_EN_D1R		= OPM_BASE_ADDRESS + $BB;
=11530428				OPM_BC_E_C2_AMS_EN_D1R		= OPM_BASE_ADDRESS + $BC;
=11530429				OPM_BD_F_C2_AMS_EN_D1R		= OPM_BASE_ADDRESS + $BD;
=11530430				OPM_BE_G_C2_AMS_EN_D1R		= OPM_BASE_ADDRESS + $BE;
=11530431				OPM_BF_H_C2_AMS_EN_D1R		= OPM_BASE_ADDRESS + $BF;
=11530432				OPM_C0_A_M1_DT2_D2R			= OPM_BASE_ADDRESS + $C0;
=11530433				OPM_C1_B_M1_DT2_D2R			= OPM_BASE_ADDRESS + $C1;
=11530434				OPM_C2_C_M1_DT2_D2R			= OPM_BASE_ADDRESS + $C2;
=11530435				OPM_C3_D_M1_DT2_D2R			= OPM_BASE_ADDRESS + $C3;
=11530436				OPM_C4_E_M1_DT2_D2R			= OPM_BASE_ADDRESS + $C4;
=11530437				OPM_C5_F_M1_DT2_D2R			= OPM_BASE_ADDRESS + $C5;
=11530438				OPM_C6_G_M1_DT2_D2R			= OPM_BASE_ADDRESS + $C6;
=11530439				OPM_C7_H_M1_DT2_D2R			= OPM_BASE_ADDRESS + $C7;
=11530440				OPM_C8_A_M2_DT2_D2R			= OPM_BASE_ADDRESS + $C8;
=11530441				OPM_C9_B_M2_DT2_D2R			= OPM_BASE_ADDRESS + $C9;
=11530442				OPM_CA_C_M2_DT2_D2R			= OPM_BASE_ADDRESS + $CA;
=11530443				OPM_CB_D_M2_DT2_D2R			= OPM_BASE_ADDRESS + $CB;
=11530444				OPM_CC_E_M2_DT2_D2R			= OPM_BASE_ADDRESS + $CC;
=11530445				OPM_CD_F_M2_DT2_D2R			= OPM_BASE_ADDRESS + $CD;
=11530446				OPM_CE_G_M2_DT2_D2R			= OPM_BASE_ADDRESS + $CE;
=11530447				OPM_CF_H_M2_DT2_D2R			= OPM_BASE_ADDRESS + $CF;
=11530448				OPM_D0_A_C1_DT2_D2R			= OPM_BASE_ADDRESS + $D0;
=11530449				OPM_D1_B_C1_DT2_D2R			= OPM_BASE_ADDRESS + $D1;
=11530450				OPM_D2_C_C1_DT2_D2R			= OPM_BASE_ADDRESS + $D2;
=11530451				OPM_D3_D_C1_DT2_D2R			= OPM_BASE_ADDRESS + $D3;
=11530452				OPM_D4_E_C1_DT2_D2R			= OPM_BASE_ADDRESS + $D4;
=11530453				OPM_D5_F_C1_DT2_D2R			= OPM_BASE_ADDRESS + $D5;
=11530454				OPM_D6_G_C1_DT2_D2R			= OPM_BASE_ADDRESS + $D6;
=11530455				OPM_D7_H_C1_DT2_D2R			= OPM_BASE_ADDRESS + $D7;
=11530456				OPM_D8_A_C2_DT2_D2R			= OPM_BASE_ADDRESS + $D8;
=11530457				OPM_D9_B_C2_DT2_D2R			= OPM_BASE_ADDRESS + $D9;
=11530458				OPM_DA_C_C2_DT2_D2R			= OPM_BASE_ADDRESS + $DA;
=11530459				OPM_DB_D_C2_DT2_D2R			= OPM_BASE_ADDRESS + $DB;
=11530460				OPM_DC_E_C2_DT2_D2R			= OPM_BASE_ADDRESS + $DC;
=11530461				OPM_DD_F_C2_DT2_D2R			= OPM_BASE_ADDRESS + $DD;
=11530462				OPM_DE_G_C2_DT2_D2R			= OPM_BASE_ADDRESS + $DE;
=11530463				OPM_DF_H_C2_DT2_D2R			= OPM_BASE_ADDRESS + $DF;
=11530464				OPM_E0_A_M1_D1L_RR			= OPM_BASE_ADDRESS + $E0;
=11530465				OPM_E1_B_M1_D1L_RR			= OPM_BASE_ADDRESS + $E1;
=11530466				OPM_E2_C_M1_D1L_RR			= OPM_BASE_ADDRESS + $E2;
=11530467				OPM_E3_D_M1_D1L_RR			= OPM_BASE_ADDRESS + $E3;
=11530468				OPM_E4_E_M1_D1L_RR			= OPM_BASE_ADDRESS + $E4;
=11530469				OPM_E5_F_M1_D1L_RR			= OPM_BASE_ADDRESS + $E5;
=11530470				OPM_E6_G_M1_D1L_RR			= OPM_BASE_ADDRESS + $E6;
=11530471				OPM_E7_H_M1_D1L_RR			= OPM_BASE_ADDRESS + $E7;
=11530472				OPM_E8_A_M2_D1L_RR			= OPM_BASE_ADDRESS + $E8;
=11530473				OPM_E9_B_M2_D1L_RR			= OPM_BASE_ADDRESS + $E9;
=11530474				OPM_EA_C_M2_D1L_RR			= OPM_BASE_ADDRESS + $EA;
=11530475				OPM_EB_D_M2_D1L_RR			= OPM_BASE_ADDRESS + $EB;
=11530476				OPM_EC_E_M2_D1L_RR			= OPM_BASE_ADDRESS + $EC;
=11530477				OPM_ED_F_M2_D1L_RR			= OPM_BASE_ADDRESS + $ED;
=11530478				OPM_EE_G_M2_D1L_RR			= OPM_BASE_ADDRESS + $EE;
=11530479				OPM_EF_H_M2_D1L_RR			= OPM_BASE_ADDRESS + $EF;
=11530480				OPM_F0_A_C1_D1L_RR			= OPM_BASE_ADDRESS + $F0;
=11530481				OPM_F1_B_C1_D1L_RR			= OPM_BASE_ADDRESS + $F1;
=11530482				OPM_F2_C_C1_D1L_RR			= OPM_BASE_ADDRESS + $F2;
=11530483				OPM_F3_D_C1_D1L_RR			= OPM_BASE_ADDRESS + $F3;
=11530484				OPM_F4_E_C1_D1L_RR			= OPM_BASE_ADDRESS + $F4;
=11530485				OPM_F5_F_C1_D1L_RR			= OPM_BASE_ADDRESS + $F5;
=11530486				OPM_F6_G_C1_D1L_RR			= OPM_BASE_ADDRESS + $F6;
=11530487				OPM_F7_H_C1_D1L_RR			= OPM_BASE_ADDRESS + $F7;
=11530488				OPM_F8_A_C2_D1L_RR			= OPM_BASE_ADDRESS + $F8;
=11530489				OPM_F9_B_C2_D1L_RR			= OPM_BASE_ADDRESS + $F9;
=11530490				OPM_FA_C_C2_D1L_RR			= OPM_BASE_ADDRESS + $FA;
=11530491				OPM_FB_D_C2_D1L_RR			= OPM_BASE_ADDRESS + $FB;
=11530492				OPM_FC_E_C2_D1L_RR			= OPM_BASE_ADDRESS + $FC;
=11530493				OPM_FD_F_C2_D1L_RR			= OPM_BASE_ADDRESS + $FD;
=11530494				OPM_FE_G_C2_D1L_RR			= OPM_BASE_ADDRESS + $FE;
=11530495				OPM_FF_H_C2_D1L_RR			= OPM_BASE_ADDRESS + $FF;

;******  Return to file: src\YM26XX.asm

.39900c					YM2612_test_piano
.39900c	e2 20		sep #$20	                SEP #$20        ; set A short
.39900e	a9 00		lda #$00				LDA #$0;
.399010	8f 22 f2 af	sta $aff222				STA OPN2_22_LFO ; LFO off
.399014	a9 00		lda #$00				LDA #$0;
.399016	8f 27 f2 af	sta $aff227				STA OPN2_27_CHANEL_3_MODE; chanel 3 in normal mode
.39901a	a9 00		lda #$00				LDA #$0;
.39901c	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF
.399020	a9 01		lda #$01				LDA #$1;
.399022	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF
.399026	a9 02		lda #$02				LDA #$2;
.399028	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF
.39902c	a9 04		lda #$04				LDA #$4;
.39902e	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF
.399032	a9 05		lda #$05				LDA #$5;
.399034	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF
.399038	a9 06		lda #$06				LDA #$6;
.39903a	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF
.39903e	a9 00		lda #$00				LDA #$0;
.399040	8f 2b f2 af	sta $aff22b				STA OPN2_2B_ADC_EN
.399044	a9 71		lda #$71				LDA #$71	;
.399046	8f 30 f2 af	sta $aff230				STA OPN2_30_ADSR__DT1_MUL__CH1_OP1
.39904a	8f 31 f2 af	sta $aff231				STA OPN2_31_ADSR__DT1_MUL__CH2_OP1
.39904e	8f 32 f2 af	sta $aff232				STA OPN2_32_ADSR__DT1_MUL__CH3_OP1
.399052	8f 30 f3 af	sta $aff330				STA OPN2_30_ADSR__DT1_MUL__CH1_OP5
.399056	8f 31 f3 af	sta $aff331				STA OPN2_31_ADSR__DT1_MUL__CH2_OP5
.39905a	8f 32 f3 af	sta $aff332				STA OPN2_32_ADSR__DT1_MUL__CH3_OP5
.39905e	a9 0d		lda #$0d				LDA #$0D	;
.399060	8f 34 f2 af	sta $aff234				STA OPN2_34_ADSR__DT1_MUL__CH1_OP2
.399064	8f 35 f2 af	sta $aff235				STA OPN2_35_ADSR__DT1_MUL__CH2_OP2
.399068	8f 36 f2 af	sta $aff236				STA OPN2_36_ADSR__DT1_MUL__CH3_OP2
.39906c	8f 34 f3 af	sta $aff334				STA OPN2_34_ADSR__DT1_MUL__CH1_OP6
.399070	8f 35 f3 af	sta $aff335				STA OPN2_35_ADSR__DT1_MUL__CH2_OP6
.399074	8f 36 f3 af	sta $aff336				STA OPN2_36_ADSR__DT1_MUL__CH3_OP6
.399078	a9 33		lda #$33				LDA #$33	;
.39907a	8f 38 f2 af	sta $aff238				STA OPN2_38_ADSR__DT1_MUL__CH1_OP3	;
.39907e	8f 39 f2 af	sta $aff239				STA OPN2_39_ADSR__DT1_MUL__CH2_OP3
.399082	8f 3a f2 af	sta $aff23a				STA OPN2_3A_ADSR__DT1_MUL__CH3_OP3
.399086	8f 38 f3 af	sta $aff338				STA OPN2_38_ADSR__DT1_MUL__CH1_OP7	;
.39908a	8f 39 f3 af	sta $aff339				STA OPN2_39_ADSR__DT1_MUL__CH2_OP7
.39908e	8f 3a f3 af	sta $aff33a				STA OPN2_3A_ADSR__DT1_MUL__CH3_OP7
.399092	a9 01		lda #$01				LDA #$01	;
.399094	8f 3c f2 af	sta $aff23c				STA OPN2_3C_ADSR__DT1_MUL__CH1_OP4	;
.399098	8f 3d f2 af	sta $aff23d				STA OPN2_3D_ADSR__DT1_MUL__CH2_OP4
.39909c	8f 3e f2 af	sta $aff23e				STA OPN2_3E_ADSR__DT1_MUL__CH3_OP4
.3990a0	8f 3c f3 af	sta $aff33c				STA OPN2_3C_ADSR__DT1_MUL__CH1_OP8	;
.3990a4	8f 3d f3 af	sta $aff33d				STA OPN2_3D_ADSR__DT1_MUL__CH2_OP8
.3990a8	8f 3e f3 af	sta $aff33e				STA OPN2_3E_ADSR__DT1_MUL__CH3_OP8
.3990ac	a9 23		lda #$23				LDA #$23	;
.3990ae	8f 40 f2 af	sta $aff240				STA OPN2_40_ADSR__LT__CH1_OP1	;
.3990b2	8f 41 f2 af	sta $aff241				STA OPN2_41_ADSR__LT__CH2_OP1
.3990b6	8f 42 f2 af	sta $aff242				STA OPN2_42_ADSR__LT__CH3_OP1
.3990ba	8f 40 f3 af	sta $aff340				STA OPN2_40_ADSR__LT__CH1_OP5	;
.3990be	8f 41 f3 af	sta $aff341				STA OPN2_41_ADSR__LT__CH2_OP5
.3990c2	8f 42 f3 af	sta $aff342				STA OPN2_42_ADSR__LT__CH3_OP5
.3990c6	a9 2d		lda #$2d				LDA #$2D	;
.3990c8	8f 44 f2 af	sta $aff244				STA OPN2_44_ADSR__LT__CH1_OP2	;
.3990cc	8f 45 f2 af	sta $aff245				STA OPN2_45_ADSR__LT__CH2_OP2
.3990d0	8f 46 f2 af	sta $aff246				STA OPN2_46_ADSR__LT__CH3_OP2
.3990d4	8f 44 f3 af	sta $aff344				STA OPN2_44_ADSR__LT__CH1_OP6	;
.3990d8	8f 45 f3 af	sta $aff345				STA OPN2_45_ADSR__LT__CH2_OP6
.3990dc	8f 46 f3 af	sta $aff346				STA OPN2_46_ADSR__LT__CH3_OP6
.3990e0	a9 26		lda #$26				LDA #$26	;
.3990e2	8f 48 f2 af	sta $aff248				STA OPN2_48_ADSR__LT__CH1_OP3	;
.3990e6	8f 49 f2 af	sta $aff249				STA OPN2_49_ADSR__LT__CH2_OP3
.3990ea	8f 4a f2 af	sta $aff24a				STA OPN2_4A_ADSR__LT__CH3_OP3
.3990ee	8f 48 f3 af	sta $aff348				STA OPN2_48_ADSR__LT__CH1_OP7	;
.3990f2	8f 49 f3 af	sta $aff349				STA OPN2_49_ADSR__LT__CH2_OP7
.3990f6	8f 4a f3 af	sta $aff34a				STA OPN2_4A_ADSR__LT__CH3_OP7
.3990fa	a9 00		lda #$00				LDA #$00	;
.3990fc	8f 4c f2 af	sta $aff24c				STA OPN2_4C_ADSR__LT__CH1_OP4	;
.399100	8f 4d f2 af	sta $aff24d				STA OPN2_4D_ADSR__LT__CH2_OP4
.399104	8f 4e f2 af	sta $aff24e				STA OPN2_4E_ADSR__LT__CH3_OP4
.399108	8f 4c f3 af	sta $aff34c				STA OPN2_4C_ADSR__LT__CH1_OP8	;
.39910c	8f 4d f3 af	sta $aff34d				STA OPN2_4D_ADSR__LT__CH2_OP8
.399110	8f 4e f3 af	sta $aff34e				STA OPN2_4E_ADSR__LT__CH3_OP8
.399114	a9 5f		lda #$5f				LDA #$5F	;
.399116	8f 50 f2 af	sta $aff250				STA OPN2_50_ADSR__SR_AR__CH1_OP1	;
.39911a	8f 51 f2 af	sta $aff251				STA OPN2_51_ADSR__SR_AR__CH2_OP1	;
.39911e	8f 52 f2 af	sta $aff252				STA OPN2_52_ADSR__SR_AR__CH3_OP1	;
.399122	8f 50 f3 af	sta $aff350				STA OPN2_50_ADSR__SR_AR__CH1_OP5	;
.399126	8f 51 f3 af	sta $aff351				STA OPN2_51_ADSR__SR_AR__CH2_OP5	;
.39912a	8f 52 f3 af	sta $aff352				STA OPN2_52_ADSR__SR_AR__CH3_OP5	;
.39912e	a9 99		lda #$99				LDA #$99	;
.399130	8f 54 f2 af	sta $aff254				STA OPN2_54_ADSR__SR_AR__CH1_OP2	;
.399134	8f 55 f2 af	sta $aff255				STA OPN2_55_ADSR__SR_AR__CH2_OP2	;
.399138	8f 56 f2 af	sta $aff256				STA OPN2_56_ADSR__SR_AR__CH3_OP2	;
.39913c	8f 54 f3 af	sta $aff354				STA OPN2_54_ADSR__SR_AR__CH1_OP6	;
.399140	8f 55 f3 af	sta $aff355				STA OPN2_55_ADSR__SR_AR__CH2_OP6	;
.399144	8f 56 f3 af	sta $aff356				STA OPN2_56_ADSR__SR_AR__CH3_OP6	;
.399148	a9 5f		lda #$5f				LDA #$5F	;
.39914a	8f 58 f2 af	sta $aff258				STA OPN2_58_ADSR__SR_AR__CH1_OP3	;
.39914e	8f 59 f2 af	sta $aff259				STA OPN2_59_ADSR__SR_AR__CH2_OP3	;
.399152	8f 5a f2 af	sta $aff25a				STA OPN2_5A_ADSR__SR_AR__CH3_OP3	;
.399156	8f 58 f3 af	sta $aff358				STA OPN2_58_ADSR__SR_AR__CH1_OP7	;
.39915a	8f 59 f3 af	sta $aff359				STA OPN2_59_ADSR__SR_AR__CH2_OP7	;
.39915e	8f 5a f3 af	sta $aff35a				STA OPN2_5A_ADSR__SR_AR__CH3_OP7	;
.399162	a9 94		lda #$94				LDA #$94	;
.399164	8f 5c f2 af	sta $aff25c				STA OPN2_5C_ADSR__SR_AR__CH1_OP4	;
.399168	8f 5d f2 af	sta $aff25d				STA OPN2_5D_ADSR__SR_AR__CH2_OP4	;
.39916c	8f 5e f2 af	sta $aff25e				STA OPN2_5E_ADSR__SR_AR__CH3_OP4	;
.399170	8f 5c f3 af	sta $aff35c				STA OPN2_5C_ADSR__SR_AR__CH1_OP8	;
.399174	8f 5d f3 af	sta $aff35d				STA OPN2_5D_ADSR__SR_AR__CH2_OP8	;
.399178	8f 5e f3 af	sta $aff35e				STA OPN2_5E_ADSR__SR_AR__CH3_OP8	;
.39917c	a9 07		lda #$07				LDA #$7 	;
.39917e	8f 60 f2 af	sta $aff260				STA OPN2_60_ADSR__AM_D1R__CH1_OP1	;
.399182	8f 61 f2 af	sta $aff261				STA OPN2_61_ADSR__AM_D1R__CH2_OP1	;
.399186	8f 62 f2 af	sta $aff262				STA OPN2_62_ADSR__AM_D1R__CH3_OP1	;
.39918a	8f 60 f3 af	sta $aff360				STA OPN2_60_ADSR__AM_D1R__CH1_OP5	;
.39918e	8f 61 f3 af	sta $aff361				STA OPN2_61_ADSR__AM_D1R__CH2_OP5	;
.399192	8f 62 f3 af	sta $aff362				STA OPN2_62_ADSR__AM_D1R__CH3_OP5	;
.399196	a9 07		lda #$07				LDA #$7 	;
.399198	8f 64 f2 af	sta $aff264				STA OPN2_64_ADSR__AM_D1R__CH1_OP2	;
.39919c	8f 65 f2 af	sta $aff265				STA OPN2_65_ADSR__AM_D1R__CH2_OP2	;
.3991a0	8f 66 f2 af	sta $aff266				STA OPN2_66_ADSR__AM_D1R__CH3_OP2	;
.3991a4	8f 64 f3 af	sta $aff364				STA OPN2_64_ADSR__AM_D1R__CH1_OP6	;
.3991a8	8f 65 f3 af	sta $aff365				STA OPN2_65_ADSR__AM_D1R__CH2_OP6	;
.3991ac	8f 66 f3 af	sta $aff366				STA OPN2_66_ADSR__AM_D1R__CH3_OP6	;
.3991b0	a9 05		lda #$05				LDA #$5 	;
.3991b2	8f 68 f2 af	sta $aff268				STA OPN2_68_ADSR__AM_D1R__CH1_OP3	;
.3991b6	8f 69 f2 af	sta $aff269				STA OPN2_69_ADSR__AM_D1R__CH2_OP3	;
.3991ba	8f 6a f2 af	sta $aff26a				STA OPN2_6A_ADSR__AM_D1R__CH3_OP3	;
.3991be	8f 68 f3 af	sta $aff368				STA OPN2_68_ADSR__AM_D1R__CH1_OP7	;
.3991c2	8f 69 f3 af	sta $aff369				STA OPN2_69_ADSR__AM_D1R__CH2_OP7	;
.3991c6	8f 6a f3 af	sta $aff36a				STA OPN2_6A_ADSR__AM_D1R__CH3_OP7	;
.3991ca	a9 07		lda #$07				LDA #$7 	;
.3991cc	8f 6c f2 af	sta $aff26c				STA OPN2_6C_ADSR__AM_D1R__CH1_OP4	;
.3991d0	8f 6d f2 af	sta $aff26d				STA OPN2_6D_ADSR__AM_D1R__CH2_OP4	;
.3991d4	8f 6e f2 af	sta $aff26e				STA OPN2_6E_ADSR__AM_D1R__CH3_OP4	;
.3991d8	8f 6c f3 af	sta $aff36c				STA OPN2_6C_ADSR__AM_D1R__CH1_OP8	;
.3991dc	8f 6d f3 af	sta $aff36d				STA OPN2_6D_ADSR__AM_D1R__CH2_OP8	;
.3991e0	8f 6e f3 af	sta $aff36e				STA OPN2_6E_ADSR__AM_D1R__CH3_OP8	;
.3991e4	a9 02		lda #$02				LDA #$2 	;
.3991e6	8f 70 f2 af	sta $aff270				STA OPN2_70_ADSR__D2R__CH1_OP1	;
.3991ea	8f 71 f2 af	sta $aff271				STA OPN2_71_ADSR__D2R__CH2_OP1	;
.3991ee	8f 72 f2 af	sta $aff272				STA OPN2_72_ADSR__D2R__CH3_OP1	;
.3991f2	8f 70 f3 af	sta $aff370				STA OPN2_70_ADSR__D2R__CH1_OP5	;
.3991f6	8f 71 f3 af	sta $aff371				STA OPN2_71_ADSR__D2R__CH2_OP5	;
.3991fa	8f 72 f3 af	sta $aff372				STA OPN2_72_ADSR__D2R__CH3_OP5	;
.3991fe	a9 02		lda #$02				LDA #$2 	;
.399200	8f 74 f2 af	sta $aff274				STA OPN2_74_ADSR__D2R__CH1_OP2	;
.399204	8f 75 f2 af	sta $aff275				STA OPN2_75_ADSR__D2R__CH2_OP2	;
.399208	8f 76 f2 af	sta $aff276				STA OPN2_76_ADSR__D2R__CH3_OP2	;
.39920c	8f 74 f3 af	sta $aff374				STA OPN2_74_ADSR__D2R__CH1_OP6	;
.399210	8f 75 f3 af	sta $aff375				STA OPN2_75_ADSR__D2R__CH2_OP6	;
.399214	8f 76 f3 af	sta $aff376				STA OPN2_76_ADSR__D2R__CH3_OP6	;
.399218	a9 02		lda #$02				LDA #$2 	;
.39921a	8f 78 f2 af	sta $aff278				STA OPN2_78_ADSR__D2R__CH1_OP3	;
.39921e	8f 79 f2 af	sta $aff279				STA OPN2_79_ADSR__D2R__CH2_OP3	;
.399222	8f 7a f2 af	sta $aff27a				STA OPN2_7A_ADSR__D2R__CH3_OP3	;
.399226	8f 78 f3 af	sta $aff378				STA OPN2_78_ADSR__D2R__CH1_OP7	;
.39922a	8f 79 f3 af	sta $aff379				STA OPN2_79_ADSR__D2R__CH2_OP7	;
.39922e	8f 7a f3 af	sta $aff37a				STA OPN2_7A_ADSR__D2R__CH3_OP7	;
.399232	a9 02		lda #$02				LDA #$2 	;
.399234	8f 7c f2 af	sta $aff27c				STA OPN2_7C_ADSR__D2R__CH1_OP4	;
.399238	8f 7d f2 af	sta $aff27d				STA OPN2_7D_ADSR__D2R__CH2_OP4	;
.39923c	8f 7e f2 af	sta $aff27e				STA OPN2_7E_ADSR__D2R__CH3_OP4	;
.399240	8f 7c f3 af	sta $aff37c				STA OPN2_7C_ADSR__D2R__CH1_OP8	;
.399244	8f 7d f3 af	sta $aff37d				STA OPN2_7D_ADSR__D2R__CH2_OP8	;
.399248	8f 7e f3 af	sta $aff37e				STA OPN2_7E_ADSR__D2R__CH3_OP8	;
.39924c	a9 11		lda #$11				LDA #$11	;
.39924e	8f 80 f2 af	sta $aff280				STA OPN2_80_ADSR__D1L_RR__CH1_OP1	;
.399252	8f 81 f2 af	sta $aff281				STA OPN2_81_ADSR__D1L_RR__CH2_OP1	;
.399256	8f 82 f2 af	sta $aff282				STA OPN2_82_ADSR__D1L_RR__CH3_OP1	;
.39925a	8f 80 f3 af	sta $aff380				STA OPN2_80_ADSR__D1L_RR__CH1_OP5	;
.39925e	8f 81 f3 af	sta $aff381				STA OPN2_81_ADSR__D1L_RR__CH2_OP5	;
.399262	8f 82 f3 af	sta $aff382				STA OPN2_82_ADSR__D1L_RR__CH3_OP5	;
.399266	a9 11		lda #$11				LDA #$11	;
.399268	8f 84 f2 af	sta $aff284				STA OPN2_84_ADSR__D1L_RR__CH1_OP2	;
.39926c	8f 85 f2 af	sta $aff285				STA OPN2_85_ADSR__D1L_RR__CH2_OP2	;
.399270	8f 86 f2 af	sta $aff286				STA OPN2_86_ADSR__D1L_RR__CH3_OP2	;
.399274	8f 84 f3 af	sta $aff384				STA OPN2_84_ADSR__D1L_RR__CH1_OP6	;
.399278	8f 85 f3 af	sta $aff385				STA OPN2_85_ADSR__D1L_RR__CH2_OP6	;
.39927c	8f 86 f3 af	sta $aff386				STA OPN2_86_ADSR__D1L_RR__CH3_OP6	;
.399280	a9 11		lda #$11				LDA #$11	;
.399282	8f 88 f2 af	sta $aff288				STA OPN2_88_ADSR__D1L_RR__CH1_OP3	;
.399286	8f 89 f2 af	sta $aff289				STA OPN2_89_ADSR__D1L_RR__CH2_OP3	;
.39928a	8f 8a f2 af	sta $aff28a				STA OPN2_8A_ADSR__D1L_RR__CH3_OP3	;
.39928e	8f 88 f3 af	sta $aff388				STA OPN2_88_ADSR__D1L_RR__CH1_OP7	;
.399292	8f 89 f3 af	sta $aff389				STA OPN2_89_ADSR__D1L_RR__CH2_OP7	;
.399296	8f 8a f3 af	sta $aff38a				STA OPN2_8A_ADSR__D1L_RR__CH3_OP7	;
.39929a	a9 a6		lda #$a6				LDA #$A6	;
.39929c	8f 8c f2 af	sta $aff28c				STA OPN2_8C_ADSR__D1L_RR__CH1_OP4;
.3992a0	8f 8d f2 af	sta $aff28d				STA OPN2_8D_ADSR__D1L_RR__CH2_OP4;
.3992a4	8f 8e f2 af	sta $aff28e				STA OPN2_8E_ADSR__D1L_RR__CH3_OP4;
.3992a8	8f 8c f3 af	sta $aff38c				STA OPN2_8C_ADSR__D1L_RR__CH1_OP8;
.3992ac	8f 8d f3 af	sta $aff38d				STA OPN2_8D_ADSR__D1L_RR__CH2_OP8;
.3992b0	8f 8e f3 af	sta $aff38e				STA OPN2_8E_ADSR__D1L_RR__CH3_OP8;
.3992b4	a9 00		lda #$00				LDA #$0 	;
.3992b6	8f 90 f2 af	sta $aff290				STA OPN2_90_ADSR__D1L_RR__CH1_OP1	;
.3992ba	8f 91 f2 af	sta $aff291				STA OPN2_91_ADSR__D1L_RR__CH2_OP1	;
.3992be	8f 92 f2 af	sta $aff292				STA OPN2_92_ADSR__D1L_RR__CH3_OP1	;
.3992c2	8f 90 f3 af	sta $aff390				STA OPN2_90_ADSR__D1L_RR__CH4_OP1	;
.3992c6	8f 91 f3 af	sta $aff391				STA OPN2_91_ADSR__D1L_RR__CH5_OP1	;
.3992ca	8f 92 f3 af	sta $aff392				STA OPN2_92_ADSR__D1L_RR__CH6_OP1	;
.3992ce	a9 00		lda #$00				LDA #$0 	;
.3992d0	8f 94 f2 af	sta $aff294				STA OPN2_94_ADSR__D1L_RR__CH1_OP2	;
.3992d4	8f 95 f2 af	sta $aff295				STA OPN2_95_ADSR__D1L_RR__CH2_OP2	;
.3992d8	8f 96 f2 af	sta $aff296				STA OPN2_96_ADSR__D1L_RR__CH3_OP2	;
.3992dc	8f 94 f3 af	sta $aff394				STA OPN2_94_ADSR__D1L_RR__CH4_OP2	;
.3992e0	8f 95 f3 af	sta $aff395				STA OPN2_95_ADSR__D1L_RR__CH5_OP2	;
.3992e4	8f 96 f3 af	sta $aff396				STA OPN2_96_ADSR__D1L_RR__CH6_OP2	;
.3992e8	a9 00		lda #$00				LDA #$0 	;
.3992ea	8f 98 f2 af	sta $aff298				STA OPN2_98_ADSR__D1L_RR__CH1_OP3	;
.3992ee	8f 99 f2 af	sta $aff299				STA OPN2_99_ADSR__D1L_RR__CH2_OP3	;
.3992f2	8f 9a f2 af	sta $aff29a				STA OPN2_9A_ADSR__D1L_RR__CH3_OP3	;
.3992f6	8f 98 f3 af	sta $aff398				STA OPN2_98_ADSR__D1L_RR__CH4_OP3	;
.3992fa	8f 99 f3 af	sta $aff399				STA OPN2_99_ADSR__D1L_RR__CH5_OP3	;
.3992fe	8f 9a f3 af	sta $aff39a				STA OPN2_9A_ADSR__D1L_RR__CH6_OP3	;
.399302	a9 00		lda #$00				LDA #$0 	;
.399304	8f 9c f2 af	sta $aff29c				STA OPN2_9C_ADSR__D1L_RR__CH1_OP4	;
.399308	8f 9d f2 af	sta $aff29d				STA OPN2_9D_ADSR__D1L_RR__CH2_OP4	;
.39930c	8f 9e f2 af	sta $aff29e				STA OPN2_9E_ADSR__D1L_RR__CH3_OP4	;
.399310	8f 9c f3 af	sta $aff39c				STA OPN2_9C_ADSR__D1L_RR__CH4_OP4	;
.399314	8f 9d f3 af	sta $aff39d				STA OPN2_9D_ADSR__D1L_RR__CH5_OP4	;
.399318	8f 9e f3 af	sta $aff39e				STA OPN2_9E_ADSR__D1L_RR__CH6_OP4	;
.39931c	a9 32		lda #$32				LDA #$32	;
.39931e	8f b0 f2 af	sta $aff2b0				STA OPN2_B0_CH1_FEEDBACK_ALGO	;
.399322	8f b1 f2 af	sta $aff2b1				STA OPN2_B1_CH2_FEEDBACK_ALGO	;
.399326	8f b2 f2 af	sta $aff2b2				STA OPN2_B2_CH3_FEEDBACK_ALGO	;
.39932a	a9 c0		lda #$c0				LDA #$C0	;  	Both speakers on
.39932c	8f b4 f2 af	sta $aff2b4				STA OPN2_B4_CH1_L_R_AMS_FMS	;
.399330	8f b5 f2 af	sta $aff2b5				STA OPN2_B5_CH2_L_R_AMS_FMS	;
.399334	8f b6 f2 af	sta $aff2b6				STA OPN2_B6_CH3_L_R_AMS_FMS	;
.399338	a9 23		lda #$23				LDA #$23	;  	Set frequency
.39933a	8f a4 f2 af	sta $aff2a4				STA OPN2_A4_CH1_OCTAVE_FRECANCY_H	;
.39933e	a9 22		lda #$22				LDA #$22	;  	Set frequency
.399340	8f a5 f2 af	sta $aff2a5				STA OPN2_A5_CH2_OCTAVE_FRECANCY_H	;
.399344	a9 22		lda #$22				LDA #$22	;  	Set frequency
.399346	8f a6 f2 af	sta $aff2a6				STA OPN2_A6_CH3_OCTAVE_FRECANCY_H	;
.39934a	a9 9c		lda #$9c				LDA #$9C	;
.39934c	8f a0 f2 af	sta $aff2a0				STA OPN2_A0_CH1_FRECANCY_L	;
.399350	8f a1 f2 af	sta $aff2a1				STA OPN2_A1_CH2_FRECANCY_L	;
.399354	a9 24		lda #$24				LDA #$24	;
.399356	8f a2 f2 af	sta $aff2a2				STA OPN2_A2_CH3_FRECANCY_L	;
.39935a	a9 00		lda #$00				LDA #$00	;  	Key off
.39935c	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF	;
.399360	c2 10		rep #$10	                REP #$10        ; set X long
.399362					YM2612_test_piano__LOOP_FOR_EVER
.399362	a9 f0		lda #$f0				LDA #$F0;
.399364	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF
.399368	a9 f1		lda #$f1				LDA #$F1;
.39936a	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF
.39936e	a9 f2		lda #$f2				LDA #$F2;
.399370	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF
.399374	a9 f4		lda #$f4				LDA #$F4;
.399376	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF
.39937a	a9 f5		lda #$f5				LDA #$F5;
.39937c	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF
.399380	a9 f6		lda #$f6				LDA #$F6;
.399382	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF
.399386	a2 00 40	ldx #$4000				LDX #16384      ; 400ms
.399389	22 37 96 39	jsl $399637			 	JSL ILOOP_MS
.39938d	a9 00		lda #$00				LDA #$0;
.39938f	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF
.399393	a9 01		lda #$01				LDA #$1;
.399395	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF
.399399	a9 02		lda #$02				LDA #$2;
.39939b	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF
.39939f	a9 04		lda #$04				LDA #$4;
.3993a1	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF
.3993a5	a9 05		lda #$05				LDA #$5;
.3993a7	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF
.3993ab	a9 06		lda #$06				LDA #$6;
.3993ad	8f 28 f2 af	sta $aff228				STA OPN2_28_KEY_ON_OFF
.3993b1	a2 00 40	ldx #$4000				LDX #16384      ; 400ms
.3993b4	22 37 96 39	jsl $399637			 	JSL ILOOP_MS
.3993b8	6b		rtl					RTL
.3993b9								YM2151_test
.3993b9	e2 20		sep #$20	                SEP #$20        ; set A short
.3993bb	a9 90		lda #$90							LDA #$90
.3993bd	8f 0f f0 af	sta $aff00f							STA OPM_0F_NE_NFREQ
.3993c1	a9 55		lda #$55							LDA #$55
.3993c3	8f 18 f0 af	sta $aff018							STA OPM_18_LFRQ
.3993c7	a9 d7		lda #$d7							LDA #$D7
.3993c9	8f 20 f0 af	sta $aff020							STA OPM_20_A_RL_FR_CONNECT
.3993cd	8f 21 f0 af	sta $aff021							STA OPM_21_B_RL_FR_CONNECT
.3993d1	8f 22 f0 af	sta $aff022							STA OPM_22_C_RL_FR_CONNECT
.3993d5	8f 23 f0 af	sta $aff023							STA OPM_23_D_RL_FR_CONNECT
.3993d9	8f 24 f0 af	sta $aff024							STA OPM_24_E_RL_FR_CONNECT
.3993dd	8f 25 f0 af	sta $aff025							STA OPM_25_F_RL_FR_CONNECT
.3993e1	8f 26 f0 af	sta $aff026							STA OPM_26_G_RL_FR_CONNECT
.3993e5	8f 27 f0 af	sta $aff027							STA OPM_27_H_RL_FR_CONNECT
.3993e9	a9 d7		lda #$d7							LDA #$D7	; add some feedback for the next 4 chanel
.3993eb	8f 24 f0 af	sta $aff024							STA OPM_24_E_RL_FR_CONNECT
.3993ef	8f 25 f0 af	sta $aff025							STA OPM_25_F_RL_FR_CONNECT
.3993f3	8f 26 f0 af	sta $aff026							STA OPM_26_G_RL_FR_CONNECT
.3993f7	8f 27 f0 af	sta $aff027							STA OPM_27_H_RL_FR_CONNECT
.3993fb	a9 00		lda #$00							LDA #$00
.3993fd	8f 60 f0 af	sta $aff060							STA OPM_60_A_M1_TL
.399401	8f 61 f0 af	sta $aff061							STA OPM_61_B_M1_TL
.399405	8f 68 f0 af	sta $aff068							STA OPM_68_A_M2_TL
.399409	8f 69 f0 af	sta $aff069							STA OPM_69_B_M2_TL
.39940d	8f 70 f0 af	sta $aff070							STA OPM_70_A_C1_TL
.399411	8f 71 f0 af	sta $aff071							STA OPM_71_B_C1_TL
.399415	8f 78 f0 af	sta $aff078							STA OPM_78_A_C2_TL
.399419	8f 79 f0 af	sta $aff079							STA OPM_79_B_C2_TL
.39941d	a9 55		lda #$55							LDA #$55
.39941f	8f 40 f0 af	sta $aff040							STA OPM_40_A_M1_DT1_MUL
.399423	a9 18		lda #$18							LDA #$18
.399425	8f 41 f0 af	sta $aff041							STA OPM_41_B_M1_DT1_MUL
.399429	a9 c4		lda #$c4							LDA #$C4
.39942b	8f 80 f0 af	sta $aff080							STA OPM_80_A_M1_KS_AR
.39942f	a9 c4		lda #$c4							LDA #$C4
.399431	8f 81 f0 af	sta $aff081							STA OPM_81_B_M1_KS_AR
.399435	a9 84		lda #$84							LDA #$84
.399437	8f a0 f0 af	sta $aff0a0							STA OPM_A0_A_M1_AMS_EN_D1R
.39943b	a9 85		lda #$85							LDA #$85
.39943d	8f a1 f0 af	sta $aff0a1							STA OPM_A1_B_M1_AMS_EN_D1R
.399441	a9 42		lda #$42							LDA #$42
.399443	8f c0 f0 af	sta $aff0c0							STA OPM_C0_A_M1_DT2_D2R
.399447	8f c8 f0 af	sta $aff0c8							STA OPM_C8_A_M2_DT2_D2R
.39944b	8f d0 f0 af	sta $aff0d0							STA OPM_D0_A_C1_DT2_D2R
.39944f	8f d8 f0 af	sta $aff0d8							STA OPM_D8_A_C2_DT2_D2R
.399453	a9 43		lda #$43							LDA #$43
.399455	8f c1 f0 af	sta $aff0c1							STA OPM_C1_B_M1_DT2_D2R
.399459	8f c9 f0 af	sta $aff0c9							STA OPM_C9_B_M2_DT2_D2R
.39945d	8f d1 f0 af	sta $aff0d1							STA OPM_D1_B_C1_DT2_D2R
.399461	8f d9 f0 af	sta $aff0d9							STA OPM_D9_B_C2_DT2_D2R
.399465	a9 24		lda #$24							LDA #$24
.399467	8f e0 f0 af	sta $aff0e0							STA OPM_E0_A_M1_D1L_RR
.39946b	8f e1 f0 af	sta $aff0e1							STA OPM_E1_B_M1_D1L_RR
.39946f	a9 14		lda #$14							LDA #$14
.399471	8f e8 f0 af	sta $aff0e8							STA OPM_E8_A_M2_D1L_RR
.399475	8f e9 f0 af	sta $aff0e9							STA OPM_E9_B_M2_D1L_RR
.399479	a9 24		lda #$24							LDA #$24
.39947b	8f f0 f0 af	sta $aff0f0							STA OPM_F0_A_C1_D1L_RR
.39947f	8f f1 f0 af	sta $aff0f1							STA OPM_F1_B_C1_D1L_RR
.399483	a9 44		lda #$44							LDA #$44
.399485	8f f8 f0 af	sta $aff0f8							STA OPM_F8_A_C2_D1L_RR
.399489	8f f9 f0 af	sta $aff0f9							STA OPM_F9_B_C2_D1L_RR
.39948d	a9 96		lda #$96							LDA #$96 	;	0x20 sellect the octave (0-7), 0x06 sellect the note (0-F)
.39948f	8f 28 f0 af	sta $aff028							STA OPM_28_A_KC	;
.399493	a9 1a		lda #$1a							LDA #$1A
.399495	8f 29 f0 af	sta $aff029							STA OPM_29_B_KC	;
.399499	a9 26		lda #$26							LDA #$26
.39949b	8f 2a f0 af	sta $aff02a							STA OPM_2A_C_KC	;
.39949f	a9 2a		lda #$2a							LDA #$2A
.3994a1	8f 2b f0 af	sta $aff02b							STA OPM_2B_D_KC	;
.3994a5	a9 36		lda #$36							LDA #$36
.3994a7	8f 2c f0 af	sta $aff02c							STA OPM_2C_E_KC	;
.3994ab	a9 2a		lda #$2a							LDA #$2A
.3994ad	8f 2d f0 af	sta $aff02d							STA OPM_2D_F_KC	;
.3994b1	a9 46		lda #$46							LDA #$46
.3994b3	8f 2e f0 af	sta $aff02e							STA OPM_2E_G_KC	;
.3994b7	a9 4a		lda #$4a							LDA #$4A
.3994b9	8f 2f f0 af	sta $aff02f							STA OPM_2F_H_KC	;
.3994bd	a9 45		lda #$45							LDA #$45
.3994bf	8f 30 f0 af	sta $aff030							STA OPM_30_A_KF	;
.3994c3	a9 80		lda #$80							LDA #$80
.3994c5	8f 31 f0 af	sta $aff031							STA OPM_31_B_KF	;
.3994c9	a9 45		lda #$45							LDA #$45
.3994cb	8f 32 f0 af	sta $aff032							STA OPM_32_C_KF	;
.3994cf	a9 80		lda #$80							LDA #$80
.3994d1	8f 33 f0 af	sta $aff033							STA OPM_33_D_KF	;
.3994d5								YM2151_test__LOOP_FOR_EVER
.3994d5	a9 78		lda #$78							LDA #$78	;  	Key on chanel A all OPP
.3994d7	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.3994db	a9 79		lda #$79							LDA #$79	;  	Key on chanel B all OPP
.3994dd	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.3994e1	a9 7a		lda #$7a							LDA #$7A	;  	Key on chanel C all OPP
.3994e3	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.3994e7	a9 7c		lda #$7c							LDA #$7C	;  	Key on chanel C all OPP
.3994e9	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.3994ed	a9 7d		lda #$7d							LDA #$7D	;  	Key on chanel C all OPP
.3994ef	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.3994f3	a9 7e		lda #$7e							LDA #$7E	;  	Key on chanel C all OPP
.3994f5	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.3994f9	a9 7f		lda #$7f							LDA #$7F	;  	Key on chanel C all OPP
.3994fb	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.3994ff	a2 00 80	ldx #$8000							LDX #32768      ; 400ms
.399502	22 37 96 39	jsl $399637						 	JSL ILOOP_MS
.399506	a9 00		lda #$00							LDA #$00	;  	Key off chanel A all OPP
.399508	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.39950c	a9 01		lda #$01							LDA #$01	;  	Key off chanel B all OPP
.39950e	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.399512	a9 02		lda #$02							LDA #$02	;  	Key off chanel C all OPP
.399514	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.399518	a9 03		lda #$03							LDA #$03	;  	Key off chanel C all OPP
.39951a	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.39951e	a9 04		lda #$04							LDA #$04	;  	Key off chanel C all OPP
.399520	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.399524	a9 05		lda #$05							LDA #$05	;  	Key off chanel C all OPP
.399526	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.39952a	a9 06		lda #$06							LDA #$06	;  	Key off chanel C all OPP
.39952c	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.399530	a9 07		lda #$07							LDA #$07	;  	Key off chanel C all OPP
.399532	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.399536	a2 00 80	ldx #$8000							LDX #32768      ; 100ms
.399539	22 37 96 39	jsl $399637							JSL ILOOP_MS
.39953d	6b		rtl								RTL
.39953e								YM2151_test_2_from_Chibisound
.39953e	08		php								PHP
.39953f	0b		phd								PHD
.399540	c2 30		rep #$30	                REP #$30        ; set A&X long
.399542	da		phx								PHX
.399543	48		pha								PHA
.399544	e2 20		sep #$20	                SEP #$20        ; set A short
.399546	a9 90		lda #$90							LDA #$90
.399548	8f 0f f0 af	sta $aff00f							STA OPM_0F_NE_NFREQ
.39954c	a9 55		lda #$55							LDA #$55
.39954e	8f 18 f0 af	sta $aff018							STA OPM_18_LFRQ
.399552	af 1b f0 af	lda $aff01b							LDA OPM_1B_CT_W
.399556	09 02		ora #$02							ORA #$02
.399558	8f 1b f0 af	sta $aff01b							STA OPM_1B_CT_W
.39955c	a9 c0		lda #$c0							LDA #$C0;
.39955e	8f 20 f0 af	sta $aff020							STA OPM_20_A_RL_FR_CONNECT; sellect the mode and active left and  right chanel
.399562	a2 90 01	ldx #$0190							LDX #400     ; 100ms
.399565	22 37 96 39	jsl $399637							JSL ILOOP_MS
.399569	a9 43		lda #$43							LDA #$43
.39956b	8f 28 f0 af	sta $aff028							STA OPM_28_A_KC;	sellect a note
.39956f	a2 90 01	ldx #$0190							LDX #400     ; 100ms
.399572	22 37 96 39	jsl $399637							JSL ILOOP_MS
.399576	a9 40		lda #$40							LDA #$40
.399578	8f 60 f0 af	sta $aff060							STA OPM_60_A_M1_TL
.39957c	8f 68 f0 af	sta $aff068							STA OPM_68_A_M2_TL
.399580	8f 70 f0 af	sta $aff070							STA OPM_70_A_C1_TL
.399584	8f 78 f0 af	sta $aff078							STA OPM_78_A_C2_TL
.399588	a2 90 01	ldx #$0190							LDX #400     ; 100ms
.39958b	22 37 96 39	jsl $399637							JSL ILOOP_MS
.39958f	a9 0f		lda #$0f							LDA #$0F
.399591	8f f8 f0 af	sta $aff0f8							STA OPM_F8_A_C2_D1L_RR
.399595	a2 90 01	ldx #$0190							LDX #400     ; 100ms
.399598	22 37 96 39	jsl $399637							JSL ILOOP_MS
.39959c	a9 0f		lda #$0f							LDA #$0F
.39959e	8f 1b f0 af	sta $aff01b							STA OPM_1B_CT_W; 4Mhz(?) and square
.3995a2	a2 90 01	ldx #$0190							LDX #400     ; 100ms
.3995a5	22 37 96 39	jsl $399637							JSL ILOOP_MS
.3995a9								YM2151_test_2_from_Chibisound__LOOP_FOR_EVER
.3995a9	a9 78		lda #$78							LDA #$78	;  	Key on chanel A all OPP
.3995ab	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.3995af	a2 90 01	ldx #$0190							LDX #400     ; 100ms
.3995b2	22 37 96 39	jsl $399637							JSL ILOOP_MS
.3995b6	a9 79		lda #$79							LDA #$79	;  	Key on chanel B all OPP
.3995b8	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.3995bc	a2 90 01	ldx #$0190							LDX #400     ; 100ms
.3995bf	22 37 96 39	jsl $399637							JSL ILOOP_MS
.3995c3	a9 7a		lda #$7a							LDA #$7A	;  	Key on chanel C all OPP
.3995c5	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.3995c9	a2 90 01	ldx #$0190							LDX #400     ; 100ms
.3995cc	22 37 96 39	jsl $399637							JSL ILOOP_MS
.3995d0	a2 00 20	ldx #$2000							LDX #8192      ; 400ms
.3995d3	22 37 96 39	jsl $399637						 	JSL ILOOP_MS
.3995d7	a9 00		lda #$00							LDA #$00	;  	Key off chanel A all OPP
.3995d9	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.3995dd	a2 90 01	ldx #$0190							LDX #400     ; 100ms
.3995e0	22 37 96 39	jsl $399637							JSL ILOOP_MS
.3995e4	a9 01		lda #$01							LDA #$01	;  	Key off chanel B all OPP
.3995e6	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.3995ea	a9 02		lda #$02							LDA #$02	;  	Key off chanel C all OPP
.3995ec	8f 08 f0 af	sta $aff008							STA OPM_08_KEY_ON_OFF	;
.3995f0	a2 00 20	ldx #$2000							LDX #8192     ; 100ms
.3995f3	22 37 96 39	jsl $399637							JSL ILOOP_MS
.3995f7	80 b0		bra $3995a9							BRA YM2151_test_2_from_Chibisound__LOOP_FOR_EVER
.3995f9	68		pla								PLA
.3995fa	fa		plx								PLX
.3995fb	2b		pld								PLD
.3995fc	28		plp								PLP
.3995fd	6b		rtl								RTL
.3995fe	ea		nop		ILOOP           NOP
.3995ff	ea		nop		                NOP
.399600	ea		nop		                NOP
.399601	ea		nop		                NOP
.399602	ea		nop		                NOP
.399603	ea		nop		                NOP
.399604	ea		nop		                NOP
.399605	ea		nop		                NOP
.399606	ea		nop		                NOP
.399607	ea		nop		                NOP
.399608	6b		rtl		                RTL
.399609	22 fe 95 39	jsl $3995fe	ILOOP_1         JSL ILOOP
.39960d	22 fe 95 39	jsl $3995fe	                JSL ILOOP
.399611	22 fe 95 39	jsl $3995fe	                JSL ILOOP
.399615	22 fe 95 39	jsl $3995fe	                JSL ILOOP
.399619	22 fe 95 39	jsl $3995fe	                JSL ILOOP
.39961d	22 fe 95 39	jsl $3995fe	                JSL ILOOP
.399621	22 fe 95 39	jsl $3995fe	                JSL ILOOP
.399625	22 fe 95 39	jsl $3995fe	                JSL ILOOP
.399629	22 fe 95 39	jsl $3995fe	                JSL ILOOP
.39962d	22 fe 95 39	jsl $3995fe	                JSL ILOOP
.399631	6b		rtl		                RTL
.399632	22 09 96 39	jsl $399609	ILOOP_1MS       JSL ILOOP_1
.399636	6b		rtl		                RTL
.399637	e0 00 00	cpx #$0000	ILOOP_MS        CPX #0
.39963a	f0 07		beq $399643	                BEQ LOOP_MS_END
.39963c	22 32 96 39	jsl $399632	                JSL ILOOP_1MS
.399640	ca		dex		                DEX
.399641	80 f4		bra $399637	                BRA ILOOP_MS
.399643	6b		rtl		LOOP_MS_END     RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\keyboard.asm

.399644					KEYBOARD_INTERRUPT
.399644	48		pha		                PHA             ; begin setdp macro
.399645	08		php			            PHP
.399646	c2 20		rep #$20	                REP #$20        ; set A long
.399648	a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.39964b	5b		tcd		                TCD
.39964c	28		plp			            PLP
.39964d	68		pla		                PLA             ; end setdp macro
.39964e	a2 00 00	ldx #$0000	                ldx #$0000
.399651	e2 10		sep #$10	                SEP #$10        ; set X short
.399653	e2 20		sep #$20	                SEP #$20        ; set A short
.399655	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.399659	29 01		and #$01	                AND #FNX1_INT00_KBD
.39965b	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.39965f					IRQ_HANDLER_FETCH
.39965f	af 60 10 af	lda $af1060	                LDA @lKBD_INPT_BUF      ; Get Scan Code from KeyBoard
.399663	85 88		sta $0f88	                STA KEYBOARD_SC_TMP     ; Save Code Immediately
.399665	c9 2a		cmp #$2a	NOT_SCROLLLOCK  CMP #$2A                ; Left Shift Pressed
.399667	d0 03		bne $39966c	                BNE NOT_KB_SET_LSHIFT
.399669	82 b2 00	brl $39971e	                BRL KB_SET_SHIFT
.39966c					NOT_KB_SET_LSHIFT
.39966c	c9 aa		cmp #$aa	                CMP #$AA                ; Left Shift Unpressed
.39966e	d0 03		bne $399673	                BNE NOT_KB_CLR_LSHIFT
.399670	82 b4 00	brl $399727	                BRL KB_CLR_SHIFT
.399673					NOT_KB_CLR_LSHIFT
.399673	c9 36		cmp #$36	                CMP #$36                ; Right Shift Pressed
.399675	d0 03		bne $39967a	                BNE NOT_KB_SET_RSHIFT
.399677	82 a4 00	brl $39971e	                BRL KB_SET_SHIFT
.39967a					NOT_KB_SET_RSHIFT
.39967a	c9 b6		cmp #$b6	                CMP #$B6                ; Right Shift Unpressed
.39967c	d0 03		bne $399681	                BNE NOT_KB_CLR_RSHIFT
.39967e	82 a6 00	brl $399727	                BRL KB_CLR_SHIFT
.399681					NOT_KB_CLR_RSHIFT
.399681	c9 1d		cmp #$1d	                CMP #$1D                ; Left CTRL pressed
.399683	d0 03		bne $399688	                BNE NOT_KB_SET_CTRL
.399685	82 a8 00	brl $399730	                BRL KB_SET_CTRL
.399688					NOT_KB_SET_CTRL
.399688	c9 9d		cmp #$9d	                CMP #$9D                ; Left CTRL Unpressed
.39968a	d0 03		bne $39968f	                BNE NOT_KB_CLR_CTRL
.39968c	82 aa 00	brl $399739	                BRL KB_CLR_CTRL
.39968f					NOT_KB_CLR_CTRL
.39968f	c9 38		cmp #$38	                CMP #$38                ; Left ALT Pressed
.399691	d0 03		bne $399696	                BNE NOT_KB_SET_ALT
.399693	82 ac 00	brl $399742	                BRL KB_SET_ALT
.399696					NOT_KB_SET_ALT
.399696	c9 b8		cmp #$b8	                CMP #$B8                ; Left ALT Unpressed
.399698	d0 03		bne $39969d	                BNE NOT_KB_CLR_ALT
.39969a	82 ae 00	brl $39974b	                BRL KB_CLR_ALT
.39969d	c9 e0		cmp #$e0	NOT_KB_CLR_ALT  CMP #$E0                ; Prefixed scan code
.39969f	d0 03		bne $3996a4	                BNE NOT_PREFIXED
.3996a1	82 b0 00	brl $399754	                BRL KB_SET_PREFIX
.3996a4	c9 45		cmp #$45	NOT_PREFIXED    CMP #$45                ; Numlock Pressed
.3996a6	d0 03		bne $3996ab	                BNE NOT_KB_SET_NUM
.3996a8	82 bb 00	brl $399766	                BRL KB_TOG_NUMLOCK
.3996ab	c9 46		cmp #$46	NOT_KB_SET_NUM  CMP #$46                ; Scroll Lock Pressed
.3996ad	d0 03		bne $3996b2	                BNE NOT_KB_SET_SCR
.3996af	82 ab 00	brl $39975d	                BRL KB_TOG_SCRLOCK
.3996b2	c9 3a		cmp #$3a	NOT_KB_SET_SCR  CMP #$3A                ; Caps Lock Pressed
.3996b4	d0 03		bne $3996b9	                BNE KB_UNPRESSED
.3996b6	82 b6 00	brl $39976f	                BRL KB_TOG_CAPLOCK
.3996b9	29 80		and #$80	KB_UNPRESSED    AND #$80                ; See if the Scan Code is press or Depressed
.3996bb	c9 80		cmp #$80	                CMP #$80                ; Depress Status - We will not do anything at this point
.3996bd	d0 03		bne $3996c2	                BNE KB_NORM_SC
.3996bf	82 b3 00	brl $399775	                BRL KB_CHECK_B_DONE
.3996c2	a5 88		lda $0f88	KB_NORM_SC      LDA KEYBOARD_SC_TMP       ;
.3996c4	aa		tax		                TAX
.3996c5	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the SHIFT Key is being Pushed
.3996c7	29 10		and #$10	                AND #$10
.3996c9	c9 10		cmp #$10	                CMP #$10
.3996cb	f0 1f		beq $3996ec	                BEQ SHIFT_KEY_ON
.3996cd	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the CTRL Key is being Pushed
.3996cf	29 20		and #$20	                AND #$20
.3996d1	c9 20		cmp #$20	                CMP #$20
.3996d3	f0 1e		beq $3996f3	                BEQ CTRL_KEY_ON
.3996d5	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the ALT Key is being Pushed
.3996d7	29 40		and #$40	                AND #$40
.3996d9	c9 40		cmp #$40	                CMP #$40
.3996db	f0 1d		beq $3996fa	                BEQ ALT_KEY_ON
.3996dd	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the Prefix was picked up before
.3996df	29 80		and #$80	                AND #$80
.3996e1	c9 80		cmp #$80	                CMP #$80
.3996e3	f0 1c		beq $399701	                BEQ PREFIX_ON
.3996e5	bf 00 17 39	lda $391700,x	                LDA @lScanCode_Press_Set1, x
.3996e9	82 1f 00	brl $39970b	                BRL KB_WR_2_SCREEN
.3996ec	bf 80 17 39	lda $391780,x	SHIFT_KEY_ON    LDA @lScanCode_Shift_Set1, x
.3996f0	82 18 00	brl $39970b	                BRL KB_WR_2_SCREEN
.3996f3	bf 00 18 39	lda $391800,x	CTRL_KEY_ON     LDA @lScanCode_Ctrl_Set1, x
.3996f7	82 11 00	brl $39970b	                BRL KB_WR_2_SCREEN
.3996fa	bf 80 18 39	lda $391880,x	ALT_KEY_ON      LDA @lScanCode_Alt_Set1, x
.3996fe	82 0a 00	brl $39970b	                BRL KB_WR_2_SCREEN
.399701	a5 87		lda $0f87	PREFIX_ON       LDA KEYBOARD_SC_FLG
.399703	29 7f		and #$7f	                AND #$7F
.399705	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.399707	bf 80 19 39	lda $391980,x	                LDA @lScanCode_Prefix_Set1, x
.39970b	c9 18		cmp #$18	KB_WR_2_SCREEN  CMP #$18                ; Is it SysRq?
.39970d	d0 03		bne $399712	                BNE savechar
.39970f	4c 85 97	jmp $399785	                JMP programmerKey       ; Yes: trigger the programmer key
.399712	48		pha		savechar        PHA
.399713	c2 10		rep #$10	                REP #$10        ; set X long
.399715	20 91 97	jsr $399791	                JSR SAVEKEY
.399718	e2 20		sep #$20	                SEP #$20        ; set A short
.39971a	68		pla		                PLA
.39971b	4c 75 97	jmp $399775	                JMP KB_CHECK_B_DONE
.39971e	a5 87		lda $0f87	KB_SET_SHIFT    LDA KEYBOARD_SC_FLG
.399720	09 10		ora #$10	                ORA #$10
.399722	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.399724	4c 75 97	jmp $399775	                JMP KB_CHECK_B_DONE
.399727	a5 87		lda $0f87	KB_CLR_SHIFT    LDA KEYBOARD_SC_FLG
.399729	29 ef		and #$ef	                AND #$EF
.39972b	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.39972d	4c 75 97	jmp $399775	                JMP KB_CHECK_B_DONE
.399730	a5 87		lda $0f87	KB_SET_CTRL     LDA KEYBOARD_SC_FLG
.399732	09 20		ora #$20	                ORA #$20
.399734	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.399736	4c 75 97	jmp $399775	                JMP KB_CHECK_B_DONE
.399739	a5 87		lda $0f87	KB_CLR_CTRL     LDA KEYBOARD_SC_FLG
.39973b	29 df		and #$df	                AND #$DF
.39973d	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.39973f	4c 75 97	jmp $399775	                JMP KB_CHECK_B_DONE
.399742	a5 87		lda $0f87	KB_SET_ALT      LDA KEYBOARD_SC_FLG
.399744	09 40		ora #$40	                ORA #$40
.399746	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.399748	4c 75 97	jmp $399775	                JMP KB_CHECK_B_DONE
.39974b	a5 87		lda $0f87	KB_CLR_ALT      LDA KEYBOARD_SC_FLG
.39974d	29 bf		and #$bf	                AND #$BF
.39974f	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.399751	4c 75 97	jmp $399775	                JMP KB_CHECK_B_DONE
.399754	a5 87		lda $0f87	KB_SET_PREFIX   LDA KEYBOARD_SC_FLG
.399756	09 80		ora #$80	                ORA #$80
.399758	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.39975a	4c 75 97	jmp $399775	                JMP KB_CHECK_B_DONE
.39975d	a5 89		lda $0f89	KB_TOG_SCRLOCK  LDA KEYBOARD_LOCKS
.39975f	49 01		eor #$01	                EOR #KB_SCROLL_LOCK         ; toggle the Scroll Lock flag
.399761	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.399763	4c 75 97	jmp $399775	                JMP KB_CHECK_B_DONE
.399766	a5 89		lda $0f89	KB_TOG_NUMLOCK  LDA KEYBOARD_LOCKS
.399768	49 02		eor #$02	                EOR #KB_NUM_LOCK            ; toggle the Num Lock flag
.39976a	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.39976c	4c 75 97	jmp $399775	                JMP KB_CHECK_B_DONE
.39976f	a5 89		lda $0f89	KB_TOG_CAPLOCK  LDA KEYBOARD_LOCKS
.399771	49 04		eor #$04	                EOR #KB_CAPS_LOCK           ; toggle the Caps Lock flag
.399773	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.399775					KB_CHECK_B_DONE
.399775	af 64 10 af	lda $af1064	                LDA STATUS_PORT
.399779	29 01		and #$01	                AND #OUT_BUF_FULL           ; Test bit $01 (if 1, Full)
.39977b	c9 01		cmp #$01	                CMP #OUT_BUF_FULL           ; if Still Byte in the Buffer, fetch it out
.39977d	d0 03		bne $399782	                BNE SET_LED
.39977f	4c 5f 96	jmp $39965f	                JMP IRQ_HANDLER_FETCH
.399782					SET_LED
.399782					KB_DONE
.399782	c2 30		rep #$30	                REP #$30        ; set A&X long
.399784	60		rts		                RTS
.399785					programmerKey
.399785	c2 30		rep #$30	                REP #$30        ; set A&X long
.399787	68		pla		                PLA                     ; Get and throw-away the return address to the interrupt handler
.399788	2b		pld		                PLD                     ; Restore the registers that were present when the handler was invoked
.399789	ab		plb		                PLB
.39978a	7a		ply		                PLY
.39978b	fa		plx		                PLX
.39978c	68		pla		                PLA
.39978d	5c 08 00 39	jmp $390008	                JML BREAK               ; And go to the BRK handler directly to open the monitor
.399791					SAVEKEY
.399791	e2 20		sep #$20	                SEP #$20        ; set A short
.399793	48		pha		                PHA                     ; Save the character
.399794	a5 89		lda $0f89	                LDA KEYBOARD_LOCKS      ; Check the keyboard lock flags
.399796	29 04		and #$04	                AND #KB_CAPS_LOCK       ; Is CAPS lock on?
.399798	f0 0d		beq $3997a7	                BEQ no_caps             ; No... just use the character as-is
.39979a	68		pla		                PLA                     ; Get the character back
.39979b	c9 61		cmp #$61	                CMP #'a'                ; Is it < 'a'
.39979d	90 09		bcc $3997a8	                BLT check_break         ; Yes: just use as-is
.39979f	c9 7b		cmp #$7b	                CMP #'z'+1              ; Is it > 'z'
.3997a1	b0 05		bcs $3997a8	                BGE check_break         ; Yes: just us as-is
.3997a3	29 df		and #$df	                AND #%11011111          ; Conver to upper case
.3997a5	80 01		bra $3997a8	                BRA check_break
.3997a7	68		pla		no_caps         PLA                     ; Restore the character
.3997a8	c9 00		cmp #$00	check_break     CMP #0
.3997aa	f0 18		beq $3997c4	                BEQ done
.3997ac	c9 03		cmp #$03	                CMP #CHAR_CTRL_C        ; Is it CTRL-C?
.3997ae	f0 15		beq $3997c5	                BEQ flag_break          ; Yes: flag a break
.3997b0	a6 8d		ldx $0f8d	no_break        LDX KEY_BUFFER_WPOS     ; So the Receive Character is saved in the Buffer
.3997b2	e0 80 00	cpx #$0080	                CPX #KEY_BUFFER_SIZE    ; Make sure we haven't been overboard.
.3997b5	b0 0d		bcs $3997c4	                BCS done                ; Stop storing - An error should ensue here...
.3997b7	9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER,X
.3997bb	e8		inx		                INX
.3997bc	86 8d		stx $0f8d	                STX KEY_BUFFER_WPOS
.3997be	a9 00		lda #$00	                LDA #$00
.3997c0	9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER, X       ; Store a EOL in the following location for good measure
.3997c4	60		rts		done            RTS
.3997c5					flag_break
.3997c5	e2 20		sep #$20	                SEP #$20        ; set A short
.3997c7	a9 80		lda #$80	                LDA #$80                ; Flag that an interrupt key has been pressed
.3997c9	85 8a		sta $0f8a	                STA KEYFLAG             ; The interpreter should see this soon and throw a BREAK
.3997cb	60		rts		                RTS

;******  Return to file: src\kernel.asm


;******  Processing file: src\kernel_jumptable.asm

.390000	5c 00 04 39	jmp $390400	BOOT            JML IBOOT
.390004	5c 3a 12 39	jmp $39123a	RESTORE         JML IRESTORE
.390008	5c 98 05 39	jmp $390598	BREAK           JML IBREAK
.39000c	5c df 05 39	jmp $3905df	READY           JML IREADY
.390010	5c 3b 12 39	jmp $39123b	SCINIT          JML ISCINIT
.390014	5c 3c 12 39	jmp $39123c	IOINIT          JML IIOINIT
.390018	5c 64 06 39	jmp $390664	PUTC            JML IPUTC
.39001c	5c 4d 06 39	jmp $39064d	PUTS            JML IPUTS
.390020	5c 72 07 39	jmp $390772	PUTB            JML IPUTB
.390024	5c 3d 12 39	jmp $39123d	PUTBLOCK        JML IPUTBLOCK
.390028	5c 3e 12 39	jmp $39123e	SETLFS          JML ISETLFS
.39002c	5c 3f 12 39	jmp $39123f	SETNAM          JML ISETNAM
.390030	5c 40 12 39	jmp $391240	OPEN            JML IOPEN
.390034	5c 41 12 39	jmp $391241	CLOSE           JML ICLOSE
.390038	5c fa 05 39	jmp $3905fa	SETIN           JML ISETIN
.39003c	5c 03 06 39	jmp $390603	SETOUT          JML ISETOUT
.390040	5c 42 12 39	jmp $391242	GETB            JML IGETB
.390044	5c 43 12 39	jmp $391243	GETBLOCK        JML IGETBLOCK
.390048	5c 44 12 39	jmp $391244	GETCH           JML IGETCH
.39004c	5c 15 06 39	jmp $390615	GETCHW          JML IGETCHW
.390050	5c 0c 06 39	jmp $39060c	GETCHE          JML IGETCHE
.390054	5c 45 12 39	jmp $391245	GETS            JML IGETS
.390058	5c 46 12 39	jmp $391246	GETLINE         JML IGETLINE
.39005c	5c 47 12 39	jmp $391247	GETFIELD        JML IGETFIELD
.390060	5c 48 12 39	jmp $391248	TRIM            JML ITRIM
.390064	5c 49 12 39	jmp $391249	PRINTC          JML IPRINTC
.390068	5c 4a 12 39	jmp $39124a	PRINTS          JML IPRINTS
.39006c	5c 73 07 39	jmp $390773	PRINTCR         JML IPRINTCR
.390070	5c 4b 12 39	jmp $39124b	PRINTF          JML IPRINTF
.390074	5c 4c 12 39	jmp $39124c	PRINTI          JML IPRINTI
.390078	5c 92 08 39	jmp $390892	PRINTH          JML IPRINTH
.39007c	5c 4d 12 39	jmp $39124d	PRINTAI         JML IPRINTAI
.390080	5c 4e 12 39	jmp $39124e	PRINTAH         JML IPRINTAH
.390084	5c 28 08 39	jmp $390828	LOCATE          JML ILOCATE
.390088	5c 4f 12 39	jmp $39124f	PUSHKEY         JML IPUSHKEY
.39008c	5c 50 12 39	jmp $391250	PUSHKEYS        JML IPUSHKEYS
.390090	5c 84 07 39	jmp $390784	CSRRIGHT        JML ICSRRIGHT
.390094	5c b7 07 39	jmp $3907b7	CSRLEFT         JML ICSRLEFT
.390098	5c dd 07 39	jmp $3907dd	CSRUP           JML ICSRUP
.39009c	5c 03 08 39	jmp $390803	CSRDOWN         JML ICSRDOWN
.3900a0	5c 51 12 39	jmp $391251	CSRHOME         JML ICSRHOME
.3900a4	5c 6a 08 39	jmp $39086a	SCROLLUP        JML ISCROLLUP
.3900a8	5c c0 08 39	jmp $3908c0	CLRSCREEN       JML ICLRSCREEN
.3900ac	5c 27 09 39	jmp $390927	INITCHLUT	    JML IINITCHLUT
.3900b0	5c 41 0c 39	jmp $390c41	INITSUPERIO	    JML IINITSUPERIO
.3900b4	5c 40 0d 39	jmp $390d40	INITKEYBOARD    JML IINITKEYBOARD
.3900b8	5c 9c 0e 39	jmp $390e9c	TESTSID         JML ITESTSID
.3900bc	5c 20 0c 39	jmp $390c20	INITCURSOR      JML IINITCURSOR
.3900c0	5c d6 0b 39	jmp $390bd6	INITFONTSET     JML IINITFONTSET
.3900c4	5c 56 09 39	jmp $390956	INITGAMMATABLE  JML IINITGAMMATABLE
.3900c8	5c 76 09 39	jmp $390976	INITALLLUT      JML IINITALLLUT
.3900cc	5c 38 0a 39	jmp $390a38	INITVKYTXTMODE  JML IINITVKYTXTMODE
.3900d0	5c 61 0a 39	jmp $390a61	INITVKYGRPMODE  JML IINITVKYGRPMODE
.3900d4	5c 98 0a 39	jmp $390a98	INITTILEMODE    JML IINITTILEMODE
.3900d8	5c 99 0a 39	jmp $390a99	INITSPRITE      JML IINITSPRITE
.3900dc	5c 8c 0f 39	jmp $390f8c	INITCODEC       JML IINITCODEC
.3900e0	5c 08 10 39	jmp $391008	RESETCODEC      JML IRESETCODEC
.3900e4	5c 76 10 39	jmp $391076	BMP_PARSER      JML IBMP_PARSER
.3900e8	5c 2b 10 39	jmp $39102b	BM_FILL_SCREEN  JML IBM_FILL_SCREEN
.3900ec	5c 6a 87 39	jmp $39876a	OPL2_TONE_TEST  JML IOPL2_TONE_TEST

;******  Return to file: src\kernel.asm

.390400					IBOOT
.390400	18		clc		                CLC           ; clear the carry flag
.390401	fb		xce		                XCE           ; move carry to emulation flag.
.390402	78		sei		                SEI
.390403	c2 30		rep #$30	                REP #$30        ; set A&X long
.390405	a9 ff fe	lda #$feff	                LDA #STACK_END   ; initialize stack pointer
.390408	1b		tcs		                TAS
.390409	48		pha		                PHA             ; begin setdp macro
.39040a	08		php			            PHP
.39040b	c2 20		rep #$20	                REP #$20        ; set A long
.39040d	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390410	5b		tcd		                TCD
.390411	28		plp			            PLP
.390412	68		pla		                PLA             ; end setdp macro
.390413	e2 20		sep #$20	                SEP #$20        ; set A short
.390415	a2 00 00	ldx #$0000	                LDX #$0000
.390418	a9 00		lda #$00	                LDA #$00
.39041a					CLEAR_MEM_LOOP
.39041a	95 00		sta $00,x	                STA $0000, X
.39041c	e8		inx		                INX
.39041d	e0 00 01	cpx #$0100	                CPX #$0100
.390420	d0 f8		bne $39041a	                BNE CLEAR_MEM_LOOP
.390422	ea		nop		                NOP
.390423	a9 ff		lda #$ff	                LDA #$FF
.390425	8f 48 01 00	sta $000148	                STA @lINT_EDGE_REG0
.390429	8f 49 01 00	sta $000149	                STA @lINT_EDGE_REG1
.39042d	8f 4a 01 00	sta $00014a	                STA @lINT_EDGE_REG2
.390431	8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.390435	8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.390439	8f 4e 01 00	sta $00014e	                STA @lINT_MASK_REG2
.39043d	c2 30		rep #$30	                REP #$30        ; set A&X long
.39043f	a9 00 a0	lda #$a000	                LDA #<>SCREEN_PAGE0      ; store the initial screen buffer location
.390442	85 0c		sta $0c		                STA SCREENBEGIN
.390444	e2 20		sep #$20	                SEP #$20        ; set A short
.390446	a9 af		lda #$af	                LDA #`SCREEN_PAGE0
.390448	85 0e		sta $0e		                STA SCREENBEGIN+2
.39044a	c2 30		rep #$30	                REP #$30        ; set A&X long
.39044c	a9 00 a0	lda #$a000	                LDA #<>SCREEN_PAGE0      ; store the initial screen buffer location
.39044f	85 17		sta $17		                STA CURSORPOS
.390451	e2 20		sep #$20	                SEP #$20        ; set A short
.390453	a9 af		lda #$af	                LDA #`SCREEN_PAGE0
.390455	85 19		sta $19		                STA CURSORPOS+2
.390457	a9 00		lda #$00	                LDA #$00
.390459	8d 87 0f	sta $0f87	                STA KEYBOARD_SC_FLG     ; Clear the Keyboard Flag
.39045c	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.39045e	8f 00 f1 af	sta $aff100	                STA $AFF100
.390462	a9 bf		lda #$bf	                LDA #$BF ; Channel Two - No Atteniation
.390464	8f 00 f1 af	sta $aff100	                STA $AFF100
.390468	a9 df		lda #$df	                LDA #$DF ; Channel Two - No Atteniation
.39046a	8f 00 f1 af	sta $aff100	                STA $AFF100
.39046e	a9 ff		lda #$ff	                LDA #$FF ; Channel Two - No Atteniation
.390470	8f 00 f1 af	sta $aff100	                STA $AFF100
.390474	c2 30		rep #$30	                REP #$30        ; set A&X long
.390476	a2 48 00	ldx #$0048	                LDX #72
.390479	86 0f		stx $0f		                STX COLS_VISIBLE
.39047b	a0 34 00	ldy #$0034	                LDY #52
.39047e	84 13		sty $13		                STY LINES_VISIBLE
.390480	a2 80 00	ldx #$0080	                LDX #128
.390483	86 11		stx $11		                STX COLS_PER_LINE
.390485	a0 40 00	ldy #$0040	                LDY #64
.390488	84 15		sty $15		                STY LINES_MAX
.39048a	22 dc 00 39	jsl $3900dc	                JSL INITCODEC
.39048e	22 b0 00 39	jsl $3900b0	                JSL INITSUPERIO
.390492	22 c4 00 39	jsl $3900c4	                JSL INITGAMMATABLE
.390496	22 c8 00 39	jsl $3900c8	                JSL INITALLLUT
.39049a	22 ac 00 39	jsl $3900ac	                JSL INITCHLUT
.39049e	22 01 0c 39	jsl $390c01	                JSL INITMOUSEPOINTER
.3904a2	22 bc 00 39	jsl $3900bc	                JSL INITCURSOR
.3904a6	22 cc 00 39	jsl $3900cc	                JSL INITVKYTXTMODE
.3904aa	22 d6 0b 39	jsl $390bd6	                JSL IINITFONTSET
.3904ae	22 c0 08 39	jsl $3908c0	                JSL ICLRSCREEN  ; Clear Screen and Set a standard color in Color Memory
.3904b2	a9 00 00	lda #$0000	                LDA #0
.3904b5	22 38 00 39	jsl $390038	                JSL SETIN
.3904b9	22 3c 00 39	jsl $39003c	                JSL SETOUT
.3904bd	a2 00 00	ldx #$0000	                LDX #0
.3904c0	a0 00 00	ldy #$0000	                LDY #0
.3904c3	22 28 08 39	jsl $390828	                JSL ILOCATE
.3904c7	22 ef 08 39	jsl $3908ef	                JSL ICOLORFLAG  ; This is to set the Color Memory for the Logo
.3904cb	e2 20		sep #$20	                SEP #$20        ; set A short
.3904cd	c2 30		rep #$30	                REP #$30        ; set A&X long
.3904cf					greet
.3904cf	48		pha		                PHA             ; begin setdbr macro
.3904d0	08		php		                PHP
.3904d1	e2 20		sep #$20	                SEP #$20        ; set A short
.3904d3	a9 39		lda #$39		            LDA #`greet_msg
.3904d5	48		pha		                PHA
.3904d6	ab		plb		                PLB
.3904d7	28		plp		                PLP
.3904d8	68		pla		                PLA             ; end setdbr macro
.3904d9	a2 54 12	ldx #$1254	                LDX #<>greet_msg
.3904dc	22 44 06 39	jsl $390644	                JSL IPRINT       ; print the first line
.3904e0	48		pha		                PHA             ; begin setdp macro
.3904e1	08		php			            PHP
.3904e2	c2 20		rep #$20	                REP #$20        ; set A long
.3904e4	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3904e7	5b		tcd		                TCD
.3904e8	28		plp			            PLP
.3904e9	68		pla		                PLA             ; end setdp macro
.3904ea	22 b4 00 39	jsl $3900b4	                JSL INITKEYBOARD ;
.3904ee	e2 20		sep #$20	                SEP #$20        ; set A short
.3904f0	c2 10		rep #$10	                REP #$10        ; set X long
.3904f2	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.3904f4	8f 00 f1 af	sta $aff100	                STA $AFF100
.3904f8	a9 bf		lda #$bf	                LDA #$BF ; Channel Two - No Atteniation
.3904fa	8f 00 f1 af	sta $aff100	                STA $AFF100
.3904fe	a9 df		lda #$df	                LDA #$DF ; Channel Two - No Atteniation
.390500	8f 00 f1 af	sta $aff100	                STA $AFF100
.390504	a9 ff		lda #$ff	                LDA #$FF ; Channel Two - No Atteniation
.390506	8f 00 f1 af	sta $aff100	                STA $AFF100
.39050a	a9 83		lda #$83	                LDA #$83 ; Channel Zero - No Atteniation
.39050c	8f 00 f1 af	sta $aff100	                STA $AFF100
.390510	a9 12		lda #$12	                LDA #$12 ; Channel Zero - No Atteniation
.390512	8f 00 f1 af	sta $aff100	                STA $AFF100
.390516	a9 90		lda #$90	                LDA #$90 ; Channel One - No Atteniation
.390518	8f 00 f1 af	sta $aff100	                STA $AFF100
.39051c	a2 00 40	ldx #$4000	                LDX #16384      ; 400ms
.39051f	22 37 96 39	jsl $399637	          		 	JSL ILOOP_MS
.390523	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.390525	8f 00 f1 af	sta $aff100	                STA $AFF100
.390529	a9 0f		lda #$0f	                LDA #$0F
.39052b	8f 18 e4 af	sta $afe418	                STA SID0_MODE_VOL
.39052f	a9 62		lda #$62	                LDA #$62
.390531	8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.390535	a9 08		lda #$08	                LDA #$08
.390537	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.39053b	a9 00		lda #$00	                LDA #$00
.39053d	8f 02 e4 af	sta $afe402	                STA SID0_V1_PW_LO
.390541	a9 08		lda #$08	                LDA #$08
.390543	8f 03 e4 af	sta $afe403	                STA SID0_V1_PW_HI
.390547	a9 08		lda #$08	                LDA #$08
.390549	8f 05 e4 af	sta $afe405	                STA SID0_V1_ATCK_DECY
.39054d	a9 c6		lda #$c6	                LDA #198
.39054f	8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.390553	a9 11		lda #$11	                LDA #$11
.390555	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL
.390559	a2 00 80	ldx #$8000	                LDX #32768      ; 100ms
.39055c	22 37 96 39	jsl $399637	    						JSL ILOOP_MS
.390560	a9 10		lda #$10	                LDA #$10
.390562	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL
.390566	a9 00		lda #$00	                LDA #$00
.390568	8f 1b f0 af	sta $aff01b	                STA OPM_1B_CT_W
.39056c	a9 00		lda #$00	                LDA #$00
.39056e	8f 1b f0 af	sta $aff01b	                STA OPM_1B_CT_W
.390572	22 b9 93 39	jsl $3993b9	                JSL YM2151_test
.390576	22 0c 90 39	jsl $39900c	                JSL YM2612_test_piano
.39057a	22 0c 90 39	jsl $39900c	                JSL YM2612_test_piano
.39057e	c2 30		rep #$30	                REP #$30        ; set A&X long
.390580	a2 d7 15	ldx #$15d7	                LDX #<>ready_msg
.390583	22 44 06 39	jsl $390644	                JSL IPRINT       ; print the first line
.390587	58		cli		                CLI ; Make sure no Interrupt will come and fuck up Init before this point.
.390588	e2 20		sep #$20	                SEP #$20        ; set A short
.39058a	48		pha		                PHA             ; begin setdbr macro
.39058b	08		php		                PHP
.39058c	e2 20		sep #$20	                SEP #$20        ; set A short
.39058e	a9 39		lda #$39		            LDA #`greet_msg
.390590	48		pha		                PHA
.390591	ab		plb		                PLB
.390592	28		plp		                PLP
.390593	68		pla		                PLA             ; end setdbr macro
.390594	4c f2 05	jmp $3905f2	                JMP IREADYWAIT
.390597	00		brk #		greet_done      BRK             ;Terminate boot routine and go to Ready handler.
.390598					IBREAK
.390598	48		pha		                PHA             ; begin setdp macro
.390599	08		php			            PHP
.39059a	c2 20		rep #$20	                REP #$20        ; set A long
.39059c	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39059f	5b		tcd		                TCD
.3905a0	28		plp			            PLP
.3905a1	68		pla		                PLA             ; end setdp macro
.3905a2	68		pla		                PLA             ; Pull .Y and stuff it in the CPUY variable
.3905a3	8f 48 02 00	sta $000248	                STA CPUY
.3905a7	68		pla		                PLA             ; Pull .X and stuff it in the CPUY variable
.3905a8	8f 46 02 00	sta $000246	                STA CPUX
.3905ac	68		pla		                PLA             ; Pull .A and stuff it in the CPUY variable
.3905ad	8f 44 02 00	sta $000244	                STA CPUA
.3905b1	68		pla		                PLA
.3905b2	8f 4c 02 00	sta $00024c	                STA CPUDP       ; Pull Direct page
.3905b6	e2 20		sep #$20	                SEP #$20        ; set A short
.3905b8	68		pla		                PLA             ; Pull Data Bank (8 bits)
.3905b9	8f 4e 02 00	sta $00024e	                STA CPUDBR
.3905bd	68		pla		                PLA             ; Pull Flags (8 bits)
.3905be	8f 4f 02 00	sta $00024f	                STA CPUFLAGS
.3905c2	c2 20		rep #$20	                REP #$20        ; set A long
.3905c4	68		pla		                PLA             ; Pull Program Counter (16 bits)
.3905c5	8f 40 02 00	sta $000240	                STA CPUPC
.3905c9	e2 20		sep #$20	                SEP #$20        ; set A short
.3905cb	68		pla		                PLA             ; Pull Program Bank (8 bits)
.3905cc	8f 42 02 00	sta $000242	                STA CPUPBR
.3905d0	c2 20		rep #$20	                REP #$20        ; set A long
.3905d2	3b		tsc		                TSA             ; Get the stack
.3905d3	8f 4a 02 00	sta $00024a	                STA CPUSTACK    ; Store the stack at immediately before the interrupt was asserted
.3905d7	a9 ff fe	lda #$feff	                LDA #<>STACK_END   ; initialize stack pointer back to the bootup value
.3905da	1b		tcs		                TAS
.3905db	5c e0 ff 00	jmp $00ffe0	                JML JMP_READY   ; Run READY routine (usually BASIC or MONITOR)
.3905df					IREADY
.3905df	48		pha		                PHA             ; begin setdbr macro
.3905e0	08		php		                PHP
.3905e1	e2 20		sep #$20	                SEP #$20        ; set A short
.3905e3	a9 39		lda #$39		            LDA #`ready_msg
.3905e5	48		pha		                PHA
.3905e6	ab		plb		                PLB
.3905e7	28		plp		                PLP
.3905e8	68		pla		                PLA             ; end setdbr macro
.3905e9	e2 20		sep #$20	                SEP #$20        ; set A short
.3905eb	a2 d7 15	ldx #$15d7	                LDX #<>ready_msg
.3905ee	22 44 06 39	jsl $390644	                JSL IPRINT
.3905f2					IREADYWAIT
.3905f2	22 0c 06 39	jsl $39060c	                JSL IGETCHE
.3905f6	80 fa		bra $3905f2	                BRA IREADYWAIT
.3905f8	db		stp		IKEYDOWN        STP             ; Keyboard key pressed
.3905f9	db		stp		IRETURN         STP
.3905fa	08		php		ISETIN          PHP
.3905fb	e2 20		sep #$20	                SEP #$20        ; set A short
.3905fd	8f 04 07 00	sta $000704	                STA @lCHAN_IN   ; Save the channel number
.390601	28		plp		                PLP
.390602	6b		rtl		                RTL
.390603	08		php		ISETOUT         PHP
.390604	e2 20		sep #$20	                SEP #$20        ; set A short
.390606	8f 03 07 00	sta $000703	                STA @lCHAN_OUT  ; Save the channel number
.39060a	28		plp		                PLP
.39060b	6b		rtl		                RTL
.39060c	22 15 06 39	jsl $390615	IGETCHE         JSL IGETCHW
.390610	22 64 06 39	jsl $390664	                JSL IPUTC
.390614	6b		rtl		                RTL
.390615					IGETCHW
.390615	da		phx		                PHX
.390616	0b		phd		                PHD
.390617	08		php		                PHP
.390618	48		pha		                PHA             ; begin setdp macro
.390619	08		php			            PHP
.39061a	c2 20		rep #$20	                REP #$20        ; set A long
.39061c	a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.39061f	5b		tcd		                TCD
.390620	28		plp			            PLP
.390621	68		pla		                PLA             ; end setdp macro
.390622	e2 20		sep #$20	                SEP #$20        ; set A short
.390624	c2 10		rep #$10	                REP #$10        ; set X long
.390626	58		cli		                CLI                     ; Make sure interrupts can happen
.390627	a6 8b		ldx $0f8b	get_wait        LDX KEY_BUFFER_RPOS     ; Is KEY_BUFFER_RPOS < KEY_BUFFER_WPOS
.390629	e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS
.39062b	90 02		bcc $39062f	                BCC read_buff           ; Yes: a key is present, read it
.39062d	80 f8		bra $390627	                BRA get_wait            ; Otherwise, keep waiting
.39062f	78		sei		read_buff       SEI                     ; Don't interrupt me!
.390630	b5 00		lda $0f00,x	                LDA KEY_BUFFER,X        ; Get the key
.390632	e8		inx		                INX                     ; And move to the next key
.390633	e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS     ; Did we just read the last key?
.390635	f0 07		beq $39063e	                BEQ reset_indexes       ; Yes: return to 0 position
.390637	86 8b		stx $0f8b	                STX KEY_BUFFER_RPOS     ; Otherwise: Update the read index
.390639	58		cli		                CLI
.39063a	28		plp		done            PLP                     ; Restore status and interrupts
.39063b	2b		pld		                PLD
.39063c	fa		plx		                PLX
.39063d	6b		rtl		                RTL
.39063e	64 8b		stz $0f8b	reset_indexes   STZ KEY_BUFFER_RPOS     ; Reset read index to the beginning
.390640	64 8d		stz $0f8d	                STZ KEY_BUFFER_WPOS     ; Reset the write index to the beginning
.390642	80 f6		bra $39063a	                BRA done
.390644	22 4d 06 39	jsl $39064d	IPRINT          JSL IPUTS
.390648	22 73 07 39	jsl $390773	                JSL IPRINTCR
.39064c	6b		rtl		                RTL
.39064d	48		pha		IPUTS           PHA
.39064e	08		php		                PHP
.39064f	e2 20		sep #$20	                SEP #$20        ; set A short
.390651	c2 10		rep #$10	                REP #$10        ; set X long
.390653	bd 00 00	lda $390000,x	iputs1          LDA $0,b,x      ; read from the string
.390656	f0 08		beq $390660	                BEQ iputs_done
.390658	22 64 06 39	jsl $390664	iputs2          JSL IPUTC
.39065c	e8		inx		iputs3          INX
.39065d	4c 53 06	jmp $390653	                JMP iputs1
.390660	e8		inx		iputs_done      INX
.390661	28		plp		                PLP
.390662	68		pla		                PLA
.390663	6b		rtl		                RTL
.390664					IPUTC
.390664	da		phx		                PHX
.390665	5a		phy		                PHY
.390666	0b		phd		                PHD
.390667	8b		phb		                PHB
.390668	08		php		                PHP                 ; stash the flags (we'll be changing M)
.390669	e2 20		sep #$20	                SEP #$20        ; set A short
.39066b	c2 10		rep #$10	                REP #$10        ; set X long
.39066d	48		pha		                PHA             ; begin setdp macro
.39066e	08		php			            PHP
.39066f	c2 20		rep #$20	                REP #$20        ; set A long
.390671	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390674	5b		tcd		                TCD
.390675	28		plp			            PLP
.390676	68		pla		                PLA             ; end setdp macro
.390677	48		pha		                PHA             ; begin setdbr macro
.390678	08		php		                PHP
.390679	e2 20		sep #$20	                SEP #$20        ; set A short
.39067b	a9 00		lda #$00		            LDA #0
.39067d	48		pha		                PHA
.39067e	ab		plb		                PLB
.39067f	28		plp		                PLP
.390680	68		pla		                PLA             ; end setdbr macro
.390681	48		pha		                PHA                 ; Save the character to print
.390682	af 03 07 00	lda $000703	                LDA @lCHAN_OUT      ; Check the output channel #
.390686	f0 03		beq $39068b	                BEQ putc_screen     ; If it's 0: print to the screen
.390688	68		pla		                PLA                 ; Otherwise, just exit
.390689	80 40		bra $3906cb	                BRA done
.39068b	68		pla		putc_screen     PLA                 ; Get the character to print
.39068c	c9 0a		cmp #$0a	                CMP #CHAR_LF        ; Linefeed moves cursor down one line
.39068e	f0 5d		beq $3906ed	                BEQ go_down
.390690	c9 20		cmp #$20	                CMP #$20
.390692	90 19		bcc $3906ad	                BCC check_ctrl0     ; [$00..$1F]: check for arrows
.390694	c9 7f		cmp #$7f	                CMP #$7F
.390696	f0 39		beq $3906d1	                BEQ do_del
.390698	b0 02		bcs $39069c	                BCS check_A0        ; [$20..$7E]: print it
.39069a	80 29		bra $3906c5	                BRA printc
.39069c	c9 a0		cmp #$a0	check_A0        CMP #$A0
.39069e	90 02		bcc $3906a2	                BCC check_ctrl1
.3906a0	80 23		bra $3906c5	                BRA printc          ; [$A0..$FF]: print it
.3906a2	c9 91		cmp #$91	check_ctrl1     CMP #CHAR_DOWN      ; If the down arrow key was pressed
.3906a4	f0 47		beq $3906ed	                BEQ go_down         ; ... move the cursor down one row
.3906a6	c9 9d		cmp #$9d	                CMP #CHAR_LEFT      ; If the left arrow key was pressed
.3906a8	f0 55		beq $3906ff	                BEQ go_left         ; ... move the cursor left one column
.3906aa	4c cb 06	jmp $3906cb	                JMP done
.3906ad	c9 09		cmp #$09	check_ctrl0     CMP #CHAR_TAB       ; If it's a TAB...
.3906af	f0 54		beq $390705	                BEQ do_TAB          ; ... move to the next TAB stop
.3906b1	c9 08		cmp #$08	                CMP #CHAR_BS        ; If it's a backspace...
.3906b3	f0 28		beq $3906dd	                BEQ backspace       ; ... move the cursor back and replace with a space
.3906b5	c9 0d		cmp #$0d	                CMP #CHAR_CR        ; If the carriage return was pressed
.3906b7	f0 2e		beq $3906e7	                BEQ do_cr           ; ... move cursor down and to the first column
.3906b9	c9 11		cmp #$11	                CMP #CHAR_UP        ; If the up arrow key was pressed
.3906bb	f0 36		beq $3906f3	                BEQ go_up           ; ... move the cursor up one row
.3906bd	c9 1d		cmp #$1d	                CMP #CHAR_RIGHT     ; If the right arrow key was pressed
.3906bf	f0 38		beq $3906f9	                BEQ go_right        ; ... move the cursor right one column
.3906c1	c9 0f		cmp #$0f	                CMP #CHAR_INS       ; If the insert key was pressed
.3906c3	f0 12		beq $3906d7	                BEQ do_ins          ; ... insert a space
.3906c5	87 17		sta [$17]	printc          STA [CURSORPOS]     ; Save the character on the screen
.3906c7	22 84 07 39	jsl $390784	                JSL ICSRRIGHT
.3906cb	28		plp		done            PLP
.3906cc	ab		plb		                PLB
.3906cd	2b		pld		                PLD
.3906ce	7a		ply		                PLY
.3906cf	fa		plx		                PLX
.3906d0	6b		rtl		                RTL
.3906d1	22 2c 07 39	jsl $39072c	do_del          JSL SCRSHIFTLL      ; Shift the current line left one space into the cursor
.3906d5	80 f4		bra $3906cb	                BRA done
.3906d7	22 4f 07 39	jsl $39074f	do_ins          JSL SCRSHIFTLR      ; Shift the current line right one space from the cursor
.3906db	80 ee		bra $3906cb	                BRA done
.3906dd	22 b7 07 39	jsl $3907b7	backspace       JSL ICSRLEFT
.3906e1	22 2c 07 39	jsl $39072c	                JSL SCRSHIFTLL      ; Shift the current line left one space into the cursor
.3906e5	80 e4		bra $3906cb	                BRA done
.3906e7	22 73 07 39	jsl $390773	do_cr           JSL IPRINTCR        ; Move the cursor to the beginning of the next line
.3906eb	80 de		bra $3906cb	                BRA done
.3906ed	22 03 08 39	jsl $390803	go_down         JSL ICSRDOWN        ; Move the cursor down one row (might force a scroll)
.3906f1	80 d8		bra $3906cb	                BRA done
.3906f3	22 dd 07 39	jsl $3907dd	go_up           JSL ICSRUP          ; Move the cursor up one line
.3906f7	80 d2		bra $3906cb	                BRA done
.3906f9	22 84 07 39	jsl $390784	go_right        JSL ICSRRIGHT       ; Move the cursor right one column
.3906fd	80 cc		bra $3906cb	                BRA done
.3906ff	22 b7 07 39	jsl $3907b7	go_left         JSL ICSRLEFT        ; Move the cursor left one column
.390703	80 c6		bra $3906cb	                BRA done
.390705					do_TAB
.390705	c2 20		rep #$20	                REP #$20        ; set A long
.390707	a5 1a		lda $1a		                LDA CURSORX         ; Get the current column
.390709	29 f8 ff	and #$fff8	                AND #$FFF8          ; See which group of 8 it's in
.39070c	18		clc		                CLC
.39070d	69 08 00	adc #$0008	                ADC #$0008          ; And move it to the next one
.390710	aa		tax		                TAX
.390711	a4 1c		ldy $1c		                LDY CURSORY
.390713	e2 20		sep #$20	                SEP #$20        ; set A short
.390715	e4 0f		cpx $0f		set_xy          CPX COLS_VISIBLE    ; Check if we're still on screen horizontally
.390717	90 04		bcc $39071d	                BCC check_row       ; Yes: check the row
.390719	a2 00 00	ldx #$0000	                LDX #0              ; No: move to the first column...
.39071c	c8		iny		                INY                 ; ... and the next row
.39071d	c4 13		cpy $13		check_row       CPY LINES_VISIBLE   ; Check if we're still on the screen vertically
.39071f	90 05		bcc $390726	                BCC do_locate       ; Yes: reposition the cursor
.390721	22 6a 08 39	jsl $39086a	                JSL ISCROLLUP       ; No: scroll the screen
.390725	88		dey		                DEY                 ; And set the row to the last one
.390726	22 28 08 39	jsl $390828	do_locate       JSL ILOCATE         ; Set the cursor position
.39072a	80 9f		bra $3906cb	                BRA done
.39072c	da		phx		SCRSHIFTLL      PHX
.39072d	5a		phy		                PHY
.39072e	48		pha		                PHA
.39072f	08		php		                PHP
.390730	48		pha		                PHA             ; begin setdp macro
.390731	08		php			            PHP
.390732	c2 20		rep #$20	                REP #$20        ; set A long
.390734	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390737	5b		tcd		                TCD
.390738	28		plp			            PLP
.390739	68		pla		                PLA             ; end setdp macro
.39073a	c2 30		rep #$30	                REP #$30        ; set A&X long
.39073c	a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.39073e	a8		tay		                TAY                 ; Set it as the destination
.39073f	aa		tax		                TAX
.390740	e8		inx		                INX                 ; And set the next cell as the source
.390741	38		sec		                SEC                 ; Calculate the length of the block to move
.390742	a9 7f 00	lda #$007f	                LDA #127            ; as 127 - X
.390745	e5 1a		sbc $1a		                SBC CURSORX
.390747	54 af af	mvn $af,$af	                MVN $AF, $AF        ; And move the block
.39074a	28		plp		                PLP
.39074b	68		pla		                PLA
.39074c	7a		ply		                PLY
.39074d	fa		plx		                PLX
.39074e	6b		rtl		                RTL
.39074f	da		phx		SCRSHIFTLR      PHX
.390750	48		pha		                PHA
.390751	08		php		                PHP
.390752	c2 30		rep #$30	                REP #$30        ; set A&X long
.390754	a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.390756	29 80 ff	and #$ff80	                AND #$FF80          ; Mask off the column bits
.390759	09 7f 00	ora #$007f	                ORA #$007F          ; And compute the address of the last cell
.39075c	a8		tay		                TAY                 ; And set that as the destination address
.39075d	3a		dec a		                DEC A               ; Compute the address of the character to the left
.39075e	aa		tax		                TAX                 ; And make it the source
.39075f	38		sec		                SEC                 ; Calculate the length of the block to move
.390760	a9 7f 00	lda #$007f	                LDA #127            ; as 127 - X
.390763	e5 1a		sbc $1a		                SBC CURSORX
.390765	44 af af	mvp $af,$af	                MVP $AF, $AF        ; And move the block
.390768	e2 20		sep #$20	                SEP #$20        ; set A short
.39076a	a9 20		lda #$20	                LDA #CHAR_SP        ; Put a blank space at the cursor position
.39076c	87 17		sta [$17]	                STA [CURSORPOS]
.39076e	28		plp		                PLP
.39076f	68		pla		                PLA
.390770	fa		plx		                PLX
.390771	6b		rtl		                RTL
.390772					IPUTB
.390772	6b		rtl		                RTL
.390773	da		phx		IPRINTCR	      PHX
.390774	5a		phy		                PHY
.390775	08		php		                PHP
.390776	a2 00 00	ldx #$0000	                LDX #0
.390779	a4 1c		ldy $1c		                LDY CURSORY
.39077b	c8		iny		                INY
.39077c	22 28 08 39	jsl $390828	                JSL ILOCATE
.390780	28		plp		                PLP
.390781	7a		ply		                PLY
.390782	fa		plx		                PLX
.390783	6b		rtl		                RTL
.390784	da		phx		ICSRRIGHT       PHX
.390785	5a		phy		                PHY
.390786	48		pha		                PHA
.390787	0b		phd		                PHD
.390788	08		php		                PHP
.390789	c2 20		rep #$20	                REP #$20        ; set A long
.39078b	c2 10		rep #$10	                REP #$10        ; set X long
.39078d	48		pha		                PHA             ; begin setdp macro
.39078e	08		php			            PHP
.39078f	c2 20		rep #$20	                REP #$20        ; set A long
.390791	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.390794	5b		tcd		                TCD
.390795	28		plp			            PLP
.390796	68		pla		                PLA             ; end setdp macro
.390797	a6 1a		ldx $1a		                LDX CURSORX           ; Get the new column
.390799	e8		inx		                INX
.39079a	a4 1c		ldy $1c		                LDY CURSORY           ; Get the current row
.39079c	e4 0f		cpx $0f		                CPX COLS_VISIBLE      ; Are we off screen?
.39079e	90 0d		bcc $3907ad	                BCC icsrright_nowrap  ; No: just set the position
.3907a0	a2 00 00	ldx #$0000	                LDX #0                ; Yes: move to the first column
.3907a3	c8		iny		                INY                   ; And move to the next row
.3907a4	c4 13		cpy $13		                CPY LINES_VISIBLE     ; Are we still off screen?
.3907a6	90 05		bcc $3907ad	                BCC icsrright_nowrap  ; No: just set the position
.3907a8	88		dey		                DEY                   ; Yes: lock to the last row
.3907a9	22 6a 08 39	jsl $39086a	                JSL ISCROLLUP         ; But scroll the screen up
.3907ad					icsrright_nowrap
.3907ad	22 28 08 39	jsl $390828	                JSL ILOCATE           ; Set the cursor position
.3907b1	28		plp		                PLP
.3907b2	2b		pld		                PLD
.3907b3	68		pla		                PLA
.3907b4	7a		ply		                PLY
.3907b5	fa		plx		                PLX
.3907b6	6b		rtl		                RTL
.3907b7					ICSRLEFT
.3907b7	da		phx		                PHX
.3907b8	5a		phy		                PHY
.3907b9	48		pha		                PHA
.3907ba	0b		phd		                PHD
.3907bb	08		php		                PHP
.3907bc	c2 30		rep #$30	                REP #$30        ; set A&X long
.3907be	48		pha		                PHA             ; begin setdp macro
.3907bf	08		php			            PHP
.3907c0	c2 20		rep #$20	                REP #$20        ; set A long
.3907c2	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.3907c5	5b		tcd		                TCD
.3907c6	28		plp			            PLP
.3907c7	68		pla		                PLA             ; end setdp macro
.3907c8	a5 1a		lda $1a		                LDA CURSORX
.3907ca	f0 0b		beq $3907d7	                BEQ icsrleft_done_already_zero ; Check that we are not already @ Zero
.3907cc	a6 1a		ldx $1a		                LDX CURSORX
.3907ce	ca		dex		                DEX
.3907cf	86 1a		stx $1a		                STX CURSORX
.3907d1	a4 1c		ldy $1c		                LDY CURSORY
.3907d3	22 28 08 39	jsl $390828	                JSL ILOCATE
.3907d7					icsrleft_done_already_zero
.3907d7	28		plp		                PLP
.3907d8	2b		pld		                PLD
.3907d9	68		pla		                PLA
.3907da	7a		ply		                PLY
.3907db	fa		plx		                PLX
.3907dc	6b		rtl		                RTL
.3907dd					ICSRUP
.3907dd	da		phx		                PHX
.3907de	5a		phy		                PHY
.3907df	48		pha		                PHA
.3907e0	0b		phd		                PHD
.3907e1	08		php		                PHP
.3907e2	c2 30		rep #$30	                REP #$30        ; set A&X long
.3907e4	48		pha		                PHA             ; begin setdp macro
.3907e5	08		php			            PHP
.3907e6	c2 20		rep #$20	                REP #$20        ; set A long
.3907e8	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.3907eb	5b		tcd		                TCD
.3907ec	28		plp			            PLP
.3907ed	68		pla		                PLA             ; end setdp macro
.3907ee	a5 1c		lda $1c		                LDA CURSORY
.3907f0	f0 0b		beq $3907fd	                BEQ isrup_done_already_zero ; Check if we are not already @ Zero
.3907f2	a4 1c		ldy $1c		                LDY CURSORY
.3907f4	88		dey		                DEY
.3907f5	84 1c		sty $1c		                STY CURSORY
.3907f7	a6 1a		ldx $1a		                LDX CURSORX
.3907f9	22 28 08 39	jsl $390828	                JSL ILOCATE
.3907fd					isrup_done_already_zero
.3907fd	28		plp		                PLP
.3907fe	2b		pld		                PLD
.3907ff	68		pla		                PLA
.390800	7a		ply		                PLY
.390801	fa		plx		                PLX
.390802	6b		rtl		                RTL
.390803	da		phx		ICSRDOWN        PHX
.390804	5a		phy		                PHY
.390805	0b		phd		                PHD
.390806	c2 30		rep #$30	                REP #$30        ; set A&X long
.390808	48		pha		                PHA             ; begin setdp macro
.390809	08		php			            PHP
.39080a	c2 20		rep #$20	                REP #$20        ; set A long
.39080c	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.39080f	5b		tcd		                TCD
.390810	28		plp			            PLP
.390811	68		pla		                PLA             ; end setdp macro
.390812	a6 1a		ldx $1a		                LDX CURSORX                 ; Get the current column
.390814	a4 1c		ldy $1c		                LDY CURSORY                 ; Get the new row
.390816	c8		iny		                INY
.390817	c4 13		cpy $13		                CPY LINES_VISIBLE           ; Check to see if we're off screen
.390819	90 05		bcc $390820	                BCC icsrdown_noscroll       ; No: go ahead and set the position
.39081b	88		dey		                DEY                         ; Yes: go back to the last row
.39081c	22 6a 08 39	jsl $39086a	                JSL ISCROLLUP               ; But scroll the screen up
.390820					icsrdown_noscroll
.390820	22 28 08 39	jsl $390828	                JSL ILOCATE                 ; And set the cursor position
.390824	2b		pld		                PLD
.390825	7a		ply		                PLY
.390826	fa		plx		                PLX
.390827	6b		rtl		                RTL
.390828	48		pha		ILOCATE         PHA
.390829	0b		phd		                PHD
.39082a	08		php		                PHP
.39082b	48		pha		                PHA             ; begin setdp macro
.39082c	08		php			            PHP
.39082d	c2 20		rep #$20	                REP #$20        ; set A long
.39082f	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390832	5b		tcd		                TCD
.390833	28		plp			            PLP
.390834	68		pla		                PLA             ; end setdp macro
.390835	c2 30		rep #$30	                REP #$30        ; set A&X long
.390837					ilocate_scroll
.390837	c4 13		cpy $13		                CPY LINES_VISIBLE
.390839	90 07		bcc $390842	                BCC ilocate_scrolldone
.39083b	22 6a 08 39	jsl $39086a	                JSL ISCROLLUP
.39083f	88		dey		                DEY
.390840	80 f5		bra $390837	                BRA ilocate_scroll
.390842					ilocate_scrolldone
.390842	86 1a		stx $1a		                STX CURSORX
.390844	84 1c		sty $1c		                STY CURSORY
.390846	a5 0c		lda $0c		                LDA SCREENBEGIN
.390848					ilocate_row
.390848	c0 00 00	cpy #$0000	                CPY #$0
.39084b	f0 08		beq $390855	                BEQ ilocate_right
.39084d	18		clc		ilocate_down    CLC
.39084e	65 11		adc $11		                ADC COLS_PER_LINE
.390850	88		dey		                DEY
.390851	f0 02		beq $390855	                BEQ ilocate_right
.390853	80 f8		bra $39084d	                BRA ilocate_down
.390855	18		clc		ilocate_right   CLC
.390856	65 1a		adc $1a		                ADC CURSORX             ; move the cursor right X columns
.390858	85 17		sta $17		                STA CURSORPOS
.39085a	a4 1c		ldy $1c		                LDY CURSORY
.39085c	98		tya		                TYA
.39085d	8f 16 00 af	sta $af0016	                STA @lVKY_TXT_CURSOR_Y_REG_L  ;Store in Vicky's registers
.390861	8a		txa		                TXA
.390862	8f 14 00 af	sta $af0014	                STA @lVKY_TXT_CURSOR_X_REG_L  ;Store in Vicky's register
.390866	28		plp		ilocate_done    PLP
.390867	2b		pld		                PLD
.390868	68		pla		                PLA
.390869	6b		rtl		                RTL
.39086a					ISCROLLUP
.39086a	48		pha		                PHA
.39086b	da		phx		                PHX
.39086c	5a		phy		                PHY
.39086d	8b		phb		                PHB
.39086e	08		php		                PHP
.39086f	c2 30		rep #$30	                REP #$30        ; set A&X long
.390871	18		clc		                CLC
.390872	a0 00 a0	ldy #$a000	                LDY #$A000
.390875	a2 80 a0	ldx #$a080	                LDX #$A080
.390878	a9 7f 1f	lda #$1f7f	                LDA #128 * 63 - 1
.39087b	54 af af	mvn $af,$af	                MVN $AF,$AF
.39087e	c2 30		rep #$30	                REP #$30        ; set A&X long
.390880	a0 00 c0	ldy #$c000	                LDY #$C000
.390883	a2 80 c0	ldx #$c080	                LDX #$C080
.390886	a9 7f 1f	lda #$1f7f	                LDA #128 * 63 - 1
.390889	54 af af	mvn $af,$af	                MVN $AF,$AF
.39088c	28		plp		                PLP
.39088d	ab		plb		                PLB
.39088e	7a		ply		                PLY
.39088f	fa		plx		                PLX
.390890	68		pla		                PLA
.390891	6b		rtl		                RTL
.390892	08		php		IPRINTH         PHP
.390893	48		pha		                PHA
.390894					iprinth1
.390894	e2 20		sep #$20	                SEP #$20        ; set A short
.390896	bd 00 00	lda $0000,x	                LDA #0,b,x      ; Read the value to be printed
.390899	4a		lsr a		                LSR
.39089a	4a		lsr a		                LSR
.39089b	4a		lsr a		                LSR
.39089c	4a		lsr a		                LSR
.39089d	22 af 08 39	jsl $3908af	                JSL iprint_digit
.3908a1	bd 00 00	lda $0000,x	                LDA #0,b,x
.3908a4	22 af 08 39	jsl $3908af	                JSL iprint_digit
.3908a8	ca		dex		                DEX
.3908a9	88		dey		                DEY
.3908aa	d0 e8		bne $390894	                BNE iprinth1
.3908ac	68		pla		                PLA
.3908ad	28		plp		                PLP
.3908ae	6b		rtl		                RTL
.3908af	da		phx		iprint_digit    PHX
.3908b0	c2 20		rep #$20	                REP #$20        ; set A long
.3908b2	29 0f 00	and #$000f	                AND #$0F
.3908b5	aa		tax		                TAX
.3908b6	bf 61 16 39	lda $391661,x	                LDA hex_digits,X
.3908ba	22 64 06 39	jsl $390664	                JSL IPUTC       ; Print the digit
.3908be	fa		plx		                PLX
.3908bf	6b		rtl		                RTL
.3908c0	0b		phd		ICLRSCREEN	    PHD
.3908c1	08		php		                PHP
.3908c2	48		pha		                PHA
.3908c3	da		phx		                PHX
.3908c4	e2 20		sep #$20	                SEP #$20        ; set A short
.3908c6	c2 10		rep #$10	                REP #$10        ; set X long
.3908c8	a2 00 00	ldx #$0000	                LDX #$0000		; Only Use One Pointer
.3908cb	a9 20		lda #$20	                LDA #$20		; Fill the Entire Screen with Space
.3908cd	9f 00 a0 af	sta $afa000,x	iclearloop0	    STA CS_TEXT_MEM_PTR, x	;
.3908d1	e8		inx		                inx
.3908d2	e0 00 20	cpx #$2000	                cpx #$2000
.3908d5	d0 f6		bne $3908cd	                bne iclearloop0
.3908d7	a2 00 00	ldx #$0000	                LDX	#$0000		; Only Use One Pointer
.3908da	a9 ed		lda #$ed	                LDA #$ED		; Fill the Color Memory with Foreground: 75% Purple, Background 12.5% White
.3908dc	9f 00 c0 af	sta $afc000,x	iclearloop1	    STA CS_COLOR_MEM_PTR, x	;
.3908e0	e8		inx		                inx
.3908e1	e0 00 20	cpx #$2000	                cpx #$2000
.3908e4	d0 f6		bne $3908dc	                bne iclearloop1
.3908e6	c2 10		rep #$10	                REP #$10        ; set X long
.3908e8	c2 20		rep #$20	                REP #$20        ; set A long
.3908ea	fa		plx		                PLX
.3908eb	68		pla		                PLA
.3908ec	28		plp		                PLP
.3908ed	2b		pld		                PLD
.3908ee	6b		rtl		                RTL
.3908ef	48		pha		ICOLORFLAG      PHA
.3908f0	da		phx		                PHX
.3908f1	08		php		                PHP
.3908f2	e2 30		sep #$30	                SEP #$30        ; set A&X short
.3908f4	a2 00		ldx #$00	                LDX #$00
.3908f6	bf 89 13 39	lda $391389,x	iclearloop2	    LDA @lgreet_clr_line1,x
.3908fa	9f 00 c0 af	sta $afc000,x	                STA CS_COLOR_MEM_PTR,x
.3908fe	bf b3 13 39	lda $3913b3,x	                LDA @lgreet_clr_line2,x
.390902	9f 80 c0 af	sta $afc080,x	                STA CS_COLOR_MEM_PTR + $80,x
.390906	bf dd 13 39	lda $3913dd,x	                LDA @lgreet_clr_line3,x
.39090a	9f 00 c1 af	sta $afc100,x	                STA CS_COLOR_MEM_PTR + $100,x
.39090e	bf 07 14 39	lda $391407,x	                LDA @lgreet_clr_line4,x
.390912	9f 80 c1 af	sta $afc180,x	                STA CS_COLOR_MEM_PTR + $180,x
.390916	bf 31 14 39	lda $391431,x	                LDA @lgreet_clr_line5,x
.39091a	9f 00 c2 af	sta $afc200,x	                STA CS_COLOR_MEM_PTR + $200,x
.39091e	e8		inx		                inx
.39091f	e0 2a		cpx #$2a	                cpx #42
.390921	d0 d3		bne $3908f6	                bne iclearloop2
.390923	28		plp		                PLP
.390924	fa		plx		                PLX
.390925	68		pla		                PLA
.390926	6b		rtl		                RTL
.390927	0b		phd		IINITCHLUT		  PHD
.390928	08		php		                PHP
.390929	48		pha		                PHA
.39092a	da		phx		                PHX
.39092b	e2 20		sep #$20	                SEP #$20        ; set A short
.39092d	e2 10		sep #$10	                SEP #$10        ; set X short
.39092f	a2 00		ldx #$00					        LDX	#$00
.390931	bf 5b 14 39	lda $39145b,x	lutinitloop0	  LDA @lfg_color_lut,x		; get Local Data
.390935	9f 40 1f af	sta $af1f40,x	                STA FG_CHAR_LUT_PTR,x	; Write in LUT Memory
.390939	e8		inx		                inx
.39093a	e0 40		cpx #$40	                cpx #$40
.39093c	d0 f3		bne $390931	                bne lutinitloop0
.39093e	a2 00		ldx #$00	                LDX	#$00
.390940	bf 9b 14 39	lda $39149b,x	lutinitloop1	  LDA @lbg_color_lut,x		; get Local Data
.390944	9f 80 1f af	sta $af1f80,x	                STA BG_CHAR_LUT_PTR,x	; Write in LUT Memory
.390948	e8		inx		                INX
.390949	e0 40		cpx #$40	                CPX #$40
.39094b	d0 f3		bne $390940	                bne lutinitloop1
.39094d	c2 20		rep #$20	                REP #$20        ; set A long
.39094f	c2 10		rep #$10	                REP #$10        ; set X long
.390951	fa		plx		                PLX
.390952	68		pla		                PLA
.390953	28		plp		                PLP
.390954	2b		pld		                PLD
.390955	6b		rtl		                RTL
.390956					IINITGAMMATABLE
.390956	e2 20		sep #$20	                SEP #$20        ; set A short
.390958	c2 10		rep #$10	                REP #$10        ; set X long
.39095a	a2 00 00	ldx #$0000	                ldx #$0000
.39095d	bf 00 1b 39	lda $391b00,x	initgammaloop   LDA GAMMA_1_8_Tbl, x
.390961	9f 00 40 af	sta $af4000,x	                STA GAMMA_B_LUT_PTR, x
.390965	9f 00 41 af	sta $af4100,x	                STA GAMMA_G_LUT_PTR, x
.390969	9f 00 42 af	sta $af4200,x	                STA GAMMA_R_LUT_PTR, x
.39096d	e8		inx		                inx
.39096e	e0 00 01	cpx #$0100	                cpx #$0100
.390971	d0 ea		bne $39095d	                bne initgammaloop
.390973	c2 30		rep #$30	                REP #$30        ; set A&X long
.390975	6b		rtl		                RTL
.390976	48		pha		IINITALLLUT     PHA
.390977	da		phx		                PHX
.390978	a2 00 00	ldx #$0000	                LDX #$0000
.39097b	e2 20		sep #$20	                SEP #$20        ; set A short
.39097d	a9 00		lda #$00	                LDA #$00
.39097f	85 0a		sta $0a		                STA $0A     ; Temp Location
.390981					iinit_lut_loop
.390981	86 02		stx $02		                STX $02
.390983	a6 0a		ldx $0a		                LDX $0A
.390985	bf 00 1a 39	lda $391a00,x	                LDA GAMMA_2_2_Tbl, x
.390989	49 55		eor #$55	                EOR  #$55
.39098b	a6 02		ldx $02		                LDX $02
.39098d	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390991	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390995	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390999	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.39099d	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.3909a1	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.3909a5	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.3909a9	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.3909ad	e8		inx		                inx
.3909ae	86 02		stx $02		                STX $02
.3909b0	a6 0a		ldx $0a		                LDX $0A
.3909b2	bf 00 1c 39	lda $391c00,x	                LDA RANDOM_LUT_Tbl, x
.3909b6	a6 02		ldx $02		                LDX $02
.3909b8	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.3909bc	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.3909c0	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.3909c4	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.3909c8	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.3909cc	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.3909d0	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.3909d4	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.3909d8	e8		inx		                inx
.3909d9	86 02		stx $02		                STX $02
.3909db	a6 0a		ldx $0a		                LDX $0A
.3909dd	bf 00 1b 39	lda $391b00,x	                LDA GAMMA_1_8_Tbl, x
.3909e1	49 aa		eor #$aa	                EOR  #$AA
.3909e3	a6 02		ldx $02		                LDX $02
.3909e5	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.3909e9	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.3909ed	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.3909f1	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.3909f5	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.3909f9	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.3909fd	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390a01	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390a05	e8		inx		                inx
.390a06	a9 ff		lda #$ff	                LDA #$FF
.390a08	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390a0c	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390a10	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390a14	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390a18	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390a1c	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390a20	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390a24	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390a28	e6 0a		inc $0a		                inc $0A
.390a2a	e8		inx		                inx
.390a2b	e0 00 04	cpx #$0400	                cpx #$0400
.390a2e	f0 03		beq $390a33	                beq iinit_lut_exit
.390a30	82 4e ff	brl $390981	                brl iinit_lut_loop
.390a33					iinit_lut_exit
.390a33	c2 30		rep #$30	                REP #$30        ; set A&X long
.390a35	fa		plx		                PLX
.390a36	68		pla		                PLA
.390a37	6b		rtl		                RTL
.390a38	48		pha		IINITVKYTXTMODE PHA
.390a39	e2 20		sep #$20	                SEP #$20        ; set A short
.390a3b	a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En      ;Okay, this Enables the Text Mode (Video Display)
.390a3d	8f 00 00 af	sta $af0000	                STA MASTER_CTRL_REG_L
.390a41	a9 20		lda #$20	                LDA #$20
.390a43	8f 05 00 af	sta $af0005	                STA BORDER_COLOR_B
.390a47	8f 07 00 af	sta $af0007	                STA BORDER_COLOR_R
.390a4b	a9 00		lda #$00	                LDA #$00
.390a4d	8f 06 00 af	sta $af0006	                STA BORDER_COLOR_G
.390a51	a9 01		lda #$01	                LDA #Border_Ctrl_Enable   ; Enable the Border
.390a53	8f 04 00 af	sta $af0004	                STA BORDER_CTRL_REG
.390a57	a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En
.390a59	8f 00 00 af	sta $af0000	                STA MASTER_CTRL_REG_L
.390a5d	c2 30		rep #$30	                REP #$30        ; set A&X long
.390a5f	68		pla		                PLA
.390a60	6b		rtl		                RTL
.390a61					IINITVKYGRPMODE
.390a61	48		pha		                PHA
.390a62	e2 20		sep #$20	                SEP #$20        ; set A short
.390a64	a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.390a66	8f 40 01 af	sta $af0140	                STA @lBM_CONTROL_REG
.390a6a	a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.390a6c	8f 41 01 af	sta $af0141	                STA @lBM_START_ADDY_L
.390a70	a9 c0		lda #$c0	                LDA #$C0
.390a72	8f 42 01 af	sta $af0142	                STA @lBM_START_ADDY_M
.390a76	a9 00		lda #$00	                LDA #$00
.390a78	8f 43 01 af	sta $af0143	                STA @lBM_START_ADDY_H ; This address is always base from
.390a7c	a9 80		lda #$80	                LDA #$80
.390a7e	8f 44 01 af	sta $af0144	                STA BM_X_SIZE_L
.390a82	a9 02		lda #$02	                LDA #$02
.390a84	8f 45 01 af	sta $af0145	                STA BM_X_SIZE_H         ; $0280 = 640
.390a88	a9 e0		lda #$e0	                LDA #$E0
.390a8a	8f 46 01 af	sta $af0146	                STA BM_Y_SIZE_L
.390a8e	a9 01		lda #$01	                LDA #$01
.390a90	8f 47 01 af	sta $af0147	                STA BM_Y_SIZE_H         ; $01E0 = 480
.390a94	c2 30		rep #$30	                REP #$30        ; set A&X long
.390a96	68		pla		                PLA
.390a97	6b		rtl		                RTL
.390a98					IINITTILEMODE
.390a98	6b		rtl		                RTL
.390a99	48		pha		IINITSPRITE     PHA
.390a9a	e2 20		sep #$20	                SEP #$20        ; set A short
.390a9c	a9 03		lda #$03	                LDA #$03    ; Enable 17 Sprites
.390a9e	8f 00 02 af	sta $af0200	                STA SP00_CONTROL_REG
.390aa2	8f 08 02 af	sta $af0208	                STA SP01_CONTROL_REG
.390aa6	8f 10 02 af	sta $af0210	                STA SP02_CONTROL_REG
.390aaa	8f 18 02 af	sta $af0218	                STA SP03_CONTROL_REG
.390aae	8f 20 02 af	sta $af0220	                STA SP04_CONTROL_REG
.390ab2	8f 28 02 af	sta $af0228	                STA SP05_CONTROL_REG
.390ab6	8f 30 02 af	sta $af0230	                STA SP06_CONTROL_REG
.390aba	8f 38 02 af	sta $af0238	                STA SP07_CONTROL_REG
.390abe	8f 40 02 af	sta $af0240	                STA SP08_CONTROL_REG
.390ac2	8f 48 02 af	sta $af0248	                STA SP09_CONTROL_REG
.390ac6	8f 50 02 af	sta $af0250	                STA SP10_CONTROL_REG
.390aca	8f 58 02 af	sta $af0258	                STA SP11_CONTROL_REG
.390ace	8f 60 02 af	sta $af0260	                STA SP12_CONTROL_REG
.390ad2	8f 68 02 af	sta $af0268	                STA SP13_CONTROL_REG
.390ad6	8f 70 02 af	sta $af0270	                STA SP14_CONTROL_REG
.390ada	8f 78 02 af	sta $af0278	                STA SP15_CONTROL_REG
.390ade	8f 80 02 af	sta $af0280	                STA SP16_CONTROL_REG
.390ae2	a9 09		lda #$09	                LDA #$09
.390ae4	8f 03 02 af	sta $af0203	                STA SP00_ADDY_PTR_H
.390ae8	8f 0b 02 af	sta $af020b	                STA SP01_ADDY_PTR_H
.390aec	8f 13 02 af	sta $af0213	                STA SP02_ADDY_PTR_H
.390af0	8f 1b 02 af	sta $af021b	                STA SP03_ADDY_PTR_H
.390af4	8f 23 02 af	sta $af0223	                STA SP04_ADDY_PTR_H
.390af8	8f 2b 02 af	sta $af022b	                STA SP05_ADDY_PTR_H
.390afc	8f 33 02 af	sta $af0233	                STA SP06_ADDY_PTR_H
.390b00	8f 3b 02 af	sta $af023b	                STA SP07_ADDY_PTR_H
.390b04	8f 43 02 af	sta $af0243	                STA SP08_ADDY_PTR_H
.390b08	8f 4b 02 af	sta $af024b	                STA SP09_ADDY_PTR_H
.390b0c	8f 53 02 af	sta $af0253	                STA SP10_ADDY_PTR_H
.390b10	8f 5b 02 af	sta $af025b	                STA SP11_ADDY_PTR_H
.390b14	8f 63 02 af	sta $af0263	                STA SP12_ADDY_PTR_H
.390b18	8f 6b 02 af	sta $af026b	                STA SP13_ADDY_PTR_H
.390b1c	8f 73 02 af	sta $af0273	                STA SP14_ADDY_PTR_H
.390b20	8f 7b 02 af	sta $af027b	                STA SP15_ADDY_PTR_H
.390b24	8f 83 02 af	sta $af0283	                STA SP16_ADDY_PTR_H
.390b28	a9 00		lda #$00	                LDA #$00
.390b2a	8f 02 02 af	sta $af0202	                STA SP00_ADDY_PTR_M
.390b2e	a9 04		lda #$04	                LDA #$04
.390b30	8f 0a 02 af	sta $af020a	                STA SP01_ADDY_PTR_M
.390b34	a9 08		lda #$08	                LDA #$08
.390b36	8f 12 02 af	sta $af0212	                STA SP02_ADDY_PTR_M
.390b3a	a9 0c		lda #$0c	                LDA #$0C
.390b3c	8f 1a 02 af	sta $af021a	                STA SP03_ADDY_PTR_M
.390b40	a9 10		lda #$10	                LDA #$10
.390b42	8f 22 02 af	sta $af0222	                STA SP04_ADDY_PTR_M
.390b46	a9 14		lda #$14	                LDA #$14
.390b48	8f 2a 02 af	sta $af022a	                STA SP05_ADDY_PTR_M
.390b4c	a9 18		lda #$18	                LDA #$18
.390b4e	8f 32 02 af	sta $af0232	                STA SP06_ADDY_PTR_M
.390b52	a9 1c		lda #$1c	                LDA #$1C
.390b54	8f 3a 02 af	sta $af023a	                STA SP07_ADDY_PTR_M
.390b58	a9 20		lda #$20	                LDA #$20
.390b5a	8f 42 02 af	sta $af0242	                STA SP08_ADDY_PTR_M
.390b5e	a9 24		lda #$24	                LDA #$24
.390b60	8f 4a 02 af	sta $af024a	                STA SP09_ADDY_PTR_M
.390b64	a9 28		lda #$28	                LDA #$28
.390b66	8f 52 02 af	sta $af0252	                STA SP10_ADDY_PTR_M
.390b6a	a9 2c		lda #$2c	                LDA #$2C
.390b6c	8f 5a 02 af	sta $af025a	                STA SP11_ADDY_PTR_M
.390b70	a9 30		lda #$30	                LDA #$30
.390b72	8f 62 02 af	sta $af0262	                STA SP12_ADDY_PTR_M
.390b76	a9 34		lda #$34	                LDA #$34
.390b78	8f 6a 02 af	sta $af026a	                STA SP13_ADDY_PTR_M
.390b7c	a9 38		lda #$38	                LDA #$38
.390b7e	8f 72 02 af	sta $af0272	                STA SP14_ADDY_PTR_M
.390b82	a9 3c		lda #$3c	                LDA #$3C
.390b84	8f 7a 02 af	sta $af027a	                STA SP15_ADDY_PTR_M
.390b88	a9 40		lda #$40	                LDA #$40
.390b8a	8f 82 02 af	sta $af0282	                STA SP16_ADDY_PTR_M
.390b8e	a9 00		lda #$00	                LDA #$00
.390b90	8f 01 02 af	sta $af0201	                STA SP00_ADDY_PTR_L
.390b94	8f 09 02 af	sta $af0209	                STA SP01_ADDY_PTR_L
.390b98	8f 11 02 af	sta $af0211	                STA SP02_ADDY_PTR_L
.390b9c	8f 19 02 af	sta $af0219	                STA SP03_ADDY_PTR_L
.390ba0	8f 21 02 af	sta $af0221	                STA SP04_ADDY_PTR_L
.390ba4	8f 29 02 af	sta $af0229	                STA SP05_ADDY_PTR_L
.390ba8	8f 31 02 af	sta $af0231	                STA SP06_ADDY_PTR_L
.390bac	8f 39 02 af	sta $af0239	                STA SP07_ADDY_PTR_L
.390bb0	8f 41 02 af	sta $af0241	                STA SP08_ADDY_PTR_L
.390bb4	8f 49 02 af	sta $af0249	                STA SP09_ADDY_PTR_L
.390bb8	8f 51 02 af	sta $af0251	                STA SP10_ADDY_PTR_L
.390bbc	8f 59 02 af	sta $af0259	                STA SP11_ADDY_PTR_L
.390bc0	8f 61 02 af	sta $af0261	                STA SP12_ADDY_PTR_L
.390bc4	8f 69 02 af	sta $af0269	                STA SP13_ADDY_PTR_L
.390bc8	8f 71 02 af	sta $af0271	                STA SP14_ADDY_PTR_L
.390bcc	8f 79 02 af	sta $af0279	                STA SP15_ADDY_PTR_L
.390bd0	8f 81 02 af	sta $af0281	                STA SP16_ADDY_PTR_L
.390bd4	68		pla		                PLA
.390bd5	6b		rtl		                RTL
.390bd6					IINITFONTSET
.390bd6	e2 20		sep #$20	                SEP #$20        ; set A short
.390bd8	c2 10		rep #$10	                REP #$10        ; set X long
.390bda	a2 00 00	ldx #$0000	                LDX #$0000
.390bdd					initFontsetbranch0
.390bdd	bf 00 f0 3f	lda $3ff000,x	                LDA @lFONT_4_BANK0,X    ; RAM Content
.390be1	9f 00 80 af	sta $af8000,x	                STA @lFONT_MEMORY_BANK0,X ; Vicky FONT RAM Bank
.390be5	e8		inx		                INX
.390be6	e0 00 08	cpx #$0800	                CPX #$0800
.390be9	d0 f2		bne $390bdd	                BNE initFontsetbranch0
.390beb	ea		nop		                NOP
.390bec	a2 00 00	ldx #$0000	                LDX #$0000
.390bef					initFontsetbranch1
.390bef	bf 00 f8 3f	lda $3ff800,x	                LDA @lFONT_4_BANK1,X
.390bf3	9f 00 88 af	sta $af8800,x	                STA @lFONT_MEMORY_BANK1,X ; Vicky FONT RAM Bank
.390bf7	e8		inx		                INX
.390bf8	e0 00 08	cpx #$0800	                CPX #$0800
.390bfb	d0 f2		bne $390bef	                BNE initFontsetbranch1
.390bfd	ea		nop		                NOP
.390bfe	c2 30		rep #$30	                REP #$30        ; set A&X long
.390c00	6b		rtl		                RTL
.390c01					INITMOUSEPOINTER
.390c01	e2 20		sep #$20	                SEP #$20        ; set A short
.390c03	c2 10		rep #$10	                REP #$10        ; set X long
.390c05	a2 00 00	ldx #$0000	                LDX #$0000
.390c08					FILL_MOUSE_MARKER
.390c08	bf 00 1d 39	lda $391d00,x	                LDA @lMOUSE_POINTER_PTR,X
.390c0c	9f 00 05 af	sta $af0500,x	                STA @lMOUSE_PTR_GRAP0_START, X
.390c10	e8		inx		                INX
.390c11	e0 00 01	cpx #$0100	                CPX #$0100
.390c14	d0 f2		bne $390c08	                BNE FILL_MOUSE_MARKER
.390c16	ea		nop		                nop
.390c17	a9 01		lda #$01	                LDA #$01
.390c19	8f 00 07 af	sta $af0700	                STA @lMOUSE_PTR_CTRL_REG_L  ; Enable Mouse, Mouse Pointer Graphic Bank 0
.390c1d	c2 30		rep #$30	                REP #$30        ; set A&X long
.390c1f	6b		rtl		                RTL
.390c20	48		pha		IINITCURSOR     PHA
.390c21	e2 20		sep #$20	                SEP #$20        ; set A short
.390c23	a9 b1		lda #$b1	                LDA #$B1      ;The Cursor Character will be a Fully Filled Block
.390c25	8f 12 00 af	sta $af0012	                STA VKY_TXT_CURSOR_CHAR_REG
.390c29	a9 03		lda #$03	                LDA #$03      ;Set Cursor Enable And Flash Rate @1Hz
.390c2b	8f 10 00 af	sta $af0010	                STA VKY_TXT_CURSOR_CTRL_REG ;
.390c2f	c2 30		rep #$30	                REP #$30        ; set A&X long
.390c31	a9 00 00	lda #$0000	                LDA #$0000;
.390c34	8f 14 00 af	sta $af0014	                STA VKY_TXT_CURSOR_X_REG_L; // Set the X to Position 1
.390c38	a9 06 00	lda #$0006	                LDA #$0006;
.390c3b	8f 16 00 af	sta $af0016	                STA VKY_TXT_CURSOR_Y_REG_L; // Set the Y to Position 6 (Below)
.390c3f	68		pla		                PLA
.390c40	6b		rtl		                RTL
.390c41	0b		phd		IINITSUPERIO	  PHD
.390c42	08		php		                PHP
.390c43	48		pha		                PHA
.390c44	e2 20		sep #$20	                SEP #$20        ; set A short
.390c46	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390c48	8f 23 11 af	sta $af1123	                STA GP10_REG
.390c4c	af 23 11 af	lda $af1123	                LDA GP10_REG
.390c50	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390c52	8f 24 11 af	sta $af1124	                STA GP11_REG
.390c56	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390c58	8f 25 11 af	sta $af1125	                STA GP12_REG
.390c5c	a9 01		lda #$01	        				LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390c5e	8f 26 11 af	sta $af1126	        				STA GP13_REG
.390c62	a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BX) Bit[0] = 1, Bit[2] = 1
.390c64	8f 27 11 af	sta $af1127	        				STA GP14_REG
.390c68	a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BY) Bit[0] = 1, Bit[2] = 1
.390c6a	8f 28 11 af	sta $af1128	        				STA GP15_REG
.390c6e	a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BX) Bit[0] = 1, Bit[2] = 1
.390c70	8f 29 11 af	sta $af1129	        				STA GP16_REG
.390c74	a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BY) Bit[0] = 1, Bit[2] = 1
.390c76	8f 2a 11 af	sta $af112a	        				STA GP17_REG
.390c7a	a9 00		lda #$00	        				LDA #$00		;(C256 - HEADPHONE MUTE) - Output GPIO - Push-Pull (1 - Headphone On, 0 - HeadPhone Off)
.390c7c	8f 2b 11 af	sta $af112b	        				STA GP20_REG
.390c80	a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390c82	8f 2f 11 af	sta $af112f					        STA GP24_REG
.390c86	a9 05		lda #$05					        LDA #$05		;(C256 - MIDI IN) Bit[0] = 1, Bit[2] = 1 (Page 132 Manual)
.390c88	8f 30 11 af	sta $af1130					        STA GP25_REG
.390c8c	a9 84		lda #$84				        	LDA #$84		;(C256 - MIDI OUT) Bit[2] = 1, Bit[7] = 1 (Open Drain - To be Checked)
.390c8e	8f 31 11 af	sta $af1131					        STA GP26_REG
.390c92	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 1) Setup as GPIO Input for now
.390c94	8f 33 11 af	sta $af1133					        STA GP30_REG
.390c98	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 4) Setup as GPIO Input for now
.390c9a	8f 34 11 af	sta $af1134					        STA GP31_REG
.390c9e	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 3) Setup as GPIO Input for now
.390ca0	8f 35 11 af	sta $af1135					        STA GP32_REG
.390ca4	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 6) Setup as GPIO Input for now
.390ca6	8f 36 11 af	sta $af1136					        STA GP33_REG
.390caa	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 5) Setup as GPIO Input for now
.390cac	8f 37 11 af	sta $af1137					        STA GP34_REG
.390cb0	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 8) Setup as GPIO Input for now
.390cb2	8f 38 11 af	sta $af1138					        STA GP35_REG
.390cb6	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 7) Setup as GPIO Input for now
.390cb8	8f 39 11 af	sta $af1139					        STA GP36_REG
.390cbc	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 10) Setup as GPIO Input for now
.390cbe	8f 3a 11 af	sta $af113a					        STA GP37_REG
.390cc2	a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390cc4	8f 3d 11 af	sta $af113d					        STA GP42_REG
.390cc8	a9 01		lda #$01				          LDA #$01		;(C256 - INPUT PLL CLK INTERRUPT) Default Value - Will keep it as an input for now, no real usage for now
.390cca	8f 3e 11 af	sta $af113e					        STA GP43_REG
.390cce	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RI2) - Input - Set Secondary Function
.390cd0	8f 3f 11 af	sta $af113f					        STA GP50_REG
.390cd4	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DCD2) - Input - Set Secondary Function
.390cd6	8f 40 11 af	sta $af1140					        STA GP51_REG
.390cda	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RXD2) - Input - Set Secondary Function
.390cdc	8f 41 11 af	sta $af1141					        STA GP52_REG
.390ce0	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - TXD2) - Output - Set Secondary Function
.390ce2	8f 42 11 af	sta $af1142					        STA GP53_REG
.390ce6	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DSR2) - Input - Set Secondary Function
.390ce8	8f 43 11 af	sta $af1143					        STA GP54_REG
.390cec	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - RTS2) - Output - Set Secondary Function
.390cee	8f 44 11 af	sta $af1144					        STA GP55_REG
.390cf2	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - CTS2) - Input - Set Secondary Function
.390cf4	8f 45 11 af	sta $af1145					        STA GP56_REG
.390cf8	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - DTR2) - Output - Set Secondary Function
.390cfa	8f 46 11 af	sta $af1146					        STA GP57_REG
.390cfe	a9 84		lda #$84					        LDA #$84		;(C256 - LED1) - Open Drain - Output
.390d00	8f 47 11 af	sta $af1147					        STA GP60_REG
.390d04	a9 84		lda #$84					        LDA #$84		;(C256 - LED2) - Open Drain - Output
.390d06	8f 48 11 af	sta $af1148					        STA GP61_REG
.390d0a	a9 00		lda #$00				        	LDA #$00		;GPIO Data Register (GP10..GP17) - Not Used
.390d0c	8f 4b 11 af	sta $af114b					        STA GP1_REG
.390d10	a9 01		lda #$01					        LDA #$01		;GPIO Data Register (GP20..GP27) - Bit[0] - Headphone Mute (Enabling it)
.390d12	8f 4c 11 af	sta $af114c					        STA GP2_REG
.390d16	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP30..GP37) - Since it is in Output mode, nothing to write here.
.390d18	8f 4d 11 af	sta $af114d					        STA GP3_REG
.390d1c	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP40..GP47)  - Not Used
.390d1e	8f 4e 11 af	sta $af114e					        STA GP4_REG
.390d22	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP50..GP57)  - Not Used
.390d24	8f 4f 11 af	sta $af114f					        STA GP5_REG
.390d28	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP60..GP61)  - Not Used
.390d2a	8f 50 11 af	sta $af1150					        STA GP6_REG
.390d2e	a9 01		lda #$01					        LDA #$01		;LED1 Output - Already setup by Vicky Init Phase, for now, I will leave it alone
.390d30	8f 5d 11 af	sta $af115d					        STA LED1_REG
.390d34	a9 02		lda #$02					        LDA #$02		;LED2 Output - However, I will setup this one, to make sure the Code works (Full On, when Code was ran)
.390d36	8f 5e 11 af	sta $af115e					        STA LED2_REG
.390d3a	c2 20		rep #$20	                REP #$20        ; set A long
.390d3c	68		pla		                PLA
.390d3d	28		plp						        PLP
.390d3e	2b		pld					        	PLD
.390d3f	6b		rtl		                RTL
.390d40	0b		phd		IINITKEYBOARD	  PHD
.390d41	08		php						        PHP
.390d42	48		pha						        PHA
.390d43	da		phx						        PHX
.390d44	e2 20		sep #$20	                SEP #$20        ; set A short
.390d46	c2 10		rep #$10	                REP #$10        ; set X long
.390d48	18		clc		                CLC
.390d49	20 f9 0d	jsr $390df9	                JSR Poll_Inbuf ;
.390d4c	a9 aa		lda #$aa					        LDA #$AA			;Send self test command
.390d4e	8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.390d52	20 04 0e	jsr $390e04	                JSR Poll_Outbuf ;
.390d55	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Check self test result
.390d59	c9 55		cmp #$55					        CMP #$55
.390d5b	f0 03		beq $390d60					        BEQ	passAAtest
.390d5d	82 89 00	brl $390de9	                BRL initkb_loop_out
.390d60					passAAtest
.390d60	a9 ab		lda #$ab					        LDA #$AB			;Send test Interface command
.390d62	8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.390d66	20 04 0e	jsr $390e04	                JSR Poll_Outbuf ;
.390d69	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Display Interface test results
.390d6d	c9 00		cmp #$00					        CMP #$00			;Should be 00
.390d6f	f0 03		beq $390d74					        BEQ	passABtest
.390d71	82 75 00	brl $390de9	                BRL initkb_loop_out
.390d74					passABtest
.390d74	a9 60		lda #$60	                LDA #$60            ; Send Command 0x60 so to Enable Interrupt
.390d76	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390d7a	20 f9 0d	jsr $390df9	                JSR Poll_Inbuf ;
.390d7d	a9 69		lda #$69	                LDA #%01101001      ; Enable Interrupt
.390d7f	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.390d83	20 f9 0d	jsr $390df9	                JSR Poll_Inbuf ;
.390d86	a9 ff		lda #$ff	                LDA #$FF      ; Send Keyboard Reset command
.390d88	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.390d8c	a2 ff ff	ldx #$ffff	                LDX #$FFFF
.390d8f	ca		dex		DLY_LOOP1       DEX
.390d90	ea		nop		                NOP
.390d91	ea		nop		                NOP
.390d92	ea		nop		                NOP
.390d93	ea		nop		                NOP
.390d94	ea		nop		                NOP
.390d95	ea		nop		                NOP
.390d96	ea		nop		                NOP
.390d97	ea		nop		                NOP
.390d98	e0 00 00	cpx #$0000	                CPX #$0000
.390d9b	d0 f2		bne $390d8f	                BNE DLY_LOOP1
.390d9d	20 04 0e	jsr $390e04	                JSR Poll_Outbuf ;
.390da0	af 60 10 af	lda $af1060	                LDA KBD_OUT_BUF   ; Read Output Buffer
.390da4					DO_CMD_F4_AGAIN
.390da4	20 f9 0d	jsr $390df9	                JSR Poll_Inbuf ;
.390da7	a9 f4		lda #$f4					        LDA #$F4			; Enable the Keyboard
.390da9	8f 60 10 af	sta $af1060					        STA KBD_DATA_BUF
.390dad	20 04 0e	jsr $390e04	                JSR Poll_Outbuf ;
.390db0	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		; Clear the Output buffer
.390db4	c9 fa		cmp #$fa	                CMP #$FA
.390db6	d0 ec		bne $390da4	                BNE DO_CMD_F4_AGAIN
.390db8	20 0f 0e	jsr $390e0f	                JSR INIT_MOUSE
.390dbb	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0  ; Read the Pending Register &
.390dbf	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.390dc1	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0  ; Writing it back will clear the Active Bit
.390dc5	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1  ; Read the Pending Register &
.390dc9	29 01		and #$01	                AND #FNX1_INT00_KBD
.390dcb	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1  ; Writing it back will clear the Active Bit
.390dcf	af 4d 01 00	lda $00014d	                LDA @lINT_MASK_REG1
.390dd3	29 fe		and #$fe	                AND #~FNX1_INT00_KBD
.390dd5	8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.390dd9	af 4c 01 00	lda $00014c	                LDA @lINT_MASK_REG0
.390ddd	29 7f		and #$7f	                AND #~FNX0_INT07_MOUSE
.390ddf	8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.390de3	a2 57 15	ldx #$1557	                LDX #<>Success_kb_init
.390de6	38		sec		                SEC
.390de7	b0 03		bcs $390dec	                BCS InitSuccess
.390de9	a2 69 15	ldx #$1569	initkb_loop_out LDX #<>Failed_kb_init
.390dec	22 44 06 39	jsl $390644	InitSuccess     JSL IPRINT       ; print Message
.390df0	c2 20		rep #$20	                REP #$20        ; set A long
.390df2	c2 10		rep #$10	                REP #$10        ; set X long
.390df4	fa		plx		                PLX
.390df5	68		pla		                PLA
.390df6	28		plp						        PLP
.390df7	2b		pld						        PLD
.390df8	6b		rtl		                RTL
.390df9					Poll_Inbuf
.390df9	af 64 10 af	lda $af1064	                LDA STATUS_PORT		; Load Status Byte
.390dfd	29 02		and #$02					        AND	#<INPT_BUF_FULL	; Test bit $02 (if 0, Empty)
.390dff	c9 02		cmp #$02					        CMP #<INPT_BUF_FULL
.390e01	f0 f6		beq $390df9					        BEQ Poll_Inbuf
.390e03	60		rts		                RTS
.390e04					Poll_Outbuf
.390e04	af 64 10 af	lda $af1064	                LDA STATUS_PORT
.390e08	29 01		and #$01	                AND #OUT_BUF_FULL ; Test bit $01 (if 1, Full)
.390e0a	c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.390e0c	d0 f6		bne $390e04	                BNE Poll_Outbuf
.390e0e	60		rts		                RTS
.390e0f					INIT_MOUSE
.390e0f	20 f9 0d	jsr $390df9	                JSR Poll_Inbuf
.390e12	a9 a8		lda #$a8	                LDA #$A8          ; Enable the second PS2 Channel
.390e14	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390e18					DO_CMD_A9_AGAIN
.390e18	20 f9 0d	jsr $390df9	                JSR Poll_Inbuf
.390e1b	a9 a9		lda #$a9	                LDA #$A9          ; Tests second PS2 Channel
.390e1d	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390e21	20 04 0e	jsr $390e04	                JSR Poll_Outbuf ;
.390e24	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		; Clear the Output buffer
.390e28	c9 00		cmp #$00	                CMP #$00
.390e2a	d0 ec		bne $390e18	                BNE DO_CMD_A9_AGAIN
.390e2c	20 f9 0d	jsr $390df9	                JSR Poll_Inbuf
.390e2f	a9 20		lda #$20	                LDA #$20
.390e31	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390e35	20 04 0e	jsr $390e04	                JSR Poll_Outbuf ;
.390e38	af 60 10 af	lda $af1060	                LDA KBD_OUT_BUF
.390e3c	09 02		ora #$02	                ORA #$02
.390e3e	48		pha		                PHA
.390e3f	20 f9 0d	jsr $390df9	                JSR Poll_Inbuf
.390e42	a9 60		lda #$60	                LDA #$60
.390e44	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390e48	20 f9 0d	jsr $390df9	                JSR Poll_Inbuf ;
.390e4b	68		pla		                PLA
.390e4c	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.390e50	a9 f6		lda #$f6	                LDA #$F6        ;Tell the mouse to use default settings
.390e52	20 75 0e	jsr $390e75	                JSR MOUSE_WRITE
.390e55	20 88 0e	jsr $390e88	                JSR MOUSE_READ
.390e58	a9 e8		lda #$e8	                LDA #$E8
.390e5a	20 75 0e	jsr $390e75	                JSR MOUSE_WRITE
.390e5d	20 88 0e	jsr $390e88	                JSR MOUSE_READ
.390e60	a9 00		lda #$00	                LDA #$00
.390e62	20 75 0e	jsr $390e75	                JSR MOUSE_WRITE
.390e65	20 88 0e	jsr $390e88	                JSR MOUSE_READ
.390e68	a9 f4		lda #$f4	                LDA #$F4        ; Enable the Mouse
.390e6a	20 75 0e	jsr $390e75	                JSR MOUSE_WRITE
.390e6d	20 88 0e	jsr $390e88	                JSR MOUSE_READ
.390e70	a9 00		lda #$00	                LDA #$00
.390e72	85 e0		sta $e0		                STA MOUSE_PTR
.390e74	60		rts		                RTS
.390e75					MOUSE_WRITE
.390e75	48		pha		                PHA
.390e76	20 f9 0d	jsr $390df9	                JSR Poll_Inbuf
.390e79	a9 d4		lda #$d4	                LDA #$D4
.390e7b	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390e7f	20 f9 0d	jsr $390df9	                JSR Poll_Inbuf
.390e82	68		pla		                PLA
.390e83	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.390e87	60		rts		                RTS
.390e88					MOUSE_READ
.390e88	20 04 0e	jsr $390e04	                JSR Poll_Outbuf ;
.390e8b	af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF
.390e8f	60		rts		                RTS
.390e90	48		pha		INITRTC         PHA
.390e91	e2 20		sep #$20	                SEP #$20        ; set A short
.390e93	af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL
.390e97	00		brk #		                BRK
.390e98	c2 20		rep #$20	                REP #$20        ; set A long
.390e9a	68		pla		                PLA
.390e9b	6b		rtl		                RTL
.390e9c					ITESTSID
.390e9c	a9 0f 00	lda #$000f	                LDA #$0F
.390e9f	8f 18 e4 af	sta $afe418	                STA SID0_MODE_VOL
.390ea3	a9 be 00	lda #$00be	                LDA #$BE
.390ea6	8f 05 e4 af	sta $afe405	                STA SID0_V1_ATCK_DECY
.390eaa	a9 f8 00	lda #$00f8	                LDA #$F8
.390ead	8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.390eb1	a9 11 00	lda #$0011	                LDA #$11
.390eb4	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.390eb8	a9 25 00	lda #$0025	                LDA #$25
.390ebb	8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.390ebf	a9 11 00	lda #$0011	                LDA #$11
.390ec2	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL
.390ec6	a9 08 00	lda #$0008	                LDA #$08
.390ec9	8f 03 e4 af	sta $afe403	                STA SID0_V1_PW_HI   ;G1
.390ecd	a9 00 00	lda #$0000	                LDA #$00
.390ed0	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.390ed4	a9 c6 00	lda #$00c6	                LDA #$C6
.390ed7	8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.390edb	a9 08 00	lda #$0008	                LDA #$08
.390ede	8f 0a e4 af	sta $afe40a	                STA SID0_V2_PW_HI   ;G1
.390ee2	a9 00 00	lda #$0000	                LDA #$00
.390ee5	8f 08 e4 af	sta $afe408	                STA SID0_V2_FREQ_HI
.390ee9	a9 08 00	lda #$0008	                LDA #$08
.390eec	8f 0c e4 af	sta $afe40c	                STA SID0_V2_ATCK_DECY
.390ef0	a9 c6 00	lda #$00c6	                LDA #$C6
.390ef3	8f 0d e4 af	sta $afe40d	                STA SID0_V2_SSTN_RLSE
.390ef7	a9 08 00	lda #$0008	                LDA #$08
.390efa	8f 11 e4 af	sta $afe411	                STA SID0_V3_PW_HI   ;G1
.390efe	a9 00 00	lda #$0000	                LDA #$00
.390f01	8f 0f e4 af	sta $afe40f	                STA SID0_V3_FREQ_HI
.390f05	a9 08 00	lda #$0008	                LDA #$08
.390f08	8f 13 e4 af	sta $afe413	                STA SID0_V3_ATCK_DECY
.390f0c	a9 c6 00	lda #$00c6	                LDA #$C6
.390f0f	8f 14 e4 af	sta $afe414	                STA SID0_V3_SSTN_RLSE
.390f13	a9 36 00	lda #$0036	                LDA #$36              ;Left Side (Rev A of Board)
.390f16	8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.390f1a	a9 01 00	lda #$0001	                LDA #$01
.390f1d	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI   ;G1
.390f21	a9 00 00	lda #$0000	                LDA #$00              ;Left Side (Rev A of Board)
.390f24	8f 02 e4 af	sta $afe402	                STA SID0_V1_PW_LO
.390f28	a9 08 00	lda #$0008	                LDA #$08
.390f2b	8f 03 e4 af	sta $afe403	                STA SID0_V1_PW_HI   ;G1
.390f2f	a9 08 00	lda #$0008	                LDA #$08
.390f32	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL    ; Reset
.390f36	a9 0c 00	lda #$000c	                LDA #$0C
.390f39	8f 07 e4 af	sta $afe407	                STA SID0_V2_FREQ_LO
.390f3d	a9 04 00	lda #$0004	                LDA #$04
.390f40	8f 08 e4 af	sta $afe408	                STA SID0_V2_FREQ_HI   ;B1
.390f44	a9 00 00	lda #$0000	                LDA #$00              ;Left Side (Rev A of Board)
.390f47	8f 09 e4 af	sta $afe409	                STA SID0_V2_PW_LO
.390f4b	a9 08 00	lda #$0008	                LDA #$08
.390f4e	8f 0a e4 af	sta $afe40a	                STA SID0_V2_PW_HI   ;G1
.390f52	a9 08 00	lda #$0008	                LDA #$08
.390f55	8f 0b e4 af	sta $afe40b	                STA SID0_V2_CTRL    ; Reset
.390f59	a9 00 00	lda #$0000	                LDA #$00
.390f5c	8f 0e e4 af	sta $afe40e	                STA SID0_V3_FREQ_LO
.390f60	a9 08 00	lda #$0008	                LDA #$08
.390f63	8f 0f e4 af	sta $afe40f	                STA SID0_V3_FREQ_HI   ;D
.390f67	a9 00 00	lda #$0000	                LDA #$00              ;Left Side (Rev A of Board)
.390f6a	8f 10 e4 af	sta $afe410	                STA SID0_V3_PW_LO
.390f6e	a9 08 00	lda #$0008	                LDA #$08
.390f71	8f 11 e4 af	sta $afe411	                STA SID0_V3_PW_HI   ;G1
.390f75	a9 08 00	lda #$0008	                LDA #$08
.390f78	8f 12 e4 af	sta $afe412	                STA SID0_V3_CTRL    ; Reset
.390f7c	a9 10 00	lda #$0010	                LDA #$10
.390f7f	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL    ; Triangle
.390f83	8f 0b e4 af	sta $afe40b	                STA SID0_V2_CTRL    ; Triangle
.390f87	8f 12 e4 af	sta $afe412	                STA SID0_V3_CTRL    ; Triangle
.390f8b	6b		rtl		                RTL
.390f8c	48		pha		IINITCODEC      PHA
.390f8d	c2 20		rep #$20	                REP #$20        ; set A long
.390f8f	a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R13 - Turn On Headphones
.390f92	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390f96	a9 01 00	lda #$0001	                LDA #$0001
.390f99	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390f9d	20 1c 10	jsr $39101c	                JSR CODEC_TRF_FINISHED
.390fa0	a9 0f 2a	lda #$2a0f	                LDA #%0010101000001111       ;R21 - Enable All the Analog In
.390fa3	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390fa7	a9 01 00	lda #$0001	                LDA #$0001
.390faa	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390fae	20 1c 10	jsr $39101c	                JSR CODEC_TRF_FINISHED
.390fb1	a9 01 23	lda #$2301	                LDA #%0010001100000001      ;R17 - Enable All the Analog In
.390fb4	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390fb8	a9 01 00	lda #$0001	                LDA #$0001
.390fbb	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390fbf	20 1c 10	jsr $39101c	                JSR CODEC_TRF_FINISHED
.390fc2	a9 07 2c	lda #$2c07	                LDA #%0010110000000111      ;R22 - Enable all Analog Out
.390fc5	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390fc9	a9 01 00	lda #$0001	                LDA #$0001
.390fcc	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390fd0	20 1c 10	jsr $39101c	                JSR CODEC_TRF_FINISHED
.390fd3	a9 02 14	lda #$1402	                LDA #%0001010000000010      ;R10 - DAC Interface Control
.390fd6	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390fda	a9 01 00	lda #$0001	                LDA #$0001
.390fdd	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390fe1	20 1c 10	jsr $39101c	                JSR CODEC_TRF_FINISHED
.390fe4	a9 02 16	lda #$1602	                LDA #%0001011000000010      ;R11 - ADC Interface Control
.390fe7	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390feb	a9 01 00	lda #$0001	                LDA #$0001
.390fee	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390ff2	20 1c 10	jsr $39101c	                JSR CODEC_TRF_FINISHED
.390ff5	a9 d5 19	lda #$19d5	                LDA #%0001100111010101      ;R12 - Master Mode Control
.390ff8	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390ffc	a9 01 00	lda #$0001	                LDA #$0001
.390fff	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391003	20 1c 10	jsr $39101c	                JSR CODEC_TRF_FINISHED
.391006	68		pla		                PLA
.391007	6b		rtl		                RTL
.391008					IRESETCODEC
.391008	c2 20		rep #$20	                REP #$20        ; set A long
.39100a	a9 00 2e	lda #$2e00	                LDA #$2E00      ;R22 - Enable all Analog Out
.39100d	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391011	a9 01 00	lda #$0001	                LDA #$0001
.391014	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391018	20 1c 10	jsr $39101c	                JSR CODEC_TRF_FINISHED
.39101b	6b		rtl		                RTL
.39101c					CODEC_TRF_FINISHED
.39101c	e2 20		sep #$20	                SEP #$20        ; set A short
.39101e	af 02 e9 af	lda $afe902	CODEC_LOOP      LDA CODEC_WR_CTRL
.391022	29 01		and #$01	                AND #$01
.391024	c9 01		cmp #$01	                CMP #$01
.391026	f0 f6		beq $39101e	                BEQ CODEC_LOOP
.391028	c2 20		rep #$20	                REP #$20        ; set A long
.39102a	60		rts		                RTS
.39102b					IBM_FILL_SCREEN
.39102b	c2 30		rep #$30	                REP #$30        ; set A&X long
.39102d	a9 00 00	lda #$0000	                LDA #$0000
.391030	a2 00 00	ldx #$0000	                LDX #$0000
.391033					BM_FILL_SCREEN_LOOPY
.391033	a0 00 00	ldy #$0000	                LDY #$0000
.391036	e2 20		sep #$20	                SEP #$20        ; set A short
.391038					BM_FILL_SCREEN_LOOPX
.391038	97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.39103a	c8		iny		                INY
.39103b	c4 40		cpy $40		                CPY BM_CLEAR_SCRN_X              ; Transfer the First line
.39103d	d0 f9		bne $391038	                BNE BM_FILL_SCREEN_LOOPX
.39103f	20 4a 10	jsr $39104a	                JSR BM_FILL_COMPUTE_Y_DST
.391042	e8		inx		                INX
.391043	e4 42		cpx $42		                CPX BM_CLEAR_SCRN_Y
.391045	d0 ec		bne $391033	                BNE BM_FILL_SCREEN_LOOPY
.391047	c2 30		rep #$30	                REP #$30        ; set A&X long
.391049	6b		rtl		                RTL
.39104a					BM_FILL_COMPUTE_Y_DST
.39104a	c2 20		rep #$20	                REP #$20        ; set A long
.39104c	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR        ; Right now it is set @ $020000 (128K) + File Size
.39104e	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.391052	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2      ; Right now it is set @ $020000 (128K)
.391054	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.391058	a9 80 02	lda #$0280	                LDA #$280        ; Right now it is set @ $020000 (128K) + File Size
.39105b	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.39105f	a9 00 00	lda #$0000	                LDA #$0000
.391062	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.391066	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.39106a	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.39106c	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.391070	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.391072	a9 00 00	lda #$0000	                LDA #$0000
.391075	60		rts		                RTS
.391076					IBMP_PARSER
.391076	c2 30		rep #$30	                REP #$30        ; set A&X long
.391078	a0 00 00	ldy #$0000	                LDY #$0000
.39107b	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y
.39107d	c9 42 4d	cmp #$4d42	                CMP #$4D42
.391080	f0 03		beq $391085	                BEQ IBMP_PARSER_CONT
.391082	82 04 01	brl $391189	                BRL BMP_PARSER_END_WITH_ERROR
.391085					IBMP_PARSER_CONT
.391085	a0 02 00	ldy #$0002	                LDY #$0002
.391088	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size Low Short
.39108a	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.39108e	a0 04 00	ldy #$0004	                LDY #$0004
.391091	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size High Short
.391093	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.391097	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Store -1 in Adder (B)
.39109a	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.39109e	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.3910a2	18		clc		                CLC
.3910a3	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.3910a7	85 50		sta $50		                STA BMP_FILE_SIZE
.3910a9	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.3910ad	85 52		sta $52		                STA BMP_FILE_SIZE+2
.3910af	a0 12 00	ldy #$0012	                LDY #$0012
.3910b2	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.3910b4	85 40		sta $40		                STA BMP_X_SIZE
.3910b6	a0 16 00	ldy #$0016	                LDY #$0016
.3910b9	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.3910bb	85 42		sta $42		                STA BMP_Y_SIZE
.3910bd	a0 2e 00	ldy #$002e	                LDY #$002E
.3910c0	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.3910c2	0a		asl a		                ASL A; Multiply by 2
.3910c3	0a		asl a		                ASL A; Multiply by 2
.3910c4	85 4c		sta $4c		                STA BMP_COLOR_PALET         ;
.3910c6	e0 00 00	cpx #$0000	                CPX #$0000
.3910c9	d0 05		bne $3910d0	                BNE BMP_LUT1_PICK
.3910cb	20 91 11	jsr $391191	                JSR BMP_PARSER_UPDATE_LUT0   ; Go Upload the LUT0
.3910ce	80 08		bra $3910d8	                BRA DONE_TRANSFER_LUT;
.3910d0					  BMP_LUT1_PICK
.3910d0	e0 01 00	cpx #$0001	                CPX #$0001
.3910d3	d0 03		bne $3910d8	                BNE BMP_LUT2_PICK
.3910d5	20 c1 11	jsr $3911c1	                JSR BMP_PARSER_UPDATE_LUT1   ; Go Upload the LUT1
.3910d8					  BMP_LUT2_PICK
.3910d8					  DONE_TRANSFER_LUT
.3910d8	a5 56		lda $56		                LDA BMP_POSITION_Y
.3910da	8f 00 01 00	sta $000100	                STA @lM0_OPERAND_A
.3910de	a5 4e		lda $4e		                LDA SCRN_X_STRIDE
.3910e0	8f 02 01 00	sta $000102	                STA @lM0_OPERAND_B
.3910e4	af 04 01 00	lda $000104	                LDA @lM0_RESULT
.3910e8	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.3910ec	af 06 01 00	lda $000106	                LDA @lM0_RESULT+2
.3910f0	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.3910f4	a5 54		lda $54		                LDA BMP_POSITION_X
.3910f6	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Put the X Position Adder (B)
.3910fa	a9 00 00	lda #$0000	                LDA #$0000
.3910fd	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.391101	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in TEMP
.391105	85 f0		sta $f0		                STA USER_TEMP
.391107	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in TEMP
.39110b	85 f2		sta $f2		                STA USER_TEMP+2
.39110d	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.39110f	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.391113	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.391115	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.391119	a5 f0		lda $f0		                LDA USER_TEMP
.39111b	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store in 32Bit Adder (B)
.39111f	a5 f2		lda $f2		                LDA USER_TEMP+2
.391121	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in 32Bit Adder (B)
.391125	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in BMP_PRSE_DST_PTR
.391129	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.39112b	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in BMP_PRSE_DST_PTR
.39112f	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.391131	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K)
.391133	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.391137	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2        ; Right now it is set @ $020000 (128K)
.391139	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.39113d	a5 50		lda $50		                LDA BMP_FILE_SIZE
.39113f	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.391143	a5 52		lda $52		                LDA BMP_FILE_SIZE+2
.391145	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.391149	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.39114d	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.39114f	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.391153	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.391155	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.391157	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.39115b	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.39115d	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.391161	18		clc		                CLC
.391162	a5 40		lda $40		                LDA BMP_X_SIZE              ; Load The Size in X of the image and Make it negative
.391164	49 ff ff	eor #$ffff	                EOR #$FFFF                  ; Inverse all bit
.391167	69 01 00	adc #$0001	                ADC #$0001                  ; Add 0 ()
.39116a	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store the Results in reg B of ADDER32
.39116e	a9 ff ff	lda #$ffff	                LDA #$FFFF
.391171	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in the Reminder of the 32Bits B Register
.391175	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.391179	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.39117b	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.39117f	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.391181	20 f1 11	jsr $3911f1	                JSR BMP_PARSER_DMA_SHIT_OUT  ; We are going to start with the slow method
.391184	a2 a5 15	ldx #$15a5	                LDX #<>bmp_parser_msg0
.391187	80 03		bra $39118c	                BRA BMP_PARSER_END_NO_ERROR
.391189					BMP_PARSER_END_WITH_ERROR
.391189	a2 91 15	ldx #$1591	                LDX #<>bmp_parser_err0
.39118c					BMP_PARSER_END_NO_ERROR
.39118c	22 44 06 39	jsl $390644	                JSL IPRINT       ; print the first line
.391190	6b		rtl		                RTL
.391191					BMP_PARSER_UPDATE_LUT0
.391191	38		sec		                SEC
.391192	a0 7a 00	ldy #$007a	                LDY #$007A
.391195	a2 00 00	ldx #$0000	                LDX #$0000
.391198	e2 20		sep #$20	                SEP #$20        ; set A short
.39119a					BMP_PARSER_UPDATE_LOOP
.39119a	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.39119c	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR+0, X      ; The look-up Table point to a pixel Blue
.3911a0	c8		iny		                INY
.3911a1	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.3911a3	9f 01 20 af	sta $af2001,x	                STA @lGRPH_LUT0_PTR+1, X      ; The look-up Table point to a pixel Blue
.3911a7	c8		iny		                INY
.3911a8	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.3911aa	9f 02 20 af	sta $af2002,x	                STA @lGRPH_LUT0_PTR+2, X      ; The look-up Table point to a pixel Blue
.3911ae	c8		iny		                INY
.3911af	a9 80		lda #$80	                LDA #$80
.3911b1	9f 03 20 af	sta $af2003,x	                STA @lGRPH_LUT0_PTR+3, X      ; The look-up Table point to a pixel Blue
.3911b5	c8		iny		                INY ; For the Alpha Value, nobody cares
.3911b6	e8		inx		                INX
.3911b7	e8		inx		                INX
.3911b8	e8		inx		                INX
.3911b9	e8		inx		                INX
.3911ba	e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.3911bc	d0 dc		bne $39119a	                BNE BMP_PARSER_UPDATE_LOOP
.3911be	c2 20		rep #$20	                REP #$20        ; set A long
.3911c0	60		rts		                RTS
.3911c1					BMP_PARSER_UPDATE_LUT1
.3911c1	38		sec		                SEC
.3911c2	a0 36 00	ldy #$0036	                LDY #$0036
.3911c5	a2 00 00	ldx #$0000	                LDX #$0000
.3911c8	e2 20		sep #$20	                SEP #$20        ; set A short
.3911ca					PALETTE_LUT1_LOOP
.3911ca	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.3911cc	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR+0, X      ; The look-up Table point to a pixel Blue
.3911d0	c8		iny		                INY
.3911d1	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.3911d3	9f 01 24 af	sta $af2401,x	                STA @lGRPH_LUT1_PTR+1, X      ; The look-up Table point to a pixel Blue
.3911d7	c8		iny		                INY
.3911d8	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.3911da	9f 02 24 af	sta $af2402,x	                STA @lGRPH_LUT1_PTR+2, X      ; The look-up Table point to a pixel Blue
.3911de	c8		iny		                INY
.3911df	a9 80		lda #$80	                LDA #$80
.3911e1	9f 03 24 af	sta $af2403,x	                STA @lGRPH_LUT1_PTR+3, X      ; The look-up Table point to a pixel Blue
.3911e5	c8		iny		                INY ; For the Alpha Value, nobody cares
.3911e6	e8		inx		                INX
.3911e7	e8		inx		                INX
.3911e8	e8		inx		                INX
.3911e9	e8		inx		                INX
.3911ea	e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.3911ec	d0 dc		bne $3911ca	                BNE PALETTE_LUT1_LOOP
.3911ee	c2 20		rep #$20	                REP #$20        ; set A long
.3911f0	60		rts		                RTS
.3911f1					BMP_PARSER_DMA_SHIT_OUT
.3911f1	a2 00 00	ldx #$0000	                LDX #$0000
.3911f4					BMP_PARSER_LOOPY
.3911f4	a0 00 00	ldy #$0000	                LDY #$0000
.3911f7	e2 20		sep #$20	                SEP #$20        ; set A short
.3911f9					BMP_PARSER_LOOPX
.3911f9	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Load First Pixel Y (will be linear)
.3911fb	97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.3911fd	c8		iny		                INY
.3911fe	c4 40		cpy $40		                CPY BMP_X_SIZE              ; Transfer the First line
.391200	d0 f7		bne $3911f9	                BNE BMP_PARSER_LOOPX
.391202	20 0e 12	jsr $39120e	                JSR BMP_PARSER_COMPUTE_Y_SRC
.391205	20 29 12	jsr $391229	                JSR BMP_PARSER_COMPUTE_Y_DST
.391208	e8		inx		                INX
.391209	e4 42		cpx $42		                CPX BMP_Y_SIZE
.39120b	d0 e7		bne $3911f4	                BNE BMP_PARSER_LOOPY
.39120d	60		rts		                RTS
.39120e					BMP_PARSER_COMPUTE_Y_SRC
.39120e	c2 20		rep #$20	                REP #$20        ; set A long
.391210	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.391212	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.391216	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.391218	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.39121c	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.391220	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.391222	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.391226	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.391228	60		rts		                RTS
.391229					BMP_PARSER_COMPUTE_Y_DST
.391229	c2 20		rep #$20	                REP #$20        ; set A long
.39122b	18		clc		                CLC
.39122c	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.39122e	65 4e		adc $4e		                ADC SCRN_X_STRIDE        ; In Normal Circumstances, it is 640
.391230	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.391232	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.391234	69 00 00	adc #$0000	                ADC #$0000
.391237	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.391239	60		rts		                RTS
.39123a	00		brk #		IRESTORE        BRK ; Warm boot routine
.39123b	00		brk #		ISCINIT         BRK ;
.39123c	00		brk #		IIOINIT         BRK ;
.39123d	00		brk #		IPUTBLOCK       BRK ; Ouput a binary block to the currently selected channel
.39123e	00		brk #		ISETLFS         BRK ; Obsolete (done in OPEN)
.39123f	00		brk #		ISETNAM         BRK ; Obsolete (done in OPEN)
.391240	00		brk #		IOPEN           BRK ; Open a channel for reading and/or writing. Use SETLFS and SETNAM to set the channels and filename first.
.391241	00		brk #		ICLOSE          BRK ; Close a channel
.391242	00		brk #		IGETB           BRK ; Get a byte from input channel. Return 0 if no input. Carry is set if no input.
.391243	00		brk #		IGETBLOCK       BRK ; Get a X byes from input channel. If Carry is set, wait. If Carry is clear, do not wait.
.391244	00		brk #		IGETCH          BRK ; Get a character from the input channel. A=0 and Carry=1 if no data is wating
.391245	00		brk #		IGETS           BRK ; Get a string from the input channel. NULL terminates
.391246	00		brk #		IGETLINE        BRK ; Get a line of text from input channel. CR or NULL terminates.
.391247	00		brk #		IGETFIELD       BRK ; Get a field from the input channel. Value in A, CR, or NULL terminates
.391248	00		brk #		ITRIM           BRK ; Removes spaces at beginning and end of string.
.391249	00		brk #		IPRINTC         BRK ; Print character to screen. Handles terminal commands
.39124a	00		brk #		IPRINTS         BRK ; Print string to screen. Handles terminal commands
.39124b	00		brk #		IPRINTF         BRK ; Print a float value
.39124c	00		brk #		IPRINTI         BRK ; Prints integer value in TEMP
.39124d	00		brk #		IPRINTAI        BRK ; Prints integer value in A
.39124e	00		brk #		IPRINTAH        BRK ; Prints hex value in A. Printed value is 2 wide if M flag is 1, 4 wide if M=0
.39124f	00		brk #		IPUSHKEY        BRK ;
.391250	00		brk #		IPUSHKEYS       BRK ;
.391251	00		brk #		ICSRHOME        BRK ;
.391252	00		brk #		ISCRREADLINE    BRK ; Loads the MCMDADDR/BCMDADDR variable with the address of the current line on the screen. This is called when the RETURN key is pressed and is the first step in processing an immediate mode command.
.391253	00		brk #		ISCRGETWORD     BRK ; Read a current word on the screen. A word ends with a space, punctuation (except _), or any control character (value < 32). Loads the address into CMPTEXT_VAL and length into CMPTEXT_LEN variables.
.391254					KERNEL_DATA
>391254	20 20 20 20 0b 0c 0b 0c		greet_msg       .text $20, $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, " FFFFFFF MMMMMMMM XX    XXX " ,$0D
>39125c	0b 0c 0b 0c 0b 0c 20 46 46 46 46 46 46 46 20 4d
>39126c	4d 4d 4d 4d 4d 4d 4d 20 58 58 20 20 20 20 58 58
>39127c	58 20 0d
>39127f	20 20 20 0b 0c 0b 0c 0b		                .text $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM   XX XXX   ",$0D
>391287	0c 0b 0c 0b 0c 20 46 46 20 20 20 20 20 20 4d 4d
>391297	20 4d 4d 20 4d 4d 20 20 20 58 58 20 58 58 58 20
>3912a7	20 20 0d
>3912aa	20 20 0b 0c 0b 0c 0b 0c		                .text $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FFFFF   MM MM MM    XXX      ",$0D
>3912b2	0b 0c 0b 0c 20 46 46 46 46 46 20 20 20 4d 4d 20
>3912c2	4d 4d 20 4d 4d 20 20 20 20 58 58 58 20 20 20 20
>3912d2	20 20 0d
>3912d5	20 0b 0c 0b 0c 0b 0c 0b		                .text $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM  XXX  XX     ",$0D
>3912dd	0c 0b 0c 20 46 46 20 20 20 20 20 20 4d 4d 20 4d
>3912ed	4d 20 4d 4d 20 20 58 58 58 20 20 58 58 20 20 20
>3912fd	20 20 0d
>391300	0b 0c 0b 0c 0b 0c 0b 0c		                .text $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM XXX     XX    ",$0D
>391308	0b 0c 20 46 46 20 20 20 20 20 20 4d 4d 20 4d 4d
>391318	20 4d 4d 20 58 58 58 20 20 20 20 20 58 58 20 20
>391328	20 20 0d
>39132b	0d 43 32 35 36 20 46 4f		                .text $0D, "C256 FOENIX FMX -- 3,670,016 Bytes Free", $0D
>391333	45 4e 49 58 20 46 4d 58 20 2d 2d 20 33 2c 36 37
>391343	30 2c 30 31 36 20 42 79 74 65 73 20 46 72 65 65
>391353	0d
>391354	77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com - Kernel Date: "
>39135c	66 6f 65 6e 69 78 2e 63 6f 6d 20 2d 20 4b 65 72
>39136c	6e 65 6c 20 44 61 74 65 3a 20

;******  Processing file: src\version.asm

>391376	44 65 63 65 6d 62 65 72		.text "December 29, 2019"
>39137e	20 32 39 2c 20 32 30 31 39

;******  Return to file: src\kernel.asm

>391387	0d 00				                .text $0D,$00
.391389					old_pc_style_stat
>391389	1d 1d 1d 1d 1d 1d 8d 8d		greet_clr_line1 .text $1D, $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>391391	4d 4d 2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd
>3913a1	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3913b1	fd fd
>3913b3	1d 1d 1d 1d 1d 8d 8d 4d		greet_clr_line2 .text $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>3913bb	4d 2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd
>3913cb	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3913db	fd fd
>3913dd	1d 1d 1d 1d 8d 8d 4d 4d		greet_clr_line3 .text $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>3913e5	2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd fd
>3913f5	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>391405	fd fd
>391407	1d 1d 1d 8d 8d 4d 4d 2d		greet_clr_line4 .text $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>39140f	2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd fd fd
>39141f	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>39142f	fd fd
>391431	1d 1d 8d 8d 4d 4d 2d 2d		greet_clr_line5 .text $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>391439	5d 5d fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>391449	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>391459	fd fd
>39145b	00 00 00 ff			fg_color_lut	  .text $00, $00, $00, $FF
>39145f	00 00 80 ff			                .text $00, $00, $80, $FF
>391463	00 80 00 ff			                .text $00, $80, $00, $FF
>391467	80 00 00 ff			                .text $80, $00, $00, $FF
>39146b	00 80 80 ff			                .text $00, $80, $80, $FF
>39146f	80 80 00 ff			                .text $80, $80, $00, $FF
>391473	80 00 80 ff			                .text $80, $00, $80, $FF
>391477	80 80 80 ff			                .text $80, $80, $80, $FF
>39147b	00 45 ff ff			                .text $00, $45, $FF, $FF
>39147f	13 45 8b ff			                .text $13, $45, $8B, $FF
>391483	00 00 20 ff			                .text $00, $00, $20, $FF
>391487	00 20 00 ff			                .text $00, $20, $00, $FF
>39148b	20 00 00 ff			                .text $20, $00, $00, $FF
>39148f	20 20 20 ff			                .text $20, $20, $20, $FF
>391493	40 40 40 ff			                .text $40, $40, $40, $FF
>391497	ff ff ff ff			                .text $FF, $FF, $FF, $FF
>39149b	00 00 00 ff			bg_color_lut	  .text $00, $00, $00, $FF
>39149f	00 00 80 ff			                .text $00, $00, $80, $FF
>3914a3	00 80 00 ff			                .text $00, $80, $00, $FF
>3914a7	80 00 00 ff			                .text $80, $00, $00, $FF
>3914ab	00 20 20 ff			                .text $00, $20, $20, $FF
>3914af	20 20 00 ff			                .text $20, $20, $00, $FF
>3914b3	20 00 20 ff			                .text $20, $00, $20, $FF
>3914b7	20 20 20 ff			                .text $20, $20, $20, $FF
>3914bb	1e 69 d2 ff			                .text $1E, $69, $D2, $FF
>3914bf	13 45 8b ff			                .text $13, $45, $8B, $FF
>3914c3	00 00 20 ff			                .text $00, $00, $20, $FF
>3914c7	00 20 00 ff			                .text $00, $20, $00, $FF
>3914cb	40 00 00 ff			                .text $40, $00, $00, $FF
>3914cf	10 10 10 ff			                .text $10, $10, $10, $FF
>3914d3	40 40 40 ff			                .text $40, $40, $40, $FF
>3914d7	ff ff ff ff			                .text $FF, $FF, $FF, $FF
>3914db	43 6d 64 20 30 78 41 41		pass_tst0xAAmsg .text "Cmd 0xAA Test passed...", $0D, $00
>3914e3	20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>3914f3	00
>3914f4	43 6d 64 20 30 78 41 42		pass_tst0xABmsg .text "Cmd 0xAB Test passed...", $0D, $00
>3914fc	20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>39150c	00
>39150d	43 6d 64 20 30 78 36 30		pass_cmd0x60msg .text "Cmd 0x60 Executed.", $0D, $00
>391515	20 45 78 65 63 75 74 65 64 2e 0d 00
>391521	43 6d 64 20 30 78 46 46		pass_cmd0xFFmsg .text "Cmd 0xFF (Reset) Done.", $0D, $00
>391529	20 28 52 65 73 65 74 29 20 44 6f 6e 65 2e 0d 00
>391539	43 6d 64 20 30 78 45 45		pass_cmd0xEEmsg .text "Cmd 0xEE Echo Test passed...", $0D, $00
>391541	20 45 63 68 6f 20 54 65 73 74 20 70 61 73 73 65
>391551	64 2e 2e 2e 0d 00
>391557	4b 65 79 62 6f 61 72 64		Success_kb_init .text "Keyboard Present", $0D, $00
>39155f	20 50 72 65 73 65 6e 74 0d 00
>391569	4e 6f 20 4b 65 79 62 6f		Failed_kb_init  .text "No Keyboard Attached or Failed Init...", $0D, $00
>391571	61 72 64 20 41 74 74 61 63 68 65 64 20 6f 72 20
>391581	46 61 69 6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>391591	4e 4f 20 53 49 47 4e 41		bmp_parser_err0 .text "NO SIGNATURE FOUND.", $00
>391599	54 55 52 45 20 46 4f 55 4e 44 2e 00
>3915a5	42 4d 50 20 4c 4f 41 44		bmp_parser_msg0 .text "BMP LOADED.", $00
>3915ad	45 44 2e 00
>3915b1	45 58 45 43 55 54 49 4e		bmp_parser_msg1 .text "EXECUTING BMP PARSER", $00
>3915b9	47 20 42 4d 50 20 50 41 52 53 45 52 00
>3915c6	49 44 45 20 48 44 44 20		IDE_HDD_Present_msg0 .text "IDE HDD Present:", $00
>3915ce	50 72 65 73 65 6e 74 3a 00
>3915d7	0d 52 45 41 44 59 2e 00		ready_msg       .null $0D,"READY."
>3915df	47 20 30 32 30 30 30 30		hello_ml        .null "G 020000",$0D
>3915e7	0d 00
>3915e9	48 45 4c 4c 4f 20 57 4f		                .null "HELLO WORLD",$0D
>3915f1	52 4c 44 0d 00
>3915f6	0d 00				                .null $0D
>3915f8	20 50 43 20 20 20 20 20		                .null " PC     A    X    Y    SP   DBR DP   NVMXDIZC",$0D
>391600	41 20 20 20 20 58 20 20 20 20 59 20 20 20 20 53
>391610	50 20 20 20 44 42 52 20 44 50 20 20 20 4e 56 4d
>391620	58 44 49 5a 43 0d 00
>391627	3b 30 30 32 31 31 32 20		                .null ";002112 0019 F0AA 0000 D6FF F8  0000 --M-----"
>39162f	30 30 31 39 20 46 30 41 41 20 30 30 30 30 20 44
>39163f	36 46 46 20 46 38 20 20 30 30 30 30 20 2d 2d 4d
>39164f	2d 2d 2d 2d 2d 00
>391655	41 42 4f 52 54 20 45 52		error_01        .null "ABORT ERROR"
>39165d	52 4f 52 00
>391661	30 31 32 33 34 35 36 37		hex_digits      .text "0123456789ABCDEF",0
>391669	38 39 41 42 43 44 45 46 00
>391672					.align 256
>391700	00 1b 31 32 33 34 35 36		ScanCode_Press_Set1   .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>391708	37 38 39 30 2d 3d 08 09
>391710	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>391718	6f 70 5b 5d 0d 00 61 73
>391720	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>391728	27 60 00 5c 7a 78 63 76
>391730	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>391738	00 20 00 00 00 00 00 00
>391740	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $11, $00, $00, $9D, $00, $1D, $00, $00    ; $40
>391748	11 00 00 9d 00 1d 00 00
>391750	91 00 00 00 00 00 00 00		                      .text $91, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>391758	00 00 00 00 00 00 00 00
>391760	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>391768	00 00 00 00 00 00 00 00
>391770	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>391778	00 00 00 00 00 00 00 00
>391780	00 00 21 40 23 24 25 5e		ScanCode_Shift_Set1   .text $00, $00, $21, $40, $23, $24, $25, $5E, $26, $2A, $28, $29, $5F, $2B, $08, $09    ; $00
>391788	26 2a 28 29 5f 2b 08 09
>391790	51 57 45 52 54 59 55 49		                      .text $51, $57, $45, $52, $54, $59, $55, $49, $4F, $50, $7B, $7D, $0D, $00, $41, $53    ; $10
>391798	4f 50 7b 7d 0d 00 41 53
>3917a0	44 46 47 48 4a 4b 4c 3a		                      .text $44, $46, $47, $48, $4A, $4B, $4C, $3A, $22, $7E, $00, $5C, $5A, $58, $43, $56    ; $20
>3917a8	22 7e 00 5c 5a 58 43 56
>3917b0	42 4e 4d 3c 3e 3f 00 18		                      .text $42, $4E, $4D, $3C, $3E, $3F, $00, $18, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>3917b8	00 20 00 00 00 00 00 00
>3917c0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>3917c8	00 00 00 00 00 00 00 00
>3917d0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3917d8	00 00 00 00 00 00 00 00
>3917e0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3917e8	00 00 00 00 00 00 00 00
>3917f0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3917f8	00 00 00 00 00 00 00 00
>391800	00 1b 31 32 33 34 35 36		ScanCode_Ctrl_Set1    .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>391808	37 38 39 30 2d 3d 08 09
>391810	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>391818	6f 70 5b 5d 0d 00 61 73
>391820	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $03, $76    ; $20
>391828	27 60 00 5c 7a 78 03 76
>391830	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>391838	00 20 00 00 00 00 00 00
>391840	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>391848	00 00 00 00 00 00 00 00
>391850	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>391858	00 00 00 00 00 00 00 00
>391860	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>391868	00 00 00 00 00 00 00 00
>391870	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>391878	00 00 00 00 00 00 00 00
>391880	00 1b 31 32 33 34 35 36		ScanCode_Alt_Set1     .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>391888	37 38 39 30 2d 3d 08 09
>391890	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>391898	6f 70 5b 5d 0d 00 61 73
>3918a0	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>3918a8	27 60 00 5c 7a 78 63 76
>3918b0	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>3918b8	00 20 00 00 00 00 00 00
>3918c0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>3918c8	00 00 00 00 00 00 00 00
>3918d0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3918d8	00 00 00 00 00 00 00 00
>3918e0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3918e8	00 00 00 00 00 00 00 00
>3918f0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3918f8	00 00 00 00 00 00 00 00
>391900	00 1b 31 32 33 34 35 36		ScanCode_NumLock_Set1 .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>391908	37 38 39 30 2d 3d 08 09
>391910	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>391918	6f 70 5b 5d 0d 00 61 73
>391920	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>391928	27 60 00 5c 7a 78 63 76
>391930	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>391938	00 20 00 00 00 00 00 00
>391940	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>391948	00 00 00 00 00 00 00 00
>391950	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>391958	00 00 00 00 00 00 00 00
>391960	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>391968	00 00 00 00 00 00 00 00
>391970	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>391978	00 00 00 00 00 00 00 00
>391980	00 00 00 00 00 00 00 00		ScanCode_Prefix_Set1  .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $00
>391988	00 00 00 00 00 00 00 00
>391990	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $10
>391998	00 00 00 00 00 00 00 00
>3919a0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $20
>3919a8	00 00 00 00 00 00 00 00
>3919b0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $30
>3919b8	00 00 00 00 00 00 00 00
>3919c0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $11, $00, $00, $9D, $00, $1D, $00, $00    ; $40
>3919c8	11 00 00 9d 00 1d 00 00
>3919d0	91 00 0f 7f 00 00 00 00		                      .text $91, $00, $0F, $7F, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3919d8	00 00 00 00 00 00 00 00
>3919e0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3919e8	00 00 00 00 00 00 00 00
>3919f0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3919f8	00 00 00 00 00 00 00 00
>391a00					.align 256
>391a00	00 14 1c 21 26 2a 2e 31		GAMMA_2_2_Tbl         .text  $00, $14, $1c, $21, $26, $2a, $2e, $31, $34, $37, $3a, $3d, $3f, $41, $44, $46
>391a08	34 37 3a 3d 3f 41 44 46
>391a10	48 4a 4c 4e 50 51 53 55		                      .text  $48, $4a, $4c, $4e, $50, $51, $53, $55, $57, $58, $5a, $5b, $5d, $5e, $60, $61
>391a18	57 58 5a 5b 5d 5e 60 61
>391a20	63 64 66 67 68 6a 6b 6c		                      .text  $63, $64, $66, $67, $68, $6a, $6b, $6c, $6d, $6f, $70, $71, $72, $73, $75, $76
>391a28	6d 6f 70 71 72 73 75 76
>391a30	77 78 79 7a 7b 7c 7d 7e		                      .text  $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $80, $81, $82, $83, $84, $85, $86, $87
>391a38	80 81 82 83 84 85 86 87
>391a40	88 88 89 8a 8b 8c 8d 8e		                      .text  $88, $88, $89, $8a, $8b, $8c, $8d, $8e, $8f, $90, $91, $92, $93, $93, $94, $95
>391a48	8f 90 91 92 93 93 94 95
>391a50	96 97 98 99 99 9a 9b 9c		                      .text  $96, $97, $98, $99, $99, $9a, $9b, $9c, $9d, $9e, $9e, $9f, $a0, $a1, $a2, $a2
>391a58	9d 9e 9e 9f a0 a1 a2 a2
>391a60	a3 a4 a5 a5 a6 a7 a8 a8		                      .text  $a3, $a4, $a5, $a5, $a6, $a7, $a8, $a8, $a9, $aa, $ab, $ab, $ac, $ad, $ae, $ae
>391a68	a9 aa ab ab ac ad ae ae
>391a70	af b0 b0 b1 b2 b2 b3 b4		                      .text  $AF, $b0, $b0, $b1, $b2, $b2, $b3, $b4, $b5, $b5, $b6, $b7, $b7, $b8, $b9, $b9
>391a78	b5 b5 b6 b7 b7 b8 b9 b9
>391a80	ba bb bb bc bd bd be be		                      .text  $ba, $bb, $bb, $bc, $bd, $bd, $be, $be, $bf, $c0, $c0, $c1, $c2, $c2, $c3, $c4
>391a88	bf c0 c0 c1 c2 c2 c3 c4
>391a90	c4 c5 c5 c6 c7 c7 c8 c8		                      .text  $c4, $c5, $c5, $c6, $c7, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cb, $cc, $cd, $cd
>391a98	c9 ca ca cb cb cc cd cd
>391aa0	ce ce cf d0 d0 d1 d1 d2		                      .text  $ce, $ce, $cf, $d0, $d0, $d1, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d5, $d6, $d6
>391aa8	d2 d3 d4 d4 d5 d5 d6 d6
>391ab0	d7 d8 d8 d9 d9 da da db		                      .text  $d7, $d8, $d8, $d9, $d9, $da, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $df
>391ab8	db dc dc dd de de df df
>391ac0	e0 e0 e1 e1 e2 e2 e3 e3		                      .text  $e0, $e0, $e1, $e1, $e2, $e2, $e3, $e3, $e4, $e4, $e5, $e5, $e6, $e6, $e7, $e7
>391ac8	e4 e4 e5 e5 e6 e6 e7 e7
>391ad0	e8 e8 e9 e9 ea ea eb eb		                      .text  $e8, $e8, $e9, $e9, $ea, $ea, $eb, $eb, $ec, $ec, $ed, $ed, $ee, $ee, $ef, $ef
>391ad8	ec ec ed ed ee ee ef ef
>391ae0	f0 f0 f1 f1 f2 f2 f3 f3		                      .text  $f0, $f0, $f1, $f1, $f2, $f2, $f3, $f3, $f4, $f4, $f5, $f5, $f6, $f6, $f7, $f7
>391ae8	f4 f4 f5 f5 f6 f6 f7 f7
>391af0	f8 f8 f9 f9 f9 fa fa fb		                      .text  $f8, $f8, $f9, $f9, $f9, $fa, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $fe, $ff
>391af8	fb fc fc fd fd fe fe ff
>391b00					.align 256
>391b00	00 0b 11 15 19 1c 1f 22		GAMMA_1_8_Tbl         .text  $00, $0b, $11, $15, $19, $1c, $1f, $22, $25, $27, $2a, $2c, $2e, $30, $32, $34
>391b08	25 27 2a 2c 2e 30 32 34
>391b10	36 38 3a 3c 3d 3f 41 43		                      .text  $36, $38, $3a, $3c, $3d, $3f, $41, $43, $44, $46, $47, $49, $4a, $4c, $4d, $4f
>391b18	44 46 47 49 4a 4c 4d 4f
>391b20	50 51 53 54 55 57 58 59		                      .text  $50, $51, $53, $54, $55, $57, $58, $59, $5b, $5c, $5d, $5e, $60, $61, $62, $63
>391b28	5b 5c 5d 5e 60 61 62 63
>391b30	64 65 67 68 69 6a 6b 6c		                      .text  $64, $65, $67, $68, $69, $6a, $6b, $6c, $6d, $6e, $70, $71, $72, $73, $74, $75
>391b38	6d 6e 70 71 72 73 74 75
>391b40	76 77 78 79 7a 7b 7c 7d		                      .text  $76, $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $7f, $80, $81, $82, $83, $84, $84
>391b48	7e 7f 80 81 82 83 84 84
>391b50	85 86 87 88 89 8a 8b 8c		                      .text  $85, $86, $87, $88, $89, $8a, $8b, $8c, $8d, $8e, $8e, $8f, $90, $91, $92, $93
>391b58	8d 8e 8e 8f 90 91 92 93
>391b60	94 95 95 96 97 98 99 9a		                      .text  $94, $95, $95, $96, $97, $98, $99, $9a, $9a, $9b, $9c, $9d, $9e, $9f, $9f, $a0
>391b68	9a 9b 9c 9d 9e 9f 9f a0
>391b70	a1 a2 a3 a3 a4 a5 a6 a6		                      .text  $a1, $a2, $a3, $a3, $a4, $a5, $a6, $a6, $a7, $a8, $a9, $aa, $aa, $ab, $ac, $ad
>391b78	a7 a8 a9 aa aa ab ac ad
>391b80	ad ae af b0 b0 b1 b2 b3		                      .text  $ad, $ae, $af, $b0, $b0, $b1, $b2, $b3, $b3, $b4, $b5, $b6, $b6, $b7, $b8, $b8
>391b88	b3 b4 b5 b6 b6 b7 b8 b8
>391b90	b9 ba bb bb bc bd bd be		                      .text  $b9, $ba, $bb, $bb, $bc, $bd, $bd, $be, $bf, $bf, $c0, $c1, $c2, $c2, $c3, $c4
>391b98	bf bf c0 c1 c2 c2 c3 c4
>391ba0	c4 c5 c6 c6 c7 c8 c8 c9		                      .text  $c4, $c5, $c6, $c6, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cc, $cc, $cd, $ce, $ce
>391ba8	ca ca cb cc cc cd ce ce
>391bb0	cf d0 d0 d1 d2 d2 d3 d4		                      .text  $cf, $d0, $d0, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d6, $d6, $d7, $d7, $d8, $d9
>391bb8	d4 d5 d6 d6 d7 d7 d8 d9
>391bc0	d9 da db db dc dc dd de		                      .text  $d9, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $e0, $e0, $e1, $e1, $e2, $e3
>391bc8	de df e0 e0 e1 e1 e2 e3
>391bd0	e3 e4 e4 e5 e6 e6 e7 e7		                      .text  $e3, $e4, $e4, $e5, $e6, $e6, $e7, $e7, $e8, $e9, $e9, $ea, $ea, $eb, $ec, $ec
>391bd8	e8 e9 e9 ea ea eb ec ec
>391be0	ed ed ee ef ef f0 f0 f1		                      .text  $ed, $ed, $ee, $ef, $ef, $f0, $f0, $f1, $f1, $f2, $f3, $f3, $f4, $f4, $f5, $f5
>391be8	f1 f2 f3 f3 f4 f4 f5 f5
>391bf0	f6 f7 f7 f8 f8 f9 f9 fa		                      .text  $f6, $f7, $f7, $f8, $f8, $f9, $f9, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $ff
>391bf8	fb fb fc fc fd fd fe ff
>391c00					.align 256
>391c00	1d c8 a7 ac 10 d6 52 7c		RANDOM_LUT_Tbl		    .text  $1d, $c8, $a7, $ac, $10, $d6, $52, $7c, $83, $dd, $ce, $39, $cd, $c5, $3b, $15
>391c08	83 dd ce 39 cd c5 3b 15
>391c10	22 55 3b 94 e0 33 1f 38						              .text  $22, $55, $3b, $94, $e0, $33, $1f, $38, $87, $12, $31, $65, $89, $27, $88, $42
>391c18	87 12 31 65 89 27 88 42
>391c20	b2 32 72 84 b2 b2 31 52						              .text  $b2, $32, $72, $84, $b2, $b2, $31, $52, $94, $ce, $56, $ec, $fe, $da, $58, $c9
>391c28	94 ce 56 ec fe da 58 c9
>391c30	c8 5b 53 2a 08 3b 19 c1						              .text  $c8, $5b, $53, $2a, $08, $3b, $19, $c1, $d0, $10, $2c, $b2, $4b, $ea, $32, $61
>391c38	d0 10 2c b2 4b ea 32 61
>391c40	da 34 33 8f 2b da 49 89						              .text  $da, $34, $33, $8f, $2b, $da, $49, $89, $a1, $e6, $ca, $2d, $b3, $ce, $b0, $79
>391c48	a1 e6 ca 2d b3 ce b0 79
>391c50	44 aa 32 82 91 e9 29 16						              .text  $44, $aa, $32, $82, $91, $e9, $29, $16, $5f, $e3, $fb, $bd, $15, $2e, $be, $f5
>391c58	5f e3 fb bd 15 2e be f5
>391c60	e9 4a e4 2e 60 24 94 35						              .text  $e9, $4a, $e4, $2e, $60, $24, $94, $35, $8d, $8f, $2c, $80, $0a, $5e, $99, $36
>391c68	8d 8f 2c 80 0a 5e 99 36
>391c70	ac ab 21 26 42 7c 5e bc						              .text  $ac, $ab, $21, $26, $42, $7c, $5e, $bc, $13, $52, $44, $2f, $e3, $ef, $44, $a2
>391c78	13 52 44 2f e3 ef 44 a2
>391c80	86 c1 9c 47 5f 36 6d 02						              .text  $86, $c1, $9c, $47, $5f, $36, $6d, $02, $be, $23, $02, $58, $0a, $52, $5e, $b4
>391c88	be 23 02 58 0a 52 5e b4
>391c90	9f 06 08 c9 97 cb 9e dd						              .text  $9f, $06, $08, $c9, $97, $cb, $9e, $dd, $d5, $cf, $3e, $df, $c4, $9e, $da, $bb
>391c98	d5 cf 3e df c4 9e da bb
>391ca0	9b 5d c9 f5 d9 c3 7e 87						              .text  $9b, $5d, $c9, $f5, $d9, $c3, $7e, $87, $77, $7d, $b1, $3b, $4a, $68, $35, $6e
>391ca8	77 7d b1 3b 4a 68 35 6e
>391cb0	ee 47 ad 8f fd 73 2e 46						              .text  $ee, $47, $ad, $8f, $fd, $73, $2e, $46, $b5, $8f, $44, $63, $55, $6f, $e1, $50
>391cb8	b5 8f 44 63 55 6f e1 50
>391cc0	f4 b6 a3 4f 68 c4 a5 a4						              .text  $f4, $b6, $a3, $4f, $68, $c4, $a5, $a4, $57, $74, $b9, $bd, $05, $14, $50, $eb
>391cc8	57 74 b9 bd 05 14 50 eb
>391cd0	a5 5c 57 2f 99 dc 2e 8a						              .text  $a5, $5c, $57, $2f, $99, $dc, $2e, $8a, $44, $bc, $ec, $db, $22, $58, $fc, $be
>391cd8	44 bc ec db 22 58 fc be
>391ce0	5f 3f 50 bd 2a 36 ab ae						              .text  $5f, $3f, $50, $bd, $2a, $36, $ab, $ae, $24, $aa, $82, $11, $5c, $9f, $43, $4d
>391ce8	24 aa 82 11 5c 9f 43 4d
>391cf0	8f 0c 20 00 91 b6 45 9e						              .text  $8f, $0c, $20, $00, $91, $b6, $45, $9e, $3e, $3d, $66, $7e, $0a, $1c, $6b, $74
>391cf8	3e 3d 66 7e 0a 1c 6b 74
>391d00					.align 16
>391d00	00 01 01 00 00 00 00 00		MOUSE_POINTER_PTR     .text $00,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00
>391d08	01 01 01 00 00 00 00 00
>391d10	01 ff ff 01 00 00 01 01		                      .text $01,$FF,$FF,$01,$00,$00,$01,$01,$FF,$FF,$FF,$01,$00,$00,$00,$00
>391d18	ff ff ff 01 00 00 00 00
>391d20	01 ff ff ff 01 01 55 ff		                      .text $01,$FF,$FF,$FF,$01,$01,$55,$FF,$01,$55,$FF,$FF,$01,$00,$00,$00
>391d28	01 55 ff ff 01 00 00 00
>391d30	01 55 ff ff ff ff 01 55		                      .text $01,$55,$FF,$FF,$FF,$FF,$01,$55,$FF,$FF,$FF,$FF,$01,$00,$00,$00
>391d38	ff ff ff ff 01 00 00 00
>391d40	00 01 55 ff ff ff ff ff		                      .text $00,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$00,$00
>391d48	ff ff 01 ff ff 01 00 00
>391d50	00 00 01 55 ff ff ff ff		                      .text $00,$00,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$FF,$01,$00,$00
>391d58	01 ff ff 01 ff 01 00 00
>391d60	00 00 01 01 55 ff ff ff		                      .text $00,$00,$01,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$FF,$01,$00,$00
>391d68	ff 01 ff ff ff 01 00 00
>391d70	00 00 01 55 01 55 ff ff		                      .text $00,$00,$01,$55,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$01,$00
>391d78	ff ff ff ff ff 01 01 00
>391d80	00 00 01 55 55 55 ff ff		                      .text $00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01
>391d88	ff ff ff ff 01 ff ff 01
>391d90	00 00 00 01 55 55 55 ff		                      .text $00,$00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01
>391d98	ff ff ff ff ff ff ff 01
>391da0	00 00 00 00 01 55 55 55		                      .text $00,$00,$00,$00,$01,$55,$55,$55,$55,$55,$01,$FF,$FF,$55,$01,$00
>391da8	55 55 01 ff ff 55 01 00
>391db0	00 00 00 00 00 01 01 01		                      .text $00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$55,$FF,$55,$01,$00,$00
>391db8	01 01 55 ff 55 01 00 00
>391dc0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$55,$01,$00,$00,$00
>391dc8	01 55 55 55 01 00 00 00
>391dd0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$01,$00,$00,$00,$00
>391dd8	01 55 55 01 00 00 00 00
>391de0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00
>391de8	00 01 01 00 00 00 00 00
>391df0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>391df8	00 00 00 00 00 00 00 00
.3ff000					FONT_4_BANK0
>3ff000	00 00 00 00 00 00 00 00		.binary "FONT/Bm437_PhoenixEGA_8x8.bin", 0, 2048
>3ff008	7e 81 a5 81 bd 99 81 7e 3c 7e db ff c3 7e 3c 00
>3ff018	00 ee fe fe 7c 38 10 00 10 38 7c fe 7c 38 10 00
>3ff028	00 3c 18 ff ff 08 18 00 10 38 7c fe fe 10 38 00
>3ff038	00 00 18 3c 18 00 00 00 ff ff e7 c3 e7 ff ff ff
>3ff048	00 3c 42 81 81 42 3c 00 ff c3 bd 7e 7e bd c3 ff
>3ff058	01 03 07 0f 1f 3f 7f ff ff fe fc f8 f0 e0 c0 80
>3ff068	04 06 07 04 04 fc f8 00 0c 0a 0d 0b f9 f9 1f 1f
>3ff078	00 92 7c 44 c6 7c 92 00 00 00 60 78 7e 78 60 00
>3ff088	00 00 06 1e 7e 1e 06 00 18 7e 18 18 18 18 7e 18
>3ff098	66 66 66 66 66 00 66 00 ff b6 76 36 36 36 36 00
>3ff0a8	7e c1 dc 22 22 1f 83 7e 00 00 00 7e 7e 00 00 00
>3ff0b8	18 7e 18 18 7e 18 00 ff 18 7e 18 18 18 18 18 00
>3ff0c8	18 18 18 18 18 7e 18 00 00 04 06 ff 06 04 00 00
>3ff0d8	00 20 60 ff 60 20 00 00 00 00 00 c0 c0 c0 ff 00
>3ff0e8	00 24 66 ff 66 24 00 00 00 00 10 38 7c fe 00 00
>3ff0f8	00 00 00 fe 7c 38 10 00 00 00 00 00 00 00 00 00
>3ff108	30 30 30 30 30 00 30 00 66 66 00 00 00 00 00 00
>3ff118	6c 6c fe 6c fe 6c 6c 00 10 7c d2 7c 86 7c 10 00
>3ff128	f0 96 fc 18 3e 72 de 00 30 48 30 78 ce cc 78 00
>3ff138	0c 0c 18 00 00 00 00 00 10 60 c0 c0 c0 60 10 00
>3ff148	10 0c 06 06 06 0c 10 00 00 54 38 fe 38 54 00 00
>3ff158	00 18 18 7e 18 18 00 00 00 00 00 00 00 00 18 70
>3ff168	00 00 00 7e 00 00 00 00 00 00 00 00 00 00 18 00
>3ff178	02 06 0c 18 30 60 c0 00 7c ce de f6 e6 e6 7c 00
>3ff188	18 38 78 18 18 18 3c 00 7c c6 06 0c 30 60 fe 00
>3ff198	7c c6 06 3c 06 c6 7c 00 0e 1e 36 66 fe 06 06 00
>3ff1a8	fe c0 c0 fc 06 06 fc 00 7c c6 c0 fc c6 c6 7c 00
>3ff1b8	fe 06 0c 18 30 60 60 00 7c c6 c6 7c c6 c6 7c 00
>3ff1c8	7c c6 c6 7e 06 c6 7c 00 00 30 00 00 00 30 00 00
>3ff1d8	00 30 00 00 00 30 20 00 00 1c 30 60 30 1c 00 00
>3ff1e8	00 00 7e 00 7e 00 00 00 00 70 18 0c 18 70 00 00
>3ff1f8	7c c6 0c 18 30 00 30 00 7c 82 9a aa aa 9e 7c 00
>3ff208	7c c6 c6 fe c6 c6 c6 00 fc 66 66 7c 66 66 fc 00
>3ff218	7c c6 c0 c0 c0 c6 7c 00 fc 66 66 66 66 66 fc 00
>3ff228	fe 62 68 78 68 62 fe 00 fe 62 68 78 68 60 f0 00
>3ff238	7c c6 c6 c0 de c6 7c 00 c6 c6 c6 fe c6 c6 c6 00
>3ff248	3c 18 18 18 18 18 3c 00 1e 0c 0c 0c 0c cc 78 00
>3ff258	c6 cc d8 f0 d8 cc c6 00 f0 60 60 60 60 62 fe 00
>3ff268	c6 ee fe d6 c6 c6 c6 00 c6 e6 f6 de ce c6 c6 00
>3ff278	7c c6 c6 c6 c6 c6 7c 00 fc 66 66 7c 60 60 f0 00
>3ff288	7c c6 c6 c6 c6 c6 7c 0c fc 66 66 7c 66 66 e6 00
>3ff298	7c c6 c0 7c 06 c6 7c 00 7e 5a 18 18 18 18 3c 00
>3ff2a8	c6 c6 c6 c6 c6 c6 7c 00 c6 c6 c6 c6 c6 6c 38 00
>3ff2b8	c6 c6 c6 c6 d6 ee c6 00 c6 6c 38 38 38 6c c6 00
>3ff2c8	66 66 66 3c 18 18 3c 00 fe c6 0c 18 30 66 fe 00
>3ff2d8	1c 18 18 18 18 18 1c 00 c0 60 30 18 0c 06 02 00
>3ff2e8	70 30 30 30 30 30 70 00 00 00 10 38 6c c6 00 00
>3ff2f8	00 00 00 00 00 00 00 ff 30 30 18 00 00 00 00 00
>3ff308	00 00 7c 06 7e c6 7e 00 c0 c0 fc c6 c6 c6 fc 00
>3ff318	00 00 7c c6 c0 c6 7c 00 06 06 7e c6 c6 c6 7e 00
>3ff328	00 00 7c c6 fe c0 7c 00 3c 66 60 f0 60 60 60 00
>3ff338	00 00 7e c6 c6 7e 06 7c c0 c0 fc c6 c6 c6 c6 00
>3ff348	18 00 38 18 18 18 3c 00 00 0c 00 1c 0c 0c cc 78
>3ff358	c0 c0 c6 d8 f0 d8 c6 00 38 18 18 18 18 18 3c 00
>3ff368	00 00 ee fe d6 c6 c6 00 00 00 fc c6 c6 c6 c6 00
>3ff378	00 00 7c c6 c6 c6 7c 00 00 00 fc c6 c6 fc c0 c0
>3ff388	00 00 7e c6 c6 7e 06 06 00 00 de 76 60 60 60 00
>3ff398	00 00 7c c0 7c 06 7c 00 18 18 7e 18 18 18 1e 00
>3ff3a8	00 00 c6 c6 c6 c6 7e 00 00 00 c6 c6 c6 6c 38 00
>3ff3b8	00 00 c6 c6 d6 fe c6 00 00 00 c6 6c 38 6c c6 00
>3ff3c8	00 00 c6 c6 c6 7e 06 7c 00 00 fe 0c 18 60 fe 00
>3ff3d8	0e 18 18 70 18 18 0e 00 18 18 18 00 18 18 18 00
>3ff3e8	e0 30 30 1c 30 30 e0 00 00 00 70 9a 0e 00 00 00
>3ff3f8	00 00 18 3c 66 ff 00 00 7c c6 c0 c0 c6 7c 18 70
>3ff408	66 00 c6 c6 c6 c6 7e 00 0e 18 7c c6 fe c0 7c 00
>3ff418	18 24 7c 06 7e c6 7e 00 66 00 7c 06 7e c6 7e 00
>3ff428	38 0c 7c 06 7e c6 7e 00 18 00 7c 06 7e c6 7e 00
>3ff438	00 00 7c c0 c0 7c 18 70 18 24 7c c6 fe c0 7c 00
>3ff448	66 00 7c c6 fe c0 7c 00 70 18 7c c6 fe c0 7c 00
>3ff458	66 00 38 18 18 18 3c 00 18 24 38 18 18 18 3c 00
>3ff468	38 0c 38 18 18 18 3c 00 66 00 7c c6 fe c6 c6 00
>3ff478	18 00 7c c6 fe c6 c6 00 0e 18 fe 60 78 60 fe 00
>3ff488	00 00 7c 1a 7e d8 7e 00 7e d8 d8 de f8 d8 de 00
>3ff498	18 24 7c c6 c6 c6 7c 00 66 00 7c c6 c6 c6 7c 00
>3ff4a8	38 0c 7c c6 c6 c6 7c 00 18 24 c6 c6 c6 c6 7e 00
>3ff4b8	38 0c c6 c6 c6 c6 7e 00 66 00 c6 c6 c6 7e 06 7c
>3ff4c8	66 7c c6 c6 c6 c6 7c 00 c6 00 c6 c6 c6 c6 7c 00
>3ff4d8	18 7c c6 c0 c6 7c 18 00 1e 32 30 78 30 70 fe 00
>3ff4e8	66 3c 18 7e 18 3c 18 00 fc c6 fc c0 cc de cc 0e
>3ff4f8	00 1c 32 30 fc 30 f0 00 0e 18 7c 06 7e c6 7e 00
>3ff508	1a 30 38 18 18 18 3c 00 0e 18 7c c6 c6 c6 7c 00
>3ff518	0e 18 c6 c6 c6 c6 7e 00 66 98 fc c6 c6 c6 c6 00
>3ff528	66 98 e6 f6 de ce c6 00 7c 06 7e c6 7e 00 fe 00
>3ff538	7c c6 c6 c6 7c 00 fe 00 18 00 18 30 60 c6 7c 00
>3ff548	00 00 fe c0 c0 c0 c0 00 00 00 fe 06 06 06 06 00
>3ff558	c0 c0 c0 de 06 0c 1e 00 c0 c0 c0 cc 1c 3e 0c 00
>3ff568	30 00 30 30 30 30 30 00 00 36 6c d8 6c 36 00 00
>3ff578	00 d8 6c 36 6c d8 00 00 aa aa aa aa aa aa aa aa
>3ff588	aa 55 aa 55 aa 55 aa 55 44 22 44 22 44 22 44 22
>3ff598	18 18 18 18 18 18 18 18 18 18 18 f8 18 18 18 18
>3ff5a8	18 18 18 f8 18 f8 18 18 36 36 36 f6 36 36 36 36
>3ff5b8	00 00 00 fe 36 36 36 36 00 00 00 f8 18 f8 18 18
>3ff5c8	36 36 36 f6 06 f6 36 36 36 36 36 36 36 36 36 36
>3ff5d8	00 00 00 fe 06 f6 36 36 36 36 36 f6 06 fe 00 00
>3ff5e8	36 36 36 fe 00 00 00 00 18 18 18 f8 18 f8 00 00
>3ff5f8	00 00 00 f8 18 18 18 18 18 18 18 1f 00 00 00 00
>3ff608	18 18 18 ff 00 00 00 00 00 00 00 ff 18 18 18 18
>3ff618	18 18 18 1f 18 18 18 18 00 00 00 ff 00 00 00 00
>3ff628	18 18 18 ff 18 18 18 18 18 18 18 1f 18 1f 18 18
>3ff638	36 36 36 37 36 36 36 36 36 36 36 37 30 3f 00 00
>3ff648	00 00 00 3f 30 37 36 36 36 36 36 f7 00 ff 00 00
>3ff658	00 00 00 ff 00 f7 36 36 36 36 36 37 30 37 36 36
>3ff668	00 00 00 ff 00 ff 00 00 36 36 36 f7 00 f7 36 36
>3ff678	18 18 18 ff 00 ff 00 00 36 36 36 ff 00 00 00 00
>3ff688	00 00 00 ff 00 ff 18 18 00 00 00 ff 36 36 36 36
>3ff698	36 36 36 3f 00 00 00 00 18 18 18 1f 18 1f 00 00
>3ff6a8	00 00 00 1f 18 1f 18 18 00 00 00 3f 36 36 36 36
>3ff6b8	36 36 36 ff 36 36 36 36 18 18 18 ff 18 ff 18 18
>3ff6c8	18 18 18 f8 00 00 00 00 00 00 00 1f 18 18 18 18
>3ff6d8	ff ff ff ff ff ff ff ff 00 00 00 00 ff ff ff ff
>3ff6e8	f0 f0 f0 f0 f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f
>3ff6f8	ff ff ff ff 00 00 00 00 00 00 77 98 98 77 00 00
>3ff708	1c 36 66 fc c6 c6 fc c0 fe 62 60 60 60 60 60 00
>3ff718	00 00 ff 66 66 66 66 00 fe 62 30 18 30 62 fe 00
>3ff728	00 00 3f 66 c6 cc 78 00 00 00 33 33 33 3e 30 f0
>3ff738	00 00 ff 18 18 18 18 00 3c 18 3c 66 66 3c 18 3c
>3ff748	00 7c c6 fe c6 7c 00 00 00 7e c3 c3 c3 66 e7 00
>3ff758	1e 19 3c 66 c6 cc 78 00 00 00 66 99 99 66 00 00
>3ff768	00 03 7c ce e6 7c c0 00 00 3e c0 fe c0 3e 00 00
>3ff778	00 7e c3 c3 c3 c3 00 00 00 fe 00 fe 00 fe 00 00
>3ff788	18 18 7e 18 18 7e 00 00 70 18 0c 18 70 00 fe 00
>3ff798	1c 30 60 30 1c 00 fe 00 00 0e 1b 18 18 18 18 18
>3ff7a8	18 18 18 18 18 d8 70 00 00 18 00 7e 00 18 00 00
>3ff7b8	00 76 dc 00 76 dc 00 00 3c 66 3c 00 00 00 00 00
>3ff7c8	00 18 3c 18 00 00 00 00 00 00 00 00 18 00 00 00
>3ff7d8	0f 0c 0c 0c ec 6c 38 00 d8 ec cc cc 00 00 00 00
>3ff7e8	f0 30 c0 f0 00 00 00 00 00 00 00 3c 3c 3c 3c 00
>3ff7f8	00 00 00 00 00 00 00 00
.3ff800					FONT_4_BANK1
>3ff800	00 00 00 00 00 00 00 00		.binary "FONT/CBM-ASCII_8x8.bin", 0, 2048
>3ff808	7c 82 aa 82 ba 92 82 7c 7c fe d6 fe c6 ee fe 7c
>3ff818	ff fd fb f5 eb d5 ab ff ff e1 fd 85 85 87 87 ff
>3ff828	ff bd db e7 e7 db bd ff ff 81 81 bd bd bd 81 ff
>3ff838	ff ff ff ff ff 81 81 ff 00 08 10 20 10 08 00 00
>3ff848	00 24 14 0c 14 24 00 00 00 8e 88 8c 88 e8 00 00
>3ff858	00 00 00 00 00 00 00 00 00 ee 88 cc 88 88 00 00
>3ff868	00 00 04 14 3c 10 00 00 00 30 4c 4c 30 00 00 00
>3ff878	00 38 28 38 28 00 00 00 ff 81 bd bd bd bd 81 ff
>3ff888	ff 55 aa 55 aa 55 aa ff ab d5 ab d5 ab d5 ab d5
>3ff898	ff 81 81 81 81 81 81 ff ff f9 e1 81 81 e1 f9 ff
>3ff8a8	ff 9f 87 81 81 87 9f ff ff e7 e7 c3 c3 81 81 ff
>3ff8b8	ff 81 81 c3 c3 e7 e7 ff 00 26 54 04 04 04 06 00
>3ff8c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 3 times (48 bytes)...
>3ff908	10 10 10 10 00 10 00 00 24 24 24 00 00 00 00 00
>3ff918	24 7e 24 24 7e 24 00 00 10 3c 50 38 14 78 10 00
>3ff928	62 64 08 10 20 4c 8c 00 30 48 48 30 58 4c 4c 38
>3ff938	10 10 10 00 00 00 00 00 08 10 20 20 20 20 10 08
>3ff948	10 08 04 04 04 04 08 10 00 24 18 7e 18 24 00 00
>3ff958	00 10 10 7c 10 10 00 00 00 00 00 00 10 10 20 00
>3ff968	00 00 00 3c 00 00 00 00 00 00 00 00 18 18 00 00
>3ff978	04 04 08 08 10 10 20 20 3c 46 4a 52 62 42 3c 00
>3ff988	10 30 10 10 10 10 38 00 38 44 04 18 20 40 7c 00
>3ff998	38 44 04 18 04 44 38 00 08 18 28 48 7c 08 08 00
>3ff9a8	7c 40 78 04 04 44 38 00 38 44 40 78 44 44 38 00
>3ff9b8	7c 44 04 08 08 10 10 00 38 44 44 38 44 44 38 00
>3ff9c8	38 44 44 3c 04 44 38 00 00 00 18 00 00 18 00 00
>3ff9d8	00 00 18 00 00 18 18 30 00 08 10 20 10 08 00 00
>3ff9e8	00 00 3c 00 3c 00 00 00 00 10 08 04 08 10 00 00
>3ff9f8	38 44 04 08 10 00 10 00 38 44 4c 4c 40 44 38 00
>3ffa08	10 28 44 7c 44 44 00 00 78 44 78 44 44 78 00 00
>3ffa18	38 44 40 40 44 38 00 00 78 44 44 44 44 78 00 00
>3ffa28	7c 40 78 40 40 7c 00 00 7c 40 78 40 40 40 00 00
>3ffa38	38 44 40 4c 44 38 00 00 44 44 7c 44 44 44 00 00
>3ffa48	38 10 10 10 10 38 00 00 1c 08 08 08 48 30 00 00
>3ffa58	24 28 30 30 28 24 00 00 20 20 20 20 20 3c 00 00
>3ffa68	44 6c 7c 54 44 44 00 00 44 64 54 4c 44 44 00 00
>3ffa78	38 44 44 44 44 38 00 00 78 44 44 78 40 40 00 00
>3ffa88	38 44 44 44 44 38 0c 00 78 44 44 78 48 44 00 00
>3ffa98	3c 40 38 04 04 78 00 00 7c 10 10 10 10 10 00 00
>3ffaa8	44 44 44 44 44 38 00 00 44 44 44 44 28 10 00 00
>3ffab8	82 82 82 92 92 6c 00 00 42 24 18 18 24 42 00 00
>3ffac8	44 44 28 10 10 10 00 00 7c 08 10 20 40 7c 00 00
>3ffad8	38 20 20 20 20 20 38 00 20 20 10 10 08 08 04 04
>3ffae8	38 08 08 08 08 08 38 00 00 10 28 44 00 00 00 00
>3ffaf8	00 00 00 00 00 00 00 7e 40 20 10 00 00 00 00 00
>3ffb08	00 38 04 3c 64 3c 00 00 40 40 78 44 44 78 00 00
>3ffb18	00 00 38 40 40 38 00 00 04 04 3c 44 44 3c 00 00
>3ffb28	00 38 44 7c 40 3c 00 00 0c 10 3c 10 10 10 00 00
>3ffb38	00 00 3c 44 44 3c 04 78 40 40 78 44 44 44 00 00
>3ffb48	10 00 30 10 10 38 00 00 08 00 08 08 08 08 08 30
>3ffb58	20 20 24 38 28 24 00 00 30 10 10 10 10 10 00 00
>3ffb68	00 00 68 54 54 44 00 00 00 00 38 24 24 24 00 00
>3ffb78	00 00 38 44 44 38 00 00 00 00 78 44 44 78 40 40
>3ffb88	00 00 3c 44 44 3c 04 04 00 00 78 44 40 40 00 00
>3ffb98	00 00 1c 30 0c 38 00 00 00 10 7c 10 10 10 0c 00
>3ffba8	00 00 44 44 44 3c 00 00 00 00 42 42 24 18 00 00
>3ffbb8	00 00 82 82 92 6c 00 00 00 00 24 18 18 24 00 00
>3ffbc8	00 00 24 24 24 1c 04 38 00 00 7c 18 30 7c 00 00
>3ffbd8	0c 10 10 30 30 10 10 0c 18 18 18 00 18 18 18 00
>3ffbe8	30 08 08 0c 0c 08 08 30 00 00 32 7e 4c 00 00 00
>3ffbf8	00 00 10 28 38 00 00 00 00 00 3c 3c 3c 3c 00 00
>3ffc08	00 00 3c 24 24 3c 00 00 00 00 18 3c 3c 18 00 00
>3ffc18	00 00 18 24 24 18 00 00 18 24 24 18 00 00 00 00
>3ffc28	00 3c 42 42 66 24 66 00 00 18 00 18 0c 06 66 3c
>3ffc38	0c 12 30 7c 30 62 fc 00 1c 20 70 20 70 20 1c 00
>3ffc48	02 06 0c d8 f0 e0 c0 00 18 18 ff 00 00 ff 00 00
>3ffc58	00 00 ff 00 00 ff 18 18 24 24 24 e7 e7 24 24 24
>3ffc68	18 18 ff 00 00 ff 18 18 24 24 24 27 27 24 24 24
>3ffc78	24 24 24 e4 e4 24 24 24 00 00 00 ff ff ff ff ff
>3ffc88	00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>3ffc98	ff ff ff ff ff ff ff 00 ff ff ff ff ff ff 00 00
>3ffca8	ff ff ff ff ff 00 00 00 ff ff ff ff 00 00 00 00
>3ffcb8	f8 f8 f8 f8 f8 f8 f8 f8 fc fc fc fc fc fc fc fc
>3ffcc8	fe fe fe fe fe fe fe fe 7f 7f 7f 7f 7f 7f 7f 7f
>3ffcd8	3f 3f 3f 3f 3f 3f 3f 3f 1f 1f 1f 1f 1f 1f 1f 1f
>3ffce8	0f 0f 0f 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00
>3ffcf8	00 00 00 00 00 00 00 00 ff ff ff ff ff ff ff ff
>3ffd08	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 00 ff ff ff ff
>3ffd18	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>3ffd28	80 80 80 80 80 80 80 80 aa 55 aa 55 aa 55 aa 55
>3ffd38	01 01 01 01 01 01 01 01 00 00 00 00 aa 55 aa 55
>3ffd48	ff fe fc f8 f0 e0 c0 80 03 03 03 03 03 03 03 03
>3ffd58	18 18 18 1f 1f 18 18 18 00 00 00 00 0f 0f 0f 0f
>3ffd68	18 18 18 1f 1f 00 00 00 00 00 00 f8 f8 18 18 18
>3ffd78	00 00 00 00 00 00 ff ff 00 00 00 1f 1f 18 18 18
>3ffd88	18 18 18 ff ff 00 00 00 00 00 00 ff ff 18 18 18
>3ffd98	18 18 18 f8 f8 18 18 18 c0 c0 c0 c0 c0 c0 c0 c0
>3ffda8	e0 e0 e0 e0 e0 e0 e0 e0 07 07 07 07 07 07 07 07
>3ffdb8	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00
>3ffdc8	00 00 00 00 00 ff ff ff 03 03 03 03 03 03 ff ff
>3ffdd8	00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>3ffde8	18 18 18 f8 f8 00 00 00 f0 f0 f0 f0 00 00 00 00
>3ffdf8	f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 ff ff 00 00 00
>3ffe08	08 1c 3e 7f 7f 1c 3e 00 18 18 18 18 18 18 18 18
>3ffe18	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00
>3ffe28	00 ff ff 00 00 00 00 00 00 00 00 00 ff ff 00 00
>3ffe38	30 30 30 30 30 30 30 30 0c 0c 0c 0c 0c 0c 0c 0c
>3ffe48	00 00 00 e0 f0 38 18 18 18 18 1c 0f 07 00 00 00
>3ffe58	18 18 38 f0 e0 00 00 00 c0 c0 c0 c0 c0 c0 ff ff
>3ffe68	c0 e0 70 38 1c 0e 07 03 03 07 0e 1c 38 70 e0 c0
>3ffe78	ff ff c0 c0 c0 c0 c0 c0 ff ff 03 03 03 03 03 03
>3ffe88	00 3c 7e 7e 7e 7e 3c 00 00 00 00 00 00 ff ff 00
>3ffe98	36 7f 7f 7f 3e 1c 08 00 60 60 60 60 60 60 60 60
>3ffea8	00 00 00 07 0f 1c 18 18 c3 e7 7e 3c 3c 7e e7 c3
>3ffeb8	00 3c 7e 66 66 7e 3c 00 18 18 66 66 18 18 3c 00
>3ffec8	06 06 06 06 06 06 06 06 08 1c 3e 7f 3e 1c 08 00
>3ffed8	18 18 18 ff ff 18 18 18 c0 c0 30 30 c0 c0 30 30
>3ffee8	18 18 18 18 18 18 18 18 00 00 03 3e 76 36 36 00
>3ffef8	ff 7f 3f 1f 0f 07 03 01 24 24 24 24 24 24 24 24
>3fff08	00 00 ff 00 00 ff 00 00 00 00 3f 20 20 27 24 24
>3fff18	00 00 ff 00 00 e7 24 24 00 00 fc 04 04 e4 24 24
>3fff28	24 24 27 20 20 3f 00 00 24 24 e7 00 00 ff 00 00
>3fff38	24 24 e4 04 04 fc 00 00 24 24 27 20 20 27 24 24
>3fff48	24 24 e4 04 04 e4 24 24 24 24 e7 00 00 e7 24 24
>3fff58	0f 0f 0f 0f f0 f0 f0 f0 01 03 07 0f 1f 3f 7f ff
>3fff68	80 c0 e0 f0 f8 fc fe ff 33 99 cc 66 33 99 cc 66
>3fff78	cc 99 33 66 cc 99 33 66 f0 f0 f0 f0 ff ff ff ff
>3fff88	0f 0f 0f 0f ff ff ff ff ff ff ff ff f0 f0 f0 f0
>3fff98	ff ff ff ff 0f 0f 0f 0f 05 0a 05 0a 00 00 00 00
>3fffa8	00 00 00 00 0a 05 0a 05 a0 50 a0 50 00 00 00 00
>3fffb8	00 00 00 00 a0 50 a0 50 0a 05 0a 05 0a 05 0a 05
>3fffc8	aa 55 aa 55 00 00 00 00 00 18 3c 7e 18 18 18 18
>3fffd8	00 10 30 7f 7f 30 10 00 00 08 0c fe fe 0c 08 00
>3fffe8	18 18 18 18 7e 3c 18 00 00 00 36 49 36 00 00 00
>3ffff8	00 00 00 00 00 00 00 00

;******  End of listing
