
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -D TARGET=2 --long-address --flat --intel-hex -o kernel.hex --list kernel_hex.lst --labels=kernel_hex.lbl src\kernel.asm
; Thu Jul 23 19:47:57 2020

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=2					TARGET=2

;******  Processing input file: src\kernel.asm

=1					TARGET_FLASH = 1              ; The code is being assembled for Flash
=2					TARGET_RAM = 2                ; The code is being assembled for RAM

;******  Processing file: src\macros_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\characters.asm

=$03					CHAR_CTRL_C = $03   ; CTRL-C
=$08					CHAR_BS = $08       ; Backspace (delete character to the left of the cursor)
=$09					CHAR_TAB = $09      ; TAB (moves cursor to next tabulated column)
=$0a					CHAR_LF = $0A       ; Line feed
=$0d					CHAR_CR = $0D       ; Carriage return
=$0f					CHAR_INS = $0F      ; Insert a space at the cursor
=$11					CHAR_UP = $11       ; Up arrow
=$1d					CHAR_RIGHT = $1D    ; Right arrow
=$20					CHAR_SP = $20       ; Space
=$91					CHAR_DOWN = $91     ; Down arrow
=$9d					CHAR_LEFT = $9D     ; Left arrow
=$7f					CHAR_DEL = $7F      ; Delete key (delete the character at the cursor)

;******  Return to file: src\kernel.asm


;******  Processing file: src\simulator_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_inc.asm

=$000000				BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000				TMPPTR1          = $000000 ; 4 byte temporary pointer
=$000004				TMPPTR2          = $000004 ; 4 byte temporary pointer
=$000008				OPL2_ADDY_PTR_LO = $000008 ; THis Points towards the Instruments Database
=$000009				OPL2_ADDY_PTR_MD = $000009
=$00000a				OPL2_ADDY_PTR_HI = $00000A
=$00000c				SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f				COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011				COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013				LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=25
=$000015				LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017				CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a				CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c				CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e				CURCOLOR         = $00001E ;1 Byte Color of next character to be printed to the screen.
=$00001f				COLORPOS         = $00001F ;3 Byte address of cursor's position in the color matrix
=$000022				STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024				STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$000026				OPL2_OPERATOR    = $000026 ;
=$000027				OPL2_CHANNEL     = $000027 ;
=$000028				OPL2_REG_REGION  = $000028 ; Offset to the Group of Registers
=$00002a				OPL2_REG_OFFSET  = $00002A ; 2 Bytes (16Bits)
=$00002c				OPL2_IND_ADDY_LL = $00002C ; 2 Bytes Reserved (Only need 3)
=$00002e				OPL2_IND_ADDY_HL = $00002E ; 2 Bytes Reserved (Only need 3)
=$000030				OPL2_NOTE        = $000030 ; 1 Byte
=$000031				OPL2_OCTAVE      = $000031 ; 1 Byte
=$000032				OPL2_PARAMETER0  = $000032 ; 1 Byte - Key On/Feedback
=$000033				OPL2_PARAMETER1  = $000033 ; 1 Byte
=$000034				OPL2_PARAMETER2  = $000034 ; 1 Byte
=$000035				OPL2_PARAMETER3  = $000035 ; 1 Byte
=$000036				OPL2_LOOP        = $000036 ;
=$000036				OPL2_BLOCK       = $000036
=$000038				SDCARD_FILE_PTR  = $000038 ; 3 Bytes Pointer to Filename to open
=$00003c				SDCARD_BYTE_NUM  = $00003C ; 2Bytes
=$00003f				SDCARD_PRSNT_MNT = $00003F ; 1 Byte, Indicate that the SDCard is Present and that it is Mounted
=$000040				BM_CLEAR_SCRN_X  = $000040
=$000042				BM_CLEAR_SCRN_Y  = $000042
=$000040				RAD_STARTLINE    = $000040 ; 1 Byte
=$000041				RAD_PATTERN_IDX  = $000041 ; 1 Byte
=$000042				RAD_LINE         = $000042 ; 1 Byte
=$000043				RAD_LINENUMBER   = $000043 ; 1 Byte
=$000044				RAD_CHANNEL_NUM  = $000044 ; 1 Byte
=$000045				RAD_ISLASTCHAN   = $000045 ; 1 Byte
=$000046				RAD_Y_POINTER    = $000046 ; 2 Bytes
=$000048				RAD_TICK         = $000048
=$00004a				RAD_CHANNEL_DATA = $00004A ; 2 Bytes
=$00004c				RAD_CHANNE_EFFCT = $00004C
=$00004d				RAD_TEMP         = $00004D
=$000050				RAD_ADDR         = $000050 ; 3 bytes to avoid OPL2 errors.
=$000053				RAD_PATTRN       = $000053 ; 1 bytes - offset to patter
=$000054				RAD_PTN_DEST     = $000054 ; 3 bytes - where to write the pattern data
=$000057				RAD_CHANNEL      = $000057 ; 2 bytes - 0 to 8
=$000059				RAD_LAST_NOTE    = $000059 ; 1 if this is the last note
=$00005a				RAD_LINE_PTR     = $00005A ; 2 bytes - offset to memory location
=$000040				BMP_X_SIZE       = $000040 ; 2 Bytes
=$000042				BMP_Y_SIZE       = $000042 ; 2 Bytes
=$000044				BMP_PRSE_SRC_PTR = $000044 ; 3 Bytes
=$000048				BMP_PRSE_DST_PTR = $000048 ; 3 Bytes
=$00004c				BMP_COLOR_PALET  = $00004C ; 2 Bytes
=$00004e				SCRN_X_STRIDE    = $00004E ; 2 Bytes, Basically How many Pixel Accross in Bitmap Mode
=$000050				BMP_FILE_SIZE    = $000050 ; 4 Bytes
=$000054				BMP_POSITION_X   = $000054 ; 2 Bytes Where, the BMP will be position on the X Axis
=$000056				BMP_POSITION_Y   = $000056 ; 2 Bytes Where, the BMP will be position on the Y Axis
=$000058				BMP_PALET_CHOICE = $000058 ;
=$0000e0				MOUSE_PTR        = $0000E0
=$0000e1				MOUSE_POS_X_LO   = $0000E1
=$0000e2				MOUSE_POS_X_HI   = $0000E2
=$0000e3				MOUSE_POS_Y_LO   = $0000E3
=$0000e4				MOUSE_POS_Y_HI   = $0000E4
=$0000f0				USER_TEMP        = $0000F0 ;32 Bytes Temp space for user programs
=$000100				GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000140				INT_CONTROLLER   = $000140 ; $000140...$00015F Interrupt Controller
=$000160				TIMER_CONTROLLER = $000160 ; $000160...$00017F Timer0/Timer1/Timer2 Block
=$000160				TIMER_CTRL_REGLL = $000160 ;
=$000161				TIMER_CTRL_REGLH = $000161 ;
=$000162				TIMER_CTRL_REGHL = $000162 ;
=$000163				TIMER_CTRL_REGHH = $000163 ;
=$000240				CPU_REGISTERS    = $000240 ; Byte
=$000240				CPUPC            = $000240 ;2 Bytes Program Counter (PC)
=$000242				CPUPBR           = $000242 ;2 Bytes Program Bank Register (K)
=$000244				CPUA             = $000244 ;2 Bytes Accumulator (A)
=$000246				CPUX             = $000246 ;2 Bytes X Register (X)
=$000248				CPUY             = $000248 ;2 Bytes Y Register (Y)
=$00024a				CPUSTACK         = $00024A ;2 Bytes Stack Pointer (S)
=$00024c				CPUDP            = $00024C ;2 Bytes Direct Page Register (D)
=$00024e				CPUDBR           = $00024E ;1 Byte  Data Bank Register (B)
=$00024f				CPUFLAGS         = $00024F ;1 Byte  Flags (P)
=$000250				MONITOR_VARS     = $000250 ; Byte  MONITOR Variables. BASIC variables may overlap this space
=$000250				MCMDADDR         = $000250 ;3 Bytes Address of the current line of text being processed by the command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
=$000253				MCMP_TEXT        = $000253 ;3 Bytes Address of symbol being evaluated for COMPARE routine
=$000256				MCMP_LEN         = $000256 ;2 Bytes Length of symbol being evaluated for COMPARE routine
=$000258				MCMD             = $000258 ;3 Bytes Address of the current command/function string
=$00025b				MCMD_LEN         = $00025B ;2 Bytes Length of the current command/function string
=$00025d				MARG1            = $00025D ;4 Bytes First command argument. May be data or address, depending on command
=$000261				MARG2            = $000261 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000265				MARG3            = $000265 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000269				MARG4            = $000269 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$00026d				MARG5            = $00026D ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000271				MARG6            = $000271 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000275				MARG7            = $000275 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000279				MARG8            = $000279 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000300				LOADFILE_VARS    = $000300 ; Byte
=$000300				LOADFILE_NAME    = $000300 ;3 Bytes (addr) Name of file to load. Address in Data Page
=$000303				LOADFILE_LEN     = $000303 ;1 Byte  Length of filename. 0=Null Terminated
=$000304				LOADPBR          = $000304 ;1 Byte  First Program Bank of loaded file ($05 segment)
=$000305				LOADPC           = $000305 ;2 Bytes Start address of loaded file ($05 segment)
=$000307				LOADDBR          = $000307 ;1 Byte  First data bank of loaded file ($06 segment)
=$000308				LOADADDR         = $000308 ;2 Bytes FIrst data address of loaded file ($06 segment)
=$00030a				LOADFILE_TYPE    = $00030A ;3 Bytes (addr) File type string in loaded data file. Actual string data will be in Bank 1. Valid values are BIN, PRG, P16
=$00030d				BLOCK_LEN        = $00030D ;2 Bytes Length of block being loaded
=$00030f				BLOCK_ADDR       = $00030F ;2 Bytes (temp) Address of block being loaded
=$000311				BLOCK_BANK       = $000311 ;1 Byte  (temp) Bank of block being loaded
=$000312				BLOCK_COUNT      = $000312 ;2 Bytes (temp) Counter of bytes read as file is loaded
=$000300				FDC_DRIVE        = $000300 ;1 byte - The number of the selected drive
=$000301				FDC_HEAD         = $000301 ;1 byte - The head number (0 or 1)
=$000302				FDC_CYLINDER     = $000302 ;1 byte - The cylinder number
=$000303				FDC_SECTOR       = $000303 ;1 byte - The sector number
=$000304				FDC_SECTOR_SIZE  = $000304 ;1 byte - The sector size code (2 = 512)
=$000305				FDC_SECPERTRK    = $000305 ;1 byte - The number of sectors per track (18 for 1.44 MB floppy)
=$000306				FDC_ST0          = $000306 ;1 byte - Status Register 0
=$000307				FDC_ST1          = $000307 ;1 byte - Status Register 1
=$000308				FDC_ST2          = $000308 ;1 byte - Status Register 2
=$000309				FDC_ST3          = $000309 ;1 byte - Status Register 3
=$00030a				FDC_PCN          = $00030A ;1 byte - Present Cylinder Number
=$00030b				FDC_STATUS       = $00030B ;1 byte - Status of what we think is going on with the FDC:
=$00030c				DIVIDEND         = $00030C ;4 bytes - Dividend for 32-bit division
=$000310				DIVISOR          = $000310 ;4 bytes - Divisor for 32-bit division
=$000314				REMAINDER        = $000314 ;4 bytes - Remainder for 32-bit division
=$000320				SDOS_VARIABLES   = $000320
=$000320				BIOS_STATUS      = $000320      ; 1 byte - Status of any BIOS operation
=$000321				BIOS_DEV         = $000321      ; 1 byte - Block device number for block operations
=$000322				BIOS_LBA         = $000322      ; 4 bytes - Address of block to read/write (this is the physical block, w/o reference to partition)
=$000326				BIOS_BUFF_PTR    = $000326      ; 4 bytes - 24-bit pointer to memory for read/write operations
=$00032a				BIOS_FIFO_COUNT  = $00032A      ; 2 bytes - The number of bytes read on the last block read
=$00032c				BIOS_FLAGS       = $00032C      ; 1 byte - Flags for various BIOSy things:
=$00032d				BIOS_TIMER       = $00032D      ; 1 byte - the number of 1/60 ticks for a time out
=$00032e				DOS_STATUS       = $00032E      ; 1 byte - The error code describing any error with file access
=$000330				DOS_CLUS_ID      = $000330      ; 4 bytes - The cluster desired for a DOS operation
=$000338				DOS_DIR_PTR      = $000338      ; 4 bytes - Pointer to a directory entry (assumed to be within DOS_SECTOR)
=$00033c				DOS_BUFF_PTR     = $00033C      ; 4 bytes - A pointer for DOS cluster read/write operations
=$000340				DOS_FD_PTR       = $000340      ; 4 bytes - A pointer to a file descriptor
=$000344				DOS_FAT_LBA      = $000344      ; 4 bytes - The LBA for a sector of the FAT we need to read/write
=$000348				DOS_TEMP         = $000348      ; 4 bytes - Temporary storage for DOS operations
=$00034c				DOS_FILE_SIZE    = $00034C      ; 4 bytes - The size of a file
=$000350				DOS_SRC_PTR      = $000350      ; 4 bytes - Pointer for transferring data
=$000354				DOS_DST_PTR      = $000354      ; 4 bytes - Pointer for transferring data
=$000358				DOS_END_PTR      = $000358      ; 4 bytes - Pointer to the last byte to save
=$00035c				DOS_RUN_PTR      = $00035C      ; 4 bytes - Pointer for starting a loaded program
=$000360				DOS_RUN_PARAM    = $000360      ; 4 bytes - Pointer to the ASCIIZ string for arguments in loading a program
=$000364				DOS_STR1_PTR     = $000364      ; 4 bytes - pointer to a string
=$000368				DOS_STR2_PTR     = $000368      ; 4 bytes - pointer to a string
=$00036b				DOS_SCRATCH      = $00036B      ; 4 bytes - general purpose short term storage
=$000400				DOS_PATH_BUFF    = $000400      ; 256 bytes - A buffer for path names
=$000500				FDC_PARAMETERS   = $000500      ; 16 bytes - a buffer of parameter data for the FDC
=$000510				FDC_RESULTS      = $000510      ; 16 bytes - Buffer for results of FDC commands
=$000530				FDC_PARAM_NUM    = $000530      ; 1 byte - The number of parameters to send to the FDC (including command)
=$000532				FDC_RESULT_NUM   = $000532      ; 1 byte - The number of results expected
=$000533				FDC_EXPECT_DAT   = $000533      ; 1 byte - 0 = the command expects no data, otherwise expects data
=$000534				FDC_CMD_RETRY    = $000534      ; 1 byte - a retry counter for commands
=$000700				CURRUART         = $000700 ; 3-bytes: the base address of the current UART
=$000703				CHAN_OUT         = $000703 ; 1-byte: the number of the current output channel (for PUTC, etc.)
=$000704				CHAN_IN          = $000704 ; 1-byte: the number of the current input channel (for GETCH, etc.)
=$000705				TIMERFLAGS       = $000705 ; 1-byte: flags to indicate that one of the timer interupts has triggered
=$80					TIMER0TRIGGER    = $80
=$40					TIMER1TRIGGER    = $40
=$20					TIMER2TRIGGER    = $20
=$000f00				KEY_BUFFER       = $000F00 ; 64 Bytes keyboard buffer
=$0080					KEY_BUFFER_SIZE  = $0080   ;128 Bytes (constant) keyboard buffer length
=$000f7f				KEY_BUFFER_END   = $000F7F ;  1 Byte  Last byte of keyboard buffer
=$000f83				KEY_BUFFER_CMD   = $000F83 ;  1 Byte  Indicates the Command Process Status
=$000f84				COMMAND_SIZE_STR = $000F84 ;  1 Byte
=$000f86				COMMAND_COMP_TMP = $000F86 ;  2 Bytes
=$000f87				KEYBOARD_SC_FLG  = $000F87 ;  1 Bytes that indicate the Status of Left Shift, Left CTRL, Left ALT, Right Shift
=$000f88				KEYBOARD_SC_TMP  = $000F88 ;  1 Byte, Interrupt Save Scan Code while Processing
=$000f89				KEYBOARD_LOCKS   = $000F89 ;  1 Byte, the status of the various lock keys
=$000f8a				KEYFLAG          = $000F8A ;  1 Byte, flag to indicate if CTRL-C has been pressed
=$000f8b				KEY_BUFFER_RPOS  = $000F8B ;  2 Byte, position of the character to read from the KEY_BUFFER
=$000f8d				KEY_BUFFER_WPOS  = $000F8D ;  2 Byte, position of the character to write to the KEY_BUFFER
=$001000				KERNEL_JMP_BEGIN = $001000 ; Reserved for the Kernel jump table
=$001fff				KERNEL_JMP_END   = $001FFF
=$002000				TEST_BEGIN       = $002000 ;28672 Bytes Test/diagnostic code for prototype.
=$007fff				TEST_END         = $007FFF ;0 Byte
=$008000				STACK_BEGIN      = $008000 ;32512 Bytes The default beginning of stack space
=$00feff				STACK_END        = $00FEFF ;0 Byte  End of stack space. Everything below this is I/O space
=$00ff00				ISR_BEGIN        = $00FF00 ; Byte  Beginning of CPU vectors in Direct page
=$00ff00				HRESET           = $00FF00 ;16 Bytes Handle RESET asserted. Reboot computer and re-initialize the kernel.
=$00ff10				HCOP             = $00FF10 ;16 Bytes Handle the COP instruction. Program use; not used by OS
=$00ff20				HBRK             = $00FF20 ;16 Bytes Handle the BRK instruction. Returns to BASIC Ready prompt.
=$00ff30				HABORT           = $00FF30 ;16 Bytes Handle ABORT asserted. Return to Ready prompt with an error message.
=$00ff40				HNMI             = $00FF40 ;32 Bytes Handle NMI
=$00ff60				HIRQ             = $00FF60 ;32 Bytes Handle IRQ
=$00ff80				Unused_FF80      = $00FF80 ;End of direct page Interrrupt handlers
=$00ffe0				VECTORS_BEGIN    = $00FFE0 ;0 Byte  Interrupt vectors
=$00ffe0				JMP_READY        = $00FFE0 ;4 Bytes Jumps to ROM READY routine. Modified whenever alternate command interpreter is loaded.
=$00ffe4				VECTOR_COP       = $00FFE4 ;2 Bytes Native COP Interrupt vector
=$00ffe6				VECTOR_BRK       = $00FFE6 ;2 Bytes Native BRK Interrupt vector
=$00ffe8				VECTOR_ABORT     = $00FFE8 ;2 Bytes Native ABORT Interrupt vector
=$00ffea				VECTOR_NMI       = $00FFEA ;2 Bytes Native NMI Interrupt vector
=$00ffec				VECTOR_RESET     = $00FFEC ;2 Bytes Unused (Native RESET vector)
=$00ffee				VECTOR_IRQ       = $00FFEE ;2 Bytes Native IRQ Vector
=$00fff0				RETURN           = $00FFF0 ;4 Bytes RETURN key handler. Points to BASIC or MONITOR subroutine to execute when RETURN is pressed.
=$00fff4				VECTOR_ECOP      = $00FFF4 ;2 Bytes Emulation mode interrupt handler
=$00fff6				VECTOR_EBRK      = $00FFF6 ;2 Bytes Emulation mode interrupt handler
=$00fff8				VECTOR_EABORT    = $00FFF8 ;2 Bytes Emulation mode interrupt handler
=$00fffa				VECTOR_ENMI      = $00FFFA ;2 Bytes Emulation mode interrupt handler
=$00fffc				VECTOR_ERESET    = $00FFFC ;2 Bytes Emulation mode interrupt handler
=$00fffe				VECTOR_EIRQ      = $00FFFE ;2 Bytes Emulation mode interrupt handler
=$010000				VECTORS_END      = $010000 ;*End of vector space
=$00ffff				BANK0_END        = $00FFFF ;End of Bank 00 and Direct page

;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_data.asm

>380000	00 a0 af			                .long $AFA000       ; SCREENBEGIN, 3 bytes, Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>380003	4c 00				                .word 76            ; COLS_VISIBLE, 2 bytes, Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>380005	64 00				                .word 100           ; COLS_PER_LINE, 2 bytes, Columns in memory per screen line. A virtual line can be this long. Default=128
>380007	38 00				                .word 56            ; LINES_VISIBLE, 2 bytes, The number of rows visible on the screen. Default=25
>380009	40 00				                .word 64            ; LINES_MAX, 2 bytes, The number of rows in memory for the screen. Default=64
>38000b	00 a0 af			                .long $AFA000       ; CURSORPOS, 3 bytes, The next character written to the screen will be written in this location.
>38000e	00 00				                .word 0             ; CURSORX, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380010	00 00				                .word 0             ; CURSORY, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380012	0f				                .byte $0F           ; CURCOLOR, 2 bytes, Color of next character to be printed to the screen.
>380013	00				                .byte $00           ; CURATTR, 2 bytes, Attribute of next character to be printed to the screen.
>380014	00 80				                .word STACK_BEGIN   ; STACKBOT, 2 bytes, Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
>380016	ff fe				                .word STACK_END     ; STACKTOP, 2 bytes, Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.

;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_code.asm

.ff00	18		clc		RHRESET         CLC
.ff01	fb		xce		                XCE
.ff02	5c 00 10 38	jmp $381000	                JML BOOT
.ff10					RHCOP
.ff10	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff12	8b		phb		                PHB
.ff13	0b		phd		                PHD
.ff14	48		pha		                PHA
.ff15	da		phx		                PHX
.ff16	5a		phy		                PHY
.ff17	5c 08 10 38	jmp $381008	                JML BREAK
.ff20					RHBRK
.ff20	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff22	8b		phb		                PHB
.ff23	0b		phd		                PHD
.ff24	48		pha		                PHA
.ff25	da		phx		                PHX
.ff26	5a		phy		                PHY
.ff27	5c 08 10 38	jmp $381008	                JML BREAK
.ff30					RHABORT
.ff30	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff32	8b		phb		                PHB
.ff33	0b		phd		                PHD
.ff34	48		pha		                PHA
.ff35	da		phx		                PHX
.ff36	5a		phy		                PHY
.ff37	5c 08 10 38	jmp $381008	                JML BREAK
.ff40					 RHNMI
.ff40	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff42	8b		phb		                PHB
.ff43	0b		phd		                PHD
.ff44	48		pha		                PHA
.ff45	da		phx		                PHX
.ff46	5a		phy		                PHY
.ff47	22 c3 12 38	jsl $3812c3	                JSL NMI_HANDLER
.ff4b	7a		ply		                PLY
.ff4c	fa		plx		                PLX
.ff4d	68		pla		                PLA
.ff4e	2b		pld		                PLD
.ff4f	ab		plb		                PLB
.ff50	40		rti		                RTI
.ff60					RHIRQ
.ff60	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff62	8b		phb		                PHB
.ff63	0b		phd		                PHD
.ff64	48		pha		                PHA
.ff65	da		phx		                PHX
.ff66	5a		phy		                PHY
.ff67	22 3c 11 38	jsl $38113c	                JSL IRQ_HANDLER
.ff6b	7a		ply		                PLY
.ff6c	fa		plx		                PLX
.ff6d	68		pla		                PLA
.ff6e	2b		pld		                PLD
.ff6f	ab		plb		                PLB
.ff70	40		rti		                RTI
.ffe0	5c 04 00 3a	jmp $3a0004	JUMP_READY      JML MONITOR    ; Kernel READY routine. Rewrite this address to jump to a custom kernel.
>ffe4	10 ff				RVECTOR_COP     .addr HCOP     ; FFE4
>ffe6	20 ff				RVECTOR_BRK     .addr HBRK     ; FFE6
>ffe8	30 ff				RVECTOR_ABORT   .addr HABORT   ; FFE8
>ffea	40 ff				RVECTOR_NMI     .addr HNMI     ; FFEA
>ffec	00 00				                .word $0000    ; FFEC
>ffee	60 ff				RVECTOR_IRQ     .addr HIRQ    ; FFEE
.fff0	5c 79 06 39	jmp $390679	RRETURN         JML IRETURN
>fff4	10 ff				RVECTOR_ECOP    .addr HCOP     ; FFF4
>fff6	20 ff				RVECTOR_EBRK    .addr HBRK     ; FFF6
>fff8	30 ff				RVECTOR_EABORT  .addr HABORT   ; FFF8
>fffa	40 ff				RVECTOR_ENMI    .addr HNMI     ; FFFA
>fffc	00 ff				RVECTOR_ERESET  .addr HRESET   ; FFFC
>fffe	60 ff				RVECTOR_EIRQ    .addr HIRQ     ; FFFE

;******  Return to file: src\kernel.asm


;******  Processing file: src\Math_def.asm

=$000100				UNSIGNED_MULT_A_LO  = $000100
=$000101				UNSIGNED_MULT_A_HI  = $000101
=$000102				UNSIGNED_MULT_B_LO  = $000102
=$000103				UNSIGNED_MULT_B_HI  = $000103
=$000104				UNSIGNED_MULT_AL_LO = $000104
=$000105				UNSIGNED_MULT_AL_HI = $000105
=$000106				UNSIGNED_MULT_AH_LO = $000106
=$000107				UNSIGNED_MULT_AH_HI = $000107
=$000108				SIGNED_MULT_A_LO    = $000108
=$000109				SIGNED_MULT_A_HI    = $000109
=$00010a				SIGNED_MULT_B_LO    = $00010A
=$00010b				SIGNED_MULT_B_HI    = $00010B
=$00010c				SIGNED_MULT_AL_LO   = $00010C
=$00010d				SIGNED_MULT_AL_HI   = $00010D
=$00010e				SIGNED_MULT_AH_LO   = $00010E
=$00010f				SIGNED_MULT_AH_HI   = $00010F
=$000110				UNSIGNED_DIV_DEM_LO = $000110
=$000111				UNSIGNED_DIV_DEM_HI = $000111
=$000112				UNSIGNED_DIV_NUM_LO = $000112
=$000113				UNSIGNED_DIV_NUM_HI = $000113
=$000114				UNSIGNED_DIV_QUO_LO = $000114
=$000115				UNSIGNED_DIV_QUO_HI = $000115
=$000116				UNSIGNED_DIV_REM_LO = $000116
=$000117				UNSIGNED_DIV_REM_HI = $000117
=$000118				SIGNED_DIV_DEM_LO   = $000118
=$000119				SIGNED_DIV_DEM_HI   = $000119
=$00011a				SIGNED_DIV_NUM_LO   = $00011A
=$00011b				SIGNED_DIV_NUM_HI   = $00011B
=$00011c				SIGNED_DIV_QUO_LO   = $00011C
=$00011d				SIGNED_DIV_QUO_HI   = $00011D
=$00011e				SIGNED_DIV_REM_LO   = $00011E
=$00011f				SIGNED_DIV_REM_HI   = $00011F
=$000120				ADDER32_A_LL        = $000120
=$000121				ADDER32_A_LH        = $000121
=$000122				ADDER32_A_HL        = $000122
=$000123				ADDER32_A_HH        = $000123
=$000124				ADDER32_B_LL        = $000124
=$000125				ADDER32_B_LH        = $000125
=$000126				ADDER32_B_HL        = $000126
=$000127				ADDER32_B_HH        = $000127
=$000128				ADDER32_R_LL        = $000128
=$000129				ADDER32_R_LH        = $000129
=$00012a				ADDER32_R_HL        = $00012A
=$00012b				ADDER32_R_HH        = $00012B

;******  Return to file: src\kernel.asm


;******  Processing file: src\interrupt_def.asm

=$000140				INT_PENDING_REG0 = $000140 ;
=$000141				INT_PENDING_REG1 = $000141 ;
=$000142				INT_PENDING_REG2 = $000142 ;
=$000143				INT_PENDING_REG3 = $000143 ; FMX Model
=$000144				INT_POL_REG0     = $000144 ;
=$000145				INT_POL_REG1     = $000145 ;
=$000146				INT_POL_REG2     = $000146 ;
=$000147				INT_POL_REG7     = $000147 ; FMX Model
=$000148				INT_EDGE_REG0    = $000148 ;
=$000149				INT_EDGE_REG1    = $000149 ;
=$00014a				INT_EDGE_REG2    = $00014A ;
=$00014b				INT_EDGE_REG3    = $00014B ; FMX Model
=$00014c				INT_MASK_REG0    = $00014C ;
=$00014d				INT_MASK_REG1    = $00014D ;
=$00014e				INT_MASK_REG2    = $00014E ;
=$00014f				INT_MASK_REG3    = $00014F ; FMX Model
=$01					FNX0_INT00_SOF        = $01  ;Start of Frame @ 60FPS
=$02					FNX0_INT01_SOL        = $02  ;Start of Line (Programmable)
=$04					FNX0_INT02_TMR0       = $04  ;Timer 0 Interrupt
=$08					FNX0_INT03_TMR1       = $08  ;Timer 1 Interrupt
=$10					FNX0_INT04_TMR2       = $10  ;Timer 2 Interrupt
=$20					FNX0_INT05_RTC        = $20  ;Real-Time Clock Interrupt
=$40					FNX0_INT06_FDC        = $40  ;Floppy Disk Controller
=$80					FNX0_INT07_MOUSE      = $80  ; Mouse Interrupt (INT12 in SuperIO IOspace)
=$01					FNX1_INT00_KBD        = $01  ;Keyboard Interrupt
=$02					FNX1_INT01_SC0        = $02  ;VICKY_II (INT2) Sprite 2 Sprite Collision
=$04					FNX1_INT02_SC1        = $04  ;VICKY_II (INT3) Sprite 2 Tiles Collision
=$08					FNX1_INT03_COM2       = $08  ;Serial Port 2
=$10					FNX1_INT04_COM1       = $10  ;Serial Port 1
=$20					FNX1_INT05_MPU401     = $20  ;Midi Controller Interrupt
=$40					FNX1_INT06_LPT        = $40  ;Parallel Port
=$80					FNX1_INT07_SDCARD     = $80  ;SD Card Controller Interrupt (CH376S)
=$01					FNX2_INT00_OPL3       = $01  ;OPl3
=$02					FNX2_INT01_GABE_INT0  = $02  ;GABE (INT0) - TBD
=$04					FNX2_INT02_GABE_INT1  = $04  ;GABE (INT1) - TBD
=$08					FNX2_INT03_SDMA       = $08  ;VICKY_II (INT4)
=$10					FNX2_INT04_VDMA       = $10  ;VICKY_II (INT5)
=$20					FNX2_INT05_GABE_INT2  = $20  ;GABE (INT2) - TBD
=$40					FNX2_INT06_EXT        = $40  ;External Expansion
=$80					FNX2_INT07_SDCARD_INS = $80  ; SDCARD Insertion
=$01					FNX3_INT00_OPN2       = $01  ;OPN2
=$02					FNX3_INT01_OPM        = $02  ;OPM
=$04					FNX3_INT02_IDE        = $04  ;HDD IDE INTERRUPT
=$08					FNX3_INT03_TBD        = $08  ;TBD
=$10					FNX3_INT04_TBD        = $10  ;TBD
=$20					FNX3_INT05_TBD        = $20  ;GABE (INT2) - TBD
=$40					FNX3_INT06_TBD        = $40  ;External Expansion
=$80					FNX3_INT07_TBD        = $80  ; SDCARD Insertion

;******  Return to file: src\kernel.asm


;******  Processing file: src\dram_inc.asm

=$afa000				SCREEN_PAGE0     = $AFA000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
=$afc000				SCREEN_PAGE1     = $AFC000 ;8192 Bytes Additional page of display RAM. This can be used for page flipping or to handle multiple edit buffers.
=$b00000				SCREEN_END       = $B00000 ;End of display memory

;******  Return to file: src\kernel.asm


;******  Processing file: src\vicky_ii_def.asm

=$af0000				MASTER_CTRL_REG_L	      = $AF0000
=$01					Mstr_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$02					Mstr_Ctrl_Text_Overlay  = $02       ; Enable the Overlay of the text mode on top of Graphic Mode (the Background Color is ignored)
=$04					Mstr_Ctrl_Graph_Mode_En = $04       ; Enable the Graphic Mode
=$08					Mstr_Ctrl_Bitmap_En     = $08       ; Enable the Bitmap Module In Vicky
=$10					Mstr_Ctrl_TileMap_En    = $10       ; Enable the Tile Module in Vicky
=$20					Mstr_Ctrl_Sprite_En     = $20       ; Enable the Sprite Module in Vicky
=$40					Mstr_Ctrl_GAMMA_En      = $40       ; this Enable the GAMMA correction - The Analog and DVI have different color value, the GAMMA is great to correct the difference
=$80					Mstr_Ctrl_Disable_Vid   = $80       ; This will disable the Scanning of the Video hence giving 100% bandwith to the CPU
=$af0001				MASTER_CTRL_REG_H       = $AF0001
=$01					Mstr_Ctrl_Video_Mode0   = $01       ; 0 - 640x480 (Clock @ 25.175Mhz), 1 - 800x600 (Clock @ 40Mhz)
=$02					Mstr_Ctrl_Video_Mode1   = $02       ; 0 - No Pixel Doubling, 1- Pixel Doubling (Reduce the Pixel Resolution by 2)
=$af0002				VKY_RESERVED_00         = $AF0002
=$af0003				VKY_RESERVED_01         = $AF0003
=$01					Border_Ctrl_Enable      = $01
=$af0004				BORDER_CTRL_REG         = $AF0004 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$af0005				BORDER_COLOR_B          = $AF0005
=$af0006				BORDER_COLOR_G          = $AF0006
=$af0007				BORDER_COLOR_R          = $AF0007
=$af0008				BORDER_X_SIZE           = $AF0008; X-  Values: 0 - 32 (Default: 32)
=$af0009				BORDER_Y_SIZE           = $AF0009; Y- Values 0 -32 (Default: 32)
=$af000d				BACKGROUND_COLOR_B      = $AF000D ; When in Graphic Mode, if a pixel is "0" then the Background pixel is chosen
=$af000e				BACKGROUND_COLOR_G      = $AF000E
=$af000f				BACKGROUND_COLOR_R      = $AF000F ;
=$af0010				VKY_TXT_CURSOR_CTRL_REG = $AF0010   ;[0]  Enable Text Mode
=$01					Vky_Cursor_Enable       = $01
=$02					Vky_Cursor_Flash_Rate0  = $02
=$04					Vky_Cursor_Flash_Rate1  = $04
=$08					Vky_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10					Vky_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$af0011				VKY_TXT_START_ADD_PTR   = $AF0011   ; This is an offset to change the Starting address of the Text Mode Buffer (in x)
=$af0012				VKY_TXT_CURSOR_CHAR_REG = $AF0012
=$af0013				VKY_TXT_CURSOR_COLR_REG = $AF0013
=$af0014				VKY_TXT_CURSOR_X_REG_L  = $AF0014
=$af0015				VKY_TXT_CURSOR_X_REG_H  = $AF0015
=$af0016				VKY_TXT_CURSOR_Y_REG_L  = $AF0016
=$af0017				VKY_TXT_CURSOR_Y_REG_H  = $AF0017
=$af001b				VKY_LINE_IRQ_CTRL_REG   = $AF001B ;[0] - Enable Line 0, [1] -Enable Line 1
=$af001c				VKY_LINE0_CMP_VALUE_LO  = $AF001C ;Write Only [7:0]
=$af001d				VKY_LINE0_CMP_VALUE_HI  = $AF001D ;Write Only [3:0]
=$af001e				VKY_LINE1_CMP_VALUE_LO  = $AF001E ;Write Only [7:0]
=$af001f				VKY_LINE1_CMP_VALUE_HI  = $AF001F ;Write Only [3:0]
=$af001c				VKY_INFO_CHIP_NUM_L     = $AF001C
=$af001d				VKY_INFO_CHIP_NUM_H     = $AF001D
=$af001e				VKY_INFO_CHIP_VER_L     = $AF001E
=$af001f				VKY_INFO_CHIP_VER_H     = $AF001F
=$af0500				MOUSE_PTR_GRAP0_START    = $AF0500 ; 16 x 16 = 256 Pixels (Grey Scale) 0 = Transparent, 1 = Black , 255 = White
=$af05ff				MOUSE_PTR_GRAP0_END      = $AF05FF ; Pointer 0
=$af0600				MOUSE_PTR_GRAP1_START    = $AF0600 ;
=$af06ff				MOUSE_PTR_GRAP1_END      = $AF06FF ; Pointer 1
=$af0700				MOUSE_PTR_CTRL_REG_L    = $AF0700 ; Bit[0] Enable, Bit[1] = 0  ( 0 = Pointer0, 1 = Pointer1)
=$af0701				MOUSE_PTR_CTRL_REG_H    = $AF0701 ;
=$af0702				MOUSE_PTR_X_POS_L       = $AF0702 ; X Position (0 - 639) (Can only read now) Writing will have no effect
=$af0703				MOUSE_PTR_X_POS_H       = $AF0703 ;
=$af0704				MOUSE_PTR_Y_POS_L       = $AF0704 ; Y Position (0 - 479) (Can only read now) Writing will have no effect
=$af0705				MOUSE_PTR_Y_POS_H       = $AF0705 ;
=$af0706				MOUSE_PTR_BYTE0         = $AF0706 ; Byte 0 of Mouse Packet (you must write 3 Bytes)
=$af0707				MOUSE_PTR_BYTE1         = $AF0707 ; Byte 1 of Mouse Packet (if you don't, then )
=$af0708				MOUSE_PTR_BYTE2         = $AF0708 ; Byte 2 of Mouse Packet (state Machine will be jammed in 1 state)
=$af070b				C256F_MODEL_MAJOR       = $AF070B ;
=$af070c				C256F_MODEL_MINOR       = $AF070C ;
=$af070d				FPGA_DOR                = $AF070D ;
=$af070e				FPGA_MOR                = $AF070E ;
=$af070f				FPGA_YOR                = $AF070F ;
=$af1f40				FG_CHAR_LUT_PTR         = $AF1F40
=$af1f80				BG_CHAR_LUT_PTR		      = $AF1F80
=$af2000				GRPH_LUT0_PTR		        = $AF2000
=$af2400				GRPH_LUT1_PTR		        = $AF2400
=$af2800				GRPH_LUT2_PTR		        = $AF2800
=$af2c00				GRPH_LUT3_PTR		        = $AF2C00
=$af3000				GRPH_LUT4_PTR		        = $AF3000
=$af3400				GRPH_LUT5_PTR		        = $AF3400
=$af3800				GRPH_LUT6_PTR		        = $AF3800
=$af3c00				GRPH_LUT7_PTR		        = $AF3C00
=$af4000				GAMMA_B_LUT_PTR		      = $AF4000
=$af4100				GAMMA_G_LUT_PTR		      = $AF4100
=$af4200				GAMMA_R_LUT_PTR		      = $AF4200
=$af5000				TILE_MAP0       		    = $AF5000     ;$AF5000 - $AF57FF
=$af5800				TILE_MAP1               = $AF5800     ;$AF5800 - $AF5FFF
=$af6000				TILE_MAP2               = $AF6000     ;$AF6000 - $AF67FF
=$af6800				TILE_MAP3               = $AF6800     ;$AF6800 - $AF6FFF
=$af8000				FONT_MEMORY_BANK0       = $AF8000     ;$AF8000 - $AF87FF
=$af8800				FONT_MEMORY_BANK1       = $AF8800     ;$AF8800 - $AF8FFF
=$afa000				CS_TEXT_MEM_PTR         = $AFA000
=$afc000				CS_COLOR_MEM_PTR        = $AFC000
=$afe000				BTX_START               = $AFE000     ; BEATRIX Registers
=$afffff				BTX_END                 = $AFFFFF

;******  Processing file: src\VKYII_CFP9553_BITMAP_def.asm

=$af0100				BM0_CONTROL_REG     = $AF0100
=$af0101				BM0_START_ADDY_L    = $AF0101
=$af0102				BM0_START_ADDY_M    = $AF0102
=$af0103				BM0_START_ADDY_H    = $AF0103
=$af0104				BM0_X_OFFSET        = $AF0104
=$af0105				BM0_Y_OFFSET        = $AF0105
=$af0106				BM0_PRIORITY        = $AF0106
=$af0107				BM0_RESERVED_7      = $AF0107
=$af0108				BM1_CONTROL_REG     = $AF0108
=$af0109				BM1_START_ADDY_L    = $AF0109
=$af010a				BM1_START_ADDY_M    = $AF010A
=$af010b				BM1_START_ADDY_H    = $AF010B
=$af010c				BM1_X_OFFSET        = $AF010C
=$af010d				BM1_Y_OFFSET        = $AF010D
=$af010e				BM1_PRIORITY        = $AF010E
=$af010f				BM1_RESERVED_7      = $AF010F

;******  Return to file: src\vicky_ii_def.asm


;******  Processing file: src\VKYII_CFP9553_TILEMAP_def.asm

=$01					TILE_Enable             = $01
=$af0200				TL0_CONTROL_REG         = $AF0200       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0201				TL0_START_ADDY_L        = $AF0201       ; Not USed right now - Starting Address to where is the MAP
=$af0202				TL0_START_ADDY_M        = $AF0202
=$af0203				TL0_START_ADDY_H        = $AF0203
=$af0204				TL0_TOTAL_X_SIZE_L      = $AF0204       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0205				TL0_TOTAL_X_SIZE_H      = $AF0205
=$af0206				TL0_TOTAL_Y_SIZE_L      = $AF0206       ; Size of the Map in Y Tile Count [9:0]
=$af0207				TL0_TOTAL_Y_SIZE_H      = $AF0207
=$af0208				TL0_WINDOW_X_POS_L      = $AF0208       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0209				TL0_WINDOW_X_POS_H      = $AF0209       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af020a				TL0_WINDOW_Y_POS_L      = $AF020A       ; Top Left Corner Position of the TileMAp Window in Y
=$af020b				TL0_WINDOW_Y_POS_H      = $AF020B       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af020c				TL1_CONTROL_REG         = $AF020C       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af020d				TL1_START_ADDY_L        = $AF020D       ; Not USed right now - Starting Address to where is the MAP
=$af020e				TL1_START_ADDY_M        = $AF020E
=$af020f				TL1_START_ADDY_H        = $AF020F
=$af0210				TL1_TOTAL_X_SIZE_L      = $AF0210       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0211				TL1_TOTAL_X_SIZE_H      = $AF0211
=$af0212				TL1_TOTAL_Y_SIZE_L      = $AF0212       ; Size of the Map in Y Tile Count [9:0]
=$af0213				TL1_TOTAL_Y_SIZE_H      = $AF0213
=$af0214				TL1_WINDOW_X_POS_L      = $AF0214       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0215				TL1_WINDOW_X_POS_H      = $AF0215       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0216				TL1_WINDOW_Y_POS_L      = $AF0216       ; Top Left Corner Position of the TileMAp Window in Y
=$af0217				TL1_WINDOW_Y_POS_H      = $AF0217       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0218				TL2_CONTROL_REG         = $AF0218       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0219				TL2_START_ADDY_L        = $AF0219       ; Not USed right now - Starting Address to where is the MAP
=$af021a				TL2_START_ADDY_M        = $AF021A
=$af021b				TL2_START_ADDY_H        = $AF021B
=$af021c				TL2_TOTAL_X_SIZE_L      = $AF021C       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af021d				TL2_TOTAL_X_SIZE_H      = $AF021D
=$af021e				TL2_TOTAL_Y_SIZE_L      = $AF021E       ; Size of the Map in Y Tile Count [9:0]
=$af021f				TL2_TOTAL_Y_SIZE_H      = $AF021F
=$af0220				TL2_WINDOW_X_POS_L      = $AF0220       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0221				TL2_WINDOW_X_POS_H      = $AF0221       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0222				TL2_WINDOW_Y_POS_L      = $AF0222       ; Top Left Corner Position of the TileMAp Window in Y
=$af0223				TL2_WINDOW_Y_POS_H      = $AF0223       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0224				TL3_CONTROL_REG         = $AF0224       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0225				TL3_START_ADDY_L        = $AF0225       ; Not USed right now - Starting Address to where is the MAP
=$af0226				TL3_START_ADDY_M        = $AF0226
=$af0227				TL3_START_ADDY_H        = $AF0227
=$af0228				TL3_TOTAL_X_SIZE_L      = $AF0228       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0229				TL3_TOTAL_X_SIZE_H      = $AF0229
=$af022a				TL3_TOTAL_Y_SIZE_L      = $AF022A       ; Size of the Map in Y Tile Count [9:0]
=$af022b				TL3_TOTAL_Y_SIZE_H      = $AF022B
=$af022c				TL3_WINDOW_X_POS_L      = $AF022C       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af022d				TL3_WINDOW_X_POS_H      = $AF022D       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af022e				TL3_WINDOW_Y_POS_L      = $AF022E       ; Top Left Corner Position of the TileMAp Window in Y
=$af022f				TL3_WINDOW_Y_POS_H      = $AF022F       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0280				TILESET0_ADDY_L         = $AF0280   ; Pointer to Tileset 0 [21:0]
=$af0281				TILESET0_ADDY_M         = $AF0281
=$af0282				TILESET0_ADDY_H         = $AF0282
=$af0283				TILESET0_ADDY_CFG       = $AF0283   ; [3] - TileStride256x256 [2:0] LUT
=$af0284				TILESET1_ADDY_L         = $AF0284
=$af0285				TILESET1_ADDY_M         = $AF0285
=$af0286				TILESET1_ADDY_H         = $AF0286
=$af0287				TILESET1_ADDY_CFG       = $AF0287
=$af0288				TILESET2_ADDY_L         = $AF0288
=$af0289				TILESET2_ADDY_M         = $AF0289
=$af028a				TILESET2_ADDY_H         = $AF028A
=$af028b				TILESET2_ADDY_CFG       = $AF028B
=$af028c				TILESET3_ADDY_L         = $AF028C
=$af028d				TILESET3_ADDY_M         = $AF028D
=$af028e				TILESET3_ADDY_H         = $AF028E
=$af028f				TILESET3_ADDY_CFG       = $AF028F
=$af0290				TILESET4_ADDY_L         = $AF0290
=$af0291				TILESET4_ADDY_M         = $AF0291
=$af0292				TILESET4_ADDY_H         = $AF0292
=$af0293				TILESET4_ADDY_CFG       = $AF0293
=$af0294				TILESET5_ADDY_L         = $AF0294
=$af0295				TILESET5_ADDY_M         = $AF0295
=$af0296				TILESET5_ADDY_H         = $AF0296
=$af0297				TILESET5_ADDY_CFG       = $AF0297
=$af0298				TILESET6_ADDY_L         = $AF0298
=$af0299				TILESET6_ADDY_M         = $AF0299
=$af029a				TILESET6_ADDY_H         = $AF029A
=$af029b				TILESET6_ADDY_CFG       = $AF029B
=$af029c				TILESET7_ADDY_L         = $AF029C
=$af029d				TILESET7_ADDY_M         = $AF029D
=$af029e				TILESET7_ADDY_H         = $AF029E
=$af029f				TILESET7_ADDY_CFG       = $AF029F

;******  Return to file: src\vicky_ii_def.asm


;******  Processing file: src\VKYII_CFP9553_VDMA_def.asm

=$af0400				VDMA_CONTROL_REG        = $AF0400
=$01					VDMA_CTRL_Enable        = $01
=$02					VDMA_CTRL_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04					VDMA_CTRL_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08					VDMA_CTRL_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10					VDMA_CTRL_SysRAM_Src    = $10     ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20					VDMA_CTRL_SysRAM_Dst    = $20     ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$80					VDMA_CTRL_Start_TRF     = $80     ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0401				VDMA_BYTE_2_WRITE       = $AF0401 ; Write Only - Byte to Write in the Fill Function
=$af0401				VDMA_STATUS_REG         = $AF0401 ; Read only
=$01					VDMA_STAT_Size_Err      = $01     ; If Set to 1, Overall Size is Invalid
=$02					VDMA_STAT_Dst_Add_Err   = $02     ; If Set to 1, Destination Address Invalid
=$04					VDMA_STAT_Src_Add_Err   = $04     ; If Set to 1, Source Address Invalid
=$80					VDMA_STAT_VDMA_IPS      = $80     ; If Set to 1, VDMA Transfer in Progress (this Inhibit CPU Access to Mem)
=$af0402				VDMA_SRC_ADDY_L         = $AF0402 ; Pointer to the Source of the Data to be stransfered
=$af0403				VDMA_SRC_ADDY_M         = $AF0403 ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0404				VDMA_SRC_ADDY_H         = $AF0404
=$af0405				VDMA_DST_ADDY_L         = $AF0405 ; Destination Pointer within Vicky's video memory Range
=$af0406				VDMA_DST_ADDY_M         = $AF0406 ; ($00_0000 - $3F_0000)
=$af0407				VDMA_DST_ADDY_H         = $AF0407
=$af0408				VDMA_SIZE_L             = $AF0408 ; Maximum Value: $40:0000 (4Megs)
=$af0409				VDMA_SIZE_M             = $AF0409
=$af040a				VDMA_SIZE_H             = $AF040A
=$af040b				VDMA_IGNORED            = $AF040B
=$af0408				VDMA_X_SIZE_L           = $AF0408 ; Maximum Value: 65535
=$af0409				VDMA_X_SIZE_H           = $AF0409
=$af040a				VDMA_Y_SIZE_L           = $AF040A ; Maximum Value: 65535
=$af040b				VDMA_Y_SIZE_H           = $AF040B
=$af040c				VDMA_SRC_STRIDE_L       = $AF040C ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040d				VDMA_SRC_STRIDE_H       = $AF040D ;
=$af040e				VDMA_DST_STRIDE_L       = $AF040E ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040f				VDMA_DST_STRIDE_H       = $AF040F ;

;******  Return to file: src\vicky_ii_def.asm


;******  Processing file: src\VKYII_CFP9553_SPRITE_def.asm

=$01					SPRITE_Enable             = $01
=$00					SPRITE_LUT0               = $00 ; This is the LUT that the Sprite will use
=$02					SPRITE_LUT1               = $02
=$04					SPRITE_LUT2               = $04 ; Only 4 LUT for Now, So this bit is not used.
=$06					SPRITE_LUT3               = $06 ; Only 4 LUT for Now, So this bit is not used.
=$08					SPRITE_LUT4               = $08 ; Only 4 LUT for Now, So this bit is not used.
=$0a					SPRITE_LUT5               = $0A ; Only 4 LUT for Now, So this bit is not used.
=$0c					SPRITE_LUT6               = $0C ; Only 4 LUT for Now, So this bit is not used.
=$0e					SPRITE_LUT7               = $0E ; Only 4 LUT for Now, So this bit is not used.
=$10					SPRITE_DEPTH0             = $10 ; This is the Layer the Sprite will be Displayed in
=$20					SPRITE_DEPTH1             = $20
=$30					SPRITE_DEPTH2             = $30
=$40					SPRITE_DEPTH3             = $40
=$50					SPRITE_DEPTH4             = $50
=$60					SPRITE_DEPTH5             = $60
=$af0800				SP00_CONTROL_REG        = $AF0800
=$af0801				SP00_ADDY_PTR_L         = $AF0801
=$af0802				SP00_ADDY_PTR_M         = $AF0802
=$af0803				SP00_ADDY_PTR_H         = $AF0803
=$af0804				SP00_X_POS_L            = $AF0804
=$af0805				SP00_X_POS_H            = $AF0805
=$af0806				SP00_Y_POS_L            = $AF0806
=$af0807				SP00_Y_POS_H            = $AF0807
=$af0808				SP01_CONTROL_REG        = $AF0808
=$af0809				SP01_ADDY_PTR_L         = $AF0809
=$af080a				SP01_ADDY_PTR_M         = $AF080A
=$af080b				SP01_ADDY_PTR_H         = $AF080B
=$af080c				SP01_X_POS_L            = $AF080C
=$af080d				SP01_X_POS_H            = $AF080D
=$af080e				SP01_Y_POS_L            = $AF080E
=$af080f				SP01_Y_POS_H            = $AF080F
=$af0810				SP02_CONTROL_REG        = $AF0810
=$af0811				SP02_ADDY_PTR_L         = $AF0811
=$af0812				SP02_ADDY_PTR_M         = $AF0812
=$af0813				SP02_ADDY_PTR_H         = $AF0813
=$af0814				SP02_X_POS_L            = $AF0814
=$af0815				SP02_X_POS_H            = $AF0815
=$af0816				SP02_Y_POS_L            = $AF0816
=$af0817				SP02_Y_POS_H            = $AF0817
=$af0818				SP03_CONTROL_REG        = $AF0818
=$af0819				SP03_ADDY_PTR_L         = $AF0819
=$af081a				SP03_ADDY_PTR_M         = $AF081A
=$af081b				SP03_ADDY_PTR_H         = $AF081B
=$af081c				SP03_X_POS_L            = $AF081C
=$af081d				SP03_X_POS_H            = $AF081D
=$af081e				SP03_Y_POS_L            = $AF081E
=$af081f				SP03_Y_POS_H            = $AF081F
=$af0820				SP04_CONTROL_REG        = $AF0820
=$af0821				SP04_ADDY_PTR_L         = $AF0821
=$af0822				SP04_ADDY_PTR_M         = $AF0822
=$af0823				SP04_ADDY_PTR_H         = $AF0823
=$af0824				SP04_X_POS_L            = $AF0824
=$af0825				SP04_X_POS_H            = $AF0825
=$af0826				SP04_Y_POS_L            = $AF0826
=$af0827				SP04_Y_POS_H            = $AF0827
=$af0828				SP05_CONTROL_REG        = $AF0828
=$af0829				SP05_ADDY_PTR_L         = $AF0829
=$af082a				SP05_ADDY_PTR_M         = $AF082A
=$af082b				SP05_ADDY_PTR_H         = $AF082B
=$af082c				SP05_X_POS_L            = $AF082C
=$af082d				SP05_X_POS_H            = $AF082D
=$af082e				SP05_Y_POS_L            = $AF082E
=$af082f				SP05_Y_POS_H            = $AF082F
=$af0830				SP06_CONTROL_REG        = $AF0830
=$af0831				SP06_ADDY_PTR_L         = $AF0831
=$af0832				SP06_ADDY_PTR_M         = $AF0832
=$af0833				SP06_ADDY_PTR_H         = $AF0833
=$af0834				SP06_X_POS_L            = $AF0834
=$af0835				SP06_X_POS_H            = $AF0835
=$af0836				SP06_Y_POS_L            = $AF0836
=$af0837				SP06_Y_POS_H            = $AF0837
=$af0838				SP07_CONTROL_REG        = $AF0838
=$af0839				SP07_ADDY_PTR_L         = $AF0839
=$af083a				SP07_ADDY_PTR_M         = $AF083A
=$af083b				SP07_ADDY_PTR_H         = $AF083B
=$af083c				SP07_X_POS_L            = $AF083C
=$af083d				SP07_X_POS_H            = $AF083D
=$af083e				SP07_Y_POS_L            = $AF083E
=$af083f				SP07_Y_POS_H            = $AF083F
=$af0840				SP08_CONTROL_REG        = $AF0840
=$af0841				SP08_ADDY_PTR_L         = $AF0841
=$af0842				SP08_ADDY_PTR_M         = $AF0842
=$af0843				SP08_ADDY_PTR_H         = $AF0843
=$af0844				SP08_X_POS_L            = $AF0844
=$af0845				SP08_X_POS_H            = $AF0845
=$af0846				SP08_Y_POS_L            = $AF0846
=$af0847				SP08_Y_POS_H            = $AF0847
=$af0848				SP09_CONTROL_REG        = $AF0848
=$af0849				SP09_ADDY_PTR_L         = $AF0849
=$af084a				SP09_ADDY_PTR_M         = $AF084A
=$af084b				SP09_ADDY_PTR_H         = $AF084B
=$af084c				SP09_X_POS_L            = $AF084C
=$af084d				SP09_X_POS_H            = $AF084D
=$af084e				SP09_Y_POS_L            = $AF084E
=$af084f				SP09_Y_POS_H            = $AF084F
=$af0850				SP10_CONTROL_REG        = $AF0850
=$af0851				SP10_ADDY_PTR_L         = $AF0851
=$af0852				SP10_ADDY_PTR_M         = $AF0852
=$af0853				SP10_ADDY_PTR_H         = $AF0853
=$af0854				SP10_X_POS_L            = $AF0854
=$af0855				SP10_X_POS_H            = $AF0855
=$af0856				SP10_Y_POS_L            = $AF0856
=$af0857				SP10_Y_POS_H            = $AF0857
=$af0858				SP11_CONTROL_REG        = $AF0858
=$af0859				SP11_ADDY_PTR_L         = $AF0859
=$af085a				SP11_ADDY_PTR_M         = $AF085A
=$af085b				SP11_ADDY_PTR_H         = $AF085B
=$af085c				SP11_X_POS_L            = $AF085C
=$af085d				SP11_X_POS_H            = $AF085D
=$af085e				SP11_Y_POS_L            = $AF085E
=$af085f				SP11_Y_POS_H            = $AF085F
=$af0860				SP12_CONTROL_REG        = $AF0860
=$af0861				SP12_ADDY_PTR_L         = $AF0861
=$af0862				SP12_ADDY_PTR_M         = $AF0862
=$af0863				SP12_ADDY_PTR_H         = $AF0863
=$af0864				SP12_X_POS_L            = $AF0864
=$af0865				SP12_X_POS_H            = $AF0865
=$af0866				SP12_Y_POS_L            = $AF0866
=$af0867				SP12_Y_POS_H            = $AF0867
=$af0868				SP13_CONTROL_REG        = $AF0868
=$af0869				SP13_ADDY_PTR_L         = $AF0869
=$af086a				SP13_ADDY_PTR_M         = $AF086A
=$af086b				SP13_ADDY_PTR_H         = $AF086B
=$af086c				SP13_X_POS_L            = $AF086C
=$af086d				SP13_X_POS_H            = $AF086D
=$af086e				SP13_Y_POS_L            = $AF086E
=$af086f				SP13_Y_POS_H            = $AF086F
=$af0870				SP14_CONTROL_REG        = $AF0870
=$af0871				SP14_ADDY_PTR_L         = $AF0871
=$af0872				SP14_ADDY_PTR_M         = $AF0872
=$af0873				SP14_ADDY_PTR_H         = $AF0873
=$af0874				SP14_X_POS_L            = $AF0874
=$af0875				SP14_X_POS_H            = $AF0875
=$af0876				SP14_Y_POS_L            = $AF0876
=$af0877				SP14_Y_POS_H            = $AF0877
=$af0878				SP15_CONTROL_REG        = $AF0878
=$af0879				SP15_ADDY_PTR_L         = $AF0879
=$af087a				SP15_ADDY_PTR_M         = $AF087A
=$af087b				SP15_ADDY_PTR_H         = $AF087B
=$af087c				SP15_X_POS_L            = $AF087C
=$af087d				SP15_X_POS_H            = $AF087D
=$af087e				SP15_Y_POS_L            = $AF087E
=$af087f				SP15_Y_POS_H            = $AF087F
=$af0880				SP16_CONTROL_REG        = $AF0880
=$af0881				SP16_ADDY_PTR_L         = $AF0881
=$af0882				SP16_ADDY_PTR_M         = $AF0882
=$af0883				SP16_ADDY_PTR_H         = $AF0883
=$af0884				SP16_X_POS_L            = $AF0884
=$af0885				SP16_X_POS_H            = $AF0885
=$af0886				SP16_Y_POS_L            = $AF0886
=$af0887				SP16_Y_POS_H            = $AF0887
=$af0888				SP17_CONTROL_REG        = $AF0888
=$af0889				SP17_ADDY_PTR_L         = $AF0889
=$af088a				SP17_ADDY_PTR_M         = $AF088A
=$af088b				SP17_ADDY_PTR_H         = $AF088B
=$af088c				SP17_X_POS_L            = $AF088C
=$af088d				SP17_X_POS_H            = $AF088D
=$af088e				SP17_Y_POS_L            = $AF088E
=$af088f				SP17_Y_POS_H            = $AF088F
=$af0890				SP18_CONTROL_REG        = $AF0890
=$af0891				SP18_ADDY_PTR_L         = $AF0891
=$af0892				SP18_ADDY_PTR_M         = $AF0892
=$af0893				SP18_ADDY_PTR_H         = $AF0893
=$af0894				SP18_X_POS_L            = $AF0894
=$af0895				SP18_X_POS_H            = $AF0895
=$af0896				SP18_Y_POS_L            = $AF0896
=$af0897				SP18_Y_POS_H            = $AF0897
=$af0898				SP19_CONTROL_REG        = $AF0898
=$af0899				SP19_ADDY_PTR_L         = $AF0899
=$af089a				SP19_ADDY_PTR_M         = $AF089A
=$af089b				SP19_ADDY_PTR_H         = $AF089B
=$af089c				SP19_X_POS_L            = $AF089C
=$af089d				SP19_X_POS_H            = $AF089D
=$af089e				SP19_Y_POS_L            = $AF089E
=$af089f				SP19_Y_POS_H            = $AF089F
=$af08a0				SP20_CONTROL_REG        = $AF08A0
=$af08a1				SP20_ADDY_PTR_L         = $AF08A1
=$af08a2				SP20_ADDY_PTR_M         = $AF08A2
=$af08a3				SP20_ADDY_PTR_H         = $AF08A3
=$af08a4				SP20_X_POS_L            = $AF08A4
=$af08a5				SP20_X_POS_H            = $AF08A5
=$af08a6				SP20_Y_POS_L            = $AF08A6
=$af08a7				SP20_Y_POS_H            = $AF08A7
=$af08a8				SP21_CONTROL_REG        = $AF08A8
=$af08a9				SP21_ADDY_PTR_L         = $AF08A9
=$af08aa				SP21_ADDY_PTR_M         = $AF08AA
=$af08ab				SP21_ADDY_PTR_H         = $AF08AB
=$af08ac				SP21_X_POS_L            = $AF08AC
=$af08ad				SP21_X_POS_H            = $AF08AD
=$af08ae				SP21_Y_POS_L            = $AF08AE
=$af08af				SP21_Y_POS_H            = $AF08AF
=$af08b0				SP22_CONTROL_REG        = $AF08B0
=$af08b1				SP22_ADDY_PTR_L         = $AF08B1
=$af08b2				SP22_ADDY_PTR_M         = $AF08B2
=$af08b3				SP22_ADDY_PTR_H         = $AF08B3
=$af08b4				SP22_X_POS_L            = $AF08B4
=$af08b5				SP22_X_POS_H            = $AF08B5
=$af08b6				SP22_Y_POS_L            = $AF08B6
=$af08b7				SP22_Y_POS_H            = $AF08B7
=$af08b8				SP23_CONTROL_REG        = $AF08B8
=$af08b9				SP23_ADDY_PTR_L         = $AF08B9
=$af08ba				SP23_ADDY_PTR_M         = $AF08BA
=$af08bb				SP23_ADDY_PTR_H         = $AF08BB
=$af08bc				SP23_X_POS_L            = $AF08BC
=$af08bd				SP23_X_POS_H            = $AF08BD
=$af08be				SP23_Y_POS_L            = $AF08BE
=$af08bf				SP23_Y_POS_H            = $AF08BF
=$af08c0				SP24_CONTROL_REG        = $AF08C0
=$af08c1				SP24_ADDY_PTR_L         = $AF08C1
=$af08c2				SP24_ADDY_PTR_M         = $AF08C2
=$af08c3				SP24_ADDY_PTR_H         = $AF08C3
=$af08c4				SP24_X_POS_L            = $AF08C4
=$af08c5				SP24_X_POS_H            = $AF08C5
=$af08c6				SP24_Y_POS_L            = $AF08C6
=$af08c7				SP24_Y_POS_H            = $AF08C7
=$af08c8				SP25_CONTROL_REG        = $AF08C8
=$af08c9				SP25_ADDY_PTR_L         = $AF08C9
=$af08ca				SP25_ADDY_PTR_M         = $AF08CA
=$af08cb				SP25_ADDY_PTR_H         = $AF08CB
=$af08cc				SP25_X_POS_L            = $AF08CC
=$af08cd				SP25_X_POS_H            = $AF08CD
=$af08ce				SP25_Y_POS_L            = $AF08CE
=$af08cf				SP25_Y_POS_H            = $AF08CF
=$af08d0				SP26_CONTROL_REG        = $AF08D0
=$af08d1				SP26_ADDY_PTR_L         = $AF08D1
=$af08d2				SP26_ADDY_PTR_M         = $AF08D2
=$af08d3				SP26_ADDY_PTR_H         = $AF08D3
=$af08d4				SP26_X_POS_L            = $AF08D4
=$af08d5				SP26_X_POS_H            = $AF08D5
=$af08d6				SP26_Y_POS_L            = $AF08D6
=$af08d7				SP26_Y_POS_H            = $AF08D7
=$af08d8				SP27_CONTROL_REG        = $AF08D8
=$af08d9				SP27_ADDY_PTR_L         = $AF08D9
=$af08da				SP27_ADDY_PTR_M         = $AF08DA
=$af08db				SP27_ADDY_PTR_H         = $AF08DB
=$af08dc				SP27_X_POS_L            = $AF08DC
=$af08dd				SP27_X_POS_H            = $AF08DD
=$af08de				SP27_Y_POS_L            = $AF08DE
=$af08df				SP27_Y_POS_H            = $AF08DF
=$af08e0				SP28_CONTROL_REG        = $AF08E0
=$af08e1				SP28_ADDY_PTR_L         = $AF08E1
=$af08e2				SP28_ADDY_PTR_M         = $AF08E2
=$af08e3				SP28_ADDY_PTR_H         = $AF08E3
=$af08e4				SP28_X_POS_L            = $AF08E4
=$af08e5				SP28_X_POS_H            = $AF08E5
=$af08e6				SP28_Y_POS_L            = $AF08E6
=$af08e7				SP28_Y_POS_H            = $AF08E7
=$af08e8				SP29_CONTROL_REG        = $AF08E8
=$af08e9				SP29_ADDY_PTR_L         = $AF08E9
=$af08ea				SP29_ADDY_PTR_M         = $AF08EA
=$af08eb				SP29_ADDY_PTR_H         = $AF08EB
=$af08ec				SP29_X_POS_L            = $AF08EC
=$af08ed				SP29_X_POS_H            = $AF08ED
=$af08ee				SP29_Y_POS_L            = $AF08EE
=$af08ef				SP29_Y_POS_H            = $AF08EF
=$af08f0				SP30_CONTROL_REG        = $AF08F0
=$af08f1				SP30_ADDY_PTR_L         = $AF08F1
=$af08f2				SP30_ADDY_PTR_M         = $AF08F2
=$af08f3				SP30_ADDY_PTR_H         = $AF08F3
=$af08f4				SP30_X_POS_L            = $AF08F4
=$af08f5				SP30_X_POS_H            = $AF08F5
=$af08f6				SP30_Y_POS_L            = $AF08F6
=$af08f7				SP30_Y_POS_H            = $AF08F7
=$af08f8				SP31_CONTROL_REG        = $AF08F8
=$af08f9				SP31_ADDY_PTR_L         = $AF08F9
=$af08fa				SP31_ADDY_PTR_M         = $AF08FA
=$af08fb				SP31_ADDY_PTR_H         = $AF08FB
=$af08fc				SP31_X_POS_L            = $AF08FC
=$af08fd				SP31_X_POS_H            = $AF08FD
=$af08fe				SP31_Y_POS_L            = $AF08FE
=$af08ff				SP31_Y_POS_H            = $AF08FF
=$af0900				SP32_CONTROL_REG        = $AF0900
=$af0901				SP32_ADDY_PTR_L         = $AF0901
=$af0902				SP32_ADDY_PTR_M         = $AF0902
=$af0903				SP32_ADDY_PTR_H         = $AF0903
=$af0904				SP32_X_POS_L            = $AF0904
=$af0905				SP32_X_POS_H            = $AF0905
=$af0906				SP32_Y_POS_L            = $AF0906
=$af0907				SP32_Y_POS_H            = $AF0907
=$af0908				SP33_CONTROL_REG        = $AF0908
=$af0909				SP33_ADDY_PTR_L         = $AF0909
=$af090a				SP33_ADDY_PTR_M         = $AF090A
=$af090b				SP33_ADDY_PTR_H         = $AF090B
=$af090c				SP33_X_POS_L            = $AF090C
=$af090d				SP33_X_POS_H            = $AF090D
=$af090e				SP33_Y_POS_L            = $AF090E
=$af090f				SP33_Y_POS_H            = $AF090F
=$af0910				SP34_CONTROL_REG        = $AF0910
=$af0911				SP34_ADDY_PTR_L         = $AF0911
=$af0912				SP34_ADDY_PTR_M         = $AF0912
=$af0913				SP34_ADDY_PTR_H         = $AF0913
=$af0914				SP34_X_POS_L            = $AF0914
=$af0915				SP34_X_POS_H            = $AF0915
=$af0916				SP34_Y_POS_L            = $AF0916
=$af0917				SP34_Y_POS_H            = $AF0917
=$af0918				SP35_CONTROL_REG        = $AF0918
=$af0919				SP35_ADDY_PTR_L         = $AF0919
=$af091a				SP35_ADDY_PTR_M         = $AF091A
=$af091b				SP35_ADDY_PTR_H         = $AF091B
=$af091c				SP35_X_POS_L            = $AF091C
=$af091d				SP35_X_POS_H            = $AF091D
=$af091e				SP35_Y_POS_L            = $AF091E
=$af091f				SP35_Y_POS_H            = $AF091F
=$af0920				SP36_CONTROL_REG        = $AF0920
=$af0921				SP36_ADDY_PTR_L         = $AF0921
=$af0922				SP36_ADDY_PTR_M         = $AF0922
=$af0923				SP36_ADDY_PTR_H         = $AF0923
=$af0924				SP36_X_POS_L            = $AF0924
=$af0925				SP36_X_POS_H            = $AF0925
=$af0926				SP36_Y_POS_L            = $AF0926
=$af0927				SP36_Y_POS_H            = $AF0927
=$af0928				SP37_CONTROL_REG        = $AF0928
=$af0929				SP37_ADDY_PTR_L         = $AF0929
=$af092a				SP37_ADDY_PTR_M         = $AF092A
=$af092b				SP37_ADDY_PTR_H         = $AF092B
=$af092c				SP37_X_POS_L            = $AF092C
=$af092d				SP37_X_POS_H            = $AF092D
=$af092e				SP37_Y_POS_L            = $AF092E
=$af092f				SP37_Y_POS_H            = $AF092F
=$af0930				SP38_CONTROL_REG        = $AF0930
=$af0931				SP38_ADDY_PTR_L         = $AF0931
=$af0932				SP38_ADDY_PTR_M         = $AF0932
=$af0933				SP38_ADDY_PTR_H         = $AF0933
=$af0934				SP38_X_POS_L            = $AF0934
=$af0935				SP38_X_POS_H            = $AF0935
=$af0936				SP38_Y_POS_L            = $AF0936
=$af0937				SP38_Y_POS_H            = $AF0937
=$af0938				SP39_CONTROL_REG        = $AF0938
=$af0939				SP39_ADDY_PTR_L         = $AF0939
=$af093a				SP39_ADDY_PTR_M         = $AF093A
=$af093b				SP39_ADDY_PTR_H         = $AF093B
=$af093c				SP39_X_POS_L            = $AF093C
=$af093d				SP39_X_POS_H            = $AF093D
=$af093e				SP39_Y_POS_L            = $AF093E
=$af093f				SP39_Y_POS_H            = $AF093F
=$af0940				SP40_CONTROL_REG        = $AF0940
=$af0941				SP40_ADDY_PTR_L         = $AF0941
=$af0942				SP40_ADDY_PTR_M         = $AF0942
=$af0943				SP40_ADDY_PTR_H         = $AF0943
=$af0944				SP40_X_POS_L            = $AF0944
=$af0945				SP40_X_POS_H            = $AF0945
=$af0946				SP40_Y_POS_L            = $AF0946
=$af0947				SP40_Y_POS_H            = $AF0947
=$af0948				SP41_CONTROL_REG        = $AF0948
=$af0949				SP41_ADDY_PTR_L         = $AF0949
=$af094a				SP41_ADDY_PTR_M         = $AF094A
=$af094b				SP41_ADDY_PTR_H         = $AF094B
=$af094c				SP41_X_POS_L            = $AF094C
=$af094d				SP41_X_POS_H            = $AF094D
=$af094e				SP41_Y_POS_L            = $AF094E
=$af094f				SP41_Y_POS_H            = $AF094F
=$af0950				SP42_CONTROL_REG        = $AF0950
=$af0951				SP42_ADDY_PTR_L         = $AF0951
=$af0952				SP42_ADDY_PTR_M         = $AF0952
=$af0953				SP42_ADDY_PTR_H         = $AF0953
=$af0954				SP42_X_POS_L            = $AF0954
=$af0955				SP42_X_POS_H            = $AF0955
=$af0956				SP42_Y_POS_L            = $AF0956
=$af0957				SP42_Y_POS_H            = $AF0957
=$af0958				SP43_CONTROL_REG        = $AF0958
=$af0959				SP43_ADDY_PTR_L         = $AF0959
=$af095a				SP43_ADDY_PTR_M         = $AF095A
=$af095b				SP43_ADDY_PTR_H         = $AF095B
=$af095c				SP43_X_POS_L            = $AF095C
=$af095d				SP43_X_POS_H            = $AF095D
=$af095e				SP43_Y_POS_L            = $AF095E
=$af095f				SP43_Y_POS_H            = $AF095F
=$af0960				SP44_CONTROL_REG        = $AF0960
=$af0961				SP44_ADDY_PTR_L         = $AF0961
=$af0962				SP44_ADDY_PTR_M         = $AF0962
=$af0963				SP44_ADDY_PTR_H         = $AF0963
=$af0964				SP44_X_POS_L            = $AF0964
=$af0965				SP44_X_POS_H            = $AF0965
=$af0966				SP44_Y_POS_L            = $AF0966
=$af0967				SP44_Y_POS_H            = $AF0967
=$af0968				SP45_CONTROL_REG        = $AF0968
=$af0969				SP45_ADDY_PTR_L         = $AF0969
=$af096a				SP45_ADDY_PTR_M         = $AF096A
=$af096b				SP45_ADDY_PTR_H         = $AF096B
=$af096c				SP45_X_POS_L            = $AF096C
=$af096d				SP45_X_POS_H            = $AF096D
=$af096e				SP45_Y_POS_L            = $AF096E
=$af096f				SP45_Y_POS_H            = $AF096F
=$af0970				SP46_CONTROL_REG        = $AF0970
=$af0971				SP46_ADDY_PTR_L         = $AF0971
=$af0972				SP46_ADDY_PTR_M         = $AF0972
=$af0973				SP46_ADDY_PTR_H         = $AF0973
=$af0974				SP46_X_POS_L            = $AF0974
=$af0975				SP46_X_POS_H            = $AF0975
=$af0976				SP46_Y_POS_L            = $AF0976
=$af0977				SP46_Y_POS_H            = $AF0977
=$af0978				SP47_CONTROL_REG        = $AF0978
=$af0979				SP47_ADDY_PTR_L         = $AF0979
=$af097a				SP47_ADDY_PTR_M         = $AF097A
=$af097b				SP47_ADDY_PTR_H         = $AF097B
=$af097c				SP47_X_POS_L            = $AF097C
=$af097d				SP47_X_POS_H            = $AF097D
=$af097e				SP47_Y_POS_L            = $AF097E
=$af097f				SP47_Y_POS_H            = $AF097F
=$af0980				SP48_CONTROL_REG        = $AF0980
=$af0981				SP48_ADDY_PTR_L         = $AF0981
=$af0982				SP48_ADDY_PTR_M         = $AF0982
=$af0983				SP48_ADDY_PTR_H         = $AF0983
=$af0984				SP48_X_POS_L            = $AF0984
=$af0985				SP48_X_POS_H            = $AF0985
=$af0986				SP48_Y_POS_L            = $AF0986
=$af0987				SP48_Y_POS_H            = $AF0987
=$af0988				SP49_CONTROL_REG        = $AF0988
=$af0989				SP49_ADDY_PTR_L         = $AF0989
=$af098a				SP49_ADDY_PTR_M         = $AF098A
=$af098b				SP49_ADDY_PTR_H         = $AF098B
=$af098c				SP49_X_POS_L            = $AF098C
=$af098d				SP49_X_POS_H            = $AF098D
=$af098e				SP49_Y_POS_L            = $AF098E
=$af098f				SP49_Y_POS_H            = $AF098F
=$af0990				SP50_CONTROL_REG        = $AF0990
=$af0991				SP50_ADDY_PTR_L         = $AF0991
=$af0992				SP50_ADDY_PTR_M         = $AF0992
=$af0993				SP50_ADDY_PTR_H         = $AF0993
=$af0994				SP50_X_POS_L            = $AF0994
=$af0995				SP50_X_POS_H            = $AF0995
=$af0996				SP50_Y_POS_L            = $AF0996
=$af0997				SP50_Y_POS_H            = $AF0997
=$af0998				SP51_CONTROL_REG        = $AF0998
=$af0999				SP51_ADDY_PTR_L         = $AF0999
=$af099a				SP51_ADDY_PTR_M         = $AF099A
=$af099b				SP51_ADDY_PTR_H         = $AF099B
=$af099c				SP51_X_POS_L            = $AF099C
=$af099d				SP51_X_POS_H            = $AF099D
=$af099e				SP51_Y_POS_L            = $AF099E
=$af099f				SP51_Y_POS_H            = $AF099F
=$af09a0				SP52_CONTROL_REG        = $AF09A0
=$af09a1				SP52_ADDY_PTR_L         = $AF09A1
=$af09a2				SP52_ADDY_PTR_M         = $AF09A2
=$af09a3				SP52_ADDY_PTR_H         = $AF09A3
=$af09a4				SP52_X_POS_L            = $AF09A4
=$af09a5				SP52_X_POS_H            = $AF09A5
=$af09a6				SP52_Y_POS_L            = $AF09A6
=$af09a7				SP52_Y_POS_H            = $AF09A7
=$af09a8				SP53_CONTROL_REG        = $AF09A8
=$af09a9				SP53_ADDY_PTR_L         = $AF09A9
=$af09aa				SP53_ADDY_PTR_M         = $AF09AA
=$af09ab				SP53_ADDY_PTR_H         = $AF09AB
=$af09ac				SP53_X_POS_L            = $AF09AC
=$af09ad				SP53_X_POS_H            = $AF09AD
=$af09ae				SP53_Y_POS_L            = $AF09AE
=$af09af				SP53_Y_POS_H            = $AF09AF
=$af09b0				SP54_CONTROL_REG        = $AF09B0
=$af09b1				SP54_ADDY_PTR_L         = $AF09B1
=$af09b2				SP54_ADDY_PTR_M         = $AF09B2
=$af09b3				SP54_ADDY_PTR_H         = $AF09B3
=$af09b4				SP54_X_POS_L            = $AF09B4
=$af09b5				SP54_X_POS_H            = $AF09B5
=$af09b6				SP54_Y_POS_L            = $AF09B6
=$af09b7				SP54_Y_POS_H            = $AF09B7
=$af09b8				SP55_CONTROL_REG        = $AF09B8
=$af09b9				SP55_ADDY_PTR_L         = $AF09B9
=$af09ba				SP55_ADDY_PTR_M         = $AF09BA
=$af09bb				SP55_ADDY_PTR_H         = $AF09BB
=$af09bc				SP55_X_POS_L            = $AF09BC
=$af09bd				SP55_X_POS_H            = $AF09BD
=$af09be				SP55_Y_POS_L            = $AF09BE
=$af09bf				SP55_Y_POS_H            = $AF09BF
=$af09c0				SP56_CONTROL_REG        = $AF09C0
=$af09c1				SP56_ADDY_PTR_L         = $AF09C1
=$af09c2				SP56_ADDY_PTR_M         = $AF09C2
=$af09c3				SP56_ADDY_PTR_H         = $AF09C3
=$af09c4				SP56_X_POS_L            = $AF09C4
=$af09c5				SP56_X_POS_H            = $AF09C5
=$af09c6				SP56_Y_POS_L            = $AF09C6
=$af09c7				SP56_Y_POS_H            = $AF09C7
=$af09c8				SP57_CONTROL_REG        = $AF09C8
=$af09c9				SP57_ADDY_PTR_L         = $AF09C9
=$af09ca				SP57_ADDY_PTR_M         = $AF09CA
=$af09cb				SP57_ADDY_PTR_H         = $AF09CB
=$af09cc				SP57_X_POS_L            = $AF09CC
=$af09cd				SP57_X_POS_H            = $AF09CD
=$af09ce				SP57_Y_POS_L            = $AF09CE
=$af09cf				SP57_Y_POS_H            = $AF09CF
=$af09d0				SP58_CONTROL_REG        = $AF09D0
=$af09d1				SP58_ADDY_PTR_L         = $AF09D1
=$af09d2				SP58_ADDY_PTR_M         = $AF09D2
=$af09d3				SP58_ADDY_PTR_H         = $AF09D3
=$af09d4				SP58_X_POS_L            = $AF09D4
=$af09d5				SP58_X_POS_H            = $AF09D5
=$af09d6				SP58_Y_POS_L            = $AF09D6
=$af09d7				SP58_Y_POS_H            = $AF09D7
=$af09d8				SP59_CONTROL_REG        = $AF09D8
=$af09d9				SP59_ADDY_PTR_L         = $AF09D9
=$af09da				SP59_ADDY_PTR_M         = $AF09DA
=$af09db				SP59_ADDY_PTR_H         = $AF09DB
=$af09dc				SP59_X_POS_L            = $AF09DC
=$af09dd				SP59_X_POS_H            = $AF09DD
=$af09de				SP59_Y_POS_L            = $AF09DE
=$af09df				SP59_Y_POS_H            = $AF09DF
=$af09e0				SP60_CONTROL_REG        = $AF09E0
=$af09e1				SP60_ADDY_PTR_L         = $AF09E1
=$af09e2				SP60_ADDY_PTR_M         = $AF09E2
=$af09e3				SP60_ADDY_PTR_H         = $AF09E3
=$af09e4				SP60_X_POS_L            = $AF09E4
=$af09e5				SP60_X_POS_H            = $AF09E5
=$af09e6				SP60_Y_POS_L            = $AF09E6
=$af09e7				SP60_Y_POS_H            = $AF09E7
=$af09e8				SP61_CONTROL_REG        = $AF09E8
=$af09e9				SP61_ADDY_PTR_L         = $AF09E9
=$af09ea				SP61_ADDY_PTR_M         = $AF09EA
=$af09eb				SP61_ADDY_PTR_H         = $AF09EB
=$af09ec				SP61_X_POS_L            = $AF09EC
=$af09ed				SP61_X_POS_H            = $AF09ED
=$af09ee				SP61_Y_POS_L            = $AF09EE
=$af09ef				SP61_Y_POS_H            = $AF09EF
=$af09f0				SP62_CONTROL_REG        = $AF09F0
=$af09f1				SP62_ADDY_PTR_L         = $AF09F1
=$af09f2				SP62_ADDY_PTR_M         = $AF09F2
=$af09f3				SP62_ADDY_PTR_H         = $AF09F3
=$af09f4				SP62_X_POS_L            = $AF09F4
=$af09f5				SP62_X_POS_H            = $AF09F5
=$af09f6				SP62_Y_POS_L            = $AF09F6
=$af09f7				SP62_Y_POS_H            = $AF09F7
=$af09f8				SP63_CONTROL_REG        = $AF09F8
=$af09f9				SP63_ADDY_PTR_L         = $AF09F9
=$af09fa				SP63_ADDY_PTR_M         = $AF09FA
=$af09fb				SP63_ADDY_PTR_H         = $AF09FB
=$af09fc				SP63_X_POS_L            = $AF09FC
=$af09fd				SP63_X_POS_H            = $AF09FD
=$af09fe				SP63_Y_POS_L            = $AF09FE
=$af09ff				SP63_Y_POS_H            = $AF09FF

;******  Return to file: src\vicky_ii_def.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\super_io_def.asm

=$af1100				PME_STS_REG     = $AF1100
=$af1102				PME_EN_REG		  = $AF1102
=$af1104				PME_STS1_REG		= $AF1104
=$af1105				PME_STS2_REG		= $AF1105
=$af1106				PME_STS3_REG		= $AF1106
=$af1107				PME_STS4_REG		= $AF1107
=$af1108				PME_STS5_REG		= $AF1108
=$af110a				PME_EN1_REG     = $AF110A
=$af110b				PME_EN2_REG     = $AF110B
=$af110c				PME_EN3_REG     = $AF110C
=$af110d				PME_EN4_REG     = $AF110D
=$af110e				PME_EN5_REG     = $AF110E
=$af1110				SMI_STS1_REG		= $AF1110
=$af1111				SMI_STS2_REG		= $AF1111
=$af1112				SMI_STS3_REG		= $AF1112
=$af1113				SMI_STS4_REG		= $AF1113
=$af1114				SMI_STS5_REG		= $AF1114
=$af1116				SMI_EN1_REG     = $AF1116
=$af1117				SMI_EN2_REG     = $AF1117
=$af1118				SMI_EN3_REG     = $AF1118
=$af1119				SMI_EN4_REG     = $AF1119
=$af111a				SMI_EN5_REG     = $AF111A
=$af111c				MSC_ST_REG      = $AF111C
=$af111e				FORCE_DISK_CHANGE       = $AF111E
=$af111f				FLOPPY_DATA_RATE        = $AF111F
=$af1120				UART1_FIFO_CTRL_SHDW    = $AF1120
=$af1121				UART2_FIFO_CTRL_SHDW    = $AF1121
=$af1122				DEV_DISABLE_REG         = $AF1122
=$af1123				GP10_REG    		= $AF1123
=$af1124				GP11_REG    		= $AF1124
=$af1125				GP12_REG    		= $AF1125
=$af1126				GP13_REG    		= $AF1126
=$af1127				GP14_REG    		= $AF1127
=$af1128				GP15_REG    		= $AF1128
=$af1129				GP16_REG    		= $AF1129
=$af112a				GP17_REG    		= $AF112A
=$af112b				GP20_REG    		= $AF112B
=$af112c				GP21_REG    		= $AF112C
=$af112d				GP22_REG		= $AF112D
=$af112f				GP24_REG		= $AF112F
=$af1130				GP25_REG		= $AF1130
=$af1131				GP26_REG		= $AF1131
=$af1132				GP27_REG		= $AF1132
=$af1133				GP30_REG		= $AF1133
=$af1134				GP31_REG		= $AF1134
=$af1135				GP32_REG		= $AF1135
=$af1136				GP33_REG		= $AF1136
=$af1137				GP34_REG		= $AF1137
=$af1138				GP35_REG		= $AF1138
=$af1139				GP36_REG		= $AF1139
=$af113a				GP37_REG		= $AF113A
=$af113b				GP40_REG		= $AF113B
=$af113c				GP41_REG		= $AF113C
=$af113d				GP42_REG		= $AF113D
=$af113e				GP43_REG		= $AF113E
=$af113f				GP50_REG		= $AF113F
=$af1140				GP51_REG		= $AF1140
=$af1141				GP52_REG		= $AF1141
=$af1142				GP53_REG		= $AF1142
=$af1143				GP54_REG		= $AF1143
=$af1144				GP55_REG		= $AF1144
=$af1145				GP56_REG		= $AF1145
=$af1146				GP57_REG		= $AF1146
=$af1147				GP60_REG		= $AF1147
=$af1148				GP61_REG		= $AF1148
=$af114b				GP1_REG			= $AF114B
=$af114c				GP2_REG			= $AF114C
=$af114d				GP3_REG			= $AF114D
=$af114e				GP4_REG			= $AF114E
=$af114f				GP5_REG			= $AF114F
=$af1150				GP6_REG			= $AF1150
=$af1156				FAN1_REG		        = $AF1156
=$af1157				FAN2_REG            = $AF1157
=$af1158				FAN_CTRL_REG  	    = $AF1158
=$af1159				FAN1_TACH_REG       = $AF1159
=$af115a				FAN2_TACH_REG       = $AF115A
=$af115b				FAN1_PRELOAD_REG    = $AF115B
=$af115c				FAN2_PRELOAD_REG    = $AF115C
=$af115d				LED1_REG    		    = $AF115D
=$af115e				LED2_REG    		    = $AF115E
=$af115f				KEYBOARD_SCAN_CODE	= $AF115F

;******  Return to file: src\kernel.asm


;******  Processing file: src\keyboard_def.asm

=$af1064				STATUS_PORT 	= $AF1064
=$af1060				KBD_OUT_BUF 	= $AF1060
=$af1060				KBD_INPT_BUF	= $AF1060
=$af1064				KBD_CMD_BUF		= $AF1064
=$af1060				KBD_DATA_BUF	= $AF1060
=$af1060				PORT_A		    = $AF1060
=$af1061				PORT_B			= $AF1061
=$01					OUT_BUF_FULL    = $01
=$02					INPT_BUF_FULL	= $02
=$04					SYS_FLAG		= $04
=$08					CMD_DATA		= $08
=$10					KEYBD_INH       = $10
=$20					TRANS_TMOUT	    = $20
=$40					RCV_TMOUT		= $40
=$80					PARITY_EVEN		= $80
=$10					INH_KEYBOARD	= $10
=$ae					KBD_ENA			= $AE
=$ad					KBD_DIS			= $AD
=$f1					KB_MENU			= $F1
=$f4					KB_ENABLE		= $F4
=$f7					KB_MAKEBREAK    = $F7
=$fe					KB_ECHO			= $FE
=$ff					KB_RESET		= $FF
=$ed					KB_LED_CMD		= $ED
=$aa					KB_OK			= $AA
=$fa					KB_ACK			= $FA
=$ff					KB_OVERRUN		= $FF
=$fe					KB_RESEND		= $FE
=$f0					KB_BREAK		= $F0
=$10					KB_FA			= $10
=$20					KB_FE			= $20
=$40					KB_PR_LED		= $40
=$01					KB_SCROLL_LOCK  = $01
=$02					KB_NUM_LOCK     = $02
=$04					KB_CAPS_LOCK    = $04
=$80					KB_CTRL_C = $80             ; CTRL-C was pressed
=$60					KB_CREDITS = $60            ; Credits key was pressed

;******  Return to file: src\kernel.asm


;******  Processing file: src\SID_def.asm

=$afe400				SID0_V1_FREQ_LO    = $AFE400 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$afe401				SID0_V1_FREQ_HI    = $AFE401 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$afe402				SID0_V1_PW_LO      = $AFE402 ;SID - L - Voice 1 (Write Only) - PW LOW
=$afe403				SID0_V1_PW_HI      = $AFE403 ;SID - L - Voice 1 (Write Only) - PW HI
=$afe404				SID0_V1_CTRL       = $AFE404 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$afe405				SID0_V1_ATCK_DECY  = $AFE405 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$afe406				SID0_V1_SSTN_RLSE  = $AFE406 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$afe407				SID0_V2_FREQ_LO    = $AFE407 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$afe408				SID0_V2_FREQ_HI    = $AFE408 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$afe409				SID0_V2_PW_LO      = $AFE409 ;SID - L - Voice 2 (Write Only) - PW LOW
=$afe40a				SID0_V2_PW_HI      = $AFE40A ;SID - L - Voice 2 (Write Only) - PW HI
=$afe40b				SID0_V2_CTRL       = $AFE40B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$afe40c				SID0_V2_ATCK_DECY  = $AFE40C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$afe40d				SID0_V2_SSTN_RLSE  = $AFE40D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$afe40e				SID0_V3_FREQ_LO    = $AFE40E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$afe40f				SID0_V3_FREQ_HI    = $AFE40F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$afe410				SID0_V3_PW_LO      = $AFE410 ;SID - L - Voice 3 (Write Only) - PW LOW
=$afe411				SID0_V3_PW_HI      = $AFE411 ;SID - L - Voice 3 (Write Only) - PW HI
=$afe412				SID0_V3_CTRL       = $AFE412 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$afe413				SID0_V3_ATCK_DECY  = $AFE413 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$afe414				SID0_V3_SSTN_RLSE  = $AFE414 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$afe415				SID0_FC_LO         = $AFE415 ;SID - L - Filter (Write Only) - FC LOW
=$afe416				SID0_FC_HI         = $AFE416 ;SID - L - Filter (Write Only) - FC HI
=$afe417				SID0_RES_FILT      = $AFE417 ;SID - L - Filter (Write Only) - RES / FILT
=$afe418				SID0_MODE_VOL      = $AFE418 ;SID - L - Filter (Write Only) - MODE / VOL
=$afe419				SID0_POT_X         = $AFE419 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$afe41a				SID0_POT_Y         = $AFE41A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$afe41b				SID0_OSC3_RND      = $AFE41B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$afe41c				SID0_ENV3          = $AFE41C ;SID - L - Misc (Read Only)  - ENV3
=$afe41d				SID0_NOT_USED0     = $AFE41D ;SID - L - NOT USED
=$afe41e				SID0_NOT_USED1     = $AFE41E ;SID - L - NOT USED
=$afe41f				SID0_NOT_USED2     = $AFE41F ;SID - L - NOT USED

;******  Return to file: src\kernel.asm


;******  Processing file: src\RTC_def.asm

=$af0800				RTC_SEC       = $AF0800 ;Seconds Register
=$af0801				RTC_SEC_ALARM = $AF0801 ;Seconds Alarm Register
=$af0802				RTC_MIN       = $AF0802 ;Minutes Register
=$af0803				RTC_MIN_ALARM = $AF0803 ;Minutes Alarm Register
=$af0804				RTC_HRS       = $AF0804 ;Hours Register
=$af0805				RTC_HRS_ALARM = $AF0805 ;Hours Alarm Register
=$af0806				RTC_DAY       = $AF0806 ;Day Register
=$af0807				RTC_DAY_ALARM = $AF0807 ;Day Alarm Register
=$af0808				RTC_DOW       = $AF0808 ;Day of Week Register
=$af0809				RTC_MONTH     = $AF0809 ;Month Register
=$af080a				RTC_YEAR      = $AF080A ;Year Register
=$af080b				RTC_RATES     = $AF080B ;Rates Register
=$af080c				RTC_ENABLE    = $AF080C ;Enables Register
=$af080d				RTC_FLAGS     = $AF080D ;Flags Register
=$af080e				RTC_CTRL      = $AF080E ;Control Register
=$af080f				RTC_CENTURY   = $AF080F ;Century Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\io_def.asm

=0					CHAN_CONSOLE  = 0           ; ID for screen and keyboard access
=1					CHAN_COM1     = 1           ; ID for serial access on COM1 (external port)
=2					CHAN_COM2     = 2           ; ID for serial access on COM2 (internal port)
=3					CHAN_LPT      = 3           ; ID for parallel port
=$afe810				SDCARD_DATA   = $AFE810     ;(R/W) SDCARD (CH376S) Data PORT_A (A0 = 0)
=$afe811				SDCARD_CMD    = $AFE811     ;(R/W) SDCARD (CH376S) CMD/STATUS Port (A0 = 1)
=$afe812				SDCARD_STAT   = $AFE812     ;(R) SDCARD (Bit[0] = CD, Bit[1] = WP)
=$afe900				CODEC_DATA_LO = $AFE900     ;(W) LSB of Add/Data Reg to Control CODEC See WM8776 Spec
=$afe901				CODEC_DATA_HI = $AFE901     ;(W) MSB od Add/Data Reg to Control CODEC See WM8776 Spec
=$afe902				CODEC_WR_CTRL = $AFE902     ;(W) Bit[0] = 1 -> Start Writing the CODEC Control Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\Trinity_CFP9301_def.asm

=$afe800				JOYSTICK0           = $AFE800   ;(R) Joystick 0 - J7 (next to SD Card)
=$afe801				JOYSTICK1           = $AFE801   ;(R) Joystick 1 - J8
=$afe802				JOYSTICK2           = $AFE802   ;(R) Joystick 2 - J9
=$afe803				JOYSTICK3           = $AFE803   ;(R) Joystick 3 - J10 (Next to Buzzer)
=$afe804				JOYSTICK_MODE       = $AFE804
=$01					NES_SNES_EN0        = $01       ; Enable the NES/SNES Mode on Port 0
=$02					NES_SNES_EN1        = $02       ; Enable the NES/SNES Mode on Port 1
=$04					NES_SNES_JOY        = $04       ; 0 = NES, 1 = SNES
=$40					NES_SNES_DONE       = $40       ; Poll to see if the Deserializer is done
=$80					NES_SNES_TRIG       = $80       ; Set to start the Serializer
=$afe805				REVOFPCB_C          = $AFE805   ; You should read the ASCCII for "C"
=$afe806				REVOFPCB_4          = $AFE806   ; You should read the ASCCII for "4"
=$afe807				REVOFPCB_A          = $AFE807   ; You should read the ASCCII for "A"
=$afe808				NES_SNES0_DAT_LO    = $AFE808   ; Contains the 8bits From NES and SNES
=$afe809				SNES0_DAT_HI0       = $AFE809   ; Contains the extra 4 bit from the SNES Controller
=$afe80a				NES_SNES1_DAT_LO    = $AFE80A
=$afe80b				SNES1_DAT_HI0       = $AFE80B
=$afe80c				CFP9301_REV         = $AFE80C   ; Hardware Revision of the CPLD Code
=$afe80d				DIP_USER            = $AFE80D   ; Dip Switch 3/4/5 can be user Defined
=$afe80e				DIP_BOOTMODE        = $AFE80E
=$01					BOOT_MODE0          = $01
=$02					BOOT_MODE1          = $02
=$80					HD_INSTALLED        = $80
=$00					DIP_BOOT_IDE        = $00
=$01					DIP_BOOT_SDCARD     = $01
=$02					DIP_BOOT_FLOPPY     = $02
=$03					DIP_BOOT_BASIC      = $03

;******  Return to file: src\kernel.asm


;******  Processing file: src\Unity_CFP9307_def.asm

=$afe830				IDE_DATA      = $AFE830 ; 8-Bit Access here Only
=$afe831				IDE_ERROR     = $AFE831 ; Error Information register (only read when there is an error ) - Probably clears Error Bits
=$afe832				IDE_SECT_CNT  = $AFE832 ; Sector Count Register (also used to pass parameter for timeout for IDLE modus Command)
=$afe833				IDE_SECT_SRT  = $AFE833 ; Start Sector Register (0 = 256), so start @ 1
=$afe834				IDE_CLDR_LO   = $AFE834 ; Low Byte of Cylinder Numnber {7:0}
=$afe835				IDE_CLDR_HI   = $AFE835 ;  Hi Byte of Cylinder Number {9:8} (1023-0).
=$afe836				IDE_HEAD      = $AFE836 ; Head, device select, {3:0} HEad Number, 4 -> 0:Master, 1:Slave, {7:5} = 101 (legacy);
=$afe837				IDE_CMD_STAT  = $AFE837 ; Command/Status Register - Reading this will clear the Interrupt Registers
=$afe838				IDE_DATA_LO   = $AFE838 ; 16-bit access here
=$afe839				IDE_DATA_HI   = $AFE839 ;
=$01					IDE_ERR_AMNF = $01      ; Error: Address mark not found
=$02					IDE_ERR_TKZNF = $02     ; Error: Track 0 not found
=$04					IDE_ERR_ABRT = $04      ; Error: Aborted command
=$08					IDE_ERR_MCR = $08       ; Error: Media change request
=$10					IDE_ERR_IDNF = $10      ; Error: ID not found
=$20					IDE_ERR_MC = $20        ; Error: Media change
=$40					IDE_ERR_UNC = $40       ; Error: Uncorrectable data error
=$80					IDE_ERR_BBK = $80       ; Error: Bad block detected
=$80					IDE_STAT_BSY = $80      ; BSY (Busy) is set whenever the device has control of the command Block Registers.
=$40					IDE_STAT_DRDY = $40     ; DRDY (Device Ready) is set to indicate that the device is capable of accepting all command codes.
=$20					IDE_STAT_DF = $20       ; DF (Device Fault) indicates a device fault error has been detected.
=$10					IDE_STAT_DSC = $10      ; DSC (Device Seek Complete) indicates that the device heads are settled over a track.
=$08					IDE_STAT_DRQ = $08      ; DRQ (Data Request) indicates that the device is ready to transfer a word or byte of data between
=$04					IDE_STAT_CORR = $04     ; CORR (Corrected Data) is used to indicate a correctable data error.
=$02					IDE_STAT_IDX = $02      ; Vendor specific bit
=$01					IDE_STAT_ERR = $01      ; ERR (Error) indicates that an error occurred during execution of the previous command.
=$ec					IDE_CMD_IDENTIFY = $EC      ; Get device identification data
=$21					IDE_CMD_READ_SECTOR = $21   ; Read 1 or more sectors
=$30					IDE_CMD_WRITE_SECTOR = $30  ; Write 1 or more sectors

;******  Return to file: src\kernel.asm


;******  Processing file: src\GABE_Control_Registers_def.asm

=$afe880				GABE_MSTR_CTRL      = $AFE880
=$01					GABE_CTRL_PWR_LED   = $01     ; Controls the LED in the Front of the case (Next to the reset button)
=$02					GABE_CTRL_SDC_LED   = $02     ; Controls the LED in the Front of the Case (Next to SDCard)
=$10					GABE_CTRL_BUZZER    = $10     ; Controls the Buzzer
=$80					GABE_CTRL_WRM_RST   = $80     ; Warm Reset (needs to Setup other registers)
=$afe881				GABE_NOTUSED        = $AFE881 ; Reserved for future use
=$afe882				GABE_RST_AUTH0      = $AFE882 ; Must Contain the BYTE $AD for Reset to Activate
=$afe883				GABE_RST_AUTH1      = $AFE883 ; Must Contain the BYTE $DE for Reset to Activate
=$afe884				GABE_RNG_DAT_LO     = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885				GABE_RNG_DAT_HI     = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe884				GABE_RNG_SEED_LO    = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885				GABE_RNG_SEED_HI    = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe886				GABE_RNG_STAT       = $AFE886 ;
=$80					GABE_RNG_LFSR_DONE  = $80     ; indicates that Output = SEED Database
=$afe886				GABE_RNG_CTRL       = $AFE886 ;
=$01					GABE_RNG_CTRL_EN    = $01     ; Enable the LFSR BLOCK_LEN
=$02					GABE_RNG_CTRL_DV    = $02     ; After Setting the Seed Value, Toggle that Bit for it be registered
=$afe887				GABE_SYS_STAT       = $AFE887 ;
=$01					GABE_SYS_STAT_MID0  = $01     ; Machine ID -- LSB
=$02					GABE_SYS_STAT_MID1  = $02     ; Machine ID -- MSB
=$08					GABE_SYS_STAT_EXP   = $08     ; if Zero, there is an Expansion Card Preset
=$40					GABE_SYS_STAT_CPUA  = $40     ; Indicates the (8bit/16bit) Size of the Accumulator
=$80					GABE_SYS_STAT_CPUX  = $80     ; Indicates the (8bit/16bit) Size of the Accumulator

;******  Return to file: src\kernel.asm


;******  Processing file: src\fdc_inc.asm

=$af13f0				SIO_FDC  = $AF13F0
=$af13f0				SIO_FDC_SRA = $AF13F0 ; Read Only - Status Register A (not used in AT mode)
=$af13f1				SIO_FDC_SRB = $AF13F1 ; Read Only - Status Register B (not used in AT mode)
=$af13f2				SIO_FDC_DOR = $AF13F2 ; Read/Write - Digital Output Register
=$01					FDC_DOR_DSEL0 = $01     ; Drive 0 Select
=$02					FDC_DOR_DSEL1 = $02     ; Drive 1 Select
=$04					FDC_DOR_NRESET = $04    ; Reset the FDC
=$08					FDC_DOR_DMAEN = $08     ; Enable DMA
=$10					FDC_DOR_MOT0  = $10     ; Turn on motor 0
=$20					FDC_DOR_MOT1  = $20     ; Turn on motor 1
=$40					FDC_DOR_MOT2  = $40     ; Turn on motor 2
=$80					FDC_DOR_MOT3  = $80     ; Turn on motor 3
=$af13f3				SIO_FDC_TSR = $AF13F3   ; Read/Write - Tape Drive Status (not used on the C256)
=$af13f4				SIO_FDC_MSR = $AF13F4   ; Read - Main Status Register
=$01					FDC_MSR_DRV0BSY = $01   ; Indicates if drive 0 is busy
=$02					FDC_MSR_DRV1BSY = $02   ; Indicates if drive 1 is busy
=$10					FDC_MSR_CMDBSY = $10    ; Indicates if a command is in progress
=$20					FDC_MSR_NONDMA = $20    ;
=$40					FDC_MSR_DIO = $40       ; Data direction: 1 = read, 0 = write
=$80					FDC_MSR_RQM = $80       ; 1 = host can transfer data, 0 = host must wait
=$af13f4				SIO_FDC_DSR = $AF13F4   ; Write - Data Select Register
=$40					FDC_DSR_LOPWR = $40     ; Turn on low power mode
=$80					FDC_DSR_RESET = $80     ; Software reset of the FDC
=$af13f5				SIO_FDC_DTA = $AF13F5   ; Read/Write - Data - FIFO
=$af13f6				SIO_FDC_RSV = $AF13F6   ; Reserved
=$af13f7				SIO_FDC_DIR = $AF13F7   ; Read - Digital Input Register
=$80					FDC_DIR_DSKCHG = $80    ; Indicates if the disk has changed
=$af13f7				SIO_FDC_CCR = $AF13F7   ; Write - Configuration Control Register
=$03					FDC_ST0_DRVSEL = $03    ; Mask for the current selected drive
=$04					FDC_ST0_HEAD = $04      ; Bit for the current selected head
=$08					FDC_ST0_EC = $08        ; Bit for EQUIPMENT CHECK, error in recalibrate or relative seek
=$10					FDC_ST0_SEEKEND = $10   ; The FDC completed a seek, relative seek, or recalibrate
=$c0					FDC_ST0_INTCODE = $C0   ; Mask for interrupt code:
=$01					FDC_ST1_MA = $01        ; Missing address mark
=$02					FDC_ST1_NW = $02        ; Not writable (disk is write protected)
=$04					FDC_ST1_ND = $04        ; No data
=$10					FDC_ST1_OR = $10        ; Overrun/underrun of the data
=$20					FDC_ST1_DE = $20        ; Data error... a CRC check failed
=$80					FDC_ST1_EN = $80        ; End of cylinder: tried to acess a sector not on the track
=$01					FDC_ST2_MD = $01        ; Missing address mark: FDC cannot detect a data address mark
=$02					FDC_ST2_BC = $02        ; Bad cylinder
=$10					FDC_ST2_WC = $10        ; Wrong cylinder: track is not the same as expected
=$20					FDC_ST2_DD = $20        ; Data error in field: CRC error
=$40					FDC_ST2_CM = $40        ; Control mark
=$03					FDC_ST3_DRVSEL = $03    ; Drive select mask
=$04					FDC_ST3_HEAD = $04      ; Head address bit
=$10					FDC_ST3_TRACK0 = $10    ; Track 0: Status of the TRK0 pin
=$40					FDC_ST3_WP = $40        ; Write Protect: status of the WP pin
=2					FDC_CMD_READ_TRACK          = 2
=3					FDC_CMD_SPECIFY             = 3
=4					FDC_CMD_SENSE_DRIVE_STATUS  = 4
=5					FDC_CMD_WRITE_DATA          = 5
=6					FDC_CMD_READ_DATA           = 6
=7					FDC_CMD_RECALIBRATE         = 7
=8					FDC_CMD_SENSE_INTERRUPT     = 8
=9					FDC_CMD_WRITE_DELETED_DATA  = 9
=10					FDC_CMD_READ_ID             = 10
=12					FDC_CMD_READ_DELETED_DATA   = 12
=13					FDC_CMD_FORMAT_TRACK        = 13
=14					FDC_CMD_DUMPREG             = 14
=15					FDC_CMD_SEEK                = 15
=16					FDC_CMD_VERSION             = 16
=17					FDC_CMD_SCAN_EQUAL          = 17
=18					FDC_CMD_PERPENDICULAR_MODE  = 18
=19					FDC_CMD_CONFIGURE           = 19
=20					FDC_CMD_LOCK                = 20
=22					FDC_CMD_VERIFY              = 22
=25					FDC_CMD_SCAN_LOW_OR_EQUAL   = 25
=29					FDC_CMD_SCAN_HIGH_OR_EQUAL  = 29
=$80					FDC_CMD_MT = $80                    ; Command bit to turn on multi-track
=$40					FDC_CMD_MFM = $40                   ; Command bit to operate in MFM format
=$20					FDC_CMD_SK = $20                    ; Command bit to skip deleted sectors
=$40					FDC_CMD_EIS = $40                   ; Command bit to turn on implied seek
=1					FDC_DEVCMD_MOTOR_ON         = 1     ; Device code to turn the motor on
=2					FDC_DEVCMD_MOTOR_OFF        = 2     ; Device code to turn the motor off
=3					FDC_DEVCMD_RECAL            = 3     ; Device code to recalibrate the drive

;******  Return to file: src\kernel.asm


;******  Processing file: src\timer_def.asm

=$000160				TIMER0_CTRL_REG   = $000160 ; (Write - Control, Read Status)
=$01					TMR0_EN     = $01
=$02					TMR0_SCLR   = $02
=$04					TMR0_SLOAD  = $04 ; Use SLOAD is
=$08					TMR0_UPDWN  = $08
=$000161				TIMER0_CHARGE_L   = $000161 ; Use if you want to Precharge and countdown
=$000162				TIMER0_CHARGE_M   = $000162 ;
=$000163				TIMER0_CHARGE_H   = $000163 ;
=$000164				TIMER0_CMP_REG    = $000164 ;
=$01					TMR0_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02					TMR0_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$000165				TIMER0_CMP_L      = $000165 ; Load this Value for Countup
=$000166				TIMER0_CMP_M      = $000166 ;
=$000167				TIMER0_CMP_H      = $000167 ;
=$000168				TIMER1_CTRL_REG   = $000168 ;
=$01					TMR1_EN     = $01
=$02					TMR1_SCLR   = $02
=$04					TMR1_SLOAD  = $04
=$08					TMR1_UPDWN  = $08 ; 1 = Up, 0 = Down
=$000169				TIMER1_CHARGE_L   = $000169 ; Use if you want to Precharge and countdown
=$00016a				TIMER1_CHARGE_M   = $00016A ;
=$00016b				TIMER1_CHARGE_H   = $00016B ;
=$00016c				TIMER1_CMP_REG    = $00016C ;
=$01					TMR1_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02					TMR1_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$00016d				TIMER1_CMP_L      = $00016D ;
=$00016e				TIMER1_CMP_M      = $00016E ;
=$00016f				TIMER1_CMP_H      = $00016F ;

;******  Return to file: src\kernel.asm


;******  Processing file: src\basic_inc.asm

=$3a0000				BASIC = $3A0000
=3801092				MONITOR = BASIC + 4

;******  Return to file: src\kernel.asm


;******  Processing file: src\kernel_jumptable.asm

.381000	5c 00 04 39	jmp $390400	BOOT            JML IBOOT
.381004	5c b9 15 39	jmp $3915b9	RESTORE         JML IRESTORE
.381008	5c 18 06 39	jmp $390618	BREAK           JML IBREAK
.38100c	5c 5f 06 39	jmp $39065f	READY           JML IREADY
.381010	5c ba 15 39	jmp $3915ba	SCINIT          JML ISCINIT
.381014	5c bb 15 39	jmp $3915bb	IOINIT          JML IIOINIT
.381018	5c dc 06 39	jmp $3906dc	PUTC            JML IPUTC
.38101c	5c c5 06 39	jmp $3906c5	PUTS            JML IPUTS
.381020	5c 0d 08 39	jmp $39080d	PUTB            JML IPUTB
.381024	5c 8f 40 39	jmp $39408f	PUTBLOCK        JML IPUTBLOCK
.381028	5c bc 15 39	jmp $3915bc	SETLFS          JML ISETLFS
.38102c	5c bd 15 39	jmp $3915bd	SETNAM          JML ISETNAM
.381030	5c be 15 39	jmp $3915be	OPEN            JML IOPEN
.381034	5c bf 15 39	jmp $3915bf	CLOSE           JML ICLOSE
.381038	5c 7a 06 39	jmp $39067a	SETIN           JML ISETIN
.38103c	5c 83 06 39	jmp $390683	SETOUT          JML ISETOUT
.381040	5c c0 15 39	jmp $3915c0	GETB            JML IGETB
.381044	5c 3c 40 39	jmp $39403c	GETBLOCK        JML IGETBLOCK
.381048	5c c1 15 39	jmp $3915c1	GETCH           JML IGETCH
.38104c	5c 95 06 39	jmp $390695	GETCHW          JML IGETCHW
.381050	5c 8c 06 39	jmp $39068c	GETCHE          JML IGETCHE
.381054	5c c2 15 39	jmp $3915c2	GETS            JML IGETS
.381058	5c c3 15 39	jmp $3915c3	GETLINE         JML IGETLINE
.38105c	5c c4 15 39	jmp $3915c4	GETFIELD        JML IGETFIELD
.381060	5c c5 15 39	jmp $3915c5	TRIM            JML ITRIM
.381064	5c c6 15 39	jmp $3915c6	PRINTC          JML IPRINTC
.381068	5c c7 15 39	jmp $3915c7	PRINTS          JML IPRINTS
.38106c	5c 0e 08 39	jmp $39080e	PRINTCR         JML IPRINTCR
.381070	5c c8 15 39	jmp $3915c8	PRINTF          JML IPRINTF
.381074	5c c9 15 39	jmp $3915c9	PRINTI          JML IPRINTI
.381078	5c ce 09 39	jmp $3909ce	PRINTH          JML IPRINTH
.38107c	5c ca 15 39	jmp $3915ca	PRINTAI         JML IPRINTAI
.381080	5c eb 09 39	jmp $3909eb	PRINTAH         JML IPRINTAH
.381084	5c 12 09 39	jmp $390912	LOCATE          JML ILOCATE
.381088	5c cb 15 39	jmp $3915cb	PUSHKEY         JML IPUSHKEY
.38108c	5c cc 15 39	jmp $3915cc	PUSHKEYS        JML IPUSHKEYS
.381090	5c 6e 08 39	jmp $39086e	CSRRIGHT        JML ICSRRIGHT
.381094	5c a1 08 39	jmp $3908a1	CSRLEFT         JML ICSRLEFT
.381098	5c c7 08 39	jmp $3908c7	CSRUP           JML ICSRUP
.38109c	5c ed 08 39	jmp $3908ed	CSRDOWN         JML ICSRDOWN
.3810a0	5c 5d 08 39	jmp $39085d	CSRHOME         JML ICSRHOME
.3810a4	5c 5e 09 39	jmp $39095e	SCROLLUP        JML ISCROLLUP
.3810a8	5c 39 0a 39	jmp $390a39	CLRSCREEN       JML ICLRSCREEN
.3810ac	5c 04 0b 39	jmp $390b04	INITCHLUT	    JML IINITCHLUT
.3810b0	5c e1 0e 39	jmp $390ee1	INITSUPERIO	    JML IINITSUPERIO
.3810b4	5c e0 0f 39	jmp $390fe0	INITKEYBOARD    JML IINITKEYBOARD
.3810b8	5c 4b 11 39	jmp $39114b	TESTSID         JML ITESTSID
.3810bc	5c c0 0e 39	jmp $390ec0	INITCURSOR      JML IINITCURSOR
.3810c0	5c 76 0e 39	jmp $390e76	INITFONTSET     JML IINITFONTSET
.3810c4	5c 33 0b 39	jmp $390b33	INITGAMMATABLE  JML IINITGAMMATABLE
.3810c8	5c 53 0b 39	jmp $390b53	INITALLLUT      JML IINITALLLUT
.3810cc	5c 15 0c 39	jmp $390c15	INITVKYTXTMODE  JML IINITVKYTXTMODE
.3810d0	5c 01 0d 39	jmp $390d01	INITVKYGRPMODE  JML IINITVKYGRPMODE
.3810d4	5c 38 0d 39	jmp $390d38	INITTILEMODE    JML IINITTILEMODE
.3810d8	5c 39 0d 39	jmp $390d39	INITSPRITE      JML IINITSPRITE
.3810dc	5c 1a 12 39	jmp $39121a	INITCODEC       JML IINITCODEC
.3810e0	5c 96 12 39	jmp $391296	RESETCODEC      JML IRESETCODEC
.3810e4	5c 04 13 39	jmp $391304	BMP_PARSER      JML IBMP_PARSER
.3810e8	5c b9 12 39	jmp $3912b9	BM_FILL_SCREEN  JML IBM_FILL_SCREEN
.3810ec	5c 48 36 39	jmp $393648	OPL2_TONE_TEST  JML IOPL2_TONE_TEST
.3810f0	5c 88 52 39	jmp $395288	F_OPEN          JML IF_OPEN         ; open a file for reading/writing/creating
.3810f4	5c 1b 53 39	jmp $39531b	F_CREATE        JML IF_CREATE       ; create a new file
.3810f8	5c 55 53 39	jmp $395355	F_CLOSE         JML IF_CLOSE        ; close a file (make sure last cluster is written)
.3810fc	5c ee 53 39	jmp $3953ee	F_WRITE         JML IF_WRITE        ; write the current cluster to the file
.381100	5c 89 53 39	jmp $395389	F_READ          JML IF_READ         ; read the next cluster from the file
.381104	5c 98 54 39	jmp $395498	F_DELETE        JML IF_DELETE       ; delete a file / directory
.381108	5c 5a 54 39	jmp $39545a	F_DIROPEN       JML IF_DIROPEN      ; open a directory and seek the first directory entry
.38110c	5c 94 54 39	jmp $395494	F_DIRNEXT       JML IF_DIRNEXT      ; seek to the next directory of an open directory
.381110	5c 31 55 39	jmp $395531	F_DIRREAD       JML IF_DIRREAD      ; Read the directory entry for the specified file
.381114	5c 58 55 39	jmp $395558	F_DIRWRITE      JML IF_DIRWRITE     ; Write any changes in the current directory cluster back to the drive
.381118	5c 5c 55 39	jmp $39555c	F_LOAD          JML IF_LOAD         ; load a binary file into memory, supports multiple file formats
.38111c	5c 3d 57 39	jmp $39573d	F_SAVE          JML IF_SAVE         ; Save memory to a binary file
.381120	5c 12 40 39	jmp $394012	CMDBLOCK        JML ICMDBLOCK       ; Send a command to a block device
.381124	5c d6 57 39	jmp $3957d6	F_RUN           JML IF_RUN          ; Load an run a binary file
.381128	5c f5 43 39	jmp $3943f5	F_MOUNT         JML DOS_MOUNT       ; Mount the designated block device
.38112c	5c 4e 0c 39	jmp $390c4e	SETSIZES        JML ISETSIZES
.381130	5c ff 58 39	jmp $3958ff	F_COPY          JML IF_COPY         ; Copy a file
.381134	5c 61 58 39	jmp $395861	F_ALLOCFD       JML IF_ALLOCFD      ; Allocate a file descriptor
.381138	5c b5 58 39	jmp $3958b5	F_FREEFD        JML IF_FREEFD       ; Free a file descriptor

;******  Return to file: src\kernel.asm


;******  Processing file: src\Interrupt_Handler.asm

.38113c					IRQ_HANDLER
.38113c	e2 20		sep #$20	                SEP #$20        ; set A short
.38113e	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381142	c9 00		cmp #$00	                CMP #$00
.381144	f0 4a		beq $381190	                BEQ CHECK_PENDING_REG1
.381146	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.38114a	29 01		and #$01	                AND #FNX0_INT00_SOF
.38114c	c9 01		cmp #$01	                CMP #FNX0_INT00_SOF
.38114e	d0 09		bne $381159	                BNE SERVICE_NEXT_IRQ2
.381150	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381154	20 fa 11	jsr $3811fa	                JSR SOF_INTERRUPT
.381157	e2 20		sep #$20	                SEP #$20        ; set A short
.381159					SERVICE_NEXT_IRQ2
.381159	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.38115d	29 04		and #$04	                AND #FNX0_INT02_TMR0
.38115f	c9 04		cmp #$04	                CMP #FNX0_INT02_TMR0
.381161	d0 09		bne $38116c	                BNE SERVICE_NEXT_IRQ6
.381163	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381167	20 31 12	jsr $381231	                JSR TIMER0_INTERRUPT
.38116a	e2 20		sep #$20	                SEP #$20        ; set A short
.38116c					SERVICE_NEXT_IRQ6
.38116c	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381170	29 40		and #$40	                AND #FNX0_INT06_FDC
.381172	c9 40		cmp #$40	                CMP #FNX0_INT06_FDC
.381174	d0 09		bne $38117f	                BNE SERVICE_NEXT_IRQ7
.381176	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.38117a	20 8c 12	jsr $38128c	                JSR FDC_INTERRUPT
.38117d	e2 20		sep #$20	                SEP #$20        ; set A short
.38117f					SERVICE_NEXT_IRQ7
.38117f	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381183	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.381185	c9 80		cmp #$80	                CMP #FNX0_INT07_MOUSE
.381187	d0 07		bne $381190	                BNE CHECK_PENDING_REG1
.381189	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.38118d	20 4b 12	jsr $38124b	                JSR MOUSE_INTERRUPT
.381190					CHECK_PENDING_REG1
.381190	e2 20		sep #$20	                SEP #$20        ; set A short
.381192	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381196	c9 00		cmp #$00	                CMP #$00
.381198	f0 5d		beq $3811f7	                BEQ EXIT_IRQ_HANDLE
.38119a					SERVICE_NEXT_IRQ8
.38119a	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.38119e	29 01		and #$01	                AND #FNX1_INT00_KBD
.3811a0	c9 01		cmp #$01	                CMP #FNX1_INT00_KBD
.3811a2	d0 09		bne $3811ad	                BNE SERVICE_NEXT_IRQ11
.3811a4	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811a8	20 c4 12	jsr $3812c4	                JSR KEYBOARD_INTERRUPT
.3811ab	e2 20		sep #$20	                SEP #$20        ; set A short
.3811ad					SERVICE_NEXT_IRQ11
.3811ad	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3811b1	29 08		and #$08	                AND #FNX1_INT03_COM2
.3811b3	c9 08		cmp #$08	                CMP #FNX1_INT03_COM2
.3811b5	d0 09		bne $3811c0	                BNE SERVICE_NEXT_IRQ12
.3811b7	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811bb	20 97 12	jsr $381297	                JSR COM2_INTERRUPT
.3811be	e2 20		sep #$20	                SEP #$20        ; set A short
.3811c0					SERVICE_NEXT_IRQ12
.3811c0	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3811c4	29 10		and #$10	                AND #FNX1_INT04_COM1
.3811c6	c9 10		cmp #$10	                CMP #FNX1_INT04_COM1
.3811c8	d0 09		bne $3811d3	                BNE SERVICE_NEXT_IRQ13
.3811ca	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811ce	20 a2 12	jsr $3812a2	                JSR COM1_INTERRUPT
.3811d1	e2 20		sep #$20	                SEP #$20        ; set A short
.3811d3					SERVICE_NEXT_IRQ13
.3811d3	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3811d7	29 20		and #$20	                AND #FNX1_INT05_MPU401
.3811d9	c9 20		cmp #$20	                CMP #FNX1_INT05_MPU401
.3811db	d0 09		bne $3811e6	                BNE SERVICE_NEXT_IRQ14
.3811dd	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811e1	20 ad 12	jsr $3812ad	                JSR MPU401_INTERRUPT
.3811e4	e2 20		sep #$20	                SEP #$20        ; set A short
.3811e6					SERVICE_NEXT_IRQ14
.3811e6	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3811ea	29 40		and #$40	                AND #FNX1_INT06_LPT
.3811ec	c9 40		cmp #$40	                CMP #FNX1_INT06_LPT
.3811ee	d0 07		bne $3811f7	                BNE EXIT_IRQ_HANDLE
.3811f0	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811f4	20 b8 12	jsr $3812b8	                JSR LPT1_INTERRUPT
.3811f7					EXIT_IRQ_HANDLE
.3811f7	c2 30		rep #$30	                REP #$30        ; set A&X long
.3811f9	6b		rtl		                RTL
.3811fa					SOF_INTERRUPT
.3811fa	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.3811fe	29 01		and #$01	                AND #FNX0_INT00_SOF
.381200	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381204	c2 20		rep #$20	                REP #$20        ; set A long
.381206	af 4e a0 38	lda $38a04e	                LDA @l FDC_MOTOR_TIMER          ; Check the FDC motor count-down timer
.38120a	f0 0b		beq $381217	                BEQ sof_timeout                 ; If it's zero, check for the watchdog timeout
.38120c	3a		dec a		                DEC A                           ; Otherwise, decrement it...
.38120d	8f 4e a0 38	sta $38a04e	                STA @l FDC_MOTOR_TIMER
.381211	d0 04		bne $381217	                BNE sof_timeout                 ; If it's not zero, check for the watchdog timeout
.381213	22 0a 61 39	jsl $39610a	                JSL FDC_Motor_Off               ; Otherwise, turn off the motor
.381217					sof_timeout
.381217	e2 20		sep #$20	                SEP #$20        ; set A short
.381219	af 2d 03 00	lda $00032d	                LDA @l BIOS_TIMER               ; Check the BIOS_TIMER
.38121d	f0 11		beq $381230	                BEQ sof_int_done                ; If it's 0, we don't do anything
.38121f	3a		dec a		                DEC A                           ; Count down one tick
.381220	8f 2d 03 00	sta $00032d	                STA @l BIOS_TIMER
.381224	d0 0a		bne $381230	                BNE sof_int_done                ; If not 0, we're done
.381226	af 2c 03 00	lda $00032c	                LDA @l BIOS_FLAGS               ; Otherwise: flag a time out event
.38122a	09 80		ora #$80	                ORA #BIOS_TIMEOUT
.38122c	8f 2c 03 00	sta $00032c	                STA @l BIOS_FLAGS
.381230	60		rts		sof_int_done    RTS
.381231					TIMER0_INTERRUPT
.381231	e2 20		sep #$20	                SEP #$20        ; set A short
.381233	af 05 07 00	lda $000705	                LDA @l TIMERFLAGS               ; Flag that the interrupt has happened
.381237	09 80		ora #$80	                ORA #TIMER0TRIGGER
.381239	8f 05 07 00	sta $000705	                STA @l TIMERFLAGS
.38123d	60		rts		                RTS
.38123e					TIMER2_INTERRUPT
.38123e	e2 20		sep #$20	                SEP #$20        ; set A short
.381240	af 05 07 00	lda $000705	                LDA @l TIMERFLAGS               ; Flag that the interrupt has happened
.381244	09 20		ora #$20	                ORA #TIMER2TRIGGER
.381246	8f 05 07 00	sta $000705	                STA @l TIMERFLAGS
.38124a	60		rts		                RTS
.38124b					MOUSE_INTERRUPT
.38124b	e2 20		sep #$20	                SEP #$20        ; set A short
.38124d	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381251	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.381253	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381257	af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF
.38125b	a2 00 00	ldx #$0000	                LDX #$0000
.38125e	e2 10		sep #$10	                SEP #$10        ; set X short
.381260	a6 e0		ldx $e0		                LDX MOUSE_PTR
.381262	9f 06 07 af	sta $af0706,x	                STA @lMOUSE_PTR_BYTE0, X
.381266	e8		inx		                INX
.381267	e0 03		cpx #$03	                CPX #$03
.381269	d0 1c		bne $381287	                BNE EXIT_FOR_NEXT_VALUE
.38126b	af 02 07 af	lda $af0702	                LDA @lMOUSE_PTR_X_POS_L
.38126f	85 e1		sta $e1		                STA MOUSE_POS_X_LO
.381271	af 03 07 af	lda $af0703	                LDA @lMOUSE_PTR_X_POS_H
.381275	85 e2		sta $e2		                STA MOUSE_POS_X_HI
.381277	af 04 07 af	lda $af0704	                LDA @lMOUSE_PTR_Y_POS_L
.38127b	85 e3		sta $e3		                STA MOUSE_POS_Y_LO
.38127d	af 05 07 af	lda $af0705	                LDA @lMOUSE_PTR_Y_POS_H
.381281	85 e4		sta $e4		                STA MOUSE_POS_Y_HI
.381283	e2 20		sep #$20	                SEP #$20        ; set A short
.381285	a2 00		ldx #$00	                LDX #$00
.381287					EXIT_FOR_NEXT_VALUE
.381287	86 e0		stx $e0		                STX MOUSE_PTR
.381289	c2 10		rep #$10	                REP #$10        ; set X long
.38128b	60		rts		                RTS
.38128c					FDC_INTERRUPT
.38128c	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381290	29 40		and #$40	                AND #FNX0_INT06_FDC
.381292	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381296	60		rts		                RTS
.381297					COM2_INTERRUPT
.381297	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.38129b	29 08		and #$08	                AND #FNX1_INT03_COM2
.38129d	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3812a1	60		rts		                RTS
.3812a2					COM1_INTERRUPT
.3812a2	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3812a6	29 10		and #$10	                AND #FNX1_INT04_COM1
.3812a8	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3812ac	60		rts		                RTS
.3812ad					MPU401_INTERRUPT
.3812ad	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3812b1	29 20		and #$20	                AND #FNX1_INT05_MPU401
.3812b3	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3812b7	60		rts		                RTS
.3812b8					LPT1_INTERRUPT
.3812b8	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3812bc	29 40		and #$40	                AND #FNX1_INT06_LPT
.3812be	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3812c2	60		rts		                RTS
.3812c3					NMI_HANDLER
.3812c3	6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\keyboard.asm

.3812c4					KEYBOARD_INTERRUPT
.3812c4	48		pha		                PHA             ; begin setdp macro
.3812c5	08		php		                PHP
.3812c6	c2 20		rep #$20	                REP #$20        ; set A long
.3812c8	a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.3812cb	5b		tcd		                TCD
.3812cc	28		plp		                PLP
.3812cd	68		pla		                PLA             ; end setdp macro
.3812ce	a2 00 00	ldx #$0000	                ldx #$0000
.3812d1	e2 10		sep #$10	                SEP #$10        ; set X short
.3812d3	e2 20		sep #$20	                SEP #$20        ; set A short
.3812d5	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3812d9	29 01		and #$01	                AND #FNX1_INT00_KBD
.3812db	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3812df					IRQ_HANDLER_FETCH
.3812df	af 60 10 af	lda $af1060	                LDA @lKBD_INPT_BUF      ; Get Scan Code from KeyBoard
.3812e3	85 88		sta $0f88	                STA KEYBOARD_SC_TMP     ; Save Code Immediately
.3812e5	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the Prefix was picked up before
.3812e7	29 80		and #$80	                AND #$80
.3812e9	c9 80		cmp #$80	                CMP #$80
.3812eb	d0 10		bne $3812fd	                BNE CHK_LSHIFT          ; No: do normal scan-code checks
.3812ed	a5 87		lda $0f87	PREFIX_ON       LDA KEYBOARD_SC_FLG     ; Otherwise: clear prefix
.3812ef	29 7f		and #$7f	                AND #$7F
.3812f1	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3812f3	a5 88		lda $0f88	                LDA KEYBOARD_SC_TMP     ; Get the prefixed scan-code's character
.3812f5	aa		tax		                TAX
.3812f6	bf 80 73 39	lda $397380,x	                LDA @lScanCode_Prefix_Set1, x
.3812fa	4c a0 13	jmp $3813a0	                JMP KB_WR_2_SCREEN      ; And save it
.3812fd	a5 88		lda $0f88	CHK_LSHIFT      LDA KEYBOARD_SC_TMP
.3812ff	c9 2a		cmp #$2a	                CMP #$2A                ; Left Shift Pressed
.381301	d0 03		bne $381306	                BNE NOT_KB_SET_LSHIFT
.381303	82 ad 00	brl $3813b3	                BRL KB_SET_SHIFT
.381306					NOT_KB_SET_LSHIFT
.381306	c9 aa		cmp #$aa	                CMP #$AA                ; Left Shift Unpressed
.381308	d0 03		bne $38130d	                BNE NOT_KB_CLR_LSHIFT
.38130a	82 af 00	brl $3813bc	                BRL KB_CLR_SHIFT
.38130d					NOT_KB_CLR_LSHIFT
.38130d	c9 36		cmp #$36	                CMP #$36                ; Right Shift Pressed
.38130f	d0 03		bne $381314	                BNE NOT_KB_SET_RSHIFT
.381311	82 9f 00	brl $3813b3	                BRL KB_SET_SHIFT
.381314					NOT_KB_SET_RSHIFT
.381314	c9 b6		cmp #$b6	                CMP #$B6                ; Right Shift Unpressed
.381316	d0 03		bne $38131b	                BNE NOT_KB_CLR_RSHIFT
.381318	82 a1 00	brl $3813bc	                BRL KB_CLR_SHIFT
.38131b					NOT_KB_CLR_RSHIFT
.38131b	c9 1d		cmp #$1d	                CMP #$1D                ; Left CTRL pressed
.38131d	d0 03		bne $381322	                BNE NOT_KB_SET_CTRL
.38131f	82 a3 00	brl $3813c5	                BRL KB_SET_CTRL
.381322					NOT_KB_SET_CTRL
.381322	c9 9d		cmp #$9d	                CMP #$9D                ; Left CTRL Unpressed
.381324	d0 03		bne $381329	                BNE NOT_KB_CLR_CTRL
.381326	82 a5 00	brl $3813ce	                BRL KB_CLR_CTRL
.381329					NOT_KB_CLR_CTRL
.381329	c9 38		cmp #$38	                CMP #$38                ; Left ALT Pressed
.38132b	d0 03		bne $381330	                BNE NOT_KB_SET_ALT
.38132d	82 a7 00	brl $3813d7	                BRL KB_SET_ALT
.381330					NOT_KB_SET_ALT
.381330	c9 b8		cmp #$b8	                CMP #$B8                ; Left ALT Unpressed
.381332	d0 03		bne $381337	                BNE NOT_KB_CLR_ALT
.381334	82 a9 00	brl $3813e0	                BRL KB_CLR_ALT
.381337	c9 e0		cmp #$e0	NOT_KB_CLR_ALT  CMP #$E0                ; Prefixed scan code
.381339	d0 03		bne $38133e	                BNE NOT_PREFIXED
.38133b	82 ab 00	brl $3813e9	                BRL KB_SET_PREFIX
.38133e	c9 45		cmp #$45	NOT_PREFIXED    CMP #$45                ; Numlock Pressed
.381340	d0 03		bne $381345	                BNE NOT_KB_SET_NUM
.381342	82 b6 00	brl $3813fb	                BRL KB_TOG_NUMLOCK
.381345	c9 46		cmp #$46	NOT_KB_SET_NUM  CMP #$46                ; Scroll Lock Pressed
.381347	d0 03		bne $38134c	                BNE NOT_KB_SET_SCR
.381349	82 a6 00	brl $3813f2	                BRL KB_TOG_SCRLOCK
.38134c	c9 3a		cmp #$3a	NOT_KB_SET_SCR  CMP #$3A                ; Caps Lock Pressed
.38134e	d0 03		bne $381353	                BNE NOT_KB_CAPSLOCK
.381350	82 bc 00	brl $38140f	                BRL KB_TOG_CAPLOCK
.381353	c9 58		cmp #$58	NOT_KB_CAPSLOCK CMP #$58                ; F12 Pressed
.381355	d0 09		bne $381360	                BNE KB_UNPRESSED
.381357	a9 60		lda #$60	                LDA #KB_CREDITS         ; Yes: flag that the CREDITS key has been pressed
.381359	8f 8a 0f 00	sta $000f8a	                STA @lKEYFLAG
.38135d	82 b5 00	brl $381415	                BRL KB_CHECK_B_DONE
.381360	29 80		and #$80	KB_UNPRESSED    AND #$80                ; See if the Scan Code is press or Depressed
.381362	c9 80		cmp #$80	                CMP #$80                ; Depress Status - We will not do anything at this point
.381364	d0 03		bne $381369	                BNE KB_NORM_SC
.381366	82 ac 00	brl $381415	                BRL KB_CHECK_B_DONE
.381369	a5 88		lda $0f88	KB_NORM_SC      LDA KEYBOARD_SC_TMP       ;
.38136b	aa		tax		                TAX
.38136c	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the SHIFT Key is being Pushed
.38136e	29 10		and #$10	                AND #$10
.381370	c9 10		cmp #$10	                CMP #$10
.381372	f0 17		beq $38138b	                BEQ SHIFT_KEY_ON
.381374	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the CTRL Key is being Pushed
.381376	29 20		and #$20	                AND #$20
.381378	c9 20		cmp #$20	                CMP #$20
.38137a	f0 16		beq $381392	                BEQ CTRL_KEY_ON
.38137c	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the ALT Key is being Pushed
.38137e	29 40		and #$40	                AND #$40
.381380	c9 40		cmp #$40	                CMP #$40
.381382	f0 15		beq $381399	                BEQ ALT_KEY_ON
.381384	bf 00 71 39	lda $397100,x	                LDA @lScanCode_Press_Set1, x
.381388	82 15 00	brl $3813a0	                BRL KB_WR_2_SCREEN
.38138b	bf 80 71 39	lda $397180,x	SHIFT_KEY_ON    LDA @lScanCode_Shift_Set1, x
.38138f	82 0e 00	brl $3813a0	                BRL KB_WR_2_SCREEN
.381392	bf 00 72 39	lda $397200,x	CTRL_KEY_ON     LDA @lScanCode_Ctrl_Set1, x
.381396	82 07 00	brl $3813a0	                BRL KB_WR_2_SCREEN
.381399	bf 80 72 39	lda $397280,x	ALT_KEY_ON      LDA @lScanCode_Alt_Set1, x
.38139d	82 00 00	brl $3813a0	                BRL KB_WR_2_SCREEN
.3813a0	c9 18		cmp #$18	KB_WR_2_SCREEN  CMP #$18                ; Is it SysRq?
.3813a2	d0 03		bne $3813a7	                BNE savechar
.3813a4	4c 25 14	jmp $381425	                JMP programmerKey       ; Yes: trigger the programmer key
.3813a7	48		pha		savechar        PHA
.3813a8	c2 10		rep #$10	                REP #$10        ; set X long
.3813aa	20 31 14	jsr $381431	                JSR SAVEKEY
.3813ad	e2 20		sep #$20	                SEP #$20        ; set A short
.3813af	68		pla		                PLA
.3813b0	4c 15 14	jmp $381415	                JMP KB_CHECK_B_DONE
.3813b3	a5 87		lda $0f87	KB_SET_SHIFT    LDA KEYBOARD_SC_FLG
.3813b5	09 10		ora #$10	                ORA #$10
.3813b7	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813b9	4c 15 14	jmp $381415	                JMP KB_CHECK_B_DONE
.3813bc	a5 87		lda $0f87	KB_CLR_SHIFT    LDA KEYBOARD_SC_FLG
.3813be	29 ef		and #$ef	                AND #$EF
.3813c0	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813c2	4c 15 14	jmp $381415	                JMP KB_CHECK_B_DONE
.3813c5	a5 87		lda $0f87	KB_SET_CTRL     LDA KEYBOARD_SC_FLG
.3813c7	09 20		ora #$20	                ORA #$20
.3813c9	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813cb	4c 15 14	jmp $381415	                JMP KB_CHECK_B_DONE
.3813ce	a5 87		lda $0f87	KB_CLR_CTRL     LDA KEYBOARD_SC_FLG
.3813d0	29 df		and #$df	                AND #$DF
.3813d2	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813d4	4c 15 14	jmp $381415	                JMP KB_CHECK_B_DONE
.3813d7	a5 87		lda $0f87	KB_SET_ALT      LDA KEYBOARD_SC_FLG
.3813d9	09 40		ora #$40	                ORA #$40
.3813db	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813dd	4c 15 14	jmp $381415	                JMP KB_CHECK_B_DONE
.3813e0	a5 87		lda $0f87	KB_CLR_ALT      LDA KEYBOARD_SC_FLG
.3813e2	29 bf		and #$bf	                AND #$BF
.3813e4	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813e6	4c 15 14	jmp $381415	                JMP KB_CHECK_B_DONE
.3813e9	a5 87		lda $0f87	KB_SET_PREFIX   LDA KEYBOARD_SC_FLG
.3813eb	09 80		ora #$80	                ORA #$80
.3813ed	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813ef	4c 15 14	jmp $381415	                JMP KB_CHECK_B_DONE
.3813f2	a5 89		lda $0f89	KB_TOG_SCRLOCK  LDA KEYBOARD_LOCKS
.3813f4	49 01		eor #$01	                EOR #KB_SCROLL_LOCK         ; toggle the Scroll Lock flag
.3813f6	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.3813f8	4c 15 14	jmp $381415	                JMP KB_CHECK_B_DONE
.3813fb	a5 87		lda $0f87	KB_TOG_NUMLOCK  LDA KEYBOARD_SC_FLG         ; Check flags...
.3813fd	29 60		and #$60	                AND #$60                    ; ... is control-alt pressed?
.3813ff	c9 60		cmp #$60	                CMP #$60
.381401	d0 03		bne $381406	                BNE KB_TOG_NUMLOC2
.381403	82 63 ff	brl $381369	                BRL KB_NORM_SC              ; No: treat as a BREAK key
.381406	a5 89		lda $0f89	KB_TOG_NUMLOC2  LDA KEYBOARD_LOCKS
.381408	49 02		eor #$02	                EOR #KB_NUM_LOCK            ; toggle the Num Lock flag
.38140a	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.38140c	4c 15 14	jmp $381415	                JMP KB_CHECK_B_DONE
.38140f	a5 89		lda $0f89	KB_TOG_CAPLOCK  LDA KEYBOARD_LOCKS
.381411	49 04		eor #$04	                EOR #KB_CAPS_LOCK           ; toggle the Caps Lock flag
.381413	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.381415					KB_CHECK_B_DONE
.381415	af 64 10 af	lda $af1064	                LDA STATUS_PORT
.381419	29 01		and #$01	                AND #OUT_BUF_FULL           ; Test bit $01 (if 1, Full)
.38141b	c9 01		cmp #$01	                CMP #OUT_BUF_FULL           ; if Still Byte in the Buffer, fetch it out
.38141d	d0 03		bne $381422	                BNE SET_LED
.38141f	4c df 12	jmp $3812df	                JMP IRQ_HANDLER_FETCH
.381422					SET_LED
.381422					KB_DONE
.381422	c2 30		rep #$30	                REP #$30        ; set A&X long
.381424	60		rts		                RTS
.381425					programmerKey
.381425	c2 30		rep #$30	                REP #$30        ; set A&X long
.381427	68		pla		                PLA                     ; Get and throw-away the return address to the interrupt handler
.381428	2b		pld		                PLD                     ; Restore the registers that were present when the handler was invoked
.381429	ab		plb		                PLB
.38142a	7a		ply		                PLY
.38142b	fa		plx		                PLX
.38142c	68		pla		                PLA
.38142d	5c 08 10 38	jmp $381008	                JML BREAK               ; And go to the BRK handler directly to open the monitor
.381431					SAVEKEY
.381431	e2 20		sep #$20	                SEP #$20        ; set A short
.381433	48		pha		                PHA                     ; Save the character
.381434	a5 89		lda $0f89	                LDA KEYBOARD_LOCKS      ; Check the keyboard lock flags
.381436	29 04		and #$04	                AND #KB_CAPS_LOCK       ; Is CAPS lock on?
.381438	f0 0d		beq $381447	                BEQ no_caps             ; No... just use the character as-is
.38143a	68		pla		                PLA                     ; Get the character back
.38143b	c9 61		cmp #$61	                CMP #'a'                ; Is it < 'a'
.38143d	90 09		bcc $381448	                BLT check_break         ; Yes: just use as-is
.38143f	c9 7b		cmp #$7b	                CMP #'z'+1              ; Is it > 'z'
.381441	b0 05		bcs $381448	                BGE check_break         ; Yes: just us as-is
.381443	29 df		and #$df	                AND #%11011111          ; Conver to upper case
.381445	80 01		bra $381448	                BRA check_break
.381447	68		pla		no_caps         PLA                     ; Restore the character
.381448	c9 00		cmp #$00	check_break     CMP #0
.38144a	f0 18		beq $381464	                BEQ done
.38144c	c9 03		cmp #$03	                CMP #CHAR_CTRL_C        ; Is it CTRL-C?
.38144e	f0 15		beq $381465	                BEQ flag_break          ; Yes: flag a break
.381450	a6 8d		ldx $0f8d	no_break        LDX KEY_BUFFER_WPOS     ; So the Receive Character is saved in the Buffer
.381452	e0 80 00	cpx #$0080	                CPX #KEY_BUFFER_SIZE    ; Make sure we haven't been overboard.
.381455	b0 0d		bcs $381464	                BCS done                ; Stop storing - An error should ensue here...
.381457	9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER,X
.38145b	e8		inx		                INX
.38145c	86 8d		stx $0f8d	                STX KEY_BUFFER_WPOS
.38145e	a9 00		lda #$00	                LDA #$00
.381460	9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER, X       ; Store a EOL in the following location for good measure
.381464	60		rts		done            RTS
.381465					flag_break
.381465	e2 20		sep #$20	                SEP #$20        ; set A short
.381467	a9 80		lda #$80	                LDA #KB_CTRL_C          ; Flag that an interrupt key has been pressed
.381469	85 8a		sta $0f8a	                STA KEYFLAG             ; The interpreter should see this soon and throw a BREAK
.38146b	60		rts		                RTS
.38146c					KBD_GETC
.38146c	da		phx		                PHX
.38146d	0b		phd		                PHD
.38146e	08		php		                PHP
.38146f	48		pha		                PHA             ; begin setdp macro
.381470	08		php		                PHP
.381471	c2 20		rep #$20	                REP #$20        ; set A long
.381473	a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.381476	5b		tcd		                TCD
.381477	28		plp		                PLP
.381478	68		pla		                PLA             ; end setdp macro
.381479	e2 20		sep #$20	                SEP #$20        ; set A short
.38147b	c2 10		rep #$10	                REP #$10        ; set X long
.38147d	58		cli		                CLI                     ; Make sure interrupts can happen
.38147e	af 8a 0f 00	lda $000f8a	get_wait        LDA @lKEYFLAG           ; Check the keyboard control flag
.381482	29 60		and #$60	                AND #KB_CREDITS         ; Are the credits flagged?
.381484	c9 60		cmp #$60	                CMP #KB_CREDITS
.381486	d0 0a		bne $381492	                BNE check_buffer        ; No: check the key buffer
.381488	a9 00		lda #$00	                LDA #0                  ; Yes: clear the flags
.38148a	8f 8a 0f 00	sta $000f8a	                STA @lKEYFLAG
.38148e	22 73 15 39	jsl $391573	                JSL SHOW_CREDITS        ; Then show the credits screen and wait for a key press
.381492	a6 8b		ldx $0f8b	check_buffer    LDX KEY_BUFFER_RPOS     ; Is KEY_BUFFER_RPOS < KEY_BUFFER_WPOS
.381494	e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS
.381496	90 02		bcc $38149a	                BCC read_buff           ; Yes: a key is present, read it
.381498	80 e4		bra $38147e	                BRA get_wait            ; Otherwise, keep waiting
.38149a	78		sei		read_buff       SEI                     ; Don't interrupt me!
.38149b	b5 00		lda $0f00,x	                LDA KEY_BUFFER,X        ; Get the key
.38149d	e8		inx		                INX                     ; And move to the next key
.38149e	e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS     ; Did we just read the last key?
.3814a0	f0 07		beq $3814a9	                BEQ reset_indexes       ; Yes: return to 0 position
.3814a2	86 8b		stx $0f8b	                STX KEY_BUFFER_RPOS     ; Otherwise: Update the read index
.3814a4	58		cli		                CLI
.3814a5	28		plp		done            PLP                     ; Restore status and interrupts
.3814a6	2b		pld		                PLD
.3814a7	fa		plx		                PLX
.3814a8	6b		rtl		                RTL
.3814a9	64 8b		stz $0f8b	reset_indexes   STZ KEY_BUFFER_RPOS     ; Reset read index to the beginning
.3814ab	64 8d		stz $0f8d	                STZ KEY_BUFFER_WPOS     ; Reset the write index to the beginning
.3814ad	80 f6		bra $3814a5	                BRA done

;******  Return to file: src\kernel.asm

.390400					IBOOT
.390400	18		clc		                CLC               ; clear the carry flag
.390401	fb		xce		                XCE               ; move carry to emulation flag.
.390402	78		sei		                SEI               ; Disable interrupts
.390403	c2 30		rep #$30	                REP #$30        ; set A&X long
.390405	a9 ff fe	lda #$feff	                LDA #STACK_END    ; initialize stack pointer
.390408	1b		tcs		                TAS
.390409	a2 00 10	ldx #$1000	                LDX #<>BOOT       ; Copy the kernel jump table to bank 0
.39040c	a0 00 10	ldy #$1000	                LDY #<>BOOT       ; Ordinarily, this is done by GAVIN, but
.39040f	a9 00 01	lda #$0100	                LDA #$0100        ; this is ensures it can be reloaded in case of errors
.390412	54 00 38	mvn $38,$00	                MVN `BOOT,$00     ; Or during soft loading of the kernel from the debug port
.390415	48		pha		                PHA             ; begin setdp macro
.390416	08		php		                PHP
.390417	c2 20		rep #$20	                REP #$20        ; set A long
.390419	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39041c	5b		tcd		                TCD
.39041d	28		plp		                PLP
.39041e	68		pla		                PLA             ; end setdp macro
.39041f	e2 20		sep #$20	                SEP #$20        ; set A short
.390421	a2 00 00	ldx #$0000	                LDX #$0000
.390424	a9 00		lda #$00	                LDA #$00
.390426					CLEAR_MEM_LOOP
.390426	95 00		sta $00,x	                STA $0000, X
.390428	e8		inx		                INX
.390429	e0 00 01	cpx #$0100	                CPX #$0100
.39042c	d0 f8		bne $390426	                BNE CLEAR_MEM_LOOP
.39042e	ea		nop		                NOP
.39042f	a9 ff		lda #$ff	                LDA #$FF
.390431	8f 48 01 00	sta $000148	                STA @lINT_EDGE_REG0
.390435	8f 49 01 00	sta $000149	                STA @lINT_EDGE_REG1
.390439	8f 4a 01 00	sta $00014a	                STA @lINT_EDGE_REG2
.39043d	8f 4b 01 00	sta $00014b	                STA @lINT_EDGE_REG3
.390441	8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.390445	8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.390449	8f 4e 01 00	sta $00014e	                STA @lINT_MASK_REG2
.39044d	8f 4f 01 00	sta $00014f	                STA @lINT_MASK_REG3
.390451	22 30 11 39	jsl $391130	                JSL INITRTC               ; Initialize the RTC
.390455	c2 30		rep #$30	                REP #$30        ; set A&X long
.390457	a9 00 a0	lda #$a000	                LDA #<>SCREEN_PAGE0      ; store the initial screen buffer location
.39045a	85 0c		sta $0c		                STA SCREENBEGIN
.39045c	85 17		sta $17		                STA CURSORPOS
.39045e	a9 00 c0	lda #$c000	                LDA #<>CS_COLOR_MEM_PTR   ; Set the initial COLOR cursor position
.390461	85 1f		sta $1f		                STA COLORPOS
.390463	e2 20		sep #$20	                SEP #$20        ; set A short
.390465	a9 af		lda #$af	                LDA #`SCREEN_PAGE0
.390467	85 0e		sta $0e		                STA SCREENBEGIN+2
.390469	85 19		sta $19		                STA CURSORPOS+2
.39046b	a9 af		lda #$af	                LDA #`CS_COLOR_MEM_PTR    ; Set the initial COLOR cursor position
.39046d	85 21		sta $21		                STA COLORPOS+2
.39046f	e2 20		sep #$20	                SEP #$20        ; set A short
.390471	a9 00		lda #$00	                LDA #$00
.390473	8d 87 0f	sta $0f87	                STA KEYBOARD_SC_FLG     ; Clear the Keyboard Flag
.390476	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.390478	8f 00 f1 af	sta $aff100	                STA $AFF100
.39047c	a9 bf		lda #$bf	                LDA #$BF ; Channel Two - No Atteniation
.39047e	8f 00 f1 af	sta $aff100	                STA $AFF100
.390482	a9 df		lda #$df	                LDA #$DF ; Channel Two - No Atteniation
.390484	8f 00 f1 af	sta $aff100	                STA $AFF100
.390488	a9 ff		lda #$ff	                LDA #$FF ; Channel Two - No Atteniation
.39048a	8f 00 f1 af	sta $aff100	                STA $AFF100
.39048e	c2 30		rep #$30	                REP #$30        ; set A&X long
.390490	a2 48 00	ldx #$0048	                LDX #72
.390493	86 0f		stx $0f		                STX COLS_VISIBLE
.390495	a0 34 00	ldy #$0034	                LDY #52
.390498	84 13		sty $13		                STY LINES_VISIBLE
.39049a	a2 80 00	ldx #$0080	                LDX #128
.39049d	86 11		stx $11		                STX COLS_PER_LINE
.39049f	a0 40 00	ldy #$0040	                LDY #64
.3904a2	84 15		sty $15		                STY LINES_MAX
.3904a4	a9 ed 00	lda #$00ed	                LDA #$ED                  ; Set the default text color to light gray on dark gray
.3904a7	85 1e		sta $1e		                STA CURCOLOR
.3904a9	22 dc 10 38	jsl $3810dc	                JSL INITCODEC
.3904ad	22 b0 10 38	jsl $3810b0	                JSL INITSUPERIO
.3904b1	22 c4 10 38	jsl $3810c4	                JSL INITGAMMATABLE
.3904b5	22 c8 10 38	jsl $3810c8	                JSL INITALLLUT
.3904b9	22 ac 10 38	jsl $3810ac	                JSL INITCHLUT
.3904bd	22 a1 0e 39	jsl $390ea1	                JSL INITMOUSEPOINTER
.3904c1	22 bc 10 38	jsl $3810bc	                JSL INITCURSOR
.3904c5	22 cc 10 38	jsl $3810cc	                JSL INITVKYTXTMODE
.3904c9	22 76 0e 39	jsl $390e76	                JSL IINITFONTSET
.3904cd	22 39 0a 39	jsl $390a39	                JSL ICLRSCREEN  ; Clear Screen and Set a standard color in Color Memory
.3904d1	a9 01 00	lda #$0001	                LDA #CHAN_COM1    ; Initialize COM1
.3904d4	22 16 5a 39	jsl $395a16	                JSL UART_SELECT
.3904d8	22 82 5a 39	jsl $395a82	                JSL UART_INIT
.3904dc	a9 02 00	lda #$0002	                LDA #CHAN_COM2    ; Initialize COM2
.3904df	22 16 5a 39	jsl $395a16	                JSL UART_SELECT
.3904e3	22 82 5a 39	jsl $395a82	                JSL UART_INIT
.3904e7	a9 00 00	lda #$0000	                LDA #0
.3904ea	22 38 10 38	jsl $381038	                JSL SETIN
.3904ee	22 3c 10 38	jsl $38103c	                JSL SETOUT
.3904f2	c2 20		rep #$20	                REP #$20        ; set A long
.3904f4	a2 00 00	ldx #$0000	                LDX #0
.3904f7	a0 00 00	ldy #$0000	                LDY #0
.3904fa	22 12 09 39	jsl $390912	                JSL ILOCATE
.3904fe	c2 30		rep #$30	                REP #$30        ; set A&X long
.390500					greet
.390500	48		pha		                PHA             ; begin setdbr macro
.390501	08		php		                PHP
.390502	e2 20		sep #$20	                SEP #$20        ; set A short
.390504	a9 39		lda #$39	                LDA #`greet_msg
.390506	48		pha		                PHA
.390507	ab		plb		                PLB
.390508	28		plp		                PLP
.390509	68		pla		                PLA             ; end setdbr macro
.39050a	a2 fd 6b	ldx #$6bfd	                LDX #<>greet_msg
.39050d	22 bc 06 39	jsl $3906bc	                JSL IPRINT       ; print the first line
.390511	22 84 0a 39	jsl $390a84	                JSL ICOLORFLAG  ; This is to set the Color Memory for the Logo
.390515	48		pha		                PHA             ; begin setdp macro
.390516	08		php		                PHP
.390517	c2 20		rep #$20	                REP #$20        ; set A long
.390519	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39051c	5b		tcd		                TCD
.39051d	28		plp		                PLP
.39051e	68		pla		                PLA             ; end setdp macro
.39051f	22 b4 10 38	jsl $3810b4	                JSL INITKEYBOARD ;
.390523	e2 20		sep #$20	                SEP #$20        ; set A short
.390525	c2 10		rep #$10	                REP #$10        ; set X long
.390527	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.390529	8f 00 f1 af	sta $aff100	                STA $AFF100
.39052d	a9 bf		lda #$bf	                LDA #$BF ; Channel Two - No Atteniation
.39052f	8f 00 f1 af	sta $aff100	                STA $AFF100
.390533	a9 df		lda #$df	                LDA #$DF ; Channel Two - No Atteniation
.390535	8f 00 f1 af	sta $aff100	                STA $AFF100
.390539	a9 ff		lda #$ff	                LDA #$FF ; Channel Two - No Atteniation
.39053b	8f 00 f1 af	sta $aff100	                STA $AFF100
.39053f	a9 83		lda #$83	                LDA #$83 ; Channel Zero - No Atteniation
.390541	8f 00 f1 af	sta $aff100	                STA $AFF100
.390545	a9 12		lda #$12	                LDA #$12 ; Channel Zero - No Atteniation
.390547	8f 00 f1 af	sta $aff100	                STA $AFF100
.39054b	a9 90		lda #$90	                LDA #$90 ; Channel One - No Atteniation
.39054d	8f 00 f1 af	sta $aff100	                STA $AFF100
.390551	a2 00 40	ldx #$4000	                LDX #16384      ; 400ms
.390554	22 01 15 39	jsl $391501	          		 	JSL ILOOP_MS
.390558	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.39055a	8f 00 f1 af	sta $aff100	                STA $AFF100
.39055e	58		cli		                CLI                   ; Make sure no Interrupt will come and fuck up Init before this point.
.39055f	e2 20		sep #$20	                SEP #$20        ; set A short
.390561	c2 10		rep #$10	                REP #$10        ; set X long
.390563	48		pha		                PHA             ; begin setdbr macro
.390564	08		php		                PHP
.390565	e2 20		sep #$20	                SEP #$20        ; set A short
.390567	a9 39		lda #$39	                LDA #`greet_msg
.390569	48		pha		                PHA
.39056a	ab		plb		                PLB
.39056b	28		plp		                PLP
.39056c	68		pla		                PLA             ; end setdbr macro
.39056d	a2 00 00	ldx #$0000	                LDX #0
.390570	bf 00 10 38	lda $381000,x	jmpcopy         LDA @l BOOT,X
.390574	9f 00 10 00	sta $001000,x	                STA @l $001000,X
.390578	e8		inx		                INX
.390579	e0 00 10	cpx #$1000	                CPX #$1000
.39057c	d0 f2		bne $390570	                BNE jmpcopy
.39057e	22 5b 43 39	jsl $39435b	retry_boot      JSL DOS_INIT          ; Initialize the "disc operating system"
.390582	22 5e 60 39	jsl $39605e	                JSL FDC_INIT
.390586	af 0e e8 af	lda $afe80e	                LDA @lDIP_BOOTMODE    ; {HD_INSTALLED, 5'b0_0000, BOOT_MODE[1], BOOT_MODE[0]}
.39058a	29 03		and #$03	                AND #%00000011        ; Look at the mode bits
.39058c	c9 00		cmp #$00	                CMP #DIP_BOOT_IDE     ; DIP set for IDE?
.39058e	f0 28		beq $3905b8	                BEQ BOOTIDE           ; Yes: Boot from the IDE
.390590	c9 01		cmp #$01	                CMP #DIP_BOOT_SDCARD  ; DIP set for SD card?
.390592	f0 0b		beq $39059f	                BEQ BOOTSDC           ; Yes: try to boot from the SD card
.390594	c9 02		cmp #$02	                CMP #DIP_BOOT_FLOPPY  ; DIP set for floppy?
.390596	f0 3a		beq $3905d2	                BEQ BOOTFLOPPY        ; Yes: try to boot from the floppy
.390598	5c 00 00 3a	jmp $3a0000	BOOTBASIC       JML BASIC             ; Cold start of the BASIC interpreter (or its replacement)
.39059c	ea		nop		CREDIT_LOCK     NOP
.39059d	80 fd		bra $39059c	                BRA CREDIT_LOCK
.39059f					BOOTSDC
.39059f	e2 20		sep #$20	                SEP #$20        ; set A short
.3905a1	a9 02		lda #$02	                LDA #BIOS_DEV_SD
.3905a3	8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3905a7	22 f5 43 39	jsl $3943f5	                JSL DOS_MOUNT         ; Mount the SDC
.3905ab	90 06		bcc $3905b3	                BCC sdc_error         ; Print an error message if couldn't get anything
.3905ad	22 94 45 39	jsl $394594	                JSL DOS_TESTBOOT      ; Try to boot from the SDC's MBR
.3905b1	80 e5		bra $390598	                BRA BOOTBASIC         ; If we couldn't fall, into BASIC
.3905b3	a2 da 6f	ldx #$6fda	sdc_error       LDX #<>sdc_err_boot   ; Print a message saying SD card booting is not implemented
.3905b6	80 39		bra $3905f1	                BRA PR_BOOT_ERROR
.3905b8					BOOTIDE
.3905b8	e2 20		sep #$20	                SEP #$20        ; set A short
.3905ba	a9 06		lda #$06	                LDA #BIOS_DEV_HD0
.3905bc	8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3905c0	22 f5 43 39	jsl $3943f5	                JSL DOS_MOUNT         ; Mount the IDE drive
.3905c4	90 07		bcc $3905cd	                BCC hdc_error         ; Print an error message if couldn't get anything
.3905c6	22 94 45 39	jsl $394594	                JSL DOS_TESTBOOT      ; Try to boot from the IDE's MBR
.3905ca	82 cb ff	brl $390598	                BRL BOOTBASIC         ; If we couldn't fall, into BASIC
.3905cd	a2 f6 6f	ldx #$6ff6	hdc_error       LDX #<>ide_err_boot   ; Print a message saying SD card booting is not implemented
.3905d0	80 1f		bra $3905f1	                BRA PR_BOOT_ERROR
.3905d2	a2 3f 70	ldx #$703f	BOOTFLOPPY      LDX #<>fdc_boot
.3905d5	22 bc 06 39	jsl $3906bc	                JSL IPRINT
.3905d9	e2 20		sep #$20	                SEP #$20        ; set A short
.3905db	a9 00		lda #$00	                LDA #BIOS_DEV_FDC
.3905dd	8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3905e1	22 ec 65 39	jsl $3965ec	                JSL FDC_MOUNT         ; Mount the floppy drive
.3905e5	90 07		bcc $3905ee	                BCC fdc_error         ; Print an error message if couldn't get anything
.3905e7	22 94 45 39	jsl $394594	                JSL DOS_TESTBOOT      ; Try to boot from the FDC's MBR
.3905eb	82 aa ff	brl $390598	                BRL BOOTBASIC         ; If we couldn't, fall into BASIC
.3905ee	a2 19 70	ldx #$7019	fdc_error       LDX #<>fdc_err_boot   ; Print a message saying SD card booting is not implemented
.3905f1	22 bc 06 39	jsl $3906bc	PR_BOOT_ERROR   JSL IPRINT            ; Print the error message in X
.3905f5	a2 b5 6f	ldx #$6fb5	                LDX #<>boot_retry     ; Print the boot retry prompt
.3905f8	22 bc 06 39	jsl $3906bc	                JSL IPRINT
.3905fc	22 95 06 39	jsl $390695	boot_wait_key   JSL IGETCHW           ; Wait for a keypress
.390600	c9 52		cmp #$52	                CMP #'R'              ; Was "R" pressed?
.390602	d0 03		bne $390607	                BNE chk_r_lc
.390604	82 77 ff	brl $39057e	                BRL retry_boot        ; Yes: retry the boot sequence
.390607	c9 72		cmp #$72	chk_r_lc        CMP #'r'
.390609	d0 03		bne $39060e	                BNE chk_b_lc
.39060b	82 70 ff	brl $39057e	                BRL retry_boot
.39060e	c9 62		cmp #$62	chk_b_lc        CMP #'b'              ; Was "B" pressed?
.390610	f0 86		beq $390598	                BEQ BOOTBASIC         ; Yes: try going to BASIC
.390612	c9 42		cmp #$42	                CMP #'B'
.390614	f0 82		beq $390598	                BEQ BOOTBASIC
.390616	80 e4		bra $3905fc	                BRA boot_wait_key     ; No: keep waiting
.390618					IBREAK
.390618	48		pha		                PHA             ; begin setdp macro
.390619	08		php		                PHP
.39061a	c2 20		rep #$20	                REP #$20        ; set A long
.39061c	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39061f	5b		tcd		                TCD
.390620	28		plp		                PLP
.390621	68		pla		                PLA             ; end setdp macro
.390622	68		pla		                PLA             ; Pull .Y and stuff it in the CPUY variable
.390623	8f 48 02 00	sta $000248	                STA CPUY
.390627	68		pla		                PLA             ; Pull .X and stuff it in the CPUY variable
.390628	8f 46 02 00	sta $000246	                STA CPUX
.39062c	68		pla		                PLA             ; Pull .A and stuff it in the CPUY variable
.39062d	8f 44 02 00	sta $000244	                STA CPUA
.390631	68		pla		                PLA
.390632	8f 4c 02 00	sta $00024c	                STA CPUDP       ; Pull Direct page
.390636	e2 20		sep #$20	                SEP #$20        ; set A short
.390638	68		pla		                PLA             ; Pull Data Bank (8 bits)
.390639	8f 4e 02 00	sta $00024e	                STA CPUDBR
.39063d	68		pla		                PLA             ; Pull Flags (8 bits)
.39063e	8f 4f 02 00	sta $00024f	                STA CPUFLAGS
.390642	c2 20		rep #$20	                REP #$20        ; set A long
.390644	68		pla		                PLA             ; Pull Program Counter (16 bits)
.390645	8f 40 02 00	sta $000240	                STA CPUPC
.390649	e2 20		sep #$20	                SEP #$20        ; set A short
.39064b	68		pla		                PLA             ; Pull Program Bank (8 bits)
.39064c	8f 42 02 00	sta $000242	                STA CPUPBR
.390650	c2 20		rep #$20	                REP #$20        ; set A long
.390652	3b		tsc		                TSA             ; Get the stack
.390653	8f 4a 02 00	sta $00024a	                STA CPUSTACK    ; Store the stack at immediately before the interrupt was asserted
.390657	a9 ff fe	lda #$feff	                LDA #<>STACK_END   ; initialize stack pointer back to the bootup value
.39065a	1b		tcs		                TAS
.39065b	5c 04 00 3a	jmp $3a0004	                JML MONITOR
.39065f					IREADY
.39065f	48		pha		                PHA             ; begin setdbr macro
.390660	08		php		                PHP
.390661	e2 20		sep #$20	                SEP #$20        ; set A short
.390663	a9 39		lda #$39	                LDA #`ready_msg
.390665	48		pha		                PHA
.390666	ab		plb		                PLB
.390667	28		plp		                PLP
.390668	68		pla		                PLA             ; end setdbr macro
.390669	e2 20		sep #$20	                SEP #$20        ; set A short
.39066b	a2 56 70	ldx #$7056	                LDX #<>ready_msg
.39066e	22 bc 06 39	jsl $3906bc	                JSL IPRINT
.390672					IREADYWAIT
.390672	22 8c 06 39	jsl $39068c	                JSL IGETCHE
.390676	80 fa		bra $390672	                BRA IREADYWAIT
.390678	db		stp		IKEYDOWN        STP             ; Keyboard key pressed
.390679	db		stp		IRETURN         STP
.39067a	08		php		ISETIN          PHP
.39067b	e2 20		sep #$20	                SEP #$20        ; set A short
.39067d	8f 04 07 00	sta $000704	                STA @lCHAN_IN   ; Save the channel number
.390681	28		plp		                PLP
.390682	6b		rtl		                RTL
.390683	08		php		ISETOUT         PHP
.390684	e2 20		sep #$20	                SEP #$20        ; set A short
.390686	8f 03 07 00	sta $000703	                STA @lCHAN_OUT  ; Save the channel number
.39068a	28		plp		                PLP
.39068b	6b		rtl		                RTL
.39068c	22 95 06 39	jsl $390695	IGETCHE         JSL IGETCHW
.390690	22 dc 06 39	jsl $3906dc	                JSL IPUTC
.390694	6b		rtl		                RTL
.390695					IGETCHW
.390695	08		php		                PHP
.390696	e2 20		sep #$20	                SEP #$20        ; set A short
.390698	af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.39069c	f0 17		beq $3906b5	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.39069e	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.3906a0	f0 09		beq $3906ab	                BEQ getc_uart       ; Yes: handle reading from the UART
.3906a2	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.3906a4	f0 05		beq $3906ab	                BEQ getc_uart       ; Yes: handle reading from the UART
.3906a6	a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.3906a8	28		plp		                PLP
.3906a9	38		sec		                SEC                 ; And return carry set
.3906aa	6b		rtl		                RTL
.3906ab	22 16 5a 39	jsl $395a16	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.3906af	22 ca 5a 39	jsl $395aca	                JSL UART_GETC       ; Get the charater from the COM port
.3906b3	80 04		bra $3906b9	                BRA done
.3906b5	22 6c 14 38	jsl $38146c	getc_keyboard   JSL KBD_GETC        ; Get the character from the keyboard
.3906b9	28		plp		done            PLP
.3906ba	18		clc		                CLC                 ; Return carry clear for valid data
.3906bb	6b		rtl		                RTL
.3906bc	22 c5 06 39	jsl $3906c5	IPRINT          JSL IPUTS
.3906c0	22 0e 08 39	jsl $39080e	                JSL IPRINTCR
.3906c4	6b		rtl		                RTL
.3906c5	48		pha		IPUTS           PHA
.3906c6	08		php		                PHP
.3906c7	e2 20		sep #$20	                SEP #$20        ; set A short
.3906c9	c2 10		rep #$10	                REP #$10        ; set X long
.3906cb	bd 00 00	lda $390000,x	iputs1          LDA $0,b,x      ; read from the string
.3906ce	f0 08		beq $3906d8	                BEQ iputs_done
.3906d0	22 dc 06 39	jsl $3906dc	iputs2          JSL IPUTC
.3906d4	e8		inx		iputs3          INX
.3906d5	4c cb 06	jmp $3906cb	                JMP iputs1
.3906d8	e8		inx		iputs_done      INX
.3906d9	28		plp		                PLP
.3906da	68		pla		                PLA
.3906db	6b		rtl		                RTL
.3906dc					IPUTC
.3906dc	da		phx		                PHX
.3906dd	5a		phy		                PHY
.3906de	0b		phd		                PHD
.3906df	8b		phb		                PHB
.3906e0	08		php		                PHP                 ; stash the flags (we'll be changing M)
.3906e1	48		pha		                PHA             ; begin setdp macro
.3906e2	08		php		                PHP
.3906e3	c2 20		rep #$20	                REP #$20        ; set A long
.3906e5	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3906e8	5b		tcd		                TCD
.3906e9	28		plp		                PLP
.3906ea	68		pla		                PLA             ; end setdp macro
.3906eb	48		pha		                PHA             ; begin setdbr macro
.3906ec	08		php		                PHP
.3906ed	e2 20		sep #$20	                SEP #$20        ; set A short
.3906ef	a9 00		lda #$00	                LDA #0
.3906f1	48		pha		                PHA
.3906f2	ab		plb		                PLB
.3906f3	28		plp		                PLP
.3906f4	68		pla		                PLA             ; end setdbr macro
.3906f5	e2 20		sep #$20	                SEP #$20        ; set A short
.3906f7	c2 10		rep #$10	                REP #$10        ; set X long
.3906f9	48		pha		                PHA                 ; Save the character to print
.3906fa	af 03 07 00	lda $000703	                LDA @lCHAN_OUT      ; Check the output channel #
.3906fe	f0 16		beq $390716	                BEQ putc_screen     ; If it's 0: print to the screen
.390700	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.390702	f0 07		beq $39070b	                BEQ putc_uart       ; Yes: handle printing to the UART
.390704	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.390706	f0 03		beq $39070b	                BEQ putc_uart       ; Yes: handle printing to the UART
.390708	68		pla		                PLA                 ; Otherwise, just exit
.390709	80 4f		bra $39075a	                BRA done
.39070b	22 16 5a 39	jsl $395a16	putc_uart       JSL UART_SELECT     ; Point to the correct UART
.39070f	68		pla		                PLA                 ; Recover the character to send
.390710	22 eb 5a 39	jsl $395aeb	                JSL UART_PUTC       ; Send the character
.390714	80 44		bra $39075a	                BRA done
.390716	68		pla		putc_screen     PLA                 ; Get the character to print
.390717	c9 0a		cmp #$0a	                CMP #CHAR_LF        ; Linefeed moves cursor down one line
.390719	f0 61		beq $39077c	                BEQ go_down
.39071b	c9 20		cmp #$20	                CMP #$20
.39071d	90 19		bcc $390738	                BCC check_ctrl0     ; [$00..$1F]: check for arrows
.39071f	c9 7f		cmp #$7f	                CMP #$7F
.390721	f0 3d		beq $390760	                BEQ do_del
.390723	b0 02		bcs $390727	                BCS check_A0        ; [$20..$7E]: print it
.390725	80 29		bra $390750	                BRA printc
.390727	c9 a0		cmp #$a0	check_A0        CMP #$A0
.390729	90 02		bcc $39072d	                BCC check_ctrl1
.39072b	80 23		bra $390750	                BRA printc          ; [$A0..$FF]: print it
.39072d	c9 91		cmp #$91	check_ctrl1     CMP #CHAR_DOWN      ; If the down arrow key was pressed
.39072f	f0 4b		beq $39077c	                BEQ go_down         ; ... move the cursor down one row
.390731	c9 9d		cmp #$9d	                CMP #CHAR_LEFT      ; If the left arrow key was pressed
.390733	f0 59		beq $39078e	                BEQ go_left         ; ... move the cursor left one column
.390735	4c 5a 07	jmp $39075a	                JMP done
.390738	c9 09		cmp #$09	check_ctrl0     CMP #CHAR_TAB       ; If it's a TAB...
.39073a	f0 58		beq $390794	                BEQ do_TAB          ; ... move to the next TAB stop
.39073c	c9 08		cmp #$08	                CMP #CHAR_BS        ; If it's a backspace...
.39073e	f0 2c		beq $39076c	                BEQ backspace       ; ... move the cursor back and replace with a space
.390740	c9 0d		cmp #$0d	                CMP #CHAR_CR        ; If the carriage return was pressed
.390742	f0 32		beq $390776	                BEQ do_cr           ; ... move cursor down and to the first column
.390744	c9 11		cmp #$11	                CMP #CHAR_UP        ; If the up arrow key was pressed
.390746	f0 3a		beq $390782	                BEQ go_up           ; ... move the cursor up one row
.390748	c9 1d		cmp #$1d	                CMP #CHAR_RIGHT     ; If the right arrow key was pressed
.39074a	f0 3c		beq $390788	                BEQ go_right        ; ... move the cursor right one column
.39074c	c9 0f		cmp #$0f	                CMP #CHAR_INS       ; If the insert key was pressed
.39074e	f0 16		beq $390766	                BEQ do_ins          ; ... insert a space
.390750	87 17		sta [$17]	printc          STA [CURSORPOS]     ; Save the character on the screen
.390752	a5 1e		lda $1e		                LDA CURCOLOR        ; Set the color based on CURCOLOR
.390754	87 1f		sta [$1f]	                STA [COLORPOS]
.390756	22 6e 08 39	jsl $39086e	                JSL ICSRRIGHT       ; And advance the cursor
.39075a	28		plp		done            PLP
.39075b	ab		plb		                PLB
.39075c	2b		pld		                PLD
.39075d	7a		ply		                PLY
.39075e	fa		plx		                PLX
.39075f	6b		rtl		                RTL
.390760	22 bb 07 39	jsl $3907bb	do_del          JSL SCRSHIFTLL      ; Shift the current line left one space into the cursor
.390764	80 f4		bra $39075a	                BRA done
.390766	22 df 07 39	jsl $3907df	do_ins          JSL SCRSHIFTLR      ; Shift the current line right one space from the cursor
.39076a	80 ee		bra $39075a	                BRA done
.39076c	22 a1 08 39	jsl $3908a1	backspace       JSL ICSRLEFT
.390770	22 bb 07 39	jsl $3907bb	                JSL SCRSHIFTLL      ; Shift the current line left one space into the cursor
.390774	80 e4		bra $39075a	                BRA done
.390776	22 0e 08 39	jsl $39080e	do_cr           JSL IPRINTCR        ; Move the cursor to the beginning of the next line
.39077a	80 de		bra $39075a	                BRA done
.39077c	22 ed 08 39	jsl $3908ed	go_down         JSL ICSRDOWN        ; Move the cursor down one row (might force a scroll)
.390780	80 d8		bra $39075a	                BRA done
.390782	22 c7 08 39	jsl $3908c7	go_up           JSL ICSRUP          ; Move the cursor up one line
.390786	80 d2		bra $39075a	                BRA done
.390788	22 6e 08 39	jsl $39086e	go_right        JSL ICSRRIGHT       ; Move the cursor right one column
.39078c	80 cc		bra $39075a	                BRA done
.39078e	22 a1 08 39	jsl $3908a1	go_left         JSL ICSRLEFT        ; Move the cursor left one column
.390792	80 c6		bra $39075a	                BRA done
.390794					do_TAB
.390794	c2 20		rep #$20	                REP #$20        ; set A long
.390796	a5 1a		lda $1a		                LDA CURSORX         ; Get the current column
.390798	29 f8 ff	and #$fff8	                AND #$FFF8          ; See which group of 8 it's in
.39079b	18		clc		                CLC
.39079c	69 08 00	adc #$0008	                ADC #$0008          ; And move it to the next one
.39079f	aa		tax		                TAX
.3907a0	a4 1c		ldy $1c		                LDY CURSORY
.3907a2	e2 20		sep #$20	                SEP #$20        ; set A short
.3907a4	e4 0f		cpx $0f		set_xy          CPX COLS_VISIBLE    ; Check if we're still on screen horizontally
.3907a6	90 04		bcc $3907ac	                BCC check_row       ; Yes: check the row
.3907a8	a2 00 00	ldx #$0000	                LDX #0              ; No: move to the first column...
.3907ab	c8		iny		                INY                 ; ... and the next row
.3907ac	c4 13		cpy $13		check_row       CPY LINES_VISIBLE   ; Check if we're still on the screen vertically
.3907ae	90 05		bcc $3907b5	                BCC do_locate       ; Yes: reposition the cursor
.3907b0	22 5e 09 39	jsl $39095e	                JSL ISCROLLUP       ; No: scroll the screen
.3907b4	88		dey		                DEY                 ; And set the row to the last one
.3907b5	22 12 09 39	jsl $390912	do_locate       JSL ILOCATE         ; Set the cursor position
.3907b9	80 9f		bra $39075a	                BRA done
.3907bb	da		phx		SCRSHIFTLL      PHX
.3907bc	5a		phy		                PHY
.3907bd	48		pha		                PHA
.3907be	0b		phd		                PHD
.3907bf	08		php		                PHP
.3907c0	48		pha		                PHA             ; begin setdp macro
.3907c1	08		php		                PHP
.3907c2	c2 20		rep #$20	                REP #$20        ; set A long
.3907c4	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3907c7	5b		tcd		                TCD
.3907c8	28		plp		                PLP
.3907c9	68		pla		                PLA             ; end setdp macro
.3907ca	c2 30		rep #$30	                REP #$30        ; set A&X long
.3907cc	a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.3907ce	a8		tay		                TAY                 ; Set it as the destination
.3907cf	aa		tax		                TAX
.3907d0	e8		inx		                INX                 ; And set the next cell as the source
.3907d1	38		sec		                SEC                 ; Calculate the length of the block to move
.3907d2	a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.3907d4	e5 1a		sbc $1a		                SBC CURSORX
.3907d6	54 af af	mvn $af,$af	                MVN $AF, $AF        ; And move the block
.3907d9	28		plp		                PLP
.3907da	2b		pld		                PLD
.3907db	68		pla		                PLA
.3907dc	7a		ply		                PLY
.3907dd	fa		plx		                PLX
.3907de	6b		rtl		                RTL
.3907df	da		phx		SCRSHIFTLR      PHX
.3907e0	48		pha		                PHA
.3907e1	0b		phd		                PHD
.3907e2	08		php		                PHP
.3907e3	48		pha		                PHA             ; begin setdp macro
.3907e4	08		php		                PHP
.3907e5	c2 20		rep #$20	                REP #$20        ; set A long
.3907e7	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3907ea	5b		tcd		                TCD
.3907eb	28		plp		                PLP
.3907ec	68		pla		                PLA             ; end setdp macro
.3907ed	c2 30		rep #$30	                REP #$30        ; set A&X long
.3907ef	a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.3907f1	29 80 ff	and #$ff80	                AND #$FF80          ; Mask off the column bits
.3907f4	09 7f 00	ora #$007f	                ORA #$007F          ; And compute the address of the last cell
.3907f7	a8		tay		                TAY                 ; And set that as the destination address
.3907f8	3a		dec a		                DEC A               ; Compute the address of the character to the left
.3907f9	aa		tax		                TAX                 ; And make it the source
.3907fa	38		sec		                SEC                 ; Calculate the length of the block to move
.3907fb	a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.3907fd	e5 1a		sbc $1a		                SBC CURSORX
.3907ff	44 af af	mvp $af,$af	                MVP $AF, $AF        ; And move the block
.390802	e2 20		sep #$20	                SEP #$20        ; set A short
.390804	a9 20		lda #$20	                LDA #CHAR_SP        ; Put a blank space at the cursor position
.390806	87 17		sta [$17]	                STA [CURSORPOS]
.390808	28		plp		                PLP
.390809	2b		pld		                PLD
.39080a	68		pla		                PLA
.39080b	fa		plx		                PLX
.39080c	6b		rtl		                RTL
.39080d					IPUTB
.39080d	6b		rtl		                RTL
.39080e					IPRINTCR
.39080e	da		phx		                PHX
.39080f	5a		phy		                PHY
.390810	8b		phb		                PHB
.390811	0b		phd		                PHD
.390812	08		php		                PHP
.390813	48		pha		                PHA             ; begin setdbr macro
.390814	08		php		                PHP
.390815	e2 20		sep #$20	                SEP #$20        ; set A short
.390817	a9 00		lda #$00	                LDA #0
.390819	48		pha		                PHA
.39081a	ab		plb		                PLB
.39081b	28		plp		                PLP
.39081c	68		pla		                PLA             ; end setdbr macro
.39081d	48		pha		                PHA             ; begin setdp macro
.39081e	08		php		                PHP
.39081f	c2 20		rep #$20	                REP #$20        ; set A long
.390821	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390824	5b		tcd		                TCD
.390825	28		plp		                PLP
.390826	68		pla		                PLA             ; end setdp macro
.390827	e2 20		sep #$20	                SEP #$20        ; set A short
.390829	c2 10		rep #$10	                REP #$10        ; set X long
.39082b	af 03 07 00	lda $000703	                LDA @lCHAN_OUT
.39082f	f0 1c		beq $39084d	                BEQ scr_printcr
.390831	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.390833	f0 06		beq $39083b	                BEQ uart_printcr    ; Yes: handle printing to the UART
.390835	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.390837	f0 02		beq $39083b	                BEQ uart_printcr    ; Yes: handle printing to the UART
.390839	80 1c		bra $390857	                BRA done
.39083b	22 16 5a 39	jsl $395a16	uart_printcr    JSL UART_SELECT
.39083f	a9 0d		lda #$0d	                LDA #CHAR_CR
.390841	22 dc 06 39	jsl $3906dc	                JSL IPUTC
.390845	a9 0a		lda #$0a	                LDA #CHAR_LF
.390847	22 dc 06 39	jsl $3906dc	                JSL IPUTC
.39084b	80 0a		bra $390857	                BRA done
.39084d	a2 00 00	ldx #$0000	scr_printcr     LDX #0
.390850	a4 1c		ldy $1c		                LDY CURSORY
.390852	c8		iny		                INY
.390853	22 12 09 39	jsl $390912	                JSL ILOCATE
.390857	28		plp		done            PLP
.390858	2b		pld		                PLD
.390859	ab		plb		                PLB
.39085a	7a		ply		                PLY
.39085b	fa		plx		                PLX
.39085c	6b		rtl		                RTL
.39085d	da		phx		ICSRHOME        PHX
.39085e	5a		phy		                PHY
.39085f	08		php		                PHP
.390860	a2 00 00	ldx #$0000	                LDX #0
.390863	a0 00 00	ldy #$0000	                LDY #0
.390866	22 12 09 39	jsl $390912	                JSL ILOCATE
.39086a	28		plp		                PLP
.39086b	7a		ply		                PLY
.39086c	fa		plx		                PLX
.39086d	6b		rtl		                RTL
.39086e	da		phx		ICSRRIGHT       PHX
.39086f	5a		phy		                PHY
.390870	48		pha		                PHA
.390871	0b		phd		                PHD
.390872	08		php		                PHP
.390873	c2 20		rep #$20	                REP #$20        ; set A long
.390875	c2 10		rep #$10	                REP #$10        ; set X long
.390877	48		pha		                PHA             ; begin setdp macro
.390878	08		php		                PHP
.390879	c2 20		rep #$20	                REP #$20        ; set A long
.39087b	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.39087e	5b		tcd		                TCD
.39087f	28		plp		                PLP
.390880	68		pla		                PLA             ; end setdp macro
.390881	a6 1a		ldx $1a		                LDX CURSORX           ; Get the new column
.390883	e8		inx		                INX
.390884	a4 1c		ldy $1c		                LDY CURSORY           ; Get the current row
.390886	e4 0f		cpx $0f		                CPX COLS_VISIBLE      ; Are we off screen?
.390888	90 0d		bcc $390897	                BCC icsrright_nowrap  ; No: just set the position
.39088a	a2 00 00	ldx #$0000	                LDX #0                ; Yes: move to the first column
.39088d	c8		iny		                INY                   ; And move to the next row
.39088e	c4 13		cpy $13		                CPY LINES_VISIBLE     ; Are we still off screen?
.390890	90 05		bcc $390897	                BCC icsrright_nowrap  ; No: just set the position
.390892	88		dey		                DEY                   ; Yes: lock to the last row
.390893	22 5e 09 39	jsl $39095e	                JSL ISCROLLUP         ; But scroll the screen up
.390897					icsrright_nowrap
.390897	22 12 09 39	jsl $390912	                JSL ILOCATE           ; Set the cursor position
.39089b	28		plp		                PLP
.39089c	2b		pld		                PLD
.39089d	68		pla		                PLA
.39089e	7a		ply		                PLY
.39089f	fa		plx		                PLX
.3908a0	6b		rtl		                RTL
.3908a1					ICSRLEFT
.3908a1	da		phx		                PHX
.3908a2	5a		phy		                PHY
.3908a3	48		pha		                PHA
.3908a4	0b		phd		                PHD
.3908a5	08		php		                PHP
.3908a6	c2 30		rep #$30	                REP #$30        ; set A&X long
.3908a8	48		pha		                PHA             ; begin setdp macro
.3908a9	08		php		                PHP
.3908aa	c2 20		rep #$20	                REP #$20        ; set A long
.3908ac	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.3908af	5b		tcd		                TCD
.3908b0	28		plp		                PLP
.3908b1	68		pla		                PLA             ; end setdp macro
.3908b2	a5 1a		lda $1a		                LDA CURSORX
.3908b4	f0 0b		beq $3908c1	                BEQ icsrleft_done_already_zero ; Check that we are not already @ Zero
.3908b6	a6 1a		ldx $1a		                LDX CURSORX
.3908b8	ca		dex		                DEX
.3908b9	86 1a		stx $1a		                STX CURSORX
.3908bb	a4 1c		ldy $1c		                LDY CURSORY
.3908bd	22 12 09 39	jsl $390912	                JSL ILOCATE
.3908c1					icsrleft_done_already_zero
.3908c1	28		plp		                PLP
.3908c2	2b		pld		                PLD
.3908c3	68		pla		                PLA
.3908c4	7a		ply		                PLY
.3908c5	fa		plx		                PLX
.3908c6	6b		rtl		                RTL
.3908c7					ICSRUP
.3908c7	da		phx		                PHX
.3908c8	5a		phy		                PHY
.3908c9	48		pha		                PHA
.3908ca	0b		phd		                PHD
.3908cb	08		php		                PHP
.3908cc	c2 30		rep #$30	                REP #$30        ; set A&X long
.3908ce	48		pha		                PHA             ; begin setdp macro
.3908cf	08		php		                PHP
.3908d0	c2 20		rep #$20	                REP #$20        ; set A long
.3908d2	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.3908d5	5b		tcd		                TCD
.3908d6	28		plp		                PLP
.3908d7	68		pla		                PLA             ; end setdp macro
.3908d8	a5 1c		lda $1c		                LDA CURSORY
.3908da	f0 0b		beq $3908e7	                BEQ isrup_done_already_zero ; Check if we are not already @ Zero
.3908dc	a4 1c		ldy $1c		                LDY CURSORY
.3908de	88		dey		                DEY
.3908df	84 1c		sty $1c		                STY CURSORY
.3908e1	a6 1a		ldx $1a		                LDX CURSORX
.3908e3	22 12 09 39	jsl $390912	                JSL ILOCATE
.3908e7					isrup_done_already_zero
.3908e7	28		plp		                PLP
.3908e8	2b		pld		                PLD
.3908e9	68		pla		                PLA
.3908ea	7a		ply		                PLY
.3908eb	fa		plx		                PLX
.3908ec	6b		rtl		                RTL
.3908ed	da		phx		ICSRDOWN        PHX
.3908ee	5a		phy		                PHY
.3908ef	0b		phd		                PHD
.3908f0	c2 30		rep #$30	                REP #$30        ; set A&X long
.3908f2	48		pha		                PHA             ; begin setdp macro
.3908f3	08		php		                PHP
.3908f4	c2 20		rep #$20	                REP #$20        ; set A long
.3908f6	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.3908f9	5b		tcd		                TCD
.3908fa	28		plp		                PLP
.3908fb	68		pla		                PLA             ; end setdp macro
.3908fc	a6 1a		ldx $1a		                LDX CURSORX                 ; Get the current column
.3908fe	a4 1c		ldy $1c		                LDY CURSORY                 ; Get the new row
.390900	c8		iny		                INY
.390901	c4 13		cpy $13		                CPY LINES_VISIBLE           ; Check to see if we're off screen
.390903	90 05		bcc $39090a	                BCC icsrdown_noscroll       ; No: go ahead and set the position
.390905	88		dey		                DEY                         ; Yes: go back to the last row
.390906	22 5e 09 39	jsl $39095e	                JSL ISCROLLUP               ; But scroll the screen up
.39090a					icsrdown_noscroll
.39090a	22 12 09 39	jsl $390912	                JSL ILOCATE                 ; And set the cursor position
.39090e	2b		pld		                PLD
.39090f	7a		ply		                PLY
.390910	fa		plx		                PLX
.390911	6b		rtl		                RTL
.390912	48		pha		ILOCATE         PHA
.390913	0b		phd		                PHD
.390914	08		php		                PHP
.390915	48		pha		                PHA             ; begin setdp macro
.390916	08		php		                PHP
.390917	c2 20		rep #$20	                REP #$20        ; set A long
.390919	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39091c	5b		tcd		                TCD
.39091d	28		plp		                PLP
.39091e	68		pla		                PLA             ; end setdp macro
.39091f	c2 30		rep #$30	                REP #$30        ; set A&X long
.390921					ilocate_scroll
.390921	c4 13		cpy $13		                CPY LINES_VISIBLE
.390923	90 07		bcc $39092c	                BCC ilocate_scrolldone
.390925	22 5e 09 39	jsl $39095e	                JSL ISCROLLUP
.390929	88		dey		                DEY
.39092a	80 f5		bra $390921	                BRA ilocate_scroll
.39092c					ilocate_scrolldone
.39092c	86 1a		stx $1a		                STX CURSORX
.39092e	84 1c		sty $1c		                STY CURSORY
.390930	a5 0c		lda $0c		                LDA SCREENBEGIN
.390932					ilocate_row
.390932	c0 00 00	cpy #$0000	                CPY #$0
.390935	f0 08		beq $39093f	                BEQ ilocate_right
.390937	18		clc		ilocate_down    CLC
.390938	65 11		adc $11		                ADC COLS_PER_LINE
.39093a	88		dey		                DEY
.39093b	f0 02		beq $39093f	                BEQ ilocate_right
.39093d	80 f8		bra $390937	                BRA ilocate_down
.39093f	18		clc		ilocate_right   CLC
.390940	65 1a		adc $1a		                ADC CURSORX             ; move the cursor right X columns
.390942	85 17		sta $17		                STA CURSORPOS
.390944	a4 1c		ldy $1c		                LDY CURSORY
.390946	98		tya		                TYA
.390947	8f 16 00 af	sta $af0016	                STA @lVKY_TXT_CURSOR_Y_REG_L  ;Store in Vicky's registers
.39094b	8a		txa		                TXA
.39094c	8f 14 00 af	sta $af0014	                STA @lVKY_TXT_CURSOR_X_REG_L  ;Store in Vicky's register
.390950	c2 20		rep #$20	                REP #$20        ; set A long
.390952	18		clc		                CLC
.390953	a5 17		lda $17		                LDA CURSORPOS
.390955	69 00 20	adc #$2000	                ADC #<>(CS_COLOR_MEM_PTR - CS_TEXT_MEM_PTR)
.390958	85 1f		sta $1f		                STA COLORPOS
.39095a	28		plp		ilocate_done    PLP
.39095b	2b		pld		                PLD
.39095c	68		pla		                PLA
.39095d	6b		rtl		                RTL
.39095e					ISCROLLUP
.39095e	48		pha		                PHA
.39095f	da		phx		                PHX
.390960	5a		phy		                PHY
.390961	8b		phb		                PHB
.390962	0b		phd		                PHD
.390963	08		php		                PHP
.390964	48		pha		                PHA             ; begin setdp macro
.390965	08		php		                PHP
.390966	c2 20		rep #$20	                REP #$20        ; set A long
.390968	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39096b	5b		tcd		                TCD
.39096c	28		plp		                PLP
.39096d	68		pla		                PLA             ; end setdp macro
.39096e	c2 30		rep #$30	                REP #$30        ; set A&X long
.390970	a5 11		lda $11		                LDA COLS_PER_LINE
.390972	8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.390976	a5 13		lda $13		                LDA LINES_VISIBLE
.390978	8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.39097c	af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.390980	85 00		sta $00		                STA TMPPTR1
.390982	18		clc		                CLC
.390983	a9 00 a0	lda #$a000	                LDA #$A000
.390986	a8		tay		                TAY
.390987	65 11		adc $11		                ADC COLS_PER_LINE
.390989	aa		tax		                TAX
.39098a	a5 00		lda $00		                LDA TMPPTR1
.39098c	54 af af	mvn $af,$af	                MVN $AF,$AF
.39098f	c2 30		rep #$30	                REP #$30        ; set A&X long
.390991	18		clc		                CLC
.390992	a9 00 c0	lda #$c000	                LDA #$C000
.390995	a8		tay		                TAY
.390996	65 11		adc $11		                ADC COLS_PER_LINE
.390998	aa		tax		                TAX
.390999	a5 00		lda $00		                LDA TMPPTR1
.39099b	54 af af	mvn $af,$af	                MVN $AF,$AF
.39099e	a5 00		lda $00		                LDA TMPPTR1
.3909a0	48		pha		                PHA
.3909a1	18		clc		                CLC
.3909a2	69 00 a0	adc #$a000	                ADC #<>CS_TEXT_MEM_PTR
.3909a5	85 00		sta $00		                STA TMPPTR1
.3909a7	a0 00 00	ldy #$0000	                LDY #0
.3909aa	a9 20 00	lda #$0020	                LDA #' '
.3909ad	97 00		sta [$00],y	clr_text        STA [TMPPTR1],Y
.3909af	c8		iny		                INY
.3909b0	c4 0f		cpy $0f		                CPY COLS_VISIBLE
.3909b2	d0 f9		bne $3909ad	                BNE clr_text
.3909b4	68		pla		                PLA
.3909b5	18		clc		                CLC
.3909b6	69 00 c0	adc #$c000	                ADC #<>CS_COLOR_MEM_PTR
.3909b9	85 00		sta $00		                STA TMPPTR1
.3909bb	a0 00 00	ldy #$0000	                LDY #0
.3909be	a5 1e		lda $1e		                LDA CURCOLOR
.3909c0	97 00		sta [$00],y	clr_color       STA [TMPPTR1],Y
.3909c2	c8		iny		                INY
.3909c3	c4 0f		cpy $0f		                CPY COLS_VISIBLE
.3909c5	d0 f9		bne $3909c0	                BNE clr_color
.3909c7	28		plp		                PLP
.3909c8	2b		pld		                PLD
.3909c9	ab		plb		                PLB
.3909ca	7a		ply		                PLY
.3909cb	fa		plx		                PLX
.3909cc	68		pla		                PLA
.3909cd	6b		rtl		                RTL
.3909ce	08		php		IPRINTH         PHP
.3909cf	48		pha		                PHA
.3909d0					iprinth1
.3909d0	e2 20		sep #$20	                SEP #$20        ; set A short
.3909d2	bd 00 00	lda $0000,x	                LDA #0,b,x      ; Read the value to be printed
.3909d5	4a		lsr a		                LSR
.3909d6	4a		lsr a		                LSR
.3909d7	4a		lsr a		                LSR
.3909d8	4a		lsr a		                LSR
.3909d9	22 28 0a 39	jsl $390a28	                JSL iprint_digit
.3909dd	bd 00 00	lda $0000,x	                LDA #0,b,x
.3909e0	22 28 0a 39	jsl $390a28	                JSL iprint_digit
.3909e4	ca		dex		                DEX
.3909e5	88		dey		                DEY
.3909e6	d0 e8		bne $3909d0	                BNE iprinth1
.3909e8	68		pla		                PLA
.3909e9	28		plp		                PLP
.3909ea	6b		rtl		                RTL
.3909eb					IPRINTAH
.3909eb	48		pha		                PHA
.3909ec	08		php		                PHP
.3909ed	8f 44 02 00	sta $000244	                STA @lCPUA            ; Save A where we can use it multiple times
.3909f1	08		php		                PHP                   ; Get the processor status into A
.3909f2	e2 20		sep #$20	                SEP #$20        ; set A short
.3909f4	c2 10		rep #$10	                REP #$10        ; set X long
.3909f6	68		pla		                PLA
.3909f7	29 20		and #$20	                AND #%00100000        ; Is M = 1?
.3909f9	c9 20		cmp #$20	                CMP #%00100000
.3909fb	f0 14		beq $390a11	                BEQ eight_bit
.3909fd	af 46 02 00	lda $000246	                LDA @lCPUA+2          ; Get nibble [15..12]
.390a01	4a		lsr a		                LSR A
.390a02	4a		lsr a		                LSR A
.390a03	4a		lsr a		                LSR A
.390a04	4a		lsr a		                LSR A
.390a05	22 28 0a 39	jsl $390a28	                JSL iprint_digit      ; And print it
.390a09	af 46 02 00	lda $000246	                LDA @lCPUA+2          ; Get nibble [11..8]
.390a0d	22 28 0a 39	jsl $390a28	                JSL iprint_digit      ; And print it
.390a11	af 44 02 00	lda $000244	eight_bit       LDA @lCPUA            ; Get nibble [7..4]
.390a15	4a		lsr a		                LSR A
.390a16	4a		lsr a		                LSR A
.390a17	4a		lsr a		                LSR A
.390a18	4a		lsr a		                LSR A
.390a19	22 28 0a 39	jsl $390a28	                JSL iprint_digit      ; And print it
.390a1d	af 44 02 00	lda $000244	                LDA @lCPUA            ; Get nibble [3..0]
.390a21	22 28 0a 39	jsl $390a28	                JSL iprint_digit      ; And print it
.390a25	28		plp		                PLP
.390a26	68		pla		                PLA
.390a27	6b		rtl		                RTL
.390a28	da		phx		iprint_digit    PHX
.390a29	c2 20		rep #$20	                REP #$20        ; set A long
.390a2b	29 0f 00	and #$000f	                AND #$0F
.390a2e	aa		tax		                TAX
.390a2f	bf 6a 70 39	lda $39706a,x	                LDA hex_digits,X
.390a33	22 dc 06 39	jsl $3906dc	                JSL IPUTC       ; Print the digit
.390a37	fa		plx		                PLX
.390a38	6b		rtl		                RTL
.390a39	48		pha		ICLRSCREEN	    PHA
.390a3a	da		phx		                PHX
.390a3b	08		php		                PHP
.390a3c	e2 20		sep #$20	                SEP #$20        ; set A short
.390a3e	c2 10		rep #$10	                REP #$10        ; set X long
.390a40	a2 00 00	ldx #$0000	                LDX #$0000		          ; Only Use One Pointer
.390a43	a9 20		lda #$20	                LDA #$20		            ; Fill the Entire Screen with Space
.390a45	9f 00 a0 af	sta $afa000,x	iclearloop0	    STA CS_TEXT_MEM_PTR, x	;
.390a49	e8		inx		                inx
.390a4a	e0 00 20	cpx #$2000	                cpx #$2000
.390a4d	d0 f6		bne $390a45	                bne iclearloop0
.390a4f	a2 00 00	ldx #$0000	                LDX	#$0000		          ; Only Use One Pointer
.390a52	af 1e 00 00	lda $00001e	                LDA @lCURCOLOR          ; Fill the Color Memory with the current color
.390a56	9f 00 c0 af	sta $afc000,x	iclearloop1	    STA CS_COLOR_MEM_PTR, x	;
.390a5a	e8		inx		                inx
.390a5b	e0 00 20	cpx #$2000	                cpx #$2000
.390a5e	d0 f6		bne $390a56	                bne iclearloop1
.390a60	28		plp		                PLP
.390a61	fa		plx		                PLX
.390a62	68		pla		                PLA
.390a63	6b		rtl		                RTL
.390a64					COPYBYTES42
.390a64	08		php		                PHP
.390a65	0b		phd		                PHD
.390a66	48		pha		                PHA             ; begin setdp macro
.390a67	08		php		                PHP
.390a68	c2 20		rep #$20	                REP #$20        ; set A long
.390a6a	a9 00 00	lda #$0000	                LDA #TMPPTR1         ; set DP to page 0
.390a6d	5b		tcd		                TCD
.390a6e	28		plp		                PLP
.390a6f	68		pla		                PLA             ; end setdp macro
.390a70	e2 20		sep #$20	                SEP #$20        ; set A short
.390a72	c2 10		rep #$10	                REP #$10        ; set X long
.390a74	a0 00 00	ldy #$0000	                LDY #0
.390a77	b7 00		lda [$00],y	copy_loop       LDA [TMPPTR1],Y
.390a79	97 04		sta [$04],y	                STA [TMPPTR2],Y
.390a7b	c8		iny		                INY
.390a7c	c0 2a 00	cpy #$002a	                CPY #42
.390a7f	d0 f6		bne $390a77	                BNE copy_loop
.390a81	2b		pld		                PLD
.390a82	28		plp		                PLP
.390a83	60		rts		                RTS
.390a84					ICOLORFLAG
.390a84	48		pha		                PHA
.390a85	da		phx		                PHX
.390a86	5a		phy		                PHY
.390a87	08		php		                PHP
.390a88	8b		phb		                PHB
.390a89	0b		phd		                PHD
.390a8a	48		pha		                PHA             ; begin setdp macro
.390a8b	08		php		                PHP
.390a8c	c2 20		rep #$20	                REP #$20        ; set A long
.390a8e	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390a91	5b		tcd		                TCD
.390a92	28		plp		                PLP
.390a93	68		pla		                PLA             ; end setdp macro
.390a94	c2 30		rep #$30	                REP #$30        ; set A&X long
.390a96	a9 00 c0	lda #$c000	                LDA #<>CS_COLOR_MEM_PTR
.390a99	85 04		sta $04		                STA TMPPTR2
.390a9b	a9 af 00	lda #$00af	                LDA #`CS_COLOR_MEM_PTR
.390a9e	85 06		sta $06		                STA TMPPTR2+2
.390aa0	a9 41 6d	lda #$6d41	                LDA #<>greet_clr_line1
.390aa3	85 00		sta $00		                STA TMPPTR1
.390aa5	a9 39 00	lda #$0039	                LDA #`greet_clr_line1
.390aa8	85 02		sta $02		                STA TMPPTR1+2
.390aaa	20 64 0a	jsr $390a64	                JSR COPYBYTES42
.390aad	18		clc		                CLC
.390aae	a5 04		lda $04		                LDA TMPPTR2
.390ab0	65 11		adc $11		                ADC COLS_PER_LINE
.390ab2	85 04		sta $04		                STA TMPPTR2
.390ab4	a9 6b 6d	lda #$6d6b	                LDA #<>greet_clr_line2
.390ab7	85 00		sta $00		                STA TMPPTR1
.390ab9	a9 39 00	lda #$0039	                LDA #`greet_clr_line2
.390abc	85 02		sta $02		                STA TMPPTR1+2
.390abe	20 64 0a	jsr $390a64	                JSR COPYBYTES42
.390ac1	18		clc		                CLC
.390ac2	a5 04		lda $04		                LDA TMPPTR2
.390ac4	65 11		adc $11		                ADC COLS_PER_LINE
.390ac6	85 04		sta $04		                STA TMPPTR2
.390ac8	a9 95 6d	lda #$6d95	                LDA #<>greet_clr_line3
.390acb	85 00		sta $00		                STA TMPPTR1
.390acd	a9 39 00	lda #$0039	                LDA #`greet_clr_line3
.390ad0	85 02		sta $02		                STA TMPPTR1+2
.390ad2	20 64 0a	jsr $390a64	                JSR COPYBYTES42
.390ad5	18		clc		                CLC
.390ad6	a5 04		lda $04		                LDA TMPPTR2
.390ad8	65 11		adc $11		                ADC COLS_PER_LINE
.390ada	85 04		sta $04		                STA TMPPTR2
.390adc	a9 bf 6d	lda #$6dbf	                LDA #<>greet_clr_line4
.390adf	85 00		sta $00		                STA TMPPTR1
.390ae1	a9 39 00	lda #$0039	                LDA #`greet_clr_line4
.390ae4	85 02		sta $02		                STA TMPPTR1+2
.390ae6	20 64 0a	jsr $390a64	                JSR COPYBYTES42
.390ae9	18		clc		                CLC
.390aea	a5 04		lda $04		                LDA TMPPTR2
.390aec	65 11		adc $11		                ADC COLS_PER_LINE
.390aee	85 04		sta $04		                STA TMPPTR2
.390af0	a9 e9 6d	lda #$6de9	                LDA #<>greet_clr_line5
.390af3	85 00		sta $00		                STA TMPPTR1
.390af5	a9 39 00	lda #$0039	                LDA #`greet_clr_line5
.390af8	85 02		sta $02		                STA TMPPTR1+2
.390afa	20 64 0a	jsr $390a64	                JSR COPYBYTES42
.390afd	2b		pld		                PLD
.390afe	ab		plb		                PLB
.390aff	28		plp		                PLP
.390b00	7a		ply		                PLY
.390b01	fa		plx		                PLX
.390b02	68		pla		                PLA
.390b03	6b		rtl		                RTL
.390b04	0b		phd		IINITCHLUT		  PHD
.390b05	08		php		                PHP
.390b06	48		pha		                PHA
.390b07	da		phx		                PHX
.390b08	e2 20		sep #$20	                SEP #$20        ; set A short
.390b0a	e2 10		sep #$10	                SEP #$10        ; set X short
.390b0c	a2 00		ldx #$00					        LDX	#$00
.390b0e	bf 13 6e 39	lda $396e13,x	lutinitloop0	  LDA @lfg_color_lut,x		; get Local Data
.390b12	9f 40 1f af	sta $af1f40,x	                STA FG_CHAR_LUT_PTR,x	; Write in LUT Memory
.390b16	e8		inx		                inx
.390b17	e0 40		cpx #$40	                cpx #$40
.390b19	d0 f3		bne $390b0e	                bne lutinitloop0
.390b1b	a2 00		ldx #$00	                LDX	#$00
.390b1d	bf 53 6e 39	lda $396e53,x	lutinitloop1	  LDA @lbg_color_lut,x		; get Local Data
.390b21	9f 80 1f af	sta $af1f80,x	                STA BG_CHAR_LUT_PTR,x	; Write in LUT Memory
.390b25	e8		inx		                INX
.390b26	e0 40		cpx #$40	                CPX #$40
.390b28	d0 f3		bne $390b1d	                bne lutinitloop1
.390b2a	c2 20		rep #$20	                REP #$20        ; set A long
.390b2c	c2 10		rep #$10	                REP #$10        ; set X long
.390b2e	fa		plx		                PLX
.390b2f	68		pla		                PLA
.390b30	28		plp		                PLP
.390b31	2b		pld		                PLD
.390b32	6b		rtl		                RTL
.390b33					IINITGAMMATABLE
.390b33	e2 20		sep #$20	                SEP #$20        ; set A short
.390b35	c2 10		rep #$10	                REP #$10        ; set X long
.390b37	a2 00 00	ldx #$0000	                ldx #$0000
.390b3a	bf 00 75 39	lda $397500,x	initgammaloop   LDA GAMMA_1_8_Tbl, x
.390b3e	9f 00 40 af	sta $af4000,x	                STA GAMMA_B_LUT_PTR, x
.390b42	9f 00 41 af	sta $af4100,x	                STA GAMMA_G_LUT_PTR, x
.390b46	9f 00 42 af	sta $af4200,x	                STA GAMMA_R_LUT_PTR, x
.390b4a	e8		inx		                inx
.390b4b	e0 00 01	cpx #$0100	                cpx #$0100
.390b4e	d0 ea		bne $390b3a	                bne initgammaloop
.390b50	c2 30		rep #$30	                REP #$30        ; set A&X long
.390b52	6b		rtl		                RTL
.390b53	48		pha		IINITALLLUT     PHA
.390b54	da		phx		                PHX
.390b55	a2 00 00	ldx #$0000	                LDX #$0000
.390b58	e2 20		sep #$20	                SEP #$20        ; set A short
.390b5a	a9 00		lda #$00	                LDA #$00
.390b5c	85 0a		sta $0a		                STA $0A     ; Temp Location
.390b5e					iinit_lut_loop
.390b5e	86 02		stx $02		                STX $02
.390b60	a6 0a		ldx $0a		                LDX $0A
.390b62	bf 00 74 39	lda $397400,x	                LDA GAMMA_2_2_Tbl, x
.390b66	49 55		eor #$55	                EOR  #$55
.390b68	a6 02		ldx $02		                LDX $02
.390b6a	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390b6e	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390b72	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390b76	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390b7a	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390b7e	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390b82	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390b86	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390b8a	e8		inx		                inx
.390b8b	86 02		stx $02		                STX $02
.390b8d	a6 0a		ldx $0a		                LDX $0A
.390b8f	bf 00 76 39	lda $397600,x	                LDA RANDOM_LUT_Tbl, x
.390b93	a6 02		ldx $02		                LDX $02
.390b95	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390b99	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390b9d	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390ba1	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390ba5	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390ba9	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390bad	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390bb1	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390bb5	e8		inx		                inx
.390bb6	86 02		stx $02		                STX $02
.390bb8	a6 0a		ldx $0a		                LDX $0A
.390bba	bf 00 75 39	lda $397500,x	                LDA GAMMA_1_8_Tbl, x
.390bbe	49 aa		eor #$aa	                EOR  #$AA
.390bc0	a6 02		ldx $02		                LDX $02
.390bc2	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390bc6	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390bca	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390bce	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390bd2	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390bd6	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390bda	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390bde	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390be2	e8		inx		                inx
.390be3	a9 ff		lda #$ff	                LDA #$FF
.390be5	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390be9	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390bed	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390bf1	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390bf5	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390bf9	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390bfd	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390c01	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390c05	e6 0a		inc $0a		                inc $0A
.390c07	e8		inx		                inx
.390c08	e0 00 04	cpx #$0400	                cpx #$0400
.390c0b	f0 03		beq $390c10	                beq iinit_lut_exit
.390c0d	82 4e ff	brl $390b5e	                brl iinit_lut_loop
.390c10					iinit_lut_exit
.390c10	c2 30		rep #$30	                REP #$30        ; set A&X long
.390c12	fa		plx		                PLX
.390c13	68		pla		                PLA
.390c14	6b		rtl		                RTL
.390c15	48		pha		IINITVKYTXTMODE PHA
.390c16	08		php		                PHP
.390c17	e2 20		sep #$20	                SEP #$20        ; set A short
.390c19	a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En       ; Okay, this Enables the Text Mode (Video Display)
.390c1b	8f 00 00 af	sta $af0000	                STA MASTER_CTRL_REG_L
.390c1f	a9 00		lda #$00	                LDA #0                            ; 640x480 mode (80 columns max)
.390c21	8f 01 00 af	sta $af0001	                STA @lMASTER_CTRL_REG_H
.390c25	a9 20		lda #$20	                LDA #$20
.390c27	8f 05 00 af	sta $af0005	                STA BORDER_COLOR_B
.390c2b	8f 07 00 af	sta $af0007	                STA BORDER_COLOR_R
.390c2f	a9 00		lda #$00	                LDA #$00
.390c31	8f 06 00 af	sta $af0006	                STA BORDER_COLOR_G
.390c35	a9 01		lda #$01	                LDA #Border_Ctrl_Enable           ; Enable the Border
.390c37	8f 04 00 af	sta $af0004	                STA BORDER_CTRL_REG
.390c3b	a9 20		lda #$20	                LDA #32                           ; Set the border to the standard 32 pixels
.390c3d	8f 08 00 af	sta $af0008	                STA BORDER_X_SIZE
.390c41	8f 09 00 af	sta $af0009	                STA BORDER_Y_SIZE
.390c45	c2 30		rep #$30	                REP #$30        ; set A&X long
.390c47	22 4e 0c 39	jsl $390c4e	                JSL ISETSIZES                     ; Calculate the size of the text screen
.390c4b	28		plp		                PLP
.390c4c	68		pla		                PLA
.390c4d	6b		rtl		                RTL
.390c4e					ISETSIZES
.390c4e	48		pha		                PHA
.390c4f	da		phx		                PHX
.390c50	5a		phy		                PHY
.390c51	8b		phb		                PHB
.390c52	0b		phd		                PHD
.390c53	08		php		                PHP
.390c54	48		pha		                PHA             ; begin setdp macro
.390c55	08		php		                PHP
.390c56	c2 20		rep #$20	                REP #$20        ; set A long
.390c58	a9 00 00	lda #$0000	                LDA #<>BANK0_BEGIN         ; set DP to page 0
.390c5b	5b		tcd		                TCD
.390c5c	28		plp		                PLP
.390c5d	68		pla		                PLA             ; end setdp macro
.390c5e	48		pha		                PHA             ; begin setdbr macro
.390c5f	08		php		                PHP
.390c60	e2 20		sep #$20	                SEP #$20        ; set A short
.390c62	a9 00		lda #$00	                LDA #0
.390c64	48		pha		                PHA
.390c65	ab		plb		                PLB
.390c66	28		plp		                PLP
.390c67	68		pla		                PLA             ; end setdbr macro
.390c68	e2 30		sep #$30	                SEP #$30        ; set A&X short
.390c6a	af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.390c6e	29 03		and #$03	                AND #$03                    ; Mask off the resolution bits
.390c70	0a		asl a		                ASL A
.390c71	aa		tax		                TAX                         ; Index to the col/line count in X
.390c72	c2 20		rep #$20	                REP #$20        ; set A long
.390c74	bf f1 0c 39	lda $390cf1,x	                LDA cols_by_res,X           ; Get the number of columns
.390c78	85 11		sta $11		                STA COLS_PER_LINE           ; This is how many columns there are per line in the memory
.390c7a	85 0f		sta $0f		                STA COLS_VISIBLE            ; This is how many would be visible with no border
.390c7c	bf f9 0c 39	lda $390cf9,x	                LDA lines_by_res,X          ; Get the number of lines
.390c80	85 15		sta $15		                STA LINES_MAX               ; This is the total number of lines in memory
.390c82	85 13		sta $13		                STA LINES_VISIBLE           ; This is how many lines would be visible with no border
.390c84	e2 20		sep #$20	                SEP #$20        ; set A short
.390c86	af 04 00 af	lda $af0004	                LDA @l BORDER_CTRL_REG      ; Check to see if we have a border
.390c8a	89 01		bit #$01	                BIT #Border_Ctrl_Enable
.390c8c	f0 5c		beq $390cea	                BEQ done                    ; No border... the sizes are correct now
.390c8e	af 08 00 af	lda $af0008	                LDA @l BORDER_X_SIZE        ; Get the horizontal border width
.390c92	29 3f		and #$3f	                AND #$3F
.390c94	89 03		bit #$03	                BIT #$03                    ; Check the lower two bits... indicates a partial column is eaten
.390c96	d0 04		bne $390c9c	                BNE frac_width
.390c98	4a		lsr a		                LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.390c99	4a		lsr a		                LSR A
.390c9a	80 03		bra $390c9f	                BRA store_width
.390c9c	4a		lsr a		frac_width      LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.390c9d	4a		lsr a		                LSR A                       ; because a column is partially hidden
.390c9e	1a		inc a		                INC A
.390c9f	85 00		sta $00		store_width     STA TMPPTR1
.390ca1	64 01		stz $01		                STZ TMPPTR1+1
.390ca3	e2 20		sep #$20	                SEP #$20        ; set A short
.390ca5	af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H    ; Check if we're pixel doubling
.390ca9	89 02		bit #$02	                BIT #Mstr_Ctrl_Video_Mode1
.390cab	f0 04		beq $390cb1	                BEQ adjust_width            ; No... just adjust the width of the screen
.390cad	c2 20		rep #$20	                REP #$20        ; set A long
.390caf	46 00		lsr $00		                LSR TMPPTR1                 ; Yes... cut the adjustment in half
.390cb1					adjust_width
.390cb1	c2 20		rep #$20	                REP #$20        ; set A long
.390cb3	38		sec		                SEC
.390cb4	a5 11		lda $11		                LDA COLS_PER_LINE
.390cb6	e5 00		sbc $00		                SBC TMPPTR1
.390cb8	85 0f		sta $0f		                STA COLS_VISIBLE
.390cba	af 09 00 af	lda $af0009	                LDA @l BORDER_Y_SIZE        ; Get the horizontal border width
.390cbe	29 3f 00	and #$003f	                AND #$3F
.390cc1	89 03 00	bit #$0003	                BIT #$03                    ; Check the lower two bits... indicates a partial column is eaten
.390cc4	d0 04		bne $390cca	                BNE frac_height
.390cc6	4a		lsr a		                LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.390cc7	4a		lsr a		                LSR A
.390cc8	80 03		bra $390ccd	                BRA store_height
.390cca	4a		lsr a		frac_height     LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.390ccb	4a		lsr a		                LSR A                       ; because a column is partially hidden
.390ccc	1a		inc a		                INC A
.390ccd	85 00		sta $00		store_height    STA TMPPTR1
.390ccf	64 01		stz $01		                STZ TMPPTR1+1
.390cd1	e2 20		sep #$20	                SEP #$20        ; set A short
.390cd3	af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H    ; Check if we're pixel doubling
.390cd7	89 02		bit #$02	                BIT #Mstr_Ctrl_Video_Mode1
.390cd9	f0 04		beq $390cdf	                BEQ adjust_height           ; No... just adjust the height of the screen
.390cdb	c2 20		rep #$20	                REP #$20        ; set A long
.390cdd	46 00		lsr $00		                LSR TMPPTR1                 ; Yes... cut the adjustment in half
.390cdf					adjust_height
.390cdf	c2 20		rep #$20	                REP #$20        ; set A long
.390ce1	38		sec		                SEC
.390ce2	a5 15		lda $15		                LDA LINES_MAX
.390ce4	e5 00		sbc $00		                SBC TMPPTR1
.390ce6	85 13		sta $13		                STA LINES_VISIBLE
.390ce8	c2 30		rep #$30	                REP #$30        ; set A&X long
.390cea	28		plp		done            PLP
.390ceb	2b		pld		                PLD
.390cec	ab		plb		                PLB
.390ced	7a		ply		                PLY
.390cee	fa		plx		                PLX
.390cef	68		pla		                PLA
.390cf0	6b		rtl		                RTL
>390cf1	50 00 64 00 28 00 32 00		cols_by_res     .word 80,100,40,50
>390cf9	3c 00 4b 00 1e 00 25 00		lines_by_res    .word 60,75,30,37
.390d01					IINITVKYGRPMODE
.390d01	48		pha		                PHA
.390d02	e2 20		sep #$20	                SEP #$20        ; set A short
.390d04	a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.390d06	8f 00 01 af	sta $af0100	                STA @lBM0_CONTROL_REG
.390d0a	a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.390d0c	8f 01 01 af	sta $af0101	                STA @lBM0_START_ADDY_L
.390d10	a9 c0		lda #$c0	                LDA #$C0
.390d12	8f 02 01 af	sta $af0102	                STA @lBM0_START_ADDY_M
.390d16	a9 00		lda #$00	                LDA #$00
.390d18	8f 03 01 af	sta $af0103	                STA @lBM0_START_ADDY_H ; This address is always base from
.390d1c	a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.390d1e	8f 08 01 af	sta $af0108	                STA @lBM1_CONTROL_REG
.390d22	a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.390d24	8f 09 01 af	sta $af0109	                STA @lBM1_START_ADDY_L
.390d28	a9 c0		lda #$c0	                LDA #$C0
.390d2a	8f 0a 01 af	sta $af010a	                STA @lBM1_START_ADDY_M
.390d2e	a9 00		lda #$00	                LDA #$00
.390d30	8f 0b 01 af	sta $af010b	                STA @lBM1_START_ADDY_H ; This address is always base from
.390d34	c2 30		rep #$30	                REP #$30        ; set A&X long
.390d36	68		pla		                PLA
.390d37	6b		rtl		                RTL
.390d38					IINITTILEMODE
.390d38	6b		rtl		                RTL
.390d39	48		pha		IINITSPRITE     PHA
.390d3a	e2 20		sep #$20	                SEP #$20        ; set A short
.390d3c	a9 03		lda #$03	                LDA #$03    ; Enable 17 Sprites
.390d3e	8f 00 08 af	sta $af0800	                STA SP00_CONTROL_REG
.390d42	8f 08 08 af	sta $af0808	                STA SP01_CONTROL_REG
.390d46	8f 10 08 af	sta $af0810	                STA SP02_CONTROL_REG
.390d4a	8f 18 08 af	sta $af0818	                STA SP03_CONTROL_REG
.390d4e	8f 20 08 af	sta $af0820	                STA SP04_CONTROL_REG
.390d52	8f 28 08 af	sta $af0828	                STA SP05_CONTROL_REG
.390d56	8f 30 08 af	sta $af0830	                STA SP06_CONTROL_REG
.390d5a	8f 38 08 af	sta $af0838	                STA SP07_CONTROL_REG
.390d5e	8f 40 08 af	sta $af0840	                STA SP08_CONTROL_REG
.390d62	8f 48 08 af	sta $af0848	                STA SP09_CONTROL_REG
.390d66	8f 50 08 af	sta $af0850	                STA SP10_CONTROL_REG
.390d6a	8f 58 08 af	sta $af0858	                STA SP11_CONTROL_REG
.390d6e	8f 60 08 af	sta $af0860	                STA SP12_CONTROL_REG
.390d72	8f 68 08 af	sta $af0868	                STA SP13_CONTROL_REG
.390d76	8f 70 08 af	sta $af0870	                STA SP14_CONTROL_REG
.390d7a	8f 78 08 af	sta $af0878	                STA SP15_CONTROL_REG
.390d7e	8f 80 08 af	sta $af0880	                STA SP16_CONTROL_REG
.390d82	a9 09		lda #$09	                LDA #$09
.390d84	8f 03 08 af	sta $af0803	                STA SP00_ADDY_PTR_H
.390d88	8f 0b 08 af	sta $af080b	                STA SP01_ADDY_PTR_H
.390d8c	8f 13 08 af	sta $af0813	                STA SP02_ADDY_PTR_H
.390d90	8f 1b 08 af	sta $af081b	                STA SP03_ADDY_PTR_H
.390d94	8f 23 08 af	sta $af0823	                STA SP04_ADDY_PTR_H
.390d98	8f 2b 08 af	sta $af082b	                STA SP05_ADDY_PTR_H
.390d9c	8f 33 08 af	sta $af0833	                STA SP06_ADDY_PTR_H
.390da0	8f 3b 08 af	sta $af083b	                STA SP07_ADDY_PTR_H
.390da4	8f 43 08 af	sta $af0843	                STA SP08_ADDY_PTR_H
.390da8	8f 4b 08 af	sta $af084b	                STA SP09_ADDY_PTR_H
.390dac	8f 53 08 af	sta $af0853	                STA SP10_ADDY_PTR_H
.390db0	8f 5b 08 af	sta $af085b	                STA SP11_ADDY_PTR_H
.390db4	8f 63 08 af	sta $af0863	                STA SP12_ADDY_PTR_H
.390db8	8f 6b 08 af	sta $af086b	                STA SP13_ADDY_PTR_H
.390dbc	8f 73 08 af	sta $af0873	                STA SP14_ADDY_PTR_H
.390dc0	8f 7b 08 af	sta $af087b	                STA SP15_ADDY_PTR_H
.390dc4	8f 83 08 af	sta $af0883	                STA SP16_ADDY_PTR_H
.390dc8	a9 00		lda #$00	                LDA #$00
.390dca	8f 02 08 af	sta $af0802	                STA SP00_ADDY_PTR_M
.390dce	a9 04		lda #$04	                LDA #$04
.390dd0	8f 0a 08 af	sta $af080a	                STA SP01_ADDY_PTR_M
.390dd4	a9 08		lda #$08	                LDA #$08
.390dd6	8f 12 08 af	sta $af0812	                STA SP02_ADDY_PTR_M
.390dda	a9 0c		lda #$0c	                LDA #$0C
.390ddc	8f 1a 08 af	sta $af081a	                STA SP03_ADDY_PTR_M
.390de0	a9 10		lda #$10	                LDA #$10
.390de2	8f 22 08 af	sta $af0822	                STA SP04_ADDY_PTR_M
.390de6	a9 14		lda #$14	                LDA #$14
.390de8	8f 2a 08 af	sta $af082a	                STA SP05_ADDY_PTR_M
.390dec	a9 18		lda #$18	                LDA #$18
.390dee	8f 32 08 af	sta $af0832	                STA SP06_ADDY_PTR_M
.390df2	a9 1c		lda #$1c	                LDA #$1C
.390df4	8f 3a 08 af	sta $af083a	                STA SP07_ADDY_PTR_M
.390df8	a9 20		lda #$20	                LDA #$20
.390dfa	8f 42 08 af	sta $af0842	                STA SP08_ADDY_PTR_M
.390dfe	a9 24		lda #$24	                LDA #$24
.390e00	8f 4a 08 af	sta $af084a	                STA SP09_ADDY_PTR_M
.390e04	a9 28		lda #$28	                LDA #$28
.390e06	8f 52 08 af	sta $af0852	                STA SP10_ADDY_PTR_M
.390e0a	a9 2c		lda #$2c	                LDA #$2C
.390e0c	8f 5a 08 af	sta $af085a	                STA SP11_ADDY_PTR_M
.390e10	a9 30		lda #$30	                LDA #$30
.390e12	8f 62 08 af	sta $af0862	                STA SP12_ADDY_PTR_M
.390e16	a9 34		lda #$34	                LDA #$34
.390e18	8f 6a 08 af	sta $af086a	                STA SP13_ADDY_PTR_M
.390e1c	a9 38		lda #$38	                LDA #$38
.390e1e	8f 72 08 af	sta $af0872	                STA SP14_ADDY_PTR_M
.390e22	a9 3c		lda #$3c	                LDA #$3C
.390e24	8f 7a 08 af	sta $af087a	                STA SP15_ADDY_PTR_M
.390e28	a9 40		lda #$40	                LDA #$40
.390e2a	8f 82 08 af	sta $af0882	                STA SP16_ADDY_PTR_M
.390e2e	a9 00		lda #$00	                LDA #$00
.390e30	8f 01 08 af	sta $af0801	                STA SP00_ADDY_PTR_L
.390e34	8f 09 08 af	sta $af0809	                STA SP01_ADDY_PTR_L
.390e38	8f 11 08 af	sta $af0811	                STA SP02_ADDY_PTR_L
.390e3c	8f 19 08 af	sta $af0819	                STA SP03_ADDY_PTR_L
.390e40	8f 21 08 af	sta $af0821	                STA SP04_ADDY_PTR_L
.390e44	8f 29 08 af	sta $af0829	                STA SP05_ADDY_PTR_L
.390e48	8f 31 08 af	sta $af0831	                STA SP06_ADDY_PTR_L
.390e4c	8f 39 08 af	sta $af0839	                STA SP07_ADDY_PTR_L
.390e50	8f 41 08 af	sta $af0841	                STA SP08_ADDY_PTR_L
.390e54	8f 49 08 af	sta $af0849	                STA SP09_ADDY_PTR_L
.390e58	8f 51 08 af	sta $af0851	                STA SP10_ADDY_PTR_L
.390e5c	8f 59 08 af	sta $af0859	                STA SP11_ADDY_PTR_L
.390e60	8f 61 08 af	sta $af0861	                STA SP12_ADDY_PTR_L
.390e64	8f 69 08 af	sta $af0869	                STA SP13_ADDY_PTR_L
.390e68	8f 71 08 af	sta $af0871	                STA SP14_ADDY_PTR_L
.390e6c	8f 79 08 af	sta $af0879	                STA SP15_ADDY_PTR_L
.390e70	8f 81 08 af	sta $af0881	                STA SP16_ADDY_PTR_L
.390e74	68		pla		                PLA
.390e75	6b		rtl		                RTL
.390e76					IINITFONTSET
.390e76	e2 20		sep #$20	                SEP #$20        ; set A short
.390e78	c2 10		rep #$10	                REP #$10        ; set X long
.390e7a	a2 00 00	ldx #$0000	                LDX #$0000
.390e7d					initFontsetbranch0
.390e7d	bf 00 f0 3f	lda $3ff000,x	                LDA @lFONT_4_BANK0,X    ; RAM Content
.390e81	9f 00 80 af	sta $af8000,x	                STA @lFONT_MEMORY_BANK0,X ; Vicky FONT RAM Bank
.390e85	e8		inx		                INX
.390e86	e0 00 08	cpx #$0800	                CPX #$0800
.390e89	d0 f2		bne $390e7d	                BNE initFontsetbranch0
.390e8b	ea		nop		                NOP
.390e8c	a2 00 00	ldx #$0000	                LDX #$0000
.390e8f					initFontsetbranch1
.390e8f	bf 00 f8 3f	lda $3ff800,x	                LDA @lFONT_4_BANK1,X
.390e93	9f 00 88 af	sta $af8800,x	                STA @lFONT_MEMORY_BANK1,X ; Vicky FONT RAM Bank
.390e97	e8		inx		                INX
.390e98	e0 00 08	cpx #$0800	                CPX #$0800
.390e9b	d0 f2		bne $390e8f	                BNE initFontsetbranch1
.390e9d	ea		nop		                NOP
.390e9e	c2 30		rep #$30	                REP #$30        ; set A&X long
.390ea0	6b		rtl		                RTL
.390ea1					INITMOUSEPOINTER
.390ea1	e2 20		sep #$20	                SEP #$20        ; set A short
.390ea3	c2 10		rep #$10	                REP #$10        ; set X long
.390ea5	a2 00 00	ldx #$0000	                LDX #$0000
.390ea8					FILL_MOUSE_MARKER
.390ea8	bf 00 77 39	lda $397700,x	                LDA @lMOUSE_POINTER_PTR,X
.390eac	9f 00 05 af	sta $af0500,x	                STA @lMOUSE_PTR_GRAP0_START, X
.390eb0	e8		inx		                INX
.390eb1	e0 00 01	cpx #$0100	                CPX #$0100
.390eb4	d0 f2		bne $390ea8	                BNE FILL_MOUSE_MARKER
.390eb6	ea		nop		                nop
.390eb7	a9 01		lda #$01	                LDA #$01
.390eb9	8f 00 07 af	sta $af0700	                STA @lMOUSE_PTR_CTRL_REG_L  ; Enable Mouse, Mouse Pointer Graphic Bank 0
.390ebd	c2 30		rep #$30	                REP #$30        ; set A&X long
.390ebf	6b		rtl		                RTL
.390ec0	48		pha		IINITCURSOR     PHA
.390ec1	e2 20		sep #$20	                SEP #$20        ; set A short
.390ec3	a9 b1		lda #$b1	                LDA #$B1      ;The Cursor Character will be a Fully Filled Block
.390ec5	8f 12 00 af	sta $af0012	                STA VKY_TXT_CURSOR_CHAR_REG
.390ec9	a9 03		lda #$03	                LDA #$03      ;Set Cursor Enable And Flash Rate @1Hz
.390ecb	8f 10 00 af	sta $af0010	                STA VKY_TXT_CURSOR_CTRL_REG ;
.390ecf	c2 30		rep #$30	                REP #$30        ; set A&X long
.390ed1	a9 00 00	lda #$0000	                LDA #$0000;
.390ed4	8f 14 00 af	sta $af0014	                STA VKY_TXT_CURSOR_X_REG_L; // Set the X to Position 1
.390ed8	a9 06 00	lda #$0006	                LDA #$0006;
.390edb	8f 16 00 af	sta $af0016	                STA VKY_TXT_CURSOR_Y_REG_L; // Set the Y to Position 6 (Below)
.390edf	68		pla		                PLA
.390ee0	6b		rtl		                RTL
.390ee1	0b		phd		IINITSUPERIO	  PHD
.390ee2	08		php		                PHP
.390ee3	48		pha		                PHA
.390ee4	e2 20		sep #$20	                SEP #$20        ; set A short
.390ee6	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390ee8	8f 23 11 af	sta $af1123	                STA GP10_REG
.390eec	af 23 11 af	lda $af1123	                LDA GP10_REG
.390ef0	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390ef2	8f 24 11 af	sta $af1124	                STA GP11_REG
.390ef6	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390ef8	8f 25 11 af	sta $af1125	                STA GP12_REG
.390efc	a9 01		lda #$01	        				LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390efe	8f 26 11 af	sta $af1126	        				STA GP13_REG
.390f02	a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BX) Bit[0] = 1, Bit[2] = 1
.390f04	8f 27 11 af	sta $af1127	        				STA GP14_REG
.390f08	a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BY) Bit[0] = 1, Bit[2] = 1
.390f0a	8f 28 11 af	sta $af1128	        				STA GP15_REG
.390f0e	a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BX) Bit[0] = 1, Bit[2] = 1
.390f10	8f 29 11 af	sta $af1129	        				STA GP16_REG
.390f14	a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BY) Bit[0] = 1, Bit[2] = 1
.390f16	8f 2a 11 af	sta $af112a	        				STA GP17_REG
.390f1a	a9 00		lda #$00	        				LDA #$00		;(C256 - HEADPHONE MUTE) - Output GPIO - Push-Pull (1 - Headphone On, 0 - HeadPhone Off)
.390f1c	8f 2b 11 af	sta $af112b	        				STA GP20_REG
.390f20	a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390f22	8f 2f 11 af	sta $af112f					        STA GP24_REG
.390f26	a9 05		lda #$05					        LDA #$05		;(C256 - MIDI IN) Bit[0] = 1, Bit[2] = 1 (Page 132 Manual)
.390f28	8f 30 11 af	sta $af1130					        STA GP25_REG
.390f2c	a9 84		lda #$84				        	LDA #$84		;(C256 - MIDI OUT) Bit[2] = 1, Bit[7] = 1 (Open Drain - To be Checked)
.390f2e	8f 31 11 af	sta $af1131					        STA GP26_REG
.390f32	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 1) Setup as GPIO Input for now
.390f34	8f 33 11 af	sta $af1133					        STA GP30_REG
.390f38	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 4) Setup as GPIO Input for now
.390f3a	8f 34 11 af	sta $af1134					        STA GP31_REG
.390f3e	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 3) Setup as GPIO Input for now
.390f40	8f 35 11 af	sta $af1135					        STA GP32_REG
.390f44	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 6) Setup as GPIO Input for now
.390f46	8f 36 11 af	sta $af1136					        STA GP33_REG
.390f4a	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 5) Setup as GPIO Input for now
.390f4c	8f 37 11 af	sta $af1137					        STA GP34_REG
.390f50	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 8) Setup as GPIO Input for now
.390f52	8f 38 11 af	sta $af1138					        STA GP35_REG
.390f56	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 7) Setup as GPIO Input for now
.390f58	8f 39 11 af	sta $af1139					        STA GP36_REG
.390f5c	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 10) Setup as GPIO Input for now
.390f5e	8f 3a 11 af	sta $af113a					        STA GP37_REG
.390f62	a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390f64	8f 3d 11 af	sta $af113d					        STA GP42_REG
.390f68	a9 01		lda #$01				          LDA #$01		;(C256 - INPUT PLL CLK INTERRUPT) Default Value - Will keep it as an input for now, no real usage for now
.390f6a	8f 3e 11 af	sta $af113e					        STA GP43_REG
.390f6e	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RI2) - Input - Set Secondary Function
.390f70	8f 3f 11 af	sta $af113f					        STA GP50_REG
.390f74	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DCD2) - Input - Set Secondary Function
.390f76	8f 40 11 af	sta $af1140					        STA GP51_REG
.390f7a	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RXD2) - Input - Set Secondary Function
.390f7c	8f 41 11 af	sta $af1141					        STA GP52_REG
.390f80	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - TXD2) - Output - Set Secondary Function
.390f82	8f 42 11 af	sta $af1142					        STA GP53_REG
.390f86	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DSR2) - Input - Set Secondary Function
.390f88	8f 43 11 af	sta $af1143					        STA GP54_REG
.390f8c	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - RTS2) - Output - Set Secondary Function
.390f8e	8f 44 11 af	sta $af1144					        STA GP55_REG
.390f92	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - CTS2) - Input - Set Secondary Function
.390f94	8f 45 11 af	sta $af1145					        STA GP56_REG
.390f98	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - DTR2) - Output - Set Secondary Function
.390f9a	8f 46 11 af	sta $af1146					        STA GP57_REG
.390f9e	a9 84		lda #$84					        LDA #$84		;(C256 - LED1) - Open Drain - Output
.390fa0	8f 47 11 af	sta $af1147					        STA GP60_REG
.390fa4	a9 84		lda #$84					        LDA #$84		;(C256 - LED2) - Open Drain - Output
.390fa6	8f 48 11 af	sta $af1148					        STA GP61_REG
.390faa	a9 00		lda #$00				        	LDA #$00		;GPIO Data Register (GP10..GP17) - Not Used
.390fac	8f 4b 11 af	sta $af114b					        STA GP1_REG
.390fb0	a9 01		lda #$01					        LDA #$01		;GPIO Data Register (GP20..GP27) - Bit[0] - Headphone Mute (Enabling it)
.390fb2	8f 4c 11 af	sta $af114c					        STA GP2_REG
.390fb6	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP30..GP37) - Since it is in Output mode, nothing to write here.
.390fb8	8f 4d 11 af	sta $af114d					        STA GP3_REG
.390fbc	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP40..GP47)  - Not Used
.390fbe	8f 4e 11 af	sta $af114e					        STA GP4_REG
.390fc2	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP50..GP57)  - Not Used
.390fc4	8f 4f 11 af	sta $af114f					        STA GP5_REG
.390fc8	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP60..GP61)  - Not Used
.390fca	8f 50 11 af	sta $af1150					        STA GP6_REG
.390fce	a9 01		lda #$01					        LDA #$01		;LED1 Output - Already setup by Vicky Init Phase, for now, I will leave it alone
.390fd0	8f 5d 11 af	sta $af115d					        STA LED1_REG
.390fd4	a9 02		lda #$02					        LDA #$02		;LED2 Output - However, I will setup this one, to make sure the Code works (Full On, when Code was ran)
.390fd6	8f 5e 11 af	sta $af115e					        STA LED2_REG
.390fda	c2 20		rep #$20	                REP #$20        ; set A long
.390fdc	68		pla		                PLA
.390fdd	28		plp						        PLP
.390fde	2b		pld					        	PLD
.390fdf	6b		rtl		                RTL
.390fe0	0b		phd		IINITKEYBOARD	  PHD
.390fe1	08		php						        PHP
.390fe2	48		pha						        PHA
.390fe3	da		phx						        PHX
.390fe4	e2 20		sep #$20	                SEP #$20        ; set A short
.390fe6	c2 10		rep #$10	                REP #$10        ; set X long
.390fe8	18		clc		                CLC
.390fe9	20 99 10	jsr $391099	                JSR Poll_Inbuf ;
.390fec	a9 aa		lda #$aa					        LDA #$AA			;Send self test command
.390fee	8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.390ff2	20 a4 10	jsr $3910a4	                JSR Poll_Outbuf ;
.390ff5	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Check self test result
.390ff9	c9 55		cmp #$55					        CMP #$55
.390ffb	f0 03		beq $391000					        BEQ	passAAtest
.390ffd	82 89 00	brl $391089	                BRL initkb_loop_out
.391000					passAAtest
.391000	a9 ab		lda #$ab					        LDA #$AB			;Send test Interface command
.391002	8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.391006	20 a4 10	jsr $3910a4	                JSR Poll_Outbuf ;
.391009	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Display Interface test results
.39100d	c9 00		cmp #$00					        CMP #$00			;Should be 00
.39100f	f0 03		beq $391014					        BEQ	passABtest
.391011	82 75 00	brl $391089	                BRL initkb_loop_out
.391014					passABtest
.391014	a9 60		lda #$60	                LDA #$60            ; Send Command 0x60 so to Enable Interrupt
.391016	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.39101a	20 99 10	jsr $391099	                JSR Poll_Inbuf ;
.39101d	a9 69		lda #$69	                LDA #%01101001      ; Enable Interrupt
.39101f	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.391023	20 99 10	jsr $391099	                JSR Poll_Inbuf ;
.391026	a9 ff		lda #$ff	                LDA #$FF      ; Send Keyboard Reset command
.391028	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.39102c	a2 ff ff	ldx #$ffff	                LDX #$FFFF
.39102f	ca		dex		DLY_LOOP1       DEX
.391030	ea		nop		                NOP
.391031	ea		nop		                NOP
.391032	ea		nop		                NOP
.391033	ea		nop		                NOP
.391034	ea		nop		                NOP
.391035	ea		nop		                NOP
.391036	ea		nop		                NOP
.391037	ea		nop		                NOP
.391038	e0 00 00	cpx #$0000	                CPX #$0000
.39103b	d0 f2		bne $39102f	                BNE DLY_LOOP1
.39103d	20 a4 10	jsr $3910a4	                JSR Poll_Outbuf ;
.391040	af 60 10 af	lda $af1060	                LDA KBD_OUT_BUF   ; Read Output Buffer
.391044					DO_CMD_F4_AGAIN
.391044	20 99 10	jsr $391099	                JSR Poll_Inbuf ;
.391047	a9 f4		lda #$f4					        LDA #$F4			; Enable the Keyboard
.391049	8f 60 10 af	sta $af1060					        STA KBD_DATA_BUF
.39104d	20 a4 10	jsr $3910a4	                JSR Poll_Outbuf ;
.391050	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		; Clear the Output buffer
.391054	c9 fa		cmp #$fa	                CMP #$FA
.391056	d0 ec		bne $391044	                BNE DO_CMD_F4_AGAIN
.391058	20 af 10	jsr $3910af	                JSR INIT_MOUSE
.39105b	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0  ; Read the Pending Register &
.39105f	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.391061	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0  ; Writing it back will clear the Active Bit
.391065	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1  ; Read the Pending Register &
.391069	29 01		and #$01	                AND #FNX1_INT00_KBD
.39106b	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1  ; Writing it back will clear the Active Bit
.39106f	af 4d 01 00	lda $00014d	                LDA @lINT_MASK_REG1
.391073	29 fe		and #$fe	                AND #~FNX1_INT00_KBD
.391075	8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.391079	af 4c 01 00	lda $00014c	                LDA @lINT_MASK_REG0
.39107d	29 7f		and #$7f	                AND #~FNX0_INT07_MOUSE
.39107f	8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.391083	a2 0f 6f	ldx #$6f0f	                LDX #<>Success_kb_init
.391086	38		sec		                SEC
.391087	b0 03		bcs $39108c	                BCS InitSuccess
.391089	a2 21 6f	ldx #$6f21	initkb_loop_out LDX #<>Failed_kb_init
.39108c	22 bc 06 39	jsl $3906bc	InitSuccess     JSL IPRINT       ; print Message
.391090	c2 20		rep #$20	                REP #$20        ; set A long
.391092	c2 10		rep #$10	                REP #$10        ; set X long
.391094	fa		plx		                PLX
.391095	68		pla		                PLA
.391096	28		plp						        PLP
.391097	2b		pld						        PLD
.391098	6b		rtl		                RTL
.391099					Poll_Inbuf
.391099	af 64 10 af	lda $af1064	                LDA STATUS_PORT		; Load Status Byte
.39109d	29 02		and #$02					        AND	#<INPT_BUF_FULL	; Test bit $02 (if 0, Empty)
.39109f	c9 02		cmp #$02					        CMP #<INPT_BUF_FULL
.3910a1	f0 f6		beq $391099					        BEQ Poll_Inbuf
.3910a3	60		rts		                RTS
.3910a4					Poll_Outbuf
.3910a4	af 64 10 af	lda $af1064	                LDA STATUS_PORT
.3910a8	29 01		and #$01	                AND #OUT_BUF_FULL ; Test bit $01 (if 1, Full)
.3910aa	c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.3910ac	d0 f6		bne $3910a4	                BNE Poll_Outbuf
.3910ae	60		rts		                RTS
.3910af					INIT_MOUSE
.3910af	20 99 10	jsr $391099	                JSR Poll_Inbuf
.3910b2	a9 a8		lda #$a8	                LDA #$A8          ; Enable the second PS2 Channel
.3910b4	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.3910b8					DO_CMD_A9_AGAIN
.3910b8	20 99 10	jsr $391099	                JSR Poll_Inbuf
.3910bb	a9 a9		lda #$a9	                LDA #$A9          ; Tests second PS2 Channel
.3910bd	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.3910c1	20 a4 10	jsr $3910a4	                JSR Poll_Outbuf ;
.3910c4	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		; Clear the Output buffer
.3910c8	c9 00		cmp #$00	                CMP #$00
.3910ca	d0 ec		bne $3910b8	                BNE DO_CMD_A9_AGAIN
.3910cc	20 99 10	jsr $391099	                JSR Poll_Inbuf
.3910cf	a9 20		lda #$20	                LDA #$20
.3910d1	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.3910d5	20 a4 10	jsr $3910a4	                JSR Poll_Outbuf ;
.3910d8	af 60 10 af	lda $af1060	                LDA KBD_OUT_BUF
.3910dc	09 02		ora #$02	                ORA #$02
.3910de	48		pha		                PHA
.3910df	20 99 10	jsr $391099	                JSR Poll_Inbuf
.3910e2	a9 60		lda #$60	                LDA #$60
.3910e4	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.3910e8	20 99 10	jsr $391099	                JSR Poll_Inbuf ;
.3910eb	68		pla		                PLA
.3910ec	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.3910f0	a9 f6		lda #$f6	                LDA #$F6        ;Tell the mouse to use default settings
.3910f2	20 15 11	jsr $391115	                JSR MOUSE_WRITE
.3910f5	20 28 11	jsr $391128	                JSR MOUSE_READ
.3910f8	a9 e8		lda #$e8	                LDA #$E8
.3910fa	20 15 11	jsr $391115	                JSR MOUSE_WRITE
.3910fd	20 28 11	jsr $391128	                JSR MOUSE_READ
.391100	a9 00		lda #$00	                LDA #$00
.391102	20 15 11	jsr $391115	                JSR MOUSE_WRITE
.391105	20 28 11	jsr $391128	                JSR MOUSE_READ
.391108	a9 f4		lda #$f4	                LDA #$F4        ; Enable the Mouse
.39110a	20 15 11	jsr $391115	                JSR MOUSE_WRITE
.39110d	20 28 11	jsr $391128	                JSR MOUSE_READ
.391110	a9 00		lda #$00	                LDA #$00
.391112	85 e0		sta $e0		                STA MOUSE_PTR
.391114	60		rts		                RTS
.391115					MOUSE_WRITE
.391115	48		pha		                PHA
.391116	20 99 10	jsr $391099	                JSR Poll_Inbuf
.391119	a9 d4		lda #$d4	                LDA #$D4
.39111b	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.39111f	20 99 10	jsr $391099	                JSR Poll_Inbuf
.391122	68		pla		                PLA
.391123	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.391127	60		rts		                RTS
.391128					MOUSE_READ
.391128	20 a4 10	jsr $3910a4	                JSR Poll_Outbuf ;
.39112b	af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF
.39112f	60		rts		                RTS
.391130	48		pha		INITRTC         PHA
.391131	08		php		                PHP
.391132	e2 20		sep #$20	                SEP #$20        ; set A short
.391134	a9 00		lda #$00	                LDA #0
.391136	8f 0b 08 af	sta $af080b	                STA @l RTC_RATES    ; Set watch dog timer and periodic interrupt rates to 0
.39113a	8f 0c 08 af	sta $af080c	                STA @l RTC_ENABLE   ; Disable all the alarms and interrupts
.39113e	af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL      ; Make sure the RTC will continue to tick in battery mode
.391142	09 04		ora #$04	                ORA #%00000100
.391144	8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.391148	28		plp		                PLP
.391149	68		pla		                PLA
.39114a	6b		rtl		                RTL
.39114b					ITESTSID
.39114b	a9 0f		lda #$0f	                LDA #$0F
.39114d	8f 18 e4 af	sta $afe418	                STA SID0_MODE_VOL
.391151	a9 be		lda #$be	                LDA #$BE
.391153	8f 05 e4 af	sta $afe405	                STA SID0_V1_ATCK_DECY
.391157	a9 f8		lda #$f8	                LDA #$F8
.391159	8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.39115d	a9 11		lda #$11	                LDA #$11
.39115f	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.391163	a9 25		lda #$25	                LDA #$25
.391165	8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.391169	a9 11		lda #$11	                LDA #$11
.39116b	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL
.39116f	a9 08		lda #$08	                LDA #$08
.391171	8f 03 e4 af	sta $afe403	                STA SID0_V1_PW_HI   ;G1
.391175	a9 00		lda #$00	                LDA #$00
.391177	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.39117b	a9 c6		lda #$c6	                LDA #$C6
.39117d	8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.391181	a9 08		lda #$08	                LDA #$08
.391183	8f 0a e4 af	sta $afe40a	                STA SID0_V2_PW_HI   ;G1
.391187	a9 00		lda #$00	                LDA #$00
.391189	8f 08 e4 af	sta $afe408	                STA SID0_V2_FREQ_HI
.39118d	a9 08		lda #$08	                LDA #$08
.39118f	8f 0c e4 af	sta $afe40c	                STA SID0_V2_ATCK_DECY
.391193	a9 c6		lda #$c6	                LDA #$C6
.391195	8f 0d e4 af	sta $afe40d	                STA SID0_V2_SSTN_RLSE
.391199	a9 08		lda #$08	                LDA #$08
.39119b	8f 11 e4 af	sta $afe411	                STA SID0_V3_PW_HI   ;G1
.39119f	a9 00		lda #$00	                LDA #$00
.3911a1	8f 0f e4 af	sta $afe40f	                STA SID0_V3_FREQ_HI
.3911a5	a9 08		lda #$08	                LDA #$08
.3911a7	8f 13 e4 af	sta $afe413	                STA SID0_V3_ATCK_DECY
.3911ab	a9 c6		lda #$c6	                LDA #$C6
.3911ad	8f 14 e4 af	sta $afe414	                STA SID0_V3_SSTN_RLSE
.3911b1	a9 36		lda #$36	                LDA #$36              ;Left Side (Rev A of Board)
.3911b3	8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.3911b7	a9 01		lda #$01	                LDA #$01
.3911b9	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI   ;G1
.3911bd	a9 00		lda #$00	                LDA #$00              ;Left Side (Rev A of Board)
.3911bf	8f 02 e4 af	sta $afe402	                STA SID0_V1_PW_LO
.3911c3	a9 08		lda #$08	                LDA #$08
.3911c5	8f 03 e4 af	sta $afe403	                STA SID0_V1_PW_HI   ;G1
.3911c9	a9 08		lda #$08	                LDA #$08
.3911cb	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL    ; Reset
.3911cf	a9 0c		lda #$0c	                LDA #$0C
.3911d1	8f 07 e4 af	sta $afe407	                STA SID0_V2_FREQ_LO
.3911d5	a9 04		lda #$04	                LDA #$04
.3911d7	8f 08 e4 af	sta $afe408	                STA SID0_V2_FREQ_HI   ;B1
.3911db	a9 00		lda #$00	                LDA #$00              ;Left Side (Rev A of Board)
.3911dd	8f 09 e4 af	sta $afe409	                STA SID0_V2_PW_LO
.3911e1	a9 08		lda #$08	                LDA #$08
.3911e3	8f 0a e4 af	sta $afe40a	                STA SID0_V2_PW_HI   ;G1
.3911e7	a9 08		lda #$08	                LDA #$08
.3911e9	8f 0b e4 af	sta $afe40b	                STA SID0_V2_CTRL    ; Reset
.3911ed	a9 00		lda #$00	                LDA #$00
.3911ef	8f 0e e4 af	sta $afe40e	                STA SID0_V3_FREQ_LO
.3911f3	a9 08		lda #$08	                LDA #$08
.3911f5	8f 0f e4 af	sta $afe40f	                STA SID0_V3_FREQ_HI   ;D
.3911f9	a9 00		lda #$00	                LDA #$00              ;Left Side (Rev A of Board)
.3911fb	8f 10 e4 af	sta $afe410	                STA SID0_V3_PW_LO
.3911ff	a9 08		lda #$08	                LDA #$08
.391201	8f 11 e4 af	sta $afe411	                STA SID0_V3_PW_HI   ;G1
.391205	a9 08		lda #$08	                LDA #$08
.391207	8f 12 e4 af	sta $afe412	                STA SID0_V3_CTRL    ; Reset
.39120b	a9 10		lda #$10	                LDA #$10
.39120d	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL    ; Triangle
.391211	8f 0b e4 af	sta $afe40b	                STA SID0_V2_CTRL    ; Triangle
.391215	8f 12 e4 af	sta $afe412	                STA SID0_V3_CTRL    ; Triangle
.391219	6b		rtl		                RTL
.39121a	48		pha		IINITCODEC      PHA
.39121b	c2 20		rep #$20	                REP #$20        ; set A long
.39121d	a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R13 - Turn On Headphones
.391220	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391224	a9 01 00	lda #$0001	                LDA #$0001
.391227	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.39122b	20 aa 12	jsr $3912aa	                JSR CODEC_TRF_FINISHED
.39122e	a9 0f 2a	lda #$2a0f	                LDA #%0010101000001111       ;R21 - Enable All the Analog In
.391231	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391235	a9 01 00	lda #$0001	                LDA #$0001
.391238	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.39123c	20 aa 12	jsr $3912aa	                JSR CODEC_TRF_FINISHED
.39123f	a9 01 23	lda #$2301	                LDA #%0010001100000001      ;R17 - Enable All the Analog In
.391242	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391246	a9 01 00	lda #$0001	                LDA #$0001
.391249	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.39124d	20 aa 12	jsr $3912aa	                JSR CODEC_TRF_FINISHED
.391250	a9 07 2c	lda #$2c07	                LDA #%0010110000000111      ;R22 - Enable all Analog Out
.391253	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391257	a9 01 00	lda #$0001	                LDA #$0001
.39125a	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.39125e	20 aa 12	jsr $3912aa	                JSR CODEC_TRF_FINISHED
.391261	a9 02 14	lda #$1402	                LDA #%0001010000000010      ;R10 - DAC Interface Control
.391264	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391268	a9 01 00	lda #$0001	                LDA #$0001
.39126b	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.39126f	20 aa 12	jsr $3912aa	                JSR CODEC_TRF_FINISHED
.391272	a9 02 16	lda #$1602	                LDA #%0001011000000010      ;R11 - ADC Interface Control
.391275	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391279	a9 01 00	lda #$0001	                LDA #$0001
.39127c	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391280	20 aa 12	jsr $3912aa	                JSR CODEC_TRF_FINISHED
.391283	a9 d5 19	lda #$19d5	                LDA #%0001100111010101      ;R12 - Master Mode Control
.391286	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39128a	a9 01 00	lda #$0001	                LDA #$0001
.39128d	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391291	20 aa 12	jsr $3912aa	                JSR CODEC_TRF_FINISHED
.391294	68		pla		                PLA
.391295	6b		rtl		                RTL
.391296					IRESETCODEC
.391296	c2 20		rep #$20	                REP #$20        ; set A long
.391298	a9 00 2e	lda #$2e00	                LDA #$2E00      ;R22 - Enable all Analog Out
.39129b	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39129f	a9 01 00	lda #$0001	                LDA #$0001
.3912a2	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.3912a6	20 aa 12	jsr $3912aa	                JSR CODEC_TRF_FINISHED
.3912a9	6b		rtl		                RTL
.3912aa					CODEC_TRF_FINISHED
.3912aa	e2 20		sep #$20	                SEP #$20        ; set A short
.3912ac	af 02 e9 af	lda $afe902	CODEC_LOOP      LDA CODEC_WR_CTRL
.3912b0	29 01		and #$01	                AND #$01
.3912b2	c9 01		cmp #$01	                CMP #$01
.3912b4	f0 f6		beq $3912ac	                BEQ CODEC_LOOP
.3912b6	c2 20		rep #$20	                REP #$20        ; set A long
.3912b8	60		rts		                RTS
.3912b9					IBM_FILL_SCREEN
.3912b9	c2 30		rep #$30	                REP #$30        ; set A&X long
.3912bb	a9 00 00	lda #$0000	                LDA #$0000
.3912be	a2 00 00	ldx #$0000	                LDX #$0000
.3912c1					BM_FILL_SCREEN_LOOPY
.3912c1	a0 00 00	ldy #$0000	                LDY #$0000
.3912c4	e2 20		sep #$20	                SEP #$20        ; set A short
.3912c6					BM_FILL_SCREEN_LOOPX
.3912c6	97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.3912c8	c8		iny		                INY
.3912c9	c4 40		cpy $40		                CPY BM_CLEAR_SCRN_X              ; Transfer the First line
.3912cb	d0 f9		bne $3912c6	                BNE BM_FILL_SCREEN_LOOPX
.3912cd	20 d8 12	jsr $3912d8	                JSR BM_FILL_COMPUTE_Y_DST
.3912d0	e8		inx		                INX
.3912d1	e4 42		cpx $42		                CPX BM_CLEAR_SCRN_Y
.3912d3	d0 ec		bne $3912c1	                BNE BM_FILL_SCREEN_LOOPY
.3912d5	c2 30		rep #$30	                REP #$30        ; set A&X long
.3912d7	6b		rtl		                RTL
.3912d8					BM_FILL_COMPUTE_Y_DST
.3912d8	c2 20		rep #$20	                REP #$20        ; set A long
.3912da	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR        ; Right now it is set @ $020000 (128K) + File Size
.3912dc	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3912e0	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2      ; Right now it is set @ $020000 (128K)
.3912e2	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.3912e6	a9 80 02	lda #$0280	                LDA #$280        ; Right now it is set @ $020000 (128K) + File Size
.3912e9	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.3912ed	a9 00 00	lda #$0000	                LDA #$0000
.3912f0	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.3912f4	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.3912f8	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.3912fa	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.3912fe	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.391300	a9 00 00	lda #$0000	                LDA #$0000
.391303	60		rts		                RTS
.391304					IBMP_PARSER
.391304	c2 30		rep #$30	                REP #$30        ; set A&X long
.391306	a0 00 00	ldy #$0000	                LDY #$0000
.391309	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y
.39130b	c9 42 4d	cmp #$4d42	                CMP #$4D42
.39130e	f0 03		beq $391313	                BEQ IBMP_PARSER_CONT
.391310	82 04 01	brl $391417	                BRL BMP_PARSER_END_WITH_ERROR
.391313					IBMP_PARSER_CONT
.391313	a0 02 00	ldy #$0002	                LDY #$0002
.391316	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size Low Short
.391318	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.39131c	a0 04 00	ldy #$0004	                LDY #$0004
.39131f	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size High Short
.391321	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.391325	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Store -1 in Adder (B)
.391328	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.39132c	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.391330	18		clc		                CLC
.391331	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.391335	85 50		sta $50		                STA BMP_FILE_SIZE
.391337	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.39133b	85 52		sta $52		                STA BMP_FILE_SIZE+2
.39133d	a0 12 00	ldy #$0012	                LDY #$0012
.391340	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.391342	85 40		sta $40		                STA BMP_X_SIZE
.391344	a0 16 00	ldy #$0016	                LDY #$0016
.391347	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.391349	85 42		sta $42		                STA BMP_Y_SIZE
.39134b	a0 2e 00	ldy #$002e	                LDY #$002E
.39134e	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.391350	0a		asl a		                ASL A; Multiply by 2
.391351	0a		asl a		                ASL A; Multiply by 2
.391352	85 4c		sta $4c		                STA BMP_COLOR_PALET         ;
.391354	e0 00 00	cpx #$0000	                CPX #$0000
.391357	d0 05		bne $39135e	                BNE BMP_LUT1_PICK
.391359	20 1f 14	jsr $39141f	                JSR BMP_PARSER_UPDATE_LUT0   ; Go Upload the LUT0
.39135c	80 08		bra $391366	                BRA DONE_TRANSFER_LUT;
.39135e					  BMP_LUT1_PICK
.39135e	e0 01 00	cpx #$0001	                CPX #$0001
.391361	d0 03		bne $391366	                BNE BMP_LUT2_PICK
.391363	20 4f 14	jsr $39144f	                JSR BMP_PARSER_UPDATE_LUT1   ; Go Upload the LUT1
.391366					  BMP_LUT2_PICK
.391366					  DONE_TRANSFER_LUT
.391366	a5 56		lda $56		                LDA BMP_POSITION_Y
.391368	8f 00 01 00	sta $000100	                STA @lUNSIGNED_MULT_A_LO
.39136c	a5 4e		lda $4e		                LDA SCRN_X_STRIDE
.39136e	8f 02 01 00	sta $000102	                STA @lUNSIGNED_MULT_B_LO
.391372	af 04 01 00	lda $000104	                LDA @lUNSIGNED_MULT_AL_LO
.391376	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.39137a	af 06 01 00	lda $000106	                LDA @lUNSIGNED_MULT_AL_LO+2
.39137e	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.391382	a5 54		lda $54		                LDA BMP_POSITION_X
.391384	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Put the X Position Adder (B)
.391388	a9 00 00	lda #$0000	                LDA #$0000
.39138b	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.39138f	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in TEMP
.391393	85 f0		sta $f0		                STA USER_TEMP
.391395	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in TEMP
.391399	85 f2		sta $f2		                STA USER_TEMP+2
.39139b	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.39139d	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.3913a1	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.3913a3	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.3913a7	a5 f0		lda $f0		                LDA USER_TEMP
.3913a9	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store in 32Bit Adder (B)
.3913ad	a5 f2		lda $f2		                LDA USER_TEMP+2
.3913af	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in 32Bit Adder (B)
.3913b3	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in BMP_PRSE_DST_PTR
.3913b7	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.3913b9	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in BMP_PRSE_DST_PTR
.3913bd	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.3913bf	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K)
.3913c1	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3913c5	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2        ; Right now it is set @ $020000 (128K)
.3913c7	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.3913cb	a5 50		lda $50		                LDA BMP_FILE_SIZE
.3913cd	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.3913d1	a5 52		lda $52		                LDA BMP_FILE_SIZE+2
.3913d3	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.3913d7	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.3913db	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.3913dd	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.3913e1	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.3913e3	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.3913e5	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3913e9	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.3913eb	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.3913ef	18		clc		                CLC
.3913f0	a5 40		lda $40		                LDA BMP_X_SIZE              ; Load The Size in X of the image and Make it negative
.3913f2	49 ff ff	eor #$ffff	                EOR #$FFFF                  ; Inverse all bit
.3913f5	69 01 00	adc #$0001	                ADC #$0001                  ; Add 0 ()
.3913f8	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store the Results in reg B of ADDER32
.3913fc	a9 ff ff	lda #$ffff	                LDA #$FFFF
.3913ff	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in the Reminder of the 32Bits B Register
.391403	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.391407	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.391409	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.39140d	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.39140f	20 7f 14	jsr $39147f	                JSR BMP_PARSER_DMA_SHIT_OUT  ; We are going to start with the slow method
.391412	a2 5d 6f	ldx #$6f5d	                LDX #<>bmp_parser_msg0
.391415	80 03		bra $39141a	                BRA BMP_PARSER_END_NO_ERROR
.391417					BMP_PARSER_END_WITH_ERROR
.391417	a2 49 6f	ldx #$6f49	                LDX #<>bmp_parser_err0
.39141a					BMP_PARSER_END_NO_ERROR
.39141a	22 bc 06 39	jsl $3906bc	                JSL IPRINT       ; print the first line
.39141e	6b		rtl		                RTL
.39141f					BMP_PARSER_UPDATE_LUT0
.39141f	38		sec		                SEC
.391420	a0 7a 00	ldy #$007a	                LDY #$007A
.391423	a2 00 00	ldx #$0000	                LDX #$0000
.391426	e2 20		sep #$20	                SEP #$20        ; set A short
.391428					BMP_PARSER_UPDATE_LOOP
.391428	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.39142a	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR+0, X      ; The look-up Table point to a pixel Blue
.39142e	c8		iny		                INY
.39142f	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.391431	9f 01 20 af	sta $af2001,x	                STA @lGRPH_LUT0_PTR+1, X      ; The look-up Table point to a pixel Blue
.391435	c8		iny		                INY
.391436	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.391438	9f 02 20 af	sta $af2002,x	                STA @lGRPH_LUT0_PTR+2, X      ; The look-up Table point to a pixel Blue
.39143c	c8		iny		                INY
.39143d	a9 80		lda #$80	                LDA #$80
.39143f	9f 03 20 af	sta $af2003,x	                STA @lGRPH_LUT0_PTR+3, X      ; The look-up Table point to a pixel Blue
.391443	c8		iny		                INY ; For the Alpha Value, nobody cares
.391444	e8		inx		                INX
.391445	e8		inx		                INX
.391446	e8		inx		                INX
.391447	e8		inx		                INX
.391448	e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.39144a	d0 dc		bne $391428	                BNE BMP_PARSER_UPDATE_LOOP
.39144c	c2 20		rep #$20	                REP #$20        ; set A long
.39144e	60		rts		                RTS
.39144f					BMP_PARSER_UPDATE_LUT1
.39144f	38		sec		                SEC
.391450	a0 36 00	ldy #$0036	                LDY #$0036
.391453	a2 00 00	ldx #$0000	                LDX #$0000
.391456	e2 20		sep #$20	                SEP #$20        ; set A short
.391458					PALETTE_LUT1_LOOP
.391458	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.39145a	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR+0, X      ; The look-up Table point to a pixel Blue
.39145e	c8		iny		                INY
.39145f	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.391461	9f 01 24 af	sta $af2401,x	                STA @lGRPH_LUT1_PTR+1, X      ; The look-up Table point to a pixel Blue
.391465	c8		iny		                INY
.391466	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.391468	9f 02 24 af	sta $af2402,x	                STA @lGRPH_LUT1_PTR+2, X      ; The look-up Table point to a pixel Blue
.39146c	c8		iny		                INY
.39146d	a9 80		lda #$80	                LDA #$80
.39146f	9f 03 24 af	sta $af2403,x	                STA @lGRPH_LUT1_PTR+3, X      ; The look-up Table point to a pixel Blue
.391473	c8		iny		                INY ; For the Alpha Value, nobody cares
.391474	e8		inx		                INX
.391475	e8		inx		                INX
.391476	e8		inx		                INX
.391477	e8		inx		                INX
.391478	e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.39147a	d0 dc		bne $391458	                BNE PALETTE_LUT1_LOOP
.39147c	c2 20		rep #$20	                REP #$20        ; set A long
.39147e	60		rts		                RTS
.39147f					BMP_PARSER_DMA_SHIT_OUT
.39147f	a2 00 00	ldx #$0000	                LDX #$0000
.391482					BMP_PARSER_LOOPY
.391482	a0 00 00	ldy #$0000	                LDY #$0000
.391485	e2 20		sep #$20	                SEP #$20        ; set A short
.391487					BMP_PARSER_LOOPX
.391487	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Load First Pixel Y (will be linear)
.391489	97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.39148b	c8		iny		                INY
.39148c	c4 40		cpy $40		                CPY BMP_X_SIZE              ; Transfer the First line
.39148e	d0 f7		bne $391487	                BNE BMP_PARSER_LOOPX
.391490	20 9c 14	jsr $39149c	                JSR BMP_PARSER_COMPUTE_Y_SRC
.391493	20 b7 14	jsr $3914b7	                JSR BMP_PARSER_COMPUTE_Y_DST
.391496	e8		inx		                INX
.391497	e4 42		cpx $42		                CPX BMP_Y_SIZE
.391499	d0 e7		bne $391482	                BNE BMP_PARSER_LOOPY
.39149b	60		rts		                RTS
.39149c					BMP_PARSER_COMPUTE_Y_SRC
.39149c	c2 20		rep #$20	                REP #$20        ; set A long
.39149e	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.3914a0	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3914a4	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.3914a6	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.3914aa	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.3914ae	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.3914b0	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.3914b4	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.3914b6	60		rts		                RTS
.3914b7					BMP_PARSER_COMPUTE_Y_DST
.3914b7	c2 20		rep #$20	                REP #$20        ; set A long
.3914b9	18		clc		                CLC
.3914ba	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.3914bc	65 4e		adc $4e		                ADC SCRN_X_STRIDE        ; In Normal Circumstances, it is 640
.3914be	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.3914c0	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.3914c2	69 00 00	adc #$0000	                ADC #$0000
.3914c5	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.3914c7	60		rts		                RTS
.3914c8	ea		nop		ILOOP           NOP
.3914c9	ea		nop		                NOP
.3914ca	ea		nop		                NOP
.3914cb	ea		nop		                NOP
.3914cc	ea		nop		                NOP
.3914cd	ea		nop		                NOP
.3914ce	ea		nop		                NOP
.3914cf	ea		nop		                NOP
.3914d0	ea		nop		                NOP
.3914d1	ea		nop		                NOP
.3914d2	6b		rtl		                RTL
.3914d3	22 c8 14 39	jsl $3914c8	ILOOP_1         JSL ILOOP
.3914d7	22 c8 14 39	jsl $3914c8	                JSL ILOOP
.3914db	22 c8 14 39	jsl $3914c8	                JSL ILOOP
.3914df	22 c8 14 39	jsl $3914c8	                JSL ILOOP
.3914e3	22 c8 14 39	jsl $3914c8	                JSL ILOOP
.3914e7	22 c8 14 39	jsl $3914c8	                JSL ILOOP
.3914eb	22 c8 14 39	jsl $3914c8	                JSL ILOOP
.3914ef	22 c8 14 39	jsl $3914c8	                JSL ILOOP
.3914f3	22 c8 14 39	jsl $3914c8	                JSL ILOOP
.3914f7	22 c8 14 39	jsl $3914c8	                JSL ILOOP
.3914fb	6b		rtl		                RTL
.3914fc	22 d3 14 39	jsl $3914d3	ILOOP_1MS       JSL ILOOP_1
.391500	6b		rtl		                RTL
.391501	e0 00 00	cpx #$0000	ILOOP_MS        CPX #0
.391504	f0 07		beq $39150d	                BEQ LOOP_MS_END
.391506	22 fc 14 39	jsl $3914fc	                JSL ILOOP_1MS
.39150a	ca		dex		                DEX
.39150b	80 f4		bra $391501	                BRA ILOOP_MS
.39150d	6b		rtl		LOOP_MS_END     RTL
.39150e					IDELAY
.39150e	8b		phb		                PHB
.39150f	08		php		                PHP
.391510	48		pha		                PHA             ; begin setdbr macro
.391511	08		php		                PHP
.391512	e2 20		sep #$20	                SEP #$20        ; set A short
.391514	a9 00		lda #$00	                LDA #0
.391516	48		pha		                PHA
.391517	ab		plb		                PLB
.391518	28		plp		                PLP
.391519	68		pla		                PLA             ; end setdbr macro
.39151a	e2 20		sep #$20	                SEP #$20        ; set A short
.39151c	a9 00		lda #$00	                LDA #0                      ; Stop the timer if it's running
.39151e	8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.391522	af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Enable Timer 0 Interrupts
.391526	29 fb		and #$fb	                AND #~FNX0_INT02_TMR0
.391528	8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.39152c	a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.39152e	8d 05 07	sta $0705	                STA @w TIMERFLAGS
.391531	a9 00		lda #$00	                LDA #0
.391533	8f 61 01 00	sta $000161	                STA @l TIMER0_CHARGE_L      ; Clear the comparator for count-down
.391537	8f 62 01 00	sta $000162	                STA @l TIMER0_CHARGE_M
.39153b	8f 63 01 00	sta $000163	                STA @l TIMER0_CHARGE_H
.39153f	c2 30		rep #$30	                REP #$30        ; set A&X long
.391541	8a		txa		                TXA
.391542	8f 65 01 00	sta $000165	                STA @l TIMER0_CMP_L         ; Set the number of ticks
.391546	98		tya		                TYA
.391547	e2 20		sep #$20	                SEP #$20        ; set A short
.391549	8f 67 01 00	sta $000167	                STA @l TIMER0_CMP_H
.39154d	a9 09		lda #$09	                LDA #TMR0_EN | TMR0_UPDWN   ; Enable the timer to count up
.39154f	8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.391553	a9 80		lda #$80	                LDA #TIMER0TRIGGER          ; Timer zero's trigger flag
.391555	cb		wai		loop            WAI                         ; Wait for an interrupt
.391556	1c 05 07	trb $0705	                TRB @w TIMERFLAGS           ; Check for the flag
.391559	f0 fa		beq $391555	                BEQ loop                    ; Keep checking until it's set
.39155b	a9 00		lda #$00	                LDA #0                      ; Stop the timer
.39155d	8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.391561	a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.391563	8d 05 07	sta $0705	                STA @w TIMERFLAGS
.391566	af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Disable Timer 0 Interrupts
.39156a	09 04		ora #$04	                ORA #FNX0_INT02_TMR0
.39156c	8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.391570	28		plp		                PLP
.391571	ab		plb		                PLB
.391572	6b		rtl		                RTL
.391573					SHOW_CREDITS
.391573	48		pha		                PHA
.391574	da		phx		                PHX
.391575	5a		phy		                PHY
.391576	08		php		                PHP
.391577	e2 20		sep #$20	                SEP #$20        ; set A short
.391579	c2 10		rep #$10	                REP #$10        ; set X long
.39157b	af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Disable the cursor
.39157f	29 fe		and #$fe	                AND #~Vky_Cursor_Enable
.391581	8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.391585	a2 00 00	ldx #$0000	                LDX #0
.391588	bf 00 00 3b	lda $3b0000,x	credit_loop     LDA @lCREDITS_TEXT,X            ; Copy a byte of text
.39158c	9f 00 a0 af	sta $afa000,x	                STA @lCS_TEXT_MEM_PTR,X
.391590	bf 00 20 3b	lda $3b2000,x	                LDA @lCREDITS_COLOR,X           ; Copy a byte of color
.391594	9f 00 c0 af	sta $afc000,x	                STA @lCS_COLOR_MEM_PTR,X
.391598	e8		inx		                INX
.391599	e0 00 20	cpx #$2000	                CPX #128 * 64
.39159c	d0 ea		bne $391588	                BNE credit_loop
.39159e	22 95 06 39	jsl $390695	                JSL IGETCHW                     ; Wait for a keypress
.3915a2	22 39 0a 39	jsl $390a39	                JSL ICLRSCREEN                  ; Then clear the screen and return
.3915a6	22 5d 08 39	jsl $39085d	                JSL ICSRHOME                    ; Move cursor to the home position
.3915aa	af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Enable the cursor
.3915ae	09 01		ora #$01	                ORA #Vky_Cursor_Enable
.3915b0	8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.3915b4	28		plp		                PLP
.3915b5	7a		ply		                PLY
.3915b6	fa		plx		                PLX
.3915b7	68		pla		                PLA
.3915b8	6b		rtl		                RTL
.3915b9	00		brk #		IRESTORE        BRK ; Warm boot routine
.3915ba	00		brk #		ISCINIT         BRK ;
.3915bb	00		brk #		IIOINIT         BRK ;
.3915bc	00		brk #		ISETLFS         BRK ; Obsolete (done in OPEN)
.3915bd	00		brk #		ISETNAM         BRK ; Obsolete (done in OPEN)
.3915be	00		brk #		IOPEN           BRK ; Open a channel for reading and/or writing. Use SETLFS and SETNAM to set the channels and filename first.
.3915bf	00		brk #		ICLOSE          BRK ; Close a channel
.3915c0	00		brk #		IGETB           BRK ; Get a byte from input channel. Return 0 if no input. Carry is set if no input.
.3915c1	00		brk #		IGETCH          BRK ; Get a character from the input channel. A=0 and Carry=1 if no data is wating
.3915c2	00		brk #		IGETS           BRK ; Get a string from the input channel. NULL terminates
.3915c3	00		brk #		IGETLINE        BRK ; Get a line of text from input channel. CR or NULL terminates.
.3915c4	00		brk #		IGETFIELD       BRK ; Get a field from the input channel. Value in A, CR, or NULL terminates
.3915c5	00		brk #		ITRIM           BRK ; Removes spaces at beginning and end of string.
.3915c6	00		brk #		IPRINTC         BRK ; Print character to screen. Handles terminal commands
.3915c7	00		brk #		IPRINTS         BRK ; Print string to screen. Handles terminal commands
.3915c8	00		brk #		IPRINTF         BRK ; Print a float value
.3915c9	00		brk #		IPRINTI         BRK ; Prints integer value in TEMP
.3915ca	00		brk #		IPRINTAI        BRK ; Prints integer value in A
.3915cb	00		brk #		IPUSHKEY        BRK ;
.3915cc	00		brk #		IPUSHKEYS       BRK ;
.3915cd	00		brk #		ISCRREADLINE    BRK ; Loads the MCMDADDR/BCMDADDR variable with the address of the current line on the screen. This is called when the RETURN key is pressed and is the first step in processing an immediate mode command.
.3915ce	00		brk #		ISCRGETWORD     BRK ; Read a current word on the screen. A word ends with a space, punctuation (except _), or any control character (value < 32). Loads the address into CMPTEXT_VAL and length into CMPTEXT_LEN variables.

;******  Processing file: src\OPL2_Library.asm


;******  Processing file: src\OPL3_def.asm

=$afe600				OPL3_R_BASE               = $AFE600
=$e600					OPL3_R_BASE_LL            = $E600
=$00af					OPL3_R_BASE_HL            = $00AF
=$afe601				OPL3_R_TEST               = $AFE601 ; TEST
=$afe602				OPL3_R_TIMER1             = $AFE602 ; TIMER-1
=$afe603				OPL3_R_TIMER2             = $AFE603 ; TIMER-2
=$afe604				OPL3_R_IRQ                = $AFE604 ;
=$afe605				OPL3_R_OPL3_MODE          = $AFE605 ; Set bit 0 to 1 if you want to use in OPL3 Mode
=$afe608				OPL3_R_CSM                = $AFE608 ;
=$afe620				OPL3_R_AM_VID_EG_KSR_MULT = $AFE620 ; $40..$35 (21 Registers)
=$afe640				OPL3_R_KSL_TL             = $AFE640;  $40..$55 (21 Registers)
=$afe660				OPL3_R_AR_DR              = $AFE660;  $60..$75 (21 Registers)
=$afe680				OPL3_R_SL_RR              = $AFE680;  $80..$95 (21 Registers)
=$afe6a0				OPL3_R_FNumber            = $AFE6A0;  $A0..$A8
=$afe6b0				OPL3_R_KON_BLOCK_FNumber  = $AFE6B0;  $B0..$B9
=$afe6bd				OPL3_R_DPTH_RHYTM         = $AFE6BD;  $BD
=$afe6c0				OPL3_R_FEEDBACK           = $AFE6C0;  $C0..$C9
=$afe6e0				OPL3_R_WAVE_SELECT        = $AFE6E0;  $E0..$F5
=$afe700				OPL3_L_BASE               = $AFE700
=$e700					OPL3_L_BASE_LL            = $E700
=$00af					OPL3_L_BASE_HL            = $00AF
=$afe701				OPL3_L_TEST               = $AFE701 ; TEST
=$afe702				OPL3_L_TIMER1             = $AFE702 ; TIMER-1
=$afe703				OPL3_L_TIMER2             = $AFE703 ; TIMER-2
=$afe704				OPL3_L_IRQ                = $AFE704 ;
=$afe708				OPL3_L_CSM                = $AFE708 ;
=$afe720				OPL3_L_AM_VID_EG_KSR_MULT = $AFE720 ; $40..$35 (21 Registers)
=$afe740				OPL3_L_KSL_TL             = $AFE740;  $40..$55 (21 Registers)
=$afe760				OPL3_L_AR_DR              = $AFE760;  $60..$75 (21 Registers)
=$afe780				OPL3_L_SL_RR              = $AFE780;  $80..$95 (21 Registers)
=$afe7a0				OPL3_L_FNumber            = $AFE7A0;  $A0..$A8
=$afe7b0				OPL3_L_KON_BLOCK_FNumber  = $AFE7B0;  $B0..$B9
=$afe7bd				OPL3_L_DPTH_RHYTM         = $AFE7BD;  $BD
=$afe7c0				OPL3_L_FEEDBACK           = $AFE7C0;  $C0..$C9
=$afe7e0				OPL3_L_WAVE_SELECT        = $AFE7E0;  $E0..$F5
=$80					TREMOLO    = $80
=$40					VIBRATO    = $40
=$20					SUSTAINING = $20
=$10					KSR        = $10
=$0f					MULTIPLIER = $0F
=$c0					KEY_SCALE  = $C0
=$3f					OP_LEVEL   = $3F
=$f0					ATTACK_RT  = $F0
=$0f					DECAY_RT   = $0F
=$f0					SUSTAIN_RT = $F0
=$0f					RELEASE_RT = $0F
=$0e					FEEDBACK   = $0E
=$01					ALGORITHM  = $01
=9					OPL2_NUM_CHANNELS = 9
=0					OPERATOR1 = 0
=1					OPERATOR2 = 1
=0					MODULATOR = 0
=1					CARRIER = 1
=0					FREQ_MODULATION = 0
=1					ADDITIVE_SYNTH  = 1
=$10					DRUM_BASS   = $10
=$08					DRUM_SNARE  = $08
=$04					DRUM_TOM    = $04
=$02					DRUM_CYMBAL = $02
=$01					DRUM_HI_HAT = $01
=1					NOTE_CS =   1
=2					NOTE_D =    2
=3					NOTE_DS =   3
=4					NOTE_E =    4
=5					NOTE_F =    5
=6					NOTE_FS =   6
=7					NOTE_G =    7
=8					NOTE_GS =   8
=9					NOTE_A =    9
=10					NOTE_AS =  10
=11					NOTE_B =   11
=12					NOTE_C =   12
>3915cf	6b 01 81 01 98 01 b0 01		noteFNumbers    .word  $016B, $0181, $0198, $01B0, $01CA, $01E5, $0202, $0220, $0241, $0263, $0287, $02AE
>3915d7	ca 01 e5 01 02 02 20 02 41 02 63 02 87 02 ae 02
>3915e7	00 01 02 08 09 0a 10 11		registerOffsets_operator0 .byte $00, $01, $02, $08, $09, $0A, $10, $11, $12 ;initializers for operator 1 */
>3915ef	12
>3915f0	03 04 05 0b 0c 0d 13 14		registerOffsets_operator1 .byte $03, $04, $05, $0B, $0C, $0D, $13, $14, $15 ;initializers for operator 2 */
>3915f8	15
>3915f9	10 13 14 12 15 11		drumOffsets               .byte $10, $13, $14, $12, $15, $11
>3915ff	10 08 04 02 01			drumBits                  .byte $10, $08, $04, $02, $01
>391604	20 40 60 80 e0 c0		instrumentBaseRegs        .byte $20, $40, $60, $80, $E0, $C0

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Instruments.asm

>39160a	00 24 4f f2 0b 00 0e 31		INSTRUMENT_ACCORDN    .text $00, $24, $4F, $F2, $0B, $00, $0E, $31, $00, $52, $0B, $00, 'ACCORDN   '
>391612	00 52 0b 00 41 43 43 4f 52 44 4e 20 20 20
>391620	00 31 43 6e 17 01 02 22		INSTRUMENT_BAGPIPE1   .text $00, $31, $43, $6E, $17, $01, $02, $22, $05, $8B, $0C, $02, 'BAGPIPE1  '
>391628	05 8b 0c 02 42 41 47 50 49 50 45 31 20 20
>391636	00 30 00 ff a0 03 00 a3		INSTRUMENT_BAGPIPE2   .text $00, $30, $00, $FF, $A0, $03, $00, $A3, $00, $65, $0B, $02, 'BAGPIPE2  '
>39163e	00 65 0b 02 42 41 47 50 49 50 45 32 20 20
>39164c	00 31 87 a1 11 00 08 16		INSTRUMENT_BANJO1     .text $00, $31, $87, $A1, $11, $00, $08, $16, $80, $7D, $43, $00, 'BANJO1    '
>391654	80 7d 43 00 42 41 4e 4a 4f 31 20 20 20 20
>391662	00 01 15 25 2f 00 0a 21		INSTRUMENT_BASS1      .text $00, $01, $15, $25, $2F, $00, $0A, $21, $80, $65, $6C, $00, 'BASS1     '
>39166a	80 65 6c 00 42 41 53 53 31 20 20 20 20 20
>391678	00 01 1d f2 ef 00 0a 01		INSTRUMENT_BASS2      .text $00, $01, $1D, $F2, $EF, $00, $0A, $01, $00, $F5, $78, $00, 'BASS2     '
>391680	00 f5 78 00 42 41 53 53 32 20 20 20 20 20
>39168e	00 c0 6d f9 01 01 0e 41		INSTRUMENT_BASSHARP   .text $00, $C0, $6D, $F9, $01, $01, $0E, $41, $00, $F2, $73, $00, 'BASSHARP  '
>391696	00 f2 73 00 42 41 53 53 48 41 52 50 20 20
>3916a4	00 30 c8 d5 19 00 0c 71		INSTRUMENT_BASSOON1   .text $00, $30, $C8, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'BASSOON1  '
>3916ac	80 61 1b 00 42 41 53 53 4f 4f 4e 31 20 20
>3916ba	00 c1 4f b1 53 03 06 e0		INSTRUMENT_BASSTRLG   .text $00, $C1, $4F, $B1, $53, $03, $06, $E0, $00, $12, $74, $03, 'BASSTRLG  '
>3916c2	00 12 74 03 42 41 53 53 54 52 4c 47 20 20
>3916d0	06 00 0b a8 4c 00 00 00		INSTRUMENT_BDRUM1     .text $06, $00, $0B, $A8, $4C, $00, $00, $00, $00, $00, $00, $00, 'BDRUM1    '
>3916d8	00 00 00 00 42 44 52 55 4d 31 20 20 20 20
>3916e6	00 64 db ff 01 00 04 3e		INSTRUMENT_BELLONG    .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F3, $62, $00, 'BELLONG   '
>3916ee	c0 f3 62 00 42 45 4c 4c 4f 4e 47 20 20 20
>3916fc	00 07 4f f2 60 00 08 12		INSTRUMENT_BELLS      .text $00, $07, $4F, $F2, $60, $00, $08, $12, $00, $F2, $72, $00, 'BELLS     '
>391704	00 f2 72 00 42 45 4c 4c 53 20 20 20 20 20
>391712	00 64 db ff 01 00 04 3e		INSTRUMENT_BELSHORT   .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F5, $F3, $00, 'BELSHORT  '
>39171a	c0 f5 f3 00 42 45 4c 53 48 4f 52 54 20 20
>391728	00 20 4b 7b 04 01 0e 21		INSTRUMENT_BNCEBASS   .text $00, $20, $4B, $7B, $04, $01, $0E, $21, $00, $F5, $72, $00, 'BNCEBASS  '
>391730	00 f5 72 00 42 4e 43 45 42 41 53 53 20 20
>39173e	00 21 16 71 ae 00 0e 21		INSTRUMENT_BRASS1     .text $00, $21, $16, $71, $AE, $00, $0E, $21, $00, $81, $9E, $00, 'BRASS1    '
>391746	00 81 9e 00 42 52 41 53 53 31 20 20 20 20
>391754	00 30 c5 52 11 00 00 31		INSTRUMENT_CBASSOON   .text $00, $30, $C5, $52, $11, $00, $00, $31, $80, $31, $2E, $00, 'CBASSOON  '
>39175c	80 31 2e 00 43 42 41 53 53 4f 4f 4e 20 20
>39176a	00 33 87 01 10 00 08 14		INSTRUMENT_CELESTA    .text $00, $33, $87, $01, $10, $00, $08, $14, $80, $7D, $33, $00, 'CELESTA   '
>391772	80 7d 33 00 43 45 4c 45 53 54 41 20 20 20
>391780	00 32 16 73 24 00 0e 21		INSTRUMENT_CLAR1      .text $00, $32, $16, $73, $24, $00, $0E, $21, $80, $75, $57, $00, 'CLAR1     '
>391788	80 75 57 00 43 4c 41 52 31 20 20 20 20 20
>391796	00 31 1c 41 1b 00 0c 60		INSTRUMENT_CLAR2      .text $00, $31, $1C, $41, $1B, $00, $0C, $60, $80, $42, $3B, $00, 'CLAR2     '
>39179e	80 42 3b 00 43 4c 41 52 32 20 20 20 20 20
>3917ac	00 32 9a 51 1b 00 0c 61		INSTRUMENT_CLARINET   .text $00, $32, $9A, $51, $1B, $00, $0C, $61, $82, $A2, $3B, $00, 'CLARINET  '
>3917b4	82 a2 3b 00 43 4c 41 52 49 4e 45 54 20 20
>3917c2	00 11 0d f2 01 00 0a 15		INSTRUMENT_CLAVECIN   .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'CLAVECIN  '
>3917ca	0d f2 b1 00 43 4c 41 56 45 43 49 4e 20 20
>3917d8	00 00 02 f0 ff 00 06 11		INSTRUMENT_CROMORNE   .text $00, $00, $02, $F0, $FF, $00, $06, $11, $80, $F0, $FF, $00, 'CROMORNE  '
>3917e0	80 f0 ff 00 43 52 4f 4d 4f 52 4e 45 20 20
>3917ee	09 01 00 f5 b5 00 00 00		INSTRUMENT_CYMBAL1    .text $09, $01, $00, $F5, $B5, $00, $00, $00, $00, $00, $00, $00, 'CYMBAL1   '
>3917f6	00 00 00 00 43 59 4d 42 41 4c 31 20 20 20
>391804	00 05 8a f0 7b 00 08 01		INSTRUMENT_ELCLAV1    .text $00, $05, $8A, $F0, $7B, $00, $08, $01, $80, $F4, $7B, $00, 'ELCLAV1   '
>39180c	80 f4 7b 00 45 4c 43 4c 41 56 31 20 20 20
>39181a	00 01 49 f1 53 01 06 11		INSTRUMENT_ELCLAV2    .text $00, $01, $49, $F1, $53, $01, $06, $11, $00, $F1, $74, $02, 'ELCLAV2   '
>391822	00 f1 74 02 45 4c 43 4c 41 56 32 20 20 20
>391830	00 e0 6d 57 04 01 0e 61		INSTRUMENT_ELECFL     .text $00, $E0, $6D, $57, $04, $01, $0E, $61, $00, $67, $7D, $00, 'ELECFL    '
>391838	00 67 7d 00 45 4c 45 43 46 4c 20 20 20 20
>391846	00 13 97 9a 12 02 0e 91		INSTRUMENT_ELECVIBE   .text $00, $13, $97, $9A, $12, $02, $0E, $91, $80, $9B, $11, $00, 'ELECVIBE  '
>39184e	80 9b 11 00 45 4c 45 43 56 49 42 45 20 20
>39185c	00 f1 01 97 17 00 08 21		INSTRUMENT_ELGUIT1    .text $00, $F1, $01, $97, $17, $00, $08, $21, $0D, $F1, $18, $00, 'ELGUIT1   '
>391864	0d f1 18 00 45 4c 47 55 49 54 31 20 20 20
>391872	00 13 96 ff 21 00 0a 11		INSTRUMENT_ELGUIT2    .text $00, $13, $96, $FF, $21, $00, $0A, $11, $80, $FF, $03, $00, 'ELGUIT2   '
>39187a	80 ff 03 00 45 4c 47 55 49 54 32 20 20 20
>391888	00 07 8f 82 7d 00 0c 14		INSTRUMENT_ELGUIT3    .text $00, $07, $8F, $82, $7D, $00, $0C, $14, $80, $82, $7D, $00, 'ELGUIT3   '
>391890	80 82 7d 00 45 4c 47 55 49 54 33 20 20 20
>39189e	00 05 8f da 15 00 0a 01		INSTRUMENT_ELGUIT4    .text $00, $05, $8F, $DA, $15, $00, $0A, $01, $80, $F9, $14, $02, 'ELGUIT4   '
>3918a6	80 f9 14 02 45 4c 47 55 49 54 34 20 20 20
>3918b4	00 b2 cd 91 2a 02 09 b1		INSTRUMENT_ELORGAN1   .text $00, $B2, $CD, $91, $2A, $02, $09, $B1, $80, $91, $2A, $01, 'ELORGAN1  '
>3918bc	80 91 2a 01 45 4c 4f 52 47 41 4e 31 20 20
>3918ca	00 01 4f f1 50 00 06 01		INSTRUMENT_ELPIANO1   .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'ELPIANO1  '
>3918d2	04 d2 7c 00 45 4c 50 49 41 4e 4f 31 20 20
>3918e0	00 02 22 f2 13 00 0e 02		INSTRUMENT_ELPIANO2   .text $00, $02, $22, $F2, $13, $00, $0E, $02, $00, $F5, $43, $00, 'ELPIANO2  '
>3918e8	00 f5 43 00 45 4c 50 49 41 4e 4f 32 20 20
>3918f6	00 81 63 f3 58 00 00 01		INSTRUMENT_EPIANO1A   .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'EPIANO1A  '
>3918fe	80 f2 58 00 45 50 49 41 4e 4f 31 41 20 20
>39190c	00 07 1f f5 fa 00 0e 01		INSTRUMENT_EPIANO1B   .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'EPIANO1B  '
>391914	57 f5 fa 00 45 50 49 41 4e 4f 31 42 20 20
>391922	00 21 83 74 17 00 07 a2		INSTRUMENT_FLUTE      .text $00, $21, $83, $74, $17, $00, $07, $A2, $8D, $65, $17, $00, 'FLUTE     '
>39192a	8d 65 17 00 46 4c 55 54 45 20 20 20 20 20
>391938	00 a1 27 74 8f 00 02 a1		INSTRUMENT_FLUTE1     .text $00, $A1, $27, $74, $8F, $00, $02, $A1, $80, $65, $2A, $00, 'FLUTE1    '
>391940	80 65 2a 00 46 4c 55 54 45 31 20 20 20 20
>39194e	00 e0 ec 6e 8f 00 0e 61		INSTRUMENT_FLUTE2     .text $00, $E0, $EC, $6E, $8F, $00, $0E, $61, $00, $65, $2A, $00, 'FLUTE2    '
>391956	00 65 2a 00 46 4c 55 54 45 32 20 20 20 20
>391964	00 21 9f 53 5a 00 0c 21		INSTRUMENT_FRHORN1    .text $00, $21, $9F, $53, $5A, $00, $0C, $21, $80, $AA, $1A, $00, 'FRHORN1   '
>39196c	80 aa 1a 00 46 52 48 4f 52 4e 31 20 20 20
>39197a	00 20 8e a5 8f 02 06 21		INSTRUMENT_FRHORN2    .text $00, $20, $8E, $A5, $8F, $02, $06, $21, $00, $36, $3D, $00, 'FRHORN2   '
>391982	00 36 3d 00 46 52 48 4f 52 4e 32 20 20 20
>391990	00 f0 18 55 ef 02 00 e0		INSTRUMENT_FSTRP1     .text $00, $F0, $18, $55, $EF, $02, $00, $E0, $80, $87, $1E, $03, 'FSTRP1    '
>391998	80 87 1e 03 46 53 54 52 50 31 20 20 20 20
>3919a6	00 70 16 55 2f 02 0c e0		INSTRUMENT_FSTRP2     .text $00, $70, $16, $55, $2F, $02, $0C, $E0, $80, $87, $1E, $03, 'FSTRP2    '
>3919ae	80 87 1e 03 46 53 54 52 50 32 20 20 20 20
>3919bc	00 f1 00 97 13 00 0a 25		INSTRUMENT_FUZGUIT1   .text $00, $F1, $00, $97, $13, $00, $0A, $25, $0D, $F1, $18, $01, 'FUZGUIT1  '
>3919c4	0d f1 18 01 46 55 5a 47 55 49 54 31 20 20
>3919d2	00 31 48 f1 53 00 06 32		INSTRUMENT_FUZGUIT2   .text $00, $31, $48, $F1, $53, $00, $06, $32, $00, $F2, $27, $02, 'FUZGUIT2  '
>3919da	00 f2 27 02 46 55 5a 47 55 49 54 32 20 20
>3919e8	00 01 11 f2 1f 00 0a 01		INSTRUMENT_GUITAR1    .text $00, $01, $11, $F2, $1F, $00, $0A, $01, $00, $F5, $88, $00, 'GUITAR1   '
>3919f0	00 f5 88 00 47 55 49 54 41 52 31 20 20 20
>3919fe	00 02 29 f5 75 00 00 01		INSTRUMENT_HARP1      .text $00, $02, $29, $F5, $75, $00, $00, $01, $83, $F2, $F3, $00, 'HARP1     '
>391a06	83 f2 f3 00 48 41 52 50 31 20 20 20 20 20
>391a14	00 02 99 f5 55 00 00 01		INSTRUMENT_HARP2      .text $00, $02, $99, $F5, $55, $00, $00, $01, $80, $F6, $53, $00, 'HARP2     '
>391a1c	80 f6 53 00 48 41 52 50 32 20 20 20 20 20
>391a2a	00 02 57 f5 56 00 00 01		INSTRUMENT_HARP3      .text $00, $02, $57, $F5, $56, $00, $00, $01, $80, $F6, $54, $00, 'HARP3     '
>391a32	80 f6 54 00 48 41 52 50 33 20 20 20 20 20
>391a40	00 02 29 f5 75 00 00 01		INSTRUMENT_HARPE1     .text $00, $02, $29, $F5, $75, $00, $00, $01, $03, $F2, $F3, $00, 'HARPE1    '
>391a48	03 f2 f3 00 48 41 52 50 45 31 20 20 20 20
>391a56	00 32 87 a1 10 00 08 16		INSTRUMENT_HARPSI1    .text $00, $32, $87, $A1, $10, $00, $08, $16, $80, $7D, $33, $00, 'HARPSI1   '
>391a5e	80 7d 33 00 48 41 52 50 53 49 31 20 20 20
>391a6c	00 33 87 a1 10 00 06 15		INSTRUMENT_HARPSI2    .text $00, $33, $87, $A1, $10, $00, $06, $15, $80, $7D, $43, $00, 'HARPSI2   '
>391a74	80 7d 43 00 48 41 52 50 53 49 32 20 20 20
>391a82	00 35 84 a8 10 00 08 18		INSTRUMENT_HARPSI3    .text $00, $35, $84, $A8, $10, $00, $08, $18, $80, $7D, $33, $00, 'HARPSI3   '
>391a8a	80 7d 33 00 48 41 52 50 53 49 33 20 20 20
>391a98	00 11 0d f2 01 00 0a 15		INSTRUMENT_HARPSI4    .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'HARPSI4   '
>391aa0	0d f2 b1 00 48 41 52 50 53 49 34 20 20 20
>391aae	00 36 87 8a 00 00 08 1a		INSTRUMENT_HARPSI5    .text $00, $36, $87, $8A, $00, $00, $08, $1A, $80, $7F, $33, $00, 'HARPSI5   '
>391ab6	80 7f 33 00 48 41 52 50 53 49 35 20 20 20
>391ac4	00 f0 00 1e 11 01 08 e2		INSTRUMENT_HELICPTR   .text $00, $F0, $00, $1E, $11, $01, $08, $E2, $C0, $11, $11, $01, 'HELICPTR  '
>391acc	c0 11 11 01 48 45 4c 49 43 50 54 52 20 20
>391ada	0a 01 00 f7 b5 00 00 00		INSTRUMENT_HIHAT1     .text $0A, $01, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'HIHAT1    '
>391ae2	00 00 00 00 48 49 48 41 54 31 20 20 20 20
>391af0	0a 01 03 da 18 00 00 00		INSTRUMENT_HIHAT2     .text $0A, $01, $03, $DA, $18, $00, $00, $00, $00, $00, $00, $00, 'HIHAT2    '
>391af8	00 00 00 00 48 49 48 41 54 32 20 20 20 20
>391b06	00 87 4d 78 42 00 0a 94		INSTRUMENT_JAVAICAN   .text $00, $87, $4D, $78, $42, $00, $0A, $94, $00, $85, $54, $00, 'JAVAICAN  '
>391b0e	00 85 54 00 4a 41 56 41 49 43 41 4e 20 20
>391b1c	00 03 5e 85 51 01 0e 11		INSTRUMENT_JAZZGUIT   .text $00, $03, $5E, $85, $51, $01, $0E, $11, $00, $D2, $71, $00, 'JAZZGUIT  '
>391b24	00 d2 71 00 4a 41 5a 5a 47 55 49 54 20 20
>391b32	00 00 50 f2 70 00 0e 13		INSTRUMENT_JEWSHARP   .text $00, $00, $50, $F2, $70, $00, $0E, $13, $00, $F2, $72, $00, 'JEWSHARP  '
>391b3a	00 f2 72 00 4a 45 57 53 48 41 52 50 20 20
>391b48	00 00 02 f0 fa 01 06 11		INSTRUMENT_KEYBRD1    .text $00, $00, $02, $F0, $FA, $01, $06, $11, $80, $F2, $FA, $01, 'KEYBRD1   '
>391b50	80 f2 fa 01 4b 45 59 42 52 44 31 20 20 20
>391b5e	00 01 8f f2 bd 00 08 14		INSTRUMENT_KEYBRD2    .text $00, $01, $8F, $F2, $BD, $00, $08, $14, $80, $82, $BD, $00, 'KEYBRD2   '
>391b66	80 82 bd 00 4b 45 59 42 52 44 32 20 20 20
>391b74	00 01 00 f0 f0 00 00 e4		INSTRUMENT_KEYBRD3    .text $00, $01, $00, $F0, $F0, $00, $00, $E4, $03, $F3, $36, $00, 'KEYBRD3   '
>391b7c	03 f3 36 00 4b 45 59 42 52 44 33 20 20 20
>391b8a	09 e6 00 25 b5 00 00 00		INSTRUMENT_LASER      .text $09, $E6, $00, $25, $B5, $00, $00, $00, $00, $00, $00, $00, 'LASER     '
>391b92	00 00 00 00 4c 41 53 45 52 20 20 20 20 20
>391ba0	00 32 44 f8 ff 00 0e 11		INSTRUMENT_LOGDRUM1   .text $00, $32, $44, $F8, $FF, $00, $0E, $11, $00, $F5, $7F, $00, 'LOGDRUM1  '
>391ba8	00 f5 7f 00 4c 4f 47 44 52 55 4d 31 20 20
>391bb6	00 05 4e da 25 00 0a 01		INSTRUMENT_MARIMBA1   .text $00, $05, $4E, $DA, $25, $00, $0A, $01, $00, $F9, $15, $00, 'MARIMBA1  '
>391bbe	00 f9 15 00 4d 41 52 49 4d 42 41 31 20 20
>391bcc	00 85 4e da 15 00 0a 81		INSTRUMENT_MARIMBA2   .text $00, $85, $4E, $DA, $15, $00, $0A, $81, $80, $F9, $13, $00, 'MARIMBA2  '
>391bd4	80 f9 13 00 4d 41 52 49 4d 42 41 32 20 20
>391be2	00 30 00 fe 11 01 08 ae		INSTRUMENT_MDRNPHON   .text $00, $30, $00, $FE, $11, $01, $08, $AE, $C0, $F1, $19, $01, 'MDRNPHON  '
>391bea	c0 f1 19 01 4d 44 52 4e 50 48 4f 4e 20 20
>391bf8	07 0c 00 c8 b6 01 00 00		INSTRUMENT_MLTRDRUM   .text $07, $0C, $00, $C8, $B6, $01, $00, $00, $00, $00, $00, $00, 'MLTRDRUM  '
>391c00	00 00 00 00 4d 4c 54 52 44 52 55 4d 20 20
>391c0e	00 20 90 f5 9e 02 0c 11		INSTRUMENT_MOOGSYNT   .text $00, $20, $90, $F5, $9E, $02, $0C, $11, $00, $F4, $5B, $03, 'MOOGSYNT  '
>391c16	00 f4 5b 03 4d 4f 4f 47 53 59 4e 54 20 20
>391c24	00 0e 40 d1 53 00 0e 0e		INSTRUMENT_NOISE1     .text $00, $0E, $40, $D1, $53, $00, $0E, $0E, $00, $F2, $7F, $03, 'NOISE1    '
>391c2c	00 f2 7f 03 4e 4f 49 53 45 31 20 20 20 20
>391c3a	00 b1 c5 6e 17 00 02 22		INSTRUMENT_OBOE1      .text $00, $B1, $C5, $6E, $17, $00, $02, $22, $05, $8B, $0E, $00, 'OBOE1     '
>391c42	05 8b 0e 00 4f 42 4f 45 31 20 20 20 20 20
>391c50	00 65 d2 81 03 00 02 71		INSTRUMENT_ORGAN1     .text $00, $65, $D2, $81, $03, $00, $02, $71, $80, $F1, $05, $00, 'ORGAN1    '
>391c58	80 f1 05 00 4f 52 47 41 4e 31 20 20 20 20
>391c66	00 24 80 ff 0f 00 01 21		INSTRUMENT_ORGAN2     .text $00, $24, $80, $FF, $0F, $00, $01, $21, $80, $FF, $0F, $00, 'ORGAN2    '
>391c6e	80 ff 0f 00 4f 52 47 41 4e 32 20 20 20 20
>391c7c	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3     .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $80, $F0, $1F, $00, 'ORGAN3    '
>391c84	80 f0 1f 00 4f 52 47 41 4e 33 20 20 20 20
>391c92	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3A    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $8D, $F0, $13, $00, 'ORGAN3A   '
>391c9a	8d f0 13 00 4f 52 47 41 4e 33 41 20 20 20
>391ca8	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3B    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $92, $F0, $12, $00, 'ORGAN3B   '
>391cb0	92 f0 12 00 4f 52 47 41 4e 33 42 20 20 20
>391cbe	00 0c 00 f8 b5 00 01 00		INSTRUMENT_ORGNPERC   .text $00, $0C, $00, $F8, $B5, $00, $01, $00, $00, $D6, $4F, $00, 'ORGNPERC  '
>391cc6	00 d6 4f 00 4f 52 47 4e 50 45 52 43 20 20
>391cd4	00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE1     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F1, $B2, $00, 'PHONE1    '
>391cdc	08 f1 b2 00 50 48 4f 4e 45 31 20 20 20 20
>391cea	00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE2     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $0A, $F1, $B4, $00, 'PHONE2    '
>391cf2	0a f1 b4 00 50 48 4f 4e 45 32 20 20 20 20
>391d00	00 81 63 f3 58 00 00 01		INSTRUMENT_PIAN1A     .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'PIAN1A    '
>391d08	80 f2 58 00 50 49 41 4e 31 41 20 20 20 20
>391d16	00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1B     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $26, $F5, $FA, $00, 'PIAN1B    '
>391d1e	26 f5 fa 00 50 49 41 4e 31 42 20 20 20 20
>391d2c	00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1C     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'PIAN1C    '
>391d34	57 f5 fa 00 50 49 41 4e 31 43 20 20 20 20
>391d42	00 03 4f f1 53 00 06 17		INSTRUMENT_PIANO      .text $00, $03, $4F, $F1, $53, $00, $06, $17, $00, $F2, $74, $00, 'PIANO     '
>391d4a	00 f2 74 00 50 49 41 4e 4f 20 20 20 20 20
>391d58	00 01 4f f1 53 00 06 11		INSTRUMENT_PIANO1     .text $00, $01, $4F, $F1, $53, $00, $06, $11, $00, $D2, $74, $00, 'PIANO1    '
>391d60	00 d2 74 00 50 49 41 4e 4f 31 20 20 20 20
>391d6e	00 41 9d f2 51 00 06 13		INSTRUMENT_PIANO2     .text $00, $41, $9D, $F2, $51, $00, $06, $13, $00, $F2, $F1, $00, 'PIANO2    '
>391d76	00 f2 f1 00 50 49 41 4e 4f 32 20 20 20 20
>391d84	00 01 4f f1 50 00 06 01		INSTRUMENT_PIANO3     .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'PIANO3    '
>391d8c	04 d2 7c 00 50 49 41 4e 4f 33 20 20 20 20
>391d9a	00 01 4d f1 60 00 08 11		INSTRUMENT_PIANO4     .text $00, $01, $4D, $F1, $60, $00, $08, $11, $00, $D2, $7B, $00, 'PIANO4    '
>391da2	00 d2 7b 00 50 49 41 4e 4f 34 20 20 20 20
>391db0	00 03 4f f1 53 00 06 17		INSTRUMENT_PIANOBEL   .text $00, $03, $4F, $F1, $53, $00, $06, $17, $03, $F2, $74, $00, 'PIANOBEL  '
>391db8	03 f2 74 00 50 49 41 4e 4f 42 45 4c 20 20
>391dc6	00 01 cf f1 53 00 02 12		INSTRUMENT_PIANOF     .text $00, $01, $CF, $F1, $53, $00, $02, $12, $00, $F2, $83, $00, 'PIANOF    '
>391dce	00 f2 83 00 50 49 41 4e 4f 46 20 20 20 20
>391ddc	00 10 00 75 93 01 00 01		INSTRUMENT_POPBASS1   .text $00, $10, $00, $75, $93, $01, $00, $01, $00, $F5, $82, $01, 'POPBASS1  '
>391de4	00 f5 82 01 50 4f 50 42 41 53 53 31 20 20
>391df2	07 0c 00 c7 b4 00 00 00		INSTRUMENT_RKSNARE1   .text $07, $0C, $00, $C7, $B4, $00, $00, $00, $00, $00, $00, $00, 'RKSNARE1  '
>391dfa	00 00 00 00 52 4b 53 4e 41 52 45 31 20 20
>391e08	00 01 4f 71 53 00 0a 12		INSTRUMENT_SAX1       .text $00, $01, $4F, $71, $53, $00, $0A, $12, $00, $52, $7C, $00, 'SAX1      '
>391e10	00 52 7c 00 53 41 58 31 20 20 20 20 20 20
>391e1e	00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH    .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH   '
>391e26	00 5c dc 00 53 43 52 41 54 43 48 20 20 20
>391e34	00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH4   .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH4  '
>391e3c	00 5c dc 00 53 43 52 41 54 43 48 34 20 20
>391e4a	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SDRUM2     .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SDRUM2    '
>391e52	00 f6 b4 00 53 44 52 55 4d 32 20 20 20 20
>391e60	00 e4 0e ff 3f 01 00 c0		INSTRUMENT_SHRTVIBE   .text $00, $E4, $0E, $FF, $3F, $01, $00, $C0, $00, $F3, $07, $00, 'SHRTVIBE  '
>391e68	00 f3 07 00 53 48 52 54 56 49 42 45 20 20
>391e76	00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR1     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $00, 'SITAR1    '
>391e7e	40 f1 53 00 53 49 54 41 52 31 20 20 20 20
>391e8c	00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR2     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $01, 'SITAR2    '
>391e94	40 f1 53 01 53 49 54 41 52 32 20 20 20 20
>391ea2	00 61 0c 81 03 00 08 71		INSTRUMENT_SNAKEFL    .text $00, $61, $0C, $81, $03, $00, $08, $71, $80, $61, $0C, $00, 'SNAKEFL   '
>391eaa	80 61 0c 00 53 4e 41 4b 45 46 4c 20 20 20
>391eb8	07 0c 00 f8 b5 00 00 00		INSTRUMENT_SNARE1     .text $07, $0C, $00, $F8, $B5, $00, $00, $00, $00, $00, $00, $00, 'SNARE1    '
>391ec0	00 00 00 00 53 4e 41 52 45 31 20 20 20 20
>391ece	00 06 00 f0 f0 00 0e c4		INSTRUMENT_SNRSUST    .text $00, $06, $00, $F0, $F0, $00, $0E, $C4, $03, $C4, $34, $00, 'SNRSUST   '
>391ed6	03 c4 34 00 53 4e 52 53 55 53 54 20 20 20
>391ee4	00 70 1c 51 03 02 0e 20		INSTRUMENT_SOLOVLN    .text $00, $70, $1C, $51, $03, $02, $0E, $20, $00, $54, $67, $02, 'SOLOVLN   '
>391eec	00 54 67 02 53 4f 4c 4f 56 4c 4e 20 20 20
>391efa	00 01 46 f1 83 00 06 61		INSTRUMENT_STEELGT1   .text $00, $01, $46, $F1, $83, $00, $06, $61, $03, $31, $86, $00, 'STEELGT1  '
>391f02	03 31 86 00 53 54 45 45 4c 47 54 31 20 20
>391f10	00 01 47 f1 83 00 06 61		INSTRUMENT_STEELGT2   .text $00, $01, $47, $F1, $83, $00, $06, $61, $03, $91, $86, $00, 'STEELGT2  '
>391f18	03 91 86 00 53 54 45 45 4c 47 54 32 20 20
>391f26	00 b1 8b 71 11 00 06 61		INSTRUMENT_STRINGS1   .text $00, $B1, $8B, $71, $11, $00, $06, $61, $40, $42, $15, $01, 'STRINGS1  '
>391f2e	40 42 15 01 53 54 52 49 4e 47 53 31 20 20
>391f3c	00 e1 4f b1 d3 03 06 21		INSTRUMENT_STRNLONG   .text $00, $E1, $4F, $B1, $D3, $03, $06, $21, $00, $12, $74, $01, 'STRNLONG  '
>391f44	00 12 74 01 53 54 52 4e 4c 4f 4e 47 20 20
>391f52	00 55 97 2a 02 00 00 12		INSTRUMENT_SYN1       .text $00, $55, $97, $2A, $02, $00, $00, $12, $80, $42, $F3, $00, 'SYN1      '
>391f5a	80 42 f3 00 53 59 4e 31 20 20 20 20 20 20
>391f68	00 13 97 9a 12 00 0e 11		INSTRUMENT_SYN2       .text $00, $13, $97, $9A, $12, $00, $0E, $11, $80, $9B, $14, $00, 'SYN2      '
>391f70	80 9b 14 00 53 59 4e 32 20 20 20 20 20 20
>391f7e	00 11 8a f1 11 00 06 01		INSTRUMENT_SYN3       .text $00, $11, $8A, $F1, $11, $00, $06, $01, $40, $F1, $B3, $00, 'SYN3      '
>391f86	40 f1 b3 00 53 59 4e 33 20 20 20 20 20 20
>391f94	00 21 0d e9 3a 00 0a 22		INSTRUMENT_SYN4       .text $00, $21, $0D, $E9, $3A, $00, $0A, $22, $80, $65, $6C, $00, 'SYN4      '
>391f9c	80 65 6c 00 53 59 4e 34 20 20 20 20 20 20
>391faa	00 01 4f 71 53 00 06 19		INSTRUMENT_SYN5       .text $00, $01, $4F, $71, $53, $00, $06, $19, $00, $52, $7C, $00, 'SYN5      '
>391fb2	00 52 7c 00 53 59 4e 35 20 20 20 20 20 20
>391fc0	00 24 0f 41 7e 00 0a 21		INSTRUMENT_SYN6       .text $00, $24, $0F, $41, $7E, $00, $0A, $21, $00, $F1, $5E, $00, 'SYN6      '
>391fc8	00 f1 5e 00 53 59 4e 36 20 20 20 20 20 20
>391fd6	00 07 87 f0 05 00 04 01		INSTRUMENT_SYN9       .text $00, $07, $87, $F0, $05, $00, $04, $01, $80, $F0, $05, $00, 'SYN9      '
>391fde	80 f0 05 00 53 59 4e 39 20 20 20 20 20 20
>391fec	00 26 03 e0 f0 00 08 1e		INSTRUMENT_SYNBAL1    .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'SYNBAL1   '
>391ff4	00 ff 31 00 53 59 4e 42 41 4c 31 20 20 20
>392002	00 28 03 e0 f0 00 04 13		INSTRUMENT_SYNBAL2    .text $00, $28, $03, $E0, $F0, $00, $04, $13, $00, $E8, $11, $00, 'SYNBAL2   '
>39200a	00 e8 11 00 53 59 4e 42 41 4c 32 20 20 20
>392018	00 30 88 d5 19 00 0c 71		INSTRUMENT_SYNBASS1   .text $00, $30, $88, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'SYNBASS1  '
>392020	80 61 1b 00 53 59 4e 42 41 53 53 31 20 20
>39202e	00 81 86 65 01 00 0c 11		INSTRUMENT_SYNBASS2   .text $00, $81, $86, $65, $01, $00, $0C, $11, $00, $32, $74, $00, 'SYNBASS2  '
>392036	00 32 74 00 53 59 4e 42 41 53 53 32 20 20
>392044	00 81 83 65 05 00 0a 51		INSTRUMENT_SYNBASS4   .text $00, $81, $83, $65, $05, $00, $0A, $51, $00, $32, $74, $00, 'SYNBASS4  '
>39204c	00 32 74 00 53 59 4e 42 41 53 53 34 20 20
>39205a	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR1    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F8, $B6, $00, 'SYNSNR1   '
>392062	00 f8 b6 00 53 59 4e 53 4e 52 31 20 20 20
>392070	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR2    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SYNSNR2   '
>392078	00 f6 b4 00 53 59 4e 53 4e 52 32 20 20 20
>392086	00 8f 81 ef 01 00 04 01		INSTRUMENT_TINCAN1    .text $00, $8F, $81, $EF, $01, $00, $04, $01, $00, $98, $F1, $00, 'TINCAN1   '
>39208e	00 98 f1 00 54 49 4e 43 41 4e 31 20 20 20
>39209c	08 04 00 f7 b5 00 00 00		INSTRUMENT_TOM1       .text $08, $04, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'TOM1      '
>3920a4	00 00 00 00 54 4f 4d 31 20 20 20 20 20 20
>3920b2	08 02 00 c8 97 00 00 00		INSTRUMENT_TOM2       .text $08, $02, $00, $C8, $97, $00, $00, $00, $00, $00, $00, $00, 'TOM2      '
>3920ba	00 00 00 00 54 4f 4d 32 20 20 20 20 20 20
>3920c8	00 17 4f f2 61 00 08 12		INSTRUMENT_TRAINBEL   .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F2, $74, $00, 'TRAINBEL  '
>3920d0	08 f2 74 00 54 52 41 49 4e 42 45 4c 20 20
>3920de	00 26 03 e0 f0 00 08 1e		INSTRUMENT_TRIANGLE   .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'TRIANGLE  '
>3920e6	00 ff 31 00 54 52 49 41 4e 47 4c 45 20 20
>3920f4	00 b1 1c 41 1f 00 0e 61		INSTRUMENT_TROMB1     .text $00, $B1, $1C, $41, $1F, $00, $0E, $61, $80, $92, $3B, $00, 'TROMB1    '
>3920fc	80 92 3b 00 54 52 4f 4d 42 31 20 20 20 20
>39210a	00 21 1c 53 1d 00 0c 61		INSTRUMENT_TROMB2     .text $00, $21, $1C, $53, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TROMB2    '
>392112	80 52 3b 00 54 52 4f 4d 42 32 20 20 20 20
>392120	00 31 1c 41 0b 00 0e 61		INSTRUMENT_TRUMPET1   .text $00, $31, $1C, $41, $0B, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET1  '
>392128	80 92 3b 00 54 52 55 4d 50 45 54 31 20 20
>392136	00 31 1c 23 1d 00 0c 61		INSTRUMENT_TRUMPET2   .text $00, $31, $1C, $23, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TRUMPET2  '
>39213e	80 52 3b 00 54 52 55 4d 50 45 54 32 20 20
>39214c	00 31 1c 41 01 00 0e 61		INSTRUMENT_TRUMPET3   .text $00, $31, $1C, $41, $01, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET3  '
>392154	80 92 3b 00 54 52 55 4d 50 45 54 33 20 20
>392162	00 31 1c 41 0b 00 0c 61		INSTRUMENT_TRUMPET4   .text $00, $31, $1C, $41, $0B, $00, $0C, $61, $80, $92, $3B, $00, 'TRUMPET4  '
>39216a	80 92 3b 00 54 52 55 4d 50 45 54 34 20 20
>392178	00 21 19 43 8c 00 0c 21		INSTRUMENT_TUBA1      .text $00, $21, $19, $43, $8C, $00, $0C, $21, $80, $85, $2F, $00, 'TUBA1     '
>392180	80 85 2f 00 54 55 42 41 31 20 20 20 20 20
>39218e	00 84 53 f5 33 00 06 a0		INSTRUMENT_VIBRA1     .text $00, $84, $53, $F5, $33, $00, $06, $A0, $80, $FD, $25, $00, 'VIBRA1    '
>392196	80 fd 25 00 56 49 42 52 41 31 20 20 20 20
>3921a4	00 06 73 f6 54 00 00 81		INSTRUMENT_VIBRA2     .text $00, $06, $73, $F6, $54, $00, $00, $81, $03, $F2, $B3, $00, 'VIBRA2    '
>3921ac	03 f2 b3 00 56 49 42 52 41 32 20 20 20 20
>3921ba	00 93 97 aa 12 02 0e 91		INSTRUMENT_VIBRA3     .text $00, $93, $97, $AA, $12, $02, $0E, $91, $80, $AC, $21, $00, 'VIBRA3    '
>3921c2	80 ac 21 00 56 49 42 52 41 33 20 20 20 20
>3921d0	00 31 1c 51 03 00 0e 61		INSTRUMENT_VIOLIN1    .text $00, $31, $1C, $51, $03, $00, $0E, $61, $80, $54, $67, $00, 'VIOLIN1   '
>3921d8	80 54 67 00 56 49 4f 4c 49 4e 31 20 20 20
>3921e6	00 e1 88 62 29 00 0c 22		INSTRUMENT_VIOLIN2    .text $00, $E1, $88, $62, $29, $00, $0C, $22, $80, $53, $2C, $00, 'VIOLIN2   '
>3921ee	80 53 2c 00 56 49 4f 4c 49 4e 32 20 20 20
>3921fc	00 e1 88 64 29 00 06 22		INSTRUMENT_VIOLIN3    .text $00, $E1, $88, $64, $29, $00, $06, $22, $83, $53, $2C, $00, 'VIOLIN3   '
>392204	83 53 2c 00 56 49 4f 4c 49 4e 33 20 20 20
>392212	00 31 9c f1 f9 00 0e 31		INSTRUMENT_VLNPIZZ1   .text $00, $31, $9C, $F1, $F9, $00, $0E, $31, $80, $F7, $E6, $00, 'VLNPIZZ1  '
>39221a	80 f7 e6 00 56 4c 4e 50 49 5a 5a 31 20 20
>392228	00 00 02 00 f0 00 0e 14		INSTRUMENT_WAVE       .text $00, $00, $02, $00, $F0, $00, $0E, $14, $80, $1B, $A2, $00, 'WAVE      '
>392230	80 1b a2 00 57 41 56 45 20 20 20 20 20 20
>39223e	00 11 2d c8 2f 00 0c 31		INSTRUMENT_XYLO1      .text $00, $11, $2D, $C8, $2F, $00, $0C, $31, $00, $F5, $F5, $00, 'XYLO1     '
>392246	00 f5 f5 00 58 59 4c 4f 31 20 20 20 20 20
>392254	06 2e 00 ff 0f 00 00 00		INSTRUMENT_XYLO2      .text $06, $2E, $00, $FF, $0F, $00, $00, $00, $00, $00, $00, $00, 'XYLO2     '
>39225c	00 00 00 00 58 59 4c 4f 32 20 20 20 20 20
>39226a	00 06 00 ff f0 00 0e c4		INSTRUMENT_XYLO3      .text $00, $06, $00, $FF, $F0, $00, $0E, $C4, $00, $F8, $B5, $00, 'XYLO3     '
>392272	00 f8 b5 00 58 59 4c 4f 33 20 20 20 20 20

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Drums.asm

>392280	00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP2         .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>392288	00 87 fa 00
>39228c	00 01 00 78 97 09 00 02		DRUMINS_SCRATCH1      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>392294	00 88 98 03
>392298	00 01 00 78 97 09 00 02		DRUMINS_SCRATCH2      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>3922a0	00 88 98 03
>3922a4	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT2      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>3922ac	00 f9 69 00
>3922b0	00 00 00 f8 6c 01 00 0e		DRUMINS_HIQ           .text $00, $00, $00, $F8, $6C, $01, $00, $0E, $80, $E8, $4A, $00
>3922b8	80 e8 4a 00
>3922bc	00 25 1b fa f2 01 00 12		DRUMINS_WOODBLOK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>3922c4	00 f6 9a 00
>3922c8	00 06 03 f4 44 00 01 01		DRUMINS_GLOCK         .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>3922d0	1b f2 34 00
>3922d4	00 00 00 f9 f3 05 00 01		DRUMINS_BASS_DR2      .text $00, $00, $00, $F9, $F3, $05, $00, $01, $00, $F7, $8A, $00
>3922dc	00 f7 8a 00
>3922e0	00 01 07 fa fd 05 00 01		DRUMINS_BASS_DR1      .text $00, $01, $07, $FA, $FD, $05, $00, $01, $00, $F6, $47, $00
>3922e8	00 f6 47 00
>3922ec	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT       .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>3922f4	00 f9 69 00
>3922f8	00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_AC      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>392300	00 f7 a9 00
>392304	00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP          .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>39230c	00 87 fa 00
>392310	00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_EL      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>392318	00 f7 a9 00
>39231c	00 06 0a fa 1f 0c 00 11		DRUMINS_LO_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>392324	00 f5 f5 00
>392328	00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_CL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>392330	06 b8 d8 03
>392334	00 06 0a fa 1f 0c 00 11		DRUMINS_HI_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>39233c	00 f5 f5 00
>392340	00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_PL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>392348	06 b8 d8 03
>39234c	00 06 0a fa 1f 0c 00 11		DRUMINS_LOW_TOM       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>392354	00 f5 f5 00
>392358	00 2e 00 82 f6 05 00 04		DRUMINS_HIHAT_OP      .text $00, $2E, $00, $82, $F6, $05, $00, $04, $10, $74, $F8, $03
>392360	10 74 f8 03
>392364	00 06 0a fa 1f 0c 00 11		DRUMINS_LTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>39236c	00 f5 f5 00
>392370	00 06 0a fa 1f 0c 00 11		DRUMINS_HTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>392378	00 f5 f5 00
>39237c	00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH         .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>392384	05 c5 d4 03
>392388	00 06 0a fa 1f 0c 00 11		DRUMINS_TOM_HIGH      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>392390	00 f5 f5 00
>392394	00 29 10 94 00 0f 00 04		DRUMINS_RIDE_CY       .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>39239c	04 f9 44 03
>3923a0	00 2c 00 9f 00 0f 02 0e		DRUMINS_TAMBOUR       .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>3923a8	05 c5 d4 03
>3923ac	00 29 10 94 00 0f 00 04		DRUMINS_CYMBAL        .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>3923b4	04 f9 44 03
>3923b8	00 2e 09 f5 f1 01 00 06		DRUMINS_TAMBOU2       .text $00, $2E, $09, $F5, $F1, $01, $00, $06, $03, $87, $F7, $03
>3923c0	03 87 f7 03
>3923c4	00 2c 00 9f 00 0f 02 0e		DRUMINS_SPLASH        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>3923cc	05 c5 d4 03
>3923d0	00 37 14 f7 a1 09 01 03		DRUMINS_COWBELL       .text $00, $37, $14, $F7, $A1, $09, $01, $03, $00, $F6, $28, $00
>3923d8	00 f6 28 00
>3923dc	00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH2        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>3923e4	05 c5 d4 03
>3923e8	00 80 00 ff 00 0d 01 00		DRUMINS_VIBRASLA      .text $00, $80, $00, $FF, $00, $0D, $01, $00, $00, $F5, $F7, $01
>3923f0	00 f5 f7 01
>3923f4	00 29 10 94 00 0f 00 04		DRUMINS_RIDE2         .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>3923fc	04 f9 44 03
>392400	00 25 c4 fa fa 01 00 03		DRUMINS_HI_BONGO      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>392408	00 99 f9 00
>39240c	00 21 03 fb fa 01 01 02		DRUMINS_LO_BONGO      .text $00, $21, $03, $FB, $FA, $01, $01, $02, $00, $A8, $F7, $00
>392414	00 a8 f7 00
>392418	00 25 c4 fa fa 01 00 03		DRUMINS_MUTECONG      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>392420	00 99 f9 00
>392424	00 24 18 f9 fa 0f 02 03		DRUMINS_OPENCONG      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>39242c	00 a6 f6 00
>392430	00 24 18 f9 fa 0f 02 03		DRUMINS_LOWCONGA      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>392438	00 a6 f6 00
>39243c	00 05 14 f5 f5 07 02 03		DRUMINS_HI_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>392444	00 f6 36 02
>392448	00 05 14 f5 f5 07 02 03		DRUMINS_LO_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>392450	00 f6 36 02
>392454	00 1c 0c f9 31 0f 01 15		DRUMINS_HI_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>39245c	00 96 e8 01
>392460	00 1c 0c f9 31 0f 01 15		DRUMINS_LO_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>392468	00 96 e8 01
>39246c	00 0e 00 ff 01 0f 00 0e		DRUMINS_CABASA        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>392474	02 79 77 03
>392478	00 0e 00 ff 01 0f 00 0e		DRUMINS_MARACAS       .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>392480	02 79 77 03
>392484	00 20 15 af 07 05 01 0e		DRUMINS_S_WHISTL      .text $00, $20, $15, $AF, $07, $05, $01, $0E, $00, $A5, $2B, $02
>39248c	00 a5 2b 02
>392490	00 20 18 bf 07 01 01 0e		DRUMINS_L_WHISTL      .text $00, $20, $18, $BF, $07, $01, $01, $0E, $00, $93, $3B, $02
>392498	00 93 3b 02
>39249c	00 20 00 f0 f7 0b 00 08		DRUMINS_S_GUIRO       .text $00, $20, $00, $F0, $F7, $0B, $00, $08, $01, $89, $3B, $03
>3924a4	01 89 3b 03
>3924a8	00 20 00 f3 fa 09 00 08		DRUMINS_L_GUIRO       .text $00, $20, $00, $F3, $FA, $09, $00, $08, $0A, $53, $2B, $02
>3924b0	0a 53 2b 02
>3924b4	00 15 21 f8 9a 09 01 13		DRUMINS_CLAVES        .text $00, $15, $21, $F8, $9A, $09, $01, $13, $00, $F6, $89, $00
>3924bc	00 f6 89 00
>3924c0	00 25 1b fa f2 01 00 12		DRUMINS_HI_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>3924c8	00 f6 9a 00
>3924cc	00 25 1b fa f2 01 00 12		DRUMINS_LO_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>3924d4	00 f6 9a 00
>3924d8	00 20 01 5f 07 01 00 08		DRUMINS_MU_CUICA      .text $00, $20, $01, $5F, $07, $01, $00, $08, $00, $87, $4B, $01
>3924e0	00 87 4b 01
>3924e4	00 25 12 57 f7 01 01 03		DRUMINS_OP_CUICA      .text $00, $25, $12, $57, $F7, $01, $01, $03, $00, $78, $67, $01
>3924ec	00 78 67 01
>3924f0	00 22 2f f1 f0 07 00 27		DRUMINS_MU_TRNGL      .text $00, $22, $2F, $F1, $F0, $07, $00, $27, $02, $F8, $FC, $00
>3924f8	02 f8 fc 00
>3924fc	00 26 44 f1 f0 07 00 27		DRUMINS_OP_TRNGL      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>392504	40 f5 f5 00
>392508	00 0e 00 ff 01 0f 00 0e		DRUMINS_SHAKER        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>392510	02 79 77 03
>392514	00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL1      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>39251c	40 f5 f5 00
>392520	00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL2      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>392528	40 f5 f5 00
>39252c	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT3      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>392534	00 f9 69 00
>392538	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT4      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>392540	00 f9 69 00
>392544	00 02 1d f5 93 01 00 00		DRUMINS_TAIKO         .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>39254c	00 c6 45 00
=27					DRUM_NOTE_BASE = 27;
=60					NUM_MIDI_DRUMS = 60;
>392550	80 22 39 00 8c 22 39 00		midiDrums     .dword DRUMINS_CLAP2, DRUMINS_SCRATCH1, DRUMINS_SCRATCH2, DRUMINS_RIMSHOT2
>392558	98 22 39 00 a4 22 39 00
>392560	b0 22 39 00 bc 22 39 00		              .dword DRUMINS_HIQ, DRUMINS_WOODBLOK, DRUMINS_GLOCK, DRUMINS_BASS_DR2
>392568	c8 22 39 00 d4 22 39 00
>392570	e0 22 39 00 ec 22 39 00		              .dword DRUMINS_BASS_DR1, DRUMINS_RIMSHOT,  DRUMINS_SNARE_AC, DRUMINS_CLAP
>392578	f8 22 39 00 04 23 39 00
>392580	10 23 39 00 1c 23 39 00		              .dword DRUMINS_SNARE_EL, DRUMINS_LO_TOMS,  DRUMINS_HIHAT_CL, DRUMINS_HI_TOMS
>392588	28 23 39 00 34 23 39 00
>392590	40 23 39 00 4c 23 39 00		              .dword DRUMINS_HIHAT_PL, DRUMINS_LOW_TOM,	DRUMINS_HIHAT_OP, DRUMINS_LTOM_MID
>392598	58 23 39 00 64 23 39 00
>3925a0	70 23 39 00 7c 23 39 00		              .dword DRUMINS_HTOM_MID, DRUMINS_CRASH,    DRUMINS_TOM_HIGH, DRUMINS_RIDE_CY
>3925a8	88 23 39 00 94 23 39 00
>3925b0	a0 23 39 00 ac 23 39 00		              .dword DRUMINS_TAMBOUR,  DRUMINS_CYMBAL,   DRUMINS_TAMBOU2,  DRUMINS_SPLASH
>3925b8	b8 23 39 00 c4 23 39 00
>3925c0	d0 23 39 00 dc 23 39 00		              .dword DRUMINS_COWBELL,  DRUMINS_CRASH2, 	DRUMINS_VIBRASLA, DRUMINS_RIDE2
>3925c8	e8 23 39 00 f4 23 39 00
>3925d0	00 24 39 00 0c 24 39 00		              .dword DRUMINS_HI_BONGO, DRUMINS_LO_BONGO, DRUMINS_MUTECONG, DRUMINS_OPENCONG
>3925d8	18 24 39 00 24 24 39 00
>3925e0	30 24 39 00 3c 24 39 00		              .dword DRUMINS_LOWCONGA, DRUMINS_HI_TIMBA, DRUMINS_LO_TIMBA, DRUMINS_HI_AGOGO
>3925e8	48 24 39 00 54 24 39 00
>3925f0	60 24 39 00 6c 24 39 00		              .dword DRUMINS_LO_AGOGO, DRUMINS_CABASA, DRUMINS_MARACAS,  DRUMINS_S_WHISTL
>3925f8	78 24 39 00 84 24 39 00
>392600	90 24 39 00 9c 24 39 00		              .dword DRUMINS_L_WHISTL, DRUMINS_S_GUIRO,  DRUMINS_L_GUIRO,  DRUMINS_CLAVES
>392608	a8 24 39 00 b4 24 39 00
>392610	c0 24 39 00 cc 24 39 00		              .dword DRUMINS_HI_WDBLK, DRUMINS_LO_WDBLK, DRUMINS_MU_CUICA, DRUMINS_OP_CUICA
>392618	d8 24 39 00 e4 24 39 00
>392620	f0 24 39 00 fc 24 39 00		              .dword DRUMINS_MU_TRNGL, DRUMINS_OP_TRNGL, DRUMINS_SHAKER, DRUMINS_TRIANGL1
>392628	08 25 39 00 14 25 39 00
>392630	20 25 39 00 2c 25 39 00		              .dword DRUMINS_TRIANGL2, DRUMINS_RIMSHOT3, DRUMINS_RIMSHOT4, DRUMINS_TAIKO
>392638	38 25 39 00 44 25 39 00

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Instruments.asm

>392640	00 33 5a b2 50 01 00 31		MIDI_INSTRUMENT_PIANO1     .text $00, $33, $5A, $B2, $50, $01, $00, $31, $00, $B1, $F5, $01
>392648	00 b1 f5 01
>39264c	00 31 49 f2 53 07 01 11		MIDI_INSTRUMENT_PIANO2     .text $00, $31, $49, $F2, $53, $07, $01, $11, $03, $F1, $F5, $00
>392654	03 f1 f5 00
>392658	00 31 95 d1 83 0d 01 32		MIDI_INSTRUMENT_PIANO3     .text $00, $31, $95, $D1, $83, $0D, $01, $32, $03, $C1, $F5, $00
>392660	03 c1 f5 00
>392664	00 34 9b f3 63 01 01 11		MIDI_INSTRUMENT_HONKTONK   .text $00, $34, $9B, $F3, $63, $01, $01, $11, $00, $92, $F5, $01
>39266c	00 92 f5 01
>392670	00 27 28 f8 b7 01 02 91		MIDI_INSTRUMENT_EP1        .text $00, $27, $28, $F8, $B7, $01, $02, $91, $00, $F1, $F9, $00
>392678	00 f1 f9 00
>39267c	00 1a 2d f3 ee 01 01 11		MIDI_INSTRUMENT_EP2        .text $00, $1A, $2D, $F3, $EE, $01, $01, $11, $00, $F1, $F5, $00
>392684	00 f1 f5 00
>392688	00 35 95 f2 58 0f 01 32		MIDI_INSTRUMENT_HARPSIC    .text $00, $35, $95, $F2, $58, $0F, $01, $32, $02, $81, $F6, $01
>392690	02 81 f6 01
>392694	00 31 85 c9 40 01 00 35		MIDI_INSTRUMENT_CLAVIC     .text $00, $31, $85, $C9, $40, $01, $00, $35, $00, $C2, $B9, $01
>39269c	00 c2 b9 01
>3926a0	00 09 15 c7 64 08 00 01		MIDI_INSTRUMENT_CELESTA    .text $00, $09, $15, $C7, $64, $08, $00, $01, $05, $B2, $35, $00
>3926a8	05 b2 35 00
>3926ac	00 06 03 f4 44 00 01 01		MIDI_INSTRUMENT_GLOCK      .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>3926b4	1b f2 34 00
>3926b8	00 04 06 a9 24 0a 01 01		MIDI_INSTRUMENT_MUSICBOX   .text $00, $04, $06, $A9, $24, $0A, $01, $01, $01, $F5, $74, $00
>3926c0	01 f5 74 00
>3926c4	00 d4 00 f6 33 00 00 f1		MIDI_INSTRUMENT_VIBES      .text $00, $D4, $00, $F6, $33, $00, $00, $F1, $00, $61, $E3, $00
>3926cc	00 61 e3 00
>3926d0	00 d4 00 f7 e8 04 00 d1		MIDI_INSTRUMENT_MARIMBA    .text $00, $D4, $00, $F7, $E8, $04, $00, $D1, $00, $A4, $64, $00
>3926d8	00 a4 64 00
>3926dc	00 36 16 f7 f7 01 00 31		MIDI_INSTRUMENT_XYLO       .text $00, $36, $16, $F7, $F7, $01, $00, $31, $07, $B5, $F5, $00
>3926e4	07 b5 f5 00
>3926e8	00 03 1b a2 43 0b 00 00		MIDI_INSTRUMENT_TUBEBELL   .text $00, $03, $1B, $A2, $43, $0B, $00, $00, $00, $F3, $74, $00
>3926f0	00 f3 74 00
>3926f4	00 c3 8e f8 35 01 01 11		MIDI_INSTRUMENT_SANTUR     .text $00, $C3, $8E, $F8, $35, $01, $01, $11, $00, $C3, $94, $01
>3926fc	00 c3 94 01
>392700	00 e2 07 f4 1b 06 01 e0		MIDI_INSTRUMENT_ORGAN1     .text $00, $E2, $07, $F4, $1B, $06, $01, $E0, $00, $F4, $0D, $01
>392708	00 f4 0d 01
>39270c	00 f2 00 f6 2c 04 00 f0		MIDI_INSTRUMENT_ORGAN2     .text $00, $F2, $00, $F6, $2C, $04, $00, $F0, $00, $F5, $0B, $01
>392714	00 f5 0b 01
>392718	00 f1 06 b6 15 0a 00 f0		MIDI_INSTRUMENT_ORGAN3     .text $00, $F1, $06, $B6, $15, $0A, $00, $F0, $00, $BF, $07, $00
>392720	00 bf 07 00
>392724	00 22 03 79 16 08 01 e0		MIDI_INSTRUMENT_PIPEORG    .text $00, $22, $03, $79, $16, $08, $01, $E0, $00, $6D, $08, $01
>39272c	00 6d 08 01
>392730	00 31 27 63 06 01 00 72		MIDI_INSTRUMENT_REEDORG    .text $00, $31, $27, $63, $06, $01, $00, $72, $00, $51, $17, $01
>392738	00 51 17 01
>39273c	00 b4 1d 53 16 0f 01 71		MIDI_INSTRUMENT_ACORDIAN   .text $00, $B4, $1D, $53, $16, $0F, $01, $71, $00, $51, $17, $01
>392744	00 51 17 01
>392748	00 25 29 97 15 01 00 32		MIDI_INSTRUMENT_HARMONIC   .text $00, $25, $29, $97, $15, $01, $00, $32, $00, $53, $08, $01
>392750	00 53 08 01
>392754	00 24 9e 67 15 0f 00 31		MIDI_INSTRUMENT_BANDNEON   .text $00, $24, $9E, $67, $15, $0F, $00, $31, $00, $53, $06, $01
>39275c	00 53 06 01
>392760	00 13 27 a3 b4 05 01 31		MIDI_INSTRUMENT_NYLONGT    .text $00, $13, $27, $A3, $B4, $05, $01, $31, $00, $D2, $F8, $00
>392768	00 d2 f8 00
>39276c	00 17 a3 f3 32 01 00 11		MIDI_INSTRUMENT_STEELGT    .text $00, $17, $A3, $F3, $32, $01, $00, $11, $00, $E2, $C7, $01
>392774	00 e2 c7 01
>392778	00 33 24 d2 c1 0f 01 31		MIDI_INSTRUMENT_JAZZGT     .text $00, $33, $24, $D2, $C1, $0F, $01, $31, $00, $F1, $9C, $00
>392780	00 f1 9c 00
>392784	00 31 05 f8 44 01 00 32		MIDI_INSTRUMENT_CLEANGT    .text $00, $31, $05, $F8, $44, $01, $00, $32, $02, $F2, $C9, $01
>39278c	02 f2 c9 01
>392790	00 21 09 9c 7b 07 00 02		MIDI_INSTRUMENT_MUTEGT     .text $00, $21, $09, $9C, $7B, $07, $00, $02, $03, $95, $FB, $00
>392798	03 95 fb 00
>39279c	00 21 84 81 98 07 01 21		MIDI_INSTRUMENT_OVERDGT    .text $00, $21, $84, $81, $98, $07, $01, $21, $04, $A1, $59, $00
>3927a4	04 a1 59 00
>3927a8	00 b1 0c 78 43 01 00 22		MIDI_INSTRUMENT_DISTGT     .text $00, $B1, $0C, $78, $43, $01, $00, $22, $03, $91, $FC, $03
>3927b0	03 91 fc 03
>3927b4	00 00 0a 82 8c 09 00 08		MIDI_INSTRUMENT_GTHARMS    .text $00, $00, $0A, $82, $8C, $09, $00, $08, $02, $B4, $EC, $00
>3927bc	02 b4 ec 00
>3927c0	00 21 13 ab 46 01 00 21		MIDI_INSTRUMENT_ACOUBASS   .text $00, $21, $13, $AB, $46, $01, $00, $21, $00, $93, $F7, $00
>3927c8	00 93 f7 00
>3927cc	00 01 0a f9 32 01 00 22		MIDI_INSTRUMENT_FINGBASS   .text $00, $01, $0A, $F9, $32, $01, $00, $22, $04, $C1, $58, $00
>3927d4	04 c1 58 00
>3927d8	00 21 07 fa 77 0b 00 22		MIDI_INSTRUMENT_PICKBASS   .text $00, $21, $07, $FA, $77, $0B, $00, $22, $02, $C3, $6A, $00
>3927e0	02 c3 6a 00
>3927e4	00 21 17 71 57 0b 00 21		MIDI_INSTRUMENT_FRETLESS   .text $00, $21, $17, $71, $57, $0B, $00, $21, $00, $62, $87, $00
>3927ec	00 62 87 00
>3927f0	00 25 01 fa 78 07 01 12		MIDI_INSTRUMENT_SLAPBAS1   .text $00, $25, $01, $FA, $78, $07, $01, $12, $00, $F3, $97, $00
>3927f8	00 f3 97 00
>3927fc	00 21 03 fa 88 0d 00 13		MIDI_INSTRUMENT_SLAPBAS2   .text $00, $21, $03, $FA, $88, $0D, $00, $13, $00, $B3, $97, $00
>392804	00 b3 97 00
>392808	00 21 09 f5 7f 09 01 23		MIDI_INSTRUMENT_SYNBASS1   .text $00, $21, $09, $F5, $7F, $09, $01, $23, $04, $F3, $CC, $00
>392810	04 f3 cc 00
>392814	00 01 10 a3 9b 09 00 01		MIDI_INSTRUMENT_SYNBASS2   .text $00, $01, $10, $A3, $9B, $09, $00, $01, $00, $93, $AA, $00
>39281c	00 93 aa 00
>392820	00 e2 19 f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLIN     .text $00, $E2, $19, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>392828	00 78 08 01
>39282c	00 e2 1c f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLA      .text $00, $E2, $1C, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>392834	00 78 08 01
>392838	00 61 19 69 16 0b 01 61		MIDI_INSTRUMENT_CELLO      .text $00, $61, $19, $69, $16, $0B, $01, $61, $00, $54, $27, $01
>392840	00 54 27 01
>392844	00 71 18 82 31 0d 01 32		MIDI_INSTRUMENT_CONTRAB    .text $00, $71, $18, $82, $31, $0D, $01, $32, $00, $61, $56, $00
>39284c	00 61 56 00
>392850	00 e2 23 70 06 0d 01 e1		MIDI_INSTRUMENT_TREMSTR    .text $00, $E2, $23, $70, $06, $0D, $01, $E1, $00, $75, $16, $01
>392858	00 75 16 01
>39285c	00 02 00 88 e6 08 00 61		MIDI_INSTRUMENT_PIZZ       .text $00, $02, $00, $88, $E6, $08, $00, $61, $00, $F5, $F6, $01
>392864	00 f5 f6 01
>392868	00 12 20 f6 d5 0f 01 11		MIDI_INSTRUMENT_HARP       .text $00, $12, $20, $F6, $D5, $0F, $01, $11, $80, $F3, $E3, $00
>392870	80 f3 e3 00
>392874	00 61 0e f4 f4 01 01 00		MIDI_INSTRUMENT_TIMPANI    .text $00, $61, $0E, $F4, $F4, $01, $01, $00, $00, $B5, $F5, $00
>39287c	00 b5 f5 00
>392880	00 61 1e 9c 04 0f 01 21		MIDI_INSTRUMENT_STRINGS    .text $00, $61, $1E, $9C, $04, $0F, $01, $21, $80, $71, $16, $00
>392888	80 71 16 00
>39288c	00 a2 2a c0 d6 0f 02 21		MIDI_INSTRUMENT_SLOWSTR    .text $00, $A2, $2A, $C0, $D6, $0F, $02, $21, $00, $30, $55, $01
>392894	00 30 55 01
>392898	00 61 21 72 35 0f 01 61		MIDI_INSTRUMENT_SYNSTR1    .text $00, $61, $21, $72, $35, $0F, $01, $61, $00, $62, $36, $01
>3928a0	00 62 36 01
>3928a4	00 21 1a 72 23 0f 01 21		MIDI_INSTRUMENT_SYNSTR2    .text $00, $21, $1A, $72, $23, $0F, $01, $21, $02, $51, $07, $00
>3928ac	02 51 07 00
>3928b0	00 e1 16 97 31 09 00 61		MIDI_INSTRUMENT_CHOIR      .text $00, $E1, $16, $97, $31, $09, $00, $61, $00, $62, $39, $00
>3928b8	00 62 39 00
>3928bc	00 22 c3 79 45 01 00 21		MIDI_INSTRUMENT_OOHS       .text $00, $22, $C3, $79, $45, $01, $00, $21, $00, $66, $27, $00
>3928c4	00 66 27 00
>3928c8	00 21 de 63 55 01 01 21		MIDI_INSTRUMENT_SYNVOX     .text $00, $21, $DE, $63, $55, $01, $01, $21, $00, $73, $46, $00
>3928d0	00 73 46 00
>3928d4	00 42 05 86 f7 0a 00 50		MIDI_INSTRUMENT_ORCHIT     .text $00, $42, $05, $86, $F7, $0A, $00, $50, $00, $74, $76, $01
>3928dc	00 74 76 01
>3928e0	00 31 1c 61 02 0f 00 61		MIDI_INSTRUMENT_TRUMPET    .text $00, $31, $1C, $61, $02, $0F, $00, $61, $81, $92, $38, $00
>3928e8	81 92 38 00
>3928ec	00 71 1e 52 23 0f 00 61		MIDI_INSTRUMENT_TROMBONE   .text $00, $71, $1E, $52, $23, $0F, $00, $61, $02, $71, $19, $00
>3928f4	02 71 19 00
>3928f8	00 21 1a 76 16 0f 00 21		MIDI_INSTRUMENT_TUBA       .text $00, $21, $1A, $76, $16, $0F, $00, $21, $01, $81, $09, $00
>392900	01 81 09 00
>392904	00 25 28 89 2c 07 02 20		MIDI_INSTRUMENT_MUTETRP    .text $00, $25, $28, $89, $2C, $07, $02, $20, $00, $83, $4B, $02
>39290c	00 83 4b 02
>392910	00 21 1f 79 16 09 00 a2		MIDI_INSTRUMENT_FRHORN     .text $00, $21, $1F, $79, $16, $09, $00, $A2, $05, $71, $59, $00
>392918	05 71 59 00
>39291c	00 21 19 87 16 0f 00 21		MIDI_INSTRUMENT_BRASS1     .text $00, $21, $19, $87, $16, $0F, $00, $21, $03, $82, $39, $00
>392924	03 82 39 00
>392928	00 21 17 75 35 0f 00 22		MIDI_INSTRUMENT_SYNBRAS1   .text $00, $21, $17, $75, $35, $0F, $00, $22, $82, $84, $17, $00
>392930	82 84 17 00
>392934	00 21 22 62 58 0f 00 21		MIDI_INSTRUMENT_SYNBRAS2   .text $00, $21, $22, $62, $58, $0F, $00, $21, $02, $72, $16, $00
>39293c	02 72 16 00
>392940	00 b1 1b 59 07 01 01 a1		MIDI_INSTRUMENT_SOPSAX     .text $00, $B1, $1B, $59, $07, $01, $01, $A1, $00, $7B, $0A, $00
>392948	00 7b 0a 00
>39294c	00 21 16 9f 04 0b 00 21		MIDI_INSTRUMENT_ALTOSAX    .text $00, $21, $16, $9F, $04, $0B, $00, $21, $00, $85, $0C, $01
>392954	00 85 0c 01
>392958	00 21 0f a8 20 0d 00 23		MIDI_INSTRUMENT_TENSAX     .text $00, $21, $0F, $A8, $20, $0D, $00, $23, $00, $7B, $0A, $01
>392960	00 7b 0a 01
>392964	00 21 0f 88 04 09 00 26		MIDI_INSTRUMENT_BARISAX    .text $00, $21, $0F, $88, $04, $09, $00, $26, $00, $79, $18, $01
>39296c	00 79 18 01
>392970	00 31 18 8f 05 01 00 32		MIDI_INSTRUMENT_OBOE       .text $00, $31, $18, $8F, $05, $01, $00, $32, $01, $73, $08, $00
>392978	01 73 08 00
>39297c	00 a1 0a 8c 37 01 01 24		MIDI_INSTRUMENT_ENGLHORN   .text $00, $A1, $0A, $8C, $37, $01, $01, $24, $04, $77, $0A, $00
>392984	04 77 0a 00
>392988	00 31 04 a8 67 0b 00 75		MIDI_INSTRUMENT_BASSOON    .text $00, $31, $04, $A8, $67, $0B, $00, $75, $00, $51, $19, $00
>392990	00 51 19 00
>392994	00 a2 1f 77 26 01 01 21		MIDI_INSTRUMENT_CLARINET   .text $00, $A2, $1F, $77, $26, $01, $01, $21, $01, $74, $09, $00
>39299c	01 74 09 00
>3929a0	00 e1 07 b8 94 01 01 21		MIDI_INSTRUMENT_PICCOLO    .text $00, $E1, $07, $B8, $94, $01, $01, $21, $01, $63, $28, $00
>3929a8	01 63 28 00
>3929ac	00 a1 93 87 59 01 00 e1		MIDI_INSTRUMENT_FLUTE1     .text $00, $A1, $93, $87, $59, $01, $00, $E1, $00, $65, $0A, $00
>3929b4	00 65 0a 00
>3929b8	00 22 10 9f 38 01 00 61		MIDI_INSTRUMENT_RECORDER   .text $00, $22, $10, $9F, $38, $01, $00, $61, $00, $67, $29, $00
>3929c0	00 67 29 00
>3929c4	00 e2 0d 88 9a 01 01 21		MIDI_INSTRUMENT_PANFLUTE   .text $00, $E2, $0D, $88, $9A, $01, $01, $21, $00, $67, $09, $00
>3929cc	00 67 09 00
>3929d0	00 a2 10 98 94 0f 00 21		MIDI_INSTRUMENT_BOTTLEB    .text $00, $A2, $10, $98, $94, $0F, $00, $21, $01, $6A, $28, $00
>3929d8	01 6a 28 00
>3929dc	00 f1 1c 86 26 0f 00 f1		MIDI_INSTRUMENT_SHAKU      .text $00, $F1, $1C, $86, $26, $0F, $00, $F1, $00, $55, $27, $00
>3929e4	00 55 27 00
>3929e8	00 e1 3f 9f 09 00 00 e1		MIDI_INSTRUMENT_WHISTLE    .text $00, $E1, $3F, $9F, $09, $00, $00, $E1, $00, $6F, $08, $00
>3929f0	00 6f 08 00
>3929f4	00 e2 3b f7 19 01 00 21		MIDI_INSTRUMENT_OCARINA    .text $00, $E2, $3B, $F7, $19, $01, $00, $21, $00, $7A, $07, $00
>3929fc	00 7a 07 00
>392a00	00 22 1e 92 0c 0f 00 61		MIDI_INSTRUMENT_SQUARWAV   .text $00, $22, $1E, $92, $0C, $0F, $00, $61, $06, $A2, $0D, $00
>392a08	06 a2 0d 00
>392a0c	00 21 15 f4 22 0f 01 21		MIDI_INSTRUMENT_SAWWAV     .text $00, $21, $15, $F4, $22, $0F, $01, $21, $00, $A3, $5F, $00
>392a14	00 a3 5f 00
>392a18	00 f2 20 47 66 03 01 f1		MIDI_INSTRUMENT_SYNCALLI   .text $00, $F2, $20, $47, $66, $03, $01, $F1, $00, $42, $27, $00
>392a20	00 42 27 00
>392a24	00 61 19 88 28 0f 00 61		MIDI_INSTRUMENT_CHIFLEAD   .text $00, $61, $19, $88, $28, $0F, $00, $61, $05, $B2, $49, $00
>392a2c	05 b2 49 00
>392a30	00 21 16 82 1b 01 00 23		MIDI_INSTRUMENT_CHARANG    .text $00, $21, $16, $82, $1B, $01, $00, $23, $00, $B2, $79, $01
>392a38	00 b2 79 01
>392a3c	00 21 00 ca 93 01 00 22		MIDI_INSTRUMENT_SOLOVOX    .text $00, $21, $00, $CA, $93, $01, $00, $22, $00, $7A, $1A, $00
>392a44	00 7a 1a 00
>392a48	00 23 00 92 c9 08 01 22		MIDI_INSTRUMENT_FIFTHSAW   .text $00, $23, $00, $92, $C9, $08, $01, $22, $00, $82, $28, $01
>392a50	00 82 28 01
>392a54	00 21 1d f3 7b 0f 00 22		MIDI_INSTRUMENT_BASSLEAD   .text $00, $21, $1D, $F3, $7B, $0F, $00, $22, $02, $C3, $5F, $00
>392a5c	02 c3 5f 00
>392a60	00 e1 00 81 25 00 01 a6		MIDI_INSTRUMENT_FANTASIA   .text $00, $E1, $00, $81, $25, $00, $01, $A6, $86, $C4, $95, $01
>392a68	86 c4 95 01
>392a6c	00 21 27 31 01 0f 00 21		MIDI_INSTRUMENT_WARMPAD    .text $00, $21, $27, $31, $01, $0F, $00, $21, $00, $44, $15, $00
>392a74	00 44 15 00
>392a78	00 60 14 83 35 0d 02 61		MIDI_INSTRUMENT_POLYSYN    .text $00, $60, $14, $83, $35, $0D, $02, $61, $00, $D1, $06, $00
>392a80	00 d1 06 00
>392a84	00 e1 5c d3 01 01 01 62		MIDI_INSTRUMENT_SPACEVOX   .text $00, $E1, $5C, $D3, $01, $01, $01, $62, $00, $82, $37, $00
>392a8c	00 82 37 00
>392a90	00 28 38 34 86 01 02 21		MIDI_INSTRUMENT_BOWEDGLS   .text $00, $28, $38, $34, $86, $01, $02, $21, $00, $41, $35, $00
>392a98	00 41 35 00
>392a9c	00 24 12 52 f3 05 01 23		MIDI_INSTRUMENT_METALPAD   .text $00, $24, $12, $52, $F3, $05, $01, $23, $02, $32, $F5, $01
>392aa4	02 32 f5 01
>392aa8	00 61 1d 62 a6 0b 00 a1		MIDI_INSTRUMENT_HALOPAD    .text $00, $61, $1D, $62, $A6, $0B, $00, $A1, $00, $61, $26, $00
>392ab0	00 61 26 00
>392ab4	00 22 0f 22 d5 0b 01 21		MIDI_INSTRUMENT_SWEEPPAD   .text $00, $22, $0F, $22, $D5, $0B, $01, $21, $84, $3F, $05, $01
>392abc	84 3f 05 01
>392ac0	00 e3 1f f9 24 01 00 31		MIDI_INSTRUMENT_ICERAIN    .text $00, $E3, $1F, $F9, $24, $01, $00, $31, $01, $D1, $F6, $00
>392ac8	01 d1 f6 00
>392acc	00 63 00 41 55 06 01 a2		MIDI_INSTRUMENT_SOUNDTRK   .text $00, $63, $00, $41, $55, $06, $01, $A2, $00, $41, $05, $01
>392ad4	00 41 05 01
>392ad8	00 c7 25 a7 65 01 01 c1		MIDI_INSTRUMENT_CRYSTAL    .text $00, $C7, $25, $A7, $65, $01, $01, $C1, $05, $F3, $E4, $00
>392ae0	05 f3 e4 00
>392ae4	00 e3 19 f7 b7 01 01 61		MIDI_INSTRUMENT_ATMOSPH    .text $00, $E3, $19, $F7, $B7, $01, $01, $61, $00, $92, $F5, $01
>392aec	00 92 f5 01
>392af0	00 66 9b a8 44 0f 00 41		MIDI_INSTRUMENT_BRIGHT     .text $00, $66, $9B, $A8, $44, $0F, $00, $41, $04, $F2, $E4, $01
>392af8	04 f2 e4 01
>392afc	00 61 20 22 75 0d 00 61		MIDI_INSTRUMENT_GOBLIN     .text $00, $61, $20, $22, $75, $0D, $00, $61, $00, $45, $25, $00
>392b04	00 45 25 00
>392b08	00 e1 21 f6 84 0f 00 e1		MIDI_INSTRUMENT_ECHODROP   .text $00, $E1, $21, $F6, $84, $0F, $00, $E1, $01, $A3, $36, $00
>392b10	01 a3 36 00
>392b14	00 e2 14 73 64 0b 01 e1		MIDI_INSTRUMENT_STARTHEM   .text $00, $E2, $14, $73, $64, $0B, $01, $E1, $01, $98, $05, $01
>392b1c	01 98 05 01
>392b20	00 21 0b 72 34 09 00 24		MIDI_INSTRUMENT_SITAR      .text $00, $21, $0B, $72, $34, $09, $00, $24, $02, $A3, $F6, $01
>392b28	02 a3 f6 01
>392b2c	00 21 16 f4 53 0d 00 04		MIDI_INSTRUMENT_BANJO      .text $00, $21, $16, $F4, $53, $0D, $00, $04, $00, $F6, $F8, $00
>392b34	00 f6 f8 00
>392b38	00 21 18 da 02 0d 00 35		MIDI_INSTRUMENT_SHAMISEN   .text $00, $21, $18, $DA, $02, $0D, $00, $35, $00, $F3, $F5, $00
>392b40	00 f3 f5 00
>392b44	00 25 0f fa 63 09 00 02		MIDI_INSTRUMENT_KOTO       .text $00, $25, $0F, $FA, $63, $09, $00, $02, $00, $94, $E5, $01
>392b4c	00 94 e5 01
>392b50	00 32 07 f9 96 01 00 11		MIDI_INSTRUMENT_KALIMBA    .text $00, $32, $07, $F9, $96, $01, $00, $11, $00, $84, $44, $00
>392b58	00 84 44 00
>392b5c	00 20 0e 97 18 09 02 25		MIDI_INSTRUMENT_BAGPIPE    .text $00, $20, $0E, $97, $18, $09, $02, $25, $03, $83, $18, $01
>392b64	03 83 18 01
>392b68	00 61 18 f6 29 01 00 62		MIDI_INSTRUMENT_FIDDLE     .text $00, $61, $18, $F6, $29, $01, $00, $62, $01, $78, $08, $01
>392b70	01 78 08 01
>392b74	00 e6 21 76 19 0b 00 61		MIDI_INSTRUMENT_SHANNAI    .text $00, $E6, $21, $76, $19, $0B, $00, $61, $03, $8E, $08, $01
>392b7c	03 8e 08 01
>392b80	00 27 23 f0 d4 01 00 05		MIDI_INSTRUMENT_TINKLBEL   .text $00, $27, $23, $F0, $D4, $01, $00, $05, $09, $F2, $46, $00
>392b88	09 f2 46 00
>392b8c	00 1c 0c f9 31 0f 01 15		MIDI_INSTRUMENT_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>392b94	00 96 e8 01
>392b98	00 02 00 75 16 06 02 01		MIDI_INSTRUMENT_STEELDRM   .text $00, $02, $00, $75, $16, $06, $02, $01, $00, $F6, $F6, $01
>392ba0	00 f6 f6 01
>392ba4	00 25 1b fa f2 01 00 12		MIDI_INSTRUMENT_WOODBLOK   .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>392bac	00 f6 9a 00
>392bb0	00 02 1d f5 93 01 00 00		MIDI_INSTRUMENT_TAIKO      .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>392bb8	00 c6 45 00
>392bbc	00 11 15 f5 32 05 00 10		MIDI_INSTRUMENT_MELOTOM    .text $00, $11, $15, $F5, $32, $05, $00, $10, $00, $F4, $B4, $00
>392bc4	00 f4 b4 00
>392bc8	00 22 06 fa 99 09 00 01		MIDI_INSTRUMENT_SYNDRUM    .text $00, $22, $06, $FA, $99, $09, $00, $01, $00, $D5, $25, $00
>392bd0	00 d5 25 00
>392bd4	00 2e 00 ff 00 0f 02 0e		MIDI_INSTRUMENT_REVRSCYM   .text $00, $2E, $00, $FF, $00, $0F, $02, $0E, $0E, $21, $2D, $00
>392bdc	0e 21 2d 00
>392be0	00 30 0b 56 e4 01 01 17		MIDI_INSTRUMENT_FRETNOIS   .text $00, $30, $0B, $56, $E4, $01, $01, $17, $00, $55, $87, $02
>392be8	00 55 87 02
>392bec	00 24 00 ff 03 0d 00 05		MIDI_INSTRUMENT_BRTHNOIS   .text $00, $24, $00, $FF, $03, $0D, $00, $05, $08, $98, $87, $01
>392bf4	08 98 87 01
>392bf8	00 0e 00 f0 00 0f 02 0a		MIDI_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F0, $00, $0F, $02, $0A, $04, $17, $04, $03
>392c00	04 17 04 03
>392c04	00 20 08 f6 f7 01 00 0e		MIDI_INSTRUMENT_BIRDS      .text $00, $20, $08, $F6, $F7, $01, $00, $0E, $05, $77, $F9, $02
>392c0c	05 77 f9 02
>392c10	00 20 14 f1 08 01 00 2e		MIDI_INSTRUMENT_TELEPHON   .text $00, $20, $14, $F1, $08, $01, $00, $2E, $02, $F4, $08, $00
>392c18	02 f4 08 00
>392c1c	00 20 04 f2 00 03 01 23		MIDI_INSTRUMENT_HELICOPT   .text $00, $20, $04, $F2, $00, $03, $01, $23, $00, $36, $05, $01
>392c24	00 36 05 01
>392c28	00 2e 00 ff 02 0f 00 2a		MIDI_INSTRUMENT_APPLAUSE   .text $00, $2E, $00, $FF, $02, $0F, $00, $2A, $05, $32, $55, $03
>392c30	05 32 55 03
>392c34	00 20 00 a1 ef 0f 00 10		MIDI_INSTRUMENT_GUNSHOT    .text $00, $20, $00, $A1, $EF, $0F, $00, $10, $00, $F3, $DF, $00
>392c3c	00 f3 df 00
>392c40	40 26 39 00 4c 26 39 00		midiInstruments .dword MIDI_INSTRUMENT_PIANO1,   MIDI_INSTRUMENT_PIANO2,   MIDI_INSTRUMENT_PIANO3,   MIDI_INSTRUMENT_HONKTONK, MIDI_INSTRUMENT_EP1,      MIDI_INSTRUMENT_EP2
>392c48	58 26 39 00 64 26 39 00 70 26 39 00 7c 26 39 00
>392c58	88 26 39 00 94 26 39 00		              	.dword MIDI_INSTRUMENT_HARPSIC,  MIDI_INSTRUMENT_CLAVIC,   MIDI_INSTRUMENT_CELESTA,  MIDI_INSTRUMENT_GLOCK,    MIDI_INSTRUMENT_MUSICBOX, MIDI_INSTRUMENT_VIBES
>392c60	a0 26 39 00 ac 26 39 00 b8 26 39 00 c4 26 39 00
>392c70	d0 26 39 00 dc 26 39 00		              	.dword MIDI_INSTRUMENT_MARIMBA,  MIDI_INSTRUMENT_XYLO,     MIDI_INSTRUMENT_TUBEBELL, MIDI_INSTRUMENT_SANTUR,   MIDI_INSTRUMENT_ORGAN1,   MIDI_INSTRUMENT_ORGAN2
>392c78	e8 26 39 00 f4 26 39 00 00 27 39 00 0c 27 39 00
>392c88	18 27 39 00 24 27 39 00		              	.dword MIDI_INSTRUMENT_ORGAN3,   MIDI_INSTRUMENT_PIPEORG,  MIDI_INSTRUMENT_REEDORG,  MIDI_INSTRUMENT_ACORDIAN, MIDI_INSTRUMENT_HARMONIC, MIDI_INSTRUMENT_BANDNEON
>392c90	30 27 39 00 3c 27 39 00 48 27 39 00 54 27 39 00
>392ca0	60 27 39 00 6c 27 39 00		              	.dword MIDI_INSTRUMENT_NYLONGT,  MIDI_INSTRUMENT_STEELGT,  MIDI_INSTRUMENT_JAZZGT,   MIDI_INSTRUMENT_CLEANGT,  MIDI_INSTRUMENT_MUTEGT,   MIDI_INSTRUMENT_OVERDGT
>392ca8	78 27 39 00 84 27 39 00 90 27 39 00 9c 27 39 00
>392cb8	a8 27 39 00 b4 27 39 00		              	.dword MIDI_INSTRUMENT_DISTGT,   MIDI_INSTRUMENT_GTHARMS,  MIDI_INSTRUMENT_ACOUBASS, MIDI_INSTRUMENT_FINGBASS, MIDI_INSTRUMENT_PICKBASS, MIDI_INSTRUMENT_FRETLESS
>392cc0	c0 27 39 00 cc 27 39 00 d8 27 39 00 e4 27 39 00
>392cd0	f0 27 39 00 fc 27 39 00		              	.dword MIDI_INSTRUMENT_SLAPBAS1, MIDI_INSTRUMENT_SLAPBAS2, MIDI_INSTRUMENT_SYNBASS1, MIDI_INSTRUMENT_SYNBASS2, MIDI_INSTRUMENT_VIOLIN,   MIDI_INSTRUMENT_VIOLA
>392cd8	08 28 39 00 14 28 39 00 20 28 39 00 2c 28 39 00
>392ce8	38 28 39 00 44 28 39 00		              	.dword MIDI_INSTRUMENT_CELLO,    MIDI_INSTRUMENT_CONTRAB,  MIDI_INSTRUMENT_TREMSTR,  MIDI_INSTRUMENT_PIZZ,     MIDI_INSTRUMENT_HARP,     MIDI_INSTRUMENT_TIMPANI
>392cf0	50 28 39 00 5c 28 39 00 68 28 39 00 74 28 39 00
>392d00	80 28 39 00 8c 28 39 00		              	.dword MIDI_INSTRUMENT_STRINGS,  MIDI_INSTRUMENT_SLOWSTR,  MIDI_INSTRUMENT_SYNSTR1,  MIDI_INSTRUMENT_SYNSTR2,  MIDI_INSTRUMENT_CHOIR,    MIDI_INSTRUMENT_OOHS
>392d08	98 28 39 00 a4 28 39 00 b0 28 39 00 bc 28 39 00
>392d18	c8 28 39 00 d4 28 39 00		              	.dword MIDI_INSTRUMENT_SYNVOX,   MIDI_INSTRUMENT_ORCHIT,   MIDI_INSTRUMENT_TRUMPET,  MIDI_INSTRUMENT_TROMBONE, MIDI_INSTRUMENT_TUBA,     MIDI_INSTRUMENT_MUTETRP
>392d20	e0 28 39 00 ec 28 39 00 f8 28 39 00 04 29 39 00
>392d30	10 29 39 00 1c 29 39 00		              	.dword MIDI_INSTRUMENT_FRHORN,   MIDI_INSTRUMENT_BRASS1,   MIDI_INSTRUMENT_SYNBRAS1, MIDI_INSTRUMENT_SYNBRAS2, MIDI_INSTRUMENT_SOPSAX,   MIDI_INSTRUMENT_ALTOSAX
>392d38	28 29 39 00 34 29 39 00 40 29 39 00 4c 29 39 00
>392d48	58 29 39 00 64 29 39 00		              	.dword MIDI_INSTRUMENT_TENSAX,   MIDI_INSTRUMENT_BARISAX,  MIDI_INSTRUMENT_OBOE,     MIDI_INSTRUMENT_ENGLHORN, MIDI_INSTRUMENT_BASSOON,  MIDI_INSTRUMENT_CLARINET
>392d50	70 29 39 00 7c 29 39 00 88 29 39 00 94 29 39 00
>392d60	a0 29 39 00 ac 29 39 00		              	.dword MIDI_INSTRUMENT_PICCOLO,  MIDI_INSTRUMENT_FLUTE1,   MIDI_INSTRUMENT_RECORDER, MIDI_INSTRUMENT_PANFLUTE, MIDI_INSTRUMENT_BOTTLEB,  MIDI_INSTRUMENT_SHAKU
>392d68	b8 29 39 00 c4 29 39 00 d0 29 39 00 dc 29 39 00
>392d78	e8 29 39 00 f4 29 39 00		              	.dword MIDI_INSTRUMENT_WHISTLE,  MIDI_INSTRUMENT_OCARINA,  MIDI_INSTRUMENT_SQUARWAV, MIDI_INSTRUMENT_SAWWAV,   MIDI_INSTRUMENT_SYNCALLI, MIDI_INSTRUMENT_CHIFLEAD
>392d80	00 2a 39 00 0c 2a 39 00 18 2a 39 00 24 2a 39 00
>392d90	30 2a 39 00 3c 2a 39 00		              	.dword MIDI_INSTRUMENT_CHARANG,  MIDI_INSTRUMENT_SOLOVOX,  MIDI_INSTRUMENT_FIFTHSAW, MIDI_INSTRUMENT_BASSLEAD, MIDI_INSTRUMENT_FANTASIA, MIDI_INSTRUMENT_WARMPAD
>392d98	48 2a 39 00 54 2a 39 00 60 2a 39 00 6c 2a 39 00
>392da8	78 2a 39 00 84 2a 39 00		              	.dword MIDI_INSTRUMENT_POLYSYN,  MIDI_INSTRUMENT_SPACEVOX, MIDI_INSTRUMENT_BOWEDGLS, MIDI_INSTRUMENT_METALPAD, MIDI_INSTRUMENT_HALOPAD,  MIDI_INSTRUMENT_SWEEPPAD
>392db0	90 2a 39 00 9c 2a 39 00 a8 2a 39 00 b4 2a 39 00
>392dc0	c0 2a 39 00 cc 2a 39 00		              	.dword MIDI_INSTRUMENT_ICERAIN,  MIDI_INSTRUMENT_SOUNDTRK, MIDI_INSTRUMENT_CRYSTAL,  MIDI_INSTRUMENT_ATMOSPH,  MIDI_INSTRUMENT_BRIGHT,   MIDI_INSTRUMENT_GOBLIN
>392dc8	d8 2a 39 00 e4 2a 39 00 f0 2a 39 00 fc 2a 39 00
>392dd8	08 2b 39 00 14 2b 39 00		              	.dword MIDI_INSTRUMENT_ECHODROP, MIDI_INSTRUMENT_STARTHEM, MIDI_INSTRUMENT_SITAR,    MIDI_INSTRUMENT_BANJO,    MIDI_INSTRUMENT_SHAMISEN, MIDI_INSTRUMENT_KOTO
>392de0	20 2b 39 00 2c 2b 39 00 38 2b 39 00 44 2b 39 00
>392df0	50 2b 39 00 5c 2b 39 00		              	.dword MIDI_INSTRUMENT_KALIMBA,  MIDI_INSTRUMENT_BAGPIPE,  MIDI_INSTRUMENT_FIDDLE,   MIDI_INSTRUMENT_SHANNAI,  MIDI_INSTRUMENT_TINKLBEL, MIDI_INSTRUMENT_AGOGO
>392df8	68 2b 39 00 74 2b 39 00 80 2b 39 00 8c 2b 39 00
>392e08	98 2b 39 00 a4 2b 39 00		              	.dword MIDI_INSTRUMENT_STEELDRM, MIDI_INSTRUMENT_WOODBLOK, MIDI_INSTRUMENT_TAIKO,    MIDI_INSTRUMENT_MELOTOM,  MIDI_INSTRUMENT_SYNDRUM,  MIDI_INSTRUMENT_REVRSCYM
>392e10	b0 2b 39 00 bc 2b 39 00 c8 2b 39 00 d4 2b 39 00
>392e20	e0 2b 39 00 ec 2b 39 00		              	.dword MIDI_INSTRUMENT_FRETNOIS, MIDI_INSTRUMENT_BRTHNOIS, MIDI_INSTRUMENT_SEASHORE, MIDI_INSTRUMENT_BIRDS,    MIDI_INSTRUMENT_TELEPHON, MIDI_INSTRUMENT_HELICOPT
>392e28	f8 2b 39 00 04 2c 39 00 10 2c 39 00 1c 2c 39 00
>392e38	28 2c 39 00 34 2c 39 00		              	.dword MIDI_INSTRUMENT_APPLAUSE, MIDI_INSTRUMENT_GUNSHOT

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Instruments_Win31.asm

>392e40	00 01 8f f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO1     .text $00, $01, $8F, $F2, $F4, $38, $00, $01, $0D, $F2, $F7, $00
>392e48	0d f2 f7 00
>392e4c	00 01 4b f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO2     .text $00, $01, $4B, $F2, $F4, $38, $00, $01, $07, $F2, $F7, $00
>392e54	07 f2 f7 00
>392e58	00 01 49 f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO3     .text $00, $01, $49, $F2, $F4, $38, $00, $01, $07, $F2, $F6, $00
>392e60	07 f2 f6 00
>392e64	00 81 12 f2 f7 00 00 41		MIDIW31_INSTRUMENT_HONKTONK   .text $00, $81, $12, $F2, $F7, $00, $00, $41, $07, $F2, $F7, $00
>392e6c	07 f2 f7 00
>392e70	00 01 57 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP1        .text $00, $01, $57, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>392e78	07 f2 f7 00
>392e7c	00 01 93 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP2        .text $00, $01, $93, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>392e84	07 f2 f7 00
>392e88	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HARPSIC    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392e90	00 00 00 00
>392e94	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLAVIC     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392e9c	00 00 00 00
>392ea0	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELESTA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392ea8	00 00 00 00
>392eac	00 07 97 f3 f2 32 00 11		MIDIW31_INSTRUMENT_GLOCK      .text $00, $07, $97, $F3, $F2, $32, $00, $11, $87, $F2, $F1, $00
>392eb4	87 f2 f1 00
>392eb8	00 17 21 54 f4 32 00 01		MIDIW31_INSTRUMENT_MUSICBOX   .text $00, $17, $21, $54, $F4, $32, $00, $01, $07, $F4, $F4, $00
>392ec0	07 f4 f4 00
>392ec4	00 98 62 f3 f6 30 00 81		MIDIW31_INSTRUMENT_VIBES      .text $00, $98, $62, $F3, $F6, $30, $00, $81, $07, $F2, $F6, $00
>392ecc	07 f2 f6 00
>392ed0	00 18 23 f6 f6 00 00 01		MIDIW31_INSTRUMENT_MARIMBA    .text $00, $18, $23, $F6, $F6, $00, $00, $01, $07, $E7, $F7, $00
>392ed8	07 e7 f7 00
>392edc	00 15 91 f6 f6 00 00 01		MIDIW31_INSTRUMENT_XYLO       .text $00, $15, $91, $F6, $F6, $00, $00, $01, $07, $F6, $F6, $00
>392ee4	07 f6 f6 00
>392ee8	00 45 59 d3 f3 00 00 81		MIDIW31_INSTRUMENT_TUBEBELL   .text $00, $45, $59, $D3, $F3, $00, $00, $81, $87, $A3, $F3, $00
>392ef0	87 a3 f3 00
>392ef4	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SANTUR     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392efc	00 00 00 00
>392f00	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f08	00 00 00 00
>392f0c	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN2     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f14	00 00 00 00
>392f18	00 70 44 aa 18 34 00 b1		MIDIW31_INSTRUMENT_ORGAN3     .text $00, $70, $44, $AA, $18, $34, $00, $B1, $07, $8A, $08, $00
>392f20	07 8a 08 00
>392f24	00 23 93 97 23 34 01 b1		MIDIW31_INSTRUMENT_PIPEORG    .text $00, $23, $93, $97, $23, $34, $01, $B1, $07, $55, $14, $00
>392f2c	07 55 14 00
>392f30	00 61 13 97 04 30 01 b1		MIDIW31_INSTRUMENT_REEDORG    .text $00, $61, $13, $97, $04, $30, $01, $B1, $87, $55, $04, $00
>392f38	87 55 04 00
>392f3c	00 24 48 98 2a 30 01 b1		MIDIW31_INSTRUMENT_ACORDIAN   .text $00, $24, $48, $98, $2A, $30, $01, $B1, $07, $46, $1A, $00
>392f44	07 46 1a 00
>392f48	00 61 13 91 06 00 01 21		MIDIW31_INSTRUMENT_HARMONIC   .text $00, $61, $13, $91, $06, $00, $01, $21, $07, $61, $07, $00
>392f50	07 61 07 00
>392f54	00 21 13 71 06 00 00 a1		MIDIW31_INSTRUMENT_BANDNEON   .text $00, $21, $13, $71, $06, $00, $00, $A1, $90, $61, $07, $00
>392f5c	90 61 07 00
>392f60	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_NYLONGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f68	00 00 00 00
>392f6c	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f74	00 00 00 00
>392f78	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_JAZZGT     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f80	00 00 00 00
>392f84	00 03 87 f6 22 36 01 21		MIDIW31_INSTRUMENT_CLEANGT    .text $00, $03, $87, $F6, $22, $36, $01, $21, $87, $F3, $F8, $00
>392f8c	87 f3 f8 00
>392f90	00 03 47 f9 54 30 00 21		MIDIW31_INSTRUMENT_MUTEGT     .text $00, $03, $47, $F9, $54, $30, $00, $21, $07, $F6, $3A, $00
>392f98	07 f6 3a 00
>392f9c	00 23 4a 91 41 38 01 21		MIDIW31_INSTRUMENT_OVERDGT    .text $00, $23, $4A, $91, $41, $38, $01, $21, $0C, $84, $19, $00
>392fa4	0c 84 19 00
>392fa8	00 23 4a 95 19 32 01 21		MIDIW31_INSTRUMENT_DISTGT     .text $00, $23, $4A, $95, $19, $32, $01, $21, $07, $94, $19, $00
>392fb0	07 94 19 00
>392fb4	00 09 a1 20 4f 00 00 84		MIDIW31_INSTRUMENT_GTHARMS    .text $00, $09, $A1, $20, $4F, $00, $00, $84, $87, $D1, $F8, $00
>392fbc	87 d1 f8 00
>392fc0	00 21 1e 94 06 00 00 a2		MIDIW31_INSTRUMENT_ACOUBASS   .text $00, $21, $1E, $94, $06, $00, $00, $A2, $07, $C3, $A6, $00
>392fc8	07 c3 a6 00
>392fcc	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FINGBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392fd4	00 00 00 00
>392fd8	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_PICKBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392fe0	00 00 00 00
>392fe4	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRETLESS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392fec	00 00 00 00
>392ff0	00 01 8b a1 9a 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS1   .text $00, $01, $8B, $A1, $9A, $38, $00, $21, $47, $F2, $DF, $00
>392ff8	47 f2 df 00
>392ffc	00 21 8b a2 16 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS2   .text $00, $21, $8B, $A2, $16, $38, $00, $21, $0F, $A1, $DF, $00
>393004	0f a1 df 00
>393008	00 31 8b f4 e8 3a 00 31		MIDIW31_INSTRUMENT_SYNBASS1   .text $00, $31, $8B, $F4, $E8, $3A, $00, $31, $07, $F1, $78, $00
>393010	07 f1 78 00
>393014	00 31 12 f1 28 30 00 31		MIDIW31_INSTRUMENT_SYNBASS2   .text $00, $31, $12, $F1, $28, $30, $00, $31, $07, $F1, $18, $00
>39301c	07 f1 18 00
>393020	00 31 15 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLIN     .text $00, $31, $15, $DD, $13, $00, $01, $21, $07, $56, $26, $00
>393028	07 56 26 00
>39302c	00 31 16 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLA      .text $00, $31, $16, $DD, $13, $00, $01, $21, $07, $66, $06, $00
>393034	07 66 06 00
>393038	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELLO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393040	00 00 00 00
>393044	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CONTRAB    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39304c	00 00 00 00
>393050	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TREMSTR    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393058	00 00 00 00
>39305c	00 02 1a f5 75 30 01 01		MIDIW31_INSTRUMENT_PIZZ       .text $00, $02, $1A, $F5, $75, $30, $01, $01, $87, $85, $35, $00
>393064	87 85 35 00
>393068	00 02 1d f5 75 30 01 01		MIDIW31_INSTRUMENT_HARP       .text $00, $02, $1D, $F5, $75, $30, $01, $01, $87, $F3, $F4, $00
>393070	87 f3 f4 00
>393074	00 10 41 f5 05 32 01 11		MIDIW31_INSTRUMENT_TIMPANI    .text $00, $10, $41, $F5, $05, $32, $01, $11, $07, $F2, $C3, $00
>39307c	07 f2 c3 00
>393080	00 21 9b b1 25 3c 01 a2		MIDIW31_INSTRUMENT_STRINGS    .text $00, $21, $9B, $B1, $25, $3C, $01, $A2, $08, $72, $08, $00
>393088	08 72 08 00
>39308c	00 a1 98 7f 03 00 01 21		MIDIW31_INSTRUMENT_SLOWSTR    .text $00, $A1, $98, $7F, $03, $00, $01, $21, $07, $3F, $07, $01
>393094	07 3f 07 01
>393098	00 a1 93 c1 12 00 00 61		MIDIW31_INSTRUMENT_SYNSTR1    .text $00, $A1, $93, $C1, $12, $00, $00, $61, $07, $4F, $05, $00
>3930a0	07 4f 05 00
>3930a4	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNSTR2    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3930ac	00 00 00 00
>3930b0	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CHOIR      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3930b8	00 00 00 00
>3930bc	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OOHS       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3930c4	00 00 00 00
>3930c8	00 71 57 54 05 3c 00 72		MIDIW31_INSTRUMENT_SYNVOX     .text $00, $71, $57, $54, $05, $3C, $00, $72, $07, $7A, $05, $00
>3930d0	07 7a 05 00
>3930d4	00 90 00 54 63 38 00 41		MIDIW31_INSTRUMENT_ORCHIT     .text $00, $90, $00, $54, $63, $38, $00, $41, $07, $A5, $45, $00
>3930dc	07 a5 45 00
>3930e0	00 21 92 85 17 3c 00 21		MIDIW31_INSTRUMENT_TRUMPET    .text $00, $21, $92, $85, $17, $3C, $00, $21, $08, $8F, $09, $00
>3930e8	08 8f 09 00
>3930ec	00 21 94 75 17 32 00 21		MIDIW31_INSTRUMENT_TROMBONE   .text $00, $21, $94, $75, $17, $32, $00, $21, $0C, $8F, $09, $00
>3930f4	0c 8f 09 00
>3930f8	00 21 94 76 15 00 00 61		MIDIW31_INSTRUMENT_TUBA       .text $00, $21, $94, $76, $15, $00, $00, $61, $07, $82, $37, $00
>393100	07 82 37 00
>393104	00 31 43 9e 17 00 01 21		MIDIW31_INSTRUMENT_MUTETRP    .text $00, $31, $43, $9E, $17, $00, $01, $21, $07, $62, $2C, $01
>39310c	07 62 2c 01
>393110	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRHORN     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393118	00 00 00 00
>39311c	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BRASS1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393124	00 00 00 00
>393128	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNBRAS1   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393130	00 00 00 00
>393134	00 21 4d 54 3c 38 00 21		MIDIW31_INSTRUMENT_SYNBRAS2   .text $00, $21, $4D, $54, $3C, $38, $00, $21, $07, $A6, $1C, $00
>39313c	07 a6 1c 00
>393140	00 31 8f 93 02 38 01 61		MIDIW31_INSTRUMENT_SOPSAX     .text $00, $31, $8F, $93, $02, $38, $01, $61, $07, $72, $0B, $00
>393148	07 72 0b 00
>39314c	00 31 8e 93 03 38 01 61		MIDIW31_INSTRUMENT_ALTOSAX    .text $00, $31, $8E, $93, $03, $38, $01, $61, $07, $72, $09, $00
>393154	07 72 09 00
>393158	00 31 91 93 03 30 01 61		MIDIW31_INSTRUMENT_TENSAX     .text $00, $31, $91, $93, $03, $30, $01, $61, $07, $82, $09, $00
>393160	07 82 09 00
>393164	00 31 8e 93 0f 00 01 61		MIDIW31_INSTRUMENT_BARISAX    .text $00, $31, $8E, $93, $0F, $00, $01, $61, $07, $72, $0F, $00
>39316c	07 72 0f 00
>393170	00 21 4b aa 16 00 01 21		MIDIW31_INSTRUMENT_OBOE       .text $00, $21, $4B, $AA, $16, $00, $01, $21, $07, $8F, $0A, $00
>393178	07 8f 0a 00
>39317c	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ENGLHORN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393184	00 00 00 00
>393188	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSOON    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393190	00 00 00 00
>393194	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLARINET   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39319c	00 00 00 00
>3931a0	00 e1 1f 85 5f 30 00 e1		MIDIW31_INSTRUMENT_PICCOLO    .text $00, $E1, $1F, $85, $5F, $30, $00, $E1, $07, $65, $1A, $00
>3931a8	07 65 1a 00
>3931ac	00 e1 46 88 5f 30 00 e1		MIDIW31_INSTRUMENT_FLUTE1     .text $00, $E1, $46, $88, $5F, $30, $00, $E1, $07, $65, $1A, $00
>3931b4	07 65 1a 00
>3931b8	00 a1 9c 75 1f 32 00 21		MIDIW31_INSTRUMENT_RECORDER   .text $00, $A1, $9C, $75, $1F, $32, $00, $21, $07, $75, $0A, $00
>3931c0	07 75 0a 00
>3931c4	00 31 8b 84 58 30 00 21		MIDIW31_INSTRUMENT_PANFLUTE   .text $00, $31, $8B, $84, $58, $30, $00, $21, $07, $65, $1A, $00
>3931cc	07 65 1a 00
>3931d0	00 e1 4c 66 56 00 00 a1		MIDIW31_INSTRUMENT_BOTTLEB    .text $00, $E1, $4C, $66, $56, $00, $00, $A1, $07, $65, $26, $00
>3931d8	07 65 26 00
>3931dc	00 62 cb 76 46 00 00 a1		MIDIW31_INSTRUMENT_SHAKU      .text $00, $62, $CB, $76, $46, $00, $00, $A1, $07, $55, $36, $00
>3931e4	07 55 36 00
>3931e8	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WHISTLE    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3931f0	00 00 00 00
>3931f4	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OCARINA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3931fc	00 00 00 00
>393200	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SQUARWAV   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393208	00 00 00 00
>39320c	00 21 0e ff 0f 30 01 21		MIDIW31_INSTRUMENT_SAWWAV     .text $00, $21, $0E, $FF, $0F, $30, $01, $21, $07, $FF, $0F, $01
>393214	07 ff 0f 01
>393218	00 22 46 86 55 30 00 21		MIDIW31_INSTRUMENT_SYNCALLI   .text $00, $22, $46, $86, $55, $30, $00, $21, $87, $64, $18, $00
>393220	87 64 18 00
>393224	00 21 45 66 12 30 00 a1		MIDIW31_INSTRUMENT_CHIFLEAD   .text $00, $21, $45, $66, $12, $30, $00, $A1, $07, $96, $0A, $00
>39322c	07 96 0a 00
>393230	00 21 8b 92 2a 34 01 22		MIDIW31_INSTRUMENT_CHARANG    .text $00, $21, $8B, $92, $2A, $34, $01, $22, $07, $91, $2A, $00
>393238	07 91 2a 00
>39323c	00 a2 9e df 05 00 00 61		MIDIW31_INSTRUMENT_SOLOVOX    .text $00, $A2, $9E, $DF, $05, $00, $00, $61, $47, $6F, $07, $00
>393244	47 6f 07 00
>393248	00 20 1a ef 01 00 00 60		MIDIW31_INSTRUMENT_FIFTHSAW   .text $00, $20, $1A, $EF, $01, $00, $00, $60, $07, $8F, $06, $02
>393250	07 8f 06 02
>393254	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSLEAD   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39325c	00 00 00 00
>393260	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FANTASIA   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393268	00 00 00 00
>39326c	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WARMPAD    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393274	00 00 00 00
>393278	00 61 17 91 34 3c 00 61		MIDIW31_INSTRUMENT_POLYSYN    .text $00, $61, $17, $91, $34, $3C, $00, $61, $07, $55, $16, $00
>393280	07 55 16 00
>393284	00 71 5d 54 01 30 00 72		MIDIW31_INSTRUMENT_SPACEVOX   .text $00, $71, $5D, $54, $01, $30, $00, $72, $07, $6A, $03, $00
>39328c	07 6a 03 00
>393290	00 21 97 21 43 38 00 a2		MIDIW31_INSTRUMENT_BOWEDGLS   .text $00, $21, $97, $21, $43, $38, $00, $A2, $07, $42, $35, $00
>393298	07 42 35 00
>39329c	00 a1 1c a1 77 30 01 21		MIDIW31_INSTRUMENT_METALPAD   .text $00, $A1, $1C, $A1, $77, $30, $01, $21, $07, $31, $47, $01
>3932a4	07 31 47 01
>3932a8	00 21 89 11 33 00 00 61		MIDIW31_INSTRUMENT_HALOPAD    .text $00, $21, $89, $11, $33, $00, $00, $61, $0A, $42, $25, $00
>3932b0	0a 42 25 00
>3932b4	00 a1 15 11 47 00 01 21		MIDIW31_INSTRUMENT_SWEEPPAD   .text $00, $A1, $15, $11, $47, $00, $01, $21, $07, $CF, $07, $00
>3932bc	07 cf 07 00
>3932c0	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ICERAIN    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3932c8	00 00 00 00
>3932cc	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SOUNDTRK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3932d4	00 00 00 00
>3932d8	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CRYSTAL    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3932e0	00 00 00 00
>3932e4	00 22 92 b1 81 3c 00 61		MIDIW31_INSTRUMENT_ATMOSPH    .text $00, $22, $92, $B1, $81, $3C, $00, $61, $8A, $F2, $26, $00
>3932ec	8a f2 26 00
>3932f0	00 41 4d f1 51 30 01 42		MIDIW31_INSTRUMENT_BRIGHT     .text $00, $41, $4D, $F1, $51, $30, $01, $42, $07, $F2, $F5, $00
>3932f8	07 f2 f5 00
>3932fc	00 61 94 11 51 36 01 a3		MIDIW31_INSTRUMENT_GOBLIN     .text $00, $61, $94, $11, $51, $36, $01, $A3, $87, $11, $13, $00
>393304	87 11 13 00
>393308	00 61 8c 11 31 3a 00 a1		MIDIW31_INSTRUMENT_ECHODROP   .text $00, $61, $8C, $11, $31, $3A, $00, $A1, $87, $1D, $03, $00
>393310	87 1d 03 00
>393314	00 a4 4c f3 73 00 01 61		MIDIW31_INSTRUMENT_STARTHEM   .text $00, $A4, $4C, $F3, $73, $00, $01, $61, $07, $81, $23, $00
>39331c	07 81 23 00
>393320	00 02 85 d2 53 00 00 07		MIDIW31_INSTRUMENT_SITAR      .text $00, $02, $85, $D2, $53, $00, $00, $07, $0A, $F2, $F6, $01
>393328	0a f2 f6 01
>39332c	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BANJO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393334	00 00 00 00
>393338	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SHAMISEN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393340	00 00 00 00
>393344	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_KOTO       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39334c	00 00 00 00
>393350	00 04 4f fa 56 3c 00 01		MIDIW31_INSTRUMENT_KALIMBA    .text $00, $04, $4F, $FA, $56, $3C, $00, $01, $07, $C2, $05, $00
>393358	07 c2 05 00
>39335c	00 21 49 7c 20 36 00 22		MIDIW31_INSTRUMENT_BAGPIPE    .text $00, $21, $49, $7C, $20, $36, $00, $22, $07, $6F, $0C, $01
>393364	07 6f 0c 01
>393368	00 31 85 dd 33 3a 01 21		MIDIW31_INSTRUMENT_FIDDLE     .text $00, $31, $85, $DD, $33, $3A, $01, $21, $07, $56, $16, $00
>393370	07 56 16 00
>393374	00 20 04 da 05 30 02 21		MIDIW31_INSTRUMENT_SHANNAI    .text $00, $20, $04, $DA, $05, $30, $02, $21, $88, $8F, $0B, $00
>39337c	88 8f 0b 00
>393380	00 05 6a f1 e5 00 00 03		MIDIW31_INSTRUMENT_TINKLBEL   .text $00, $05, $6A, $F1, $E5, $00, $00, $03, $87, $C3, $E5, $00
>393388	87 c3 e5 00
>39338c	00 07 15 ec 26 00 00 02		MIDIW31_INSTRUMENT_AGOGO      .text $00, $07, $15, $EC, $26, $00, $00, $02, $07, $F8, $16, $00
>393394	07 f8 16 00
>393398	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELDRM   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3933a0	00 00 00 00
>3933a4	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WOODBLOK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3933ac	00 00 00 00
>3933b0	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TAIKO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3933b8	00 00 00 00
>3933bc	00 11 41 f8 47 34 02 10		MIDIW31_INSTRUMENT_MELOTOM    .text $00, $11, $41, $F8, $47, $34, $02, $10, $0A, $F3, $03, $00
>3933c4	0a f3 03 00
>3933c8	00 01 8e f1 06 3e 02 10		MIDIW31_INSTRUMENT_SYNDRUM    .text $00, $01, $8E, $F1, $06, $3E, $02, $10, $07, $F3, $02, $00
>3933d0	07 f3 02 00
>3933d4	00 0e 00 1f 00 3e 00 c0		MIDIW31_INSTRUMENT_REVRSCYM   .text $00, $0E, $00, $1F, $00, $3E, $00, $C0, $07, $1F, $FF, $03
>3933dc	07 1f ff 03
>3933e0	00 06 80 f8 24 38 00 03		MIDIW31_INSTRUMENT_FRETNOIS   .text $00, $06, $80, $F8, $24, $38, $00, $03, $8F, $56, $84, $02
>3933e8	8f 56 84 02
>3933ec	00 0e 00 f8 00 00 00 d0		MIDIW31_INSTRUMENT_BRTHNOIS   .text $00, $0E, $00, $F8, $00, $00, $00, $D0, $0C, $34, $04, $03
>3933f4	0c 34 04 03
>3933f8	00 0e 00 f6 00 00 00 c0		MIDIW31_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F6, $00, $00, $00, $C0, $07, $1F, $02, $03
>393400	07 1f 02 03
>393404	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BIRDS      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39340c	00 00 00 00
>393410	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TELEPHON   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393418	00 00 00 00
>39341c	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HELICOPT   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393424	00 00 00 00
>393428	00 26 00 ff 01 3e 00 e4		MIDIW31_INSTRUMENT_APPLAUSE   .text $00, $26, $00, $FF, $01, $3E, $00, $E4, $07, $12, $16, $01
>393430	07 12 16 01
>393434	00 00 00 f3 f0 3e 00 00		MIDIW31_INSTRUMENT_GUNSHOT    .text $00, $00, $00, $F3, $F0, $3E, $00, $00, $07, $F6, $C9, $02
>39343c	07 f6 c9 02
>393440	40 2e 39 00 4c 2e 39 00		midiInstrumentsw31 .dword MIDIW31_INSTRUMENT_PIANO1,   MIDIW31_INSTRUMENT_PIANO2,   MIDIW31_INSTRUMENT_PIANO3,   MIDIW31_INSTRUMENT_HONKTONK, MIDIW31_INSTRUMENT_EP1, MIDIW31_INSTRUMENT_EP2
>393448	58 2e 39 00 64 2e 39 00 70 2e 39 00 7c 2e 39 00
>393458	88 2e 39 00 94 2e 39 00		                   .dword MIDIW31_INSTRUMENT_HARPSIC,  MIDIW31_INSTRUMENT_CLAVIC,   MIDIW31_INSTRUMENT_CELESTA,  MIDIW31_INSTRUMENT_GLOCK,    MIDIW31_INSTRUMENT_MUSICBOX, MIDIW31_INSTRUMENT_VIBES
>393460	a0 2e 39 00 ac 2e 39 00 b8 2e 39 00 c4 2e 39 00
>393470	d0 2e 39 00 dc 2e 39 00			                 .dword MIDIW31_INSTRUMENT_MARIMBA,  MIDIW31_INSTRUMENT_XYLO,     MIDIW31_INSTRUMENT_TUBEBELL, MIDIW31_INSTRUMENT_SANTUR,   MIDIW31_INSTRUMENT_ORGAN1,   MIDIW31_INSTRUMENT_ORGAN2
>393478	e8 2e 39 00 f4 2e 39 00 00 2f 39 00 0c 2f 39 00
>393488	18 2f 39 00 24 2f 39 00			                 .dword MIDIW31_INSTRUMENT_ORGAN3,   MIDIW31_INSTRUMENT_PIPEORG,  MIDIW31_INSTRUMENT_REEDORG,  MIDIW31_INSTRUMENT_ACORDIAN, MIDIW31_INSTRUMENT_HARMONIC, MIDIW31_INSTRUMENT_BANDNEON
>393490	30 2f 39 00 3c 2f 39 00 48 2f 39 00 54 2f 39 00
>3934a0	60 2f 39 00 6c 2f 39 00		                     .dword MIDIW31_INSTRUMENT_NYLONGT,  MIDIW31_INSTRUMENT_STEELGT,  MIDIW31_INSTRUMENT_JAZZGT,   MIDIW31_INSTRUMENT_CLEANGT,  MIDIW31_INSTRUMENT_MUTEGT,   MIDIW31_INSTRUMENT_OVERDGT
>3934a8	78 2f 39 00 84 2f 39 00 90 2f 39 00 9c 2f 39 00
>3934b8	a8 2f 39 00 b4 2f 39 00			                 .dword MIDIW31_INSTRUMENT_DISTGT,   MIDIW31_INSTRUMENT_GTHARMS,  MIDIW31_INSTRUMENT_ACOUBASS, MIDIW31_INSTRUMENT_FINGBASS, MIDIW31_INSTRUMENT_PICKBASS, MIDIW31_INSTRUMENT_FRETLESS
>3934c0	c0 2f 39 00 cc 2f 39 00 d8 2f 39 00 e4 2f 39 00
>3934d0	f0 2f 39 00 fc 2f 39 00			                 .dword MIDIW31_INSTRUMENT_SLAPBAS1, MIDIW31_INSTRUMENT_SLAPBAS2, MIDIW31_INSTRUMENT_SYNBASS1, MIDIW31_INSTRUMENT_SYNBASS2, MIDIW31_INSTRUMENT_VIOLIN,   MIDIW31_INSTRUMENT_VIOLA
>3934d8	08 30 39 00 14 30 39 00 20 30 39 00 2c 30 39 00
>3934e8	38 30 39 00 44 30 39 00			                 .dword MIDIW31_INSTRUMENT_CELLO,    MIDIW31_INSTRUMENT_CONTRAB,  MIDIW31_INSTRUMENT_TREMSTR,  MIDIW31_INSTRUMENT_PIZZ,     MIDIW31_INSTRUMENT_HARP,     MIDIW31_INSTRUMENT_TIMPANI
>3934f0	50 30 39 00 5c 30 39 00 68 30 39 00 74 30 39 00
>393500	80 30 39 00 8c 30 39 00			                 .dword MIDIW31_INSTRUMENT_STRINGS,  MIDIW31_INSTRUMENT_SLOWSTR,  MIDIW31_INSTRUMENT_SYNSTR1,  MIDIW31_INSTRUMENT_SYNSTR2,  MIDIW31_INSTRUMENT_CHOIR,    MIDIW31_INSTRUMENT_OOHS
>393508	98 30 39 00 a4 30 39 00 b0 30 39 00 bc 30 39 00
>393518	c8 30 39 00 d4 30 39 00			                 .dword MIDIW31_INSTRUMENT_SYNVOX,   MIDIW31_INSTRUMENT_ORCHIT,   MIDIW31_INSTRUMENT_TRUMPET,  MIDIW31_INSTRUMENT_TROMBONE, MIDIW31_INSTRUMENT_TUBA,     MIDIW31_INSTRUMENT_MUTETRP
>393520	e0 30 39 00 ec 30 39 00 f8 30 39 00 04 31 39 00
>393530	10 31 39 00 1c 31 39 00			                 .dword MIDIW31_INSTRUMENT_FRHORN,   MIDIW31_INSTRUMENT_BRASS1,   MIDIW31_INSTRUMENT_SYNBRAS1, MIDIW31_INSTRUMENT_SYNBRAS2, MIDIW31_INSTRUMENT_SOPSAX,   MIDIW31_INSTRUMENT_ALTOSAX
>393538	28 31 39 00 34 31 39 00 40 31 39 00 4c 31 39 00
>393548	58 31 39 00 64 31 39 00			                 .dword MIDIW31_INSTRUMENT_TENSAX,   MIDIW31_INSTRUMENT_BARISAX,  MIDIW31_INSTRUMENT_OBOE,     MIDIW31_INSTRUMENT_ENGLHORN, MIDIW31_INSTRUMENT_BASSOON,  MIDIW31_INSTRUMENT_CLARINET
>393550	70 31 39 00 7c 31 39 00 88 31 39 00 94 31 39 00
>393560	a0 31 39 00 ac 31 39 00			                 .dword MIDIW31_INSTRUMENT_PICCOLO,  MIDIW31_INSTRUMENT_FLUTE1,   MIDIW31_INSTRUMENT_RECORDER, MIDIW31_INSTRUMENT_PANFLUTE, MIDIW31_INSTRUMENT_BOTTLEB,  MIDIW31_INSTRUMENT_SHAKU
>393568	b8 31 39 00 c4 31 39 00 d0 31 39 00 dc 31 39 00
>393578	e8 31 39 00 f4 31 39 00			                 .dword MIDIW31_INSTRUMENT_WHISTLE,  MIDIW31_INSTRUMENT_OCARINA,  MIDIW31_INSTRUMENT_SQUARWAV, MIDIW31_INSTRUMENT_SAWWAV,   MIDIW31_INSTRUMENT_SYNCALLI, MIDIW31_INSTRUMENT_CHIFLEAD
>393580	00 32 39 00 0c 32 39 00 18 32 39 00 24 32 39 00
>393590	30 32 39 00 3c 32 39 00			                 .dword MIDIW31_INSTRUMENT_CHARANG,  MIDIW31_INSTRUMENT_SOLOVOX,  MIDIW31_INSTRUMENT_FIFTHSAW, MIDIW31_INSTRUMENT_BASSLEAD, MIDIW31_INSTRUMENT_FANTASIA, MIDIW31_INSTRUMENT_WARMPAD
>393598	48 32 39 00 54 32 39 00 60 32 39 00 6c 32 39 00
>3935a8	78 32 39 00 84 32 39 00			                 .dword MIDIW31_INSTRUMENT_POLYSYN,  MIDIW31_INSTRUMENT_SPACEVOX, MIDIW31_INSTRUMENT_BOWEDGLS, MIDIW31_INSTRUMENT_METALPAD, MIDIW31_INSTRUMENT_HALOPAD,  MIDIW31_INSTRUMENT_SWEEPPAD
>3935b0	90 32 39 00 9c 32 39 00 a8 32 39 00 b4 32 39 00
>3935c0	c0 32 39 00 cc 32 39 00			                 .dword MIDIW31_INSTRUMENT_ICERAIN,  MIDIW31_INSTRUMENT_SOUNDTRK, MIDIW31_INSTRUMENT_CRYSTAL,  MIDIW31_INSTRUMENT_ATMOSPH,  MIDIW31_INSTRUMENT_BRIGHT,   MIDIW31_INSTRUMENT_GOBLIN
>3935c8	d8 32 39 00 e4 32 39 00 f0 32 39 00 fc 32 39 00
>3935d8	08 33 39 00 14 33 39 00			                 .dword MIDIW31_INSTRUMENT_ECHODROP, MIDIW31_INSTRUMENT_STARTHEM, MIDIW31_INSTRUMENT_SITAR,    MIDIW31_INSTRUMENT_BANJO,    MIDIW31_INSTRUMENT_SHAMISEN, MIDIW31_INSTRUMENT_KOTO
>3935e0	20 33 39 00 2c 33 39 00 38 33 39 00 44 33 39 00
>3935f0	50 33 39 00 5c 33 39 00			                 .dword MIDIW31_INSTRUMENT_KALIMBA,  MIDIW31_INSTRUMENT_BAGPIPE,  MIDIW31_INSTRUMENT_FIDDLE,   MIDIW31_INSTRUMENT_SHANNAI,  MIDIW31_INSTRUMENT_TINKLBEL, MIDIW31_INSTRUMENT_AGOGO
>3935f8	68 33 39 00 74 33 39 00 80 33 39 00 8c 33 39 00
>393608	98 33 39 00 a4 33 39 00			                 .dword MIDIW31_INSTRUMENT_STEELDRM, MIDIW31_INSTRUMENT_WOODBLOK, MIDIW31_INSTRUMENT_TAIKO,    MIDIW31_INSTRUMENT_MELOTOM,  MIDIW31_INSTRUMENT_SYNDRUM,  MIDIW31_INSTRUMENT_REVRSCYM
>393610	b0 33 39 00 bc 33 39 00 c8 33 39 00 d4 33 39 00
>393620	e0 33 39 00 ec 33 39 00			                 .dword MIDIW31_INSTRUMENT_FRETNOIS, MIDIW31_INSTRUMENT_BRTHNOIS, MIDIW31_INSTRUMENT_SEASHORE, MIDIW31_INSTRUMENT_BIRDS,    MIDIW31_INSTRUMENT_TELEPHON, MIDIW31_INSTRUMENT_HELICOPT
>393628	f8 33 39 00 04 34 39 00 10 34 39 00 1c 34 39 00
>393638	28 34 39 00 34 34 39 00			                 .dword MIDIW31_INSTRUMENT_APPLAUSE, MIDIW31_INSTRUMENT_GUNSHOT

;******  Return to file: src\OPL2_Library.asm

>393640	3c 42 44 45 47 49 4b 4c		NOTE_INTRO  .byte  $3C, $42, $44, $45, $47, $49, $4B, $4C
.393648					IOPL2_TONE_TEST
.393648	e2 20		sep #$20	                SEP #$20        ; set A short
.39364a	c2 10		rep #$10	                REP #$10        ; set X long
.39364c	a2 00 00	ldx #$0000	                LDX #0
.39364f					OPL2_TONE_TESTING_L1
.39364f	bf 40 36 39	lda $393640,x	                LDA NOTE_INTRO, X
.393653	29 0f		and #$0f	                AND #$F
.393655	85 30		sta $30		                STA OPL2_NOTE ; start at C
.393657	bf 40 36 39	lda $393640,x	                LDA NOTE_INTRO, X
.39365b	29 70		and #$70	                AND #$70
.39365d	4a		lsr a		                LSR A
.39365e	4a		lsr a		                LSR A
.39365f	4a		lsr a		                LSR A
.393660	4a		lsr a		                LSR A
.393661	85 31		sta $31		                STA OPL2_OCTAVE
.393663	8a		txa		                TXA
.393664	29 03		and #$03	                AND #$03        ; replace modulo 3 -  play each note on a different channel
.393666	85 27		sta $27		                STA OPL2_CHANNEL
.393668	22 38 38 39	jsl $393838	                JSL OPL2_PLAYNOTE
.39366c	a0 00 00	ldy #$0000	                LDY #$0000
.39366f					OPL2_TONE_TESTING_L2
.39366f	ea		nop		                NOP
.393670	ea		nop		                NOP
.393671	ea		nop		                NOP
.393672	ea		nop		                NOP
.393673	c8		iny		                INY
.393674	c0 ff ff	cpy #$ffff	                CPY #$FFFF
.393677	d0 f6		bne $39366f	                BNE OPL2_TONE_TESTING_L2
.393679	e8		inx		                INX
.39367a	e0 08 00	cpx #$0008	                CPX #8
.39367d	d0 d0		bne $39364f	                BNE OPL2_TONE_TESTING_L1
.39367f	6b		rtl		                RTL
.393680					OPL2_INIT
.393680	c2 20		rep #$20	                REP #$20        ; set A long
.393682	a9 00 00	lda #$0000	                LDA #$0000
.393685	85 28		sta $28		                STA OPL2_REG_REGION
.393687	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393689	85 30		sta $30		                STA OPL2_NOTE
.39368b	85 32		sta $32		                STA OPL2_PARAMETER0
.39368d	85 34		sta $34		                STA OPL2_PARAMETER2
.39368f	a9 0a 16	lda #$160a	                LDA #<>INSTRUMENT_ACCORDN
.393692	85 50		sta $50		                STA RAD_ADDR
.393694	a9 39 00	lda #$0039	                LDA #<`INSTRUMENT_ACCORDN
.393697	85 52		sta $52		                STA RAD_ADDR + 2
.393699	e2 20		sep #$20	                SEP #$20        ; set A short
.39369b	6b		rtl		                RTL
.39369c					OPL2_Reset
.39369c	6b		rtl		                RTL
.39369d					OPL2_Get_FrequencyBlock
.39369d	6b		rtl		                RTL
.39369e					OPL2_GET_REGISTER
.39369e	48		pha		                PHA             ; begin setdp macro
.39369f	08		php		                PHP
.3936a0	c2 20		rep #$20	                REP #$20        ; set A long
.3936a2	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3936a5	5b		tcd		                TCD
.3936a6	28		plp		                PLP
.3936a7	68		pla		                PLA             ; end setdp macro
.3936a8	c2 20		rep #$20	                REP #$20        ; set A long
.3936aa	18		clc		              CLC
.3936ab	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3936ae	65 32		adc $32		              ADC OPL2_PARAMETER0
.3936b0	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3936b2	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3936b5	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3936b7	e2 20		sep #$20	                SEP #$20        ; set A short
.3936b9	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3936bb	6b		rtl		              RTL
.3936bc					OPL2_GET_WAVEFORM_SELECT
.3936bc	48		pha		                PHA             ; begin setdp macro
.3936bd	08		php		                PHP
.3936be	c2 20		rep #$20	                REP #$20        ; set A long
.3936c0	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3936c3	5b		tcd		                TCD
.3936c4	28		plp		                PLP
.3936c5	68		pla		                PLA             ; end setdp macro
.3936c6	c2 20		rep #$20	                REP #$20        ; set A long
.3936c8	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3936cb	69 01 00	adc #$0001	              ADC #$0001
.3936ce	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3936d0	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3936d3	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3936d5	e2 20		sep #$20	                SEP #$20        ; set A short
.3936d7	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3936d9	29 20		and #$20	              AND #$20
.3936db	6b		rtl		              RTL
.3936dc					OPL2_GET_SCALINGLEVEL
.3936dc	48		pha		                PHA             ; begin setdp macro
.3936dd	08		php		                PHP
.3936de	c2 20		rep #$20	                REP #$20        ; set A long
.3936e0	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3936e3	5b		tcd		                TCD
.3936e4	28		plp		                PLP
.3936e5	68		pla		                PLA             ; end setdp macro
.3936e6	c2 20		rep #$20	                REP #$20        ; set A long
.3936e8	a9 40 00	lda #$0040	              LDA #$0040  ;
.3936eb	85 28		sta $28		              STA OPL2_REG_REGION
.3936ed	20 9f 3f	jsr $393f9f	              JSR OPL2_GET_REG_OFFSET
.3936f0	e2 20		sep #$20	                SEP #$20        ; set A short
.3936f2	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3936f4	29 c0		and #$c0	              AND #$C0
.3936f6	4a		lsr a		              LSR A
.3936f7	4a		lsr a		              LSR A
.3936f8	4a		lsr a		              LSR A
.3936f9	4a		lsr a		              LSR A
.3936fa	4a		lsr a		              LSR A
.3936fb	4a		lsr a		              LSR A
.3936fc	6b		rtl		              RTL
.3936fd					OPL2_GET_BLOCK
.3936fd	48		pha		                PHA             ; begin setdp macro
.3936fe	08		php		                PHP
.3936ff	c2 20		rep #$20	                REP #$20        ; set A long
.393701	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393704	5b		tcd		                TCD
.393705	28		plp		                PLP
.393706	68		pla		                PLA             ; end setdp macro
.393707	e2 20		sep #$20	                SEP #$20        ; set A short
.393709	18		clc		              CLC
.39370a	a5 27		lda $27		              LDA OPL2_CHANNEL
.39370c	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.39370e	69 b0		adc #$b0	              ADC #$B0
.393710	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393712	a9 00		lda #$00	              LDA #$00
.393714	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393716	c2 30		rep #$30	                REP #$30        ; set A&X long
.393718	18		clc		              CLC
.393719	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39371c	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.39371e	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393720	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393723	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393725	e2 20		sep #$20	                SEP #$20        ; set A short
.393727	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393729	29 1c		and #$1c	              AND #$1C
.39372b	4a		lsr a		              LSR A
.39372c	4a		lsr a		              LSR A
.39372d	6b		rtl		              RTL
.39372e					OPL2_GET_KEYON
.39372e	48		pha		                PHA             ; begin setdp macro
.39372f	08		php		                PHP
.393730	c2 20		rep #$20	                REP #$20        ; set A long
.393732	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393735	5b		tcd		                TCD
.393736	28		plp		                PLP
.393737	68		pla		                PLA             ; end setdp macro
.393738	e2 20		sep #$20	                SEP #$20        ; set A short
.39373a	18		clc		              CLC
.39373b	a5 27		lda $27		              LDA OPL2_CHANNEL
.39373d	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.39373f	69 b0		adc #$b0	              ADC #$B0
.393741	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393743	a9 00		lda #$00	              LDA #$00
.393745	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393747	c2 30		rep #$30	                REP #$30        ; set A&X long
.393749	18		clc		              CLC
.39374a	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39374d	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.39374f	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393751	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393754	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393756	e2 20		sep #$20	                SEP #$20        ; set A short
.393758	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39375a	29 20		and #$20	              AND #$20
.39375c	6b		rtl		              RTL
.39375d					OPL2_GET_FEEDBACK
.39375d	48		pha		                PHA             ; begin setdp macro
.39375e	08		php		                PHP
.39375f	c2 20		rep #$20	                REP #$20        ; set A long
.393761	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393764	5b		tcd		                TCD
.393765	28		plp		                PLP
.393766	68		pla		                PLA             ; end setdp macro
.393767	e2 20		sep #$20	                SEP #$20        ; set A short
.393769	18		clc		              CLC
.39376a	a5 27		lda $27		              LDA OPL2_CHANNEL
.39376c	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.39376e	69 c0		adc #$c0	              ADC #$C0
.393770	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393772	a9 00		lda #$00	              LDA #$00
.393774	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393776	c2 30		rep #$30	                REP #$30        ; set A&X long
.393778	18		clc		              CLC
.393779	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39377c	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.39377e	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393780	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393783	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393785	e2 20		sep #$20	                SEP #$20        ; set A short
.393787	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393789	29 e0		and #$e0	              AND #$E0
.39378b	4a		lsr a		              LSR
.39378c	6b		rtl		              RTL
.39378d					OPL2_GET_SYNTHMODE
.39378d	48		pha		                PHA             ; begin setdp macro
.39378e	08		php		                PHP
.39378f	c2 20		rep #$20	                REP #$20        ; set A long
.393791	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393794	5b		tcd		                TCD
.393795	28		plp		                PLP
.393796	68		pla		                PLA             ; end setdp macro
.393797	e2 20		sep #$20	                SEP #$20        ; set A short
.393799	18		clc		              CLC
.39379a	a5 27		lda $27		              LDA OPL2_CHANNEL
.39379c	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.39379e	69 c0		adc #$c0	              ADC #$C0
.3937a0	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.3937a2	a9 00		lda #$00	              LDA #$00
.3937a4	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.3937a6	c2 30		rep #$30	                REP #$30        ; set A&X long
.3937a8	18		clc		              CLC
.3937a9	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3937ac	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.3937ae	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3937b0	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3937b3	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3937b5	e2 20		sep #$20	                SEP #$20        ; set A short
.3937b7	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3937b9	29 01		and #$01	              AND #$01
.3937bb	6b		rtl		              RTL
.3937bc					OPL2_GET_DEEPTREMOLO
.3937bc	48		pha		                PHA             ; begin setdp macro
.3937bd	08		php		                PHP
.3937be	c2 20		rep #$20	                REP #$20        ; set A long
.3937c0	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3937c3	5b		tcd		                TCD
.3937c4	28		plp		                PLP
.3937c5	68		pla		                PLA             ; end setdp macro
.3937c6	c2 20		rep #$20	                REP #$20        ; set A long
.3937c8	a9 bd 00	lda #$00bd	              LDA #$00BD;
.3937cb	85 28		sta $28		              STA OPL2_REG_REGION
.3937cd	20 9f 3f	jsr $393f9f	              JSR OPL2_GET_REG_OFFSET
.3937d0	e2 20		sep #$20	                SEP #$20        ; set A short
.3937d2	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3937d4	29 80		and #$80	              AND #$80
.3937d6	6b		rtl		              RTL
.3937d7					OPL2_GET_DEEPVIBRATO
.3937d7	48		pha		                PHA             ; begin setdp macro
.3937d8	08		php		                PHP
.3937d9	c2 20		rep #$20	                REP #$20        ; set A long
.3937db	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3937de	5b		tcd		                TCD
.3937df	28		plp		                PLP
.3937e0	68		pla		                PLA             ; end setdp macro
.3937e1	c2 20		rep #$20	                REP #$20        ; set A long
.3937e3	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3937e6	69 bd 00	adc #$00bd	              ADC #$00BD
.3937e9	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3937eb	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3937ee	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3937f0	e2 20		sep #$20	                SEP #$20        ; set A short
.3937f2	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3937f4	29 40		and #$40	              AND #$40
.3937f6	6b		rtl		              RTL
.3937f7					OPL2_GET_PERCUSSION
.3937f7	48		pha		                PHA             ; begin setdp macro
.3937f8	08		php		                PHP
.3937f9	c2 20		rep #$20	                REP #$20        ; set A long
.3937fb	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3937fe	5b		tcd		                TCD
.3937ff	28		plp		                PLP
.393800	68		pla		                PLA             ; end setdp macro
.393801	c2 20		rep #$20	                REP #$20        ; set A long
.393803	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393806	69 bd 00	adc #$00bd	              ADC #$00BD
.393809	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39380b	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.39380e	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393810	e2 20		sep #$20	                SEP #$20        ; set A short
.393812	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393814	29 20		and #$20	              AND #$20
.393816	6b		rtl		              RTL
.393817					OPL2_GET_DRUMS
.393817	48		pha		                PHA             ; begin setdp macro
.393818	08		php		                PHP
.393819	c2 20		rep #$20	                REP #$20        ; set A long
.39381b	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39381e	5b		tcd		                TCD
.39381f	28		plp		                PLP
.393820	68		pla		                PLA             ; end setdp macro
.393821	c2 20		rep #$20	                REP #$20        ; set A long
.393823	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393826	69 bd 00	adc #$00bd	              ADC #$00BD
.393829	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39382b	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.39382e	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393830	e2 20		sep #$20	                SEP #$20        ; set A short
.393832	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393834	29 1f		and #$1f	              AND #$1F
.393836	6b		rtl		              RTL
.393837					OPL2_Get_WaveForm
.393837	6b		rtl		                RTL
.393838					OPL2_PLAYNOTE
.393838	48		pha		                PHA             ; begin setdp macro
.393839	08		php		                PHP
.39383a	c2 20		rep #$20	                REP #$20        ; set A long
.39383c	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39383f	5b		tcd		                TCD
.393840	28		plp		                PLP
.393841	68		pla		                PLA             ; end setdp macro
.393842	e2 20		sep #$20	                SEP #$20        ; set A short
.393844	da		phx		                PHX
.393845	a9 00		lda #$00	                LDA #$00
.393847	85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.393849	20 20 3e	jsr $393e20	                JSR OPL2_SET_KEYON
.39384c	20 e5 3d	jsr $393de5	                JSR OPL2_SET_BLOCK  ; OPL2_SET_BLOCK Already to OPL2_OCTAVE
.39384f	e2 10		sep #$10	                SEP #$10        ; set X short
.393851	a5 30		lda $30		                LDA OPL2_NOTE
.393853	3a		dec a		                DEC A
.393854	0a		asl a		                ASL A
.393855	aa		tax		                TAX
.393856	bf cf 15 39	lda $3915cf,x	                LDA @lnoteFNumbers,X
.39385a	85 32		sta $32		                STA OPL2_PARAMETER0 ; Store the 8it in Param OPL2_PARAMETER0
.39385c	e8		inx		                INX
.39385d	bf cf 15 39	lda $3915cf,x	                LDA @lnoteFNumbers,X
.393861	85 33		sta $33		                STA OPL2_PARAMETER1 ; Store the 8bit in Param OPL2_PARAMETER1
.393863	22 63 3d 39	jsl $393d63	                JSL OPL2_SET_FNUMBER
.393867	a9 01		lda #$01	                LDA #$01
.393869	85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.39386b	20 20 3e	jsr $393e20	                JSR OPL2_SET_KEYON
.39386e	c2 10		rep #$10	                REP #$10        ; set X long
.393870	fa		plx		                PLX
.393871	6b		rtl		                RTL
.393872					OPL2_PLAYDRUM
.393872	6b		rtl		                RTL
.393873					OPL2_SET_INSTRUMENT
.393873	48		pha		                PHA             ; begin setdp macro
.393874	08		php		                PHP
.393875	c2 20		rep #$20	                REP #$20        ; set A long
.393877	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39387a	5b		tcd		                TCD
.39387b	28		plp		                PLP
.39387c	68		pla		                PLA             ; end setdp macro
.39387d	38		sec		              SEC ; Set the WaveFormSelect to True
.39387e	22 61 3a 39	jsl $393a61	              JSL OPL2_SET_WAVEFORMSELECT;
.393882	e2 20		sep #$20	                SEP #$20        ; set A short
.393884	c2 10		rep #$10	                REP #$10        ; set X long
.393886	a0 00 00	ldy #$0000	              LDY #$0000
.393889	a2 00 00	ldx #$0000	              LDX #$0000
.39388c	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO],Y ; Pointer Location 0 in Instrument Profile
.39388e	85 35		sta $35		              STA OPL2_PARAMETER3
.393890	c8		iny		              INY
.393891	c9 06		cmp #$06	              CMP #$06
.393893	d0 03		bne $393898	              BNE PERCUSSION_NEXT07
.393895	82 70 01	brl $393a08	              BRL Percussion_6
.393898					PERCUSSION_NEXT07
.393898	c9 07		cmp #$07	              CMP #$07
.39389a	d0 03		bne $39389f	              BNE PERCUSSION_NEXT08
.39389c	82 44 01	brl $3939e3	              BRL Percussion_7
.39389f					PERCUSSION_NEXT08
.39389f	c9 08		cmp #$08	              CMP #$08
.3938a1	d0 03		bne $3938a6	              BNE PERCUSSION_NEXT09
.3938a3	82 18 01	brl $3939be	              BRL Percussion_8
.3938a6					PERCUSSION_NEXT09
.3938a6	c9 09		cmp #$09	              CMP #$09
.3938a8	d0 03		bne $3938ad	              BNE PERCUSSION_NEXT0A
.3938aa	82 ec 00	brl $393999	              BRL Percussion_9
.3938ad					PERCUSSION_NEXT0A
.3938ad	c9 0a		cmp #$0a	              CMP #$0A
.3938af	d0 03		bne $3938b4	              BNE Percussion_Default
.3938b1	82 c0 00	brl $393974	              BRL Percussion_A
.3938b4					Percussion_Default
.3938b4	a9 00		lda #$00	              LDA #$00
.3938b6	85 26		sta $26		              STA OPL2_OPERATOR
.3938b8	c2 20		rep #$20	                REP #$20        ; set A long
.3938ba	a9 20 00	lda #$0020	              LDA #$0020;
.3938bd	85 28		sta $28		              STA OPL2_REG_REGION
.3938bf	20 9f 3f	jsr $393f9f	              JSR OPL2_GET_REG_OFFSET
.3938c2	e2 20		sep #$20	                SEP #$20        ; set A short
.3938c4	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.3938c6	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3938c8	c8		iny		              INY
.3938c9	c2 20		rep #$20	                REP #$20        ; set A long
.3938cb	a9 40 00	lda #$0040	              LDA #$0040;
.3938ce	85 28		sta $28		              STA OPL2_REG_REGION
.3938d0	20 9f 3f	jsr $393f9f	              JSR OPL2_GET_REG_OFFSET
.3938d3	e2 20		sep #$20	                SEP #$20        ; set A short
.3938d5	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.3938d7	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3938d9	c8		iny		              INY
.3938da	c2 20		rep #$20	                REP #$20        ; set A long
.3938dc	a9 60 00	lda #$0060	              LDA #$0060;
.3938df	85 28		sta $28		              STA OPL2_REG_REGION
.3938e1	20 9f 3f	jsr $393f9f	              JSR OPL2_GET_REG_OFFSET
.3938e4	e2 20		sep #$20	                SEP #$20        ; set A short
.3938e6	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.3938e8	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3938ea	c8		iny		              INY
.3938eb	c2 20		rep #$20	                REP #$20        ; set A long
.3938ed	a9 80 00	lda #$0080	              LDA #$0080;
.3938f0	85 28		sta $28		              STA OPL2_REG_REGION
.3938f2	20 9f 3f	jsr $393f9f	              JSR OPL2_GET_REG_OFFSET
.3938f5	e2 20		sep #$20	                SEP #$20        ; set A short
.3938f7	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.3938f9	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3938fb	c8		iny		              INY
.3938fc	c2 20		rep #$20	                REP #$20        ; set A long
.3938fe	a9 e0 00	lda #$00e0	              LDA #$00E0;
.393901	85 28		sta $28		              STA OPL2_REG_REGION
.393903	20 9f 3f	jsr $393f9f	              JSR OPL2_GET_REG_OFFSET
.393906	e2 20		sep #$20	                SEP #$20        ; set A short
.393908	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.39390a	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39390c	c8		iny		              INY
.39390d	e2 10		sep #$10	                SEP #$10        ; set X short
.39390f	a5 27		lda $27		              LDA OPL2_CHANNEL
.393911	29 0f		and #$0f	              AND #$0F
.393913	aa		tax		              TAX
.393914	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 6 in Instrument Profile
.393916	9f c0 e6 af	sta $afe6c0,x	              STA @lOPL3_R_FEEDBACK,X
.39391a	c8		iny		              INY
.39391b	a9 01		lda #$01	              LDA #$01
.39391d	85 26		sta $26		              STA OPL2_OPERATOR
.39391f	c2 20		rep #$20	                REP #$20        ; set A long
.393921	a9 20 00	lda #$0020	              LDA #$0020;
.393924	85 28		sta $28		              STA OPL2_REG_REGION
.393926	20 9f 3f	jsr $393f9f	              JSR OPL2_GET_REG_OFFSET
.393929	e2 20		sep #$20	                SEP #$20        ; set A short
.39392b	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 7 in Instrument Profile
.39392d	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39392f	c8		iny		              INY
.393930	c2 20		rep #$20	                REP #$20        ; set A long
.393932	a9 40 00	lda #$0040	              LDA #$0040;
.393935	85 28		sta $28		              STA OPL2_REG_REGION
.393937	20 9f 3f	jsr $393f9f	              JSR OPL2_GET_REG_OFFSET
.39393a	e2 20		sep #$20	                SEP #$20        ; set A short
.39393c	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 8 in Instrument Profile
.39393e	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393940	c8		iny		              INY
.393941	c2 20		rep #$20	                REP #$20        ; set A long
.393943	a9 60 00	lda #$0060	              LDA #$0060;
.393946	85 28		sta $28		              STA OPL2_REG_REGION
.393948	20 9f 3f	jsr $393f9f	              JSR OPL2_GET_REG_OFFSET
.39394b	e2 20		sep #$20	                SEP #$20        ; set A short
.39394d	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 9 in Instrument Profile
.39394f	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393951	c8		iny		              INY
.393952	c2 20		rep #$20	                REP #$20        ; set A long
.393954	a9 80 00	lda #$0080	              LDA #$0080;
.393957	85 28		sta $28		              STA OPL2_REG_REGION
.393959	20 9f 3f	jsr $393f9f	              JSR OPL2_GET_REG_OFFSET
.39395c	e2 20		sep #$20	                SEP #$20        ; set A short
.39395e	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location A in Instrument Profile
.393960	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393962	c8		iny		              INY
.393963	c2 20		rep #$20	                REP #$20        ; set A long
.393965	a9 e0 00	lda #$00e0	              LDA #$00E0;
.393968	85 28		sta $28		              STA OPL2_REG_REGION
.39396a	20 9f 3f	jsr $393f9f	              JSR OPL2_GET_REG_OFFSET
.39396d	e2 20		sep #$20	                SEP #$20        ; set A short
.39396f	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location B in Instrument Profile
.393971	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393973	6b		rtl		                RTL
.393974					Percussion_A
.393974	e2 20		sep #$20	                SEP #$20        ; set A short
.393976	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393978	8f 31 e6 af	sta $afe631	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $11
.39397c	c8		iny		              INY
.39397d	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.39397f	8f 51 e6 af	sta $afe651	              STA @lOPL3_R_KSL_TL + $11
.393983	c8		iny		              INY
.393984	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393986	8f 71 e6 af	sta $afe671	              STA @lOPL3_R_AR_DR + $11
.39398a	c8		iny		              INY
.39398b	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.39398d	8f 91 e6 af	sta $afe691	              STA @lOPL3_R_SL_RR + $11
.393991	c8		iny		              INY
.393992	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393994	8f f1 e6 af	sta $afe6f1	              STA @lOPL3_R_WAVE_SELECT + $11
.393998	6b		rtl		                RTL
.393999					Percussion_9
.393999	e2 20		sep #$20	                SEP #$20        ; set A short
.39399b	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.39399d	8f 35 e6 af	sta $afe635	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $15
.3939a1	c8		iny		              INY
.3939a2	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.3939a4	8f 55 e6 af	sta $afe655	              STA @lOPL3_R_KSL_TL + $15
.3939a8	c8		iny		              INY
.3939a9	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.3939ab	8f 75 e6 af	sta $afe675	              STA @lOPL3_R_AR_DR + $15
.3939af	c8		iny		              INY
.3939b0	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.3939b2	8f 95 e6 af	sta $afe695	              STA @lOPL3_R_SL_RR + $15
.3939b6	c8		iny		              INY
.3939b7	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.3939b9	8f f5 e6 af	sta $afe6f5	              STA @lOPL3_R_WAVE_SELECT + $15
.3939bd	6b		rtl		              RTL
.3939be					Percussion_8
.3939be	e2 20		sep #$20	                SEP #$20        ; set A short
.3939c0	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.3939c2	8f 32 e6 af	sta $afe632	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $12
.3939c6	c8		iny		              INY
.3939c7	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.3939c9	8f 52 e6 af	sta $afe652	              STA @lOPL3_R_KSL_TL + $12
.3939cd	c8		iny		              INY
.3939ce	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.3939d0	8f 72 e6 af	sta $afe672	              STA @lOPL3_R_AR_DR + $12
.3939d4	c8		iny		              INY
.3939d5	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.3939d7	8f 92 e6 af	sta $afe692	              STA @lOPL3_R_SL_RR + $12
.3939db	c8		iny		              INY
.3939dc	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.3939de	8f f2 e6 af	sta $afe6f2	              STA @lOPL3_R_WAVE_SELECT + $12
.3939e2	6b		rtl		              RTL
.3939e3					Percussion_7
.3939e3	e2 20		sep #$20	                SEP #$20        ; set A short
.3939e5	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.3939e7	8f 34 e6 af	sta $afe634	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $14
.3939eb	c8		iny		              INY
.3939ec	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.3939ee	8f 54 e6 af	sta $afe654	              STA @lOPL3_R_KSL_TL + $14
.3939f2	c8		iny		              INY
.3939f3	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.3939f5	8f 74 e6 af	sta $afe674	              STA @lOPL3_R_AR_DR + $14
.3939f9	c8		iny		              INY
.3939fa	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.3939fc	8f 94 e6 af	sta $afe694	              STA @lOPL3_R_SL_RR + $14
.393a00	c8		iny		              INY
.393a01	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393a03	8f f4 e6 af	sta $afe6f4	              STA @lOPL3_R_WAVE_SELECT + $14
.393a07	6b		rtl		              RTL
.393a08					Percussion_6
.393a08	e2 20		sep #$20	                SEP #$20        ; set A short
.393a0a	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393a0c	8f 30 e6 af	sta $afe630	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $10
.393a10	8f 33 e6 af	sta $afe633	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $13
.393a14	c8		iny		              INY
.393a15	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393a17	8f 50 e6 af	sta $afe650	              STA @lOPL3_R_KSL_TL + $10
.393a1b	8f 53 e6 af	sta $afe653	              STA @lOPL3_R_KSL_TL + $13
.393a1f	c8		iny		              INY
.393a20	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393a22	8f 70 e6 af	sta $afe670	              STA @lOPL3_R_AR_DR + $10
.393a26	8f 73 e6 af	sta $afe673	              STA @lOPL3_R_AR_DR + $13
.393a2a	c8		iny		              INY
.393a2b	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393a2d	8f 90 e6 af	sta $afe690	              STA @lOPL3_R_SL_RR + $10
.393a31	8f 93 e6 af	sta $afe693	              STA @lOPL3_R_SL_RR + $13
.393a35	c8		iny		              INY
.393a36	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393a38	8f f0 e6 af	sta $afe6f0	              STA @lOPL3_R_WAVE_SELECT + $10
.393a3c	8f f3 e6 af	sta $afe6f3	              STA @lOPL3_R_WAVE_SELECT + $13
.393a40	6b		rtl		              RTL
.393a41					OPL2_SET_REGISTER
.393a41	48		pha		                PHA             ; begin setdp macro
.393a42	08		php		                PHP
.393a43	c2 20		rep #$20	                REP #$20        ; set A long
.393a45	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393a48	5b		tcd		                TCD
.393a49	28		plp		                PLP
.393a4a	68		pla		                PLA             ; end setdp macro
.393a4b	c2 20		rep #$20	                REP #$20        ; set A long
.393a4d	18		clc		              CLC
.393a4e	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393a51	65 32		adc $32		              ADC OPL2_PARAMETER0
.393a53	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393a55	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393a58	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393a5a	e2 20		sep #$20	                SEP #$20        ; set A short
.393a5c	a5 33		lda $33		              LDA OPL2_PARAMETER1
.393a5e	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a60	6b		rtl		              RTL
.393a61					OPL2_SET_WAVEFORMSELECT
.393a61	48		pha		                PHA             ; begin setdp macro
.393a62	08		php		                PHP
.393a63	c2 20		rep #$20	                REP #$20        ; set A long
.393a65	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393a68	5b		tcd		                TCD
.393a69	28		plp		                PLP
.393a6a	68		pla		                PLA             ; end setdp macro
.393a6b	c2 20		rep #$20	                REP #$20        ; set A long
.393a6d	a9 01 e6	lda #$e601	              LDA #<>OPL3_R_BASE + $0001
.393a70	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393a72	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393a75	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393a77	e2 20		sep #$20	                SEP #$20        ; set A short
.393a79	b0 07		bcs $393a82	              BCS OPL2_Set_WaveFormSelect_set
.393a7b	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393a7d	29 df		and #$df	              AND #$DF
.393a7f	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a81	6b		rtl		              RTL
.393a82					OPL2_Set_WaveFormSelect_set
.393a82	48		pha		                PHA             ; begin setdp macro
.393a83	08		php		                PHP
.393a84	c2 20		rep #$20	                REP #$20        ; set A long
.393a86	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393a89	5b		tcd		                TCD
.393a8a	28		plp		                PLP
.393a8b	68		pla		                PLA             ; end setdp macro
.393a8c	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393a8e	09 20 00	ora #$0020	              ORA #$20
.393a91	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a93	6b		rtl		                RTL
.393a94					OPL2_SET_TREMOLO
.393a94	48		pha		                PHA             ; begin setdp macro
.393a95	08		php		                PHP
.393a96	c2 20		rep #$20	                REP #$20        ; set A long
.393a98	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393a9b	5b		tcd		                TCD
.393a9c	28		plp		                PLP
.393a9d	68		pla		                PLA             ; end setdp macro
.393a9e	08		php		                PHP ; Push the Carry
.393a9f	c2 20		rep #$20	                REP #$20        ; set A long
.393aa1	18		clc		                CLC
.393aa2	a9 20 00	lda #$0020	                LDA #$0020 ;
.393aa5	85 28		sta $28		                STA OPL2_REG_REGION
.393aa7	20 9f 3f	jsr $393f9f	                JSR OPL2_GET_REG_OFFSET
.393aaa	28		plp		                PLP ; Pull the Carry out
.393aab	e2 20		sep #$20	                SEP #$20        ; set A short
.393aad	b0 08		bcs $393ab7	                BCS OPL2_Set_Tremolo_Set;
.393aaf	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393ab1	29 7f		and #$7f	                AND #$7F
.393ab3	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393ab5	80 06		bra $393abd	                BRA OPL2_Set_Tremolo_Exit
.393ab7					OPL2_Set_Tremolo_Set
.393ab7	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393ab9	09 80		ora #$80	                ORA #$80
.393abb	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393abd					OPL2_Set_Tremolo_Exit
.393abd	6b		rtl		                RTL
.393abe					OPL2_GET_TREMOLO
.393abe	48		pha		                PHA             ; begin setdp macro
.393abf	08		php		                PHP
.393ac0	c2 20		rep #$20	                REP #$20        ; set A long
.393ac2	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393ac5	5b		tcd		                TCD
.393ac6	28		plp		                PLP
.393ac7	68		pla		                PLA             ; end setdp macro
.393ac8	c2 20		rep #$20	                REP #$20        ; set A long
.393aca	a9 20 00	lda #$0020	                LDA #$0020;
.393acd	85 28		sta $28		                STA OPL2_REG_REGION
.393acf	20 9f 3f	jsr $393f9f	                JSR OPL2_GET_REG_OFFSET
.393ad2	e2 20		sep #$20	                SEP #$20        ; set A short
.393ad4	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393ad6	29 80		and #$80	                AND #$80
.393ad8	6b		rtl		                RTL
.393ad9					OPL2_SET_VIBRATO
.393ad9	48		pha		                PHA             ; begin setdp macro
.393ada	08		php		                PHP
.393adb	c2 20		rep #$20	                REP #$20        ; set A long
.393add	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393ae0	5b		tcd		                TCD
.393ae1	28		plp		                PLP
.393ae2	68		pla		                PLA             ; end setdp macro
.393ae3	08		php		                PHP ; Push the Carry
.393ae4	c2 20		rep #$20	                REP #$20        ; set A long
.393ae6	18		clc		                CLC
.393ae7	a9 20 00	lda #$0020	                LDA #$0020;
.393aea	85 28		sta $28		                STA OPL2_REG_REGION
.393aec	20 9f 3f	jsr $393f9f	                JSR OPL2_GET_REG_OFFSET
.393aef	28		plp		                PLP ; Pull the Carry out
.393af0	e2 20		sep #$20	                SEP #$20        ; set A short
.393af2	b0 08		bcs $393afc	                BCS OPL2_Set_Vibrato_Set;
.393af4	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393af6	29 bf		and #$bf	                AND #$BF
.393af8	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393afa	80 06		bra $393b02	                BRA OPL2_Set_Vibrato_Exit
.393afc					OPL2_Set_Vibrato_Set
.393afc	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393afe	09 40		ora #$40	                ORA #$40
.393b00	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393b02					OPL2_Set_Vibrato_Exit
.393b02	6b		rtl		                RTL
.393b03					OPL2_GET_VIBRATO
.393b03	48		pha		                PHA             ; begin setdp macro
.393b04	08		php		                PHP
.393b05	c2 20		rep #$20	                REP #$20        ; set A long
.393b07	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b0a	5b		tcd		                TCD
.393b0b	28		plp		                PLP
.393b0c	68		pla		                PLA             ; end setdp macro
.393b0d	c2 20		rep #$20	                REP #$20        ; set A long
.393b0f	a9 20 00	lda #$0020	                LDA #$0020;
.393b12	85 28		sta $28		                STA OPL2_REG_REGION
.393b14	20 9f 3f	jsr $393f9f	                JSR OPL2_GET_REG_OFFSET
.393b17	e2 20		sep #$20	                SEP #$20        ; set A short
.393b19	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393b1b	29 40		and #$40	                AND #$40
.393b1d	6b		rtl		                RTL
.393b1e					OPL2_SET_MAINTAINSUSTAIN
.393b1e	48		pha		                PHA             ; begin setdp macro
.393b1f	08		php		                PHP
.393b20	c2 20		rep #$20	                REP #$20        ; set A long
.393b22	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b25	5b		tcd		                TCD
.393b26	28		plp		                PLP
.393b27	68		pla		                PLA             ; end setdp macro
.393b28	08		php		              PHP ; Push the Carry
.393b29	c2 20		rep #$20	                REP #$20        ; set A long
.393b2b	18		clc		              CLC
.393b2c	a9 20 00	lda #$0020	              LDA #$0020;
.393b2f	85 28		sta $28		              STA OPL2_REG_REGION
.393b31	20 9f 3f	jsr $393f9f	              JSR OPL2_GET_REG_OFFSET
.393b34	28		plp		              PLP ; Pull the Carry out
.393b35	e2 20		sep #$20	                SEP #$20        ; set A short
.393b37	b0 08		bcs $393b41	              BCS OPL2_Set_MaintainSustain_Set;
.393b39	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393b3b	29 df		and #$df	              AND #$DF
.393b3d	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393b3f	80 06		bra $393b47	              BRA OPL2_Set_MaintainSustain_Exit
.393b41					OPL2_Set_MaintainSustain_Set
.393b41	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393b43	09 20		ora #$20	              ORA #$20
.393b45	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393b47					OPL2_Set_MaintainSustain_Exit
.393b47	6b		rtl		                RTL
.393b48					OPL2_GET_MAINTAINSUSTAIN
.393b48	48		pha		                PHA             ; begin setdp macro
.393b49	08		php		                PHP
.393b4a	c2 20		rep #$20	                REP #$20        ; set A long
.393b4c	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b4f	5b		tcd		                TCD
.393b50	28		plp		                PLP
.393b51	68		pla		                PLA             ; end setdp macro
.393b52	c2 20		rep #$20	                REP #$20        ; set A long
.393b54	a9 20 00	lda #$0020	              LDA #$0020;
.393b57	85 28		sta $28		              STA OPL2_REG_REGION
.393b59	20 9f 3f	jsr $393f9f	              JSR OPL2_GET_REG_OFFSET
.393b5c	e2 20		sep #$20	                SEP #$20        ; set A short
.393b5e	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393b60	29 20		and #$20	              AND #$20
.393b62	6b		rtl		                RTL
.393b63					OPL2_SET_ENVELOPESCALING
.393b63	48		pha		                PHA             ; begin setdp macro
.393b64	08		php		                PHP
.393b65	c2 20		rep #$20	                REP #$20        ; set A long
.393b67	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b6a	5b		tcd		                TCD
.393b6b	28		plp		                PLP
.393b6c	68		pla		                PLA             ; end setdp macro
.393b6d	08		php		              PHP ; Push the Carry
.393b6e	c2 20		rep #$20	                REP #$20        ; set A long
.393b70	18		clc		              CLC
.393b71	a9 20 00	lda #$0020	              LDA #$0020;
.393b74	85 28		sta $28		              STA OPL2_REG_REGION
.393b76	20 9f 3f	jsr $393f9f	              JSR OPL2_GET_REG_OFFSET
.393b79	28		plp		              PLP ; Pull the Carry out
.393b7a	e2 20		sep #$20	                SEP #$20        ; set A short
.393b7c	b0 08		bcs $393b86	              BCS OPL2_Set_EnvelopeScaling_Set;
.393b7e	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393b80	29 ef		and #$ef	              AND #$EF
.393b82	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393b84	80 06		bra $393b8c	              BRA OPL2_Set_EnvelopeScaling_Exit
.393b86					OPL2_Set_EnvelopeScaling_Set
.393b86	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393b88	09 10		ora #$10	              ORA #$10
.393b8a	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393b8c					OPL2_Set_EnvelopeScaling_Exit
.393b8c	6b		rtl		                RTL
.393b8d					OPL2_GET_ENVELOPESCALING
.393b8d	48		pha		                PHA             ; begin setdp macro
.393b8e	08		php		                PHP
.393b8f	c2 20		rep #$20	                REP #$20        ; set A long
.393b91	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b94	5b		tcd		                TCD
.393b95	28		plp		                PLP
.393b96	68		pla		                PLA             ; end setdp macro
.393b97	c2 20		rep #$20	                REP #$20        ; set A long
.393b99	a9 20 00	lda #$0020	              LDA #$0020;
.393b9c	85 28		sta $28		              STA OPL2_REG_REGION
.393b9e	20 9f 3f	jsr $393f9f	              JSR OPL2_GET_REG_OFFSET
.393ba1	e2 20		sep #$20	                SEP #$20        ; set A short
.393ba3	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393ba5	29 10		and #$10	              AND #$10
.393ba7	6b		rtl		                RTL
.393ba8					OPL2_GET_MODFREQMULTIPLE
.393ba8	48		pha		                PHA             ; begin setdp macro
.393ba9	08		php		                PHP
.393baa	c2 20		rep #$20	                REP #$20        ; set A long
.393bac	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393baf	5b		tcd		                TCD
.393bb0	28		plp		                PLP
.393bb1	68		pla		                PLA             ; end setdp macro
.393bb2	c2 20		rep #$20	                REP #$20        ; set A long
.393bb4	a9 20 00	lda #$0020	              LDA #$0020;
.393bb7	85 28		sta $28		              STA OPL2_REG_REGION
.393bb9	20 9f 3f	jsr $393f9f	              JSR OPL2_GET_REG_OFFSET
.393bbc	e2 20		sep #$20	                SEP #$20        ; set A short
.393bbe	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393bc0	29 0f		and #$0f	              AND #$0F
.393bc2	6b		rtl		              RTL
.393bc3					OPL2_SET_MODFREQMULTIPLE
.393bc3	48		pha		                PHA             ; begin setdp macro
.393bc4	08		php		                PHP
.393bc5	c2 20		rep #$20	                REP #$20        ; set A long
.393bc7	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393bca	5b		tcd		                TCD
.393bcb	28		plp		                PLP
.393bcc	68		pla		                PLA             ; end setdp macro
.393bcd	c2 20		rep #$20	                REP #$20        ; set A long
.393bcf	a9 20 00	lda #$0020	                LDA #$0020;
.393bd2	85 28		sta $28		                STA OPL2_REG_REGION
.393bd4	20 9f 3f	jsr $393f9f	                JSR OPL2_GET_REG_OFFSET
.393bd7	e2 20		sep #$20	                SEP #$20        ; set A short
.393bd9	a5 32		lda $32		                LDA OPL2_PARAMETER0
.393bdb	29 0f		and #$0f	                AND #$0F
.393bdd	85 32		sta $32		                STA OPL2_PARAMETER0
.393bdf	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393be1	29 f0		and #$f0	                AND #$F0
.393be3	05 32		ora $32		                ORA OPL2_PARAMETER0
.393be5	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393be7	6b		rtl		                RTL
.393be8					OPL2_SET_SCALINGLEVEL
.393be8	48		pha		                PHA             ; begin setdp macro
.393be9	08		php		                PHP
.393bea	c2 20		rep #$20	                REP #$20        ; set A long
.393bec	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393bef	5b		tcd		                TCD
.393bf0	28		plp		                PLP
.393bf1	68		pla		                PLA             ; end setdp macro
.393bf2	c2 20		rep #$20	                REP #$20        ; set A long
.393bf4	a9 40 00	lda #$0040	                LDA #$0040;
.393bf7	85 28		sta $28		                STA OPL2_REG_REGION
.393bf9	20 9f 3f	jsr $393f9f	                JSR OPL2_GET_REG_OFFSET
.393bfc	e2 20		sep #$20	                SEP #$20        ; set A short
.393bfe	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393c00	29 03		and #$03	                AND #$03
.393c02	0a		asl a		                ASL
.393c03	0a		asl a		                ASL
.393c04	0a		asl a		                ASL
.393c05	0a		asl a		                ASL
.393c06	0a		asl a		                ASL
.393c07	0a		asl a		                ASL
.393c08	85 32		sta $32		                STA OPL2_PARAMETER0
.393c0a	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393c0c	29 3f		and #$3f	                AND #$3F
.393c0e	05 32		ora $32		                ORA OPL2_PARAMETER0
.393c10	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393c12	6b		rtl		                RTL
.393c13					OPL2_SET_VOLUME
.393c13	48		pha		                PHA             ; begin setdp macro
.393c14	08		php		                PHP
.393c15	c2 20		rep #$20	                REP #$20        ; set A long
.393c17	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c1a	5b		tcd		                TCD
.393c1b	28		plp		                PLP
.393c1c	68		pla		                PLA             ; end setdp macro
.393c1d	c2 20		rep #$20	                REP #$20        ; set A long
.393c1f	a9 40 00	lda #$0040	                LDA #$0040  ;
.393c22	85 28		sta $28		                STA OPL2_REG_REGION
.393c24	20 9f 3f	jsr $393f9f	                JSR OPL2_GET_REG_OFFSET
.393c27	e2 20		sep #$20	                SEP #$20        ; set A short
.393c29	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Volume
.393c2b	29 3f		and #$3f	                AND #$3F
.393c2d	85 32		sta $32		                STA OPL2_PARAMETER0
.393c2f	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393c31	29 c0		and #$c0	                AND #$C0
.393c33	05 32		ora $32		                ORA OPL2_PARAMETER0
.393c35	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393c37	6b		rtl		                RTL
.393c38					OPL2_GET_VOLUME
.393c38	48		pha		                PHA             ; begin setdp macro
.393c39	08		php		                PHP
.393c3a	c2 20		rep #$20	                REP #$20        ; set A long
.393c3c	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c3f	5b		tcd		                TCD
.393c40	28		plp		                PLP
.393c41	68		pla		                PLA             ; end setdp macro
.393c42	c2 20		rep #$20	                REP #$20        ; set A long
.393c44	a9 40 00	lda #$0040	                LDA #$0040  ;
.393c47	85 28		sta $28		                STA OPL2_REG_REGION
.393c49	20 9f 3f	jsr $393f9f	                JSR OPL2_GET_REG_OFFSET
.393c4c	e2 20		sep #$20	                SEP #$20        ; set A short
.393c4e	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393c50	29 3f		and #$3f	                AND #$3F
.393c52	6b		rtl		                RTL
.393c53					OPL2_SET_ATTACK
.393c53	48		pha		                PHA             ; begin setdp macro
.393c54	08		php		                PHP
.393c55	c2 20		rep #$20	                REP #$20        ; set A long
.393c57	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c5a	5b		tcd		                TCD
.393c5b	28		plp		                PLP
.393c5c	68		pla		                PLA             ; end setdp macro
.393c5d	c2 20		rep #$20	                REP #$20        ; set A long
.393c5f	a9 60 00	lda #$0060	                LDA #$0060  ;
.393c62	85 28		sta $28		                STA OPL2_REG_REGION
.393c64	20 9f 3f	jsr $393f9f	                JSR OPL2_GET_REG_OFFSET
.393c67	e2 20		sep #$20	                SEP #$20        ; set A short
.393c69	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393c6b	29 0f		and #$0f	                AND #$0F
.393c6d	0a		asl a		                ASL
.393c6e	0a		asl a		                ASL
.393c6f	0a		asl a		                ASL
.393c70	0a		asl a		                ASL
.393c71	85 32		sta $32		                STA OPL2_PARAMETER0
.393c73	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393c75	29 0f		and #$0f	                AND #$0F
.393c77	05 32		ora $32		                ORA OPL2_PARAMETER0
.393c79	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393c7b	6b		rtl		                RTL
.393c7c					OPL2_GET_ATTACK
.393c7c	48		pha		                PHA             ; begin setdp macro
.393c7d	08		php		                PHP
.393c7e	c2 20		rep #$20	                REP #$20        ; set A long
.393c80	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c83	5b		tcd		                TCD
.393c84	28		plp		                PLP
.393c85	68		pla		                PLA             ; end setdp macro
.393c86	c2 20		rep #$20	                REP #$20        ; set A long
.393c88	a9 60 00	lda #$0060	                LDA #$0060
.393c8b	85 28		sta $28		                STA OPL2_REG_REGION
.393c8d	20 9f 3f	jsr $393f9f	                JSR OPL2_GET_REG_OFFSET
.393c90	e2 20		sep #$20	                SEP #$20        ; set A short
.393c92	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393c94	29 f0		and #$f0	                AND #$F0
.393c96	4a		lsr a		                LSR
.393c97	4a		lsr a		                LSR
.393c98	4a		lsr a		                LSR
.393c99	4a		lsr a		                LSR
.393c9a	6b		rtl		                RTL
.393c9b					OPL2_SET_DECAY
.393c9b	48		pha		                PHA             ; begin setdp macro
.393c9c	08		php		                PHP
.393c9d	c2 20		rep #$20	                REP #$20        ; set A long
.393c9f	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393ca2	5b		tcd		                TCD
.393ca3	28		plp		                PLP
.393ca4	68		pla		                PLA             ; end setdp macro
.393ca5	c2 20		rep #$20	                REP #$20        ; set A long
.393ca7	a9 60 00	lda #$0060	                LDA #$0060;
.393caa	85 28		sta $28		                STA OPL2_REG_REGION
.393cac	20 9f 3f	jsr $393f9f	                JSR OPL2_GET_REG_OFFSET
.393caf	e2 20		sep #$20	                SEP #$20        ; set A short
.393cb1	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393cb3	29 0f		and #$0f	                AND #$0F
.393cb5	85 32		sta $32		                STA OPL2_PARAMETER0
.393cb7	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393cb9	29 f0		and #$f0	                AND #$F0
.393cbb	05 32		ora $32		                ORA OPL2_PARAMETER0
.393cbd	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393cbf	6b		rtl		                RTL
.393cc0					OPL2_GET_DECAY
.393cc0	48		pha		                PHA             ; begin setdp macro
.393cc1	08		php		                PHP
.393cc2	c2 20		rep #$20	                REP #$20        ; set A long
.393cc4	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393cc7	5b		tcd		                TCD
.393cc8	28		plp		                PLP
.393cc9	68		pla		                PLA             ; end setdp macro
.393cca	c2 20		rep #$20	                REP #$20        ; set A long
.393ccc	a9 60 00	lda #$0060	                LDA #$0060
.393ccf	85 28		sta $28		                STA OPL2_REG_REGION
.393cd1	20 9f 3f	jsr $393f9f	                JSR OPL2_GET_REG_OFFSET
.393cd4	e2 20		sep #$20	                SEP #$20        ; set A short
.393cd6	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393cd8	29 0f		and #$0f	                AND #$0F
.393cda	6b		rtl		                RTL
.393cdb					OPL2_SET_SUSTAIN
.393cdb	48		pha		                PHA             ; begin setdp macro
.393cdc	08		php		                PHP
.393cdd	c2 20		rep #$20	                REP #$20        ; set A long
.393cdf	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393ce2	5b		tcd		                TCD
.393ce3	28		plp		                PLP
.393ce4	68		pla		                PLA             ; end setdp macro
.393ce5	c2 20		rep #$20	                REP #$20        ; set A long
.393ce7	a9 80 00	lda #$0080	                LDA #$0080;
.393cea	85 28		sta $28		                STA OPL2_REG_REGION
.393cec	20 9f 3f	jsr $393f9f	                JSR OPL2_GET_REG_OFFSET
.393cef	e2 20		sep #$20	                SEP #$20        ; set A short
.393cf1	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393cf3	29 0f		and #$0f	                AND #$0F
.393cf5	0a		asl a		                ASL
.393cf6	0a		asl a		                ASL
.393cf7	0a		asl a		                ASL
.393cf8	0a		asl a		                ASL
.393cf9	85 32		sta $32		                STA OPL2_PARAMETER0
.393cfb	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393cfd	29 0f		and #$0f	                AND #$0F
.393cff	05 32		ora $32		                ORA OPL2_PARAMETER0
.393d01	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393d03	6b		rtl		                RTL
.393d04					OPL2_GET_SUSTAIN
.393d04	48		pha		                PHA             ; begin setdp macro
.393d05	08		php		                PHP
.393d06	c2 20		rep #$20	                REP #$20        ; set A long
.393d08	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d0b	5b		tcd		                TCD
.393d0c	28		plp		                PLP
.393d0d	68		pla		                PLA             ; end setdp macro
.393d0e	c2 20		rep #$20	                REP #$20        ; set A long
.393d10	a9 80 00	lda #$0080	                LDA #$0080
.393d13	85 28		sta $28		                STA OPL2_REG_REGION
.393d15	20 9f 3f	jsr $393f9f	                JSR OPL2_GET_REG_OFFSET
.393d18	e2 20		sep #$20	                SEP #$20        ; set A short
.393d1a	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d1c	29 f0		and #$f0	                AND #$F0
.393d1e	4a		lsr a		                LSR
.393d1f	4a		lsr a		                LSR
.393d20	4a		lsr a		                LSR
.393d21	4a		lsr a		                LSR
.393d22	6b		rtl		                RTL
.393d23					OPL2_SET_RELEASE
.393d23	48		pha		                PHA             ; begin setdp macro
.393d24	08		php		                PHP
.393d25	c2 20		rep #$20	                REP #$20        ; set A long
.393d27	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d2a	5b		tcd		                TCD
.393d2b	28		plp		                PLP
.393d2c	68		pla		                PLA             ; end setdp macro
.393d2d	c2 20		rep #$20	                REP #$20        ; set A long
.393d2f	a9 80 00	lda #$0080	                LDA #$0080;
.393d32	85 28		sta $28		                STA OPL2_REG_REGION
.393d34	20 9f 3f	jsr $393f9f	                JSR OPL2_GET_REG_OFFSET
.393d37	e2 20		sep #$20	                SEP #$20        ; set A short
.393d39	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393d3b	29 0f		and #$0f	                AND #$0F
.393d3d	85 32		sta $32		                STA OPL2_PARAMETER0
.393d3f	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d41	29 f0		and #$f0	                AND #$F0
.393d43	05 32		ora $32		                ORA OPL2_PARAMETER0
.393d45	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393d47	6b		rtl		                RTL
.393d48					OPL2_GET_RELEASE
.393d48	48		pha		                PHA             ; begin setdp macro
.393d49	08		php		                PHP
.393d4a	c2 20		rep #$20	                REP #$20        ; set A long
.393d4c	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d4f	5b		tcd		                TCD
.393d50	28		plp		                PLP
.393d51	68		pla		                PLA             ; end setdp macro
.393d52	c2 20		rep #$20	                REP #$20        ; set A long
.393d54	a9 80 00	lda #$0080	                LDA #$0080
.393d57	85 28		sta $28		                STA OPL2_REG_REGION
.393d59	20 9f 3f	jsr $393f9f	                JSR OPL2_GET_REG_OFFSET
.393d5c	e2 20		sep #$20	                SEP #$20        ; set A short
.393d5e	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d60	29 0f		and #$0f	                AND #$0F
.393d62	6b		rtl		                RTL
.393d63					OPL2_SET_FNUMBER
.393d63	48		pha		                PHA             ; begin setdp macro
.393d64	08		php		                PHP
.393d65	c2 20		rep #$20	                REP #$20        ; set A long
.393d67	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d6a	5b		tcd		                TCD
.393d6b	28		plp		                PLP
.393d6c	68		pla		                PLA             ; end setdp macro
.393d6d	e2 20		sep #$20	                SEP #$20        ; set A short
.393d6f	18		clc		                CLC
.393d70	a5 27		lda $27		                LDA OPL2_CHANNEL
.393d72	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393d74	69 a0		adc #$a0	                ADC #$A0
.393d76	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393d78	a9 00		lda #$00	                LDA #$00
.393d7a	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393d7c	c2 30		rep #$30	                REP #$30        ; set A&X long
.393d7e	18		clc		                CLC
.393d7f	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393d82	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393d84	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393d86	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393d89	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393d8b	e2 20		sep #$20	                SEP #$20        ; set A short
.393d8d	a5 32		lda $32		                LDA OPL2_PARAMETER0     ; Load the first 8 Bits Value of FNumber
.393d8f	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]  ; Load
.393d91	18		clc		                CLC
.393d92	a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.393d94	69 10		adc #$10	                ADC #$10
.393d96	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393d98	a5 33		lda $33		                LDA OPL2_PARAMETER1
.393d9a	29 03		and #$03	                AND #$03
.393d9c	85 33		sta $33		                STA OPL2_PARAMETER1
.393d9e	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393da0	29 fc		and #$fc	                AND #$FC
.393da2	05 33		ora $33		                ORA OPL2_PARAMETER1
.393da4	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393da6	6b		rtl		                RTL
.393da7					OPL2_GET_FNUMBER
.393da7	48		pha		                PHA             ; begin setdp macro
.393da8	08		php		                PHP
.393da9	c2 20		rep #$20	                REP #$20        ; set A long
.393dab	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393dae	5b		tcd		                TCD
.393daf	28		plp		                PLP
.393db0	68		pla		                PLA             ; end setdp macro
.393db1	e2 20		sep #$20	                SEP #$20        ; set A short
.393db3	18		clc		                CLC
.393db4	a5 27		lda $27		                LDA OPL2_CHANNEL
.393db6	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393db8	69 a0		adc #$a0	                ADC #$A0
.393dba	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393dbc	a9 00		lda #$00	                LDA #$00
.393dbe	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393dc0	c2 30		rep #$30	                REP #$30        ; set A&X long
.393dc2	18		clc		                CLC
.393dc3	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393dc6	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393dc8	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393dca	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393dcd	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393dcf	e2 20		sep #$20	                SEP #$20        ; set A short
.393dd1	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393dd3	85 32		sta $32		                STA OPL2_PARAMETER0
.393dd5	18		clc		                CLC
.393dd6	a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.393dd8	69 10		adc #$10	                ADC #$10
.393dda	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393ddc	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393dde	29 03		and #$03	                AND #$03
.393de0	85 33		sta $33		                STA OPL2_PARAMETER1
.393de2	6b		rtl		                RTL
.393de3					OPL2_Set_Frequency
.393de3	6b		rtl		                RTL
.393de4					OPL2_Get_Frequency
.393de4	6b		rtl		                RTL
.393de5					OPL2_SET_BLOCK
.393de5	48		pha		                PHA             ; begin setdp macro
.393de6	08		php		                PHP
.393de7	c2 20		rep #$20	                REP #$20        ; set A long
.393de9	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393dec	5b		tcd		                TCD
.393ded	28		plp		                PLP
.393dee	68		pla		                PLA             ; end setdp macro
.393def	e2 20		sep #$20	                SEP #$20        ; set A short
.393df1	18		clc		                CLC
.393df2	a5 27		lda $27		                LDA OPL2_CHANNEL
.393df4	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393df6	69 b0		adc #$b0	                ADC #$B0
.393df8	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393dfa	a9 00		lda #$00	                LDA #$00
.393dfc	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393dfe	c2 30		rep #$30	                REP #$30        ; set A&X long
.393e00	18		clc		                CLC
.393e01	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393e04	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393e06	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393e08	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393e0b	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393e0d	e2 20		sep #$20	                SEP #$20        ; set A short
.393e0f	a5 31		lda $31		                LDA OPL2_OCTAVE
.393e11	29 07		and #$07	                AND #$07
.393e13	0a		asl a		                ASL
.393e14	0a		asl a		                ASL
.393e15	85 31		sta $31		                STA OPL2_OCTAVE
.393e17	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393e19	29 e3		and #$e3	                AND #$E3
.393e1b	05 31		ora $31		                ORA OPL2_OCTAVE
.393e1d	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393e1f	60		rts		                RTS
.393e20					OPL2_SET_KEYON
.393e20	48		pha		                PHA             ; begin setdp macro
.393e21	08		php		                PHP
.393e22	c2 20		rep #$20	                REP #$20        ; set A long
.393e24	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393e27	5b		tcd		                TCD
.393e28	28		plp		                PLP
.393e29	68		pla		                PLA             ; end setdp macro
.393e2a	e2 20		sep #$20	                SEP #$20        ; set A short
.393e2c	18		clc		                CLC
.393e2d	a5 27		lda $27		                LDA OPL2_CHANNEL
.393e2f	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393e31	69 b0		adc #$b0	                ADC #$B0
.393e33	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393e35	a9 00		lda #$00	                LDA #$00
.393e37	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393e39	c2 30		rep #$30	                REP #$30        ; set A&X long
.393e3b	18		clc		                CLC
.393e3c	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393e3f	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393e41	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393e43	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393e46	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393e48	e2 20		sep #$20	                SEP #$20        ; set A short
.393e4a	a5 32		lda $32		                LDA OPL2_PARAMETER0
.393e4c	29 01		and #$01	                AND #$01
.393e4e	f0 02		beq $393e52	                BEQ SET_KEYON_OFF
.393e50	a9 20		lda #$20	                LDA #$20
.393e52					    SET_KEYON_OFF
.393e52	85 32		sta $32		                STA OPL2_PARAMETER0
.393e54	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393e56	29 df		and #$df	                AND #$DF
.393e58	05 32		ora $32		                ORA OPL2_PARAMETER0
.393e5a	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393e5c	60		rts		                RTS
.393e5d					OPL2_SET_FEEDBACK
.393e5d	48		pha		                PHA             ; begin setdp macro
.393e5e	08		php		                PHP
.393e5f	c2 20		rep #$20	                REP #$20        ; set A long
.393e61	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393e64	5b		tcd		                TCD
.393e65	28		plp		                PLP
.393e66	68		pla		                PLA             ; end setdp macro
.393e67	e2 20		sep #$20	                SEP #$20        ; set A short
.393e69	18		clc		              CLC
.393e6a	a5 27		lda $27		              LDA OPL2_CHANNEL
.393e6c	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393e6e	69 c0		adc #$c0	              ADC #$C0
.393e70	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393e72	a9 00		lda #$00	              LDA #$00
.393e74	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393e76	c2 30		rep #$30	                REP #$30        ; set A&X long
.393e78	18		clc		              CLC
.393e79	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393e7c	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393e7e	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393e80	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393e83	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393e85	e2 20		sep #$20	                SEP #$20        ; set A short
.393e87	a5 32		lda $32		              LDA OPL2_PARAMETER0
.393e89	29 07		and #$07	              AND #$07
.393e8b	0a		asl a		              ASL
.393e8c	85 32		sta $32		              STA OPL2_PARAMETER0
.393e8e	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393e90	29 01		and #$01	              AND #$01
.393e92	05 32		ora $32		              ORA OPL2_PARAMETER0
.393e94	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393e96	6b		rtl		                RTL
.393e97					OPL2_SET_SYNTHMODE
.393e97	48		pha		                PHA             ; begin setdp macro
.393e98	08		php		                PHP
.393e99	c2 20		rep #$20	                REP #$20        ; set A long
.393e9b	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393e9e	5b		tcd		                TCD
.393e9f	28		plp		                PLP
.393ea0	68		pla		                PLA             ; end setdp macro
.393ea1	08		php		              PHP ; Push the Carry
.393ea2	e2 20		sep #$20	                SEP #$20        ; set A short
.393ea4	18		clc		              CLC
.393ea5	a5 27		lda $27		              LDA OPL2_CHANNEL
.393ea7	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393ea9	69 c0		adc #$c0	              ADC #$C0
.393eab	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393ead	a9 00		lda #$00	              LDA #$00
.393eaf	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393eb1	c2 30		rep #$30	                REP #$30        ; set A&X long
.393eb3	18		clc		              CLC
.393eb4	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393eb7	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393eb9	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393ebb	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393ebe	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393ec0	28		plp		              PLP ; Pull the Carry out
.393ec1	e2 20		sep #$20	                SEP #$20        ; set A short
.393ec3	b0 08		bcs $393ecd	              BCS OPL2_Set_Synthmode_Set;
.393ec5	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393ec7	29 fe		and #$fe	              AND #$FE
.393ec9	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393ecb	80 06		bra $393ed3	              BRA OPL2_Set_Synthmode_Exit
.393ecd					OPL2_Set_Synthmode_Set
.393ecd	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393ecf	09 01		ora #$01	              ORA #$01
.393ed1	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393ed3					OPL2_Set_Synthmode_Exit
.393ed3	6b		rtl		                RTL
.393ed4					OPL2_SET_DEEPTREMOLO
.393ed4	48		pha		                PHA             ; begin setdp macro
.393ed5	08		php		                PHP
.393ed6	c2 20		rep #$20	                REP #$20        ; set A long
.393ed8	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393edb	5b		tcd		                TCD
.393edc	28		plp		                PLP
.393edd	68		pla		                PLA             ; end setdp macro
.393ede	c2 20		rep #$20	                REP #$20        ; set A long
.393ee0	a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.393ee3	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393ee5	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393ee8	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393eea	e2 20		sep #$20	                SEP #$20        ; set A short
.393eec	b0 08		bcs $393ef6	              BCS OPL2_Set_DeepTremolo_Set;
.393eee	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393ef0	29 7f		and #$7f	              AND #$7F
.393ef2	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393ef4	80 06		bra $393efc	              BRA OPL2_Set_DeepTremolo_Exit
.393ef6					OPL2_Set_DeepTremolo_Set
.393ef6	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393ef8	09 80		ora #$80	              ORA #$80
.393efa	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393efc					OPL2_Set_DeepTremolo_Exit
.393efc	6b		rtl		                RTL
.393efd					OPL2_SET_DEEPVIBRATO
.393efd	48		pha		                PHA             ; begin setdp macro
.393efe	08		php		                PHP
.393eff	c2 20		rep #$20	                REP #$20        ; set A long
.393f01	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393f04	5b		tcd		                TCD
.393f05	28		plp		                PLP
.393f06	68		pla		                PLA             ; end setdp macro
.393f07	c2 20		rep #$20	                REP #$20        ; set A long
.393f09	a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.393f0c	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393f0e	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393f11	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393f13	e2 20		sep #$20	                SEP #$20        ; set A short
.393f15	b0 08		bcs $393f1f	              BCS OPL2_Set_DeepVibrato_Set;
.393f17	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393f19	29 bf		and #$bf	              AND #$BF
.393f1b	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393f1d	80 06		bra $393f25	              BRA OPL2_Set_DeepVibrato_Exit
.393f1f					OPL2_Set_DeepVibrato_Set
.393f1f	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393f21	09 40		ora #$40	              ORA #$40
.393f23	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393f25					OPL2_Set_DeepVibrato_Exit
.393f25	6b		rtl		                RTL
.393f26					OPL2_SET_PERCUSSION
.393f26	48		pha		                PHA             ; begin setdp macro
.393f27	08		php		                PHP
.393f28	c2 20		rep #$20	                REP #$20        ; set A long
.393f2a	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393f2d	5b		tcd		                TCD
.393f2e	28		plp		                PLP
.393f2f	68		pla		                PLA             ; end setdp macro
.393f30	c2 20		rep #$20	                REP #$20        ; set A long
.393f32	a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.393f35	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393f37	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393f3a	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393f3c	e2 20		sep #$20	                SEP #$20        ; set A short
.393f3e	b0 08		bcs $393f48	                BCS OPL2_Set_Percussion_Set;
.393f40	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393f42	29 df		and #$df	                AND #$DF
.393f44	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393f46	80 06		bra $393f4e	                BRA OPL2_Set_Percussion_Exit
.393f48					OPL2_Set_Percussion_Set
.393f48	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393f4a	09 20		ora #$20	                ORA #$20
.393f4c	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393f4e					OPL2_Set_Percussion_Exit
.393f4e	6b		rtl		                RTL
.393f4f					OPL2_SET_DRUMS
.393f4f	48		pha		                PHA             ; begin setdp macro
.393f50	08		php		                PHP
.393f51	c2 20		rep #$20	                REP #$20        ; set A long
.393f53	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393f56	5b		tcd		                TCD
.393f57	28		plp		                PLP
.393f58	68		pla		                PLA             ; end setdp macro
.393f59	c2 20		rep #$20	                REP #$20        ; set A long
.393f5b	a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.393f5e	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393f60	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393f63	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393f65	e2 20		sep #$20	                SEP #$20        ; set A short
.393f67	a5 32		lda $32		                LDA OPL2_PARAMETER0
.393f69	29 1f		and #$1f	                AND #$1F
.393f6b	85 32		sta $32		                STA OPL2_PARAMETER0
.393f6d	49 ff		eor #$ff	                EOR #$FF
.393f6f	85 33		sta $33		                STA OPL2_PARAMETER1
.393f71	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393f73	25 33		and $33		                AND OPL2_PARAMETER1
.393f75	05 32		ora $32		                ORA OPL2_PARAMETER0
.393f77	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393f79	6b		rtl		                RTL
.393f7a					OPL2_SET_WAVEFORM
.393f7a	48		pha		                PHA             ; begin setdp macro
.393f7b	08		php		                PHP
.393f7c	c2 20		rep #$20	                REP #$20        ; set A long
.393f7e	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393f81	5b		tcd		                TCD
.393f82	28		plp		                PLP
.393f83	68		pla		                PLA             ; end setdp macro
.393f84	c2 20		rep #$20	                REP #$20        ; set A long
.393f86	a9 e0 00	lda #$00e0	                LDA #$00E0;
.393f89	85 28		sta $28		                STA OPL2_REG_REGION
.393f8b	20 9f 3f	jsr $393f9f	                JSR OPL2_GET_REG_OFFSET
.393f8e	e2 20		sep #$20	                SEP #$20        ; set A short
.393f90	a5 32		lda $32		                LDA OPL2_PARAMETER0
.393f92	29 03		and #$03	                AND #$03
.393f94	85 32		sta $32		                STA OPL2_PARAMETER0
.393f96	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393f98	29 fc		and #$fc	                AND #$FC
.393f9a	05 32		ora $32		                ORA OPL2_PARAMETER0
.393f9c	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393f9e	6b		rtl		                RTL
.393f9f					OPL2_GET_REG_OFFSET
.393f9f	e2 30		sep #$30	                SEP #$30        ; set A&X short
.393fa1	a5 27		lda $27		                LDA OPL2_CHANNEL
.393fa3	29 0f		and #$0f	                AND #$0F
.393fa5	aa		tax		                TAX
.393fa6	a5 26		lda $26		                LDA OPL2_OPERATOR   ; 0 = operator 1, other = operator 2
.393fa8	d0 06		bne $393fb0	                BNE OPL2_Get_Register_Offset_l0
.393faa	bf e7 15 39	lda $3915e7,x	                LDA @lregisterOffsets_operator0, X
.393fae	80 04		bra $393fb4	                BRA OPL2_Get_Register_Offset_exit
.393fb0					OPL2_Get_Register_Offset_l0
.393fb0	bf f0 15 39	lda $3915f0,x	                LDA @lregisterOffsets_operator1, X
.393fb4					OPL2_Get_Register_Offset_exit
.393fb4	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393fb6	a9 00		lda #$00	                LDA #$00
.393fb8	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393fba	c2 30		rep #$30	                REP #$30        ; set A&X long
.393fbc	18		clc		                CLC
.393fbd	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393fc0	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393fc2	65 28		adc $28		                ADC OPL2_REG_REGION ; Ex: $20, or $40, $60, $80 (in 16bits)
.393fc4	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393fc6	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393fc9	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393fcb	60		rts		                RTS

;******  Return to file: src\kernel.asm


;******  Processing file: src\sdcard_controller_def.asm

=$afea00				SDC_VERSION_REG         = $AFEA00    ; Ought to read 12
=$afea01				SDC_CONTROL_REG         = $AFEA01    ; Bit0 1 = Reset core logic, and registers. Self clearing
=$afea02				SDC_TRANS_TYPE_REG      = $AFEA02  ; Bit[1:0]
=$00					SDC_TRANS_DIRECT      = $00   ; 00 = Direct Access
=$01					SDC_TRANS_INIT_SD     = $01   ; 01 = Init SD
=$02					SDC_TRANS_READ_BLK    = $02   ; 10 = RW_READ_BLOCK (512 Bytes)
=$03					SDC_TRANS_WRITE_BLK   = $03   ; 11 = RW_WRITE_SD_BLOCK
=$afea03				SDC_TRANS_CONTROL_REG   = $AFEA03
=$01					SDC_TRANS_START         = $01
=$afea04				SDC_TRANS_STATUS_REG    = $AFEA04
=$01					SDC_TRANS_BUSY          = $01     ;  1= Transaction Busy
=$afea05				SDC_TRANS_ERROR_REG     = $AFEA05
=$00					SDC_TRANS_INIT_NO_ERR   = $00   ; Init Error Report [1:0]
=$01					SDC_TRANS_INIT_CMD0_ERR = $01
=$02					SDC_TRANS_INIT_CMD1_ERR = $02
=$00					SDC_TRANS_RD_NO_ERR     = $00   ; Read Error Report [3:2]
=$04					SDC_TRANS_RD_CMD_ERR    = $04
=$08					SDC_TRANS_RD_TOKEN_ERR  = $08
=$00					SDC_TRANS_WR_NO_ERR     = $00   ; Write Report Error  [5:4]
=$10					SDC_TRANS_WR_CMD_ERR    = $10   ;
=$20					SDC_TRANS_WR_DATA_ERR   = $20
=$30					SDC_TRANS_WR_BUSY_ERR   = $30
=$afea06				SDC_DIRECT_ACCESS_REG   = $AFEA06 ; SPI Direct Read and Write - Set DATA before initiating direct Access Transaction
=$afea07				SDC_SD_ADDR_7_0_REG     = $AFEA07 ; Set the ADDR before a block read or block write
=$afea08				SDC_SD_ADDR_15_8_REG    = $AFEA08 ; Addr0 [8:0] Always should be 0, since each block is 512Bytes
=$afea09				SDC_SD_ADDR_23_16_REG   = $AFEA09
=$afea0a				SDC_SD_ADDR_31_24_REG   = $AFEA0A
=$afea0b				SDC_SPI_CLK_DEL_REG     = $AFEA0B
=$afea10				SDC_RX_FIFO_DATA_REG    = $AFEA10 ; Data from the Block Read
=$afea12				SDC_RX_FIFO_DATA_CNT_HI = $AFEA12 ; How many Bytes in the FIFO HI
=$afea13				SDC_RX_FIFO_DATA_CNT_LO = $AFEA13 ; How many Bytes in the FIFO LO
=$afea14				SDC_RX_FIFO_CTRL_REG    = $AFEA14 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)
=$afea20				SDC_TX_FIFO_DATA_REG    = $AFEA20 ; Write Data Block here
=$afea24				SDC_TX_FIFO_CTRL_REG    = $AFEA24 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)

;******  Return to file: src\kernel.asm


;******  Processing file: src\sdos.asm


;******  Processing file: src\sdos_fat.asm


;******  Processing file: src\sdos_bios.asm

=$80					BIOS_TIMEOUT = $80              ; Flag to indicate if a time out has occurred (see ISETTIMEOUT)
=0					BIOS_DEV_FDC = 0                ; Floppy 0
=1					BIOS_DEV_FD1 = 1                ; Future support: Floppy 1 (not likely to be attached)
=2					BIOS_DEV_SD = 2                 ; SD card, partition 0
=3					BIOS_DEV_SD1 = 3                ; Future support: SD card, partition 1
=4					BIOS_DEV_SD2 = 4                ; Future support: SD card, partition 2
=5					BIOS_DEV_SD3 = 5                ; Future support: SD card, partition 3
=6					BIOS_DEV_HD0 = 6                ; Future support: IDE Drive 0, partition 0
=7					BIOS_DEV_HD1 = 7                ; Future support: IDE Drive 0, partition 1
=8					BIOS_DEV_HD2 = 8                ; Future support: IDE Drive 0, partition 2
=9					BIOS_DEV_HD3 = 9                ; Future support: IDE Drive 0, partition 3
=$80					BIOS_ERR_BADDEV = $80           ; BIOS bad device # error
=$81					BIOS_ERR_MOUNT = $81            ; BIOS failed to mount the device
=$82					BIOS_ERR_READ = $82             ; BIOS failed to read from a device
=$83					BIOS_ERR_WRITE = $83            ; BIOS failed to write to a device
=$84					BIOS_ERR_TRACK = $84            ; BIOS failed to seek to the correct track
=$85					BIOS_ERR_CMD = $85              ; A general block device command error
=$86					BIOS_ERR_WRITEPROT = $86        ; The media was write-protected
=$87					BIOS_ERR_NOMEDIA = $87          ; No media detected... unable to read/write in time
=$88					BIOS_ERR_RESULT = $88           ; Couldn't get the result bytes for some reason
=$89					BIOS_ERR_OOS = $89              ; FDC state is somehow out of sync with the driver.
=$8a					BIOS_ERR_NOTATA = $8A           ; IDE drive is not ATA
=$8b					BIOS_ERR_NOTINIT = $8B          ; Could not initilize the device
=$8c					BIOS_ERR_TIMEOUT = $8C          ; Timeout error
.393fcc					ITRACE
.393fcc	08		php		                PHP
.393fcd	c2 30		rep #$30	                REP #$30        ; set A&X long
.393fcf	8b		phb		                PHB                 ; Print the text
.393fd0	a3 06		lda $06,s	                LDA #6,S            ; Get bits[15..0] of string pointer
.393fd2	aa		tax		                TAX                 ; ... into X
.393fd3	e2 20		sep #$20	                SEP #$20        ; set A short
.393fd5	a3 08		lda $08,s	                LDA #8,S            ; Get bits[23..16] of string pointer
.393fd7	48		pha		                PHA
.393fd8	ab		plb		                PLB                 ; ... into B
.393fd9	22 c5 06 39	jsl $3906c5	                JSL IPUTS           ; Print the string
.393fdd	c2 20		rep #$20	                REP #$20        ; set A long
.393fdf	a3 04		lda $04,s	                LDA #4,S            ; Move P and return address down over the string pointer
.393fe1	83 08		sta $08,s	                STA #8,S
.393fe3	a3 02		lda $02,s	                LDA #2,S
.393fe5	83 06		sta $06,s	                STA #6,S
.393fe7	ab		plb		                PLB
.393fe8	68		pla		                PLA                 ; Clean up the stack
.393fe9	68		pla		                PLA
.393fea	28		plp		                PLP
.393feb	6b		rtl		                RTL
.393fec					ISETTIMEOUT
.393fec	8b		phb		                PHB
.393fed	0b		phd		                PHD
.393fee	08		php		                PHP
.393fef	48		pha		                PHA             ; begin setdbr macro
.393ff0	08		php		                PHP
.393ff1	e2 20		sep #$20	                SEP #$20        ; set A short
.393ff3	a9 00		lda #$00	                LDA #0
.393ff5	48		pha		                PHA
.393ff6	ab		plb		                PLB
.393ff7	28		plp		                PLP
.393ff8	68		pla		                PLA             ; end setdbr macro
.393ff9	48		pha		                PHA             ; begin setdp macro
.393ffa	08		php		                PHP
.393ffb	c2 20		rep #$20	                REP #$20        ; set A long
.393ffd	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394000	5b		tcd		                TCD
.394001	28		plp		                PLP
.394002	68		pla		                PLA             ; end setdp macro
.394003	78		sei		                SEI                             ; We don't want to be interrupted
.394004	e2 20		sep #$20	                SEP #$20        ; set A short
.394006	85 0d		sta $032d	                STA @b BIOS_TIMER               ; Set the number of ticks to wait
.394008	a5 0c		lda $032c	                LDA @b BIOS_FLAGS               ; Clear the BIOS_TIMEOUT flag
.39400a	29 7f		and #$7f	                AND #~BIOS_TIMEOUT
.39400c	85 0c		sta $032c	                STA @b BIOS_FLAGS
.39400e	28		plp		done            PLP
.39400f	2b		pld		                PLD
.394010	ab		plb		                PLB
.394011	6b		rtl		                RTL
.394012					ICMDBLOCK
.394012	0b		phd		                PHD
.394013	08		php		                PHP
.394014	48		pha		                PHA             ; begin setdp macro
.394015	08		php		                PHP
.394016	c2 20		rep #$20	                REP #$20        ; set A long
.394018	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39401b	5b		tcd		                TCD
.39401c	28		plp		                PLP
.39401d	68		pla		                PLA             ; end setdp macro
.39401e	e2 20		sep #$20	                SEP #$20        ; set A short
.394020	a5 01		lda $0321	                LDA BIOS_DEV                ; Get the device number
.394022	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Check to see if we're sending to the floppy
.394024	d0 06		bne $39402c	                BNE ret_success             ; No: just return
.394026	22 12 67 39	jsl $396712	                JSL FDC_CMDBLOCK            ; Yes: call upon the floppy code
.39402a	90 0c		bcc $394038	                BCC pass_failure
.39402c					ret_success
.39402c	e2 20		sep #$20	                SEP #$20        ; set A short
.39402e	64 00		stz $0320	                STZ BIOS_STATUS
.394030	28		plp		                PLP
.394031	2b		pld		                PLD
.394032	38		sec		                SEC
.394033	6b		rtl		                RTL
.394034					ret_failure
.394034	e2 20		sep #$20	                SEP #$20        ; set A short
.394036	85 00		sta $0320	                STA BIOS_STATUS
.394038	28		plp		pass_failure    PLP
.394039	2b		pld		                PLD
.39403a	18		clc		                CLC
.39403b	6b		rtl		                RTL
.39403c					IGETBLOCK
.39403c	0b		phd		                PHD
.39403d	8b		phb		                PHB
.39403e	08		php		                PHP
.39403f	48		pha		                PHA             ; begin setdbr macro
.394040	08		php		                PHP
.394041	e2 20		sep #$20	                SEP #$20        ; set A short
.394043	a9 00		lda #$00	                LDA #0
.394045	48		pha		                PHA
.394046	ab		plb		                PLB
.394047	28		plp		                PLP
.394048	68		pla		                PLA             ; end setdbr macro
.394049	48		pha		                PHA             ; begin setdp macro
.39404a	08		php		                PHP
.39404b	c2 20		rep #$20	                REP #$20        ; set A long
.39404d	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394050	5b		tcd		                TCD
.394051	28		plp		                PLP
.394052	68		pla		                PLA             ; end setdp macro
.394053	e2 20		sep #$20	                SEP #$20        ; set A short
.394055	a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.394057	c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.394059	f0 13		beq $39406e	                BEQ sd_getblock                     ; Yes: go to the SDC GETBLOCK routine
.39405b	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the floppy drive?
.39405d	f0 17		beq $394076	                BEQ fd_getblock                     ; Yes: go to the FDC GETBLOCK routine
.39405f	c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.394061	f0 1b		beq $39407e	                BEQ hd_getblock
.394063	a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.394065					ret_failure
.394065	e2 20		sep #$20	                SEP #$20        ; set A short
.394067	85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.394069	28		plp		                PLP
.39406a	ab		plb		                PLB
.39406b	2b		pld		                PLD
.39406c	38		sec		                SEC                                 ; Return failure
.39406d	6b		rtl		                RTL
.39406e	22 3c 5c 39	jsl $395c3c	sd_getblock     JSL SDC_GETBLOCK                    ; Call the SDC GETBLOCK routine
.394072	b0 12		bcs $394086	                BCS ret_success
.394074	80 ef		bra $394065	                BRA ret_failure
.394076	22 1b 65 39	jsl $39651b	fd_getblock     JSL FDC_GETBLOCK                    ; Call the FDC GETBLOCK routine
.39407a	b0 0a		bcs $394086	                BCS ret_success
.39407c	80 e7		bra $394065	                BRA ret_failure
.39407e	22 d3 6a 39	jsl $396ad3	hd_getblock     JSL IDE_GETBLOCK                    ; Call the IDE GETBLOCK routine
.394082	b0 02		bcs $394086	                BCS ret_success
.394084	80 df		bra $394065	                BRA ret_failure
.394086					ret_success
.394086	e2 20		sep #$20	                SEP #$20        ; set A short
.394088	64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.39408a	28		plp		                PLP
.39408b	ab		plb		                PLB
.39408c	2b		pld		                PLD
.39408d	38		sec		                SEC                                 ; Return success
.39408e	6b		rtl		                RTL
.39408f					IPUTBLOCK
.39408f	0b		phd		                PHD
.394090	8b		phb		                PHB
.394091	08		php		                PHP
.394092	48		pha		                PHA             ; begin setdbr macro
.394093	08		php		                PHP
.394094	e2 20		sep #$20	                SEP #$20        ; set A short
.394096	a9 00		lda #$00	                LDA #0
.394098	48		pha		                PHA
.394099	ab		plb		                PLB
.39409a	28		plp		                PLP
.39409b	68		pla		                PLA             ; end setdbr macro
.39409c	48		pha		                PHA             ; begin setdp macro
.39409d	08		php		                PHP
.39409e	c2 20		rep #$20	                REP #$20        ; set A long
.3940a0	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3940a3	5b		tcd		                TCD
.3940a4	28		plp		                PLP
.3940a5	68		pla		                PLA             ; end setdp macro
.3940a6	e2 20		sep #$20	                SEP #$20        ; set A short
.3940a8	a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.3940aa	c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.3940ac	f0 13		beq $3940c1	                BEQ sd_putblock                     ; Yes: go to the SDC PUTBLOCK routine
.3940ae	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the FDC?
.3940b0	f0 17		beq $3940c9	                BEQ fd_putblock                     ; Yes: go to the FDC PUTBLOCK routine
.3940b2	c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.3940b4	f0 1b		beq $3940d1	                BEQ hd_putblock
.3940b6	a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.3940b8					ret_failure
.3940b8	e2 20		sep #$20	                SEP #$20        ; set A short
.3940ba	85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.3940bc	28		plp		                PLP
.3940bd	ab		plb		                PLB
.3940be	2b		pld		                PLD
.3940bf	18		clc		                CLC                                 ; Return failure
.3940c0	6b		rtl		                RTL
.3940c1	22 dc 5c 39	jsl $395cdc	sd_putblock     JSL SDC_PUTBLOCK                    ; Call the SDC PUTBLOCK routine
.3940c5	90 f1		bcc $3940b8	                BCC ret_failure
.3940c7	80 10		bra $3940d9	                BRA ret_success
.3940c9	22 80 65 39	jsl $396580	fd_putblock     JSL FDC_PUTBLOCK                    ; Call the FDC PUTBLOCK routine
.3940cd	90 e9		bcc $3940b8	                BCC ret_failure
.3940cf	80 08		bra $3940d9	                BRA ret_success
.3940d1	22 64 6b 39	jsl $396b64	hd_putblock     JSL IDE_PUTBLOCK                    ; Call the IDE PUTBLOCK routine
.3940d5	90 e1		bcc $3940b8	                BCC ret_failure
.3940d7	80 00		bra $3940d9	                BRA ret_success
.3940d9					ret_success
.3940d9	e2 20		sep #$20	                SEP #$20        ; set A short
.3940db	64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.3940dd	28		plp		                PLP
.3940de	ab		plb		                PLB
.3940df	2b		pld		                PLD
.3940e0	38		sec		                SEC                                 ; Return success
.3940e1	6b		rtl		                RTL

;******  Return to file: src\sdos_fat.asm


;******  Processing file: src\sdos_dir.asm

.3940e2					DOS_DIROPEN
.3940e2	da		phx		                PHX
.3940e3	5a		phy		                PHY
.3940e4	0b		phd		                PHD
.3940e5	8b		phb		                PHB
.3940e6	08		php		                PHP
.3940e7	48		pha		                PHA             ; begin setdbr macro
.3940e8	08		php		                PHP
.3940e9	e2 20		sep #$20	                SEP #$20        ; set A short
.3940eb	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3940ed	48		pha		                PHA
.3940ee	ab		plb		                PLB
.3940ef	28		plp		                PLP
.3940f0	68		pla		                PLA             ; end setdbr macro
.3940f1	48		pha		                PHA             ; begin setdp macro
.3940f2	08		php		                PHP
.3940f3	c2 20		rep #$20	                REP #$20        ; set A long
.3940f5	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3940f8	5b		tcd		                TCD
.3940f9	28		plp		                PLP
.3940fa	68		pla		                PLA             ; end setdp macro
.3940fb	ad 20 a0	lda $38a020	                LDA ROOT_DIR_FIRST_CLUSTER  ; Set the cluster (or sector for FAT12)
.3940fe	8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID        ; to that of the root directory's start
.394101	ad 22 a0	lda $38a022	                LDA ROOT_DIR_FIRST_CLUSTER+2
.394104	8d 34 a0	sta $38a034	                STA DOS_DIR_BLOCK_ID+2
.394107	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Point to the directory cluster buffer for loading
.39410a	85 1c		sta $033c	                STA DOS_BUFF_PTR
.39410c	85 18		sta $0338	                STA DOS_DIR_PTR
.39410e	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.394111	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394113	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.394115	e2 20		sep #$20	                SEP #$20        ; set A short
.394117	ad 01 a0	lda $38a001	                LDA FILE_SYSTEM             ; Check the file system
.39411a	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12        ; Is it FAT12?
.39411c	d0 24		bne $394142	                BNE fetch_fat32             ; No: handle processing the diretory as FAT32
.39411e					fetch_fat12
.39411e	e2 20		sep #$20	                SEP #$20        ; set A short
.394120	a9 00		lda #$00	                LDA #DOS_DIR_TYPE_FAT12ROOT ; Set the directory type to FAT12 root directory
.394122	8d 45 a0	sta $38a045	                STA DOS_DIR_TYPE
.394125	c2 20		rep #$20	                REP #$20        ; set A long
.394127	a5 18		lda $0338	                LDA DOS_DIR_PTR             ; Set the BIOS buffer pointer
.394129	85 06		sta $0326	                STA BIOS_BUFF_PTR
.39412b	a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.39412d	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.39412f	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA of the sector
.394132	85 02		sta $0322	                STA BIOS_LBA
.394134	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.394137	85 04		sta $0324	                STA BIOS_LBA+2
.394139	22 44 10 38	jsl $381044	                JSL GETBLOCK                ; Get the sector from the FAT12 device
.39413d	b0 1f		bcs $39415e	                BCS do_success              ; If sucessful, set the directory cursor
.39413f	82 80 16	brl $3957c2	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.394142					fetch_fat32
.394142	e2 20		sep #$20	                SEP #$20        ; set A short
.394144	a9 01		lda #$01	                LDA #DOS_DIR_TYPE_FILE      ; Set the directory type to file type (all FAT32, any FAT12 subdirectory)
.394146	8d 45 a0	sta $38a045	                STA DOS_DIR_TYPE
.394149	c2 20		rep #$20	                REP #$20        ; set A long
.39414b	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID
.39414e	85 10		sta $0330	                STA DOS_CLUS_ID
.394150	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.394153	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394155	22 71 46 39	jsl $394671	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.394159	b0 03		bcs $39415e	                BCS do_success              ; If successful: set the directory cursor
.39415b	82 64 16	brl $3957c2	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.39415e	82 68 16	brl $3957c9	do_success      BRL IF_SUCCESS
.394161					DOS_DIRFIRST
.394161	0b		phd		                PHD
.394162	08		php		                PHP
.394163	48		pha		                PHA             ; begin setdp macro
.394164	08		php		                PHP
.394165	c2 20		rep #$20	                REP #$20        ; set A long
.394167	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39416a	5b		tcd		                TCD
.39416b	28		plp		                PLP
.39416c	68		pla		                PLA             ; end setdp macro
.39416d	c2 20		rep #$20	                REP #$20        ; set A long
.39416f	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER
.394172	85 18		sta $0338	                STA DOS_DIR_PTR
.394174	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.394177	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.394179	28		plp		                PLP
.39417a	2b		pld		                PLD
.39417b	6b		rtl		                RTL
.39417c					DOS_DIRNEXT
.39417c	da		phx		                PHX
.39417d	5a		phy		                PHY
.39417e	0b		phd		                PHD
.39417f	8b		phb		                PHB
.394180	08		php		                PHP
.394181	48		pha		                PHA             ; begin setdbr macro
.394182	08		php		                PHP
.394183	e2 20		sep #$20	                SEP #$20        ; set A short
.394185	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394187	48		pha		                PHA
.394188	ab		plb		                PLB
.394189	28		plp		                PLP
.39418a	68		pla		                PLA             ; end setdbr macro
.39418b	48		pha		                PHA             ; begin setdp macro
.39418c	08		php		                PHP
.39418d	c2 20		rep #$20	                REP #$20        ; set A long
.39418f	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394192	5b		tcd		                TCD
.394193	28		plp		                PLP
.394194	68		pla		                PLA             ; end setdp macro
.394195	c2 20		rep #$20	                REP #$20        ; set A long
.394197	18		clc		                CLC                         ; Advance the directory entry pointer to the next entry
.394198	a5 18		lda $0338	                LDA DOS_DIR_PTR
.39419a	69 20 00	adc #$0020	                ADC #DOS_DIR_ENTRY_SIZE
.39419d	85 18		sta $0338	                STA DOS_DIR_PTR
.39419f	a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.3941a1	69 00 00	adc #$0000	                ADC #0
.3941a4	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.3941a6	38		sec		                SEC                         ; Check to see if we've reached the end of the sector buffer
.3941a7	a9 00 a3	lda #$a300	                LDA #<>DOS_DIR_CLUSTER_END
.3941aa	e5 18		sbc $0338	                SBC DOS_DIR_PTR
.3941ac	85 28		sta $0348	                STA DOS_TEMP
.3941ae	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER_END
.3941b1	e5 1a		sbc $033a	                SBC DOS_DIR_PTR+2
.3941b3	85 2a		sta $034a	                STA DOS_TEMP+2
.3941b5	30 0c		bmi $3941c3	                BMI get_next_block          ; Yes: try to fetch the next directory entry
.3941b7	f0 03		beq $3941bc	                BEQ check_lower
.3941b9	82 0d 16	brl $3957c9	                BRL IF_SUCCESS
.3941bc	a5 28		lda $0348	check_lower     LDA DOS_TEMP
.3941be	f0 03		beq $3941c3	                BEQ get_next_block
.3941c0	82 06 16	brl $3957c9	                BRL IF_SUCCESS
.3941c3					get_next_block
.3941c3	e2 20		sep #$20	                SEP #$20        ; set A short
.3941c5	ad 45 a0	lda $38a045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.3941c8	c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE
.3941ca	f0 38		beq $394204	                BEQ next_cluster            ; FILE TYPE: it's cluster based (FAT32, or FAT12 non-root)
.3941cc					next_sector
.3941cc	c2 20		rep #$20	                REP #$20        ; set A long
.3941ce	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID
.3941d1	1a		inc a		                INC A
.3941d2	8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID        ; Increment the sector number (FAT12 root directory is sector based)
.3941d5	c9 0a 00	cmp #$000a	                CMP #10                     ; See if we're at the end (TODO: calculate this)
.3941d8	d0 07		bne $3941e1	                BNE read_sector
.3941da	e2 20		sep #$20	                SEP #$20        ; set A short
.3941dc	a9 00		lda #$00	                LDA #0
.3941de	82 dd 15	brl $3957be	                BRL IF_FAILURE
.3941e1					read_sector
.3941e1	c2 20		rep #$20	                REP #$20        ; set A long
.3941e3	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA to the sector #
.3941e6	85 02		sta $0322	                STA BIOS_LBA
.3941e8	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.3941eb	85 04		sta $0324	                STA BIOS_LBA+2
.3941ed	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointers to the buffer
.3941f0	85 06		sta $0326	                STA BIOS_BUFF_PTR
.3941f2	85 18		sta $0338	                STA DOS_DIR_PTR
.3941f4	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.3941f7	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3941f9	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.3941fb	22 44 10 38	jsl $381044	                JSL GETBLOCK                ; Attempt to read the sector from the FAT12 device
.3941ff	b0 39		bcs $39423a	                BCS do_success              ; If successful: set the directory cursor
.394201	82 be 15	brl $3957c2	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.394204					next_cluster
.394204	c2 20		rep #$20	                REP #$20        ; set A long
.394206	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Get the current block (cluster) ID
.394209	85 10		sta $0330	                STA DOS_CLUS_ID
.39420b	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.39420e	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394210	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER
.394213	85 1c		sta $033c	                STA DOS_BUFF_PTR
.394215	85 18		sta $0338	                STA DOS_DIR_PTR
.394217	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.39421a	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.39421c	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.39421e	22 7c 4a 39	jsl $394a7c	                JSL NEXTCLUSTER             ; Try to find the next cluster
.394222	b0 03		bcs $394227	                BCS set_next
.394224	82 9b 15	brl $3957c2	                BRL IF_PASSFAILURE          ; If error: pass it up the chain
.394227	a5 10		lda $0330	set_next        LDA DOS_CLUS_ID             ; Save the cluster as the current directory cluster
.394229	8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID
.39422c	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.39422e	8d 34 a0	sta $38a034	                STA DOS_DIR_BLOCK_ID+2
.394231	22 71 46 39	jsl $394671	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.394235	b0 03		bcs $39423a	                BCS do_success              ; If successful: set the directory cursor
.394237	82 88 15	brl $3957c2	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.39423a	82 8c 15	brl $3957c9	do_success      BRL IF_SUCCESS
.39423d					DOS_DIRFINDFREE
.39423d	da		phx		                PHX
.39423e	5a		phy		                PHY
.39423f	0b		phd		                PHD
.394240	8b		phb		                PHB
.394241	08		php		                PHP
.394242	48		pha		                PHA             ; begin setdbr macro
.394243	08		php		                PHP
.394244	e2 20		sep #$20	                SEP #$20        ; set A short
.394246	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394248	48		pha		                PHA
.394249	ab		plb		                PLB
.39424a	28		plp		                PLP
.39424b	68		pla		                PLA             ; end setdbr macro
.39424c	48		pha		                PHA             ; begin setdp macro
.39424d	08		php		                PHP
.39424e	c2 20		rep #$20	                REP #$20        ; set A long
.394250	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394253	5b		tcd		                TCD
.394254	28		plp		                PLP
.394255	68		pla		                PLA             ; end setdp macro
.394256	22 5a 54 39	jsl $39545a	                JSL IF_DIROPEN
.39425a	b0 06		bcs $394262	                BCS start_walk
.39425c	a9 08 00	lda #$0008	                LDA #DOS_ERR_NODIR          ; Return that we could not read the directory
.39425f	82 28 00	brl $39428a	                BRL ret_failure
.394262	a0 00 00	ldy #$0000	start_walk      LDY #0                      ; We check the first character of the entry
.394265					chk_entry
.394265	e2 20		sep #$20	                SEP #$20        ; set A short
.394267	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the first byte of the directory entry
.394269	f0 1c		beq $394287	                BEQ ret_success             ; If 0: we have a blank... return it
.39426b	c9 e5		cmp #$e5	                CMP #DOS_DIR_ENT_UNUSED     ; Is it an unused (deleted) entry?
.39426d	f0 18		beq $394287	                BEQ ret_success             ; Yes: return it
.39426f	22 94 54 39	jsl $395494	                JSL IF_DIRNEXT              ; Go to the next directory entry
.394273	b0 ed		bcs $394262	                BCS start_walk              ; If we got one, start walking it
.394275	22 8d 42 39	jsl $39428d	                JSL DOS_DIRAPPEND           ; If there isn't one, create a blank cluster
.394279	90 0f		bcc $39428a	                BCC ret_failure             ; If that didn't work, return the failure
.39427b	c2 20		rep #$20	                REP #$20        ; set A long
.39427d	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Return the first entry
.394280	85 18		sta $0338	                STA DOS_DIR_PTR
.394282	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.394285	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.394287	82 3f 15	brl $3957c9	ret_success     BRL IF_SUCCESS
.39428a	82 31 15	brl $3957be	ret_failure     BRL IF_FAILURE
.39428d					DOS_DIRAPPEND
.39428d	da		phx		                PHX
.39428e	8b		phb		                PHB
.39428f	0b		phd		                PHD
.394290	08		php		                PHP
.394291	48		pha		                PHA             ; begin setdbr macro
.394292	08		php		                PHP
.394293	e2 20		sep #$20	                SEP #$20        ; set A short
.394295	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394297	48		pha		                PHA
.394298	ab		plb		                PLB
.394299	28		plp		                PLP
.39429a	68		pla		                PLA             ; end setdbr macro
.39429b	48		pha		                PHA             ; begin setdp macro
.39429c	08		php		                PHP
.39429d	c2 20		rep #$20	                REP #$20        ; set A long
.39429f	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3942a2	5b		tcd		                TCD
.3942a3	28		plp		                PLP
.3942a4	68		pla		                PLA             ; end setdp macro
.3942a5	e2 20		sep #$20	                SEP #$20        ; set A short
.3942a7	ad 45 a0	lda $38a045	                LDA DOS_DIR_TYPE
.3942aa	c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE          ; Are we looking at a file type directory
.3942ac	f0 09		beq $3942b7	                BEQ clr_sector                  ; Yes: clear out the directory data
.3942ae					ret_failure
.3942ae	e2 20		sep #$20	                SEP #$20        ; set A short
.3942b0	a9 15		lda #$15	                LDA #DOS_ERR_DIRFULL            ; No: return a directory-full error
.3942b2	85 0e		sta $032e	                STA DOS_STATUS
.3942b4	82 3e 00	brl $3942f5	                BRL pass_failure
.3942b7					clr_sector
.3942b7	c2 20		rep #$20	                REP #$20        ; set A long
.3942b9	a9 00 00	lda #$0000	                LDA #0
.3942bc	a2 00 00	ldx #$0000	                LDX #0
.3942bf	9d 00 a1	sta $38a100,x	clr_loop        STA DOS_DIR_CLUSTER,X           ; Clear the directory cluster
.3942c2	e8		inx		                INX
.3942c3	e8		inx		                INX
.3942c4	e0 00 02	cpx #$0200	                CPX #512
.3942c7	d0 f6		bne $3942bf	                BNE clr_loop
.3942c9	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER          ; Point to the new, blank directory data
.3942cc	85 1c		sta $033c	                STA DOS_BUFF_PTR
.3942ce	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.3942d1	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3942d3	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID            ; We want to append it to the current directory
.3942d6	85 10		sta $0330	                STA DOS_CLUS_ID
.3942d8	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.3942db	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3942dd	22 70 4e 39	jsl $394e70	                JSL DOS_APPENDCLUS              ; Attempt to append the blank data as a new cluster
.3942e1	90 12		bcc $3942f5	                BCC pass_failure                ; If there was an error, pass it up the chain
.3942e3	ad 36 a0	lda $38a036	                LDA DOS_NEW_CLUSTER             ; Set the block ID of the new directory cluster
.3942e6	8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID
.3942e9	ad 38 a0	lda $38a038	                LDA DOS_NEW_CLUSTER+2
.3942ec	8d 34 a0	sta $38a034	                STA DOS_DIR_BLOCK_ID+2
.3942ef	28		plp		ret_success     PLP
.3942f0	2b		pld		                PLD
.3942f1	ab		plb		                PLB
.3942f2	fa		plx		                PLX
.3942f3	38		sec		                SEC
.3942f4	6b		rtl		                RTL
.3942f5	28		plp		pass_failure    PLP
.3942f6	2b		pld		                PLD
.3942f7	ab		plb		                PLB
.3942f8	fa		plx		                PLX
.3942f9	18		clc		                CLC
.3942fa	6b		rtl		                RTL
.3942fb					DOS_DIRWRITE
.3942fb	da		phx		                PHX
.3942fc	5a		phy		                PHY
.3942fd	0b		phd		                PHD
.3942fe	8b		phb		                PHB
.3942ff	08		php		                PHP
.394300	48		pha		                PHA             ; begin setdbr macro
.394301	08		php		                PHP
.394302	e2 20		sep #$20	                SEP #$20        ; set A short
.394304	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394306	48		pha		                PHA
.394307	ab		plb		                PLB
.394308	28		plp		                PLP
.394309	68		pla		                PLA             ; end setdbr macro
.39430a	48		pha		                PHA             ; begin setdp macro
.39430b	08		php		                PHP
.39430c	c2 20		rep #$20	                REP #$20        ; set A long
.39430e	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394311	5b		tcd		                TCD
.394312	28		plp		                PLP
.394313	68		pla		                PLA             ; end setdp macro
.394314	e2 20		sep #$20	                SEP #$20        ; set A short
.394316	ad 45 a0	lda $38a045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.394319	c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE      ; Is it a file type directory (FAT32 or FAT12 non-root?)
.39431b	f0 1f		beq $39433c	                BEQ write_cluster           ; Yes: write it back using a cluster ID
.39431d					write_sector
.39431d	c2 20		rep #$20	                REP #$20        ; set A long
.39431f	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the BIOS_LBA to the LBA of the sector
.394322	85 02		sta $0322	                STA BIOS_LBA
.394324	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.394327	85 04		sta $0324	                STA BIOS_LBA+2
.394329	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.39432c	85 06		sta $0326	                STA BIOS_BUFF_PTR
.39432e	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.394331	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394333	22 24 10 38	jsl $381024	                JSL PUTBLOCK                ; Try to write the sector to disk
.394337	b0 1f		bcs $394358	                BCS ret_success
.394339	82 82 14	brl $3957be	ret_failure     BRL IF_FAILURE
.39433c					write_cluster
.39433c	c2 20		rep #$20	                REP #$20        ; set A long
.39433e	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the DOS_CLUS_ID to the ID of the cluster
.394341	85 10		sta $0330	                STA DOS_CLUS_ID
.394343	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.394346	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394348	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.39434b	85 1c		sta $033c	                STA DOS_BUFF_PTR
.39434d	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.394350	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394352	22 ae 46 39	jsl $3946ae	                JSL DOS_PUTCLUSTER          ; Try to write the cluster to disk
.394356	90 e1		bcc $394339	                BCC ret_failure
.394358	82 6e 14	brl $3957c9	ret_success     BRL IF_SUCCESS

;******  Return to file: src\sdos_fat.asm

.0000					DEVICE_DESC
>0000					DEVNAME         .dword ?            ; A pointer to the ASCIIZ name of the device
>0004					DEVNUMBER       .byte ?           ; The BIOS_DEV number for the device
>0005					NEXT            .dword ?            ; A pointer to the next device descriptor
.0000					DIRENTRY
>0000					SHORTNAME               .fill 11        ; $00 - The short name of the file (8 name, 3 extension)
>000b					ATTRIBUTE               .byte ?         ; $0B - The attribute bits
>000c					IGNORED1                .word ?         ; $0C - Unused (by us) bytes
>000e					CREATE_TIME             .word ?         ; $0E - Creation time
>0010					CREATE_DATE             .word ?         ; $10 - Creation date
>0012					ACCESS_DATE             .word ?         ; $12 - Last access date
>0014					CLUSTER_H               .word ?         ; $14 - High word of the first cluster #
>0016					MODIFIED_TIME           .word ?         ; $16 - Last modified time
>0018					MODIFIED_DATE           .word ?         ; $18 - Last modified date
>001a					CLUSTER_L               .word ?         ; $1A - Low word of the first cluster #
>001c					SIZE                    .dword ?        ; $1C - The size of the file (in bytes)
=$01					DOS_ATTR_RO = $01                       ; File is read-only
=$02					DOS_ATTR_HIDDEN = $02                   ; File is hidden
=$04					DOS_ATTR_SYSTEM = $04                   ; File is a system file
=$08					DOS_ATTR_VOLUME = $08                   ; Entry is the volume label
=$10					DOS_ATTR_DIR = $10                      ; Entry is a directory
=$20					DOS_ATTR_ARCH = $20                     ; Entry has changed since last backup
=$0f					DOS_ATTR_LONGNAME = $0F                 ; Entry is the long file name
.0000					FILEDESC
>0000					STATUS              .byte ?             ; The status flags of the file descriptor (open, closed, error, EOF, etc.)
>0001					DEV                 .byte ?             ; The ID of the device holding the file
>0002					PATH                .dword ?            ; Pointer to a NULL terminated path string
>0006					CLUSTER             .dword ?            ; The current cluster of the file.
>000a					FIRST_CLUSTER       .dword ?            ; The ID of the first cluster in the file
>000e					BUFFER              .dword ?            ; Pointer to a cluster-sized buffer
>0012					SIZE                .dword ?            ; The size of the file
>0016					CREATE_DATE         .word ?             ; The creation date of the file
>0018					CREATE_TIME         .word ?             ; The creation time of the file
>001a					MODIFIED_DATE       .word ?             ; The modification date of the file
>001c					MODIFIED_TIME       .word ?             ; The modification time of the file
>001e					RESERVED            .word ?             ; Two reserved bytes to bring the descriptor up to 32 bytes
=$01					FD_STAT_READ = $01                      ; The file is readable
=$02					FD_STAT_WRITE = $02                     ; The file is writable
=$10					FD_STAT_ALLOC = $10                     ; The file descriptor has been allocated
=$38					FD_STAT_OPEN = $38                      ; The file is open
=$40					FD_STAT_ERROR = $40                     ; The file is in an error condition
=$80					FD_STAT_EOF = $80                       ; The file cursor is at the end of the file
=$0fffffff				FAT_LAST_CLUSTER = $0FFFFFFF            ; Code to mark the last cluster of a file
=1					VOLUMEMAX = 1                           ; The maximum number of mounted volumes we support
=32					DOS_DIR_ENTRY_SIZE = 32                 ; The size of a directory entry
=512					DOS_SECTOR_SIZE = 512                   ; The size of a sector
=$e5					DOS_DIR_ENT_UNUSED = $E5                ; Marker for an unused directory entry
=$00					PART_TYPE_FAT12 = $00                   ; "Partition" type: FAT12, used for floppy disks
=$0c					PART_TYPE_FAT32_LBA = $0C               ; Patition type: FAT32 with LBA addressing
=$29					BPB_EXTENDED_RECORD = $29               ; If SIGNATUREB of the BPB has this byte, the volume label is valid
=0					DOS_DIR_TYPE_FAT12ROOT = 0              ; Directory is a FAT12 root directory
=1					DOS_DIR_TYPE_FILE = 1                   ; Directory is a file type directory
=8					DOS_FD_MAX = 8                          ; The maximum number of open file descriptors
=1					DOS_ERR_READ = 1                        ; We could not read a sector, check BIOS_STATUS for details
=2					DOS_ERR_NOTMBR = 2                      ; We could not find the MBR
=3					DOS_ERR_NOFAT32 = 3                     ; We could not find a FAT32 parition using LBA
=4					DOS_ERR_NOINIT = 4                      ; We could not INIT the block device
=5					DOS_ERR_VOLID = 5                       ; Volume ID sector could not be loaded
=6					DOS_ERR_FAT = 6                         ; Can't scan the FAT for some reason
=7					DOS_ERR_BADPATH = 7                     ; The path was badly formatted
=8					DOS_ERR_NODIR = 8                       ; Could not read the directory
=9					DOS_ERR_NOTFOUND = 9                    ; File/directory requested was not found
=10					DOS_ERR_NOCLUSTER = 10                  ; There are no more clusters
=11					DOS_ERR_FILEEXISTS = 11                 ; There is already a file of that name
=12					DOS_ERR_NOTOPEN = 12                    ; File has not been open
=13					DOS_ERR_NOTREAD = 13                    ; File is not open for reading
=14					DOS_ERR_NOTWRITE = 14                   ; File is not open for writing
=15					DOS_ERR_OPEN = 15                       ; File is already open
=16					DOS_ERR_PGXSIG = 16                     ; File does not have the PGX signature
=17					DOS_ERR_NOEXEC = 17                     ; File does is not an executable format
=18					DOS_ERR_MEDIAFULL = 18                  ; There are no more free clusters on the drive
=19					DOS_ERR_WRITEPROT = 19                  ; The medium is write-protected
=20					DOS_ERR_FATUPDATE = 20                  ; Can't update the FAT
=21					DOS_ERR_DIRFULL = 21                    ; The directory is full
=22					DOS_ERR_NOFD = 22                       ; No file descriptors are available for allocation
=446					PART0_OFF = 446                         ; Offset to the first partition in the MBR
=4					PART_TYPE_OFF = 4                       ; Offset to the partition's type
=8					PART_LBA_OFF = 8                        ; Offset to the LBA of the first sector of the partition
=13					PART_SECT_COUNT_OFF = 13                ; Offset to the sector count of the partition
=510					MBR_SIGNATURE = 510                     ; The offset to the MBR signature bytes
=11					BPB_BYTEPERSEC_OFF = 11                 ; Offset in the BPB sector to the Bytes Per Sector
=13					BPB_SECPERCLUS_OFF = 13                 ; Offset in the BPB sector to the Sectors Per Cluster
=14					BPB_RSRVCLUS_OFF = 14                   ; Offset in the BPB sector to the Number of Reserved Clusters
=16					BPB_NUMFAT_OFF = 16                     ; Offset in the BPB sector to the Number of FATs
=17					BPB_ROOT_MAX_ENTRY_OFF = 17             ; Offset in the BPB sector to the Maximum # of entries in the root directory (FAT12)
=19					BPB_TOTAL_SECTORS = 19                  ; Offset in the BPB sector to the number of sectors on the partition or disk (FAT12)
=$24					BPB_SECPERFAT_OFF = $24                 ; Offset in the BPB sector to the Sectors Per FAT
=38					BPB_SIGNATUREB = 38                     ; Offset in the BPB sector to the second signature byte
=39					BPB_VOLUMEID = 39                       ; Offset in the BPB sector to the volume ID
=$2c					BPB_ROOTCLUS_OFF = $2C                  ; Offset in the BPB sector to the Root Cluster Number
=510					BPB_SIGNATURE = 510                     ; The offset to the MBR signature bytes
=$38a000				DOS_HIGH_VARIABLES      = $38A000
=$38a000				DEVICE                  = $38A000       ; 1 byte - The number of the block device
=$38a001				FILE_SYSTEM             = $38A001       ; 1 byte - The type of filesystem (FAT12, FAT32, etc.)
=$38a002				PARTITION               = $38A002       ; 1 byte - The number of the partitions on the device
=$38a003				SECTORS_PER_CLUSTER     = $38A003       ; 1 byte - The number of sectors in a cluster
=$38a004				FIRSTSECTOR             = $38A004       ; 4 bytes - The LBA of the first sector on the volume
=$38a008				SECTORCOUNT             = $38A008       ; 4 bytes - The number of sectors in the volume
=$38a00c				NUM_RSRV_SEC            = $38A00C       ; 2 bytes - The number of hidden or reserved sectors
=$38a00e				CLUSTER_SIZE            = $38A00E       ; 2 bytes - The size of a cluster in bytes
=$38a010				SEC_PER_FAT             = $38A010       ; 4 bytes - The number of sectors per FAT
=$38a014				FAT_BEGIN_LBA           = $38A014       ; 4 bytes - The LBA of the first sector of FAT #1
=$38a018				FAT2_BEGIN_LBA          = $38A018       ; 4 bytes - The LBA of the first sector of FAT #2
=$38a01c				CLUSTER_BEGIN_LBA       = $38A01C       ; 4 bytes - The LBA of the first cluster in the storage area
=$38a020				ROOT_DIR_FIRST_CLUSTER  = $38A020       ; 4 bytes - The number of the first cluster in the root directory
=$38a024				ROOT_DIR_MAX_ENTRY      = $38A024       ; 2 bytes - The maximum number of entries in the root directory (0 = no limit)
=$38a026				VOLUME_ID               = $38A026       ; 4 bytes - The ID of the volume
=$38a02a				DOS_CURR_CLUS           = $38A02A       ; 4 bytes - The current cluster (for delete)
=$38a02e				DOS_NEXT_CLUS           = $38A02E       ; 4 bytes - The next cluster in a file (for delete)
=$38a032				DOS_DIR_BLOCK_ID        = $38A032       ; 4 bytes - The ID of the current directory block
=$38a036				DOS_NEW_CLUSTER         = $38A036       ; 4 bytes - Space to store a newly written cluster ID
=$38a03a				DOS_SHORT_NAME          = $38A03A       ; 11 bytes - The short name for a desired file
=$38a045				DOS_DIR_TYPE            = $38A045       ; 1 byte - a code indicating the type of the current directory (0 = cluster based, $80 = sector based)
=$38a046				DOS_CURR_DIR_ID         = $38A046       ; 4 byte - the ID of the first sector or cluster of the current directory
=$38a04a				DOS_DEV_NAMES           = $38A04A       ; 4 byte - pointer to the linked list of device names
=$38a04e				FDC_MOTOR_TIMER         = $38A04E       ; 2 bytes - count-down timer to automatically turn off the FDC spindle motor
=$38a050				DOS_MOUNT_DEV           = $38A050       ; 1 byte - the device code of the currently mounted device
=$38a100				DOS_DIR_CLUSTER         = $38A100       ; 512 bytes - A buffer for directory entries
=$38a300				DOS_DIR_CLUSTER_END     = $38A300       ; The byte just past the end of the directory cluster buffer
=$38a300				DOS_SECTOR              = $38A300       ; 512 bytes - A buffer for block device read/write
=$38a500				DOS_SECTOR_END          = $38A500       ; The byte just past the end of the cluster buffer
=$38a500				DOS_FAT_SECTORS         = $38A500       ; 1024 bytes - two sectors worth of the FAT
=$38a900				DOS_FAT_SECTORS_END     = $38A900       ; The byte just past the end of the FAT buffers
=$38a900				DOS_BOOT_SECTOR         = $38A900       ; A sector for holding the boot sector
=$38ab00				DOS_BOOT_SECTOR_END     = $38AB00
=$38ab00				DOS_SPARE_SECTOR        = $38AB00       ; A spare 512 byte buffer for loading sectors
=$38ad00				DOS_SPARE_SECTOR_END    = $38AD00
=$38ad00				DOS_SPARE_FD            = $38AD00       ; A spare file descriptor buffer
=3714336				DOS_SPARE_FD_END        = DOS_SPARE_FD + SIZE(FILEDESC)
=3714336				DOS_FILE_DESCS          = DOS_SPARE_FD_END
=3714592				DOS_FILE_DESCS_END      = DOS_FILE_DESCS + SIZE(FILEDESC) * DOS_FD_MAX
=$38b000				DOS_FILE_BUFFS          = $38B000
=3719168				DOS_FILE_BUFFS_END      = DOS_FILE_BUFFS + DOS_SECTOR_SIZE * DOS_FD_MAX
.39435b					DOS_INIT
.39435b	8b		phb		                PHB
.39435c	0b		phd		                PHD
.39435d	08		php		                PHP
.39435e	48		pha		                PHA             ; begin setdbr macro
.39435f	08		php		                PHP
.394360	e2 20		sep #$20	                SEP #$20        ; set A short
.394362	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394364	48		pha		                PHA
.394365	ab		plb		                PLB
.394366	28		plp		                PLP
.394367	68		pla		                PLA             ; end setdbr macro
.394368	48		pha		                PHA             ; begin setdp macro
.394369	08		php		                PHP
.39436a	c2 20		rep #$20	                REP #$20        ; set A long
.39436c	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39436f	5b		tcd		                TCD
.394370	28		plp		                PLP
.394371	68		pla		                PLA             ; end setdp macro
.394372	c2 20		rep #$20	                REP #$20        ; set A long
.394374	a9 06 47	lda #$4706	                LDA #<>DOS_HD_DESC      ; Initialize the device names list
.394377	8f 4a a0 38	sta $38a04a	                STA @l DOS_DEV_NAMES
.39437b	a9 39 00	lda #$0039	                LDA #`DOS_HD_DESC
.39437e	8f 4c a0 38	sta $38a04c	                STA @l DOS_DEV_NAMES+2
.394382	e2 20		sep #$20	                SEP #$20        ; set A short
.394384	a9 02		lda #$02	                LDA #BIOS_DEV_SD        ; Default to the SD card
.394386	85 01		sta $0321	                STA BIOS_DEV
.394388	a9 ff		lda #$ff	                LDA #$FF                ; Set the mounted device to a sentinel value
.39438a	8f 50 a0 38	sta $38a050	                STA @l DOS_MOUNT_DEV
.39438e	a9 00		lda #$00	                LDA #0
.394390	a2 00 00	ldx #$0000	                LDX #0
.394393	9d 20 ad	sta $38ad20,x	fd_zero_loop    STA @w DOS_FILE_DESCS,X
.394396	e8		inx		                INX
.394397	e0 00 01	cpx #$0100	                CPX #(DOS_FILE_DESCS_END - DOS_FILE_DESCS)
.39439a	d0 f7		bne $394393	                BNE fd_zero_loop
.39439c	a9 00		lda #$00	                LDA #0
.39439e	a2 00 00	ldx #$0000	                LDX #0
.3943a1	9d 00 b0	sta $38b000,x	sect_zero_loop  STA @w DOS_FILE_BUFFS,X
.3943a4	e8		inx		                INX
.3943a5	e0 00 10	cpx #$1000	                CPX #(DOS_FILE_BUFFS_END - DOS_FILE_BUFFS)
.3943a8	d0 f7		bne $3943a1	                BNE sect_zero_loop
.3943aa	c2 20		rep #$20	                REP #$20        ; set A long
.3943ac	a9 20 ad	lda #$ad20	                LDA #<>DOS_FILE_DESCS   ; Initialize a pointer to the file descriptors
.3943af	85 20		sta $0340	                STA @b DOS_FD_PTR
.3943b1	a9 38 00	lda #$0038	                LDA #`DOS_FILE_DESCS
.3943b4	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.3943b6	a9 00 b0	lda #$b000	                LDA #<>DOS_FILE_BUFFS   ; Initialize a pointer to the sector buffers
.3943b9	85 28		sta $0348	                STA @b DOS_TEMP
.3943bb	a9 38 00	lda #$0038	                LDA #`DOS_FILE_BUFFS
.3943be	85 2a		sta $034a	                STA @b DOS_TEMP+2
.3943c0	a2 08 00	ldx #$0008	                LDX #DOS_FD_MAX         ; Set how many file descriptors to update
.3943c3	a0 0e 00	ldy #$000e	fd_buff_loop    LDY #FILEDESC.BUFFER    ; Set the file descriptor's buffer pointer
.3943c6	a5 28		lda $0348	                LDA @b DOS_TEMP
.3943c8	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3943ca	c8		iny		                INY
.3943cb	c8		iny		                INY
.3943cc	a5 2a		lda $034a	                LDA @b DOS_TEMP+2
.3943ce	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3943d0	18		clc		                CLC                     ; Advance the file descriptor pointer to the next file descriptor
.3943d1	a5 20		lda $0340	                LDA @b DOS_FD_PTR
.3943d3	69 20 00	adc #$0020	                ADC #SIZE(FILEDESC)
.3943d6	85 20		sta $0340	                STA @b DOS_FD_PTR
.3943d8	a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.3943da	69 00 00	adc #$0000	                ADC #0
.3943dd	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.3943df	18		clc		                CLC                     ; Advance the sector buffer pointer to the next buffer
.3943e0	a5 28		lda $0348	                LDA @b DOS_TEMP
.3943e2	69 00 02	adc #$0200	                ADC #DOS_SECTOR_SIZE
.3943e5	85 28		sta $0348	                STA @b DOS_TEMP
.3943e7	a5 2a		lda $034a	                LDA @b DOS_TEMP+2
.3943e9	69 00 00	adc #$0000	                ADC #0
.3943ec	85 2a		sta $034a	                STA @b DOS_TEMP+2
.3943ee	ca		dex		                DEX                     ; Count down the descriptors...
.3943ef	d0 d2		bne $3943c3	                BNE fd_buff_loop        ; If not zero, keep setting the buffer pointers
.3943f1	28		plp		                PLP
.3943f2	2b		pld		                PLD
.3943f3	ab		plb		                PLB
.3943f4	6b		rtl		                RTL
.3943f5					DOS_MOUNT
.3943f5	8b		phb		                PHB
.3943f6	0b		phd		                PHD
.3943f7	08		php		                PHP
.3943f8	48		pha		                PHA             ; begin setdbr macro
.3943f9	08		php		                PHP
.3943fa	e2 20		sep #$20	                SEP #$20        ; set A short
.3943fc	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3943fe	48		pha		                PHA
.3943ff	ab		plb		                PLB
.394400	28		plp		                PLP
.394401	68		pla		                PLA             ; end setdbr macro
.394402	48		pha		                PHA             ; begin setdp macro
.394403	08		php		                PHP
.394404	c2 20		rep #$20	                REP #$20        ; set A long
.394406	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394409	5b		tcd		                TCD
.39440a	28		plp		                PLP
.39440b	68		pla		                PLA             ; end setdp macro
.39440c	e2 20		sep #$20	                SEP #$20        ; set A short
.39440e	a5 01		lda $0321	                LDA BIOS_DEV            ; Get the device to moount
.394410	cf 50 a0 38	cmp $38a050	                CMP @l DOS_MOUNT_DEV    ; Is it already mounted?
.394414	d0 03		bne $394419	                BNE try_mount           ; No: try to moount it
.394416	82 69 01	brl $394582	                BRL ret_success         ; Yes: just return success
.394419	8f 50 a0 38	sta $38a050	try_mount       STA @l DOS_MOUNT_DEV    ; Save the device we're going to try to mount
.39441d	c9 02		cmp #$02	                CMP #BIOS_DEV_SD        ; Is it the SDC?
.39441f	f0 1f		beq $394440	                BEQ do_sdc_mount        ; Yes: attempt to mount it
.394421	c9 06		cmp #$06	                CMP #BIOS_DEV_HD0       ; Is it HD0?
.394423	f0 26		beq $39444b	                BEQ do_ide_mount        ; Yes: attempt to mount the IDE drive
.394425	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC       ; Is it the FDC?
.394427	f0 0b		beq $394434	                BEQ do_fdc_mount        ; Yes: attempt to mount it
.394429	a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return a bad device error
.39442b	85 0e		sta $032e	                STA DOS_STATUS
.39442d	a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV
.39442f	85 00		sta $0320	                STA BIOS_STATUS
.394431	82 57 01	brl $39458b	                BRL ret_failure
.394434	22 ec 65 39	jsl $3965ec	do_fdc_mount    JSL FDC_MOUNT           ; Attempt to mount the floppy disk
.394438	b0 03		bcs $39443d	                BCS fdc_success
.39443a	82 4e 01	brl $39458b	                BRL ret_failure
.39443d	82 42 01	brl $394582	fdc_success     BRL ret_success
.394440	22 fa 5b 39	jsl $395bfa	do_sdc_mount    JSL SDC_INIT            ; Yes: Initialize access to the SDC
.394444	b0 10		bcs $394456	                BCS get_mbr             ; Continue if success
.394446	a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.394448	82 40 01	brl $39458b	                BRL ret_failure
.39444b	22 de 69 39	jsl $3969de	do_ide_mount    JSL IDE_INIT            ; Yes: Initialize access to the IDE drive
.39444f	b0 05		bcs $394456	                BCS get_mbr             ; Continue if success
.394451	a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.394453	82 35 01	brl $39458b	                BRL ret_failure
.394456					get_mbr
.394456	c2 30		rep #$30	                REP #$30        ; set A&X long
.394458	64 02		stz $0322	                STZ BIOS_LBA            ; Get the MBR
.39445a	64 04		stz $0324	                STZ BIOS_LBA+2
.39445c	a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR       ; Into DOS_SECTOR
.39445f	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394461	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.394464	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394466	22 44 10 38	jsl $381044	                JSL GETBLOCK            ; Try to read the MBR
.39446a	b0 07		bcs $394473	                BCS chk_signature       ; If success, check the signature bytes
.39446c	e2 20		sep #$20	                SEP #$20        ; set A short
.39446e	a9 01		lda #$01	                LDA #DOS_ERR_READ       ; Otherwise: report we couldn't read the first sector
.394470	82 18 01	brl $39458b	                BRL ret_failure
.394473					chk_signature
.394473	e2 20		sep #$20	                SEP #$20        ; set A short
.394475	ad fe a4	lda $38a4fe	                LDA DOS_SECTOR+MBR_SIGNATURE
.394478	c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.39447a	d0 07		bne $394483	                BNE not_mbr             ; No: signal we could find the MBR
.39447c	ad ff a4	lda $38a4ff	                LDA DOS_SECTOR+MBR_SIGNATURE+1
.39447f	c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.394481	f0 05		beq $394488	                BEQ chk_part_type       ; Yes: we have an MBR
.394483	a9 02		lda #$02	not_mbr         LDA #DOS_ERR_NOTMBR     ; Return that we didn't find the MBR
.394485	82 03 01	brl $39458b	                BRL ret_failure
.394488	ad c2 a4	lda $38a4c2	chk_part_type   LDA DOS_SECTOR+PART0_OFF+PART_TYPE_OFF
.39448b	c9 0c		cmp #$0c	                CMP #PART_TYPE_FAT32_LBA
.39448d	f0 05		beq $394494	                BEQ get_LBA             ; Is FAT32 with LBA?
.39448f	a9 03		lda #$03	                LDA #DOS_ERR_NOFAT32    ; No: return No FAT32 found error
.394491	82 f7 00	brl $39458b	                BRL ret_failure
.394494	8d 01 a0	sta $38a001	get_LBA         STA FILE_SYSTEM         ; Save the file system of the partition
.394497	c2 20		rep #$20	                REP #$20        ; set A long
.394499	ad c6 a4	lda $38a4c6	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF
.39449c	8d 04 a0	sta $38a004	                STA FIRSTSECTOR
.39449f	ad c8 a4	lda $38a4c8	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF+2
.3944a2	8d 06 a0	sta $38a006	                STA FIRSTSECTOR+2
.3944a5	ad cb a4	lda $38a4cb	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF
.3944a8	8d 08 a0	sta $38a008	                STA SECTORCOUNT
.3944ab	ad cd a4	lda $38a4cd	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF+2
.3944ae	8d 0a a0	sta $38a00a	                STA SECTORCOUNT+2
.3944b1	e2 20		sep #$20	                SEP #$20        ; set A short
.3944b3	a5 01		lda $0321	                LDA BIOS_DEV            ; Save the device number
.3944b5	8d 00 a0	sta $38a000	                STA DEVICE
.3944b8	a9 00		lda #$00	                LDA #0
.3944ba	8d 02 a0	sta $38a002	                STA PARTITION           ; For the moment, we only support the first partition
.3944bd	c2 20		rep #$20	                REP #$20        ; set A long
.3944bf	a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.3944c2	85 06		sta $0326	                STA BIOS_BUFF_PTR
.3944c4	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.3944c7	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3944c9	ad 04 a0	lda $38a004	                LDA FIRSTSECTOR
.3944cc	85 02		sta $0322	                STA BIOS_LBA
.3944ce	ad 06 a0	lda $38a006	                LDA FIRSTSECTOR+2
.3944d1	85 04		sta $0324	                STA BIOS_LBA+2
.3944d3	22 44 10 38	jsl $381044	                JSL GETBLOCK            ; Attempt to load the volume ID
.3944d7	b0 1c		bcs $3944f5	                BCS get_first_sec       ; Got it? Start parsing it
.3944d9	e2 20		sep #$20	                SEP #$20        ; set A short
.3944db	a9 05		lda #$05	                LDA #DOS_ERR_VOLID      ; Otherwise: return an error
.3944dd	82 ab 00	brl $39458b	                BRL ret_failure
.3944e0					chk_bpb_sig
.3944e0	e2 20		sep #$20	                SEP #$20        ; set A short
.3944e2	ad fe a4	lda $38a4fe	                LDA DOS_SECTOR+BPB_SIGNATURE
.3944e5	c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.3944e7	d0 07		bne $3944f0	                BNE not_bpb             ; No: signal we could find the volume ID
.3944e9	ad ff a4	lda $38a4ff	                LDA DOS_SECTOR+BPB_SIGNATURE+1
.3944ec	c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.3944ee	f0 05		beq $3944f5	                BEQ get_first_sec       ; Yes: we have an volume ID
.3944f0	a9 05		lda #$05	not_bpb         LDA #DOS_ERR_VOLID      ; Return that we didn't find the Volume ID (BPB)
.3944f2	82 96 00	brl $39458b	                BRL ret_failure
.3944f5					get_first_sec
.3944f5	c2 20		rep #$20	                REP #$20        ; set A long
.3944f7	ad 2c a3	lda $38a32c	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF
.3944fa	8d 20 a0	sta $38a020	                STA ROOT_DIR_FIRST_CLUSTER
.3944fd	ad 2e a3	lda $38a32e	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF+2
.394500	8d 22 a0	sta $38a022	                STA ROOT_DIR_FIRST_CLUSTER+2
.394503	ad 0e a3	lda $38a30e	                LDA DOS_SECTOR+BPB_RSRVCLUS_OFF
.394506	8d 0c a0	sta $38a00c	                STA NUM_RSRV_SEC
.394509	18		clc		                CLC                     ; fat_begin_lba := FirstSector + Number_of_Reserved_Sectors
.39450a	ad 04 a0	lda $38a004	                LDA FIRSTSECTOR
.39450d	6d 0c a0	adc $38a00c	                ADC NUM_RSRV_SEC
.394510	8d 14 a0	sta $38a014	                STA FAT_BEGIN_LBA
.394513	ad 06 a0	lda $38a006	                LDA FIRSTSECTOR+2
.394516	69 00 00	adc #$0000	                ADC #0
.394519	8d 16 a0	sta $38a016	                STA FAT_BEGIN_LBA+2
.39451c	e2 20		sep #$20	                SEP #$20        ; set A short
.39451e	a2 00 00	ldx #$0000	                LDX #0
.394521	bf 24 a3 38	lda $38a324,x	cpy_secperfat   LDA @l DOS_SECTOR+BPB_SECPERFAT_OFF,X
.394525	9f 10 a0 38	sta $38a010,x	                STA @l SEC_PER_FAT,X
.394529	e8		inx		                INX
.39452a	e0 04 00	cpx #$0004	                CPX #4
.39452d	d0 f2		bne $394521	                BNE cpy_secperfat
.39452f	ad 10 a0	lda $38a010	                LDA SEC_PER_FAT
.394532	0a		asl a		                ASL A
.394533	8d 1c a0	sta $38a01c	                STA CLUSTER_BEGIN_LBA
.394536	ad 11 a0	lda $38a011	                LDA SEC_PER_FAT+1
.394539	2a		rol a		                ROL A
.39453a	8d 1d a0	sta $38a01d	                STA CLUSTER_BEGIN_LBA+1
.39453d	ad 12 a0	lda $38a012	                LDA SEC_PER_FAT+2
.394540	2a		rol a		                ROL A
.394541	8d 1e a0	sta $38a01e	                STA CLUSTER_BEGIN_LBA+2
.394544	ad 13 a0	lda $38a013	                LDA SEC_PER_FAT+3
.394547	2a		rol a		                ROL A
.394548	8d 1f a0	sta $38a01f	                STA CLUSTER_BEGIN_LBA+3
.39454b	18		clc		                CLC
.39454c	ad 1c a0	lda $38a01c	                LDA CLUSTER_BEGIN_LBA
.39454f	6d 14 a0	adc $38a014	                ADC FAT_BEGIN_LBA
.394552	8d 1c a0	sta $38a01c	                STA CLUSTER_BEGIN_LBA
.394555	ad 1d a0	lda $38a01d	                LDA CLUSTER_BEGIN_LBA+1
.394558	6d 15 a0	adc $38a015	                ADC FAT_BEGIN_LBA+1
.39455b	8d 1d a0	sta $38a01d	                STA CLUSTER_BEGIN_LBA+1
.39455e	ad 1e a0	lda $38a01e	                LDA CLUSTER_BEGIN_LBA+2
.394561	6d 16 a0	adc $38a016	                ADC FAT_BEGIN_LBA+2
.394564	8d 1e a0	sta $38a01e	                STA CLUSTER_BEGIN_LBA+2
.394567	ad 1f a0	lda $38a01f	                LDA CLUSTER_BEGIN_LBA+3
.39456a	6d 17 a0	adc $38a017	                ADC FAT_BEGIN_LBA+3
.39456d	8d 1f a0	sta $38a01f	                STA CLUSTER_BEGIN_LBA+3
.394570	e2 20		sep #$20	                SEP #$20        ; set A short
.394572	ad 0d a3	lda $38a30d	                LDA DOS_SECTOR+BPB_SECPERCLUS_OFF
.394575	8d 03 a0	sta $38a003	                STA SECTORS_PER_CLUSTER
.394578	a9 00		lda #$00	                LDA #<DOS_SECTOR_SIZE                   ; Default to one sector's worth of bytes
.39457a	8d 0e a0	sta $38a00e	                STA CLUSTER_SIZE
.39457d	a9 02		lda #$02	                LDA #>DOS_SECTOR_SIZE
.39457f	8d 0f a0	sta $38a00f	                STA CLUSTER_SIZE+1
.394582					ret_success
.394582	e2 20		sep #$20	                SEP #$20        ; set A short
.394584	64 0e		stz $032e	                STZ DOS_STATUS          ; Set status code to 0
.394586	28		plp		                PLP
.394587	2b		pld		                PLD
.394588	ab		plb		                PLB
.394589	38		sec		                SEC
.39458a	6b		rtl		                RTL
.39458b					ret_failure
.39458b	e2 20		sep #$20	                SEP #$20        ; set A short
.39458d	85 0e		sta $032e	                STA DOS_STATUS          ; Save the status code
.39458f	28		plp		                PLP
.394590	2b		pld		                PLD
.394591	ab		plb		                PLB
.394592	18		clc		                CLC
.394593	6b		rtl		                RTL
.394594					DOS_TESTBOOT
.394594	8b		phb		                PHB
.394595	0b		phd		                PHD
.394596	da		phx		                PHX
.394597	08		php		                PHP
.394598	48		pha		                PHA             ; begin setdbr macro
.394599	08		php		                PHP
.39459a	e2 20		sep #$20	                SEP #$20        ; set A short
.39459c	a9 00		lda #$00	                LDA #0
.39459e	48		pha		                PHA
.39459f	ab		plb		                PLB
.3945a0	28		plp		                PLP
.3945a1	68		pla		                PLA             ; end setdbr macro
.3945a2	48		pha		                PHA             ; begin setdp macro
.3945a3	08		php		                PHP
.3945a4	c2 20		rep #$20	                REP #$20        ; set A long
.3945a6	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3945a9	5b		tcd		                TCD
.3945aa	28		plp		                PLP
.3945ab	68		pla		                PLA             ; end setdp macro
.3945ac	c2 10		rep #$10	                REP #$10        ; set X long
.3945ae					chk_dev
.3945ae	e2 20		sep #$20	                SEP #$20        ; set A short
.3945b0	a5 01		lda $0321	                LDA @b BIOS_DEV             ; Look at the device #
.3945b2	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Is it the floppy drive?
.3945b4	f0 24		beq $3945da	                BEQ chk_vbr_brl             ; Yes: check if BRL is in the right place in the VBR
.3945b6	c2 30		rep #$30	                REP #$30        ; set A&X long
.3945b8	a9 00 00	lda #$0000	                LDA #0                      ; Point to the MBR
.3945bb	85 02		sta $0322	                STA @b BIOS_LBA
.3945bd	85 04		sta $0324	                STA @b BIOS_LBA+2
.3945bf	a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR           ; And the buffer
.3945c2	85 06		sta $0326	                STA @b BIOS_BUFF_PTR
.3945c4	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.3945c7	85 08		sta $0328	                STA @b BIOS_BUFF_PTR+2
.3945c9	22 44 10 38	jsl $381044	                JSL GETBLOCK                ; Try to load the MBR
.3945cd	b0 03		bcs $3945d2	                BCS chk_mbr_brl
.3945cf	82 47 00	brl $394619	                BRL done                    ; If failed... just return
.3945d2					chk_mbr_brl
.3945d2	e2 20		sep #$20	                SEP #$20        ; set A short
.3945d4	af 00 a3 38	lda $38a300	                LDA @l DOS_SECTOR           ; Check the first byte of the MBR
.3945d8	80 04		bra $3945de	                BRA chk_brl
.3945da	af 3e a3 38	lda $38a33e	chk_vbr_brl     LDA @l DOS_SECTOR+FDC_BOOT_START
.3945de	c9 80		cmp #$80	chk_brl         CMP #$80                    ; Is the first byte a BRL/BRA instruction?
.3945e0	f0 06		beq $3945e8	                BEQ chk_magic               ; Yes: check for the magic text
.3945e2	c9 82		cmp #$82	                CMP #$82
.3945e4	f0 02		beq $3945e8	                BEQ chk_magic
.3945e6	80 31		bra $394619	                BRA done                    ; No: just return
.3945e8	a2 00 00	ldx #$0000	chk_magic       LDX #0
.3945eb	bf 03 a3 38	lda $38a303,x	magic_loop      LDA @l DOS_SECTOR+3,X       ; Check the "vendor" byte
.3945ef	df 1e 46 39	cmp $39461e,x	                CMP DOS_BOOT_MAGIC,X        ; Compare it against our boot magic code
.3945f3	d0 24		bne $394619	                BNE done                    ; If it's not equal, just return
.3945f5	e8		inx		                INX                         ; Otherwise, check the next one
.3945f6	e0 08 00	cpx #$0008	                CPX #8
.3945f9	d0 f0		bne $3945eb	                BNE magic_loop              ; Until we've checked all 8 bytes
.3945fb	c2 30		rep #$30	                REP #$30        ; set A&X long
.3945fd	a9 00 02	lda #$0200	                LDA #DOS_SECTOR_SIZE
.394600	a2 00 a5	ldx #$a500	                LDX #<>(DOS_SECTOR+DOS_SECTOR_SIZE)
.394603	a0 00 ab	ldy #$ab00	                LDY #<>(DOS_BOOT_SECTOR+DOS_SECTOR_SIZE)
.394606	44 38 38	mvp $38,$38	                MVP #`DOS_SECTOR, #`DOS_BOOT_SECTOR
.394609	e2 20		sep #$20	                SEP #$20        ; set A short
.39460b	a5 01		lda $0321	                LDA @b BIOS_DEV             ; Check the device
.39460d	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Is it the FDC?
.39460f	f0 04		beq $394615	                BEQ jmp_fdc_start           ; Yes: jump to the start of the VBR code
.394611	5c 00 a9 38	jmp $38a900	                JML DOS_BOOT_SECTOR         ; No: it's an MBR, start at the first byte
.394615	5c 3e a9 38	jmp $38a93e	jmp_fdc_start   JML DOS_BOOT_SECTOR+FDC_BOOT_START
.394619	28		plp		done            PLP
.39461a	2b		pld		                PLD
.39461b	ab		plb		                PLB
.39461c	fa		plx		                PLX
.39461d	6b		rtl		                RTL
>39461e	43 32 35 36 44 4f 53 20		DOS_BOOT_MAGIC  .text "C256DOS "
.394626					DOS_CALC_LBA
.394626	8b		phb		                PHB
.394627	0b		phd		                PHD
.394628	08		php		                PHP
.394629	48		pha		                PHA             ; begin setdbr macro
.39462a	08		php		                PHP
.39462b	e2 20		sep #$20	                SEP #$20        ; set A short
.39462d	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39462f	48		pha		                PHA
.394630	ab		plb		                PLB
.394631	28		plp		                PLP
.394632	68		pla		                PLA             ; end setdbr macro
.394633	48		pha		                PHA             ; begin setdp macro
.394634	08		php		                PHP
.394635	c2 20		rep #$20	                REP #$20        ; set A long
.394637	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39463a	5b		tcd		                TCD
.39463b	28		plp		                PLP
.39463c	68		pla		                PLA             ; end setdp macro
.39463d	c2 20		rep #$20	                REP #$20        ; set A long
.39463f	38		sec		                SEC
.394640	a5 10		lda $0330	                LDA DOS_CLUS_ID                     ; cluster - 2
.394642	e9 02 00	sbc #$0002	                SBC #2
.394645	85 28		sta $0348	                STA DOS_TEMP
.394647	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394649	e9 00 00	sbc #$0000	                SBC #0
.39464c	85 2a		sta $034a	                STA DOS_TEMP+2
.39464e	e2 10		sep #$10	                SEP #$10        ; set X short
.394650	ae 03 a0	ldx $38a003	                LDX SECTORS_PER_CLUSTER
.394653	e0 01		cpx #$01	mult_loop       CPX #1
.394655	f0 07		beq $39465e	                BEQ add_offset
.394657	06 28		asl $0348	                ASL DOS_TEMP
.394659	26 28		rol $0348	                ROL DOS_TEMP
.39465b	ca		dex		                DEX
.39465c	80 f5		bra $394653	                BRA mult_loop
.39465e	18		clc		add_offset      CLC
.39465f	a5 28		lda $0348	                LDA DOS_TEMP                        ; cluster_being_lba + (cluster - 2) * SECTORS_PER_CLUSTER
.394661	6d 1c a0	adc $38a01c	                ADC CLUSTER_BEGIN_LBA
.394664	85 02		sta $0322	                STA BIOS_LBA
.394666	a5 2a		lda $034a	                LDA DOS_TEMP+2
.394668	6d 1e a0	adc $38a01e	                ADC CLUSTER_BEGIN_LBA+2
.39466b	85 04		sta $0324	                STA BIOS_LBA+2
.39466d	28		plp		                PLP
.39466e	2b		pld		                PLD
.39466f	ab		plb		                PLB
.394670	6b		rtl		                RTL
.394671					DOS_GETCLUSTER
.394671	8b		phb		                PHB
.394672	0b		phd		                PHD
.394673	08		php		                PHP
.394674	48		pha		                PHA             ; begin setdbr macro
.394675	08		php		                PHP
.394676	e2 20		sep #$20	                SEP #$20        ; set A short
.394678	a9 00		lda #$00	                LDA #0
.39467a	48		pha		                PHA
.39467b	ab		plb		                PLB
.39467c	28		plp		                PLP
.39467d	68		pla		                PLA             ; end setdbr macro
.39467e	48		pha		                PHA             ; begin setdp macro
.39467f	08		php		                PHP
.394680	c2 20		rep #$20	                REP #$20        ; set A long
.394682	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394685	5b		tcd		                TCD
.394686	28		plp		                PLP
.394687	68		pla		                PLA             ; end setdp macro
.394688	c2 20		rep #$20	                REP #$20        ; set A long
.39468a	a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.39468c	85 06		sta $0326	                STA BIOS_BUFF_PTR
.39468e	a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.394690	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394692	22 26 46 39	jsl $394626	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.394696	22 44 10 38	jsl $381044	                JSL GETBLOCK                        ; Get the first block of the cluster
.39469a	90 09		bcc $3946a5	                BCC ret_failure
.39469c					ret_success
.39469c	e2 20		sep #$20	                SEP #$20        ; set A short
.39469e	64 0e		stz $032e	                STZ DOS_STATUS
.3946a0	28		plp		                PLP
.3946a1	2b		pld		                PLD
.3946a2	ab		plb		                PLB
.3946a3	38		sec		                SEC
.3946a4	6b		rtl		                RTL
.3946a5					ret_failure
.3946a5	e2 20		sep #$20	                SEP #$20        ; set A short
.3946a7	85 0e		sta $032e	                STA DOS_STATUS
.3946a9	28		plp		                PLP
.3946aa	2b		pld		                PLD
.3946ab	ab		plb		                PLB
.3946ac	18		clc		                CLC
.3946ad	6b		rtl		                RTL
.3946ae					DOS_PUTCLUSTER
.3946ae	8b		phb		                PHB
.3946af	0b		phd		                PHD
.3946b0	08		php		                PHP
.3946b1	48		pha		                PHA             ; begin setdbr macro
.3946b2	08		php		                PHP
.3946b3	e2 20		sep #$20	                SEP #$20        ; set A short
.3946b5	a9 00		lda #$00	                LDA #0
.3946b7	48		pha		                PHA
.3946b8	ab		plb		                PLB
.3946b9	28		plp		                PLP
.3946ba	68		pla		                PLA             ; end setdbr macro
.3946bb	48		pha		                PHA             ; begin setdp macro
.3946bc	08		php		                PHP
.3946bd	c2 20		rep #$20	                REP #$20        ; set A long
.3946bf	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3946c2	5b		tcd		                TCD
.3946c3	28		plp		                PLP
.3946c4	68		pla		                PLA             ; end setdp macro
.3946c5	c2 20		rep #$20	                REP #$20        ; set A long
.3946c7	a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.3946c9	85 06		sta $0326	                STA BIOS_BUFF_PTR
.3946cb	a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.3946cd	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3946cf	22 26 46 39	jsl $394626	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.3946d3	22 24 10 38	jsl $381024	                JSL PUTBLOCK                        ; PUT the first block of the cluster
.3946d7	90 09		bcc $3946e2	                BCC ret_failure
.3946d9					ret_success
.3946d9	e2 20		sep #$20	                SEP #$20        ; set A short
.3946db	64 0e		stz $032e	                STZ DOS_STATUS
.3946dd	28		plp		                PLP
.3946de	2b		pld		                PLD
.3946df	ab		plb		                PLB
.3946e0	38		sec		                SEC
.3946e1	6b		rtl		                RTL
.3946e2					ret_failure
.3946e2	e2 20		sep #$20	                SEP #$20        ; set A short
.3946e4	85 0e		sta $032e	                STA DOS_STATUS
.3946e6	28		plp		                PLP
.3946e7	2b		pld		                PLD
.3946e8	ab		plb		                PLB
.3946e9	18		clc		                CLC
.3946ea	6b		rtl		                RTL
>3946eb	40 46 00			DOS_FDC_NAME    .null "@F"
.3946ee					DOS_FDC_DESC
>3946ee	eb 46 39 00			DEVNAME         .dword DOS_FDC_NAME            ; A pointer to the ASCIIZ name of the device
>3946f2	00				DEVNUMBER       .byte BIOS_DEV_FDC           ; The BIOS_DEV number for the device
>3946f3	00 00 00 00			NEXT            .dword 0            ; A pointer to the next device descriptor
>3946f7	40 53 00			DOS_SDC_NAME    .null "@S"
.3946fa					DOS_SDC_DESC
>3946fa	f7 46 39 00			DEVNAME         .dword DOS_SDC_NAME            ; A pointer to the ASCIIZ name of the device
>3946fe	02				DEVNUMBER       .byte BIOS_DEV_SD           ; The BIOS_DEV number for the device
>3946ff	ee 46 39 00			NEXT            .dword DOS_FDC_DESC            ; A pointer to the next device descriptor
>394703	40 48 00			DOS_HDC_NAME    .null "@H"
.394706					DOS_HD_DESC
>394706	03 47 39 00			DEVNAME         .dword DOS_HDC_NAME            ; A pointer to the ASCIIZ name of the device
>39470a	06				DEVNUMBER       .byte BIOS_DEV_HD0           ; The BIOS_DEV number for the device
>39470b	fa 46 39 00			NEXT            .dword DOS_SDC_DESC            ; A pointer to the next device descriptor
.39470f					DOS_PARSE_DEV
.39470f	8b		phb		                PHB
.394710	0b		phd		                PHD
.394711	08		php		                PHP
.394712	48		pha		                PHA             ; begin setdbr macro
.394713	08		php		                PHP
.394714	e2 20		sep #$20	                SEP #$20        ; set A short
.394716	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394718	48		pha		                PHA
.394719	ab		plb		                PLB
.39471a	28		plp		                PLP
.39471b	68		pla		                PLA             ; end setdbr macro
.39471c	48		pha		                PHA             ; begin setdp macro
.39471d	08		php		                PHP
.39471e	c2 20		rep #$20	                REP #$20        ; set A long
.394720	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394723	5b		tcd		                TCD
.394724	28		plp		                PLP
.394725	68		pla		                PLA             ; end setdp macro
.394726	c2 30		rep #$30	                REP #$30        ; set A&X long
.394728	af 4a a0 38	lda $38a04a	                LDA @l DOS_DEV_NAMES        ; Point to the first device name to check
.39472c	85 28		sta $0348	                STA DOS_TEMP
.39472e	af 4c a0 38	lda $38a04c	                LDA @l DOS_DEV_NAMES+2
.394732	85 2a		sta $034a	                STA DOS_TEMP+2
.394734	a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF        ; Make DOS_STR2_PTR point to the path to check
.394737	85 48		sta $0368	                STA DOS_STR2_PTR
.394739	a9 00 00	lda #$0000	                LDA #`DOS_PATH_BUFF
.39473c	85 4a		sta $036a	                STA DOS_STR2_PTR+2
.39473e	a0 00 00	ldy #$0000	dev_loop        LDY #DEVICE_DESC.DEVNAME    ; Get the name of the current device into DOS_STR1_PTR
.394741	b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.394743	85 44		sta $0364	                STA DOS_STR1_PTR
.394745	c8		iny		                INY
.394746	c8		iny		                INY
.394747	b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.394749	85 46		sta $0366	                STA DOS_STR1_PTR+2
.39474b	e2 20		sep #$20	                SEP #$20        ; set A short
.39474d	a0 00 00	ldy #$0000	                LDY #0
.394750	b7 44		lda [$0364],y	cmp_loop        LDA [DOS_STR1_PTR],Y        ; Get the Yth character of the device name
.394752	f0 24		beq $394778	                BEQ found                   ; If it's NULL, we found a match
.394754	d7 48		cmp [$0368],y	                CMP [DOS_STR2_PTR],Y        ; Compare it to the Yth character of the path
.394756	d0 03		bne $39475b	                BNE next_device             ; If no match, try to load the next device
.394758	c8		iny		                INY                         ; Go to the next character
.394759	80 f5		bra $394750	                BRA cmp_loop
.39475b					next_device
.39475b	c2 20		rep #$20	                REP #$20        ; set A long
.39475d	a0 05 00	ldy #$0005	                LDY #DEVICE_DESC.NEXT       ; DOS_TEMP := DOS_TEMP->NEXT
.394760	b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.394762	48		pha		                PHA
.394763	c8		iny		                INY
.394764	c8		iny		                INY
.394765	b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.394767	85 2a		sta $034a	                STA DOS_TEMP+2
.394769	68		pla		                PLA
.39476a	85 28		sta $0348	                STA DOS_TEMP
.39476c	a5 28		lda $0348	                LDA DOS_TEMP                ; Is DOS_TEMP = NULL?
.39476e	d0 ce		bne $39473e	                BNE dev_loop                ; No: check this device
.394770	a5 2a		lda $034a	                LDA DOS_TEMP+2
.394772	d0 ca		bne $39473e	                BNE dev_loop
.394774	28		plp		done            PLP                         ; Otherwise, return having not found a match
.394775	2b		pld		                PLD
.394776	ab		plb		                PLB
.394777	6b		rtl		                RTL
.394778	22 89 47 39	jsl $394789	found           JSL DOS_ADJUSTPATH          ; Remove the device name from the buffer
.39477c	e2 20		sep #$20	                SEP #$20        ; set A short
.39477e	a0 04 00	ldy #$0004	                LDY #DEVICE_DESC.DEVNUMBER  ; Set the BIOS device number from the found device
.394781	b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.394783	8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.394787	80 eb		bra $394774	                BRA done
.394789					DOS_ADJUSTPATH
.394789	da		phx		                PHX
.39478a	5a		phy		                PHY
.39478b	8b		phb		                PHB
.39478c	0b		phd		                PHD
.39478d	08		php		                PHP
.39478e	48		pha		                PHA             ; begin setdbr macro
.39478f	08		php		                PHP
.394790	e2 20		sep #$20	                SEP #$20        ; set A short
.394792	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394794	48		pha		                PHA
.394795	ab		plb		                PLB
.394796	28		plp		                PLP
.394797	68		pla		                PLA             ; end setdbr macro
.394798	48		pha		                PHA             ; begin setdp macro
.394799	08		php		                PHP
.39479a	c2 20		rep #$20	                REP #$20        ; set A long
.39479c	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39479f	5b		tcd		                TCD
.3947a0	28		plp		                PLP
.3947a1	68		pla		                PLA             ; end setdp macro
.3947a2	c2 30		rep #$30	                REP #$30        ; set A&X long
.3947a4	84 4b		sty $036b	                STY DOS_SCRATCH                 ; Save the index to later compute the size
.3947a6	98		tya		                TYA                             ; Compute the address of the first source byte
.3947a7	18		clc		                CLC
.3947a8	69 00 04	adc #$0400	                ADC #<>DOS_PATH_BUFF
.3947ab	aa		tax		                TAX
.3947ac	a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF            ; Compute the destination address for the source byte
.3947af	a8		tay		                TAY
.3947b0	38		sec		                SEC                             ; Compute the number of bytes to copy
.3947b1	a9 00 01	lda #$0100	                LDA #256
.3947b4	e5 4b		sbc $036b	                SBC DOS_SCRATCH
.3947b6	54 00 00	mvn $00,$00	                MVN #`DOS_PATH_BUFF, #`DOS_PATH_BUFF
.3947b9	28		plp		                PLP
.3947ba	2b		pld		                PLD
.3947bb	ab		plb		                PLB
.3947bc	7a		ply		                PLY
.3947bd	fa		plx		                PLX
.3947be	6b		rtl		                RTL
.3947bf					DOS_PARSE_PATH
.3947bf	8b		phb		                PHB
.3947c0	0b		phd		                PHD
.3947c1	08		php		                PHP
.3947c2	48		pha		                PHA             ; begin setdbr macro
.3947c3	08		php		                PHP
.3947c4	e2 20		sep #$20	                SEP #$20        ; set A short
.3947c6	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3947c8	48		pha		                PHA
.3947c9	ab		plb		                PLB
.3947ca	28		plp		                PLP
.3947cb	68		pla		                PLA             ; end setdbr macro
.3947cc	48		pha		                PHA             ; begin setdp macro
.3947cd	08		php		                PHP
.3947ce	c2 20		rep #$20	                REP #$20        ; set A long
.3947d0	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3947d3	5b		tcd		                TCD
.3947d4	28		plp		                PLP
.3947d5	68		pla		                PLA             ; end setdp macro
.3947d6	c2 10		rep #$10	                REP #$10        ; set X long
.3947d8	e2 20		sep #$20	                SEP #$20        ; set A short
.3947da	a2 00 00	ldx #$0000	                LDX #0
.3947dd	b5 e0		lda $0400,x	upcase_loop     LDA DOS_PATH_BUFF,X     ; Get the character
.3947df	f0 1b		beq $3947fc	                BEQ parse_dev           ; If it's NULL, the path is upper case, attempt to parse the device
.3947e1	c9 20		cmp #$20	                CMP #' '                ; Is a control character?
.3947e3	b0 05		bcs $3947ea	                BGE check_case          ; No: check the case
.3947e5	a9 07		lda #$07	                LDA #DOS_ERR_BADPATH    ; Yes: return a bad path error
.3947e7	82 64 00	brl $39484e	                BRL ret_failure
.3947ea	c9 61		cmp #$61	check_case      CMP #'a'                ; Is the character lower case?
.3947ec	90 08		bcc $3947f6	                BLT next_char
.3947ee	c9 7b		cmp #$7b	                CMP #'z'+1
.3947f0	b0 04		bcs $3947f6	                BGE next_char
.3947f2	29 5f		and #$5f	                AND #%01011111          ; Yes: Convert to uppercase
.3947f4	95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.3947f6	e8		inx		next_char       INX                     ; Move to the next character
.3947f7	e0 00 01	cpx #$0100	                CPX #$100
.3947fa	d0 e1		bne $3947dd	                BNE upcase_loop
.3947fc	22 0f 47 39	jsl $39470f	parse_dev       JSL DOS_PARSE_DEV       ; Parse and extract a device specifier ":xxx:"
.394800	a5 e0		lda $0400	                LDA DOS_PATH_BUFF       ; Check the first character of the path
.394802	c9 3a		cmp #$3a	                CMP #':'
.394804	d0 07		bne $39480d	                BNE clr_name            ; If not colon, treat it as a file name
.394806	a0 01 00	ldy #$0001	                LDY #1                  ; Otherwise...
.394809	22 89 47 39	jsl $394789	                JSL DOS_ADJUSTPATH      ; For now, just remove the leading ":"
.39480d	a0 00 00	ldy #$0000	clr_name        LDY #0                  ; Set the short name to blanks
.394810	a9 20		lda #$20	                LDA #' '
.394812	99 3a a0	sta $38a03a,y	clr_loop        STA DOS_SHORT_NAME,Y
.394815	c8		iny		                INY
.394816	c0 0b 00	cpy #$000b	                CPY #11
.394819	d0 f7		bne $394812	                BNE clr_loop
.39481b	a2 00 00	ldx #$0000	                LDX #0
.39481e	a0 00 00	ldy #$0000	                LDY #0
.394821	b5 e0		lda $0400,x	cpy_name_loop   LDA DOS_PATH_BUFF,X     ; Get the character of the name
.394823	f0 20		beq $394845	                BEQ ret_success         ; If NULL: we've finished parsing the path
.394825	c9 2e		cmp #$2e	                CMP #'.'                ; If it's a dot, we've finished the name part
.394827	f0 0a		beq $394833	                BEQ cpy_ext             ; And move to the extension
.394829	99 3a a0	sta $38a03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, store it to the name portion
.39482c	e8		inx		                INX
.39482d	c8		iny		                INY                     ; Move to the next character
.39482e	c0 08 00	cpy #$0008	                CPY #8                  ; Have we processed 8?
.394831	d0 ee		bne $394821	                BNE cpy_name_loop       ; No: process this one
.394833	e8		inx		cpy_ext         INX                     ; Skip the dot
.394834	a0 08 00	ldy #$0008	                LDY #8
.394837	b5 e0		lda $0400,x	cpy_ext_loop    LDA DOS_PATH_BUFF,X     ; Get the character of the extension
.394839	f0 0a		beq $394845	                BEQ ret_success         ; If it's NULL, we've finished
.39483b	99 3a a0	sta $38a03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, copy it to the short name
.39483e	e8		inx		                INX
.39483f	c8		iny		                INY                     ; Move to the next character
.394840	c0 0b 00	cpy #$000b	                CPY #11                 ; Have we processed the three ext characters?
.394843	d0 f2		bne $394837	                BNE cpy_ext_loop        ; No: process this one
.394845					ret_success
.394845	e2 20		sep #$20	                SEP #$20        ; set A short
.394847	64 0e		stz $032e	                STZ DOS_STATUS
.394849	28		plp		                PLP
.39484a	2b		pld		                PLD
.39484b	ab		plb		                PLB
.39484c	38		sec		                SEC
.39484d	6b		rtl		                RTL
.39484e					ret_failure
.39484e	e2 20		sep #$20	                SEP #$20        ; set A short
.394850	85 0e		sta $032e	                STA DOS_STATUS
.394852	28		plp		                PLP
.394853	2b		pld		                PLD
.394854	ab		plb		                PLB
.394855	18		clc		                CLC
.394856	6b		rtl		                RTL
.394857					DOS_FINDFILE
.394857	8b		phb		                PHB
.394858	0b		phd		                PHD
.394859	08		php		                PHP
.39485a	48		pha		                PHA             ; begin setdbr macro
.39485b	08		php		                PHP
.39485c	e2 20		sep #$20	                SEP #$20        ; set A short
.39485e	a9 00		lda #$00	                LDA #0
.394860	48		pha		                PHA
.394861	ab		plb		                PLB
.394862	28		plp		                PLP
.394863	68		pla		                PLA             ; end setdbr macro
.394864	48		pha		                PHA             ; begin setdp macro
.394865	08		php		                PHP
.394866	c2 20		rep #$20	                REP #$20        ; set A long
.394868	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39486b	5b		tcd		                TCD
.39486c	28		plp		                PLP
.39486d	68		pla		                PLA             ; end setdp macro
.39486e	c2 30		rep #$30	                REP #$30        ; set A&X long
.394870	22 bf 47 39	jsl $3947bf	                JSL DOS_PARSE_PATH              ; Break out the path into its components
.394874	b0 05		bcs $39487b	                BCS mount                       ; If success: try to open the directory
.394876	28		plp		pass_failure    PLP                             ; If failure, just pass the failure back up
.394877	2b		pld		                PLD
.394878	ab		plb		                PLB
.394879	18		clc		                CLC
.39487a	6b		rtl		                RTL
.39487b	22 f5 43 39	jsl $3943f5	mount           JSL DOS_MOUNT
.39487f					get_directory
.39487f	c2 20		rep #$20	                REP #$20        ; set A long
.394881	22 e2 40 39	jsl $3940e2	                JSL DOS_DIROPEN                 ; Get the directory
.394885	b0 07		bcs $39488e	                BCS scan_entries                ; If success: start scanning the directory entries
.394887	e2 20		sep #$20	                SEP #$20        ; set A short
.394889	a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Otherwise: return a no directory error
.39488b	82 47 00	brl $3948d5	                BRL ret_failure
.39488e	22 61 41 39	jsl $394161	scan_entries    JSL DOS_DIRFIRST                ; Move the DIR pointer to the beginning of the sector
.394892					scan_loop
.394892	e2 20		sep #$20	                SEP #$20        ; set A short
.394894	a0 00 00	ldy #$0000	                LDY #0
.394897	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y             ; Check the directory entry
.394899	d0 05		bne $3948a0	                BNE chk_unused                  ; If there's an entry, check to see if it's unused
.39489b	a9 09		lda #$09	                LDA #DOS_ERR_NOTFOUND           ; If end-of-directory, we couldn't find a match
.39489d	82 35 00	brl $3948d5	                BRL ret_failure
.3948a0	c9 e5		cmp #$e5	chk_unused      CMP #DOS_DIR_ENT_UNUSED         ; If it's unused...
.3948a2	f0 26		beq $3948ca	                BEQ next_entry                  ; Go to the next entry
.3948a4	a0 0b 00	ldy #$000b	                LDY #DIRENTRY.ATTRIBUTE         ; Check the entry's attributes
.3948a7	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3948a9	89 08		bit #$08	                BIT #DOS_ATTR_VOLUME            ; Is it a volume name?
.3948ab	d0 1d		bne $3948ca	                BNE next_entry                  ; Yes: skip it!
.3948ad	29 0f		and #$0f	                AND #DOS_ATTR_LONGNAME
.3948af	c9 0f		cmp #$0f	                CMP #DOS_ATTR_LONGNAME          ; Is it a long name field?
.3948b1	f0 17		beq $3948ca	                BEQ next_entry                  ; Yes: skip it!
.3948b3	a2 00 00	ldx #$0000	                LDX #0
.3948b6	a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME
.3948b9	b7 18		lda [$0338],y	scan_cmp_loop   LDA [DOS_DIR_PTR],Y             ; Get the X'th character of the entry
.3948bb	df 3a a0 38	cmp $38a03a,x	                CMP DOS_SHORT_NAME,X            ; And compare to the X'th character of the name we want
.3948bf	d0 09		bne $3948ca	                BNE next_entry                  ; If not equal: try the next entry
.3948c1	c8		iny		                INY                             ; Advance to the next character
.3948c2	e8		inx		                INX
.3948c3	e0 0b 00	cpx #$000b	                CPX #11                         ; Did we reach the end of the names?
.3948c6	f0 16		beq $3948de	                BEQ match                       ; Yes: we have a match!
.3948c8	80 ef		bra $3948b9	                BRA scan_cmp_loop               ; No: keep checking
.3948ca	22 7c 41 39	jsl $39417c	next_entry      JSL DOS_DIRNEXT                 ; Try to get the next directory entry
.3948ce	90 05		bcc $3948d5	                BCC ret_failure                 ; If we're at the end of the directory, return a failure.
.3948d0	82 bf ff	brl $394892	                BRL scan_loop                   ; If found: keep scanning
.3948d3	a9 08		lda #$08	bad_dir         LDA #DOS_ERR_NODIR              ; Otherwise: fail with a NODIR error (maybe something else is better)
.3948d5					ret_failure
.3948d5	e2 20		sep #$20	                SEP #$20        ; set A short
.3948d7	85 0e		sta $032e	                STA DOS_STATUS
.3948d9	28		plp		                PLP
.3948da	2b		pld		                PLD
.3948db	ab		plb		                PLB
.3948dc	18		clc		                CLC
.3948dd	6b		rtl		                RTL
.3948de					match
.3948de	c2 20		rep #$20	                REP #$20        ; set A long
.3948e0	a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L         ; Copy the cluster number from the directory entry
.3948e3	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3948e5	85 10		sta $0330	                STA DOS_CLUS_ID                 ; To DOS_CLUS_ID
.3948e7	a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.3948ea	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3948ec	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3948ee					ret_success
.3948ee	e2 20		sep #$20	                SEP #$20        ; set A short
.3948f0	64 0e		stz $032e	                STZ DOS_STATUS
.3948f2	28		plp		                PLP
.3948f3	2b		pld		                PLD
.3948f4	ab		plb		                PLB
.3948f5	38		sec		                SEC
.3948f6	6b		rtl		                RTL
.3948f7					DOS_READFILE
.3948f7	8b		phb		                PHB
.3948f8	0b		phd		                PHD
.3948f9	08		php		                PHP
.3948fa	48		pha		                PHA             ; begin setdbr macro
.3948fb	08		php		                PHP
.3948fc	e2 20		sep #$20	                SEP #$20        ; set A short
.3948fe	a9 00		lda #$00	                LDA #0
.394900	48		pha		                PHA
.394901	ab		plb		                PLB
.394902	28		plp		                PLP
.394903	68		pla		                PLA             ; end setdbr macro
.394904	48		pha		                PHA             ; begin setdp macro
.394905	08		php		                PHP
.394906	c2 20		rep #$20	                REP #$20        ; set A long
.394908	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39490b	5b		tcd		                TCD
.39490c	28		plp		                PLP
.39490d	68		pla		                PLA             ; end setdp macro
.39490e	c2 30		rep #$30	                REP #$30        ; set A&X long
.394910	a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.394912	48		pha		                PHA
.394913	a5 1c		lda $033c	                LDA DOS_BUFF_PTR
.394915	48		pha		                PHA
.394916	22 57 48 39	jsl $394857	                JSL DOS_FINDFILE                    ; Attempt to find the file's directory entry
.39491a	68		pla		                PLA
.39491b	85 1c		sta $033c	                STA DOS_BUFF_PTR
.39491d	68		pla		                PLA
.39491e	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394920	90 0f		bcc $394931	                BCC pass_failure                    ; If found: try to load the cluster
.394922	22 71 46 39	jsl $394671	load_cluster    JSL DOS_GETCLUSTER                  ; Get the first block of the cluster
.394926	90 09		bcc $394931	                BCC pass_failure                    ; If there's an error... pass it up the chain
.394928					ret_success
.394928	e2 20		sep #$20	                SEP #$20        ; set A short
.39492a	64 0e		stz $032e	                STZ DOS_STATUS
.39492c	28		plp		                PLP
.39492d	2b		pld		                PLD
.39492e	ab		plb		                PLB
.39492f	38		sec		                SEC
.394930	6b		rtl		                RTL
.394931	28		plp		pass_failure    PLP                                 ; Otherwise: pass any error up the chain
.394932	2b		pld		                PLD
.394933	ab		plb		                PLB
.394934	18		clc		                CLC
.394935	6b		rtl		                RTL
.394936					ENTRYFORCLUS12
.394936	8b		phb		                PHB
.394937	0b		phd		                PHD
.394938	08		php		                PHP
.394939	48		pha		                PHA             ; begin setdbr macro
.39493a	08		php		                PHP
.39493b	e2 20		sep #$20	                SEP #$20        ; set A short
.39493d	a9 00		lda #$00	                LDA #0
.39493f	48		pha		                PHA
.394940	ab		plb		                PLB
.394941	28		plp		                PLP
.394942	68		pla		                PLA             ; end setdbr macro
.394943	48		pha		                PHA             ; begin setdp macro
.394944	08		php		                PHP
.394945	c2 20		rep #$20	                REP #$20        ; set A long
.394947	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39494a	5b		tcd		                TCD
.39494b	28		plp		                PLP
.39494c	68		pla		                PLA             ; end setdp macro
.39494d	c2 30		rep #$30	                REP #$30        ; set A&X long
.39494f	a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; DOS_TEMP := DOS_CLUS_ID * 3
.394951	0a		asl a		                ASL A
.394952	85 28		sta $0348	                STA DOS_TEMP
.394954	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394956	2a		rol a		                ROL A
.394957	85 2a		sta $034a	                STA DOS_TEMP+2
.394959	18		clc		                CLC
.39495a	a5 10		lda $0330	                LDA DOS_CLUS_ID
.39495c	65 28		adc $0348	                ADC DOS_TEMP
.39495e	85 28		sta $0348	                STA DOS_TEMP
.394960	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394962	65 2a		adc $034a	                ADC DOS_TEMP+2
.394964	85 2a		sta $034a	                STA DOS_TEMP+2
.394966	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := (DOS_CLUS_ID * 3) / 2
.394968	66 28		ror $0348	                ROR DOS_TEMP                    ; DOS_TEMP is now the offset to the cluster's entry in the FAT
.39496a	a5 28		lda $0348	                LDA DOS_TEMP                    ; X should be the offset within the FAT buffer
.39496c	29 ff 03	and #$03ff	                AND #$003FF
.39496f	aa		tax		                TAX
.394970	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394972	66 28		ror $0348	                ROR DOS_TEMP
.394974	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394976	66 28		ror $0348	                ROR DOS_TEMP
.394978	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.39497a	66 28		ror $0348	                ROR DOS_TEMP
.39497c	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.39497e	66 28		ror $0348	                ROR DOS_TEMP
.394980	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394982	66 28		ror $0348	                ROR DOS_TEMP
.394984	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394986	66 28		ror $0348	                ROR DOS_TEMP
.394988	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.39498a	66 28		ror $0348	                ROR DOS_TEMP
.39498c	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.39498e	66 28		ror $0348	                ROR DOS_TEMP
.394990	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394992	66 28		ror $0348	                ROR DOS_TEMP
.394994	18		clc		                CLC                             ; DOS_FAT_LBA should be the LBA of the first FAT sector we need
.394995	af 14 a0 38	lda $38a014	                LDA FAT_BEGIN_LBA
.394999	65 28		adc $0348	                ADC DOS_TEMP
.39499b	85 24		sta $0344	                STA DOS_FAT_LBA
.39499d	af 16 a0 38	lda $38a016	                LDA FAT_BEGIN_LBA+2
.3949a1	65 2a		adc $034a	                ADC DOS_TEMP+2
.3949a3	85 26		sta $0346	                STA DOS_FAT_LBA+2
.3949a5	28		plp		                PLP
.3949a6	2b		pld		                PLD
.3949a7	ab		plb		                PLB
.3949a8	6b		rtl		                RTL
.3949a9					FATFORCLUSTER12
.3949a9	8b		phb		                PHB
.3949aa	0b		phd		                PHD
.3949ab	08		php		                PHP
.3949ac	48		pha		                PHA             ; begin setdbr macro
.3949ad	08		php		                PHP
.3949ae	e2 20		sep #$20	                SEP #$20        ; set A short
.3949b0	a9 00		lda #$00	                LDA #0
.3949b2	48		pha		                PHA
.3949b3	ab		plb		                PLB
.3949b4	28		plp		                PLP
.3949b5	68		pla		                PLA             ; end setdbr macro
.3949b6	48		pha		                PHA             ; begin setdp macro
.3949b7	08		php		                PHP
.3949b8	c2 20		rep #$20	                REP #$20        ; set A long
.3949ba	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3949bd	5b		tcd		                TCD
.3949be	28		plp		                PLP
.3949bf	68		pla		                PLA             ; end setdp macro
.3949c0	c2 30		rep #$30	                REP #$30        ; set A&X long
.3949c2	a2 00 00	ldx #$0000	                LDX #0
.3949c5	a9 5a 5a	lda #$5a5a	                LDA #$5A5A
.3949c8	8f 00 a5 38	sta $38a500	clr_loop        STA DOS_FAT_SECTORS
.3949cc	e8		inx		                INX
.3949cd	e8		inx		                INX
.3949ce	e0 00 04	cpx #$0400	                CPX #1024
.3949d1	d0 f5		bne $3949c8	                BNE clr_loop
.3949d3	22 36 49 39	jsl $394936	                JSL ENTRYFORCLUS12              ; Calculate the LBA
.3949d7	a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Point to the desired sector in the FAT
.3949d9	85 02		sta $0322	                STA BIOS_LBA
.3949db	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.3949dd	85 04		sta $0324	                STA BIOS_LBA+2
.3949df	a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first 512 bytes of the FAT buffer
.3949e2	85 06		sta $0326	                STA BIOS_BUFF_PTR
.3949e4	a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.3949e7	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3949e9	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.3949ed	90 17		bcc $394a06	                BCC error
.3949ef	e6 02		inc $0322	                INC BIOS_LBA                    ; Move to the next sector
.3949f1	a9 00 a7	lda #$a700	                LDA #<>DOS_FAT_SECTORS+512      ; And point to the second 512 bytes of teh FAT buffer
.3949f4	85 06		sta $0326	                STA BIOS_BUFF_PTR
.3949f6	a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.3949f9	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3949fb	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.3949ff	90 05		bcc $394a06	                BCC error
.394a01	28		plp		                PLP
.394a02	2b		pld		                PLD
.394a03	ab		plb		                PLB
.394a04	38		sec		                SEC
.394a05	6b		rtl		                RTL
.394a06					error
.394a06	e2 20		sep #$20	                SEP #$20        ; set A short
.394a08	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394a0a	85 0e		sta $032e	                STA DOS_STATUS
.394a0c	28		plp		                PLP
.394a0d	2b		pld		                PLD
.394a0e	ab		plb		                PLB
.394a0f	18		clc		                CLC
.394a10	6b		rtl		                RTL
.394a11					FATFORCLUSTER32
.394a11	8b		phb		                PHB
.394a12	0b		phd		                PHD
.394a13	48		pha		                PHA             ; begin setdbr macro
.394a14	08		php		                PHP
.394a15	e2 20		sep #$20	                SEP #$20        ; set A short
.394a17	a9 00		lda #$00	                LDA #0
.394a19	48		pha		                PHA
.394a1a	ab		plb		                PLB
.394a1b	28		plp		                PLP
.394a1c	68		pla		                PLA             ; end setdbr macro
.394a1d	48		pha		                PHA             ; begin setdp macro
.394a1e	08		php		                PHP
.394a1f	c2 20		rep #$20	                REP #$20        ; set A long
.394a21	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394a24	5b		tcd		                TCD
.394a25	28		plp		                PLP
.394a26	68		pla		                PLA             ; end setdp macro
.394a27	c2 30		rep #$30	                REP #$30        ; set A&X long
.394a29	a5 10		lda $0330	                LDA DOS_CLUS_ID
.394a2b	85 24		sta $0344	                STA DOS_FAT_LBA
.394a2d	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394a2f	85 26		sta $0346	                STA DOS_FAT_LBA+2
.394a31	a2 07 00	ldx #$0007	                LDX #7
.394a34	46 26		lsr $0346	div_loop        LSR DOS_FAT_LBA+2
.394a36	66 24		ror $0344	                ROR DOS_FAT_LBA
.394a38	ca		dex		                DEX
.394a39	d0 f9		bne $394a34	                BNE div_loop
.394a3b	18		clc		                CLC
.394a3c	a5 24		lda $0344	                LDA DOS_FAT_LBA
.394a3e	6f 14 a0 38	adc $38a014	                ADC FAT_BEGIN_LBA
.394a42	85 24		sta $0344	                STA DOS_FAT_LBA
.394a44	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394a46	6f 16 a0 38	adc $38a016	                ADC FAT_BEGIN_LBA+2
.394a4a	85 26		sta $0346	                STA DOS_FAT_LBA+2
.394a4c	a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; We want to load the FAT sector
.394a4e	85 02		sta $0322	                STA BIOS_LBA
.394a50	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394a52	85 04		sta $0324	                STA BIOS_LBA+2
.394a54	a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; We want to load the FAT sector in DOS_FAT_SECTORS
.394a57	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394a59	a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394a5c	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394a5e	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Load the FAT entry
.394a62	b0 06		bcs $394a6a	                BCS find_entry
.394a64	e2 20		sep #$20	                SEP #$20        ; set A short
.394a66	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394a68	80 0e		bra $394a78	                BRA ret_failure
.394a6a					find_entry
.394a6a	c2 20		rep #$20	                REP #$20        ; set A long
.394a6c	a5 10		lda $0330	                LDA DOS_CLUS_ID
.394a6e	0a		asl a		                ASL A
.394a6f	0a		asl a		                ASL A                           ; * 4
.394a70	29 ff 01	and #$01ff	                AND #$1FF                       ; DOS_CLUS_ID MOD 512
.394a73	aa		tax		                TAX                             ; X should be the offset within the sector
.394a74	2b		pld		ret_success     PLD
.394a75	ab		plb		                PLB
.394a76	38		sec		                SEC                             ; return success
.394a77	6b		rtl		                RTL
.394a78	2b		pld		ret_failure     PLD
.394a79	ab		plb		                PLB
.394a7a	18		clc		                CLC                             ; Return failure
.394a7b	6b		rtl		                RTL
.394a7c					NEXTCLUSTER
.394a7c	08		php		                PHP
.394a7d	e2 20		sep #$20	                SEP #$20        ; set A short
.394a7f	af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394a83	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394a85	d0 08		bne $394a8f	                BNE fat32                       ; No: assume it's FAT32
.394a87	22 9d 4a 39	jsl $394a9d	fat12           JSL NEXTCLUSTER12               ; Lookup the next cluster from FAT12
.394a8b	90 0d		bcc $394a9a	                BCC pass_failure                ; If there was an error, pass it up the chain
.394a8d	80 06		bra $394a95	                BRA ret_success
.394a8f	22 05 4b 39	jsl $394b05	fat32           JSL NEXTCLUSTER32               ; Lookup the next cluster from FAT32
.394a93	90 05		bcc $394a9a	                BCC pass_failure                ; If there was an error, pass it up the chain
.394a95	64 0e		stz $032e	ret_success     STZ DOS_STATUS
.394a97	28		plp		                PLP
.394a98	38		sec		                SEC
.394a99	6b		rtl		                RTL
.394a9a	28		plp		pass_failure    PLP
.394a9b	18		clc		                CLC
.394a9c	6b		rtl		                RTL
.394a9d					NEXTCLUSTER12
.394a9d	8b		phb		                    PHB
.394a9e	0b		phd		                    PHD
.394a9f	08		php		                    PHP
.394aa0	48		pha		                PHA             ; begin setdbr macro
.394aa1	08		php		                PHP
.394aa2	e2 20		sep #$20	                SEP #$20        ; set A short
.394aa4	a9 00		lda #$00	                LDA #0
.394aa6	48		pha		                PHA
.394aa7	ab		plb		                PLB
.394aa8	28		plp		                PLP
.394aa9	68		pla		                PLA             ; end setdbr macro
.394aaa	48		pha		                PHA             ; begin setdp macro
.394aab	08		php		                PHP
.394aac	c2 20		rep #$20	                REP #$20        ; set A long
.394aae	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394ab1	5b		tcd		                TCD
.394ab2	28		plp		                PLP
.394ab3	68		pla		                PLA             ; end setdp macro
.394ab4	c2 30		rep #$30	                REP #$30        ; set A&X long
.394ab6	22 a9 49 39	jsl $3949a9	                    JSL FATFORCLUSTER12             ; Attempt to load the FAT entries
.394aba	b0 03		bcs $394abf	                    BCS chk_clus_id
.394abc	82 41 00	brl $394b00	                    BRL pass_failure
.394abf	a5 10		lda $0330	chk_clus_id         LDA DOS_CLUS_ID                 ; Check the cluster ID...
.394ac1	89 01 00	bit #$0001	                    BIT #1                          ; Is it odd?
.394ac4	d0 0d		bne $394ad3	                    BNE is_odd                      ; Yes: calculate the next cluster for odd
.394ac6					is_even
.394ac6	c2 20		rep #$20	                REP #$20        ; set A long
.394ac8	bf 00 a5 38	lda $38a500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] & $0FFF
.394acc	29 ff 0f	and #$0fff	                    AND #$0FFF
.394acf	85 28		sta $0348	                    STA DOS_TEMP
.394ad1	80 0c		bra $394adf	                    BRA check_id
.394ad3					is_odd
.394ad3	c2 20		rep #$20	                REP #$20        ; set A long
.394ad5	bf 00 a5 38	lda $38a500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] >> 4
.394ad9	4a		lsr a		                    LSR A
.394ada	4a		lsr a		                    LSR A
.394adb	4a		lsr a		                    LSR A
.394adc	4a		lsr a		                    LSR A
.394add	85 28		sta $0348	                    STA DOS_TEMP
.394adf					check_id
.394adf	c2 20		rep #$20	                REP #$20        ; set A long
.394ae1	a5 28		lda $0348	                    LDA DOS_TEMP                    ; Check the new cluster ID we got
.394ae3	29 f0 0f	and #$0ff0	                    AND #$0FF0                      ; Is it in the range $0FF0 -- $0FFF?
.394ae6	c9 f0 0f	cmp #$0ff0	                    CMP #$0FF0
.394ae9	f0 0f		beq $394afa	                    BEQ no_more                     ; Yes: return that we've reached the end of the chain
.394aeb	a5 28		lda $0348	                    LDA DOS_TEMP                    ; Restore the "current" cluster ID
.394aed	85 10		sta $0330	                    STA DOS_CLUS_ID
.394aef	64 12		stz $0332	                    STZ DOS_CLUS_ID+2
.394af1					ret_success
.394af1	e2 20		sep #$20	                SEP #$20        ; set A short
.394af3	64 0e		stz $032e	                    STZ DOS_STATUS
.394af5	28		plp		                    PLP
.394af6	2b		pld		                    PLD
.394af7	ab		plb		                    PLB
.394af8	38		sec		                    SEC
.394af9	6b		rtl		                    RTL
.394afa					no_more
.394afa	e2 20		sep #$20	                SEP #$20        ; set A short
.394afc	a9 0a		lda #$0a	                    LDA #DOS_ERR_NOCLUSTER
.394afe	85 0e		sta $032e	                    STA DOS_STATUS
.394b00	28		plp		pass_failure        PLP
.394b01	2b		pld		                    PLD
.394b02	ab		plb		                    PLB
.394b03	18		clc		                    CLC
.394b04	6b		rtl		                    RTL
.394b05					NEXTCLUSTER32
.394b05	8b		phb		                PHB
.394b06	0b		phd		                PHD
.394b07	08		php		                PHP
.394b08	48		pha		                PHA             ; begin setdbr macro
.394b09	08		php		                PHP
.394b0a	e2 20		sep #$20	                SEP #$20        ; set A short
.394b0c	a9 00		lda #$00	                LDA #0
.394b0e	48		pha		                PHA
.394b0f	ab		plb		                PLB
.394b10	28		plp		                PLP
.394b11	68		pla		                PLA             ; end setdbr macro
.394b12	48		pha		                PHA             ; begin setdp macro
.394b13	08		php		                PHP
.394b14	c2 20		rep #$20	                REP #$20        ; set A long
.394b16	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394b19	5b		tcd		                TCD
.394b1a	28		plp		                PLP
.394b1b	68		pla		                PLA             ; end setdp macro
.394b1c	c2 30		rep #$30	                REP #$30        ; set A&X long
.394b1e	22 11 4a 39	jsl $394a11	                JSL FATFORCLUSTER32             ; Get the FAT entry for this cluster
.394b22	90 33		bcc $394b57	                BCC ret_failure                 ; If it did not work, return the error
.394b24	bf 00 a5 38	lda $38a500,x	                LDA DOS_FAT_SECTORS,X           ; Get the entry and copy it to DOS_TEMP
.394b28	85 28		sta $0348	                STA DOS_TEMP
.394b2a	bf 02 a5 38	lda $38a502,x	                LDA DOS_FAT_SECTORS+2,X
.394b2e	85 2a		sta $034a	                STA DOS_TEMP+2
.394b30	a5 28		lda $0348	                LDA DOS_TEMP                    ; Is DOS_TEMP = $FFFFFFFF?
.394b32	c9 ff ff	cmp #$ffff	                CMP #$FFFF
.394b35	d0 0d		bne $394b44	                BNE found_next
.394b37	a5 2a		lda $034a	                LDA DOS_TEMP+2
.394b39	c9 ff 0f	cmp #$0fff	                CMP #$0FFF
.394b3c	d0 06		bne $394b44	                BNE found_next                  ; No: return this cluster as the next
.394b3e	e2 20		sep #$20	                SEP #$20        ; set A short
.394b40	a9 0a		lda #$0a	                LDA #DOS_ERR_NOCLUSTER          ; Yes: return that there are no more clusters
.394b42	80 13		bra $394b57	                BRA ret_failure
.394b44					found_next
.394b44	c2 20		rep #$20	                REP #$20        ; set A long
.394b46	a5 28		lda $0348	                LDA DOS_TEMP                    ; No: return DOS_TEMP as the new DOS_CLUS_ID
.394b48	85 10		sta $0330	                STA DOS_CLUS_ID
.394b4a	a5 2a		lda $034a	                LDA DOS_TEMP+2
.394b4c	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394b4e					ret_success
.394b4e	e2 20		sep #$20	                SEP #$20        ; set A short
.394b50	64 0e		stz $032e	                STZ DOS_STATUS                  ; Record success
.394b52	28		plp		                PLP
.394b53	2b		pld		                PLD
.394b54	ab		plb		                PLB
.394b55	38		sec		                SEC
.394b56	6b		rtl		                RTL
.394b57					ret_failure
.394b57	e2 20		sep #$20	                SEP #$20        ; set A short
.394b59	85 0e		sta $032e	                STA DOS_STATUS                  ; Record the error condition
.394b5b	28		plp		                PLP
.394b5c	2b		pld		                PLD
.394b5d	ab		plb		                PLB
.394b5e	18		clc		                CLC
.394b5f	6b		rtl		                RTL
.394b60					DOS_READNEXT
.394b60	08		php		                PHP
.394b61	c2 30		rep #$30	                REP #$30        ; set A&X long
.394b63	22 7c 4a 39	jsl $394a7c	                JSL NEXTCLUSTER                 ; Attempt to find the next cluster in the FAT
.394b67	90 09		bcc $394b72	                BCC pass_failure                ; If nothing found: pass the failure up the chain
.394b69	22 71 46 39	jsl $394671	                JSL DOS_GETCLUSTER              ; Otherwise: attempt to read the cluster
.394b6d	90 03		bcc $394b72	                BCC pass_failure                ; If nothing read: pass the failure up the chain
.394b6f	28		plp		ret_success     PLP
.394b70	38		sec		                SEC
.394b71	6b		rtl		                RTL
.394b72	28		plp		pass_failure    PLP
.394b73	18		clc		                CLC
.394b74	6b		rtl		                RTL
.394b75					DOS_FREECLUS
.394b75	08		php		                PHP
.394b76	48		pha		                PHA             ; begin setdp macro
.394b77	08		php		                PHP
.394b78	c2 20		rep #$20	                REP #$20        ; set A long
.394b7a	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394b7d	5b		tcd		                TCD
.394b7e	28		plp		                PLP
.394b7f	68		pla		                PLA             ; end setdp macro
.394b80	e2 20		sep #$20	                SEP #$20        ; set A short
.394b82	af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394b86	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394b88	d0 08		bne $394b92	                BNE fat32                       ; No: assume it's FAT32
.394b8a	22 06 4c 39	jsl $394c06	fat12           JSL DOS_FREECLUS12              ; Find the next free cluster from FAT12
.394b8e	90 0d		bcc $394b9d	                BCC pass_failure                ; If there was an error, pass it up the chain
.394b90	80 06		bra $394b98	                BRA ret_success
.394b92	22 de 4c 39	jsl $394cde	fat32           JSL DOS_FREECLUS32              ; Find the next free cluster from FAT32
.394b96	90 05		bcc $394b9d	                BCC pass_failure                ; If there was an error, pass it up the chain
.394b98	64 0e		stz $032e	ret_success     STZ DOS_STATUS
.394b9a	28		plp		                PLP
.394b9b	38		sec		                SEC
.394b9c	6b		rtl		                RTL
.394b9d	28		plp		pass_failure    PLP
.394b9e	18		clc		                CLC
.394b9f	6b		rtl		                RTL
.394ba0					FDC_READ2FAT12
.394ba0	8b		phb		                    PHB
.394ba1	0b		phd		                    PHD
.394ba2	08		php		                    PHP
.394ba3	48		pha		                PHA             ; begin setdbr macro
.394ba4	08		php		                PHP
.394ba5	e2 20		sep #$20	                SEP #$20        ; set A short
.394ba7	a9 00		lda #$00	                LDA #0
.394ba9	48		pha		                PHA
.394baa	ab		plb		                PLB
.394bab	28		plp		                PLP
.394bac	68		pla		                PLA             ; end setdbr macro
.394bad	48		pha		                PHA             ; begin setdp macro
.394bae	08		php		                PHP
.394baf	c2 20		rep #$20	                REP #$20        ; set A long
.394bb1	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394bb4	5b		tcd		                TCD
.394bb5	28		plp		                PLP
.394bb6	68		pla		                PLA             ; end setdp macro
.394bb7	c2 30		rep #$30	                REP #$30        ; set A&X long
.394bb9	a9 00 a5	lda #$a500	                    LDA #<>DOS_FAT_SECTORS          ; Set the location to store the sector
.394bbc	85 06		sta $0326	                    STA BIOS_BUFF_PTR
.394bbe	a9 38 00	lda #$0038	                    LDA #`DOS_FAT_SECTORS
.394bc1	85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.394bc3	a5 24		lda $0344	                    LDA DOS_FAT_LBA
.394bc5	85 02		sta $0322	                    STA BIOS_LBA
.394bc7	a5 26		lda $0346	                    LDA DOS_FAT_LBA+2
.394bc9	85 04		sta $0324	                    STA BIOS_LBA+2
.394bcb	22 44 10 38	jsl $381044	                    JSL GETBLOCK                    ; Read the first sector
.394bcf	b0 07		bcs $394bd8	                    BCS inc_sect2                   ; If success: start getting the second sector
.394bd1	e2 20		sep #$20	                SEP #$20        ; set A short
.394bd3	a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.394bd5	82 1c 00	brl $394bf4	                    BRL ret_failure
.394bd8					inc_sect2
.394bd8	c2 20		rep #$20	                REP #$20        ; set A long
.394bda	e6 02		inc $0322	                    INC BIOS_LBA                    ; Move to the next sector
.394bdc	d0 02		bne $394be0	                    BNE inc_buff_ptr
.394bde	e6 04		inc $0324	                    INC BIOS_LBA+2
.394be0	a9 00 a7	lda #$a700	inc_buff_ptr        LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394be3	85 06		sta $0326	                    STA BIOS_BUFF_PTR
.394be5	a9 38 00	lda #$0038	                    LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394be8	85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.394bea	22 44 10 38	jsl $381044	                    JSL GETBLOCK                    ; Read the second sector
.394bee	b0 0d		bcs $394bfd	                    BCS ret_success                 ; If success, return success
.394bf0	e2 20		sep #$20	                SEP #$20        ; set A short
.394bf2	a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.394bf4					ret_failure
.394bf4	e2 20		sep #$20	                SEP #$20        ; set A short
.394bf6	85 00		sta $0320	                    STA BIOS_STATUS
.394bf8	28		plp		                    PLP
.394bf9	2b		pld		                    PLD
.394bfa	ab		plb		                    PLB
.394bfb	18		clc		                    CLC
.394bfc	6b		rtl		                    RTL
.394bfd					ret_success
.394bfd	e2 20		sep #$20	                SEP #$20        ; set A short
.394bff	64 00		stz $0320	                    STZ BIOS_STATUS
.394c01	28		plp		                    PLP
.394c02	2b		pld		                    PLD
.394c03	ab		plb		                    PLB
.394c04	38		sec		                    SEC
.394c05	6b		rtl		                    RTL
.394c06					DOS_FREECLUS12
.394c06	da		phx		                PHX
.394c07	8b		phb		                PHB
.394c08	0b		phd		                PHD
.394c09	08		php		                PHP
.394c0a	48		pha		                PHA             ; begin setdbr macro
.394c0b	08		php		                PHP
.394c0c	e2 20		sep #$20	                SEP #$20        ; set A short
.394c0e	a9 00		lda #$00	                LDA #0
.394c10	48		pha		                PHA
.394c11	ab		plb		                PLB
.394c12	28		plp		                PLP
.394c13	68		pla		                PLA             ; end setdbr macro
.394c14	48		pha		                PHA             ; begin setdp macro
.394c15	08		php		                PHP
.394c16	c2 20		rep #$20	                REP #$20        ; set A long
.394c18	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394c1b	5b		tcd		                TCD
.394c1c	28		plp		                PLP
.394c1d	68		pla		                PLA             ; end setdp macro
.394c1e	c2 30		rep #$30	                REP #$30        ; set A&X long
.394c20	a9 02 00	lda #$0002	                LDA #2                          ; Cluster ID is 2 to start with
.394c23	85 10		sta $0330	                STA DOS_CLUS_ID
.394c25	a9 00 00	lda #$0000	                LDA #0
.394c28	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394c2a	22 36 49 39	jsl $394936	                JSL ENTRYFORCLUS12              ; Calculate the LBA and buffer offset for the cluster
.394c2e	22 a0 4b 39	jsl $394ba0	                JSL FDC_READ2FAT12              ; Read the first two sectors of the FAT
.394c32	b0 07		bcs $394c3b	                BCS start_of_fat                ; If success, move X to the start of the FAT
.394c34	e2 20		sep #$20	                SEP #$20        ; set A short
.394c36	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394c38	82 99 00	brl $394cd4	                BRL ret_failure
.394c3b					start_of_fat
.394c3b	c2 30		rep #$30	                REP #$30        ; set A&X long
.394c3d	a5 10		lda $0330	chk_cluster     LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.394c3f	89 01 00	bit #$0001	                BIT #1
.394c42	d0 09		bne $394c4d	                BNE is_odd
.394c44	bf 00 a5 38	lda $38a500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an even numbered cluster
.394c48	29 ff 0f	and #$0fff	                AND #$0FFF
.394c4b	80 08		bra $394c55	                BRA chk_available
.394c4d	bf 00 a5 38	lda $38a500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an odd numbered cluster
.394c51	4a		lsr a		                LSR A
.394c52	4a		lsr a		                LSR A
.394c53	4a		lsr a		                LSR A
.394c54	4a		lsr a		                LSR A
.394c55					chk_available
.394c55	85 28		sta $0348	                STA DOS_TEMP
.394c57	c9 00 00	cmp #$0000	                CMP #0                          ; Is it available?
.394c5a	f0 03		beq $394c5f	                BEQ chk_found
.394c5c	82 39 00	brl $394c98	                BRL next_cluster                ; No: advance to the next cluster
.394c5f	8a		txa		chk_found       TXA
.394c60	85 2a		sta $034a	                STA DOS_TEMP+2
.394c62	a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.394c64	89 01 00	bit #$0001	                BIT #1
.394c67	d0 0d		bne $394c76	                BNE is_odd2
.394c69					is_even2
.394c69	bf 00 a5 38	lda $38a500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, even offset case
.394c6d	09 ff 0f	ora #$0fff	                ORA #$0FFF
.394c70	9f 00 a5 38	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.394c74	80 0b		bra $394c81	                BRA write_fat
.394c76					is_odd2
.394c76	bf 00 a5 38	lda $38a500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, odd offset case
.394c7a	09 f0 ff	ora #$fff0	                ORA #$FFF0
.394c7d	9f 00 a5 38	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.394c81	22 9b 4d 39	jsl $394d9b	write_fat       JSL WRITEFAT12                  ; Write the two FAT sectors back to disk
.394c85	b0 07		bcs $394c8e	                BCS ret_success                 ; If success: return success
.394c87	e2 20		sep #$20	                SEP #$20        ; set A short
.394c89	a9 14		lda #$14	                LDA #DOS_ERR_FATUPDATE          ; Flag an error trying to write the FAT back
.394c8b	82 46 00	brl $394cd4	                BRL ret_failure
.394c8e					ret_success
.394c8e	e2 20		sep #$20	                SEP #$20        ; set A short
.394c90	64 0e		stz $032e	                STZ DOS_STATUS
.394c92	28		plp		                PLP
.394c93	2b		pld		                PLD
.394c94	ab		plb		                PLB
.394c95	fa		plx		                PLX
.394c96	38		sec		                SEC
.394c97	6b		rtl		                RTL
.394c98					next_cluster
.394c98	e6 10		inc $0330	                INC DOS_CLUS_ID                 ; And advance the cluster ID
.394c9a	d0 02		bne $394c9e	                BNE calc_entry
.394c9c	e6 12		inc $0332	                INC DOS_CLUS_ID+2
.394c9e	22 36 49 39	jsl $394936	calc_entry      JSL ENTRYFORCLUS12              ; Calculate the LBA and offset into the buffer for the cluster
.394ca2	e0 00 00	cpx #$0000	                CPX #0                          ; Did we wrap around?
.394ca5	f0 03		beq $394caa	                BEQ chk_end_of_fat
.394ca7	82 93 ff	brl $394c3d	                BRL chk_cluster                 ; No: go back and check it too
.394caa					chk_end_of_fat
.394caa	a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Are we at the end of the FAT?
.394cac	cf 18 a0 38	cmp $38a018	                CMP FAT2_BEGIN_LBA              ; NOTE: we use the start sector of the second FAT as our sentinel
.394cb0	d0 0f		bne $394cc1	                BNE next_2
.394cb2	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394cb4	cf 1a a0 38	cmp $38a01a	                CMP FAT2_BEGIN_LBA+2
.394cb8	d0 07		bne $394cc1	                BNE next_2                      ; No: get the next to sectors
.394cba	e2 20		sep #$20	                SEP #$20        ; set A short
.394cbc	a9 12		lda #$12	                LDA #DOS_ERR_MEDIAFULL          ; Yes: return media full
.394cbe	82 13 00	brl $394cd4	                BRL ret_failure
.394cc1					next_2
.394cc1	22 a0 4b 39	jsl $394ba0	                JSL FDC_READ2FAT12              ; Read the next two sectors of the FAT
.394cc5	90 06		bcc $394ccd	                BCC fat_fail                    ; If failed: return error
.394cc7	a2 00 00	ldx #$0000	                LDX #0                          ; If success: Start scanning at the beginning of the sectors
.394cca	82 70 ff	brl $394c3d	                BRL chk_cluster                 ; And start checking from there
.394ccd					fat_fail
.394ccd	e2 20		sep #$20	                SEP #$20        ; set A short
.394ccf	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394cd1	82 00 00	brl $394cd4	                BRL ret_failure
.394cd4					ret_failure
.394cd4	e2 20		sep #$20	                SEP #$20        ; set A short
.394cd6	85 0e		sta $032e	                STA DOS_STATUS
.394cd8	28		plp		                PLP
.394cd9	2b		pld		                PLD
.394cda	ab		plb		                PLB
.394cdb	fa		plx		                PLX
.394cdc	18		clc		                CLC
.394cdd	6b		rtl		                RTL
.394cde					DOS_FREECLUS32
.394cde	8b		phb		                PHB
.394cdf	0b		phd		                PHD
.394ce0	08		php		                PHP
.394ce1	48		pha		                PHA             ; begin setdbr macro
.394ce2	08		php		                PHP
.394ce3	e2 20		sep #$20	                SEP #$20        ; set A short
.394ce5	a9 00		lda #$00	                LDA #0
.394ce7	48		pha		                PHA
.394ce8	ab		plb		                PLB
.394ce9	28		plp		                PLP
.394cea	68		pla		                PLA             ; end setdbr macro
.394ceb	48		pha		                PHA             ; begin setdp macro
.394cec	08		php		                PHP
.394ced	c2 20		rep #$20	                REP #$20        ; set A long
.394cef	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394cf2	5b		tcd		                TCD
.394cf3	28		plp		                PLP
.394cf4	68		pla		                PLA             ; end setdp macro
.394cf5	c2 30		rep #$30	                REP #$30        ; set A&X long
.394cf7	a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR               ; Set the location to store the sector
.394cfa	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394cfc	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.394cff	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394d01	af 14 a0 38	lda $38a014	                LDA FAT_BEGIN_LBA               ; Set the LBA to that of the first FAT sector
.394d05	85 02		sta $0322	                STA BIOS_LBA
.394d07	af 16 a0 38	lda $38a016	                LDA FAT_BEGIN_LBA+2
.394d0b	85 04		sta $0324	                STA BIOS_LBA+2
.394d0d	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Load the sector into memory
.394d11	b0 07		bcs $394d1a	                BCS initial_entry               ; If OK: set the initial entry to check
.394d13	e2 20		sep #$20	                SEP #$20        ; set A short
.394d15	a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Return a NOFAT error
.394d17	82 5e 00	brl $394d78	                BRL ret_failure
.394d1a					initial_entry
.394d1a	c2 20		rep #$20	                REP #$20        ; set A long
.394d1c	a9 02 00	lda #$0002	                LDA #2                          ; Set DOS_CLUS_ID to 2
.394d1f	85 10		sta $0330	                STA DOS_CLUS_ID
.394d21	a9 00 00	lda #$0000	                LDA #0
.394d24	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394d26	a2 08 00	ldx #$0008	                LDX #8                          ; Set the offset to DOS_CLUS_ID * 4
.394d29	bf 00 a3 38	lda $38a300,x	chk_entry       LDA DOS_SECTOR,X                ; Is the cluster entry == $00000000?
.394d2d	d0 06		bne $394d35	                BNE next_entry                  ; No: move to the next entry
.394d2f	bf 02 a3 38	lda $38a302,x	                LDA DOS_SECTOR+2,X
.394d33	f0 29		beq $394d5e	                BEQ found_free                  ; Yes: go to allocate and return it
.394d35	e6 10		inc $0330	next_entry      INC DOS_CLUS_ID                 ; Move to the next cluster
.394d37	d0 02		bne $394d3b	                BNE inc_ptr
.394d39	e6 12		inc $0332	                INC DOS_CLUS_ID+2
.394d3b	e8		inx		inc_ptr         INX                             ; Update the index to the entry
.394d3c	e8		inx		                INX
.394d3d	e8		inx		                INX
.394d3e	e8		inx		                INX
.394d3f	e0 00 02	cpx #$0200	                CPX #DOS_SECTOR_SIZE            ; Are we outside the sector?
.394d42	90 e5		bcc $394d29	                BLT chk_entry                   ; No: check this entry
.394d44	18		clc		                CLC                             ; Point to the next sector in the FAT
.394d45	a5 02		lda $0322	                LDA BIOS_LBA
.394d47	69 00 02	adc #$0200	                ADC #DOS_SECTOR_SIZE
.394d4a	85 02		sta $0322	                STA BIOS_LBA
.394d4c	a5 04		lda $0324	                LDA BIOS_LBA+2
.394d4e	69 00 00	adc #$0000	                ADC #0
.394d51	85 04		sta $0324	                STA BIOS_LBA+2
.394d53	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Attempt to read the block
.394d57	b0 00		bcs $394d59	                BCS set_ptr                     ; If OK: set the pointer and check it
.394d59	a2 00 00	ldx #$0000	set_ptr         LDX #0                          ; Set index pointer to the first entry
.394d5c	80 cb		bra $394d29	                BRA chk_entry                   ; Check this entry
.394d5e					found_free
.394d5e	c2 20		rep #$20	                REP #$20        ; set A long
.394d60	a9 ff ff	lda #$ffff	                LDA #<>FAT_LAST_CLUSTER         ; Set the entry to $0FFFFFFF to make it the last entry in its chain
.394d63	9f 00 a3 38	sta $38a300,x	                STA DOS_SECTOR,X
.394d67	a9 ff 0f	lda #$0fff	                LDA #(FAT_LAST_CLUSTER >> 16)
.394d6a	9f 02 a3 38	sta $38a302,x	                STA DOS_SECTOR+2,X
.394d6e	22 24 10 38	jsl $381024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.394d72	b0 0d		bcs $394d81	                BCS ret_success                 ; If OK: return success
.394d74	e2 20		sep #$20	                SEP #$20        ; set A short
.394d76	a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Otherwise: return NOFAT error
.394d78					ret_failure
.394d78	e2 20		sep #$20	                SEP #$20        ; set A short
.394d7a	85 0e		sta $032e	                STA DOS_STATUS
.394d7c	28		plp		                PLP
.394d7d	2b		pld		                PLD
.394d7e	ab		plb		                PLB
.394d7f	18		clc		                CLC
.394d80	6b		rtl		                RTL
.394d81					ret_success
.394d81	e2 20		sep #$20	                SEP #$20        ; set A short
.394d83	64 0e		stz $032e	                STZ DOS_STATUS
.394d85	28		plp		                PLP
.394d86	2b		pld		                PLD
.394d87	ab		plb		                PLB
.394d88	38		sec		                SEC
.394d89	6b		rtl		                RTL
.394d8a					DELCLUSTER
.394d8a	e2 20		sep #$20	                SEP #$20        ; set A short
.394d8c	af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394d90	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394d92	d0 04		bne $394d98	                BNE fat32                       ; No: assume it's FAT32
.394d94	5c e2 4d 39	jmp $394de2	fat12           JML DELCLUSTER12
.394d98	4c 30 4e	jmp $394e30	fat32           JMP DELCLUSTER32
.394d9b					WRITEFAT12
.394d9b	8b		phb		                PHB
.394d9c	0b		phd		                PHD
.394d9d	48		pha		                PHA             ; begin setdbr macro
.394d9e	08		php		                PHP
.394d9f	e2 20		sep #$20	                SEP #$20        ; set A short
.394da1	a9 00		lda #$00	                LDA #0
.394da3	48		pha		                PHA
.394da4	ab		plb		                PLB
.394da5	28		plp		                PLP
.394da6	68		pla		                PLA             ; end setdbr macro
.394da7	48		pha		                PHA             ; begin setdp macro
.394da8	08		php		                PHP
.394da9	c2 20		rep #$20	                REP #$20        ; set A long
.394dab	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394dae	5b		tcd		                TCD
.394daf	28		plp		                PLP
.394db0	68		pla		                PLA             ; end setdp macro
.394db1	c2 30		rep #$30	                REP #$30        ; set A&X long
.394db3	a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first FAT sector in memory
.394db6	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394db8	a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394dbb	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394dbd	a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Set the LBA to that of the first sector's
.394dbf	85 02		sta $0322	                STA BIOS_LBA
.394dc1	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394dc3	85 04		sta $0324	                STA BIOS_LBA+2
.394dc5	22 24 10 38	jsl $381024	                JSL PUTBLOCK                    ; Write the first sector back to the block device
.394dc9	90 14		bcc $394ddf	                BCC done
.394dcb	a9 00 a7	lda #$a700	                LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394dce	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394dd0	a9 38 00	lda #$0038	                LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394dd3	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394dd5	e6 02		inc $0322	                INC BIOS_LBA                    ; Point to the next sector in the FAT
.394dd7	d0 02		bne $394ddb	                BNE put_second
.394dd9	e6 04		inc $0324	                INC BIOS_LBA+2
.394ddb	22 24 10 38	jsl $381024	put_second      JSL PUTBLOCK                    ; Write the second sector back to the block device
.394ddf	2b		pld		done            PLD
.394de0	ab		plb		                PLB
.394de1	6b		rtl		                RTL
.394de2					DELCLUSTER12
.394de2	8b		phb		                PHB
.394de3	0b		phd		                PHD
.394de4	08		php		                PHP
.394de5	48		pha		                PHA             ; begin setdbr macro
.394de6	08		php		                PHP
.394de7	e2 20		sep #$20	                SEP #$20        ; set A short
.394de9	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394deb	48		pha		                PHA
.394dec	ab		plb		                PLB
.394ded	28		plp		                PLP
.394dee	68		pla		                PLA             ; end setdbr macro
.394def	48		pha		                PHA             ; begin setdp macro
.394df0	08		php		                PHP
.394df1	c2 20		rep #$20	                REP #$20        ; set A long
.394df3	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394df6	5b		tcd		                TCD
.394df7	28		plp		                PLP
.394df8	68		pla		                PLA             ; end setdp macro
.394df9	c2 30		rep #$30	                REP #$30        ; set A&X long
.394dfb	22 a9 49 39	jsl $3949a9	                JSL FATFORCLUSTER12
.394dff	8a		txa		                TXA                             ; Check to see if the index is odd or even
.394e00	89 01 00	bit #$0001	                BIT #1
.394e03	d0 08		bne $394e0d	                BNE is_odd
.394e05	bd 00 a5	lda $38a500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.394e08	29 00 f0	and #$f000	                AND #$F000                      ; Mask out the lower 12 bits
.394e0b	80 06		bra $394e13	                BRA save_update
.394e0d	bd 00 a5	lda $38a500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.394e10	29 0f 00	and #$000f	                AND #$000F                      ; Mask out the upper 12 bits
.394e13	9d 00 a5	sta $38a500,x	save_update     STA DOS_FAT_SECTORS,X           ; And write it back
.394e16	22 9b 4d 39	jsl $394d9b	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.394e1a	b0 0b		bcs $394e27	                BCS ret_success
.394e1c					ret_failure
.394e1c	e2 20		sep #$20	                SEP #$20        ; set A short
.394e1e	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394e20	85 0e		sta $032e	                STA DOS_STATUS
.394e22	28		plp		                PLP
.394e23	2b		pld		                PLD
.394e24	ab		plb		                PLB
.394e25	18		clc		                CLC
.394e26	6b		rtl		                RTL
.394e27					ret_success
.394e27	e2 20		sep #$20	                SEP #$20        ; set A short
.394e29	64 0e		stz $032e	                STZ DOS_STATUS
.394e2b	28		plp		                PLP
.394e2c	2b		pld		                PLD
.394e2d	ab		plb		                PLB
.394e2e	38		sec		                SEC
.394e2f	6b		rtl		                RTL
.394e30					DELCLUSTER32
.394e30	8b		phb		                PHB
.394e31	0b		phd		                PHD
.394e32	08		php		                PHP
.394e33	c2 30		rep #$30	                REP #$30        ; set A&X long
.394e35	48		pha		                PHA             ; begin setdbr macro
.394e36	08		php		                PHP
.394e37	e2 20		sep #$20	                SEP #$20        ; set A short
.394e39	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394e3b	48		pha		                PHA
.394e3c	ab		plb		                PLB
.394e3d	28		plp		                PLP
.394e3e	68		pla		                PLA             ; end setdbr macro
.394e3f	48		pha		                PHA             ; begin setdp macro
.394e40	08		php		                PHP
.394e41	c2 20		rep #$20	                REP #$20        ; set A long
.394e43	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394e46	5b		tcd		                TCD
.394e47	28		plp		                PLP
.394e48	68		pla		                PLA             ; end setdp macro
.394e49	22 11 4a 39	jsl $394a11	                JSL FATFORCLUSTER32
.394e4d	a9 00 00	lda #$0000	                LDA #0
.394e50	9d 00 a5	sta $38a500,x	                STA DOS_FAT_SECTORS,X           ; Set the cluster entry to 0
.394e53	9d 02 a5	sta $38a502,x	                STA DOS_FAT_SECTORS+2,X
.394e56	22 24 10 38	jsl $381024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.394e5a	b0 0b		bcs $394e67	                BCS ret_success
.394e5c					ret_failure
.394e5c	e2 20		sep #$20	                SEP #$20        ; set A short
.394e5e	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394e60	85 0e		sta $032e	                STA DOS_STATUS
.394e62	28		plp		                PLP
.394e63	2b		pld		                PLD
.394e64	ab		plb		                PLB
.394e65	18		clc		                CLC
.394e66	6b		rtl		                RTL
.394e67					ret_success
.394e67	e2 20		sep #$20	                SEP #$20        ; set A short
.394e69	64 0e		stz $032e	                STZ DOS_STATUS
.394e6b	28		plp		                PLP
.394e6c	2b		pld		                PLD
.394e6d	ab		plb		                PLB
.394e6e	38		sec		                SEC
.394e6f	6b		rtl		                RTL
.394e70					DOS_APPENDCLUS
.394e70	8b		phb		                PHB
.394e71	0b		phd		                PHD
.394e72	08		php		                PHP
.394e73	48		pha		                PHA             ; begin setdbr macro
.394e74	08		php		                PHP
.394e75	e2 20		sep #$20	                SEP #$20        ; set A short
.394e77	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394e79	48		pha		                PHA
.394e7a	ab		plb		                PLB
.394e7b	28		plp		                PLP
.394e7c	68		pla		                PLA             ; end setdbr macro
.394e7d	48		pha		                PHA             ; begin setdp macro
.394e7e	08		php		                PHP
.394e7f	c2 20		rep #$20	                REP #$20        ; set A long
.394e81	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394e84	5b		tcd		                TCD
.394e85	28		plp		                PLP
.394e86	68		pla		                PLA             ; end setdp macro
.394e87	c2 30		rep #$30	                REP #$30        ; set A&X long
.394e89	a5 12		lda $0332	                LDA DOS_CLUS_ID+2               ; Save the cluster number for later
.394e8b	48		pha		                PHA
.394e8c	a5 10		lda $0330	                LDA DOS_CLUS_ID
.394e8e	48		pha		                PHA
.394e8f	22 75 4b 39	jsl $394b75	                JSL DOS_FREECLUS                ; Find a free cluster on the block device
.394e93	b0 09		bcs $394e9e	                BCS save_cluster                ; If we got a cluster, write the data to it
.394e95	68		pla		fail_cleanup    PLA                             ; Restore the cluster of the file
.394e96	85 10		sta $0330	                STA DOS_CLUS_ID
.394e98	68		pla		                PLA
.394e99	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394e9b	82 7d 00	brl $394f1b	                BRL pass_failure                ; Pass the failure back up the chain
.394e9e	a5 10		lda $0330	save_cluster    LDA DOS_CLUS_ID
.394ea0	8d 36 a0	sta $38a036	                STA DOS_NEW_CLUSTER
.394ea3	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394ea5	8d 38 a0	sta $38a038	                STA DOS_NEW_CLUSTER+2
.394ea8	22 ae 46 39	jsl $3946ae	                JSL DOS_PUTCLUSTER              ; Write the data to the free cluster
.394eac	90 e7		bcc $394e95	                BCC fail_cleanup                ; If failure: clean up stack and pass the failure up
.394eae	68		pla		                PLA                             ; Restore the cluster of the file
.394eaf	85 10		sta $0330	                STA DOS_CLUS_ID
.394eb1	68		pla		                PLA
.394eb2	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394eb4	22 7c 4a 39	jsl $394a7c	walk_loop       JSL NEXTCLUSTER                 ; Try to get the next cluster in the chain
.394eb8	b0 fa		bcs $394eb4	                BCS walk_loop                   ; If found a cluster, keep walking the chain
.394eba	e2 20		sep #$20	                SEP #$20        ; set A short
.394ebc	af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394ec0	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394ec2	d0 3d		bne $394f01	                BNE fat32                       ; No: assume it's FAT32
.394ec4					fat12
.394ec4	c2 20		rep #$20	                REP #$20        ; set A long
.394ec6	22 36 49 39	jsl $394936	                JSL ENTRYFORCLUS12              ; Make sure we have the right offset for the cluster
.394eca	a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if the last cluster ID is even or odd
.394ecc	89 01 00	bit #$0001	                BIT #1
.394ecf	d0 11		bne $394ee2	                BNE is_odd
.394ed1	ad 36 a0	lda $38a036	is_even         LDA DOS_NEW_CLUSTER             ; Handle the even case (change the lower 12 bits)
.394ed4	29 ff 0f	and #$0fff	                AND #$0FFF
.394ed7	8d 36 a0	sta $38a036	                STA DOS_NEW_CLUSTER
.394eda	bd 00 a5	lda $38a500,x	                LDA DOS_FAT_SECTORS,X
.394edd	29 00 f0	and #$f000	                AND #$F000
.394ee0	80 10		bra $394ef2	                BRA update_fat12
.394ee2	ad 36 a0	lda $38a036	is_odd          LDA DOS_NEW_CLUSTER             ; Handle the odd case (change the upper 12 bits)
.394ee5	0a		asl a		                ASL A
.394ee6	0a		asl a		                ASL A
.394ee7	0a		asl a		                ASL A
.394ee8	0a		asl a		                ASL A
.394ee9	8d 36 a0	sta $38a036	                STA DOS_NEW_CLUSTER
.394eec	bd 00 a5	lda $38a500,x	                LDA DOS_FAT_SECTORS,X
.394eef	29 0f 00	and #$000f	                AND #$000F
.394ef2	0d 36 a0	ora $38a036	update_fat12    ORA DOS_NEW_CLUSTER
.394ef5	9d 00 a5	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.394ef8	22 9b 4d 39	jsl $394d9b	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.394efc	b0 22		bcs $394f20	                BCS ret_success
.394efe	82 1a 00	brl $394f1b	                BRL pass_failure
.394f01					fat32
.394f01	c2 20		rep #$20	                REP #$20        ; set A long
.394f03	ad 36 a0	lda $38a036	                LDA DOS_NEW_CLUSTER             ; Write the ID of the new cluster to the end of the chain
.394f06	9d 00 a5	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.394f09	ad 38 a0	lda $38a038	                LDA DOS_NEW_CLUSTER+2
.394f0c	9d 02 a5	sta $38a502,x	                STA DOS_FAT_SECTORS+2,X
.394f0f	22 24 10 38	jsl $381024	                JSL PUTBLOCK                    ; Write the FAT sector back (assumes BIOS_LBA and BIOS_BUFF_PTR haven't changed)
.394f13	b0 0b		bcs $394f20	                BCS ret_success
.394f15	e2 20		sep #$20	                SEP #$20        ; set A short
.394f17	a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Problem working with the FAT
.394f19	85 0e		sta $032e	                STA DOS_STATUS
.394f1b	28		plp		pass_failure    PLP
.394f1c	2b		pld		                PLD
.394f1d	ab		plb		                PLB
.394f1e	18		clc		                CLC
.394f1f	6b		rtl		                RTL
.394f20					ret_success
.394f20	e2 20		sep #$20	                SEP #$20        ; set A short
.394f22	64 0e		stz $032e	                STZ DOS_STATUS
.394f24	28		plp		                PLP
.394f25	2b		pld		                PLD
.394f26	ab		plb		                PLB
.394f27	38		sec		                SEC
.394f28	6b		rtl		                RTL
.394f29					BCD2BIN
.394f29	8b		phb		                PHB
.394f2a	0b		phd		                PHD
.394f2b	08		php		                PHP
.394f2c	48		pha		                PHA             ; begin setdbr macro
.394f2d	08		php		                PHP
.394f2e	e2 20		sep #$20	                SEP #$20        ; set A short
.394f30	a9 00		lda #$00	                LDA #0
.394f32	48		pha		                PHA
.394f33	ab		plb		                PLB
.394f34	28		plp		                PLP
.394f35	68		pla		                PLA             ; end setdbr macro
.394f36	48		pha		                PHA             ; begin setdp macro
.394f37	08		php		                PHP
.394f38	c2 20		rep #$20	                REP #$20        ; set A long
.394f3a	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394f3d	5b		tcd		                TCD
.394f3e	28		plp		                PLP
.394f3f	68		pla		                PLA             ; end setdp macro
.394f40	c2 30		rep #$30	                REP #$30        ; set A&X long
.394f42	85 28		sta $0348	                STA DOS_TEMP
.394f44	29 0f 00	and #$000f	                AND #$000F
.394f47	85 2a		sta $034a	                STA DOS_TEMP+2
.394f49	a5 28		lda $0348	                LDA DOS_TEMP
.394f4b	4a		lsr a		                LSR A
.394f4c	4a		lsr a		                LSR A
.394f4d	4a		lsr a		                LSR A
.394f4e	4a		lsr a		                LSR A
.394f4f	85 28		sta $0348	                STA DOS_TEMP
.394f51	29 0f 00	and #$000f	                AND #$000F
.394f54	8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.394f58	a9 0a 00	lda #$000a	                LDA #10
.394f5b	8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.394f5f	af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.394f63	18		clc		                CLC
.394f64	65 2a		adc $034a	                ADC DOS_TEMP+2
.394f66	85 2a		sta $034a	                STA DOS_TEMP+2
.394f68	a5 28		lda $0348	                LDA DOS_TEMP
.394f6a	4a		lsr a		                LSR A
.394f6b	4a		lsr a		                LSR A
.394f6c	4a		lsr a		                LSR A
.394f6d	4a		lsr a		                LSR A
.394f6e	85 28		sta $0348	                STA DOS_TEMP
.394f70	29 0f 00	and #$000f	                AND #$000F
.394f73	8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.394f77	a9 64 00	lda #$0064	                LDA #100
.394f7a	8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.394f7e	af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.394f82	18		clc		                CLC
.394f83	65 2a		adc $034a	                ADC DOS_TEMP+2
.394f85	85 2a		sta $034a	                STA DOS_TEMP+2
.394f87	a5 28		lda $0348	                LDA DOS_TEMP
.394f89	4a		lsr a		                LSR A
.394f8a	4a		lsr a		                LSR A
.394f8b	4a		lsr a		                LSR A
.394f8c	4a		lsr a		                LSR A
.394f8d	29 0f 00	and #$000f	                AND #$000F
.394f90	8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.394f94	a9 e8 03	lda #$03e8	                LDA #1000
.394f97	8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.394f9b	af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.394f9f	18		clc		                CLC
.394fa0	65 2a		adc $034a	                ADC DOS_TEMP+2
.394fa2	28		plp		                PLP
.394fa3	2b		pld		                PLD
.394fa4	ab		plb		                PLB
.394fa5	6b		rtl		                RTL
.394fa6					DOS_RTCCREATE
.394fa6	8b		phb		                PHB
.394fa7	0b		phd		                PHD
.394fa8	08		php		                PHP
.394fa9	48		pha		                PHA             ; begin setdbr macro
.394faa	08		php		                PHP
.394fab	e2 20		sep #$20	                SEP #$20        ; set A short
.394fad	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394faf	48		pha		                PHA
.394fb0	ab		plb		                PLB
.394fb1	28		plp		                PLP
.394fb2	68		pla		                PLA             ; end setdbr macro
.394fb3	48		pha		                PHA             ; begin setdp macro
.394fb4	08		php		                PHP
.394fb5	c2 20		rep #$20	                REP #$20        ; set A long
.394fb7	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394fba	5b		tcd		                TCD
.394fbb	28		plp		                PLP
.394fbc	68		pla		                PLA             ; end setdp macro
.394fbd	c2 10		rep #$10	                REP #$10        ; set X long
.394fbf	e2 20		sep #$20	                SEP #$20        ; set A short
.394fc1	af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn off the updates to the clock
.394fc5	09 08		ora #$08	                ORA #%00001000
.394fc7	8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.394fcb	af 0f 08 af	lda $af080f	                LDA @l RTC_CENTURY
.394fcf	85 29		sta $0349	                STA DOS_TEMP+1
.394fd1	af 0a 08 af	lda $af080a	                LDA @l RTC_YEAR             ; Get the year
.394fd5	85 28		sta $0348	                STA DOS_TEMP
.394fd7	c2 20		rep #$20	                REP #$20        ; set A long
.394fd9	a5 28		lda $0348	                LDA DOS_TEMP
.394fdb	22 29 4f 39	jsl $394f29	                JSL BCD2BIN                 ; Convert it to binary
.394fdf	85 28		sta $0348	                STA DOS_TEMP
.394fe1	38		sec		                SEC                         ; Year is relative to 1980
.394fe2	e9 bc 07	sbc #$07bc	                SBC #1980
.394fe5	c2 20		rep #$20	                REP #$20        ; set A long
.394fe7	0a		asl a		                ASL A
.394fe8	0a		asl a		                ASL A
.394fe9	0a		asl a		                ASL A
.394fea	0a		asl a		                ASL A
.394feb	0a		asl a		                ASL A
.394fec	0a		asl a		                ASL A
.394fed	0a		asl a		                ASL A
.394fee	0a		asl a		                ASL A
.394fef	0a		asl a		                ASL A
.394ff0	29 00 fe	and #$fe00	                AND #$FE00
.394ff3	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.394ff6	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394ff8	e2 20		sep #$20	                SEP #$20        ; set A short
.394ffa	af 09 08 af	lda $af0809	                LDA @l RTC_MONTH            ; Get the month
.394ffe	c2 20		rep #$20	                REP #$20        ; set A long
.395000	29 ff 00	and #$00ff	                AND #$00FF
.395003	22 29 4f 39	jsl $394f29	                JSL BCD2BIN                 ; Convert it to binary
.395007	29 ff 00	and #$00ff	                AND #$00FF                  ; Move the year to bits 15 - 9
.39500a	0a		asl a		                ASL A
.39500b	0a		asl a		                ASL A
.39500c	0a		asl a		                ASL A
.39500d	0a		asl a		                ASL A
.39500e	0a		asl a		                ASL A
.39500f	29 e0 01	and #$01e0	                AND #$01E0                  ; Make sure only the month is covered
.395012	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.395015	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.395017	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395019	e2 20		sep #$20	                SEP #$20        ; set A short
.39501b	af 06 08 af	lda $af0806	                LDA @l RTC_DAY              ; Get the day
.39501f	c2 20		rep #$20	                REP #$20        ; set A long
.395021	29 ff 00	and #$00ff	                AND #$00FF
.395024	22 29 4f 39	jsl $394f29	                JSL BCD2BIN                 ; Convert it to binary
.395028	29 1f 00	and #$001f	                AND #$001F                  ; Make sure only the day is covered
.39502b	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.39502e	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.395030	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395032	e2 20		sep #$20	                SEP #$20        ; set A short
.395034	af 04 08 af	lda $af0804	                LDA @l RTC_HRS              ; Get the hour
.395038	29 1f		and #$1f	                AND #$1F                    ; Trim AM/PM bit
.39503a	c2 20		rep #$20	                REP #$20        ; set A long
.39503c	29 ff 00	and #$00ff	                AND #$00FF
.39503f	22 29 4f 39	jsl $394f29	                JSL BCD2BIN                 ; Convert it to binary
.395043	c2 20		rep #$20	                REP #$20        ; set A long
.395045	0a		asl a		                ASL A
.395046	0a		asl a		                ASL A
.395047	0a		asl a		                ASL A
.395048	0a		asl a		                ASL A
.395049	0a		asl a		                ASL A
.39504a	0a		asl a		                ASL A
.39504b	0a		asl a		                ASL A
.39504c	0a		asl a		                ASL A
.39504d	0a		asl a		                ASL A
.39504e	0a		asl a		                ASL A
.39504f	0a		asl a		                ASL A
.395050	29 00 f8	and #$f800	                AND #$F800
.395053	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.395056	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395058	e2 20		sep #$20	                SEP #$20        ; set A short
.39505a	af 02 08 af	lda $af0802	                LDA @l RTC_MIN              ; Get the minute
.39505e	c2 20		rep #$20	                REP #$20        ; set A long
.395060	29 ff 00	and #$00ff	                AND #$00FF
.395063	22 29 4f 39	jsl $394f29	                JSL BCD2BIN                 ; Convert it to binary
.395067	c2 20		rep #$20	                REP #$20        ; set A long
.395069	0a		asl a		                ASL A
.39506a	0a		asl a		                ASL A
.39506b	0a		asl a		                ASL A
.39506c	0a		asl a		                ASL A
.39506d	0a		asl a		                ASL A
.39506e	29 e0 07	and #$07e0	                AND #$07E0
.395071	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.395074	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.395076	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395078	e2 20		sep #$20	                SEP #$20        ; set A short
.39507a	af 00 08 af	lda $af0800	                LDA @l RTC_SEC              ; Get the second
.39507e	c2 20		rep #$20	                REP #$20        ; set A long
.395080	29 ff 00	and #$00ff	                AND #$00FF
.395083	22 29 4f 39	jsl $394f29	                JSL BCD2BIN                 ; Convert it to binary
.395087	c2 20		rep #$20	                REP #$20        ; set A long
.395089	29 1f 00	and #$001f	                AND #$001F
.39508c	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.39508f	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.395091	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395093	af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn on the updates again
.395097	29 f7 00	and #$00f7	                AND #%11110111
.39509a	8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.39509e	28		plp		                PLP
.39509f	2b		pld		                PLD
.3950a0	ab		plb		                PLB
.3950a1	6b		rtl		                RTL
.3950a2					DOS_CREATE
.3950a2	8b		phb		                PHB
.3950a3	0b		phd		                PHD
.3950a4	08		php		                PHP
.3950a5	48		pha		                PHA             ; begin setdbr macro
.3950a6	08		php		                PHP
.3950a7	e2 20		sep #$20	                SEP #$20        ; set A short
.3950a9	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3950ab	48		pha		                PHA
.3950ac	ab		plb		                PLB
.3950ad	28		plp		                PLP
.3950ae	68		pla		                PLA             ; end setdbr macro
.3950af	48		pha		                PHA             ; begin setdp macro
.3950b0	08		php		                PHP
.3950b1	c2 20		rep #$20	                REP #$20        ; set A long
.3950b3	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3950b6	5b		tcd		                TCD
.3950b7	28		plp		                PLP
.3950b8	68		pla		                PLA             ; end setdp macro
.3950b9	c2 30		rep #$30	                REP #$30        ; set A&X long
.3950bb	a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; DOS_TEMP := DOS_FD_PTR->PATH
.3950be	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3950c0	85 28		sta $0348	                STA DOS_TEMP
.3950c2	c8		iny		                INY
.3950c3	c8		iny		                INY
.3950c4	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3950c6	85 2a		sta $034a	                STA DOS_TEMP+2
.3950c8	e2 20		sep #$20	                SEP #$20        ; set A short
.3950ca	a0 00 00	ldy #$0000	                LDY #0
.3950cd	a2 00 00	ldx #$0000	                LDX #0
.3950d0	b7 28		lda [$0348],y	path_loop       LDA [DOS_TEMP],Y                ; Get a byte of the path
.3950d2	95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X             ; ... save it to the path buffer
.3950d4	f0 04		beq $3950da	                BEQ find_file                   ; If it's NULL, we're done
.3950d6	e8		inx		                INX
.3950d7	c8		iny		                INY
.3950d8	80 f6		bra $3950d0	                BRA path_loop
.3950da	22 bf 47 39	jsl $3947bf	find_file       JSL DOS_PARSE_PATH
.3950de	22 57 48 39	jsl $394857	                JSL DOS_FINDFILE
.3950e2	90 07		bcc $3950eb	                BCC set_device
.3950e4	e2 20		sep #$20	                SEP #$20        ; set A short
.3950e6	a9 0b		lda #$0b	                LDA #DOS_ERR_FILEEXISTS
.3950e8	82 d2 00	brl $3951bd	                BRL ret_failure
.3950eb					set_device
.3950eb	e2 20		sep #$20	                SEP #$20        ; set A short
.3950ed	a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.3950f0	a5 01		lda $0321	                LDA BIOS_DEV
.3950f2	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3950f4					validate_name
.3950f4	22 75 4b 39	jsl $394b75	                JSL DOS_FREECLUS
.3950f8	b0 03		bcs $3950fd	                BCS save_data
.3950fa	82 c4 00	brl $3951c1	                BRL pass_failure
.3950fd					save_data
.3950fd	c2 20		rep #$20	                REP #$20        ; set A long
.3950ff	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER
.395102	a5 10		lda $0330	                LDA DOS_CLUS_ID             ; DOS_FD_PTR->FIRST_CLUSTER := DOS_CLUS_ID
.395104	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395106	c8		iny		                INY
.395107	c8		iny		                INY
.395108	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.39510a	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39510c	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; DOS_BUFF_PTR := DOS_FD_PTR->BUFFER
.39510f	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395111	85 1c		sta $033c	                STA DOS_BUFF_PTR
.395113	c8		iny		                INY
.395114	c8		iny		                INY
.395115	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395117	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.395119	22 ae 46 39	jsl $3946ae	                JSL DOS_PUTCLUSTER
.39511d	b0 00		bcs $39511f	                BCS find_dir
.39511f					find_dir
.39511f	c2 20		rep #$20	                REP #$20        ; set A long
.395121	22 3d 42 39	jsl $39423d	                JSL DOS_DIRFINDFREE
.395125	b0 1a		bcs $395141	                BCS set_entry
.395127	c2 20		rep #$20	                REP #$20        ; set A long
.395129	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Failed to get the directory entry...
.39512c	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y              ; DOS_CLUS_ID := DOS_FD_PTR->FIRST_CLUSTER
.39512e	85 10		sta $0330	                STA DOS_CLUS_ID
.395130	c8		iny		                INY
.395131	c8		iny		                INY
.395132	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395134	85 12		sta $0332	                STA DOS_CLUS_ID+2
.395136	22 30 4e 39	jsl $394e30	                JSL DELCLUSTER32                ; Delete the cluster
.39513a	e2 20		sep #$20	                SEP #$20        ; set A short
.39513c	a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Return that we couldn't read the directory
.39513e	82 7c 00	brl $3951bd	                BRL ret_failure
.395141					set_entry
.395141	e2 20		sep #$20	                SEP #$20        ; set A short
.395143	a0 00 00	ldy #$0000	                LDY #0
.395146	a9 00		lda #$00	                LDA #0                          ; NULL
.395148	97 18		sta [$0338],y	copy_dir_loop   STA [DOS_DIR_PTR],Y             ; Save it to the directory cluster
.39514a	c8		iny		                INY
.39514b	c0 20 00	cpy #$0020	                CPY #SIZE(DIRENTRY)
.39514e	d0 f8		bne $395148	                BNE copy_dir_loop
.395150	a0 00 00	ldy #$0000	                LDY #0
.395153	b9 3a a0	lda $38a03a,y	name_loop       LDA DOS_SHORT_NAME,Y            ; Copy the name over
.395156	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395158	c8		iny		                INY
.395159	c0 0b 00	cpy #$000b	                CPY #11
.39515c	d0 f5		bne $395153	                BNE name_loop
.39515e	c2 20		rep #$20	                REP #$20        ; set A long
.395160	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; DOS_DIR_PTR->CLUSTER_L := DOS_FD_PTR->FIRST_CLUSTER[15..0]
.395163	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395165	a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.395168	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.39516a	a0 0c 00	ldy #$000c	                LDY #FILEDESC.FIRST_CLUSTER+2   ; DOS_DIR_PTR->CLUSTER_H := DOS_FD_PTR->FIRST_CLUSTER[31..16]
.39516d	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39516f	a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.395172	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395174	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE              ; DOS_DIR_PTR->SIZE := DOS_FD_PTR->SIZE
.395177	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395179	a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE
.39517c	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.39517e	a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.395181	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395183	a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.395186	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395188	a9 00 00	lda #$0000	                LDA #0                          ; Force create date-time to 0
.39518b	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; TODO: restore the RTC integration when that is working better.
.39518e	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395190	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME
.395193	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395195	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; DOS_DIR_PTR->CREATE_DATE := DOS_FD_PTR->CREATE_DATE
.395198	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39519a	a0 10 00	ldy #$0010	                LDY #DIRENTRY.CREATE_DATE
.39519d	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.39519f	a0 18 00	ldy #$0018	                LDY #DIRENTRY.MODIFIED_DATE     ; And DOS_DIR_PTR->MODIFIED_DATE
.3951a2	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.3951a4	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME       ; DOS_DIR_PTR->CREATE_TIME := DOS_FD_PTR->CREATE_TIME
.3951a7	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3951a9	a0 0e 00	ldy #$000e	                LDY #DIRENTRY.CREATE_TIME
.3951ac	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.3951ae	a0 16 00	ldy #$0016	                LDY #DIRENTRY.MODIFIED_TIME     ; And DOS_DIR_PTR->MODIFIED_TIME
.3951b1	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.3951b3	c2 20		rep #$20	                REP #$20        ; set A long
.3951b5	22 fb 42 39	jsl $3942fb	                JSL DOS_DIRWRITE
.3951b9	b0 0b		bcs $3951c6	                BCS ret_success
.3951bb	80 04		bra $3951c1	                BRA pass_failure
.3951bd					ret_failure
.3951bd	e2 20		sep #$20	                SEP #$20        ; set A short
.3951bf	85 0e		sta $032e	                STA DOS_STATUS
.3951c1	28		plp		pass_failure    PLP
.3951c2	2b		pld		                PLD
.3951c3	ab		plb		                PLB
.3951c4	18		clc		                CLC
.3951c5	6b		rtl		                RTL
.3951c6					ret_success
.3951c6	e2 20		sep #$20	                SEP #$20        ; set A short
.3951c8	64 0e		stz $032e	                STZ DOS_STATUS
.3951ca	28		plp		                PLP
.3951cb	2b		pld		                PLD
.3951cc	ab		plb		                PLB
.3951cd	38		sec		                SEC
.3951ce	6b		rtl		                RTL
.3951cf					DOS_COPYPATH
.3951cf	da		phx		                PHX
.3951d0	5a		phy		                PHY
.3951d1	8b		phb		                PHB
.3951d2	0b		phd		                PHD
.3951d3	08		php		                PHP
.3951d4	48		pha		                PHA             ; begin setdbr macro
.3951d5	08		php		                PHP
.3951d6	e2 20		sep #$20	                SEP #$20        ; set A short
.3951d8	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3951da	48		pha		                PHA
.3951db	ab		plb		                PLB
.3951dc	28		plp		                PLP
.3951dd	68		pla		                PLA             ; end setdbr macro
.3951de	48		pha		                PHA             ; begin setdp macro
.3951df	08		php		                PHP
.3951e0	c2 20		rep #$20	                REP #$20        ; set A long
.3951e2	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3951e5	5b		tcd		                TCD
.3951e6	28		plp		                PLP
.3951e7	68		pla		                PLA             ; end setdp macro
.3951e8	c2 30		rep #$30	                REP #$30        ; set A&X long
.3951ea	a9 00 00	lda #$0000	                LDA #0                  ; Set the DOS_PATH_BUFF to all zeros
.3951ed	a2 00 00	ldx #$0000	                LDX #0
.3951f0	95 e0		sta $0400,x	clr_loop        STA DOS_PATH_BUFF,X
.3951f2	e8		inx		                INX
.3951f3	e8		inx		                INX
.3951f4	e0 00 01	cpx #$0100	                CPX #256
.3951f7	d0 f7		bne $3951f0	                BNE clr_loop
.3951f9	a5 20		lda $0340	                LDA DOS_FD_PTR          ; Is the DOS_FD_PTR null?
.3951fb	d0 04		bne $395201	                BNE get_path            ; No: attempt to fetch the path
.3951fd	a5 22		lda $0342	                LDA DOS_FD_PTR+2
.3951ff	f0 27		beq $395228	                BEQ done                ; Yes: return an empty buffer
.395201	a0 02 00	ldy #$0002	get_path        LDY #FILEDESC.PATH      ; Get the path buffer
.395204	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395206	85 28		sta $0348	                STA DOS_TEMP
.395208	c8		iny		                INY
.395209	c8		iny		                INY
.39520a	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39520c	85 2a		sta $034a	                STA DOS_TEMP+2
.39520e	a5 28		lda $0348	                LDA DOS_TEMP            ; Is the path pointer NULL?
.395210	d0 04		bne $395216	                BNE start_copy          ; No: start copying it
.395212	a5 2a		lda $034a	                LDA DOS_TEMP+2
.395214	f0 12		beq $395228	                BEQ done                ; Yes: return an empty buffer
.395216					start_copy
.395216	e2 20		sep #$20	                SEP #$20        ; set A short
.395218	a2 00 00	ldx #$0000	                LDX #0
.39521b	a0 00 00	ldy #$0000	                LDY #0
.39521e	b7 28		lda [$0348],y	loop            LDA [DOS_TEMP],Y
.395220	95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.395222	f0 04		beq $395228	                BEQ done
.395224	e8		inx		                INX
.395225	c8		iny		                INY
.395226	d0 f6		bne $39521e	                BNE loop
.395228	28		plp		done            PLP
.395229	2b		pld		                PLD
.39522a	ab		plb		                PLB
.39522b	7a		ply		                PLY
.39522c	fa		plx		                PLX
.39522d	6b		rtl		                RTL

;******  Return to file: src\sdos.asm

.39522e					DOS_TEST
.39522e	8b		phb		                PHB
.39522f	0b		phd		                PHD
.395230	08		php		                PHP
.395231	48		pha		                PHA             ; begin setdbr macro
.395232	08		php		                PHP
.395233	e2 20		sep #$20	                SEP #$20        ; set A short
.395235	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395237	48		pha		                PHA
.395238	ab		plb		                PLB
.395239	28		plp		                PLP
.39523a	68		pla		                PLA             ; end setdbr macro
.39523b	48		pha		                PHA             ; begin setdp macro
.39523c	08		php		                PHP
.39523d	c2 20		rep #$20	                REP #$20        ; set A long
.39523f	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395242	5b		tcd		                TCD
.395243	28		plp		                PLP
.395244	68		pla		                PLA             ; end setdp macro
.395245	c2 30		rep #$30	                REP #$30        ; set A&X long
.395247	a9 6d 52	lda #$526d	                LDA #<>src_file
.39524a	8f 64 03 00	sta $000364	                STA @l DOS_STR1_PTR
.39524e	a9 39 00	lda #$0039	                LDA #`src_file
.395251	8f 66 03 00	sta $000366	                STA @l DOS_STR1_PTR+2
.395255	a9 7a 52	lda #$527a	                LDA #<>dst_file
.395258	8f 68 03 00	sta $000368	                STA @l DOS_STR2_PTR
.39525c	a9 39 00	lda #$0039	                LDA #`dst_file
.39525f	8f 6a 03 00	sta $00036a	                STA @l DOS_STR2_PTR+2
.395263	22 ff 58 39	jsl $3958ff	                JSL IF_COPY
.395267	b0 00		bcs $395269	                BCS done
.395269	28		plp		done            PLP
.39526a	2b		pld		                PLD
.39526b	ab		plb		                PLB
.39526c	6b		rtl		                RTL
>39526d	40 73 3a 68 65 6c 6c 6f		src_file        .null "@s:hello.bas"
>395275	2e 62 61 73 00
>39527a	40 73 3a 68 65 6c 6c 6f		dst_file        .null "@s:hello2.bas"
>395282	32 2e 62 61 73 00
.395288					IF_OPEN
.395288	da		phx		                PHX
.395289	5a		phy		                PHY
.39528a	0b		phd		                PHD
.39528b	8b		phb		                PHB
.39528c	08		php		                PHP
.39528d	48		pha		                PHA             ; begin setdbr macro
.39528e	08		php		                PHP
.39528f	e2 20		sep #$20	                SEP #$20        ; set A short
.395291	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395293	48		pha		                PHA
.395294	ab		plb		                PLB
.395295	28		plp		                PLP
.395296	68		pla		                PLA             ; end setdbr macro
.395297	48		pha		                PHA             ; begin setdp macro
.395298	08		php		                PHP
.395299	c2 20		rep #$20	                REP #$20        ; set A long
.39529b	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39529e	5b		tcd		                TCD
.39529f	28		plp		                PLP
.3952a0	68		pla		                PLA             ; end setdp macro
.3952a1	e2 20		sep #$20	                SEP #$20        ; set A short
.3952a3	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Get the status to make sure a open is ok
.3952a6	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3952a8	89 38		bit #$38	                BIT #FD_STAT_OPEN
.3952aa	f0 05		beq $3952b1	                BEQ ok_to_open
.3952ac	a9 0f		lda #$0f	                LDA #DOS_ERR_OPEN               ; If already open: throw an error
.3952ae	82 0d 05	brl $3957be	                BRL IF_FAILURE
.3952b1	22 cf 51 39	jsl $3951cf	ok_to_open      JSL DOS_COPYPATH                ; Copy the path to the path buffer
.3952b5	22 57 48 39	jsl $394857	                JSL DOS_FINDFILE                ; Attempt to find the file
.3952b9	b0 03		bcs $3952be	                BCS is_found                    ; If OK: we found the file
.3952bb	82 04 05	brl $3957c2	                BRL IF_PASSFAILURE              ; Otherwise: pass the failure up the chain
.3952be					is_found
.3952be	e2 20		sep #$20	                SEP #$20        ; set A short
.3952c0	a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.3952c3	a5 01		lda $0321	                LDA BIOS_DEV
.3952c5	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3952c7	c2 20		rep #$20	                REP #$20        ; set A long
.3952c9	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Set the buffer point to the one provided in the file
.3952cc	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3952ce	85 1c		sta $033c	                STA DOS_BUFF_PTR
.3952d0	c8		iny		                INY
.3952d1	c8		iny		                INY
.3952d2	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3952d4	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3952d6	22 71 46 39	jsl $394671	                JSL DOS_GETCLUSTER              ; Attempt to load the cluster
.3952da	b0 03		bcs $3952df	                BCS read_cluster
.3952dc	82 e3 04	brl $3957c2	                BRL IF_PASSFAILURE
.3952df	a0 0a 00	ldy #$000a	read_cluster    LDY #FILEDESC.FIRST_CLUSTER     ; Set the first cluster in the file descriptor
.3952e2	a5 10		lda $0330	                LDA DOS_CLUS_ID
.3952e4	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3952e6	c8		iny		                INY
.3952e7	c8		iny		                INY
.3952e8	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3952ea	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3952ec	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Set the current cluster in the file descriptor
.3952ef	a5 10		lda $0330	                LDA DOS_CLUS_ID
.3952f1	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3952f3	c8		iny		                INY
.3952f4	c8		iny		                INY
.3952f5	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3952f7	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3952f9	a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE              ; Copy the filesize from the directory entry to the file descriptor
.3952fc	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3952fe	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE
.395301	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395303	a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.395306	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.395308	a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.39530b	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39530d	e2 20		sep #$20	                SEP #$20        ; set A short
.39530f	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Mark file as open and readable
.395312	a9 39		lda #$39	                LDA #FD_STAT_OPEN | FD_STAT_READ
.395314	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.395316	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395318	82 ae 04	brl $3957c9	                BRL IF_SUCCESS
.39531b					IF_CREATE
.39531b	da		phx		                PHX
.39531c	5a		phy		                PHY
.39531d	0b		phd		                PHD
.39531e	8b		phb		                PHB
.39531f	08		php		                PHP
.395320	48		pha		                PHA             ; begin setdbr macro
.395321	08		php		                PHP
.395322	e2 20		sep #$20	                SEP #$20        ; set A short
.395324	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395326	48		pha		                PHA
.395327	ab		plb		                PLB
.395328	28		plp		                PLP
.395329	68		pla		                PLA             ; end setdbr macro
.39532a	48		pha		                PHA             ; begin setdp macro
.39532b	08		php		                PHP
.39532c	c2 20		rep #$20	                REP #$20        ; set A long
.39532e	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395331	5b		tcd		                TCD
.395332	28		plp		                PLP
.395333	68		pla		                PLA             ; end setdp macro
.395334	22 a2 50 39	jsl $3950a2	                JSL DOS_CREATE                  ; Attempt to create the file
.395338	90 18		bcc $395352	                BCC pass_failure                ; If it fails: pass the failure up the chain
.39533a	c2 30		rep #$30	                REP #$30        ; set A&X long
.39533c	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Sets the current cluster to 0 to make sure the next write appends
.39533f	a9 00 00	lda #$0000	                LDA #0
.395342	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395344	c8		iny		                INY
.395345	c8		iny		                INY
.395346	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395348	e2 20		sep #$20	                SEP #$20        ; set A short
.39534a	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS
.39534d	a9 3a		lda #$3a	                LDA #FD_STAT_OPEN | FD_STAT_WRITE   ; Set the file to open and APPEND only
.39534f	82 77 04	brl $3957c9	                BRL IF_SUCCESS
.395352	82 69 04	brl $3957be	pass_failure    BRL IF_FAILURE
.395355					IF_CLOSE
.395355	da		phx		                PHX
.395356	5a		phy		                PHY
.395357	0b		phd		                PHD
.395358	8b		phb		                PHB
.395359	08		php		                PHP
.39535a	48		pha		                PHA             ; begin setdbr macro
.39535b	08		php		                PHP
.39535c	e2 20		sep #$20	                SEP #$20        ; set A short
.39535e	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395360	48		pha		                PHA
.395361	ab		plb		                PLB
.395362	28		plp		                PLP
.395363	68		pla		                PLA             ; end setdbr macro
.395364	48		pha		                PHA             ; begin setdp macro
.395365	08		php		                PHP
.395366	c2 20		rep #$20	                REP #$20        ; set A long
.395368	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39536b	5b		tcd		                TCD
.39536c	28		plp		                PLP
.39536d	68		pla		                PLA             ; end setdp macro
.39536e	e2 20		sep #$20	                SEP #$20        ; set A short
.395370	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Check to see if we were writing the file
.395373	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395375	89 02		bit #$02	                BIT #FD_STAT_WRITE
.395377	f0 09		beq $395382	                BEQ set_flag                    ; No, just mark it closed
.395379	22 ee 53 39	jsl $3953ee	                JSL IF_WRITE                    ; Attempt to write the cluster
.39537d	b0 03		bcs $395382	                BCS set_flag
.39537f	82 40 04	brl $3957c2	                BRL IF_PASSFAILURE              ; If there was a problem, pass it up the chain
.395382	22 b5 58 39	jsl $3958b5	set_flag        JSL IF_FREEFD                   ; Free the file descriptor as well
.395386	82 40 04	brl $3957c9	                BRL IF_SUCCESS
.395389					IF_READ
.395389	da		phx		                PHX
.39538a	5a		phy		                PHY
.39538b	0b		phd		                PHD
.39538c	8b		phb		                PHB
.39538d	08		php		                PHP
.39538e	48		pha		                PHA             ; begin setdbr macro
.39538f	08		php		                PHP
.395390	e2 20		sep #$20	                SEP #$20        ; set A short
.395392	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395394	48		pha		                PHA
.395395	ab		plb		                PLB
.395396	28		plp		                PLP
.395397	68		pla		                PLA             ; end setdbr macro
.395398	48		pha		                PHA             ; begin setdp macro
.395399	08		php		                PHP
.39539a	c2 20		rep #$20	                REP #$20        ; set A long
.39539c	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39539f	5b		tcd		                TCD
.3953a0	28		plp		                PLP
.3953a1	68		pla		                PLA             ; end setdp macro
.3953a2	c2 10		rep #$10	                REP #$10        ; set X long
.3953a4	e2 20		sep #$20	                SEP #$20        ; set A short
.3953a6					get_dev
.3953a6	e2 20		sep #$20	                SEP #$20        ; set A short
.3953a8	a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.3953ab	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3953ad	85 01		sta $0321	                STA BIOS_DEV
.3953af	22 f5 43 39	jsl $3943f5	                JSL DOS_MOUNT                   ; Make sure the device is mounted (if needed)
.3953b3	c2 20		rep #$20	                REP #$20        ; set A long
.3953b5	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.3953b8	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3953ba	85 10		sta $0330	                STA DOS_CLUS_ID
.3953bc	c8		iny		                INY
.3953bd	c8		iny		                INY
.3953be	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3953c0	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3953c2	22 7c 4a 39	jsl $394a7c	                JSL NEXTCLUSTER                 ; Find the next cluster of the file
.3953c6	90 13		bcc $3953db	                BCC pass_failure                ; If not OK: pass the failure up the chain
.3953c8	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.3953cb	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3953cd	85 1c		sta $033c	                STA DOS_BUFF_PTR
.3953cf	c8		iny		                INY
.3953d0	c8		iny		                INY
.3953d1	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3953d3	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3953d5	22 71 46 39	jsl $394671	                JSL DOS_GETCLUSTER              ; Get the cluster
.3953d9	b0 03		bcs $3953de	                BCS ret_success                 ; If ok: return success
.3953db					pass_failure
.3953db	82 e4 03	brl $3957c2	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.3953de	a0 06 00	ldy #$0006	ret_success     LDY #FILEDESC.CLUSTER           ; Save the new cluster as the file's current cluster
.3953e1	a5 10		lda $0330	                LDA DOS_CLUS_ID
.3953e3	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3953e5	c8		iny		                INY
.3953e6	c8		iny		                INY
.3953e7	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3953e9	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3953eb	82 db 03	brl $3957c9	                BRL IF_SUCCESS
.3953ee					IF_WRITE
.3953ee	da		phx		                PHX
.3953ef	5a		phy		                PHY
.3953f0	0b		phd		                PHD
.3953f1	8b		phb		                PHB
.3953f2	08		php		                PHP
.3953f3	48		pha		                PHA             ; begin setdbr macro
.3953f4	08		php		                PHP
.3953f5	e2 20		sep #$20	                SEP #$20        ; set A short
.3953f7	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3953f9	48		pha		                PHA
.3953fa	ab		plb		                PLB
.3953fb	28		plp		                PLP
.3953fc	68		pla		                PLA             ; end setdbr macro
.3953fd	48		pha		                PHA             ; begin setdp macro
.3953fe	08		php		                PHP
.3953ff	c2 20		rep #$20	                REP #$20        ; set A long
.395401	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395404	5b		tcd		                TCD
.395405	28		plp		                PLP
.395406	68		pla		                PLA             ; end setdp macro
.395407	c2 10		rep #$10	                REP #$10        ; set X long
.395409	e2 20		sep #$20	                SEP #$20        ; set A short
.39540b	a0 01 00	ldy #$0001	get_dev         LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.39540e	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395410	85 01		sta $0321	                STA BIOS_DEV
.395412	22 f5 43 39	jsl $3943f5	                JSL DOS_MOUNT                   ; Make sure the device is mounted (if needed)
.395416	c2 20		rep #$20	                REP #$20        ; set A long
.395418	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.39541b	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39541d	85 1c		sta $033c	                STA DOS_BUFF_PTR
.39541f	c8		iny		                INY
.395420	c8		iny		                INY
.395421	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395423	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.395425	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.395428	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39542a	85 10		sta $0330	                STA DOS_CLUS_ID
.39542c	c8		iny		                INY
.39542d	c8		iny		                INY
.39542e	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395430	85 12		sta $0332	                STA DOS_CLUS_ID+2
.395432	d0 1a		bne $39544e	                BNE rewrite_cluster             ; If the cluster ID <> 0, overwrite it
.395434	a5 10		lda $0330	                LDA DOS_CLUS_ID
.395436	d0 16		bne $39544e	                BNE rewrite_cluster
.395438	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Get the file's first cluster
.39543b	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39543d	85 10		sta $0330	                STA DOS_CLUS_ID
.39543f	c8		iny		                INY
.395440	c8		iny		                INY
.395441	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395443	85 12		sta $0332	                STA DOS_CLUS_ID+2
.395445	22 70 4e 39	jsl $394e70	                JSL DOS_APPENDCLUS              ; Append the cluster
.395449	b0 0c		bcs $395457	                BCS ret_success                 ; If OK: return success
.39544b	82 74 03	brl $3957c2	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.39544e	22 ae 46 39	jsl $3946ae	rewrite_cluster JSL DOS_PUTCLUSTER              ; Over-write the cluster
.395452	b0 03		bcs $395457	                BCS ret_success                 ; If ok: return success
.395454	82 6b 03	brl $3957c2	pass_failure    BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.395457	82 6f 03	brl $3957c9	ret_success     BRL IF_SUCCESS
.39545a					IF_DIROPEN
.39545a	da		phx		                PHX
.39545b	5a		phy		                PHY
.39545c	0b		phd		                PHD
.39545d	8b		phb		                PHB
.39545e	08		php		                PHP
.39545f	48		pha		                PHA             ; begin setdbr macro
.395460	08		php		                PHP
.395461	e2 20		sep #$20	                SEP #$20        ; set A short
.395463	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395465	48		pha		                PHA
.395466	ab		plb		                PLB
.395467	28		plp		                PLP
.395468	68		pla		                PLA             ; end setdbr macro
.395469	48		pha		                PHA             ; begin setdp macro
.39546a	08		php		                PHP
.39546b	c2 20		rep #$20	                REP #$20        ; set A long
.39546d	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395470	5b		tcd		                TCD
.395471	28		plp		                PLP
.395472	68		pla		                PLA             ; end setdp macro
.395473	c2 30		rep #$30	                REP #$30        ; set A&X long
.395475	22 cf 51 39	jsl $3951cf	                JSL DOS_COPYPATH            ; Copy the path from the file descriptor to the path buffer
.395479	22 bf 47 39	jsl $3947bf	                JSL DOS_PARSE_PATH          ; Parse the path
.39547d	22 f5 43 39	jsl $3943f5	                JSL DOS_MOUNT               ; Make sure we've mounted the SDC.
.395481	b0 03		bcs $395486	                BCS get_root_dir            ; If successful: get the root directory
.395483	82 3c 03	brl $3957c2	                BRL IF_PASSFAILURE          ; Otherwise: pass the error up the chain
.395486					get_root_dir
.395486	c2 30		rep #$30	                REP #$30        ; set A&X long
.395488	22 e2 40 39	jsl $3940e2	                JSL DOS_DIROPEN
.39548c	b0 03		bcs $395491	                BCS success
.39548e	82 31 03	brl $3957c2	                BRL IF_PASSFAILURE
.395491	82 35 03	brl $3957c9	success         BRL IF_SUCCESS
.395494					IF_DIRNEXT
.395494	5c 7c 41 39	jmp $39417c	                JML DOS_DIRNEXT
.395498					IF_DELETE
.395498	da		phx		                PHX
.395499	5a		phy		                PHY
.39549a	0b		phd		                PHD
.39549b	8b		phb		                PHB
.39549c	08		php		                PHP
.39549d	48		pha		                PHA             ; begin setdbr macro
.39549e	08		php		                PHP
.39549f	e2 20		sep #$20	                SEP #$20        ; set A short
.3954a1	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3954a3	48		pha		                PHA
.3954a4	ab		plb		                PLB
.3954a5	28		plp		                PLP
.3954a6	68		pla		                PLA             ; end setdbr macro
.3954a7	48		pha		                PHA             ; begin setdp macro
.3954a8	08		php		                PHP
.3954a9	c2 20		rep #$20	                REP #$20        ; set A long
.3954ab	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3954ae	5b		tcd		                TCD
.3954af	28		plp		                PLP
.3954b0	68		pla		                PLA             ; end setdp macro
.3954b1	c2 30		rep #$30	                REP #$30        ; set A&X long
.3954b3	22 57 48 39	jsl $394857	                JSL DOS_FINDFILE
.3954b7	b0 03		bcs $3954bc	                BCS get_first_clus
.3954b9	82 06 03	brl $3957c2	                BRL IF_PASSFAILURE
.3954bc					get_first_clus
.3954bc	a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.3954bf	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3954c1	85 10		sta $0330	                STA DOS_CLUS_ID
.3954c3	a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.3954c6	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3954c8	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3954ca	a5 10		lda $0330	                LDA DOS_CLUS_ID
.3954cc	8d 2a a0	sta $38a02a	                STA DOS_CURR_CLUS
.3954cf	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3954d1	8d 2c a0	sta $38a02c	                STA DOS_CURR_CLUS+2
.3954d4	22 7c 4a 39	jsl $394a7c	del_loop        JSL NEXTCLUSTER
.3954d8	90 2f		bcc $395509	                BCC del_one
.3954da	a5 10		lda $0330	                LDA DOS_CLUS_ID
.3954dc	8d 2e a0	sta $38a02e	                STA DOS_NEXT_CLUS
.3954df	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3954e1	8d 30 a0	sta $38a030	                STA DOS_NEXT_CLUS+2
.3954e4	ad 2a a0	lda $38a02a	                LDA DOS_CURR_CLUS
.3954e7	85 10		sta $0330	                STA DOS_CLUS_ID
.3954e9	ad 2c a0	lda $38a02c	                LDA DOS_CURR_CLUS+2
.3954ec	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3954ee	22 30 4e 39	jsl $394e30	                JSL DELCLUSTER32
.3954f2	b0 03		bcs $3954f7	                BCS go_next
.3954f4	82 cb 02	brl $3957c2	                BRL IF_PASSFAILURE
.3954f7					go_next
.3954f7	ad 2e a0	lda $38a02e	                LDA DOS_NEXT_CLUS
.3954fa	85 10		sta $0330	                STA DOS_CLUS_ID
.3954fc	8d 2a a0	sta $38a02a	                STA DOS_CURR_CLUS
.3954ff	ad 30 a0	lda $38a030	                LDA DOS_NEXT_CLUS+2
.395502	85 12		sta $0332	                STA DOS_CLUS_ID+2
.395504	8d 2c a0	sta $38a02c	                STA DOS_CURR_CLUS+2
.395507	80 cb		bra $3954d4	                BRA del_loop
.395509					del_one
.395509	ad 2a a0	lda $38a02a	                LDA DOS_CURR_CLUS
.39550c	85 10		sta $0330	                STA DOS_CLUS_ID
.39550e	ad 2c a0	lda $38a02c	                LDA DOS_CURR_CLUS+2
.395511	85 12		sta $0332	                STA DOS_CLUS_ID+2
.395513	22 8a 4d 39	jsl $394d8a	                JSL DELCLUSTER
.395517	b0 03		bcs $39551c	                BCS free_dir_entry
.395519	82 a6 02	brl $3957c2	                BRL IF_PASSFAILURE
.39551c					free_dir_entry
.39551c	e2 20		sep #$20	                SEP #$20        ; set A short
.39551e	a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME         ; Flag the directory entry as deleted
.395521	a9 e5		lda #$e5	                LDA #DOS_DIR_ENT_UNUSED
.395523	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395525	22 fb 42 39	jsl $3942fb	                JSL DOS_DIRWRITE                ; Write the directory entry back
.395529	b0 03		bcs $39552e	                BCS ret_success
.39552b	82 94 02	brl $3957c2	                BRL IF_PASSFAILURE
.39552e	82 98 02	brl $3957c9	ret_success     BRL IF_SUCCESS
.395531					IF_DIRREAD
.395531	da		phx		                PHX
.395532	5a		phy		                PHY
.395533	0b		phd		                PHD
.395534	8b		phb		                PHB
.395535	08		php		                PHP
.395536	48		pha		                PHA             ; begin setdbr macro
.395537	08		php		                PHP
.395538	e2 20		sep #$20	                SEP #$20        ; set A short
.39553a	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39553c	48		pha		                PHA
.39553d	ab		plb		                PLB
.39553e	28		plp		                PLP
.39553f	68		pla		                PLA             ; end setdbr macro
.395540	48		pha		                PHA             ; begin setdp macro
.395541	08		php		                PHP
.395542	c2 20		rep #$20	                REP #$20        ; set A long
.395544	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395547	5b		tcd		                TCD
.395548	28		plp		                PLP
.395549	68		pla		                PLA             ; end setdp macro
.39554a	c2 30		rep #$30	                REP #$30        ; set A&X long
.39554c	22 57 48 39	jsl $394857	                JSL DOS_FINDFILE
.395550	b0 03		bcs $395555	                BCS success
.395552	82 69 02	brl $3957be	                BRL IF_FAILURE
.395555	82 71 02	brl $3957c9	success         BRL IF_SUCCESS
.395558					IF_DIRWRITE
.395558	5c fb 42 39	jmp $3942fb	                JML DOS_DIRWRITE
.39555c					IF_LOAD
.39555c	da		phx		                PHX
.39555d	5a		phy		                PHY
.39555e	0b		phd		                PHD
.39555f	8b		phb		                PHB
.395560	08		php		                PHP
.395561	48		pha		                PHA             ; begin setdbr macro
.395562	08		php		                PHP
.395563	e2 20		sep #$20	                SEP #$20        ; set A short
.395565	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395567	48		pha		                PHA
.395568	ab		plb		                PLB
.395569	28		plp		                PLP
.39556a	68		pla		                PLA             ; end setdbr macro
.39556b	48		pha		                PHA             ; begin setdp macro
.39556c	08		php		                PHP
.39556d	c2 20		rep #$20	                REP #$20        ; set A long
.39556f	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395572	5b		tcd		                TCD
.395573	28		plp		                PLP
.395574	68		pla		                PLA             ; end setdp macro
.395575	c2 30		rep #$30	                REP #$30        ; set A&X long
.395577	22 88 52 39	jsl $395288	                JSL IF_OPEN
.39557b	b0 03		bcs $395580	                BCS setup                   ; If success: start setting things up
.39557d	82 42 02	brl $3957c2	                BRL IF_PASSFAILURE          ; Otherwise: pass the failure up the chain
.395580					setup
.395580	c2 20		rep #$20	                REP #$20        ; set A long
.395582	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE          ; Record the size of the file in DOS_FILE_SIZE
.395585	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395587	85 2c		sta $034c	                STA DOS_FILE_SIZE
.395589	c8		iny		                INY
.39558a	c8		iny		                INY
.39558b	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39558d	85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.39558f	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; Set up the source pointer
.395592	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395594	85 30		sta $0350	                STA DOS_SRC_PTR
.395596	c8		iny		                INY
.395597	c8		iny		                INY
.395598	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39559a	85 32		sta $0352	                STA DOS_SRC_PTR+2
.39559c	a5 36		lda $0356	                LDA DOS_DST_PTR+2           ; Is there a destination address in RAM?
.39559e	c9 40 00	cmp #$0040	                CMP #$0040
.3955a1	b0 04		bcs $3955a7	                BGE load_by_type            ; No: try to load it by type
.3955a3	5c 71 56 39	jmp $395671	                JML IF_LOADRAW              ; Otherwise, load it to the supplied destination
.3955a7	a0 08 00	ldy #$0008	load_by_type    LDY #8                      ; Point to the first extension byte
.3955aa	a2 00 00	ldx #$0000	                LDX #0                      ; and the first byte of the table
.3955ad					type_loop
.3955ad	e2 20		sep #$20	                SEP #$20        ; set A short
.3955af	bf f3 55 39	lda $3955f3,x	                LDA LOAD_TYPE_TABLE,X       ; Get 1st extension character of the entry
.3955b3	f0 37		beq $3955ec	                BEQ no_match                ; If NULL... we didn't get a match
.3955b5	d9 3a a0	cmp $38a03a,y	                CMP DOS_SHORT_NAME,Y        ; Get the character of the extension
.3955b8	d0 28		bne $3955e2	                BNE next_entry              ; If they don't match, try the next entry
.3955ba	bf f4 55 39	lda $3955f4,x	                LDA LOAD_TYPE_TABLE+1,X     ; Get 2nd extension character of the entry
.3955be	d9 3b a0	cmp $38a03b,y	                CMP DOS_SHORT_NAME+1,Y      ; Get the 2nd character of the extension
.3955c1	d0 1f		bne $3955e2	                BNE next_entry              ; If they don't match, try the next entry
.3955c3	bf f5 55 39	lda $3955f5,x	                LDA LOAD_TYPE_TABLE+2,X     ; Get 3rd extension character of the entry
.3955c7	d9 3c a0	cmp $38a03c,y	                CMP DOS_SHORT_NAME+2,Y      ; Get the 3rd character of the extension
.3955ca	d0 16		bne $3955e2	                BNE next_entry              ; If they don't match, try the next entry
.3955cc	c2 20		rep #$20	                REP #$20        ; set A long
.3955ce	bf f6 55 39	lda $3955f6,x	                LDA LOAD_TYPE_TABLE+3,X     ; Get the low word of the address
.3955d2	85 28		sta $0348	                STA DOS_TEMP                ; Save it to the jump vector
.3955d4	e2 20		sep #$20	                SEP #$20        ; set A short
.3955d6	bf f8 55 39	lda $3955f8,x	                LDA LOAD_TYPE_TABLE+5,X     ; Get the high byte of the address
.3955da	85 2a		sta $034a	                STA DOS_TEMP+2              ; Save it to the jump vector
.3955dc	a2 00 00	ldx #$0000	                LDX #0
.3955df	dc 48 03	jmp [$0348]	                JML [DOS_TEMP]              ; Jump to the loading routine
.3955e2					next_entry
.3955e2	c2 30		rep #$30	                REP #$30        ; set A&X long
.3955e4	8a		txa		                TXA
.3955e5	18		clc		                CLC
.3955e6	69 06 00	adc #$0006	                ADC #6
.3955e9	aa		tax		                TAX
.3955ea	80 c1		bra $3955ad	                BRA type_loop               ; And check it against the file
.3955ec					no_match
.3955ec	e2 20		sep #$20	                SEP #$20        ; set A short
.3955ee	a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC         ; Return an not-executable error
.3955f0	82 cb 01	brl $3957be	                BRL IF_FAILURE
>3955f3	50 47 58			LOAD_TYPE_TABLE .text "PGX"                 ; "PGX" --> IF_LOADPGX
>3955f6	fa 55				                .word <>IF_LOADPGX
>3955f8	39				                .byte `IF_LOADPGX
>3955f9	00				                .byte 0
.3955fa					IF_LOADPGX
.3955fa	c2 10		rep #$10	                REP #$10        ; set X long
.3955fc	e2 20		sep #$20	                SEP #$20        ; set A short
.3955fe	a0 00 00	ldy #$0000	                LDY #0
.395601	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Check for "PGX" signature
.395603	c9 50		cmp #$50	                CMP #'P'
.395605	d0 15		bne $39561c	                BNE fail_sig                        ; If not found, fail
.395607	c8		iny		                INY
.395608	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.39560a	c9 47		cmp #$47	                CMP #'G'
.39560c	d0 0e		bne $39561c	                BNE fail_sig
.39560e	c8		iny		                INY
.39560f	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.395611	c9 58		cmp #$58	                CMP #'X'
.395613	d0 07		bne $39561c	                BNE fail_sig
.395615	c8		iny		                INY                                 ; Check for CPU and version code ($01 for 65816)
.395616	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.395618	c9 01		cmp #$01	                CMP #$01
.39561a	f0 06		beq $395622	                BEQ get_dest                        ; All passes: go to get the destination address
.39561c	a9 10		lda #$10	fail_sig        LDA #DOS_ERR_PGXSIG                 ; Fail with a PGXSIG error code
.39561e	22 be 57 39	jsl $3957be	                JSL IF_FAILURE
.395622					get_dest
.395622	c2 20		rep #$20	                REP #$20        ; set A long
.395624	c8		iny		                INY
.395625	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get low word of destination address
.395627	85 34		sta $0354	                STA DOS_DST_PTR                     ; And save it to the destination pointer
.395629	85 3c		sta $035c	                STA DOS_RUN_PTR                     ; And save it to the RUN pointer
.39562b	c8		iny		                INY
.39562c	c8		iny		                INY
.39562d	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get high word of destination address
.39562f	85 36		sta $0356	                STA DOS_DST_PTR+2
.395631	85 3e		sta $035e	                STA DOS_RUN_PTR+2
.395633	c8		iny		                INY                                 ; Point to the first data byte
.395634	c8		iny		                INY
.395635					copy_loop
.395635	e2 20		sep #$20	                SEP #$20        ; set A short
.395637	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Read a byte from the file
.395639	87 34		sta [$0354]	                STA [DOS_DST_PTR]                   ; Write it to the destination
.39563b	c2 20		rep #$20	                REP #$20        ; set A long
.39563d	e6 34		inc $0354	                INC DOS_DST_PTR                     ; Move to the next destination location
.39563f	d0 02		bne $395643	                BNE dec_file_size
.395641	e6 34		inc $0354	                INC DOS_DST_PTR
.395643	38		sec		dec_file_size   SEC                                 ; Count down the number of bytes to read
.395644	a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.395646	e9 01 00	sbc #$0001	                SBC #1
.395649	85 2c		sta $034c	                STA DOS_FILE_SIZE
.39564b	a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.39564d	e9 00 00	sbc #$0000	                SBC #0
.395650	85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.395652	a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Are we at the end of the file?
.395654	d0 04		bne $39565a	                BNE next_byte
.395656	a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.395658	f0 14		beq $39566e	                BEQ done                            ; Yes: we're done
.39565a	c8		iny		next_byte       INY                                 ; Otherwise, move to the next source location
.39565b	cc 0e a0	cpy $38a00e	                CPY CLUSTER_SIZE                    ; Are we at the end of the cluster?
.39565e	d0 d5		bne $395635	                BNE copy_loop                       ; No: keep copying
.395660	22 60 4b 39	jsl $394b60	                JSL DOS_READNEXT                    ; Yes: Load the next cluster
.395664	b0 03		bcs $395669	                BCS next_cluster
.395666	82 59 01	brl $3957c2	                BRL IF_PASSFAILURE                  ; If failed: pass that up the chain
.395669	a0 00 00	ldy #$0000	next_cluster    LDY #0                              ; Reset the source index
.39566c	80 c7		bra $395635	                BRA copy_loop                       ; Go back to copying
.39566e	82 58 01	brl $3957c9	done            BRL IF_SUCCESS
.395671					IF_LOADRAW
.395671	c2 30		rep #$30	                REP #$30        ; set A&X long
.395673	a0 00 00	ldy #$0000	copy_cluster    LDY #0
.395676					copy_loop
.395676	e2 20		sep #$20	                SEP #$20        ; set A short
.395678	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y         ; Copy byte from cluster to destination
.39567a	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.39567c	c2 20		rep #$20	                REP #$20        ; set A long
.39567e	38		sec		                SEC                         ; Count down the number of bytes left
.39567f	a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.395681	e9 01 00	sbc #$0001	                SBC #1
.395684	85 2c		sta $034c	                STA DOS_FILE_SIZE
.395686	a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.395688	e9 00 00	sbc #$0000	                SBC #0
.39568b	85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.39568d	d0 04		bne $395693	                BNE continue
.39568f	a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.395691	f0 1b		beq $3956ae	                BEQ close_file              ; If not: we're done
.395693	c8		iny		continue        INY
.395694	cc 0e a0	cpy $38a00e	                CPY CLUSTER_SIZE            ; Are we done with the cluster?
.395697	d0 dd		bne $395676	                BNE copy_loop               ; No: keep processing the bytes
.395699	18		clc		                CLC                         ; Advance the destination pointer to the next chunk of memory
.39569a	a5 34		lda $0354	                LDA DOS_DST_PTR
.39569c	6d 0e a0	adc $38a00e	                ADC CLUSTER_SIZE
.39569f	85 34		sta $0354	                STA DOS_DST_PTR
.3956a1	a5 36		lda $0356	                LDA DOS_DST_PTR+2
.3956a3	69 00 00	adc #$0000	                ADC #0
.3956a6	85 36		sta $0356	                STA DOS_DST_PTR+2
.3956a8	22 89 53 39	jsl $395389	                JSL IF_READ                 ; Yes: load the next cluster
.3956ac	b0 c5		bcs $395673	                BCS copy_cluster            ; And start copying it
.3956ae					close_file
.3956ae	82 18 01	brl $3957c9	ret_success     BRL IF_SUCCESS
.3956b1					IF_NULLBUFFER
.3956b1	5a		phy		                PHY
.3956b2	8b		phb		                PHB
.3956b3	0b		phd		                PHD
.3956b4	08		php		                PHP
.3956b5	48		pha		                PHA             ; begin setdbr macro
.3956b6	08		php		                PHP
.3956b7	e2 20		sep #$20	                SEP #$20        ; set A short
.3956b9	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3956bb	48		pha		                PHA
.3956bc	ab		plb		                PLB
.3956bd	28		plp		                PLP
.3956be	68		pla		                PLA             ; end setdbr macro
.3956bf	48		pha		                PHA             ; begin setdp macro
.3956c0	08		php		                PHP
.3956c1	c2 20		rep #$20	                REP #$20        ; set A long
.3956c3	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3956c6	5b		tcd		                TCD
.3956c7	28		plp		                PLP
.3956c8	68		pla		                PLA             ; end setdp macro
.3956c9	c2 30		rep #$30	                REP #$30        ; set A&X long
.3956cb	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.3956ce	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3956d0	85 28		sta $0348	                STA DOS_TEMP
.3956d2	c8		iny		                INY
.3956d3	c8		iny		                INY
.3956d4	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3956d6	85 2a		sta $034a	                STA DOS_TEMP+2
.3956d8	a0 00 00	ldy #$0000	                LDY #0
.3956db	a9 00 00	lda #$0000	                LDA #0
.3956de	97 28		sta [$0348],y	loop            STA [DOS_TEMP],Y
.3956e0	c8		iny		                INY
.3956e1	c8		iny		                INY
.3956e2	c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE
.3956e5	d0 f7		bne $3956de	                BNE loop
.3956e7	28		plp		                PLP
.3956e8	2b		pld		                PLD
.3956e9	ab		plb		                PLB
.3956ea	7a		ply		                PLY
.3956eb	6b		rtl		                RTL
.3956ec					IF_COPY2BUFF
.3956ec	5a		phy		                PHY
.3956ed	8b		phb		                PHB
.3956ee	0b		phd		                PHD
.3956ef	08		php		                PHP
.3956f0	48		pha		                PHA             ; begin setdbr macro
.3956f1	08		php		                PHP
.3956f2	e2 20		sep #$20	                SEP #$20        ; set A short
.3956f4	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3956f6	48		pha		                PHA
.3956f7	ab		plb		                PLB
.3956f8	28		plp		                PLP
.3956f9	68		pla		                PLA             ; end setdbr macro
.3956fa	48		pha		                PHA             ; begin setdp macro
.3956fb	08		php		                PHP
.3956fc	c2 20		rep #$20	                REP #$20        ; set A long
.3956fe	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395701	5b		tcd		                TCD
.395702	28		plp		                PLP
.395703	68		pla		                PLA             ; end setdp macro
.395704	c2 30		rep #$30	                REP #$30        ; set A&X long
.395706	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.395709	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39570b	85 28		sta $0348	                STA DOS_TEMP
.39570d	c8		iny		                INY
.39570e	c8		iny		                INY
.39570f	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395711	85 2a		sta $034a	                STA DOS_TEMP+2
.395713	a0 00 00	ldy #$0000	                LDY #0
.395716					copy_loop
.395716	e2 20		sep #$20	                SEP #$20        ; set A short
.395718	a7 30		lda [$0350]	                LDA [DOS_SRC_PTR]           ; Copy a byte
.39571a	97 28		sta [$0348],y	                STA [DOS_TEMP],Y
.39571c	c2 20		rep #$20	                REP #$20        ; set A long
.39571e	c8		iny		                INY                         ; Count it
.39571f	c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE        ; Have we reached the limit?
.395722	f0 14		beq $395738	                BEQ done                    ; Yes: we're done
.395724	a5 30		lda $0350	                LDA DOS_SRC_PTR             ; Check if we copied the last byte
.395726	c5 38		cmp $0358	                CMP DOS_END_PTR
.395728	d0 06		bne $395730	                BNE next_byte
.39572a	a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.39572c	c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.39572e	f0 08		beq $395738	                BEQ done                    ; Yes: we're done
.395730	e6 30		inc $0350	next_byte       INC DOS_SRC_PTR             ; No: advance the source pointer
.395732	d0 e2		bne $395716	                BNE copy_loop
.395734	e6 32		inc $0352	                INC DOS_SRC_PTR+2
.395736	80 de		bra $395716	                BRA copy_loop               ; And try this next byte
.395738	28		plp		done            PLP
.395739	2b		pld		                PLD
.39573a	ab		plb		                PLB
.39573b	7a		ply		                PLY
.39573c	6b		rtl		                RTL
.39573d					IF_SAVE
.39573d	da		phx		                PHX
.39573e	5a		phy		                PHY
.39573f	0b		phd		                PHD
.395740	8b		phb		                PHB
.395741	08		php		                PHP
.395742	48		pha		                PHA             ; begin setdbr macro
.395743	08		php		                PHP
.395744	e2 20		sep #$20	                SEP #$20        ; set A short
.395746	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395748	48		pha		                PHA
.395749	ab		plb		                PLB
.39574a	28		plp		                PLP
.39574b	68		pla		                PLA             ; end setdbr macro
.39574c	48		pha		                PHA             ; begin setdp macro
.39574d	08		php		                PHP
.39574e	c2 20		rep #$20	                REP #$20        ; set A long
.395750	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395753	5b		tcd		                TCD
.395754	28		plp		                PLP
.395755	68		pla		                PLA             ; end setdp macro
.395756	c2 30		rep #$30	                REP #$30        ; set A&X long
.395758	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE := DOS_END_PTR - DOS_SRC_PTR
.39575b	38		sec		                SEC
.39575c	a5 38		lda $0358	                LDA DOS_END_PTR
.39575e	e5 30		sbc $0350	                SBC DOS_SRC_PTR
.395760	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395762	c8		iny		                INY
.395763	c8		iny		                INY
.395764	a5 3a		lda $035a	                LDA DOS_END_PTR+2
.395766	e5 32		sbc $0352	                SBC DOS_SRC_PTR+2
.395768	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39576a	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE++
.39576d	18		clc		                CLC
.39576e	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395770	69 01 00	adc #$0001	                ADC #1
.395773	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395775	90 09		bcc $395780	                BCC first_block
.395777	c8		iny		                INY
.395778	c8		iny		                INY
.395779	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39577b	69 00 00	adc #$0000	                ADC #0
.39577e	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395780	22 b1 56 39	jsl $3956b1	first_block     JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.395784	22 ec 56 39	jsl $3956ec	                JSL IF_COPY2BUFF        ; Copy first (at most) 512 bytes of data to FD buffer
.395788	22 1b 53 39	jsl $39531b	                JSL IF_CREATE           ; Create file.
.39578c	b0 03		bcs $395791	                BCS check_for_end
.39578e	82 31 00	brl $3957c2	                BRL IF_PASSFAILURE      ; If we couldn't create the file, pass the failure up
.395791	a5 30		lda $0350	check_for_end   LDA DOS_SRC_PTR         ; Check if we copied the last byte
.395793	c5 38		cmp $0358	                CMP DOS_END_PTR
.395795	d0 06		bne $39579d	                BNE next_block
.395797	a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.395799	c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.39579b	f0 1d		beq $3957ba	                BEQ done                ; Yes: we're done
.39579d	22 b1 56 39	jsl $3956b1	next_block      JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.3957a1	22 ec 56 39	jsl $3956ec	                JSL IF_COPY2BUFF        ; Copy next (at most) 512 bytes of data to FD buffer
.3957a5	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER   ; Make sure the CLUSTER is 0 to force an append
.3957a8	a9 00 00	lda #$0000	                LDA #0
.3957ab	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3957ad	c8		iny		                INY
.3957ae	c8		iny		                INY
.3957af	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3957b1	22 ee 53 39	jsl $3953ee	                JSL IF_WRITE            ; Append to the file
.3957b5	b0 da		bcs $395791	                BCS check_for_end       ; And try again
.3957b7	82 08 00	brl $3957c2	                BRL IF_PASSFAILURE      ; If we couldn't update the file, pass the failure up
.3957ba	5c c9 57 39	jmp $3957c9	done            JML IF_SUCCESS
.3957be					IF_FAILURE
.3957be	e2 20		sep #$20	                SEP #$20        ; set A short
.3957c0	85 0e		sta $032e	                STA DOS_STATUS
.3957c2	28		plp		IF_PASSFAILURE  PLP
.3957c3	18		clc		                CLC
.3957c4	ab		plb		                PLB
.3957c5	2b		pld		                PLD
.3957c6	7a		ply		                PLY
.3957c7	fa		plx		                PLX
.3957c8	6b		rtl		                RTL
.3957c9					IF_SUCCESS
.3957c9	e2 20		sep #$20	                SEP #$20        ; set A short
.3957cb	64 00		stz $0320	                STZ BIOS_STATUS
.3957cd	64 0e		stz $032e	                STZ DOS_STATUS
.3957cf	28		plp		                PLP
.3957d0	38		sec		                SEC
.3957d1	ab		plb		                PLB
.3957d2	2b		pld		                PLD
.3957d3	7a		ply		                PLY
.3957d4	fa		plx		                PLX
.3957d5	6b		rtl		                RTL
.3957d6					IF_RUN
.3957d6	da		phx		                PHX
.3957d7	5a		phy		                PHY
.3957d8	0b		phd		                PHD
.3957d9	8b		phb		                PHB
.3957da	08		php		                PHP
.3957db	48		pha		                PHA             ; begin setdbr macro
.3957dc	08		php		                PHP
.3957dd	e2 20		sep #$20	                SEP #$20        ; set A short
.3957df	a9 00		lda #$00	                LDA #0
.3957e1	48		pha		                PHA
.3957e2	ab		plb		                PLB
.3957e3	28		plp		                PLP
.3957e4	68		pla		                PLA             ; end setdbr macro
.3957e5	48		pha		                PHA             ; begin setdp macro
.3957e6	08		php		                PHP
.3957e7	c2 20		rep #$20	                REP #$20        ; set A long
.3957e9	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3957ec	5b		tcd		                TCD
.3957ed	28		plp		                PLP
.3957ee	68		pla		                PLA             ; end setdp macro
.3957ef	e2 20		sep #$20	                SEP #$20        ; set A short
.3957f1	c2 10		rep #$10	                REP #$10        ; set X long
.3957f3	a9 00		lda #$00	                LDA #0                                  ; Zero out the file descriptor
.3957f5	a2 00 00	ldx #$0000	                LDX #0
.3957f8	9f 00 ad 38	sta $38ad00,x	clr_fd_loop     STA @l DOS_SPARE_FD,X
.3957fc	e8		inx		                INX
.3957fd	e0 20 00	cpx #$0020	                CPX #SIZE(FILEDESC)
.395800	d0 f6		bne $3957f8	                BNE clr_fd_loop
.395802	c2 20		rep #$20	                REP #$20        ; set A long
.395804	a9 00 ab	lda #$ab00	                LDA #<>DOS_SPARE_SECTOR                 ; Set the buffer for the file descriptor
.395807	8f 0e ad 38	sta $38ad0e	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER
.39580b	a9 38 00	lda #$0038	                LDA #`DOS_SPARE_SECTOR
.39580e	8f 10 ad 38	sta $38ad10	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER+2
.395812	a5 40		lda $0360	                LDA DOS_RUN_PARAM                        ; Set the path for the file descriptor
.395814	8f 02 ad 38	sta $38ad02	                STA @l DOS_SPARE_FD+FILEDESC.PATH
.395818	a5 42		lda $0362	                LDA DOS_RUN_PARAM+2
.39581a	8f 04 ad 38	sta $38ad04	                STA @l DOS_SPARE_FD+FILEDESC.PATH+2
.39581e	a9 00 00	lda #$0000	                LDA #0                                  ; Clear the run pointer
.395821	85 3c		sta $035c	                STA DOS_RUN_PTR                         ; This is used to check that we loaded an executable binary
.395823	85 3e		sta $035e	                STA DOS_RUN_PTR+2
.395825	a9 00 ad	lda #$ad00	                LDA #<>DOS_SPARE_FD
.395828	85 20		sta $0340	                STA DOS_FD_PTR
.39582a	a9 38 00	lda #$0038	                LDA #`DOS_SPARE_FD
.39582d	85 22		sta $0342	                STA DOS_FD_PTR+2
.39582f	a9 ff ff	lda #$ffff	                LDA #$FFFF                              ; We want to load to the address provided by the file
.395832	8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.395836	8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.39583a	22 18 11 38	jsl $381118	                JSL F_LOAD                              ; Try to load the file
.39583e	b0 14		bcs $395854	                BCS try_execute
.395840	82 7f ff	brl $3957c2	                BRL IF_PASSFAILURE                      ; On error: pass failure up the chain
.395843					chk_execute
.395843	c2 20		rep #$20	                REP #$20        ; set A long
.395845	a5 3c		lda $035c	                LDA DOS_RUN_PTR                         ; Check to see if we got a startup address back
.395847	d0 0b		bne $395854	                BNE try_execute                         ; If so: call it
.395849	a5 3e		lda $035e	                LDA DOS_RUN_PTR+2
.39584b	d0 07		bne $395854	                BNE try_execute
.39584d	e2 20		sep #$20	                SEP #$20        ; set A short
.39584f	a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC                     ; If not: return an error that it's not executable
.395851	82 6a ff	brl $3957be	                BRL IF_FAILURE
.395854					try_execute
.395854	e2 20		sep #$20	                SEP #$20        ; set A short
.395856	a9 5c		lda #$5c	                LDA #$5C                                ; Write a JML opcode
.395858	85 3b		sta $035b	                STA DOS_RUN_PTR-1
.39585a	22 5b 03 00	jsl $00035b	                JSL DOS_RUN_PTR-1                       ; And call to it
.39585e	82 68 ff	brl $3957c9	                BRL IF_SUCCESS                          ; Return success
.395861					IF_ALLOCFD
.395861	da		phx		                PHX
.395862	5a		phy		                PHY
.395863	0b		phd		                PHD
.395864	8b		phb		                PHB
.395865	08		php		                PHP
.395866	48		pha		                PHA             ; begin setdbr macro
.395867	08		php		                PHP
.395868	e2 20		sep #$20	                SEP #$20        ; set A short
.39586a	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39586c	48		pha		                PHA
.39586d	ab		plb		                PLB
.39586e	28		plp		                PLP
.39586f	68		pla		                PLA             ; end setdbr macro
.395870	48		pha		                PHA             ; begin setdp macro
.395871	08		php		                PHP
.395872	c2 20		rep #$20	                REP #$20        ; set A long
.395874	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395877	5b		tcd		                TCD
.395878	28		plp		                PLP
.395879	68		pla		                PLA             ; end setdp macro
.39587a	c2 10		rep #$10	                REP #$10        ; set X long
.39587c	a2 00 00	ldx #$0000	                LDX #0                              ; Point to the first file descriptor
.39587f					chk_fd
.39587f	e2 20		sep #$20	                SEP #$20        ; set A short
.395881	bd 20 ad	lda $38ad20,x	                LDA @w DOS_FILE_DESCS,X             ; Check the file descriptor's status
.395884	89 10		bit #$10	                BIT #FD_STAT_ALLOC                  ; Is the file descriptor allocated?
.395886	f0 14		beq $39589c	                BEQ found                           ; No: flag and return the found descriptor
.395888					next_fd
.395888	c2 20		rep #$20	                REP #$20        ; set A long
.39588a	8a		txa		                TXA                                 ; Yes: Move to the next file descriptor
.39588b	18		clc		                CLC
.39588c	69 20 00	adc #$0020	                ADC #SIZE(FILEDESC)
.39588f	aa		tax		                TAX
.395890	e0 00 01	cpx #$0100	                CPX #SIZE(FILEDESC) * DOS_FD_MAX    ; Are we out of file descriptors?
.395893	90 ea		bcc $39587f	                BLT chk_fd                          ; No: check this new file descriptor
.395895	e2 20		sep #$20	                SEP #$20        ; set A short
.395897	a9 16		lda #$16	                LDA #DOS_ERR_NOFD                   ; Yes: Return failure (no file descriptors available)
.395899	82 22 ff	brl $3957be	                BRL IF_FAILURE
.39589c	09 10		ora #$10	found           ORA #FD_STAT_ALLOC                  ; No: Set the ALLOC bit
.39589e	9d 20 ad	sta $38ad20,x	                STA @w DOS_FILE_DESCS,X             ; And store it in the file descriptor's status
.3958a1	c2 20		rep #$20	                REP #$20        ; set A long
.3958a3	8a		txa		                TXA
.3958a4	18		clc		                CLC
.3958a5	69 20 ad	adc #$ad20	                ADC #<>DOS_FILE_DESCS
.3958a8	85 20		sta $0340	                STA @b DOS_FD_PTR
.3958aa	a9 38 00	lda #$0038	                LDA #`DOS_FILE_DESCS
.3958ad	69 00 00	adc #$0000	                ADC #0
.3958b0	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.3958b2	82 14 ff	brl $3957c9	                BRL IF_SUCCESS                      ; Return this file descriptor
.3958b5					IF_FREEFD
.3958b5	da		phx		                PHX
.3958b6	5a		phy		                PHY
.3958b7	0b		phd		                PHD
.3958b8	8b		phb		                PHB
.3958b9	08		php		                PHP
.3958ba	48		pha		                PHA             ; begin setdbr macro
.3958bb	08		php		                PHP
.3958bc	e2 20		sep #$20	                SEP #$20        ; set A short
.3958be	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3958c0	48		pha		                PHA
.3958c1	ab		plb		                PLB
.3958c2	28		plp		                PLP
.3958c3	68		pla		                PLA             ; end setdbr macro
.3958c4	48		pha		                PHA             ; begin setdp macro
.3958c5	08		php		                PHP
.3958c6	c2 20		rep #$20	                REP #$20        ; set A long
.3958c8	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3958cb	5b		tcd		                TCD
.3958cc	28		plp		                PLP
.3958cd	68		pla		                PLA             ; end setdp macro
.3958ce	e2 20		sep #$20	                SEP #$20        ; set A short
.3958d0	c2 10		rep #$10	                REP #$10        ; set X long
.3958d2	a9 00		lda #$00	                LDA #0
.3958d4	87 20		sta [$0340]	                STA [DOS_FD_PTR]
.3958d6	82 f0 fe	brl $3957c9	                BRL IF_SUCCESS
.3958d9					DOS_SRC2DST
.3958d9	da		phx		                PHX
.3958da	5a		phy		                PHY
.3958db	0b		phd		                PHD
.3958dc	8b		phb		                PHB
.3958dd	08		php		                PHP
.3958de	48		pha		                PHA             ; begin setdp macro
.3958df	08		php		                PHP
.3958e0	c2 20		rep #$20	                REP #$20        ; set A long
.3958e2	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3958e5	5b		tcd		                TCD
.3958e6	28		plp		                PLP
.3958e7	68		pla		                PLA             ; end setdp macro
.3958e8	c2 30		rep #$30	                REP #$30        ; set A&X long
.3958ea	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.3958ed	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.3958ef	aa		tax		                TAX                                     ; X := source buffer address
.3958f0	b7 34		lda [$0354],y	                LDA [DOS_DST_PTR],Y
.3958f2	a8		tay		                TAY                                     ; Y := destination buffer address
.3958f3	a9 00 02	lda #$0200	                LDA #DOS_SECTOR_SIZE                    ; A := the size of the buffers
.3958f6	54 38 38	mvn $38,$38	                MVN #`DOS_FILE_BUFFS,#`DOS_FILE_BUFFS   ; Copy the sector data
.3958f9	28		plp		                PLP
.3958fa	ab		plb		                PLB
.3958fb	2b		pld		                PLD
.3958fc	7a		ply		                PLY
.3958fd	fa		plx		                PLX
.3958fe	6b		rtl		                RTL
.3958ff					IF_COPY
.3958ff	da		phx		                PHX
.395900	5a		phy		                PHY
.395901	0b		phd		                PHD
.395902	8b		phb		                PHB
.395903	08		php		                PHP
.395904	48		pha		                PHA             ; begin setdbr macro
.395905	08		php		                PHP
.395906	e2 20		sep #$20	                SEP #$20        ; set A short
.395908	a9 00		lda #$00	                LDA #0
.39590a	48		pha		                PHA
.39590b	ab		plb		                PLB
.39590c	28		plp		                PLP
.39590d	68		pla		                PLA             ; end setdbr macro
.39590e	48		pha		                PHA             ; begin setdp macro
.39590f	08		php		                PHP
.395910	c2 20		rep #$20	                REP #$20        ; set A long
.395912	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395915	5b		tcd		                TCD
.395916	28		plp		                PLP
.395917	68		pla		                PLA             ; end setdp macro
.395918	22 61 58 39	jsl $395861	                JSL IF_ALLOCFD                  ; Allocate an FD for the source
.39591c	b0 03		bcs $395921	                BCS set_src_path
.39591e	82 a1 fe	brl $3957c2	                BRL IF_PASSFAILURE              ; If failed: pass the failure up the chain
.395921					set_src_path
.395921	c2 30		rep #$30	                REP #$30        ; set A&X long
.395923	a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; Set the source path
.395926	a5 44		lda $0364	                LDA @b DOS_STR1_PTR
.395928	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39592a	c8		iny		                INY
.39592b	c8		iny		                INY
.39592c	a5 46		lda $0366	                LDA @b DOS_STR1_PTR+2
.39592e	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395930					alloc_dest
.395930	c2 30		rep #$30	                REP #$30        ; set A&X long
.395932	a5 20		lda $0340	                LDA @b DOS_FD_PTR               ; set DOS_SRC_PTR to the file descriptor pointer
.395934	85 30		sta $0350	                STA @b DOS_SRC_PTR
.395936	a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.395938	85 32		sta $0352	                STA @b DOS_SRC_PTR+2
.39593a	22 61 58 39	jsl $395861	                JSL IF_ALLOCFD                  ; Allocate an FD for the destination
.39593e	b0 0f		bcs $39594f	                BCS set_paths                   ; If everything is ok... start setting the paths
.395940	a5 30		lda $0350	err_free_src_fd LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395942	85 20		sta $0340	                STA @b DOS_FD_PTR
.395944	a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395946	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395948	22 b5 58 39	jsl $3958b5	                JSL IF_FREEFD                   ; And free it
.39594c	82 73 fe	brl $3957c2	                BRL IF_PASSFAILURE              ; Pass the failure up the chain
.39594f					set_paths
.39594f	c2 30		rep #$30	                REP #$30        ; set A&X long
.395951	a5 20		lda $0340	                LDA @b DOS_FD_PTR               ; Set DOS_DST_PTR to the file descriptor pointer for the destination
.395953	85 34		sta $0354	                STA @b DOS_DST_PTR
.395955	a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.395957	85 36		sta $0356	                STA @b DOS_DST_PTR+2
.395959	a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; Set the destination path
.39595c	a5 48		lda $0368	                LDA @b DOS_STR2_PTR
.39595e	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395960	c8		iny		                INY
.395961	c8		iny		                INY
.395962	a5 4a		lda $036a	                LDA @b DOS_STR2_PTR+2
.395964	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395966	a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395968	85 20		sta $0340	                STA @b DOS_FD_PTR
.39596a	a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.39596c	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.39596e	22 f0 10 38	jsl $3810f0	                JSL F_OPEN                      ; Try to open the file
.395972	b0 0f		bcs $395983	                BCS src_open                    ; If success, work with the openned file
.395974	a5 34		lda $0354	err_free_dst_fd LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395976	85 20		sta $0340	                STA @b DOS_FD_PTR
.395978	a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.39597a	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.39597c	22 b5 58 39	jsl $3958b5	                JSL IF_FREEFD                   ; And free it
.395980	82 bd ff	brl $395940	                BRL err_free_src_fd             ; Free the source file descriptor
.395983	a0 12 00	ldy #$0012	src_open        LDY #FILEDESC.SIZE              ; destination file size := source file size
.395986	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.395988	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.39598a	c8		iny		                INY
.39598b	c8		iny		                INY
.39598c	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.39598e	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395990	22 d9 58 39	jsl $3958d9	                JSL DOS_SRC2DST                 ; Copy the first sector's worth of data
.395994	a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395996	85 20		sta $0340	                STA @b DOS_FD_PTR
.395998	a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.39599a	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.39599c	22 f4 10 38	jsl $3810f4	                JSL F_CREATE                    ; Attempt to create the file
.3959a0	b0 0f		bcs $3959b1	                BCS read_next                   ; If sucessful, try to get the next cluster
.3959a2	a5 30		lda $0350	err_src_close   LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.3959a4	85 20		sta $0340	                STA @b DOS_FD_PTR
.3959a6	a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.3959a8	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.3959aa	22 f8 10 38	jsl $3810f8	                JSL F_CLOSE                     ; Close the source file (maybe not really necessary)
.3959ae	82 c3 ff	brl $395974	                BRL err_free_dst_fd             ; Free the file descriptors and return an error
.3959b1					read_next
.3959b1	a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.3959b3	85 20		sta $0340	                STA @b DOS_FD_PTR
.3959b5	a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.3959b7	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.3959b9	22 00 11 38	jsl $381100	                JSL F_READ                      ; Attempt to read the next sector of the source
.3959bd	b0 19		bcs $3959d8	                BCS copy2dest                   ; If successful, copy the sector
.3959bf	e2 20		sep #$20	                SEP #$20        ; set A short
.3959c1	a5 0e		lda $032e	                LDA @b DOS_STATUS
.3959c3	c9 0a		cmp #$0a	                CMP #DOS_ERR_NOCLUSTER          ; Are there no more clusters in the source file?
.3959c5	f0 32		beq $3959f9	                BEQ file_copied                 ; Yes: we're done copying
.3959c7					err_dest_close
.3959c7	c2 20		rep #$20	                REP #$20        ; set A long
.3959c9	a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.3959cb	85 20		sta $0340	                STA @b DOS_FD_PTR
.3959cd	a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.3959cf	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.3959d1	22 f8 10 38	jsl $3810f8	                JSL F_CLOSE                     ; Attempt to close the destination
.3959d5	82 ca ff	brl $3959a2	                BRL err_src_close               ; Close the source and throw an error
.3959d8					copy2dest
.3959d8	22 d9 58 39	jsl $3958d9	                JSL DOS_SRC2DST                 ; Copy the source sector to the destination sector
.3959dc	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; destination sector cluster ID := 0 to append
.3959df	a9 00 00	lda #$0000	                LDA #0
.3959e2	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.3959e4	c8		iny		                INY
.3959e5	c8		iny		                INY
.3959e6	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.3959e8	a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.3959ea	85 20		sta $0340	                STA @b DOS_FD_PTR
.3959ec	a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.3959ee	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.3959f0	22 fc 10 38	jsl $3810fc	                JSL F_WRITE                     ; Attempt to write the destionation sector to the disk
.3959f4	90 d1		bcc $3959c7	                BCC err_dest_close              ; If error: close all files and throw the error
.3959f6	82 b8 ff	brl $3959b1	                BRL read_next                   ; Otherwise: repeat the loop
.3959f9					file_copied
.3959f9	c2 20		rep #$20	                REP #$20        ; set A long
.3959fb	a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.3959fd	85 20		sta $0340	                STA @b DOS_FD_PTR
.3959ff	a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395a01	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395a03	22 f8 10 38	jsl $3810f8	                JSL F_CLOSE                     ; Close the destination
.395a07	a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395a09	85 20		sta $0340	                STA @b DOS_FD_PTR
.395a0b	a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395a0d	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395a0f	22 f8 10 38	jsl $3810f8	                JSL F_CLOSE                     ; Close the source
.395a13	82 b3 fd	brl $3957c9	                BRL IF_SUCCESS

;******  Return to file: src\kernel.asm


;******  Processing file: src\uart.asm

=$af13f8				UART1_BASE = $AF13F8        ; Base address for UART 1 (COM1)
=$af12f8				UART2_BASE = $AF12F8        ; Base address for UART 2 (COM2)
=$00					UART_TRHB = $00             ; Transmit/Receive Hold Buffer
=$00					UART_DLL = UART_TRHB        ; Divisor Latch Low Byte
=$01					UART_DLH = $01              ; Divisor Latch High Byte
=$01					UART_IER = UART_DLH         ; Interupt Enable Register
=$02					UART_FCR = $02              ; FIFO Control Register
=$02					UART_IIR = UART_FCR         ; Interupt Indentification Register
=$03					UART_LCR = $03              ; Line Control Register
=$04					UART_MCR = $04              ; Modem Control REgister
=$05					UART_LSR = $05              ; Line Status Register
=$06					UART_MSR = $06              ; Modem Status Register
=$07					UART_SR = $07               ; Scratch Register
=$20					UINT_LOW_POWER = $20        ; Enable Low Power Mode (16750)
=$10					UINT_SLEEP_MODE = $10       ; Enable Sleep Mode (16750)
=$08					UINT_MODEM_STATUS = $08     ; Enable Modem Status Interrupt
=$04					UINT_LINE_STATUS = $04      ; Enable Receiver Line Status Interupt
=$02					UINT_THR_EMPTY = $02        ; Enable Transmit Holding Register Empty interrupt
=$01					UINT_DATA_AVAIL = $01       ; Enable Recieve Data Available interupt
=$80					IIR_FIFO_ENABLED = $80      ; FIFO is enabled
=$40					IIR_FIFO_NONFUNC = $40      ; FIFO is not functioning
=$20					IIR_FIFO_64BYTE = $20       ; 64 byte FIFO enabled (16750)
=$00					IIR_MODEM_STATUS = $00      ; Modem Status Interrupt
=$02					IIR_THR_EMPTY = $02         ; Transmit Holding Register Empty Interrupt
=$04					IIR_DATA_AVAIL = $04        ; Data Available Interrupt
=$06					IIR_LINE_STATUS = $06       ; Line Status Interrupt
=$0c					IIR_TIMEOUT = $0C           ; Time-out Interrupt (16550 and later)
=$01					IIR_INTERRUPT_PENDING = $01 ; Interrupt Pending Flag
=$80					LCR_DLB = $80               ; Divisor Latch Access Bit
=$60					LCR_SBE = $60               ; Set Break Enable
=$00					LCR_PARITY_NONE = $00       ; Parity: None
=$08					LCR_PARITY_ODD = $08        ; Parity: Odd
=$18					LCR_PARITY_EVEN = $18       ; Parity: Even
=$28					LCR_PARITY_MARK = $28       ; Parity: Mark
=$38					LCR_PARITY_SPACE = $38      ; Parity: Space
=$00					LCR_STOPBIT_1 = $00         ; One Stop Bit
=$04					LCR_STOPBIT_2 = $04         ; 1.5 or 2 Stop Bits
=$00					LCR_DATABITS_5 = $00        ; Data Bits: 5
=$01					LCR_DATABITS_6 = $01        ; Data Bits: 6
=$02					LCR_DATABITS_7 = $02        ; Data Bits: 7
=$03					LCR_DATABITS_8 = $03        ; Data Bits: 8
=$80					LSR_ERR_RECIEVE = $80       ; Error in Received FIFO
=$40					LSR_XMIT_DONE = $40         ; All data has been transmitted
=$20					LSR_XMIT_EMPTY = $20        ; Empty transmit holding register
=$10					LSR_BREAK_INT = $10         ; Break interrupt
=$08					LSR_ERR_FRAME = $08         ; Framing error
=$04					LSR_ERR_PARITY = $04        ; Parity error
=$02					LSR_ERR_OVERRUN = $02       ; Overrun error
=$01					LSR_DATA_AVAIL = $01        ; Data is ready in the receive buffer
=384					UART_300 = 384              ; Code for 300 bps
=96					UART_1200 = 96              ; Code for 1200 bps
=48					UART_2400 = 48              ; Code for 2400 bps
=24					UART_4800 = 24              ; Code for 4800 bps
=12					UART_9600 = 12              ; Code for 9600 bps
=6					UART_19200 = 6              ; Code for 19200 bps
=3					UART_38400 = 3              ; Code for 28400 bps
=2					UART_57600 = 2              ; Code for 57600 bps
=1					UART_115200 = 1             ; Code for 115200 bps
.395a16					UART_SELECT
.395a16	08		php		            PHP
.395a17	c2 20		rep #$20	                REP #$20        ; set A long
.395a19	c9 02 00	cmp #$0002	            CMP #2
.395a1c	f0 07		beq $395a25	            BEQ is_COM2
.395a1e	c2 20		rep #$20	                REP #$20        ; set A long
.395a20	a9 f8 13	lda #$13f8	            LDA #<>UART1_BASE
.395a23	80 05		bra $395a2a	            BRA setaddr
.395a25					is_COM2
.395a25	c2 20		rep #$20	                REP #$20        ; set A long
.395a27	a9 f8 12	lda #$12f8	            LDA #<>UART2_BASE
.395a2a	8f 00 07 00	sta $000700	setaddr     STA @lCURRUART
.395a2e	e2 20		sep #$20	                SEP #$20        ; set A short
.395a30	a9 af		lda #$af	            LDA #`UART1_BASE
.395a32	8f 02 07 00	sta $000702	            STA @lCURRUART+2
.395a36	28		plp		            PLP
.395a37	6b		rtl		            RTL
.395a38					UART_SETBPS
.395a38	08		php		            PHP
.395a39	0b		phd		            PHD
.395a3a	48		pha		                PHA             ; begin setdp macro
.395a3b	08		php		                PHP
.395a3c	c2 20		rep #$20	                REP #$20        ; set A long
.395a3e	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395a41	5b		tcd		                TCD
.395a42	28		plp		                PLP
.395a43	68		pla		                PLA             ; end setdp macro
.395a44	c2 30		rep #$30	                REP #$30        ; set A&X long
.395a46	48		pha		            PHA
.395a47	e2 20		sep #$20	                SEP #$20        ; set A short
.395a49	a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Enable divisor latch
.395a4c	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.395a4e	09 80		ora #$80	            ORA #LCR_DLB
.395a50	97 00		sta [$0700],y	            STA [CURRUART],Y
.395a52	c2 20		rep #$20	                REP #$20        ; set A long
.395a54	68		pla		            PLA
.395a55	a0 00 00	ldy #$0000	            LDY #UART_DLL
.395a58	97 00		sta [$0700],y	            STA [CURRUART],Y    ; Save the divisor to the UART
.395a5a	e2 20		sep #$20	                SEP #$20        ; set A short
.395a5c	a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Disable divisor latch
.395a5f	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.395a61	49 80		eor #$80	            EOR #LCR_DLB
.395a63	97 00		sta [$0700],y	            STA [CURRUART],Y
.395a65	2b		pld		            PLD
.395a66	28		plp		            PLP
.395a67	6b		rtl		            RTL
.395a68					UART_SETLCR
.395a68	08		php		            PHP
.395a69	0b		phd		            PHD
.395a6a	48		pha		                PHA             ; begin setdp macro
.395a6b	08		php		                PHP
.395a6c	c2 20		rep #$20	                REP #$20        ; set A long
.395a6e	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395a71	5b		tcd		                TCD
.395a72	28		plp		                PLP
.395a73	68		pla		                PLA             ; end setdp macro
.395a74	e2 20		sep #$20	                SEP #$20        ; set A short
.395a76	c2 10		rep #$10	                REP #$10        ; set X long
.395a78	29 7f		and #$7f	            AND #$7F            ; We don't want to alter divisor latch
.395a7a	a0 03 00	ldy #$0003	            LDY #UART_LCR
.395a7d	97 00		sta [$0700],y	            STA [CURRUART],Y
.395a7f	2b		pld		            PLD
.395a80	28		plp		            PLP
.395a81	6b		rtl		            RTL
.395a82					UART_INIT
.395a82	08		php		            PHP
.395a83	0b		phd		            PHD
.395a84	c2 30		rep #$30	                REP #$30        ; set A&X long
.395a86	48		pha		                PHA             ; begin setdp macro
.395a87	08		php		                PHP
.395a88	c2 20		rep #$20	                REP #$20        ; set A long
.395a8a	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395a8d	5b		tcd		                TCD
.395a8e	28		plp		                PLP
.395a8f	68		pla		                PLA             ; end setdp macro
.395a90	a9 01 00	lda #$0001	            LDA #UART_115200
.395a93	22 38 5a 39	jsl $395a38	            JSL UART_SETBPS
.395a97	e2 20		sep #$20	                SEP #$20        ; set A short
.395a99	a9 03		lda #$03	            LDA #LCR_PARITY_NONE | LCR_STOPBIT_1 | LCR_DATABITS_8
.395a9b	22 68 5a 39	jsl $395a68	            JSL UART_SETLCR
.395a9f	a9 e1		lda #$e1	            LDA #%11100001
.395aa1	a0 02 00	ldy #$0002	            LDY #UART_FCR
.395aa4	97 00		sta [$0700],y	            STA [CURRUART],Y
.395aa6	2b		pld		            PLD
.395aa7	28		plp		            PLP
.395aa8	6b		rtl		            RTL
.395aa9					UART_HASBYT
.395aa9	08		php		            PHP
.395aaa	0b		phd		            PHD
.395aab	c2 30		rep #$30	                REP #$30        ; set A&X long
.395aad	48		pha		                PHA             ; begin setdp macro
.395aae	08		php		                PHP
.395aaf	c2 20		rep #$20	                REP #$20        ; set A long
.395ab1	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395ab4	5b		tcd		                TCD
.395ab5	28		plp		                PLP
.395ab6	68		pla		                PLA             ; end setdp macro
.395ab7	e2 20		sep #$20	                SEP #$20        ; set A short
.395ab9	a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.395abc	b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.395abe	29 01		and #$01	            AND #LSR_DATA_AVAIL
.395ac0	d0 04		bne $395ac6	            BNE ret_true            ; If flag is set, return true
.395ac2	2b		pld		ret_false   PLD                     ; Return false
.395ac3	28		plp		            PLP
.395ac4	18		clc		            CLC
.395ac5	6b		rtl		            RTL
.395ac6	2b		pld		ret_true    PLD                     ; Return true
.395ac7	28		plp		            PLP
.395ac8	38		sec		            SEC
.395ac9	6b		rtl		            RTL
.395aca					UART_GETC
.395aca	08		php		            PHP
.395acb	0b		phd		            PHD
.395acc	c2 30		rep #$30	                REP #$30        ; set A&X long
.395ace	48		pha		                PHA             ; begin setdp macro
.395acf	08		php		                PHP
.395ad0	c2 20		rep #$20	                REP #$20        ; set A long
.395ad2	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395ad5	5b		tcd		                TCD
.395ad6	28		plp		                PLP
.395ad7	68		pla		                PLA             ; end setdp macro
.395ad8	e2 20		sep #$20	                SEP #$20        ; set A short
.395ada	a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.395add	b7 00		lda [$0700],y	wait_getc   LDA [CURRUART],Y
.395adf	29 01		and #$01	            AND #LSR_DATA_AVAIL
.395ae1	f0 fa		beq $395add	            BEQ wait_getc           ; If the flag is clear, wait
.395ae3	a0 00 00	ldy #$0000	            LDY #UART_TRHB          ; Get the byte from the receive FIFO
.395ae6	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.395ae8	2b		pld		            PLD
.395ae9	28		plp		            PLP
.395aea	6b		rtl		            RTL
.395aeb					UART_PUTC
.395aeb	08		php		            PHP
.395aec	0b		phd		            PHD
.395aed	c2 30		rep #$30	                REP #$30        ; set A&X long
.395aef	48		pha		                PHA             ; begin setdp macro
.395af0	08		php		                PHP
.395af1	c2 20		rep #$20	                REP #$20        ; set A long
.395af3	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395af6	5b		tcd		                TCD
.395af7	28		plp		                PLP
.395af8	68		pla		                PLA             ; end setdp macro
.395af9	e2 20		sep #$20	                SEP #$20        ; set A short
.395afb	48		pha		            PHA                     ; Wait for the transmit FIFO to free up
.395afc	a0 05 00	ldy #$0005	            LDY #UART_LSR
.395aff	b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.395b01	29 20		and #$20	            AND #LSR_XMIT_EMPTY
.395b03	f0 fa		beq $395aff	            BEQ wait_putc
.395b05	68		pla		            PLA
.395b06	a0 00 00	ldy #$0000	            LDY #UART_TRHB
.395b09	97 00		sta [$0700],y	            STA [CURRUART],Y
.395b0b	2b		pld		            PLD
.395b0c	28		plp		            PLP
.395b0d	6b		rtl		            RTL
.395b0e					UART_PUTS
.395b0e	08		php		            PHP
.395b0f	e2 20		sep #$20	                SEP #$20        ; set A short
.395b11	bd 00 00	lda $0000,x	put_loop    LDA #0,B,X
.395b14	f0 07		beq $395b1d	            BEQ done
.395b16	22 eb 5a 39	jsl $395aeb	            JSL UART_PUTC
.395b1a	e8		inx		            INX
.395b1b	80 f4		bra $395b11	            BRA put_loop
.395b1d	28		plp		done        PLP
.395b1e	6b		rtl		            RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\joystick.asm

.395b1f					JOYSTICK_SET_NES_MODE
.395b1f	e2 20		sep #$20	                SEP #$20        ; set A short
.395b21	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395b25	29 fb		and #$fb	          AND #~NES_SNES_JOY  ; 0 = NES (8 bit shift)
.395b27	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395b2b	6b		rtl		          RTL
.395b2c					JOYSTICK_SET_SNES_MODE
.395b2c	e2 20		sep #$20	                SEP #$20        ; set A short
.395b2e	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395b32	29 fb		and #$fb	          AND #~NES_SNES_JOY
.395b34	09 04		ora #$04	          ORA #NES_SNES_JOY   ; 1 = SNES (12 Bit Shift)
.395b36	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395b3a	6b		rtl		          RTL
.395b3b					JOYSTICK_ENABLE_NES_SNES_PORT0
.395b3b	e2 20		sep #$20	                SEP #$20        ; set A short
.395b3d	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395b41	29 fe		and #$fe	          AND #~NES_SNES_EN0
.395b43	09 01		ora #$01	          ORA #NES_SNES_EN0
.395b45	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395b49	6b		rtl		          RTL
.395b4a					JOYSTICK_ENABLE_NES_SNES_PORT1
.395b4a	e2 20		sep #$20	                SEP #$20        ; set A short
.395b4c	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395b50	29 fd		and #$fd	          AND #~NES_SNES_EN1
.395b52	09 02		ora #$02	          ORA #NES_SNES_EN1
.395b54	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395b58	6b		rtl		          RTL
.395b59					JOYSTICK_DISABLE_NES_SNES_PORT0
.395b59	e2 20		sep #$20	                SEP #$20        ; set A short
.395b5b	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395b5f	29 fe		and #$fe	          AND #~NES_SNES_EN0
.395b61	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395b65	6b		rtl		          RTL
.395b66					JOYSTICK_DISABLE_NES_SNES_PORT1
.395b66	e2 20		sep #$20	                SEP #$20        ; set A short
.395b68	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395b6c	29 fd		and #$fd	          AND #~NES_SNES_EN1
.395b6e	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395b72	6b		rtl		          RTL
.395b73					JOYSTICK_NES_SNES_TRIG_WITH_POLL
.395b73	e2 20		sep #$20	                SEP #$20        ; set A short
.395b75	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395b79	29 03		and #$03	          AND #(NES_SNES_EN0 | NES_SNES_EN1)
.395b7b	c9 00		cmp #$00	          CMP #$00
.395b7d	f0 14		beq $395b93	          BEQ END_OF_JOYSTICK_POLL
.395b7f	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395b83	09 80		ora #$80	          ORA #NES_SNES_TRIG   ; Set to 1 (Will auto Clear)
.395b85	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395b89					JOYSTICK_POLLING_ISNOTOVER
.395b89	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE ;
.395b8d	29 40		and #$40	          AND #NES_SNES_DONE
.395b8f	c9 40		cmp #$40	          CMP #NES_SNES_DONE
.395b91	d0 f6		bne $395b89	          BNE JOYSTICK_POLLING_ISNOTOVER
.395b93					END_OF_JOYSTICK_POLL
.395b93	6b		rtl		          RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\sdc_library.asm

.395b94					SDC_TEST
.395b94	8b		phb		                PHB
.395b95	0b		phd		                PHD
.395b96	08		php		                PHP
.395b97	48		pha		                PHA             ; begin setdbr macro
.395b98	08		php		                PHP
.395b99	e2 20		sep #$20	                SEP #$20        ; set A short
.395b9b	a9 00		lda #$00	                LDA #0
.395b9d	48		pha		                PHA
.395b9e	ab		plb		                PLB
.395b9f	28		plp		                PLP
.395ba0	68		pla		                PLA             ; end setdbr macro
.395ba1	48		pha		                PHA             ; begin setdp macro
.395ba2	08		php		                PHP
.395ba3	c2 20		rep #$20	                REP #$20        ; set A long
.395ba5	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395ba8	5b		tcd		                TCD
.395ba9	28		plp		                PLP
.395baa	68		pla		                PLA             ; end setdp macro
.395bab	e2 20		sep #$20	                SEP #$20        ; set A short
.395bad	a9 f0		lda #$f0	                LDA #$F0                            ; Set white on black background
.395baf	8d 1e 00	sta $001e	                STA @w CURCOLOR
.395bb2	22 a8 10 38	jsl $3810a8	                JSL CLRSCREEN
.395bb6	22 a0 10 38	jsl $3810a0	                JSL CSRHOME
.395bba	22 fa 5b 39	jsl $395bfa	                JSL SDC_INIT                        ; Attempt to initilize the SDC interface
.395bbe	b0 03		bcs $395bc3	                BCS init_ok
.395bc0	82 15 00	brl $395bd8	                BRL done
.395bc3	a9 02		lda #$02	init_ok         LDA #BIOS_DEV_SD
.395bc5	85 01		sta $0321	                STA BIOS_DEV
.395bc7	22 f5 43 39	jsl $3943f5	                JSL DOS_MOUNT                       ; Attempt to mount the SDC
.395bcb	b0 03		bcs $395bd0	                BCS mount_ok
.395bcd	82 08 00	brl $395bd8	                BRL done
.395bd0	22 5a 54 39	jsl $39545a	mount_ok        JSL IF_DIROPEN
.395bd4	b0 02		bcs $395bd8	                BCS all_ok
.395bd6	80 00		bra $395bd8	                BRA done
.395bd8					all_ok
.395bd8	22 6c 10 38	jsl $38106c	done            JSL PRINTCR
.395bdc	28		plp		                PLP
.395bdd	2b		pld		                PLD
.395bde	ab		plb		                PLB
.395bdf	6b		rtl		                RTL
.395be0					SDC_WAITBUSY
.395be0	08		php		                PHP
.395be1	e2 20		sep #$20	                SEP #$20        ; set A short
.395be3	af 04 ea af	lda $afea04	wait_xact       LDA @l SDC_TRANS_STATUS_REG         ; Wait for the transaction to complete
.395be7	29 01		and #$01	                AND #SDC_TRANS_BUSY
.395be9	c9 01		cmp #$01	                CMP #SDC_TRANS_BUSY
.395beb	f0 f6		beq $395be3	                BEQ wait_xact
.395bed	28		plp		                PLP
.395bee	6b		rtl		                RTL
.395bef					SDC_RESET
.395bef	08		php		                PHP
.395bf0	e2 20		sep #$20	                SEP #$20        ; set A short
.395bf2	a9 01		lda #$01	                LDA #1
.395bf4	8f 01 ea af	sta $afea01	                STA @l SDC_CONTROL_REG
.395bf8	28		plp		                PLP
.395bf9	6b		rtl		                RTL
.395bfa	0b		phd		SDC_INIT        PHD
.395bfb	8b		phb		                PHB
.395bfc	08		php		                PHP
.395bfd	48		pha		                PHA             ; begin setdbr macro
.395bfe	08		php		                PHP
.395bff	e2 20		sep #$20	                SEP #$20        ; set A short
.395c01	a9 00		lda #$00	                LDA #0
.395c03	48		pha		                PHA
.395c04	ab		plb		                PLB
.395c05	28		plp		                PLP
.395c06	68		pla		                PLA             ; end setdbr macro
.395c07	48		pha		                PHA             ; begin setdp macro
.395c08	08		php		                PHP
.395c09	c2 20		rep #$20	                REP #$20        ; set A long
.395c0b	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395c0e	5b		tcd		                TCD
.395c0f	28		plp		                PLP
.395c10	68		pla		                PLA             ; end setdp macro
.395c11	e2 20		sep #$20	                SEP #$20        ; set A short
.395c13	a9 01		lda #$01	                LDA #SDC_TRANS_INIT_SD
.395c15	8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG           ; Set Init SD
.395c19	a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.395c1b	8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.395c1f	22 e0 5b 39	jsl $395be0	                JSL SDC_WAITBUSY                    ; Wait for initialization to complete
.395c23	af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395c27	d0 07		bne $395c30	                BNE ret_error                       ; Is there one? Process the error
.395c29	64 00		stz $0320	ret_success     STZ BIOS_STATUS
.395c2b	28		plp		                PLP
.395c2c	ab		plb		                PLB
.395c2d	2b		pld		                PLD
.395c2e	38		sec		                SEC
.395c2f	6b		rtl		                RTL
.395c30	8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.395c33	a9 8b		lda #$8b	                LDA #BIOS_ERR_NOTINIT
.395c35	85 00		sta $0320	                STA BIOS_STATUS
.395c37	28		plp		                PLP
.395c38	ab		plb		                PLB
.395c39	2b		pld		                PLD
.395c3a	18		clc		                CLC
.395c3b	6b		rtl		                RTL
.395c3c					SDC_GETBLOCK
.395c3c	0b		phd		                PHD
.395c3d	8b		phb		                PHB
.395c3e	08		php		                PHP
.395c3f	48		pha		                PHA             ; begin setdbr macro
.395c40	08		php		                PHP
.395c41	e2 20		sep #$20	                SEP #$20        ; set A short
.395c43	a9 00		lda #$00	                LDA #0
.395c45	48		pha		                PHA
.395c46	ab		plb		                PLB
.395c47	28		plp		                PLP
.395c48	68		pla		                PLA             ; end setdbr macro
.395c49	48		pha		                PHA             ; begin setdp macro
.395c4a	08		php		                PHP
.395c4b	c2 20		rep #$20	                REP #$20        ; set A long
.395c4d	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395c50	5b		tcd		                TCD
.395c51	28		plp		                PLP
.395c52	68		pla		                PLA             ; end setdp macro
.395c53	e2 20		sep #$20	                SEP #$20        ; set A short
.395c55	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.395c59	09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.395c5b	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395c5f	a9 00		lda #$00	                LDA #0
.395c61	8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.395c65	a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to read
.395c67	0a		asl a		                ASL A
.395c68	8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.395c6c	a5 03		lda $0323	                LDA BIOS_LBA+1
.395c6e	2a		rol a		                ROL A
.395c6f	8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.395c73	a5 04		lda $0324	                LDA BIOS_LBA+2
.395c75	2a		rol a		                ROL A
.395c76	8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.395c7a	a9 02		lda #$02	                LDA #SDC_TRANS_READ_BLK             ; Set the transaction to READ
.395c7c	8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.395c80	a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.395c82	8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.395c86	22 e0 5b 39	jsl $395be0	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.395c8a	af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395c8e	d0 36		bne $395cc6	                BNE ret_error                       ; Is there one? Process the error
.395c90	e2 20		sep #$20	                SEP #$20        ; set A short
.395c92	af 13 ea af	lda $afea13	                LDA @l SDC_RX_FIFO_DATA_CNT_LO      ; Record the number of bytes read
.395c96	85 0a		sta $032a	                STA BIOS_FIFO_COUNT
.395c98	af 12 ea af	lda $afea12	                LDA @l SDC_RX_FIFO_DATA_CNT_HI
.395c9c	85 0b		sta $032b	                STA BIOS_FIFO_COUNT+1
.395c9e	c2 10		rep #$10	                REP #$10        ; set X long
.395ca0	a0 00 00	ldy #$0000	                LDY #0
.395ca3	af 10 ea af	lda $afea10	loop_rd         LDA @l SDC_RX_FIFO_DATA_REG         ; Get the byte...
.395ca7	97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y               ; Save it to the buffer
.395ca9	c8		iny		                INY                                 ; Advance to the next byte
.395caa	c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.395cad	d0 f4		bne $395ca3	                BNE loop_rd                         ; No: keep reading
.395caf	af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395cb3	d0 11		bne $395cc6	                BNE ret_error                       ; Is there one? Process the error
.395cb5	64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.395cb7	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395cbb	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395cbd	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395cc1	28		plp		                PLP
.395cc2	ab		plb		                PLB
.395cc3	2b		pld		                PLD
.395cc4	38		sec		                SEC
.395cc5	6b		rtl		                RTL
.395cc6	8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.395cc9	a9 82		lda #$82	                LDA #BIOS_ERR_READ
.395ccb	85 00		sta $0320	                STA BIOS_STATUS
.395ccd	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395cd1	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395cd3	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395cd7	28		plp		                PLP
.395cd8	ab		plb		                PLB
.395cd9	2b		pld		                PLD
.395cda	18		clc		                CLC
.395cdb	6b		rtl		                RTL
.395cdc					SDC_PUTBLOCK
.395cdc	0b		phd		                PHD
.395cdd	8b		phb		                PHB
.395cde	08		php		                PHP
.395cdf	48		pha		                PHA             ; begin setdbr macro
.395ce0	08		php		                PHP
.395ce1	e2 20		sep #$20	                SEP #$20        ; set A short
.395ce3	a9 00		lda #$00	                LDA #0
.395ce5	48		pha		                PHA
.395ce6	ab		plb		                PLB
.395ce7	28		plp		                PLP
.395ce8	68		pla		                PLA             ; end setdbr macro
.395ce9	48		pha		                PHA             ; begin setdp macro
.395cea	08		php		                PHP
.395ceb	c2 20		rep #$20	                REP #$20        ; set A long
.395ced	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395cf0	5b		tcd		                TCD
.395cf1	28		plp		                PLP
.395cf2	68		pla		                PLA             ; end setdp macro
.395cf3	e2 20		sep #$20	                SEP #$20        ; set A short
.395cf5	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.395cf9	09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.395cfb	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395cff	c2 10		rep #$10	                REP #$10        ; set X long
.395d01	a0 00 00	ldy #$0000	                LDY #0
.395d04	b7 06		lda [$0326],y	loop_wr         LDA [BIOS_BUFF_PTR],Y               ; Get the byte...
.395d06	8f 20 ea af	sta $afea20	                STA @l SDC_TX_FIFO_DATA_REG         ; Save it to the SDC
.395d0a	c8		iny		                INY                                 ; Advance to the next byte
.395d0b	c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.395d0e	d0 f4		bne $395d04	                BNE loop_wr                         ; No: keep writing
.395d10	a9 00		lda #$00	                LDA #0
.395d12	8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.395d16	a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to write
.395d18	0a		asl a		                ASL A
.395d19	8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.395d1d	a5 03		lda $0323	                LDA BIOS_LBA+1
.395d1f	2a		rol a		                ROL A
.395d20	8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.395d24	a5 04		lda $0324	                LDA BIOS_LBA+2
.395d26	2a		rol a		                ROL A
.395d27	8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.395d2b	a9 03		lda #$03	                LDA #SDC_TRANS_WRITE_BLK            ; Set the transaction to WRITE
.395d2d	8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.395d31	a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.395d33	8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.395d37	22 e0 5b 39	jsl $395be0	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.395d3b	af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395d3f	d0 11		bne $395d52	                BNE ret_error                       ; Is there one? Process the error
.395d41	64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.395d43	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395d47	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395d49	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395d4d	28		plp		                PLP
.395d4e	ab		plb		                PLB
.395d4f	2b		pld		                PLD
.395d50	38		sec		                SEC
.395d51	6b		rtl		                RTL
.395d52	8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.395d55	a9 82		lda #$82	                LDA #BIOS_ERR_READ
.395d57	85 00		sta $0320	                STA BIOS_STATUS
.395d59	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395d5d	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395d5f	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395d63	28		plp		                PLP
.395d64	ab		plb		                PLB
.395d65	2b		pld		                PLD
.395d66	18		clc		                CLC
.395d67	6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\fdc_library.asm

=4295454				FDC_MOTOR_TIME = 4295454        ; Time to wait for the motor to come on: 300ms
=2147727				FDC_SEEK_TIME = 2147727         ; Time to wait for a seek to happen: 150ms
=900					FDC_MOTOR_ON_TIME = 60 * 15     ; Time (in SOF interrupt counts) for the motor to stay on: ~15s?
=30					FDC_WAIT_TIME = 30              ; Time (in SOF interrupt counts) to allow for a waiting loop to continue
=13					BPB_SECPERCLUS12_OFF = 13       ; Offset to sectors per cluster in a FAT12 boot sector
=17					BPB_ROOT_MAX_ENTRY12_OFF = 17   ; Offset to the maximum number of entries in the root directory in FAT12 boot sector
=22					BPB_SECPERFAT12_OFF = 22        ; Offset to sectors per FAT on a FAT12 boot sector
.395d68					FDC_TEST
.395d68	8b		phb		                    PHB
.395d69	0b		phd		                    PHD
.395d6a	08		php		                    PHP
.395d6b	48		pha		                PHA             ; begin setdbr macro
.395d6c	08		php		                PHP
.395d6d	e2 20		sep #$20	                SEP #$20        ; set A short
.395d6f	a9 00		lda #$00	                LDA #0
.395d71	48		pha		                PHA
.395d72	ab		plb		                PLB
.395d73	28		plp		                PLP
.395d74	68		pla		                PLA             ; end setdbr macro
.395d75	48		pha		                PHA             ; begin setdp macro
.395d76	08		php		                PHP
.395d77	c2 20		rep #$20	                REP #$20        ; set A long
.395d79	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395d7c	5b		tcd		                TCD
.395d7d	28		plp		                PLP
.395d7e	68		pla		                PLA             ; end setdp macro
.395d7f	e2 20		sep #$20	                SEP #$20        ; set A short
.395d81	a9 f0		lda #$f0	                    LDA #$F0
.395d83	8d 1e 00	sta $001e	                    STA @w CURCOLOR
.395d86	22 39 0a 39	jsl $390a39	                    JSL ICLRSCREEN
.395d8a	22 5d 08 39	jsl $39085d	                    JSL ICSRHOME
.395d8e	c2 30		rep #$30	                REP #$30        ; set A&X long
.395d90	22 5e 60 39	jsl $39605e	                    JSL FDC_Init
.395d94	b0 03		bcs $395d99	                    BCS init_ok
.395d96	82 20 00	brl $395db9	                    BRL motor_off
.395d99	22 55 67 39	jsl $396755	init_ok             JSL FDC_CHK_MEDIA
.395d9d	90 03		bcc $395da2	                    BCC no_media
.395d9f	82 03 00	brl $395da5	                    BRL is_ok1
.395da2					no_media
.395da2	82 14 00	brl $395db9	                    BRL motor_off
.395da5	22 ec 65 39	jsl $3965ec	is_ok1              JSL FDC_MOUNT
.395da9	90 03		bcc $395dae	                    BCC mount_err
.395dab	82 03 00	brl $395db1	                    BRL is_ok2
.395dae					mount_err
.395dae	82 08 00	brl $395db9	                    BRL motor_off
.395db1	22 c5 5d 39	jsl $395dc5	is_ok2              JSL FDC_TEST_PUTBLOCK
.395db5	b0 02		bcs $395db9	                    BCS all_ok
.395db7	80 00		bra $395db9	                    BRA motor_off
.395db9					all_ok
.395db9	22 6c 10 38	jsl $38106c	motor_off           JSL PRINTCR
.395dbd	22 0a 61 39	jsl $39610a	                    JSL FDC_Motor_Off
.395dc1	28		plp		                    PLP
.395dc2	2b		pld		                    PLD
.395dc3	ab		plb		                    PLB
.395dc4	6b		rtl		                    RTL
.395dc5					FDC_TEST_PUTBLOCK
.395dc5	e2 20		sep #$20	                SEP #$20        ; set A short
.395dc7	a9 00		lda #$00	                    LDA #0                          ; Initialize the data to write to the drive
.395dc9	a2 00 00	ldx #$0000	                    LDX #0
.395dcc	9f 00 00 03	sta $030000,x	init_loop           STA @l TEST_BUFFER,X
.395dd0	1a		inc a		                    INC A
.395dd1	e8		inx		                    INX
.395dd2	e0 00 02	cpx #$0200	                    CPX #512
.395dd5	d0 f5		bne $395dcc	                    BNE init_loop
.395dd7	c2 20		rep #$20	                REP #$20        ; set A long
.395dd9	a9 00 00	lda #$0000	                    LDA #<>TEST_BUFFER              ; Set BIOS_BUFF_PTR
.395ddc	8f 26 03 00	sta $000326	                    STA @l BIOS_BUFF_PTR
.395de0	a9 03 00	lda #$0003	                    LDA #`TEST_BUFFER
.395de3	8f 28 03 00	sta $000328	                    STA @l BIOS_BUFF_PTR+2
.395de7	a9 64 00	lda #$0064	                    LDA #100                        ; Set LBA = 100
.395dea	8f 22 03 00	sta $000322	                    STA @l BIOS_LBA
.395dee	a9 00 00	lda #$0000	                    LDA #0
.395df1	8f 24 03 00	sta $000324	                    STA @l BIOS_LBA+2
.395df5	22 80 65 39	jsl $396580	                    JSL FDC_PUTBLOCK                ; Try to write the data
.395df9	6b		rtl		                    RTL
>395dfa	40 46 3a 53 41 4d 50 4c		BOOT_FILE           .null "@F:SAMPLE.PGX Hello, world!"
>395e02	45 2e 50 47 58 20 48 65 6c 6c 6f 2c 20 77 6f 72
>395e12	6c 64 21 00
=$020000				TEST_LOCATION = $020000                     ; Location to try to load it
=$030000				TEST_BUFFER = $030000                       ; Temporary location for a cluster buffer
.395e16					FDC_Check_RQM
.395e16	0b		phd		                    PHD
.395e17	08		php		                    PHP
.395e18	48		pha		                PHA             ; begin setdp macro
.395e19	08		php		                PHP
.395e1a	c2 20		rep #$20	                REP #$20        ; set A long
.395e1c	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395e1f	5b		tcd		                TCD
.395e20	28		plp		                PLP
.395e21	68		pla		                PLA             ; end setdp macro
.395e22	e2 20		sep #$20	                SEP #$20        ; set A short
.395e24	a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395e26	22 ec 3f 39	jsl $393fec	                    JSL ISETTIMEOUT
.395e2a	a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395e2c	30 12		bmi $395e40	                    BMI time_out            ; If so: signal a time out
.395e2e	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395e32	89 80		bit #$80	                    BIT #FDC_MSR_RQM
.395e34	f0 f4		beq $395e2a	                    BEQ loop
.395e36	a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395e38	22 ec 3f 39	jsl $393fec	                    JSL ISETTIMEOUT
.395e3c	28		plp		                    PLP
.395e3d	2b		pld		                    PLD
.395e3e	38		sec		                    SEC
.395e3f	60		rts		                    RTS
.395e40	28		plp		time_out            PLP
.395e41	2b		pld		                    PLD
.395e42	18		clc		                    CLC
.395e43	60		rts		                    RTS
.395e44					FDC_Check_DRV0_BSY
.395e44	0b		phd		                    PHD
.395e45	08		php		                    PHP
.395e46	48		pha		                PHA             ; begin setdp macro
.395e47	08		php		                PHP
.395e48	c2 20		rep #$20	                REP #$20        ; set A long
.395e4a	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395e4d	5b		tcd		                TCD
.395e4e	28		plp		                PLP
.395e4f	68		pla		                PLA             ; end setdp macro
.395e50	e2 20		sep #$20	                SEP #$20        ; set A short
.395e52	a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395e54	22 ec 3f 39	jsl $393fec	                    JSL ISETTIMEOUT
.395e58	a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395e5a	30 12		bmi $395e6e	                    BMI time_out            ; If so: signal a time out
.395e5c	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395e60	89 01		bit #$01	                    BIT #FDC_MSR_DRV0BSY
.395e62	d0 f4		bne $395e58	                    BNE loop
.395e64	a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395e66	22 ec 3f 39	jsl $393fec	                    JSL ISETTIMEOUT
.395e6a	28		plp		                    PLP
.395e6b	2b		pld		                    PLD
.395e6c	38		sec		                    SEC
.395e6d	60		rts		                    RTS
.395e6e	28		plp		time_out            PLP
.395e6f	2b		pld		                    PLD
.395e70	18		clc		                    CLC
.395e71	60		rts		                    RTS
.395e72					FDC_Check_CMD_BSY
.395e72	0b		phd		                    PHD
.395e73	08		php		                    PHP
.395e74	48		pha		                PHA             ; begin setdp macro
.395e75	08		php		                PHP
.395e76	c2 20		rep #$20	                REP #$20        ; set A long
.395e78	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395e7b	5b		tcd		                TCD
.395e7c	28		plp		                PLP
.395e7d	68		pla		                PLA             ; end setdp macro
.395e7e	e2 20		sep #$20	                SEP #$20        ; set A short
.395e80	a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395e82	22 ec 3f 39	jsl $393fec	                    JSL ISETTIMEOUT
.395e86	a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395e88	30 12		bmi $395e9c	                    BMI time_out            ; If so: signal a time out
.395e8a	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395e8e	89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.395e90	d0 f4		bne $395e86	                    BNE loop
.395e92	a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395e94	22 ec 3f 39	jsl $393fec	                    JSL ISETTIMEOUT
.395e98	28		plp		                    PLP
.395e99	2b		pld		                    PLD
.395e9a	38		sec		                    SEC
.395e9b	60		rts		                    RTS
.395e9c	28		plp		time_out            PLP
.395e9d	2b		pld		                    PLD
.395e9e	18		clc		                    CLC
.395e9f	60		rts		                    RTS
.395ea0					FDC_Can_Read_Data
.395ea0	0b		phd		                    PHD
.395ea1	08		php		                    PHP
.395ea2	48		pha		                PHA             ; begin setdp macro
.395ea3	08		php		                PHP
.395ea4	c2 20		rep #$20	                REP #$20        ; set A long
.395ea6	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395ea9	5b		tcd		                TCD
.395eaa	28		plp		                PLP
.395eab	68		pla		                PLA             ; end setdp macro
.395eac	e2 20		sep #$20	                SEP #$20        ; set A short
.395eae	a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395eb0	22 ec 3f 39	jsl $393fec	                    JSL ISETTIMEOUT
.395eb4	a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395eb6	30 14		bmi $395ecc	                    BMI time_out            ; If so: signal a time out
.395eb8	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395ebc	29 40		and #$40	                    AND #FDC_MSR_DIO
.395ebe	c9 40		cmp #$40	                    CMP #FDC_MSR_DIO
.395ec0	d0 f2		bne $395eb4	                    BNE loop
.395ec2	a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395ec4	22 ec 3f 39	jsl $393fec	                    JSL ISETTIMEOUT
.395ec8	28		plp		                    PLP
.395ec9	2b		pld		                    PLD
.395eca	38		sec		                    SEC
.395ecb	60		rts		                    RTS
.395ecc	28		plp		time_out            PLP
.395ecd	2b		pld		                    PLD
.395ece	18		clc		                    CLC
.395ecf	60		rts		                    RTS
.395ed0					FDC_CAN_WRITE
.395ed0	0b		phd		                    PHD
.395ed1	08		php		                    PHP
.395ed2	48		pha		                PHA             ; begin setdp macro
.395ed3	08		php		                PHP
.395ed4	c2 20		rep #$20	                REP #$20        ; set A long
.395ed6	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395ed9	5b		tcd		                TCD
.395eda	28		plp		                PLP
.395edb	68		pla		                PLA             ; end setdp macro
.395edc	e2 20		sep #$20	                SEP #$20        ; set A short
.395ede	a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395ee0	22 ec 3f 39	jsl $393fec	                    JSL ISETTIMEOUT
.395ee4	a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395ee6	30 14		bmi $395efc	                    BMI time_out            ; If so: signal a time out
.395ee8	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395eec	29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.395eee	c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.395ef0	d0 f2		bne $395ee4	                    BNE loop
.395ef2	a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395ef4	22 ec 3f 39	jsl $393fec	                    JSL ISETTIMEOUT
.395ef8	28		plp		                    PLP
.395ef9	2b		pld		                    PLD
.395efa	38		sec		                    SEC
.395efb	60		rts		                    RTS
.395efc	28		plp		time_out            PLP
.395efd	2b		pld		                    PLD
.395efe	18		clc		                    CLC
.395eff	60		rts		                    RTS
.395f00					FDC_DELAY_10MS
.395f00	da		phx		                    PHX
.395f01	08		php		                    PHP
.395f02	c2 10		rep #$10	                REP #$10        ; set X long
.395f04	a2 80 3e	ldx #$3e80	                    LDX #16000          ; Wait for around 10ms
.395f07	ea		nop		loop                NOP                 ; Each iteration should take 9 cycles
.395f08	ca		dex		                    DEX
.395f09	e0 00 00	cpx #$0000	                    CPX #0
.395f0c	d0 f9		bne $395f07	                    BNE loop
.395f0e	28		plp		                    PLP
.395f0f	fa		plx		                    PLX
.395f10	6b		rtl		                    RTL
.395f11					FDC_COMMAND
.395f11	da		phx		                    PHX
.395f12	8b		phb		                    PHB
.395f13	0b		phd		                    PHD
.395f14	08		php		                    PHP
.395f15	48		pha		                PHA             ; begin setdbr macro
.395f16	08		php		                PHP
.395f17	e2 20		sep #$20	                SEP #$20        ; set A short
.395f19	a9 00		lda #$00	                LDA #0
.395f1b	48		pha		                PHA
.395f1c	ab		plb		                PLB
.395f1d	28		plp		                PLP
.395f1e	68		pla		                PLA             ; end setdbr macro
.395f1f	48		pha		                PHA             ; begin setdp macro
.395f20	08		php		                PHP
.395f21	c2 20		rep #$20	                REP #$20        ; set A long
.395f23	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395f26	5b		tcd		                TCD
.395f27	28		plp		                PLP
.395f28	68		pla		                PLA             ; end setdp macro
.395f29	22 00 5f 39	jsl $395f00	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms
.395f2d	e2 30		sep #$30	                SEP #$30        ; set A&X short
.395f2f	a2 00		ldx #$00	                    LDX #0
.395f31	a9 00		lda #$00	                    LDA #0
.395f33	9d 10 05	sta $0510,x	clr_results         STA FDC_RESULTS,X                       ; Clear the result buffer
.395f36	e8		inx		                    INX
.395f37	e0 10		cpx #$10	                    CPX #16
.395f39	d0 f8		bne $395f33	                    BNE clr_results
.395f3b	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Validate we can send a command
.395f3f	29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.395f41	c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.395f43	f0 04		beq $395f49	                    BEQ start_send                          ; If so, start sending
.395f45	22 5e 60 39	jsl $39605e	fdc_reset           JSL FDC_INIT                            ; Reset the FDC
.395f49					start_send
.395f49	e2 10		sep #$10	                SEP #$10        ; set X short
.395f4b	a2 00		ldx #$00	                    LDX #0
.395f4d	20 16 5e	jsr $395e16	send_loop           JSR FDC_Check_RQM                       ; Wait until we can write
.395f50	b0 03		bcs $395f55	                    BCS send_param
.395f52	82 5e 00	brl $395fb3	                    BRL time_out                            ; If there was a timeout, flag the time out
.395f55	bd 00 05	lda $0500,x	send_param          LDA FDC_PARAMETERS,X                    ; Get the parameter/command byte to write
.395f58	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; Send it
.395f5c	22 00 5f 39	jsl $395f00	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms for things to settle
.395f60	e8		inx		                    INX                                     ; Advance to the next byte
.395f61	ec 30 05	cpx $0530	                    CPX FDC_PARAM_NUM
.395f64	d0 e7		bne $395f4d	                    BNE send_loop                           ; Keep sending until we've sent them all
.395f66	ad 33 05	lda $0533	                    LDA FDC_EXPECT_DAT                      ; Check the data expectation byte
.395f69	d0 03		bne $395f6e	                    BNE chk_data_dir
.395f6b	82 80 00	brl $395fee	                    BRL result_phase                        ; If 0: we just want a result
.395f6e	10 3c		bpl $395fac	chk_data_dir        BPL rd_data                             ; If >0: we want to read data
.395f70					wr_data
.395f70	a5 0b		lda $030b	wr_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.395f72	30 03		bmi $395f77	                    BMI wr_chk_rqm
.395f74	82 3c 00	brl $395fb3	                    BRL time_out                            ; If not, raise an error
.395f77	af f4 13 af	lda $af13f4	wr_chk_rqm          LDA @l SIO_FDC_MSR                      ; Wait for ready to write
.395f7b	89 80		bit #$80	                    BIT #FDC_MSR_RQM
.395f7d	f0 f1		beq $395f70	                    BEQ wr_data_rdy
.395f7f	89 20		bit #$20	                    BIT #FDC_MSR_NONDMA                     ; Check if in execution mode
.395f81	d0 03		bne $395f86	                    BNE wr_data_phase                       ; If so: transfer the data
.395f83	82 68 00	brl $395fee	                    BRL result_phase                          ; If not: it's an error
.395f86					wr_data_phase
.395f86	c2 10		rep #$10	                REP #$10        ; set X long
.395f88	a0 00 00	ldy #$0000	                    LDY #0
.395f8b	a5 0b		lda $030b	wr_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.395f8d	30 03		bmi $395f92	                    BMI wr_chk_nondma
.395f8f	82 21 00	brl $395fb3	                    BRL time_out                            ; If not, raise an error
.395f92	af f4 13 af	lda $af13f4	wr_chk_nondma       LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.395f96	89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.395f98	f0 54		beq $395fee	                    BEQ result_phase                        ; If not: break out to result phase
.395f9a	89 80		bit #$80	                    BIT #FDC_MSR_RQM                        ; Check if we can read data
.395f9c	f0 ed		beq $395f8b	                    BEQ wr_data_loop                        ; No: keep waiting
.395f9e	b7 26		lda [$0326],y	                    LDA [BIOS_BUFF_PTR],Y                   ; Get the data byte
.395fa0	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; And save it to the buffer
.395fa4	c8		iny		                    INY                                     ; Move to the next position
.395fa5	c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.395fa8	d0 e1		bne $395f8b	                    BNE wr_data_loop                        ; If not at the end, keep fetching
.395faa	80 42		bra $395fee	                    BRA result_phase                        ; ready for the result phase
.395fac	20 a0 5e	jsr $395ea0	rd_data             JSR FDC_Can_Read_Data
.395faf	a5 0b		lda $030b	rd_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.395fb1	30 07		bmi $395fba	                    BMI chk_rd_rdy                          ; If so, check to see if the data is ready
.395fb3					time_out
.395fb3	e2 20		sep #$20	                SEP #$20        ; set A short
.395fb5	a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT                   ; Otherwise: throw a BIOS_ERR_TIMEOUT error
.395fb7	82 9c 00	brl $396056	                    BRL pass_error
.395fba	af f4 13 af	lda $af13f4	chk_rd_rdy          LDA @l SIO_FDC_MSR                      ; Wait for data to be ready
.395fbe	29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.395fc0	c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.395fc2	d0 eb		bne $395faf	                    BNE rd_data_rdy
.395fc4	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.395fc8	89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.395fca	d0 03		bne $395fcf	                    BNE rd_data_phase                       ; If so: transfer the data
.395fcc	82 83 00	brl $396052	                    BRL error                               ; If not: it's an error
.395fcf					rd_data_phase
.395fcf	c2 10		rep #$10	                REP #$10        ; set X long
.395fd1	a0 00 00	ldy #$0000	                    LDY #0
.395fd4	a5 0b		lda $030b	rd_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.395fd6	10 db		bpl $395fb3	                    BPL time_out                            ; If not: throw a timeout error
.395fd8	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Wait for the next byte to be ready
.395fdc	29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.395fde	c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.395fe0	d0 f2		bne $395fd4	                    BNE rd_data_loop
.395fe2	af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Get the data byte
.395fe6	97 26		sta [$0326],y	                    STA [BIOS_BUFF_PTR],Y                   ; And save it to the buffer
.395fe8	c8		iny		                    INY                                     ; Move to the next position
.395fe9	c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.395fec	d0 e6		bne $395fd4	                    BNE rd_data_loop                        ; If not at the end, keep fetching
.395fee	ad 32 05	lda $0532	result_phase        LDA FDC_RESULT_NUM                      ; If no results are expected...
.395ff1	f0 34		beq $396027	                    BEQ chk_busy                            ; Then we're done
.395ff3	e2 10		sep #$10	                SEP #$10        ; set X short
.395ff5	a2 00		ldx #$00	                    LDX #0
.395ff7	a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME                      ; Set the watchdog timer
.395ff9	22 ec 3f 39	jsl $393fec	                    JSL ISETTIMEOUT
.395ffd	20 a0 5e	jsr $395ea0	result_loop         JSR FDC_Can_Read_Data                   ; Wait until we can read
.396000	90 b1		bcc $395fb3	                    BCC time_out                            ; If there was a time out, raise an error
.396002	af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Yes: get the data
.396006	20 a0 5e	jsr $395ea0	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.396009	90 a8		bcc $395fb3	                    BCC time_out                            ; If there was a time out, raise an error
.39600b	af f5 13 af	lda $af13f5	read_result         LDA @l SIO_FDC_DTA                      ; Yes: get the data
.39600f	9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X                       ; Save it to the result buffer
.396012	20 16 5e	jsr $395e16	                    JSR FDC_Check_RQM
.396015	90 9c		bcc $395fb3	                    BCC time_out                            ; If there was a time out, flag the error
.396017	af f4 13 af	lda $af13f4	rd_chk_1            LDA @l SIO_FDC_MSR
.39601b	29 50		and #$50	                    AND #FDC_MSR_DIO | FDC_MSR_CMDBSY
.39601d	c9 50		cmp #$50	                    CMP #FDC_MSR_DIO | FDC_MSR_CMDBSY
.39601f	d0 06		bne $396027	                    BNE chk_busy
.396021	e8		inx		                    INX                                     ; Move to the next result positions
.396022	ec 32 05	cpx $0532	                    CPX FDC_RESULT_NUM
.396025	d0 e4		bne $39600b	                    BNE read_result                         ; And keep looping until we've read all
.396027					chk_busy
.396027	c2 10		rep #$10	                REP #$10        ; set X long
.396029	a2 0a 00	ldx #$000a	                    LDX #10                                 ; Wait 10ms (I guess?)
.39602c	22 01 15 39	jsl $391501	                    JSL ILOOP_MS
.396030	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check the command busy bit
.396034	89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.396036	f0 12		beq $39604a	                    BEQ done                                ; If not set: we're done
.396038	20 a0 5e	jsr $395ea0	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.39603b	b0 03		bcs $396040	                    BCS get_result_byte
.39603d	82 73 ff	brl $395fb3	                    BRL time_out                            ; If there was a time out, flag the error
.396040	af f5 13 af	lda $af13f5	get_result_byte     LDA @l SIO_FDC_DTA                      ; Read the data
.396044	9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X
.396047	e8		inx		                    INX
.396048	80 dd		bra $396027	                    BRA chk_busy                            ; And keep checking
.39604a					done
.39604a	64 20		stz $0320	                    STZ BIOS_STATUS
.39604c	28		plp		                    PLP
.39604d	2b		pld		                    PLD
.39604e	ab		plb		                    PLB
.39604f	fa		plx		                    PLX
.396050	38		sec		                    SEC
.396051	6b		rtl		                    RTL
.396052					error
.396052	e2 20		sep #$20	                SEP #$20        ; set A short
.396054	a9 85		lda #$85	                    LDA #BIOS_ERR_CMD
.396056	85 20		sta $0320	pass_error          STA BIOS_STATUS
.396058	28		plp		                    PLP
.396059	2b		pld		                    PLD
.39605a	ab		plb		                    PLB
.39605b	fa		plx		                    PLX
.39605c	18		clc		                    CLC
.39605d	6b		rtl		                    RTL
.39605e					FDC_Init
.39605e	08		php		                    PHP
.39605f	c2 10		rep #$10	                REP #$10        ; set X long
.396061	e2 20		sep #$20	                SEP #$20        ; set A short
.396063	a9 00		lda #$00	                    LDA #0
.396065	8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.396069	a2 e8 03	ldx #$03e8	                    LDX #1000                   ; Wait
.39606c	a0 00 00	ldy #$0000	                    LDY #0
.39606f	22 0e 15 39	jsl $39150e	                    JSL IDELAY
.396073	a9 04		lda #$04	                    LDA #FDC_DOR_NRESET         ; Reset the FDC
.396075	8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.396079	ea		nop		                    NOP
.39607a	ea		nop		                    NOP
.39607b	ea		nop		                    NOP
.39607c	ea		nop		                    NOP
.39607d	a9 00		lda #$00	                    LDA #$00                    ; Make sure the Speed and Compensation has been set
.39607f	8f f4 13 af	sta $af13f4	                    STA @l SIO_FDC_DSR
.396083	a9 00		lda #$00	                    LDA #$00                    ; Precompensation set to 0
.396085	8f f7 13 af	sta $af13f7	                    STA @l SIO_FDC_CCR
.396089	a2 8f c5	ldx #$c58f	                    LDX #<>FDC_SEEK_TIME
.39608c	a0 20 00	ldy #$0020	                    LDY #`FDC_SEEK_TIME
.39608f	22 0e 15 39	jsl $39150e	                    JSL IDELAY
.396093	22 6a 61 39	jsl $39616a	                    JSL FDC_Sense_Int_Status
.396097	90 21		bcc $3960ba	                    BCC pass_failure
.396099	22 6a 61 39	jsl $39616a	                    JSL FDC_Sense_Int_Status
.39609d	90 1b		bcc $3960ba	                    BCC pass_failure
.39609f	22 6a 61 39	jsl $39616a	                    JSL FDC_Sense_Int_Status
.3960a3	90 15		bcc $3960ba	                    BCC pass_failure
.3960a5	22 6a 61 39	jsl $39616a	                    JSL FDC_Sense_Int_Status
.3960a9	90 0f		bcc $3960ba	                    BCC pass_failure
.3960ab	22 2c 62 39	jsl $39622c	                    JSL FDC_Configure_Command
.3960af	90 09		bcc $3960ba	                    BCC pass_failure
.3960b1	22 d3 61 39	jsl $3961d3	                    JSL FDC_Specify_Command
.3960b5	90 03		bcc $3960ba	                    BCC pass_failure
.3960b7	28		plp		                    PLP
.3960b8	38		sec		                    SEC
.3960b9	6b		rtl		                    RTL
.3960ba	28		plp		pass_failure        PLP
.3960bb	18		clc		                    CLC
.3960bc	6b		rtl		                    RTL
.3960bd					FDC_MOTOR_NEEDED
.3960bd	08		php		                    PHP
.3960be	c2 20		rep #$20	                REP #$20        ; set A long
.3960c0	78		sei		                    SEI                         ; Turn off interrupts
.3960c1	a9 84 03	lda #$0384	                    LDA #FDC_MOTOR_ON_TIME      ; Reset the FDC timeout clock
.3960c4	8f 4e a0 38	sta $38a04e	                    STA @l FDC_MOTOR_TIMER
.3960c8	e2 20		sep #$20	                SEP #$20        ; set A short
.3960ca	af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.3960ce	29 fe		and #$fe	                    AND #~FNX0_INT00_SOF        ; Enable the SOF interrupt
.3960d0	8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.3960d4	28		plp		                    PLP
.3960d5	6b		rtl		                    RTL
.3960d6					FDC_Motor_On
.3960d6	08		php		                    PHP
.3960d7	22 bd 60 39	jsl $3960bd	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.3960db	e2 20		sep #$20	                SEP #$20        ; set A short
.3960dd	af f2 13 af	lda $af13f2	                    LDA @l SIO_FDC_DOR          ; Check to see if the motor is already on
.3960e1	89 10		bit #$10	                    BIT #FDC_DOR_MOT0
.3960e3	d0 1f		bne $396104	                    BNE done                    ; If so: skip
.3960e5	a9 14		lda #$14	                    LDA #FDC_DOR_MOT0 | FDC_DOR_NRESET
.3960e7	8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.3960eb	20 16 5e	jsr $395e16	                    JSR FDC_Check_RQM           ; Make sure we can leave knowing that everything set properly
.3960ee	90 17		bcc $396107	                    BCC time_out
.3960f0	a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.3960f3	a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.3960f6	22 0e 15 39	jsl $39150e	                    JSL IDELAY
.3960fa	af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.3960fe	09 80		ora #$80	                    ORA #$80                    ; Flag that the motor should be on
.396100	8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.396104	28		plp		done                PLP
.396105	38		sec		                    SEC
.396106	6b		rtl		                    RTL
.396107	28		plp		time_out            PLP                         ; Return a timeout error
.396108	18		clc		                    CLC
.396109	6b		rtl		                    RTL
.39610a					FDC_Motor_Off
.39610a	08		php		                    PHP
.39610b	e2 20		sep #$20	                SEP #$20        ; set A short
.39610d	a9 04		lda #$04	                    LDA #FDC_DOR_NRESET
.39610f	8f f2 13 af	sta $af13f2	                    STA @L SIO_FDC_DOR
.396113	c2 20		rep #$20	                REP #$20        ; set A long
.396115	78		sei		                    SEI                         ; Turn off interrupts
.396116	a9 00 00	lda #$0000	                    LDA #0                      ; Set FDC motor timeout counter to 0 to disable it
.396119	8f 4e a0 38	sta $38a04e	                    STA @l FDC_MOTOR_TIMER
.39611d	e2 20		sep #$20	                SEP #$20        ; set A short
.39611f	af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.396123	09 01		ora #$01	                    ORA #FNX0_INT00_SOF         ; Disable the SOF interrupt
.396125	8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.396129	af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.39612d	29 7f		and #$7f	                    AND #$7F                    ; Flag that the motor should be off
.39612f	8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.396133	28		plp		                    PLP
.396134	6b		rtl		                    RTL
.396135					FDC_Recalibrate_Command
.396135	0b		phd		                    PHD
.396136	08		php		                    PHP
.396137	48		pha		                PHA             ; begin setdp macro
.396138	08		php		                PHP
.396139	c2 20		rep #$20	                REP #$20        ; set A long
.39613b	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39613e	5b		tcd		                TCD
.39613f	28		plp		                PLP
.396140	68		pla		                PLA             ; end setdp macro
.396141	22 bd 60 39	jsl $3960bd	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.396145	e2 20		sep #$20	                SEP #$20        ; set A short
.396147	a9 07		lda #$07	                    LDA #FDC_CMD_RECALIBRATE    ; RECALIBRATE Command
.396149	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.39614c	a5 00		lda $0300	                    LDA FDC_DRIVE
.39614e	8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.396151	a9 02		lda #$02	                    LDA #2
.396153	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM           ; 2 parameters
.396156	9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT          ; 0 data
.396159	9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM          ; 0 results
.39615c	22 11 5f 39	jsl $395f11	                    JSL FDC_COMMAND             ; Issue the command
.396160	90 04		bcc $396166	                    BCC pass_failure            ; If failure, pass the failure up
.396162	28		plp		                    PLP
.396163	2b		pld		                    PLD
.396164	38		sec		                    SEC
.396165	6b		rtl		                    RTL
.396166	28		plp		pass_failure        PLP
.396167	2b		pld		                    PLD
.396168	18		clc		                    CLC
.396169	6b		rtl		                    RTL
.39616a					FDC_Sense_Int_Status
.39616a	8b		phb		                    PHB
.39616b	0b		phd		                    PHD
.39616c	08		php		                    PHP
.39616d	48		pha		                PHA             ; begin setdbr macro
.39616e	08		php		                PHP
.39616f	e2 20		sep #$20	                SEP #$20        ; set A short
.396171	a9 00		lda #$00	                LDA #0
.396173	48		pha		                PHA
.396174	ab		plb		                PLB
.396175	28		plp		                PLP
.396176	68		pla		                PLA             ; end setdbr macro
.396177	48		pha		                PHA             ; begin setdp macro
.396178	08		php		                PHP
.396179	c2 20		rep #$20	                REP #$20        ; set A long
.39617b	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39617e	5b		tcd		                TCD
.39617f	28		plp		                PLP
.396180	68		pla		                PLA             ; end setdp macro
.396181	c2 30		rep #$30	                REP #$30        ; set A&X long
.396183	a2 0a 00	ldx #$000a	                    LDX #10                            ; Wait for 10ms
.396186	22 01 15 39	jsl $391501	                    JSL ILOOP_MS
.39618a	e2 20		sep #$20	                SEP #$20        ; set A short
.39618c	64 06		stz $0306	                    STZ FDC_ST0                         ; Clear ST0
.39618e	a9 ff		lda #$ff	                    LDA #$FF
.396190	85 0a		sta $030a	                    STA FDC_PCN                         ; Set PCN to some obviously bad value
.396192	20 72 5e	jsr $395e72	                    JSR FDC_Check_CMD_BSY               ; Check I can send a command
.396195	90 30		bcc $3961c7	                    BCC time_out                        ; If there was a time out, raise an error
.396197	20 16 5e	jsr $395e16	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.39619a	90 2b		bcc $3961c7	                    BCC time_out                        ; If there was a time out, raise an error
.39619c	a9 08		lda #$08	                    LDA #FDC_CMD_SENSE_INTERRUPT
.39619e	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.3961a2	20 a0 5e	jsr $395ea0	                    JSR FDC_Can_Read_Data
.3961a5	90 20		bcc $3961c7	                    BCC time_out                        ; If there was a time out, raise an error
.3961a7	20 16 5e	jsr $395e16	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.3961aa	90 1b		bcc $3961c7	                    BCC time_out                        ; If there was a time out, raise an error
.3961ac	af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.3961b0	85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.3961b2	20 16 5e	jsr $395e16	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.3961b5	90 10		bcc $3961c7	                    BCC time_out                        ; If there was a time out, raise an error
.3961b7	af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.3961bb	85 0a		sta $030a	                    STA FDC_PCN                         ; --- Cylinder ---
.3961bd	e2 20		sep #$20	                SEP #$20        ; set A short
.3961bf	9c 20 03	stz $0320	                    STZ @w BIOS_STATUS
.3961c2	28		plp		                    PLP
.3961c3	2b		pld		                    PLD
.3961c4	ab		plb		                    PLB
.3961c5	38		sec		                    SEC
.3961c6	6b		rtl		                    RTL
.3961c7					time_out
.3961c7	e2 20		sep #$20	                SEP #$20        ; set A short
.3961c9	a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT               ; Return a time out error
.3961cb	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.3961ce	28		plp		                    PLP
.3961cf	2b		pld		                    PLD
.3961d0	ab		plb		                    PLB
.3961d1	18		clc		                    CLC
.3961d2	6b		rtl		                    RTL
.3961d3					FDC_Specify_Command
.3961d3	8b		phb		                    PHB
.3961d4	0b		phd		                    PHD
.3961d5	08		php		                    PHP
.3961d6	48		pha		                PHA             ; begin setdbr macro
.3961d7	08		php		                PHP
.3961d8	e2 20		sep #$20	                SEP #$20        ; set A short
.3961da	a9 00		lda #$00	                LDA #0
.3961dc	48		pha		                PHA
.3961dd	ab		plb		                PLB
.3961de	28		plp		                PLP
.3961df	68		pla		                PLA             ; end setdbr macro
.3961e0	48		pha		                PHA             ; begin setdp macro
.3961e1	08		php		                PHP
.3961e2	c2 20		rep #$20	                REP #$20        ; set A long
.3961e4	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3961e7	5b		tcd		                TCD
.3961e8	28		plp		                PLP
.3961e9	68		pla		                PLA             ; end setdp macro
.3961ea	c2 30		rep #$30	                REP #$30        ; set A&X long
.3961ec	a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.3961ef	22 01 15 39	jsl $391501	                    JSL ILOOP_MS
.3961f3	e2 20		sep #$20	                SEP #$20        ; set A short
.3961f5	20 72 5e	jsr $395e72	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.3961f8	90 26		bcc $396220	                    BCC time_out            ; If there was a time out, raise an error
.3961fa	20 16 5e	jsr $395e16	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.3961fd	90 21		bcc $396220	                    BCC time_out            ; If there was a time out, raise an error
.3961ff	a9 03		lda #$03	                    LDA #FDC_CMD_SPECIFY    ; Specify Command
.396201	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.396205	20 16 5e	jsr $395e16	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.396208	90 16		bcc $396220	                    BCC time_out            ; If there was a time out, raise an error
.39620a	a9 cf		lda #$cf	                    LDA #$CF
.39620c	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.396210	20 16 5e	jsr $395e16	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.396213	90 0b		bcc $396220	                    BCC time_out            ; If there was a time out, raise an error
.396215	a9 01		lda #$01	                    LDA #$01                ; 1 = Non-DMA
.396217	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.39621b	28		plp		                    PLP
.39621c	2b		pld		                    PLD
.39621d	ab		plb		                    PLB
.39621e	38		sec		                    SEC
.39621f	6b		rtl		                    RTL
.396220					time_out
.396220	e2 20		sep #$20	                SEP #$20        ; set A short
.396222	a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.396224	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.396227	28		plp		                    PLP
.396228	2b		pld		                    PLD
.396229	ab		plb		                    PLB
.39622a	18		clc		                    CLC
.39622b	6b		rtl		                    RTL
.39622c					FDC_Configure_Command
.39622c	8b		phb		                    PHB
.39622d	0b		phd		                    PHD
.39622e	08		php		                    PHP
.39622f	48		pha		                PHA             ; begin setdbr macro
.396230	08		php		                PHP
.396231	e2 20		sep #$20	                SEP #$20        ; set A short
.396233	a9 00		lda #$00	                LDA #0
.396235	48		pha		                PHA
.396236	ab		plb		                PLB
.396237	28		plp		                PLP
.396238	68		pla		                PLA             ; end setdbr macro
.396239	48		pha		                PHA             ; begin setdp macro
.39623a	08		php		                PHP
.39623b	c2 20		rep #$20	                REP #$20        ; set A long
.39623d	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396240	5b		tcd		                TCD
.396241	28		plp		                PLP
.396242	68		pla		                PLA             ; end setdp macro
.396243	c2 30		rep #$30	                REP #$30        ; set A&X long
.396245	a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.396248	22 01 15 39	jsl $391501	                    JSL ILOOP_MS
.39624c	e2 20		sep #$20	                SEP #$20        ; set A short
.39624e	20 72 5e	jsr $395e72	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.396251	90 36		bcc $396289	                    BCC time_out            ; If there was a time out, raise an error
.396253	20 16 5e	jsr $395e16	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.396256	90 31		bcc $396289	                    BCC time_out            ; If there was a time out, raise an error
.396258	a9 13		lda #$13	                    LDA #FDC_CMD_CONFIGURE  ; Specify Command
.39625a	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.39625e	20 16 5e	jsr $395e16	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.396261	90 26		bcc $396289	                    BCC time_out            ; If there was a time out, raise an error
.396263	a9 00		lda #$00	                    LDA #$00
.396265	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.396269	20 16 5e	jsr $395e16	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.39626c	90 1b		bcc $396289	                    BCC time_out            ; If there was a time out, raise an error
.39626e	a9 44		lda #$44	                    LDA #$44                ; Implied Seek, FIFOTHR = 4 byte
.396270	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.396274	20 16 5e	jsr $395e16	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.396277	90 10		bcc $396289	                    BCC time_out            ; If there was a time out, raise an error
.396279	a9 00		lda #$00	                    LDA #$00
.39627b	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.39627f	20 72 5e	jsr $395e72	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.396282	90 05		bcc $396289	                    BCC time_out            ; If there was a time out, raise an error
.396284	28		plp		                    PLP
.396285	2b		pld		                    PLD
.396286	ab		plb		                    PLB
.396287	38		sec		                    SEC
.396288	6b		rtl		                    RTL
.396289					time_out
.396289	e2 20		sep #$20	                SEP #$20        ; set A short
.39628b	a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.39628d	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.396290	28		plp		                    PLP
.396291	2b		pld		                    PLD
.396292	ab		plb		                    PLB
.396293	18		clc		                    CLC
.396294	6b		rtl		                    RTL
.396295					FDC_Read_ID_Command
.396295	8b		phb		                    PHB
.396296	0b		phd		                    PHD
.396297	08		php		                    PHP
.396298	48		pha		                PHA             ; begin setdbr macro
.396299	08		php		                PHP
.39629a	e2 20		sep #$20	                SEP #$20        ; set A short
.39629c	a9 00		lda #$00	                LDA #0
.39629e	48		pha		                PHA
.39629f	ab		plb		                PLB
.3962a0	28		plp		                PLP
.3962a1	68		pla		                PLA             ; end setdbr macro
.3962a2	48		pha		                PHA             ; begin setdp macro
.3962a3	08		php		                PHP
.3962a4	c2 20		rep #$20	                REP #$20        ; set A long
.3962a6	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3962a9	5b		tcd		                TCD
.3962aa	28		plp		                PLP
.3962ab	68		pla		                PLA             ; end setdp macro
.3962ac	e2 20		sep #$20	                SEP #$20        ; set A short
.3962ae	a9 0a		lda #$0a	                    LDA #FDC_CMD_READ_ID                ; READID Command
.3962b0	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.3962b3	a9 01		lda #$01	                    LDA #1
.3962b5	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.3962b8	9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.3962bb	a9 07		lda #$07	                    LDA #7
.3962bd	8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.3962c0	22 11 5f 39	jsl $395f11	                    JSL FDC_COMMAND                     ; Issue the command
.3962c4	90 27		bcc $3962ed	                    BCC pass_failure
.3962c6	ad 10 05	lda $0510	                    LDA FDC_RESULTS
.3962c9	85 06		sta $0306	                    STA FDC_ST0                         ; Get ST0
.3962cb	ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.3962ce	85 07		sta $0307	                    STA FDC_ST1                         ; Get ST1
.3962d0	ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.3962d3	85 08		sta $0308	                    STA FDC_ST2                         ; Get ST2
.3962d5	ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.3962d8	85 02		sta $0302	                    STA FDC_CYLINDER                    ; Get the cylinder
.3962da	ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.3962dd	85 01		sta $0301	                    STA FDC_HEAD                        ; Get the head
.3962df	ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.3962e2	85 0a		sta $030a	                    STA FDC_PCN                         ; Get the sector
.3962e4	ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.3962e7	85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; Get the sector size code
.3962e9	28		plp		                    PLP
.3962ea	2b		pld		                    PLD
.3962eb	ab		plb		                    PLB
.3962ec	6b		rtl		                    RTL
.3962ed	28		plp		pass_failure        PLP
.3962ee	2b		pld		                    PLD
.3962ef	ab		plb		                    PLB
.3962f0	18		clc		                    CLC
.3962f1	6b		rtl		                    RTL
.3962f2					FDC_DumpReg_Command
.3962f2	0b		phd		                    PHD
.3962f3	08		php		                    PHP
.3962f4	e2 20		sep #$20	                SEP #$20        ; set A short
.3962f6	a9 0e		lda #$0e	                    LDA #FDC_CMD_DUMPREG                ; DUMPREG Command
.3962f8	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.3962fb	a9 01		lda #$01	                    LDA #1
.3962fd	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.396300	9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.396303	a9 0a		lda #$0a	                    LDA #10
.396305	8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 10 results
.396308	22 11 5f 39	jsl $395f11	                    JSL FDC_COMMAND                     ; Issue the command
.39630c	90 03		bcc $396311	                    BCC pass_failure
.39630e	28		plp		                    PLP
.39630f	2b		pld		                    PLD
.396310	6b		rtl		                    RTL
.396311	28		plp		pass_failure        PLP
.396312	2b		pld		                    PLD
.396313	18		clc		                    CLC
.396314	6b		rtl		                    RTL
.396315					FDC_Seek_Track
.396315	8b		phb		                    PHB
.396316	0b		phd		                    PHD
.396317	08		php		                    PHP
.396318	48		pha		                PHA             ; begin setdbr macro
.396319	08		php		                PHP
.39631a	e2 20		sep #$20	                SEP #$20        ; set A short
.39631c	a9 00		lda #$00	                LDA #0
.39631e	48		pha		                PHA
.39631f	ab		plb		                PLB
.396320	28		plp		                PLP
.396321	68		pla		                PLA             ; end setdbr macro
.396322	48		pha		                PHA             ; begin setdp macro
.396323	08		php		                PHP
.396324	c2 20		rep #$20	                REP #$20        ; set A long
.396326	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396329	5b		tcd		                TCD
.39632a	28		plp		                PLP
.39632b	68		pla		                PLA             ; end setdp macro
.39632c	22 bd 60 39	jsl $3960bd	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.396330	e2 20		sep #$20	                SEP #$20        ; set A short
.396332	a9 0f		lda #$0f	                    LDA #FDC_CMD_SEEK                   ; Seek Command
.396334	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.396337	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.396339	29 01		and #$01	                    AND #$01
.39633b	0a		asl a		                    ASL A
.39633c	0a		asl a		                    ASL A
.39633d	05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.39633f	8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.396342	a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; And the track
.396344	8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.396347	a9 03		lda #$03	                    LDA #3
.396349	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 3 parameter (the command)
.39634c	9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.39634f	9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM                  ; 0 results
.396352	22 11 5f 39	jsl $395f11	                    JSL FDC_COMMAND                     ; Issue the command
.396356	90 05		bcc $39635d	                    BCC pass_failure
.396358	28		plp		                    PLP
.396359	2b		pld		                    PLD
.39635a	ab		plb		                    PLB
.39635b	38		sec		                    SEC
.39635c	6b		rtl		                    RTL
.39635d	28		plp		pass_failure        PLP
.39635e	2b		pld		                    PLD
.39635f	ab		plb		                    PLB
.396360	18		clc		                    CLC
.396361	6b		rtl		                    RTL
.396362					FDC_Read_Sector
.396362	8b		phb		                    PHB
.396363	0b		phd		                    PHD
.396364	08		php		                    PHP
.396365	48		pha		                PHA             ; begin setdbr macro
.396366	08		php		                PHP
.396367	e2 20		sep #$20	                SEP #$20        ; set A short
.396369	a9 00		lda #$00	                LDA #0
.39636b	48		pha		                PHA
.39636c	ab		plb		                PLB
.39636d	28		plp		                PLP
.39636e	68		pla		                PLA             ; end setdbr macro
.39636f	48		pha		                PHA             ; begin setdp macro
.396370	08		php		                PHP
.396371	c2 20		rep #$20	                REP #$20        ; set A long
.396373	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396376	5b		tcd		                TCD
.396377	28		plp		                PLP
.396378	68		pla		                PLA             ; end setdp macro
.396379	22 bd 60 39	jsl $3960bd	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.39637d	e2 20		sep #$20	                SEP #$20        ; set A short
.39637f	a9 06		lda #$06	                    LDA #FDC_CMD_READ_DATA              ; The READ_DATA command
.396381	09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.396383	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.396386	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.396388	29 01		and #$01	                    AND #$01
.39638a	0a		asl a		                    ASL A
.39638b	0a		asl a		                    ASL A
.39638c	05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.39638e	8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.396391	a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.396393	8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.396396	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.396398	8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.39639b	a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.39639d	8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.3963a0	a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.3963a2	8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.3963a5	a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.3963a7	8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.3963aa	a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.3963ac	8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.3963af	a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.3963b1	8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.3963b4	a9 09		lda #$09	                    LDA #9
.3963b6	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.3963b9	a9 01		lda #$01	                    LDA #1
.3963bb	8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect data
.3963be	a9 07		lda #$07	                    LDA #7
.3963c0	8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.3963c3	22 11 5f 39	jsl $395f11	command             JSL FDC_COMMAND                     ; Issue the command
.3963c7	08		php		                    PHP
.3963c8	ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.3963cb	85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ----
.3963cd	ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.3963d0	85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ----
.3963d2	ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.3963d5	85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ----
.3963d7	ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.3963da	85 02		sta $0302	                    STA FDC_CYLINDER                    ; -- C ---
.3963dc	ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.3963df	85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.3963e1	ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.3963e4	85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.3963e6	ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.3963e9	85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.3963eb	28		plp		                    PLP
.3963ec	90 04		bcc $3963f2	                    BCC pass_failure
.3963ee	28		plp		done                PLP
.3963ef	2b		pld		                    PLD
.3963f0	ab		plb		                    PLB
.3963f1	6b		rtl		                    RTL
.3963f2	28		plp		pass_failure        PLP
.3963f3	2b		pld		                    PLD
.3963f4	ab		plb		                    PLB
.3963f5	18		clc		                    CLC
.3963f6	6b		rtl		                    RTL
.3963f7					FDC_Write_Sector
.3963f7	8b		phb		                    PHB
.3963f8	0b		phd		                    PHD
.3963f9	08		php		                    PHP
.3963fa	48		pha		                PHA             ; begin setdbr macro
.3963fb	08		php		                PHP
.3963fc	e2 20		sep #$20	                SEP #$20        ; set A short
.3963fe	a9 00		lda #$00	                LDA #0
.396400	48		pha		                PHA
.396401	ab		plb		                PLB
.396402	28		plp		                PLP
.396403	68		pla		                PLA             ; end setdbr macro
.396404	48		pha		                PHA             ; begin setdp macro
.396405	08		php		                PHP
.396406	c2 20		rep #$20	                REP #$20        ; set A long
.396408	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39640b	5b		tcd		                TCD
.39640c	28		plp		                PLP
.39640d	68		pla		                PLA             ; end setdp macro
.39640e	e2 20		sep #$20	                SEP #$20        ; set A short
.396410	22 bd 60 39	jsl $3960bd	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.396414	a9 05		lda #$05	                    LDA #FDC_CMD_WRITE_DATA             ; The WRITE_DATA command
.396416	09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.396418	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.39641b	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.39641d	29 01		and #$01	                    AND #$01
.39641f	0a		asl a		                    ASL A
.396420	0a		asl a		                    ASL A
.396421	05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.396423	8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.396426	a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.396428	8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.39642b	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.39642d	8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.396430	a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.396432	8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.396435	a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.396437	8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.39643a	a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.39643c	8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.39643f	a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.396441	8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.396444	a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.396446	8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.396449	a9 09		lda #$09	                    LDA #9
.39644b	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.39644e	a9 ff		lda #$ff	                    LDA #$FF
.396450	8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect to write data
.396453	a9 07		lda #$07	                    LDA #7
.396455	8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.396458	22 11 5f 39	jsl $395f11	command             JSL FDC_COMMAND                     ; Issue the command
.39645c	08		php		                    PHP
.39645d	ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.396460	85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.396462	ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.396465	85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ---
.396467	ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.39646a	85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ---
.39646c	ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.39646f	85 02		sta $0302	                    STA FDC_CYLINDER                    ; --- C ---
.396471	ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.396474	85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.396476	ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.396479	85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.39647b	ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.39647e	85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.396480	28		plp		check_status        PLP
.396481	90 04		bcc $396487	                    BCC pass_failure
.396483	28		plp		done                PLP
.396484	2b		pld		                    PLD
.396485	ab		plb		                    PLB
.396486	6b		rtl		                    RTL
.396487	28		plp		pass_failure        PLP
.396488	2b		pld		                    PLD
.396489	ab		plb		                    PLB
.39648a	18		clc		                    CLC
.39648b	6b		rtl		                    RTL
.39648c					DIVIDE32
.39648c	da		phx		                    PHX
.39648d	5a		phy		                    PHY
.39648e	0b		phd		                    PHD
.39648f	08		php		                    PHP
.396490	48		pha		                PHA             ; begin setdp macro
.396491	08		php		                PHP
.396492	c2 20		rep #$20	                REP #$20        ; set A long
.396494	a9 0c 03	lda #$030c	                LDA #DIVIDEND         ; set DP to page 0
.396497	5b		tcd		                TCD
.396498	28		plp		                PLP
.396499	68		pla		                PLA             ; end setdp macro
.39649a	c2 30		rep #$30	                REP #$30        ; set A&X long
.39649c	64 08		stz $0314	                    STZ REMAINDER           ; Initialize the remainder
.39649e	64 0a		stz $0316	                    STZ REMAINDER+2
.3964a0	a2 20 00	ldx #$0020	                    LDX #32                 ; Set the number of bits to process
.3964a3	06 00		asl $030c	loop                ASL DIVIDEND
.3964a5	26 02		rol $030e	                    ROL DIVIDEND+2
.3964a7	26 08		rol $0314	                    ROL REMAINDER
.3964a9	26 0a		rol $0316	                    ROL REMAINDER+2
.3964ab	a5 08		lda $0314	                    LDA REMAINDER
.3964ad	38		sec		                    SEC
.3964ae	e5 04		sbc $0310	                    SBC DIVISOR
.3964b0	a8		tay		                    TAY
.3964b1	a5 0a		lda $0316	                    LDA REMAINDER+2
.3964b3	e5 06		sbc $0312	                    SBC DIVISOR+2
.3964b5	90 06		bcc $3964bd	                    BCC skip
.3964b7	85 0a		sta $0316	                    STA REMAINDER+2
.3964b9	84 08		sty $0314	                    STY REMAINDER
.3964bb	e6 00		inc $030c	                    INC DIVIDEND
.3964bd	ca		dex		skip                DEX
.3964be	d0 e3		bne $3964a3	                    BNE loop
.3964c0	28		plp		                    PLP
.3964c1	2b		pld		                    PLD
.3964c2	7a		ply		                    PLY
.3964c3	fa		plx		                    PLX
.3964c4	60		rts		                    RTS
.3964c5					LBA2CHS
.3964c5	8b		phb		                    PHB
.3964c6	0b		phd		                    PHD
.3964c7	08		php		                    PHP
.3964c8	48		pha		                PHA             ; begin setdbr macro
.3964c9	08		php		                PHP
.3964ca	e2 20		sep #$20	                SEP #$20        ; set A short
.3964cc	a9 00		lda #$00	                LDA #0
.3964ce	48		pha		                PHA
.3964cf	ab		plb		                PLB
.3964d0	28		plp		                PLP
.3964d1	68		pla		                PLA             ; end setdbr macro
.3964d2	48		pha		                PHA             ; begin setdp macro
.3964d3	08		php		                PHP
.3964d4	c2 20		rep #$20	                REP #$20        ; set A long
.3964d6	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3964d9	5b		tcd		                TCD
.3964da	28		plp		                PLP
.3964db	68		pla		                PLA             ; end setdp macro
.3964dc	c2 30		rep #$30	                REP #$30        ; set A&X long
.3964de	a5 22		lda $0322	                    LDA BIOS_LBA
.3964e0	85 0c		sta $030c	                    STA DIVIDEND
.3964e2	a5 24		lda $0324	                    LDA BIOS_LBA+2
.3964e4	85 0e		sta $030e	                    STA DIVIDEND+2
.3964e6	a9 24 00	lda #$0024	                    LDA #36
.3964e9	85 10		sta $0310	                    STA DIVISOR
.3964eb	64 12		stz $0312	                    STZ DIVISOR+2
.3964ed	20 8c 64	jsr $39648c	                    JSR DIVIDE32
.3964f0	e2 20		sep #$20	                SEP #$20        ; set A short
.3964f2	a5 0c		lda $030c	                    LDA DIVIDEND
.3964f4	85 02		sta $0302	                    STA FDC_CYLINDER
.3964f6	c2 20		rep #$20	                REP #$20        ; set A long
.3964f8	a5 14		lda $0314	                    LDA REMAINDER
.3964fa	85 0c		sta $030c	                    STA DIVIDEND
.3964fc	a5 16		lda $0316	                    LDA REMAINDER+2
.3964fe	85 0e		sta $030e	                    STA DIVIDEND+2
.396500	a9 12 00	lda #$0012	                    LDA #18
.396503	85 10		sta $0310	                    STA DIVISOR
.396505	64 12		stz $0312	                    STZ DIVISOR+2
.396507	20 8c 64	jsr $39648c	                    JSR DIVIDE32
.39650a	e2 20		sep #$20	                SEP #$20        ; set A short
.39650c	a5 0c		lda $030c	                    LDA DIVIDEND
.39650e	29 01		and #$01	                    AND #$01
.396510	85 01		sta $0301	                    STA FDC_HEAD
.396512	a5 14		lda $0314	                    LDA REMAINDER
.396514	1a		inc a		                    INC A
.396515	85 03		sta $0303	                    STA FDC_SECTOR
.396517	28		plp		                    PLP
.396518	2b		pld		                    PLD
.396519	ab		plb		                    PLB
.39651a	6b		rtl		                    RTL
.39651b					FDC_GETBLOCK
.39651b	8b		phb		                    PHB
.39651c	0b		phd		                    PHD
.39651d	08		php		                    PHP
.39651e	48		pha		                PHA             ; begin setdbr macro
.39651f	08		php		                PHP
.396520	e2 20		sep #$20	                SEP #$20        ; set A short
.396522	a9 00		lda #$00	                LDA #0
.396524	48		pha		                PHA
.396525	ab		plb		                PLB
.396526	28		plp		                PLP
.396527	68		pla		                PLA             ; end setdbr macro
.396528	48		pha		                PHA             ; begin setdp macro
.396529	08		php		                PHP
.39652a	c2 20		rep #$20	                REP #$20        ; set A long
.39652c	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39652f	5b		tcd		                TCD
.396530	28		plp		                PLP
.396531	68		pla		                PLA             ; end setdp macro
.396532	e2 20		sep #$20	                SEP #$20        ; set A short
.396534	a9 03		lda #$03	                    LDA #3                      ; We can retry 3 times
.396536	8d 34 05	sta $0534	                    STA FDC_CMD_RETRY
.396539	c2 30		rep #$30	                REP #$30        ; set A&X long
.39653b	22 c5 64 39	jsl $3964c5	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.39653f	e2 20		sep #$20	                SEP #$20        ; set A short
.396541	a5 03		lda $0303	                    LDA FDC_SECTOR              ; Just make sure the sector is ok
.396543	f0 29		beq $39656e	                    BEQ read_failure
.396545					try_read
.396545	c2 20		rep #$20	                REP #$20        ; set A long
.396547	22 62 63 39	jsl $396362	                    JSL FDC_Read_Sector         ; Read the sector
.39654b	90 14		bcc $396561	                    BCC retry
.39654d	e2 20		sep #$20	                SEP #$20        ; set A short
.39654f	a5 06		lda $0306	                    LDA FDC_ST0
.396551	29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.396553	d0 19		bne $39656e	                    BNE read_failure
.396555					ret_success
.396555	e2 20		sep #$20	                SEP #$20        ; set A short
.396557	a9 00		lda #$00	                    LDA #0
.396559	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.39655c	28		plp		                    PLP
.39655d	2b		pld		                    PLD
.39655e	ab		plb		                    PLB
.39655f	38		sec		                    SEC
.396560	6b		rtl		                    RTL
.396561					retry
.396561	e2 20		sep #$20	                SEP #$20        ; set A short
.396563	ce 34 05	dec $0534	                    DEC FDC_CMD_RETRY           ; Decrement the retry counter
.396566	30 13		bmi $39657b	                    BMI pass_failure            ; If it's gone negative, we should quit with an error
.396568	22 5e 60 39	jsl $39605e	                    JSL FDC_INIT                ; Otherwise, reinitialize the FDC
.39656c	80 d7		bra $396545	                    BRA try_read                ; And try the read again
.39656e					read_failure
.39656e	e2 20		sep #$20	                SEP #$20        ; set A short
.396570	a9 82		lda #$82	                    LDA #BIOS_ERR_READ
.396572	80 04		bra $396578	                    BRA ret_failure
.396574					seek_failure
.396574	e2 20		sep #$20	                SEP #$20        ; set A short
.396576	a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.396578	8d 20 03	sta $0320	ret_failure         STA @w BIOS_STATUS
.39657b	28		plp		pass_failure        PLP
.39657c	2b		pld		                    PLD
.39657d	ab		plb		                    PLB
.39657e	18		clc		                    CLC
.39657f	6b		rtl		                    RTL
.396580					FDC_PUTBLOCK
.396580	8b		phb		                    PHB
.396581	0b		phd		                    PHD
.396582	08		php		                    PHP
.396583	48		pha		                PHA             ; begin setdbr macro
.396584	08		php		                PHP
.396585	e2 20		sep #$20	                SEP #$20        ; set A short
.396587	a9 00		lda #$00	                LDA #0
.396589	48		pha		                PHA
.39658a	ab		plb		                PLB
.39658b	28		plp		                PLP
.39658c	68		pla		                PLA             ; end setdbr macro
.39658d	48		pha		                PHA             ; begin setdp macro
.39658e	08		php		                PHP
.39658f	c2 20		rep #$20	                REP #$20        ; set A long
.396591	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396594	5b		tcd		                TCD
.396595	28		plp		                PLP
.396596	68		pla		                PLA             ; end setdp macro
.396597	e2 20		sep #$20	                SEP #$20        ; set A short
.396599	a9 03		lda #$03	                    LDA #3                      ; Set the number of retries we're willing to do
.39659b	8d 34 05	sta $0534	                    STA @w FDC_CMD_RETRY
.39659e	c2 30		rep #$30	                REP #$30        ; set A&X long
.3965a0	22 c5 64 39	jsl $3964c5	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.3965a4	22 f7 63 39	jsl $3963f7	retry               JSL FDC_Write_Sector        ; Write the sector
.3965a8	b0 03		bcs $3965ad	                    BCS chk_st0
.3965aa	82 28 00	brl $3965d5	                    BRL attempt_retry
.3965ad					chk_st0
.3965ad	e2 20		sep #$20	                SEP #$20        ; set A short
.3965af	a5 06		lda $0306	                    LDA FDC_ST0
.3965b1	29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.3965b3	d0 0c		bne $3965c1	                    BNE write_failure
.3965b5					ret_success
.3965b5	e2 20		sep #$20	                SEP #$20        ; set A short
.3965b7	a9 00		lda #$00	                    LDA #0
.3965b9	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.3965bc	28		plp		                    PLP
.3965bd	2b		pld		                    PLD
.3965be	ab		plb		                    PLB
.3965bf	38		sec		                    SEC
.3965c0	6b		rtl		                    RTL
.3965c1					write_failure
.3965c1	e2 20		sep #$20	                SEP #$20        ; set A short
.3965c3	a5 07		lda $0307	                    LDA FDC_ST1                         ; Check ST1 for write protect
.3965c5	89 02		bit #$02	                    BIT #FDC_ST1_NW
.3965c7	f0 04		beq $3965cd	                    BEQ generic_err
.3965c9	a9 86		lda #$86	                    LDA #BIOS_ERR_WRITEPROT             ; Yes: return a write-protect error
.3965cb	80 17		bra $3965e4	                    BRA ret_failure
.3965cd	89 10		bit #$10	generic_err         BIT #FDC_ST1_OR                     ; TODO: properly handle over/under run errors
.3965cf	d0 e4		bne $3965b5	                    BNE ret_success
.3965d1	89 80		bit #$80	                    BIT #FDC_ST1_EN                     ; TODO: properly handle end-of-track
.3965d3	d0 e0		bne $3965b5	                    BNE ret_success
.3965d5					attempt_retry
.3965d5	e2 20		sep #$20	                SEP #$20        ; set A short
.3965d7	ce 34 05	dec $0534	                    DEC @w FDC_CMD_RETRY                ; Count down the retries
.3965da	d0 c8		bne $3965a4	                    BNE retry                           ; And retry unless we have none left
.3965dc	a9 83		lda #$83	                    LDA #BIOS_ERR_WRITE                 ; Otherwise: return a generic write error
.3965de	80 04		bra $3965e4	                    BRA ret_failure
.3965e0					seek_failure
.3965e0	e2 20		sep #$20	                SEP #$20        ; set A short
.3965e2	a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.3965e4					ret_failure
.3965e4	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.3965e7	28		plp		pass_failure        PLP
.3965e8	2b		pld		                    PLD
.3965e9	ab		plb		                    PLB
.3965ea	18		clc		                    CLC
.3965eb	6b		rtl		                    RTL
.3965ec					FDC_MOUNT
.3965ec	8b		phb		                    PHB
.3965ed	0b		phd		                    PHD
.3965ee	08		php		                    PHP
.3965ef	48		pha		                PHA             ; begin setdbr macro
.3965f0	08		php		                PHP
.3965f1	e2 20		sep #$20	                SEP #$20        ; set A short
.3965f3	a9 00		lda #$00	                LDA #0
.3965f5	48		pha		                PHA
.3965f6	ab		plb		                PLB
.3965f7	28		plp		                PLP
.3965f8	68		pla		                PLA             ; end setdbr macro
.3965f9	48		pha		                PHA             ; begin setdp macro
.3965fa	08		php		                PHP
.3965fb	c2 20		rep #$20	                REP #$20        ; set A long
.3965fd	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396600	5b		tcd		                TCD
.396601	28		plp		                PLP
.396602	68		pla		                PLA             ; end setdp macro
.396603	e2 20		sep #$20	                SEP #$20        ; set A short
.396605	c2 10		rep #$10	                REP #$10        ; set X long
.396607	a9 00		lda #$00	                    LDA #0
.396609	a2 00 00	ldx #$0000	                    LDX #0
.39660c	9f 00 a3 38	sta $38a300,x	zero_loop           STA DOS_SECTOR,X
.396610	e8		inx		                    INX
.396611	e0 00 02	cpx #$0200	                    CPX #512
.396614	d0 f6		bne $39660c	                    BNE zero_loop
.396616	a9 00		lda #$00	                    LDA #0                                  ; We only support drive 0
.396618	85 00		sta $0300	                    STA FDC_DRIVE
.39661a	22 d6 60 39	jsl $3960d6	                    JSL FDC_Motor_On                        ; Turn the motor on
.39661e	c2 30		rep #$30	                REP #$30        ; set A&X long
.396620	a9 00 00	lda #$0000	                    LDA #0                                  ; We want sector 0
.396623	85 22		sta $0322	                    STA BIOS_LBA
.396625	85 24		sta $0324	                    STA BIOS_LBA+2
.396627	a9 00 a3	lda #$a300	                    LDA #<>DOS_SECTOR                       ; And load it into DOS_SECTOR
.39662a	85 26		sta $0326	                    STA BIOS_BUFF_PTR
.39662c	a9 38 00	lda #$0038	                    LDA #`DOS_SECTOR
.39662f	85 28		sta $0328	                    STA BIOS_BUFF_PTR+2
.396631	22 1b 65 39	jsl $39651b	                    JSL FDC_GETBLOCK                        ; Attempt to read the data
.396635	b0 03		bcs $39663a	                    BCS parse_boot                          ; If ok: start parsing the boot record
.396637	82 d3 00	brl $39670d	                    BRL pass_failure                        ; Pass the error up the chain
.39663a					parse_boot
.39663a	e2 20		sep #$20	                SEP #$20        ; set A short
.39663c	a9 00		lda #$00	                    LDA #PART_TYPE_FAT12                    ; Set the file system to FAT12
.39663e	8f 01 a0 38	sta $38a001	                    STA @l FILE_SYSTEM
.396642	a9 00		lda #$00	                    LDA #0                                  ; There are no partitions on the disk
.396644	8f 02 a0 38	sta $38a002	                    STA @l PARTITION
.396648	e2 20		sep #$20	                SEP #$20        ; set A short
.39664a	af 0d a3 38	lda $38a30d	                    LDA DOS_SECTOR+BPB_SECPERCLUS12_OFF     ; Get the # of sectors per cluster (usually 1)
.39664e	8f 03 a0 38	sta $38a003	                    STA @l SECTORS_PER_CLUSTER
.396652	c2 20		rep #$20	                REP #$20        ; set A long
.396654	a9 00 00	lda #$0000	                    LDA #0                                  ; First sector of the "partition" is 0
.396657	8f 04 a0 38	sta $38a004	                    STA @l FIRSTSECTOR
.39665b	8f 06 a0 38	sta $38a006	                    STA @l FIRSTSECTOR+2
.39665f	af 16 a3 38	lda $38a316	                    LDA DOS_SECTOR+BPB_SECPERFAT12_OFF      ; Get the number of sectors per FAT
.396663	8f 10 a0 38	sta $38a010	                    STA @l SEC_PER_FAT
.396667	a9 00 00	lda #$0000	                    LDA #0
.39666a	8f 12 a0 38	sta $38a012	                    STA @l SEC_PER_FAT+2
.39666e	a9 01 00	lda #$0001	                    LDA #1                                  ; FAT#1 begins at sector 1
.396671	8f 14 a0 38	sta $38a014	                    STA @l FAT_BEGIN_LBA
.396675	18		clc		                    CLC
.396676	6f 10 a0 38	adc $38a010	                    ADC @l SEC_PER_FAT
.39667a	8f 18 a0 38	sta $38a018	                    STA @l FAT2_BEGIN_LBA                   ; FAT#2 begins SEC_PER_FAT sectors later
.39667e	a9 00 00	lda #$0000	                    LDA #0
.396681	8f 16 a0 38	sta $38a016	                    STA @l FAT_BEGIN_LBA+2
.396685	8f 1a a0 38	sta $38a01a	                    STA @L FAT2_BEGIN_LBA+2
.396689	18		clc		                    CLC                                     ; Calculate the root directory's starting sector
.39668a	af 18 a0 38	lda $38a018	                    LDA @l FAT2_BEGIN_LBA
.39668e	6f 10 a0 38	adc $38a010	                    ADC @l SEC_PER_FAT
.396692	8f 20 a0 38	sta $38a020	                    STA @l ROOT_DIR_FIRST_CLUSTER           ; ROOT_DIR_FIRST_CLUSTER will be a sector LBA for FAT12!
.396696	a9 00 00	lda #$0000	                    LDA #0
.396699	8f 22 a0 38	sta $38a022	                    STA @l ROOT_DIR_FIRST_CLUSTER+2
.39669d	af 11 a3 38	lda $38a311	                    LDA DOS_SECTOR+BPB_ROOT_MAX_ENTRY12_OFF ; Get the maximum number of directory entries for the root dir
.3966a1	8f 24 a0 38	sta $38a024	                    STA @l ROOT_DIR_MAX_ENTRY
.3966a5	4a		lsr a		                    LSR A                                   ; 16 entries per sector
.3966a6	4a		lsr a		                    LSR A
.3966a7	4a		lsr a		                    LSR A
.3966a8	4a		lsr a		                    LSR A                                   ; So now A is the number of sectors in the root directory
.3966a9	18		clc		                    CLC
.3966aa	6f 20 a0 38	adc $38a020	                    ADC @L ROOT_DIR_FIRST_CLUSTER           ; Add that to the first sector LBA for the root directory
.3966ae	8f 1c a0 38	sta $38a01c	                    STA @l CLUSTER_BEGIN_LBA                ; And that is the LBA for the first cluster
.3966b2	a9 00 00	lda #$0000	                    LDA #0
.3966b5	8f 1e a0 38	sta $38a01e	                    STA @l CLUSTER_BEGIN_LBA+2
.3966b9	af 13 a3 38	lda $38a313	                    LDA DOS_SECTOR+BPB_TOTAL_SECTORS        ; Set the sector limit
.3966bd	8f 08 a0 38	sta $38a008	                    STA @l SECTORCOUNT
.3966c1	a9 00 00	lda #$0000	                    LDA #0
.3966c4	8f 0a a0 38	sta $38a00a	                    STA @l SECTORCOUNT+2
.3966c8	af 0e a3 38	lda $38a30e	                    LDA DOS_SECTOR+BPB_RSRVCLUS_OFF         ; Get the number of reserved clusters
.3966cc	8f 0c a0 38	sta $38a00c	                    STA @l NUM_RSRV_SEC
.3966d0	a9 00 02	lda #$0200	                    LDA #DOS_SECTOR_SIZE                    ; Set the size of a FAT12 cluster
.3966d3	8f 0e a0 38	sta $38a00e	                    STA @l CLUSTER_SIZE
.3966d7	e2 20		sep #$20	                SEP #$20        ; set A short
.3966d9	af 26 a3 38	lda $38a326	                    LDA DOS_SECTOR+BPB_SIGNATUREB           ; Is signature B $29?
.3966dd	c9 29		cmp #$29	                    CMP #BPB_EXTENDED_RECORD
.3966df	80 14		bra $3966f5	                    BRA no_volume_id                        ; No: there is no volume ID
.3966e1					is_extended
.3966e1	c2 20		rep #$20	                REP #$20        ; set A long
.3966e3	af 27 a3 38	lda $38a327	                    LDA DOS_SECTOR+BPB_VOLUMEID             ; Yes: set the volume ID
.3966e7	8f 26 a0 38	sta $38a026	                    STA @l VOLUME_ID
.3966eb	af 29 a3 38	lda $38a329	                    LDA DOS_SECTOR+BPB_VOLUMEID+2
.3966ef	8f 28 a0 38	sta $38a028	                    STA @l VOLUME_ID+2
.3966f3	80 0d		bra $396702	                    BRA ret_success
.3966f5					no_volume_id
.3966f5	c2 20		rep #$20	                REP #$20        ; set A long
.3966f7	a9 00 00	lda #$0000	                    LDA #0                                  ; No: blank the Volume ID
.3966fa	8f 26 a0 38	sta $38a026	                    STA @l VOLUME_ID
.3966fe	8f 28 a0 38	sta $38a028	                    STA @L VOLUME_ID+2
.396702					ret_success
.396702	e2 20		sep #$20	                SEP #$20        ; set A short
.396704	a9 00		lda #$00	                    LDA #0
.396706	85 20		sta $0320	                    STA BIOS_STATUS
.396708	28		plp		                    PLP
.396709	2b		pld		                    PLD
.39670a	ab		plb		                    PLB
.39670b	38		sec		                    SEC
.39670c	6b		rtl		                    RTL
.39670d	28		plp		pass_failure        PLP
.39670e	2b		pld		                    PLD
.39670f	ab		plb		                    PLB
.396710	18		clc		                    CLC
.396711	6b		rtl		                    RTL
.396712					FDC_CMDBLOCK
.396712	8b		phb		                    PHB
.396713	0b		phd		                    PHD
.396714	08		php		                    PHP
.396715	48		pha		                PHA             ; begin setdbr macro
.396716	08		php		                PHP
.396717	e2 20		sep #$20	                SEP #$20        ; set A short
.396719	a9 00		lda #$00	                LDA #0
.39671b	48		pha		                PHA
.39671c	ab		plb		                PLB
.39671d	28		plp		                PLP
.39671e	68		pla		                PLA             ; end setdbr macro
.39671f	48		pha		                PHA             ; begin setdp macro
.396720	08		php		                PHP
.396721	c2 20		rep #$20	                REP #$20        ; set A long
.396723	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396726	5b		tcd		                TCD
.396727	28		plp		                PLP
.396728	68		pla		                PLA             ; end setdp macro
.396729	e2 30		sep #$30	                SEP #$30        ; set A&X short
.39672b	e0 01		cpx #$01	                    CPX #FDC_DEVCMD_MOTOR_ON
.39672d	f0 0f		beq $39673e	                    BEQ motor_on
.39672f	e0 02		cpx #$02	                    CPX #FDC_DEVCMD_MOTOR_OFF
.396731	f0 11		beq $396744	                    BEQ motor_off
.396733	e0 03		cpx #$03	                    CPX #FDC_DEVCMD_RECAL
.396735	f0 13		beq $39674a	                    BEQ recalibrate
.396737	64 20		stz $0320	ret_success         STZ BIOS_STATUS
.396739	28		plp		                    PLP
.39673a	2b		pld		                    PLD
.39673b	ab		plb		                    PLB
.39673c	38		sec		                    SEC
.39673d	6b		rtl		                    RTL
.39673e	22 d6 60 39	jsl $3960d6	motor_on            JSL FDC_Motor_On
.396742	80 f3		bra $396737	                    BRA ret_success
.396744	22 0a 61 39	jsl $39610a	motor_off           JSL FDC_Motor_Off
.396748	80 ed		bra $396737	                    BRA ret_success
.39674a	22 35 61 39	jsl $396135	recalibrate         JSL FDC_Recalibrate_Command
.39674e	b0 e7		bcs $396737	                    BCS ret_success
.396750	28		plp		pass_failure        PLP
.396751	2b		pld		                    PLD
.396752	ab		plb		                    PLB
.396753	18		clc		                    CLC
.396754	6b		rtl		                    RTL
.396755					FDC_CHK_MEDIA
.396755	0b		phd		                    PHD
.396756	08		php		                    PHP
.396757	48		pha		                PHA             ; begin setdp macro
.396758	08		php		                PHP
.396759	c2 20		rep #$20	                REP #$20        ; set A long
.39675b	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39675e	5b		tcd		                TCD
.39675f	28		plp		                PLP
.396760	68		pla		                PLA             ; end setdp macro
.396761	22 d6 60 39	jsl $3960d6	                    JSL FDC_Motor_On                ; Turn on the motor
.396765	e2 20		sep #$20	                SEP #$20        ; set A short
.396767	af f7 13 af	lda $af13f7	                    LDA @l SIO_FDC_DIR              ; Check if the DSKCHG bit is set
.39676b	89 80		bit #$80	                    BIT #FDC_DIR_DSKCHG
.39676d	f0 42		beq $3967b1	                    BEQ ret_true                    ; If not: assume the disk is present
.39676f	a9 00		lda #$00	                    LDA #0
.396771	85 00		sta $0300	                    STA FDC_DRIVE
.396773	a9 00		lda #$00	                    LDA #0
.396775	85 01		sta $0301	                    STA FDC_HEAD
.396777	a9 50		lda #$50	                    LDA #80
.396779	85 02		sta $0302	                    STA FDC_CYLINDER
.39677b	22 15 63 39	jsl $396315	                    JSL FDC_Seek_Track              ; Attempt to seek to track 80
.39677f	90 34		bcc $3967b5	                    BCC ret_false                   ; If fail: return false
.396781	c2 10		rep #$10	                REP #$10        ; set X long
.396783	a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.396786	a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.396789	22 0e 15 39	jsl $39150e	                    JSL IDELAY
.39678d	22 6a 61 39	jsl $39616a	                    JSL FDC_Sense_Int_Status
.396791	a5 06		lda $0306	                    LDA FDC_ST0
.396793	29 d0		and #$d0	                    AND #%11010000
.396795	d0 1e		bne $3967b5	                    BNE ret_false
.396797	22 35 61 39	jsl $396135	                    JSL FDC_Recalibrate_Command     ; Attempt to recalibrate
.39679b	90 18		bcc $3967b5	                    BCC ret_false                   ; If fail: return false
.39679d	a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.3967a0	a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.3967a3	22 0e 15 39	jsl $39150e	                    JSL IDELAY
.3967a7	22 6a 61 39	jsl $39616a	                    JSL FDC_Sense_Int_Status
.3967ab	a5 06		lda $0306	                    LDA FDC_ST0
.3967ad	29 d0		and #$d0	                    AND #%11010000
.3967af	d0 04		bne $3967b5	                    BNE ret_false
.3967b1					ret_true
.3967b1	28		plp		                    PLP
.3967b2	2b		pld		                    PLD
.3967b3	38		sec		                    SEC
.3967b4	6b		rtl		                    RTL
.3967b5					ret_false
.3967b5	28		plp		                    PLP
.3967b6	2b		pld		                    PLD
.3967b7	18		clc		                    CLC
.3967b8	6b		rtl		                    RTL
.3967b9					FDC_WRITEVBR
.3967b9	8b		phb		                    PHB
.3967ba	0b		phd		                    PHD
.3967bb	08		php		                    PHP
.3967bc	48		pha		                PHA             ; begin setdbr macro
.3967bd	08		php		                PHP
.3967be	e2 20		sep #$20	                SEP #$20        ; set A short
.3967c0	a9 00		lda #$00	                LDA #0
.3967c2	48		pha		                PHA
.3967c3	ab		plb		                PLB
.3967c4	28		plp		                PLP
.3967c5	68		pla		                PLA             ; end setdbr macro
.3967c6	48		pha		                PHA             ; begin setdp macro
.3967c7	08		php		                PHP
.3967c8	c2 20		rep #$20	                REP #$20        ; set A long
.3967ca	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3967cd	5b		tcd		                TCD
.3967ce	28		plp		                PLP
.3967cf	68		pla		                PLA             ; end setdp macro
.3967d0	22 ec 65 39	jsl $3965ec	                    JSL FDC_MOUNT               ; Mount the floppy disk
.3967d4	c2 30		rep #$30	                REP #$30        ; set A&X long
.3967d6	a9 00 00	lda #$0000	                    LDA #0                      ; Clear the sector buffer
.3967d9	a2 00 00	ldx #$0000	                    LDX #0
.3967dc	9f 00 a3 38	sta $38a300,x	clr_loop            STA DOS_SECTOR,X
.3967e0	e8		inx		                    INX
.3967e1	e8		inx		                    INX
.3967e2	e0 00 02	cpx #$0200	                    CPX #512
.3967e5	d0 f5		bne $3967dc	                    BNE clr_loop
.3967e7	e2 20		sep #$20	                SEP #$20        ; set A short
.3967e9	a2 00 00	ldx #$0000	                    LDX #0                      ; Copy the prototype VBR to the sector buffer
.3967ec	bf 4f 68 39	lda $39684f,x	copy_loop           LDA FDC_VBR_BEGIN,X
.3967f0	9f 00 a3 38	sta $38a300,x	                    STA DOS_SECTOR,X
.3967f4	e8		inx		                    INX
.3967f5	e0 c9 00	cpx #$00c9	                    CPX #<>(FDC_VBR_END - FDC_VBR_BEGIN + 1)
.3967f8	d0 f2		bne $3967ec	                    BNE copy_loop
.3967fa	a0 00 00	ldy #$0000	                    LDY #0                      ; Copy the boot binary path to the VBR
.3967fd	a2 40 00	ldx #$0040	                    LDX #FDC_VBR_PATH
.396800	b7 3c		lda [$035c],y	path_copy_loop      LDA [DOS_RUN_PTR],Y
.396802	9f 00 a3 38	sta $38a300,x	                    STA DOS_SECTOR,X
.396806	f0 07		beq $39680f	                    BEQ path_copy_done
.396808	e8		inx		                    INX
.396809	c8		iny		                    INY
.39680a	c0 80 00	cpy #$0080	                    CPY #128
.39680d	d0 f1		bne $396800	                    BNE path_copy_loop
.39680f					path_copy_done
.39680f	c2 20		rep #$20	                REP #$20        ; set A long
.396811	a9 55 aa	lda #$aa55	                    LDA #$AA55                  ; Set the VBR signature bytes at the end
.396814	8f fe a4 38	sta $38a4fe	                    STA DOS_SECTOR+BPB_SIGNATURE
.396818	c2 20		rep #$20	                REP #$20        ; set A long
.39681a	a9 00 a3	lda #$a300	                    LDA #<>DOS_SECTOR           ; Point to the BIOS buffer
.39681d	85 06		sta $0326	                    STA BIOS_BUFF_PTR
.39681f	a9 38 00	lda #$0038	                    LDA #`DOS_SECTOR
.396822	85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.396824	a9 00 00	lda #$0000	                    LDA #0                      ; Set the sector to #0 (boot record)
.396827	85 02		sta $0322	                    STA BIOS_LBA
.396829	85 04		sta $0324	                    STA BIOS_LBA+2
.39682b	e2 20		sep #$20	                SEP #$20        ; set A short
.39682d	a9 00		lda #$00	                    LDA #BIOS_DEV_FDC
.39682f	85 01		sta $0321	                    STA BIOS_DEV
.396831	22 24 10 38	jsl $381024	                    JSL PUTBLOCK                ; Attempt to write the boot record
.396835	b0 09		bcs $396840	                    BCS ret_success
.396837	22 0a 61 39	jsl $39610a	                    JSL FDC_Motor_Off
.39683b	28		plp		                    PLP                         ; Return the failure
.39683c	2b		pld		                    PLD
.39683d	ab		plb		                    PLB
.39683e	18		clc		                    CLC
.39683f	6b		rtl		                    RTL
.396840	22 0a 61 39	jsl $39610a	ret_success         JSL FDC_Motor_Off
.396844	e2 20		sep #$20	                SEP #$20        ; set A short
.396846	a9 00		lda #$00	                    LDA #0
.396848	85 00		sta $0320	                    STA BIOS_STATUS
.39684a	28		plp		                    PLP
.39684b	2b		pld		                    PLD
.39684c	ab		plb		                    PLB
.39684d	38		sec		                    SEC
.39684e	6b		rtl		                    RTL
=62					FDC_BOOT_START = 62                         ; Entry point to the boot code
=64					FDC_VBR_PATH = 64                           ; Offset to the path in the VBR
.39684f					FDC_VBR_BEGIN
>39684f	eb 00 90			start               .byte $EB, $00, $90     ; Entry point
>396852	43 32 35 36 44 4f 53 20		magic               .text "C256DOS "        ; OEM name / magic text for booting
>39685a	00 02				bytes_per_sec       .word 512               ; How many bytes per sector
>39685c	01				sec_per_cluster     .byte 1                 ; How many sectors per cluster
>39685d	01 00				rsrv_sectors        .word 1                 ; Number of reserved sectors
>39685f	02				num_fat             .byte 2                 ; Number of FATs
>396860	e0 00				max_dir_entry       .word (32-18)*16        ; Total number of root dir entries
>396862	40 0b				total_sectors       .word 2880              ; Total sectors
>396864	f0				media_descriptor    .byte $F0               ; 3.5" 1.44 MB floppy 80 tracks, 18 tracks per sector
>396865	09 00				sec_per_fat         .word 9                 ; Sectors per FAT
>396867	12 00				sec_per_track       .word 18                ; Sectors per track
>396869	02 00				num_head            .word 2                 ; Number of heads
>39686b	00 00 00 00			ignore2             .dword 0
>39686f	00 00 00 00			fat32_sector        .dword 0                ; # of sectors in FAT32
>396873	00 00				ignore3             .word 0
>396875	29				boot_signature      .byte $29
>396876	78 56 34 12			volume_id           .dword $12345678        ; Replaced by code
>39687a	55 4e 54 49 54 4c 45 44		volume_name         .text "UNTITLED   "     ; Replace by code
>396882	20 20 20
>396885	46 41 54 31 32 20 20 20		fs_type             .text "FAT12   "
.39688d	80 40		bra $3968cf	                    BRA vbr_start
>39688f					file_path           .fill 64                ; Reserve 64 bytes for a path and any options
.3968cf					vbr_start
.3968cf	c2 20		rep #$20	                REP #$20        ; set A long
.3968d1	a9 40 a3	lda #$a340	                    LDA #<>(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.3968d4	8f 60 03 00	sta $000360	                    STA @l DOS_RUN_PARAM
.3968d8	a9 38 00	lda #$0038	                    LDA #`(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.3968db	8f 62 03 00	sta $000362	                    STA @l DOS_RUN_PARAM+2
.3968df	22 d6 57 39	jsl $3957d6	                    JSL IF_RUN              ; And try to execute the binary file
.3968e3	b0 0c		bcs $3968f1	                    BCS lock                ; If it returned success... lock up... I guess?
.3968e5					error
.3968e5	e2 20		sep #$20	                SEP #$20        ; set A short
.3968e7	4b		phk		                    PHK                     ; Otherwise, print an error message
.3968e8	ab		plb		                    PLB
.3968e9	62 08 00	per $3968f4	                    PER message
.3968ec	fa		plx		                    PLX
.3968ed	22 1c 10 38	jsl $38101c	                    JSL PUTS
.3968f1	ea		nop		lock                NOP                     ; And lock up
.3968f2	80 fd		bra $3968f1	                    BRA lock
>3968f4	43 6f 75 6c 64 20 6e 6f		message             .null "Could not find a bootable binary.",13
>3968fc	74 20 66 69 6e 64 20 61 20 62 6f 6f 74 61 62 6c
>39690c	65 20 62 69 6e 61 72 79 2e 0d 00
.396917					FDC_VBR_END

;******  Return to file: src\kernel.asm


;******  Processing file: src\ide_library.asm

.0000					IDE_ID
>0000	00 00				General_Config        .word $0000
>0002	00 00				Obsolete0             .word $0000
>0004	00 00				Specific_Config       .word $0000
>0006	00 00				Obsolete1             .word $0000
>0008	00 00				Retired0              .word $0000
>000a	00 00				Retired1              .word $0000
>000c	00 00				Obsolete2             .word $0000
>000e	00 00				Reserved_CFlash0      .word $0000
>0010	00 00				Reserved_CFlash1      .word $0000
>0012	00 00				Retired2              .word $0000
>0014	00 00 00 00 00 00 00 00		Serial_Number_String  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>001c	00 00 00 00 00 00 00 00 00 00 00 00
>0028	00 00 00 00			Retired3              .word $0000, $0000
>002c	00 00				Obsolete3             .word $0000
>002e	00 00 00 00 00 00 00 00		Firmware_Rev_String   .byte $00, $00, $00, $00, $00, $00, $00, $00
>0036	00 00 00 00 00 00 00 00		Model_Number_String   .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>003e	00 00 00 00 00 00 00 00
>0046	00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>004e	00 00 00 00 00 00 00 00
>0056	00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00
>005e	00 00				Max_Number_Logic_Sec  .word $0000
>0060	00 00				Trusted_Comp_Feature  .word $0000
>0062	00 00 00 00			Capabilities          .word $0000, $0000
>0066	00 00 00 00			Obsolete4             .word $0000, $0000
>006a	00 00				Free_Fall_Control     .word $0000
>006c	00 00 00 00 00 00 00 00		Obsolete5             .word $0000, $0000, $0000, $0000, $0000
>0074	00 00
>0076	00 00				Reserved0             .word $0000
>0078	00 00 00 00			Total_Addy_Logic_Sec  .word $0000, $0000
>007c	00 00				Obsolete6             .word $0000
>007e	00 00 00 00			Reserved1             .word $0000, $0000
>0082	00 00				Min_Multiword_DMA_Trf .word $0000
>0084	00 00				Manu_Recommended_Mult .word $0000
>0086	00 00				Min_PIO_Trf           .word $0000      ; Word 67
>0088	00 00				Min_PIO_Trf_with_IORD .word $0000      ; Word 68
>008a	00 00 00 00			Reserved2             .word $0000, $0000
>008e	00 00 00 00 00 00 00 00		Reserved3             .word $0000, $0000, $0000, $0000
>0096	00 00				Queue_Dept            .word $0000
>0098	00 00				SATA_Capabilities     .word $0000
>009a	00 00				Reserved_SATA         .word $0000
>009c	00 00				Sup_Feat_SATA         .word $0000
>009e	00 00				Sup_Feat_SATA_Enabled .word $0000    ; Word 79
>00a0	00 00				Major_Version_Number  .word $0000    ; Word 80
>00a2	00 00				Minor_Version_Number  .word $0000    ; Word 81
>00a4	00 00 00 00 00 00 00 00		Cmd_And_Features_Sup  .word $0000, $0000, $0000, $0000, $0000, $0000
>00ac	00 00 00 00
>00b0	00 00				UDMA_Modes            .word $0000
>00b2	00 00 00 00			Reserved4             .word $0000, $0000 ; Word 89
>00b6	00 00				Current_APM_Level     .word $0000
>00b8	00 00				Master_Password_Ident .word $0000
>00ba	00 00				Hardware_Reset_Result .word $0000
>00bc	00 00				Current_AAM_Value     .word $0000  ; Word 94
>00be	00 00				Stream_Min_Req_Size   .word $0000  ; Word 95
>00c0	00 00				Stream_Trf_Time_DMA   .word $0000  ; Word 96
>00c2	00 00				Stream_Access_Lat     .word $0000
>00c4	00 00 00 00			Streaming_Perf_Gran   .word $0000, $0000
>00c8	00 00 00 00 00 00 00 00		Tot_Num_Add_Logic_Sec .word $0000, $0000, $0000, $0000
>00d0	00 00				Streaming_Trf_Time    .word $0000 ; Word 104
>00d2	00 00				Reserved5             .word $0000 ; Word 105
.396917					IDE_TEST
.396917	08		php		                PHP
.396918	c2 20		rep #$20	                REP #$20        ; set A long
.39691a	a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.39691d	8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.396921	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.396924	8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.396928	22 45 6a 39	jsl $396a45	                JSL IDE_IDENTIFY
.39692c	b0 03		bcs $396931	                BCS id_ok
.39692e	82 ab 00	brl $3969dc	                BRL done
.396931					id_ok
.396931	c2 10		rep #$10	                REP #$10        ; set X long
.396933	e2 20		sep #$20	                SEP #$20        ; set A short
.396935	a0 28 00	ldy #$0028	                LDY #40
.396938	a2 36 00	ldx #$0036	                LDX #27*2
.39693b	bf 01 a3 38	lda $38a301,x	pr_model        LDA DOS_SECTOR+1,X
.39693f	22 18 10 38	jsl $381018	                JSL PUTC
.396943	bf 00 a3 38	lda $38a300,x	                LDA DOS_SECTOR,X
.396947	22 18 10 38	jsl $381018	                JSL PUTC
.39694b	e8		inx		                INX
.39694c	e8		inx		                INX
.39694d	88		dey		                DEY
.39694e	88		dey		                DEY
.39694f	d0 ea		bne $39693b	                BNE pr_model
.396951	c2 10		rep #$10	                REP #$10        ; set X long
.396953	e2 20		sep #$20	                SEP #$20        ; set A short
.396955	a0 14 00	ldy #$0014	                LDY #20
.396958	a2 14 00	ldx #$0014	                LDX #10*2
.39695b	bf 01 a3 38	lda $38a301,x	pr_serial       LDA DOS_SECTOR+1,X
.39695f	22 18 10 38	jsl $381018	                JSL PUTC
.396963	bf 00 a3 38	lda $38a300,x	                LDA DOS_SECTOR,X
.396967	22 18 10 38	jsl $381018	                JSL PUTC
.39696b	e8		inx		                INX
.39696c	e8		inx		                INX
.39696d	88		dey		                DEY
.39696e	88		dey		                DEY
.39696f	d0 ea		bne $39695b	                BNE pr_serial
.396971	22 6c 10 38	jsl $38106c	                JSL PRINTCR
.396975	c2 30		rep #$30	                REP #$30        ; set A&X long
.396977	a9 01 00	lda #$0001	                LDA #1                 ; Set LBA = 1
.39697a	8f 22 03 00	sta $000322	                STA @l BIOS_LBA
.39697e	a9 00 00	lda #$0000	                LDA #0
.396981	8f 24 03 00	sta $000324	                STA @l BIOS_LBA+2
.396985	a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.396988	8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.39698c	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.39698f	8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.396993	a2 00 00	ldx #$0000	                LDX #0                  ; Initialize the block to some recognizable data
.396996	a9 a5 5a	lda #$5aa5	                LDA #$5AA5
.396999	9f 00 a3 38	sta $38a300,x	init_loop       STA DOS_SECTOR,X
.39699d	e8		inx		                INX
.39699e	e8		inx		                INX
.39699f	e0 00 02	cpx #$0200	                CPX #512
.3969a2	d0 f5		bne $396999	                BNE init_loop
.3969a4	22 64 6b 39	jsl $396b64	                JSL IDE_PUTBLOCK        ; Attempt to write the block
.3969a8	b0 06		bcs $3969b0	                BCS read_sect1
.3969aa	22 6c 10 38	jsl $38106c	                JSL PRINTCR
.3969ae	80 2c		bra $3969dc	                BRA done
.3969b0	a9 01 00	lda #$0001	read_sect1      LDA #1                 ; Set LBA = 1
.3969b3	8f 22 03 00	sta $000322	                STA @l BIOS_LBA
.3969b7	a9 00 00	lda #$0000	                LDA #0
.3969ba	8f 24 03 00	sta $000324	                STA @l BIOS_LBA+2
.3969be	a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS
.3969c1	8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.3969c5	a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.3969c8	8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.3969cc	22 d3 6a 39	jsl $396ad3	                JSL IDE_GETBLOCK        ; Attempt to read the block
.3969d0	b0 06		bcs $3969d8	                BCS all_ok
.3969d2	22 6c 10 38	jsl $38106c	                JSL PRINTCR
.3969d6	80 04		bra $3969dc	                BRA done
.3969d8					all_ok
.3969d8	22 6c 10 38	jsl $38106c	                JSL PRINTCR
.3969dc	28		plp		done            PLP
.3969dd	6b		rtl		                RTL
.3969de					IDE_INIT
.3969de	e2 20		sep #$20	                SEP #$20        ; set A short
.3969e0	20 01 6a	jsr $396a01	              JSR IDE_DRIVE_BSY ; Check to see if drive is busy
.3969e3	a9 00		lda #$00	              LDA #$00
.3969e5	8f 35 e8 af	sta $afe835	              STA IDE_CLDR_HI
.3969e9	8f 34 e8 af	sta $afe834	              STA IDE_CLDR_LO
.3969ed	8f 32 e8 af	sta $afe832	              STA IDE_SECT_CNT
.3969f1	a9 01		lda #$01	              LDA #$01
.3969f3	8f 33 e8 af	sta $afe833	              STA IDE_SECT_SRT
.3969f7	a9 a0		lda #$a0	              LDA #$A0 ; HEAD 0 - Select Master Drive
.3969f9	8f 36 e8 af	sta $afe836	              STA IDE_HEAD
.3969fd	20 1f 6a	jsr $396a1f	              JSR IDE_DRV_READY_NOTBUSY
.396a00	6b		rtl		              RTL
.396a01					IDE_DRIVE_BSY
.396a01	08		php		                PHP
.396a02	e2 20		sep #$20	                SEP #$20        ; set A short
.396a04	af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.396a08	29 80		and #$80	                AND #IDE_STAT_BSY         ; Check for RDY Bit, this needs to be 1'b1
.396a0a	c9 80		cmp #$80	                CMP #IDE_STAT_BSY         ; If not go read again
.396a0c	f0 f6		beq $396a04	                BEQ loop
.396a0e	28		plp		                PLP
.396a0f	60		rts		                RTS
.396a10					IDE_DRIVE_READY
.396a10	08		php		                PHP
.396a11	e2 20		sep #$20	                SEP #$20        ; set A short
.396a13	af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.396a17	29 40		and #$40	                AND #IDE_STAT_DRDY          ; Check to see if the Busy Signal is Cleared
.396a19	c9 40		cmp #$40	                CMP #IDE_STAT_DRDY          ; if it is still one, then go back to read again.
.396a1b	d0 f6		bne $396a13	                BNE loop
.396a1d	28		plp		                PLP
.396a1e	60		rts		                RTS
.396a1f					IDE_DRV_READY_NOTBUSY
.396a1f	08		php		                PHP
.396a20	e2 20		sep #$20	                SEP #$20        ; set A short
.396a22	af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT                 ; Check the status
.396a26	29 c0		and #$c0	                AND #IDE_STAT_BSY | IDE_STAT_DRDY
.396a28	c9 40		cmp #$40	                CMP #IDE_STAT_DRDY                  ; Is it READY but not BUSY?
.396a2a	d0 f6		bne $396a22	                BNE loop                            ; No: keep waiting
.396a2c	28		plp		ret_success     PLP                                 ; Return success
.396a2d	38		sec		                SEC
.396a2e	60		rts		                RTS
.396a2f	8f 07 03 00	sta $000307	ret_failure     STA @l FDC_ST1                      ; Save the status code to FDC_ST1
.396a33	28		plp		                PLP                                 ; Return failure
.396a34	18		clc		                CLC
.396a35	60		rts		                RTS
.396a36					IDE_NOT_DRQ
.396a36	08		php		                PHP
.396a37	e2 20		sep #$20	                SEP #$20        ; set A short
.396a39	af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT     ; Get the status
.396a3d	29 08		and #$08	                AND #IDE_STAT_DRQ
.396a3f	c9 08		cmp #$08	                CMP #IDE_STAT_DRQ       ; Is the DRQ bit set?
.396a41	d0 f6		bne $396a39	                BNE loop                ; No: keep waiting
.396a43	28		plp		                PLP
.396a44	60		rts		                RTS
.396a45					IDE_IDENTIFY
.396a45	5a		phy		                PHY
.396a46	8b		phb		                PHB
.396a47	0b		phd		                PHD
.396a48	08		php		                PHP
.396a49	48		pha		                PHA             ; begin setdbr macro
.396a4a	08		php		                PHP
.396a4b	e2 20		sep #$20	                SEP #$20        ; set A short
.396a4d	a9 00		lda #$00	                LDA #0
.396a4f	48		pha		                PHA
.396a50	ab		plb		                PLB
.396a51	28		plp		                PLP
.396a52	68		pla		                PLA             ; end setdbr macro
.396a53	48		pha		                PHA             ; begin setdp macro
.396a54	08		php		                PHP
.396a55	c2 20		rep #$20	                REP #$20        ; set A long
.396a57	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.396a5a	5b		tcd		                TCD
.396a5b	28		plp		                PLP
.396a5c	68		pla		                PLA             ; end setdp macro
.396a5d	e2 20		sep #$20	                SEP #$20        ; set A short
.396a5f	20 1f 6a	jsr $396a1f	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.396a62	a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.396a64	29 07		and #$07	                AND #$07
.396a66	09 a0		ora #$a0	                ORA #%10100000                  ; Select DEV=0 and LBA mode = 1
.396a68	8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.396a6c	20 1f 6a	jsr $396a1f	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.396a6f	e2 20		sep #$20	                SEP #$20        ; set A short
.396a71	a9 00		lda #$00	                LDA #0                          ; Clear sector count and LBA
.396a73	8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.396a77	8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.396a7b	8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.396a7f	8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.396a83	a9 ec		lda #$ec	                LDA #IDE_CMD_IDENTIFY           ; The IDENTIFY command
.396a85	8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT             ; Check the status
.396a89	f0 29		beq $396ab4	                BEQ no_media                    ; If 0: there is no drive
.396a8b	20 01 6a	jsr $396a01	                JSR IDE_DRIVE_BSY               ; Othewise: wait for drive to not be busy
.396a8e	20 1f 6a	jsr $396a1f	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396a91	90 2d		bcc $396ac0	                BCC ret_failure                 ; If an error occurred, return it
.396a93	c2 30		rep #$30	                REP #$30        ; set A&X long
.396a95	a0 00 00	ldy #$0000	                LDY #0
.396a98	af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.396a9c	97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.396a9e	c8		iny		                INY                             ; Move to the next position
.396a9f	c8		iny		                INY
.396aa0	c0 00 02	cpy #$0200	                CPY #512
.396aa3	d0 f3		bne $396a98	                BNE read_loop
.396aa5					ret_success
.396aa5	e2 20		sep #$20	                SEP #$20        ; set A short
.396aa7	a9 00		lda #$00	                LDA #0
.396aa9	85 00		sta $0320	                STA BIOS_STATUS
.396aab	8d 06 03	sta $0306	                STA @w FDC_ST0
.396aae	28		plp		                PLP                             ; Return success
.396aaf	2b		pld		                PLD
.396ab0	ab		plb		                PLB
.396ab1	7a		ply		                PLY
.396ab2	38		sec		                SEC
.396ab3	6b		rtl		                RTL
.396ab4					no_media
.396ab4	e2 20		sep #$20	                SEP #$20        ; set A short
.396ab6	a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA
.396ab8	80 0a		bra $396ac4	                BRA pass_failure
.396aba					not_ata
.396aba	e2 20		sep #$20	                SEP #$20        ; set A short
.396abc	a9 8a		lda #$8a	                LDA #BIOS_ERR_NOTATA
.396abe	80 04		bra $396ac4	                BRA pass_failure
.396ac0					ret_failure
.396ac0	e2 20		sep #$20	                SEP #$20        ; set A short
.396ac2	a9 82		lda #$82	                LDA #BIOS_ERR_READ
.396ac4	85 00		sta $0320	pass_failure    STA BIOS_STATUS
.396ac6	af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.396aca	8d 06 03	sta $0306	                STA @w FDC_ST0
.396acd	28		plp		                PLP
.396ace	2b		pld		                PLD
.396acf	ab		plb		                PLB
.396ad0	7a		ply		                PLY
.396ad1	18		clc		                CLC
.396ad2	6b		rtl		                RTL
.396ad3					IDE_GETBLOCK
.396ad3	5a		phy		                PHY
.396ad4	8b		phb		                PHB
.396ad5	0b		phd		                PHD
.396ad6	08		php		                PHP
.396ad7	48		pha		                PHA             ; begin setdbr macro
.396ad8	08		php		                PHP
.396ad9	e2 20		sep #$20	                SEP #$20        ; set A short
.396adb	a9 00		lda #$00	                LDA #0
.396add	48		pha		                PHA
.396ade	ab		plb		                PLB
.396adf	28		plp		                PLP
.396ae0	68		pla		                PLA             ; end setdbr macro
.396ae1	48		pha		                PHA             ; begin setdp macro
.396ae2	08		php		                PHP
.396ae3	c2 20		rep #$20	                REP #$20        ; set A long
.396ae5	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.396ae8	5b		tcd		                TCD
.396ae9	28		plp		                PLP
.396aea	68		pla		                PLA             ; end setdp macro
.396aeb	e2 20		sep #$20	                SEP #$20        ; set A short
.396aed	20 1f 6a	jsr $396a1f	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.396af0	a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.396af2	29 07		and #$07	                AND #$07
.396af4	09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.396af6	8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.396afa	20 1f 6a	jsr $396a1f	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.396afd	e2 20		sep #$20	                SEP #$20        ; set A short
.396aff	a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.396b01	8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.396b05	a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.396b07	8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.396b0b	a5 03		lda $0323	                LDA BIOS_LBA+1
.396b0d	8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.396b11	a5 04		lda $0324	                LDA BIOS_LBA+2
.396b13	8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.396b17	a9 21		lda #$21	                LDA #IDE_CMD_READ_SECTOR        ; The READ SECTOR command
.396b19	8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.396b1d	ea		nop		                NOP                             ; Wait about 500ns
.396b1e	ea		nop		                NOP
.396b1f	ea		nop		                NOP
.396b20	ea		nop		                NOP
.396b21	20 1f 6a	jsr $396a1f	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396b24	90 2b		bcc $396b51	                BCC ret_failure                 ; If an error occurred, return it
.396b26	e2 20		sep #$20	                SEP #$20        ; set A short
.396b28	af 30 e8 af	lda $afe830	                LDA @l IDE_DATA                 ; Read and toss out one byte from the 8-bit interface
.396b2c	a0 00 00	ldy #$0000	                LDY #0
.396b2f	c2 20		rep #$20	                REP #$20        ; set A long
.396b31	af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.396b35	97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.396b37	c8		iny		                INY                             ; Move to the next position
.396b38	c8		iny		                INY
.396b39	c0 00 02	cpy #$0200	                CPY #512
.396b3c	d0 f3		bne $396b31	                BNE read_loop
.396b3e	ea		nop		                NOP                             ; Wait about 500ns
.396b3f	ea		nop		                NOP
.396b40	ea		nop		                NOP
.396b41	ea		nop		                NOP
.396b42					ret_success
.396b42	e2 20		sep #$20	                SEP #$20        ; set A short
.396b44	a9 00		lda #$00	                LDA #0
.396b46	85 00		sta $0320	                STA BIOS_STATUS
.396b48	8d 06 03	sta $0306	                STA @w FDC_ST0
.396b4b	28		plp		                PLP                             ; Return success
.396b4c	2b		pld		                PLD
.396b4d	ab		plb		                PLB
.396b4e	7a		ply		                PLY
.396b4f	38		sec		                SEC
.396b50	6b		rtl		                RTL
.396b51					ret_failure
.396b51	e2 20		sep #$20	                SEP #$20        ; set A short
.396b53	af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.396b57	8d 06 03	sta $0306	                STA @w FDC_ST0
.396b5a	a9 82		lda #$82	                LDA #BIOS_ERR_READ
.396b5c	85 00		sta $0320	                STA BIOS_STATUS
.396b5e	28		plp		                PLP
.396b5f	2b		pld		                PLD
.396b60	ab		plb		                PLB
.396b61	7a		ply		                PLY
.396b62	18		clc		                CLC
.396b63	6b		rtl		                RTL
.396b64					IDE_PUTBLOCK
.396b64	5a		phy		                PHY
.396b65	8b		phb		                PHB
.396b66	0b		phd		                PHD
.396b67	08		php		                PHP
.396b68	48		pha		                PHA             ; begin setdbr macro
.396b69	08		php		                PHP
.396b6a	e2 20		sep #$20	                SEP #$20        ; set A short
.396b6c	a9 00		lda #$00	                LDA #0
.396b6e	48		pha		                PHA
.396b6f	ab		plb		                PLB
.396b70	28		plp		                PLP
.396b71	68		pla		                PLA             ; end setdbr macro
.396b72	48		pha		                PHA             ; begin setdp macro
.396b73	08		php		                PHP
.396b74	c2 20		rep #$20	                REP #$20        ; set A long
.396b76	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.396b79	5b		tcd		                TCD
.396b7a	28		plp		                PLP
.396b7b	68		pla		                PLA             ; end setdp macro
.396b7c	e2 20		sep #$20	                SEP #$20        ; set A short
.396b7e	20 1f 6a	jsr $396a1f	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.396b81	a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.396b83	29 07		and #$07	                AND #$07
.396b85	09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.396b87	8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.396b8b	20 1f 6a	jsr $396a1f	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.396b8e	e2 20		sep #$20	                SEP #$20        ; set A short
.396b90	a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.396b92	8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.396b96	a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.396b98	8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.396b9c	a5 03		lda $0323	                LDA BIOS_LBA+1
.396b9e	8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.396ba2	a5 04		lda $0324	                LDA BIOS_LBA+2
.396ba4	8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.396ba8	a9 30		lda #$30	                LDA #IDE_CMD_WRITE_SECTOR       ; The READ SECTOR command
.396baa	8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.396bae	ea		nop		                NOP                             ; Wait about 500ns
.396baf	ea		nop		                NOP
.396bb0	ea		nop		                NOP
.396bb1	ea		nop		                NOP
.396bb2	20 1f 6a	jsr $396a1f	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396bb5	90 33		bcc $396bea	                BCC ret_failure                 ; If an error occurred, return it
.396bb7	c2 30		rep #$30	                REP #$30        ; set A&X long
.396bb9	a0 00 00	ldy #$0000	                LDY #0
.396bbc	b7 06		lda [$0326],y	read_loop       LDA [BIOS_BUFF_PTR],Y           ; Get the word from the buffer
.396bbe	8f 38 e8 af	sta $afe838	                STA @l IDE_DATA_LO              ; Save the word to the device
.396bc2	c8		iny		                INY                             ; Move to the next position
.396bc3	c8		iny		                INY
.396bc4	c0 00 02	cpy #$0200	                CPY #512
.396bc7	d0 f3		bne $396bbc	                BNE read_loop
.396bc9	ea		nop		                NOP                             ; Wait about 500ns
.396bca	ea		nop		                NOP
.396bcb	ea		nop		                NOP
.396bcc	ea		nop		                NOP
.396bcd	20 1f 6a	jsr $396a1f	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396bd0	90 18		bcc $396bea	                BCC ret_failure                 ; If an error occurred, return it
.396bd2	af 37 e8 af	lda $afe837	                LDA @l IDE_CMD_STAT             ; Check the status
.396bd6	89 21 00	bit #$0021	                BIT #IDE_STAT_ERR | IDE_STAT_DF
.396bd9	d0 0f		bne $396bea	                BNE ret_failure                 ; If error: return failure
.396bdb					ret_success
.396bdb	e2 20		sep #$20	                SEP #$20        ; set A short
.396bdd	a9 00		lda #$00	                LDA #0
.396bdf	85 00		sta $0320	                STA BIOS_STATUS
.396be1	8d 06 03	sta $0306	                STA @w FDC_ST0
.396be4	28		plp		                PLP                             ; Return success
.396be5	2b		pld		                PLD
.396be6	ab		plb		                PLB
.396be7	7a		ply		                PLY
.396be8	38		sec		                SEC
.396be9	6b		rtl		                RTL
.396bea					ret_failure
.396bea	e2 20		sep #$20	                SEP #$20        ; set A short
.396bec	af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.396bf0	8d 06 03	sta $0306	                STA @w FDC_ST0
.396bf3	a9 82		lda #$82	                LDA #BIOS_ERR_READ
.396bf5	85 00		sta $0320	                STA BIOS_STATUS
.396bf7	28		plp		                PLP
.396bf8	2b		pld		                PLD
.396bf9	ab		plb		                PLB
.396bfa	7a		ply		                PLY
.396bfb	18		clc		                CLC
.396bfc	6b		rtl		                RTL

;******  Return to file: src\kernel.asm

.396bfd					KERNEL_DATA
>396bfd	20 20 20 20 0b 0c 0b 0c		greet_msg       .text $20, $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, " FFFFFFF MMMMMMMM XX    XXX " ,$0D
>396c05	0b 0c 0b 0c 0b 0c 20 46 46 46 46 46 46 46 20 4d
>396c15	4d 4d 4d 4d 4d 4d 4d 20 58 58 20 20 20 20 58 58
>396c25	58 20 0d
>396c28	20 20 20 0b 0c 0b 0c 0b		                .text $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM   XX XXX   ",$0D
>396c30	0c 0b 0c 0b 0c 20 46 46 20 20 20 20 20 20 4d 4d
>396c40	20 4d 4d 20 4d 4d 20 20 20 58 58 20 58 58 58 20
>396c50	20 20 0d
>396c53	20 20 0b 0c 0b 0c 0b 0c		                .text $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FFFFF   MM MM MM    XXX      ",$0D
>396c5b	0b 0c 0b 0c 20 46 46 46 46 46 20 20 20 4d 4d 20
>396c6b	4d 4d 20 4d 4d 20 20 20 20 58 58 58 20 20 20 20
>396c7b	20 20 0d
>396c7e	20 0b 0c 0b 0c 0b 0c 0b		                .text $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM  XXX  XX     ",$0D
>396c86	0c 0b 0c 20 46 46 20 20 20 20 20 20 4d 4d 20 4d
>396c96	4d 20 4d 4d 20 20 58 58 58 20 20 58 58 20 20 20
>396ca6	20 20 0d
>396ca9	0b 0c 0b 0c 0b 0c 0b 0c		                .text $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM XXX     XX    ",$0D
>396cb1	0b 0c 20 46 46 20 20 20 20 20 20 4d 4d 20 4d 4d
>396cc1	20 4d 4d 20 58 58 58 20 20 20 20 20 58 58 20 20
>396cd1	20 20 0d
>396cd4	0d 43 32 35 36 20 46 4f		                .text $0D, "C256 FOENIX FMX -- 3,670,016 Bytes Free", $0D
>396cdc	45 4e 49 58 20 46 4d 58 20 2d 2d 20 33 2c 36 37
>396cec	30 2c 30 31 36 20 42 79 74 65 73 20 46 72 65 65
>396cfc	0d
>396cfd	77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com - Kernel version: "
>396d05	66 6f 65 6e 69 78 2e 63 6f 6d 20 2d 20 4b 65 72
>396d15	6e 65 6c 20 76 65 72 73 69 6f 6e 3a 20

;******  Processing file: src\version.asm

>396d22	76 30 2e 31 2e 30 2d 61		.text "v0.1.0-alpha+776 (2020-07-23)"
>396d2a	6c 70 68 61 2b 37 37 36 20 28 32 30 32 30 2d 30
>396d3a	37 2d 32 33 29

;******  Return to file: src\kernel.asm

>396d3f	0d 00				                .text $0D,$00
.396d41					old_pc_style_stat
>396d41	1d 1d 1d 1d 1d 1d 8d 8d		greet_clr_line1 .text $1D, $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>396d49	4d 4d 2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd
>396d59	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396d69	fd fd
>396d6b	1d 1d 1d 1d 1d 8d 8d 4d		greet_clr_line2 .text $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>396d73	4d 2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd
>396d83	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396d93	fd fd
>396d95	1d 1d 1d 1d 8d 8d 4d 4d		greet_clr_line3 .text $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>396d9d	2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd fd
>396dad	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396dbd	fd fd
>396dbf	1d 1d 1d 8d 8d 4d 4d 2d		greet_clr_line4 .text $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>396dc7	2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd fd fd
>396dd7	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396de7	fd fd
>396de9	1d 1d 8d 8d 4d 4d 2d 2d		greet_clr_line5 .text $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>396df1	5d 5d fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396e01	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396e11	fd fd
>396e13	00 00 00 ff			fg_color_lut	  .text $00, $00, $00, $FF
>396e17	00 00 80 ff			                .text $00, $00, $80, $FF
>396e1b	00 80 00 ff			                .text $00, $80, $00, $FF
>396e1f	80 00 00 ff			                .text $80, $00, $00, $FF
>396e23	00 80 80 ff			                .text $00, $80, $80, $FF
>396e27	80 80 00 ff			                .text $80, $80, $00, $FF
>396e2b	80 00 80 ff			                .text $80, $00, $80, $FF
>396e2f	80 80 80 ff			                .text $80, $80, $80, $FF
>396e33	00 45 ff ff			                .text $00, $45, $FF, $FF
>396e37	13 45 8b ff			                .text $13, $45, $8B, $FF
>396e3b	00 00 20 ff			                .text $00, $00, $20, $FF
>396e3f	00 20 00 ff			                .text $00, $20, $00, $FF
>396e43	20 00 00 ff			                .text $20, $00, $00, $FF
>396e47	20 20 20 ff			                .text $20, $20, $20, $FF
>396e4b	40 40 40 ff			                .text $40, $40, $40, $FF
>396e4f	ff ff ff ff			                .text $FF, $FF, $FF, $FF
>396e53	00 00 00 ff			bg_color_lut	  .text $00, $00, $00, $FF
>396e57	00 00 80 ff			                .text $00, $00, $80, $FF
>396e5b	00 80 00 ff			                .text $00, $80, $00, $FF
>396e5f	80 00 00 ff			                .text $80, $00, $00, $FF
>396e63	00 20 20 ff			                .text $00, $20, $20, $FF
>396e67	20 20 00 ff			                .text $20, $20, $00, $FF
>396e6b	20 00 20 ff			                .text $20, $00, $20, $FF
>396e6f	20 20 20 ff			                .text $20, $20, $20, $FF
>396e73	1e 69 d2 ff			                .text $1E, $69, $D2, $FF
>396e77	13 45 8b ff			                .text $13, $45, $8B, $FF
>396e7b	00 00 20 ff			                .text $00, $00, $20, $FF
>396e7f	00 20 00 ff			                .text $00, $20, $00, $FF
>396e83	40 00 00 ff			                .text $40, $00, $00, $FF
>396e87	10 10 10 ff			                .text $10, $10, $10, $FF
>396e8b	40 40 40 ff			                .text $40, $40, $40, $FF
>396e8f	ff ff ff ff			                .text $FF, $FF, $FF, $FF
>396e93	43 6d 64 20 30 78 41 41		pass_tst0xAAmsg .text "Cmd 0xAA Test passed...", $0D, $00
>396e9b	20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>396eab	00
>396eac	43 6d 64 20 30 78 41 42		pass_tst0xABmsg .text "Cmd 0xAB Test passed...", $0D, $00
>396eb4	20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>396ec4	00
>396ec5	43 6d 64 20 30 78 36 30		pass_cmd0x60msg .text "Cmd 0x60 Executed.", $0D, $00
>396ecd	20 45 78 65 63 75 74 65 64 2e 0d 00
>396ed9	43 6d 64 20 30 78 46 46		pass_cmd0xFFmsg .text "Cmd 0xFF (Reset) Done.", $0D, $00
>396ee1	20 28 52 65 73 65 74 29 20 44 6f 6e 65 2e 0d 00
>396ef1	43 6d 64 20 30 78 45 45		pass_cmd0xEEmsg .text "Cmd 0xEE Echo Test passed...", $0D, $00
>396ef9	20 45 63 68 6f 20 54 65 73 74 20 70 61 73 73 65
>396f09	64 2e 2e 2e 0d 00
>396f0f	4b 65 79 62 6f 61 72 64		Success_kb_init .text "Keyboard Present", $0D, $00
>396f17	20 50 72 65 73 65 6e 74 0d 00
>396f21	4e 6f 20 4b 65 79 62 6f		Failed_kb_init  .text "No Keyboard Attached or Failed Init...", $0D, $00
>396f29	61 72 64 20 41 74 74 61 63 68 65 64 20 6f 72 20
>396f39	46 61 69 6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>396f49	4e 4f 20 53 49 47 4e 41		bmp_parser_err0 .text "NO SIGNATURE FOUND.", $00
>396f51	54 55 52 45 20 46 4f 55 4e 44 2e 00
>396f5d	42 4d 50 20 4c 4f 41 44		bmp_parser_msg0 .text "BMP LOADED.", $00
>396f65	45 44 2e 00
>396f69	45 58 45 43 55 54 49 4e		bmp_parser_msg1 .text "EXECUTING BMP PARSER", $00
>396f71	47 20 42 4d 50 20 50 41 52 53 45 52 00
>396f7e	49 44 45 20 48 44 44 20		IDE_HDD_Present_msg0 .text "IDE HDD Present:", $00
>396f86	50 72 65 73 65 6e 74 3a 00
>396f8f	42 6f 6f 74 20 44 49 50		boot_invalid    .null "Boot DIP switch settings are invalid."
>396f97	20 73 77 69 74 63 68 20 73 65 74 74 69 6e 67 73
>396fa7	20 61 72 65 20 69 6e 76 61 6c 69 64 2e 00
>396fb5	50 72 65 73 73 20 52 20		boot_retry      .null "Press R to retry, B to go to BASIC.", 13
>396fbd	74 6f 20 72 65 74 72 79 2c 20 42 20 74 6f 20 67
>396fcd	6f 20 74 6f 20 42 41 53 49 43 2e 0d 00
>396fda	55 6e 61 62 6c 65 20 74		sdc_err_boot    .null "Unable to read the SD card."
>396fe2	6f 20 72 65 61 64 20 74 68 65 20 53 44 20 63 61
>396ff2	72 64 2e 00
>396ff6	55 6e 61 62 6c 65 20 74		ide_err_boot    .null "Unable to read from the IDE drive."
>396ffe	6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>39700e	49 44 45 20 64 72 69 76 65 2e 00
>397019	55 6e 61 62 6c 65 20 74		fdc_err_boot    .null "Unable to read from the floppy drive."
>397021	6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>397031	66 6c 6f 70 70 79 20 64 72 69 76 65 2e 00
>39703f	42 6f 6f 74 69 6e 67 20		fdc_boot        .null "Booting from floppy..."
>397047	66 72 6f 6d 20 66 6c 6f 70 70 79 2e 2e 2e 00
>397056	0d 52 45 41 44 59 2e 00		ready_msg       .null $0D,"READY."
>39705e	41 42 4f 52 54 20 45 52		error_01        .null "ABORT ERROR"
>397066	52 4f 52 00
>39706a	30 31 32 33 34 35 36 37		hex_digits      .text "0123456789ABCDEF",0
>397072	38 39 41 42 43 44 45 46 00
>39707b					.align 256
>397100	00 1b 31 32 33 34 35 36		ScanCode_Press_Set1   .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>397108	37 38 39 30 2d 3d 08 09
>397110	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>397118	6f 70 5b 5d 0d 00 61 73
>397120	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>397128	27 60 00 5c 7a 78 63 76
>397130	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>397138	00 20 00 00 00 00 00 00
>397140	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $11, $00, $00, $9D, $00, $1D, $00, $00    ; $40
>397148	11 00 00 9d 00 1d 00 00
>397150	91 00 00 00 00 00 00 00		                      .text $91, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>397158	00 00 00 00 00 00 00 00
>397160	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>397168	00 00 00 00 00 00 00 00
>397170	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>397178	00 00 00 00 00 00 00 00
>397180	00 00 21 40 23 24 25 5e		ScanCode_Shift_Set1   .text $00, $00, $21, $40, $23, $24, $25, $5E, $26, $2A, $28, $29, $5F, $2B, $08, $09    ; $00
>397188	26 2a 28 29 5f 2b 08 09
>397190	51 57 45 52 54 59 55 49		                      .text $51, $57, $45, $52, $54, $59, $55, $49, $4F, $50, $7B, $7D, $0D, $00, $41, $53    ; $10
>397198	4f 50 7b 7d 0d 00 41 53
>3971a0	44 46 47 48 4a 4b 4c 3a		                      .text $44, $46, $47, $48, $4A, $4B, $4C, $3A, $22, $7E, $00, $5C, $5A, $58, $43, $56    ; $20
>3971a8	22 7e 00 5c 5a 58 43 56
>3971b0	42 4e 4d 3c 3e 3f 00 00		                      .text $42, $4E, $4D, $3C, $3E, $3F, $00, $00, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>3971b8	00 20 00 00 00 00 00 00
>3971c0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>3971c8	00 00 00 00 00 00 00 00
>3971d0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3971d8	00 00 00 00 00 00 00 00
>3971e0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3971e8	00 00 00 00 00 00 00 00
>3971f0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3971f8	00 00 00 00 00 00 00 00
>397200	00 1b 31 32 33 34 35 36		ScanCode_Ctrl_Set1    .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>397208	37 38 39 30 2d 3d 08 09
>397210	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>397218	6f 70 5b 5d 0d 00 61 73
>397220	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $03, $76    ; $20
>397228	27 60 00 5c 7a 78 03 76
>397230	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>397238	00 20 00 00 00 00 00 00
>397240	00 00 00 00 00 18 00 00		                      .text $00, $00, $00, $00, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>397248	00 00 00 00 00 00 00 00
>397250	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>397258	00 00 00 00 00 00 00 00
>397260	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>397268	00 00 00 00 00 00 00 00
>397270	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>397278	00 00 00 00 00 00 00 00
>397280	00 1b 31 32 33 34 35 36		ScanCode_Alt_Set1     .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>397288	37 38 39 30 2d 3d 08 09
>397290	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>397298	6f 70 5b 5d 0d 00 61 73
>3972a0	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>3972a8	27 60 00 5c 7a 78 63 76
>3972b0	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>3972b8	00 20 00 00 00 00 00 00
>3972c0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>3972c8	00 00 00 00 00 00 00 00
>3972d0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3972d8	00 00 00 00 00 00 00 00
>3972e0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3972e8	00 00 00 00 00 00 00 00
>3972f0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3972f8	00 00 00 00 00 00 00 00
>397300	00 1b 31 32 33 34 35 36		ScanCode_NumLock_Set1 .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>397308	37 38 39 30 2d 3d 08 09
>397310	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>397318	6f 70 5b 5d 0d 00 61 73
>397320	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>397328	27 60 00 5c 7a 78 63 76
>397330	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>397338	00 20 00 00 00 00 00 00
>397340	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>397348	00 00 00 00 00 00 00 00
>397350	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>397358	00 00 00 00 00 00 00 00
>397360	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>397368	00 00 00 00 00 00 00 00
>397370	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>397378	00 00 00 00 00 00 00 00
>397380	00 00 00 00 00 00 00 00		ScanCode_Prefix_Set1  .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $00
>397388	00 00 00 00 00 00 00 00
>397390	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $10
>397398	00 00 00 00 00 00 00 00
>3973a0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $20
>3973a8	00 00 00 00 00 00 00 00
>3973b0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $30
>3973b8	00 00 00 00 00 00 00 00
>3973c0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $11, $00, $00, $9D, $00, $1D, $00, $00    ; $40
>3973c8	11 00 00 9d 00 1d 00 00
>3973d0	91 00 0f 7f 00 00 00 00		                      .text $91, $00, $0F, $7F, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3973d8	00 00 00 00 00 00 00 00
>3973e0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3973e8	00 00 00 00 00 00 00 00
>3973f0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3973f8	00 00 00 00 00 00 00 00
>397400					.align 256
>397400	00 14 1c 21 26 2a 2e 31		GAMMA_2_2_Tbl         .text  $00, $14, $1c, $21, $26, $2a, $2e, $31, $34, $37, $3a, $3d, $3f, $41, $44, $46
>397408	34 37 3a 3d 3f 41 44 46
>397410	48 4a 4c 4e 50 51 53 55		                      .text  $48, $4a, $4c, $4e, $50, $51, $53, $55, $57, $58, $5a, $5b, $5d, $5e, $60, $61
>397418	57 58 5a 5b 5d 5e 60 61
>397420	63 64 66 67 68 6a 6b 6c		                      .text  $63, $64, $66, $67, $68, $6a, $6b, $6c, $6d, $6f, $70, $71, $72, $73, $75, $76
>397428	6d 6f 70 71 72 73 75 76
>397430	77 78 79 7a 7b 7c 7d 7e		                      .text  $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $80, $81, $82, $83, $84, $85, $86, $87
>397438	80 81 82 83 84 85 86 87
>397440	88 88 89 8a 8b 8c 8d 8e		                      .text  $88, $88, $89, $8a, $8b, $8c, $8d, $8e, $8f, $90, $91, $92, $93, $93, $94, $95
>397448	8f 90 91 92 93 93 94 95
>397450	96 97 98 99 99 9a 9b 9c		                      .text  $96, $97, $98, $99, $99, $9a, $9b, $9c, $9d, $9e, $9e, $9f, $a0, $a1, $a2, $a2
>397458	9d 9e 9e 9f a0 a1 a2 a2
>397460	a3 a4 a5 a5 a6 a7 a8 a8		                      .text  $a3, $a4, $a5, $a5, $a6, $a7, $a8, $a8, $a9, $aa, $ab, $ab, $ac, $ad, $ae, $ae
>397468	a9 aa ab ab ac ad ae ae
>397470	af b0 b0 b1 b2 b2 b3 b4		                      .text  $AF, $b0, $b0, $b1, $b2, $b2, $b3, $b4, $b5, $b5, $b6, $b7, $b7, $b8, $b9, $b9
>397478	b5 b5 b6 b7 b7 b8 b9 b9
>397480	ba bb bb bc bd bd be be		                      .text  $ba, $bb, $bb, $bc, $bd, $bd, $be, $be, $bf, $c0, $c0, $c1, $c2, $c2, $c3, $c4
>397488	bf c0 c0 c1 c2 c2 c3 c4
>397490	c4 c5 c5 c6 c7 c7 c8 c8		                      .text  $c4, $c5, $c5, $c6, $c7, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cb, $cc, $cd, $cd
>397498	c9 ca ca cb cb cc cd cd
>3974a0	ce ce cf d0 d0 d1 d1 d2		                      .text  $ce, $ce, $cf, $d0, $d0, $d1, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d5, $d6, $d6
>3974a8	d2 d3 d4 d4 d5 d5 d6 d6
>3974b0	d7 d8 d8 d9 d9 da da db		                      .text  $d7, $d8, $d8, $d9, $d9, $da, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $df
>3974b8	db dc dc dd de de df df
>3974c0	e0 e0 e1 e1 e2 e2 e3 e3		                      .text  $e0, $e0, $e1, $e1, $e2, $e2, $e3, $e3, $e4, $e4, $e5, $e5, $e6, $e6, $e7, $e7
>3974c8	e4 e4 e5 e5 e6 e6 e7 e7
>3974d0	e8 e8 e9 e9 ea ea eb eb		                      .text  $e8, $e8, $e9, $e9, $ea, $ea, $eb, $eb, $ec, $ec, $ed, $ed, $ee, $ee, $ef, $ef
>3974d8	ec ec ed ed ee ee ef ef
>3974e0	f0 f0 f1 f1 f2 f2 f3 f3		                      .text  $f0, $f0, $f1, $f1, $f2, $f2, $f3, $f3, $f4, $f4, $f5, $f5, $f6, $f6, $f7, $f7
>3974e8	f4 f4 f5 f5 f6 f6 f7 f7
>3974f0	f8 f8 f9 f9 f9 fa fa fb		                      .text  $f8, $f8, $f9, $f9, $f9, $fa, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $fe, $ff
>3974f8	fb fc fc fd fd fe fe ff
>397500					.align 256
>397500	00 0b 11 15 19 1c 1f 22		GAMMA_1_8_Tbl         .text  $00, $0b, $11, $15, $19, $1c, $1f, $22, $25, $27, $2a, $2c, $2e, $30, $32, $34
>397508	25 27 2a 2c 2e 30 32 34
>397510	36 38 3a 3c 3d 3f 41 43		                      .text  $36, $38, $3a, $3c, $3d, $3f, $41, $43, $44, $46, $47, $49, $4a, $4c, $4d, $4f
>397518	44 46 47 49 4a 4c 4d 4f
>397520	50 51 53 54 55 57 58 59		                      .text  $50, $51, $53, $54, $55, $57, $58, $59, $5b, $5c, $5d, $5e, $60, $61, $62, $63
>397528	5b 5c 5d 5e 60 61 62 63
>397530	64 65 67 68 69 6a 6b 6c		                      .text  $64, $65, $67, $68, $69, $6a, $6b, $6c, $6d, $6e, $70, $71, $72, $73, $74, $75
>397538	6d 6e 70 71 72 73 74 75
>397540	76 77 78 79 7a 7b 7c 7d		                      .text  $76, $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $7f, $80, $81, $82, $83, $84, $84
>397548	7e 7f 80 81 82 83 84 84
>397550	85 86 87 88 89 8a 8b 8c		                      .text  $85, $86, $87, $88, $89, $8a, $8b, $8c, $8d, $8e, $8e, $8f, $90, $91, $92, $93
>397558	8d 8e 8e 8f 90 91 92 93
>397560	94 95 95 96 97 98 99 9a		                      .text  $94, $95, $95, $96, $97, $98, $99, $9a, $9a, $9b, $9c, $9d, $9e, $9f, $9f, $a0
>397568	9a 9b 9c 9d 9e 9f 9f a0
>397570	a1 a2 a3 a3 a4 a5 a6 a6		                      .text  $a1, $a2, $a3, $a3, $a4, $a5, $a6, $a6, $a7, $a8, $a9, $aa, $aa, $ab, $ac, $ad
>397578	a7 a8 a9 aa aa ab ac ad
>397580	ad ae af b0 b0 b1 b2 b3		                      .text  $ad, $ae, $af, $b0, $b0, $b1, $b2, $b3, $b3, $b4, $b5, $b6, $b6, $b7, $b8, $b8
>397588	b3 b4 b5 b6 b6 b7 b8 b8
>397590	b9 ba bb bb bc bd bd be		                      .text  $b9, $ba, $bb, $bb, $bc, $bd, $bd, $be, $bf, $bf, $c0, $c1, $c2, $c2, $c3, $c4
>397598	bf bf c0 c1 c2 c2 c3 c4
>3975a0	c4 c5 c6 c6 c7 c8 c8 c9		                      .text  $c4, $c5, $c6, $c6, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cc, $cc, $cd, $ce, $ce
>3975a8	ca ca cb cc cc cd ce ce
>3975b0	cf d0 d0 d1 d2 d2 d3 d4		                      .text  $cf, $d0, $d0, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d6, $d6, $d7, $d7, $d8, $d9
>3975b8	d4 d5 d6 d6 d7 d7 d8 d9
>3975c0	d9 da db db dc dc dd de		                      .text  $d9, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $e0, $e0, $e1, $e1, $e2, $e3
>3975c8	de df e0 e0 e1 e1 e2 e3
>3975d0	e3 e4 e4 e5 e6 e6 e7 e7		                      .text  $e3, $e4, $e4, $e5, $e6, $e6, $e7, $e7, $e8, $e9, $e9, $ea, $ea, $eb, $ec, $ec
>3975d8	e8 e9 e9 ea ea eb ec ec
>3975e0	ed ed ee ef ef f0 f0 f1		                      .text  $ed, $ed, $ee, $ef, $ef, $f0, $f0, $f1, $f1, $f2, $f3, $f3, $f4, $f4, $f5, $f5
>3975e8	f1 f2 f3 f3 f4 f4 f5 f5
>3975f0	f6 f7 f7 f8 f8 f9 f9 fa		                      .text  $f6, $f7, $f7, $f8, $f8, $f9, $f9, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $ff
>3975f8	fb fb fc fc fd fd fe ff
>397600					.align 256
>397600	1d c8 a7 ac 10 d6 52 7c		RANDOM_LUT_Tbl		    .text  $1d, $c8, $a7, $ac, $10, $d6, $52, $7c, $83, $dd, $ce, $39, $cd, $c5, $3b, $15
>397608	83 dd ce 39 cd c5 3b 15
>397610	22 55 3b 94 e0 33 1f 38						              .text  $22, $55, $3b, $94, $e0, $33, $1f, $38, $87, $12, $31, $65, $89, $27, $88, $42
>397618	87 12 31 65 89 27 88 42
>397620	b2 32 72 84 b2 b2 31 52						              .text  $b2, $32, $72, $84, $b2, $b2, $31, $52, $94, $ce, $56, $ec, $fe, $da, $58, $c9
>397628	94 ce 56 ec fe da 58 c9
>397630	c8 5b 53 2a 08 3b 19 c1						              .text  $c8, $5b, $53, $2a, $08, $3b, $19, $c1, $d0, $10, $2c, $b2, $4b, $ea, $32, $61
>397638	d0 10 2c b2 4b ea 32 61
>397640	da 34 33 8f 2b da 49 89						              .text  $da, $34, $33, $8f, $2b, $da, $49, $89, $a1, $e6, $ca, $2d, $b3, $ce, $b0, $79
>397648	a1 e6 ca 2d b3 ce b0 79
>397650	44 aa 32 82 91 e9 29 16						              .text  $44, $aa, $32, $82, $91, $e9, $29, $16, $5f, $e3, $fb, $bd, $15, $2e, $be, $f5
>397658	5f e3 fb bd 15 2e be f5
>397660	e9 4a e4 2e 60 24 94 35						              .text  $e9, $4a, $e4, $2e, $60, $24, $94, $35, $8d, $8f, $2c, $80, $0a, $5e, $99, $36
>397668	8d 8f 2c 80 0a 5e 99 36
>397670	ac ab 21 26 42 7c 5e bc						              .text  $ac, $ab, $21, $26, $42, $7c, $5e, $bc, $13, $52, $44, $2f, $e3, $ef, $44, $a2
>397678	13 52 44 2f e3 ef 44 a2
>397680	86 c1 9c 47 5f 36 6d 02						              .text  $86, $c1, $9c, $47, $5f, $36, $6d, $02, $be, $23, $02, $58, $0a, $52, $5e, $b4
>397688	be 23 02 58 0a 52 5e b4
>397690	9f 06 08 c9 97 cb 9e dd						              .text  $9f, $06, $08, $c9, $97, $cb, $9e, $dd, $d5, $cf, $3e, $df, $c4, $9e, $da, $bb
>397698	d5 cf 3e df c4 9e da bb
>3976a0	9b 5d c9 f5 d9 c3 7e 87						              .text  $9b, $5d, $c9, $f5, $d9, $c3, $7e, $87, $77, $7d, $b1, $3b, $4a, $68, $35, $6e
>3976a8	77 7d b1 3b 4a 68 35 6e
>3976b0	ee 47 ad 8f fd 73 2e 46						              .text  $ee, $47, $ad, $8f, $fd, $73, $2e, $46, $b5, $8f, $44, $63, $55, $6f, $e1, $50
>3976b8	b5 8f 44 63 55 6f e1 50
>3976c0	f4 b6 a3 4f 68 c4 a5 a4						              .text  $f4, $b6, $a3, $4f, $68, $c4, $a5, $a4, $57, $74, $b9, $bd, $05, $14, $50, $eb
>3976c8	57 74 b9 bd 05 14 50 eb
>3976d0	a5 5c 57 2f 99 dc 2e 8a						              .text  $a5, $5c, $57, $2f, $99, $dc, $2e, $8a, $44, $bc, $ec, $db, $22, $58, $fc, $be
>3976d8	44 bc ec db 22 58 fc be
>3976e0	5f 3f 50 bd 2a 36 ab ae						              .text  $5f, $3f, $50, $bd, $2a, $36, $ab, $ae, $24, $aa, $82, $11, $5c, $9f, $43, $4d
>3976e8	24 aa 82 11 5c 9f 43 4d
>3976f0	8f 0c 20 00 91 b6 45 9e						              .text  $8f, $0c, $20, $00, $91, $b6, $45, $9e, $3e, $3d, $66, $7e, $0a, $1c, $6b, $74
>3976f8	3e 3d 66 7e 0a 1c 6b 74
>397700					.align 16
>397700	00 01 01 00 00 00 00 00		MOUSE_POINTER_PTR     .text $00,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00
>397708	01 01 01 00 00 00 00 00
>397710	01 ff ff 01 00 00 01 01		                      .text $01,$FF,$FF,$01,$00,$00,$01,$01,$FF,$FF,$FF,$01,$00,$00,$00,$00
>397718	ff ff ff 01 00 00 00 00
>397720	01 ff ff ff 01 01 55 ff		                      .text $01,$FF,$FF,$FF,$01,$01,$55,$FF,$01,$55,$FF,$FF,$01,$00,$00,$00
>397728	01 55 ff ff 01 00 00 00
>397730	01 55 ff ff ff ff 01 55		                      .text $01,$55,$FF,$FF,$FF,$FF,$01,$55,$FF,$FF,$FF,$FF,$01,$00,$00,$00
>397738	ff ff ff ff 01 00 00 00
>397740	00 01 55 ff ff ff ff ff		                      .text $00,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$00,$00
>397748	ff ff 01 ff ff 01 00 00
>397750	00 00 01 55 ff ff ff ff		                      .text $00,$00,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$FF,$01,$00,$00
>397758	01 ff ff 01 ff 01 00 00
>397760	00 00 01 01 55 ff ff ff		                      .text $00,$00,$01,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$FF,$01,$00,$00
>397768	ff 01 ff ff ff 01 00 00
>397770	00 00 01 55 01 55 ff ff		                      .text $00,$00,$01,$55,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$01,$00
>397778	ff ff ff ff ff 01 01 00
>397780	00 00 01 55 55 55 ff ff		                      .text $00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01
>397788	ff ff ff ff 01 ff ff 01
>397790	00 00 00 01 55 55 55 ff		                      .text $00,$00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01
>397798	ff ff ff ff ff ff ff 01
>3977a0	00 00 00 00 01 55 55 55		                      .text $00,$00,$00,$00,$01,$55,$55,$55,$55,$55,$01,$FF,$FF,$55,$01,$00
>3977a8	55 55 01 ff ff 55 01 00
>3977b0	00 00 00 00 00 01 01 01		                      .text $00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$55,$FF,$55,$01,$00,$00
>3977b8	01 01 55 ff 55 01 00 00
>3977c0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$55,$01,$00,$00,$00
>3977c8	01 55 55 55 01 00 00 00
>3977d0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$01,$00,$00,$00,$00
>3977d8	01 55 55 01 00 00 00 00
>3977e0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00
>3977e8	00 01 01 00 00 00 00 00
>3977f0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>3977f8	00 00 00 00 00 00 00 00
.3ff000					FONT_4_BANK0
>3ff000	00 00 00 00 00 00 00 00		.binary "FONT/Bm437_PhoenixEGA_8x8.bin", 0, 2048
>3ff008	7e 81 a5 81 bd 99 81 7e 3c 7e db ff c3 7e 3c 00
>3ff018	00 ee fe fe 7c 38 10 00 10 38 7c fe 7c 38 10 00
>3ff028	00 3c 18 ff ff 08 18 00 10 38 7c fe fe 10 38 00
>3ff038	00 00 18 3c 18 00 00 00 ff ff e7 c3 e7 ff ff ff
>3ff048	00 3c 42 81 81 42 3c 00 ff c3 bd 7e 7e bd c3 ff
>3ff058	01 03 07 0f 1f 3f 7f ff ff fe fc f8 f0 e0 c0 80
>3ff068	04 06 07 04 04 fc f8 00 0c 0a 0d 0b f9 f9 1f 1f
>3ff078	00 92 7c 44 c6 7c 92 00 00 00 60 78 7e 78 60 00
>3ff088	00 00 06 1e 7e 1e 06 00 18 7e 18 18 18 18 7e 18
>3ff098	66 66 66 66 66 00 66 00 ff b6 76 36 36 36 36 00
>3ff0a8	7e c1 dc 22 22 1f 83 7e 00 00 00 7e 7e 00 00 00
>3ff0b8	18 7e 18 18 7e 18 00 ff 18 7e 18 18 18 18 18 00
>3ff0c8	18 18 18 18 18 7e 18 00 00 04 06 ff 06 04 00 00
>3ff0d8	00 20 60 ff 60 20 00 00 00 00 00 c0 c0 c0 ff 00
>3ff0e8	00 24 66 ff 66 24 00 00 00 00 10 38 7c fe 00 00
>3ff0f8	00 00 00 fe 7c 38 10 00 00 00 00 00 00 00 00 00
>3ff108	30 30 30 30 30 00 30 00 66 66 00 00 00 00 00 00
>3ff118	6c 6c fe 6c fe 6c 6c 00 10 7c d2 7c 86 7c 10 00
>3ff128	f0 96 fc 18 3e 72 de 00 30 48 30 78 ce cc 78 00
>3ff138	0c 0c 18 00 00 00 00 00 10 60 c0 c0 c0 60 10 00
>3ff148	10 0c 06 06 06 0c 10 00 00 54 38 fe 38 54 00 00
>3ff158	00 18 18 7e 18 18 00 00 00 00 00 00 00 00 18 70
>3ff168	00 00 00 7e 00 00 00 00 00 00 00 00 00 00 18 00
>3ff178	02 06 0c 18 30 60 c0 00 7c ce de f6 e6 e6 7c 00
>3ff188	18 38 78 18 18 18 3c 00 7c c6 06 0c 30 60 fe 00
>3ff198	7c c6 06 3c 06 c6 7c 00 0e 1e 36 66 fe 06 06 00
>3ff1a8	fe c0 c0 fc 06 06 fc 00 7c c6 c0 fc c6 c6 7c 00
>3ff1b8	fe 06 0c 18 30 60 60 00 7c c6 c6 7c c6 c6 7c 00
>3ff1c8	7c c6 c6 7e 06 c6 7c 00 00 30 00 00 00 30 00 00
>3ff1d8	00 30 00 00 00 30 20 00 00 1c 30 60 30 1c 00 00
>3ff1e8	00 00 7e 00 7e 00 00 00 00 70 18 0c 18 70 00 00
>3ff1f8	7c c6 0c 18 30 00 30 00 7c 82 9a aa aa 9e 7c 00
>3ff208	7c c6 c6 fe c6 c6 c6 00 fc 66 66 7c 66 66 fc 00
>3ff218	7c c6 c0 c0 c0 c6 7c 00 fc 66 66 66 66 66 fc 00
>3ff228	fe 62 68 78 68 62 fe 00 fe 62 68 78 68 60 f0 00
>3ff238	7c c6 c6 c0 de c6 7c 00 c6 c6 c6 fe c6 c6 c6 00
>3ff248	3c 18 18 18 18 18 3c 00 1e 0c 0c 0c 0c cc 78 00
>3ff258	c6 cc d8 f0 d8 cc c6 00 f0 60 60 60 60 62 fe 00
>3ff268	c6 ee fe d6 c6 c6 c6 00 c6 e6 f6 de ce c6 c6 00
>3ff278	7c c6 c6 c6 c6 c6 7c 00 fc 66 66 7c 60 60 f0 00
>3ff288	7c c6 c6 c6 c6 c6 7c 0c fc 66 66 7c 66 66 e6 00
>3ff298	7c c6 c0 7c 06 c6 7c 00 7e 5a 18 18 18 18 3c 00
>3ff2a8	c6 c6 c6 c6 c6 c6 7c 00 c6 c6 c6 c6 c6 6c 38 00
>3ff2b8	c6 c6 c6 c6 d6 ee c6 00 c6 6c 38 38 38 6c c6 00
>3ff2c8	66 66 66 3c 18 18 3c 00 fe c6 0c 18 30 66 fe 00
>3ff2d8	1c 18 18 18 18 18 1c 00 c0 60 30 18 0c 06 02 00
>3ff2e8	70 30 30 30 30 30 70 00 00 00 10 38 6c c6 00 00
>3ff2f8	00 00 00 00 00 00 00 ff 30 30 18 00 00 00 00 00
>3ff308	00 00 7c 06 7e c6 7e 00 c0 c0 fc c6 c6 c6 fc 00
>3ff318	00 00 7c c6 c0 c6 7c 00 06 06 7e c6 c6 c6 7e 00
>3ff328	00 00 7c c6 fe c0 7c 00 3c 66 60 f0 60 60 60 00
>3ff338	00 00 7e c6 c6 7e 06 7c c0 c0 fc c6 c6 c6 c6 00
>3ff348	18 00 38 18 18 18 3c 00 00 0c 00 1c 0c 0c cc 78
>3ff358	c0 c0 c6 d8 f0 d8 c6 00 38 18 18 18 18 18 3c 00
>3ff368	00 00 ee fe d6 c6 c6 00 00 00 fc c6 c6 c6 c6 00
>3ff378	00 00 7c c6 c6 c6 7c 00 00 00 fc c6 c6 fc c0 c0
>3ff388	00 00 7e c6 c6 7e 06 06 00 00 de 76 60 60 60 00
>3ff398	00 00 7c c0 7c 06 7c 00 18 18 7e 18 18 18 1e 00
>3ff3a8	00 00 c6 c6 c6 c6 7e 00 00 00 c6 c6 c6 6c 38 00
>3ff3b8	00 00 c6 c6 d6 fe c6 00 00 00 c6 6c 38 6c c6 00
>3ff3c8	00 00 c6 c6 c6 7e 06 7c 00 00 fe 0c 18 60 fe 00
>3ff3d8	0e 18 18 70 18 18 0e 00 18 18 18 00 18 18 18 00
>3ff3e8	e0 30 30 1c 30 30 e0 00 00 00 70 9a 0e 00 00 00
>3ff3f8	00 00 18 3c 66 ff 00 00 7c c6 c0 c0 c6 7c 18 70
>3ff408	66 00 c6 c6 c6 c6 7e 00 0e 18 7c c6 fe c0 7c 00
>3ff418	18 24 7c 06 7e c6 7e 00 66 00 7c 06 7e c6 7e 00
>3ff428	38 0c 7c 06 7e c6 7e 00 18 00 7c 06 7e c6 7e 00
>3ff438	00 00 7c c0 c0 7c 18 70 18 24 7c c6 fe c0 7c 00
>3ff448	66 00 7c c6 fe c0 7c 00 70 18 7c c6 fe c0 7c 00
>3ff458	66 00 38 18 18 18 3c 00 18 24 38 18 18 18 3c 00
>3ff468	38 0c 38 18 18 18 3c 00 66 00 7c c6 fe c6 c6 00
>3ff478	18 00 7c c6 fe c6 c6 00 0e 18 fe 60 78 60 fe 00
>3ff488	00 00 7c 1a 7e d8 7e 00 7e d8 d8 de f8 d8 de 00
>3ff498	18 24 7c c6 c6 c6 7c 00 66 00 7c c6 c6 c6 7c 00
>3ff4a8	38 0c 7c c6 c6 c6 7c 00 18 24 c6 c6 c6 c6 7e 00
>3ff4b8	38 0c c6 c6 c6 c6 7e 00 66 00 c6 c6 c6 7e 06 7c
>3ff4c8	66 7c c6 c6 c6 c6 7c 00 c6 00 c6 c6 c6 c6 7c 00
>3ff4d8	18 7c c6 c0 c6 7c 18 00 1e 32 30 78 30 70 fe 00
>3ff4e8	66 3c 18 7e 18 3c 18 00 fc c6 fc c0 cc de cc 0e
>3ff4f8	00 1c 32 30 fc 30 f0 00 0e 18 7c 06 7e c6 7e 00
>3ff508	1a 30 38 18 18 18 3c 00 0e 18 7c c6 c6 c6 7c 00
>3ff518	0e 18 c6 c6 c6 c6 7e 00 66 98 fc c6 c6 c6 c6 00
>3ff528	66 98 e6 f6 de ce c6 00 7c 06 7e c6 7e 00 fe 00
>3ff538	7c c6 c6 c6 7c 00 fe 00 18 00 18 30 60 c6 7c 00
>3ff548	00 00 fe c0 c0 c0 c0 00 00 00 fe 06 06 06 06 00
>3ff558	c0 c0 c0 de 06 0c 1e 00 c0 c0 c0 cc 1c 3e 0c 00
>3ff568	30 00 30 30 30 30 30 00 00 36 6c d8 6c 36 00 00
>3ff578	00 d8 6c 36 6c d8 00 00 aa aa aa aa aa aa aa aa
>3ff588	aa 55 aa 55 aa 55 aa 55 44 22 44 22 44 22 44 22
>3ff598	18 18 18 18 18 18 18 18 18 18 18 f8 18 18 18 18
>3ff5a8	18 18 18 f8 18 f8 18 18 36 36 36 f6 36 36 36 36
>3ff5b8	00 00 00 fe 36 36 36 36 00 00 00 f8 18 f8 18 18
>3ff5c8	36 36 36 f6 06 f6 36 36 36 36 36 36 36 36 36 36
>3ff5d8	00 00 00 fe 06 f6 36 36 36 36 36 f6 06 fe 00 00
>3ff5e8	36 36 36 fe 00 00 00 00 18 18 18 f8 18 f8 00 00
>3ff5f8	00 00 00 f8 18 18 18 18 18 18 18 1f 00 00 00 00
>3ff608	18 18 18 ff 00 00 00 00 00 00 00 ff 18 18 18 18
>3ff618	18 18 18 1f 18 18 18 18 00 00 00 ff 00 00 00 00
>3ff628	18 18 18 ff 18 18 18 18 18 18 18 1f 18 1f 18 18
>3ff638	36 36 36 37 36 36 36 36 36 36 36 37 30 3f 00 00
>3ff648	00 00 00 3f 30 37 36 36 36 36 36 f7 00 ff 00 00
>3ff658	00 00 00 ff 00 f7 36 36 36 36 36 37 30 37 36 36
>3ff668	00 00 00 ff 00 ff 00 00 36 36 36 f7 00 f7 36 36
>3ff678	18 18 18 ff 00 ff 00 00 36 36 36 ff 00 00 00 00
>3ff688	00 00 00 ff 00 ff 18 18 00 00 00 ff 36 36 36 36
>3ff698	36 36 36 3f 00 00 00 00 18 18 18 1f 18 1f 00 00
>3ff6a8	00 00 00 1f 18 1f 18 18 00 00 00 3f 36 36 36 36
>3ff6b8	36 36 36 ff 36 36 36 36 18 18 18 ff 18 ff 18 18
>3ff6c8	18 18 18 f8 00 00 00 00 00 00 00 1f 18 18 18 18
>3ff6d8	ff ff ff ff ff ff ff ff 00 00 00 00 ff ff ff ff
>3ff6e8	f0 f0 f0 f0 f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f
>3ff6f8	ff ff ff ff 00 00 00 00 00 00 77 98 98 77 00 00
>3ff708	1c 36 66 fc c6 c6 fc c0 fe 62 60 60 60 60 60 00
>3ff718	00 00 ff 66 66 66 66 00 fe 62 30 18 30 62 fe 00
>3ff728	00 00 3f 66 c6 cc 78 00 00 00 33 33 33 3e 30 f0
>3ff738	00 00 ff 18 18 18 18 00 3c 18 3c 66 66 3c 18 3c
>3ff748	00 7c c6 fe c6 7c 00 00 00 7e c3 c3 c3 66 e7 00
>3ff758	1e 19 3c 66 c6 cc 78 00 00 00 66 99 99 66 00 00
>3ff768	00 03 7c ce e6 7c c0 00 00 3e c0 fe c0 3e 00 00
>3ff778	00 7e c3 c3 c3 c3 00 00 00 fe 00 fe 00 fe 00 00
>3ff788	18 18 7e 18 18 7e 00 00 70 18 0c 18 70 00 fe 00
>3ff798	1c 30 60 30 1c 00 fe 00 00 0e 1b 18 18 18 18 18
>3ff7a8	18 18 18 18 18 d8 70 00 00 18 00 7e 00 18 00 00
>3ff7b8	00 76 dc 00 76 dc 00 00 3c 66 3c 00 00 00 00 00
>3ff7c8	00 18 3c 18 00 00 00 00 00 00 00 00 18 00 00 00
>3ff7d8	0f 0c 0c 0c ec 6c 38 00 d8 ec cc cc 00 00 00 00
>3ff7e8	f0 30 c0 f0 00 00 00 00 00 00 00 3c 3c 3c 3c 00
>3ff7f8	00 00 00 00 00 00 00 00
.3ff800					FONT_4_BANK1
>3ff800	00 00 00 00 00 00 00 00		.binary "FONT/CBM-ASCII_8x8.bin", 0, 2048
>3ff808	7c 82 aa 82 ba 92 82 7c 7c fe d6 fe c6 ee fe 7c
>3ff818	ff fd fb f5 eb d5 ab ff ff e1 fd 85 85 87 87 ff
>3ff828	ff bd db e7 e7 db bd ff ff 81 81 bd bd bd 81 ff
>3ff838	ff ff ff ff ff 81 81 ff 00 08 10 20 10 08 00 00
>3ff848	00 24 14 0c 14 24 00 00 00 8e 88 8c 88 e8 00 00
>3ff858	00 00 00 00 00 00 00 00 00 ee 88 cc 88 88 00 00
>3ff868	00 00 04 14 3c 10 00 00 00 30 4c 4c 30 00 00 00
>3ff878	00 38 28 38 28 00 00 00 ff 81 bd bd bd bd 81 ff
>3ff888	ff 55 aa 55 aa 55 aa ff ab d5 ab d5 ab d5 ab d5
>3ff898	ff 81 81 81 81 81 81 ff ff f9 e1 81 81 e1 f9 ff
>3ff8a8	ff 9f 87 81 81 87 9f ff ff e7 e7 c3 c3 81 81 ff
>3ff8b8	ff 81 81 c3 c3 e7 e7 ff 00 26 54 04 04 04 06 00
>3ff8c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 3 times (48 bytes)...
>3ff908	10 10 10 10 00 10 00 00 24 24 24 00 00 00 00 00
>3ff918	24 7e 24 24 7e 24 00 00 10 3c 50 38 14 78 10 00
>3ff928	62 64 08 10 20 4c 8c 00 30 48 48 30 58 4c 4c 38
>3ff938	10 10 10 00 00 00 00 00 08 10 20 20 20 20 10 08
>3ff948	10 08 04 04 04 04 08 10 00 24 18 7e 18 24 00 00
>3ff958	00 10 10 7c 10 10 00 00 00 00 00 00 10 10 20 00
>3ff968	00 00 00 3c 00 00 00 00 00 00 00 00 18 18 00 00
>3ff978	04 04 08 08 10 10 20 20 3c 46 4a 52 62 42 3c 00
>3ff988	10 30 10 10 10 10 38 00 38 44 04 18 20 40 7c 00
>3ff998	38 44 04 18 04 44 38 00 08 18 28 48 7c 08 08 00
>3ff9a8	7c 40 78 04 04 44 38 00 38 44 40 78 44 44 38 00
>3ff9b8	7c 44 04 08 08 10 10 00 38 44 44 38 44 44 38 00
>3ff9c8	38 44 44 3c 04 44 38 00 00 00 18 00 00 18 00 00
>3ff9d8	00 00 18 00 00 18 18 30 00 08 10 20 10 08 00 00
>3ff9e8	00 00 3c 00 3c 00 00 00 00 10 08 04 08 10 00 00
>3ff9f8	38 44 04 08 10 00 10 00 38 44 4c 4c 40 44 38 00
>3ffa08	10 28 44 7c 44 44 00 00 78 44 78 44 44 78 00 00
>3ffa18	38 44 40 40 44 38 00 00 78 44 44 44 44 78 00 00
>3ffa28	7c 40 78 40 40 7c 00 00 7c 40 78 40 40 40 00 00
>3ffa38	38 44 40 4c 44 38 00 00 44 44 7c 44 44 44 00 00
>3ffa48	38 10 10 10 10 38 00 00 1c 08 08 08 48 30 00 00
>3ffa58	24 28 30 30 28 24 00 00 20 20 20 20 20 3c 00 00
>3ffa68	44 6c 7c 54 44 44 00 00 44 64 54 4c 44 44 00 00
>3ffa78	38 44 44 44 44 38 00 00 78 44 44 78 40 40 00 00
>3ffa88	38 44 44 44 44 38 0c 00 78 44 44 78 48 44 00 00
>3ffa98	3c 40 38 04 04 78 00 00 7c 10 10 10 10 10 00 00
>3ffaa8	44 44 44 44 44 38 00 00 44 44 44 44 28 10 00 00
>3ffab8	82 82 82 92 92 6c 00 00 42 24 18 18 24 42 00 00
>3ffac8	44 44 28 10 10 10 00 00 7c 08 10 20 40 7c 00 00
>3ffad8	38 20 20 20 20 20 38 00 20 20 10 10 08 08 04 04
>3ffae8	38 08 08 08 08 08 38 00 00 10 28 44 00 00 00 00
>3ffaf8	00 00 00 00 00 00 00 7e 40 20 10 00 00 00 00 00
>3ffb08	00 38 04 3c 64 3c 00 00 40 40 78 44 44 78 00 00
>3ffb18	00 00 38 40 40 38 00 00 04 04 3c 44 44 3c 00 00
>3ffb28	00 38 44 7c 40 3c 00 00 0c 10 3c 10 10 10 00 00
>3ffb38	00 00 3c 44 44 3c 04 78 40 40 78 44 44 44 00 00
>3ffb48	10 00 30 10 10 38 00 00 08 00 08 08 08 08 08 30
>3ffb58	20 20 24 38 28 24 00 00 30 10 10 10 10 10 00 00
>3ffb68	00 00 68 54 54 44 00 00 00 00 38 24 24 24 00 00
>3ffb78	00 00 38 44 44 38 00 00 00 00 78 44 44 78 40 40
>3ffb88	00 00 3c 44 44 3c 04 04 00 00 78 44 40 40 00 00
>3ffb98	00 00 1c 30 0c 38 00 00 00 10 7c 10 10 10 0c 00
>3ffba8	00 00 44 44 44 3c 00 00 00 00 42 42 24 18 00 00
>3ffbb8	00 00 82 82 92 6c 00 00 00 00 24 18 18 24 00 00
>3ffbc8	00 00 24 24 24 1c 04 38 00 00 7c 18 30 7c 00 00
>3ffbd8	0c 10 10 30 30 10 10 0c 18 18 18 00 18 18 18 00
>3ffbe8	30 08 08 0c 0c 08 08 30 00 00 32 7e 4c 00 00 00
>3ffbf8	00 00 10 28 38 00 00 00 00 00 3c 3c 3c 3c 00 00
>3ffc08	00 00 3c 24 24 3c 00 00 00 00 18 3c 3c 18 00 00
>3ffc18	00 00 18 24 24 18 00 00 18 24 24 18 00 00 00 00
>3ffc28	00 3c 42 42 66 24 66 00 00 18 00 18 0c 06 66 3c
>3ffc38	0c 12 30 7c 30 62 fc 00 1c 20 70 20 70 20 1c 00
>3ffc48	02 06 0c d8 f0 e0 c0 00 18 18 ff 00 00 ff 00 00
>3ffc58	00 00 ff 00 00 ff 18 18 24 24 24 e7 e7 24 24 24
>3ffc68	18 18 ff 00 00 ff 18 18 24 24 24 27 27 24 24 24
>3ffc78	24 24 24 e4 e4 24 24 24 00 00 00 ff ff ff ff ff
>3ffc88	00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>3ffc98	ff ff ff ff ff ff ff 00 ff ff ff ff ff ff 00 00
>3ffca8	ff ff ff ff ff 00 00 00 ff ff ff ff 00 00 00 00
>3ffcb8	f8 f8 f8 f8 f8 f8 f8 f8 fc fc fc fc fc fc fc fc
>3ffcc8	fe fe fe fe fe fe fe fe 7f 7f 7f 7f 7f 7f 7f 7f
>3ffcd8	3f 3f 3f 3f 3f 3f 3f 3f 1f 1f 1f 1f 1f 1f 1f 1f
>3ffce8	0f 0f 0f 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00
>3ffcf8	00 00 00 00 00 00 00 00 ff ff ff ff ff ff ff ff
>3ffd08	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 00 ff ff ff ff
>3ffd18	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>3ffd28	80 80 80 80 80 80 80 80 aa 55 aa 55 aa 55 aa 55
>3ffd38	01 01 01 01 01 01 01 01 00 00 00 00 aa 55 aa 55
>3ffd48	ff fe fc f8 f0 e0 c0 80 03 03 03 03 03 03 03 03
>3ffd58	18 18 18 1f 1f 18 18 18 00 00 00 00 0f 0f 0f 0f
>3ffd68	18 18 18 1f 1f 00 00 00 00 00 00 f8 f8 18 18 18
>3ffd78	00 00 00 00 00 00 ff ff 00 00 00 1f 1f 18 18 18
>3ffd88	18 18 18 ff ff 00 00 00 00 00 00 ff ff 18 18 18
>3ffd98	18 18 18 f8 f8 18 18 18 c0 c0 c0 c0 c0 c0 c0 c0
>3ffda8	e0 e0 e0 e0 e0 e0 e0 e0 07 07 07 07 07 07 07 07
>3ffdb8	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00
>3ffdc8	00 00 00 00 00 ff ff ff 03 03 03 03 03 03 ff ff
>3ffdd8	00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>3ffde8	18 18 18 f8 f8 00 00 00 f0 f0 f0 f0 00 00 00 00
>3ffdf8	f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 ff ff 00 00 00
>3ffe08	08 1c 3e 7f 7f 1c 3e 00 18 18 18 18 18 18 18 18
>3ffe18	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00
>3ffe28	00 ff ff 00 00 00 00 00 00 00 00 00 ff ff 00 00
>3ffe38	30 30 30 30 30 30 30 30 0c 0c 0c 0c 0c 0c 0c 0c
>3ffe48	00 00 00 e0 f0 38 18 18 18 18 1c 0f 07 00 00 00
>3ffe58	18 18 38 f0 e0 00 00 00 c0 c0 c0 c0 c0 c0 ff ff
>3ffe68	c0 e0 70 38 1c 0e 07 03 03 07 0e 1c 38 70 e0 c0
>3ffe78	ff ff c0 c0 c0 c0 c0 c0 ff ff 03 03 03 03 03 03
>3ffe88	00 3c 7e 7e 7e 7e 3c 00 00 00 00 00 00 ff ff 00
>3ffe98	36 7f 7f 7f 3e 1c 08 00 60 60 60 60 60 60 60 60
>3ffea8	00 00 00 07 0f 1c 18 18 c3 e7 7e 3c 3c 7e e7 c3
>3ffeb8	00 3c 7e 66 66 7e 3c 00 18 18 66 66 18 18 3c 00
>3ffec8	06 06 06 06 06 06 06 06 08 1c 3e 7f 3e 1c 08 00
>3ffed8	18 18 18 ff ff 18 18 18 c0 c0 30 30 c0 c0 30 30
>3ffee8	18 18 18 18 18 18 18 18 00 00 03 3e 76 36 36 00
>3ffef8	ff 7f 3f 1f 0f 07 03 01 24 24 24 24 24 24 24 24
>3fff08	00 00 ff 00 00 ff 00 00 00 00 3f 20 20 27 24 24
>3fff18	00 00 ff 00 00 e7 24 24 00 00 fc 04 04 e4 24 24
>3fff28	24 24 27 20 20 3f 00 00 24 24 e7 00 00 ff 00 00
>3fff38	24 24 e4 04 04 fc 00 00 24 24 27 20 20 27 24 24
>3fff48	24 24 e4 04 04 e4 24 24 24 24 e7 00 00 e7 24 24
>3fff58	0f 0f 0f 0f f0 f0 f0 f0 01 03 07 0f 1f 3f 7f ff
>3fff68	80 c0 e0 f0 f8 fc fe ff 33 99 cc 66 33 99 cc 66
>3fff78	cc 99 33 66 cc 99 33 66 f0 f0 f0 f0 ff ff ff ff
>3fff88	0f 0f 0f 0f ff ff ff ff ff ff ff ff f0 f0 f0 f0
>3fff98	ff ff ff ff 0f 0f 0f 0f 05 0a 05 0a 00 00 00 00
>3fffa8	00 00 00 00 0a 05 0a 05 a0 50 a0 50 00 00 00 00
>3fffb8	00 00 00 00 a0 50 a0 50 0a 05 0a 05 0a 05 0a 05
>3fffc8	aa 55 aa 55 00 00 00 00 00 18 3c 7e 18 18 18 18
>3fffd8	00 10 30 7f 7f 30 10 00 00 08 0c fe fe 0c 08 00
>3fffe8	18 18 18 18 7e 3c 18 00 00 00 36 49 36 00 00 00
>3ffff8	00 00 00 00 00 00 00 00
>3a0000	5c a8 64 3a 5c ba 4a 3a		.binary "binaries/basic816.bin"
>3a0008	5c c6 20 3a 5c 40 01 3a 5c 58 00 3a 5c d6 00 3a
>3a0018	5c 59 02 3a 5c e4 00 3a 5c ff 00 3a 5c 06 01 3a
>3a0028	0b 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 85 b3
>3a0038	c2 20 a5 a4 d0 06 e2 20 a5 a6 f0 11 c2 10 a4 a9
>3a0048	c4 a7 f0 09 e2 20 a5 b3 97 a4 c8 84 a9 28 2b 60
>3a0058	08 c2 10 e2 20 a9 01 20 1c 00 a2 00 00 a9 00 9f
>3a0068	00 4c 00 e8 e0 00 01 d0 f6 a2 00 00 20 14 00 c9
>3a0078	0d d0 03 4c cf 00 c9 9d d0 08 e0 00 00 f0 ed ca
>3a0088	80 39 c9 1d d0 0e bf 00 4c 00 f0 e0 e0 4f 00 f0
>3a0098	db e8 80 27 c9 08 d0 1a e0 00 00 f0 cf da bf 01
>3a00a8	4c 00 9f 00 4c 00 f0 06 e8 e0 ff 00 d0 f0 fa ca
>3a00b8	80 0e c9 20 90 b6 9f 00 4c 00 e8 20 18 00 80 ac
>3a00c8	a9 08 20 18 00 80 a5 a9 00 20 1c 00 28 60 22 4c
>3a00d8	10 00 60 20 14 00 48 20 18 00 68 60 08 e2 20 c9
>3a00e8	00 f0 08 af 10 00 af 09 01 80 06 af 10 00 af 29
>3a00f8	fe 8f 10 00 af 28 60 08 22 84 10 00 28 60 48 da
>3a0108	5a 0b 08 e2 20 c2 10 a2 00 00 a9 20 9f 00 a0 af
>3a0118	af 1e 00 00 9f 00 c0 af e8 e0 00 20 d0 ec 08 c2
>3a0128	20 48 a9 00 00 5b 68 28 a2 00 00 a0 00 00 22 84
>3a0138	10 00 28 2b 7a fa 68 60 da 5a 0b 08 08 c2 20 48
>3a0148	a9 00 08 5b 68 28 c2 30 af 0c 00 00 85 08 e2 20
>3a0158	af 0e 00 00 c2 20 29 ff 00 85 0a af 11 00 00 8f
>3a0168	08 01 00 af 1c 00 00 3a 8f 0a 01 00 18 a5 08 6f
>3a0178	0c 01 00 85 08 a5 0a 69 00 00 85 0a e2 20 af 0f
>3a0188	00 00 85 8d a0 00 00 a2 00 00 b7 08 9f 00 4f 00
>3a0198	e8 c8 c4 8d d0 f4 ca bf 00 4f 00 c9 20 d0 09 a9
>3a01a8	00 9f 00 4f 00 ca 10 ef 28 2b 7a fa 60 e2 20 a9
>3a01b8	48 8f 0f 00 00 a9 34 8f 13 00 00 a9 20 8f 08 00
>3a01c8	af 8f 09 00 af a2 00 00 a9 00 9f 10 f0 3a e8 e0
>3a01d8	40 00 d0 f6 a9 80 8f b2 08 00 e2 20 a9 00 8f 89
>3a01e8	0f 00 60 08 e2 20 48 48 a9 00 22 3c 10 00 68 22
>3a01f8	18 10 00 af 89 0f 00 29 01 d0 f8 68 28 60 08 e2
>3a0208	20 48 48 a9 01 22 3c 10 00 68 22 18 10 00 af 89
>3a0218	0f 00 29 01 d0 f8 68 28 60 08 c2 20 48 e2 20 a9
>3a0228	0d 20 18 00 c2 20 68 28 60 08 22 78 10 00 28 60
>3a0238	08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a5 b4
>3a0248	1a 85 b4 cf 13 00 00 90 05 20 14 00 64 b4 2b 28
>3a0258	60 da 5a 0b 08 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a0268	20 c2 10 8f b3 08 00 af b2 08 00 29 20 f0 07 af
>3a0278	b3 08 00 20 28 00 af b2 08 00 29 80 f0 07 af b3
>3a0288	08 00 20 eb 01 af b2 08 00 29 40 f0 14 af b3 08
>3a0298	00 20 06 02 af b3 08 00 c9 0d d0 05 a9 0a 20 06
>3a02a8	02 28 2b 7a fa 60 08 e2 20 bd 00 00 f0 06 20 18
>3a02b8	00 e8 80 f5 28 60 08 c2 20 48 48 4a 4a 4a 4a 4a
>3a02c8	4a 4a 4a 20 d8 02 68 29 ff 00 20 d8 02 68 28 60
>3a02d8	08 c2 20 48 e2 20 48 4a 4a 4a 4a 20 ef 02 68 20
>3a02e8	ef 02 c2 20 68 28 60 08 c2 30 da 29 0f 00 aa bf
>3a02f8	00 d0 3a 20 18 00 fa 28 60 08 c2 30 48 da 5a 8b
>3a0308	0b c2 30 a3 0b 18 69 03 00 aa e2 20 a9 3a 48 ab
>3a0318	bd 00 00 f0 06 20 eb 01 e8 80 f5 c2 30 2b ab 7a
>3a0328	fa 68 28 60 08 e2 20 c9 5b b0 04 c9 41 b0 0b c9
>3a0338	7b b0 04 c9 61 b0 03 28 18 60 28 38 60 08 e2 20
>3a0348	c9 3a b0 04 c9 30 b0 03 28 18 60 28 38 60 08 e2
>3a0358	20 c9 3a b0 04 c9 30 b0 13 c9 67 b0 04 c9 61 b0
>3a0368	0b c9 47 b0 04 c9 41 b0 03 28 18 60 28 38 60 08
>3a0378	e2 20 c9 3a b0 04 c9 30 b0 12 c9 67 b0 04 c9 61
>3a0388	b0 0f c9 47 b0 04 c9 41 b0 09 28 60 38 e9 30 80
>3a0398	f9 29 df 38 e9 37 80 f2 08 e2 20 c9 7b b0 06 c9
>3a03a8	61 90 02 29 df 28 60 08 e2 20 c2 10 bd 00 00 f0
>3a03b8	09 20 a0 03 9d 00 00 e8 80 f2 28 60 08 0b 08 c2
>3a03c8	20 48 a9 00 08 5b 68 28 c2 20 48 06 21 26 23 a5
>3a03d8	21 85 0c a5 23 85 0e 06 0c 26 0e 06 0c 26 0e 18
>3a03e8	a5 21 65 0c 85 21 a5 23 65 0e 85 23 68 2b 28 60
>3a03f8	08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 20 a5 21
>3a0408	8f 12 01 00 a9 0a 00 8f 10 01 00 af 14 01 00 85
>3a0418	21 64 23 af 16 01 00 85 27 64 29 e2 20 a9 00 85
>3a0428	25 85 2b 2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b
>3a0438	68 28 c2 20 a5 21 8f 12 01 00 a9 64 00 8f 10 01
>3a0448	00 af 14 01 00 85 21 64 23 af 16 01 00 85 27 64
>3a0458	29 e2 20 a9 00 85 25 85 2b 2b 28 60 08 c2 20 a5
>3a0468	21 d0 08 a5 23 d0 04 28 e2 02 60 28 c2 02 60 08
>3a0478	e2 20 a5 25 c9 00 d0 02 28 60 08 c2 20 48 a9 00
>3a0488	08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20 29 ff
>3a0498	00 20 86 18 e2 20 dc d2 08 08 e2 20 a5 25 c9 02
>3a04a8	d0 02 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a04b8	a9 04 8f d1 08 00 c2 20 29 ff 00 20 86 18 e2 20
>3a04c8	dc d2 08 08 e2 20 a5 25 c9 00 d0 08 c2 20 a5 23
>3a04d8	d0 21 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a04e8	a9 04 8f d1 08 00 c2 20 29 ff 00 20 86 18 e2 20
>3a04f8	dc d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a0508	09 8f d1 08 00 c2 20 29 ff 00 20 86 18 e2 20 dc
>3a0518	d2 08 08 e2 20 a5 25 c9 00 d0 0e a5 24 d0 29 a5
>3a0528	23 d0 25 a5 22 d0 21 28 60 08 c2 20 48 a9 00 08
>3a0538	5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00
>3a0548	20 86 18 e2 20 dc d2 08 08 c2 20 48 a9 00 08 5b
>3a0558	68 28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff 00 20
>3a0568	86 18 e2 20 dc d2 08 08 0b 08 c2 20 48 a9 00 08
>3a0578	5b 68 28 c2 30 64 21 64 23 e2 20 64 25 a7 00 c9
>3a0588	26 f0 44 e2 20 a7 00 20 45 03 90 76 20 c4 03 38
>3a0598	e9 30 c2 20 29 ff 00 18 65 21 85 21 a5 23 69 00
>3a05a8	00 85 23 20 2b 1b 80 db 08 c2 20 48 a9 00 08 5b
>3a05b8	68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00 20
>3a05c8	86 18 e2 20 dc d2 08 20 2b 1b a7 00 c9 48 f0 04
>3a05d8	c9 68 d0 d4 20 2b 1b e2 20 a7 00 20 56 03 90 22
>3a05e8	20 77 03 c2 20 06 21 26 23 06 21 26 23 06 21 26
>3a05f8	23 06 21 26 23 29 ff 00 18 65 21 85 21 20 2b 1b
>3a0608	80 d5 2b 28 60 08 c2 30 38 a5 04 e5 18 a8 e2 20
>3a0618	b7 18 f0 10 c9 20 f0 06 c9 09 f0 02 28 60 88 c0
>3a0628	ff ff d0 ec a9 00 60 08 0b 08 c2 20 48 a9 00 08
>3a0638	5b 68 28 c2 30 a5 18 85 00 e2 20 a5 1a 85 02 20
>3a0648	4c 1b a7 00 20 45 03 90 0c 20 6f 05 c2 20 a5 21
>3a0658	85 d5 20 4c 1b c2 20 a5 00 85 18 e2 20 a5 02 85
>3a0668	1a 20 7d 06 e2 20 20 ee 06 c9 00 f0 05 20 77 08
>3a0678	80 f4 2b 28 60 08 c2 20 a5 18 85 00 a5 1a 85 02
>3a0688	a2 00 00 e2 20 a0 00 00 e0 00 00 f0 0d b7 00 f0
>3a0698	53 c9 3a f0 04 c9 20 d0 33 c8 b7 00 f0 46 c9 52
>3a06a8	f0 10 c9 72 d0 26 b7 00 f0 3a c9 52 f0 04 c9 72
>3a06b8	d0 1a c8 b7 00 f0 2d c9 45 f0 04 c9 65 d0 0d c8
>3a06c8	b7 00 f0 20 c9 4d f0 0a c9 6d f0 06 e8 20 2b 1b
>3a06d8	80 b3 a7 00 c9 3a d0 03 20 2b 1b a9 03 85 1c a9
>3a06e8	8e 20 77 08 28 60 08 0b 08 c2 20 48 a9 00 08 5b
>3a06f8	68 28 e2 20 a9 7f 85 1c c2 10 20 2c 08 a5 1c d0
>3a0708	03 4c 91 07 c2 20 a5 18 85 00 e2 20 a5 1a 85 02
>3a0718	c2 20 64 04 64 06 e2 30 a0 00 b7 00 f0 da c9 8e
>3a0728	f0 d6 c8 c4 1c 90 f3 c2 10 a7 00 c9 22 d0 05 20
>3a0738	b3 07 80 28 a5 1c c9 01 f0 19 c2 20 a5 00 c5 18
>3a0748	d0 08 e2 20 a5 02 c5 1a f0 09 e2 20 a7 04 20 d6
>3a0758	3d b0 09 e2 20 20 c3 07 c9 00 d0 11 c2 20 a5 00
>3a0768	85 04 e2 20 a5 02 85 06 20 2b 1b 80 a9 c9 81 d0
>3a0778	18 20 0d 06 c9 00 f0 14 89 80 10 0b 20 18 09 c9
>3a0788	30 f0 04 a9 af 80 02 a9 81 2b 28 60 08 c2 20 48
>3a0798	a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20
>3a07a8	29 ff 00 20 86 18 e2 20 dc d2 08 08 e2 20 20 2b
>3a07b8	1b a7 00 f0 04 c9 22 d0 f5 28 60 08 0b c2 30 da
>3a07c8	5a 08 c2 20 48 a9 00 08 5b 68 28 a9 42 09 85 08
>3a07d8	e2 20 a9 3a 85 0a a2 80 00 e2 20 a0 01 00 b7 08
>3a07e8	f0 26 c5 1c d0 29 c2 30 a0 02 00 b7 08 85 0c e2
>3a07f8	20 a9 3a 85 0e e2 10 a0 00 b7 00 20 a0 03 d7 0c
>3a0808	d0 0d c8 c4 1c 90 f2 8a c2 10 7a fa 2b 28 60 c2
>3a0818	30 18 a5 08 69 08 00 85 08 e2 20 a5 0a 69 00 85
>3a0828	0a e8 80 b5 08 0b 8b 08 c2 20 48 a9 00 08 5b 68
>3a0838	28 c2 30 a9 42 09 85 08 a9 3a 00 85 0a 64 0c e2
>3a0848	20 a0 01 00 b7 08 f0 1d c5 1c b0 06 c5 0c 90 02
>3a0858	85 0c c2 20 18 a5 08 69 08 00 85 08 a5 0a 69 00
>3a0868	00 85 0a 80 da e2 20 a5 0c 85 1c ab 2b 28 60 08
>3a0878	0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 87 00 c2
>3a0888	20 18 a5 00 69 01 00 85 08 a5 02 69 00 00 85 0a
>3a0898	e2 10 a4 1c 88 e2 20 b7 08 87 08 f0 13 c2 20 18
>3a08a8	a5 08 69 01 00 85 08 a5 0a 69 00 00 85 0a 80 e5
>3a08b8	2b 28 60 08 c2 30 29 7f 00 0a 0a 0a 18 69 42 09
>3a08c8	aa 28 60 08 8b 0b 08 c2 20 48 a9 00 08 5b 68 28
>3a08d8	08 e2 20 48 a9 3a 48 ab 68 28 e2 20 c2 10 20 bb
>3a08e8	08 bd 00 00 c2 20 29 0f 00 2b ab 28 60 08 8b 0b
>3a08f8	08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 3a
>3a0908	48 ab 68 28 c2 30 20 bb 08 bd 04 00 2b ab 28 60
>3a0918	08 8b 0b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20
>3a0928	48 a9 3a 48 ab 68 28 e2 20 c2 10 20 bb 08 bd 00
>3a0938	00 c2 20 29 f0 00 2b ab 28 60 03 01 10 d0 59 21
>3a0948	00 00 03 01 12 d0 98 21 00 00 02 01 14 d0 a6 21
>3a0958	00 00 02 01 16 d0 bf 21 00 00 02 03 18 d0 d2 21
>3a0968	00 00 00 01 1c d0 00 00 00 00 04 01 1e d0 14 22
>3a0978	00 00 04 01 20 d0 4a 22 00 00 04 01 22 d0 2f 22
>3a0988	00 00 05 03 24 d0 03 22 00 00 06 03 28 d0 e5 21
>3a0998	00 00 07 02 2c d0 f4 21 00 00 ff 01 2f d0 00 00
>3a09a8	00 00 40 01 31 d0 00 00 00 00 20 03 33 d0 cf 2f
>3a09b8	00 00 20 05 37 d0 d4 33 00 00 20 03 3d d0 1f 33
>3a09c8	00 00 20 04 41 d0 bf 32 00 00 20 03 46 d0 b6 32
>3a09d8	00 00 20 02 4a d0 4e 32 00 00 50 04 4d d0 00 00
>3a09e8	00 00 50 04 52 d0 00 00 00 00 20 05 57 d0 91 31
>3a09f8	00 00 20 06 5d d0 0a 32 00 00 20 03 64 d0 e6 2f
>3a0a08	00 00 50 02 68 d0 00 00 00 00 50 04 6b d0 00 00
>3a0a18	00 00 20 04 70 d0 da 30 00 00 20 02 75 d0 e0 2f
>3a0a28	00 00 20 04 78 d0 e3 2f 00 00 50 05 7d d0 00 00
>3a0a38	00 00 50 05 83 d0 00 00 00 00 20 04 89 d0 dd 2f
>3a0a48	00 00 20 03 8e d0 15 33 00 00 20 04 92 d0 b0 2f
>3a0a58	00 00 20 04 97 d0 40 2f 00 00 20 05 9c d0 d6 2e
>3a0a68	00 00 20 05 a2 d0 63 2e 00 00 20 03 a8 d0 5f 2e
>3a0a78	00 00 20 04 ac d0 40 2d 00 00 20 04 b1 d0 52 2e
>3a0a88	00 00 20 07 b6 d0 56 2e 00 00 20 03 be d0 93 2c
>3a0a98	00 00 20 04 c2 d0 fc 2b 00 00 04 02 c7 d0 9d 22
>3a0aa8	00 00 04 02 ca d0 80 22 00 00 04 02 cd d0 65 22
>3a0ab8	00 00 30 01 d0 d0 6e 35 00 00 30 03 d2 d0 88 39
>3a0ac8	00 00 30 04 d6 d0 d8 39 00 00 30 05 db d0 69 3a
>3a0ad8	00 00 30 05 e1 d0 1b 3a 00 00 30 04 e7 d0 a8 3a
>3a0ae8	00 00 30 03 ec d0 fd 3a 00 00 30 03 f0 d0 42 3b
>3a0af8	00 00 30 03 f4 d0 cb 3b 00 00 30 03 f8 d0 54 3c
>3a0b08	00 00 30 03 fc d0 84 3c 00 00 30 04 00 d1 f7 38
>3a0b18	00 00 30 03 05 d1 96 38 00 00 30 04 09 d1 45 38
>3a0b28	00 00 30 03 0e d1 ef 37 00 00 30 05 12 d1 26 37
>3a0b38	00 00 30 06 18 d1 45 36 00 00 30 04 1f d1 90 35
>3a0b48	00 00 10 03 24 d1 12 3d 00 00 10 03 28 d1 dd 3c
>3a0b58	00 00 10 04 2c d1 9e 46 00 00 10 04 31 d1 29 3d
>3a0b68	00 00 10 03 36 d1 c5 43 00 00 20 05 3a d1 70 45
>3a0b78	00 00 10 04 40 d1 4b 46 00 00 20 05 45 d1 55 47
>3a0b88	00 00 20 03 4b d1 74 48 00 00 10 04 4f d1 e1 47
>3a0b98	00 00 20 06 54 d1 ea 48 00 00 20 04 5b d1 05 4a
>3a0ba8	00 00 10 07 60 d1 da 3c 00 00 20 03 68 d1 88 2b
>3a0bb8	00 00 20 05 6c d1 ba 2a 00 00 20 09 72 d1 1f 24
>3a0bc8	00 00 20 09 7c d1 ba 23 00 00 20 0a 86 d1 e8 23
>3a0bd8	00 00 20 07 91 d1 27 23 00 00 30 08 99 d1 99 34
>3a0be8	00 00 20 07 a2 d1 bc 22 00 00 30 08 aa d1 06 35
>3a0bf8	00 00 20 08 b3 d1 30 25 00 00 20 08 bc d1 8c 24
>3a0c08	00 00 20 06 c5 d1 c5 25 00 00 20 09 cc d1 7b 26
>3a0c18	00 00 20 04 d6 d1 0e 28 00 00 20 04 db d1 54 28
>3a0c28	00 00 20 04 e0 d1 ba 28 00 00 20 06 e5 d1 60 29
>3a0c38	00 00 20 08 ec d1 ed 29 00 00 20 0a f5 d1 21 2a
>3a0c48	00 00 00 00 00 00 00 00 00 00 08 0b 08 c2 20 48
>3a0c58	a9 00 08 5b 68 28 c2 30 a9 ff ff 85 b8 e2 20 a9
>3a0c68	37 85 ba c2 20 64 b5 64 bb e2 20 64 b7 64 bd 2b
>3a0c78	28 60 5a 08 e2 20 85 e8 c2 10 86 8d c2 20 a5 0e
>3a0c88	48 a5 0c 48 a5 12 48 a5 10 48 20 2a 0d b0 03 20
>3a0c98	ae 0c 20 b6 0e c2 20 68 85 10 68 85 12 68 85 0c
>3a0ca8	68 85 0e 28 7a 60 08 0b 08 c2 20 48 a9 00 08 5b
>3a0cb8	68 28 e2 20 a6 8d ca 86 0c e8 c2 30 38 a5 b8 e5
>3a0cc8	0c 85 be e2 20 a5 ba e9 00 85 c0 20 b6 0e e2 20
>3a0cd8	a5 e8 a0 00 00 97 c1 a9 00 a0 01 00 97 c1 a0 02
>3a0ce8	00 97 c1 c2 20 a9 00 00 97 c1 c2 20 18 a5 b8 69
>3a0cf8	01 00 a0 05 00 97 c1 e2 20 c8 c8 a5 ba 69 00 97
>3a0d08	c1 c2 20 a5 be 85 b5 e2 20 a5 c0 85 b7 c2 20 38
>3a0d18	a5 c1 e9 01 00 85 b8 e2 20 a5 c3 e9 00 85 ba 2b
>3a0d28	28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30
>3a0d38	c2 20 a5 bb 85 c7 e2 20 a5 bd 85 c9 a5 c7 d0 17
>3a0d48	e2 20 a5 c9 d0 11 c2 20 a9 00 00 85 cd e2 20 a9
>3a0d58	00 85 cf 2b 28 18 60 c2 20 a0 05 00 b7 c7 85 ca
>3a0d68	e2 20 c8 c8 b7 c7 85 cc c2 20 18 a5 c7 65 8d 85
>3a0d78	0c e2 20 a5 c9 69 00 85 0e c2 20 18 a5 0c 69 08
>3a0d88	00 85 0c e2 20 a5 0e 69 00 85 0e c2 20 a5 0c c5
>3a0d98	ca d0 28 e2 20 a5 0e c5 cc d0 20 c2 20 a5 cd d0
>3a0da8	5d e2 20 a5 cf d0 57 c2 20 a0 02 00 b7 c7 85 bb
>3a0db8	e2 20 c8 c8 b7 c7 85 bd 4c 67 0e c2 20 a5 0c 69
>3a0dc8	08 00 85 10 e2 20 a5 0e 69 00 85 12 e2 20 a5 c4
>3a0dd8	c5 10 b0 3e 90 08 c2 20 a5 c4 c5 10 b0 34 c2 20
>3a0de8	a5 c7 85 cd e2 20 a5 c9 85 cf c2 20 a0 02 00 b7
>3a0df8	cd 85 c7 e2 20 c8 c8 b7 cd 85 c9 4c 44 0d c2 20
>3a0e08	a0 02 00 b7 c7 97 cd e2 20 c8 c8 b7 c7 97 cd 4c
>3a0e18	67 0e c2 20 a0 05 00 b7 c7 97 0c e2 20 c8 c8 b7
>3a0e28	c7 97 0c c2 20 a0 02 00 b7 c7 97 0c e2 20 c8 c8
>3a0e38	b7 c7 97 0c c2 20 a5 cd d0 14 e2 20 a5 cd d0 0e
>3a0e48	c2 20 a5 0c 85 bb e2 20 a5 0e 85 bd 80 11 c2 20
>3a0e58	a0 02 00 a5 0c 97 cd e2 20 c8 c8 a5 0e 97 cd c2
>3a0e68	20 a5 c7 85 c1 e2 20 a5 c9 85 c3 c2 20 a5 c1 85
>3a0e78	b5 e2 20 a5 c3 85 b7 c2 20 a0 05 00 a5 0c 97 c1
>3a0e88	e2 20 c8 c8 a5 0e 97 c1 c2 20 a0 02 00 a9 00 00
>3a0e98	97 c1 e2 20 c8 c8 97 c1 e2 20 a5 e8 e2 20 a0 00
>3a0ea8	00 97 c1 a0 01 00 a9 00 97 c1 2b 28 38 60 08 c2
>3a0eb8	20 38 a5 be e9 08 00 85 c1 e2 20 a5 c0 e9 00 85
>3a0ec8	c3 28 60 08 e2 20 a5 c3 f0 04 c9 38 b0 12 c2 20
>3a0ed8	a5 c1 f0 0c e2 20 a0 01 00 b7 c1 1a 97 c1 28 60
>3a0ee8	00 ea 08 e2 20 a5 c3 f0 04 c9 38 b0 17 c2 20 a5
>3a0ef8	c1 f0 11 e2 20 a0 01 00 b7 c1 3a 97 c1 d0 03 20
>3a0f08	0e 0f 28 60 00 ea 08 c2 20 a5 bb d0 21 e2 20 a5
>3a0f18	bd d0 1b a5 c3 85 bd c2 20 a5 c1 85 bb a9 00 00
>3a0f28	a0 02 00 97 c1 c8 c8 e2 20 97 c1 4c f5 0f e2 20
>3a0f38	a5 bd c5 c3 90 28 c2 20 a5 bb c5 c1 90 20 c2 20
>3a0f48	a5 bb a0 02 00 97 c1 e2 20 c8 c8 a5 bd 97 c1 c2
>3a0f58	20 a5 c1 85 bb e2 20 a5 c3 85 bd 4c f5 0f c2 20
>3a0f68	a5 bb 85 08 e2 20 a5 bd 85 0a e2 20 a0 04 00 b7
>3a0f78	08 c5 c6 90 32 d0 0b c2 20 a0 02 00 b7 08 c5 c4
>3a0f88	90 25 c2 20 a0 02 00 b7 08 97 c1 e2 20 c8 c8 b7
>3a0f98	08 97 c1 c2 20 a5 c1 a0 02 00 97 08 e2 20 a5 c3
>3a0fa8	c8 c8 97 08 4c f5 0f c2 20 a0 02 00 b7 08 d0 08
>3a0fb8	e2 20 c8 c8 b7 08 f0 19 c2 20 a0 02 00 b7 08 85
>3a0fc8	0c e2 20 c8 c8 b7 08 85 0a c2 20 a5 0c 85 08 80
>3a0fd8	99 c2 20 a5 c1 a0 02 00 97 08 e2 20 c8 c8 a5 c3
>3a0fe8	97 08 a9 00 97 c1 c2 20 a0 02 00 97 c1 20 fa 0f
>3a0ff8	28 60 08 c2 20 a5 bb 85 c1 e2 20 a5 bd 85 c3 c2
>3a1008	20 a5 c1 d0 09 e2 20 a5 c3 d0 03 4c 9d 10 c2 20
>3a1018	a0 02 00 b7 c1 85 0c e2 20 c8 c8 b7 c1 85 0e c2
>3a1028	20 a0 05 00 b7 c1 85 10 e2 20 c8 c8 b7 c1 85 12
>3a1038	c2 20 a5 0c c5 10 d0 08 e2 20 a5 0e c5 12 f0 1f
>3a1048	c2 20 a0 02 00 b7 c1 85 0c e2 20 c8 c8 b7 c1 85
>3a1058	0e c2 20 a5 0c 85 c1 e2 20 a5 0e 85 c3 80 a0 c2
>3a1068	20 a0 02 00 b7 c1 85 0c e2 20 c8 c8 b7 c1 85 0e
>3a1078	c2 20 a0 02 00 b7 0c 97 c1 e2 20 c8 c8 b7 0c 97
>3a1088	c1 c2 20 a0 05 00 b7 0c 97 c1 e2 20 c8 c8 b7 0c
>3a1098	97 c1 4c 16 10 28 60 08 c2 10 e2 20 64 14 a5 e0
>3a10a8	1a 1a 85 15 e2 20 a5 e1 85 16 c5 ba 90 29 f0 08
>3a10b8	c2 20 a5 14 c5 b8 90 1f 08 c2 20 48 a9 00 08 5b
>3a10c8	68 28 e2 20 a9 03 8f d1 08 00 c2 20 29 ff 00 20
>3a10d8	86 18 e2 20 dc d2 08 28 60 c9 00 d0 05 c0 01 00
>3a10e8	f0 05 09 30 97 14 c8 60 08 c2 30 64 0c a5 23 10
>3a10f8	1a 18 a5 21 49 ff ff 69 01 00 85 21 a5 23 49 ff
>3a1108	ff 69 00 00 85 23 a9 ff ff 85 0c 64 10 64 12 a2
>3a1118	1f 00 f8 06 21 26 23 a5 10 65 10 85 10 a5 12 65
>3a1128	12 85 12 ca 10 ed d8 e2 20 20 9f 10 a0 00 00 a5
>3a1138	0c f0 04 a9 2d 80 02 a9 20 97 14 c8 a2 03 00 b5
>3a1148	10 29 f0 4a 4a 4a 4a 20 e1 10 b5 10 29 0f 20 e1
>3a1158	10 ca 10 eb c0 01 00 d0 0c a9 20 87 14 a0 01 00
>3a1168	a9 30 97 14 c8 a9 00 97 14 28 60 00 ea 08 e2 20
>3a1178	c2 10 a0 00 00 bd 00 00 f0 04 e8 c8 80 f7 28 60
>3a1188	08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 c2
>3a1198	10 08 c2 20 48 e2 20 a5 23 48 ab c2 20 68 28 a6
>3a11a8	21 20 75 11 84 0c 08 c2 20 48 e2 20 a5 29 48 ab
>3a11b8	c2 20 68 28 a6 27 20 75 11 c2 20 98 38 65 0c aa
>3a11c8	e2 20 a9 02 20 7a 0c c2 20 a5 b5 85 08 e2 20 a5
>3a11d8	b7 85 0a a0 00 00 08 c2 20 48 e2 20 a5 23 48 ab
>3a11e8	c2 20 68 28 a6 21 bd 00 00 f0 06 97 08 e8 c8 80
>3a11f8	f5 e2 20 08 c2 20 48 e2 20 a5 29 48 ab c2 20 68
>3a1208	28 a6 27 bd 00 00 97 08 f0 04 e8 c8 80 f5 c2 20
>3a1218	a5 08 85 21 e2 20 a5 0a 85 23 a9 02 85 25 ab 2b
>3a1228	28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 c2
>3a1238	30 08 c2 20 48 e2 20 a5 23 48 ab c2 20 68 28 a6
>3a1248	21 20 75 11 98 aa e8 e2 20 a9 02 20 7a 0c c2 20
>3a1258	a5 be 85 08 e2 20 a5 c0 85 0a a0 00 00 b7 21 97
>3a1268	08 f0 03 c8 80 f7 a5 08 85 21 a5 09 85 22 a5 0a
>3a1278	85 23 a9 00 85 24 ab 2b 28 60 08 e2 20 c2 10 a0
>3a1288	00 00 b7 21 f0 05 c8 80 f9 84 90 c2 30 c4 27 90
>3a1298	13 f0 11 a5 8d 30 0d f0 0b c4 8d b0 12 a5 27 d0
>3a12a8	0e 4c 03 13 20 9f 10 e2 20 a9 00 87 14 80 39 20
>3a12b8	9f 10 c2 30 18 a5 21 65 27 85 21 a5 23 69 00 00
>3a12c8	85 23 a0 00 00 e2 20 a7 21 97 14 f0 1b c2 20 18
>3a12d8	a5 21 69 01 00 85 21 a5 23 69 00 00 85 23 c8 c4
>3a12e8	8d d0 e2 a9 00 00 97 14 c2 20 a5 14 85 21 a5 16
>3a12f8	85 23 e2 20 a9 02 85 25 20 2a 12 28 60 48 5a 0b
>3a1308	08 08 c2 20 48 a9 00 08 5b 68 28 c2 30 a9 00 00
>3a1318	85 00 85 18 a9 36 00 85 02 85 1a ad 8a 0f 30 20
>3a1328	a0 02 00 b7 18 f0 0f c5 53 90 10 c5 57 f0 02 b0
>3a1338	05 20 67 13 80 e5 28 2b 7a 68 60 20 08 1c 80 db
>3a1348	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 01 8f d1
>3a1358	08 00 c2 20 29 ff 00 20 86 18 e2 20 dc d2 08 08
>3a1368	c2 30 85 21 64 23 20 f0 10 a5 14 1a 85 21 a5 16
>3a1378	85 23 20 49 34 18 a5 18 69 04 00 85 00 a5 1a 69
>3a1388	00 00 85 02 e2 20 a9 20 20 18 00 c2 20 20 a6 13
>3a1398	90 fb e2 20 a9 0d 20 18 00 20 08 1c 28 60 08 0b
>3a13a8	8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9
>3a13b8	00 48 ab 68 28 e2 20 c2 10 a7 00 f0 3a 30 05 20
>3a13c8	18 00 80 29 c2 20 29 7f 00 0a 0a 0a 18 69 42 09
>3a13d8	85 08 a9 3a 00 69 00 00 85 0a 08 e2 20 48 a9 3a
>3a13e8	48 ab 68 28 a0 02 00 b7 08 aa 20 ae 02 c2 20 20
>3a13f8	2b 1b ab 2b 28 18 60 ab 2b 28 38 60 08 c2 20 a9
>3a1408	ff 6f 85 1d a9 ff 7f 85 1f a9 ff ff 85 21 85 23
>3a1418	85 27 85 29 e2 20 85 25 85 2b 28 60 08 0b 8b 08
>3a1428	c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48
>3a1438	ab 68 28 c2 30 5a a4 1d bd 00 00 99 00 00 bd 02
>3a1448	00 99 02 00 e2 20 bd 04 00 99 04 00 c2 20 38 98
>3a1458	e9 05 00 85 1d 7a ab 2b 28 60 08 0b 8b 08 c2 20
>3a1468	48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68
>3a1478	28 c2 30 5a 18 a5 1d 69 05 00 85 1d a8 b9 00 00
>3a1488	9d 00 00 b9 02 00 9d 02 00 e2 20 b9 04 00 9d 04
>3a1498	00 bd 00 00 7a ab 2b 28 60 08 0b 8b 08 c2 20 48
>3a14a8	a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28
>3a14b8	e2 20 c2 10 5a a4 1f 99 00 00 88 84 1f 7a ab 2b
>3a14c8	28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08
>3a14d8	e2 20 48 a9 00 48 ab 68 28 e2 20 c2 10 5a a4 1f
>3a14e8	c8 84 1f b9 00 00 c2 20 29 ff 00 7a ab 2b 28 60
>3a14f8	08 e2 20 a9 01 20 a1 14 28 60 5a 08 8b 08 e2 20
>3a1508	48 a9 00 48 ab 68 28 e2 20 a4 1f b9 01 00 c9 01
>3a1518	d0 08 c2 20 e6 1f ab 28 7a 60 08 c2 20 48 a9 00
>3a1528	08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff
>3a1538	00 20 86 18 e2 20 dc d2 08 08 0b 8b c2 20 48 08
>3a1548	c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48
>3a1558	ab 68 28 e2 20 c2 10 a4 1f c0 ff 7f f0 11 20 cb
>3a1568	08 85 0c b9 01 00 20 cb 08 c5 0c f0 02 90 08 c2
>3a1578	20 68 ab 2b 28 18 60 c2 20 68 ab 2b 28 38 60 4c
>3a1588	6f 05 08 e2 20 a9 00 8f 00 4d 00 a2 01 00 20 34
>3a1598	17 20 cb 04 c2 20 a5 21 9f 00 4d 00 e2 20 af 00
>3a15a8	4d 00 1a 30 3e 8f 00 4d 00 e8 e8 20 4c 1b e2 20
>3a15b8	a7 00 c9 8d f0 09 c9 2c d0 0a 20 2b 1b 80 cf 20
>3a15c8	2b 1b 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a15d8	a9 02 8f d1 08 00 c2 20 29 ff 00 20 86 18 e2 20
>3a15e8	dc d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a15f8	0a 8f d1 08 00 c2 20 29 ff 00 20 86 18 e2 20 dc
>3a1608	d2 08 08 20 54 40 90 23 e2 20 a5 e8 29 80 d0 06
>3a1618	20 aa 3e 4c 31 16 e2 20 a9 8c 20 38 1c 20 f8 14
>3a1628	20 8a 15 20 3b 43 20 02 15 28 60 08 c2 20 48 a9
>3a1638	00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29
>3a1648	ff 00 20 86 18 e2 20 dc d2 08 08 0b 08 c2 20 48
>3a1658	a9 00 08 5b 68 28 e2 20 c2 10 20 2b 1b a0 00 00
>3a1668	b7 00 f0 24 c9 22 f0 03 c8 80 f5 84 0c e2 20 a9
>3a1678	02 a6 0c e8 20 7a 0c a0 00 00 c4 0c f0 29 a7 00
>3a1688	97 be c8 20 2b 1b 80 f2 08 c2 20 48 a9 00 08 5b
>3a1698	68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00 20
>3a16a8	86 18 e2 20 dc d2 08 a9 00 97 be c2 20 a5 be 85
>3a16b8	21 e2 20 a5 c0 85 23 a9 02 85 25 20 2b 1b 2b 28
>3a16c8	60 08 e2 20 a7 00 c2 20 29 ff 00 20 f5 08 85 2d
>3a16d8	20 f8 14 08 e2 20 48 a9 00 48 ab 68 28 20 ed 16
>3a16e8	20 02 15 28 60 20 2b 1b 6c 2d 08 08 0b 8b c2 20
>3a16f8	48 08 c2 20 48 a9 00 08 5b 68 28 c2 30 a2 27 08
>3a1708	20 62 14 a2 21 08 20 62 14 20 ca 14 20 f5 08 85
>3a1718	2d 08 e2 20 48 a9 00 48 ab 68 28 20 31 17 a2 21
>3a1728	08 20 24 14 68 ab 2b 28 60 6c 2d 08 08 08 c2 20
>3a1738	48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68
>3a1748	28 c2 10 da e2 20 a7 00 d0 03 4c f7 17 30 33 c9
>3a1758	20 d0 03 4c f1 17 c9 3a b0 04 c9 30 b0 56 c9 26
>3a1768	f0 52 c9 22 d0 03 4c 0a 18 c9 5b b0 07 c9 41 90
>3a1778	03 4c 16 18 c9 7b b0 07 c9 61 90 03 4c 16 18 4c
>3a1788	f7 17 c9 8c f0 40 c9 8d f0 41 20 18 09 c9 30 d0
>3a1798	0c 20 c9 16 a2 21 08 20 24 14 4c 4c 17 c9 00 d0
>3a17a8	4e a7 00 a6 1f e0 ff 7f f0 05 20 41 15 b0 12 20
>3a17b8	a1 14 80 35 c2 20 20 87 15 a2 21 08 20 24 14 80
>3a17c8	83 20 f3 16 80 dd 20 a1 14 80 1e e2 20 a4 1f c0
>3a17d8	ff 7f f0 46 a4 1f b9 01 00 c9 01 f0 3d c9 8c f0
>3a17e8	05 20 f3 16 80 ee 20 ca 14 20 2b 1b 4c 4c 17 a6
>3a17f8	1f e0 ff 7f b0 24 bd 01 00 c9 01 f0 1d 20 f3 16
>3a1808	80 ed 20 52 16 a2 21 08 20 24 14 4c 4c 17 20 0a
>3a1818	16 a2 21 08 20 24 14 4c 4c 17 a2 21 08 20 62 14
>3a1828	fa 28 60 08 0b 8b 08 e2 20 48 a9 00 48 ab 68 28
>3a1838	08 c2 20 48 a9 00 08 5b 68 28 c2 30 a9 fd 5f 85
>3a1848	31 ab 2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68
>3a1858	28 c2 30 92 31 c6 31 c6 31 2b 28 60 08 c2 30 29
>3a1868	ff 00 20 4d 18 28 60 08 0b 08 c2 20 48 a9 00 08
>3a1878	5b 68 28 c2 30 e6 31 e6 31 b2 31 2b 28 60 8b 0b
>3a1888	08 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9
>3a1898	00 48 ab 68 28 c2 20 85 21 a9 00 00 85 23 e2 20
>3a18a8	a9 00 85 25 85 e8 a9 3a 85 e7 c2 20 a9 e0 18 85
>3a18b8	e5 20 f1 3f c2 20 a5 d5 85 21 a5 d7 85 23 e2 20
>3a18c8	a9 00 85 25 85 e8 a9 3a 85 e7 c2 20 a9 e4 18 85
>3a18d8	e5 20 f1 3f 28 2b ab 60 45 52 52 00 45 52 4c 00
>3a18e8	e2 20 c2 10 20 21 02 af d1 08 00 0a c2 20 29 ff
>3a18f8	00 a8 08 e2 20 48 a9 3a 48 ab 68 28 be 3a 19 20
>3a1908	ae 02 c2 20 a5 d5 f0 27 a2 68 19 20 ae 02 08 e2
>3a1918	20 48 a9 00 48 ab 68 28 c2 20 af d5 08 00 8f 21
>3a1928	08 00 a9 00 00 8f 23 08 00 20 69 34 20 21 02 4c
>3a1938	0e 21 6c 19 6f 19 75 19 82 19 90 19 9e 19 b1 19
>3a1948	c7 19 d7 19 e6 19 f3 19 04 1a 13 1a 20 1a 2e 1a
>3a1958	3d 1a 4e 1a 67 1a 7b 1a 8f 1a a5 1a b9 1a d4 1a
>3a1968	20 61 74 00 4f 4b 00 42 72 65 61 6b 00 53 79 6e
>3a1978	74 61 78 20 65 72 72 6f 72 00 4f 75 74 20 6f 66
>3a1988	20 6d 65 6d 6f 72 79 00 54 79 70 65 20 6d 69 73
>3a1998	6d 61 74 63 68 00 56 61 72 69 61 62 6c 65 20 6e
>3a19a8	6f 74 20 66 6f 75 6e 64 00 4c 69 6e 65 20 6e 75
>3a19b8	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64 00 53
>3a19c8	74 61 63 6b 20 75 6e 64 65 72 66 6c 6f 77 00 53
>3a19d8	74 61 63 6b 20 6f 76 65 72 66 6c 6f 77 00 4f 75
>3a19e8	74 20 6f 66 20 72 61 6e 67 65 00 49 6c 6c 65 67
>3a19f8	61 6c 20 61 72 67 75 6d 65 6e 74 00 46 69 6c 65
>3a1a08	20 6e 6f 74 20 66 6f 75 6e 64 00 4e 6f 74 20 61
>3a1a18	20 6e 75 6d 62 65 72 00 4d 61 74 68 20 6f 76 65
>3a1a28	72 66 6c 6f 77 00 4d 61 74 68 20 75 6e 64 65 72
>3a1a38	66 6c 6f 77 00 44 69 76 69 73 69 6f 6e 20 62 79
>3a1a48	20 7a 65 72 6f 00 55 6e 61 62 6c 65 20 74 6f 20
>3a1a58	72 65 61 64 20 64 69 72 65 63 74 6f 72 79 00 55
>3a1a68	6e 61 62 6c 65 20 74 6f 20 6c 6f 61 64 20 66 69
>3a1a78	6c 65 00 55 6e 61 62 6c 65 20 74 6f 20 73 61 76
>3a1a88	65 20 66 69 6c 65 00 55 6e 61 62 6c 65 20 74 6f
>3a1a98	20 64 65 6c 65 74 65 20 66 69 6c 65 00 43 6f 75
>3a1aa8	6c 64 20 6e 6f 74 20 66 69 6e 64 20 66 69 6c 65
>3a1ab8	00 43 6f 75 6c 64 20 6e 6f 74 20 75 70 64 61 74
>3a1ac8	65 20 64 69 72 65 63 74 6f 72 79 00 43 6f 75 6c
>3a1ad8	64 20 6e 6f 74 20 63 6f 70 79 20 74 68 65 20 66
>3a1ae8	69 6c 65 00 08 0b 08 c2 20 48 a9 00 08 5b 68 28
>3a1af8	e2 20 a9 00 85 d0 2b 28 60 0b 08 08 c2 20 48 a9
>3a1b08	00 08 5b 68 28 08 c2 20 a9 e8 18 8f d2 08 00 e2
>3a1b18	20 a9 3a 8f d4 08 00 28 20 15 33 20 56 2e 64 2f
>3a1b28	28 2b 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2
>3a1b38	20 18 a5 00 69 01 00 85 00 e2 20 a5 02 69 00 85
>3a1b48	02 2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28
>3a1b58	e2 20 a7 00 f0 0f c9 20 f0 06 c9 09 f0 02 80 05
>3a1b68	20 2b 1b 80 ed 2b 28 60 08 e2 20 a7 00 f0 09 c9
>3a1b78	3a f0 05 20 2b 1b 80 f3 28 60 08 e2 20 64 34 a7
>3a1b88	00 f0 19 c5 35 f0 2c c9 98 f0 1e c9 9c f0 1a c9
>3a1b98	9b f0 1a c9 9d f0 16 20 2b 1b 80 e3 20 08 1c c2
>3a1ba8	20 a5 d5 f0 1d e2 20 80 d6 e6 34 80 ea c6 34 30
>3a1bb8	30 80 e4 a5 33 30 06 a5 34 f0 02 80 da 20 2b 1b
>3a1bc8	28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>3a1bd8	8f d1 08 00 c2 20 29 ff 00 20 86 18 e2 20 dc d2
>3a1be8	08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a1bf8	d1 08 00 c2 20 29 ff 00 20 86 18 e2 20 dc d2 08
>3a1c08	08 c2 30 a0 00 00 b7 18 85 0c 18 a5 18 65 0c 85
>3a1c18	18 a5 1a 69 00 00 85 1a a0 02 00 b7 18 85 d5 18
>3a1c28	a5 18 69 04 00 85 00 a5 1a 69 00 00 85 02 28 60
>3a1c38	08 e2 20 48 20 4c 1b 68 e2 20 c7 00 d0 08 20 2b
>3a1c48	1b 20 4c 1b 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a1c58	e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00 20 86 18
>3a1c68	e2 20 dc d2 08 08 e2 20 20 4c 1b e2 20 a7 00 f0
>3a1c78	10 c9 3a f0 0c c5 35 f0 05 20 2b 1b 80 ef 28 38
>3a1c88	60 28 18 60 5a 08 e2 20 a0 00 00 b7 00 f0 0d c9
>3a1c98	3a f0 07 c9 20 d0 05 c8 80 f1 a9 00 28 7a 60 08
>3a1ca8	0b 8b 08 c2 20 48 a9 00 08 5b 68 28 20 04 14 e2
>3a1cb8	20 a9 00 85 da ad 8a 0f 30 4b a7 00 c9 3a d0 03
>3a1cc8	20 2b 1b 20 4c 1b a7 00 d0 03 4c 57 1d 20 2c 03
>3a1cd8	b0 52 a7 00 10 10 20 18 09 85 0c c9 20 d0 03 4c
>3a1ce8	45 1d a5 d0 f0 51 08 c2 20 48 a9 00 08 5b 68 28
>3a1cf8	e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00 20 86 18
>3a1d08	e2 20 dc d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a1d18	20 a9 01 8f d1 08 00 c2 20 29 ff 00 20 86 18 e2
>3a1d28	20 dc d2 08 20 1f 33 4c 57 1d 08 e2 20 48 a9 00
>3a1d38	48 ab 68 28 6c 2d 08 a5 0c c9 10 d0 a9 a7 00 20
>3a1d48	f5 08 c2 20 85 2d 20 04 14 20 2b 1b 20 32 1d ab
>3a1d58	2b 28 60 08 58 20 ec 1a 20 2b 18 e2 20 9c 8a 0f
>3a1d68	c2 20 a5 18 85 00 a5 1a 85 02 4c 99 1d 08 c2 20
>3a1d78	a0 02 00 b7 18 85 d5 e2 20 a5 da c9 03 f0 12 c2
>3a1d88	20 18 a5 18 69 04 00 85 00 e2 20 a5 1a 69 00 85
>3a1d98	02 c2 20 20 a7 1c e2 20 a5 da c9 03 f0 f3 c9 00
>3a1da8	d0 31 e2 20 20 4c 1b a7 00 f0 28 c9 3a f0 1f 08
>3a1db8	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08
>3a1dc8	00 c2 20 29 ff 00 20 86 18 e2 20 dc d2 08 20 2b
>3a1dd8	1b 80 be 28 60 08 58 e2 20 a9 80 85 d0 9c 8a 0f
>3a1de8	20 2b 18 c2 30 64 2f a0 02 00 b7 18 f0 29 20 75
>3a1df8	1d e2 20 a5 da c9 01 f0 1e c9 02 f0 ea c9 03 f0
>3a1e08	e6 c2 20 a0 00 00 18 a5 18 77 18 85 18 e2 20 a5
>3a1e18	1a 69 00 85 1a 80 d0 e2 20 a9 00 85 d0 28 60 08
>3a1e28	c2 30 c2 20 a9 00 00 85 08 a9 36 00 85 0a c2 20
>3a1e38	a0 02 00 b7 08 f0 31 c5 21 f0 1e b0 2b c2 20 a0
>3a1e48	00 00 18 a5 08 77 08 85 0c e2 20 a5 0a 69 00 85
>3a1e58	0a c2 20 a5 0c 85 08 80 d7 c2 20 a5 08 85 18 e2
>3a1e68	20 a5 0a 85 1a 28 38 60 28 18 60 08 e2 20 a7 0c
>3a1e78	87 08 c2 20 a5 0c c5 00 d0 08 e2 20 a5 0e c5 02
>3a1e88	f0 26 c2 20 18 a5 0c 69 01 00 85 0c e2 20 a5 0e
>3a1e98	69 00 85 0e c2 20 18 a5 08 69 01 00 85 08 e2 20
>3a1ea8	a5 0a 69 00 85 0a 80 c4 28 60 08 e2 20 a7 0c 87
>3a1eb8	08 c2 20 a5 0c c5 00 d0 06 a5 0e c5 02 f0 26 c2
>3a1ec8	20 38 a5 0c e9 01 00 85 0c e2 20 a5 0e e9 00 85
>3a1ed8	0e c2 20 38 a5 08 e9 01 00 85 08 e2 20 a5 0a e9
>3a1ee8	00 85 0a 80 c6 28 60 08 a0 00 00 c2 20 18 a5 08
>3a1ef8	77 08 85 0c e2 20 a5 0a 69 00 85 0e c2 20 18 a5
>3a1f08	d7 69 04 00 85 00 e2 20 a5 d9 69 00 85 02 a0 00
>3a1f18	00 c2 20 38 a5 d7 f7 08 85 d7 e2 20 a5 d9 e9 00
>3a1f28	85 d9 20 73 1e 20 15 33 28 60 08 08 c2 20 48 a9
>3a1f38	00 08 5b 68 28 c2 30 a0 02 00 97 d7 18 a5 d7 69
>3a1f48	04 00 85 08 e2 20 a5 d9 69 00 85 0a e2 20 a0 00
>3a1f58	00 b7 18 97 08 f0 03 c8 80 f7 c2 20 98 18 69 05
>3a1f68	00 85 0c c2 20 a0 00 00 a5 0c 97 d7 c2 20 18 a5
>3a1f78	d7 65 0c 85 0c e2 20 a5 d9 69 00 85 d9 c2 20 a5
>3a1f88	0c 85 d7 c2 20 a0 00 00 a9 00 00 97 d7 c8 c0 05
>3a1f98	00 d0 f8 20 15 33 28 60 0b 08 08 c2 20 48 a9 00
>3a1fa8	08 5b 68 28 c2 30 a9 00 00 85 08 a9 36 00 85 0a
>3a1fb8	a0 02 00 b7 08 f0 1d c5 d5 f0 25 b0 1d a0 00 00
>3a1fc8	18 a5 08 77 08 85 0c a5 0a 69 00 00 85 0a a5 0c
>3a1fd8	85 08 80 dc a9 00 00 28 2b 60 a9 01 00 28 2b 60
>3a1fe8	a9 02 00 28 2b 60 08 c2 30 a9 05 00 85 10 a0 00
>3a1ff8	00 e2 20 b7 18 f0 07 c2 20 e6 10 c8 80 f3 c2 20
>3a2008	a5 08 85 00 a5 0a 85 02 18 a5 d7 69 04 00 85 0c
>3a2018	a5 d9 69 00 00 85 0e 18 a5 d7 65 10 85 d7 a5 d9
>3a2028	69 00 00 85 d9 18 a5 d7 69 04 00 85 08 a5 d9 69
>3a2038	00 00 85 0a 20 b2 1e c2 20 a5 10 a0 00 00 97 00
>3a2048	a5 d5 a0 02 00 97 00 18 a5 00 69 04 00 85 00 a5
>3a2058	02 69 00 00 85 02 a0 00 00 e2 20 b7 18 97 00 f0
>3a2068	03 c8 80 f7 20 15 33 28 60 08 c2 30 85 d5 20 a0
>3a2078	1f c9 00 00 f0 2c c9 01 00 f0 22 c2 20 a5 08 48
>3a2088	a5 0a 48 20 ef 1e 68 85 0a 68 85 08 a5 18 85 00
>3a2098	a5 1a 85 02 20 4c 1b e2 20 a7 00 f0 0a 20 ee 1f
>3a20a8	80 05 a5 d5 20 32 1f 28 60 8b 08 08 e2 20 48 a9
>3a20b8	3a 48 ab 68 28 a2 00 d2 20 ae 02 28 ab 60 08 e2
>3a20c8	30 a9 01 20 1c 00 20 db 00 f0 06 c9 0d f0 02 80
>3a20d8	f5 28 60 0b 08 08 c2 20 48 a9 00 08 5b 68 28 c2
>3a20e8	30 64 d5 a9 00 4f 85 18 a9 00 00 85 1a 20 2f 06
>3a20f8	c2 20 a5 d5 d0 05 20 5b 1d 80 07 20 71 20 28 2b
>3a2108	38 60 28 2b 18 60 c2 30 a2 ff fe 9a 20 b1 20 20
>3a2118	08 00 20 0c 00 a9 00 00 20 1c 00 20 db 20 b0 ef
>3a2128	80 ea e2 20 a5 25 c5 2b d0 06 c2 20 29 ff 00 60
>3a2138	c2 20 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>3a2148	8f d1 08 00 c2 20 29 ff 00 20 86 18 e2 20 dc d2
>3a2158	08 20 2a 21 c2 20 c9 00 00 f0 27 c9 02 00 d0 03
>3a2168	4c 88 11 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a2178	04 8f d1 08 00 c2 20 29 ff 00 20 86 18 e2 20 dc
>3a2188	d2 08 18 a5 21 65 27 85 21 a5 23 65 29 85 23 60
>3a2198	38 a5 21 e5 27 85 21 a5 23 e5 29 85 23 60 a5 21
>3a21a8	8f 08 01 00 a5 27 8f 0a 01 00 af 0c 01 00 85 21
>3a21b8	af 0e 01 00 85 23 60 a5 21 8f 12 01 00 a5 27 8f
>3a21c8	10 01 00 af 14 01 00 85 21 60 a5 21 8f 12 01 00
>3a21d8	a5 27 8f 10 01 00 af 16 01 00 85 21 60 c2 20 a5
>3a21e8	21 25 27 85 21 a5 23 25 29 85 23 60 c2 20 a5 21
>3a21f8	05 27 85 21 a5 23 05 29 85 23 60 c2 20 a5 21 49
>3a2208	ff ff 85 21 a5 23 49 ff ff 85 23 60 c2 20 a5 23
>3a2218	c5 29 90 0b a5 21 c5 27 90 05 64 21 64 23 60 a9
>3a2228	ff ff 85 21 85 23 60 c2 20 a5 29 c5 23 90 0b a5
>3a2238	27 c5 21 90 05 64 21 64 23 60 a9 ff ff 85 21 85
>3a2248	23 60 c2 20 a5 29 c5 23 d0 0e a5 27 c5 21 d0 08
>3a2258	a9 ff ff 85 21 85 23 60 64 21 64 23 60 c2 20 a5
>3a2268	29 c5 23 d0 0e a5 27 c5 21 d0 08 a9 ff ff 85 21
>3a2278	85 23 60 64 21 64 23 60 c2 20 a5 23 c5 29 90 10
>3a2288	d0 06 a5 21 c5 27 90 08 a9 ff ff 85 21 85 23 60
>3a2298	64 21 64 23 60 c2 20 a5 23 c5 29 90 0f f0 05 64
>3a22a8	21 64 23 60 a5 21 c5 27 f0 02 b0 f3 a9 ff ff 85
>3a22b8	21 85 23 60 08 e2 20 20 34 17 20 1a 05 20 f8 03
>3a22c8	a5 21 0a 0a 0a 0a 05 27 48 a9 2c 20 38 1c 20 34
>3a22d8	17 20 1a 05 20 f8 03 a5 21 0a 0a 0a 0a 05 27 48
>3a22e8	a9 2c 20 38 1c 20 34 17 20 1a 05 20 f8 03 a5 21
>3a22f8	0a 0a 0a 0a 05 27 48 af 0e 08 af 09 0c 8f 0e 08
>3a2308	af 68 8f 00 08 af 68 8f 02 08 af 68 8f 04 08 af
>3a2318	af 0e 08 af 29 f7 8f 0e 08 af 20 70 1b 28 60 08
>3a2328	e2 20 20 34 17 20 1a 05 20 f8 03 a5 21 0a 0a 0a
>3a2338	0a 05 27 48 a9 2c 20 38 1c 20 34 17 20 1a 05 20
>3a2348	f8 03 a5 21 0a 0a 0a 0a 05 27 48 a9 2c 20 38 1c
>3a2358	20 34 17 20 77 04 20 2e 04 c2 20 a5 21 85 90 a5
>3a2368	27 85 21 20 f8 03 e2 20 a5 21 0a 0a 0a 0a 05 27
>3a2378	48 c2 20 a5 90 85 21 20 f8 03 e2 20 a5 21 0a 0a
>3a2388	0a 0a 05 27 48 af 0e 08 af 09 0c 8f 0e 08 af 68
>3a2398	8f 0f 08 af 68 8f 0a 08 af 68 8f 09 08 af 68 8f
>3a23a8	06 08 af af 0e 08 af 29 f7 8f 0e 08 af 20 70 1b
>3a23b8	28 60 08 20 34 17 20 1a 05 e2 20 a5 21 29 0f 0a
>3a23c8	0a 0a 0a 8f 53 08 00 a9 2c 20 38 1c 20 34 17 20
>3a23d8	1a 05 a5 21 29 0f 0f 53 08 00 8f 1e 00 00 28 60
>3a23e8	08 e2 20 20 34 17 20 1a 05 a5 21 48 a9 2c 20 38
>3a23f8	1c 20 34 17 20 1a 05 a5 21 48 a9 2c 20 38 1c 20
>3a2408	34 17 20 1a 05 a5 21 8f 0d 00 af 68 8f 0e 00 af
>3a2418	68 8f 0f 00 af 28 60 08 e2 20 20 34 17 20 77 04
>3a2428	a5 21 f0 16 a9 01 8f 04 00 af a9 20 8f 08 00 af
>3a2438	8f 09 00 af 22 2c 11 00 80 0a a9 00 8f 04 00 af
>3a2448	22 2c 11 00 a9 2c 85 35 20 6d 1c 90 35 20 2b 1b
>3a2458	20 34 17 20 1a 05 a5 21 48 a9 2c 20 38 1c 20 34
>3a2468	17 20 1a 05 a5 21 48 a9 2c 20 38 1c 20 34 17 20
>3a2478	1a 05 a5 21 8f 05 00 af 68 8f 06 00 af 68 8f 07
>3a2488	00 af 28 60 08 c2 20 20 34 17 20 1a 05 a9 af 00
>3a2498	85 9e a5 21 c9 0a 00 b0 5c 0a aa bf 1c 25 3a 85
>3a24a8	9c a9 2c 00 20 38 1c 20 34 17 20 1a 05 a5 21 0a
>3a24b8	0a 18 65 9c 85 9c a9 2c 00 20 38 1c 20 34 17 20
>3a24c8	1a 05 a0 02 00 a5 21 e2 20 97 9c a9 2c 20 38 1c
>3a24d8	20 34 17 20 1a 05 a0 01 00 a5 21 e2 20 97 9c a9
>3a24e8	2c 20 38 1c 20 34 17 20 1a 05 a0 00 00 a5 21 e2
>3a24f8	20 97 9c 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a2508	20 a9 0a 8f d1 08 00 c2 20 29 ff 00 20 86 18 e2
>3a2518	20 dc d2 08 00 20 00 24 00 28 00 2c 00 30 00 34
>3a2528	00 38 00 3c 40 1f 80 1f da 5a 08 20 34 17 20 77
>3a2538	04 a5 21 8f 00 00 af 4a 4a 4a 4a 4a 4a 4a 29 ff
>3a2548	0a aa c2 20 bf 95 25 3a 8f 08 f0 3a bf 9d 25 3a
>3a2558	8f 0a f0 3a af 08 f0 3a 8f 08 01 00 af 0a f0 3a
>3a2568	8f 0a 01 00 af 0c 01 00 8f 0c f0 3a e2 20 af 0e
>3a2578	01 00 8f 0e f0 3a 22 2c 11 00 c2 20 af 1a 00 00
>3a2588	aa af 1c 00 00 a8 20 20 00 28 7a fa 60 80 02 20
>3a2598	03 40 01 90 01 e0 01 58 02 f0 00 2c 01 50 00 64
>3a25a8	00 28 00 32 00 3c 00 4b 00 1e 00 32 00 48 00 5c
>3a25b8	00 20 00 2a 00 34 00 43 00 16 00 34 00 08 c2 20
>3a25c8	20 34 17 20 1a 05 c2 20 a5 21 85 53 a9 2c 00 20
>3a25d8	38 1c 20 34 17 20 1a 05 e2 20 a5 53 d0 05 a5 21
>3a25e8	0a 80 04 a5 21 38 2a 8f 00 01 af c2 20 a9 2c 00
>3a25f8	85 35 20 6d 1c b0 18 c2 20 08 c2 20 a9 00 00 85
>3a2608	21 a9 b0 00 85 23 e2 20 a9 00 85 25 28 80 08 c2
>3a2618	20 20 2b 1b 20 34 17 e2 20 38 a5 23 8f 02 f0 3a
>3a2628	e9 b0 30 30 8f 03 01 af 8f 06 f0 3a a5 21 8f 00
>3a2638	f0 3a 8f 01 01 af 8f 04 f0 3a a5 22 8f 02 01 af
>3a2648	8f 05 f0 3a 8f 01 f0 3a a9 00 8f 07 f0 3a 8f 03
>3a2658	f0 3a 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a2668	a9 0a 8f d1 08 00 c2 20 29 ff 00 20 86 18 e2 20
>3a2678	dc d2 08 08 c2 20 af 04 f0 3a 8f 05 04 af af 0c
>3a2688	f0 3a 8f 08 04 af e2 20 af 06 f0 3a 8f 07 04 af
>3a2698	af 0e f0 3a 8f 0a 04 af a9 00 8f 01 04 af a9 85
>3a26a8	8f 00 04 af af 01 04 af 30 fa a9 00 8f 00 04 af
>3a26b8	28 60 08 c2 20 a5 5b 8f 08 01 00 af 08 f0 3a 8f
>3a26c8	0a 01 00 18 af 0c 01 00 65 57 85 0c af 0e 01 00
>3a26d8	69 00 00 85 0e 18 a5 0c 6f 00 f0 3a 85 9c a5 0e
>3a26e8	6f 02 f0 3a 85 9e e2 20 a5 53 87 9c 28 60 c2 20
>3a26f8	a9 01 00 85 db 38 a5 5f e5 57 85 67 10 0b 49 ff
>3a2708	ff 1a 85 67 a9 ff ff 85 db a9 01 00 85 dd 38 a5
>3a2718	63 e5 5b 85 6b 10 0b 49 ff ff 1a 85 6b a9 ff ff
>3a2728	85 dd a5 6b c5 67 b0 04 a5 67 80 06 a5 6b 49 ff
>3a2738	ff 1a 48 0a 68 6a 85 6f 20 ba 26 a5 57 c5 5f d0
>3a2748	06 a5 5b c5 63 f0 36 a5 6f 85 73 a5 67 49 ff ff
>3a2758	1a c5 73 10 10 f0 0e 38 a5 6f e5 6b 85 6f 18 a5
>3a2768	57 65 db 85 57 a5 73 c5 6b 10 cd f0 cb 18 a5 6f
>3a2778	65 67 85 6f 18 a5 5b 65 dd 85 5b 80 bb 60 08 a9
>3a2788	00 00 8f 00 04 af c2 20 a5 5b 8f 08 01 00 af 08
>3a2798	f0 3a 8f 0a 01 00 18 af 0c 01 00 65 57 85 0c e2
>3a27a8	20 af 0e 01 00 69 00 85 0e c2 20 18 af 04 f0 3a
>3a27b8	65 0c 8f 05 04 af e2 20 af 06 f0 3a 65 0e 8f 07
>3a27c8	04 af c2 20 38 a5 5f e5 57 85 0c 8f 08 04 af 38
>3a27d8	af 08 f0 3a 8f 0e 04 af 38 a5 63 e5 5b 8f 0a 04
>3a27e8	af a9 01 00 8f 0c 04 af e2 20 af 53 08 00 8f 01
>3a27f8	04 af a9 87 8f 00 04 af af 01 04 af 30 fa a9 00
>3a2808	8f 00 04 af 28 60 08 08 c2 20 48 a9 00 08 5b 68
>3a2818	28 08 e2 20 48 a9 00 48 ab 68 28 c2 30 20 34 17
>3a2828	20 77 04 a5 21 85 53 a9 2c 00 20 38 1c 20 34 17
>3a2838	20 77 04 a5 21 85 57 a9 2c 00 20 38 1c 20 34 17
>3a2848	20 1a 05 a5 21 85 5b 20 ba 26 28 60 08 08 c2 20
>3a2858	48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68
>3a2868	28 c2 30 20 34 17 20 77 04 a5 21 85 57 a9 2c 00
>3a2878	20 38 1c 20 34 17 20 77 04 a5 21 85 5b a9 2c 00
>3a2888	20 38 1c 20 34 17 20 77 04 a5 21 85 5f a9 2c 00
>3a2898	20 38 1c 20 34 17 20 77 04 a5 21 85 63 a9 2c 00
>3a28a8	20 38 1c 20 34 17 20 1a 05 a5 21 85 53 20 f6 26
>3a28b8	28 60 08 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20
>3a28c8	48 a9 00 48 ab 68 28 c2 30 20 34 17 20 77 04 a5
>3a28d8	21 85 57 a9 2c 00 20 38 1c 20 34 17 20 77 04 a5
>3a28e8	21 85 5b a9 2c 00 20 38 1c 20 34 17 20 77 04 a5
>3a28f8	21 85 5f a9 2c 00 20 38 1c 20 34 17 20 77 04 a5
>3a2908	21 85 63 a9 2c 00 20 38 1c 20 34 17 20 1a 05 a5
>3a2918	21 85 53 20 86 27 28 60 08 e2 20 a5 21 c9 40 b0
>3a2928	18 0a 0a 0a 18 69 00 85 9c a9 08 69 00 85 9d a9
>3a2938	af 69 00 85 9e 64 9f 28 60 08 c2 20 48 a9 00 08
>3a2948	5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff 00
>3a2958	20 86 18 e2 20 dc d2 08 08 e2 20 20 34 17 20 1a
>3a2968	05 20 20 29 a5 21 8f 0e f0 3a a9 2c 20 38 1c 20
>3a2978	34 17 20 1a 05 a5 21 c9 08 b0 4b 48 a9 2c 20 38
>3a2988	1c 20 34 17 20 77 04 c2 20 38 a5 21 e9 00 00 85
>3a2998	21 a5 23 e9 b0 00 85 23 30 2c c2 20 a5 21 a0 01
>3a29a8	00 97 9c e2 20 a5 23 c8 c8 97 9c af 0e f0 3a aa
>3a29b8	bf 10 f0 3a 29 f1 85 0c 68 0a 29 0e 05 0c 87 9c
>3a29c8	9f 10 f0 3a 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a29d8	e2 20 a9 09 8f d1 08 00 c2 20 29 ff 00 20 86 18
>3a29e8	e2 20 dc d2 08 08 c2 20 20 34 17 20 1a 05 20 20
>3a29f8	29 a9 2c 00 20 38 1c 20 34 17 20 77 04 a5 21 a0
>3a2a08	04 00 97 9c a9 2c 00 20 38 1c 20 34 17 20 77 04
>3a2a18	a5 21 a0 06 00 97 9c 28 60 08 c2 20 20 34 17 20
>3a2a28	1a 05 20 20 29 a5 21 8f 0e f0 3a a9 2c 00 20 38
>3a2a38	1c 20 34 17 20 77 04 a5 21 48 a9 2c 00 85 35 20
>3a2a48	6d 1c b0 1c af 0e f0 3a aa bf 10 f0 3a 29 fe 00
>3a2a58	85 0c 68 29 01 00 05 0c 9f 10 f0 3a 87 9c 80 31
>3a2a68	e2 20 20 2b 1b 20 34 17 20 1a 05 a5 21 c9 08 b0
>3a2a78	22 0a 0a 0a 0a 85 0c 68 29 01 05 0c 85 0c af 0e
>3a2a88	f0 3a aa bf 10 f0 3a 29 8e 05 0c 87 9c 9f 10 f0
>3a2a98	3a 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a2aa8	09 8f d1 08 00 c2 20 29 ff 00 20 86 18 e2 20 dc
>3a2ab8	d2 08 08 20 4c 1b e2 20 a7 00 d0 03 4c 62 2b c9
>3a2ac8	3a d0 03 4c 62 2b c9 22 d0 0b 20 52 16 20 49 34
>3a2ad8	a9 3b 20 38 1c 20 2c 03 90 41 20 54 40 90 3c a9
>3a2ae8	3f 20 18 00 a9 20 20 18 00 20 10 00 e2 20 a5 e8
>3a2af8	c9 02 f0 46 c9 00 f0 65 c9 01 f0 60 08 c2 20 48
>3a2b08	a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20
>3a2b18	29 ff 00 20 86 18 e2 20 dc d2 08 08 c2 20 48 a9
>3a2b28	00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29
>3a2b38	ff 00 20 86 18 e2 20 dc d2 08 c2 20 a9 00 4c 85
>3a2b48	21 a9 00 00 85 23 e2 20 a9 02 85 25 20 2a 12 c2
>3a2b58	20 20 f1 3f a9 0d 00 20 18 00 28 60 ea c2 20 a5
>3a2b68	00 85 3e a5 02 85 40 a9 00 4c 85 00 a9 00 00 85
>3a2b78	02 20 6f 05 c2 20 a5 3e 85 00 a5 40 85 02 80 cf
>3a2b88	08 20 4c 1b e2 20 a7 00 f0 49 c9 3a f0 45 20 2c
>3a2b98	03 90 42 20 54 40 90 3d 20 14 00 e2 20 8f 00 4e
>3a2ba8	00 a9 00 8f 01 4e 00 c2 20 a9 00 4e 85 21 a9 00
>3a2bb8	00 85 23 e2 20 a9 02 85 25 20 2a 12 20 f1 3f 20
>3a2bc8	4c 1b a7 00 f0 0d c9 3a f0 09 c9 2c d0 07 20 2b
>3a2bd8	1b 80 ae 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a2be8	20 a9 02 8f d1 08 00 c2 20 29 ff 00 20 86 18 e2
>3a2bf8	20 dc d2 08 08 20 34 17 20 77 04 e2 20 a9 5c 85
>3a2c08	a0 c2 20 a5 21 85 a1 e2 20 a5 23 85 a3 e2 20 a9
>3a2c18	2c 85 35 20 6d 1c 90 41 20 2b 1b 20 34 17 20 cb
>3a2c28	04 c2 20 a5 21 85 53 e2 20 a9 2c 85 35 20 6d 1c
>3a2c38	90 27 20 2b 1b 20 34 17 20 cb 04 c2 20 a5 21 85
>3a2c48	57 e2 20 a9 2c 85 35 20 6d 1c 90 0d 20 2b 1b 20
>3a2c58	34 17 20 cb 04 c2 20 a4 21 a6 57 a5 53 0b 8b 08
>3a2c68	22 a0 08 00 28 ab 2b 20 70 1b 28 60 08 c2 20 48
>3a2c78	a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20
>3a2c88	29 ff 00 20 86 18 e2 20 dc d2 08 08 e2 20 20 4c
>3a2c98	1b 20 54 40 90 64 a9 8c 20 38 1c a9 01 20 a1 14
>3a2ca8	a2 01 00 a9 00 8f 00 4d 00 20 34 17 20 cb 04 c2
>3a2cb8	20 a5 21 9f 00 4d 00 e2 20 af 00 4d 00 1a 8f 00
>3a2cc8	4d 00 30 55 e8 e8 20 4c 1b a7 00 c9 2c f0 25 c9
>3a2cd8	8d d0 27 20 2b 1b 20 02 41 c2 20 a5 be 85 21 e2
>3a2ce8	20 a5 c0 85 23 64 24 a5 e8 09 80 85 e8 85 25 20
>3a2cf8	f1 3f 28 60 20 2b 1b 4c b1 2c 08 c2 20 48 a9 00
>3a2d08	08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff
>3a2d18	00 20 86 18 e2 20 dc d2 08 08 c2 20 48 a9 00 08
>3a2d28	5b 68 28 e2 20 a9 0a 8f d1 08 00 c2 20 29 ff 00
>3a2d38	20 86 18 e2 20 dc d2 08 08 20 4c 1b e2 20 a7 00
>3a2d48	f0 28 c9 3a f0 24 20 2c 03 90 21 20 54 40 90 1c
>3a2d58	20 93 2d 20 f1 3f 20 4c 1b a7 00 f0 0d c9 3a f0
>3a2d68	09 c9 2c d0 07 20 2b 1b 80 cf 28 60 08 c2 20 48
>3a2d78	a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20
>3a2d88	29 ff 00 20 86 18 e2 20 dc d2 08 08 a5 02 85 40
>3a2d98	a5 00 85 3e a5 1a 85 44 a5 18 85 42 c2 20 a5 38
>3a2da8	d0 04 a5 36 f0 4e a5 36 85 00 a5 38 85 02 a5 3a
>3a2db8	85 18 a5 3c 85 1a e2 20 a7 00 f0 53 c9 3a f0 4f
>3a2dc8	c9 2c d0 03 20 2b 1b 20 4c 1b a7 00 c9 22 f0 4e
>3a2dd8	20 45 03 b0 4e 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a2de8	20 a9 02 8f d1 08 00 c2 20 29 ff 00 20 86 18 e2
>3a2df8	20 dc d2 08 c2 20 a9 00 00 85 18 a9 36 00 85 1a
>3a2e08	18 a5 18 69 04 00 85 00 a5 1a 69 00 00 85 02 e2
>3a2e18	20 a9 80 85 33 a9 a8 85 35 20 82 1b 80 a9 20 52
>3a2e28	16 80 03 20 87 15 c2 20 a5 00 85 36 a5 02 85 38
>3a2e38	a5 18 85 3a a5 1a 85 3c a5 42 85 18 a5 44 85 1a
>3a2e48	a5 3e 85 00 a5 40 85 02 28 60 20 70 1b 60 64 36
>3a2e58	64 38 64 3a 64 3c 60 20 24 00 60 20 34 17 c2 20
>3a2e68	a5 23 48 a5 21 48 e2 20 a7 00 c9 2c d0 22 20 2b
>3a2e78	1b 20 34 17 c2 20 a5 24 d0 35 68 85 08 68 85 0a
>3a2e88	c2 20 a5 21 87 08 e2 20 a0 02 00 a5 23 97 08 60
>3a2e98	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1
>3a2ea8	08 00 c2 20 29 ff 00 20 86 18 e2 20 dc d2 08 08
>3a2eb8	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08
>3a2ec8	00 c2 20 29 ff 00 20 86 18 e2 20 dc d2 08 20 34
>3a2ed8	17 c2 20 a5 23 48 a5 21 48 e2 20 a7 00 c9 2c d0
>3a2ee8	19 20 2b 1b 20 34 17 c2 20 a5 23 d0 2c 68 85 08
>3a2ef8	68 85 0a c2 20 a5 21 87 08 60 08 c2 20 48 a9 00
>3a2f08	08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff
>3a2f18	00 20 86 18 e2 20 dc d2 08 08 c2 20 48 a9 00 08
>3a2f28	5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff 00
>3a2f38	20 86 18 e2 20 dc d2 08 20 34 17 c2 20 a5 23 48
>3a2f48	a5 21 48 e2 20 a7 00 c9 2c d0 1f 20 2b 1b 20 34
>3a2f58	17 e2 20 a5 22 d0 32 c2 20 a5 23 d0 2c 68 85 08
>3a2f68	68 85 0a e2 20 a5 21 87 08 60 08 c2 20 48 a9 00
>3a2f78	08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff
>3a2f88	00 20 86 18 e2 20 dc d2 08 08 c2 20 48 a9 00 08
>3a2f98	5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff 00
>3a2fa8	20 86 18 e2 20 dc d2 08 08 c2 20 48 a9 00 08 5b
>3a2fb8	68 28 e2 20 a9 01 8f d1 08 00 c2 20 29 ff 00 20
>3a2fc8	86 18 e2 20 dc d2 08 08 e2 20 a7 00 f0 05 20 2b
>3a2fd8	1b 80 f7 28 60 08 28 60 08 28 60 08 28 60 08 c2
>3a2fe8	20 a5 1a 20 4d 18 a5 18 20 4d 18 a5 02 48 a5 00
>3a2ff8	48 20 70 1b a5 02 20 4d 18 a5 00 20 4d 18 68 85
>3a3008	00 68 85 02 20 4c 1b 20 54 40 b0 1f 08 c2 20 48
>3a3018	a9 00 08 5b 68 28 e2 20 a9 05 8f d1 08 00 c2 20
>3a3028	29 ff 00 20 86 18 e2 20 dc d2 08 e2 20 a5 e8 20
>3a3038	64 18 a5 e7 20 64 18 c2 20 a5 e5 20 4d 18 20 4c
>3a3048	1b e2 20 a7 00 c9 87 d0 6a a5 e8 c9 00 f0 04 c9
>3a3058	01 f0 00 20 2b 1b 20 34 17 20 f1 3f e2 20 a9 99
>3a3068	20 38 1c 20 34 17 c2 20 a5 25 20 4d 18 a5 23 20
>3a3078	4d 18 a5 21 20 4d 18 e2 20 a9 9a 85 35 20 6d 1c
>3a3088	90 1b 20 2b 1b 20 34 17 e2 20 a5 25 20 4d 18 c2
>3a3098	20 a5 23 20 4d 18 a5 21 20 4d 18 80 14 c2 20 a9
>3a30a8	00 00 20 4d 18 a9 00 00 20 4d 18 a9 01 00 20 4d
>3a30b8	18 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a30c8	02 8f d1 08 00 c2 20 29 ff 00 20 86 18 e2 20 dc
>3a30d8	d2 08 08 8b 08 e2 20 48 a9 00 48 ab 68 28 08 c2
>3a30e8	20 48 a9 00 08 5b 68 28 c2 30 a4 31 c8 c8 c2 20
>3a30f8	b9 0c 00 85 e5 b9 0e 00 e2 20 85 e7 b9 10 00 85
>3a3108	e8 c2 20 5a 20 aa 3e 7a c2 20 b9 00 00 85 27 b9
>3a3118	02 00 85 29 e2 20 b9 04 00 85 2b c2 20 5a 20 59
>3a3128	21 20 f1 3f 7a c2 20 b9 06 00 85 27 b9 08 00 85
>3a3138	29 e2 20 b9 0a 00 85 2b c2 20 b9 02 00 30 0a 20
>3a3148	9d 22 20 64 04 f0 28 80 08 20 80 22 20 64 04 f0
>3a3158	1e c2 20 b9 12 00 85 00 b9 14 00 85 02 b9 16 00
>3a3168	85 18 b9 18 00 85 1a e2 20 a9 03 85 da 80 17 a2
>3a3178	21 08 20 62 14 c2 20 18 a5 31 69 1a 00 85 31 a5
>3a3188	33 69 00 00 85 33 ab 28 60 08 a5 18 48 a5 1a 48
>3a3198	20 4c 1b 20 6f 05 a5 21 f0 26 20 27 1e 90 42 e2
>3a31a8	20 a9 02 85 da 20 70 1b c2 20 68 20 4d 18 68 20
>3a31b8	4d 18 a5 02 20 4d 18 a5 00 20 4d 18 e6 2f 28 60
>3a31c8	68 68 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>3a31d8	8f d1 08 00 c2 20 29 ff 00 20 86 18 e2 20 dc d2
>3a31e8	08 68 68 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a31f8	06 8f d1 08 00 c2 20 29 ff 00 20 86 18 e2 20 dc
>3a3208	d2 08 08 c2 30 a5 2f f0 1e 20 6f 18 85 00 20 6f
>3a3218	18 85 02 20 6f 18 85 18 20 6f 18 85 1a c6 2f e2
>3a3228	20 a9 03 85 da 28 60 08 c2 20 48 a9 00 08 5b 68
>3a3238	28 e2 20 a9 07 8f d1 08 00 c2 20 29 ff 00 20 86
>3a3248	18 e2 20 dc d2 08 08 20 34 17 20 64 04 f0 1c e2
>3a3258	20 a9 94 20 38 1c 20 6f 05 20 64 04 f0 12 20 27
>3a3268	1e 90 2c e2 20 a9 02 85 da 80 03 20 70 1b 28 60
>3a3278	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1
>3a3288	08 00 c2 20 29 ff 00 20 86 18 e2 20 dc d2 08 08
>3a3298	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 06 8f d1 08
>3a32a8	00 c2 20 29 ff 00 20 86 18 e2 20 dc d2 08 08 e2
>3a32b8	20 a9 01 85 da 28 60 08 20 4c 1b 20 6f 05 a5 21
>3a32c8	f0 0d 20 27 1e 90 27 e2 20 a9 02 85 da 28 60 08
>3a32d8	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08
>3a32e8	00 c2 20 29 ff 00 20 86 18 e2 20 dc d2 08 08 c2
>3a32f8	20 48 a9 00 08 5b 68 28 e2 20 a9 06 8f d1 08 00
>3a3308	c2 20 29 ff 00 20 86 18 e2 20 dc d2 08 20 04 14
>3a3318	20 52 0c 20 a9 3d 60 08 a7 00 10 03 20 2b 1b 20
>3a3328	54 40 b0 03 4c 96 33 e2 20 20 8c 1c c9 8c d0 0e
>3a3338	a9 8c 20 38 1c a9 00 8f 00 4d 00 20 8a 15 20 4c
>3a3348	1b e2 20 a7 00 c9 87 f0 03 4c 96 33 20 2b 1b a5
>3a3358	e8 48 a5 e7 48 a5 e6 48 a5 e5 48 20 34 17 68 85
>3a3368	e5 68 85 e6 68 85 e7 68 85 e8 29 80 f0 1b 20 1c
>3a3378	3e 90 3a c2 20 a0 09 00 b7 08 85 be e2 20 c8 c8
>3a3388	b7 08 85 c0 20 e3 42 80 03 20 f1 3f 28 60 08 c2
>3a3398	20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00
>3a33a8	c2 20 29 ff 00 20 86 18 e2 20 dc d2 08 08 c2 20
>3a33b8	48 a9 00 08 5b 68 28 e2 20 a9 05 8f d1 08 00 c2
>3a33c8	20 29 ff 00 20 86 18 e2 20 dc d2 08 08 e2 20 20
>3a33d8	8c 1c c9 00 f0 66 20 34 17 e2 20 a5 25 c9 ff f0
>3a33e8	14 c9 02 d0 05 20 49 34 80 0b c9 00 d0 05 20 69
>3a33f8	34 80 02 80 4a 20 4c 1b a7 00 f0 40 c9 3a f0 3c
>3a3408	c9 2c f0 23 c9 3b f0 24 08 c2 20 48 a9 00 08 5b
>3a3418	68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00 20
>3a3428	86 18 e2 20 dc d2 08 a9 09 20 18 00 20 2b 1b 20
>3a3438	4c 1b a7 00 f0 09 c9 3a f0 05 80 9a 20 21 02 28
>3a3448	60 08 8b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 c2
>3a3458	10 a0 00 00 b7 21 f0 06 20 18 00 c8 80 f6 ab 28
>3a3468	60 08 c2 20 20 f0 10 a5 14 85 21 a5 16 85 23 20
>3a3478	49 34 28 60 08 e2 20 85 b3 4a 4a 4a 4a 29 0f 18
>3a3488	69 30 97 14 c8 a5 b3 29 0f 18 69 30 97 14 c8 28
>3a3498	60 e2 20 a9 8c 20 38 1c 08 20 34 17 e2 20 c2 10
>3a34a8	af 0e 08 af 09 08 8f 0e 08 af 20 9f 10 a0 00 00
>3a34b8	af 06 08 af 20 7c 34 a9 2f 97 14 c8 af 09 08 af
>3a34c8	20 7c 34 a9 2f 97 14 c8 af 0f 08 af 20 7c 34 af
>3a34d8	0a 08 af 20 7c 34 a9 00 97 14 af 0e 08 af 29 f7
>3a34e8	8f 0e 08 af c2 20 a5 14 85 21 a5 16 85 23 e2 20
>3a34f8	a9 02 85 25 20 2a 12 28 e2 20 20 2b 1b 60 e2 20
>3a3508	a9 8c 20 38 1c 08 20 34 17 e2 20 c2 10 af 0e 08
>3a3518	af 09 08 8f 0e 08 af 20 9f 10 a0 00 00 af 04 08
>3a3528	af 29 7f 20 7c 34 a9 3a 97 14 c8 af 02 08 af 20
>3a3538	7c 34 a9 3a 97 14 c8 af 00 08 af 20 7c 34 a9 00
>3a3548	97 14 af 0e 08 af 29 f7 8f 0e 08 af c2 20 a5 14
>3a3558	85 21 a5 16 85 23 e2 20 a9 02 85 25 20 2a 12 28
>3a3568	e2 20 20 2b 1b 60 08 c2 20 20 34 17 20 77 04 c2
>3a3578	20 a5 21 49 ff ff 85 21 a5 23 49 ff ff 85 23 e6
>3a3588	21 d0 03 e6 23 00 28 60 e2 20 a9 8c 20 38 1c 08
>3a3598	c2 30 20 34 17 20 a1 04 c2 20 a5 23 48 a5 21 48
>3a35a8	20 4c 1b e2 20 a7 00 c9 2c f0 03 4c 07 36 20 2b
>3a35b8	1b 20 34 17 20 cb 04 c2 20 a5 21 48 20 4c 1b e2
>3a35c8	20 a7 00 c9 2c f0 03 4c 07 36 20 2b 1b 20 34 17
>3a35d8	20 cb 04 c2 20 a5 21 85 8d e2 20 a5 23 85 8f c2
>3a35e8	20 68 85 27 a9 00 00 85 29 68 85 21 68 85 23 e2
>3a35f8	20 a9 02 85 25 20 82 12 e2 20 20 2b 1b 28 60 08
>3a3608	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08
>3a3618	00 c2 20 29 ff 00 20 86 18 e2 20 dc d2 08 08 c2
>3a3628	20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08 00
>3a3638	c2 20 29 ff 00 20 86 18 e2 20 dc d2 08 e2 20 a9
>3a3648	8c 20 38 1c 08 c2 30 20 34 17 e2 20 a5 25 c9 02
>3a3658	f0 03 4c c9 36 c2 20 a5 23 48 a5 21 48 20 4c 1b
>3a3668	e2 20 a7 00 c9 2c f0 03 4c e8 36 20 2b 1b 20 34
>3a3678	17 e2 20 a5 25 c9 00 d0 48 c2 20 a5 21 85 8d c2
>3a3688	20 68 85 21 68 85 23 e2 20 a9 02 85 25 e2 20 a0
>3a3698	00 00 b7 21 f0 03 c8 80 f9 c2 20 98 38 e5 8d 30
>3a36a8	09 85 27 a9 00 00 85 29 80 07 a9 00 00 85 27 85
>3a36b8	29 e2 20 a9 00 85 2b 20 82 12 e2 20 20 2b 1b 28
>3a36c8	60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f
>3a36d8	d1 08 00 c2 20 29 ff 00 20 86 18 e2 20 dc d2 08
>3a36e8	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1
>3a36f8	08 00 c2 20 29 ff 00 20 86 18 e2 20 dc d2 08 08
>3a3708	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08
>3a3718	00 c2 20 29 ff 00 20 86 18 e2 20 dc d2 08 e2 20
>3a3728	a9 8c 20 38 1c 08 c2 30 20 34 17 e2 20 a5 25 c9
>3a3738	02 f0 03 4c 92 37 c2 20 a5 23 48 a5 21 48 20 4c
>3a3748	1b e2 20 a7 00 c9 2c f0 03 4c b1 37 20 2b 1b 20
>3a3758	34 17 e2 20 a5 25 c9 00 d0 30 c2 20 a5 21 85 8d
>3a3768	c2 20 a9 00 00 85 27 a9 00 00 85 29 e2 20 a9 00
>3a3778	85 2b c2 20 68 85 21 68 85 23 e2 20 a9 02 85 25
>3a3788	20 82 12 e2 20 20 2b 1b 28 60 08 c2 20 48 a9 00
>3a3798	08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20 29 ff
>3a37a8	00 20 86 18 e2 20 dc d2 08 08 c2 20 48 a9 00 08
>3a37b8	5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00
>3a37c8	20 86 18 e2 20 dc d2 08 08 c2 20 48 a9 00 08 5b
>3a37d8	68 28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff 00 20
>3a37e8	86 18 e2 20 dc d2 08 e2 20 a9 8c 20 38 1c 20 34
>3a37f8	17 c2 10 e2 20 a5 25 c9 02 d0 23 c2 20 a5 00 85
>3a3808	3e a5 02 85 40 a5 21 85 00 a5 23 85 02 20 6f 05
>3a3818	a5 3e 85 00 a5 40 85 02 e2 20 20 2b 1b 60 08 c2
>3a3828	20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00
>3a3838	c2 20 29 ff 00 20 86 18 e2 20 dc d2 08 e2 20 a9
>3a3848	8c 20 38 1c 08 20 34 17 c2 10 e2 20 a5 25 c9 00
>3a3858	d0 1d 20 f0 10 c2 20 a5 14 85 21 a5 16 85 23 e2
>3a3868	20 a9 02 85 25 20 2a 12 28 e2 20 20 2b 1b 60 08
>3a3878	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08
>3a3888	00 c2 20 29 ff 00 20 86 18 e2 20 dc d2 08 e2 20
>3a3898	a9 8c 20 38 1c 08 20 34 17 20 a1 04 c2 20 64 0c
>3a38a8	64 0e e2 30 a0 00 b7 21 c9 20 f0 04 c9 24 d0 03
>3a38b8	c8 80 f3 b7 21 20 56 03 90 1e c2 20 06 0c 26 0e
>3a38c8	06 0c 26 0e 06 0c 26 0e 06 0c 26 0e e2 20 20 77
>3a38d8	03 05 0c 85 0c c8 80 db c2 20 a5 0c 85 21 a5 0e
>3a38e8	85 23 e2 20 a9 00 85 25 28 e2 20 20 2b 1b 60 e2
>3a38f8	20 a9 8c 20 38 1c 08 20 34 17 20 77 04 20 9f 10
>3a3908	e2 30 a0 ff a9 00 97 14 88 a5 21 29 0f aa bf 00
>3a3918	d0 3a 97 14 88 a5 21 29 f0 4a 4a 4a 4a aa bf 00
>3a3928	d0 3a 97 14 88 a5 22 85 21 a5 23 85 22 a5 24 85
>3a3938	23 a9 00 85 24 a5 21 d0 d0 a5 22 d0 cc a5 23 d0
>3a3948	c8 98 38 65 14 85 21 a5 15 85 22 a5 16 85 23 a5
>3a3958	17 85 24 a9 02 85 25 20 2a 12 28 e2 20 20 2b 1b
>3a3968	60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f
>3a3978	d1 08 00 c2 20 29 ff 00 20 86 18 e2 20 dc d2 08
>3a3988	e2 20 a9 8c 20 38 1c 20 34 17 e2 20 a5 25 c9 02
>3a3998	d0 1f 8b a5 23 48 ab c2 10 a6 21 20 75 11 ab 84
>3a39a8	21 c2 20 64 23 e2 20 a9 00 85 25 e2 20 20 2b 1b
>3a39b8	60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f
>3a39c8	d1 08 00 c2 20 29 ff 00 20 86 18 e2 20 dc d2 08
>3a39d8	e2 20 a9 8c 20 38 1c 20 34 17 e2 20 a5 25 c9 00
>3a39e8	d0 12 e2 20 a7 21 85 21 64 22 64 23 64 2e e2 20
>3a39f8	20 2b 1b 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a3a08	a9 04 8f d1 08 00 c2 20 29 ff 00 20 86 18 e2 20
>3a3a18	dc d2 08 e2 20 a9 8c 20 38 1c 20 34 17 e2 20 a5
>3a3a28	25 c9 00 d0 1d c2 20 a7 21 85 0c e2 20 a0 02 00
>3a3a38	b7 21 85 23 64 24 c2 20 a5 0c 85 21 e2 20 20 2b
>3a3a48	1b 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>3a3a58	8f d1 08 00 c2 20 29 ff 00 20 86 18 e2 20 dc d2
>3a3a68	08 e2 20 a9 8c 20 38 1c 20 34 17 e2 20 a5 25 c9
>3a3a78	00 d0 0e c2 20 a7 21 85 21 64 23 e2 20 20 2b 1b
>3a3a88	60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f
>3a3a98	d1 08 00 c2 20 29 ff 00 20 86 18 e2 20 dc d2 08
>3a3aa8	e2 20 a9 8c 20 38 1c 20 34 17 e2 20 a5 25 c9 00
>3a3ab8	d0 24 20 9f 10 a5 21 87 14 a9 00 a0 01 00 97 14
>3a3ac8	c2 20 a5 14 85 21 a5 16 85 23 e2 20 a9 02 85 25
>3a3ad8	e2 20 20 2b 1b 60 08 c2 20 48 a9 00 08 5b 68 28
>3a3ae8	e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00 20 86 18
>3a3af8	e2 20 dc d2 08 e2 20 a9 8c 20 38 1c 20 34 17 e2
>3a3b08	20 a5 25 c9 02 d0 14 a7 21 85 21 64 22 64 23 64
>3a3b18	24 a9 00 85 25 e2 20 20 2b 1b 60 08 c2 20 48 a9
>3a3b28	00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20 29
>3a3b38	ff 00 20 86 18 e2 20 dc d2 08 e2 20 a9 8c 20 38
>3a3b48	1c 20 34 17 e2 20 a5 25 c9 00 d0 39 e2 20 a5 24
>3a3b58	d0 52 a5 23 d0 4e a5 22 d0 4a c2 10 20 9f 10 a4
>3a3b68	21 e2 20 a9 00 97 14 88 30 07 a9 20 97 14 88 10
>3a3b78	fb a9 02 85 25 c2 20 a5 14 85 21 a5 16 85 23 e2
>3a3b88	20 20 2b 1b 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a3b98	20 a9 04 8f d1 08 00 c2 20 29 ff 00 20 86 18 e2
>3a3ba8	20 dc d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a3bb8	a9 09 8f d1 08 00 c2 20 29 ff 00 20 86 18 e2 20
>3a3bc8	dc d2 08 e2 20 a9 8c 20 38 1c 20 34 17 e2 20 a5
>3a3bd8	25 c9 00 d0 39 e2 20 a5 24 d0 52 a5 23 d0 4e a5
>3a3be8	22 d0 4a c2 10 20 9f 10 a4 21 e2 20 a9 00 97 14
>3a3bf8	88 30 07 a9 09 97 14 88 10 fb a9 02 85 25 c2 20
>3a3c08	a5 14 85 21 a5 16 85 23 e2 20 20 2b 1b 60 08 c2
>3a3c18	20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00
>3a3c28	c2 20 29 ff 00 20 86 18 e2 20 dc d2 08 08 c2 20
>3a3c38	48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08 00 c2
>3a3c48	20 29 ff 00 20 86 18 e2 20 dc d2 08 e2 20 a9 8c
>3a3c58	20 38 1c 20 34 17 20 77 04 c2 20 a5 23 10 17 49
>3a3c68	ff ff 85 23 a5 21 49 ff ff 18 69 01 00 85 21 a5
>3a3c78	23 69 00 00 85 23 e2 20 20 2b 1b 60 e2 20 a9 8c
>3a3c88	20 38 1c 20 34 17 e2 20 a5 25 c9 00 d0 25 c2 20
>3a3c98	a5 23 30 12 d0 04 a5 21 f0 13 a9 00 00 85 23 a9
>3a3ca8	01 00 85 21 80 07 a9 ff ff 85 23 85 21 e2 20 20
>3a3cb8	2b 1b 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a3cc8	04 8f d1 08 00 c2 20 29 ff 00 20 86 18 e2 20 dc
>3a3cd8	d2 08 00 ea 60 08 0b 08 c2 20 48 a9 00 08 5b 68
>3a3ce8	28 c2 30 c2 20 a9 00 00 85 d7 e2 20 a9 36 85 d9
>3a3cf8	c2 30 a9 00 00 a0 00 00 97 d7 a0 02 00 97 d7 a0
>3a3d08	04 00 97 d7 20 01 1b 2b 28 60 8b 08 c2 20 a9 00
>3a3d18	00 85 18 a9 36 00 85 1a 20 01 1b 20 dd 1d 28 ab
>3a3d28	60 08 c2 20 64 53 a9 ff 7f 85 57 20 21 02 20 8c
>3a3d38	1c 29 ff 00 c9 00 00 f0 2c c9 81 00 f0 1a 20 4c
>3a3d48	1b 20 6f 05 a5 21 85 53 20 8c 1c 29 ff 00 c9 00
>3a3d58	00 f0 12 c9 81 00 d0 2a 20 38 1c 20 4c 1b 20 6f
>3a3d68	05 a5 21 85 57 a5 1a 48 a5 18 48 a5 02 48 a5 00
>3a3d78	48 20 05 13 68 85 00 68 85 02 68 85 18 68 85 1a
>3a3d88	28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>3a3d98	8f d1 08 00 c2 20 29 ff 00 20 86 18 e2 20 dc d2
>3a3da8	08 08 08 c2 20 48 a9 00 08 5b 68 28 c2 20 64 e2
>3a3db8	64 e5 e2 20 64 e4 64 e7 64 e8 c2 20 38 a5 d7 69
>3a3dc8	04 00 85 df e2 20 a5 d9 69 00 85 e1 28 60 c9 5f
>3a3dd8	f0 1a c9 3a b0 04 c9 30 b0 12 c9 5b b0 04 c9 41
>3a3de8	b0 0a c9 7b b0 04 c9 61 b0 02 18 60 38 60 08 e2
>3a3df8	20 c2 10 a0 00 00 b7 0c f0 0a d7 e5 d0 13 c8 c0
>3a3e08	08 00 d0 f2 b7 e5 20 a0 03 20 d6 3d b0 03 28 38
>3a3e18	60 28 18 60 08 e2 20 c2 10 a0 00 00 a2 00 00 b7
>3a3e28	e5 f0 0b 20 a0 03 9f 00 4e 00 c8 e8 80 f1 a9 00
>3a3e38	9f 00 4e 00 c2 20 a9 00 4e 85 e5 e2 20 a9 00 85
>3a3e48	e7 c2 20 a5 e2 85 08 d0 06 e2 20 a5 e4 f0 4d e2
>3a3e58	20 a5 e4 85 0a a5 e8 a0 00 00 d7 08 d0 17 c2 20
>3a3e68	18 a5 08 69 01 00 85 0c e2 20 a5 0a 69 00 85 0e
>3a3e78	20 f6 3d b0 2a a0 0d 00 c2 20 b7 08 85 0c c8 c8
>3a3e88	e2 20 b7 08 85 0e d0 06 c2 20 a5 0c f0 0e c2 20
>3a3e98	a5 0c 85 08 e2 20 a5 0e 85 0a 80 b9 28 18 60 28
>3a3ea8	38 60 08 20 1c 3e b0 1f 08 c2 20 48 a9 00 08 5b
>3a3eb8	68 28 e2 20 a9 05 8f d1 08 00 c2 20 29 ff 00 20
>3a3ec8	86 18 e2 20 dc d2 08 c2 30 a0 09 00 b7 08 85 21
>3a3ed8	c8 c8 b7 08 85 23 e2 20 a0 00 00 b7 08 85 25 28
>3a3ee8	60 08 c2 20 18 a5 df 69 10 00 85 08 e2 20 a5 e1
>3a3ef8	69 00 85 0a c5 ba 90 27 c2 20 a5 08 c5 b8 90 1f
>3a3f08	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1
>3a3f18	08 00 c2 20 29 ff 00 20 86 18 e2 20 dc d2 08 c2
>3a3f28	20 a5 df 85 be e2 20 a5 e1 85 c0 c2 20 a5 08 85
>3a3f38	df e2 20 a5 0a 85 e1 28 60 08 e2 20 a5 25 c5 e8
>3a3f48	f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>3a3f58	8f d1 08 00 c2 20 29 ff 00 20 86 18 e2 20 dc d2
>3a3f68	08 c2 10 20 e9 3e c2 30 18 a5 be 69 01 00 85 08
>3a3f78	e2 20 a5 c0 69 00 85 0a a0 00 00 a9 00 97 08 c8
>3a3f88	c0 08 00 d0 f8 a0 00 00 b7 e5 f0 10 20 a0 03 20
>3a3f98	d6 3d 90 08 97 08 c8 c0 08 00 d0 ec c2 20 a0 09
>3a3fa8	00 a5 21 97 be a5 23 c8 c8 97 be a5 e2 a0 0d 00
>3a3fb8	97 be c8 c8 e2 20 a5 e4 97 be c2 20 a5 be 85 e2
>3a3fc8	e2 20 a5 c0 85 e4 e2 20 a0 00 00 a5 25 97 be c9
>3a3fd8	02 f0 02 28 60 c2 20 a5 21 85 be e2 20 a5 23 85
>3a3fe8	c0 20 b6 0e 20 cb 0e 80 ea 08 c2 30 a5 e2 d0 06
>3a3ff8	e2 20 a5 e4 f0 05 20 1c 3e b0 05 20 41 3f 80 17
>3a4008	e2 20 a5 25 c9 02 f0 11 c2 30 a0 09 00 a5 21 97
>3a4018	08 c8 c8 a5 23 97 08 28 60 a0 09 00 b7 08 85 be
>3a4028	c8 c8 e2 20 b7 08 85 c0 20 b6 0e 20 ea 0e e2 20
>3a4038	a5 25 c9 02 f0 02 80 d0 c2 20 a5 21 85 be e2 20
>3a4048	a5 23 85 c0 20 b6 0e 20 cb 0e 80 bc 08 20 4c 1b
>3a4058	e2 20 a7 00 20 2c 03 90 42 c2 20 a5 00 85 e5 e2
>3a4068	20 a5 02 85 e7 20 2b 1b a7 00 f0 0d c9 24 f0 14
>3a4078	c9 25 f0 09 20 d6 3d b0 ec a9 00 80 0c 20 2b 1b
>3a4088	a9 00 80 05 20 2b 1b a9 02 85 e8 20 8c 1c c9 8c
>3a4098	d0 06 a5 e8 09 80 85 e8 28 38 60 28 18 60 08 c2
>3a40a8	20 48 a9 00 08 5b 68 28 c2 20 a5 21 85 0c a5 23
>3a40b8	64 0e 64 21 64 23 e2 20 64 26 a9 01 85 25 c2 20
>3a40c8	a5 0c f0 35 10 0e e2 20 a9 80 85 26 c2 20 49 ff
>3a40d8	ff 1a 85 0c e2 20 e6 24 c2 20 46 0e 66 0c e2 20
>3a40e8	66 23 66 22 66 21 c2 20 a5 0c c9 01 00 d0 e5 e2
>3a40f8	20 06 26 66 23 66 22 66 21 60 08 20 b6 0e c2 20
>3a4108	a9 01 00 85 21 a9 00 00 85 23 e2 20 af 00 4d 00
>3a4118	c2 20 29 ff 00 85 8d a8 a2 01 00 c2 20 bf 00 4d
>3a4128	00 85 27 a9 00 00 85 29 20 a6 21 e8 e8 88 d0 eb
>3a4138	c2 20 a9 04 00 85 27 a9 00 00 85 29 20 a6 21 e2
>3a4148	20 af 00 4d 00 85 0c a9 00 85 0d c2 20 06 0c 38
>3a4158	a5 21 65 0c 85 21 a5 23 69 00 00 85 23 d0 29 e2
>3a4168	20 a5 e8 09 80 a6 21 20 7a 0c e2 20 af 00 4d 00
>3a4178	87 be a0 01 00 a2 00 00 e2 20 bf 01 4d 00 97 be
>3a4188	e4 8d f0 23 e8 c8 80 f0 08 c2 20 48 a9 00 08 5b
>3a4198	68 28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff 00 20
>3a41a8	86 18 e2 20 dc d2 08 e2 20 38 a5 be 67 be 85 08
>3a41b8	a5 bf 69 00 85 09 a5 c0 69 00 85 0a 64 0b c2 20
>3a41c8	a0 05 00 b7 c1 85 0c e2 20 c8 c8 b7 c1 85 0e 64
>3a41d8	0f e2 20 a9 00 87 08 c2 20 18 a5 08 69 01 00 85
>3a41e8	08 a5 0a 69 00 00 85 0a c5 0e d0 e5 a5 08 c5 0c
>3a41f8	d0 df 28 60 08 c2 20 64 08 64 0a e2 20 af 00 4d
>3a4208	00 85 8d 64 8e a2 01 00 e2 20 a7 be c5 8d f0 1f
>3a4218	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d1
>3a4228	08 00 c2 20 29 ff 00 20 86 18 e2 20 dc d2 08 c9
>3a4238	01 f0 3a a0 01 00 e2 20 bf 00 4d 00 85 21 64 22
>3a4248	64 23 64 24 b7 be 85 27 64 28 64 29 64 2a a5 21
>3a4258	c5 27 b0 68 20 a6 21 c2 20 18 a5 08 65 21 85 08
>3a4268	a5 0a 65 23 85 0a e8 e8 c8 c4 8d d0 c9 e2 20 18
>3a4278	bf 00 4d 00 85 8e 65 08 85 08 a5 09 69 00 85 09
>3a4288	c2 20 a5 0a 69 00 00 85 0a c2 20 06 08 26 0a 06
>3a4298	08 26 0a e2 20 38 a5 08 65 8d 85 08 a5 09 69 00
>3a42a8	85 09 c2 20 a5 0a 69 00 00 85 0a 18 a5 08 65 be
>3a42b8	85 08 e2 20 a5 0a 65 c0 85 0a 28 60 08 c2 20 48
>3a42c8	a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20
>3a42d8	29 ff 00 20 86 18 e2 20 dc d2 08 08 20 b6 0e e2
>3a42e8	20 a0 00 00 b7 c1 29 7f c5 25 d0 28 a5 25 48 c2
>3a42f8	20 a5 23 48 a5 21 48 20 fc 41 68 85 21 68 85 23
>3a4308	e2 20 68 85 25 c2 20 a5 21 87 08 a0 02 00 a5 23
>3a4318	97 08 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a4328	a9 04 8f d1 08 00 c2 20 29 ff 00 20 86 18 e2 20
>3a4338	dc d2 08 08 20 b6 0e f4 00 00 f4 00 00 e2 20 48
>3a4348	20 fc 41 e2 20 68 c2 20 68 68 c2 20 a7 08 85 21
>3a4358	a0 02 00 b7 08 85 23 e2 20 a0 00 00 b7 c1 29 7f
>3a4368	85 25 28 60 da 0b 08 08 c2 20 48 a9 00 08 5b 68
>3a4378	28 c2 30 a5 23 89 f0 ff d0 29 89 0f 00 d0 0c a5
>3a4388	21 89 00 fc d0 05 20 69 34 80 2e a2 0a 00 46 23
>3a4398	66 21 ca d0 f9 20 69 34 e2 20 a9 4b 20 18 00 c2
>3a43a8	20 80 16 a2 14 00 46 23 66 21 ca d0 f9 20 69 34
>3a43b8	e2 20 a9 4d 20 18 00 c2 20 28 2b fa 60 0b 08 c2
>3a43c8	30 a9 00 00 8f b4 08 00 8f b6 08 00 e2 20 20 8c
>3a43d8	1c c9 00 f0 08 20 34 17 20 a1 04 80 11 c2 20 a9
>3a43e8	00 00 85 21 85 23 e2 20 a9 02 85 25 c2 20 20 26
>3a43f8	45 22 08 11 00 b0 22 20 d7 45 08 c2 20 48 a9 00
>3a4408	08 5b 68 28 e2 20 a9 10 8f d1 08 00 c2 20 29 ff
>3a4418	00 20 86 18 e2 20 dc d2 08 20 21 02 08 c2 20 48
>3a4428	a9 20 03 5b 68 28 e2 20 a0 00 00 b7 18 d0 03 82
>3a4438	a9 00 c9 e5 d0 03 82 96 00 a0 0b 00 b7 18 89 08
>3a4448	f0 03 82 a9 00 89 02 f0 03 82 83 00 29 0f c9 0f
>3a4458	d0 03 82 7a 00 a0 00 00 b7 18 20 18 00 c8 c0 08
>3a4468	00 d0 f5 a9 20 20 18 00 a0 08 00 b7 18 20 18 00
>3a4478	c8 c0 0b 00 d0 f5 a9 09 20 18 00 a0 0b 00 b7 18
>3a4488	89 10 d0 1e c2 20 a0 1c 00 b7 18 8f 21 08 00 c8
>3a4498	c8 b7 18 8f 23 08 00 e2 20 a9 00 8f 25 08 00 20
>3a44a8	6c 43 a9 09 20 18 00 a0 0b 00 b7 18 89 08 d0 1c
>3a44b8	89 01 f0 05 a9 52 20 18 00 89 04 f0 05 a9 53 20
>3a44c8	18 00 89 10 f0 05 a9 44 20 18 00 ea 20 21 02 20
>3a44d8	38 02 22 0c 11 00 90 03 82 41 ff 20 d7 45 08 c2
>3a44e8	20 48 a9 00 08 5b 68 28 20 70 1b 28 2b 60 08 c2
>3a44f8	20 48 a9 20 03 5b 68 28 e2 20 29 0f c9 0f f0 cf
>3a4508	a9 5b 20 18 00 a0 00 00 b7 18 c9 20 f0 09 20 18
>3a4518	00 c8 c0 08 00 d0 f1 a9 5d 20 18 00 80 ae 0b 08
>3a4528	08 c2 20 48 a9 20 03 5b 68 28 c2 30 a9 50 f2 85
>3a4538	20 a9 3a 00 85 22 a0 00 00 e2 20 a9 00 97 20 c8
>3a4548	c0 1e 00 d0 f8 c2 20 a9 50 f0 8f 5e f2 3a a9 3a
>3a4558	00 8f 60 f2 3a af 21 08 00 8f 52 f2 3a af 23 08
>3a4568	00 8f 54 f2 3a 28 2b 60 08 c2 30 20 4c 1b 20 34
>3a4578	17 20 a1 04 20 26 45 e2 20 a9 2c 85 35 20 6d 1c
>3a4588	b0 0f c2 20 a9 ff ff 8f 54 03 00 8f 56 03 00 80
>3a4598	17 20 2b 1b 20 34 17 20 77 04 c2 20 a5 21 8f 54
>3a45a8	03 00 a5 23 8f 56 03 00 22 18 11 00 b0 1f 08 c2
>3a45b8	20 48 a9 00 08 5b 68 28 e2 20 a9 11 8f d1 08 00
>3a45c8	c2 20 29 ff 00 20 86 18 e2 20 dc d2 08 28 60 8b
>3a45d8	0b 08 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48
>3a45e8	a9 00 48 ab 68 28 e2 20 af 2e 03 00 85 21 a9 00
>3a45f8	85 22 85 23 85 24 a9 00 85 25 85 e8 a9 3a 85 e7
>3a4608	c2 20 a9 3a 46 85 e5 20 f1 3f e2 20 af 20 03 00
>3a4618	85 21 a9 00 85 22 85 23 85 24 a9 00 85 25 85 e8
>3a4628	a9 3a 85 e7 c2 20 a9 42 46 85 e5 20 f1 3f 28 2b
>3a4638	ab 60 44 4f 53 53 54 41 54 00 42 49 4f 53 53 54
>3a4648	41 54 00 08 c2 30 20 4c 1b 20 34 17 20 a1 04 a5
>3a4658	21 8f 60 03 00 a5 23 8f 62 03 00 a9 ff ff 8f 54
>3a4668	03 00 8f 56 03 00 22 24 11 00 b0 25 20 86 18 20
>3a4678	d7 45 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 11
>3a4688	8f d1 08 00 c2 20 29 ff 00 20 86 18 e2 20 dc d2
>3a4698	08 20 86 18 28 60 08 c2 30 20 4c 1b 20 34 17 20
>3a46a8	a1 04 20 26 45 a9 00 00 8f 54 03 00 a9 01 00 8f
>3a46b8	56 03 00 20 dd 3c 22 18 11 00 b0 22 20 d7 45 08
>3a46c8	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 11 8f d1 08
>3a46d8	00 c2 20 29 ff 00 20 86 18 e2 20 dc d2 08 20 d7
>3a46e8	45 c2 20 a2 12 00 18 bf 50 f2 3a 69 00 00 85 90
>3a46f8	bf 52 f2 3a 69 01 00 85 92 e2 20 a9 00 87 90 c2
>3a4708	20 a9 00 00 85 78 a9 01 00 85 7a a2 00 00 e2 20
>3a4718	a7 78 f0 28 c9 0d f0 12 c9 0a f0 04 9d 00 4f e8
>3a4728	c2 20 e6 78 d0 e8 e6 7a 80 e4 e2 20 a9 00 9d 00
>3a4738	4f 20 db 20 e6 78 d0 d3 e6 7a 80 cf e0 00 00 f0
>3a4748	0a e2 20 a9 00 9d 00 4f 20 db 20 28 60 08 c2 30
>3a4758	20 4c 1b 20 34 17 20 a1 04 20 26 45 e2 20 a9 2c
>3a4768	20 38 1c c2 20 20 34 17 20 77 04 a5 21 8f 50 03
>3a4778	00 a5 23 8f 52 03 00 e2 20 a9 2c c2 20 20 38 1c
>3a4788	20 34 17 20 77 04 a5 21 8f 58 03 00 a5 23 8f 5a
>3a4798	03 00 22 1c 11 00 b0 22 20 d7 45 08 c2 20 48 a9
>3a47a8	00 08 5b 68 28 e2 20 a9 12 8f d1 08 00 c2 20 29
>3a47b8	ff 00 20 86 18 e2 20 dc d2 08 20 d7 45 28 60 da
>3a47c8	5a 08 a2 00 00 a0 00 00 e2 20 b7 21 9d 00 04 f0
>3a47d8	04 e8 c8 80 f5 28 7a fa 60 08 c2 30 20 4c 1b 20
>3a47e8	34 17 20 a1 04 20 26 45 a9 00 00 85 a4 e2 20 a9
>3a47f8	01 85 a6 a9 20 85 b2 c2 20 a9 00 00 85 a9 a9 ff
>3a4808	ff 85 a7 c2 20 a9 00 00 85 53 85 55 a9 ff ff 85
>3a4818	57 a9 ff 7f 85 59 20 05 13 e2 20 a9 80 85 b2 c2
>3a4828	20 c6 a9 18 a9 00 00 8f 50 03 00 65 a9 8f 58 03
>3a4838	00 a9 01 00 8f 52 03 00 69 00 00 8f 5a 03 00 22
>3a4848	1c 11 00 b0 22 20 d7 45 08 c2 20 48 a9 00 08 5b
>3a4858	68 28 e2 20 a9 12 8f d1 08 00 c2 20 29 ff 00 20
>3a4868	86 18 e2 20 dc d2 08 20 d7 45 28 60 08 c2 30 20
>3a4878	4c 1b 20 34 17 20 a1 04 20 c7 47 22 04 11 00 b0
>3a4888	22 20 d7 45 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a4898	a9 13 8f d1 08 00 c2 20 29 ff 00 20 86 18 e2 20
>3a48a8	dc d2 08 20 d7 45 28 60 da 08 e2 20 c9 61 90 08
>3a48b8	c9 7b b0 04 29 df 80 13 c9 20 90 13 a2 00 00 df
>3a48c8	db 48 3a f0 0a e8 e0 0f 00 d0 f4 28 38 fa 6b 28
>3a48d8	18 fa 6b 2a 2b 2c 2f 3a 3b 3c 3d 3e 3f 5c 5b 5d
>3a48e8	7c 22 08 08 c2 20 48 a9 00 08 5b 68 28 c2 30 20
>3a48f8	34 17 20 a1 04 20 c7 47 22 10 11 00 b0 22 20 d7
>3a4908	45 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 14 8f
>3a4918	d1 08 00 c2 20 29 ff 00 20 86 18 e2 20 dc d2 08
>3a4928	e2 20 a9 2c 20 38 1c c2 20 20 34 17 20 a1 04 ad
>3a4938	38 03 85 08 ad 3a 03 85 0a e2 20 a2 00 00 a9 20
>3a4948	95 7c e8 e0 0b 00 d0 f8 a2 00 00 a0 00 00 b7 21
>3a4958	f0 6d c9 2e f0 30 22 b0 48 3a b0 1f 08 c2 20 48
>3a4968	a9 00 08 5b 68 28 e2 20 a9 0a 8f d1 08 00 c2 20
>3a4978	29 ff 00 20 86 18 e2 20 dc d2 08 95 7c c8 e8 c0
>3a4988	08 00 d0 ca 80 01 c8 a2 08 00 b7 21 f0 31 22 b0
>3a4998	48 3a b0 22 20 d7 45 08 c2 20 48 a9 00 08 5b 68
>3a49a8	28 e2 20 a9 0a 8f d1 08 00 c2 20 29 ff 00 20 86
>3a49b8	18 e2 20 dc d2 08 95 7c c8 e8 c0 0b 00 d0 cb a2
>3a49c8	00 00 a0 00 00 b5 7c 97 08 e8 c8 c0 0b 00 d0 f5
>3a49d8	22 14 11 00 b0 22 20 d7 45 08 c2 20 48 a9 00 08
>3a49e8	5b 68 28 e2 20 a9 15 8f d1 08 00 c2 20 29 ff 00
>3a49f8	20 86 18 e2 20 dc d2 08 20 d7 45 28 60 08 08 c2
>3a4a08	20 48 a9 00 08 5b 68 28 c2 30 20 34 17 20 a1 04
>3a4a18	a5 21 8f 64 03 00 a5 23 8f 66 03 00 e2 20 a9 2c
>3a4a28	20 38 1c c2 20 20 34 17 20 a1 04 a5 21 8f 68 03
>3a4a38	00 a5 23 8f 6a 03 00 22 30 11 00 b0 1f 08 c2 20
>3a4a48	48 a9 00 08 5b 68 28 e2 20 a9 16 8f d1 08 00 c2
>3a4a58	20 29 ff 00 20 86 18 e2 20 dc d2 08 28 60 5c 23
>3a4a68	64 3a 5c 74 62 3a 5c 24 64 3a 5c a0 53 3a 5c fd
>3a4a78	53 3a 5c 30 53 3a 5c b6 52 3a 5c 33 58 3a 5c 21
>3a4a88	4f 3a 5c 4e 52 3a 5c 09 52 3a 5c 93 51 3a 5c 32
>3a4a98	63 3a 5c 2f 50 3a 5c 85 4e 3a 5c ad 63 3a 5c 5d
>3a4aa8	4f 3a 5c 26 64 3a 5c 1f 64 3a 5c 4c 51 3a 5c 27
>3a4ab8	64 3a 18 fb c2 20 a9 ff fe 1b 58 5c c7 4a 3a c2
>3a4ac8	30 22 85 4e 3a 20 08 00 20 0c 00 8b e2 20 a9 00
>3a4ad8	48 ab a2 00 4f 20 af 03 ab 22 6a 4a 3a 22 72 4a
>3a4ae8	3a 80 e2 08 8b e2 20 a9 3a 48 ab c2 10 a2 fe 4a
>3a4af8	20 ae 02 ab 28 6b 41 20 3c 73 74 61 72 74 3e 20
>3a4b08	3c 61 73 73 65 6d 62 6c 79 3e 0d 20 20 41 73 73
>3a4b18	65 6d 62 6c 65 20 61 20 70 72 6f 67 72 61 6d 0d
>3a4b28	0d 43 20 3c 73 74 61 72 74 31 3e 20 3c 73 74 61
>3a4b38	72 74 32 3e 20 5b 6c 65 6e 20 28 31 20 69 66 20
>3a4b48	62 6c 61 6e 6b 29 5d 0d 20 20 43 6f 6d 70 61 72
>3a4b58	65 20 74 6f 20 73 65 63 74 69 6f 6e 73 20 6f 66
>3a4b68	20 6d 65 6d 6f 72 79 0d 0d 44 20 3c 73 74 61 72
>3a4b78	74 3e 20 5b 65 6e 64 5d 0d 20 20 44 69 73 61 73
>3a4b88	73 65 6d 62 6c 65 20 61 20 70 72 6f 67 72 61 6d
>3a4b98	0d 0d 46 20 3c 73 74 61 72 74 3e 20 3c 65 6e 64
>3a4ba8	3e 20 3c 62 79 74 65 3e 0d 20 20 46 69 6c 6c 20
>3a4bb8	61 20 62 6c 6f 63 6b 20 6f 66 20 6d 65 6d 6f 72
>3a4bc8	79 20 77 69 74 68 20 61 20 62 79 74 65 0d 0d 47
>3a4bd8	20 5b 61 64 64 72 65 73 73 5d 0d 20 20 53 74 61
>3a4be8	72 74 20 65 78 65 63 75 74 69 6f 6e 20 61 74 20
>3a4bf8	61 20 6c 6f 63 61 74 69 6f 6e 0d 0d 4a 20 5b 61
>3a4c08	64 64 72 65 73 73 5d 20 2d 20 4a 75 6d 70 20 74
>3a4c18	6f 20 61 20 6c 6f 63 61 74 69 6f 6e 20 69 6e 20
>3a4c28	6d 65 6d 6f 72 79 0d 20 20 4a 75 6d 70 20 74 6f
>3a4c38	20 61 20 6c 6f 63 61 74 69 6f 6e 20 69 6e 20 6d
>3a4c48	65 6d 6f 72 79 0d 0d 48 20 3c 73 74 61 72 74 3e
>3a4c58	20 3c 65 6e 64 3e 20 3c 62 79 74 65 3e 20 5b 62
>3a4c68	79 74 65 5d 2e 2e 0d 20 20 48 75 6e 74 20 66 6f
>3a4c78	72 20 76 61 6c 75 65 73 20 69 6e 20 6d 65 6d 6f
>3a4c88	72 79 0d 0d 4c 20 20 20 20 20 4c 4f 41 44 20 20
>3a4c98	20 20 20 20 20 20 20 22 46 69 6c 65 22 20 5b 64
>3a4ca8	65 73 74 69 6e 61 74 69 6f 6e 5d 0d 4d 20 3c 73
>3a4cb8	74 61 72 74 3e 20 5b 65 6e 64 5d 0d 20 20 44 75
>3a4cc8	6d 70 20 74 68 65 20 76 61 6c 75 65 20 69 6e 20
>3a4cd8	6d 65 6d 6f 72 79 0d 0d 52 20 2d 20 44 69 73 70
>3a4ce8	6c 61 79 20 74 68 65 20 76 61 6c 75 65 73 20 6f
>3a4cf8	66 20 74 68 65 20 72 65 67 69 73 74 65 72 73 0d
>3a4d08	0d 3b 20 3c 50 43 3e 20 3c 41 3e 20 3c 58 3e 20
>3a4d18	3c 59 3e 20 3c 53 50 3e 20 3c 44 42 52 3e 20 3c
>3a4d28	44 50 3e 20 3c 4e 56 4d 58 44 49 5a 43 3e 0d 20
>3a4d38	20 43 68 61 6e 67 65 20 74 68 65 20 63 6f 6e 74
>3a4d48	65 6e 74 73 20 6f 66 20 74 68 65 20 72 65 67 69
>3a4d58	73 74 65 72 73 0d 0d 53 20 20 20 20 20 53 41 56
>3a4d68	45 20 20 20 20 20 20 20 20 20 22 46 69 6c 65 22
>3a4d78	20 3c 73 74 61 72 74 3e 20 3c 65 6e 64 3e 0d 54
>3a4d88	20 3c 73 74 61 72 74 3e 20 3c 65 6e 64 3e 20 3c
>3a4d98	64 65 73 74 69 6e 61 74 69 6f 6e 3e 0d 20 20 54
>3a4da8	72 61 6e 73 66 65 72 20 28 63 6f 70 79 29 20 64
>3a4db8	61 74 61 20 77 69 74 68 69 6e 20 6d 65 6d 6f 72
>3a4dc8	79 0d 0d 57 20 3c 62 79 74 65 3e 0d 20 20 53 65
>3a4dd8	74 20 74 68 65 20 72 65 67 69 73 74 65 72 20 77
>3a4de8	69 64 74 68 20 66 6c 61 67 73 20 66 6f 72 20 74
>3a4df8	68 65 20 64 69 73 61 73 73 65 6d 62 6c 65 72 0d
>3a4e08	0d 58 20 2d 20 52 65 74 75 72 6e 20 74 6f 20 42
>3a4e18	41 53 49 43 0d 0d 3e 20 3c 73 74 61 72 74 3e 20
>3a4e28	3c 62 79 74 65 3e 20 5b 62 79 74 65 5d 2e 2e 2e
>3a4e38	0d 20 20 45 64 69 74 20 64 61 74 61 20 69 6e 20
>3a4e48	6d 65 6d 6f 72 79 0d 0d 3f 20 2d 20 44 69 73 70
>3a4e58	6c 61 79 20 61 20 73 68 6f 72 74 20 68 65 6c 70
>3a4e68	20 73 63 72 65 65 6e 0d 0d 00 08 08 c2 20 48 a9
>3a4e78	46 08 5b 68 28 e2 20 a5 0d 85 4e 28 6b 08 e2 20
>3a4e88	48 a9 3a 48 ab 68 28 a2 64 64 20 ae 02 e2 20 a9
>3a4e98	3b 20 18 00 a9 20 20 18 00 c2 30 08 e2 20 48 a9
>3a4ea8	00 48 ab 68 28 a0 03 00 a2 42 02 20 31 02 c2 20
>3a4eb8	a9 20 00 20 18 00 af 44 02 00 20 be 02 a9 20 00
>3a4ec8	20 18 00 af 46 02 00 20 be 02 a9 20 00 20 18 00
>3a4ed8	af 48 02 00 20 be 02 a9 20 00 20 18 00 af 4a 02
>3a4ee8	00 20 be 02 a9 20 00 20 18 00 af 4e 02 00 20 d8
>3a4ef8	02 a9 20 00 20 18 00 20 18 00 af 4c 02 00 20 be
>3a4f08	02 a9 20 00 20 18 00 08 e2 20 ad 4f 02 22 7d 61
>3a4f18	3a 28 20 21 02 20 21 02 6b 08 0b 08 c2 20 48 a9
>3a4f28	46 08 5b 68 28 e2 20 a5 15 87 0d e2 20 a5 0f c5
>3a4f38	13 d0 0e c2 20 a5 0d c5 11 d0 06 20 21 02 2b 28
>3a4f48	6b c2 20 18 a5 0d 69 01 00 85 0d e2 20 a5 0e 69
>3a4f58	00 85 0e 80 d0 08 0b 08 c2 20 48 a9 46 08 5b 68
>3a4f68	28 e2 20 a5 0f c5 17 90 45 c2 20 a5 0d c5 15 90
>3a4f78	3d e2 20 a7 0d 87 15 a5 0f c5 13 d0 0b c2 20 a5
>3a4f88	0d c5 11 d0 03 4c 14 50 c2 20 18 a5 0d 69 01 00
>3a4f98	85 0d e2 20 a5 0e 69 00 85 0e c2 20 18 a5 15 69
>3a4fa8	01 00 85 15 e2 20 a5 16 69 00 85 16 80 c3 c2 20
>3a4fb8	38 a5 11 e5 0d 85 19 e2 20 a5 13 e5 0f 85 1b c2
>3a4fc8	20 18 a5 19 65 15 85 15 e2 20 a5 1b 65 17 85 17
>3a4fd8	e2 20 a7 11 87 15 a5 13 c5 0f d0 0a c2 20 a5 11
>3a4fe8	c5 0d d0 02 80 26 c2 20 38 a5 11 e9 01 00 85 11
>3a4ff8	e2 20 a5 12 e9 00 85 12 c2 20 38 a5 15 e9 01 00
>3a5008	85 15 e2 20 a5 16 e9 00 85 16 80 c4 20 21 02 2b
>3a5018	28 6b 08 e2 20 c9 21 90 0b c9 7f 90 04 c9 a0 90
>3a5028	03 28 38 6b 28 18 6b 08 8b 0b 08 c2 20 48 a9 46
>3a5038	08 5b 68 28 e2 20 a9 00 8f b4 08 00 a5 31 c9 02
>3a5048	b0 16 c9 01 90 20 c2 20 18 a5 0d 69 00 01 85 11
>3a5058	e2 20 a5 0f 69 00 85 13 c2 20 a5 0d 85 32 e2 20
>3a5068	a5 0f 85 34 80 12 c2 20 18 a5 32 69 00 01 85 11
>3a5078	e2 20 a5 34 69 00 85 13 e2 20 a0 00 00 c2 20 a5
>3a5088	32 85 19 e2 20 a5 34 85 1b e2 20 a7 19 22 1a 50
>3a5098	3a b0 02 a9 3f 99 7c 08 c2 20 18 a5 19 69 01 00
>3a50a8	85 19 e2 20 a5 1b 69 00 85 1b c8 c0 08 00 90 db
>3a50b8	a9 00 99 7c 08 a9 3e 20 18 00 a9 20 20 18 00 e2
>3a50c8	20 a5 34 20 d8 02 a9 3a 20 18 00 c2 20 a5 32 20
>3a50d8	be 02 c2 20 a9 08 00 85 47 e2 20 a9 20 20 18 00
>3a50e8	a7 32 20 d8 02 22 5c 61 3a e2 20 c6 47 d0 ea a9
>3a50f8	20 20 18 00 a9 20 20 18 00 08 e2 20 48 a9 00 48
>3a5108	ab 68 28 a2 7c 08 20 ae 02 20 21 02 20 38 02 a5
>3a5118	34 c5 13 90 0f c2 20 a5 32 c5 11 90 07 20 21 02
>3a5128	2b ab 28 6b 4c 80 50 08 8d 90 08 e2 20 bd 00 00
>3a5138	99 00 00 ad 90 08 f0 0a c8 e8 e8 e8 e8 ce 90 08
>3a5148	80 eb 28 6b 08 0b 8b 08 c2 20 48 a9 46 08 5b 68
>3a5158	28 08 e2 20 48 a9 00 48 ab 68 28 c2 30 a5 0d 85
>3a5168	32 a5 0f 85 34 e2 20 a5 31 3a 85 47 a2 57 08 a0
>3a5178	7c 08 22 2f 51 3a a0 00 00 b9 7c 08 87 32 22 5c
>3a5188	61 3a c8 c4 47 d0 f2 ab 2b 28 6b 08 0b 8b 08 c2
>3a5198	20 48 a9 46 08 5b 68 28 08 e2 20 48 a9 00 48 ab
>3a51a8	68 28 e2 20 c2 10 a5 31 3a 3a 85 47 a2 5b 08 a0
>3a51b8	7c 08 22 2f 51 3a c2 20 a5 0d 85 32 a5 0f 85 34
>3a51c8	c2 20 a5 34 c5 13 d0 06 a5 32 c5 11 f0 2c e2 20
>3a51d8	a0 00 00 b7 32 d9 7c 08 d0 1a c8 c4 47 d0 f4 c2
>3a51e8	20 a5 32 85 4a a5 34 85 4c 22 06 5c 3a e2 20 a9
>3a51f8	20 20 18 00 22 5c 61 3a 80 c6 20 21 02 ab 2b 28
>3a5208	6b 08 c2 20 48 a9 46 08 5b 68 28 e2 20 a5 31 f0
>3a5218	0e c2 30 a5 0d 8f 40 02 00 a5 0f 8f 42 02 00 af
>3a5228	46 02 00 aa af 48 02 00 a8 af 4a 02 00 1b af 4c
>3a5238	02 00 5b e2 20 a9 3a 48 a9 52 48 a9 49 48 4c 80
>3a5248	52 ea 5c 04 00 3a 08 c2 20 48 a9 46 08 5b 68 28
>3a5258	e2 20 a5 31 f0 c9 c2 30 a5 0d 8f 40 02 00 a5 0f
>3a5268	8f 42 02 00 af 46 02 00 aa af 48 02 00 a8 af 4a
>3a5278	02 00 1b af 4c 02 00 5b e2 20 af 4e 02 00 48 ab
>3a5288	a9 5c 8f a0 08 00 af 42 02 00 8f a3 08 00 af 41
>3a5298	02 00 8f a2 08 00 af 40 02 00 8f a1 08 00 af 4f
>3a52a8	02 00 48 c2 20 af 44 02 00 28 5c a0 08 00 08 0b
>3a52b8	8b 08 e2 20 48 a9 3a 48 ab 68 28 08 c2 20 48 a9
>3a52c8	46 08 5b 68 28 c2 10 e2 20 a5 31 c9 02 f0 0c c9
>3a52d8	03 d0 11 c2 20 a5 15 85 47 80 11 c2 20 a9 01 00
>3a52e8	85 47 80 08 a2 28 64 20 ae 02 80 35 a5 0d 85 4a
>3a52f8	a5 0f 85 4c a0 00 00 e2 20 a7 4a d7 11 f0 09 22
>3a5308	06 5c 3a a9 20 20 18 00 c2 20 18 a5 4a 69 01 00
>3a5318	85 4a a5 4c 69 00 00 85 4c c8 c4 47 d0 d9 20 21
>3a5328	02 20 21 02 ab 2b 28 6b 08 0b 8b 08 e2 20 48 a9
>3a5338	00 48 ab 68 28 08 c2 20 48 a9 46 08 5b 68 28 e2
>3a5348	20 a5 31 f0 4f a6 0d 8e 40 02 a6 0f 8e 42 02 c9
>3a5358	01 f0 41 a6 11 8e 44 02 c9 02 f0 38 a6 15 8e 46
>3a5368	02 c9 03 f0 2f a6 19 8e 48 02 c9 04 f0 26 a6 1d
>3a5378	8e 4a 02 c9 05 f0 1d e2 10 a6 21 8e 4e 02 c9 06
>3a5388	f0 12 c2 10 a6 25 8e 4c 02 c9 07 f0 07 e2 10 a6
>3a5398	29 8e 4f 02 ab 2b 28 6b 08 0b 8b 08 c2 20 48 a9
>3a53a8	46 08 5b 68 28 e2 20 c2 10 a2 00 00 bf 95 64 3a
>3a53b8	f0 18 c7 08 f0 03 e8 80 f3 c2 20 8a 0a aa bf d6
>3a53c8	53 3a 8f 2d 08 00 22 fa 53 3a ab 2b 28 6b 76 4a
>3a53d8	7e 4a 82 4a 86 4a 8a 4a 8e 4a 92 4a 96 4a 9a 4a
>3a53e8	9e 4a 7a 4a a2 4a a6 4a aa 4a 72 4e ae 4a b2 4a
>3a53f8	eb 4a 6c 2d 08 08 8b 0b 08 c2 20 48 a9 46 08 5b
>3a5408	68 28 e2 20 a5 31 c9 02 b0 03 4c a3 55 c2 20 a5
>3a5418	0d 85 32 a5 0f 85 34 c2 20 22 a5 57 3a c9 ff ff
>3a5428	f0 10 85 54 e2 20 a5 31 c9 03 f0 36 a9 13 85 4f
>3a5438	80 4c 20 21 02 08 e2 20 48 a9 3a 48 ab 68 28 c2
>3a5448	10 a2 da 55 20 ae 02 4c a3 55 20 21 02 08 e2 20
>3a5458	48 a9 3a 48 ab 68 28 c2 10 a2 e9 55 20 ae 02 4c
>3a5468	a3 55 e2 20 22 db 57 3a c9 ff f0 de 85 4f c9 03
>3a5478	f0 62 c9 0b f0 5e c9 13 f0 04 c9 08 f0 00 22 d3
>3a5488	56 3a b0 03 4c 6c 55 87 32 22 5c 61 3a 08 e2 20
>3a5498	48 a9 00 48 ab 68 28 c2 20 a5 32 85 56 a5 34 85
>3a54a8	58 e2 20 a5 4f c9 12 f0 6c c9 16 f0 68 c9 14 f0
>3a54b8	7c 29 3f c9 02 d0 03 4c 9a 55 c2 20 29 ff 00 aa
>3a54c8	e2 20 bf a2 60 3a c9 03 f0 57 c9 02 f0 5f c9 01
>3a54d8	f0 67 80 71 c2 20 a5 54 c9 1a 5d f0 26 c9 7e 5d
>3a54e8	f0 2a c9 fe 5c f0 1c c9 02 5d f0 17 c9 0a 5d f0
>3a54f8	12 c9 f2 5c f0 0d c9 06 5d f0 08 c9 ee 5c f0 03
>3a5508	4c 86 54 e2 20 a9 12 85 4f 4c 86 54 e2 20 a9 16
>3a5518	85 4f 4c 86 54 22 16 56 3a 90 60 c9 02 f0 0e 80
>3a5528	18 a0 02 00 b9 96 08 97 56 22 5c 61 3a a0 01 00
>3a5538	b9 96 08 97 56 22 5c 61 3a a0 00 00 b9 96 08 97
>3a5548	56 22 5c 61 3a e2 20 a9 41 20 18 00 a9 20 20 18
>3a5558	00 a6 32 86 4a a6 34 86 4c 22 06 5c 3a a9 20 20
>3a5568	18 00 80 37 20 21 02 08 e2 20 48 a9 3a 48 ab 68
>3a5578	28 c2 10 a2 a7 55 20 ae 02 80 20 20 21 02 08 e2
>3a5588	20 48 a9 3a 48 ab 68 28 c2 10 a2 f7 55 20 ae 02
>3a5598	80 09 a5 4f 29 c0 d0 95 4c 41 55 2b ab 28 6b 41
>3a55a8	64 64 72 65 73 73 69 6e 67 20 6d 6f 64 65 20 6e
>3a55b8	6f 74 20 64 65 66 69 6e 65 64 20 66 6f 72 20 74
>3a55c8	68 61 74 20 69 6e 73 74 72 75 63 74 69 6f 6e 2e
>3a55d8	0d 00 42 61 64 20 6d 6e 65 6d 6f 6e 69 63 2e 0d
>3a55e8	00 42 61 64 20 6f 70 65 72 61 6e 64 2e 0d 00 52
>3a55f8	65 6c 61 74 69 76 65 20 6f 66 66 73 65 74 20 69
>3a5608	73 20 74 6f 6f 20 6c 61 72 67 65 2e 0d 00 08 0b
>3a5618	08 c2 20 48 a9 46 08 5b 68 28 e2 20 a5 4f c9 12
>3a5628	f0 0a c2 20 18 a5 32 69 02 00 80 08 c2 20 18 a5
>3a5638	32 69 01 00 85 4a a5 34 69 00 00 85 4c 38 a5 50
>3a5648	e5 4a 85 50 a5 52 e5 4c 85 52 e2 20 a5 4f c9 16
>3a5658	f0 1e a5 50 30 0c a5 51 d0 2a a5 52 d0 26 a9 01
>3a5668	80 26 a5 51 c9 ff d0 1c a5 52 c9 ff d0 16 80 18
>3a5678	a5 51 30 06 a5 52 d0 0c 80 0e a5 52 c9 ff d0 04
>3a5688	a9 02 80 04 2b 28 18 6b 2b 28 38 6b 08 0b c2 10
>3a5698	da 08 c2 20 48 a9 46 08 5b 68 28 e2 20 a2 00 00
>3a56a8	df 00 d0 3a f0 08 e8 e0 10 00 f0 1b 80 f2 c2 20
>3a56b8	06 50 26 52 06 50 26 52 06 50 26 52 06 50 26 52
>3a56c8	e2 20 8a 05 50 85 50 fa 2b 28 6b 0b 8b 08 c2 20
>3a56d8	48 a9 46 08 5b 68 28 08 e2 20 48 a9 3a 48 ab 68
>3a56e8	28 e2 20 a5 4f 29 3f 85 4a c2 30 a2 00 00 a0 00
>3a56f8	00 bd a0 5d f0 1b c5 54 d0 0d e2 20 b9 a2 5f 29
>3a5708	3f c5 4a f0 07 c2 20 e8 e8 c8 80 e5 98 38 ab 2b
>3a5718	6b 18 ab 2b 6b 08 0b 08 c2 20 48 a9 46 08 5b 68
>3a5728	28 e2 20 c2 10 a0 00 00 64 50 64 52 b7 03 f0 11
>3a5738	c9 64 f0 19 48 b7 36 85 4a 68 c5 4a d0 0b c8 80
>3a5748	eb b7 36 d0 04 2b 28 38 6b 2b 28 18 6b e2 20 b7
>3a5758	36 c9 3a b0 04 c9 30 b0 14 c9 47 b0 04 c9 41 b0
>3a5768	0c c9 67 b0 e4 c9 61 b0 02 80 de 29 df 22 94 56
>3a5778	3a 80 cb 0b 08 c2 20 48 a9 46 08 5b 68 28 a0 00
>3a5788	00 e2 20 b7 03 f0 03 c8 80 f9 c2 20 c8 5a 68 18
>3a5798	65 03 85 03 a5 05 69 00 00 85 05 2b 6b 0b 08 c2
>3a57a8	20 48 a9 46 08 5b 68 28 c2 20 a5 11 85 36 a5 13
>3a57b8	85 38 a9 2e 5c 85 03 a9 3a 00 85 05 22 1d 57 3a
>3a57c8	b0 0d 22 7b 57 3a a7 03 d0 f2 a9 ff ff 80 02 a5
>3a57d8	03 2b 6b 08 0b 08 c2 20 48 a9 46 08 5b 68 28 c2
>3a57e8	30 a5 15 85 36 a5 17 85 38 a9 ba 60 85 03 a9 3a
>3a57f8	00 85 05 22 1d 57 3a b0 22 22 7b 57 3a c2 20 18
>3a5808	a5 03 69 01 00 85 03 a5 05 69 00 00 85 05 e2 20
>3a5818	a7 03 d0 df c2 20 a9 ff ff 80 0d 22 7b 57 3a e2
>3a5828	20 a7 03 c2 20 29 ff 00 2b 28 6b 08 8b 0b 08 c2
>3a5838	20 48 a9 46 08 5b 68 28 e2 20 a9 00 8f b4 08 00
>3a5848	a5 31 c9 02 b0 16 c9 01 90 20 c2 20 18 a5 0d 69
>3a5858	00 01 85 11 e2 20 a5 0f 69 00 85 13 c2 20 a5 0d
>3a5868	85 32 e2 20 a5 0f 85 34 80 12 c2 20 18 a5 32 69
>3a5878	00 01 85 11 e2 20 a5 34 69 00 85 13 22 9f 58 3a
>3a5888	e2 20 a5 34 c5 13 90 f4 c2 20 a5 32 c5 11 90 ec
>3a5898	20 21 02 2b ab 28 6b 08 0b e2 20 a9 41 20 18 00
>3a58a8	a9 20 20 18 00 08 c2 20 48 a9 78 08 5b 68 28 c2
>3a58b8	20 a5 00 85 18 e2 20 a5 02 85 1a 22 06 5c 3a a9
>3a58c8	20 20 18 00 c2 20 18 a5 00 69 01 00 85 18 e2 20
>3a58d8	a5 02 69 00 85 1a e2 20 c2 10 a7 00 c9 c2 d0 0b
>3a58e8	48 a7 18 49 ff 2f 94 08 00 80 0b c9 e2 d0 0c 48
>3a58f8	a7 18 0f 94 08 00 8f 94 08 00 68 c2 20 29 ff 00
>3a5908	0a aa bf a0 5d 3a aa 22 80 5b 3a e2 20 a7 00 aa
>3a5918	bf a2 5f 3a 22 5c 61 3a 22 2d 59 3a 20 21 02 20
>3a5928	38 02 2b 28 6b 08 e2 20 48 29 3f 0a c2 10 aa 68
>3a5938	7c 3b 59 6b 59 86 59 8d 59 b2 59 b9 59 d4 59 f6
>3a5948	59 07 5a 44 5a 4c 5a 5d 5a 6e 5a 75 5a 9a 5a c7
>3a5958	5a 33 5a 18 5a e5 59 ba 5a c4 5a d8 5a 07 5b b5
>3a5968	5a 18 5b a9 28 20 18 00 22 2f 5b 3a a9 2c 20 18
>3a5978	00 a9 58 20 18 00 a9 29 20 18 00 4c 29 5b 22 2f
>3a5988	5b 3a 4c 29 5b e2 20 48 a9 23 20 18 00 68 29 c0
>3a5998	c9 00 f0 0f 4a 4a 2f 94 08 00 d0 07 22 39 5b 3a
>3a59a8	4c 29 5b 22 2f 5b 3a 4c 29 5b 22 39 5b 3a 4c 29
>3a59b8	5b a9 28 20 18 00 22 2f 5b 3a a9 29 20 18 00 a9
>3a59c8	2c 20 18 00 a9 59 20 18 00 4c 29 5b 22 2f 5b 3a
>3a59d8	a9 2c 20 18 00 a9 58 20 18 00 4c 29 5b 22 2f 5b
>3a59e8	3a a9 2c 20 18 00 a9 59 20 18 00 4c 29 5b 22 39
>3a59f8	5b 3a a9 2c 20 18 00 a9 59 20 18 00 4c 29 5b 22
>3a5a08	39 5b 3a a9 2c 20 18 00 a9 58 20 18 00 4c 29 5b
>3a5a18	a9 28 20 18 00 22 39 5b 3a a9 2c 20 18 00 a9 58
>3a5a28	20 18 00 a9 29 20 18 00 4c 29 5b a9 28 20 18 00
>3a5a38	22 2f 5b 3a a9 29 20 18 00 4c 29 5b a9 41 20 18
>3a5a48	00 4c 2d 5b 22 2f 5b 3a a9 2c 20 18 00 a9 53 20
>3a5a58	18 00 4c 29 5b a9 5b 20 18 00 22 2f 5b 3a a9 5d
>3a5a68	20 18 00 4c 29 5b 22 47 5b 3a 4c 2d 5b a9 28 20
>3a5a78	18 00 22 2f 5b 3a a9 2c 20 18 00 a9 53 20 18 00
>3a5a88	a9 29 20 18 00 a9 2c 20 18 00 a9 59 20 18 00 4c
>3a5a98	29 5b a9 5b 20 18 00 22 2f 5b 3a a9 5d 20 18 00
>3a5aa8	a9 2c 20 18 00 a9 59 20 18 00 4c 29 5b a0 02 00
>3a5ab8	80 03 a0 01 00 22 ad 5b 3a 4c 2d 5b 4c 2d 5b 22
>3a5ac8	47 5b 3a a9 2c 20 18 00 a9 58 20 18 00 4c 2d 5b
>3a5ad8	a9 23 20 18 00 8b a5 02 48 ab a6 00 e8 a0 01 00
>3a5ae8	22 31 02 3a a9 2c 20 18 00 a9 23 20 18 00 a6 00
>3a5af8	a0 01 00 22 31 02 3a ab 22 5c 61 3a 4c 29 5b a9
>3a5b08	28 20 18 00 22 39 5b 3a a9 29 20 18 00 4c 29 5b
>3a5b18	a9 5b 20 18 00 22 39 5b 3a a9 5d 20 18 00 4c 29
>3a5b28	5b 22 5c 61 3a 28 6b 08 e2 20 a7 00 20 d8 02 28
>3a5b38	6b 08 c2 30 a7 00 20 be 02 22 5c 61 3a 28 6b 08
>3a5b48	8b 0b c2 30 5a 08 c2 20 48 a9 78 08 5b 68 28 08
>3a5b58	e2 20 48 a9 00 48 ab 68 28 e2 20 a0 00 00 a7 00
>3a5b68	99 90 08 22 5c 61 3a c8 c0 03 00 d0 f1 22 06 5c
>3a5b78	3a c2 30 7a 2b ab 28 6b 08 8b e2 20 c2 10 08 e2
>3a5b88	20 48 a9 3a 48 ab 68 28 bd 00 00 20 18 00 e8 bd
>3a5b98	00 00 20 18 00 e8 bd 00 00 20 18 00 e8 a9 20 20
>3a5ba8	18 00 ab 28 6b 08 0b 08 c2 20 48 a9 78 08 5b 68
>3a5bb8	28 e2 20 c0 02 00 f0 14 a7 00 85 18 30 06 64 19
>3a5bc8	64 1a 80 1e a9 ff 85 19 85 1a 80 16 a7 00 85 18
>3a5bd8	22 5c 61 3a a7 00 85 19 30 04 64 1a 80 04 a9 ff
>3a5be8	85 1a c2 20 38 a5 00 65 18 85 18 e2 20 a5 02 65
>3a5bf8	1a 85 1a 22 06 5c 3a 22 5c 61 3a 2b 28 6b 08 0b
>3a5c08	c2 20 48 08 c2 20 48 a9 46 08 5b 68 28 e2 20 a5
>3a5c18	4c 20 d8 02 e2 20 a9 3a 20 18 00 c2 20 a5 4a 20
>3a5c28	be 02 68 2b 28 6b 4f 52 41 00 41 4e 44 00 45 4f
>3a5c38	52 00 41 44 43 00 53 54 41 00 4c 44 41 00 43 4d
>3a5c48	50 00 53 42 43 00 41 53 4c 00 52 4f 4c 00 4c 53
>3a5c58	52 00 52 4f 52 00 53 54 58 00 4c 44 58 00 44 45
>3a5c68	43 00 49 4e 43 00 42 49 54 00 4a 4d 50 00 53 54
>3a5c78	59 00 4c 44 59 00 43 50 59 00 43 50 58 00 42 52
>3a5c88	4b 00 4a 53 52 00 52 54 49 00 52 54 53 00 50 48
>3a5c98	50 00 50 4c 50 00 50 48 41 00 50 4c 41 00 44 45
>3a5ca8	59 00 54 41 59 00 49 4e 59 00 49 4e 58 00 43 4c
>3a5cb8	43 00 53 45 43 00 43 4c 49 00 53 45 49 00 54 59
>3a5cc8	41 00 43 4c 56 00 43 4c 44 00 53 45 44 00 54 58
>3a5cd8	41 00 54 58 53 00 54 41 58 00 54 53 58 00 44 45
>3a5ce8	58 00 4e 4f 50 00 42 50 4c 00 42 4d 49 00 42 56
>3a5cf8	43 00 42 56 53 00 42 43 43 00 42 43 53 00 42 4e
>3a5d08	45 00 42 45 51 00 54 53 42 00 54 52 42 00 53 54
>3a5d18	5a 00 42 52 41 00 50 48 59 00 50 4c 59 00 50 48
>3a5d28	58 00 50 4c 58 00 50 48 44 00 50 4c 44 00 50 48
>3a5d38	4b 00 52 54 4c 00 50 48 42 00 50 4c 42 00 57 41
>3a5d48	49 00 58 42 41 00 54 43 53 00 54 53 43 00 54 43
>3a5d58	44 00 54 44 43 00 54 58 59 00 54 59 58 00 53 54
>3a5d68	50 00 58 43 45 00 43 4f 50 00 4a 53 4c 00 57 44
>3a5d78	4d 00 50 45 52 00 42 52 4c 00 52 45 50 00 53 45
>3a5d88	50 00 4d 56 50 00 4d 56 4e 00 50 45 49 00 50 45
>3a5d98	41 00 4a 4d 4c 00 00 00 86 5c 2e 5c 6e 5d 2e 5c
>3a5da8	0e 5d 2e 5c 4e 5c 2e 5c 96 5c 2e 5c 4e 5c 2e 5d
>3a5db8	0e 5d 2e 5c 4e 5c 2e 5c ee 5c 2e 5c 2e 5c 2e 5c
>3a5dc8	12 5d 2e 5c 4e 5c 2e 5c b6 5c 2e 5c 6a 5c 4e 5d
>3a5dd8	12 5d 2e 5c 4e 5c 2e 5c 8a 5c 32 5c 72 5d 32 5c
>3a5de8	6e 5c 32 5c 52 5c 32 5c 9a 5c 32 5c 52 5c 32 5d
>3a5df8	6e 5c 32 5c 52 5c 32 5c f2 5c 32 5c 32 5c 32 5c
>3a5e08	6e 5c 32 5c 52 5c 32 5c ba 5c 32 5c 66 5c 52 5d
>3a5e18	6e 5c 32 5c 52 5c 32 5c 8e 5c 36 5c 76 5d 36 5c
>3a5e28	8a 5d 36 5c 56 5c 36 5c 9e 5c 36 5c 56 5c 36 5d
>3a5e38	72 5c 36 5c 56 5c 36 5c f6 5c 36 5c 36 5c 36 5c
>3a5e48	8e 5d 36 5c 56 5c 36 5c be 5c 36 5c 1e 5d 56 5d
>3a5e58	9a 5d 36 5c 56 5c 36 5c 92 5c 3a 5c 7a 5d 3a 5c
>3a5e68	16 5d 3a 5c 5a 5c 3a 5c a2 5c 3a 5c 5a 5c 3a 5d
>3a5e78	72 5c 3a 5c 5a 5c 3a 5c fa 5c 3a 5c 3a 5c 3a 5c
>3a5e88	16 5d 3a 5c 5a 5c 3a 5c c2 5c 3a 5c 22 5d 5a 5d
>3a5e98	72 5c 3a 5c 5a 5c 3a 5c 1a 5d 3e 5c 7e 5d 3e 5c
>3a5ea8	76 5c 3e 5c 5e 5c 3e 5c a6 5c 6e 5c d6 5c 3e 5d
>3a5eb8	76 5c 3e 5c 5e 5c 3e 5c fe 5c 3e 5c 3e 5c 3e 5c
>3a5ec8	76 5c 3e 5c 5e 5c 3e 5c c6 5c 3e 5c da 5c 5e 5d
>3a5ed8	16 5d 3e 5c 16 5d 3e 5c 7a 5c 42 5c 62 5c 42 5c
>3a5ee8	7a 5c 42 5c 62 5c 42 5c aa 5c 42 5c de 5c 42 5d
>3a5ef8	7a 5c 42 5c 62 5c 42 5c 02 5d 42 5c 42 5c 42 5c
>3a5f08	7a 5c 42 5c 62 5c 42 5c ca 5c 42 5c e2 5c 62 5d
>3a5f18	7a 5c 42 5c 62 5c 42 5c 7e 5c 46 5c 82 5d 46 5c
>3a5f28	7e 5c 46 5c 66 5c 46 5c ae 5c 46 5c e6 5c 46 5d
>3a5f38	7e 5c 46 5c 66 5c 46 5c 06 5d 46 5c 46 5c 46 5c
>3a5f48	92 5d 46 5c 66 5c 46 5c ce 5c 46 5c 26 5d 66 5d
>3a5f58	9a 5d 46 5c 66 5c 46 5c 82 5c 4a 5c 86 5d 4a 5c
>3a5f68	82 5c 4a 5c 6a 5c 4a 5c b2 5c 4a 5c ea 5c 4a 5d
>3a5f78	82 5c 4a 5c 6a 5c 4a 5c 0a 5d 4a 5c 4a 5c 4a 5c
>3a5f88	96 5d 4a 5c 6a 5c 4a 5c d2 5c 4a 5c 2a 5d 6a 5d
>3a5f98	8a 5c 4a 5c 6a 5c 4a 5c 00 00 13 00 02 09 01 01
>3a5fa8	01 0a 13 82 08 13 03 03 03 0b 12 04 0f 0c 01 05
>3a5fb8	05 0d 13 06 08 13 03 07 07 0e 03 00 0b 09 01 01
>3a5fc8	01 0a 13 82 08 13 03 03 03 0b 12 04 0f 0c 05 05
>3a5fd8	05 0d 13 06 08 13 07 07 07 0e 13 00 13 09 14 01
>3a5fe8	01 0a 13 82 08 13 03 03 03 0b 12 04 0f 0c 14 05
>3a5ff8	05 0d 13 06 13 13 0b 07 07 0b 13 00 16 09 01 01
>3a6008	01 0a 13 82 08 13 15 03 03 0b 12 04 0f 0c 05 05
>3a6018	05 0d 13 06 13 13 10 07 07 0e 12 00 16 09 01 01
>3a6028	01 0a 13 82 13 13 03 03 03 0b 12 04 0f 0c 05 05
>3a6038	11 0d 13 06 13 13 03 07 07 0e 82 00 42 09 01 01
>3a6048	01 0a 13 82 13 13 03 03 03 0b 12 04 0f 0c 05 05
>3a6058	11 0d 13 06 13 13 07 07 06 0e 42 00 02 09 01 01
>3a6068	01 0a 13 82 13 13 03 03 03 0b 12 04 0f 0c 01 05
>3a6078	05 0d 13 06 13 13 17 07 07 0e 42 00 02 09 01 01
>3a6088	01 0f 13 82 13 13 03 03 03 0b 12 04 0f 0c 03 05
>3a6098	05 0d 13 06 13 13 10 07 07 0e 01 01 01 02 01 01
>3a60a8	02 02 00 01 01 03 01 01 03 01 02 01 01 00 02 02
>3a60b8	02 02 41 00 08 64 64 3a 64 64 64 64 2c 58 00 0e
>3a60c8	64 64 3a 64 64 64 64 00 0b 64 64 64 64 2c 58 00
>3a60d8	07 64 64 64 64 2c 59 00 06 64 64 64 64 00 03 64
>3a60e8	64 2c 58 00 05 64 64 2c 59 00 11 64 64 2c 53 00
>3a60f8	09 64 64 00 01 23 64 64 64 64 00 c2 23 64 64 2c
>3a6108	23 64 64 00 14 23 64 64 00 02 28 64 64 2c 53 29
>3a6118	2c 59 00 0c 28 64 64 64 64 2c 58 29 00 10 28 64
>3a6128	64 64 64 29 00 10 28 64 64 2c 58 29 00 00 28 64
>3a6138	64 29 2c 59 00 04 28 64 64 29 00 0f 5b 64 64 64
>3a6148	64 5d 00 17 5b 64 64 5d 2c 59 00 0d 5b 64 64 5d
>3a6158	00 0a 00 00 08 c2 20 48 18 af 78 08 00 69 01 00
>3a6168	8f 78 08 00 e2 20 af 7a 08 00 69 00 8f 7a 08 00
>3a6178	c2 20 68 28 6b 08 c2 10 e2 20 da a2 08 00 0a b0
>3a6188	08 48 a9 30 20 18 00 80 06 48 a9 31 20 18 00 68
>3a6198	ca d0 eb fa 28 6b 08 c2 20 48 a9 46 08 5b 68 28
>3a61a8	e2 20 a7 32 f0 0a c9 20 d0 06 22 5c 61 3a 80 f2
>3a61b8	6b 08 08 c2 20 48 a9 46 08 5b 68 28 22 5c 61 3a
>3a61c8	22 9e 61 3a c2 30 a5 31 c2 20 29 ff 00 0a 0a aa
>3a61d8	a5 32 95 0d a5 34 95 0f e2 20 a7 32 f0 14 c9 22
>3a61e8	f0 06 22 5c 61 3a 80 f2 a9 00 87 32 22 5c 61 3a
>3a61f8	e6 31 28 6b 08 c2 20 48 a9 46 08 5b 68 28 e2 20
>3a6208	64 4a c2 20 64 50 64 52 e2 20 a7 32 c9 3a f0 0d
>3a6218	20 56 03 90 0e 22 94 56 3a a9 01 85 4a 22 5c 61
>3a6228	3a 80 e5 a5 4a f0 16 a5 31 c2 20 29 ff 00 0a 0a
>3a6238	aa a5 50 95 0d a5 52 95 0f e2 20 e6 31 6b e2 20
>3a6248	64 31 22 9e 61 3a a7 32 f0 21 c9 22 d0 06 22 b9
>3a6258	61 3a 80 0a 22 fc 61 3a a5 31 c9 09 b0 0d a7 32
>3a6268	f0 09 c9 20 f0 dc 20 56 03 b0 d7 6b 08 0b 08 c2
>3a6278	20 48 a9 46 08 5b 68 28 c2 10 e2 20 a2 31 00 74
>3a6288	00 ca d0 fb a9 00 85 02 85 34 c2 20 a9 00 4f 85
>3a6298	00 85 32 e2 20 22 9e 61 3a c9 00 f0 38 c2 20 a5
>3a62a8	32 85 08 e2 20 a5 34 85 0a a2 01 00 22 5c 61 3a
>3a62b8	a7 32 d0 06 86 0b 64 31 80 1b c9 20 f0 03 e8 80
>3a62c8	eb 86 0b a9 00 87 32 22 5c 61 3a a7 08 c9 41 f0
>3a62d8	07 22 46 62 3a 2b 28 6b 22 9e 61 3a a7 32 f0 f5
>3a62e8	22 fc 61 3a 22 9e 61 3a a7 32 f0 e9 c2 20 a5 32
>3a62f8	85 11 e2 20 a5 34 85 13 22 5c 61 3a a7 32 f0 26
>3a6308	c9 20 d0 f4 a9 00 87 32 e6 31 22 5c 61 3a 22 9e
>3a6318	61 3a a7 32 f0 bf c2 20 a5 32 85 15 e2 20 a5 34
>3a6328	85 17 e6 31 80 af e6 31 80 ab 08 c2 10 e2 20 a5
>3a6338	31 d0 0f a2 28 64 a9 3a 48 ab 20 ae 02 20 21 02
>3a6348	80 61 c2 20 a5 0d 8f 21 08 00 a5 0f 8f 23 08 00
>3a6358	20 26 45 e2 20 a5 31 c9 01 d0 0f c2 20 a9 ff ff
>3a6368	8f 54 03 00 8f 56 03 00 80 0e c2 20 a5 11 8f 54
>3a6378	03 00 a5 13 8f 56 03 00 22 18 11 00 b0 25 e2 20
>3a6388	a2 4e 64 a9 3a 48 ab 20 ae 02 af 2e 03 00 20 d8
>3a6398	02 a9 20 20 18 00 af 20 03 00 20 d8 02 20 21 02
>3a63a8	20 21 02 28 6b 8b 08 c2 10 e2 20 a5 31 c9 03 f0
>3a63b8	0f a2 28 64 a9 3a 48 ab 20 ae 02 20 21 02 80 54
>3a63c8	c2 20 a5 0d 8f 21 08 00 a5 0f 8f 23 08 00 20 26
>3a63d8	45 a5 11 8f 50 03 00 a5 13 8f 52 03 00 a5 15 8f
>3a63e8	58 03 00 a5 17 8f 5a 03 00 22 1c 11 00 b0 25 e2
>3a63f8	20 a2 38 64 a9 3a 48 ab 20 ae 02 af 2e 03 00 20
>3a6408	d8 02 a9 20 20 18 00 af 20 03 00 20 d8 02 20 21
>3a6418	02 20 21 02 28 ab 6b 5c 0e 21 3a 6b 00 00 00 00
>3a6428	42 61 64 20 61 72 67 75 6d 65 6e 74 73 0d 0d 00
>3a6438	55 6e 61 62 6c 65 20 74 6f 20 73 61 76 65 20 66
>3a6448	69 6c 65 3a 20 00 55 6e 61 62 6c 65 20 74 6f 20
>3a6458	6c 6f 61 64 20 66 69 6c 65 3a 20 00 0d 20 20 50
>3a6468	43 20 20 20 20 20 41 20 20 20 20 58 20 20 20 20
>3a6478	59 20 20 20 20 53 50 20 20 20 44 42 52 20 44 50
>3a6488	20 20 20 4e 56 4d 58 44 49 5a 43 0d 00 41 43 44
>3a6498	46 47 4a 48 4c 4d 52 3b 53 54 56 57 58 3e 3f 00
>3a64a8	18 fb 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48
>3a64b8	a9 00 48 ab 68 28 c2 30 20 e7 64 a9 ff fe 1b 08
>3a64c8	e2 20 48 a9 3a 48 ab 68 28 a2 08 d2 20 ae 02 08
>3a64d8	e2 20 48 a9 00 48 ab 68 28 4c 0e 21 4c e4 64 08
>3a64e8	20 b5 01 20 dd 3c 28 60 00 00 00 00 00 00 00 00
>3a64f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 1711 times (27376 bytes)...
>3acff8	00 00 00 00 00 00 00 00 30 31 32 33 34 35 36 37
>3ad008	38 39 41 42 43 44 45 46 2b 00 2d 00 2a 00 2f 00
>3ad018	4d 4f 44 00 5e 00 3c 00 3d 00 3e 00 4e 4f 54 00
>3ad028	41 4e 44 00 4f 52 00 28 00 29 00 52 45 4d 00 50
>3ad038	52 49 4e 54 00 4c 45 54 00 47 4f 54 4f 00 45 4e
>3ad048	44 00 49 46 00 54 48 45 4e 00 45 4c 53 45 00 47
>3ad058	4f 53 55 42 00 52 45 54 55 52 4e 00 46 4f 52 00
>3ad068	54 4f 00 53 54 45 50 00 4e 45 58 54 00 44 4f 00
>3ad078	4c 4f 4f 50 00 57 48 49 4c 45 00 55 4e 54 49 4c
>3ad088	00 45 58 49 54 00 43 4c 52 00 53 54 4f 50 00 50
>3ad098	4f 4b 45 00 50 4f 4b 45 57 00 50 4f 4b 45 4c 00
>3ad0a8	43 4c 53 00 52 45 41 44 00 44 41 54 41 00 52 45
>3ad0b8	53 54 4f 52 45 00 44 49 4d 00 43 41 4c 4c 00 3c
>3ad0c8	3d 00 3e 3d 00 3c 3e 00 2d 00 4c 45 4e 00 50 45
>3ad0d8	45 4b 00 50 45 45 4b 57 00 50 45 45 4b 4c 00 43
>3ad0e8	48 52 24 00 41 53 43 00 53 50 43 00 54 41 42 00
>3ad0f8	41 42 53 00 53 47 4e 00 48 45 58 24 00 44 45 43
>3ad108	00 53 54 52 24 00 56 41 4c 00 4c 45 46 54 24 00
>3ad118	52 49 47 48 54 24 00 4d 49 44 24 00 52 55 4e 00
>3ad128	4e 45 57 00 4c 4f 41 44 00 4c 49 53 54 00 44 49
>3ad138	52 00 42 4c 4f 41 44 00 42 52 55 4e 00 42 53 41
>3ad148	56 45 00 44 45 4c 00 53 41 56 45 00 52 45 4e 41
>3ad158	4d 45 00 43 4f 50 59 00 4d 4f 4e 49 54 4f 52 00
>3ad168	47 45 54 00 49 4e 50 55 54 00 53 45 54 42 4f 52
>3ad178	44 45 52 00 54 45 58 54 43 4f 4c 4f 52 00 53 45
>3ad188	54 42 47 43 4f 4c 4f 52 00 53 45 54 44 41 54 45
>3ad198	00 47 45 54 44 41 54 45 24 00 53 45 54 54 49 4d
>3ad1a8	45 00 47 45 54 54 49 4d 45 24 00 47 52 41 50 48
>3ad1b8	49 43 53 00 53 45 54 43 4f 4c 4f 52 00 50 49 58
>3ad1c8	4d 41 50 00 43 4c 52 50 49 58 4d 41 50 00 50 4c
>3ad1d8	4f 54 00 4c 49 4e 45 00 46 49 4c 4c 00 53 50 52
>3ad1e8	49 54 45 00 53 50 52 49 54 45 41 54 00 53 50 52
>3ad1f8	49 54 45 53 48 4f 57 00 0d 52 45 41 44 59 0d 00
>3ad208	43 32 35 36 20 46 6f 65 6e 69 78 20 42 41 53 49
>3ad218	43 38 31 36 20 76 30 2e 31 2e 30 2d 61 6c 70 68
>3ad228	61 2b 37 36 0d 00
>3b0000					.align 256
.3b0000					CREDITS_TEXT
>3b0000	54 68 69 73 20 69 73 20		                .text "This is the credits screen!"
>3b0008	74 68 65 20 63 72 65 64 69 74 73 20 73 63 72 65
>3b0018	65 6e 21
>3b001b	20 20 20 20 20 20 20 20		                .fill 128 - len("This is the credits screen!"), $20
>3b0023	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 4 times (64 bytes)...
>3b0073	20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0080	49 20 77 6f 75 6c 64 20		                .text "I would like to thank the academy."
>3b0088	6c 69 6b 65 20 74 6f 20 74 68 61 6e 6b 20 74 68
>3b0098	65 20 61 63 61 64 65 6d 79 2e
>3b00a2	20 20 20 20 20 20 20 20		                .fill 128 - len("I would like to thank the academy."), $20
>3b00aa	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 4 times (64 bytes)...
>3b00fa	20 20 20 20 20 20
>3b0100					                .text ""
>3b0100	20 20 20 20 20 20 20 20		                .fill 128 - len(""), $20
>3b0108	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 6 times (96 bytes)...
>3b0178	20 20 20 20 20 20 20 20
>3b0180	50 72 65 73 73 20 61 6e		                .text "Press any key to go back..."
>3b0188	79 20 6b 65 79 20 74 6f 20 67 6f 20 62 61 63 6b
>3b0198	2e 2e 2e
>3b019b	20 20 20 20 20 20 20 20		                .fill 128 - len("Press any key to go back..."), $20
>3b01a3	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 4 times (64 bytes)...
>3b01f3	20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0200	20 20 20 20 20 20 20 20		                .fill 128 * 60,$20
>3b0208	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 478 times (7648 bytes)...
>3b1ff8	20 20 20 20 20 20 20 20
>3b2000					.align 256
>3b2000	f3 f3 f3 f3 f3 f3 f3 f3		CREDITS_COLOR   .fill 128 * 64, $F3
>3b2008	f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3
;	...repeated 510 times (8160 bytes)...
>3b3ff8	f3 f3 f3 f3 f3 f3 f3 f3

;******  End of listing
