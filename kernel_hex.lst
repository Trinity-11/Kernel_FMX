
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -D TARGET=2 --long-address --flat --intel-hex -o kernel.hex --list kernel_hex.lst --labels=kernel_hex.lbl src\kernel.asm
; Sun Sep 20 19:56:35 2020

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=2					TARGET=2

;******  Processing input file: src\kernel.asm

=1					TARGET_FLASH = 1              ; The code is being assembled for Flash
=2					TARGET_RAM = 2                ; The code is being assembled for RAM

;******  Processing file: src\macros_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\characters.asm

=$01					CHAR_CTRL_A = $01   ; CTRL-A (move to start of line)
=$03					CHAR_CTRL_C = $03   ; CTRL-C
=$05					CHAR_CTRL_E = $05   ; CTRL-E (move to end of line)
=$08					CHAR_BS = $08       ; Backspace (delete character to the left of the cursor)
=$09					CHAR_TAB = $09      ; TAB (moves cursor to next tabulated column)
=$0a					CHAR_LF = $0A       ; Line feed
=$0d					CHAR_CR = $0D       ; Carriage return
=$0f					CHAR_INS = $0F      ; Insert a space at the cursor
=$11					CHAR_UP = $11       ; Up arrow
=$1d					CHAR_RIGHT = $1D    ; Right arrow
=$20					CHAR_SP = $20       ; Space
=$91					CHAR_DOWN = $91     ; Down arrow
=$9d					CHAR_LEFT = $9D     ; Left arrow
=$7f					CHAR_DEL = $7F      ; Delete key (delete the character at the cursor)
=$81					CHAR_F1 = $81       ; Function keys
=$82					CHAR_F2 = $82
=$83					CHAR_F3 = $83
=$84					CHAR_F4 = $84
=$85					CHAR_F5 = $85
=$86					CHAR_F6 = $86
=$87					CHAR_F7 = $87
=$88					CHAR_F8 = $88
=$89					CHAR_F9 = $89
=$8a					CHAR_F10 = $8A
=$8b					CHAR_F11 = $8B
=$8c					CHAR_F12 = $8C

;******  Return to file: src\kernel.asm


;******  Processing file: src\simulator_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_inc.asm

=$000000				BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000				TMPPTR1          = $000000 ; 4 byte temporary pointer
=$000004				TMPPTR2          = $000004 ; 4 byte temporary pointer
=$000008				OPL2_ADDY_PTR_LO = $000008 ; THis Points towards the Instruments Database
=$000009				OPL2_ADDY_PTR_MD = $000009
=$00000a				OPL2_ADDY_PTR_HI = $00000A
=$00000c				SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f				COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011				COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013				LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=25
=$000015				LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017				CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a				CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c				CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e				CURCOLOR         = $00001E ;1 Byte Color of next character to be printed to the screen.
=$00001f				COLORPOS         = $00001F ;3 Byte address of cursor's position in the color matrix
=$000022				STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024				STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$000026				OPL2_OPERATOR    = $000026 ;
=$000027				OPL2_CHANNEL     = $000027 ;
=$000028				OPL2_REG_REGION  = $000028 ; Offset to the Group of Registers
=$00002a				OPL2_REG_OFFSET  = $00002A ; 2 Bytes (16Bits)
=$00002c				OPL2_IND_ADDY_LL = $00002C ; 2 Bytes Reserved (Only need 3)
=$00002e				OPL2_IND_ADDY_HL = $00002E ; 2 Bytes Reserved (Only need 3)
=$000030				OPL2_NOTE        = $000030 ; 1 Byte
=$000031				OPL2_OCTAVE      = $000031 ; 1 Byte
=$000032				OPL2_PARAMETER0  = $000032 ; 1 Byte - Key On/Feedback
=$000033				OPL2_PARAMETER1  = $000033 ; 1 Byte
=$000034				OPL2_PARAMETER2  = $000034 ; 1 Byte
=$000035				OPL2_PARAMETER3  = $000035 ; 1 Byte
=$000036				OPL2_LOOP        = $000036 ;
=$000036				OPL2_BLOCK       = $000036
=$000038				SDCARD_FILE_PTR  = $000038 ; 3 Bytes Pointer to Filename to open
=$00003c				SDCARD_BYTE_NUM  = $00003C ; 2Bytes
=$00003f				SDCARD_PRSNT_MNT = $00003F ; 1 Byte, Indicate that the SDCard is Present and that it is Mounted
=$000040				BM_CLEAR_SCRN_X  = $000040
=$000042				BM_CLEAR_SCRN_Y  = $000042
=$000040				RAD_STARTLINE    = $000040 ; 1 Byte
=$000041				RAD_PATTERN_IDX  = $000041 ; 1 Byte
=$000042				RAD_LINE         = $000042 ; 1 Byte
=$000043				RAD_LINENUMBER   = $000043 ; 1 Byte
=$000044				RAD_CHANNEL_NUM  = $000044 ; 1 Byte
=$000045				RAD_ISLASTCHAN   = $000045 ; 1 Byte
=$000046				RAD_Y_POINTER    = $000046 ; 2 Bytes
=$000048				RAD_TICK         = $000048
=$00004a				RAD_CHANNEL_DATA = $00004A ; 2 Bytes
=$00004c				RAD_CHANNE_EFFCT = $00004C
=$00004d				RAD_TEMP         = $00004D
=$000050				RAD_ADDR         = $000050 ; 3 bytes to avoid OPL2 errors.
=$000053				RAD_PATTRN       = $000053 ; 1 bytes - offset to patter
=$000054				RAD_PTN_DEST     = $000054 ; 3 bytes - where to write the pattern data
=$000057				RAD_CHANNEL      = $000057 ; 2 bytes - 0 to 8
=$000059				RAD_LAST_NOTE    = $000059 ; 1 if this is the last note
=$00005a				RAD_LINE_PTR     = $00005A ; 2 bytes - offset to memory location
=$000040				BMP_X_SIZE       = $000040 ; 2 Bytes
=$000042				BMP_Y_SIZE       = $000042 ; 2 Bytes
=$000044				BMP_PRSE_SRC_PTR = $000044 ; 3 Bytes
=$000048				BMP_PRSE_DST_PTR = $000048 ; 3 Bytes
=$00004c				BMP_COLOR_PALET  = $00004C ; 2 Bytes
=$00004e				SCRN_X_STRIDE    = $00004E ; 2 Bytes, Basically How many Pixel Accross in Bitmap Mode
=$000050				BMP_FILE_SIZE    = $000050 ; 4 Bytes
=$000054				BMP_POSITION_X   = $000054 ; 2 Bytes Where, the BMP will be position on the X Axis
=$000056				BMP_POSITION_Y   = $000056 ; 2 Bytes Where, the BMP will be position on the Y Axis
=$000058				BMP_PALET_CHOICE = $000058 ;
=$0000e0				MOUSE_PTR        = $0000E0
=$0000e1				MOUSE_POS_X_LO   = $0000E1
=$0000e2				MOUSE_POS_X_HI   = $0000E2
=$0000e3				MOUSE_POS_Y_LO   = $0000E3
=$0000e4				MOUSE_POS_Y_HI   = $0000E4
=$0000f0				USER_TEMP        = $0000F0 ;32 Bytes Temp space for user programs
=$000100				GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000140				INT_CONTROLLER   = $000140 ; $000140...$00015F Interrupt Controller
=$000160				TIMER_CONTROLLER = $000160 ; $000160...$00017F Timer0/Timer1/Timer2 Block
=$000160				TIMER_CTRL_REGLL = $000160 ;
=$000161				TIMER_CTRL_REGLH = $000161 ;
=$000162				TIMER_CTRL_REGHL = $000162 ;
=$000163				TIMER_CTRL_REGHH = $000163 ;
=$000240				CPU_REGISTERS    = $000240 ; Byte
=$000240				CPUPC            = $000240 ;2 Bytes Program Counter (PC)
=$000242				CPUPBR           = $000242 ;2 Bytes Program Bank Register (K)
=$000244				CPUA             = $000244 ;2 Bytes Accumulator (A)
=$000246				CPUX             = $000246 ;2 Bytes X Register (X)
=$000248				CPUY             = $000248 ;2 Bytes Y Register (Y)
=$00024a				CPUSTACK         = $00024A ;2 Bytes Stack Pointer (S)
=$00024c				CPUDP            = $00024C ;2 Bytes Direct Page Register (D)
=$00024e				CPUDBR           = $00024E ;1 Byte  Data Bank Register (B)
=$00024f				CPUFLAGS         = $00024F ;1 Byte  Flags (P)
=$000250				MONITOR_VARS     = $000250 ; Byte  MONITOR Variables. BASIC variables may overlap this space
=$000250				MCMDADDR         = $000250 ;3 Bytes Address of the current line of text being processed by the command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
=$000253				MCMP_TEXT        = $000253 ;3 Bytes Address of symbol being evaluated for COMPARE routine
=$000256				MCMP_LEN         = $000256 ;2 Bytes Length of symbol being evaluated for COMPARE routine
=$000258				MCMD             = $000258 ;3 Bytes Address of the current command/function string
=$00025b				MCMD_LEN         = $00025B ;2 Bytes Length of the current command/function string
=$00025d				MARG1            = $00025D ;4 Bytes First command argument. May be data or address, depending on command
=$000261				MARG2            = $000261 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000265				MARG3            = $000265 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000269				MARG4            = $000269 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$00026d				MARG5            = $00026D ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000271				MARG6            = $000271 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000275				MARG7            = $000275 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000279				MARG8            = $000279 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000300				LOADFILE_VARS    = $000300 ; Byte
=$000300				LOADFILE_NAME    = $000300 ;3 Bytes (addr) Name of file to load. Address in Data Page
=$000303				LOADFILE_LEN     = $000303 ;1 Byte  Length of filename. 0=Null Terminated
=$000304				LOADPBR          = $000304 ;1 Byte  First Program Bank of loaded file ($05 segment)
=$000305				LOADPC           = $000305 ;2 Bytes Start address of loaded file ($05 segment)
=$000307				LOADDBR          = $000307 ;1 Byte  First data bank of loaded file ($06 segment)
=$000308				LOADADDR         = $000308 ;2 Bytes FIrst data address of loaded file ($06 segment)
=$00030a				LOADFILE_TYPE    = $00030A ;3 Bytes (addr) File type string in loaded data file. Actual string data will be in Bank 1. Valid values are BIN, PRG, P16
=$00030d				BLOCK_LEN        = $00030D ;2 Bytes Length of block being loaded
=$00030f				BLOCK_ADDR       = $00030F ;2 Bytes (temp) Address of block being loaded
=$000311				BLOCK_BANK       = $000311 ;1 Byte  (temp) Bank of block being loaded
=$000312				BLOCK_COUNT      = $000312 ;2 Bytes (temp) Counter of bytes read as file is loaded
=$000300				FDC_DRIVE        = $000300 ;1 byte - The number of the selected drive
=$000301				FDC_HEAD         = $000301 ;1 byte - The head number (0 or 1)
=$000302				FDC_CYLINDER     = $000302 ;1 byte - The cylinder number
=$000303				FDC_SECTOR       = $000303 ;1 byte - The sector number
=$000304				FDC_SECTOR_SIZE  = $000304 ;1 byte - The sector size code (2 = 512)
=$000305				FDC_SECPERTRK    = $000305 ;1 byte - The number of sectors per track (18 for 1.44 MB floppy)
=$000306				FDC_ST0          = $000306 ;1 byte - Status Register 0
=$000307				FDC_ST1          = $000307 ;1 byte - Status Register 1
=$000308				FDC_ST2          = $000308 ;1 byte - Status Register 2
=$000309				FDC_ST3          = $000309 ;1 byte - Status Register 3
=$00030a				FDC_PCN          = $00030A ;1 byte - Present Cylinder Number
=$00030b				FDC_STATUS       = $00030B ;1 byte - Status of what we think is going on with the FDC:
=$00030c				DIVIDEND         = $00030C ;4 bytes - Dividend for 32-bit division
=$000310				DIVISOR          = $000310 ;4 bytes - Divisor for 32-bit division
=$000314				REMAINDER        = $000314 ;4 bytes - Remainder for 32-bit division
=$000320				SDOS_VARIABLES   = $000320
=$000320				BIOS_STATUS      = $000320      ; 1 byte - Status of any BIOS operation
=$000321				BIOS_DEV         = $000321      ; 1 byte - Block device number for block operations
=$000322				BIOS_LBA         = $000322      ; 4 bytes - Address of block to read/write (this is the physical block, w/o reference to partition)
=$000326				BIOS_BUFF_PTR    = $000326      ; 4 bytes - 24-bit pointer to memory for read/write operations
=$00032a				BIOS_FIFO_COUNT  = $00032A      ; 2 bytes - The number of bytes read on the last block read
=$00032c				BIOS_FLAGS       = $00032C      ; 1 byte - Flags for various BIOSy things:
=$00032d				BIOS_TIMER       = $00032D      ; 1 byte - the number of 1/60 ticks for a time out
=$00032e				DOS_STATUS       = $00032E      ; 1 byte - The error code describing any error with file access
=$000330				DOS_CLUS_ID      = $000330      ; 4 bytes - The cluster desired for a DOS operation
=$000338				DOS_DIR_PTR      = $000338      ; 4 bytes - Pointer to a directory entry (assumed to be within DOS_SECTOR)
=$00033c				DOS_BUFF_PTR     = $00033C      ; 4 bytes - A pointer for DOS cluster read/write operations
=$000340				DOS_FD_PTR       = $000340      ; 4 bytes - A pointer to a file descriptor
=$000344				DOS_FAT_LBA      = $000344      ; 4 bytes - The LBA for a sector of the FAT we need to read/write
=$000348				DOS_TEMP         = $000348      ; 4 bytes - Temporary storage for DOS operations
=$00034c				DOS_FILE_SIZE    = $00034C      ; 4 bytes - The size of a file
=$000350				DOS_SRC_PTR      = $000350      ; 4 bytes - Pointer for transferring data
=$000354				DOS_DST_PTR      = $000354      ; 4 bytes - Pointer for transferring data
=$000358				DOS_END_PTR      = $000358      ; 4 bytes - Pointer to the last byte to save
=$00035c				DOS_RUN_PTR      = $00035C      ; 4 bytes - Pointer for starting a loaded program
=$000360				DOS_RUN_PARAM    = $000360      ; 4 bytes - Pointer to the ASCIIZ string for arguments in loading a program
=$000364				DOS_STR1_PTR     = $000364      ; 4 bytes - pointer to a string
=$000368				DOS_STR2_PTR     = $000368      ; 4 bytes - pointer to a string
=$00036b				DOS_SCRATCH      = $00036B      ; 4 bytes - general purpose short term storage
=$000400				DOS_PATH_BUFF    = $000400      ; 256 bytes - A buffer for path names
=$000500				FDC_PARAMETERS   = $000500      ; 16 bytes - a buffer of parameter data for the FDC
=$000510				FDC_RESULTS      = $000510      ; 16 bytes - Buffer for results of FDC commands
=$000530				FDC_PARAM_NUM    = $000530      ; 1 byte - The number of parameters to send to the FDC (including command)
=$000532				FDC_RESULT_NUM   = $000532      ; 1 byte - The number of results expected
=$000533				FDC_EXPECT_DAT   = $000533      ; 1 byte - 0 = the command expects no data, otherwise expects data
=$000534				FDC_CMD_RETRY    = $000534      ; 1 byte - a retry counter for commands
=$000700				CURRUART         = $000700 ; 3-bytes: the base address of the current UART
=$000703				CHAN_OUT         = $000703 ; 1-byte: the number of the current output channel (for PUTC, etc.)
=$000704				CHAN_IN          = $000704 ; 1-byte: the number of the current input channel (for GETCH, etc.)
=$000705				TIMERFLAGS       = $000705 ; 1-byte: flags to indicate that one of the timer interupts has triggered
=$80					TIMER0TRIGGER    = $80
=$40					TIMER1TRIGGER    = $40
=$20					TIMER2TRIGGER    = $20
=$000f00				KEY_BUFFER       = $000F00 ; 64 Bytes keyboard buffer
=$0080					KEY_BUFFER_SIZE  = $0080   ;128 Bytes (constant) keyboard buffer length
=$000f7f				KEY_BUFFER_END   = $000F7F ;  1 Byte  Last byte of keyboard buffer
=$000f83				KEY_BUFFER_CMD   = $000F83 ;  1 Byte  Indicates the Command Process Status
=$000f84				COMMAND_SIZE_STR = $000F84 ;  1 Byte
=$000f86				COMMAND_COMP_TMP = $000F86 ;  2 Bytes
=$000f87				KEYBOARD_SC_FLG  = $000F87 ;  1 Bytes that indicate the Status of Left Shift, Left CTRL, Left ALT, Right Shift
=$000f88				KEYBOARD_SC_TMP  = $000F88 ;  1 Byte, Interrupt Save Scan Code while Processing
=$000f89				KEYBOARD_LOCKS   = $000F89 ;  1 Byte, the status of the various lock keys
=$000f8a				KEYFLAG          = $000F8A ;  1 Byte, flag to indicate if CTRL-C has been pressed
=$000f8b				KEY_BUFFER_RPOS  = $000F8B ;  2 Byte, position of the character to read from the KEY_BUFFER
=$000f8d				KEY_BUFFER_WPOS  = $000F8D ;  2 Byte, position of the character to write to the KEY_BUFFER
=$001000				KERNEL_JMP_BEGIN = $001000 ; Reserved for the Kernel jump table
=$001fff				KERNEL_JMP_END   = $001FFF
=$002000				TEST_BEGIN       = $002000 ;28672 Bytes Test/diagnostic code for prototype.
=$007fff				TEST_END         = $007FFF ;0 Byte
=$008000				STACK_BEGIN      = $008000 ;32512 Bytes The default beginning of stack space
=$00feff				STACK_END        = $00FEFF ;0 Byte  End of stack space. Everything below this is I/O space
=$00ff00				ISR_BEGIN        = $00FF00 ; Byte  Beginning of CPU vectors in Direct page
=$00ff00				HRESET           = $00FF00 ;16 Bytes Handle RESET asserted. Reboot computer and re-initialize the kernel.
=$00ff10				HCOP             = $00FF10 ;16 Bytes Handle the COP instruction. Program use; not used by OS
=$00ff20				HBRK             = $00FF20 ;16 Bytes Handle the BRK instruction. Returns to BASIC Ready prompt.
=$00ff30				HABORT           = $00FF30 ;16 Bytes Handle ABORT asserted. Return to Ready prompt with an error message.
=$00ff40				HNMI             = $00FF40 ;32 Bytes Handle NMI
=$00ff60				HIRQ             = $00FF60 ;32 Bytes Handle IRQ
=$00ff80				Unused_FF80      = $00FF80 ;End of direct page Interrrupt handlers
=$00ffe0				VECTORS_BEGIN    = $00FFE0 ;0 Byte  Interrupt vectors
=$00ffe0				JMP_READY        = $00FFE0 ;4 Bytes Jumps to ROM READY routine. Modified whenever alternate command interpreter is loaded.
=$00ffe4				VECTOR_COP       = $00FFE4 ;2 Bytes Native COP Interrupt vector
=$00ffe6				VECTOR_BRK       = $00FFE6 ;2 Bytes Native BRK Interrupt vector
=$00ffe8				VECTOR_ABORT     = $00FFE8 ;2 Bytes Native ABORT Interrupt vector
=$00ffea				VECTOR_NMI       = $00FFEA ;2 Bytes Native NMI Interrupt vector
=$00ffec				VECTOR_RESET     = $00FFEC ;2 Bytes Unused (Native RESET vector)
=$00ffee				VECTOR_IRQ       = $00FFEE ;2 Bytes Native IRQ Vector
=$00fff0				RETURN           = $00FFF0 ;4 Bytes RETURN key handler. Points to BASIC or MONITOR subroutine to execute when RETURN is pressed.
=$00fff4				VECTOR_ECOP      = $00FFF4 ;2 Bytes Emulation mode interrupt handler
=$00fff6				VECTOR_EBRK      = $00FFF6 ;2 Bytes Emulation mode interrupt handler
=$00fff8				VECTOR_EABORT    = $00FFF8 ;2 Bytes Emulation mode interrupt handler
=$00fffa				VECTOR_ENMI      = $00FFFA ;2 Bytes Emulation mode interrupt handler
=$00fffc				VECTOR_ERESET    = $00FFFC ;2 Bytes Emulation mode interrupt handler
=$00fffe				VECTOR_EIRQ      = $00FFFE ;2 Bytes Emulation mode interrupt handler
=$010000				VECTORS_END      = $010000 ;*End of vector space
=$00ffff				BANK0_END        = $00FFFF ;End of Bank 00 and Direct page

;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_data.asm

>380000	00 a0 af			                .long $AFA000       ; SCREENBEGIN, 3 bytes, Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>380003	4c 00				                .word 76            ; COLS_VISIBLE, 2 bytes, Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>380005	64 00				                .word 100           ; COLS_PER_LINE, 2 bytes, Columns in memory per screen line. A virtual line can be this long. Default=128
>380007	38 00				                .word 56            ; LINES_VISIBLE, 2 bytes, The number of rows visible on the screen. Default=25
>380009	40 00				                .word 64            ; LINES_MAX, 2 bytes, The number of rows in memory for the screen. Default=64
>38000b	00 a0 af			                .long $AFA000       ; CURSORPOS, 3 bytes, The next character written to the screen will be written in this location.
>38000e	00 00				                .word 0             ; CURSORX, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380010	00 00				                .word 0             ; CURSORY, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380012	0f				                .byte $0F           ; CURCOLOR, 2 bytes, Color of next character to be printed to the screen.
>380013	00				                .byte $00           ; CURATTR, 2 bytes, Attribute of next character to be printed to the screen.
>380014	00 80				                .word STACK_BEGIN   ; STACKBOT, 2 bytes, Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
>380016	ff fe				                .word STACK_END     ; STACKTOP, 2 bytes, Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.

;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_code.asm

.ff00	18		clc		RHRESET         CLC
.ff01	fb		xce		                XCE
.ff02	5c 00 10 38	jmp $381000	                JML BOOT
.ff10					RHCOP
.ff10	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff12	8b		phb		                PHB
.ff13	0b		phd		                PHD
.ff14	48		pha		                PHA
.ff15	da		phx		                PHX
.ff16	5a		phy		                PHY
.ff17	5c 08 10 38	jmp $381008	                JML BREAK
.ff20					RHBRK
.ff20	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff22	8b		phb		                PHB
.ff23	0b		phd		                PHD
.ff24	48		pha		                PHA
.ff25	da		phx		                PHX
.ff26	5a		phy		                PHY
.ff27	5c 08 10 38	jmp $381008	                JML BREAK
.ff30					RHABORT
.ff30	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff32	8b		phb		                PHB
.ff33	0b		phd		                PHD
.ff34	48		pha		                PHA
.ff35	da		phx		                PHX
.ff36	5a		phy		                PHY
.ff37	5c 08 10 38	jmp $381008	                JML BREAK
.ff40					 RHNMI
.ff40	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff42	8b		phb		                PHB
.ff43	0b		phd		                PHD
.ff44	48		pha		                PHA
.ff45	da		phx		                PHX
.ff46	5a		phy		                PHY
.ff47	22 31 13 38	jsl $381331	                JSL NMI_HANDLER
.ff4b	7a		ply		                PLY
.ff4c	fa		plx		                PLX
.ff4d	68		pla		                PLA
.ff4e	2b		pld		                PLD
.ff4f	ab		plb		                PLB
.ff50	40		rti		                RTI
.ff60					RHIRQ
.ff60	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff62	8b		phb		                PHB
.ff63	0b		phd		                PHD
.ff64	48		pha		                PHA
.ff65	da		phx		                PHX
.ff66	5a		phy		                PHY
.ff67	22 48 11 38	jsl $381148	                JSL IRQ_HANDLER
.ff6b	7a		ply		                PLY
.ff6c	fa		plx		                PLX
.ff6d	68		pla		                PLA
.ff6e	2b		pld		                PLD
.ff6f	ab		plb		                PLB
.ff70	40		rti		                RTI
.ffe0	5c 04 00 3a	jmp $3a0004	JUMP_READY      JML MONITOR    ; Kernel READY routine. Rewrite this address to jump to a custom kernel.
>ffe4	10 ff				RVECTOR_COP     .addr HCOP     ; FFE4
>ffe6	20 ff				RVECTOR_BRK     .addr HBRK     ; FFE6
>ffe8	30 ff				RVECTOR_ABORT   .addr HABORT   ; FFE8
>ffea	40 ff				RVECTOR_NMI     .addr HNMI     ; FFEA
>ffec	00 00				                .word $0000    ; FFEC
>ffee	60 ff				RVECTOR_IRQ     .addr HIRQ    ; FFEE
.fff0	5c 05 07 39	jmp $390705	RRETURN         JML IRETURN
>fff4	10 ff				RVECTOR_ECOP    .addr HCOP     ; FFF4
>fff6	20 ff				RVECTOR_EBRK    .addr HBRK     ; FFF6
>fff8	30 ff				RVECTOR_EABORT  .addr HABORT   ; FFF8
>fffa	40 ff				RVECTOR_ENMI    .addr HNMI     ; FFFA
>fffc	00 ff				RVECTOR_ERESET  .addr HRESET   ; FFFC
>fffe	60 ff				RVECTOR_EIRQ    .addr HIRQ     ; FFFE

;******  Return to file: src\kernel.asm


;******  Processing file: src\Math_def.asm

=$000100				UNSIGNED_MULT_A_LO  = $000100
=$000101				UNSIGNED_MULT_A_HI  = $000101
=$000102				UNSIGNED_MULT_B_LO  = $000102
=$000103				UNSIGNED_MULT_B_HI  = $000103
=$000104				UNSIGNED_MULT_AL_LO = $000104
=$000105				UNSIGNED_MULT_AL_HI = $000105
=$000106				UNSIGNED_MULT_AH_LO = $000106
=$000107				UNSIGNED_MULT_AH_HI = $000107
=$000108				SIGNED_MULT_A_LO    = $000108
=$000109				SIGNED_MULT_A_HI    = $000109
=$00010a				SIGNED_MULT_B_LO    = $00010A
=$00010b				SIGNED_MULT_B_HI    = $00010B
=$00010c				SIGNED_MULT_AL_LO   = $00010C
=$00010d				SIGNED_MULT_AL_HI   = $00010D
=$00010e				SIGNED_MULT_AH_LO   = $00010E
=$00010f				SIGNED_MULT_AH_HI   = $00010F
=$000110				UNSIGNED_DIV_DEM_LO = $000110
=$000111				UNSIGNED_DIV_DEM_HI = $000111
=$000112				UNSIGNED_DIV_NUM_LO = $000112
=$000113				UNSIGNED_DIV_NUM_HI = $000113
=$000114				UNSIGNED_DIV_QUO_LO = $000114
=$000115				UNSIGNED_DIV_QUO_HI = $000115
=$000116				UNSIGNED_DIV_REM_LO = $000116
=$000117				UNSIGNED_DIV_REM_HI = $000117
=$000118				SIGNED_DIV_DEM_LO   = $000118
=$000119				SIGNED_DIV_DEM_HI   = $000119
=$00011a				SIGNED_DIV_NUM_LO   = $00011A
=$00011b				SIGNED_DIV_NUM_HI   = $00011B
=$00011c				SIGNED_DIV_QUO_LO   = $00011C
=$00011d				SIGNED_DIV_QUO_HI   = $00011D
=$00011e				SIGNED_DIV_REM_LO   = $00011E
=$00011f				SIGNED_DIV_REM_HI   = $00011F
=$000120				ADDER32_A_LL        = $000120
=$000121				ADDER32_A_LH        = $000121
=$000122				ADDER32_A_HL        = $000122
=$000123				ADDER32_A_HH        = $000123
=$000124				ADDER32_B_LL        = $000124
=$000125				ADDER32_B_LH        = $000125
=$000126				ADDER32_B_HL        = $000126
=$000127				ADDER32_B_HH        = $000127
=$000128				ADDER32_R_LL        = $000128
=$000129				ADDER32_R_LH        = $000129
=$00012a				ADDER32_R_HL        = $00012A
=$00012b				ADDER32_R_HH        = $00012B

;******  Return to file: src\kernel.asm


;******  Processing file: src\interrupt_def.asm

=$000140				INT_PENDING_REG0 = $000140 ;
=$000141				INT_PENDING_REG1 = $000141 ;
=$000142				INT_PENDING_REG2 = $000142 ;
=$000143				INT_PENDING_REG3 = $000143 ; FMX Model
=$000144				INT_POL_REG0     = $000144 ;
=$000145				INT_POL_REG1     = $000145 ;
=$000146				INT_POL_REG2     = $000146 ;
=$000147				INT_POL_REG7     = $000147 ; FMX Model
=$000148				INT_EDGE_REG0    = $000148 ;
=$000149				INT_EDGE_REG1    = $000149 ;
=$00014a				INT_EDGE_REG2    = $00014A ;
=$00014b				INT_EDGE_REG3    = $00014B ; FMX Model
=$00014c				INT_MASK_REG0    = $00014C ;
=$00014d				INT_MASK_REG1    = $00014D ;
=$00014e				INT_MASK_REG2    = $00014E ;
=$00014f				INT_MASK_REG3    = $00014F ; FMX Model
=$01					FNX0_INT00_SOF        = $01  ;Start of Frame @ 60FPS
=$02					FNX0_INT01_SOL        = $02  ;Start of Line (Programmable)
=$04					FNX0_INT02_TMR0       = $04  ;Timer 0 Interrupt
=$08					FNX0_INT03_TMR1       = $08  ;Timer 1 Interrupt
=$10					FNX0_INT04_TMR2       = $10  ;Timer 2 Interrupt
=$20					FNX0_INT05_RTC        = $20  ;Real-Time Clock Interrupt
=$40					FNX0_INT06_FDC        = $40  ;Floppy Disk Controller
=$80					FNX0_INT07_MOUSE      = $80  ; Mouse Interrupt (INT12 in SuperIO IOspace)
=$01					FNX1_INT00_KBD        = $01  ;Keyboard Interrupt
=$02					FNX1_INT01_SC0        = $02  ;VICKY_II (INT2) Sprite 2 Sprite Collision
=$04					FNX1_INT02_SC1        = $04  ;VICKY_II (INT3) Sprite 2 Tiles Collision
=$08					FNX1_INT03_COM2       = $08  ;Serial Port 2
=$10					FNX1_INT04_COM1       = $10  ;Serial Port 1
=$20					FNX1_INT05_MPU401     = $20  ;Midi Controller Interrupt
=$40					FNX1_INT06_LPT        = $40  ;Parallel Port
=$80					FNX1_INT07_SDCARD     = $80  ;SD Card Controller Interrupt (CH376S)
=$01					FNX2_INT00_OPL3       = $01  ;OPl3
=$02					FNX2_INT01_GABE_INT0  = $02  ;GABE (INT0) - TBD
=$04					FNX2_INT02_GABE_INT1  = $04  ;GABE (INT1) - TBD
=$08					FNX2_INT03_SDMA       = $08  ;VICKY_II (INT4)
=$10					FNX2_INT04_VDMA       = $10  ;VICKY_II (INT5)
=$20					FNX2_INT05_GABE_INT2  = $20  ;GABE (INT2) - TBD
=$40					FNX2_INT06_EXT        = $40  ;External Expansion
=$80					FNX2_INT07_SDCARD_INS = $80  ; SDCARD Insertion
=$01					FNX3_INT00_OPN2       = $01  ;OPN2
=$02					FNX3_INT01_OPM        = $02  ;OPM
=$04					FNX3_INT02_IDE        = $04  ;HDD IDE INTERRUPT
=$08					FNX3_INT03_TBD        = $08  ;TBD
=$10					FNX3_INT04_TBD        = $10  ;TBD
=$20					FNX3_INT05_TBD        = $20  ;GABE (INT2) - TBD
=$40					FNX3_INT06_TBD        = $40  ;External Expansion
=$80					FNX3_INT07_TBD        = $80  ; SDCARD Insertion

;******  Return to file: src\kernel.asm


;******  Processing file: src\dram_inc.asm

=$afa000				SCREEN_PAGE0     = $AFA000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
=$afc000				SCREEN_PAGE1     = $AFC000 ;8192 Bytes Additional page of display RAM. This can be used for page flipping or to handle multiple edit buffers.
=$b00000				SCREEN_END       = $B00000 ;End of display memory

;******  Return to file: src\kernel.asm


;******  Processing file: src\vicky_ii_def.asm

=$af0000				MASTER_CTRL_REG_L	      = $AF0000
=$01					Mstr_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$02					Mstr_Ctrl_Text_Overlay  = $02       ; Enable the Overlay of the text mode on top of Graphic Mode (the Background Color is ignored)
=$04					Mstr_Ctrl_Graph_Mode_En = $04       ; Enable the Graphic Mode
=$08					Mstr_Ctrl_Bitmap_En     = $08       ; Enable the Bitmap Module In Vicky
=$10					Mstr_Ctrl_TileMap_En    = $10       ; Enable the Tile Module in Vicky
=$20					Mstr_Ctrl_Sprite_En     = $20       ; Enable the Sprite Module in Vicky
=$40					Mstr_Ctrl_GAMMA_En      = $40       ; this Enable the GAMMA correction - The Analog and DVI have different color value, the GAMMA is great to correct the difference
=$80					Mstr_Ctrl_Disable_Vid   = $80       ; This will disable the Scanning of the Video hence giving 100% bandwith to the CPU
=$af0001				MASTER_CTRL_REG_H       = $AF0001
=$01					Mstr_Ctrl_Video_Mode0   = $01       ; 0 - 640x480 (Clock @ 25.175Mhz), 1 - 800x600 (Clock @ 40Mhz)
=$02					Mstr_Ctrl_Video_Mode1   = $02       ; 0 - No Pixel Doubling, 1- Pixel Doubling (Reduce the Pixel Resolution by 2)
=$af0002				VKY_RESERVED_00         = $AF0002
=$af0003				VKY_RESERVED_01         = $AF0003
=$01					Border_Ctrl_Enable      = $01
=$af0004				BORDER_CTRL_REG         = $AF0004 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$af0005				BORDER_COLOR_B          = $AF0005
=$af0006				BORDER_COLOR_G          = $AF0006
=$af0007				BORDER_COLOR_R          = $AF0007
=$af0008				BORDER_X_SIZE           = $AF0008; X-  Values: 0 - 32 (Default: 32)
=$af0009				BORDER_Y_SIZE           = $AF0009; Y- Values 0 -32 (Default: 32)
=$af000d				BACKGROUND_COLOR_B      = $AF000D ; When in Graphic Mode, if a pixel is "0" then the Background pixel is chosen
=$af000e				BACKGROUND_COLOR_G      = $AF000E
=$af000f				BACKGROUND_COLOR_R      = $AF000F ;
=$af0010				VKY_TXT_CURSOR_CTRL_REG = $AF0010   ;[0]  Enable Text Mode
=$01					Vky_Cursor_Enable       = $01
=$02					Vky_Cursor_Flash_Rate0  = $02
=$04					Vky_Cursor_Flash_Rate1  = $04
=$08					Vky_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10					Vky_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$af0011				VKY_TXT_START_ADD_PTR   = $AF0011   ; This is an offset to change the Starting address of the Text Mode Buffer (in x)
=$af0012				VKY_TXT_CURSOR_CHAR_REG = $AF0012
=$af0013				VKY_TXT_CURSOR_COLR_REG = $AF0013
=$af0014				VKY_TXT_CURSOR_X_REG_L  = $AF0014
=$af0015				VKY_TXT_CURSOR_X_REG_H  = $AF0015
=$af0016				VKY_TXT_CURSOR_Y_REG_L  = $AF0016
=$af0017				VKY_TXT_CURSOR_Y_REG_H  = $AF0017
=$af001b				VKY_LINE_IRQ_CTRL_REG   = $AF001B ;[0] - Enable Line 0, [1] -Enable Line 1
=$af001c				VKY_LINE0_CMP_VALUE_LO  = $AF001C ;Write Only [7:0]
=$af001d				VKY_LINE0_CMP_VALUE_HI  = $AF001D ;Write Only [3:0]
=$af001e				VKY_LINE1_CMP_VALUE_LO  = $AF001E ;Write Only [7:0]
=$af001f				VKY_LINE1_CMP_VALUE_HI  = $AF001F ;Write Only [3:0]
=$af001c				VKY_INFO_CHIP_NUM_L     = $AF001C
=$af001d				VKY_INFO_CHIP_NUM_H     = $AF001D
=$af001e				VKY_INFO_CHIP_VER_L     = $AF001E
=$af001f				VKY_INFO_CHIP_VER_H     = $AF001F
=$af0500				MOUSE_PTR_GRAP0_START    = $AF0500 ; 16 x 16 = 256 Pixels (Grey Scale) 0 = Transparent, 1 = Black , 255 = White
=$af05ff				MOUSE_PTR_GRAP0_END      = $AF05FF ; Pointer 0
=$af0600				MOUSE_PTR_GRAP1_START    = $AF0600 ;
=$af06ff				MOUSE_PTR_GRAP1_END      = $AF06FF ; Pointer 1
=$af0700				MOUSE_PTR_CTRL_REG_L    = $AF0700 ; Bit[0] Enable, Bit[1] = 0  ( 0 = Pointer0, 1 = Pointer1)
=$af0701				MOUSE_PTR_CTRL_REG_H    = $AF0701 ;
=$af0702				MOUSE_PTR_X_POS_L       = $AF0702 ; X Position (0 - 639) (Can only read now) Writing will have no effect
=$af0703				MOUSE_PTR_X_POS_H       = $AF0703 ;
=$af0704				MOUSE_PTR_Y_POS_L       = $AF0704 ; Y Position (0 - 479) (Can only read now) Writing will have no effect
=$af0705				MOUSE_PTR_Y_POS_H       = $AF0705 ;
=$af0706				MOUSE_PTR_BYTE0         = $AF0706 ; Byte 0 of Mouse Packet (you must write 3 Bytes)
=$af0707				MOUSE_PTR_BYTE1         = $AF0707 ; Byte 1 of Mouse Packet (if you don't, then )
=$af0708				MOUSE_PTR_BYTE2         = $AF0708 ; Byte 2 of Mouse Packet (state Machine will be jammed in 1 state)
=$af070b				C256F_MODEL_MAJOR       = $AF070B ;
=$af070c				C256F_MODEL_MINOR       = $AF070C ;
=$af070d				FPGA_DOR                = $AF070D ;
=$af070e				FPGA_MOR                = $AF070E ;
=$af070f				FPGA_YOR                = $AF070F ;
=$af1f40				FG_CHAR_LUT_PTR         = $AF1F40
=$af1f80				BG_CHAR_LUT_PTR		    = $AF1F80
=$af2000				GRPH_LUT0_PTR		    = $AF2000
=$af2400				GRPH_LUT1_PTR		    = $AF2400
=$af2800				GRPH_LUT2_PTR		    = $AF2800
=$af2c00				GRPH_LUT3_PTR		    = $AF2C00
=$af3000				GRPH_LUT4_PTR		    = $AF3000
=$af3400				GRPH_LUT5_PTR		    = $AF3400
=$af3800				GRPH_LUT6_PTR		    = $AF3800
=$af3c00				GRPH_LUT7_PTR		    = $AF3C00
=$af4000				GAMMA_B_LUT_PTR		    = $AF4000
=$af4100				GAMMA_G_LUT_PTR		    = $AF4100
=$af4200				GAMMA_R_LUT_PTR		    = $AF4200
=$af8000				FONT_MEMORY_BANK0       = $AF8000     ;$AF8000 - $AF87FF
=$af8800				FONT_MEMORY_BANK1       = $AF8800     ;$AF8800 - $AF8FFF
=$afa000				CS_TEXT_MEM_PTR         = $AFA000
=$afc000				CS_COLOR_MEM_PTR        = $AFC000
=$afe000				BTX_START               = $AFE000     ; BEATRIX Registers
=$afffff				BTX_END                 = $AFFFFF

;******  Processing file: src\VKYII_CFP9553_BITMAP_def.asm

=$01					BM_Enable             = $01
=$00					BM_LUT0               = $00 ;
=$02					BM_LUT1               = $02 ;
=$04					BM_LUT2               = $04 ;
=$06					BM_LUT3               = $06 ;
=$08					BM_LUT4               = $08 ;
=$0a					BM_LUT5               = $0A ;
=$0c					BM_LUT6               = $0C ;
=$0e					BM_LUT7               = $0E ;
=$af0100				BM0_CONTROL_REG     = $AF0100
=$af0101				BM0_START_ADDY_L    = $AF0101
=$af0102				BM0_START_ADDY_M    = $AF0102
=$af0103				BM0_START_ADDY_H    = $AF0103
=$af0104				BM0_X_OFFSET        = $AF0104   ; Not Implemented
=$af0105				BM0_Y_OFFSET        = $AF0105   ; Not Implemented
=$af0106				BM0_RESERVED_6      = $AF0106
=$af0107				BM0_RESERVED_7      = $AF0107
=$af0108				BM1_CONTROL_REG     = $AF0108
=$af0109				BM1_START_ADDY_L    = $AF0109
=$af010a				BM1_START_ADDY_M    = $AF010A
=$af010b				BM1_START_ADDY_H    = $AF010B
=$af010c				BM1_X_OFFSET        = $AF010C   ; Not Implemented
=$af010d				BM1_Y_OFFSET        = $AF010D   ; Not Implemented
=$af010e				BM1_RESERVED_6      = $AF010E
=$af010f				BM1_RESERVED_7      = $AF010F

;******  Return to file: src\vicky_ii_def.asm


;******  Processing file: src\VKYII_CFP9553_TILEMAP_def.asm

=$01					TILE_Enable             = $01
=$af0200				TL0_CONTROL_REG         = $AF0200       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0201				TL0_START_ADDY_L        = $AF0201       ; Not USed right now - Starting Address to where is the MAP
=$af0202				TL0_START_ADDY_M        = $AF0202
=$af0203				TL0_START_ADDY_H        = $AF0203
=$af0204				TL0_TOTAL_X_SIZE_L      = $AF0204       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0205				TL0_TOTAL_X_SIZE_H      = $AF0205
=$af0206				TL0_TOTAL_Y_SIZE_L      = $AF0206       ; Size of the Map in Y Tile Count [9:0]
=$af0207				TL0_TOTAL_Y_SIZE_H      = $AF0207
=$af0208				TL0_WINDOW_X_POS_L      = $AF0208       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0209				TL0_WINDOW_X_POS_H      = $AF0209       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af020a				TL0_WINDOW_Y_POS_L      = $AF020A       ; Top Left Corner Position of the TileMAp Window in Y
=$af020b				TL0_WINDOW_Y_POS_H      = $AF020B       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af020c				TL1_CONTROL_REG         = $AF020C       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af020d				TL1_START_ADDY_L        = $AF020D       ; Not USed right now - Starting Address to where is the MAP
=$af020e				TL1_START_ADDY_M        = $AF020E
=$af020f				TL1_START_ADDY_H        = $AF020F
=$af0210				TL1_TOTAL_X_SIZE_L      = $AF0210       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0211				TL1_TOTAL_X_SIZE_H      = $AF0211
=$af0212				TL1_TOTAL_Y_SIZE_L      = $AF0212       ; Size of the Map in Y Tile Count [9:0]
=$af0213				TL1_TOTAL_Y_SIZE_H      = $AF0213
=$af0214				TL1_WINDOW_X_POS_L      = $AF0214       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0215				TL1_WINDOW_X_POS_H      = $AF0215       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0216				TL1_WINDOW_Y_POS_L      = $AF0216       ; Top Left Corner Position of the TileMAp Window in Y
=$af0217				TL1_WINDOW_Y_POS_H      = $AF0217       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0218				TL2_CONTROL_REG         = $AF0218       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0219				TL2_START_ADDY_L        = $AF0219       ; Not USed right now - Starting Address to where is the MAP
=$af021a				TL2_START_ADDY_M        = $AF021A
=$af021b				TL2_START_ADDY_H        = $AF021B
=$af021c				TL2_TOTAL_X_SIZE_L      = $AF021C       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af021d				TL2_TOTAL_X_SIZE_H      = $AF021D
=$af021e				TL2_TOTAL_Y_SIZE_L      = $AF021E       ; Size of the Map in Y Tile Count [9:0]
=$af021f				TL2_TOTAL_Y_SIZE_H      = $AF021F
=$af0220				TL2_WINDOW_X_POS_L      = $AF0220       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0221				TL2_WINDOW_X_POS_H      = $AF0221       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0222				TL2_WINDOW_Y_POS_L      = $AF0222       ; Top Left Corner Position of the TileMAp Window in Y
=$af0223				TL2_WINDOW_Y_POS_H      = $AF0223       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0224				TL3_CONTROL_REG         = $AF0224       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0225				TL3_START_ADDY_L        = $AF0225       ; Not USed right now - Starting Address to where is the MAP
=$af0226				TL3_START_ADDY_M        = $AF0226
=$af0227				TL3_START_ADDY_H        = $AF0227
=$af0228				TL3_TOTAL_X_SIZE_L      = $AF0228       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0229				TL3_TOTAL_X_SIZE_H      = $AF0229
=$af022a				TL3_TOTAL_Y_SIZE_L      = $AF022A       ; Size of the Map in Y Tile Count [9:0]
=$af022b				TL3_TOTAL_Y_SIZE_H      = $AF022B
=$af022c				TL3_WINDOW_X_POS_L      = $AF022C       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af022d				TL3_WINDOW_X_POS_H      = $AF022D       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af022e				TL3_WINDOW_Y_POS_L      = $AF022E       ; Top Left Corner Position of the TileMAp Window in Y
=$af022f				TL3_WINDOW_Y_POS_H      = $AF022F       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0280				TILESET0_ADDY_L         = $AF0280   ; Pointer to Tileset 0 [21:0]
=$af0281				TILESET0_ADDY_M         = $AF0281
=$af0282				TILESET0_ADDY_H         = $AF0282
=$af0283				TILESET0_ADDY_CFG       = $AF0283   ; [3] - TileStride256x256 [2:0] LUT
=$af0284				TILESET1_ADDY_L         = $AF0284
=$af0285				TILESET1_ADDY_M         = $AF0285
=$af0286				TILESET1_ADDY_H         = $AF0286
=$af0287				TILESET1_ADDY_CFG       = $AF0287
=$af0288				TILESET2_ADDY_L         = $AF0288
=$af0289				TILESET2_ADDY_M         = $AF0289
=$af028a				TILESET2_ADDY_H         = $AF028A
=$af028b				TILESET2_ADDY_CFG       = $AF028B
=$af028c				TILESET3_ADDY_L         = $AF028C
=$af028d				TILESET3_ADDY_M         = $AF028D
=$af028e				TILESET3_ADDY_H         = $AF028E
=$af028f				TILESET3_ADDY_CFG       = $AF028F
=$af0290				TILESET4_ADDY_L         = $AF0290
=$af0291				TILESET4_ADDY_M         = $AF0291
=$af0292				TILESET4_ADDY_H         = $AF0292
=$af0293				TILESET4_ADDY_CFG       = $AF0293
=$af0294				TILESET5_ADDY_L         = $AF0294
=$af0295				TILESET5_ADDY_M         = $AF0295
=$af0296				TILESET5_ADDY_H         = $AF0296
=$af0297				TILESET5_ADDY_CFG       = $AF0297
=$af0298				TILESET6_ADDY_L         = $AF0298
=$af0299				TILESET6_ADDY_M         = $AF0299
=$af029a				TILESET6_ADDY_H         = $AF029A
=$af029b				TILESET6_ADDY_CFG       = $AF029B
=$af029c				TILESET7_ADDY_L         = $AF029C
=$af029d				TILESET7_ADDY_M         = $AF029D
=$af029e				TILESET7_ADDY_H         = $AF029E
=$af029f				TILESET7_ADDY_CFG       = $AF029F

;******  Return to file: src\vicky_ii_def.asm


;******  Processing file: src\VKYII_CFP9553_VDMA_def.asm

=$af0400				VDMA_CONTROL_REG        = $AF0400
=$01					VDMA_CTRL_Enable        = $01
=$02					VDMA_CTRL_1D_2D         = $02       ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04					VDMA_CTRL_TRF_Fill      = $04       ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08					VDMA_CTRL_Int_Enable    = $08       ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10					VDMA_CTRL_SysRAM_Src    = $10       ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20					VDMA_CTRL_SysRAM_Dst    = $20       ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$80					VDMA_CTRL_Start_TRF     = $80       ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$00					VDMA_XFER_VRAM2VRAM = $00           ; VRAM -> VRAM transfer
=$01					VDMA_XFER_SRAM2VRAM = $01           ; SRAM -> VRAM transfer
=$02					VDMA_XFER_VRAM2SRAM = $02           ; VRAM -> SRAM transfer
=$af0401				VDMA_BYTE_2_WRITE       = $AF0401   ; Write Only - Byte to Write in the Fill Function
=$af0401				VDMA_STATUS_REG         = $AF0401   ; Read only
=$01					VDMA_STAT_Size_Err      = $01       ; If Set to 1, Overall Size is Invalid
=$02					VDMA_STAT_Dst_Add_Err   = $02       ; If Set to 1, Destination Address Invalid
=$04					VDMA_STAT_Src_Add_Err   = $04       ; If Set to 1, Source Address Invalid
=$80					VDMA_STAT_VDMA_IPS      = $80       ; If Set to 1, VDMA Transfer in Progress (this Inhibit CPU Access to Mem)
=$af0402				VDMA_SRC_ADDY_L         = $AF0402   ; Pointer to the Source of the Data to be stransfered
=$af0403				VDMA_SRC_ADDY_M         = $AF0403   ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0404				VDMA_SRC_ADDY_H         = $AF0404
=$af0405				VDMA_DST_ADDY_L         = $AF0405   ; Destination Pointer within Vicky's video memory Range
=$af0406				VDMA_DST_ADDY_M         = $AF0406   ; ($00_0000 - $3F_0000)
=$af0407				VDMA_DST_ADDY_H         = $AF0407
=$af0408				VDMA_SIZE_L             = $AF0408   ; Maximum Value: $40:0000 (4Megs)
=$af0409				VDMA_SIZE_M             = $AF0409
=$af040a				VDMA_SIZE_H             = $AF040A
=$af040b				VDMA_IGNORED            = $AF040B
=$af0408				VDMA_X_SIZE_L           = $AF0408   ; Maximum Value: 65535
=$af0409				VDMA_X_SIZE_H           = $AF0409
=$af040a				VDMA_Y_SIZE_L           = $AF040A   ; Maximum Value: 65535
=$af040b				VDMA_Y_SIZE_H           = $AF040B
=$af040c				VDMA_SRC_STRIDE_L       = $AF040C   ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040d				VDMA_SRC_STRIDE_H       = $AF040D   ;
=$af040e				VDMA_DST_STRIDE_L       = $AF040E   ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040f				VDMA_DST_STRIDE_H       = $AF040F   ;

;******  Return to file: src\vicky_ii_def.asm


;******  Processing file: src\VKYII_CFP9553_SDMA_def.asm

=$af0420				SDMA_CTRL_REG0           = $AF0420
=$01					SDMA_CTRL0_Enable        = $01
=$02					SDMA_CTRL0_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04					SDMA_CTRL0_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08					SDMA_CTRL0_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10					SDMA_CTRL0_SysRAM_Src    = $10     ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20					SDMA_CTRL0_SysRAM_Dst    = $20     ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$00					SDMA_XFER_SRAM2SRAM = $00           ; SRAM -> SRAM transfer
=$10					SDMA_XFER_SRAM2VRAM = $10           ; SRAM -> VRAM transfer
=$20					SDMA_XFER_VRAM2SRAM = $20           ; VRAM -> SRAM transfer
=$30					SDMA_XFER_SRAMIO = $30              ; SRAM <-> IO transfer (see: SDMA_CONTROL_REG1 for config and direction)
=$40					SDMA_CTLR0_RSVD          = $40      ; Reserved
=$80					SDMA_CTRL0_Start_TRF     = $80      ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0421				SDMA_CTRL_REG1           = $AF0421  ; Write Only - Byte to Write in the Fill Function
=$01					SDMA_CTRL1_IO_Src		 = $01		; 1 = Source is an IO Address (ADC, SuperIO, IDE)
=$02					SDMA_CTRL1_IO_Src16		 = $02		; 0 = Src 8Bits Transfer / 1= 16Bits Transfer
=$04					SDMA_CTRL1_IO_Dst		 = $04		; 1 = Destination is an IO Address (DAC, SuperIO, IDE)
=$08					SDMA_CTRL1_IO_Dst16      = $08      ; 0 = Dst 8bits Transfer / 1= 16bits
=$af0422				SDMA_SRC_ADDY_L         = $AF0422   ; Pointer to the Source of the Data to be stransfered
=$af0423				SDMA_SRC_ADDY_M         = $AF0423   ; This needs to be within CPU's system RAM range ($00_0000 - $3F_FFFF)
=$af0424				SDMA_SRC_ADDY_H         = $AF0424
=$af0425				SDMA_DST_ADDY_L         = $AF0425   ; Destination Pointer within CPU's video memory Range
=$af0426				SDMA_DST_ADDY_M         = $AF0426   ; This needs to be within CPU's system RAM range ($00_0000 - $3F_FFFF)
=$af0427				SDMA_DST_ADDY_H         = $AF0427
=$af0428				SDMA_SIZE_L             = $AF0428   ; Maximum Value: $40:0000 (4Megs)
=$af0429				SDMA_SIZE_M             = $AF0429
=$af042a				SDMA_SIZE_H             = $AF042A
=$af042b				SDMA_IGNORED            = $AF042B
=$af0428				SDMA_X_SIZE_L           = $AF0428   ; Maximum Value: 65535
=$af0429				SDMA_X_SIZE_H           = $AF0429
=$af042a				SDMA_Y_SIZE_L           = $AF042A   ; Maximum Value: 65535
=$af042b				SDMA_Y_SIZE_H           = $AF042B
=$af042c				SDMA_SRC_STRIDE_L       = $AF042C   ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af042d				SDMA_SRC_STRIDE_H       = $AF042D   ;
=$af042e				SDMA_DST_STRIDE_L       = $AF042E   ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af042f				SDMA_DST_STRIDE_H       = $AF042F   ;
=$af0430				SDMA_BYTE_2_WRITE       = $AF0430   ; Write Only - Byte to Write in the Fill Function
=$af0430				SDMA_STATUS_REG         = $AF0430   ; Read only
=$01					SDMA_STAT_Size_Err       = $01      ; If Set to 1, Overall Size is Invalid
=$02					SDMA_STAT_Dst_Add_Err    = $02      ; If Set to 1, Destination Address Invalid
=$04					SDMA_STAT_Src_Add_Err    = $04      ; If Set to 1, Source Address Invalid
=$08					SDMA_STAT_TimeOut_Err    = $08      ; will be set to 1 if a Timeout occur when transfering between data from and to VRAM

;******  Return to file: src\vicky_ii_def.asm


;******  Processing file: src\VKYII_CFP9553_SPRITE_def.asm

=$01					SPRITE_Enable             = $01
=$00					SPRITE_LUT0               = $00 ; This is the LUT that the Sprite will use
=$02					SPRITE_LUT1               = $02
=$04					SPRITE_LUT2               = $04 ; Only 4 LUT for Now, So this bit is not used.
=$06					SPRITE_LUT3               = $06 ; Only 4 LUT for Now, So this bit is not used.
=$08					SPRITE_LUT4               = $08 ; Only 4 LUT for Now, So this bit is not used.
=$0a					SPRITE_LUT5               = $0A ; Only 4 LUT for Now, So this bit is not used.
=$0c					SPRITE_LUT6               = $0C ; Only 4 LUT for Now, So this bit is not used.
=$0e					SPRITE_LUT7               = $0E ; Only 4 LUT for Now, So this bit is not used.
=$00					SPRITE_DEPTH0             = $00
=$10					SPRITE_DEPTH1             = $10
=$20					SPRITE_DEPTH2             = $20
=$30					SPRITE_DEPTH3             = $30
=$40					SPRITE_DEPTH4             = $40
=$50					SPRITE_DEPTH5             = $50
=$60					SPRITE_DEPTH6             = $60
=$af0c00				SP00_CONTROL_REG        = $AF0C00
=$af0c01				SP00_ADDY_PTR_L         = $AF0C01
=$af0c02				SP00_ADDY_PTR_M         = $AF0C02
=$af0c03				SP00_ADDY_PTR_H         = $AF0C03
=$af0c04				SP00_X_POS_L            = $AF0C04
=$af0c05				SP00_X_POS_H            = $AF0C05
=$af0c06				SP00_Y_POS_L            = $AF0C06
=$af0c07				SP00_Y_POS_H            = $AF0C07
=$af0c08				SP01_CONTROL_REG        = $AF0C08
=$af0c09				SP01_ADDY_PTR_L         = $AF0C09
=$af0c0a				SP01_ADDY_PTR_M         = $AF0C0A
=$af0c0b				SP01_ADDY_PTR_H         = $AF0C0B
=$af0c0c				SP01_X_POS_L            = $AF0C0C
=$af0c0d				SP01_X_POS_H            = $AF0C0D
=$af0c0e				SP01_Y_POS_L            = $AF0C0E
=$af0c0f				SP01_Y_POS_H            = $AF0C0F
=$af0c10				SP02_CONTROL_REG        = $AF0C10
=$af0c11				SP02_ADDY_PTR_L         = $AF0C11
=$af0c12				SP02_ADDY_PTR_M         = $AF0C12
=$af0c13				SP02_ADDY_PTR_H         = $AF0C13
=$af0c14				SP02_X_POS_L            = $AF0C14
=$af0c15				SP02_X_POS_H            = $AF0C15
=$af0c16				SP02_Y_POS_L            = $AF0C16
=$af0c17				SP02_Y_POS_H            = $AF0C17
=$af0c18				SP03_CONTROL_REG        = $AF0C18
=$af0c19				SP03_ADDY_PTR_L         = $AF0C19
=$af0c1a				SP03_ADDY_PTR_M         = $AF0C1A
=$af0c1b				SP03_ADDY_PTR_H         = $AF0C1B
=$af0c1c				SP03_X_POS_L            = $AF0C1C
=$af0c1d				SP03_X_POS_H            = $AF0C1D
=$af0c1e				SP03_Y_POS_L            = $AF0C1E
=$af0c1f				SP03_Y_POS_H            = $AF0C1F
=$af0c20				SP04_CONTROL_REG        = $AF0C20
=$af0c21				SP04_ADDY_PTR_L         = $AF0C21
=$af0c22				SP04_ADDY_PTR_M         = $AF0C22
=$af0c23				SP04_ADDY_PTR_H         = $AF0C23
=$af0c24				SP04_X_POS_L            = $AF0C24
=$af0c25				SP04_X_POS_H            = $AF0C25
=$af0c26				SP04_Y_POS_L            = $AF0C26
=$af0c27				SP04_Y_POS_H            = $AF0C27
=$af0c28				SP05_CONTROL_REG        = $AF0C28
=$af0c29				SP05_ADDY_PTR_L         = $AF0C29
=$af0c2a				SP05_ADDY_PTR_M         = $AF0C2A
=$af0c2b				SP05_ADDY_PTR_H         = $AF0C2B
=$af0c2c				SP05_X_POS_L            = $AF0C2C
=$af0c2d				SP05_X_POS_H            = $AF0C2D
=$af0c2e				SP05_Y_POS_L            = $AF0C2E
=$af0c2f				SP05_Y_POS_H            = $AF0C2F
=$af0c30				SP06_CONTROL_REG        = $AF0C30
=$af0c31				SP06_ADDY_PTR_L         = $AF0C31
=$af0c32				SP06_ADDY_PTR_M         = $AF0C32
=$af0c33				SP06_ADDY_PTR_H         = $AF0C33
=$af0c34				SP06_X_POS_L            = $AF0C34
=$af0c35				SP06_X_POS_H            = $AF0C35
=$af0c36				SP06_Y_POS_L            = $AF0C36
=$af0c37				SP06_Y_POS_H            = $AF0C37
=$af0c38				SP07_CONTROL_REG        = $AF0C38
=$af0c39				SP07_ADDY_PTR_L         = $AF0C39
=$af0c3a				SP07_ADDY_PTR_M         = $AF0C3A
=$af0c3b				SP07_ADDY_PTR_H         = $AF0C3B
=$af0c3c				SP07_X_POS_L            = $AF0C3C
=$af0c3d				SP07_X_POS_H            = $AF0C3D
=$af0c3e				SP07_Y_POS_L            = $AF0C3E
=$af0c3f				SP07_Y_POS_H            = $AF0C3F
=$af0c40				SP08_CONTROL_REG        = $AF0C40
=$af0c41				SP08_ADDY_PTR_L         = $AF0C41
=$af0c42				SP08_ADDY_PTR_M         = $AF0C42
=$af0c43				SP08_ADDY_PTR_H         = $AF0C43
=$af0c44				SP08_X_POS_L            = $AF0C44
=$af0c45				SP08_X_POS_H            = $AF0C45
=$af0c46				SP08_Y_POS_L            = $AF0C46
=$af0c47				SP08_Y_POS_H            = $AF0C47
=$af0c48				SP09_CONTROL_REG        = $AF0C48
=$af0c49				SP09_ADDY_PTR_L         = $AF0C49
=$af0c4a				SP09_ADDY_PTR_M         = $AF0C4A
=$af0c4b				SP09_ADDY_PTR_H         = $AF0C4B
=$af0c4c				SP09_X_POS_L            = $AF0C4C
=$af0c4d				SP09_X_POS_H            = $AF0C4D
=$af0c4e				SP09_Y_POS_L            = $AF0C4E
=$af0c4f				SP09_Y_POS_H            = $AF0C4F
=$af0c50				SP10_CONTROL_REG        = $AF0C50
=$af0c51				SP10_ADDY_PTR_L         = $AF0C51
=$af0c52				SP10_ADDY_PTR_M         = $AF0C52
=$af0c53				SP10_ADDY_PTR_H         = $AF0C53
=$af0c54				SP10_X_POS_L            = $AF0C54
=$af0c55				SP10_X_POS_H            = $AF0C55
=$af0c56				SP10_Y_POS_L            = $AF0C56
=$af0c57				SP10_Y_POS_H            = $AF0C57
=$af0c58				SP11_CONTROL_REG        = $AF0C58
=$af0c59				SP11_ADDY_PTR_L         = $AF0C59
=$af0c5a				SP11_ADDY_PTR_M         = $AF0C5A
=$af0c5b				SP11_ADDY_PTR_H         = $AF0C5B
=$af0c5c				SP11_X_POS_L            = $AF0C5C
=$af0c5d				SP11_X_POS_H            = $AF0C5D
=$af0c5e				SP11_Y_POS_L            = $AF0C5E
=$af0c5f				SP11_Y_POS_H            = $AF0C5F
=$af0c60				SP12_CONTROL_REG        = $AF0C60
=$af0c61				SP12_ADDY_PTR_L         = $AF0C61
=$af0c62				SP12_ADDY_PTR_M         = $AF0C62
=$af0c63				SP12_ADDY_PTR_H         = $AF0C63
=$af0c64				SP12_X_POS_L            = $AF0C64
=$af0c65				SP12_X_POS_H            = $AF0C65
=$af0c66				SP12_Y_POS_L            = $AF0C66
=$af0c67				SP12_Y_POS_H            = $AF0C67
=$af0c68				SP13_CONTROL_REG        = $AF0C68
=$af0c69				SP13_ADDY_PTR_L         = $AF0C69
=$af0c6a				SP13_ADDY_PTR_M         = $AF0C6A
=$af0c6b				SP13_ADDY_PTR_H         = $AF0C6B
=$af0c6c				SP13_X_POS_L            = $AF0C6C
=$af0c6d				SP13_X_POS_H            = $AF0C6D
=$af0c6e				SP13_Y_POS_L            = $AF0C6E
=$af0c6f				SP13_Y_POS_H            = $AF0C6F
=$af0c70				SP14_CONTROL_REG        = $AF0C70
=$af0c71				SP14_ADDY_PTR_L         = $AF0C71
=$af0c72				SP14_ADDY_PTR_M         = $AF0C72
=$af0c73				SP14_ADDY_PTR_H         = $AF0C73
=$af0c74				SP14_X_POS_L            = $AF0C74
=$af0c75				SP14_X_POS_H            = $AF0C75
=$af0c76				SP14_Y_POS_L            = $AF0C76
=$af0c77				SP14_Y_POS_H            = $AF0C77
=$af0c78				SP15_CONTROL_REG        = $AF0C78
=$af0c79				SP15_ADDY_PTR_L         = $AF0C79
=$af0c7a				SP15_ADDY_PTR_M         = $AF0C7A
=$af0c7b				SP15_ADDY_PTR_H         = $AF0C7B
=$af0c7c				SP15_X_POS_L            = $AF0C7C
=$af0c7d				SP15_X_POS_H            = $AF0C7D
=$af0c7e				SP15_Y_POS_L            = $AF0C7E
=$af0c7f				SP15_Y_POS_H            = $AF0C7F
=$af0c80				SP16_CONTROL_REG        = $AF0C80
=$af0c81				SP16_ADDY_PTR_L         = $AF0C81
=$af0c82				SP16_ADDY_PTR_M         = $AF0C82
=$af0c83				SP16_ADDY_PTR_H         = $AF0C83
=$af0c84				SP16_X_POS_L            = $AF0C84
=$af0c85				SP16_X_POS_H            = $AF0C85
=$af0c86				SP16_Y_POS_L            = $AF0C86
=$af0c87				SP16_Y_POS_H            = $AF0C87
=$af0c88				SP17_CONTROL_REG        = $AF0C88
=$af0c89				SP17_ADDY_PTR_L         = $AF0C89
=$af0c8a				SP17_ADDY_PTR_M         = $AF0C8A
=$af0c8b				SP17_ADDY_PTR_H         = $AF0C8B
=$af0c8c				SP17_X_POS_L            = $AF0C8C
=$af0c8d				SP17_X_POS_H            = $AF0C8D
=$af0c8e				SP17_Y_POS_L            = $AF0C8E
=$af0c8f				SP17_Y_POS_H            = $AF0C8F
=$af0c90				SP18_CONTROL_REG        = $AF0C90
=$af0c91				SP18_ADDY_PTR_L         = $AF0C91
=$af0c92				SP18_ADDY_PTR_M         = $AF0C92
=$af0c93				SP18_ADDY_PTR_H         = $AF0C93
=$af0c94				SP18_X_POS_L            = $AF0C94
=$af0c95				SP18_X_POS_H            = $AF0C95
=$af0c96				SP18_Y_POS_L            = $AF0C96
=$af0c97				SP18_Y_POS_H            = $AF0C97
=$af0c98				SP19_CONTROL_REG        = $AF0C98
=$af0c99				SP19_ADDY_PTR_L         = $AF0C99
=$af0c9a				SP19_ADDY_PTR_M         = $AF0C9A
=$af0c9b				SP19_ADDY_PTR_H         = $AF0C9B
=$af0c9c				SP19_X_POS_L            = $AF0C9C
=$af0c9d				SP19_X_POS_H            = $AF0C9D
=$af0c9e				SP19_Y_POS_L            = $AF0C9E
=$af0c9f				SP19_Y_POS_H            = $AF0C9F
=$af0ca0				SP20_CONTROL_REG        = $AF0CA0
=$af0ca1				SP20_ADDY_PTR_L         = $AF0CA1
=$af0ca2				SP20_ADDY_PTR_M         = $AF0CA2
=$af0ca3				SP20_ADDY_PTR_H         = $AF0CA3
=$af0ca4				SP20_X_POS_L            = $AF0CA4
=$af0ca5				SP20_X_POS_H            = $AF0CA5
=$af0ca6				SP20_Y_POS_L            = $AF0CA6
=$af0ca7				SP20_Y_POS_H            = $AF0CA7
=$af0ca8				SP21_CONTROL_REG        = $AF0CA8
=$af0ca9				SP21_ADDY_PTR_L         = $AF0CA9
=$af0caa				SP21_ADDY_PTR_M         = $AF0CAA
=$af0cab				SP21_ADDY_PTR_H         = $AF0CAB
=$af0cac				SP21_X_POS_L            = $AF0CAC
=$af0cad				SP21_X_POS_H            = $AF0CAD
=$af0cae				SP21_Y_POS_L            = $AF0CAE
=$af0caf				SP21_Y_POS_H            = $AF0CAF
=$af0cb0				SP22_CONTROL_REG        = $AF0CB0
=$af0cb1				SP22_ADDY_PTR_L         = $AF0CB1
=$af0cb2				SP22_ADDY_PTR_M         = $AF0CB2
=$af0cb3				SP22_ADDY_PTR_H         = $AF0CB3
=$af0cb4				SP22_X_POS_L            = $AF0CB4
=$af0cb5				SP22_X_POS_H            = $AF0CB5
=$af0cb6				SP22_Y_POS_L            = $AF0CB6
=$af0cb7				SP22_Y_POS_H            = $AF0CB7
=$af0cb8				SP23_CONTROL_REG        = $AF0CB8
=$af0cb9				SP23_ADDY_PTR_L         = $AF0CB9
=$af0cba				SP23_ADDY_PTR_M         = $AF0CBA
=$af0cbb				SP23_ADDY_PTR_H         = $AF0CBB
=$af0cbc				SP23_X_POS_L            = $AF0CBC
=$af0cbd				SP23_X_POS_H            = $AF0CBD
=$af0cbe				SP23_Y_POS_L            = $AF0CBE
=$af0cbf				SP23_Y_POS_H            = $AF0CBF
=$af0cc0				SP24_CONTROL_REG        = $AF0CC0
=$af0cc1				SP24_ADDY_PTR_L         = $AF0CC1
=$af0cc2				SP24_ADDY_PTR_M         = $AF0CC2
=$af0cc3				SP24_ADDY_PTR_H         = $AF0CC3
=$af0cc4				SP24_X_POS_L            = $AF0CC4
=$af0cc5				SP24_X_POS_H            = $AF0CC5
=$af0cc6				SP24_Y_POS_L            = $AF0CC6
=$af0cc7				SP24_Y_POS_H            = $AF0CC7
=$af0cc8				SP25_CONTROL_REG        = $AF0CC8
=$af0cc9				SP25_ADDY_PTR_L         = $AF0CC9
=$af0cca				SP25_ADDY_PTR_M         = $AF0CCA
=$af0ccb				SP25_ADDY_PTR_H         = $AF0CCB
=$af0ccc				SP25_X_POS_L            = $AF0CCC
=$af0ccd				SP25_X_POS_H            = $AF0CCD
=$af0cce				SP25_Y_POS_L            = $AF0CCE
=$af0ccf				SP25_Y_POS_H            = $AF0CCF
=$af0cd0				SP26_CONTROL_REG        = $AF0CD0
=$af0cd1				SP26_ADDY_PTR_L         = $AF0CD1
=$af0cd2				SP26_ADDY_PTR_M         = $AF0CD2
=$af0cd3				SP26_ADDY_PTR_H         = $AF0CD3
=$af0cd4				SP26_X_POS_L            = $AF0CD4
=$af0cd5				SP26_X_POS_H            = $AF0CD5
=$af0cd6				SP26_Y_POS_L            = $AF0CD6
=$af0cd7				SP26_Y_POS_H            = $AF0CD7
=$af0cd8				SP27_CONTROL_REG        = $AF0CD8
=$af0cd9				SP27_ADDY_PTR_L         = $AF0CD9
=$af0cda				SP27_ADDY_PTR_M         = $AF0CDA
=$af0cdb				SP27_ADDY_PTR_H         = $AF0CDB
=$af0cdc				SP27_X_POS_L            = $AF0CDC
=$af0cdd				SP27_X_POS_H            = $AF0CDD
=$af0cde				SP27_Y_POS_L            = $AF0CDE
=$af0cdf				SP27_Y_POS_H            = $AF0CDF
=$af0ce0				SP28_CONTROL_REG        = $AF0CE0
=$af0ce1				SP28_ADDY_PTR_L         = $AF0CE1
=$af0ce2				SP28_ADDY_PTR_M         = $AF0CE2
=$af0ce3				SP28_ADDY_PTR_H         = $AF0CE3
=$af0ce4				SP28_X_POS_L            = $AF0CE4
=$af0ce5				SP28_X_POS_H            = $AF0CE5
=$af0ce6				SP28_Y_POS_L            = $AF0CE6
=$af0ce7				SP28_Y_POS_H            = $AF0CE7
=$af0ce8				SP29_CONTROL_REG        = $AF0CE8
=$af0ce9				SP29_ADDY_PTR_L         = $AF0CE9
=$af0cea				SP29_ADDY_PTR_M         = $AF0CEA
=$af0ceb				SP29_ADDY_PTR_H         = $AF0CEB
=$af0cec				SP29_X_POS_L            = $AF0CEC
=$af0ced				SP29_X_POS_H            = $AF0CED
=$af0cee				SP29_Y_POS_L            = $AF0CEE
=$af0cef				SP29_Y_POS_H            = $AF0CEF
=$af0cf0				SP30_CONTROL_REG        = $AF0CF0
=$af0cf1				SP30_ADDY_PTR_L         = $AF0CF1
=$af0cf2				SP30_ADDY_PTR_M         = $AF0CF2
=$af0cf3				SP30_ADDY_PTR_H         = $AF0CF3
=$af0cf4				SP30_X_POS_L            = $AF0CF4
=$af0cf5				SP30_X_POS_H            = $AF0CF5
=$af0cf6				SP30_Y_POS_L            = $AF0CF6
=$af0cf7				SP30_Y_POS_H            = $AF0CF7
=$af0cf8				SP31_CONTROL_REG        = $AF0CF8
=$af0cf9				SP31_ADDY_PTR_L         = $AF0CF9
=$af0cfa				SP31_ADDY_PTR_M         = $AF0CFA
=$af0cfb				SP31_ADDY_PTR_H         = $AF0CFB
=$af0cfc				SP31_X_POS_L            = $AF0CFC
=$af0cfd				SP31_X_POS_H            = $AF0CFD
=$af0cfe				SP31_Y_POS_L            = $AF0CFE
=$af0cff				SP31_Y_POS_H            = $AF0CFF
=$af0d00				SP32_CONTROL_REG        = $AF0D00
=$af0d01				SP32_ADDY_PTR_L         = $AF0D01
=$af0d02				SP32_ADDY_PTR_M         = $AF0D02
=$af0d03				SP32_ADDY_PTR_H         = $AF0D03
=$af0d04				SP32_X_POS_L            = $AF0D04
=$af0d05				SP32_X_POS_H            = $AF0D05
=$af0d06				SP32_Y_POS_L            = $AF0D06
=$af0d07				SP32_Y_POS_H            = $AF0D07
=$af0d08				SP33_CONTROL_REG        = $AF0D08
=$af0d09				SP33_ADDY_PTR_L         = $AF0D09
=$af0d0a				SP33_ADDY_PTR_M         = $AF0D0A
=$af0d0b				SP33_ADDY_PTR_H         = $AF0D0B
=$af0d0c				SP33_X_POS_L            = $AF0D0C
=$af0d0d				SP33_X_POS_H            = $AF0D0D
=$af0d0e				SP33_Y_POS_L            = $AF0D0E
=$af0d0f				SP33_Y_POS_H            = $AF0D0F
=$af0d10				SP34_CONTROL_REG        = $AF0D10
=$af0d11				SP34_ADDY_PTR_L         = $AF0D11
=$af0d12				SP34_ADDY_PTR_M         = $AF0D12
=$af0d13				SP34_ADDY_PTR_H         = $AF0D13
=$af0d14				SP34_X_POS_L            = $AF0D14
=$af0d15				SP34_X_POS_H            = $AF0D15
=$af0d16				SP34_Y_POS_L            = $AF0D16
=$af0d17				SP34_Y_POS_H            = $AF0D17
=$af0d18				SP35_CONTROL_REG        = $AF0D18
=$af0d19				SP35_ADDY_PTR_L         = $AF0D19
=$af0d1a				SP35_ADDY_PTR_M         = $AF0D1A
=$af0d1b				SP35_ADDY_PTR_H         = $AF0D1B
=$af0d1c				SP35_X_POS_L            = $AF0D1C
=$af0d1d				SP35_X_POS_H            = $AF0D1D
=$af0d1e				SP35_Y_POS_L            = $AF0D1E
=$af0d1f				SP35_Y_POS_H            = $AF0D1F
=$af0d20				SP36_CONTROL_REG        = $AF0D20
=$af0d21				SP36_ADDY_PTR_L         = $AF0D21
=$af0d22				SP36_ADDY_PTR_M         = $AF0D22
=$af0d23				SP36_ADDY_PTR_H         = $AF0D23
=$af0d24				SP36_X_POS_L            = $AF0D24
=$af0d25				SP36_X_POS_H            = $AF0D25
=$af0d26				SP36_Y_POS_L            = $AF0D26
=$af0d27				SP36_Y_POS_H            = $AF0D27
=$af0d28				SP37_CONTROL_REG        = $AF0D28
=$af0d29				SP37_ADDY_PTR_L         = $AF0D29
=$af0d2a				SP37_ADDY_PTR_M         = $AF0D2A
=$af0d2b				SP37_ADDY_PTR_H         = $AF0D2B
=$af0d2c				SP37_X_POS_L            = $AF0D2C
=$af0d2d				SP37_X_POS_H            = $AF0D2D
=$af0d2e				SP37_Y_POS_L            = $AF0D2E
=$af0d2f				SP37_Y_POS_H            = $AF0D2F
=$af0d30				SP38_CONTROL_REG        = $AF0D30
=$af0d31				SP38_ADDY_PTR_L         = $AF0D31
=$af0d32				SP38_ADDY_PTR_M         = $AF0D32
=$af0d33				SP38_ADDY_PTR_H         = $AF0D33
=$af0d34				SP38_X_POS_L            = $AF0D34
=$af0d35				SP38_X_POS_H            = $AF0D35
=$af0d36				SP38_Y_POS_L            = $AF0D36
=$af0d37				SP38_Y_POS_H            = $AF0D37
=$af0d38				SP39_CONTROL_REG        = $AF0D38
=$af0d39				SP39_ADDY_PTR_L         = $AF0D39
=$af0d3a				SP39_ADDY_PTR_M         = $AF0D3A
=$af0d3b				SP39_ADDY_PTR_H         = $AF0D3B
=$af0d3c				SP39_X_POS_L            = $AF0D3C
=$af0d3d				SP39_X_POS_H            = $AF0D3D
=$af0d3e				SP39_Y_POS_L            = $AF0D3E
=$af0d3f				SP39_Y_POS_H            = $AF0D3F
=$af0d40				SP40_CONTROL_REG        = $AF0D40
=$af0d41				SP40_ADDY_PTR_L         = $AF0D41
=$af0d42				SP40_ADDY_PTR_M         = $AF0D42
=$af0d43				SP40_ADDY_PTR_H         = $AF0D43
=$af0d44				SP40_X_POS_L            = $AF0D44
=$af0d45				SP40_X_POS_H            = $AF0D45
=$af0d46				SP40_Y_POS_L            = $AF0D46
=$af0d47				SP40_Y_POS_H            = $AF0D47
=$af0d48				SP41_CONTROL_REG        = $AF0D48
=$af0d49				SP41_ADDY_PTR_L         = $AF0D49
=$af0d4a				SP41_ADDY_PTR_M         = $AF0D4A
=$af0d4b				SP41_ADDY_PTR_H         = $AF0D4B
=$af0d4c				SP41_X_POS_L            = $AF0D4C
=$af0d4d				SP41_X_POS_H            = $AF0D4D
=$af0d4e				SP41_Y_POS_L            = $AF0D4E
=$af0d4f				SP41_Y_POS_H            = $AF0D4F
=$af0d50				SP42_CONTROL_REG        = $AF0D50
=$af0d51				SP42_ADDY_PTR_L         = $AF0D51
=$af0d52				SP42_ADDY_PTR_M         = $AF0D52
=$af0d53				SP42_ADDY_PTR_H         = $AF0D53
=$af0d54				SP42_X_POS_L            = $AF0D54
=$af0d55				SP42_X_POS_H            = $AF0D55
=$af0d56				SP42_Y_POS_L            = $AF0D56
=$af0d57				SP42_Y_POS_H            = $AF0D57
=$af0d58				SP43_CONTROL_REG        = $AF0D58
=$af0d59				SP43_ADDY_PTR_L         = $AF0D59
=$af0d5a				SP43_ADDY_PTR_M         = $AF0D5A
=$af0d5b				SP43_ADDY_PTR_H         = $AF0D5B
=$af0d5c				SP43_X_POS_L            = $AF0D5C
=$af0d5d				SP43_X_POS_H            = $AF0D5D
=$af0d5e				SP43_Y_POS_L            = $AF0D5E
=$af0d5f				SP43_Y_POS_H            = $AF0D5F
=$af0d60				SP44_CONTROL_REG        = $AF0D60
=$af0d61				SP44_ADDY_PTR_L         = $AF0D61
=$af0d62				SP44_ADDY_PTR_M         = $AF0D62
=$af0d63				SP44_ADDY_PTR_H         = $AF0D63
=$af0d64				SP44_X_POS_L            = $AF0D64
=$af0d65				SP44_X_POS_H            = $AF0D65
=$af0d66				SP44_Y_POS_L            = $AF0D66
=$af0d67				SP44_Y_POS_H            = $AF0D67
=$af0d68				SP45_CONTROL_REG        = $AF0D68
=$af0d69				SP45_ADDY_PTR_L         = $AF0D69
=$af0d6a				SP45_ADDY_PTR_M         = $AF0D6A
=$af0d6b				SP45_ADDY_PTR_H         = $AF0D6B
=$af0d6c				SP45_X_POS_L            = $AF0D6C
=$af0d6d				SP45_X_POS_H            = $AF0D6D
=$af0d6e				SP45_Y_POS_L            = $AF0D6E
=$af0d6f				SP45_Y_POS_H            = $AF0D6F
=$af0d70				SP46_CONTROL_REG        = $AF0D70
=$af0d71				SP46_ADDY_PTR_L         = $AF0D71
=$af0d72				SP46_ADDY_PTR_M         = $AF0D72
=$af0d73				SP46_ADDY_PTR_H         = $AF0D73
=$af0d74				SP46_X_POS_L            = $AF0D74
=$af0d75				SP46_X_POS_H            = $AF0D75
=$af0d76				SP46_Y_POS_L            = $AF0D76
=$af0d77				SP46_Y_POS_H            = $AF0D77
=$af0d78				SP47_CONTROL_REG        = $AF0D78
=$af0d79				SP47_ADDY_PTR_L         = $AF0D79
=$af0d7a				SP47_ADDY_PTR_M         = $AF0D7A
=$af0d7b				SP47_ADDY_PTR_H         = $AF0D7B
=$af0d7c				SP47_X_POS_L            = $AF0D7C
=$af0d7d				SP47_X_POS_H            = $AF0D7D
=$af0d7e				SP47_Y_POS_L            = $AF0D7E
=$af0d7f				SP47_Y_POS_H            = $AF0D7F
=$af0d80				SP48_CONTROL_REG        = $AF0D80
=$af0d81				SP48_ADDY_PTR_L         = $AF0D81
=$af0d82				SP48_ADDY_PTR_M         = $AF0D82
=$af0d83				SP48_ADDY_PTR_H         = $AF0D83
=$af0d84				SP48_X_POS_L            = $AF0D84
=$af0d85				SP48_X_POS_H            = $AF0D85
=$af0d86				SP48_Y_POS_L            = $AF0D86
=$af0d87				SP48_Y_POS_H            = $AF0D87
=$af0d88				SP49_CONTROL_REG        = $AF0D88
=$af0d89				SP49_ADDY_PTR_L         = $AF0D89
=$af0d8a				SP49_ADDY_PTR_M         = $AF0D8A
=$af0d8b				SP49_ADDY_PTR_H         = $AF0D8B
=$af0d8c				SP49_X_POS_L            = $AF0D8C
=$af0d8d				SP49_X_POS_H            = $AF0D8D
=$af0d8e				SP49_Y_POS_L            = $AF0D8E
=$af0d8f				SP49_Y_POS_H            = $AF0D8F
=$af0d90				SP50_CONTROL_REG        = $AF0D90
=$af0d91				SP50_ADDY_PTR_L         = $AF0D91
=$af0d92				SP50_ADDY_PTR_M         = $AF0D92
=$af0d93				SP50_ADDY_PTR_H         = $AF0D93
=$af0d94				SP50_X_POS_L            = $AF0D94
=$af0d95				SP50_X_POS_H            = $AF0D95
=$af0d96				SP50_Y_POS_L            = $AF0D96
=$af0d97				SP50_Y_POS_H            = $AF0D97
=$af0d98				SP51_CONTROL_REG        = $AF0D98
=$af0d99				SP51_ADDY_PTR_L         = $AF0D99
=$af0d9a				SP51_ADDY_PTR_M         = $AF0D9A
=$af0d9b				SP51_ADDY_PTR_H         = $AF0D9B
=$af0d9c				SP51_X_POS_L            = $AF0D9C
=$af0d9d				SP51_X_POS_H            = $AF0D9D
=$af0d9e				SP51_Y_POS_L            = $AF0D9E
=$af0d9f				SP51_Y_POS_H            = $AF0D9F
=$af0da0				SP52_CONTROL_REG        = $AF0DA0
=$af0da1				SP52_ADDY_PTR_L         = $AF0DA1
=$af0da2				SP52_ADDY_PTR_M         = $AF0DA2
=$af0da3				SP52_ADDY_PTR_H         = $AF0DA3
=$af0da4				SP52_X_POS_L            = $AF0DA4
=$af0da5				SP52_X_POS_H            = $AF0DA5
=$af0da6				SP52_Y_POS_L            = $AF0DA6
=$af0da7				SP52_Y_POS_H            = $AF0DA7
=$af0da8				SP53_CONTROL_REG        = $AF0DA8
=$af0da9				SP53_ADDY_PTR_L         = $AF0DA9
=$af0daa				SP53_ADDY_PTR_M         = $AF0DAA
=$af0dab				SP53_ADDY_PTR_H         = $AF0DAB
=$af0dac				SP53_X_POS_L            = $AF0DAC
=$af0dad				SP53_X_POS_H            = $AF0DAD
=$af0dae				SP53_Y_POS_L            = $AF0DAE
=$af0daf				SP53_Y_POS_H            = $AF0DAF
=$af0db0				SP54_CONTROL_REG        = $AF0DB0
=$af0db1				SP54_ADDY_PTR_L         = $AF0DB1
=$af0db2				SP54_ADDY_PTR_M         = $AF0DB2
=$af0db3				SP54_ADDY_PTR_H         = $AF0DB3
=$af0db4				SP54_X_POS_L            = $AF0DB4
=$af0db5				SP54_X_POS_H            = $AF0DB5
=$af0db6				SP54_Y_POS_L            = $AF0DB6
=$af0db7				SP54_Y_POS_H            = $AF0DB7
=$af0db8				SP55_CONTROL_REG        = $AF0DB8
=$af0db9				SP55_ADDY_PTR_L         = $AF0DB9
=$af0dba				SP55_ADDY_PTR_M         = $AF0DBA
=$af0dbb				SP55_ADDY_PTR_H         = $AF0DBB
=$af0dbc				SP55_X_POS_L            = $AF0DBC
=$af0dbd				SP55_X_POS_H            = $AF0DBD
=$af0dbe				SP55_Y_POS_L            = $AF0DBE
=$af0dbf				SP55_Y_POS_H            = $AF0DBF
=$af0dc0				SP56_CONTROL_REG        = $AF0DC0
=$af0dc1				SP56_ADDY_PTR_L         = $AF0DC1
=$af0dc2				SP56_ADDY_PTR_M         = $AF0DC2
=$af0dc3				SP56_ADDY_PTR_H         = $AF0DC3
=$af0dc4				SP56_X_POS_L            = $AF0DC4
=$af0dc5				SP56_X_POS_H            = $AF0DC5
=$af0dc6				SP56_Y_POS_L            = $AF0DC6
=$af0dc7				SP56_Y_POS_H            = $AF0DC7
=$af0dc8				SP57_CONTROL_REG        = $AF0DC8
=$af0dc9				SP57_ADDY_PTR_L         = $AF0DC9
=$af0dca				SP57_ADDY_PTR_M         = $AF0DCA
=$af0dcb				SP57_ADDY_PTR_H         = $AF0DCB
=$af0dcc				SP57_X_POS_L            = $AF0DCC
=$af0dcd				SP57_X_POS_H            = $AF0DCD
=$af0dce				SP57_Y_POS_L            = $AF0DCE
=$af0dcf				SP57_Y_POS_H            = $AF0DCF
=$af0dd0				SP58_CONTROL_REG        = $AF0DD0
=$af0dd1				SP58_ADDY_PTR_L         = $AF0DD1
=$af0dd2				SP58_ADDY_PTR_M         = $AF0DD2
=$af0dd3				SP58_ADDY_PTR_H         = $AF0DD3
=$af0dd4				SP58_X_POS_L            = $AF0DD4
=$af0dd5				SP58_X_POS_H            = $AF0DD5
=$af0dd6				SP58_Y_POS_L            = $AF0DD6
=$af0dd7				SP58_Y_POS_H            = $AF0DD7
=$af0dd8				SP59_CONTROL_REG        = $AF0DD8
=$af0dd9				SP59_ADDY_PTR_L         = $AF0DD9
=$af0dda				SP59_ADDY_PTR_M         = $AF0DDA
=$af0ddb				SP59_ADDY_PTR_H         = $AF0DDB
=$af0ddc				SP59_X_POS_L            = $AF0DDC
=$af0ddd				SP59_X_POS_H            = $AF0DDD
=$af0dde				SP59_Y_POS_L            = $AF0DDE
=$af0ddf				SP59_Y_POS_H            = $AF0DDF
=$af0de0				SP60_CONTROL_REG        = $AF0DE0
=$af0de1				SP60_ADDY_PTR_L         = $AF0DE1
=$af0de2				SP60_ADDY_PTR_M         = $AF0DE2
=$af0de3				SP60_ADDY_PTR_H         = $AF0DE3
=$af0de4				SP60_X_POS_L            = $AF0DE4
=$af0de5				SP60_X_POS_H            = $AF0DE5
=$af0de6				SP60_Y_POS_L            = $AF0DE6
=$af0de7				SP60_Y_POS_H            = $AF0DE7
=$af0de8				SP61_CONTROL_REG        = $AF0DE8
=$af0de9				SP61_ADDY_PTR_L         = $AF0DE9
=$af0dea				SP61_ADDY_PTR_M         = $AF0DEA
=$af0deb				SP61_ADDY_PTR_H         = $AF0DEB
=$af0dec				SP61_X_POS_L            = $AF0DEC
=$af0ded				SP61_X_POS_H            = $AF0DED
=$af0dee				SP61_Y_POS_L            = $AF0DEE
=$af0def				SP61_Y_POS_H            = $AF0DEF
=$af0df0				SP62_CONTROL_REG        = $AF0DF0
=$af0df1				SP62_ADDY_PTR_L         = $AF0DF1
=$af0df2				SP62_ADDY_PTR_M         = $AF0DF2
=$af0df3				SP62_ADDY_PTR_H         = $AF0DF3
=$af0df4				SP62_X_POS_L            = $AF0DF4
=$af0df5				SP62_X_POS_H            = $AF0DF5
=$af0df6				SP62_Y_POS_L            = $AF0DF6
=$af0df7				SP62_Y_POS_H            = $AF0DF7
=$af0df8				SP63_CONTROL_REG        = $AF0DF8
=$af0df9				SP63_ADDY_PTR_L         = $AF0DF9
=$af0dfa				SP63_ADDY_PTR_M         = $AF0DFA
=$af0dfb				SP63_ADDY_PTR_H         = $AF0DFB
=$af0dfc				SP63_X_POS_L            = $AF0DFC
=$af0dfd				SP63_X_POS_H            = $AF0DFD
=$af0dfe				SP63_Y_POS_L            = $AF0DFE
=$af0dff				SP63_Y_POS_H            = $AF0DFF

;******  Return to file: src\vicky_ii_def.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\super_io_def.asm

=$af1100				PME_STS_REG     = $AF1100
=$af1102				PME_EN_REG		  = $AF1102
=$af1104				PME_STS1_REG		= $AF1104
=$af1105				PME_STS2_REG		= $AF1105
=$af1106				PME_STS3_REG		= $AF1106
=$af1107				PME_STS4_REG		= $AF1107
=$af1108				PME_STS5_REG		= $AF1108
=$af110a				PME_EN1_REG     = $AF110A
=$af110b				PME_EN2_REG     = $AF110B
=$af110c				PME_EN3_REG     = $AF110C
=$af110d				PME_EN4_REG     = $AF110D
=$af110e				PME_EN5_REG     = $AF110E
=$af1110				SMI_STS1_REG		= $AF1110
=$af1111				SMI_STS2_REG		= $AF1111
=$af1112				SMI_STS3_REG		= $AF1112
=$af1113				SMI_STS4_REG		= $AF1113
=$af1114				SMI_STS5_REG		= $AF1114
=$af1116				SMI_EN1_REG     = $AF1116
=$af1117				SMI_EN2_REG     = $AF1117
=$af1118				SMI_EN3_REG     = $AF1118
=$af1119				SMI_EN4_REG     = $AF1119
=$af111a				SMI_EN5_REG     = $AF111A
=$af111c				MSC_ST_REG      = $AF111C
=$af111e				FORCE_DISK_CHANGE       = $AF111E
=$af111f				FLOPPY_DATA_RATE        = $AF111F
=$af1120				UART1_FIFO_CTRL_SHDW    = $AF1120
=$af1121				UART2_FIFO_CTRL_SHDW    = $AF1121
=$af1122				DEV_DISABLE_REG         = $AF1122
=$af1123				GP10_REG    		= $AF1123
=$af1124				GP11_REG    		= $AF1124
=$af1125				GP12_REG    		= $AF1125
=$af1126				GP13_REG    		= $AF1126
=$af1127				GP14_REG    		= $AF1127
=$af1128				GP15_REG    		= $AF1128
=$af1129				GP16_REG    		= $AF1129
=$af112a				GP17_REG    		= $AF112A
=$af112b				GP20_REG    		= $AF112B
=$af112c				GP21_REG    		= $AF112C
=$af112d				GP22_REG		= $AF112D
=$af112f				GP24_REG		= $AF112F
=$af1130				GP25_REG		= $AF1130
=$af1131				GP26_REG		= $AF1131
=$af1132				GP27_REG		= $AF1132
=$af1133				GP30_REG		= $AF1133
=$af1134				GP31_REG		= $AF1134
=$af1135				GP32_REG		= $AF1135
=$af1136				GP33_REG		= $AF1136
=$af1137				GP34_REG		= $AF1137
=$af1138				GP35_REG		= $AF1138
=$af1139				GP36_REG		= $AF1139
=$af113a				GP37_REG		= $AF113A
=$af113b				GP40_REG		= $AF113B
=$af113c				GP41_REG		= $AF113C
=$af113d				GP42_REG		= $AF113D
=$af113e				GP43_REG		= $AF113E
=$af113f				GP50_REG		= $AF113F
=$af1140				GP51_REG		= $AF1140
=$af1141				GP52_REG		= $AF1141
=$af1142				GP53_REG		= $AF1142
=$af1143				GP54_REG		= $AF1143
=$af1144				GP55_REG		= $AF1144
=$af1145				GP56_REG		= $AF1145
=$af1146				GP57_REG		= $AF1146
=$af1147				GP60_REG		= $AF1147
=$af1148				GP61_REG		= $AF1148
=$af114b				GP1_REG			= $AF114B
=$af114c				GP2_REG			= $AF114C
=$af114d				GP3_REG			= $AF114D
=$af114e				GP4_REG			= $AF114E
=$af114f				GP5_REG			= $AF114F
=$af1150				GP6_REG			= $AF1150
=$af1156				FAN1_REG		        = $AF1156
=$af1157				FAN2_REG            = $AF1157
=$af1158				FAN_CTRL_REG  	    = $AF1158
=$af1159				FAN1_TACH_REG       = $AF1159
=$af115a				FAN2_TACH_REG       = $AF115A
=$af115b				FAN1_PRELOAD_REG    = $AF115B
=$af115c				FAN2_PRELOAD_REG    = $AF115C
=$af115d				LED1_REG    		    = $AF115D
=$af115e				LED2_REG    		    = $AF115E
=$af115f				KEYBOARD_SCAN_CODE	= $AF115F

;******  Return to file: src\kernel.asm


;******  Processing file: src\keyboard_def.asm

=$af1064				STATUS_PORT 	= $AF1064
=$af1060				KBD_OUT_BUF 	= $AF1060
=$af1060				KBD_INPT_BUF	= $AF1060
=$af1064				KBD_CMD_BUF		= $AF1064
=$af1060				KBD_DATA_BUF	= $AF1060
=$af1060				PORT_A		    = $AF1060
=$af1061				PORT_B			= $AF1061
=$01					OUT_BUF_FULL    = $01
=$02					INPT_BUF_FULL	= $02
=$04					SYS_FLAG		= $04
=$08					CMD_DATA		= $08
=$10					KEYBD_INH       = $10
=$20					TRANS_TMOUT	    = $20
=$40					RCV_TMOUT		= $40
=$80					PARITY_EVEN		= $80
=$10					INH_KEYBOARD	= $10
=$ae					KBD_ENA			= $AE
=$ad					KBD_DIS			= $AD
=$f1					KB_MENU			= $F1
=$f4					KB_ENABLE		= $F4
=$f7					KB_MAKEBREAK    = $F7
=$fe					KB_ECHO			= $FE
=$ff					KB_RESET		= $FF
=$ed					KB_LED_CMD		= $ED
=$aa					KB_OK			= $AA
=$fa					KB_ACK			= $FA
=$ff					KB_OVERRUN		= $FF
=$fe					KB_RESEND		= $FE
=$f0					KB_BREAK		= $F0
=$10					KB_FA			= $10
=$20					KB_FE			= $20
=$40					KB_PR_LED		= $40
=$01					KB_SCROLL_LOCK  = $01
=$02					KB_NUM_LOCK     = $02
=$04					KB_CAPS_LOCK    = $04
=$80					KB_CTRL_C = $80             ; CTRL-C was pressed
=$60					KB_CREDITS = $60            ; Credits key was pressed

;******  Return to file: src\kernel.asm


;******  Processing file: src\SID_def.asm

=$afe400				SID0_V1_FREQ_LO    = $AFE400 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$afe401				SID0_V1_FREQ_HI    = $AFE401 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$afe402				SID0_V1_PW_LO      = $AFE402 ;SID - L - Voice 1 (Write Only) - PW LOW
=$afe403				SID0_V1_PW_HI      = $AFE403 ;SID - L - Voice 1 (Write Only) - PW HI
=$afe404				SID0_V1_CTRL       = $AFE404 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$afe405				SID0_V1_ATCK_DECY  = $AFE405 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$afe406				SID0_V1_SSTN_RLSE  = $AFE406 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$afe407				SID0_V2_FREQ_LO    = $AFE407 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$afe408				SID0_V2_FREQ_HI    = $AFE408 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$afe409				SID0_V2_PW_LO      = $AFE409 ;SID - L - Voice 2 (Write Only) - PW LOW
=$afe40a				SID0_V2_PW_HI      = $AFE40A ;SID - L - Voice 2 (Write Only) - PW HI
=$afe40b				SID0_V2_CTRL       = $AFE40B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$afe40c				SID0_V2_ATCK_DECY  = $AFE40C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$afe40d				SID0_V2_SSTN_RLSE  = $AFE40D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$afe40e				SID0_V3_FREQ_LO    = $AFE40E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$afe40f				SID0_V3_FREQ_HI    = $AFE40F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$afe410				SID0_V3_PW_LO      = $AFE410 ;SID - L - Voice 3 (Write Only) - PW LOW
=$afe411				SID0_V3_PW_HI      = $AFE411 ;SID - L - Voice 3 (Write Only) - PW HI
=$afe412				SID0_V3_CTRL       = $AFE412 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$afe413				SID0_V3_ATCK_DECY  = $AFE413 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$afe414				SID0_V3_SSTN_RLSE  = $AFE414 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$afe415				SID0_FC_LO         = $AFE415 ;SID - L - Filter (Write Only) - FC LOW
=$afe416				SID0_FC_HI         = $AFE416 ;SID - L - Filter (Write Only) - FC HI
=$afe417				SID0_RES_FILT      = $AFE417 ;SID - L - Filter (Write Only) - RES / FILT
=$afe418				SID0_MODE_VOL      = $AFE418 ;SID - L - Filter (Write Only) - MODE / VOL
=$afe419				SID0_POT_X         = $AFE419 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$afe41a				SID0_POT_Y         = $AFE41A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$afe41b				SID0_OSC3_RND      = $AFE41B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$afe41c				SID0_ENV3          = $AFE41C ;SID - L - Misc (Read Only)  - ENV3
=$afe41d				SID0_NOT_USED0     = $AFE41D ;SID - L - NOT USED
=$afe41e				SID0_NOT_USED1     = $AFE41E ;SID - L - NOT USED
=$afe41f				SID0_NOT_USED2     = $AFE41F ;SID - L - NOT USED

;******  Return to file: src\kernel.asm


;******  Processing file: src\RTC_def.asm

=$af0800				RTC_SEC       = $AF0800 ;Seconds Register
=$af0801				RTC_SEC_ALARM = $AF0801 ;Seconds Alarm Register
=$af0802				RTC_MIN       = $AF0802 ;Minutes Register
=$af0803				RTC_MIN_ALARM = $AF0803 ;Minutes Alarm Register
=$af0804				RTC_HRS       = $AF0804 ;Hours Register
=$af0805				RTC_HRS_ALARM = $AF0805 ;Hours Alarm Register
=$af0806				RTC_DAY       = $AF0806 ;Day Register
=$af0807				RTC_DAY_ALARM = $AF0807 ;Day Alarm Register
=$af0808				RTC_DOW       = $AF0808 ;Day of Week Register
=$af0809				RTC_MONTH     = $AF0809 ;Month Register
=$af080a				RTC_YEAR      = $AF080A ;Year Register
=$af080b				RTC_RATES     = $AF080B ;Rates Register
=$af080c				RTC_ENABLE    = $AF080C ;Enables Register
=$af080d				RTC_FLAGS     = $AF080D ;Flags Register
=$af080e				RTC_CTRL      = $AF080E ;Control Register
=$af080f				RTC_CENTURY   = $AF080F ;Century Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\io_def.asm

=0					CHAN_CONSOLE  = 0           ; ID for screen and keyboard access
=1					CHAN_COM1     = 1           ; ID for serial access on COM1 (external port)
=2					CHAN_COM2     = 2           ; ID for serial access on COM2 (internal port)
=3					CHAN_LPT      = 3           ; ID for parallel port
=$afe810				SDCARD_DATA   = $AFE810     ;(R/W) SDCARD (CH376S) Data PORT_A (A0 = 0)
=$afe811				SDCARD_CMD    = $AFE811     ;(R/W) SDCARD (CH376S) CMD/STATUS Port (A0 = 1)
=$afe812				SDCARD_STAT   = $AFE812     ;(R) SDCARD (Bit[0] = CD, Bit[1] = WP)
=$01					SDC_DETECTED = $01          ; SD card has been detected (0 = card present, 1 = no card present)
=$02					SDC_WRITEPROT = $02         ; SD card is write protected (0 = card is writeable, 1 = card is write protected or missing)
=$afe900				CODEC_DATA_LO = $AFE900     ;(W) LSB of Add/Data Reg to Control CODEC See WM8776 Spec
=$afe901				CODEC_DATA_HI = $AFE901     ;(W) MSB od Add/Data Reg to Control CODEC See WM8776 Spec
=$afe902				CODEC_WR_CTRL = $AFE902     ;(W) Bit[0] = 1 -> Start Writing the CODEC Control Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\Trinity_CFP9301_def.asm

=$afe800				JOYSTICK0           = $AFE800   ;(R) Joystick 0 - J7 (next to SD Card)
=$afe801				JOYSTICK1           = $AFE801   ;(R) Joystick 1 - J8
=$afe802				JOYSTICK2           = $AFE802   ;(R) Joystick 2 - J9
=$afe803				JOYSTICK3           = $AFE803   ;(R) Joystick 3 - J10 (Next to Buzzer)
=$afe804				JOYSTICK_MODE       = $AFE804
=$01					NES_SNES_EN0        = $01       ; Enable the NES/SNES Mode on Port 0
=$02					NES_SNES_EN1        = $02       ; Enable the NES/SNES Mode on Port 1
=$04					NES_SNES_JOY        = $04       ; 0 = NES, 1 = SNES
=$40					NES_SNES_DONE       = $40       ; Poll to see if the Deserializer is done
=$80					NES_SNES_TRIG       = $80       ; Set to start the Serializer
=$afe805				REVOFPCB_C          = $AFE805   ; You should read the ASCCII for "C"
=$afe806				REVOFPCB_4          = $AFE806   ; You should read the ASCCII for "4"
=$afe807				REVOFPCB_A          = $AFE807   ; You should read the ASCCII for "A"
=$afe808				NES_SNES0_DAT_LO    = $AFE808   ; Contains the 8bits From NES and SNES
=$afe809				SNES0_DAT_HI0       = $AFE809   ; Contains the extra 4 bit from the SNES Controller
=$afe80a				NES_SNES1_DAT_LO    = $AFE80A
=$afe80b				SNES1_DAT_HI0       = $AFE80B
=$afe80c				CFP9301_REV         = $AFE80C   ; Hardware Revision of the CPLD Code
=$afe80d				DIP_USER            = $AFE80D   ; Dip Switch 3/4/5 can be user Defined
=$afe80e				DIP_BOOTMODE        = $AFE80E
=$01					BOOT_MODE0          = $01
=$02					BOOT_MODE1          = $02
=$80					HD_INSTALLED        = $80
=$00					DIP_BOOT_IDE        = $00
=$01					DIP_BOOT_SDCARD     = $01
=$02					DIP_BOOT_FLOPPY     = $02
=$03					DIP_BOOT_BASIC      = $03

;******  Return to file: src\kernel.asm


;******  Processing file: src\Unity_CFP9307_def.asm

=$afe830				IDE_DATA      = $AFE830 ; 8-Bit Access here Only
=$afe831				IDE_ERROR     = $AFE831 ; Error Information register (only read when there is an error ) - Probably clears Error Bits
=$afe832				IDE_SECT_CNT  = $AFE832 ; Sector Count Register (also used to pass parameter for timeout for IDLE modus Command)
=$afe833				IDE_SECT_SRT  = $AFE833 ; Start Sector Register (0 = 256), so start @ 1
=$afe834				IDE_CLDR_LO   = $AFE834 ; Low Byte of Cylinder Numnber {7:0}
=$afe835				IDE_CLDR_HI   = $AFE835 ;  Hi Byte of Cylinder Number {9:8} (1023-0).
=$afe836				IDE_HEAD      = $AFE836 ; Head, device select, {3:0} HEad Number, 4 -> 0:Master, 1:Slave, {7:5} = 101 (legacy);
=$afe837				IDE_CMD_STAT  = $AFE837 ; Command/Status Register - Reading this will clear the Interrupt Registers
=$afe838				IDE_DATA_LO   = $AFE838 ; 16-bit access here
=$afe839				IDE_DATA_HI   = $AFE839 ;
=$01					IDE_ERR_AMNF = $01      ; Error: Address mark not found
=$02					IDE_ERR_TKZNF = $02     ; Error: Track 0 not found
=$04					IDE_ERR_ABRT = $04      ; Error: Aborted command
=$08					IDE_ERR_MCR = $08       ; Error: Media change request
=$10					IDE_ERR_IDNF = $10      ; Error: ID not found
=$20					IDE_ERR_MC = $20        ; Error: Media change
=$40					IDE_ERR_UNC = $40       ; Error: Uncorrectable data error
=$80					IDE_ERR_BBK = $80       ; Error: Bad block detected
=$80					IDE_STAT_BSY = $80      ; BSY (Busy) is set whenever the device has control of the command Block Registers.
=$40					IDE_STAT_DRDY = $40     ; DRDY (Device Ready) is set to indicate that the device is capable of accepting all command codes.
=$20					IDE_STAT_DF = $20       ; DF (Device Fault) indicates a device fault error has been detected.
=$10					IDE_STAT_DSC = $10      ; DSC (Device Seek Complete) indicates that the device heads are settled over a track.
=$08					IDE_STAT_DRQ = $08      ; DRQ (Data Request) indicates that the device is ready to transfer a word or byte of data between
=$04					IDE_STAT_CORR = $04     ; CORR (Corrected Data) is used to indicate a correctable data error.
=$02					IDE_STAT_IDX = $02      ; Vendor specific bit
=$01					IDE_STAT_ERR = $01      ; ERR (Error) indicates that an error occurred during execution of the previous command.
=$ec					IDE_CMD_IDENTIFY = $EC      ; Get device identification data
=$21					IDE_CMD_READ_SECTOR = $21   ; Read 1 or more sectors
=$30					IDE_CMD_WRITE_SECTOR = $30  ; Write 1 or more sectors

;******  Return to file: src\kernel.asm


;******  Processing file: src\GABE_Control_Registers_def.asm

=$afe880				GABE_MSTR_CTRL      = $AFE880
=$01					GABE_CTRL_PWR_LED   = $01     ; Controls the LED in the Front of the case (Next to the reset button)
=$02					GABE_CTRL_SDC_LED   = $02     ; Controls the LED in the Front of the Case (Next to SDCard)
=$10					GABE_CTRL_BUZZER    = $10     ; Controls the Buzzer
=$80					GABE_CTRL_WRM_RST   = $80     ; Warm Reset (needs to Setup other registers)
=$afe881				GABE_NOTUSED        = $AFE881 ; Reserved for future use
=$afe882				GABE_RST_AUTH0      = $AFE882 ; Must Contain the BYTE $AD for Reset to Activate
=$afe883				GABE_RST_AUTH1      = $AFE883 ; Must Contain the BYTE $DE for Reset to Activate
=$afe884				GABE_RNG_DAT_LO     = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885				GABE_RNG_DAT_HI     = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe884				GABE_RNG_SEED_LO    = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885				GABE_RNG_SEED_HI    = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe886				GABE_RNG_STAT       = $AFE886 ;
=$80					GABE_RNG_LFSR_DONE  = $80     ; indicates that Output = SEED Database
=$afe886				GABE_RNG_CTRL       = $AFE886 ;
=$01					GABE_RNG_CTRL_EN    = $01     ; Enable the LFSR BLOCK_LEN
=$02					GABE_RNG_CTRL_DV    = $02     ; After Setting the Seed Value, Toggle that Bit for it be registered
=$afe887				GABE_SYS_STAT       = $AFE887 ;
=$01					GABE_SYS_STAT_MID0  = $01     ; Machine ID -- LSB
=$02					GABE_SYS_STAT_MID1  = $02     ; Machine ID -- MSB
=$08					GABE_SYS_STAT_EXP   = $08     ; if Zero, there is an Expansion Card Preset
=$40					GABE_SYS_STAT_CPUA  = $40     ; Indicates the (8bit/16bit) Size of the Accumulator
=$80					GABE_SYS_STAT_CPUX  = $80     ; Indicates the (8bit/16bit) Size of the Accumulator

;******  Return to file: src\kernel.asm


;******  Processing file: src\fdc_inc.asm

=$af13f0				SIO_FDC  = $AF13F0
=$af13f0				SIO_FDC_SRA = $AF13F0 ; Read Only - Status Register A (not used in AT mode)
=$af13f1				SIO_FDC_SRB = $AF13F1 ; Read Only - Status Register B (not used in AT mode)
=$af13f2				SIO_FDC_DOR = $AF13F2 ; Read/Write - Digital Output Register
=$01					FDC_DOR_DSEL0 = $01     ; Drive 0 Select
=$02					FDC_DOR_DSEL1 = $02     ; Drive 1 Select
=$04					FDC_DOR_NRESET = $04    ; Reset the FDC
=$08					FDC_DOR_DMAEN = $08     ; Enable DMA
=$10					FDC_DOR_MOT0  = $10     ; Turn on motor 0
=$20					FDC_DOR_MOT1  = $20     ; Turn on motor 1
=$40					FDC_DOR_MOT2  = $40     ; Turn on motor 2
=$80					FDC_DOR_MOT3  = $80     ; Turn on motor 3
=$af13f3				SIO_FDC_TSR = $AF13F3   ; Read/Write - Tape Drive Status (not used on the C256)
=$af13f4				SIO_FDC_MSR = $AF13F4   ; Read - Main Status Register
=$01					FDC_MSR_DRV0BSY = $01   ; Indicates if drive 0 is busy
=$02					FDC_MSR_DRV1BSY = $02   ; Indicates if drive 1 is busy
=$10					FDC_MSR_CMDBSY = $10    ; Indicates if a command is in progress
=$20					FDC_MSR_NONDMA = $20    ;
=$40					FDC_MSR_DIO = $40       ; Data direction: 1 = read, 0 = write
=$80					FDC_MSR_RQM = $80       ; 1 = host can transfer data, 0 = host must wait
=$af13f4				SIO_FDC_DSR = $AF13F4   ; Write - Data Select Register
=$40					FDC_DSR_LOPWR = $40     ; Turn on low power mode
=$80					FDC_DSR_RESET = $80     ; Software reset of the FDC
=$af13f5				SIO_FDC_DTA = $AF13F5   ; Read/Write - Data - FIFO
=$af13f6				SIO_FDC_RSV = $AF13F6   ; Reserved
=$af13f7				SIO_FDC_DIR = $AF13F7   ; Read - Digital Input Register
=$80					FDC_DIR_DSKCHG = $80    ; Indicates if the disk has changed
=$af13f7				SIO_FDC_CCR = $AF13F7   ; Write - Configuration Control Register
=$03					FDC_ST0_DRVSEL = $03    ; Mask for the current selected drive
=$04					FDC_ST0_HEAD = $04      ; Bit for the current selected head
=$08					FDC_ST0_EC = $08        ; Bit for EQUIPMENT CHECK, error in recalibrate or relative seek
=$10					FDC_ST0_SEEKEND = $10   ; The FDC completed a seek, relative seek, or recalibrate
=$c0					FDC_ST0_INTCODE = $C0   ; Mask for interrupt code:
=$01					FDC_ST1_MA = $01        ; Missing address mark
=$02					FDC_ST1_NW = $02        ; Not writable (disk is write protected)
=$04					FDC_ST1_ND = $04        ; No data
=$10					FDC_ST1_OR = $10        ; Overrun/underrun of the data
=$20					FDC_ST1_DE = $20        ; Data error... a CRC check failed
=$80					FDC_ST1_EN = $80        ; End of cylinder: tried to acess a sector not on the track
=$01					FDC_ST2_MD = $01        ; Missing address mark: FDC cannot detect a data address mark
=$02					FDC_ST2_BC = $02        ; Bad cylinder
=$10					FDC_ST2_WC = $10        ; Wrong cylinder: track is not the same as expected
=$20					FDC_ST2_DD = $20        ; Data error in field: CRC error
=$40					FDC_ST2_CM = $40        ; Control mark
=$03					FDC_ST3_DRVSEL = $03    ; Drive select mask
=$04					FDC_ST3_HEAD = $04      ; Head address bit
=$10					FDC_ST3_TRACK0 = $10    ; Track 0: Status of the TRK0 pin
=$40					FDC_ST3_WP = $40        ; Write Protect: status of the WP pin
=2					FDC_CMD_READ_TRACK          = 2
=3					FDC_CMD_SPECIFY             = 3
=4					FDC_CMD_SENSE_DRIVE_STATUS  = 4
=5					FDC_CMD_WRITE_DATA          = 5
=6					FDC_CMD_READ_DATA           = 6
=7					FDC_CMD_RECALIBRATE         = 7
=8					FDC_CMD_SENSE_INTERRUPT     = 8
=9					FDC_CMD_WRITE_DELETED_DATA  = 9
=10					FDC_CMD_READ_ID             = 10
=12					FDC_CMD_READ_DELETED_DATA   = 12
=13					FDC_CMD_FORMAT_TRACK        = 13
=14					FDC_CMD_DUMPREG             = 14
=15					FDC_CMD_SEEK                = 15
=16					FDC_CMD_VERSION             = 16
=17					FDC_CMD_SCAN_EQUAL          = 17
=18					FDC_CMD_PERPENDICULAR_MODE  = 18
=19					FDC_CMD_CONFIGURE           = 19
=20					FDC_CMD_LOCK                = 20
=22					FDC_CMD_VERIFY              = 22
=25					FDC_CMD_SCAN_LOW_OR_EQUAL   = 25
=29					FDC_CMD_SCAN_HIGH_OR_EQUAL  = 29
=$80					FDC_CMD_MT = $80                    ; Command bit to turn on multi-track
=$40					FDC_CMD_MFM = $40                   ; Command bit to operate in MFM format
=$20					FDC_CMD_SK = $20                    ; Command bit to skip deleted sectors
=$40					FDC_CMD_EIS = $40                   ; Command bit to turn on implied seek
=1					FDC_DEVCMD_MOTOR_ON         = 1     ; Device code to turn the motor on
=2					FDC_DEVCMD_MOTOR_OFF        = 2     ; Device code to turn the motor off
=3					FDC_DEVCMD_RECAL            = 3     ; Device code to recalibrate the drive

;******  Return to file: src\kernel.asm


;******  Processing file: src\timer_def.asm

=$000160				TIMER0_CTRL_REG   = $000160 ; (Write - Control, Read Status)
=$01					TMR0_EN     = $01
=$02					TMR0_SCLR   = $02
=$04					TMR0_SLOAD  = $04 ; Use SLOAD is
=$08					TMR0_UPDWN  = $08
=$000161				TIMER0_CHARGE_L   = $000161 ; Use if you want to Precharge and countdown
=$000162				TIMER0_CHARGE_M   = $000162 ;
=$000163				TIMER0_CHARGE_H   = $000163 ;
=$000164				TIMER0_CMP_REG    = $000164 ;
=$01					TMR0_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02					TMR0_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$000165				TIMER0_CMP_L      = $000165 ; Load this Value for Countup
=$000166				TIMER0_CMP_M      = $000166 ;
=$000167				TIMER0_CMP_H      = $000167 ;
=$000168				TIMER1_CTRL_REG   = $000168 ;
=$01					TMR1_EN     = $01
=$02					TMR1_SCLR   = $02
=$04					TMR1_SLOAD  = $04
=$08					TMR1_UPDWN  = $08 ; 1 = Up, 0 = Down
=$000169				TIMER1_CHARGE_L   = $000169 ; Use if you want to Precharge and countdown
=$00016a				TIMER1_CHARGE_M   = $00016A ;
=$00016b				TIMER1_CHARGE_H   = $00016B ;
=$00016c				TIMER1_CMP_REG    = $00016C ;
=$01					TMR1_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02					TMR1_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$00016d				TIMER1_CMP_L      = $00016D ;
=$00016e				TIMER1_CMP_M      = $00016E ;
=$00016f				TIMER1_CMP_H      = $00016F ;

;******  Return to file: src\kernel.asm


;******  Processing file: src\basic_inc.asm

=$3a0000				BASIC = $3A0000
=3801092				MONITOR = BASIC + 4

;******  Return to file: src\kernel.asm


;******  Processing file: src\kernel_jumptable.asm

.381000	5c 00 04 39	jmp $390400	BOOT            JML IBOOT
.381004	5c d1 16 39	jmp $3916d1	RESTORE         JML IRESTORE
.381008	5c a4 06 39	jmp $3906a4	BREAK           JML IBREAK
.38100c	5c eb 06 39	jmp $3906eb	READY           JML IREADY
.381010	5c d2 16 39	jmp $3916d2	SCINIT          JML ISCINIT
.381014	5c d3 16 39	jmp $3916d3	IOINIT          JML IIOINIT
.381018	5c 9e 07 39	jmp $39079e	PUTC            JML IPUTC
.38101c	5c 87 07 39	jmp $390787	PUTS            JML IPUTS
.381020	5c 16 09 39	jmp $390916	PUTB            JML IPUTB
.381024	5c a9 41 39	jmp $3941a9	PUTBLOCK        JML IPUTBLOCK
.381028	5c d4 16 39	jmp $3916d4	SETLFS          JML ISETLFS
.38102c	5c d5 16 39	jmp $3916d5	SETNAM          JML ISETNAM
.381030	5c d6 16 39	jmp $3916d6	OPEN            JML IOPEN
.381034	5c d7 16 39	jmp $3916d7	CLOSE           JML ICLOSE
.381038	5c 06 07 39	jmp $390706	SETIN           JML ISETIN
.38103c	5c 0f 07 39	jmp $39070f	SETOUT          JML ISETOUT
.381040	5c d8 16 39	jmp $3916d8	GETB            JML IGETB
.381044	5c 56 41 39	jmp $394156	GETBLOCK        JML IGETBLOCK
.381048	5c 48 07 39	jmp $390748	GETCH           JML IGETCH
.38104c	5c 21 07 39	jmp $390721	GETCHW          JML IGETCHW
.381050	5c 18 07 39	jmp $390718	GETCHE          JML IGETCHE
.381054	5c d9 16 39	jmp $3916d9	GETS            JML IGETS
.381058	5c da 16 39	jmp $3916da	GETLINE         JML IGETLINE
.38105c	5c db 16 39	jmp $3916db	GETFIELD        JML IGETFIELD
.381060	5c dc 16 39	jmp $3916dc	TRIM            JML ITRIM
.381064	5c dd 16 39	jmp $3916dd	PRINTC          JML IPRINTC
.381068	5c de 16 39	jmp $3916de	PRINTS          JML IPRINTS
.38106c	5c 17 09 39	jmp $390917	PRINTCR         JML IPRINTCR
.381070	5c df 16 39	jmp $3916df	PRINTF          JML IPRINTF
.381074	5c e0 16 39	jmp $3916e0	PRINTI          JML IPRINTI
.381078	5c d7 0a 39	jmp $390ad7	PRINTH          JML IPRINTH
.38107c	5c e1 16 39	jmp $3916e1	PRINTAI         JML IPRINTAI
.381080	5c f4 0a 39	jmp $390af4	PRINTAH         JML IPRINTAH
.381084	5c 1b 0a 39	jmp $390a1b	LOCATE          JML ILOCATE
.381088	5c e2 16 39	jmp $3916e2	PUSHKEY         JML IPUSHKEY
.38108c	5c e3 16 39	jmp $3916e3	PUSHKEYS        JML IPUSHKEYS
.381090	5c 77 09 39	jmp $390977	CSRRIGHT        JML ICSRRIGHT
.381094	5c aa 09 39	jmp $3909aa	CSRLEFT         JML ICSRLEFT
.381098	5c d0 09 39	jmp $3909d0	CSRUP           JML ICSRUP
.38109c	5c f6 09 39	jmp $3909f6	CSRDOWN         JML ICSRDOWN
.3810a0	5c 66 09 39	jmp $390966	CSRHOME         JML ICSRHOME
.3810a4	5c 67 0a 39	jmp $390a67	SCROLLUP        JML ISCROLLUP
.3810a8	5c 42 0b 39	jmp $390b42	CLRSCREEN       JML ICLRSCREEN
.3810ac	5c 0d 0c 39	jmp $390c0d	INITCHLUT	    JML IINITCHLUT
.3810b0	5c f9 0f 39	jmp $390ff9	INITSUPERIO	    JML IINITSUPERIO
.3810b4	5c f8 10 39	jmp $3910f8	INITKEYBOARD    JML IINITKEYBOARD
.3810b8	5c 63 12 39	jmp $391263	TESTSID         JML ITESTSID
.3810bc	5c d8 0f 39	jmp $390fd8	INITCURSOR      JML IINITCURSOR
.3810c0	5c a0 0f 39	jmp $390fa0	INITFONTSET     JML IINITFONTSET
.3810c4	5c 3c 0c 39	jmp $390c3c	INITGAMMATABLE  JML IINITGAMMATABLE
.3810c8	5c 5c 0c 39	jmp $390c5c	INITALLLUT      JML IINITALLLUT
.3810cc	5c 1e 0d 39	jmp $390d1e	INITVKYTXTMODE  JML IINITVKYTXTMODE
.3810d0	5c 2b 0e 39	jmp $390e2b	INITVKYGRPMODE  JML IINITVKYGRPMODE
.3810d4	5c 62 0e 39	jmp $390e62	INITTILEMODE    JML IINITTILEMODE
.3810d8	5c 63 0e 39	jmp $390e63	INITSPRITE      JML IINITSPRITE
.3810dc	5c 32 13 39	jmp $391332	INITCODEC       JML IINITCODEC
.3810e0	5c ae 13 39	jmp $3913ae	RESETCODEC      JML IRESETCODEC
.3810e4	5c 1c 14 39	jmp $39141c	BMP_PARSER      JML IBMP_PARSER
.3810e8	5c d1 13 39	jmp $3913d1	BM_FILL_SCREEN  JML IBM_FILL_SCREEN
.3810ec	5c 62 37 39	jmp $393762	OPL2_TONE_TEST  JML IOPL2_TONE_TEST
.3810f0	5c 23 54 39	jmp $395423	F_OPEN          JML IF_OPEN         ; open a file for reading/writing/creating
.3810f4	5c b6 54 39	jmp $3954b6	F_CREATE        JML IF_CREATE       ; create a new file
.3810f8	5c f0 54 39	jmp $3954f0	F_CLOSE         JML IF_CLOSE        ; close a file (make sure last cluster is written)
.3810fc	5c 89 55 39	jmp $395589	F_WRITE         JML IF_WRITE        ; write the current cluster to the file
.381100	5c 24 55 39	jmp $395524	F_READ          JML IF_READ         ; read the next cluster from the file
.381104	5c 33 56 39	jmp $395633	F_DELETE        JML IF_DELETE       ; delete a file / directory
.381108	5c f5 55 39	jmp $3955f5	F_DIROPEN       JML IF_DIROPEN      ; open a directory and seek the first directory entry
.38110c	5c 2f 56 39	jmp $39562f	F_DIRNEXT       JML IF_DIRNEXT      ; seek to the next directory of an open directory
.381110	5c cc 56 39	jmp $3956cc	F_DIRREAD       JML IF_DIRREAD      ; Read the directory entry for the specified file
.381114	5c f3 56 39	jmp $3956f3	F_DIRWRITE      JML IF_DIRWRITE     ; Write any changes in the current directory cluster back to the drive
.381118	5c f7 56 39	jmp $3956f7	F_LOAD          JML IF_LOAD         ; load a binary file into memory, supports multiple file formats
.38111c	5c e7 58 39	jmp $3958e7	F_SAVE          JML IF_SAVE         ; Save memory to a binary file
.381120	5c 2c 41 39	jmp $39412c	CMDBLOCK        JML ICMDBLOCK       ; Send a command to a block device
.381124	5c 80 59 39	jmp $395980	F_RUN           JML IF_RUN          ; Load an run a binary file
.381128	5c 47 45 39	jmp $394547	F_MOUNT         JML DOS_MOUNT       ; Mount the designated block device
.38112c	5c 78 0d 39	jmp $390d78	SETSIZES        JML ISETSIZES
.381130	5c a9 5a 39	jmp $395aa9	F_COPY          JML IF_COPY         ; Copy a file
.381134	5c 0b 5a 39	jmp $395a0b	F_ALLOCFD       JML IF_ALLOCFD      ; Allocate a file descriptor
.381138	5c 5f 5a 39	jmp $395a5f	F_FREEFD        JML IF_FREEFD       ; Free a file descriptor
.38113c	5c e6 16 39	jmp $3916e6	TIMER0INTSUB    JML ITIMER0INTSUB
.381140	5c e7 16 39	jmp $3916e7	TIMER1INTSUB    JML ITIMER1INTSUB
.381144	5c e8 16 39	jmp $3916e8	TIMER2INTSUB    JML ITIMER2INTSUB

;******  Return to file: src\kernel.asm


;******  Processing file: src\Interrupt_Handler.asm

.381148					IRQ_HANDLER
.381148	e2 20		sep #$20	                SEP #$20        ; set A short
.38114a	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.38114e	c9 00		cmp #$00	                CMP #$00
.381150	f0 6c		beq $3811be	                BEQ CHECK_PENDING_REG1
.381152	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381156	29 01		and #$01	                AND #FNX0_INT00_SOF
.381158	c9 01		cmp #$01	                CMP #FNX0_INT00_SOF
.38115a	d0 09		bne $381165	                BNE SERVICE_NEXT_IRQ2
.38115c	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381160	20 28 12	jsr $381228	                JSR SOF_INTERRUPT
.381163	e2 20		sep #$20	                SEP #$20        ; set A short
.381165					SERVICE_NEXT_IRQ2
.381165	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381169	29 04		and #$04	                AND #FNX0_INT02_TMR0
.38116b	c9 04		cmp #$04	                CMP #FNX0_INT02_TMR0
.38116d	d0 07		bne $381176	                BNE SERVICE_NEXT_IRQ3
.38116f	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381173	20 86 12	jsr $381286	                JSR TIMER0_INTERRUPT
.381176					SERVICE_NEXT_IRQ3
.381176	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.38117a	29 08		and #$08	                AND #FNX0_INT03_TMR1
.38117c	c9 08		cmp #$08	                CMP #FNX0_INT03_TMR1
.38117e	d0 07		bne $381187	                BNE SERVICE_NEXT_IRQ4
.381180	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381184	20 97 12	jsr $381297	                JSR TIMER1_INTERRUPT
.381187					SERVICE_NEXT_IRQ4
.381187	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.38118b	29 10		and #$10	                AND #FNX0_INT04_TMR2
.38118d	c9 10		cmp #$10	                CMP #FNX0_INT04_TMR2
.38118f	d0 09		bne $38119a	                BNE SERVICE_NEXT_IRQ6
.381191	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381195	20 a8 12	jsr $3812a8	                JSR TIMER2_INTERRUPT
.381198	e2 20		sep #$20	                SEP #$20        ; set A short
.38119a					SERVICE_NEXT_IRQ6
.38119a	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.38119e	29 40		and #$40	                AND #FNX0_INT06_FDC
.3811a0	c9 40		cmp #$40	                CMP #FNX0_INT06_FDC
.3811a2	d0 09		bne $3811ad	                BNE SERVICE_NEXT_IRQ7
.3811a4	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.3811a8	20 fa 12	jsr $3812fa	                JSR FDC_INTERRUPT
.3811ab	e2 20		sep #$20	                SEP #$20        ; set A short
.3811ad					SERVICE_NEXT_IRQ7
.3811ad	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.3811b1	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.3811b3	c9 80		cmp #$80	                CMP #FNX0_INT07_MOUSE
.3811b5	d0 07		bne $3811be	                BNE CHECK_PENDING_REG1
.3811b7	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.3811bb	20 b9 12	jsr $3812b9	                JSR MOUSE_INTERRUPT
.3811be					CHECK_PENDING_REG1
.3811be	e2 20		sep #$20	                SEP #$20        ; set A short
.3811c0	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3811c4	c9 00		cmp #$00	                CMP #$00
.3811c6	f0 5d		beq $381225	                BEQ EXIT_IRQ_HANDLE
.3811c8					SERVICE_NEXT_IRQ8
.3811c8	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3811cc	29 01		and #$01	                AND #FNX1_INT00_KBD
.3811ce	c9 01		cmp #$01	                CMP #FNX1_INT00_KBD
.3811d0	d0 09		bne $3811db	                BNE SERVICE_NEXT_IRQ11
.3811d2	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811d6	20 32 13	jsr $381332	                JSR KEYBOARD_INTERRUPT
.3811d9	e2 20		sep #$20	                SEP #$20        ; set A short
.3811db					SERVICE_NEXT_IRQ11
.3811db	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3811df	29 08		and #$08	                AND #FNX1_INT03_COM2
.3811e1	c9 08		cmp #$08	                CMP #FNX1_INT03_COM2
.3811e3	d0 09		bne $3811ee	                BNE SERVICE_NEXT_IRQ12
.3811e5	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811e9	20 05 13	jsr $381305	                JSR COM2_INTERRUPT
.3811ec	e2 20		sep #$20	                SEP #$20        ; set A short
.3811ee					SERVICE_NEXT_IRQ12
.3811ee	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3811f2	29 10		and #$10	                AND #FNX1_INT04_COM1
.3811f4	c9 10		cmp #$10	                CMP #FNX1_INT04_COM1
.3811f6	d0 09		bne $381201	                BNE SERVICE_NEXT_IRQ13
.3811f8	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811fc	20 10 13	jsr $381310	                JSR COM1_INTERRUPT
.3811ff	e2 20		sep #$20	                SEP #$20        ; set A short
.381201					SERVICE_NEXT_IRQ13
.381201	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381205	29 20		and #$20	                AND #FNX1_INT05_MPU401
.381207	c9 20		cmp #$20	                CMP #FNX1_INT05_MPU401
.381209	d0 09		bne $381214	                BNE SERVICE_NEXT_IRQ14
.38120b	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.38120f	20 1b 13	jsr $38131b	                JSR MPU401_INTERRUPT
.381212	e2 20		sep #$20	                SEP #$20        ; set A short
.381214					SERVICE_NEXT_IRQ14
.381214	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381218	29 40		and #$40	                AND #FNX1_INT06_LPT
.38121a	c9 40		cmp #$40	                CMP #FNX1_INT06_LPT
.38121c	d0 07		bne $381225	                BNE EXIT_IRQ_HANDLE
.38121e	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.381222	20 26 13	jsr $381326	                JSR LPT1_INTERRUPT
.381225					EXIT_IRQ_HANDLE
.381225	c2 30		rep #$30	                REP #$30        ; set A&X long
.381227	6b		rtl		                RTL
.381228					SOF_INTERRUPT
.381228	08		php		                PHP
.381229	e2 20		sep #$20	                SEP #$20        ; set A short
.38122b	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.38122f	29 01		and #$01	                AND #FNX0_INT00_SOF
.381231	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381235	e2 20		sep #$20	                SEP #$20        ; set A short
.381237	af 4e a0 38	lda $38a04e	                LDA @l FDC_MOTOR_TIMER          ; Check the FDC motor count-down timer
.38123b	d0 06		bne $381243	                BNE dec_motor                   ; If not zero: decrement the timer
.38123d	af 4f a0 38	lda $38a04f	                LDA @l FDC_MOTOR_TIMER+1        ; Check the high byte
.381241	f0 28		beq $38126b	                BEQ sof_timeout                 ; If zero: move on to the next timer
.381243	af 4e a0 38	lda $38a04e	dec_motor       LDA @l FDC_MOTOR_TIMER          ; Decrement the low byte
.381247	3a		dec a		                DEC A
.381248	8f 4e a0 38	sta $38a04e	                STA @l FDC_MOTOR_TIMER
.38124c	c9 ff		cmp #$ff	                CMP #$FF                        ; Did it roll over?
.38124e	d0 0b		bne $38125b	                BNE chk_motor_end               ; No: check to see if we're a the end
.381250	af 4f a0 38	lda $38a04f	                LDA @l FDC_MOTOR_TIMER+1        ; Decrement the high byte
.381254	3a		dec a		                DEC A
.381255	8f 4f a0 38	sta $38a04f	                STA @l FDC_MOTOR_TIMER+1
.381259	80 10		bra $38126b	                BRA sof_timeout                 ; And move on to the next timer
.38125b	af 4e a0 38	lda $38a04e	chk_motor_end   LDA @l FDC_MOTOR_TIMER          ; Check timer
.38125f	d0 0a		bne $38126b	                BNE sof_timeout                 ; if it's <>0, move on to the next timer
.381261	af 4f a0 38	lda $38a04f	                LDA @l FDC_MOTOR_TIMER+1
.381265	d0 04		bne $38126b	                BNE sof_timeout
.381267	22 b8 62 39	jsl $3962b8	                JSL FDC_Motor_Off               ; Otherwise, turn off the motor
.38126b					sof_timeout
.38126b	e2 20		sep #$20	                SEP #$20        ; set A short
.38126d	af 2d 03 00	lda $00032d	                LDA @l BIOS_TIMER               ; Check the BIOS_TIMER
.381271	f0 11		beq $381284	                BEQ sof_int_done                ; If it's 0, we don't do anything
.381273	3a		dec a		                DEC A                           ; Count down one tick
.381274	8f 2d 03 00	sta $00032d	                STA @l BIOS_TIMER
.381278	d0 0a		bne $381284	                BNE sof_int_done                ; If not 0, we're done
.38127a	af 2c 03 00	lda $00032c	                LDA @l BIOS_FLAGS               ; Otherwise: flag a time out event
.38127e	09 80		ora #$80	                ORA #BIOS_TIMEOUT
.381280	8f 2c 03 00	sta $00032c	                STA @l BIOS_FLAGS
.381284	28		plp		sof_int_done    PLP
.381285	60		rts		                RTS
.381286					TIMER0_INTERRUPT
.381286	e2 20		sep #$20	                SEP #$20        ; set A short
.381288	af 05 07 00	lda $000705	                LDA @l TIMERFLAGS               ; Flag that the interrupt has happened
.38128c	09 80		ora #$80	                ORA #TIMER0TRIGGER
.38128e	8f 05 07 00	sta $000705	                STA @l TIMERFLAGS
.381292	22 3c 11 38	jsl $38113c	                JSL TIMER0INTSUB
.381296	60		rts		                RTS
.381297					TIMER1_INTERRUPT
.381297	e2 20		sep #$20	                SEP #$20        ; set A short
.381299	af 05 07 00	lda $000705	                LDA @l TIMERFLAGS               ; Flag that the interrupt has happened
.38129d	09 40		ora #$40	                ORA #TIMER1TRIGGER
.38129f	8f 05 07 00	sta $000705	                STA @l TIMERFLAGS
.3812a3	22 40 11 38	jsl $381140	                JSL TIMER1INTSUB
.3812a7	60		rts		                RTS
.3812a8					TIMER2_INTERRUPT
.3812a8	e2 20		sep #$20	                SEP #$20        ; set A short
.3812aa	af 05 07 00	lda $000705	                LDA @l TIMERFLAGS               ; Flag that the interrupt has happened
.3812ae	09 20		ora #$20	                ORA #TIMER2TRIGGER
.3812b0	8f 05 07 00	sta $000705	                STA @l TIMERFLAGS
.3812b4	22 44 11 38	jsl $381144	                JSL TIMER2INTSUB
.3812b8	60		rts		                RTS
.3812b9					MOUSE_INTERRUPT
.3812b9	e2 20		sep #$20	                SEP #$20        ; set A short
.3812bb	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.3812bf	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.3812c1	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.3812c5	af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF
.3812c9	a2 00 00	ldx #$0000	                LDX #$0000
.3812cc	e2 10		sep #$10	                SEP #$10        ; set X short
.3812ce	a6 e0		ldx $e0		                LDX MOUSE_PTR
.3812d0	9f 06 07 af	sta $af0706,x	                STA @lMOUSE_PTR_BYTE0, X
.3812d4	e8		inx		                INX
.3812d5	e0 03		cpx #$03	                CPX #$03
.3812d7	d0 1c		bne $3812f5	                BNE EXIT_FOR_NEXT_VALUE
.3812d9	af 02 07 af	lda $af0702	                LDA @lMOUSE_PTR_X_POS_L
.3812dd	85 e1		sta $e1		                STA MOUSE_POS_X_LO
.3812df	af 03 07 af	lda $af0703	                LDA @lMOUSE_PTR_X_POS_H
.3812e3	85 e2		sta $e2		                STA MOUSE_POS_X_HI
.3812e5	af 04 07 af	lda $af0704	                LDA @lMOUSE_PTR_Y_POS_L
.3812e9	85 e3		sta $e3		                STA MOUSE_POS_Y_LO
.3812eb	af 05 07 af	lda $af0705	                LDA @lMOUSE_PTR_Y_POS_H
.3812ef	85 e4		sta $e4		                STA MOUSE_POS_Y_HI
.3812f1	e2 20		sep #$20	                SEP #$20        ; set A short
.3812f3	a2 00		ldx #$00	                LDX #$00
.3812f5					EXIT_FOR_NEXT_VALUE
.3812f5	86 e0		stx $e0		                STX MOUSE_PTR
.3812f7	c2 10		rep #$10	                REP #$10        ; set X long
.3812f9	60		rts		                RTS
.3812fa					FDC_INTERRUPT
.3812fa	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.3812fe	29 40		and #$40	                AND #FNX0_INT06_FDC
.381300	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381304	60		rts		                RTS
.381305					COM2_INTERRUPT
.381305	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381309	29 08		and #$08	                AND #FNX1_INT03_COM2
.38130b	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.38130f	60		rts		                RTS
.381310					COM1_INTERRUPT
.381310	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381314	29 10		and #$10	                AND #FNX1_INT04_COM1
.381316	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.38131a	60		rts		                RTS
.38131b					MPU401_INTERRUPT
.38131b	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.38131f	29 20		and #$20	                AND #FNX1_INT05_MPU401
.381321	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.381325	60		rts		                RTS
.381326					LPT1_INTERRUPT
.381326	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.38132a	29 40		and #$40	                AND #FNX1_INT06_LPT
.38132c	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.381330	60		rts		                RTS
.381331					NMI_HANDLER
.381331	6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\keyboard.asm

.381332					KEYBOARD_INTERRUPT
.381332	48		pha		                PHA             ; begin setdp macro
.381333	08		php		                PHP
.381334	c2 20		rep #$20	                REP #$20        ; set A long
.381336	a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.381339	5b		tcd		                TCD
.38133a	28		plp		                PLP
.38133b	68		pla		                PLA             ; end setdp macro
.38133c	a2 00 00	ldx #$0000	                ldx #$0000
.38133f	e2 10		sep #$10	                SEP #$10        ; set X short
.381341	e2 20		sep #$20	                SEP #$20        ; set A short
.381343	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381347	29 01		and #$01	                AND #FNX1_INT00_KBD
.381349	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.38134d					IRQ_HANDLER_FETCH
.38134d	af 60 10 af	lda $af1060	                LDA @lKBD_INPT_BUF      ; Get Scan Code from KeyBoard
.381351	85 88		sta $0f88	                STA KEYBOARD_SC_TMP     ; Save Code Immediately
.381353	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the Prefix was picked up before
.381355	29 80		and #$80	                AND #$80
.381357	c9 80		cmp #$80	                CMP #$80
.381359	d0 10		bne $38136b	                BNE CHK_LSHIFT          ; No: do normal scan-code checks
.38135b	a5 87		lda $0f87	PREFIX_ON       LDA KEYBOARD_SC_FLG     ; Otherwise: clear prefix
.38135d	29 7f		and #$7f	                AND #$7F
.38135f	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.381361	a5 88		lda $0f88	                LDA KEYBOARD_SC_TMP     ; Get the prefixed scan-code's character
.381363	aa		tax		                TAX
.381364	bf 80 75 39	lda $397580,x	                LDA @lScanCode_Prefix_Set1, x
.381368	4c 0e 14	jmp $38140e	                JMP KB_WR_2_SCREEN      ; And save it
.38136b	a5 88		lda $0f88	CHK_LSHIFT      LDA KEYBOARD_SC_TMP
.38136d	c9 2a		cmp #$2a	                CMP #$2A                ; Left Shift Pressed
.38136f	d0 03		bne $381374	                BNE NOT_KB_SET_LSHIFT
.381371	82 ad 00	brl $381421	                BRL KB_SET_SHIFT
.381374					NOT_KB_SET_LSHIFT
.381374	c9 aa		cmp #$aa	                CMP #$AA                ; Left Shift Unpressed
.381376	d0 03		bne $38137b	                BNE NOT_KB_CLR_LSHIFT
.381378	82 af 00	brl $38142a	                BRL KB_CLR_SHIFT
.38137b					NOT_KB_CLR_LSHIFT
.38137b	c9 36		cmp #$36	                CMP #$36                ; Right Shift Pressed
.38137d	d0 03		bne $381382	                BNE NOT_KB_SET_RSHIFT
.38137f	82 9f 00	brl $381421	                BRL KB_SET_SHIFT
.381382					NOT_KB_SET_RSHIFT
.381382	c9 b6		cmp #$b6	                CMP #$B6                ; Right Shift Unpressed
.381384	d0 03		bne $381389	                BNE NOT_KB_CLR_RSHIFT
.381386	82 a1 00	brl $38142a	                BRL KB_CLR_SHIFT
.381389					NOT_KB_CLR_RSHIFT
.381389	c9 1d		cmp #$1d	                CMP #$1D                ; Left CTRL pressed
.38138b	d0 03		bne $381390	                BNE NOT_KB_SET_CTRL
.38138d	82 a3 00	brl $381433	                BRL KB_SET_CTRL
.381390					NOT_KB_SET_CTRL
.381390	c9 9d		cmp #$9d	                CMP #$9D                ; Left CTRL Unpressed
.381392	d0 03		bne $381397	                BNE NOT_KB_CLR_CTRL
.381394	82 a5 00	brl $38143c	                BRL KB_CLR_CTRL
.381397					NOT_KB_CLR_CTRL
.381397	c9 38		cmp #$38	                CMP #$38                ; Left ALT Pressed
.381399	d0 03		bne $38139e	                BNE NOT_KB_SET_ALT
.38139b	82 a7 00	brl $381445	                BRL KB_SET_ALT
.38139e					NOT_KB_SET_ALT
.38139e	c9 b8		cmp #$b8	                CMP #$B8                ; Left ALT Unpressed
.3813a0	d0 03		bne $3813a5	                BNE NOT_KB_CLR_ALT
.3813a2	82 a9 00	brl $38144e	                BRL KB_CLR_ALT
.3813a5	c9 e0		cmp #$e0	NOT_KB_CLR_ALT  CMP #$E0                ; Prefixed scan code
.3813a7	d0 03		bne $3813ac	                BNE NOT_PREFIXED
.3813a9	82 ab 00	brl $381457	                BRL KB_SET_PREFIX
.3813ac	c9 45		cmp #$45	NOT_PREFIXED    CMP #$45                ; Numlock Pressed
.3813ae	d0 03		bne $3813b3	                BNE NOT_KB_SET_NUM
.3813b0	82 b6 00	brl $381469	                BRL KB_TOG_NUMLOCK
.3813b3	c9 46		cmp #$46	NOT_KB_SET_NUM  CMP #$46                ; Scroll Lock Pressed
.3813b5	d0 03		bne $3813ba	                BNE NOT_KB_SET_SCR
.3813b7	82 a6 00	brl $381460	                BRL KB_TOG_SCRLOCK
.3813ba	c9 3a		cmp #$3a	NOT_KB_SET_SCR  CMP #$3A                ; Caps Lock Pressed
.3813bc	d0 03		bne $3813c1	                BNE NOT_KB_CAPSLOCK
.3813be	82 bc 00	brl $38147d	                BRL KB_TOG_CAPLOCK
.3813c1	c9 58		cmp #$58	NOT_KB_CAPSLOCK CMP #$58                ; F12 Pressed
.3813c3	d0 09		bne $3813ce	                BNE KB_UNPRESSED
.3813c5	a9 60		lda #$60	                LDA #KB_CREDITS         ; Yes: flag that the CREDITS key has been pressed
.3813c7	8f 8a 0f 00	sta $000f8a	                STA @lKEYFLAG
.3813cb	82 b5 00	brl $381483	                BRL KB_CHECK_B_DONE
.3813ce	29 80		and #$80	KB_UNPRESSED    AND #$80                ; See if the Scan Code is press or Depressed
.3813d0	c9 80		cmp #$80	                CMP #$80                ; Depress Status - We will not do anything at this point
.3813d2	d0 03		bne $3813d7	                BNE KB_NORM_SC
.3813d4	82 ac 00	brl $381483	                BRL KB_CHECK_B_DONE
.3813d7	a5 88		lda $0f88	KB_NORM_SC      LDA KEYBOARD_SC_TMP       ;
.3813d9	aa		tax		                TAX
.3813da	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the SHIFT Key is being Pushed
.3813dc	29 10		and #$10	                AND #$10
.3813de	c9 10		cmp #$10	                CMP #$10
.3813e0	f0 17		beq $3813f9	                BEQ SHIFT_KEY_ON
.3813e2	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the CTRL Key is being Pushed
.3813e4	29 20		and #$20	                AND #$20
.3813e6	c9 20		cmp #$20	                CMP #$20
.3813e8	f0 16		beq $381400	                BEQ CTRL_KEY_ON
.3813ea	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the ALT Key is being Pushed
.3813ec	29 40		and #$40	                AND #$40
.3813ee	c9 40		cmp #$40	                CMP #$40
.3813f0	f0 15		beq $381407	                BEQ ALT_KEY_ON
.3813f2	bf 00 73 39	lda $397300,x	                LDA @lScanCode_Press_Set1, x
.3813f6	82 15 00	brl $38140e	                BRL KB_WR_2_SCREEN
.3813f9	bf 80 73 39	lda $397380,x	SHIFT_KEY_ON    LDA @lScanCode_Shift_Set1, x
.3813fd	82 0e 00	brl $38140e	                BRL KB_WR_2_SCREEN
.381400	bf 00 74 39	lda $397400,x	CTRL_KEY_ON     LDA @lScanCode_Ctrl_Set1, x
.381404	82 07 00	brl $38140e	                BRL KB_WR_2_SCREEN
.381407	bf 80 74 39	lda $397480,x	ALT_KEY_ON      LDA @lScanCode_Alt_Set1, x
.38140b	82 00 00	brl $38140e	                BRL KB_WR_2_SCREEN
.38140e	c9 18		cmp #$18	KB_WR_2_SCREEN  CMP #$18                ; Is it SysRq?
.381410	d0 03		bne $381415	                BNE savechar
.381412	4c 93 14	jmp $381493	                JMP programmerKey       ; Yes: trigger the programmer key
.381415	48		pha		savechar        PHA
.381416	c2 10		rep #$10	                REP #$10        ; set X long
.381418	20 9f 14	jsr $38149f	                JSR SAVEKEY
.38141b	e2 20		sep #$20	                SEP #$20        ; set A short
.38141d	68		pla		                PLA
.38141e	4c 83 14	jmp $381483	                JMP KB_CHECK_B_DONE
.381421	a5 87		lda $0f87	KB_SET_SHIFT    LDA KEYBOARD_SC_FLG
.381423	09 10		ora #$10	                ORA #$10
.381425	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.381427	4c 83 14	jmp $381483	                JMP KB_CHECK_B_DONE
.38142a	a5 87		lda $0f87	KB_CLR_SHIFT    LDA KEYBOARD_SC_FLG
.38142c	29 ef		and #$ef	                AND #$EF
.38142e	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.381430	4c 83 14	jmp $381483	                JMP KB_CHECK_B_DONE
.381433	a5 87		lda $0f87	KB_SET_CTRL     LDA KEYBOARD_SC_FLG
.381435	09 20		ora #$20	                ORA #$20
.381437	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.381439	4c 83 14	jmp $381483	                JMP KB_CHECK_B_DONE
.38143c	a5 87		lda $0f87	KB_CLR_CTRL     LDA KEYBOARD_SC_FLG
.38143e	29 df		and #$df	                AND #$DF
.381440	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.381442	4c 83 14	jmp $381483	                JMP KB_CHECK_B_DONE
.381445	a5 87		lda $0f87	KB_SET_ALT      LDA KEYBOARD_SC_FLG
.381447	09 40		ora #$40	                ORA #$40
.381449	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.38144b	4c 83 14	jmp $381483	                JMP KB_CHECK_B_DONE
.38144e	a5 87		lda $0f87	KB_CLR_ALT      LDA KEYBOARD_SC_FLG
.381450	29 bf		and #$bf	                AND #$BF
.381452	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.381454	4c 83 14	jmp $381483	                JMP KB_CHECK_B_DONE
.381457	a5 87		lda $0f87	KB_SET_PREFIX   LDA KEYBOARD_SC_FLG
.381459	09 80		ora #$80	                ORA #$80
.38145b	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.38145d	4c 83 14	jmp $381483	                JMP KB_CHECK_B_DONE
.381460	a5 89		lda $0f89	KB_TOG_SCRLOCK  LDA KEYBOARD_LOCKS
.381462	49 01		eor #$01	                EOR #KB_SCROLL_LOCK         ; toggle the Scroll Lock flag
.381464	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.381466	4c 83 14	jmp $381483	                JMP KB_CHECK_B_DONE
.381469	a5 87		lda $0f87	KB_TOG_NUMLOCK  LDA KEYBOARD_SC_FLG         ; Check flags...
.38146b	29 60		and #$60	                AND #$60                    ; ... is control-alt pressed?
.38146d	c9 60		cmp #$60	                CMP #$60
.38146f	d0 03		bne $381474	                BNE KB_TOG_NUMLOC2
.381471	82 63 ff	brl $3813d7	                BRL KB_NORM_SC              ; No: treat as a BREAK key
.381474	a5 89		lda $0f89	KB_TOG_NUMLOC2  LDA KEYBOARD_LOCKS
.381476	49 02		eor #$02	                EOR #KB_NUM_LOCK            ; toggle the Num Lock flag
.381478	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.38147a	4c 83 14	jmp $381483	                JMP KB_CHECK_B_DONE
.38147d	a5 89		lda $0f89	KB_TOG_CAPLOCK  LDA KEYBOARD_LOCKS
.38147f	49 04		eor #$04	                EOR #KB_CAPS_LOCK           ; toggle the Caps Lock flag
.381481	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.381483					KB_CHECK_B_DONE
.381483	af 64 10 af	lda $af1064	                LDA STATUS_PORT
.381487	29 01		and #$01	                AND #OUT_BUF_FULL           ; Test bit $01 (if 1, Full)
.381489	c9 01		cmp #$01	                CMP #OUT_BUF_FULL           ; if Still Byte in the Buffer, fetch it out
.38148b	d0 03		bne $381490	                BNE SET_LED
.38148d	4c 4d 13	jmp $38134d	                JMP IRQ_HANDLER_FETCH
.381490					SET_LED
.381490					KB_DONE
.381490	c2 30		rep #$30	                REP #$30        ; set A&X long
.381492	60		rts		                RTS
.381493					programmerKey
.381493	c2 30		rep #$30	                REP #$30        ; set A&X long
.381495	68		pla		                PLA                     ; Get and throw-away the return address to the interrupt handler
.381496	2b		pld		                PLD                     ; Restore the registers that were present when the handler was invoked
.381497	ab		plb		                PLB
.381498	7a		ply		                PLY
.381499	fa		plx		                PLX
.38149a	68		pla		                PLA
.38149b	5c 08 10 38	jmp $381008	                JML BREAK               ; And go to the BRK handler directly to open the monitor
.38149f					SAVEKEY
.38149f	e2 20		sep #$20	                SEP #$20        ; set A short
.3814a1	48		pha		                PHA                     ; Save the character
.3814a2	a5 89		lda $0f89	                LDA KEYBOARD_LOCKS      ; Check the keyboard lock flags
.3814a4	29 04		and #$04	                AND #KB_CAPS_LOCK       ; Is CAPS lock on?
.3814a6	f0 0d		beq $3814b5	                BEQ no_caps             ; No... just use the character as-is
.3814a8	68		pla		                PLA                     ; Get the character back
.3814a9	c9 61		cmp #$61	                CMP #'a'                ; Is it < 'a'
.3814ab	90 09		bcc $3814b6	                BLT check_break         ; Yes: just use as-is
.3814ad	c9 7b		cmp #$7b	                CMP #'z'+1              ; Is it > 'z'
.3814af	b0 05		bcs $3814b6	                BGE check_break         ; Yes: just us as-is
.3814b1	29 df		and #$df	                AND #%11011111          ; Conver to upper case
.3814b3	80 01		bra $3814b6	                BRA check_break
.3814b5	68		pla		no_caps         PLA                     ; Restore the character
.3814b6	c9 00		cmp #$00	check_break     CMP #0
.3814b8	f0 18		beq $3814d2	                BEQ done
.3814ba	c9 03		cmp #$03	                CMP #CHAR_CTRL_C        ; Is it CTRL-C?
.3814bc	f0 15		beq $3814d3	                BEQ flag_break          ; Yes: flag a break
.3814be	a6 8d		ldx $0f8d	no_break        LDX KEY_BUFFER_WPOS     ; So the Receive Character is saved in the Buffer
.3814c0	e0 80 00	cpx #$0080	                CPX #KEY_BUFFER_SIZE    ; Make sure we haven't been overboard.
.3814c3	b0 0d		bcs $3814d2	                BCS done                ; Stop storing - An error should ensue here...
.3814c5	9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER,X
.3814c9	e8		inx		                INX
.3814ca	86 8d		stx $0f8d	                STX KEY_BUFFER_WPOS
.3814cc	a9 00		lda #$00	                LDA #$00
.3814ce	9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER, X       ; Store a EOL in the following location for good measure
.3814d2	60		rts		done            RTS
.3814d3					flag_break
.3814d3	e2 20		sep #$20	                SEP #$20        ; set A short
.3814d5	a9 80		lda #$80	                LDA #KB_CTRL_C          ; Flag that an interrupt key has been pressed
.3814d7	85 8a		sta $0f8a	                STA KEYFLAG             ; The interpreter should see this soon and throw a BREAK
.3814d9	60		rts		                RTS
.3814da					KBD_GETC
.3814da	da		phx		                PHX
.3814db	0b		phd		                PHD
.3814dc	08		php		                PHP
.3814dd	48		pha		                PHA             ; begin setdp macro
.3814de	08		php		                PHP
.3814df	c2 20		rep #$20	                REP #$20        ; set A long
.3814e1	a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.3814e4	5b		tcd		                TCD
.3814e5	28		plp		                PLP
.3814e6	68		pla		                PLA             ; end setdp macro
.3814e7	e2 20		sep #$20	                SEP #$20        ; set A short
.3814e9	c2 10		rep #$10	                REP #$10        ; set X long
.3814eb	58		cli		                CLI                     ; Make sure interrupts can happen
.3814ec	af 8a 0f 00	lda $000f8a	get_wait        LDA @lKEYFLAG           ; Check the keyboard control flag
.3814f0	29 60		and #$60	                AND #KB_CREDITS         ; Are the credits flagged?
.3814f2	c9 60		cmp #$60	                CMP #KB_CREDITS
.3814f4	d0 0a		bne $381500	                BNE check_buffer        ; No: check the key buffer
.3814f6	a9 00		lda #$00	                LDA #0                  ; Yes: clear the flags
.3814f8	8f 8a 0f 00	sta $000f8a	                STA @lKEYFLAG
.3814fc	22 8b 16 39	jsl $39168b	                JSL SHOW_CREDITS        ; Then show the credits screen and wait for a key press
.381500	a6 8b		ldx $0f8b	check_buffer    LDX KEY_BUFFER_RPOS     ; Is KEY_BUFFER_RPOS < KEY_BUFFER_WPOS
.381502	e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS
.381504	90 02		bcc $381508	                BCC read_buff           ; Yes: a key is present, read it
.381506	80 e4		bra $3814ec	                BRA get_wait            ; Otherwise, keep waiting
.381508	78		sei		read_buff       SEI                     ; Don't interrupt me!
.381509	b5 00		lda $0f00,x	                LDA KEY_BUFFER,X        ; Get the key
.38150b	e8		inx		                INX                     ; And move to the next key
.38150c	e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS     ; Did we just read the last key?
.38150e	f0 07		beq $381517	                BEQ reset_indexes       ; Yes: return to 0 position
.381510	86 8b		stx $0f8b	                STX KEY_BUFFER_RPOS     ; Otherwise: Update the read index
.381512	58		cli		                CLI
.381513	28		plp		done            PLP                     ; Restore status and interrupts
.381514	2b		pld		                PLD
.381515	fa		plx		                PLX
.381516	6b		rtl		                RTL
.381517	64 8b		stz $0f8b	reset_indexes   STZ KEY_BUFFER_RPOS     ; Reset read index to the beginning
.381519	64 8d		stz $0f8d	                STZ KEY_BUFFER_WPOS     ; Reset the write index to the beginning
.38151b	80 f6		bra $381513	                BRA done

;******  Return to file: src\kernel.asm

.390400					IBOOT
.390400	18		clc		                CLC               ; clear the carry flag
.390401	fb		xce		                XCE               ; move carry to emulation flag.
.390402	78		sei		                SEI               ; Disable interrupts
.390403	c2 30		rep #$30	                REP #$30        ; set A&X long
.390405	a9 ff fe	lda #$feff	                LDA #STACK_END    ; initialize stack pointer
.390408	1b		tcs		                TAS
.390409	a2 00 10	ldx #$1000	                LDX #<>BOOT       ; Copy the kernel jump table to bank 0
.39040c	a0 00 10	ldy #$1000	                LDY #<>BOOT       ; Ordinarily, this is done by GAVIN, but
.39040f	a9 00 01	lda #$0100	                LDA #$0100        ; this is ensures it can be reloaded in case of errors
.390412	54 00 38	mvn $38,$00	                MVN `BOOT,$00     ; Or during soft loading of the kernel from the debug port
.390415	48		pha		                PHA             ; begin setdp macro
.390416	08		php		                PHP
.390417	c2 20		rep #$20	                REP #$20        ; set A long
.390419	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39041c	5b		tcd		                TCD
.39041d	28		plp		                PLP
.39041e	68		pla		                PLA             ; end setdp macro
.39041f	e2 20		sep #$20	                SEP #$20        ; set A short
.390421	a2 00 00	ldx #$0000	                LDX #$0000
.390424	a9 00		lda #$00	                LDA #$00
.390426					CLEAR_MEM_LOOP
.390426	95 00		sta $00,x	                STA $0000, X
.390428	e8		inx		                INX
.390429	e0 00 01	cpx #$0100	                CPX #$0100
.39042c	d0 f8		bne $390426	                BNE CLEAR_MEM_LOOP
.39042e	ea		nop		                NOP
.39042f	a9 ff		lda #$ff	                LDA #$FF
.390431	8f 48 01 00	sta $000148	                STA @lINT_EDGE_REG0
.390435	8f 49 01 00	sta $000149	                STA @lINT_EDGE_REG1
.390439	8f 4a 01 00	sta $00014a	                STA @lINT_EDGE_REG2
.39043d	8f 4b 01 00	sta $00014b	                STA @lINT_EDGE_REG3
.390441	8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.390445	8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.390449	8f 4e 01 00	sta $00014e	                STA @lINT_MASK_REG2
.39044d	8f 4f 01 00	sta $00014f	                STA @lINT_MASK_REG3
.390451	22 48 12 39	jsl $391248	                JSL INITRTC               ; Initialize the RTC
.390455	c2 30		rep #$30	                REP #$30        ; set A&X long
.390457	a9 00 a0	lda #$a000	                LDA #<>SCREEN_PAGE0      ; store the initial screen buffer location
.39045a	85 0c		sta $0c		                STA SCREENBEGIN
.39045c	85 17		sta $17		                STA CURSORPOS
.39045e	a9 00 c0	lda #$c000	                LDA #<>CS_COLOR_MEM_PTR   ; Set the initial COLOR cursor position
.390461	85 1f		sta $1f		                STA COLORPOS
.390463	e2 20		sep #$20	                SEP #$20        ; set A short
.390465	a9 af		lda #$af	                LDA #`SCREEN_PAGE0
.390467	85 0e		sta $0e		                STA SCREENBEGIN+2
.390469	85 19		sta $19		                STA CURSORPOS+2
.39046b	a9 af		lda #$af	                LDA #`CS_COLOR_MEM_PTR    ; Set the initial COLOR cursor position
.39046d	85 21		sta $21		                STA COLORPOS+2
.39046f	e2 20		sep #$20	                SEP #$20        ; set A short
.390471	a9 00		lda #$00	                LDA #$00
.390473	8d 87 0f	sta $0f87	                STA KEYBOARD_SC_FLG     ; Clear the Keyboard Flag
.390476	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.390478	8f 00 f1 af	sta $aff100	                STA $AFF100
.39047c	a9 bf		lda #$bf	                LDA #$BF ; Channel Two - No Atteniation
.39047e	8f 00 f1 af	sta $aff100	                STA $AFF100
.390482	a9 df		lda #$df	                LDA #$DF ; Channel Two - No Atteniation
.390484	8f 00 f1 af	sta $aff100	                STA $AFF100
.390488	a9 ff		lda #$ff	                LDA #$FF ; Channel Two - No Atteniation
.39048a	8f 00 f1 af	sta $aff100	                STA $AFF100
.39048e	c2 30		rep #$30	                REP #$30        ; set A&X long
.390490	a2 48 00	ldx #$0048	                LDX #72
.390493	86 0f		stx $0f		                STX COLS_VISIBLE
.390495	a0 34 00	ldy #$0034	                LDY #52
.390498	84 13		sty $13		                STY LINES_VISIBLE
.39049a	a2 80 00	ldx #$0080	                LDX #128
.39049d	86 11		stx $11		                STX COLS_PER_LINE
.39049f	a0 40 00	ldy #$0040	                LDY #64
.3904a2	84 15		sty $15		                STY LINES_MAX
.3904a4	a9 ed 00	lda #$00ed	                LDA #$ED                  ; Set the default text color to light gray on dark gray
.3904a7	85 1e		sta $1e		                STA CURCOLOR
.3904a9	22 dc 10 38	jsl $3810dc	                JSL INITCODEC
.3904ad	22 b0 10 38	jsl $3810b0	                JSL INITSUPERIO
.3904b1	22 c4 10 38	jsl $3810c4	                JSL INITGAMMATABLE
.3904b5	22 c8 10 38	jsl $3810c8	                JSL INITALLLUT
.3904b9	22 ac 10 38	jsl $3810ac	                JSL INITCHLUT
.3904bd	22 b9 0f 39	jsl $390fb9	                JSL INITMOUSEPOINTER
.3904c1	22 bc 10 38	jsl $3810bc	                JSL INITCURSOR
.3904c5	22 cc 10 38	jsl $3810cc	                JSL INITVKYTXTMODE
.3904c9	22 a0 0f 39	jsl $390fa0	                JSL IINITFONTSET
.3904cd	22 42 0b 39	jsl $390b42	                JSL ICLRSCREEN  ; Clear Screen and Set a standard color in Color Memory
.3904d1	a9 01 00	lda #$0001	                LDA #CHAN_COM1    ; Initialize COM1
.3904d4	22 c0 5b 39	jsl $395bc0	                JSL UART_SELECT
.3904d8	22 2c 5c 39	jsl $395c2c	                JSL UART_INIT
.3904dc	a9 02 00	lda #$0002	                LDA #CHAN_COM2    ; Initialize COM2
.3904df	22 c0 5b 39	jsl $395bc0	                JSL UART_SELECT
.3904e3	22 2c 5c 39	jsl $395c2c	                JSL UART_INIT
.3904e7	a9 00 00	lda #$0000	                LDA #0
.3904ea	22 38 10 38	jsl $381038	                JSL SETIN
.3904ee	22 3c 10 38	jsl $38103c	                JSL SETOUT
.3904f2	c2 20		rep #$20	                REP #$20        ; set A long
.3904f4	a2 00 00	ldx #$0000	                LDX #0
.3904f7	a0 00 00	ldy #$0000	                LDY #0
.3904fa	22 1b 0a 39	jsl $390a1b	                JSL ILOCATE
.3904fe	c2 30		rep #$30	                REP #$30        ; set A&X long
.390500					greet
.390500	48		pha		                PHA             ; begin setdbr macro
.390501	08		php		                PHP
.390502	e2 20		sep #$20	                SEP #$20        ; set A short
.390504	a9 39		lda #$39	                LDA #`greet_msg
.390506	48		pha		                PHA
.390507	ab		plb		                PLB
.390508	28		plp		                PLP
.390509	68		pla		                PLA             ; end setdbr macro
.39050a	a2 af 6d	ldx #$6daf	                LDX #<>greet_msg
.39050d	22 7e 07 39	jsl $39077e	                JSL IPRINT       ; print the first line
.390511	22 8d 0b 39	jsl $390b8d	                JSL ICOLORFLAG  ; This is to set the Color Memory for the Logo
.390515	48		pha		                PHA             ; begin setdp macro
.390516	08		php		                PHP
.390517	c2 20		rep #$20	                REP #$20        ; set A long
.390519	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39051c	5b		tcd		                TCD
.39051d	28		plp		                PLP
.39051e	68		pla		                PLA             ; end setdp macro
.39051f	22 b4 10 38	jsl $3810b4	                JSL INITKEYBOARD ;
.390523	e2 20		sep #$20	                SEP #$20        ; set A short
.390525	c2 10		rep #$10	                REP #$10        ; set X long
.390527	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.390529	8f 00 f1 af	sta $aff100	                STA $AFF100
.39052d	a9 bf		lda #$bf	                LDA #$BF ; Channel Two - No Atteniation
.39052f	8f 00 f1 af	sta $aff100	                STA $AFF100
.390533	a9 df		lda #$df	                LDA #$DF ; Channel Two - No Atteniation
.390535	8f 00 f1 af	sta $aff100	                STA $AFF100
.390539	a9 ff		lda #$ff	                LDA #$FF ; Channel Two - No Atteniation
.39053b	8f 00 f1 af	sta $aff100	                STA $AFF100
.39053f	a9 83		lda #$83	                LDA #$83 ; Channel Zero - No Atteniation
.390541	8f 00 f1 af	sta $aff100	                STA $AFF100
.390545	a9 12		lda #$12	                LDA #$12 ; Channel Zero - No Atteniation
.390547	8f 00 f1 af	sta $aff100	                STA $AFF100
.39054b	a9 90		lda #$90	                LDA #$90 ; Channel One - No Atteniation
.39054d	8f 00 f1 af	sta $aff100	                STA $AFF100
.390551	a2 00 40	ldx #$4000	                LDX #16384      ; 400ms
.390554	22 19 16 39	jsl $391619	          		 	JSL ILOOP_MS
.390558	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.39055a	8f 00 f1 af	sta $aff100	                STA $AFF100
.39055e	58		cli		                CLI                   ; Make sure no Interrupt will come and fuck up Init before this point.
.39055f	e2 20		sep #$20	                SEP #$20        ; set A short
.390561	c2 10		rep #$10	                REP #$10        ; set X long
.390563	48		pha		                PHA             ; begin setdbr macro
.390564	08		php		                PHP
.390565	e2 20		sep #$20	                SEP #$20        ; set A short
.390567	a9 39		lda #$39	                LDA #`greet_msg
.390569	48		pha		                PHA
.39056a	ab		plb		                PLB
.39056b	28		plp		                PLP
.39056c	68		pla		                PLA             ; end setdbr macro
.39056d	a2 00 00	ldx #$0000	                LDX #0
.390570	bf 00 10 38	lda $381000,x	jmpcopy         LDA @l BOOT,X
.390574	9f 00 10 00	sta $001000,x	                STA @l $001000,X
.390578	e8		inx		                INX
.390579	e0 00 10	cpx #$1000	                CPX #$1000
.39057c	d0 f2		bne $390570	                BNE jmpcopy
.39057e	22 75 44 39	jsl $394475	retry_boot      JSL DOS_INIT          ; Initialize the "disc operating system"
.390582	22 2c 06 39	jsl $39062c	                JSL BOOT_MENU         ; Show the splash screen / boot menu and wait for key presses
.390586	c9 20		cmp #$20	                CMP #CHAR_SP          ; Did the user press SPACE?
.390588	f0 10		beq $39059a	                BEQ BOOT_DIP          ; Yes: boot via the DIP switches
.39058a	c9 0d		cmp #$0d	                CMP #CHAR_CR          ; Did the user press RETURN?
.39058c	f0 1e		beq $3905ac	                BEQ BOOTBASIC         ; Yes: go straight to BASIC
.39058e	c9 81		cmp #$81	                CMP #CHAR_F1          ; Did the user press F1?
.390590	f0 54		beq $3905e6	                BEQ BOOTFLOPPY        ; Yes: boot via the floppy
.390592	c9 82		cmp #$82	                CMP #CHAR_F2          ; Did the user press F2?
.390594	f0 1d		beq $3905b3	                BEQ BOOTSDC           ; Yes: boot via the SDC
.390596	c9 83		cmp #$83	                CMP #CHAR_F3          ; Did the user press F3?
.390598	f0 32		beq $3905cc	                BEQ BOOTIDE           ; Yes: boot via the IDE
.39059a	af 0e e8 af	lda $afe80e	BOOT_DIP        LDA @lDIP_BOOTMODE    ; {HD_INSTALLED, 5'b0_0000, BOOT_MODE[1], BOOT_MODE[0]}
.39059e	29 03		and #$03	                AND #%00000011        ; Look at the mode bits
.3905a0	c9 00		cmp #$00	                CMP #DIP_BOOT_IDE     ; DIP set for IDE?
.3905a2	f0 28		beq $3905cc	                BEQ BOOTIDE           ; Yes: Boot from the IDE
.3905a4	c9 01		cmp #$01	                CMP #DIP_BOOT_SDCARD  ; DIP set for SD card?
.3905a6	f0 0b		beq $3905b3	                BEQ BOOTSDC           ; Yes: try to boot from the SD card
.3905a8	c9 02		cmp #$02	                CMP #DIP_BOOT_FLOPPY  ; DIP set for floppy?
.3905aa	f0 3a		beq $3905e6	                BEQ BOOTFLOPPY        ; Yes: try to boot from the floppy
.3905ac	5c 00 00 3a	jmp $3a0000	BOOTBASIC       JML BASIC             ; Cold start of the BASIC interpreter (or its replacement)
.3905b0	ea		nop		CREDIT_LOCK     NOP
.3905b1	80 fd		bra $3905b0	                BRA CREDIT_LOCK
.3905b3					BOOTSDC
.3905b3	e2 20		sep #$20	                SEP #$20        ; set A short
.3905b5	a9 02		lda #$02	                LDA #BIOS_DEV_SD
.3905b7	8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3905bb	22 47 45 39	jsl $394547	                JSL DOS_MOUNT         ; Mount the SDC
.3905bf	90 06		bcc $3905c7	                BCC sdc_error         ; Print an error message if couldn't get anything
.3905c1	22 02 47 39	jsl $394702	                JSL DOS_TESTBOOT      ; Try to boot from the SDC's MBR
.3905c5	80 e5		bra $3905ac	                BRA BOOTBASIC         ; If we couldn't fall, into BASIC
.3905c7	a2 8c 71	ldx #$718c	sdc_error       LDX #<>sdc_err_boot   ; Print a message saying SD card booting is not implemented
.3905ca	80 39		bra $390605	                BRA PR_BOOT_ERROR
.3905cc					BOOTIDE
.3905cc	e2 20		sep #$20	                SEP #$20        ; set A short
.3905ce	a9 06		lda #$06	                LDA #BIOS_DEV_HD0
.3905d0	8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3905d4	22 47 45 39	jsl $394547	                JSL DOS_MOUNT         ; Mount the IDE drive
.3905d8	90 07		bcc $3905e1	                BCC hdc_error         ; Print an error message if couldn't get anything
.3905da	22 02 47 39	jsl $394702	                JSL DOS_TESTBOOT      ; Try to boot from the IDE's MBR
.3905de	82 cb ff	brl $3905ac	                BRL BOOTBASIC         ; If we couldn't fall, into BASIC
.3905e1	a2 a8 71	ldx #$71a8	hdc_error       LDX #<>ide_err_boot   ; Print a message saying SD card booting is not implemented
.3905e4	80 1f		bra $390605	                BRA PR_BOOT_ERROR
.3905e6	a2 f1 71	ldx #$71f1	BOOTFLOPPY      LDX #<>fdc_boot
.3905e9	22 7e 07 39	jsl $39077e	                JSL IPRINT
.3905ed	e2 20		sep #$20	                SEP #$20        ; set A short
.3905ef	a9 00		lda #$00	                LDA #BIOS_DEV_FDC
.3905f1	8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3905f5	22 9a 67 39	jsl $39679a	                JSL FDC_MOUNT         ; Mount the floppy drive
.3905f9	90 07		bcc $390602	                BCC fdc_error         ; Print an error message if couldn't get anything
.3905fb	22 02 47 39	jsl $394702	                JSL DOS_TESTBOOT      ; Try to boot from the FDC's MBR
.3905ff	82 aa ff	brl $3905ac	                BRL BOOTBASIC         ; If we couldn't, fall into BASIC
.390602	a2 cb 71	ldx #$71cb	fdc_error       LDX #<>fdc_err_boot   ; Print a message saying SD card booting is not implemented
.390605	22 7e 07 39	jsl $39077e	PR_BOOT_ERROR   JSL IPRINT            ; Print the error message in X
.390609	a2 67 71	ldx #$7167	                LDX #<>boot_retry     ; Print the boot retry prompt
.39060c	22 7e 07 39	jsl $39077e	                JSL IPRINT
.390610	22 21 07 39	jsl $390721	boot_wait_key   JSL IGETCHW           ; Wait for a keypress
.390614	c9 52		cmp #$52	                CMP #'R'              ; Was "R" pressed?
.390616	d0 03		bne $39061b	                BNE chk_r_lc
.390618	82 63 ff	brl $39057e	                BRL retry_boot        ; Yes: retry the boot sequence
.39061b	c9 72		cmp #$72	chk_r_lc        CMP #'r'
.39061d	d0 03		bne $390622	                BNE chk_b_lc
.39061f	82 5c ff	brl $39057e	                BRL retry_boot
.390622	c9 62		cmp #$62	chk_b_lc        CMP #'b'              ; Was "B" pressed?
.390624	f0 86		beq $3905ac	                BEQ BOOTBASIC         ; Yes: try going to BASIC
.390626	c9 42		cmp #$42	                CMP #'B'
.390628	f0 82		beq $3905ac	                BEQ BOOTBASIC
.39062a	80 e4		bra $390610	                BRA boot_wait_key     ; No: keep waiting
.39062c					BOOT_MENU
.39062c	8b		phb		                PHB
.39062d	08		php		                PHP
.39062e	e2 20		sep #$20	                SEP #$20        ; set A short
.390630	c2 10		rep #$10	                REP #$10        ; set X long
.390632	a9 39		lda #$39	                LDA #`bootmenu          ; Point DBR:X to the boot menu
.390634	48		pha		                PHA
.390635	ab		plb		                PLB
.390636	a2 6f 06	ldx #$066f	                LDX #<>bootmenu
.390639	22 1c 10 38	jsl $38101c	                JSL PUTS                ; Display the boot menu
.39063d	c2 10		rep #$10	                REP #$10        ; set X long
.39063f	a0 e8 03	ldy #$03e8	                LDY #1000               ; Number of cycles we'll wait... total wait time is about 30s (ish)
.390642	e2 20		sep #$20	                SEP #$20        ; set A short
.390644	a2 e8 03	ldx #$03e8	wait_key        LDX #1000
.390647	22 19 16 39	jsl $391619	                JSL ILOOP_MS            ; Wait ...
.39064b	88		dey		                DEY                     ; Count down the tenths of seconds
.39064c	f0 1c		beq $39066a	                BEQ timeout             ; If we've got to 0, we're done
.39064e	22 48 10 38	jsl $381048	                JSL GETCH               ; Try to get a character
.390652	c9 00		cmp #$00	                CMP #0                  ; Did we get anything
.390654	f0 ee		beq $390644	                BEQ wait_key            ; No: keep waiting until timeout
.390656	c9 81		cmp #$81	                CMP #CHAR_F1            ; Did the user press F1?
.390658	f0 12		beq $39066c	                BEQ return              ; Yes: return it
.39065a	c9 82		cmp #$82	                CMP #CHAR_F2            ; Did the user press F2?
.39065c	f0 0e		beq $39066c	                BEQ return              ; Yes: return it
.39065e	c9 83		cmp #$83	                CMP #CHAR_F3            ; Did the user press F3?
.390660	f0 0a		beq $39066c	                BEQ return              ; Yes: return it
.390662	c9 0d		cmp #$0d	                CMP #CHAR_CR            ; Did the user press CR?
.390664	f0 06		beq $39066c	                BEQ return              ; Yes: return it
.390666	c9 20		cmp #$20	                CMP #CHAR_SP            ; Did the user press SPACE?
.390668	d0 da		bne $390644	                BNE wait_key            ; No: keep waiting
.39066a	a9 00		lda #$00	timeout         LDA #0                  ; Return 0 for a timeout / SPACE
.39066c	28		plp		return          PLP
.39066d	ab		plb		                PLB
.39066e	6b		rtl		                RTL
>39066f	46 31 3d 46 44 43 2c 20		bootmenu        .null "F1=FDC, F2=SDC, F3=IDE, RETURN=BASIC, SPACE=DEFAULT", CHAR_CR
>390677	46 32 3d 53 44 43 2c 20 46 33 3d 49 44 45 2c 20
>390687	52 45 54 55 52 4e 3d 42 41 53 49 43 2c 20 53 50
>390697	41 43 45 3d 44 45 46 41 55 4c 54 0d 00
.3906a4					IBREAK
.3906a4	48		pha		                PHA             ; begin setdp macro
.3906a5	08		php		                PHP
.3906a6	c2 20		rep #$20	                REP #$20        ; set A long
.3906a8	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3906ab	5b		tcd		                TCD
.3906ac	28		plp		                PLP
.3906ad	68		pla		                PLA             ; end setdp macro
.3906ae	68		pla		                PLA             ; Pull .Y and stuff it in the CPUY variable
.3906af	8f 48 02 00	sta $000248	                STA CPUY
.3906b3	68		pla		                PLA             ; Pull .X and stuff it in the CPUY variable
.3906b4	8f 46 02 00	sta $000246	                STA CPUX
.3906b8	68		pla		                PLA             ; Pull .A and stuff it in the CPUY variable
.3906b9	8f 44 02 00	sta $000244	                STA CPUA
.3906bd	68		pla		                PLA
.3906be	8f 4c 02 00	sta $00024c	                STA CPUDP       ; Pull Direct page
.3906c2	e2 20		sep #$20	                SEP #$20        ; set A short
.3906c4	68		pla		                PLA             ; Pull Data Bank (8 bits)
.3906c5	8f 4e 02 00	sta $00024e	                STA CPUDBR
.3906c9	68		pla		                PLA             ; Pull Flags (8 bits)
.3906ca	8f 4f 02 00	sta $00024f	                STA CPUFLAGS
.3906ce	c2 20		rep #$20	                REP #$20        ; set A long
.3906d0	68		pla		                PLA             ; Pull Program Counter (16 bits)
.3906d1	8f 40 02 00	sta $000240	                STA CPUPC
.3906d5	e2 20		sep #$20	                SEP #$20        ; set A short
.3906d7	68		pla		                PLA             ; Pull Program Bank (8 bits)
.3906d8	8f 42 02 00	sta $000242	                STA CPUPBR
.3906dc	c2 20		rep #$20	                REP #$20        ; set A long
.3906de	3b		tsc		                TSA             ; Get the stack
.3906df	8f 4a 02 00	sta $00024a	                STA CPUSTACK    ; Store the stack at immediately before the interrupt was asserted
.3906e3	a9 ff fe	lda #$feff	                LDA #<>STACK_END   ; initialize stack pointer back to the bootup value
.3906e6	1b		tcs		                TAS
.3906e7	5c 04 00 3a	jmp $3a0004	                JML MONITOR
.3906eb					IREADY
.3906eb	48		pha		                PHA             ; begin setdbr macro
.3906ec	08		php		                PHP
.3906ed	e2 20		sep #$20	                SEP #$20        ; set A short
.3906ef	a9 39		lda #$39	                LDA #`ready_msg
.3906f1	48		pha		                PHA
.3906f2	ab		plb		                PLB
.3906f3	28		plp		                PLP
.3906f4	68		pla		                PLA             ; end setdbr macro
.3906f5	e2 20		sep #$20	                SEP #$20        ; set A short
.3906f7	a2 08 72	ldx #$7208	                LDX #<>ready_msg
.3906fa	22 7e 07 39	jsl $39077e	                JSL IPRINT
.3906fe					IREADYWAIT
.3906fe	22 18 07 39	jsl $390718	                JSL IGETCHE
.390702	80 fa		bra $3906fe	                BRA IREADYWAIT
.390704	db		stp		IKEYDOWN        STP             ; Keyboard key pressed
.390705	db		stp		IRETURN         STP
.390706	08		php		ISETIN          PHP
.390707	e2 20		sep #$20	                SEP #$20        ; set A short
.390709	8f 04 07 00	sta $000704	                STA @lCHAN_IN   ; Save the channel number
.39070d	28		plp		                PLP
.39070e	6b		rtl		                RTL
.39070f	08		php		ISETOUT         PHP
.390710	e2 20		sep #$20	                SEP #$20        ; set A short
.390712	8f 03 07 00	sta $000703	                STA @lCHAN_OUT  ; Save the channel number
.390716	28		plp		                PLP
.390717	6b		rtl		                RTL
.390718	22 21 07 39	jsl $390721	IGETCHE         JSL IGETCHW
.39071c	22 9e 07 39	jsl $39079e	                JSL IPUTC
.390720	6b		rtl		                RTL
.390721					IGETCHW
.390721	08		php		                PHP
.390722	e2 20		sep #$20	                SEP #$20        ; set A short
.390724	af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.390728	f0 17		beq $390741	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.39072a	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.39072c	f0 09		beq $390737	                BEQ getc_uart       ; Yes: handle reading from the UART
.39072e	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.390730	f0 05		beq $390737	                BEQ getc_uart       ; Yes: handle reading from the UART
.390732	a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.390734	28		plp		                PLP
.390735	38		sec		                SEC                 ; And return carry set
.390736	6b		rtl		                RTL
.390737	22 c0 5b 39	jsl $395bc0	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.39073b	22 74 5c 39	jsl $395c74	                JSL UART_GETC       ; Get the charater from the COM port
.39073f	80 04		bra $390745	                BRA done
.390741	22 da 14 38	jsl $3814da	getc_keyboard   JSL KBD_GETC        ; Get the character from the keyboard
.390745	28		plp		done            PLP
.390746	18		clc		                CLC                 ; Return carry clear for valid data
.390747	6b		rtl		                RTL
.390748					IGETCH
.390748	da		phx		                PHX
.390749	5a		phy		                PHY
.39074a	8b		phb		                PHB
.39074b	0b		phd		                PHD
.39074c	08		php		                PHP
.39074d	48		pha		                PHA             ; begin setdbr macro
.39074e	08		php		                PHP
.39074f	e2 20		sep #$20	                SEP #$20        ; set A short
.390751	a9 00		lda #$00	                LDA #0
.390753	48		pha		                PHA
.390754	ab		plb		                PLB
.390755	28		plp		                PLP
.390756	68		pla		                PLA             ; end setdbr macro
.390757	e2 20		sep #$20	                SEP #$20        ; set A short
.390759	ad 04 07	lda $0704	                LDA @w CHAN_IN          ; Check the channel
.39075c	c9 00		cmp #$00	                CMP #CHAN_CONSOLE       ; Is it the console
.39075e	f0 03		beq $390763	                BEQ getch_console       ; Yes: dispatch on the console
.390760	82 10 00	brl $390773	                BRL ret_nothing         ; Unhandled device: return 0
.390763					getch_console
.390763	c2 20		rep #$20	                REP #$20        ; set A long
.390765	ad 8b 0f	lda $0f8b	                LDA @w KEY_BUFFER_RPOS  ; Is KEY_BUFFER_RPOS < KEY_BUFFER_WPOS
.390768	cd 8d 0f	cmp $0f8d	                CMP @w KEY_BUFFER_WPOS
.39076b	b0 06		bcs $390773	                BCS ret_nothing         ; No: there's nothing ready yet... return 0
.39076d	22 4c 10 38	jsl $38104c	                JSL GETCHW              ; Otherwise: retrieve the character
.390771	80 05		bra $390778	                BRA done                ; And return it
.390773					ret_nothing
.390773	c2 20		rep #$20	                REP #$20        ; set A long
.390775	a9 00 00	lda #$0000	                LDA #0                  ; Return 0 for no key
.390778	28		plp		done            PLP
.390779	2b		pld		                PLD
.39077a	ab		plb		                PLB
.39077b	7a		ply		                PLY
.39077c	fa		plx		                PLX
.39077d	6b		rtl		                RTL
.39077e	22 87 07 39	jsl $390787	IPRINT          JSL IPUTS
.390782	22 17 09 39	jsl $390917	                JSL IPRINTCR
.390786	6b		rtl		                RTL
.390787	48		pha		IPUTS           PHA
.390788	08		php		                PHP
.390789	e2 20		sep #$20	                SEP #$20        ; set A short
.39078b	c2 10		rep #$10	                REP #$10        ; set X long
.39078d	bd 00 00	lda $0000,x	iputs1          LDA $0,b,x      ; read from the string
.390790	f0 08		beq $39079a	                BEQ iputs_done
.390792	22 9e 07 39	jsl $39079e	iputs2          JSL IPUTC
.390796	e8		inx		iputs3          INX
.390797	4c 8d 07	jmp $39078d	                JMP iputs1
.39079a	e8		inx		iputs_done      INX
.39079b	28		plp		                PLP
.39079c	68		pla		                PLA
.39079d	6b		rtl		                RTL
.39079e					IPUTC
.39079e	da		phx		                PHX
.39079f	5a		phy		                PHY
.3907a0	0b		phd		                PHD
.3907a1	8b		phb		                PHB
.3907a2	08		php		                PHP                 ; stash the flags (we'll be changing M)
.3907a3	48		pha		                PHA             ; begin setdp macro
.3907a4	08		php		                PHP
.3907a5	c2 20		rep #$20	                REP #$20        ; set A long
.3907a7	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3907aa	5b		tcd		                TCD
.3907ab	28		plp		                PLP
.3907ac	68		pla		                PLA             ; end setdp macro
.3907ad	48		pha		                PHA             ; begin setdbr macro
.3907ae	08		php		                PHP
.3907af	e2 20		sep #$20	                SEP #$20        ; set A short
.3907b1	a9 00		lda #$00	                LDA #0
.3907b3	48		pha		                PHA
.3907b4	ab		plb		                PLB
.3907b5	28		plp		                PLP
.3907b6	68		pla		                PLA             ; end setdbr macro
.3907b7	e2 20		sep #$20	                SEP #$20        ; set A short
.3907b9	c2 10		rep #$10	                REP #$10        ; set X long
.3907bb	48		pha		                PHA                 ; Save the character to print
.3907bc	af 03 07 00	lda $000703	                LDA @lCHAN_OUT      ; Check the output channel #
.3907c0	f0 16		beq $3907d8	                BEQ putc_screen     ; If it's 0: print to the screen
.3907c2	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.3907c4	f0 07		beq $3907cd	                BEQ putc_uart       ; Yes: handle printing to the UART
.3907c6	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.3907c8	f0 03		beq $3907cd	                BEQ putc_uart       ; Yes: handle printing to the UART
.3907ca	68		pla		                PLA                 ; Otherwise, just exit
.3907cb	80 57		bra $390824	                BRA done
.3907cd	22 c0 5b 39	jsl $395bc0	putc_uart       JSL UART_SELECT     ; Point to the correct UART
.3907d1	68		pla		                PLA                 ; Recover the character to send
.3907d2	22 95 5c 39	jsl $395c95	                JSL UART_PUTC       ; Send the character
.3907d6	80 4c		bra $390824	                BRA done
.3907d8	68		pla		putc_screen     PLA                 ; Get the character to print
.3907d9	c9 0a		cmp #$0a	                CMP #CHAR_LF        ; Linefeed moves cursor down one line
.3907db	f0 69		beq $390846	                BEQ go_down
.3907dd	c9 20		cmp #$20	                CMP #$20
.3907df	90 19		bcc $3907fa	                BCC check_ctrl0     ; [$00..$1F]: check for arrows
.3907e1	c9 7f		cmp #$7f	                CMP #$7F
.3907e3	f0 45		beq $39082a	                BEQ do_del
.3907e5	b0 02		bcs $3907e9	                BCS check_A0        ; [$20..$7E]: print it
.3907e7	80 31		bra $39081a	                BRA printc
.3907e9	c9 a0		cmp #$a0	check_A0        CMP #$A0
.3907eb	90 02		bcc $3907ef	                BCC check_ctrl1
.3907ed	80 2b		bra $39081a	                BRA printc          ; [$A0..$FF]: print it
.3907ef	c9 91		cmp #$91	check_ctrl1     CMP #CHAR_DOWN      ; If the down arrow key was pressed
.3907f1	f0 53		beq $390846	                BEQ go_down         ; ... move the cursor down one row
.3907f3	c9 9d		cmp #$9d	                CMP #CHAR_LEFT      ; If the left arrow key was pressed
.3907f5	f0 61		beq $390858	                BEQ go_left         ; ... move the cursor left one column
.3907f7	4c 24 08	jmp $390824	                JMP done
.3907fa	c9 09		cmp #$09	check_ctrl0     CMP #CHAR_TAB       ; If it's a TAB...
.3907fc	f0 69		beq $390867	                BEQ do_TAB          ; ... move to the next TAB stop
.3907fe	c9 08		cmp #$08	                CMP #CHAR_BS        ; If it's a backspace...
.390800	f0 34		beq $390836	                BEQ backspace       ; ... move the cursor back and replace with a space
.390802	c9 0d		cmp #$0d	                CMP #CHAR_CR        ; If the carriage return was pressed
.390804	f0 3a		beq $390840	                BEQ do_cr           ; ... move cursor down and to the first column
.390806	c9 11		cmp #$11	                CMP #CHAR_UP        ; If the up arrow key was pressed
.390808	f0 42		beq $39084c	                BEQ go_up           ; ... move the cursor up one row
.39080a	c9 1d		cmp #$1d	                CMP #CHAR_RIGHT     ; If the right arrow key was pressed
.39080c	f0 44		beq $390852	                BEQ go_right        ; ... move the cursor right one column
.39080e	c9 0f		cmp #$0f	                CMP #CHAR_INS       ; If the insert key was pressed
.390810	f0 1e		beq $390830	                BEQ do_ins          ; ... insert a space
.390812	c9 01		cmp #$01	                CMP #CHAR_CTRL_A    ; Check for CTRL-A (start of line)
.390814	f0 48		beq $39085e	                BEQ go_sol          ; ... move the cursor to the start of the line
.390816	c9 05		cmp #$05	                CMP #CHAR_CTRL_E    ; Check for CTRL-E (end of line)
.390818	f0 74		beq $39088e	                BEQ go_eol          ; ... move the cursor to the end of the line
.39081a	87 17		sta [$17]	printc          STA [CURSORPOS]     ; Save the character on the screen
.39081c	a5 1e		lda $1e		                LDA CURCOLOR        ; Set the color based on CURCOLOR
.39081e	87 1f		sta [$1f]	                STA [COLORPOS]
.390820	22 77 09 39	jsl $390977	                JSL ICSRRIGHT       ; And advance the cursor
.390824	28		plp		done            PLP
.390825	ab		plb		                PLB
.390826	2b		pld		                PLD
.390827	7a		ply		                PLY
.390828	fa		plx		                PLX
.390829	6b		rtl		                RTL
.39082a	22 bb 08 39	jsl $3908bb	do_del          JSL SCRSHIFTLL      ; Shift the current line left one space into the cursor
.39082e	80 f4		bra $390824	                BRA done
.390830	22 df 08 39	jsl $3908df	do_ins          JSL SCRSHIFTLR      ; Shift the current line right one space from the cursor
.390834	80 ee		bra $390824	                BRA done
.390836	22 aa 09 39	jsl $3909aa	backspace       JSL ICSRLEFT
.39083a	22 bb 08 39	jsl $3908bb	                JSL SCRSHIFTLL      ; Shift the current line left one space into the cursor
.39083e	80 e4		bra $390824	                BRA done
.390840	22 17 09 39	jsl $390917	do_cr           JSL IPRINTCR        ; Move the cursor to the beginning of the next line
.390844	80 de		bra $390824	                BRA done
.390846	22 f6 09 39	jsl $3909f6	go_down         JSL ICSRDOWN        ; Move the cursor down one row (might force a scroll)
.39084a	80 d8		bra $390824	                BRA done
.39084c	22 d0 09 39	jsl $3909d0	go_up           JSL ICSRUP          ; Move the cursor up one line
.390850	80 d2		bra $390824	                BRA done
.390852	22 77 09 39	jsl $390977	go_right        JSL ICSRRIGHT       ; Move the cursor right one column
.390856	80 cc		bra $390824	                BRA done
.390858	22 aa 09 39	jsl $3909aa	go_left         JSL ICSRLEFT        ; Move the cursor left one column
.39085c	80 c6		bra $390824	                BRA done
.39085e					go_sol
.39085e	c2 20		rep #$20	                REP #$20        ; set A long
.390860	a2 00 00	ldx #$0000	                LDX #0
.390863	a4 1c		ldy $1c		                LDY CURSORY
.390865	80 21		bra $390888	                BRA do_locate
.390867					do_TAB
.390867	c2 20		rep #$20	                REP #$20        ; set A long
.390869	a5 1a		lda $1a		                LDA CURSORX         ; Get the current column
.39086b	29 f8 ff	and #$fff8	                AND #$FFF8          ; See which group of 8 it's in
.39086e	18		clc		                CLC
.39086f	69 08 00	adc #$0008	                ADC #$0008          ; And move it to the next one
.390872	aa		tax		                TAX
.390873	a4 1c		ldy $1c		                LDY CURSORY
.390875	e2 20		sep #$20	                SEP #$20        ; set A short
.390877	e4 0f		cpx $0f		set_xy          CPX COLS_VISIBLE    ; Check if we're still on screen horizontally
.390879	90 04		bcc $39087f	                BCC check_row       ; Yes: check the row
.39087b	a2 00 00	ldx #$0000	                LDX #0              ; No: move to the first column...
.39087e	c8		iny		                INY                 ; ... and the next row
.39087f	c4 13		cpy $13		check_row       CPY LINES_VISIBLE   ; Check if we're still on the screen vertically
.390881	90 05		bcc $390888	                BCC do_locate       ; Yes: reposition the cursor
.390883	22 67 0a 39	jsl $390a67	                JSL ISCROLLUP       ; No: scroll the screen
.390887	88		dey		                DEY                 ; And set the row to the last one
.390888	22 1b 0a 39	jsl $390a1b	do_locate       JSL ILOCATE         ; Set the cursor position
.39088c	80 96		bra $390824	                BRA done
.39088e	a6 0f		ldx $0f		go_eol          LDX COLS_VISIBLE    ; Move the cursor to the right most column
.390890	ca		dex		                DEX
.390891	a4 1c		ldy $1c		                LDY CURSORY
.390893	22 1b 0a 39	jsl $390a1b	                JSL ILOCATE
.390897	e2 20		sep #$20	                SEP #$20        ; set A short
.390899	a7 17		lda [$17]	eol_loop        LDA [CURSORPOS]     ; Get the character under the cursor
.39089b	c9 20		cmp #$20	                CMP #CHAR_SP        ; Is it blank?
.39089d	d0 0b		bne $3908aa	                BNE eol_done        ; No: exit the loop
.39089f	22 aa 09 39	jsl $3909aa	                JSL ICSRLEFT        ; Yes: move to the left
.3908a3	a6 1a		ldx $1a		                LDX CURSORX         ; Are we at column 0?
.3908a5	d0 f2		bne $390899	                BNE eol_loop        ; No: try again
.3908a7	82 7a ff	brl $390824	                BRL done            ; Yes: we're done
.3908aa	a6 1a		ldx $1a		eol_done        LDX CURSORX         ; Check the column
.3908ac	e8		inx		                INX
.3908ad	e4 0f		cpx $0f		                CPX COLS_VISIBLE    ; Is it the right most?
.3908af	d0 03		bne $3908b4	                BNE eol_right
.3908b1	82 70 ff	brl $390824	                BRL done            ; Yes: we're done
.3908b4	22 77 09 39	jsl $390977	eol_right       JSL ICSRRIGHT       ; No: move right one column
.3908b8	82 69 ff	brl $390824	                BRL done
.3908bb	da		phx		SCRSHIFTLL      PHX
.3908bc	5a		phy		                PHY
.3908bd	48		pha		                PHA
.3908be	0b		phd		                PHD
.3908bf	08		php		                PHP
.3908c0	48		pha		                PHA             ; begin setdp macro
.3908c1	08		php		                PHP
.3908c2	c2 20		rep #$20	                REP #$20        ; set A long
.3908c4	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3908c7	5b		tcd		                TCD
.3908c8	28		plp		                PLP
.3908c9	68		pla		                PLA             ; end setdp macro
.3908ca	c2 30		rep #$30	                REP #$30        ; set A&X long
.3908cc	a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.3908ce	a8		tay		                TAY                 ; Set it as the destination
.3908cf	aa		tax		                TAX
.3908d0	e8		inx		                INX                 ; And set the next cell as the source
.3908d1	18		clc		                CLC                 ; Calculate the length of the block to move
.3908d2	a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.3908d4	e5 1a		sbc $1a		                SBC CURSORX
.3908d6	54 af af	mvn $af,$af	                MVN $AF, $AF        ; And move the block
.3908d9	28		plp		                PLP
.3908da	2b		pld		                PLD
.3908db	68		pla		                PLA
.3908dc	7a		ply		                PLY
.3908dd	fa		plx		                PLX
.3908de	6b		rtl		                RTL
.3908df	da		phx		SCRSHIFTLR      PHX
.3908e0	48		pha		                PHA
.3908e1	0b		phd		                PHD
.3908e2	08		php		                PHP
.3908e3	48		pha		                PHA             ; begin setdp macro
.3908e4	08		php		                PHP
.3908e5	c2 20		rep #$20	                REP #$20        ; set A long
.3908e7	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3908ea	5b		tcd		                TCD
.3908eb	28		plp		                PLP
.3908ec	68		pla		                PLA             ; end setdp macro
.3908ed	c2 30		rep #$30	                REP #$30        ; set A&X long
.3908ef	a5 1a		lda $1a		                LDA CURSORX         ; What column are we on
.3908f1	1a		inc a		                INC A
.3908f2	c5 0f		cmp $0f		                CMP COLS_VISIBLE    ; >= the # visible?
.3908f4	b0 1b		bcs $390911	                BGE done            ; Yes: just skip the whole thing
.3908f6	38		sec		                SEC                 ; Calculate the length of the block to move
.3908f7	a5 0f		lda $0f		                LDA COLS_VISIBLE
.3908f9	e5 1a		sbc $1a		                SBC CURSORX
.3908fb	1a		inc a		                INC A
.3908fc	18		clc		                CLC
.3908fd	65 17		adc $17		                ADC CURSORPOS       ; Add the current cursor position
.3908ff	3a		dec a		                DEC A
.390900	a8		tay		                TAY                 ; Make it the destination
.390901	3a		dec a		                DEC A               ; Move to the previous column
.390902	aa		tax		                TAX                 ; Make it the source
.390903	38		sec		                SEC                 ; Calculate the length of the block to move
.390904	a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.390906	e5 1a		sbc $1a		                SBC CURSORX
.390908	44 af af	mvp $af,$af	                MVP $AF, $AF        ; And move the block
.39090b	e2 20		sep #$20	                SEP #$20        ; set A short
.39090d	a9 20		lda #$20	                LDA #CHAR_SP        ; Put a blank space at the cursor position
.39090f	87 17		sta [$17]	                STA [CURSORPOS]
.390911	28		plp		done            PLP
.390912	2b		pld		                PLD
.390913	68		pla		                PLA
.390914	fa		plx		                PLX
.390915	6b		rtl		                RTL
.390916					IPUTB
.390916	6b		rtl		                RTL
.390917					IPRINTCR
.390917	da		phx		                PHX
.390918	5a		phy		                PHY
.390919	8b		phb		                PHB
.39091a	0b		phd		                PHD
.39091b	08		php		                PHP
.39091c	48		pha		                PHA             ; begin setdbr macro
.39091d	08		php		                PHP
.39091e	e2 20		sep #$20	                SEP #$20        ; set A short
.390920	a9 00		lda #$00	                LDA #0
.390922	48		pha		                PHA
.390923	ab		plb		                PLB
.390924	28		plp		                PLP
.390925	68		pla		                PLA             ; end setdbr macro
.390926	48		pha		                PHA             ; begin setdp macro
.390927	08		php		                PHP
.390928	c2 20		rep #$20	                REP #$20        ; set A long
.39092a	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39092d	5b		tcd		                TCD
.39092e	28		plp		                PLP
.39092f	68		pla		                PLA             ; end setdp macro
.390930	e2 20		sep #$20	                SEP #$20        ; set A short
.390932	c2 10		rep #$10	                REP #$10        ; set X long
.390934	af 03 07 00	lda $000703	                LDA @lCHAN_OUT
.390938	f0 1c		beq $390956	                BEQ scr_printcr
.39093a	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.39093c	f0 06		beq $390944	                BEQ uart_printcr    ; Yes: handle printing to the UART
.39093e	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.390940	f0 02		beq $390944	                BEQ uart_printcr    ; Yes: handle printing to the UART
.390942	80 1c		bra $390960	                BRA done
.390944	22 c0 5b 39	jsl $395bc0	uart_printcr    JSL UART_SELECT
.390948	a9 0d		lda #$0d	                LDA #CHAR_CR
.39094a	22 9e 07 39	jsl $39079e	                JSL IPUTC
.39094e	a9 0a		lda #$0a	                LDA #CHAR_LF
.390950	22 9e 07 39	jsl $39079e	                JSL IPUTC
.390954	80 0a		bra $390960	                BRA done
.390956	a2 00 00	ldx #$0000	scr_printcr     LDX #0
.390959	a4 1c		ldy $1c		                LDY CURSORY
.39095b	c8		iny		                INY
.39095c	22 1b 0a 39	jsl $390a1b	                JSL ILOCATE
.390960	28		plp		done            PLP
.390961	2b		pld		                PLD
.390962	ab		plb		                PLB
.390963	7a		ply		                PLY
.390964	fa		plx		                PLX
.390965	6b		rtl		                RTL
.390966	da		phx		ICSRHOME        PHX
.390967	5a		phy		                PHY
.390968	08		php		                PHP
.390969	a2 00 00	ldx #$0000	                LDX #0
.39096c	a0 00 00	ldy #$0000	                LDY #0
.39096f	22 1b 0a 39	jsl $390a1b	                JSL ILOCATE
.390973	28		plp		                PLP
.390974	7a		ply		                PLY
.390975	fa		plx		                PLX
.390976	6b		rtl		                RTL
.390977	da		phx		ICSRRIGHT       PHX
.390978	5a		phy		                PHY
.390979	48		pha		                PHA
.39097a	0b		phd		                PHD
.39097b	08		php		                PHP
.39097c	c2 20		rep #$20	                REP #$20        ; set A long
.39097e	c2 10		rep #$10	                REP #$10        ; set X long
.390980	48		pha		                PHA             ; begin setdp macro
.390981	08		php		                PHP
.390982	c2 20		rep #$20	                REP #$20        ; set A long
.390984	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.390987	5b		tcd		                TCD
.390988	28		plp		                PLP
.390989	68		pla		                PLA             ; end setdp macro
.39098a	a6 1a		ldx $1a		                LDX CURSORX           ; Get the new column
.39098c	e8		inx		                INX
.39098d	a4 1c		ldy $1c		                LDY CURSORY           ; Get the current row
.39098f	e4 0f		cpx $0f		                CPX COLS_VISIBLE      ; Are we off screen?
.390991	90 0d		bcc $3909a0	                BCC icsrright_nowrap  ; No: just set the position
.390993	a2 00 00	ldx #$0000	                LDX #0                ; Yes: move to the first column
.390996	c8		iny		                INY                   ; And move to the next row
.390997	c4 13		cpy $13		                CPY LINES_VISIBLE     ; Are we still off screen?
.390999	90 05		bcc $3909a0	                BCC icsrright_nowrap  ; No: just set the position
.39099b	88		dey		                DEY                   ; Yes: lock to the last row
.39099c	22 67 0a 39	jsl $390a67	                JSL ISCROLLUP         ; But scroll the screen up
.3909a0					icsrright_nowrap
.3909a0	22 1b 0a 39	jsl $390a1b	                JSL ILOCATE           ; Set the cursor position
.3909a4	28		plp		                PLP
.3909a5	2b		pld		                PLD
.3909a6	68		pla		                PLA
.3909a7	7a		ply		                PLY
.3909a8	fa		plx		                PLX
.3909a9	6b		rtl		                RTL
.3909aa					ICSRLEFT
.3909aa	da		phx		                PHX
.3909ab	5a		phy		                PHY
.3909ac	48		pha		                PHA
.3909ad	0b		phd		                PHD
.3909ae	08		php		                PHP
.3909af	c2 30		rep #$30	                REP #$30        ; set A&X long
.3909b1	48		pha		                PHA             ; begin setdp macro
.3909b2	08		php		                PHP
.3909b3	c2 20		rep #$20	                REP #$20        ; set A long
.3909b5	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.3909b8	5b		tcd		                TCD
.3909b9	28		plp		                PLP
.3909ba	68		pla		                PLA             ; end setdp macro
.3909bb	a5 1a		lda $1a		                LDA CURSORX
.3909bd	f0 0b		beq $3909ca	                BEQ icsrleft_done_already_zero ; Check that we are not already @ Zero
.3909bf	a6 1a		ldx $1a		                LDX CURSORX
.3909c1	ca		dex		                DEX
.3909c2	86 1a		stx $1a		                STX CURSORX
.3909c4	a4 1c		ldy $1c		                LDY CURSORY
.3909c6	22 1b 0a 39	jsl $390a1b	                JSL ILOCATE
.3909ca					icsrleft_done_already_zero
.3909ca	28		plp		                PLP
.3909cb	2b		pld		                PLD
.3909cc	68		pla		                PLA
.3909cd	7a		ply		                PLY
.3909ce	fa		plx		                PLX
.3909cf	6b		rtl		                RTL
.3909d0					ICSRUP
.3909d0	da		phx		                PHX
.3909d1	5a		phy		                PHY
.3909d2	48		pha		                PHA
.3909d3	0b		phd		                PHD
.3909d4	08		php		                PHP
.3909d5	c2 30		rep #$30	                REP #$30        ; set A&X long
.3909d7	48		pha		                PHA             ; begin setdp macro
.3909d8	08		php		                PHP
.3909d9	c2 20		rep #$20	                REP #$20        ; set A long
.3909db	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.3909de	5b		tcd		                TCD
.3909df	28		plp		                PLP
.3909e0	68		pla		                PLA             ; end setdp macro
.3909e1	a5 1c		lda $1c		                LDA CURSORY
.3909e3	f0 0b		beq $3909f0	                BEQ isrup_done_already_zero ; Check if we are not already @ Zero
.3909e5	a4 1c		ldy $1c		                LDY CURSORY
.3909e7	88		dey		                DEY
.3909e8	84 1c		sty $1c		                STY CURSORY
.3909ea	a6 1a		ldx $1a		                LDX CURSORX
.3909ec	22 1b 0a 39	jsl $390a1b	                JSL ILOCATE
.3909f0					isrup_done_already_zero
.3909f0	28		plp		                PLP
.3909f1	2b		pld		                PLD
.3909f2	68		pla		                PLA
.3909f3	7a		ply		                PLY
.3909f4	fa		plx		                PLX
.3909f5	6b		rtl		                RTL
.3909f6	da		phx		ICSRDOWN        PHX
.3909f7	5a		phy		                PHY
.3909f8	0b		phd		                PHD
.3909f9	c2 30		rep #$30	                REP #$30        ; set A&X long
.3909fb	48		pha		                PHA             ; begin setdp macro
.3909fc	08		php		                PHP
.3909fd	c2 20		rep #$20	                REP #$20        ; set A long
.3909ff	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.390a02	5b		tcd		                TCD
.390a03	28		plp		                PLP
.390a04	68		pla		                PLA             ; end setdp macro
.390a05	a6 1a		ldx $1a		                LDX CURSORX                 ; Get the current column
.390a07	a4 1c		ldy $1c		                LDY CURSORY                 ; Get the new row
.390a09	c8		iny		                INY
.390a0a	c4 13		cpy $13		                CPY LINES_VISIBLE           ; Check to see if we're off screen
.390a0c	90 05		bcc $390a13	                BCC icsrdown_noscroll       ; No: go ahead and set the position
.390a0e	88		dey		                DEY                         ; Yes: go back to the last row
.390a0f	22 67 0a 39	jsl $390a67	                JSL ISCROLLUP               ; But scroll the screen up
.390a13					icsrdown_noscroll
.390a13	22 1b 0a 39	jsl $390a1b	                JSL ILOCATE                 ; And set the cursor position
.390a17	2b		pld		                PLD
.390a18	7a		ply		                PLY
.390a19	fa		plx		                PLX
.390a1a	6b		rtl		                RTL
.390a1b	48		pha		ILOCATE         PHA
.390a1c	0b		phd		                PHD
.390a1d	08		php		                PHP
.390a1e	48		pha		                PHA             ; begin setdp macro
.390a1f	08		php		                PHP
.390a20	c2 20		rep #$20	                REP #$20        ; set A long
.390a22	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390a25	5b		tcd		                TCD
.390a26	28		plp		                PLP
.390a27	68		pla		                PLA             ; end setdp macro
.390a28	c2 30		rep #$30	                REP #$30        ; set A&X long
.390a2a					ilocate_scroll
.390a2a	c4 13		cpy $13		                CPY LINES_VISIBLE
.390a2c	90 07		bcc $390a35	                BCC ilocate_scrolldone
.390a2e	22 67 0a 39	jsl $390a67	                JSL ISCROLLUP
.390a32	88		dey		                DEY
.390a33	80 f5		bra $390a2a	                BRA ilocate_scroll
.390a35					ilocate_scrolldone
.390a35	86 1a		stx $1a		                STX CURSORX
.390a37	84 1c		sty $1c		                STY CURSORY
.390a39	a5 0c		lda $0c		                LDA SCREENBEGIN
.390a3b					ilocate_row
.390a3b	c0 00 00	cpy #$0000	                CPY #$0
.390a3e	f0 08		beq $390a48	                BEQ ilocate_right
.390a40	18		clc		ilocate_down    CLC
.390a41	65 11		adc $11		                ADC COLS_PER_LINE
.390a43	88		dey		                DEY
.390a44	f0 02		beq $390a48	                BEQ ilocate_right
.390a46	80 f8		bra $390a40	                BRA ilocate_down
.390a48	18		clc		ilocate_right   CLC
.390a49	65 1a		adc $1a		                ADC CURSORX             ; move the cursor right X columns
.390a4b	85 17		sta $17		                STA CURSORPOS
.390a4d	a4 1c		ldy $1c		                LDY CURSORY
.390a4f	98		tya		                TYA
.390a50	8f 16 00 af	sta $af0016	                STA @lVKY_TXT_CURSOR_Y_REG_L  ;Store in Vicky's registers
.390a54	8a		txa		                TXA
.390a55	8f 14 00 af	sta $af0014	                STA @lVKY_TXT_CURSOR_X_REG_L  ;Store in Vicky's register
.390a59	c2 20		rep #$20	                REP #$20        ; set A long
.390a5b	18		clc		                CLC
.390a5c	a5 17		lda $17		                LDA CURSORPOS
.390a5e	69 00 20	adc #$2000	                ADC #<>(CS_COLOR_MEM_PTR - CS_TEXT_MEM_PTR)
.390a61	85 1f		sta $1f		                STA COLORPOS
.390a63	28		plp		ilocate_done    PLP
.390a64	2b		pld		                PLD
.390a65	68		pla		                PLA
.390a66	6b		rtl		                RTL
.390a67					ISCROLLUP
.390a67	48		pha		                PHA
.390a68	da		phx		                PHX
.390a69	5a		phy		                PHY
.390a6a	8b		phb		                PHB
.390a6b	0b		phd		                PHD
.390a6c	08		php		                PHP
.390a6d	48		pha		                PHA             ; begin setdp macro
.390a6e	08		php		                PHP
.390a6f	c2 20		rep #$20	                REP #$20        ; set A long
.390a71	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390a74	5b		tcd		                TCD
.390a75	28		plp		                PLP
.390a76	68		pla		                PLA             ; end setdp macro
.390a77	c2 30		rep #$30	                REP #$30        ; set A&X long
.390a79	a5 11		lda $11		                LDA COLS_PER_LINE
.390a7b	8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.390a7f	a5 13		lda $13		                LDA LINES_VISIBLE
.390a81	8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.390a85	af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.390a89	85 00		sta $00		                STA TMPPTR1
.390a8b	18		clc		                CLC
.390a8c	a9 00 a0	lda #$a000	                LDA #$A000
.390a8f	a8		tay		                TAY
.390a90	65 11		adc $11		                ADC COLS_PER_LINE
.390a92	aa		tax		                TAX
.390a93	a5 00		lda $00		                LDA TMPPTR1
.390a95	54 af af	mvn $af,$af	                MVN $AF,$AF
.390a98	c2 30		rep #$30	                REP #$30        ; set A&X long
.390a9a	18		clc		                CLC
.390a9b	a9 00 c0	lda #$c000	                LDA #$C000
.390a9e	a8		tay		                TAY
.390a9f	65 11		adc $11		                ADC COLS_PER_LINE
.390aa1	aa		tax		                TAX
.390aa2	a5 00		lda $00		                LDA TMPPTR1
.390aa4	54 af af	mvn $af,$af	                MVN $AF,$AF
.390aa7	a5 00		lda $00		                LDA TMPPTR1
.390aa9	48		pha		                PHA
.390aaa	18		clc		                CLC
.390aab	69 00 a0	adc #$a000	                ADC #<>CS_TEXT_MEM_PTR
.390aae	85 00		sta $00		                STA TMPPTR1
.390ab0	a0 00 00	ldy #$0000	                LDY #0
.390ab3	a9 20 00	lda #$0020	                LDA #' '
.390ab6	97 00		sta [$00],y	clr_text        STA [TMPPTR1],Y
.390ab8	c8		iny		                INY
.390ab9	c4 0f		cpy $0f		                CPY COLS_VISIBLE
.390abb	d0 f9		bne $390ab6	                BNE clr_text
.390abd	68		pla		                PLA
.390abe	18		clc		                CLC
.390abf	69 00 c0	adc #$c000	                ADC #<>CS_COLOR_MEM_PTR
.390ac2	85 00		sta $00		                STA TMPPTR1
.390ac4	a0 00 00	ldy #$0000	                LDY #0
.390ac7	a5 1e		lda $1e		                LDA CURCOLOR
.390ac9	97 00		sta [$00],y	clr_color       STA [TMPPTR1],Y
.390acb	c8		iny		                INY
.390acc	c4 0f		cpy $0f		                CPY COLS_VISIBLE
.390ace	d0 f9		bne $390ac9	                BNE clr_color
.390ad0	28		plp		                PLP
.390ad1	2b		pld		                PLD
.390ad2	ab		plb		                PLB
.390ad3	7a		ply		                PLY
.390ad4	fa		plx		                PLX
.390ad5	68		pla		                PLA
.390ad6	6b		rtl		                RTL
.390ad7	08		php		IPRINTH         PHP
.390ad8	48		pha		                PHA
.390ad9					iprinth1
.390ad9	e2 20		sep #$20	                SEP #$20        ; set A short
.390adb	bd 00 00	lda $0000,x	                LDA #0,b,x      ; Read the value to be printed
.390ade	4a		lsr a		                LSR
.390adf	4a		lsr a		                LSR
.390ae0	4a		lsr a		                LSR
.390ae1	4a		lsr a		                LSR
.390ae2	22 31 0b 39	jsl $390b31	                JSL iprint_digit
.390ae6	bd 00 00	lda $0000,x	                LDA #0,b,x
.390ae9	22 31 0b 39	jsl $390b31	                JSL iprint_digit
.390aed	ca		dex		                DEX
.390aee	88		dey		                DEY
.390aef	d0 e8		bne $390ad9	                BNE iprinth1
.390af1	68		pla		                PLA
.390af2	28		plp		                PLP
.390af3	6b		rtl		                RTL
.390af4					IPRINTAH
.390af4	48		pha		                PHA
.390af5	08		php		                PHP
.390af6	8f 44 02 00	sta $000244	                STA @lCPUA            ; Save A where we can use it multiple times
.390afa	08		php		                PHP                   ; Get the processor status into A
.390afb	e2 20		sep #$20	                SEP #$20        ; set A short
.390afd	c2 10		rep #$10	                REP #$10        ; set X long
.390aff	68		pla		                PLA
.390b00	29 20		and #$20	                AND #%00100000        ; Is M = 1?
.390b02	c9 20		cmp #$20	                CMP #%00100000
.390b04	f0 14		beq $390b1a	                BEQ eight_bit
.390b06	af 46 02 00	lda $000246	                LDA @lCPUA+2          ; Get nibble [15..12]
.390b0a	4a		lsr a		                LSR A
.390b0b	4a		lsr a		                LSR A
.390b0c	4a		lsr a		                LSR A
.390b0d	4a		lsr a		                LSR A
.390b0e	22 31 0b 39	jsl $390b31	                JSL iprint_digit      ; And print it
.390b12	af 46 02 00	lda $000246	                LDA @lCPUA+2          ; Get nibble [11..8]
.390b16	22 31 0b 39	jsl $390b31	                JSL iprint_digit      ; And print it
.390b1a	af 44 02 00	lda $000244	eight_bit       LDA @lCPUA            ; Get nibble [7..4]
.390b1e	4a		lsr a		                LSR A
.390b1f	4a		lsr a		                LSR A
.390b20	4a		lsr a		                LSR A
.390b21	4a		lsr a		                LSR A
.390b22	22 31 0b 39	jsl $390b31	                JSL iprint_digit      ; And print it
.390b26	af 44 02 00	lda $000244	                LDA @lCPUA            ; Get nibble [3..0]
.390b2a	22 31 0b 39	jsl $390b31	                JSL iprint_digit      ; And print it
.390b2e	28		plp		                PLP
.390b2f	68		pla		                PLA
.390b30	6b		rtl		                RTL
.390b31	da		phx		iprint_digit    PHX
.390b32	c2 20		rep #$20	                REP #$20        ; set A long
.390b34	29 0f 00	and #$000f	                AND #$0F
.390b37	aa		tax		                TAX
.390b38	bf 1c 72 39	lda $39721c,x	                LDA hex_digits,X
.390b3c	22 9e 07 39	jsl $39079e	                JSL IPUTC       ; Print the digit
.390b40	fa		plx		                PLX
.390b41	6b		rtl		                RTL
.390b42	48		pha		ICLRSCREEN	    PHA
.390b43	da		phx		                PHX
.390b44	08		php		                PHP
.390b45	e2 20		sep #$20	                SEP #$20        ; set A short
.390b47	c2 10		rep #$10	                REP #$10        ; set X long
.390b49	a2 00 00	ldx #$0000	                LDX #$0000		          ; Only Use One Pointer
.390b4c	a9 20		lda #$20	                LDA #$20		            ; Fill the Entire Screen with Space
.390b4e	9f 00 a0 af	sta $afa000,x	iclearloop0	    STA CS_TEXT_MEM_PTR, x	;
.390b52	e8		inx		                inx
.390b53	e0 00 20	cpx #$2000	                cpx #$2000
.390b56	d0 f6		bne $390b4e	                bne iclearloop0
.390b58	a2 00 00	ldx #$0000	                LDX	#$0000		          ; Only Use One Pointer
.390b5b	af 1e 00 00	lda $00001e	                LDA @lCURCOLOR          ; Fill the Color Memory with the current color
.390b5f	9f 00 c0 af	sta $afc000,x	iclearloop1	    STA CS_COLOR_MEM_PTR, x	;
.390b63	e8		inx		                inx
.390b64	e0 00 20	cpx #$2000	                cpx #$2000
.390b67	d0 f6		bne $390b5f	                bne iclearloop1
.390b69	28		plp		                PLP
.390b6a	fa		plx		                PLX
.390b6b	68		pla		                PLA
.390b6c	6b		rtl		                RTL
.390b6d					COPYBYTES42
.390b6d	08		php		                PHP
.390b6e	0b		phd		                PHD
.390b6f	48		pha		                PHA             ; begin setdp macro
.390b70	08		php		                PHP
.390b71	c2 20		rep #$20	                REP #$20        ; set A long
.390b73	a9 00 00	lda #$0000	                LDA #TMPPTR1         ; set DP to page 0
.390b76	5b		tcd		                TCD
.390b77	28		plp		                PLP
.390b78	68		pla		                PLA             ; end setdp macro
.390b79	e2 20		sep #$20	                SEP #$20        ; set A short
.390b7b	c2 10		rep #$10	                REP #$10        ; set X long
.390b7d	a0 00 00	ldy #$0000	                LDY #0
.390b80	b7 00		lda [$00],y	copy_loop       LDA [TMPPTR1],Y
.390b82	97 04		sta [$04],y	                STA [TMPPTR2],Y
.390b84	c8		iny		                INY
.390b85	c0 2a 00	cpy #$002a	                CPY #42
.390b88	d0 f6		bne $390b80	                BNE copy_loop
.390b8a	2b		pld		                PLD
.390b8b	28		plp		                PLP
.390b8c	60		rts		                RTS
.390b8d					ICOLORFLAG
.390b8d	48		pha		                PHA
.390b8e	da		phx		                PHX
.390b8f	5a		phy		                PHY
.390b90	08		php		                PHP
.390b91	8b		phb		                PHB
.390b92	0b		phd		                PHD
.390b93	48		pha		                PHA             ; begin setdp macro
.390b94	08		php		                PHP
.390b95	c2 20		rep #$20	                REP #$20        ; set A long
.390b97	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390b9a	5b		tcd		                TCD
.390b9b	28		plp		                PLP
.390b9c	68		pla		                PLA             ; end setdp macro
.390b9d	c2 30		rep #$30	                REP #$30        ; set A&X long
.390b9f	a9 00 c0	lda #$c000	                LDA #<>CS_COLOR_MEM_PTR
.390ba2	85 04		sta $04		                STA TMPPTR2
.390ba4	a9 af 00	lda #$00af	                LDA #`CS_COLOR_MEM_PTR
.390ba7	85 06		sta $06		                STA TMPPTR2+2
.390ba9	a9 f3 6e	lda #$6ef3	                LDA #<>greet_clr_line1
.390bac	85 00		sta $00		                STA TMPPTR1
.390bae	a9 39 00	lda #$0039	                LDA #`greet_clr_line1
.390bb1	85 02		sta $02		                STA TMPPTR1+2
.390bb3	20 6d 0b	jsr $390b6d	                JSR COPYBYTES42
.390bb6	18		clc		                CLC
.390bb7	a5 04		lda $04		                LDA TMPPTR2
.390bb9	65 11		adc $11		                ADC COLS_PER_LINE
.390bbb	85 04		sta $04		                STA TMPPTR2
.390bbd	a9 1d 6f	lda #$6f1d	                LDA #<>greet_clr_line2
.390bc0	85 00		sta $00		                STA TMPPTR1
.390bc2	a9 39 00	lda #$0039	                LDA #`greet_clr_line2
.390bc5	85 02		sta $02		                STA TMPPTR1+2
.390bc7	20 6d 0b	jsr $390b6d	                JSR COPYBYTES42
.390bca	18		clc		                CLC
.390bcb	a5 04		lda $04		                LDA TMPPTR2
.390bcd	65 11		adc $11		                ADC COLS_PER_LINE
.390bcf	85 04		sta $04		                STA TMPPTR2
.390bd1	a9 47 6f	lda #$6f47	                LDA #<>greet_clr_line3
.390bd4	85 00		sta $00		                STA TMPPTR1
.390bd6	a9 39 00	lda #$0039	                LDA #`greet_clr_line3
.390bd9	85 02		sta $02		                STA TMPPTR1+2
.390bdb	20 6d 0b	jsr $390b6d	                JSR COPYBYTES42
.390bde	18		clc		                CLC
.390bdf	a5 04		lda $04		                LDA TMPPTR2
.390be1	65 11		adc $11		                ADC COLS_PER_LINE
.390be3	85 04		sta $04		                STA TMPPTR2
.390be5	a9 71 6f	lda #$6f71	                LDA #<>greet_clr_line4
.390be8	85 00		sta $00		                STA TMPPTR1
.390bea	a9 39 00	lda #$0039	                LDA #`greet_clr_line4
.390bed	85 02		sta $02		                STA TMPPTR1+2
.390bef	20 6d 0b	jsr $390b6d	                JSR COPYBYTES42
.390bf2	18		clc		                CLC
.390bf3	a5 04		lda $04		                LDA TMPPTR2
.390bf5	65 11		adc $11		                ADC COLS_PER_LINE
.390bf7	85 04		sta $04		                STA TMPPTR2
.390bf9	a9 9b 6f	lda #$6f9b	                LDA #<>greet_clr_line5
.390bfc	85 00		sta $00		                STA TMPPTR1
.390bfe	a9 39 00	lda #$0039	                LDA #`greet_clr_line5
.390c01	85 02		sta $02		                STA TMPPTR1+2
.390c03	20 6d 0b	jsr $390b6d	                JSR COPYBYTES42
.390c06	2b		pld		                PLD
.390c07	ab		plb		                PLB
.390c08	28		plp		                PLP
.390c09	7a		ply		                PLY
.390c0a	fa		plx		                PLX
.390c0b	68		pla		                PLA
.390c0c	6b		rtl		                RTL
.390c0d	0b		phd		IINITCHLUT		  PHD
.390c0e	08		php		                PHP
.390c0f	48		pha		                PHA
.390c10	da		phx		                PHX
.390c11	e2 20		sep #$20	                SEP #$20        ; set A short
.390c13	e2 10		sep #$10	                SEP #$10        ; set X short
.390c15	a2 00		ldx #$00					        LDX	#$00
.390c17	bf c5 6f 39	lda $396fc5,x	lutinitloop0	  LDA @lfg_color_lut,x		; get Local Data
.390c1b	9f 40 1f af	sta $af1f40,x	                STA FG_CHAR_LUT_PTR,x	; Write in LUT Memory
.390c1f	e8		inx		                inx
.390c20	e0 40		cpx #$40	                cpx #$40
.390c22	d0 f3		bne $390c17	                bne lutinitloop0
.390c24	a2 00		ldx #$00	                LDX	#$00
.390c26	bf 05 70 39	lda $397005,x	lutinitloop1	  LDA @lbg_color_lut,x		; get Local Data
.390c2a	9f 80 1f af	sta $af1f80,x	                STA BG_CHAR_LUT_PTR,x	; Write in LUT Memory
.390c2e	e8		inx		                INX
.390c2f	e0 40		cpx #$40	                CPX #$40
.390c31	d0 f3		bne $390c26	                bne lutinitloop1
.390c33	c2 20		rep #$20	                REP #$20        ; set A long
.390c35	c2 10		rep #$10	                REP #$10        ; set X long
.390c37	fa		plx		                PLX
.390c38	68		pla		                PLA
.390c39	28		plp		                PLP
.390c3a	2b		pld		                PLD
.390c3b	6b		rtl		                RTL
.390c3c					IINITGAMMATABLE
.390c3c	e2 20		sep #$20	                SEP #$20        ; set A short
.390c3e	c2 10		rep #$10	                REP #$10        ; set X long
.390c40	a2 00 00	ldx #$0000	                ldx #$0000
.390c43	bf 00 77 39	lda $397700,x	initgammaloop   LDA GAMMA_1_8_Tbl, x
.390c47	9f 00 40 af	sta $af4000,x	                STA GAMMA_B_LUT_PTR, x
.390c4b	9f 00 41 af	sta $af4100,x	                STA GAMMA_G_LUT_PTR, x
.390c4f	9f 00 42 af	sta $af4200,x	                STA GAMMA_R_LUT_PTR, x
.390c53	e8		inx		                inx
.390c54	e0 00 01	cpx #$0100	                cpx #$0100
.390c57	d0 ea		bne $390c43	                bne initgammaloop
.390c59	c2 30		rep #$30	                REP #$30        ; set A&X long
.390c5b	6b		rtl		                RTL
.390c5c	48		pha		IINITALLLUT     PHA
.390c5d	da		phx		                PHX
.390c5e	a2 00 00	ldx #$0000	                LDX #$0000
.390c61	e2 20		sep #$20	                SEP #$20        ; set A short
.390c63	a9 00		lda #$00	                LDA #$00
.390c65	85 0a		sta $0a		                STA $0A     ; Temp Location
.390c67					iinit_lut_loop
.390c67	86 02		stx $02		                STX $02
.390c69	a6 0a		ldx $0a		                LDX $0A
.390c6b	bf 00 76 39	lda $397600,x	                LDA GAMMA_2_2_Tbl, x
.390c6f	49 55		eor #$55	                EOR  #$55
.390c71	a6 02		ldx $02		                LDX $02
.390c73	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390c77	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390c7b	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390c7f	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390c83	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390c87	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390c8b	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390c8f	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390c93	e8		inx		                inx
.390c94	86 02		stx $02		                STX $02
.390c96	a6 0a		ldx $0a		                LDX $0A
.390c98	bf 00 78 39	lda $397800,x	                LDA RANDOM_LUT_Tbl, x
.390c9c	a6 02		ldx $02		                LDX $02
.390c9e	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390ca2	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390ca6	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390caa	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390cae	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390cb2	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390cb6	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390cba	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390cbe	e8		inx		                inx
.390cbf	86 02		stx $02		                STX $02
.390cc1	a6 0a		ldx $0a		                LDX $0A
.390cc3	bf 00 77 39	lda $397700,x	                LDA GAMMA_1_8_Tbl, x
.390cc7	49 aa		eor #$aa	                EOR  #$AA
.390cc9	a6 02		ldx $02		                LDX $02
.390ccb	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390ccf	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390cd3	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390cd7	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390cdb	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390cdf	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390ce3	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390ce7	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390ceb	e8		inx		                inx
.390cec	a9 ff		lda #$ff	                LDA #$FF
.390cee	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390cf2	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390cf6	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390cfa	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390cfe	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390d02	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390d06	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390d0a	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390d0e	e6 0a		inc $0a		                inc $0A
.390d10	e8		inx		                inx
.390d11	e0 00 04	cpx #$0400	                cpx #$0400
.390d14	f0 03		beq $390d19	                beq iinit_lut_exit
.390d16	82 4e ff	brl $390c67	                brl iinit_lut_loop
.390d19					iinit_lut_exit
.390d19	c2 30		rep #$30	                REP #$30        ; set A&X long
.390d1b	fa		plx		                PLX
.390d1c	68		pla		                PLA
.390d1d	6b		rtl		                RTL
.390d1e	48		pha		IINITVKYTXTMODE PHA
.390d1f	08		php		                PHP
.390d20	e2 20		sep #$20	                SEP #$20        ; set A short
.390d22	af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.390d26	29 01		and #$01	                AND #$01
.390d28	c9 01		cmp #$01	                CMP #$01
.390d2a	d0 15		bne $390d41	                BNE INITVICKYMODE
.390d2c	a9 00		lda #$00	                LDA #$00
.390d2e	8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.390d32	ea		nop		                NOP
.390d33	ea		nop		                NOP
.390d34	ea		nop		                NOP
.390d35	ea		nop		                NOP
.390d36	ea		nop		                NOP
.390d37	a9 01		lda #$01	                LDA #$01
.390d39	8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.390d3d	ea		nop		                NOP
.390d3e	ea		nop		                NOP
.390d3f	ea		nop		                NOP
.390d40	ea		nop		                NOP
.390d41					INITVICKYMODE
.390d41	a9 00		lda #$00	                LDA #$00
.390d43	8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.390d47	a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En       ; Set it to 640x480 for real
.390d49	8f 00 00 af	sta $af0000	                STA @L MASTER_CTRL_REG_L
.390d4d	e2 20		sep #$20	                SEP #$20        ; set A short
.390d4f	a9 20		lda #$20	                LDA #$20
.390d51	8f 05 00 af	sta $af0005	                STA BORDER_COLOR_B
.390d55	8f 07 00 af	sta $af0007	                STA BORDER_COLOR_R
.390d59	a9 00		lda #$00	                LDA #$00
.390d5b	8f 06 00 af	sta $af0006	                STA BORDER_COLOR_G
.390d5f	a9 01		lda #$01	                LDA #Border_Ctrl_Enable           ; Enable the Border
.390d61	8f 04 00 af	sta $af0004	                STA BORDER_CTRL_REG
.390d65	a9 20		lda #$20	                LDA #32                           ; Set the border to the standard 32 pixels
.390d67	8f 08 00 af	sta $af0008	                STA BORDER_X_SIZE
.390d6b	8f 09 00 af	sta $af0009	                STA BORDER_Y_SIZE
.390d6f	c2 30		rep #$30	                REP #$30        ; set A&X long
.390d71	22 78 0d 39	jsl $390d78	                JSL ISETSIZES                     ; Calculate the size of the text screen
.390d75	28		plp		                PLP
.390d76	68		pla		                PLA
.390d77	6b		rtl		                RTL
.390d78					ISETSIZES
.390d78	48		pha		                PHA
.390d79	da		phx		                PHX
.390d7a	5a		phy		                PHY
.390d7b	8b		phb		                PHB
.390d7c	0b		phd		                PHD
.390d7d	08		php		                PHP
.390d7e	48		pha		                PHA             ; begin setdp macro
.390d7f	08		php		                PHP
.390d80	c2 20		rep #$20	                REP #$20        ; set A long
.390d82	a9 00 00	lda #$0000	                LDA #<>BANK0_BEGIN         ; set DP to page 0
.390d85	5b		tcd		                TCD
.390d86	28		plp		                PLP
.390d87	68		pla		                PLA             ; end setdp macro
.390d88	48		pha		                PHA             ; begin setdbr macro
.390d89	08		php		                PHP
.390d8a	e2 20		sep #$20	                SEP #$20        ; set A short
.390d8c	a9 00		lda #$00	                LDA #0
.390d8e	48		pha		                PHA
.390d8f	ab		plb		                PLB
.390d90	28		plp		                PLP
.390d91	68		pla		                PLA             ; end setdbr macro
.390d92	e2 30		sep #$30	                SEP #$30        ; set A&X short
.390d94	af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.390d98	29 03		and #$03	                AND #$03                    ; Mask off the resolution bits
.390d9a	0a		asl a		                ASL A
.390d9b	aa		tax		                TAX                         ; Index to the col/line count in X
.390d9c	c2 20		rep #$20	                REP #$20        ; set A long
.390d9e	bf 1b 0e 39	lda $390e1b,x	                LDA cols_by_res,X           ; Get the number of columns
.390da2	85 11		sta $11		                STA COLS_PER_LINE           ; This is how many columns there are per line in the memory
.390da4	85 0f		sta $0f		                STA COLS_VISIBLE            ; This is how many would be visible with no border
.390da6	bf 23 0e 39	lda $390e23,x	                LDA lines_by_res,X          ; Get the number of lines
.390daa	85 15		sta $15		                STA LINES_MAX               ; This is the total number of lines in memory
.390dac	85 13		sta $13		                STA LINES_VISIBLE           ; This is how many lines would be visible with no border
.390dae	e2 20		sep #$20	                SEP #$20        ; set A short
.390db0	af 04 00 af	lda $af0004	                LDA @l BORDER_CTRL_REG      ; Check to see if we have a border
.390db4	89 01		bit #$01	                BIT #Border_Ctrl_Enable
.390db6	f0 5c		beq $390e14	                BEQ done                    ; No border... the sizes are correct now
.390db8	af 08 00 af	lda $af0008	                LDA @l BORDER_X_SIZE        ; Get the horizontal border width
.390dbc	29 3f		and #$3f	                AND #$3F
.390dbe	89 03		bit #$03	                BIT #$03                    ; Check the lower two bits... indicates a partial column is eaten
.390dc0	d0 04		bne $390dc6	                BNE frac_width
.390dc2	4a		lsr a		                LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.390dc3	4a		lsr a		                LSR A
.390dc4	80 03		bra $390dc9	                BRA store_width
.390dc6	4a		lsr a		frac_width      LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.390dc7	4a		lsr a		                LSR A                       ; because a column is partially hidden
.390dc8	1a		inc a		                INC A
.390dc9	85 00		sta $00		store_width     STA TMPPTR1
.390dcb	64 01		stz $01		                STZ TMPPTR1+1
.390dcd	e2 20		sep #$20	                SEP #$20        ; set A short
.390dcf	af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H    ; Check if we're pixel doubling
.390dd3	89 02		bit #$02	                BIT #Mstr_Ctrl_Video_Mode1
.390dd5	f0 04		beq $390ddb	                BEQ adjust_width            ; No... just adjust the width of the screen
.390dd7	c2 20		rep #$20	                REP #$20        ; set A long
.390dd9	46 00		lsr $00		                LSR TMPPTR1                 ; Yes... cut the adjustment in half
.390ddb					adjust_width
.390ddb	c2 20		rep #$20	                REP #$20        ; set A long
.390ddd	38		sec		                SEC
.390dde	a5 11		lda $11		                LDA COLS_PER_LINE
.390de0	e5 00		sbc $00		                SBC TMPPTR1
.390de2	85 0f		sta $0f		                STA COLS_VISIBLE
.390de4	af 09 00 af	lda $af0009	                LDA @l BORDER_Y_SIZE        ; Get the horizontal border width
.390de8	29 3f 00	and #$003f	                AND #$3F
.390deb	89 03 00	bit #$0003	                BIT #$03                    ; Check the lower two bits... indicates a partial column is eaten
.390dee	d0 04		bne $390df4	                BNE frac_height
.390df0	4a		lsr a		                LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.390df1	4a		lsr a		                LSR A
.390df2	80 03		bra $390df7	                BRA store_height
.390df4	4a		lsr a		frac_height     LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.390df5	4a		lsr a		                LSR A                       ; because a column is partially hidden
.390df6	1a		inc a		                INC A
.390df7	85 00		sta $00		store_height    STA TMPPTR1
.390df9	64 01		stz $01		                STZ TMPPTR1+1
.390dfb	e2 20		sep #$20	                SEP #$20        ; set A short
.390dfd	af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H    ; Check if we're pixel doubling
.390e01	89 02		bit #$02	                BIT #Mstr_Ctrl_Video_Mode1
.390e03	f0 04		beq $390e09	                BEQ adjust_height           ; No... just adjust the height of the screen
.390e05	c2 20		rep #$20	                REP #$20        ; set A long
.390e07	46 00		lsr $00		                LSR TMPPTR1                 ; Yes... cut the adjustment in half
.390e09					adjust_height
.390e09	c2 20		rep #$20	                REP #$20        ; set A long
.390e0b	38		sec		                SEC
.390e0c	a5 15		lda $15		                LDA LINES_MAX
.390e0e	e5 00		sbc $00		                SBC TMPPTR1
.390e10	85 13		sta $13		                STA LINES_VISIBLE
.390e12	c2 30		rep #$30	                REP #$30        ; set A&X long
.390e14	28		plp		done            PLP
.390e15	2b		pld		                PLD
.390e16	ab		plb		                PLB
.390e17	7a		ply		                PLY
.390e18	fa		plx		                PLX
.390e19	68		pla		                PLA
.390e1a	6b		rtl		                RTL
>390e1b	50 00 64 00 28 00 32 00		cols_by_res     .word 80,100,40,50
>390e23	3c 00 4b 00 1e 00 25 00		lines_by_res    .word 60,75,30,37
.390e2b					IINITVKYGRPMODE
.390e2b	48		pha		                PHA
.390e2c	e2 20		sep #$20	                SEP #$20        ; set A short
.390e2e	a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.390e30	8f 00 01 af	sta $af0100	                STA @lBM0_CONTROL_REG
.390e34	a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.390e36	8f 01 01 af	sta $af0101	                STA @lBM0_START_ADDY_L
.390e3a	a9 c0		lda #$c0	                LDA #$C0
.390e3c	8f 02 01 af	sta $af0102	                STA @lBM0_START_ADDY_M
.390e40	a9 00		lda #$00	                LDA #$00
.390e42	8f 03 01 af	sta $af0103	                STA @lBM0_START_ADDY_H ; This address is always base from
.390e46	a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.390e48	8f 08 01 af	sta $af0108	                STA @lBM1_CONTROL_REG
.390e4c	a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.390e4e	8f 09 01 af	sta $af0109	                STA @lBM1_START_ADDY_L
.390e52	a9 c0		lda #$c0	                LDA #$C0
.390e54	8f 0a 01 af	sta $af010a	                STA @lBM1_START_ADDY_M
.390e58	a9 00		lda #$00	                LDA #$00
.390e5a	8f 0b 01 af	sta $af010b	                STA @lBM1_START_ADDY_H ; This address is always base from
.390e5e	c2 30		rep #$30	                REP #$30        ; set A&X long
.390e60	68		pla		                PLA
.390e61	6b		rtl		                RTL
.390e62					IINITTILEMODE
.390e62	6b		rtl		                RTL
.390e63	48		pha		IINITSPRITE     PHA
.390e64	e2 20		sep #$20	                SEP #$20        ; set A short
.390e66	a9 03		lda #$03	                LDA #$03    ; Enable 17 Sprites
.390e68	8f 00 0c af	sta $af0c00	                STA SP00_CONTROL_REG
.390e6c	8f 08 0c af	sta $af0c08	                STA SP01_CONTROL_REG
.390e70	8f 10 0c af	sta $af0c10	                STA SP02_CONTROL_REG
.390e74	8f 18 0c af	sta $af0c18	                STA SP03_CONTROL_REG
.390e78	8f 20 0c af	sta $af0c20	                STA SP04_CONTROL_REG
.390e7c	8f 28 0c af	sta $af0c28	                STA SP05_CONTROL_REG
.390e80	8f 30 0c af	sta $af0c30	                STA SP06_CONTROL_REG
.390e84	8f 38 0c af	sta $af0c38	                STA SP07_CONTROL_REG
.390e88	8f 40 0c af	sta $af0c40	                STA SP08_CONTROL_REG
.390e8c	8f 48 0c af	sta $af0c48	                STA SP09_CONTROL_REG
.390e90	8f 50 0c af	sta $af0c50	                STA SP10_CONTROL_REG
.390e94	8f 58 0c af	sta $af0c58	                STA SP11_CONTROL_REG
.390e98	8f 60 0c af	sta $af0c60	                STA SP12_CONTROL_REG
.390e9c	8f 68 0c af	sta $af0c68	                STA SP13_CONTROL_REG
.390ea0	8f 70 0c af	sta $af0c70	                STA SP14_CONTROL_REG
.390ea4	8f 78 0c af	sta $af0c78	                STA SP15_CONTROL_REG
.390ea8	8f 80 0c af	sta $af0c80	                STA SP16_CONTROL_REG
.390eac	a9 09		lda #$09	                LDA #$09
.390eae	8f 03 0c af	sta $af0c03	                STA SP00_ADDY_PTR_H
.390eb2	8f 0b 0c af	sta $af0c0b	                STA SP01_ADDY_PTR_H
.390eb6	8f 13 0c af	sta $af0c13	                STA SP02_ADDY_PTR_H
.390eba	8f 1b 0c af	sta $af0c1b	                STA SP03_ADDY_PTR_H
.390ebe	8f 23 0c af	sta $af0c23	                STA SP04_ADDY_PTR_H
.390ec2	8f 2b 0c af	sta $af0c2b	                STA SP05_ADDY_PTR_H
.390ec6	8f 33 0c af	sta $af0c33	                STA SP06_ADDY_PTR_H
.390eca	8f 3b 0c af	sta $af0c3b	                STA SP07_ADDY_PTR_H
.390ece	8f 43 0c af	sta $af0c43	                STA SP08_ADDY_PTR_H
.390ed2	8f 4b 0c af	sta $af0c4b	                STA SP09_ADDY_PTR_H
.390ed6	8f 53 0c af	sta $af0c53	                STA SP10_ADDY_PTR_H
.390eda	8f 5b 0c af	sta $af0c5b	                STA SP11_ADDY_PTR_H
.390ede	8f 63 0c af	sta $af0c63	                STA SP12_ADDY_PTR_H
.390ee2	8f 6b 0c af	sta $af0c6b	                STA SP13_ADDY_PTR_H
.390ee6	8f 73 0c af	sta $af0c73	                STA SP14_ADDY_PTR_H
.390eea	8f 7b 0c af	sta $af0c7b	                STA SP15_ADDY_PTR_H
.390eee	8f 83 0c af	sta $af0c83	                STA SP16_ADDY_PTR_H
.390ef2	a9 00		lda #$00	                LDA #$00
.390ef4	8f 02 0c af	sta $af0c02	                STA SP00_ADDY_PTR_M
.390ef8	a9 04		lda #$04	                LDA #$04
.390efa	8f 0a 0c af	sta $af0c0a	                STA SP01_ADDY_PTR_M
.390efe	a9 08		lda #$08	                LDA #$08
.390f00	8f 12 0c af	sta $af0c12	                STA SP02_ADDY_PTR_M
.390f04	a9 0c		lda #$0c	                LDA #$0C
.390f06	8f 1a 0c af	sta $af0c1a	                STA SP03_ADDY_PTR_M
.390f0a	a9 10		lda #$10	                LDA #$10
.390f0c	8f 22 0c af	sta $af0c22	                STA SP04_ADDY_PTR_M
.390f10	a9 14		lda #$14	                LDA #$14
.390f12	8f 2a 0c af	sta $af0c2a	                STA SP05_ADDY_PTR_M
.390f16	a9 18		lda #$18	                LDA #$18
.390f18	8f 32 0c af	sta $af0c32	                STA SP06_ADDY_PTR_M
.390f1c	a9 1c		lda #$1c	                LDA #$1C
.390f1e	8f 3a 0c af	sta $af0c3a	                STA SP07_ADDY_PTR_M
.390f22	a9 20		lda #$20	                LDA #$20
.390f24	8f 42 0c af	sta $af0c42	                STA SP08_ADDY_PTR_M
.390f28	a9 24		lda #$24	                LDA #$24
.390f2a	8f 4a 0c af	sta $af0c4a	                STA SP09_ADDY_PTR_M
.390f2e	a9 28		lda #$28	                LDA #$28
.390f30	8f 52 0c af	sta $af0c52	                STA SP10_ADDY_PTR_M
.390f34	a9 2c		lda #$2c	                LDA #$2C
.390f36	8f 5a 0c af	sta $af0c5a	                STA SP11_ADDY_PTR_M
.390f3a	a9 30		lda #$30	                LDA #$30
.390f3c	8f 62 0c af	sta $af0c62	                STA SP12_ADDY_PTR_M
.390f40	a9 34		lda #$34	                LDA #$34
.390f42	8f 6a 0c af	sta $af0c6a	                STA SP13_ADDY_PTR_M
.390f46	a9 38		lda #$38	                LDA #$38
.390f48	8f 72 0c af	sta $af0c72	                STA SP14_ADDY_PTR_M
.390f4c	a9 3c		lda #$3c	                LDA #$3C
.390f4e	8f 7a 0c af	sta $af0c7a	                STA SP15_ADDY_PTR_M
.390f52	a9 40		lda #$40	                LDA #$40
.390f54	8f 82 0c af	sta $af0c82	                STA SP16_ADDY_PTR_M
.390f58	a9 00		lda #$00	                LDA #$00
.390f5a	8f 01 0c af	sta $af0c01	                STA SP00_ADDY_PTR_L
.390f5e	8f 09 0c af	sta $af0c09	                STA SP01_ADDY_PTR_L
.390f62	8f 11 0c af	sta $af0c11	                STA SP02_ADDY_PTR_L
.390f66	8f 19 0c af	sta $af0c19	                STA SP03_ADDY_PTR_L
.390f6a	8f 21 0c af	sta $af0c21	                STA SP04_ADDY_PTR_L
.390f6e	8f 29 0c af	sta $af0c29	                STA SP05_ADDY_PTR_L
.390f72	8f 31 0c af	sta $af0c31	                STA SP06_ADDY_PTR_L
.390f76	8f 39 0c af	sta $af0c39	                STA SP07_ADDY_PTR_L
.390f7a	8f 41 0c af	sta $af0c41	                STA SP08_ADDY_PTR_L
.390f7e	8f 49 0c af	sta $af0c49	                STA SP09_ADDY_PTR_L
.390f82	8f 51 0c af	sta $af0c51	                STA SP10_ADDY_PTR_L
.390f86	8f 59 0c af	sta $af0c59	                STA SP11_ADDY_PTR_L
.390f8a	8f 61 0c af	sta $af0c61	                STA SP12_ADDY_PTR_L
.390f8e	8f 69 0c af	sta $af0c69	                STA SP13_ADDY_PTR_L
.390f92	8f 71 0c af	sta $af0c71	                STA SP14_ADDY_PTR_L
.390f96	8f 79 0c af	sta $af0c79	                STA SP15_ADDY_PTR_L
.390f9a	8f 81 0c af	sta $af0c81	                STA SP16_ADDY_PTR_L
.390f9e	68		pla		                PLA
.390f9f	6b		rtl		                RTL
.390fa0					IINITFONTSET
.390fa0	48		pha		                PHA
.390fa1	da		phx		                PHX
.390fa2	5a		phy		                PHY
.390fa3	8b		phb		                PHB
.390fa4	08		php		                PHP
.390fa5	c2 30		rep #$30	                REP #$30        ; set A&X long
.390fa7	a2 00 f0	ldx #$f000	                LDX #<>FONT_4_BANK0         ; Font data to load
.390faa	a0 00 80	ldy #$8000	                LDY #<>FONT_MEMORY_BANK0    ; Location to load the font data
.390fad	a9 00 08	lda #$0800	                LDA #8 * 256                ; Size of a FONT in bytes
.390fb0	54 af 3f	mvn $3f,$af	                MVN #`FONT_4_BANK0, #`FONT_MEMORY_BANK0
.390fb3	28		plp		                PLP
.390fb4	ab		plb		                PLB
.390fb5	7a		ply		                PLY
.390fb6	fa		plx		                PLX
.390fb7	68		pla		                PLA
.390fb8	6b		rtl		                RTL
.390fb9					INITMOUSEPOINTER
.390fb9	e2 20		sep #$20	                SEP #$20        ; set A short
.390fbb	c2 10		rep #$10	                REP #$10        ; set X long
.390fbd	a2 00 00	ldx #$0000	                LDX #$0000
.390fc0					FILL_MOUSE_MARKER
.390fc0	bf 00 79 39	lda $397900,x	                LDA @lMOUSE_POINTER_PTR,X
.390fc4	9f 00 05 af	sta $af0500,x	                STA @lMOUSE_PTR_GRAP0_START, X
.390fc8	e8		inx		                INX
.390fc9	e0 00 01	cpx #$0100	                CPX #$0100
.390fcc	d0 f2		bne $390fc0	                BNE FILL_MOUSE_MARKER
.390fce	ea		nop		                nop
.390fcf	a9 01		lda #$01	                LDA #$01
.390fd1	8f 00 07 af	sta $af0700	                STA @lMOUSE_PTR_CTRL_REG_L  ; Enable Mouse, Mouse Pointer Graphic Bank 0
.390fd5	c2 30		rep #$30	                REP #$30        ; set A&X long
.390fd7	6b		rtl		                RTL
.390fd8	48		pha		IINITCURSOR     PHA
.390fd9	e2 20		sep #$20	                SEP #$20        ; set A short
.390fdb	a9 b1		lda #$b1	                LDA #$B1      ;The Cursor Character will be a Fully Filled Block
.390fdd	8f 12 00 af	sta $af0012	                STA VKY_TXT_CURSOR_CHAR_REG
.390fe1	a9 03		lda #$03	                LDA #$03      ;Set Cursor Enable And Flash Rate @1Hz
.390fe3	8f 10 00 af	sta $af0010	                STA VKY_TXT_CURSOR_CTRL_REG ;
.390fe7	c2 30		rep #$30	                REP #$30        ; set A&X long
.390fe9	a9 00 00	lda #$0000	                LDA #$0000;
.390fec	8f 14 00 af	sta $af0014	                STA VKY_TXT_CURSOR_X_REG_L; // Set the X to Position 1
.390ff0	a9 06 00	lda #$0006	                LDA #$0006;
.390ff3	8f 16 00 af	sta $af0016	                STA VKY_TXT_CURSOR_Y_REG_L; // Set the Y to Position 6 (Below)
.390ff7	68		pla		                PLA
.390ff8	6b		rtl		                RTL
.390ff9	0b		phd		IINITSUPERIO	  PHD
.390ffa	08		php		                PHP
.390ffb	48		pha		                PHA
.390ffc	e2 20		sep #$20	                SEP #$20        ; set A short
.390ffe	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.391000	8f 23 11 af	sta $af1123	                STA GP10_REG
.391004	af 23 11 af	lda $af1123	                LDA GP10_REG
.391008	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.39100a	8f 24 11 af	sta $af1124	                STA GP11_REG
.39100e	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.391010	8f 25 11 af	sta $af1125	                STA GP12_REG
.391014	a9 01		lda #$01	        				LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.391016	8f 26 11 af	sta $af1126	        				STA GP13_REG
.39101a	a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BX) Bit[0] = 1, Bit[2] = 1
.39101c	8f 27 11 af	sta $af1127	        				STA GP14_REG
.391020	a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BY) Bit[0] = 1, Bit[2] = 1
.391022	8f 28 11 af	sta $af1128	        				STA GP15_REG
.391026	a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BX) Bit[0] = 1, Bit[2] = 1
.391028	8f 29 11 af	sta $af1129	        				STA GP16_REG
.39102c	a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BY) Bit[0] = 1, Bit[2] = 1
.39102e	8f 2a 11 af	sta $af112a	        				STA GP17_REG
.391032	a9 00		lda #$00	        				LDA #$00		;(C256 - HEADPHONE MUTE) - Output GPIO - Push-Pull (1 - Headphone On, 0 - HeadPhone Off)
.391034	8f 2b 11 af	sta $af112b	        				STA GP20_REG
.391038	a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.39103a	8f 2f 11 af	sta $af112f					        STA GP24_REG
.39103e	a9 05		lda #$05					        LDA #$05		;(C256 - MIDI IN) Bit[0] = 1, Bit[2] = 1 (Page 132 Manual)
.391040	8f 30 11 af	sta $af1130					        STA GP25_REG
.391044	a9 84		lda #$84				        	LDA #$84		;(C256 - MIDI OUT) Bit[2] = 1, Bit[7] = 1 (Open Drain - To be Checked)
.391046	8f 31 11 af	sta $af1131					        STA GP26_REG
.39104a	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 1) Setup as GPIO Input for now
.39104c	8f 33 11 af	sta $af1133					        STA GP30_REG
.391050	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 4) Setup as GPIO Input for now
.391052	8f 34 11 af	sta $af1134					        STA GP31_REG
.391056	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 3) Setup as GPIO Input for now
.391058	8f 35 11 af	sta $af1135					        STA GP32_REG
.39105c	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 6) Setup as GPIO Input for now
.39105e	8f 36 11 af	sta $af1136					        STA GP33_REG
.391062	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 5) Setup as GPIO Input for now
.391064	8f 37 11 af	sta $af1137					        STA GP34_REG
.391068	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 8) Setup as GPIO Input for now
.39106a	8f 38 11 af	sta $af1138					        STA GP35_REG
.39106e	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 7) Setup as GPIO Input for now
.391070	8f 39 11 af	sta $af1139					        STA GP36_REG
.391074	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 10) Setup as GPIO Input for now
.391076	8f 3a 11 af	sta $af113a					        STA GP37_REG
.39107a	a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.39107c	8f 3d 11 af	sta $af113d					        STA GP42_REG
.391080	a9 01		lda #$01				          LDA #$01		;(C256 - INPUT PLL CLK INTERRUPT) Default Value - Will keep it as an input for now, no real usage for now
.391082	8f 3e 11 af	sta $af113e					        STA GP43_REG
.391086	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RI2) - Input - Set Secondary Function
.391088	8f 3f 11 af	sta $af113f					        STA GP50_REG
.39108c	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DCD2) - Input - Set Secondary Function
.39108e	8f 40 11 af	sta $af1140					        STA GP51_REG
.391092	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RXD2) - Input - Set Secondary Function
.391094	8f 41 11 af	sta $af1141					        STA GP52_REG
.391098	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - TXD2) - Output - Set Secondary Function
.39109a	8f 42 11 af	sta $af1142					        STA GP53_REG
.39109e	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DSR2) - Input - Set Secondary Function
.3910a0	8f 43 11 af	sta $af1143					        STA GP54_REG
.3910a4	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - RTS2) - Output - Set Secondary Function
.3910a6	8f 44 11 af	sta $af1144					        STA GP55_REG
.3910aa	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - CTS2) - Input - Set Secondary Function
.3910ac	8f 45 11 af	sta $af1145					        STA GP56_REG
.3910b0	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - DTR2) - Output - Set Secondary Function
.3910b2	8f 46 11 af	sta $af1146					        STA GP57_REG
.3910b6	a9 84		lda #$84					        LDA #$84		;(C256 - LED1) - Open Drain - Output
.3910b8	8f 47 11 af	sta $af1147					        STA GP60_REG
.3910bc	a9 84		lda #$84					        LDA #$84		;(C256 - LED2) - Open Drain - Output
.3910be	8f 48 11 af	sta $af1148					        STA GP61_REG
.3910c2	a9 00		lda #$00				        	LDA #$00		;GPIO Data Register (GP10..GP17) - Not Used
.3910c4	8f 4b 11 af	sta $af114b					        STA GP1_REG
.3910c8	a9 01		lda #$01					        LDA #$01		;GPIO Data Register (GP20..GP27) - Bit[0] - Headphone Mute (Enabling it)
.3910ca	8f 4c 11 af	sta $af114c					        STA GP2_REG
.3910ce	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP30..GP37) - Since it is in Output mode, nothing to write here.
.3910d0	8f 4d 11 af	sta $af114d					        STA GP3_REG
.3910d4	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP40..GP47)  - Not Used
.3910d6	8f 4e 11 af	sta $af114e					        STA GP4_REG
.3910da	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP50..GP57)  - Not Used
.3910dc	8f 4f 11 af	sta $af114f					        STA GP5_REG
.3910e0	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP60..GP61)  - Not Used
.3910e2	8f 50 11 af	sta $af1150					        STA GP6_REG
.3910e6	a9 01		lda #$01					        LDA #$01		;LED1 Output - Already setup by Vicky Init Phase, for now, I will leave it alone
.3910e8	8f 5d 11 af	sta $af115d					        STA LED1_REG
.3910ec	a9 02		lda #$02					        LDA #$02		;LED2 Output - However, I will setup this one, to make sure the Code works (Full On, when Code was ran)
.3910ee	8f 5e 11 af	sta $af115e					        STA LED2_REG
.3910f2	c2 20		rep #$20	                REP #$20        ; set A long
.3910f4	68		pla		                PLA
.3910f5	28		plp						        PLP
.3910f6	2b		pld					        	PLD
.3910f7	6b		rtl		                RTL
.3910f8	0b		phd		IINITKEYBOARD	  PHD
.3910f9	08		php						        PHP
.3910fa	48		pha						        PHA
.3910fb	da		phx						        PHX
.3910fc	e2 20		sep #$20	                SEP #$20        ; set A short
.3910fe	c2 10		rep #$10	                REP #$10        ; set X long
.391100	18		clc		                CLC
.391101	20 b1 11	jsr $3911b1	                JSR Poll_Inbuf ;
.391104	a9 aa		lda #$aa					        LDA #$AA			;Send self test command
.391106	8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.39110a	20 bc 11	jsr $3911bc	                JSR Poll_Outbuf ;
.39110d	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Check self test result
.391111	c9 55		cmp #$55					        CMP #$55
.391113	f0 03		beq $391118					        BEQ	passAAtest
.391115	82 89 00	brl $3911a1	                BRL initkb_loop_out
.391118					passAAtest
.391118	a9 ab		lda #$ab					        LDA #$AB			;Send test Interface command
.39111a	8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.39111e	20 bc 11	jsr $3911bc	                JSR Poll_Outbuf ;
.391121	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Display Interface test results
.391125	c9 00		cmp #$00					        CMP #$00			;Should be 00
.391127	f0 03		beq $39112c					        BEQ	passABtest
.391129	82 75 00	brl $3911a1	                BRL initkb_loop_out
.39112c					passABtest
.39112c	a9 60		lda #$60	                LDA #$60            ; Send Command 0x60 so to Enable Interrupt
.39112e	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.391132	20 b1 11	jsr $3911b1	                JSR Poll_Inbuf ;
.391135	a9 69		lda #$69	                LDA #%01101001      ; Enable Interrupt
.391137	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.39113b	20 b1 11	jsr $3911b1	                JSR Poll_Inbuf ;
.39113e	a9 ff		lda #$ff	                LDA #$FF      ; Send Keyboard Reset command
.391140	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.391144	a2 ff ff	ldx #$ffff	                LDX #$FFFF
.391147	ca		dex		DLY_LOOP1       DEX
.391148	ea		nop		                NOP
.391149	ea		nop		                NOP
.39114a	ea		nop		                NOP
.39114b	ea		nop		                NOP
.39114c	ea		nop		                NOP
.39114d	ea		nop		                NOP
.39114e	ea		nop		                NOP
.39114f	ea		nop		                NOP
.391150	e0 00 00	cpx #$0000	                CPX #$0000
.391153	d0 f2		bne $391147	                BNE DLY_LOOP1
.391155	20 bc 11	jsr $3911bc	                JSR Poll_Outbuf ;
.391158	af 60 10 af	lda $af1060	                LDA KBD_OUT_BUF   ; Read Output Buffer
.39115c					DO_CMD_F4_AGAIN
.39115c	20 b1 11	jsr $3911b1	                JSR Poll_Inbuf ;
.39115f	a9 f4		lda #$f4					        LDA #$F4			; Enable the Keyboard
.391161	8f 60 10 af	sta $af1060					        STA KBD_DATA_BUF
.391165	20 bc 11	jsr $3911bc	                JSR Poll_Outbuf ;
.391168	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		; Clear the Output buffer
.39116c	c9 fa		cmp #$fa	                CMP #$FA
.39116e	d0 ec		bne $39115c	                BNE DO_CMD_F4_AGAIN
.391170	20 c7 11	jsr $3911c7	                JSR INIT_MOUSE
.391173	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0  ; Read the Pending Register &
.391177	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.391179	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0  ; Writing it back will clear the Active Bit
.39117d	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1  ; Read the Pending Register &
.391181	29 01		and #$01	                AND #FNX1_INT00_KBD
.391183	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1  ; Writing it back will clear the Active Bit
.391187	af 4d 01 00	lda $00014d	                LDA @lINT_MASK_REG1
.39118b	29 fe		and #$fe	                AND #~FNX1_INT00_KBD
.39118d	8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.391191	af 4c 01 00	lda $00014c	                LDA @lINT_MASK_REG0
.391195	29 7f		and #$7f	                AND #~FNX0_INT07_MOUSE
.391197	8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.39119b	a2 c1 70	ldx #$70c1	                LDX #<>Success_kb_init
.39119e	38		sec		                SEC
.39119f	b0 03		bcs $3911a4	                BCS InitSuccess
.3911a1	a2 d3 70	ldx #$70d3	initkb_loop_out LDX #<>Failed_kb_init
.3911a4	22 7e 07 39	jsl $39077e	InitSuccess     JSL IPRINT       ; print Message
.3911a8	c2 20		rep #$20	                REP #$20        ; set A long
.3911aa	c2 10		rep #$10	                REP #$10        ; set X long
.3911ac	fa		plx		                PLX
.3911ad	68		pla		                PLA
.3911ae	28		plp						        PLP
.3911af	2b		pld						        PLD
.3911b0	6b		rtl		                RTL
.3911b1					Poll_Inbuf
.3911b1	af 64 10 af	lda $af1064	                LDA STATUS_PORT		; Load Status Byte
.3911b5	29 02		and #$02					        AND	#<INPT_BUF_FULL	; Test bit $02 (if 0, Empty)
.3911b7	c9 02		cmp #$02					        CMP #<INPT_BUF_FULL
.3911b9	f0 f6		beq $3911b1					        BEQ Poll_Inbuf
.3911bb	60		rts		                RTS
.3911bc					Poll_Outbuf
.3911bc	af 64 10 af	lda $af1064	                LDA STATUS_PORT
.3911c0	29 01		and #$01	                AND #OUT_BUF_FULL ; Test bit $01 (if 1, Full)
.3911c2	c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.3911c4	d0 f6		bne $3911bc	                BNE Poll_Outbuf
.3911c6	60		rts		                RTS
.3911c7					INIT_MOUSE
.3911c7	20 b1 11	jsr $3911b1	                JSR Poll_Inbuf
.3911ca	a9 a8		lda #$a8	                LDA #$A8          ; Enable the second PS2 Channel
.3911cc	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.3911d0					DO_CMD_A9_AGAIN
.3911d0	20 b1 11	jsr $3911b1	                JSR Poll_Inbuf
.3911d3	a9 a9		lda #$a9	                LDA #$A9          ; Tests second PS2 Channel
.3911d5	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.3911d9	20 bc 11	jsr $3911bc	                JSR Poll_Outbuf ;
.3911dc	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		; Clear the Output buffer
.3911e0	c9 00		cmp #$00	                CMP #$00
.3911e2	d0 ec		bne $3911d0	                BNE DO_CMD_A9_AGAIN
.3911e4	20 b1 11	jsr $3911b1	                JSR Poll_Inbuf
.3911e7	a9 20		lda #$20	                LDA #$20
.3911e9	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.3911ed	20 bc 11	jsr $3911bc	                JSR Poll_Outbuf ;
.3911f0	af 60 10 af	lda $af1060	                LDA KBD_OUT_BUF
.3911f4	09 02		ora #$02	                ORA #$02
.3911f6	48		pha		                PHA
.3911f7	20 b1 11	jsr $3911b1	                JSR Poll_Inbuf
.3911fa	a9 60		lda #$60	                LDA #$60
.3911fc	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.391200	20 b1 11	jsr $3911b1	                JSR Poll_Inbuf ;
.391203	68		pla		                PLA
.391204	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.391208	a9 f6		lda #$f6	                LDA #$F6        ;Tell the mouse to use default settings
.39120a	20 2d 12	jsr $39122d	                JSR MOUSE_WRITE
.39120d	20 40 12	jsr $391240	                JSR MOUSE_READ
.391210	a9 e8		lda #$e8	                LDA #$E8
.391212	20 2d 12	jsr $39122d	                JSR MOUSE_WRITE
.391215	20 40 12	jsr $391240	                JSR MOUSE_READ
.391218	a9 00		lda #$00	                LDA #$00
.39121a	20 2d 12	jsr $39122d	                JSR MOUSE_WRITE
.39121d	20 40 12	jsr $391240	                JSR MOUSE_READ
.391220	a9 f4		lda #$f4	                LDA #$F4        ; Enable the Mouse
.391222	20 2d 12	jsr $39122d	                JSR MOUSE_WRITE
.391225	20 40 12	jsr $391240	                JSR MOUSE_READ
.391228	a9 00		lda #$00	                LDA #$00
.39122a	85 e0		sta $e0		                STA MOUSE_PTR
.39122c	60		rts		                RTS
.39122d					MOUSE_WRITE
.39122d	48		pha		                PHA
.39122e	20 b1 11	jsr $3911b1	                JSR Poll_Inbuf
.391231	a9 d4		lda #$d4	                LDA #$D4
.391233	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.391237	20 b1 11	jsr $3911b1	                JSR Poll_Inbuf
.39123a	68		pla		                PLA
.39123b	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.39123f	60		rts		                RTS
.391240					MOUSE_READ
.391240	20 bc 11	jsr $3911bc	                JSR Poll_Outbuf ;
.391243	af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF
.391247	60		rts		                RTS
.391248	48		pha		INITRTC         PHA
.391249	08		php		                PHP
.39124a	e2 20		sep #$20	                SEP #$20        ; set A short
.39124c	a9 00		lda #$00	                LDA #0
.39124e	8f 0b 08 af	sta $af080b	                STA @l RTC_RATES    ; Set watch dog timer and periodic interrupt rates to 0
.391252	8f 0c 08 af	sta $af080c	                STA @l RTC_ENABLE   ; Disable all the alarms and interrupts
.391256	af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL      ; Make sure the RTC will continue to tick in battery mode
.39125a	09 04		ora #$04	                ORA #%00000100
.39125c	8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.391260	28		plp		                PLP
.391261	68		pla		                PLA
.391262	6b		rtl		                RTL
.391263					ITESTSID
.391263	a9 0f		lda #$0f	                LDA #$0F
.391265	8f 18 e4 af	sta $afe418	                STA SID0_MODE_VOL
.391269	a9 be		lda #$be	                LDA #$BE
.39126b	8f 05 e4 af	sta $afe405	                STA SID0_V1_ATCK_DECY
.39126f	a9 f8		lda #$f8	                LDA #$F8
.391271	8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.391275	a9 11		lda #$11	                LDA #$11
.391277	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.39127b	a9 25		lda #$25	                LDA #$25
.39127d	8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.391281	a9 11		lda #$11	                LDA #$11
.391283	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL
.391287	a9 08		lda #$08	                LDA #$08
.391289	8f 03 e4 af	sta $afe403	                STA SID0_V1_PW_HI   ;G1
.39128d	a9 00		lda #$00	                LDA #$00
.39128f	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.391293	a9 c6		lda #$c6	                LDA #$C6
.391295	8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.391299	a9 08		lda #$08	                LDA #$08
.39129b	8f 0a e4 af	sta $afe40a	                STA SID0_V2_PW_HI   ;G1
.39129f	a9 00		lda #$00	                LDA #$00
.3912a1	8f 08 e4 af	sta $afe408	                STA SID0_V2_FREQ_HI
.3912a5	a9 08		lda #$08	                LDA #$08
.3912a7	8f 0c e4 af	sta $afe40c	                STA SID0_V2_ATCK_DECY
.3912ab	a9 c6		lda #$c6	                LDA #$C6
.3912ad	8f 0d e4 af	sta $afe40d	                STA SID0_V2_SSTN_RLSE
.3912b1	a9 08		lda #$08	                LDA #$08
.3912b3	8f 11 e4 af	sta $afe411	                STA SID0_V3_PW_HI   ;G1
.3912b7	a9 00		lda #$00	                LDA #$00
.3912b9	8f 0f e4 af	sta $afe40f	                STA SID0_V3_FREQ_HI
.3912bd	a9 08		lda #$08	                LDA #$08
.3912bf	8f 13 e4 af	sta $afe413	                STA SID0_V3_ATCK_DECY
.3912c3	a9 c6		lda #$c6	                LDA #$C6
.3912c5	8f 14 e4 af	sta $afe414	                STA SID0_V3_SSTN_RLSE
.3912c9	a9 36		lda #$36	                LDA #$36              ;Left Side (Rev A of Board)
.3912cb	8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.3912cf	a9 01		lda #$01	                LDA #$01
.3912d1	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI   ;G1
.3912d5	a9 00		lda #$00	                LDA #$00              ;Left Side (Rev A of Board)
.3912d7	8f 02 e4 af	sta $afe402	                STA SID0_V1_PW_LO
.3912db	a9 08		lda #$08	                LDA #$08
.3912dd	8f 03 e4 af	sta $afe403	                STA SID0_V1_PW_HI   ;G1
.3912e1	a9 08		lda #$08	                LDA #$08
.3912e3	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL    ; Reset
.3912e7	a9 0c		lda #$0c	                LDA #$0C
.3912e9	8f 07 e4 af	sta $afe407	                STA SID0_V2_FREQ_LO
.3912ed	a9 04		lda #$04	                LDA #$04
.3912ef	8f 08 e4 af	sta $afe408	                STA SID0_V2_FREQ_HI   ;B1
.3912f3	a9 00		lda #$00	                LDA #$00              ;Left Side (Rev A of Board)
.3912f5	8f 09 e4 af	sta $afe409	                STA SID0_V2_PW_LO
.3912f9	a9 08		lda #$08	                LDA #$08
.3912fb	8f 0a e4 af	sta $afe40a	                STA SID0_V2_PW_HI   ;G1
.3912ff	a9 08		lda #$08	                LDA #$08
.391301	8f 0b e4 af	sta $afe40b	                STA SID0_V2_CTRL    ; Reset
.391305	a9 00		lda #$00	                LDA #$00
.391307	8f 0e e4 af	sta $afe40e	                STA SID0_V3_FREQ_LO
.39130b	a9 08		lda #$08	                LDA #$08
.39130d	8f 0f e4 af	sta $afe40f	                STA SID0_V3_FREQ_HI   ;D
.391311	a9 00		lda #$00	                LDA #$00              ;Left Side (Rev A of Board)
.391313	8f 10 e4 af	sta $afe410	                STA SID0_V3_PW_LO
.391317	a9 08		lda #$08	                LDA #$08
.391319	8f 11 e4 af	sta $afe411	                STA SID0_V3_PW_HI   ;G1
.39131d	a9 08		lda #$08	                LDA #$08
.39131f	8f 12 e4 af	sta $afe412	                STA SID0_V3_CTRL    ; Reset
.391323	a9 10		lda #$10	                LDA #$10
.391325	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL    ; Triangle
.391329	8f 0b e4 af	sta $afe40b	                STA SID0_V2_CTRL    ; Triangle
.39132d	8f 12 e4 af	sta $afe412	                STA SID0_V3_CTRL    ; Triangle
.391331	6b		rtl		                RTL
.391332	48		pha		IINITCODEC      PHA
.391333	c2 20		rep #$20	                REP #$20        ; set A long
.391335	a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R13 - Turn On Headphones
.391338	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39133c	a9 01 00	lda #$0001	                LDA #$0001
.39133f	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391343	20 c2 13	jsr $3913c2	                JSR CODEC_TRF_FINISHED
.391346	a9 0f 2a	lda #$2a0f	                LDA #%0010101000001111       ;R21 - Enable All the Analog In
.391349	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39134d	a9 01 00	lda #$0001	                LDA #$0001
.391350	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391354	20 c2 13	jsr $3913c2	                JSR CODEC_TRF_FINISHED
.391357	a9 01 23	lda #$2301	                LDA #%0010001100000001      ;R17 - Enable All the Analog In
.39135a	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39135e	a9 01 00	lda #$0001	                LDA #$0001
.391361	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391365	20 c2 13	jsr $3913c2	                JSR CODEC_TRF_FINISHED
.391368	a9 07 2c	lda #$2c07	                LDA #%0010110000000111      ;R22 - Enable all Analog Out
.39136b	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39136f	a9 01 00	lda #$0001	                LDA #$0001
.391372	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391376	20 c2 13	jsr $3913c2	                JSR CODEC_TRF_FINISHED
.391379	a9 02 14	lda #$1402	                LDA #%0001010000000010      ;R10 - DAC Interface Control
.39137c	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391380	a9 01 00	lda #$0001	                LDA #$0001
.391383	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391387	20 c2 13	jsr $3913c2	                JSR CODEC_TRF_FINISHED
.39138a	a9 02 16	lda #$1602	                LDA #%0001011000000010      ;R11 - ADC Interface Control
.39138d	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391391	a9 01 00	lda #$0001	                LDA #$0001
.391394	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391398	20 c2 13	jsr $3913c2	                JSR CODEC_TRF_FINISHED
.39139b	a9 d5 19	lda #$19d5	                LDA #%0001100111010101      ;R12 - Master Mode Control
.39139e	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.3913a2	a9 01 00	lda #$0001	                LDA #$0001
.3913a5	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.3913a9	20 c2 13	jsr $3913c2	                JSR CODEC_TRF_FINISHED
.3913ac	68		pla		                PLA
.3913ad	6b		rtl		                RTL
.3913ae					IRESETCODEC
.3913ae	c2 20		rep #$20	                REP #$20        ; set A long
.3913b0	a9 00 2e	lda #$2e00	                LDA #$2E00      ;R22 - Enable all Analog Out
.3913b3	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.3913b7	a9 01 00	lda #$0001	                LDA #$0001
.3913ba	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.3913be	20 c2 13	jsr $3913c2	                JSR CODEC_TRF_FINISHED
.3913c1	6b		rtl		                RTL
.3913c2					CODEC_TRF_FINISHED
.3913c2	e2 20		sep #$20	                SEP #$20        ; set A short
.3913c4	af 02 e9 af	lda $afe902	CODEC_LOOP      LDA CODEC_WR_CTRL
.3913c8	29 01		and #$01	                AND #$01
.3913ca	c9 01		cmp #$01	                CMP #$01
.3913cc	f0 f6		beq $3913c4	                BEQ CODEC_LOOP
.3913ce	c2 20		rep #$20	                REP #$20        ; set A long
.3913d0	60		rts		                RTS
.3913d1					IBM_FILL_SCREEN
.3913d1	c2 30		rep #$30	                REP #$30        ; set A&X long
.3913d3	a9 00 00	lda #$0000	                LDA #$0000
.3913d6	a2 00 00	ldx #$0000	                LDX #$0000
.3913d9					BM_FILL_SCREEN_LOOPY
.3913d9	a0 00 00	ldy #$0000	                LDY #$0000
.3913dc	e2 20		sep #$20	                SEP #$20        ; set A short
.3913de					BM_FILL_SCREEN_LOOPX
.3913de	97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.3913e0	c8		iny		                INY
.3913e1	c4 40		cpy $40		                CPY BM_CLEAR_SCRN_X              ; Transfer the First line
.3913e3	d0 f9		bne $3913de	                BNE BM_FILL_SCREEN_LOOPX
.3913e5	20 f0 13	jsr $3913f0	                JSR BM_FILL_COMPUTE_Y_DST
.3913e8	e8		inx		                INX
.3913e9	e4 42		cpx $42		                CPX BM_CLEAR_SCRN_Y
.3913eb	d0 ec		bne $3913d9	                BNE BM_FILL_SCREEN_LOOPY
.3913ed	c2 30		rep #$30	                REP #$30        ; set A&X long
.3913ef	6b		rtl		                RTL
.3913f0					BM_FILL_COMPUTE_Y_DST
.3913f0	c2 20		rep #$20	                REP #$20        ; set A long
.3913f2	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR        ; Right now it is set @ $020000 (128K) + File Size
.3913f4	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3913f8	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2      ; Right now it is set @ $020000 (128K)
.3913fa	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.3913fe	a9 80 02	lda #$0280	                LDA #$280        ; Right now it is set @ $020000 (128K) + File Size
.391401	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.391405	a9 00 00	lda #$0000	                LDA #$0000
.391408	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.39140c	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.391410	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.391412	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.391416	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.391418	a9 00 00	lda #$0000	                LDA #$0000
.39141b	60		rts		                RTS
.39141c					IBMP_PARSER
.39141c	c2 30		rep #$30	                REP #$30        ; set A&X long
.39141e	a0 00 00	ldy #$0000	                LDY #$0000
.391421	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y
.391423	c9 42 4d	cmp #$4d42	                CMP #$4D42
.391426	f0 03		beq $39142b	                BEQ IBMP_PARSER_CONT
.391428	82 04 01	brl $39152f	                BRL BMP_PARSER_END_WITH_ERROR
.39142b					IBMP_PARSER_CONT
.39142b	a0 02 00	ldy #$0002	                LDY #$0002
.39142e	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size Low Short
.391430	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.391434	a0 04 00	ldy #$0004	                LDY #$0004
.391437	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size High Short
.391439	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.39143d	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Store -1 in Adder (B)
.391440	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.391444	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.391448	18		clc		                CLC
.391449	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.39144d	85 50		sta $50		                STA BMP_FILE_SIZE
.39144f	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.391453	85 52		sta $52		                STA BMP_FILE_SIZE+2
.391455	a0 12 00	ldy #$0012	                LDY #$0012
.391458	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.39145a	85 40		sta $40		                STA BMP_X_SIZE
.39145c	a0 16 00	ldy #$0016	                LDY #$0016
.39145f	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.391461	85 42		sta $42		                STA BMP_Y_SIZE
.391463	a0 2e 00	ldy #$002e	                LDY #$002E
.391466	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.391468	0a		asl a		                ASL A; Multiply by 2
.391469	0a		asl a		                ASL A; Multiply by 2
.39146a	85 4c		sta $4c		                STA BMP_COLOR_PALET         ;
.39146c	e0 00 00	cpx #$0000	                CPX #$0000
.39146f	d0 05		bne $391476	                BNE BMP_LUT1_PICK
.391471	20 37 15	jsr $391537	                JSR BMP_PARSER_UPDATE_LUT0   ; Go Upload the LUT0
.391474	80 08		bra $39147e	                BRA DONE_TRANSFER_LUT;
.391476					  BMP_LUT1_PICK
.391476	e0 01 00	cpx #$0001	                CPX #$0001
.391479	d0 03		bne $39147e	                BNE BMP_LUT2_PICK
.39147b	20 67 15	jsr $391567	                JSR BMP_PARSER_UPDATE_LUT1   ; Go Upload the LUT1
.39147e					  BMP_LUT2_PICK
.39147e					  DONE_TRANSFER_LUT
.39147e	a5 56		lda $56		                LDA BMP_POSITION_Y
.391480	8f 00 01 00	sta $000100	                STA @lUNSIGNED_MULT_A_LO
.391484	a5 4e		lda $4e		                LDA SCRN_X_STRIDE
.391486	8f 02 01 00	sta $000102	                STA @lUNSIGNED_MULT_B_LO
.39148a	af 04 01 00	lda $000104	                LDA @lUNSIGNED_MULT_AL_LO
.39148e	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.391492	af 06 01 00	lda $000106	                LDA @lUNSIGNED_MULT_AL_LO+2
.391496	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.39149a	a5 54		lda $54		                LDA BMP_POSITION_X
.39149c	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Put the X Position Adder (B)
.3914a0	a9 00 00	lda #$0000	                LDA #$0000
.3914a3	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.3914a7	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in TEMP
.3914ab	85 f0		sta $f0		                STA USER_TEMP
.3914ad	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in TEMP
.3914b1	85 f2		sta $f2		                STA USER_TEMP+2
.3914b3	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.3914b5	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.3914b9	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.3914bb	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.3914bf	a5 f0		lda $f0		                LDA USER_TEMP
.3914c1	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store in 32Bit Adder (B)
.3914c5	a5 f2		lda $f2		                LDA USER_TEMP+2
.3914c7	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in 32Bit Adder (B)
.3914cb	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in BMP_PRSE_DST_PTR
.3914cf	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.3914d1	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in BMP_PRSE_DST_PTR
.3914d5	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.3914d7	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K)
.3914d9	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3914dd	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2        ; Right now it is set @ $020000 (128K)
.3914df	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.3914e3	a5 50		lda $50		                LDA BMP_FILE_SIZE
.3914e5	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.3914e9	a5 52		lda $52		                LDA BMP_FILE_SIZE+2
.3914eb	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.3914ef	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.3914f3	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.3914f5	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.3914f9	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.3914fb	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.3914fd	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.391501	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.391503	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.391507	18		clc		                CLC
.391508	a5 40		lda $40		                LDA BMP_X_SIZE              ; Load The Size in X of the image and Make it negative
.39150a	49 ff ff	eor #$ffff	                EOR #$FFFF                  ; Inverse all bit
.39150d	69 01 00	adc #$0001	                ADC #$0001                  ; Add 0 ()
.391510	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store the Results in reg B of ADDER32
.391514	a9 ff ff	lda #$ffff	                LDA #$FFFF
.391517	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in the Reminder of the 32Bits B Register
.39151b	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.39151f	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.391521	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.391525	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.391527	20 97 15	jsr $391597	                JSR BMP_PARSER_DMA_SHIT_OUT  ; We are going to start with the slow method
.39152a	a2 0f 71	ldx #$710f	                LDX #<>bmp_parser_msg0
.39152d	80 03		bra $391532	                BRA BMP_PARSER_END_NO_ERROR
.39152f					BMP_PARSER_END_WITH_ERROR
.39152f	a2 fb 70	ldx #$70fb	                LDX #<>bmp_parser_err0
.391532					BMP_PARSER_END_NO_ERROR
.391532	22 7e 07 39	jsl $39077e	                JSL IPRINT       ; print the first line
.391536	6b		rtl		                RTL
.391537					BMP_PARSER_UPDATE_LUT0
.391537	38		sec		                SEC
.391538	a0 7a 00	ldy #$007a	                LDY #$007A
.39153b	a2 00 00	ldx #$0000	                LDX #$0000
.39153e	e2 20		sep #$20	                SEP #$20        ; set A short
.391540					BMP_PARSER_UPDATE_LOOP
.391540	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.391542	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR+0, X      ; The look-up Table point to a pixel Blue
.391546	c8		iny		                INY
.391547	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.391549	9f 01 20 af	sta $af2001,x	                STA @lGRPH_LUT0_PTR+1, X      ; The look-up Table point to a pixel Blue
.39154d	c8		iny		                INY
.39154e	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.391550	9f 02 20 af	sta $af2002,x	                STA @lGRPH_LUT0_PTR+2, X      ; The look-up Table point to a pixel Blue
.391554	c8		iny		                INY
.391555	a9 80		lda #$80	                LDA #$80
.391557	9f 03 20 af	sta $af2003,x	                STA @lGRPH_LUT0_PTR+3, X      ; The look-up Table point to a pixel Blue
.39155b	c8		iny		                INY ; For the Alpha Value, nobody cares
.39155c	e8		inx		                INX
.39155d	e8		inx		                INX
.39155e	e8		inx		                INX
.39155f	e8		inx		                INX
.391560	e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.391562	d0 dc		bne $391540	                BNE BMP_PARSER_UPDATE_LOOP
.391564	c2 20		rep #$20	                REP #$20        ; set A long
.391566	60		rts		                RTS
.391567					BMP_PARSER_UPDATE_LUT1
.391567	38		sec		                SEC
.391568	a0 36 00	ldy #$0036	                LDY #$0036
.39156b	a2 00 00	ldx #$0000	                LDX #$0000
.39156e	e2 20		sep #$20	                SEP #$20        ; set A short
.391570					PALETTE_LUT1_LOOP
.391570	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.391572	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR+0, X      ; The look-up Table point to a pixel Blue
.391576	c8		iny		                INY
.391577	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.391579	9f 01 24 af	sta $af2401,x	                STA @lGRPH_LUT1_PTR+1, X      ; The look-up Table point to a pixel Blue
.39157d	c8		iny		                INY
.39157e	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.391580	9f 02 24 af	sta $af2402,x	                STA @lGRPH_LUT1_PTR+2, X      ; The look-up Table point to a pixel Blue
.391584	c8		iny		                INY
.391585	a9 80		lda #$80	                LDA #$80
.391587	9f 03 24 af	sta $af2403,x	                STA @lGRPH_LUT1_PTR+3, X      ; The look-up Table point to a pixel Blue
.39158b	c8		iny		                INY ; For the Alpha Value, nobody cares
.39158c	e8		inx		                INX
.39158d	e8		inx		                INX
.39158e	e8		inx		                INX
.39158f	e8		inx		                INX
.391590	e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.391592	d0 dc		bne $391570	                BNE PALETTE_LUT1_LOOP
.391594	c2 20		rep #$20	                REP #$20        ; set A long
.391596	60		rts		                RTS
.391597					BMP_PARSER_DMA_SHIT_OUT
.391597	a2 00 00	ldx #$0000	                LDX #$0000
.39159a					BMP_PARSER_LOOPY
.39159a	a0 00 00	ldy #$0000	                LDY #$0000
.39159d	e2 20		sep #$20	                SEP #$20        ; set A short
.39159f					BMP_PARSER_LOOPX
.39159f	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Load First Pixel Y (will be linear)
.3915a1	97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.3915a3	c8		iny		                INY
.3915a4	c4 40		cpy $40		                CPY BMP_X_SIZE              ; Transfer the First line
.3915a6	d0 f7		bne $39159f	                BNE BMP_PARSER_LOOPX
.3915a8	20 b4 15	jsr $3915b4	                JSR BMP_PARSER_COMPUTE_Y_SRC
.3915ab	20 cf 15	jsr $3915cf	                JSR BMP_PARSER_COMPUTE_Y_DST
.3915ae	e8		inx		                INX
.3915af	e4 42		cpx $42		                CPX BMP_Y_SIZE
.3915b1	d0 e7		bne $39159a	                BNE BMP_PARSER_LOOPY
.3915b3	60		rts		                RTS
.3915b4					BMP_PARSER_COMPUTE_Y_SRC
.3915b4	c2 20		rep #$20	                REP #$20        ; set A long
.3915b6	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.3915b8	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3915bc	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.3915be	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.3915c2	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.3915c6	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.3915c8	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.3915cc	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.3915ce	60		rts		                RTS
.3915cf					BMP_PARSER_COMPUTE_Y_DST
.3915cf	c2 20		rep #$20	                REP #$20        ; set A long
.3915d1	18		clc		                CLC
.3915d2	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.3915d4	65 4e		adc $4e		                ADC SCRN_X_STRIDE        ; In Normal Circumstances, it is 640
.3915d6	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.3915d8	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.3915da	69 00 00	adc #$0000	                ADC #$0000
.3915dd	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.3915df	60		rts		                RTS
.3915e0	ea		nop		ILOOP           NOP
.3915e1	ea		nop		                NOP
.3915e2	ea		nop		                NOP
.3915e3	ea		nop		                NOP
.3915e4	ea		nop		                NOP
.3915e5	ea		nop		                NOP
.3915e6	ea		nop		                NOP
.3915e7	ea		nop		                NOP
.3915e8	ea		nop		                NOP
.3915e9	ea		nop		                NOP
.3915ea	6b		rtl		                RTL
.3915eb	22 e0 15 39	jsl $3915e0	ILOOP_1         JSL ILOOP
.3915ef	22 e0 15 39	jsl $3915e0	                JSL ILOOP
.3915f3	22 e0 15 39	jsl $3915e0	                JSL ILOOP
.3915f7	22 e0 15 39	jsl $3915e0	                JSL ILOOP
.3915fb	22 e0 15 39	jsl $3915e0	                JSL ILOOP
.3915ff	22 e0 15 39	jsl $3915e0	                JSL ILOOP
.391603	22 e0 15 39	jsl $3915e0	                JSL ILOOP
.391607	22 e0 15 39	jsl $3915e0	                JSL ILOOP
.39160b	22 e0 15 39	jsl $3915e0	                JSL ILOOP
.39160f	22 e0 15 39	jsl $3915e0	                JSL ILOOP
.391613	6b		rtl		                RTL
.391614	22 eb 15 39	jsl $3915eb	ILOOP_1MS       JSL ILOOP_1
.391618	6b		rtl		                RTL
.391619	e0 00 00	cpx #$0000	ILOOP_MS        CPX #0
.39161c	f0 07		beq $391625	                BEQ LOOP_MS_END
.39161e	22 14 16 39	jsl $391614	                JSL ILOOP_1MS
.391622	ca		dex		                DEX
.391623	80 f4		bra $391619	                BRA ILOOP_MS
.391625	6b		rtl		LOOP_MS_END     RTL
.391626					IDELAY
.391626	8b		phb		                PHB
.391627	08		php		                PHP
.391628	48		pha		                PHA             ; begin setdbr macro
.391629	08		php		                PHP
.39162a	e2 20		sep #$20	                SEP #$20        ; set A short
.39162c	a9 00		lda #$00	                LDA #0
.39162e	48		pha		                PHA
.39162f	ab		plb		                PLB
.391630	28		plp		                PLP
.391631	68		pla		                PLA             ; end setdbr macro
.391632	e2 20		sep #$20	                SEP #$20        ; set A short
.391634	a9 00		lda #$00	                LDA #0                      ; Stop the timer if it's running
.391636	8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.39163a	af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Enable Timer 0 Interrupts
.39163e	29 fb		and #$fb	                AND #~FNX0_INT02_TMR0
.391640	8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.391644	a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.391646	8d 05 07	sta $0705	                STA @w TIMERFLAGS
.391649	a9 00		lda #$00	                LDA #0
.39164b	8f 61 01 00	sta $000161	                STA @l TIMER0_CHARGE_L      ; Clear the comparator for count-down
.39164f	8f 62 01 00	sta $000162	                STA @l TIMER0_CHARGE_M
.391653	8f 63 01 00	sta $000163	                STA @l TIMER0_CHARGE_H
.391657	c2 30		rep #$30	                REP #$30        ; set A&X long
.391659	8a		txa		                TXA
.39165a	8f 65 01 00	sta $000165	                STA @l TIMER0_CMP_L         ; Set the number of ticks
.39165e	98		tya		                TYA
.39165f	e2 20		sep #$20	                SEP #$20        ; set A short
.391661	8f 67 01 00	sta $000167	                STA @l TIMER0_CMP_H
.391665	a9 09		lda #$09	                LDA #TMR0_EN | TMR0_UPDWN   ; Enable the timer to count up
.391667	8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.39166b	a9 80		lda #$80	                LDA #TIMER0TRIGGER          ; Timer zero's trigger flag
.39166d	cb		wai		loop            WAI                         ; Wait for an interrupt
.39166e	1c 05 07	trb $0705	                TRB @w TIMERFLAGS           ; Check for the flag
.391671	f0 fa		beq $39166d	                BEQ loop                    ; Keep checking until it's set
.391673	a9 00		lda #$00	                LDA #0                      ; Stop the timer
.391675	8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.391679	a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.39167b	8d 05 07	sta $0705	                STA @w TIMERFLAGS
.39167e	af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Disable Timer 0 Interrupts
.391682	09 04		ora #$04	                ORA #FNX0_INT02_TMR0
.391684	8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.391688	28		plp		                PLP
.391689	ab		plb		                PLB
.39168a	6b		rtl		                RTL
.39168b					SHOW_CREDITS
.39168b	48		pha		                PHA
.39168c	da		phx		                PHX
.39168d	5a		phy		                PHY
.39168e	08		php		                PHP
.39168f	e2 20		sep #$20	                SEP #$20        ; set A short
.391691	c2 10		rep #$10	                REP #$10        ; set X long
.391693	af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Disable the cursor
.391697	29 fe		and #$fe	                AND #~Vky_Cursor_Enable
.391699	8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.39169d	a2 00 00	ldx #$0000	                LDX #0
.3916a0	bf 00 00 3b	lda $3b0000,x	credit_loop     LDA @lCREDITS_TEXT,X            ; Copy a byte of text
.3916a4	9f 00 a0 af	sta $afa000,x	                STA @lCS_TEXT_MEM_PTR,X
.3916a8	bf 00 20 3b	lda $3b2000,x	                LDA @lCREDITS_COLOR,X           ; Copy a byte of color
.3916ac	9f 00 c0 af	sta $afc000,x	                STA @lCS_COLOR_MEM_PTR,X
.3916b0	e8		inx		                INX
.3916b1	e0 00 20	cpx #$2000	                CPX #128 * 64
.3916b4	d0 ea		bne $3916a0	                BNE credit_loop
.3916b6	22 21 07 39	jsl $390721	                JSL IGETCHW                     ; Wait for a keypress
.3916ba	22 42 0b 39	jsl $390b42	                JSL ICLRSCREEN                  ; Then clear the screen and return
.3916be	22 66 09 39	jsl $390966	                JSL ICSRHOME                    ; Move cursor to the home position
.3916c2	af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Enable the cursor
.3916c6	09 01		ora #$01	                ORA #Vky_Cursor_Enable
.3916c8	8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.3916cc	28		plp		                PLP
.3916cd	7a		ply		                PLY
.3916ce	fa		plx		                PLX
.3916cf	68		pla		                PLA
.3916d0	6b		rtl		                RTL
.3916d1	00		brk #		IRESTORE        BRK ; Warm boot routine
.3916d2	00		brk #		ISCINIT         BRK ;
.3916d3	00		brk #		IIOINIT         BRK ;
.3916d4	00		brk #		ISETLFS         BRK ; Obsolete (done in OPEN)
.3916d5	00		brk #		ISETNAM         BRK ; Obsolete (done in OPEN)
.3916d6	00		brk #		IOPEN           BRK ; Open a channel for reading and/or writing. Use SETLFS and SETNAM to set the channels and filename first.
.3916d7	00		brk #		ICLOSE          BRK ; Close a channel
.3916d8	00		brk #		IGETB           BRK ; Get a byte from input channel. Return 0 if no input. Carry is set if no input.
.3916d9	00		brk #		IGETS           BRK ; Get a string from the input channel. NULL terminates
.3916da	00		brk #		IGETLINE        BRK ; Get a line of text from input channel. CR or NULL terminates.
.3916db	00		brk #		IGETFIELD       BRK ; Get a field from the input channel. Value in A, CR, or NULL terminates
.3916dc	00		brk #		ITRIM           BRK ; Removes spaces at beginning and end of string.
.3916dd	00		brk #		IPRINTC         BRK ; Print character to screen. Handles terminal commands
.3916de	00		brk #		IPRINTS         BRK ; Print string to screen. Handles terminal commands
.3916df	00		brk #		IPRINTF         BRK ; Print a float value
.3916e0	00		brk #		IPRINTI         BRK ; Prints integer value in TEMP
.3916e1	00		brk #		IPRINTAI        BRK ; Prints integer value in A
.3916e2	00		brk #		IPUSHKEY        BRK ;
.3916e3	00		brk #		IPUSHKEYS       BRK ;
.3916e4	00		brk #		ISCRREADLINE    BRK ; Loads the MCMDADDR/BCMDADDR variable with the address of the current line on the screen. This is called when the RETURN key is pressed and is the first step in processing an immediate mode command.
.3916e5	00		brk #		ISCRGETWORD     BRK ; Read a current word on the screen. A word ends with a space, punctuation (except _), or any control character (value < 32). Loads the address into CMPTEXT_VAL and length into CMPTEXT_LEN variables.
.3916e6	6b		rtl		ITIMER0INTSUB   RTL;
.3916e7	6b		rtl		ITIMER1INTSUB   RTL;
.3916e8	6b		rtl		ITIMER2INTSUB   RTL;

;******  Processing file: src\OPL2_Library.asm


;******  Processing file: src\OPL3_def.asm

=$afe600				OPL3_R_BASE               = $AFE600
=$e600					OPL3_R_BASE_LL            = $E600
=$00af					OPL3_R_BASE_HL            = $00AF
=$afe601				OPL3_R_TEST               = $AFE601 ; TEST
=$afe602				OPL3_R_TIMER1             = $AFE602 ; TIMER-1
=$afe603				OPL3_R_TIMER2             = $AFE603 ; TIMER-2
=$afe604				OPL3_R_IRQ                = $AFE604 ;
=$afe605				OPL3_R_OPL3_MODE          = $AFE605 ; Set bit 0 to 1 if you want to use in OPL3 Mode
=$afe608				OPL3_R_CSM                = $AFE608 ;
=$afe620				OPL3_R_AM_VID_EG_KSR_MULT = $AFE620 ; $40..$35 (21 Registers)
=$afe640				OPL3_R_KSL_TL             = $AFE640;  $40..$55 (21 Registers)
=$afe660				OPL3_R_AR_DR              = $AFE660;  $60..$75 (21 Registers)
=$afe680				OPL3_R_SL_RR              = $AFE680;  $80..$95 (21 Registers)
=$afe6a0				OPL3_R_FNumber            = $AFE6A0;  $A0..$A8
=$afe6b0				OPL3_R_KON_BLOCK_FNumber  = $AFE6B0;  $B0..$B9
=$afe6bd				OPL3_R_DPTH_RHYTM         = $AFE6BD;  $BD
=$afe6c0				OPL3_R_FEEDBACK           = $AFE6C0;  $C0..$C9
=$afe6e0				OPL3_R_WAVE_SELECT        = $AFE6E0;  $E0..$F5
=$afe700				OPL3_L_BASE               = $AFE700
=$e700					OPL3_L_BASE_LL            = $E700
=$00af					OPL3_L_BASE_HL            = $00AF
=$afe701				OPL3_L_TEST               = $AFE701 ; TEST
=$afe702				OPL3_L_TIMER1             = $AFE702 ; TIMER-1
=$afe703				OPL3_L_TIMER2             = $AFE703 ; TIMER-2
=$afe704				OPL3_L_IRQ                = $AFE704 ;
=$afe708				OPL3_L_CSM                = $AFE708 ;
=$afe720				OPL3_L_AM_VID_EG_KSR_MULT = $AFE720 ; $40..$35 (21 Registers)
=$afe740				OPL3_L_KSL_TL             = $AFE740;  $40..$55 (21 Registers)
=$afe760				OPL3_L_AR_DR              = $AFE760;  $60..$75 (21 Registers)
=$afe780				OPL3_L_SL_RR              = $AFE780;  $80..$95 (21 Registers)
=$afe7a0				OPL3_L_FNumber            = $AFE7A0;  $A0..$A8
=$afe7b0				OPL3_L_KON_BLOCK_FNumber  = $AFE7B0;  $B0..$B9
=$afe7bd				OPL3_L_DPTH_RHYTM         = $AFE7BD;  $BD
=$afe7c0				OPL3_L_FEEDBACK           = $AFE7C0;  $C0..$C9
=$afe7e0				OPL3_L_WAVE_SELECT        = $AFE7E0;  $E0..$F5
=$80					TREMOLO    = $80
=$40					VIBRATO    = $40
=$20					SUSTAINING = $20
=$10					KSR        = $10
=$0f					MULTIPLIER = $0F
=$c0					KEY_SCALE  = $C0
=$3f					OP_LEVEL   = $3F
=$f0					ATTACK_RT  = $F0
=$0f					DECAY_RT   = $0F
=$f0					SUSTAIN_RT = $F0
=$0f					RELEASE_RT = $0F
=$0e					FEEDBACK   = $0E
=$01					ALGORITHM  = $01
=9					OPL2_NUM_CHANNELS = 9
=0					OPERATOR1 = 0
=1					OPERATOR2 = 1
=0					MODULATOR = 0
=1					CARRIER = 1
=0					FREQ_MODULATION = 0
=1					ADDITIVE_SYNTH  = 1
=$10					DRUM_BASS   = $10
=$08					DRUM_SNARE  = $08
=$04					DRUM_TOM    = $04
=$02					DRUM_CYMBAL = $02
=$01					DRUM_HI_HAT = $01
=1					NOTE_CS =   1
=2					NOTE_D =    2
=3					NOTE_DS =   3
=4					NOTE_E =    4
=5					NOTE_F =    5
=6					NOTE_FS =   6
=7					NOTE_G =    7
=8					NOTE_GS =   8
=9					NOTE_A =    9
=10					NOTE_AS =  10
=11					NOTE_B =   11
=12					NOTE_C =   12
>3916e9	6b 01 81 01 98 01 b0 01		noteFNumbers    .word  $016B, $0181, $0198, $01B0, $01CA, $01E5, $0202, $0220, $0241, $0263, $0287, $02AE
>3916f1	ca 01 e5 01 02 02 20 02 41 02 63 02 87 02 ae 02
>391701	00 01 02 08 09 0a 10 11		registerOffsets_operator0 .byte $00, $01, $02, $08, $09, $0A, $10, $11, $12 ;initializers for operator 1 */
>391709	12
>39170a	03 04 05 0b 0c 0d 13 14		registerOffsets_operator1 .byte $03, $04, $05, $0B, $0C, $0D, $13, $14, $15 ;initializers for operator 2 */
>391712	15
>391713	10 13 14 12 15 11		drumOffsets               .byte $10, $13, $14, $12, $15, $11
>391719	10 08 04 02 01			drumBits                  .byte $10, $08, $04, $02, $01
>39171e	20 40 60 80 e0 c0		instrumentBaseRegs        .byte $20, $40, $60, $80, $E0, $C0

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Instruments.asm

>391724	00 24 4f f2 0b 00 0e 31		INSTRUMENT_ACCORDN    .text $00, $24, $4F, $F2, $0B, $00, $0E, $31, $00, $52, $0B, $00, 'ACCORDN   '
>39172c	00 52 0b 00 41 43 43 4f 52 44 4e 20 20 20
>39173a	00 31 43 6e 17 01 02 22		INSTRUMENT_BAGPIPE1   .text $00, $31, $43, $6E, $17, $01, $02, $22, $05, $8B, $0C, $02, 'BAGPIPE1  '
>391742	05 8b 0c 02 42 41 47 50 49 50 45 31 20 20
>391750	00 30 00 ff a0 03 00 a3		INSTRUMENT_BAGPIPE2   .text $00, $30, $00, $FF, $A0, $03, $00, $A3, $00, $65, $0B, $02, 'BAGPIPE2  '
>391758	00 65 0b 02 42 41 47 50 49 50 45 32 20 20
>391766	00 31 87 a1 11 00 08 16		INSTRUMENT_BANJO1     .text $00, $31, $87, $A1, $11, $00, $08, $16, $80, $7D, $43, $00, 'BANJO1    '
>39176e	80 7d 43 00 42 41 4e 4a 4f 31 20 20 20 20
>39177c	00 01 15 25 2f 00 0a 21		INSTRUMENT_BASS1      .text $00, $01, $15, $25, $2F, $00, $0A, $21, $80, $65, $6C, $00, 'BASS1     '
>391784	80 65 6c 00 42 41 53 53 31 20 20 20 20 20
>391792	00 01 1d f2 ef 00 0a 01		INSTRUMENT_BASS2      .text $00, $01, $1D, $F2, $EF, $00, $0A, $01, $00, $F5, $78, $00, 'BASS2     '
>39179a	00 f5 78 00 42 41 53 53 32 20 20 20 20 20
>3917a8	00 c0 6d f9 01 01 0e 41		INSTRUMENT_BASSHARP   .text $00, $C0, $6D, $F9, $01, $01, $0E, $41, $00, $F2, $73, $00, 'BASSHARP  '
>3917b0	00 f2 73 00 42 41 53 53 48 41 52 50 20 20
>3917be	00 30 c8 d5 19 00 0c 71		INSTRUMENT_BASSOON1   .text $00, $30, $C8, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'BASSOON1  '
>3917c6	80 61 1b 00 42 41 53 53 4f 4f 4e 31 20 20
>3917d4	00 c1 4f b1 53 03 06 e0		INSTRUMENT_BASSTRLG   .text $00, $C1, $4F, $B1, $53, $03, $06, $E0, $00, $12, $74, $03, 'BASSTRLG  '
>3917dc	00 12 74 03 42 41 53 53 54 52 4c 47 20 20
>3917ea	06 00 0b a8 4c 00 00 00		INSTRUMENT_BDRUM1     .text $06, $00, $0B, $A8, $4C, $00, $00, $00, $00, $00, $00, $00, 'BDRUM1    '
>3917f2	00 00 00 00 42 44 52 55 4d 31 20 20 20 20
>391800	00 64 db ff 01 00 04 3e		INSTRUMENT_BELLONG    .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F3, $62, $00, 'BELLONG   '
>391808	c0 f3 62 00 42 45 4c 4c 4f 4e 47 20 20 20
>391816	00 07 4f f2 60 00 08 12		INSTRUMENT_BELLS      .text $00, $07, $4F, $F2, $60, $00, $08, $12, $00, $F2, $72, $00, 'BELLS     '
>39181e	00 f2 72 00 42 45 4c 4c 53 20 20 20 20 20
>39182c	00 64 db ff 01 00 04 3e		INSTRUMENT_BELSHORT   .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F5, $F3, $00, 'BELSHORT  '
>391834	c0 f5 f3 00 42 45 4c 53 48 4f 52 54 20 20
>391842	00 20 4b 7b 04 01 0e 21		INSTRUMENT_BNCEBASS   .text $00, $20, $4B, $7B, $04, $01, $0E, $21, $00, $F5, $72, $00, 'BNCEBASS  '
>39184a	00 f5 72 00 42 4e 43 45 42 41 53 53 20 20
>391858	00 21 16 71 ae 00 0e 21		INSTRUMENT_BRASS1     .text $00, $21, $16, $71, $AE, $00, $0E, $21, $00, $81, $9E, $00, 'BRASS1    '
>391860	00 81 9e 00 42 52 41 53 53 31 20 20 20 20
>39186e	00 30 c5 52 11 00 00 31		INSTRUMENT_CBASSOON   .text $00, $30, $C5, $52, $11, $00, $00, $31, $80, $31, $2E, $00, 'CBASSOON  '
>391876	80 31 2e 00 43 42 41 53 53 4f 4f 4e 20 20
>391884	00 33 87 01 10 00 08 14		INSTRUMENT_CELESTA    .text $00, $33, $87, $01, $10, $00, $08, $14, $80, $7D, $33, $00, 'CELESTA   '
>39188c	80 7d 33 00 43 45 4c 45 53 54 41 20 20 20
>39189a	00 32 16 73 24 00 0e 21		INSTRUMENT_CLAR1      .text $00, $32, $16, $73, $24, $00, $0E, $21, $80, $75, $57, $00, 'CLAR1     '
>3918a2	80 75 57 00 43 4c 41 52 31 20 20 20 20 20
>3918b0	00 31 1c 41 1b 00 0c 60		INSTRUMENT_CLAR2      .text $00, $31, $1C, $41, $1B, $00, $0C, $60, $80, $42, $3B, $00, 'CLAR2     '
>3918b8	80 42 3b 00 43 4c 41 52 32 20 20 20 20 20
>3918c6	00 32 9a 51 1b 00 0c 61		INSTRUMENT_CLARINET   .text $00, $32, $9A, $51, $1B, $00, $0C, $61, $82, $A2, $3B, $00, 'CLARINET  '
>3918ce	82 a2 3b 00 43 4c 41 52 49 4e 45 54 20 20
>3918dc	00 11 0d f2 01 00 0a 15		INSTRUMENT_CLAVECIN   .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'CLAVECIN  '
>3918e4	0d f2 b1 00 43 4c 41 56 45 43 49 4e 20 20
>3918f2	00 00 02 f0 ff 00 06 11		INSTRUMENT_CROMORNE   .text $00, $00, $02, $F0, $FF, $00, $06, $11, $80, $F0, $FF, $00, 'CROMORNE  '
>3918fa	80 f0 ff 00 43 52 4f 4d 4f 52 4e 45 20 20
>391908	09 01 00 f5 b5 00 00 00		INSTRUMENT_CYMBAL1    .text $09, $01, $00, $F5, $B5, $00, $00, $00, $00, $00, $00, $00, 'CYMBAL1   '
>391910	00 00 00 00 43 59 4d 42 41 4c 31 20 20 20
>39191e	00 05 8a f0 7b 00 08 01		INSTRUMENT_ELCLAV1    .text $00, $05, $8A, $F0, $7B, $00, $08, $01, $80, $F4, $7B, $00, 'ELCLAV1   '
>391926	80 f4 7b 00 45 4c 43 4c 41 56 31 20 20 20
>391934	00 01 49 f1 53 01 06 11		INSTRUMENT_ELCLAV2    .text $00, $01, $49, $F1, $53, $01, $06, $11, $00, $F1, $74, $02, 'ELCLAV2   '
>39193c	00 f1 74 02 45 4c 43 4c 41 56 32 20 20 20
>39194a	00 e0 6d 57 04 01 0e 61		INSTRUMENT_ELECFL     .text $00, $E0, $6D, $57, $04, $01, $0E, $61, $00, $67, $7D, $00, 'ELECFL    '
>391952	00 67 7d 00 45 4c 45 43 46 4c 20 20 20 20
>391960	00 13 97 9a 12 02 0e 91		INSTRUMENT_ELECVIBE   .text $00, $13, $97, $9A, $12, $02, $0E, $91, $80, $9B, $11, $00, 'ELECVIBE  '
>391968	80 9b 11 00 45 4c 45 43 56 49 42 45 20 20
>391976	00 f1 01 97 17 00 08 21		INSTRUMENT_ELGUIT1    .text $00, $F1, $01, $97, $17, $00, $08, $21, $0D, $F1, $18, $00, 'ELGUIT1   '
>39197e	0d f1 18 00 45 4c 47 55 49 54 31 20 20 20
>39198c	00 13 96 ff 21 00 0a 11		INSTRUMENT_ELGUIT2    .text $00, $13, $96, $FF, $21, $00, $0A, $11, $80, $FF, $03, $00, 'ELGUIT2   '
>391994	80 ff 03 00 45 4c 47 55 49 54 32 20 20 20
>3919a2	00 07 8f 82 7d 00 0c 14		INSTRUMENT_ELGUIT3    .text $00, $07, $8F, $82, $7D, $00, $0C, $14, $80, $82, $7D, $00, 'ELGUIT3   '
>3919aa	80 82 7d 00 45 4c 47 55 49 54 33 20 20 20
>3919b8	00 05 8f da 15 00 0a 01		INSTRUMENT_ELGUIT4    .text $00, $05, $8F, $DA, $15, $00, $0A, $01, $80, $F9, $14, $02, 'ELGUIT4   '
>3919c0	80 f9 14 02 45 4c 47 55 49 54 34 20 20 20
>3919ce	00 b2 cd 91 2a 02 09 b1		INSTRUMENT_ELORGAN1   .text $00, $B2, $CD, $91, $2A, $02, $09, $B1, $80, $91, $2A, $01, 'ELORGAN1  '
>3919d6	80 91 2a 01 45 4c 4f 52 47 41 4e 31 20 20
>3919e4	00 01 4f f1 50 00 06 01		INSTRUMENT_ELPIANO1   .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'ELPIANO1  '
>3919ec	04 d2 7c 00 45 4c 50 49 41 4e 4f 31 20 20
>3919fa	00 02 22 f2 13 00 0e 02		INSTRUMENT_ELPIANO2   .text $00, $02, $22, $F2, $13, $00, $0E, $02, $00, $F5, $43, $00, 'ELPIANO2  '
>391a02	00 f5 43 00 45 4c 50 49 41 4e 4f 32 20 20
>391a10	00 81 63 f3 58 00 00 01		INSTRUMENT_EPIANO1A   .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'EPIANO1A  '
>391a18	80 f2 58 00 45 50 49 41 4e 4f 31 41 20 20
>391a26	00 07 1f f5 fa 00 0e 01		INSTRUMENT_EPIANO1B   .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'EPIANO1B  '
>391a2e	57 f5 fa 00 45 50 49 41 4e 4f 31 42 20 20
>391a3c	00 21 83 74 17 00 07 a2		INSTRUMENT_FLUTE      .text $00, $21, $83, $74, $17, $00, $07, $A2, $8D, $65, $17, $00, 'FLUTE     '
>391a44	8d 65 17 00 46 4c 55 54 45 20 20 20 20 20
>391a52	00 a1 27 74 8f 00 02 a1		INSTRUMENT_FLUTE1     .text $00, $A1, $27, $74, $8F, $00, $02, $A1, $80, $65, $2A, $00, 'FLUTE1    '
>391a5a	80 65 2a 00 46 4c 55 54 45 31 20 20 20 20
>391a68	00 e0 ec 6e 8f 00 0e 61		INSTRUMENT_FLUTE2     .text $00, $E0, $EC, $6E, $8F, $00, $0E, $61, $00, $65, $2A, $00, 'FLUTE2    '
>391a70	00 65 2a 00 46 4c 55 54 45 32 20 20 20 20
>391a7e	00 21 9f 53 5a 00 0c 21		INSTRUMENT_FRHORN1    .text $00, $21, $9F, $53, $5A, $00, $0C, $21, $80, $AA, $1A, $00, 'FRHORN1   '
>391a86	80 aa 1a 00 46 52 48 4f 52 4e 31 20 20 20
>391a94	00 20 8e a5 8f 02 06 21		INSTRUMENT_FRHORN2    .text $00, $20, $8E, $A5, $8F, $02, $06, $21, $00, $36, $3D, $00, 'FRHORN2   '
>391a9c	00 36 3d 00 46 52 48 4f 52 4e 32 20 20 20
>391aaa	00 f0 18 55 ef 02 00 e0		INSTRUMENT_FSTRP1     .text $00, $F0, $18, $55, $EF, $02, $00, $E0, $80, $87, $1E, $03, 'FSTRP1    '
>391ab2	80 87 1e 03 46 53 54 52 50 31 20 20 20 20
>391ac0	00 70 16 55 2f 02 0c e0		INSTRUMENT_FSTRP2     .text $00, $70, $16, $55, $2F, $02, $0C, $E0, $80, $87, $1E, $03, 'FSTRP2    '
>391ac8	80 87 1e 03 46 53 54 52 50 32 20 20 20 20
>391ad6	00 f1 00 97 13 00 0a 25		INSTRUMENT_FUZGUIT1   .text $00, $F1, $00, $97, $13, $00, $0A, $25, $0D, $F1, $18, $01, 'FUZGUIT1  '
>391ade	0d f1 18 01 46 55 5a 47 55 49 54 31 20 20
>391aec	00 31 48 f1 53 00 06 32		INSTRUMENT_FUZGUIT2   .text $00, $31, $48, $F1, $53, $00, $06, $32, $00, $F2, $27, $02, 'FUZGUIT2  '
>391af4	00 f2 27 02 46 55 5a 47 55 49 54 32 20 20
>391b02	00 01 11 f2 1f 00 0a 01		INSTRUMENT_GUITAR1    .text $00, $01, $11, $F2, $1F, $00, $0A, $01, $00, $F5, $88, $00, 'GUITAR1   '
>391b0a	00 f5 88 00 47 55 49 54 41 52 31 20 20 20
>391b18	00 02 29 f5 75 00 00 01		INSTRUMENT_HARP1      .text $00, $02, $29, $F5, $75, $00, $00, $01, $83, $F2, $F3, $00, 'HARP1     '
>391b20	83 f2 f3 00 48 41 52 50 31 20 20 20 20 20
>391b2e	00 02 99 f5 55 00 00 01		INSTRUMENT_HARP2      .text $00, $02, $99, $F5, $55, $00, $00, $01, $80, $F6, $53, $00, 'HARP2     '
>391b36	80 f6 53 00 48 41 52 50 32 20 20 20 20 20
>391b44	00 02 57 f5 56 00 00 01		INSTRUMENT_HARP3      .text $00, $02, $57, $F5, $56, $00, $00, $01, $80, $F6, $54, $00, 'HARP3     '
>391b4c	80 f6 54 00 48 41 52 50 33 20 20 20 20 20
>391b5a	00 02 29 f5 75 00 00 01		INSTRUMENT_HARPE1     .text $00, $02, $29, $F5, $75, $00, $00, $01, $03, $F2, $F3, $00, 'HARPE1    '
>391b62	03 f2 f3 00 48 41 52 50 45 31 20 20 20 20
>391b70	00 32 87 a1 10 00 08 16		INSTRUMENT_HARPSI1    .text $00, $32, $87, $A1, $10, $00, $08, $16, $80, $7D, $33, $00, 'HARPSI1   '
>391b78	80 7d 33 00 48 41 52 50 53 49 31 20 20 20
>391b86	00 33 87 a1 10 00 06 15		INSTRUMENT_HARPSI2    .text $00, $33, $87, $A1, $10, $00, $06, $15, $80, $7D, $43, $00, 'HARPSI2   '
>391b8e	80 7d 43 00 48 41 52 50 53 49 32 20 20 20
>391b9c	00 35 84 a8 10 00 08 18		INSTRUMENT_HARPSI3    .text $00, $35, $84, $A8, $10, $00, $08, $18, $80, $7D, $33, $00, 'HARPSI3   '
>391ba4	80 7d 33 00 48 41 52 50 53 49 33 20 20 20
>391bb2	00 11 0d f2 01 00 0a 15		INSTRUMENT_HARPSI4    .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'HARPSI4   '
>391bba	0d f2 b1 00 48 41 52 50 53 49 34 20 20 20
>391bc8	00 36 87 8a 00 00 08 1a		INSTRUMENT_HARPSI5    .text $00, $36, $87, $8A, $00, $00, $08, $1A, $80, $7F, $33, $00, 'HARPSI5   '
>391bd0	80 7f 33 00 48 41 52 50 53 49 35 20 20 20
>391bde	00 f0 00 1e 11 01 08 e2		INSTRUMENT_HELICPTR   .text $00, $F0, $00, $1E, $11, $01, $08, $E2, $C0, $11, $11, $01, 'HELICPTR  '
>391be6	c0 11 11 01 48 45 4c 49 43 50 54 52 20 20
>391bf4	0a 01 00 f7 b5 00 00 00		INSTRUMENT_HIHAT1     .text $0A, $01, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'HIHAT1    '
>391bfc	00 00 00 00 48 49 48 41 54 31 20 20 20 20
>391c0a	0a 01 03 da 18 00 00 00		INSTRUMENT_HIHAT2     .text $0A, $01, $03, $DA, $18, $00, $00, $00, $00, $00, $00, $00, 'HIHAT2    '
>391c12	00 00 00 00 48 49 48 41 54 32 20 20 20 20
>391c20	00 87 4d 78 42 00 0a 94		INSTRUMENT_JAVAICAN   .text $00, $87, $4D, $78, $42, $00, $0A, $94, $00, $85, $54, $00, 'JAVAICAN  '
>391c28	00 85 54 00 4a 41 56 41 49 43 41 4e 20 20
>391c36	00 03 5e 85 51 01 0e 11		INSTRUMENT_JAZZGUIT   .text $00, $03, $5E, $85, $51, $01, $0E, $11, $00, $D2, $71, $00, 'JAZZGUIT  '
>391c3e	00 d2 71 00 4a 41 5a 5a 47 55 49 54 20 20
>391c4c	00 00 50 f2 70 00 0e 13		INSTRUMENT_JEWSHARP   .text $00, $00, $50, $F2, $70, $00, $0E, $13, $00, $F2, $72, $00, 'JEWSHARP  '
>391c54	00 f2 72 00 4a 45 57 53 48 41 52 50 20 20
>391c62	00 00 02 f0 fa 01 06 11		INSTRUMENT_KEYBRD1    .text $00, $00, $02, $F0, $FA, $01, $06, $11, $80, $F2, $FA, $01, 'KEYBRD1   '
>391c6a	80 f2 fa 01 4b 45 59 42 52 44 31 20 20 20
>391c78	00 01 8f f2 bd 00 08 14		INSTRUMENT_KEYBRD2    .text $00, $01, $8F, $F2, $BD, $00, $08, $14, $80, $82, $BD, $00, 'KEYBRD2   '
>391c80	80 82 bd 00 4b 45 59 42 52 44 32 20 20 20
>391c8e	00 01 00 f0 f0 00 00 e4		INSTRUMENT_KEYBRD3    .text $00, $01, $00, $F0, $F0, $00, $00, $E4, $03, $F3, $36, $00, 'KEYBRD3   '
>391c96	03 f3 36 00 4b 45 59 42 52 44 33 20 20 20
>391ca4	09 e6 00 25 b5 00 00 00		INSTRUMENT_LASER      .text $09, $E6, $00, $25, $B5, $00, $00, $00, $00, $00, $00, $00, 'LASER     '
>391cac	00 00 00 00 4c 41 53 45 52 20 20 20 20 20
>391cba	00 32 44 f8 ff 00 0e 11		INSTRUMENT_LOGDRUM1   .text $00, $32, $44, $F8, $FF, $00, $0E, $11, $00, $F5, $7F, $00, 'LOGDRUM1  '
>391cc2	00 f5 7f 00 4c 4f 47 44 52 55 4d 31 20 20
>391cd0	00 05 4e da 25 00 0a 01		INSTRUMENT_MARIMBA1   .text $00, $05, $4E, $DA, $25, $00, $0A, $01, $00, $F9, $15, $00, 'MARIMBA1  '
>391cd8	00 f9 15 00 4d 41 52 49 4d 42 41 31 20 20
>391ce6	00 85 4e da 15 00 0a 81		INSTRUMENT_MARIMBA2   .text $00, $85, $4E, $DA, $15, $00, $0A, $81, $80, $F9, $13, $00, 'MARIMBA2  '
>391cee	80 f9 13 00 4d 41 52 49 4d 42 41 32 20 20
>391cfc	00 30 00 fe 11 01 08 ae		INSTRUMENT_MDRNPHON   .text $00, $30, $00, $FE, $11, $01, $08, $AE, $C0, $F1, $19, $01, 'MDRNPHON  '
>391d04	c0 f1 19 01 4d 44 52 4e 50 48 4f 4e 20 20
>391d12	07 0c 00 c8 b6 01 00 00		INSTRUMENT_MLTRDRUM   .text $07, $0C, $00, $C8, $B6, $01, $00, $00, $00, $00, $00, $00, 'MLTRDRUM  '
>391d1a	00 00 00 00 4d 4c 54 52 44 52 55 4d 20 20
>391d28	00 20 90 f5 9e 02 0c 11		INSTRUMENT_MOOGSYNT   .text $00, $20, $90, $F5, $9E, $02, $0C, $11, $00, $F4, $5B, $03, 'MOOGSYNT  '
>391d30	00 f4 5b 03 4d 4f 4f 47 53 59 4e 54 20 20
>391d3e	00 0e 40 d1 53 00 0e 0e		INSTRUMENT_NOISE1     .text $00, $0E, $40, $D1, $53, $00, $0E, $0E, $00, $F2, $7F, $03, 'NOISE1    '
>391d46	00 f2 7f 03 4e 4f 49 53 45 31 20 20 20 20
>391d54	00 b1 c5 6e 17 00 02 22		INSTRUMENT_OBOE1      .text $00, $B1, $C5, $6E, $17, $00, $02, $22, $05, $8B, $0E, $00, 'OBOE1     '
>391d5c	05 8b 0e 00 4f 42 4f 45 31 20 20 20 20 20
>391d6a	00 65 d2 81 03 00 02 71		INSTRUMENT_ORGAN1     .text $00, $65, $D2, $81, $03, $00, $02, $71, $80, $F1, $05, $00, 'ORGAN1    '
>391d72	80 f1 05 00 4f 52 47 41 4e 31 20 20 20 20
>391d80	00 24 80 ff 0f 00 01 21		INSTRUMENT_ORGAN2     .text $00, $24, $80, $FF, $0F, $00, $01, $21, $80, $FF, $0F, $00, 'ORGAN2    '
>391d88	80 ff 0f 00 4f 52 47 41 4e 32 20 20 20 20
>391d96	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3     .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $80, $F0, $1F, $00, 'ORGAN3    '
>391d9e	80 f0 1f 00 4f 52 47 41 4e 33 20 20 20 20
>391dac	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3A    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $8D, $F0, $13, $00, 'ORGAN3A   '
>391db4	8d f0 13 00 4f 52 47 41 4e 33 41 20 20 20
>391dc2	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3B    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $92, $F0, $12, $00, 'ORGAN3B   '
>391dca	92 f0 12 00 4f 52 47 41 4e 33 42 20 20 20
>391dd8	00 0c 00 f8 b5 00 01 00		INSTRUMENT_ORGNPERC   .text $00, $0C, $00, $F8, $B5, $00, $01, $00, $00, $D6, $4F, $00, 'ORGNPERC  '
>391de0	00 d6 4f 00 4f 52 47 4e 50 45 52 43 20 20
>391dee	00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE1     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F1, $B2, $00, 'PHONE1    '
>391df6	08 f1 b2 00 50 48 4f 4e 45 31 20 20 20 20
>391e04	00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE2     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $0A, $F1, $B4, $00, 'PHONE2    '
>391e0c	0a f1 b4 00 50 48 4f 4e 45 32 20 20 20 20
>391e1a	00 81 63 f3 58 00 00 01		INSTRUMENT_PIAN1A     .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'PIAN1A    '
>391e22	80 f2 58 00 50 49 41 4e 31 41 20 20 20 20
>391e30	00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1B     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $26, $F5, $FA, $00, 'PIAN1B    '
>391e38	26 f5 fa 00 50 49 41 4e 31 42 20 20 20 20
>391e46	00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1C     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'PIAN1C    '
>391e4e	57 f5 fa 00 50 49 41 4e 31 43 20 20 20 20
>391e5c	00 03 4f f1 53 00 06 17		INSTRUMENT_PIANO      .text $00, $03, $4F, $F1, $53, $00, $06, $17, $00, $F2, $74, $00, 'PIANO     '
>391e64	00 f2 74 00 50 49 41 4e 4f 20 20 20 20 20
>391e72	00 01 4f f1 53 00 06 11		INSTRUMENT_PIANO1     .text $00, $01, $4F, $F1, $53, $00, $06, $11, $00, $D2, $74, $00, 'PIANO1    '
>391e7a	00 d2 74 00 50 49 41 4e 4f 31 20 20 20 20
>391e88	00 41 9d f2 51 00 06 13		INSTRUMENT_PIANO2     .text $00, $41, $9D, $F2, $51, $00, $06, $13, $00, $F2, $F1, $00, 'PIANO2    '
>391e90	00 f2 f1 00 50 49 41 4e 4f 32 20 20 20 20
>391e9e	00 01 4f f1 50 00 06 01		INSTRUMENT_PIANO3     .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'PIANO3    '
>391ea6	04 d2 7c 00 50 49 41 4e 4f 33 20 20 20 20
>391eb4	00 01 4d f1 60 00 08 11		INSTRUMENT_PIANO4     .text $00, $01, $4D, $F1, $60, $00, $08, $11, $00, $D2, $7B, $00, 'PIANO4    '
>391ebc	00 d2 7b 00 50 49 41 4e 4f 34 20 20 20 20
>391eca	00 03 4f f1 53 00 06 17		INSTRUMENT_PIANOBEL   .text $00, $03, $4F, $F1, $53, $00, $06, $17, $03, $F2, $74, $00, 'PIANOBEL  '
>391ed2	03 f2 74 00 50 49 41 4e 4f 42 45 4c 20 20
>391ee0	00 01 cf f1 53 00 02 12		INSTRUMENT_PIANOF     .text $00, $01, $CF, $F1, $53, $00, $02, $12, $00, $F2, $83, $00, 'PIANOF    '
>391ee8	00 f2 83 00 50 49 41 4e 4f 46 20 20 20 20
>391ef6	00 10 00 75 93 01 00 01		INSTRUMENT_POPBASS1   .text $00, $10, $00, $75, $93, $01, $00, $01, $00, $F5, $82, $01, 'POPBASS1  '
>391efe	00 f5 82 01 50 4f 50 42 41 53 53 31 20 20
>391f0c	07 0c 00 c7 b4 00 00 00		INSTRUMENT_RKSNARE1   .text $07, $0C, $00, $C7, $B4, $00, $00, $00, $00, $00, $00, $00, 'RKSNARE1  '
>391f14	00 00 00 00 52 4b 53 4e 41 52 45 31 20 20
>391f22	00 01 4f 71 53 00 0a 12		INSTRUMENT_SAX1       .text $00, $01, $4F, $71, $53, $00, $0A, $12, $00, $52, $7C, $00, 'SAX1      '
>391f2a	00 52 7c 00 53 41 58 31 20 20 20 20 20 20
>391f38	00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH    .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH   '
>391f40	00 5c dc 00 53 43 52 41 54 43 48 20 20 20
>391f4e	00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH4   .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH4  '
>391f56	00 5c dc 00 53 43 52 41 54 43 48 34 20 20
>391f64	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SDRUM2     .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SDRUM2    '
>391f6c	00 f6 b4 00 53 44 52 55 4d 32 20 20 20 20
>391f7a	00 e4 0e ff 3f 01 00 c0		INSTRUMENT_SHRTVIBE   .text $00, $E4, $0E, $FF, $3F, $01, $00, $C0, $00, $F3, $07, $00, 'SHRTVIBE  '
>391f82	00 f3 07 00 53 48 52 54 56 49 42 45 20 20
>391f90	00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR1     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $00, 'SITAR1    '
>391f98	40 f1 53 00 53 49 54 41 52 31 20 20 20 20
>391fa6	00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR2     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $01, 'SITAR2    '
>391fae	40 f1 53 01 53 49 54 41 52 32 20 20 20 20
>391fbc	00 61 0c 81 03 00 08 71		INSTRUMENT_SNAKEFL    .text $00, $61, $0C, $81, $03, $00, $08, $71, $80, $61, $0C, $00, 'SNAKEFL   '
>391fc4	80 61 0c 00 53 4e 41 4b 45 46 4c 20 20 20
>391fd2	07 0c 00 f8 b5 00 00 00		INSTRUMENT_SNARE1     .text $07, $0C, $00, $F8, $B5, $00, $00, $00, $00, $00, $00, $00, 'SNARE1    '
>391fda	00 00 00 00 53 4e 41 52 45 31 20 20 20 20
>391fe8	00 06 00 f0 f0 00 0e c4		INSTRUMENT_SNRSUST    .text $00, $06, $00, $F0, $F0, $00, $0E, $C4, $03, $C4, $34, $00, 'SNRSUST   '
>391ff0	03 c4 34 00 53 4e 52 53 55 53 54 20 20 20
>391ffe	00 70 1c 51 03 02 0e 20		INSTRUMENT_SOLOVLN    .text $00, $70, $1C, $51, $03, $02, $0E, $20, $00, $54, $67, $02, 'SOLOVLN   '
>392006	00 54 67 02 53 4f 4c 4f 56 4c 4e 20 20 20
>392014	00 01 46 f1 83 00 06 61		INSTRUMENT_STEELGT1   .text $00, $01, $46, $F1, $83, $00, $06, $61, $03, $31, $86, $00, 'STEELGT1  '
>39201c	03 31 86 00 53 54 45 45 4c 47 54 31 20 20
>39202a	00 01 47 f1 83 00 06 61		INSTRUMENT_STEELGT2   .text $00, $01, $47, $F1, $83, $00, $06, $61, $03, $91, $86, $00, 'STEELGT2  '
>392032	03 91 86 00 53 54 45 45 4c 47 54 32 20 20
>392040	00 b1 8b 71 11 00 06 61		INSTRUMENT_STRINGS1   .text $00, $B1, $8B, $71, $11, $00, $06, $61, $40, $42, $15, $01, 'STRINGS1  '
>392048	40 42 15 01 53 54 52 49 4e 47 53 31 20 20
>392056	00 e1 4f b1 d3 03 06 21		INSTRUMENT_STRNLONG   .text $00, $E1, $4F, $B1, $D3, $03, $06, $21, $00, $12, $74, $01, 'STRNLONG  '
>39205e	00 12 74 01 53 54 52 4e 4c 4f 4e 47 20 20
>39206c	00 55 97 2a 02 00 00 12		INSTRUMENT_SYN1       .text $00, $55, $97, $2A, $02, $00, $00, $12, $80, $42, $F3, $00, 'SYN1      '
>392074	80 42 f3 00 53 59 4e 31 20 20 20 20 20 20
>392082	00 13 97 9a 12 00 0e 11		INSTRUMENT_SYN2       .text $00, $13, $97, $9A, $12, $00, $0E, $11, $80, $9B, $14, $00, 'SYN2      '
>39208a	80 9b 14 00 53 59 4e 32 20 20 20 20 20 20
>392098	00 11 8a f1 11 00 06 01		INSTRUMENT_SYN3       .text $00, $11, $8A, $F1, $11, $00, $06, $01, $40, $F1, $B3, $00, 'SYN3      '
>3920a0	40 f1 b3 00 53 59 4e 33 20 20 20 20 20 20
>3920ae	00 21 0d e9 3a 00 0a 22		INSTRUMENT_SYN4       .text $00, $21, $0D, $E9, $3A, $00, $0A, $22, $80, $65, $6C, $00, 'SYN4      '
>3920b6	80 65 6c 00 53 59 4e 34 20 20 20 20 20 20
>3920c4	00 01 4f 71 53 00 06 19		INSTRUMENT_SYN5       .text $00, $01, $4F, $71, $53, $00, $06, $19, $00, $52, $7C, $00, 'SYN5      '
>3920cc	00 52 7c 00 53 59 4e 35 20 20 20 20 20 20
>3920da	00 24 0f 41 7e 00 0a 21		INSTRUMENT_SYN6       .text $00, $24, $0F, $41, $7E, $00, $0A, $21, $00, $F1, $5E, $00, 'SYN6      '
>3920e2	00 f1 5e 00 53 59 4e 36 20 20 20 20 20 20
>3920f0	00 07 87 f0 05 00 04 01		INSTRUMENT_SYN9       .text $00, $07, $87, $F0, $05, $00, $04, $01, $80, $F0, $05, $00, 'SYN9      '
>3920f8	80 f0 05 00 53 59 4e 39 20 20 20 20 20 20
>392106	00 26 03 e0 f0 00 08 1e		INSTRUMENT_SYNBAL1    .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'SYNBAL1   '
>39210e	00 ff 31 00 53 59 4e 42 41 4c 31 20 20 20
>39211c	00 28 03 e0 f0 00 04 13		INSTRUMENT_SYNBAL2    .text $00, $28, $03, $E0, $F0, $00, $04, $13, $00, $E8, $11, $00, 'SYNBAL2   '
>392124	00 e8 11 00 53 59 4e 42 41 4c 32 20 20 20
>392132	00 30 88 d5 19 00 0c 71		INSTRUMENT_SYNBASS1   .text $00, $30, $88, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'SYNBASS1  '
>39213a	80 61 1b 00 53 59 4e 42 41 53 53 31 20 20
>392148	00 81 86 65 01 00 0c 11		INSTRUMENT_SYNBASS2   .text $00, $81, $86, $65, $01, $00, $0C, $11, $00, $32, $74, $00, 'SYNBASS2  '
>392150	00 32 74 00 53 59 4e 42 41 53 53 32 20 20
>39215e	00 81 83 65 05 00 0a 51		INSTRUMENT_SYNBASS4   .text $00, $81, $83, $65, $05, $00, $0A, $51, $00, $32, $74, $00, 'SYNBASS4  '
>392166	00 32 74 00 53 59 4e 42 41 53 53 34 20 20
>392174	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR1    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F8, $B6, $00, 'SYNSNR1   '
>39217c	00 f8 b6 00 53 59 4e 53 4e 52 31 20 20 20
>39218a	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR2    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SYNSNR2   '
>392192	00 f6 b4 00 53 59 4e 53 4e 52 32 20 20 20
>3921a0	00 8f 81 ef 01 00 04 01		INSTRUMENT_TINCAN1    .text $00, $8F, $81, $EF, $01, $00, $04, $01, $00, $98, $F1, $00, 'TINCAN1   '
>3921a8	00 98 f1 00 54 49 4e 43 41 4e 31 20 20 20
>3921b6	08 04 00 f7 b5 00 00 00		INSTRUMENT_TOM1       .text $08, $04, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'TOM1      '
>3921be	00 00 00 00 54 4f 4d 31 20 20 20 20 20 20
>3921cc	08 02 00 c8 97 00 00 00		INSTRUMENT_TOM2       .text $08, $02, $00, $C8, $97, $00, $00, $00, $00, $00, $00, $00, 'TOM2      '
>3921d4	00 00 00 00 54 4f 4d 32 20 20 20 20 20 20
>3921e2	00 17 4f f2 61 00 08 12		INSTRUMENT_TRAINBEL   .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F2, $74, $00, 'TRAINBEL  '
>3921ea	08 f2 74 00 54 52 41 49 4e 42 45 4c 20 20
>3921f8	00 26 03 e0 f0 00 08 1e		INSTRUMENT_TRIANGLE   .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'TRIANGLE  '
>392200	00 ff 31 00 54 52 49 41 4e 47 4c 45 20 20
>39220e	00 b1 1c 41 1f 00 0e 61		INSTRUMENT_TROMB1     .text $00, $B1, $1C, $41, $1F, $00, $0E, $61, $80, $92, $3B, $00, 'TROMB1    '
>392216	80 92 3b 00 54 52 4f 4d 42 31 20 20 20 20
>392224	00 21 1c 53 1d 00 0c 61		INSTRUMENT_TROMB2     .text $00, $21, $1C, $53, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TROMB2    '
>39222c	80 52 3b 00 54 52 4f 4d 42 32 20 20 20 20
>39223a	00 31 1c 41 0b 00 0e 61		INSTRUMENT_TRUMPET1   .text $00, $31, $1C, $41, $0B, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET1  '
>392242	80 92 3b 00 54 52 55 4d 50 45 54 31 20 20
>392250	00 31 1c 23 1d 00 0c 61		INSTRUMENT_TRUMPET2   .text $00, $31, $1C, $23, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TRUMPET2  '
>392258	80 52 3b 00 54 52 55 4d 50 45 54 32 20 20
>392266	00 31 1c 41 01 00 0e 61		INSTRUMENT_TRUMPET3   .text $00, $31, $1C, $41, $01, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET3  '
>39226e	80 92 3b 00 54 52 55 4d 50 45 54 33 20 20
>39227c	00 31 1c 41 0b 00 0c 61		INSTRUMENT_TRUMPET4   .text $00, $31, $1C, $41, $0B, $00, $0C, $61, $80, $92, $3B, $00, 'TRUMPET4  '
>392284	80 92 3b 00 54 52 55 4d 50 45 54 34 20 20
>392292	00 21 19 43 8c 00 0c 21		INSTRUMENT_TUBA1      .text $00, $21, $19, $43, $8C, $00, $0C, $21, $80, $85, $2F, $00, 'TUBA1     '
>39229a	80 85 2f 00 54 55 42 41 31 20 20 20 20 20
>3922a8	00 84 53 f5 33 00 06 a0		INSTRUMENT_VIBRA1     .text $00, $84, $53, $F5, $33, $00, $06, $A0, $80, $FD, $25, $00, 'VIBRA1    '
>3922b0	80 fd 25 00 56 49 42 52 41 31 20 20 20 20
>3922be	00 06 73 f6 54 00 00 81		INSTRUMENT_VIBRA2     .text $00, $06, $73, $F6, $54, $00, $00, $81, $03, $F2, $B3, $00, 'VIBRA2    '
>3922c6	03 f2 b3 00 56 49 42 52 41 32 20 20 20 20
>3922d4	00 93 97 aa 12 02 0e 91		INSTRUMENT_VIBRA3     .text $00, $93, $97, $AA, $12, $02, $0E, $91, $80, $AC, $21, $00, 'VIBRA3    '
>3922dc	80 ac 21 00 56 49 42 52 41 33 20 20 20 20
>3922ea	00 31 1c 51 03 00 0e 61		INSTRUMENT_VIOLIN1    .text $00, $31, $1C, $51, $03, $00, $0E, $61, $80, $54, $67, $00, 'VIOLIN1   '
>3922f2	80 54 67 00 56 49 4f 4c 49 4e 31 20 20 20
>392300	00 e1 88 62 29 00 0c 22		INSTRUMENT_VIOLIN2    .text $00, $E1, $88, $62, $29, $00, $0C, $22, $80, $53, $2C, $00, 'VIOLIN2   '
>392308	80 53 2c 00 56 49 4f 4c 49 4e 32 20 20 20
>392316	00 e1 88 64 29 00 06 22		INSTRUMENT_VIOLIN3    .text $00, $E1, $88, $64, $29, $00, $06, $22, $83, $53, $2C, $00, 'VIOLIN3   '
>39231e	83 53 2c 00 56 49 4f 4c 49 4e 33 20 20 20
>39232c	00 31 9c f1 f9 00 0e 31		INSTRUMENT_VLNPIZZ1   .text $00, $31, $9C, $F1, $F9, $00, $0E, $31, $80, $F7, $E6, $00, 'VLNPIZZ1  '
>392334	80 f7 e6 00 56 4c 4e 50 49 5a 5a 31 20 20
>392342	00 00 02 00 f0 00 0e 14		INSTRUMENT_WAVE       .text $00, $00, $02, $00, $F0, $00, $0E, $14, $80, $1B, $A2, $00, 'WAVE      '
>39234a	80 1b a2 00 57 41 56 45 20 20 20 20 20 20
>392358	00 11 2d c8 2f 00 0c 31		INSTRUMENT_XYLO1      .text $00, $11, $2D, $C8, $2F, $00, $0C, $31, $00, $F5, $F5, $00, 'XYLO1     '
>392360	00 f5 f5 00 58 59 4c 4f 31 20 20 20 20 20
>39236e	06 2e 00 ff 0f 00 00 00		INSTRUMENT_XYLO2      .text $06, $2E, $00, $FF, $0F, $00, $00, $00, $00, $00, $00, $00, 'XYLO2     '
>392376	00 00 00 00 58 59 4c 4f 32 20 20 20 20 20
>392384	00 06 00 ff f0 00 0e c4		INSTRUMENT_XYLO3      .text $00, $06, $00, $FF, $F0, $00, $0E, $C4, $00, $F8, $B5, $00, 'XYLO3     '
>39238c	00 f8 b5 00 58 59 4c 4f 33 20 20 20 20 20

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Drums.asm

>39239a	00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP2         .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>3923a2	00 87 fa 00
>3923a6	00 01 00 78 97 09 00 02		DRUMINS_SCRATCH1      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>3923ae	00 88 98 03
>3923b2	00 01 00 78 97 09 00 02		DRUMINS_SCRATCH2      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>3923ba	00 88 98 03
>3923be	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT2      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>3923c6	00 f9 69 00
>3923ca	00 00 00 f8 6c 01 00 0e		DRUMINS_HIQ           .text $00, $00, $00, $F8, $6C, $01, $00, $0E, $80, $E8, $4A, $00
>3923d2	80 e8 4a 00
>3923d6	00 25 1b fa f2 01 00 12		DRUMINS_WOODBLOK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>3923de	00 f6 9a 00
>3923e2	00 06 03 f4 44 00 01 01		DRUMINS_GLOCK         .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>3923ea	1b f2 34 00
>3923ee	00 00 00 f9 f3 05 00 01		DRUMINS_BASS_DR2      .text $00, $00, $00, $F9, $F3, $05, $00, $01, $00, $F7, $8A, $00
>3923f6	00 f7 8a 00
>3923fa	00 01 07 fa fd 05 00 01		DRUMINS_BASS_DR1      .text $00, $01, $07, $FA, $FD, $05, $00, $01, $00, $F6, $47, $00
>392402	00 f6 47 00
>392406	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT       .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>39240e	00 f9 69 00
>392412	00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_AC      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>39241a	00 f7 a9 00
>39241e	00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP          .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>392426	00 87 fa 00
>39242a	00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_EL      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>392432	00 f7 a9 00
>392436	00 06 0a fa 1f 0c 00 11		DRUMINS_LO_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>39243e	00 f5 f5 00
>392442	00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_CL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>39244a	06 b8 d8 03
>39244e	00 06 0a fa 1f 0c 00 11		DRUMINS_HI_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>392456	00 f5 f5 00
>39245a	00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_PL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>392462	06 b8 d8 03
>392466	00 06 0a fa 1f 0c 00 11		DRUMINS_LOW_TOM       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>39246e	00 f5 f5 00
>392472	00 2e 00 82 f6 05 00 04		DRUMINS_HIHAT_OP      .text $00, $2E, $00, $82, $F6, $05, $00, $04, $10, $74, $F8, $03
>39247a	10 74 f8 03
>39247e	00 06 0a fa 1f 0c 00 11		DRUMINS_LTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>392486	00 f5 f5 00
>39248a	00 06 0a fa 1f 0c 00 11		DRUMINS_HTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>392492	00 f5 f5 00
>392496	00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH         .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>39249e	05 c5 d4 03
>3924a2	00 06 0a fa 1f 0c 00 11		DRUMINS_TOM_HIGH      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>3924aa	00 f5 f5 00
>3924ae	00 29 10 94 00 0f 00 04		DRUMINS_RIDE_CY       .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>3924b6	04 f9 44 03
>3924ba	00 2c 00 9f 00 0f 02 0e		DRUMINS_TAMBOUR       .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>3924c2	05 c5 d4 03
>3924c6	00 29 10 94 00 0f 00 04		DRUMINS_CYMBAL        .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>3924ce	04 f9 44 03
>3924d2	00 2e 09 f5 f1 01 00 06		DRUMINS_TAMBOU2       .text $00, $2E, $09, $F5, $F1, $01, $00, $06, $03, $87, $F7, $03
>3924da	03 87 f7 03
>3924de	00 2c 00 9f 00 0f 02 0e		DRUMINS_SPLASH        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>3924e6	05 c5 d4 03
>3924ea	00 37 14 f7 a1 09 01 03		DRUMINS_COWBELL       .text $00, $37, $14, $F7, $A1, $09, $01, $03, $00, $F6, $28, $00
>3924f2	00 f6 28 00
>3924f6	00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH2        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>3924fe	05 c5 d4 03
>392502	00 80 00 ff 00 0d 01 00		DRUMINS_VIBRASLA      .text $00, $80, $00, $FF, $00, $0D, $01, $00, $00, $F5, $F7, $01
>39250a	00 f5 f7 01
>39250e	00 29 10 94 00 0f 00 04		DRUMINS_RIDE2         .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>392516	04 f9 44 03
>39251a	00 25 c4 fa fa 01 00 03		DRUMINS_HI_BONGO      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>392522	00 99 f9 00
>392526	00 21 03 fb fa 01 01 02		DRUMINS_LO_BONGO      .text $00, $21, $03, $FB, $FA, $01, $01, $02, $00, $A8, $F7, $00
>39252e	00 a8 f7 00
>392532	00 25 c4 fa fa 01 00 03		DRUMINS_MUTECONG      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>39253a	00 99 f9 00
>39253e	00 24 18 f9 fa 0f 02 03		DRUMINS_OPENCONG      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>392546	00 a6 f6 00
>39254a	00 24 18 f9 fa 0f 02 03		DRUMINS_LOWCONGA      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>392552	00 a6 f6 00
>392556	00 05 14 f5 f5 07 02 03		DRUMINS_HI_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>39255e	00 f6 36 02
>392562	00 05 14 f5 f5 07 02 03		DRUMINS_LO_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>39256a	00 f6 36 02
>39256e	00 1c 0c f9 31 0f 01 15		DRUMINS_HI_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>392576	00 96 e8 01
>39257a	00 1c 0c f9 31 0f 01 15		DRUMINS_LO_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>392582	00 96 e8 01
>392586	00 0e 00 ff 01 0f 00 0e		DRUMINS_CABASA        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>39258e	02 79 77 03
>392592	00 0e 00 ff 01 0f 00 0e		DRUMINS_MARACAS       .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>39259a	02 79 77 03
>39259e	00 20 15 af 07 05 01 0e		DRUMINS_S_WHISTL      .text $00, $20, $15, $AF, $07, $05, $01, $0E, $00, $A5, $2B, $02
>3925a6	00 a5 2b 02
>3925aa	00 20 18 bf 07 01 01 0e		DRUMINS_L_WHISTL      .text $00, $20, $18, $BF, $07, $01, $01, $0E, $00, $93, $3B, $02
>3925b2	00 93 3b 02
>3925b6	00 20 00 f0 f7 0b 00 08		DRUMINS_S_GUIRO       .text $00, $20, $00, $F0, $F7, $0B, $00, $08, $01, $89, $3B, $03
>3925be	01 89 3b 03
>3925c2	00 20 00 f3 fa 09 00 08		DRUMINS_L_GUIRO       .text $00, $20, $00, $F3, $FA, $09, $00, $08, $0A, $53, $2B, $02
>3925ca	0a 53 2b 02
>3925ce	00 15 21 f8 9a 09 01 13		DRUMINS_CLAVES        .text $00, $15, $21, $F8, $9A, $09, $01, $13, $00, $F6, $89, $00
>3925d6	00 f6 89 00
>3925da	00 25 1b fa f2 01 00 12		DRUMINS_HI_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>3925e2	00 f6 9a 00
>3925e6	00 25 1b fa f2 01 00 12		DRUMINS_LO_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>3925ee	00 f6 9a 00
>3925f2	00 20 01 5f 07 01 00 08		DRUMINS_MU_CUICA      .text $00, $20, $01, $5F, $07, $01, $00, $08, $00, $87, $4B, $01
>3925fa	00 87 4b 01
>3925fe	00 25 12 57 f7 01 01 03		DRUMINS_OP_CUICA      .text $00, $25, $12, $57, $F7, $01, $01, $03, $00, $78, $67, $01
>392606	00 78 67 01
>39260a	00 22 2f f1 f0 07 00 27		DRUMINS_MU_TRNGL      .text $00, $22, $2F, $F1, $F0, $07, $00, $27, $02, $F8, $FC, $00
>392612	02 f8 fc 00
>392616	00 26 44 f1 f0 07 00 27		DRUMINS_OP_TRNGL      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>39261e	40 f5 f5 00
>392622	00 0e 00 ff 01 0f 00 0e		DRUMINS_SHAKER        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>39262a	02 79 77 03
>39262e	00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL1      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>392636	40 f5 f5 00
>39263a	00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL2      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>392642	40 f5 f5 00
>392646	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT3      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>39264e	00 f9 69 00
>392652	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT4      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>39265a	00 f9 69 00
>39265e	00 02 1d f5 93 01 00 00		DRUMINS_TAIKO         .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>392666	00 c6 45 00
=27					DRUM_NOTE_BASE = 27;
=60					NUM_MIDI_DRUMS = 60;
>39266a	9a 23 39 00 a6 23 39 00		midiDrums     .dword DRUMINS_CLAP2, DRUMINS_SCRATCH1, DRUMINS_SCRATCH2, DRUMINS_RIMSHOT2
>392672	b2 23 39 00 be 23 39 00
>39267a	ca 23 39 00 d6 23 39 00		              .dword DRUMINS_HIQ, DRUMINS_WOODBLOK, DRUMINS_GLOCK, DRUMINS_BASS_DR2
>392682	e2 23 39 00 ee 23 39 00
>39268a	fa 23 39 00 06 24 39 00		              .dword DRUMINS_BASS_DR1, DRUMINS_RIMSHOT,  DRUMINS_SNARE_AC, DRUMINS_CLAP
>392692	12 24 39 00 1e 24 39 00
>39269a	2a 24 39 00 36 24 39 00		              .dword DRUMINS_SNARE_EL, DRUMINS_LO_TOMS,  DRUMINS_HIHAT_CL, DRUMINS_HI_TOMS
>3926a2	42 24 39 00 4e 24 39 00
>3926aa	5a 24 39 00 66 24 39 00		              .dword DRUMINS_HIHAT_PL, DRUMINS_LOW_TOM,	DRUMINS_HIHAT_OP, DRUMINS_LTOM_MID
>3926b2	72 24 39 00 7e 24 39 00
>3926ba	8a 24 39 00 96 24 39 00		              .dword DRUMINS_HTOM_MID, DRUMINS_CRASH,    DRUMINS_TOM_HIGH, DRUMINS_RIDE_CY
>3926c2	a2 24 39 00 ae 24 39 00
>3926ca	ba 24 39 00 c6 24 39 00		              .dword DRUMINS_TAMBOUR,  DRUMINS_CYMBAL,   DRUMINS_TAMBOU2,  DRUMINS_SPLASH
>3926d2	d2 24 39 00 de 24 39 00
>3926da	ea 24 39 00 f6 24 39 00		              .dword DRUMINS_COWBELL,  DRUMINS_CRASH2, 	DRUMINS_VIBRASLA, DRUMINS_RIDE2
>3926e2	02 25 39 00 0e 25 39 00
>3926ea	1a 25 39 00 26 25 39 00		              .dword DRUMINS_HI_BONGO, DRUMINS_LO_BONGO, DRUMINS_MUTECONG, DRUMINS_OPENCONG
>3926f2	32 25 39 00 3e 25 39 00
>3926fa	4a 25 39 00 56 25 39 00		              .dword DRUMINS_LOWCONGA, DRUMINS_HI_TIMBA, DRUMINS_LO_TIMBA, DRUMINS_HI_AGOGO
>392702	62 25 39 00 6e 25 39 00
>39270a	7a 25 39 00 86 25 39 00		              .dword DRUMINS_LO_AGOGO, DRUMINS_CABASA, DRUMINS_MARACAS,  DRUMINS_S_WHISTL
>392712	92 25 39 00 9e 25 39 00
>39271a	aa 25 39 00 b6 25 39 00		              .dword DRUMINS_L_WHISTL, DRUMINS_S_GUIRO,  DRUMINS_L_GUIRO,  DRUMINS_CLAVES
>392722	c2 25 39 00 ce 25 39 00
>39272a	da 25 39 00 e6 25 39 00		              .dword DRUMINS_HI_WDBLK, DRUMINS_LO_WDBLK, DRUMINS_MU_CUICA, DRUMINS_OP_CUICA
>392732	f2 25 39 00 fe 25 39 00
>39273a	0a 26 39 00 16 26 39 00		              .dword DRUMINS_MU_TRNGL, DRUMINS_OP_TRNGL, DRUMINS_SHAKER, DRUMINS_TRIANGL1
>392742	22 26 39 00 2e 26 39 00
>39274a	3a 26 39 00 46 26 39 00		              .dword DRUMINS_TRIANGL2, DRUMINS_RIMSHOT3, DRUMINS_RIMSHOT4, DRUMINS_TAIKO
>392752	52 26 39 00 5e 26 39 00

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Instruments.asm

>39275a	00 33 5a b2 50 01 00 31		MIDI_INSTRUMENT_PIANO1     .text $00, $33, $5A, $B2, $50, $01, $00, $31, $00, $B1, $F5, $01
>392762	00 b1 f5 01
>392766	00 31 49 f2 53 07 01 11		MIDI_INSTRUMENT_PIANO2     .text $00, $31, $49, $F2, $53, $07, $01, $11, $03, $F1, $F5, $00
>39276e	03 f1 f5 00
>392772	00 31 95 d1 83 0d 01 32		MIDI_INSTRUMENT_PIANO3     .text $00, $31, $95, $D1, $83, $0D, $01, $32, $03, $C1, $F5, $00
>39277a	03 c1 f5 00
>39277e	00 34 9b f3 63 01 01 11		MIDI_INSTRUMENT_HONKTONK   .text $00, $34, $9B, $F3, $63, $01, $01, $11, $00, $92, $F5, $01
>392786	00 92 f5 01
>39278a	00 27 28 f8 b7 01 02 91		MIDI_INSTRUMENT_EP1        .text $00, $27, $28, $F8, $B7, $01, $02, $91, $00, $F1, $F9, $00
>392792	00 f1 f9 00
>392796	00 1a 2d f3 ee 01 01 11		MIDI_INSTRUMENT_EP2        .text $00, $1A, $2D, $F3, $EE, $01, $01, $11, $00, $F1, $F5, $00
>39279e	00 f1 f5 00
>3927a2	00 35 95 f2 58 0f 01 32		MIDI_INSTRUMENT_HARPSIC    .text $00, $35, $95, $F2, $58, $0F, $01, $32, $02, $81, $F6, $01
>3927aa	02 81 f6 01
>3927ae	00 31 85 c9 40 01 00 35		MIDI_INSTRUMENT_CLAVIC     .text $00, $31, $85, $C9, $40, $01, $00, $35, $00, $C2, $B9, $01
>3927b6	00 c2 b9 01
>3927ba	00 09 15 c7 64 08 00 01		MIDI_INSTRUMENT_CELESTA    .text $00, $09, $15, $C7, $64, $08, $00, $01, $05, $B2, $35, $00
>3927c2	05 b2 35 00
>3927c6	00 06 03 f4 44 00 01 01		MIDI_INSTRUMENT_GLOCK      .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>3927ce	1b f2 34 00
>3927d2	00 04 06 a9 24 0a 01 01		MIDI_INSTRUMENT_MUSICBOX   .text $00, $04, $06, $A9, $24, $0A, $01, $01, $01, $F5, $74, $00
>3927da	01 f5 74 00
>3927de	00 d4 00 f6 33 00 00 f1		MIDI_INSTRUMENT_VIBES      .text $00, $D4, $00, $F6, $33, $00, $00, $F1, $00, $61, $E3, $00
>3927e6	00 61 e3 00
>3927ea	00 d4 00 f7 e8 04 00 d1		MIDI_INSTRUMENT_MARIMBA    .text $00, $D4, $00, $F7, $E8, $04, $00, $D1, $00, $A4, $64, $00
>3927f2	00 a4 64 00
>3927f6	00 36 16 f7 f7 01 00 31		MIDI_INSTRUMENT_XYLO       .text $00, $36, $16, $F7, $F7, $01, $00, $31, $07, $B5, $F5, $00
>3927fe	07 b5 f5 00
>392802	00 03 1b a2 43 0b 00 00		MIDI_INSTRUMENT_TUBEBELL   .text $00, $03, $1B, $A2, $43, $0B, $00, $00, $00, $F3, $74, $00
>39280a	00 f3 74 00
>39280e	00 c3 8e f8 35 01 01 11		MIDI_INSTRUMENT_SANTUR     .text $00, $C3, $8E, $F8, $35, $01, $01, $11, $00, $C3, $94, $01
>392816	00 c3 94 01
>39281a	00 e2 07 f4 1b 06 01 e0		MIDI_INSTRUMENT_ORGAN1     .text $00, $E2, $07, $F4, $1B, $06, $01, $E0, $00, $F4, $0D, $01
>392822	00 f4 0d 01
>392826	00 f2 00 f6 2c 04 00 f0		MIDI_INSTRUMENT_ORGAN2     .text $00, $F2, $00, $F6, $2C, $04, $00, $F0, $00, $F5, $0B, $01
>39282e	00 f5 0b 01
>392832	00 f1 06 b6 15 0a 00 f0		MIDI_INSTRUMENT_ORGAN3     .text $00, $F1, $06, $B6, $15, $0A, $00, $F0, $00, $BF, $07, $00
>39283a	00 bf 07 00
>39283e	00 22 03 79 16 08 01 e0		MIDI_INSTRUMENT_PIPEORG    .text $00, $22, $03, $79, $16, $08, $01, $E0, $00, $6D, $08, $01
>392846	00 6d 08 01
>39284a	00 31 27 63 06 01 00 72		MIDI_INSTRUMENT_REEDORG    .text $00, $31, $27, $63, $06, $01, $00, $72, $00, $51, $17, $01
>392852	00 51 17 01
>392856	00 b4 1d 53 16 0f 01 71		MIDI_INSTRUMENT_ACORDIAN   .text $00, $B4, $1D, $53, $16, $0F, $01, $71, $00, $51, $17, $01
>39285e	00 51 17 01
>392862	00 25 29 97 15 01 00 32		MIDI_INSTRUMENT_HARMONIC   .text $00, $25, $29, $97, $15, $01, $00, $32, $00, $53, $08, $01
>39286a	00 53 08 01
>39286e	00 24 9e 67 15 0f 00 31		MIDI_INSTRUMENT_BANDNEON   .text $00, $24, $9E, $67, $15, $0F, $00, $31, $00, $53, $06, $01
>392876	00 53 06 01
>39287a	00 13 27 a3 b4 05 01 31		MIDI_INSTRUMENT_NYLONGT    .text $00, $13, $27, $A3, $B4, $05, $01, $31, $00, $D2, $F8, $00
>392882	00 d2 f8 00
>392886	00 17 a3 f3 32 01 00 11		MIDI_INSTRUMENT_STEELGT    .text $00, $17, $A3, $F3, $32, $01, $00, $11, $00, $E2, $C7, $01
>39288e	00 e2 c7 01
>392892	00 33 24 d2 c1 0f 01 31		MIDI_INSTRUMENT_JAZZGT     .text $00, $33, $24, $D2, $C1, $0F, $01, $31, $00, $F1, $9C, $00
>39289a	00 f1 9c 00
>39289e	00 31 05 f8 44 01 00 32		MIDI_INSTRUMENT_CLEANGT    .text $00, $31, $05, $F8, $44, $01, $00, $32, $02, $F2, $C9, $01
>3928a6	02 f2 c9 01
>3928aa	00 21 09 9c 7b 07 00 02		MIDI_INSTRUMENT_MUTEGT     .text $00, $21, $09, $9C, $7B, $07, $00, $02, $03, $95, $FB, $00
>3928b2	03 95 fb 00
>3928b6	00 21 84 81 98 07 01 21		MIDI_INSTRUMENT_OVERDGT    .text $00, $21, $84, $81, $98, $07, $01, $21, $04, $A1, $59, $00
>3928be	04 a1 59 00
>3928c2	00 b1 0c 78 43 01 00 22		MIDI_INSTRUMENT_DISTGT     .text $00, $B1, $0C, $78, $43, $01, $00, $22, $03, $91, $FC, $03
>3928ca	03 91 fc 03
>3928ce	00 00 0a 82 8c 09 00 08		MIDI_INSTRUMENT_GTHARMS    .text $00, $00, $0A, $82, $8C, $09, $00, $08, $02, $B4, $EC, $00
>3928d6	02 b4 ec 00
>3928da	00 21 13 ab 46 01 00 21		MIDI_INSTRUMENT_ACOUBASS   .text $00, $21, $13, $AB, $46, $01, $00, $21, $00, $93, $F7, $00
>3928e2	00 93 f7 00
>3928e6	00 01 0a f9 32 01 00 22		MIDI_INSTRUMENT_FINGBASS   .text $00, $01, $0A, $F9, $32, $01, $00, $22, $04, $C1, $58, $00
>3928ee	04 c1 58 00
>3928f2	00 21 07 fa 77 0b 00 22		MIDI_INSTRUMENT_PICKBASS   .text $00, $21, $07, $FA, $77, $0B, $00, $22, $02, $C3, $6A, $00
>3928fa	02 c3 6a 00
>3928fe	00 21 17 71 57 0b 00 21		MIDI_INSTRUMENT_FRETLESS   .text $00, $21, $17, $71, $57, $0B, $00, $21, $00, $62, $87, $00
>392906	00 62 87 00
>39290a	00 25 01 fa 78 07 01 12		MIDI_INSTRUMENT_SLAPBAS1   .text $00, $25, $01, $FA, $78, $07, $01, $12, $00, $F3, $97, $00
>392912	00 f3 97 00
>392916	00 21 03 fa 88 0d 00 13		MIDI_INSTRUMENT_SLAPBAS2   .text $00, $21, $03, $FA, $88, $0D, $00, $13, $00, $B3, $97, $00
>39291e	00 b3 97 00
>392922	00 21 09 f5 7f 09 01 23		MIDI_INSTRUMENT_SYNBASS1   .text $00, $21, $09, $F5, $7F, $09, $01, $23, $04, $F3, $CC, $00
>39292a	04 f3 cc 00
>39292e	00 01 10 a3 9b 09 00 01		MIDI_INSTRUMENT_SYNBASS2   .text $00, $01, $10, $A3, $9B, $09, $00, $01, $00, $93, $AA, $00
>392936	00 93 aa 00
>39293a	00 e2 19 f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLIN     .text $00, $E2, $19, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>392942	00 78 08 01
>392946	00 e2 1c f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLA      .text $00, $E2, $1C, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>39294e	00 78 08 01
>392952	00 61 19 69 16 0b 01 61		MIDI_INSTRUMENT_CELLO      .text $00, $61, $19, $69, $16, $0B, $01, $61, $00, $54, $27, $01
>39295a	00 54 27 01
>39295e	00 71 18 82 31 0d 01 32		MIDI_INSTRUMENT_CONTRAB    .text $00, $71, $18, $82, $31, $0D, $01, $32, $00, $61, $56, $00
>392966	00 61 56 00
>39296a	00 e2 23 70 06 0d 01 e1		MIDI_INSTRUMENT_TREMSTR    .text $00, $E2, $23, $70, $06, $0D, $01, $E1, $00, $75, $16, $01
>392972	00 75 16 01
>392976	00 02 00 88 e6 08 00 61		MIDI_INSTRUMENT_PIZZ       .text $00, $02, $00, $88, $E6, $08, $00, $61, $00, $F5, $F6, $01
>39297e	00 f5 f6 01
>392982	00 12 20 f6 d5 0f 01 11		MIDI_INSTRUMENT_HARP       .text $00, $12, $20, $F6, $D5, $0F, $01, $11, $80, $F3, $E3, $00
>39298a	80 f3 e3 00
>39298e	00 61 0e f4 f4 01 01 00		MIDI_INSTRUMENT_TIMPANI    .text $00, $61, $0E, $F4, $F4, $01, $01, $00, $00, $B5, $F5, $00
>392996	00 b5 f5 00
>39299a	00 61 1e 9c 04 0f 01 21		MIDI_INSTRUMENT_STRINGS    .text $00, $61, $1E, $9C, $04, $0F, $01, $21, $80, $71, $16, $00
>3929a2	80 71 16 00
>3929a6	00 a2 2a c0 d6 0f 02 21		MIDI_INSTRUMENT_SLOWSTR    .text $00, $A2, $2A, $C0, $D6, $0F, $02, $21, $00, $30, $55, $01
>3929ae	00 30 55 01
>3929b2	00 61 21 72 35 0f 01 61		MIDI_INSTRUMENT_SYNSTR1    .text $00, $61, $21, $72, $35, $0F, $01, $61, $00, $62, $36, $01
>3929ba	00 62 36 01
>3929be	00 21 1a 72 23 0f 01 21		MIDI_INSTRUMENT_SYNSTR2    .text $00, $21, $1A, $72, $23, $0F, $01, $21, $02, $51, $07, $00
>3929c6	02 51 07 00
>3929ca	00 e1 16 97 31 09 00 61		MIDI_INSTRUMENT_CHOIR      .text $00, $E1, $16, $97, $31, $09, $00, $61, $00, $62, $39, $00
>3929d2	00 62 39 00
>3929d6	00 22 c3 79 45 01 00 21		MIDI_INSTRUMENT_OOHS       .text $00, $22, $C3, $79, $45, $01, $00, $21, $00, $66, $27, $00
>3929de	00 66 27 00
>3929e2	00 21 de 63 55 01 01 21		MIDI_INSTRUMENT_SYNVOX     .text $00, $21, $DE, $63, $55, $01, $01, $21, $00, $73, $46, $00
>3929ea	00 73 46 00
>3929ee	00 42 05 86 f7 0a 00 50		MIDI_INSTRUMENT_ORCHIT     .text $00, $42, $05, $86, $F7, $0A, $00, $50, $00, $74, $76, $01
>3929f6	00 74 76 01
>3929fa	00 31 1c 61 02 0f 00 61		MIDI_INSTRUMENT_TRUMPET    .text $00, $31, $1C, $61, $02, $0F, $00, $61, $81, $92, $38, $00
>392a02	81 92 38 00
>392a06	00 71 1e 52 23 0f 00 61		MIDI_INSTRUMENT_TROMBONE   .text $00, $71, $1E, $52, $23, $0F, $00, $61, $02, $71, $19, $00
>392a0e	02 71 19 00
>392a12	00 21 1a 76 16 0f 00 21		MIDI_INSTRUMENT_TUBA       .text $00, $21, $1A, $76, $16, $0F, $00, $21, $01, $81, $09, $00
>392a1a	01 81 09 00
>392a1e	00 25 28 89 2c 07 02 20		MIDI_INSTRUMENT_MUTETRP    .text $00, $25, $28, $89, $2C, $07, $02, $20, $00, $83, $4B, $02
>392a26	00 83 4b 02
>392a2a	00 21 1f 79 16 09 00 a2		MIDI_INSTRUMENT_FRHORN     .text $00, $21, $1F, $79, $16, $09, $00, $A2, $05, $71, $59, $00
>392a32	05 71 59 00
>392a36	00 21 19 87 16 0f 00 21		MIDI_INSTRUMENT_BRASS1     .text $00, $21, $19, $87, $16, $0F, $00, $21, $03, $82, $39, $00
>392a3e	03 82 39 00
>392a42	00 21 17 75 35 0f 00 22		MIDI_INSTRUMENT_SYNBRAS1   .text $00, $21, $17, $75, $35, $0F, $00, $22, $82, $84, $17, $00
>392a4a	82 84 17 00
>392a4e	00 21 22 62 58 0f 00 21		MIDI_INSTRUMENT_SYNBRAS2   .text $00, $21, $22, $62, $58, $0F, $00, $21, $02, $72, $16, $00
>392a56	02 72 16 00
>392a5a	00 b1 1b 59 07 01 01 a1		MIDI_INSTRUMENT_SOPSAX     .text $00, $B1, $1B, $59, $07, $01, $01, $A1, $00, $7B, $0A, $00
>392a62	00 7b 0a 00
>392a66	00 21 16 9f 04 0b 00 21		MIDI_INSTRUMENT_ALTOSAX    .text $00, $21, $16, $9F, $04, $0B, $00, $21, $00, $85, $0C, $01
>392a6e	00 85 0c 01
>392a72	00 21 0f a8 20 0d 00 23		MIDI_INSTRUMENT_TENSAX     .text $00, $21, $0F, $A8, $20, $0D, $00, $23, $00, $7B, $0A, $01
>392a7a	00 7b 0a 01
>392a7e	00 21 0f 88 04 09 00 26		MIDI_INSTRUMENT_BARISAX    .text $00, $21, $0F, $88, $04, $09, $00, $26, $00, $79, $18, $01
>392a86	00 79 18 01
>392a8a	00 31 18 8f 05 01 00 32		MIDI_INSTRUMENT_OBOE       .text $00, $31, $18, $8F, $05, $01, $00, $32, $01, $73, $08, $00
>392a92	01 73 08 00
>392a96	00 a1 0a 8c 37 01 01 24		MIDI_INSTRUMENT_ENGLHORN   .text $00, $A1, $0A, $8C, $37, $01, $01, $24, $04, $77, $0A, $00
>392a9e	04 77 0a 00
>392aa2	00 31 04 a8 67 0b 00 75		MIDI_INSTRUMENT_BASSOON    .text $00, $31, $04, $A8, $67, $0B, $00, $75, $00, $51, $19, $00
>392aaa	00 51 19 00
>392aae	00 a2 1f 77 26 01 01 21		MIDI_INSTRUMENT_CLARINET   .text $00, $A2, $1F, $77, $26, $01, $01, $21, $01, $74, $09, $00
>392ab6	01 74 09 00
>392aba	00 e1 07 b8 94 01 01 21		MIDI_INSTRUMENT_PICCOLO    .text $00, $E1, $07, $B8, $94, $01, $01, $21, $01, $63, $28, $00
>392ac2	01 63 28 00
>392ac6	00 a1 93 87 59 01 00 e1		MIDI_INSTRUMENT_FLUTE1     .text $00, $A1, $93, $87, $59, $01, $00, $E1, $00, $65, $0A, $00
>392ace	00 65 0a 00
>392ad2	00 22 10 9f 38 01 00 61		MIDI_INSTRUMENT_RECORDER   .text $00, $22, $10, $9F, $38, $01, $00, $61, $00, $67, $29, $00
>392ada	00 67 29 00
>392ade	00 e2 0d 88 9a 01 01 21		MIDI_INSTRUMENT_PANFLUTE   .text $00, $E2, $0D, $88, $9A, $01, $01, $21, $00, $67, $09, $00
>392ae6	00 67 09 00
>392aea	00 a2 10 98 94 0f 00 21		MIDI_INSTRUMENT_BOTTLEB    .text $00, $A2, $10, $98, $94, $0F, $00, $21, $01, $6A, $28, $00
>392af2	01 6a 28 00
>392af6	00 f1 1c 86 26 0f 00 f1		MIDI_INSTRUMENT_SHAKU      .text $00, $F1, $1C, $86, $26, $0F, $00, $F1, $00, $55, $27, $00
>392afe	00 55 27 00
>392b02	00 e1 3f 9f 09 00 00 e1		MIDI_INSTRUMENT_WHISTLE    .text $00, $E1, $3F, $9F, $09, $00, $00, $E1, $00, $6F, $08, $00
>392b0a	00 6f 08 00
>392b0e	00 e2 3b f7 19 01 00 21		MIDI_INSTRUMENT_OCARINA    .text $00, $E2, $3B, $F7, $19, $01, $00, $21, $00, $7A, $07, $00
>392b16	00 7a 07 00
>392b1a	00 22 1e 92 0c 0f 00 61		MIDI_INSTRUMENT_SQUARWAV   .text $00, $22, $1E, $92, $0C, $0F, $00, $61, $06, $A2, $0D, $00
>392b22	06 a2 0d 00
>392b26	00 21 15 f4 22 0f 01 21		MIDI_INSTRUMENT_SAWWAV     .text $00, $21, $15, $F4, $22, $0F, $01, $21, $00, $A3, $5F, $00
>392b2e	00 a3 5f 00
>392b32	00 f2 20 47 66 03 01 f1		MIDI_INSTRUMENT_SYNCALLI   .text $00, $F2, $20, $47, $66, $03, $01, $F1, $00, $42, $27, $00
>392b3a	00 42 27 00
>392b3e	00 61 19 88 28 0f 00 61		MIDI_INSTRUMENT_CHIFLEAD   .text $00, $61, $19, $88, $28, $0F, $00, $61, $05, $B2, $49, $00
>392b46	05 b2 49 00
>392b4a	00 21 16 82 1b 01 00 23		MIDI_INSTRUMENT_CHARANG    .text $00, $21, $16, $82, $1B, $01, $00, $23, $00, $B2, $79, $01
>392b52	00 b2 79 01
>392b56	00 21 00 ca 93 01 00 22		MIDI_INSTRUMENT_SOLOVOX    .text $00, $21, $00, $CA, $93, $01, $00, $22, $00, $7A, $1A, $00
>392b5e	00 7a 1a 00
>392b62	00 23 00 92 c9 08 01 22		MIDI_INSTRUMENT_FIFTHSAW   .text $00, $23, $00, $92, $C9, $08, $01, $22, $00, $82, $28, $01
>392b6a	00 82 28 01
>392b6e	00 21 1d f3 7b 0f 00 22		MIDI_INSTRUMENT_BASSLEAD   .text $00, $21, $1D, $F3, $7B, $0F, $00, $22, $02, $C3, $5F, $00
>392b76	02 c3 5f 00
>392b7a	00 e1 00 81 25 00 01 a6		MIDI_INSTRUMENT_FANTASIA   .text $00, $E1, $00, $81, $25, $00, $01, $A6, $86, $C4, $95, $01
>392b82	86 c4 95 01
>392b86	00 21 27 31 01 0f 00 21		MIDI_INSTRUMENT_WARMPAD    .text $00, $21, $27, $31, $01, $0F, $00, $21, $00, $44, $15, $00
>392b8e	00 44 15 00
>392b92	00 60 14 83 35 0d 02 61		MIDI_INSTRUMENT_POLYSYN    .text $00, $60, $14, $83, $35, $0D, $02, $61, $00, $D1, $06, $00
>392b9a	00 d1 06 00
>392b9e	00 e1 5c d3 01 01 01 62		MIDI_INSTRUMENT_SPACEVOX   .text $00, $E1, $5C, $D3, $01, $01, $01, $62, $00, $82, $37, $00
>392ba6	00 82 37 00
>392baa	00 28 38 34 86 01 02 21		MIDI_INSTRUMENT_BOWEDGLS   .text $00, $28, $38, $34, $86, $01, $02, $21, $00, $41, $35, $00
>392bb2	00 41 35 00
>392bb6	00 24 12 52 f3 05 01 23		MIDI_INSTRUMENT_METALPAD   .text $00, $24, $12, $52, $F3, $05, $01, $23, $02, $32, $F5, $01
>392bbe	02 32 f5 01
>392bc2	00 61 1d 62 a6 0b 00 a1		MIDI_INSTRUMENT_HALOPAD    .text $00, $61, $1D, $62, $A6, $0B, $00, $A1, $00, $61, $26, $00
>392bca	00 61 26 00
>392bce	00 22 0f 22 d5 0b 01 21		MIDI_INSTRUMENT_SWEEPPAD   .text $00, $22, $0F, $22, $D5, $0B, $01, $21, $84, $3F, $05, $01
>392bd6	84 3f 05 01
>392bda	00 e3 1f f9 24 01 00 31		MIDI_INSTRUMENT_ICERAIN    .text $00, $E3, $1F, $F9, $24, $01, $00, $31, $01, $D1, $F6, $00
>392be2	01 d1 f6 00
>392be6	00 63 00 41 55 06 01 a2		MIDI_INSTRUMENT_SOUNDTRK   .text $00, $63, $00, $41, $55, $06, $01, $A2, $00, $41, $05, $01
>392bee	00 41 05 01
>392bf2	00 c7 25 a7 65 01 01 c1		MIDI_INSTRUMENT_CRYSTAL    .text $00, $C7, $25, $A7, $65, $01, $01, $C1, $05, $F3, $E4, $00
>392bfa	05 f3 e4 00
>392bfe	00 e3 19 f7 b7 01 01 61		MIDI_INSTRUMENT_ATMOSPH    .text $00, $E3, $19, $F7, $B7, $01, $01, $61, $00, $92, $F5, $01
>392c06	00 92 f5 01
>392c0a	00 66 9b a8 44 0f 00 41		MIDI_INSTRUMENT_BRIGHT     .text $00, $66, $9B, $A8, $44, $0F, $00, $41, $04, $F2, $E4, $01
>392c12	04 f2 e4 01
>392c16	00 61 20 22 75 0d 00 61		MIDI_INSTRUMENT_GOBLIN     .text $00, $61, $20, $22, $75, $0D, $00, $61, $00, $45, $25, $00
>392c1e	00 45 25 00
>392c22	00 e1 21 f6 84 0f 00 e1		MIDI_INSTRUMENT_ECHODROP   .text $00, $E1, $21, $F6, $84, $0F, $00, $E1, $01, $A3, $36, $00
>392c2a	01 a3 36 00
>392c2e	00 e2 14 73 64 0b 01 e1		MIDI_INSTRUMENT_STARTHEM   .text $00, $E2, $14, $73, $64, $0B, $01, $E1, $01, $98, $05, $01
>392c36	01 98 05 01
>392c3a	00 21 0b 72 34 09 00 24		MIDI_INSTRUMENT_SITAR      .text $00, $21, $0B, $72, $34, $09, $00, $24, $02, $A3, $F6, $01
>392c42	02 a3 f6 01
>392c46	00 21 16 f4 53 0d 00 04		MIDI_INSTRUMENT_BANJO      .text $00, $21, $16, $F4, $53, $0D, $00, $04, $00, $F6, $F8, $00
>392c4e	00 f6 f8 00
>392c52	00 21 18 da 02 0d 00 35		MIDI_INSTRUMENT_SHAMISEN   .text $00, $21, $18, $DA, $02, $0D, $00, $35, $00, $F3, $F5, $00
>392c5a	00 f3 f5 00
>392c5e	00 25 0f fa 63 09 00 02		MIDI_INSTRUMENT_KOTO       .text $00, $25, $0F, $FA, $63, $09, $00, $02, $00, $94, $E5, $01
>392c66	00 94 e5 01
>392c6a	00 32 07 f9 96 01 00 11		MIDI_INSTRUMENT_KALIMBA    .text $00, $32, $07, $F9, $96, $01, $00, $11, $00, $84, $44, $00
>392c72	00 84 44 00
>392c76	00 20 0e 97 18 09 02 25		MIDI_INSTRUMENT_BAGPIPE    .text $00, $20, $0E, $97, $18, $09, $02, $25, $03, $83, $18, $01
>392c7e	03 83 18 01
>392c82	00 61 18 f6 29 01 00 62		MIDI_INSTRUMENT_FIDDLE     .text $00, $61, $18, $F6, $29, $01, $00, $62, $01, $78, $08, $01
>392c8a	01 78 08 01
>392c8e	00 e6 21 76 19 0b 00 61		MIDI_INSTRUMENT_SHANNAI    .text $00, $E6, $21, $76, $19, $0B, $00, $61, $03, $8E, $08, $01
>392c96	03 8e 08 01
>392c9a	00 27 23 f0 d4 01 00 05		MIDI_INSTRUMENT_TINKLBEL   .text $00, $27, $23, $F0, $D4, $01, $00, $05, $09, $F2, $46, $00
>392ca2	09 f2 46 00
>392ca6	00 1c 0c f9 31 0f 01 15		MIDI_INSTRUMENT_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>392cae	00 96 e8 01
>392cb2	00 02 00 75 16 06 02 01		MIDI_INSTRUMENT_STEELDRM   .text $00, $02, $00, $75, $16, $06, $02, $01, $00, $F6, $F6, $01
>392cba	00 f6 f6 01
>392cbe	00 25 1b fa f2 01 00 12		MIDI_INSTRUMENT_WOODBLOK   .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>392cc6	00 f6 9a 00
>392cca	00 02 1d f5 93 01 00 00		MIDI_INSTRUMENT_TAIKO      .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>392cd2	00 c6 45 00
>392cd6	00 11 15 f5 32 05 00 10		MIDI_INSTRUMENT_MELOTOM    .text $00, $11, $15, $F5, $32, $05, $00, $10, $00, $F4, $B4, $00
>392cde	00 f4 b4 00
>392ce2	00 22 06 fa 99 09 00 01		MIDI_INSTRUMENT_SYNDRUM    .text $00, $22, $06, $FA, $99, $09, $00, $01, $00, $D5, $25, $00
>392cea	00 d5 25 00
>392cee	00 2e 00 ff 00 0f 02 0e		MIDI_INSTRUMENT_REVRSCYM   .text $00, $2E, $00, $FF, $00, $0F, $02, $0E, $0E, $21, $2D, $00
>392cf6	0e 21 2d 00
>392cfa	00 30 0b 56 e4 01 01 17		MIDI_INSTRUMENT_FRETNOIS   .text $00, $30, $0B, $56, $E4, $01, $01, $17, $00, $55, $87, $02
>392d02	00 55 87 02
>392d06	00 24 00 ff 03 0d 00 05		MIDI_INSTRUMENT_BRTHNOIS   .text $00, $24, $00, $FF, $03, $0D, $00, $05, $08, $98, $87, $01
>392d0e	08 98 87 01
>392d12	00 0e 00 f0 00 0f 02 0a		MIDI_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F0, $00, $0F, $02, $0A, $04, $17, $04, $03
>392d1a	04 17 04 03
>392d1e	00 20 08 f6 f7 01 00 0e		MIDI_INSTRUMENT_BIRDS      .text $00, $20, $08, $F6, $F7, $01, $00, $0E, $05, $77, $F9, $02
>392d26	05 77 f9 02
>392d2a	00 20 14 f1 08 01 00 2e		MIDI_INSTRUMENT_TELEPHON   .text $00, $20, $14, $F1, $08, $01, $00, $2E, $02, $F4, $08, $00
>392d32	02 f4 08 00
>392d36	00 20 04 f2 00 03 01 23		MIDI_INSTRUMENT_HELICOPT   .text $00, $20, $04, $F2, $00, $03, $01, $23, $00, $36, $05, $01
>392d3e	00 36 05 01
>392d42	00 2e 00 ff 02 0f 00 2a		MIDI_INSTRUMENT_APPLAUSE   .text $00, $2E, $00, $FF, $02, $0F, $00, $2A, $05, $32, $55, $03
>392d4a	05 32 55 03
>392d4e	00 20 00 a1 ef 0f 00 10		MIDI_INSTRUMENT_GUNSHOT    .text $00, $20, $00, $A1, $EF, $0F, $00, $10, $00, $F3, $DF, $00
>392d56	00 f3 df 00
>392d5a	5a 27 39 00 66 27 39 00		midiInstruments .dword MIDI_INSTRUMENT_PIANO1,   MIDI_INSTRUMENT_PIANO2,   MIDI_INSTRUMENT_PIANO3,   MIDI_INSTRUMENT_HONKTONK, MIDI_INSTRUMENT_EP1,      MIDI_INSTRUMENT_EP2
>392d62	72 27 39 00 7e 27 39 00 8a 27 39 00 96 27 39 00
>392d72	a2 27 39 00 ae 27 39 00		              	.dword MIDI_INSTRUMENT_HARPSIC,  MIDI_INSTRUMENT_CLAVIC,   MIDI_INSTRUMENT_CELESTA,  MIDI_INSTRUMENT_GLOCK,    MIDI_INSTRUMENT_MUSICBOX, MIDI_INSTRUMENT_VIBES
>392d7a	ba 27 39 00 c6 27 39 00 d2 27 39 00 de 27 39 00
>392d8a	ea 27 39 00 f6 27 39 00		              	.dword MIDI_INSTRUMENT_MARIMBA,  MIDI_INSTRUMENT_XYLO,     MIDI_INSTRUMENT_TUBEBELL, MIDI_INSTRUMENT_SANTUR,   MIDI_INSTRUMENT_ORGAN1,   MIDI_INSTRUMENT_ORGAN2
>392d92	02 28 39 00 0e 28 39 00 1a 28 39 00 26 28 39 00
>392da2	32 28 39 00 3e 28 39 00		              	.dword MIDI_INSTRUMENT_ORGAN3,   MIDI_INSTRUMENT_PIPEORG,  MIDI_INSTRUMENT_REEDORG,  MIDI_INSTRUMENT_ACORDIAN, MIDI_INSTRUMENT_HARMONIC, MIDI_INSTRUMENT_BANDNEON
>392daa	4a 28 39 00 56 28 39 00 62 28 39 00 6e 28 39 00
>392dba	7a 28 39 00 86 28 39 00		              	.dword MIDI_INSTRUMENT_NYLONGT,  MIDI_INSTRUMENT_STEELGT,  MIDI_INSTRUMENT_JAZZGT,   MIDI_INSTRUMENT_CLEANGT,  MIDI_INSTRUMENT_MUTEGT,   MIDI_INSTRUMENT_OVERDGT
>392dc2	92 28 39 00 9e 28 39 00 aa 28 39 00 b6 28 39 00
>392dd2	c2 28 39 00 ce 28 39 00		              	.dword MIDI_INSTRUMENT_DISTGT,   MIDI_INSTRUMENT_GTHARMS,  MIDI_INSTRUMENT_ACOUBASS, MIDI_INSTRUMENT_FINGBASS, MIDI_INSTRUMENT_PICKBASS, MIDI_INSTRUMENT_FRETLESS
>392dda	da 28 39 00 e6 28 39 00 f2 28 39 00 fe 28 39 00
>392dea	0a 29 39 00 16 29 39 00		              	.dword MIDI_INSTRUMENT_SLAPBAS1, MIDI_INSTRUMENT_SLAPBAS2, MIDI_INSTRUMENT_SYNBASS1, MIDI_INSTRUMENT_SYNBASS2, MIDI_INSTRUMENT_VIOLIN,   MIDI_INSTRUMENT_VIOLA
>392df2	22 29 39 00 2e 29 39 00 3a 29 39 00 46 29 39 00
>392e02	52 29 39 00 5e 29 39 00		              	.dword MIDI_INSTRUMENT_CELLO,    MIDI_INSTRUMENT_CONTRAB,  MIDI_INSTRUMENT_TREMSTR,  MIDI_INSTRUMENT_PIZZ,     MIDI_INSTRUMENT_HARP,     MIDI_INSTRUMENT_TIMPANI
>392e0a	6a 29 39 00 76 29 39 00 82 29 39 00 8e 29 39 00
>392e1a	9a 29 39 00 a6 29 39 00		              	.dword MIDI_INSTRUMENT_STRINGS,  MIDI_INSTRUMENT_SLOWSTR,  MIDI_INSTRUMENT_SYNSTR1,  MIDI_INSTRUMENT_SYNSTR2,  MIDI_INSTRUMENT_CHOIR,    MIDI_INSTRUMENT_OOHS
>392e22	b2 29 39 00 be 29 39 00 ca 29 39 00 d6 29 39 00
>392e32	e2 29 39 00 ee 29 39 00		              	.dword MIDI_INSTRUMENT_SYNVOX,   MIDI_INSTRUMENT_ORCHIT,   MIDI_INSTRUMENT_TRUMPET,  MIDI_INSTRUMENT_TROMBONE, MIDI_INSTRUMENT_TUBA,     MIDI_INSTRUMENT_MUTETRP
>392e3a	fa 29 39 00 06 2a 39 00 12 2a 39 00 1e 2a 39 00
>392e4a	2a 2a 39 00 36 2a 39 00		              	.dword MIDI_INSTRUMENT_FRHORN,   MIDI_INSTRUMENT_BRASS1,   MIDI_INSTRUMENT_SYNBRAS1, MIDI_INSTRUMENT_SYNBRAS2, MIDI_INSTRUMENT_SOPSAX,   MIDI_INSTRUMENT_ALTOSAX
>392e52	42 2a 39 00 4e 2a 39 00 5a 2a 39 00 66 2a 39 00
>392e62	72 2a 39 00 7e 2a 39 00		              	.dword MIDI_INSTRUMENT_TENSAX,   MIDI_INSTRUMENT_BARISAX,  MIDI_INSTRUMENT_OBOE,     MIDI_INSTRUMENT_ENGLHORN, MIDI_INSTRUMENT_BASSOON,  MIDI_INSTRUMENT_CLARINET
>392e6a	8a 2a 39 00 96 2a 39 00 a2 2a 39 00 ae 2a 39 00
>392e7a	ba 2a 39 00 c6 2a 39 00		              	.dword MIDI_INSTRUMENT_PICCOLO,  MIDI_INSTRUMENT_FLUTE1,   MIDI_INSTRUMENT_RECORDER, MIDI_INSTRUMENT_PANFLUTE, MIDI_INSTRUMENT_BOTTLEB,  MIDI_INSTRUMENT_SHAKU
>392e82	d2 2a 39 00 de 2a 39 00 ea 2a 39 00 f6 2a 39 00
>392e92	02 2b 39 00 0e 2b 39 00		              	.dword MIDI_INSTRUMENT_WHISTLE,  MIDI_INSTRUMENT_OCARINA,  MIDI_INSTRUMENT_SQUARWAV, MIDI_INSTRUMENT_SAWWAV,   MIDI_INSTRUMENT_SYNCALLI, MIDI_INSTRUMENT_CHIFLEAD
>392e9a	1a 2b 39 00 26 2b 39 00 32 2b 39 00 3e 2b 39 00
>392eaa	4a 2b 39 00 56 2b 39 00		              	.dword MIDI_INSTRUMENT_CHARANG,  MIDI_INSTRUMENT_SOLOVOX,  MIDI_INSTRUMENT_FIFTHSAW, MIDI_INSTRUMENT_BASSLEAD, MIDI_INSTRUMENT_FANTASIA, MIDI_INSTRUMENT_WARMPAD
>392eb2	62 2b 39 00 6e 2b 39 00 7a 2b 39 00 86 2b 39 00
>392ec2	92 2b 39 00 9e 2b 39 00		              	.dword MIDI_INSTRUMENT_POLYSYN,  MIDI_INSTRUMENT_SPACEVOX, MIDI_INSTRUMENT_BOWEDGLS, MIDI_INSTRUMENT_METALPAD, MIDI_INSTRUMENT_HALOPAD,  MIDI_INSTRUMENT_SWEEPPAD
>392eca	aa 2b 39 00 b6 2b 39 00 c2 2b 39 00 ce 2b 39 00
>392eda	da 2b 39 00 e6 2b 39 00		              	.dword MIDI_INSTRUMENT_ICERAIN,  MIDI_INSTRUMENT_SOUNDTRK, MIDI_INSTRUMENT_CRYSTAL,  MIDI_INSTRUMENT_ATMOSPH,  MIDI_INSTRUMENT_BRIGHT,   MIDI_INSTRUMENT_GOBLIN
>392ee2	f2 2b 39 00 fe 2b 39 00 0a 2c 39 00 16 2c 39 00
>392ef2	22 2c 39 00 2e 2c 39 00		              	.dword MIDI_INSTRUMENT_ECHODROP, MIDI_INSTRUMENT_STARTHEM, MIDI_INSTRUMENT_SITAR,    MIDI_INSTRUMENT_BANJO,    MIDI_INSTRUMENT_SHAMISEN, MIDI_INSTRUMENT_KOTO
>392efa	3a 2c 39 00 46 2c 39 00 52 2c 39 00 5e 2c 39 00
>392f0a	6a 2c 39 00 76 2c 39 00		              	.dword MIDI_INSTRUMENT_KALIMBA,  MIDI_INSTRUMENT_BAGPIPE,  MIDI_INSTRUMENT_FIDDLE,   MIDI_INSTRUMENT_SHANNAI,  MIDI_INSTRUMENT_TINKLBEL, MIDI_INSTRUMENT_AGOGO
>392f12	82 2c 39 00 8e 2c 39 00 9a 2c 39 00 a6 2c 39 00
>392f22	b2 2c 39 00 be 2c 39 00		              	.dword MIDI_INSTRUMENT_STEELDRM, MIDI_INSTRUMENT_WOODBLOK, MIDI_INSTRUMENT_TAIKO,    MIDI_INSTRUMENT_MELOTOM,  MIDI_INSTRUMENT_SYNDRUM,  MIDI_INSTRUMENT_REVRSCYM
>392f2a	ca 2c 39 00 d6 2c 39 00 e2 2c 39 00 ee 2c 39 00
>392f3a	fa 2c 39 00 06 2d 39 00		              	.dword MIDI_INSTRUMENT_FRETNOIS, MIDI_INSTRUMENT_BRTHNOIS, MIDI_INSTRUMENT_SEASHORE, MIDI_INSTRUMENT_BIRDS,    MIDI_INSTRUMENT_TELEPHON, MIDI_INSTRUMENT_HELICOPT
>392f42	12 2d 39 00 1e 2d 39 00 2a 2d 39 00 36 2d 39 00
>392f52	42 2d 39 00 4e 2d 39 00		              	.dword MIDI_INSTRUMENT_APPLAUSE, MIDI_INSTRUMENT_GUNSHOT

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Instruments_Win31.asm

>392f5a	00 01 8f f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO1     .text $00, $01, $8F, $F2, $F4, $38, $00, $01, $0D, $F2, $F7, $00
>392f62	0d f2 f7 00
>392f66	00 01 4b f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO2     .text $00, $01, $4B, $F2, $F4, $38, $00, $01, $07, $F2, $F7, $00
>392f6e	07 f2 f7 00
>392f72	00 01 49 f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO3     .text $00, $01, $49, $F2, $F4, $38, $00, $01, $07, $F2, $F6, $00
>392f7a	07 f2 f6 00
>392f7e	00 81 12 f2 f7 00 00 41		MIDIW31_INSTRUMENT_HONKTONK   .text $00, $81, $12, $F2, $F7, $00, $00, $41, $07, $F2, $F7, $00
>392f86	07 f2 f7 00
>392f8a	00 01 57 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP1        .text $00, $01, $57, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>392f92	07 f2 f7 00
>392f96	00 01 93 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP2        .text $00, $01, $93, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>392f9e	07 f2 f7 00
>392fa2	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HARPSIC    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392faa	00 00 00 00
>392fae	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLAVIC     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392fb6	00 00 00 00
>392fba	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELESTA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392fc2	00 00 00 00
>392fc6	00 07 97 f3 f2 32 00 11		MIDIW31_INSTRUMENT_GLOCK      .text $00, $07, $97, $F3, $F2, $32, $00, $11, $87, $F2, $F1, $00
>392fce	87 f2 f1 00
>392fd2	00 17 21 54 f4 32 00 01		MIDIW31_INSTRUMENT_MUSICBOX   .text $00, $17, $21, $54, $F4, $32, $00, $01, $07, $F4, $F4, $00
>392fda	07 f4 f4 00
>392fde	00 98 62 f3 f6 30 00 81		MIDIW31_INSTRUMENT_VIBES      .text $00, $98, $62, $F3, $F6, $30, $00, $81, $07, $F2, $F6, $00
>392fe6	07 f2 f6 00
>392fea	00 18 23 f6 f6 00 00 01		MIDIW31_INSTRUMENT_MARIMBA    .text $00, $18, $23, $F6, $F6, $00, $00, $01, $07, $E7, $F7, $00
>392ff2	07 e7 f7 00
>392ff6	00 15 91 f6 f6 00 00 01		MIDIW31_INSTRUMENT_XYLO       .text $00, $15, $91, $F6, $F6, $00, $00, $01, $07, $F6, $F6, $00
>392ffe	07 f6 f6 00
>393002	00 45 59 d3 f3 00 00 81		MIDIW31_INSTRUMENT_TUBEBELL   .text $00, $45, $59, $D3, $F3, $00, $00, $81, $87, $A3, $F3, $00
>39300a	87 a3 f3 00
>39300e	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SANTUR     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393016	00 00 00 00
>39301a	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393022	00 00 00 00
>393026	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN2     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39302e	00 00 00 00
>393032	00 70 44 aa 18 34 00 b1		MIDIW31_INSTRUMENT_ORGAN3     .text $00, $70, $44, $AA, $18, $34, $00, $B1, $07, $8A, $08, $00
>39303a	07 8a 08 00
>39303e	00 23 93 97 23 34 01 b1		MIDIW31_INSTRUMENT_PIPEORG    .text $00, $23, $93, $97, $23, $34, $01, $B1, $07, $55, $14, $00
>393046	07 55 14 00
>39304a	00 61 13 97 04 30 01 b1		MIDIW31_INSTRUMENT_REEDORG    .text $00, $61, $13, $97, $04, $30, $01, $B1, $87, $55, $04, $00
>393052	87 55 04 00
>393056	00 24 48 98 2a 30 01 b1		MIDIW31_INSTRUMENT_ACORDIAN   .text $00, $24, $48, $98, $2A, $30, $01, $B1, $07, $46, $1A, $00
>39305e	07 46 1a 00
>393062	00 61 13 91 06 00 01 21		MIDIW31_INSTRUMENT_HARMONIC   .text $00, $61, $13, $91, $06, $00, $01, $21, $07, $61, $07, $00
>39306a	07 61 07 00
>39306e	00 21 13 71 06 00 00 a1		MIDIW31_INSTRUMENT_BANDNEON   .text $00, $21, $13, $71, $06, $00, $00, $A1, $90, $61, $07, $00
>393076	90 61 07 00
>39307a	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_NYLONGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393082	00 00 00 00
>393086	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39308e	00 00 00 00
>393092	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_JAZZGT     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39309a	00 00 00 00
>39309e	00 03 87 f6 22 36 01 21		MIDIW31_INSTRUMENT_CLEANGT    .text $00, $03, $87, $F6, $22, $36, $01, $21, $87, $F3, $F8, $00
>3930a6	87 f3 f8 00
>3930aa	00 03 47 f9 54 30 00 21		MIDIW31_INSTRUMENT_MUTEGT     .text $00, $03, $47, $F9, $54, $30, $00, $21, $07, $F6, $3A, $00
>3930b2	07 f6 3a 00
>3930b6	00 23 4a 91 41 38 01 21		MIDIW31_INSTRUMENT_OVERDGT    .text $00, $23, $4A, $91, $41, $38, $01, $21, $0C, $84, $19, $00
>3930be	0c 84 19 00
>3930c2	00 23 4a 95 19 32 01 21		MIDIW31_INSTRUMENT_DISTGT     .text $00, $23, $4A, $95, $19, $32, $01, $21, $07, $94, $19, $00
>3930ca	07 94 19 00
>3930ce	00 09 a1 20 4f 00 00 84		MIDIW31_INSTRUMENT_GTHARMS    .text $00, $09, $A1, $20, $4F, $00, $00, $84, $87, $D1, $F8, $00
>3930d6	87 d1 f8 00
>3930da	00 21 1e 94 06 00 00 a2		MIDIW31_INSTRUMENT_ACOUBASS   .text $00, $21, $1E, $94, $06, $00, $00, $A2, $07, $C3, $A6, $00
>3930e2	07 c3 a6 00
>3930e6	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FINGBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3930ee	00 00 00 00
>3930f2	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_PICKBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3930fa	00 00 00 00
>3930fe	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRETLESS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393106	00 00 00 00
>39310a	00 01 8b a1 9a 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS1   .text $00, $01, $8B, $A1, $9A, $38, $00, $21, $47, $F2, $DF, $00
>393112	47 f2 df 00
>393116	00 21 8b a2 16 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS2   .text $00, $21, $8B, $A2, $16, $38, $00, $21, $0F, $A1, $DF, $00
>39311e	0f a1 df 00
>393122	00 31 8b f4 e8 3a 00 31		MIDIW31_INSTRUMENT_SYNBASS1   .text $00, $31, $8B, $F4, $E8, $3A, $00, $31, $07, $F1, $78, $00
>39312a	07 f1 78 00
>39312e	00 31 12 f1 28 30 00 31		MIDIW31_INSTRUMENT_SYNBASS2   .text $00, $31, $12, $F1, $28, $30, $00, $31, $07, $F1, $18, $00
>393136	07 f1 18 00
>39313a	00 31 15 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLIN     .text $00, $31, $15, $DD, $13, $00, $01, $21, $07, $56, $26, $00
>393142	07 56 26 00
>393146	00 31 16 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLA      .text $00, $31, $16, $DD, $13, $00, $01, $21, $07, $66, $06, $00
>39314e	07 66 06 00
>393152	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELLO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39315a	00 00 00 00
>39315e	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CONTRAB    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393166	00 00 00 00
>39316a	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TREMSTR    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393172	00 00 00 00
>393176	00 02 1a f5 75 30 01 01		MIDIW31_INSTRUMENT_PIZZ       .text $00, $02, $1A, $F5, $75, $30, $01, $01, $87, $85, $35, $00
>39317e	87 85 35 00
>393182	00 02 1d f5 75 30 01 01		MIDIW31_INSTRUMENT_HARP       .text $00, $02, $1D, $F5, $75, $30, $01, $01, $87, $F3, $F4, $00
>39318a	87 f3 f4 00
>39318e	00 10 41 f5 05 32 01 11		MIDIW31_INSTRUMENT_TIMPANI    .text $00, $10, $41, $F5, $05, $32, $01, $11, $07, $F2, $C3, $00
>393196	07 f2 c3 00
>39319a	00 21 9b b1 25 3c 01 a2		MIDIW31_INSTRUMENT_STRINGS    .text $00, $21, $9B, $B1, $25, $3C, $01, $A2, $08, $72, $08, $00
>3931a2	08 72 08 00
>3931a6	00 a1 98 7f 03 00 01 21		MIDIW31_INSTRUMENT_SLOWSTR    .text $00, $A1, $98, $7F, $03, $00, $01, $21, $07, $3F, $07, $01
>3931ae	07 3f 07 01
>3931b2	00 a1 93 c1 12 00 00 61		MIDIW31_INSTRUMENT_SYNSTR1    .text $00, $A1, $93, $C1, $12, $00, $00, $61, $07, $4F, $05, $00
>3931ba	07 4f 05 00
>3931be	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNSTR2    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3931c6	00 00 00 00
>3931ca	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CHOIR      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3931d2	00 00 00 00
>3931d6	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OOHS       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3931de	00 00 00 00
>3931e2	00 71 57 54 05 3c 00 72		MIDIW31_INSTRUMENT_SYNVOX     .text $00, $71, $57, $54, $05, $3C, $00, $72, $07, $7A, $05, $00
>3931ea	07 7a 05 00
>3931ee	00 90 00 54 63 38 00 41		MIDIW31_INSTRUMENT_ORCHIT     .text $00, $90, $00, $54, $63, $38, $00, $41, $07, $A5, $45, $00
>3931f6	07 a5 45 00
>3931fa	00 21 92 85 17 3c 00 21		MIDIW31_INSTRUMENT_TRUMPET    .text $00, $21, $92, $85, $17, $3C, $00, $21, $08, $8F, $09, $00
>393202	08 8f 09 00
>393206	00 21 94 75 17 32 00 21		MIDIW31_INSTRUMENT_TROMBONE   .text $00, $21, $94, $75, $17, $32, $00, $21, $0C, $8F, $09, $00
>39320e	0c 8f 09 00
>393212	00 21 94 76 15 00 00 61		MIDIW31_INSTRUMENT_TUBA       .text $00, $21, $94, $76, $15, $00, $00, $61, $07, $82, $37, $00
>39321a	07 82 37 00
>39321e	00 31 43 9e 17 00 01 21		MIDIW31_INSTRUMENT_MUTETRP    .text $00, $31, $43, $9E, $17, $00, $01, $21, $07, $62, $2C, $01
>393226	07 62 2c 01
>39322a	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRHORN     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393232	00 00 00 00
>393236	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BRASS1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39323e	00 00 00 00
>393242	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNBRAS1   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39324a	00 00 00 00
>39324e	00 21 4d 54 3c 38 00 21		MIDIW31_INSTRUMENT_SYNBRAS2   .text $00, $21, $4D, $54, $3C, $38, $00, $21, $07, $A6, $1C, $00
>393256	07 a6 1c 00
>39325a	00 31 8f 93 02 38 01 61		MIDIW31_INSTRUMENT_SOPSAX     .text $00, $31, $8F, $93, $02, $38, $01, $61, $07, $72, $0B, $00
>393262	07 72 0b 00
>393266	00 31 8e 93 03 38 01 61		MIDIW31_INSTRUMENT_ALTOSAX    .text $00, $31, $8E, $93, $03, $38, $01, $61, $07, $72, $09, $00
>39326e	07 72 09 00
>393272	00 31 91 93 03 30 01 61		MIDIW31_INSTRUMENT_TENSAX     .text $00, $31, $91, $93, $03, $30, $01, $61, $07, $82, $09, $00
>39327a	07 82 09 00
>39327e	00 31 8e 93 0f 00 01 61		MIDIW31_INSTRUMENT_BARISAX    .text $00, $31, $8E, $93, $0F, $00, $01, $61, $07, $72, $0F, $00
>393286	07 72 0f 00
>39328a	00 21 4b aa 16 00 01 21		MIDIW31_INSTRUMENT_OBOE       .text $00, $21, $4B, $AA, $16, $00, $01, $21, $07, $8F, $0A, $00
>393292	07 8f 0a 00
>393296	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ENGLHORN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39329e	00 00 00 00
>3932a2	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSOON    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3932aa	00 00 00 00
>3932ae	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLARINET   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3932b6	00 00 00 00
>3932ba	00 e1 1f 85 5f 30 00 e1		MIDIW31_INSTRUMENT_PICCOLO    .text $00, $E1, $1F, $85, $5F, $30, $00, $E1, $07, $65, $1A, $00
>3932c2	07 65 1a 00
>3932c6	00 e1 46 88 5f 30 00 e1		MIDIW31_INSTRUMENT_FLUTE1     .text $00, $E1, $46, $88, $5F, $30, $00, $E1, $07, $65, $1A, $00
>3932ce	07 65 1a 00
>3932d2	00 a1 9c 75 1f 32 00 21		MIDIW31_INSTRUMENT_RECORDER   .text $00, $A1, $9C, $75, $1F, $32, $00, $21, $07, $75, $0A, $00
>3932da	07 75 0a 00
>3932de	00 31 8b 84 58 30 00 21		MIDIW31_INSTRUMENT_PANFLUTE   .text $00, $31, $8B, $84, $58, $30, $00, $21, $07, $65, $1A, $00
>3932e6	07 65 1a 00
>3932ea	00 e1 4c 66 56 00 00 a1		MIDIW31_INSTRUMENT_BOTTLEB    .text $00, $E1, $4C, $66, $56, $00, $00, $A1, $07, $65, $26, $00
>3932f2	07 65 26 00
>3932f6	00 62 cb 76 46 00 00 a1		MIDIW31_INSTRUMENT_SHAKU      .text $00, $62, $CB, $76, $46, $00, $00, $A1, $07, $55, $36, $00
>3932fe	07 55 36 00
>393302	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WHISTLE    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39330a	00 00 00 00
>39330e	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OCARINA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393316	00 00 00 00
>39331a	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SQUARWAV   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393322	00 00 00 00
>393326	00 21 0e ff 0f 30 01 21		MIDIW31_INSTRUMENT_SAWWAV     .text $00, $21, $0E, $FF, $0F, $30, $01, $21, $07, $FF, $0F, $01
>39332e	07 ff 0f 01
>393332	00 22 46 86 55 30 00 21		MIDIW31_INSTRUMENT_SYNCALLI   .text $00, $22, $46, $86, $55, $30, $00, $21, $87, $64, $18, $00
>39333a	87 64 18 00
>39333e	00 21 45 66 12 30 00 a1		MIDIW31_INSTRUMENT_CHIFLEAD   .text $00, $21, $45, $66, $12, $30, $00, $A1, $07, $96, $0A, $00
>393346	07 96 0a 00
>39334a	00 21 8b 92 2a 34 01 22		MIDIW31_INSTRUMENT_CHARANG    .text $00, $21, $8B, $92, $2A, $34, $01, $22, $07, $91, $2A, $00
>393352	07 91 2a 00
>393356	00 a2 9e df 05 00 00 61		MIDIW31_INSTRUMENT_SOLOVOX    .text $00, $A2, $9E, $DF, $05, $00, $00, $61, $47, $6F, $07, $00
>39335e	47 6f 07 00
>393362	00 20 1a ef 01 00 00 60		MIDIW31_INSTRUMENT_FIFTHSAW   .text $00, $20, $1A, $EF, $01, $00, $00, $60, $07, $8F, $06, $02
>39336a	07 8f 06 02
>39336e	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSLEAD   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393376	00 00 00 00
>39337a	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FANTASIA   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393382	00 00 00 00
>393386	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WARMPAD    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39338e	00 00 00 00
>393392	00 61 17 91 34 3c 00 61		MIDIW31_INSTRUMENT_POLYSYN    .text $00, $61, $17, $91, $34, $3C, $00, $61, $07, $55, $16, $00
>39339a	07 55 16 00
>39339e	00 71 5d 54 01 30 00 72		MIDIW31_INSTRUMENT_SPACEVOX   .text $00, $71, $5D, $54, $01, $30, $00, $72, $07, $6A, $03, $00
>3933a6	07 6a 03 00
>3933aa	00 21 97 21 43 38 00 a2		MIDIW31_INSTRUMENT_BOWEDGLS   .text $00, $21, $97, $21, $43, $38, $00, $A2, $07, $42, $35, $00
>3933b2	07 42 35 00
>3933b6	00 a1 1c a1 77 30 01 21		MIDIW31_INSTRUMENT_METALPAD   .text $00, $A1, $1C, $A1, $77, $30, $01, $21, $07, $31, $47, $01
>3933be	07 31 47 01
>3933c2	00 21 89 11 33 00 00 61		MIDIW31_INSTRUMENT_HALOPAD    .text $00, $21, $89, $11, $33, $00, $00, $61, $0A, $42, $25, $00
>3933ca	0a 42 25 00
>3933ce	00 a1 15 11 47 00 01 21		MIDIW31_INSTRUMENT_SWEEPPAD   .text $00, $A1, $15, $11, $47, $00, $01, $21, $07, $CF, $07, $00
>3933d6	07 cf 07 00
>3933da	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ICERAIN    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3933e2	00 00 00 00
>3933e6	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SOUNDTRK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3933ee	00 00 00 00
>3933f2	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CRYSTAL    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3933fa	00 00 00 00
>3933fe	00 22 92 b1 81 3c 00 61		MIDIW31_INSTRUMENT_ATMOSPH    .text $00, $22, $92, $B1, $81, $3C, $00, $61, $8A, $F2, $26, $00
>393406	8a f2 26 00
>39340a	00 41 4d f1 51 30 01 42		MIDIW31_INSTRUMENT_BRIGHT     .text $00, $41, $4D, $F1, $51, $30, $01, $42, $07, $F2, $F5, $00
>393412	07 f2 f5 00
>393416	00 61 94 11 51 36 01 a3		MIDIW31_INSTRUMENT_GOBLIN     .text $00, $61, $94, $11, $51, $36, $01, $A3, $87, $11, $13, $00
>39341e	87 11 13 00
>393422	00 61 8c 11 31 3a 00 a1		MIDIW31_INSTRUMENT_ECHODROP   .text $00, $61, $8C, $11, $31, $3A, $00, $A1, $87, $1D, $03, $00
>39342a	87 1d 03 00
>39342e	00 a4 4c f3 73 00 01 61		MIDIW31_INSTRUMENT_STARTHEM   .text $00, $A4, $4C, $F3, $73, $00, $01, $61, $07, $81, $23, $00
>393436	07 81 23 00
>39343a	00 02 85 d2 53 00 00 07		MIDIW31_INSTRUMENT_SITAR      .text $00, $02, $85, $D2, $53, $00, $00, $07, $0A, $F2, $F6, $01
>393442	0a f2 f6 01
>393446	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BANJO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39344e	00 00 00 00
>393452	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SHAMISEN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39345a	00 00 00 00
>39345e	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_KOTO       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393466	00 00 00 00
>39346a	00 04 4f fa 56 3c 00 01		MIDIW31_INSTRUMENT_KALIMBA    .text $00, $04, $4F, $FA, $56, $3C, $00, $01, $07, $C2, $05, $00
>393472	07 c2 05 00
>393476	00 21 49 7c 20 36 00 22		MIDIW31_INSTRUMENT_BAGPIPE    .text $00, $21, $49, $7C, $20, $36, $00, $22, $07, $6F, $0C, $01
>39347e	07 6f 0c 01
>393482	00 31 85 dd 33 3a 01 21		MIDIW31_INSTRUMENT_FIDDLE     .text $00, $31, $85, $DD, $33, $3A, $01, $21, $07, $56, $16, $00
>39348a	07 56 16 00
>39348e	00 20 04 da 05 30 02 21		MIDIW31_INSTRUMENT_SHANNAI    .text $00, $20, $04, $DA, $05, $30, $02, $21, $88, $8F, $0B, $00
>393496	88 8f 0b 00
>39349a	00 05 6a f1 e5 00 00 03		MIDIW31_INSTRUMENT_TINKLBEL   .text $00, $05, $6A, $F1, $E5, $00, $00, $03, $87, $C3, $E5, $00
>3934a2	87 c3 e5 00
>3934a6	00 07 15 ec 26 00 00 02		MIDIW31_INSTRUMENT_AGOGO      .text $00, $07, $15, $EC, $26, $00, $00, $02, $07, $F8, $16, $00
>3934ae	07 f8 16 00
>3934b2	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELDRM   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3934ba	00 00 00 00
>3934be	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WOODBLOK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3934c6	00 00 00 00
>3934ca	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TAIKO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3934d2	00 00 00 00
>3934d6	00 11 41 f8 47 34 02 10		MIDIW31_INSTRUMENT_MELOTOM    .text $00, $11, $41, $F8, $47, $34, $02, $10, $0A, $F3, $03, $00
>3934de	0a f3 03 00
>3934e2	00 01 8e f1 06 3e 02 10		MIDIW31_INSTRUMENT_SYNDRUM    .text $00, $01, $8E, $F1, $06, $3E, $02, $10, $07, $F3, $02, $00
>3934ea	07 f3 02 00
>3934ee	00 0e 00 1f 00 3e 00 c0		MIDIW31_INSTRUMENT_REVRSCYM   .text $00, $0E, $00, $1F, $00, $3E, $00, $C0, $07, $1F, $FF, $03
>3934f6	07 1f ff 03
>3934fa	00 06 80 f8 24 38 00 03		MIDIW31_INSTRUMENT_FRETNOIS   .text $00, $06, $80, $F8, $24, $38, $00, $03, $8F, $56, $84, $02
>393502	8f 56 84 02
>393506	00 0e 00 f8 00 00 00 d0		MIDIW31_INSTRUMENT_BRTHNOIS   .text $00, $0E, $00, $F8, $00, $00, $00, $D0, $0C, $34, $04, $03
>39350e	0c 34 04 03
>393512	00 0e 00 f6 00 00 00 c0		MIDIW31_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F6, $00, $00, $00, $C0, $07, $1F, $02, $03
>39351a	07 1f 02 03
>39351e	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BIRDS      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393526	00 00 00 00
>39352a	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TELEPHON   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393532	00 00 00 00
>393536	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HELICOPT   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39353e	00 00 00 00
>393542	00 26 00 ff 01 3e 00 e4		MIDIW31_INSTRUMENT_APPLAUSE   .text $00, $26, $00, $FF, $01, $3E, $00, $E4, $07, $12, $16, $01
>39354a	07 12 16 01
>39354e	00 00 00 f3 f0 3e 00 00		MIDIW31_INSTRUMENT_GUNSHOT    .text $00, $00, $00, $F3, $F0, $3E, $00, $00, $07, $F6, $C9, $02
>393556	07 f6 c9 02
>39355a	5a 2f 39 00 66 2f 39 00		midiInstrumentsw31 .dword MIDIW31_INSTRUMENT_PIANO1,   MIDIW31_INSTRUMENT_PIANO2,   MIDIW31_INSTRUMENT_PIANO3,   MIDIW31_INSTRUMENT_HONKTONK, MIDIW31_INSTRUMENT_EP1, MIDIW31_INSTRUMENT_EP2
>393562	72 2f 39 00 7e 2f 39 00 8a 2f 39 00 96 2f 39 00
>393572	a2 2f 39 00 ae 2f 39 00		                   .dword MIDIW31_INSTRUMENT_HARPSIC,  MIDIW31_INSTRUMENT_CLAVIC,   MIDIW31_INSTRUMENT_CELESTA,  MIDIW31_INSTRUMENT_GLOCK,    MIDIW31_INSTRUMENT_MUSICBOX, MIDIW31_INSTRUMENT_VIBES
>39357a	ba 2f 39 00 c6 2f 39 00 d2 2f 39 00 de 2f 39 00
>39358a	ea 2f 39 00 f6 2f 39 00			                 .dword MIDIW31_INSTRUMENT_MARIMBA,  MIDIW31_INSTRUMENT_XYLO,     MIDIW31_INSTRUMENT_TUBEBELL, MIDIW31_INSTRUMENT_SANTUR,   MIDIW31_INSTRUMENT_ORGAN1,   MIDIW31_INSTRUMENT_ORGAN2
>393592	02 30 39 00 0e 30 39 00 1a 30 39 00 26 30 39 00
>3935a2	32 30 39 00 3e 30 39 00			                 .dword MIDIW31_INSTRUMENT_ORGAN3,   MIDIW31_INSTRUMENT_PIPEORG,  MIDIW31_INSTRUMENT_REEDORG,  MIDIW31_INSTRUMENT_ACORDIAN, MIDIW31_INSTRUMENT_HARMONIC, MIDIW31_INSTRUMENT_BANDNEON
>3935aa	4a 30 39 00 56 30 39 00 62 30 39 00 6e 30 39 00
>3935ba	7a 30 39 00 86 30 39 00		                     .dword MIDIW31_INSTRUMENT_NYLONGT,  MIDIW31_INSTRUMENT_STEELGT,  MIDIW31_INSTRUMENT_JAZZGT,   MIDIW31_INSTRUMENT_CLEANGT,  MIDIW31_INSTRUMENT_MUTEGT,   MIDIW31_INSTRUMENT_OVERDGT
>3935c2	92 30 39 00 9e 30 39 00 aa 30 39 00 b6 30 39 00
>3935d2	c2 30 39 00 ce 30 39 00			                 .dword MIDIW31_INSTRUMENT_DISTGT,   MIDIW31_INSTRUMENT_GTHARMS,  MIDIW31_INSTRUMENT_ACOUBASS, MIDIW31_INSTRUMENT_FINGBASS, MIDIW31_INSTRUMENT_PICKBASS, MIDIW31_INSTRUMENT_FRETLESS
>3935da	da 30 39 00 e6 30 39 00 f2 30 39 00 fe 30 39 00
>3935ea	0a 31 39 00 16 31 39 00			                 .dword MIDIW31_INSTRUMENT_SLAPBAS1, MIDIW31_INSTRUMENT_SLAPBAS2, MIDIW31_INSTRUMENT_SYNBASS1, MIDIW31_INSTRUMENT_SYNBASS2, MIDIW31_INSTRUMENT_VIOLIN,   MIDIW31_INSTRUMENT_VIOLA
>3935f2	22 31 39 00 2e 31 39 00 3a 31 39 00 46 31 39 00
>393602	52 31 39 00 5e 31 39 00			                 .dword MIDIW31_INSTRUMENT_CELLO,    MIDIW31_INSTRUMENT_CONTRAB,  MIDIW31_INSTRUMENT_TREMSTR,  MIDIW31_INSTRUMENT_PIZZ,     MIDIW31_INSTRUMENT_HARP,     MIDIW31_INSTRUMENT_TIMPANI
>39360a	6a 31 39 00 76 31 39 00 82 31 39 00 8e 31 39 00
>39361a	9a 31 39 00 a6 31 39 00			                 .dword MIDIW31_INSTRUMENT_STRINGS,  MIDIW31_INSTRUMENT_SLOWSTR,  MIDIW31_INSTRUMENT_SYNSTR1,  MIDIW31_INSTRUMENT_SYNSTR2,  MIDIW31_INSTRUMENT_CHOIR,    MIDIW31_INSTRUMENT_OOHS
>393622	b2 31 39 00 be 31 39 00 ca 31 39 00 d6 31 39 00
>393632	e2 31 39 00 ee 31 39 00			                 .dword MIDIW31_INSTRUMENT_SYNVOX,   MIDIW31_INSTRUMENT_ORCHIT,   MIDIW31_INSTRUMENT_TRUMPET,  MIDIW31_INSTRUMENT_TROMBONE, MIDIW31_INSTRUMENT_TUBA,     MIDIW31_INSTRUMENT_MUTETRP
>39363a	fa 31 39 00 06 32 39 00 12 32 39 00 1e 32 39 00
>39364a	2a 32 39 00 36 32 39 00			                 .dword MIDIW31_INSTRUMENT_FRHORN,   MIDIW31_INSTRUMENT_BRASS1,   MIDIW31_INSTRUMENT_SYNBRAS1, MIDIW31_INSTRUMENT_SYNBRAS2, MIDIW31_INSTRUMENT_SOPSAX,   MIDIW31_INSTRUMENT_ALTOSAX
>393652	42 32 39 00 4e 32 39 00 5a 32 39 00 66 32 39 00
>393662	72 32 39 00 7e 32 39 00			                 .dword MIDIW31_INSTRUMENT_TENSAX,   MIDIW31_INSTRUMENT_BARISAX,  MIDIW31_INSTRUMENT_OBOE,     MIDIW31_INSTRUMENT_ENGLHORN, MIDIW31_INSTRUMENT_BASSOON,  MIDIW31_INSTRUMENT_CLARINET
>39366a	8a 32 39 00 96 32 39 00 a2 32 39 00 ae 32 39 00
>39367a	ba 32 39 00 c6 32 39 00			                 .dword MIDIW31_INSTRUMENT_PICCOLO,  MIDIW31_INSTRUMENT_FLUTE1,   MIDIW31_INSTRUMENT_RECORDER, MIDIW31_INSTRUMENT_PANFLUTE, MIDIW31_INSTRUMENT_BOTTLEB,  MIDIW31_INSTRUMENT_SHAKU
>393682	d2 32 39 00 de 32 39 00 ea 32 39 00 f6 32 39 00
>393692	02 33 39 00 0e 33 39 00			                 .dword MIDIW31_INSTRUMENT_WHISTLE,  MIDIW31_INSTRUMENT_OCARINA,  MIDIW31_INSTRUMENT_SQUARWAV, MIDIW31_INSTRUMENT_SAWWAV,   MIDIW31_INSTRUMENT_SYNCALLI, MIDIW31_INSTRUMENT_CHIFLEAD
>39369a	1a 33 39 00 26 33 39 00 32 33 39 00 3e 33 39 00
>3936aa	4a 33 39 00 56 33 39 00			                 .dword MIDIW31_INSTRUMENT_CHARANG,  MIDIW31_INSTRUMENT_SOLOVOX,  MIDIW31_INSTRUMENT_FIFTHSAW, MIDIW31_INSTRUMENT_BASSLEAD, MIDIW31_INSTRUMENT_FANTASIA, MIDIW31_INSTRUMENT_WARMPAD
>3936b2	62 33 39 00 6e 33 39 00 7a 33 39 00 86 33 39 00
>3936c2	92 33 39 00 9e 33 39 00			                 .dword MIDIW31_INSTRUMENT_POLYSYN,  MIDIW31_INSTRUMENT_SPACEVOX, MIDIW31_INSTRUMENT_BOWEDGLS, MIDIW31_INSTRUMENT_METALPAD, MIDIW31_INSTRUMENT_HALOPAD,  MIDIW31_INSTRUMENT_SWEEPPAD
>3936ca	aa 33 39 00 b6 33 39 00 c2 33 39 00 ce 33 39 00
>3936da	da 33 39 00 e6 33 39 00			                 .dword MIDIW31_INSTRUMENT_ICERAIN,  MIDIW31_INSTRUMENT_SOUNDTRK, MIDIW31_INSTRUMENT_CRYSTAL,  MIDIW31_INSTRUMENT_ATMOSPH,  MIDIW31_INSTRUMENT_BRIGHT,   MIDIW31_INSTRUMENT_GOBLIN
>3936e2	f2 33 39 00 fe 33 39 00 0a 34 39 00 16 34 39 00
>3936f2	22 34 39 00 2e 34 39 00			                 .dword MIDIW31_INSTRUMENT_ECHODROP, MIDIW31_INSTRUMENT_STARTHEM, MIDIW31_INSTRUMENT_SITAR,    MIDIW31_INSTRUMENT_BANJO,    MIDIW31_INSTRUMENT_SHAMISEN, MIDIW31_INSTRUMENT_KOTO
>3936fa	3a 34 39 00 46 34 39 00 52 34 39 00 5e 34 39 00
>39370a	6a 34 39 00 76 34 39 00			                 .dword MIDIW31_INSTRUMENT_KALIMBA,  MIDIW31_INSTRUMENT_BAGPIPE,  MIDIW31_INSTRUMENT_FIDDLE,   MIDIW31_INSTRUMENT_SHANNAI,  MIDIW31_INSTRUMENT_TINKLBEL, MIDIW31_INSTRUMENT_AGOGO
>393712	82 34 39 00 8e 34 39 00 9a 34 39 00 a6 34 39 00
>393722	b2 34 39 00 be 34 39 00			                 .dword MIDIW31_INSTRUMENT_STEELDRM, MIDIW31_INSTRUMENT_WOODBLOK, MIDIW31_INSTRUMENT_TAIKO,    MIDIW31_INSTRUMENT_MELOTOM,  MIDIW31_INSTRUMENT_SYNDRUM,  MIDIW31_INSTRUMENT_REVRSCYM
>39372a	ca 34 39 00 d6 34 39 00 e2 34 39 00 ee 34 39 00
>39373a	fa 34 39 00 06 35 39 00			                 .dword MIDIW31_INSTRUMENT_FRETNOIS, MIDIW31_INSTRUMENT_BRTHNOIS, MIDIW31_INSTRUMENT_SEASHORE, MIDIW31_INSTRUMENT_BIRDS,    MIDIW31_INSTRUMENT_TELEPHON, MIDIW31_INSTRUMENT_HELICOPT
>393742	12 35 39 00 1e 35 39 00 2a 35 39 00 36 35 39 00
>393752	42 35 39 00 4e 35 39 00			                 .dword MIDIW31_INSTRUMENT_APPLAUSE, MIDIW31_INSTRUMENT_GUNSHOT

;******  Return to file: src\OPL2_Library.asm

>39375a	3c 42 44 45 47 49 4b 4c		NOTE_INTRO  .byte  $3C, $42, $44, $45, $47, $49, $4B, $4C
.393762					IOPL2_TONE_TEST
.393762	e2 20		sep #$20	                SEP #$20        ; set A short
.393764	c2 10		rep #$10	                REP #$10        ; set X long
.393766	a2 00 00	ldx #$0000	                LDX #0
.393769					OPL2_TONE_TESTING_L1
.393769	bf 5a 37 39	lda $39375a,x	                LDA NOTE_INTRO, X
.39376d	29 0f		and #$0f	                AND #$F
.39376f	85 30		sta $30		                STA OPL2_NOTE ; start at C
.393771	bf 5a 37 39	lda $39375a,x	                LDA NOTE_INTRO, X
.393775	29 70		and #$70	                AND #$70
.393777	4a		lsr a		                LSR A
.393778	4a		lsr a		                LSR A
.393779	4a		lsr a		                LSR A
.39377a	4a		lsr a		                LSR A
.39377b	85 31		sta $31		                STA OPL2_OCTAVE
.39377d	8a		txa		                TXA
.39377e	29 03		and #$03	                AND #$03        ; replace modulo 3 -  play each note on a different channel
.393780	85 27		sta $27		                STA OPL2_CHANNEL
.393782	22 52 39 39	jsl $393952	                JSL OPL2_PLAYNOTE
.393786	a0 00 00	ldy #$0000	                LDY #$0000
.393789					OPL2_TONE_TESTING_L2
.393789	ea		nop		                NOP
.39378a	ea		nop		                NOP
.39378b	ea		nop		                NOP
.39378c	ea		nop		                NOP
.39378d	c8		iny		                INY
.39378e	c0 ff ff	cpy #$ffff	                CPY #$FFFF
.393791	d0 f6		bne $393789	                BNE OPL2_TONE_TESTING_L2
.393793	e8		inx		                INX
.393794	e0 08 00	cpx #$0008	                CPX #8
.393797	d0 d0		bne $393769	                BNE OPL2_TONE_TESTING_L1
.393799	6b		rtl		                RTL
.39379a					OPL2_INIT
.39379a	c2 20		rep #$20	                REP #$20        ; set A long
.39379c	a9 00 00	lda #$0000	                LDA #$0000
.39379f	85 28		sta $28		                STA OPL2_REG_REGION
.3937a1	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.3937a3	85 30		sta $30		                STA OPL2_NOTE
.3937a5	85 32		sta $32		                STA OPL2_PARAMETER0
.3937a7	85 34		sta $34		                STA OPL2_PARAMETER2
.3937a9	a9 24 17	lda #$1724	                LDA #<>INSTRUMENT_ACCORDN
.3937ac	85 50		sta $50		                STA RAD_ADDR
.3937ae	a9 39 00	lda #$0039	                LDA #<`INSTRUMENT_ACCORDN
.3937b1	85 52		sta $52		                STA RAD_ADDR + 2
.3937b3	e2 20		sep #$20	                SEP #$20        ; set A short
.3937b5	6b		rtl		                RTL
.3937b6					OPL2_Reset
.3937b6	6b		rtl		                RTL
.3937b7					OPL2_Get_FrequencyBlock
.3937b7	6b		rtl		                RTL
.3937b8					OPL2_GET_REGISTER
.3937b8	48		pha		                PHA             ; begin setdp macro
.3937b9	08		php		                PHP
.3937ba	c2 20		rep #$20	                REP #$20        ; set A long
.3937bc	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3937bf	5b		tcd		                TCD
.3937c0	28		plp		                PLP
.3937c1	68		pla		                PLA             ; end setdp macro
.3937c2	c2 20		rep #$20	                REP #$20        ; set A long
.3937c4	18		clc		              CLC
.3937c5	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3937c8	65 32		adc $32		              ADC OPL2_PARAMETER0
.3937ca	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3937cc	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3937cf	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3937d1	e2 20		sep #$20	                SEP #$20        ; set A short
.3937d3	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3937d5	6b		rtl		              RTL
.3937d6					OPL2_GET_WAVEFORM_SELECT
.3937d6	48		pha		                PHA             ; begin setdp macro
.3937d7	08		php		                PHP
.3937d8	c2 20		rep #$20	                REP #$20        ; set A long
.3937da	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3937dd	5b		tcd		                TCD
.3937de	28		plp		                PLP
.3937df	68		pla		                PLA             ; end setdp macro
.3937e0	c2 20		rep #$20	                REP #$20        ; set A long
.3937e2	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3937e5	69 01 00	adc #$0001	              ADC #$0001
.3937e8	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3937ea	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3937ed	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3937ef	e2 20		sep #$20	                SEP #$20        ; set A short
.3937f1	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3937f3	29 20		and #$20	              AND #$20
.3937f5	6b		rtl		              RTL
.3937f6					OPL2_GET_SCALINGLEVEL
.3937f6	48		pha		                PHA             ; begin setdp macro
.3937f7	08		php		                PHP
.3937f8	c2 20		rep #$20	                REP #$20        ; set A long
.3937fa	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3937fd	5b		tcd		                TCD
.3937fe	28		plp		                PLP
.3937ff	68		pla		                PLA             ; end setdp macro
.393800	c2 20		rep #$20	                REP #$20        ; set A long
.393802	a9 40 00	lda #$0040	              LDA #$0040  ;
.393805	85 28		sta $28		              STA OPL2_REG_REGION
.393807	20 b9 40	jsr $3940b9	              JSR OPL2_GET_REG_OFFSET
.39380a	e2 20		sep #$20	                SEP #$20        ; set A short
.39380c	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39380e	29 c0		and #$c0	              AND #$C0
.393810	4a		lsr a		              LSR A
.393811	4a		lsr a		              LSR A
.393812	4a		lsr a		              LSR A
.393813	4a		lsr a		              LSR A
.393814	4a		lsr a		              LSR A
.393815	4a		lsr a		              LSR A
.393816	6b		rtl		              RTL
.393817					OPL2_GET_BLOCK
.393817	48		pha		                PHA             ; begin setdp macro
.393818	08		php		                PHP
.393819	c2 20		rep #$20	                REP #$20        ; set A long
.39381b	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39381e	5b		tcd		                TCD
.39381f	28		plp		                PLP
.393820	68		pla		                PLA             ; end setdp macro
.393821	e2 20		sep #$20	                SEP #$20        ; set A short
.393823	18		clc		              CLC
.393824	a5 27		lda $27		              LDA OPL2_CHANNEL
.393826	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393828	69 b0		adc #$b0	              ADC #$B0
.39382a	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.39382c	a9 00		lda #$00	              LDA #$00
.39382e	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393830	c2 30		rep #$30	                REP #$30        ; set A&X long
.393832	18		clc		              CLC
.393833	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393836	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393838	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39383a	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.39383d	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39383f	e2 20		sep #$20	                SEP #$20        ; set A short
.393841	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393843	29 1c		and #$1c	              AND #$1C
.393845	4a		lsr a		              LSR A
.393846	4a		lsr a		              LSR A
.393847	6b		rtl		              RTL
.393848					OPL2_GET_KEYON
.393848	48		pha		                PHA             ; begin setdp macro
.393849	08		php		                PHP
.39384a	c2 20		rep #$20	                REP #$20        ; set A long
.39384c	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39384f	5b		tcd		                TCD
.393850	28		plp		                PLP
.393851	68		pla		                PLA             ; end setdp macro
.393852	e2 20		sep #$20	                SEP #$20        ; set A short
.393854	18		clc		              CLC
.393855	a5 27		lda $27		              LDA OPL2_CHANNEL
.393857	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393859	69 b0		adc #$b0	              ADC #$B0
.39385b	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.39385d	a9 00		lda #$00	              LDA #$00
.39385f	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393861	c2 30		rep #$30	                REP #$30        ; set A&X long
.393863	18		clc		              CLC
.393864	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393867	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393869	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39386b	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.39386e	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393870	e2 20		sep #$20	                SEP #$20        ; set A short
.393872	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393874	29 20		and #$20	              AND #$20
.393876	6b		rtl		              RTL
.393877					OPL2_GET_FEEDBACK
.393877	48		pha		                PHA             ; begin setdp macro
.393878	08		php		                PHP
.393879	c2 20		rep #$20	                REP #$20        ; set A long
.39387b	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39387e	5b		tcd		                TCD
.39387f	28		plp		                PLP
.393880	68		pla		                PLA             ; end setdp macro
.393881	e2 20		sep #$20	                SEP #$20        ; set A short
.393883	18		clc		              CLC
.393884	a5 27		lda $27		              LDA OPL2_CHANNEL
.393886	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393888	69 c0		adc #$c0	              ADC #$C0
.39388a	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.39388c	a9 00		lda #$00	              LDA #$00
.39388e	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393890	c2 30		rep #$30	                REP #$30        ; set A&X long
.393892	18		clc		              CLC
.393893	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393896	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393898	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39389a	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.39389d	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39389f	e2 20		sep #$20	                SEP #$20        ; set A short
.3938a1	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3938a3	29 e0		and #$e0	              AND #$E0
.3938a5	4a		lsr a		              LSR
.3938a6	6b		rtl		              RTL
.3938a7					OPL2_GET_SYNTHMODE
.3938a7	48		pha		                PHA             ; begin setdp macro
.3938a8	08		php		                PHP
.3938a9	c2 20		rep #$20	                REP #$20        ; set A long
.3938ab	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3938ae	5b		tcd		                TCD
.3938af	28		plp		                PLP
.3938b0	68		pla		                PLA             ; end setdp macro
.3938b1	e2 20		sep #$20	                SEP #$20        ; set A short
.3938b3	18		clc		              CLC
.3938b4	a5 27		lda $27		              LDA OPL2_CHANNEL
.3938b6	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.3938b8	69 c0		adc #$c0	              ADC #$C0
.3938ba	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.3938bc	a9 00		lda #$00	              LDA #$00
.3938be	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.3938c0	c2 30		rep #$30	                REP #$30        ; set A&X long
.3938c2	18		clc		              CLC
.3938c3	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3938c6	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.3938c8	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3938ca	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3938cd	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3938cf	e2 20		sep #$20	                SEP #$20        ; set A short
.3938d1	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3938d3	29 01		and #$01	              AND #$01
.3938d5	6b		rtl		              RTL
.3938d6					OPL2_GET_DEEPTREMOLO
.3938d6	48		pha		                PHA             ; begin setdp macro
.3938d7	08		php		                PHP
.3938d8	c2 20		rep #$20	                REP #$20        ; set A long
.3938da	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3938dd	5b		tcd		                TCD
.3938de	28		plp		                PLP
.3938df	68		pla		                PLA             ; end setdp macro
.3938e0	c2 20		rep #$20	                REP #$20        ; set A long
.3938e2	a9 bd 00	lda #$00bd	              LDA #$00BD;
.3938e5	85 28		sta $28		              STA OPL2_REG_REGION
.3938e7	20 b9 40	jsr $3940b9	              JSR OPL2_GET_REG_OFFSET
.3938ea	e2 20		sep #$20	                SEP #$20        ; set A short
.3938ec	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3938ee	29 80		and #$80	              AND #$80
.3938f0	6b		rtl		              RTL
.3938f1					OPL2_GET_DEEPVIBRATO
.3938f1	48		pha		                PHA             ; begin setdp macro
.3938f2	08		php		                PHP
.3938f3	c2 20		rep #$20	                REP #$20        ; set A long
.3938f5	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3938f8	5b		tcd		                TCD
.3938f9	28		plp		                PLP
.3938fa	68		pla		                PLA             ; end setdp macro
.3938fb	c2 20		rep #$20	                REP #$20        ; set A long
.3938fd	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393900	69 bd 00	adc #$00bd	              ADC #$00BD
.393903	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393905	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393908	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39390a	e2 20		sep #$20	                SEP #$20        ; set A short
.39390c	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39390e	29 40		and #$40	              AND #$40
.393910	6b		rtl		              RTL
.393911					OPL2_GET_PERCUSSION
.393911	48		pha		                PHA             ; begin setdp macro
.393912	08		php		                PHP
.393913	c2 20		rep #$20	                REP #$20        ; set A long
.393915	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393918	5b		tcd		                TCD
.393919	28		plp		                PLP
.39391a	68		pla		                PLA             ; end setdp macro
.39391b	c2 20		rep #$20	                REP #$20        ; set A long
.39391d	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393920	69 bd 00	adc #$00bd	              ADC #$00BD
.393923	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393925	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393928	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39392a	e2 20		sep #$20	                SEP #$20        ; set A short
.39392c	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39392e	29 20		and #$20	              AND #$20
.393930	6b		rtl		              RTL
.393931					OPL2_GET_DRUMS
.393931	48		pha		                PHA             ; begin setdp macro
.393932	08		php		                PHP
.393933	c2 20		rep #$20	                REP #$20        ; set A long
.393935	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393938	5b		tcd		                TCD
.393939	28		plp		                PLP
.39393a	68		pla		                PLA             ; end setdp macro
.39393b	c2 20		rep #$20	                REP #$20        ; set A long
.39393d	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393940	69 bd 00	adc #$00bd	              ADC #$00BD
.393943	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393945	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393948	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39394a	e2 20		sep #$20	                SEP #$20        ; set A short
.39394c	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39394e	29 1f		and #$1f	              AND #$1F
.393950	6b		rtl		              RTL
.393951					OPL2_Get_WaveForm
.393951	6b		rtl		                RTL
.393952					OPL2_PLAYNOTE
.393952	48		pha		                PHA             ; begin setdp macro
.393953	08		php		                PHP
.393954	c2 20		rep #$20	                REP #$20        ; set A long
.393956	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393959	5b		tcd		                TCD
.39395a	28		plp		                PLP
.39395b	68		pla		                PLA             ; end setdp macro
.39395c	e2 20		sep #$20	                SEP #$20        ; set A short
.39395e	da		phx		                PHX
.39395f	a9 00		lda #$00	                LDA #$00
.393961	85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.393963	20 3a 3f	jsr $393f3a	                JSR OPL2_SET_KEYON
.393966	20 ff 3e	jsr $393eff	                JSR OPL2_SET_BLOCK  ; OPL2_SET_BLOCK Already to OPL2_OCTAVE
.393969	e2 10		sep #$10	                SEP #$10        ; set X short
.39396b	a5 30		lda $30		                LDA OPL2_NOTE
.39396d	3a		dec a		                DEC A
.39396e	0a		asl a		                ASL A
.39396f	aa		tax		                TAX
.393970	bf e9 16 39	lda $3916e9,x	                LDA @lnoteFNumbers,X
.393974	85 32		sta $32		                STA OPL2_PARAMETER0 ; Store the 8it in Param OPL2_PARAMETER0
.393976	e8		inx		                INX
.393977	bf e9 16 39	lda $3916e9,x	                LDA @lnoteFNumbers,X
.39397b	85 33		sta $33		                STA OPL2_PARAMETER1 ; Store the 8bit in Param OPL2_PARAMETER1
.39397d	22 7d 3e 39	jsl $393e7d	                JSL OPL2_SET_FNUMBER
.393981	a9 01		lda #$01	                LDA #$01
.393983	85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.393985	20 3a 3f	jsr $393f3a	                JSR OPL2_SET_KEYON
.393988	c2 10		rep #$10	                REP #$10        ; set X long
.39398a	fa		plx		                PLX
.39398b	6b		rtl		                RTL
.39398c					OPL2_PLAYDRUM
.39398c	6b		rtl		                RTL
.39398d					OPL2_SET_INSTRUMENT
.39398d	48		pha		                PHA             ; begin setdp macro
.39398e	08		php		                PHP
.39398f	c2 20		rep #$20	                REP #$20        ; set A long
.393991	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393994	5b		tcd		                TCD
.393995	28		plp		                PLP
.393996	68		pla		                PLA             ; end setdp macro
.393997	38		sec		              SEC ; Set the WaveFormSelect to True
.393998	22 7b 3b 39	jsl $393b7b	              JSL OPL2_SET_WAVEFORMSELECT;
.39399c	e2 20		sep #$20	                SEP #$20        ; set A short
.39399e	c2 10		rep #$10	                REP #$10        ; set X long
.3939a0	a0 00 00	ldy #$0000	              LDY #$0000
.3939a3	a2 00 00	ldx #$0000	              LDX #$0000
.3939a6	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO],Y ; Pointer Location 0 in Instrument Profile
.3939a8	85 35		sta $35		              STA OPL2_PARAMETER3
.3939aa	c8		iny		              INY
.3939ab	c9 06		cmp #$06	              CMP #$06
.3939ad	d0 03		bne $3939b2	              BNE PERCUSSION_NEXT07
.3939af	82 70 01	brl $393b22	              BRL Percussion_6
.3939b2					PERCUSSION_NEXT07
.3939b2	c9 07		cmp #$07	              CMP #$07
.3939b4	d0 03		bne $3939b9	              BNE PERCUSSION_NEXT08
.3939b6	82 44 01	brl $393afd	              BRL Percussion_7
.3939b9					PERCUSSION_NEXT08
.3939b9	c9 08		cmp #$08	              CMP #$08
.3939bb	d0 03		bne $3939c0	              BNE PERCUSSION_NEXT09
.3939bd	82 18 01	brl $393ad8	              BRL Percussion_8
.3939c0					PERCUSSION_NEXT09
.3939c0	c9 09		cmp #$09	              CMP #$09
.3939c2	d0 03		bne $3939c7	              BNE PERCUSSION_NEXT0A
.3939c4	82 ec 00	brl $393ab3	              BRL Percussion_9
.3939c7					PERCUSSION_NEXT0A
.3939c7	c9 0a		cmp #$0a	              CMP #$0A
.3939c9	d0 03		bne $3939ce	              BNE Percussion_Default
.3939cb	82 c0 00	brl $393a8e	              BRL Percussion_A
.3939ce					Percussion_Default
.3939ce	a9 00		lda #$00	              LDA #$00
.3939d0	85 26		sta $26		              STA OPL2_OPERATOR
.3939d2	c2 20		rep #$20	                REP #$20        ; set A long
.3939d4	a9 20 00	lda #$0020	              LDA #$0020;
.3939d7	85 28		sta $28		              STA OPL2_REG_REGION
.3939d9	20 b9 40	jsr $3940b9	              JSR OPL2_GET_REG_OFFSET
.3939dc	e2 20		sep #$20	                SEP #$20        ; set A short
.3939de	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.3939e0	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3939e2	c8		iny		              INY
.3939e3	c2 20		rep #$20	                REP #$20        ; set A long
.3939e5	a9 40 00	lda #$0040	              LDA #$0040;
.3939e8	85 28		sta $28		              STA OPL2_REG_REGION
.3939ea	20 b9 40	jsr $3940b9	              JSR OPL2_GET_REG_OFFSET
.3939ed	e2 20		sep #$20	                SEP #$20        ; set A short
.3939ef	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.3939f1	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3939f3	c8		iny		              INY
.3939f4	c2 20		rep #$20	                REP #$20        ; set A long
.3939f6	a9 60 00	lda #$0060	              LDA #$0060;
.3939f9	85 28		sta $28		              STA OPL2_REG_REGION
.3939fb	20 b9 40	jsr $3940b9	              JSR OPL2_GET_REG_OFFSET
.3939fe	e2 20		sep #$20	                SEP #$20        ; set A short
.393a00	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393a02	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a04	c8		iny		              INY
.393a05	c2 20		rep #$20	                REP #$20        ; set A long
.393a07	a9 80 00	lda #$0080	              LDA #$0080;
.393a0a	85 28		sta $28		              STA OPL2_REG_REGION
.393a0c	20 b9 40	jsr $3940b9	              JSR OPL2_GET_REG_OFFSET
.393a0f	e2 20		sep #$20	                SEP #$20        ; set A short
.393a11	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393a13	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a15	c8		iny		              INY
.393a16	c2 20		rep #$20	                REP #$20        ; set A long
.393a18	a9 e0 00	lda #$00e0	              LDA #$00E0;
.393a1b	85 28		sta $28		              STA OPL2_REG_REGION
.393a1d	20 b9 40	jsr $3940b9	              JSR OPL2_GET_REG_OFFSET
.393a20	e2 20		sep #$20	                SEP #$20        ; set A short
.393a22	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393a24	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a26	c8		iny		              INY
.393a27	e2 10		sep #$10	                SEP #$10        ; set X short
.393a29	a5 27		lda $27		              LDA OPL2_CHANNEL
.393a2b	29 0f		and #$0f	              AND #$0F
.393a2d	aa		tax		              TAX
.393a2e	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 6 in Instrument Profile
.393a30	9f c0 e6 af	sta $afe6c0,x	              STA @lOPL3_R_FEEDBACK,X
.393a34	c8		iny		              INY
.393a35	a9 01		lda #$01	              LDA #$01
.393a37	85 26		sta $26		              STA OPL2_OPERATOR
.393a39	c2 20		rep #$20	                REP #$20        ; set A long
.393a3b	a9 20 00	lda #$0020	              LDA #$0020;
.393a3e	85 28		sta $28		              STA OPL2_REG_REGION
.393a40	20 b9 40	jsr $3940b9	              JSR OPL2_GET_REG_OFFSET
.393a43	e2 20		sep #$20	                SEP #$20        ; set A short
.393a45	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 7 in Instrument Profile
.393a47	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a49	c8		iny		              INY
.393a4a	c2 20		rep #$20	                REP #$20        ; set A long
.393a4c	a9 40 00	lda #$0040	              LDA #$0040;
.393a4f	85 28		sta $28		              STA OPL2_REG_REGION
.393a51	20 b9 40	jsr $3940b9	              JSR OPL2_GET_REG_OFFSET
.393a54	e2 20		sep #$20	                SEP #$20        ; set A short
.393a56	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 8 in Instrument Profile
.393a58	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a5a	c8		iny		              INY
.393a5b	c2 20		rep #$20	                REP #$20        ; set A long
.393a5d	a9 60 00	lda #$0060	              LDA #$0060;
.393a60	85 28		sta $28		              STA OPL2_REG_REGION
.393a62	20 b9 40	jsr $3940b9	              JSR OPL2_GET_REG_OFFSET
.393a65	e2 20		sep #$20	                SEP #$20        ; set A short
.393a67	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 9 in Instrument Profile
.393a69	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a6b	c8		iny		              INY
.393a6c	c2 20		rep #$20	                REP #$20        ; set A long
.393a6e	a9 80 00	lda #$0080	              LDA #$0080;
.393a71	85 28		sta $28		              STA OPL2_REG_REGION
.393a73	20 b9 40	jsr $3940b9	              JSR OPL2_GET_REG_OFFSET
.393a76	e2 20		sep #$20	                SEP #$20        ; set A short
.393a78	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location A in Instrument Profile
.393a7a	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a7c	c8		iny		              INY
.393a7d	c2 20		rep #$20	                REP #$20        ; set A long
.393a7f	a9 e0 00	lda #$00e0	              LDA #$00E0;
.393a82	85 28		sta $28		              STA OPL2_REG_REGION
.393a84	20 b9 40	jsr $3940b9	              JSR OPL2_GET_REG_OFFSET
.393a87	e2 20		sep #$20	                SEP #$20        ; set A short
.393a89	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location B in Instrument Profile
.393a8b	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a8d	6b		rtl		                RTL
.393a8e					Percussion_A
.393a8e	e2 20		sep #$20	                SEP #$20        ; set A short
.393a90	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393a92	8f 31 e6 af	sta $afe631	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $11
.393a96	c8		iny		              INY
.393a97	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393a99	8f 51 e6 af	sta $afe651	              STA @lOPL3_R_KSL_TL + $11
.393a9d	c8		iny		              INY
.393a9e	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393aa0	8f 71 e6 af	sta $afe671	              STA @lOPL3_R_AR_DR + $11
.393aa4	c8		iny		              INY
.393aa5	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393aa7	8f 91 e6 af	sta $afe691	              STA @lOPL3_R_SL_RR + $11
.393aab	c8		iny		              INY
.393aac	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393aae	8f f1 e6 af	sta $afe6f1	              STA @lOPL3_R_WAVE_SELECT + $11
.393ab2	6b		rtl		                RTL
.393ab3					Percussion_9
.393ab3	e2 20		sep #$20	                SEP #$20        ; set A short
.393ab5	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393ab7	8f 35 e6 af	sta $afe635	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $15
.393abb	c8		iny		              INY
.393abc	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393abe	8f 55 e6 af	sta $afe655	              STA @lOPL3_R_KSL_TL + $15
.393ac2	c8		iny		              INY
.393ac3	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393ac5	8f 75 e6 af	sta $afe675	              STA @lOPL3_R_AR_DR + $15
.393ac9	c8		iny		              INY
.393aca	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393acc	8f 95 e6 af	sta $afe695	              STA @lOPL3_R_SL_RR + $15
.393ad0	c8		iny		              INY
.393ad1	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393ad3	8f f5 e6 af	sta $afe6f5	              STA @lOPL3_R_WAVE_SELECT + $15
.393ad7	6b		rtl		              RTL
.393ad8					Percussion_8
.393ad8	e2 20		sep #$20	                SEP #$20        ; set A short
.393ada	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393adc	8f 32 e6 af	sta $afe632	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $12
.393ae0	c8		iny		              INY
.393ae1	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393ae3	8f 52 e6 af	sta $afe652	              STA @lOPL3_R_KSL_TL + $12
.393ae7	c8		iny		              INY
.393ae8	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393aea	8f 72 e6 af	sta $afe672	              STA @lOPL3_R_AR_DR + $12
.393aee	c8		iny		              INY
.393aef	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393af1	8f 92 e6 af	sta $afe692	              STA @lOPL3_R_SL_RR + $12
.393af5	c8		iny		              INY
.393af6	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393af8	8f f2 e6 af	sta $afe6f2	              STA @lOPL3_R_WAVE_SELECT + $12
.393afc	6b		rtl		              RTL
.393afd					Percussion_7
.393afd	e2 20		sep #$20	                SEP #$20        ; set A short
.393aff	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393b01	8f 34 e6 af	sta $afe634	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $14
.393b05	c8		iny		              INY
.393b06	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393b08	8f 54 e6 af	sta $afe654	              STA @lOPL3_R_KSL_TL + $14
.393b0c	c8		iny		              INY
.393b0d	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393b0f	8f 74 e6 af	sta $afe674	              STA @lOPL3_R_AR_DR + $14
.393b13	c8		iny		              INY
.393b14	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393b16	8f 94 e6 af	sta $afe694	              STA @lOPL3_R_SL_RR + $14
.393b1a	c8		iny		              INY
.393b1b	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393b1d	8f f4 e6 af	sta $afe6f4	              STA @lOPL3_R_WAVE_SELECT + $14
.393b21	6b		rtl		              RTL
.393b22					Percussion_6
.393b22	e2 20		sep #$20	                SEP #$20        ; set A short
.393b24	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393b26	8f 30 e6 af	sta $afe630	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $10
.393b2a	8f 33 e6 af	sta $afe633	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $13
.393b2e	c8		iny		              INY
.393b2f	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393b31	8f 50 e6 af	sta $afe650	              STA @lOPL3_R_KSL_TL + $10
.393b35	8f 53 e6 af	sta $afe653	              STA @lOPL3_R_KSL_TL + $13
.393b39	c8		iny		              INY
.393b3a	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393b3c	8f 70 e6 af	sta $afe670	              STA @lOPL3_R_AR_DR + $10
.393b40	8f 73 e6 af	sta $afe673	              STA @lOPL3_R_AR_DR + $13
.393b44	c8		iny		              INY
.393b45	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393b47	8f 90 e6 af	sta $afe690	              STA @lOPL3_R_SL_RR + $10
.393b4b	8f 93 e6 af	sta $afe693	              STA @lOPL3_R_SL_RR + $13
.393b4f	c8		iny		              INY
.393b50	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393b52	8f f0 e6 af	sta $afe6f0	              STA @lOPL3_R_WAVE_SELECT + $10
.393b56	8f f3 e6 af	sta $afe6f3	              STA @lOPL3_R_WAVE_SELECT + $13
.393b5a	6b		rtl		              RTL
.393b5b					OPL2_SET_REGISTER
.393b5b	48		pha		                PHA             ; begin setdp macro
.393b5c	08		php		                PHP
.393b5d	c2 20		rep #$20	                REP #$20        ; set A long
.393b5f	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b62	5b		tcd		                TCD
.393b63	28		plp		                PLP
.393b64	68		pla		                PLA             ; end setdp macro
.393b65	c2 20		rep #$20	                REP #$20        ; set A long
.393b67	18		clc		              CLC
.393b68	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393b6b	65 32		adc $32		              ADC OPL2_PARAMETER0
.393b6d	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393b6f	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393b72	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393b74	e2 20		sep #$20	                SEP #$20        ; set A short
.393b76	a5 33		lda $33		              LDA OPL2_PARAMETER1
.393b78	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393b7a	6b		rtl		              RTL
.393b7b					OPL2_SET_WAVEFORMSELECT
.393b7b	48		pha		                PHA             ; begin setdp macro
.393b7c	08		php		                PHP
.393b7d	c2 20		rep #$20	                REP #$20        ; set A long
.393b7f	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b82	5b		tcd		                TCD
.393b83	28		plp		                PLP
.393b84	68		pla		                PLA             ; end setdp macro
.393b85	c2 20		rep #$20	                REP #$20        ; set A long
.393b87	a9 01 e6	lda #$e601	              LDA #<>OPL3_R_BASE + $0001
.393b8a	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393b8c	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393b8f	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393b91	e2 20		sep #$20	                SEP #$20        ; set A short
.393b93	b0 07		bcs $393b9c	              BCS OPL2_Set_WaveFormSelect_set
.393b95	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393b97	29 df		and #$df	              AND #$DF
.393b99	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393b9b	6b		rtl		              RTL
.393b9c					OPL2_Set_WaveFormSelect_set
.393b9c	48		pha		                PHA             ; begin setdp macro
.393b9d	08		php		                PHP
.393b9e	c2 20		rep #$20	                REP #$20        ; set A long
.393ba0	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393ba3	5b		tcd		                TCD
.393ba4	28		plp		                PLP
.393ba5	68		pla		                PLA             ; end setdp macro
.393ba6	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393ba8	09 20 00	ora #$0020	              ORA #$20
.393bab	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393bad	6b		rtl		                RTL
.393bae					OPL2_SET_TREMOLO
.393bae	48		pha		                PHA             ; begin setdp macro
.393baf	08		php		                PHP
.393bb0	c2 20		rep #$20	                REP #$20        ; set A long
.393bb2	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393bb5	5b		tcd		                TCD
.393bb6	28		plp		                PLP
.393bb7	68		pla		                PLA             ; end setdp macro
.393bb8	08		php		                PHP ; Push the Carry
.393bb9	c2 20		rep #$20	                REP #$20        ; set A long
.393bbb	18		clc		                CLC
.393bbc	a9 20 00	lda #$0020	                LDA #$0020 ;
.393bbf	85 28		sta $28		                STA OPL2_REG_REGION
.393bc1	20 b9 40	jsr $3940b9	                JSR OPL2_GET_REG_OFFSET
.393bc4	28		plp		                PLP ; Pull the Carry out
.393bc5	e2 20		sep #$20	                SEP #$20        ; set A short
.393bc7	b0 08		bcs $393bd1	                BCS OPL2_Set_Tremolo_Set;
.393bc9	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393bcb	29 7f		and #$7f	                AND #$7F
.393bcd	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393bcf	80 06		bra $393bd7	                BRA OPL2_Set_Tremolo_Exit
.393bd1					OPL2_Set_Tremolo_Set
.393bd1	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393bd3	09 80		ora #$80	                ORA #$80
.393bd5	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393bd7					OPL2_Set_Tremolo_Exit
.393bd7	6b		rtl		                RTL
.393bd8					OPL2_GET_TREMOLO
.393bd8	48		pha		                PHA             ; begin setdp macro
.393bd9	08		php		                PHP
.393bda	c2 20		rep #$20	                REP #$20        ; set A long
.393bdc	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393bdf	5b		tcd		                TCD
.393be0	28		plp		                PLP
.393be1	68		pla		                PLA             ; end setdp macro
.393be2	c2 20		rep #$20	                REP #$20        ; set A long
.393be4	a9 20 00	lda #$0020	                LDA #$0020;
.393be7	85 28		sta $28		                STA OPL2_REG_REGION
.393be9	20 b9 40	jsr $3940b9	                JSR OPL2_GET_REG_OFFSET
.393bec	e2 20		sep #$20	                SEP #$20        ; set A short
.393bee	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393bf0	29 80		and #$80	                AND #$80
.393bf2	6b		rtl		                RTL
.393bf3					OPL2_SET_VIBRATO
.393bf3	48		pha		                PHA             ; begin setdp macro
.393bf4	08		php		                PHP
.393bf5	c2 20		rep #$20	                REP #$20        ; set A long
.393bf7	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393bfa	5b		tcd		                TCD
.393bfb	28		plp		                PLP
.393bfc	68		pla		                PLA             ; end setdp macro
.393bfd	08		php		                PHP ; Push the Carry
.393bfe	c2 20		rep #$20	                REP #$20        ; set A long
.393c00	18		clc		                CLC
.393c01	a9 20 00	lda #$0020	                LDA #$0020;
.393c04	85 28		sta $28		                STA OPL2_REG_REGION
.393c06	20 b9 40	jsr $3940b9	                JSR OPL2_GET_REG_OFFSET
.393c09	28		plp		                PLP ; Pull the Carry out
.393c0a	e2 20		sep #$20	                SEP #$20        ; set A short
.393c0c	b0 08		bcs $393c16	                BCS OPL2_Set_Vibrato_Set;
.393c0e	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393c10	29 bf		and #$bf	                AND #$BF
.393c12	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393c14	80 06		bra $393c1c	                BRA OPL2_Set_Vibrato_Exit
.393c16					OPL2_Set_Vibrato_Set
.393c16	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393c18	09 40		ora #$40	                ORA #$40
.393c1a	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393c1c					OPL2_Set_Vibrato_Exit
.393c1c	6b		rtl		                RTL
.393c1d					OPL2_GET_VIBRATO
.393c1d	48		pha		                PHA             ; begin setdp macro
.393c1e	08		php		                PHP
.393c1f	c2 20		rep #$20	                REP #$20        ; set A long
.393c21	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c24	5b		tcd		                TCD
.393c25	28		plp		                PLP
.393c26	68		pla		                PLA             ; end setdp macro
.393c27	c2 20		rep #$20	                REP #$20        ; set A long
.393c29	a9 20 00	lda #$0020	                LDA #$0020;
.393c2c	85 28		sta $28		                STA OPL2_REG_REGION
.393c2e	20 b9 40	jsr $3940b9	                JSR OPL2_GET_REG_OFFSET
.393c31	e2 20		sep #$20	                SEP #$20        ; set A short
.393c33	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393c35	29 40		and #$40	                AND #$40
.393c37	6b		rtl		                RTL
.393c38					OPL2_SET_MAINTAINSUSTAIN
.393c38	48		pha		                PHA             ; begin setdp macro
.393c39	08		php		                PHP
.393c3a	c2 20		rep #$20	                REP #$20        ; set A long
.393c3c	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c3f	5b		tcd		                TCD
.393c40	28		plp		                PLP
.393c41	68		pla		                PLA             ; end setdp macro
.393c42	08		php		              PHP ; Push the Carry
.393c43	c2 20		rep #$20	                REP #$20        ; set A long
.393c45	18		clc		              CLC
.393c46	a9 20 00	lda #$0020	              LDA #$0020;
.393c49	85 28		sta $28		              STA OPL2_REG_REGION
.393c4b	20 b9 40	jsr $3940b9	              JSR OPL2_GET_REG_OFFSET
.393c4e	28		plp		              PLP ; Pull the Carry out
.393c4f	e2 20		sep #$20	                SEP #$20        ; set A short
.393c51	b0 08		bcs $393c5b	              BCS OPL2_Set_MaintainSustain_Set;
.393c53	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393c55	29 df		and #$df	              AND #$DF
.393c57	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393c59	80 06		bra $393c61	              BRA OPL2_Set_MaintainSustain_Exit
.393c5b					OPL2_Set_MaintainSustain_Set
.393c5b	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393c5d	09 20		ora #$20	              ORA #$20
.393c5f	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393c61					OPL2_Set_MaintainSustain_Exit
.393c61	6b		rtl		                RTL
.393c62					OPL2_GET_MAINTAINSUSTAIN
.393c62	48		pha		                PHA             ; begin setdp macro
.393c63	08		php		                PHP
.393c64	c2 20		rep #$20	                REP #$20        ; set A long
.393c66	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c69	5b		tcd		                TCD
.393c6a	28		plp		                PLP
.393c6b	68		pla		                PLA             ; end setdp macro
.393c6c	c2 20		rep #$20	                REP #$20        ; set A long
.393c6e	a9 20 00	lda #$0020	              LDA #$0020;
.393c71	85 28		sta $28		              STA OPL2_REG_REGION
.393c73	20 b9 40	jsr $3940b9	              JSR OPL2_GET_REG_OFFSET
.393c76	e2 20		sep #$20	                SEP #$20        ; set A short
.393c78	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393c7a	29 20		and #$20	              AND #$20
.393c7c	6b		rtl		                RTL
.393c7d					OPL2_SET_ENVELOPESCALING
.393c7d	48		pha		                PHA             ; begin setdp macro
.393c7e	08		php		                PHP
.393c7f	c2 20		rep #$20	                REP #$20        ; set A long
.393c81	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c84	5b		tcd		                TCD
.393c85	28		plp		                PLP
.393c86	68		pla		                PLA             ; end setdp macro
.393c87	08		php		              PHP ; Push the Carry
.393c88	c2 20		rep #$20	                REP #$20        ; set A long
.393c8a	18		clc		              CLC
.393c8b	a9 20 00	lda #$0020	              LDA #$0020;
.393c8e	85 28		sta $28		              STA OPL2_REG_REGION
.393c90	20 b9 40	jsr $3940b9	              JSR OPL2_GET_REG_OFFSET
.393c93	28		plp		              PLP ; Pull the Carry out
.393c94	e2 20		sep #$20	                SEP #$20        ; set A short
.393c96	b0 08		bcs $393ca0	              BCS OPL2_Set_EnvelopeScaling_Set;
.393c98	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393c9a	29 ef		and #$ef	              AND #$EF
.393c9c	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393c9e	80 06		bra $393ca6	              BRA OPL2_Set_EnvelopeScaling_Exit
.393ca0					OPL2_Set_EnvelopeScaling_Set
.393ca0	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393ca2	09 10		ora #$10	              ORA #$10
.393ca4	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393ca6					OPL2_Set_EnvelopeScaling_Exit
.393ca6	6b		rtl		                RTL
.393ca7					OPL2_GET_ENVELOPESCALING
.393ca7	48		pha		                PHA             ; begin setdp macro
.393ca8	08		php		                PHP
.393ca9	c2 20		rep #$20	                REP #$20        ; set A long
.393cab	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393cae	5b		tcd		                TCD
.393caf	28		plp		                PLP
.393cb0	68		pla		                PLA             ; end setdp macro
.393cb1	c2 20		rep #$20	                REP #$20        ; set A long
.393cb3	a9 20 00	lda #$0020	              LDA #$0020;
.393cb6	85 28		sta $28		              STA OPL2_REG_REGION
.393cb8	20 b9 40	jsr $3940b9	              JSR OPL2_GET_REG_OFFSET
.393cbb	e2 20		sep #$20	                SEP #$20        ; set A short
.393cbd	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393cbf	29 10		and #$10	              AND #$10
.393cc1	6b		rtl		                RTL
.393cc2					OPL2_GET_MODFREQMULTIPLE
.393cc2	48		pha		                PHA             ; begin setdp macro
.393cc3	08		php		                PHP
.393cc4	c2 20		rep #$20	                REP #$20        ; set A long
.393cc6	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393cc9	5b		tcd		                TCD
.393cca	28		plp		                PLP
.393ccb	68		pla		                PLA             ; end setdp macro
.393ccc	c2 20		rep #$20	                REP #$20        ; set A long
.393cce	a9 20 00	lda #$0020	              LDA #$0020;
.393cd1	85 28		sta $28		              STA OPL2_REG_REGION
.393cd3	20 b9 40	jsr $3940b9	              JSR OPL2_GET_REG_OFFSET
.393cd6	e2 20		sep #$20	                SEP #$20        ; set A short
.393cd8	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393cda	29 0f		and #$0f	              AND #$0F
.393cdc	6b		rtl		              RTL
.393cdd					OPL2_SET_MODFREQMULTIPLE
.393cdd	48		pha		                PHA             ; begin setdp macro
.393cde	08		php		                PHP
.393cdf	c2 20		rep #$20	                REP #$20        ; set A long
.393ce1	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393ce4	5b		tcd		                TCD
.393ce5	28		plp		                PLP
.393ce6	68		pla		                PLA             ; end setdp macro
.393ce7	c2 20		rep #$20	                REP #$20        ; set A long
.393ce9	a9 20 00	lda #$0020	                LDA #$0020;
.393cec	85 28		sta $28		                STA OPL2_REG_REGION
.393cee	20 b9 40	jsr $3940b9	                JSR OPL2_GET_REG_OFFSET
.393cf1	e2 20		sep #$20	                SEP #$20        ; set A short
.393cf3	a5 32		lda $32		                LDA OPL2_PARAMETER0
.393cf5	29 0f		and #$0f	                AND #$0F
.393cf7	85 32		sta $32		                STA OPL2_PARAMETER0
.393cf9	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393cfb	29 f0		and #$f0	                AND #$F0
.393cfd	05 32		ora $32		                ORA OPL2_PARAMETER0
.393cff	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393d01	6b		rtl		                RTL
.393d02					OPL2_SET_SCALINGLEVEL
.393d02	48		pha		                PHA             ; begin setdp macro
.393d03	08		php		                PHP
.393d04	c2 20		rep #$20	                REP #$20        ; set A long
.393d06	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d09	5b		tcd		                TCD
.393d0a	28		plp		                PLP
.393d0b	68		pla		                PLA             ; end setdp macro
.393d0c	c2 20		rep #$20	                REP #$20        ; set A long
.393d0e	a9 40 00	lda #$0040	                LDA #$0040;
.393d11	85 28		sta $28		                STA OPL2_REG_REGION
.393d13	20 b9 40	jsr $3940b9	                JSR OPL2_GET_REG_OFFSET
.393d16	e2 20		sep #$20	                SEP #$20        ; set A short
.393d18	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393d1a	29 03		and #$03	                AND #$03
.393d1c	0a		asl a		                ASL
.393d1d	0a		asl a		                ASL
.393d1e	0a		asl a		                ASL
.393d1f	0a		asl a		                ASL
.393d20	0a		asl a		                ASL
.393d21	0a		asl a		                ASL
.393d22	85 32		sta $32		                STA OPL2_PARAMETER0
.393d24	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d26	29 3f		and #$3f	                AND #$3F
.393d28	05 32		ora $32		                ORA OPL2_PARAMETER0
.393d2a	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393d2c	6b		rtl		                RTL
.393d2d					OPL2_SET_VOLUME
.393d2d	48		pha		                PHA             ; begin setdp macro
.393d2e	08		php		                PHP
.393d2f	c2 20		rep #$20	                REP #$20        ; set A long
.393d31	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d34	5b		tcd		                TCD
.393d35	28		plp		                PLP
.393d36	68		pla		                PLA             ; end setdp macro
.393d37	c2 20		rep #$20	                REP #$20        ; set A long
.393d39	a9 40 00	lda #$0040	                LDA #$0040  ;
.393d3c	85 28		sta $28		                STA OPL2_REG_REGION
.393d3e	20 b9 40	jsr $3940b9	                JSR OPL2_GET_REG_OFFSET
.393d41	e2 20		sep #$20	                SEP #$20        ; set A short
.393d43	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Volume
.393d45	29 3f		and #$3f	                AND #$3F
.393d47	85 32		sta $32		                STA OPL2_PARAMETER0
.393d49	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d4b	29 c0		and #$c0	                AND #$C0
.393d4d	05 32		ora $32		                ORA OPL2_PARAMETER0
.393d4f	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393d51	6b		rtl		                RTL
.393d52					OPL2_GET_VOLUME
.393d52	48		pha		                PHA             ; begin setdp macro
.393d53	08		php		                PHP
.393d54	c2 20		rep #$20	                REP #$20        ; set A long
.393d56	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d59	5b		tcd		                TCD
.393d5a	28		plp		                PLP
.393d5b	68		pla		                PLA             ; end setdp macro
.393d5c	c2 20		rep #$20	                REP #$20        ; set A long
.393d5e	a9 40 00	lda #$0040	                LDA #$0040  ;
.393d61	85 28		sta $28		                STA OPL2_REG_REGION
.393d63	20 b9 40	jsr $3940b9	                JSR OPL2_GET_REG_OFFSET
.393d66	e2 20		sep #$20	                SEP #$20        ; set A short
.393d68	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d6a	29 3f		and #$3f	                AND #$3F
.393d6c	6b		rtl		                RTL
.393d6d					OPL2_SET_ATTACK
.393d6d	48		pha		                PHA             ; begin setdp macro
.393d6e	08		php		                PHP
.393d6f	c2 20		rep #$20	                REP #$20        ; set A long
.393d71	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d74	5b		tcd		                TCD
.393d75	28		plp		                PLP
.393d76	68		pla		                PLA             ; end setdp macro
.393d77	c2 20		rep #$20	                REP #$20        ; set A long
.393d79	a9 60 00	lda #$0060	                LDA #$0060  ;
.393d7c	85 28		sta $28		                STA OPL2_REG_REGION
.393d7e	20 b9 40	jsr $3940b9	                JSR OPL2_GET_REG_OFFSET
.393d81	e2 20		sep #$20	                SEP #$20        ; set A short
.393d83	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393d85	29 0f		and #$0f	                AND #$0F
.393d87	0a		asl a		                ASL
.393d88	0a		asl a		                ASL
.393d89	0a		asl a		                ASL
.393d8a	0a		asl a		                ASL
.393d8b	85 32		sta $32		                STA OPL2_PARAMETER0
.393d8d	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d8f	29 0f		and #$0f	                AND #$0F
.393d91	05 32		ora $32		                ORA OPL2_PARAMETER0
.393d93	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393d95	6b		rtl		                RTL
.393d96					OPL2_GET_ATTACK
.393d96	48		pha		                PHA             ; begin setdp macro
.393d97	08		php		                PHP
.393d98	c2 20		rep #$20	                REP #$20        ; set A long
.393d9a	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d9d	5b		tcd		                TCD
.393d9e	28		plp		                PLP
.393d9f	68		pla		                PLA             ; end setdp macro
.393da0	c2 20		rep #$20	                REP #$20        ; set A long
.393da2	a9 60 00	lda #$0060	                LDA #$0060
.393da5	85 28		sta $28		                STA OPL2_REG_REGION
.393da7	20 b9 40	jsr $3940b9	                JSR OPL2_GET_REG_OFFSET
.393daa	e2 20		sep #$20	                SEP #$20        ; set A short
.393dac	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393dae	29 f0		and #$f0	                AND #$F0
.393db0	4a		lsr a		                LSR
.393db1	4a		lsr a		                LSR
.393db2	4a		lsr a		                LSR
.393db3	4a		lsr a		                LSR
.393db4	6b		rtl		                RTL
.393db5					OPL2_SET_DECAY
.393db5	48		pha		                PHA             ; begin setdp macro
.393db6	08		php		                PHP
.393db7	c2 20		rep #$20	                REP #$20        ; set A long
.393db9	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393dbc	5b		tcd		                TCD
.393dbd	28		plp		                PLP
.393dbe	68		pla		                PLA             ; end setdp macro
.393dbf	c2 20		rep #$20	                REP #$20        ; set A long
.393dc1	a9 60 00	lda #$0060	                LDA #$0060;
.393dc4	85 28		sta $28		                STA OPL2_REG_REGION
.393dc6	20 b9 40	jsr $3940b9	                JSR OPL2_GET_REG_OFFSET
.393dc9	e2 20		sep #$20	                SEP #$20        ; set A short
.393dcb	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393dcd	29 0f		and #$0f	                AND #$0F
.393dcf	85 32		sta $32		                STA OPL2_PARAMETER0
.393dd1	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393dd3	29 f0		and #$f0	                AND #$F0
.393dd5	05 32		ora $32		                ORA OPL2_PARAMETER0
.393dd7	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393dd9	6b		rtl		                RTL
.393dda					OPL2_GET_DECAY
.393dda	48		pha		                PHA             ; begin setdp macro
.393ddb	08		php		                PHP
.393ddc	c2 20		rep #$20	                REP #$20        ; set A long
.393dde	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393de1	5b		tcd		                TCD
.393de2	28		plp		                PLP
.393de3	68		pla		                PLA             ; end setdp macro
.393de4	c2 20		rep #$20	                REP #$20        ; set A long
.393de6	a9 60 00	lda #$0060	                LDA #$0060
.393de9	85 28		sta $28		                STA OPL2_REG_REGION
.393deb	20 b9 40	jsr $3940b9	                JSR OPL2_GET_REG_OFFSET
.393dee	e2 20		sep #$20	                SEP #$20        ; set A short
.393df0	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393df2	29 0f		and #$0f	                AND #$0F
.393df4	6b		rtl		                RTL
.393df5					OPL2_SET_SUSTAIN
.393df5	48		pha		                PHA             ; begin setdp macro
.393df6	08		php		                PHP
.393df7	c2 20		rep #$20	                REP #$20        ; set A long
.393df9	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393dfc	5b		tcd		                TCD
.393dfd	28		plp		                PLP
.393dfe	68		pla		                PLA             ; end setdp macro
.393dff	c2 20		rep #$20	                REP #$20        ; set A long
.393e01	a9 80 00	lda #$0080	                LDA #$0080;
.393e04	85 28		sta $28		                STA OPL2_REG_REGION
.393e06	20 b9 40	jsr $3940b9	                JSR OPL2_GET_REG_OFFSET
.393e09	e2 20		sep #$20	                SEP #$20        ; set A short
.393e0b	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393e0d	29 0f		and #$0f	                AND #$0F
.393e0f	0a		asl a		                ASL
.393e10	0a		asl a		                ASL
.393e11	0a		asl a		                ASL
.393e12	0a		asl a		                ASL
.393e13	85 32		sta $32		                STA OPL2_PARAMETER0
.393e15	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393e17	29 0f		and #$0f	                AND #$0F
.393e19	05 32		ora $32		                ORA OPL2_PARAMETER0
.393e1b	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393e1d	6b		rtl		                RTL
.393e1e					OPL2_GET_SUSTAIN
.393e1e	48		pha		                PHA             ; begin setdp macro
.393e1f	08		php		                PHP
.393e20	c2 20		rep #$20	                REP #$20        ; set A long
.393e22	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393e25	5b		tcd		                TCD
.393e26	28		plp		                PLP
.393e27	68		pla		                PLA             ; end setdp macro
.393e28	c2 20		rep #$20	                REP #$20        ; set A long
.393e2a	a9 80 00	lda #$0080	                LDA #$0080
.393e2d	85 28		sta $28		                STA OPL2_REG_REGION
.393e2f	20 b9 40	jsr $3940b9	                JSR OPL2_GET_REG_OFFSET
.393e32	e2 20		sep #$20	                SEP #$20        ; set A short
.393e34	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393e36	29 f0		and #$f0	                AND #$F0
.393e38	4a		lsr a		                LSR
.393e39	4a		lsr a		                LSR
.393e3a	4a		lsr a		                LSR
.393e3b	4a		lsr a		                LSR
.393e3c	6b		rtl		                RTL
.393e3d					OPL2_SET_RELEASE
.393e3d	48		pha		                PHA             ; begin setdp macro
.393e3e	08		php		                PHP
.393e3f	c2 20		rep #$20	                REP #$20        ; set A long
.393e41	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393e44	5b		tcd		                TCD
.393e45	28		plp		                PLP
.393e46	68		pla		                PLA             ; end setdp macro
.393e47	c2 20		rep #$20	                REP #$20        ; set A long
.393e49	a9 80 00	lda #$0080	                LDA #$0080;
.393e4c	85 28		sta $28		                STA OPL2_REG_REGION
.393e4e	20 b9 40	jsr $3940b9	                JSR OPL2_GET_REG_OFFSET
.393e51	e2 20		sep #$20	                SEP #$20        ; set A short
.393e53	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393e55	29 0f		and #$0f	                AND #$0F
.393e57	85 32		sta $32		                STA OPL2_PARAMETER0
.393e59	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393e5b	29 f0		and #$f0	                AND #$F0
.393e5d	05 32		ora $32		                ORA OPL2_PARAMETER0
.393e5f	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393e61	6b		rtl		                RTL
.393e62					OPL2_GET_RELEASE
.393e62	48		pha		                PHA             ; begin setdp macro
.393e63	08		php		                PHP
.393e64	c2 20		rep #$20	                REP #$20        ; set A long
.393e66	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393e69	5b		tcd		                TCD
.393e6a	28		plp		                PLP
.393e6b	68		pla		                PLA             ; end setdp macro
.393e6c	c2 20		rep #$20	                REP #$20        ; set A long
.393e6e	a9 80 00	lda #$0080	                LDA #$0080
.393e71	85 28		sta $28		                STA OPL2_REG_REGION
.393e73	20 b9 40	jsr $3940b9	                JSR OPL2_GET_REG_OFFSET
.393e76	e2 20		sep #$20	                SEP #$20        ; set A short
.393e78	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393e7a	29 0f		and #$0f	                AND #$0F
.393e7c	6b		rtl		                RTL
.393e7d					OPL2_SET_FNUMBER
.393e7d	48		pha		                PHA             ; begin setdp macro
.393e7e	08		php		                PHP
.393e7f	c2 20		rep #$20	                REP #$20        ; set A long
.393e81	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393e84	5b		tcd		                TCD
.393e85	28		plp		                PLP
.393e86	68		pla		                PLA             ; end setdp macro
.393e87	e2 20		sep #$20	                SEP #$20        ; set A short
.393e89	18		clc		                CLC
.393e8a	a5 27		lda $27		                LDA OPL2_CHANNEL
.393e8c	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393e8e	69 a0		adc #$a0	                ADC #$A0
.393e90	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393e92	a9 00		lda #$00	                LDA #$00
.393e94	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393e96	c2 30		rep #$30	                REP #$30        ; set A&X long
.393e98	18		clc		                CLC
.393e99	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393e9c	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393e9e	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393ea0	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393ea3	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393ea5	e2 20		sep #$20	                SEP #$20        ; set A short
.393ea7	a5 32		lda $32		                LDA OPL2_PARAMETER0     ; Load the first 8 Bits Value of FNumber
.393ea9	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]  ; Load
.393eab	18		clc		                CLC
.393eac	a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.393eae	69 10		adc #$10	                ADC #$10
.393eb0	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393eb2	a5 33		lda $33		                LDA OPL2_PARAMETER1
.393eb4	29 03		and #$03	                AND #$03
.393eb6	85 33		sta $33		                STA OPL2_PARAMETER1
.393eb8	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393eba	29 fc		and #$fc	                AND #$FC
.393ebc	05 33		ora $33		                ORA OPL2_PARAMETER1
.393ebe	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393ec0	6b		rtl		                RTL
.393ec1					OPL2_GET_FNUMBER
.393ec1	48		pha		                PHA             ; begin setdp macro
.393ec2	08		php		                PHP
.393ec3	c2 20		rep #$20	                REP #$20        ; set A long
.393ec5	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393ec8	5b		tcd		                TCD
.393ec9	28		plp		                PLP
.393eca	68		pla		                PLA             ; end setdp macro
.393ecb	e2 20		sep #$20	                SEP #$20        ; set A short
.393ecd	18		clc		                CLC
.393ece	a5 27		lda $27		                LDA OPL2_CHANNEL
.393ed0	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393ed2	69 a0		adc #$a0	                ADC #$A0
.393ed4	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393ed6	a9 00		lda #$00	                LDA #$00
.393ed8	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393eda	c2 30		rep #$30	                REP #$30        ; set A&X long
.393edc	18		clc		                CLC
.393edd	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393ee0	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393ee2	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393ee4	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393ee7	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393ee9	e2 20		sep #$20	                SEP #$20        ; set A short
.393eeb	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393eed	85 32		sta $32		                STA OPL2_PARAMETER0
.393eef	18		clc		                CLC
.393ef0	a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.393ef2	69 10		adc #$10	                ADC #$10
.393ef4	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393ef6	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393ef8	29 03		and #$03	                AND #$03
.393efa	85 33		sta $33		                STA OPL2_PARAMETER1
.393efc	6b		rtl		                RTL
.393efd					OPL2_Set_Frequency
.393efd	6b		rtl		                RTL
.393efe					OPL2_Get_Frequency
.393efe	6b		rtl		                RTL
.393eff					OPL2_SET_BLOCK
.393eff	48		pha		                PHA             ; begin setdp macro
.393f00	08		php		                PHP
.393f01	c2 20		rep #$20	                REP #$20        ; set A long
.393f03	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393f06	5b		tcd		                TCD
.393f07	28		plp		                PLP
.393f08	68		pla		                PLA             ; end setdp macro
.393f09	e2 20		sep #$20	                SEP #$20        ; set A short
.393f0b	18		clc		                CLC
.393f0c	a5 27		lda $27		                LDA OPL2_CHANNEL
.393f0e	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393f10	69 b0		adc #$b0	                ADC #$B0
.393f12	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393f14	a9 00		lda #$00	                LDA #$00
.393f16	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393f18	c2 30		rep #$30	                REP #$30        ; set A&X long
.393f1a	18		clc		                CLC
.393f1b	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393f1e	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393f20	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393f22	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393f25	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393f27	e2 20		sep #$20	                SEP #$20        ; set A short
.393f29	a5 31		lda $31		                LDA OPL2_OCTAVE
.393f2b	29 07		and #$07	                AND #$07
.393f2d	0a		asl a		                ASL
.393f2e	0a		asl a		                ASL
.393f2f	85 31		sta $31		                STA OPL2_OCTAVE
.393f31	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393f33	29 e3		and #$e3	                AND #$E3
.393f35	05 31		ora $31		                ORA OPL2_OCTAVE
.393f37	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393f39	60		rts		                RTS
.393f3a					OPL2_SET_KEYON
.393f3a	48		pha		                PHA             ; begin setdp macro
.393f3b	08		php		                PHP
.393f3c	c2 20		rep #$20	                REP #$20        ; set A long
.393f3e	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393f41	5b		tcd		                TCD
.393f42	28		plp		                PLP
.393f43	68		pla		                PLA             ; end setdp macro
.393f44	e2 20		sep #$20	                SEP #$20        ; set A short
.393f46	18		clc		                CLC
.393f47	a5 27		lda $27		                LDA OPL2_CHANNEL
.393f49	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393f4b	69 b0		adc #$b0	                ADC #$B0
.393f4d	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393f4f	a9 00		lda #$00	                LDA #$00
.393f51	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393f53	c2 30		rep #$30	                REP #$30        ; set A&X long
.393f55	18		clc		                CLC
.393f56	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393f59	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393f5b	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393f5d	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393f60	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393f62	e2 20		sep #$20	                SEP #$20        ; set A short
.393f64	a5 32		lda $32		                LDA OPL2_PARAMETER0
.393f66	29 01		and #$01	                AND #$01
.393f68	f0 02		beq $393f6c	                BEQ SET_KEYON_OFF
.393f6a	a9 20		lda #$20	                LDA #$20
.393f6c					    SET_KEYON_OFF
.393f6c	85 32		sta $32		                STA OPL2_PARAMETER0
.393f6e	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393f70	29 df		and #$df	                AND #$DF
.393f72	05 32		ora $32		                ORA OPL2_PARAMETER0
.393f74	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393f76	60		rts		                RTS
.393f77					OPL2_SET_FEEDBACK
.393f77	48		pha		                PHA             ; begin setdp macro
.393f78	08		php		                PHP
.393f79	c2 20		rep #$20	                REP #$20        ; set A long
.393f7b	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393f7e	5b		tcd		                TCD
.393f7f	28		plp		                PLP
.393f80	68		pla		                PLA             ; end setdp macro
.393f81	e2 20		sep #$20	                SEP #$20        ; set A short
.393f83	18		clc		              CLC
.393f84	a5 27		lda $27		              LDA OPL2_CHANNEL
.393f86	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393f88	69 c0		adc #$c0	              ADC #$C0
.393f8a	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393f8c	a9 00		lda #$00	              LDA #$00
.393f8e	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393f90	c2 30		rep #$30	                REP #$30        ; set A&X long
.393f92	18		clc		              CLC
.393f93	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393f96	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393f98	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393f9a	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393f9d	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393f9f	e2 20		sep #$20	                SEP #$20        ; set A short
.393fa1	a5 32		lda $32		              LDA OPL2_PARAMETER0
.393fa3	29 07		and #$07	              AND #$07
.393fa5	0a		asl a		              ASL
.393fa6	85 32		sta $32		              STA OPL2_PARAMETER0
.393fa8	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393faa	29 01		and #$01	              AND #$01
.393fac	05 32		ora $32		              ORA OPL2_PARAMETER0
.393fae	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393fb0	6b		rtl		                RTL
.393fb1					OPL2_SET_SYNTHMODE
.393fb1	48		pha		                PHA             ; begin setdp macro
.393fb2	08		php		                PHP
.393fb3	c2 20		rep #$20	                REP #$20        ; set A long
.393fb5	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393fb8	5b		tcd		                TCD
.393fb9	28		plp		                PLP
.393fba	68		pla		                PLA             ; end setdp macro
.393fbb	08		php		              PHP ; Push the Carry
.393fbc	e2 20		sep #$20	                SEP #$20        ; set A short
.393fbe	18		clc		              CLC
.393fbf	a5 27		lda $27		              LDA OPL2_CHANNEL
.393fc1	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393fc3	69 c0		adc #$c0	              ADC #$C0
.393fc5	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393fc7	a9 00		lda #$00	              LDA #$00
.393fc9	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393fcb	c2 30		rep #$30	                REP #$30        ; set A&X long
.393fcd	18		clc		              CLC
.393fce	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393fd1	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393fd3	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393fd5	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393fd8	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393fda	28		plp		              PLP ; Pull the Carry out
.393fdb	e2 20		sep #$20	                SEP #$20        ; set A short
.393fdd	b0 08		bcs $393fe7	              BCS OPL2_Set_Synthmode_Set;
.393fdf	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393fe1	29 fe		and #$fe	              AND #$FE
.393fe3	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393fe5	80 06		bra $393fed	              BRA OPL2_Set_Synthmode_Exit
.393fe7					OPL2_Set_Synthmode_Set
.393fe7	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393fe9	09 01		ora #$01	              ORA #$01
.393feb	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393fed					OPL2_Set_Synthmode_Exit
.393fed	6b		rtl		                RTL
.393fee					OPL2_SET_DEEPTREMOLO
.393fee	48		pha		                PHA             ; begin setdp macro
.393fef	08		php		                PHP
.393ff0	c2 20		rep #$20	                REP #$20        ; set A long
.393ff2	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393ff5	5b		tcd		                TCD
.393ff6	28		plp		                PLP
.393ff7	68		pla		                PLA             ; end setdp macro
.393ff8	c2 20		rep #$20	                REP #$20        ; set A long
.393ffa	a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.393ffd	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393fff	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.394002	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.394004	e2 20		sep #$20	                SEP #$20        ; set A short
.394006	b0 08		bcs $394010	              BCS OPL2_Set_DeepTremolo_Set;
.394008	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39400a	29 7f		and #$7f	              AND #$7F
.39400c	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39400e	80 06		bra $394016	              BRA OPL2_Set_DeepTremolo_Exit
.394010					OPL2_Set_DeepTremolo_Set
.394010	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.394012	09 80		ora #$80	              ORA #$80
.394014	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.394016					OPL2_Set_DeepTremolo_Exit
.394016	6b		rtl		                RTL
.394017					OPL2_SET_DEEPVIBRATO
.394017	48		pha		                PHA             ; begin setdp macro
.394018	08		php		                PHP
.394019	c2 20		rep #$20	                REP #$20        ; set A long
.39401b	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39401e	5b		tcd		                TCD
.39401f	28		plp		                PLP
.394020	68		pla		                PLA             ; end setdp macro
.394021	c2 20		rep #$20	                REP #$20        ; set A long
.394023	a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.394026	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.394028	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.39402b	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39402d	e2 20		sep #$20	                SEP #$20        ; set A short
.39402f	b0 08		bcs $394039	              BCS OPL2_Set_DeepVibrato_Set;
.394031	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.394033	29 bf		and #$bf	              AND #$BF
.394035	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.394037	80 06		bra $39403f	              BRA OPL2_Set_DeepVibrato_Exit
.394039					OPL2_Set_DeepVibrato_Set
.394039	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39403b	09 40		ora #$40	              ORA #$40
.39403d	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39403f					OPL2_Set_DeepVibrato_Exit
.39403f	6b		rtl		                RTL
.394040					OPL2_SET_PERCUSSION
.394040	48		pha		                PHA             ; begin setdp macro
.394041	08		php		                PHP
.394042	c2 20		rep #$20	                REP #$20        ; set A long
.394044	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.394047	5b		tcd		                TCD
.394048	28		plp		                PLP
.394049	68		pla		                PLA             ; end setdp macro
.39404a	c2 20		rep #$20	                REP #$20        ; set A long
.39404c	a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.39404f	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.394051	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.394054	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.394056	e2 20		sep #$20	                SEP #$20        ; set A short
.394058	b0 08		bcs $394062	                BCS OPL2_Set_Percussion_Set;
.39405a	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39405c	29 df		and #$df	                AND #$DF
.39405e	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.394060	80 06		bra $394068	                BRA OPL2_Set_Percussion_Exit
.394062					OPL2_Set_Percussion_Set
.394062	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.394064	09 20		ora #$20	                ORA #$20
.394066	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.394068					OPL2_Set_Percussion_Exit
.394068	6b		rtl		                RTL
.394069					OPL2_SET_DRUMS
.394069	48		pha		                PHA             ; begin setdp macro
.39406a	08		php		                PHP
.39406b	c2 20		rep #$20	                REP #$20        ; set A long
.39406d	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.394070	5b		tcd		                TCD
.394071	28		plp		                PLP
.394072	68		pla		                PLA             ; end setdp macro
.394073	c2 20		rep #$20	                REP #$20        ; set A long
.394075	a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.394078	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.39407a	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.39407d	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.39407f	e2 20		sep #$20	                SEP #$20        ; set A short
.394081	a5 32		lda $32		                LDA OPL2_PARAMETER0
.394083	29 1f		and #$1f	                AND #$1F
.394085	85 32		sta $32		                STA OPL2_PARAMETER0
.394087	49 ff		eor #$ff	                EOR #$FF
.394089	85 33		sta $33		                STA OPL2_PARAMETER1
.39408b	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39408d	25 33		and $33		                AND OPL2_PARAMETER1
.39408f	05 32		ora $32		                ORA OPL2_PARAMETER0
.394091	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.394093	6b		rtl		                RTL
.394094					OPL2_SET_WAVEFORM
.394094	48		pha		                PHA             ; begin setdp macro
.394095	08		php		                PHP
.394096	c2 20		rep #$20	                REP #$20        ; set A long
.394098	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39409b	5b		tcd		                TCD
.39409c	28		plp		                PLP
.39409d	68		pla		                PLA             ; end setdp macro
.39409e	c2 20		rep #$20	                REP #$20        ; set A long
.3940a0	a9 e0 00	lda #$00e0	                LDA #$00E0;
.3940a3	85 28		sta $28		                STA OPL2_REG_REGION
.3940a5	20 b9 40	jsr $3940b9	                JSR OPL2_GET_REG_OFFSET
.3940a8	e2 20		sep #$20	                SEP #$20        ; set A short
.3940aa	a5 32		lda $32		                LDA OPL2_PARAMETER0
.3940ac	29 03		and #$03	                AND #$03
.3940ae	85 32		sta $32		                STA OPL2_PARAMETER0
.3940b0	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3940b2	29 fc		and #$fc	                AND #$FC
.3940b4	05 32		ora $32		                ORA OPL2_PARAMETER0
.3940b6	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3940b8	6b		rtl		                RTL
.3940b9					OPL2_GET_REG_OFFSET
.3940b9	e2 30		sep #$30	                SEP #$30        ; set A&X short
.3940bb	a5 27		lda $27		                LDA OPL2_CHANNEL
.3940bd	29 0f		and #$0f	                AND #$0F
.3940bf	aa		tax		                TAX
.3940c0	a5 26		lda $26		                LDA OPL2_OPERATOR   ; 0 = operator 1, other = operator 2
.3940c2	d0 06		bne $3940ca	                BNE OPL2_Get_Register_Offset_l0
.3940c4	bf 01 17 39	lda $391701,x	                LDA @lregisterOffsets_operator0, X
.3940c8	80 04		bra $3940ce	                BRA OPL2_Get_Register_Offset_exit
.3940ca					OPL2_Get_Register_Offset_l0
.3940ca	bf 0a 17 39	lda $39170a,x	                LDA @lregisterOffsets_operator1, X
.3940ce					OPL2_Get_Register_Offset_exit
.3940ce	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.3940d0	a9 00		lda #$00	                LDA #$00
.3940d2	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.3940d4	c2 30		rep #$30	                REP #$30        ; set A&X long
.3940d6	18		clc		                CLC
.3940d7	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.3940da	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.3940dc	65 28		adc $28		                ADC OPL2_REG_REGION ; Ex: $20, or $40, $60, $80 (in 16bits)
.3940de	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.3940e0	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.3940e3	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.3940e5	60		rts		                RTS

;******  Return to file: src\kernel.asm


;******  Processing file: src\sdcard_controller_def.asm

=$afea00				SDC_VERSION_REG         = $AFEA00    ; Ought to read 12
=$afea01				SDC_CONTROL_REG         = $AFEA01    ; Bit0 1 = Reset core logic, and registers. Self clearing
=$afea02				SDC_TRANS_TYPE_REG      = $AFEA02  ; Bit[1:0]
=$00					SDC_TRANS_DIRECT      = $00   ; 00 = Direct Access
=$01					SDC_TRANS_INIT_SD     = $01   ; 01 = Init SD
=$02					SDC_TRANS_READ_BLK    = $02   ; 10 = RW_READ_BLOCK (512 Bytes)
=$03					SDC_TRANS_WRITE_BLK   = $03   ; 11 = RW_WRITE_SD_BLOCK
=$afea03				SDC_TRANS_CONTROL_REG   = $AFEA03
=$01					SDC_TRANS_START         = $01
=$afea04				SDC_TRANS_STATUS_REG    = $AFEA04
=$01					SDC_TRANS_BUSY          = $01     ;  1= Transaction Busy
=$afea05				SDC_TRANS_ERROR_REG     = $AFEA05
=$00					SDC_TRANS_INIT_NO_ERR   = $00   ; Init Error Report [1:0]
=$01					SDC_TRANS_INIT_CMD0_ERR = $01
=$02					SDC_TRANS_INIT_CMD1_ERR = $02
=$00					SDC_TRANS_RD_NO_ERR     = $00   ; Read Error Report [3:2]
=$04					SDC_TRANS_RD_CMD_ERR    = $04
=$08					SDC_TRANS_RD_TOKEN_ERR  = $08
=$00					SDC_TRANS_WR_NO_ERR     = $00   ; Write Report Error  [5:4]
=$10					SDC_TRANS_WR_CMD_ERR    = $10   ;
=$20					SDC_TRANS_WR_DATA_ERR   = $20
=$30					SDC_TRANS_WR_BUSY_ERR   = $30
=$afea06				SDC_DIRECT_ACCESS_REG   = $AFEA06 ; SPI Direct Read and Write - Set DATA before initiating direct Access Transaction
=$afea07				SDC_SD_ADDR_7_0_REG     = $AFEA07 ; Set the ADDR before a block read or block write
=$afea08				SDC_SD_ADDR_15_8_REG    = $AFEA08 ; Addr0 [8:0] Always should be 0, since each block is 512Bytes
=$afea09				SDC_SD_ADDR_23_16_REG   = $AFEA09
=$afea0a				SDC_SD_ADDR_31_24_REG   = $AFEA0A
=$afea0b				SDC_SPI_CLK_DEL_REG     = $AFEA0B
=$afea10				SDC_RX_FIFO_DATA_REG    = $AFEA10 ; Data from the Block Read
=$afea12				SDC_RX_FIFO_DATA_CNT_HI = $AFEA12 ; How many Bytes in the FIFO HI
=$afea13				SDC_RX_FIFO_DATA_CNT_LO = $AFEA13 ; How many Bytes in the FIFO LO
=$afea14				SDC_RX_FIFO_CTRL_REG    = $AFEA14 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)
=$afea20				SDC_TX_FIFO_DATA_REG    = $AFEA20 ; Write Data Block here
=$afea24				SDC_TX_FIFO_CTRL_REG    = $AFEA24 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)

;******  Return to file: src\kernel.asm


;******  Processing file: src\sdos.asm


;******  Processing file: src\sdos_fat.asm


;******  Processing file: src\sdos_bios.asm

=$80					BIOS_TIMEOUT = $80              ; Flag to indicate if a time out has occurred (see ISETTIMEOUT)
=0					BIOS_DEV_FDC = 0                ; Floppy 0
=1					BIOS_DEV_FD1 = 1                ; Future support: Floppy 1 (not likely to be attached)
=2					BIOS_DEV_SD = 2                 ; SD card, partition 0
=3					BIOS_DEV_SD1 = 3                ; Future support: SD card, partition 1
=4					BIOS_DEV_SD2 = 4                ; Future support: SD card, partition 2
=5					BIOS_DEV_SD3 = 5                ; Future support: SD card, partition 3
=6					BIOS_DEV_HD0 = 6                ; Future support: IDE Drive 0, partition 0
=7					BIOS_DEV_HD1 = 7                ; Future support: IDE Drive 0, partition 1
=8					BIOS_DEV_HD2 = 8                ; Future support: IDE Drive 0, partition 2
=9					BIOS_DEV_HD3 = 9                ; Future support: IDE Drive 0, partition 3
=$80					BIOS_ERR_BADDEV = $80           ; BIOS bad device # error
=$81					BIOS_ERR_MOUNT = $81            ; BIOS failed to mount the device
=$82					BIOS_ERR_READ = $82             ; BIOS failed to read from a device
=$83					BIOS_ERR_WRITE = $83            ; BIOS failed to write to a device
=$84					BIOS_ERR_TRACK = $84            ; BIOS failed to seek to the correct track
=$85					BIOS_ERR_CMD = $85              ; A general block device command error
=$86					BIOS_ERR_WRITEPROT = $86        ; The media was write-protected
=$87					BIOS_ERR_NOMEDIA = $87          ; No media detected... unable to read/write in time
=$88					BIOS_ERR_RESULT = $88           ; Couldn't get the result bytes for some reason
=$89					BIOS_ERR_OOS = $89              ; FDC state is somehow out of sync with the driver.
=$8a					BIOS_ERR_NOTATA = $8A           ; IDE drive is not ATA
=$8b					BIOS_ERR_NOTINIT = $8B          ; Could not initilize the device
=$8c					BIOS_ERR_TIMEOUT = $8C          ; Timeout error
.3940e6					ITRACE
.3940e6	08		php		                PHP
.3940e7	c2 30		rep #$30	                REP #$30        ; set A&X long
.3940e9	8b		phb		                PHB                 ; Print the text
.3940ea	a3 06		lda $06,s	                LDA #6,S            ; Get bits[15..0] of string pointer
.3940ec	aa		tax		                TAX                 ; ... into X
.3940ed	e2 20		sep #$20	                SEP #$20        ; set A short
.3940ef	a3 08		lda $08,s	                LDA #8,S            ; Get bits[23..16] of string pointer
.3940f1	48		pha		                PHA
.3940f2	ab		plb		                PLB                 ; ... into B
.3940f3	22 87 07 39	jsl $390787	                JSL IPUTS           ; Print the string
.3940f7	c2 20		rep #$20	                REP #$20        ; set A long
.3940f9	a3 04		lda $04,s	                LDA #4,S            ; Move P and return address down over the string pointer
.3940fb	83 08		sta $08,s	                STA #8,S
.3940fd	a3 02		lda $02,s	                LDA #2,S
.3940ff	83 06		sta $06,s	                STA #6,S
.394101	ab		plb		                PLB
.394102	68		pla		                PLA                 ; Clean up the stack
.394103	68		pla		                PLA
.394104	28		plp		                PLP
.394105	6b		rtl		                RTL
.394106					ISETTIMEOUT
.394106	8b		phb		                PHB
.394107	0b		phd		                PHD
.394108	08		php		                PHP
.394109	48		pha		                PHA             ; begin setdbr macro
.39410a	08		php		                PHP
.39410b	e2 20		sep #$20	                SEP #$20        ; set A short
.39410d	a9 00		lda #$00	                LDA #0
.39410f	48		pha		                PHA
.394110	ab		plb		                PLB
.394111	28		plp		                PLP
.394112	68		pla		                PLA             ; end setdbr macro
.394113	48		pha		                PHA             ; begin setdp macro
.394114	08		php		                PHP
.394115	c2 20		rep #$20	                REP #$20        ; set A long
.394117	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39411a	5b		tcd		                TCD
.39411b	28		plp		                PLP
.39411c	68		pla		                PLA             ; end setdp macro
.39411d	78		sei		                SEI                             ; We don't want to be interrupted
.39411e	e2 20		sep #$20	                SEP #$20        ; set A short
.394120	85 0d		sta $032d	                STA @b BIOS_TIMER               ; Set the number of ticks to wait
.394122	a5 0c		lda $032c	                LDA @b BIOS_FLAGS               ; Clear the BIOS_TIMEOUT flag
.394124	29 7f		and #$7f	                AND #~BIOS_TIMEOUT
.394126	85 0c		sta $032c	                STA @b BIOS_FLAGS
.394128	28		plp		done            PLP
.394129	2b		pld		                PLD
.39412a	ab		plb		                PLB
.39412b	6b		rtl		                RTL
.39412c					ICMDBLOCK
.39412c	0b		phd		                PHD
.39412d	08		php		                PHP
.39412e	48		pha		                PHA             ; begin setdp macro
.39412f	08		php		                PHP
.394130	c2 20		rep #$20	                REP #$20        ; set A long
.394132	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394135	5b		tcd		                TCD
.394136	28		plp		                PLP
.394137	68		pla		                PLA             ; end setdp macro
.394138	e2 20		sep #$20	                SEP #$20        ; set A short
.39413a	a5 01		lda $0321	                LDA BIOS_DEV                ; Get the device number
.39413c	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Check to see if we're sending to the floppy
.39413e	d0 06		bne $394146	                BNE ret_success             ; No: just return
.394140	22 c4 68 39	jsl $3968c4	                JSL FDC_CMDBLOCK            ; Yes: call upon the floppy code
.394144	90 0c		bcc $394152	                BCC pass_failure
.394146					ret_success
.394146	e2 20		sep #$20	                SEP #$20        ; set A short
.394148	64 00		stz $0320	                STZ BIOS_STATUS
.39414a	28		plp		                PLP
.39414b	2b		pld		                PLD
.39414c	38		sec		                SEC
.39414d	6b		rtl		                RTL
.39414e					ret_failure
.39414e	e2 20		sep #$20	                SEP #$20        ; set A short
.394150	85 00		sta $0320	                STA BIOS_STATUS
.394152	28		plp		pass_failure    PLP
.394153	2b		pld		                PLD
.394154	18		clc		                CLC
.394155	6b		rtl		                RTL
.394156					IGETBLOCK
.394156	0b		phd		                PHD
.394157	8b		phb		                PHB
.394158	08		php		                PHP
.394159	48		pha		                PHA             ; begin setdbr macro
.39415a	08		php		                PHP
.39415b	e2 20		sep #$20	                SEP #$20        ; set A short
.39415d	a9 00		lda #$00	                LDA #0
.39415f	48		pha		                PHA
.394160	ab		plb		                PLB
.394161	28		plp		                PLP
.394162	68		pla		                PLA             ; end setdbr macro
.394163	48		pha		                PHA             ; begin setdp macro
.394164	08		php		                PHP
.394165	c2 20		rep #$20	                REP #$20        ; set A long
.394167	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39416a	5b		tcd		                TCD
.39416b	28		plp		                PLP
.39416c	68		pla		                PLA             ; end setdp macro
.39416d	e2 20		sep #$20	                SEP #$20        ; set A short
.39416f	a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.394171	c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.394173	f0 13		beq $394188	                BEQ sd_getblock                     ; Yes: go to the SDC GETBLOCK routine
.394175	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the floppy drive?
.394177	f0 17		beq $394190	                BEQ fd_getblock                     ; Yes: go to the FDC GETBLOCK routine
.394179	c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.39417b	f0 1b		beq $394198	                BEQ hd_getblock
.39417d	a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.39417f					ret_failure
.39417f	e2 20		sep #$20	                SEP #$20        ; set A short
.394181	85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.394183	28		plp		                PLP
.394184	ab		plb		                PLB
.394185	2b		pld		                PLD
.394186	38		sec		                SEC                                 ; Return failure
.394187	6b		rtl		                RTL
.394188	22 e6 5d 39	jsl $395de6	sd_getblock     JSL SDC_GETBLOCK                    ; Call the SDC GETBLOCK routine
.39418c	b0 12		bcs $3941a0	                BCS ret_success
.39418e	80 ef		bra $39417f	                BRA ret_failure
.394190	22 c9 66 39	jsl $3966c9	fd_getblock     JSL FDC_GETBLOCK                    ; Call the FDC GETBLOCK routine
.394194	b0 0a		bcs $3941a0	                BCS ret_success
.394196	80 e7		bra $39417f	                BRA ret_failure
.394198	22 85 6c 39	jsl $396c85	hd_getblock     JSL IDE_GETBLOCK                    ; Call the IDE GETBLOCK routine
.39419c	b0 02		bcs $3941a0	                BCS ret_success
.39419e	80 df		bra $39417f	                BRA ret_failure
.3941a0					ret_success
.3941a0	e2 20		sep #$20	                SEP #$20        ; set A short
.3941a2	64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.3941a4	28		plp		                PLP
.3941a5	ab		plb		                PLB
.3941a6	2b		pld		                PLD
.3941a7	38		sec		                SEC                                 ; Return success
.3941a8	6b		rtl		                RTL
.3941a9					IPUTBLOCK
.3941a9	0b		phd		                PHD
.3941aa	8b		phb		                PHB
.3941ab	08		php		                PHP
.3941ac	48		pha		                PHA             ; begin setdbr macro
.3941ad	08		php		                PHP
.3941ae	e2 20		sep #$20	                SEP #$20        ; set A short
.3941b0	a9 00		lda #$00	                LDA #0
.3941b2	48		pha		                PHA
.3941b3	ab		plb		                PLB
.3941b4	28		plp		                PLP
.3941b5	68		pla		                PLA             ; end setdbr macro
.3941b6	48		pha		                PHA             ; begin setdp macro
.3941b7	08		php		                PHP
.3941b8	c2 20		rep #$20	                REP #$20        ; set A long
.3941ba	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3941bd	5b		tcd		                TCD
.3941be	28		plp		                PLP
.3941bf	68		pla		                PLA             ; end setdp macro
.3941c0	e2 20		sep #$20	                SEP #$20        ; set A short
.3941c2	a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.3941c4	c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.3941c6	f0 13		beq $3941db	                BEQ sd_putblock                     ; Yes: go to the SDC PUTBLOCK routine
.3941c8	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the FDC?
.3941ca	f0 17		beq $3941e3	                BEQ fd_putblock                     ; Yes: go to the FDC PUTBLOCK routine
.3941cc	c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.3941ce	f0 1b		beq $3941eb	                BEQ hd_putblock
.3941d0	a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.3941d2					ret_failure
.3941d2	e2 20		sep #$20	                SEP #$20        ; set A short
.3941d4	85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.3941d6	28		plp		                PLP
.3941d7	ab		plb		                PLB
.3941d8	2b		pld		                PLD
.3941d9	18		clc		                CLC                                 ; Return failure
.3941da	6b		rtl		                RTL
.3941db	22 86 5e 39	jsl $395e86	sd_putblock     JSL SDC_PUTBLOCK                    ; Call the SDC PUTBLOCK routine
.3941df	90 f1		bcc $3941d2	                BCC ret_failure
.3941e1	80 10		bra $3941f3	                BRA ret_success
.3941e3	22 2e 67 39	jsl $39672e	fd_putblock     JSL FDC_PUTBLOCK                    ; Call the FDC PUTBLOCK routine
.3941e7	90 e9		bcc $3941d2	                BCC ret_failure
.3941e9	80 08		bra $3941f3	                BRA ret_success
.3941eb	22 16 6d 39	jsl $396d16	hd_putblock     JSL IDE_PUTBLOCK                    ; Call the IDE PUTBLOCK routine
.3941ef	90 e1		bcc $3941d2	                BCC ret_failure
.3941f1	80 00		bra $3941f3	                BRA ret_success
.3941f3					ret_success
.3941f3	e2 20		sep #$20	                SEP #$20        ; set A short
.3941f5	64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.3941f7	28		plp		                PLP
.3941f8	ab		plb		                PLB
.3941f9	2b		pld		                PLD
.3941fa	38		sec		                SEC                                 ; Return success
.3941fb	6b		rtl		                RTL

;******  Return to file: src\sdos_fat.asm


;******  Processing file: src\sdos_dir.asm

.3941fc					DOS_DIROPEN
.3941fc	da		phx		                PHX
.3941fd	5a		phy		                PHY
.3941fe	0b		phd		                PHD
.3941ff	8b		phb		                PHB
.394200	08		php		                PHP
.394201	48		pha		                PHA             ; begin setdbr macro
.394202	08		php		                PHP
.394203	e2 20		sep #$20	                SEP #$20        ; set A short
.394205	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394207	48		pha		                PHA
.394208	ab		plb		                PLB
.394209	28		plp		                PLP
.39420a	68		pla		                PLA             ; end setdbr macro
.39420b	48		pha		                PHA             ; begin setdp macro
.39420c	08		php		                PHP
.39420d	c2 20		rep #$20	                REP #$20        ; set A long
.39420f	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394212	5b		tcd		                TCD
.394213	28		plp		                PLP
.394214	68		pla		                PLA             ; end setdp macro
.394215	ad 20 a0	lda $38a020	                LDA ROOT_DIR_FIRST_CLUSTER  ; Set the cluster (or sector for FAT12)
.394218	8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID        ; to that of the root directory's start
.39421b	ad 22 a0	lda $38a022	                LDA ROOT_DIR_FIRST_CLUSTER+2
.39421e	8d 34 a0	sta $38a034	                STA DOS_DIR_BLOCK_ID+2
.394221	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Point to the directory cluster buffer for loading
.394224	85 1c		sta $033c	                STA DOS_BUFF_PTR
.394226	85 18		sta $0338	                STA DOS_DIR_PTR
.394228	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.39422b	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.39422d	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.39422f	e2 20		sep #$20	                SEP #$20        ; set A short
.394231	ad 01 a0	lda $38a001	                LDA FILE_SYSTEM             ; Check the file system
.394234	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12        ; Is it FAT12?
.394236	d0 24		bne $39425c	                BNE fetch_fat32             ; No: handle processing the diretory as FAT32
.394238					fetch_fat12
.394238	e2 20		sep #$20	                SEP #$20        ; set A short
.39423a	a9 00		lda #$00	                LDA #DOS_DIR_TYPE_FAT12ROOT ; Set the directory type to FAT12 root directory
.39423c	8d 45 a0	sta $38a045	                STA DOS_DIR_TYPE
.39423f	c2 20		rep #$20	                REP #$20        ; set A long
.394241	a5 18		lda $0338	                LDA DOS_DIR_PTR             ; Set the BIOS buffer pointer
.394243	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394245	a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.394247	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394249	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA of the sector
.39424c	85 02		sta $0322	                STA BIOS_LBA
.39424e	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.394251	85 04		sta $0324	                STA BIOS_LBA+2
.394253	22 44 10 38	jsl $381044	                JSL GETBLOCK                ; Get the sector from the FAT12 device
.394257	b0 1f		bcs $394278	                BCS do_success              ; If sucessful, set the directory cursor
.394259	82 10 17	brl $39596c	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.39425c					fetch_fat32
.39425c	e2 20		sep #$20	                SEP #$20        ; set A short
.39425e	a9 01		lda #$01	                LDA #DOS_DIR_TYPE_FILE      ; Set the directory type to file type (all FAT32, any FAT12 subdirectory)
.394260	8d 45 a0	sta $38a045	                STA DOS_DIR_TYPE
.394263	c2 20		rep #$20	                REP #$20        ; set A long
.394265	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID
.394268	85 10		sta $0330	                STA DOS_CLUS_ID
.39426a	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.39426d	85 12		sta $0332	                STA DOS_CLUS_ID+2
.39426f	22 df 47 39	jsl $3947df	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.394273	b0 03		bcs $394278	                BCS do_success              ; If successful: set the directory cursor
.394275	82 f4 16	brl $39596c	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.394278	82 f8 16	brl $395973	do_success      BRL IF_SUCCESS
.39427b					DOS_DIRFIRST
.39427b	0b		phd		                PHD
.39427c	08		php		                PHP
.39427d	48		pha		                PHA             ; begin setdp macro
.39427e	08		php		                PHP
.39427f	c2 20		rep #$20	                REP #$20        ; set A long
.394281	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394284	5b		tcd		                TCD
.394285	28		plp		                PLP
.394286	68		pla		                PLA             ; end setdp macro
.394287	c2 20		rep #$20	                REP #$20        ; set A long
.394289	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER
.39428c	85 18		sta $0338	                STA DOS_DIR_PTR
.39428e	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.394291	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.394293	28		plp		                PLP
.394294	2b		pld		                PLD
.394295	6b		rtl		                RTL
.394296					DOS_DIRNEXT
.394296	da		phx		                PHX
.394297	5a		phy		                PHY
.394298	0b		phd		                PHD
.394299	8b		phb		                PHB
.39429a	08		php		                PHP
.39429b	48		pha		                PHA             ; begin setdbr macro
.39429c	08		php		                PHP
.39429d	e2 20		sep #$20	                SEP #$20        ; set A short
.39429f	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3942a1	48		pha		                PHA
.3942a2	ab		plb		                PLB
.3942a3	28		plp		                PLP
.3942a4	68		pla		                PLA             ; end setdbr macro
.3942a5	48		pha		                PHA             ; begin setdp macro
.3942a6	08		php		                PHP
.3942a7	c2 20		rep #$20	                REP #$20        ; set A long
.3942a9	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3942ac	5b		tcd		                TCD
.3942ad	28		plp		                PLP
.3942ae	68		pla		                PLA             ; end setdp macro
.3942af	c2 20		rep #$20	                REP #$20        ; set A long
.3942b1	18		clc		                CLC                         ; Advance the directory entry pointer to the next entry
.3942b2	a5 18		lda $0338	                LDA DOS_DIR_PTR
.3942b4	69 20 00	adc #$0020	                ADC #DOS_DIR_ENTRY_SIZE
.3942b7	85 18		sta $0338	                STA DOS_DIR_PTR
.3942b9	a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.3942bb	69 00 00	adc #$0000	                ADC #0
.3942be	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.3942c0	38		sec		                SEC                         ; Check to see if we've reached the end of the sector buffer
.3942c1	a9 00 a3	lda #$a300	                LDA #<>DOS_DIR_CLUSTER_END
.3942c4	e5 18		sbc $0338	                SBC DOS_DIR_PTR
.3942c6	85 28		sta $0348	                STA DOS_TEMP
.3942c8	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER_END
.3942cb	e5 1a		sbc $033a	                SBC DOS_DIR_PTR+2
.3942cd	85 2a		sta $034a	                STA DOS_TEMP+2
.3942cf	30 0c		bmi $3942dd	                BMI get_next_block          ; Yes: try to fetch the next directory entry
.3942d1	f0 03		beq $3942d6	                BEQ check_lower
.3942d3	82 9d 16	brl $395973	                BRL IF_SUCCESS
.3942d6	a5 28		lda $0348	check_lower     LDA DOS_TEMP
.3942d8	f0 03		beq $3942dd	                BEQ get_next_block
.3942da	82 96 16	brl $395973	                BRL IF_SUCCESS
.3942dd					get_next_block
.3942dd	e2 20		sep #$20	                SEP #$20        ; set A short
.3942df	ad 45 a0	lda $38a045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.3942e2	c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE
.3942e4	f0 38		beq $39431e	                BEQ next_cluster            ; FILE TYPE: it's cluster based (FAT32, or FAT12 non-root)
.3942e6					next_sector
.3942e6	c2 20		rep #$20	                REP #$20        ; set A long
.3942e8	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID
.3942eb	1a		inc a		                INC A
.3942ec	8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID        ; Increment the sector number (FAT12 root directory is sector based)
.3942ef	c9 0a 00	cmp #$000a	                CMP #10                     ; See if we're at the end (TODO: calculate this)
.3942f2	d0 07		bne $3942fb	                BNE read_sector
.3942f4	e2 20		sep #$20	                SEP #$20        ; set A short
.3942f6	a9 00		lda #$00	                LDA #0
.3942f8	82 6d 16	brl $395968	                BRL IF_FAILURE
.3942fb					read_sector
.3942fb	c2 20		rep #$20	                REP #$20        ; set A long
.3942fd	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA to the sector #
.394300	85 02		sta $0322	                STA BIOS_LBA
.394302	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.394305	85 04		sta $0324	                STA BIOS_LBA+2
.394307	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointers to the buffer
.39430a	85 06		sta $0326	                STA BIOS_BUFF_PTR
.39430c	85 18		sta $0338	                STA DOS_DIR_PTR
.39430e	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.394311	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394313	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.394315	22 44 10 38	jsl $381044	                JSL GETBLOCK                ; Attempt to read the sector from the FAT12 device
.394319	b0 39		bcs $394354	                BCS do_success              ; If successful: set the directory cursor
.39431b	82 4e 16	brl $39596c	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.39431e					next_cluster
.39431e	c2 20		rep #$20	                REP #$20        ; set A long
.394320	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Get the current block (cluster) ID
.394323	85 10		sta $0330	                STA DOS_CLUS_ID
.394325	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.394328	85 12		sta $0332	                STA DOS_CLUS_ID+2
.39432a	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER
.39432d	85 1c		sta $033c	                STA DOS_BUFF_PTR
.39432f	85 18		sta $0338	                STA DOS_DIR_PTR
.394331	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.394334	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394336	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.394338	22 ea 4b 39	jsl $394bea	                JSL NEXTCLUSTER             ; Try to find the next cluster
.39433c	b0 03		bcs $394341	                BCS set_next
.39433e	82 2b 16	brl $39596c	                BRL IF_PASSFAILURE          ; If error: pass it up the chain
.394341	a5 10		lda $0330	set_next        LDA DOS_CLUS_ID             ; Save the cluster as the current directory cluster
.394343	8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID
.394346	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394348	8d 34 a0	sta $38a034	                STA DOS_DIR_BLOCK_ID+2
.39434b	22 df 47 39	jsl $3947df	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.39434f	b0 03		bcs $394354	                BCS do_success              ; If successful: set the directory cursor
.394351	82 18 16	brl $39596c	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.394354	82 1c 16	brl $395973	do_success      BRL IF_SUCCESS
.394357					DOS_DIRFINDFREE
.394357	da		phx		                PHX
.394358	5a		phy		                PHY
.394359	0b		phd		                PHD
.39435a	8b		phb		                PHB
.39435b	08		php		                PHP
.39435c	48		pha		                PHA             ; begin setdbr macro
.39435d	08		php		                PHP
.39435e	e2 20		sep #$20	                SEP #$20        ; set A short
.394360	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394362	48		pha		                PHA
.394363	ab		plb		                PLB
.394364	28		plp		                PLP
.394365	68		pla		                PLA             ; end setdbr macro
.394366	48		pha		                PHA             ; begin setdp macro
.394367	08		php		                PHP
.394368	c2 20		rep #$20	                REP #$20        ; set A long
.39436a	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39436d	5b		tcd		                TCD
.39436e	28		plp		                PLP
.39436f	68		pla		                PLA             ; end setdp macro
.394370	22 f5 55 39	jsl $3955f5	                JSL IF_DIROPEN
.394374	b0 06		bcs $39437c	                BCS start_walk
.394376	a9 08 00	lda #$0008	                LDA #DOS_ERR_NODIR          ; Return that we could not read the directory
.394379	82 28 00	brl $3943a4	                BRL ret_failure
.39437c	a0 00 00	ldy #$0000	start_walk      LDY #0                      ; We check the first character of the entry
.39437f					chk_entry
.39437f	e2 20		sep #$20	                SEP #$20        ; set A short
.394381	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the first byte of the directory entry
.394383	f0 1c		beq $3943a1	                BEQ ret_success             ; If 0: we have a blank... return it
.394385	c9 e5		cmp #$e5	                CMP #DOS_DIR_ENT_UNUSED     ; Is it an unused (deleted) entry?
.394387	f0 18		beq $3943a1	                BEQ ret_success             ; Yes: return it
.394389	22 2f 56 39	jsl $39562f	                JSL IF_DIRNEXT              ; Go to the next directory entry
.39438d	b0 ed		bcs $39437c	                BCS start_walk              ; If we got one, start walking it
.39438f	22 a7 43 39	jsl $3943a7	                JSL DOS_DIRAPPEND           ; If there isn't one, create a blank cluster
.394393	90 0f		bcc $3943a4	                BCC ret_failure             ; If that didn't work, return the failure
.394395	c2 20		rep #$20	                REP #$20        ; set A long
.394397	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Return the first entry
.39439a	85 18		sta $0338	                STA DOS_DIR_PTR
.39439c	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.39439f	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.3943a1	82 cf 15	brl $395973	ret_success     BRL IF_SUCCESS
.3943a4	82 c1 15	brl $395968	ret_failure     BRL IF_FAILURE
.3943a7					DOS_DIRAPPEND
.3943a7	da		phx		                PHX
.3943a8	8b		phb		                PHB
.3943a9	0b		phd		                PHD
.3943aa	08		php		                PHP
.3943ab	48		pha		                PHA             ; begin setdbr macro
.3943ac	08		php		                PHP
.3943ad	e2 20		sep #$20	                SEP #$20        ; set A short
.3943af	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3943b1	48		pha		                PHA
.3943b2	ab		plb		                PLB
.3943b3	28		plp		                PLP
.3943b4	68		pla		                PLA             ; end setdbr macro
.3943b5	48		pha		                PHA             ; begin setdp macro
.3943b6	08		php		                PHP
.3943b7	c2 20		rep #$20	                REP #$20        ; set A long
.3943b9	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3943bc	5b		tcd		                TCD
.3943bd	28		plp		                PLP
.3943be	68		pla		                PLA             ; end setdp macro
.3943bf	e2 20		sep #$20	                SEP #$20        ; set A short
.3943c1	ad 45 a0	lda $38a045	                LDA DOS_DIR_TYPE
.3943c4	c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE          ; Are we looking at a file type directory
.3943c6	f0 09		beq $3943d1	                BEQ clr_sector                  ; Yes: clear out the directory data
.3943c8					ret_failure
.3943c8	e2 20		sep #$20	                SEP #$20        ; set A short
.3943ca	a9 15		lda #$15	                LDA #DOS_ERR_DIRFULL            ; No: return a directory-full error
.3943cc	85 0e		sta $032e	                STA DOS_STATUS
.3943ce	82 3e 00	brl $39440f	                BRL pass_failure
.3943d1					clr_sector
.3943d1	c2 20		rep #$20	                REP #$20        ; set A long
.3943d3	a9 00 00	lda #$0000	                LDA #0
.3943d6	a2 00 00	ldx #$0000	                LDX #0
.3943d9	9d 00 a1	sta $38a100,x	clr_loop        STA DOS_DIR_CLUSTER,X           ; Clear the directory cluster
.3943dc	e8		inx		                INX
.3943dd	e8		inx		                INX
.3943de	e0 00 02	cpx #$0200	                CPX #512
.3943e1	d0 f6		bne $3943d9	                BNE clr_loop
.3943e3	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER          ; Point to the new, blank directory data
.3943e6	85 1c		sta $033c	                STA DOS_BUFF_PTR
.3943e8	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.3943eb	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3943ed	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID            ; We want to append it to the current directory
.3943f0	85 10		sta $0330	                STA DOS_CLUS_ID
.3943f2	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.3943f5	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3943f7	22 0b 50 39	jsl $39500b	                JSL DOS_APPENDCLUS              ; Attempt to append the blank data as a new cluster
.3943fb	90 12		bcc $39440f	                BCC pass_failure                ; If there was an error, pass it up the chain
.3943fd	ad 36 a0	lda $38a036	                LDA DOS_NEW_CLUSTER             ; Set the block ID of the new directory cluster
.394400	8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID
.394403	ad 38 a0	lda $38a038	                LDA DOS_NEW_CLUSTER+2
.394406	8d 34 a0	sta $38a034	                STA DOS_DIR_BLOCK_ID+2
.394409	28		plp		ret_success     PLP
.39440a	2b		pld		                PLD
.39440b	ab		plb		                PLB
.39440c	fa		plx		                PLX
.39440d	38		sec		                SEC
.39440e	6b		rtl		                RTL
.39440f	28		plp		pass_failure    PLP
.394410	2b		pld		                PLD
.394411	ab		plb		                PLB
.394412	fa		plx		                PLX
.394413	18		clc		                CLC
.394414	6b		rtl		                RTL
.394415					DOS_DIRWRITE
.394415	da		phx		                PHX
.394416	5a		phy		                PHY
.394417	0b		phd		                PHD
.394418	8b		phb		                PHB
.394419	08		php		                PHP
.39441a	48		pha		                PHA             ; begin setdbr macro
.39441b	08		php		                PHP
.39441c	e2 20		sep #$20	                SEP #$20        ; set A short
.39441e	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394420	48		pha		                PHA
.394421	ab		plb		                PLB
.394422	28		plp		                PLP
.394423	68		pla		                PLA             ; end setdbr macro
.394424	48		pha		                PHA             ; begin setdp macro
.394425	08		php		                PHP
.394426	c2 20		rep #$20	                REP #$20        ; set A long
.394428	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39442b	5b		tcd		                TCD
.39442c	28		plp		                PLP
.39442d	68		pla		                PLA             ; end setdp macro
.39442e	e2 20		sep #$20	                SEP #$20        ; set A short
.394430	ad 45 a0	lda $38a045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.394433	c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE      ; Is it a file type directory (FAT32 or FAT12 non-root?)
.394435	f0 1f		beq $394456	                BEQ write_cluster           ; Yes: write it back using a cluster ID
.394437					write_sector
.394437	c2 20		rep #$20	                REP #$20        ; set A long
.394439	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the BIOS_LBA to the LBA of the sector
.39443c	85 02		sta $0322	                STA BIOS_LBA
.39443e	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.394441	85 04		sta $0324	                STA BIOS_LBA+2
.394443	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.394446	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394448	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.39444b	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.39444d	22 24 10 38	jsl $381024	                JSL PUTBLOCK                ; Try to write the sector to disk
.394451	b0 1f		bcs $394472	                BCS ret_success
.394453	82 12 15	brl $395968	ret_failure     BRL IF_FAILURE
.394456					write_cluster
.394456	c2 20		rep #$20	                REP #$20        ; set A long
.394458	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the DOS_CLUS_ID to the ID of the cluster
.39445b	85 10		sta $0330	                STA DOS_CLUS_ID
.39445d	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.394460	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394462	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.394465	85 1c		sta $033c	                STA DOS_BUFF_PTR
.394467	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.39446a	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.39446c	22 1c 48 39	jsl $39481c	                JSL DOS_PUTCLUSTER          ; Try to write the cluster to disk
.394470	90 e1		bcc $394453	                BCC ret_failure
.394472	82 fe 14	brl $395973	ret_success     BRL IF_SUCCESS

;******  Return to file: src\sdos_fat.asm

.0000					DEVICE_DESC
>0000					DEVNAME         .dword ?            ; A pointer to the ASCIIZ name of the device
>0004					DEVNUMBER       .byte ?           ; The BIOS_DEV number for the device
>0005					NEXT            .dword ?            ; A pointer to the next device descriptor
.0000					DIRENTRY
>0000					SHORTNAME               .fill 11        ; $00 - The short name of the file (8 name, 3 extension)
>000b					ATTRIBUTE               .byte ?         ; $0B - The attribute bits
>000c					IGNORED1                .word ?         ; $0C - Unused (by us) bytes
>000e					CREATE_TIME             .word ?         ; $0E - Creation time
>0010					CREATE_DATE             .word ?         ; $10 - Creation date
>0012					ACCESS_DATE             .word ?         ; $12 - Last access date
>0014					CLUSTER_H               .word ?         ; $14 - High word of the first cluster #
>0016					MODIFIED_TIME           .word ?         ; $16 - Last modified time
>0018					MODIFIED_DATE           .word ?         ; $18 - Last modified date
>001a					CLUSTER_L               .word ?         ; $1A - Low word of the first cluster #
>001c					SIZE                    .dword ?        ; $1C - The size of the file (in bytes)
=$01					DOS_ATTR_RO = $01                       ; File is read-only
=$02					DOS_ATTR_HIDDEN = $02                   ; File is hidden
=$04					DOS_ATTR_SYSTEM = $04                   ; File is a system file
=$08					DOS_ATTR_VOLUME = $08                   ; Entry is the volume label
=$10					DOS_ATTR_DIR = $10                      ; Entry is a directory
=$20					DOS_ATTR_ARCH = $20                     ; Entry has changed since last backup
=$0f					DOS_ATTR_LONGNAME = $0F                 ; Entry is the long file name
.0000					FILEDESC
>0000					STATUS              .byte ?             ; The status flags of the file descriptor (open, closed, error, EOF, etc.)
>0001					DEV                 .byte ?             ; The ID of the device holding the file
>0002					PATH                .dword ?            ; Pointer to a NULL terminated path string
>0006					CLUSTER             .dword ?            ; The current cluster of the file.
>000a					FIRST_CLUSTER       .dword ?            ; The ID of the first cluster in the file
>000e					BUFFER              .dword ?            ; Pointer to a cluster-sized buffer
>0012					SIZE                .dword ?            ; The size of the file
>0016					CREATE_DATE         .word ?             ; The creation date of the file
>0018					CREATE_TIME         .word ?             ; The creation time of the file
>001a					MODIFIED_DATE       .word ?             ; The modification date of the file
>001c					MODIFIED_TIME       .word ?             ; The modification time of the file
>001e					RESERVED            .word ?             ; Two reserved bytes to bring the descriptor up to 32 bytes
=$01					FD_STAT_READ = $01                      ; The file is readable
=$02					FD_STAT_WRITE = $02                     ; The file is writable
=$10					FD_STAT_ALLOC = $10                     ; The file descriptor has been allocated
=$38					FD_STAT_OPEN = $38                      ; The file is open
=$40					FD_STAT_ERROR = $40                     ; The file is in an error condition
=$80					FD_STAT_EOF = $80                       ; The file cursor is at the end of the file
=$0fffffff				FAT_LAST_CLUSTER = $0FFFFFFF            ; Code to mark the last cluster of a file
=1					VOLUMEMAX = 1                           ; The maximum number of mounted volumes we support
=32					DOS_DIR_ENTRY_SIZE = 32                 ; The size of a directory entry
=512					DOS_SECTOR_SIZE = 512                   ; The size of a sector
=$e5					DOS_DIR_ENT_UNUSED = $E5                ; Marker for an unused directory entry
=$00					PART_TYPE_FAT12 = $00                   ; "Partition" type: FAT12, used for floppy disks
=$0c					PART_TYPE_FAT32_LBA = $0C               ; Patition type: FAT32 with LBA addressing
=$29					BPB_EXTENDED_RECORD = $29               ; If SIGNATUREB of the BPB has this byte, the volume label is valid
=0					DOS_DIR_TYPE_FAT12ROOT = 0              ; Directory is a FAT12 root directory
=1					DOS_DIR_TYPE_FILE = 1                   ; Directory is a file type directory
=8					DOS_FD_MAX = 8                          ; The maximum number of open file descriptors
=1					DOS_ERR_READ = 1                        ; We could not read a sector, check BIOS_STATUS for details
=2					DOS_ERR_NOTMBR = 2                      ; We could not find the MBR
=3					DOS_ERR_NOFAT32 = 3                     ; We could not find a FAT32 parition using LBA
=4					DOS_ERR_NOINIT = 4                      ; We could not INIT the block device
=5					DOS_ERR_VOLID = 5                       ; Volume ID sector could not be loaded
=6					DOS_ERR_FAT = 6                         ; Can't scan the FAT for some reason
=7					DOS_ERR_BADPATH = 7                     ; The path was badly formatted
=8					DOS_ERR_NODIR = 8                       ; Could not read the directory
=9					DOS_ERR_NOTFOUND = 9                    ; File/directory requested was not found
=10					DOS_ERR_NOCLUSTER = 10                  ; There are no more clusters
=11					DOS_ERR_FILEEXISTS = 11                 ; There is already a file of that name
=12					DOS_ERR_NOTOPEN = 12                    ; File has not been open
=13					DOS_ERR_NOTREAD = 13                    ; File is not open for reading
=14					DOS_ERR_NOTWRITE = 14                   ; File is not open for writing
=15					DOS_ERR_OPEN = 15                       ; File is already open
=16					DOS_ERR_PGXSIG = 16                     ; File does not have the PGX signature
=17					DOS_ERR_NOEXEC = 17                     ; File does is not an executable format
=18					DOS_ERR_MEDIAFULL = 18                  ; There are no more free clusters on the drive
=19					DOS_ERR_WRITEPROT = 19                  ; The medium is write-protected
=20					DOS_ERR_FATUPDATE = 20                  ; Can't update the FAT
=21					DOS_ERR_DIRFULL = 21                    ; The directory is full
=22					DOS_ERR_NOFD = 22                       ; No file descriptors are available for allocation
=446					PART0_OFF = 446                         ; Offset to the first partition in the MBR
=4					PART_TYPE_OFF = 4                       ; Offset to the partition's type
=8					PART_LBA_OFF = 8                        ; Offset to the LBA of the first sector of the partition
=13					PART_SECT_COUNT_OFF = 13                ; Offset to the sector count of the partition
=510					MBR_SIGNATURE = 510                     ; The offset to the MBR signature bytes
=11					BPB_BYTEPERSEC_OFF = 11                 ; Offset in the BPB sector to the Bytes Per Sector
=13					BPB_SECPERCLUS_OFF = 13                 ; Offset in the BPB sector to the Sectors Per Cluster
=14					BPB_RSRVCLUS_OFF = 14                   ; Offset in the BPB sector to the Number of Reserved Clusters
=16					BPB_NUMFAT_OFF = 16                     ; Offset in the BPB sector to the Number of FATs
=17					BPB_ROOT_MAX_ENTRY_OFF = 17             ; Offset in the BPB sector to the Maximum # of entries in the root directory (FAT12)
=19					BPB_TOTAL_SECTORS = 19                  ; Offset in the BPB sector to the number of sectors on the partition or disk (FAT12)
=$24					BPB_SECPERFAT_OFF = $24                 ; Offset in the BPB sector to the Sectors Per FAT
=38					BPB_SIGNATUREB = 38                     ; Offset in the BPB sector to the second signature byte
=39					BPB_VOLUMEID = 39                       ; Offset in the BPB sector to the volume ID
=$2c					BPB_ROOTCLUS_OFF = $2C                  ; Offset in the BPB sector to the Root Cluster Number
=510					BPB_SIGNATURE = 510                     ; The offset to the MBR signature bytes
=$38a000				DOS_HIGH_VARIABLES      = $38A000
=$38a000				DEVICE                  = $38A000       ; 1 byte - The number of the block device
=$38a001				FILE_SYSTEM             = $38A001       ; 1 byte - The type of filesystem (FAT12, FAT32, etc.)
=$38a002				PARTITION               = $38A002       ; 1 byte - The number of the partitions on the device
=$38a003				SECTORS_PER_CLUSTER     = $38A003       ; 1 byte - The number of sectors in a cluster
=$38a004				FIRSTSECTOR             = $38A004       ; 4 bytes - The LBA of the first sector on the volume
=$38a008				SECTORCOUNT             = $38A008       ; 4 bytes - The number of sectors in the volume
=$38a00c				NUM_RSRV_SEC            = $38A00C       ; 2 bytes - The number of hidden or reserved sectors
=$38a00e				CLUSTER_SIZE            = $38A00E       ; 2 bytes - The size of a cluster in bytes
=$38a010				SEC_PER_FAT             = $38A010       ; 4 bytes - The number of sectors per FAT
=$38a014				FAT_BEGIN_LBA           = $38A014       ; 4 bytes - The LBA of the first sector of FAT #1
=$38a018				FAT2_BEGIN_LBA          = $38A018       ; 4 bytes - The LBA of the first sector of FAT #2
=$38a01c				CLUSTER_BEGIN_LBA       = $38A01C       ; 4 bytes - The LBA of the first cluster in the storage area
=$38a020				ROOT_DIR_FIRST_CLUSTER  = $38A020       ; 4 bytes - The number of the first cluster in the root directory
=$38a024				ROOT_DIR_MAX_ENTRY      = $38A024       ; 2 bytes - The maximum number of entries in the root directory (0 = no limit)
=$38a026				VOLUME_ID               = $38A026       ; 4 bytes - The ID of the volume
=$38a02a				DOS_CURR_CLUS           = $38A02A       ; 4 bytes - The current cluster (for delete)
=$38a02e				DOS_NEXT_CLUS           = $38A02E       ; 4 bytes - The next cluster in a file (for delete)
=$38a032				DOS_DIR_BLOCK_ID        = $38A032       ; 4 bytes - The ID of the current directory block
=$38a036				DOS_NEW_CLUSTER         = $38A036       ; 4 bytes - Space to store a newly written cluster ID
=$38a03a				DOS_SHORT_NAME          = $38A03A       ; 11 bytes - The short name for a desired file
=$38a045				DOS_DIR_TYPE            = $38A045       ; 1 byte - a code indicating the type of the current directory (0 = cluster based, $80 = sector based)
=$38a046				DOS_CURR_DIR_ID         = $38A046       ; 4 byte - the ID of the first sector or cluster of the current directory
=$38a04a				DOS_DEV_NAMES           = $38A04A       ; 4 byte - pointer to the linked list of device names
=$38a04e				FDC_MOTOR_TIMER         = $38A04E       ; 2 bytes - count-down timer to automatically turn off the FDC spindle motor
=$38a050				DOS_MOUNT_DEV           = $38A050       ; 1 byte - the device code of the currently mounted device
=$38a100				DOS_DIR_CLUSTER         = $38A100       ; 512 bytes - A buffer for directory entries
=$38a300				DOS_DIR_CLUSTER_END     = $38A300       ; The byte just past the end of the directory cluster buffer
=$38a300				DOS_SECTOR              = $38A300       ; 512 bytes - A buffer for block device read/write
=$38a500				DOS_SECTOR_END          = $38A500       ; The byte just past the end of the cluster buffer
=$38a500				DOS_FAT_SECTORS         = $38A500       ; 1024 bytes - two sectors worth of the FAT
=$38a900				DOS_FAT_SECTORS_END     = $38A900       ; The byte just past the end of the FAT buffers
=$38a900				DOS_BOOT_SECTOR         = $38A900       ; A sector for holding the boot sector
=$38ab00				DOS_BOOT_SECTOR_END     = $38AB00
=$38ab00				DOS_SPARE_SECTOR        = $38AB00       ; A spare 512 byte buffer for loading sectors
=$38ad00				DOS_SPARE_SECTOR_END    = $38AD00
=$38ad00				DOS_SPARE_FD            = $38AD00       ; A spare file descriptor buffer
=3714336				DOS_SPARE_FD_END        = DOS_SPARE_FD + SIZE(FILEDESC)
=3714336				DOS_FILE_DESCS          = DOS_SPARE_FD_END
=3714592				DOS_FILE_DESCS_END      = DOS_FILE_DESCS + SIZE(FILEDESC) * DOS_FD_MAX
=$38b000				DOS_FILE_BUFFS          = $38B000
=3719168				DOS_FILE_BUFFS_END      = DOS_FILE_BUFFS + DOS_SECTOR_SIZE * DOS_FD_MAX
.394475					DOS_INIT
.394475	8b		phb		                PHB
.394476	0b		phd		                PHD
.394477	08		php		                PHP
.394478	48		pha		                PHA             ; begin setdbr macro
.394479	08		php		                PHP
.39447a	e2 20		sep #$20	                SEP #$20        ; set A short
.39447c	a9 00		lda #$00	                LDA #0
.39447e	48		pha		                PHA
.39447f	ab		plb		                PLB
.394480	28		plp		                PLP
.394481	68		pla		                PLA             ; end setdbr macro
.394482	48		pha		                PHA             ; begin setdp macro
.394483	08		php		                PHP
.394484	c2 20		rep #$20	                REP #$20        ; set A long
.394486	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394489	5b		tcd		                TCD
.39448a	28		plp		                PLP
.39448b	68		pla		                PLA             ; end setdp macro
.39448c	e2 20		sep #$20	                SEP #$20        ; set A short
.39448e	c2 10		rep #$10	                REP #$10        ; set X long
.394490	a2 00 00	ldx #$0000	                LDX #0                  ; Zero out all the bank 0 variables
.394493	a9 00		lda #$00	                LDA #0
.394495	9d 20 03	sta $0320,x	b0_clr_loop     STA @w SDOS_VARIABLES,X
.394498	e8		inx		                INX
.394499	e0 15 02	cpx #$0215	                CPX #<>(FDC_CMD_RETRY - SDOS_VARIABLES + 1)
.39449c	d0 f7		bne $394495	                BNE b0_clr_loop
.39449e	48		pha		                PHA             ; begin setdbr macro
.39449f	08		php		                PHP
.3944a0	e2 20		sep #$20	                SEP #$20        ; set A short
.3944a2	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3944a4	48		pha		                PHA
.3944a5	ab		plb		                PLB
.3944a6	28		plp		                PLP
.3944a7	68		pla		                PLA             ; end setdbr macro
.3944a8	48		pha		                PHA             ; begin setdp macro
.3944a9	08		php		                PHP
.3944aa	c2 20		rep #$20	                REP #$20        ; set A long
.3944ac	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3944af	5b		tcd		                TCD
.3944b0	28		plp		                PLP
.3944b1	68		pla		                PLA             ; end setdp macro
.3944b2	e2 20		sep #$20	                SEP #$20        ; set A short
.3944b4	c2 10		rep #$10	                REP #$10        ; set X long
.3944b6	a2 00 00	ldx #$0000	                LDX #0                  ; Zero out all the bank $38 variables
.3944b9	a9 00		lda #$00	                LDA #0
.3944bb	9d 00 a0	sta $38a000,x	b38_clr_loop    STA @w DOS_HIGH_VARIABLES,X
.3944be	e8		inx		                INX
.3944bf	e0 01 20	cpx #$2001	                CPX #<>(DOS_FILE_BUFFS_END - DOS_HIGH_VARIABLES + 1)
.3944c2	d0 f7		bne $3944bb	                BNE b38_clr_loop
.3944c4	c2 20		rep #$20	                REP #$20        ; set A long
.3944c6	a9 74 48	lda #$4874	                LDA #<>DOS_HD_DESC      ; Initialize the device names list
.3944c9	8f 4a a0 38	sta $38a04a	                STA @l DOS_DEV_NAMES
.3944cd	a9 39 00	lda #$0039	                LDA #`DOS_HD_DESC
.3944d0	8f 4c a0 38	sta $38a04c	                STA @l DOS_DEV_NAMES+2
.3944d4	e2 20		sep #$20	                SEP #$20        ; set A short
.3944d6	a9 02		lda #$02	                LDA #BIOS_DEV_SD        ; Default to the SD card
.3944d8	85 01		sta $0321	                STA BIOS_DEV
.3944da	a9 ff		lda #$ff	                LDA #$FF                ; Set the mounted device to a sentinel value
.3944dc	8f 50 a0 38	sta $38a050	                STA @l DOS_MOUNT_DEV
.3944e0	a9 00		lda #$00	                LDA #0
.3944e2	a2 00 00	ldx #$0000	                LDX #0
.3944e5	9d 20 ad	sta $38ad20,x	fd_zero_loop    STA @w DOS_FILE_DESCS,X
.3944e8	e8		inx		                INX
.3944e9	e0 00 01	cpx #$0100	                CPX #(DOS_FILE_DESCS_END - DOS_FILE_DESCS)
.3944ec	d0 f7		bne $3944e5	                BNE fd_zero_loop
.3944ee	a9 00		lda #$00	                LDA #0
.3944f0	a2 00 00	ldx #$0000	                LDX #0
.3944f3	9d 00 b0	sta $38b000,x	sect_zero_loop  STA @w DOS_FILE_BUFFS,X
.3944f6	e8		inx		                INX
.3944f7	e0 00 10	cpx #$1000	                CPX #(DOS_FILE_BUFFS_END - DOS_FILE_BUFFS)
.3944fa	d0 f7		bne $3944f3	                BNE sect_zero_loop
.3944fc	c2 20		rep #$20	                REP #$20        ; set A long
.3944fe	a9 20 ad	lda #$ad20	                LDA #<>DOS_FILE_DESCS   ; Initialize a pointer to the file descriptors
.394501	85 20		sta $0340	                STA @b DOS_FD_PTR
.394503	a9 38 00	lda #$0038	                LDA #`DOS_FILE_DESCS
.394506	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.394508	a9 00 b0	lda #$b000	                LDA #<>DOS_FILE_BUFFS   ; Initialize a pointer to the sector buffers
.39450b	85 28		sta $0348	                STA @b DOS_TEMP
.39450d	a9 38 00	lda #$0038	                LDA #`DOS_FILE_BUFFS
.394510	85 2a		sta $034a	                STA @b DOS_TEMP+2
.394512	a2 08 00	ldx #$0008	                LDX #DOS_FD_MAX         ; Set how many file descriptors to update
.394515	a0 0e 00	ldy #$000e	fd_buff_loop    LDY #FILEDESC.BUFFER    ; Set the file descriptor's buffer pointer
.394518	a5 28		lda $0348	                LDA @b DOS_TEMP
.39451a	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39451c	c8		iny		                INY
.39451d	c8		iny		                INY
.39451e	a5 2a		lda $034a	                LDA @b DOS_TEMP+2
.394520	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394522	18		clc		                CLC                     ; Advance the file descriptor pointer to the next file descriptor
.394523	a5 20		lda $0340	                LDA @b DOS_FD_PTR
.394525	69 20 00	adc #$0020	                ADC #SIZE(FILEDESC)
.394528	85 20		sta $0340	                STA @b DOS_FD_PTR
.39452a	a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.39452c	69 00 00	adc #$0000	                ADC #0
.39452f	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.394531	18		clc		                CLC                     ; Advance the sector buffer pointer to the next buffer
.394532	a5 28		lda $0348	                LDA @b DOS_TEMP
.394534	69 00 02	adc #$0200	                ADC #DOS_SECTOR_SIZE
.394537	85 28		sta $0348	                STA @b DOS_TEMP
.394539	a5 2a		lda $034a	                LDA @b DOS_TEMP+2
.39453b	69 00 00	adc #$0000	                ADC #0
.39453e	85 2a		sta $034a	                STA @b DOS_TEMP+2
.394540	ca		dex		                DEX                     ; Count down the descriptors...
.394541	d0 d2		bne $394515	                BNE fd_buff_loop        ; If not zero, keep setting the buffer pointers
.394543	28		plp		                PLP
.394544	2b		pld		                PLD
.394545	ab		plb		                PLB
.394546	6b		rtl		                RTL
.394547					DOS_MOUNT
.394547	8b		phb		                PHB
.394548	0b		phd		                PHD
.394549	08		php		                PHP
.39454a	48		pha		                PHA             ; begin setdbr macro
.39454b	08		php		                PHP
.39454c	e2 20		sep #$20	                SEP #$20        ; set A short
.39454e	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394550	48		pha		                PHA
.394551	ab		plb		                PLB
.394552	28		plp		                PLP
.394553	68		pla		                PLA             ; end setdbr macro
.394554	48		pha		                PHA             ; begin setdp macro
.394555	08		php		                PHP
.394556	c2 20		rep #$20	                REP #$20        ; set A long
.394558	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39455b	5b		tcd		                TCD
.39455c	28		plp		                PLP
.39455d	68		pla		                PLA             ; end setdp macro
.39455e	e2 20		sep #$20	                SEP #$20        ; set A short
.394560	a5 01		lda $0321	                LDA BIOS_DEV            ; Get the device to moount
.394562	8f 50 a0 38	sta $38a050	try_mount       STA @l DOS_MOUNT_DEV    ; Save the device we're going to try to mount
.394566	c9 02		cmp #$02	                CMP #BIOS_DEV_SD        ; Is it the SDC?
.394568	f0 1f		beq $394589	                BEQ do_sdc_mount        ; Yes: attempt to mount it
.39456a	c9 06		cmp #$06	                CMP #BIOS_DEV_HD0       ; Is it HD0?
.39456c	f0 26		beq $394594	                BEQ do_ide_mount        ; Yes: attempt to mount the IDE drive
.39456e	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC       ; Is it the FDC?
.394570	f0 0b		beq $39457d	                BEQ do_fdc_mount        ; Yes: attempt to mount it
.394572	a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return a bad device error
.394574	85 0e		sta $032e	                STA DOS_STATUS
.394576	a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV
.394578	85 00		sta $0320	                STA BIOS_STATUS
.39457a	82 7c 01	brl $3946f9	                BRL ret_failure
.39457d	22 9a 67 39	jsl $39679a	do_fdc_mount    JSL FDC_MOUNT           ; Attempt to mount the floppy disk
.394581	b0 03		bcs $394586	                BCS fdc_success
.394583	82 73 01	brl $3946f9	                BRL ret_failure
.394586	82 67 01	brl $3946f0	fdc_success     BRL ret_success
.394589	22 a4 5d 39	jsl $395da4	do_sdc_mount    JSL SDC_INIT            ; Yes: Initialize access to the SDC
.39458d	b0 10		bcs $39459f	                BCS get_mbr             ; Continue if success
.39458f	a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.394591	82 65 01	brl $3946f9	                BRL ret_failure
.394594	22 90 6b 39	jsl $396b90	do_ide_mount    JSL IDE_INIT            ; Yes: Initialize access to the IDE drive
.394598	b0 05		bcs $39459f	                BCS get_mbr             ; Continue if success
.39459a	a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.39459c	82 5a 01	brl $3946f9	                BRL ret_failure
.39459f					get_mbr
.39459f	c2 30		rep #$30	                REP #$30        ; set A&X long
.3945a1	64 02		stz $0322	                STZ BIOS_LBA            ; Get the MBR
.3945a3	64 04		stz $0324	                STZ BIOS_LBA+2
.3945a5	a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR       ; Into DOS_SECTOR
.3945a8	85 06		sta $0326	                STA BIOS_BUFF_PTR
.3945aa	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.3945ad	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3945af	22 44 10 38	jsl $381044	                JSL GETBLOCK            ; Try to read the MBR
.3945b3	b0 07		bcs $3945bc	                BCS chk_signature       ; If success, check the signature bytes
.3945b5	e2 20		sep #$20	                SEP #$20        ; set A short
.3945b7	a9 01		lda #$01	                LDA #DOS_ERR_READ       ; Otherwise: report we couldn't read the first sector
.3945b9	82 3d 01	brl $3946f9	                BRL ret_failure
.3945bc					chk_signature
.3945bc	e2 20		sep #$20	                SEP #$20        ; set A short
.3945be	ad fe a4	lda $38a4fe	                LDA DOS_SECTOR+MBR_SIGNATURE
.3945c1	c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.3945c3	d0 07		bne $3945cc	                BNE not_mbr             ; No: signal we could find the MBR
.3945c5	ad ff a4	lda $38a4ff	                LDA DOS_SECTOR+MBR_SIGNATURE+1
.3945c8	c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.3945ca	f0 05		beq $3945d1	                BEQ chk_part_type       ; Yes: we have an MBR
.3945cc	a9 02		lda #$02	not_mbr         LDA #DOS_ERR_NOTMBR     ; Return that we didn't find the MBR
.3945ce	82 28 01	brl $3946f9	                BRL ret_failure
.3945d1	ad c2 a4	lda $38a4c2	chk_part_type   LDA DOS_SECTOR+PART0_OFF+PART_TYPE_OFF
.3945d4	c9 0c		cmp #$0c	                CMP #PART_TYPE_FAT32_LBA
.3945d6	f0 05		beq $3945dd	                BEQ get_LBA             ; Is FAT32 with LBA?
.3945d8	a9 03		lda #$03	                LDA #DOS_ERR_NOFAT32    ; No: return No FAT32 found error
.3945da	82 1c 01	brl $3946f9	                BRL ret_failure
.3945dd	8d 01 a0	sta $38a001	get_LBA         STA FILE_SYSTEM         ; Save the file system of the partition
.3945e0	c2 20		rep #$20	                REP #$20        ; set A long
.3945e2	ad c6 a4	lda $38a4c6	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF
.3945e5	8d 04 a0	sta $38a004	                STA FIRSTSECTOR
.3945e8	ad c8 a4	lda $38a4c8	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF+2
.3945eb	8d 06 a0	sta $38a006	                STA FIRSTSECTOR+2
.3945ee	ad cb a4	lda $38a4cb	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF
.3945f1	8d 08 a0	sta $38a008	                STA SECTORCOUNT
.3945f4	ad cd a4	lda $38a4cd	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF+2
.3945f7	8d 0a a0	sta $38a00a	                STA SECTORCOUNT+2
.3945fa	e2 20		sep #$20	                SEP #$20        ; set A short
.3945fc	a5 01		lda $0321	                LDA BIOS_DEV            ; Save the device number
.3945fe	8d 00 a0	sta $38a000	                STA DEVICE
.394601	a9 00		lda #$00	                LDA #0
.394603	8d 02 a0	sta $38a002	                STA PARTITION           ; For the moment, we only support the first partition
.394606	c2 20		rep #$20	                REP #$20        ; set A long
.394608	a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.39460b	85 06		sta $0326	                STA BIOS_BUFF_PTR
.39460d	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.394610	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394612	ad 04 a0	lda $38a004	                LDA FIRSTSECTOR
.394615	85 02		sta $0322	                STA BIOS_LBA
.394617	ad 06 a0	lda $38a006	                LDA FIRSTSECTOR+2
.39461a	85 04		sta $0324	                STA BIOS_LBA+2
.39461c	22 44 10 38	jsl $381044	                JSL GETBLOCK            ; Attempt to load the volume ID
.394620	b0 1c		bcs $39463e	                BCS get_first_sec       ; Got it? Start parsing it
.394622	e2 20		sep #$20	                SEP #$20        ; set A short
.394624	a9 05		lda #$05	                LDA #DOS_ERR_VOLID      ; Otherwise: return an error
.394626	82 d0 00	brl $3946f9	                BRL ret_failure
.394629					chk_bpb_sig
.394629	e2 20		sep #$20	                SEP #$20        ; set A short
.39462b	ad fe a4	lda $38a4fe	                LDA DOS_SECTOR+BPB_SIGNATURE
.39462e	c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.394630	d0 07		bne $394639	                BNE not_bpb             ; No: signal we could find the volume ID
.394632	ad ff a4	lda $38a4ff	                LDA DOS_SECTOR+BPB_SIGNATURE+1
.394635	c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.394637	f0 05		beq $39463e	                BEQ get_first_sec       ; Yes: we have an volume ID
.394639	a9 05		lda #$05	not_bpb         LDA #DOS_ERR_VOLID      ; Return that we didn't find the Volume ID (BPB)
.39463b	82 bb 00	brl $3946f9	                BRL ret_failure
.39463e					get_first_sec
.39463e	c2 20		rep #$20	                REP #$20        ; set A long
.394640	ad 2c a3	lda $38a32c	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF
.394643	8d 20 a0	sta $38a020	                STA ROOT_DIR_FIRST_CLUSTER
.394646	ad 2e a3	lda $38a32e	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF+2
.394649	8d 22 a0	sta $38a022	                STA ROOT_DIR_FIRST_CLUSTER+2
.39464c	ad 0e a3	lda $38a30e	                LDA DOS_SECTOR+BPB_RSRVCLUS_OFF
.39464f	8d 0c a0	sta $38a00c	                STA NUM_RSRV_SEC
.394652	18		clc		                CLC                     ; fat_begin_lba := FirstSector + Number_of_Reserved_Sectors
.394653	ad 04 a0	lda $38a004	                LDA FIRSTSECTOR
.394656	6d 0c a0	adc $38a00c	                ADC NUM_RSRV_SEC
.394659	8d 14 a0	sta $38a014	                STA FAT_BEGIN_LBA
.39465c	ad 06 a0	lda $38a006	                LDA FIRSTSECTOR+2
.39465f	69 00 00	adc #$0000	                ADC #0
.394662	8d 16 a0	sta $38a016	                STA FAT_BEGIN_LBA+2
.394665	e2 20		sep #$20	                SEP #$20        ; set A short
.394667	a2 00 00	ldx #$0000	                LDX #0
.39466a	bf 24 a3 38	lda $38a324,x	cpy_secperfat   LDA @l DOS_SECTOR+BPB_SECPERFAT_OFF,X
.39466e	9f 10 a0 38	sta $38a010,x	                STA @l SEC_PER_FAT,X
.394672	e8		inx		                INX
.394673	e0 04 00	cpx #$0004	                CPX #4
.394676	d0 f2		bne $39466a	                BNE cpy_secperfat
.394678	ad 10 a0	lda $38a010	                LDA SEC_PER_FAT
.39467b	0a		asl a		                ASL A
.39467c	8d 1c a0	sta $38a01c	                STA CLUSTER_BEGIN_LBA
.39467f	ad 11 a0	lda $38a011	                LDA SEC_PER_FAT+1
.394682	2a		rol a		                ROL A
.394683	8d 1d a0	sta $38a01d	                STA CLUSTER_BEGIN_LBA+1
.394686	ad 12 a0	lda $38a012	                LDA SEC_PER_FAT+2
.394689	2a		rol a		                ROL A
.39468a	8d 1e a0	sta $38a01e	                STA CLUSTER_BEGIN_LBA+2
.39468d	ad 13 a0	lda $38a013	                LDA SEC_PER_FAT+3
.394690	2a		rol a		                ROL A
.394691	8d 1f a0	sta $38a01f	                STA CLUSTER_BEGIN_LBA+3
.394694	18		clc		                CLC
.394695	ad 1c a0	lda $38a01c	                LDA CLUSTER_BEGIN_LBA
.394698	6d 14 a0	adc $38a014	                ADC FAT_BEGIN_LBA
.39469b	8d 1c a0	sta $38a01c	                STA CLUSTER_BEGIN_LBA
.39469e	ad 1d a0	lda $38a01d	                LDA CLUSTER_BEGIN_LBA+1
.3946a1	6d 15 a0	adc $38a015	                ADC FAT_BEGIN_LBA+1
.3946a4	8d 1d a0	sta $38a01d	                STA CLUSTER_BEGIN_LBA+1
.3946a7	ad 1e a0	lda $38a01e	                LDA CLUSTER_BEGIN_LBA+2
.3946aa	6d 16 a0	adc $38a016	                ADC FAT_BEGIN_LBA+2
.3946ad	8d 1e a0	sta $38a01e	                STA CLUSTER_BEGIN_LBA+2
.3946b0	ad 1f a0	lda $38a01f	                LDA CLUSTER_BEGIN_LBA+3
.3946b3	6d 17 a0	adc $38a017	                ADC FAT_BEGIN_LBA+3
.3946b6	8d 1f a0	sta $38a01f	                STA CLUSTER_BEGIN_LBA+3
.3946b9	e2 20		sep #$20	                SEP #$20        ; set A short
.3946bb	ad 0d a3	lda $38a30d	                LDA DOS_SECTOR+BPB_SECPERCLUS_OFF
.3946be	8d 03 a0	sta $38a003	                STA SECTORS_PER_CLUSTER
.3946c1	18		clc		                CLC
.3946c2	ad 14 a0	lda $38a014	                LDA FAT_BEGIN_LBA                       ; Compute the address of the first sector of
.3946c5	6d 10 a0	adc $38a010	                ADC SEC_PER_FAT                         ; the second copy of the FAT
.3946c8	8d 18 a0	sta $38a018	                STA FAT2_BEGIN_LBA
.3946cb	ad 15 a0	lda $38a015	                LDA FAT_BEGIN_LBA+1
.3946ce	6d 11 a0	adc $38a011	                ADC SEC_PER_FAT+1
.3946d1	8d 19 a0	sta $38a019	                STA FAT2_BEGIN_LBA+1
.3946d4	ad 16 a0	lda $38a016	                LDA FAT_BEGIN_LBA+2
.3946d7	6d 12 a0	adc $38a012	                ADC SEC_PER_FAT+2
.3946da	8d 1a a0	sta $38a01a	                STA FAT2_BEGIN_LBA+2
.3946dd	ad 17 a0	lda $38a017	                LDA FAT_BEGIN_LBA+3
.3946e0	6d 13 a0	adc $38a013	                ADC SEC_PER_FAT+3
.3946e3	8d 1b a0	sta $38a01b	                STA FAT2_BEGIN_LBA+3
.3946e6	a9 00		lda #$00	                LDA #<DOS_SECTOR_SIZE                   ; Default to one sector's worth of bytes
.3946e8	8d 0e a0	sta $38a00e	                STA CLUSTER_SIZE
.3946eb	a9 02		lda #$02	                LDA #>DOS_SECTOR_SIZE
.3946ed	8d 0f a0	sta $38a00f	                STA CLUSTER_SIZE+1
.3946f0					ret_success
.3946f0	e2 20		sep #$20	                SEP #$20        ; set A short
.3946f2	64 0e		stz $032e	                STZ DOS_STATUS          ; Set status code to 0
.3946f4	28		plp		                PLP
.3946f5	2b		pld		                PLD
.3946f6	ab		plb		                PLB
.3946f7	38		sec		                SEC
.3946f8	6b		rtl		                RTL
.3946f9					ret_failure
.3946f9	e2 20		sep #$20	                SEP #$20        ; set A short
.3946fb	85 0e		sta $032e	                STA DOS_STATUS          ; Save the status code
.3946fd	28		plp		                PLP
.3946fe	2b		pld		                PLD
.3946ff	ab		plb		                PLB
.394700	18		clc		                CLC
.394701	6b		rtl		                RTL
.394702					DOS_TESTBOOT
.394702	8b		phb		                PHB
.394703	0b		phd		                PHD
.394704	da		phx		                PHX
.394705	08		php		                PHP
.394706	48		pha		                PHA             ; begin setdbr macro
.394707	08		php		                PHP
.394708	e2 20		sep #$20	                SEP #$20        ; set A short
.39470a	a9 00		lda #$00	                LDA #0
.39470c	48		pha		                PHA
.39470d	ab		plb		                PLB
.39470e	28		plp		                PLP
.39470f	68		pla		                PLA             ; end setdbr macro
.394710	48		pha		                PHA             ; begin setdp macro
.394711	08		php		                PHP
.394712	c2 20		rep #$20	                REP #$20        ; set A long
.394714	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394717	5b		tcd		                TCD
.394718	28		plp		                PLP
.394719	68		pla		                PLA             ; end setdp macro
.39471a	c2 10		rep #$10	                REP #$10        ; set X long
.39471c					chk_dev
.39471c	e2 20		sep #$20	                SEP #$20        ; set A short
.39471e	a5 01		lda $0321	                LDA @b BIOS_DEV             ; Look at the device #
.394720	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Is it the floppy drive?
.394722	f0 24		beq $394748	                BEQ chk_vbr_brl             ; Yes: check if BRL is in the right place in the VBR
.394724	c2 30		rep #$30	                REP #$30        ; set A&X long
.394726	a9 00 00	lda #$0000	                LDA #0                      ; Point to the MBR
.394729	85 02		sta $0322	                STA @b BIOS_LBA
.39472b	85 04		sta $0324	                STA @b BIOS_LBA+2
.39472d	a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR           ; And the buffer
.394730	85 06		sta $0326	                STA @b BIOS_BUFF_PTR
.394732	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.394735	85 08		sta $0328	                STA @b BIOS_BUFF_PTR+2
.394737	22 44 10 38	jsl $381044	                JSL GETBLOCK                ; Try to load the MBR
.39473b	b0 03		bcs $394740	                BCS chk_mbr_brl
.39473d	82 47 00	brl $394787	                BRL done                    ; If failed... just return
.394740					chk_mbr_brl
.394740	e2 20		sep #$20	                SEP #$20        ; set A short
.394742	af 00 a3 38	lda $38a300	                LDA @l DOS_SECTOR           ; Check the first byte of the MBR
.394746	80 04		bra $39474c	                BRA chk_brl
.394748	af 3e a3 38	lda $38a33e	chk_vbr_brl     LDA @l DOS_SECTOR+FDC_BOOT_START
.39474c	c9 80		cmp #$80	chk_brl         CMP #$80                    ; Is the first byte a BRL/BRA instruction?
.39474e	f0 06		beq $394756	                BEQ chk_magic               ; Yes: check for the magic text
.394750	c9 82		cmp #$82	                CMP #$82
.394752	f0 02		beq $394756	                BEQ chk_magic
.394754	80 31		bra $394787	                BRA done                    ; No: just return
.394756	a2 00 00	ldx #$0000	chk_magic       LDX #0
.394759	bf 03 a3 38	lda $38a303,x	magic_loop      LDA @l DOS_SECTOR+3,X       ; Check the "vendor" byte
.39475d	df 8c 47 39	cmp $39478c,x	                CMP DOS_BOOT_MAGIC,X        ; Compare it against our boot magic code
.394761	d0 24		bne $394787	                BNE done                    ; If it's not equal, just return
.394763	e8		inx		                INX                         ; Otherwise, check the next one
.394764	e0 08 00	cpx #$0008	                CPX #8
.394767	d0 f0		bne $394759	                BNE magic_loop              ; Until we've checked all 8 bytes
.394769	c2 30		rep #$30	                REP #$30        ; set A&X long
.39476b	a9 00 02	lda #$0200	                LDA #DOS_SECTOR_SIZE
.39476e	a2 00 a5	ldx #$a500	                LDX #<>(DOS_SECTOR+DOS_SECTOR_SIZE)
.394771	a0 00 ab	ldy #$ab00	                LDY #<>(DOS_BOOT_SECTOR+DOS_SECTOR_SIZE)
.394774	44 38 38	mvp $38,$38	                MVP #`DOS_SECTOR, #`DOS_BOOT_SECTOR
.394777	e2 20		sep #$20	                SEP #$20        ; set A short
.394779	a5 01		lda $0321	                LDA @b BIOS_DEV             ; Check the device
.39477b	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Is it the FDC?
.39477d	f0 04		beq $394783	                BEQ jmp_fdc_start           ; Yes: jump to the start of the VBR code
.39477f	5c 00 a9 38	jmp $38a900	                JML DOS_BOOT_SECTOR         ; No: it's an MBR, start at the first byte
.394783	5c 3e a9 38	jmp $38a93e	jmp_fdc_start   JML DOS_BOOT_SECTOR+FDC_BOOT_START
.394787	28		plp		done            PLP
.394788	2b		pld		                PLD
.394789	ab		plb		                PLB
.39478a	fa		plx		                PLX
.39478b	6b		rtl		                RTL
>39478c	43 32 35 36 44 4f 53 20		DOS_BOOT_MAGIC  .text "C256DOS "
.394794					DOS_CALC_LBA
.394794	8b		phb		                PHB
.394795	0b		phd		                PHD
.394796	08		php		                PHP
.394797	48		pha		                PHA             ; begin setdbr macro
.394798	08		php		                PHP
.394799	e2 20		sep #$20	                SEP #$20        ; set A short
.39479b	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39479d	48		pha		                PHA
.39479e	ab		plb		                PLB
.39479f	28		plp		                PLP
.3947a0	68		pla		                PLA             ; end setdbr macro
.3947a1	48		pha		                PHA             ; begin setdp macro
.3947a2	08		php		                PHP
.3947a3	c2 20		rep #$20	                REP #$20        ; set A long
.3947a5	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3947a8	5b		tcd		                TCD
.3947a9	28		plp		                PLP
.3947aa	68		pla		                PLA             ; end setdp macro
.3947ab	c2 20		rep #$20	                REP #$20        ; set A long
.3947ad	38		sec		                SEC
.3947ae	a5 10		lda $0330	                LDA DOS_CLUS_ID                     ; cluster - 2
.3947b0	e9 02 00	sbc #$0002	                SBC #2
.3947b3	85 28		sta $0348	                STA DOS_TEMP
.3947b5	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3947b7	e9 00 00	sbc #$0000	                SBC #0
.3947ba	85 2a		sta $034a	                STA DOS_TEMP+2
.3947bc	e2 10		sep #$10	                SEP #$10        ; set X short
.3947be	ae 03 a0	ldx $38a003	                LDX SECTORS_PER_CLUSTER
.3947c1	e0 01		cpx #$01	mult_loop       CPX #1
.3947c3	f0 07		beq $3947cc	                BEQ add_offset
.3947c5	06 28		asl $0348	                ASL DOS_TEMP
.3947c7	26 28		rol $0348	                ROL DOS_TEMP
.3947c9	ca		dex		                DEX
.3947ca	80 f5		bra $3947c1	                BRA mult_loop
.3947cc	18		clc		add_offset      CLC
.3947cd	a5 28		lda $0348	                LDA DOS_TEMP                        ; cluster_being_lba + (cluster - 2) * SECTORS_PER_CLUSTER
.3947cf	6d 1c a0	adc $38a01c	                ADC CLUSTER_BEGIN_LBA
.3947d2	85 02		sta $0322	                STA BIOS_LBA
.3947d4	a5 2a		lda $034a	                LDA DOS_TEMP+2
.3947d6	6d 1e a0	adc $38a01e	                ADC CLUSTER_BEGIN_LBA+2
.3947d9	85 04		sta $0324	                STA BIOS_LBA+2
.3947db	28		plp		                PLP
.3947dc	2b		pld		                PLD
.3947dd	ab		plb		                PLB
.3947de	6b		rtl		                RTL
.3947df					DOS_GETCLUSTER
.3947df	8b		phb		                PHB
.3947e0	0b		phd		                PHD
.3947e1	08		php		                PHP
.3947e2	48		pha		                PHA             ; begin setdbr macro
.3947e3	08		php		                PHP
.3947e4	e2 20		sep #$20	                SEP #$20        ; set A short
.3947e6	a9 00		lda #$00	                LDA #0
.3947e8	48		pha		                PHA
.3947e9	ab		plb		                PLB
.3947ea	28		plp		                PLP
.3947eb	68		pla		                PLA             ; end setdbr macro
.3947ec	48		pha		                PHA             ; begin setdp macro
.3947ed	08		php		                PHP
.3947ee	c2 20		rep #$20	                REP #$20        ; set A long
.3947f0	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3947f3	5b		tcd		                TCD
.3947f4	28		plp		                PLP
.3947f5	68		pla		                PLA             ; end setdp macro
.3947f6	c2 20		rep #$20	                REP #$20        ; set A long
.3947f8	a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.3947fa	85 06		sta $0326	                STA BIOS_BUFF_PTR
.3947fc	a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.3947fe	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394800	22 94 47 39	jsl $394794	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.394804	22 44 10 38	jsl $381044	                JSL GETBLOCK                        ; Get the first block of the cluster
.394808	90 09		bcc $394813	                BCC ret_failure
.39480a					ret_success
.39480a	e2 20		sep #$20	                SEP #$20        ; set A short
.39480c	64 0e		stz $032e	                STZ DOS_STATUS
.39480e	28		plp		                PLP
.39480f	2b		pld		                PLD
.394810	ab		plb		                PLB
.394811	38		sec		                SEC
.394812	6b		rtl		                RTL
.394813					ret_failure
.394813	e2 20		sep #$20	                SEP #$20        ; set A short
.394815	85 0e		sta $032e	                STA DOS_STATUS
.394817	28		plp		                PLP
.394818	2b		pld		                PLD
.394819	ab		plb		                PLB
.39481a	18		clc		                CLC
.39481b	6b		rtl		                RTL
.39481c					DOS_PUTCLUSTER
.39481c	8b		phb		                PHB
.39481d	0b		phd		                PHD
.39481e	08		php		                PHP
.39481f	48		pha		                PHA             ; begin setdbr macro
.394820	08		php		                PHP
.394821	e2 20		sep #$20	                SEP #$20        ; set A short
.394823	a9 00		lda #$00	                LDA #0
.394825	48		pha		                PHA
.394826	ab		plb		                PLB
.394827	28		plp		                PLP
.394828	68		pla		                PLA             ; end setdbr macro
.394829	48		pha		                PHA             ; begin setdp macro
.39482a	08		php		                PHP
.39482b	c2 20		rep #$20	                REP #$20        ; set A long
.39482d	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394830	5b		tcd		                TCD
.394831	28		plp		                PLP
.394832	68		pla		                PLA             ; end setdp macro
.394833	c2 20		rep #$20	                REP #$20        ; set A long
.394835	a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.394837	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394839	a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.39483b	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.39483d	22 94 47 39	jsl $394794	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.394841	22 24 10 38	jsl $381024	                JSL PUTBLOCK                        ; PUT the first block of the cluster
.394845	90 09		bcc $394850	                BCC ret_failure
.394847					ret_success
.394847	e2 20		sep #$20	                SEP #$20        ; set A short
.394849	64 0e		stz $032e	                STZ DOS_STATUS
.39484b	28		plp		                PLP
.39484c	2b		pld		                PLD
.39484d	ab		plb		                PLB
.39484e	38		sec		                SEC
.39484f	6b		rtl		                RTL
.394850					ret_failure
.394850	e2 20		sep #$20	                SEP #$20        ; set A short
.394852	85 0e		sta $032e	                STA DOS_STATUS
.394854	28		plp		                PLP
.394855	2b		pld		                PLD
.394856	ab		plb		                PLB
.394857	18		clc		                CLC
.394858	6b		rtl		                RTL
>394859	40 46 00			DOS_FDC_NAME    .null "@F"
.39485c					DOS_FDC_DESC
>39485c	59 48 39 00			DEVNAME         .dword DOS_FDC_NAME            ; A pointer to the ASCIIZ name of the device
>394860	00				DEVNUMBER       .byte BIOS_DEV_FDC           ; The BIOS_DEV number for the device
>394861	00 00 00 00			NEXT            .dword 0            ; A pointer to the next device descriptor
>394865	40 53 00			DOS_SDC_NAME    .null "@S"
.394868					DOS_SDC_DESC
>394868	65 48 39 00			DEVNAME         .dword DOS_SDC_NAME            ; A pointer to the ASCIIZ name of the device
>39486c	02				DEVNUMBER       .byte BIOS_DEV_SD           ; The BIOS_DEV number for the device
>39486d	5c 48 39 00			NEXT            .dword DOS_FDC_DESC            ; A pointer to the next device descriptor
>394871	40 48 00			DOS_HDC_NAME    .null "@H"
.394874					DOS_HD_DESC
>394874	71 48 39 00			DEVNAME         .dword DOS_HDC_NAME            ; A pointer to the ASCIIZ name of the device
>394878	06				DEVNUMBER       .byte BIOS_DEV_HD0           ; The BIOS_DEV number for the device
>394879	68 48 39 00			NEXT            .dword DOS_SDC_DESC            ; A pointer to the next device descriptor
.39487d					DOS_PARSE_DEV
.39487d	8b		phb		                PHB
.39487e	0b		phd		                PHD
.39487f	08		php		                PHP
.394880	48		pha		                PHA             ; begin setdbr macro
.394881	08		php		                PHP
.394882	e2 20		sep #$20	                SEP #$20        ; set A short
.394884	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394886	48		pha		                PHA
.394887	ab		plb		                PLB
.394888	28		plp		                PLP
.394889	68		pla		                PLA             ; end setdbr macro
.39488a	48		pha		                PHA             ; begin setdp macro
.39488b	08		php		                PHP
.39488c	c2 20		rep #$20	                REP #$20        ; set A long
.39488e	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394891	5b		tcd		                TCD
.394892	28		plp		                PLP
.394893	68		pla		                PLA             ; end setdp macro
.394894	c2 30		rep #$30	                REP #$30        ; set A&X long
.394896	af 4a a0 38	lda $38a04a	                LDA @l DOS_DEV_NAMES        ; Point to the first device name to check
.39489a	85 28		sta $0348	                STA DOS_TEMP
.39489c	af 4c a0 38	lda $38a04c	                LDA @l DOS_DEV_NAMES+2
.3948a0	85 2a		sta $034a	                STA DOS_TEMP+2
.3948a2	a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF        ; Make DOS_STR2_PTR point to the path to check
.3948a5	85 48		sta $0368	                STA DOS_STR2_PTR
.3948a7	a9 00 00	lda #$0000	                LDA #`DOS_PATH_BUFF
.3948aa	85 4a		sta $036a	                STA DOS_STR2_PTR+2
.3948ac	a0 00 00	ldy #$0000	dev_loop        LDY #DEVICE_DESC.DEVNAME    ; Get the name of the current device into DOS_STR1_PTR
.3948af	b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.3948b1	85 44		sta $0364	                STA DOS_STR1_PTR
.3948b3	c8		iny		                INY
.3948b4	c8		iny		                INY
.3948b5	b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.3948b7	85 46		sta $0366	                STA DOS_STR1_PTR+2
.3948b9	e2 20		sep #$20	                SEP #$20        ; set A short
.3948bb	a0 00 00	ldy #$0000	                LDY #0
.3948be	b7 44		lda [$0364],y	cmp_loop        LDA [DOS_STR1_PTR],Y        ; Get the Yth character of the device name
.3948c0	f0 24		beq $3948e6	                BEQ found                   ; If it's NULL, we found a match
.3948c2	d7 48		cmp [$0368],y	                CMP [DOS_STR2_PTR],Y        ; Compare it to the Yth character of the path
.3948c4	d0 03		bne $3948c9	                BNE next_device             ; If no match, try to load the next device
.3948c6	c8		iny		                INY                         ; Go to the next character
.3948c7	80 f5		bra $3948be	                BRA cmp_loop
.3948c9					next_device
.3948c9	c2 20		rep #$20	                REP #$20        ; set A long
.3948cb	a0 05 00	ldy #$0005	                LDY #DEVICE_DESC.NEXT       ; DOS_TEMP := DOS_TEMP->NEXT
.3948ce	b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.3948d0	48		pha		                PHA
.3948d1	c8		iny		                INY
.3948d2	c8		iny		                INY
.3948d3	b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.3948d5	85 2a		sta $034a	                STA DOS_TEMP+2
.3948d7	68		pla		                PLA
.3948d8	85 28		sta $0348	                STA DOS_TEMP
.3948da	a5 28		lda $0348	                LDA DOS_TEMP                ; Is DOS_TEMP = NULL?
.3948dc	d0 ce		bne $3948ac	                BNE dev_loop                ; No: check this device
.3948de	a5 2a		lda $034a	                LDA DOS_TEMP+2
.3948e0	d0 ca		bne $3948ac	                BNE dev_loop
.3948e2	28		plp		done            PLP                         ; Otherwise, return having not found a match
.3948e3	2b		pld		                PLD
.3948e4	ab		plb		                PLB
.3948e5	6b		rtl		                RTL
.3948e6	22 f7 48 39	jsl $3948f7	found           JSL DOS_ADJUSTPATH          ; Remove the device name from the buffer
.3948ea	e2 20		sep #$20	                SEP #$20        ; set A short
.3948ec	a0 04 00	ldy #$0004	                LDY #DEVICE_DESC.DEVNUMBER  ; Set the BIOS device number from the found device
.3948ef	b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.3948f1	8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3948f5	80 eb		bra $3948e2	                BRA done
.3948f7					DOS_ADJUSTPATH
.3948f7	da		phx		                PHX
.3948f8	5a		phy		                PHY
.3948f9	8b		phb		                PHB
.3948fa	0b		phd		                PHD
.3948fb	08		php		                PHP
.3948fc	48		pha		                PHA             ; begin setdbr macro
.3948fd	08		php		                PHP
.3948fe	e2 20		sep #$20	                SEP #$20        ; set A short
.394900	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394902	48		pha		                PHA
.394903	ab		plb		                PLB
.394904	28		plp		                PLP
.394905	68		pla		                PLA             ; end setdbr macro
.394906	48		pha		                PHA             ; begin setdp macro
.394907	08		php		                PHP
.394908	c2 20		rep #$20	                REP #$20        ; set A long
.39490a	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39490d	5b		tcd		                TCD
.39490e	28		plp		                PLP
.39490f	68		pla		                PLA             ; end setdp macro
.394910	c2 30		rep #$30	                REP #$30        ; set A&X long
.394912	84 4b		sty $036b	                STY DOS_SCRATCH                 ; Save the index to later compute the size
.394914	98		tya		                TYA                             ; Compute the address of the first source byte
.394915	18		clc		                CLC
.394916	69 00 04	adc #$0400	                ADC #<>DOS_PATH_BUFF
.394919	aa		tax		                TAX
.39491a	a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF            ; Compute the destination address for the source byte
.39491d	a8		tay		                TAY
.39491e	38		sec		                SEC                             ; Compute the number of bytes to copy
.39491f	a9 00 01	lda #$0100	                LDA #256
.394922	e5 4b		sbc $036b	                SBC DOS_SCRATCH
.394924	54 00 00	mvn $00,$00	                MVN #`DOS_PATH_BUFF, #`DOS_PATH_BUFF
.394927	28		plp		                PLP
.394928	2b		pld		                PLD
.394929	ab		plb		                PLB
.39492a	7a		ply		                PLY
.39492b	fa		plx		                PLX
.39492c	6b		rtl		                RTL
.39492d					DOS_PARSE_PATH
.39492d	8b		phb		                PHB
.39492e	0b		phd		                PHD
.39492f	08		php		                PHP
.394930	48		pha		                PHA             ; begin setdbr macro
.394931	08		php		                PHP
.394932	e2 20		sep #$20	                SEP #$20        ; set A short
.394934	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394936	48		pha		                PHA
.394937	ab		plb		                PLB
.394938	28		plp		                PLP
.394939	68		pla		                PLA             ; end setdbr macro
.39493a	48		pha		                PHA             ; begin setdp macro
.39493b	08		php		                PHP
.39493c	c2 20		rep #$20	                REP #$20        ; set A long
.39493e	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394941	5b		tcd		                TCD
.394942	28		plp		                PLP
.394943	68		pla		                PLA             ; end setdp macro
.394944	c2 10		rep #$10	                REP #$10        ; set X long
.394946	e2 20		sep #$20	                SEP #$20        ; set A short
.394948	a2 00 00	ldx #$0000	                LDX #0
.39494b	b5 e0		lda $0400,x	upcase_loop     LDA DOS_PATH_BUFF,X     ; Get the character
.39494d	f0 1b		beq $39496a	                BEQ parse_dev           ; If it's NULL, the path is upper case, attempt to parse the device
.39494f	c9 20		cmp #$20	                CMP #' '                ; Is a control character?
.394951	b0 05		bcs $394958	                BGE check_case          ; No: check the case
.394953	a9 07		lda #$07	                LDA #DOS_ERR_BADPATH    ; Yes: return a bad path error
.394955	82 64 00	brl $3949bc	                BRL ret_failure
.394958	c9 61		cmp #$61	check_case      CMP #'a'                ; Is the character lower case?
.39495a	90 08		bcc $394964	                BLT next_char
.39495c	c9 7b		cmp #$7b	                CMP #'z'+1
.39495e	b0 04		bcs $394964	                BGE next_char
.394960	29 5f		and #$5f	                AND #%01011111          ; Yes: Convert to uppercase
.394962	95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.394964	e8		inx		next_char       INX                     ; Move to the next character
.394965	e0 00 01	cpx #$0100	                CPX #$100
.394968	d0 e1		bne $39494b	                BNE upcase_loop
.39496a	22 7d 48 39	jsl $39487d	parse_dev       JSL DOS_PARSE_DEV       ; Parse and extract a device specifier ":xxx:"
.39496e	a5 e0		lda $0400	                LDA DOS_PATH_BUFF       ; Check the first character of the path
.394970	c9 3a		cmp #$3a	                CMP #':'
.394972	d0 07		bne $39497b	                BNE clr_name            ; If not colon, treat it as a file name
.394974	a0 01 00	ldy #$0001	                LDY #1                  ; Otherwise...
.394977	22 f7 48 39	jsl $3948f7	                JSL DOS_ADJUSTPATH      ; For now, just remove the leading ":"
.39497b	a0 00 00	ldy #$0000	clr_name        LDY #0                  ; Set the short name to blanks
.39497e	a9 20		lda #$20	                LDA #' '
.394980	99 3a a0	sta $38a03a,y	clr_loop        STA DOS_SHORT_NAME,Y
.394983	c8		iny		                INY
.394984	c0 0b 00	cpy #$000b	                CPY #11
.394987	d0 f7		bne $394980	                BNE clr_loop
.394989	a2 00 00	ldx #$0000	                LDX #0
.39498c	a0 00 00	ldy #$0000	                LDY #0
.39498f	b5 e0		lda $0400,x	cpy_name_loop   LDA DOS_PATH_BUFF,X     ; Get the character of the name
.394991	f0 20		beq $3949b3	                BEQ ret_success         ; If NULL: we've finished parsing the path
.394993	c9 2e		cmp #$2e	                CMP #'.'                ; If it's a dot, we've finished the name part
.394995	f0 0a		beq $3949a1	                BEQ cpy_ext             ; And move to the extension
.394997	99 3a a0	sta $38a03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, store it to the name portion
.39499a	e8		inx		                INX
.39499b	c8		iny		                INY                     ; Move to the next character
.39499c	c0 08 00	cpy #$0008	                CPY #8                  ; Have we processed 8?
.39499f	d0 ee		bne $39498f	                BNE cpy_name_loop       ; No: process this one
.3949a1	e8		inx		cpy_ext         INX                     ; Skip the dot
.3949a2	a0 08 00	ldy #$0008	                LDY #8
.3949a5	b5 e0		lda $0400,x	cpy_ext_loop    LDA DOS_PATH_BUFF,X     ; Get the character of the extension
.3949a7	f0 0a		beq $3949b3	                BEQ ret_success         ; If it's NULL, we've finished
.3949a9	99 3a a0	sta $38a03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, copy it to the short name
.3949ac	e8		inx		                INX
.3949ad	c8		iny		                INY                     ; Move to the next character
.3949ae	c0 0b 00	cpy #$000b	                CPY #11                 ; Have we processed the three ext characters?
.3949b1	d0 f2		bne $3949a5	                BNE cpy_ext_loop        ; No: process this one
.3949b3					ret_success
.3949b3	e2 20		sep #$20	                SEP #$20        ; set A short
.3949b5	64 0e		stz $032e	                STZ DOS_STATUS
.3949b7	28		plp		                PLP
.3949b8	2b		pld		                PLD
.3949b9	ab		plb		                PLB
.3949ba	38		sec		                SEC
.3949bb	6b		rtl		                RTL
.3949bc					ret_failure
.3949bc	e2 20		sep #$20	                SEP #$20        ; set A short
.3949be	85 0e		sta $032e	                STA DOS_STATUS
.3949c0	28		plp		                PLP
.3949c1	2b		pld		                PLD
.3949c2	ab		plb		                PLB
.3949c3	18		clc		                CLC
.3949c4	6b		rtl		                RTL
.3949c5					DOS_FINDFILE
.3949c5	8b		phb		                PHB
.3949c6	0b		phd		                PHD
.3949c7	08		php		                PHP
.3949c8	48		pha		                PHA             ; begin setdbr macro
.3949c9	08		php		                PHP
.3949ca	e2 20		sep #$20	                SEP #$20        ; set A short
.3949cc	a9 00		lda #$00	                LDA #0
.3949ce	48		pha		                PHA
.3949cf	ab		plb		                PLB
.3949d0	28		plp		                PLP
.3949d1	68		pla		                PLA             ; end setdbr macro
.3949d2	48		pha		                PHA             ; begin setdp macro
.3949d3	08		php		                PHP
.3949d4	c2 20		rep #$20	                REP #$20        ; set A long
.3949d6	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3949d9	5b		tcd		                TCD
.3949da	28		plp		                PLP
.3949db	68		pla		                PLA             ; end setdp macro
.3949dc	c2 30		rep #$30	                REP #$30        ; set A&X long
.3949de	22 2d 49 39	jsl $39492d	                JSL DOS_PARSE_PATH              ; Break out the path into its components
.3949e2	b0 05		bcs $3949e9	                BCS mount                       ; If success: try to open the directory
.3949e4	28		plp		pass_failure    PLP                             ; If failure, just pass the failure back up
.3949e5	2b		pld		                PLD
.3949e6	ab		plb		                PLB
.3949e7	18		clc		                CLC
.3949e8	6b		rtl		                RTL
.3949e9	22 47 45 39	jsl $394547	mount           JSL DOS_MOUNT
.3949ed					get_directory
.3949ed	c2 20		rep #$20	                REP #$20        ; set A long
.3949ef	22 fc 41 39	jsl $3941fc	                JSL DOS_DIROPEN                 ; Get the directory
.3949f3	b0 07		bcs $3949fc	                BCS scan_entries                ; If success: start scanning the directory entries
.3949f5	e2 20		sep #$20	                SEP #$20        ; set A short
.3949f7	a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Otherwise: return a no directory error
.3949f9	82 47 00	brl $394a43	                BRL ret_failure
.3949fc	22 7b 42 39	jsl $39427b	scan_entries    JSL DOS_DIRFIRST                ; Move the DIR pointer to the beginning of the sector
.394a00					scan_loop
.394a00	e2 20		sep #$20	                SEP #$20        ; set A short
.394a02	a0 00 00	ldy #$0000	                LDY #0
.394a05	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y             ; Check the directory entry
.394a07	d0 05		bne $394a0e	                BNE chk_unused                  ; If there's an entry, check to see if it's unused
.394a09	a9 09		lda #$09	                LDA #DOS_ERR_NOTFOUND           ; If end-of-directory, we couldn't find a match
.394a0b	82 35 00	brl $394a43	                BRL ret_failure
.394a0e	c9 e5		cmp #$e5	chk_unused      CMP #DOS_DIR_ENT_UNUSED         ; If it's unused...
.394a10	f0 26		beq $394a38	                BEQ next_entry                  ; Go to the next entry
.394a12	a0 0b 00	ldy #$000b	                LDY #DIRENTRY.ATTRIBUTE         ; Check the entry's attributes
.394a15	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.394a17	89 08		bit #$08	                BIT #DOS_ATTR_VOLUME            ; Is it a volume name?
.394a19	d0 1d		bne $394a38	                BNE next_entry                  ; Yes: skip it!
.394a1b	29 0f		and #$0f	                AND #DOS_ATTR_LONGNAME
.394a1d	c9 0f		cmp #$0f	                CMP #DOS_ATTR_LONGNAME          ; Is it a long name field?
.394a1f	f0 17		beq $394a38	                BEQ next_entry                  ; Yes: skip it!
.394a21	a2 00 00	ldx #$0000	                LDX #0
.394a24	a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME
.394a27	b7 18		lda [$0338],y	scan_cmp_loop   LDA [DOS_DIR_PTR],Y             ; Get the X'th character of the entry
.394a29	df 3a a0 38	cmp $38a03a,x	                CMP DOS_SHORT_NAME,X            ; And compare to the X'th character of the name we want
.394a2d	d0 09		bne $394a38	                BNE next_entry                  ; If not equal: try the next entry
.394a2f	c8		iny		                INY                             ; Advance to the next character
.394a30	e8		inx		                INX
.394a31	e0 0b 00	cpx #$000b	                CPX #11                         ; Did we reach the end of the names?
.394a34	f0 16		beq $394a4c	                BEQ match                       ; Yes: we have a match!
.394a36	80 ef		bra $394a27	                BRA scan_cmp_loop               ; No: keep checking
.394a38	22 96 42 39	jsl $394296	next_entry      JSL DOS_DIRNEXT                 ; Try to get the next directory entry
.394a3c	90 05		bcc $394a43	                BCC ret_failure                 ; If we're at the end of the directory, return a failure.
.394a3e	82 bf ff	brl $394a00	                BRL scan_loop                   ; If found: keep scanning
.394a41	a9 08		lda #$08	bad_dir         LDA #DOS_ERR_NODIR              ; Otherwise: fail with a NODIR error (maybe something else is better)
.394a43					ret_failure
.394a43	e2 20		sep #$20	                SEP #$20        ; set A short
.394a45	85 0e		sta $032e	                STA DOS_STATUS
.394a47	28		plp		                PLP
.394a48	2b		pld		                PLD
.394a49	ab		plb		                PLB
.394a4a	18		clc		                CLC
.394a4b	6b		rtl		                RTL
.394a4c					match
.394a4c	c2 20		rep #$20	                REP #$20        ; set A long
.394a4e	a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L         ; Copy the cluster number from the directory entry
.394a51	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.394a53	85 10		sta $0330	                STA DOS_CLUS_ID                 ; To DOS_CLUS_ID
.394a55	a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.394a58	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.394a5a	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394a5c					ret_success
.394a5c	e2 20		sep #$20	                SEP #$20        ; set A short
.394a5e	64 0e		stz $032e	                STZ DOS_STATUS
.394a60	28		plp		                PLP
.394a61	2b		pld		                PLD
.394a62	ab		plb		                PLB
.394a63	38		sec		                SEC
.394a64	6b		rtl		                RTL
.394a65					DOS_READFILE
.394a65	8b		phb		                PHB
.394a66	0b		phd		                PHD
.394a67	08		php		                PHP
.394a68	48		pha		                PHA             ; begin setdbr macro
.394a69	08		php		                PHP
.394a6a	e2 20		sep #$20	                SEP #$20        ; set A short
.394a6c	a9 00		lda #$00	                LDA #0
.394a6e	48		pha		                PHA
.394a6f	ab		plb		                PLB
.394a70	28		plp		                PLP
.394a71	68		pla		                PLA             ; end setdbr macro
.394a72	48		pha		                PHA             ; begin setdp macro
.394a73	08		php		                PHP
.394a74	c2 20		rep #$20	                REP #$20        ; set A long
.394a76	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394a79	5b		tcd		                TCD
.394a7a	28		plp		                PLP
.394a7b	68		pla		                PLA             ; end setdp macro
.394a7c	c2 30		rep #$30	                REP #$30        ; set A&X long
.394a7e	a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.394a80	48		pha		                PHA
.394a81	a5 1c		lda $033c	                LDA DOS_BUFF_PTR
.394a83	48		pha		                PHA
.394a84	22 c5 49 39	jsl $3949c5	                JSL DOS_FINDFILE                    ; Attempt to find the file's directory entry
.394a88	68		pla		                PLA
.394a89	85 1c		sta $033c	                STA DOS_BUFF_PTR
.394a8b	68		pla		                PLA
.394a8c	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394a8e	90 0f		bcc $394a9f	                BCC pass_failure                    ; If found: try to load the cluster
.394a90	22 df 47 39	jsl $3947df	load_cluster    JSL DOS_GETCLUSTER                  ; Get the first block of the cluster
.394a94	90 09		bcc $394a9f	                BCC pass_failure                    ; If there's an error... pass it up the chain
.394a96					ret_success
.394a96	e2 20		sep #$20	                SEP #$20        ; set A short
.394a98	64 0e		stz $032e	                STZ DOS_STATUS
.394a9a	28		plp		                PLP
.394a9b	2b		pld		                PLD
.394a9c	ab		plb		                PLB
.394a9d	38		sec		                SEC
.394a9e	6b		rtl		                RTL
.394a9f	28		plp		pass_failure    PLP                                 ; Otherwise: pass any error up the chain
.394aa0	2b		pld		                PLD
.394aa1	ab		plb		                PLB
.394aa2	18		clc		                CLC
.394aa3	6b		rtl		                RTL
.394aa4					ENTRYFORCLUS12
.394aa4	8b		phb		                PHB
.394aa5	0b		phd		                PHD
.394aa6	08		php		                PHP
.394aa7	48		pha		                PHA             ; begin setdbr macro
.394aa8	08		php		                PHP
.394aa9	e2 20		sep #$20	                SEP #$20        ; set A short
.394aab	a9 00		lda #$00	                LDA #0
.394aad	48		pha		                PHA
.394aae	ab		plb		                PLB
.394aaf	28		plp		                PLP
.394ab0	68		pla		                PLA             ; end setdbr macro
.394ab1	48		pha		                PHA             ; begin setdp macro
.394ab2	08		php		                PHP
.394ab3	c2 20		rep #$20	                REP #$20        ; set A long
.394ab5	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394ab8	5b		tcd		                TCD
.394ab9	28		plp		                PLP
.394aba	68		pla		                PLA             ; end setdp macro
.394abb	c2 30		rep #$30	                REP #$30        ; set A&X long
.394abd	a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; DOS_TEMP := DOS_CLUS_ID * 3
.394abf	0a		asl a		                ASL A
.394ac0	85 28		sta $0348	                STA DOS_TEMP
.394ac2	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394ac4	2a		rol a		                ROL A
.394ac5	85 2a		sta $034a	                STA DOS_TEMP+2
.394ac7	18		clc		                CLC
.394ac8	a5 10		lda $0330	                LDA DOS_CLUS_ID
.394aca	65 28		adc $0348	                ADC DOS_TEMP
.394acc	85 28		sta $0348	                STA DOS_TEMP
.394ace	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394ad0	65 2a		adc $034a	                ADC DOS_TEMP+2
.394ad2	85 2a		sta $034a	                STA DOS_TEMP+2
.394ad4	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := (DOS_CLUS_ID * 3) / 2
.394ad6	66 28		ror $0348	                ROR DOS_TEMP                    ; DOS_TEMP is now the offset to the cluster's entry in the FAT
.394ad8	a5 28		lda $0348	                LDA DOS_TEMP                    ; X should be the offset within the FAT buffer
.394ada	29 ff 03	and #$03ff	                AND #$003FF
.394add	aa		tax		                TAX
.394ade	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394ae0	66 28		ror $0348	                ROR DOS_TEMP
.394ae2	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394ae4	66 28		ror $0348	                ROR DOS_TEMP
.394ae6	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394ae8	66 28		ror $0348	                ROR DOS_TEMP
.394aea	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394aec	66 28		ror $0348	                ROR DOS_TEMP
.394aee	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394af0	66 28		ror $0348	                ROR DOS_TEMP
.394af2	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394af4	66 28		ror $0348	                ROR DOS_TEMP
.394af6	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394af8	66 28		ror $0348	                ROR DOS_TEMP
.394afa	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394afc	66 28		ror $0348	                ROR DOS_TEMP
.394afe	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394b00	66 28		ror $0348	                ROR DOS_TEMP
.394b02	18		clc		                CLC                             ; DOS_FAT_LBA should be the LBA of the first FAT sector we need
.394b03	af 14 a0 38	lda $38a014	                LDA FAT_BEGIN_LBA
.394b07	65 28		adc $0348	                ADC DOS_TEMP
.394b09	85 24		sta $0344	                STA DOS_FAT_LBA
.394b0b	af 16 a0 38	lda $38a016	                LDA FAT_BEGIN_LBA+2
.394b0f	65 2a		adc $034a	                ADC DOS_TEMP+2
.394b11	85 26		sta $0346	                STA DOS_FAT_LBA+2
.394b13	28		plp		                PLP
.394b14	2b		pld		                PLD
.394b15	ab		plb		                PLB
.394b16	6b		rtl		                RTL
.394b17					FATFORCLUSTER12
.394b17	8b		phb		                PHB
.394b18	0b		phd		                PHD
.394b19	08		php		                PHP
.394b1a	48		pha		                PHA             ; begin setdbr macro
.394b1b	08		php		                PHP
.394b1c	e2 20		sep #$20	                SEP #$20        ; set A short
.394b1e	a9 00		lda #$00	                LDA #0
.394b20	48		pha		                PHA
.394b21	ab		plb		                PLB
.394b22	28		plp		                PLP
.394b23	68		pla		                PLA             ; end setdbr macro
.394b24	48		pha		                PHA             ; begin setdp macro
.394b25	08		php		                PHP
.394b26	c2 20		rep #$20	                REP #$20        ; set A long
.394b28	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394b2b	5b		tcd		                TCD
.394b2c	28		plp		                PLP
.394b2d	68		pla		                PLA             ; end setdp macro
.394b2e	c2 30		rep #$30	                REP #$30        ; set A&X long
.394b30	a2 00 00	ldx #$0000	                LDX #0
.394b33	a9 5a 5a	lda #$5a5a	                LDA #$5A5A
.394b36	8f 00 a5 38	sta $38a500	clr_loop        STA DOS_FAT_SECTORS
.394b3a	e8		inx		                INX
.394b3b	e8		inx		                INX
.394b3c	e0 00 04	cpx #$0400	                CPX #1024
.394b3f	d0 f5		bne $394b36	                BNE clr_loop
.394b41	22 a4 4a 39	jsl $394aa4	                JSL ENTRYFORCLUS12              ; Calculate the LBA
.394b45	a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Point to the desired sector in the FAT
.394b47	85 02		sta $0322	                STA BIOS_LBA
.394b49	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394b4b	85 04		sta $0324	                STA BIOS_LBA+2
.394b4d	a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first 512 bytes of the FAT buffer
.394b50	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394b52	a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394b55	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394b57	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.394b5b	90 17		bcc $394b74	                BCC error
.394b5d	e6 02		inc $0322	                INC BIOS_LBA                    ; Move to the next sector
.394b5f	a9 00 a7	lda #$a700	                LDA #<>DOS_FAT_SECTORS+512      ; And point to the second 512 bytes of teh FAT buffer
.394b62	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394b64	a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394b67	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394b69	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.394b6d	90 05		bcc $394b74	                BCC error
.394b6f	28		plp		                PLP
.394b70	2b		pld		                PLD
.394b71	ab		plb		                PLB
.394b72	38		sec		                SEC
.394b73	6b		rtl		                RTL
.394b74					error
.394b74	e2 20		sep #$20	                SEP #$20        ; set A short
.394b76	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394b78	85 0e		sta $032e	                STA DOS_STATUS
.394b7a	28		plp		                PLP
.394b7b	2b		pld		                PLD
.394b7c	ab		plb		                PLB
.394b7d	18		clc		                CLC
.394b7e	6b		rtl		                RTL
.394b7f					FATFORCLUSTER32
.394b7f	8b		phb		                PHB
.394b80	0b		phd		                PHD
.394b81	48		pha		                PHA             ; begin setdbr macro
.394b82	08		php		                PHP
.394b83	e2 20		sep #$20	                SEP #$20        ; set A short
.394b85	a9 00		lda #$00	                LDA #0
.394b87	48		pha		                PHA
.394b88	ab		plb		                PLB
.394b89	28		plp		                PLP
.394b8a	68		pla		                PLA             ; end setdbr macro
.394b8b	48		pha		                PHA             ; begin setdp macro
.394b8c	08		php		                PHP
.394b8d	c2 20		rep #$20	                REP #$20        ; set A long
.394b8f	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394b92	5b		tcd		                TCD
.394b93	28		plp		                PLP
.394b94	68		pla		                PLA             ; end setdp macro
.394b95	c2 30		rep #$30	                REP #$30        ; set A&X long
.394b97	a5 10		lda $0330	                LDA DOS_CLUS_ID
.394b99	85 24		sta $0344	                STA DOS_FAT_LBA
.394b9b	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394b9d	85 26		sta $0346	                STA DOS_FAT_LBA+2
.394b9f	a2 07 00	ldx #$0007	                LDX #7
.394ba2	46 26		lsr $0346	div_loop        LSR DOS_FAT_LBA+2
.394ba4	66 24		ror $0344	                ROR DOS_FAT_LBA
.394ba6	ca		dex		                DEX
.394ba7	d0 f9		bne $394ba2	                BNE div_loop
.394ba9	18		clc		                CLC
.394baa	a5 24		lda $0344	                LDA DOS_FAT_LBA
.394bac	6f 14 a0 38	adc $38a014	                ADC FAT_BEGIN_LBA
.394bb0	85 24		sta $0344	                STA DOS_FAT_LBA
.394bb2	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394bb4	6f 16 a0 38	adc $38a016	                ADC FAT_BEGIN_LBA+2
.394bb8	85 26		sta $0346	                STA DOS_FAT_LBA+2
.394bba	a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; We want to load the FAT sector
.394bbc	85 02		sta $0322	                STA BIOS_LBA
.394bbe	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394bc0	85 04		sta $0324	                STA BIOS_LBA+2
.394bc2	a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; We want to load the FAT sector in DOS_FAT_SECTORS
.394bc5	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394bc7	a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394bca	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394bcc	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Load the FAT entry
.394bd0	b0 06		bcs $394bd8	                BCS find_entry
.394bd2	e2 20		sep #$20	                SEP #$20        ; set A short
.394bd4	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394bd6	80 0e		bra $394be6	                BRA ret_failure
.394bd8					find_entry
.394bd8	c2 20		rep #$20	                REP #$20        ; set A long
.394bda	a5 10		lda $0330	                LDA DOS_CLUS_ID
.394bdc	0a		asl a		                ASL A
.394bdd	0a		asl a		                ASL A                           ; * 4
.394bde	29 ff 01	and #$01ff	                AND #$1FF                       ; DOS_CLUS_ID MOD 512
.394be1	aa		tax		                TAX                             ; X should be the offset within the sector
.394be2	2b		pld		ret_success     PLD
.394be3	ab		plb		                PLB
.394be4	38		sec		                SEC                             ; return success
.394be5	6b		rtl		                RTL
.394be6	2b		pld		ret_failure     PLD
.394be7	ab		plb		                PLB
.394be8	18		clc		                CLC                             ; Return failure
.394be9	6b		rtl		                RTL
.394bea					NEXTCLUSTER
.394bea	08		php		                PHP
.394beb	e2 20		sep #$20	                SEP #$20        ; set A short
.394bed	af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394bf1	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394bf3	d0 08		bne $394bfd	                BNE fat32                       ; No: assume it's FAT32
.394bf5	22 0b 4c 39	jsl $394c0b	fat12           JSL NEXTCLUSTER12               ; Lookup the next cluster from FAT12
.394bf9	90 0d		bcc $394c08	                BCC pass_failure                ; If there was an error, pass it up the chain
.394bfb	80 06		bra $394c03	                BRA ret_success
.394bfd	22 73 4c 39	jsl $394c73	fat32           JSL NEXTCLUSTER32               ; Lookup the next cluster from FAT32
.394c01	90 05		bcc $394c08	                BCC pass_failure                ; If there was an error, pass it up the chain
.394c03	64 0e		stz $032e	ret_success     STZ DOS_STATUS
.394c05	28		plp		                PLP
.394c06	38		sec		                SEC
.394c07	6b		rtl		                RTL
.394c08	28		plp		pass_failure    PLP
.394c09	18		clc		                CLC
.394c0a	6b		rtl		                RTL
.394c0b					NEXTCLUSTER12
.394c0b	8b		phb		                    PHB
.394c0c	0b		phd		                    PHD
.394c0d	08		php		                    PHP
.394c0e	48		pha		                PHA             ; begin setdbr macro
.394c0f	08		php		                PHP
.394c10	e2 20		sep #$20	                SEP #$20        ; set A short
.394c12	a9 00		lda #$00	                LDA #0
.394c14	48		pha		                PHA
.394c15	ab		plb		                PLB
.394c16	28		plp		                PLP
.394c17	68		pla		                PLA             ; end setdbr macro
.394c18	48		pha		                PHA             ; begin setdp macro
.394c19	08		php		                PHP
.394c1a	c2 20		rep #$20	                REP #$20        ; set A long
.394c1c	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394c1f	5b		tcd		                TCD
.394c20	28		plp		                PLP
.394c21	68		pla		                PLA             ; end setdp macro
.394c22	c2 30		rep #$30	                REP #$30        ; set A&X long
.394c24	22 17 4b 39	jsl $394b17	                    JSL FATFORCLUSTER12             ; Attempt to load the FAT entries
.394c28	b0 03		bcs $394c2d	                    BCS chk_clus_id
.394c2a	82 41 00	brl $394c6e	                    BRL pass_failure
.394c2d	a5 10		lda $0330	chk_clus_id         LDA DOS_CLUS_ID                 ; Check the cluster ID...
.394c2f	89 01 00	bit #$0001	                    BIT #1                          ; Is it odd?
.394c32	d0 0d		bne $394c41	                    BNE is_odd                      ; Yes: calculate the next cluster for odd
.394c34					is_even
.394c34	c2 20		rep #$20	                REP #$20        ; set A long
.394c36	bf 00 a5 38	lda $38a500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] & $0FFF
.394c3a	29 ff 0f	and #$0fff	                    AND #$0FFF
.394c3d	85 28		sta $0348	                    STA DOS_TEMP
.394c3f	80 0c		bra $394c4d	                    BRA check_id
.394c41					is_odd
.394c41	c2 20		rep #$20	                REP #$20        ; set A long
.394c43	bf 00 a5 38	lda $38a500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] >> 4
.394c47	4a		lsr a		                    LSR A
.394c48	4a		lsr a		                    LSR A
.394c49	4a		lsr a		                    LSR A
.394c4a	4a		lsr a		                    LSR A
.394c4b	85 28		sta $0348	                    STA DOS_TEMP
.394c4d					check_id
.394c4d	c2 20		rep #$20	                REP #$20        ; set A long
.394c4f	a5 28		lda $0348	                    LDA DOS_TEMP                    ; Check the new cluster ID we got
.394c51	29 f0 0f	and #$0ff0	                    AND #$0FF0                      ; Is it in the range $0FF0 -- $0FFF?
.394c54	c9 f0 0f	cmp #$0ff0	                    CMP #$0FF0
.394c57	f0 0f		beq $394c68	                    BEQ no_more                     ; Yes: return that we've reached the end of the chain
.394c59	a5 28		lda $0348	                    LDA DOS_TEMP                    ; Restore the "current" cluster ID
.394c5b	85 10		sta $0330	                    STA DOS_CLUS_ID
.394c5d	64 12		stz $0332	                    STZ DOS_CLUS_ID+2
.394c5f					ret_success
.394c5f	e2 20		sep #$20	                SEP #$20        ; set A short
.394c61	64 0e		stz $032e	                    STZ DOS_STATUS
.394c63	28		plp		                    PLP
.394c64	2b		pld		                    PLD
.394c65	ab		plb		                    PLB
.394c66	38		sec		                    SEC
.394c67	6b		rtl		                    RTL
.394c68					no_more
.394c68	e2 20		sep #$20	                SEP #$20        ; set A short
.394c6a	a9 0a		lda #$0a	                    LDA #DOS_ERR_NOCLUSTER
.394c6c	85 0e		sta $032e	                    STA DOS_STATUS
.394c6e	28		plp		pass_failure        PLP
.394c6f	2b		pld		                    PLD
.394c70	ab		plb		                    PLB
.394c71	18		clc		                    CLC
.394c72	6b		rtl		                    RTL
.394c73					NEXTCLUSTER32
.394c73	8b		phb		                PHB
.394c74	0b		phd		                PHD
.394c75	08		php		                PHP
.394c76	48		pha		                PHA             ; begin setdbr macro
.394c77	08		php		                PHP
.394c78	e2 20		sep #$20	                SEP #$20        ; set A short
.394c7a	a9 00		lda #$00	                LDA #0
.394c7c	48		pha		                PHA
.394c7d	ab		plb		                PLB
.394c7e	28		plp		                PLP
.394c7f	68		pla		                PLA             ; end setdbr macro
.394c80	48		pha		                PHA             ; begin setdp macro
.394c81	08		php		                PHP
.394c82	c2 20		rep #$20	                REP #$20        ; set A long
.394c84	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394c87	5b		tcd		                TCD
.394c88	28		plp		                PLP
.394c89	68		pla		                PLA             ; end setdp macro
.394c8a	c2 30		rep #$30	                REP #$30        ; set A&X long
.394c8c	22 7f 4b 39	jsl $394b7f	                JSL FATFORCLUSTER32             ; Get the FAT entry for this cluster
.394c90	90 53		bcc $394ce5	                BCC ret_failure                 ; If it did not work, return the error
.394c92	e2 20		sep #$20	                SEP #$20        ; set A short
.394c94	bf 00 a5 38	lda $38a500,x	                LDA @l DOS_FAT_SECTORS,X        ; Get the entry and copy it to DOS_TEMP
.394c98	85 28		sta $0348	                STA DOS_TEMP
.394c9a	bf 01 a5 38	lda $38a501,x	                LDA @l DOS_FAT_SECTORS+1,X
.394c9e	85 29		sta $0349	                STA DOS_TEMP+1
.394ca0	bf 02 a5 38	lda $38a502,x	                LDA @l DOS_FAT_SECTORS+2,X
.394ca4	85 2a		sta $034a	                STA DOS_TEMP+2
.394ca6	bf 03 a5 38	lda $38a503,x	                LDA @l DOS_FAT_SECTORS+3,X
.394caa	85 2b		sta $034b	                STA DOS_TEMP+3
.394cac	a5 28		lda $0348	xxxx            LDA DOS_TEMP                    ; Is DOS_TEMP = $FFFFFFFF?
.394cae	c9 ff		cmp #$ff	                CMP #$FF
.394cb0	d0 18		bne $394cca	                BNE found_next
.394cb2	a5 29		lda $0349	                LDA DOS_TEMP+1
.394cb4	c9 ff		cmp #$ff	                CMP #$FF
.394cb6	d0 12		bne $394cca	                BNE found_next
.394cb8	a5 2a		lda $034a	                LDA DOS_TEMP+2
.394cba	c9 ff		cmp #$ff	                CMP #$FF
.394cbc	d0 0c		bne $394cca	                BNE found_next
.394cbe	a5 2b		lda $034b	                LDA DOS_TEMP+3
.394cc0	c9 0f		cmp #$0f	                CMP #$0F
.394cc2	d0 06		bne $394cca	                BNE found_next                  ; No: return this cluster as the next
.394cc4	e2 20		sep #$20	                SEP #$20        ; set A short
.394cc6	a9 0a		lda #$0a	                LDA #DOS_ERR_NOCLUSTER          ; Yes: return that there are no more clusters
.394cc8	80 1b		bra $394ce5	                BRA ret_failure
.394cca					found_next
.394cca	e2 20		sep #$20	                SEP #$20        ; set A short
.394ccc	a5 28		lda $0348	                LDA DOS_TEMP                    ; No: return DOS_TEMP as the new DOS_CLUS_ID
.394cce	85 10		sta $0330	                STA DOS_CLUS_ID
.394cd0	a5 29		lda $0349	                LDA DOS_TEMP+1
.394cd2	85 11		sta $0331	                STA DOS_CLUS_ID+1
.394cd4	a5 2a		lda $034a	                LDA DOS_TEMP+2
.394cd6	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394cd8	a5 2b		lda $034b	                LDA DOS_TEMP+3
.394cda	85 13		sta $0333	                STA DOS_CLUS_ID+3
.394cdc					ret_success
.394cdc	e2 20		sep #$20	                SEP #$20        ; set A short
.394cde	64 0e		stz $032e	                STZ DOS_STATUS                  ; Record success
.394ce0	28		plp		                PLP
.394ce1	2b		pld		                PLD
.394ce2	ab		plb		                PLB
.394ce3	38		sec		                SEC
.394ce4	6b		rtl		                RTL
.394ce5					ret_failure
.394ce5	e2 20		sep #$20	                SEP #$20        ; set A short
.394ce7	85 0e		sta $032e	                STA DOS_STATUS                  ; Record the error condition
.394ce9	28		plp		                PLP
.394cea	2b		pld		                PLD
.394ceb	ab		plb		                PLB
.394cec	18		clc		                CLC
.394ced	6b		rtl		                RTL
.394cee					DOS_READNEXT
.394cee	08		php		                PHP
.394cef	c2 30		rep #$30	                REP #$30        ; set A&X long
.394cf1	22 ea 4b 39	jsl $394bea	                JSL NEXTCLUSTER                 ; Attempt to find the next cluster in the FAT
.394cf5	90 09		bcc $394d00	                BCC pass_failure                ; If nothing found: pass the failure up the chain
.394cf7	22 df 47 39	jsl $3947df	                JSL DOS_GETCLUSTER              ; Otherwise: attempt to read the cluster
.394cfb	90 03		bcc $394d00	                BCC pass_failure                ; If nothing read: pass the failure up the chain
.394cfd	28		plp		ret_success     PLP
.394cfe	38		sec		                SEC
.394cff	6b		rtl		                RTL
.394d00	28		plp		pass_failure    PLP
.394d01	18		clc		                CLC
.394d02	6b		rtl		                RTL
.394d03					DOS_FREECLUS
.394d03	08		php		                PHP
.394d04	48		pha		                PHA             ; begin setdp macro
.394d05	08		php		                PHP
.394d06	c2 20		rep #$20	                REP #$20        ; set A long
.394d08	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394d0b	5b		tcd		                TCD
.394d0c	28		plp		                PLP
.394d0d	68		pla		                PLA             ; end setdp macro
.394d0e	e2 20		sep #$20	                SEP #$20        ; set A short
.394d10	af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394d14	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394d16	d0 08		bne $394d20	                BNE fat32                       ; No: assume it's FAT32
.394d18	22 94 4d 39	jsl $394d94	fat12           JSL DOS_FREECLUS12              ; Find the next free cluster from FAT12
.394d1c	90 0d		bcc $394d2b	                BCC pass_failure                ; If there was an error, pass it up the chain
.394d1e	80 06		bra $394d26	                BRA ret_success
.394d20	22 6c 4e 39	jsl $394e6c	fat32           JSL DOS_FREECLUS32              ; Find the next free cluster from FAT32
.394d24	90 05		bcc $394d2b	                BCC pass_failure                ; If there was an error, pass it up the chain
.394d26	64 0e		stz $032e	ret_success     STZ DOS_STATUS
.394d28	28		plp		                PLP
.394d29	38		sec		                SEC
.394d2a	6b		rtl		                RTL
.394d2b	28		plp		pass_failure    PLP
.394d2c	18		clc		                CLC
.394d2d	6b		rtl		                RTL
.394d2e					FDC_READ2FAT12
.394d2e	8b		phb		                    PHB
.394d2f	0b		phd		                    PHD
.394d30	08		php		                    PHP
.394d31	48		pha		                PHA             ; begin setdbr macro
.394d32	08		php		                PHP
.394d33	e2 20		sep #$20	                SEP #$20        ; set A short
.394d35	a9 00		lda #$00	                LDA #0
.394d37	48		pha		                PHA
.394d38	ab		plb		                PLB
.394d39	28		plp		                PLP
.394d3a	68		pla		                PLA             ; end setdbr macro
.394d3b	48		pha		                PHA             ; begin setdp macro
.394d3c	08		php		                PHP
.394d3d	c2 20		rep #$20	                REP #$20        ; set A long
.394d3f	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394d42	5b		tcd		                TCD
.394d43	28		plp		                PLP
.394d44	68		pla		                PLA             ; end setdp macro
.394d45	c2 30		rep #$30	                REP #$30        ; set A&X long
.394d47	a9 00 a5	lda #$a500	                    LDA #<>DOS_FAT_SECTORS          ; Set the location to store the sector
.394d4a	85 06		sta $0326	                    STA BIOS_BUFF_PTR
.394d4c	a9 38 00	lda #$0038	                    LDA #`DOS_FAT_SECTORS
.394d4f	85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.394d51	a5 24		lda $0344	                    LDA DOS_FAT_LBA
.394d53	85 02		sta $0322	                    STA BIOS_LBA
.394d55	a5 26		lda $0346	                    LDA DOS_FAT_LBA+2
.394d57	85 04		sta $0324	                    STA BIOS_LBA+2
.394d59	22 44 10 38	jsl $381044	                    JSL GETBLOCK                    ; Read the first sector
.394d5d	b0 07		bcs $394d66	                    BCS inc_sect2                   ; If success: start getting the second sector
.394d5f	e2 20		sep #$20	                SEP #$20        ; set A short
.394d61	a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.394d63	82 1c 00	brl $394d82	                    BRL ret_failure
.394d66					inc_sect2
.394d66	c2 20		rep #$20	                REP #$20        ; set A long
.394d68	e6 02		inc $0322	                    INC BIOS_LBA                    ; Move to the next sector
.394d6a	d0 02		bne $394d6e	                    BNE inc_buff_ptr
.394d6c	e6 04		inc $0324	                    INC BIOS_LBA+2
.394d6e	a9 00 a7	lda #$a700	inc_buff_ptr        LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394d71	85 06		sta $0326	                    STA BIOS_BUFF_PTR
.394d73	a9 38 00	lda #$0038	                    LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394d76	85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.394d78	22 44 10 38	jsl $381044	                    JSL GETBLOCK                    ; Read the second sector
.394d7c	b0 0d		bcs $394d8b	                    BCS ret_success                 ; If success, return success
.394d7e	e2 20		sep #$20	                SEP #$20        ; set A short
.394d80	a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.394d82					ret_failure
.394d82	e2 20		sep #$20	                SEP #$20        ; set A short
.394d84	85 00		sta $0320	                    STA BIOS_STATUS
.394d86	28		plp		                    PLP
.394d87	2b		pld		                    PLD
.394d88	ab		plb		                    PLB
.394d89	18		clc		                    CLC
.394d8a	6b		rtl		                    RTL
.394d8b					ret_success
.394d8b	e2 20		sep #$20	                SEP #$20        ; set A short
.394d8d	64 00		stz $0320	                    STZ BIOS_STATUS
.394d8f	28		plp		                    PLP
.394d90	2b		pld		                    PLD
.394d91	ab		plb		                    PLB
.394d92	38		sec		                    SEC
.394d93	6b		rtl		                    RTL
.394d94					DOS_FREECLUS12
.394d94	da		phx		                PHX
.394d95	8b		phb		                PHB
.394d96	0b		phd		                PHD
.394d97	08		php		                PHP
.394d98	48		pha		                PHA             ; begin setdbr macro
.394d99	08		php		                PHP
.394d9a	e2 20		sep #$20	                SEP #$20        ; set A short
.394d9c	a9 00		lda #$00	                LDA #0
.394d9e	48		pha		                PHA
.394d9f	ab		plb		                PLB
.394da0	28		plp		                PLP
.394da1	68		pla		                PLA             ; end setdbr macro
.394da2	48		pha		                PHA             ; begin setdp macro
.394da3	08		php		                PHP
.394da4	c2 20		rep #$20	                REP #$20        ; set A long
.394da6	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394da9	5b		tcd		                TCD
.394daa	28		plp		                PLP
.394dab	68		pla		                PLA             ; end setdp macro
.394dac	c2 30		rep #$30	                REP #$30        ; set A&X long
.394dae	a9 02 00	lda #$0002	                LDA #2                          ; Cluster ID is 2 to start with
.394db1	85 10		sta $0330	                STA DOS_CLUS_ID
.394db3	a9 00 00	lda #$0000	                LDA #0
.394db6	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394db8	22 a4 4a 39	jsl $394aa4	                JSL ENTRYFORCLUS12              ; Calculate the LBA and buffer offset for the cluster
.394dbc	22 2e 4d 39	jsl $394d2e	                JSL FDC_READ2FAT12              ; Read the first two sectors of the FAT
.394dc0	b0 07		bcs $394dc9	                BCS start_of_fat                ; If success, move X to the start of the FAT
.394dc2	e2 20		sep #$20	                SEP #$20        ; set A short
.394dc4	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394dc6	82 99 00	brl $394e62	                BRL ret_failure
.394dc9					start_of_fat
.394dc9	c2 30		rep #$30	                REP #$30        ; set A&X long
.394dcb	a5 10		lda $0330	chk_cluster     LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.394dcd	89 01 00	bit #$0001	                BIT #1
.394dd0	d0 09		bne $394ddb	                BNE is_odd
.394dd2	bf 00 a5 38	lda $38a500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an even numbered cluster
.394dd6	29 ff 0f	and #$0fff	                AND #$0FFF
.394dd9	80 08		bra $394de3	                BRA chk_available
.394ddb	bf 00 a5 38	lda $38a500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an odd numbered cluster
.394ddf	4a		lsr a		                LSR A
.394de0	4a		lsr a		                LSR A
.394de1	4a		lsr a		                LSR A
.394de2	4a		lsr a		                LSR A
.394de3					chk_available
.394de3	85 28		sta $0348	                STA DOS_TEMP
.394de5	c9 00 00	cmp #$0000	                CMP #0                          ; Is it available?
.394de8	f0 03		beq $394ded	                BEQ chk_found
.394dea	82 39 00	brl $394e26	                BRL next_cluster                ; No: advance to the next cluster
.394ded	8a		txa		chk_found       TXA
.394dee	85 2a		sta $034a	                STA DOS_TEMP+2
.394df0	a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.394df2	89 01 00	bit #$0001	                BIT #1
.394df5	d0 0d		bne $394e04	                BNE is_odd2
.394df7					is_even2
.394df7	bf 00 a5 38	lda $38a500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, even offset case
.394dfb	09 ff 0f	ora #$0fff	                ORA #$0FFF
.394dfe	9f 00 a5 38	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.394e02	80 0b		bra $394e0f	                BRA write_fat
.394e04					is_odd2
.394e04	bf 00 a5 38	lda $38a500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, odd offset case
.394e08	09 f0 ff	ora #$fff0	                ORA #$FFF0
.394e0b	9f 00 a5 38	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.394e0f	22 36 4f 39	jsl $394f36	write_fat       JSL WRITEFAT12                  ; Write the two FAT sectors back to disk
.394e13	b0 07		bcs $394e1c	                BCS ret_success                 ; If success: return success
.394e15	e2 20		sep #$20	                SEP #$20        ; set A short
.394e17	a9 14		lda #$14	                LDA #DOS_ERR_FATUPDATE          ; Flag an error trying to write the FAT back
.394e19	82 46 00	brl $394e62	                BRL ret_failure
.394e1c					ret_success
.394e1c	e2 20		sep #$20	                SEP #$20        ; set A short
.394e1e	64 0e		stz $032e	                STZ DOS_STATUS
.394e20	28		plp		                PLP
.394e21	2b		pld		                PLD
.394e22	ab		plb		                PLB
.394e23	fa		plx		                PLX
.394e24	38		sec		                SEC
.394e25	6b		rtl		                RTL
.394e26					next_cluster
.394e26	e6 10		inc $0330	                INC DOS_CLUS_ID                 ; And advance the cluster ID
.394e28	d0 02		bne $394e2c	                BNE calc_entry
.394e2a	e6 12		inc $0332	                INC DOS_CLUS_ID+2
.394e2c	22 a4 4a 39	jsl $394aa4	calc_entry      JSL ENTRYFORCLUS12              ; Calculate the LBA and offset into the buffer for the cluster
.394e30	e0 00 00	cpx #$0000	                CPX #0                          ; Did we wrap around?
.394e33	f0 03		beq $394e38	                BEQ chk_end_of_fat
.394e35	82 93 ff	brl $394dcb	                BRL chk_cluster                 ; No: go back and check it too
.394e38					chk_end_of_fat
.394e38	a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Are we at the end of the FAT?
.394e3a	cf 18 a0 38	cmp $38a018	                CMP FAT2_BEGIN_LBA              ; NOTE: we use the start sector of the second FAT as our sentinel
.394e3e	d0 0f		bne $394e4f	                BNE next_2
.394e40	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394e42	cf 1a a0 38	cmp $38a01a	                CMP FAT2_BEGIN_LBA+2
.394e46	d0 07		bne $394e4f	                BNE next_2                      ; No: get the next to sectors
.394e48	e2 20		sep #$20	                SEP #$20        ; set A short
.394e4a	a9 12		lda #$12	                LDA #DOS_ERR_MEDIAFULL          ; Yes: return media full
.394e4c	82 13 00	brl $394e62	                BRL ret_failure
.394e4f					next_2
.394e4f	22 2e 4d 39	jsl $394d2e	                JSL FDC_READ2FAT12              ; Read the next two sectors of the FAT
.394e53	90 06		bcc $394e5b	                BCC fat_fail                    ; If failed: return error
.394e55	a2 00 00	ldx #$0000	                LDX #0                          ; If success: Start scanning at the beginning of the sectors
.394e58	82 70 ff	brl $394dcb	                BRL chk_cluster                 ; And start checking from there
.394e5b					fat_fail
.394e5b	e2 20		sep #$20	                SEP #$20        ; set A short
.394e5d	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394e5f	82 00 00	brl $394e62	                BRL ret_failure
.394e62					ret_failure
.394e62	e2 20		sep #$20	                SEP #$20        ; set A short
.394e64	85 0e		sta $032e	                STA DOS_STATUS
.394e66	28		plp		                PLP
.394e67	2b		pld		                PLD
.394e68	ab		plb		                PLB
.394e69	fa		plx		                PLX
.394e6a	18		clc		                CLC
.394e6b	6b		rtl		                RTL
.394e6c					DOS_FREECLUS32
.394e6c	8b		phb		                PHB
.394e6d	0b		phd		                PHD
.394e6e	08		php		                PHP
.394e6f	48		pha		                PHA             ; begin setdbr macro
.394e70	08		php		                PHP
.394e71	e2 20		sep #$20	                SEP #$20        ; set A short
.394e73	a9 00		lda #$00	                LDA #0
.394e75	48		pha		                PHA
.394e76	ab		plb		                PLB
.394e77	28		plp		                PLP
.394e78	68		pla		                PLA             ; end setdbr macro
.394e79	48		pha		                PHA             ; begin setdp macro
.394e7a	08		php		                PHP
.394e7b	c2 20		rep #$20	                REP #$20        ; set A long
.394e7d	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394e80	5b		tcd		                TCD
.394e81	28		plp		                PLP
.394e82	68		pla		                PLA             ; end setdp macro
.394e83	c2 30		rep #$30	                REP #$30        ; set A&X long
.394e85	a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR               ; Set the location to store the sector
.394e88	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394e8a	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.394e8d	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394e8f	af 14 a0 38	lda $38a014	                LDA FAT_BEGIN_LBA               ; Set the LBA to that of the first FAT sector
.394e93	85 02		sta $0322	                STA BIOS_LBA
.394e95	af 16 a0 38	lda $38a016	                LDA FAT_BEGIN_LBA+2
.394e99	85 04		sta $0324	                STA BIOS_LBA+2
.394e9b	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Load the sector into memory
.394e9f	b0 07		bcs $394ea8	                BCS initial_entry               ; If OK: set the initial entry to check
.394ea1	e2 20		sep #$20	                SEP #$20        ; set A short
.394ea3	a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Return a NOFAT error
.394ea5	82 6b 00	brl $394f13	                BRL ret_failure
.394ea8					initial_entry
.394ea8	c2 20		rep #$20	                REP #$20        ; set A long
.394eaa	a9 02 00	lda #$0002	                LDA #2                          ; Set DOS_CLUS_ID to 2
.394ead	85 10		sta $0330	                STA DOS_CLUS_ID
.394eaf	a9 00 00	lda #$0000	                LDA #0
.394eb2	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394eb4	a2 08 00	ldx #$0008	                LDX #8                          ; Set the offset to DOS_CLUS_ID * 4
.394eb7	bf 00 a3 38	lda $38a300,x	chk_entry       LDA DOS_SECTOR,X                ; Is the cluster entry == $00000000?
.394ebb	d0 06		bne $394ec3	                BNE next_entry                  ; No: move to the next entry
.394ebd	bf 02 a3 38	lda $38a302,x	                LDA DOS_SECTOR+2,X
.394ec1	f0 36		beq $394ef9	                BEQ found_free                  ; Yes: go to allocate and return it
.394ec3	e6 10		inc $0330	next_entry      INC DOS_CLUS_ID                 ; Move to the next cluster
.394ec5	d0 02		bne $394ec9	                BNE inc_ptr
.394ec7	e6 12		inc $0332	                INC DOS_CLUS_ID+2
.394ec9	e8		inx		inc_ptr         INX                             ; Update the index to the entry
.394eca	e8		inx		                INX
.394ecb	e8		inx		                INX
.394ecc	e8		inx		                INX
.394ecd	e0 00 02	cpx #$0200	                CPX #DOS_SECTOR_SIZE            ; Are we outside the sector?
.394ed0	90 e5		bcc $394eb7	                BLT chk_entry                   ; No: check this entry
.394ed2	e6 02		inc $0322	                INC BIOS_LBA                    ; Point to the next sector in the FAT
.394ed4	d0 18		bne $394eee	                BNE get_block
.394ed6	e6 04		inc $0324	                INC BIOS_LBA+2
.394ed8	a5 04		lda $0324	                LDA BIOS_LBA+2
.394eda	cf 1a a0 38	cmp $38a01a	                CMP FAT2_BEGIN_LBA+2
.394ede	90 0e		bcc $394eee	                BLT get_block
.394ee0	a5 02		lda $0322	                LDA BIOS_LBA
.394ee2	cf 18 a0 38	cmp $38a018	                CMP FAT2_BEGIN_LBA
.394ee6	90 06		bcc $394eee	                BLT get_block
.394ee8	e2 20		sep #$20	                SEP #$20        ; set A short
.394eea	a9 12		lda #$12	                LDA #DOS_ERR_MEDIAFULL          ; No: throw a media full error
.394eec	80 25		bra $394f13	                BRA ret_failure
.394eee	22 44 10 38	jsl $381044	get_block       JSL GETBLOCK                    ; Attempt to read the block
.394ef2	90 1b		bcc $394f0f	                BCC ret_fat_error               ; If error: throw a FAT error
.394ef4	a2 00 00	ldx #$0000	set_ptr         LDX #0                          ; Set index pointer to the first entry
.394ef7	80 be		bra $394eb7	                BRA chk_entry                   ; Check this entry
.394ef9					found_free
.394ef9	c2 20		rep #$20	                REP #$20        ; set A long
.394efb	a9 ff ff	lda #$ffff	                LDA #<>FAT_LAST_CLUSTER         ; Set the entry to $0FFFFFFF to make it the last entry in its chain
.394efe	9f 00 a3 38	sta $38a300,x	                STA DOS_SECTOR,X
.394f02	a9 ff 0f	lda #$0fff	                LDA #(FAT_LAST_CLUSTER >> 16)
.394f05	9f 02 a3 38	sta $38a302,x	                STA DOS_SECTOR+2,X
.394f09	22 24 10 38	jsl $381024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.394f0d	b0 0d		bcs $394f1c	                BCS ret_success                 ; If OK: return success
.394f0f					ret_fat_error
.394f0f	e2 20		sep #$20	                SEP #$20        ; set A short
.394f11	a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Otherwise: return NOFAT error
.394f13					ret_failure
.394f13	e2 20		sep #$20	                SEP #$20        ; set A short
.394f15	85 0e		sta $032e	                STA DOS_STATUS
.394f17	28		plp		                PLP
.394f18	2b		pld		                PLD
.394f19	ab		plb		                PLB
.394f1a	18		clc		                CLC
.394f1b	6b		rtl		                RTL
.394f1c					ret_success
.394f1c	e2 20		sep #$20	                SEP #$20        ; set A short
.394f1e	64 0e		stz $032e	                STZ DOS_STATUS
.394f20	28		plp		                PLP
.394f21	2b		pld		                PLD
.394f22	ab		plb		                PLB
.394f23	38		sec		                SEC
.394f24	6b		rtl		                RTL
.394f25					DELCLUSTER
.394f25	e2 20		sep #$20	                SEP #$20        ; set A short
.394f27	af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394f2b	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394f2d	d0 04		bne $394f33	                BNE fat32                       ; No: assume it's FAT32
.394f2f	5c 7d 4f 39	jmp $394f7d	fat12           JML DELCLUSTER12
.394f33	4c cb 4f	jmp $394fcb	fat32           JMP DELCLUSTER32
.394f36					WRITEFAT12
.394f36	8b		phb		                PHB
.394f37	0b		phd		                PHD
.394f38	48		pha		                PHA             ; begin setdbr macro
.394f39	08		php		                PHP
.394f3a	e2 20		sep #$20	                SEP #$20        ; set A short
.394f3c	a9 00		lda #$00	                LDA #0
.394f3e	48		pha		                PHA
.394f3f	ab		plb		                PLB
.394f40	28		plp		                PLP
.394f41	68		pla		                PLA             ; end setdbr macro
.394f42	48		pha		                PHA             ; begin setdp macro
.394f43	08		php		                PHP
.394f44	c2 20		rep #$20	                REP #$20        ; set A long
.394f46	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394f49	5b		tcd		                TCD
.394f4a	28		plp		                PLP
.394f4b	68		pla		                PLA             ; end setdp macro
.394f4c	c2 30		rep #$30	                REP #$30        ; set A&X long
.394f4e	a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first FAT sector in memory
.394f51	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394f53	a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394f56	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394f58	a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Set the LBA to that of the first sector's
.394f5a	85 02		sta $0322	                STA BIOS_LBA
.394f5c	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394f5e	85 04		sta $0324	                STA BIOS_LBA+2
.394f60	22 24 10 38	jsl $381024	                JSL PUTBLOCK                    ; Write the first sector back to the block device
.394f64	90 14		bcc $394f7a	                BCC done
.394f66	a9 00 a7	lda #$a700	                LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394f69	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394f6b	a9 38 00	lda #$0038	                LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394f6e	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394f70	e6 02		inc $0322	                INC BIOS_LBA                    ; Point to the next sector in the FAT
.394f72	d0 02		bne $394f76	                BNE put_second
.394f74	e6 04		inc $0324	                INC BIOS_LBA+2
.394f76	22 24 10 38	jsl $381024	put_second      JSL PUTBLOCK                    ; Write the second sector back to the block device
.394f7a	2b		pld		done            PLD
.394f7b	ab		plb		                PLB
.394f7c	6b		rtl		                RTL
.394f7d					DELCLUSTER12
.394f7d	8b		phb		                PHB
.394f7e	0b		phd		                PHD
.394f7f	08		php		                PHP
.394f80	48		pha		                PHA             ; begin setdbr macro
.394f81	08		php		                PHP
.394f82	e2 20		sep #$20	                SEP #$20        ; set A short
.394f84	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394f86	48		pha		                PHA
.394f87	ab		plb		                PLB
.394f88	28		plp		                PLP
.394f89	68		pla		                PLA             ; end setdbr macro
.394f8a	48		pha		                PHA             ; begin setdp macro
.394f8b	08		php		                PHP
.394f8c	c2 20		rep #$20	                REP #$20        ; set A long
.394f8e	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394f91	5b		tcd		                TCD
.394f92	28		plp		                PLP
.394f93	68		pla		                PLA             ; end setdp macro
.394f94	c2 30		rep #$30	                REP #$30        ; set A&X long
.394f96	22 17 4b 39	jsl $394b17	                JSL FATFORCLUSTER12
.394f9a	8a		txa		                TXA                             ; Check to see if the index is odd or even
.394f9b	89 01 00	bit #$0001	                BIT #1
.394f9e	d0 08		bne $394fa8	                BNE is_odd
.394fa0	bd 00 a5	lda $38a500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.394fa3	29 00 f0	and #$f000	                AND #$F000                      ; Mask out the lower 12 bits
.394fa6	80 06		bra $394fae	                BRA save_update
.394fa8	bd 00 a5	lda $38a500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.394fab	29 0f 00	and #$000f	                AND #$000F                      ; Mask out the upper 12 bits
.394fae	9d 00 a5	sta $38a500,x	save_update     STA DOS_FAT_SECTORS,X           ; And write it back
.394fb1	22 36 4f 39	jsl $394f36	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.394fb5	b0 0b		bcs $394fc2	                BCS ret_success
.394fb7					ret_failure
.394fb7	e2 20		sep #$20	                SEP #$20        ; set A short
.394fb9	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394fbb	85 0e		sta $032e	                STA DOS_STATUS
.394fbd	28		plp		                PLP
.394fbe	2b		pld		                PLD
.394fbf	ab		plb		                PLB
.394fc0	18		clc		                CLC
.394fc1	6b		rtl		                RTL
.394fc2					ret_success
.394fc2	e2 20		sep #$20	                SEP #$20        ; set A short
.394fc4	64 0e		stz $032e	                STZ DOS_STATUS
.394fc6	28		plp		                PLP
.394fc7	2b		pld		                PLD
.394fc8	ab		plb		                PLB
.394fc9	38		sec		                SEC
.394fca	6b		rtl		                RTL
.394fcb					DELCLUSTER32
.394fcb	8b		phb		                PHB
.394fcc	0b		phd		                PHD
.394fcd	08		php		                PHP
.394fce	c2 30		rep #$30	                REP #$30        ; set A&X long
.394fd0	48		pha		                PHA             ; begin setdbr macro
.394fd1	08		php		                PHP
.394fd2	e2 20		sep #$20	                SEP #$20        ; set A short
.394fd4	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394fd6	48		pha		                PHA
.394fd7	ab		plb		                PLB
.394fd8	28		plp		                PLP
.394fd9	68		pla		                PLA             ; end setdbr macro
.394fda	48		pha		                PHA             ; begin setdp macro
.394fdb	08		php		                PHP
.394fdc	c2 20		rep #$20	                REP #$20        ; set A long
.394fde	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394fe1	5b		tcd		                TCD
.394fe2	28		plp		                PLP
.394fe3	68		pla		                PLA             ; end setdp macro
.394fe4	22 7f 4b 39	jsl $394b7f	                JSL FATFORCLUSTER32
.394fe8	a9 00 00	lda #$0000	                LDA #0
.394feb	9d 00 a5	sta $38a500,x	                STA DOS_FAT_SECTORS,X           ; Set the cluster entry to 0
.394fee	9d 02 a5	sta $38a502,x	                STA DOS_FAT_SECTORS+2,X
.394ff1	22 24 10 38	jsl $381024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.394ff5	b0 0b		bcs $395002	                BCS ret_success
.394ff7					ret_failure
.394ff7	e2 20		sep #$20	                SEP #$20        ; set A short
.394ff9	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394ffb	85 0e		sta $032e	                STA DOS_STATUS
.394ffd	28		plp		                PLP
.394ffe	2b		pld		                PLD
.394fff	ab		plb		                PLB
.395000	18		clc		                CLC
.395001	6b		rtl		                RTL
.395002					ret_success
.395002	e2 20		sep #$20	                SEP #$20        ; set A short
.395004	64 0e		stz $032e	                STZ DOS_STATUS
.395006	28		plp		                PLP
.395007	2b		pld		                PLD
.395008	ab		plb		                PLB
.395009	38		sec		                SEC
.39500a	6b		rtl		                RTL
.39500b					DOS_APPENDCLUS
.39500b	8b		phb		                PHB
.39500c	0b		phd		                PHD
.39500d	08		php		                PHP
.39500e	48		pha		                PHA             ; begin setdbr macro
.39500f	08		php		                PHP
.395010	e2 20		sep #$20	                SEP #$20        ; set A short
.395012	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395014	48		pha		                PHA
.395015	ab		plb		                PLB
.395016	28		plp		                PLP
.395017	68		pla		                PLA             ; end setdbr macro
.395018	48		pha		                PHA             ; begin setdp macro
.395019	08		php		                PHP
.39501a	c2 20		rep #$20	                REP #$20        ; set A long
.39501c	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39501f	5b		tcd		                TCD
.395020	28		plp		                PLP
.395021	68		pla		                PLA             ; end setdp macro
.395022	c2 30		rep #$30	                REP #$30        ; set A&X long
.395024	a5 12		lda $0332	                LDA DOS_CLUS_ID+2               ; Save the cluster number for later
.395026	48		pha		                PHA
.395027	a5 10		lda $0330	                LDA DOS_CLUS_ID
.395029	48		pha		                PHA
.39502a	22 03 4d 39	jsl $394d03	                JSL DOS_FREECLUS                ; Find a free cluster on the block device
.39502e	b0 09		bcs $395039	                BCS save_cluster                ; If we got a cluster, write the data to it
.395030	68		pla		fail_cleanup    PLA                             ; Restore the cluster of the file
.395031	85 10		sta $0330	                STA DOS_CLUS_ID
.395033	68		pla		                PLA
.395034	85 12		sta $0332	                STA DOS_CLUS_ID+2
.395036	82 7d 00	brl $3950b6	                BRL pass_failure                ; Pass the failure back up the chain
.395039	a5 10		lda $0330	save_cluster    LDA DOS_CLUS_ID
.39503b	8d 36 a0	sta $38a036	                STA DOS_NEW_CLUSTER
.39503e	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.395040	8d 38 a0	sta $38a038	                STA DOS_NEW_CLUSTER+2
.395043	22 1c 48 39	jsl $39481c	                JSL DOS_PUTCLUSTER              ; Write the data to the free cluster
.395047	90 e7		bcc $395030	                BCC fail_cleanup                ; If failure: clean up stack and pass the failure up
.395049	68		pla		                PLA                             ; Restore the cluster of the file
.39504a	85 10		sta $0330	                STA DOS_CLUS_ID
.39504c	68		pla		                PLA
.39504d	85 12		sta $0332	                STA DOS_CLUS_ID+2
.39504f	22 ea 4b 39	jsl $394bea	walk_loop       JSL NEXTCLUSTER                 ; Try to get the next cluster in the chain
.395053	b0 fa		bcs $39504f	                BCS walk_loop                   ; If found a cluster, keep walking the chain
.395055	e2 20		sep #$20	                SEP #$20        ; set A short
.395057	af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.39505b	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.39505d	d0 3d		bne $39509c	                BNE fat32                       ; No: assume it's FAT32
.39505f					fat12
.39505f	c2 20		rep #$20	                REP #$20        ; set A long
.395061	22 a4 4a 39	jsl $394aa4	                JSL ENTRYFORCLUS12              ; Make sure we have the right offset for the cluster
.395065	a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if the last cluster ID is even or odd
.395067	89 01 00	bit #$0001	                BIT #1
.39506a	d0 11		bne $39507d	                BNE is_odd
.39506c	ad 36 a0	lda $38a036	is_even         LDA DOS_NEW_CLUSTER             ; Handle the even case (change the lower 12 bits)
.39506f	29 ff 0f	and #$0fff	                AND #$0FFF
.395072	8d 36 a0	sta $38a036	                STA DOS_NEW_CLUSTER
.395075	bd 00 a5	lda $38a500,x	                LDA DOS_FAT_SECTORS,X
.395078	29 00 f0	and #$f000	                AND #$F000
.39507b	80 10		bra $39508d	                BRA update_fat12
.39507d	ad 36 a0	lda $38a036	is_odd          LDA DOS_NEW_CLUSTER             ; Handle the odd case (change the upper 12 bits)
.395080	0a		asl a		                ASL A
.395081	0a		asl a		                ASL A
.395082	0a		asl a		                ASL A
.395083	0a		asl a		                ASL A
.395084	8d 36 a0	sta $38a036	                STA DOS_NEW_CLUSTER
.395087	bd 00 a5	lda $38a500,x	                LDA DOS_FAT_SECTORS,X
.39508a	29 0f 00	and #$000f	                AND #$000F
.39508d	0d 36 a0	ora $38a036	update_fat12    ORA DOS_NEW_CLUSTER
.395090	9d 00 a5	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.395093	22 36 4f 39	jsl $394f36	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.395097	b0 22		bcs $3950bb	                BCS ret_success
.395099	82 1a 00	brl $3950b6	                BRL pass_failure
.39509c					fat32
.39509c	c2 20		rep #$20	                REP #$20        ; set A long
.39509e	ad 36 a0	lda $38a036	                LDA DOS_NEW_CLUSTER             ; Write the ID of the new cluster to the end of the chain
.3950a1	9d 00 a5	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.3950a4	ad 38 a0	lda $38a038	                LDA DOS_NEW_CLUSTER+2
.3950a7	9d 02 a5	sta $38a502,x	                STA DOS_FAT_SECTORS+2,X
.3950aa	22 24 10 38	jsl $381024	                JSL PUTBLOCK                    ; Write the FAT sector back (assumes BIOS_LBA and BIOS_BUFF_PTR haven't changed)
.3950ae	b0 0b		bcs $3950bb	                BCS ret_success
.3950b0	e2 20		sep #$20	                SEP #$20        ; set A short
.3950b2	a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Problem working with the FAT
.3950b4	85 0e		sta $032e	                STA DOS_STATUS
.3950b6	28		plp		pass_failure    PLP
.3950b7	2b		pld		                PLD
.3950b8	ab		plb		                PLB
.3950b9	18		clc		                CLC
.3950ba	6b		rtl		                RTL
.3950bb					ret_success
.3950bb	e2 20		sep #$20	                SEP #$20        ; set A short
.3950bd	64 0e		stz $032e	                STZ DOS_STATUS
.3950bf	28		plp		                PLP
.3950c0	2b		pld		                PLD
.3950c1	ab		plb		                PLB
.3950c2	38		sec		                SEC
.3950c3	6b		rtl		                RTL
.3950c4					BCD2BIN
.3950c4	8b		phb		                PHB
.3950c5	0b		phd		                PHD
.3950c6	08		php		                PHP
.3950c7	48		pha		                PHA             ; begin setdbr macro
.3950c8	08		php		                PHP
.3950c9	e2 20		sep #$20	                SEP #$20        ; set A short
.3950cb	a9 00		lda #$00	                LDA #0
.3950cd	48		pha		                PHA
.3950ce	ab		plb		                PLB
.3950cf	28		plp		                PLP
.3950d0	68		pla		                PLA             ; end setdbr macro
.3950d1	48		pha		                PHA             ; begin setdp macro
.3950d2	08		php		                PHP
.3950d3	c2 20		rep #$20	                REP #$20        ; set A long
.3950d5	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3950d8	5b		tcd		                TCD
.3950d9	28		plp		                PLP
.3950da	68		pla		                PLA             ; end setdp macro
.3950db	c2 30		rep #$30	                REP #$30        ; set A&X long
.3950dd	85 28		sta $0348	                STA DOS_TEMP
.3950df	29 0f 00	and #$000f	                AND #$000F
.3950e2	85 2a		sta $034a	                STA DOS_TEMP+2
.3950e4	a5 28		lda $0348	                LDA DOS_TEMP
.3950e6	4a		lsr a		                LSR A
.3950e7	4a		lsr a		                LSR A
.3950e8	4a		lsr a		                LSR A
.3950e9	4a		lsr a		                LSR A
.3950ea	85 28		sta $0348	                STA DOS_TEMP
.3950ec	29 0f 00	and #$000f	                AND #$000F
.3950ef	8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.3950f3	a9 0a 00	lda #$000a	                LDA #10
.3950f6	8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.3950fa	af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.3950fe	18		clc		                CLC
.3950ff	65 2a		adc $034a	                ADC DOS_TEMP+2
.395101	85 2a		sta $034a	                STA DOS_TEMP+2
.395103	a5 28		lda $0348	                LDA DOS_TEMP
.395105	4a		lsr a		                LSR A
.395106	4a		lsr a		                LSR A
.395107	4a		lsr a		                LSR A
.395108	4a		lsr a		                LSR A
.395109	85 28		sta $0348	                STA DOS_TEMP
.39510b	29 0f 00	and #$000f	                AND #$000F
.39510e	8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.395112	a9 64 00	lda #$0064	                LDA #100
.395115	8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.395119	af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.39511d	18		clc		                CLC
.39511e	65 2a		adc $034a	                ADC DOS_TEMP+2
.395120	85 2a		sta $034a	                STA DOS_TEMP+2
.395122	a5 28		lda $0348	                LDA DOS_TEMP
.395124	4a		lsr a		                LSR A
.395125	4a		lsr a		                LSR A
.395126	4a		lsr a		                LSR A
.395127	4a		lsr a		                LSR A
.395128	29 0f 00	and #$000f	                AND #$000F
.39512b	8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.39512f	a9 e8 03	lda #$03e8	                LDA #1000
.395132	8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.395136	af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.39513a	18		clc		                CLC
.39513b	65 2a		adc $034a	                ADC DOS_TEMP+2
.39513d	28		plp		                PLP
.39513e	2b		pld		                PLD
.39513f	ab		plb		                PLB
.395140	6b		rtl		                RTL
.395141					DOS_RTCCREATE
.395141	8b		phb		                PHB
.395142	0b		phd		                PHD
.395143	08		php		                PHP
.395144	48		pha		                PHA             ; begin setdbr macro
.395145	08		php		                PHP
.395146	e2 20		sep #$20	                SEP #$20        ; set A short
.395148	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39514a	48		pha		                PHA
.39514b	ab		plb		                PLB
.39514c	28		plp		                PLP
.39514d	68		pla		                PLA             ; end setdbr macro
.39514e	48		pha		                PHA             ; begin setdp macro
.39514f	08		php		                PHP
.395150	c2 20		rep #$20	                REP #$20        ; set A long
.395152	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395155	5b		tcd		                TCD
.395156	28		plp		                PLP
.395157	68		pla		                PLA             ; end setdp macro
.395158	c2 10		rep #$10	                REP #$10        ; set X long
.39515a	e2 20		sep #$20	                SEP #$20        ; set A short
.39515c	af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn off the updates to the clock
.395160	09 08		ora #$08	                ORA #%00001000
.395162	8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.395166	af 0f 08 af	lda $af080f	                LDA @l RTC_CENTURY
.39516a	85 29		sta $0349	                STA DOS_TEMP+1
.39516c	af 0a 08 af	lda $af080a	                LDA @l RTC_YEAR             ; Get the year
.395170	85 28		sta $0348	                STA DOS_TEMP
.395172	c2 20		rep #$20	                REP #$20        ; set A long
.395174	a5 28		lda $0348	                LDA DOS_TEMP
.395176	22 c4 50 39	jsl $3950c4	                JSL BCD2BIN                 ; Convert it to binary
.39517a	85 28		sta $0348	                STA DOS_TEMP
.39517c	38		sec		                SEC                         ; Year is relative to 1980
.39517d	e9 bc 07	sbc #$07bc	                SBC #1980
.395180	c2 20		rep #$20	                REP #$20        ; set A long
.395182	0a		asl a		                ASL A
.395183	0a		asl a		                ASL A
.395184	0a		asl a		                ASL A
.395185	0a		asl a		                ASL A
.395186	0a		asl a		                ASL A
.395187	0a		asl a		                ASL A
.395188	0a		asl a		                ASL A
.395189	0a		asl a		                ASL A
.39518a	0a		asl a		                ASL A
.39518b	29 00 fe	and #$fe00	                AND #$FE00
.39518e	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.395191	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395193	e2 20		sep #$20	                SEP #$20        ; set A short
.395195	af 09 08 af	lda $af0809	                LDA @l RTC_MONTH            ; Get the month
.395199	c2 20		rep #$20	                REP #$20        ; set A long
.39519b	29 ff 00	and #$00ff	                AND #$00FF
.39519e	22 c4 50 39	jsl $3950c4	                JSL BCD2BIN                 ; Convert it to binary
.3951a2	29 ff 00	and #$00ff	                AND #$00FF                  ; Move the year to bits 15 - 9
.3951a5	0a		asl a		                ASL A
.3951a6	0a		asl a		                ASL A
.3951a7	0a		asl a		                ASL A
.3951a8	0a		asl a		                ASL A
.3951a9	0a		asl a		                ASL A
.3951aa	29 e0 01	and #$01e0	                AND #$01E0                  ; Make sure only the month is covered
.3951ad	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.3951b0	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.3951b2	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3951b4	e2 20		sep #$20	                SEP #$20        ; set A short
.3951b6	af 06 08 af	lda $af0806	                LDA @l RTC_DAY              ; Get the day
.3951ba	c2 20		rep #$20	                REP #$20        ; set A long
.3951bc	29 ff 00	and #$00ff	                AND #$00FF
.3951bf	22 c4 50 39	jsl $3950c4	                JSL BCD2BIN                 ; Convert it to binary
.3951c3	29 1f 00	and #$001f	                AND #$001F                  ; Make sure only the day is covered
.3951c6	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.3951c9	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.3951cb	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3951cd	e2 20		sep #$20	                SEP #$20        ; set A short
.3951cf	af 04 08 af	lda $af0804	                LDA @l RTC_HRS              ; Get the hour
.3951d3	29 1f		and #$1f	                AND #$1F                    ; Trim AM/PM bit
.3951d5	c2 20		rep #$20	                REP #$20        ; set A long
.3951d7	29 ff 00	and #$00ff	                AND #$00FF
.3951da	22 c4 50 39	jsl $3950c4	                JSL BCD2BIN                 ; Convert it to binary
.3951de	c2 20		rep #$20	                REP #$20        ; set A long
.3951e0	0a		asl a		                ASL A
.3951e1	0a		asl a		                ASL A
.3951e2	0a		asl a		                ASL A
.3951e3	0a		asl a		                ASL A
.3951e4	0a		asl a		                ASL A
.3951e5	0a		asl a		                ASL A
.3951e6	0a		asl a		                ASL A
.3951e7	0a		asl a		                ASL A
.3951e8	0a		asl a		                ASL A
.3951e9	0a		asl a		                ASL A
.3951ea	0a		asl a		                ASL A
.3951eb	29 00 f8	and #$f800	                AND #$F800
.3951ee	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.3951f1	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3951f3	e2 20		sep #$20	                SEP #$20        ; set A short
.3951f5	af 02 08 af	lda $af0802	                LDA @l RTC_MIN              ; Get the minute
.3951f9	c2 20		rep #$20	                REP #$20        ; set A long
.3951fb	29 ff 00	and #$00ff	                AND #$00FF
.3951fe	22 c4 50 39	jsl $3950c4	                JSL BCD2BIN                 ; Convert it to binary
.395202	c2 20		rep #$20	                REP #$20        ; set A long
.395204	0a		asl a		                ASL A
.395205	0a		asl a		                ASL A
.395206	0a		asl a		                ASL A
.395207	0a		asl a		                ASL A
.395208	0a		asl a		                ASL A
.395209	29 e0 07	and #$07e0	                AND #$07E0
.39520c	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.39520f	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.395211	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395213	e2 20		sep #$20	                SEP #$20        ; set A short
.395215	af 00 08 af	lda $af0800	                LDA @l RTC_SEC              ; Get the second
.395219	c2 20		rep #$20	                REP #$20        ; set A long
.39521b	29 ff 00	and #$00ff	                AND #$00FF
.39521e	22 c4 50 39	jsl $3950c4	                JSL BCD2BIN                 ; Convert it to binary
.395222	c2 20		rep #$20	                REP #$20        ; set A long
.395224	29 1f 00	and #$001f	                AND #$001F
.395227	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.39522a	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.39522c	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39522e	af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn on the updates again
.395232	29 f7 00	and #$00f7	                AND #%11110111
.395235	8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.395239	28		plp		                PLP
.39523a	2b		pld		                PLD
.39523b	ab		plb		                PLB
.39523c	6b		rtl		                RTL
.39523d					DOS_CREATE
.39523d	8b		phb		                PHB
.39523e	0b		phd		                PHD
.39523f	08		php		                PHP
.395240	48		pha		                PHA             ; begin setdbr macro
.395241	08		php		                PHP
.395242	e2 20		sep #$20	                SEP #$20        ; set A short
.395244	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395246	48		pha		                PHA
.395247	ab		plb		                PLB
.395248	28		plp		                PLP
.395249	68		pla		                PLA             ; end setdbr macro
.39524a	48		pha		                PHA             ; begin setdp macro
.39524b	08		php		                PHP
.39524c	c2 20		rep #$20	                REP #$20        ; set A long
.39524e	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395251	5b		tcd		                TCD
.395252	28		plp		                PLP
.395253	68		pla		                PLA             ; end setdp macro
.395254	c2 30		rep #$30	                REP #$30        ; set A&X long
.395256	a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; DOS_TEMP := DOS_FD_PTR->PATH
.395259	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39525b	85 28		sta $0348	                STA DOS_TEMP
.39525d	c8		iny		                INY
.39525e	c8		iny		                INY
.39525f	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395261	85 2a		sta $034a	                STA DOS_TEMP+2
.395263	e2 20		sep #$20	                SEP #$20        ; set A short
.395265	a0 00 00	ldy #$0000	                LDY #0
.395268	a2 00 00	ldx #$0000	                LDX #0
.39526b	b7 28		lda [$0348],y	path_loop       LDA [DOS_TEMP],Y                ; Get a byte of the path
.39526d	95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X             ; ... save it to the path buffer
.39526f	f0 04		beq $395275	                BEQ find_file                   ; If it's NULL, we're done
.395271	e8		inx		                INX
.395272	c8		iny		                INY
.395273	80 f6		bra $39526b	                BRA path_loop
.395275	22 2d 49 39	jsl $39492d	find_file       JSL DOS_PARSE_PATH
.395279	22 c5 49 39	jsl $3949c5	                JSL DOS_FINDFILE
.39527d	90 07		bcc $395286	                BCC set_device
.39527f	e2 20		sep #$20	                SEP #$20        ; set A short
.395281	a9 0b		lda #$0b	                LDA #DOS_ERR_FILEEXISTS
.395283	82 d2 00	brl $395358	                BRL ret_failure
.395286					set_device
.395286	e2 20		sep #$20	                SEP #$20        ; set A short
.395288	a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.39528b	a5 01		lda $0321	                LDA BIOS_DEV
.39528d	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39528f					validate_name
.39528f	22 03 4d 39	jsl $394d03	                JSL DOS_FREECLUS
.395293	b0 03		bcs $395298	                BCS save_data
.395295	82 c4 00	brl $39535c	                BRL pass_failure
.395298					save_data
.395298	c2 20		rep #$20	                REP #$20        ; set A long
.39529a	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER
.39529d	a5 10		lda $0330	                LDA DOS_CLUS_ID             ; DOS_FD_PTR->FIRST_CLUSTER := DOS_CLUS_ID
.39529f	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3952a1	c8		iny		                INY
.3952a2	c8		iny		                INY
.3952a3	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3952a5	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3952a7	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; DOS_BUFF_PTR := DOS_FD_PTR->BUFFER
.3952aa	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3952ac	85 1c		sta $033c	                STA DOS_BUFF_PTR
.3952ae	c8		iny		                INY
.3952af	c8		iny		                INY
.3952b0	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3952b2	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3952b4	22 1c 48 39	jsl $39481c	                JSL DOS_PUTCLUSTER
.3952b8	b0 00		bcs $3952ba	                BCS find_dir
.3952ba					find_dir
.3952ba	c2 20		rep #$20	                REP #$20        ; set A long
.3952bc	22 57 43 39	jsl $394357	                JSL DOS_DIRFINDFREE
.3952c0	b0 1a		bcs $3952dc	                BCS set_entry
.3952c2	c2 20		rep #$20	                REP #$20        ; set A long
.3952c4	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Failed to get the directory entry...
.3952c7	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y              ; DOS_CLUS_ID := DOS_FD_PTR->FIRST_CLUSTER
.3952c9	85 10		sta $0330	                STA DOS_CLUS_ID
.3952cb	c8		iny		                INY
.3952cc	c8		iny		                INY
.3952cd	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3952cf	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3952d1	22 cb 4f 39	jsl $394fcb	                JSL DELCLUSTER32                ; Delete the cluster
.3952d5	e2 20		sep #$20	                SEP #$20        ; set A short
.3952d7	a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Return that we couldn't read the directory
.3952d9	82 7c 00	brl $395358	                BRL ret_failure
.3952dc					set_entry
.3952dc	e2 20		sep #$20	                SEP #$20        ; set A short
.3952de	a0 00 00	ldy #$0000	                LDY #0
.3952e1	a9 00		lda #$00	                LDA #0                          ; NULL
.3952e3	97 18		sta [$0338],y	copy_dir_loop   STA [DOS_DIR_PTR],Y             ; Save it to the directory cluster
.3952e5	c8		iny		                INY
.3952e6	c0 20 00	cpy #$0020	                CPY #SIZE(DIRENTRY)
.3952e9	d0 f8		bne $3952e3	                BNE copy_dir_loop
.3952eb	a0 00 00	ldy #$0000	                LDY #0
.3952ee	b9 3a a0	lda $38a03a,y	name_loop       LDA DOS_SHORT_NAME,Y            ; Copy the name over
.3952f1	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.3952f3	c8		iny		                INY
.3952f4	c0 0b 00	cpy #$000b	                CPY #11
.3952f7	d0 f5		bne $3952ee	                BNE name_loop
.3952f9	c2 20		rep #$20	                REP #$20        ; set A long
.3952fb	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; DOS_DIR_PTR->CLUSTER_L := DOS_FD_PTR->FIRST_CLUSTER[15..0]
.3952fe	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395300	a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.395303	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395305	a0 0c 00	ldy #$000c	                LDY #FILEDESC.FIRST_CLUSTER+2   ; DOS_DIR_PTR->CLUSTER_H := DOS_FD_PTR->FIRST_CLUSTER[31..16]
.395308	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39530a	a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.39530d	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.39530f	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE              ; DOS_DIR_PTR->SIZE := DOS_FD_PTR->SIZE
.395312	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395314	a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE
.395317	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395319	a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.39531c	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39531e	a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.395321	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395323	a9 00 00	lda #$0000	                LDA #0                          ; Force create date-time to 0
.395326	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; TODO: restore the RTC integration when that is working better.
.395329	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39532b	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME
.39532e	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395330	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; DOS_DIR_PTR->CREATE_DATE := DOS_FD_PTR->CREATE_DATE
.395333	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395335	a0 10 00	ldy #$0010	                LDY #DIRENTRY.CREATE_DATE
.395338	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.39533a	a0 18 00	ldy #$0018	                LDY #DIRENTRY.MODIFIED_DATE     ; And DOS_DIR_PTR->MODIFIED_DATE
.39533d	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.39533f	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME       ; DOS_DIR_PTR->CREATE_TIME := DOS_FD_PTR->CREATE_TIME
.395342	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395344	a0 0e 00	ldy #$000e	                LDY #DIRENTRY.CREATE_TIME
.395347	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395349	a0 16 00	ldy #$0016	                LDY #DIRENTRY.MODIFIED_TIME     ; And DOS_DIR_PTR->MODIFIED_TIME
.39534c	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.39534e	c2 20		rep #$20	                REP #$20        ; set A long
.395350	22 15 44 39	jsl $394415	                JSL DOS_DIRWRITE
.395354	b0 0b		bcs $395361	                BCS ret_success
.395356	80 04		bra $39535c	                BRA pass_failure
.395358					ret_failure
.395358	e2 20		sep #$20	                SEP #$20        ; set A short
.39535a	85 0e		sta $032e	                STA DOS_STATUS
.39535c	28		plp		pass_failure    PLP
.39535d	2b		pld		                PLD
.39535e	ab		plb		                PLB
.39535f	18		clc		                CLC
.395360	6b		rtl		                RTL
.395361					ret_success
.395361	e2 20		sep #$20	                SEP #$20        ; set A short
.395363	64 0e		stz $032e	                STZ DOS_STATUS
.395365	28		plp		                PLP
.395366	2b		pld		                PLD
.395367	ab		plb		                PLB
.395368	38		sec		                SEC
.395369	6b		rtl		                RTL
.39536a					DOS_COPYPATH
.39536a	da		phx		                PHX
.39536b	5a		phy		                PHY
.39536c	8b		phb		                PHB
.39536d	0b		phd		                PHD
.39536e	08		php		                PHP
.39536f	48		pha		                PHA             ; begin setdbr macro
.395370	08		php		                PHP
.395371	e2 20		sep #$20	                SEP #$20        ; set A short
.395373	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395375	48		pha		                PHA
.395376	ab		plb		                PLB
.395377	28		plp		                PLP
.395378	68		pla		                PLA             ; end setdbr macro
.395379	48		pha		                PHA             ; begin setdp macro
.39537a	08		php		                PHP
.39537b	c2 20		rep #$20	                REP #$20        ; set A long
.39537d	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395380	5b		tcd		                TCD
.395381	28		plp		                PLP
.395382	68		pla		                PLA             ; end setdp macro
.395383	c2 30		rep #$30	                REP #$30        ; set A&X long
.395385	a9 00 00	lda #$0000	                LDA #0                  ; Set the DOS_PATH_BUFF to all zeros
.395388	a2 00 00	ldx #$0000	                LDX #0
.39538b	95 e0		sta $0400,x	clr_loop        STA DOS_PATH_BUFF,X
.39538d	e8		inx		                INX
.39538e	e8		inx		                INX
.39538f	e0 00 01	cpx #$0100	                CPX #256
.395392	d0 f7		bne $39538b	                BNE clr_loop
.395394	a5 20		lda $0340	                LDA DOS_FD_PTR          ; Is the DOS_FD_PTR null?
.395396	d0 04		bne $39539c	                BNE get_path            ; No: attempt to fetch the path
.395398	a5 22		lda $0342	                LDA DOS_FD_PTR+2
.39539a	f0 27		beq $3953c3	                BEQ done                ; Yes: return an empty buffer
.39539c	a0 02 00	ldy #$0002	get_path        LDY #FILEDESC.PATH      ; Get the path buffer
.39539f	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3953a1	85 28		sta $0348	                STA DOS_TEMP
.3953a3	c8		iny		                INY
.3953a4	c8		iny		                INY
.3953a5	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3953a7	85 2a		sta $034a	                STA DOS_TEMP+2
.3953a9	a5 28		lda $0348	                LDA DOS_TEMP            ; Is the path pointer NULL?
.3953ab	d0 04		bne $3953b1	                BNE start_copy          ; No: start copying it
.3953ad	a5 2a		lda $034a	                LDA DOS_TEMP+2
.3953af	f0 12		beq $3953c3	                BEQ done                ; Yes: return an empty buffer
.3953b1					start_copy
.3953b1	e2 20		sep #$20	                SEP #$20        ; set A short
.3953b3	a2 00 00	ldx #$0000	                LDX #0
.3953b6	a0 00 00	ldy #$0000	                LDY #0
.3953b9	b7 28		lda [$0348],y	loop            LDA [DOS_TEMP],Y
.3953bb	95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.3953bd	f0 04		beq $3953c3	                BEQ done
.3953bf	e8		inx		                INX
.3953c0	c8		iny		                INY
.3953c1	d0 f6		bne $3953b9	                BNE loop
.3953c3	28		plp		done            PLP
.3953c4	2b		pld		                PLD
.3953c5	ab		plb		                PLB
.3953c6	7a		ply		                PLY
.3953c7	fa		plx		                PLX
.3953c8	6b		rtl		                RTL

;******  Return to file: src\sdos.asm

.3953c9					DOS_TEST
.3953c9	8b		phb		                PHB
.3953ca	0b		phd		                PHD
.3953cb	08		php		                PHP
.3953cc	48		pha		                PHA             ; begin setdbr macro
.3953cd	08		php		                PHP
.3953ce	e2 20		sep #$20	                SEP #$20        ; set A short
.3953d0	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3953d2	48		pha		                PHA
.3953d3	ab		plb		                PLB
.3953d4	28		plp		                PLP
.3953d5	68		pla		                PLA             ; end setdbr macro
.3953d6	48		pha		                PHA             ; begin setdp macro
.3953d7	08		php		                PHP
.3953d8	c2 20		rep #$20	                REP #$20        ; set A long
.3953da	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3953dd	5b		tcd		                TCD
.3953de	28		plp		                PLP
.3953df	68		pla		                PLA             ; end setdp macro
.3953e0	c2 30		rep #$30	                REP #$30        ; set A&X long
.3953e2	a9 08 54	lda #$5408	                LDA #<>src_file
.3953e5	8f 64 03 00	sta $000364	                STA @l DOS_STR1_PTR
.3953e9	a9 39 00	lda #$0039	                LDA #`src_file
.3953ec	8f 66 03 00	sta $000366	                STA @l DOS_STR1_PTR+2
.3953f0	a9 15 54	lda #$5415	                LDA #<>dst_file
.3953f3	8f 68 03 00	sta $000368	                STA @l DOS_STR2_PTR
.3953f7	a9 39 00	lda #$0039	                LDA #`dst_file
.3953fa	8f 6a 03 00	sta $00036a	                STA @l DOS_STR2_PTR+2
.3953fe	22 a9 5a 39	jsl $395aa9	                JSL IF_COPY
.395402	b0 00		bcs $395404	                BCS done
.395404	28		plp		done            PLP
.395405	2b		pld		                PLD
.395406	ab		plb		                PLB
.395407	6b		rtl		                RTL
>395408	40 73 3a 68 65 6c 6c 6f		src_file        .null "@s:hello.bas"
>395410	2e 62 61 73 00
>395415	40 73 3a 68 65 6c 6c 6f		dst_file        .null "@s:hello2.bas"
>39541d	32 2e 62 61 73 00
.395423					IF_OPEN
.395423	da		phx		                PHX
.395424	5a		phy		                PHY
.395425	0b		phd		                PHD
.395426	8b		phb		                PHB
.395427	08		php		                PHP
.395428	48		pha		                PHA             ; begin setdbr macro
.395429	08		php		                PHP
.39542a	e2 20		sep #$20	                SEP #$20        ; set A short
.39542c	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39542e	48		pha		                PHA
.39542f	ab		plb		                PLB
.395430	28		plp		                PLP
.395431	68		pla		                PLA             ; end setdbr macro
.395432	48		pha		                PHA             ; begin setdp macro
.395433	08		php		                PHP
.395434	c2 20		rep #$20	                REP #$20        ; set A long
.395436	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395439	5b		tcd		                TCD
.39543a	28		plp		                PLP
.39543b	68		pla		                PLA             ; end setdp macro
.39543c	e2 20		sep #$20	                SEP #$20        ; set A short
.39543e	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Get the status to make sure a open is ok
.395441	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395443	89 38		bit #$38	                BIT #FD_STAT_OPEN
.395445	f0 05		beq $39544c	                BEQ ok_to_open
.395447	a9 0f		lda #$0f	                LDA #DOS_ERR_OPEN               ; If already open: throw an error
.395449	82 1c 05	brl $395968	                BRL IF_FAILURE
.39544c	22 6a 53 39	jsl $39536a	ok_to_open      JSL DOS_COPYPATH                ; Copy the path to the path buffer
.395450	22 c5 49 39	jsl $3949c5	                JSL DOS_FINDFILE                ; Attempt to find the file
.395454	b0 03		bcs $395459	                BCS is_found                    ; If OK: we found the file
.395456	82 13 05	brl $39596c	                BRL IF_PASSFAILURE              ; Otherwise: pass the failure up the chain
.395459					is_found
.395459	e2 20		sep #$20	                SEP #$20        ; set A short
.39545b	a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.39545e	a5 01		lda $0321	                LDA BIOS_DEV
.395460	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395462	c2 20		rep #$20	                REP #$20        ; set A long
.395464	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Set the buffer point to the one provided in the file
.395467	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395469	85 1c		sta $033c	                STA DOS_BUFF_PTR
.39546b	c8		iny		                INY
.39546c	c8		iny		                INY
.39546d	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39546f	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.395471	22 df 47 39	jsl $3947df	                JSL DOS_GETCLUSTER              ; Attempt to load the cluster
.395475	b0 03		bcs $39547a	                BCS read_cluster
.395477	82 f2 04	brl $39596c	                BRL IF_PASSFAILURE
.39547a	a0 0a 00	ldy #$000a	read_cluster    LDY #FILEDESC.FIRST_CLUSTER     ; Set the first cluster in the file descriptor
.39547d	a5 10		lda $0330	                LDA DOS_CLUS_ID
.39547f	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395481	c8		iny		                INY
.395482	c8		iny		                INY
.395483	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.395485	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395487	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Set the current cluster in the file descriptor
.39548a	a5 10		lda $0330	                LDA DOS_CLUS_ID
.39548c	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39548e	c8		iny		                INY
.39548f	c8		iny		                INY
.395490	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.395492	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395494	a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE              ; Copy the filesize from the directory entry to the file descriptor
.395497	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.395499	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE
.39549c	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39549e	a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.3954a1	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3954a3	a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.3954a6	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3954a8	e2 20		sep #$20	                SEP #$20        ; set A short
.3954aa	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Mark file as open and readable
.3954ad	a9 39		lda #$39	                LDA #FD_STAT_OPEN | FD_STAT_READ
.3954af	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.3954b1	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3954b3	82 bd 04	brl $395973	                BRL IF_SUCCESS
.3954b6					IF_CREATE
.3954b6	da		phx		                PHX
.3954b7	5a		phy		                PHY
.3954b8	0b		phd		                PHD
.3954b9	8b		phb		                PHB
.3954ba	08		php		                PHP
.3954bb	48		pha		                PHA             ; begin setdbr macro
.3954bc	08		php		                PHP
.3954bd	e2 20		sep #$20	                SEP #$20        ; set A short
.3954bf	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3954c1	48		pha		                PHA
.3954c2	ab		plb		                PLB
.3954c3	28		plp		                PLP
.3954c4	68		pla		                PLA             ; end setdbr macro
.3954c5	48		pha		                PHA             ; begin setdp macro
.3954c6	08		php		                PHP
.3954c7	c2 20		rep #$20	                REP #$20        ; set A long
.3954c9	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3954cc	5b		tcd		                TCD
.3954cd	28		plp		                PLP
.3954ce	68		pla		                PLA             ; end setdp macro
.3954cf	22 3d 52 39	jsl $39523d	                JSL DOS_CREATE                  ; Attempt to create the file
.3954d3	90 18		bcc $3954ed	                BCC pass_failure                ; If it fails: pass the failure up the chain
.3954d5	c2 30		rep #$30	                REP #$30        ; set A&X long
.3954d7	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Sets the current cluster to 0 to make sure the next write appends
.3954da	a9 00 00	lda #$0000	                LDA #0
.3954dd	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3954df	c8		iny		                INY
.3954e0	c8		iny		                INY
.3954e1	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3954e3	e2 20		sep #$20	                SEP #$20        ; set A short
.3954e5	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS
.3954e8	a9 3a		lda #$3a	                LDA #FD_STAT_OPEN | FD_STAT_WRITE   ; Set the file to open and APPEND only
.3954ea	82 86 04	brl $395973	                BRL IF_SUCCESS
.3954ed	82 78 04	brl $395968	pass_failure    BRL IF_FAILURE
.3954f0					IF_CLOSE
.3954f0	da		phx		                PHX
.3954f1	5a		phy		                PHY
.3954f2	0b		phd		                PHD
.3954f3	8b		phb		                PHB
.3954f4	08		php		                PHP
.3954f5	48		pha		                PHA             ; begin setdbr macro
.3954f6	08		php		                PHP
.3954f7	e2 20		sep #$20	                SEP #$20        ; set A short
.3954f9	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3954fb	48		pha		                PHA
.3954fc	ab		plb		                PLB
.3954fd	28		plp		                PLP
.3954fe	68		pla		                PLA             ; end setdbr macro
.3954ff	48		pha		                PHA             ; begin setdp macro
.395500	08		php		                PHP
.395501	c2 20		rep #$20	                REP #$20        ; set A long
.395503	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395506	5b		tcd		                TCD
.395507	28		plp		                PLP
.395508	68		pla		                PLA             ; end setdp macro
.395509	e2 20		sep #$20	                SEP #$20        ; set A short
.39550b	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Check to see if we were writing the file
.39550e	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395510	89 02		bit #$02	                BIT #FD_STAT_WRITE
.395512	f0 09		beq $39551d	                BEQ set_flag                    ; No, just mark it closed
.395514	22 89 55 39	jsl $395589	                JSL IF_WRITE                    ; Attempt to write the cluster
.395518	b0 03		bcs $39551d	                BCS set_flag
.39551a	82 4f 04	brl $39596c	                BRL IF_PASSFAILURE              ; If there was a problem, pass it up the chain
.39551d	22 5f 5a 39	jsl $395a5f	set_flag        JSL IF_FREEFD                   ; Free the file descriptor as well
.395521	82 4f 04	brl $395973	                BRL IF_SUCCESS
.395524					IF_READ
.395524	da		phx		                PHX
.395525	5a		phy		                PHY
.395526	0b		phd		                PHD
.395527	8b		phb		                PHB
.395528	08		php		                PHP
.395529	48		pha		                PHA             ; begin setdbr macro
.39552a	08		php		                PHP
.39552b	e2 20		sep #$20	                SEP #$20        ; set A short
.39552d	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39552f	48		pha		                PHA
.395530	ab		plb		                PLB
.395531	28		plp		                PLP
.395532	68		pla		                PLA             ; end setdbr macro
.395533	48		pha		                PHA             ; begin setdp macro
.395534	08		php		                PHP
.395535	c2 20		rep #$20	                REP #$20        ; set A long
.395537	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39553a	5b		tcd		                TCD
.39553b	28		plp		                PLP
.39553c	68		pla		                PLA             ; end setdp macro
.39553d	c2 10		rep #$10	                REP #$10        ; set X long
.39553f	e2 20		sep #$20	                SEP #$20        ; set A short
.395541					get_dev
.395541	e2 20		sep #$20	                SEP #$20        ; set A short
.395543	a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.395546	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395548	85 01		sta $0321	                STA BIOS_DEV
.39554a	22 47 45 39	jsl $394547	                JSL DOS_MOUNT                   ; Make sure the device is mounted (if needed)
.39554e	c2 20		rep #$20	                REP #$20        ; set A long
.395550	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.395553	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395555	85 10		sta $0330	                STA DOS_CLUS_ID
.395557	c8		iny		                INY
.395558	c8		iny		                INY
.395559	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39555b	85 12		sta $0332	                STA DOS_CLUS_ID+2
.39555d	22 ea 4b 39	jsl $394bea	                JSL NEXTCLUSTER                 ; Find the next cluster of the file
.395561	90 13		bcc $395576	                BCC pass_failure                ; If not OK: pass the failure up the chain
.395563	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.395566	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395568	85 1c		sta $033c	                STA DOS_BUFF_PTR
.39556a	c8		iny		                INY
.39556b	c8		iny		                INY
.39556c	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39556e	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.395570	22 df 47 39	jsl $3947df	                JSL DOS_GETCLUSTER              ; Get the cluster
.395574	b0 03		bcs $395579	                BCS ret_success                 ; If ok: return success
.395576					pass_failure
.395576	82 f3 03	brl $39596c	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.395579	a0 06 00	ldy #$0006	ret_success     LDY #FILEDESC.CLUSTER           ; Save the new cluster as the file's current cluster
.39557c	a5 10		lda $0330	                LDA DOS_CLUS_ID
.39557e	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395580	c8		iny		                INY
.395581	c8		iny		                INY
.395582	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.395584	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395586	82 ea 03	brl $395973	                BRL IF_SUCCESS
.395589					IF_WRITE
.395589	da		phx		                PHX
.39558a	5a		phy		                PHY
.39558b	0b		phd		                PHD
.39558c	8b		phb		                PHB
.39558d	08		php		                PHP
.39558e	48		pha		                PHA             ; begin setdbr macro
.39558f	08		php		                PHP
.395590	e2 20		sep #$20	                SEP #$20        ; set A short
.395592	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395594	48		pha		                PHA
.395595	ab		plb		                PLB
.395596	28		plp		                PLP
.395597	68		pla		                PLA             ; end setdbr macro
.395598	48		pha		                PHA             ; begin setdp macro
.395599	08		php		                PHP
.39559a	c2 20		rep #$20	                REP #$20        ; set A long
.39559c	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39559f	5b		tcd		                TCD
.3955a0	28		plp		                PLP
.3955a1	68		pla		                PLA             ; end setdp macro
.3955a2	c2 10		rep #$10	                REP #$10        ; set X long
.3955a4	e2 20		sep #$20	                SEP #$20        ; set A short
.3955a6	a0 01 00	ldy #$0001	get_dev         LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.3955a9	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3955ab	85 01		sta $0321	                STA BIOS_DEV
.3955ad	22 47 45 39	jsl $394547	                JSL DOS_MOUNT                   ; Make sure the device is mounted (if needed)
.3955b1	c2 20		rep #$20	                REP #$20        ; set A long
.3955b3	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.3955b6	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3955b8	85 1c		sta $033c	                STA DOS_BUFF_PTR
.3955ba	c8		iny		                INY
.3955bb	c8		iny		                INY
.3955bc	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3955be	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3955c0	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.3955c3	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3955c5	85 10		sta $0330	                STA DOS_CLUS_ID
.3955c7	c8		iny		                INY
.3955c8	c8		iny		                INY
.3955c9	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3955cb	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3955cd	d0 1a		bne $3955e9	                BNE rewrite_cluster             ; If the cluster ID <> 0, overwrite it
.3955cf	a5 10		lda $0330	                LDA DOS_CLUS_ID
.3955d1	d0 16		bne $3955e9	                BNE rewrite_cluster
.3955d3	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Get the file's first cluster
.3955d6	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3955d8	85 10		sta $0330	                STA DOS_CLUS_ID
.3955da	c8		iny		                INY
.3955db	c8		iny		                INY
.3955dc	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3955de	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3955e0	22 0b 50 39	jsl $39500b	                JSL DOS_APPENDCLUS              ; Append the cluster
.3955e4	b0 0c		bcs $3955f2	                BCS ret_success                 ; If OK: return success
.3955e6	82 83 03	brl $39596c	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.3955e9	22 1c 48 39	jsl $39481c	rewrite_cluster JSL DOS_PUTCLUSTER              ; Over-write the cluster
.3955ed	b0 03		bcs $3955f2	                BCS ret_success                 ; If ok: return success
.3955ef	82 7a 03	brl $39596c	pass_failure    BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.3955f2	82 7e 03	brl $395973	ret_success     BRL IF_SUCCESS
.3955f5					IF_DIROPEN
.3955f5	da		phx		                PHX
.3955f6	5a		phy		                PHY
.3955f7	0b		phd		                PHD
.3955f8	8b		phb		                PHB
.3955f9	08		php		                PHP
.3955fa	48		pha		                PHA             ; begin setdbr macro
.3955fb	08		php		                PHP
.3955fc	e2 20		sep #$20	                SEP #$20        ; set A short
.3955fe	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395600	48		pha		                PHA
.395601	ab		plb		                PLB
.395602	28		plp		                PLP
.395603	68		pla		                PLA             ; end setdbr macro
.395604	48		pha		                PHA             ; begin setdp macro
.395605	08		php		                PHP
.395606	c2 20		rep #$20	                REP #$20        ; set A long
.395608	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39560b	5b		tcd		                TCD
.39560c	28		plp		                PLP
.39560d	68		pla		                PLA             ; end setdp macro
.39560e	c2 30		rep #$30	                REP #$30        ; set A&X long
.395610	22 6a 53 39	jsl $39536a	                JSL DOS_COPYPATH            ; Copy the path from the file descriptor to the path buffer
.395614	22 2d 49 39	jsl $39492d	                JSL DOS_PARSE_PATH          ; Parse the path
.395618	22 47 45 39	jsl $394547	                JSL DOS_MOUNT               ; Make sure we've mounted the SDC.
.39561c	b0 03		bcs $395621	                BCS get_root_dir            ; If successful: get the root directory
.39561e	82 4b 03	brl $39596c	                BRL IF_PASSFAILURE          ; Otherwise: pass the error up the chain
.395621					get_root_dir
.395621	c2 30		rep #$30	                REP #$30        ; set A&X long
.395623	22 fc 41 39	jsl $3941fc	                JSL DOS_DIROPEN
.395627	b0 03		bcs $39562c	                BCS success
.395629	82 40 03	brl $39596c	                BRL IF_PASSFAILURE
.39562c	82 44 03	brl $395973	success         BRL IF_SUCCESS
.39562f					IF_DIRNEXT
.39562f	5c 96 42 39	jmp $394296	                JML DOS_DIRNEXT
.395633					IF_DELETE
.395633	da		phx		                PHX
.395634	5a		phy		                PHY
.395635	0b		phd		                PHD
.395636	8b		phb		                PHB
.395637	08		php		                PHP
.395638	48		pha		                PHA             ; begin setdbr macro
.395639	08		php		                PHP
.39563a	e2 20		sep #$20	                SEP #$20        ; set A short
.39563c	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39563e	48		pha		                PHA
.39563f	ab		plb		                PLB
.395640	28		plp		                PLP
.395641	68		pla		                PLA             ; end setdbr macro
.395642	48		pha		                PHA             ; begin setdp macro
.395643	08		php		                PHP
.395644	c2 20		rep #$20	                REP #$20        ; set A long
.395646	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395649	5b		tcd		                TCD
.39564a	28		plp		                PLP
.39564b	68		pla		                PLA             ; end setdp macro
.39564c	c2 30		rep #$30	                REP #$30        ; set A&X long
.39564e	22 c5 49 39	jsl $3949c5	                JSL DOS_FINDFILE
.395652	b0 03		bcs $395657	                BCS get_first_clus
.395654	82 15 03	brl $39596c	                BRL IF_PASSFAILURE
.395657					get_first_clus
.395657	a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.39565a	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.39565c	85 10		sta $0330	                STA DOS_CLUS_ID
.39565e	a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.395661	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.395663	85 12		sta $0332	                STA DOS_CLUS_ID+2
.395665	a5 10		lda $0330	                LDA DOS_CLUS_ID
.395667	8d 2a a0	sta $38a02a	                STA DOS_CURR_CLUS
.39566a	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.39566c	8d 2c a0	sta $38a02c	                STA DOS_CURR_CLUS+2
.39566f	22 ea 4b 39	jsl $394bea	del_loop        JSL NEXTCLUSTER
.395673	90 2f		bcc $3956a4	                BCC del_one
.395675	a5 10		lda $0330	                LDA DOS_CLUS_ID
.395677	8d 2e a0	sta $38a02e	                STA DOS_NEXT_CLUS
.39567a	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.39567c	8d 30 a0	sta $38a030	                STA DOS_NEXT_CLUS+2
.39567f	ad 2a a0	lda $38a02a	                LDA DOS_CURR_CLUS
.395682	85 10		sta $0330	                STA DOS_CLUS_ID
.395684	ad 2c a0	lda $38a02c	                LDA DOS_CURR_CLUS+2
.395687	85 12		sta $0332	                STA DOS_CLUS_ID+2
.395689	22 cb 4f 39	jsl $394fcb	                JSL DELCLUSTER32
.39568d	b0 03		bcs $395692	                BCS go_next
.39568f	82 da 02	brl $39596c	                BRL IF_PASSFAILURE
.395692					go_next
.395692	ad 2e a0	lda $38a02e	                LDA DOS_NEXT_CLUS
.395695	85 10		sta $0330	                STA DOS_CLUS_ID
.395697	8d 2a a0	sta $38a02a	                STA DOS_CURR_CLUS
.39569a	ad 30 a0	lda $38a030	                LDA DOS_NEXT_CLUS+2
.39569d	85 12		sta $0332	                STA DOS_CLUS_ID+2
.39569f	8d 2c a0	sta $38a02c	                STA DOS_CURR_CLUS+2
.3956a2	80 cb		bra $39566f	                BRA del_loop
.3956a4					del_one
.3956a4	ad 2a a0	lda $38a02a	                LDA DOS_CURR_CLUS
.3956a7	85 10		sta $0330	                STA DOS_CLUS_ID
.3956a9	ad 2c a0	lda $38a02c	                LDA DOS_CURR_CLUS+2
.3956ac	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3956ae	22 25 4f 39	jsl $394f25	                JSL DELCLUSTER
.3956b2	b0 03		bcs $3956b7	                BCS free_dir_entry
.3956b4	82 b5 02	brl $39596c	                BRL IF_PASSFAILURE
.3956b7					free_dir_entry
.3956b7	e2 20		sep #$20	                SEP #$20        ; set A short
.3956b9	a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME         ; Flag the directory entry as deleted
.3956bc	a9 e5		lda #$e5	                LDA #DOS_DIR_ENT_UNUSED
.3956be	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.3956c0	22 15 44 39	jsl $394415	                JSL DOS_DIRWRITE                ; Write the directory entry back
.3956c4	b0 03		bcs $3956c9	                BCS ret_success
.3956c6	82 a3 02	brl $39596c	                BRL IF_PASSFAILURE
.3956c9	82 a7 02	brl $395973	ret_success     BRL IF_SUCCESS
.3956cc					IF_DIRREAD
.3956cc	da		phx		                PHX
.3956cd	5a		phy		                PHY
.3956ce	0b		phd		                PHD
.3956cf	8b		phb		                PHB
.3956d0	08		php		                PHP
.3956d1	48		pha		                PHA             ; begin setdbr macro
.3956d2	08		php		                PHP
.3956d3	e2 20		sep #$20	                SEP #$20        ; set A short
.3956d5	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3956d7	48		pha		                PHA
.3956d8	ab		plb		                PLB
.3956d9	28		plp		                PLP
.3956da	68		pla		                PLA             ; end setdbr macro
.3956db	48		pha		                PHA             ; begin setdp macro
.3956dc	08		php		                PHP
.3956dd	c2 20		rep #$20	                REP #$20        ; set A long
.3956df	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3956e2	5b		tcd		                TCD
.3956e3	28		plp		                PLP
.3956e4	68		pla		                PLA             ; end setdp macro
.3956e5	c2 30		rep #$30	                REP #$30        ; set A&X long
.3956e7	22 c5 49 39	jsl $3949c5	                JSL DOS_FINDFILE
.3956eb	b0 03		bcs $3956f0	                BCS success
.3956ed	82 78 02	brl $395968	                BRL IF_FAILURE
.3956f0	82 80 02	brl $395973	success         BRL IF_SUCCESS
.3956f3					IF_DIRWRITE
.3956f3	5c 15 44 39	jmp $394415	                JML DOS_DIRWRITE
.3956f7					IF_LOAD
.3956f7	da		phx		                PHX
.3956f8	5a		phy		                PHY
.3956f9	0b		phd		                PHD
.3956fa	8b		phb		                PHB
.3956fb	08		php		                PHP
.3956fc	48		pha		                PHA             ; begin setdbr macro
.3956fd	08		php		                PHP
.3956fe	e2 20		sep #$20	                SEP #$20        ; set A short
.395700	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395702	48		pha		                PHA
.395703	ab		plb		                PLB
.395704	28		plp		                PLP
.395705	68		pla		                PLA             ; end setdbr macro
.395706	48		pha		                PHA             ; begin setdp macro
.395707	08		php		                PHP
.395708	c2 20		rep #$20	                REP #$20        ; set A long
.39570a	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39570d	5b		tcd		                TCD
.39570e	28		plp		                PLP
.39570f	68		pla		                PLA             ; end setdp macro
.395710	c2 30		rep #$30	                REP #$30        ; set A&X long
.395712	22 23 54 39	jsl $395423	                JSL IF_OPEN
.395716	b0 03		bcs $39571b	                BCS setup                   ; If success: start setting things up
.395718	82 51 02	brl $39596c	                BRL IF_PASSFAILURE          ; Otherwise: pass the failure up the chain
.39571b					setup
.39571b	c2 20		rep #$20	                REP #$20        ; set A long
.39571d	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE          ; Record the size of the file in DOS_FILE_SIZE
.395720	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395722	85 2c		sta $034c	                STA DOS_FILE_SIZE
.395724	c8		iny		                INY
.395725	c8		iny		                INY
.395726	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395728	85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.39572a	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; Set up the source pointer
.39572d	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39572f	85 30		sta $0350	                STA DOS_SRC_PTR
.395731	c8		iny		                INY
.395732	c8		iny		                INY
.395733	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395735	85 32		sta $0352	                STA DOS_SRC_PTR+2
.395737	a5 36		lda $0356	                LDA DOS_DST_PTR+2           ; Is there a destination address in RAM?
.395739	c9 40 00	cmp #$0040	                CMP #$0040
.39573c	b0 04		bcs $395742	                BGE load_by_type            ; No: try to load it by type
.39573e	5c 1d 58 39	jmp $39581d	                JML IF_LOADRAW              ; Otherwise, load it to the supplied destination
.395742	a0 08 00	ldy #$0008	load_by_type    LDY #8                      ; Point to the first extension byte
.395745	a2 00 00	ldx #$0000	                LDX #0                      ; and the first byte of the table
.395748					type_loop
.395748	e2 20		sep #$20	                SEP #$20        ; set A short
.39574a	bf 8e 57 39	lda $39578e,x	                LDA LOAD_TYPE_TABLE,X       ; Get 1st extension character of the entry
.39574e	f0 37		beq $395787	                BEQ no_match                ; If NULL... we didn't get a match
.395750	d9 3a a0	cmp $38a03a,y	                CMP DOS_SHORT_NAME,Y        ; Get the character of the extension
.395753	d0 28		bne $39577d	                BNE next_entry              ; If they don't match, try the next entry
.395755	bf 8f 57 39	lda $39578f,x	                LDA LOAD_TYPE_TABLE+1,X     ; Get 2nd extension character of the entry
.395759	d9 3b a0	cmp $38a03b,y	                CMP DOS_SHORT_NAME+1,Y      ; Get the 2nd character of the extension
.39575c	d0 1f		bne $39577d	                BNE next_entry              ; If they don't match, try the next entry
.39575e	bf 90 57 39	lda $395790,x	                LDA LOAD_TYPE_TABLE+2,X     ; Get 3rd extension character of the entry
.395762	d9 3c a0	cmp $38a03c,y	                CMP DOS_SHORT_NAME+2,Y      ; Get the 3rd character of the extension
.395765	d0 16		bne $39577d	                BNE next_entry              ; If they don't match, try the next entry
.395767	c2 20		rep #$20	                REP #$20        ; set A long
.395769	bf 91 57 39	lda $395791,x	                LDA LOAD_TYPE_TABLE+3,X     ; Get the low word of the address
.39576d	85 28		sta $0348	                STA DOS_TEMP                ; Save it to the jump vector
.39576f	e2 20		sep #$20	                SEP #$20        ; set A short
.395771	bf 93 57 39	lda $395793,x	                LDA LOAD_TYPE_TABLE+5,X     ; Get the high byte of the address
.395775	85 2a		sta $034a	                STA DOS_TEMP+2              ; Save it to the jump vector
.395777	a2 00 00	ldx #$0000	                LDX #0
.39577a	dc 48 03	jmp [$0348]	                JML [DOS_TEMP]              ; Jump to the loading routine
.39577d					next_entry
.39577d	c2 30		rep #$30	                REP #$30        ; set A&X long
.39577f	8a		txa		                TXA
.395780	18		clc		                CLC
.395781	69 06 00	adc #$0006	                ADC #6
.395784	aa		tax		                TAX
.395785	80 c1		bra $395748	                BRA type_loop               ; And check it against the file
.395787					no_match
.395787	e2 20		sep #$20	                SEP #$20        ; set A short
.395789	a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC         ; Return an not-executable error
.39578b	82 da 01	brl $395968	                BRL IF_FAILURE
>39578e	50 47 58			LOAD_TYPE_TABLE .text "PGX"                 ; "PGX" --> IF_LOADPGX
>395791	95 57				                .word <>IF_LOADPGX
>395793	39				                .byte `IF_LOADPGX
>395794	00				                .byte 0
.395795					IF_LOADPGX
.395795	c2 10		rep #$10	                REP #$10        ; set X long
.395797	e2 20		sep #$20	                SEP #$20        ; set A short
.395799	a0 00 00	ldy #$0000	                LDY #0
.39579c	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Check for "PGX" signature
.39579e	c9 50		cmp #$50	                CMP #'P'
.3957a0	d0 15		bne $3957b7	                BNE fail_sig                        ; If not found, fail
.3957a2	c8		iny		                INY
.3957a3	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.3957a5	c9 47		cmp #$47	                CMP #'G'
.3957a7	d0 0e		bne $3957b7	                BNE fail_sig
.3957a9	c8		iny		                INY
.3957aa	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.3957ac	c9 58		cmp #$58	                CMP #'X'
.3957ae	d0 07		bne $3957b7	                BNE fail_sig
.3957b0	c8		iny		                INY                                 ; Check for CPU and version code ($01 for 65816)
.3957b1	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.3957b3	c9 01		cmp #$01	                CMP #$01
.3957b5	f0 17		beq $3957ce	                BEQ get_dest                        ; All passes: go to get the destination address
.3957b7	a9 10		lda #$10	fail_sig        LDA #DOS_ERR_PGXSIG                 ; Fail with a PGXSIG error code
.3957b9	22 68 59 39	jsl $395968	                JSL IF_FAILURE
.3957bd					adjust_size
.3957bd	c2 20		rep #$20	                REP #$20        ; set A long
.3957bf	38		sec		                SEC                                 ; Subtract the 8 bytes of the header from the file size
.3957c0	a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.3957c2	e9 08 00	sbc #$0008	                SBC #8
.3957c5	85 2c		sta $034c	                STA DOS_FILE_SIZE
.3957c7	a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.3957c9	e9 00 00	sbc #$0000	                SBC #0
.3957cc	85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.3957ce					get_dest
.3957ce	c2 20		rep #$20	                REP #$20        ; set A long
.3957d0	c8		iny		                INY
.3957d1	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get low word of destination address
.3957d3	85 34		sta $0354	                STA DOS_DST_PTR                     ; And save it to the destination pointer
.3957d5	85 3c		sta $035c	                STA DOS_RUN_PTR                     ; And save it to the RUN pointer
.3957d7	c8		iny		                INY
.3957d8	c8		iny		                INY
.3957d9	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get high word of destination address
.3957db	85 36		sta $0356	                STA DOS_DST_PTR+2
.3957dd	85 3e		sta $035e	                STA DOS_RUN_PTR+2
.3957df	c8		iny		                INY                                 ; Point to the first data byte
.3957e0	c8		iny		                INY
.3957e1					copy_loop
.3957e1	e2 20		sep #$20	                SEP #$20        ; set A short
.3957e3	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Read a byte from the file
.3957e5	87 34		sta [$0354]	                STA [DOS_DST_PTR]                   ; Write it to the destination
.3957e7	c2 20		rep #$20	                REP #$20        ; set A long
.3957e9	e6 34		inc $0354	                INC DOS_DST_PTR                     ; Move to the next destination location
.3957eb	d0 02		bne $3957ef	                BNE dec_file_size
.3957ed	e6 36		inc $0356	                INC DOS_DST_PTR+2
.3957ef	38		sec		dec_file_size   SEC                                 ; Count down the number of bytes to read
.3957f0	a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.3957f2	e9 01 00	sbc #$0001	                SBC #1
.3957f5	85 2c		sta $034c	                STA DOS_FILE_SIZE
.3957f7	a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.3957f9	e9 00 00	sbc #$0000	                SBC #0
.3957fc	85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.3957fe	a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Are we at the end of the file?
.395800	d0 04		bne $395806	                BNE next_byte
.395802	a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.395804	f0 14		beq $39581a	                BEQ done                            ; Yes: we're done
.395806	c8		iny		next_byte       INY                                 ; Otherwise, move to the next source location
.395807	cc 0e a0	cpy $38a00e	                CPY CLUSTER_SIZE                    ; Are we at the end of the cluster?
.39580a	d0 d5		bne $3957e1	                BNE copy_loop                       ; No: keep copying
.39580c	22 ee 4c 39	jsl $394cee	                JSL DOS_READNEXT                    ; Yes: Load the next cluster
.395810	b0 03		bcs $395815	                BCS next_cluster
.395812	82 57 01	brl $39596c	                BRL IF_PASSFAILURE                  ; If failed: pass that up the chain
.395815	a0 00 00	ldy #$0000	next_cluster    LDY #0
.395818	80 c7		bra $3957e1	                BRA copy_loop                       ; Go back to copying
.39581a	82 56 01	brl $395973	done            BRL IF_SUCCESS
.39581d					IF_LOADRAW
.39581d	c2 30		rep #$30	                REP #$30        ; set A&X long
.39581f	a0 00 00	ldy #$0000	copy_cluster    LDY #0
.395822					copy_loop
.395822	e2 20		sep #$20	                SEP #$20        ; set A short
.395824	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y         ; Copy byte from cluster to destination
.395826	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395828	c2 20		rep #$20	                REP #$20        ; set A long
.39582a	38		sec		                SEC                         ; Count down the number of bytes left
.39582b	a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.39582d	e9 01 00	sbc #$0001	                SBC #1
.395830	85 2c		sta $034c	                STA DOS_FILE_SIZE
.395832	a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.395834	e9 00 00	sbc #$0000	                SBC #0
.395837	85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.395839	d0 04		bne $39583f	                BNE continue
.39583b	a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.39583d	f0 1b		beq $39585a	                BEQ close_file              ; If not: we're done
.39583f	c8		iny		continue        INY
.395840	cc 0e a0	cpy $38a00e	                CPY CLUSTER_SIZE            ; Are we done with the cluster?
.395843	d0 dd		bne $395822	                BNE copy_loop               ; No: keep processing the bytes
.395845	18		clc		                CLC                         ; Advance the destination pointer to the next chunk of memory
.395846	a5 34		lda $0354	                LDA DOS_DST_PTR
.395848	6d 0e a0	adc $38a00e	                ADC CLUSTER_SIZE
.39584b	85 34		sta $0354	                STA DOS_DST_PTR
.39584d	a5 36		lda $0356	                LDA DOS_DST_PTR+2
.39584f	69 00 00	adc #$0000	                ADC #0
.395852	85 36		sta $0356	                STA DOS_DST_PTR+2
.395854	22 24 55 39	jsl $395524	                JSL IF_READ                 ; Yes: load the next cluster
.395858	b0 c5		bcs $39581f	                BCS copy_cluster            ; And start copying it
.39585a					close_file
.39585a	82 16 01	brl $395973	ret_success     BRL IF_SUCCESS
.39585d					IF_NULLBUFFER
.39585d	5a		phy		                PHY
.39585e	8b		phb		                PHB
.39585f	0b		phd		                PHD
.395860	08		php		                PHP
.395861	48		pha		                PHA             ; begin setdbr macro
.395862	08		php		                PHP
.395863	e2 20		sep #$20	                SEP #$20        ; set A short
.395865	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395867	48		pha		                PHA
.395868	ab		plb		                PLB
.395869	28		plp		                PLP
.39586a	68		pla		                PLA             ; end setdbr macro
.39586b	48		pha		                PHA             ; begin setdp macro
.39586c	08		php		                PHP
.39586d	c2 20		rep #$20	                REP #$20        ; set A long
.39586f	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395872	5b		tcd		                TCD
.395873	28		plp		                PLP
.395874	68		pla		                PLA             ; end setdp macro
.395875	c2 30		rep #$30	                REP #$30        ; set A&X long
.395877	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.39587a	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39587c	85 28		sta $0348	                STA DOS_TEMP
.39587e	c8		iny		                INY
.39587f	c8		iny		                INY
.395880	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395882	85 2a		sta $034a	                STA DOS_TEMP+2
.395884	a0 00 00	ldy #$0000	                LDY #0
.395887	a9 00 00	lda #$0000	                LDA #0
.39588a	97 28		sta [$0348],y	loop            STA [DOS_TEMP],Y
.39588c	c8		iny		                INY
.39588d	c8		iny		                INY
.39588e	c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE
.395891	d0 f7		bne $39588a	                BNE loop
.395893	28		plp		                PLP
.395894	2b		pld		                PLD
.395895	ab		plb		                PLB
.395896	7a		ply		                PLY
.395897	6b		rtl		                RTL
.395898					IF_COPY2BUFF
.395898	5a		phy		                PHY
.395899	8b		phb		                PHB
.39589a	0b		phd		                PHD
.39589b	08		php		                PHP
.39589c	48		pha		                PHA             ; begin setdbr macro
.39589d	08		php		                PHP
.39589e	e2 20		sep #$20	                SEP #$20        ; set A short
.3958a0	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3958a2	48		pha		                PHA
.3958a3	ab		plb		                PLB
.3958a4	28		plp		                PLP
.3958a5	68		pla		                PLA             ; end setdbr macro
.3958a6	48		pha		                PHA             ; begin setdp macro
.3958a7	08		php		                PHP
.3958a8	c2 20		rep #$20	                REP #$20        ; set A long
.3958aa	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3958ad	5b		tcd		                TCD
.3958ae	28		plp		                PLP
.3958af	68		pla		                PLA             ; end setdp macro
.3958b0	c2 30		rep #$30	                REP #$30        ; set A&X long
.3958b2	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.3958b5	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3958b7	85 28		sta $0348	                STA DOS_TEMP
.3958b9	c8		iny		                INY
.3958ba	c8		iny		                INY
.3958bb	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3958bd	85 2a		sta $034a	                STA DOS_TEMP+2
.3958bf	a0 00 00	ldy #$0000	                LDY #0
.3958c2					copy_loop
.3958c2	e2 20		sep #$20	                SEP #$20        ; set A short
.3958c4	a7 30		lda [$0350]	                LDA [DOS_SRC_PTR]           ; Copy a byte
.3958c6	97 28		sta [$0348],y	                STA [DOS_TEMP],Y
.3958c8	c2 20		rep #$20	                REP #$20        ; set A long
.3958ca	e6 30		inc $0350	                INC DOS_SRC_PTR             ; Advance the source pointer
.3958cc	d0 02		bne $3958d0	                BNE adv_dest
.3958ce	e6 32		inc $0352	                INC DOS_SRC_PTR+2
.3958d0	c8		iny		adv_dest        INY                         ; Count it
.3958d1	c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE        ; Have we reached the limit?
.3958d4	f0 0c		beq $3958e2	                BEQ done                    ; Yes: we're done
.3958d6	a5 30		lda $0350	                LDA DOS_SRC_PTR             ; Check if we copied the last byte
.3958d8	c5 38		cmp $0358	                CMP DOS_END_PTR
.3958da	d0 e6		bne $3958c2	                BNE copy_loop               ; No: keep copying
.3958dc	a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.3958de	c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.3958e0	d0 e0		bne $3958c2	                BNE copy_loop
.3958e2	28		plp		done            PLP
.3958e3	2b		pld		                PLD
.3958e4	ab		plb		                PLB
.3958e5	7a		ply		                PLY
.3958e6	6b		rtl		                RTL
.3958e7					IF_SAVE
.3958e7	da		phx		                PHX
.3958e8	5a		phy		                PHY
.3958e9	0b		phd		                PHD
.3958ea	8b		phb		                PHB
.3958eb	08		php		                PHP
.3958ec	48		pha		                PHA             ; begin setdbr macro
.3958ed	08		php		                PHP
.3958ee	e2 20		sep #$20	                SEP #$20        ; set A short
.3958f0	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3958f2	48		pha		                PHA
.3958f3	ab		plb		                PLB
.3958f4	28		plp		                PLP
.3958f5	68		pla		                PLA             ; end setdbr macro
.3958f6	48		pha		                PHA             ; begin setdp macro
.3958f7	08		php		                PHP
.3958f8	c2 20		rep #$20	                REP #$20        ; set A long
.3958fa	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3958fd	5b		tcd		                TCD
.3958fe	28		plp		                PLP
.3958ff	68		pla		                PLA             ; end setdp macro
.395900	c2 30		rep #$30	                REP #$30        ; set A&X long
.395902	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE := DOS_END_PTR - DOS_SRC_PTR
.395905	38		sec		                SEC
.395906	a5 38		lda $0358	                LDA DOS_END_PTR
.395908	e5 30		sbc $0350	                SBC DOS_SRC_PTR
.39590a	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39590c	c8		iny		                INY
.39590d	c8		iny		                INY
.39590e	a5 3a		lda $035a	                LDA DOS_END_PTR+2
.395910	e5 32		sbc $0352	                SBC DOS_SRC_PTR+2
.395912	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395914	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE++
.395917	18		clc		                CLC
.395918	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39591a	69 01 00	adc #$0001	                ADC #1
.39591d	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39591f	90 09		bcc $39592a	                BCC first_block
.395921	c8		iny		                INY
.395922	c8		iny		                INY
.395923	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395925	69 00 00	adc #$0000	                ADC #0
.395928	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39592a	22 5d 58 39	jsl $39585d	first_block     JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.39592e	22 98 58 39	jsl $395898	                JSL IF_COPY2BUFF        ; Copy first (at most) 512 bytes of data to FD buffer
.395932	22 b6 54 39	jsl $3954b6	                JSL IF_CREATE           ; Create file.
.395936	b0 03		bcs $39593b	                BCS check_for_end
.395938	82 31 00	brl $39596c	                BRL IF_PASSFAILURE      ; If we couldn't create the file, pass the failure up
.39593b	a5 30		lda $0350	check_for_end   LDA DOS_SRC_PTR         ; Check if we copied the last byte
.39593d	c5 38		cmp $0358	                CMP DOS_END_PTR
.39593f	d0 06		bne $395947	                BNE next_block
.395941	a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.395943	c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.395945	f0 1d		beq $395964	                BEQ done                ; Yes: we're done
.395947	22 5d 58 39	jsl $39585d	next_block      JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.39594b	22 98 58 39	jsl $395898	                JSL IF_COPY2BUFF        ; Copy next (at most) 512 bytes of data to FD buffer
.39594f	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER   ; Make sure the CLUSTER is 0 to force an append
.395952	a9 00 00	lda #$0000	                LDA #0
.395955	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395957	c8		iny		                INY
.395958	c8		iny		                INY
.395959	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39595b	22 89 55 39	jsl $395589	                JSL IF_WRITE            ; Append to the file
.39595f	b0 da		bcs $39593b	                BCS check_for_end       ; And try again
.395961	82 08 00	brl $39596c	                BRL IF_PASSFAILURE      ; If we couldn't update the file, pass the failure up
.395964	5c 73 59 39	jmp $395973	done            JML IF_SUCCESS
.395968					IF_FAILURE
.395968	e2 20		sep #$20	                SEP #$20        ; set A short
.39596a	85 0e		sta $032e	                STA DOS_STATUS
.39596c	28		plp		IF_PASSFAILURE  PLP
.39596d	18		clc		                CLC
.39596e	ab		plb		                PLB
.39596f	2b		pld		                PLD
.395970	7a		ply		                PLY
.395971	fa		plx		                PLX
.395972	6b		rtl		                RTL
.395973					IF_SUCCESS
.395973	e2 20		sep #$20	                SEP #$20        ; set A short
.395975	64 00		stz $0320	                STZ BIOS_STATUS
.395977	64 0e		stz $032e	                STZ DOS_STATUS
.395979	28		plp		                PLP
.39597a	38		sec		                SEC
.39597b	ab		plb		                PLB
.39597c	2b		pld		                PLD
.39597d	7a		ply		                PLY
.39597e	fa		plx		                PLX
.39597f	6b		rtl		                RTL
.395980					IF_RUN
.395980	da		phx		                PHX
.395981	5a		phy		                PHY
.395982	0b		phd		                PHD
.395983	8b		phb		                PHB
.395984	08		php		                PHP
.395985	48		pha		                PHA             ; begin setdbr macro
.395986	08		php		                PHP
.395987	e2 20		sep #$20	                SEP #$20        ; set A short
.395989	a9 00		lda #$00	                LDA #0
.39598b	48		pha		                PHA
.39598c	ab		plb		                PLB
.39598d	28		plp		                PLP
.39598e	68		pla		                PLA             ; end setdbr macro
.39598f	48		pha		                PHA             ; begin setdp macro
.395990	08		php		                PHP
.395991	c2 20		rep #$20	                REP #$20        ; set A long
.395993	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395996	5b		tcd		                TCD
.395997	28		plp		                PLP
.395998	68		pla		                PLA             ; end setdp macro
.395999	e2 20		sep #$20	                SEP #$20        ; set A short
.39599b	c2 10		rep #$10	                REP #$10        ; set X long
.39599d	a9 00		lda #$00	                LDA #0                                  ; Zero out the file descriptor
.39599f	a2 00 00	ldx #$0000	                LDX #0
.3959a2	9f 00 ad 38	sta $38ad00,x	clr_fd_loop     STA @l DOS_SPARE_FD,X
.3959a6	e8		inx		                INX
.3959a7	e0 20 00	cpx #$0020	                CPX #SIZE(FILEDESC)
.3959aa	d0 f6		bne $3959a2	                BNE clr_fd_loop
.3959ac	c2 20		rep #$20	                REP #$20        ; set A long
.3959ae	a9 00 ab	lda #$ab00	                LDA #<>DOS_SPARE_SECTOR                 ; Set the buffer for the file descriptor
.3959b1	8f 0e ad 38	sta $38ad0e	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER
.3959b5	a9 38 00	lda #$0038	                LDA #`DOS_SPARE_SECTOR
.3959b8	8f 10 ad 38	sta $38ad10	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER+2
.3959bc	a5 40		lda $0360	                LDA DOS_RUN_PARAM                        ; Set the path for the file descriptor
.3959be	8f 02 ad 38	sta $38ad02	                STA @l DOS_SPARE_FD+FILEDESC.PATH
.3959c2	a5 42		lda $0362	                LDA DOS_RUN_PARAM+2
.3959c4	8f 04 ad 38	sta $38ad04	                STA @l DOS_SPARE_FD+FILEDESC.PATH+2
.3959c8	a9 00 00	lda #$0000	                LDA #0                                  ; Clear the run pointer
.3959cb	85 3c		sta $035c	                STA DOS_RUN_PTR                         ; This is used to check that we loaded an executable binary
.3959cd	85 3e		sta $035e	                STA DOS_RUN_PTR+2
.3959cf	a9 00 ad	lda #$ad00	                LDA #<>DOS_SPARE_FD
.3959d2	85 20		sta $0340	                STA DOS_FD_PTR
.3959d4	a9 38 00	lda #$0038	                LDA #`DOS_SPARE_FD
.3959d7	85 22		sta $0342	                STA DOS_FD_PTR+2
.3959d9	a9 ff ff	lda #$ffff	                LDA #$FFFF                              ; We want to load to the address provided by the file
.3959dc	8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.3959e0	8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.3959e4	22 18 11 38	jsl $381118	                JSL F_LOAD                              ; Try to load the file
.3959e8	b0 14		bcs $3959fe	                BCS try_execute
.3959ea	82 7f ff	brl $39596c	                BRL IF_PASSFAILURE                      ; On error: pass failure up the chain
.3959ed					chk_execute
.3959ed	c2 20		rep #$20	                REP #$20        ; set A long
.3959ef	a5 3c		lda $035c	                LDA DOS_RUN_PTR                         ; Check to see if we got a startup address back
.3959f1	d0 0b		bne $3959fe	                BNE try_execute                         ; If so: call it
.3959f3	a5 3e		lda $035e	                LDA DOS_RUN_PTR+2
.3959f5	d0 07		bne $3959fe	                BNE try_execute
.3959f7	e2 20		sep #$20	                SEP #$20        ; set A short
.3959f9	a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC                     ; If not: return an error that it's not executable
.3959fb	82 6a ff	brl $395968	                BRL IF_FAILURE
.3959fe					try_execute
.3959fe	e2 20		sep #$20	                SEP #$20        ; set A short
.395a00	a9 5c		lda #$5c	                LDA #$5C                                ; Write a JML opcode
.395a02	85 3b		sta $035b	                STA DOS_RUN_PTR-1
.395a04	22 5b 03 00	jsl $00035b	                JSL DOS_RUN_PTR-1                       ; And call to it
.395a08	82 68 ff	brl $395973	                BRL IF_SUCCESS                          ; Return success
.395a0b					IF_ALLOCFD
.395a0b	da		phx		                PHX
.395a0c	5a		phy		                PHY
.395a0d	0b		phd		                PHD
.395a0e	8b		phb		                PHB
.395a0f	08		php		                PHP
.395a10	48		pha		                PHA             ; begin setdbr macro
.395a11	08		php		                PHP
.395a12	e2 20		sep #$20	                SEP #$20        ; set A short
.395a14	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395a16	48		pha		                PHA
.395a17	ab		plb		                PLB
.395a18	28		plp		                PLP
.395a19	68		pla		                PLA             ; end setdbr macro
.395a1a	48		pha		                PHA             ; begin setdp macro
.395a1b	08		php		                PHP
.395a1c	c2 20		rep #$20	                REP #$20        ; set A long
.395a1e	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395a21	5b		tcd		                TCD
.395a22	28		plp		                PLP
.395a23	68		pla		                PLA             ; end setdp macro
.395a24	c2 10		rep #$10	                REP #$10        ; set X long
.395a26	a2 00 00	ldx #$0000	                LDX #0                              ; Point to the first file descriptor
.395a29					chk_fd
.395a29	e2 20		sep #$20	                SEP #$20        ; set A short
.395a2b	bd 20 ad	lda $38ad20,x	                LDA @w DOS_FILE_DESCS,X             ; Check the file descriptor's status
.395a2e	89 10		bit #$10	                BIT #FD_STAT_ALLOC                  ; Is the file descriptor allocated?
.395a30	f0 14		beq $395a46	                BEQ found                           ; No: flag and return the found descriptor
.395a32					next_fd
.395a32	c2 20		rep #$20	                REP #$20        ; set A long
.395a34	8a		txa		                TXA                                 ; Yes: Move to the next file descriptor
.395a35	18		clc		                CLC
.395a36	69 20 00	adc #$0020	                ADC #SIZE(FILEDESC)
.395a39	aa		tax		                TAX
.395a3a	e0 00 01	cpx #$0100	                CPX #SIZE(FILEDESC) * DOS_FD_MAX    ; Are we out of file descriptors?
.395a3d	90 ea		bcc $395a29	                BLT chk_fd                          ; No: check this new file descriptor
.395a3f	e2 20		sep #$20	                SEP #$20        ; set A short
.395a41	a9 16		lda #$16	                LDA #DOS_ERR_NOFD                   ; Yes: Return failure (no file descriptors available)
.395a43	82 22 ff	brl $395968	                BRL IF_FAILURE
.395a46	09 10		ora #$10	found           ORA #FD_STAT_ALLOC                  ; No: Set the ALLOC bit
.395a48	9d 20 ad	sta $38ad20,x	                STA @w DOS_FILE_DESCS,X             ; And store it in the file descriptor's status
.395a4b	c2 20		rep #$20	                REP #$20        ; set A long
.395a4d	8a		txa		                TXA
.395a4e	18		clc		                CLC
.395a4f	69 20 ad	adc #$ad20	                ADC #<>DOS_FILE_DESCS
.395a52	85 20		sta $0340	                STA @b DOS_FD_PTR
.395a54	a9 38 00	lda #$0038	                LDA #`DOS_FILE_DESCS
.395a57	69 00 00	adc #$0000	                ADC #0
.395a5a	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395a5c	82 14 ff	brl $395973	                BRL IF_SUCCESS                      ; Return this file descriptor
.395a5f					IF_FREEFD
.395a5f	da		phx		                PHX
.395a60	5a		phy		                PHY
.395a61	0b		phd		                PHD
.395a62	8b		phb		                PHB
.395a63	08		php		                PHP
.395a64	48		pha		                PHA             ; begin setdbr macro
.395a65	08		php		                PHP
.395a66	e2 20		sep #$20	                SEP #$20        ; set A short
.395a68	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395a6a	48		pha		                PHA
.395a6b	ab		plb		                PLB
.395a6c	28		plp		                PLP
.395a6d	68		pla		                PLA             ; end setdbr macro
.395a6e	48		pha		                PHA             ; begin setdp macro
.395a6f	08		php		                PHP
.395a70	c2 20		rep #$20	                REP #$20        ; set A long
.395a72	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395a75	5b		tcd		                TCD
.395a76	28		plp		                PLP
.395a77	68		pla		                PLA             ; end setdp macro
.395a78	e2 20		sep #$20	                SEP #$20        ; set A short
.395a7a	c2 10		rep #$10	                REP #$10        ; set X long
.395a7c	a9 00		lda #$00	                LDA #0
.395a7e	87 20		sta [$0340]	                STA [DOS_FD_PTR]
.395a80	82 f0 fe	brl $395973	                BRL IF_SUCCESS
.395a83					DOS_SRC2DST
.395a83	da		phx		                PHX
.395a84	5a		phy		                PHY
.395a85	0b		phd		                PHD
.395a86	8b		phb		                PHB
.395a87	08		php		                PHP
.395a88	48		pha		                PHA             ; begin setdp macro
.395a89	08		php		                PHP
.395a8a	c2 20		rep #$20	                REP #$20        ; set A long
.395a8c	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395a8f	5b		tcd		                TCD
.395a90	28		plp		                PLP
.395a91	68		pla		                PLA             ; end setdp macro
.395a92	c2 30		rep #$30	                REP #$30        ; set A&X long
.395a94	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.395a97	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.395a99	aa		tax		                TAX                                     ; X := source buffer address
.395a9a	b7 34		lda [$0354],y	                LDA [DOS_DST_PTR],Y
.395a9c	a8		tay		                TAY                                     ; Y := destination buffer address
.395a9d	a9 00 02	lda #$0200	                LDA #DOS_SECTOR_SIZE                    ; A := the size of the buffers
.395aa0	54 38 38	mvn $38,$38	                MVN #`DOS_FILE_BUFFS,#`DOS_FILE_BUFFS   ; Copy the sector data
.395aa3	28		plp		                PLP
.395aa4	ab		plb		                PLB
.395aa5	2b		pld		                PLD
.395aa6	7a		ply		                PLY
.395aa7	fa		plx		                PLX
.395aa8	6b		rtl		                RTL
.395aa9					IF_COPY
.395aa9	da		phx		                PHX
.395aaa	5a		phy		                PHY
.395aab	0b		phd		                PHD
.395aac	8b		phb		                PHB
.395aad	08		php		                PHP
.395aae	48		pha		                PHA             ; begin setdbr macro
.395aaf	08		php		                PHP
.395ab0	e2 20		sep #$20	                SEP #$20        ; set A short
.395ab2	a9 00		lda #$00	                LDA #0
.395ab4	48		pha		                PHA
.395ab5	ab		plb		                PLB
.395ab6	28		plp		                PLP
.395ab7	68		pla		                PLA             ; end setdbr macro
.395ab8	48		pha		                PHA             ; begin setdp macro
.395ab9	08		php		                PHP
.395aba	c2 20		rep #$20	                REP #$20        ; set A long
.395abc	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395abf	5b		tcd		                TCD
.395ac0	28		plp		                PLP
.395ac1	68		pla		                PLA             ; end setdp macro
.395ac2	22 0b 5a 39	jsl $395a0b	                JSL IF_ALLOCFD                  ; Allocate an FD for the source
.395ac6	b0 03		bcs $395acb	                BCS set_src_path
.395ac8	82 a1 fe	brl $39596c	                BRL IF_PASSFAILURE              ; If failed: pass the failure up the chain
.395acb					set_src_path
.395acb	c2 30		rep #$30	                REP #$30        ; set A&X long
.395acd	a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; Set the source path
.395ad0	a5 44		lda $0364	                LDA @b DOS_STR1_PTR
.395ad2	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395ad4	c8		iny		                INY
.395ad5	c8		iny		                INY
.395ad6	a5 46		lda $0366	                LDA @b DOS_STR1_PTR+2
.395ad8	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395ada					alloc_dest
.395ada	c2 30		rep #$30	                REP #$30        ; set A&X long
.395adc	a5 20		lda $0340	                LDA @b DOS_FD_PTR               ; set DOS_SRC_PTR to the file descriptor pointer
.395ade	85 30		sta $0350	                STA @b DOS_SRC_PTR
.395ae0	a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.395ae2	85 32		sta $0352	                STA @b DOS_SRC_PTR+2
.395ae4	22 0b 5a 39	jsl $395a0b	                JSL IF_ALLOCFD                  ; Allocate an FD for the destination
.395ae8	b0 0f		bcs $395af9	                BCS set_paths                   ; If everything is ok... start setting the paths
.395aea	a5 30		lda $0350	err_free_src_fd LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395aec	85 20		sta $0340	                STA @b DOS_FD_PTR
.395aee	a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395af0	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395af2	22 5f 5a 39	jsl $395a5f	                JSL IF_FREEFD                   ; And free it
.395af6	82 73 fe	brl $39596c	                BRL IF_PASSFAILURE              ; Pass the failure up the chain
.395af9					set_paths
.395af9	c2 30		rep #$30	                REP #$30        ; set A&X long
.395afb	a5 20		lda $0340	                LDA @b DOS_FD_PTR               ; Set DOS_DST_PTR to the file descriptor pointer for the destination
.395afd	85 34		sta $0354	                STA @b DOS_DST_PTR
.395aff	a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.395b01	85 36		sta $0356	                STA @b DOS_DST_PTR+2
.395b03	a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; Set the destination path
.395b06	a5 48		lda $0368	                LDA @b DOS_STR2_PTR
.395b08	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395b0a	c8		iny		                INY
.395b0b	c8		iny		                INY
.395b0c	a5 4a		lda $036a	                LDA @b DOS_STR2_PTR+2
.395b0e	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395b10	a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395b12	85 20		sta $0340	                STA @b DOS_FD_PTR
.395b14	a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395b16	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395b18	22 f0 10 38	jsl $3810f0	                JSL F_OPEN                      ; Try to open the file
.395b1c	b0 0f		bcs $395b2d	                BCS src_open                    ; If success, work with the openned file
.395b1e	a5 34		lda $0354	err_free_dst_fd LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395b20	85 20		sta $0340	                STA @b DOS_FD_PTR
.395b22	a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395b24	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395b26	22 5f 5a 39	jsl $395a5f	                JSL IF_FREEFD                   ; And free it
.395b2a	82 bd ff	brl $395aea	                BRL err_free_src_fd             ; Free the source file descriptor
.395b2d	a0 12 00	ldy #$0012	src_open        LDY #FILEDESC.SIZE              ; destination file size := source file size
.395b30	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.395b32	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395b34	c8		iny		                INY
.395b35	c8		iny		                INY
.395b36	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.395b38	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395b3a	22 83 5a 39	jsl $395a83	                JSL DOS_SRC2DST                 ; Copy the first sector's worth of data
.395b3e	a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395b40	85 20		sta $0340	                STA @b DOS_FD_PTR
.395b42	a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395b44	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395b46	22 f4 10 38	jsl $3810f4	                JSL F_CREATE                    ; Attempt to create the file
.395b4a	b0 0f		bcs $395b5b	                BCS read_next                   ; If sucessful, try to get the next cluster
.395b4c	a5 30		lda $0350	err_src_close   LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395b4e	85 20		sta $0340	                STA @b DOS_FD_PTR
.395b50	a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395b52	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395b54	22 f8 10 38	jsl $3810f8	                JSL F_CLOSE                     ; Close the source file (maybe not really necessary)
.395b58	82 c3 ff	brl $395b1e	                BRL err_free_dst_fd             ; Free the file descriptors and return an error
.395b5b					read_next
.395b5b	a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395b5d	85 20		sta $0340	                STA @b DOS_FD_PTR
.395b5f	a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395b61	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395b63	22 00 11 38	jsl $381100	                JSL F_READ                      ; Attempt to read the next sector of the source
.395b67	b0 19		bcs $395b82	                BCS copy2dest                   ; If successful, copy the sector
.395b69	e2 20		sep #$20	                SEP #$20        ; set A short
.395b6b	a5 0e		lda $032e	                LDA @b DOS_STATUS
.395b6d	c9 0a		cmp #$0a	                CMP #DOS_ERR_NOCLUSTER          ; Are there no more clusters in the source file?
.395b6f	f0 32		beq $395ba3	                BEQ file_copied                 ; Yes: we're done copying
.395b71					err_dest_close
.395b71	c2 20		rep #$20	                REP #$20        ; set A long
.395b73	a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395b75	85 20		sta $0340	                STA @b DOS_FD_PTR
.395b77	a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395b79	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395b7b	22 f8 10 38	jsl $3810f8	                JSL F_CLOSE                     ; Attempt to close the destination
.395b7f	82 ca ff	brl $395b4c	                BRL err_src_close               ; Close the source and throw an error
.395b82					copy2dest
.395b82	22 83 5a 39	jsl $395a83	                JSL DOS_SRC2DST                 ; Copy the source sector to the destination sector
.395b86	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; destination sector cluster ID := 0 to append
.395b89	a9 00 00	lda #$0000	                LDA #0
.395b8c	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395b8e	c8		iny		                INY
.395b8f	c8		iny		                INY
.395b90	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395b92	a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395b94	85 20		sta $0340	                STA @b DOS_FD_PTR
.395b96	a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395b98	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395b9a	22 fc 10 38	jsl $3810fc	                JSL F_WRITE                     ; Attempt to write the destionation sector to the disk
.395b9e	90 d1		bcc $395b71	                BCC err_dest_close              ; If error: close all files and throw the error
.395ba0	82 b8 ff	brl $395b5b	                BRL read_next                   ; Otherwise: repeat the loop
.395ba3					file_copied
.395ba3	c2 20		rep #$20	                REP #$20        ; set A long
.395ba5	a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395ba7	85 20		sta $0340	                STA @b DOS_FD_PTR
.395ba9	a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395bab	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395bad	22 f8 10 38	jsl $3810f8	                JSL F_CLOSE                     ; Close the destination
.395bb1	a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395bb3	85 20		sta $0340	                STA @b DOS_FD_PTR
.395bb5	a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395bb7	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395bb9	22 f8 10 38	jsl $3810f8	                JSL F_CLOSE                     ; Close the source
.395bbd	82 b3 fd	brl $395973	                BRL IF_SUCCESS

;******  Return to file: src\kernel.asm


;******  Processing file: src\uart.asm

=$af13f8				UART1_BASE = $AF13F8        ; Base address for UART 1 (COM1)
=$af12f8				UART2_BASE = $AF12F8        ; Base address for UART 2 (COM2)
=$00					UART_TRHB = $00             ; Transmit/Receive Hold Buffer
=$00					UART_DLL = UART_TRHB        ; Divisor Latch Low Byte
=$01					UART_DLH = $01              ; Divisor Latch High Byte
=$01					UART_IER = UART_DLH         ; Interupt Enable Register
=$02					UART_FCR = $02              ; FIFO Control Register
=$02					UART_IIR = UART_FCR         ; Interupt Indentification Register
=$03					UART_LCR = $03              ; Line Control Register
=$04					UART_MCR = $04              ; Modem Control REgister
=$05					UART_LSR = $05              ; Line Status Register
=$06					UART_MSR = $06              ; Modem Status Register
=$07					UART_SR = $07               ; Scratch Register
=$20					UINT_LOW_POWER = $20        ; Enable Low Power Mode (16750)
=$10					UINT_SLEEP_MODE = $10       ; Enable Sleep Mode (16750)
=$08					UINT_MODEM_STATUS = $08     ; Enable Modem Status Interrupt
=$04					UINT_LINE_STATUS = $04      ; Enable Receiver Line Status Interupt
=$02					UINT_THR_EMPTY = $02        ; Enable Transmit Holding Register Empty interrupt
=$01					UINT_DATA_AVAIL = $01       ; Enable Recieve Data Available interupt
=$80					IIR_FIFO_ENABLED = $80      ; FIFO is enabled
=$40					IIR_FIFO_NONFUNC = $40      ; FIFO is not functioning
=$20					IIR_FIFO_64BYTE = $20       ; 64 byte FIFO enabled (16750)
=$00					IIR_MODEM_STATUS = $00      ; Modem Status Interrupt
=$02					IIR_THR_EMPTY = $02         ; Transmit Holding Register Empty Interrupt
=$04					IIR_DATA_AVAIL = $04        ; Data Available Interrupt
=$06					IIR_LINE_STATUS = $06       ; Line Status Interrupt
=$0c					IIR_TIMEOUT = $0C           ; Time-out Interrupt (16550 and later)
=$01					IIR_INTERRUPT_PENDING = $01 ; Interrupt Pending Flag
=$80					LCR_DLB = $80               ; Divisor Latch Access Bit
=$60					LCR_SBE = $60               ; Set Break Enable
=$00					LCR_PARITY_NONE = $00       ; Parity: None
=$08					LCR_PARITY_ODD = $08        ; Parity: Odd
=$18					LCR_PARITY_EVEN = $18       ; Parity: Even
=$28					LCR_PARITY_MARK = $28       ; Parity: Mark
=$38					LCR_PARITY_SPACE = $38      ; Parity: Space
=$00					LCR_STOPBIT_1 = $00         ; One Stop Bit
=$04					LCR_STOPBIT_2 = $04         ; 1.5 or 2 Stop Bits
=$00					LCR_DATABITS_5 = $00        ; Data Bits: 5
=$01					LCR_DATABITS_6 = $01        ; Data Bits: 6
=$02					LCR_DATABITS_7 = $02        ; Data Bits: 7
=$03					LCR_DATABITS_8 = $03        ; Data Bits: 8
=$80					LSR_ERR_RECIEVE = $80       ; Error in Received FIFO
=$40					LSR_XMIT_DONE = $40         ; All data has been transmitted
=$20					LSR_XMIT_EMPTY = $20        ; Empty transmit holding register
=$10					LSR_BREAK_INT = $10         ; Break interrupt
=$08					LSR_ERR_FRAME = $08         ; Framing error
=$04					LSR_ERR_PARITY = $04        ; Parity error
=$02					LSR_ERR_OVERRUN = $02       ; Overrun error
=$01					LSR_DATA_AVAIL = $01        ; Data is ready in the receive buffer
=384					UART_300 = 384              ; Code for 300 bps
=96					UART_1200 = 96              ; Code for 1200 bps
=48					UART_2400 = 48              ; Code for 2400 bps
=24					UART_4800 = 24              ; Code for 4800 bps
=12					UART_9600 = 12              ; Code for 9600 bps
=6					UART_19200 = 6              ; Code for 19200 bps
=3					UART_38400 = 3              ; Code for 28400 bps
=2					UART_57600 = 2              ; Code for 57600 bps
=1					UART_115200 = 1             ; Code for 115200 bps
.395bc0					UART_SELECT
.395bc0	08		php		            PHP
.395bc1	c2 20		rep #$20	                REP #$20        ; set A long
.395bc3	c9 02 00	cmp #$0002	            CMP #2
.395bc6	f0 07		beq $395bcf	            BEQ is_COM2
.395bc8	c2 20		rep #$20	                REP #$20        ; set A long
.395bca	a9 f8 13	lda #$13f8	            LDA #<>UART1_BASE
.395bcd	80 05		bra $395bd4	            BRA setaddr
.395bcf					is_COM2
.395bcf	c2 20		rep #$20	                REP #$20        ; set A long
.395bd1	a9 f8 12	lda #$12f8	            LDA #<>UART2_BASE
.395bd4	8f 00 07 00	sta $000700	setaddr     STA @lCURRUART
.395bd8	e2 20		sep #$20	                SEP #$20        ; set A short
.395bda	a9 af		lda #$af	            LDA #`UART1_BASE
.395bdc	8f 02 07 00	sta $000702	            STA @lCURRUART+2
.395be0	28		plp		            PLP
.395be1	6b		rtl		            RTL
.395be2					UART_SETBPS
.395be2	08		php		            PHP
.395be3	0b		phd		            PHD
.395be4	48		pha		                PHA             ; begin setdp macro
.395be5	08		php		                PHP
.395be6	c2 20		rep #$20	                REP #$20        ; set A long
.395be8	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395beb	5b		tcd		                TCD
.395bec	28		plp		                PLP
.395bed	68		pla		                PLA             ; end setdp macro
.395bee	c2 30		rep #$30	                REP #$30        ; set A&X long
.395bf0	48		pha		            PHA
.395bf1	e2 20		sep #$20	                SEP #$20        ; set A short
.395bf3	a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Enable divisor latch
.395bf6	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.395bf8	09 80		ora #$80	            ORA #LCR_DLB
.395bfa	97 00		sta [$0700],y	            STA [CURRUART],Y
.395bfc	c2 20		rep #$20	                REP #$20        ; set A long
.395bfe	68		pla		            PLA
.395bff	a0 00 00	ldy #$0000	            LDY #UART_DLL
.395c02	97 00		sta [$0700],y	            STA [CURRUART],Y    ; Save the divisor to the UART
.395c04	e2 20		sep #$20	                SEP #$20        ; set A short
.395c06	a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Disable divisor latch
.395c09	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.395c0b	49 80		eor #$80	            EOR #LCR_DLB
.395c0d	97 00		sta [$0700],y	            STA [CURRUART],Y
.395c0f	2b		pld		            PLD
.395c10	28		plp		            PLP
.395c11	6b		rtl		            RTL
.395c12					UART_SETLCR
.395c12	08		php		            PHP
.395c13	0b		phd		            PHD
.395c14	48		pha		                PHA             ; begin setdp macro
.395c15	08		php		                PHP
.395c16	c2 20		rep #$20	                REP #$20        ; set A long
.395c18	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395c1b	5b		tcd		                TCD
.395c1c	28		plp		                PLP
.395c1d	68		pla		                PLA             ; end setdp macro
.395c1e	e2 20		sep #$20	                SEP #$20        ; set A short
.395c20	c2 10		rep #$10	                REP #$10        ; set X long
.395c22	29 7f		and #$7f	            AND #$7F            ; We don't want to alter divisor latch
.395c24	a0 03 00	ldy #$0003	            LDY #UART_LCR
.395c27	97 00		sta [$0700],y	            STA [CURRUART],Y
.395c29	2b		pld		            PLD
.395c2a	28		plp		            PLP
.395c2b	6b		rtl		            RTL
.395c2c					UART_INIT
.395c2c	08		php		            PHP
.395c2d	0b		phd		            PHD
.395c2e	c2 30		rep #$30	                REP #$30        ; set A&X long
.395c30	48		pha		                PHA             ; begin setdp macro
.395c31	08		php		                PHP
.395c32	c2 20		rep #$20	                REP #$20        ; set A long
.395c34	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395c37	5b		tcd		                TCD
.395c38	28		plp		                PLP
.395c39	68		pla		                PLA             ; end setdp macro
.395c3a	a9 01 00	lda #$0001	            LDA #UART_115200
.395c3d	22 e2 5b 39	jsl $395be2	            JSL UART_SETBPS
.395c41	e2 20		sep #$20	                SEP #$20        ; set A short
.395c43	a9 03		lda #$03	            LDA #LCR_PARITY_NONE | LCR_STOPBIT_1 | LCR_DATABITS_8
.395c45	22 12 5c 39	jsl $395c12	            JSL UART_SETLCR
.395c49	a9 e1		lda #$e1	            LDA #%11100001
.395c4b	a0 02 00	ldy #$0002	            LDY #UART_FCR
.395c4e	97 00		sta [$0700],y	            STA [CURRUART],Y
.395c50	2b		pld		            PLD
.395c51	28		plp		            PLP
.395c52	6b		rtl		            RTL
.395c53					UART_HASBYT
.395c53	08		php		            PHP
.395c54	0b		phd		            PHD
.395c55	c2 30		rep #$30	                REP #$30        ; set A&X long
.395c57	48		pha		                PHA             ; begin setdp macro
.395c58	08		php		                PHP
.395c59	c2 20		rep #$20	                REP #$20        ; set A long
.395c5b	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395c5e	5b		tcd		                TCD
.395c5f	28		plp		                PLP
.395c60	68		pla		                PLA             ; end setdp macro
.395c61	e2 20		sep #$20	                SEP #$20        ; set A short
.395c63	a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.395c66	b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.395c68	29 01		and #$01	            AND #LSR_DATA_AVAIL
.395c6a	d0 04		bne $395c70	            BNE ret_true            ; If flag is set, return true
.395c6c	2b		pld		ret_false   PLD                     ; Return false
.395c6d	28		plp		            PLP
.395c6e	18		clc		            CLC
.395c6f	6b		rtl		            RTL
.395c70	2b		pld		ret_true    PLD                     ; Return true
.395c71	28		plp		            PLP
.395c72	38		sec		            SEC
.395c73	6b		rtl		            RTL
.395c74					UART_GETC
.395c74	08		php		            PHP
.395c75	0b		phd		            PHD
.395c76	c2 30		rep #$30	                REP #$30        ; set A&X long
.395c78	48		pha		                PHA             ; begin setdp macro
.395c79	08		php		                PHP
.395c7a	c2 20		rep #$20	                REP #$20        ; set A long
.395c7c	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395c7f	5b		tcd		                TCD
.395c80	28		plp		                PLP
.395c81	68		pla		                PLA             ; end setdp macro
.395c82	e2 20		sep #$20	                SEP #$20        ; set A short
.395c84	a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.395c87	b7 00		lda [$0700],y	wait_getc   LDA [CURRUART],Y
.395c89	29 01		and #$01	            AND #LSR_DATA_AVAIL
.395c8b	f0 fa		beq $395c87	            BEQ wait_getc           ; If the flag is clear, wait
.395c8d	a0 00 00	ldy #$0000	            LDY #UART_TRHB          ; Get the byte from the receive FIFO
.395c90	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.395c92	2b		pld		            PLD
.395c93	28		plp		            PLP
.395c94	6b		rtl		            RTL
.395c95					UART_PUTC
.395c95	08		php		            PHP
.395c96	0b		phd		            PHD
.395c97	c2 30		rep #$30	                REP #$30        ; set A&X long
.395c99	48		pha		                PHA             ; begin setdp macro
.395c9a	08		php		                PHP
.395c9b	c2 20		rep #$20	                REP #$20        ; set A long
.395c9d	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395ca0	5b		tcd		                TCD
.395ca1	28		plp		                PLP
.395ca2	68		pla		                PLA             ; end setdp macro
.395ca3	e2 20		sep #$20	                SEP #$20        ; set A short
.395ca5	48		pha		            PHA                     ; Wait for the transmit FIFO to free up
.395ca6	a0 05 00	ldy #$0005	            LDY #UART_LSR
.395ca9	b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.395cab	29 20		and #$20	            AND #LSR_XMIT_EMPTY
.395cad	f0 fa		beq $395ca9	            BEQ wait_putc
.395caf	68		pla		            PLA
.395cb0	a0 00 00	ldy #$0000	            LDY #UART_TRHB
.395cb3	97 00		sta [$0700],y	            STA [CURRUART],Y
.395cb5	2b		pld		            PLD
.395cb6	28		plp		            PLP
.395cb7	6b		rtl		            RTL
.395cb8					UART_PUTS
.395cb8	08		php		            PHP
.395cb9	e2 20		sep #$20	                SEP #$20        ; set A short
.395cbb	bd 00 00	lda $0000,x	put_loop    LDA #0,B,X
.395cbe	f0 07		beq $395cc7	            BEQ done
.395cc0	22 95 5c 39	jsl $395c95	            JSL UART_PUTC
.395cc4	e8		inx		            INX
.395cc5	80 f4		bra $395cbb	            BRA put_loop
.395cc7	28		plp		done        PLP
.395cc8	6b		rtl		            RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\joystick.asm

.395cc9					JOYSTICK_SET_NES_MODE
.395cc9	e2 20		sep #$20	                SEP #$20        ; set A short
.395ccb	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395ccf	29 fb		and #$fb	          AND #~NES_SNES_JOY  ; 0 = NES (8 bit shift)
.395cd1	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395cd5	6b		rtl		          RTL
.395cd6					JOYSTICK_SET_SNES_MODE
.395cd6	e2 20		sep #$20	                SEP #$20        ; set A short
.395cd8	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395cdc	29 fb		and #$fb	          AND #~NES_SNES_JOY
.395cde	09 04		ora #$04	          ORA #NES_SNES_JOY   ; 1 = SNES (12 Bit Shift)
.395ce0	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395ce4	6b		rtl		          RTL
.395ce5					JOYSTICK_ENABLE_NES_SNES_PORT0
.395ce5	e2 20		sep #$20	                SEP #$20        ; set A short
.395ce7	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395ceb	29 fe		and #$fe	          AND #~NES_SNES_EN0
.395ced	09 01		ora #$01	          ORA #NES_SNES_EN0
.395cef	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395cf3	6b		rtl		          RTL
.395cf4					JOYSTICK_ENABLE_NES_SNES_PORT1
.395cf4	e2 20		sep #$20	                SEP #$20        ; set A short
.395cf6	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395cfa	29 fd		and #$fd	          AND #~NES_SNES_EN1
.395cfc	09 02		ora #$02	          ORA #NES_SNES_EN1
.395cfe	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395d02	6b		rtl		          RTL
.395d03					JOYSTICK_DISABLE_NES_SNES_PORT0
.395d03	e2 20		sep #$20	                SEP #$20        ; set A short
.395d05	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395d09	29 fe		and #$fe	          AND #~NES_SNES_EN0
.395d0b	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395d0f	6b		rtl		          RTL
.395d10					JOYSTICK_DISABLE_NES_SNES_PORT1
.395d10	e2 20		sep #$20	                SEP #$20        ; set A short
.395d12	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395d16	29 fd		and #$fd	          AND #~NES_SNES_EN1
.395d18	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395d1c	6b		rtl		          RTL
.395d1d					JOYSTICK_NES_SNES_TRIG_WITH_POLL
.395d1d	e2 20		sep #$20	                SEP #$20        ; set A short
.395d1f	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395d23	29 03		and #$03	          AND #(NES_SNES_EN0 | NES_SNES_EN1)
.395d25	c9 00		cmp #$00	          CMP #$00
.395d27	f0 14		beq $395d3d	          BEQ END_OF_JOYSTICK_POLL
.395d29	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395d2d	09 80		ora #$80	          ORA #NES_SNES_TRIG   ; Set to 1 (Will auto Clear)
.395d2f	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395d33					JOYSTICK_POLLING_ISNOTOVER
.395d33	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE ;
.395d37	29 40		and #$40	          AND #NES_SNES_DONE
.395d39	c9 40		cmp #$40	          CMP #NES_SNES_DONE
.395d3b	d0 f6		bne $395d33	          BNE JOYSTICK_POLLING_ISNOTOVER
.395d3d					END_OF_JOYSTICK_POLL
.395d3d	6b		rtl		          RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\sdc_library.asm

.395d3e					SDC_TEST
.395d3e	8b		phb		                PHB
.395d3f	0b		phd		                PHD
.395d40	08		php		                PHP
.395d41	48		pha		                PHA             ; begin setdbr macro
.395d42	08		php		                PHP
.395d43	e2 20		sep #$20	                SEP #$20        ; set A short
.395d45	a9 00		lda #$00	                LDA #0
.395d47	48		pha		                PHA
.395d48	ab		plb		                PLB
.395d49	28		plp		                PLP
.395d4a	68		pla		                PLA             ; end setdbr macro
.395d4b	48		pha		                PHA             ; begin setdp macro
.395d4c	08		php		                PHP
.395d4d	c2 20		rep #$20	                REP #$20        ; set A long
.395d4f	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395d52	5b		tcd		                TCD
.395d53	28		plp		                PLP
.395d54	68		pla		                PLA             ; end setdp macro
.395d55	e2 20		sep #$20	                SEP #$20        ; set A short
.395d57	a9 f0		lda #$f0	                LDA #$F0                            ; Set white on black background
.395d59	8d 1e 00	sta $001e	                STA @w CURCOLOR
.395d5c	22 a8 10 38	jsl $3810a8	                JSL CLRSCREEN
.395d60	22 a0 10 38	jsl $3810a0	                JSL CSRHOME
.395d64	22 a4 5d 39	jsl $395da4	                JSL SDC_INIT                        ; Attempt to initilize the SDC interface
.395d68	b0 03		bcs $395d6d	                BCS init_ok
.395d6a	82 15 00	brl $395d82	                BRL done
.395d6d	a9 02		lda #$02	init_ok         LDA #BIOS_DEV_SD
.395d6f	85 01		sta $0321	                STA BIOS_DEV
.395d71	22 47 45 39	jsl $394547	                JSL DOS_MOUNT                       ; Attempt to mount the SDC
.395d75	b0 03		bcs $395d7a	                BCS mount_ok
.395d77	82 08 00	brl $395d82	                BRL done
.395d7a	22 f5 55 39	jsl $3955f5	mount_ok        JSL IF_DIROPEN
.395d7e	b0 02		bcs $395d82	                BCS all_ok
.395d80	80 00		bra $395d82	                BRA done
.395d82					all_ok
.395d82	22 6c 10 38	jsl $38106c	done            JSL PRINTCR
.395d86	28		plp		                PLP
.395d87	2b		pld		                PLD
.395d88	ab		plb		                PLB
.395d89	6b		rtl		                RTL
.395d8a					SDC_WAITBUSY
.395d8a	08		php		                PHP
.395d8b	e2 20		sep #$20	                SEP #$20        ; set A short
.395d8d	af 04 ea af	lda $afea04	wait_xact       LDA @l SDC_TRANS_STATUS_REG         ; Wait for the transaction to complete
.395d91	29 01		and #$01	                AND #SDC_TRANS_BUSY
.395d93	c9 01		cmp #$01	                CMP #SDC_TRANS_BUSY
.395d95	f0 f6		beq $395d8d	                BEQ wait_xact
.395d97	28		plp		                PLP
.395d98	6b		rtl		                RTL
.395d99					SDC_RESET
.395d99	08		php		                PHP
.395d9a	e2 20		sep #$20	                SEP #$20        ; set A short
.395d9c	a9 01		lda #$01	                LDA #1
.395d9e	8f 01 ea af	sta $afea01	                STA @l SDC_CONTROL_REG
.395da2	28		plp		                PLP
.395da3	6b		rtl		                RTL
.395da4					SDC_INIT
.395da4	0b		phd		                PHD
.395da5	8b		phb		                PHB
.395da6	08		php		                PHP
.395da7	48		pha		                PHA             ; begin setdbr macro
.395da8	08		php		                PHP
.395da9	e2 20		sep #$20	                SEP #$20        ; set A short
.395dab	a9 00		lda #$00	                LDA #0
.395dad	48		pha		                PHA
.395dae	ab		plb		                PLB
.395daf	28		plp		                PLP
.395db0	68		pla		                PLA             ; end setdbr macro
.395db1	48		pha		                PHA             ; begin setdp macro
.395db2	08		php		                PHP
.395db3	c2 20		rep #$20	                REP #$20        ; set A long
.395db5	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395db8	5b		tcd		                TCD
.395db9	28		plp		                PLP
.395dba	68		pla		                PLA             ; end setdp macro
.395dbb	e2 20		sep #$20	                SEP #$20        ; set A short
.395dbd	a9 01		lda #$01	start_trans     LDA #SDC_TRANS_INIT_SD
.395dbf	8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG           ; Set Init SD
.395dc3	a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.395dc5	8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.395dc9	22 8a 5d 39	jsl $395d8a	                JSL SDC_WAITBUSY                    ; Wait for initialization to complete
.395dcd	af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395dd1	d0 07		bne $395dda	                BNE ret_error                       ; Is there one? Process the error
.395dd3	64 00		stz $0320	ret_success     STZ BIOS_STATUS
.395dd5	28		plp		                PLP
.395dd6	ab		plb		                PLB
.395dd7	2b		pld		                PLD
.395dd8	38		sec		                SEC
.395dd9	6b		rtl		                RTL
.395dda	8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.395ddd	a9 8b		lda #$8b	                LDA #BIOS_ERR_NOTINIT
.395ddf	85 00		sta $0320	set_error       STA BIOS_STATUS
.395de1	28		plp		                PLP
.395de2	ab		plb		                PLB
.395de3	2b		pld		                PLD
.395de4	18		clc		                CLC
.395de5	6b		rtl		                RTL
.395de6					SDC_GETBLOCK
.395de6	0b		phd		                PHD
.395de7	8b		phb		                PHB
.395de8	08		php		                PHP
.395de9	48		pha		                PHA             ; begin setdbr macro
.395dea	08		php		                PHP
.395deb	e2 20		sep #$20	                SEP #$20        ; set A short
.395ded	a9 00		lda #$00	                LDA #0
.395def	48		pha		                PHA
.395df0	ab		plb		                PLB
.395df1	28		plp		                PLP
.395df2	68		pla		                PLA             ; end setdbr macro
.395df3	48		pha		                PHA             ; begin setdp macro
.395df4	08		php		                PHP
.395df5	c2 20		rep #$20	                REP #$20        ; set A long
.395df7	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395dfa	5b		tcd		                TCD
.395dfb	28		plp		                PLP
.395dfc	68		pla		                PLA             ; end setdp macro
.395dfd	e2 20		sep #$20	                SEP #$20        ; set A short
.395dff	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.395e03	09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.395e05	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395e09	a9 00		lda #$00	                LDA #0
.395e0b	8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.395e0f	a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to read
.395e11	0a		asl a		                ASL A
.395e12	8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.395e16	a5 03		lda $0323	                LDA BIOS_LBA+1
.395e18	2a		rol a		                ROL A
.395e19	8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.395e1d	a5 04		lda $0324	                LDA BIOS_LBA+2
.395e1f	2a		rol a		                ROL A
.395e20	8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.395e24	a9 02		lda #$02	                LDA #SDC_TRANS_READ_BLK             ; Set the transaction to READ
.395e26	8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.395e2a	a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.395e2c	8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.395e30	22 8a 5d 39	jsl $395d8a	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.395e34	af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395e38	d0 36		bne $395e70	                BNE ret_error                       ; Is there one? Process the error
.395e3a	e2 20		sep #$20	                SEP #$20        ; set A short
.395e3c	af 13 ea af	lda $afea13	                LDA @l SDC_RX_FIFO_DATA_CNT_LO      ; Record the number of bytes read
.395e40	85 0a		sta $032a	                STA BIOS_FIFO_COUNT
.395e42	af 12 ea af	lda $afea12	                LDA @l SDC_RX_FIFO_DATA_CNT_HI
.395e46	85 0b		sta $032b	                STA BIOS_FIFO_COUNT+1
.395e48	c2 10		rep #$10	                REP #$10        ; set X long
.395e4a	a0 00 00	ldy #$0000	                LDY #0
.395e4d	af 10 ea af	lda $afea10	loop_rd         LDA @l SDC_RX_FIFO_DATA_REG         ; Get the byte...
.395e51	97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y               ; Save it to the buffer
.395e53	c8		iny		                INY                                 ; Advance to the next byte
.395e54	c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.395e57	d0 f4		bne $395e4d	                BNE loop_rd                         ; No: keep reading
.395e59	af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395e5d	d0 11		bne $395e70	                BNE ret_error                       ; Is there one? Process the error
.395e5f	64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.395e61	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395e65	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395e67	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395e6b	28		plp		                PLP
.395e6c	ab		plb		                PLB
.395e6d	2b		pld		                PLD
.395e6e	38		sec		                SEC
.395e6f	6b		rtl		                RTL
.395e70	8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.395e73	a9 82		lda #$82	                LDA #BIOS_ERR_READ
.395e75	85 00		sta $0320	                STA BIOS_STATUS
.395e77	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395e7b	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395e7d	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395e81	28		plp		                PLP
.395e82	ab		plb		                PLB
.395e83	2b		pld		                PLD
.395e84	18		clc		                CLC
.395e85	6b		rtl		                RTL
.395e86					SDC_PUTBLOCK
.395e86	0b		phd		                PHD
.395e87	8b		phb		                PHB
.395e88	08		php		                PHP
.395e89	48		pha		                PHA             ; begin setdbr macro
.395e8a	08		php		                PHP
.395e8b	e2 20		sep #$20	                SEP #$20        ; set A short
.395e8d	a9 00		lda #$00	                LDA #0
.395e8f	48		pha		                PHA
.395e90	ab		plb		                PLB
.395e91	28		plp		                PLP
.395e92	68		pla		                PLA             ; end setdbr macro
.395e93	48		pha		                PHA             ; begin setdp macro
.395e94	08		php		                PHP
.395e95	c2 20		rep #$20	                REP #$20        ; set A long
.395e97	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395e9a	5b		tcd		                TCD
.395e9b	28		plp		                PLP
.395e9c	68		pla		                PLA             ; end setdp macro
.395e9d	e2 20		sep #$20	                SEP #$20        ; set A short
.395e9f	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.395ea3	09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.395ea5	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395ea9	c2 10		rep #$10	                REP #$10        ; set X long
.395eab	a0 00 00	ldy #$0000	                LDY #0
.395eae	b7 06		lda [$0326],y	loop_wr         LDA [BIOS_BUFF_PTR],Y               ; Get the byte...
.395eb0	8f 20 ea af	sta $afea20	                STA @l SDC_TX_FIFO_DATA_REG         ; Save it to the SDC
.395eb4	c8		iny		                INY                                 ; Advance to the next byte
.395eb5	c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.395eb8	d0 f4		bne $395eae	                BNE loop_wr                         ; No: keep writing
.395eba	a9 00		lda #$00	                LDA #0
.395ebc	8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.395ec0	a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to write
.395ec2	0a		asl a		                ASL A
.395ec3	8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.395ec7	a5 03		lda $0323	                LDA BIOS_LBA+1
.395ec9	2a		rol a		                ROL A
.395eca	8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.395ece	a5 04		lda $0324	                LDA BIOS_LBA+2
.395ed0	2a		rol a		                ROL A
.395ed1	8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.395ed5	a9 03		lda #$03	                LDA #SDC_TRANS_WRITE_BLK            ; Set the transaction to WRITE
.395ed7	8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.395edb	a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.395edd	8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.395ee1	22 8a 5d 39	jsl $395d8a	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.395ee5	af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395ee9	d0 11		bne $395efc	                BNE ret_error                       ; Is there one? Process the error
.395eeb	64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.395eed	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395ef1	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395ef3	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395ef7	28		plp		                PLP
.395ef8	ab		plb		                PLB
.395ef9	2b		pld		                PLD
.395efa	38		sec		                SEC
.395efb	6b		rtl		                RTL
.395efc	8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.395eff	a9 82		lda #$82	                LDA #BIOS_ERR_READ
.395f01	85 00		sta $0320	                STA BIOS_STATUS
.395f03	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395f07	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395f09	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395f0d	28		plp		                PLP
.395f0e	ab		plb		                PLB
.395f0f	2b		pld		                PLD
.395f10	18		clc		                CLC
.395f11	6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\fdc_library.asm

=4295454				FDC_MOTOR_TIME = 4295454        ; Time to wait for the motor to come on: 300ms
=2147727				FDC_SEEK_TIME = 2147727         ; Time to wait for a seek to happen: 150ms
=900					FDC_MOTOR_ON_TIME = 60*15       ; Time (in SOF interrupt counts) for the motor to stay on: ~15s?
=30					FDC_WAIT_TIME = 30              ; Time (in SOF interrupt counts) to allow for a waiting loop to continue
=13					BPB_SECPERCLUS12_OFF = 13       ; Offset to sectors per cluster in a FAT12 boot sector
=17					BPB_ROOT_MAX_ENTRY12_OFF = 17   ; Offset to the maximum number of entries in the root directory in FAT12 boot sector
=22					BPB_SECPERFAT12_OFF = 22        ; Offset to sectors per FAT on a FAT12 boot sector
.395f12					FDC_TEST
.395f12	8b		phb		                    PHB
.395f13	0b		phd		                    PHD
.395f14	08		php		                    PHP
.395f15	48		pha		                PHA             ; begin setdbr macro
.395f16	08		php		                PHP
.395f17	e2 20		sep #$20	                SEP #$20        ; set A short
.395f19	a9 00		lda #$00	                LDA #0
.395f1b	48		pha		                PHA
.395f1c	ab		plb		                PLB
.395f1d	28		plp		                PLP
.395f1e	68		pla		                PLA             ; end setdbr macro
.395f1f	48		pha		                PHA             ; begin setdp macro
.395f20	08		php		                PHP
.395f21	c2 20		rep #$20	                REP #$20        ; set A long
.395f23	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395f26	5b		tcd		                TCD
.395f27	28		plp		                PLP
.395f28	68		pla		                PLA             ; end setdp macro
.395f29	e2 20		sep #$20	                SEP #$20        ; set A short
.395f2b	a9 f0		lda #$f0	                    LDA #$F0
.395f2d	8d 1e 00	sta $001e	                    STA @w CURCOLOR
.395f30	22 42 0b 39	jsl $390b42	                    JSL ICLRSCREEN
.395f34	22 66 09 39	jsl $390966	                    JSL ICSRHOME
.395f38	c2 30		rep #$30	                REP #$30        ; set A&X long
.395f3a	22 08 62 39	jsl $396208	                    JSL FDC_Init
.395f3e	b0 03		bcs $395f43	                    BCS init_ok
.395f40	82 20 00	brl $395f63	                    BRL motor_off
.395f43	22 07 69 39	jsl $396907	init_ok             JSL FDC_CHK_MEDIA
.395f47	90 03		bcc $395f4c	                    BCC no_media
.395f49	82 03 00	brl $395f4f	                    BRL is_ok1
.395f4c					no_media
.395f4c	82 14 00	brl $395f63	                    BRL motor_off
.395f4f	22 9a 67 39	jsl $39679a	is_ok1              JSL FDC_MOUNT
.395f53	90 03		bcc $395f58	                    BCC mount_err
.395f55	82 03 00	brl $395f5b	                    BRL is_ok2
.395f58					mount_err
.395f58	82 08 00	brl $395f63	                    BRL motor_off
.395f5b	22 6f 5f 39	jsl $395f6f	is_ok2              JSL FDC_TEST_PUTBLOCK
.395f5f	b0 02		bcs $395f63	                    BCS all_ok
.395f61	80 00		bra $395f63	                    BRA motor_off
.395f63					all_ok
.395f63	22 6c 10 38	jsl $38106c	motor_off           JSL PRINTCR
.395f67	22 b8 62 39	jsl $3962b8	                    JSL FDC_Motor_Off
.395f6b	28		plp		                    PLP
.395f6c	2b		pld		                    PLD
.395f6d	ab		plb		                    PLB
.395f6e	6b		rtl		                    RTL
.395f6f					FDC_TEST_PUTBLOCK
.395f6f	e2 20		sep #$20	                SEP #$20        ; set A short
.395f71	a9 00		lda #$00	                    LDA #0                          ; Initialize the data to write to the drive
.395f73	a2 00 00	ldx #$0000	                    LDX #0
.395f76	9f 00 00 03	sta $030000,x	init_loop           STA @l TEST_BUFFER,X
.395f7a	1a		inc a		                    INC A
.395f7b	e8		inx		                    INX
.395f7c	e0 00 02	cpx #$0200	                    CPX #512
.395f7f	d0 f5		bne $395f76	                    BNE init_loop
.395f81	c2 20		rep #$20	                REP #$20        ; set A long
.395f83	a9 00 00	lda #$0000	                    LDA #<>TEST_BUFFER              ; Set BIOS_BUFF_PTR
.395f86	8f 26 03 00	sta $000326	                    STA @l BIOS_BUFF_PTR
.395f8a	a9 03 00	lda #$0003	                    LDA #`TEST_BUFFER
.395f8d	8f 28 03 00	sta $000328	                    STA @l BIOS_BUFF_PTR+2
.395f91	a9 64 00	lda #$0064	                    LDA #100                        ; Set LBA = 100
.395f94	8f 22 03 00	sta $000322	                    STA @l BIOS_LBA
.395f98	a9 00 00	lda #$0000	                    LDA #0
.395f9b	8f 24 03 00	sta $000324	                    STA @l BIOS_LBA+2
.395f9f	22 2e 67 39	jsl $39672e	                    JSL FDC_PUTBLOCK                ; Try to write the data
.395fa3	6b		rtl		                    RTL
>395fa4	40 46 3a 53 41 4d 50 4c		BOOT_FILE           .null "@F:SAMPLE.PGX Hello, world!"
>395fac	45 2e 50 47 58 20 48 65 6c 6c 6f 2c 20 77 6f 72
>395fbc	6c 64 21 00
=$020000				TEST_LOCATION = $020000                     ; Location to try to load it
=$030000				TEST_BUFFER = $030000                       ; Temporary location for a cluster buffer
.395fc0					FDC_Check_RQM
.395fc0	0b		phd		                    PHD
.395fc1	08		php		                    PHP
.395fc2	48		pha		                PHA             ; begin setdp macro
.395fc3	08		php		                PHP
.395fc4	c2 20		rep #$20	                REP #$20        ; set A long
.395fc6	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395fc9	5b		tcd		                TCD
.395fca	28		plp		                PLP
.395fcb	68		pla		                PLA             ; end setdp macro
.395fcc	e2 20		sep #$20	                SEP #$20        ; set A short
.395fce	a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395fd0	22 06 41 39	jsl $394106	                    JSL ISETTIMEOUT
.395fd4	a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395fd6	30 12		bmi $395fea	                    BMI time_out            ; If so: signal a time out
.395fd8	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395fdc	89 80		bit #$80	                    BIT #FDC_MSR_RQM
.395fde	f0 f4		beq $395fd4	                    BEQ loop
.395fe0	a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395fe2	22 06 41 39	jsl $394106	                    JSL ISETTIMEOUT
.395fe6	28		plp		                    PLP
.395fe7	2b		pld		                    PLD
.395fe8	38		sec		                    SEC
.395fe9	60		rts		                    RTS
.395fea	28		plp		time_out            PLP
.395feb	2b		pld		                    PLD
.395fec	18		clc		                    CLC
.395fed	60		rts		                    RTS
.395fee					FDC_Check_DRV0_BSY
.395fee	0b		phd		                    PHD
.395fef	08		php		                    PHP
.395ff0	48		pha		                PHA             ; begin setdp macro
.395ff1	08		php		                PHP
.395ff2	c2 20		rep #$20	                REP #$20        ; set A long
.395ff4	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395ff7	5b		tcd		                TCD
.395ff8	28		plp		                PLP
.395ff9	68		pla		                PLA             ; end setdp macro
.395ffa	e2 20		sep #$20	                SEP #$20        ; set A short
.395ffc	a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395ffe	22 06 41 39	jsl $394106	                    JSL ISETTIMEOUT
.396002	a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.396004	30 12		bmi $396018	                    BMI time_out            ; If so: signal a time out
.396006	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.39600a	89 01		bit #$01	                    BIT #FDC_MSR_DRV0BSY
.39600c	d0 f4		bne $396002	                    BNE loop
.39600e	a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.396010	22 06 41 39	jsl $394106	                    JSL ISETTIMEOUT
.396014	28		plp		                    PLP
.396015	2b		pld		                    PLD
.396016	38		sec		                    SEC
.396017	60		rts		                    RTS
.396018	28		plp		time_out            PLP
.396019	2b		pld		                    PLD
.39601a	18		clc		                    CLC
.39601b	60		rts		                    RTS
.39601c					FDC_Check_CMD_BSY
.39601c	0b		phd		                    PHD
.39601d	08		php		                    PHP
.39601e	48		pha		                PHA             ; begin setdp macro
.39601f	08		php		                PHP
.396020	c2 20		rep #$20	                REP #$20        ; set A long
.396022	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396025	5b		tcd		                TCD
.396026	28		plp		                PLP
.396027	68		pla		                PLA             ; end setdp macro
.396028	e2 20		sep #$20	                SEP #$20        ; set A short
.39602a	a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.39602c	22 06 41 39	jsl $394106	                    JSL ISETTIMEOUT
.396030	a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.396032	30 12		bmi $396046	                    BMI time_out            ; If so: signal a time out
.396034	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.396038	89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.39603a	d0 f4		bne $396030	                    BNE loop
.39603c	a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.39603e	22 06 41 39	jsl $394106	                    JSL ISETTIMEOUT
.396042	28		plp		                    PLP
.396043	2b		pld		                    PLD
.396044	38		sec		                    SEC
.396045	60		rts		                    RTS
.396046	28		plp		time_out            PLP
.396047	2b		pld		                    PLD
.396048	18		clc		                    CLC
.396049	60		rts		                    RTS
.39604a					FDC_Can_Read_Data
.39604a	0b		phd		                    PHD
.39604b	08		php		                    PHP
.39604c	48		pha		                PHA             ; begin setdp macro
.39604d	08		php		                PHP
.39604e	c2 20		rep #$20	                REP #$20        ; set A long
.396050	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396053	5b		tcd		                TCD
.396054	28		plp		                PLP
.396055	68		pla		                PLA             ; end setdp macro
.396056	e2 20		sep #$20	                SEP #$20        ; set A short
.396058	a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.39605a	22 06 41 39	jsl $394106	                    JSL ISETTIMEOUT
.39605e	a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.396060	30 14		bmi $396076	                    BMI time_out            ; If so: signal a time out
.396062	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.396066	29 40		and #$40	                    AND #FDC_MSR_DIO
.396068	c9 40		cmp #$40	                    CMP #FDC_MSR_DIO
.39606a	d0 f2		bne $39605e	                    BNE loop
.39606c	a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.39606e	22 06 41 39	jsl $394106	                    JSL ISETTIMEOUT
.396072	28		plp		                    PLP
.396073	2b		pld		                    PLD
.396074	38		sec		                    SEC
.396075	60		rts		                    RTS
.396076	28		plp		time_out            PLP
.396077	2b		pld		                    PLD
.396078	18		clc		                    CLC
.396079	60		rts		                    RTS
.39607a					FDC_CAN_WRITE
.39607a	0b		phd		                    PHD
.39607b	08		php		                    PHP
.39607c	48		pha		                PHA             ; begin setdp macro
.39607d	08		php		                PHP
.39607e	c2 20		rep #$20	                REP #$20        ; set A long
.396080	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396083	5b		tcd		                TCD
.396084	28		plp		                PLP
.396085	68		pla		                PLA             ; end setdp macro
.396086	e2 20		sep #$20	                SEP #$20        ; set A short
.396088	a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.39608a	22 06 41 39	jsl $394106	                    JSL ISETTIMEOUT
.39608e	a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.396090	30 14		bmi $3960a6	                    BMI time_out            ; If so: signal a time out
.396092	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.396096	29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.396098	c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.39609a	d0 f2		bne $39608e	                    BNE loop
.39609c	a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.39609e	22 06 41 39	jsl $394106	                    JSL ISETTIMEOUT
.3960a2	28		plp		                    PLP
.3960a3	2b		pld		                    PLD
.3960a4	38		sec		                    SEC
.3960a5	60		rts		                    RTS
.3960a6	28		plp		time_out            PLP
.3960a7	2b		pld		                    PLD
.3960a8	18		clc		                    CLC
.3960a9	60		rts		                    RTS
.3960aa					FDC_DELAY_10MS
.3960aa	da		phx		                    PHX
.3960ab	08		php		                    PHP
.3960ac	c2 10		rep #$10	                REP #$10        ; set X long
.3960ae	a2 80 3e	ldx #$3e80	                    LDX #16000          ; Wait for around 10ms
.3960b1	ea		nop		loop                NOP                 ; Each iteration should take 9 cycles
.3960b2	ca		dex		                    DEX
.3960b3	e0 00 00	cpx #$0000	                    CPX #0
.3960b6	d0 f9		bne $3960b1	                    BNE loop
.3960b8	28		plp		                    PLP
.3960b9	fa		plx		                    PLX
.3960ba	6b		rtl		                    RTL
.3960bb					FDC_COMMAND
.3960bb	da		phx		                    PHX
.3960bc	8b		phb		                    PHB
.3960bd	0b		phd		                    PHD
.3960be	08		php		                    PHP
.3960bf	48		pha		                PHA             ; begin setdbr macro
.3960c0	08		php		                PHP
.3960c1	e2 20		sep #$20	                SEP #$20        ; set A short
.3960c3	a9 00		lda #$00	                LDA #0
.3960c5	48		pha		                PHA
.3960c6	ab		plb		                PLB
.3960c7	28		plp		                PLP
.3960c8	68		pla		                PLA             ; end setdbr macro
.3960c9	48		pha		                PHA             ; begin setdp macro
.3960ca	08		php		                PHP
.3960cb	c2 20		rep #$20	                REP #$20        ; set A long
.3960cd	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3960d0	5b		tcd		                TCD
.3960d1	28		plp		                PLP
.3960d2	68		pla		                PLA             ; end setdp macro
.3960d3	22 aa 60 39	jsl $3960aa	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms
.3960d7	e2 30		sep #$30	                SEP #$30        ; set A&X short
.3960d9	a2 00		ldx #$00	                    LDX #0
.3960db	a9 00		lda #$00	                    LDA #0
.3960dd	9d 10 05	sta $0510,x	clr_results         STA FDC_RESULTS,X                       ; Clear the result buffer
.3960e0	e8		inx		                    INX
.3960e1	e0 10		cpx #$10	                    CPX #16
.3960e3	d0 f8		bne $3960dd	                    BNE clr_results
.3960e5	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Validate we can send a command
.3960e9	29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.3960eb	c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.3960ed	f0 04		beq $3960f3	                    BEQ start_send                          ; If so, start sending
.3960ef	22 08 62 39	jsl $396208	fdc_reset           JSL FDC_INIT                            ; Reset the FDC
.3960f3					start_send
.3960f3	e2 10		sep #$10	                SEP #$10        ; set X short
.3960f5	a2 00		ldx #$00	                    LDX #0
.3960f7	20 c0 5f	jsr $395fc0	send_loop           JSR FDC_Check_RQM                       ; Wait until we can write
.3960fa	b0 03		bcs $3960ff	                    BCS send_param
.3960fc	82 5e 00	brl $39615d	                    BRL time_out                            ; If there was a timeout, flag the time out
.3960ff	bd 00 05	lda $0500,x	send_param          LDA FDC_PARAMETERS,X                    ; Get the parameter/command byte to write
.396102	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; Send it
.396106	22 aa 60 39	jsl $3960aa	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms for things to settle
.39610a	e8		inx		                    INX                                     ; Advance to the next byte
.39610b	ec 30 05	cpx $0530	                    CPX FDC_PARAM_NUM
.39610e	d0 e7		bne $3960f7	                    BNE send_loop                           ; Keep sending until we've sent them all
.396110	ad 33 05	lda $0533	                    LDA FDC_EXPECT_DAT                      ; Check the data expectation byte
.396113	d0 03		bne $396118	                    BNE chk_data_dir
.396115	82 80 00	brl $396198	                    BRL result_phase                        ; If 0: we just want a result
.396118	10 3c		bpl $396156	chk_data_dir        BPL rd_data                             ; If >0: we want to read data
.39611a					wr_data
.39611a	a5 0b		lda $030b	wr_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.39611c	30 03		bmi $396121	                    BMI wr_chk_rqm
.39611e	82 3c 00	brl $39615d	                    BRL time_out                            ; If not, raise an error
.396121	af f4 13 af	lda $af13f4	wr_chk_rqm          LDA @l SIO_FDC_MSR                      ; Wait for ready to write
.396125	89 80		bit #$80	                    BIT #FDC_MSR_RQM
.396127	f0 f1		beq $39611a	                    BEQ wr_data_rdy
.396129	89 20		bit #$20	                    BIT #FDC_MSR_NONDMA                     ; Check if in execution mode
.39612b	d0 03		bne $396130	                    BNE wr_data_phase                       ; If so: transfer the data
.39612d	82 68 00	brl $396198	                    BRL result_phase                          ; If not: it's an error
.396130					wr_data_phase
.396130	c2 10		rep #$10	                REP #$10        ; set X long
.396132	a0 00 00	ldy #$0000	                    LDY #0
.396135	a5 0b		lda $030b	wr_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.396137	30 03		bmi $39613c	                    BMI wr_chk_nondma
.396139	82 21 00	brl $39615d	                    BRL time_out                            ; If not, raise an error
.39613c	af f4 13 af	lda $af13f4	wr_chk_nondma       LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.396140	89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.396142	f0 54		beq $396198	                    BEQ result_phase                        ; If not: break out to result phase
.396144	89 80		bit #$80	                    BIT #FDC_MSR_RQM                        ; Check if we can read data
.396146	f0 ed		beq $396135	                    BEQ wr_data_loop                        ; No: keep waiting
.396148	b7 26		lda [$0326],y	                    LDA [BIOS_BUFF_PTR],Y                   ; Get the data byte
.39614a	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; And save it to the buffer
.39614e	c8		iny		                    INY                                     ; Move to the next position
.39614f	c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.396152	d0 e1		bne $396135	                    BNE wr_data_loop                        ; If not at the end, keep fetching
.396154	80 42		bra $396198	                    BRA result_phase                        ; ready for the result phase
.396156	20 4a 60	jsr $39604a	rd_data             JSR FDC_Can_Read_Data
.396159	a5 0b		lda $030b	rd_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.39615b	30 07		bmi $396164	                    BMI chk_rd_rdy                          ; If so, check to see if the data is ready
.39615d					time_out
.39615d	e2 20		sep #$20	                SEP #$20        ; set A short
.39615f	a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT                   ; Otherwise: throw a BIOS_ERR_TIMEOUT error
.396161	82 9c 00	brl $396200	                    BRL pass_error
.396164	af f4 13 af	lda $af13f4	chk_rd_rdy          LDA @l SIO_FDC_MSR                      ; Wait for data to be ready
.396168	29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.39616a	c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.39616c	d0 eb		bne $396159	                    BNE rd_data_rdy
.39616e	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.396172	89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.396174	d0 03		bne $396179	                    BNE rd_data_phase                       ; If so: transfer the data
.396176	82 83 00	brl $3961fc	                    BRL error                               ; If not: it's an error
.396179					rd_data_phase
.396179	c2 10		rep #$10	                REP #$10        ; set X long
.39617b	a0 00 00	ldy #$0000	                    LDY #0
.39617e	a5 0b		lda $030b	rd_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.396180	10 db		bpl $39615d	                    BPL time_out                            ; If not: throw a timeout error
.396182	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Wait for the next byte to be ready
.396186	29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.396188	c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.39618a	d0 f2		bne $39617e	                    BNE rd_data_loop
.39618c	af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Get the data byte
.396190	97 26		sta [$0326],y	                    STA [BIOS_BUFF_PTR],Y                   ; And save it to the buffer
.396192	c8		iny		                    INY                                     ; Move to the next position
.396193	c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.396196	d0 e6		bne $39617e	                    BNE rd_data_loop                        ; If not at the end, keep fetching
.396198	ad 32 05	lda $0532	result_phase        LDA FDC_RESULT_NUM                      ; If no results are expected...
.39619b	f0 34		beq $3961d1	                    BEQ chk_busy                            ; Then we're done
.39619d	e2 10		sep #$10	                SEP #$10        ; set X short
.39619f	a2 00		ldx #$00	                    LDX #0
.3961a1	a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME                      ; Set the watchdog timer
.3961a3	22 06 41 39	jsl $394106	                    JSL ISETTIMEOUT
.3961a7	20 4a 60	jsr $39604a	result_loop         JSR FDC_Can_Read_Data                   ; Wait until we can read
.3961aa	90 b1		bcc $39615d	                    BCC time_out                            ; If there was a time out, raise an error
.3961ac	af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Yes: get the data
.3961b0	20 4a 60	jsr $39604a	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.3961b3	90 a8		bcc $39615d	                    BCC time_out                            ; If there was a time out, raise an error
.3961b5	af f5 13 af	lda $af13f5	read_result         LDA @l SIO_FDC_DTA                      ; Yes: get the data
.3961b9	9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X                       ; Save it to the result buffer
.3961bc	20 c0 5f	jsr $395fc0	                    JSR FDC_Check_RQM
.3961bf	90 9c		bcc $39615d	                    BCC time_out                            ; If there was a time out, flag the error
.3961c1	af f4 13 af	lda $af13f4	rd_chk_1            LDA @l SIO_FDC_MSR
.3961c5	29 50		and #$50	                    AND #FDC_MSR_DIO | FDC_MSR_CMDBSY
.3961c7	c9 50		cmp #$50	                    CMP #FDC_MSR_DIO | FDC_MSR_CMDBSY
.3961c9	d0 06		bne $3961d1	                    BNE chk_busy
.3961cb	e8		inx		                    INX                                     ; Move to the next result positions
.3961cc	ec 32 05	cpx $0532	                    CPX FDC_RESULT_NUM
.3961cf	d0 e4		bne $3961b5	                    BNE read_result                         ; And keep looping until we've read all
.3961d1					chk_busy
.3961d1	c2 10		rep #$10	                REP #$10        ; set X long
.3961d3	a2 0a 00	ldx #$000a	                    LDX #10                                 ; Wait 10ms (I guess?)
.3961d6	22 19 16 39	jsl $391619	                    JSL ILOOP_MS
.3961da	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check the command busy bit
.3961de	89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.3961e0	f0 12		beq $3961f4	                    BEQ done                                ; If not set: we're done
.3961e2	20 4a 60	jsr $39604a	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.3961e5	b0 03		bcs $3961ea	                    BCS get_result_byte
.3961e7	82 73 ff	brl $39615d	                    BRL time_out                            ; If there was a time out, flag the error
.3961ea	af f5 13 af	lda $af13f5	get_result_byte     LDA @l SIO_FDC_DTA                      ; Read the data
.3961ee	9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X
.3961f1	e8		inx		                    INX
.3961f2	80 dd		bra $3961d1	                    BRA chk_busy                            ; And keep checking
.3961f4					done
.3961f4	64 20		stz $0320	                    STZ BIOS_STATUS
.3961f6	28		plp		                    PLP
.3961f7	2b		pld		                    PLD
.3961f8	ab		plb		                    PLB
.3961f9	fa		plx		                    PLX
.3961fa	38		sec		                    SEC
.3961fb	6b		rtl		                    RTL
.3961fc					error
.3961fc	e2 20		sep #$20	                SEP #$20        ; set A short
.3961fe	a9 85		lda #$85	                    LDA #BIOS_ERR_CMD
.396200	85 20		sta $0320	pass_error          STA BIOS_STATUS
.396202	28		plp		                    PLP
.396203	2b		pld		                    PLD
.396204	ab		plb		                    PLB
.396205	fa		plx		                    PLX
.396206	18		clc		                    CLC
.396207	6b		rtl		                    RTL
.396208					FDC_Init
.396208	08		php		                    PHP
.396209	c2 10		rep #$10	                REP #$10        ; set X long
.39620b	e2 20		sep #$20	                SEP #$20        ; set A short
.39620d	a9 00		lda #$00	                    LDA #0
.39620f	8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.396213	a2 e8 03	ldx #$03e8	                    LDX #1000                   ; Wait
.396216	a0 00 00	ldy #$0000	                    LDY #0
.396219	22 26 16 39	jsl $391626	                    JSL IDELAY
.39621d	a9 04		lda #$04	                    LDA #FDC_DOR_NRESET         ; Reset the FDC
.39621f	8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.396223	ea		nop		                    NOP
.396224	ea		nop		                    NOP
.396225	ea		nop		                    NOP
.396226	ea		nop		                    NOP
.396227	a9 00		lda #$00	                    LDA #$00                    ; Make sure the Speed and Compensation has been set
.396229	8f f4 13 af	sta $af13f4	                    STA @l SIO_FDC_DSR
.39622d	a9 00		lda #$00	                    LDA #$00                    ; Precompensation set to 0
.39622f	8f f7 13 af	sta $af13f7	                    STA @l SIO_FDC_CCR
.396233	a2 8f c5	ldx #$c58f	                    LDX #<>FDC_SEEK_TIME
.396236	a0 20 00	ldy #$0020	                    LDY #`FDC_SEEK_TIME
.396239	22 26 16 39	jsl $391626	                    JSL IDELAY
.39623d	22 18 63 39	jsl $396318	                    JSL FDC_Sense_Int_Status
.396241	90 25		bcc $396268	                    BCC pass_failure
.396243	22 18 63 39	jsl $396318	                    JSL FDC_Sense_Int_Status
.396247	90 1f		bcc $396268	                    BCC pass_failure
.396249	22 18 63 39	jsl $396318	                    JSL FDC_Sense_Int_Status
.39624d	90 19		bcc $396268	                    BCC pass_failure
.39624f	22 18 63 39	jsl $396318	                    JSL FDC_Sense_Int_Status
.396253	90 13		bcc $396268	                    BCC pass_failure
.396255	22 da 63 39	jsl $3963da	                    JSL FDC_Configure_Command
.396259	90 0d		bcc $396268	                    BCC pass_failure
.39625b	22 81 63 39	jsl $396381	                    JSL FDC_Specify_Command
.39625f	90 07		bcc $396268	                    BCC pass_failure
.396261	22 84 62 39	jsl $396284	                    JSL FDC_Motor_On
.396265	28		plp		                    PLP
.396266	38		sec		                    SEC
.396267	6b		rtl		                    RTL
.396268	28		plp		pass_failure        PLP
.396269	18		clc		                    CLC
.39626a	6b		rtl		                    RTL
.39626b					FDC_MOTOR_NEEDED
.39626b	08		php		                    PHP
.39626c	c2 20		rep #$20	                REP #$20        ; set A long
.39626e	78		sei		                    SEI                         ; Turn off interrupts
.39626f	a9 84 03	lda #$0384	                    LDA #FDC_MOTOR_ON_TIME      ; Reset the FDC timeout clock
.396272	8f 4e a0 38	sta $38a04e	                    STA @l FDC_MOTOR_TIMER
.396276	e2 20		sep #$20	                SEP #$20        ; set A short
.396278	af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.39627c	29 fe		and #$fe	                    AND #~FNX0_INT00_SOF        ; Enable the SOF interrupt
.39627e	8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.396282	28		plp		                    PLP
.396283	6b		rtl		                    RTL
.396284					FDC_Motor_On
.396284	08		php		                    PHP
.396285	22 6b 62 39	jsl $39626b	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.396289	e2 20		sep #$20	                SEP #$20        ; set A short
.39628b	af f2 13 af	lda $af13f2	                    LDA @l SIO_FDC_DOR          ; Check to see if the motor is already on
.39628f	89 10		bit #$10	                    BIT #FDC_DOR_MOT0
.396291	d0 1f		bne $3962b2	                    BNE done                    ; If so: skip
.396293	a9 14		lda #$14	                    LDA #FDC_DOR_MOT0 | FDC_DOR_NRESET
.396295	8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.396299	20 c0 5f	jsr $395fc0	                    JSR FDC_Check_RQM           ; Make sure we can leave knowing that everything set properly
.39629c	90 17		bcc $3962b5	                    BCC time_out
.39629e	a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.3962a1	a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.3962a4	22 26 16 39	jsl $391626	                    JSL IDELAY
.3962a8	af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.3962ac	09 80		ora #$80	                    ORA #$80                    ; Flag that the motor should be on
.3962ae	8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.3962b2	28		plp		done                PLP
.3962b3	38		sec		                    SEC
.3962b4	6b		rtl		                    RTL
.3962b5	28		plp		time_out            PLP                         ; Return a timeout error
.3962b6	18		clc		                    CLC
.3962b7	6b		rtl		                    RTL
.3962b8					FDC_Motor_Off
.3962b8	08		php		                    PHP
.3962b9	e2 20		sep #$20	                SEP #$20        ; set A short
.3962bb	a9 04		lda #$04	                    LDA #FDC_DOR_NRESET
.3962bd	8f f2 13 af	sta $af13f2	                    STA @L SIO_FDC_DOR
.3962c1	c2 20		rep #$20	                REP #$20        ; set A long
.3962c3	78		sei		                    SEI                         ; Turn off interrupts
.3962c4	a9 00 00	lda #$0000	                    LDA #0                      ; Set FDC motor timeout counter to 0 to disable it
.3962c7	8f 4e a0 38	sta $38a04e	                    STA @l FDC_MOTOR_TIMER
.3962cb	e2 20		sep #$20	                SEP #$20        ; set A short
.3962cd	af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.3962d1	09 01		ora #$01	                    ORA #FNX0_INT00_SOF         ; Disable the SOF interrupt
.3962d3	8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.3962d7	af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.3962db	29 7f		and #$7f	                    AND #$7F                    ; Flag that the motor should be off
.3962dd	8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.3962e1	28		plp		                    PLP
.3962e2	6b		rtl		                    RTL
.3962e3					FDC_Recalibrate_Command
.3962e3	0b		phd		                    PHD
.3962e4	08		php		                    PHP
.3962e5	48		pha		                PHA             ; begin setdp macro
.3962e6	08		php		                PHP
.3962e7	c2 20		rep #$20	                REP #$20        ; set A long
.3962e9	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3962ec	5b		tcd		                TCD
.3962ed	28		plp		                PLP
.3962ee	68		pla		                PLA             ; end setdp macro
.3962ef	22 6b 62 39	jsl $39626b	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.3962f3	e2 20		sep #$20	                SEP #$20        ; set A short
.3962f5	a9 07		lda #$07	                    LDA #FDC_CMD_RECALIBRATE    ; RECALIBRATE Command
.3962f7	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.3962fa	a5 00		lda $0300	                    LDA FDC_DRIVE
.3962fc	8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.3962ff	a9 02		lda #$02	                    LDA #2
.396301	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM           ; 2 parameters
.396304	9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT          ; 0 data
.396307	9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM          ; 0 results
.39630a	22 bb 60 39	jsl $3960bb	                    JSL FDC_COMMAND             ; Issue the command
.39630e	90 04		bcc $396314	                    BCC pass_failure            ; If failure, pass the failure up
.396310	28		plp		                    PLP
.396311	2b		pld		                    PLD
.396312	38		sec		                    SEC
.396313	6b		rtl		                    RTL
.396314	28		plp		pass_failure        PLP
.396315	2b		pld		                    PLD
.396316	18		clc		                    CLC
.396317	6b		rtl		                    RTL
.396318					FDC_Sense_Int_Status
.396318	8b		phb		                    PHB
.396319	0b		phd		                    PHD
.39631a	08		php		                    PHP
.39631b	48		pha		                PHA             ; begin setdbr macro
.39631c	08		php		                PHP
.39631d	e2 20		sep #$20	                SEP #$20        ; set A short
.39631f	a9 00		lda #$00	                LDA #0
.396321	48		pha		                PHA
.396322	ab		plb		                PLB
.396323	28		plp		                PLP
.396324	68		pla		                PLA             ; end setdbr macro
.396325	48		pha		                PHA             ; begin setdp macro
.396326	08		php		                PHP
.396327	c2 20		rep #$20	                REP #$20        ; set A long
.396329	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39632c	5b		tcd		                TCD
.39632d	28		plp		                PLP
.39632e	68		pla		                PLA             ; end setdp macro
.39632f	c2 30		rep #$30	                REP #$30        ; set A&X long
.396331	a2 0a 00	ldx #$000a	                    LDX #10                            ; Wait for 10ms
.396334	22 19 16 39	jsl $391619	                    JSL ILOOP_MS
.396338	e2 20		sep #$20	                SEP #$20        ; set A short
.39633a	64 06		stz $0306	                    STZ FDC_ST0                         ; Clear ST0
.39633c	a9 ff		lda #$ff	                    LDA #$FF
.39633e	85 0a		sta $030a	                    STA FDC_PCN                         ; Set PCN to some obviously bad value
.396340	20 1c 60	jsr $39601c	                    JSR FDC_Check_CMD_BSY               ; Check I can send a command
.396343	90 30		bcc $396375	                    BCC time_out                        ; If there was a time out, raise an error
.396345	20 c0 5f	jsr $395fc0	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.396348	90 2b		bcc $396375	                    BCC time_out                        ; If there was a time out, raise an error
.39634a	a9 08		lda #$08	                    LDA #FDC_CMD_SENSE_INTERRUPT
.39634c	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.396350	20 4a 60	jsr $39604a	                    JSR FDC_Can_Read_Data
.396353	90 20		bcc $396375	                    BCC time_out                        ; If there was a time out, raise an error
.396355	20 c0 5f	jsr $395fc0	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.396358	90 1b		bcc $396375	                    BCC time_out                        ; If there was a time out, raise an error
.39635a	af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.39635e	85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.396360	20 c0 5f	jsr $395fc0	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.396363	90 10		bcc $396375	                    BCC time_out                        ; If there was a time out, raise an error
.396365	af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.396369	85 0a		sta $030a	                    STA FDC_PCN                         ; --- Cylinder ---
.39636b	e2 20		sep #$20	                SEP #$20        ; set A short
.39636d	9c 20 03	stz $0320	                    STZ @w BIOS_STATUS
.396370	28		plp		                    PLP
.396371	2b		pld		                    PLD
.396372	ab		plb		                    PLB
.396373	38		sec		                    SEC
.396374	6b		rtl		                    RTL
.396375					time_out
.396375	e2 20		sep #$20	                SEP #$20        ; set A short
.396377	a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT               ; Return a time out error
.396379	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.39637c	28		plp		                    PLP
.39637d	2b		pld		                    PLD
.39637e	ab		plb		                    PLB
.39637f	18		clc		                    CLC
.396380	6b		rtl		                    RTL
.396381					FDC_Specify_Command
.396381	8b		phb		                    PHB
.396382	0b		phd		                    PHD
.396383	08		php		                    PHP
.396384	48		pha		                PHA             ; begin setdbr macro
.396385	08		php		                PHP
.396386	e2 20		sep #$20	                SEP #$20        ; set A short
.396388	a9 00		lda #$00	                LDA #0
.39638a	48		pha		                PHA
.39638b	ab		plb		                PLB
.39638c	28		plp		                PLP
.39638d	68		pla		                PLA             ; end setdbr macro
.39638e	48		pha		                PHA             ; begin setdp macro
.39638f	08		php		                PHP
.396390	c2 20		rep #$20	                REP #$20        ; set A long
.396392	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396395	5b		tcd		                TCD
.396396	28		plp		                PLP
.396397	68		pla		                PLA             ; end setdp macro
.396398	c2 30		rep #$30	                REP #$30        ; set A&X long
.39639a	a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.39639d	22 19 16 39	jsl $391619	                    JSL ILOOP_MS
.3963a1	e2 20		sep #$20	                SEP #$20        ; set A short
.3963a3	20 1c 60	jsr $39601c	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.3963a6	90 26		bcc $3963ce	                    BCC time_out            ; If there was a time out, raise an error
.3963a8	20 c0 5f	jsr $395fc0	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.3963ab	90 21		bcc $3963ce	                    BCC time_out            ; If there was a time out, raise an error
.3963ad	a9 03		lda #$03	                    LDA #FDC_CMD_SPECIFY    ; Specify Command
.3963af	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.3963b3	20 c0 5f	jsr $395fc0	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.3963b6	90 16		bcc $3963ce	                    BCC time_out            ; If there was a time out, raise an error
.3963b8	a9 cf		lda #$cf	                    LDA #$CF
.3963ba	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.3963be	20 c0 5f	jsr $395fc0	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.3963c1	90 0b		bcc $3963ce	                    BCC time_out            ; If there was a time out, raise an error
.3963c3	a9 01		lda #$01	                    LDA #$01                ; 1 = Non-DMA
.3963c5	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.3963c9	28		plp		                    PLP
.3963ca	2b		pld		                    PLD
.3963cb	ab		plb		                    PLB
.3963cc	38		sec		                    SEC
.3963cd	6b		rtl		                    RTL
.3963ce					time_out
.3963ce	e2 20		sep #$20	                SEP #$20        ; set A short
.3963d0	a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.3963d2	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.3963d5	28		plp		                    PLP
.3963d6	2b		pld		                    PLD
.3963d7	ab		plb		                    PLB
.3963d8	18		clc		                    CLC
.3963d9	6b		rtl		                    RTL
.3963da					FDC_Configure_Command
.3963da	8b		phb		                    PHB
.3963db	0b		phd		                    PHD
.3963dc	08		php		                    PHP
.3963dd	48		pha		                PHA             ; begin setdbr macro
.3963de	08		php		                PHP
.3963df	e2 20		sep #$20	                SEP #$20        ; set A short
.3963e1	a9 00		lda #$00	                LDA #0
.3963e3	48		pha		                PHA
.3963e4	ab		plb		                PLB
.3963e5	28		plp		                PLP
.3963e6	68		pla		                PLA             ; end setdbr macro
.3963e7	48		pha		                PHA             ; begin setdp macro
.3963e8	08		php		                PHP
.3963e9	c2 20		rep #$20	                REP #$20        ; set A long
.3963eb	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3963ee	5b		tcd		                TCD
.3963ef	28		plp		                PLP
.3963f0	68		pla		                PLA             ; end setdp macro
.3963f1	c2 30		rep #$30	                REP #$30        ; set A&X long
.3963f3	a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.3963f6	22 19 16 39	jsl $391619	                    JSL ILOOP_MS
.3963fa	e2 20		sep #$20	                SEP #$20        ; set A short
.3963fc	20 1c 60	jsr $39601c	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.3963ff	90 36		bcc $396437	                    BCC time_out            ; If there was a time out, raise an error
.396401	20 c0 5f	jsr $395fc0	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.396404	90 31		bcc $396437	                    BCC time_out            ; If there was a time out, raise an error
.396406	a9 13		lda #$13	                    LDA #FDC_CMD_CONFIGURE  ; Specify Command
.396408	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.39640c	20 c0 5f	jsr $395fc0	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.39640f	90 26		bcc $396437	                    BCC time_out            ; If there was a time out, raise an error
.396411	a9 00		lda #$00	                    LDA #$00
.396413	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.396417	20 c0 5f	jsr $395fc0	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.39641a	90 1b		bcc $396437	                    BCC time_out            ; If there was a time out, raise an error
.39641c	a9 44		lda #$44	                    LDA #$44                ; Implied Seek, FIFOTHR = 4 byte
.39641e	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.396422	20 c0 5f	jsr $395fc0	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.396425	90 10		bcc $396437	                    BCC time_out            ; If there was a time out, raise an error
.396427	a9 00		lda #$00	                    LDA #$00
.396429	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.39642d	20 1c 60	jsr $39601c	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.396430	90 05		bcc $396437	                    BCC time_out            ; If there was a time out, raise an error
.396432	28		plp		                    PLP
.396433	2b		pld		                    PLD
.396434	ab		plb		                    PLB
.396435	38		sec		                    SEC
.396436	6b		rtl		                    RTL
.396437					time_out
.396437	e2 20		sep #$20	                SEP #$20        ; set A short
.396439	a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.39643b	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.39643e	28		plp		                    PLP
.39643f	2b		pld		                    PLD
.396440	ab		plb		                    PLB
.396441	18		clc		                    CLC
.396442	6b		rtl		                    RTL
.396443					FDC_Read_ID_Command
.396443	8b		phb		                    PHB
.396444	0b		phd		                    PHD
.396445	08		php		                    PHP
.396446	48		pha		                PHA             ; begin setdbr macro
.396447	08		php		                PHP
.396448	e2 20		sep #$20	                SEP #$20        ; set A short
.39644a	a9 00		lda #$00	                LDA #0
.39644c	48		pha		                PHA
.39644d	ab		plb		                PLB
.39644e	28		plp		                PLP
.39644f	68		pla		                PLA             ; end setdbr macro
.396450	48		pha		                PHA             ; begin setdp macro
.396451	08		php		                PHP
.396452	c2 20		rep #$20	                REP #$20        ; set A long
.396454	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396457	5b		tcd		                TCD
.396458	28		plp		                PLP
.396459	68		pla		                PLA             ; end setdp macro
.39645a	e2 20		sep #$20	                SEP #$20        ; set A short
.39645c	a9 0a		lda #$0a	                    LDA #FDC_CMD_READ_ID                ; READID Command
.39645e	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.396461	a9 01		lda #$01	                    LDA #1
.396463	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.396466	9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.396469	a9 07		lda #$07	                    LDA #7
.39646b	8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.39646e	22 bb 60 39	jsl $3960bb	                    JSL FDC_COMMAND                     ; Issue the command
.396472	90 27		bcc $39649b	                    BCC pass_failure
.396474	ad 10 05	lda $0510	                    LDA FDC_RESULTS
.396477	85 06		sta $0306	                    STA FDC_ST0                         ; Get ST0
.396479	ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.39647c	85 07		sta $0307	                    STA FDC_ST1                         ; Get ST1
.39647e	ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.396481	85 08		sta $0308	                    STA FDC_ST2                         ; Get ST2
.396483	ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.396486	85 02		sta $0302	                    STA FDC_CYLINDER                    ; Get the cylinder
.396488	ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.39648b	85 01		sta $0301	                    STA FDC_HEAD                        ; Get the head
.39648d	ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.396490	85 0a		sta $030a	                    STA FDC_PCN                         ; Get the sector
.396492	ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.396495	85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; Get the sector size code
.396497	28		plp		                    PLP
.396498	2b		pld		                    PLD
.396499	ab		plb		                    PLB
.39649a	6b		rtl		                    RTL
.39649b	28		plp		pass_failure        PLP
.39649c	2b		pld		                    PLD
.39649d	ab		plb		                    PLB
.39649e	18		clc		                    CLC
.39649f	6b		rtl		                    RTL
.3964a0					FDC_DumpReg_Command
.3964a0	0b		phd		                    PHD
.3964a1	08		php		                    PHP
.3964a2	e2 20		sep #$20	                SEP #$20        ; set A short
.3964a4	a9 0e		lda #$0e	                    LDA #FDC_CMD_DUMPREG                ; DUMPREG Command
.3964a6	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.3964a9	a9 01		lda #$01	                    LDA #1
.3964ab	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.3964ae	9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.3964b1	a9 0a		lda #$0a	                    LDA #10
.3964b3	8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 10 results
.3964b6	22 bb 60 39	jsl $3960bb	                    JSL FDC_COMMAND                     ; Issue the command
.3964ba	90 03		bcc $3964bf	                    BCC pass_failure
.3964bc	28		plp		                    PLP
.3964bd	2b		pld		                    PLD
.3964be	6b		rtl		                    RTL
.3964bf	28		plp		pass_failure        PLP
.3964c0	2b		pld		                    PLD
.3964c1	18		clc		                    CLC
.3964c2	6b		rtl		                    RTL
.3964c3					FDC_Seek_Track
.3964c3	8b		phb		                    PHB
.3964c4	0b		phd		                    PHD
.3964c5	08		php		                    PHP
.3964c6	48		pha		                PHA             ; begin setdbr macro
.3964c7	08		php		                PHP
.3964c8	e2 20		sep #$20	                SEP #$20        ; set A short
.3964ca	a9 00		lda #$00	                LDA #0
.3964cc	48		pha		                PHA
.3964cd	ab		plb		                PLB
.3964ce	28		plp		                PLP
.3964cf	68		pla		                PLA             ; end setdbr macro
.3964d0	48		pha		                PHA             ; begin setdp macro
.3964d1	08		php		                PHP
.3964d2	c2 20		rep #$20	                REP #$20        ; set A long
.3964d4	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3964d7	5b		tcd		                TCD
.3964d8	28		plp		                PLP
.3964d9	68		pla		                PLA             ; end setdp macro
.3964da	22 6b 62 39	jsl $39626b	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.3964de	e2 20		sep #$20	                SEP #$20        ; set A short
.3964e0	a9 0f		lda #$0f	                    LDA #FDC_CMD_SEEK                   ; Seek Command
.3964e2	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.3964e5	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.3964e7	29 01		and #$01	                    AND #$01
.3964e9	0a		asl a		                    ASL A
.3964ea	0a		asl a		                    ASL A
.3964eb	05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.3964ed	8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.3964f0	a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; And the track
.3964f2	8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.3964f5	a9 03		lda #$03	                    LDA #3
.3964f7	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 3 parameter (the command)
.3964fa	9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.3964fd	9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM                  ; 0 results
.396500	22 bb 60 39	jsl $3960bb	                    JSL FDC_COMMAND                     ; Issue the command
.396504	90 05		bcc $39650b	                    BCC pass_failure
.396506	28		plp		                    PLP
.396507	2b		pld		                    PLD
.396508	ab		plb		                    PLB
.396509	38		sec		                    SEC
.39650a	6b		rtl		                    RTL
.39650b	28		plp		pass_failure        PLP
.39650c	2b		pld		                    PLD
.39650d	ab		plb		                    PLB
.39650e	18		clc		                    CLC
.39650f	6b		rtl		                    RTL
.396510					FDC_Read_Sector
.396510	8b		phb		                    PHB
.396511	0b		phd		                    PHD
.396512	08		php		                    PHP
.396513	48		pha		                PHA             ; begin setdbr macro
.396514	08		php		                PHP
.396515	e2 20		sep #$20	                SEP #$20        ; set A short
.396517	a9 00		lda #$00	                LDA #0
.396519	48		pha		                PHA
.39651a	ab		plb		                PLB
.39651b	28		plp		                PLP
.39651c	68		pla		                PLA             ; end setdbr macro
.39651d	48		pha		                PHA             ; begin setdp macro
.39651e	08		php		                PHP
.39651f	c2 20		rep #$20	                REP #$20        ; set A long
.396521	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396524	5b		tcd		                TCD
.396525	28		plp		                PLP
.396526	68		pla		                PLA             ; end setdp macro
.396527	22 6b 62 39	jsl $39626b	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.39652b	e2 20		sep #$20	                SEP #$20        ; set A short
.39652d	a9 06		lda #$06	                    LDA #FDC_CMD_READ_DATA              ; The READ_DATA command
.39652f	09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.396531	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.396534	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.396536	29 01		and #$01	                    AND #$01
.396538	0a		asl a		                    ASL A
.396539	0a		asl a		                    ASL A
.39653a	05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.39653c	8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.39653f	a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.396541	8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.396544	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.396546	8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.396549	a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.39654b	8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.39654e	a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.396550	8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.396553	a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.396555	8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.396558	a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.39655a	8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.39655d	a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.39655f	8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.396562	a9 09		lda #$09	                    LDA #9
.396564	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.396567	a9 01		lda #$01	                    LDA #1
.396569	8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect data
.39656c	a9 07		lda #$07	                    LDA #7
.39656e	8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.396571	22 bb 60 39	jsl $3960bb	command             JSL FDC_COMMAND                     ; Issue the command
.396575	08		php		                    PHP
.396576	ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.396579	85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ----
.39657b	ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.39657e	85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ----
.396580	ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.396583	85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ----
.396585	ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.396588	85 02		sta $0302	                    STA FDC_CYLINDER                    ; -- C ---
.39658a	ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.39658d	85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.39658f	ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.396592	85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.396594	ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.396597	85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.396599	28		plp		                    PLP
.39659a	90 04		bcc $3965a0	                    BCC pass_failure
.39659c	28		plp		done                PLP
.39659d	2b		pld		                    PLD
.39659e	ab		plb		                    PLB
.39659f	6b		rtl		                    RTL
.3965a0	28		plp		pass_failure        PLP
.3965a1	2b		pld		                    PLD
.3965a2	ab		plb		                    PLB
.3965a3	18		clc		                    CLC
.3965a4	6b		rtl		                    RTL
.3965a5					FDC_Write_Sector
.3965a5	8b		phb		                    PHB
.3965a6	0b		phd		                    PHD
.3965a7	08		php		                    PHP
.3965a8	48		pha		                PHA             ; begin setdbr macro
.3965a9	08		php		                PHP
.3965aa	e2 20		sep #$20	                SEP #$20        ; set A short
.3965ac	a9 00		lda #$00	                LDA #0
.3965ae	48		pha		                PHA
.3965af	ab		plb		                PLB
.3965b0	28		plp		                PLP
.3965b1	68		pla		                PLA             ; end setdbr macro
.3965b2	48		pha		                PHA             ; begin setdp macro
.3965b3	08		php		                PHP
.3965b4	c2 20		rep #$20	                REP #$20        ; set A long
.3965b6	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3965b9	5b		tcd		                TCD
.3965ba	28		plp		                PLP
.3965bb	68		pla		                PLA             ; end setdp macro
.3965bc	e2 20		sep #$20	                SEP #$20        ; set A short
.3965be	22 6b 62 39	jsl $39626b	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.3965c2	a9 05		lda #$05	                    LDA #FDC_CMD_WRITE_DATA             ; The WRITE_DATA command
.3965c4	09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.3965c6	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.3965c9	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.3965cb	29 01		and #$01	                    AND #$01
.3965cd	0a		asl a		                    ASL A
.3965ce	0a		asl a		                    ASL A
.3965cf	05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.3965d1	8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.3965d4	a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.3965d6	8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.3965d9	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.3965db	8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.3965de	a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.3965e0	8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.3965e3	a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.3965e5	8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.3965e8	a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.3965ea	8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.3965ed	a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.3965ef	8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.3965f2	a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.3965f4	8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.3965f7	a9 09		lda #$09	                    LDA #9
.3965f9	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.3965fc	a9 ff		lda #$ff	                    LDA #$FF
.3965fe	8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect to write data
.396601	a9 07		lda #$07	                    LDA #7
.396603	8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.396606	22 bb 60 39	jsl $3960bb	command             JSL FDC_COMMAND                     ; Issue the command
.39660a	08		php		                    PHP
.39660b	ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.39660e	85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.396610	ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.396613	85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ---
.396615	ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.396618	85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ---
.39661a	ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.39661d	85 02		sta $0302	                    STA FDC_CYLINDER                    ; --- C ---
.39661f	ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.396622	85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.396624	ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.396627	85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.396629	ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.39662c	85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.39662e	28		plp		check_status        PLP
.39662f	90 04		bcc $396635	                    BCC pass_failure
.396631	28		plp		done                PLP
.396632	2b		pld		                    PLD
.396633	ab		plb		                    PLB
.396634	6b		rtl		                    RTL
.396635	28		plp		pass_failure        PLP
.396636	2b		pld		                    PLD
.396637	ab		plb		                    PLB
.396638	18		clc		                    CLC
.396639	6b		rtl		                    RTL
.39663a					DIVIDE32
.39663a	da		phx		                    PHX
.39663b	5a		phy		                    PHY
.39663c	0b		phd		                    PHD
.39663d	08		php		                    PHP
.39663e	48		pha		                PHA             ; begin setdp macro
.39663f	08		php		                PHP
.396640	c2 20		rep #$20	                REP #$20        ; set A long
.396642	a9 0c 03	lda #$030c	                LDA #DIVIDEND         ; set DP to page 0
.396645	5b		tcd		                TCD
.396646	28		plp		                PLP
.396647	68		pla		                PLA             ; end setdp macro
.396648	c2 30		rep #$30	                REP #$30        ; set A&X long
.39664a	64 08		stz $0314	                    STZ REMAINDER           ; Initialize the remainder
.39664c	64 0a		stz $0316	                    STZ REMAINDER+2
.39664e	a2 20 00	ldx #$0020	                    LDX #32                 ; Set the number of bits to process
.396651	06 00		asl $030c	loop                ASL DIVIDEND
.396653	26 02		rol $030e	                    ROL DIVIDEND+2
.396655	26 08		rol $0314	                    ROL REMAINDER
.396657	26 0a		rol $0316	                    ROL REMAINDER+2
.396659	a5 08		lda $0314	                    LDA REMAINDER
.39665b	38		sec		                    SEC
.39665c	e5 04		sbc $0310	                    SBC DIVISOR
.39665e	a8		tay		                    TAY
.39665f	a5 0a		lda $0316	                    LDA REMAINDER+2
.396661	e5 06		sbc $0312	                    SBC DIVISOR+2
.396663	90 06		bcc $39666b	                    BCC skip
.396665	85 0a		sta $0316	                    STA REMAINDER+2
.396667	84 08		sty $0314	                    STY REMAINDER
.396669	e6 00		inc $030c	                    INC DIVIDEND
.39666b	ca		dex		skip                DEX
.39666c	d0 e3		bne $396651	                    BNE loop
.39666e	28		plp		                    PLP
.39666f	2b		pld		                    PLD
.396670	7a		ply		                    PLY
.396671	fa		plx		                    PLX
.396672	60		rts		                    RTS
.396673					LBA2CHS
.396673	8b		phb		                    PHB
.396674	0b		phd		                    PHD
.396675	08		php		                    PHP
.396676	48		pha		                PHA             ; begin setdbr macro
.396677	08		php		                PHP
.396678	e2 20		sep #$20	                SEP #$20        ; set A short
.39667a	a9 00		lda #$00	                LDA #0
.39667c	48		pha		                PHA
.39667d	ab		plb		                PLB
.39667e	28		plp		                PLP
.39667f	68		pla		                PLA             ; end setdbr macro
.396680	48		pha		                PHA             ; begin setdp macro
.396681	08		php		                PHP
.396682	c2 20		rep #$20	                REP #$20        ; set A long
.396684	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396687	5b		tcd		                TCD
.396688	28		plp		                PLP
.396689	68		pla		                PLA             ; end setdp macro
.39668a	c2 30		rep #$30	                REP #$30        ; set A&X long
.39668c	a5 22		lda $0322	                    LDA BIOS_LBA
.39668e	85 0c		sta $030c	                    STA DIVIDEND
.396690	a5 24		lda $0324	                    LDA BIOS_LBA+2
.396692	85 0e		sta $030e	                    STA DIVIDEND+2
.396694	a9 24 00	lda #$0024	                    LDA #36
.396697	85 10		sta $0310	                    STA DIVISOR
.396699	64 12		stz $0312	                    STZ DIVISOR+2
.39669b	20 3a 66	jsr $39663a	                    JSR DIVIDE32
.39669e	e2 20		sep #$20	                SEP #$20        ; set A short
.3966a0	a5 0c		lda $030c	                    LDA DIVIDEND
.3966a2	85 02		sta $0302	                    STA FDC_CYLINDER
.3966a4	c2 20		rep #$20	                REP #$20        ; set A long
.3966a6	a5 14		lda $0314	                    LDA REMAINDER
.3966a8	85 0c		sta $030c	                    STA DIVIDEND
.3966aa	a5 16		lda $0316	                    LDA REMAINDER+2
.3966ac	85 0e		sta $030e	                    STA DIVIDEND+2
.3966ae	a9 12 00	lda #$0012	                    LDA #18
.3966b1	85 10		sta $0310	                    STA DIVISOR
.3966b3	64 12		stz $0312	                    STZ DIVISOR+2
.3966b5	20 3a 66	jsr $39663a	                    JSR DIVIDE32
.3966b8	e2 20		sep #$20	                SEP #$20        ; set A short
.3966ba	a5 0c		lda $030c	                    LDA DIVIDEND
.3966bc	29 01		and #$01	                    AND #$01
.3966be	85 01		sta $0301	                    STA FDC_HEAD
.3966c0	a5 14		lda $0314	                    LDA REMAINDER
.3966c2	1a		inc a		                    INC A
.3966c3	85 03		sta $0303	                    STA FDC_SECTOR
.3966c5	28		plp		                    PLP
.3966c6	2b		pld		                    PLD
.3966c7	ab		plb		                    PLB
.3966c8	6b		rtl		                    RTL
.3966c9					FDC_GETBLOCK
.3966c9	8b		phb		                    PHB
.3966ca	0b		phd		                    PHD
.3966cb	08		php		                    PHP
.3966cc	48		pha		                PHA             ; begin setdbr macro
.3966cd	08		php		                PHP
.3966ce	e2 20		sep #$20	                SEP #$20        ; set A short
.3966d0	a9 00		lda #$00	                LDA #0
.3966d2	48		pha		                PHA
.3966d3	ab		plb		                PLB
.3966d4	28		plp		                PLP
.3966d5	68		pla		                PLA             ; end setdbr macro
.3966d6	48		pha		                PHA             ; begin setdp macro
.3966d7	08		php		                PHP
.3966d8	c2 20		rep #$20	                REP #$20        ; set A long
.3966da	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3966dd	5b		tcd		                TCD
.3966de	28		plp		                PLP
.3966df	68		pla		                PLA             ; end setdp macro
.3966e0	e2 20		sep #$20	                SEP #$20        ; set A short
.3966e2	a9 03		lda #$03	                    LDA #3                      ; We can retry 3 times
.3966e4	8d 34 05	sta $0534	                    STA FDC_CMD_RETRY
.3966e7	c2 30		rep #$30	                REP #$30        ; set A&X long
.3966e9	22 73 66 39	jsl $396673	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.3966ed	e2 20		sep #$20	                SEP #$20        ; set A short
.3966ef	a5 03		lda $0303	                    LDA FDC_SECTOR              ; Just make sure the sector is ok
.3966f1	f0 29		beq $39671c	                    BEQ read_failure
.3966f3					try_read
.3966f3	c2 20		rep #$20	                REP #$20        ; set A long
.3966f5	22 10 65 39	jsl $396510	                    JSL FDC_Read_Sector         ; Read the sector
.3966f9	90 14		bcc $39670f	                    BCC retry
.3966fb	e2 20		sep #$20	                SEP #$20        ; set A short
.3966fd	a5 06		lda $0306	                    LDA FDC_ST0
.3966ff	29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.396701	d0 19		bne $39671c	                    BNE read_failure
.396703					ret_success
.396703	e2 20		sep #$20	                SEP #$20        ; set A short
.396705	a9 00		lda #$00	                    LDA #0
.396707	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.39670a	28		plp		                    PLP
.39670b	2b		pld		                    PLD
.39670c	ab		plb		                    PLB
.39670d	38		sec		                    SEC
.39670e	6b		rtl		                    RTL
.39670f					retry
.39670f	e2 20		sep #$20	                SEP #$20        ; set A short
.396711	ce 34 05	dec $0534	                    DEC FDC_CMD_RETRY           ; Decrement the retry counter
.396714	30 13		bmi $396729	                    BMI pass_failure            ; If it's gone negative, we should quit with an error
.396716	22 08 62 39	jsl $396208	                    JSL FDC_INIT                ; Otherwise, reinitialize the FDC
.39671a	80 d7		bra $3966f3	                    BRA try_read                ; And try the read again
.39671c					read_failure
.39671c	e2 20		sep #$20	                SEP #$20        ; set A short
.39671e	a9 82		lda #$82	                    LDA #BIOS_ERR_READ
.396720	80 04		bra $396726	                    BRA ret_failure
.396722					seek_failure
.396722	e2 20		sep #$20	                SEP #$20        ; set A short
.396724	a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.396726	8d 20 03	sta $0320	ret_failure         STA @w BIOS_STATUS
.396729	28		plp		pass_failure        PLP
.39672a	2b		pld		                    PLD
.39672b	ab		plb		                    PLB
.39672c	18		clc		                    CLC
.39672d	6b		rtl		                    RTL
.39672e					FDC_PUTBLOCK
.39672e	8b		phb		                    PHB
.39672f	0b		phd		                    PHD
.396730	08		php		                    PHP
.396731	48		pha		                PHA             ; begin setdbr macro
.396732	08		php		                PHP
.396733	e2 20		sep #$20	                SEP #$20        ; set A short
.396735	a9 00		lda #$00	                LDA #0
.396737	48		pha		                PHA
.396738	ab		plb		                PLB
.396739	28		plp		                PLP
.39673a	68		pla		                PLA             ; end setdbr macro
.39673b	48		pha		                PHA             ; begin setdp macro
.39673c	08		php		                PHP
.39673d	c2 20		rep #$20	                REP #$20        ; set A long
.39673f	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396742	5b		tcd		                TCD
.396743	28		plp		                PLP
.396744	68		pla		                PLA             ; end setdp macro
.396745	e2 20		sep #$20	                SEP #$20        ; set A short
.396747	a9 03		lda #$03	                    LDA #3                      ; Set the number of retries we're willing to do
.396749	8d 34 05	sta $0534	                    STA @w FDC_CMD_RETRY
.39674c	c2 30		rep #$30	                REP #$30        ; set A&X long
.39674e	22 73 66 39	jsl $396673	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.396752	22 a5 65 39	jsl $3965a5	retry               JSL FDC_Write_Sector        ; Write the sector
.396756	b0 03		bcs $39675b	                    BCS chk_st0
.396758	82 28 00	brl $396783	                    BRL attempt_retry
.39675b					chk_st0
.39675b	e2 20		sep #$20	                SEP #$20        ; set A short
.39675d	a5 06		lda $0306	                    LDA FDC_ST0
.39675f	29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.396761	d0 0c		bne $39676f	                    BNE write_failure
.396763					ret_success
.396763	e2 20		sep #$20	                SEP #$20        ; set A short
.396765	a9 00		lda #$00	                    LDA #0
.396767	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.39676a	28		plp		                    PLP
.39676b	2b		pld		                    PLD
.39676c	ab		plb		                    PLB
.39676d	38		sec		                    SEC
.39676e	6b		rtl		                    RTL
.39676f					write_failure
.39676f	e2 20		sep #$20	                SEP #$20        ; set A short
.396771	a5 07		lda $0307	                    LDA FDC_ST1                         ; Check ST1 for write protect
.396773	89 02		bit #$02	                    BIT #FDC_ST1_NW
.396775	f0 04		beq $39677b	                    BEQ generic_err
.396777	a9 86		lda #$86	                    LDA #BIOS_ERR_WRITEPROT             ; Yes: return a write-protect error
.396779	80 17		bra $396792	                    BRA ret_failure
.39677b	89 10		bit #$10	generic_err         BIT #FDC_ST1_OR                     ; TODO: properly handle over/under run errors
.39677d	d0 e4		bne $396763	                    BNE ret_success
.39677f	89 80		bit #$80	                    BIT #FDC_ST1_EN                     ; TODO: properly handle end-of-track
.396781	d0 e0		bne $396763	                    BNE ret_success
.396783					attempt_retry
.396783	e2 20		sep #$20	                SEP #$20        ; set A short
.396785	ce 34 05	dec $0534	                    DEC @w FDC_CMD_RETRY                ; Count down the retries
.396788	d0 c8		bne $396752	                    BNE retry                           ; And retry unless we have none left
.39678a	a9 83		lda #$83	                    LDA #BIOS_ERR_WRITE                 ; Otherwise: return a generic write error
.39678c	80 04		bra $396792	                    BRA ret_failure
.39678e					seek_failure
.39678e	e2 20		sep #$20	                SEP #$20        ; set A short
.396790	a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.396792					ret_failure
.396792	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.396795	28		plp		pass_failure        PLP
.396796	2b		pld		                    PLD
.396797	ab		plb		                    PLB
.396798	18		clc		                    CLC
.396799	6b		rtl		                    RTL
.39679a					FDC_MOUNT
.39679a	8b		phb		                    PHB
.39679b	0b		phd		                    PHD
.39679c	08		php		                    PHP
.39679d	48		pha		                PHA             ; begin setdbr macro
.39679e	08		php		                PHP
.39679f	e2 20		sep #$20	                SEP #$20        ; set A short
.3967a1	a9 00		lda #$00	                LDA #0
.3967a3	48		pha		                PHA
.3967a4	ab		plb		                PLB
.3967a5	28		plp		                PLP
.3967a6	68		pla		                PLA             ; end setdbr macro
.3967a7	48		pha		                PHA             ; begin setdp macro
.3967a8	08		php		                PHP
.3967a9	c2 20		rep #$20	                REP #$20        ; set A long
.3967ab	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3967ae	5b		tcd		                TCD
.3967af	28		plp		                PLP
.3967b0	68		pla		                PLA             ; end setdp macro
.3967b1	22 08 62 39	jsl $396208	                    JSL FDC_INIT
.3967b5	e2 20		sep #$20	                SEP #$20        ; set A short
.3967b7	c2 10		rep #$10	                REP #$10        ; set X long
.3967b9	a9 00		lda #$00	                    LDA #0
.3967bb	a2 00 00	ldx #$0000	                    LDX #0
.3967be	9f 00 a3 38	sta $38a300,x	zero_loop           STA DOS_SECTOR,X
.3967c2	e8		inx		                    INX
.3967c3	e0 00 02	cpx #$0200	                    CPX #512
.3967c6	d0 f6		bne $3967be	                    BNE zero_loop
.3967c8	a9 00		lda #$00	                    LDA #0                                  ; We only support drive 0
.3967ca	85 00		sta $0300	                    STA FDC_DRIVE
.3967cc	22 84 62 39	jsl $396284	                    JSL FDC_Motor_On                        ; Turn the motor on
.3967d0	c2 30		rep #$30	                REP #$30        ; set A&X long
.3967d2	a9 00 00	lda #$0000	                    LDA #0                                  ; We want sector 0
.3967d5	85 22		sta $0322	                    STA BIOS_LBA
.3967d7	85 24		sta $0324	                    STA BIOS_LBA+2
.3967d9	a9 00 a3	lda #$a300	                    LDA #<>DOS_SECTOR                       ; And load it into DOS_SECTOR
.3967dc	85 26		sta $0326	                    STA BIOS_BUFF_PTR
.3967de	a9 38 00	lda #$0038	                    LDA #`DOS_SECTOR
.3967e1	85 28		sta $0328	                    STA BIOS_BUFF_PTR+2
.3967e3	22 c9 66 39	jsl $3966c9	                    JSL FDC_GETBLOCK                        ; Attempt to read the data
.3967e7	b0 03		bcs $3967ec	                    BCS parse_boot                          ; If ok: start parsing the boot record
.3967e9	82 d3 00	brl $3968bf	                    BRL pass_failure                        ; Pass the error up the chain
.3967ec					parse_boot
.3967ec	e2 20		sep #$20	                SEP #$20        ; set A short
.3967ee	a9 00		lda #$00	                    LDA #PART_TYPE_FAT12                    ; Set the file system to FAT12
.3967f0	8f 01 a0 38	sta $38a001	                    STA @l FILE_SYSTEM
.3967f4	a9 00		lda #$00	                    LDA #0                                  ; There are no partitions on the disk
.3967f6	8f 02 a0 38	sta $38a002	                    STA @l PARTITION
.3967fa	e2 20		sep #$20	                SEP #$20        ; set A short
.3967fc	af 0d a3 38	lda $38a30d	                    LDA DOS_SECTOR+BPB_SECPERCLUS12_OFF     ; Get the # of sectors per cluster (usually 1)
.396800	8f 03 a0 38	sta $38a003	                    STA @l SECTORS_PER_CLUSTER
.396804	c2 20		rep #$20	                REP #$20        ; set A long
.396806	a9 00 00	lda #$0000	                    LDA #0                                  ; First sector of the "partition" is 0
.396809	8f 04 a0 38	sta $38a004	                    STA @l FIRSTSECTOR
.39680d	8f 06 a0 38	sta $38a006	                    STA @l FIRSTSECTOR+2
.396811	af 16 a3 38	lda $38a316	                    LDA DOS_SECTOR+BPB_SECPERFAT12_OFF      ; Get the number of sectors per FAT
.396815	8f 10 a0 38	sta $38a010	                    STA @l SEC_PER_FAT
.396819	a9 00 00	lda #$0000	                    LDA #0
.39681c	8f 12 a0 38	sta $38a012	                    STA @l SEC_PER_FAT+2
.396820	a9 01 00	lda #$0001	                    LDA #1                                  ; FAT#1 begins at sector 1
.396823	8f 14 a0 38	sta $38a014	                    STA @l FAT_BEGIN_LBA
.396827	18		clc		                    CLC
.396828	6f 10 a0 38	adc $38a010	                    ADC @l SEC_PER_FAT
.39682c	8f 18 a0 38	sta $38a018	                    STA @l FAT2_BEGIN_LBA                   ; FAT#2 begins SEC_PER_FAT sectors later
.396830	a9 00 00	lda #$0000	                    LDA #0
.396833	8f 16 a0 38	sta $38a016	                    STA @l FAT_BEGIN_LBA+2
.396837	8f 1a a0 38	sta $38a01a	                    STA @L FAT2_BEGIN_LBA+2
.39683b	18		clc		                    CLC                                     ; Calculate the root directory's starting sector
.39683c	af 18 a0 38	lda $38a018	                    LDA @l FAT2_BEGIN_LBA
.396840	6f 10 a0 38	adc $38a010	                    ADC @l SEC_PER_FAT
.396844	8f 20 a0 38	sta $38a020	                    STA @l ROOT_DIR_FIRST_CLUSTER           ; ROOT_DIR_FIRST_CLUSTER will be a sector LBA for FAT12!
.396848	a9 00 00	lda #$0000	                    LDA #0
.39684b	8f 22 a0 38	sta $38a022	                    STA @l ROOT_DIR_FIRST_CLUSTER+2
.39684f	af 11 a3 38	lda $38a311	                    LDA DOS_SECTOR+BPB_ROOT_MAX_ENTRY12_OFF ; Get the maximum number of directory entries for the root dir
.396853	8f 24 a0 38	sta $38a024	                    STA @l ROOT_DIR_MAX_ENTRY
.396857	4a		lsr a		                    LSR A                                   ; 16 entries per sector
.396858	4a		lsr a		                    LSR A
.396859	4a		lsr a		                    LSR A
.39685a	4a		lsr a		                    LSR A                                   ; So now A is the number of sectors in the root directory
.39685b	18		clc		                    CLC
.39685c	6f 20 a0 38	adc $38a020	                    ADC @L ROOT_DIR_FIRST_CLUSTER           ; Add that to the first sector LBA for the root directory
.396860	8f 1c a0 38	sta $38a01c	                    STA @l CLUSTER_BEGIN_LBA                ; And that is the LBA for the first cluster
.396864	a9 00 00	lda #$0000	                    LDA #0
.396867	8f 1e a0 38	sta $38a01e	                    STA @l CLUSTER_BEGIN_LBA+2
.39686b	af 13 a3 38	lda $38a313	                    LDA DOS_SECTOR+BPB_TOTAL_SECTORS        ; Set the sector limit
.39686f	8f 08 a0 38	sta $38a008	                    STA @l SECTORCOUNT
.396873	a9 00 00	lda #$0000	                    LDA #0
.396876	8f 0a a0 38	sta $38a00a	                    STA @l SECTORCOUNT+2
.39687a	af 0e a3 38	lda $38a30e	                    LDA DOS_SECTOR+BPB_RSRVCLUS_OFF         ; Get the number of reserved clusters
.39687e	8f 0c a0 38	sta $38a00c	                    STA @l NUM_RSRV_SEC
.396882	a9 00 02	lda #$0200	                    LDA #DOS_SECTOR_SIZE                    ; Set the size of a FAT12 cluster
.396885	8f 0e a0 38	sta $38a00e	                    STA @l CLUSTER_SIZE
.396889	e2 20		sep #$20	                SEP #$20        ; set A short
.39688b	af 26 a3 38	lda $38a326	                    LDA DOS_SECTOR+BPB_SIGNATUREB           ; Is signature B $29?
.39688f	c9 29		cmp #$29	                    CMP #BPB_EXTENDED_RECORD
.396891	80 14		bra $3968a7	                    BRA no_volume_id                        ; No: there is no volume ID
.396893					is_extended
.396893	c2 20		rep #$20	                REP #$20        ; set A long
.396895	af 27 a3 38	lda $38a327	                    LDA DOS_SECTOR+BPB_VOLUMEID             ; Yes: set the volume ID
.396899	8f 26 a0 38	sta $38a026	                    STA @l VOLUME_ID
.39689d	af 29 a3 38	lda $38a329	                    LDA DOS_SECTOR+BPB_VOLUMEID+2
.3968a1	8f 28 a0 38	sta $38a028	                    STA @l VOLUME_ID+2
.3968a5	80 0d		bra $3968b4	                    BRA ret_success
.3968a7					no_volume_id
.3968a7	c2 20		rep #$20	                REP #$20        ; set A long
.3968a9	a9 00 00	lda #$0000	                    LDA #0                                  ; No: blank the Volume ID
.3968ac	8f 26 a0 38	sta $38a026	                    STA @l VOLUME_ID
.3968b0	8f 28 a0 38	sta $38a028	                    STA @L VOLUME_ID+2
.3968b4					ret_success
.3968b4	e2 20		sep #$20	                SEP #$20        ; set A short
.3968b6	a9 00		lda #$00	                    LDA #0
.3968b8	85 20		sta $0320	                    STA BIOS_STATUS
.3968ba	28		plp		                    PLP
.3968bb	2b		pld		                    PLD
.3968bc	ab		plb		                    PLB
.3968bd	38		sec		                    SEC
.3968be	6b		rtl		                    RTL
.3968bf	28		plp		pass_failure        PLP
.3968c0	2b		pld		                    PLD
.3968c1	ab		plb		                    PLB
.3968c2	18		clc		                    CLC
.3968c3	6b		rtl		                    RTL
.3968c4					FDC_CMDBLOCK
.3968c4	8b		phb		                    PHB
.3968c5	0b		phd		                    PHD
.3968c6	08		php		                    PHP
.3968c7	48		pha		                PHA             ; begin setdbr macro
.3968c8	08		php		                PHP
.3968c9	e2 20		sep #$20	                SEP #$20        ; set A short
.3968cb	a9 00		lda #$00	                LDA #0
.3968cd	48		pha		                PHA
.3968ce	ab		plb		                PLB
.3968cf	28		plp		                PLP
.3968d0	68		pla		                PLA             ; end setdbr macro
.3968d1	48		pha		                PHA             ; begin setdp macro
.3968d2	08		php		                PHP
.3968d3	c2 20		rep #$20	                REP #$20        ; set A long
.3968d5	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3968d8	5b		tcd		                TCD
.3968d9	28		plp		                PLP
.3968da	68		pla		                PLA             ; end setdp macro
.3968db	e2 30		sep #$30	                SEP #$30        ; set A&X short
.3968dd	e0 01		cpx #$01	                    CPX #FDC_DEVCMD_MOTOR_ON
.3968df	f0 0f		beq $3968f0	                    BEQ motor_on
.3968e1	e0 02		cpx #$02	                    CPX #FDC_DEVCMD_MOTOR_OFF
.3968e3	f0 11		beq $3968f6	                    BEQ motor_off
.3968e5	e0 03		cpx #$03	                    CPX #FDC_DEVCMD_RECAL
.3968e7	f0 13		beq $3968fc	                    BEQ recalibrate
.3968e9	64 20		stz $0320	ret_success         STZ BIOS_STATUS
.3968eb	28		plp		                    PLP
.3968ec	2b		pld		                    PLD
.3968ed	ab		plb		                    PLB
.3968ee	38		sec		                    SEC
.3968ef	6b		rtl		                    RTL
.3968f0	22 84 62 39	jsl $396284	motor_on            JSL FDC_Motor_On
.3968f4	80 f3		bra $3968e9	                    BRA ret_success
.3968f6	22 b8 62 39	jsl $3962b8	motor_off           JSL FDC_Motor_Off
.3968fa	80 ed		bra $3968e9	                    BRA ret_success
.3968fc	22 e3 62 39	jsl $3962e3	recalibrate         JSL FDC_Recalibrate_Command
.396900	b0 e7		bcs $3968e9	                    BCS ret_success
.396902	28		plp		pass_failure        PLP
.396903	2b		pld		                    PLD
.396904	ab		plb		                    PLB
.396905	18		clc		                    CLC
.396906	6b		rtl		                    RTL
.396907					FDC_CHK_MEDIA
.396907	0b		phd		                    PHD
.396908	08		php		                    PHP
.396909	48		pha		                PHA             ; begin setdp macro
.39690a	08		php		                PHP
.39690b	c2 20		rep #$20	                REP #$20        ; set A long
.39690d	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396910	5b		tcd		                TCD
.396911	28		plp		                PLP
.396912	68		pla		                PLA             ; end setdp macro
.396913	22 84 62 39	jsl $396284	                    JSL FDC_Motor_On                ; Turn on the motor
.396917	e2 20		sep #$20	                SEP #$20        ; set A short
.396919	af f7 13 af	lda $af13f7	                    LDA @l SIO_FDC_DIR              ; Check if the DSKCHG bit is set
.39691d	89 80		bit #$80	                    BIT #FDC_DIR_DSKCHG
.39691f	f0 42		beq $396963	                    BEQ ret_true                    ; If not: assume the disk is present
.396921	a9 00		lda #$00	                    LDA #0
.396923	85 00		sta $0300	                    STA FDC_DRIVE
.396925	a9 00		lda #$00	                    LDA #0
.396927	85 01		sta $0301	                    STA FDC_HEAD
.396929	a9 50		lda #$50	                    LDA #80
.39692b	85 02		sta $0302	                    STA FDC_CYLINDER
.39692d	22 c3 64 39	jsl $3964c3	                    JSL FDC_Seek_Track              ; Attempt to seek to track 80
.396931	90 34		bcc $396967	                    BCC ret_false                   ; If fail: return false
.396933	c2 10		rep #$10	                REP #$10        ; set X long
.396935	a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.396938	a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.39693b	22 26 16 39	jsl $391626	                    JSL IDELAY
.39693f	22 18 63 39	jsl $396318	                    JSL FDC_Sense_Int_Status
.396943	a5 06		lda $0306	                    LDA FDC_ST0
.396945	29 d0		and #$d0	                    AND #%11010000
.396947	d0 1e		bne $396967	                    BNE ret_false
.396949	22 e3 62 39	jsl $3962e3	                    JSL FDC_Recalibrate_Command     ; Attempt to recalibrate
.39694d	90 18		bcc $396967	                    BCC ret_false                   ; If fail: return false
.39694f	a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.396952	a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.396955	22 26 16 39	jsl $391626	                    JSL IDELAY
.396959	22 18 63 39	jsl $396318	                    JSL FDC_Sense_Int_Status
.39695d	a5 06		lda $0306	                    LDA FDC_ST0
.39695f	29 d0		and #$d0	                    AND #%11010000
.396961	d0 04		bne $396967	                    BNE ret_false
.396963					ret_true
.396963	28		plp		                    PLP
.396964	2b		pld		                    PLD
.396965	38		sec		                    SEC
.396966	6b		rtl		                    RTL
.396967					ret_false
.396967	28		plp		                    PLP
.396968	2b		pld		                    PLD
.396969	18		clc		                    CLC
.39696a	6b		rtl		                    RTL
.39696b					FDC_WRITEVBR
.39696b	8b		phb		                    PHB
.39696c	0b		phd		                    PHD
.39696d	08		php		                    PHP
.39696e	48		pha		                PHA             ; begin setdbr macro
.39696f	08		php		                PHP
.396970	e2 20		sep #$20	                SEP #$20        ; set A short
.396972	a9 00		lda #$00	                LDA #0
.396974	48		pha		                PHA
.396975	ab		plb		                PLB
.396976	28		plp		                PLP
.396977	68		pla		                PLA             ; end setdbr macro
.396978	48		pha		                PHA             ; begin setdp macro
.396979	08		php		                PHP
.39697a	c2 20		rep #$20	                REP #$20        ; set A long
.39697c	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39697f	5b		tcd		                TCD
.396980	28		plp		                PLP
.396981	68		pla		                PLA             ; end setdp macro
.396982	22 9a 67 39	jsl $39679a	                    JSL FDC_MOUNT               ; Mount the floppy disk
.396986	c2 30		rep #$30	                REP #$30        ; set A&X long
.396988	a9 00 00	lda #$0000	                    LDA #0                      ; Clear the sector buffer
.39698b	a2 00 00	ldx #$0000	                    LDX #0
.39698e	9f 00 a3 38	sta $38a300,x	clr_loop            STA DOS_SECTOR,X
.396992	e8		inx		                    INX
.396993	e8		inx		                    INX
.396994	e0 00 02	cpx #$0200	                    CPX #512
.396997	d0 f5		bne $39698e	                    BNE clr_loop
.396999	e2 20		sep #$20	                SEP #$20        ; set A short
.39699b	a2 00 00	ldx #$0000	                    LDX #0                      ; Copy the prototype VBR to the sector buffer
.39699e	bf 01 6a 39	lda $396a01,x	copy_loop           LDA FDC_VBR_BEGIN,X
.3969a2	9f 00 a3 38	sta $38a300,x	                    STA DOS_SECTOR,X
.3969a6	e8		inx		                    INX
.3969a7	e0 c9 00	cpx #$00c9	                    CPX #<>(FDC_VBR_END - FDC_VBR_BEGIN + 1)
.3969aa	d0 f2		bne $39699e	                    BNE copy_loop
.3969ac	a0 00 00	ldy #$0000	                    LDY #0                      ; Copy the boot binary path to the VBR
.3969af	a2 40 00	ldx #$0040	                    LDX #FDC_VBR_PATH
.3969b2	b7 3c		lda [$035c],y	path_copy_loop      LDA [DOS_RUN_PTR],Y
.3969b4	9f 00 a3 38	sta $38a300,x	                    STA DOS_SECTOR,X
.3969b8	f0 07		beq $3969c1	                    BEQ path_copy_done
.3969ba	e8		inx		                    INX
.3969bb	c8		iny		                    INY
.3969bc	c0 80 00	cpy #$0080	                    CPY #128
.3969bf	d0 f1		bne $3969b2	                    BNE path_copy_loop
.3969c1					path_copy_done
.3969c1	c2 20		rep #$20	                REP #$20        ; set A long
.3969c3	a9 55 aa	lda #$aa55	                    LDA #$AA55                  ; Set the VBR signature bytes at the end
.3969c6	8f fe a4 38	sta $38a4fe	                    STA DOS_SECTOR+BPB_SIGNATURE
.3969ca	c2 20		rep #$20	                REP #$20        ; set A long
.3969cc	a9 00 a3	lda #$a300	                    LDA #<>DOS_SECTOR           ; Point to the BIOS buffer
.3969cf	85 06		sta $0326	                    STA BIOS_BUFF_PTR
.3969d1	a9 38 00	lda #$0038	                    LDA #`DOS_SECTOR
.3969d4	85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.3969d6	a9 00 00	lda #$0000	                    LDA #0                      ; Set the sector to #0 (boot record)
.3969d9	85 02		sta $0322	                    STA BIOS_LBA
.3969db	85 04		sta $0324	                    STA BIOS_LBA+2
.3969dd	e2 20		sep #$20	                SEP #$20        ; set A short
.3969df	a9 00		lda #$00	                    LDA #BIOS_DEV_FDC
.3969e1	85 01		sta $0321	                    STA BIOS_DEV
.3969e3	22 24 10 38	jsl $381024	                    JSL PUTBLOCK                ; Attempt to write the boot record
.3969e7	b0 09		bcs $3969f2	                    BCS ret_success
.3969e9	22 b8 62 39	jsl $3962b8	                    JSL FDC_Motor_Off
.3969ed	28		plp		                    PLP                         ; Return the failure
.3969ee	2b		pld		                    PLD
.3969ef	ab		plb		                    PLB
.3969f0	18		clc		                    CLC
.3969f1	6b		rtl		                    RTL
.3969f2	22 b8 62 39	jsl $3962b8	ret_success         JSL FDC_Motor_Off
.3969f6	e2 20		sep #$20	                SEP #$20        ; set A short
.3969f8	a9 00		lda #$00	                    LDA #0
.3969fa	85 00		sta $0320	                    STA BIOS_STATUS
.3969fc	28		plp		                    PLP
.3969fd	2b		pld		                    PLD
.3969fe	ab		plb		                    PLB
.3969ff	38		sec		                    SEC
.396a00	6b		rtl		                    RTL
=62					FDC_BOOT_START = 62                         ; Entry point to the boot code
=64					FDC_VBR_PATH = 64                           ; Offset to the path in the VBR
.396a01					FDC_VBR_BEGIN
>396a01	eb 00 90			start               .byte $EB, $00, $90     ; Entry point
>396a04	43 32 35 36 44 4f 53 20		magic               .text "C256DOS "        ; OEM name / magic text for booting
>396a0c	00 02				bytes_per_sec       .word 512               ; How many bytes per sector
>396a0e	01				sec_per_cluster     .byte 1                 ; How many sectors per cluster
>396a0f	01 00				rsrv_sectors        .word 1                 ; Number of reserved sectors
>396a11	02				num_fat             .byte 2                 ; Number of FATs
>396a12	e0 00				max_dir_entry       .word (32-18)*16        ; Total number of root dir entries
>396a14	40 0b				total_sectors       .word 2880              ; Total sectors
>396a16	f0				media_descriptor    .byte $F0               ; 3.5" 1.44 MB floppy 80 tracks, 18 tracks per sector
>396a17	09 00				sec_per_fat         .word 9                 ; Sectors per FAT
>396a19	12 00				sec_per_track       .word 18                ; Sectors per track
>396a1b	02 00				num_head            .word 2                 ; Number of heads
>396a1d	00 00 00 00			ignore2             .dword 0
>396a21	00 00 00 00			fat32_sector        .dword 0                ; # of sectors in FAT32
>396a25	00 00				ignore3             .word 0
>396a27	29				boot_signature      .byte $29
>396a28	78 56 34 12			volume_id           .dword $12345678        ; Replaced by code
>396a2c	55 4e 54 49 54 4c 45 44		volume_name         .text "UNTITLED   "     ; Replace by code
>396a34	20 20 20
>396a37	46 41 54 31 32 20 20 20		fs_type             .text "FAT12   "
.396a3f	80 40		bra $396a81	                    BRA vbr_start
>396a41					file_path           .fill 64                ; Reserve 64 bytes for a path and any options
.396a81					vbr_start
.396a81	c2 20		rep #$20	                REP #$20        ; set A long
.396a83	a9 40 a3	lda #$a340	                    LDA #<>(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.396a86	8f 60 03 00	sta $000360	                    STA @l DOS_RUN_PARAM
.396a8a	a9 38 00	lda #$0038	                    LDA #`(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.396a8d	8f 62 03 00	sta $000362	                    STA @l DOS_RUN_PARAM+2
.396a91	22 80 59 39	jsl $395980	                    JSL IF_RUN              ; And try to execute the binary file
.396a95	b0 0c		bcs $396aa3	                    BCS lock                ; If it returned success... lock up... I guess?
.396a97					error
.396a97	e2 20		sep #$20	                SEP #$20        ; set A short
.396a99	4b		phk		                    PHK                     ; Otherwise, print an error message
.396a9a	ab		plb		                    PLB
.396a9b	62 08 00	per $396aa6	                    PER message
.396a9e	fa		plx		                    PLX
.396a9f	22 1c 10 38	jsl $38101c	                    JSL PUTS
.396aa3	ea		nop		lock                NOP                     ; And lock up
.396aa4	80 fd		bra $396aa3	                    BRA lock
>396aa6	43 6f 75 6c 64 20 6e 6f		message             .null "Could not find a bootable binary.",13
>396aae	74 20 66 69 6e 64 20 61 20 62 6f 6f 74 61 62 6c
>396abe	65 20 62 69 6e 61 72 79 2e 0d 00
.396ac9					FDC_VBR_END

;******  Return to file: src\kernel.asm


;******  Processing file: src\ide_library.asm

.0000					IDE_ID
>0000	00 00				General_Config        .word $0000
>0002	00 00				Obsolete0             .word $0000
>0004	00 00				Specific_Config       .word $0000
>0006	00 00				Obsolete1             .word $0000
>0008	00 00				Retired0              .word $0000
>000a	00 00				Retired1              .word $0000
>000c	00 00				Obsolete2             .word $0000
>000e	00 00				Reserved_CFlash0      .word $0000
>0010	00 00				Reserved_CFlash1      .word $0000
>0012	00 00				Retired2              .word $0000
>0014	00 00 00 00 00 00 00 00		Serial_Number_String  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>001c	00 00 00 00 00 00 00 00 00 00 00 00
>0028	00 00 00 00			Retired3              .word $0000, $0000
>002c	00 00				Obsolete3             .word $0000
>002e	00 00 00 00 00 00 00 00		Firmware_Rev_String   .byte $00, $00, $00, $00, $00, $00, $00, $00
>0036	00 00 00 00 00 00 00 00		Model_Number_String   .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>003e	00 00 00 00 00 00 00 00
>0046	00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>004e	00 00 00 00 00 00 00 00
>0056	00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00
>005e	00 00				Max_Number_Logic_Sec  .word $0000
>0060	00 00				Trusted_Comp_Feature  .word $0000
>0062	00 00 00 00			Capabilities          .word $0000, $0000
>0066	00 00 00 00			Obsolete4             .word $0000, $0000
>006a	00 00				Free_Fall_Control     .word $0000
>006c	00 00 00 00 00 00 00 00		Obsolete5             .word $0000, $0000, $0000, $0000, $0000
>0074	00 00
>0076	00 00				Reserved0             .word $0000
>0078	00 00 00 00			Total_Addy_Logic_Sec  .word $0000, $0000
>007c	00 00				Obsolete6             .word $0000
>007e	00 00 00 00			Reserved1             .word $0000, $0000
>0082	00 00				Min_Multiword_DMA_Trf .word $0000
>0084	00 00				Manu_Recommended_Mult .word $0000
>0086	00 00				Min_PIO_Trf           .word $0000      ; Word 67
>0088	00 00				Min_PIO_Trf_with_IORD .word $0000      ; Word 68
>008a	00 00 00 00			Reserved2             .word $0000, $0000
>008e	00 00 00 00 00 00 00 00		Reserved3             .word $0000, $0000, $0000, $0000
>0096	00 00				Queue_Dept            .word $0000
>0098	00 00				SATA_Capabilities     .word $0000
>009a	00 00				Reserved_SATA         .word $0000
>009c	00 00				Sup_Feat_SATA         .word $0000
>009e	00 00				Sup_Feat_SATA_Enabled .word $0000    ; Word 79
>00a0	00 00				Major_Version_Number  .word $0000    ; Word 80
>00a2	00 00				Minor_Version_Number  .word $0000    ; Word 81
>00a4	00 00 00 00 00 00 00 00		Cmd_And_Features_Sup  .word $0000, $0000, $0000, $0000, $0000, $0000
>00ac	00 00 00 00
>00b0	00 00				UDMA_Modes            .word $0000
>00b2	00 00 00 00			Reserved4             .word $0000, $0000 ; Word 89
>00b6	00 00				Current_APM_Level     .word $0000
>00b8	00 00				Master_Password_Ident .word $0000
>00ba	00 00				Hardware_Reset_Result .word $0000
>00bc	00 00				Current_AAM_Value     .word $0000  ; Word 94
>00be	00 00				Stream_Min_Req_Size   .word $0000  ; Word 95
>00c0	00 00				Stream_Trf_Time_DMA   .word $0000  ; Word 96
>00c2	00 00				Stream_Access_Lat     .word $0000
>00c4	00 00 00 00			Streaming_Perf_Gran   .word $0000, $0000
>00c8	00 00 00 00 00 00 00 00		Tot_Num_Add_Logic_Sec .word $0000, $0000, $0000, $0000
>00d0	00 00				Streaming_Trf_Time    .word $0000 ; Word 104
>00d2	00 00				Reserved5             .word $0000 ; Word 105
.396ac9					IDE_TEST
.396ac9	08		php		                PHP
.396aca	c2 20		rep #$20	                REP #$20        ; set A long
.396acc	a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.396acf	8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.396ad3	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.396ad6	8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.396ada	22 f7 6b 39	jsl $396bf7	                JSL IDE_IDENTIFY
.396ade	b0 03		bcs $396ae3	                BCS id_ok
.396ae0	82 ab 00	brl $396b8e	                BRL done
.396ae3					id_ok
.396ae3	c2 10		rep #$10	                REP #$10        ; set X long
.396ae5	e2 20		sep #$20	                SEP #$20        ; set A short
.396ae7	a0 28 00	ldy #$0028	                LDY #40
.396aea	a2 36 00	ldx #$0036	                LDX #27*2
.396aed	bf 01 a3 38	lda $38a301,x	pr_model        LDA DOS_SECTOR+1,X
.396af1	22 18 10 38	jsl $381018	                JSL PUTC
.396af5	bf 00 a3 38	lda $38a300,x	                LDA DOS_SECTOR,X
.396af9	22 18 10 38	jsl $381018	                JSL PUTC
.396afd	e8		inx		                INX
.396afe	e8		inx		                INX
.396aff	88		dey		                DEY
.396b00	88		dey		                DEY
.396b01	d0 ea		bne $396aed	                BNE pr_model
.396b03	c2 10		rep #$10	                REP #$10        ; set X long
.396b05	e2 20		sep #$20	                SEP #$20        ; set A short
.396b07	a0 14 00	ldy #$0014	                LDY #20
.396b0a	a2 14 00	ldx #$0014	                LDX #10*2
.396b0d	bf 01 a3 38	lda $38a301,x	pr_serial       LDA DOS_SECTOR+1,X
.396b11	22 18 10 38	jsl $381018	                JSL PUTC
.396b15	bf 00 a3 38	lda $38a300,x	                LDA DOS_SECTOR,X
.396b19	22 18 10 38	jsl $381018	                JSL PUTC
.396b1d	e8		inx		                INX
.396b1e	e8		inx		                INX
.396b1f	88		dey		                DEY
.396b20	88		dey		                DEY
.396b21	d0 ea		bne $396b0d	                BNE pr_serial
.396b23	22 6c 10 38	jsl $38106c	                JSL PRINTCR
.396b27	c2 30		rep #$30	                REP #$30        ; set A&X long
.396b29	a9 01 00	lda #$0001	                LDA #1                 ; Set LBA = 1
.396b2c	8f 22 03 00	sta $000322	                STA @l BIOS_LBA
.396b30	a9 00 00	lda #$0000	                LDA #0
.396b33	8f 24 03 00	sta $000324	                STA @l BIOS_LBA+2
.396b37	a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.396b3a	8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.396b3e	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.396b41	8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.396b45	a2 00 00	ldx #$0000	                LDX #0                  ; Initialize the block to some recognizable data
.396b48	a9 a5 5a	lda #$5aa5	                LDA #$5AA5
.396b4b	9f 00 a3 38	sta $38a300,x	init_loop       STA DOS_SECTOR,X
.396b4f	e8		inx		                INX
.396b50	e8		inx		                INX
.396b51	e0 00 02	cpx #$0200	                CPX #512
.396b54	d0 f5		bne $396b4b	                BNE init_loop
.396b56	22 16 6d 39	jsl $396d16	                JSL IDE_PUTBLOCK        ; Attempt to write the block
.396b5a	b0 06		bcs $396b62	                BCS read_sect1
.396b5c	22 6c 10 38	jsl $38106c	                JSL PRINTCR
.396b60	80 2c		bra $396b8e	                BRA done
.396b62	a9 01 00	lda #$0001	read_sect1      LDA #1                 ; Set LBA = 1
.396b65	8f 22 03 00	sta $000322	                STA @l BIOS_LBA
.396b69	a9 00 00	lda #$0000	                LDA #0
.396b6c	8f 24 03 00	sta $000324	                STA @l BIOS_LBA+2
.396b70	a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS
.396b73	8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.396b77	a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.396b7a	8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.396b7e	22 85 6c 39	jsl $396c85	                JSL IDE_GETBLOCK        ; Attempt to read the block
.396b82	b0 06		bcs $396b8a	                BCS all_ok
.396b84	22 6c 10 38	jsl $38106c	                JSL PRINTCR
.396b88	80 04		bra $396b8e	                BRA done
.396b8a					all_ok
.396b8a	22 6c 10 38	jsl $38106c	                JSL PRINTCR
.396b8e	28		plp		done            PLP
.396b8f	6b		rtl		                RTL
.396b90					IDE_INIT
.396b90	e2 20		sep #$20	                SEP #$20        ; set A short
.396b92	20 b3 6b	jsr $396bb3	              JSR IDE_DRIVE_BSY ; Check to see if drive is busy
.396b95	a9 00		lda #$00	              LDA #$00
.396b97	8f 35 e8 af	sta $afe835	              STA IDE_CLDR_HI
.396b9b	8f 34 e8 af	sta $afe834	              STA IDE_CLDR_LO
.396b9f	8f 32 e8 af	sta $afe832	              STA IDE_SECT_CNT
.396ba3	a9 01		lda #$01	              LDA #$01
.396ba5	8f 33 e8 af	sta $afe833	              STA IDE_SECT_SRT
.396ba9	a9 a0		lda #$a0	              LDA #$A0 ; HEAD 0 - Select Master Drive
.396bab	8f 36 e8 af	sta $afe836	              STA IDE_HEAD
.396baf	20 d1 6b	jsr $396bd1	              JSR IDE_DRV_READY_NOTBUSY
.396bb2	6b		rtl		              RTL
.396bb3					IDE_DRIVE_BSY
.396bb3	08		php		                PHP
.396bb4	e2 20		sep #$20	                SEP #$20        ; set A short
.396bb6	af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.396bba	29 80		and #$80	                AND #IDE_STAT_BSY         ; Check for RDY Bit, this needs to be 1'b1
.396bbc	c9 80		cmp #$80	                CMP #IDE_STAT_BSY         ; If not go read again
.396bbe	f0 f6		beq $396bb6	                BEQ loop
.396bc0	28		plp		                PLP
.396bc1	60		rts		                RTS
.396bc2					IDE_DRIVE_READY
.396bc2	08		php		                PHP
.396bc3	e2 20		sep #$20	                SEP #$20        ; set A short
.396bc5	af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.396bc9	29 40		and #$40	                AND #IDE_STAT_DRDY          ; Check to see if the Busy Signal is Cleared
.396bcb	c9 40		cmp #$40	                CMP #IDE_STAT_DRDY          ; if it is still one, then go back to read again.
.396bcd	d0 f6		bne $396bc5	                BNE loop
.396bcf	28		plp		                PLP
.396bd0	60		rts		                RTS
.396bd1					IDE_DRV_READY_NOTBUSY
.396bd1	08		php		                PHP
.396bd2	e2 20		sep #$20	                SEP #$20        ; set A short
.396bd4	af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT                 ; Check the status
.396bd8	29 c0		and #$c0	                AND #IDE_STAT_BSY | IDE_STAT_DRDY
.396bda	c9 40		cmp #$40	                CMP #IDE_STAT_DRDY                  ; Is it READY but not BUSY?
.396bdc	d0 f6		bne $396bd4	                BNE loop                            ; No: keep waiting
.396bde	28		plp		ret_success     PLP                                 ; Return success
.396bdf	38		sec		                SEC
.396be0	60		rts		                RTS
.396be1	8f 07 03 00	sta $000307	ret_failure     STA @l FDC_ST1                      ; Save the status code to FDC_ST1
.396be5	28		plp		                PLP                                 ; Return failure
.396be6	18		clc		                CLC
.396be7	60		rts		                RTS
.396be8					IDE_NOT_DRQ
.396be8	08		php		                PHP
.396be9	e2 20		sep #$20	                SEP #$20        ; set A short
.396beb	af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT     ; Get the status
.396bef	29 08		and #$08	                AND #IDE_STAT_DRQ
.396bf1	c9 08		cmp #$08	                CMP #IDE_STAT_DRQ       ; Is the DRQ bit set?
.396bf3	d0 f6		bne $396beb	                BNE loop                ; No: keep waiting
.396bf5	28		plp		                PLP
.396bf6	60		rts		                RTS
.396bf7					IDE_IDENTIFY
.396bf7	5a		phy		                PHY
.396bf8	8b		phb		                PHB
.396bf9	0b		phd		                PHD
.396bfa	08		php		                PHP
.396bfb	48		pha		                PHA             ; begin setdbr macro
.396bfc	08		php		                PHP
.396bfd	e2 20		sep #$20	                SEP #$20        ; set A short
.396bff	a9 00		lda #$00	                LDA #0
.396c01	48		pha		                PHA
.396c02	ab		plb		                PLB
.396c03	28		plp		                PLP
.396c04	68		pla		                PLA             ; end setdbr macro
.396c05	48		pha		                PHA             ; begin setdp macro
.396c06	08		php		                PHP
.396c07	c2 20		rep #$20	                REP #$20        ; set A long
.396c09	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.396c0c	5b		tcd		                TCD
.396c0d	28		plp		                PLP
.396c0e	68		pla		                PLA             ; end setdp macro
.396c0f	e2 20		sep #$20	                SEP #$20        ; set A short
.396c11	20 d1 6b	jsr $396bd1	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.396c14	a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.396c16	29 07		and #$07	                AND #$07
.396c18	09 a0		ora #$a0	                ORA #%10100000                  ; Select DEV=0 and LBA mode = 1
.396c1a	8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.396c1e	20 d1 6b	jsr $396bd1	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.396c21	e2 20		sep #$20	                SEP #$20        ; set A short
.396c23	a9 00		lda #$00	                LDA #0                          ; Clear sector count and LBA
.396c25	8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.396c29	8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.396c2d	8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.396c31	8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.396c35	a9 ec		lda #$ec	                LDA #IDE_CMD_IDENTIFY           ; The IDENTIFY command
.396c37	8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT             ; Check the status
.396c3b	f0 29		beq $396c66	                BEQ no_media                    ; If 0: there is no drive
.396c3d	20 b3 6b	jsr $396bb3	                JSR IDE_DRIVE_BSY               ; Othewise: wait for drive to not be busy
.396c40	20 d1 6b	jsr $396bd1	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396c43	90 2d		bcc $396c72	                BCC ret_failure                 ; If an error occurred, return it
.396c45	c2 30		rep #$30	                REP #$30        ; set A&X long
.396c47	a0 00 00	ldy #$0000	                LDY #0
.396c4a	af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.396c4e	97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.396c50	c8		iny		                INY                             ; Move to the next position
.396c51	c8		iny		                INY
.396c52	c0 00 02	cpy #$0200	                CPY #512
.396c55	d0 f3		bne $396c4a	                BNE read_loop
.396c57					ret_success
.396c57	e2 20		sep #$20	                SEP #$20        ; set A short
.396c59	a9 00		lda #$00	                LDA #0
.396c5b	85 00		sta $0320	                STA BIOS_STATUS
.396c5d	8d 06 03	sta $0306	                STA @w FDC_ST0
.396c60	28		plp		                PLP                             ; Return success
.396c61	2b		pld		                PLD
.396c62	ab		plb		                PLB
.396c63	7a		ply		                PLY
.396c64	38		sec		                SEC
.396c65	6b		rtl		                RTL
.396c66					no_media
.396c66	e2 20		sep #$20	                SEP #$20        ; set A short
.396c68	a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA
.396c6a	80 0a		bra $396c76	                BRA pass_failure
.396c6c					not_ata
.396c6c	e2 20		sep #$20	                SEP #$20        ; set A short
.396c6e	a9 8a		lda #$8a	                LDA #BIOS_ERR_NOTATA
.396c70	80 04		bra $396c76	                BRA pass_failure
.396c72					ret_failure
.396c72	e2 20		sep #$20	                SEP #$20        ; set A short
.396c74	a9 82		lda #$82	                LDA #BIOS_ERR_READ
.396c76	85 00		sta $0320	pass_failure    STA BIOS_STATUS
.396c78	af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.396c7c	8d 06 03	sta $0306	                STA @w FDC_ST0
.396c7f	28		plp		                PLP
.396c80	2b		pld		                PLD
.396c81	ab		plb		                PLB
.396c82	7a		ply		                PLY
.396c83	18		clc		                CLC
.396c84	6b		rtl		                RTL
.396c85					IDE_GETBLOCK
.396c85	5a		phy		                PHY
.396c86	8b		phb		                PHB
.396c87	0b		phd		                PHD
.396c88	08		php		                PHP
.396c89	48		pha		                PHA             ; begin setdbr macro
.396c8a	08		php		                PHP
.396c8b	e2 20		sep #$20	                SEP #$20        ; set A short
.396c8d	a9 00		lda #$00	                LDA #0
.396c8f	48		pha		                PHA
.396c90	ab		plb		                PLB
.396c91	28		plp		                PLP
.396c92	68		pla		                PLA             ; end setdbr macro
.396c93	48		pha		                PHA             ; begin setdp macro
.396c94	08		php		                PHP
.396c95	c2 20		rep #$20	                REP #$20        ; set A long
.396c97	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.396c9a	5b		tcd		                TCD
.396c9b	28		plp		                PLP
.396c9c	68		pla		                PLA             ; end setdp macro
.396c9d	e2 20		sep #$20	                SEP #$20        ; set A short
.396c9f	20 d1 6b	jsr $396bd1	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.396ca2	a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.396ca4	29 07		and #$07	                AND #$07
.396ca6	09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.396ca8	8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.396cac	20 d1 6b	jsr $396bd1	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.396caf	e2 20		sep #$20	                SEP #$20        ; set A short
.396cb1	a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.396cb3	8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.396cb7	a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.396cb9	8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.396cbd	a5 03		lda $0323	                LDA BIOS_LBA+1
.396cbf	8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.396cc3	a5 04		lda $0324	                LDA BIOS_LBA+2
.396cc5	8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.396cc9	a9 21		lda #$21	                LDA #IDE_CMD_READ_SECTOR        ; The READ SECTOR command
.396ccb	8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.396ccf	ea		nop		                NOP                             ; Wait about 500ns
.396cd0	ea		nop		                NOP
.396cd1	ea		nop		                NOP
.396cd2	ea		nop		                NOP
.396cd3	20 d1 6b	jsr $396bd1	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396cd6	90 2b		bcc $396d03	                BCC ret_failure                 ; If an error occurred, return it
.396cd8	e2 20		sep #$20	                SEP #$20        ; set A short
.396cda	af 30 e8 af	lda $afe830	                LDA @l IDE_DATA                 ; Read and toss out one byte from the 8-bit interface
.396cde	a0 00 00	ldy #$0000	                LDY #0
.396ce1	c2 20		rep #$20	                REP #$20        ; set A long
.396ce3	af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.396ce7	97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.396ce9	c8		iny		                INY                             ; Move to the next position
.396cea	c8		iny		                INY
.396ceb	c0 00 02	cpy #$0200	                CPY #512
.396cee	d0 f3		bne $396ce3	                BNE read_loop
.396cf0	ea		nop		                NOP                             ; Wait about 500ns
.396cf1	ea		nop		                NOP
.396cf2	ea		nop		                NOP
.396cf3	ea		nop		                NOP
.396cf4					ret_success
.396cf4	e2 20		sep #$20	                SEP #$20        ; set A short
.396cf6	a9 00		lda #$00	                LDA #0
.396cf8	85 00		sta $0320	                STA BIOS_STATUS
.396cfa	8d 06 03	sta $0306	                STA @w FDC_ST0
.396cfd	28		plp		                PLP                             ; Return success
.396cfe	2b		pld		                PLD
.396cff	ab		plb		                PLB
.396d00	7a		ply		                PLY
.396d01	38		sec		                SEC
.396d02	6b		rtl		                RTL
.396d03					ret_failure
.396d03	e2 20		sep #$20	                SEP #$20        ; set A short
.396d05	af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.396d09	8d 06 03	sta $0306	                STA @w FDC_ST0
.396d0c	a9 82		lda #$82	                LDA #BIOS_ERR_READ
.396d0e	85 00		sta $0320	                STA BIOS_STATUS
.396d10	28		plp		                PLP
.396d11	2b		pld		                PLD
.396d12	ab		plb		                PLB
.396d13	7a		ply		                PLY
.396d14	18		clc		                CLC
.396d15	6b		rtl		                RTL
.396d16					IDE_PUTBLOCK
.396d16	5a		phy		                PHY
.396d17	8b		phb		                PHB
.396d18	0b		phd		                PHD
.396d19	08		php		                PHP
.396d1a	48		pha		                PHA             ; begin setdbr macro
.396d1b	08		php		                PHP
.396d1c	e2 20		sep #$20	                SEP #$20        ; set A short
.396d1e	a9 00		lda #$00	                LDA #0
.396d20	48		pha		                PHA
.396d21	ab		plb		                PLB
.396d22	28		plp		                PLP
.396d23	68		pla		                PLA             ; end setdbr macro
.396d24	48		pha		                PHA             ; begin setdp macro
.396d25	08		php		                PHP
.396d26	c2 20		rep #$20	                REP #$20        ; set A long
.396d28	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.396d2b	5b		tcd		                TCD
.396d2c	28		plp		                PLP
.396d2d	68		pla		                PLA             ; end setdp macro
.396d2e	e2 20		sep #$20	                SEP #$20        ; set A short
.396d30	20 d1 6b	jsr $396bd1	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.396d33	a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.396d35	29 07		and #$07	                AND #$07
.396d37	09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.396d39	8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.396d3d	20 d1 6b	jsr $396bd1	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.396d40	e2 20		sep #$20	                SEP #$20        ; set A short
.396d42	a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.396d44	8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.396d48	a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.396d4a	8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.396d4e	a5 03		lda $0323	                LDA BIOS_LBA+1
.396d50	8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.396d54	a5 04		lda $0324	                LDA BIOS_LBA+2
.396d56	8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.396d5a	a9 30		lda #$30	                LDA #IDE_CMD_WRITE_SECTOR       ; The READ SECTOR command
.396d5c	8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.396d60	ea		nop		                NOP                             ; Wait about 500ns
.396d61	ea		nop		                NOP
.396d62	ea		nop		                NOP
.396d63	ea		nop		                NOP
.396d64	20 d1 6b	jsr $396bd1	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396d67	90 33		bcc $396d9c	                BCC ret_failure                 ; If an error occurred, return it
.396d69	c2 30		rep #$30	                REP #$30        ; set A&X long
.396d6b	a0 00 00	ldy #$0000	                LDY #0
.396d6e	b7 06		lda [$0326],y	read_loop       LDA [BIOS_BUFF_PTR],Y           ; Get the word from the buffer
.396d70	8f 38 e8 af	sta $afe838	                STA @l IDE_DATA_LO              ; Save the word to the device
.396d74	c8		iny		                INY                             ; Move to the next position
.396d75	c8		iny		                INY
.396d76	c0 00 02	cpy #$0200	                CPY #512
.396d79	d0 f3		bne $396d6e	                BNE read_loop
.396d7b	ea		nop		                NOP                             ; Wait about 500ns
.396d7c	ea		nop		                NOP
.396d7d	ea		nop		                NOP
.396d7e	ea		nop		                NOP
.396d7f	20 d1 6b	jsr $396bd1	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396d82	90 18		bcc $396d9c	                BCC ret_failure                 ; If an error occurred, return it
.396d84	af 37 e8 af	lda $afe837	                LDA @l IDE_CMD_STAT             ; Check the status
.396d88	89 21 00	bit #$0021	                BIT #IDE_STAT_ERR | IDE_STAT_DF
.396d8b	d0 0f		bne $396d9c	                BNE ret_failure                 ; If error: return failure
.396d8d					ret_success
.396d8d	e2 20		sep #$20	                SEP #$20        ; set A short
.396d8f	a9 00		lda #$00	                LDA #0
.396d91	85 00		sta $0320	                STA BIOS_STATUS
.396d93	8d 06 03	sta $0306	                STA @w FDC_ST0
.396d96	28		plp		                PLP                             ; Return success
.396d97	2b		pld		                PLD
.396d98	ab		plb		                PLB
.396d99	7a		ply		                PLY
.396d9a	38		sec		                SEC
.396d9b	6b		rtl		                RTL
.396d9c					ret_failure
.396d9c	e2 20		sep #$20	                SEP #$20        ; set A short
.396d9e	af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.396da2	8d 06 03	sta $0306	                STA @w FDC_ST0
.396da5	a9 82		lda #$82	                LDA #BIOS_ERR_READ
.396da7	85 00		sta $0320	                STA BIOS_STATUS
.396da9	28		plp		                PLP
.396daa	2b		pld		                PLD
.396dab	ab		plb		                PLB
.396dac	7a		ply		                PLY
.396dad	18		clc		                CLC
.396dae	6b		rtl		                RTL

;******  Return to file: src\kernel.asm

.396daf					KERNEL_DATA
>396daf	20 20 20 20 0b 0c 0b 0c		greet_msg       .text $20, $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, " FFFFFFF MMMMMMMM XX    XXX " ,$0D
>396db7	0b 0c 0b 0c 0b 0c 20 46 46 46 46 46 46 46 20 4d
>396dc7	4d 4d 4d 4d 4d 4d 4d 20 58 58 20 20 20 20 58 58
>396dd7	58 20 0d
>396dda	20 20 20 0b 0c 0b 0c 0b		                .text $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM   XX XXX   ",$0D
>396de2	0c 0b 0c 0b 0c 20 46 46 20 20 20 20 20 20 4d 4d
>396df2	20 4d 4d 20 4d 4d 20 20 20 58 58 20 58 58 58 20
>396e02	20 20 0d
>396e05	20 20 0b 0c 0b 0c 0b 0c		                .text $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FFFFF   MM MM MM    XXX      ",$0D
>396e0d	0b 0c 0b 0c 20 46 46 46 46 46 20 20 20 4d 4d 20
>396e1d	4d 4d 20 4d 4d 20 20 20 20 58 58 58 20 20 20 20
>396e2d	20 20 0d
>396e30	20 0b 0c 0b 0c 0b 0c 0b		                .text $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM  XXX  XX     ",$0D
>396e38	0c 0b 0c 20 46 46 20 20 20 20 20 20 4d 4d 20 4d
>396e48	4d 20 4d 4d 20 20 58 58 58 20 20 58 58 20 20 20
>396e58	20 20 0d
>396e5b	0b 0c 0b 0c 0b 0c 0b 0c		                .text $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM XXX     XX    ",$0D
>396e63	0b 0c 20 46 46 20 20 20 20 20 20 4d 4d 20 4d 4d
>396e73	20 4d 4d 20 58 58 58 20 20 20 20 20 58 58 20 20
>396e83	20 20 0d
>396e86	0d 43 32 35 36 20 46 4f		                .text $0D, "C256 FOENIX FMX -- 3,670,016 Bytes Free", $0D
>396e8e	45 4e 49 58 20 46 4d 58 20 2d 2d 20 33 2c 36 37
>396e9e	30 2c 30 31 36 20 42 79 74 65 73 20 46 72 65 65
>396eae	0d
>396eaf	77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com - Kernel version: "
>396eb7	66 6f 65 6e 69 78 2e 63 6f 6d 20 2d 20 4b 65 72
>396ec7	6e 65 6c 20 76 65 72 73 69 6f 6e 3a 20

;******  Processing file: src\version.asm

>396ed4	76 30 2e 31 2e 30 2d 61		.text "v0.1.0-alpha+916 (2020-09-17)"
>396edc	6c 70 68 61 2b 39 31 36 20 28 32 30 32 30 2d 30
>396eec	39 2d 31 37 29

;******  Return to file: src\kernel.asm

>396ef1	0d 00				                .text $0D,$00
.396ef3					old_pc_style_stat
>396ef3	1d 1d 1d 1d 1d 1d 8d 8d		greet_clr_line1 .text $1D, $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>396efb	4d 4d 2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd
>396f0b	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396f1b	fd fd
>396f1d	1d 1d 1d 1d 1d 8d 8d 4d		greet_clr_line2 .text $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>396f25	4d 2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd
>396f35	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396f45	fd fd
>396f47	1d 1d 1d 1d 8d 8d 4d 4d		greet_clr_line3 .text $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>396f4f	2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd fd
>396f5f	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396f6f	fd fd
>396f71	1d 1d 1d 8d 8d 4d 4d 2d		greet_clr_line4 .text $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>396f79	2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd fd fd
>396f89	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396f99	fd fd
>396f9b	1d 1d 8d 8d 4d 4d 2d 2d		greet_clr_line5 .text $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>396fa3	5d 5d fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396fb3	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396fc3	fd fd
>396fc5	00 00 00 ff			fg_color_lut	  .text $00, $00, $00, $FF
>396fc9	00 00 80 ff			                .text $00, $00, $80, $FF
>396fcd	00 80 00 ff			                .text $00, $80, $00, $FF
>396fd1	80 00 00 ff			                .text $80, $00, $00, $FF
>396fd5	00 80 80 ff			                .text $00, $80, $80, $FF
>396fd9	80 80 00 ff			                .text $80, $80, $00, $FF
>396fdd	80 00 80 ff			                .text $80, $00, $80, $FF
>396fe1	80 80 80 ff			                .text $80, $80, $80, $FF
>396fe5	00 45 ff ff			                .text $00, $45, $FF, $FF
>396fe9	13 45 8b ff			                .text $13, $45, $8B, $FF
>396fed	00 00 20 ff			                .text $00, $00, $20, $FF
>396ff1	00 20 00 ff			                .text $00, $20, $00, $FF
>396ff5	20 00 00 ff			                .text $20, $00, $00, $FF
>396ff9	20 20 20 ff			                .text $20, $20, $20, $FF
>396ffd	40 40 40 ff			                .text $40, $40, $40, $FF
>397001	ff ff ff ff			                .text $FF, $FF, $FF, $FF
>397005	00 00 00 ff			bg_color_lut	  .text $00, $00, $00, $FF
>397009	00 00 80 ff			                .text $00, $00, $80, $FF
>39700d	00 80 00 ff			                .text $00, $80, $00, $FF
>397011	80 00 00 ff			                .text $80, $00, $00, $FF
>397015	00 20 20 ff			                .text $00, $20, $20, $FF
>397019	20 20 00 ff			                .text $20, $20, $00, $FF
>39701d	20 00 20 ff			                .text $20, $00, $20, $FF
>397021	20 20 20 ff			                .text $20, $20, $20, $FF
>397025	1e 69 d2 ff			                .text $1E, $69, $D2, $FF
>397029	13 45 8b ff			                .text $13, $45, $8B, $FF
>39702d	00 00 20 ff			                .text $00, $00, $20, $FF
>397031	00 20 00 ff			                .text $00, $20, $00, $FF
>397035	40 00 00 ff			                .text $40, $00, $00, $FF
>397039	10 10 10 ff			                .text $10, $10, $10, $FF
>39703d	40 40 40 ff			                .text $40, $40, $40, $FF
>397041	ff ff ff ff			                .text $FF, $FF, $FF, $FF
>397045	43 6d 64 20 30 78 41 41		pass_tst0xAAmsg .text "Cmd 0xAA Test passed...", $0D, $00
>39704d	20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>39705d	00
>39705e	43 6d 64 20 30 78 41 42		pass_tst0xABmsg .text "Cmd 0xAB Test passed...", $0D, $00
>397066	20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>397076	00
>397077	43 6d 64 20 30 78 36 30		pass_cmd0x60msg .text "Cmd 0x60 Executed.", $0D, $00
>39707f	20 45 78 65 63 75 74 65 64 2e 0d 00
>39708b	43 6d 64 20 30 78 46 46		pass_cmd0xFFmsg .text "Cmd 0xFF (Reset) Done.", $0D, $00
>397093	20 28 52 65 73 65 74 29 20 44 6f 6e 65 2e 0d 00
>3970a3	43 6d 64 20 30 78 45 45		pass_cmd0xEEmsg .text "Cmd 0xEE Echo Test passed...", $0D, $00
>3970ab	20 45 63 68 6f 20 54 65 73 74 20 70 61 73 73 65
>3970bb	64 2e 2e 2e 0d 00
>3970c1	4b 65 79 62 6f 61 72 64		Success_kb_init .text "Keyboard Present", $0D, $00
>3970c9	20 50 72 65 73 65 6e 74 0d 00
>3970d3	4e 6f 20 4b 65 79 62 6f		Failed_kb_init  .text "No Keyboard Attached or Failed Init...", $0D, $00
>3970db	61 72 64 20 41 74 74 61 63 68 65 64 20 6f 72 20
>3970eb	46 61 69 6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>3970fb	4e 4f 20 53 49 47 4e 41		bmp_parser_err0 .text "NO SIGNATURE FOUND.", $00
>397103	54 55 52 45 20 46 4f 55 4e 44 2e 00
>39710f	42 4d 50 20 4c 4f 41 44		bmp_parser_msg0 .text "BMP LOADED.", $00
>397117	45 44 2e 00
>39711b	45 58 45 43 55 54 49 4e		bmp_parser_msg1 .text "EXECUTING BMP PARSER", $00
>397123	47 20 42 4d 50 20 50 41 52 53 45 52 00
>397130	49 44 45 20 48 44 44 20		IDE_HDD_Present_msg0 .text "IDE HDD Present:", $00
>397138	50 72 65 73 65 6e 74 3a 00
>397141	42 6f 6f 74 20 44 49 50		boot_invalid    .null "Boot DIP switch settings are invalid."
>397149	20 73 77 69 74 63 68 20 73 65 74 74 69 6e 67 73
>397159	20 61 72 65 20 69 6e 76 61 6c 69 64 2e 00
>397167	50 72 65 73 73 20 52 20		boot_retry      .null "Press R to retry, B to go to BASIC.", 13
>39716f	74 6f 20 72 65 74 72 79 2c 20 42 20 74 6f 20 67
>39717f	6f 20 74 6f 20 42 41 53 49 43 2e 0d 00
>39718c	55 6e 61 62 6c 65 20 74		sdc_err_boot    .null "Unable to read the SD card."
>397194	6f 20 72 65 61 64 20 74 68 65 20 53 44 20 63 61
>3971a4	72 64 2e 00
>3971a8	55 6e 61 62 6c 65 20 74		ide_err_boot    .null "Unable to read from the IDE drive."
>3971b0	6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>3971c0	49 44 45 20 64 72 69 76 65 2e 00
>3971cb	55 6e 61 62 6c 65 20 74		fdc_err_boot    .null "Unable to read from the floppy drive."
>3971d3	6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>3971e3	66 6c 6f 70 70 79 20 64 72 69 76 65 2e 00
>3971f1	42 6f 6f 74 69 6e 67 20		fdc_boot        .null "Booting from floppy..."
>3971f9	66 72 6f 6d 20 66 6c 6f 70 70 79 2e 2e 2e 00
>397208	0d 52 45 41 44 59 2e 00		ready_msg       .null $0D,"READY."
>397210	41 42 4f 52 54 20 45 52		error_01        .null "ABORT ERROR"
>397218	52 4f 52 00
>39721c	30 31 32 33 34 35 36 37		hex_digits      .text "0123456789ABCDEF",0
>397224	38 39 41 42 43 44 45 46 00
>39722d					.align 256
>397300	00 1b 31 32 33 34 35 36		ScanCode_Press_Set1   .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>397308	37 38 39 30 2d 3d 08 09
>397310	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>397318	6f 70 5b 5d 0d 00 61 73
>397320	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>397328	27 60 00 5c 7a 78 63 76
>397330	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $81, $82, $83, $84, $85    ; $30
>397338	00 20 00 81 82 83 84 85
>397340	86 87 88 89 8a 00 00 00		                      .text $86, $87, $88, $89, $8A, $00, $00, $00, $11, $00, $00, $9D, $00, $1D, $00, $00    ; $40
>397348	11 00 00 9d 00 1d 00 00
>397350	91 00 00 00 00 00 00 8b		                      .text $91, $00, $00, $00, $00, $00, $00, $8B, $8C, $00, $00, $00, $00, $00, $00, $00    ; $50
>397358	8c 00 00 00 00 00 00 00
>397360	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>397368	00 00 00 00 00 00 00 00
>397370	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>397378	00 00 00 00 00 00 00 00
>397380	00 00 21 40 23 24 25 5e		ScanCode_Shift_Set1   .text $00, $00, $21, $40, $23, $24, $25, $5E, $26, $2A, $28, $29, $5F, $2B, $08, $09    ; $00
>397388	26 2a 28 29 5f 2b 08 09
>397390	51 57 45 52 54 59 55 49		                      .text $51, $57, $45, $52, $54, $59, $55, $49, $4F, $50, $7B, $7D, $0D, $00, $41, $53    ; $10
>397398	4f 50 7b 7d 0d 00 41 53
>3973a0	44 46 47 48 4a 4b 4c 3a		                      .text $44, $46, $47, $48, $4A, $4B, $4C, $3A, $22, $7E, $00, $5C, $5A, $58, $43, $56    ; $20
>3973a8	22 7e 00 5c 5a 58 43 56
>3973b0	42 4e 4d 3c 3e 3f 00 00		                      .text $42, $4E, $4D, $3C, $3E, $3F, $00, $00, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>3973b8	00 20 00 00 00 00 00 00
>3973c0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>3973c8	00 00 00 00 00 00 00 00
>3973d0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3973d8	00 00 00 00 00 00 00 00
>3973e0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3973e8	00 00 00 00 00 00 00 00
>3973f0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3973f8	00 00 00 00 00 00 00 00
>397400	00 1b 31 32 33 34 35 36		ScanCode_Ctrl_Set1    .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>397408	37 38 39 30 2d 3d 08 09
>397410	11 17 05 12 14 19 15 09		                      .text $11, $17, $05, $12, $14, $19, $15, $09, $0F, $10, $5B, $5D, $0D, $00, $01, $13    ; $10
>397418	0f 10 5b 5d 0d 00 01 13
>397420	04 06 07 08 0a 0b 0c 3b		                      .text $04, $06, $07, $08, $0A, $0B, $0C, $3B, $27, $00, $00, $5C, $1A, $18, $03, $16    ; $20
>397428	27 00 00 5c 1a 18 03 16
>397430	02 0e 0d 2c 2e 2f 00 2a		                      .text $02, $0E, $0D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>397438	00 20 00 00 00 00 00 00
>397440	00 00 00 00 00 18 00 00		                      .text $00, $00, $00, $00, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>397448	00 00 00 00 00 00 00 00
>397450	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>397458	00 00 00 00 00 00 00 00
>397460	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>397468	00 00 00 00 00 00 00 00
>397470	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>397478	00 00 00 00 00 00 00 00
>397480	00 1b 31 32 33 34 35 36		ScanCode_Alt_Set1     .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>397488	37 38 39 30 2d 3d 08 09
>397490	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>397498	6f 70 5b 5d 0d 00 61 73
>3974a0	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>3974a8	27 60 00 5c 7a 78 63 76
>3974b0	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>3974b8	00 20 00 00 00 00 00 00
>3974c0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>3974c8	00 00 00 00 00 00 00 00
>3974d0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3974d8	00 00 00 00 00 00 00 00
>3974e0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3974e8	00 00 00 00 00 00 00 00
>3974f0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3974f8	00 00 00 00 00 00 00 00
>397500	00 1b 31 32 33 34 35 36		ScanCode_NumLock_Set1 .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>397508	37 38 39 30 2d 3d 08 09
>397510	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>397518	6f 70 5b 5d 0d 00 61 73
>397520	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>397528	27 60 00 5c 7a 78 63 76
>397530	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>397538	00 20 00 00 00 00 00 00
>397540	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>397548	00 00 00 00 00 00 00 00
>397550	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>397558	00 00 00 00 00 00 00 00
>397560	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>397568	00 00 00 00 00 00 00 00
>397570	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>397578	00 00 00 00 00 00 00 00
>397580	00 00 00 00 00 00 00 00		ScanCode_Prefix_Set1  .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $00
>397588	00 00 00 00 00 00 00 00
>397590	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $10
>397598	00 00 00 00 00 00 00 00
>3975a0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $20
>3975a8	00 00 00 00 00 00 00 00
>3975b0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $30
>3975b8	00 00 00 00 00 00 00 00
>3975c0	00 00 00 00 00 00 00 01		                      .text $00, $00, $00, $00, $00, $00, $00, $01, $11, $00, $00, $9D, $00, $1D, $00, $05    ; $40
>3975c8	11 00 00 9d 00 1d 00 05
>3975d0	91 00 0f 7f 00 00 00 00		                      .text $91, $00, $0F, $7F, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3975d8	00 00 00 00 00 00 00 00
>3975e0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3975e8	00 00 00 00 00 00 00 00
>3975f0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3975f8	00 00 00 00 00 00 00 00
>397600					.align 256
>397600	00 14 1c 21 26 2a 2e 31		GAMMA_2_2_Tbl         .text  $00, $14, $1c, $21, $26, $2a, $2e, $31, $34, $37, $3a, $3d, $3f, $41, $44, $46
>397608	34 37 3a 3d 3f 41 44 46
>397610	48 4a 4c 4e 50 51 53 55		                      .text  $48, $4a, $4c, $4e, $50, $51, $53, $55, $57, $58, $5a, $5b, $5d, $5e, $60, $61
>397618	57 58 5a 5b 5d 5e 60 61
>397620	63 64 66 67 68 6a 6b 6c		                      .text  $63, $64, $66, $67, $68, $6a, $6b, $6c, $6d, $6f, $70, $71, $72, $73, $75, $76
>397628	6d 6f 70 71 72 73 75 76
>397630	77 78 79 7a 7b 7c 7d 7e		                      .text  $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $80, $81, $82, $83, $84, $85, $86, $87
>397638	80 81 82 83 84 85 86 87
>397640	88 88 89 8a 8b 8c 8d 8e		                      .text  $88, $88, $89, $8a, $8b, $8c, $8d, $8e, $8f, $90, $91, $92, $93, $93, $94, $95
>397648	8f 90 91 92 93 93 94 95
>397650	96 97 98 99 99 9a 9b 9c		                      .text  $96, $97, $98, $99, $99, $9a, $9b, $9c, $9d, $9e, $9e, $9f, $a0, $a1, $a2, $a2
>397658	9d 9e 9e 9f a0 a1 a2 a2
>397660	a3 a4 a5 a5 a6 a7 a8 a8		                      .text  $a3, $a4, $a5, $a5, $a6, $a7, $a8, $a8, $a9, $aa, $ab, $ab, $ac, $ad, $ae, $ae
>397668	a9 aa ab ab ac ad ae ae
>397670	af b0 b0 b1 b2 b2 b3 b4		                      .text  $AF, $b0, $b0, $b1, $b2, $b2, $b3, $b4, $b5, $b5, $b6, $b7, $b7, $b8, $b9, $b9
>397678	b5 b5 b6 b7 b7 b8 b9 b9
>397680	ba bb bb bc bd bd be be		                      .text  $ba, $bb, $bb, $bc, $bd, $bd, $be, $be, $bf, $c0, $c0, $c1, $c2, $c2, $c3, $c4
>397688	bf c0 c0 c1 c2 c2 c3 c4
>397690	c4 c5 c5 c6 c7 c7 c8 c8		                      .text  $c4, $c5, $c5, $c6, $c7, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cb, $cc, $cd, $cd
>397698	c9 ca ca cb cb cc cd cd
>3976a0	ce ce cf d0 d0 d1 d1 d2		                      .text  $ce, $ce, $cf, $d0, $d0, $d1, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d5, $d6, $d6
>3976a8	d2 d3 d4 d4 d5 d5 d6 d6
>3976b0	d7 d8 d8 d9 d9 da da db		                      .text  $d7, $d8, $d8, $d9, $d9, $da, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $df
>3976b8	db dc dc dd de de df df
>3976c0	e0 e0 e1 e1 e2 e2 e3 e3		                      .text  $e0, $e0, $e1, $e1, $e2, $e2, $e3, $e3, $e4, $e4, $e5, $e5, $e6, $e6, $e7, $e7
>3976c8	e4 e4 e5 e5 e6 e6 e7 e7
>3976d0	e8 e8 e9 e9 ea ea eb eb		                      .text  $e8, $e8, $e9, $e9, $ea, $ea, $eb, $eb, $ec, $ec, $ed, $ed, $ee, $ee, $ef, $ef
>3976d8	ec ec ed ed ee ee ef ef
>3976e0	f0 f0 f1 f1 f2 f2 f3 f3		                      .text  $f0, $f0, $f1, $f1, $f2, $f2, $f3, $f3, $f4, $f4, $f5, $f5, $f6, $f6, $f7, $f7
>3976e8	f4 f4 f5 f5 f6 f6 f7 f7
>3976f0	f8 f8 f9 f9 f9 fa fa fb		                      .text  $f8, $f8, $f9, $f9, $f9, $fa, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $fe, $ff
>3976f8	fb fc fc fd fd fe fe ff
>397700					.align 256
>397700	00 0b 11 15 19 1c 1f 22		GAMMA_1_8_Tbl         .text  $00, $0b, $11, $15, $19, $1c, $1f, $22, $25, $27, $2a, $2c, $2e, $30, $32, $34
>397708	25 27 2a 2c 2e 30 32 34
>397710	36 38 3a 3c 3d 3f 41 43		                      .text  $36, $38, $3a, $3c, $3d, $3f, $41, $43, $44, $46, $47, $49, $4a, $4c, $4d, $4f
>397718	44 46 47 49 4a 4c 4d 4f
>397720	50 51 53 54 55 57 58 59		                      .text  $50, $51, $53, $54, $55, $57, $58, $59, $5b, $5c, $5d, $5e, $60, $61, $62, $63
>397728	5b 5c 5d 5e 60 61 62 63
>397730	64 65 67 68 69 6a 6b 6c		                      .text  $64, $65, $67, $68, $69, $6a, $6b, $6c, $6d, $6e, $70, $71, $72, $73, $74, $75
>397738	6d 6e 70 71 72 73 74 75
>397740	76 77 78 79 7a 7b 7c 7d		                      .text  $76, $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $7f, $80, $81, $82, $83, $84, $84
>397748	7e 7f 80 81 82 83 84 84
>397750	85 86 87 88 89 8a 8b 8c		                      .text  $85, $86, $87, $88, $89, $8a, $8b, $8c, $8d, $8e, $8e, $8f, $90, $91, $92, $93
>397758	8d 8e 8e 8f 90 91 92 93
>397760	94 95 95 96 97 98 99 9a		                      .text  $94, $95, $95, $96, $97, $98, $99, $9a, $9a, $9b, $9c, $9d, $9e, $9f, $9f, $a0
>397768	9a 9b 9c 9d 9e 9f 9f a0
>397770	a1 a2 a3 a3 a4 a5 a6 a6		                      .text  $a1, $a2, $a3, $a3, $a4, $a5, $a6, $a6, $a7, $a8, $a9, $aa, $aa, $ab, $ac, $ad
>397778	a7 a8 a9 aa aa ab ac ad
>397780	ad ae af b0 b0 b1 b2 b3		                      .text  $ad, $ae, $af, $b0, $b0, $b1, $b2, $b3, $b3, $b4, $b5, $b6, $b6, $b7, $b8, $b8
>397788	b3 b4 b5 b6 b6 b7 b8 b8
>397790	b9 ba bb bb bc bd bd be		                      .text  $b9, $ba, $bb, $bb, $bc, $bd, $bd, $be, $bf, $bf, $c0, $c1, $c2, $c2, $c3, $c4
>397798	bf bf c0 c1 c2 c2 c3 c4
>3977a0	c4 c5 c6 c6 c7 c8 c8 c9		                      .text  $c4, $c5, $c6, $c6, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cc, $cc, $cd, $ce, $ce
>3977a8	ca ca cb cc cc cd ce ce
>3977b0	cf d0 d0 d1 d2 d2 d3 d4		                      .text  $cf, $d0, $d0, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d6, $d6, $d7, $d7, $d8, $d9
>3977b8	d4 d5 d6 d6 d7 d7 d8 d9
>3977c0	d9 da db db dc dc dd de		                      .text  $d9, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $e0, $e0, $e1, $e1, $e2, $e3
>3977c8	de df e0 e0 e1 e1 e2 e3
>3977d0	e3 e4 e4 e5 e6 e6 e7 e7		                      .text  $e3, $e4, $e4, $e5, $e6, $e6, $e7, $e7, $e8, $e9, $e9, $ea, $ea, $eb, $ec, $ec
>3977d8	e8 e9 e9 ea ea eb ec ec
>3977e0	ed ed ee ef ef f0 f0 f1		                      .text  $ed, $ed, $ee, $ef, $ef, $f0, $f0, $f1, $f1, $f2, $f3, $f3, $f4, $f4, $f5, $f5
>3977e8	f1 f2 f3 f3 f4 f4 f5 f5
>3977f0	f6 f7 f7 f8 f8 f9 f9 fa		                      .text  $f6, $f7, $f7, $f8, $f8, $f9, $f9, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $ff
>3977f8	fb fb fc fc fd fd fe ff
>397800					.align 256
>397800	1d c8 a7 ac 10 d6 52 7c		RANDOM_LUT_Tbl		    .text  $1d, $c8, $a7, $ac, $10, $d6, $52, $7c, $83, $dd, $ce, $39, $cd, $c5, $3b, $15
>397808	83 dd ce 39 cd c5 3b 15
>397810	22 55 3b 94 e0 33 1f 38						              .text  $22, $55, $3b, $94, $e0, $33, $1f, $38, $87, $12, $31, $65, $89, $27, $88, $42
>397818	87 12 31 65 89 27 88 42
>397820	b2 32 72 84 b2 b2 31 52						              .text  $b2, $32, $72, $84, $b2, $b2, $31, $52, $94, $ce, $56, $ec, $fe, $da, $58, $c9
>397828	94 ce 56 ec fe da 58 c9
>397830	c8 5b 53 2a 08 3b 19 c1						              .text  $c8, $5b, $53, $2a, $08, $3b, $19, $c1, $d0, $10, $2c, $b2, $4b, $ea, $32, $61
>397838	d0 10 2c b2 4b ea 32 61
>397840	da 34 33 8f 2b da 49 89						              .text  $da, $34, $33, $8f, $2b, $da, $49, $89, $a1, $e6, $ca, $2d, $b3, $ce, $b0, $79
>397848	a1 e6 ca 2d b3 ce b0 79
>397850	44 aa 32 82 91 e9 29 16						              .text  $44, $aa, $32, $82, $91, $e9, $29, $16, $5f, $e3, $fb, $bd, $15, $2e, $be, $f5
>397858	5f e3 fb bd 15 2e be f5
>397860	e9 4a e4 2e 60 24 94 35						              .text  $e9, $4a, $e4, $2e, $60, $24, $94, $35, $8d, $8f, $2c, $80, $0a, $5e, $99, $36
>397868	8d 8f 2c 80 0a 5e 99 36
>397870	ac ab 21 26 42 7c 5e bc						              .text  $ac, $ab, $21, $26, $42, $7c, $5e, $bc, $13, $52, $44, $2f, $e3, $ef, $44, $a2
>397878	13 52 44 2f e3 ef 44 a2
>397880	86 c1 9c 47 5f 36 6d 02						              .text  $86, $c1, $9c, $47, $5f, $36, $6d, $02, $be, $23, $02, $58, $0a, $52, $5e, $b4
>397888	be 23 02 58 0a 52 5e b4
>397890	9f 06 08 c9 97 cb 9e dd						              .text  $9f, $06, $08, $c9, $97, $cb, $9e, $dd, $d5, $cf, $3e, $df, $c4, $9e, $da, $bb
>397898	d5 cf 3e df c4 9e da bb
>3978a0	9b 5d c9 f5 d9 c3 7e 87						              .text  $9b, $5d, $c9, $f5, $d9, $c3, $7e, $87, $77, $7d, $b1, $3b, $4a, $68, $35, $6e
>3978a8	77 7d b1 3b 4a 68 35 6e
>3978b0	ee 47 ad 8f fd 73 2e 46						              .text  $ee, $47, $ad, $8f, $fd, $73, $2e, $46, $b5, $8f, $44, $63, $55, $6f, $e1, $50
>3978b8	b5 8f 44 63 55 6f e1 50
>3978c0	f4 b6 a3 4f 68 c4 a5 a4						              .text  $f4, $b6, $a3, $4f, $68, $c4, $a5, $a4, $57, $74, $b9, $bd, $05, $14, $50, $eb
>3978c8	57 74 b9 bd 05 14 50 eb
>3978d0	a5 5c 57 2f 99 dc 2e 8a						              .text  $a5, $5c, $57, $2f, $99, $dc, $2e, $8a, $44, $bc, $ec, $db, $22, $58, $fc, $be
>3978d8	44 bc ec db 22 58 fc be
>3978e0	5f 3f 50 bd 2a 36 ab ae						              .text  $5f, $3f, $50, $bd, $2a, $36, $ab, $ae, $24, $aa, $82, $11, $5c, $9f, $43, $4d
>3978e8	24 aa 82 11 5c 9f 43 4d
>3978f0	8f 0c 20 00 91 b6 45 9e						              .text  $8f, $0c, $20, $00, $91, $b6, $45, $9e, $3e, $3d, $66, $7e, $0a, $1c, $6b, $74
>3978f8	3e 3d 66 7e 0a 1c 6b 74
>397900					.align 16
>397900	00 01 01 00 00 00 00 00		MOUSE_POINTER_PTR     .text $00,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00
>397908	01 01 01 00 00 00 00 00
>397910	01 ff ff 01 00 00 01 01		                      .text $01,$FF,$FF,$01,$00,$00,$01,$01,$FF,$FF,$FF,$01,$00,$00,$00,$00
>397918	ff ff ff 01 00 00 00 00
>397920	01 ff ff ff 01 01 55 ff		                      .text $01,$FF,$FF,$FF,$01,$01,$55,$FF,$01,$55,$FF,$FF,$01,$00,$00,$00
>397928	01 55 ff ff 01 00 00 00
>397930	01 55 ff ff ff ff 01 55		                      .text $01,$55,$FF,$FF,$FF,$FF,$01,$55,$FF,$FF,$FF,$FF,$01,$00,$00,$00
>397938	ff ff ff ff 01 00 00 00
>397940	00 01 55 ff ff ff ff ff		                      .text $00,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$00,$00
>397948	ff ff 01 ff ff 01 00 00
>397950	00 00 01 55 ff ff ff ff		                      .text $00,$00,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$FF,$01,$00,$00
>397958	01 ff ff 01 ff 01 00 00
>397960	00 00 01 01 55 ff ff ff		                      .text $00,$00,$01,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$FF,$01,$00,$00
>397968	ff 01 ff ff ff 01 00 00
>397970	00 00 01 55 01 55 ff ff		                      .text $00,$00,$01,$55,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$01,$00
>397978	ff ff ff ff ff 01 01 00
>397980	00 00 01 55 55 55 ff ff		                      .text $00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01
>397988	ff ff ff ff 01 ff ff 01
>397990	00 00 00 01 55 55 55 ff		                      .text $00,$00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01
>397998	ff ff ff ff ff ff ff 01
>3979a0	00 00 00 00 01 55 55 55		                      .text $00,$00,$00,$00,$01,$55,$55,$55,$55,$55,$01,$FF,$FF,$55,$01,$00
>3979a8	55 55 01 ff ff 55 01 00
>3979b0	00 00 00 00 00 01 01 01		                      .text $00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$55,$FF,$55,$01,$00,$00
>3979b8	01 01 55 ff 55 01 00 00
>3979c0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$55,$01,$00,$00,$00
>3979c8	01 55 55 55 01 00 00 00
>3979d0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$01,$00,$00,$00,$00
>3979d8	01 55 55 01 00 00 00 00
>3979e0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00
>3979e8	00 01 01 00 00 00 00 00
>3979f0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>3979f8	00 00 00 00 00 00 00 00
.3ff000					FONT_4_BANK0
>3ff000	00 00 00 00 00 00 00 00		.binary "FONT/Bm437_PhoenixEGA_8x8.bin", 0, 2048
>3ff008	7e 81 a5 81 bd 99 81 7e 3c 7e db ff c3 7e 3c 00
>3ff018	00 ee fe fe 7c 38 10 00 10 38 7c fe 7c 38 10 00
>3ff028	00 3c 18 ff ff 08 18 00 10 38 7c fe fe 10 38 00
>3ff038	00 00 18 3c 18 00 00 00 ff ff e7 c3 e7 ff ff ff
>3ff048	00 3c 42 81 81 42 3c 00 ff c3 bd 7e 7e bd c3 ff
>3ff058	01 03 07 0f 1f 3f 7f ff ff fe fc f8 f0 e0 c0 80
>3ff068	04 06 07 04 04 fc f8 00 0c 0a 0d 0b f9 f9 1f 1f
>3ff078	00 92 7c 44 c6 7c 92 00 00 00 60 78 7e 78 60 00
>3ff088	00 00 06 1e 7e 1e 06 00 18 7e 18 18 18 18 7e 18
>3ff098	66 66 66 66 66 00 66 00 ff b6 76 36 36 36 36 00
>3ff0a8	7e c1 dc 22 22 1f 83 7e 00 00 00 7e 7e 00 00 00
>3ff0b8	18 7e 18 18 7e 18 00 ff 18 7e 18 18 18 18 18 00
>3ff0c8	18 18 18 18 18 7e 18 00 00 04 06 ff 06 04 00 00
>3ff0d8	00 20 60 ff 60 20 00 00 00 00 00 c0 c0 c0 ff 00
>3ff0e8	00 24 66 ff 66 24 00 00 00 00 10 38 7c fe 00 00
>3ff0f8	00 00 00 fe 7c 38 10 00 00 00 00 00 00 00 00 00
>3ff108	30 30 30 30 30 00 30 00 66 66 00 00 00 00 00 00
>3ff118	6c 6c fe 6c fe 6c 6c 00 10 7c d2 7c 86 7c 10 00
>3ff128	f0 96 fc 18 3e 72 de 00 30 48 30 78 ce cc 78 00
>3ff138	0c 0c 18 00 00 00 00 00 10 60 c0 c0 c0 60 10 00
>3ff148	10 0c 06 06 06 0c 10 00 00 54 38 fe 38 54 00 00
>3ff158	00 18 18 7e 18 18 00 00 00 00 00 00 00 00 18 70
>3ff168	00 00 00 7e 00 00 00 00 00 00 00 00 00 00 18 00
>3ff178	02 06 0c 18 30 60 c0 00 7c ce de f6 e6 e6 7c 00
>3ff188	18 38 78 18 18 18 3c 00 7c c6 06 0c 30 60 fe 00
>3ff198	7c c6 06 3c 06 c6 7c 00 0e 1e 36 66 fe 06 06 00
>3ff1a8	fe c0 c0 fc 06 06 fc 00 7c c6 c0 fc c6 c6 7c 00
>3ff1b8	fe 06 0c 18 30 60 60 00 7c c6 c6 7c c6 c6 7c 00
>3ff1c8	7c c6 c6 7e 06 c6 7c 00 00 30 00 00 00 30 00 00
>3ff1d8	00 30 00 00 00 30 20 00 00 1c 30 60 30 1c 00 00
>3ff1e8	00 00 7e 00 7e 00 00 00 00 70 18 0c 18 70 00 00
>3ff1f8	7c c6 0c 18 30 00 30 00 7c 82 9a aa aa 9e 7c 00
>3ff208	7c c6 c6 fe c6 c6 c6 00 fc 66 66 7c 66 66 fc 00
>3ff218	7c c6 c0 c0 c0 c6 7c 00 fc 66 66 66 66 66 fc 00
>3ff228	fe 62 68 78 68 62 fe 00 fe 62 68 78 68 60 f0 00
>3ff238	7c c6 c6 c0 de c6 7c 00 c6 c6 c6 fe c6 c6 c6 00
>3ff248	3c 18 18 18 18 18 3c 00 1e 0c 0c 0c 0c cc 78 00
>3ff258	c6 cc d8 f0 d8 cc c6 00 f0 60 60 60 60 62 fe 00
>3ff268	c6 ee fe d6 c6 c6 c6 00 c6 e6 f6 de ce c6 c6 00
>3ff278	7c c6 c6 c6 c6 c6 7c 00 fc 66 66 7c 60 60 f0 00
>3ff288	7c c6 c6 c6 c6 c6 7c 0c fc 66 66 7c 66 66 e6 00
>3ff298	7c c6 c0 7c 06 c6 7c 00 7e 5a 18 18 18 18 3c 00
>3ff2a8	c6 c6 c6 c6 c6 c6 7c 00 c6 c6 c6 c6 c6 6c 38 00
>3ff2b8	c6 c6 c6 c6 d6 ee c6 00 c6 6c 38 38 38 6c c6 00
>3ff2c8	66 66 66 3c 18 18 3c 00 fe c6 0c 18 30 66 fe 00
>3ff2d8	1c 18 18 18 18 18 1c 00 c0 60 30 18 0c 06 02 00
>3ff2e8	70 30 30 30 30 30 70 00 00 00 10 38 6c c6 00 00
>3ff2f8	00 00 00 00 00 00 00 ff 30 30 18 00 00 00 00 00
>3ff308	00 00 7c 06 7e c6 7e 00 c0 c0 fc c6 c6 c6 fc 00
>3ff318	00 00 7c c6 c0 c6 7c 00 06 06 7e c6 c6 c6 7e 00
>3ff328	00 00 7c c6 fe c0 7c 00 3c 66 60 f0 60 60 60 00
>3ff338	00 00 7e c6 c6 7e 06 7c c0 c0 fc c6 c6 c6 c6 00
>3ff348	18 00 38 18 18 18 3c 00 00 0c 00 1c 0c 0c cc 78
>3ff358	c0 c0 c6 d8 f0 d8 c6 00 38 18 18 18 18 18 3c 00
>3ff368	00 00 ee fe d6 c6 c6 00 00 00 fc c6 c6 c6 c6 00
>3ff378	00 00 7c c6 c6 c6 7c 00 00 00 fc c6 c6 fc c0 c0
>3ff388	00 00 7e c6 c6 7e 06 06 00 00 de 76 60 60 60 00
>3ff398	00 00 7c c0 7c 06 7c 00 18 18 7e 18 18 18 1e 00
>3ff3a8	00 00 c6 c6 c6 c6 7e 00 00 00 c6 c6 c6 6c 38 00
>3ff3b8	00 00 c6 c6 d6 fe c6 00 00 00 c6 6c 38 6c c6 00
>3ff3c8	00 00 c6 c6 c6 7e 06 7c 00 00 fe 0c 18 60 fe 00
>3ff3d8	0e 18 18 70 18 18 0e 00 18 18 18 00 18 18 18 00
>3ff3e8	e0 30 30 1c 30 30 e0 00 00 00 70 9a 0e 00 00 00
>3ff3f8	00 00 18 3c 66 ff 00 00 7c c6 c0 c0 c6 7c 18 70
>3ff408	66 00 c6 c6 c6 c6 7e 00 0e 18 7c c6 fe c0 7c 00
>3ff418	18 24 7c 06 7e c6 7e 00 66 00 7c 06 7e c6 7e 00
>3ff428	38 0c 7c 06 7e c6 7e 00 18 00 7c 06 7e c6 7e 00
>3ff438	00 00 7c c0 c0 7c 18 70 18 24 7c c6 fe c0 7c 00
>3ff448	66 00 7c c6 fe c0 7c 00 70 18 7c c6 fe c0 7c 00
>3ff458	66 00 38 18 18 18 3c 00 18 24 38 18 18 18 3c 00
>3ff468	38 0c 38 18 18 18 3c 00 66 00 7c c6 fe c6 c6 00
>3ff478	18 00 7c c6 fe c6 c6 00 0e 18 fe 60 78 60 fe 00
>3ff488	00 00 7c 1a 7e d8 7e 00 7e d8 d8 de f8 d8 de 00
>3ff498	18 24 7c c6 c6 c6 7c 00 66 00 7c c6 c6 c6 7c 00
>3ff4a8	38 0c 7c c6 c6 c6 7c 00 18 24 c6 c6 c6 c6 7e 00
>3ff4b8	38 0c c6 c6 c6 c6 7e 00 66 00 c6 c6 c6 7e 06 7c
>3ff4c8	66 7c c6 c6 c6 c6 7c 00 c6 00 c6 c6 c6 c6 7c 00
>3ff4d8	18 7c c6 c0 c6 7c 18 00 1e 32 30 78 30 70 fe 00
>3ff4e8	66 3c 18 7e 18 3c 18 00 fc c6 fc c0 cc de cc 0e
>3ff4f8	00 1c 32 30 fc 30 f0 00 0e 18 7c 06 7e c6 7e 00
>3ff508	1a 30 38 18 18 18 3c 00 0e 18 7c c6 c6 c6 7c 00
>3ff518	0e 18 c6 c6 c6 c6 7e 00 66 98 fc c6 c6 c6 c6 00
>3ff528	66 98 e6 f6 de ce c6 00 7c 06 7e c6 7e 00 fe 00
>3ff538	7c c6 c6 c6 7c 00 fe 00 18 00 18 30 60 c6 7c 00
>3ff548	00 00 fe c0 c0 c0 c0 00 00 00 fe 06 06 06 06 00
>3ff558	c0 c0 c0 de 06 0c 1e 00 c0 c0 c0 cc 1c 3e 0c 00
>3ff568	30 00 30 30 30 30 30 00 00 36 6c d8 6c 36 00 00
>3ff578	00 d8 6c 36 6c d8 00 00 aa aa aa aa aa aa aa aa
>3ff588	aa 55 aa 55 aa 55 aa 55 44 22 44 22 44 22 44 22
>3ff598	18 18 18 18 18 18 18 18 18 18 18 f8 18 18 18 18
>3ff5a8	18 18 18 f8 18 f8 18 18 36 36 36 f6 36 36 36 36
>3ff5b8	00 00 00 fe 36 36 36 36 00 00 00 f8 18 f8 18 18
>3ff5c8	36 36 36 f6 06 f6 36 36 36 36 36 36 36 36 36 36
>3ff5d8	00 00 00 fe 06 f6 36 36 36 36 36 f6 06 fe 00 00
>3ff5e8	36 36 36 fe 00 00 00 00 18 18 18 f8 18 f8 00 00
>3ff5f8	00 00 00 f8 18 18 18 18 18 18 18 1f 00 00 00 00
>3ff608	18 18 18 ff 00 00 00 00 00 00 00 ff 18 18 18 18
>3ff618	18 18 18 1f 18 18 18 18 00 00 00 ff 00 00 00 00
>3ff628	18 18 18 ff 18 18 18 18 18 18 18 1f 18 1f 18 18
>3ff638	36 36 36 37 36 36 36 36 36 36 36 37 30 3f 00 00
>3ff648	00 00 00 3f 30 37 36 36 36 36 36 f7 00 ff 00 00
>3ff658	00 00 00 ff 00 f7 36 36 36 36 36 37 30 37 36 36
>3ff668	00 00 00 ff 00 ff 00 00 36 36 36 f7 00 f7 36 36
>3ff678	18 18 18 ff 00 ff 00 00 36 36 36 ff 00 00 00 00
>3ff688	00 00 00 ff 00 ff 18 18 00 00 00 ff 36 36 36 36
>3ff698	36 36 36 3f 00 00 00 00 18 18 18 1f 18 1f 00 00
>3ff6a8	00 00 00 1f 18 1f 18 18 00 00 00 3f 36 36 36 36
>3ff6b8	36 36 36 ff 36 36 36 36 18 18 18 ff 18 ff 18 18
>3ff6c8	18 18 18 f8 00 00 00 00 00 00 00 1f 18 18 18 18
>3ff6d8	ff ff ff ff ff ff ff ff 00 00 00 00 ff ff ff ff
>3ff6e8	f0 f0 f0 f0 f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f
>3ff6f8	ff ff ff ff 00 00 00 00 00 00 77 98 98 77 00 00
>3ff708	1c 36 66 fc c6 c6 fc c0 fe 62 60 60 60 60 60 00
>3ff718	00 00 ff 66 66 66 66 00 fe 62 30 18 30 62 fe 00
>3ff728	00 00 3f 66 c6 cc 78 00 00 00 33 33 33 3e 30 f0
>3ff738	00 00 ff 18 18 18 18 00 3c 18 3c 66 66 3c 18 3c
>3ff748	00 7c c6 fe c6 7c 00 00 00 7e c3 c3 c3 66 e7 00
>3ff758	1e 19 3c 66 c6 cc 78 00 00 00 66 99 99 66 00 00
>3ff768	00 03 7c ce e6 7c c0 00 00 3e c0 fe c0 3e 00 00
>3ff778	00 7e c3 c3 c3 c3 00 00 00 fe 00 fe 00 fe 00 00
>3ff788	18 18 7e 18 18 7e 00 00 70 18 0c 18 70 00 fe 00
>3ff798	1c 30 60 30 1c 00 fe 00 00 0e 1b 18 18 18 18 18
>3ff7a8	18 18 18 18 18 d8 70 00 00 18 00 7e 00 18 00 00
>3ff7b8	00 76 dc 00 76 dc 00 00 3c 66 3c 00 00 00 00 00
>3ff7c8	00 18 3c 18 00 00 00 00 00 00 00 00 18 00 00 00
>3ff7d8	0f 0c 0c 0c ec 6c 38 00 d8 ec cc cc 00 00 00 00
>3ff7e8	f0 30 c0 f0 00 00 00 00 00 00 00 3c 3c 3c 3c 00
>3ff7f8	00 00 00 00 00 00 00 00
.3ff800					FONT_4_BANK1
>3ff800	00 00 00 00 00 00 00 00		.binary "FONT/CBM-ASCII_8x8.bin", 0, 2048
>3ff808	7c 82 aa 82 ba 92 82 7c 7c fe d6 fe c6 ee fe 7c
>3ff818	ff fd fb f5 eb d5 ab ff ff e1 fd 85 85 87 87 ff
>3ff828	ff bd db e7 e7 db bd ff ff 81 81 bd bd bd 81 ff
>3ff838	ff ff ff ff ff 81 81 ff 00 08 10 20 10 08 00 00
>3ff848	00 24 14 0c 14 24 00 00 00 8e 88 8c 88 e8 00 00
>3ff858	00 00 00 00 00 00 00 00 00 ee 88 cc 88 88 00 00
>3ff868	00 00 04 14 3c 10 00 00 00 30 4c 4c 30 00 00 00
>3ff878	00 38 28 38 28 00 00 00 ff 81 bd bd bd bd 81 ff
>3ff888	ff 55 aa 55 aa 55 aa ff ab d5 ab d5 ab d5 ab d5
>3ff898	ff 81 81 81 81 81 81 ff ff f9 e1 81 81 e1 f9 ff
>3ff8a8	ff 9f 87 81 81 87 9f ff ff e7 e7 c3 c3 81 81 ff
>3ff8b8	ff 81 81 c3 c3 e7 e7 ff 00 26 54 04 04 04 06 00
>3ff8c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 3 times (48 bytes)...
>3ff908	10 10 10 10 00 10 00 00 24 24 24 00 00 00 00 00
>3ff918	24 7e 24 24 7e 24 00 00 10 3c 50 38 14 78 10 00
>3ff928	62 64 08 10 20 4c 8c 00 30 48 48 30 58 4c 4c 38
>3ff938	10 10 10 00 00 00 00 00 08 10 20 20 20 20 10 08
>3ff948	10 08 04 04 04 04 08 10 00 24 18 7e 18 24 00 00
>3ff958	00 10 10 7c 10 10 00 00 00 00 00 00 10 10 20 00
>3ff968	00 00 00 3c 00 00 00 00 00 00 00 00 18 18 00 00
>3ff978	04 04 08 08 10 10 20 20 3c 46 4a 52 62 42 3c 00
>3ff988	10 30 10 10 10 10 38 00 38 44 04 18 20 40 7c 00
>3ff998	38 44 04 18 04 44 38 00 08 18 28 48 7c 08 08 00
>3ff9a8	7c 40 78 04 04 44 38 00 38 44 40 78 44 44 38 00
>3ff9b8	7c 44 04 08 08 10 10 00 38 44 44 38 44 44 38 00
>3ff9c8	38 44 44 3c 04 44 38 00 00 00 18 00 00 18 00 00
>3ff9d8	00 00 18 00 00 18 18 30 00 08 10 20 10 08 00 00
>3ff9e8	00 00 3c 00 3c 00 00 00 00 10 08 04 08 10 00 00
>3ff9f8	38 44 04 08 10 00 10 00 38 44 4c 4c 40 44 38 00
>3ffa08	10 28 44 7c 44 44 00 00 78 44 78 44 44 78 00 00
>3ffa18	38 44 40 40 44 38 00 00 78 44 44 44 44 78 00 00
>3ffa28	7c 40 78 40 40 7c 00 00 7c 40 78 40 40 40 00 00
>3ffa38	38 44 40 4c 44 38 00 00 44 44 7c 44 44 44 00 00
>3ffa48	38 10 10 10 10 38 00 00 1c 08 08 08 48 30 00 00
>3ffa58	24 28 30 30 28 24 00 00 20 20 20 20 20 3c 00 00
>3ffa68	44 6c 7c 54 44 44 00 00 44 64 54 4c 44 44 00 00
>3ffa78	38 44 44 44 44 38 00 00 78 44 44 78 40 40 00 00
>3ffa88	38 44 44 44 44 38 0c 00 78 44 44 78 48 44 00 00
>3ffa98	3c 40 38 04 04 78 00 00 7c 10 10 10 10 10 00 00
>3ffaa8	44 44 44 44 44 38 00 00 44 44 44 44 28 10 00 00
>3ffab8	82 82 82 92 92 6c 00 00 42 24 18 18 24 42 00 00
>3ffac8	44 44 28 10 10 10 00 00 7c 08 10 20 40 7c 00 00
>3ffad8	38 20 20 20 20 20 38 00 20 20 10 10 08 08 04 04
>3ffae8	38 08 08 08 08 08 38 00 00 10 28 44 00 00 00 00
>3ffaf8	00 00 00 00 00 00 00 7e 40 20 10 00 00 00 00 00
>3ffb08	00 38 04 3c 64 3c 00 00 40 40 78 44 44 78 00 00
>3ffb18	00 00 38 40 40 38 00 00 04 04 3c 44 44 3c 00 00
>3ffb28	00 38 44 7c 40 3c 00 00 0c 10 3c 10 10 10 00 00
>3ffb38	00 00 3c 44 44 3c 04 78 40 40 78 44 44 44 00 00
>3ffb48	10 00 30 10 10 38 00 00 08 00 08 08 08 08 08 30
>3ffb58	20 20 24 38 28 24 00 00 30 10 10 10 10 10 00 00
>3ffb68	00 00 68 54 54 44 00 00 00 00 38 24 24 24 00 00
>3ffb78	00 00 38 44 44 38 00 00 00 00 78 44 44 78 40 40
>3ffb88	00 00 3c 44 44 3c 04 04 00 00 78 44 40 40 00 00
>3ffb98	00 00 1c 30 0c 38 00 00 00 10 7c 10 10 10 0c 00
>3ffba8	00 00 44 44 44 3c 00 00 00 00 42 42 24 18 00 00
>3ffbb8	00 00 82 82 92 6c 00 00 00 00 24 18 18 24 00 00
>3ffbc8	00 00 24 24 24 1c 04 38 00 00 7c 18 30 7c 00 00
>3ffbd8	0c 10 10 30 30 10 10 0c 18 18 18 00 18 18 18 00
>3ffbe8	30 08 08 0c 0c 08 08 30 00 00 32 7e 4c 00 00 00
>3ffbf8	00 00 10 28 38 00 00 00 00 00 3c 3c 3c 3c 00 00
>3ffc08	00 00 3c 24 24 3c 00 00 00 00 18 3c 3c 18 00 00
>3ffc18	00 00 18 24 24 18 00 00 18 24 24 18 00 00 00 00
>3ffc28	00 3c 42 42 66 24 66 00 00 18 00 18 0c 06 66 3c
>3ffc38	0c 12 30 7c 30 62 fc 00 1c 20 70 20 70 20 1c 00
>3ffc48	02 06 0c d8 f0 e0 c0 00 18 18 ff 00 00 ff 00 00
>3ffc58	00 00 ff 00 00 ff 18 18 24 24 24 e7 e7 24 24 24
>3ffc68	18 18 ff 00 00 ff 18 18 24 24 24 27 27 24 24 24
>3ffc78	24 24 24 e4 e4 24 24 24 00 00 00 ff ff ff ff ff
>3ffc88	00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>3ffc98	ff ff ff ff ff ff ff 00 ff ff ff ff ff ff 00 00
>3ffca8	ff ff ff ff ff 00 00 00 ff ff ff ff 00 00 00 00
>3ffcb8	f8 f8 f8 f8 f8 f8 f8 f8 fc fc fc fc fc fc fc fc
>3ffcc8	fe fe fe fe fe fe fe fe 7f 7f 7f 7f 7f 7f 7f 7f
>3ffcd8	3f 3f 3f 3f 3f 3f 3f 3f 1f 1f 1f 1f 1f 1f 1f 1f
>3ffce8	0f 0f 0f 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00
>3ffcf8	00 00 00 00 00 00 00 00 ff ff ff ff ff ff ff ff
>3ffd08	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 00 ff ff ff ff
>3ffd18	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>3ffd28	80 80 80 80 80 80 80 80 aa 55 aa 55 aa 55 aa 55
>3ffd38	01 01 01 01 01 01 01 01 00 00 00 00 aa 55 aa 55
>3ffd48	ff fe fc f8 f0 e0 c0 80 03 03 03 03 03 03 03 03
>3ffd58	18 18 18 1f 1f 18 18 18 00 00 00 00 0f 0f 0f 0f
>3ffd68	18 18 18 1f 1f 00 00 00 00 00 00 f8 f8 18 18 18
>3ffd78	00 00 00 00 00 00 ff ff 00 00 00 1f 1f 18 18 18
>3ffd88	18 18 18 ff ff 00 00 00 00 00 00 ff ff 18 18 18
>3ffd98	18 18 18 f8 f8 18 18 18 c0 c0 c0 c0 c0 c0 c0 c0
>3ffda8	e0 e0 e0 e0 e0 e0 e0 e0 07 07 07 07 07 07 07 07
>3ffdb8	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00
>3ffdc8	00 00 00 00 00 ff ff ff 03 03 03 03 03 03 ff ff
>3ffdd8	00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>3ffde8	18 18 18 f8 f8 00 00 00 f0 f0 f0 f0 00 00 00 00
>3ffdf8	f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 ff ff 00 00 00
>3ffe08	08 1c 3e 7f 7f 1c 3e 00 18 18 18 18 18 18 18 18
>3ffe18	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00
>3ffe28	00 ff ff 00 00 00 00 00 00 00 00 00 ff ff 00 00
>3ffe38	30 30 30 30 30 30 30 30 0c 0c 0c 0c 0c 0c 0c 0c
>3ffe48	00 00 00 e0 f0 38 18 18 18 18 1c 0f 07 00 00 00
>3ffe58	18 18 38 f0 e0 00 00 00 c0 c0 c0 c0 c0 c0 ff ff
>3ffe68	c0 e0 70 38 1c 0e 07 03 03 07 0e 1c 38 70 e0 c0
>3ffe78	ff ff c0 c0 c0 c0 c0 c0 ff ff 03 03 03 03 03 03
>3ffe88	00 3c 7e 7e 7e 7e 3c 00 00 00 00 00 00 ff ff 00
>3ffe98	36 7f 7f 7f 3e 1c 08 00 60 60 60 60 60 60 60 60
>3ffea8	00 00 00 07 0f 1c 18 18 c3 e7 7e 3c 3c 7e e7 c3
>3ffeb8	00 3c 7e 66 66 7e 3c 00 18 18 66 66 18 18 3c 00
>3ffec8	06 06 06 06 06 06 06 06 08 1c 3e 7f 3e 1c 08 00
>3ffed8	18 18 18 ff ff 18 18 18 c0 c0 30 30 c0 c0 30 30
>3ffee8	18 18 18 18 18 18 18 18 00 00 03 3e 76 36 36 00
>3ffef8	ff 7f 3f 1f 0f 07 03 01 24 24 24 24 24 24 24 24
>3fff08	00 00 ff 00 00 ff 00 00 00 00 3f 20 20 27 24 24
>3fff18	00 00 ff 00 00 e7 24 24 00 00 fc 04 04 e4 24 24
>3fff28	24 24 27 20 20 3f 00 00 24 24 e7 00 00 ff 00 00
>3fff38	24 24 e4 04 04 fc 00 00 24 24 27 20 20 27 24 24
>3fff48	24 24 e4 04 04 e4 24 24 24 24 e7 00 00 e7 24 24
>3fff58	0f 0f 0f 0f f0 f0 f0 f0 01 03 07 0f 1f 3f 7f ff
>3fff68	80 c0 e0 f0 f8 fc fe ff 33 99 cc 66 33 99 cc 66
>3fff78	cc 99 33 66 cc 99 33 66 f0 f0 f0 f0 ff ff ff ff
>3fff88	0f 0f 0f 0f ff ff ff ff ff ff ff ff f0 f0 f0 f0
>3fff98	ff ff ff ff 0f 0f 0f 0f 05 0a 05 0a 00 00 00 00
>3fffa8	00 00 00 00 0a 05 0a 05 a0 50 a0 50 00 00 00 00
>3fffb8	00 00 00 00 a0 50 a0 50 0a 05 0a 05 0a 05 0a 05
>3fffc8	aa 55 aa 55 00 00 00 00 00 18 3c 7e 18 18 18 18
>3fffd8	00 10 30 7f 7f 30 10 00 00 08 0c fe fe 0c 08 00
>3fffe8	18 18 18 18 7e 3c 18 00 00 00 36 49 36 00 00 00
>3ffff8	00 00 00 00 00 00 00 00
>3a0000	5c 4a 6d 3a 5c 5c 53 3a		.binary "binaries/basic816.bin"
>3a0008	5c 34 21 3a 5c 40 01 3a 5c 58 00 3a 5c d6 00 3a
>3a0018	5c 6b 02 3a 5c e4 00 3a 5c ff 00 3a 5c 06 01 3a
>3a0028	0b 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 85 b3
>3a0038	c2 20 a5 a4 d0 06 e2 20 a5 a6 f0 11 c2 10 a4 a9
>3a0048	c4 a7 f0 09 e2 20 a5 b3 97 a4 c8 84 a9 28 2b 60
>3a0058	08 c2 10 e2 20 a9 01 20 1c 00 a2 00 00 a9 00 9f
>3a0068	00 4c 00 e8 e0 00 01 d0 f6 a2 00 00 20 14 00 c9
>3a0078	0d d0 03 4c cf 00 c9 9d d0 08 e0 00 00 f0 ed ca
>3a0088	80 39 c9 1d d0 0e bf 00 4c 00 f0 e0 e0 4f 00 f0
>3a0098	db e8 80 27 c9 08 d0 1a e0 00 00 f0 cf da bf 01
>3a00a8	4c 00 9f 00 4c 00 f0 06 e8 e0 ff 00 d0 f0 fa ca
>3a00b8	80 0e c9 20 90 b6 9f 00 4c 00 e8 20 18 00 80 ac
>3a00c8	a9 08 20 18 00 80 a5 a9 00 20 1c 00 28 60 22 4c
>3a00d8	10 00 60 20 14 00 48 20 18 00 68 60 08 e2 20 c9
>3a00e8	00 f0 08 af 10 00 af 09 01 80 06 af 10 00 af 29
>3a00f8	fe 8f 10 00 af 28 60 08 22 84 10 00 28 60 48 da
>3a0108	5a 0b 08 e2 20 c2 10 a2 00 00 a9 20 9f 00 a0 af
>3a0118	af 1e 00 00 9f 00 c0 af e8 e0 00 20 d0 ec 08 c2
>3a0128	20 48 a9 00 00 5b 68 28 a2 00 00 a0 00 00 22 84
>3a0138	10 00 28 2b 7a fa 68 60 da 5a 0b 08 08 c2 20 48
>3a0148	a9 00 08 5b 68 28 c2 30 af 0c 00 00 85 08 e2 20
>3a0158	af 0e 00 00 c2 20 29 ff 00 85 0a af 11 00 00 8f
>3a0168	08 01 00 af 1c 00 00 3a 8f 0a 01 00 18 a5 08 6f
>3a0178	0c 01 00 85 08 a5 0a 69 00 00 85 0a e2 20 af 0f
>3a0188	00 00 85 8d a0 00 00 a2 00 00 b7 08 9f 00 4f 00
>3a0198	e8 c8 c4 8d d0 f4 ca bf 00 4f 00 c9 20 d0 09 a9
>3a01a8	00 9f 00 4f 00 ca 10 ef 28 2b 7a fa 60 e2 20 a9
>3a01b8	48 8f 0f 00 00 a9 34 8f 13 00 00 a9 20 8f 08 00
>3a01c8	af 8f 09 00 af a2 00 00 a9 00 9f 18 f0 3a e8 e0
>3a01d8	40 00 d0 f6 a9 80 8f b2 08 00 e2 20 a9 00 8f 89
>3a01e8	0f 00 a9 00 8f 00 02 af 8f 0c 02 af 8f 18 02 af
>3a01f8	8f 24 02 af 60 08 e2 20 48 48 a9 00 22 3c 10 00
>3a0208	68 22 18 10 00 af 89 0f 00 29 01 d0 f8 68 28 60
>3a0218	08 e2 20 48 48 a9 01 22 3c 10 00 68 22 18 10 00
>3a0228	af 89 0f 00 29 01 d0 f8 68 28 60 08 c2 20 48 e2
>3a0238	20 a9 0d 20 18 00 c2 20 68 28 60 08 22 78 10 00
>3a0248	28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a0258	a5 b4 1a 85 b4 cf 13 00 00 90 05 20 14 00 64 b4
>3a0268	2b 28 60 da 5a 0b 08 08 c2 20 48 a9 00 08 5b 68
>3a0278	28 e2 20 c2 10 8f b3 08 00 af b2 08 00 29 20 f0
>3a0288	07 af b3 08 00 20 28 00 af b2 08 00 29 80 f0 07
>3a0298	af b3 08 00 20 fd 01 af b2 08 00 29 40 f0 14 af
>3a02a8	b3 08 00 20 18 02 af b3 08 00 c9 0d d0 05 a9 0a
>3a02b8	20 18 02 28 2b 7a fa 60 08 e2 20 bd 00 00 f0 06
>3a02c8	20 18 00 e8 80 f5 28 60 08 c2 20 48 48 4a 4a 4a
>3a02d8	4a 4a 4a 4a 4a 20 ea 02 68 29 ff 00 20 ea 02 68
>3a02e8	28 60 08 c2 20 48 e2 20 48 4a 4a 4a 4a 20 01 03
>3a02f8	68 20 01 03 c2 20 68 28 60 08 c2 30 da 29 0f 00
>3a0308	aa bf 00 d0 3a 20 18 00 fa 28 60 08 c2 30 48 da
>3a0318	5a 8b 0b c2 30 a3 0b 18 69 03 00 aa e2 20 a9 3a
>3a0328	48 ab bd 00 00 f0 06 20 fd 01 e8 80 f5 c2 30 2b
>3a0338	ab 7a fa 68 28 60 08 e2 20 c9 5b b0 04 c9 41 b0
>3a0348	0b c9 7b b0 04 c9 61 b0 03 28 18 60 28 38 60 08
>3a0358	e2 20 c9 3a b0 04 c9 30 b0 03 28 18 60 28 38 60
>3a0368	08 e2 20 c9 3a b0 04 c9 30 b0 13 c9 67 b0 04 c9
>3a0378	61 b0 0b c9 47 b0 04 c9 41 b0 03 28 18 60 28 38
>3a0388	60 08 e2 20 c9 3a b0 04 c9 30 b0 12 c9 67 b0 04
>3a0398	c9 61 b0 0f c9 47 b0 04 c9 41 b0 09 28 60 38 e9
>3a03a8	30 80 f9 29 df 38 e9 37 80 f2 08 e2 20 c9 7b b0
>3a03b8	06 c9 61 90 02 29 df 28 60 08 e2 20 c2 10 bd 00
>3a03c8	00 f0 09 20 b2 03 9d 00 00 e8 80 f2 28 60 08 0b
>3a03d8	08 c2 20 48 a9 00 08 5b 68 28 c2 20 48 06 21 26
>3a03e8	23 a5 21 85 0c a5 23 85 0e 06 0c 26 0e 06 0c 26
>3a03f8	0e 18 a5 21 65 0c 85 21 a5 23 65 0e 85 23 68 2b
>3a0408	28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 20
>3a0418	a5 21 8f 12 01 00 a9 0a 00 8f 10 01 00 af 14 01
>3a0428	00 85 21 64 23 af 16 01 00 85 27 64 29 e2 20 a9
>3a0438	00 85 25 85 2b 2b 28 60 08 0b 08 c2 20 48 a9 00
>3a0448	08 5b 68 28 c2 20 a5 21 8f 12 01 00 a9 64 00 8f
>3a0458	10 01 00 af 14 01 00 85 21 64 23 af 16 01 00 85
>3a0468	27 64 29 e2 20 a9 00 85 25 85 2b 2b 28 60 08 c2
>3a0478	20 a5 21 d0 08 a5 23 d0 04 28 e2 02 60 28 c2 02
>3a0488	60 08 e2 20 a5 25 c9 00 d0 02 28 60 08 c2 20 48
>3a0498	a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20
>3a04a8	29 ff 00 20 f1 18 e2 20 dc d2 08 08 e2 20 a5 25
>3a04b8	c9 02 d0 02 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a04c8	e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00 20 f1 18
>3a04d8	e2 20 dc d2 08 08 e2 20 a5 25 c9 00 d0 08 c2 20
>3a04e8	a5 23 d0 21 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a04f8	e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00 20 f1 18
>3a0508	e2 20 dc d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a0518	20 a9 09 8f d1 08 00 c2 20 29 ff 00 20 f1 18 e2
>3a0528	20 dc d2 08 08 e2 20 a5 25 c9 00 d0 0e a5 24 d0
>3a0538	29 a5 23 d0 25 a5 22 d0 21 28 60 08 c2 20 48 a9
>3a0548	00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20 29
>3a0558	ff 00 20 f1 18 e2 20 dc d2 08 08 c2 20 48 a9 00
>3a0568	08 5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff
>3a0578	00 20 f1 18 e2 20 dc d2 08 08 0b 08 c2 20 48 a9
>3a0588	00 08 5b 68 28 c2 30 64 21 64 23 e2 20 64 25 a7
>3a0598	00 c9 26 f0 44 e2 20 a7 00 20 57 03 90 76 20 d6
>3a05a8	03 38 e9 30 c2 20 29 ff 00 18 65 21 85 21 a5 23
>3a05b8	69 00 00 85 23 20 96 1b 80 db 08 c2 20 48 a9 00
>3a05c8	08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff
>3a05d8	00 20 f1 18 e2 20 dc d2 08 20 96 1b a7 00 c9 48
>3a05e8	f0 04 c9 68 d0 d4 20 96 1b e2 20 a7 00 20 68 03
>3a05f8	90 22 20 89 03 c2 20 06 21 26 23 06 21 26 23 06
>3a0608	21 26 23 06 21 26 23 29 ff 00 18 65 21 85 21 20
>3a0618	96 1b 80 d5 2b 28 60 08 c2 30 38 a5 04 e5 18 a8
>3a0628	e2 20 b7 18 f0 10 c9 20 f0 06 c9 09 f0 02 28 60
>3a0638	88 c0 ff ff d0 ec a9 00 60 08 0b 08 c2 20 48 a9
>3a0648	00 08 5b 68 28 c2 30 a5 18 85 00 e2 20 a5 1a 85
>3a0658	02 20 b7 1b a7 00 20 57 03 90 0c 20 81 05 c2 20
>3a0668	a5 21 85 d5 20 b7 1b c2 20 a5 00 85 18 e2 20 a5
>3a0678	02 85 1a 20 8f 06 e2 20 20 00 07 c9 00 f0 05 20
>3a0688	89 08 80 f4 2b 28 60 08 c2 20 a5 18 85 00 a5 1a
>3a0698	85 02 a2 00 00 e2 20 a0 00 00 e0 00 00 f0 0d b7
>3a06a8	00 f0 53 c9 3a f0 04 c9 20 d0 33 c8 b7 00 f0 46
>3a06b8	c9 52 f0 10 c9 72 d0 26 b7 00 f0 3a c9 52 f0 04
>3a06c8	c9 72 d0 1a c8 b7 00 f0 2d c9 45 f0 04 c9 65 d0
>3a06d8	0d c8 b7 00 f0 20 c9 4d f0 0a c9 6d f0 06 e8 20
>3a06e8	96 1b 80 b3 a7 00 c9 3a d0 03 20 96 1b a9 03 85
>3a06f8	1c a9 8e 20 89 08 28 60 08 0b 08 c2 20 48 a9 00
>3a0708	08 5b 68 28 e2 20 a9 7f 85 1c c2 10 20 3e 08 a5
>3a0718	1c d0 03 4c a3 07 c2 20 a5 18 85 00 e2 20 a5 1a
>3a0728	85 02 c2 20 64 04 64 06 e2 30 a0 00 b7 00 f0 da
>3a0738	c9 8e f0 d6 c8 c4 1c 90 f3 c2 10 a7 00 c9 22 d0
>3a0748	05 20 c5 07 80 28 a5 1c c9 01 f0 19 c2 20 a5 00
>3a0758	c5 18 d0 08 e2 20 a5 02 c5 1a f0 09 e2 20 a7 04
>3a0768	20 63 46 b0 09 e2 20 20 d5 07 c9 00 d0 11 c2 20
>3a0778	a5 00 85 04 e2 20 a5 02 85 06 20 96 1b 80 a9 c9
>3a0788	81 d0 18 20 1f 06 c9 00 f0 14 89 80 10 0b 20 2a
>3a0798	09 c9 30 f0 04 a9 af 80 02 a9 81 2b 28 60 08 c2
>3a07a8	20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00
>3a07b8	c2 20 29 ff 00 20 f1 18 e2 20 dc d2 08 08 e2 20
>3a07c8	20 96 1b a7 00 f0 04 c9 22 d0 f5 28 60 08 0b c2
>3a07d8	30 da 5a 08 c2 20 48 a9 00 08 5b 68 28 a9 54 09
>3a07e8	85 08 e2 20 a9 3a 85 0a a2 80 00 e2 20 a0 01 00
>3a07f8	b7 08 f0 26 c5 1c d0 29 c2 30 a0 02 00 b7 08 85
>3a0808	0c e2 20 a9 3a 85 0e e2 10 a0 00 b7 00 20 b2 03
>3a0818	d7 0c d0 0d c8 c4 1c 90 f2 8a c2 10 7a fa 2b 28
>3a0828	60 c2 30 18 a5 08 69 08 00 85 08 e2 20 a5 0a 69
>3a0838	00 85 0a e8 80 b5 08 0b 8b 08 c2 20 48 a9 00 08
>3a0848	5b 68 28 c2 30 a9 54 09 85 08 a9 3a 00 85 0a 64
>3a0858	0c e2 20 a0 01 00 b7 08 f0 1d c5 1c b0 06 c5 0c
>3a0868	90 02 85 0c c2 20 18 a5 08 69 08 00 85 08 a5 0a
>3a0878	69 00 00 85 0a 80 da e2 20 a5 0c 85 1c ab 2b 28
>3a0888	60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 87
>3a0898	00 c2 20 18 a5 00 69 01 00 85 08 a5 02 69 00 00
>3a08a8	85 0a e2 10 a4 1c 88 e2 20 b7 08 87 08 f0 13 c2
>3a08b8	20 18 a5 08 69 01 00 85 08 a5 0a 69 00 00 85 0a
>3a08c8	80 e5 2b 28 60 08 c2 30 29 7f 00 0a 0a 0a 18 69
>3a08d8	54 09 aa 28 60 08 8b 0b 08 c2 20 48 a9 00 08 5b
>3a08e8	68 28 08 e2 20 48 a9 3a 48 ab 68 28 e2 20 c2 10
>3a08f8	20 cd 08 bd 00 00 c2 20 29 0f 00 2b ab 28 60 08
>3a0908	8b 0b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48
>3a0918	a9 3a 48 ab 68 28 c2 30 20 cd 08 bd 04 00 2b ab
>3a0928	28 60 08 8b 0b 08 c2 20 48 a9 00 08 5b 68 28 08
>3a0938	e2 20 48 a9 3a 48 ab 68 28 e2 20 c2 10 20 cd 08
>3a0948	bd 00 00 c2 20 29 f0 00 2b ab 28 60 03 01 10 d0
>3a0958	c7 21 00 00 03 01 12 d0 06 22 00 00 02 01 14 d0
>3a0968	14 22 00 00 02 01 16 d0 2d 22 00 00 02 03 18 d0
>3a0978	40 22 00 00 00 01 1c d0 00 00 00 00 04 01 1e d0
>3a0988	82 22 00 00 04 01 20 d0 b8 22 00 00 04 01 22 d0
>3a0998	9d 22 00 00 05 03 24 d0 71 22 00 00 06 03 28 d0
>3a09a8	53 22 00 00 07 02 2c d0 62 22 00 00 ff 01 2f d0
>3a09b8	00 00 00 00 40 01 31 d0 00 00 00 00 20 03 33 d0
>3a09c8	68 38 00 00 20 05 37 d0 6d 3c 00 00 20 03 3d d0
>3a09d8	b8 3b 00 00 20 04 41 d0 58 3b 00 00 20 03 46 d0
>3a09e8	4f 3b 00 00 20 02 4a d0 e7 3a 00 00 50 04 4d d0
>3a09f8	00 00 00 00 50 04 52 d0 00 00 00 00 20 05 57 d0
>3a0a08	2a 3a 00 00 20 06 5d d0 a3 3a 00 00 20 03 64 d0
>3a0a18	7f 38 00 00 50 02 68 d0 00 00 00 00 50 04 6b d0
>3a0a28	00 00 00 00 20 04 70 d0 73 39 00 00 20 02 75 d0
>3a0a38	79 38 00 00 20 04 78 d0 7c 38 00 00 50 05 7d d0
>3a0a48	00 00 00 00 50 05 83 d0 00 00 00 00 20 04 89 d0
>3a0a58	76 38 00 00 20 03 8e d0 ae 3b 00 00 20 04 92 d0
>3a0a68	49 38 00 00 20 04 97 d0 d9 37 00 00 20 05 9c d0
>3a0a78	6f 37 00 00 20 05 a2 d0 fc 36 00 00 20 03 a8 d0
>3a0a88	f8 36 00 00 20 04 ac d0 d9 35 00 00 20 04 b1 d0
>3a0a98	eb 36 00 00 20 07 b6 d0 ef 36 00 00 20 03 be d0
>3a0aa8	2c 35 00 00 20 04 c2 d0 95 34 00 00 04 02 c7 d0
>3a0ab8	0b 23 00 00 04 02 ca d0 ee 22 00 00 04 02 cd d0
>3a0ac8	d3 22 00 00 30 01 d0 d0 01 3e 00 00 30 03 d2 d0
>3a0ad8	15 42 00 00 30 04 d6 d0 65 42 00 00 30 05 db d0
>3a0ae8	f6 42 00 00 30 05 e1 d0 a8 42 00 00 30 04 e7 d0
>3a0af8	35 43 00 00 30 03 ec d0 8a 43 00 00 30 03 f0 d0
>3a0b08	cf 43 00 00 30 03 f4 d0 58 44 00 00 30 03 f8 d0
>3a0b18	e1 44 00 00 30 03 fc d0 11 45 00 00 30 04 00 d1
>3a0b28	87 41 00 00 30 03 05 d1 26 41 00 00 30 04 09 d1
>3a0b38	d8 40 00 00 30 03 0e d1 82 40 00 00 30 05 12 d1
>3a0b48	b9 3f 00 00 30 06 18 d1 d8 3e 00 00 30 04 1f d1
>3a0b58	23 3e 00 00 10 03 24 d1 9f 45 00 00 10 03 28 d1
>3a0b68	6a 45 00 00 10 04 2c d1 35 4f 00 00 10 04 31 d1
>3a0b78	b6 45 00 00 10 03 36 d1 5c 4c 00 00 20 05 3a d1
>3a0b88	07 4e 00 00 10 04 40 d1 e2 4e 00 00 20 05 45 d1
>3a0b98	ee 4f 00 00 20 03 4b d1 0d 51 00 00 10 04 4f d1
>3a0ba8	7a 50 00 00 20 06 54 d1 83 51 00 00 20 04 5b d1
>3a0bb8	a7 52 00 00 10 07 60 d1 67 45 00 00 20 03 68 d1
>3a0bc8	24 34 00 00 20 05 6c d1 59 33 00 00 20 09 72 d1
>3a0bd8	8d 24 00 00 20 09 7c d1 28 24 00 00 20 0a 86 d1
>3a0be8	56 24 00 00 20 07 91 d1 95 23 00 00 30 08 99 d1
>3a0bf8	32 3d 00 00 20 07 a2 d1 2a 23 00 00 30 08 aa d1
>3a0c08	9c 3d 00 00 20 08 b3 d1 9e 25 00 00 20 08 bc d1
>3a0c18	fa 24 00 00 20 06 c5 d1 dc 26 00 00 20 09 cc d1
>3a0c28	da 27 00 00 20 04 d6 d1 6c 29 00 00 20 04 db d1
>3a0c38	c1 29 00 00 20 04 e0 d1 36 2a 00 00 20 06 e5 d1
>3a0c48	eb 2a 00 00 20 08 ec d1 78 2b 00 00 20 0a f5 d1
>3a0c58	ac 2b 00 00 20 07 00 d2 cf 2c 00 00 20 07 08 d2
>3a0c68	5d 2d 00 00 20 08 10 d2 d9 2d 00 00 20 06 19 d2
>3a0c78	18 2e 00 00 20 07 20 d2 44 31 00 00 50 06 28 d2
>3a0c88	00 00 00 00 50 04 2f d2 00 00 00 00 00 00 00 00
>3a0c98	00 00 00 00 08 0b 08 c2 20 48 a9 00 08 5b 68 28
>3a0ca8	c2 30 a9 ff ff 85 b8 e2 20 a9 37 85 ba c2 20 64
>3a0cb8	b5 64 bb e2 20 64 b7 64 bd 2b 28 60 5a 08 e2 20
>3a0cc8	85 e8 c2 10 86 8d c2 20 a5 0e 48 a5 0c 48 a5 12
>3a0cd8	48 a5 10 48 20 74 0d b0 03 20 f8 0c 20 00 0f c2
>3a0ce8	20 68 85 10 68 85 12 68 85 0c 68 85 0e 28 7a 60
>3a0cf8	08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a6 8d
>3a0d08	ca 86 0c e8 c2 30 38 a5 b8 e5 0c 85 be e2 20 a5
>3a0d18	ba e9 00 85 c0 20 00 0f e2 20 a5 e8 a0 00 00 97
>3a0d28	c1 a9 00 a0 01 00 97 c1 a0 02 00 97 c1 c2 20 a9
>3a0d38	00 00 97 c1 c2 20 18 a5 b8 69 01 00 a0 05 00 97
>3a0d48	c1 e2 20 c8 c8 a5 ba 69 00 97 c1 c2 20 a5 be 85
>3a0d58	b5 e2 20 a5 c0 85 b7 c2 20 38 a5 c1 e9 01 00 85
>3a0d68	b8 e2 20 a5 c3 e9 00 85 ba 2b 28 60 08 0b 08 c2
>3a0d78	20 48 a9 00 08 5b 68 28 c2 30 c2 20 a5 bb 85 c7
>3a0d88	e2 20 a5 bd 85 c9 a5 c7 d0 17 e2 20 a5 c9 d0 11
>3a0d98	c2 20 a9 00 00 85 cd e2 20 a9 00 85 cf 2b 28 18
>3a0da8	60 c2 20 a0 05 00 b7 c7 85 ca e2 20 c8 c8 b7 c7
>3a0db8	85 cc c2 20 18 a5 c7 65 8d 85 0c e2 20 a5 c9 69
>3a0dc8	00 85 0e c2 20 18 a5 0c 69 08 00 85 0c e2 20 a5
>3a0dd8	0e 69 00 85 0e c2 20 a5 0c c5 ca d0 28 e2 20 a5
>3a0de8	0e c5 cc d0 20 c2 20 a5 cd d0 5d e2 20 a5 cf d0
>3a0df8	57 c2 20 a0 02 00 b7 c7 85 bb e2 20 c8 c8 b7 c7
>3a0e08	85 bd 4c b1 0e c2 20 a5 0c 69 08 00 85 10 e2 20
>3a0e18	a5 0e 69 00 85 12 e2 20 a5 c4 c5 10 b0 3e 90 08
>3a0e28	c2 20 a5 c4 c5 10 b0 34 c2 20 a5 c7 85 cd e2 20
>3a0e38	a5 c9 85 cf c2 20 a0 02 00 b7 cd 85 c7 e2 20 c8
>3a0e48	c8 b7 cd 85 c9 4c 8e 0d c2 20 a0 02 00 b7 c7 97
>3a0e58	cd e2 20 c8 c8 b7 c7 97 cd 4c b1 0e c2 20 a0 05
>3a0e68	00 b7 c7 97 0c e2 20 c8 c8 b7 c7 97 0c c2 20 a0
>3a0e78	02 00 b7 c7 97 0c e2 20 c8 c8 b7 c7 97 0c c2 20
>3a0e88	a5 cd d0 14 e2 20 a5 cd d0 0e c2 20 a5 0c 85 bb
>3a0e98	e2 20 a5 0e 85 bd 80 11 c2 20 a0 02 00 a5 0c 97
>3a0ea8	cd e2 20 c8 c8 a5 0e 97 cd c2 20 a5 c7 85 c1 e2
>3a0eb8	20 a5 c9 85 c3 c2 20 a5 c1 85 b5 e2 20 a5 c3 85
>3a0ec8	b7 c2 20 a0 05 00 a5 0c 97 c1 e2 20 c8 c8 a5 0e
>3a0ed8	97 c1 c2 20 a0 02 00 a9 00 00 97 c1 e2 20 c8 c8
>3a0ee8	97 c1 e2 20 a5 e8 e2 20 a0 00 00 97 c1 a0 01 00
>3a0ef8	a9 00 97 c1 2b 28 38 60 08 c2 20 38 a5 be e9 08
>3a0f08	00 85 c1 e2 20 a5 c0 e9 00 85 c3 28 60 08 e2 20
>3a0f18	a5 c3 f0 04 c9 38 b0 12 c2 20 a5 c1 f0 0c e2 20
>3a0f28	a0 01 00 b7 c1 1a 97 c1 28 60 00 ea 08 e2 20 a5
>3a0f38	c3 f0 04 c9 38 b0 17 c2 20 a5 c1 f0 11 e2 20 a0
>3a0f48	01 00 b7 c1 3a 97 c1 d0 03 20 58 0f 28 60 00 ea
>3a0f58	08 c2 20 a5 bb d0 21 e2 20 a5 bd d0 1b a5 c3 85
>3a0f68	bd c2 20 a5 c1 85 bb a9 00 00 a0 02 00 97 c1 c8
>3a0f78	c8 e2 20 97 c1 4c 3f 10 e2 20 a5 bd c5 c3 90 28
>3a0f88	c2 20 a5 bb c5 c1 90 20 c2 20 a5 bb a0 02 00 97
>3a0f98	c1 e2 20 c8 c8 a5 bd 97 c1 c2 20 a5 c1 85 bb e2
>3a0fa8	20 a5 c3 85 bd 4c 3f 10 c2 20 a5 bb 85 08 e2 20
>3a0fb8	a5 bd 85 0a e2 20 a0 04 00 b7 08 c5 c6 90 32 d0
>3a0fc8	0b c2 20 a0 02 00 b7 08 c5 c4 90 25 c2 20 a0 02
>3a0fd8	00 b7 08 97 c1 e2 20 c8 c8 b7 08 97 c1 c2 20 a5
>3a0fe8	c1 a0 02 00 97 08 e2 20 a5 c3 c8 c8 97 08 4c 3f
>3a0ff8	10 c2 20 a0 02 00 b7 08 d0 08 e2 20 c8 c8 b7 08
>3a1008	f0 19 c2 20 a0 02 00 b7 08 85 0c e2 20 c8 c8 b7
>3a1018	08 85 0a c2 20 a5 0c 85 08 80 99 c2 20 a5 c1 a0
>3a1028	02 00 97 08 e2 20 c8 c8 a5 c3 97 08 a9 00 97 c1
>3a1038	c2 20 a0 02 00 97 c1 20 44 10 28 60 08 c2 20 a5
>3a1048	bb 85 c1 e2 20 a5 bd 85 c3 c2 20 a5 c1 d0 09 e2
>3a1058	20 a5 c3 d0 03 4c e7 10 c2 20 a0 02 00 b7 c1 85
>3a1068	0c e2 20 c8 c8 b7 c1 85 0e c2 20 a0 05 00 b7 c1
>3a1078	85 10 e2 20 c8 c8 b7 c1 85 12 c2 20 a5 0c c5 10
>3a1088	d0 08 e2 20 a5 0e c5 12 f0 1f c2 20 a0 02 00 b7
>3a1098	c1 85 0c e2 20 c8 c8 b7 c1 85 0e c2 20 a5 0c 85
>3a10a8	c1 e2 20 a5 0e 85 c3 80 a0 c2 20 a0 02 00 b7 c1
>3a10b8	85 0c e2 20 c8 c8 b7 c1 85 0e c2 20 a0 02 00 b7
>3a10c8	0c 97 c1 e2 20 c8 c8 b7 0c 97 c1 c2 20 a0 05 00
>3a10d8	b7 0c 97 c1 e2 20 c8 c8 b7 0c 97 c1 4c 60 10 28
>3a10e8	60 08 c2 20 64 14 64 16 28 60 08 c2 30 a5 14 d0
>3a10f8	16 a5 16 d0 12 e2 20 64 14 a5 e0 1a 1a 85 15 a5
>3a1108	e1 85 16 64 17 80 07 c2 20 a5 15 1a 85 15 c2 20
>3a1118	a5 b9 3a c5 15 f0 02 b0 1f 08 c2 20 48 a9 00 08
>3a1128	5b 68 28 e2 20 a9 03 8f d1 08 00 c2 20 29 ff 00
>3a1138	20 f1 18 e2 20 dc d2 08 28 60 c9 00 d0 05 c0 01
>3a1148	00 f0 05 09 30 97 14 c8 60 08 c2 30 64 0c a5 23
>3a1158	10 1a 18 a5 21 49 ff ff 69 01 00 85 21 a5 23 49
>3a1168	ff ff 69 00 00 85 23 a9 ff ff 85 0c 64 10 64 12
>3a1178	a2 1f 00 f8 06 21 26 23 a5 10 65 10 85 10 a5 12
>3a1188	65 12 85 12 ca 10 ed d8 e2 20 20 f2 10 a0 00 00
>3a1198	a5 0c f0 04 a9 2d 80 02 a9 20 97 14 c8 a2 03 00
>3a11a8	b5 10 29 f0 4a 4a 4a 4a 20 42 11 b5 10 29 0f 20
>3a11b8	42 11 ca 10 eb c0 01 00 d0 0c a9 20 87 14 a0 01
>3a11c8	00 a9 30 97 14 c8 a9 00 97 14 28 60 00 ea 08 e2
>3a11d8	20 c2 10 a0 00 00 bd 00 00 f0 04 e8 c8 80 f7 28
>3a11e8	60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a11f8	c2 10 08 c2 20 48 e2 20 a5 23 48 ab c2 20 68 28
>3a1208	a6 21 20 d6 11 84 0c 08 c2 20 48 e2 20 a5 29 48
>3a1218	ab c2 20 68 28 a6 27 20 d6 11 c2 20 98 38 65 0c
>3a1228	aa e2 20 a9 02 20 c4 0c c2 20 a5 b5 85 08 e2 20
>3a1238	a5 b7 85 0a a0 00 00 08 c2 20 48 e2 20 a5 23 48
>3a1248	ab c2 20 68 28 a6 21 bd 00 00 f0 06 97 08 e8 c8
>3a1258	80 f5 e2 20 08 c2 20 48 e2 20 a5 29 48 ab c2 20
>3a1268	68 28 a6 27 bd 00 00 97 08 f0 04 e8 c8 80 f5 c2
>3a1278	20 a5 08 85 21 e2 20 a5 0a 85 23 a9 02 85 25 ab
>3a1288	2b 28 60 da 5a 08 0b 8b 08 c2 20 48 a9 00 08 5b
>3a1298	68 28 c2 20 a5 0a 48 a5 08 48 c2 30 08 c2 20 48
>3a12a8	e2 20 a5 23 48 ab c2 20 68 28 a6 21 20 d6 11 98
>3a12b8	aa e8 e2 20 a9 02 20 c4 0c c2 20 a5 be 85 08 a5
>3a12c8	c0 85 0a a0 00 00 e2 20 b7 21 97 08 f0 03 c8 80
>3a12d8	f7 c2 20 a5 08 85 21 a5 0a 85 23 c2 20 68 85 08
>3a12e8	68 85 0a ab 2b 28 7a fa 60 08 e2 20 c2 10 a0 00
>3a12f8	00 b7 21 f0 05 c8 80 f9 84 90 c2 30 c4 27 90 13
>3a1308	f0 11 a5 8d 30 0d f0 0b c4 8d b0 12 a5 27 d0 0e
>3a1318	4c 6f 13 20 f2 10 e2 20 a9 00 87 14 80 39 20 f2
>3a1328	10 c2 30 18 a5 21 65 27 85 21 a5 23 69 00 00 85
>3a1338	23 a0 00 00 e2 20 a7 21 97 14 f0 1b c2 20 18 a5
>3a1348	21 69 01 00 85 21 a5 23 69 00 00 85 23 c8 c4 8d
>3a1358	d0 e2 a9 00 00 97 14 c2 20 a5 14 85 21 a5 16 85
>3a1368	23 e2 20 a9 02 85 25 28 60 48 5a 0b 08 08 c2 20
>3a1378	48 a9 00 08 5b 68 28 c2 30 a9 00 00 85 00 85 18
>3a1388	a9 36 00 85 02 85 1a ad 8a 0f 30 20 a0 02 00 b7
>3a1398	18 f0 0f c5 53 90 10 c5 57 f0 02 b0 05 20 d3 13
>3a13a8	80 e5 28 2b 7a 68 60 20 73 1c 80 db 08 c2 20 48
>3a13b8	a9 00 08 5b 68 28 e2 20 a9 01 8f d1 08 00 c2 20
>3a13c8	29 ff 00 20 f1 18 e2 20 dc d2 08 08 c2 30 85 21
>3a13d8	64 23 20 51 11 a5 14 1a 85 21 a5 16 85 23 20 e2
>3a13e8	3c 18 a5 18 69 04 00 85 00 a5 1a 69 00 00 85 02
>3a13f8	e2 20 a9 20 20 18 00 c2 20 20 12 14 90 fb e2 20
>3a1408	a9 0d 20 18 00 20 73 1c 28 60 08 0b 8b 08 c2 20
>3a1418	48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68
>3a1428	28 e2 20 c2 10 a7 00 f0 3a 30 05 20 18 00 80 29
>3a1438	c2 20 29 7f 00 0a 0a 0a 18 69 54 09 85 08 a9 3a
>3a1448	00 69 00 00 85 0a 08 e2 20 48 a9 3a 48 ab 68 28
>3a1458	a0 02 00 b7 08 aa 20 c0 02 c2 20 20 96 1b ab 2b
>3a1468	28 18 60 ab 2b 28 38 60 08 c2 20 a9 ff 6f 85 1d
>3a1478	a9 ff 7f 85 1f a9 ff ff 85 21 85 23 85 27 85 29
>3a1488	e2 20 85 25 85 2b 28 60 08 0b 8b 08 c2 20 48 a9
>3a1498	00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 c2
>3a14a8	30 5a a4 1d bd 00 00 99 00 00 bd 02 00 99 02 00
>3a14b8	e2 20 bd 04 00 99 04 00 c2 20 38 98 e9 05 00 85
>3a14c8	1d 7a ab 2b 28 60 08 0b 8b 08 c2 20 48 a9 00 08
>3a14d8	5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 30 5a
>3a14e8	18 a5 1d 69 05 00 85 1d a8 b9 00 00 9d 00 00 b9
>3a14f8	02 00 9d 02 00 e2 20 b9 04 00 9d 04 00 bd 00 00
>3a1508	7a ab 2b 28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b
>3a1518	68 28 08 e2 20 48 a9 00 48 ab 68 28 e2 20 c2 10
>3a1528	5a a4 1f 99 00 00 88 84 1f 7a ab 2b 28 60 08 0b
>3a1538	8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9
>3a1548	00 48 ab 68 28 e2 20 c2 10 5a a4 1f c8 84 1f b9
>3a1558	00 00 c2 20 29 ff 00 7a ab 2b 28 60 08 e2 20 a9
>3a1568	01 20 0d 15 28 60 5a 08 8b 08 e2 20 48 a9 00 48
>3a1578	ab 68 28 e2 20 a4 1f b9 01 00 c9 01 d0 08 c2 20
>3a1588	e6 1f ab 28 7a 60 08 c2 20 48 a9 00 08 5b 68 28
>3a1598	e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00 20 f1 18
>3a15a8	e2 20 dc d2 08 08 0b 8b c2 20 48 08 c2 20 48 a9
>3a15b8	00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 e2
>3a15c8	20 c2 10 a4 1f c0 ff 7f f0 11 20 dd 08 85 0c b9
>3a15d8	01 00 20 dd 08 c5 0c f0 02 90 08 c2 20 68 ab 2b
>3a15e8	28 18 60 c2 20 68 ab 2b 28 38 60 4c 81 05 08 e2
>3a15f8	20 a9 00 8f 00 4d 00 a2 01 00 20 9f 17 20 dd 04
>3a1608	c2 20 a5 21 9f 00 4d 00 e2 20 af 00 4d 00 1a 30
>3a1618	3e 8f 00 4d 00 e8 e8 20 b7 1b e2 20 a7 00 c9 8d
>3a1628	f0 09 c9 2c d0 0a 20 96 1b 80 cf 20 96 1b 28 60
>3a1638	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1
>3a1648	08 00 c2 20 29 ff 00 20 f1 18 e2 20 dc d2 08 08
>3a1658	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d1 08
>3a1668	00 c2 20 29 ff 00 20 f1 18 e2 20 dc d2 08 08 20
>3a1678	eb 48 90 23 e2 20 a5 e8 29 80 d0 06 20 37 47 4c
>3a1688	9d 16 e2 20 a9 8c 20 a3 1c 20 64 15 20 f6 15 20
>3a1698	d2 4b 20 6e 15 28 60 08 c2 20 48 a9 00 08 5b 68
>3a16a8	28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00 20 f1
>3a16b8	18 e2 20 dc d2 08 08 0b 08 c2 20 48 a9 00 08 5b
>3a16c8	68 28 e2 20 c2 10 20 96 1b a0 00 00 b7 00 f0 24
>3a16d8	c9 22 f0 03 c8 80 f5 84 0c e2 20 a9 02 a6 0c e8
>3a16e8	20 f2 10 a0 00 00 c4 0c f0 29 a7 00 97 14 c8 20
>3a16f8	96 1b 80 f2 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a1708	a9 02 8f d1 08 00 c2 20 29 ff 00 20 f1 18 e2 20
>3a1718	dc d2 08 a9 00 97 14 c2 20 a5 14 85 21 a5 16 85
>3a1728	23 a9 02 00 85 25 20 96 1b 2b 28 60 08 e2 20 a7
>3a1738	00 c2 20 29 ff 00 20 07 09 85 2d 20 64 15 08 e2
>3a1748	20 48 a9 00 48 ab 68 28 20 58 17 20 6e 15 28 60
>3a1758	20 96 1b 6c 2d 08 08 0b 8b c2 20 48 08 c2 20 48
>3a1768	a9 00 08 5b 68 28 c2 30 a2 27 08 20 ce 14 a2 21
>3a1778	08 20 ce 14 20 36 15 20 07 09 85 2d 08 e2 20 48
>3a1788	a9 00 48 ab 68 28 20 9c 17 a2 21 08 20 90 14 68
>3a1798	ab 2b 28 60 6c 2d 08 08 08 c2 20 48 a9 00 08 5b
>3a17a8	68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 10 da e2
>3a17b8	20 a7 00 d0 03 4c 62 18 30 33 c9 20 d0 03 4c 5c
>3a17c8	18 c9 3a b0 04 c9 30 b0 56 c9 26 f0 52 c9 22 d0
>3a17d8	03 4c 75 18 c9 5b b0 07 c9 41 90 03 4c 81 18 c9
>3a17e8	7b b0 07 c9 61 90 03 4c 81 18 4c 62 18 c9 8c f0
>3a17f8	40 c9 8d f0 41 20 2a 09 c9 30 d0 0c 20 34 17 a2
>3a1808	21 08 20 90 14 4c b7 17 c9 00 d0 4e a7 00 a6 1f
>3a1818	e0 ff 7f f0 05 20 ad 15 b0 12 20 0d 15 80 35 c2
>3a1828	20 20 f3 15 a2 21 08 20 90 14 80 83 20 5e 17 80
>3a1838	dd 20 0d 15 80 1e e2 20 a4 1f c0 ff 7f f0 46 a4
>3a1848	1f b9 01 00 c9 01 f0 3d c9 8c f0 05 20 5e 17 80
>3a1858	ee 20 36 15 20 96 1b 4c b7 17 a6 1f e0 ff 7f b0
>3a1868	24 bd 01 00 c9 01 f0 1d 20 5e 17 80 ed 20 be 16
>3a1878	a2 21 08 20 90 14 4c b7 17 20 76 16 a2 21 08 20
>3a1888	90 14 4c b7 17 a2 21 08 20 ce 14 fa 28 60 08 0b
>3a1898	8b 08 e2 20 48 a9 00 48 ab 68 28 08 c2 20 48 a9
>3a18a8	00 08 5b 68 28 c2 30 a9 fd 5f 85 31 ab 2b 28 60
>3a18b8	08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 92 31
>3a18c8	c6 31 c6 31 2b 28 60 08 c2 30 29 ff 00 20 b8 18
>3a18d8	28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30
>3a18e8	e6 31 e6 31 b2 31 2b 28 60 8b 0b 08 08 c2 20 48
>3a18f8	a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28
>3a1908	c2 20 85 21 a9 00 00 85 23 e2 20 a9 00 85 25 85
>3a1918	e8 a9 3a 85 e7 c2 20 a9 4b 19 85 e5 20 85 48 c2
>3a1928	20 a5 d5 85 21 a5 d7 85 23 e2 20 a9 00 85 25 85
>3a1938	e8 a9 3a 85 e7 c2 20 a9 4f 19 85 e5 20 85 48 28
>3a1948	2b ab 60 45 52 52 00 45 52 4c 00 e2 20 c2 10 20
>3a1958	33 02 af d1 08 00 0a c2 20 29 ff 00 a8 08 e2 20
>3a1968	48 a9 3a 48 ab 68 28 be a5 19 20 c0 02 c2 20 a5
>3a1978	d5 f0 27 a2 d3 19 20 c0 02 08 e2 20 48 a9 00 48
>3a1988	ab 68 28 c2 20 af d5 08 00 8f 21 08 00 a9 00 00
>3a1998	8f 23 08 00 20 02 3d 20 33 02 4c 7c 21 d7 19 da
>3a19a8	19 e0 19 ed 19 fb 19 09 1a 1c 1a 32 1a 42 1a 51
>3a19b8	1a 5e 1a 6f 1a 7e 1a 8b 1a 99 1a a8 1a b9 1a d2
>3a19c8	1a e6 1a fa 1a 10 1b 24 1b 3f 1b 20 61 74 00 4f
>3a19d8	4b 00 42 72 65 61 6b 00 53 79 6e 74 61 78 20 65
>3a19e8	72 72 6f 72 00 4f 75 74 20 6f 66 20 6d 65 6d 6f
>3a19f8	72 79 00 54 79 70 65 20 6d 69 73 6d 61 74 63 68
>3a1a08	00 56 61 72 69 61 62 6c 65 20 6e 6f 74 20 66 6f
>3a1a18	75 6e 64 00 4c 69 6e 65 20 6e 75 6d 62 65 72 20
>3a1a28	6e 6f 74 20 66 6f 75 6e 64 00 53 74 61 63 6b 20
>3a1a38	75 6e 64 65 72 66 6c 6f 77 00 53 74 61 63 6b 20
>3a1a48	6f 76 65 72 66 6c 6f 77 00 4f 75 74 20 6f 66 20
>3a1a58	72 61 6e 67 65 00 49 6c 6c 65 67 61 6c 20 61 72
>3a1a68	67 75 6d 65 6e 74 00 46 69 6c 65 20 6e 6f 74 20
>3a1a78	66 6f 75 6e 64 00 4e 6f 74 20 61 20 6e 75 6d 62
>3a1a88	65 72 00 4d 61 74 68 20 6f 76 65 72 66 6c 6f 77
>3a1a98	00 4d 61 74 68 20 75 6e 64 65 72 66 6c 6f 77 00
>3a1aa8	44 69 76 69 73 69 6f 6e 20 62 79 20 7a 65 72 6f
>3a1ab8	00 55 6e 61 62 6c 65 20 74 6f 20 72 65 61 64 20
>3a1ac8	64 69 72 65 63 74 6f 72 79 00 55 6e 61 62 6c 65
>3a1ad8	20 74 6f 20 6c 6f 61 64 20 66 69 6c 65 00 55 6e
>3a1ae8	61 62 6c 65 20 74 6f 20 73 61 76 65 20 66 69 6c
>3a1af8	65 00 55 6e 61 62 6c 65 20 74 6f 20 64 65 6c 65
>3a1b08	74 65 20 66 69 6c 65 00 43 6f 75 6c 64 20 6e 6f
>3a1b18	74 20 66 69 6e 64 20 66 69 6c 65 00 43 6f 75 6c
>3a1b28	64 20 6e 6f 74 20 75 70 64 61 74 65 20 64 69 72
>3a1b38	65 63 74 6f 72 79 00 43 6f 75 6c 64 20 6e 6f 74
>3a1b48	20 63 6f 70 79 20 74 68 65 20 66 69 6c 65 00 08
>3a1b58	0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 00 85
>3a1b68	d0 2b 28 60 0b 08 08 c2 20 48 a9 00 08 5b 68 28
>3a1b78	08 c2 20 a9 53 19 8f d2 08 00 e2 20 a9 3a 8f d4
>3a1b88	08 00 28 20 ae 3b 20 ef 36 64 2f 28 2b 60 08 0b
>3a1b98	08 c2 20 48 a9 00 08 5b 68 28 c2 20 18 a5 00 69
>3a1ba8	01 00 85 00 e2 20 a5 02 69 00 85 02 2b 28 60 08
>3a1bb8	0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a7 00 f0
>3a1bc8	0f c9 20 f0 06 c9 09 f0 02 80 05 20 96 1b 80 ed
>3a1bd8	2b 28 60 08 e2 20 a7 00 f0 09 c9 3a f0 05 20 96
>3a1be8	1b 80 f3 28 60 08 e2 20 64 34 a7 00 f0 19 c5 35
>3a1bf8	f0 2c c9 98 f0 1e c9 9c f0 1a c9 9b f0 1a c9 9d
>3a1c08	f0 16 20 96 1b 80 e3 20 73 1c c2 20 a5 d5 f0 1d
>3a1c18	e2 20 80 d6 e6 34 80 ea c6 34 30 30 80 e4 a5 33
>3a1c28	30 06 a5 34 f0 02 80 da 20 96 1b 28 60 08 c2 20
>3a1c38	48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2
>3a1c48	20 29 ff 00 20 f1 18 e2 20 dc d2 08 08 c2 20 48
>3a1c58	a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20
>3a1c68	29 ff 00 20 f1 18 e2 20 dc d2 08 08 c2 30 a0 00
>3a1c78	00 b7 18 85 0c 18 a5 18 65 0c 85 18 a5 1a 69 00
>3a1c88	00 85 1a a0 02 00 b7 18 85 d5 18 a5 18 69 04 00
>3a1c98	85 00 a5 1a 69 00 00 85 02 28 60 08 e2 20 48 20
>3a1ca8	b7 1b 68 e2 20 c7 00 d0 08 20 96 1b 20 b7 1b 28
>3a1cb8	60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a1cc8	d1 08 00 c2 20 29 ff 00 20 f1 18 e2 20 dc d2 08
>3a1cd8	08 e2 20 20 b7 1b e2 20 a7 00 f0 10 c9 3a f0 0c
>3a1ce8	c5 35 f0 05 20 96 1b 80 ef 28 38 60 28 18 60 5a
>3a1cf8	08 e2 20 a0 00 00 b7 00 f0 0d c9 3a f0 07 c9 20
>3a1d08	d0 05 c8 80 f1 a9 00 28 7a 60 08 0b 8b 08 c2 20
>3a1d18	48 a9 00 08 5b 68 28 20 70 14 e2 20 a9 00 85 da
>3a1d28	ad 8a 0f 30 4b a7 00 c9 3a d0 03 20 96 1b 20 b7
>3a1d38	1b a7 00 d0 03 4c c2 1d 20 3e 03 b0 52 a7 00 10
>3a1d48	10 20 2a 09 85 0c c9 20 d0 03 4c b0 1d a5 d0 f0
>3a1d58	51 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a1d68	d1 08 00 c2 20 29 ff 00 20 f1 18 e2 20 dc d2 08
>3a1d78	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 01 8f d1
>3a1d88	08 00 c2 20 29 ff 00 20 f1 18 e2 20 dc d2 08 20
>3a1d98	b8 3b 4c c2 1d 08 e2 20 48 a9 00 48 ab 68 28 6c
>3a1da8	2d 08 a5 0c c9 10 d0 a9 a7 00 20 07 09 c2 20 85
>3a1db8	2d 20 70 14 20 96 1b 20 9d 1d ab 2b 28 60 08 58
>3a1dc8	20 57 1b 20 96 18 e2 20 9c 8a 0f c2 20 a5 18 85
>3a1dd8	00 a5 1a 85 02 4c 07 1e 08 c2 20 a0 02 00 b7 18
>3a1de8	85 d5 20 e9 10 e2 20 a5 da c9 03 f0 12 c2 20 18
>3a1df8	a5 18 69 04 00 85 00 e2 20 a5 1a 69 00 85 02 c2
>3a1e08	20 20 12 1d e2 20 a5 da c9 03 f0 f3 c9 00 d0 31
>3a1e18	e2 20 20 b7 1b a7 00 f0 28 c9 3a f0 1f 08 c2 20
>3a1e28	48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2
>3a1e38	20 29 ff 00 20 f1 18 e2 20 dc d2 08 20 96 1b 80
>3a1e48	be 28 60 08 58 e2 20 a9 80 85 d0 9c 8a 0f 20 96
>3a1e58	18 c2 30 64 2f a0 02 00 b7 18 f0 29 20 e0 1d e2
>3a1e68	20 a5 da c9 01 f0 1e c9 02 f0 ea c9 03 f0 e6 c2
>3a1e78	20 a0 00 00 18 a5 18 77 18 85 18 e2 20 a5 1a 69
>3a1e88	00 85 1a 80 d0 e2 20 a9 00 85 d0 28 60 08 c2 30
>3a1e98	c2 20 a9 00 00 85 08 a9 36 00 85 0a c2 20 a0 02
>3a1ea8	00 b7 08 f0 31 c5 21 f0 1e b0 2b c2 20 a0 00 00
>3a1eb8	18 a5 08 77 08 85 0c e2 20 a5 0a 69 00 85 0a c2
>3a1ec8	20 a5 0c 85 08 80 d7 c2 20 a5 08 85 18 e2 20 a5
>3a1ed8	0a 85 1a 28 38 60 28 18 60 08 e2 20 a7 0c 87 08
>3a1ee8	c2 20 a5 0c c5 00 d0 08 e2 20 a5 0e c5 02 f0 26
>3a1ef8	c2 20 18 a5 0c 69 01 00 85 0c e2 20 a5 0e 69 00
>3a1f08	85 0e c2 20 18 a5 08 69 01 00 85 08 e2 20 a5 0a
>3a1f18	69 00 85 0a 80 c4 28 60 08 e2 20 a7 0c 87 08 c2
>3a1f28	20 a5 0c c5 00 d0 06 a5 0e c5 02 f0 26 c2 20 38
>3a1f38	a5 0c e9 01 00 85 0c e2 20 a5 0e e9 00 85 0e c2
>3a1f48	20 38 a5 08 e9 01 00 85 08 e2 20 a5 0a e9 00 85
>3a1f58	0a 80 c6 28 60 08 a0 00 00 c2 20 18 a5 08 77 08
>3a1f68	85 0c e2 20 a5 0a 69 00 85 0e c2 20 18 a5 d7 69
>3a1f78	04 00 85 00 e2 20 a5 d9 69 00 85 02 a0 00 00 c2
>3a1f88	20 38 a5 d7 f7 08 85 d7 e2 20 a5 d9 e9 00 85 d9
>3a1f98	20 e1 1e 20 ae 3b 28 60 08 08 c2 20 48 a9 00 08
>3a1fa8	5b 68 28 c2 30 a0 02 00 97 d7 18 a5 d7 69 04 00
>3a1fb8	85 08 e2 20 a5 d9 69 00 85 0a e2 20 a0 00 00 b7
>3a1fc8	18 97 08 f0 03 c8 80 f7 c2 20 98 18 69 05 00 85
>3a1fd8	0c c2 20 a0 00 00 a5 0c 97 d7 c2 20 18 a5 d7 65
>3a1fe8	0c 85 0c e2 20 a5 d9 69 00 85 d9 c2 20 a5 0c 85
>3a1ff8	d7 c2 20 a0 00 00 a9 00 00 97 d7 c8 c0 05 00 d0
>3a2008	f8 20 ae 3b 28 60 0b 08 08 c2 20 48 a9 00 08 5b
>3a2018	68 28 c2 30 a9 00 00 85 08 a9 36 00 85 0a a0 02
>3a2028	00 b7 08 f0 1d c5 d5 f0 25 b0 1d a0 00 00 18 a5
>3a2038	08 77 08 85 0c a5 0a 69 00 00 85 0a a5 0c 85 08
>3a2048	80 dc a9 00 00 28 2b 60 a9 01 00 28 2b 60 a9 02
>3a2058	00 28 2b 60 08 c2 30 a9 05 00 85 10 a0 00 00 e2
>3a2068	20 b7 18 f0 07 c2 20 e6 10 c8 80 f3 c2 20 a5 08
>3a2078	85 00 a5 0a 85 02 18 a5 d7 69 04 00 85 0c a5 d9
>3a2088	69 00 00 85 0e 18 a5 d7 65 10 85 d7 a5 d9 69 00
>3a2098	00 85 d9 18 a5 d7 69 04 00 85 08 a5 d9 69 00 00
>3a20a8	85 0a 20 20 1f c2 20 a5 10 a0 00 00 97 00 a5 d5
>3a20b8	a0 02 00 97 00 18 a5 00 69 04 00 85 00 a5 02 69
>3a20c8	00 00 85 02 a0 00 00 e2 20 b7 18 97 00 f0 03 c8
>3a20d8	80 f7 20 ae 3b 28 60 08 c2 30 85 d5 20 0e 20 c9
>3a20e8	00 00 f0 2c c9 01 00 f0 22 c2 20 a5 08 48 a5 0a
>3a20f8	48 20 5d 1f 68 85 0a 68 85 08 a5 18 85 00 a5 1a
>3a2108	85 02 20 b7 1b e2 20 a7 00 f0 0a 20 5c 20 80 05
>3a2118	a5 d5 20 a0 1f 28 60 8b 08 08 e2 20 48 a9 3a 48
>3a2128	ab 68 28 a2 34 d2 20 c0 02 28 ab 60 08 e2 30 a9
>3a2138	01 20 1c 00 20 db 00 f0 06 c9 0d f0 02 80 f5 28
>3a2148	60 0b 08 08 c2 20 48 a9 00 08 5b 68 28 c2 30 64
>3a2158	d5 a9 00 4f 85 18 a9 00 00 85 1a 20 41 06 c2 20
>3a2168	a5 d5 d0 05 20 c6 1d 80 07 20 df 20 28 2b 38 60
>3a2178	28 2b 18 60 c2 30 a2 ff fe 9a 20 1f 21 20 08 00
>3a2188	20 0c 00 a9 00 00 20 1c 00 20 49 21 b0 ef 80 ea
>3a2198	e2 20 a5 25 c5 2b d0 06 c2 20 29 ff 00 60 c2 20
>3a21a8	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1
>3a21b8	08 00 c2 20 29 ff 00 20 f1 18 e2 20 dc d2 08 20
>3a21c8	98 21 c2 20 c9 00 00 f0 27 c9 02 00 d0 03 4c e9
>3a21d8	11 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f
>3a21e8	d1 08 00 c2 20 29 ff 00 20 f1 18 e2 20 dc d2 08
>3a21f8	18 a5 21 65 27 85 21 a5 23 65 29 85 23 60 38 a5
>3a2208	21 e5 27 85 21 a5 23 e5 29 85 23 60 a5 21 8f 08
>3a2218	01 00 a5 27 8f 0a 01 00 af 0c 01 00 85 21 af 0e
>3a2228	01 00 85 23 60 a5 21 8f 12 01 00 a5 27 8f 10 01
>3a2238	00 af 14 01 00 85 21 60 a5 21 8f 12 01 00 a5 27
>3a2248	8f 10 01 00 af 16 01 00 85 21 60 c2 20 a5 21 25
>3a2258	27 85 21 a5 23 25 29 85 23 60 c2 20 a5 21 05 27
>3a2268	85 21 a5 23 05 29 85 23 60 c2 20 a5 21 49 ff ff
>3a2278	85 21 a5 23 49 ff ff 85 23 60 c2 20 a5 23 c5 29
>3a2288	90 0b a5 21 c5 27 90 05 64 21 64 23 60 a9 ff ff
>3a2298	85 21 85 23 60 c2 20 a5 29 c5 23 90 0b a5 27 c5
>3a22a8	21 90 05 64 21 64 23 60 a9 ff ff 85 21 85 23 60
>3a22b8	c2 20 a5 29 c5 23 d0 0e a5 27 c5 21 d0 08 a9 ff
>3a22c8	ff 85 21 85 23 60 64 21 64 23 60 c2 20 a5 29 c5
>3a22d8	23 d0 0e a5 27 c5 21 d0 08 a9 ff ff 85 21 85 23
>3a22e8	60 64 21 64 23 60 c2 20 a5 23 c5 29 90 10 d0 06
>3a22f8	a5 21 c5 27 90 08 a9 ff ff 85 21 85 23 60 64 21
>3a2308	64 23 60 c2 20 a5 23 c5 29 90 0f f0 05 64 21 64
>3a2318	23 60 a5 21 c5 27 f0 02 b0 f3 a9 ff ff 85 21 85
>3a2328	23 60 08 e2 20 20 9f 17 20 2c 05 20 0a 04 a5 21
>3a2338	0a 0a 0a 0a 05 27 48 a9 2c 20 a3 1c 20 9f 17 20
>3a2348	2c 05 20 0a 04 a5 21 0a 0a 0a 0a 05 27 48 a9 2c
>3a2358	20 a3 1c 20 9f 17 20 2c 05 20 0a 04 a5 21 0a 0a
>3a2368	0a 0a 05 27 48 af 0e 08 af 09 0c 8f 0e 08 af 68
>3a2378	8f 00 08 af 68 8f 02 08 af 68 8f 04 08 af af 0e
>3a2388	08 af 29 f7 8f 0e 08 af 20 db 1b 28 60 08 e2 20
>3a2398	20 9f 17 20 2c 05 20 0a 04 a5 21 0a 0a 0a 0a 05
>3a23a8	27 48 a9 2c 20 a3 1c 20 9f 17 20 2c 05 20 0a 04
>3a23b8	a5 21 0a 0a 0a 0a 05 27 48 a9 2c 20 a3 1c 20 9f
>3a23c8	17 20 89 04 20 40 04 c2 20 a5 21 85 90 a5 27 85
>3a23d8	21 20 0a 04 e2 20 a5 21 0a 0a 0a 0a 05 27 48 c2
>3a23e8	20 a5 90 85 21 20 0a 04 e2 20 a5 21 0a 0a 0a 0a
>3a23f8	05 27 48 af 0e 08 af 09 0c 8f 0e 08 af 68 8f 0f
>3a2408	08 af 68 8f 0a 08 af 68 8f 09 08 af 68 8f 06 08
>3a2418	af af 0e 08 af 29 f7 8f 0e 08 af 20 db 1b 28 60
>3a2428	08 20 9f 17 20 2c 05 e2 20 a5 21 29 0f 0a 0a 0a
>3a2438	0a 8f 53 08 00 a9 2c 20 a3 1c 20 9f 17 20 2c 05
>3a2448	a5 21 29 0f 0f 53 08 00 8f 1e 00 00 28 60 08 e2
>3a2458	20 20 9f 17 20 2c 05 a5 21 48 a9 2c 20 a3 1c 20
>3a2468	9f 17 20 2c 05 a5 21 48 a9 2c 20 a3 1c 20 9f 17
>3a2478	20 2c 05 a5 21 8f 0d 00 af 68 8f 0e 00 af 68 8f
>3a2488	0f 00 af 28 60 08 e2 20 20 9f 17 20 89 04 a5 21
>3a2498	f0 16 a9 01 8f 04 00 af a9 20 8f 08 00 af 8f 09
>3a24a8	00 af 22 2c 11 00 80 0a a9 00 8f 04 00 af 22 2c
>3a24b8	11 00 a9 2c 85 35 20 d8 1c 90 35 20 96 1b 20 9f
>3a24c8	17 20 2c 05 a5 21 48 a9 2c 20 a3 1c 20 9f 17 20
>3a24d8	2c 05 a5 21 48 a9 2c 20 a3 1c 20 9f 17 20 2c 05
>3a24e8	a5 21 8f 05 00 af 68 8f 06 00 af 68 8f 07 00 af
>3a24f8	28 60 08 c2 20 20 9f 17 20 2c 05 a9 af 00 85 9e
>3a2508	a5 21 c9 0a 00 b0 5c 0a aa bf 8a 25 3a 85 9c a9
>3a2518	2c 00 20 a3 1c 20 9f 17 20 2c 05 a5 21 0a 0a 18
>3a2528	65 9c 85 9c a9 2c 00 20 a3 1c 20 9f 17 20 2c 05
>3a2538	a0 02 00 a5 21 e2 20 97 9c a9 2c 20 a3 1c 20 9f
>3a2548	17 20 2c 05 a0 01 00 a5 21 e2 20 97 9c a9 2c 20
>3a2558	a3 1c 20 9f 17 20 2c 05 a0 00 00 a5 21 e2 20 97
>3a2568	9c 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a2578	0a 8f d1 08 00 c2 20 29 ff 00 20 f1 18 e2 20 dc
>3a2588	d2 08 00 20 00 24 00 28 00 2c 00 30 00 34 00 38
>3a2598	00 3c 40 1f 80 1f da 5a 08 20 9f 17 20 89 04 c2
>3a25a8	20 a5 21 89 00 01 d0 17 af 00 00 af 89 00 01 f0
>3a25b8	0e e2 20 a9 00 8f 01 00 af a9 01 8f 01 00 af c2
>3a25c8	20 a5 21 8f 00 00 af e2 20 a5 22 c2 20 29 03 00
>3a25d8	0a aa c2 20 bf 25 26 3a 8f 10 f0 3a bf 2d 26 3a
>3a25e8	8f 12 f0 3a af 10 f0 3a 8f 08 01 00 af 12 f0 3a
>3a25f8	8f 0a 01 00 af 0c 01 00 8f 14 f0 3a e2 20 af 0e
>3a2608	01 00 8f 16 f0 3a 22 2c 11 00 c2 20 af 1a 00 00
>3a2618	aa af 1c 00 00 a8 20 20 00 28 7a fa 60 80 02 20
>3a2628	03 40 01 90 01 e0 01 58 02 f0 00 2c 01 50 00 64
>3a2638	00 28 00 32 00 3c 00 4b 00 1e 00 32 00 48 00 5c
>3a2648	00 20 00 2a 00 34 00 43 00 16 00 34 00 da 08 c2
>3a2658	30 a5 21 c9 02 00 b0 1c 0a 0a aa bf 00 f0 3a 85
>3a2668	9c bf 02 f0 3a 85 9e c9 f0 00 b0 08 c9 b0 00 90
>3a2678	03 28 fa 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a2688	a9 09 8f d1 08 00 c2 20 29 ff 00 20 f1 18 e2 20
>3a2698	dc d2 08 da 08 c2 30 a5 21 c9 02 00 b0 17 0a 0a
>3a26a8	aa bf 08 f0 3a 85 9c bf 0a f0 3a 85 9e c9 40 00
>3a26b8	b0 03 28 fa 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a26c8	20 a9 09 8f d1 08 00 c2 20 29 ff 00 20 f1 18 e2
>3a26d8	20 dc d2 08 08 c2 20 20 9f 17 20 2c 05 c2 20 a5
>3a26e8	21 c9 02 00 b0 5d 85 53 a9 2c 00 20 a3 1c 20 9f
>3a26f8	17 20 2c 05 c2 20 a5 21 85 57 a9 2c 00 20 a3 1c
>3a2708	20 9f 17 20 2c 05 a5 53 0a 0a 0a aa e2 20 a5 57
>3a2718	d0 05 a5 21 0a 80 04 a5 21 38 2a 9f 00 01 af c2
>3a2728	20 a9 2c 00 85 35 20 d8 1c b0 37 c2 20 08 c2 20
>3a2738	a9 00 00 85 21 a9 b0 00 85 23 e2 20 a9 00 85 25
>3a2748	28 80 27 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a2758	09 8f d1 08 00 c2 20 29 ff 00 20 f1 18 e2 20 dc
>3a2768	d2 08 c2 20 20 96 1b 20 9f 17 c2 20 a5 53 0a 0a
>3a2778	aa a5 21 9f 00 f0 3a 9f 08 f0 3a 85 5b a5 23 9f
>3a2788	02 f0 3a 38 e9 b0 00 9f 0a f0 3a 85 5d a5 53 0a
>3a2798	0a 0a aa e2 20 a5 5b 9f 01 01 af a5 5c 9f 02 01
>3a27a8	af a5 5d 9f 03 01 af a9 00 9f 04 01 af 9f 05 01
>3a27b8	af 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a27c8	0a 8f d1 08 00 c2 20 29 ff 00 20 f1 18 e2 20 dc
>3a27d8	d2 08 08 c2 20 20 9f 17 20 2c 05 20 9b 26 c2 20
>3a27e8	a5 9c 8f 05 04 af af 14 f0 3a 8f 08 04 af e2 20
>3a27f8	a5 9e 8f 07 04 af af 16 f0 3a 8f 0a 04 af a9 00
>3a2808	8f 01 04 af a9 85 8f 00 04 af af 01 04 af 30 fa
>3a2818	a9 00 8f 00 04 af 28 60 08 c2 20 a5 5b 8f 08 01
>3a2828	00 af 10 f0 3a 8f 0a 01 00 18 af 0c 01 00 65 57
>3a2838	85 0c af 0e 01 00 69 00 00 85 0e 18 a5 0c 65 9c
>3a2848	85 0c a5 0e 65 9e 85 0e e2 20 a5 53 87 0c 28 60
>3a2858	c2 20 a9 01 00 85 db 38 a5 5f e5 57 85 67 10 0b
>3a2868	49 ff ff 1a 85 67 a9 ff ff 85 db a9 01 00 85 dd
>3a2878	38 a5 63 e5 5b 85 6b 10 0b 49 ff ff 1a 85 6b a9
>3a2888	ff ff 85 dd a5 6b c5 67 b0 04 a5 67 80 06 a5 6b
>3a2898	49 ff ff 1a 48 0a 68 6a 85 6f 20 20 28 a5 57 c5
>3a28a8	5f d0 06 a5 5b c5 63 f0 36 a5 6f 85 73 a5 67 49
>3a28b8	ff ff 1a c5 73 10 10 f0 0e 38 a5 6f e5 6b 85 6f
>3a28c8	18 a5 57 65 db 85 57 a5 73 c5 6b 10 cd f0 cb 18
>3a28d8	a5 6f 65 67 85 6f 18 a5 5b 65 dd 85 5b 80 bb 60
>3a28e8	08 a9 00 00 8f 00 04 af c2 20 a5 5b 8f 08 01 00
>3a28f8	af 10 f0 3a 8f 0a 01 00 18 af 0c 01 00 65 57 85
>3a2908	0c e2 20 af 0e 01 00 69 00 85 0e c2 20 18 a5 9c
>3a2918	65 0c 8f 05 04 af e2 20 a5 9e 65 0e 8f 07 04 af
>3a2928	c2 20 38 a5 5f e5 57 85 0c 8f 08 04 af 38 af 10
>3a2938	f0 3a 8f 0e 04 af 38 a5 63 e5 5b 8f 0a 04 af a9
>3a2948	01 00 8f 0c 04 af e2 20 af 53 08 00 8f 01 04 af
>3a2958	a9 87 8f 00 04 af af 01 04 af 30 fa a9 00 8f 00
>3a2968	04 af 28 60 08 08 c2 20 48 a9 00 08 5b 68 28 08
>3a2978	e2 20 48 a9 00 48 ab 68 28 c2 30 20 9f 17 20 2c
>3a2988	05 20 55 26 a9 2c 00 20 a3 1c 20 9f 17 20 89 04
>3a2998	a5 21 85 57 a9 2c 00 20 a3 1c 20 9f 17 20 89 04
>3a29a8	a5 21 85 5b a9 2c 00 20 a3 1c 20 9f 17 20 2c 05
>3a29b8	a5 21 85 53 20 20 28 28 60 08 08 c2 20 48 a9 00
>3a29c8	08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 30
>3a29d8	20 9f 17 20 2c 05 20 55 26 a9 2c 00 20 a3 1c 20
>3a29e8	9f 17 20 89 04 a5 21 85 57 a9 2c 00 20 a3 1c 20
>3a29f8	9f 17 20 89 04 a5 21 85 5b a9 2c 00 20 a3 1c 20
>3a2a08	9f 17 20 89 04 a5 21 85 5f a9 2c 00 20 a3 1c 20
>3a2a18	9f 17 20 89 04 a5 21 85 63 a9 2c 00 20 a3 1c 20
>3a2a28	9f 17 20 2c 05 a5 21 85 53 20 58 28 28 60 08 08
>3a2a38	c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48
>3a2a48	ab 68 28 c2 30 20 9f 17 20 2c 05 20 9b 26 a9 2c
>3a2a58	00 20 a3 1c 20 9f 17 20 89 04 a5 21 85 57 a9 2c
>3a2a68	00 20 a3 1c 20 9f 17 20 89 04 a5 21 85 5b a9 2c
>3a2a78	00 20 a3 1c 20 9f 17 20 89 04 a5 21 85 5f a9 2c
>3a2a88	00 20 a3 1c 20 9f 17 20 89 04 a5 21 85 63 a9 2c
>3a2a98	00 20 a3 1c 20 9f 17 20 2c 05 a5 21 85 53 20 e8
>3a2aa8	28 28 60 08 e2 20 a5 21 c9 40 b0 18 0a 0a 0a 18
>3a2ab8	69 00 85 9c a9 0c 69 00 85 9d a9 af 69 00 85 9e
>3a2ac8	64 9f 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a2ad8	a9 09 8f d1 08 00 c2 20 29 ff 00 20 f1 18 e2 20
>3a2ae8	dc d2 08 08 e2 20 20 9f 17 20 2c 05 20 ab 2a a5
>3a2af8	21 8f 16 f0 3a a9 2c 20 a3 1c 20 9f 17 20 2c 05
>3a2b08	a5 21 c9 08 b0 4b 48 a9 2c 20 a3 1c 20 9f 17 20
>3a2b18	89 04 c2 20 38 a5 21 e9 00 00 85 21 a5 23 e9 b0
>3a2b28	00 85 23 30 2c c2 20 a5 21 a0 01 00 97 9c e2 20
>3a2b38	a5 23 c8 c8 97 9c af 16 f0 3a aa bf 18 f0 3a 29
>3a2b48	f1 85 0c 68 0a 29 0e 05 0c 87 9c 9f 18 f0 3a 28
>3a2b58	60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>3a2b68	d1 08 00 c2 20 29 ff 00 20 f1 18 e2 20 dc d2 08
>3a2b78	08 c2 20 20 9f 17 20 2c 05 20 ab 2a a9 2c 00 20
>3a2b88	a3 1c 20 9f 17 20 89 04 a5 21 a0 04 00 97 9c a9
>3a2b98	2c 00 20 a3 1c 20 9f 17 20 89 04 a5 21 a0 06 00
>3a2ba8	97 9c 28 60 08 c2 20 20 9f 17 20 2c 05 20 ab 2a
>3a2bb8	a5 21 8f 16 f0 3a a9 2c 00 20 a3 1c 20 9f 17 20
>3a2bc8	89 04 a5 21 48 a9 2c 00 85 35 20 d8 1c b0 1e af
>3a2bd8	16 f0 3a aa bf 18 f0 3a 29 fe 00 85 0c 68 29 01
>3a2be8	00 05 0c 9f 18 f0 3a e2 20 87 9c 80 35 c2 20 20
>3a2bf8	96 1b 20 9f 17 20 2c 05 a5 21 c9 08 00 b0 25 0a
>3a2c08	0a 0a 0a 85 0c 68 29 01 00 05 0c 85 0c af 16 f0
>3a2c18	3a aa e2 20 bf 18 f0 3a 29 8e 05 0c 87 9c 9f 18
>3a2c28	f0 3a 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a2c38	a9 09 8f d1 08 00 c2 20 29 ff 00 20 f1 18 e2 20
>3a2c48	dc d2 08 08 c2 20 a5 21 c9 04 00 b0 19 8d 00 01
>3a2c58	a9 04 00 8d 02 01 18 ad 04 01 69 80 02 85 9c a9
>3a2c68	af 00 85 9e 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a2c78	e2 20 a9 09 8f d1 08 00 c2 20 29 ff 00 20 f1 18
>3a2c88	e2 20 dc d2 08 08 c2 20 a5 21 c9 04 00 b0 19 8d
>3a2c98	00 01 a9 0c 00 8d 02 01 18 ad 04 01 69 00 02 85
>3a2ca8	9c a9 af 00 85 9e 28 60 08 c2 20 48 a9 00 08 5b
>3a2cb8	68 28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff 00 20
>3a2cc8	f1 18 e2 20 dc d2 08 08 c2 20 20 9f 17 20 2c 05
>3a2cd8	20 4b 2c c2 20 a5 9e 48 a5 9c 48 a9 2c 00 20 a3
>3a2ce8	1c 20 9f 17 20 2c 05 c2 20 a5 21 48 a9 2c 00 20
>3a2cf8	a3 1c 20 9f 17 20 2c 05 c2 20 a5 21 48 a9 2c 00
>3a2d08	20 a3 1c 20 9f 17 20 89 04 c2 20 a5 21 85 5b a5
>3a2d18	23 85 5d 68 85 57 68 85 53 68 85 9c 68 85 9e a5
>3a2d28	5b 87 9c e2 20 38 a5 5d e9 b0 a0 02 00 97 9c c2
>3a2d38	20 a5 57 d0 11 a5 59 d0 0d e2 20 a5 53 29 07 a0
>3a2d48	03 00 97 9c 80 0d e2 20 a5 53 29 07 09 08 a0 03
>3a2d58	00 97 9c 28 60 08 c2 20 20 9f 17 20 2c 05 20 8d
>3a2d68	2c c2 20 a5 9e 48 a5 9c 48 a9 2c 00 20 a3 1c 20
>3a2d78	9f 17 20 89 04 c2 20 a5 21 48 a9 2c 00 20 a3 1c
>3a2d88	20 9f 17 20 89 04 c2 20 a5 21 48 a9 2c 00 20 a3
>3a2d98	1c 20 9f 17 20 89 04 c2 20 a5 21 85 5b a5 23 85
>3a2da8	5d 68 85 57 68 85 53 68 85 9c 68 85 9e a5 5b a0
>3a2db8	01 00 97 9c e2 20 38 a5 5d e9 b0 c8 c8 97 9c c2
>3a2dc8	20 a5 53 a0 04 00 97 9c a5 57 a0 06 00 97 9c 28
>3a2dd8	60 08 c2 20 20 9f 17 20 2c 05 20 8d 2c c2 20 a5
>3a2de8	9e 48 a5 9c 48 a9 2c 00 20 a3 1c 20 9f 17 20 89
>3a2df8	04 c2 20 68 85 9c 68 85 9e a5 21 d0 06 e2 20 a9
>3a2e08	00 80 04 e2 20 a9 01 e2 20 a0 00 00 97 9c 28 60
>3a2e18	08 c2 20 20 9f 17 20 2c 05 20 8d 2c a5 9e 48 a5
>3a2e28	9c 48 a9 2c 00 20 a3 1c 20 9f 17 20 89 04 a5 21
>3a2e38	48 a9 2c 00 20 a3 1c 20 9f 17 20 89 04 a5 21 85
>3a2e48	57 68 85 53 68 85 9c 68 85 9e a5 53 a0 08 00 97
>3a2e58	9c a5 57 a0 0a 00 97 9c 28 60 0b 08 08 c2 20 48
>3a2e68	a9 00 08 5b 68 28 e2 20 a9 00 8f 58 f0 3a af 5c
>3a2e78	f0 3a c9 b0 b0 1c 8f 24 04 af af 5b f0 3a 8f 23
>3a2e88	04 af af 5a f0 3a 8f 22 04 af a9 10 8f 58 f0 3a
>3a2e98	80 17 38 e9 b0 8f 04 04 af af 5b f0 3a 8f 03 04
>3a2ea8	af af 5a f0 3a 8f 02 04 af af 59 f0 3a d0 3c af
>3a2eb8	58 f0 3a f0 1b af 5d f0 3a 8f 28 04 af af 5e f0
>3a2ec8	3a 8f 29 04 af af 5f f0 3a 8f 2a 04 af 82 8b 00
>3a2ed8	af 5d f0 3a 8f 08 04 af af 5e f0 3a 8f 09 04 af
>3a2ee8	af 5f f0 3a 8f 0a 04 af 82 70 00 af 58 f0 3a 09
>3a2ef8	01 8f 58 f0 3a 89 10 f0 32 af 60 f0 3a 8f 28 04
>3a2f08	af af 61 f0 3a 8f 29 04 af af 62 f0 3a 8f 2a 04
>3a2f18	af af 63 f0 3a 8f 2b 04 af af 64 f0 3a 8f 2c 04
>3a2f28	af af 65 f0 3a 8f 2d 04 af 80 30 af 60 f0 3a 8f
>3a2f38	08 04 af af 61 f0 3a 8f 09 04 af af 62 f0 3a 8f
>3a2f48	0a 04 af af 63 f0 3a 8f 0b 04 af af 64 f0 3a 8f
>3a2f58	0c 04 af af 65 f0 3a 8f 0d 04 af e2 20 af 69 f0
>3a2f68	3a c9 b0 b0 20 8f 27 04 af af 68 f0 3a 8f 26 04
>3a2f78	af af 67 f0 3a 8f 25 04 af af 58 f0 3a 09 20 8f
>3a2f88	58 f0 3a 80 17 38 e9 b0 8f 07 04 af af 68 f0 3a
>3a2f98	8f 06 04 af af 67 f0 3a 8f 05 04 af af 66 f0 3a
>3a2fa8	d0 3e af 58 f0 3a 89 20 f0 1b af 6a f0 3a 8f 28
>3a2fb8	04 af af 6b f0 3a 8f 29 04 af af 6c f0 3a 8f 2a
>3a2fc8	04 af 82 8b 00 af 6a f0 3a 8f 08 04 af af 6b f0
>3a2fd8	3a 8f 09 04 af af 6c f0 3a 8f 0a 04 af 82 70 00
>3a2fe8	af 58 f0 3a 09 02 8f 58 f0 3a 89 20 f0 32 af 6d
>3a2ff8	f0 3a 8f 28 04 af af 6e f0 3a 8f 29 04 af af 6f
>3a3008	f0 3a 8f 2a 04 af af 70 f0 3a 8f 2b 04 af af 71
>3a3018	f0 3a 8f 2e 04 af af 72 f0 3a 8f 2f 04 af 80 30
>3a3028	af 6d f0 3a 8f 08 04 af af 6e f0 3a 8f 09 04 af
>3a3038	af 6f f0 3a 8f 0a 04 af af 70 f0 3a 8f 0b 04 af
>3a3048	af 71 f0 3a 8f 0e 04 af af 72 f0 3a 8f 0f 04 af
>3a3058	af 58 f0 3a 29 30 f0 43 c9 10 f0 76 c9 20 d0 03
>3a3068	82 8a 00 af 58 f0 3a 29 03 f0 23 c9 03 f0 23 08
>3a3078	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d1 08
>3a3088	00 c2 20 29 ff 00 20 f1 18 e2 20 dc d2 08 a9 01
>3a3098	80 02 a9 03 8f 20 04 af 82 7d 00 af 58 f0 3a 29
>3a30a8	03 f0 23 c9 03 f0 23 08 c2 20 48 a9 00 08 5b 68
>3a30b8	28 e2 20 a9 0a 8f d1 08 00 c2 20 29 ff 00 20 f1
>3a30c8	18 e2 20 dc d2 08 a9 01 80 02 a9 03 8f 00 04 af
>3a30d8	80 34 af 58 f0 3a 29 01 0a 09 11 8f 20 04 af af
>3a30e8	58 f0 3a 29 02 09 11 8f 00 04 af 80 19 af 58 f0
>3a30f8	3a 29 02 09 21 8f 20 04 af af 58 f0 3a 29 01 0a
>3a3108	09 21 8f 00 04 af af 00 04 af 09 80 8f 00 04 af
>3a3118	af 58 f0 3a 29 30 f0 0f af 20 04 af 09 80 8f 20
>3a3128	04 af ea ea ea ea ea af 01 04 af 89 80 d0 f8 a9
>3a3138	00 8f 20 04 af 8f 00 04 af 28 2b 60 0b 08 e2 20
>3a3148	c2 10 a9 00 a2 00 00 8f 59 f0 3a e8 e0 1a 00 d0
>3a3158	f6 20 f7 1c c9 e6 f0 23 c9 e7 f0 5e 08 c2 20 48
>3a3168	a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20
>3a3178	29 ff 00 20 f1 18 e2 20 dc d2 08 20 a3 1c 20 9f
>3a3188	17 20 89 04 c2 20 a5 21 8f 5a f0 3a e2 20 a5 23
>3a3198	8f 5c f0 3a a9 2c 20 a3 1c 20 9f 17 20 89 04 c2
>3a31a8	20 a5 21 8f 5d f0 3a e2 20 a5 23 8f 5f f0 3a e2
>3a31b8	20 a9 00 8f 59 f0 3a 82 74 00 20 a3 1c 20 9f 17
>3a31c8	20 89 04 c2 20 a5 21 8f 5a f0 3a e2 20 a5 23 8f
>3a31d8	5c f0 3a a9 2c 20 a3 1c 20 9f 17 20 dd 04 c2 20
>3a31e8	a5 21 8f 60 f0 3a 8d 00 01 a9 2c 00 20 a3 1c 20
>3a31f8	9f 17 20 dd 04 c2 20 a5 21 8f 62 f0 3a 8d 02 01
>3a3208	a9 2c 00 20 a3 1c 20 9f 17 20 dd 04 c2 20 a5 21
>3a3218	8f 64 f0 3a c2 20 ad 04 01 8f 5d f0 3a e2 20 ad
>3a3228	06 01 8f 5f f0 3a e2 20 a9 01 8f 59 f0 3a e2 20
>3a3238	a9 99 20 a3 1c 20 f7 1c c9 e6 f0 23 c9 e7 f0 5e
>3a3248	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1
>3a3258	08 00 c2 20 29 ff 00 20 f1 18 e2 20 dc d2 08 20
>3a3268	a3 1c 20 9f 17 20 89 04 c2 20 a5 21 8f 67 f0 3a
>3a3278	e2 20 a5 23 8f 69 f0 3a a9 2c 20 a3 1c 20 9f 17
>3a3288	20 89 04 c2 20 a5 21 8f 6a f0 3a e2 20 a5 23 8f
>3a3298	6c f0 3a e2 20 a9 00 8f 66 f0 3a 82 74 00 20 a3
>3a32a8	1c 20 9f 17 20 89 04 c2 20 a5 21 8f 67 f0 3a e2
>3a32b8	20 a5 23 8f 69 f0 3a a9 2c 20 a3 1c 20 9f 17 20
>3a32c8	dd 04 c2 20 a5 21 8f 6d f0 3a 8d 00 01 a9 2c 00
>3a32d8	20 a3 1c 20 9f 17 20 dd 04 c2 20 a5 21 8f 6f f0
>3a32e8	3a 8d 02 01 a9 2c 00 20 a3 1c 20 9f 17 20 dd 04
>3a32f8	c2 20 a5 21 8f 71 f0 3a c2 20 ad 04 01 8f 6a f0
>3a3308	3a e2 20 ad 06 01 8f 6c f0 3a e2 20 a9 01 8f 66
>3a3318	f0 3a c2 20 af 5d f0 3a cf 6a f0 3a d0 14 e2 20
>3a3328	af 5f f0 3a cf 6c f0 3a d0 08 c2 20 20 62 2e 28
>3a3338	2b 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a
>3a3348	8f d1 08 00 c2 20 29 ff 00 20 f1 18 e2 20 dc d2
>3a3358	08 08 20 b7 1b e2 20 a7 00 d0 03 4c fe 33 c9 3a
>3a3368	d0 03 4c fe 33 c9 22 d0 0b 20 be 16 20 e2 3c a9
>3a3378	3b 20 a3 1c 20 3e 03 90 41 20 eb 48 90 3c a9 3f
>3a3388	20 18 00 a9 20 20 18 00 20 10 00 e2 20 a5 e8 c9
>3a3398	02 f0 46 c9 00 f0 62 c9 01 f0 5d 08 c2 20 48 a9
>3a33a8	00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20 29
>3a33b8	ff 00 20 f1 18 e2 20 dc d2 08 08 c2 20 48 a9 00
>3a33c8	08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff
>3a33d8	00 20 f1 18 e2 20 dc d2 08 c2 20 a9 00 4c 85 21
>3a33e8	a9 00 00 85 23 e2 20 a9 02 85 25 c2 20 20 85 48
>3a33f8	a9 0d 00 20 18 00 28 60 ea c2 20 a5 00 85 3e a5
>3a3408	02 85 40 a9 00 4c 85 00 a9 00 00 85 02 20 81 05
>3a3418	c2 20 a5 3e 85 00 a5 40 85 02 80 cf 08 20 b7 1b
>3a3428	e2 20 a7 00 f0 46 c9 3a f0 42 20 3e 03 90 3f 20
>3a3438	eb 48 90 3a 20 14 00 e2 20 8f 00 4e 00 a9 00 8f
>3a3448	01 4e 00 c2 20 a9 00 4e 85 21 a9 00 00 85 23 e2
>3a3458	20 a9 02 85 25 20 85 48 20 b7 1b a7 00 f0 0d c9
>3a3468	3a f0 09 c9 2c d0 07 20 96 1b 80 b1 28 60 08 c2
>3a3478	20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00
>3a3488	c2 20 29 ff 00 20 f1 18 e2 20 dc d2 08 08 20 9f
>3a3498	17 20 89 04 e2 20 a9 5c 85 a0 c2 20 a5 21 85 a1
>3a34a8	e2 20 a5 23 85 a3 e2 20 a9 2c 85 35 20 d8 1c 90
>3a34b8	41 20 96 1b 20 9f 17 20 dd 04 c2 20 a5 21 85 53
>3a34c8	e2 20 a9 2c 85 35 20 d8 1c 90 27 20 96 1b 20 9f
>3a34d8	17 20 dd 04 c2 20 a5 21 85 57 e2 20 a9 2c 85 35
>3a34e8	20 d8 1c 90 0d 20 96 1b 20 9f 17 20 dd 04 c2 20
>3a34f8	a4 21 a6 57 a5 53 0b 8b 08 22 a0 08 00 28 ab 2b
>3a3508	20 db 1b 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a3518	20 a9 04 8f d1 08 00 c2 20 29 ff 00 20 f1 18 e2
>3a3528	20 dc d2 08 08 e2 20 20 b7 1b 20 eb 48 90 64 a9
>3a3538	8c 20 a3 1c a9 01 20 0d 15 a2 01 00 a9 00 8f 00
>3a3548	4d 00 20 9f 17 20 dd 04 c2 20 a5 21 9f 00 4d 00
>3a3558	e2 20 af 00 4d 00 1a 8f 00 4d 00 30 55 e8 e8 20
>3a3568	b7 1b a7 00 c9 2c f0 25 c9 8d d0 27 20 96 1b 20
>3a3578	99 49 c2 20 a5 be 85 21 e2 20 a5 c0 85 23 64 24
>3a3588	a5 e8 09 80 85 e8 85 25 20 85 48 28 60 20 96 1b
>3a3598	4c 4a 35 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a35a8	02 8f d1 08 00 c2 20 29 ff 00 20 f1 18 e2 20 dc
>3a35b8	d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a
>3a35c8	8f d1 08 00 c2 20 29 ff 00 20 f1 18 e2 20 dc d2
>3a35d8	08 08 20 b7 1b e2 20 a7 00 f0 28 c9 3a f0 24 20
>3a35e8	3e 03 90 21 20 eb 48 90 1c 20 2c 36 20 85 48 20
>3a35f8	b7 1b a7 00 f0 0d c9 3a f0 09 c9 2c d0 07 20 96
>3a3608	1b 80 cf 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a3618	20 a9 02 8f d1 08 00 c2 20 29 ff 00 20 f1 18 e2
>3a3628	20 dc d2 08 08 a5 02 85 40 a5 00 85 3e a5 1a 85
>3a3638	44 a5 18 85 42 c2 20 a5 38 d0 04 a5 36 f0 4e a5
>3a3648	36 85 00 a5 38 85 02 a5 3a 85 18 a5 3c 85 1a e2
>3a3658	20 a7 00 f0 53 c9 3a f0 4f c9 2c d0 03 20 96 1b
>3a3668	20 b7 1b a7 00 c9 22 f0 4e 20 57 03 b0 4e 08 c2
>3a3678	20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00
>3a3688	c2 20 29 ff 00 20 f1 18 e2 20 dc d2 08 c2 20 a9
>3a3698	00 00 85 18 a9 36 00 85 1a 18 a5 18 69 04 00 85
>3a36a8	00 a5 1a 69 00 00 85 02 e2 20 a9 80 85 33 a9 a8
>3a36b8	85 35 20 ed 1b 80 a9 20 be 16 80 03 20 f3 15 c2
>3a36c8	20 a5 00 85 36 a5 02 85 38 a5 18 85 3a a5 1a 85
>3a36d8	3c a5 42 85 18 a5 44 85 1a a5 3e 85 00 a5 40 85
>3a36e8	02 28 60 20 db 1b 60 64 36 64 38 64 3a 64 3c 60
>3a36f8	20 24 00 60 20 9f 17 c2 20 a5 23 48 a5 21 48 e2
>3a3708	20 a7 00 c9 2c d0 22 20 96 1b 20 9f 17 c2 20 a5
>3a3718	24 d0 35 68 85 08 68 85 0a c2 20 a5 21 87 08 e2
>3a3728	20 a0 02 00 a5 23 97 08 60 08 c2 20 48 a9 00 08
>3a3738	5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00
>3a3748	20 f1 18 e2 20 dc d2 08 08 c2 20 48 a9 00 08 5b
>3a3758	68 28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff 00 20
>3a3768	f1 18 e2 20 dc d2 08 20 9f 17 c2 20 a5 23 48 a5
>3a3778	21 48 e2 20 a7 00 c9 2c d0 19 20 96 1b 20 9f 17
>3a3788	c2 20 a5 23 d0 2c 68 85 08 68 85 0a c2 20 a5 21
>3a3798	87 08 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a37a8	02 8f d1 08 00 c2 20 29 ff 00 20 f1 18 e2 20 dc
>3a37b8	d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09
>3a37c8	8f d1 08 00 c2 20 29 ff 00 20 f1 18 e2 20 dc d2
>3a37d8	08 20 9f 17 c2 20 a5 23 48 a5 21 48 e2 20 a7 00
>3a37e8	c9 2c d0 1f 20 96 1b 20 9f 17 e2 20 a5 22 d0 32
>3a37f8	c2 20 a5 23 d0 2c 68 85 08 68 85 0a e2 20 a5 21
>3a3808	87 08 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a3818	02 8f d1 08 00 c2 20 29 ff 00 20 f1 18 e2 20 dc
>3a3828	d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09
>3a3838	8f d1 08 00 c2 20 29 ff 00 20 f1 18 e2 20 dc d2
>3a3848	08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 01 8f
>3a3858	d1 08 00 c2 20 29 ff 00 20 f1 18 e2 20 dc d2 08
>3a3868	08 e2 20 a7 00 f0 05 20 96 1b 80 f7 28 60 08 28
>3a3878	60 08 28 60 08 28 60 08 c2 20 a5 1a 20 b8 18 a5
>3a3888	18 20 b8 18 a5 02 48 a5 00 48 20 db 1b a5 02 20
>3a3898	b8 18 a5 00 20 b8 18 68 85 00 68 85 02 20 b7 1b
>3a38a8	20 eb 48 b0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a38b8	20 a9 05 8f d1 08 00 c2 20 29 ff 00 20 f1 18 e2
>3a38c8	20 dc d2 08 e2 20 a5 e8 20 cf 18 a5 e7 20 cf 18
>3a38d8	c2 20 a5 e5 20 b8 18 20 b7 1b e2 20 a7 00 c9 87
>3a38e8	d0 6a a5 e8 c9 00 f0 04 c9 01 f0 00 20 96 1b 20
>3a38f8	9f 17 20 85 48 e2 20 a9 99 20 a3 1c 20 9f 17 c2
>3a3908	20 a5 25 20 b8 18 a5 23 20 b8 18 a5 21 20 b8 18
>3a3918	e2 20 a9 9a 85 35 20 d8 1c 90 1b 20 96 1b 20 9f
>3a3928	17 e2 20 a5 25 20 b8 18 c2 20 a5 23 20 b8 18 a5
>3a3938	21 20 b8 18 80 14 c2 20 a9 00 00 20 b8 18 a9 00
>3a3948	00 20 b8 18 a9 01 00 20 b8 18 28 60 08 c2 20 48
>3a3958	a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20
>3a3968	29 ff 00 20 f1 18 e2 20 dc d2 08 08 8b 08 e2 20
>3a3978	48 a9 00 48 ab 68 28 08 c2 20 48 a9 00 08 5b 68
>3a3988	28 c2 30 a4 31 c8 c8 c2 20 b9 0c 00 85 e5 b9 0e
>3a3998	00 e2 20 85 e7 b9 10 00 85 e8 c2 20 5a 20 37 47
>3a39a8	7a c2 20 b9 00 00 85 27 b9 02 00 85 29 e2 20 b9
>3a39b8	04 00 85 2b c2 20 5a 20 c7 21 20 85 48 7a c2 20
>3a39c8	b9 06 00 85 27 b9 08 00 85 29 e2 20 b9 0a 00 85
>3a39d8	2b c2 20 b9 02 00 30 0a 20 0b 23 20 76 04 f0 28
>3a39e8	80 08 20 ee 22 20 76 04 f0 1e c2 20 b9 12 00 85
>3a39f8	00 b9 14 00 85 02 b9 16 00 85 18 b9 18 00 85 1a
>3a3a08	e2 20 a9 03 85 da 80 17 a2 21 08 20 ce 14 c2 20
>3a3a18	18 a5 31 69 1a 00 85 31 a5 33 69 00 00 85 33 ab
>3a3a28	28 60 08 a5 18 48 a5 1a 48 20 b7 1b 20 81 05 a5
>3a3a38	21 f0 26 20 95 1e 90 42 e2 20 a9 02 85 da 20 db
>3a3a48	1b c2 20 68 20 b8 18 68 20 b8 18 a5 02 20 b8 18
>3a3a58	a5 00 20 b8 18 e6 2f 28 60 68 68 08 c2 20 48 a9
>3a3a68	00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29
>3a3a78	ff 00 20 f1 18 e2 20 dc d2 08 68 68 08 c2 20 48
>3a3a88	a9 00 08 5b 68 28 e2 20 a9 06 8f d1 08 00 c2 20
>3a3a98	29 ff 00 20 f1 18 e2 20 dc d2 08 08 c2 30 a5 2f
>3a3aa8	f0 1e 20 da 18 85 00 20 da 18 85 02 20 da 18 85
>3a3ab8	18 20 da 18 85 1a c6 2f e2 20 a9 03 85 da 28 60
>3a3ac8	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 07 8f d1
>3a3ad8	08 00 c2 20 29 ff 00 20 f1 18 e2 20 dc d2 08 08
>3a3ae8	20 9f 17 20 76 04 f0 1c e2 20 a9 94 20 a3 1c 20
>3a3af8	81 05 20 76 04 f0 12 20 95 1e 90 2c e2 20 a9 02
>3a3b08	85 da 80 03 20 db 1b 28 60 08 c2 20 48 a9 00 08
>3a3b18	5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00
>3a3b28	20 f1 18 e2 20 dc d2 08 08 c2 20 48 a9 00 08 5b
>3a3b38	68 28 e2 20 a9 06 8f d1 08 00 c2 20 29 ff 00 20
>3a3b48	f1 18 e2 20 dc d2 08 08 e2 20 a9 01 85 da 28 60
>3a3b58	08 20 b7 1b 20 81 05 a5 21 f0 0d 20 95 1e 90 27
>3a3b68	e2 20 a9 02 85 da 28 60 08 c2 20 48 a9 00 08 5b
>3a3b78	68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00 20
>3a3b88	f1 18 e2 20 dc d2 08 08 c2 20 48 a9 00 08 5b 68
>3a3b98	28 e2 20 a9 06 8f d1 08 00 c2 20 29 ff 00 20 f1
>3a3ba8	18 e2 20 dc d2 08 20 70 14 20 9c 0c 20 36 46 60
>3a3bb8	08 a7 00 10 03 20 96 1b 20 eb 48 b0 03 4c 2f 3c
>3a3bc8	e2 20 20 f7 1c c9 8c d0 0e a9 8c 20 a3 1c a9 00
>3a3bd8	8f 00 4d 00 20 f6 15 20 b7 1b e2 20 a7 00 c9 87
>3a3be8	f0 03 4c 2f 3c 20 96 1b a5 e8 48 a5 e7 48 a5 e6
>3a3bf8	48 a5 e5 48 20 9f 17 68 85 e5 68 85 e6 68 85 e7
>3a3c08	68 85 e8 29 80 f0 1b 20 a9 46 90 3a c2 20 a0 09
>3a3c18	00 b7 08 85 be e2 20 c8 c8 b7 08 85 c0 20 7a 4b
>3a3c28	80 03 20 85 48 28 60 08 c2 20 48 a9 00 08 5b 68
>3a3c38	28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00 20 f1
>3a3c48	18 e2 20 dc d2 08 08 c2 20 48 a9 00 08 5b 68 28
>3a3c58	e2 20 a9 05 8f d1 08 00 c2 20 29 ff 00 20 f1 18
>3a3c68	e2 20 dc d2 08 08 e2 20 20 f7 1c c9 00 f0 66 20
>3a3c78	9f 17 e2 20 a5 25 c9 ff f0 14 c9 02 d0 05 20 e2
>3a3c88	3c 80 0b c9 00 d0 05 20 02 3d 80 02 80 4a 20 b7
>3a3c98	1b a7 00 f0 40 c9 3a f0 3c c9 2c f0 23 c9 3b f0
>3a3ca8	24 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a3cb8	d1 08 00 c2 20 29 ff 00 20 f1 18 e2 20 dc d2 08
>3a3cc8	a9 09 20 18 00 20 96 1b 20 b7 1b a7 00 f0 09 c9
>3a3cd8	3a f0 05 80 9a 20 33 02 28 60 08 8b 08 c2 20 48
>3a3ce8	a9 00 08 5b 68 28 e2 20 c2 10 a0 00 00 b7 21 f0
>3a3cf8	06 20 18 00 c8 80 f6 ab 28 60 08 c2 20 20 51 11
>3a3d08	a5 14 85 21 a5 16 85 23 20 e2 3c 28 60 08 e2 20
>3a3d18	85 b3 4a 4a 4a 4a 29 0f 18 69 30 97 14 c8 a5 b3
>3a3d28	29 0f 18 69 30 97 14 c8 28 60 e2 20 a9 8c 20 a3
>3a3d38	1c 08 20 9f 17 e2 20 c2 10 af 0e 08 af 09 08 8f
>3a3d48	0e 08 af 20 f2 10 a0 00 00 af 06 08 af 20 15 3d
>3a3d58	a9 2f 97 14 c8 af 09 08 af 20 15 3d a9 2f 97 14
>3a3d68	c8 af 0f 08 af 20 15 3d af 0a 08 af 20 15 3d a9
>3a3d78	00 97 14 af 0e 08 af 29 f7 8f 0e 08 af c2 20 a5
>3a3d88	14 85 21 a5 16 85 23 e2 20 a9 02 85 25 28 e2 20
>3a3d98	20 96 1b 60 e2 20 a9 8c 20 a3 1c 08 20 9f 17 e2
>3a3da8	20 c2 10 af 0e 08 af 09 08 8f 0e 08 af 20 f2 10
>3a3db8	a0 00 00 af 04 08 af 29 7f 20 15 3d a9 3a 97 14
>3a3dc8	c8 af 02 08 af 20 15 3d a9 3a 97 14 c8 af 00 08
>3a3dd8	af 20 15 3d a9 00 97 14 af 0e 08 af 29 f7 8f 0e
>3a3de8	08 af c2 20 a5 14 85 21 a5 16 85 23 e2 20 a9 02
>3a3df8	85 25 28 e2 20 20 96 1b 60 08 c2 20 20 9f 17 20
>3a3e08	89 04 c2 20 a5 21 49 ff ff 85 21 a5 23 49 ff ff
>3a3e18	85 23 e6 21 d0 03 e6 23 00 28 60 e2 20 a9 8c 20
>3a3e28	a3 1c 08 c2 30 20 9f 17 20 b3 04 c2 20 a5 23 48
>3a3e38	a5 21 48 20 b7 1b e2 20 a7 00 c9 2c f0 03 4c 9a
>3a3e48	3e 20 96 1b 20 9f 17 20 dd 04 c2 20 a5 21 48 20
>3a3e58	b7 1b e2 20 a7 00 c9 2c f0 03 4c 9a 3e 20 96 1b
>3a3e68	20 9f 17 20 dd 04 c2 20 a5 21 85 8d e2 20 a5 23
>3a3e78	85 8f c2 20 68 85 27 a9 00 00 85 29 68 85 21 68
>3a3e88	85 23 e2 20 a9 02 85 25 20 f1 12 e2 20 20 96 1b
>3a3e98	28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>3a3ea8	8f d1 08 00 c2 20 29 ff 00 20 f1 18 e2 20 dc d2
>3a3eb8	08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>3a3ec8	d1 08 00 c2 20 29 ff 00 20 f1 18 e2 20 dc d2 08
>3a3ed8	e2 20 a9 8c 20 a3 1c 08 c2 30 20 9f 17 e2 20 a5
>3a3ee8	25 c9 02 f0 03 4c 5c 3f c2 20 a5 23 48 a5 21 48
>3a3ef8	20 b7 1b e2 20 a7 00 c9 2c f0 03 4c 7b 3f 20 96
>3a3f08	1b 20 9f 17 e2 20 a5 25 c9 00 d0 48 c2 20 a5 21
>3a3f18	85 8d c2 20 68 85 21 68 85 23 e2 20 a9 02 85 25
>3a3f28	e2 20 a0 00 00 b7 21 f0 03 c8 80 f9 c2 20 98 38
>3a3f38	e5 8d 30 09 85 27 a9 00 00 85 29 80 07 a9 00 00
>3a3f48	85 27 85 29 e2 20 a9 00 85 2b 20 f1 12 e2 20 20
>3a3f58	96 1b 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a3f68	a9 04 8f d1 08 00 c2 20 29 ff 00 20 f1 18 e2 20
>3a3f78	dc d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a3f88	02 8f d1 08 00 c2 20 29 ff 00 20 f1 18 e2 20 dc
>3a3f98	d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09
>3a3fa8	8f d1 08 00 c2 20 29 ff 00 20 f1 18 e2 20 dc d2
>3a3fb8	08 e2 20 a9 8c 20 a3 1c 08 c2 30 20 9f 17 e2 20
>3a3fc8	a5 25 c9 02 f0 03 4c 25 40 c2 20 a5 23 48 a5 21
>3a3fd8	48 20 b7 1b e2 20 a7 00 c9 2c f0 03 4c 44 40 20
>3a3fe8	96 1b 20 9f 17 e2 20 a5 25 c9 00 d0 30 c2 20 a5
>3a3ff8	21 85 8d c2 20 a9 00 00 85 27 a9 00 00 85 29 e2
>3a4008	20 a9 00 85 2b c2 20 68 85 21 68 85 23 e2 20 a9
>3a4018	02 85 25 20 f1 12 e2 20 20 96 1b 28 60 08 c2 20
>3a4028	48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2
>3a4038	20 29 ff 00 20 f1 18 e2 20 dc d2 08 08 c2 20 48
>3a4048	a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20
>3a4058	29 ff 00 20 f1 18 e2 20 dc d2 08 08 c2 20 48 a9
>3a4068	00 08 5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20 29
>3a4078	ff 00 20 f1 18 e2 20 dc d2 08 e2 20 a9 8c 20 a3
>3a4088	1c 20 9f 17 c2 10 e2 20 a5 25 c9 02 d0 23 c2 20
>3a4098	a5 00 85 3e a5 02 85 40 a5 21 85 00 a5 23 85 02
>3a40a8	20 81 05 a5 3e 85 00 a5 40 85 02 e2 20 20 96 1b
>3a40b8	60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f
>3a40c8	d1 08 00 c2 20 29 ff 00 20 f1 18 e2 20 dc d2 08
>3a40d8	e2 20 a9 8c 20 a3 1c 08 20 9f 17 c2 10 e2 20 a5
>3a40e8	25 c9 00 d0 1a 20 51 11 c2 20 a5 14 85 21 a5 16
>3a40f8	85 23 e2 20 a9 02 85 25 28 e2 20 20 96 1b 60 08
>3a4108	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08
>3a4118	00 c2 20 29 ff 00 20 f1 18 e2 20 dc d2 08 e2 20
>3a4128	a9 8c 20 a3 1c 08 20 9f 17 20 b3 04 c2 20 64 0c
>3a4138	64 0e e2 30 a0 00 b7 21 c9 20 f0 04 c9 24 d0 03
>3a4148	c8 80 f3 b7 21 20 68 03 90 1e c2 20 06 0c 26 0e
>3a4158	06 0c 26 0e 06 0c 26 0e 06 0c 26 0e e2 20 20 89
>3a4168	03 05 0c 85 0c c8 80 db c2 20 a5 0c 85 21 a5 0e
>3a4178	85 23 e2 20 a9 00 85 25 28 e2 20 20 96 1b 60 e2
>3a4188	20 a9 8c 20 a3 1c 08 20 9f 17 20 89 04 20 f2 10
>3a4198	e2 30 a0 ff a9 00 97 14 88 a5 21 29 0f aa bf 00
>3a41a8	d0 3a 97 14 88 a5 21 29 f0 4a 4a 4a 4a aa bf 00
>3a41b8	d0 3a 97 14 88 a5 22 85 21 a5 23 85 22 a5 24 85
>3a41c8	23 a9 00 85 24 a5 21 d0 d0 a5 22 d0 cc a5 23 d0
>3a41d8	c8 98 38 65 14 85 21 a5 15 85 22 a5 16 85 23 a5
>3a41e8	17 85 24 a9 02 85 25 28 e2 20 20 96 1b 60 08 c2
>3a41f8	20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00
>3a4208	c2 20 29 ff 00 20 f1 18 e2 20 dc d2 08 e2 20 a9
>3a4218	8c 20 a3 1c 20 9f 17 e2 20 a5 25 c9 02 d0 1f 8b
>3a4228	a5 23 48 ab c2 10 a6 21 20 d6 11 ab 84 21 c2 20
>3a4238	64 23 e2 20 a9 00 85 25 e2 20 20 96 1b 60 08 c2
>3a4248	20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00
>3a4258	c2 20 29 ff 00 20 f1 18 e2 20 dc d2 08 e2 20 a9
>3a4268	8c 20 a3 1c 20 9f 17 e2 20 a5 25 c9 00 d0 12 e2
>3a4278	20 a7 21 85 21 64 22 64 23 64 2e e2 20 20 96 1b
>3a4288	60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f
>3a4298	d1 08 00 c2 20 29 ff 00 20 f1 18 e2 20 dc d2 08
>3a42a8	e2 20 a9 8c 20 a3 1c 20 9f 17 e2 20 a5 25 c9 00
>3a42b8	d0 1d c2 20 a7 21 85 0c e2 20 a0 02 00 b7 21 85
>3a42c8	23 64 24 c2 20 a5 0c 85 21 e2 20 20 96 1b 60 08
>3a42d8	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08
>3a42e8	00 c2 20 29 ff 00 20 f1 18 e2 20 dc d2 08 e2 20
>3a42f8	a9 8c 20 a3 1c 20 9f 17 e2 20 a5 25 c9 00 d0 0e
>3a4308	c2 20 a7 21 85 21 64 23 e2 20 20 96 1b 60 08 c2
>3a4318	20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00
>3a4328	c2 20 29 ff 00 20 f1 18 e2 20 dc d2 08 e2 20 a9
>3a4338	8c 20 a3 1c 20 9f 17 e2 20 a5 25 c9 00 d0 24 20
>3a4348	f2 10 a5 21 87 14 a9 00 a0 01 00 97 14 c2 20 a5
>3a4358	14 85 21 a5 16 85 23 e2 20 a9 02 85 25 e2 20 20
>3a4368	96 1b 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a4378	04 8f d1 08 00 c2 20 29 ff 00 20 f1 18 e2 20 dc
>3a4388	d2 08 e2 20 a9 8c 20 a3 1c 20 9f 17 e2 20 a5 25
>3a4398	c9 02 d0 14 a7 21 85 21 64 22 64 23 64 24 a9 00
>3a43a8	85 25 e2 20 20 96 1b 60 08 c2 20 48 a9 00 08 5b
>3a43b8	68 28 e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00 20
>3a43c8	f1 18 e2 20 dc d2 08 e2 20 a9 8c 20 a3 1c 20 9f
>3a43d8	17 e2 20 a5 25 c9 00 d0 39 e2 20 a5 24 d0 52 a5
>3a43e8	23 d0 4e a5 22 d0 4a c2 10 20 f2 10 a4 21 e2 20
>3a43f8	a9 00 97 14 88 30 07 a9 20 97 14 88 10 fb a9 02
>3a4408	85 25 c2 20 a5 14 85 21 a5 16 85 23 e2 20 20 96
>3a4418	1b 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>3a4428	8f d1 08 00 c2 20 29 ff 00 20 f1 18 e2 20 dc d2
>3a4438	08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>3a4448	d1 08 00 c2 20 29 ff 00 20 f1 18 e2 20 dc d2 08
>3a4458	e2 20 a9 8c 20 a3 1c 20 9f 17 e2 20 a5 25 c9 00
>3a4468	d0 39 e2 20 a5 24 d0 52 a5 23 d0 4e a5 22 d0 4a
>3a4478	c2 10 20 f2 10 a4 21 e2 20 a9 00 97 14 88 30 07
>3a4488	a9 09 97 14 88 10 fb a9 02 85 25 c2 20 a5 14 85
>3a4498	21 a5 16 85 23 e2 20 20 96 1b 60 08 c2 20 48 a9
>3a44a8	00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20 29
>3a44b8	ff 00 20 f1 18 e2 20 dc d2 08 08 c2 20 48 a9 00
>3a44c8	08 5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff
>3a44d8	00 20 f1 18 e2 20 dc d2 08 e2 20 a9 8c 20 a3 1c
>3a44e8	20 9f 17 20 89 04 c2 20 a5 23 10 17 49 ff ff 85
>3a44f8	23 a5 21 49 ff ff 18 69 01 00 85 21 a5 23 69 00
>3a4508	00 85 23 e2 20 20 96 1b 60 e2 20 a9 8c 20 a3 1c
>3a4518	20 9f 17 e2 20 a5 25 c9 00 d0 25 c2 20 a5 23 30
>3a4528	12 d0 04 a5 21 f0 13 a9 00 00 85 23 a9 01 00 85
>3a4538	21 80 07 a9 ff ff 85 23 85 21 e2 20 20 96 1b 60
>3a4548	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1
>3a4558	08 00 c2 20 29 ff 00 20 f1 18 e2 20 dc d2 08 00
>3a4568	ea 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30
>3a4578	c2 20 a9 00 00 85 d7 e2 20 a9 36 85 d9 c2 30 a9
>3a4588	00 00 a0 00 00 97 d7 a0 02 00 97 d7 a0 04 00 97
>3a4598	d7 20 6c 1b 2b 28 60 8b 08 c2 20 a9 00 00 85 18
>3a45a8	a9 36 00 85 1a 20 6c 1b 20 4b 1e 28 ab 60 08 c2
>3a45b8	20 64 53 a9 ff 7f 85 57 20 33 02 20 f7 1c 29 ff
>3a45c8	00 c9 00 00 f0 2c c9 81 00 f0 1a 20 b7 1b 20 81
>3a45d8	05 a5 21 85 53 20 f7 1c 29 ff 00 c9 00 00 f0 12
>3a45e8	c9 81 00 d0 2a 20 a3 1c 20 b7 1b 20 81 05 a5 21
>3a45f8	85 57 a5 1a 48 a5 18 48 a5 02 48 a5 00 48 20 71
>3a4608	13 68 85 00 68 85 02 68 85 18 68 85 1a 28 60 08
>3a4618	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08
>3a4628	00 c2 20 29 ff 00 20 f1 18 e2 20 dc d2 08 08 08
>3a4638	c2 20 48 a9 00 08 5b 68 28 c2 20 64 e2 64 e5 e2
>3a4648	20 64 e4 64 e7 64 e8 c2 20 38 a5 d7 69 04 00 85
>3a4658	df e2 20 a5 d9 69 00 85 e1 28 60 c9 5f f0 1a c9
>3a4668	3a b0 04 c9 30 b0 12 c9 5b b0 04 c9 41 b0 0a c9
>3a4678	7b b0 04 c9 61 b0 02 18 60 38 60 08 e2 20 c2 10
>3a4688	a0 00 00 b7 0c f0 0a d7 e5 d0 13 c8 c0 08 00 d0
>3a4698	f2 b7 e5 20 b2 03 20 63 46 b0 03 28 38 60 28 18
>3a46a8	60 08 e2 20 c2 10 a0 00 00 a2 00 00 b7 e5 f0 0b
>3a46b8	20 b2 03 9f 00 4e 00 c8 e8 80 f1 a9 00 9f 00 4e
>3a46c8	00 c2 20 a9 00 4e 85 e5 e2 20 a9 00 85 e7 c2 20
>3a46d8	a5 e2 85 08 d0 06 e2 20 a5 e4 f0 4d e2 20 a5 e4
>3a46e8	85 0a a5 e8 a0 00 00 d7 08 d0 17 c2 20 18 a5 08
>3a46f8	69 01 00 85 0c e2 20 a5 0a 69 00 85 0e 20 83 46
>3a4708	b0 2a a0 0d 00 c2 20 b7 08 85 0c c8 c8 e2 20 b7
>3a4718	08 85 0e d0 06 c2 20 a5 0c f0 0e c2 20 a5 0c 85
>3a4728	08 e2 20 a5 0e 85 0a 80 b9 28 18 60 28 38 60 08
>3a4738	20 a9 46 b0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a4748	20 a9 05 8f d1 08 00 c2 20 29 ff 00 20 f1 18 e2
>3a4758	20 dc d2 08 c2 30 a0 09 00 b7 08 85 21 c8 c8 b7
>3a4768	08 85 23 e2 20 a0 00 00 b7 08 85 25 28 60 08 c2
>3a4778	20 18 a5 df 69 10 00 85 08 e2 20 a5 e1 69 00 85
>3a4788	0a c5 ba 90 27 c2 20 a5 08 c5 b8 90 1f 08 c2 20
>3a4798	48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08 00 c2
>3a47a8	20 29 ff 00 20 f1 18 e2 20 dc d2 08 c2 20 a5 df
>3a47b8	85 be e2 20 a5 e1 85 c0 c2 20 a5 08 85 df e2 20
>3a47c8	a5 0a 85 e1 28 60 08 e2 20 a5 25 c5 e8 f0 1f 08
>3a47d8	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08
>3a47e8	00 c2 20 29 ff 00 20 f1 18 e2 20 dc d2 08 c9 02
>3a47f8	d0 03 20 8b 12 c2 10 20 76 47 c2 30 18 a5 be 69
>3a4808	01 00 85 08 e2 20 a5 c0 69 00 85 0a a0 00 00 a9
>3a4818	00 97 08 c8 c0 08 00 d0 f8 a0 00 00 b7 e5 f0 10
>3a4828	20 b2 03 20 63 46 90 08 97 08 c8 c0 08 00 d0 ec
>3a4838	c2 20 a0 09 00 a5 21 97 be a5 23 c8 c8 97 be a5
>3a4848	e2 a0 0d 00 97 be c8 c8 e2 20 a5 e4 97 be c2 20
>3a4858	a5 be 85 e2 e2 20 a5 c0 85 e4 e2 20 a0 00 00 a5
>3a4868	25 97 be c9 02 f0 02 28 60 c2 20 a5 21 85 be e2
>3a4878	20 a5 23 85 c0 20 00 0f 20 15 0f 80 ea 08 c2 30
>3a4888	a5 e2 d0 06 e2 20 a5 e4 f0 05 20 a9 46 b0 05 20
>3a4898	ce 47 80 17 e2 20 a5 25 c9 02 f0 11 c2 30 a0 09
>3a48a8	00 a5 21 97 08 c8 c8 a5 23 97 08 28 60 20 8b 12
>3a48b8	a0 09 00 b7 08 85 be c8 c8 e2 20 b7 08 85 c0 20
>3a48c8	00 0f 20 34 0f e2 20 a5 25 c9 02 f0 02 80 cd c2
>3a48d8	20 a5 21 85 be e2 20 a5 23 85 c0 20 00 0f 20 15
>3a48e8	0f 80 b9 08 20 b7 1b e2 20 a7 00 20 3e 03 90 42
>3a48f8	c2 20 a5 00 85 e5 e2 20 a5 02 85 e7 20 96 1b a7
>3a4908	00 f0 0d c9 24 f0 14 c9 25 f0 09 20 63 46 b0 ec
>3a4918	a9 00 80 0c 20 96 1b a9 00 80 05 20 96 1b a9 02
>3a4928	85 e8 20 f7 1c c9 8c d0 06 a5 e8 09 80 85 e8 28
>3a4938	38 60 28 18 60 08 c2 20 48 a9 00 08 5b 68 28 c2
>3a4948	20 a5 21 85 0c a5 23 64 0e 64 21 64 23 e2 20 64
>3a4958	26 a9 01 85 25 c2 20 a5 0c f0 35 10 0e e2 20 a9
>3a4968	80 85 26 c2 20 49 ff ff 1a 85 0c e2 20 e6 24 c2
>3a4978	20 46 0e 66 0c e2 20 66 23 66 22 66 21 c2 20 a5
>3a4988	0c c9 01 00 d0 e5 e2 20 06 26 66 23 66 22 66 21
>3a4998	60 08 20 00 0f c2 20 a9 01 00 85 21 a9 00 00 85
>3a49a8	23 e2 20 af 00 4d 00 c2 20 29 ff 00 85 8d a8 a2
>3a49b8	01 00 c2 20 bf 00 4d 00 85 27 a9 00 00 85 29 20
>3a49c8	14 22 e8 e8 88 d0 eb c2 20 a9 04 00 85 27 a9 00
>3a49d8	00 85 29 20 14 22 e2 20 af 00 4d 00 85 0c a9 00
>3a49e8	85 0d c2 20 06 0c 38 a5 21 65 0c 85 21 a5 23 69
>3a49f8	00 00 85 23 d0 29 e2 20 a5 e8 09 80 a6 21 20 c4
>3a4a08	0c e2 20 af 00 4d 00 87 be a0 01 00 a2 00 00 e2
>3a4a18	20 bf 01 4d 00 97 be e4 8d f0 23 e8 c8 80 f0 08
>3a4a28	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08
>3a4a38	00 c2 20 29 ff 00 20 f1 18 e2 20 dc d2 08 e2 20
>3a4a48	38 a5 be 67 be 85 08 a5 bf 69 00 85 09 a5 c0 69
>3a4a58	00 85 0a 64 0b c2 20 a0 05 00 b7 c1 85 0c e2 20
>3a4a68	c8 c8 b7 c1 85 0e 64 0f e2 20 a9 00 87 08 c2 20
>3a4a78	18 a5 08 69 01 00 85 08 a5 0a 69 00 00 85 0a c5
>3a4a88	0e d0 e5 a5 08 c5 0c d0 df 28 60 08 c2 20 64 08
>3a4a98	64 0a e2 20 af 00 4d 00 85 8d 64 8e a2 01 00 e2
>3a4aa8	20 a7 be c5 8d f0 1f 08 c2 20 48 a9 00 08 5b 68
>3a4ab8	28 e2 20 a9 0a 8f d1 08 00 c2 20 29 ff 00 20 f1
>3a4ac8	18 e2 20 dc d2 08 c9 01 f0 3a a0 01 00 e2 20 bf
>3a4ad8	00 4d 00 85 21 64 22 64 23 64 24 b7 be 85 27 64
>3a4ae8	28 64 29 64 2a a5 21 c5 27 b0 68 20 14 22 c2 20
>3a4af8	18 a5 08 65 21 85 08 a5 0a 65 23 85 0a e8 e8 c8
>3a4b08	c4 8d d0 c9 e2 20 18 bf 00 4d 00 85 8e 65 08 85
>3a4b18	08 a5 09 69 00 85 09 c2 20 a5 0a 69 00 00 85 0a
>3a4b28	c2 20 06 08 26 0a 06 08 26 0a e2 20 38 a5 08 65
>3a4b38	8d 85 08 a5 09 69 00 85 09 c2 20 a5 0a 69 00 00
>3a4b48	85 0a 18 a5 08 65 be 85 08 e2 20 a5 0a 65 c0 85
>3a4b58	0a 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a4b68	09 8f d1 08 00 c2 20 29 ff 00 20 f1 18 e2 20 dc
>3a4b78	d2 08 08 20 00 0f e2 20 a0 00 00 b7 c1 29 7f c5
>3a4b88	25 d0 28 a5 25 48 c2 20 a5 23 48 a5 21 48 20 93
>3a4b98	4a 68 85 21 68 85 23 e2 20 68 85 25 c2 20 a5 21
>3a4ba8	87 08 a0 02 00 a5 23 97 08 28 60 08 c2 20 48 a9
>3a4bb8	00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20 29
>3a4bc8	ff 00 20 f1 18 e2 20 dc d2 08 08 20 00 0f f4 00
>3a4bd8	00 f4 00 00 e2 20 48 20 93 4a e2 20 68 c2 20 68
>3a4be8	68 c2 20 a7 08 85 21 a0 02 00 b7 08 85 23 e2 20
>3a4bf8	a0 00 00 b7 c1 29 7f 85 25 28 60 da 0b 08 08 c2
>3a4c08	20 48 a9 00 08 5b 68 28 c2 30 a5 23 89 f0 ff d0
>3a4c18	29 89 0f 00 d0 0c a5 21 89 00 fc d0 05 20 02 3d
>3a4c28	80 2e a2 0a 00 46 23 66 21 ca d0 f9 20 02 3d e2
>3a4c38	20 a9 4b 20 18 00 c2 20 80 16 a2 14 00 46 23 66
>3a4c48	21 ca d0 f9 20 02 3d e2 20 a9 4d 20 18 00 c2 20
>3a4c58	28 2b fa 60 0b 08 c2 30 a9 00 00 8f b4 08 00 8f
>3a4c68	b6 08 00 e2 20 20 f7 1c c9 00 f0 08 20 9f 17 20
>3a4c78	b3 04 80 11 c2 20 a9 00 00 85 21 85 23 e2 20 a9
>3a4c88	02 85 25 c2 20 20 bd 4d 22 08 11 00 b0 22 20 6e
>3a4c98	4e 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 10 8f
>3a4ca8	d1 08 00 c2 20 29 ff 00 20 f1 18 e2 20 dc d2 08
>3a4cb8	20 33 02 08 c2 20 48 a9 20 03 5b 68 28 e2 20 a0
>3a4cc8	00 00 b7 18 d0 03 82 a9 00 c9 e5 d0 03 82 96 00
>3a4cd8	a0 0b 00 b7 18 89 08 f0 03 82 a9 00 89 02 f0 03
>3a4ce8	82 83 00 29 0f c9 0f d0 03 82 7a 00 a0 00 00 b7
>3a4cf8	18 20 18 00 c8 c0 08 00 d0 f5 a9 20 20 18 00 a0
>3a4d08	08 00 b7 18 20 18 00 c8 c0 0b 00 d0 f5 a9 09 20
>3a4d18	18 00 a0 0b 00 b7 18 89 10 d0 1e c2 20 a0 1c 00
>3a4d28	b7 18 8f 21 08 00 c8 c8 b7 18 8f 23 08 00 e2 20
>3a4d38	a9 00 8f 25 08 00 20 03 4c a9 09 20 18 00 a0 0b
>3a4d48	00 b7 18 89 08 d0 1c 89 01 f0 05 a9 52 20 18 00
>3a4d58	89 04 f0 05 a9 53 20 18 00 89 10 f0 05 a9 44 20
>3a4d68	18 00 ea 20 33 02 20 4a 02 22 0c 11 00 90 03 82
>3a4d78	41 ff 20 6e 4e 08 c2 20 48 a9 00 08 5b 68 28 20
>3a4d88	db 1b 28 2b 60 08 c2 20 48 a9 20 03 5b 68 28 e2
>3a4d98	20 29 0f c9 0f f0 cf a9 5b 20 18 00 a0 00 00 b7
>3a4da8	18 c9 20 f0 09 20 18 00 c8 c0 08 00 d0 f1 a9 5d
>3a4db8	20 18 00 80 ae 0b 08 08 c2 20 48 a9 20 03 5b 68
>3a4dc8	28 c2 30 a9 73 f2 85 20 a9 3a 00 85 22 a0 00 00
>3a4dd8	e2 20 a9 00 97 20 c8 c0 1e 00 d0 f8 c2 20 a9 73
>3a4de8	f0 8f 81 f2 3a a9 3a 00 8f 83 f2 3a af 21 08 00
>3a4df8	8f 75 f2 3a af 23 08 00 8f 77 f2 3a 28 2b 60 08
>3a4e08	c2 30 20 b7 1b 20 9f 17 20 b3 04 20 bd 4d e2 20
>3a4e18	a9 2c 85 35 20 d8 1c b0 0f c2 20 a9 ff ff 8f 54
>3a4e28	03 00 8f 56 03 00 80 17 20 96 1b 20 9f 17 20 89
>3a4e38	04 c2 20 a5 21 8f 54 03 00 a5 23 8f 56 03 00 22
>3a4e48	18 11 00 b0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a4e58	20 a9 11 8f d1 08 00 c2 20 29 ff 00 20 f1 18 e2
>3a4e68	20 dc d2 08 28 60 8b 0b 08 08 c2 20 48 a9 00 08
>3a4e78	5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 e2 20 af
>3a4e88	2e 03 00 85 21 a9 00 85 22 85 23 85 24 a9 00 85
>3a4e98	25 85 e8 a9 3a 85 e7 c2 20 a9 d1 4e 85 e5 20 85
>3a4ea8	48 e2 20 af 20 03 00 85 21 a9 00 85 22 85 23 85
>3a4eb8	24 a9 00 85 25 85 e8 a9 3a 85 e7 c2 20 a9 d9 4e
>3a4ec8	85 e5 20 85 48 28 2b ab 60 44 4f 53 53 54 41 54
>3a4ed8	00 42 49 4f 53 53 54 41 54 00 08 c2 30 20 b7 1b
>3a4ee8	20 9f 17 20 b3 04 a5 21 8f 60 03 00 a5 23 8f 62
>3a4ef8	03 00 a9 ff ff 8f 54 03 00 8f 56 03 00 22 24 11
>3a4f08	00 b0 25 20 f1 18 20 6e 4e 08 c2 20 48 a9 00 08
>3a4f18	5b 68 28 e2 20 a9 11 8f d1 08 00 c2 20 29 ff 00
>3a4f28	20 f1 18 e2 20 dc d2 08 20 f1 18 28 60 08 c2 30
>3a4f38	20 b7 1b 20 9f 17 20 b3 04 20 bd 4d a9 00 00 8f
>3a4f48	54 03 00 a9 01 00 8f 56 03 00 20 6a 45 22 18 11
>3a4f58	00 b0 22 20 6e 4e 08 c2 20 48 a9 00 08 5b 68 28
>3a4f68	e2 20 a9 11 8f d1 08 00 c2 20 29 ff 00 20 f1 18
>3a4f78	e2 20 dc d2 08 20 6e 4e c2 20 a2 12 00 18 bf 73
>3a4f88	f2 3a 69 00 00 85 90 bf 75 f2 3a 69 01 00 85 92
>3a4f98	e2 20 a9 00 87 90 c2 20 a9 00 00 85 78 a9 01 00
>3a4fa8	85 7a a2 00 00 e2 20 a7 78 f0 2a c9 0d f0 12 c9
>3a4fb8	0a f0 04 9d 00 4f e8 c2 20 e6 78 d0 e8 e6 7a 80
>3a4fc8	e4 e2 20 a9 00 9d 00 4f 20 49 21 c2 20 e6 78 d0
>3a4fd8	d1 e6 7a 80 cd e0 00 00 f0 0a e2 20 a9 00 9d 00
>3a4fe8	4f 20 49 21 28 60 08 c2 30 20 b7 1b 20 9f 17 20
>3a4ff8	b3 04 20 bd 4d e2 20 a9 2c 20 a3 1c c2 20 20 9f
>3a5008	17 20 89 04 a5 21 8f 50 03 00 a5 23 8f 52 03 00
>3a5018	e2 20 a9 2c c2 20 20 a3 1c 20 9f 17 20 89 04 a5
>3a5028	21 8f 58 03 00 a5 23 8f 5a 03 00 22 1c 11 00 b0
>3a5038	22 20 6e 4e 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a5048	a9 12 8f d1 08 00 c2 20 29 ff 00 20 f1 18 e2 20
>3a5058	dc d2 08 20 6e 4e 28 60 da 5a 08 a2 00 00 a0 00
>3a5068	00 e2 20 b7 21 9d 00 04 f0 04 e8 c8 80 f5 28 7a
>3a5078	fa 60 08 c2 30 20 b7 1b 20 9f 17 20 b3 04 20 bd
>3a5088	4d a9 00 00 85 a4 e2 20 a9 01 85 a6 a9 20 85 b2
>3a5098	c2 20 a9 00 00 85 a9 a9 ff ff 85 a7 c2 20 a9 00
>3a50a8	00 85 53 85 55 a9 ff ff 85 57 a9 ff 7f 85 59 20
>3a50b8	71 13 e2 20 a9 80 85 b2 c2 20 c6 a9 18 a9 00 00
>3a50c8	8f 50 03 00 65 a9 8f 58 03 00 a9 01 00 8f 52 03
>3a50d8	00 69 00 00 8f 5a 03 00 22 1c 11 00 b0 22 20 6e
>3a50e8	4e 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 12 8f
>3a50f8	d1 08 00 c2 20 29 ff 00 20 f1 18 e2 20 dc d2 08
>3a5108	20 6e 4e 28 60 08 c2 30 20 b7 1b 20 9f 17 20 b3
>3a5118	04 20 60 50 22 04 11 00 b0 22 20 6e 4e 08 c2 20
>3a5128	48 a9 00 08 5b 68 28 e2 20 a9 13 8f d1 08 00 c2
>3a5138	20 29 ff 00 20 f1 18 e2 20 dc d2 08 20 6e 4e 28
>3a5148	60 da 08 e2 20 c9 61 90 08 c9 7b b0 04 29 df 80
>3a5158	13 c9 20 90 13 a2 00 00 df 74 51 3a f0 0a e8 e0
>3a5168	0f 00 d0 f4 28 38 fa 6b 28 18 fa 6b 2a 2b 2c 2f
>3a5178	3a 3b 3c 3d 3e 3f 5c 5b 5d 7c 22 08 08 c2 20 48
>3a5188	a9 00 08 5b 68 28 c2 30 20 9f 17 20 b3 04 20 60
>3a5198	50 22 10 11 00 b0 22 20 6e 4e 08 c2 20 48 a9 00
>3a51a8	08 5b 68 28 e2 20 a9 14 8f d1 08 00 c2 20 29 ff
>3a51b8	00 20 f1 18 e2 20 dc d2 08 e2 20 a9 2c 20 a3 1c
>3a51c8	c2 20 20 9f 17 20 b3 04 ad 38 03 85 08 ad 3a 03
>3a51d8	85 0a e2 20 a2 00 00 a9 20 95 7c e8 e0 0b 00 d0
>3a51e8	f8 a2 00 00 a0 00 00 b7 21 f0 76 c9 2e f0 39 22
>3a51f8	49 51 3a b0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a5208	20 a9 0a 8f d1 08 00 c2 20 29 ff 00 20 f1 18 e2
>3a5218	20 dc d2 08 95 7c c8 e8 c0 08 00 d0 ca b7 21 f0
>3a5228	40 c9 2e f0 03 c8 80 f5 c8 a2 08 00 b7 21 f0 31
>3a5238	22 49 51 3a b0 22 20 6e 4e 08 c2 20 48 a9 00 08
>3a5248	5b 68 28 e2 20 a9 0a 8f d1 08 00 c2 20 29 ff 00
>3a5258	20 f1 18 e2 20 dc d2 08 95 7c c8 e8 c0 0c 00 d0
>3a5268	cb a2 00 00 a0 00 00 b5 7c 97 08 e8 c8 c0 0b 00
>3a5278	d0 f5 22 14 11 00 b0 22 20 6e 4e 08 c2 20 48 a9
>3a5288	00 08 5b 68 28 e2 20 a9 15 8f d1 08 00 c2 20 29
>3a5298	ff 00 20 f1 18 e2 20 dc d2 08 20 6e 4e 28 60 08
>3a52a8	08 c2 20 48 a9 00 08 5b 68 28 c2 30 20 9f 17 20
>3a52b8	b3 04 a5 21 8f 64 03 00 a5 23 8f 66 03 00 e2 20
>3a52c8	a9 2c 20 a3 1c c2 20 20 9f 17 20 b3 04 a5 21 8f
>3a52d8	68 03 00 a5 23 8f 6a 03 00 22 30 11 00 b0 1f 08
>3a52e8	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 16 8f d1 08
>3a52f8	00 c2 20 29 ff 00 20 f1 18 e2 20 dc d2 08 28 60
>3a5308	5c c5 6c 3a 5c 16 6b 3a 5c c6 6c 3a 5c 42 5c 3a
>3a5318	5c 9f 5c 3a 5c d2 5b 3a 5c 58 5b 3a 5c d5 60 3a
>3a5328	5c c3 57 3a 5c f0 5a 3a 5c ab 5a 3a 5c 35 5a 3a
>3a5338	5c d4 6b 3a 5c d1 58 3a 5c 27 57 3a 5c 4f 6c 3a
>3a5348	5c ff 57 3a 5c c8 6c 3a 5c c1 6c 3a 5c ee 59 3a
>3a5358	5c c9 6c 3a 18 fb c2 20 a9 ff fe 1b 58 5c 69 53
>3a5368	3a c2 30 22 27 57 3a 20 08 00 20 0c 00 8b e2 20
>3a5378	a9 00 48 ab a2 00 4f 20 c1 03 ab 22 0c 53 3a 22
>3a5388	14 53 3a 80 e2 08 8b e2 20 a9 3a 48 ab c2 10 a2
>3a5398	a0 53 20 c0 02 ab 28 6b 41 20 3c 73 74 61 72 74
>3a53a8	3e 20 3c 61 73 73 65 6d 62 6c 79 3e 0d 20 20 41
>3a53b8	73 73 65 6d 62 6c 65 20 61 20 70 72 6f 67 72 61
>3a53c8	6d 0d 0d 43 20 3c 73 74 61 72 74 31 3e 20 3c 73
>3a53d8	74 61 72 74 32 3e 20 5b 6c 65 6e 20 28 31 20 69
>3a53e8	66 20 62 6c 61 6e 6b 29 5d 0d 20 20 43 6f 6d 70
>3a53f8	61 72 65 20 74 6f 20 73 65 63 74 69 6f 6e 73 20
>3a5408	6f 66 20 6d 65 6d 6f 72 79 0d 0d 44 20 3c 73 74
>3a5418	61 72 74 3e 20 5b 65 6e 64 5d 0d 20 20 44 69 73
>3a5428	61 73 73 65 6d 62 6c 65 20 61 20 70 72 6f 67 72
>3a5438	61 6d 0d 0d 46 20 3c 73 74 61 72 74 3e 20 3c 65
>3a5448	6e 64 3e 20 3c 62 79 74 65 3e 0d 20 20 46 69 6c
>3a5458	6c 20 61 20 62 6c 6f 63 6b 20 6f 66 20 6d 65 6d
>3a5468	6f 72 79 20 77 69 74 68 20 61 20 62 79 74 65 0d
>3a5478	0d 47 20 5b 61 64 64 72 65 73 73 5d 0d 20 20 53
>3a5488	74 61 72 74 20 65 78 65 63 75 74 69 6f 6e 20 61
>3a5498	74 20 61 20 6c 6f 63 61 74 69 6f 6e 0d 0d 4a 20
>3a54a8	5b 61 64 64 72 65 73 73 5d 20 2d 20 4a 75 6d 70
>3a54b8	20 74 6f 20 61 20 6c 6f 63 61 74 69 6f 6e 20 69
>3a54c8	6e 20 6d 65 6d 6f 72 79 0d 20 20 4a 75 6d 70 20
>3a54d8	74 6f 20 61 20 6c 6f 63 61 74 69 6f 6e 20 69 6e
>3a54e8	20 6d 65 6d 6f 72 79 0d 0d 48 20 3c 73 74 61 72
>3a54f8	74 3e 20 3c 65 6e 64 3e 20 3c 62 79 74 65 3e 20
>3a5508	5b 62 79 74 65 5d 2e 2e 0d 20 20 48 75 6e 74 20
>3a5518	66 6f 72 20 76 61 6c 75 65 73 20 69 6e 20 6d 65
>3a5528	6d 6f 72 79 0d 0d 4c 20 20 20 20 20 4c 4f 41 44
>3a5538	20 20 20 20 20 20 20 20 20 22 46 69 6c 65 22 20
>3a5548	5b 64 65 73 74 69 6e 61 74 69 6f 6e 5d 0d 4d 20
>3a5558	3c 73 74 61 72 74 3e 20 5b 65 6e 64 5d 0d 20 20
>3a5568	44 75 6d 70 20 74 68 65 20 76 61 6c 75 65 20 69
>3a5578	6e 20 6d 65 6d 6f 72 79 0d 0d 52 20 2d 20 44 69
>3a5588	73 70 6c 61 79 20 74 68 65 20 76 61 6c 75 65 73
>3a5598	20 6f 66 20 74 68 65 20 72 65 67 69 73 74 65 72
>3a55a8	73 0d 0d 3b 20 3c 50 43 3e 20 3c 41 3e 20 3c 58
>3a55b8	3e 20 3c 59 3e 20 3c 53 50 3e 20 3c 44 42 52 3e
>3a55c8	20 3c 44 50 3e 20 3c 4e 56 4d 58 44 49 5a 43 3e
>3a55d8	0d 20 20 43 68 61 6e 67 65 20 74 68 65 20 63 6f
>3a55e8	6e 74 65 6e 74 73 20 6f 66 20 74 68 65 20 72 65
>3a55f8	67 69 73 74 65 72 73 0d 0d 53 20 20 20 20 20 53
>3a5608	41 56 45 20 20 20 20 20 20 20 20 20 22 46 69 6c
>3a5618	65 22 20 3c 73 74 61 72 74 3e 20 3c 65 6e 64 3e
>3a5628	0d 54 20 3c 73 74 61 72 74 3e 20 3c 65 6e 64 3e
>3a5638	20 3c 64 65 73 74 69 6e 61 74 69 6f 6e 3e 0d 20
>3a5648	20 54 72 61 6e 73 66 65 72 20 28 63 6f 70 79 29
>3a5658	20 64 61 74 61 20 77 69 74 68 69 6e 20 6d 65 6d
>3a5668	6f 72 79 0d 0d 57 20 3c 62 79 74 65 3e 0d 20 20
>3a5678	53 65 74 20 74 68 65 20 72 65 67 69 73 74 65 72
>3a5688	20 77 69 64 74 68 20 66 6c 61 67 73 20 66 6f 72
>3a5698	20 74 68 65 20 64 69 73 61 73 73 65 6d 62 6c 65
>3a56a8	72 0d 0d 58 20 2d 20 52 65 74 75 72 6e 20 74 6f
>3a56b8	20 42 41 53 49 43 0d 0d 3e 20 3c 73 74 61 72 74
>3a56c8	3e 20 3c 62 79 74 65 3e 20 5b 62 79 74 65 5d 2e
>3a56d8	2e 2e 0d 20 20 45 64 69 74 20 64 61 74 61 20 69
>3a56e8	6e 20 6d 65 6d 6f 72 79 0d 0d 3f 20 2d 20 44 69
>3a56f8	73 70 6c 61 79 20 61 20 73 68 6f 72 74 20 68 65
>3a5708	6c 70 20 73 63 72 65 65 6e 0d 0d 00 08 08 c2 20
>3a5718	48 a9 46 08 5b 68 28 e2 20 a5 0d 85 4e 28 6b 08
>3a5728	e2 20 48 a9 3a 48 ab 68 28 a2 06 6d 20 c0 02 e2
>3a5738	20 a9 3b 20 18 00 a9 20 20 18 00 c2 30 08 e2 20
>3a5748	48 a9 00 48 ab 68 28 a0 03 00 a2 42 02 20 43 02
>3a5758	c2 20 a9 20 00 20 18 00 af 44 02 00 20 d0 02 a9
>3a5768	20 00 20 18 00 af 46 02 00 20 d0 02 a9 20 00 20
>3a5778	18 00 af 48 02 00 20 d0 02 a9 20 00 20 18 00 af
>3a5788	4a 02 00 20 d0 02 a9 20 00 20 18 00 af 4e 02 00
>3a5798	20 ea 02 a9 20 00 20 18 00 20 18 00 af 4c 02 00
>3a57a8	20 d0 02 a9 20 00 20 18 00 08 e2 20 ad 4f 02 22
>3a57b8	1f 6a 3a 28 20 33 02 20 33 02 6b 08 0b 08 c2 20
>3a57c8	48 a9 46 08 5b 68 28 e2 20 a5 15 87 0d e2 20 a5
>3a57d8	0f c5 13 d0 0e c2 20 a5 0d c5 11 d0 06 20 33 02
>3a57e8	2b 28 6b c2 20 18 a5 0d 69 01 00 85 0d e2 20 a5
>3a57f8	0e 69 00 85 0e 80 d0 08 0b 08 c2 20 48 a9 46 08
>3a5808	5b 68 28 e2 20 a5 0f c5 17 90 45 c2 20 a5 0d c5
>3a5818	15 90 3d e2 20 a7 0d 87 15 a5 0f c5 13 d0 0b c2
>3a5828	20 a5 0d c5 11 d0 03 4c b6 58 c2 20 18 a5 0d 69
>3a5838	01 00 85 0d e2 20 a5 0e 69 00 85 0e c2 20 18 a5
>3a5848	15 69 01 00 85 15 e2 20 a5 16 69 00 85 16 80 c3
>3a5858	c2 20 38 a5 11 e5 0d 85 19 e2 20 a5 13 e5 0f 85
>3a5868	1b c2 20 18 a5 19 65 15 85 15 e2 20 a5 1b 65 17
>3a5878	85 17 e2 20 a7 11 87 15 a5 13 c5 0f d0 0a c2 20
>3a5888	a5 11 c5 0d d0 02 80 26 c2 20 38 a5 11 e9 01 00
>3a5898	85 11 e2 20 a5 12 e9 00 85 12 c2 20 38 a5 15 e9
>3a58a8	01 00 85 15 e2 20 a5 16 e9 00 85 16 80 c4 20 33
>3a58b8	02 2b 28 6b 08 e2 20 c9 21 90 0b c9 7f 90 04 c9
>3a58c8	a0 90 03 28 38 6b 28 18 6b 08 8b 0b 08 c2 20 48
>3a58d8	a9 46 08 5b 68 28 e2 20 a9 00 8f b4 08 00 a5 31
>3a58e8	c9 02 b0 16 c9 01 90 20 c2 20 18 a5 0d 69 00 01
>3a58f8	85 11 e2 20 a5 0f 69 00 85 13 c2 20 a5 0d 85 32
>3a5908	e2 20 a5 0f 85 34 80 12 c2 20 18 a5 32 69 00 01
>3a5918	85 11 e2 20 a5 34 69 00 85 13 e2 20 a0 00 00 c2
>3a5928	20 a5 32 85 19 e2 20 a5 34 85 1b e2 20 a7 19 22
>3a5938	bc 58 3a b0 02 a9 3f 99 7c 08 c2 20 18 a5 19 69
>3a5948	01 00 85 19 e2 20 a5 1b 69 00 85 1b c8 c0 08 00
>3a5958	90 db a9 00 99 7c 08 a9 3e 20 18 00 a9 20 20 18
>3a5968	00 e2 20 a5 34 20 ea 02 a9 3a 20 18 00 c2 20 a5
>3a5978	32 20 d0 02 c2 20 a9 08 00 85 47 e2 20 a9 20 20
>3a5988	18 00 a7 32 20 ea 02 22 fe 69 3a e2 20 c6 47 d0
>3a5998	ea a9 20 20 18 00 a9 20 20 18 00 08 e2 20 48 a9
>3a59a8	00 48 ab 68 28 a2 7c 08 20 c0 02 20 33 02 20 4a
>3a59b8	02 a5 34 c5 13 90 0f c2 20 a5 32 c5 11 90 07 20
>3a59c8	33 02 2b ab 28 6b 4c 22 59 08 8d 90 08 e2 20 bd
>3a59d8	00 00 99 00 00 ad 90 08 f0 0a c8 e8 e8 e8 e8 ce
>3a59e8	90 08 80 eb 28 6b 08 0b 8b 08 c2 20 48 a9 46 08
>3a59f8	5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 30 a5
>3a5a08	0d 85 32 a5 0f 85 34 e2 20 a5 31 3a 85 47 a2 57
>3a5a18	08 a0 7c 08 22 d1 59 3a a0 00 00 b9 7c 08 87 32
>3a5a28	22 fe 69 3a c8 c4 47 d0 f2 ab 2b 28 6b 08 0b 8b
>3a5a38	08 c2 20 48 a9 46 08 5b 68 28 08 e2 20 48 a9 00
>3a5a48	48 ab 68 28 e2 20 c2 10 a5 31 3a 3a 85 47 a2 5b
>3a5a58	08 a0 7c 08 22 d1 59 3a c2 20 a5 0d 85 32 a5 0f
>3a5a68	85 34 c2 20 a5 34 c5 13 d0 06 a5 32 c5 11 f0 2c
>3a5a78	e2 20 a0 00 00 b7 32 d9 7c 08 d0 1a c8 c4 47 d0
>3a5a88	f4 c2 20 a5 32 85 4a a5 34 85 4c 22 a8 64 3a e2
>3a5a98	20 a9 20 20 18 00 22 fe 69 3a 80 c6 20 33 02 ab
>3a5aa8	2b 28 6b 08 c2 20 48 a9 46 08 5b 68 28 e2 20 a5
>3a5ab8	31 f0 0e c2 30 a5 0d 8f 40 02 00 a5 0f 8f 42 02
>3a5ac8	00 af 46 02 00 aa af 48 02 00 a8 af 4a 02 00 1b
>3a5ad8	af 4c 02 00 5b e2 20 a9 3a 48 a9 5a 48 a9 eb 48
>3a5ae8	4c 22 5b ea 5c 04 00 3a 08 c2 20 48 a9 46 08 5b
>3a5af8	68 28 e2 20 a5 31 f0 c9 c2 30 a5 0d 8f 40 02 00
>3a5b08	a5 0f 8f 42 02 00 af 46 02 00 aa af 48 02 00 a8
>3a5b18	af 4a 02 00 1b af 4c 02 00 5b e2 20 af 4e 02 00
>3a5b28	48 ab a9 5c 8f a0 08 00 af 42 02 00 8f a3 08 00
>3a5b38	af 41 02 00 8f a2 08 00 af 40 02 00 8f a1 08 00
>3a5b48	af 4f 02 00 48 c2 20 af 44 02 00 28 5c a0 08 00
>3a5b58	08 0b 8b 08 e2 20 48 a9 3a 48 ab 68 28 08 c2 20
>3a5b68	48 a9 46 08 5b 68 28 c2 10 e2 20 a5 31 c9 02 f0
>3a5b78	0c c9 03 d0 11 c2 20 a5 15 85 47 80 11 c2 20 a9
>3a5b88	01 00 85 47 80 08 a2 ca 6c 20 c0 02 80 35 a5 0d
>3a5b98	85 4a a5 0f 85 4c a0 00 00 e2 20 a7 4a d7 11 f0
>3a5ba8	09 22 a8 64 3a a9 20 20 18 00 c2 20 18 a5 4a 69
>3a5bb8	01 00 85 4a a5 4c 69 00 00 85 4c c8 c4 47 d0 d9
>3a5bc8	20 33 02 20 33 02 ab 2b 28 6b 08 0b 8b 08 e2 20
>3a5bd8	48 a9 00 48 ab 68 28 08 c2 20 48 a9 46 08 5b 68
>3a5be8	28 e2 20 a5 31 f0 4f a6 0d 8e 40 02 a6 0f 8e 42
>3a5bf8	02 c9 01 f0 41 a6 11 8e 44 02 c9 02 f0 38 a6 15
>3a5c08	8e 46 02 c9 03 f0 2f a6 19 8e 48 02 c9 04 f0 26
>3a5c18	a6 1d 8e 4a 02 c9 05 f0 1d e2 10 a6 21 8e 4e 02
>3a5c28	c9 06 f0 12 c2 10 a6 25 8e 4c 02 c9 07 f0 07 e2
>3a5c38	10 a6 29 8e 4f 02 ab 2b 28 6b 08 0b 8b 08 c2 20
>3a5c48	48 a9 46 08 5b 68 28 e2 20 c2 10 a2 00 00 bf 37
>3a5c58	6d 3a f0 18 c7 08 f0 03 e8 80 f3 c2 20 8a 0a aa
>3a5c68	bf 78 5c 3a 8f 2d 08 00 22 9c 5c 3a ab 2b 28 6b
>3a5c78	18 53 20 53 24 53 28 53 2c 53 30 53 34 53 38 53
>3a5c88	3c 53 40 53 1c 53 44 53 48 53 4c 53 14 57 50 53
>3a5c98	54 53 8d 53 6c 2d 08 08 8b 0b 08 c2 20 48 a9 46
>3a5ca8	08 5b 68 28 e2 20 a5 31 c9 02 b0 03 4c 45 5e c2
>3a5cb8	20 a5 0d 85 32 a5 0f 85 34 c2 20 22 47 60 3a c9
>3a5cc8	ff ff f0 10 85 54 e2 20 a5 31 c9 03 f0 36 a9 13
>3a5cd8	85 4f 80 4c 20 33 02 08 e2 20 48 a9 3a 48 ab 68
>3a5ce8	28 c2 10 a2 7c 5e 20 c0 02 4c 45 5e 20 33 02 08
>3a5cf8	e2 20 48 a9 3a 48 ab 68 28 c2 10 a2 8b 5e 20 c0
>3a5d08	02 4c 45 5e e2 20 22 7d 60 3a c9 ff f0 de 85 4f
>3a5d18	c9 03 f0 62 c9 0b f0 5e c9 13 f0 04 c9 08 f0 00
>3a5d28	22 75 5f 3a b0 03 4c 0e 5e 87 32 22 fe 69 3a 08
>3a5d38	e2 20 48 a9 00 48 ab 68 28 c2 20 a5 32 85 56 a5
>3a5d48	34 85 58 e2 20 a5 4f c9 12 f0 6c c9 16 f0 68 c9
>3a5d58	14 f0 7c 29 3f c9 02 d0 03 4c 3c 5e c2 20 29 ff
>3a5d68	00 aa e2 20 bf 44 69 3a c9 03 f0 57 c9 02 f0 5f
>3a5d78	c9 01 f0 67 80 71 c2 20 a5 54 c9 bc 65 f0 26 c9
>3a5d88	20 66 f0 2a c9 a0 65 f0 1c c9 a4 65 f0 17 c9 ac
>3a5d98	65 f0 12 c9 94 65 f0 0d c9 a8 65 f0 08 c9 90 65
>3a5da8	f0 03 4c 28 5d e2 20 a9 12 85 4f 4c 28 5d e2 20
>3a5db8	a9 16 85 4f 4c 28 5d 22 b8 5e 3a 90 60 c9 02 f0
>3a5dc8	0e 80 18 a0 02 00 b9 96 08 97 56 22 fe 69 3a a0
>3a5dd8	01 00 b9 96 08 97 56 22 fe 69 3a a0 00 00 b9 96
>3a5de8	08 97 56 22 fe 69 3a e2 20 a9 41 20 18 00 a9 20
>3a5df8	20 18 00 a6 32 86 4a a6 34 86 4c 22 a8 64 3a a9
>3a5e08	20 20 18 00 80 37 20 33 02 08 e2 20 48 a9 3a 48
>3a5e18	ab 68 28 c2 10 a2 49 5e 20 c0 02 80 20 20 33 02
>3a5e28	08 e2 20 48 a9 3a 48 ab 68 28 c2 10 a2 99 5e 20
>3a5e38	c0 02 80 09 a5 4f 29 c0 d0 95 4c e3 5d 2b ab 28
>3a5e48	6b 41 64 64 72 65 73 73 69 6e 67 20 6d 6f 64 65
>3a5e58	20 6e 6f 74 20 64 65 66 69 6e 65 64 20 66 6f 72
>3a5e68	20 74 68 61 74 20 69 6e 73 74 72 75 63 74 69 6f
>3a5e78	6e 2e 0d 00 42 61 64 20 6d 6e 65 6d 6f 6e 69 63
>3a5e88	2e 0d 00 42 61 64 20 6f 70 65 72 61 6e 64 2e 0d
>3a5e98	00 52 65 6c 61 74 69 76 65 20 6f 66 66 73 65 74
>3a5ea8	20 69 73 20 74 6f 6f 20 6c 61 72 67 65 2e 0d 00
>3a5eb8	08 0b 08 c2 20 48 a9 46 08 5b 68 28 e2 20 a5 4f
>3a5ec8	c9 12 f0 0a c2 20 18 a5 32 69 02 00 80 08 c2 20
>3a5ed8	18 a5 32 69 01 00 85 4a a5 34 69 00 00 85 4c 38
>3a5ee8	a5 50 e5 4a 85 50 a5 52 e5 4c 85 52 e2 20 a5 4f
>3a5ef8	c9 16 f0 1e a5 50 30 0c a5 51 d0 2a a5 52 d0 26
>3a5f08	a9 01 80 26 a5 51 c9 ff d0 1c a5 52 c9 ff d0 16
>3a5f18	80 18 a5 51 30 06 a5 52 d0 0c 80 0e a5 52 c9 ff
>3a5f28	d0 04 a9 02 80 04 2b 28 18 6b 2b 28 38 6b 08 0b
>3a5f38	c2 10 da 08 c2 20 48 a9 46 08 5b 68 28 e2 20 a2
>3a5f48	00 00 df 00 d0 3a f0 08 e8 e0 10 00 f0 1b 80 f2
>3a5f58	c2 20 06 50 26 52 06 50 26 52 06 50 26 52 06 50
>3a5f68	26 52 e2 20 8a 05 50 85 50 fa 2b 28 6b 0b 8b 08
>3a5f78	c2 20 48 a9 46 08 5b 68 28 08 e2 20 48 a9 3a 48
>3a5f88	ab 68 28 e2 20 a5 4f 29 3f 85 4a c2 30 a2 00 00
>3a5f98	a0 00 00 bd 42 66 f0 1b c5 54 d0 0d e2 20 b9 44
>3a5fa8	68 29 3f c5 4a f0 07 c2 20 e8 e8 c8 80 e5 98 38
>3a5fb8	ab 2b 6b 18 ab 2b 6b 08 0b 08 c2 20 48 a9 46 08
>3a5fc8	5b 68 28 e2 20 c2 10 a0 00 00 64 50 64 52 b7 03
>3a5fd8	f0 11 c9 64 f0 19 48 b7 36 85 4a 68 c5 4a d0 0b
>3a5fe8	c8 80 eb b7 36 d0 04 2b 28 38 6b 2b 28 18 6b e2
>3a5ff8	20 b7 36 c9 3a b0 04 c9 30 b0 14 c9 47 b0 04 c9
>3a6008	41 b0 0c c9 67 b0 e4 c9 61 b0 02 80 de 29 df 22
>3a6018	36 5f 3a 80 cb 0b 08 c2 20 48 a9 46 08 5b 68 28
>3a6028	a0 00 00 e2 20 b7 03 f0 03 c8 80 f9 c2 20 c8 5a
>3a6038	68 18 65 03 85 03 a5 05 69 00 00 85 05 2b 6b 0b
>3a6048	08 c2 20 48 a9 46 08 5b 68 28 c2 20 a5 11 85 36
>3a6058	a5 13 85 38 a9 d0 64 85 03 a9 3a 00 85 05 22 bf
>3a6068	5f 3a b0 0d 22 1d 60 3a a7 03 d0 f2 a9 ff ff 80
>3a6078	02 a5 03 2b 6b 08 0b 08 c2 20 48 a9 46 08 5b 68
>3a6088	28 c2 30 a5 15 85 36 a5 17 85 38 a9 5c 69 85 03
>3a6098	a9 3a 00 85 05 22 bf 5f 3a b0 22 22 1d 60 3a c2
>3a60a8	20 18 a5 03 69 01 00 85 03 a5 05 69 00 00 85 05
>3a60b8	e2 20 a7 03 d0 df c2 20 a9 ff ff 80 0d 22 1d 60
>3a60c8	3a e2 20 a7 03 c2 20 29 ff 00 2b 28 6b 08 8b 0b
>3a60d8	08 c2 20 48 a9 46 08 5b 68 28 e2 20 a9 00 8f b4
>3a60e8	08 00 a5 31 c9 02 b0 16 c9 01 90 20 c2 20 18 a5
>3a60f8	0d 69 00 01 85 11 e2 20 a5 0f 69 00 85 13 c2 20
>3a6108	a5 0d 85 32 e2 20 a5 0f 85 34 80 12 c2 20 18 a5
>3a6118	32 69 00 01 85 11 e2 20 a5 34 69 00 85 13 22 41
>3a6128	61 3a e2 20 a5 34 c5 13 90 f4 c2 20 a5 32 c5 11
>3a6138	90 ec 20 33 02 2b ab 28 6b 08 0b e2 20 a9 41 20
>3a6148	18 00 a9 20 20 18 00 08 c2 20 48 a9 78 08 5b 68
>3a6158	28 c2 20 a5 00 85 18 e2 20 a5 02 85 1a 22 a8 64
>3a6168	3a a9 20 20 18 00 c2 20 18 a5 00 69 01 00 85 18
>3a6178	e2 20 a5 02 69 00 85 1a e2 20 c2 10 a7 00 c9 c2
>3a6188	d0 0b 48 a7 18 49 ff 2f 94 08 00 80 0b c9 e2 d0
>3a6198	0c 48 a7 18 0f 94 08 00 8f 94 08 00 68 c2 20 29
>3a61a8	ff 00 0a aa bf 42 66 3a aa 22 22 64 3a e2 20 a7
>3a61b8	00 aa bf 44 68 3a 22 fe 69 3a 22 cf 61 3a 20 33
>3a61c8	02 20 4a 02 2b 28 6b 08 e2 20 48 29 3f 0a c2 10
>3a61d8	aa 68 7c dd 61 0d 62 28 62 2f 62 54 62 5b 62 76
>3a61e8	62 98 62 a9 62 e6 62 ee 62 ff 62 10 63 17 63 3c
>3a61f8	63 69 63 d5 62 ba 62 87 62 5c 63 66 63 7a 63 a9
>3a6208	63 57 63 ba 63 a9 28 20 18 00 22 d1 63 3a a9 2c
>3a6218	20 18 00 a9 58 20 18 00 a9 29 20 18 00 4c cb 63
>3a6228	22 d1 63 3a 4c cb 63 e2 20 48 a9 23 20 18 00 68
>3a6238	29 c0 c9 00 f0 0f 4a 4a 2f 94 08 00 d0 07 22 db
>3a6248	63 3a 4c cb 63 22 d1 63 3a 4c cb 63 22 db 63 3a
>3a6258	4c cb 63 a9 28 20 18 00 22 d1 63 3a a9 29 20 18
>3a6268	00 a9 2c 20 18 00 a9 59 20 18 00 4c cb 63 22 d1
>3a6278	63 3a a9 2c 20 18 00 a9 58 20 18 00 4c cb 63 22
>3a6288	d1 63 3a a9 2c 20 18 00 a9 59 20 18 00 4c cb 63
>3a6298	22 db 63 3a a9 2c 20 18 00 a9 59 20 18 00 4c cb
>3a62a8	63 22 db 63 3a a9 2c 20 18 00 a9 58 20 18 00 4c
>3a62b8	cb 63 a9 28 20 18 00 22 db 63 3a a9 2c 20 18 00
>3a62c8	a9 58 20 18 00 a9 29 20 18 00 4c cb 63 a9 28 20
>3a62d8	18 00 22 d1 63 3a a9 29 20 18 00 4c cb 63 a9 41
>3a62e8	20 18 00 4c cf 63 22 d1 63 3a a9 2c 20 18 00 a9
>3a62f8	53 20 18 00 4c cb 63 a9 5b 20 18 00 22 d1 63 3a
>3a6308	a9 5d 20 18 00 4c cb 63 22 e9 63 3a 4c cf 63 a9
>3a6318	28 20 18 00 22 d1 63 3a a9 2c 20 18 00 a9 53 20
>3a6328	18 00 a9 29 20 18 00 a9 2c 20 18 00 a9 59 20 18
>3a6338	00 4c cb 63 a9 5b 20 18 00 22 d1 63 3a a9 5d 20
>3a6348	18 00 a9 2c 20 18 00 a9 59 20 18 00 4c cb 63 a0
>3a6358	02 00 80 03 a0 01 00 22 4f 64 3a 4c cf 63 4c cf
>3a6368	63 22 e9 63 3a a9 2c 20 18 00 a9 58 20 18 00 4c
>3a6378	cf 63 a9 23 20 18 00 8b a5 02 48 ab a6 00 e8 a0
>3a6388	01 00 22 43 02 3a a9 2c 20 18 00 a9 23 20 18 00
>3a6398	a6 00 a0 01 00 22 43 02 3a ab 22 fe 69 3a 4c cb
>3a63a8	63 a9 28 20 18 00 22 db 63 3a a9 29 20 18 00 4c
>3a63b8	cb 63 a9 5b 20 18 00 22 db 63 3a a9 5d 20 18 00
>3a63c8	4c cb 63 22 fe 69 3a 28 6b 08 e2 20 a7 00 20 ea
>3a63d8	02 28 6b 08 c2 30 a7 00 20 d0 02 22 fe 69 3a 28
>3a63e8	6b 08 8b 0b c2 30 5a 08 c2 20 48 a9 78 08 5b 68
>3a63f8	28 08 e2 20 48 a9 00 48 ab 68 28 e2 20 a0 00 00
>3a6408	a7 00 99 90 08 22 fe 69 3a c8 c0 03 00 d0 f1 22
>3a6418	a8 64 3a c2 30 7a 2b ab 28 6b 08 8b e2 20 c2 10
>3a6428	08 e2 20 48 a9 3a 48 ab 68 28 bd 00 00 20 18 00
>3a6438	e8 bd 00 00 20 18 00 e8 bd 00 00 20 18 00 e8 a9
>3a6448	20 20 18 00 ab 28 6b 08 0b 08 c2 20 48 a9 78 08
>3a6458	5b 68 28 e2 20 c0 02 00 f0 14 a7 00 85 18 30 06
>3a6468	64 19 64 1a 80 1e a9 ff 85 19 85 1a 80 16 a7 00
>3a6478	85 18 22 fe 69 3a a7 00 85 19 30 04 64 1a 80 04
>3a6488	a9 ff 85 1a c2 20 38 a5 00 65 18 85 18 e2 20 a5
>3a6498	02 65 1a 85 1a 22 a8 64 3a 22 fe 69 3a 2b 28 6b
>3a64a8	08 0b c2 20 48 08 c2 20 48 a9 46 08 5b 68 28 e2
>3a64b8	20 a5 4c 20 ea 02 e2 20 a9 3a 20 18 00 c2 20 a5
>3a64c8	4a 20 d0 02 68 2b 28 6b 4f 52 41 00 41 4e 44 00
>3a64d8	45 4f 52 00 41 44 43 00 53 54 41 00 4c 44 41 00
>3a64e8	43 4d 50 00 53 42 43 00 41 53 4c 00 52 4f 4c 00
>3a64f8	4c 53 52 00 52 4f 52 00 53 54 58 00 4c 44 58 00
>3a6508	44 45 43 00 49 4e 43 00 42 49 54 00 4a 4d 50 00
>3a6518	53 54 59 00 4c 44 59 00 43 50 59 00 43 50 58 00
>3a6528	42 52 4b 00 4a 53 52 00 52 54 49 00 52 54 53 00
>3a6538	50 48 50 00 50 4c 50 00 50 48 41 00 50 4c 41 00
>3a6548	44 45 59 00 54 41 59 00 49 4e 59 00 49 4e 58 00
>3a6558	43 4c 43 00 53 45 43 00 43 4c 49 00 53 45 49 00
>3a6568	54 59 41 00 43 4c 56 00 43 4c 44 00 53 45 44 00
>3a6578	54 58 41 00 54 58 53 00 54 41 58 00 54 53 58 00
>3a6588	44 45 58 00 4e 4f 50 00 42 50 4c 00 42 4d 49 00
>3a6598	42 56 43 00 42 56 53 00 42 43 43 00 42 43 53 00
>3a65a8	42 4e 45 00 42 45 51 00 54 53 42 00 54 52 42 00
>3a65b8	53 54 5a 00 42 52 41 00 50 48 59 00 50 4c 59 00
>3a65c8	50 48 58 00 50 4c 58 00 50 48 44 00 50 4c 44 00
>3a65d8	50 48 4b 00 52 54 4c 00 50 48 42 00 50 4c 42 00
>3a65e8	57 41 49 00 58 42 41 00 54 43 53 00 54 53 43 00
>3a65f8	54 43 44 00 54 44 43 00 54 58 59 00 54 59 58 00
>3a6608	53 54 50 00 58 43 45 00 43 4f 50 00 4a 53 4c 00
>3a6618	57 44 4d 00 50 45 52 00 42 52 4c 00 52 45 50 00
>3a6628	53 45 50 00 4d 56 50 00 4d 56 4e 00 50 45 49 00
>3a6638	50 45 41 00 4a 4d 4c 00 00 00 28 65 d0 64 10 66
>3a6648	d0 64 b0 65 d0 64 f0 64 d0 64 38 65 d0 64 f0 64
>3a6658	d0 65 b0 65 d0 64 f0 64 d0 64 90 65 d0 64 d0 64
>3a6668	d0 64 b4 65 d0 64 f0 64 d0 64 58 65 d0 64 0c 65
>3a6678	f0 65 b4 65 d0 64 f0 64 d0 64 2c 65 d4 64 14 66
>3a6688	d4 64 10 65 d4 64 f4 64 d4 64 3c 65 d4 64 f4 64
>3a6698	d4 65 10 65 d4 64 f4 64 d4 64 94 65 d4 64 d4 64
>3a66a8	d4 64 10 65 d4 64 f4 64 d4 64 5c 65 d4 64 08 65
>3a66b8	f4 65 10 65 d4 64 f4 64 d4 64 30 65 d8 64 18 66
>3a66c8	d8 64 2c 66 d8 64 f8 64 d8 64 40 65 d8 64 f8 64
>3a66d8	d8 65 14 65 d8 64 f8 64 d8 64 98 65 d8 64 d8 64
>3a66e8	d8 64 30 66 d8 64 f8 64 d8 64 60 65 d8 64 c0 65
>3a66f8	f8 65 3c 66 d8 64 f8 64 d8 64 34 65 dc 64 1c 66
>3a6708	dc 64 b8 65 dc 64 fc 64 dc 64 44 65 dc 64 fc 64
>3a6718	dc 65 14 65 dc 64 fc 64 dc 64 9c 65 dc 64 dc 64
>3a6728	dc 64 b8 65 dc 64 fc 64 dc 64 64 65 dc 64 c4 65
>3a6738	fc 65 14 65 dc 64 fc 64 dc 64 bc 65 e0 64 20 66
>3a6748	e0 64 18 65 e0 64 00 65 e0 64 48 65 10 65 78 65
>3a6758	e0 65 18 65 e0 64 00 65 e0 64 a0 65 e0 64 e0 64
>3a6768	e0 64 18 65 e0 64 00 65 e0 64 68 65 e0 64 7c 65
>3a6778	00 66 b8 65 e0 64 b8 65 e0 64 1c 65 e4 64 04 65
>3a6788	e4 64 1c 65 e4 64 04 65 e4 64 4c 65 e4 64 80 65
>3a6798	e4 65 1c 65 e4 64 04 65 e4 64 a4 65 e4 64 e4 64
>3a67a8	e4 64 1c 65 e4 64 04 65 e4 64 6c 65 e4 64 84 65
>3a67b8	04 66 1c 65 e4 64 04 65 e4 64 20 65 e8 64 24 66
>3a67c8	e8 64 20 65 e8 64 08 65 e8 64 50 65 e8 64 88 65
>3a67d8	e8 65 20 65 e8 64 08 65 e8 64 a8 65 e8 64 e8 64
>3a67e8	e8 64 34 66 e8 64 08 65 e8 64 70 65 e8 64 c8 65
>3a67f8	08 66 3c 66 e8 64 08 65 e8 64 24 65 ec 64 28 66
>3a6808	ec 64 24 65 ec 64 0c 65 ec 64 54 65 ec 64 8c 65
>3a6818	ec 65 24 65 ec 64 0c 65 ec 64 ac 65 ec 64 ec 64
>3a6828	ec 64 38 66 ec 64 0c 65 ec 64 74 65 ec 64 cc 65
>3a6838	0c 66 2c 65 ec 64 0c 65 ec 64 00 00 13 00 02 09
>3a6848	01 01 01 0a 13 82 08 13 03 03 03 0b 12 04 0f 0c
>3a6858	01 05 05 0d 13 06 08 13 03 07 07 0e 03 00 0b 09
>3a6868	01 01 01 0a 13 82 08 13 03 03 03 0b 12 04 0f 0c
>3a6878	05 05 05 0d 13 06 08 13 07 07 07 0e 13 00 13 09
>3a6888	14 01 01 0a 13 82 08 13 03 03 03 0b 12 04 0f 0c
>3a6898	14 05 05 0d 13 06 13 13 0b 07 07 0b 13 00 16 09
>3a68a8	01 01 01 0a 13 82 08 13 15 03 03 0b 12 04 0f 0c
>3a68b8	05 05 05 0d 13 06 13 13 10 07 07 0e 12 00 16 09
>3a68c8	01 01 01 0a 13 82 13 13 03 03 03 0b 12 04 0f 0c
>3a68d8	05 05 11 0d 13 06 13 13 03 07 07 0e 82 00 42 09
>3a68e8	01 01 01 0a 13 82 13 13 03 03 03 0b 12 04 0f 0c
>3a68f8	05 05 11 0d 13 06 13 13 07 07 06 0e 42 00 02 09
>3a6908	01 01 01 0a 13 82 13 13 03 03 03 0b 12 04 0f 0c
>3a6918	01 05 05 0d 13 06 13 13 17 07 07 0e 42 00 02 09
>3a6928	01 01 01 0f 13 82 13 13 03 03 03 0b 12 04 0f 0c
>3a6938	03 05 05 0d 13 06 13 13 10 07 07 0e 01 01 01 02
>3a6948	01 01 02 02 00 01 01 03 01 01 03 01 02 01 01 00
>3a6958	02 02 02 02 41 00 08 64 64 3a 64 64 64 64 2c 58
>3a6968	00 0e 64 64 3a 64 64 64 64 00 0b 64 64 64 64 2c
>3a6978	58 00 07 64 64 64 64 2c 59 00 06 64 64 64 64 00
>3a6988	03 64 64 2c 58 00 05 64 64 2c 59 00 11 64 64 2c
>3a6998	53 00 09 64 64 00 01 23 64 64 64 64 00 c2 23 64
>3a69a8	64 2c 23 64 64 00 14 23 64 64 00 02 28 64 64 2c
>3a69b8	53 29 2c 59 00 0c 28 64 64 64 64 2c 58 29 00 10
>3a69c8	28 64 64 64 64 29 00 10 28 64 64 2c 58 29 00 00
>3a69d8	28 64 64 29 2c 59 00 04 28 64 64 29 00 0f 5b 64
>3a69e8	64 64 64 5d 00 17 5b 64 64 5d 2c 59 00 0d 5b 64
>3a69f8	64 5d 00 0a 00 00 08 c2 20 48 18 af 78 08 00 69
>3a6a08	01 00 8f 78 08 00 e2 20 af 7a 08 00 69 00 8f 7a
>3a6a18	08 00 c2 20 68 28 6b 08 c2 10 e2 20 da a2 08 00
>3a6a28	0a b0 08 48 a9 30 20 18 00 80 06 48 a9 31 20 18
>3a6a38	00 68 ca d0 eb fa 28 6b 08 c2 20 48 a9 46 08 5b
>3a6a48	68 28 e2 20 a7 32 f0 0a c9 20 d0 06 22 fe 69 3a
>3a6a58	80 f2 6b 08 08 c2 20 48 a9 46 08 5b 68 28 22 fe
>3a6a68	69 3a 22 40 6a 3a c2 30 a5 31 c2 20 29 ff 00 0a
>3a6a78	0a aa a5 32 95 0d a5 34 95 0f e2 20 a7 32 f0 14
>3a6a88	c9 22 f0 06 22 fe 69 3a 80 f2 a9 00 87 32 22 fe
>3a6a98	69 3a e6 31 28 6b 08 c2 20 48 a9 46 08 5b 68 28
>3a6aa8	e2 20 64 4a c2 20 64 50 64 52 e2 20 a7 32 c9 3a
>3a6ab8	f0 0d 20 68 03 90 0e 22 36 5f 3a a9 01 85 4a 22
>3a6ac8	fe 69 3a 80 e5 a5 4a f0 16 a5 31 c2 20 29 ff 00
>3a6ad8	0a 0a aa a5 50 95 0d a5 52 95 0f e2 20 e6 31 6b
>3a6ae8	e2 20 64 31 22 40 6a 3a a7 32 f0 21 c9 22 d0 06
>3a6af8	22 5b 6a 3a 80 0a 22 9e 6a 3a a5 31 c9 09 b0 0d
>3a6b08	a7 32 f0 09 c9 20 f0 dc 20 68 03 b0 d7 6b 08 0b
>3a6b18	08 c2 20 48 a9 46 08 5b 68 28 c2 10 e2 20 a2 31
>3a6b28	00 74 00 ca d0 fb a9 00 85 02 85 34 c2 20 a9 00
>3a6b38	4f 85 00 85 32 e2 20 22 40 6a 3a c9 00 f0 38 c2
>3a6b48	20 a5 32 85 08 e2 20 a5 34 85 0a a2 01 00 22 fe
>3a6b58	69 3a a7 32 d0 06 86 0b 64 31 80 1b c9 20 f0 03
>3a6b68	e8 80 eb 86 0b a9 00 87 32 22 fe 69 3a a7 08 c9
>3a6b78	41 f0 07 22 e8 6a 3a 2b 28 6b 22 40 6a 3a a7 32
>3a6b88	f0 f5 22 9e 6a 3a 22 40 6a 3a a7 32 f0 e9 c2 20
>3a6b98	a5 32 85 11 e2 20 a5 34 85 13 22 fe 69 3a a7 32
>3a6ba8	f0 26 c9 20 d0 f4 a9 00 87 32 e6 31 22 fe 69 3a
>3a6bb8	22 40 6a 3a a7 32 f0 bf c2 20 a5 32 85 15 e2 20
>3a6bc8	a5 34 85 17 e6 31 80 af e6 31 80 ab 08 c2 10 e2
>3a6bd8	20 a5 31 d0 0f a2 ca 6c a9 3a 48 ab 20 c0 02 20
>3a6be8	33 02 80 61 c2 20 a5 0d 8f 21 08 00 a5 0f 8f 23
>3a6bf8	08 00 20 bd 4d e2 20 a5 31 c9 01 d0 0f c2 20 a9
>3a6c08	ff ff 8f 54 03 00 8f 56 03 00 80 0e c2 20 a5 11
>3a6c18	8f 54 03 00 a5 13 8f 56 03 00 22 18 11 00 b0 25
>3a6c28	e2 20 a2 f0 6c a9 3a 48 ab 20 c0 02 af 2e 03 00
>3a6c38	20 ea 02 a9 20 20 18 00 af 20 03 00 20 ea 02 20
>3a6c48	33 02 20 33 02 28 6b 8b 08 c2 10 e2 20 a5 31 c9
>3a6c58	03 f0 0f a2 ca 6c a9 3a 48 ab 20 c0 02 20 33 02
>3a6c68	80 54 c2 20 a5 0d 8f 21 08 00 a5 0f 8f 23 08 00
>3a6c78	20 bd 4d a5 11 8f 50 03 00 a5 13 8f 52 03 00 a5
>3a6c88	15 8f 58 03 00 a5 17 8f 5a 03 00 22 1c 11 00 b0
>3a6c98	25 e2 20 a2 da 6c a9 3a 48 ab 20 c0 02 af 2e 03
>3a6ca8	00 20 ea 02 a9 20 20 18 00 af 20 03 00 20 ea 02
>3a6cb8	20 33 02 20 33 02 28 ab 6b 5c 7c 21 3a 6b 00 00
>3a6cc8	00 00 42 61 64 20 61 72 67 75 6d 65 6e 74 73 0d
>3a6cd8	0d 00 55 6e 61 62 6c 65 20 74 6f 20 73 61 76 65
>3a6ce8	20 66 69 6c 65 3a 20 00 55 6e 61 62 6c 65 20 74
>3a6cf8	6f 20 6c 6f 61 64 20 66 69 6c 65 3a 20 00 0d 20
>3a6d08	20 50 43 20 20 20 20 20 41 20 20 20 20 58 20 20
>3a6d18	20 20 59 20 20 20 20 53 50 20 20 20 44 42 52 20
>3a6d28	44 50 20 20 20 4e 56 4d 58 44 49 5a 43 0d 00 41
>3a6d38	43 44 46 47 4a 48 4c 4d 52 3b 53 54 56 57 58 3e
>3a6d48	3f 00 18 fb 08 c2 20 48 a9 00 08 5b 68 28 08 e2
>3a6d58	20 48 a9 00 48 ab 68 28 c2 30 20 89 6d a9 ff fe
>3a6d68	1b 08 e2 20 48 a9 3a 48 ab 68 28 a2 3c d2 20 c0
>3a6d78	02 08 e2 20 48 a9 00 48 ab 68 28 4c 7c 21 4c 86
>3a6d88	6d 08 20 b5 01 20 6a 45 28 60 00 00 00 00 00 00
>3a6d98	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 1573 times (25168 bytes)...
>3acff8	00 00 00 00 00 00 00 00 30 31 32 33 34 35 36 37
>3ad008	38 39 41 42 43 44 45 46 2b 00 2d 00 2a 00 2f 00
>3ad018	4d 4f 44 00 5e 00 3c 00 3d 00 3e 00 4e 4f 54 00
>3ad028	41 4e 44 00 4f 52 00 28 00 29 00 52 45 4d 00 50
>3ad038	52 49 4e 54 00 4c 45 54 00 47 4f 54 4f 00 45 4e
>3ad048	44 00 49 46 00 54 48 45 4e 00 45 4c 53 45 00 47
>3ad058	4f 53 55 42 00 52 45 54 55 52 4e 00 46 4f 52 00
>3ad068	54 4f 00 53 54 45 50 00 4e 45 58 54 00 44 4f 00
>3ad078	4c 4f 4f 50 00 57 48 49 4c 45 00 55 4e 54 49 4c
>3ad088	00 45 58 49 54 00 43 4c 52 00 53 54 4f 50 00 50
>3ad098	4f 4b 45 00 50 4f 4b 45 57 00 50 4f 4b 45 4c 00
>3ad0a8	43 4c 53 00 52 45 41 44 00 44 41 54 41 00 52 45
>3ad0b8	53 54 4f 52 45 00 44 49 4d 00 43 41 4c 4c 00 3c
>3ad0c8	3d 00 3e 3d 00 3c 3e 00 2d 00 4c 45 4e 00 50 45
>3ad0d8	45 4b 00 50 45 45 4b 57 00 50 45 45 4b 4c 00 43
>3ad0e8	48 52 24 00 41 53 43 00 53 50 43 00 54 41 42 00
>3ad0f8	41 42 53 00 53 47 4e 00 48 45 58 24 00 44 45 43
>3ad108	00 53 54 52 24 00 56 41 4c 00 4c 45 46 54 24 00
>3ad118	52 49 47 48 54 24 00 4d 49 44 24 00 52 55 4e 00
>3ad128	4e 45 57 00 4c 4f 41 44 00 4c 49 53 54 00 44 49
>3ad138	52 00 42 4c 4f 41 44 00 42 52 55 4e 00 42 53 41
>3ad148	56 45 00 44 45 4c 00 53 41 56 45 00 52 45 4e 41
>3ad158	4d 45 00 43 4f 50 59 00 4d 4f 4e 49 54 4f 52 00
>3ad168	47 45 54 00 49 4e 50 55 54 00 53 45 54 42 4f 52
>3ad178	44 45 52 00 54 45 58 54 43 4f 4c 4f 52 00 53 45
>3ad188	54 42 47 43 4f 4c 4f 52 00 53 45 54 44 41 54 45
>3ad198	00 47 45 54 44 41 54 45 24 00 53 45 54 54 49 4d
>3ad1a8	45 00 47 45 54 54 49 4d 45 24 00 47 52 41 50 48
>3ad1b8	49 43 53 00 53 45 54 43 4f 4c 4f 52 00 42 49 54
>3ad1c8	4d 41 50 00 43 4c 52 42 49 54 4d 41 50 00 50 4c
>3ad1d8	4f 54 00 4c 49 4e 45 00 46 49 4c 4c 00 53 50 52
>3ad1e8	49 54 45 00 53 50 52 49 54 45 41 54 00 53 50 52
>3ad1f8	49 54 45 53 48 4f 57 00 54 49 4c 45 53 45 54 00
>3ad208	54 49 4c 45 4d 41 50 00 54 49 4c 45 53 48 4f 57
>3ad218	00 54 49 4c 45 41 54 00 4d 45 4d 43 4f 50 59 00
>3ad228	4c 49 4e 45 41 52 00 52 45 43 54 00 0d 52 45 41
>3ad238	44 59 0d 00 43 32 35 36 20 46 6f 65 6e 69 78 20
>3ad248	42 41 53 49 43 38 31 36 20 76 30 2e 31 2e 30 2d
>3ad258	61 6c 70 68 61 2b 32 33 36 0d 00
>3b0000					.align 256
.3b0000					CREDITS_TEXT
>3b0000	54 68 69 73 20 69 73 20		                .text "This is the credits screen!"
>3b0008	74 68 65 20 63 72 65 64 69 74 73 20 73 63 72 65
>3b0018	65 6e 21
>3b001b	20 20 20 20 20 20 20 20		                .fill 128 - len("This is the credits screen!"), $20
>3b0023	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 4 times (64 bytes)...
>3b0073	20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0080	49 20 77 6f 75 6c 64 20		                .text "I would like to thank the academy."
>3b0088	6c 69 6b 65 20 74 6f 20 74 68 61 6e 6b 20 74 68
>3b0098	65 20 61 63 61 64 65 6d 79 2e
>3b00a2	20 20 20 20 20 20 20 20		                .fill 128 - len("I would like to thank the academy."), $20
>3b00aa	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 4 times (64 bytes)...
>3b00fa	20 20 20 20 20 20
>3b0100					                .text ""
>3b0100	20 20 20 20 20 20 20 20		                .fill 128 - len(""), $20
>3b0108	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 6 times (96 bytes)...
>3b0178	20 20 20 20 20 20 20 20
>3b0180	50 72 65 73 73 20 61 6e		                .text "Press any key to go back..."
>3b0188	79 20 6b 65 79 20 74 6f 20 67 6f 20 62 61 63 6b
>3b0198	2e 2e 2e
>3b019b	20 20 20 20 20 20 20 20		                .fill 128 - len("Press any key to go back..."), $20
>3b01a3	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 4 times (64 bytes)...
>3b01f3	20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0200	20 20 20 20 20 20 20 20		                .fill 128 * 60,$20
>3b0208	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 478 times (7648 bytes)...
>3b1ff8	20 20 20 20 20 20 20 20
>3b2000					.align 256
>3b2000	f3 f3 f3 f3 f3 f3 f3 f3		CREDITS_COLOR   .fill 128 * 64, $F3
>3b2008	f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3
;	...repeated 510 times (8160 bytes)...
>3b3ff8	f3 f3 f3 f3 f3 f3 f3 f3

;******  End of listing
