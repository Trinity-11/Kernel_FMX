
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -D TARGET=2 --long-address --flat --intel-hex -o kernel.hex --list kernel_hex.lst --labels=kernel_hex.lbl src\kernel.asm
; Sun Jun 14 14:57:17 2020

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=2					TARGET=2

;******  Processing input file: src\kernel.asm

=1					TARGET_FLASH = 1              ; The code is being assembled for Flash
=2					TARGET_RAM = 2                ; The code is being assembled for RAM

;******  Processing file: src\macros_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\characters.asm

=$03					CHAR_CTRL_C = $03   ; CTRL-C
=$08					CHAR_BS = $08       ; Backspace (delete character to the left of the cursor)
=$09					CHAR_TAB = $09      ; TAB (moves cursor to next tabulated column)
=$0a					CHAR_LF = $0A       ; Line feed
=$0d					CHAR_CR = $0D       ; Carriage return
=$0f					CHAR_INS = $0F      ; Insert a space at the cursor
=$11					CHAR_UP = $11       ; Up arrow
=$1d					CHAR_RIGHT = $1D    ; Right arrow
=$20					CHAR_SP = $20       ; Space
=$91					CHAR_DOWN = $91     ; Down arrow
=$9d					CHAR_LEFT = $9D     ; Left arrow
=$7f					CHAR_DEL = $7F      ; Delete key (delete the character at the cursor)

;******  Return to file: src\kernel.asm


;******  Processing file: src\simulator_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_inc.asm

=$000000				BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000				unused_0000      = $000000 ;12 Bytes unused
=$000008				OPL2_ADDY_PTR_LO = $000008  ; THis Points towards the Instruments Database
=$000009				OPL2_ADDY_PTR_MD = $000009
=$00000a				OPL2_ADDY_PTR_HI = $00000A
=$00000c				SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f				COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011				COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013				LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=25
=$000015				LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017				CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a				CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c				CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e				CURCOLOR         = $00001E ;1 Byte Color of next character to be printed to the screen.
=$00001f				COLORPOS         = $00001F ;3 Byte address of cursor's position in the color matrix
=$000022				STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024				STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$000026				OPL2_OPERATOR    = $000026 ;
=$000027				OPL2_CHANNEL     = $000027 ;
=$000028				OPL2_REG_REGION  = $000028 ; Offset to the Group of Registers
=$00002a				OPL2_REG_OFFSET  = $00002A ; 2 Bytes (16Bits)
=$00002c				OPL2_IND_ADDY_LL = $00002C ; 2 Bytes Reserved (Only need 3)
=$00002e				OPL2_IND_ADDY_HL = $00002E ; 2 Bytes Reserved (Only need 3)
=$000030				OPL2_NOTE        = $000030 ; 1 Byte
=$000031				OPL2_OCTAVE      = $000031 ; 1 Byte
=$000032				OPL2_PARAMETER0  = $000032 ; 1 Byte - Key On/Feedback
=$000033				OPL2_PARAMETER1  = $000033 ; 1 Byte
=$000034				OPL2_PARAMETER2  = $000034 ; 1 Byte
=$000035				OPL2_PARAMETER3  = $000035 ; 1 Byte
=$000036				OPL2_LOOP        = $000036 ;
=$000036				OPL2_BLOCK       = $000036
=$000038				SDCARD_FILE_PTR  = $000038 ; 3 Bytes Pointer to Filename to open
=$00003c				SDCARD_BYTE_NUM  = $00003C ; 2Bytes
=$00003f				SDCARD_PRSNT_MNT = $00003F ; 1 Byte, Indicate that the SDCard is Present and that it is Mounted
=$000040				BM_CLEAR_SCRN_X  = $000040
=$000042				BM_CLEAR_SCRN_Y  = $000042
=$000040				RAD_STARTLINE    = $000040 ; 1 Byte
=$000041				RAD_PATTERN_IDX  = $000041 ; 1 Byte
=$000042				RAD_LINE         = $000042 ; 1 Byte
=$000043				RAD_LINENUMBER   = $000043 ; 1 Byte
=$000044				RAD_CHANNEL_NUM  = $000044 ; 1 Byte
=$000045				RAD_ISLASTCHAN   = $000045 ; 1 Byte
=$000046				RAD_Y_POINTER    = $000046 ; 2 Bytes
=$000048				RAD_TICK         = $000048
=$00004a				RAD_CHANNEL_DATA = $00004A ; 2 Bytes
=$00004c				RAD_CHANNE_EFFCT = $00004C
=$00004d				RAD_TEMP         = $00004D
=$000050				RAD_ADDR         = $000050 ; 3 bytes to avoid OPL2 errors.
=$000053				RAD_PATTRN       = $000053 ; 1 bytes - offset to patter
=$000054				RAD_PTN_DEST     = $000054 ; 3 bytes - where to write the pattern data
=$000057				RAD_CHANNEL      = $000057 ; 2 bytes - 0 to 8
=$000059				RAD_LAST_NOTE    = $000059 ; 1 if this is the last note
=$00005a				RAD_LINE_PTR     = $00005A ; 2 bytes - offset to memory location
=$000040				BMP_X_SIZE       = $000040 ; 2 Bytes
=$000042				BMP_Y_SIZE       = $000042 ; 2 Bytes
=$000044				BMP_PRSE_SRC_PTR = $000044 ; 3 Bytes
=$000048				BMP_PRSE_DST_PTR = $000048 ; 3 Bytes
=$00004c				BMP_COLOR_PALET  = $00004C ; 2 Bytes
=$00004e				SCRN_X_STRIDE    = $00004E ; 2 Bytes, Basically How many Pixel Accross in Bitmap Mode
=$000050				BMP_FILE_SIZE    = $000050 ; 4 Bytes
=$000054				BMP_POSITION_X   = $000054 ; 2 Bytes Where, the BMP will be position on the X Axis
=$000056				BMP_POSITION_Y   = $000056 ; 2 Bytes Where, the BMP will be position on the Y Axis
=$000058				BMP_PALET_CHOICE = $000058 ;
=$0000e0				MOUSE_PTR        = $0000E0
=$0000e1				MOUSE_POS_X_LO   = $0000E1
=$0000e2				MOUSE_POS_X_HI   = $0000E2
=$0000e3				MOUSE_POS_Y_LO   = $0000E3
=$0000e4				MOUSE_POS_Y_HI   = $0000E4
=$0000f0				USER_TEMP        = $0000F0 ;32 Bytes Temp space for user programs
=$000100				GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000140				INT_CONTROLLER   = $000140 ; $000140...$00015F Interrupt Controller
=$000160				TIMER_CONTROLLER = $000160 ; $000160...$00017F Timer0/Timer1/Timer2 Block
=$000160				TIMER_CTRL_REGLL = $000160 ;
=$000161				TIMER_CTRL_REGLH = $000161 ;
=$000162				TIMER_CTRL_REGHL = $000162 ;
=$000163				TIMER_CTRL_REGHH = $000163 ;
=$000240				CPU_REGISTERS    = $000240 ; Byte
=$000240				CPUPC            = $000240 ;2 Bytes Program Counter (PC)
=$000242				CPUPBR           = $000242 ;2 Bytes Program Bank Register (K)
=$000244				CPUA             = $000244 ;2 Bytes Accumulator (A)
=$000246				CPUX             = $000246 ;2 Bytes X Register (X)
=$000248				CPUY             = $000248 ;2 Bytes Y Register (Y)
=$00024a				CPUSTACK         = $00024A ;2 Bytes Stack Pointer (S)
=$00024c				CPUDP            = $00024C ;2 Bytes Direct Page Register (D)
=$00024e				CPUDBR           = $00024E ;1 Byte  Data Bank Register (B)
=$00024f				CPUFLAGS         = $00024F ;1 Byte  Flags (P)
=$000250				MONITOR_VARS     = $000250 ; Byte  MONITOR Variables. BASIC variables may overlap this space
=$000250				MCMDADDR         = $000250 ;3 Bytes Address of the current line of text being processed by the command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
=$000253				MCMP_TEXT        = $000253 ;3 Bytes Address of symbol being evaluated for COMPARE routine
=$000256				MCMP_LEN         = $000256 ;2 Bytes Length of symbol being evaluated for COMPARE routine
=$000258				MCMD             = $000258 ;3 Bytes Address of the current command/function string
=$00025b				MCMD_LEN         = $00025B ;2 Bytes Length of the current command/function string
=$00025d				MARG1            = $00025D ;4 Bytes First command argument. May be data or address, depending on command
=$000261				MARG2            = $000261 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000265				MARG3            = $000265 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000269				MARG4            = $000269 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$00026d				MARG5            = $00026D ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000271				MARG6            = $000271 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000275				MARG7            = $000275 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000279				MARG8            = $000279 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000300				LOADFILE_VARS    = $000300 ; Byte
=$000300				LOADFILE_NAME    = $000300 ;3 Bytes (addr) Name of file to load. Address in Data Page
=$000303				LOADFILE_LEN     = $000303 ;1 Byte  Length of filename. 0=Null Terminated
=$000304				LOADPBR          = $000304 ;1 Byte  First Program Bank of loaded file ($05 segment)
=$000305				LOADPC           = $000305 ;2 Bytes Start address of loaded file ($05 segment)
=$000307				LOADDBR          = $000307 ;1 Byte  First data bank of loaded file ($06 segment)
=$000308				LOADADDR         = $000308 ;2 Bytes FIrst data address of loaded file ($06 segment)
=$00030a				LOADFILE_TYPE    = $00030A ;3 Bytes (addr) File type string in loaded data file. Actual string data will be in Bank 1. Valid values are BIN, PRG, P16
=$00030d				BLOCK_LEN        = $00030D ;2 Bytes Length of block being loaded
=$00030f				BLOCK_ADDR       = $00030F ;2 Bytes (temp) Address of block being loaded
=$000311				BLOCK_BANK       = $000311 ;1 Byte  (temp) Bank of block being loaded
=$000312				BLOCK_COUNT      = $000312 ;2 Bytes (temp) Counter of bytes read as file is loaded
=$000300				FDC_DRIVE        = $000300 ;1 byte - The number of the selected drive
=$000301				FDC_HEAD         = $000301 ;1 byte - The head number (0 or 1)
=$000302				FDC_CYLINDER     = $000302 ;1 byte - The cylinder number
=$000303				FDC_SECTOR       = $000303 ;1 byte - The sector number
=$000304				FDC_SECTOR_SIZE  = $000304 ;1 byte - The sector size code (2 = 512)
=$000305				FDC_SECPERTRK    = $000305 ;1 byte - The number of sectors per track (18 for 1.44 MB floppy)
=$000306				FDC_ST0          = $000306 ;1 byte - Status Register 0
=$000307				FDC_ST1          = $000307 ;1 byte - Status Register 1
=$000308				FDC_ST2          = $000308 ;1 byte - Status Register 2
=$000309				FDC_ST3          = $000309 ;1 byte - Status Register 3
=$00030a				FDC_PCN          = $00030A ;1 byte - Present Cylinder Number
=$00030b				FDC_STATUS       = $00030B ;1 byte - Status of what we think is going on with the FDC:
=$00030c				DIVIDEND         = $00030C ;4 bytes - Dividend for 32-bit division
=$000310				DIVISOR          = $000310 ;4 bytes - Divisor for 32-bit division
=$000314				REMAINDER        = $000314 ;4 bytes - Remainder for 32-bit division
=$000320				SDOS_VARIABLES   = $000320
=$000320				BIOS_STATUS      = $000320      ; 1 byte - Status of any BIOS operation
=$000321				BIOS_DEV         = $000321      ; 1 byte - Block device number for block operations
=$000322				BIOS_LBA         = $000322      ; 4 bytes - Address of block to read/write (this is the physical block, w/o reference to partition)
=$000326				BIOS_BUFF_PTR    = $000326      ; 4 bytes - 24-bit pointer to memory for read/write operations
=$00032a				BIOS_FIFO_COUNT  = $00032A      ; 2 bytes - The number of bytes read on the last block read
=$00032c				BIOS_FLAGS       = $00032C      ; 1 byte - Flags for various BIOSy things:
=$00032d				BIOS_TIMER       = $00032D      ; 1 byte - the number of 1/60 ticks for a time out
=$00032e				DOS_STATUS       = $00032E      ; 1 byte - The error code describing any error with file access
=$000330				DOS_CLUS_ID      = $000330      ; 4 bytes - The cluster desired for a DOS operation
=$000338				DOS_DIR_PTR      = $000338      ; 4 bytes - Pointer to a directory entry (assumed to be within DOS_SECTOR)
=$00033c				DOS_BUFF_PTR     = $00033C      ; 4 bytes - A pointer for DOS cluster read/write operations
=$000340				DOS_FD_PTR       = $000340      ; 4 bytes - A pointer to a file descriptor
=$000344				DOS_FAT_LBA      = $000344      ; 4 bytes - The LBA for a sector of the FAT we need to read/write
=$000348				DOS_TEMP         = $000348      ; 4 bytes - Temporary storage for DOS operations
=$00034c				DOS_FILE_SIZE    = $00034C      ; 4 bytes - The size of a file
=$000350				DOS_SRC_PTR      = $000350      ; 4 bytes - Pointer for transferring data
=$000354				DOS_DST_PTR      = $000354      ; 4 bytes - Pointer for transferring data
=$000358				DOS_END_PTR      = $000358      ; 4 bytes - Pointer to the last byte to save
=$00035c				DOS_RUN_PTR      = $00035C      ; 4 bytes - Pointer for starting a loaded program
=$000360				DOS_RUN_PARAM    = $000360      ; 4 bytes - Pointer to the ASCIIZ string for arguments in loading a program
=$000364				DOS_STR1_PTR     = $000364      ; 4 bytes - pointer to a string
=$000368				DOS_STR2_PTR     = $000368      ; 4 bytes - pointer to a string
=$00036b				DOS_SCRATCH      = $00036B      ; 4 bytes - general purpose short term storage
=$000400				DOS_PATH_BUFF    = $000400      ; 256 bytes - A buffer for path names
=$000500				FDC_PARAMETERS   = $000500      ; 16 bytes - a buffer of parameter data for the FDC
=$000510				FDC_RESULTS      = $000510      ; 16 bytes - Buffer for results of FDC commands
=$000530				FDC_PARAM_NUM    = $000530      ; 1 byte - The number of parameters to send to the FDC (including command)
=$000532				FDC_RESULT_NUM   = $000532      ; 1 byte - The number of results expected
=$000533				FDC_EXPECT_DAT   = $000533      ; 1 byte - 0 = the command expects no data, otherwise expects data
=$000534				FDC_CMD_RETRY    = $000534      ; 1 byte - a retry counter for commands
=$000700				CURRUART         = $000700 ; 3-bytes: the base address of the current UART
=$000703				CHAN_OUT         = $000703 ; 1-byte: the number of the current output channel (for PUTC, etc.)
=$000704				CHAN_IN          = $000704 ; 1-byte: the number of the current input channel (for GETCH, etc.)
=$000705				TIMERFLAGS       = $000705 ; 1-byte: flags to indicate that one of the timer interupts has triggered
=$80					TIMER0TRIGGER    = $80
=$40					TIMER1TRIGGER    = $40
=$20					TIMER2TRIGGER    = $20
=$000f00				KEY_BUFFER       = $000F00 ; 64 Bytes keyboard buffer
=$0080					KEY_BUFFER_SIZE  = $0080   ;128 Bytes (constant) keyboard buffer length
=$000f7f				KEY_BUFFER_END   = $000F7F ;  1 Byte  Last byte of keyboard buffer
=$000f83				KEY_BUFFER_CMD   = $000F83 ;  1 Byte  Indicates the Command Process Status
=$000f84				COMMAND_SIZE_STR = $000F84 ;  1 Byte
=$000f86				COMMAND_COMP_TMP = $000F86 ;  2 Bytes
=$000f87				KEYBOARD_SC_FLG  = $000F87 ;  1 Bytes that indicate the Status of Left Shift, Left CTRL, Left ALT, Right Shift
=$000f88				KEYBOARD_SC_TMP  = $000F88 ;  1 Byte, Interrupt Save Scan Code while Processing
=$000f89				KEYBOARD_LOCKS   = $000F89 ;  1 Byte, the status of the various lock keys
=$000f8a				KEYFLAG          = $000F8A ;  1 Byte, flag to indicate if CTRL-C has been pressed
=$000f8b				KEY_BUFFER_RPOS  = $000F8B ;  2 Byte, position of the character to read from the KEY_BUFFER
=$000f8d				KEY_BUFFER_WPOS  = $000F8D ;  2 Byte, position of the character to write to the KEY_BUFFER
=$001000				KERNEL_JMP_BEGIN = $001000 ; Reserved for the Kernel jump table
=$001fff				KERNEL_JMP_END   = $001FFF
=$002000				TEST_BEGIN       = $002000 ;28672 Bytes Test/diagnostic code for prototype.
=$007fff				TEST_END         = $007FFF ;0 Byte
=$008000				STACK_BEGIN      = $008000 ;32512 Bytes The default beginning of stack space
=$00feff				STACK_END        = $00FEFF ;0 Byte  End of stack space. Everything below this is I/O space
=$00ff00				ISR_BEGIN        = $00FF00 ; Byte  Beginning of CPU vectors in Direct page
=$00ff00				HRESET           = $00FF00 ;16 Bytes Handle RESET asserted. Reboot computer and re-initialize the kernel.
=$00ff10				HCOP             = $00FF10 ;16 Bytes Handle the COP instruction. Program use; not used by OS
=$00ff20				HBRK             = $00FF20 ;16 Bytes Handle the BRK instruction. Returns to BASIC Ready prompt.
=$00ff30				HABORT           = $00FF30 ;16 Bytes Handle ABORT asserted. Return to Ready prompt with an error message.
=$00ff40				HNMI             = $00FF40 ;32 Bytes Handle NMI
=$00ff60				HIRQ             = $00FF60 ;32 Bytes Handle IRQ
=$00ff80				Unused_FF80      = $00FF80 ;End of direct page Interrrupt handlers
=$00ffe0				VECTORS_BEGIN    = $00FFE0 ;0 Byte  Interrupt vectors
=$00ffe0				JMP_READY        = $00FFE0 ;4 Bytes Jumps to ROM READY routine. Modified whenever alternate command interpreter is loaded.
=$00ffe4				VECTOR_COP       = $00FFE4 ;2 Bytes Native COP Interrupt vector
=$00ffe6				VECTOR_BRK       = $00FFE6 ;2 Bytes Native BRK Interrupt vector
=$00ffe8				VECTOR_ABORT     = $00FFE8 ;2 Bytes Native ABORT Interrupt vector
=$00ffea				VECTOR_NMI       = $00FFEA ;2 Bytes Native NMI Interrupt vector
=$00ffec				VECTOR_RESET     = $00FFEC ;2 Bytes Unused (Native RESET vector)
=$00ffee				VECTOR_IRQ       = $00FFEE ;2 Bytes Native IRQ Vector
=$00fff0				RETURN           = $00FFF0 ;4 Bytes RETURN key handler. Points to BASIC or MONITOR subroutine to execute when RETURN is pressed.
=$00fff4				VECTOR_ECOP      = $00FFF4 ;2 Bytes Emulation mode interrupt handler
=$00fff6				VECTOR_EBRK      = $00FFF6 ;2 Bytes Emulation mode interrupt handler
=$00fff8				VECTOR_EABORT    = $00FFF8 ;2 Bytes Emulation mode interrupt handler
=$00fffa				VECTOR_ENMI      = $00FFFA ;2 Bytes Emulation mode interrupt handler
=$00fffc				VECTOR_ERESET    = $00FFFC ;2 Bytes Emulation mode interrupt handler
=$00fffe				VECTOR_EIRQ      = $00FFFE ;2 Bytes Emulation mode interrupt handler
=$010000				VECTORS_END      = $010000 ;*End of vector space
=$00ffff				BANK0_END        = $00FFFF ;End of Bank 00 and Direct page

;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_data.asm

>380000	00 a0 af			                .long $AFA000       ; SCREENBEGIN, 3 bytes, Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>380003	4c 00				                .word 76            ; COLS_VISIBLE, 2 bytes, Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>380005	80 00				                .word 128           ; COLS_PER_LINE, 2 bytes, Columns in memory per screen line. A virtual line can be this long. Default=128
>380007	38 00				                .word 56            ; LINES_VISIBLE, 2 bytes, The number of rows visible on the screen. Default=25
>380009	40 00				                .word 64            ; LINES_MAX, 2 bytes, The number of rows in memory for the screen. Default=64
>38000b	00 a0 af			                .long $AFA000       ; CURSORPOS, 3 bytes, The next character written to the screen will be written in this location.
>38000e	00 00				                .word 0             ; CURSORX, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380010	00 00				                .word 0             ; CURSORY, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380012	0f				                .byte $0F           ; CURCOLOR, 2 bytes, Color of next character to be printed to the screen.
>380013	00				                .byte $00           ; CURATTR, 2 bytes, Attribute of next character to be printed to the screen.
>380014	00 80				                .word STACK_BEGIN   ; STACKBOT, 2 bytes, Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
>380016	ff fe				                .word STACK_END     ; STACKTOP, 2 bytes, Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.

;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_code.asm

.ff00	18		clc		RHRESET         CLC
.ff01	fb		xce		                XCE
.ff02	5c 00 10 38	jmp $381000	                JML BOOT
.ff10					RHCOP
.ff10	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff12	8b		phb		                PHB
.ff13	0b		phd		                PHD
.ff14	48		pha		                PHA
.ff15	da		phx		                PHX
.ff16	5a		phy		                PHY
.ff17	5c 08 10 38	jmp $381008	                JML BREAK
.ff20					RHBRK
.ff20	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff22	8b		phb		                PHB
.ff23	0b		phd		                PHD
.ff24	48		pha		                PHA
.ff25	da		phx		                PHX
.ff26	5a		phy		                PHY
.ff27	5c 08 10 38	jmp $381008	                JML BREAK
.ff30					RHABORT
.ff30	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff32	8b		phb		                PHB
.ff33	0b		phd		                PHD
.ff34	48		pha		                PHA
.ff35	da		phx		                PHX
.ff36	5a		phy		                PHY
.ff37	5c 08 10 38	jmp $381008	                JML BREAK
.ff40					 RHNMI
.ff40	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff42	8b		phb		                PHB
.ff43	0b		phd		                PHD
.ff44	48		pha		                PHA
.ff45	da		phx		                PHX
.ff46	5a		phy		                PHY
.ff47	22 b3 12 38	jsl $3812b3	                JSL NMI_HANDLER
.ff4b	7a		ply		                PLY
.ff4c	fa		plx		                PLX
.ff4d	68		pla		                PLA
.ff4e	2b		pld		                PLD
.ff4f	ab		plb		                PLB
.ff50	40		rti		                RTI
.ff60					RHIRQ
.ff60	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff62	8b		phb		                PHB
.ff63	0b		phd		                PHD
.ff64	48		pha		                PHA
.ff65	da		phx		                PHX
.ff66	5a		phy		                PHY
.ff67	22 2c 11 38	jsl $38112c	                JSL IRQ_HANDLER
.ff6b	7a		ply		                PLY
.ff6c	fa		plx		                PLX
.ff6d	68		pla		                PLA
.ff6e	2b		pld		                PLD
.ff6f	ab		plb		                PLB
.ff70	40		rti		                RTI
.ffe0	5c 04 00 3a	jmp $3a0004	JUMP_READY      JML MONITOR    ; Kernel READY routine. Rewrite this address to jump to a custom kernel.
>ffe4	10 ff				RVECTOR_COP     .addr HCOP     ; FFE4
>ffe6	20 ff				RVECTOR_BRK     .addr HBRK     ; FFE6
>ffe8	30 ff				RVECTOR_ABORT   .addr HABORT   ; FFE8
>ffea	40 ff				RVECTOR_NMI     .addr HNMI     ; FFEA
>ffec	00 00				                .word $0000    ; FFEC
>ffee	60 ff				RVECTOR_IRQ     .addr HIRQ    ; FFEE
.fff0	5c 6d 06 39	jmp $39066d	RRETURN         JML IRETURN
>fff4	10 ff				RVECTOR_ECOP    .addr HCOP     ; FFF4
>fff6	20 ff				RVECTOR_EBRK    .addr HBRK     ; FFF6
>fff8	30 ff				RVECTOR_EABORT  .addr HABORT   ; FFF8
>fffa	40 ff				RVECTOR_ENMI    .addr HNMI     ; FFFA
>fffc	00 ff				RVECTOR_ERESET  .addr HRESET   ; FFFC
>fffe	60 ff				RVECTOR_EIRQ    .addr HIRQ     ; FFFE

;******  Return to file: src\kernel.asm


;******  Processing file: src\Math_def.asm

=$000100				UNSIGNED_MULT_A_LO  = $000100
=$000101				UNSIGNED_MULT_A_HI  = $000101
=$000102				UNSIGNED_MULT_B_LO  = $000102
=$000103				UNSIGNED_MULT_B_HI  = $000103
=$000104				UNSIGNED_MULT_AL_LO = $000104
=$000105				UNSIGNED_MULT_AL_HI = $000105
=$000106				UNSIGNED_MULT_AH_LO = $000106
=$000107				UNSIGNED_MULT_AH_HI = $000107
=$000108				SIGNED_MULT_A_LO    = $000108
=$000109				SIGNED_MULT_A_HI    = $000109
=$00010a				SIGNED_MULT_B_LO    = $00010A
=$00010b				SIGNED_MULT_B_HI    = $00010B
=$00010c				SIGNED_MULT_AL_LO   = $00010C
=$00010d				SIGNED_MULT_AL_HI   = $00010D
=$00010e				SIGNED_MULT_AH_LO   = $00010E
=$00010f				SIGNED_MULT_AH_HI   = $00010F
=$000110				UNSIGNED_DIV_DEM_LO = $000110
=$000111				UNSIGNED_DIV_DEM_HI = $000111
=$000112				UNSIGNED_DIV_NUM_LO = $000112
=$000113				UNSIGNED_DIV_NUM_HI = $000113
=$000114				UNSIGNED_DIV_QUO_LO = $000114
=$000115				UNSIGNED_DIV_QUO_HI = $000115
=$000116				UNSIGNED_DIV_REM_LO = $000116
=$000117				UNSIGNED_DIV_REM_HI = $000117
=$000118				SIGNED_DIV_DEM_LO   = $000118
=$000119				SIGNED_DIV_DEM_HI   = $000119
=$00011a				SIGNED_DIV_NUM_LO   = $00011A
=$00011b				SIGNED_DIV_NUM_HI   = $00011B
=$00011c				SIGNED_DIV_QUO_LO   = $00011C
=$00011d				SIGNED_DIV_QUO_HI   = $00011D
=$00011e				SIGNED_DIV_REM_LO   = $00011E
=$00011f				SIGNED_DIV_REM_HI   = $00011F
=$000120				ADDER32_A_LL        = $000120
=$000121				ADDER32_A_LH        = $000121
=$000122				ADDER32_A_HL        = $000122
=$000123				ADDER32_A_HH        = $000123
=$000124				ADDER32_B_LL        = $000124
=$000125				ADDER32_B_LH        = $000125
=$000126				ADDER32_B_HL        = $000126
=$000127				ADDER32_B_HH        = $000127
=$000128				ADDER32_R_LL        = $000128
=$000129				ADDER32_R_LH        = $000129
=$00012a				ADDER32_R_HL        = $00012A
=$00012b				ADDER32_R_HH        = $00012B

;******  Return to file: src\kernel.asm


;******  Processing file: src\interrupt_def.asm

=$000140				INT_PENDING_REG0 = $000140 ;
=$000141				INT_PENDING_REG1 = $000141 ;
=$000142				INT_PENDING_REG2 = $000142 ;
=$000143				INT_PENDING_REG3 = $000143 ; FMX Model
=$000144				INT_POL_REG0     = $000144 ;
=$000145				INT_POL_REG1     = $000145 ;
=$000146				INT_POL_REG2     = $000146 ;
=$000147				INT_POL_REG7     = $000147 ; FMX Model
=$000148				INT_EDGE_REG0    = $000148 ;
=$000149				INT_EDGE_REG1    = $000149 ;
=$00014a				INT_EDGE_REG2    = $00014A ;
=$00014b				INT_EDGE_REG3    = $00014B ; FMX Model
=$00014c				INT_MASK_REG0    = $00014C ;
=$00014d				INT_MASK_REG1    = $00014D ;
=$00014e				INT_MASK_REG2    = $00014E ;
=$00014f				INT_MASK_REG3    = $00014F ; FMX Model
=$01					FNX0_INT00_SOF        = $01  ;Start of Frame @ 60FPS
=$02					FNX0_INT01_SOL        = $02  ;Start of Line (Programmable)
=$04					FNX0_INT02_TMR0       = $04  ;Timer 0 Interrupt
=$08					FNX0_INT03_TMR1       = $08  ;Timer 1 Interrupt
=$10					FNX0_INT04_TMR2       = $10  ;Timer 2 Interrupt
=$20					FNX0_INT05_RTC        = $20  ;Real-Time Clock Interrupt
=$40					FNX0_INT06_FDC        = $40  ;Floppy Disk Controller
=$80					FNX0_INT07_MOUSE      = $80  ; Mouse Interrupt (INT12 in SuperIO IOspace)
=$01					FNX1_INT00_KBD        = $01  ;Keyboard Interrupt
=$02					FNX1_INT01_SC0        = $02  ;VICKY_II (INT2) Sprite 2 Sprite Collision
=$04					FNX1_INT02_SC1        = $04  ;VICKY_II (INT3) Sprite 2 Tiles Collision
=$08					FNX1_INT03_COM2       = $08  ;Serial Port 2
=$10					FNX1_INT04_COM1       = $10  ;Serial Port 1
=$20					FNX1_INT05_MPU401     = $20  ;Midi Controller Interrupt
=$40					FNX1_INT06_LPT        = $40  ;Parallel Port
=$80					FNX1_INT07_SDCARD     = $80  ;SD Card Controller Interrupt (CH376S)
=$01					FNX2_INT00_OPL3       = $01  ;OPl3
=$02					FNX2_INT01_GABE_INT0  = $02  ;GABE (INT0) - TBD
=$04					FNX2_INT02_GABE_INT1  = $04  ;GABE (INT1) - TBD
=$08					FNX2_INT03_SDMA       = $08  ;VICKY_II (INT4)
=$10					FNX2_INT04_VDMA       = $10  ;VICKY_II (INT5)
=$20					FNX2_INT05_GABE_INT2  = $20  ;GABE (INT2) - TBD
=$40					FNX2_INT06_EXT        = $40  ;External Expansion
=$80					FNX2_INT07_SDCARD_INS = $80  ; SDCARD Insertion
=$01					FNX3_INT00_OPN2       = $01  ;OPN2
=$02					FNX3_INT01_OPM        = $02  ;OPM
=$04					FNX3_INT02_IDE        = $04  ;HDD IDE INTERRUPT
=$08					FNX3_INT03_TBD        = $08  ;TBD
=$10					FNX3_INT04_TBD        = $10  ;TBD
=$20					FNX3_INT05_TBD        = $20  ;GABE (INT2) - TBD
=$40					FNX3_INT06_TBD        = $40  ;External Expansion
=$80					FNX3_INT07_TBD        = $80  ; SDCARD Insertion

;******  Return to file: src\kernel.asm


;******  Processing file: src\dram_inc.asm

=$afa000				SCREEN_PAGE0     = $AFA000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
=$afc000				SCREEN_PAGE1     = $AFC000 ;8192 Bytes Additional page of display RAM. This can be used for page flipping or to handle multiple edit buffers.
=$b00000				SCREEN_END       = $B00000 ;End of display memory

;******  Return to file: src\kernel.asm


;******  Processing file: src\vicky_def.asm

=$af0000				MASTER_CTRL_REG_L	      = $AF0000
=$01					Mstr_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$02					Mstr_Ctrl_Text_Overlay  = $02       ; Enable the Overlay of the text mode on top of Graphic Mode (the Background Color is ignored)
=$04					Mstr_Ctrl_Graph_Mode_En = $04       ; Enable the Graphic Mode
=$08					Mstr_Ctrl_Bitmap_En     = $08       ; Enable the Bitmap Module In Vicky
=$10					Mstr_Ctrl_TileMap_En    = $10       ; Enable the Tile Module in Vicky
=$20					Mstr_Ctrl_Sprite_En     = $20       ; Enable the Sprite Module in Vicky
=$40					Mstr_Ctrl_GAMMA_En      = $40       ; this Enable the GAMMA correction - The Analog and DVI have different color value, the GAMMA is great to correct the difference
=$80					Mstr_Ctrl_Disable_Vid   = $80       ; This will disable the Scanning of the Video hence giving 100% bandwith to the CPU
=$af0001				MASTER_CTRL_REG_H	      = $AF0001
=$af0002				VKY_RESERVED_00         = $AF0002
=$af0003				VKY_RESERVED_01         = $AF0003
=$01					Border_Ctrl_Enable      = $01
=$af0004				BORDER_CTRL_REG         = $AF0004 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$af0005				BORDER_COLOR_B          = $AF0005
=$af0006				BORDER_COLOR_G          = $AF0006
=$af0007				BORDER_COLOR_R          = $AF0007
=$af0008				BORDER_X_SIZE           = $AF0008; X-  Values: 0 - 32 (Default: 32)
=$af0009				BORDER_Y_SIZE           = $AF0009; Y- Values 0 -32 (Default: 32)
=$af000d				BACKGROUND_COLOR_B      = $AF000D ; When in Graphic Mode, if a pixel is "0" then the Background pixel is chosen
=$af000e				BACKGROUND_COLOR_G      = $AF000E
=$af000f				BACKGROUND_COLOR_R      = $AF000F ;
=$af0010				VKY_TXT_CURSOR_CTRL_REG = $AF0010   ;[0]  Enable Text Mode
=$01					Vky_Cursor_Enable       = $01
=$02					Vky_Cursor_Flash_Rate0  = $02
=$04					Vky_Cursor_Flash_Rate1  = $04
=$08					Vky_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10					Vky_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$af0011				VKY_TXT_START_ADD_PTR   = $AF0011   ; This is an offset to change the Starting address of the Text Mode Buffer (in x)
=$af0012				VKY_TXT_CURSOR_CHAR_REG = $AF0012
=$af0013				VKY_TXT_CURSOR_COLR_REG = $AF0013
=$af0014				VKY_TXT_CURSOR_X_REG_L  = $AF0014
=$af0015				VKY_TXT_CURSOR_X_REG_H  = $AF0015
=$af0016				VKY_TXT_CURSOR_Y_REG_L  = $AF0016
=$af0017				VKY_TXT_CURSOR_Y_REG_H  = $AF0017
=$af001b				VKY_LINE_IRQ_CTRL_REG   = $AF001B ;[0] - Enable Line 0, [1] -Enable Line 1
=$af001c				VKY_LINE0_CMP_VALUE_LO  = $AF001C ;Write Only [7:0]
=$af001d				VKY_LINE0_CMP_VALUE_HI  = $AF001D ;Write Only [3:0]
=$af001e				VKY_LINE1_CMP_VALUE_LO  = $AF001E ;Write Only [7:0]
=$af001f				VKY_LINE1_CMP_VALUE_HI  = $AF001F ;Write Only [3:0]
=$af001c				VKY_INFO_CHIP_NUM_L     = $AF001C
=$af001d				VKY_INFO_CHIP_NUM_H     = $AF001D
=$af001e				VKY_INFO_CHIP_VER_L     = $AF001E
=$af001f				VKY_INFO_CHIP_VER_H     = $AF001F
=$01					TILE_Enable             = $01
=$02					TILE_LUT0               = $02
=$04					TILE_LUT1               = $04
=$08					TILE_LUT2               = $08
=$80					TILESHEET_256x256_En    = $80   ; 0 -> Sequential, 1-> 256x256 Tile Sheet Striding
=$af0100				TL0_CONTROL_REG         = $AF0100       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0101				TL0_START_ADDY_L        = $AF0101       ; Not USed right now - Starting Address to where is the MAP
=$af0102				TL0_START_ADDY_M        = $AF0102
=$af0103				TL0_START_ADDY_H        = $AF0103
=$af0104				TL0_MAP_X_STRIDE_L      = $AF0104       ; The Stride of the Map
=$af0105				TL0_MAP_X_STRIDE_H      = $AF0105
=$af0106				TL0_MAP_Y_STRIDE_L      = $AF0106       ; The Stride of the Map
=$af0107				TL0_MAP_Y_STRIDE_H      = $AF0107
=$af0108				TL1_CONTROL_REG         = $AF0108       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0109				TL1_START_ADDY_L        = $AF0109       ; Not USed right now - Starting Address to where is the MAP
=$af010a				TL1_START_ADDY_M        = $AF010A
=$af010b				TL1_START_ADDY_H        = $AF010B
=$af010c				TL1_MAP_X_STRIDE_L      = $AF010C       ; The Stride of the Map
=$af010d				TL1_MAP_X_STRIDE_H      = $AF010D
=$af010e				TL1_MAP_Y_STRIDE_L      = $AF010E       ; The Stride of the Map
=$af010f				TL1_MAP_Y_STRIDE_H      = $AF010F
=$af0110				TL2_CONTROL_REG         = $AF0110       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0111				TL2_START_ADDY_L        = $AF0111       ; Not USed right now - Starting Address to where is the MAP
=$af0112				TL2_START_ADDY_M        = $AF0112
=$af0113				TL2_START_ADDY_H        = $AF0113
=$af0114				TL2_MAP_X_STRIDE_L      = $AF0114       ; The Stride of the Map
=$af0115				TL2_MAP_X_STRIDE_H      = $AF0115
=$af0116				TL2_MAP_Y_STRIDE_L      = $AF0116       ; The Stride of the Map
=$af0117				TL2_MAP_Y_STRIDE_H      = $AF0117
=$af0118				TL3_CONTROL_REG         = $AF0118       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0119				TL3_START_ADDY_L        = $AF0119       ; Not USed right now - Starting Address to where is the MAP
=$af011a				TL3_START_ADDY_M        = $AF011A
=$af011b				TL3_START_ADDY_H        = $AF011B
=$af011c				TL3_MAP_X_STRIDE_L      = $AF011C       ; The Stride of the Map
=$af011d				TL3_MAP_X_STRIDE_H      = $AF011D
=$af011e				TL3_MAP_Y_STRIDE_L      = $AF011E       ; The Stride of the Map
=$af011f				TL3_MAP_Y_STRIDE_H      = $AF011F
=$af0140				BM_CONTROL_REG          = $AF0140
=$af0141				BM_START_ADDY_L         = $AF0141
=$af0142				BM_START_ADDY_M         = $AF0142
=$af0143				BM_START_ADDY_H         = $AF0143
=$af0144				BM_X_SIZE_L             = $AF0144
=$af0145				BM_X_SIZE_H             = $AF0145
=$af0146				BM_Y_SIZE_L             = $AF0146
=$af0147				BM_Y_SIZE_H             = $AF0147
=$af0148				BM_RESERVED_0           = $AF0148
=$af0149				BM_RESERVED_1           = $AF0149
=$af014a				BM_RESERVED_2           = $AF014A
=$af014b				BM_RESERVED_3           = $AF014B
=$af014c				BM_RESERVED_4           = $AF014C
=$af014d				BM_RESERVED_5           = $AF014D
=$af014e				BM_RESERVED_6           = $AF014E
=$af014f				BM_RESERVED_7           = $AF014F
=$01					SPRITE_Enable             = $01
=$02					SPRITE_LUT0               = $02 ; This is the LUT that the Sprite will use
=$04					SPRITE_LUT1               = $04
=$08					SPRITE_LUT2               = $08 ; Only 4 LUT for Now, So this bit is not used.
=$10					SPRITE_DEPTH0             = $10 ; This is the Layer the Sprite will be Displayed in
=$20					SPRITE_DEPTH1             = $20
=$40					SPRITE_DEPTH2             = $40
=$af0200				SP00_CONTROL_REG        = $AF0200
=$af0201				SP00_ADDY_PTR_L         = $AF0201
=$af0202				SP00_ADDY_PTR_M         = $AF0202
=$af0203				SP00_ADDY_PTR_H         = $AF0203
=$af0204				SP00_X_POS_L            = $AF0204
=$af0205				SP00_X_POS_H            = $AF0205
=$af0206				SP00_Y_POS_L            = $AF0206
=$af0207				SP00_Y_POS_H            = $AF0207
=$af0208				SP01_CONTROL_REG        = $AF0208
=$af0209				SP01_ADDY_PTR_L         = $AF0209
=$af020a				SP01_ADDY_PTR_M         = $AF020A
=$af020b				SP01_ADDY_PTR_H         = $AF020B
=$af020c				SP01_X_POS_L            = $AF020C
=$af020d				SP01_X_POS_H            = $AF020D
=$af020e				SP01_Y_POS_L            = $AF020E
=$af020f				SP01_Y_POS_H            = $AF020F
=$af0210				SP02_CONTROL_REG        = $AF0210
=$af0211				SP02_ADDY_PTR_L         = $AF0211
=$af0212				SP02_ADDY_PTR_M         = $AF0212
=$af0213				SP02_ADDY_PTR_H         = $AF0213
=$af0214				SP02_X_POS_L            = $AF0214
=$af0215				SP02_X_POS_H            = $AF0215
=$af0216				SP02_Y_POS_L            = $AF0216
=$af0217				SP02_Y_POS_H            = $AF0217
=$af0218				SP03_CONTROL_REG        = $AF0218
=$af0219				SP03_ADDY_PTR_L         = $AF0219
=$af021a				SP03_ADDY_PTR_M         = $AF021A
=$af021b				SP03_ADDY_PTR_H         = $AF021B
=$af021c				SP03_X_POS_L            = $AF021C
=$af021d				SP03_X_POS_H            = $AF021D
=$af021e				SP03_Y_POS_L            = $AF021E
=$af021f				SP03_Y_POS_H            = $AF021F
=$af0220				SP04_CONTROL_REG        = $AF0220
=$af0221				SP04_ADDY_PTR_L         = $AF0221
=$af0222				SP04_ADDY_PTR_M         = $AF0222
=$af0223				SP04_ADDY_PTR_H         = $AF0223
=$af0224				SP04_X_POS_L            = $AF0224
=$af0225				SP04_X_POS_H            = $AF0225
=$af0226				SP04_Y_POS_L            = $AF0226
=$af0227				SP04_Y_POS_H            = $AF0227
=$af0228				SP05_CONTROL_REG        = $AF0228
=$af0229				SP05_ADDY_PTR_L         = $AF0229
=$af022a				SP05_ADDY_PTR_M         = $AF022A
=$af022b				SP05_ADDY_PTR_H         = $AF022B
=$af022c				SP05_X_POS_L            = $AF022C
=$af022d				SP05_X_POS_H            = $AF022D
=$af022e				SP05_Y_POS_L            = $AF022E
=$af022f				SP05_Y_POS_H            = $AF022F
=$af0230				SP06_CONTROL_REG        = $AF0230
=$af0231				SP06_ADDY_PTR_L         = $AF0231
=$af0232				SP06_ADDY_PTR_M         = $AF0232
=$af0233				SP06_ADDY_PTR_H         = $AF0233
=$af0234				SP06_X_POS_L            = $AF0234
=$af0235				SP06_X_POS_H            = $AF0235
=$af0236				SP06_Y_POS_L            = $AF0236
=$af0237				SP06_Y_POS_H            = $AF0237
=$af0238				SP07_CONTROL_REG        = $AF0238
=$af0239				SP07_ADDY_PTR_L         = $AF0239
=$af023a				SP07_ADDY_PTR_M         = $AF023A
=$af023b				SP07_ADDY_PTR_H         = $AF023B
=$af023c				SP07_X_POS_L            = $AF023C
=$af023d				SP07_X_POS_H            = $AF023D
=$af023e				SP07_Y_POS_L            = $AF023E
=$af023f				SP07_Y_POS_H            = $AF023F
=$af0240				SP08_CONTROL_REG        = $AF0240
=$af0241				SP08_ADDY_PTR_L         = $AF0241
=$af0242				SP08_ADDY_PTR_M         = $AF0242
=$af0243				SP08_ADDY_PTR_H         = $AF0243
=$af0244				SP08_X_POS_L            = $AF0244
=$af0245				SP08_X_POS_H            = $AF0245
=$af0246				SP08_Y_POS_L            = $AF0246
=$af0247				SP08_Y_POS_H            = $AF0247
=$af0248				SP09_CONTROL_REG        = $AF0248
=$af0249				SP09_ADDY_PTR_L         = $AF0249
=$af024a				SP09_ADDY_PTR_M         = $AF024A
=$af024b				SP09_ADDY_PTR_H         = $AF024B
=$af024c				SP09_X_POS_L            = $AF024C
=$af024d				SP09_X_POS_H            = $AF024D
=$af024e				SP09_Y_POS_L            = $AF024E
=$af024f				SP09_Y_POS_H            = $AF024F
=$af0250				SP10_CONTROL_REG        = $AF0250
=$af0251				SP10_ADDY_PTR_L         = $AF0251
=$af0252				SP10_ADDY_PTR_M         = $AF0252
=$af0253				SP10_ADDY_PTR_H         = $AF0253
=$af0254				SP10_X_POS_L            = $AF0254
=$af0255				SP10_X_POS_H            = $AF0255
=$af0256				SP10_Y_POS_L            = $AF0256
=$af0257				SP10_Y_POS_H            = $AF0257
=$af0258				SP11_CONTROL_REG        = $AF0258
=$af0259				SP11_ADDY_PTR_L         = $AF0259
=$af025a				SP11_ADDY_PTR_M         = $AF025A
=$af025b				SP11_ADDY_PTR_H         = $AF025B
=$af025c				SP11_X_POS_L            = $AF025C
=$af025d				SP11_X_POS_H            = $AF025D
=$af025e				SP11_Y_POS_L            = $AF025E
=$af025f				SP11_Y_POS_H            = $AF025F
=$af0260				SP12_CONTROL_REG        = $AF0260
=$af0261				SP12_ADDY_PTR_L         = $AF0261
=$af0262				SP12_ADDY_PTR_M         = $AF0262
=$af0263				SP12_ADDY_PTR_H         = $AF0263
=$af0264				SP12_X_POS_L            = $AF0264
=$af0265				SP12_X_POS_H            = $AF0265
=$af0266				SP12_Y_POS_L            = $AF0266
=$af0267				SP12_Y_POS_H            = $AF0267
=$af0268				SP13_CONTROL_REG        = $AF0268
=$af0269				SP13_ADDY_PTR_L         = $AF0269
=$af026a				SP13_ADDY_PTR_M         = $AF026A
=$af026b				SP13_ADDY_PTR_H         = $AF026B
=$af026c				SP13_X_POS_L            = $AF026C
=$af026d				SP13_X_POS_H            = $AF026D
=$af026e				SP13_Y_POS_L            = $AF026E
=$af026f				SP13_Y_POS_H            = $AF026F
=$af0270				SP14_CONTROL_REG        = $AF0270
=$af0271				SP14_ADDY_PTR_L         = $AF0271
=$af0272				SP14_ADDY_PTR_M         = $AF0272
=$af0273				SP14_ADDY_PTR_H         = $AF0273
=$af0274				SP14_X_POS_L            = $AF0274
=$af0275				SP14_X_POS_H            = $AF0275
=$af0276				SP14_Y_POS_L            = $AF0276
=$af0277				SP14_Y_POS_H            = $AF0277
=$af0278				SP15_CONTROL_REG        = $AF0278
=$af0279				SP15_ADDY_PTR_L         = $AF0279
=$af027a				SP15_ADDY_PTR_M         = $AF027A
=$af027b				SP15_ADDY_PTR_H         = $AF027B
=$af027c				SP15_X_POS_L            = $AF027C
=$af027d				SP15_X_POS_H            = $AF027D
=$af027e				SP15_Y_POS_L            = $AF027E
=$af027f				SP15_Y_POS_H            = $AF027F
=$af0280				SP16_CONTROL_REG        = $AF0280
=$af0281				SP16_ADDY_PTR_L         = $AF0281
=$af0282				SP16_ADDY_PTR_M         = $AF0282
=$af0283				SP16_ADDY_PTR_H         = $AF0283
=$af0284				SP16_X_POS_L            = $AF0284
=$af0285				SP16_X_POS_H            = $AF0285
=$af0286				SP16_Y_POS_L            = $AF0286
=$af0287				SP16_Y_POS_H            = $AF0287
=$af0288				SP17_CONTROL_REG        = $AF0288
=$af0289				SP17_ADDY_PTR_L         = $AF0289
=$af028a				SP17_ADDY_PTR_M         = $AF028A
=$af028b				SP17_ADDY_PTR_H         = $AF028B
=$af028c				SP17_X_POS_L            = $AF028C
=$af028d				SP17_X_POS_H            = $AF028D
=$af028e				SP17_Y_POS_L            = $AF028E
=$af028f				SP17_Y_POS_H            = $AF028F
=$af0400				VDMA_CONTROL_REG        = $AF0400
=$01					VDMA_CTRL_Enable        = $01
=$02					VDMA_CTRL_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04					VDMA_CTRL_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08					VDMA_CTRL_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$80					VDMA_CTRL_Start_TRF     = $80     ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0401				VDMA_BYTE_2_WRITE       = $AF0401 ; Write Only - Byte to Write in the Fill Function
=$af0401				VDMA_STATUS_REG         = $AF0401 ; Read only
=$01					VDMA_STAT_Size_Err      = $01     ; If Set to 1, Overall Size is Invalid
=$02					VDMA_STAT_Dst_Add_Err   = $02     ; If Set to 1, Destination Address Invalid
=$04					VDMA_STAT_Src_Add_Err   = $04     ; If Set to 1, Source Address Invalid
=$80					VDMA_STAT_VDMA_IPS      = $80     ; If Set to 1, VDMA Transfer in Progress (this Inhibit CPU Access to Mem)
=$af0402				VDMA_SRC_ADDY_L         = $AF0402 ; Pointer to the Source of the Data to be stransfered
=$af0403				VDMA_SRC_ADDY_M         = $AF0403 ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0404				VDMA_SRC_ADDY_H         = $AF0404
=$af0405				VDMA_DST_ADDY_L         = $AF0405 ; Destination Pointer within Vicky's video memory Range
=$af0406				VDMA_DST_ADDY_M         = $AF0406 ; ($00_0000 - $3F_0000)
=$af0407				VDMA_DST_ADDY_H         = $AF0407
=$af0408				VDMA_SIZE_L             = $AF0408 ; Maximum Value: $40:0000 (4Megs)
=$af0409				VDMA_SIZE_M             = $AF0409
=$af040a				VDMA_SIZE_H             = $AF040A
=$af040b				VDMA_IGNORED            = $AF040B
=$af0408				VDMA_X_SIZE_L           = $AF0408 ; Maximum Value: 65535
=$af0409				VDMA_X_SIZE_H           = $AF0409
=$af040a				VDMA_Y_SIZE_L           = $AF040A ; Maximum Value: 65535
=$af040b				VDMA_Y_SIZE_H           = $AF040B
=$af040c				VDMA_SRC_STRIDE_L       = $AF040C ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040d				VDMA_SRC_STRIDE_H       = $AF040D ;
=$af040e				VDMA_DST_STRIDE_L       = $AF040E ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040f				VDMA_DST_STRIDE_H       = $AF040F ;
=$af0500				MOUSE_PTR_GRAP0_START    = $AF0500 ; 16 x 16 = 256 Pixels (Grey Scale) 0 = Transparent, 1 = Black , 255 = White
=$af05ff				MOUSE_PTR_GRAP0_END      = $AF05FF ; Pointer 0
=$af0600				MOUSE_PTR_GRAP1_START    = $AF0600 ;
=$af06ff				MOUSE_PTR_GRAP1_END      = $AF06FF ; Pointer 1
=$af0700				MOUSE_PTR_CTRL_REG_L    = $AF0700 ; Bit[0] Enable, Bit[1] = 0  ( 0 = Pointer0, 1 = Pointer1)
=$af0701				MOUSE_PTR_CTRL_REG_H    = $AF0701 ;
=$af0702				MOUSE_PTR_X_POS_L       = $AF0702 ; X Position (0 - 639) (Can only read now) Writing will have no effect
=$af0703				MOUSE_PTR_X_POS_H       = $AF0703 ;
=$af0704				MOUSE_PTR_Y_POS_L       = $AF0704 ; Y Position (0 - 479) (Can only read now) Writing will have no effect
=$af0705				MOUSE_PTR_Y_POS_H       = $AF0705 ;
=$af0706				MOUSE_PTR_BYTE0         = $AF0706 ; Byte 0 of Mouse Packet (you must write 3 Bytes)
=$af0707				MOUSE_PTR_BYTE1         = $AF0707 ; Byte 1 of Mouse Packet (if you don't, then )
=$af0708				MOUSE_PTR_BYTE2         = $AF0708 ; Byte 2 of Mouse Packet (state Machine will be jammed in 1 state)
=$af070b				C256F_MODEL_MAJOR       = $AF070B ;
=$af070c				C256F_MODEL_MINOR       = $AF070C ;
=$af070d				FPGA_DOR                = $AF070D ;
=$af070e				FPGA_MOR                = $AF070E ;
=$af070f				FPGA_YOR                = $AF070F ;
=$af1f40				FG_CHAR_LUT_PTR         = $AF1F40
=$af1f80				BG_CHAR_LUT_PTR		      = $AF1F80
=$af2000				GRPH_LUT0_PTR		        = $AF2000
=$af2400				GRPH_LUT1_PTR		        = $AF2400
=$af2800				GRPH_LUT2_PTR		        = $AF2800
=$af2c00				GRPH_LUT3_PTR		        = $AF2C00
=$af3000				GRPH_LUT4_PTR		        = $AF3000
=$af3400				GRPH_LUT5_PTR		        = $AF3400
=$af3800				GRPH_LUT6_PTR		        = $AF3800
=$af3c00				GRPH_LUT7_PTR		        = $AF3C00
=$af4000				GAMMA_B_LUT_PTR		      = $AF4000
=$af4100				GAMMA_G_LUT_PTR		      = $AF4100
=$af4200				GAMMA_R_LUT_PTR		      = $AF4200
=$af5000				TILE_MAP0       		    = $AF5000     ;$AF5000 - $AF57FF
=$af5800				TILE_MAP1               = $AF5800     ;$AF5800 - $AF5FFF
=$af6000				TILE_MAP2               = $AF6000     ;$AF6000 - $AF67FF
=$af6800				TILE_MAP3               = $AF6800     ;$AF6800 - $AF6FFF
=$af8000				FONT_MEMORY_BANK0       = $AF8000     ;$AF8000 - $AF87FF
=$af8800				FONT_MEMORY_BANK1       = $AF8800     ;$AF8800 - $AF8FFF
=$afa000				CS_TEXT_MEM_PTR         = $AFA000
=$afc000				CS_COLOR_MEM_PTR        = $AFC000
=$afe000				BTX_START               = $AFE000     ; BEATRIX Registers
=$afffff				BTX_END                 = $AFFFFF

;******  Return to file: src\kernel.asm


;******  Processing file: src\super_io_def.asm

=$af1100				PME_STS_REG     = $AF1100
=$af1102				PME_EN_REG		  = $AF1102
=$af1104				PME_STS1_REG		= $AF1104
=$af1105				PME_STS2_REG		= $AF1105
=$af1106				PME_STS3_REG		= $AF1106
=$af1107				PME_STS4_REG		= $AF1107
=$af1108				PME_STS5_REG		= $AF1108
=$af110a				PME_EN1_REG     = $AF110A
=$af110b				PME_EN2_REG     = $AF110B
=$af110c				PME_EN3_REG     = $AF110C
=$af110d				PME_EN4_REG     = $AF110D
=$af110e				PME_EN5_REG     = $AF110E
=$af1110				SMI_STS1_REG		= $AF1110
=$af1111				SMI_STS2_REG		= $AF1111
=$af1112				SMI_STS3_REG		= $AF1112
=$af1113				SMI_STS4_REG		= $AF1113
=$af1114				SMI_STS5_REG		= $AF1114
=$af1116				SMI_EN1_REG     = $AF1116
=$af1117				SMI_EN2_REG     = $AF1117
=$af1118				SMI_EN3_REG     = $AF1118
=$af1119				SMI_EN4_REG     = $AF1119
=$af111a				SMI_EN5_REG     = $AF111A
=$af111c				MSC_ST_REG      = $AF111C
=$af111e				FORCE_DISK_CHANGE       = $AF111E
=$af111f				FLOPPY_DATA_RATE        = $AF111F
=$af1120				UART1_FIFO_CTRL_SHDW    = $AF1120
=$af1121				UART2_FIFO_CTRL_SHDW    = $AF1121
=$af1122				DEV_DISABLE_REG         = $AF1122
=$af1123				GP10_REG    		= $AF1123
=$af1124				GP11_REG    		= $AF1124
=$af1125				GP12_REG    		= $AF1125
=$af1126				GP13_REG    		= $AF1126
=$af1127				GP14_REG    		= $AF1127
=$af1128				GP15_REG    		= $AF1128
=$af1129				GP16_REG    		= $AF1129
=$af112a				GP17_REG    		= $AF112A
=$af112b				GP20_REG    		= $AF112B
=$af112c				GP21_REG    		= $AF112C
=$af112d				GP22_REG		= $AF112D
=$af112f				GP24_REG		= $AF112F
=$af1130				GP25_REG		= $AF1130
=$af1131				GP26_REG		= $AF1131
=$af1132				GP27_REG		= $AF1132
=$af1133				GP30_REG		= $AF1133
=$af1134				GP31_REG		= $AF1134
=$af1135				GP32_REG		= $AF1135
=$af1136				GP33_REG		= $AF1136
=$af1137				GP34_REG		= $AF1137
=$af1138				GP35_REG		= $AF1138
=$af1139				GP36_REG		= $AF1139
=$af113a				GP37_REG		= $AF113A
=$af113b				GP40_REG		= $AF113B
=$af113c				GP41_REG		= $AF113C
=$af113d				GP42_REG		= $AF113D
=$af113e				GP43_REG		= $AF113E
=$af113f				GP50_REG		= $AF113F
=$af1140				GP51_REG		= $AF1140
=$af1141				GP52_REG		= $AF1141
=$af1142				GP53_REG		= $AF1142
=$af1143				GP54_REG		= $AF1143
=$af1144				GP55_REG		= $AF1144
=$af1145				GP56_REG		= $AF1145
=$af1146				GP57_REG		= $AF1146
=$af1147				GP60_REG		= $AF1147
=$af1148				GP61_REG		= $AF1148
=$af114b				GP1_REG			= $AF114B
=$af114c				GP2_REG			= $AF114C
=$af114d				GP3_REG			= $AF114D
=$af114e				GP4_REG			= $AF114E
=$af114f				GP5_REG			= $AF114F
=$af1150				GP6_REG			= $AF1150
=$af1156				FAN1_REG		        = $AF1156
=$af1157				FAN2_REG            = $AF1157
=$af1158				FAN_CTRL_REG  	    = $AF1158
=$af1159				FAN1_TACH_REG       = $AF1159
=$af115a				FAN2_TACH_REG       = $AF115A
=$af115b				FAN1_PRELOAD_REG    = $AF115B
=$af115c				FAN2_PRELOAD_REG    = $AF115C
=$af115d				LED1_REG    		    = $AF115D
=$af115e				LED2_REG    		    = $AF115E
=$af115f				KEYBOARD_SCAN_CODE	= $AF115F

;******  Return to file: src\kernel.asm


;******  Processing file: src\keyboard_def.asm

=$af1064				STATUS_PORT 	= $AF1064
=$af1060				KBD_OUT_BUF 	= $AF1060
=$af1060				KBD_INPT_BUF	= $AF1060
=$af1064				KBD_CMD_BUF		= $AF1064
=$af1060				KBD_DATA_BUF	= $AF1060
=$af1060				PORT_A		    = $AF1060
=$af1061				PORT_B			= $AF1061
=$01					OUT_BUF_FULL    = $01
=$02					INPT_BUF_FULL	= $02
=$04					SYS_FLAG		= $04
=$08					CMD_DATA		= $08
=$10					KEYBD_INH       = $10
=$20					TRANS_TMOUT	    = $20
=$40					RCV_TMOUT		= $40
=$80					PARITY_EVEN		= $80
=$10					INH_KEYBOARD	= $10
=$ae					KBD_ENA			= $AE
=$ad					KBD_DIS			= $AD
=$f1					KB_MENU			= $F1
=$f4					KB_ENABLE		= $F4
=$f7					KB_MAKEBREAK    = $F7
=$fe					KB_ECHO			= $FE
=$ff					KB_RESET		= $FF
=$ed					KB_LED_CMD		= $ED
=$aa					KB_OK			= $AA
=$fa					KB_ACK			= $FA
=$ff					KB_OVERRUN		= $FF
=$fe					KB_RESEND		= $FE
=$f0					KB_BREAK		= $F0
=$10					KB_FA			= $10
=$20					KB_FE			= $20
=$40					KB_PR_LED		= $40
=$01					KB_SCROLL_LOCK  = $01
=$02					KB_NUM_LOCK     = $02
=$04					KB_CAPS_LOCK    = $04
=$80					KB_CTRL_C = $80             ; CTRL-C was pressed
=$60					KB_CREDITS = $60            ; Credits key was pressed

;******  Return to file: src\kernel.asm


;******  Processing file: src\SID_def.asm

=$afe400				SID0_V1_FREQ_LO    = $AFE400 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$afe401				SID0_V1_FREQ_HI    = $AFE401 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$afe402				SID0_V1_PW_LO      = $AFE402 ;SID - L - Voice 1 (Write Only) - PW LOW
=$afe403				SID0_V1_PW_HI      = $AFE403 ;SID - L - Voice 1 (Write Only) - PW HI
=$afe404				SID0_V1_CTRL       = $AFE404 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$afe405				SID0_V1_ATCK_DECY  = $AFE405 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$afe406				SID0_V1_SSTN_RLSE  = $AFE406 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$afe407				SID0_V2_FREQ_LO    = $AFE407 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$afe408				SID0_V2_FREQ_HI    = $AFE408 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$afe409				SID0_V2_PW_LO      = $AFE409 ;SID - L - Voice 2 (Write Only) - PW LOW
=$afe40a				SID0_V2_PW_HI      = $AFE40A ;SID - L - Voice 2 (Write Only) - PW HI
=$afe40b				SID0_V2_CTRL       = $AFE40B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$afe40c				SID0_V2_ATCK_DECY  = $AFE40C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$afe40d				SID0_V2_SSTN_RLSE  = $AFE40D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$afe40e				SID0_V3_FREQ_LO    = $AFE40E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$afe40f				SID0_V3_FREQ_HI    = $AFE40F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$afe410				SID0_V3_PW_LO      = $AFE410 ;SID - L - Voice 3 (Write Only) - PW LOW
=$afe411				SID0_V3_PW_HI      = $AFE411 ;SID - L - Voice 3 (Write Only) - PW HI
=$afe412				SID0_V3_CTRL       = $AFE412 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$afe413				SID0_V3_ATCK_DECY  = $AFE413 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$afe414				SID0_V3_SSTN_RLSE  = $AFE414 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$afe415				SID0_FC_LO         = $AFE415 ;SID - L - Filter (Write Only) - FC LOW
=$afe416				SID0_FC_HI         = $AFE416 ;SID - L - Filter (Write Only) - FC HI
=$afe417				SID0_RES_FILT      = $AFE417 ;SID - L - Filter (Write Only) - RES / FILT
=$afe418				SID0_MODE_VOL      = $AFE418 ;SID - L - Filter (Write Only) - MODE / VOL
=$afe419				SID0_POT_X         = $AFE419 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$afe41a				SID0_POT_Y         = $AFE41A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$afe41b				SID0_OSC3_RND      = $AFE41B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$afe41c				SID0_ENV3          = $AFE41C ;SID - L - Misc (Read Only)  - ENV3
=$afe41d				SID0_NOT_USED0     = $AFE41D ;SID - L - NOT USED
=$afe41e				SID0_NOT_USED1     = $AFE41E ;SID - L - NOT USED
=$afe41f				SID0_NOT_USED2     = $AFE41F ;SID - L - NOT USED

;******  Return to file: src\kernel.asm


;******  Processing file: src\RTC_def.asm

=$af0800				RTC_SEC       = $AF0800 ;Seconds Register
=$af0801				RTC_SEC_ALARM = $AF0801 ;Seconds Alarm Register
=$af0802				RTC_MIN       = $AF0802 ;Minutes Register
=$af0803				RTC_MIN_ALARM = $AF0803 ;Minutes Alarm Register
=$af0804				RTC_HRS       = $AF0804 ;Hours Register
=$af0805				RTC_HRS_ALARM = $AF0805 ;Hours Alarm Register
=$af0806				RTC_DAY       = $AF0806 ;Day Register
=$af0807				RTC_DAY_ALARM = $AF0807 ;Day Alarm Register
=$af0808				RTC_DOW       = $AF0808 ;Day of Week Register
=$af0809				RTC_MONTH     = $AF0809 ;Month Register
=$af080a				RTC_YEAR      = $AF080A ;Year Register
=$af080b				RTC_RATES     = $AF080B ;Rates Register
=$af080c				RTC_ENABLE    = $AF080C ;Enables Register
=$af080d				RTC_FLAGS     = $AF080D ;Flags Register
=$af080e				RTC_CTRL      = $AF080E ;Control Register
=$af080f				RTC_CENTURY   = $AF080F ;Century Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\io_def.asm

=0					CHAN_CONSOLE  = 0           ; ID for screen and keyboard access
=1					CHAN_COM1     = 1           ; ID for serial access on COM1 (external port)
=2					CHAN_COM2     = 2           ; ID for serial access on COM2 (internal port)
=3					CHAN_LPT      = 3           ; ID for parallel port
=$afe810				SDCARD_DATA   = $AFE810     ;(R/W) SDCARD (CH376S) Data PORT_A (A0 = 0)
=$afe811				SDCARD_CMD    = $AFE811     ;(R/W) SDCARD (CH376S) CMD/STATUS Port (A0 = 1)
=$afe812				SDCARD_STAT   = $AFE812     ;(R) SDCARD (Bit[0] = CD, Bit[1] = WP)
=$afe900				CODEC_DATA_LO = $AFE900     ;(W) LSB of Add/Data Reg to Control CODEC See WM8776 Spec
=$afe901				CODEC_DATA_HI = $AFE901     ;(W) MSB od Add/Data Reg to Control CODEC See WM8776 Spec
=$afe902				CODEC_WR_CTRL = $AFE902     ;(W) Bit[0] = 1 -> Start Writing the CODEC Control Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\Trinity_CFP9301_def.asm

=$afe800				JOYSTICK0           = $AFE800   ;(R) Joystick 0 - J7 (next to SD Card)
=$afe801				JOYSTICK1           = $AFE801   ;(R) Joystick 1 - J8
=$afe802				JOYSTICK2           = $AFE802   ;(R) Joystick 2 - J9
=$afe803				JOYSTICK3           = $AFE803   ;(R) Joystick 3 - J10 (Next to Buzzer)
=$afe804				JOYSTICK_MODE       = $AFE804
=$01					NES_SNES_EN0        = $01       ; Enable the NES/SNES Mode on Port 0
=$02					NES_SNES_EN1        = $02       ; Enable the NES/SNES Mode on Port 1
=$04					NES_SNES_JOY        = $04       ; 0 = NES, 1 = SNES
=$40					NES_SNES_DONE       = $40       ; Poll to see if the Deserializer is done
=$80					NES_SNES_TRIG       = $80       ; Set to start the Serializer
=$afe805				REVOFPCB_C          = $AFE805   ; You should read the ASCCII for "C"
=$afe806				REVOFPCB_4          = $AFE806   ; You should read the ASCCII for "4"
=$afe807				REVOFPCB_A          = $AFE807   ; You should read the ASCCII for "A"
=$afe808				NES_SNES0_DAT_LO    = $AFE808   ; Contains the 8bits From NES and SNES
=$afe809				SNES0_DAT_HI0       = $AFE809   ; Contains the extra 4 bit from the SNES Controller
=$afe80a				NES_SNES1_DAT_LO    = $AFE80A
=$afe80b				SNES1_DAT_HI0       = $AFE80B
=$afe80c				CFP9301_REV         = $AFE80C   ; Hardware Revision of the CPLD Code
=$afe80d				DIP_USER            = $AFE80D   ; Dip Switch 3/4/5 can be user Defined
=$afe80e				DIP_BOOTMODE        = $AFE80E
=$01					BOOT_MODE0          = $01
=$02					BOOT_MODE1          = $02
=$80					HD_INSTALLED        = $80
=$00					DIP_BOOT_IDE        = $00
=$01					DIP_BOOT_SDCARD     = $01
=$02					DIP_BOOT_FLOPPY     = $02
=$03					DIP_BOOT_BASIC      = $03

;******  Return to file: src\kernel.asm


;******  Processing file: src\Unity_CFP9307_def.asm

=$afe830				IDE_DATA      = $AFE830 ; 8-Bit Access here Only
=$afe831				IDE_ERROR     = $AFE831 ; Error Information register (only read when there is an error ) - Probably clears Error Bits
=$afe832				IDE_SECT_CNT  = $AFE832 ; Sector Count Register (also used to pass parameter for timeout for IDLE modus Command)
=$afe833				IDE_SECT_SRT  = $AFE833 ; Start Sector Register (0 = 256), so start @ 1
=$afe834				IDE_CLDR_LO   = $AFE834 ; Low Byte of Cylinder Numnber {7:0}
=$afe835				IDE_CLDR_HI   = $AFE835 ;  Hi Byte of Cylinder Number {9:8} (1023-0).
=$afe836				IDE_HEAD      = $AFE836 ; Head, device select, {3:0} HEad Number, 4 -> 0:Master, 1:Slave, {7:5} = 101 (legacy);
=$afe837				IDE_CMD_STAT  = $AFE837 ; Command/Status Register - Reading this will clear the Interrupt Registers
=$afe838				IDE_DATA_LO   = $AFE838 ; 16-bit access here
=$afe839				IDE_DATA_HI   = $AFE839 ;
=$01					IDE_ERR_AMNF = $01      ; Error: Address mark not found
=$02					IDE_ERR_TKZNF = $02     ; Error: Track 0 not found
=$04					IDE_ERR_ABRT = $04      ; Error: Aborted command
=$08					IDE_ERR_MCR = $08       ; Error: Media change request
=$10					IDE_ERR_IDNF = $10      ; Error: ID not found
=$20					IDE_ERR_MC = $20        ; Error: Media change
=$40					IDE_ERR_UNC = $40       ; Error: Uncorrectable data error
=$80					IDE_ERR_BBK = $80       ; Error: Bad block detected
=$80					IDE_STAT_BSY = $80      ; BSY (Busy) is set whenever the device has control of the command Block Registers.
=$40					IDE_STAT_DRDY = $40     ; DRDY (Device Ready) is set to indicate that the device is capable of accepting all command codes.
=$20					IDE_STAT_DF = $20       ; DF (Device Fault) indicates a device fault error has been detected.
=$10					IDE_STAT_DSC = $10      ; DSC (Device Seek Complete) indicates that the device heads are settled over a track.
=$08					IDE_STAT_DRQ = $08      ; DRQ (Data Request) indicates that the device is ready to transfer a word or byte of data between
=$04					IDE_STAT_CORR = $04     ; CORR (Corrected Data) is used to indicate a correctable data error.
=$02					IDE_STAT_IDX = $02      ; Vendor specific bit
=$01					IDE_STAT_ERR = $01      ; ERR (Error) indicates that an error occurred during execution of the previous command.
=$ec					IDE_CMD_IDENTIFY = $EC      ; Get device identification data
=$21					IDE_CMD_READ_SECTOR = $21   ; Read 1 or more sectors
=$30					IDE_CMD_WRITE_SECTOR = $30  ; Write 1 or more sectors

;******  Return to file: src\kernel.asm


;******  Processing file: src\GABE_Control_Registers_def.asm

=$afe880				GABE_MSTR_CTRL      = $AFE880
=$01					GABE_CTRL_PWR_LED   = $01     ; Controls the LED in the Front of the case (Next to the reset button)
=$02					GABE_CTRL_SDC_LED   = $02     ; Controls the LED in the Front of the Case (Next to SDCard)
=$10					GABE_CTRL_BUZZER    = $10     ; Controls the Buzzer
=$80					GABE_CTRL_WRM_RST   = $80     ; Warm Reset (needs to Setup other registers)
=$afe881				GABE_NOTUSED        = $AFE881 ; Reserved for future use
=$afe882				GABE_RST_AUTH0      = $AFE882 ; Must Contain the BYTE $AD for Reset to Activate
=$afe883				GABE_RST_AUTH1      = $AFE883 ; Must Contain the BYTE $DE for Reset to Activate
=$afe884				GABE_RNG_DAT_LO     = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885				GABE_RNG_DAT_HI     = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe884				GABE_RNG_SEED_LO    = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885				GABE_RNG_SEED_HI    = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe886				GABE_RNG_STAT       = $AFE886 ;
=$80					GABE_RNG_LFSR_DONE  = $80     ; indicates that Output = SEED Database
=$afe886				GABE_RNG_CTRL       = $AFE886 ;
=$01					GABE_RNG_CTRL_EN    = $01     ; Enable the LFSR BLOCK_LEN
=$02					GABE_RNG_CTRL_DV    = $02     ; After Setting the Seed Value, Toggle that Bit for it be registered
=$afe887				GABE_SYS_STAT       = $AFE887 ;
=$01					GABE_SYS_STAT_MID0  = $01     ; Machine ID -- LSB
=$02					GABE_SYS_STAT_MID1  = $02     ; Machine ID -- MSB
=$08					GABE_SYS_STAT_EXP   = $08     ; if Zero, there is an Expansion Card Preset
=$40					GABE_SYS_STAT_CPUA  = $40     ; Indicates the (8bit/16bit) Size of the Accumulator
=$80					GABE_SYS_STAT_CPUX  = $80     ; Indicates the (8bit/16bit) Size of the Accumulator

;******  Return to file: src\kernel.asm


;******  Processing file: src\fdc_inc.asm

=$af13f0				SIO_FDC  = $AF13F0
=$af13f0				SIO_FDC_SRA = $AF13F0 ; Read Only - Status Register A (not used in AT mode)
=$af13f1				SIO_FDC_SRB = $AF13F1 ; Read Only - Status Register B (not used in AT mode)
=$af13f2				SIO_FDC_DOR = $AF13F2 ; Read/Write - Digital Output Register
=$01					FDC_DOR_DSEL0 = $01     ; Drive 0 Select
=$02					FDC_DOR_DSEL1 = $02     ; Drive 1 Select
=$04					FDC_DOR_NRESET = $04    ; Reset the FDC
=$08					FDC_DOR_DMAEN = $08     ; Enable DMA
=$10					FDC_DOR_MOT0  = $10     ; Turn on motor 0
=$20					FDC_DOR_MOT1  = $20     ; Turn on motor 1
=$40					FDC_DOR_MOT2  = $40     ; Turn on motor 2
=$80					FDC_DOR_MOT3  = $80     ; Turn on motor 3
=$af13f3				SIO_FDC_TSR = $AF13F3   ; Read/Write - Tape Drive Status (not used on the C256)
=$af13f4				SIO_FDC_MSR = $AF13F4   ; Read - Main Status Register
=$01					FDC_MSR_DRV0BSY = $01   ; Indicates if drive 0 is busy
=$02					FDC_MSR_DRV1BSY = $02   ; Indicates if drive 1 is busy
=$10					FDC_MSR_CMDBSY = $10    ; Indicates if a command is in progress
=$20					FDC_MSR_NONDMA = $20    ;
=$40					FDC_MSR_DIO = $40       ; Data direction: 1 = read, 0 = write
=$80					FDC_MSR_RQM = $80       ; 1 = host can transfer data, 0 = host must wait
=$af13f4				SIO_FDC_DSR = $AF13F4   ; Write - Data Select Register
=$40					FDC_DSR_LOPWR = $40     ; Turn on low power mode
=$80					FDC_DSR_RESET = $80     ; Software reset of the FDC
=$af13f5				SIO_FDC_DTA = $AF13F5   ; Read/Write - Data - FIFO
=$af13f6				SIO_FDC_RSV = $AF13F6   ; Reserved
=$af13f7				SIO_FDC_DIR = $AF13F7   ; Read - Digital Input Register
=$80					FDC_DIR_DSKCHG = $80    ; Indicates if the disk has changed
=$af13f7				SIO_FDC_CCR = $AF13F7   ; Write - Configuration Control Register
=$03					FDC_ST0_DRVSEL = $03    ; Mask for the current selected drive
=$04					FDC_ST0_HEAD = $04      ; Bit for the current selected head
=$08					FDC_ST0_EC = $08        ; Bit for EQUIPMENT CHECK, error in recalibrate or relative seek
=$10					FDC_ST0_SEEKEND = $10   ; The FDC completed a seek, relative seek, or recalibrate
=$c0					FDC_ST0_INTCODE = $C0   ; Mask for interrupt code:
=$01					FDC_ST1_MA = $01        ; Missing address mark
=$02					FDC_ST1_NW = $02        ; Not writable (disk is write protected)
=$04					FDC_ST1_ND = $04        ; No data
=$10					FDC_ST1_OR = $10        ; Overrun/underrun of the data
=$20					FDC_ST1_DE = $20        ; Data error... a CRC check failed
=$80					FDC_ST1_EN = $80        ; End of cylinder: tried to acess a sector not on the track
=$01					FDC_ST2_MD = $01        ; Missing address mark: FDC cannot detect a data address mark
=$02					FDC_ST2_BC = $02        ; Bad cylinder
=$10					FDC_ST2_WC = $10        ; Wrong cylinder: track is not the same as expected
=$20					FDC_ST2_DD = $20        ; Data error in field: CRC error
=$40					FDC_ST2_CM = $40        ; Control mark
=$03					FDC_ST3_DRVSEL = $03    ; Drive select mask
=$04					FDC_ST3_HEAD = $04      ; Head address bit
=$10					FDC_ST3_TRACK0 = $10    ; Track 0: Status of the TRK0 pin
=$40					FDC_ST3_WP = $40        ; Write Protect: status of the WP pin
=2					FDC_CMD_READ_TRACK          = 2
=3					FDC_CMD_SPECIFY             = 3
=4					FDC_CMD_SENSE_DRIVE_STATUS  = 4
=5					FDC_CMD_WRITE_DATA          = 5
=6					FDC_CMD_READ_DATA           = 6
=7					FDC_CMD_RECALIBRATE         = 7
=8					FDC_CMD_SENSE_INTERRUPT     = 8
=9					FDC_CMD_WRITE_DELETED_DATA  = 9
=10					FDC_CMD_READ_ID             = 10
=12					FDC_CMD_READ_DELETED_DATA   = 12
=13					FDC_CMD_FORMAT_TRACK        = 13
=14					FDC_CMD_DUMPREG             = 14
=15					FDC_CMD_SEEK                = 15
=16					FDC_CMD_VERSION             = 16
=17					FDC_CMD_SCAN_EQUAL          = 17
=18					FDC_CMD_PERPENDICULAR_MODE  = 18
=19					FDC_CMD_CONFIGURE           = 19
=20					FDC_CMD_LOCK                = 20
=22					FDC_CMD_VERIFY              = 22
=25					FDC_CMD_SCAN_LOW_OR_EQUAL   = 25
=29					FDC_CMD_SCAN_HIGH_OR_EQUAL  = 29
=$80					FDC_CMD_MT = $80                    ; Command bit to turn on multi-track
=$40					FDC_CMD_MFM = $40                   ; Command bit to operate in MFM format
=$20					FDC_CMD_SK = $20                    ; Command bit to skip deleted sectors
=$40					FDC_CMD_EIS = $40                   ; Command bit to turn on implied seek
=1					FDC_DEVCMD_MOTOR_ON         = 1     ; Device code to turn the motor on
=2					FDC_DEVCMD_MOTOR_OFF        = 2     ; Device code to turn the motor off
=3					FDC_DEVCMD_RECAL            = 3     ; Device code to recalibrate the drive

;******  Return to file: src\kernel.asm


;******  Processing file: src\timer_def.asm

=$000160				TIMER0_CTRL_REG   = $000160 ; (Write - Control, Read Status)
=$01					TMR0_EN     = $01
=$02					TMR0_SCLR   = $02
=$04					TMR0_SLOAD  = $04 ; Use SLOAD is
=$08					TMR0_UPDWN  = $08
=$000161				TIMER0_CHARGE_L   = $000161 ; Use if you want to Precharge and countdown
=$000162				TIMER0_CHARGE_M   = $000162 ;
=$000163				TIMER0_CHARGE_H   = $000163 ;
=$000164				TIMER0_CMP_REG    = $000164 ;
=$01					TMR0_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02					TMR0_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$000165				TIMER0_CMP_L      = $000165 ; Load this Value for Countup
=$000166				TIMER0_CMP_M      = $000166 ;
=$000167				TIMER0_CMP_H      = $000167 ;
=$000168				TIMER1_CTRL_REG   = $000168 ;
=$01					TMR1_EN     = $01
=$02					TMR1_SCLR   = $02
=$04					TMR1_SLOAD  = $04
=$08					TMR1_UPDWN  = $08 ; 1 = Up, 0 = Down
=$000169				TIMER1_CHARGE_L   = $000169 ; Use if you want to Precharge and countdown
=$00016a				TIMER1_CHARGE_M   = $00016A ;
=$00016b				TIMER1_CHARGE_H   = $00016B ;
=$00016c				TIMER1_CMP_REG    = $00016C ;
=$01					TMR1_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02					TMR1_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$00016d				TIMER1_CMP_L      = $00016D ;
=$00016e				TIMER1_CMP_M      = $00016E ;
=$00016f				TIMER1_CMP_H      = $00016F ;

;******  Return to file: src\kernel.asm


;******  Processing file: src\basic_inc.asm

=$3a0000				BASIC = $3A0000
=3801092				MONITOR = BASIC + 4

;******  Return to file: src\kernel.asm


;******  Processing file: src\kernel_jumptable.asm

.381000	5c 00 04 39	jmp $390400	BOOT            JML IBOOT
.381004	5c 2e 14 39	jmp $39142e	RESTORE         JML IRESTORE
.381008	5c 0c 06 39	jmp $39060c	BREAK           JML IBREAK
.38100c	5c 53 06 39	jmp $390653	READY           JML IREADY
.381010	5c 2f 14 39	jmp $39142f	SCINIT          JML ISCINIT
.381014	5c 30 14 39	jmp $391430	IOINIT          JML IIOINIT
.381018	5c d0 06 39	jmp $3906d0	PUTC            JML IPUTC
.38101c	5c b9 06 39	jmp $3906b9	PUTS            JML IPUTS
.381020	5c f5 07 39	jmp $3907f5	PUTB            JML IPUTB
.381024	5c 04 3f 39	jmp $393f04	PUTBLOCK        JML IPUTBLOCK
.381028	5c 31 14 39	jmp $391431	SETLFS          JML ISETLFS
.38102c	5c 32 14 39	jmp $391432	SETNAM          JML ISETNAM
.381030	5c 33 14 39	jmp $391433	OPEN            JML IOPEN
.381034	5c 34 14 39	jmp $391434	CLOSE           JML ICLOSE
.381038	5c 6e 06 39	jmp $39066e	SETIN           JML ISETIN
.38103c	5c 77 06 39	jmp $390677	SETOUT          JML ISETOUT
.381040	5c 35 14 39	jmp $391435	GETB            JML IGETB
.381044	5c b1 3e 39	jmp $393eb1	GETBLOCK        JML IGETBLOCK
.381048	5c 36 14 39	jmp $391436	GETCH           JML IGETCH
.38104c	5c 89 06 39	jmp $390689	GETCHW          JML IGETCHW
.381050	5c 80 06 39	jmp $390680	GETCHE          JML IGETCHE
.381054	5c 37 14 39	jmp $391437	GETS            JML IGETS
.381058	5c 38 14 39	jmp $391438	GETLINE         JML IGETLINE
.38105c	5c 39 14 39	jmp $391439	GETFIELD        JML IGETFIELD
.381060	5c 3a 14 39	jmp $39143a	TRIM            JML ITRIM
.381064	5c 3b 14 39	jmp $39143b	PRINTC          JML IPRINTC
.381068	5c 3c 14 39	jmp $39143c	PRINTS          JML IPRINTS
.38106c	5c f6 07 39	jmp $3907f6	PRINTCR         JML IPRINTCR
.381070	5c 3d 14 39	jmp $39143d	PRINTF          JML IPRINTF
.381074	5c 3e 14 39	jmp $39143e	PRINTI          JML IPRINTI
.381078	5c 6e 09 39	jmp $39096e	PRINTH          JML IPRINTH
.38107c	5c 3f 14 39	jmp $39143f	PRINTAI         JML IPRINTAI
.381080	5c 8b 09 39	jmp $39098b	PRINTAH         JML IPRINTAH
.381084	5c fa 08 39	jmp $3908fa	LOCATE          JML ILOCATE
.381088	5c 40 14 39	jmp $391440	PUSHKEY         JML IPUSHKEY
.38108c	5c 41 14 39	jmp $391441	PUSHKEYS        JML IPUSHKEYS
.381090	5c 56 08 39	jmp $390856	CSRRIGHT        JML ICSRRIGHT
.381094	5c 89 08 39	jmp $390889	CSRLEFT         JML ICSRLEFT
.381098	5c af 08 39	jmp $3908af	CSRUP           JML ICSRUP
.38109c	5c d5 08 39	jmp $3908d5	CSRDOWN         JML ICSRDOWN
.3810a0	5c 45 08 39	jmp $390845	CSRHOME         JML ICSRHOME
.3810a4	5c 46 09 39	jmp $390946	SCROLLUP        JML ISCROLLUP
.3810a8	5c d9 09 39	jmp $3909d9	CLRSCREEN       JML ICLRSCREEN
.3810ac	5c 3c 0a 39	jmp $390a3c	INITCHLUT	    JML IINITCHLUT
.3810b0	5c 56 0d 39	jmp $390d56	INITSUPERIO	    JML IINITSUPERIO
.3810b4	5c 55 0e 39	jmp $390e55	INITKEYBOARD    JML IINITKEYBOARD
.3810b8	5c c0 0f 39	jmp $390fc0	TESTSID         JML ITESTSID
.3810bc	5c 35 0d 39	jmp $390d35	INITCURSOR      JML IINITCURSOR
.3810c0	5c eb 0c 39	jmp $390ceb	INITFONTSET     JML IINITFONTSET
.3810c4	5c 6b 0a 39	jmp $390a6b	INITGAMMATABLE  JML IINITGAMMATABLE
.3810c8	5c 8b 0a 39	jmp $390a8b	INITALLLUT      JML IINITALLLUT
.3810cc	5c 4d 0b 39	jmp $390b4d	INITVKYTXTMODE  JML IINITVKYTXTMODE
.3810d0	5c 76 0b 39	jmp $390b76	INITVKYGRPMODE  JML IINITVKYGRPMODE
.3810d4	5c ad 0b 39	jmp $390bad	INITTILEMODE    JML IINITTILEMODE
.3810d8	5c ae 0b 39	jmp $390bae	INITSPRITE      JML IINITSPRITE
.3810dc	5c 8f 10 39	jmp $39108f	INITCODEC       JML IINITCODEC
.3810e0	5c 0b 11 39	jmp $39110b	RESETCODEC      JML IRESETCODEC
.3810e4	5c 79 11 39	jmp $391179	BMP_PARSER      JML IBMP_PARSER
.3810e8	5c 2e 11 39	jmp $39112e	BM_FILL_SCREEN  JML IBM_FILL_SCREEN
.3810ec	5c bd 34 39	jmp $3934bd	OPL2_TONE_TEST  JML IOPL2_TONE_TEST
.3810f0	5c 0e 50 39	jmp $39500e	F_OPEN          JML IF_OPEN         ; open a file for reading/writing/creating
.3810f4	5c a1 50 39	jmp $3950a1	F_CREATE        JML IF_CREATE       ; create a new file
.3810f8	5c db 50 39	jmp $3950db	F_CLOSE         JML IF_CLOSE        ; close a file (make sure last cluster is written)
.3810fc	5c 68 51 39	jmp $395168	F_WRITE         JML IF_WRITE        ; write the current cluster to the file
.381100	5c 14 51 39	jmp $395114	F_READ          JML IF_READ         ; read the next cluster from the file
.381104	5c 0e 52 39	jmp $39520e	F_DELETE        JML IF_DELETE       ; delete a file / directory
.381108	5c d0 51 39	jmp $3951d0	F_DIROPEN       JML IF_DIROPEN      ; open a directory and seek the first directory entry
.38110c	5c 0a 52 39	jmp $39520a	F_DIRNEXT       JML IF_DIRNEXT      ; seek to the next directory of an open directory
.381110	5c a7 52 39	jmp $3952a7	F_DIRREAD       JML IF_DIRREAD      ; Read the directory entry for the specified file
.381114	5c ce 52 39	jmp $3952ce	F_DIRWRITE      JML IF_DIRWRITE     ; Write any changes in the current directory cluster back to the drive
.381118	5c d2 52 39	jmp $3952d2	F_LOAD          JML IF_LOAD         ; load a binary file into memory, supports multiple file formats
.38111c	5c b3 54 39	jmp $3954b3	F_SAVE          JML IF_SAVE         ; Save memory to a binary file
.381120	5c 87 3e 39	jmp $393e87	CMDBLOCK        JML ICMDBLOCK       ; Send a command to a block device
.381124	5c 4c 55 39	jmp $39554c	F_RUN           JML IF_RUN          ; Load an run a binary file
.381128	5c 01 42 39	jmp $394201	F_MOUNT         JML DOS_MOUNT       ; Mount the designated block device

;******  Return to file: src\kernel.asm


;******  Processing file: src\Interrupt_Handler.asm

.38112c					IRQ_HANDLER
.38112c	e2 20		sep #$20	                SEP #$20        ; set A short
.38112e	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381132	c9 00		cmp #$00	                CMP #$00
.381134	f0 4a		beq $381180	                BEQ CHECK_PENDING_REG1
.381136	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.38113a	29 01		and #$01	                AND #FNX0_INT00_SOF
.38113c	c9 01		cmp #$01	                CMP #FNX0_INT00_SOF
.38113e	d0 09		bne $381149	                BNE SERVICE_NEXT_IRQ2
.381140	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381144	20 ea 11	jsr $3811ea	                JSR SOF_INTERRUPT
.381147	e2 20		sep #$20	                SEP #$20        ; set A short
.381149					SERVICE_NEXT_IRQ2
.381149	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.38114d	29 04		and #$04	                AND #FNX0_INT02_TMR0
.38114f	c9 04		cmp #$04	                CMP #FNX0_INT02_TMR0
.381151	d0 09		bne $38115c	                BNE SERVICE_NEXT_IRQ6
.381153	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381157	20 21 12	jsr $381221	                JSR TIMER0_INTERRUPT
.38115a	e2 20		sep #$20	                SEP #$20        ; set A short
.38115c					SERVICE_NEXT_IRQ6
.38115c	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381160	29 40		and #$40	                AND #FNX0_INT06_FDC
.381162	c9 40		cmp #$40	                CMP #FNX0_INT06_FDC
.381164	d0 09		bne $38116f	                BNE SERVICE_NEXT_IRQ7
.381166	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.38116a	20 7c 12	jsr $38127c	                JSR FDC_INTERRUPT
.38116d	e2 20		sep #$20	                SEP #$20        ; set A short
.38116f					SERVICE_NEXT_IRQ7
.38116f	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381173	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.381175	c9 80		cmp #$80	                CMP #FNX0_INT07_MOUSE
.381177	d0 07		bne $381180	                BNE CHECK_PENDING_REG1
.381179	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.38117d	20 3b 12	jsr $38123b	                JSR MOUSE_INTERRUPT
.381180					CHECK_PENDING_REG1
.381180	e2 20		sep #$20	                SEP #$20        ; set A short
.381182	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381186	c9 00		cmp #$00	                CMP #$00
.381188	f0 5d		beq $3811e7	                BEQ EXIT_IRQ_HANDLE
.38118a					SERVICE_NEXT_IRQ8
.38118a	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.38118e	29 01		and #$01	                AND #FNX1_INT00_KBD
.381190	c9 01		cmp #$01	                CMP #FNX1_INT00_KBD
.381192	d0 09		bne $38119d	                BNE SERVICE_NEXT_IRQ11
.381194	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.381198	20 b4 12	jsr $3812b4	                JSR KEYBOARD_INTERRUPT
.38119b	e2 20		sep #$20	                SEP #$20        ; set A short
.38119d					SERVICE_NEXT_IRQ11
.38119d	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3811a1	29 08		and #$08	                AND #FNX1_INT03_COM2
.3811a3	c9 08		cmp #$08	                CMP #FNX1_INT03_COM2
.3811a5	d0 09		bne $3811b0	                BNE SERVICE_NEXT_IRQ12
.3811a7	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811ab	20 87 12	jsr $381287	                JSR COM2_INTERRUPT
.3811ae	e2 20		sep #$20	                SEP #$20        ; set A short
.3811b0					SERVICE_NEXT_IRQ12
.3811b0	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3811b4	29 10		and #$10	                AND #FNX1_INT04_COM1
.3811b6	c9 10		cmp #$10	                CMP #FNX1_INT04_COM1
.3811b8	d0 09		bne $3811c3	                BNE SERVICE_NEXT_IRQ13
.3811ba	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811be	20 92 12	jsr $381292	                JSR COM1_INTERRUPT
.3811c1	e2 20		sep #$20	                SEP #$20        ; set A short
.3811c3					SERVICE_NEXT_IRQ13
.3811c3	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3811c7	29 20		and #$20	                AND #FNX1_INT05_MPU401
.3811c9	c9 20		cmp #$20	                CMP #FNX1_INT05_MPU401
.3811cb	d0 09		bne $3811d6	                BNE SERVICE_NEXT_IRQ14
.3811cd	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811d1	20 9d 12	jsr $38129d	                JSR MPU401_INTERRUPT
.3811d4	e2 20		sep #$20	                SEP #$20        ; set A short
.3811d6					SERVICE_NEXT_IRQ14
.3811d6	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3811da	29 40		and #$40	                AND #FNX1_INT06_LPT
.3811dc	c9 40		cmp #$40	                CMP #FNX1_INT06_LPT
.3811de	d0 07		bne $3811e7	                BNE EXIT_IRQ_HANDLE
.3811e0	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811e4	20 a8 12	jsr $3812a8	                JSR LPT1_INTERRUPT
.3811e7					EXIT_IRQ_HANDLE
.3811e7	c2 30		rep #$30	                REP #$30        ; set A&X long
.3811e9	6b		rtl		                RTL
.3811ea					SOF_INTERRUPT
.3811ea	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.3811ee	29 01		and #$01	                AND #FNX0_INT00_SOF
.3811f0	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.3811f4	c2 20		rep #$20	                REP #$20        ; set A long
.3811f6	af 4e e0 38	lda $38e04e	                LDA @l FDC_MOTOR_TIMER          ; Check the FDC motor count-down timer
.3811fa	f0 0b		beq $381207	                BEQ sof_timeout                 ; If it's zero, check for the watchdog timeout
.3811fc	3a		dec a		                DEC A                           ; Otherwise, decrement it...
.3811fd	8f 4e e0 38	sta $38e04e	                STA @l FDC_MOTOR_TIMER
.381201	d0 04		bne $381207	                BNE sof_timeout                 ; If it's not zero, check for the watchdog timeout
.381203	22 cb 5c 39	jsl $395ccb	                JSL FDC_Motor_Off               ; Otherwise, turn off the motor
.381207					sof_timeout
.381207	e2 20		sep #$20	                SEP #$20        ; set A short
.381209	af 2d 03 00	lda $00032d	                LDA @l BIOS_TIMER               ; Check the BIOS_TIMER
.38120d	f0 11		beq $381220	                BEQ sof_int_done                ; If it's 0, we don't do anything
.38120f	3a		dec a		                DEC A                           ; Count down one tick
.381210	8f 2d 03 00	sta $00032d	                STA @l BIOS_TIMER
.381214	d0 0a		bne $381220	                BNE sof_int_done                ; If not 0, we're done
.381216	af 2c 03 00	lda $00032c	                LDA @l BIOS_FLAGS               ; Otherwise: flag a time out event
.38121a	09 80		ora #$80	                ORA #BIOS_TIMEOUT
.38121c	8f 2c 03 00	sta $00032c	                STA @l BIOS_FLAGS
.381220	60		rts		sof_int_done    RTS
.381221					TIMER0_INTERRUPT
.381221	e2 20		sep #$20	                SEP #$20        ; set A short
.381223	af 05 07 00	lda $000705	                LDA @l TIMERFLAGS               ; Flag that the interrupt has happened
.381227	09 80		ora #$80	                ORA #TIMER0TRIGGER
.381229	8f 05 07 00	sta $000705	                STA @l TIMERFLAGS
.38122d	60		rts		                RTS
.38122e					TIMER2_INTERRUPT
.38122e	e2 20		sep #$20	                SEP #$20        ; set A short
.381230	af 05 07 00	lda $000705	                LDA @l TIMERFLAGS               ; Flag that the interrupt has happened
.381234	09 20		ora #$20	                ORA #TIMER2TRIGGER
.381236	8f 05 07 00	sta $000705	                STA @l TIMERFLAGS
.38123a	60		rts		                RTS
.38123b					MOUSE_INTERRUPT
.38123b	e2 20		sep #$20	                SEP #$20        ; set A short
.38123d	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381241	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.381243	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381247	af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF
.38124b	a2 00 00	ldx #$0000	                LDX #$0000
.38124e	e2 10		sep #$10	                SEP #$10        ; set X short
.381250	a6 e0		ldx $e0		                LDX MOUSE_PTR
.381252	9f 06 07 af	sta $af0706,x	                STA @lMOUSE_PTR_BYTE0, X
.381256	e8		inx		                INX
.381257	e0 03		cpx #$03	                CPX #$03
.381259	d0 1c		bne $381277	                BNE EXIT_FOR_NEXT_VALUE
.38125b	af 02 07 af	lda $af0702	                LDA @lMOUSE_PTR_X_POS_L
.38125f	85 e1		sta $e1		                STA MOUSE_POS_X_LO
.381261	af 03 07 af	lda $af0703	                LDA @lMOUSE_PTR_X_POS_H
.381265	85 e2		sta $e2		                STA MOUSE_POS_X_HI
.381267	af 04 07 af	lda $af0704	                LDA @lMOUSE_PTR_Y_POS_L
.38126b	85 e3		sta $e3		                STA MOUSE_POS_Y_LO
.38126d	af 05 07 af	lda $af0705	                LDA @lMOUSE_PTR_Y_POS_H
.381271	85 e4		sta $e4		                STA MOUSE_POS_Y_HI
.381273	e2 20		sep #$20	                SEP #$20        ; set A short
.381275	a2 00		ldx #$00	                LDX #$00
.381277					EXIT_FOR_NEXT_VALUE
.381277	86 e0		stx $e0		                STX MOUSE_PTR
.381279	c2 10		rep #$10	                REP #$10        ; set X long
.38127b	60		rts		                RTS
.38127c					FDC_INTERRUPT
.38127c	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381280	29 40		and #$40	                AND #FNX0_INT06_FDC
.381282	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381286	60		rts		                RTS
.381287					COM2_INTERRUPT
.381287	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.38128b	29 08		and #$08	                AND #FNX1_INT03_COM2
.38128d	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.381291	60		rts		                RTS
.381292					COM1_INTERRUPT
.381292	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381296	29 10		and #$10	                AND #FNX1_INT04_COM1
.381298	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.38129c	60		rts		                RTS
.38129d					MPU401_INTERRUPT
.38129d	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3812a1	29 20		and #$20	                AND #FNX1_INT05_MPU401
.3812a3	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3812a7	60		rts		                RTS
.3812a8					LPT1_INTERRUPT
.3812a8	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3812ac	29 40		and #$40	                AND #FNX1_INT06_LPT
.3812ae	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3812b2	60		rts		                RTS
.3812b3					NMI_HANDLER
.3812b3	6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\keyboard.asm

.3812b4					KEYBOARD_INTERRUPT
.3812b4	48		pha		                PHA             ; begin setdp macro
.3812b5	08		php		                PHP
.3812b6	c2 20		rep #$20	                REP #$20        ; set A long
.3812b8	a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.3812bb	5b		tcd		                TCD
.3812bc	28		plp		                PLP
.3812bd	68		pla		                PLA             ; end setdp macro
.3812be	a2 00 00	ldx #$0000	                ldx #$0000
.3812c1	e2 10		sep #$10	                SEP #$10        ; set X short
.3812c3	e2 20		sep #$20	                SEP #$20        ; set A short
.3812c5	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3812c9	29 01		and #$01	                AND #FNX1_INT00_KBD
.3812cb	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3812cf					IRQ_HANDLER_FETCH
.3812cf	af 60 10 af	lda $af1060	                LDA @lKBD_INPT_BUF      ; Get Scan Code from KeyBoard
.3812d3	85 88		sta $0f88	                STA KEYBOARD_SC_TMP     ; Save Code Immediately
.3812d5	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the Prefix was picked up before
.3812d7	29 80		and #$80	                AND #$80
.3812d9	c9 80		cmp #$80	                CMP #$80
.3812db	d0 10		bne $3812ed	                BNE CHK_LSHIFT          ; No: do normal scan-code checks
.3812dd	a5 87		lda $0f87	PREFIX_ON       LDA KEYBOARD_SC_FLG     ; Otherwise: clear prefix
.3812df	29 7f		and #$7f	                AND #$7F
.3812e1	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3812e3	a5 88		lda $0f88	                LDA KEYBOARD_SC_TMP     ; Get the prefixed scan-code's character
.3812e5	aa		tax		                TAX
.3812e6	bf 80 6f 39	lda $396f80,x	                LDA @lScanCode_Prefix_Set1, x
.3812ea	4c 90 13	jmp $381390	                JMP KB_WR_2_SCREEN      ; And save it
.3812ed	a5 88		lda $0f88	CHK_LSHIFT      LDA KEYBOARD_SC_TMP
.3812ef	c9 2a		cmp #$2a	                CMP #$2A                ; Left Shift Pressed
.3812f1	d0 03		bne $3812f6	                BNE NOT_KB_SET_LSHIFT
.3812f3	82 ad 00	brl $3813a3	                BRL KB_SET_SHIFT
.3812f6					NOT_KB_SET_LSHIFT
.3812f6	c9 aa		cmp #$aa	                CMP #$AA                ; Left Shift Unpressed
.3812f8	d0 03		bne $3812fd	                BNE NOT_KB_CLR_LSHIFT
.3812fa	82 af 00	brl $3813ac	                BRL KB_CLR_SHIFT
.3812fd					NOT_KB_CLR_LSHIFT
.3812fd	c9 36		cmp #$36	                CMP #$36                ; Right Shift Pressed
.3812ff	d0 03		bne $381304	                BNE NOT_KB_SET_RSHIFT
.381301	82 9f 00	brl $3813a3	                BRL KB_SET_SHIFT
.381304					NOT_KB_SET_RSHIFT
.381304	c9 b6		cmp #$b6	                CMP #$B6                ; Right Shift Unpressed
.381306	d0 03		bne $38130b	                BNE NOT_KB_CLR_RSHIFT
.381308	82 a1 00	brl $3813ac	                BRL KB_CLR_SHIFT
.38130b					NOT_KB_CLR_RSHIFT
.38130b	c9 1d		cmp #$1d	                CMP #$1D                ; Left CTRL pressed
.38130d	d0 03		bne $381312	                BNE NOT_KB_SET_CTRL
.38130f	82 a3 00	brl $3813b5	                BRL KB_SET_CTRL
.381312					NOT_KB_SET_CTRL
.381312	c9 9d		cmp #$9d	                CMP #$9D                ; Left CTRL Unpressed
.381314	d0 03		bne $381319	                BNE NOT_KB_CLR_CTRL
.381316	82 a5 00	brl $3813be	                BRL KB_CLR_CTRL
.381319					NOT_KB_CLR_CTRL
.381319	c9 38		cmp #$38	                CMP #$38                ; Left ALT Pressed
.38131b	d0 03		bne $381320	                BNE NOT_KB_SET_ALT
.38131d	82 a7 00	brl $3813c7	                BRL KB_SET_ALT
.381320					NOT_KB_SET_ALT
.381320	c9 b8		cmp #$b8	                CMP #$B8                ; Left ALT Unpressed
.381322	d0 03		bne $381327	                BNE NOT_KB_CLR_ALT
.381324	82 a9 00	brl $3813d0	                BRL KB_CLR_ALT
.381327	c9 e0		cmp #$e0	NOT_KB_CLR_ALT  CMP #$E0                ; Prefixed scan code
.381329	d0 03		bne $38132e	                BNE NOT_PREFIXED
.38132b	82 ab 00	brl $3813d9	                BRL KB_SET_PREFIX
.38132e	c9 45		cmp #$45	NOT_PREFIXED    CMP #$45                ; Numlock Pressed
.381330	d0 03		bne $381335	                BNE NOT_KB_SET_NUM
.381332	82 b6 00	brl $3813eb	                BRL KB_TOG_NUMLOCK
.381335	c9 46		cmp #$46	NOT_KB_SET_NUM  CMP #$46                ; Scroll Lock Pressed
.381337	d0 03		bne $38133c	                BNE NOT_KB_SET_SCR
.381339	82 a6 00	brl $3813e2	                BRL KB_TOG_SCRLOCK
.38133c	c9 3a		cmp #$3a	NOT_KB_SET_SCR  CMP #$3A                ; Caps Lock Pressed
.38133e	d0 03		bne $381343	                BNE NOT_KB_CAPSLOCK
.381340	82 bc 00	brl $3813ff	                BRL KB_TOG_CAPLOCK
.381343	c9 58		cmp #$58	NOT_KB_CAPSLOCK CMP #$58                ; F12 Pressed
.381345	d0 09		bne $381350	                BNE KB_UNPRESSED
.381347	a9 60		lda #$60	                LDA #KB_CREDITS         ; Yes: flag that the CREDITS key has been pressed
.381349	8f 8a 0f 00	sta $000f8a	                STA @lKEYFLAG
.38134d	82 b5 00	brl $381405	                BRL KB_CHECK_B_DONE
.381350	29 80		and #$80	KB_UNPRESSED    AND #$80                ; See if the Scan Code is press or Depressed
.381352	c9 80		cmp #$80	                CMP #$80                ; Depress Status - We will not do anything at this point
.381354	d0 03		bne $381359	                BNE KB_NORM_SC
.381356	82 ac 00	brl $381405	                BRL KB_CHECK_B_DONE
.381359	a5 88		lda $0f88	KB_NORM_SC      LDA KEYBOARD_SC_TMP       ;
.38135b	aa		tax		                TAX
.38135c	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the SHIFT Key is being Pushed
.38135e	29 10		and #$10	                AND #$10
.381360	c9 10		cmp #$10	                CMP #$10
.381362	f0 17		beq $38137b	                BEQ SHIFT_KEY_ON
.381364	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the CTRL Key is being Pushed
.381366	29 20		and #$20	                AND #$20
.381368	c9 20		cmp #$20	                CMP #$20
.38136a	f0 16		beq $381382	                BEQ CTRL_KEY_ON
.38136c	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the ALT Key is being Pushed
.38136e	29 40		and #$40	                AND #$40
.381370	c9 40		cmp #$40	                CMP #$40
.381372	f0 15		beq $381389	                BEQ ALT_KEY_ON
.381374	bf 00 6d 39	lda $396d00,x	                LDA @lScanCode_Press_Set1, x
.381378	82 15 00	brl $381390	                BRL KB_WR_2_SCREEN
.38137b	bf 80 6d 39	lda $396d80,x	SHIFT_KEY_ON    LDA @lScanCode_Shift_Set1, x
.38137f	82 0e 00	brl $381390	                BRL KB_WR_2_SCREEN
.381382	bf 00 6e 39	lda $396e00,x	CTRL_KEY_ON     LDA @lScanCode_Ctrl_Set1, x
.381386	82 07 00	brl $381390	                BRL KB_WR_2_SCREEN
.381389	bf 80 6e 39	lda $396e80,x	ALT_KEY_ON      LDA @lScanCode_Alt_Set1, x
.38138d	82 00 00	brl $381390	                BRL KB_WR_2_SCREEN
.381390	c9 18		cmp #$18	KB_WR_2_SCREEN  CMP #$18                ; Is it SysRq?
.381392	d0 03		bne $381397	                BNE savechar
.381394	4c 15 14	jmp $381415	                JMP programmerKey       ; Yes: trigger the programmer key
.381397	48		pha		savechar        PHA
.381398	c2 10		rep #$10	                REP #$10        ; set X long
.38139a	20 21 14	jsr $381421	                JSR SAVEKEY
.38139d	e2 20		sep #$20	                SEP #$20        ; set A short
.38139f	68		pla		                PLA
.3813a0	4c 05 14	jmp $381405	                JMP KB_CHECK_B_DONE
.3813a3	a5 87		lda $0f87	KB_SET_SHIFT    LDA KEYBOARD_SC_FLG
.3813a5	09 10		ora #$10	                ORA #$10
.3813a7	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813a9	4c 05 14	jmp $381405	                JMP KB_CHECK_B_DONE
.3813ac	a5 87		lda $0f87	KB_CLR_SHIFT    LDA KEYBOARD_SC_FLG
.3813ae	29 ef		and #$ef	                AND #$EF
.3813b0	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813b2	4c 05 14	jmp $381405	                JMP KB_CHECK_B_DONE
.3813b5	a5 87		lda $0f87	KB_SET_CTRL     LDA KEYBOARD_SC_FLG
.3813b7	09 20		ora #$20	                ORA #$20
.3813b9	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813bb	4c 05 14	jmp $381405	                JMP KB_CHECK_B_DONE
.3813be	a5 87		lda $0f87	KB_CLR_CTRL     LDA KEYBOARD_SC_FLG
.3813c0	29 df		and #$df	                AND #$DF
.3813c2	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813c4	4c 05 14	jmp $381405	                JMP KB_CHECK_B_DONE
.3813c7	a5 87		lda $0f87	KB_SET_ALT      LDA KEYBOARD_SC_FLG
.3813c9	09 40		ora #$40	                ORA #$40
.3813cb	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813cd	4c 05 14	jmp $381405	                JMP KB_CHECK_B_DONE
.3813d0	a5 87		lda $0f87	KB_CLR_ALT      LDA KEYBOARD_SC_FLG
.3813d2	29 bf		and #$bf	                AND #$BF
.3813d4	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813d6	4c 05 14	jmp $381405	                JMP KB_CHECK_B_DONE
.3813d9	a5 87		lda $0f87	KB_SET_PREFIX   LDA KEYBOARD_SC_FLG
.3813db	09 80		ora #$80	                ORA #$80
.3813dd	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813df	4c 05 14	jmp $381405	                JMP KB_CHECK_B_DONE
.3813e2	a5 89		lda $0f89	KB_TOG_SCRLOCK  LDA KEYBOARD_LOCKS
.3813e4	49 01		eor #$01	                EOR #KB_SCROLL_LOCK         ; toggle the Scroll Lock flag
.3813e6	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.3813e8	4c 05 14	jmp $381405	                JMP KB_CHECK_B_DONE
.3813eb	a5 87		lda $0f87	KB_TOG_NUMLOCK  LDA KEYBOARD_SC_FLG         ; Check flags...
.3813ed	29 60		and #$60	                AND #$60                    ; ... is control-alt pressed?
.3813ef	c9 60		cmp #$60	                CMP #$60
.3813f1	d0 03		bne $3813f6	                BNE KB_TOG_NUMLOC2
.3813f3	82 63 ff	brl $381359	                BRL KB_NORM_SC              ; No: treat as a BREAK key
.3813f6	a5 89		lda $0f89	KB_TOG_NUMLOC2  LDA KEYBOARD_LOCKS
.3813f8	49 02		eor #$02	                EOR #KB_NUM_LOCK            ; toggle the Num Lock flag
.3813fa	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.3813fc	4c 05 14	jmp $381405	                JMP KB_CHECK_B_DONE
.3813ff	a5 89		lda $0f89	KB_TOG_CAPLOCK  LDA KEYBOARD_LOCKS
.381401	49 04		eor #$04	                EOR #KB_CAPS_LOCK           ; toggle the Caps Lock flag
.381403	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.381405					KB_CHECK_B_DONE
.381405	af 64 10 af	lda $af1064	                LDA STATUS_PORT
.381409	29 01		and #$01	                AND #OUT_BUF_FULL           ; Test bit $01 (if 1, Full)
.38140b	c9 01		cmp #$01	                CMP #OUT_BUF_FULL           ; if Still Byte in the Buffer, fetch it out
.38140d	d0 03		bne $381412	                BNE SET_LED
.38140f	4c cf 12	jmp $3812cf	                JMP IRQ_HANDLER_FETCH
.381412					SET_LED
.381412					KB_DONE
.381412	c2 30		rep #$30	                REP #$30        ; set A&X long
.381414	60		rts		                RTS
.381415					programmerKey
.381415	c2 30		rep #$30	                REP #$30        ; set A&X long
.381417	68		pla		                PLA                     ; Get and throw-away the return address to the interrupt handler
.381418	2b		pld		                PLD                     ; Restore the registers that were present when the handler was invoked
.381419	ab		plb		                PLB
.38141a	7a		ply		                PLY
.38141b	fa		plx		                PLX
.38141c	68		pla		                PLA
.38141d	5c 08 10 38	jmp $381008	                JML BREAK               ; And go to the BRK handler directly to open the monitor
.381421					SAVEKEY
.381421	e2 20		sep #$20	                SEP #$20        ; set A short
.381423	48		pha		                PHA                     ; Save the character
.381424	a5 89		lda $0f89	                LDA KEYBOARD_LOCKS      ; Check the keyboard lock flags
.381426	29 04		and #$04	                AND #KB_CAPS_LOCK       ; Is CAPS lock on?
.381428	f0 0d		beq $381437	                BEQ no_caps             ; No... just use the character as-is
.38142a	68		pla		                PLA                     ; Get the character back
.38142b	c9 61		cmp #$61	                CMP #'a'                ; Is it < 'a'
.38142d	90 09		bcc $381438	                BLT check_break         ; Yes: just use as-is
.38142f	c9 7b		cmp #$7b	                CMP #'z'+1              ; Is it > 'z'
.381431	b0 05		bcs $381438	                BGE check_break         ; Yes: just us as-is
.381433	29 df		and #$df	                AND #%11011111          ; Conver to upper case
.381435	80 01		bra $381438	                BRA check_break
.381437	68		pla		no_caps         PLA                     ; Restore the character
.381438	c9 00		cmp #$00	check_break     CMP #0
.38143a	f0 18		beq $381454	                BEQ done
.38143c	c9 03		cmp #$03	                CMP #CHAR_CTRL_C        ; Is it CTRL-C?
.38143e	f0 15		beq $381455	                BEQ flag_break          ; Yes: flag a break
.381440	a6 8d		ldx $0f8d	no_break        LDX KEY_BUFFER_WPOS     ; So the Receive Character is saved in the Buffer
.381442	e0 80 00	cpx #$0080	                CPX #KEY_BUFFER_SIZE    ; Make sure we haven't been overboard.
.381445	b0 0d		bcs $381454	                BCS done                ; Stop storing - An error should ensue here...
.381447	9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER,X
.38144b	e8		inx		                INX
.38144c	86 8d		stx $0f8d	                STX KEY_BUFFER_WPOS
.38144e	a9 00		lda #$00	                LDA #$00
.381450	9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER, X       ; Store a EOL in the following location for good measure
.381454	60		rts		done            RTS
.381455					flag_break
.381455	e2 20		sep #$20	                SEP #$20        ; set A short
.381457	a9 80		lda #$80	                LDA #KB_CTRL_C          ; Flag that an interrupt key has been pressed
.381459	85 8a		sta $0f8a	                STA KEYFLAG             ; The interpreter should see this soon and throw a BREAK
.38145b	60		rts		                RTS
.38145c					KBD_GETC
.38145c	da		phx		                PHX
.38145d	0b		phd		                PHD
.38145e	08		php		                PHP
.38145f	48		pha		                PHA             ; begin setdp macro
.381460	08		php		                PHP
.381461	c2 20		rep #$20	                REP #$20        ; set A long
.381463	a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.381466	5b		tcd		                TCD
.381467	28		plp		                PLP
.381468	68		pla		                PLA             ; end setdp macro
.381469	e2 20		sep #$20	                SEP #$20        ; set A short
.38146b	c2 10		rep #$10	                REP #$10        ; set X long
.38146d	58		cli		                CLI                     ; Make sure interrupts can happen
.38146e	af 8a 0f 00	lda $000f8a	get_wait        LDA @lKEYFLAG           ; Check the keyboard control flag
.381472	29 60		and #$60	                AND #KB_CREDITS         ; Are the credits flagged?
.381474	c9 60		cmp #$60	                CMP #KB_CREDITS
.381476	d0 0a		bne $381482	                BNE check_buffer        ; No: check the key buffer
.381478	a9 00		lda #$00	                LDA #0                  ; Yes: clear the flags
.38147a	8f 8a 0f 00	sta $000f8a	                STA @lKEYFLAG
.38147e	22 e8 13 39	jsl $3913e8	                JSL SHOW_CREDITS        ; Then show the credits screen and wait for a key press
.381482	a6 8b		ldx $0f8b	check_buffer    LDX KEY_BUFFER_RPOS     ; Is KEY_BUFFER_RPOS < KEY_BUFFER_WPOS
.381484	e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS
.381486	90 02		bcc $38148a	                BCC read_buff           ; Yes: a key is present, read it
.381488	80 e4		bra $38146e	                BRA get_wait            ; Otherwise, keep waiting
.38148a	78		sei		read_buff       SEI                     ; Don't interrupt me!
.38148b	b5 00		lda $0f00,x	                LDA KEY_BUFFER,X        ; Get the key
.38148d	e8		inx		                INX                     ; And move to the next key
.38148e	e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS     ; Did we just read the last key?
.381490	f0 07		beq $381499	                BEQ reset_indexes       ; Yes: return to 0 position
.381492	86 8b		stx $0f8b	                STX KEY_BUFFER_RPOS     ; Otherwise: Update the read index
.381494	58		cli		                CLI
.381495	28		plp		done            PLP                     ; Restore status and interrupts
.381496	2b		pld		                PLD
.381497	fa		plx		                PLX
.381498	6b		rtl		                RTL
.381499	64 8b		stz $0f8b	reset_indexes   STZ KEY_BUFFER_RPOS     ; Reset read index to the beginning
.38149b	64 8d		stz $0f8d	                STZ KEY_BUFFER_WPOS     ; Reset the write index to the beginning
.38149d	80 f6		bra $381495	                BRA done

;******  Return to file: src\kernel.asm

.390400					IBOOT
.390400	18		clc		                CLC                       ; clear the carry flag
.390401	fb		xce		                XCE                       ; move carry to emulation flag.
.390402	78		sei		                SEI
.390403	c2 30		rep #$30	                REP #$30        ; set A&X long
.390405	a9 ff fe	lda #$feff	                LDA #STACK_END            ; initialize stack pointer
.390408	1b		tcs		                TAS
.390409	48		pha		                PHA             ; begin setdp macro
.39040a	08		php		                PHP
.39040b	c2 20		rep #$20	                REP #$20        ; set A long
.39040d	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390410	5b		tcd		                TCD
.390411	28		plp		                PLP
.390412	68		pla		                PLA             ; end setdp macro
.390413	e2 20		sep #$20	                SEP #$20        ; set A short
.390415	a2 00 00	ldx #$0000	                LDX #$0000
.390418	a9 00		lda #$00	                LDA #$00
.39041a					CLEAR_MEM_LOOP
.39041a	95 00		sta $00,x	                STA $0000, X
.39041c	e8		inx		                INX
.39041d	e0 00 01	cpx #$0100	                CPX #$0100
.390420	d0 f8		bne $39041a	                BNE CLEAR_MEM_LOOP
.390422	ea		nop		                NOP
.390423	a9 ff		lda #$ff	                LDA #$FF
.390425	8f 48 01 00	sta $000148	                STA @lINT_EDGE_REG0
.390429	8f 49 01 00	sta $000149	                STA @lINT_EDGE_REG1
.39042d	8f 4a 01 00	sta $00014a	                STA @lINT_EDGE_REG2
.390431	8f 4b 01 00	sta $00014b	                STA @lINT_EDGE_REG3
.390435	8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.390439	8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.39043d	8f 4e 01 00	sta $00014e	                STA @lINT_MASK_REG2
.390441	8f 4f 01 00	sta $00014f	                STA @lINT_MASK_REG3
.390445	22 a5 0f 39	jsl $390fa5	                JSL INITRTC               ; Initialize the RTC
.390449	c2 30		rep #$30	                REP #$30        ; set A&X long
.39044b	a9 00 a0	lda #$a000	                LDA #<>SCREEN_PAGE0      ; store the initial screen buffer location
.39044e	85 0c		sta $0c		                STA SCREENBEGIN
.390450	85 17		sta $17		                STA CURSORPOS
.390452	a9 00 c0	lda #$c000	                LDA #<>CS_COLOR_MEM_PTR   ; Set the initial COLOR cursor position
.390455	85 1f		sta $1f		                STA COLORPOS
.390457	e2 20		sep #$20	                SEP #$20        ; set A short
.390459	a9 af		lda #$af	                LDA #`SCREEN_PAGE0
.39045b	85 0e		sta $0e		                STA SCREENBEGIN+2
.39045d	85 19		sta $19		                STA CURSORPOS+2
.39045f	a9 af		lda #$af	                LDA #`CS_COLOR_MEM_PTR    ; Set the initial COLOR cursor position
.390461	85 21		sta $21		                STA COLORPOS+2
.390463	e2 20		sep #$20	                SEP #$20        ; set A short
.390465	a9 00		lda #$00	                LDA #$00
.390467	8d 87 0f	sta $0f87	                STA KEYBOARD_SC_FLG     ; Clear the Keyboard Flag
.39046a	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.39046c	8f 00 f1 af	sta $aff100	                STA $AFF100
.390470	a9 bf		lda #$bf	                LDA #$BF ; Channel Two - No Atteniation
.390472	8f 00 f1 af	sta $aff100	                STA $AFF100
.390476	a9 df		lda #$df	                LDA #$DF ; Channel Two - No Atteniation
.390478	8f 00 f1 af	sta $aff100	                STA $AFF100
.39047c	a9 ff		lda #$ff	                LDA #$FF ; Channel Two - No Atteniation
.39047e	8f 00 f1 af	sta $aff100	                STA $AFF100
.390482	c2 30		rep #$30	                REP #$30        ; set A&X long
.390484	a2 48 00	ldx #$0048	                LDX #72
.390487	86 0f		stx $0f		                STX COLS_VISIBLE
.390489	a0 34 00	ldy #$0034	                LDY #52
.39048c	84 13		sty $13		                STY LINES_VISIBLE
.39048e	a2 80 00	ldx #$0080	                LDX #128
.390491	86 11		stx $11		                STX COLS_PER_LINE
.390493	a0 40 00	ldy #$0040	                LDY #64
.390496	84 15		sty $15		                STY LINES_MAX
.390498	a9 ed 00	lda #$00ed	                LDA #$ED                  ; Set the default text color to light gray on dark gray
.39049b	85 1e		sta $1e		                STA CURCOLOR
.39049d	22 dc 10 38	jsl $3810dc	                JSL INITCODEC
.3904a1	22 b0 10 38	jsl $3810b0	                JSL INITSUPERIO
.3904a5	22 c4 10 38	jsl $3810c4	                JSL INITGAMMATABLE
.3904a9	22 c8 10 38	jsl $3810c8	                JSL INITALLLUT
.3904ad	22 ac 10 38	jsl $3810ac	                JSL INITCHLUT
.3904b1	22 16 0d 39	jsl $390d16	                JSL INITMOUSEPOINTER
.3904b5	22 bc 10 38	jsl $3810bc	                JSL INITCURSOR
.3904b9	22 cc 10 38	jsl $3810cc	                JSL INITVKYTXTMODE
.3904bd	22 eb 0c 39	jsl $390ceb	                JSL IINITFONTSET
.3904c1	22 d9 09 39	jsl $3909d9	                JSL ICLRSCREEN  ; Clear Screen and Set a standard color in Color Memory
.3904c5	a9 01 00	lda #$0001	                LDA #CHAN_COM1    ; Initialize COM1
.3904c8	22 d7 55 39	jsl $3955d7	                JSL UART_SELECT
.3904cc	22 43 56 39	jsl $395643	                JSL UART_INIT
.3904d0	a9 02 00	lda #$0002	                LDA #CHAN_COM2    ; Initialize COM2
.3904d3	22 d7 55 39	jsl $3955d7	                JSL UART_SELECT
.3904d7	22 43 56 39	jsl $395643	                JSL UART_INIT
.3904db	a9 00 00	lda #$0000	                LDA #0
.3904de	22 38 10 38	jsl $381038	                JSL SETIN
.3904e2	22 3c 10 38	jsl $38103c	                JSL SETOUT
.3904e6	c2 20		rep #$20	                REP #$20        ; set A long
.3904e8	a2 00 00	ldx #$0000	                LDX #0
.3904eb	a0 00 00	ldy #$0000	                LDY #0
.3904ee	22 fa 08 39	jsl $3908fa	                JSL ILOCATE
.3904f2	c2 30		rep #$30	                REP #$30        ; set A&X long
.3904f4					greet
.3904f4	48		pha		                PHA             ; begin setdbr macro
.3904f5	08		php		                PHP
.3904f6	e2 20		sep #$20	                SEP #$20        ; set A short
.3904f8	a9 39		lda #$39	                LDA #`greet_msg
.3904fa	48		pha		                PHA
.3904fb	ab		plb		                PLB
.3904fc	28		plp		                PLP
.3904fd	68		pla		                PLA             ; end setdbr macro
.3904fe	a2 be 67	ldx #$67be	                LDX #<>greet_msg
.390501	22 b0 06 39	jsl $3906b0	                JSL IPRINT       ; print the first line
.390505	22 04 0a 39	jsl $390a04	                JSL ICOLORFLAG  ; This is to set the Color Memory for the Logo
.390509	48		pha		                PHA             ; begin setdp macro
.39050a	08		php		                PHP
.39050b	c2 20		rep #$20	                REP #$20        ; set A long
.39050d	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390510	5b		tcd		                TCD
.390511	28		plp		                PLP
.390512	68		pla		                PLA             ; end setdp macro
.390513	22 b4 10 38	jsl $3810b4	                JSL INITKEYBOARD ;
.390517	e2 20		sep #$20	                SEP #$20        ; set A short
.390519	c2 10		rep #$10	                REP #$10        ; set X long
.39051b	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.39051d	8f 00 f1 af	sta $aff100	                STA $AFF100
.390521	a9 bf		lda #$bf	                LDA #$BF ; Channel Two - No Atteniation
.390523	8f 00 f1 af	sta $aff100	                STA $AFF100
.390527	a9 df		lda #$df	                LDA #$DF ; Channel Two - No Atteniation
.390529	8f 00 f1 af	sta $aff100	                STA $AFF100
.39052d	a9 ff		lda #$ff	                LDA #$FF ; Channel Two - No Atteniation
.39052f	8f 00 f1 af	sta $aff100	                STA $AFF100
.390533	a9 83		lda #$83	                LDA #$83 ; Channel Zero - No Atteniation
.390535	8f 00 f1 af	sta $aff100	                STA $AFF100
.390539	a9 12		lda #$12	                LDA #$12 ; Channel Zero - No Atteniation
.39053b	8f 00 f1 af	sta $aff100	                STA $AFF100
.39053f	a9 90		lda #$90	                LDA #$90 ; Channel One - No Atteniation
.390541	8f 00 f1 af	sta $aff100	                STA $AFF100
.390545	a2 00 40	ldx #$4000	                LDX #16384      ; 400ms
.390548	22 76 13 39	jsl $391376	          		 	JSL ILOOP_MS
.39054c	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.39054e	8f 00 f1 af	sta $aff100	                STA $AFF100
.390552	58		cli		                CLI                   ; Make sure no Interrupt will come and fuck up Init before this point.
.390553	e2 20		sep #$20	                SEP #$20        ; set A short
.390555	c2 10		rep #$10	                REP #$10        ; set X long
.390557	48		pha		                PHA             ; begin setdbr macro
.390558	08		php		                PHP
.390559	e2 20		sep #$20	                SEP #$20        ; set A short
.39055b	a9 39		lda #$39	                LDA #`greet_msg
.39055d	48		pha		                PHA
.39055e	ab		plb		                PLB
.39055f	28		plp		                PLP
.390560	68		pla		                PLA             ; end setdbr macro
.390561	a2 00 00	ldx #$0000	                LDX #0
.390564	bf 00 10 38	lda $381000,x	jmpcopy         LDA @l BOOT,X
.390568	9f 00 10 00	sta $001000,x	                STA @l $001000,X
.39056c	e8		inx		                INX
.39056d	e0 00 10	cpx #$1000	                CPX #$1000
.390570	d0 f2		bne $390564	                BNE jmpcopy
.390572	22 d0 41 39	jsl $3941d0	retry_boot      JSL DOS_INIT          ; Initialize the "disc operating system"
.390576	22 1f 5c 39	jsl $395c1f	                JSL FDC_INIT
.39057a	af 0e e8 af	lda $afe80e	                LDA @lDIP_BOOTMODE    ; {HD_INSTALLED, 5'b0_0000, BOOT_MODE[1], BOOT_MODE[0]}
.39057e	29 03		and #$03	                AND #%00000011        ; Look at the mode bits
.390580	c9 00		cmp #$00	                CMP #DIP_BOOT_IDE     ; DIP set for IDE?
.390582	f0 28		beq $3905ac	                BEQ BOOTIDE           ; Yes: Boot from the IDE
.390584	c9 01		cmp #$01	                CMP #DIP_BOOT_SDCARD  ; DIP set for SD card?
.390586	f0 0b		beq $390593	                BEQ BOOTSDC           ; Yes: try to boot from the SD card
.390588	c9 02		cmp #$02	                CMP #DIP_BOOT_FLOPPY  ; DIP set for floppy?
.39058a	f0 3a		beq $3905c6	                BEQ BOOTFLOPPY        ; Yes: try to boot from the floppy
.39058c	5c 00 00 3a	jmp $3a0000	BOOTBASIC       JML BASIC             ; Cold start of the BASIC interpreter (or its replacement)
.390590	ea		nop		CREDIT_LOCK     NOP
.390591	80 fd		bra $390590	                BRA CREDIT_LOCK
.390593					BOOTSDC
.390593	e2 20		sep #$20	                SEP #$20        ; set A short
.390595	a9 02		lda #$02	                LDA #BIOS_DEV_SD
.390597	8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.39059b	22 01 42 39	jsl $394201	                JSL DOS_MOUNT         ; Mount the SDC
.39059f	90 06		bcc $3905a7	                BCC sdc_error         ; Print an error message if couldn't get anything
.3905a1	22 83 43 39	jsl $394383	                JSL DOS_TESTBOOT      ; Try to boot from the SDC's MBR
.3905a5	80 e5		bra $39058c	                BRA BOOTBASIC         ; If we couldn't fall, into BASIC
.3905a7	a2 9b 6b	ldx #$6b9b	sdc_error       LDX #<>sdc_err_boot   ; Print a message saying SD card booting is not implemented
.3905aa	80 39		bra $3905e5	                BRA PR_BOOT_ERROR
.3905ac					BOOTIDE
.3905ac	e2 20		sep #$20	                SEP #$20        ; set A short
.3905ae	a9 06		lda #$06	                LDA #BIOS_DEV_HD0
.3905b0	8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3905b4	22 01 42 39	jsl $394201	                JSL DOS_MOUNT         ; Mount the IDE drive
.3905b8	90 07		bcc $3905c1	                BCC hdc_error         ; Print an error message if couldn't get anything
.3905ba	22 83 43 39	jsl $394383	                JSL DOS_TESTBOOT      ; Try to boot from the IDE's MBR
.3905be	82 cb ff	brl $39058c	                BRL BOOTBASIC         ; If we couldn't fall, into BASIC
.3905c1	a2 b7 6b	ldx #$6bb7	hdc_error       LDX #<>ide_err_boot   ; Print a message saying SD card booting is not implemented
.3905c4	80 1f		bra $3905e5	                BRA PR_BOOT_ERROR
.3905c6	a2 00 6c	ldx #$6c00	BOOTFLOPPY      LDX #<>fdc_boot
.3905c9	22 b0 06 39	jsl $3906b0	                JSL IPRINT
.3905cd	e2 20		sep #$20	                SEP #$20        ; set A short
.3905cf	a9 00		lda #$00	                LDA #BIOS_DEV_FDC
.3905d1	8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3905d5	22 ad 61 39	jsl $3961ad	                JSL FDC_MOUNT         ; Mount the floppy drive
.3905d9	90 07		bcc $3905e2	                BCC fdc_error         ; Print an error message if couldn't get anything
.3905db	22 83 43 39	jsl $394383	                JSL DOS_TESTBOOT      ; Try to boot from the FDC's MBR
.3905df	82 aa ff	brl $39058c	                BRL BOOTBASIC         ; If we couldn't, fall into BASIC
.3905e2	a2 da 6b	ldx #$6bda	fdc_error       LDX #<>fdc_err_boot   ; Print a message saying SD card booting is not implemented
.3905e5	22 b0 06 39	jsl $3906b0	PR_BOOT_ERROR   JSL IPRINT            ; Print the error message in X
.3905e9	a2 76 6b	ldx #$6b76	                LDX #<>boot_retry     ; Print the boot retry prompt
.3905ec	22 b0 06 39	jsl $3906b0	                JSL IPRINT
.3905f0	22 89 06 39	jsl $390689	boot_wait_key   JSL IGETCHW           ; Wait for a keypress
.3905f4	c9 52		cmp #$52	                CMP #'R'              ; Was "R" pressed?
.3905f6	d0 03		bne $3905fb	                BNE chk_r_lc
.3905f8	82 77 ff	brl $390572	                BRL retry_boot        ; Yes: retry the boot sequence
.3905fb	c9 72		cmp #$72	chk_r_lc        CMP #'r'
.3905fd	d0 03		bne $390602	                BNE chk_b_lc
.3905ff	82 70 ff	brl $390572	                BRL retry_boot
.390602	c9 62		cmp #$62	chk_b_lc        CMP #'b'              ; Was "B" pressed?
.390604	f0 86		beq $39058c	                BEQ BOOTBASIC         ; Yes: try going to BASIC
.390606	c9 42		cmp #$42	                CMP #'B'
.390608	f0 82		beq $39058c	                BEQ BOOTBASIC
.39060a	80 e4		bra $3905f0	                BRA boot_wait_key     ; No: keep waiting
.39060c					IBREAK
.39060c	48		pha		                PHA             ; begin setdp macro
.39060d	08		php		                PHP
.39060e	c2 20		rep #$20	                REP #$20        ; set A long
.390610	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390613	5b		tcd		                TCD
.390614	28		plp		                PLP
.390615	68		pla		                PLA             ; end setdp macro
.390616	68		pla		                PLA             ; Pull .Y and stuff it in the CPUY variable
.390617	8f 48 02 00	sta $000248	                STA CPUY
.39061b	68		pla		                PLA             ; Pull .X and stuff it in the CPUY variable
.39061c	8f 46 02 00	sta $000246	                STA CPUX
.390620	68		pla		                PLA             ; Pull .A and stuff it in the CPUY variable
.390621	8f 44 02 00	sta $000244	                STA CPUA
.390625	68		pla		                PLA
.390626	8f 4c 02 00	sta $00024c	                STA CPUDP       ; Pull Direct page
.39062a	e2 20		sep #$20	                SEP #$20        ; set A short
.39062c	68		pla		                PLA             ; Pull Data Bank (8 bits)
.39062d	8f 4e 02 00	sta $00024e	                STA CPUDBR
.390631	68		pla		                PLA             ; Pull Flags (8 bits)
.390632	8f 4f 02 00	sta $00024f	                STA CPUFLAGS
.390636	c2 20		rep #$20	                REP #$20        ; set A long
.390638	68		pla		                PLA             ; Pull Program Counter (16 bits)
.390639	8f 40 02 00	sta $000240	                STA CPUPC
.39063d	e2 20		sep #$20	                SEP #$20        ; set A short
.39063f	68		pla		                PLA             ; Pull Program Bank (8 bits)
.390640	8f 42 02 00	sta $000242	                STA CPUPBR
.390644	c2 20		rep #$20	                REP #$20        ; set A long
.390646	3b		tsc		                TSA             ; Get the stack
.390647	8f 4a 02 00	sta $00024a	                STA CPUSTACK    ; Store the stack at immediately before the interrupt was asserted
.39064b	a9 ff fe	lda #$feff	                LDA #<>STACK_END   ; initialize stack pointer back to the bootup value
.39064e	1b		tcs		                TAS
.39064f	5c 04 00 3a	jmp $3a0004	                JML MONITOR
.390653					IREADY
.390653	48		pha		                PHA             ; begin setdbr macro
.390654	08		php		                PHP
.390655	e2 20		sep #$20	                SEP #$20        ; set A short
.390657	a9 39		lda #$39	                LDA #`ready_msg
.390659	48		pha		                PHA
.39065a	ab		plb		                PLB
.39065b	28		plp		                PLP
.39065c	68		pla		                PLA             ; end setdbr macro
.39065d	e2 20		sep #$20	                SEP #$20        ; set A short
.39065f	a2 17 6c	ldx #$6c17	                LDX #<>ready_msg
.390662	22 b0 06 39	jsl $3906b0	                JSL IPRINT
.390666					IREADYWAIT
.390666	22 80 06 39	jsl $390680	                JSL IGETCHE
.39066a	80 fa		bra $390666	                BRA IREADYWAIT
.39066c	db		stp		IKEYDOWN        STP             ; Keyboard key pressed
.39066d	db		stp		IRETURN         STP
.39066e	08		php		ISETIN          PHP
.39066f	e2 20		sep #$20	                SEP #$20        ; set A short
.390671	8f 04 07 00	sta $000704	                STA @lCHAN_IN   ; Save the channel number
.390675	28		plp		                PLP
.390676	6b		rtl		                RTL
.390677	08		php		ISETOUT         PHP
.390678	e2 20		sep #$20	                SEP #$20        ; set A short
.39067a	8f 03 07 00	sta $000703	                STA @lCHAN_OUT  ; Save the channel number
.39067e	28		plp		                PLP
.39067f	6b		rtl		                RTL
.390680	22 89 06 39	jsl $390689	IGETCHE         JSL IGETCHW
.390684	22 d0 06 39	jsl $3906d0	                JSL IPUTC
.390688	6b		rtl		                RTL
.390689					IGETCHW
.390689	08		php		                PHP
.39068a	e2 20		sep #$20	                SEP #$20        ; set A short
.39068c	af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.390690	f0 17		beq $3906a9	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.390692	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.390694	f0 09		beq $39069f	                BEQ getc_uart       ; Yes: handle reading from the UART
.390696	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.390698	f0 05		beq $39069f	                BEQ getc_uart       ; Yes: handle reading from the UART
.39069a	a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.39069c	28		plp		                PLP
.39069d	38		sec		                SEC                 ; And return carry set
.39069e	6b		rtl		                RTL
.39069f	22 d7 55 39	jsl $3955d7	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.3906a3	22 8b 56 39	jsl $39568b	                JSL UART_GETC       ; Get the charater from the COM port
.3906a7	80 04		bra $3906ad	                BRA done
.3906a9	22 5c 14 38	jsl $38145c	getc_keyboard   JSL KBD_GETC        ; Get the character from the keyboard
.3906ad	28		plp		done            PLP
.3906ae	18		clc		                CLC                 ; Return carry clear for valid data
.3906af	6b		rtl		                RTL
.3906b0	22 b9 06 39	jsl $3906b9	IPRINT          JSL IPUTS
.3906b4	22 f6 07 39	jsl $3907f6	                JSL IPRINTCR
.3906b8	6b		rtl		                RTL
.3906b9	48		pha		IPUTS           PHA
.3906ba	08		php		                PHP
.3906bb	e2 20		sep #$20	                SEP #$20        ; set A short
.3906bd	c2 10		rep #$10	                REP #$10        ; set X long
.3906bf	bd 00 00	lda $390000,x	iputs1          LDA $0,b,x      ; read from the string
.3906c2	f0 08		beq $3906cc	                BEQ iputs_done
.3906c4	22 d0 06 39	jsl $3906d0	iputs2          JSL IPUTC
.3906c8	e8		inx		iputs3          INX
.3906c9	4c bf 06	jmp $3906bf	                JMP iputs1
.3906cc	e8		inx		iputs_done      INX
.3906cd	28		plp		                PLP
.3906ce	68		pla		                PLA
.3906cf	6b		rtl		                RTL
.3906d0					IPUTC
.3906d0	da		phx		                PHX
.3906d1	5a		phy		                PHY
.3906d2	0b		phd		                PHD
.3906d3	8b		phb		                PHB
.3906d4	08		php		                PHP                 ; stash the flags (we'll be changing M)
.3906d5	48		pha		                PHA             ; begin setdp macro
.3906d6	08		php		                PHP
.3906d7	c2 20		rep #$20	                REP #$20        ; set A long
.3906d9	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3906dc	5b		tcd		                TCD
.3906dd	28		plp		                PLP
.3906de	68		pla		                PLA             ; end setdp macro
.3906df	48		pha		                PHA             ; begin setdbr macro
.3906e0	08		php		                PHP
.3906e1	e2 20		sep #$20	                SEP #$20        ; set A short
.3906e3	a9 00		lda #$00	                LDA #0
.3906e5	48		pha		                PHA
.3906e6	ab		plb		                PLB
.3906e7	28		plp		                PLP
.3906e8	68		pla		                PLA             ; end setdbr macro
.3906e9	e2 20		sep #$20	                SEP #$20        ; set A short
.3906eb	c2 10		rep #$10	                REP #$10        ; set X long
.3906ed	48		pha		                PHA                 ; Save the character to print
.3906ee	af 03 07 00	lda $000703	                LDA @lCHAN_OUT      ; Check the output channel #
.3906f2	f0 16		beq $39070a	                BEQ putc_screen     ; If it's 0: print to the screen
.3906f4	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.3906f6	f0 07		beq $3906ff	                BEQ putc_uart       ; Yes: handle printing to the UART
.3906f8	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.3906fa	f0 03		beq $3906ff	                BEQ putc_uart       ; Yes: handle printing to the UART
.3906fc	68		pla		                PLA                 ; Otherwise, just exit
.3906fd	80 4f		bra $39074e	                BRA done
.3906ff	22 d7 55 39	jsl $3955d7	putc_uart       JSL UART_SELECT     ; Point to the correct UART
.390703	68		pla		                PLA                 ; Recover the character to send
.390704	22 ac 56 39	jsl $3956ac	                JSL UART_PUTC       ; Send the character
.390708	80 44		bra $39074e	                BRA done
.39070a	68		pla		putc_screen     PLA                 ; Get the character to print
.39070b	c9 0a		cmp #$0a	                CMP #CHAR_LF        ; Linefeed moves cursor down one line
.39070d	f0 61		beq $390770	                BEQ go_down
.39070f	c9 20		cmp #$20	                CMP #$20
.390711	90 19		bcc $39072c	                BCC check_ctrl0     ; [$00..$1F]: check for arrows
.390713	c9 7f		cmp #$7f	                CMP #$7F
.390715	f0 3d		beq $390754	                BEQ do_del
.390717	b0 02		bcs $39071b	                BCS check_A0        ; [$20..$7E]: print it
.390719	80 29		bra $390744	                BRA printc
.39071b	c9 a0		cmp #$a0	check_A0        CMP #$A0
.39071d	90 02		bcc $390721	                BCC check_ctrl1
.39071f	80 23		bra $390744	                BRA printc          ; [$A0..$FF]: print it
.390721	c9 91		cmp #$91	check_ctrl1     CMP #CHAR_DOWN      ; If the down arrow key was pressed
.390723	f0 4b		beq $390770	                BEQ go_down         ; ... move the cursor down one row
.390725	c9 9d		cmp #$9d	                CMP #CHAR_LEFT      ; If the left arrow key was pressed
.390727	f0 59		beq $390782	                BEQ go_left         ; ... move the cursor left one column
.390729	4c 4e 07	jmp $39074e	                JMP done
.39072c	c9 09		cmp #$09	check_ctrl0     CMP #CHAR_TAB       ; If it's a TAB...
.39072e	f0 58		beq $390788	                BEQ do_TAB          ; ... move to the next TAB stop
.390730	c9 08		cmp #$08	                CMP #CHAR_BS        ; If it's a backspace...
.390732	f0 2c		beq $390760	                BEQ backspace       ; ... move the cursor back and replace with a space
.390734	c9 0d		cmp #$0d	                CMP #CHAR_CR        ; If the carriage return was pressed
.390736	f0 32		beq $39076a	                BEQ do_cr           ; ... move cursor down and to the first column
.390738	c9 11		cmp #$11	                CMP #CHAR_UP        ; If the up arrow key was pressed
.39073a	f0 3a		beq $390776	                BEQ go_up           ; ... move the cursor up one row
.39073c	c9 1d		cmp #$1d	                CMP #CHAR_RIGHT     ; If the right arrow key was pressed
.39073e	f0 3c		beq $39077c	                BEQ go_right        ; ... move the cursor right one column
.390740	c9 0f		cmp #$0f	                CMP #CHAR_INS       ; If the insert key was pressed
.390742	f0 16		beq $39075a	                BEQ do_ins          ; ... insert a space
.390744	87 17		sta [$17]	printc          STA [CURSORPOS]     ; Save the character on the screen
.390746	a5 1e		lda $1e		                LDA CURCOLOR        ; Set the color based on CURCOLOR
.390748	87 1f		sta [$1f]	                STA [COLORPOS]
.39074a	22 56 08 39	jsl $390856	                JSL ICSRRIGHT       ; And advance the cursor
.39074e	28		plp		done            PLP
.39074f	ab		plb		                PLB
.390750	2b		pld		                PLD
.390751	7a		ply		                PLY
.390752	fa		plx		                PLX
.390753	6b		rtl		                RTL
.390754	22 af 07 39	jsl $3907af	do_del          JSL SCRSHIFTLL      ; Shift the current line left one space into the cursor
.390758	80 f4		bra $39074e	                BRA done
.39075a	22 d2 07 39	jsl $3907d2	do_ins          JSL SCRSHIFTLR      ; Shift the current line right one space from the cursor
.39075e	80 ee		bra $39074e	                BRA done
.390760	22 89 08 39	jsl $390889	backspace       JSL ICSRLEFT
.390764	22 af 07 39	jsl $3907af	                JSL SCRSHIFTLL      ; Shift the current line left one space into the cursor
.390768	80 e4		bra $39074e	                BRA done
.39076a	22 f6 07 39	jsl $3907f6	do_cr           JSL IPRINTCR        ; Move the cursor to the beginning of the next line
.39076e	80 de		bra $39074e	                BRA done
.390770	22 d5 08 39	jsl $3908d5	go_down         JSL ICSRDOWN        ; Move the cursor down one row (might force a scroll)
.390774	80 d8		bra $39074e	                BRA done
.390776	22 af 08 39	jsl $3908af	go_up           JSL ICSRUP          ; Move the cursor up one line
.39077a	80 d2		bra $39074e	                BRA done
.39077c	22 56 08 39	jsl $390856	go_right        JSL ICSRRIGHT       ; Move the cursor right one column
.390780	80 cc		bra $39074e	                BRA done
.390782	22 89 08 39	jsl $390889	go_left         JSL ICSRLEFT        ; Move the cursor left one column
.390786	80 c6		bra $39074e	                BRA done
.390788					do_TAB
.390788	c2 20		rep #$20	                REP #$20        ; set A long
.39078a	a5 1a		lda $1a		                LDA CURSORX         ; Get the current column
.39078c	29 f8 ff	and #$fff8	                AND #$FFF8          ; See which group of 8 it's in
.39078f	18		clc		                CLC
.390790	69 08 00	adc #$0008	                ADC #$0008          ; And move it to the next one
.390793	aa		tax		                TAX
.390794	a4 1c		ldy $1c		                LDY CURSORY
.390796	e2 20		sep #$20	                SEP #$20        ; set A short
.390798	e4 0f		cpx $0f		set_xy          CPX COLS_VISIBLE    ; Check if we're still on screen horizontally
.39079a	90 04		bcc $3907a0	                BCC check_row       ; Yes: check the row
.39079c	a2 00 00	ldx #$0000	                LDX #0              ; No: move to the first column...
.39079f	c8		iny		                INY                 ; ... and the next row
.3907a0	c4 13		cpy $13		check_row       CPY LINES_VISIBLE   ; Check if we're still on the screen vertically
.3907a2	90 05		bcc $3907a9	                BCC do_locate       ; Yes: reposition the cursor
.3907a4	22 46 09 39	jsl $390946	                JSL ISCROLLUP       ; No: scroll the screen
.3907a8	88		dey		                DEY                 ; And set the row to the last one
.3907a9	22 fa 08 39	jsl $3908fa	do_locate       JSL ILOCATE         ; Set the cursor position
.3907ad	80 9f		bra $39074e	                BRA done
.3907af	da		phx		SCRSHIFTLL      PHX
.3907b0	5a		phy		                PHY
.3907b1	48		pha		                PHA
.3907b2	08		php		                PHP
.3907b3	48		pha		                PHA             ; begin setdp macro
.3907b4	08		php		                PHP
.3907b5	c2 20		rep #$20	                REP #$20        ; set A long
.3907b7	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3907ba	5b		tcd		                TCD
.3907bb	28		plp		                PLP
.3907bc	68		pla		                PLA             ; end setdp macro
.3907bd	c2 30		rep #$30	                REP #$30        ; set A&X long
.3907bf	a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.3907c1	a8		tay		                TAY                 ; Set it as the destination
.3907c2	aa		tax		                TAX
.3907c3	e8		inx		                INX                 ; And set the next cell as the source
.3907c4	38		sec		                SEC                 ; Calculate the length of the block to move
.3907c5	a9 7f 00	lda #$007f	                LDA #127            ; as 127 - X
.3907c8	e5 1a		sbc $1a		                SBC CURSORX
.3907ca	54 af af	mvn $af,$af	                MVN $AF, $AF        ; And move the block
.3907cd	28		plp		                PLP
.3907ce	68		pla		                PLA
.3907cf	7a		ply		                PLY
.3907d0	fa		plx		                PLX
.3907d1	6b		rtl		                RTL
.3907d2	da		phx		SCRSHIFTLR      PHX
.3907d3	48		pha		                PHA
.3907d4	08		php		                PHP
.3907d5	c2 30		rep #$30	                REP #$30        ; set A&X long
.3907d7	a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.3907d9	29 80 ff	and #$ff80	                AND #$FF80          ; Mask off the column bits
.3907dc	09 7f 00	ora #$007f	                ORA #$007F          ; And compute the address of the last cell
.3907df	a8		tay		                TAY                 ; And set that as the destination address
.3907e0	3a		dec a		                DEC A               ; Compute the address of the character to the left
.3907e1	aa		tax		                TAX                 ; And make it the source
.3907e2	38		sec		                SEC                 ; Calculate the length of the block to move
.3907e3	a9 7f 00	lda #$007f	                LDA #127            ; as 127 - X
.3907e6	e5 1a		sbc $1a		                SBC CURSORX
.3907e8	44 af af	mvp $af,$af	                MVP $AF, $AF        ; And move the block
.3907eb	e2 20		sep #$20	                SEP #$20        ; set A short
.3907ed	a9 20		lda #$20	                LDA #CHAR_SP        ; Put a blank space at the cursor position
.3907ef	87 17		sta [$17]	                STA [CURSORPOS]
.3907f1	28		plp		                PLP
.3907f2	68		pla		                PLA
.3907f3	fa		plx		                PLX
.3907f4	6b		rtl		                RTL
.3907f5					IPUTB
.3907f5	6b		rtl		                RTL
.3907f6					IPRINTCR
.3907f6	da		phx		                PHX
.3907f7	5a		phy		                PHY
.3907f8	8b		phb		                PHB
.3907f9	0b		phd		                PHD
.3907fa	08		php		                PHP
.3907fb	48		pha		                PHA             ; begin setdbr macro
.3907fc	08		php		                PHP
.3907fd	e2 20		sep #$20	                SEP #$20        ; set A short
.3907ff	a9 00		lda #$00	                LDA #0
.390801	48		pha		                PHA
.390802	ab		plb		                PLB
.390803	28		plp		                PLP
.390804	68		pla		                PLA             ; end setdbr macro
.390805	48		pha		                PHA             ; begin setdp macro
.390806	08		php		                PHP
.390807	c2 20		rep #$20	                REP #$20        ; set A long
.390809	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39080c	5b		tcd		                TCD
.39080d	28		plp		                PLP
.39080e	68		pla		                PLA             ; end setdp macro
.39080f	e2 20		sep #$20	                SEP #$20        ; set A short
.390811	c2 10		rep #$10	                REP #$10        ; set X long
.390813	af 03 07 00	lda $000703	                LDA @lCHAN_OUT
.390817	f0 1c		beq $390835	                BEQ scr_printcr
.390819	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.39081b	f0 06		beq $390823	                BEQ uart_printcr    ; Yes: handle printing to the UART
.39081d	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.39081f	f0 02		beq $390823	                BEQ uart_printcr    ; Yes: handle printing to the UART
.390821	80 1c		bra $39083f	                BRA done
.390823	22 d7 55 39	jsl $3955d7	uart_printcr    JSL UART_SELECT
.390827	a9 0d		lda #$0d	                LDA #CHAR_CR
.390829	22 d0 06 39	jsl $3906d0	                JSL IPUTC
.39082d	a9 0a		lda #$0a	                LDA #CHAR_LF
.39082f	22 d0 06 39	jsl $3906d0	                JSL IPUTC
.390833	80 0a		bra $39083f	                BRA done
.390835	a2 00 00	ldx #$0000	scr_printcr     LDX #0
.390838	a4 1c		ldy $1c		                LDY CURSORY
.39083a	c8		iny		                INY
.39083b	22 fa 08 39	jsl $3908fa	                JSL ILOCATE
.39083f	28		plp		done            PLP
.390840	2b		pld		                PLD
.390841	ab		plb		                PLB
.390842	7a		ply		                PLY
.390843	fa		plx		                PLX
.390844	6b		rtl		                RTL
.390845	da		phx		ICSRHOME        PHX
.390846	5a		phy		                PHY
.390847	08		php		                PHP
.390848	a2 00 00	ldx #$0000	                LDX #0
.39084b	a0 00 00	ldy #$0000	                LDY #0
.39084e	22 fa 08 39	jsl $3908fa	                JSL ILOCATE
.390852	28		plp		                PLP
.390853	7a		ply		                PLY
.390854	fa		plx		                PLX
.390855	6b		rtl		                RTL
.390856	da		phx		ICSRRIGHT       PHX
.390857	5a		phy		                PHY
.390858	48		pha		                PHA
.390859	0b		phd		                PHD
.39085a	08		php		                PHP
.39085b	c2 20		rep #$20	                REP #$20        ; set A long
.39085d	c2 10		rep #$10	                REP #$10        ; set X long
.39085f	48		pha		                PHA             ; begin setdp macro
.390860	08		php		                PHP
.390861	c2 20		rep #$20	                REP #$20        ; set A long
.390863	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.390866	5b		tcd		                TCD
.390867	28		plp		                PLP
.390868	68		pla		                PLA             ; end setdp macro
.390869	a6 1a		ldx $1a		                LDX CURSORX           ; Get the new column
.39086b	e8		inx		                INX
.39086c	a4 1c		ldy $1c		                LDY CURSORY           ; Get the current row
.39086e	e4 0f		cpx $0f		                CPX COLS_VISIBLE      ; Are we off screen?
.390870	90 0d		bcc $39087f	                BCC icsrright_nowrap  ; No: just set the position
.390872	a2 00 00	ldx #$0000	                LDX #0                ; Yes: move to the first column
.390875	c8		iny		                INY                   ; And move to the next row
.390876	c4 13		cpy $13		                CPY LINES_VISIBLE     ; Are we still off screen?
.390878	90 05		bcc $39087f	                BCC icsrright_nowrap  ; No: just set the position
.39087a	88		dey		                DEY                   ; Yes: lock to the last row
.39087b	22 46 09 39	jsl $390946	                JSL ISCROLLUP         ; But scroll the screen up
.39087f					icsrright_nowrap
.39087f	22 fa 08 39	jsl $3908fa	                JSL ILOCATE           ; Set the cursor position
.390883	28		plp		                PLP
.390884	2b		pld		                PLD
.390885	68		pla		                PLA
.390886	7a		ply		                PLY
.390887	fa		plx		                PLX
.390888	6b		rtl		                RTL
.390889					ICSRLEFT
.390889	da		phx		                PHX
.39088a	5a		phy		                PHY
.39088b	48		pha		                PHA
.39088c	0b		phd		                PHD
.39088d	08		php		                PHP
.39088e	c2 30		rep #$30	                REP #$30        ; set A&X long
.390890	48		pha		                PHA             ; begin setdp macro
.390891	08		php		                PHP
.390892	c2 20		rep #$20	                REP #$20        ; set A long
.390894	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.390897	5b		tcd		                TCD
.390898	28		plp		                PLP
.390899	68		pla		                PLA             ; end setdp macro
.39089a	a5 1a		lda $1a		                LDA CURSORX
.39089c	f0 0b		beq $3908a9	                BEQ icsrleft_done_already_zero ; Check that we are not already @ Zero
.39089e	a6 1a		ldx $1a		                LDX CURSORX
.3908a0	ca		dex		                DEX
.3908a1	86 1a		stx $1a		                STX CURSORX
.3908a3	a4 1c		ldy $1c		                LDY CURSORY
.3908a5	22 fa 08 39	jsl $3908fa	                JSL ILOCATE
.3908a9					icsrleft_done_already_zero
.3908a9	28		plp		                PLP
.3908aa	2b		pld		                PLD
.3908ab	68		pla		                PLA
.3908ac	7a		ply		                PLY
.3908ad	fa		plx		                PLX
.3908ae	6b		rtl		                RTL
.3908af					ICSRUP
.3908af	da		phx		                PHX
.3908b0	5a		phy		                PHY
.3908b1	48		pha		                PHA
.3908b2	0b		phd		                PHD
.3908b3	08		php		                PHP
.3908b4	c2 30		rep #$30	                REP #$30        ; set A&X long
.3908b6	48		pha		                PHA             ; begin setdp macro
.3908b7	08		php		                PHP
.3908b8	c2 20		rep #$20	                REP #$20        ; set A long
.3908ba	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.3908bd	5b		tcd		                TCD
.3908be	28		plp		                PLP
.3908bf	68		pla		                PLA             ; end setdp macro
.3908c0	a5 1c		lda $1c		                LDA CURSORY
.3908c2	f0 0b		beq $3908cf	                BEQ isrup_done_already_zero ; Check if we are not already @ Zero
.3908c4	a4 1c		ldy $1c		                LDY CURSORY
.3908c6	88		dey		                DEY
.3908c7	84 1c		sty $1c		                STY CURSORY
.3908c9	a6 1a		ldx $1a		                LDX CURSORX
.3908cb	22 fa 08 39	jsl $3908fa	                JSL ILOCATE
.3908cf					isrup_done_already_zero
.3908cf	28		plp		                PLP
.3908d0	2b		pld		                PLD
.3908d1	68		pla		                PLA
.3908d2	7a		ply		                PLY
.3908d3	fa		plx		                PLX
.3908d4	6b		rtl		                RTL
.3908d5	da		phx		ICSRDOWN        PHX
.3908d6	5a		phy		                PHY
.3908d7	0b		phd		                PHD
.3908d8	c2 30		rep #$30	                REP #$30        ; set A&X long
.3908da	48		pha		                PHA             ; begin setdp macro
.3908db	08		php		                PHP
.3908dc	c2 20		rep #$20	                REP #$20        ; set A long
.3908de	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.3908e1	5b		tcd		                TCD
.3908e2	28		plp		                PLP
.3908e3	68		pla		                PLA             ; end setdp macro
.3908e4	a6 1a		ldx $1a		                LDX CURSORX                 ; Get the current column
.3908e6	a4 1c		ldy $1c		                LDY CURSORY                 ; Get the new row
.3908e8	c8		iny		                INY
.3908e9	c4 13		cpy $13		                CPY LINES_VISIBLE           ; Check to see if we're off screen
.3908eb	90 05		bcc $3908f2	                BCC icsrdown_noscroll       ; No: go ahead and set the position
.3908ed	88		dey		                DEY                         ; Yes: go back to the last row
.3908ee	22 46 09 39	jsl $390946	                JSL ISCROLLUP               ; But scroll the screen up
.3908f2					icsrdown_noscroll
.3908f2	22 fa 08 39	jsl $3908fa	                JSL ILOCATE                 ; And set the cursor position
.3908f6	2b		pld		                PLD
.3908f7	7a		ply		                PLY
.3908f8	fa		plx		                PLX
.3908f9	6b		rtl		                RTL
.3908fa	48		pha		ILOCATE         PHA
.3908fb	0b		phd		                PHD
.3908fc	08		php		                PHP
.3908fd	48		pha		                PHA             ; begin setdp macro
.3908fe	08		php		                PHP
.3908ff	c2 20		rep #$20	                REP #$20        ; set A long
.390901	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390904	5b		tcd		                TCD
.390905	28		plp		                PLP
.390906	68		pla		                PLA             ; end setdp macro
.390907	c2 30		rep #$30	                REP #$30        ; set A&X long
.390909					ilocate_scroll
.390909	c4 13		cpy $13		                CPY LINES_VISIBLE
.39090b	90 07		bcc $390914	                BCC ilocate_scrolldone
.39090d	22 46 09 39	jsl $390946	                JSL ISCROLLUP
.390911	88		dey		                DEY
.390912	80 f5		bra $390909	                BRA ilocate_scroll
.390914					ilocate_scrolldone
.390914	86 1a		stx $1a		                STX CURSORX
.390916	84 1c		sty $1c		                STY CURSORY
.390918	a5 0c		lda $0c		                LDA SCREENBEGIN
.39091a					ilocate_row
.39091a	c0 00 00	cpy #$0000	                CPY #$0
.39091d	f0 08		beq $390927	                BEQ ilocate_right
.39091f	18		clc		ilocate_down    CLC
.390920	65 11		adc $11		                ADC COLS_PER_LINE
.390922	88		dey		                DEY
.390923	f0 02		beq $390927	                BEQ ilocate_right
.390925	80 f8		bra $39091f	                BRA ilocate_down
.390927	18		clc		ilocate_right   CLC
.390928	65 1a		adc $1a		                ADC CURSORX             ; move the cursor right X columns
.39092a	85 17		sta $17		                STA CURSORPOS
.39092c	a4 1c		ldy $1c		                LDY CURSORY
.39092e	98		tya		                TYA
.39092f	8f 16 00 af	sta $af0016	                STA @lVKY_TXT_CURSOR_Y_REG_L  ;Store in Vicky's registers
.390933	8a		txa		                TXA
.390934	8f 14 00 af	sta $af0014	                STA @lVKY_TXT_CURSOR_X_REG_L  ;Store in Vicky's register
.390938	c2 20		rep #$20	                REP #$20        ; set A long
.39093a	18		clc		                CLC
.39093b	a5 17		lda $17		                LDA CURSORPOS
.39093d	69 00 20	adc #$2000	                ADC #<>(CS_COLOR_MEM_PTR - CS_TEXT_MEM_PTR)
.390940	85 1f		sta $1f		                STA COLORPOS
.390942	28		plp		ilocate_done    PLP
.390943	2b		pld		                PLD
.390944	68		pla		                PLA
.390945	6b		rtl		                RTL
.390946					ISCROLLUP
.390946	48		pha		                PHA
.390947	da		phx		                PHX
.390948	5a		phy		                PHY
.390949	8b		phb		                PHB
.39094a	08		php		                PHP
.39094b	c2 30		rep #$30	                REP #$30        ; set A&X long
.39094d	18		clc		                CLC
.39094e	a0 00 a0	ldy #$a000	                LDY #$A000
.390951	a2 80 a0	ldx #$a080	                LDX #$A080
.390954	a9 7f 1f	lda #$1f7f	                LDA #128 * 63 - 1
.390957	54 af af	mvn $af,$af	                MVN $AF,$AF
.39095a	c2 30		rep #$30	                REP #$30        ; set A&X long
.39095c	a0 00 c0	ldy #$c000	                LDY #$C000
.39095f	a2 80 c0	ldx #$c080	                LDX #$C080
.390962	a9 7f 1f	lda #$1f7f	                LDA #128 * 63 - 1
.390965	54 af af	mvn $af,$af	                MVN $AF,$AF
.390968	28		plp		                PLP
.390969	ab		plb		                PLB
.39096a	7a		ply		                PLY
.39096b	fa		plx		                PLX
.39096c	68		pla		                PLA
.39096d	6b		rtl		                RTL
.39096e	08		php		IPRINTH         PHP
.39096f	48		pha		                PHA
.390970					iprinth1
.390970	e2 20		sep #$20	                SEP #$20        ; set A short
.390972	bd 00 00	lda $0000,x	                LDA #0,b,x      ; Read the value to be printed
.390975	4a		lsr a		                LSR
.390976	4a		lsr a		                LSR
.390977	4a		lsr a		                LSR
.390978	4a		lsr a		                LSR
.390979	22 c8 09 39	jsl $3909c8	                JSL iprint_digit
.39097d	bd 00 00	lda $0000,x	                LDA #0,b,x
.390980	22 c8 09 39	jsl $3909c8	                JSL iprint_digit
.390984	ca		dex		                DEX
.390985	88		dey		                DEY
.390986	d0 e8		bne $390970	                BNE iprinth1
.390988	68		pla		                PLA
.390989	28		plp		                PLP
.39098a	6b		rtl		                RTL
.39098b					IPRINTAH
.39098b	48		pha		                PHA
.39098c	08		php		                PHP
.39098d	8f 44 02 00	sta $000244	                STA @lCPUA            ; Save A where we can use it multiple times
.390991	08		php		                PHP                   ; Get the processor status into A
.390992	e2 20		sep #$20	                SEP #$20        ; set A short
.390994	c2 10		rep #$10	                REP #$10        ; set X long
.390996	68		pla		                PLA
.390997	29 20		and #$20	                AND #%00100000        ; Is M = 1?
.390999	c9 20		cmp #$20	                CMP #%00100000
.39099b	f0 14		beq $3909b1	                BEQ eight_bit
.39099d	af 46 02 00	lda $000246	                LDA @lCPUA+2          ; Get nibble [15..12]
.3909a1	4a		lsr a		                LSR A
.3909a2	4a		lsr a		                LSR A
.3909a3	4a		lsr a		                LSR A
.3909a4	4a		lsr a		                LSR A
.3909a5	22 c8 09 39	jsl $3909c8	                JSL iprint_digit      ; And print it
.3909a9	af 46 02 00	lda $000246	                LDA @lCPUA+2          ; Get nibble [11..8]
.3909ad	22 c8 09 39	jsl $3909c8	                JSL iprint_digit      ; And print it
.3909b1	af 44 02 00	lda $000244	eight_bit       LDA @lCPUA            ; Get nibble [7..4]
.3909b5	4a		lsr a		                LSR A
.3909b6	4a		lsr a		                LSR A
.3909b7	4a		lsr a		                LSR A
.3909b8	4a		lsr a		                LSR A
.3909b9	22 c8 09 39	jsl $3909c8	                JSL iprint_digit      ; And print it
.3909bd	af 44 02 00	lda $000244	                LDA @lCPUA            ; Get nibble [3..0]
.3909c1	22 c8 09 39	jsl $3909c8	                JSL iprint_digit      ; And print it
.3909c5	28		plp		                PLP
.3909c6	68		pla		                PLA
.3909c7	6b		rtl		                RTL
.3909c8	da		phx		iprint_digit    PHX
.3909c9	c2 20		rep #$20	                REP #$20        ; set A long
.3909cb	29 0f 00	and #$000f	                AND #$0F
.3909ce	aa		tax		                TAX
.3909cf	bf 2b 6c 39	lda $396c2b,x	                LDA hex_digits,X
.3909d3	22 d0 06 39	jsl $3906d0	                JSL IPUTC       ; Print the digit
.3909d7	fa		plx		                PLX
.3909d8	6b		rtl		                RTL
.3909d9	48		pha		ICLRSCREEN	    PHA
.3909da	da		phx		                PHX
.3909db	08		php		                PHP
.3909dc	e2 20		sep #$20	                SEP #$20        ; set A short
.3909de	c2 10		rep #$10	                REP #$10        ; set X long
.3909e0	a2 00 00	ldx #$0000	                LDX #$0000		          ; Only Use One Pointer
.3909e3	a9 20		lda #$20	                LDA #$20		            ; Fill the Entire Screen with Space
.3909e5	9f 00 a0 af	sta $afa000,x	iclearloop0	    STA CS_TEXT_MEM_PTR, x	;
.3909e9	e8		inx		                inx
.3909ea	e0 00 20	cpx #$2000	                cpx #$2000
.3909ed	d0 f6		bne $3909e5	                bne iclearloop0
.3909ef	a2 00 00	ldx #$0000	                LDX	#$0000		          ; Only Use One Pointer
.3909f2	af 1e 00 00	lda $00001e	                LDA @lCURCOLOR          ; Fill the Color Memory with the current color
.3909f6	9f 00 c0 af	sta $afc000,x	iclearloop1	    STA CS_COLOR_MEM_PTR, x	;
.3909fa	e8		inx		                inx
.3909fb	e0 00 20	cpx #$2000	                cpx #$2000
.3909fe	d0 f6		bne $3909f6	                bne iclearloop1
.390a00	28		plp		                PLP
.390a01	fa		plx		                PLX
.390a02	68		pla		                PLA
.390a03	6b		rtl		                RTL
.390a04	48		pha		ICOLORFLAG      PHA
.390a05	da		phx		                PHX
.390a06	08		php		                PHP
.390a07	e2 30		sep #$30	                SEP #$30        ; set A&X short
.390a09	a2 00		ldx #$00	                LDX #$00
.390a0b	bf 02 69 39	lda $396902,x	iclearloop2	    LDA @lgreet_clr_line1,x
.390a0f	9f 00 c0 af	sta $afc000,x	                STA CS_COLOR_MEM_PTR,x
.390a13	bf 2c 69 39	lda $39692c,x	                LDA @lgreet_clr_line2,x
.390a17	9f 80 c0 af	sta $afc080,x	                STA CS_COLOR_MEM_PTR + $80,x
.390a1b	bf 56 69 39	lda $396956,x	                LDA @lgreet_clr_line3,x
.390a1f	9f 00 c1 af	sta $afc100,x	                STA CS_COLOR_MEM_PTR + $100,x
.390a23	bf 80 69 39	lda $396980,x	                LDA @lgreet_clr_line4,x
.390a27	9f 80 c1 af	sta $afc180,x	                STA CS_COLOR_MEM_PTR + $180,x
.390a2b	bf aa 69 39	lda $3969aa,x	                LDA @lgreet_clr_line5,x
.390a2f	9f 00 c2 af	sta $afc200,x	                STA CS_COLOR_MEM_PTR + $200,x
.390a33	e8		inx		                inx
.390a34	e0 2a		cpx #$2a	                cpx #42
.390a36	d0 d3		bne $390a0b	                bne iclearloop2
.390a38	28		plp		                PLP
.390a39	fa		plx		                PLX
.390a3a	68		pla		                PLA
.390a3b	6b		rtl		                RTL
.390a3c	0b		phd		IINITCHLUT		  PHD
.390a3d	08		php		                PHP
.390a3e	48		pha		                PHA
.390a3f	da		phx		                PHX
.390a40	e2 20		sep #$20	                SEP #$20        ; set A short
.390a42	e2 10		sep #$10	                SEP #$10        ; set X short
.390a44	a2 00		ldx #$00					        LDX	#$00
.390a46	bf d4 69 39	lda $3969d4,x	lutinitloop0	  LDA @lfg_color_lut,x		; get Local Data
.390a4a	9f 40 1f af	sta $af1f40,x	                STA FG_CHAR_LUT_PTR,x	; Write in LUT Memory
.390a4e	e8		inx		                inx
.390a4f	e0 40		cpx #$40	                cpx #$40
.390a51	d0 f3		bne $390a46	                bne lutinitloop0
.390a53	a2 00		ldx #$00	                LDX	#$00
.390a55	bf 14 6a 39	lda $396a14,x	lutinitloop1	  LDA @lbg_color_lut,x		; get Local Data
.390a59	9f 80 1f af	sta $af1f80,x	                STA BG_CHAR_LUT_PTR,x	; Write in LUT Memory
.390a5d	e8		inx		                INX
.390a5e	e0 40		cpx #$40	                CPX #$40
.390a60	d0 f3		bne $390a55	                bne lutinitloop1
.390a62	c2 20		rep #$20	                REP #$20        ; set A long
.390a64	c2 10		rep #$10	                REP #$10        ; set X long
.390a66	fa		plx		                PLX
.390a67	68		pla		                PLA
.390a68	28		plp		                PLP
.390a69	2b		pld		                PLD
.390a6a	6b		rtl		                RTL
.390a6b					IINITGAMMATABLE
.390a6b	e2 20		sep #$20	                SEP #$20        ; set A short
.390a6d	c2 10		rep #$10	                REP #$10        ; set X long
.390a6f	a2 00 00	ldx #$0000	                ldx #$0000
.390a72	bf 00 71 39	lda $397100,x	initgammaloop   LDA GAMMA_1_8_Tbl, x
.390a76	9f 00 40 af	sta $af4000,x	                STA GAMMA_B_LUT_PTR, x
.390a7a	9f 00 41 af	sta $af4100,x	                STA GAMMA_G_LUT_PTR, x
.390a7e	9f 00 42 af	sta $af4200,x	                STA GAMMA_R_LUT_PTR, x
.390a82	e8		inx		                inx
.390a83	e0 00 01	cpx #$0100	                cpx #$0100
.390a86	d0 ea		bne $390a72	                bne initgammaloop
.390a88	c2 30		rep #$30	                REP #$30        ; set A&X long
.390a8a	6b		rtl		                RTL
.390a8b	48		pha		IINITALLLUT     PHA
.390a8c	da		phx		                PHX
.390a8d	a2 00 00	ldx #$0000	                LDX #$0000
.390a90	e2 20		sep #$20	                SEP #$20        ; set A short
.390a92	a9 00		lda #$00	                LDA #$00
.390a94	85 0a		sta $0a		                STA $0A     ; Temp Location
.390a96					iinit_lut_loop
.390a96	86 02		stx $02		                STX $02
.390a98	a6 0a		ldx $0a		                LDX $0A
.390a9a	bf 00 70 39	lda $397000,x	                LDA GAMMA_2_2_Tbl, x
.390a9e	49 55		eor #$55	                EOR  #$55
.390aa0	a6 02		ldx $02		                LDX $02
.390aa2	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390aa6	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390aaa	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390aae	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390ab2	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390ab6	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390aba	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390abe	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390ac2	e8		inx		                inx
.390ac3	86 02		stx $02		                STX $02
.390ac5	a6 0a		ldx $0a		                LDX $0A
.390ac7	bf 00 72 39	lda $397200,x	                LDA RANDOM_LUT_Tbl, x
.390acb	a6 02		ldx $02		                LDX $02
.390acd	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390ad1	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390ad5	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390ad9	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390add	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390ae1	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390ae5	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390ae9	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390aed	e8		inx		                inx
.390aee	86 02		stx $02		                STX $02
.390af0	a6 0a		ldx $0a		                LDX $0A
.390af2	bf 00 71 39	lda $397100,x	                LDA GAMMA_1_8_Tbl, x
.390af6	49 aa		eor #$aa	                EOR  #$AA
.390af8	a6 02		ldx $02		                LDX $02
.390afa	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390afe	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390b02	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390b06	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390b0a	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390b0e	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390b12	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390b16	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390b1a	e8		inx		                inx
.390b1b	a9 ff		lda #$ff	                LDA #$FF
.390b1d	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390b21	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390b25	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390b29	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390b2d	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390b31	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390b35	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390b39	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390b3d	e6 0a		inc $0a		                inc $0A
.390b3f	e8		inx		                inx
.390b40	e0 00 04	cpx #$0400	                cpx #$0400
.390b43	f0 03		beq $390b48	                beq iinit_lut_exit
.390b45	82 4e ff	brl $390a96	                brl iinit_lut_loop
.390b48					iinit_lut_exit
.390b48	c2 30		rep #$30	                REP #$30        ; set A&X long
.390b4a	fa		plx		                PLX
.390b4b	68		pla		                PLA
.390b4c	6b		rtl		                RTL
.390b4d	48		pha		IINITVKYTXTMODE PHA
.390b4e	e2 20		sep #$20	                SEP #$20        ; set A short
.390b50	a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En      ;Okay, this Enables the Text Mode (Video Display)
.390b52	8f 00 00 af	sta $af0000	                STA MASTER_CTRL_REG_L
.390b56	a9 20		lda #$20	                LDA #$20
.390b58	8f 05 00 af	sta $af0005	                STA BORDER_COLOR_B
.390b5c	8f 07 00 af	sta $af0007	                STA BORDER_COLOR_R
.390b60	a9 00		lda #$00	                LDA #$00
.390b62	8f 06 00 af	sta $af0006	                STA BORDER_COLOR_G
.390b66	a9 01		lda #$01	                LDA #Border_Ctrl_Enable   ; Enable the Border
.390b68	8f 04 00 af	sta $af0004	                STA BORDER_CTRL_REG
.390b6c	a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En
.390b6e	8f 00 00 af	sta $af0000	                STA MASTER_CTRL_REG_L
.390b72	c2 30		rep #$30	                REP #$30        ; set A&X long
.390b74	68		pla		                PLA
.390b75	6b		rtl		                RTL
.390b76					IINITVKYGRPMODE
.390b76	48		pha		                PHA
.390b77	e2 20		sep #$20	                SEP #$20        ; set A short
.390b79	a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.390b7b	8f 40 01 af	sta $af0140	                STA @lBM_CONTROL_REG
.390b7f	a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.390b81	8f 41 01 af	sta $af0141	                STA @lBM_START_ADDY_L
.390b85	a9 c0		lda #$c0	                LDA #$C0
.390b87	8f 42 01 af	sta $af0142	                STA @lBM_START_ADDY_M
.390b8b	a9 00		lda #$00	                LDA #$00
.390b8d	8f 43 01 af	sta $af0143	                STA @lBM_START_ADDY_H ; This address is always base from
.390b91	a9 80		lda #$80	                LDA #$80
.390b93	8f 44 01 af	sta $af0144	                STA BM_X_SIZE_L
.390b97	a9 02		lda #$02	                LDA #$02
.390b99	8f 45 01 af	sta $af0145	                STA BM_X_SIZE_H         ; $0280 = 640
.390b9d	a9 e0		lda #$e0	                LDA #$E0
.390b9f	8f 46 01 af	sta $af0146	                STA BM_Y_SIZE_L
.390ba3	a9 01		lda #$01	                LDA #$01
.390ba5	8f 47 01 af	sta $af0147	                STA BM_Y_SIZE_H         ; $01E0 = 480
.390ba9	c2 30		rep #$30	                REP #$30        ; set A&X long
.390bab	68		pla		                PLA
.390bac	6b		rtl		                RTL
.390bad					IINITTILEMODE
.390bad	6b		rtl		                RTL
.390bae	48		pha		IINITSPRITE     PHA
.390baf	e2 20		sep #$20	                SEP #$20        ; set A short
.390bb1	a9 03		lda #$03	                LDA #$03    ; Enable 17 Sprites
.390bb3	8f 00 02 af	sta $af0200	                STA SP00_CONTROL_REG
.390bb7	8f 08 02 af	sta $af0208	                STA SP01_CONTROL_REG
.390bbb	8f 10 02 af	sta $af0210	                STA SP02_CONTROL_REG
.390bbf	8f 18 02 af	sta $af0218	                STA SP03_CONTROL_REG
.390bc3	8f 20 02 af	sta $af0220	                STA SP04_CONTROL_REG
.390bc7	8f 28 02 af	sta $af0228	                STA SP05_CONTROL_REG
.390bcb	8f 30 02 af	sta $af0230	                STA SP06_CONTROL_REG
.390bcf	8f 38 02 af	sta $af0238	                STA SP07_CONTROL_REG
.390bd3	8f 40 02 af	sta $af0240	                STA SP08_CONTROL_REG
.390bd7	8f 48 02 af	sta $af0248	                STA SP09_CONTROL_REG
.390bdb	8f 50 02 af	sta $af0250	                STA SP10_CONTROL_REG
.390bdf	8f 58 02 af	sta $af0258	                STA SP11_CONTROL_REG
.390be3	8f 60 02 af	sta $af0260	                STA SP12_CONTROL_REG
.390be7	8f 68 02 af	sta $af0268	                STA SP13_CONTROL_REG
.390beb	8f 70 02 af	sta $af0270	                STA SP14_CONTROL_REG
.390bef	8f 78 02 af	sta $af0278	                STA SP15_CONTROL_REG
.390bf3	8f 80 02 af	sta $af0280	                STA SP16_CONTROL_REG
.390bf7	a9 09		lda #$09	                LDA #$09
.390bf9	8f 03 02 af	sta $af0203	                STA SP00_ADDY_PTR_H
.390bfd	8f 0b 02 af	sta $af020b	                STA SP01_ADDY_PTR_H
.390c01	8f 13 02 af	sta $af0213	                STA SP02_ADDY_PTR_H
.390c05	8f 1b 02 af	sta $af021b	                STA SP03_ADDY_PTR_H
.390c09	8f 23 02 af	sta $af0223	                STA SP04_ADDY_PTR_H
.390c0d	8f 2b 02 af	sta $af022b	                STA SP05_ADDY_PTR_H
.390c11	8f 33 02 af	sta $af0233	                STA SP06_ADDY_PTR_H
.390c15	8f 3b 02 af	sta $af023b	                STA SP07_ADDY_PTR_H
.390c19	8f 43 02 af	sta $af0243	                STA SP08_ADDY_PTR_H
.390c1d	8f 4b 02 af	sta $af024b	                STA SP09_ADDY_PTR_H
.390c21	8f 53 02 af	sta $af0253	                STA SP10_ADDY_PTR_H
.390c25	8f 5b 02 af	sta $af025b	                STA SP11_ADDY_PTR_H
.390c29	8f 63 02 af	sta $af0263	                STA SP12_ADDY_PTR_H
.390c2d	8f 6b 02 af	sta $af026b	                STA SP13_ADDY_PTR_H
.390c31	8f 73 02 af	sta $af0273	                STA SP14_ADDY_PTR_H
.390c35	8f 7b 02 af	sta $af027b	                STA SP15_ADDY_PTR_H
.390c39	8f 83 02 af	sta $af0283	                STA SP16_ADDY_PTR_H
.390c3d	a9 00		lda #$00	                LDA #$00
.390c3f	8f 02 02 af	sta $af0202	                STA SP00_ADDY_PTR_M
.390c43	a9 04		lda #$04	                LDA #$04
.390c45	8f 0a 02 af	sta $af020a	                STA SP01_ADDY_PTR_M
.390c49	a9 08		lda #$08	                LDA #$08
.390c4b	8f 12 02 af	sta $af0212	                STA SP02_ADDY_PTR_M
.390c4f	a9 0c		lda #$0c	                LDA #$0C
.390c51	8f 1a 02 af	sta $af021a	                STA SP03_ADDY_PTR_M
.390c55	a9 10		lda #$10	                LDA #$10
.390c57	8f 22 02 af	sta $af0222	                STA SP04_ADDY_PTR_M
.390c5b	a9 14		lda #$14	                LDA #$14
.390c5d	8f 2a 02 af	sta $af022a	                STA SP05_ADDY_PTR_M
.390c61	a9 18		lda #$18	                LDA #$18
.390c63	8f 32 02 af	sta $af0232	                STA SP06_ADDY_PTR_M
.390c67	a9 1c		lda #$1c	                LDA #$1C
.390c69	8f 3a 02 af	sta $af023a	                STA SP07_ADDY_PTR_M
.390c6d	a9 20		lda #$20	                LDA #$20
.390c6f	8f 42 02 af	sta $af0242	                STA SP08_ADDY_PTR_M
.390c73	a9 24		lda #$24	                LDA #$24
.390c75	8f 4a 02 af	sta $af024a	                STA SP09_ADDY_PTR_M
.390c79	a9 28		lda #$28	                LDA #$28
.390c7b	8f 52 02 af	sta $af0252	                STA SP10_ADDY_PTR_M
.390c7f	a9 2c		lda #$2c	                LDA #$2C
.390c81	8f 5a 02 af	sta $af025a	                STA SP11_ADDY_PTR_M
.390c85	a9 30		lda #$30	                LDA #$30
.390c87	8f 62 02 af	sta $af0262	                STA SP12_ADDY_PTR_M
.390c8b	a9 34		lda #$34	                LDA #$34
.390c8d	8f 6a 02 af	sta $af026a	                STA SP13_ADDY_PTR_M
.390c91	a9 38		lda #$38	                LDA #$38
.390c93	8f 72 02 af	sta $af0272	                STA SP14_ADDY_PTR_M
.390c97	a9 3c		lda #$3c	                LDA #$3C
.390c99	8f 7a 02 af	sta $af027a	                STA SP15_ADDY_PTR_M
.390c9d	a9 40		lda #$40	                LDA #$40
.390c9f	8f 82 02 af	sta $af0282	                STA SP16_ADDY_PTR_M
.390ca3	a9 00		lda #$00	                LDA #$00
.390ca5	8f 01 02 af	sta $af0201	                STA SP00_ADDY_PTR_L
.390ca9	8f 09 02 af	sta $af0209	                STA SP01_ADDY_PTR_L
.390cad	8f 11 02 af	sta $af0211	                STA SP02_ADDY_PTR_L
.390cb1	8f 19 02 af	sta $af0219	                STA SP03_ADDY_PTR_L
.390cb5	8f 21 02 af	sta $af0221	                STA SP04_ADDY_PTR_L
.390cb9	8f 29 02 af	sta $af0229	                STA SP05_ADDY_PTR_L
.390cbd	8f 31 02 af	sta $af0231	                STA SP06_ADDY_PTR_L
.390cc1	8f 39 02 af	sta $af0239	                STA SP07_ADDY_PTR_L
.390cc5	8f 41 02 af	sta $af0241	                STA SP08_ADDY_PTR_L
.390cc9	8f 49 02 af	sta $af0249	                STA SP09_ADDY_PTR_L
.390ccd	8f 51 02 af	sta $af0251	                STA SP10_ADDY_PTR_L
.390cd1	8f 59 02 af	sta $af0259	                STA SP11_ADDY_PTR_L
.390cd5	8f 61 02 af	sta $af0261	                STA SP12_ADDY_PTR_L
.390cd9	8f 69 02 af	sta $af0269	                STA SP13_ADDY_PTR_L
.390cdd	8f 71 02 af	sta $af0271	                STA SP14_ADDY_PTR_L
.390ce1	8f 79 02 af	sta $af0279	                STA SP15_ADDY_PTR_L
.390ce5	8f 81 02 af	sta $af0281	                STA SP16_ADDY_PTR_L
.390ce9	68		pla		                PLA
.390cea	6b		rtl		                RTL
.390ceb					IINITFONTSET
.390ceb	e2 20		sep #$20	                SEP #$20        ; set A short
.390ced	c2 10		rep #$10	                REP #$10        ; set X long
.390cef	a2 00 00	ldx #$0000	                LDX #$0000
.390cf2					initFontsetbranch0
.390cf2	bf 00 f0 3f	lda $3ff000,x	                LDA @lFONT_4_BANK0,X    ; RAM Content
.390cf6	9f 00 80 af	sta $af8000,x	                STA @lFONT_MEMORY_BANK0,X ; Vicky FONT RAM Bank
.390cfa	e8		inx		                INX
.390cfb	e0 00 08	cpx #$0800	                CPX #$0800
.390cfe	d0 f2		bne $390cf2	                BNE initFontsetbranch0
.390d00	ea		nop		                NOP
.390d01	a2 00 00	ldx #$0000	                LDX #$0000
.390d04					initFontsetbranch1
.390d04	bf 00 f8 3f	lda $3ff800,x	                LDA @lFONT_4_BANK1,X
.390d08	9f 00 88 af	sta $af8800,x	                STA @lFONT_MEMORY_BANK1,X ; Vicky FONT RAM Bank
.390d0c	e8		inx		                INX
.390d0d	e0 00 08	cpx #$0800	                CPX #$0800
.390d10	d0 f2		bne $390d04	                BNE initFontsetbranch1
.390d12	ea		nop		                NOP
.390d13	c2 30		rep #$30	                REP #$30        ; set A&X long
.390d15	6b		rtl		                RTL
.390d16					INITMOUSEPOINTER
.390d16	e2 20		sep #$20	                SEP #$20        ; set A short
.390d18	c2 10		rep #$10	                REP #$10        ; set X long
.390d1a	a2 00 00	ldx #$0000	                LDX #$0000
.390d1d					FILL_MOUSE_MARKER
.390d1d	bf 00 73 39	lda $397300,x	                LDA @lMOUSE_POINTER_PTR,X
.390d21	9f 00 05 af	sta $af0500,x	                STA @lMOUSE_PTR_GRAP0_START, X
.390d25	e8		inx		                INX
.390d26	e0 00 01	cpx #$0100	                CPX #$0100
.390d29	d0 f2		bne $390d1d	                BNE FILL_MOUSE_MARKER
.390d2b	ea		nop		                nop
.390d2c	a9 01		lda #$01	                LDA #$01
.390d2e	8f 00 07 af	sta $af0700	                STA @lMOUSE_PTR_CTRL_REG_L  ; Enable Mouse, Mouse Pointer Graphic Bank 0
.390d32	c2 30		rep #$30	                REP #$30        ; set A&X long
.390d34	6b		rtl		                RTL
.390d35	48		pha		IINITCURSOR     PHA
.390d36	e2 20		sep #$20	                SEP #$20        ; set A short
.390d38	a9 b1		lda #$b1	                LDA #$B1      ;The Cursor Character will be a Fully Filled Block
.390d3a	8f 12 00 af	sta $af0012	                STA VKY_TXT_CURSOR_CHAR_REG
.390d3e	a9 03		lda #$03	                LDA #$03      ;Set Cursor Enable And Flash Rate @1Hz
.390d40	8f 10 00 af	sta $af0010	                STA VKY_TXT_CURSOR_CTRL_REG ;
.390d44	c2 30		rep #$30	                REP #$30        ; set A&X long
.390d46	a9 00 00	lda #$0000	                LDA #$0000;
.390d49	8f 14 00 af	sta $af0014	                STA VKY_TXT_CURSOR_X_REG_L; // Set the X to Position 1
.390d4d	a9 06 00	lda #$0006	                LDA #$0006;
.390d50	8f 16 00 af	sta $af0016	                STA VKY_TXT_CURSOR_Y_REG_L; // Set the Y to Position 6 (Below)
.390d54	68		pla		                PLA
.390d55	6b		rtl		                RTL
.390d56	0b		phd		IINITSUPERIO	  PHD
.390d57	08		php		                PHP
.390d58	48		pha		                PHA
.390d59	e2 20		sep #$20	                SEP #$20        ; set A short
.390d5b	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390d5d	8f 23 11 af	sta $af1123	                STA GP10_REG
.390d61	af 23 11 af	lda $af1123	                LDA GP10_REG
.390d65	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390d67	8f 24 11 af	sta $af1124	                STA GP11_REG
.390d6b	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390d6d	8f 25 11 af	sta $af1125	                STA GP12_REG
.390d71	a9 01		lda #$01	        				LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390d73	8f 26 11 af	sta $af1126	        				STA GP13_REG
.390d77	a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BX) Bit[0] = 1, Bit[2] = 1
.390d79	8f 27 11 af	sta $af1127	        				STA GP14_REG
.390d7d	a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BY) Bit[0] = 1, Bit[2] = 1
.390d7f	8f 28 11 af	sta $af1128	        				STA GP15_REG
.390d83	a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BX) Bit[0] = 1, Bit[2] = 1
.390d85	8f 29 11 af	sta $af1129	        				STA GP16_REG
.390d89	a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BY) Bit[0] = 1, Bit[2] = 1
.390d8b	8f 2a 11 af	sta $af112a	        				STA GP17_REG
.390d8f	a9 00		lda #$00	        				LDA #$00		;(C256 - HEADPHONE MUTE) - Output GPIO - Push-Pull (1 - Headphone On, 0 - HeadPhone Off)
.390d91	8f 2b 11 af	sta $af112b	        				STA GP20_REG
.390d95	a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390d97	8f 2f 11 af	sta $af112f					        STA GP24_REG
.390d9b	a9 05		lda #$05					        LDA #$05		;(C256 - MIDI IN) Bit[0] = 1, Bit[2] = 1 (Page 132 Manual)
.390d9d	8f 30 11 af	sta $af1130					        STA GP25_REG
.390da1	a9 84		lda #$84				        	LDA #$84		;(C256 - MIDI OUT) Bit[2] = 1, Bit[7] = 1 (Open Drain - To be Checked)
.390da3	8f 31 11 af	sta $af1131					        STA GP26_REG
.390da7	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 1) Setup as GPIO Input for now
.390da9	8f 33 11 af	sta $af1133					        STA GP30_REG
.390dad	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 4) Setup as GPIO Input for now
.390daf	8f 34 11 af	sta $af1134					        STA GP31_REG
.390db3	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 3) Setup as GPIO Input for now
.390db5	8f 35 11 af	sta $af1135					        STA GP32_REG
.390db9	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 6) Setup as GPIO Input for now
.390dbb	8f 36 11 af	sta $af1136					        STA GP33_REG
.390dbf	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 5) Setup as GPIO Input for now
.390dc1	8f 37 11 af	sta $af1137					        STA GP34_REG
.390dc5	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 8) Setup as GPIO Input for now
.390dc7	8f 38 11 af	sta $af1138					        STA GP35_REG
.390dcb	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 7) Setup as GPIO Input for now
.390dcd	8f 39 11 af	sta $af1139					        STA GP36_REG
.390dd1	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 10) Setup as GPIO Input for now
.390dd3	8f 3a 11 af	sta $af113a					        STA GP37_REG
.390dd7	a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390dd9	8f 3d 11 af	sta $af113d					        STA GP42_REG
.390ddd	a9 01		lda #$01				          LDA #$01		;(C256 - INPUT PLL CLK INTERRUPT) Default Value - Will keep it as an input for now, no real usage for now
.390ddf	8f 3e 11 af	sta $af113e					        STA GP43_REG
.390de3	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RI2) - Input - Set Secondary Function
.390de5	8f 3f 11 af	sta $af113f					        STA GP50_REG
.390de9	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DCD2) - Input - Set Secondary Function
.390deb	8f 40 11 af	sta $af1140					        STA GP51_REG
.390def	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RXD2) - Input - Set Secondary Function
.390df1	8f 41 11 af	sta $af1141					        STA GP52_REG
.390df5	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - TXD2) - Output - Set Secondary Function
.390df7	8f 42 11 af	sta $af1142					        STA GP53_REG
.390dfb	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DSR2) - Input - Set Secondary Function
.390dfd	8f 43 11 af	sta $af1143					        STA GP54_REG
.390e01	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - RTS2) - Output - Set Secondary Function
.390e03	8f 44 11 af	sta $af1144					        STA GP55_REG
.390e07	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - CTS2) - Input - Set Secondary Function
.390e09	8f 45 11 af	sta $af1145					        STA GP56_REG
.390e0d	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - DTR2) - Output - Set Secondary Function
.390e0f	8f 46 11 af	sta $af1146					        STA GP57_REG
.390e13	a9 84		lda #$84					        LDA #$84		;(C256 - LED1) - Open Drain - Output
.390e15	8f 47 11 af	sta $af1147					        STA GP60_REG
.390e19	a9 84		lda #$84					        LDA #$84		;(C256 - LED2) - Open Drain - Output
.390e1b	8f 48 11 af	sta $af1148					        STA GP61_REG
.390e1f	a9 00		lda #$00				        	LDA #$00		;GPIO Data Register (GP10..GP17) - Not Used
.390e21	8f 4b 11 af	sta $af114b					        STA GP1_REG
.390e25	a9 01		lda #$01					        LDA #$01		;GPIO Data Register (GP20..GP27) - Bit[0] - Headphone Mute (Enabling it)
.390e27	8f 4c 11 af	sta $af114c					        STA GP2_REG
.390e2b	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP30..GP37) - Since it is in Output mode, nothing to write here.
.390e2d	8f 4d 11 af	sta $af114d					        STA GP3_REG
.390e31	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP40..GP47)  - Not Used
.390e33	8f 4e 11 af	sta $af114e					        STA GP4_REG
.390e37	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP50..GP57)  - Not Used
.390e39	8f 4f 11 af	sta $af114f					        STA GP5_REG
.390e3d	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP60..GP61)  - Not Used
.390e3f	8f 50 11 af	sta $af1150					        STA GP6_REG
.390e43	a9 01		lda #$01					        LDA #$01		;LED1 Output - Already setup by Vicky Init Phase, for now, I will leave it alone
.390e45	8f 5d 11 af	sta $af115d					        STA LED1_REG
.390e49	a9 02		lda #$02					        LDA #$02		;LED2 Output - However, I will setup this one, to make sure the Code works (Full On, when Code was ran)
.390e4b	8f 5e 11 af	sta $af115e					        STA LED2_REG
.390e4f	c2 20		rep #$20	                REP #$20        ; set A long
.390e51	68		pla		                PLA
.390e52	28		plp						        PLP
.390e53	2b		pld					        	PLD
.390e54	6b		rtl		                RTL
.390e55	0b		phd		IINITKEYBOARD	  PHD
.390e56	08		php						        PHP
.390e57	48		pha						        PHA
.390e58	da		phx						        PHX
.390e59	e2 20		sep #$20	                SEP #$20        ; set A short
.390e5b	c2 10		rep #$10	                REP #$10        ; set X long
.390e5d	18		clc		                CLC
.390e5e	20 0e 0f	jsr $390f0e	                JSR Poll_Inbuf ;
.390e61	a9 aa		lda #$aa					        LDA #$AA			;Send self test command
.390e63	8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.390e67	20 19 0f	jsr $390f19	                JSR Poll_Outbuf ;
.390e6a	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Check self test result
.390e6e	c9 55		cmp #$55					        CMP #$55
.390e70	f0 03		beq $390e75					        BEQ	passAAtest
.390e72	82 89 00	brl $390efe	                BRL initkb_loop_out
.390e75					passAAtest
.390e75	a9 ab		lda #$ab					        LDA #$AB			;Send test Interface command
.390e77	8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.390e7b	20 19 0f	jsr $390f19	                JSR Poll_Outbuf ;
.390e7e	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Display Interface test results
.390e82	c9 00		cmp #$00					        CMP #$00			;Should be 00
.390e84	f0 03		beq $390e89					        BEQ	passABtest
.390e86	82 75 00	brl $390efe	                BRL initkb_loop_out
.390e89					passABtest
.390e89	a9 60		lda #$60	                LDA #$60            ; Send Command 0x60 so to Enable Interrupt
.390e8b	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390e8f	20 0e 0f	jsr $390f0e	                JSR Poll_Inbuf ;
.390e92	a9 69		lda #$69	                LDA #%01101001      ; Enable Interrupt
.390e94	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.390e98	20 0e 0f	jsr $390f0e	                JSR Poll_Inbuf ;
.390e9b	a9 ff		lda #$ff	                LDA #$FF      ; Send Keyboard Reset command
.390e9d	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.390ea1	a2 ff ff	ldx #$ffff	                LDX #$FFFF
.390ea4	ca		dex		DLY_LOOP1       DEX
.390ea5	ea		nop		                NOP
.390ea6	ea		nop		                NOP
.390ea7	ea		nop		                NOP
.390ea8	ea		nop		                NOP
.390ea9	ea		nop		                NOP
.390eaa	ea		nop		                NOP
.390eab	ea		nop		                NOP
.390eac	ea		nop		                NOP
.390ead	e0 00 00	cpx #$0000	                CPX #$0000
.390eb0	d0 f2		bne $390ea4	                BNE DLY_LOOP1
.390eb2	20 19 0f	jsr $390f19	                JSR Poll_Outbuf ;
.390eb5	af 60 10 af	lda $af1060	                LDA KBD_OUT_BUF   ; Read Output Buffer
.390eb9					DO_CMD_F4_AGAIN
.390eb9	20 0e 0f	jsr $390f0e	                JSR Poll_Inbuf ;
.390ebc	a9 f4		lda #$f4					        LDA #$F4			; Enable the Keyboard
.390ebe	8f 60 10 af	sta $af1060					        STA KBD_DATA_BUF
.390ec2	20 19 0f	jsr $390f19	                JSR Poll_Outbuf ;
.390ec5	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		; Clear the Output buffer
.390ec9	c9 fa		cmp #$fa	                CMP #$FA
.390ecb	d0 ec		bne $390eb9	                BNE DO_CMD_F4_AGAIN
.390ecd	20 24 0f	jsr $390f24	                JSR INIT_MOUSE
.390ed0	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0  ; Read the Pending Register &
.390ed4	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.390ed6	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0  ; Writing it back will clear the Active Bit
.390eda	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1  ; Read the Pending Register &
.390ede	29 01		and #$01	                AND #FNX1_INT00_KBD
.390ee0	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1  ; Writing it back will clear the Active Bit
.390ee4	af 4d 01 00	lda $00014d	                LDA @lINT_MASK_REG1
.390ee8	29 fe		and #$fe	                AND #~FNX1_INT00_KBD
.390eea	8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.390eee	af 4c 01 00	lda $00014c	                LDA @lINT_MASK_REG0
.390ef2	29 7f		and #$7f	                AND #~FNX0_INT07_MOUSE
.390ef4	8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.390ef8	a2 d0 6a	ldx #$6ad0	                LDX #<>Success_kb_init
.390efb	38		sec		                SEC
.390efc	b0 03		bcs $390f01	                BCS InitSuccess
.390efe	a2 e2 6a	ldx #$6ae2	initkb_loop_out LDX #<>Failed_kb_init
.390f01	22 b0 06 39	jsl $3906b0	InitSuccess     JSL IPRINT       ; print Message
.390f05	c2 20		rep #$20	                REP #$20        ; set A long
.390f07	c2 10		rep #$10	                REP #$10        ; set X long
.390f09	fa		plx		                PLX
.390f0a	68		pla		                PLA
.390f0b	28		plp						        PLP
.390f0c	2b		pld						        PLD
.390f0d	6b		rtl		                RTL
.390f0e					Poll_Inbuf
.390f0e	af 64 10 af	lda $af1064	                LDA STATUS_PORT		; Load Status Byte
.390f12	29 02		and #$02					        AND	#<INPT_BUF_FULL	; Test bit $02 (if 0, Empty)
.390f14	c9 02		cmp #$02					        CMP #<INPT_BUF_FULL
.390f16	f0 f6		beq $390f0e					        BEQ Poll_Inbuf
.390f18	60		rts		                RTS
.390f19					Poll_Outbuf
.390f19	af 64 10 af	lda $af1064	                LDA STATUS_PORT
.390f1d	29 01		and #$01	                AND #OUT_BUF_FULL ; Test bit $01 (if 1, Full)
.390f1f	c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.390f21	d0 f6		bne $390f19	                BNE Poll_Outbuf
.390f23	60		rts		                RTS
.390f24					INIT_MOUSE
.390f24	20 0e 0f	jsr $390f0e	                JSR Poll_Inbuf
.390f27	a9 a8		lda #$a8	                LDA #$A8          ; Enable the second PS2 Channel
.390f29	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390f2d					DO_CMD_A9_AGAIN
.390f2d	20 0e 0f	jsr $390f0e	                JSR Poll_Inbuf
.390f30	a9 a9		lda #$a9	                LDA #$A9          ; Tests second PS2 Channel
.390f32	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390f36	20 19 0f	jsr $390f19	                JSR Poll_Outbuf ;
.390f39	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		; Clear the Output buffer
.390f3d	c9 00		cmp #$00	                CMP #$00
.390f3f	d0 ec		bne $390f2d	                BNE DO_CMD_A9_AGAIN
.390f41	20 0e 0f	jsr $390f0e	                JSR Poll_Inbuf
.390f44	a9 20		lda #$20	                LDA #$20
.390f46	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390f4a	20 19 0f	jsr $390f19	                JSR Poll_Outbuf ;
.390f4d	af 60 10 af	lda $af1060	                LDA KBD_OUT_BUF
.390f51	09 02		ora #$02	                ORA #$02
.390f53	48		pha		                PHA
.390f54	20 0e 0f	jsr $390f0e	                JSR Poll_Inbuf
.390f57	a9 60		lda #$60	                LDA #$60
.390f59	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390f5d	20 0e 0f	jsr $390f0e	                JSR Poll_Inbuf ;
.390f60	68		pla		                PLA
.390f61	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.390f65	a9 f6		lda #$f6	                LDA #$F6        ;Tell the mouse to use default settings
.390f67	20 8a 0f	jsr $390f8a	                JSR MOUSE_WRITE
.390f6a	20 9d 0f	jsr $390f9d	                JSR MOUSE_READ
.390f6d	a9 e8		lda #$e8	                LDA #$E8
.390f6f	20 8a 0f	jsr $390f8a	                JSR MOUSE_WRITE
.390f72	20 9d 0f	jsr $390f9d	                JSR MOUSE_READ
.390f75	a9 00		lda #$00	                LDA #$00
.390f77	20 8a 0f	jsr $390f8a	                JSR MOUSE_WRITE
.390f7a	20 9d 0f	jsr $390f9d	                JSR MOUSE_READ
.390f7d	a9 f4		lda #$f4	                LDA #$F4        ; Enable the Mouse
.390f7f	20 8a 0f	jsr $390f8a	                JSR MOUSE_WRITE
.390f82	20 9d 0f	jsr $390f9d	                JSR MOUSE_READ
.390f85	a9 00		lda #$00	                LDA #$00
.390f87	85 e0		sta $e0		                STA MOUSE_PTR
.390f89	60		rts		                RTS
.390f8a					MOUSE_WRITE
.390f8a	48		pha		                PHA
.390f8b	20 0e 0f	jsr $390f0e	                JSR Poll_Inbuf
.390f8e	a9 d4		lda #$d4	                LDA #$D4
.390f90	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390f94	20 0e 0f	jsr $390f0e	                JSR Poll_Inbuf
.390f97	68		pla		                PLA
.390f98	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.390f9c	60		rts		                RTS
.390f9d					MOUSE_READ
.390f9d	20 19 0f	jsr $390f19	                JSR Poll_Outbuf ;
.390fa0	af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF
.390fa4	60		rts		                RTS
.390fa5	48		pha		INITRTC         PHA
.390fa6	08		php		                PHP
.390fa7	e2 20		sep #$20	                SEP #$20        ; set A short
.390fa9	a9 00		lda #$00	                LDA #0
.390fab	8f 0b 08 af	sta $af080b	                STA @l RTC_RATES    ; Set watch dog timer and periodic interrupt rates to 0
.390faf	8f 0c 08 af	sta $af080c	                STA @l RTC_ENABLE   ; Disable all the alarms and interrupts
.390fb3	af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL      ; Make sure the RTC will continue to tick in battery mode
.390fb7	09 04		ora #$04	                ORA #%00000100
.390fb9	8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.390fbd	28		plp		                PLP
.390fbe	68		pla		                PLA
.390fbf	6b		rtl		                RTL
.390fc0					ITESTSID
.390fc0	a9 0f		lda #$0f	                LDA #$0F
.390fc2	8f 18 e4 af	sta $afe418	                STA SID0_MODE_VOL
.390fc6	a9 be		lda #$be	                LDA #$BE
.390fc8	8f 05 e4 af	sta $afe405	                STA SID0_V1_ATCK_DECY
.390fcc	a9 f8		lda #$f8	                LDA #$F8
.390fce	8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.390fd2	a9 11		lda #$11	                LDA #$11
.390fd4	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.390fd8	a9 25		lda #$25	                LDA #$25
.390fda	8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.390fde	a9 11		lda #$11	                LDA #$11
.390fe0	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL
.390fe4	a9 08		lda #$08	                LDA #$08
.390fe6	8f 03 e4 af	sta $afe403	                STA SID0_V1_PW_HI   ;G1
.390fea	a9 00		lda #$00	                LDA #$00
.390fec	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.390ff0	a9 c6		lda #$c6	                LDA #$C6
.390ff2	8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.390ff6	a9 08		lda #$08	                LDA #$08
.390ff8	8f 0a e4 af	sta $afe40a	                STA SID0_V2_PW_HI   ;G1
.390ffc	a9 00		lda #$00	                LDA #$00
.390ffe	8f 08 e4 af	sta $afe408	                STA SID0_V2_FREQ_HI
.391002	a9 08		lda #$08	                LDA #$08
.391004	8f 0c e4 af	sta $afe40c	                STA SID0_V2_ATCK_DECY
.391008	a9 c6		lda #$c6	                LDA #$C6
.39100a	8f 0d e4 af	sta $afe40d	                STA SID0_V2_SSTN_RLSE
.39100e	a9 08		lda #$08	                LDA #$08
.391010	8f 11 e4 af	sta $afe411	                STA SID0_V3_PW_HI   ;G1
.391014	a9 00		lda #$00	                LDA #$00
.391016	8f 0f e4 af	sta $afe40f	                STA SID0_V3_FREQ_HI
.39101a	a9 08		lda #$08	                LDA #$08
.39101c	8f 13 e4 af	sta $afe413	                STA SID0_V3_ATCK_DECY
.391020	a9 c6		lda #$c6	                LDA #$C6
.391022	8f 14 e4 af	sta $afe414	                STA SID0_V3_SSTN_RLSE
.391026	a9 36		lda #$36	                LDA #$36              ;Left Side (Rev A of Board)
.391028	8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.39102c	a9 01		lda #$01	                LDA #$01
.39102e	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI   ;G1
.391032	a9 00		lda #$00	                LDA #$00              ;Left Side (Rev A of Board)
.391034	8f 02 e4 af	sta $afe402	                STA SID0_V1_PW_LO
.391038	a9 08		lda #$08	                LDA #$08
.39103a	8f 03 e4 af	sta $afe403	                STA SID0_V1_PW_HI   ;G1
.39103e	a9 08		lda #$08	                LDA #$08
.391040	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL    ; Reset
.391044	a9 0c		lda #$0c	                LDA #$0C
.391046	8f 07 e4 af	sta $afe407	                STA SID0_V2_FREQ_LO
.39104a	a9 04		lda #$04	                LDA #$04
.39104c	8f 08 e4 af	sta $afe408	                STA SID0_V2_FREQ_HI   ;B1
.391050	a9 00		lda #$00	                LDA #$00              ;Left Side (Rev A of Board)
.391052	8f 09 e4 af	sta $afe409	                STA SID0_V2_PW_LO
.391056	a9 08		lda #$08	                LDA #$08
.391058	8f 0a e4 af	sta $afe40a	                STA SID0_V2_PW_HI   ;G1
.39105c	a9 08		lda #$08	                LDA #$08
.39105e	8f 0b e4 af	sta $afe40b	                STA SID0_V2_CTRL    ; Reset
.391062	a9 00		lda #$00	                LDA #$00
.391064	8f 0e e4 af	sta $afe40e	                STA SID0_V3_FREQ_LO
.391068	a9 08		lda #$08	                LDA #$08
.39106a	8f 0f e4 af	sta $afe40f	                STA SID0_V3_FREQ_HI   ;D
.39106e	a9 00		lda #$00	                LDA #$00              ;Left Side (Rev A of Board)
.391070	8f 10 e4 af	sta $afe410	                STA SID0_V3_PW_LO
.391074	a9 08		lda #$08	                LDA #$08
.391076	8f 11 e4 af	sta $afe411	                STA SID0_V3_PW_HI   ;G1
.39107a	a9 08		lda #$08	                LDA #$08
.39107c	8f 12 e4 af	sta $afe412	                STA SID0_V3_CTRL    ; Reset
.391080	a9 10		lda #$10	                LDA #$10
.391082	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL    ; Triangle
.391086	8f 0b e4 af	sta $afe40b	                STA SID0_V2_CTRL    ; Triangle
.39108a	8f 12 e4 af	sta $afe412	                STA SID0_V3_CTRL    ; Triangle
.39108e	6b		rtl		                RTL
.39108f	48		pha		IINITCODEC      PHA
.391090	c2 20		rep #$20	                REP #$20        ; set A long
.391092	a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R13 - Turn On Headphones
.391095	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391099	a9 01 00	lda #$0001	                LDA #$0001
.39109c	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.3910a0	20 1f 11	jsr $39111f	                JSR CODEC_TRF_FINISHED
.3910a3	a9 0f 2a	lda #$2a0f	                LDA #%0010101000001111       ;R21 - Enable All the Analog In
.3910a6	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.3910aa	a9 01 00	lda #$0001	                LDA #$0001
.3910ad	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.3910b1	20 1f 11	jsr $39111f	                JSR CODEC_TRF_FINISHED
.3910b4	a9 01 23	lda #$2301	                LDA #%0010001100000001      ;R17 - Enable All the Analog In
.3910b7	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.3910bb	a9 01 00	lda #$0001	                LDA #$0001
.3910be	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.3910c2	20 1f 11	jsr $39111f	                JSR CODEC_TRF_FINISHED
.3910c5	a9 07 2c	lda #$2c07	                LDA #%0010110000000111      ;R22 - Enable all Analog Out
.3910c8	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.3910cc	a9 01 00	lda #$0001	                LDA #$0001
.3910cf	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.3910d3	20 1f 11	jsr $39111f	                JSR CODEC_TRF_FINISHED
.3910d6	a9 02 14	lda #$1402	                LDA #%0001010000000010      ;R10 - DAC Interface Control
.3910d9	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.3910dd	a9 01 00	lda #$0001	                LDA #$0001
.3910e0	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.3910e4	20 1f 11	jsr $39111f	                JSR CODEC_TRF_FINISHED
.3910e7	a9 02 16	lda #$1602	                LDA #%0001011000000010      ;R11 - ADC Interface Control
.3910ea	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.3910ee	a9 01 00	lda #$0001	                LDA #$0001
.3910f1	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.3910f5	20 1f 11	jsr $39111f	                JSR CODEC_TRF_FINISHED
.3910f8	a9 d5 19	lda #$19d5	                LDA #%0001100111010101      ;R12 - Master Mode Control
.3910fb	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.3910ff	a9 01 00	lda #$0001	                LDA #$0001
.391102	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391106	20 1f 11	jsr $39111f	                JSR CODEC_TRF_FINISHED
.391109	68		pla		                PLA
.39110a	6b		rtl		                RTL
.39110b					IRESETCODEC
.39110b	c2 20		rep #$20	                REP #$20        ; set A long
.39110d	a9 00 2e	lda #$2e00	                LDA #$2E00      ;R22 - Enable all Analog Out
.391110	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391114	a9 01 00	lda #$0001	                LDA #$0001
.391117	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.39111b	20 1f 11	jsr $39111f	                JSR CODEC_TRF_FINISHED
.39111e	6b		rtl		                RTL
.39111f					CODEC_TRF_FINISHED
.39111f	e2 20		sep #$20	                SEP #$20        ; set A short
.391121	af 02 e9 af	lda $afe902	CODEC_LOOP      LDA CODEC_WR_CTRL
.391125	29 01		and #$01	                AND #$01
.391127	c9 01		cmp #$01	                CMP #$01
.391129	f0 f6		beq $391121	                BEQ CODEC_LOOP
.39112b	c2 20		rep #$20	                REP #$20        ; set A long
.39112d	60		rts		                RTS
.39112e					IBM_FILL_SCREEN
.39112e	c2 30		rep #$30	                REP #$30        ; set A&X long
.391130	a9 00 00	lda #$0000	                LDA #$0000
.391133	a2 00 00	ldx #$0000	                LDX #$0000
.391136					BM_FILL_SCREEN_LOOPY
.391136	a0 00 00	ldy #$0000	                LDY #$0000
.391139	e2 20		sep #$20	                SEP #$20        ; set A short
.39113b					BM_FILL_SCREEN_LOOPX
.39113b	97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.39113d	c8		iny		                INY
.39113e	c4 40		cpy $40		                CPY BM_CLEAR_SCRN_X              ; Transfer the First line
.391140	d0 f9		bne $39113b	                BNE BM_FILL_SCREEN_LOOPX
.391142	20 4d 11	jsr $39114d	                JSR BM_FILL_COMPUTE_Y_DST
.391145	e8		inx		                INX
.391146	e4 42		cpx $42		                CPX BM_CLEAR_SCRN_Y
.391148	d0 ec		bne $391136	                BNE BM_FILL_SCREEN_LOOPY
.39114a	c2 30		rep #$30	                REP #$30        ; set A&X long
.39114c	6b		rtl		                RTL
.39114d					BM_FILL_COMPUTE_Y_DST
.39114d	c2 20		rep #$20	                REP #$20        ; set A long
.39114f	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR        ; Right now it is set @ $020000 (128K) + File Size
.391151	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.391155	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2      ; Right now it is set @ $020000 (128K)
.391157	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.39115b	a9 80 02	lda #$0280	                LDA #$280        ; Right now it is set @ $020000 (128K) + File Size
.39115e	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.391162	a9 00 00	lda #$0000	                LDA #$0000
.391165	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.391169	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.39116d	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.39116f	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.391173	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.391175	a9 00 00	lda #$0000	                LDA #$0000
.391178	60		rts		                RTS
.391179					IBMP_PARSER
.391179	c2 30		rep #$30	                REP #$30        ; set A&X long
.39117b	a0 00 00	ldy #$0000	                LDY #$0000
.39117e	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y
.391180	c9 42 4d	cmp #$4d42	                CMP #$4D42
.391183	f0 03		beq $391188	                BEQ IBMP_PARSER_CONT
.391185	82 04 01	brl $39128c	                BRL BMP_PARSER_END_WITH_ERROR
.391188					IBMP_PARSER_CONT
.391188	a0 02 00	ldy #$0002	                LDY #$0002
.39118b	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size Low Short
.39118d	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.391191	a0 04 00	ldy #$0004	                LDY #$0004
.391194	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size High Short
.391196	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.39119a	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Store -1 in Adder (B)
.39119d	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.3911a1	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.3911a5	18		clc		                CLC
.3911a6	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.3911aa	85 50		sta $50		                STA BMP_FILE_SIZE
.3911ac	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.3911b0	85 52		sta $52		                STA BMP_FILE_SIZE+2
.3911b2	a0 12 00	ldy #$0012	                LDY #$0012
.3911b5	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.3911b7	85 40		sta $40		                STA BMP_X_SIZE
.3911b9	a0 16 00	ldy #$0016	                LDY #$0016
.3911bc	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.3911be	85 42		sta $42		                STA BMP_Y_SIZE
.3911c0	a0 2e 00	ldy #$002e	                LDY #$002E
.3911c3	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.3911c5	0a		asl a		                ASL A; Multiply by 2
.3911c6	0a		asl a		                ASL A; Multiply by 2
.3911c7	85 4c		sta $4c		                STA BMP_COLOR_PALET         ;
.3911c9	e0 00 00	cpx #$0000	                CPX #$0000
.3911cc	d0 05		bne $3911d3	                BNE BMP_LUT1_PICK
.3911ce	20 94 12	jsr $391294	                JSR BMP_PARSER_UPDATE_LUT0   ; Go Upload the LUT0
.3911d1	80 08		bra $3911db	                BRA DONE_TRANSFER_LUT;
.3911d3					  BMP_LUT1_PICK
.3911d3	e0 01 00	cpx #$0001	                CPX #$0001
.3911d6	d0 03		bne $3911db	                BNE BMP_LUT2_PICK
.3911d8	20 c4 12	jsr $3912c4	                JSR BMP_PARSER_UPDATE_LUT1   ; Go Upload the LUT1
.3911db					  BMP_LUT2_PICK
.3911db					  DONE_TRANSFER_LUT
.3911db	a5 56		lda $56		                LDA BMP_POSITION_Y
.3911dd	8f 00 01 00	sta $000100	                STA @lUNSIGNED_MULT_A_LO
.3911e1	a5 4e		lda $4e		                LDA SCRN_X_STRIDE
.3911e3	8f 02 01 00	sta $000102	                STA @lUNSIGNED_MULT_B_LO
.3911e7	af 04 01 00	lda $000104	                LDA @lUNSIGNED_MULT_AL_LO
.3911eb	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.3911ef	af 06 01 00	lda $000106	                LDA @lUNSIGNED_MULT_AL_LO+2
.3911f3	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.3911f7	a5 54		lda $54		                LDA BMP_POSITION_X
.3911f9	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Put the X Position Adder (B)
.3911fd	a9 00 00	lda #$0000	                LDA #$0000
.391200	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.391204	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in TEMP
.391208	85 f0		sta $f0		                STA USER_TEMP
.39120a	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in TEMP
.39120e	85 f2		sta $f2		                STA USER_TEMP+2
.391210	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.391212	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.391216	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.391218	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.39121c	a5 f0		lda $f0		                LDA USER_TEMP
.39121e	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store in 32Bit Adder (B)
.391222	a5 f2		lda $f2		                LDA USER_TEMP+2
.391224	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in 32Bit Adder (B)
.391228	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in BMP_PRSE_DST_PTR
.39122c	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.39122e	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in BMP_PRSE_DST_PTR
.391232	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.391234	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K)
.391236	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.39123a	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2        ; Right now it is set @ $020000 (128K)
.39123c	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.391240	a5 50		lda $50		                LDA BMP_FILE_SIZE
.391242	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.391246	a5 52		lda $52		                LDA BMP_FILE_SIZE+2
.391248	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.39124c	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.391250	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.391252	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.391256	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.391258	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.39125a	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.39125e	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.391260	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.391264	18		clc		                CLC
.391265	a5 40		lda $40		                LDA BMP_X_SIZE              ; Load The Size in X of the image and Make it negative
.391267	49 ff ff	eor #$ffff	                EOR #$FFFF                  ; Inverse all bit
.39126a	69 01 00	adc #$0001	                ADC #$0001                  ; Add 0 ()
.39126d	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store the Results in reg B of ADDER32
.391271	a9 ff ff	lda #$ffff	                LDA #$FFFF
.391274	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in the Reminder of the 32Bits B Register
.391278	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.39127c	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.39127e	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.391282	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.391284	20 f4 12	jsr $3912f4	                JSR BMP_PARSER_DMA_SHIT_OUT  ; We are going to start with the slow method
.391287	a2 1e 6b	ldx #$6b1e	                LDX #<>bmp_parser_msg0
.39128a	80 03		bra $39128f	                BRA BMP_PARSER_END_NO_ERROR
.39128c					BMP_PARSER_END_WITH_ERROR
.39128c	a2 0a 6b	ldx #$6b0a	                LDX #<>bmp_parser_err0
.39128f					BMP_PARSER_END_NO_ERROR
.39128f	22 b0 06 39	jsl $3906b0	                JSL IPRINT       ; print the first line
.391293	6b		rtl		                RTL
.391294					BMP_PARSER_UPDATE_LUT0
.391294	38		sec		                SEC
.391295	a0 7a 00	ldy #$007a	                LDY #$007A
.391298	a2 00 00	ldx #$0000	                LDX #$0000
.39129b	e2 20		sep #$20	                SEP #$20        ; set A short
.39129d					BMP_PARSER_UPDATE_LOOP
.39129d	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.39129f	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR+0, X      ; The look-up Table point to a pixel Blue
.3912a3	c8		iny		                INY
.3912a4	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.3912a6	9f 01 20 af	sta $af2001,x	                STA @lGRPH_LUT0_PTR+1, X      ; The look-up Table point to a pixel Blue
.3912aa	c8		iny		                INY
.3912ab	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.3912ad	9f 02 20 af	sta $af2002,x	                STA @lGRPH_LUT0_PTR+2, X      ; The look-up Table point to a pixel Blue
.3912b1	c8		iny		                INY
.3912b2	a9 80		lda #$80	                LDA #$80
.3912b4	9f 03 20 af	sta $af2003,x	                STA @lGRPH_LUT0_PTR+3, X      ; The look-up Table point to a pixel Blue
.3912b8	c8		iny		                INY ; For the Alpha Value, nobody cares
.3912b9	e8		inx		                INX
.3912ba	e8		inx		                INX
.3912bb	e8		inx		                INX
.3912bc	e8		inx		                INX
.3912bd	e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.3912bf	d0 dc		bne $39129d	                BNE BMP_PARSER_UPDATE_LOOP
.3912c1	c2 20		rep #$20	                REP #$20        ; set A long
.3912c3	60		rts		                RTS
.3912c4					BMP_PARSER_UPDATE_LUT1
.3912c4	38		sec		                SEC
.3912c5	a0 36 00	ldy #$0036	                LDY #$0036
.3912c8	a2 00 00	ldx #$0000	                LDX #$0000
.3912cb	e2 20		sep #$20	                SEP #$20        ; set A short
.3912cd					PALETTE_LUT1_LOOP
.3912cd	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.3912cf	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR+0, X      ; The look-up Table point to a pixel Blue
.3912d3	c8		iny		                INY
.3912d4	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.3912d6	9f 01 24 af	sta $af2401,x	                STA @lGRPH_LUT1_PTR+1, X      ; The look-up Table point to a pixel Blue
.3912da	c8		iny		                INY
.3912db	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.3912dd	9f 02 24 af	sta $af2402,x	                STA @lGRPH_LUT1_PTR+2, X      ; The look-up Table point to a pixel Blue
.3912e1	c8		iny		                INY
.3912e2	a9 80		lda #$80	                LDA #$80
.3912e4	9f 03 24 af	sta $af2403,x	                STA @lGRPH_LUT1_PTR+3, X      ; The look-up Table point to a pixel Blue
.3912e8	c8		iny		                INY ; For the Alpha Value, nobody cares
.3912e9	e8		inx		                INX
.3912ea	e8		inx		                INX
.3912eb	e8		inx		                INX
.3912ec	e8		inx		                INX
.3912ed	e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.3912ef	d0 dc		bne $3912cd	                BNE PALETTE_LUT1_LOOP
.3912f1	c2 20		rep #$20	                REP #$20        ; set A long
.3912f3	60		rts		                RTS
.3912f4					BMP_PARSER_DMA_SHIT_OUT
.3912f4	a2 00 00	ldx #$0000	                LDX #$0000
.3912f7					BMP_PARSER_LOOPY
.3912f7	a0 00 00	ldy #$0000	                LDY #$0000
.3912fa	e2 20		sep #$20	                SEP #$20        ; set A short
.3912fc					BMP_PARSER_LOOPX
.3912fc	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Load First Pixel Y (will be linear)
.3912fe	97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.391300	c8		iny		                INY
.391301	c4 40		cpy $40		                CPY BMP_X_SIZE              ; Transfer the First line
.391303	d0 f7		bne $3912fc	                BNE BMP_PARSER_LOOPX
.391305	20 11 13	jsr $391311	                JSR BMP_PARSER_COMPUTE_Y_SRC
.391308	20 2c 13	jsr $39132c	                JSR BMP_PARSER_COMPUTE_Y_DST
.39130b	e8		inx		                INX
.39130c	e4 42		cpx $42		                CPX BMP_Y_SIZE
.39130e	d0 e7		bne $3912f7	                BNE BMP_PARSER_LOOPY
.391310	60		rts		                RTS
.391311					BMP_PARSER_COMPUTE_Y_SRC
.391311	c2 20		rep #$20	                REP #$20        ; set A long
.391313	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.391315	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.391319	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.39131b	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.39131f	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.391323	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.391325	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.391329	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.39132b	60		rts		                RTS
.39132c					BMP_PARSER_COMPUTE_Y_DST
.39132c	c2 20		rep #$20	                REP #$20        ; set A long
.39132e	18		clc		                CLC
.39132f	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.391331	65 4e		adc $4e		                ADC SCRN_X_STRIDE        ; In Normal Circumstances, it is 640
.391333	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.391335	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.391337	69 00 00	adc #$0000	                ADC #$0000
.39133a	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.39133c	60		rts		                RTS
.39133d	ea		nop		ILOOP           NOP
.39133e	ea		nop		                NOP
.39133f	ea		nop		                NOP
.391340	ea		nop		                NOP
.391341	ea		nop		                NOP
.391342	ea		nop		                NOP
.391343	ea		nop		                NOP
.391344	ea		nop		                NOP
.391345	ea		nop		                NOP
.391346	ea		nop		                NOP
.391347	6b		rtl		                RTL
.391348	22 3d 13 39	jsl $39133d	ILOOP_1         JSL ILOOP
.39134c	22 3d 13 39	jsl $39133d	                JSL ILOOP
.391350	22 3d 13 39	jsl $39133d	                JSL ILOOP
.391354	22 3d 13 39	jsl $39133d	                JSL ILOOP
.391358	22 3d 13 39	jsl $39133d	                JSL ILOOP
.39135c	22 3d 13 39	jsl $39133d	                JSL ILOOP
.391360	22 3d 13 39	jsl $39133d	                JSL ILOOP
.391364	22 3d 13 39	jsl $39133d	                JSL ILOOP
.391368	22 3d 13 39	jsl $39133d	                JSL ILOOP
.39136c	22 3d 13 39	jsl $39133d	                JSL ILOOP
.391370	6b		rtl		                RTL
.391371	22 48 13 39	jsl $391348	ILOOP_1MS       JSL ILOOP_1
.391375	6b		rtl		                RTL
.391376	e0 00 00	cpx #$0000	ILOOP_MS        CPX #0
.391379	f0 07		beq $391382	                BEQ LOOP_MS_END
.39137b	22 71 13 39	jsl $391371	                JSL ILOOP_1MS
.39137f	ca		dex		                DEX
.391380	80 f4		bra $391376	                BRA ILOOP_MS
.391382	6b		rtl		LOOP_MS_END     RTL
.391383					IDELAY
.391383	8b		phb		                PHB
.391384	08		php		                PHP
.391385	48		pha		                PHA             ; begin setdbr macro
.391386	08		php		                PHP
.391387	e2 20		sep #$20	                SEP #$20        ; set A short
.391389	a9 00		lda #$00	                LDA #0
.39138b	48		pha		                PHA
.39138c	ab		plb		                PLB
.39138d	28		plp		                PLP
.39138e	68		pla		                PLA             ; end setdbr macro
.39138f	e2 20		sep #$20	                SEP #$20        ; set A short
.391391	a9 00		lda #$00	                LDA #0                      ; Stop the timer if it's running
.391393	8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.391397	af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Enable Timer 0 Interrupts
.39139b	29 fb		and #$fb	                AND #~FNX0_INT02_TMR0
.39139d	8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.3913a1	a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.3913a3	8d 05 07	sta $0705	                STA @w TIMERFLAGS
.3913a6	a9 00		lda #$00	                LDA #0
.3913a8	8f 61 01 00	sta $000161	                STA @l TIMER0_CHARGE_L      ; Clear the comparator for count-down
.3913ac	8f 62 01 00	sta $000162	                STA @l TIMER0_CHARGE_M
.3913b0	8f 63 01 00	sta $000163	                STA @l TIMER0_CHARGE_H
.3913b4	c2 30		rep #$30	                REP #$30        ; set A&X long
.3913b6	8a		txa		                TXA
.3913b7	8f 65 01 00	sta $000165	                STA @l TIMER0_CMP_L         ; Set the number of ticks
.3913bb	98		tya		                TYA
.3913bc	e2 20		sep #$20	                SEP #$20        ; set A short
.3913be	8f 67 01 00	sta $000167	                STA @l TIMER0_CMP_H
.3913c2	a9 09		lda #$09	                LDA #TMR0_EN | TMR0_UPDWN   ; Enable the timer to count up
.3913c4	8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.3913c8	a9 80		lda #$80	                LDA #TIMER0TRIGGER          ; Timer zero's trigger flag
.3913ca	cb		wai		loop            WAI                         ; Wait for an interrupt
.3913cb	1c 05 07	trb $0705	                TRB @w TIMERFLAGS           ; Check for the flag
.3913ce	f0 fa		beq $3913ca	                BEQ loop                    ; Keep checking until it's set
.3913d0	a9 00		lda #$00	                LDA #0                      ; Stop the timer
.3913d2	8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.3913d6	a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.3913d8	8d 05 07	sta $0705	                STA @w TIMERFLAGS
.3913db	af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Disable Timer 0 Interrupts
.3913df	09 04		ora #$04	                ORA #FNX0_INT02_TMR0
.3913e1	8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.3913e5	28		plp		                PLP
.3913e6	ab		plb		                PLB
.3913e7	6b		rtl		                RTL
.3913e8					SHOW_CREDITS
.3913e8	48		pha		                PHA
.3913e9	da		phx		                PHX
.3913ea	5a		phy		                PHY
.3913eb	08		php		                PHP
.3913ec	e2 20		sep #$20	                SEP #$20        ; set A short
.3913ee	c2 10		rep #$10	                REP #$10        ; set X long
.3913f0	af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Disable the cursor
.3913f4	29 fe		and #$fe	                AND #~Vky_Cursor_Enable
.3913f6	8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.3913fa	a2 00 00	ldx #$0000	                LDX #0
.3913fd	bf 00 00 3b	lda $3b0000,x	credit_loop     LDA @lCREDITS_TEXT,X            ; Copy a byte of text
.391401	9f 00 a0 af	sta $afa000,x	                STA @lCS_TEXT_MEM_PTR,X
.391405	bf 00 20 3b	lda $3b2000,x	                LDA @lCREDITS_COLOR,X           ; Copy a byte of color
.391409	9f 00 c0 af	sta $afc000,x	                STA @lCS_COLOR_MEM_PTR,X
.39140d	e8		inx		                INX
.39140e	e0 00 20	cpx #$2000	                CPX #128 * 64
.391411	d0 ea		bne $3913fd	                BNE credit_loop
.391413	22 89 06 39	jsl $390689	                JSL IGETCHW                     ; Wait for a keypress
.391417	22 d9 09 39	jsl $3909d9	                JSL ICLRSCREEN                  ; Then clear the screen and return
.39141b	22 45 08 39	jsl $390845	                JSL ICSRHOME                    ; Move cursor to the home position
.39141f	af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Enable the cursor
.391423	09 01		ora #$01	                ORA #Vky_Cursor_Enable
.391425	8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.391429	28		plp		                PLP
.39142a	7a		ply		                PLY
.39142b	fa		plx		                PLX
.39142c	68		pla		                PLA
.39142d	6b		rtl		                RTL
.39142e	00		brk #		IRESTORE        BRK ; Warm boot routine
.39142f	00		brk #		ISCINIT         BRK ;
.391430	00		brk #		IIOINIT         BRK ;
.391431	00		brk #		ISETLFS         BRK ; Obsolete (done in OPEN)
.391432	00		brk #		ISETNAM         BRK ; Obsolete (done in OPEN)
.391433	00		brk #		IOPEN           BRK ; Open a channel for reading and/or writing. Use SETLFS and SETNAM to set the channels and filename first.
.391434	00		brk #		ICLOSE          BRK ; Close a channel
.391435	00		brk #		IGETB           BRK ; Get a byte from input channel. Return 0 if no input. Carry is set if no input.
.391436	00		brk #		IGETCH          BRK ; Get a character from the input channel. A=0 and Carry=1 if no data is wating
.391437	00		brk #		IGETS           BRK ; Get a string from the input channel. NULL terminates
.391438	00		brk #		IGETLINE        BRK ; Get a line of text from input channel. CR or NULL terminates.
.391439	00		brk #		IGETFIELD       BRK ; Get a field from the input channel. Value in A, CR, or NULL terminates
.39143a	00		brk #		ITRIM           BRK ; Removes spaces at beginning and end of string.
.39143b	00		brk #		IPRINTC         BRK ; Print character to screen. Handles terminal commands
.39143c	00		brk #		IPRINTS         BRK ; Print string to screen. Handles terminal commands
.39143d	00		brk #		IPRINTF         BRK ; Print a float value
.39143e	00		brk #		IPRINTI         BRK ; Prints integer value in TEMP
.39143f	00		brk #		IPRINTAI        BRK ; Prints integer value in A
.391440	00		brk #		IPUSHKEY        BRK ;
.391441	00		brk #		IPUSHKEYS       BRK ;
.391442	00		brk #		ISCRREADLINE    BRK ; Loads the MCMDADDR/BCMDADDR variable with the address of the current line on the screen. This is called when the RETURN key is pressed and is the first step in processing an immediate mode command.
.391443	00		brk #		ISCRGETWORD     BRK ; Read a current word on the screen. A word ends with a space, punctuation (except _), or any control character (value < 32). Loads the address into CMPTEXT_VAL and length into CMPTEXT_LEN variables.

;******  Processing file: src\OPL2_Library.asm


;******  Processing file: src\OPL3_def.asm

=$afe600				OPL3_R_BASE               = $AFE600
=$e600					OPL3_R_BASE_LL            = $E600
=$00af					OPL3_R_BASE_HL            = $00AF
=$afe601				OPL3_R_TEST               = $AFE601 ; TEST
=$afe602				OPL3_R_TIMER1             = $AFE602 ; TIMER-1
=$afe603				OPL3_R_TIMER2             = $AFE603 ; TIMER-2
=$afe604				OPL3_R_IRQ                = $AFE604 ;
=$afe605				OPL3_R_OPL3_MODE          = $AFE605 ; Set bit 0 to 1 if you want to use in OPL3 Mode
=$afe608				OPL3_R_CSM                = $AFE608 ;
=$afe620				OPL3_R_AM_VID_EG_KSR_MULT = $AFE620 ; $40..$35 (21 Registers)
=$afe640				OPL3_R_KSL_TL             = $AFE640;  $40..$55 (21 Registers)
=$afe660				OPL3_R_AR_DR              = $AFE660;  $60..$75 (21 Registers)
=$afe680				OPL3_R_SL_RR              = $AFE680;  $80..$95 (21 Registers)
=$afe6a0				OPL3_R_FNumber            = $AFE6A0;  $A0..$A8
=$afe6b0				OPL3_R_KON_BLOCK_FNumber  = $AFE6B0;  $B0..$B9
=$afe6bd				OPL3_R_DPTH_RHYTM         = $AFE6BD;  $BD
=$afe6c0				OPL3_R_FEEDBACK           = $AFE6C0;  $C0..$C9
=$afe6e0				OPL3_R_WAVE_SELECT        = $AFE6E0;  $E0..$F5
=$afe700				OPL3_L_BASE               = $AFE700
=$e700					OPL3_L_BASE_LL            = $E700
=$00af					OPL3_L_BASE_HL            = $00AF
=$afe701				OPL3_L_TEST               = $AFE701 ; TEST
=$afe702				OPL3_L_TIMER1             = $AFE702 ; TIMER-1
=$afe703				OPL3_L_TIMER2             = $AFE703 ; TIMER-2
=$afe704				OPL3_L_IRQ                = $AFE704 ;
=$afe708				OPL3_L_CSM                = $AFE708 ;
=$afe720				OPL3_L_AM_VID_EG_KSR_MULT = $AFE720 ; $40..$35 (21 Registers)
=$afe740				OPL3_L_KSL_TL             = $AFE740;  $40..$55 (21 Registers)
=$afe760				OPL3_L_AR_DR              = $AFE760;  $60..$75 (21 Registers)
=$afe780				OPL3_L_SL_RR              = $AFE780;  $80..$95 (21 Registers)
=$afe7a0				OPL3_L_FNumber            = $AFE7A0;  $A0..$A8
=$afe7b0				OPL3_L_KON_BLOCK_FNumber  = $AFE7B0;  $B0..$B9
=$afe7bd				OPL3_L_DPTH_RHYTM         = $AFE7BD;  $BD
=$afe7c0				OPL3_L_FEEDBACK           = $AFE7C0;  $C0..$C9
=$afe7e0				OPL3_L_WAVE_SELECT        = $AFE7E0;  $E0..$F5
=$80					TREMOLO    = $80
=$40					VIBRATO    = $40
=$20					SUSTAINING = $20
=$10					KSR        = $10
=$0f					MULTIPLIER = $0F
=$c0					KEY_SCALE  = $C0
=$3f					OP_LEVEL   = $3F
=$f0					ATTACK_RT  = $F0
=$0f					DECAY_RT   = $0F
=$f0					SUSTAIN_RT = $F0
=$0f					RELEASE_RT = $0F
=$0e					FEEDBACK   = $0E
=$01					ALGORITHM  = $01
=9					OPL2_NUM_CHANNELS = 9
=0					OPERATOR1 = 0
=1					OPERATOR2 = 1
=0					MODULATOR = 0
=1					CARRIER = 1
=0					FREQ_MODULATION = 0
=1					ADDITIVE_SYNTH  = 1
=$10					DRUM_BASS   = $10
=$08					DRUM_SNARE  = $08
=$04					DRUM_TOM    = $04
=$02					DRUM_CYMBAL = $02
=$01					DRUM_HI_HAT = $01
=1					NOTE_CS =   1
=2					NOTE_D =    2
=3					NOTE_DS =   3
=4					NOTE_E =    4
=5					NOTE_F =    5
=6					NOTE_FS =   6
=7					NOTE_G =    7
=8					NOTE_GS =   8
=9					NOTE_A =    9
=10					NOTE_AS =  10
=11					NOTE_B =   11
=12					NOTE_C =   12
>391444	6b 01 81 01 98 01 b0 01		noteFNumbers    .word  $016B, $0181, $0198, $01B0, $01CA, $01E5, $0202, $0220, $0241, $0263, $0287, $02AE
>39144c	ca 01 e5 01 02 02 20 02 41 02 63 02 87 02 ae 02
>39145c	00 01 02 08 09 0a 10 11		registerOffsets_operator0 .byte $00, $01, $02, $08, $09, $0A, $10, $11, $12 ;initializers for operator 1 */
>391464	12
>391465	03 04 05 0b 0c 0d 13 14		registerOffsets_operator1 .byte $03, $04, $05, $0B, $0C, $0D, $13, $14, $15 ;initializers for operator 2 */
>39146d	15
>39146e	10 13 14 12 15 11		drumOffsets               .byte $10, $13, $14, $12, $15, $11
>391474	10 08 04 02 01			drumBits                  .byte $10, $08, $04, $02, $01
>391479	20 40 60 80 e0 c0		instrumentBaseRegs        .byte $20, $40, $60, $80, $E0, $C0

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Instruments.asm

>39147f	00 24 4f f2 0b 00 0e 31		INSTRUMENT_ACCORDN    .text $00, $24, $4F, $F2, $0B, $00, $0E, $31, $00, $52, $0B, $00, 'ACCORDN   '
>391487	00 52 0b 00 41 43 43 4f 52 44 4e 20 20 20
>391495	00 31 43 6e 17 01 02 22		INSTRUMENT_BAGPIPE1   .text $00, $31, $43, $6E, $17, $01, $02, $22, $05, $8B, $0C, $02, 'BAGPIPE1  '
>39149d	05 8b 0c 02 42 41 47 50 49 50 45 31 20 20
>3914ab	00 30 00 ff a0 03 00 a3		INSTRUMENT_BAGPIPE2   .text $00, $30, $00, $FF, $A0, $03, $00, $A3, $00, $65, $0B, $02, 'BAGPIPE2  '
>3914b3	00 65 0b 02 42 41 47 50 49 50 45 32 20 20
>3914c1	00 31 87 a1 11 00 08 16		INSTRUMENT_BANJO1     .text $00, $31, $87, $A1, $11, $00, $08, $16, $80, $7D, $43, $00, 'BANJO1    '
>3914c9	80 7d 43 00 42 41 4e 4a 4f 31 20 20 20 20
>3914d7	00 01 15 25 2f 00 0a 21		INSTRUMENT_BASS1      .text $00, $01, $15, $25, $2F, $00, $0A, $21, $80, $65, $6C, $00, 'BASS1     '
>3914df	80 65 6c 00 42 41 53 53 31 20 20 20 20 20
>3914ed	00 01 1d f2 ef 00 0a 01		INSTRUMENT_BASS2      .text $00, $01, $1D, $F2, $EF, $00, $0A, $01, $00, $F5, $78, $00, 'BASS2     '
>3914f5	00 f5 78 00 42 41 53 53 32 20 20 20 20 20
>391503	00 c0 6d f9 01 01 0e 41		INSTRUMENT_BASSHARP   .text $00, $C0, $6D, $F9, $01, $01, $0E, $41, $00, $F2, $73, $00, 'BASSHARP  '
>39150b	00 f2 73 00 42 41 53 53 48 41 52 50 20 20
>391519	00 30 c8 d5 19 00 0c 71		INSTRUMENT_BASSOON1   .text $00, $30, $C8, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'BASSOON1  '
>391521	80 61 1b 00 42 41 53 53 4f 4f 4e 31 20 20
>39152f	00 c1 4f b1 53 03 06 e0		INSTRUMENT_BASSTRLG   .text $00, $C1, $4F, $B1, $53, $03, $06, $E0, $00, $12, $74, $03, 'BASSTRLG  '
>391537	00 12 74 03 42 41 53 53 54 52 4c 47 20 20
>391545	06 00 0b a8 4c 00 00 00		INSTRUMENT_BDRUM1     .text $06, $00, $0B, $A8, $4C, $00, $00, $00, $00, $00, $00, $00, 'BDRUM1    '
>39154d	00 00 00 00 42 44 52 55 4d 31 20 20 20 20
>39155b	00 64 db ff 01 00 04 3e		INSTRUMENT_BELLONG    .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F3, $62, $00, 'BELLONG   '
>391563	c0 f3 62 00 42 45 4c 4c 4f 4e 47 20 20 20
>391571	00 07 4f f2 60 00 08 12		INSTRUMENT_BELLS      .text $00, $07, $4F, $F2, $60, $00, $08, $12, $00, $F2, $72, $00, 'BELLS     '
>391579	00 f2 72 00 42 45 4c 4c 53 20 20 20 20 20
>391587	00 64 db ff 01 00 04 3e		INSTRUMENT_BELSHORT   .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F5, $F3, $00, 'BELSHORT  '
>39158f	c0 f5 f3 00 42 45 4c 53 48 4f 52 54 20 20
>39159d	00 20 4b 7b 04 01 0e 21		INSTRUMENT_BNCEBASS   .text $00, $20, $4B, $7B, $04, $01, $0E, $21, $00, $F5, $72, $00, 'BNCEBASS  '
>3915a5	00 f5 72 00 42 4e 43 45 42 41 53 53 20 20
>3915b3	00 21 16 71 ae 00 0e 21		INSTRUMENT_BRASS1     .text $00, $21, $16, $71, $AE, $00, $0E, $21, $00, $81, $9E, $00, 'BRASS1    '
>3915bb	00 81 9e 00 42 52 41 53 53 31 20 20 20 20
>3915c9	00 30 c5 52 11 00 00 31		INSTRUMENT_CBASSOON   .text $00, $30, $C5, $52, $11, $00, $00, $31, $80, $31, $2E, $00, 'CBASSOON  '
>3915d1	80 31 2e 00 43 42 41 53 53 4f 4f 4e 20 20
>3915df	00 33 87 01 10 00 08 14		INSTRUMENT_CELESTA    .text $00, $33, $87, $01, $10, $00, $08, $14, $80, $7D, $33, $00, 'CELESTA   '
>3915e7	80 7d 33 00 43 45 4c 45 53 54 41 20 20 20
>3915f5	00 32 16 73 24 00 0e 21		INSTRUMENT_CLAR1      .text $00, $32, $16, $73, $24, $00, $0E, $21, $80, $75, $57, $00, 'CLAR1     '
>3915fd	80 75 57 00 43 4c 41 52 31 20 20 20 20 20
>39160b	00 31 1c 41 1b 00 0c 60		INSTRUMENT_CLAR2      .text $00, $31, $1C, $41, $1B, $00, $0C, $60, $80, $42, $3B, $00, 'CLAR2     '
>391613	80 42 3b 00 43 4c 41 52 32 20 20 20 20 20
>391621	00 32 9a 51 1b 00 0c 61		INSTRUMENT_CLARINET   .text $00, $32, $9A, $51, $1B, $00, $0C, $61, $82, $A2, $3B, $00, 'CLARINET  '
>391629	82 a2 3b 00 43 4c 41 52 49 4e 45 54 20 20
>391637	00 11 0d f2 01 00 0a 15		INSTRUMENT_CLAVECIN   .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'CLAVECIN  '
>39163f	0d f2 b1 00 43 4c 41 56 45 43 49 4e 20 20
>39164d	00 00 02 f0 ff 00 06 11		INSTRUMENT_CROMORNE   .text $00, $00, $02, $F0, $FF, $00, $06, $11, $80, $F0, $FF, $00, 'CROMORNE  '
>391655	80 f0 ff 00 43 52 4f 4d 4f 52 4e 45 20 20
>391663	09 01 00 f5 b5 00 00 00		INSTRUMENT_CYMBAL1    .text $09, $01, $00, $F5, $B5, $00, $00, $00, $00, $00, $00, $00, 'CYMBAL1   '
>39166b	00 00 00 00 43 59 4d 42 41 4c 31 20 20 20
>391679	00 05 8a f0 7b 00 08 01		INSTRUMENT_ELCLAV1    .text $00, $05, $8A, $F0, $7B, $00, $08, $01, $80, $F4, $7B, $00, 'ELCLAV1   '
>391681	80 f4 7b 00 45 4c 43 4c 41 56 31 20 20 20
>39168f	00 01 49 f1 53 01 06 11		INSTRUMENT_ELCLAV2    .text $00, $01, $49, $F1, $53, $01, $06, $11, $00, $F1, $74, $02, 'ELCLAV2   '
>391697	00 f1 74 02 45 4c 43 4c 41 56 32 20 20 20
>3916a5	00 e0 6d 57 04 01 0e 61		INSTRUMENT_ELECFL     .text $00, $E0, $6D, $57, $04, $01, $0E, $61, $00, $67, $7D, $00, 'ELECFL    '
>3916ad	00 67 7d 00 45 4c 45 43 46 4c 20 20 20 20
>3916bb	00 13 97 9a 12 02 0e 91		INSTRUMENT_ELECVIBE   .text $00, $13, $97, $9A, $12, $02, $0E, $91, $80, $9B, $11, $00, 'ELECVIBE  '
>3916c3	80 9b 11 00 45 4c 45 43 56 49 42 45 20 20
>3916d1	00 f1 01 97 17 00 08 21		INSTRUMENT_ELGUIT1    .text $00, $F1, $01, $97, $17, $00, $08, $21, $0D, $F1, $18, $00, 'ELGUIT1   '
>3916d9	0d f1 18 00 45 4c 47 55 49 54 31 20 20 20
>3916e7	00 13 96 ff 21 00 0a 11		INSTRUMENT_ELGUIT2    .text $00, $13, $96, $FF, $21, $00, $0A, $11, $80, $FF, $03, $00, 'ELGUIT2   '
>3916ef	80 ff 03 00 45 4c 47 55 49 54 32 20 20 20
>3916fd	00 07 8f 82 7d 00 0c 14		INSTRUMENT_ELGUIT3    .text $00, $07, $8F, $82, $7D, $00, $0C, $14, $80, $82, $7D, $00, 'ELGUIT3   '
>391705	80 82 7d 00 45 4c 47 55 49 54 33 20 20 20
>391713	00 05 8f da 15 00 0a 01		INSTRUMENT_ELGUIT4    .text $00, $05, $8F, $DA, $15, $00, $0A, $01, $80, $F9, $14, $02, 'ELGUIT4   '
>39171b	80 f9 14 02 45 4c 47 55 49 54 34 20 20 20
>391729	00 b2 cd 91 2a 02 09 b1		INSTRUMENT_ELORGAN1   .text $00, $B2, $CD, $91, $2A, $02, $09, $B1, $80, $91, $2A, $01, 'ELORGAN1  '
>391731	80 91 2a 01 45 4c 4f 52 47 41 4e 31 20 20
>39173f	00 01 4f f1 50 00 06 01		INSTRUMENT_ELPIANO1   .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'ELPIANO1  '
>391747	04 d2 7c 00 45 4c 50 49 41 4e 4f 31 20 20
>391755	00 02 22 f2 13 00 0e 02		INSTRUMENT_ELPIANO2   .text $00, $02, $22, $F2, $13, $00, $0E, $02, $00, $F5, $43, $00, 'ELPIANO2  '
>39175d	00 f5 43 00 45 4c 50 49 41 4e 4f 32 20 20
>39176b	00 81 63 f3 58 00 00 01		INSTRUMENT_EPIANO1A   .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'EPIANO1A  '
>391773	80 f2 58 00 45 50 49 41 4e 4f 31 41 20 20
>391781	00 07 1f f5 fa 00 0e 01		INSTRUMENT_EPIANO1B   .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'EPIANO1B  '
>391789	57 f5 fa 00 45 50 49 41 4e 4f 31 42 20 20
>391797	00 21 83 74 17 00 07 a2		INSTRUMENT_FLUTE      .text $00, $21, $83, $74, $17, $00, $07, $A2, $8D, $65, $17, $00, 'FLUTE     '
>39179f	8d 65 17 00 46 4c 55 54 45 20 20 20 20 20
>3917ad	00 a1 27 74 8f 00 02 a1		INSTRUMENT_FLUTE1     .text $00, $A1, $27, $74, $8F, $00, $02, $A1, $80, $65, $2A, $00, 'FLUTE1    '
>3917b5	80 65 2a 00 46 4c 55 54 45 31 20 20 20 20
>3917c3	00 e0 ec 6e 8f 00 0e 61		INSTRUMENT_FLUTE2     .text $00, $E0, $EC, $6E, $8F, $00, $0E, $61, $00, $65, $2A, $00, 'FLUTE2    '
>3917cb	00 65 2a 00 46 4c 55 54 45 32 20 20 20 20
>3917d9	00 21 9f 53 5a 00 0c 21		INSTRUMENT_FRHORN1    .text $00, $21, $9F, $53, $5A, $00, $0C, $21, $80, $AA, $1A, $00, 'FRHORN1   '
>3917e1	80 aa 1a 00 46 52 48 4f 52 4e 31 20 20 20
>3917ef	00 20 8e a5 8f 02 06 21		INSTRUMENT_FRHORN2    .text $00, $20, $8E, $A5, $8F, $02, $06, $21, $00, $36, $3D, $00, 'FRHORN2   '
>3917f7	00 36 3d 00 46 52 48 4f 52 4e 32 20 20 20
>391805	00 f0 18 55 ef 02 00 e0		INSTRUMENT_FSTRP1     .text $00, $F0, $18, $55, $EF, $02, $00, $E0, $80, $87, $1E, $03, 'FSTRP1    '
>39180d	80 87 1e 03 46 53 54 52 50 31 20 20 20 20
>39181b	00 70 16 55 2f 02 0c e0		INSTRUMENT_FSTRP2     .text $00, $70, $16, $55, $2F, $02, $0C, $E0, $80, $87, $1E, $03, 'FSTRP2    '
>391823	80 87 1e 03 46 53 54 52 50 32 20 20 20 20
>391831	00 f1 00 97 13 00 0a 25		INSTRUMENT_FUZGUIT1   .text $00, $F1, $00, $97, $13, $00, $0A, $25, $0D, $F1, $18, $01, 'FUZGUIT1  '
>391839	0d f1 18 01 46 55 5a 47 55 49 54 31 20 20
>391847	00 31 48 f1 53 00 06 32		INSTRUMENT_FUZGUIT2   .text $00, $31, $48, $F1, $53, $00, $06, $32, $00, $F2, $27, $02, 'FUZGUIT2  '
>39184f	00 f2 27 02 46 55 5a 47 55 49 54 32 20 20
>39185d	00 01 11 f2 1f 00 0a 01		INSTRUMENT_GUITAR1    .text $00, $01, $11, $F2, $1F, $00, $0A, $01, $00, $F5, $88, $00, 'GUITAR1   '
>391865	00 f5 88 00 47 55 49 54 41 52 31 20 20 20
>391873	00 02 29 f5 75 00 00 01		INSTRUMENT_HARP1      .text $00, $02, $29, $F5, $75, $00, $00, $01, $83, $F2, $F3, $00, 'HARP1     '
>39187b	83 f2 f3 00 48 41 52 50 31 20 20 20 20 20
>391889	00 02 99 f5 55 00 00 01		INSTRUMENT_HARP2      .text $00, $02, $99, $F5, $55, $00, $00, $01, $80, $F6, $53, $00, 'HARP2     '
>391891	80 f6 53 00 48 41 52 50 32 20 20 20 20 20
>39189f	00 02 57 f5 56 00 00 01		INSTRUMENT_HARP3      .text $00, $02, $57, $F5, $56, $00, $00, $01, $80, $F6, $54, $00, 'HARP3     '
>3918a7	80 f6 54 00 48 41 52 50 33 20 20 20 20 20
>3918b5	00 02 29 f5 75 00 00 01		INSTRUMENT_HARPE1     .text $00, $02, $29, $F5, $75, $00, $00, $01, $03, $F2, $F3, $00, 'HARPE1    '
>3918bd	03 f2 f3 00 48 41 52 50 45 31 20 20 20 20
>3918cb	00 32 87 a1 10 00 08 16		INSTRUMENT_HARPSI1    .text $00, $32, $87, $A1, $10, $00, $08, $16, $80, $7D, $33, $00, 'HARPSI1   '
>3918d3	80 7d 33 00 48 41 52 50 53 49 31 20 20 20
>3918e1	00 33 87 a1 10 00 06 15		INSTRUMENT_HARPSI2    .text $00, $33, $87, $A1, $10, $00, $06, $15, $80, $7D, $43, $00, 'HARPSI2   '
>3918e9	80 7d 43 00 48 41 52 50 53 49 32 20 20 20
>3918f7	00 35 84 a8 10 00 08 18		INSTRUMENT_HARPSI3    .text $00, $35, $84, $A8, $10, $00, $08, $18, $80, $7D, $33, $00, 'HARPSI3   '
>3918ff	80 7d 33 00 48 41 52 50 53 49 33 20 20 20
>39190d	00 11 0d f2 01 00 0a 15		INSTRUMENT_HARPSI4    .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'HARPSI4   '
>391915	0d f2 b1 00 48 41 52 50 53 49 34 20 20 20
>391923	00 36 87 8a 00 00 08 1a		INSTRUMENT_HARPSI5    .text $00, $36, $87, $8A, $00, $00, $08, $1A, $80, $7F, $33, $00, 'HARPSI5   '
>39192b	80 7f 33 00 48 41 52 50 53 49 35 20 20 20
>391939	00 f0 00 1e 11 01 08 e2		INSTRUMENT_HELICPTR   .text $00, $F0, $00, $1E, $11, $01, $08, $E2, $C0, $11, $11, $01, 'HELICPTR  '
>391941	c0 11 11 01 48 45 4c 49 43 50 54 52 20 20
>39194f	0a 01 00 f7 b5 00 00 00		INSTRUMENT_HIHAT1     .text $0A, $01, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'HIHAT1    '
>391957	00 00 00 00 48 49 48 41 54 31 20 20 20 20
>391965	0a 01 03 da 18 00 00 00		INSTRUMENT_HIHAT2     .text $0A, $01, $03, $DA, $18, $00, $00, $00, $00, $00, $00, $00, 'HIHAT2    '
>39196d	00 00 00 00 48 49 48 41 54 32 20 20 20 20
>39197b	00 87 4d 78 42 00 0a 94		INSTRUMENT_JAVAICAN   .text $00, $87, $4D, $78, $42, $00, $0A, $94, $00, $85, $54, $00, 'JAVAICAN  '
>391983	00 85 54 00 4a 41 56 41 49 43 41 4e 20 20
>391991	00 03 5e 85 51 01 0e 11		INSTRUMENT_JAZZGUIT   .text $00, $03, $5E, $85, $51, $01, $0E, $11, $00, $D2, $71, $00, 'JAZZGUIT  '
>391999	00 d2 71 00 4a 41 5a 5a 47 55 49 54 20 20
>3919a7	00 00 50 f2 70 00 0e 13		INSTRUMENT_JEWSHARP   .text $00, $00, $50, $F2, $70, $00, $0E, $13, $00, $F2, $72, $00, 'JEWSHARP  '
>3919af	00 f2 72 00 4a 45 57 53 48 41 52 50 20 20
>3919bd	00 00 02 f0 fa 01 06 11		INSTRUMENT_KEYBRD1    .text $00, $00, $02, $F0, $FA, $01, $06, $11, $80, $F2, $FA, $01, 'KEYBRD1   '
>3919c5	80 f2 fa 01 4b 45 59 42 52 44 31 20 20 20
>3919d3	00 01 8f f2 bd 00 08 14		INSTRUMENT_KEYBRD2    .text $00, $01, $8F, $F2, $BD, $00, $08, $14, $80, $82, $BD, $00, 'KEYBRD2   '
>3919db	80 82 bd 00 4b 45 59 42 52 44 32 20 20 20
>3919e9	00 01 00 f0 f0 00 00 e4		INSTRUMENT_KEYBRD3    .text $00, $01, $00, $F0, $F0, $00, $00, $E4, $03, $F3, $36, $00, 'KEYBRD3   '
>3919f1	03 f3 36 00 4b 45 59 42 52 44 33 20 20 20
>3919ff	09 e6 00 25 b5 00 00 00		INSTRUMENT_LASER      .text $09, $E6, $00, $25, $B5, $00, $00, $00, $00, $00, $00, $00, 'LASER     '
>391a07	00 00 00 00 4c 41 53 45 52 20 20 20 20 20
>391a15	00 32 44 f8 ff 00 0e 11		INSTRUMENT_LOGDRUM1   .text $00, $32, $44, $F8, $FF, $00, $0E, $11, $00, $F5, $7F, $00, 'LOGDRUM1  '
>391a1d	00 f5 7f 00 4c 4f 47 44 52 55 4d 31 20 20
>391a2b	00 05 4e da 25 00 0a 01		INSTRUMENT_MARIMBA1   .text $00, $05, $4E, $DA, $25, $00, $0A, $01, $00, $F9, $15, $00, 'MARIMBA1  '
>391a33	00 f9 15 00 4d 41 52 49 4d 42 41 31 20 20
>391a41	00 85 4e da 15 00 0a 81		INSTRUMENT_MARIMBA2   .text $00, $85, $4E, $DA, $15, $00, $0A, $81, $80, $F9, $13, $00, 'MARIMBA2  '
>391a49	80 f9 13 00 4d 41 52 49 4d 42 41 32 20 20
>391a57	00 30 00 fe 11 01 08 ae		INSTRUMENT_MDRNPHON   .text $00, $30, $00, $FE, $11, $01, $08, $AE, $C0, $F1, $19, $01, 'MDRNPHON  '
>391a5f	c0 f1 19 01 4d 44 52 4e 50 48 4f 4e 20 20
>391a6d	07 0c 00 c8 b6 01 00 00		INSTRUMENT_MLTRDRUM   .text $07, $0C, $00, $C8, $B6, $01, $00, $00, $00, $00, $00, $00, 'MLTRDRUM  '
>391a75	00 00 00 00 4d 4c 54 52 44 52 55 4d 20 20
>391a83	00 20 90 f5 9e 02 0c 11		INSTRUMENT_MOOGSYNT   .text $00, $20, $90, $F5, $9E, $02, $0C, $11, $00, $F4, $5B, $03, 'MOOGSYNT  '
>391a8b	00 f4 5b 03 4d 4f 4f 47 53 59 4e 54 20 20
>391a99	00 0e 40 d1 53 00 0e 0e		INSTRUMENT_NOISE1     .text $00, $0E, $40, $D1, $53, $00, $0E, $0E, $00, $F2, $7F, $03, 'NOISE1    '
>391aa1	00 f2 7f 03 4e 4f 49 53 45 31 20 20 20 20
>391aaf	00 b1 c5 6e 17 00 02 22		INSTRUMENT_OBOE1      .text $00, $B1, $C5, $6E, $17, $00, $02, $22, $05, $8B, $0E, $00, 'OBOE1     '
>391ab7	05 8b 0e 00 4f 42 4f 45 31 20 20 20 20 20
>391ac5	00 65 d2 81 03 00 02 71		INSTRUMENT_ORGAN1     .text $00, $65, $D2, $81, $03, $00, $02, $71, $80, $F1, $05, $00, 'ORGAN1    '
>391acd	80 f1 05 00 4f 52 47 41 4e 31 20 20 20 20
>391adb	00 24 80 ff 0f 00 01 21		INSTRUMENT_ORGAN2     .text $00, $24, $80, $FF, $0F, $00, $01, $21, $80, $FF, $0F, $00, 'ORGAN2    '
>391ae3	80 ff 0f 00 4f 52 47 41 4e 32 20 20 20 20
>391af1	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3     .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $80, $F0, $1F, $00, 'ORGAN3    '
>391af9	80 f0 1f 00 4f 52 47 41 4e 33 20 20 20 20
>391b07	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3A    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $8D, $F0, $13, $00, 'ORGAN3A   '
>391b0f	8d f0 13 00 4f 52 47 41 4e 33 41 20 20 20
>391b1d	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3B    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $92, $F0, $12, $00, 'ORGAN3B   '
>391b25	92 f0 12 00 4f 52 47 41 4e 33 42 20 20 20
>391b33	00 0c 00 f8 b5 00 01 00		INSTRUMENT_ORGNPERC   .text $00, $0C, $00, $F8, $B5, $00, $01, $00, $00, $D6, $4F, $00, 'ORGNPERC  '
>391b3b	00 d6 4f 00 4f 52 47 4e 50 45 52 43 20 20
>391b49	00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE1     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F1, $B2, $00, 'PHONE1    '
>391b51	08 f1 b2 00 50 48 4f 4e 45 31 20 20 20 20
>391b5f	00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE2     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $0A, $F1, $B4, $00, 'PHONE2    '
>391b67	0a f1 b4 00 50 48 4f 4e 45 32 20 20 20 20
>391b75	00 81 63 f3 58 00 00 01		INSTRUMENT_PIAN1A     .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'PIAN1A    '
>391b7d	80 f2 58 00 50 49 41 4e 31 41 20 20 20 20
>391b8b	00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1B     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $26, $F5, $FA, $00, 'PIAN1B    '
>391b93	26 f5 fa 00 50 49 41 4e 31 42 20 20 20 20
>391ba1	00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1C     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'PIAN1C    '
>391ba9	57 f5 fa 00 50 49 41 4e 31 43 20 20 20 20
>391bb7	00 03 4f f1 53 00 06 17		INSTRUMENT_PIANO      .text $00, $03, $4F, $F1, $53, $00, $06, $17, $00, $F2, $74, $00, 'PIANO     '
>391bbf	00 f2 74 00 50 49 41 4e 4f 20 20 20 20 20
>391bcd	00 01 4f f1 53 00 06 11		INSTRUMENT_PIANO1     .text $00, $01, $4F, $F1, $53, $00, $06, $11, $00, $D2, $74, $00, 'PIANO1    '
>391bd5	00 d2 74 00 50 49 41 4e 4f 31 20 20 20 20
>391be3	00 41 9d f2 51 00 06 13		INSTRUMENT_PIANO2     .text $00, $41, $9D, $F2, $51, $00, $06, $13, $00, $F2, $F1, $00, 'PIANO2    '
>391beb	00 f2 f1 00 50 49 41 4e 4f 32 20 20 20 20
>391bf9	00 01 4f f1 50 00 06 01		INSTRUMENT_PIANO3     .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'PIANO3    '
>391c01	04 d2 7c 00 50 49 41 4e 4f 33 20 20 20 20
>391c0f	00 01 4d f1 60 00 08 11		INSTRUMENT_PIANO4     .text $00, $01, $4D, $F1, $60, $00, $08, $11, $00, $D2, $7B, $00, 'PIANO4    '
>391c17	00 d2 7b 00 50 49 41 4e 4f 34 20 20 20 20
>391c25	00 03 4f f1 53 00 06 17		INSTRUMENT_PIANOBEL   .text $00, $03, $4F, $F1, $53, $00, $06, $17, $03, $F2, $74, $00, 'PIANOBEL  '
>391c2d	03 f2 74 00 50 49 41 4e 4f 42 45 4c 20 20
>391c3b	00 01 cf f1 53 00 02 12		INSTRUMENT_PIANOF     .text $00, $01, $CF, $F1, $53, $00, $02, $12, $00, $F2, $83, $00, 'PIANOF    '
>391c43	00 f2 83 00 50 49 41 4e 4f 46 20 20 20 20
>391c51	00 10 00 75 93 01 00 01		INSTRUMENT_POPBASS1   .text $00, $10, $00, $75, $93, $01, $00, $01, $00, $F5, $82, $01, 'POPBASS1  '
>391c59	00 f5 82 01 50 4f 50 42 41 53 53 31 20 20
>391c67	07 0c 00 c7 b4 00 00 00		INSTRUMENT_RKSNARE1   .text $07, $0C, $00, $C7, $B4, $00, $00, $00, $00, $00, $00, $00, 'RKSNARE1  '
>391c6f	00 00 00 00 52 4b 53 4e 41 52 45 31 20 20
>391c7d	00 01 4f 71 53 00 0a 12		INSTRUMENT_SAX1       .text $00, $01, $4F, $71, $53, $00, $0A, $12, $00, $52, $7C, $00, 'SAX1      '
>391c85	00 52 7c 00 53 41 58 31 20 20 20 20 20 20
>391c93	00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH    .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH   '
>391c9b	00 5c dc 00 53 43 52 41 54 43 48 20 20 20
>391ca9	00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH4   .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH4  '
>391cb1	00 5c dc 00 53 43 52 41 54 43 48 34 20 20
>391cbf	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SDRUM2     .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SDRUM2    '
>391cc7	00 f6 b4 00 53 44 52 55 4d 32 20 20 20 20
>391cd5	00 e4 0e ff 3f 01 00 c0		INSTRUMENT_SHRTVIBE   .text $00, $E4, $0E, $FF, $3F, $01, $00, $C0, $00, $F3, $07, $00, 'SHRTVIBE  '
>391cdd	00 f3 07 00 53 48 52 54 56 49 42 45 20 20
>391ceb	00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR1     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $00, 'SITAR1    '
>391cf3	40 f1 53 00 53 49 54 41 52 31 20 20 20 20
>391d01	00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR2     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $01, 'SITAR2    '
>391d09	40 f1 53 01 53 49 54 41 52 32 20 20 20 20
>391d17	00 61 0c 81 03 00 08 71		INSTRUMENT_SNAKEFL    .text $00, $61, $0C, $81, $03, $00, $08, $71, $80, $61, $0C, $00, 'SNAKEFL   '
>391d1f	80 61 0c 00 53 4e 41 4b 45 46 4c 20 20 20
>391d2d	07 0c 00 f8 b5 00 00 00		INSTRUMENT_SNARE1     .text $07, $0C, $00, $F8, $B5, $00, $00, $00, $00, $00, $00, $00, 'SNARE1    '
>391d35	00 00 00 00 53 4e 41 52 45 31 20 20 20 20
>391d43	00 06 00 f0 f0 00 0e c4		INSTRUMENT_SNRSUST    .text $00, $06, $00, $F0, $F0, $00, $0E, $C4, $03, $C4, $34, $00, 'SNRSUST   '
>391d4b	03 c4 34 00 53 4e 52 53 55 53 54 20 20 20
>391d59	00 70 1c 51 03 02 0e 20		INSTRUMENT_SOLOVLN    .text $00, $70, $1C, $51, $03, $02, $0E, $20, $00, $54, $67, $02, 'SOLOVLN   '
>391d61	00 54 67 02 53 4f 4c 4f 56 4c 4e 20 20 20
>391d6f	00 01 46 f1 83 00 06 61		INSTRUMENT_STEELGT1   .text $00, $01, $46, $F1, $83, $00, $06, $61, $03, $31, $86, $00, 'STEELGT1  '
>391d77	03 31 86 00 53 54 45 45 4c 47 54 31 20 20
>391d85	00 01 47 f1 83 00 06 61		INSTRUMENT_STEELGT2   .text $00, $01, $47, $F1, $83, $00, $06, $61, $03, $91, $86, $00, 'STEELGT2  '
>391d8d	03 91 86 00 53 54 45 45 4c 47 54 32 20 20
>391d9b	00 b1 8b 71 11 00 06 61		INSTRUMENT_STRINGS1   .text $00, $B1, $8B, $71, $11, $00, $06, $61, $40, $42, $15, $01, 'STRINGS1  '
>391da3	40 42 15 01 53 54 52 49 4e 47 53 31 20 20
>391db1	00 e1 4f b1 d3 03 06 21		INSTRUMENT_STRNLONG   .text $00, $E1, $4F, $B1, $D3, $03, $06, $21, $00, $12, $74, $01, 'STRNLONG  '
>391db9	00 12 74 01 53 54 52 4e 4c 4f 4e 47 20 20
>391dc7	00 55 97 2a 02 00 00 12		INSTRUMENT_SYN1       .text $00, $55, $97, $2A, $02, $00, $00, $12, $80, $42, $F3, $00, 'SYN1      '
>391dcf	80 42 f3 00 53 59 4e 31 20 20 20 20 20 20
>391ddd	00 13 97 9a 12 00 0e 11		INSTRUMENT_SYN2       .text $00, $13, $97, $9A, $12, $00, $0E, $11, $80, $9B, $14, $00, 'SYN2      '
>391de5	80 9b 14 00 53 59 4e 32 20 20 20 20 20 20
>391df3	00 11 8a f1 11 00 06 01		INSTRUMENT_SYN3       .text $00, $11, $8A, $F1, $11, $00, $06, $01, $40, $F1, $B3, $00, 'SYN3      '
>391dfb	40 f1 b3 00 53 59 4e 33 20 20 20 20 20 20
>391e09	00 21 0d e9 3a 00 0a 22		INSTRUMENT_SYN4       .text $00, $21, $0D, $E9, $3A, $00, $0A, $22, $80, $65, $6C, $00, 'SYN4      '
>391e11	80 65 6c 00 53 59 4e 34 20 20 20 20 20 20
>391e1f	00 01 4f 71 53 00 06 19		INSTRUMENT_SYN5       .text $00, $01, $4F, $71, $53, $00, $06, $19, $00, $52, $7C, $00, 'SYN5      '
>391e27	00 52 7c 00 53 59 4e 35 20 20 20 20 20 20
>391e35	00 24 0f 41 7e 00 0a 21		INSTRUMENT_SYN6       .text $00, $24, $0F, $41, $7E, $00, $0A, $21, $00, $F1, $5E, $00, 'SYN6      '
>391e3d	00 f1 5e 00 53 59 4e 36 20 20 20 20 20 20
>391e4b	00 07 87 f0 05 00 04 01		INSTRUMENT_SYN9       .text $00, $07, $87, $F0, $05, $00, $04, $01, $80, $F0, $05, $00, 'SYN9      '
>391e53	80 f0 05 00 53 59 4e 39 20 20 20 20 20 20
>391e61	00 26 03 e0 f0 00 08 1e		INSTRUMENT_SYNBAL1    .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'SYNBAL1   '
>391e69	00 ff 31 00 53 59 4e 42 41 4c 31 20 20 20
>391e77	00 28 03 e0 f0 00 04 13		INSTRUMENT_SYNBAL2    .text $00, $28, $03, $E0, $F0, $00, $04, $13, $00, $E8, $11, $00, 'SYNBAL2   '
>391e7f	00 e8 11 00 53 59 4e 42 41 4c 32 20 20 20
>391e8d	00 30 88 d5 19 00 0c 71		INSTRUMENT_SYNBASS1   .text $00, $30, $88, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'SYNBASS1  '
>391e95	80 61 1b 00 53 59 4e 42 41 53 53 31 20 20
>391ea3	00 81 86 65 01 00 0c 11		INSTRUMENT_SYNBASS2   .text $00, $81, $86, $65, $01, $00, $0C, $11, $00, $32, $74, $00, 'SYNBASS2  '
>391eab	00 32 74 00 53 59 4e 42 41 53 53 32 20 20
>391eb9	00 81 83 65 05 00 0a 51		INSTRUMENT_SYNBASS4   .text $00, $81, $83, $65, $05, $00, $0A, $51, $00, $32, $74, $00, 'SYNBASS4  '
>391ec1	00 32 74 00 53 59 4e 42 41 53 53 34 20 20
>391ecf	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR1    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F8, $B6, $00, 'SYNSNR1   '
>391ed7	00 f8 b6 00 53 59 4e 53 4e 52 31 20 20 20
>391ee5	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR2    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SYNSNR2   '
>391eed	00 f6 b4 00 53 59 4e 53 4e 52 32 20 20 20
>391efb	00 8f 81 ef 01 00 04 01		INSTRUMENT_TINCAN1    .text $00, $8F, $81, $EF, $01, $00, $04, $01, $00, $98, $F1, $00, 'TINCAN1   '
>391f03	00 98 f1 00 54 49 4e 43 41 4e 31 20 20 20
>391f11	08 04 00 f7 b5 00 00 00		INSTRUMENT_TOM1       .text $08, $04, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'TOM1      '
>391f19	00 00 00 00 54 4f 4d 31 20 20 20 20 20 20
>391f27	08 02 00 c8 97 00 00 00		INSTRUMENT_TOM2       .text $08, $02, $00, $C8, $97, $00, $00, $00, $00, $00, $00, $00, 'TOM2      '
>391f2f	00 00 00 00 54 4f 4d 32 20 20 20 20 20 20
>391f3d	00 17 4f f2 61 00 08 12		INSTRUMENT_TRAINBEL   .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F2, $74, $00, 'TRAINBEL  '
>391f45	08 f2 74 00 54 52 41 49 4e 42 45 4c 20 20
>391f53	00 26 03 e0 f0 00 08 1e		INSTRUMENT_TRIANGLE   .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'TRIANGLE  '
>391f5b	00 ff 31 00 54 52 49 41 4e 47 4c 45 20 20
>391f69	00 b1 1c 41 1f 00 0e 61		INSTRUMENT_TROMB1     .text $00, $B1, $1C, $41, $1F, $00, $0E, $61, $80, $92, $3B, $00, 'TROMB1    '
>391f71	80 92 3b 00 54 52 4f 4d 42 31 20 20 20 20
>391f7f	00 21 1c 53 1d 00 0c 61		INSTRUMENT_TROMB2     .text $00, $21, $1C, $53, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TROMB2    '
>391f87	80 52 3b 00 54 52 4f 4d 42 32 20 20 20 20
>391f95	00 31 1c 41 0b 00 0e 61		INSTRUMENT_TRUMPET1   .text $00, $31, $1C, $41, $0B, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET1  '
>391f9d	80 92 3b 00 54 52 55 4d 50 45 54 31 20 20
>391fab	00 31 1c 23 1d 00 0c 61		INSTRUMENT_TRUMPET2   .text $00, $31, $1C, $23, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TRUMPET2  '
>391fb3	80 52 3b 00 54 52 55 4d 50 45 54 32 20 20
>391fc1	00 31 1c 41 01 00 0e 61		INSTRUMENT_TRUMPET3   .text $00, $31, $1C, $41, $01, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET3  '
>391fc9	80 92 3b 00 54 52 55 4d 50 45 54 33 20 20
>391fd7	00 31 1c 41 0b 00 0c 61		INSTRUMENT_TRUMPET4   .text $00, $31, $1C, $41, $0B, $00, $0C, $61, $80, $92, $3B, $00, 'TRUMPET4  '
>391fdf	80 92 3b 00 54 52 55 4d 50 45 54 34 20 20
>391fed	00 21 19 43 8c 00 0c 21		INSTRUMENT_TUBA1      .text $00, $21, $19, $43, $8C, $00, $0C, $21, $80, $85, $2F, $00, 'TUBA1     '
>391ff5	80 85 2f 00 54 55 42 41 31 20 20 20 20 20
>392003	00 84 53 f5 33 00 06 a0		INSTRUMENT_VIBRA1     .text $00, $84, $53, $F5, $33, $00, $06, $A0, $80, $FD, $25, $00, 'VIBRA1    '
>39200b	80 fd 25 00 56 49 42 52 41 31 20 20 20 20
>392019	00 06 73 f6 54 00 00 81		INSTRUMENT_VIBRA2     .text $00, $06, $73, $F6, $54, $00, $00, $81, $03, $F2, $B3, $00, 'VIBRA2    '
>392021	03 f2 b3 00 56 49 42 52 41 32 20 20 20 20
>39202f	00 93 97 aa 12 02 0e 91		INSTRUMENT_VIBRA3     .text $00, $93, $97, $AA, $12, $02, $0E, $91, $80, $AC, $21, $00, 'VIBRA3    '
>392037	80 ac 21 00 56 49 42 52 41 33 20 20 20 20
>392045	00 31 1c 51 03 00 0e 61		INSTRUMENT_VIOLIN1    .text $00, $31, $1C, $51, $03, $00, $0E, $61, $80, $54, $67, $00, 'VIOLIN1   '
>39204d	80 54 67 00 56 49 4f 4c 49 4e 31 20 20 20
>39205b	00 e1 88 62 29 00 0c 22		INSTRUMENT_VIOLIN2    .text $00, $E1, $88, $62, $29, $00, $0C, $22, $80, $53, $2C, $00, 'VIOLIN2   '
>392063	80 53 2c 00 56 49 4f 4c 49 4e 32 20 20 20
>392071	00 e1 88 64 29 00 06 22		INSTRUMENT_VIOLIN3    .text $00, $E1, $88, $64, $29, $00, $06, $22, $83, $53, $2C, $00, 'VIOLIN3   '
>392079	83 53 2c 00 56 49 4f 4c 49 4e 33 20 20 20
>392087	00 31 9c f1 f9 00 0e 31		INSTRUMENT_VLNPIZZ1   .text $00, $31, $9C, $F1, $F9, $00, $0E, $31, $80, $F7, $E6, $00, 'VLNPIZZ1  '
>39208f	80 f7 e6 00 56 4c 4e 50 49 5a 5a 31 20 20
>39209d	00 00 02 00 f0 00 0e 14		INSTRUMENT_WAVE       .text $00, $00, $02, $00, $F0, $00, $0E, $14, $80, $1B, $A2, $00, 'WAVE      '
>3920a5	80 1b a2 00 57 41 56 45 20 20 20 20 20 20
>3920b3	00 11 2d c8 2f 00 0c 31		INSTRUMENT_XYLO1      .text $00, $11, $2D, $C8, $2F, $00, $0C, $31, $00, $F5, $F5, $00, 'XYLO1     '
>3920bb	00 f5 f5 00 58 59 4c 4f 31 20 20 20 20 20
>3920c9	06 2e 00 ff 0f 00 00 00		INSTRUMENT_XYLO2      .text $06, $2E, $00, $FF, $0F, $00, $00, $00, $00, $00, $00, $00, 'XYLO2     '
>3920d1	00 00 00 00 58 59 4c 4f 32 20 20 20 20 20
>3920df	00 06 00 ff f0 00 0e c4		INSTRUMENT_XYLO3      .text $00, $06, $00, $FF, $F0, $00, $0E, $C4, $00, $F8, $B5, $00, 'XYLO3     '
>3920e7	00 f8 b5 00 58 59 4c 4f 33 20 20 20 20 20

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Drums.asm

>3920f5	00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP2         .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>3920fd	00 87 fa 00
>392101	00 01 00 78 97 09 00 02		DRUMINS_SCRATCH1      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>392109	00 88 98 03
>39210d	00 01 00 78 97 09 00 02		DRUMINS_SCRATCH2      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>392115	00 88 98 03
>392119	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT2      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>392121	00 f9 69 00
>392125	00 00 00 f8 6c 01 00 0e		DRUMINS_HIQ           .text $00, $00, $00, $F8, $6C, $01, $00, $0E, $80, $E8, $4A, $00
>39212d	80 e8 4a 00
>392131	00 25 1b fa f2 01 00 12		DRUMINS_WOODBLOK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>392139	00 f6 9a 00
>39213d	00 06 03 f4 44 00 01 01		DRUMINS_GLOCK         .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>392145	1b f2 34 00
>392149	00 00 00 f9 f3 05 00 01		DRUMINS_BASS_DR2      .text $00, $00, $00, $F9, $F3, $05, $00, $01, $00, $F7, $8A, $00
>392151	00 f7 8a 00
>392155	00 01 07 fa fd 05 00 01		DRUMINS_BASS_DR1      .text $00, $01, $07, $FA, $FD, $05, $00, $01, $00, $F6, $47, $00
>39215d	00 f6 47 00
>392161	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT       .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>392169	00 f9 69 00
>39216d	00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_AC      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>392175	00 f7 a9 00
>392179	00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP          .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>392181	00 87 fa 00
>392185	00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_EL      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>39218d	00 f7 a9 00
>392191	00 06 0a fa 1f 0c 00 11		DRUMINS_LO_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>392199	00 f5 f5 00
>39219d	00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_CL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>3921a5	06 b8 d8 03
>3921a9	00 06 0a fa 1f 0c 00 11		DRUMINS_HI_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>3921b1	00 f5 f5 00
>3921b5	00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_PL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>3921bd	06 b8 d8 03
>3921c1	00 06 0a fa 1f 0c 00 11		DRUMINS_LOW_TOM       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>3921c9	00 f5 f5 00
>3921cd	00 2e 00 82 f6 05 00 04		DRUMINS_HIHAT_OP      .text $00, $2E, $00, $82, $F6, $05, $00, $04, $10, $74, $F8, $03
>3921d5	10 74 f8 03
>3921d9	00 06 0a fa 1f 0c 00 11		DRUMINS_LTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>3921e1	00 f5 f5 00
>3921e5	00 06 0a fa 1f 0c 00 11		DRUMINS_HTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>3921ed	00 f5 f5 00
>3921f1	00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH         .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>3921f9	05 c5 d4 03
>3921fd	00 06 0a fa 1f 0c 00 11		DRUMINS_TOM_HIGH      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>392205	00 f5 f5 00
>392209	00 29 10 94 00 0f 00 04		DRUMINS_RIDE_CY       .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>392211	04 f9 44 03
>392215	00 2c 00 9f 00 0f 02 0e		DRUMINS_TAMBOUR       .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>39221d	05 c5 d4 03
>392221	00 29 10 94 00 0f 00 04		DRUMINS_CYMBAL        .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>392229	04 f9 44 03
>39222d	00 2e 09 f5 f1 01 00 06		DRUMINS_TAMBOU2       .text $00, $2E, $09, $F5, $F1, $01, $00, $06, $03, $87, $F7, $03
>392235	03 87 f7 03
>392239	00 2c 00 9f 00 0f 02 0e		DRUMINS_SPLASH        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>392241	05 c5 d4 03
>392245	00 37 14 f7 a1 09 01 03		DRUMINS_COWBELL       .text $00, $37, $14, $F7, $A1, $09, $01, $03, $00, $F6, $28, $00
>39224d	00 f6 28 00
>392251	00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH2        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>392259	05 c5 d4 03
>39225d	00 80 00 ff 00 0d 01 00		DRUMINS_VIBRASLA      .text $00, $80, $00, $FF, $00, $0D, $01, $00, $00, $F5, $F7, $01
>392265	00 f5 f7 01
>392269	00 29 10 94 00 0f 00 04		DRUMINS_RIDE2         .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>392271	04 f9 44 03
>392275	00 25 c4 fa fa 01 00 03		DRUMINS_HI_BONGO      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>39227d	00 99 f9 00
>392281	00 21 03 fb fa 01 01 02		DRUMINS_LO_BONGO      .text $00, $21, $03, $FB, $FA, $01, $01, $02, $00, $A8, $F7, $00
>392289	00 a8 f7 00
>39228d	00 25 c4 fa fa 01 00 03		DRUMINS_MUTECONG      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>392295	00 99 f9 00
>392299	00 24 18 f9 fa 0f 02 03		DRUMINS_OPENCONG      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>3922a1	00 a6 f6 00
>3922a5	00 24 18 f9 fa 0f 02 03		DRUMINS_LOWCONGA      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>3922ad	00 a6 f6 00
>3922b1	00 05 14 f5 f5 07 02 03		DRUMINS_HI_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>3922b9	00 f6 36 02
>3922bd	00 05 14 f5 f5 07 02 03		DRUMINS_LO_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>3922c5	00 f6 36 02
>3922c9	00 1c 0c f9 31 0f 01 15		DRUMINS_HI_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>3922d1	00 96 e8 01
>3922d5	00 1c 0c f9 31 0f 01 15		DRUMINS_LO_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>3922dd	00 96 e8 01
>3922e1	00 0e 00 ff 01 0f 00 0e		DRUMINS_CABASA        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>3922e9	02 79 77 03
>3922ed	00 0e 00 ff 01 0f 00 0e		DRUMINS_MARACAS       .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>3922f5	02 79 77 03
>3922f9	00 20 15 af 07 05 01 0e		DRUMINS_S_WHISTL      .text $00, $20, $15, $AF, $07, $05, $01, $0E, $00, $A5, $2B, $02
>392301	00 a5 2b 02
>392305	00 20 18 bf 07 01 01 0e		DRUMINS_L_WHISTL      .text $00, $20, $18, $BF, $07, $01, $01, $0E, $00, $93, $3B, $02
>39230d	00 93 3b 02
>392311	00 20 00 f0 f7 0b 00 08		DRUMINS_S_GUIRO       .text $00, $20, $00, $F0, $F7, $0B, $00, $08, $01, $89, $3B, $03
>392319	01 89 3b 03
>39231d	00 20 00 f3 fa 09 00 08		DRUMINS_L_GUIRO       .text $00, $20, $00, $F3, $FA, $09, $00, $08, $0A, $53, $2B, $02
>392325	0a 53 2b 02
>392329	00 15 21 f8 9a 09 01 13		DRUMINS_CLAVES        .text $00, $15, $21, $F8, $9A, $09, $01, $13, $00, $F6, $89, $00
>392331	00 f6 89 00
>392335	00 25 1b fa f2 01 00 12		DRUMINS_HI_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>39233d	00 f6 9a 00
>392341	00 25 1b fa f2 01 00 12		DRUMINS_LO_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>392349	00 f6 9a 00
>39234d	00 20 01 5f 07 01 00 08		DRUMINS_MU_CUICA      .text $00, $20, $01, $5F, $07, $01, $00, $08, $00, $87, $4B, $01
>392355	00 87 4b 01
>392359	00 25 12 57 f7 01 01 03		DRUMINS_OP_CUICA      .text $00, $25, $12, $57, $F7, $01, $01, $03, $00, $78, $67, $01
>392361	00 78 67 01
>392365	00 22 2f f1 f0 07 00 27		DRUMINS_MU_TRNGL      .text $00, $22, $2F, $F1, $F0, $07, $00, $27, $02, $F8, $FC, $00
>39236d	02 f8 fc 00
>392371	00 26 44 f1 f0 07 00 27		DRUMINS_OP_TRNGL      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>392379	40 f5 f5 00
>39237d	00 0e 00 ff 01 0f 00 0e		DRUMINS_SHAKER        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>392385	02 79 77 03
>392389	00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL1      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>392391	40 f5 f5 00
>392395	00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL2      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>39239d	40 f5 f5 00
>3923a1	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT3      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>3923a9	00 f9 69 00
>3923ad	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT4      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>3923b5	00 f9 69 00
>3923b9	00 02 1d f5 93 01 00 00		DRUMINS_TAIKO         .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>3923c1	00 c6 45 00
=27					DRUM_NOTE_BASE = 27;
=60					NUM_MIDI_DRUMS = 60;
>3923c5	f5 20 39 00 01 21 39 00		midiDrums     .dword DRUMINS_CLAP2, DRUMINS_SCRATCH1, DRUMINS_SCRATCH2, DRUMINS_RIMSHOT2
>3923cd	0d 21 39 00 19 21 39 00
>3923d5	25 21 39 00 31 21 39 00		              .dword DRUMINS_HIQ, DRUMINS_WOODBLOK, DRUMINS_GLOCK, DRUMINS_BASS_DR2
>3923dd	3d 21 39 00 49 21 39 00
>3923e5	55 21 39 00 61 21 39 00		              .dword DRUMINS_BASS_DR1, DRUMINS_RIMSHOT,  DRUMINS_SNARE_AC, DRUMINS_CLAP
>3923ed	6d 21 39 00 79 21 39 00
>3923f5	85 21 39 00 91 21 39 00		              .dword DRUMINS_SNARE_EL, DRUMINS_LO_TOMS,  DRUMINS_HIHAT_CL, DRUMINS_HI_TOMS
>3923fd	9d 21 39 00 a9 21 39 00
>392405	b5 21 39 00 c1 21 39 00		              .dword DRUMINS_HIHAT_PL, DRUMINS_LOW_TOM,	DRUMINS_HIHAT_OP, DRUMINS_LTOM_MID
>39240d	cd 21 39 00 d9 21 39 00
>392415	e5 21 39 00 f1 21 39 00		              .dword DRUMINS_HTOM_MID, DRUMINS_CRASH,    DRUMINS_TOM_HIGH, DRUMINS_RIDE_CY
>39241d	fd 21 39 00 09 22 39 00
>392425	15 22 39 00 21 22 39 00		              .dword DRUMINS_TAMBOUR,  DRUMINS_CYMBAL,   DRUMINS_TAMBOU2,  DRUMINS_SPLASH
>39242d	2d 22 39 00 39 22 39 00
>392435	45 22 39 00 51 22 39 00		              .dword DRUMINS_COWBELL,  DRUMINS_CRASH2, 	DRUMINS_VIBRASLA, DRUMINS_RIDE2
>39243d	5d 22 39 00 69 22 39 00
>392445	75 22 39 00 81 22 39 00		              .dword DRUMINS_HI_BONGO, DRUMINS_LO_BONGO, DRUMINS_MUTECONG, DRUMINS_OPENCONG
>39244d	8d 22 39 00 99 22 39 00
>392455	a5 22 39 00 b1 22 39 00		              .dword DRUMINS_LOWCONGA, DRUMINS_HI_TIMBA, DRUMINS_LO_TIMBA, DRUMINS_HI_AGOGO
>39245d	bd 22 39 00 c9 22 39 00
>392465	d5 22 39 00 e1 22 39 00		              .dword DRUMINS_LO_AGOGO, DRUMINS_CABASA, DRUMINS_MARACAS,  DRUMINS_S_WHISTL
>39246d	ed 22 39 00 f9 22 39 00
>392475	05 23 39 00 11 23 39 00		              .dword DRUMINS_L_WHISTL, DRUMINS_S_GUIRO,  DRUMINS_L_GUIRO,  DRUMINS_CLAVES
>39247d	1d 23 39 00 29 23 39 00
>392485	35 23 39 00 41 23 39 00		              .dword DRUMINS_HI_WDBLK, DRUMINS_LO_WDBLK, DRUMINS_MU_CUICA, DRUMINS_OP_CUICA
>39248d	4d 23 39 00 59 23 39 00
>392495	65 23 39 00 71 23 39 00		              .dword DRUMINS_MU_TRNGL, DRUMINS_OP_TRNGL, DRUMINS_SHAKER, DRUMINS_TRIANGL1
>39249d	7d 23 39 00 89 23 39 00
>3924a5	95 23 39 00 a1 23 39 00		              .dword DRUMINS_TRIANGL2, DRUMINS_RIMSHOT3, DRUMINS_RIMSHOT4, DRUMINS_TAIKO
>3924ad	ad 23 39 00 b9 23 39 00

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Instruments.asm

>3924b5	00 33 5a b2 50 01 00 31		MIDI_INSTRUMENT_PIANO1     .text $00, $33, $5A, $B2, $50, $01, $00, $31, $00, $B1, $F5, $01
>3924bd	00 b1 f5 01
>3924c1	00 31 49 f2 53 07 01 11		MIDI_INSTRUMENT_PIANO2     .text $00, $31, $49, $F2, $53, $07, $01, $11, $03, $F1, $F5, $00
>3924c9	03 f1 f5 00
>3924cd	00 31 95 d1 83 0d 01 32		MIDI_INSTRUMENT_PIANO3     .text $00, $31, $95, $D1, $83, $0D, $01, $32, $03, $C1, $F5, $00
>3924d5	03 c1 f5 00
>3924d9	00 34 9b f3 63 01 01 11		MIDI_INSTRUMENT_HONKTONK   .text $00, $34, $9B, $F3, $63, $01, $01, $11, $00, $92, $F5, $01
>3924e1	00 92 f5 01
>3924e5	00 27 28 f8 b7 01 02 91		MIDI_INSTRUMENT_EP1        .text $00, $27, $28, $F8, $B7, $01, $02, $91, $00, $F1, $F9, $00
>3924ed	00 f1 f9 00
>3924f1	00 1a 2d f3 ee 01 01 11		MIDI_INSTRUMENT_EP2        .text $00, $1A, $2D, $F3, $EE, $01, $01, $11, $00, $F1, $F5, $00
>3924f9	00 f1 f5 00
>3924fd	00 35 95 f2 58 0f 01 32		MIDI_INSTRUMENT_HARPSIC    .text $00, $35, $95, $F2, $58, $0F, $01, $32, $02, $81, $F6, $01
>392505	02 81 f6 01
>392509	00 31 85 c9 40 01 00 35		MIDI_INSTRUMENT_CLAVIC     .text $00, $31, $85, $C9, $40, $01, $00, $35, $00, $C2, $B9, $01
>392511	00 c2 b9 01
>392515	00 09 15 c7 64 08 00 01		MIDI_INSTRUMENT_CELESTA    .text $00, $09, $15, $C7, $64, $08, $00, $01, $05, $B2, $35, $00
>39251d	05 b2 35 00
>392521	00 06 03 f4 44 00 01 01		MIDI_INSTRUMENT_GLOCK      .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>392529	1b f2 34 00
>39252d	00 04 06 a9 24 0a 01 01		MIDI_INSTRUMENT_MUSICBOX   .text $00, $04, $06, $A9, $24, $0A, $01, $01, $01, $F5, $74, $00
>392535	01 f5 74 00
>392539	00 d4 00 f6 33 00 00 f1		MIDI_INSTRUMENT_VIBES      .text $00, $D4, $00, $F6, $33, $00, $00, $F1, $00, $61, $E3, $00
>392541	00 61 e3 00
>392545	00 d4 00 f7 e8 04 00 d1		MIDI_INSTRUMENT_MARIMBA    .text $00, $D4, $00, $F7, $E8, $04, $00, $D1, $00, $A4, $64, $00
>39254d	00 a4 64 00
>392551	00 36 16 f7 f7 01 00 31		MIDI_INSTRUMENT_XYLO       .text $00, $36, $16, $F7, $F7, $01, $00, $31, $07, $B5, $F5, $00
>392559	07 b5 f5 00
>39255d	00 03 1b a2 43 0b 00 00		MIDI_INSTRUMENT_TUBEBELL   .text $00, $03, $1B, $A2, $43, $0B, $00, $00, $00, $F3, $74, $00
>392565	00 f3 74 00
>392569	00 c3 8e f8 35 01 01 11		MIDI_INSTRUMENT_SANTUR     .text $00, $C3, $8E, $F8, $35, $01, $01, $11, $00, $C3, $94, $01
>392571	00 c3 94 01
>392575	00 e2 07 f4 1b 06 01 e0		MIDI_INSTRUMENT_ORGAN1     .text $00, $E2, $07, $F4, $1B, $06, $01, $E0, $00, $F4, $0D, $01
>39257d	00 f4 0d 01
>392581	00 f2 00 f6 2c 04 00 f0		MIDI_INSTRUMENT_ORGAN2     .text $00, $F2, $00, $F6, $2C, $04, $00, $F0, $00, $F5, $0B, $01
>392589	00 f5 0b 01
>39258d	00 f1 06 b6 15 0a 00 f0		MIDI_INSTRUMENT_ORGAN3     .text $00, $F1, $06, $B6, $15, $0A, $00, $F0, $00, $BF, $07, $00
>392595	00 bf 07 00
>392599	00 22 03 79 16 08 01 e0		MIDI_INSTRUMENT_PIPEORG    .text $00, $22, $03, $79, $16, $08, $01, $E0, $00, $6D, $08, $01
>3925a1	00 6d 08 01
>3925a5	00 31 27 63 06 01 00 72		MIDI_INSTRUMENT_REEDORG    .text $00, $31, $27, $63, $06, $01, $00, $72, $00, $51, $17, $01
>3925ad	00 51 17 01
>3925b1	00 b4 1d 53 16 0f 01 71		MIDI_INSTRUMENT_ACORDIAN   .text $00, $B4, $1D, $53, $16, $0F, $01, $71, $00, $51, $17, $01
>3925b9	00 51 17 01
>3925bd	00 25 29 97 15 01 00 32		MIDI_INSTRUMENT_HARMONIC   .text $00, $25, $29, $97, $15, $01, $00, $32, $00, $53, $08, $01
>3925c5	00 53 08 01
>3925c9	00 24 9e 67 15 0f 00 31		MIDI_INSTRUMENT_BANDNEON   .text $00, $24, $9E, $67, $15, $0F, $00, $31, $00, $53, $06, $01
>3925d1	00 53 06 01
>3925d5	00 13 27 a3 b4 05 01 31		MIDI_INSTRUMENT_NYLONGT    .text $00, $13, $27, $A3, $B4, $05, $01, $31, $00, $D2, $F8, $00
>3925dd	00 d2 f8 00
>3925e1	00 17 a3 f3 32 01 00 11		MIDI_INSTRUMENT_STEELGT    .text $00, $17, $A3, $F3, $32, $01, $00, $11, $00, $E2, $C7, $01
>3925e9	00 e2 c7 01
>3925ed	00 33 24 d2 c1 0f 01 31		MIDI_INSTRUMENT_JAZZGT     .text $00, $33, $24, $D2, $C1, $0F, $01, $31, $00, $F1, $9C, $00
>3925f5	00 f1 9c 00
>3925f9	00 31 05 f8 44 01 00 32		MIDI_INSTRUMENT_CLEANGT    .text $00, $31, $05, $F8, $44, $01, $00, $32, $02, $F2, $C9, $01
>392601	02 f2 c9 01
>392605	00 21 09 9c 7b 07 00 02		MIDI_INSTRUMENT_MUTEGT     .text $00, $21, $09, $9C, $7B, $07, $00, $02, $03, $95, $FB, $00
>39260d	03 95 fb 00
>392611	00 21 84 81 98 07 01 21		MIDI_INSTRUMENT_OVERDGT    .text $00, $21, $84, $81, $98, $07, $01, $21, $04, $A1, $59, $00
>392619	04 a1 59 00
>39261d	00 b1 0c 78 43 01 00 22		MIDI_INSTRUMENT_DISTGT     .text $00, $B1, $0C, $78, $43, $01, $00, $22, $03, $91, $FC, $03
>392625	03 91 fc 03
>392629	00 00 0a 82 8c 09 00 08		MIDI_INSTRUMENT_GTHARMS    .text $00, $00, $0A, $82, $8C, $09, $00, $08, $02, $B4, $EC, $00
>392631	02 b4 ec 00
>392635	00 21 13 ab 46 01 00 21		MIDI_INSTRUMENT_ACOUBASS   .text $00, $21, $13, $AB, $46, $01, $00, $21, $00, $93, $F7, $00
>39263d	00 93 f7 00
>392641	00 01 0a f9 32 01 00 22		MIDI_INSTRUMENT_FINGBASS   .text $00, $01, $0A, $F9, $32, $01, $00, $22, $04, $C1, $58, $00
>392649	04 c1 58 00
>39264d	00 21 07 fa 77 0b 00 22		MIDI_INSTRUMENT_PICKBASS   .text $00, $21, $07, $FA, $77, $0B, $00, $22, $02, $C3, $6A, $00
>392655	02 c3 6a 00
>392659	00 21 17 71 57 0b 00 21		MIDI_INSTRUMENT_FRETLESS   .text $00, $21, $17, $71, $57, $0B, $00, $21, $00, $62, $87, $00
>392661	00 62 87 00
>392665	00 25 01 fa 78 07 01 12		MIDI_INSTRUMENT_SLAPBAS1   .text $00, $25, $01, $FA, $78, $07, $01, $12, $00, $F3, $97, $00
>39266d	00 f3 97 00
>392671	00 21 03 fa 88 0d 00 13		MIDI_INSTRUMENT_SLAPBAS2   .text $00, $21, $03, $FA, $88, $0D, $00, $13, $00, $B3, $97, $00
>392679	00 b3 97 00
>39267d	00 21 09 f5 7f 09 01 23		MIDI_INSTRUMENT_SYNBASS1   .text $00, $21, $09, $F5, $7F, $09, $01, $23, $04, $F3, $CC, $00
>392685	04 f3 cc 00
>392689	00 01 10 a3 9b 09 00 01		MIDI_INSTRUMENT_SYNBASS2   .text $00, $01, $10, $A3, $9B, $09, $00, $01, $00, $93, $AA, $00
>392691	00 93 aa 00
>392695	00 e2 19 f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLIN     .text $00, $E2, $19, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>39269d	00 78 08 01
>3926a1	00 e2 1c f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLA      .text $00, $E2, $1C, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>3926a9	00 78 08 01
>3926ad	00 61 19 69 16 0b 01 61		MIDI_INSTRUMENT_CELLO      .text $00, $61, $19, $69, $16, $0B, $01, $61, $00, $54, $27, $01
>3926b5	00 54 27 01
>3926b9	00 71 18 82 31 0d 01 32		MIDI_INSTRUMENT_CONTRAB    .text $00, $71, $18, $82, $31, $0D, $01, $32, $00, $61, $56, $00
>3926c1	00 61 56 00
>3926c5	00 e2 23 70 06 0d 01 e1		MIDI_INSTRUMENT_TREMSTR    .text $00, $E2, $23, $70, $06, $0D, $01, $E1, $00, $75, $16, $01
>3926cd	00 75 16 01
>3926d1	00 02 00 88 e6 08 00 61		MIDI_INSTRUMENT_PIZZ       .text $00, $02, $00, $88, $E6, $08, $00, $61, $00, $F5, $F6, $01
>3926d9	00 f5 f6 01
>3926dd	00 12 20 f6 d5 0f 01 11		MIDI_INSTRUMENT_HARP       .text $00, $12, $20, $F6, $D5, $0F, $01, $11, $80, $F3, $E3, $00
>3926e5	80 f3 e3 00
>3926e9	00 61 0e f4 f4 01 01 00		MIDI_INSTRUMENT_TIMPANI    .text $00, $61, $0E, $F4, $F4, $01, $01, $00, $00, $B5, $F5, $00
>3926f1	00 b5 f5 00
>3926f5	00 61 1e 9c 04 0f 01 21		MIDI_INSTRUMENT_STRINGS    .text $00, $61, $1E, $9C, $04, $0F, $01, $21, $80, $71, $16, $00
>3926fd	80 71 16 00
>392701	00 a2 2a c0 d6 0f 02 21		MIDI_INSTRUMENT_SLOWSTR    .text $00, $A2, $2A, $C0, $D6, $0F, $02, $21, $00, $30, $55, $01
>392709	00 30 55 01
>39270d	00 61 21 72 35 0f 01 61		MIDI_INSTRUMENT_SYNSTR1    .text $00, $61, $21, $72, $35, $0F, $01, $61, $00, $62, $36, $01
>392715	00 62 36 01
>392719	00 21 1a 72 23 0f 01 21		MIDI_INSTRUMENT_SYNSTR2    .text $00, $21, $1A, $72, $23, $0F, $01, $21, $02, $51, $07, $00
>392721	02 51 07 00
>392725	00 e1 16 97 31 09 00 61		MIDI_INSTRUMENT_CHOIR      .text $00, $E1, $16, $97, $31, $09, $00, $61, $00, $62, $39, $00
>39272d	00 62 39 00
>392731	00 22 c3 79 45 01 00 21		MIDI_INSTRUMENT_OOHS       .text $00, $22, $C3, $79, $45, $01, $00, $21, $00, $66, $27, $00
>392739	00 66 27 00
>39273d	00 21 de 63 55 01 01 21		MIDI_INSTRUMENT_SYNVOX     .text $00, $21, $DE, $63, $55, $01, $01, $21, $00, $73, $46, $00
>392745	00 73 46 00
>392749	00 42 05 86 f7 0a 00 50		MIDI_INSTRUMENT_ORCHIT     .text $00, $42, $05, $86, $F7, $0A, $00, $50, $00, $74, $76, $01
>392751	00 74 76 01
>392755	00 31 1c 61 02 0f 00 61		MIDI_INSTRUMENT_TRUMPET    .text $00, $31, $1C, $61, $02, $0F, $00, $61, $81, $92, $38, $00
>39275d	81 92 38 00
>392761	00 71 1e 52 23 0f 00 61		MIDI_INSTRUMENT_TROMBONE   .text $00, $71, $1E, $52, $23, $0F, $00, $61, $02, $71, $19, $00
>392769	02 71 19 00
>39276d	00 21 1a 76 16 0f 00 21		MIDI_INSTRUMENT_TUBA       .text $00, $21, $1A, $76, $16, $0F, $00, $21, $01, $81, $09, $00
>392775	01 81 09 00
>392779	00 25 28 89 2c 07 02 20		MIDI_INSTRUMENT_MUTETRP    .text $00, $25, $28, $89, $2C, $07, $02, $20, $00, $83, $4B, $02
>392781	00 83 4b 02
>392785	00 21 1f 79 16 09 00 a2		MIDI_INSTRUMENT_FRHORN     .text $00, $21, $1F, $79, $16, $09, $00, $A2, $05, $71, $59, $00
>39278d	05 71 59 00
>392791	00 21 19 87 16 0f 00 21		MIDI_INSTRUMENT_BRASS1     .text $00, $21, $19, $87, $16, $0F, $00, $21, $03, $82, $39, $00
>392799	03 82 39 00
>39279d	00 21 17 75 35 0f 00 22		MIDI_INSTRUMENT_SYNBRAS1   .text $00, $21, $17, $75, $35, $0F, $00, $22, $82, $84, $17, $00
>3927a5	82 84 17 00
>3927a9	00 21 22 62 58 0f 00 21		MIDI_INSTRUMENT_SYNBRAS2   .text $00, $21, $22, $62, $58, $0F, $00, $21, $02, $72, $16, $00
>3927b1	02 72 16 00
>3927b5	00 b1 1b 59 07 01 01 a1		MIDI_INSTRUMENT_SOPSAX     .text $00, $B1, $1B, $59, $07, $01, $01, $A1, $00, $7B, $0A, $00
>3927bd	00 7b 0a 00
>3927c1	00 21 16 9f 04 0b 00 21		MIDI_INSTRUMENT_ALTOSAX    .text $00, $21, $16, $9F, $04, $0B, $00, $21, $00, $85, $0C, $01
>3927c9	00 85 0c 01
>3927cd	00 21 0f a8 20 0d 00 23		MIDI_INSTRUMENT_TENSAX     .text $00, $21, $0F, $A8, $20, $0D, $00, $23, $00, $7B, $0A, $01
>3927d5	00 7b 0a 01
>3927d9	00 21 0f 88 04 09 00 26		MIDI_INSTRUMENT_BARISAX    .text $00, $21, $0F, $88, $04, $09, $00, $26, $00, $79, $18, $01
>3927e1	00 79 18 01
>3927e5	00 31 18 8f 05 01 00 32		MIDI_INSTRUMENT_OBOE       .text $00, $31, $18, $8F, $05, $01, $00, $32, $01, $73, $08, $00
>3927ed	01 73 08 00
>3927f1	00 a1 0a 8c 37 01 01 24		MIDI_INSTRUMENT_ENGLHORN   .text $00, $A1, $0A, $8C, $37, $01, $01, $24, $04, $77, $0A, $00
>3927f9	04 77 0a 00
>3927fd	00 31 04 a8 67 0b 00 75		MIDI_INSTRUMENT_BASSOON    .text $00, $31, $04, $A8, $67, $0B, $00, $75, $00, $51, $19, $00
>392805	00 51 19 00
>392809	00 a2 1f 77 26 01 01 21		MIDI_INSTRUMENT_CLARINET   .text $00, $A2, $1F, $77, $26, $01, $01, $21, $01, $74, $09, $00
>392811	01 74 09 00
>392815	00 e1 07 b8 94 01 01 21		MIDI_INSTRUMENT_PICCOLO    .text $00, $E1, $07, $B8, $94, $01, $01, $21, $01, $63, $28, $00
>39281d	01 63 28 00
>392821	00 a1 93 87 59 01 00 e1		MIDI_INSTRUMENT_FLUTE1     .text $00, $A1, $93, $87, $59, $01, $00, $E1, $00, $65, $0A, $00
>392829	00 65 0a 00
>39282d	00 22 10 9f 38 01 00 61		MIDI_INSTRUMENT_RECORDER   .text $00, $22, $10, $9F, $38, $01, $00, $61, $00, $67, $29, $00
>392835	00 67 29 00
>392839	00 e2 0d 88 9a 01 01 21		MIDI_INSTRUMENT_PANFLUTE   .text $00, $E2, $0D, $88, $9A, $01, $01, $21, $00, $67, $09, $00
>392841	00 67 09 00
>392845	00 a2 10 98 94 0f 00 21		MIDI_INSTRUMENT_BOTTLEB    .text $00, $A2, $10, $98, $94, $0F, $00, $21, $01, $6A, $28, $00
>39284d	01 6a 28 00
>392851	00 f1 1c 86 26 0f 00 f1		MIDI_INSTRUMENT_SHAKU      .text $00, $F1, $1C, $86, $26, $0F, $00, $F1, $00, $55, $27, $00
>392859	00 55 27 00
>39285d	00 e1 3f 9f 09 00 00 e1		MIDI_INSTRUMENT_WHISTLE    .text $00, $E1, $3F, $9F, $09, $00, $00, $E1, $00, $6F, $08, $00
>392865	00 6f 08 00
>392869	00 e2 3b f7 19 01 00 21		MIDI_INSTRUMENT_OCARINA    .text $00, $E2, $3B, $F7, $19, $01, $00, $21, $00, $7A, $07, $00
>392871	00 7a 07 00
>392875	00 22 1e 92 0c 0f 00 61		MIDI_INSTRUMENT_SQUARWAV   .text $00, $22, $1E, $92, $0C, $0F, $00, $61, $06, $A2, $0D, $00
>39287d	06 a2 0d 00
>392881	00 21 15 f4 22 0f 01 21		MIDI_INSTRUMENT_SAWWAV     .text $00, $21, $15, $F4, $22, $0F, $01, $21, $00, $A3, $5F, $00
>392889	00 a3 5f 00
>39288d	00 f2 20 47 66 03 01 f1		MIDI_INSTRUMENT_SYNCALLI   .text $00, $F2, $20, $47, $66, $03, $01, $F1, $00, $42, $27, $00
>392895	00 42 27 00
>392899	00 61 19 88 28 0f 00 61		MIDI_INSTRUMENT_CHIFLEAD   .text $00, $61, $19, $88, $28, $0F, $00, $61, $05, $B2, $49, $00
>3928a1	05 b2 49 00
>3928a5	00 21 16 82 1b 01 00 23		MIDI_INSTRUMENT_CHARANG    .text $00, $21, $16, $82, $1B, $01, $00, $23, $00, $B2, $79, $01
>3928ad	00 b2 79 01
>3928b1	00 21 00 ca 93 01 00 22		MIDI_INSTRUMENT_SOLOVOX    .text $00, $21, $00, $CA, $93, $01, $00, $22, $00, $7A, $1A, $00
>3928b9	00 7a 1a 00
>3928bd	00 23 00 92 c9 08 01 22		MIDI_INSTRUMENT_FIFTHSAW   .text $00, $23, $00, $92, $C9, $08, $01, $22, $00, $82, $28, $01
>3928c5	00 82 28 01
>3928c9	00 21 1d f3 7b 0f 00 22		MIDI_INSTRUMENT_BASSLEAD   .text $00, $21, $1D, $F3, $7B, $0F, $00, $22, $02, $C3, $5F, $00
>3928d1	02 c3 5f 00
>3928d5	00 e1 00 81 25 00 01 a6		MIDI_INSTRUMENT_FANTASIA   .text $00, $E1, $00, $81, $25, $00, $01, $A6, $86, $C4, $95, $01
>3928dd	86 c4 95 01
>3928e1	00 21 27 31 01 0f 00 21		MIDI_INSTRUMENT_WARMPAD    .text $00, $21, $27, $31, $01, $0F, $00, $21, $00, $44, $15, $00
>3928e9	00 44 15 00
>3928ed	00 60 14 83 35 0d 02 61		MIDI_INSTRUMENT_POLYSYN    .text $00, $60, $14, $83, $35, $0D, $02, $61, $00, $D1, $06, $00
>3928f5	00 d1 06 00
>3928f9	00 e1 5c d3 01 01 01 62		MIDI_INSTRUMENT_SPACEVOX   .text $00, $E1, $5C, $D3, $01, $01, $01, $62, $00, $82, $37, $00
>392901	00 82 37 00
>392905	00 28 38 34 86 01 02 21		MIDI_INSTRUMENT_BOWEDGLS   .text $00, $28, $38, $34, $86, $01, $02, $21, $00, $41, $35, $00
>39290d	00 41 35 00
>392911	00 24 12 52 f3 05 01 23		MIDI_INSTRUMENT_METALPAD   .text $00, $24, $12, $52, $F3, $05, $01, $23, $02, $32, $F5, $01
>392919	02 32 f5 01
>39291d	00 61 1d 62 a6 0b 00 a1		MIDI_INSTRUMENT_HALOPAD    .text $00, $61, $1D, $62, $A6, $0B, $00, $A1, $00, $61, $26, $00
>392925	00 61 26 00
>392929	00 22 0f 22 d5 0b 01 21		MIDI_INSTRUMENT_SWEEPPAD   .text $00, $22, $0F, $22, $D5, $0B, $01, $21, $84, $3F, $05, $01
>392931	84 3f 05 01
>392935	00 e3 1f f9 24 01 00 31		MIDI_INSTRUMENT_ICERAIN    .text $00, $E3, $1F, $F9, $24, $01, $00, $31, $01, $D1, $F6, $00
>39293d	01 d1 f6 00
>392941	00 63 00 41 55 06 01 a2		MIDI_INSTRUMENT_SOUNDTRK   .text $00, $63, $00, $41, $55, $06, $01, $A2, $00, $41, $05, $01
>392949	00 41 05 01
>39294d	00 c7 25 a7 65 01 01 c1		MIDI_INSTRUMENT_CRYSTAL    .text $00, $C7, $25, $A7, $65, $01, $01, $C1, $05, $F3, $E4, $00
>392955	05 f3 e4 00
>392959	00 e3 19 f7 b7 01 01 61		MIDI_INSTRUMENT_ATMOSPH    .text $00, $E3, $19, $F7, $B7, $01, $01, $61, $00, $92, $F5, $01
>392961	00 92 f5 01
>392965	00 66 9b a8 44 0f 00 41		MIDI_INSTRUMENT_BRIGHT     .text $00, $66, $9B, $A8, $44, $0F, $00, $41, $04, $F2, $E4, $01
>39296d	04 f2 e4 01
>392971	00 61 20 22 75 0d 00 61		MIDI_INSTRUMENT_GOBLIN     .text $00, $61, $20, $22, $75, $0D, $00, $61, $00, $45, $25, $00
>392979	00 45 25 00
>39297d	00 e1 21 f6 84 0f 00 e1		MIDI_INSTRUMENT_ECHODROP   .text $00, $E1, $21, $F6, $84, $0F, $00, $E1, $01, $A3, $36, $00
>392985	01 a3 36 00
>392989	00 e2 14 73 64 0b 01 e1		MIDI_INSTRUMENT_STARTHEM   .text $00, $E2, $14, $73, $64, $0B, $01, $E1, $01, $98, $05, $01
>392991	01 98 05 01
>392995	00 21 0b 72 34 09 00 24		MIDI_INSTRUMENT_SITAR      .text $00, $21, $0B, $72, $34, $09, $00, $24, $02, $A3, $F6, $01
>39299d	02 a3 f6 01
>3929a1	00 21 16 f4 53 0d 00 04		MIDI_INSTRUMENT_BANJO      .text $00, $21, $16, $F4, $53, $0D, $00, $04, $00, $F6, $F8, $00
>3929a9	00 f6 f8 00
>3929ad	00 21 18 da 02 0d 00 35		MIDI_INSTRUMENT_SHAMISEN   .text $00, $21, $18, $DA, $02, $0D, $00, $35, $00, $F3, $F5, $00
>3929b5	00 f3 f5 00
>3929b9	00 25 0f fa 63 09 00 02		MIDI_INSTRUMENT_KOTO       .text $00, $25, $0F, $FA, $63, $09, $00, $02, $00, $94, $E5, $01
>3929c1	00 94 e5 01
>3929c5	00 32 07 f9 96 01 00 11		MIDI_INSTRUMENT_KALIMBA    .text $00, $32, $07, $F9, $96, $01, $00, $11, $00, $84, $44, $00
>3929cd	00 84 44 00
>3929d1	00 20 0e 97 18 09 02 25		MIDI_INSTRUMENT_BAGPIPE    .text $00, $20, $0E, $97, $18, $09, $02, $25, $03, $83, $18, $01
>3929d9	03 83 18 01
>3929dd	00 61 18 f6 29 01 00 62		MIDI_INSTRUMENT_FIDDLE     .text $00, $61, $18, $F6, $29, $01, $00, $62, $01, $78, $08, $01
>3929e5	01 78 08 01
>3929e9	00 e6 21 76 19 0b 00 61		MIDI_INSTRUMENT_SHANNAI    .text $00, $E6, $21, $76, $19, $0B, $00, $61, $03, $8E, $08, $01
>3929f1	03 8e 08 01
>3929f5	00 27 23 f0 d4 01 00 05		MIDI_INSTRUMENT_TINKLBEL   .text $00, $27, $23, $F0, $D4, $01, $00, $05, $09, $F2, $46, $00
>3929fd	09 f2 46 00
>392a01	00 1c 0c f9 31 0f 01 15		MIDI_INSTRUMENT_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>392a09	00 96 e8 01
>392a0d	00 02 00 75 16 06 02 01		MIDI_INSTRUMENT_STEELDRM   .text $00, $02, $00, $75, $16, $06, $02, $01, $00, $F6, $F6, $01
>392a15	00 f6 f6 01
>392a19	00 25 1b fa f2 01 00 12		MIDI_INSTRUMENT_WOODBLOK   .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>392a21	00 f6 9a 00
>392a25	00 02 1d f5 93 01 00 00		MIDI_INSTRUMENT_TAIKO      .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>392a2d	00 c6 45 00
>392a31	00 11 15 f5 32 05 00 10		MIDI_INSTRUMENT_MELOTOM    .text $00, $11, $15, $F5, $32, $05, $00, $10, $00, $F4, $B4, $00
>392a39	00 f4 b4 00
>392a3d	00 22 06 fa 99 09 00 01		MIDI_INSTRUMENT_SYNDRUM    .text $00, $22, $06, $FA, $99, $09, $00, $01, $00, $D5, $25, $00
>392a45	00 d5 25 00
>392a49	00 2e 00 ff 00 0f 02 0e		MIDI_INSTRUMENT_REVRSCYM   .text $00, $2E, $00, $FF, $00, $0F, $02, $0E, $0E, $21, $2D, $00
>392a51	0e 21 2d 00
>392a55	00 30 0b 56 e4 01 01 17		MIDI_INSTRUMENT_FRETNOIS   .text $00, $30, $0B, $56, $E4, $01, $01, $17, $00, $55, $87, $02
>392a5d	00 55 87 02
>392a61	00 24 00 ff 03 0d 00 05		MIDI_INSTRUMENT_BRTHNOIS   .text $00, $24, $00, $FF, $03, $0D, $00, $05, $08, $98, $87, $01
>392a69	08 98 87 01
>392a6d	00 0e 00 f0 00 0f 02 0a		MIDI_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F0, $00, $0F, $02, $0A, $04, $17, $04, $03
>392a75	04 17 04 03
>392a79	00 20 08 f6 f7 01 00 0e		MIDI_INSTRUMENT_BIRDS      .text $00, $20, $08, $F6, $F7, $01, $00, $0E, $05, $77, $F9, $02
>392a81	05 77 f9 02
>392a85	00 20 14 f1 08 01 00 2e		MIDI_INSTRUMENT_TELEPHON   .text $00, $20, $14, $F1, $08, $01, $00, $2E, $02, $F4, $08, $00
>392a8d	02 f4 08 00
>392a91	00 20 04 f2 00 03 01 23		MIDI_INSTRUMENT_HELICOPT   .text $00, $20, $04, $F2, $00, $03, $01, $23, $00, $36, $05, $01
>392a99	00 36 05 01
>392a9d	00 2e 00 ff 02 0f 00 2a		MIDI_INSTRUMENT_APPLAUSE   .text $00, $2E, $00, $FF, $02, $0F, $00, $2A, $05, $32, $55, $03
>392aa5	05 32 55 03
>392aa9	00 20 00 a1 ef 0f 00 10		MIDI_INSTRUMENT_GUNSHOT    .text $00, $20, $00, $A1, $EF, $0F, $00, $10, $00, $F3, $DF, $00
>392ab1	00 f3 df 00
>392ab5	b5 24 39 00 c1 24 39 00		midiInstruments .dword MIDI_INSTRUMENT_PIANO1,   MIDI_INSTRUMENT_PIANO2,   MIDI_INSTRUMENT_PIANO3,   MIDI_INSTRUMENT_HONKTONK, MIDI_INSTRUMENT_EP1,      MIDI_INSTRUMENT_EP2
>392abd	cd 24 39 00 d9 24 39 00 e5 24 39 00 f1 24 39 00
>392acd	fd 24 39 00 09 25 39 00		              	.dword MIDI_INSTRUMENT_HARPSIC,  MIDI_INSTRUMENT_CLAVIC,   MIDI_INSTRUMENT_CELESTA,  MIDI_INSTRUMENT_GLOCK,    MIDI_INSTRUMENT_MUSICBOX, MIDI_INSTRUMENT_VIBES
>392ad5	15 25 39 00 21 25 39 00 2d 25 39 00 39 25 39 00
>392ae5	45 25 39 00 51 25 39 00		              	.dword MIDI_INSTRUMENT_MARIMBA,  MIDI_INSTRUMENT_XYLO,     MIDI_INSTRUMENT_TUBEBELL, MIDI_INSTRUMENT_SANTUR,   MIDI_INSTRUMENT_ORGAN1,   MIDI_INSTRUMENT_ORGAN2
>392aed	5d 25 39 00 69 25 39 00 75 25 39 00 81 25 39 00
>392afd	8d 25 39 00 99 25 39 00		              	.dword MIDI_INSTRUMENT_ORGAN3,   MIDI_INSTRUMENT_PIPEORG,  MIDI_INSTRUMENT_REEDORG,  MIDI_INSTRUMENT_ACORDIAN, MIDI_INSTRUMENT_HARMONIC, MIDI_INSTRUMENT_BANDNEON
>392b05	a5 25 39 00 b1 25 39 00 bd 25 39 00 c9 25 39 00
>392b15	d5 25 39 00 e1 25 39 00		              	.dword MIDI_INSTRUMENT_NYLONGT,  MIDI_INSTRUMENT_STEELGT,  MIDI_INSTRUMENT_JAZZGT,   MIDI_INSTRUMENT_CLEANGT,  MIDI_INSTRUMENT_MUTEGT,   MIDI_INSTRUMENT_OVERDGT
>392b1d	ed 25 39 00 f9 25 39 00 05 26 39 00 11 26 39 00
>392b2d	1d 26 39 00 29 26 39 00		              	.dword MIDI_INSTRUMENT_DISTGT,   MIDI_INSTRUMENT_GTHARMS,  MIDI_INSTRUMENT_ACOUBASS, MIDI_INSTRUMENT_FINGBASS, MIDI_INSTRUMENT_PICKBASS, MIDI_INSTRUMENT_FRETLESS
>392b35	35 26 39 00 41 26 39 00 4d 26 39 00 59 26 39 00
>392b45	65 26 39 00 71 26 39 00		              	.dword MIDI_INSTRUMENT_SLAPBAS1, MIDI_INSTRUMENT_SLAPBAS2, MIDI_INSTRUMENT_SYNBASS1, MIDI_INSTRUMENT_SYNBASS2, MIDI_INSTRUMENT_VIOLIN,   MIDI_INSTRUMENT_VIOLA
>392b4d	7d 26 39 00 89 26 39 00 95 26 39 00 a1 26 39 00
>392b5d	ad 26 39 00 b9 26 39 00		              	.dword MIDI_INSTRUMENT_CELLO,    MIDI_INSTRUMENT_CONTRAB,  MIDI_INSTRUMENT_TREMSTR,  MIDI_INSTRUMENT_PIZZ,     MIDI_INSTRUMENT_HARP,     MIDI_INSTRUMENT_TIMPANI
>392b65	c5 26 39 00 d1 26 39 00 dd 26 39 00 e9 26 39 00
>392b75	f5 26 39 00 01 27 39 00		              	.dword MIDI_INSTRUMENT_STRINGS,  MIDI_INSTRUMENT_SLOWSTR,  MIDI_INSTRUMENT_SYNSTR1,  MIDI_INSTRUMENT_SYNSTR2,  MIDI_INSTRUMENT_CHOIR,    MIDI_INSTRUMENT_OOHS
>392b7d	0d 27 39 00 19 27 39 00 25 27 39 00 31 27 39 00
>392b8d	3d 27 39 00 49 27 39 00		              	.dword MIDI_INSTRUMENT_SYNVOX,   MIDI_INSTRUMENT_ORCHIT,   MIDI_INSTRUMENT_TRUMPET,  MIDI_INSTRUMENT_TROMBONE, MIDI_INSTRUMENT_TUBA,     MIDI_INSTRUMENT_MUTETRP
>392b95	55 27 39 00 61 27 39 00 6d 27 39 00 79 27 39 00
>392ba5	85 27 39 00 91 27 39 00		              	.dword MIDI_INSTRUMENT_FRHORN,   MIDI_INSTRUMENT_BRASS1,   MIDI_INSTRUMENT_SYNBRAS1, MIDI_INSTRUMENT_SYNBRAS2, MIDI_INSTRUMENT_SOPSAX,   MIDI_INSTRUMENT_ALTOSAX
>392bad	9d 27 39 00 a9 27 39 00 b5 27 39 00 c1 27 39 00
>392bbd	cd 27 39 00 d9 27 39 00		              	.dword MIDI_INSTRUMENT_TENSAX,   MIDI_INSTRUMENT_BARISAX,  MIDI_INSTRUMENT_OBOE,     MIDI_INSTRUMENT_ENGLHORN, MIDI_INSTRUMENT_BASSOON,  MIDI_INSTRUMENT_CLARINET
>392bc5	e5 27 39 00 f1 27 39 00 fd 27 39 00 09 28 39 00
>392bd5	15 28 39 00 21 28 39 00		              	.dword MIDI_INSTRUMENT_PICCOLO,  MIDI_INSTRUMENT_FLUTE1,   MIDI_INSTRUMENT_RECORDER, MIDI_INSTRUMENT_PANFLUTE, MIDI_INSTRUMENT_BOTTLEB,  MIDI_INSTRUMENT_SHAKU
>392bdd	2d 28 39 00 39 28 39 00 45 28 39 00 51 28 39 00
>392bed	5d 28 39 00 69 28 39 00		              	.dword MIDI_INSTRUMENT_WHISTLE,  MIDI_INSTRUMENT_OCARINA,  MIDI_INSTRUMENT_SQUARWAV, MIDI_INSTRUMENT_SAWWAV,   MIDI_INSTRUMENT_SYNCALLI, MIDI_INSTRUMENT_CHIFLEAD
>392bf5	75 28 39 00 81 28 39 00 8d 28 39 00 99 28 39 00
>392c05	a5 28 39 00 b1 28 39 00		              	.dword MIDI_INSTRUMENT_CHARANG,  MIDI_INSTRUMENT_SOLOVOX,  MIDI_INSTRUMENT_FIFTHSAW, MIDI_INSTRUMENT_BASSLEAD, MIDI_INSTRUMENT_FANTASIA, MIDI_INSTRUMENT_WARMPAD
>392c0d	bd 28 39 00 c9 28 39 00 d5 28 39 00 e1 28 39 00
>392c1d	ed 28 39 00 f9 28 39 00		              	.dword MIDI_INSTRUMENT_POLYSYN,  MIDI_INSTRUMENT_SPACEVOX, MIDI_INSTRUMENT_BOWEDGLS, MIDI_INSTRUMENT_METALPAD, MIDI_INSTRUMENT_HALOPAD,  MIDI_INSTRUMENT_SWEEPPAD
>392c25	05 29 39 00 11 29 39 00 1d 29 39 00 29 29 39 00
>392c35	35 29 39 00 41 29 39 00		              	.dword MIDI_INSTRUMENT_ICERAIN,  MIDI_INSTRUMENT_SOUNDTRK, MIDI_INSTRUMENT_CRYSTAL,  MIDI_INSTRUMENT_ATMOSPH,  MIDI_INSTRUMENT_BRIGHT,   MIDI_INSTRUMENT_GOBLIN
>392c3d	4d 29 39 00 59 29 39 00 65 29 39 00 71 29 39 00
>392c4d	7d 29 39 00 89 29 39 00		              	.dword MIDI_INSTRUMENT_ECHODROP, MIDI_INSTRUMENT_STARTHEM, MIDI_INSTRUMENT_SITAR,    MIDI_INSTRUMENT_BANJO,    MIDI_INSTRUMENT_SHAMISEN, MIDI_INSTRUMENT_KOTO
>392c55	95 29 39 00 a1 29 39 00 ad 29 39 00 b9 29 39 00
>392c65	c5 29 39 00 d1 29 39 00		              	.dword MIDI_INSTRUMENT_KALIMBA,  MIDI_INSTRUMENT_BAGPIPE,  MIDI_INSTRUMENT_FIDDLE,   MIDI_INSTRUMENT_SHANNAI,  MIDI_INSTRUMENT_TINKLBEL, MIDI_INSTRUMENT_AGOGO
>392c6d	dd 29 39 00 e9 29 39 00 f5 29 39 00 01 2a 39 00
>392c7d	0d 2a 39 00 19 2a 39 00		              	.dword MIDI_INSTRUMENT_STEELDRM, MIDI_INSTRUMENT_WOODBLOK, MIDI_INSTRUMENT_TAIKO,    MIDI_INSTRUMENT_MELOTOM,  MIDI_INSTRUMENT_SYNDRUM,  MIDI_INSTRUMENT_REVRSCYM
>392c85	25 2a 39 00 31 2a 39 00 3d 2a 39 00 49 2a 39 00
>392c95	55 2a 39 00 61 2a 39 00		              	.dword MIDI_INSTRUMENT_FRETNOIS, MIDI_INSTRUMENT_BRTHNOIS, MIDI_INSTRUMENT_SEASHORE, MIDI_INSTRUMENT_BIRDS,    MIDI_INSTRUMENT_TELEPHON, MIDI_INSTRUMENT_HELICOPT
>392c9d	6d 2a 39 00 79 2a 39 00 85 2a 39 00 91 2a 39 00
>392cad	9d 2a 39 00 a9 2a 39 00		              	.dword MIDI_INSTRUMENT_APPLAUSE, MIDI_INSTRUMENT_GUNSHOT

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Instruments_Win31.asm

>392cb5	00 01 8f f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO1     .text $00, $01, $8F, $F2, $F4, $38, $00, $01, $0D, $F2, $F7, $00
>392cbd	0d f2 f7 00
>392cc1	00 01 4b f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO2     .text $00, $01, $4B, $F2, $F4, $38, $00, $01, $07, $F2, $F7, $00
>392cc9	07 f2 f7 00
>392ccd	00 01 49 f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO3     .text $00, $01, $49, $F2, $F4, $38, $00, $01, $07, $F2, $F6, $00
>392cd5	07 f2 f6 00
>392cd9	00 81 12 f2 f7 00 00 41		MIDIW31_INSTRUMENT_HONKTONK   .text $00, $81, $12, $F2, $F7, $00, $00, $41, $07, $F2, $F7, $00
>392ce1	07 f2 f7 00
>392ce5	00 01 57 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP1        .text $00, $01, $57, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>392ced	07 f2 f7 00
>392cf1	00 01 93 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP2        .text $00, $01, $93, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>392cf9	07 f2 f7 00
>392cfd	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HARPSIC    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392d05	00 00 00 00
>392d09	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLAVIC     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392d11	00 00 00 00
>392d15	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELESTA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392d1d	00 00 00 00
>392d21	00 07 97 f3 f2 32 00 11		MIDIW31_INSTRUMENT_GLOCK      .text $00, $07, $97, $F3, $F2, $32, $00, $11, $87, $F2, $F1, $00
>392d29	87 f2 f1 00
>392d2d	00 17 21 54 f4 32 00 01		MIDIW31_INSTRUMENT_MUSICBOX   .text $00, $17, $21, $54, $F4, $32, $00, $01, $07, $F4, $F4, $00
>392d35	07 f4 f4 00
>392d39	00 98 62 f3 f6 30 00 81		MIDIW31_INSTRUMENT_VIBES      .text $00, $98, $62, $F3, $F6, $30, $00, $81, $07, $F2, $F6, $00
>392d41	07 f2 f6 00
>392d45	00 18 23 f6 f6 00 00 01		MIDIW31_INSTRUMENT_MARIMBA    .text $00, $18, $23, $F6, $F6, $00, $00, $01, $07, $E7, $F7, $00
>392d4d	07 e7 f7 00
>392d51	00 15 91 f6 f6 00 00 01		MIDIW31_INSTRUMENT_XYLO       .text $00, $15, $91, $F6, $F6, $00, $00, $01, $07, $F6, $F6, $00
>392d59	07 f6 f6 00
>392d5d	00 45 59 d3 f3 00 00 81		MIDIW31_INSTRUMENT_TUBEBELL   .text $00, $45, $59, $D3, $F3, $00, $00, $81, $87, $A3, $F3, $00
>392d65	87 a3 f3 00
>392d69	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SANTUR     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392d71	00 00 00 00
>392d75	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392d7d	00 00 00 00
>392d81	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN2     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392d89	00 00 00 00
>392d8d	00 70 44 aa 18 34 00 b1		MIDIW31_INSTRUMENT_ORGAN3     .text $00, $70, $44, $AA, $18, $34, $00, $B1, $07, $8A, $08, $00
>392d95	07 8a 08 00
>392d99	00 23 93 97 23 34 01 b1		MIDIW31_INSTRUMENT_PIPEORG    .text $00, $23, $93, $97, $23, $34, $01, $B1, $07, $55, $14, $00
>392da1	07 55 14 00
>392da5	00 61 13 97 04 30 01 b1		MIDIW31_INSTRUMENT_REEDORG    .text $00, $61, $13, $97, $04, $30, $01, $B1, $87, $55, $04, $00
>392dad	87 55 04 00
>392db1	00 24 48 98 2a 30 01 b1		MIDIW31_INSTRUMENT_ACORDIAN   .text $00, $24, $48, $98, $2A, $30, $01, $B1, $07, $46, $1A, $00
>392db9	07 46 1a 00
>392dbd	00 61 13 91 06 00 01 21		MIDIW31_INSTRUMENT_HARMONIC   .text $00, $61, $13, $91, $06, $00, $01, $21, $07, $61, $07, $00
>392dc5	07 61 07 00
>392dc9	00 21 13 71 06 00 00 a1		MIDIW31_INSTRUMENT_BANDNEON   .text $00, $21, $13, $71, $06, $00, $00, $A1, $90, $61, $07, $00
>392dd1	90 61 07 00
>392dd5	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_NYLONGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392ddd	00 00 00 00
>392de1	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392de9	00 00 00 00
>392ded	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_JAZZGT     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392df5	00 00 00 00
>392df9	00 03 87 f6 22 36 01 21		MIDIW31_INSTRUMENT_CLEANGT    .text $00, $03, $87, $F6, $22, $36, $01, $21, $87, $F3, $F8, $00
>392e01	87 f3 f8 00
>392e05	00 03 47 f9 54 30 00 21		MIDIW31_INSTRUMENT_MUTEGT     .text $00, $03, $47, $F9, $54, $30, $00, $21, $07, $F6, $3A, $00
>392e0d	07 f6 3a 00
>392e11	00 23 4a 91 41 38 01 21		MIDIW31_INSTRUMENT_OVERDGT    .text $00, $23, $4A, $91, $41, $38, $01, $21, $0C, $84, $19, $00
>392e19	0c 84 19 00
>392e1d	00 23 4a 95 19 32 01 21		MIDIW31_INSTRUMENT_DISTGT     .text $00, $23, $4A, $95, $19, $32, $01, $21, $07, $94, $19, $00
>392e25	07 94 19 00
>392e29	00 09 a1 20 4f 00 00 84		MIDIW31_INSTRUMENT_GTHARMS    .text $00, $09, $A1, $20, $4F, $00, $00, $84, $87, $D1, $F8, $00
>392e31	87 d1 f8 00
>392e35	00 21 1e 94 06 00 00 a2		MIDIW31_INSTRUMENT_ACOUBASS   .text $00, $21, $1E, $94, $06, $00, $00, $A2, $07, $C3, $A6, $00
>392e3d	07 c3 a6 00
>392e41	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FINGBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392e49	00 00 00 00
>392e4d	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_PICKBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392e55	00 00 00 00
>392e59	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRETLESS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392e61	00 00 00 00
>392e65	00 01 8b a1 9a 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS1   .text $00, $01, $8B, $A1, $9A, $38, $00, $21, $47, $F2, $DF, $00
>392e6d	47 f2 df 00
>392e71	00 21 8b a2 16 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS2   .text $00, $21, $8B, $A2, $16, $38, $00, $21, $0F, $A1, $DF, $00
>392e79	0f a1 df 00
>392e7d	00 31 8b f4 e8 3a 00 31		MIDIW31_INSTRUMENT_SYNBASS1   .text $00, $31, $8B, $F4, $E8, $3A, $00, $31, $07, $F1, $78, $00
>392e85	07 f1 78 00
>392e89	00 31 12 f1 28 30 00 31		MIDIW31_INSTRUMENT_SYNBASS2   .text $00, $31, $12, $F1, $28, $30, $00, $31, $07, $F1, $18, $00
>392e91	07 f1 18 00
>392e95	00 31 15 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLIN     .text $00, $31, $15, $DD, $13, $00, $01, $21, $07, $56, $26, $00
>392e9d	07 56 26 00
>392ea1	00 31 16 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLA      .text $00, $31, $16, $DD, $13, $00, $01, $21, $07, $66, $06, $00
>392ea9	07 66 06 00
>392ead	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELLO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392eb5	00 00 00 00
>392eb9	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CONTRAB    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392ec1	00 00 00 00
>392ec5	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TREMSTR    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392ecd	00 00 00 00
>392ed1	00 02 1a f5 75 30 01 01		MIDIW31_INSTRUMENT_PIZZ       .text $00, $02, $1A, $F5, $75, $30, $01, $01, $87, $85, $35, $00
>392ed9	87 85 35 00
>392edd	00 02 1d f5 75 30 01 01		MIDIW31_INSTRUMENT_HARP       .text $00, $02, $1D, $F5, $75, $30, $01, $01, $87, $F3, $F4, $00
>392ee5	87 f3 f4 00
>392ee9	00 10 41 f5 05 32 01 11		MIDIW31_INSTRUMENT_TIMPANI    .text $00, $10, $41, $F5, $05, $32, $01, $11, $07, $F2, $C3, $00
>392ef1	07 f2 c3 00
>392ef5	00 21 9b b1 25 3c 01 a2		MIDIW31_INSTRUMENT_STRINGS    .text $00, $21, $9B, $B1, $25, $3C, $01, $A2, $08, $72, $08, $00
>392efd	08 72 08 00
>392f01	00 a1 98 7f 03 00 01 21		MIDIW31_INSTRUMENT_SLOWSTR    .text $00, $A1, $98, $7F, $03, $00, $01, $21, $07, $3F, $07, $01
>392f09	07 3f 07 01
>392f0d	00 a1 93 c1 12 00 00 61		MIDIW31_INSTRUMENT_SYNSTR1    .text $00, $A1, $93, $C1, $12, $00, $00, $61, $07, $4F, $05, $00
>392f15	07 4f 05 00
>392f19	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNSTR2    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f21	00 00 00 00
>392f25	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CHOIR      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f2d	00 00 00 00
>392f31	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OOHS       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f39	00 00 00 00
>392f3d	00 71 57 54 05 3c 00 72		MIDIW31_INSTRUMENT_SYNVOX     .text $00, $71, $57, $54, $05, $3C, $00, $72, $07, $7A, $05, $00
>392f45	07 7a 05 00
>392f49	00 90 00 54 63 38 00 41		MIDIW31_INSTRUMENT_ORCHIT     .text $00, $90, $00, $54, $63, $38, $00, $41, $07, $A5, $45, $00
>392f51	07 a5 45 00
>392f55	00 21 92 85 17 3c 00 21		MIDIW31_INSTRUMENT_TRUMPET    .text $00, $21, $92, $85, $17, $3C, $00, $21, $08, $8F, $09, $00
>392f5d	08 8f 09 00
>392f61	00 21 94 75 17 32 00 21		MIDIW31_INSTRUMENT_TROMBONE   .text $00, $21, $94, $75, $17, $32, $00, $21, $0C, $8F, $09, $00
>392f69	0c 8f 09 00
>392f6d	00 21 94 76 15 00 00 61		MIDIW31_INSTRUMENT_TUBA       .text $00, $21, $94, $76, $15, $00, $00, $61, $07, $82, $37, $00
>392f75	07 82 37 00
>392f79	00 31 43 9e 17 00 01 21		MIDIW31_INSTRUMENT_MUTETRP    .text $00, $31, $43, $9E, $17, $00, $01, $21, $07, $62, $2C, $01
>392f81	07 62 2c 01
>392f85	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRHORN     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f8d	00 00 00 00
>392f91	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BRASS1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f99	00 00 00 00
>392f9d	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNBRAS1   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392fa5	00 00 00 00
>392fa9	00 21 4d 54 3c 38 00 21		MIDIW31_INSTRUMENT_SYNBRAS2   .text $00, $21, $4D, $54, $3C, $38, $00, $21, $07, $A6, $1C, $00
>392fb1	07 a6 1c 00
>392fb5	00 31 8f 93 02 38 01 61		MIDIW31_INSTRUMENT_SOPSAX     .text $00, $31, $8F, $93, $02, $38, $01, $61, $07, $72, $0B, $00
>392fbd	07 72 0b 00
>392fc1	00 31 8e 93 03 38 01 61		MIDIW31_INSTRUMENT_ALTOSAX    .text $00, $31, $8E, $93, $03, $38, $01, $61, $07, $72, $09, $00
>392fc9	07 72 09 00
>392fcd	00 31 91 93 03 30 01 61		MIDIW31_INSTRUMENT_TENSAX     .text $00, $31, $91, $93, $03, $30, $01, $61, $07, $82, $09, $00
>392fd5	07 82 09 00
>392fd9	00 31 8e 93 0f 00 01 61		MIDIW31_INSTRUMENT_BARISAX    .text $00, $31, $8E, $93, $0F, $00, $01, $61, $07, $72, $0F, $00
>392fe1	07 72 0f 00
>392fe5	00 21 4b aa 16 00 01 21		MIDIW31_INSTRUMENT_OBOE       .text $00, $21, $4B, $AA, $16, $00, $01, $21, $07, $8F, $0A, $00
>392fed	07 8f 0a 00
>392ff1	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ENGLHORN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392ff9	00 00 00 00
>392ffd	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSOON    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393005	00 00 00 00
>393009	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLARINET   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393011	00 00 00 00
>393015	00 e1 1f 85 5f 30 00 e1		MIDIW31_INSTRUMENT_PICCOLO    .text $00, $E1, $1F, $85, $5F, $30, $00, $E1, $07, $65, $1A, $00
>39301d	07 65 1a 00
>393021	00 e1 46 88 5f 30 00 e1		MIDIW31_INSTRUMENT_FLUTE1     .text $00, $E1, $46, $88, $5F, $30, $00, $E1, $07, $65, $1A, $00
>393029	07 65 1a 00
>39302d	00 a1 9c 75 1f 32 00 21		MIDIW31_INSTRUMENT_RECORDER   .text $00, $A1, $9C, $75, $1F, $32, $00, $21, $07, $75, $0A, $00
>393035	07 75 0a 00
>393039	00 31 8b 84 58 30 00 21		MIDIW31_INSTRUMENT_PANFLUTE   .text $00, $31, $8B, $84, $58, $30, $00, $21, $07, $65, $1A, $00
>393041	07 65 1a 00
>393045	00 e1 4c 66 56 00 00 a1		MIDIW31_INSTRUMENT_BOTTLEB    .text $00, $E1, $4C, $66, $56, $00, $00, $A1, $07, $65, $26, $00
>39304d	07 65 26 00
>393051	00 62 cb 76 46 00 00 a1		MIDIW31_INSTRUMENT_SHAKU      .text $00, $62, $CB, $76, $46, $00, $00, $A1, $07, $55, $36, $00
>393059	07 55 36 00
>39305d	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WHISTLE    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393065	00 00 00 00
>393069	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OCARINA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393071	00 00 00 00
>393075	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SQUARWAV   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39307d	00 00 00 00
>393081	00 21 0e ff 0f 30 01 21		MIDIW31_INSTRUMENT_SAWWAV     .text $00, $21, $0E, $FF, $0F, $30, $01, $21, $07, $FF, $0F, $01
>393089	07 ff 0f 01
>39308d	00 22 46 86 55 30 00 21		MIDIW31_INSTRUMENT_SYNCALLI   .text $00, $22, $46, $86, $55, $30, $00, $21, $87, $64, $18, $00
>393095	87 64 18 00
>393099	00 21 45 66 12 30 00 a1		MIDIW31_INSTRUMENT_CHIFLEAD   .text $00, $21, $45, $66, $12, $30, $00, $A1, $07, $96, $0A, $00
>3930a1	07 96 0a 00
>3930a5	00 21 8b 92 2a 34 01 22		MIDIW31_INSTRUMENT_CHARANG    .text $00, $21, $8B, $92, $2A, $34, $01, $22, $07, $91, $2A, $00
>3930ad	07 91 2a 00
>3930b1	00 a2 9e df 05 00 00 61		MIDIW31_INSTRUMENT_SOLOVOX    .text $00, $A2, $9E, $DF, $05, $00, $00, $61, $47, $6F, $07, $00
>3930b9	47 6f 07 00
>3930bd	00 20 1a ef 01 00 00 60		MIDIW31_INSTRUMENT_FIFTHSAW   .text $00, $20, $1A, $EF, $01, $00, $00, $60, $07, $8F, $06, $02
>3930c5	07 8f 06 02
>3930c9	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSLEAD   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3930d1	00 00 00 00
>3930d5	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FANTASIA   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3930dd	00 00 00 00
>3930e1	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WARMPAD    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3930e9	00 00 00 00
>3930ed	00 61 17 91 34 3c 00 61		MIDIW31_INSTRUMENT_POLYSYN    .text $00, $61, $17, $91, $34, $3C, $00, $61, $07, $55, $16, $00
>3930f5	07 55 16 00
>3930f9	00 71 5d 54 01 30 00 72		MIDIW31_INSTRUMENT_SPACEVOX   .text $00, $71, $5D, $54, $01, $30, $00, $72, $07, $6A, $03, $00
>393101	07 6a 03 00
>393105	00 21 97 21 43 38 00 a2		MIDIW31_INSTRUMENT_BOWEDGLS   .text $00, $21, $97, $21, $43, $38, $00, $A2, $07, $42, $35, $00
>39310d	07 42 35 00
>393111	00 a1 1c a1 77 30 01 21		MIDIW31_INSTRUMENT_METALPAD   .text $00, $A1, $1C, $A1, $77, $30, $01, $21, $07, $31, $47, $01
>393119	07 31 47 01
>39311d	00 21 89 11 33 00 00 61		MIDIW31_INSTRUMENT_HALOPAD    .text $00, $21, $89, $11, $33, $00, $00, $61, $0A, $42, $25, $00
>393125	0a 42 25 00
>393129	00 a1 15 11 47 00 01 21		MIDIW31_INSTRUMENT_SWEEPPAD   .text $00, $A1, $15, $11, $47, $00, $01, $21, $07, $CF, $07, $00
>393131	07 cf 07 00
>393135	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ICERAIN    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39313d	00 00 00 00
>393141	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SOUNDTRK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393149	00 00 00 00
>39314d	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CRYSTAL    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393155	00 00 00 00
>393159	00 22 92 b1 81 3c 00 61		MIDIW31_INSTRUMENT_ATMOSPH    .text $00, $22, $92, $B1, $81, $3C, $00, $61, $8A, $F2, $26, $00
>393161	8a f2 26 00
>393165	00 41 4d f1 51 30 01 42		MIDIW31_INSTRUMENT_BRIGHT     .text $00, $41, $4D, $F1, $51, $30, $01, $42, $07, $F2, $F5, $00
>39316d	07 f2 f5 00
>393171	00 61 94 11 51 36 01 a3		MIDIW31_INSTRUMENT_GOBLIN     .text $00, $61, $94, $11, $51, $36, $01, $A3, $87, $11, $13, $00
>393179	87 11 13 00
>39317d	00 61 8c 11 31 3a 00 a1		MIDIW31_INSTRUMENT_ECHODROP   .text $00, $61, $8C, $11, $31, $3A, $00, $A1, $87, $1D, $03, $00
>393185	87 1d 03 00
>393189	00 a4 4c f3 73 00 01 61		MIDIW31_INSTRUMENT_STARTHEM   .text $00, $A4, $4C, $F3, $73, $00, $01, $61, $07, $81, $23, $00
>393191	07 81 23 00
>393195	00 02 85 d2 53 00 00 07		MIDIW31_INSTRUMENT_SITAR      .text $00, $02, $85, $D2, $53, $00, $00, $07, $0A, $F2, $F6, $01
>39319d	0a f2 f6 01
>3931a1	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BANJO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3931a9	00 00 00 00
>3931ad	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SHAMISEN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3931b5	00 00 00 00
>3931b9	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_KOTO       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3931c1	00 00 00 00
>3931c5	00 04 4f fa 56 3c 00 01		MIDIW31_INSTRUMENT_KALIMBA    .text $00, $04, $4F, $FA, $56, $3C, $00, $01, $07, $C2, $05, $00
>3931cd	07 c2 05 00
>3931d1	00 21 49 7c 20 36 00 22		MIDIW31_INSTRUMENT_BAGPIPE    .text $00, $21, $49, $7C, $20, $36, $00, $22, $07, $6F, $0C, $01
>3931d9	07 6f 0c 01
>3931dd	00 31 85 dd 33 3a 01 21		MIDIW31_INSTRUMENT_FIDDLE     .text $00, $31, $85, $DD, $33, $3A, $01, $21, $07, $56, $16, $00
>3931e5	07 56 16 00
>3931e9	00 20 04 da 05 30 02 21		MIDIW31_INSTRUMENT_SHANNAI    .text $00, $20, $04, $DA, $05, $30, $02, $21, $88, $8F, $0B, $00
>3931f1	88 8f 0b 00
>3931f5	00 05 6a f1 e5 00 00 03		MIDIW31_INSTRUMENT_TINKLBEL   .text $00, $05, $6A, $F1, $E5, $00, $00, $03, $87, $C3, $E5, $00
>3931fd	87 c3 e5 00
>393201	00 07 15 ec 26 00 00 02		MIDIW31_INSTRUMENT_AGOGO      .text $00, $07, $15, $EC, $26, $00, $00, $02, $07, $F8, $16, $00
>393209	07 f8 16 00
>39320d	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELDRM   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393215	00 00 00 00
>393219	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WOODBLOK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393221	00 00 00 00
>393225	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TAIKO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39322d	00 00 00 00
>393231	00 11 41 f8 47 34 02 10		MIDIW31_INSTRUMENT_MELOTOM    .text $00, $11, $41, $F8, $47, $34, $02, $10, $0A, $F3, $03, $00
>393239	0a f3 03 00
>39323d	00 01 8e f1 06 3e 02 10		MIDIW31_INSTRUMENT_SYNDRUM    .text $00, $01, $8E, $F1, $06, $3E, $02, $10, $07, $F3, $02, $00
>393245	07 f3 02 00
>393249	00 0e 00 1f 00 3e 00 c0		MIDIW31_INSTRUMENT_REVRSCYM   .text $00, $0E, $00, $1F, $00, $3E, $00, $C0, $07, $1F, $FF, $03
>393251	07 1f ff 03
>393255	00 06 80 f8 24 38 00 03		MIDIW31_INSTRUMENT_FRETNOIS   .text $00, $06, $80, $F8, $24, $38, $00, $03, $8F, $56, $84, $02
>39325d	8f 56 84 02
>393261	00 0e 00 f8 00 00 00 d0		MIDIW31_INSTRUMENT_BRTHNOIS   .text $00, $0E, $00, $F8, $00, $00, $00, $D0, $0C, $34, $04, $03
>393269	0c 34 04 03
>39326d	00 0e 00 f6 00 00 00 c0		MIDIW31_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F6, $00, $00, $00, $C0, $07, $1F, $02, $03
>393275	07 1f 02 03
>393279	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BIRDS      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393281	00 00 00 00
>393285	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TELEPHON   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39328d	00 00 00 00
>393291	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HELICOPT   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393299	00 00 00 00
>39329d	00 26 00 ff 01 3e 00 e4		MIDIW31_INSTRUMENT_APPLAUSE   .text $00, $26, $00, $FF, $01, $3E, $00, $E4, $07, $12, $16, $01
>3932a5	07 12 16 01
>3932a9	00 00 00 f3 f0 3e 00 00		MIDIW31_INSTRUMENT_GUNSHOT    .text $00, $00, $00, $F3, $F0, $3E, $00, $00, $07, $F6, $C9, $02
>3932b1	07 f6 c9 02
>3932b5	b5 2c 39 00 c1 2c 39 00		midiInstrumentsw31 .dword MIDIW31_INSTRUMENT_PIANO1,   MIDIW31_INSTRUMENT_PIANO2,   MIDIW31_INSTRUMENT_PIANO3,   MIDIW31_INSTRUMENT_HONKTONK, MIDIW31_INSTRUMENT_EP1, MIDIW31_INSTRUMENT_EP2
>3932bd	cd 2c 39 00 d9 2c 39 00 e5 2c 39 00 f1 2c 39 00
>3932cd	fd 2c 39 00 09 2d 39 00		                   .dword MIDIW31_INSTRUMENT_HARPSIC,  MIDIW31_INSTRUMENT_CLAVIC,   MIDIW31_INSTRUMENT_CELESTA,  MIDIW31_INSTRUMENT_GLOCK,    MIDIW31_INSTRUMENT_MUSICBOX, MIDIW31_INSTRUMENT_VIBES
>3932d5	15 2d 39 00 21 2d 39 00 2d 2d 39 00 39 2d 39 00
>3932e5	45 2d 39 00 51 2d 39 00			                 .dword MIDIW31_INSTRUMENT_MARIMBA,  MIDIW31_INSTRUMENT_XYLO,     MIDIW31_INSTRUMENT_TUBEBELL, MIDIW31_INSTRUMENT_SANTUR,   MIDIW31_INSTRUMENT_ORGAN1,   MIDIW31_INSTRUMENT_ORGAN2
>3932ed	5d 2d 39 00 69 2d 39 00 75 2d 39 00 81 2d 39 00
>3932fd	8d 2d 39 00 99 2d 39 00			                 .dword MIDIW31_INSTRUMENT_ORGAN3,   MIDIW31_INSTRUMENT_PIPEORG,  MIDIW31_INSTRUMENT_REEDORG,  MIDIW31_INSTRUMENT_ACORDIAN, MIDIW31_INSTRUMENT_HARMONIC, MIDIW31_INSTRUMENT_BANDNEON
>393305	a5 2d 39 00 b1 2d 39 00 bd 2d 39 00 c9 2d 39 00
>393315	d5 2d 39 00 e1 2d 39 00		                     .dword MIDIW31_INSTRUMENT_NYLONGT,  MIDIW31_INSTRUMENT_STEELGT,  MIDIW31_INSTRUMENT_JAZZGT,   MIDIW31_INSTRUMENT_CLEANGT,  MIDIW31_INSTRUMENT_MUTEGT,   MIDIW31_INSTRUMENT_OVERDGT
>39331d	ed 2d 39 00 f9 2d 39 00 05 2e 39 00 11 2e 39 00
>39332d	1d 2e 39 00 29 2e 39 00			                 .dword MIDIW31_INSTRUMENT_DISTGT,   MIDIW31_INSTRUMENT_GTHARMS,  MIDIW31_INSTRUMENT_ACOUBASS, MIDIW31_INSTRUMENT_FINGBASS, MIDIW31_INSTRUMENT_PICKBASS, MIDIW31_INSTRUMENT_FRETLESS
>393335	35 2e 39 00 41 2e 39 00 4d 2e 39 00 59 2e 39 00
>393345	65 2e 39 00 71 2e 39 00			                 .dword MIDIW31_INSTRUMENT_SLAPBAS1, MIDIW31_INSTRUMENT_SLAPBAS2, MIDIW31_INSTRUMENT_SYNBASS1, MIDIW31_INSTRUMENT_SYNBASS2, MIDIW31_INSTRUMENT_VIOLIN,   MIDIW31_INSTRUMENT_VIOLA
>39334d	7d 2e 39 00 89 2e 39 00 95 2e 39 00 a1 2e 39 00
>39335d	ad 2e 39 00 b9 2e 39 00			                 .dword MIDIW31_INSTRUMENT_CELLO,    MIDIW31_INSTRUMENT_CONTRAB,  MIDIW31_INSTRUMENT_TREMSTR,  MIDIW31_INSTRUMENT_PIZZ,     MIDIW31_INSTRUMENT_HARP,     MIDIW31_INSTRUMENT_TIMPANI
>393365	c5 2e 39 00 d1 2e 39 00 dd 2e 39 00 e9 2e 39 00
>393375	f5 2e 39 00 01 2f 39 00			                 .dword MIDIW31_INSTRUMENT_STRINGS,  MIDIW31_INSTRUMENT_SLOWSTR,  MIDIW31_INSTRUMENT_SYNSTR1,  MIDIW31_INSTRUMENT_SYNSTR2,  MIDIW31_INSTRUMENT_CHOIR,    MIDIW31_INSTRUMENT_OOHS
>39337d	0d 2f 39 00 19 2f 39 00 25 2f 39 00 31 2f 39 00
>39338d	3d 2f 39 00 49 2f 39 00			                 .dword MIDIW31_INSTRUMENT_SYNVOX,   MIDIW31_INSTRUMENT_ORCHIT,   MIDIW31_INSTRUMENT_TRUMPET,  MIDIW31_INSTRUMENT_TROMBONE, MIDIW31_INSTRUMENT_TUBA,     MIDIW31_INSTRUMENT_MUTETRP
>393395	55 2f 39 00 61 2f 39 00 6d 2f 39 00 79 2f 39 00
>3933a5	85 2f 39 00 91 2f 39 00			                 .dword MIDIW31_INSTRUMENT_FRHORN,   MIDIW31_INSTRUMENT_BRASS1,   MIDIW31_INSTRUMENT_SYNBRAS1, MIDIW31_INSTRUMENT_SYNBRAS2, MIDIW31_INSTRUMENT_SOPSAX,   MIDIW31_INSTRUMENT_ALTOSAX
>3933ad	9d 2f 39 00 a9 2f 39 00 b5 2f 39 00 c1 2f 39 00
>3933bd	cd 2f 39 00 d9 2f 39 00			                 .dword MIDIW31_INSTRUMENT_TENSAX,   MIDIW31_INSTRUMENT_BARISAX,  MIDIW31_INSTRUMENT_OBOE,     MIDIW31_INSTRUMENT_ENGLHORN, MIDIW31_INSTRUMENT_BASSOON,  MIDIW31_INSTRUMENT_CLARINET
>3933c5	e5 2f 39 00 f1 2f 39 00 fd 2f 39 00 09 30 39 00
>3933d5	15 30 39 00 21 30 39 00			                 .dword MIDIW31_INSTRUMENT_PICCOLO,  MIDIW31_INSTRUMENT_FLUTE1,   MIDIW31_INSTRUMENT_RECORDER, MIDIW31_INSTRUMENT_PANFLUTE, MIDIW31_INSTRUMENT_BOTTLEB,  MIDIW31_INSTRUMENT_SHAKU
>3933dd	2d 30 39 00 39 30 39 00 45 30 39 00 51 30 39 00
>3933ed	5d 30 39 00 69 30 39 00			                 .dword MIDIW31_INSTRUMENT_WHISTLE,  MIDIW31_INSTRUMENT_OCARINA,  MIDIW31_INSTRUMENT_SQUARWAV, MIDIW31_INSTRUMENT_SAWWAV,   MIDIW31_INSTRUMENT_SYNCALLI, MIDIW31_INSTRUMENT_CHIFLEAD
>3933f5	75 30 39 00 81 30 39 00 8d 30 39 00 99 30 39 00
>393405	a5 30 39 00 b1 30 39 00			                 .dword MIDIW31_INSTRUMENT_CHARANG,  MIDIW31_INSTRUMENT_SOLOVOX,  MIDIW31_INSTRUMENT_FIFTHSAW, MIDIW31_INSTRUMENT_BASSLEAD, MIDIW31_INSTRUMENT_FANTASIA, MIDIW31_INSTRUMENT_WARMPAD
>39340d	bd 30 39 00 c9 30 39 00 d5 30 39 00 e1 30 39 00
>39341d	ed 30 39 00 f9 30 39 00			                 .dword MIDIW31_INSTRUMENT_POLYSYN,  MIDIW31_INSTRUMENT_SPACEVOX, MIDIW31_INSTRUMENT_BOWEDGLS, MIDIW31_INSTRUMENT_METALPAD, MIDIW31_INSTRUMENT_HALOPAD,  MIDIW31_INSTRUMENT_SWEEPPAD
>393425	05 31 39 00 11 31 39 00 1d 31 39 00 29 31 39 00
>393435	35 31 39 00 41 31 39 00			                 .dword MIDIW31_INSTRUMENT_ICERAIN,  MIDIW31_INSTRUMENT_SOUNDTRK, MIDIW31_INSTRUMENT_CRYSTAL,  MIDIW31_INSTRUMENT_ATMOSPH,  MIDIW31_INSTRUMENT_BRIGHT,   MIDIW31_INSTRUMENT_GOBLIN
>39343d	4d 31 39 00 59 31 39 00 65 31 39 00 71 31 39 00
>39344d	7d 31 39 00 89 31 39 00			                 .dword MIDIW31_INSTRUMENT_ECHODROP, MIDIW31_INSTRUMENT_STARTHEM, MIDIW31_INSTRUMENT_SITAR,    MIDIW31_INSTRUMENT_BANJO,    MIDIW31_INSTRUMENT_SHAMISEN, MIDIW31_INSTRUMENT_KOTO
>393455	95 31 39 00 a1 31 39 00 ad 31 39 00 b9 31 39 00
>393465	c5 31 39 00 d1 31 39 00			                 .dword MIDIW31_INSTRUMENT_KALIMBA,  MIDIW31_INSTRUMENT_BAGPIPE,  MIDIW31_INSTRUMENT_FIDDLE,   MIDIW31_INSTRUMENT_SHANNAI,  MIDIW31_INSTRUMENT_TINKLBEL, MIDIW31_INSTRUMENT_AGOGO
>39346d	dd 31 39 00 e9 31 39 00 f5 31 39 00 01 32 39 00
>39347d	0d 32 39 00 19 32 39 00			                 .dword MIDIW31_INSTRUMENT_STEELDRM, MIDIW31_INSTRUMENT_WOODBLOK, MIDIW31_INSTRUMENT_TAIKO,    MIDIW31_INSTRUMENT_MELOTOM,  MIDIW31_INSTRUMENT_SYNDRUM,  MIDIW31_INSTRUMENT_REVRSCYM
>393485	25 32 39 00 31 32 39 00 3d 32 39 00 49 32 39 00
>393495	55 32 39 00 61 32 39 00			                 .dword MIDIW31_INSTRUMENT_FRETNOIS, MIDIW31_INSTRUMENT_BRTHNOIS, MIDIW31_INSTRUMENT_SEASHORE, MIDIW31_INSTRUMENT_BIRDS,    MIDIW31_INSTRUMENT_TELEPHON, MIDIW31_INSTRUMENT_HELICOPT
>39349d	6d 32 39 00 79 32 39 00 85 32 39 00 91 32 39 00
>3934ad	9d 32 39 00 a9 32 39 00			                 .dword MIDIW31_INSTRUMENT_APPLAUSE, MIDIW31_INSTRUMENT_GUNSHOT

;******  Return to file: src\OPL2_Library.asm

>3934b5	3c 42 44 45 47 49 4b 4c		NOTE_INTRO  .byte  $3C, $42, $44, $45, $47, $49, $4B, $4C
.3934bd					IOPL2_TONE_TEST
.3934bd	e2 20		sep #$20	                SEP #$20        ; set A short
.3934bf	c2 10		rep #$10	                REP #$10        ; set X long
.3934c1	a2 00 00	ldx #$0000	                LDX #0
.3934c4					OPL2_TONE_TESTING_L1
.3934c4	bf b5 34 39	lda $3934b5,x	                LDA NOTE_INTRO, X
.3934c8	29 0f		and #$0f	                AND #$F
.3934ca	85 30		sta $30		                STA OPL2_NOTE ; start at C
.3934cc	bf b5 34 39	lda $3934b5,x	                LDA NOTE_INTRO, X
.3934d0	29 70		and #$70	                AND #$70
.3934d2	4a		lsr a		                LSR A
.3934d3	4a		lsr a		                LSR A
.3934d4	4a		lsr a		                LSR A
.3934d5	4a		lsr a		                LSR A
.3934d6	85 31		sta $31		                STA OPL2_OCTAVE
.3934d8	8a		txa		                TXA
.3934d9	29 03		and #$03	                AND #$03        ; replace modulo 3 -  play each note on a different channel
.3934db	85 27		sta $27		                STA OPL2_CHANNEL
.3934dd	22 ad 36 39	jsl $3936ad	                JSL OPL2_PLAYNOTE
.3934e1	a0 00 00	ldy #$0000	                LDY #$0000
.3934e4					OPL2_TONE_TESTING_L2
.3934e4	ea		nop		                NOP
.3934e5	ea		nop		                NOP
.3934e6	ea		nop		                NOP
.3934e7	ea		nop		                NOP
.3934e8	c8		iny		                INY
.3934e9	c0 ff ff	cpy #$ffff	                CPY #$FFFF
.3934ec	d0 f6		bne $3934e4	                BNE OPL2_TONE_TESTING_L2
.3934ee	e8		inx		                INX
.3934ef	e0 08 00	cpx #$0008	                CPX #8
.3934f2	d0 d0		bne $3934c4	                BNE OPL2_TONE_TESTING_L1
.3934f4	6b		rtl		                RTL
.3934f5					OPL2_INIT
.3934f5	c2 20		rep #$20	                REP #$20        ; set A long
.3934f7	a9 00 00	lda #$0000	                LDA #$0000
.3934fa	85 28		sta $28		                STA OPL2_REG_REGION
.3934fc	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.3934fe	85 30		sta $30		                STA OPL2_NOTE
.393500	85 32		sta $32		                STA OPL2_PARAMETER0
.393502	85 34		sta $34		                STA OPL2_PARAMETER2
.393504	a9 7f 14	lda #$147f	                LDA #<>INSTRUMENT_ACCORDN
.393507	85 50		sta $50		                STA RAD_ADDR
.393509	a9 39 00	lda #$0039	                LDA #<`INSTRUMENT_ACCORDN
.39350c	85 52		sta $52		                STA RAD_ADDR + 2
.39350e	e2 20		sep #$20	                SEP #$20        ; set A short
.393510	6b		rtl		                RTL
.393511					OPL2_Reset
.393511	6b		rtl		                RTL
.393512					OPL2_Get_FrequencyBlock
.393512	6b		rtl		                RTL
.393513					OPL2_GET_REGISTER
.393513	48		pha		                PHA             ; begin setdp macro
.393514	08		php		                PHP
.393515	c2 20		rep #$20	                REP #$20        ; set A long
.393517	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39351a	5b		tcd		                TCD
.39351b	28		plp		                PLP
.39351c	68		pla		                PLA             ; end setdp macro
.39351d	c2 20		rep #$20	                REP #$20        ; set A long
.39351f	18		clc		              CLC
.393520	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393523	65 32		adc $32		              ADC OPL2_PARAMETER0
.393525	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393527	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.39352a	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39352c	e2 20		sep #$20	                SEP #$20        ; set A short
.39352e	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393530	6b		rtl		              RTL
.393531					OPL2_GET_WAVEFORM_SELECT
.393531	48		pha		                PHA             ; begin setdp macro
.393532	08		php		                PHP
.393533	c2 20		rep #$20	                REP #$20        ; set A long
.393535	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393538	5b		tcd		                TCD
.393539	28		plp		                PLP
.39353a	68		pla		                PLA             ; end setdp macro
.39353b	c2 20		rep #$20	                REP #$20        ; set A long
.39353d	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393540	69 01 00	adc #$0001	              ADC #$0001
.393543	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393545	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393548	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39354a	e2 20		sep #$20	                SEP #$20        ; set A short
.39354c	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39354e	29 20		and #$20	              AND #$20
.393550	6b		rtl		              RTL
.393551					OPL2_GET_SCALINGLEVEL
.393551	48		pha		                PHA             ; begin setdp macro
.393552	08		php		                PHP
.393553	c2 20		rep #$20	                REP #$20        ; set A long
.393555	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393558	5b		tcd		                TCD
.393559	28		plp		                PLP
.39355a	68		pla		                PLA             ; end setdp macro
.39355b	c2 20		rep #$20	                REP #$20        ; set A long
.39355d	a9 40 00	lda #$0040	              LDA #$0040  ;
.393560	85 28		sta $28		              STA OPL2_REG_REGION
.393562	20 14 3e	jsr $393e14	              JSR OPL2_GET_REG_OFFSET
.393565	e2 20		sep #$20	                SEP #$20        ; set A short
.393567	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393569	29 c0		and #$c0	              AND #$C0
.39356b	4a		lsr a		              LSR A
.39356c	4a		lsr a		              LSR A
.39356d	4a		lsr a		              LSR A
.39356e	4a		lsr a		              LSR A
.39356f	4a		lsr a		              LSR A
.393570	4a		lsr a		              LSR A
.393571	6b		rtl		              RTL
.393572					OPL2_GET_BLOCK
.393572	48		pha		                PHA             ; begin setdp macro
.393573	08		php		                PHP
.393574	c2 20		rep #$20	                REP #$20        ; set A long
.393576	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393579	5b		tcd		                TCD
.39357a	28		plp		                PLP
.39357b	68		pla		                PLA             ; end setdp macro
.39357c	e2 20		sep #$20	                SEP #$20        ; set A short
.39357e	18		clc		              CLC
.39357f	a5 27		lda $27		              LDA OPL2_CHANNEL
.393581	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393583	69 b0		adc #$b0	              ADC #$B0
.393585	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393587	a9 00		lda #$00	              LDA #$00
.393589	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.39358b	c2 30		rep #$30	                REP #$30        ; set A&X long
.39358d	18		clc		              CLC
.39358e	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393591	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393593	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393595	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393598	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39359a	e2 20		sep #$20	                SEP #$20        ; set A short
.39359c	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39359e	29 1c		and #$1c	              AND #$1C
.3935a0	4a		lsr a		              LSR A
.3935a1	4a		lsr a		              LSR A
.3935a2	6b		rtl		              RTL
.3935a3					OPL2_GET_KEYON
.3935a3	48		pha		                PHA             ; begin setdp macro
.3935a4	08		php		                PHP
.3935a5	c2 20		rep #$20	                REP #$20        ; set A long
.3935a7	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3935aa	5b		tcd		                TCD
.3935ab	28		plp		                PLP
.3935ac	68		pla		                PLA             ; end setdp macro
.3935ad	e2 20		sep #$20	                SEP #$20        ; set A short
.3935af	18		clc		              CLC
.3935b0	a5 27		lda $27		              LDA OPL2_CHANNEL
.3935b2	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.3935b4	69 b0		adc #$b0	              ADC #$B0
.3935b6	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.3935b8	a9 00		lda #$00	              LDA #$00
.3935ba	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.3935bc	c2 30		rep #$30	                REP #$30        ; set A&X long
.3935be	18		clc		              CLC
.3935bf	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3935c2	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.3935c4	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3935c6	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3935c9	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3935cb	e2 20		sep #$20	                SEP #$20        ; set A short
.3935cd	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3935cf	29 20		and #$20	              AND #$20
.3935d1	6b		rtl		              RTL
.3935d2					OPL2_GET_FEEDBACK
.3935d2	48		pha		                PHA             ; begin setdp macro
.3935d3	08		php		                PHP
.3935d4	c2 20		rep #$20	                REP #$20        ; set A long
.3935d6	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3935d9	5b		tcd		                TCD
.3935da	28		plp		                PLP
.3935db	68		pla		                PLA             ; end setdp macro
.3935dc	e2 20		sep #$20	                SEP #$20        ; set A short
.3935de	18		clc		              CLC
.3935df	a5 27		lda $27		              LDA OPL2_CHANNEL
.3935e1	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.3935e3	69 c0		adc #$c0	              ADC #$C0
.3935e5	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.3935e7	a9 00		lda #$00	              LDA #$00
.3935e9	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.3935eb	c2 30		rep #$30	                REP #$30        ; set A&X long
.3935ed	18		clc		              CLC
.3935ee	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3935f1	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.3935f3	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3935f5	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3935f8	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3935fa	e2 20		sep #$20	                SEP #$20        ; set A short
.3935fc	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3935fe	29 e0		and #$e0	              AND #$E0
.393600	4a		lsr a		              LSR
.393601	6b		rtl		              RTL
.393602					OPL2_GET_SYNTHMODE
.393602	48		pha		                PHA             ; begin setdp macro
.393603	08		php		                PHP
.393604	c2 20		rep #$20	                REP #$20        ; set A long
.393606	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393609	5b		tcd		                TCD
.39360a	28		plp		                PLP
.39360b	68		pla		                PLA             ; end setdp macro
.39360c	e2 20		sep #$20	                SEP #$20        ; set A short
.39360e	18		clc		              CLC
.39360f	a5 27		lda $27		              LDA OPL2_CHANNEL
.393611	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393613	69 c0		adc #$c0	              ADC #$C0
.393615	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393617	a9 00		lda #$00	              LDA #$00
.393619	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.39361b	c2 30		rep #$30	                REP #$30        ; set A&X long
.39361d	18		clc		              CLC
.39361e	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393621	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393623	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393625	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393628	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39362a	e2 20		sep #$20	                SEP #$20        ; set A short
.39362c	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39362e	29 01		and #$01	              AND #$01
.393630	6b		rtl		              RTL
.393631					OPL2_GET_DEEPTREMOLO
.393631	48		pha		                PHA             ; begin setdp macro
.393632	08		php		                PHP
.393633	c2 20		rep #$20	                REP #$20        ; set A long
.393635	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393638	5b		tcd		                TCD
.393639	28		plp		                PLP
.39363a	68		pla		                PLA             ; end setdp macro
.39363b	c2 20		rep #$20	                REP #$20        ; set A long
.39363d	a9 bd 00	lda #$00bd	              LDA #$00BD;
.393640	85 28		sta $28		              STA OPL2_REG_REGION
.393642	20 14 3e	jsr $393e14	              JSR OPL2_GET_REG_OFFSET
.393645	e2 20		sep #$20	                SEP #$20        ; set A short
.393647	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393649	29 80		and #$80	              AND #$80
.39364b	6b		rtl		              RTL
.39364c					OPL2_GET_DEEPVIBRATO
.39364c	48		pha		                PHA             ; begin setdp macro
.39364d	08		php		                PHP
.39364e	c2 20		rep #$20	                REP #$20        ; set A long
.393650	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393653	5b		tcd		                TCD
.393654	28		plp		                PLP
.393655	68		pla		                PLA             ; end setdp macro
.393656	c2 20		rep #$20	                REP #$20        ; set A long
.393658	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39365b	69 bd 00	adc #$00bd	              ADC #$00BD
.39365e	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393660	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393663	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393665	e2 20		sep #$20	                SEP #$20        ; set A short
.393667	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393669	29 40		and #$40	              AND #$40
.39366b	6b		rtl		              RTL
.39366c					OPL2_GET_PERCUSSION
.39366c	48		pha		                PHA             ; begin setdp macro
.39366d	08		php		                PHP
.39366e	c2 20		rep #$20	                REP #$20        ; set A long
.393670	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393673	5b		tcd		                TCD
.393674	28		plp		                PLP
.393675	68		pla		                PLA             ; end setdp macro
.393676	c2 20		rep #$20	                REP #$20        ; set A long
.393678	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39367b	69 bd 00	adc #$00bd	              ADC #$00BD
.39367e	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393680	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393683	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393685	e2 20		sep #$20	                SEP #$20        ; set A short
.393687	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393689	29 20		and #$20	              AND #$20
.39368b	6b		rtl		              RTL
.39368c					OPL2_GET_DRUMS
.39368c	48		pha		                PHA             ; begin setdp macro
.39368d	08		php		                PHP
.39368e	c2 20		rep #$20	                REP #$20        ; set A long
.393690	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393693	5b		tcd		                TCD
.393694	28		plp		                PLP
.393695	68		pla		                PLA             ; end setdp macro
.393696	c2 20		rep #$20	                REP #$20        ; set A long
.393698	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39369b	69 bd 00	adc #$00bd	              ADC #$00BD
.39369e	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3936a0	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3936a3	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3936a5	e2 20		sep #$20	                SEP #$20        ; set A short
.3936a7	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3936a9	29 1f		and #$1f	              AND #$1F
.3936ab	6b		rtl		              RTL
.3936ac					OPL2_Get_WaveForm
.3936ac	6b		rtl		                RTL
.3936ad					OPL2_PLAYNOTE
.3936ad	48		pha		                PHA             ; begin setdp macro
.3936ae	08		php		                PHP
.3936af	c2 20		rep #$20	                REP #$20        ; set A long
.3936b1	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3936b4	5b		tcd		                TCD
.3936b5	28		plp		                PLP
.3936b6	68		pla		                PLA             ; end setdp macro
.3936b7	e2 20		sep #$20	                SEP #$20        ; set A short
.3936b9	da		phx		                PHX
.3936ba	a9 00		lda #$00	                LDA #$00
.3936bc	85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.3936be	20 95 3c	jsr $393c95	                JSR OPL2_SET_KEYON
.3936c1	20 5a 3c	jsr $393c5a	                JSR OPL2_SET_BLOCK  ; OPL2_SET_BLOCK Already to OPL2_OCTAVE
.3936c4	e2 10		sep #$10	                SEP #$10        ; set X short
.3936c6	a5 30		lda $30		                LDA OPL2_NOTE
.3936c8	3a		dec a		                DEC A
.3936c9	0a		asl a		                ASL A
.3936ca	aa		tax		                TAX
.3936cb	bf 44 14 39	lda $391444,x	                LDA @lnoteFNumbers,X
.3936cf	85 32		sta $32		                STA OPL2_PARAMETER0 ; Store the 8it in Param OPL2_PARAMETER0
.3936d1	e8		inx		                INX
.3936d2	bf 44 14 39	lda $391444,x	                LDA @lnoteFNumbers,X
.3936d6	85 33		sta $33		                STA OPL2_PARAMETER1 ; Store the 8bit in Param OPL2_PARAMETER1
.3936d8	22 d8 3b 39	jsl $393bd8	                JSL OPL2_SET_FNUMBER
.3936dc	a9 01		lda #$01	                LDA #$01
.3936de	85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.3936e0	20 95 3c	jsr $393c95	                JSR OPL2_SET_KEYON
.3936e3	c2 10		rep #$10	                REP #$10        ; set X long
.3936e5	fa		plx		                PLX
.3936e6	6b		rtl		                RTL
.3936e7					OPL2_PLAYDRUM
.3936e7	6b		rtl		                RTL
.3936e8					OPL2_SET_INSTRUMENT
.3936e8	48		pha		                PHA             ; begin setdp macro
.3936e9	08		php		                PHP
.3936ea	c2 20		rep #$20	                REP #$20        ; set A long
.3936ec	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3936ef	5b		tcd		                TCD
.3936f0	28		plp		                PLP
.3936f1	68		pla		                PLA             ; end setdp macro
.3936f2	38		sec		              SEC ; Set the WaveFormSelect to True
.3936f3	22 d6 38 39	jsl $3938d6	              JSL OPL2_SET_WAVEFORMSELECT;
.3936f7	e2 20		sep #$20	                SEP #$20        ; set A short
.3936f9	c2 10		rep #$10	                REP #$10        ; set X long
.3936fb	a0 00 00	ldy #$0000	              LDY #$0000
.3936fe	a2 00 00	ldx #$0000	              LDX #$0000
.393701	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO],Y ; Pointer Location 0 in Instrument Profile
.393703	85 35		sta $35		              STA OPL2_PARAMETER3
.393705	c8		iny		              INY
.393706	c9 06		cmp #$06	              CMP #$06
.393708	d0 03		bne $39370d	              BNE PERCUSSION_NEXT07
.39370a	82 70 01	brl $39387d	              BRL Percussion_6
.39370d					PERCUSSION_NEXT07
.39370d	c9 07		cmp #$07	              CMP #$07
.39370f	d0 03		bne $393714	              BNE PERCUSSION_NEXT08
.393711	82 44 01	brl $393858	              BRL Percussion_7
.393714					PERCUSSION_NEXT08
.393714	c9 08		cmp #$08	              CMP #$08
.393716	d0 03		bne $39371b	              BNE PERCUSSION_NEXT09
.393718	82 18 01	brl $393833	              BRL Percussion_8
.39371b					PERCUSSION_NEXT09
.39371b	c9 09		cmp #$09	              CMP #$09
.39371d	d0 03		bne $393722	              BNE PERCUSSION_NEXT0A
.39371f	82 ec 00	brl $39380e	              BRL Percussion_9
.393722					PERCUSSION_NEXT0A
.393722	c9 0a		cmp #$0a	              CMP #$0A
.393724	d0 03		bne $393729	              BNE Percussion_Default
.393726	82 c0 00	brl $3937e9	              BRL Percussion_A
.393729					Percussion_Default
.393729	a9 00		lda #$00	              LDA #$00
.39372b	85 26		sta $26		              STA OPL2_OPERATOR
.39372d	c2 20		rep #$20	                REP #$20        ; set A long
.39372f	a9 20 00	lda #$0020	              LDA #$0020;
.393732	85 28		sta $28		              STA OPL2_REG_REGION
.393734	20 14 3e	jsr $393e14	              JSR OPL2_GET_REG_OFFSET
.393737	e2 20		sep #$20	                SEP #$20        ; set A short
.393739	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.39373b	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39373d	c8		iny		              INY
.39373e	c2 20		rep #$20	                REP #$20        ; set A long
.393740	a9 40 00	lda #$0040	              LDA #$0040;
.393743	85 28		sta $28		              STA OPL2_REG_REGION
.393745	20 14 3e	jsr $393e14	              JSR OPL2_GET_REG_OFFSET
.393748	e2 20		sep #$20	                SEP #$20        ; set A short
.39374a	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.39374c	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39374e	c8		iny		              INY
.39374f	c2 20		rep #$20	                REP #$20        ; set A long
.393751	a9 60 00	lda #$0060	              LDA #$0060;
.393754	85 28		sta $28		              STA OPL2_REG_REGION
.393756	20 14 3e	jsr $393e14	              JSR OPL2_GET_REG_OFFSET
.393759	e2 20		sep #$20	                SEP #$20        ; set A short
.39375b	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.39375d	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39375f	c8		iny		              INY
.393760	c2 20		rep #$20	                REP #$20        ; set A long
.393762	a9 80 00	lda #$0080	              LDA #$0080;
.393765	85 28		sta $28		              STA OPL2_REG_REGION
.393767	20 14 3e	jsr $393e14	              JSR OPL2_GET_REG_OFFSET
.39376a	e2 20		sep #$20	                SEP #$20        ; set A short
.39376c	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.39376e	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393770	c8		iny		              INY
.393771	c2 20		rep #$20	                REP #$20        ; set A long
.393773	a9 e0 00	lda #$00e0	              LDA #$00E0;
.393776	85 28		sta $28		              STA OPL2_REG_REGION
.393778	20 14 3e	jsr $393e14	              JSR OPL2_GET_REG_OFFSET
.39377b	e2 20		sep #$20	                SEP #$20        ; set A short
.39377d	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.39377f	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393781	c8		iny		              INY
.393782	e2 10		sep #$10	                SEP #$10        ; set X short
.393784	a5 27		lda $27		              LDA OPL2_CHANNEL
.393786	29 0f		and #$0f	              AND #$0F
.393788	aa		tax		              TAX
.393789	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 6 in Instrument Profile
.39378b	9f c0 e6 af	sta $afe6c0,x	              STA @lOPL3_R_FEEDBACK,X
.39378f	c8		iny		              INY
.393790	a9 01		lda #$01	              LDA #$01
.393792	85 26		sta $26		              STA OPL2_OPERATOR
.393794	c2 20		rep #$20	                REP #$20        ; set A long
.393796	a9 20 00	lda #$0020	              LDA #$0020;
.393799	85 28		sta $28		              STA OPL2_REG_REGION
.39379b	20 14 3e	jsr $393e14	              JSR OPL2_GET_REG_OFFSET
.39379e	e2 20		sep #$20	                SEP #$20        ; set A short
.3937a0	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 7 in Instrument Profile
.3937a2	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3937a4	c8		iny		              INY
.3937a5	c2 20		rep #$20	                REP #$20        ; set A long
.3937a7	a9 40 00	lda #$0040	              LDA #$0040;
.3937aa	85 28		sta $28		              STA OPL2_REG_REGION
.3937ac	20 14 3e	jsr $393e14	              JSR OPL2_GET_REG_OFFSET
.3937af	e2 20		sep #$20	                SEP #$20        ; set A short
.3937b1	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 8 in Instrument Profile
.3937b3	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3937b5	c8		iny		              INY
.3937b6	c2 20		rep #$20	                REP #$20        ; set A long
.3937b8	a9 60 00	lda #$0060	              LDA #$0060;
.3937bb	85 28		sta $28		              STA OPL2_REG_REGION
.3937bd	20 14 3e	jsr $393e14	              JSR OPL2_GET_REG_OFFSET
.3937c0	e2 20		sep #$20	                SEP #$20        ; set A short
.3937c2	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 9 in Instrument Profile
.3937c4	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3937c6	c8		iny		              INY
.3937c7	c2 20		rep #$20	                REP #$20        ; set A long
.3937c9	a9 80 00	lda #$0080	              LDA #$0080;
.3937cc	85 28		sta $28		              STA OPL2_REG_REGION
.3937ce	20 14 3e	jsr $393e14	              JSR OPL2_GET_REG_OFFSET
.3937d1	e2 20		sep #$20	                SEP #$20        ; set A short
.3937d3	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location A in Instrument Profile
.3937d5	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3937d7	c8		iny		              INY
.3937d8	c2 20		rep #$20	                REP #$20        ; set A long
.3937da	a9 e0 00	lda #$00e0	              LDA #$00E0;
.3937dd	85 28		sta $28		              STA OPL2_REG_REGION
.3937df	20 14 3e	jsr $393e14	              JSR OPL2_GET_REG_OFFSET
.3937e2	e2 20		sep #$20	                SEP #$20        ; set A short
.3937e4	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location B in Instrument Profile
.3937e6	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3937e8	6b		rtl		                RTL
.3937e9					Percussion_A
.3937e9	e2 20		sep #$20	                SEP #$20        ; set A short
.3937eb	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.3937ed	8f 31 e6 af	sta $afe631	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $11
.3937f1	c8		iny		              INY
.3937f2	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.3937f4	8f 51 e6 af	sta $afe651	              STA @lOPL3_R_KSL_TL + $11
.3937f8	c8		iny		              INY
.3937f9	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.3937fb	8f 71 e6 af	sta $afe671	              STA @lOPL3_R_AR_DR + $11
.3937ff	c8		iny		              INY
.393800	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393802	8f 91 e6 af	sta $afe691	              STA @lOPL3_R_SL_RR + $11
.393806	c8		iny		              INY
.393807	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393809	8f f1 e6 af	sta $afe6f1	              STA @lOPL3_R_WAVE_SELECT + $11
.39380d	6b		rtl		                RTL
.39380e					Percussion_9
.39380e	e2 20		sep #$20	                SEP #$20        ; set A short
.393810	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393812	8f 35 e6 af	sta $afe635	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $15
.393816	c8		iny		              INY
.393817	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393819	8f 55 e6 af	sta $afe655	              STA @lOPL3_R_KSL_TL + $15
.39381d	c8		iny		              INY
.39381e	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393820	8f 75 e6 af	sta $afe675	              STA @lOPL3_R_AR_DR + $15
.393824	c8		iny		              INY
.393825	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393827	8f 95 e6 af	sta $afe695	              STA @lOPL3_R_SL_RR + $15
.39382b	c8		iny		              INY
.39382c	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.39382e	8f f5 e6 af	sta $afe6f5	              STA @lOPL3_R_WAVE_SELECT + $15
.393832	6b		rtl		              RTL
.393833					Percussion_8
.393833	e2 20		sep #$20	                SEP #$20        ; set A short
.393835	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393837	8f 32 e6 af	sta $afe632	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $12
.39383b	c8		iny		              INY
.39383c	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.39383e	8f 52 e6 af	sta $afe652	              STA @lOPL3_R_KSL_TL + $12
.393842	c8		iny		              INY
.393843	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393845	8f 72 e6 af	sta $afe672	              STA @lOPL3_R_AR_DR + $12
.393849	c8		iny		              INY
.39384a	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.39384c	8f 92 e6 af	sta $afe692	              STA @lOPL3_R_SL_RR + $12
.393850	c8		iny		              INY
.393851	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393853	8f f2 e6 af	sta $afe6f2	              STA @lOPL3_R_WAVE_SELECT + $12
.393857	6b		rtl		              RTL
.393858					Percussion_7
.393858	e2 20		sep #$20	                SEP #$20        ; set A short
.39385a	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.39385c	8f 34 e6 af	sta $afe634	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $14
.393860	c8		iny		              INY
.393861	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393863	8f 54 e6 af	sta $afe654	              STA @lOPL3_R_KSL_TL + $14
.393867	c8		iny		              INY
.393868	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.39386a	8f 74 e6 af	sta $afe674	              STA @lOPL3_R_AR_DR + $14
.39386e	c8		iny		              INY
.39386f	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393871	8f 94 e6 af	sta $afe694	              STA @lOPL3_R_SL_RR + $14
.393875	c8		iny		              INY
.393876	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393878	8f f4 e6 af	sta $afe6f4	              STA @lOPL3_R_WAVE_SELECT + $14
.39387c	6b		rtl		              RTL
.39387d					Percussion_6
.39387d	e2 20		sep #$20	                SEP #$20        ; set A short
.39387f	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393881	8f 30 e6 af	sta $afe630	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $10
.393885	8f 33 e6 af	sta $afe633	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $13
.393889	c8		iny		              INY
.39388a	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.39388c	8f 50 e6 af	sta $afe650	              STA @lOPL3_R_KSL_TL + $10
.393890	8f 53 e6 af	sta $afe653	              STA @lOPL3_R_KSL_TL + $13
.393894	c8		iny		              INY
.393895	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393897	8f 70 e6 af	sta $afe670	              STA @lOPL3_R_AR_DR + $10
.39389b	8f 73 e6 af	sta $afe673	              STA @lOPL3_R_AR_DR + $13
.39389f	c8		iny		              INY
.3938a0	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.3938a2	8f 90 e6 af	sta $afe690	              STA @lOPL3_R_SL_RR + $10
.3938a6	8f 93 e6 af	sta $afe693	              STA @lOPL3_R_SL_RR + $13
.3938aa	c8		iny		              INY
.3938ab	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.3938ad	8f f0 e6 af	sta $afe6f0	              STA @lOPL3_R_WAVE_SELECT + $10
.3938b1	8f f3 e6 af	sta $afe6f3	              STA @lOPL3_R_WAVE_SELECT + $13
.3938b5	6b		rtl		              RTL
.3938b6					OPL2_SET_REGISTER
.3938b6	48		pha		                PHA             ; begin setdp macro
.3938b7	08		php		                PHP
.3938b8	c2 20		rep #$20	                REP #$20        ; set A long
.3938ba	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3938bd	5b		tcd		                TCD
.3938be	28		plp		                PLP
.3938bf	68		pla		                PLA             ; end setdp macro
.3938c0	c2 20		rep #$20	                REP #$20        ; set A long
.3938c2	18		clc		              CLC
.3938c3	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3938c6	65 32		adc $32		              ADC OPL2_PARAMETER0
.3938c8	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3938ca	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3938cd	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3938cf	e2 20		sep #$20	                SEP #$20        ; set A short
.3938d1	a5 33		lda $33		              LDA OPL2_PARAMETER1
.3938d3	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3938d5	6b		rtl		              RTL
.3938d6					OPL2_SET_WAVEFORMSELECT
.3938d6	48		pha		                PHA             ; begin setdp macro
.3938d7	08		php		                PHP
.3938d8	c2 20		rep #$20	                REP #$20        ; set A long
.3938da	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3938dd	5b		tcd		                TCD
.3938de	28		plp		                PLP
.3938df	68		pla		                PLA             ; end setdp macro
.3938e0	c2 20		rep #$20	                REP #$20        ; set A long
.3938e2	a9 01 e6	lda #$e601	              LDA #<>OPL3_R_BASE + $0001
.3938e5	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3938e7	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3938ea	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3938ec	e2 20		sep #$20	                SEP #$20        ; set A short
.3938ee	b0 07		bcs $3938f7	              BCS OPL2_Set_WaveFormSelect_set
.3938f0	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3938f2	29 df		and #$df	              AND #$DF
.3938f4	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3938f6	6b		rtl		              RTL
.3938f7					OPL2_Set_WaveFormSelect_set
.3938f7	48		pha		                PHA             ; begin setdp macro
.3938f8	08		php		                PHP
.3938f9	c2 20		rep #$20	                REP #$20        ; set A long
.3938fb	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3938fe	5b		tcd		                TCD
.3938ff	28		plp		                PLP
.393900	68		pla		                PLA             ; end setdp macro
.393901	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393903	09 20 00	ora #$0020	              ORA #$20
.393906	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393908	6b		rtl		                RTL
.393909					OPL2_SET_TREMOLO
.393909	48		pha		                PHA             ; begin setdp macro
.39390a	08		php		                PHP
.39390b	c2 20		rep #$20	                REP #$20        ; set A long
.39390d	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393910	5b		tcd		                TCD
.393911	28		plp		                PLP
.393912	68		pla		                PLA             ; end setdp macro
.393913	08		php		                PHP ; Push the Carry
.393914	c2 20		rep #$20	                REP #$20        ; set A long
.393916	18		clc		                CLC
.393917	a9 20 00	lda #$0020	                LDA #$0020 ;
.39391a	85 28		sta $28		                STA OPL2_REG_REGION
.39391c	20 14 3e	jsr $393e14	                JSR OPL2_GET_REG_OFFSET
.39391f	28		plp		                PLP ; Pull the Carry out
.393920	e2 20		sep #$20	                SEP #$20        ; set A short
.393922	b0 08		bcs $39392c	                BCS OPL2_Set_Tremolo_Set;
.393924	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393926	29 7f		and #$7f	                AND #$7F
.393928	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.39392a	80 06		bra $393932	                BRA OPL2_Set_Tremolo_Exit
.39392c					OPL2_Set_Tremolo_Set
.39392c	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39392e	09 80		ora #$80	                ORA #$80
.393930	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393932					OPL2_Set_Tremolo_Exit
.393932	6b		rtl		                RTL
.393933					OPL2_GET_TREMOLO
.393933	48		pha		                PHA             ; begin setdp macro
.393934	08		php		                PHP
.393935	c2 20		rep #$20	                REP #$20        ; set A long
.393937	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39393a	5b		tcd		                TCD
.39393b	28		plp		                PLP
.39393c	68		pla		                PLA             ; end setdp macro
.39393d	c2 20		rep #$20	                REP #$20        ; set A long
.39393f	a9 20 00	lda #$0020	                LDA #$0020;
.393942	85 28		sta $28		                STA OPL2_REG_REGION
.393944	20 14 3e	jsr $393e14	                JSR OPL2_GET_REG_OFFSET
.393947	e2 20		sep #$20	                SEP #$20        ; set A short
.393949	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39394b	29 80		and #$80	                AND #$80
.39394d	6b		rtl		                RTL
.39394e					OPL2_SET_VIBRATO
.39394e	48		pha		                PHA             ; begin setdp macro
.39394f	08		php		                PHP
.393950	c2 20		rep #$20	                REP #$20        ; set A long
.393952	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393955	5b		tcd		                TCD
.393956	28		plp		                PLP
.393957	68		pla		                PLA             ; end setdp macro
.393958	08		php		                PHP ; Push the Carry
.393959	c2 20		rep #$20	                REP #$20        ; set A long
.39395b	18		clc		                CLC
.39395c	a9 20 00	lda #$0020	                LDA #$0020;
.39395f	85 28		sta $28		                STA OPL2_REG_REGION
.393961	20 14 3e	jsr $393e14	                JSR OPL2_GET_REG_OFFSET
.393964	28		plp		                PLP ; Pull the Carry out
.393965	e2 20		sep #$20	                SEP #$20        ; set A short
.393967	b0 08		bcs $393971	                BCS OPL2_Set_Vibrato_Set;
.393969	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39396b	29 bf		and #$bf	                AND #$BF
.39396d	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.39396f	80 06		bra $393977	                BRA OPL2_Set_Vibrato_Exit
.393971					OPL2_Set_Vibrato_Set
.393971	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393973	09 40		ora #$40	                ORA #$40
.393975	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393977					OPL2_Set_Vibrato_Exit
.393977	6b		rtl		                RTL
.393978					OPL2_GET_VIBRATO
.393978	48		pha		                PHA             ; begin setdp macro
.393979	08		php		                PHP
.39397a	c2 20		rep #$20	                REP #$20        ; set A long
.39397c	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39397f	5b		tcd		                TCD
.393980	28		plp		                PLP
.393981	68		pla		                PLA             ; end setdp macro
.393982	c2 20		rep #$20	                REP #$20        ; set A long
.393984	a9 20 00	lda #$0020	                LDA #$0020;
.393987	85 28		sta $28		                STA OPL2_REG_REGION
.393989	20 14 3e	jsr $393e14	                JSR OPL2_GET_REG_OFFSET
.39398c	e2 20		sep #$20	                SEP #$20        ; set A short
.39398e	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393990	29 40		and #$40	                AND #$40
.393992	6b		rtl		                RTL
.393993					OPL2_SET_MAINTAINSUSTAIN
.393993	48		pha		                PHA             ; begin setdp macro
.393994	08		php		                PHP
.393995	c2 20		rep #$20	                REP #$20        ; set A long
.393997	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39399a	5b		tcd		                TCD
.39399b	28		plp		                PLP
.39399c	68		pla		                PLA             ; end setdp macro
.39399d	08		php		              PHP ; Push the Carry
.39399e	c2 20		rep #$20	                REP #$20        ; set A long
.3939a0	18		clc		              CLC
.3939a1	a9 20 00	lda #$0020	              LDA #$0020;
.3939a4	85 28		sta $28		              STA OPL2_REG_REGION
.3939a6	20 14 3e	jsr $393e14	              JSR OPL2_GET_REG_OFFSET
.3939a9	28		plp		              PLP ; Pull the Carry out
.3939aa	e2 20		sep #$20	                SEP #$20        ; set A short
.3939ac	b0 08		bcs $3939b6	              BCS OPL2_Set_MaintainSustain_Set;
.3939ae	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3939b0	29 df		and #$df	              AND #$DF
.3939b2	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3939b4	80 06		bra $3939bc	              BRA OPL2_Set_MaintainSustain_Exit
.3939b6					OPL2_Set_MaintainSustain_Set
.3939b6	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3939b8	09 20		ora #$20	              ORA #$20
.3939ba	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3939bc					OPL2_Set_MaintainSustain_Exit
.3939bc	6b		rtl		                RTL
.3939bd					OPL2_GET_MAINTAINSUSTAIN
.3939bd	48		pha		                PHA             ; begin setdp macro
.3939be	08		php		                PHP
.3939bf	c2 20		rep #$20	                REP #$20        ; set A long
.3939c1	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3939c4	5b		tcd		                TCD
.3939c5	28		plp		                PLP
.3939c6	68		pla		                PLA             ; end setdp macro
.3939c7	c2 20		rep #$20	                REP #$20        ; set A long
.3939c9	a9 20 00	lda #$0020	              LDA #$0020;
.3939cc	85 28		sta $28		              STA OPL2_REG_REGION
.3939ce	20 14 3e	jsr $393e14	              JSR OPL2_GET_REG_OFFSET
.3939d1	e2 20		sep #$20	                SEP #$20        ; set A short
.3939d3	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3939d5	29 20		and #$20	              AND #$20
.3939d7	6b		rtl		                RTL
.3939d8					OPL2_SET_ENVELOPESCALING
.3939d8	48		pha		                PHA             ; begin setdp macro
.3939d9	08		php		                PHP
.3939da	c2 20		rep #$20	                REP #$20        ; set A long
.3939dc	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3939df	5b		tcd		                TCD
.3939e0	28		plp		                PLP
.3939e1	68		pla		                PLA             ; end setdp macro
.3939e2	08		php		              PHP ; Push the Carry
.3939e3	c2 20		rep #$20	                REP #$20        ; set A long
.3939e5	18		clc		              CLC
.3939e6	a9 20 00	lda #$0020	              LDA #$0020;
.3939e9	85 28		sta $28		              STA OPL2_REG_REGION
.3939eb	20 14 3e	jsr $393e14	              JSR OPL2_GET_REG_OFFSET
.3939ee	28		plp		              PLP ; Pull the Carry out
.3939ef	e2 20		sep #$20	                SEP #$20        ; set A short
.3939f1	b0 08		bcs $3939fb	              BCS OPL2_Set_EnvelopeScaling_Set;
.3939f3	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3939f5	29 ef		and #$ef	              AND #$EF
.3939f7	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3939f9	80 06		bra $393a01	              BRA OPL2_Set_EnvelopeScaling_Exit
.3939fb					OPL2_Set_EnvelopeScaling_Set
.3939fb	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3939fd	09 10		ora #$10	              ORA #$10
.3939ff	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a01					OPL2_Set_EnvelopeScaling_Exit
.393a01	6b		rtl		                RTL
.393a02					OPL2_GET_ENVELOPESCALING
.393a02	48		pha		                PHA             ; begin setdp macro
.393a03	08		php		                PHP
.393a04	c2 20		rep #$20	                REP #$20        ; set A long
.393a06	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393a09	5b		tcd		                TCD
.393a0a	28		plp		                PLP
.393a0b	68		pla		                PLA             ; end setdp macro
.393a0c	c2 20		rep #$20	                REP #$20        ; set A long
.393a0e	a9 20 00	lda #$0020	              LDA #$0020;
.393a11	85 28		sta $28		              STA OPL2_REG_REGION
.393a13	20 14 3e	jsr $393e14	              JSR OPL2_GET_REG_OFFSET
.393a16	e2 20		sep #$20	                SEP #$20        ; set A short
.393a18	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393a1a	29 10		and #$10	              AND #$10
.393a1c	6b		rtl		                RTL
.393a1d					OPL2_GET_MODFREQMULTIPLE
.393a1d	48		pha		                PHA             ; begin setdp macro
.393a1e	08		php		                PHP
.393a1f	c2 20		rep #$20	                REP #$20        ; set A long
.393a21	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393a24	5b		tcd		                TCD
.393a25	28		plp		                PLP
.393a26	68		pla		                PLA             ; end setdp macro
.393a27	c2 20		rep #$20	                REP #$20        ; set A long
.393a29	a9 20 00	lda #$0020	              LDA #$0020;
.393a2c	85 28		sta $28		              STA OPL2_REG_REGION
.393a2e	20 14 3e	jsr $393e14	              JSR OPL2_GET_REG_OFFSET
.393a31	e2 20		sep #$20	                SEP #$20        ; set A short
.393a33	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393a35	29 0f		and #$0f	              AND #$0F
.393a37	6b		rtl		              RTL
.393a38					OPL2_SET_MODFREQMULTIPLE
.393a38	48		pha		                PHA             ; begin setdp macro
.393a39	08		php		                PHP
.393a3a	c2 20		rep #$20	                REP #$20        ; set A long
.393a3c	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393a3f	5b		tcd		                TCD
.393a40	28		plp		                PLP
.393a41	68		pla		                PLA             ; end setdp macro
.393a42	c2 20		rep #$20	                REP #$20        ; set A long
.393a44	a9 20 00	lda #$0020	                LDA #$0020;
.393a47	85 28		sta $28		                STA OPL2_REG_REGION
.393a49	20 14 3e	jsr $393e14	                JSR OPL2_GET_REG_OFFSET
.393a4c	e2 20		sep #$20	                SEP #$20        ; set A short
.393a4e	a5 32		lda $32		                LDA OPL2_PARAMETER0
.393a50	29 0f		and #$0f	                AND #$0F
.393a52	85 32		sta $32		                STA OPL2_PARAMETER0
.393a54	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393a56	29 f0		and #$f0	                AND #$F0
.393a58	05 32		ora $32		                ORA OPL2_PARAMETER0
.393a5a	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393a5c	6b		rtl		                RTL
.393a5d					OPL2_SET_SCALINGLEVEL
.393a5d	48		pha		                PHA             ; begin setdp macro
.393a5e	08		php		                PHP
.393a5f	c2 20		rep #$20	                REP #$20        ; set A long
.393a61	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393a64	5b		tcd		                TCD
.393a65	28		plp		                PLP
.393a66	68		pla		                PLA             ; end setdp macro
.393a67	c2 20		rep #$20	                REP #$20        ; set A long
.393a69	a9 40 00	lda #$0040	                LDA #$0040;
.393a6c	85 28		sta $28		                STA OPL2_REG_REGION
.393a6e	20 14 3e	jsr $393e14	                JSR OPL2_GET_REG_OFFSET
.393a71	e2 20		sep #$20	                SEP #$20        ; set A short
.393a73	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393a75	29 03		and #$03	                AND #$03
.393a77	0a		asl a		                ASL
.393a78	0a		asl a		                ASL
.393a79	0a		asl a		                ASL
.393a7a	0a		asl a		                ASL
.393a7b	0a		asl a		                ASL
.393a7c	0a		asl a		                ASL
.393a7d	85 32		sta $32		                STA OPL2_PARAMETER0
.393a7f	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393a81	29 3f		and #$3f	                AND #$3F
.393a83	05 32		ora $32		                ORA OPL2_PARAMETER0
.393a85	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393a87	6b		rtl		                RTL
.393a88					OPL2_SET_VOLUME
.393a88	48		pha		                PHA             ; begin setdp macro
.393a89	08		php		                PHP
.393a8a	c2 20		rep #$20	                REP #$20        ; set A long
.393a8c	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393a8f	5b		tcd		                TCD
.393a90	28		plp		                PLP
.393a91	68		pla		                PLA             ; end setdp macro
.393a92	c2 20		rep #$20	                REP #$20        ; set A long
.393a94	a9 40 00	lda #$0040	                LDA #$0040  ;
.393a97	85 28		sta $28		                STA OPL2_REG_REGION
.393a99	20 14 3e	jsr $393e14	                JSR OPL2_GET_REG_OFFSET
.393a9c	e2 20		sep #$20	                SEP #$20        ; set A short
.393a9e	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Volume
.393aa0	29 3f		and #$3f	                AND #$3F
.393aa2	85 32		sta $32		                STA OPL2_PARAMETER0
.393aa4	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393aa6	29 c0		and #$c0	                AND #$C0
.393aa8	05 32		ora $32		                ORA OPL2_PARAMETER0
.393aaa	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393aac	6b		rtl		                RTL
.393aad					OPL2_GET_VOLUME
.393aad	48		pha		                PHA             ; begin setdp macro
.393aae	08		php		                PHP
.393aaf	c2 20		rep #$20	                REP #$20        ; set A long
.393ab1	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393ab4	5b		tcd		                TCD
.393ab5	28		plp		                PLP
.393ab6	68		pla		                PLA             ; end setdp macro
.393ab7	c2 20		rep #$20	                REP #$20        ; set A long
.393ab9	a9 40 00	lda #$0040	                LDA #$0040  ;
.393abc	85 28		sta $28		                STA OPL2_REG_REGION
.393abe	20 14 3e	jsr $393e14	                JSR OPL2_GET_REG_OFFSET
.393ac1	e2 20		sep #$20	                SEP #$20        ; set A short
.393ac3	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393ac5	29 3f		and #$3f	                AND #$3F
.393ac7	6b		rtl		                RTL
.393ac8					OPL2_SET_ATTACK
.393ac8	48		pha		                PHA             ; begin setdp macro
.393ac9	08		php		                PHP
.393aca	c2 20		rep #$20	                REP #$20        ; set A long
.393acc	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393acf	5b		tcd		                TCD
.393ad0	28		plp		                PLP
.393ad1	68		pla		                PLA             ; end setdp macro
.393ad2	c2 20		rep #$20	                REP #$20        ; set A long
.393ad4	a9 60 00	lda #$0060	                LDA #$0060  ;
.393ad7	85 28		sta $28		                STA OPL2_REG_REGION
.393ad9	20 14 3e	jsr $393e14	                JSR OPL2_GET_REG_OFFSET
.393adc	e2 20		sep #$20	                SEP #$20        ; set A short
.393ade	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393ae0	29 0f		and #$0f	                AND #$0F
.393ae2	0a		asl a		                ASL
.393ae3	0a		asl a		                ASL
.393ae4	0a		asl a		                ASL
.393ae5	0a		asl a		                ASL
.393ae6	85 32		sta $32		                STA OPL2_PARAMETER0
.393ae8	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393aea	29 0f		and #$0f	                AND #$0F
.393aec	05 32		ora $32		                ORA OPL2_PARAMETER0
.393aee	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393af0	6b		rtl		                RTL
.393af1					OPL2_GET_ATTACK
.393af1	48		pha		                PHA             ; begin setdp macro
.393af2	08		php		                PHP
.393af3	c2 20		rep #$20	                REP #$20        ; set A long
.393af5	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393af8	5b		tcd		                TCD
.393af9	28		plp		                PLP
.393afa	68		pla		                PLA             ; end setdp macro
.393afb	c2 20		rep #$20	                REP #$20        ; set A long
.393afd	a9 60 00	lda #$0060	                LDA #$0060
.393b00	85 28		sta $28		                STA OPL2_REG_REGION
.393b02	20 14 3e	jsr $393e14	                JSR OPL2_GET_REG_OFFSET
.393b05	e2 20		sep #$20	                SEP #$20        ; set A short
.393b07	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393b09	29 f0		and #$f0	                AND #$F0
.393b0b	4a		lsr a		                LSR
.393b0c	4a		lsr a		                LSR
.393b0d	4a		lsr a		                LSR
.393b0e	4a		lsr a		                LSR
.393b0f	6b		rtl		                RTL
.393b10					OPL2_SET_DECAY
.393b10	48		pha		                PHA             ; begin setdp macro
.393b11	08		php		                PHP
.393b12	c2 20		rep #$20	                REP #$20        ; set A long
.393b14	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b17	5b		tcd		                TCD
.393b18	28		plp		                PLP
.393b19	68		pla		                PLA             ; end setdp macro
.393b1a	c2 20		rep #$20	                REP #$20        ; set A long
.393b1c	a9 60 00	lda #$0060	                LDA #$0060;
.393b1f	85 28		sta $28		                STA OPL2_REG_REGION
.393b21	20 14 3e	jsr $393e14	                JSR OPL2_GET_REG_OFFSET
.393b24	e2 20		sep #$20	                SEP #$20        ; set A short
.393b26	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393b28	29 0f		and #$0f	                AND #$0F
.393b2a	85 32		sta $32		                STA OPL2_PARAMETER0
.393b2c	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393b2e	29 f0		and #$f0	                AND #$F0
.393b30	05 32		ora $32		                ORA OPL2_PARAMETER0
.393b32	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393b34	6b		rtl		                RTL
.393b35					OPL2_GET_DECAY
.393b35	48		pha		                PHA             ; begin setdp macro
.393b36	08		php		                PHP
.393b37	c2 20		rep #$20	                REP #$20        ; set A long
.393b39	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b3c	5b		tcd		                TCD
.393b3d	28		plp		                PLP
.393b3e	68		pla		                PLA             ; end setdp macro
.393b3f	c2 20		rep #$20	                REP #$20        ; set A long
.393b41	a9 60 00	lda #$0060	                LDA #$0060
.393b44	85 28		sta $28		                STA OPL2_REG_REGION
.393b46	20 14 3e	jsr $393e14	                JSR OPL2_GET_REG_OFFSET
.393b49	e2 20		sep #$20	                SEP #$20        ; set A short
.393b4b	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393b4d	29 0f		and #$0f	                AND #$0F
.393b4f	6b		rtl		                RTL
.393b50					OPL2_SET_SUSTAIN
.393b50	48		pha		                PHA             ; begin setdp macro
.393b51	08		php		                PHP
.393b52	c2 20		rep #$20	                REP #$20        ; set A long
.393b54	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b57	5b		tcd		                TCD
.393b58	28		plp		                PLP
.393b59	68		pla		                PLA             ; end setdp macro
.393b5a	c2 20		rep #$20	                REP #$20        ; set A long
.393b5c	a9 80 00	lda #$0080	                LDA #$0080;
.393b5f	85 28		sta $28		                STA OPL2_REG_REGION
.393b61	20 14 3e	jsr $393e14	                JSR OPL2_GET_REG_OFFSET
.393b64	e2 20		sep #$20	                SEP #$20        ; set A short
.393b66	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393b68	29 0f		and #$0f	                AND #$0F
.393b6a	0a		asl a		                ASL
.393b6b	0a		asl a		                ASL
.393b6c	0a		asl a		                ASL
.393b6d	0a		asl a		                ASL
.393b6e	85 32		sta $32		                STA OPL2_PARAMETER0
.393b70	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393b72	29 0f		and #$0f	                AND #$0F
.393b74	05 32		ora $32		                ORA OPL2_PARAMETER0
.393b76	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393b78	6b		rtl		                RTL
.393b79					OPL2_GET_SUSTAIN
.393b79	48		pha		                PHA             ; begin setdp macro
.393b7a	08		php		                PHP
.393b7b	c2 20		rep #$20	                REP #$20        ; set A long
.393b7d	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b80	5b		tcd		                TCD
.393b81	28		plp		                PLP
.393b82	68		pla		                PLA             ; end setdp macro
.393b83	c2 20		rep #$20	                REP #$20        ; set A long
.393b85	a9 80 00	lda #$0080	                LDA #$0080
.393b88	85 28		sta $28		                STA OPL2_REG_REGION
.393b8a	20 14 3e	jsr $393e14	                JSR OPL2_GET_REG_OFFSET
.393b8d	e2 20		sep #$20	                SEP #$20        ; set A short
.393b8f	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393b91	29 f0		and #$f0	                AND #$F0
.393b93	4a		lsr a		                LSR
.393b94	4a		lsr a		                LSR
.393b95	4a		lsr a		                LSR
.393b96	4a		lsr a		                LSR
.393b97	6b		rtl		                RTL
.393b98					OPL2_SET_RELEASE
.393b98	48		pha		                PHA             ; begin setdp macro
.393b99	08		php		                PHP
.393b9a	c2 20		rep #$20	                REP #$20        ; set A long
.393b9c	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b9f	5b		tcd		                TCD
.393ba0	28		plp		                PLP
.393ba1	68		pla		                PLA             ; end setdp macro
.393ba2	c2 20		rep #$20	                REP #$20        ; set A long
.393ba4	a9 80 00	lda #$0080	                LDA #$0080;
.393ba7	85 28		sta $28		                STA OPL2_REG_REGION
.393ba9	20 14 3e	jsr $393e14	                JSR OPL2_GET_REG_OFFSET
.393bac	e2 20		sep #$20	                SEP #$20        ; set A short
.393bae	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393bb0	29 0f		and #$0f	                AND #$0F
.393bb2	85 32		sta $32		                STA OPL2_PARAMETER0
.393bb4	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393bb6	29 f0		and #$f0	                AND #$F0
.393bb8	05 32		ora $32		                ORA OPL2_PARAMETER0
.393bba	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393bbc	6b		rtl		                RTL
.393bbd					OPL2_GET_RELEASE
.393bbd	48		pha		                PHA             ; begin setdp macro
.393bbe	08		php		                PHP
.393bbf	c2 20		rep #$20	                REP #$20        ; set A long
.393bc1	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393bc4	5b		tcd		                TCD
.393bc5	28		plp		                PLP
.393bc6	68		pla		                PLA             ; end setdp macro
.393bc7	c2 20		rep #$20	                REP #$20        ; set A long
.393bc9	a9 80 00	lda #$0080	                LDA #$0080
.393bcc	85 28		sta $28		                STA OPL2_REG_REGION
.393bce	20 14 3e	jsr $393e14	                JSR OPL2_GET_REG_OFFSET
.393bd1	e2 20		sep #$20	                SEP #$20        ; set A short
.393bd3	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393bd5	29 0f		and #$0f	                AND #$0F
.393bd7	6b		rtl		                RTL
.393bd8					OPL2_SET_FNUMBER
.393bd8	48		pha		                PHA             ; begin setdp macro
.393bd9	08		php		                PHP
.393bda	c2 20		rep #$20	                REP #$20        ; set A long
.393bdc	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393bdf	5b		tcd		                TCD
.393be0	28		plp		                PLP
.393be1	68		pla		                PLA             ; end setdp macro
.393be2	e2 20		sep #$20	                SEP #$20        ; set A short
.393be4	18		clc		                CLC
.393be5	a5 27		lda $27		                LDA OPL2_CHANNEL
.393be7	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393be9	69 a0		adc #$a0	                ADC #$A0
.393beb	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393bed	a9 00		lda #$00	                LDA #$00
.393bef	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393bf1	c2 30		rep #$30	                REP #$30        ; set A&X long
.393bf3	18		clc		                CLC
.393bf4	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393bf7	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393bf9	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393bfb	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393bfe	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393c00	e2 20		sep #$20	                SEP #$20        ; set A short
.393c02	a5 32		lda $32		                LDA OPL2_PARAMETER0     ; Load the first 8 Bits Value of FNumber
.393c04	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]  ; Load
.393c06	18		clc		                CLC
.393c07	a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.393c09	69 10		adc #$10	                ADC #$10
.393c0b	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393c0d	a5 33		lda $33		                LDA OPL2_PARAMETER1
.393c0f	29 03		and #$03	                AND #$03
.393c11	85 33		sta $33		                STA OPL2_PARAMETER1
.393c13	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393c15	29 fc		and #$fc	                AND #$FC
.393c17	05 33		ora $33		                ORA OPL2_PARAMETER1
.393c19	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393c1b	6b		rtl		                RTL
.393c1c					OPL2_GET_FNUMBER
.393c1c	48		pha		                PHA             ; begin setdp macro
.393c1d	08		php		                PHP
.393c1e	c2 20		rep #$20	                REP #$20        ; set A long
.393c20	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c23	5b		tcd		                TCD
.393c24	28		plp		                PLP
.393c25	68		pla		                PLA             ; end setdp macro
.393c26	e2 20		sep #$20	                SEP #$20        ; set A short
.393c28	18		clc		                CLC
.393c29	a5 27		lda $27		                LDA OPL2_CHANNEL
.393c2b	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393c2d	69 a0		adc #$a0	                ADC #$A0
.393c2f	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393c31	a9 00		lda #$00	                LDA #$00
.393c33	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393c35	c2 30		rep #$30	                REP #$30        ; set A&X long
.393c37	18		clc		                CLC
.393c38	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393c3b	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393c3d	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393c3f	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393c42	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393c44	e2 20		sep #$20	                SEP #$20        ; set A short
.393c46	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393c48	85 32		sta $32		                STA OPL2_PARAMETER0
.393c4a	18		clc		                CLC
.393c4b	a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.393c4d	69 10		adc #$10	                ADC #$10
.393c4f	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393c51	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393c53	29 03		and #$03	                AND #$03
.393c55	85 33		sta $33		                STA OPL2_PARAMETER1
.393c57	6b		rtl		                RTL
.393c58					OPL2_Set_Frequency
.393c58	6b		rtl		                RTL
.393c59					OPL2_Get_Frequency
.393c59	6b		rtl		                RTL
.393c5a					OPL2_SET_BLOCK
.393c5a	48		pha		                PHA             ; begin setdp macro
.393c5b	08		php		                PHP
.393c5c	c2 20		rep #$20	                REP #$20        ; set A long
.393c5e	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c61	5b		tcd		                TCD
.393c62	28		plp		                PLP
.393c63	68		pla		                PLA             ; end setdp macro
.393c64	e2 20		sep #$20	                SEP #$20        ; set A short
.393c66	18		clc		                CLC
.393c67	a5 27		lda $27		                LDA OPL2_CHANNEL
.393c69	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393c6b	69 b0		adc #$b0	                ADC #$B0
.393c6d	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393c6f	a9 00		lda #$00	                LDA #$00
.393c71	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393c73	c2 30		rep #$30	                REP #$30        ; set A&X long
.393c75	18		clc		                CLC
.393c76	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393c79	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393c7b	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393c7d	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393c80	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393c82	e2 20		sep #$20	                SEP #$20        ; set A short
.393c84	a5 31		lda $31		                LDA OPL2_OCTAVE
.393c86	29 07		and #$07	                AND #$07
.393c88	0a		asl a		                ASL
.393c89	0a		asl a		                ASL
.393c8a	85 31		sta $31		                STA OPL2_OCTAVE
.393c8c	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393c8e	29 e3		and #$e3	                AND #$E3
.393c90	05 31		ora $31		                ORA OPL2_OCTAVE
.393c92	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393c94	60		rts		                RTS
.393c95					OPL2_SET_KEYON
.393c95	48		pha		                PHA             ; begin setdp macro
.393c96	08		php		                PHP
.393c97	c2 20		rep #$20	                REP #$20        ; set A long
.393c99	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c9c	5b		tcd		                TCD
.393c9d	28		plp		                PLP
.393c9e	68		pla		                PLA             ; end setdp macro
.393c9f	e2 20		sep #$20	                SEP #$20        ; set A short
.393ca1	18		clc		                CLC
.393ca2	a5 27		lda $27		                LDA OPL2_CHANNEL
.393ca4	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393ca6	69 b0		adc #$b0	                ADC #$B0
.393ca8	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393caa	a9 00		lda #$00	                LDA #$00
.393cac	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393cae	c2 30		rep #$30	                REP #$30        ; set A&X long
.393cb0	18		clc		                CLC
.393cb1	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393cb4	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393cb6	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393cb8	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393cbb	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393cbd	e2 20		sep #$20	                SEP #$20        ; set A short
.393cbf	a5 32		lda $32		                LDA OPL2_PARAMETER0
.393cc1	29 01		and #$01	                AND #$01
.393cc3	f0 02		beq $393cc7	                BEQ SET_KEYON_OFF
.393cc5	a9 20		lda #$20	                LDA #$20
.393cc7					    SET_KEYON_OFF
.393cc7	85 32		sta $32		                STA OPL2_PARAMETER0
.393cc9	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393ccb	29 df		and #$df	                AND #$DF
.393ccd	05 32		ora $32		                ORA OPL2_PARAMETER0
.393ccf	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393cd1	60		rts		                RTS
.393cd2					OPL2_SET_FEEDBACK
.393cd2	48		pha		                PHA             ; begin setdp macro
.393cd3	08		php		                PHP
.393cd4	c2 20		rep #$20	                REP #$20        ; set A long
.393cd6	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393cd9	5b		tcd		                TCD
.393cda	28		plp		                PLP
.393cdb	68		pla		                PLA             ; end setdp macro
.393cdc	e2 20		sep #$20	                SEP #$20        ; set A short
.393cde	18		clc		              CLC
.393cdf	a5 27		lda $27		              LDA OPL2_CHANNEL
.393ce1	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393ce3	69 c0		adc #$c0	              ADC #$C0
.393ce5	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393ce7	a9 00		lda #$00	              LDA #$00
.393ce9	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393ceb	c2 30		rep #$30	                REP #$30        ; set A&X long
.393ced	18		clc		              CLC
.393cee	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393cf1	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393cf3	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393cf5	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393cf8	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393cfa	e2 20		sep #$20	                SEP #$20        ; set A short
.393cfc	a5 32		lda $32		              LDA OPL2_PARAMETER0
.393cfe	29 07		and #$07	              AND #$07
.393d00	0a		asl a		              ASL
.393d01	85 32		sta $32		              STA OPL2_PARAMETER0
.393d03	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393d05	29 01		and #$01	              AND #$01
.393d07	05 32		ora $32		              ORA OPL2_PARAMETER0
.393d09	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393d0b	6b		rtl		                RTL
.393d0c					OPL2_SET_SYNTHMODE
.393d0c	48		pha		                PHA             ; begin setdp macro
.393d0d	08		php		                PHP
.393d0e	c2 20		rep #$20	                REP #$20        ; set A long
.393d10	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d13	5b		tcd		                TCD
.393d14	28		plp		                PLP
.393d15	68		pla		                PLA             ; end setdp macro
.393d16	08		php		              PHP ; Push the Carry
.393d17	e2 20		sep #$20	                SEP #$20        ; set A short
.393d19	18		clc		              CLC
.393d1a	a5 27		lda $27		              LDA OPL2_CHANNEL
.393d1c	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393d1e	69 c0		adc #$c0	              ADC #$C0
.393d20	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393d22	a9 00		lda #$00	              LDA #$00
.393d24	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393d26	c2 30		rep #$30	                REP #$30        ; set A&X long
.393d28	18		clc		              CLC
.393d29	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393d2c	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393d2e	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393d30	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393d33	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393d35	28		plp		              PLP ; Pull the Carry out
.393d36	e2 20		sep #$20	                SEP #$20        ; set A short
.393d38	b0 08		bcs $393d42	              BCS OPL2_Set_Synthmode_Set;
.393d3a	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393d3c	29 fe		and #$fe	              AND #$FE
.393d3e	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393d40	80 06		bra $393d48	              BRA OPL2_Set_Synthmode_Exit
.393d42					OPL2_Set_Synthmode_Set
.393d42	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393d44	09 01		ora #$01	              ORA #$01
.393d46	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393d48					OPL2_Set_Synthmode_Exit
.393d48	6b		rtl		                RTL
.393d49					OPL2_SET_DEEPTREMOLO
.393d49	48		pha		                PHA             ; begin setdp macro
.393d4a	08		php		                PHP
.393d4b	c2 20		rep #$20	                REP #$20        ; set A long
.393d4d	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d50	5b		tcd		                TCD
.393d51	28		plp		                PLP
.393d52	68		pla		                PLA             ; end setdp macro
.393d53	c2 20		rep #$20	                REP #$20        ; set A long
.393d55	a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.393d58	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393d5a	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393d5d	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393d5f	e2 20		sep #$20	                SEP #$20        ; set A short
.393d61	b0 08		bcs $393d6b	              BCS OPL2_Set_DeepTremolo_Set;
.393d63	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393d65	29 7f		and #$7f	              AND #$7F
.393d67	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393d69	80 06		bra $393d71	              BRA OPL2_Set_DeepTremolo_Exit
.393d6b					OPL2_Set_DeepTremolo_Set
.393d6b	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393d6d	09 80		ora #$80	              ORA #$80
.393d6f	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393d71					OPL2_Set_DeepTremolo_Exit
.393d71	6b		rtl		                RTL
.393d72					OPL2_SET_DEEPVIBRATO
.393d72	48		pha		                PHA             ; begin setdp macro
.393d73	08		php		                PHP
.393d74	c2 20		rep #$20	                REP #$20        ; set A long
.393d76	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d79	5b		tcd		                TCD
.393d7a	28		plp		                PLP
.393d7b	68		pla		                PLA             ; end setdp macro
.393d7c	c2 20		rep #$20	                REP #$20        ; set A long
.393d7e	a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.393d81	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393d83	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393d86	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393d88	e2 20		sep #$20	                SEP #$20        ; set A short
.393d8a	b0 08		bcs $393d94	              BCS OPL2_Set_DeepVibrato_Set;
.393d8c	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393d8e	29 bf		and #$bf	              AND #$BF
.393d90	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393d92	80 06		bra $393d9a	              BRA OPL2_Set_DeepVibrato_Exit
.393d94					OPL2_Set_DeepVibrato_Set
.393d94	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393d96	09 40		ora #$40	              ORA #$40
.393d98	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393d9a					OPL2_Set_DeepVibrato_Exit
.393d9a	6b		rtl		                RTL
.393d9b					OPL2_SET_PERCUSSION
.393d9b	48		pha		                PHA             ; begin setdp macro
.393d9c	08		php		                PHP
.393d9d	c2 20		rep #$20	                REP #$20        ; set A long
.393d9f	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393da2	5b		tcd		                TCD
.393da3	28		plp		                PLP
.393da4	68		pla		                PLA             ; end setdp macro
.393da5	c2 20		rep #$20	                REP #$20        ; set A long
.393da7	a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.393daa	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393dac	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393daf	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393db1	e2 20		sep #$20	                SEP #$20        ; set A short
.393db3	b0 08		bcs $393dbd	                BCS OPL2_Set_Percussion_Set;
.393db5	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393db7	29 df		and #$df	                AND #$DF
.393db9	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393dbb	80 06		bra $393dc3	                BRA OPL2_Set_Percussion_Exit
.393dbd					OPL2_Set_Percussion_Set
.393dbd	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393dbf	09 20		ora #$20	                ORA #$20
.393dc1	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393dc3					OPL2_Set_Percussion_Exit
.393dc3	6b		rtl		                RTL
.393dc4					OPL2_SET_DRUMS
.393dc4	48		pha		                PHA             ; begin setdp macro
.393dc5	08		php		                PHP
.393dc6	c2 20		rep #$20	                REP #$20        ; set A long
.393dc8	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393dcb	5b		tcd		                TCD
.393dcc	28		plp		                PLP
.393dcd	68		pla		                PLA             ; end setdp macro
.393dce	c2 20		rep #$20	                REP #$20        ; set A long
.393dd0	a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.393dd3	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393dd5	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393dd8	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393dda	e2 20		sep #$20	                SEP #$20        ; set A short
.393ddc	a5 32		lda $32		                LDA OPL2_PARAMETER0
.393dde	29 1f		and #$1f	                AND #$1F
.393de0	85 32		sta $32		                STA OPL2_PARAMETER0
.393de2	49 ff		eor #$ff	                EOR #$FF
.393de4	85 33		sta $33		                STA OPL2_PARAMETER1
.393de6	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393de8	25 33		and $33		                AND OPL2_PARAMETER1
.393dea	05 32		ora $32		                ORA OPL2_PARAMETER0
.393dec	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393dee	6b		rtl		                RTL
.393def					OPL2_SET_WAVEFORM
.393def	48		pha		                PHA             ; begin setdp macro
.393df0	08		php		                PHP
.393df1	c2 20		rep #$20	                REP #$20        ; set A long
.393df3	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393df6	5b		tcd		                TCD
.393df7	28		plp		                PLP
.393df8	68		pla		                PLA             ; end setdp macro
.393df9	c2 20		rep #$20	                REP #$20        ; set A long
.393dfb	a9 e0 00	lda #$00e0	                LDA #$00E0;
.393dfe	85 28		sta $28		                STA OPL2_REG_REGION
.393e00	20 14 3e	jsr $393e14	                JSR OPL2_GET_REG_OFFSET
.393e03	e2 20		sep #$20	                SEP #$20        ; set A short
.393e05	a5 32		lda $32		                LDA OPL2_PARAMETER0
.393e07	29 03		and #$03	                AND #$03
.393e09	85 32		sta $32		                STA OPL2_PARAMETER0
.393e0b	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393e0d	29 fc		and #$fc	                AND #$FC
.393e0f	05 32		ora $32		                ORA OPL2_PARAMETER0
.393e11	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393e13	6b		rtl		                RTL
.393e14					OPL2_GET_REG_OFFSET
.393e14	e2 30		sep #$30	                SEP #$30        ; set A&X short
.393e16	a5 27		lda $27		                LDA OPL2_CHANNEL
.393e18	29 0f		and #$0f	                AND #$0F
.393e1a	aa		tax		                TAX
.393e1b	a5 26		lda $26		                LDA OPL2_OPERATOR   ; 0 = operator 1, other = operator 2
.393e1d	d0 06		bne $393e25	                BNE OPL2_Get_Register_Offset_l0
.393e1f	bf 5c 14 39	lda $39145c,x	                LDA @lregisterOffsets_operator0, X
.393e23	80 04		bra $393e29	                BRA OPL2_Get_Register_Offset_exit
.393e25					OPL2_Get_Register_Offset_l0
.393e25	bf 65 14 39	lda $391465,x	                LDA @lregisterOffsets_operator1, X
.393e29					OPL2_Get_Register_Offset_exit
.393e29	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393e2b	a9 00		lda #$00	                LDA #$00
.393e2d	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393e2f	c2 30		rep #$30	                REP #$30        ; set A&X long
.393e31	18		clc		                CLC
.393e32	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393e35	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393e37	65 28		adc $28		                ADC OPL2_REG_REGION ; Ex: $20, or $40, $60, $80 (in 16bits)
.393e39	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393e3b	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393e3e	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393e40	60		rts		                RTS

;******  Return to file: src\kernel.asm


;******  Processing file: src\sdcard_controller_def.asm

=$afea00				SDC_VERSION_REG         = $AFEA00    ; Ought to read 12
=$afea01				SDC_CONTROL_REG         = $AFEA01    ; Bit0 1 = Reset core logic, and registers. Self clearing
=$afea02				SDC_TRANS_TYPE_REG      = $AFEA02  ; Bit[1:0]
=$00					SDC_TRANS_DIRECT      = $00   ; 00 = Direct Access
=$01					SDC_TRANS_INIT_SD     = $01   ; 01 = Init SD
=$02					SDC_TRANS_READ_BLK    = $02   ; 10 = RW_READ_BLOCK (512 Bytes)
=$03					SDC_TRANS_WRITE_BLK   = $03   ; 11 = RW_WRITE_SD_BLOCK
=$afea03				SDC_TRANS_CONTROL_REG   = $AFEA03
=$01					SDC_TRANS_START         = $01
=$afea04				SDC_TRANS_STATUS_REG    = $AFEA04
=$01					SDC_TRANS_BUSY          = $01     ;  1= Transaction Busy
=$afea05				SDC_TRANS_ERROR_REG     = $AFEA05
=$00					SDC_TRANS_INIT_NO_ERR   = $00   ; Init Error Report [1:0]
=$01					SDC_TRANS_INIT_CMD0_ERR = $01
=$02					SDC_TRANS_INIT_CMD1_ERR = $02
=$00					SDC_TRANS_RD_NO_ERR     = $00   ; Read Error Report [3:2]
=$04					SDC_TRANS_RD_CMD_ERR    = $04
=$08					SDC_TRANS_RD_TOKEN_ERR  = $08
=$00					SDC_TRANS_WR_NO_ERR     = $00   ; Write Report Error  [5:4]
=$10					SDC_TRANS_WR_CMD_ERR    = $10   ;
=$20					SDC_TRANS_WR_DATA_ERR   = $20
=$30					SDC_TRANS_WR_BUSY_ERR   = $30
=$afea06				SDC_DIRECT_ACCESS_REG   = $AFEA06 ; SPI Direct Read and Write - Set DATA before initiating direct Access Transaction
=$afea07				SDC_SD_ADDR_7_0_REG     = $AFEA07 ; Set the ADDR before a block read or block write
=$afea08				SDC_SD_ADDR_15_8_REG    = $AFEA08 ; Addr0 [8:0] Always should be 0, since each block is 512Bytes
=$afea09				SDC_SD_ADDR_23_16_REG   = $AFEA09
=$afea0a				SDC_SD_ADDR_31_24_REG   = $AFEA0A
=$afea0b				SDC_SPI_CLK_DEL_REG     = $AFEA0B
=$afea10				SDC_RX_FIFO_DATA_REG    = $AFEA10 ; Data from the Block Read
=$afea12				SDC_RX_FIFO_DATA_CNT_HI = $AFEA12 ; How many Bytes in the FIFO HI
=$afea13				SDC_RX_FIFO_DATA_CNT_LO = $AFEA13 ; How many Bytes in the FIFO LO
=$afea14				SDC_RX_FIFO_CTRL_REG    = $AFEA14 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)
=$afea20				SDC_TX_FIFO_DATA_REG    = $AFEA20 ; Write Data Block here
=$afea24				SDC_TX_FIFO_CTRL_REG    = $AFEA24 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)

;******  Return to file: src\kernel.asm


;******  Processing file: src\sdos.asm


;******  Processing file: src\sdos_fat.asm


;******  Processing file: src\sdos_bios.asm

=$80					BIOS_TIMEOUT = $80              ; Flag to indicate if a time out has occurred (see ISETTIMEOUT)
=0					BIOS_DEV_FDC = 0                ; Floppy 0
=1					BIOS_DEV_FD1 = 1                ; Future support: Floppy 1 (not likely to be attached)
=2					BIOS_DEV_SD = 2                 ; SD card, partition 0
=3					BIOS_DEV_SD1 = 3                ; Future support: SD card, partition 1
=4					BIOS_DEV_SD2 = 4                ; Future support: SD card, partition 2
=5					BIOS_DEV_SD3 = 5                ; Future support: SD card, partition 3
=6					BIOS_DEV_HD0 = 6                ; Future support: IDE Drive 0, partition 0
=7					BIOS_DEV_HD1 = 7                ; Future support: IDE Drive 0, partition 1
=8					BIOS_DEV_HD2 = 8                ; Future support: IDE Drive 0, partition 2
=9					BIOS_DEV_HD3 = 9                ; Future support: IDE Drive 0, partition 3
=$80					BIOS_ERR_BADDEV = $80           ; BIOS bad device # error
=$81					BIOS_ERR_MOUNT = $81            ; BIOS failed to mount the device
=$82					BIOS_ERR_READ = $82             ; BIOS failed to read from a device
=$83					BIOS_ERR_WRITE = $83            ; BIOS failed to write to a device
=$84					BIOS_ERR_TRACK = $84            ; BIOS failed to seek to the correct track
=$85					BIOS_ERR_CMD = $85              ; A general block device command error
=$86					BIOS_ERR_WRITEPROT = $86        ; The media was write-protected
=$87					BIOS_ERR_NOMEDIA = $87          ; No media detected... unable to read/write in time
=$88					BIOS_ERR_RESULT = $88           ; Couldn't get the result bytes for some reason
=$89					BIOS_ERR_OOS = $89              ; FDC state is somehow out of sync with the driver.
=$8a					BIOS_ERR_NOTATA = $8A           ; IDE drive is not ATA
=$8b					BIOS_ERR_NOTINIT = $8B          ; Could not initilize the device
=$8c					BIOS_ERR_TIMEOUT = $8C          ; Timeout error
.393e41					ITRACE
.393e41	08		php		                PHP
.393e42	c2 30		rep #$30	                REP #$30        ; set A&X long
.393e44	8b		phb		                PHB                 ; Print the text
.393e45	a3 06		lda $06,s	                LDA #6,S            ; Get bits[15..0] of string pointer
.393e47	aa		tax		                TAX                 ; ... into X
.393e48	e2 20		sep #$20	                SEP #$20        ; set A short
.393e4a	a3 08		lda $08,s	                LDA #8,S            ; Get bits[23..16] of string pointer
.393e4c	48		pha		                PHA
.393e4d	ab		plb		                PLB                 ; ... into B
.393e4e	22 b9 06 39	jsl $3906b9	                JSL IPUTS           ; Print the string
.393e52	c2 20		rep #$20	                REP #$20        ; set A long
.393e54	a3 04		lda $04,s	                LDA #4,S            ; Move P and return address down over the string pointer
.393e56	83 08		sta $08,s	                STA #8,S
.393e58	a3 02		lda $02,s	                LDA #2,S
.393e5a	83 06		sta $06,s	                STA #6,S
.393e5c	ab		plb		                PLB
.393e5d	68		pla		                PLA                 ; Clean up the stack
.393e5e	68		pla		                PLA
.393e5f	28		plp		                PLP
.393e60	6b		rtl		                RTL
.393e61					ISETTIMEOUT
.393e61	8b		phb		                PHB
.393e62	0b		phd		                PHD
.393e63	08		php		                PHP
.393e64	48		pha		                PHA             ; begin setdbr macro
.393e65	08		php		                PHP
.393e66	e2 20		sep #$20	                SEP #$20        ; set A short
.393e68	a9 00		lda #$00	                LDA #0
.393e6a	48		pha		                PHA
.393e6b	ab		plb		                PLB
.393e6c	28		plp		                PLP
.393e6d	68		pla		                PLA             ; end setdbr macro
.393e6e	48		pha		                PHA             ; begin setdp macro
.393e6f	08		php		                PHP
.393e70	c2 20		rep #$20	                REP #$20        ; set A long
.393e72	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393e75	5b		tcd		                TCD
.393e76	28		plp		                PLP
.393e77	68		pla		                PLA             ; end setdp macro
.393e78	78		sei		                SEI                             ; We don't want to be interrupted
.393e79	e2 20		sep #$20	                SEP #$20        ; set A short
.393e7b	85 0d		sta $032d	                STA @b BIOS_TIMER               ; Set the number of ticks to wait
.393e7d	a5 0c		lda $032c	                LDA @b BIOS_FLAGS               ; Clear the BIOS_TIMEOUT flag
.393e7f	29 7f		and #$7f	                AND #~BIOS_TIMEOUT
.393e81	85 0c		sta $032c	                STA @b BIOS_FLAGS
.393e83	28		plp		done            PLP
.393e84	2b		pld		                PLD
.393e85	ab		plb		                PLB
.393e86	6b		rtl		                RTL
.393e87					ICMDBLOCK
.393e87	0b		phd		                PHD
.393e88	08		php		                PHP
.393e89	48		pha		                PHA             ; begin setdp macro
.393e8a	08		php		                PHP
.393e8b	c2 20		rep #$20	                REP #$20        ; set A long
.393e8d	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393e90	5b		tcd		                TCD
.393e91	28		plp		                PLP
.393e92	68		pla		                PLA             ; end setdp macro
.393e93	e2 20		sep #$20	                SEP #$20        ; set A short
.393e95	a5 01		lda $0321	                LDA BIOS_DEV                ; Get the device number
.393e97	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Check to see if we're sending to the floppy
.393e99	d0 06		bne $393ea1	                BNE ret_success             ; No: just return
.393e9b	22 d3 62 39	jsl $3962d3	                JSL FDC_CMDBLOCK            ; Yes: call upon the floppy code
.393e9f	90 0c		bcc $393ead	                BCC pass_failure
.393ea1					ret_success
.393ea1	e2 20		sep #$20	                SEP #$20        ; set A short
.393ea3	64 00		stz $0320	                STZ BIOS_STATUS
.393ea5	28		plp		                PLP
.393ea6	2b		pld		                PLD
.393ea7	38		sec		                SEC
.393ea8	6b		rtl		                RTL
.393ea9					ret_failure
.393ea9	e2 20		sep #$20	                SEP #$20        ; set A short
.393eab	85 00		sta $0320	                STA BIOS_STATUS
.393ead	28		plp		pass_failure    PLP
.393eae	2b		pld		                PLD
.393eaf	18		clc		                CLC
.393eb0	6b		rtl		                RTL
.393eb1					IGETBLOCK
.393eb1	0b		phd		                PHD
.393eb2	8b		phb		                PHB
.393eb3	08		php		                PHP
.393eb4	48		pha		                PHA             ; begin setdbr macro
.393eb5	08		php		                PHP
.393eb6	e2 20		sep #$20	                SEP #$20        ; set A short
.393eb8	a9 00		lda #$00	                LDA #0
.393eba	48		pha		                PHA
.393ebb	ab		plb		                PLB
.393ebc	28		plp		                PLP
.393ebd	68		pla		                PLA             ; end setdbr macro
.393ebe	48		pha		                PHA             ; begin setdp macro
.393ebf	08		php		                PHP
.393ec0	c2 20		rep #$20	                REP #$20        ; set A long
.393ec2	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393ec5	5b		tcd		                TCD
.393ec6	28		plp		                PLP
.393ec7	68		pla		                PLA             ; end setdp macro
.393ec8	e2 20		sep #$20	                SEP #$20        ; set A short
.393eca	a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.393ecc	c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.393ece	f0 13		beq $393ee3	                BEQ sd_getblock                     ; Yes: go to the SDC GETBLOCK routine
.393ed0	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the floppy drive?
.393ed2	f0 17		beq $393eeb	                BEQ fd_getblock                     ; Yes: go to the FDC GETBLOCK routine
.393ed4	c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.393ed6	f0 1b		beq $393ef3	                BEQ hd_getblock
.393ed8	a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.393eda					ret_failure
.393eda	e2 20		sep #$20	                SEP #$20        ; set A short
.393edc	85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.393ede	28		plp		                PLP
.393edf	ab		plb		                PLB
.393ee0	2b		pld		                PLD
.393ee1	38		sec		                SEC                                 ; Return failure
.393ee2	6b		rtl		                RTL
.393ee3	22 fd 57 39	jsl $3957fd	sd_getblock     JSL SDC_GETBLOCK                    ; Call the SDC GETBLOCK routine
.393ee7	b0 12		bcs $393efb	                BCS ret_success
.393ee9	80 ef		bra $393eda	                BRA ret_failure
.393eeb	22 dc 60 39	jsl $3960dc	fd_getblock     JSL FDC_GETBLOCK                    ; Call the FDC GETBLOCK routine
.393eef	b0 0a		bcs $393efb	                BCS ret_success
.393ef1	80 e7		bra $393eda	                BRA ret_failure
.393ef3	22 94 66 39	jsl $396694	hd_getblock     JSL IDE_GETBLOCK                    ; Call the IDE GETBLOCK routine
.393ef7	b0 02		bcs $393efb	                BCS ret_success
.393ef9	80 df		bra $393eda	                BRA ret_failure
.393efb					ret_success
.393efb	e2 20		sep #$20	                SEP #$20        ; set A short
.393efd	64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.393eff	28		plp		                PLP
.393f00	ab		plb		                PLB
.393f01	2b		pld		                PLD
.393f02	38		sec		                SEC                                 ; Return success
.393f03	6b		rtl		                RTL
.393f04					IPUTBLOCK
.393f04	0b		phd		                PHD
.393f05	8b		phb		                PHB
.393f06	08		php		                PHP
.393f07	48		pha		                PHA             ; begin setdbr macro
.393f08	08		php		                PHP
.393f09	e2 20		sep #$20	                SEP #$20        ; set A short
.393f0b	a9 00		lda #$00	                LDA #0
.393f0d	48		pha		                PHA
.393f0e	ab		plb		                PLB
.393f0f	28		plp		                PLP
.393f10	68		pla		                PLA             ; end setdbr macro
.393f11	48		pha		                PHA             ; begin setdp macro
.393f12	08		php		                PHP
.393f13	c2 20		rep #$20	                REP #$20        ; set A long
.393f15	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393f18	5b		tcd		                TCD
.393f19	28		plp		                PLP
.393f1a	68		pla		                PLA             ; end setdp macro
.393f1b	e2 20		sep #$20	                SEP #$20        ; set A short
.393f1d	a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.393f1f	c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.393f21	f0 13		beq $393f36	                BEQ sd_putblock                     ; Yes: go to the SDC PUTBLOCK routine
.393f23	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the FDC?
.393f25	f0 17		beq $393f3e	                BEQ fd_putblock                     ; Yes: go to the FDC PUTBLOCK routine
.393f27	c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.393f29	f0 1b		beq $393f46	                BEQ hd_putblock
.393f2b	a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.393f2d					ret_failure
.393f2d	e2 20		sep #$20	                SEP #$20        ; set A short
.393f2f	85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.393f31	28		plp		                PLP
.393f32	ab		plb		                PLB
.393f33	2b		pld		                PLD
.393f34	18		clc		                CLC                                 ; Return failure
.393f35	6b		rtl		                RTL
.393f36	22 9d 58 39	jsl $39589d	sd_putblock     JSL SDC_PUTBLOCK                    ; Call the SDC PUTBLOCK routine
.393f3a	90 f1		bcc $393f2d	                BCC ret_failure
.393f3c	80 10		bra $393f4e	                BRA ret_success
.393f3e	22 41 61 39	jsl $396141	fd_putblock     JSL FDC_PUTBLOCK                    ; Call the FDC PUTBLOCK routine
.393f42	90 e9		bcc $393f2d	                BCC ret_failure
.393f44	80 08		bra $393f4e	                BRA ret_success
.393f46	22 25 67 39	jsl $396725	hd_putblock     JSL IDE_PUTBLOCK                    ; Call the IDE PUTBLOCK routine
.393f4a	90 e1		bcc $393f2d	                BCC ret_failure
.393f4c	80 00		bra $393f4e	                BRA ret_success
.393f4e					ret_success
.393f4e	e2 20		sep #$20	                SEP #$20        ; set A short
.393f50	64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.393f52	28		plp		                PLP
.393f53	ab		plb		                PLB
.393f54	2b		pld		                PLD
.393f55	38		sec		                SEC                                 ; Return success
.393f56	6b		rtl		                RTL

;******  Return to file: src\sdos_fat.asm


;******  Processing file: src\sdos_dir.asm

.393f57					DOS_DIROPEN
.393f57	da		phx		                PHX
.393f58	5a		phy		                PHY
.393f59	0b		phd		                PHD
.393f5a	8b		phb		                PHB
.393f5b	08		php		                PHP
.393f5c	48		pha		                PHA             ; begin setdbr macro
.393f5d	08		php		                PHP
.393f5e	e2 20		sep #$20	                SEP #$20        ; set A short
.393f60	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.393f62	48		pha		                PHA
.393f63	ab		plb		                PLB
.393f64	28		plp		                PLP
.393f65	68		pla		                PLA             ; end setdbr macro
.393f66	48		pha		                PHA             ; begin setdp macro
.393f67	08		php		                PHP
.393f68	c2 20		rep #$20	                REP #$20        ; set A long
.393f6a	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393f6d	5b		tcd		                TCD
.393f6e	28		plp		                PLP
.393f6f	68		pla		                PLA             ; end setdp macro
.393f70	ad 20 e0	lda $38e020	                LDA ROOT_DIR_FIRST_CLUSTER  ; Set the cluster (or sector for FAT12)
.393f73	8d 32 e0	sta $38e032	                STA DOS_DIR_BLOCK_ID        ; to that of the root directory's start
.393f76	ad 22 e0	lda $38e022	                LDA ROOT_DIR_FIRST_CLUSTER+2
.393f79	8d 34 e0	sta $38e034	                STA DOS_DIR_BLOCK_ID+2
.393f7c	a9 00 e1	lda #$e100	                LDA #<>DOS_DIR_CLUSTER      ; Point to the directory cluster buffer for loading
.393f7f	85 1c		sta $033c	                STA DOS_BUFF_PTR
.393f81	85 18		sta $0338	                STA DOS_DIR_PTR
.393f83	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.393f86	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.393f88	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.393f8a	e2 20		sep #$20	                SEP #$20        ; set A short
.393f8c	ad 01 e0	lda $38e001	                LDA FILE_SYSTEM             ; Check the file system
.393f8f	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12        ; Is it FAT12?
.393f91	d0 24		bne $393fb7	                BNE fetch_fat32             ; No: handle processing the diretory as FAT32
.393f93					fetch_fat12
.393f93	e2 20		sep #$20	                SEP #$20        ; set A short
.393f95	a9 00		lda #$00	                LDA #DOS_DIR_TYPE_FAT12ROOT ; Set the directory type to FAT12 root directory
.393f97	8d 45 e0	sta $38e045	                STA DOS_DIR_TYPE
.393f9a	c2 20		rep #$20	                REP #$20        ; set A long
.393f9c	a5 18		lda $0338	                LDA DOS_DIR_PTR             ; Set the BIOS buffer pointer
.393f9e	85 06		sta $0326	                STA BIOS_BUFF_PTR
.393fa0	a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.393fa2	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.393fa4	ad 32 e0	lda $38e032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA of the sector
.393fa7	85 02		sta $0322	                STA BIOS_LBA
.393fa9	ad 34 e0	lda $38e034	                LDA DOS_DIR_BLOCK_ID+2
.393fac	85 04		sta $0324	                STA BIOS_LBA+2
.393fae	22 44 10 38	jsl $381044	                JSL GETBLOCK                ; Get the sector from the FAT12 device
.393fb2	b0 1f		bcs $393fd3	                BCS do_success              ; If sucessful, set the directory cursor
.393fb4	82 81 15	brl $395538	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.393fb7					fetch_fat32
.393fb7	e2 20		sep #$20	                SEP #$20        ; set A short
.393fb9	a9 01		lda #$01	                LDA #DOS_DIR_TYPE_FILE      ; Set the directory type to file type (all FAT32, any FAT12 subdirectory)
.393fbb	8d 45 e0	sta $38e045	                STA DOS_DIR_TYPE
.393fbe	c2 20		rep #$20	                REP #$20        ; set A long
.393fc0	ad 32 e0	lda $38e032	                LDA DOS_DIR_BLOCK_ID
.393fc3	85 10		sta $0330	                STA DOS_CLUS_ID
.393fc5	ad 34 e0	lda $38e034	                LDA DOS_DIR_BLOCK_ID+2
.393fc8	85 12		sta $0332	                STA DOS_CLUS_ID+2
.393fca	22 12 44 39	jsl $394412	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.393fce	b0 03		bcs $393fd3	                BCS do_success              ; If successful: set the directory cursor
.393fd0	82 65 15	brl $395538	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.393fd3	82 69 15	brl $39553f	do_success      BRL IF_SUCCESS
.393fd6					DOS_DIRFIRST
.393fd6	0b		phd		                PHD
.393fd7	08		php		                PHP
.393fd8	48		pha		                PHA             ; begin setdp macro
.393fd9	08		php		                PHP
.393fda	c2 20		rep #$20	                REP #$20        ; set A long
.393fdc	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393fdf	5b		tcd		                TCD
.393fe0	28		plp		                PLP
.393fe1	68		pla		                PLA             ; end setdp macro
.393fe2	c2 20		rep #$20	                REP #$20        ; set A long
.393fe4	a9 00 e1	lda #$e100	                LDA #<>DOS_DIR_CLUSTER
.393fe7	85 18		sta $0338	                STA DOS_DIR_PTR
.393fe9	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.393fec	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.393fee	28		plp		                PLP
.393fef	2b		pld		                PLD
.393ff0	6b		rtl		                RTL
.393ff1					DOS_DIRNEXT
.393ff1	da		phx		                PHX
.393ff2	5a		phy		                PHY
.393ff3	0b		phd		                PHD
.393ff4	8b		phb		                PHB
.393ff5	08		php		                PHP
.393ff6	48		pha		                PHA             ; begin setdbr macro
.393ff7	08		php		                PHP
.393ff8	e2 20		sep #$20	                SEP #$20        ; set A short
.393ffa	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.393ffc	48		pha		                PHA
.393ffd	ab		plb		                PLB
.393ffe	28		plp		                PLP
.393fff	68		pla		                PLA             ; end setdbr macro
.394000	48		pha		                PHA             ; begin setdp macro
.394001	08		php		                PHP
.394002	c2 20		rep #$20	                REP #$20        ; set A long
.394004	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394007	5b		tcd		                TCD
.394008	28		plp		                PLP
.394009	68		pla		                PLA             ; end setdp macro
.39400a	c2 20		rep #$20	                REP #$20        ; set A long
.39400c	18		clc		                CLC                         ; Advance the directory entry pointer to the next entry
.39400d	a5 18		lda $0338	                LDA DOS_DIR_PTR
.39400f	69 20 00	adc #$0020	                ADC #DOS_DIR_ENTRY_SIZE
.394012	85 18		sta $0338	                STA DOS_DIR_PTR
.394014	a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.394016	69 00 00	adc #$0000	                ADC #0
.394019	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.39401b	38		sec		                SEC                         ; Check to see if we've reached the end of the sector buffer
.39401c	a9 00 e3	lda #$e300	                LDA #<>DOS_DIR_CLUSTER_END
.39401f	e5 18		sbc $0338	                SBC DOS_DIR_PTR
.394021	85 28		sta $0348	                STA DOS_TEMP
.394023	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER_END
.394026	e5 1a		sbc $033a	                SBC DOS_DIR_PTR+2
.394028	85 2a		sta $034a	                STA DOS_TEMP+2
.39402a	30 0c		bmi $394038	                BMI get_next_block          ; Yes: try to fetch the next directory entry
.39402c	f0 03		beq $394031	                BEQ check_lower
.39402e	82 0e 15	brl $39553f	                BRL IF_SUCCESS
.394031	a5 28		lda $0348	check_lower     LDA DOS_TEMP
.394033	f0 03		beq $394038	                BEQ get_next_block
.394035	82 07 15	brl $39553f	                BRL IF_SUCCESS
.394038					get_next_block
.394038	e2 20		sep #$20	                SEP #$20        ; set A short
.39403a	ad 45 e0	lda $38e045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.39403d	c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE
.39403f	f0 38		beq $394079	                BEQ next_cluster            ; FILE TYPE: it's cluster based (FAT32, or FAT12 non-root)
.394041					next_sector
.394041	c2 20		rep #$20	                REP #$20        ; set A long
.394043	ad 32 e0	lda $38e032	                LDA DOS_DIR_BLOCK_ID
.394046	1a		inc a		                INC A
.394047	8d 32 e0	sta $38e032	                STA DOS_DIR_BLOCK_ID        ; Increment the sector number (FAT12 root directory is sector based)
.39404a	c9 0a 00	cmp #$000a	                CMP #10                     ; See if we're at the end (TODO: calculate this)
.39404d	d0 07		bne $394056	                BNE read_sector
.39404f	e2 20		sep #$20	                SEP #$20        ; set A short
.394051	a9 00		lda #$00	                LDA #0
.394053	82 de 14	brl $395534	                BRL IF_FAILURE
.394056					read_sector
.394056	c2 20		rep #$20	                REP #$20        ; set A long
.394058	ad 32 e0	lda $38e032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA to the sector #
.39405b	85 02		sta $0322	                STA BIOS_LBA
.39405d	ad 34 e0	lda $38e034	                LDA DOS_DIR_BLOCK_ID+2
.394060	85 04		sta $0324	                STA BIOS_LBA+2
.394062	a9 00 e1	lda #$e100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointers to the buffer
.394065	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394067	85 18		sta $0338	                STA DOS_DIR_PTR
.394069	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.39406c	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.39406e	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.394070	22 44 10 38	jsl $381044	                JSL GETBLOCK                ; Attempt to read the sector from the FAT12 device
.394074	b0 39		bcs $3940af	                BCS do_success              ; If successful: set the directory cursor
.394076	82 bf 14	brl $395538	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.394079					next_cluster
.394079	c2 20		rep #$20	                REP #$20        ; set A long
.39407b	ad 32 e0	lda $38e032	                LDA DOS_DIR_BLOCK_ID        ; Get the current block (cluster) ID
.39407e	85 10		sta $0330	                STA DOS_CLUS_ID
.394080	ad 34 e0	lda $38e034	                LDA DOS_DIR_BLOCK_ID+2
.394083	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394085	a9 00 e1	lda #$e100	                LDA #<>DOS_DIR_CLUSTER
.394088	85 1c		sta $033c	                STA DOS_BUFF_PTR
.39408a	85 18		sta $0338	                STA DOS_DIR_PTR
.39408c	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.39408f	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394091	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.394093	22 1d 48 39	jsl $39481d	                JSL NEXTCLUSTER             ; Try to find the next cluster
.394097	b0 03		bcs $39409c	                BCS set_next
.394099	82 9c 14	brl $395538	                BRL IF_PASSFAILURE          ; If error: pass it up the chain
.39409c	a5 10		lda $0330	set_next        LDA DOS_CLUS_ID             ; Save the cluster as the current directory cluster
.39409e	8d 32 e0	sta $38e032	                STA DOS_DIR_BLOCK_ID
.3940a1	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3940a3	8d 34 e0	sta $38e034	                STA DOS_DIR_BLOCK_ID+2
.3940a6	22 12 44 39	jsl $394412	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.3940aa	b0 03		bcs $3940af	                BCS do_success              ; If successful: set the directory cursor
.3940ac	82 89 14	brl $395538	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.3940af	82 8d 14	brl $39553f	do_success      BRL IF_SUCCESS
.3940b2					DOS_DIRFINDFREE
.3940b2	da		phx		                PHX
.3940b3	5a		phy		                PHY
.3940b4	0b		phd		                PHD
.3940b5	8b		phb		                PHB
.3940b6	08		php		                PHP
.3940b7	48		pha		                PHA             ; begin setdbr macro
.3940b8	08		php		                PHP
.3940b9	e2 20		sep #$20	                SEP #$20        ; set A short
.3940bb	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3940bd	48		pha		                PHA
.3940be	ab		plb		                PLB
.3940bf	28		plp		                PLP
.3940c0	68		pla		                PLA             ; end setdbr macro
.3940c1	48		pha		                PHA             ; begin setdp macro
.3940c2	08		php		                PHP
.3940c3	c2 20		rep #$20	                REP #$20        ; set A long
.3940c5	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3940c8	5b		tcd		                TCD
.3940c9	28		plp		                PLP
.3940ca	68		pla		                PLA             ; end setdp macro
.3940cb	22 d0 51 39	jsl $3951d0	                JSL IF_DIROPEN
.3940cf	b0 06		bcs $3940d7	                BCS start_walk
.3940d1	a9 08 00	lda #$0008	                LDA #DOS_ERR_NODIR          ; Return that we could not read the directory
.3940d4	82 28 00	brl $3940ff	                BRL ret_failure
.3940d7	a0 00 00	ldy #$0000	start_walk      LDY #0                      ; We check the first character of the entry
.3940da					chk_entry
.3940da	e2 20		sep #$20	                SEP #$20        ; set A short
.3940dc	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the first byte of the directory entry
.3940de	f0 1c		beq $3940fc	                BEQ ret_success             ; If 0: we have a blank... return it
.3940e0	c9 e5		cmp #$e5	                CMP #DOS_DIR_ENT_UNUSED     ; Is it an unused (deleted) entry?
.3940e2	f0 18		beq $3940fc	                BEQ ret_success             ; Yes: return it
.3940e4	22 0a 52 39	jsl $39520a	                JSL IF_DIRNEXT              ; Go to the next directory entry
.3940e8	b0 ed		bcs $3940d7	                BCS start_walk              ; If we got one, start walking it
.3940ea	22 02 41 39	jsl $394102	                JSL DOS_DIRAPPEND           ; If there isn't one, create a blank cluster
.3940ee	90 0f		bcc $3940ff	                BCC ret_failure             ; If that didn't work, return the failure
.3940f0	c2 20		rep #$20	                REP #$20        ; set A long
.3940f2	a9 00 e1	lda #$e100	                LDA #<>DOS_DIR_CLUSTER      ; Return the first entry
.3940f5	85 18		sta $0338	                STA DOS_DIR_PTR
.3940f7	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.3940fa	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.3940fc	82 40 14	brl $39553f	ret_success     BRL IF_SUCCESS
.3940ff	82 32 14	brl $395534	ret_failure     BRL IF_FAILURE
.394102					DOS_DIRAPPEND
.394102	da		phx		                PHX
.394103	8b		phb		                PHB
.394104	0b		phd		                PHD
.394105	08		php		                PHP
.394106	48		pha		                PHA             ; begin setdbr macro
.394107	08		php		                PHP
.394108	e2 20		sep #$20	                SEP #$20        ; set A short
.39410a	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39410c	48		pha		                PHA
.39410d	ab		plb		                PLB
.39410e	28		plp		                PLP
.39410f	68		pla		                PLA             ; end setdbr macro
.394110	48		pha		                PHA             ; begin setdp macro
.394111	08		php		                PHP
.394112	c2 20		rep #$20	                REP #$20        ; set A long
.394114	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394117	5b		tcd		                TCD
.394118	28		plp		                PLP
.394119	68		pla		                PLA             ; end setdp macro
.39411a	e2 20		sep #$20	                SEP #$20        ; set A short
.39411c	ad 45 e0	lda $38e045	                LDA DOS_DIR_TYPE
.39411f	c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE          ; Are we looking at a file type directory
.394121	f0 09		beq $39412c	                BEQ clr_sector                  ; Yes: clear out the directory data
.394123					ret_failure
.394123	e2 20		sep #$20	                SEP #$20        ; set A short
.394125	a9 15		lda #$15	                LDA #DOS_ERR_DIRFULL            ; No: return a directory-full error
.394127	85 0e		sta $032e	                STA DOS_STATUS
.394129	82 3e 00	brl $39416a	                BRL pass_failure
.39412c					clr_sector
.39412c	c2 20		rep #$20	                REP #$20        ; set A long
.39412e	a9 00 00	lda #$0000	                LDA #0
.394131	a2 00 00	ldx #$0000	                LDX #0
.394134	9d 00 e1	sta $38e100,x	clr_loop        STA DOS_DIR_CLUSTER,X           ; Clear the directory cluster
.394137	e8		inx		                INX
.394138	e8		inx		                INX
.394139	e0 00 02	cpx #$0200	                CPX #512
.39413c	d0 f6		bne $394134	                BNE clr_loop
.39413e	a9 00 e1	lda #$e100	                LDA #<>DOS_DIR_CLUSTER          ; Point to the new, blank directory data
.394141	85 1c		sta $033c	                STA DOS_BUFF_PTR
.394143	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.394146	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394148	ad 32 e0	lda $38e032	                LDA DOS_DIR_BLOCK_ID            ; We want to append it to the current directory
.39414b	85 10		sta $0330	                STA DOS_CLUS_ID
.39414d	ad 34 e0	lda $38e034	                LDA DOS_DIR_BLOCK_ID+2
.394150	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394152	22 0c 4c 39	jsl $394c0c	                JSL DOS_APPENDCLUS              ; Attempt to append the blank data as a new cluster
.394156	90 12		bcc $39416a	                BCC pass_failure                ; If there was an error, pass it up the chain
.394158	ad 36 e0	lda $38e036	                LDA DOS_NEW_CLUSTER             ; Set the block ID of the new directory cluster
.39415b	8d 32 e0	sta $38e032	                STA DOS_DIR_BLOCK_ID
.39415e	ad 38 e0	lda $38e038	                LDA DOS_NEW_CLUSTER+2
.394161	8d 34 e0	sta $38e034	                STA DOS_DIR_BLOCK_ID+2
.394164	28		plp		ret_success     PLP
.394165	2b		pld		                PLD
.394166	ab		plb		                PLB
.394167	fa		plx		                PLX
.394168	38		sec		                SEC
.394169	6b		rtl		                RTL
.39416a	28		plp		pass_failure    PLP
.39416b	2b		pld		                PLD
.39416c	ab		plb		                PLB
.39416d	fa		plx		                PLX
.39416e	18		clc		                CLC
.39416f	6b		rtl		                RTL
.394170					DOS_DIRWRITE
.394170	da		phx		                PHX
.394171	5a		phy		                PHY
.394172	0b		phd		                PHD
.394173	8b		phb		                PHB
.394174	08		php		                PHP
.394175	48		pha		                PHA             ; begin setdbr macro
.394176	08		php		                PHP
.394177	e2 20		sep #$20	                SEP #$20        ; set A short
.394179	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39417b	48		pha		                PHA
.39417c	ab		plb		                PLB
.39417d	28		plp		                PLP
.39417e	68		pla		                PLA             ; end setdbr macro
.39417f	48		pha		                PHA             ; begin setdp macro
.394180	08		php		                PHP
.394181	c2 20		rep #$20	                REP #$20        ; set A long
.394183	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394186	5b		tcd		                TCD
.394187	28		plp		                PLP
.394188	68		pla		                PLA             ; end setdp macro
.394189	e2 20		sep #$20	                SEP #$20        ; set A short
.39418b	ad 45 e0	lda $38e045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.39418e	c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE      ; Is it a file type directory (FAT32 or FAT12 non-root?)
.394190	f0 1f		beq $3941b1	                BEQ write_cluster           ; Yes: write it back using a cluster ID
.394192					write_sector
.394192	c2 20		rep #$20	                REP #$20        ; set A long
.394194	ad 32 e0	lda $38e032	                LDA DOS_DIR_BLOCK_ID        ; Set the BIOS_LBA to the LBA of the sector
.394197	85 02		sta $0322	                STA BIOS_LBA
.394199	ad 34 e0	lda $38e034	                LDA DOS_DIR_BLOCK_ID+2
.39419c	85 04		sta $0324	                STA BIOS_LBA+2
.39419e	a9 00 e1	lda #$e100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.3941a1	85 06		sta $0326	                STA BIOS_BUFF_PTR
.3941a3	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.3941a6	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3941a8	22 24 10 38	jsl $381024	                JSL PUTBLOCK                ; Try to write the sector to disk
.3941ac	b0 1f		bcs $3941cd	                BCS ret_success
.3941ae	82 83 13	brl $395534	ret_failure     BRL IF_FAILURE
.3941b1					write_cluster
.3941b1	c2 20		rep #$20	                REP #$20        ; set A long
.3941b3	ad 32 e0	lda $38e032	                LDA DOS_DIR_BLOCK_ID        ; Set the DOS_CLUS_ID to the ID of the cluster
.3941b6	85 10		sta $0330	                STA DOS_CLUS_ID
.3941b8	ad 34 e0	lda $38e034	                LDA DOS_DIR_BLOCK_ID+2
.3941bb	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3941bd	a9 00 e1	lda #$e100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.3941c0	85 1c		sta $033c	                STA DOS_BUFF_PTR
.3941c2	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.3941c5	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3941c7	22 4f 44 39	jsl $39444f	                JSL DOS_PUTCLUSTER          ; Try to write the cluster to disk
.3941cb	90 e1		bcc $3941ae	                BCC ret_failure
.3941cd	82 6f 13	brl $39553f	ret_success     BRL IF_SUCCESS

;******  Return to file: src\sdos_fat.asm

.0000					DEVICE_DESC
>0000					DEVNAME         .dword ?            ; A pointer to the ASCIIZ name of the device
>0004					DEVNUMBER       .byte ?           ; The BIOS_DEV number for the device
>0005					NEXT            .dword ?            ; A pointer to the next device descriptor
.0000					DIRENTRY
>0000					SHORTNAME               .fill 11        ; $00 - The short name of the file (8 name, 3 extension)
>000b					ATTRIBUTE               .byte ?         ; $0B - The attribute bits
>000c					IGNORED1                .word ?         ; $0C - Unused (by us) bytes
>000e					CREATE_TIME             .word ?         ; $0E - Creation time
>0010					CREATE_DATE             .word ?         ; $10 - Creation date
>0012					ACCESS_DATE             .word ?         ; $12 - Last access date
>0014					CLUSTER_H               .word ?         ; $14 - High word of the first cluster #
>0016					MODIFIED_TIME           .word ?         ; $16 - Last modified time
>0018					MODIFIED_DATE           .word ?         ; $18 - Last modified date
>001a					CLUSTER_L               .word ?         ; $1A - Low word of the first cluster #
>001c					SIZE                    .dword ?        ; $1C - The size of the file (in bytes)
=$01					DOS_ATTR_RO = $01                       ; File is read-only
=$02					DOS_ATTR_HIDDEN = $02                   ; File is hidden
=$04					DOS_ATTR_SYSTEM = $04                   ; File is a system file
=$08					DOS_ATTR_VOLUME = $08                   ; Entry is the volume label
=$10					DOS_ATTR_DIR = $10                      ; Entry is a directory
=$20					DOS_ATTR_ARCH = $20                     ; Entry has changed since last backup
=$0f					DOS_ATTR_LONGNAME = $0F                 ; Entry is the long file name
.0000					FILEDESC
>0000					STATUS              .byte ?             ; The status flags of the file descriptor (open, closed, error, EOF, etc.)
>0001					DEV                 .byte ?             ; The ID of the device holding the file
>0002					PATH                .dword ?            ; Pointer to a NULL terminated path string
>0006					CLUSTER             .dword ?            ; The current cluster of the file.
>000a					FIRST_CLUSTER       .dword ?            ; The ID of the first cluster in the file
>000e					BUFFER              .dword ?            ; Pointer to a cluster-sized buffer
>0012					SIZE                .dword ?            ; The size of the file
>0016					CREATE_DATE         .word ?             ; The creation date of the file
>0018					CREATE_TIME         .word ?             ; The creation time of the file
>001a					MODIFIED_DATE       .word ?             ; The modification date of the file
>001c					MODIFIED_TIME       .word ?             ; The modification time of the file
=$01					FD_STAT_READ = $01                      ; The file is readable
=$02					FD_STAT_WRITE = $02                     ; The file is writable
=$40					FD_STAT_OPEN = $40                      ; The file is open
=$60					FD_STAT_ERROR = $60                     ; The file is in an error condition
=$80					FD_STAT_EOF = $80                       ; The file cursor is at the end of the file
=$0fffffff				FAT_LAST_CLUSTER = $0FFFFFFF            ; Code to mark the last cluster of a file
=1					VOLUMEMAX = 1                           ; The maximum number of mounted volumes we support
=32					DOS_DIR_ENTRY_SIZE = 32                 ; The size of a directory entry
=512					DOS_SECTOR_SIZE = 512                   ; The size of a sector
=$e5					DOS_DIR_ENT_UNUSED = $E5                ; Marker for an unused directory entry
=$00					PART_TYPE_FAT12 = $00                   ; "Partition" type: FAT12, used for floppy disks
=$0c					PART_TYPE_FAT32_LBA = $0C               ; Patition type: FAT32 with LBA addressing
=$29					BPB_EXTENDED_RECORD = $29               ; If SIGNATUREB of the BPB has this byte, the volume label is valid
=0					DOS_DIR_TYPE_FAT12ROOT = 0              ; Directory is a FAT12 root directory
=1					DOS_DIR_TYPE_FILE = 1                   ; Directory is a file type directory
=1					DOS_ERR_READ = 1                        ; We could not read a sector, check BIOS_STATUS for details
=2					DOS_ERR_NOTMBR = 2                      ; We could not find the MBR
=3					DOS_ERR_NOFAT32 = 3                     ; We could not find a FAT32 parition using LBA
=4					DOS_ERR_NOINIT = 4                      ; We could not INIT the block device
=5					DOS_ERR_VOLID = 5                       ; Volume ID sector could not be loaded
=6					DOS_ERR_FAT = 6                         ; Can't scan the FAT for some reason
=7					DOS_ERR_BADPATH = 7                     ; The path was badly formatted
=8					DOS_ERR_NODIR = 8                       ; Could not read the directory
=9					DOS_ERR_NOTFOUND = 9                    ; File/directory requested was not found
=10					DOS_ERR_NOCLUSTER = 10                  ; There are no more clusters
=11					DOS_ERR_FILEEXISTS = 11                 ; There is already a file of that name
=12					DOS_ERR_NOTOPEN = 12                    ; File has not been open
=13					DOS_ERR_NOTREAD = 13                    ; File is not open for reading
=14					DOS_ERR_NOTWRITE = 14                   ; File is not open for writing
=15					DOS_ERR_OPEN = 15                       ; File is already open
=16					DOS_ERR_PGXSIG = 16                     ; File does not have the PGX signature
=17					DOS_ERR_NOEXEC = 17                     ; File does is not an executable format
=18					DOS_ERR_MEDIAFULL = 18                  ; There are no more free clusters on the drive
=19					DOS_ERR_WRITEPROT = 19                  ; The medium is write-protected
=20					DOS_ERR_FATUPDATE = 20                  ; Can't update the FAT
=21					DOS_ERR_DIRFULL = 21                    ; The directory is full
=446					PART0_OFF = 446                         ; Offset to the first partition in the MBR
=4					PART_TYPE_OFF = 4                       ; Offset to the partition's type
=8					PART_LBA_OFF = 8                        ; Offset to the LBA of the first sector of the partition
=13					PART_SECT_COUNT_OFF = 13                ; Offset to the sector count of the partition
=510					MBR_SIGNATURE = 510                     ; The offset to the MBR signature bytes
=11					BPB_BYTEPERSEC_OFF = 11                 ; Offset in the BPB sector to the Bytes Per Sector
=13					BPB_SECPERCLUS_OFF = 13                 ; Offset in the BPB sector to the Sectors Per Cluster
=14					BPB_RSRVCLUS_OFF = 14                   ; Offset in the BPB sector to the Number of Reserved Clusters
=16					BPB_NUMFAT_OFF = 16                     ; Offset in the BPB sector to the Number of FATs
=17					BPB_ROOT_MAX_ENTRY_OFF = 17             ; Offset in the BPB sector to the Maximum # of entries in the root directory (FAT12)
=19					BPB_TOTAL_SECTORS = 19                  ; Offset in the BPB sector to the number of sectors on the partition or disk (FAT12)
=$24					BPB_SECPERFAT_OFF = $24                 ; Offset in the BPB sector to the Sectors Per FAT
=38					BPB_SIGNATUREB = 38                     ; Offset in the BPB sector to the second signature byte
=39					BPB_VOLUMEID = 39                       ; Offset in the BPB sector to the volume ID
=$2c					BPB_ROOTCLUS_OFF = $2C                  ; Offset in the BPB sector to the Root Cluster Number
=510					BPB_SIGNATURE = 510                     ; The offset to the MBR signature bytes
=$38e000				DOS_HIGH_VARIABLES      = $38E000
=$38e000				DEVICE                  = $38E000       ; 1 byte - The number of the block device
=$38e001				FILE_SYSTEM             = $38E001       ; 1 byte - The type of filesystem (FAT12, FAT32, etc.)
=$38e002				PARTITION               = $38E002       ; 1 byte - The number of the partitions on the device
=$38e003				SECTORS_PER_CLUSTER     = $38E003       ; 1 byte - The number of sectors in a cluster
=$38e004				FIRSTSECTOR             = $38E004       ; 4 bytes - The LBA of the first sector on the volume
=$38e008				SECTORCOUNT             = $38E008       ; 4 bytes - The number of sectors in the volume
=$38e00c				NUM_RSRV_SEC            = $38E00C       ; 2 bytes - The number of hidden or reserved sectors
=$38e00e				CLUSTER_SIZE            = $38E00E       ; 2 bytes - The size of a cluster in bytes
=$38e010				SEC_PER_FAT             = $38E010       ; 4 bytes - The number of sectors per FAT
=$38e014				FAT_BEGIN_LBA           = $38E014       ; 4 bytes - The LBA of the first sector of FAT #1
=$38e018				FAT2_BEGIN_LBA          = $38E018       ; 4 bytes - The LBA of the first sector of FAT #2
=$38e01c				CLUSTER_BEGIN_LBA       = $38E01C       ; 4 bytes - The LBA of the first cluster in the storage area
=$38e020				ROOT_DIR_FIRST_CLUSTER  = $38E020       ; 4 bytes - The number of the first cluster in the root directory
=$38e024				ROOT_DIR_MAX_ENTRY      = $38E024       ; 2 bytes - The maximum number of entries in the root directory (0 = no limit)
=$38e026				VOLUME_ID               = $38E026       ; 4 bytes - The ID of the volume
=$38e02a				DOS_CURR_CLUS           = $38E02A       ; 4 bytes - The current cluster (for delete)
=$38e02e				DOS_NEXT_CLUS           = $38E02E       ; 4 bytes - The next cluster in a file (for delete)
=$38e032				DOS_DIR_BLOCK_ID        = $38E032       ; 4 bytes - The ID of the current directory block
=$38e036				DOS_NEW_CLUSTER         = $38E036       ; 4 bytes - Space to store a newly written cluster ID
=$38e03a				DOS_SHORT_NAME          = $38E03A       ; 11 bytes - The short name for a desired file
=$38e045				DOS_DIR_TYPE            = $38E045       ; 1 byte - a code indicating the type of the current directory (0 = cluster based, $80 = sector based)
=$38e046				DOS_CURR_DIR_ID         = $38E046       ; 4 byte - the ID of the first sector or cluster of the current directory
=$38e04a				DOS_DEV_NAMES           = $38E04A       ; 4 byte - pointer to the linked list of device names
=$38e04e				FDC_MOTOR_TIMER         = $38E04E       ; 2 bytes - count-down timer to automatically turn off the FDC spindle motor
=$38e100				DOS_DIR_CLUSTER         = $38E100       ; 512 bytes - A buffer for directory entries
=$38e300				DOS_DIR_CLUSTER_END     = $38E300       ; The byte just past the end of the directory cluster buffer
=$38e300				DOS_SECTOR              = $38E300       ; 512 bytes - A buffer for block device read/write
=$38e500				DOS_SECTOR_END          = $38E500       ; The byte just past the end of the cluster buffer
=$38e500				DOS_FAT_SECTORS         = $38E500       ; 1024 bytes - two sectors worth of the FAT
=$38e900				DOS_FAT_SECTORS_END     = $38E900       ; The byte just past the end of the FAT buffers
=$38e900				DOS_SPARE_SECTOR        = $38E900       ; A spare 512 byte buffer for loading sectors
=$38eb00				DOS_SPARE_SECTOR_END    = $38EB00
=$38eb00				DOS_SPARE_FD            = $38EB00       ; A spare file descriptor buffer
.3941d0					DOS_INIT
.3941d0	8b		phb		                PHB
.3941d1	0b		phd		                PHD
.3941d2	08		php		                PHP
.3941d3	48		pha		                PHA             ; begin setdbr macro
.3941d4	08		php		                PHP
.3941d5	e2 20		sep #$20	                SEP #$20        ; set A short
.3941d7	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3941d9	48		pha		                PHA
.3941da	ab		plb		                PLB
.3941db	28		plp		                PLP
.3941dc	68		pla		                PLA             ; end setdbr macro
.3941dd	48		pha		                PHA             ; begin setdp macro
.3941de	08		php		                PHP
.3941df	c2 20		rep #$20	                REP #$20        ; set A long
.3941e1	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3941e4	5b		tcd		                TCD
.3941e5	28		plp		                PLP
.3941e6	68		pla		                PLA             ; end setdp macro
.3941e7	c2 20		rep #$20	                REP #$20        ; set A long
.3941e9	a9 a7 44	lda #$44a7	                LDA #<>DOS_HD_DESC      ; Initialize the device names list
.3941ec	8f 4a e0 38	sta $38e04a	                STA @l DOS_DEV_NAMES
.3941f0	a9 39 00	lda #$0039	                LDA #`DOS_HD_DESC
.3941f3	8f 4c e0 38	sta $38e04c	                STA @l DOS_DEV_NAMES+2
.3941f7	e2 20		sep #$20	                SEP #$20        ; set A short
.3941f9	a9 02		lda #$02	                LDA #BIOS_DEV_SD        ; Default to the SD card
.3941fb	85 01		sta $0321	                STA BIOS_DEV
.3941fd	28		plp		                PLP
.3941fe	2b		pld		                PLD
.3941ff	ab		plb		                PLB
.394200	6b		rtl		                RTL
.394201					DOS_MOUNT
.394201	8b		phb		                PHB
.394202	0b		phd		                PHD
.394203	08		php		                PHP
.394204	48		pha		                PHA             ; begin setdbr macro
.394205	08		php		                PHP
.394206	e2 20		sep #$20	                SEP #$20        ; set A short
.394208	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39420a	48		pha		                PHA
.39420b	ab		plb		                PLB
.39420c	28		plp		                PLP
.39420d	68		pla		                PLA             ; end setdbr macro
.39420e	48		pha		                PHA             ; begin setdp macro
.39420f	08		php		                PHP
.394210	c2 20		rep #$20	                REP #$20        ; set A long
.394212	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394215	5b		tcd		                TCD
.394216	28		plp		                PLP
.394217	68		pla		                PLA             ; end setdp macro
.394218	e2 20		sep #$20	                SEP #$20        ; set A short
.39421a	a5 01		lda $0321	                LDA BIOS_DEV            ; Check the device
.39421c	c9 02		cmp #$02	                CMP #BIOS_DEV_SD        ; Is it the SDC?
.39421e	f0 1f		beq $39423f	                BEQ do_sdc_mount        ; Yes: attempt to mount it
.394220	c9 06		cmp #$06	                CMP #BIOS_DEV_HD0       ; Is it HD0?
.394222	f0 26		beq $39424a	                BEQ do_ide_mount        ; Yes: attempt to mount the IDE drive
.394224	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC       ; Is it the FDC?
.394226	f0 0b		beq $394233	                BEQ do_fdc_mount        ; Yes: attempt to mount it
.394228	a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return a bad device error
.39422a	85 0e		sta $032e	                STA DOS_STATUS
.39422c	a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV
.39422e	85 00		sta $0320	                STA BIOS_STATUS
.394230	82 47 01	brl $39437a	                BRL ret_failure
.394233	22 ad 61 39	jsl $3961ad	do_fdc_mount    JSL FDC_MOUNT           ; Attempt to mount the floppy disk
.394237	b0 03		bcs $39423c	                BCS fdc_success
.394239	82 3e 01	brl $39437a	                BRL ret_failure
.39423c	82 32 01	brl $394371	fdc_success     BRL ret_success
.39423f	22 bb 57 39	jsl $3957bb	do_sdc_mount    JSL SDC_INIT            ; Yes: Initialize access to the SDC
.394243	b0 10		bcs $394255	                BCS get_mbr             ; Continue if success
.394245	a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.394247	82 30 01	brl $39437a	                BRL ret_failure
.39424a	22 9f 65 39	jsl $39659f	do_ide_mount    JSL IDE_INIT            ; Yes: Initialize access to the IDE drive
.39424e	b0 05		bcs $394255	                BCS get_mbr             ; Continue if success
.394250	a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.394252	82 25 01	brl $39437a	                BRL ret_failure
.394255					get_mbr
.394255	c2 30		rep #$30	                REP #$30        ; set A&X long
.394257	64 02		stz $0322	                STZ BIOS_LBA            ; Get the MBR
.394259	64 04		stz $0324	                STZ BIOS_LBA+2
.39425b	a9 00 e3	lda #$e300	                LDA #<>DOS_SECTOR       ; Into DOS_SECTOR
.39425e	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394260	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.394263	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394265	22 44 10 38	jsl $381044	                JSL GETBLOCK            ; Try to read the MBR
.394269	b0 07		bcs $394272	                BCS chk_signature       ; If success, check the signature bytes
.39426b	e2 20		sep #$20	                SEP #$20        ; set A short
.39426d	a9 01		lda #$01	                LDA #DOS_ERR_READ       ; Otherwise: report we couldn't read the first sector
.39426f	82 08 01	brl $39437a	                BRL ret_failure
.394272					chk_signature
.394272	e2 20		sep #$20	                SEP #$20        ; set A short
.394274	ad fe e4	lda $38e4fe	                LDA DOS_SECTOR+MBR_SIGNATURE
.394277	c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.394279	d0 07		bne $394282	                BNE not_mbr             ; No: signal we could find the MBR
.39427b	ad ff e4	lda $38e4ff	                LDA DOS_SECTOR+MBR_SIGNATURE+1
.39427e	c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.394280	f0 05		beq $394287	                BEQ chk_part_type       ; Yes: we have an MBR
.394282	a9 02		lda #$02	not_mbr         LDA #DOS_ERR_NOTMBR     ; Return that we didn't find the MBR
.394284	82 f3 00	brl $39437a	                BRL ret_failure
.394287	ad c2 e4	lda $38e4c2	chk_part_type   LDA DOS_SECTOR+PART0_OFF+PART_TYPE_OFF
.39428a	c9 0c		cmp #$0c	                CMP #PART_TYPE_FAT32_LBA
.39428c	f0 05		beq $394293	                BEQ get_LBA             ; Is FAT32 with LBA?
.39428e	a9 03		lda #$03	                LDA #DOS_ERR_NOFAT32    ; No: return No FAT32 found error
.394290	82 e7 00	brl $39437a	                BRL ret_failure
.394293	8d 01 e0	sta $38e001	get_LBA         STA FILE_SYSTEM         ; Save the file system of the partition
.394296	c2 20		rep #$20	                REP #$20        ; set A long
.394298	ad c6 e4	lda $38e4c6	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF
.39429b	8d 04 e0	sta $38e004	                STA FIRSTSECTOR
.39429e	ad c8 e4	lda $38e4c8	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF+2
.3942a1	8d 06 e0	sta $38e006	                STA FIRSTSECTOR+2
.3942a4	ad cb e4	lda $38e4cb	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF
.3942a7	8d 08 e0	sta $38e008	                STA SECTORCOUNT
.3942aa	ad cd e4	lda $38e4cd	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF+2
.3942ad	8d 0a e0	sta $38e00a	                STA SECTORCOUNT+2
.3942b0	e2 20		sep #$20	                SEP #$20        ; set A short
.3942b2	a5 01		lda $0321	                LDA BIOS_DEV            ; Save the device number
.3942b4	8d 00 e0	sta $38e000	                STA DEVICE
.3942b7	a9 00		lda #$00	                LDA #0
.3942b9	8d 02 e0	sta $38e002	                STA PARTITION           ; For the moment, we only support the first partition
.3942bc	c2 20		rep #$20	                REP #$20        ; set A long
.3942be	a9 00 e3	lda #$e300	                LDA #<>DOS_SECTOR
.3942c1	85 06		sta $0326	                STA BIOS_BUFF_PTR
.3942c3	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.3942c6	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3942c8	ad 04 e0	lda $38e004	                LDA FIRSTSECTOR
.3942cb	85 02		sta $0322	                STA BIOS_LBA
.3942cd	ad 06 e0	lda $38e006	                LDA FIRSTSECTOR+2
.3942d0	85 04		sta $0324	                STA BIOS_LBA+2
.3942d2	22 44 10 38	jsl $381044	                JSL GETBLOCK            ; Attempt to load the volume ID
.3942d6	b0 1c		bcs $3942f4	                BCS get_first_sec       ; Got it? Start parsing it
.3942d8	e2 20		sep #$20	                SEP #$20        ; set A short
.3942da	a9 05		lda #$05	                LDA #DOS_ERR_VOLID      ; Otherwise: return an error
.3942dc	82 9b 00	brl $39437a	                BRL ret_failure
.3942df					chk_bpb_sig
.3942df	e2 20		sep #$20	                SEP #$20        ; set A short
.3942e1	ad fe e4	lda $38e4fe	                LDA DOS_SECTOR+BPB_SIGNATURE
.3942e4	c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.3942e6	d0 07		bne $3942ef	                BNE not_bpb             ; No: signal we could find the volume ID
.3942e8	ad ff e4	lda $38e4ff	                LDA DOS_SECTOR+BPB_SIGNATURE+1
.3942eb	c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.3942ed	f0 05		beq $3942f4	                BEQ get_first_sec       ; Yes: we have an volume ID
.3942ef	a9 05		lda #$05	not_bpb         LDA #DOS_ERR_VOLID      ; Return that we didn't find the Volume ID (BPB)
.3942f1	82 86 00	brl $39437a	                BRL ret_failure
.3942f4					get_first_sec
.3942f4	c2 20		rep #$20	                REP #$20        ; set A long
.3942f6	ad 2c e3	lda $38e32c	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF
.3942f9	8d 20 e0	sta $38e020	                STA ROOT_DIR_FIRST_CLUSTER
.3942fc	ad 2e e3	lda $38e32e	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF+2
.3942ff	8d 22 e0	sta $38e022	                STA ROOT_DIR_FIRST_CLUSTER+2
.394302	ad 0e e3	lda $38e30e	                LDA DOS_SECTOR+BPB_RSRVCLUS_OFF
.394305	8d 0c e0	sta $38e00c	                STA NUM_RSRV_SEC
.394308	18		clc		                CLC                     ; fat_begin_lba := FirstSector + Number_of_Reserved_Sectors
.394309	ad 04 e0	lda $38e004	                LDA FIRSTSECTOR
.39430c	6d 0c e0	adc $38e00c	                ADC NUM_RSRV_SEC
.39430f	8d 14 e0	sta $38e014	                STA FAT_BEGIN_LBA
.394312	ad 06 e0	lda $38e006	                LDA FIRSTSECTOR+2
.394315	69 00 00	adc #$0000	                ADC #0
.394318	8d 16 e0	sta $38e016	                STA FAT_BEGIN_LBA+2
.39431b	ad 24 e3	lda $38e324	                LDA DOS_SECTOR+BPB_SECPERFAT_OFF
.39431e	8d 10 e0	sta $38e010	                STA SEC_PER_FAT
.394321	ad 26 e3	lda $38e326	                LDA DOS_SECTOR+BPB_SECPERFAT_OFF+2
.394324	8d 12 e0	sta $38e012	                STA SEC_PER_FAT+2
.394327	ad 10 e0	lda $38e010	                LDA SEC_PER_FAT
.39432a	0a		asl a		                ASL A
.39432b	8d 1c e0	sta $38e01c	                STA CLUSTER_BEGIN_LBA
.39432e	ad 12 e0	lda $38e012	                LDA SEC_PER_FAT+2
.394331	2a		rol a		                ROL A
.394332	8d 1e e0	sta $38e01e	                STA CLUSTER_BEGIN_LBA+2
.394335	18		clc		                CLC
.394336	ad 1c e0	lda $38e01c	                LDA CLUSTER_BEGIN_LBA                    ; Sectors Per FAT * 2 + fat_begin_lba
.394339	6d 14 e0	adc $38e014	                ADC FAT_BEGIN_LBA
.39433c	8d 1c e0	sta $38e01c	                STA CLUSTER_BEGIN_LBA
.39433f	ad 1e e0	lda $38e01e	                LDA CLUSTER_BEGIN_LBA+2
.394342	6d 16 e0	adc $38e016	                ADC FAT_BEGIN_LBA+2
.394345	8d 1e e0	sta $38e01e	                STA CLUSTER_BEGIN_LBA+2
.394348	e2 20		sep #$20	                SEP #$20        ; set A short
.39434a	ad 0d e3	lda $38e30d	                LDA DOS_SECTOR+BPB_SECPERCLUS_OFF
.39434d	8d 03 e0	sta $38e003	                STA SECTORS_PER_CLUSTER
.394350	c2 20		rep #$20	                REP #$20        ; set A long
.394352	29 ff 00	and #$00ff	                AND #$00FF
.394355	48		pha		                PHA                                     ; Save the number of sectors per cluster
.394356	a9 00 02	lda #$0200	                LDA #<>DOS_SECTOR_SIZE                  ; Default to one sector's worth of bytes
.394359	8d 0e e0	sta $38e00e	                STA CLUSTER_SIZE
.39435c	a9 00 00	lda #$0000	                LDA #`DOS_SECTOR_SIZE
.39435f	8d 10 e0	sta $38e010	                STA CLUSTER_SIZE+2
.394362	68		pla		                PLA                                     ; Restore the number of sectors per cluster
.394363	c9 01 00	cmp #$0001	clus_size_loop  CMP #1                                  ; If there's only one cluster, return success
.394366	f0 09		beq $394371	                BEQ ret_success
.394368	0e 0e e0	asl $38e00e	                ASL CLUSTER_SIZE                        ; Otherwise, multiply the number of bytes by 2
.39436b	2e 10 e0	rol $38e010	                ROL CLUSTER_SIZE+2
.39436e	4a		lsr a		                LSR A                                   ; And divide the number of sectors by 2
.39436f	80 f2		bra $394363	                BRA clus_size_loop
.394371					ret_success
.394371	e2 20		sep #$20	                SEP #$20        ; set A short
.394373	64 0e		stz $032e	                STZ DOS_STATUS          ; Set status code to 0
.394375	28		plp		                PLP
.394376	2b		pld		                PLD
.394377	ab		plb		                PLB
.394378	38		sec		                SEC
.394379	6b		rtl		                RTL
.39437a					ret_failure
.39437a	e2 20		sep #$20	                SEP #$20        ; set A short
.39437c	85 0e		sta $032e	                STA DOS_STATUS          ; Save the status code
.39437e	28		plp		                PLP
.39437f	2b		pld		                PLD
.394380	ab		plb		                PLB
.394381	18		clc		                CLC
.394382	6b		rtl		                RTL
.394383					DOS_TESTBOOT
.394383	da		phx		                PHX
.394384	08		php		                PHP
.394385	c2 10		rep #$10	                REP #$10        ; set X long
.394387	e2 20		sep #$20	                SEP #$20        ; set A short
.394389	af 3e e3 38	lda $38e33e	                LDA @l DOS_SECTOR+FDC_BOOT_START
.39438d	c9 80		cmp #$80	                CMP #$80                    ; Is the first byte a BRL instruction?
.39438f	d0 2b		bne $3943bc	                BNE done                    ; No: just return
.394391	a2 00 00	ldx #$0000	                LDX #0
.394394	bf 03 e3 38	lda $38e303,x	magic_loop      LDA @l DOS_SECTOR+3,X       ; Check the "vendor" byte
.394398	df bf 43 39	cmp $3943bf,x	                CMP DOS_BOOT_MAGIC,X        ; Compare it against our boot magic code
.39439c	d0 1e		bne $3943bc	                BNE done                    ; If it's not equal, just return
.39439e	e8		inx		                INX                         ; Otherwise, check the next one
.39439f	e0 08 00	cpx #$0008	                CPX #8
.3943a2	d0 f0		bne $394394	                BNE magic_loop              ; Until we've checked all 8 bytes
.3943a4	c2 20		rep #$20	                REP #$20        ; set A long
.3943a6	a2 00 00	ldx #$0000	                LDX #0
.3943a9	bf 00 e3 38	lda $38e300,x	copy_loop       LDA @l DOS_SECTOR,X         ; Copy the DOS_SECTOR to DOS_SPARE_SECTOR
.3943ad	9f 00 e9 38	sta $38e900,x	                STA @l DOS_SPARE_SECTOR,X
.3943b1	e8		inx		                INX
.3943b2	e8		inx		                INX
.3943b3	e0 00 02	cpx #$0200	                CPX #512
.3943b6	d0 f1		bne $3943a9	                BNE copy_loop
.3943b8	5c 3e e9 38	jmp $38e93e	                JML DOS_SPARE_SECTOR+FDC_BOOT_START
.3943bc	28		plp		done            PLP
.3943bd	fa		plx		                PLX
.3943be	6b		rtl		                RTL
>3943bf	43 32 35 36 44 4f 53 20		DOS_BOOT_MAGIC  .text "C256DOS "
.3943c7					DOS_CALC_LBA
.3943c7	8b		phb		                PHB
.3943c8	0b		phd		                PHD
.3943c9	08		php		                PHP
.3943ca	48		pha		                PHA             ; begin setdbr macro
.3943cb	08		php		                PHP
.3943cc	e2 20		sep #$20	                SEP #$20        ; set A short
.3943ce	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3943d0	48		pha		                PHA
.3943d1	ab		plb		                PLB
.3943d2	28		plp		                PLP
.3943d3	68		pla		                PLA             ; end setdbr macro
.3943d4	48		pha		                PHA             ; begin setdp macro
.3943d5	08		php		                PHP
.3943d6	c2 20		rep #$20	                REP #$20        ; set A long
.3943d8	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3943db	5b		tcd		                TCD
.3943dc	28		plp		                PLP
.3943dd	68		pla		                PLA             ; end setdp macro
.3943de	c2 20		rep #$20	                REP #$20        ; set A long
.3943e0	38		sec		                SEC
.3943e1	a5 10		lda $0330	                LDA DOS_CLUS_ID                     ; cluster - 2
.3943e3	e9 02 00	sbc #$0002	                SBC #2
.3943e6	85 28		sta $0348	                STA DOS_TEMP
.3943e8	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3943ea	e9 00 00	sbc #$0000	                SBC #0
.3943ed	85 2a		sta $034a	                STA DOS_TEMP+2
.3943ef	e2 10		sep #$10	                SEP #$10        ; set X short
.3943f1	ae 03 e0	ldx $38e003	                LDX SECTORS_PER_CLUSTER
.3943f4	e0 01		cpx #$01	mult_loop       CPX #1
.3943f6	f0 07		beq $3943ff	                BEQ add_offset
.3943f8	06 28		asl $0348	                ASL DOS_TEMP
.3943fa	26 28		rol $0348	                ROL DOS_TEMP
.3943fc	ca		dex		                DEX
.3943fd	80 f5		bra $3943f4	                BRA mult_loop
.3943ff	18		clc		add_offset      CLC
.394400	a5 28		lda $0348	                LDA DOS_TEMP                        ; cluster_being_lba + (cluster - 2) * SECTORS_PER_CLUSTER
.394402	6d 1c e0	adc $38e01c	                ADC CLUSTER_BEGIN_LBA
.394405	85 02		sta $0322	                STA BIOS_LBA
.394407	a5 2a		lda $034a	                LDA DOS_TEMP+2
.394409	6d 1e e0	adc $38e01e	                ADC CLUSTER_BEGIN_LBA+2
.39440c	85 04		sta $0324	                STA BIOS_LBA+2
.39440e	28		plp		                PLP
.39440f	2b		pld		                PLD
.394410	ab		plb		                PLB
.394411	6b		rtl		                RTL
.394412					DOS_GETCLUSTER
.394412	8b		phb		                PHB
.394413	0b		phd		                PHD
.394414	08		php		                PHP
.394415	48		pha		                PHA             ; begin setdbr macro
.394416	08		php		                PHP
.394417	e2 20		sep #$20	                SEP #$20        ; set A short
.394419	a9 00		lda #$00	                LDA #0
.39441b	48		pha		                PHA
.39441c	ab		plb		                PLB
.39441d	28		plp		                PLP
.39441e	68		pla		                PLA             ; end setdbr macro
.39441f	48		pha		                PHA             ; begin setdp macro
.394420	08		php		                PHP
.394421	c2 20		rep #$20	                REP #$20        ; set A long
.394423	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394426	5b		tcd		                TCD
.394427	28		plp		                PLP
.394428	68		pla		                PLA             ; end setdp macro
.394429	c2 20		rep #$20	                REP #$20        ; set A long
.39442b	a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.39442d	85 06		sta $0326	                STA BIOS_BUFF_PTR
.39442f	a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.394431	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394433	22 c7 43 39	jsl $3943c7	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.394437	22 44 10 38	jsl $381044	                JSL GETBLOCK                        ; Get the first block of the cluster
.39443b	90 09		bcc $394446	                BCC ret_failure
.39443d					ret_success
.39443d	e2 20		sep #$20	                SEP #$20        ; set A short
.39443f	64 0e		stz $032e	                STZ DOS_STATUS
.394441	28		plp		                PLP
.394442	2b		pld		                PLD
.394443	ab		plb		                PLB
.394444	38		sec		                SEC
.394445	6b		rtl		                RTL
.394446					ret_failure
.394446	e2 20		sep #$20	                SEP #$20        ; set A short
.394448	85 0e		sta $032e	                STA DOS_STATUS
.39444a	28		plp		                PLP
.39444b	2b		pld		                PLD
.39444c	ab		plb		                PLB
.39444d	18		clc		                CLC
.39444e	6b		rtl		                RTL
.39444f					DOS_PUTCLUSTER
.39444f	8b		phb		                PHB
.394450	0b		phd		                PHD
.394451	08		php		                PHP
.394452	48		pha		                PHA             ; begin setdbr macro
.394453	08		php		                PHP
.394454	e2 20		sep #$20	                SEP #$20        ; set A short
.394456	a9 00		lda #$00	                LDA #0
.394458	48		pha		                PHA
.394459	ab		plb		                PLB
.39445a	28		plp		                PLP
.39445b	68		pla		                PLA             ; end setdbr macro
.39445c	48		pha		                PHA             ; begin setdp macro
.39445d	08		php		                PHP
.39445e	c2 20		rep #$20	                REP #$20        ; set A long
.394460	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394463	5b		tcd		                TCD
.394464	28		plp		                PLP
.394465	68		pla		                PLA             ; end setdp macro
.394466	c2 20		rep #$20	                REP #$20        ; set A long
.394468	a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.39446a	85 06		sta $0326	                STA BIOS_BUFF_PTR
.39446c	a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.39446e	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394470	22 c7 43 39	jsl $3943c7	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.394474	22 24 10 38	jsl $381024	                JSL PUTBLOCK                        ; PUT the first block of the cluster
.394478	90 09		bcc $394483	                BCC ret_failure
.39447a					ret_success
.39447a	e2 20		sep #$20	                SEP #$20        ; set A short
.39447c	64 0e		stz $032e	                STZ DOS_STATUS
.39447e	28		plp		                PLP
.39447f	2b		pld		                PLD
.394480	ab		plb		                PLB
.394481	38		sec		                SEC
.394482	6b		rtl		                RTL
.394483					ret_failure
.394483	e2 20		sep #$20	                SEP #$20        ; set A short
.394485	85 0e		sta $032e	                STA DOS_STATUS
.394487	28		plp		                PLP
.394488	2b		pld		                PLD
.394489	ab		plb		                PLB
.39448a	18		clc		                CLC
.39448b	6b		rtl		                RTL
>39448c	40 46 00			DOS_FDC_NAME    .null "@F"
.39448f					DOS_FDC_DESC
>39448f	8c 44 39 00			DEVNAME         .dword DOS_FDC_NAME            ; A pointer to the ASCIIZ name of the device
>394493	00				DEVNUMBER       .byte BIOS_DEV_FDC           ; The BIOS_DEV number for the device
>394494	00 00 00 00			NEXT            .dword 0            ; A pointer to the next device descriptor
>394498	40 53 00			DOS_SDC_NAME    .null "@S"
.39449b					DOS_SDC_DESC
>39449b	98 44 39 00			DEVNAME         .dword DOS_SDC_NAME            ; A pointer to the ASCIIZ name of the device
>39449f	02				DEVNUMBER       .byte BIOS_DEV_SD           ; The BIOS_DEV number for the device
>3944a0	8f 44 39 00			NEXT            .dword DOS_FDC_DESC            ; A pointer to the next device descriptor
>3944a4	40 48 00			DOS_HDC_NAME    .null "@H"
.3944a7					DOS_HD_DESC
>3944a7	a4 44 39 00			DEVNAME         .dword DOS_HDC_NAME            ; A pointer to the ASCIIZ name of the device
>3944ab	06				DEVNUMBER       .byte BIOS_DEV_HD0           ; The BIOS_DEV number for the device
>3944ac	9b 44 39 00			NEXT            .dword DOS_SDC_DESC            ; A pointer to the next device descriptor
.3944b0					DOS_PARSE_DEV
.3944b0	8b		phb		                PHB
.3944b1	0b		phd		                PHD
.3944b2	08		php		                PHP
.3944b3	48		pha		                PHA             ; begin setdbr macro
.3944b4	08		php		                PHP
.3944b5	e2 20		sep #$20	                SEP #$20        ; set A short
.3944b7	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3944b9	48		pha		                PHA
.3944ba	ab		plb		                PLB
.3944bb	28		plp		                PLP
.3944bc	68		pla		                PLA             ; end setdbr macro
.3944bd	48		pha		                PHA             ; begin setdp macro
.3944be	08		php		                PHP
.3944bf	c2 20		rep #$20	                REP #$20        ; set A long
.3944c1	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3944c4	5b		tcd		                TCD
.3944c5	28		plp		                PLP
.3944c6	68		pla		                PLA             ; end setdp macro
.3944c7	c2 30		rep #$30	                REP #$30        ; set A&X long
.3944c9	af 4a e0 38	lda $38e04a	                LDA @l DOS_DEV_NAMES        ; Point to the first device name to check
.3944cd	85 28		sta $0348	                STA DOS_TEMP
.3944cf	af 4c e0 38	lda $38e04c	                LDA @l DOS_DEV_NAMES+2
.3944d3	85 2a		sta $034a	                STA DOS_TEMP+2
.3944d5	a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF        ; Make DOS_STR2_PTR point to the path to check
.3944d8	85 48		sta $0368	                STA DOS_STR2_PTR
.3944da	a9 00 00	lda #$0000	                LDA #`DOS_PATH_BUFF
.3944dd	85 4a		sta $036a	                STA DOS_STR2_PTR+2
.3944df	a0 00 00	ldy #$0000	dev_loop        LDY #DEVICE_DESC.DEVNAME    ; Get the name of the current device into DOS_STR1_PTR
.3944e2	b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.3944e4	85 44		sta $0364	                STA DOS_STR1_PTR
.3944e6	c8		iny		                INY
.3944e7	c8		iny		                INY
.3944e8	b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.3944ea	85 46		sta $0366	                STA DOS_STR1_PTR+2
.3944ec	e2 20		sep #$20	                SEP #$20        ; set A short
.3944ee	a0 00 00	ldy #$0000	                LDY #0
.3944f1	b7 44		lda [$0364],y	cmp_loop        LDA [DOS_STR1_PTR],Y        ; Get the Yth character of the device name
.3944f3	f0 24		beq $394519	                BEQ found                   ; If it's NULL, we found a match
.3944f5	d7 48		cmp [$0368],y	                CMP [DOS_STR2_PTR],Y        ; Compare it to the Yth character of the path
.3944f7	d0 03		bne $3944fc	                BNE next_device             ; If no match, try to load the next device
.3944f9	c8		iny		                INY                         ; Go to the next character
.3944fa	80 f5		bra $3944f1	                BRA cmp_loop
.3944fc					next_device
.3944fc	c2 20		rep #$20	                REP #$20        ; set A long
.3944fe	a0 05 00	ldy #$0005	                LDY #DEVICE_DESC.NEXT       ; DOS_TEMP := DOS_TEMP->NEXT
.394501	b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.394503	48		pha		                PHA
.394504	c8		iny		                INY
.394505	c8		iny		                INY
.394506	b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.394508	85 2a		sta $034a	                STA DOS_TEMP+2
.39450a	68		pla		                PLA
.39450b	85 28		sta $0348	                STA DOS_TEMP
.39450d	a5 28		lda $0348	                LDA DOS_TEMP                ; Is DOS_TEMP = NULL?
.39450f	d0 ce		bne $3944df	                BNE dev_loop                ; No: check this device
.394511	a5 2a		lda $034a	                LDA DOS_TEMP+2
.394513	d0 ca		bne $3944df	                BNE dev_loop
.394515	28		plp		done            PLP                         ; Otherwise, return having not found a match
.394516	2b		pld		                PLD
.394517	ab		plb		                PLB
.394518	6b		rtl		                RTL
.394519	22 2a 45 39	jsl $39452a	found           JSL DOS_ADJUSTPATH          ; Remove the device name from the buffer
.39451d	e2 20		sep #$20	                SEP #$20        ; set A short
.39451f	a0 04 00	ldy #$0004	                LDY #DEVICE_DESC.DEVNUMBER  ; Set the BIOS device number from the found device
.394522	b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.394524	8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.394528	80 eb		bra $394515	                BRA done
.39452a					DOS_ADJUSTPATH
.39452a	da		phx		                PHX
.39452b	5a		phy		                PHY
.39452c	8b		phb		                PHB
.39452d	0b		phd		                PHD
.39452e	08		php		                PHP
.39452f	48		pha		                PHA             ; begin setdbr macro
.394530	08		php		                PHP
.394531	e2 20		sep #$20	                SEP #$20        ; set A short
.394533	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394535	48		pha		                PHA
.394536	ab		plb		                PLB
.394537	28		plp		                PLP
.394538	68		pla		                PLA             ; end setdbr macro
.394539	48		pha		                PHA             ; begin setdp macro
.39453a	08		php		                PHP
.39453b	c2 20		rep #$20	                REP #$20        ; set A long
.39453d	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394540	5b		tcd		                TCD
.394541	28		plp		                PLP
.394542	68		pla		                PLA             ; end setdp macro
.394543	c2 30		rep #$30	                REP #$30        ; set A&X long
.394545	84 4b		sty $036b	                STY DOS_SCRATCH                 ; Save the index to later compute the size
.394547	98		tya		                TYA                             ; Compute the address of the first source byte
.394548	18		clc		                CLC
.394549	69 00 04	adc #$0400	                ADC #<>DOS_PATH_BUFF
.39454c	aa		tax		                TAX
.39454d	a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF            ; Compute the destination address for the source byte
.394550	a8		tay		                TAY
.394551	38		sec		                SEC                             ; Compute the number of bytes to copy
.394552	a9 00 01	lda #$0100	                LDA #256
.394555	e5 4b		sbc $036b	                SBC DOS_SCRATCH
.394557	54 00 00	mvn $00,$00	                MVN #`DOS_PATH_BUFF, #`DOS_PATH_BUFF
.39455a	28		plp		                PLP
.39455b	2b		pld		                PLD
.39455c	ab		plb		                PLB
.39455d	7a		ply		                PLY
.39455e	fa		plx		                PLX
.39455f	6b		rtl		                RTL
.394560					DOS_PARSE_PATH
.394560	8b		phb		                PHB
.394561	0b		phd		                PHD
.394562	08		php		                PHP
.394563	48		pha		                PHA             ; begin setdbr macro
.394564	08		php		                PHP
.394565	e2 20		sep #$20	                SEP #$20        ; set A short
.394567	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394569	48		pha		                PHA
.39456a	ab		plb		                PLB
.39456b	28		plp		                PLP
.39456c	68		pla		                PLA             ; end setdbr macro
.39456d	48		pha		                PHA             ; begin setdp macro
.39456e	08		php		                PHP
.39456f	c2 20		rep #$20	                REP #$20        ; set A long
.394571	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394574	5b		tcd		                TCD
.394575	28		plp		                PLP
.394576	68		pla		                PLA             ; end setdp macro
.394577	c2 10		rep #$10	                REP #$10        ; set X long
.394579	e2 20		sep #$20	                SEP #$20        ; set A short
.39457b	a2 00 00	ldx #$0000	                LDX #0
.39457e	b5 e0		lda $0400,x	upcase_loop     LDA DOS_PATH_BUFF,X     ; Get the character
.394580	f0 1b		beq $39459d	                BEQ parse_dev           ; If it's NULL, the path is upper case, attempt to parse the device
.394582	c9 20		cmp #$20	                CMP #' '                ; Is a control character?
.394584	b0 05		bcs $39458b	                BGE check_case          ; No: check the case
.394586	a9 07		lda #$07	                LDA #DOS_ERR_BADPATH    ; Yes: return a bad path error
.394588	82 64 00	brl $3945ef	                BRL ret_failure
.39458b	c9 61		cmp #$61	check_case      CMP #'a'                ; Is the character lower case?
.39458d	90 08		bcc $394597	                BLT next_char
.39458f	c9 7b		cmp #$7b	                CMP #'z'+1
.394591	b0 04		bcs $394597	                BGE next_char
.394593	29 5f		and #$5f	                AND #%01011111          ; Yes: Convert to uppercase
.394595	95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.394597	e8		inx		next_char       INX                     ; Move to the next character
.394598	e0 00 01	cpx #$0100	                CPX #$100
.39459b	d0 e1		bne $39457e	                BNE upcase_loop
.39459d	22 b0 44 39	jsl $3944b0	parse_dev       JSL DOS_PARSE_DEV       ; Parse and extract a device specifier ":xxx:"
.3945a1	a5 e0		lda $0400	                LDA DOS_PATH_BUFF       ; Check the first character of the path
.3945a3	c9 3a		cmp #$3a	                CMP #':'
.3945a5	d0 07		bne $3945ae	                BNE clr_name            ; If not colon, treat it as a file name
.3945a7	a0 01 00	ldy #$0001	                LDY #1                  ; Otherwise...
.3945aa	22 2a 45 39	jsl $39452a	                JSL DOS_ADJUSTPATH      ; For now, just remove the leading ":"
.3945ae	a0 00 00	ldy #$0000	clr_name        LDY #0                  ; Set the short name to blanks
.3945b1	a9 20		lda #$20	                LDA #' '
.3945b3	99 3a e0	sta $38e03a,y	clr_loop        STA DOS_SHORT_NAME,Y
.3945b6	c8		iny		                INY
.3945b7	c0 0b 00	cpy #$000b	                CPY #11
.3945ba	d0 f7		bne $3945b3	                BNE clr_loop
.3945bc	a2 00 00	ldx #$0000	                LDX #0
.3945bf	a0 00 00	ldy #$0000	                LDY #0
.3945c2	b5 e0		lda $0400,x	cpy_name_loop   LDA DOS_PATH_BUFF,X     ; Get the character of the name
.3945c4	f0 20		beq $3945e6	                BEQ ret_success         ; If NULL: we've finished parsing the path
.3945c6	c9 2e		cmp #$2e	                CMP #'.'                ; If it's a dot, we've finished the name part
.3945c8	f0 0a		beq $3945d4	                BEQ cpy_ext             ; And move to the extension
.3945ca	99 3a e0	sta $38e03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, store it to the name portion
.3945cd	e8		inx		                INX
.3945ce	c8		iny		                INY                     ; Move to the next character
.3945cf	c0 08 00	cpy #$0008	                CPY #8                  ; Have we processed 8?
.3945d2	d0 ee		bne $3945c2	                BNE cpy_name_loop       ; No: process this one
.3945d4	e8		inx		cpy_ext         INX                     ; Skip the dot
.3945d5	a0 08 00	ldy #$0008	                LDY #8
.3945d8	b5 e0		lda $0400,x	cpy_ext_loop    LDA DOS_PATH_BUFF,X     ; Get the character of the extension
.3945da	f0 0a		beq $3945e6	                BEQ ret_success         ; If it's NULL, we've finished
.3945dc	99 3a e0	sta $38e03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, copy it to the short name
.3945df	e8		inx		                INX
.3945e0	c8		iny		                INY                     ; Move to the next character
.3945e1	c0 0b 00	cpy #$000b	                CPY #11                 ; Have we processed the three ext characters?
.3945e4	d0 f2		bne $3945d8	                BNE cpy_ext_loop        ; No: process this one
.3945e6					ret_success
.3945e6	e2 20		sep #$20	                SEP #$20        ; set A short
.3945e8	64 0e		stz $032e	                STZ DOS_STATUS
.3945ea	28		plp		                PLP
.3945eb	2b		pld		                PLD
.3945ec	ab		plb		                PLB
.3945ed	38		sec		                SEC
.3945ee	6b		rtl		                RTL
.3945ef					ret_failure
.3945ef	e2 20		sep #$20	                SEP #$20        ; set A short
.3945f1	85 0e		sta $032e	                STA DOS_STATUS
.3945f3	28		plp		                PLP
.3945f4	2b		pld		                PLD
.3945f5	ab		plb		                PLB
.3945f6	18		clc		                CLC
.3945f7	6b		rtl		                RTL
.3945f8					DOS_FINDFILE
.3945f8	8b		phb		                PHB
.3945f9	0b		phd		                PHD
.3945fa	08		php		                PHP
.3945fb	48		pha		                PHA             ; begin setdbr macro
.3945fc	08		php		                PHP
.3945fd	e2 20		sep #$20	                SEP #$20        ; set A short
.3945ff	a9 00		lda #$00	                LDA #0
.394601	48		pha		                PHA
.394602	ab		plb		                PLB
.394603	28		plp		                PLP
.394604	68		pla		                PLA             ; end setdbr macro
.394605	48		pha		                PHA             ; begin setdp macro
.394606	08		php		                PHP
.394607	c2 20		rep #$20	                REP #$20        ; set A long
.394609	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39460c	5b		tcd		                TCD
.39460d	28		plp		                PLP
.39460e	68		pla		                PLA             ; end setdp macro
.39460f	c2 30		rep #$30	                REP #$30        ; set A&X long
.394611	22 60 45 39	jsl $394560	                JSL DOS_PARSE_PATH              ; Break out the path into its components
.394615	b0 05		bcs $39461c	                BCS mount                       ; If success: try to open the directory
.394617	28		plp		pass_failure    PLP                             ; If failure, just pass the failure back up
.394618	2b		pld		                PLD
.394619	ab		plb		                PLB
.39461a	18		clc		                CLC
.39461b	6b		rtl		                RTL
.39461c	22 01 42 39	jsl $394201	mount           JSL DOS_MOUNT
.394620					get_directory
.394620	c2 20		rep #$20	                REP #$20        ; set A long
.394622	22 57 3f 39	jsl $393f57	                JSL DOS_DIROPEN                 ; Get the directory
.394626	b0 07		bcs $39462f	                BCS scan_entries                ; If success: start scanning the directory entries
.394628	e2 20		sep #$20	                SEP #$20        ; set A short
.39462a	a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Otherwise: return a no directory error
.39462c	82 47 00	brl $394676	                BRL ret_failure
.39462f	22 d6 3f 39	jsl $393fd6	scan_entries    JSL DOS_DIRFIRST                ; Move the DIR pointer to the beginning of the sector
.394633					scan_loop
.394633	e2 20		sep #$20	                SEP #$20        ; set A short
.394635	a0 00 00	ldy #$0000	                LDY #0
.394638	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y             ; Check the directory entry
.39463a	d0 05		bne $394641	                BNE chk_unused                  ; If there's an entry, check to see if it's unused
.39463c	a9 09		lda #$09	                LDA #DOS_ERR_NOTFOUND           ; If end-of-directory, we couldn't find a match
.39463e	82 35 00	brl $394676	                BRL ret_failure
.394641	c9 e5		cmp #$e5	chk_unused      CMP #DOS_DIR_ENT_UNUSED         ; If it's unused...
.394643	f0 26		beq $39466b	                BEQ next_entry                  ; Go to the next entry
.394645	a0 0b 00	ldy #$000b	                LDY #DIRENTRY.ATTRIBUTE         ; Check the entry's attributes
.394648	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.39464a	89 08		bit #$08	                BIT #DOS_ATTR_VOLUME            ; Is it a volume name?
.39464c	d0 1d		bne $39466b	                BNE next_entry                  ; Yes: skip it!
.39464e	29 0f		and #$0f	                AND #DOS_ATTR_LONGNAME
.394650	c9 0f		cmp #$0f	                CMP #DOS_ATTR_LONGNAME          ; Is it a long name field?
.394652	f0 17		beq $39466b	                BEQ next_entry                  ; Yes: skip it!
.394654	a2 00 00	ldx #$0000	                LDX #0
.394657	a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME
.39465a	b7 18		lda [$0338],y	scan_cmp_loop   LDA [DOS_DIR_PTR],Y             ; Get the X'th character of the entry
.39465c	df 3a e0 38	cmp $38e03a,x	                CMP DOS_SHORT_NAME,X            ; And compare to the X'th character of the name we want
.394660	d0 09		bne $39466b	                BNE next_entry                  ; If not equal: try the next entry
.394662	c8		iny		                INY                             ; Advance to the next character
.394663	e8		inx		                INX
.394664	e0 0b 00	cpx #$000b	                CPX #11                         ; Did we reach the end of the names?
.394667	f0 16		beq $39467f	                BEQ match                       ; Yes: we have a match!
.394669	80 ef		bra $39465a	                BRA scan_cmp_loop               ; No: keep checking
.39466b	22 f1 3f 39	jsl $393ff1	next_entry      JSL DOS_DIRNEXT                 ; Try to get the next directory entry
.39466f	90 05		bcc $394676	                BCC ret_failure                 ; If we're at the end of the directory, return a failure.
.394671	82 bf ff	brl $394633	                BRL scan_loop                   ; If found: keep scanning
.394674	a9 08		lda #$08	bad_dir         LDA #DOS_ERR_NODIR              ; Otherwise: fail with a NODIR error (maybe something else is better)
.394676					ret_failure
.394676	e2 20		sep #$20	                SEP #$20        ; set A short
.394678	85 0e		sta $032e	                STA DOS_STATUS
.39467a	28		plp		                PLP
.39467b	2b		pld		                PLD
.39467c	ab		plb		                PLB
.39467d	18		clc		                CLC
.39467e	6b		rtl		                RTL
.39467f					match
.39467f	c2 20		rep #$20	                REP #$20        ; set A long
.394681	a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L         ; Copy the cluster number from the directory entry
.394684	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.394686	85 10		sta $0330	                STA DOS_CLUS_ID                 ; To DOS_CLUS_ID
.394688	a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.39468b	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.39468d	85 12		sta $0332	                STA DOS_CLUS_ID+2
.39468f					ret_success
.39468f	e2 20		sep #$20	                SEP #$20        ; set A short
.394691	64 0e		stz $032e	                STZ DOS_STATUS
.394693	28		plp		                PLP
.394694	2b		pld		                PLD
.394695	ab		plb		                PLB
.394696	38		sec		                SEC
.394697	6b		rtl		                RTL
.394698					DOS_READFILE
.394698	8b		phb		                PHB
.394699	0b		phd		                PHD
.39469a	08		php		                PHP
.39469b	48		pha		                PHA             ; begin setdbr macro
.39469c	08		php		                PHP
.39469d	e2 20		sep #$20	                SEP #$20        ; set A short
.39469f	a9 00		lda #$00	                LDA #0
.3946a1	48		pha		                PHA
.3946a2	ab		plb		                PLB
.3946a3	28		plp		                PLP
.3946a4	68		pla		                PLA             ; end setdbr macro
.3946a5	48		pha		                PHA             ; begin setdp macro
.3946a6	08		php		                PHP
.3946a7	c2 20		rep #$20	                REP #$20        ; set A long
.3946a9	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3946ac	5b		tcd		                TCD
.3946ad	28		plp		                PLP
.3946ae	68		pla		                PLA             ; end setdp macro
.3946af	c2 30		rep #$30	                REP #$30        ; set A&X long
.3946b1	a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.3946b3	48		pha		                PHA
.3946b4	a5 1c		lda $033c	                LDA DOS_BUFF_PTR
.3946b6	48		pha		                PHA
.3946b7	22 f8 45 39	jsl $3945f8	                JSL DOS_FINDFILE                    ; Attempt to find the file's directory entry
.3946bb	68		pla		                PLA
.3946bc	85 1c		sta $033c	                STA DOS_BUFF_PTR
.3946be	68		pla		                PLA
.3946bf	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3946c1	90 0f		bcc $3946d2	                BCC pass_failure                    ; If found: try to load the cluster
.3946c3	22 12 44 39	jsl $394412	load_cluster    JSL DOS_GETCLUSTER                  ; Get the first block of the cluster
.3946c7	90 09		bcc $3946d2	                BCC pass_failure                    ; If there's an error... pass it up the chain
.3946c9					ret_success
.3946c9	e2 20		sep #$20	                SEP #$20        ; set A short
.3946cb	64 0e		stz $032e	                STZ DOS_STATUS
.3946cd	28		plp		                PLP
.3946ce	2b		pld		                PLD
.3946cf	ab		plb		                PLB
.3946d0	38		sec		                SEC
.3946d1	6b		rtl		                RTL
.3946d2	28		plp		pass_failure    PLP                                 ; Otherwise: pass any error up the chain
.3946d3	2b		pld		                PLD
.3946d4	ab		plb		                PLB
.3946d5	18		clc		                CLC
.3946d6	6b		rtl		                RTL
.3946d7					ENTRYFORCLUS12
.3946d7	8b		phb		                PHB
.3946d8	0b		phd		                PHD
.3946d9	08		php		                PHP
.3946da	48		pha		                PHA             ; begin setdbr macro
.3946db	08		php		                PHP
.3946dc	e2 20		sep #$20	                SEP #$20        ; set A short
.3946de	a9 00		lda #$00	                LDA #0
.3946e0	48		pha		                PHA
.3946e1	ab		plb		                PLB
.3946e2	28		plp		                PLP
.3946e3	68		pla		                PLA             ; end setdbr macro
.3946e4	48		pha		                PHA             ; begin setdp macro
.3946e5	08		php		                PHP
.3946e6	c2 20		rep #$20	                REP #$20        ; set A long
.3946e8	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3946eb	5b		tcd		                TCD
.3946ec	28		plp		                PLP
.3946ed	68		pla		                PLA             ; end setdp macro
.3946ee	c2 30		rep #$30	                REP #$30        ; set A&X long
.3946f0	a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; DOS_TEMP := DOS_CLUS_ID * 3
.3946f2	0a		asl a		                ASL A
.3946f3	85 28		sta $0348	                STA DOS_TEMP
.3946f5	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3946f7	2a		rol a		                ROL A
.3946f8	85 2a		sta $034a	                STA DOS_TEMP+2
.3946fa	18		clc		                CLC
.3946fb	a5 10		lda $0330	                LDA DOS_CLUS_ID
.3946fd	65 28		adc $0348	                ADC DOS_TEMP
.3946ff	85 28		sta $0348	                STA DOS_TEMP
.394701	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394703	65 2a		adc $034a	                ADC DOS_TEMP+2
.394705	85 2a		sta $034a	                STA DOS_TEMP+2
.394707	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := (DOS_CLUS_ID * 3) / 2
.394709	66 28		ror $0348	                ROR DOS_TEMP                    ; DOS_TEMP is now the offset to the cluster's entry in the FAT
.39470b	a5 28		lda $0348	                LDA DOS_TEMP                    ; X should be the offset within the FAT buffer
.39470d	29 ff 03	and #$03ff	                AND #$003FF
.394710	aa		tax		                TAX
.394711	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394713	66 28		ror $0348	                ROR DOS_TEMP
.394715	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394717	66 28		ror $0348	                ROR DOS_TEMP
.394719	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.39471b	66 28		ror $0348	                ROR DOS_TEMP
.39471d	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.39471f	66 28		ror $0348	                ROR DOS_TEMP
.394721	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394723	66 28		ror $0348	                ROR DOS_TEMP
.394725	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394727	66 28		ror $0348	                ROR DOS_TEMP
.394729	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.39472b	66 28		ror $0348	                ROR DOS_TEMP
.39472d	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.39472f	66 28		ror $0348	                ROR DOS_TEMP
.394731	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394733	66 28		ror $0348	                ROR DOS_TEMP
.394735	18		clc		                CLC                             ; DOS_FAT_LBA should be the LBA of the first FAT sector we need
.394736	af 14 e0 38	lda $38e014	                LDA FAT_BEGIN_LBA
.39473a	65 28		adc $0348	                ADC DOS_TEMP
.39473c	85 24		sta $0344	                STA DOS_FAT_LBA
.39473e	af 16 e0 38	lda $38e016	                LDA FAT_BEGIN_LBA+2
.394742	65 2a		adc $034a	                ADC DOS_TEMP+2
.394744	85 26		sta $0346	                STA DOS_FAT_LBA+2
.394746	28		plp		                PLP
.394747	2b		pld		                PLD
.394748	ab		plb		                PLB
.394749	6b		rtl		                RTL
.39474a					FATFORCLUSTER12
.39474a	8b		phb		                PHB
.39474b	0b		phd		                PHD
.39474c	08		php		                PHP
.39474d	48		pha		                PHA             ; begin setdbr macro
.39474e	08		php		                PHP
.39474f	e2 20		sep #$20	                SEP #$20        ; set A short
.394751	a9 00		lda #$00	                LDA #0
.394753	48		pha		                PHA
.394754	ab		plb		                PLB
.394755	28		plp		                PLP
.394756	68		pla		                PLA             ; end setdbr macro
.394757	48		pha		                PHA             ; begin setdp macro
.394758	08		php		                PHP
.394759	c2 20		rep #$20	                REP #$20        ; set A long
.39475b	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39475e	5b		tcd		                TCD
.39475f	28		plp		                PLP
.394760	68		pla		                PLA             ; end setdp macro
.394761	c2 30		rep #$30	                REP #$30        ; set A&X long
.394763	a2 00 00	ldx #$0000	                LDX #0
.394766	a9 5a 5a	lda #$5a5a	                LDA #$5A5A
.394769	8f 00 e5 38	sta $38e500	clr_loop        STA DOS_FAT_SECTORS
.39476d	e8		inx		                INX
.39476e	e8		inx		                INX
.39476f	e0 00 04	cpx #$0400	                CPX #1024
.394772	d0 f5		bne $394769	                BNE clr_loop
.394774	22 d7 46 39	jsl $3946d7	                JSL ENTRYFORCLUS12              ; Calculate the LBA
.394778	a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Point to the desired sector in the FAT
.39477a	85 02		sta $0322	                STA BIOS_LBA
.39477c	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.39477e	85 04		sta $0324	                STA BIOS_LBA+2
.394780	a9 00 e5	lda #$e500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first 512 bytes of the FAT buffer
.394783	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394785	a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394788	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.39478a	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.39478e	90 17		bcc $3947a7	                BCC error
.394790	e6 02		inc $0322	                INC BIOS_LBA                    ; Move to the next sector
.394792	a9 00 e7	lda #$e700	                LDA #<>DOS_FAT_SECTORS+512      ; And point to the second 512 bytes of teh FAT buffer
.394795	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394797	a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.39479a	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.39479c	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.3947a0	90 05		bcc $3947a7	                BCC error
.3947a2	28		plp		                PLP
.3947a3	2b		pld		                PLD
.3947a4	ab		plb		                PLB
.3947a5	38		sec		                SEC
.3947a6	6b		rtl		                RTL
.3947a7					error
.3947a7	e2 20		sep #$20	                SEP #$20        ; set A short
.3947a9	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.3947ab	85 0e		sta $032e	                STA DOS_STATUS
.3947ad	28		plp		                PLP
.3947ae	2b		pld		                PLD
.3947af	ab		plb		                PLB
.3947b0	18		clc		                CLC
.3947b1	6b		rtl		                RTL
.3947b2					FATFORCLUSTER32
.3947b2	8b		phb		                PHB
.3947b3	0b		phd		                PHD
.3947b4	48		pha		                PHA             ; begin setdbr macro
.3947b5	08		php		                PHP
.3947b6	e2 20		sep #$20	                SEP #$20        ; set A short
.3947b8	a9 00		lda #$00	                LDA #0
.3947ba	48		pha		                PHA
.3947bb	ab		plb		                PLB
.3947bc	28		plp		                PLP
.3947bd	68		pla		                PLA             ; end setdbr macro
.3947be	48		pha		                PHA             ; begin setdp macro
.3947bf	08		php		                PHP
.3947c0	c2 20		rep #$20	                REP #$20        ; set A long
.3947c2	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3947c5	5b		tcd		                TCD
.3947c6	28		plp		                PLP
.3947c7	68		pla		                PLA             ; end setdp macro
.3947c8	c2 30		rep #$30	                REP #$30        ; set A&X long
.3947ca	a5 10		lda $0330	                LDA DOS_CLUS_ID
.3947cc	85 24		sta $0344	                STA DOS_FAT_LBA
.3947ce	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3947d0	85 26		sta $0346	                STA DOS_FAT_LBA+2
.3947d2	a2 07 00	ldx #$0007	                LDX #7
.3947d5	46 26		lsr $0346	div_loop        LSR DOS_FAT_LBA+2
.3947d7	66 24		ror $0344	                ROR DOS_FAT_LBA
.3947d9	ca		dex		                DEX
.3947da	d0 f9		bne $3947d5	                BNE div_loop
.3947dc	18		clc		                CLC
.3947dd	a5 24		lda $0344	                LDA DOS_FAT_LBA
.3947df	6f 14 e0 38	adc $38e014	                ADC FAT_BEGIN_LBA
.3947e3	85 24		sta $0344	                STA DOS_FAT_LBA
.3947e5	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.3947e7	6f 16 e0 38	adc $38e016	                ADC FAT_BEGIN_LBA+2
.3947eb	85 26		sta $0346	                STA DOS_FAT_LBA+2
.3947ed	a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; We want to load the FAT sector
.3947ef	85 02		sta $0322	                STA BIOS_LBA
.3947f1	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.3947f3	85 04		sta $0324	                STA BIOS_LBA+2
.3947f5	a9 00 e5	lda #$e500	                LDA #<>DOS_FAT_SECTORS          ; We want to load the FAT sector in DOS_FAT_SECTORS
.3947f8	85 06		sta $0326	                STA BIOS_BUFF_PTR
.3947fa	a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.3947fd	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3947ff	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Load the FAT entry
.394803	b0 06		bcs $39480b	                BCS find_entry
.394805	e2 20		sep #$20	                SEP #$20        ; set A short
.394807	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394809	80 0e		bra $394819	                BRA ret_failure
.39480b					find_entry
.39480b	c2 20		rep #$20	                REP #$20        ; set A long
.39480d	a5 10		lda $0330	                LDA DOS_CLUS_ID
.39480f	0a		asl a		                ASL A
.394810	0a		asl a		                ASL A                           ; * 4
.394811	29 ff 01	and #$01ff	                AND #$1FF                       ; DOS_CLUS_ID MOD 512
.394814	aa		tax		                TAX                             ; X should be the offset within the sector
.394815	2b		pld		ret_success     PLD
.394816	ab		plb		                PLB
.394817	38		sec		                SEC                             ; return success
.394818	6b		rtl		                RTL
.394819	2b		pld		ret_failure     PLD
.39481a	ab		plb		                PLB
.39481b	18		clc		                CLC                             ; Return failure
.39481c	6b		rtl		                RTL
.39481d					NEXTCLUSTER
.39481d	08		php		                PHP
.39481e	e2 20		sep #$20	                SEP #$20        ; set A short
.394820	af 01 e0 38	lda $38e001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394824	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394826	d0 08		bne $394830	                BNE fat32                       ; No: assume it's FAT32
.394828	22 3e 48 39	jsl $39483e	fat12           JSL NEXTCLUSTER12               ; Lookup the next cluster from FAT12
.39482c	90 0d		bcc $39483b	                BCC pass_failure                ; If there was an error, pass it up the chain
.39482e	80 06		bra $394836	                BRA ret_success
.394830	22 a6 48 39	jsl $3948a6	fat32           JSL NEXTCLUSTER32               ; Lookup the next cluster from FAT32
.394834	90 05		bcc $39483b	                BCC pass_failure                ; If there was an error, pass it up the chain
.394836	64 0e		stz $032e	ret_success     STZ DOS_STATUS
.394838	28		plp		                PLP
.394839	38		sec		                SEC
.39483a	6b		rtl		                RTL
.39483b	28		plp		pass_failure    PLP
.39483c	18		clc		                CLC
.39483d	6b		rtl		                RTL
.39483e					NEXTCLUSTER12
.39483e	8b		phb		                    PHB
.39483f	0b		phd		                    PHD
.394840	08		php		                    PHP
.394841	48		pha		                PHA             ; begin setdbr macro
.394842	08		php		                PHP
.394843	e2 20		sep #$20	                SEP #$20        ; set A short
.394845	a9 00		lda #$00	                LDA #0
.394847	48		pha		                PHA
.394848	ab		plb		                PLB
.394849	28		plp		                PLP
.39484a	68		pla		                PLA             ; end setdbr macro
.39484b	48		pha		                PHA             ; begin setdp macro
.39484c	08		php		                PHP
.39484d	c2 20		rep #$20	                REP #$20        ; set A long
.39484f	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394852	5b		tcd		                TCD
.394853	28		plp		                PLP
.394854	68		pla		                PLA             ; end setdp macro
.394855	c2 30		rep #$30	                REP #$30        ; set A&X long
.394857	22 4a 47 39	jsl $39474a	                    JSL FATFORCLUSTER12             ; Attempt to load the FAT entries
.39485b	b0 03		bcs $394860	                    BCS chk_clus_id
.39485d	82 41 00	brl $3948a1	                    BRL pass_failure
.394860	a5 10		lda $0330	chk_clus_id         LDA DOS_CLUS_ID                 ; Check the cluster ID...
.394862	89 01 00	bit #$0001	                    BIT #1                          ; Is it odd?
.394865	d0 0d		bne $394874	                    BNE is_odd                      ; Yes: calculate the next cluster for odd
.394867					is_even
.394867	c2 20		rep #$20	                REP #$20        ; set A long
.394869	bf 00 e5 38	lda $38e500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] & $0FFF
.39486d	29 ff 0f	and #$0fff	                    AND #$0FFF
.394870	85 28		sta $0348	                    STA DOS_TEMP
.394872	80 0c		bra $394880	                    BRA check_id
.394874					is_odd
.394874	c2 20		rep #$20	                REP #$20        ; set A long
.394876	bf 00 e5 38	lda $38e500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] >> 4
.39487a	4a		lsr a		                    LSR A
.39487b	4a		lsr a		                    LSR A
.39487c	4a		lsr a		                    LSR A
.39487d	4a		lsr a		                    LSR A
.39487e	85 28		sta $0348	                    STA DOS_TEMP
.394880					check_id
.394880	c2 20		rep #$20	                REP #$20        ; set A long
.394882	a5 28		lda $0348	                    LDA DOS_TEMP                    ; Check the new cluster ID we got
.394884	29 f0 0f	and #$0ff0	                    AND #$0FF0                      ; Is it in the range $0FF0 -- $0FFF?
.394887	c9 f0 0f	cmp #$0ff0	                    CMP #$0FF0
.39488a	f0 0f		beq $39489b	                    BEQ no_more                     ; Yes: return that we've reached the end of the chain
.39488c	a5 28		lda $0348	                    LDA DOS_TEMP                    ; Restore the "current" cluster ID
.39488e	85 10		sta $0330	                    STA DOS_CLUS_ID
.394890	64 12		stz $0332	                    STZ DOS_CLUS_ID+2
.394892					ret_success
.394892	e2 20		sep #$20	                SEP #$20        ; set A short
.394894	64 0e		stz $032e	                    STZ DOS_STATUS
.394896	28		plp		                    PLP
.394897	2b		pld		                    PLD
.394898	ab		plb		                    PLB
.394899	38		sec		                    SEC
.39489a	6b		rtl		                    RTL
.39489b					no_more
.39489b	e2 20		sep #$20	                SEP #$20        ; set A short
.39489d	a9 0a		lda #$0a	                    LDA #DOS_ERR_NOCLUSTER
.39489f	85 0e		sta $032e	                    STA DOS_STATUS
.3948a1	28		plp		pass_failure        PLP
.3948a2	2b		pld		                    PLD
.3948a3	ab		plb		                    PLB
.3948a4	18		clc		                    CLC
.3948a5	6b		rtl		                    RTL
.3948a6					NEXTCLUSTER32
.3948a6	8b		phb		                PHB
.3948a7	0b		phd		                PHD
.3948a8	08		php		                PHP
.3948a9	48		pha		                PHA             ; begin setdbr macro
.3948aa	08		php		                PHP
.3948ab	e2 20		sep #$20	                SEP #$20        ; set A short
.3948ad	a9 00		lda #$00	                LDA #0
.3948af	48		pha		                PHA
.3948b0	ab		plb		                PLB
.3948b1	28		plp		                PLP
.3948b2	68		pla		                PLA             ; end setdbr macro
.3948b3	48		pha		                PHA             ; begin setdp macro
.3948b4	08		php		                PHP
.3948b5	c2 20		rep #$20	                REP #$20        ; set A long
.3948b7	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3948ba	5b		tcd		                TCD
.3948bb	28		plp		                PLP
.3948bc	68		pla		                PLA             ; end setdp macro
.3948bd	c2 30		rep #$30	                REP #$30        ; set A&X long
.3948bf	22 b2 47 39	jsl $3947b2	                JSL FATFORCLUSTER32             ; Get the FAT entry for this cluster
.3948c3	90 30		bcc $3948f5	                BCC ret_failure                 ; If it did not work, return the error
.3948c5	bf 00 e5 38	lda $38e500,x	                LDA DOS_FAT_SECTORS,X           ; Get the entry and copy it to DOS_TEMP
.3948c9	85 28		sta $0348	                STA DOS_TEMP
.3948cb	bf 02 e5 38	lda $38e502,x	                LDA DOS_FAT_SECTORS+2,X
.3948cf	85 2a		sta $034a	                STA DOS_TEMP+2
.3948d1	a5 28		lda $0348	                LDA DOS_TEMP                    ; Is DOS_TEMP = $FFFFFFFF?
.3948d3	c9 ff ff	cmp #$ffff	                CMP #$FFFF
.3948d6	d0 0c		bne $3948e4	                BNE found_next
.3948d8	a5 2a		lda $034a	                LDA DOS_TEMP+2
.3948da	c9 ff 0f	cmp #$0fff	                CMP #$0FFF
.3948dd	d0 05		bne $3948e4	                BNE found_next                  ; No: return this cluster as the next
.3948df	a9 0a 00	lda #$000a	                LDA #DOS_ERR_NOCLUSTER          ; Yes: return that there are no more clusters
.3948e2	80 11		bra $3948f5	                BRA ret_failure
.3948e4	a5 28		lda $0348	found_next      LDA DOS_TEMP                    ; No: return DOS_TEMP as the new DOS_CLUS_ID
.3948e6	85 10		sta $0330	                STA DOS_CLUS_ID
.3948e8	a5 2a		lda $034a	                LDA DOS_TEMP+2
.3948ea	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3948ec					ret_success
.3948ec	e2 20		sep #$20	                SEP #$20        ; set A short
.3948ee	64 0e		stz $032e	                STZ DOS_STATUS                  ; Record success
.3948f0	28		plp		                PLP
.3948f1	2b		pld		                PLD
.3948f2	ab		plb		                PLB
.3948f3	38		sec		                SEC
.3948f4	6b		rtl		                RTL
.3948f5	85 0e		sta $032e	ret_failure     STA DOS_STATUS                  ; Record the error condition
.3948f7	28		plp		                PLP
.3948f8	2b		pld		                PLD
.3948f9	ab		plb		                PLB
.3948fa	18		clc		                CLC
.3948fb	6b		rtl		                RTL
.3948fc					DOS_READNEXT
.3948fc	08		php		                PHP
.3948fd	c2 30		rep #$30	                REP #$30        ; set A&X long
.3948ff	22 1d 48 39	jsl $39481d	                JSL NEXTCLUSTER                 ; Attempt to find the next cluster in the FAT
.394903	90 09		bcc $39490e	                BCC pass_failure                ; If nothing found: pass the failure up the chain
.394905	22 12 44 39	jsl $394412	                JSL DOS_GETCLUSTER              ; Otherwise: attempt to read the cluster
.394909	90 03		bcc $39490e	                BCC pass_failure                ; If nothing read: pass the failure up the chain
.39490b	28		plp		ret_success     PLP
.39490c	38		sec		                SEC
.39490d	6b		rtl		                RTL
.39490e	28		plp		pass_failure    PLP
.39490f	18		clc		                CLC
.394910	6b		rtl		                RTL
.394911					DOS_FREECLUS
.394911	08		php		                PHP
.394912	48		pha		                PHA             ; begin setdp macro
.394913	08		php		                PHP
.394914	c2 20		rep #$20	                REP #$20        ; set A long
.394916	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394919	5b		tcd		                TCD
.39491a	28		plp		                PLP
.39491b	68		pla		                PLA             ; end setdp macro
.39491c	e2 20		sep #$20	                SEP #$20        ; set A short
.39491e	af 01 e0 38	lda $38e001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394922	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394924	d0 08		bne $39492e	                BNE fat32                       ; No: assume it's FAT32
.394926	22 a2 49 39	jsl $3949a2	fat12           JSL DOS_FREECLUS12              ; Find the next free cluster from FAT12
.39492a	90 0d		bcc $394939	                BCC pass_failure                ; If there was an error, pass it up the chain
.39492c	80 06		bra $394934	                BRA ret_success
.39492e	22 7a 4a 39	jsl $394a7a	fat32           JSL DOS_FREECLUS32              ; Find the next free cluster from FAT32
.394932	90 05		bcc $394939	                BCC pass_failure                ; If there was an error, pass it up the chain
.394934	64 0e		stz $032e	ret_success     STZ DOS_STATUS
.394936	28		plp		                PLP
.394937	38		sec		                SEC
.394938	6b		rtl		                RTL
.394939	28		plp		pass_failure    PLP
.39493a	18		clc		                CLC
.39493b	6b		rtl		                RTL
.39493c					FDC_READ2FAT12
.39493c	8b		phb		                    PHB
.39493d	0b		phd		                    PHD
.39493e	08		php		                    PHP
.39493f	48		pha		                PHA             ; begin setdbr macro
.394940	08		php		                PHP
.394941	e2 20		sep #$20	                SEP #$20        ; set A short
.394943	a9 00		lda #$00	                LDA #0
.394945	48		pha		                PHA
.394946	ab		plb		                PLB
.394947	28		plp		                PLP
.394948	68		pla		                PLA             ; end setdbr macro
.394949	48		pha		                PHA             ; begin setdp macro
.39494a	08		php		                PHP
.39494b	c2 20		rep #$20	                REP #$20        ; set A long
.39494d	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394950	5b		tcd		                TCD
.394951	28		plp		                PLP
.394952	68		pla		                PLA             ; end setdp macro
.394953	c2 30		rep #$30	                REP #$30        ; set A&X long
.394955	a9 00 e5	lda #$e500	                    LDA #<>DOS_FAT_SECTORS          ; Set the location to store the sector
.394958	85 06		sta $0326	                    STA BIOS_BUFF_PTR
.39495a	a9 38 00	lda #$0038	                    LDA #`DOS_FAT_SECTORS
.39495d	85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.39495f	a5 24		lda $0344	                    LDA DOS_FAT_LBA
.394961	85 02		sta $0322	                    STA BIOS_LBA
.394963	a5 26		lda $0346	                    LDA DOS_FAT_LBA+2
.394965	85 04		sta $0324	                    STA BIOS_LBA+2
.394967	22 44 10 38	jsl $381044	                    JSL GETBLOCK                    ; Read the first sector
.39496b	b0 07		bcs $394974	                    BCS inc_sect2                   ; If success: start getting the second sector
.39496d	e2 20		sep #$20	                SEP #$20        ; set A short
.39496f	a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.394971	82 1c 00	brl $394990	                    BRL ret_failure
.394974					inc_sect2
.394974	c2 20		rep #$20	                REP #$20        ; set A long
.394976	e6 02		inc $0322	                    INC BIOS_LBA                    ; Move to the next sector
.394978	d0 02		bne $39497c	                    BNE inc_buff_ptr
.39497a	e6 04		inc $0324	                    INC BIOS_LBA+2
.39497c	a9 00 e7	lda #$e700	inc_buff_ptr        LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.39497f	85 06		sta $0326	                    STA BIOS_BUFF_PTR
.394981	a9 38 00	lda #$0038	                    LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394984	85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.394986	22 44 10 38	jsl $381044	                    JSL GETBLOCK                    ; Read the second sector
.39498a	b0 0d		bcs $394999	                    BCS ret_success                 ; If success, return success
.39498c	e2 20		sep #$20	                SEP #$20        ; set A short
.39498e	a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.394990					ret_failure
.394990	e2 20		sep #$20	                SEP #$20        ; set A short
.394992	85 00		sta $0320	                    STA BIOS_STATUS
.394994	28		plp		                    PLP
.394995	2b		pld		                    PLD
.394996	ab		plb		                    PLB
.394997	18		clc		                    CLC
.394998	6b		rtl		                    RTL
.394999					ret_success
.394999	e2 20		sep #$20	                SEP #$20        ; set A short
.39499b	64 00		stz $0320	                    STZ BIOS_STATUS
.39499d	28		plp		                    PLP
.39499e	2b		pld		                    PLD
.39499f	ab		plb		                    PLB
.3949a0	38		sec		                    SEC
.3949a1	6b		rtl		                    RTL
.3949a2					DOS_FREECLUS12
.3949a2	da		phx		                PHX
.3949a3	8b		phb		                PHB
.3949a4	0b		phd		                PHD
.3949a5	08		php		                PHP
.3949a6	48		pha		                PHA             ; begin setdbr macro
.3949a7	08		php		                PHP
.3949a8	e2 20		sep #$20	                SEP #$20        ; set A short
.3949aa	a9 00		lda #$00	                LDA #0
.3949ac	48		pha		                PHA
.3949ad	ab		plb		                PLB
.3949ae	28		plp		                PLP
.3949af	68		pla		                PLA             ; end setdbr macro
.3949b0	48		pha		                PHA             ; begin setdp macro
.3949b1	08		php		                PHP
.3949b2	c2 20		rep #$20	                REP #$20        ; set A long
.3949b4	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3949b7	5b		tcd		                TCD
.3949b8	28		plp		                PLP
.3949b9	68		pla		                PLA             ; end setdp macro
.3949ba	c2 30		rep #$30	                REP #$30        ; set A&X long
.3949bc	a9 02 00	lda #$0002	                LDA #2                          ; Cluster ID is 2 to start with
.3949bf	85 10		sta $0330	                STA DOS_CLUS_ID
.3949c1	a9 00 00	lda #$0000	                LDA #0
.3949c4	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3949c6	22 d7 46 39	jsl $3946d7	                JSL ENTRYFORCLUS12              ; Calculate the LBA and buffer offset for the cluster
.3949ca	22 3c 49 39	jsl $39493c	                JSL FDC_READ2FAT12              ; Read the first two sectors of the FAT
.3949ce	b0 07		bcs $3949d7	                BCS start_of_fat                ; If success, move X to the start of the FAT
.3949d0	e2 20		sep #$20	                SEP #$20        ; set A short
.3949d2	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.3949d4	82 99 00	brl $394a70	                BRL ret_failure
.3949d7					start_of_fat
.3949d7	c2 30		rep #$30	                REP #$30        ; set A&X long
.3949d9	a5 10		lda $0330	chk_cluster     LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.3949db	89 01 00	bit #$0001	                BIT #1
.3949de	d0 09		bne $3949e9	                BNE is_odd
.3949e0	bf 00 e5 38	lda $38e500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an even numbered cluster
.3949e4	29 ff 0f	and #$0fff	                AND #$0FFF
.3949e7	80 08		bra $3949f1	                BRA chk_available
.3949e9	bf 00 e5 38	lda $38e500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an odd numbered cluster
.3949ed	4a		lsr a		                LSR A
.3949ee	4a		lsr a		                LSR A
.3949ef	4a		lsr a		                LSR A
.3949f0	4a		lsr a		                LSR A
.3949f1					chk_available
.3949f1	85 28		sta $0348	                STA DOS_TEMP
.3949f3	c9 00 00	cmp #$0000	                CMP #0                          ; Is it available?
.3949f6	f0 03		beq $3949fb	                BEQ chk_found
.3949f8	82 39 00	brl $394a34	                BRL next_cluster                ; No: advance to the next cluster
.3949fb	8a		txa		chk_found       TXA
.3949fc	85 2a		sta $034a	                STA DOS_TEMP+2
.3949fe	a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.394a00	89 01 00	bit #$0001	                BIT #1
.394a03	d0 0d		bne $394a12	                BNE is_odd2
.394a05					is_even2
.394a05	bf 00 e5 38	lda $38e500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, even offset case
.394a09	09 ff 0f	ora #$0fff	                ORA #$0FFF
.394a0c	9f 00 e5 38	sta $38e500,x	                STA DOS_FAT_SECTORS,X
.394a10	80 0b		bra $394a1d	                BRA write_fat
.394a12					is_odd2
.394a12	bf 00 e5 38	lda $38e500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, odd offset case
.394a16	09 f0 ff	ora #$fff0	                ORA #$FFF0
.394a19	9f 00 e5 38	sta $38e500,x	                STA DOS_FAT_SECTORS,X
.394a1d	22 37 4b 39	jsl $394b37	write_fat       JSL WRITEFAT12                  ; Write the two FAT sectors back to disk
.394a21	b0 07		bcs $394a2a	                BCS ret_success                 ; If success: return success
.394a23	e2 20		sep #$20	                SEP #$20        ; set A short
.394a25	a9 14		lda #$14	                LDA #DOS_ERR_FATUPDATE          ; Flag an error trying to write the FAT back
.394a27	82 46 00	brl $394a70	                BRL ret_failure
.394a2a					ret_success
.394a2a	e2 20		sep #$20	                SEP #$20        ; set A short
.394a2c	64 0e		stz $032e	                STZ DOS_STATUS
.394a2e	28		plp		                PLP
.394a2f	2b		pld		                PLD
.394a30	ab		plb		                PLB
.394a31	fa		plx		                PLX
.394a32	38		sec		                SEC
.394a33	6b		rtl		                RTL
.394a34					next_cluster
.394a34	e6 10		inc $0330	                INC DOS_CLUS_ID                 ; And advance the cluster ID
.394a36	d0 02		bne $394a3a	                BNE calc_entry
.394a38	e6 12		inc $0332	                INC DOS_CLUS_ID+2
.394a3a	22 d7 46 39	jsl $3946d7	calc_entry      JSL ENTRYFORCLUS12              ; Calculate the LBA and offset into the buffer for the cluster
.394a3e	e0 00 00	cpx #$0000	                CPX #0                          ; Did we wrap around?
.394a41	f0 03		beq $394a46	                BEQ chk_end_of_fat
.394a43	82 93 ff	brl $3949d9	                BRL chk_cluster                 ; No: go back and check it too
.394a46					chk_end_of_fat
.394a46	a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Are we at the end of the FAT?
.394a48	cf 18 e0 38	cmp $38e018	                CMP FAT2_BEGIN_LBA              ; NOTE: we use the start sector of the second FAT as our sentinel
.394a4c	d0 0f		bne $394a5d	                BNE next_2
.394a4e	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394a50	cf 1a e0 38	cmp $38e01a	                CMP FAT2_BEGIN_LBA+2
.394a54	d0 07		bne $394a5d	                BNE next_2                      ; No: get the next to sectors
.394a56	e2 20		sep #$20	                SEP #$20        ; set A short
.394a58	a9 12		lda #$12	                LDA #DOS_ERR_MEDIAFULL          ; Yes: return media full
.394a5a	82 13 00	brl $394a70	                BRL ret_failure
.394a5d					next_2
.394a5d	22 3c 49 39	jsl $39493c	                JSL FDC_READ2FAT12              ; Read the next two sectors of the FAT
.394a61	90 06		bcc $394a69	                BCC fat_fail                    ; If failed: return error
.394a63	a2 00 00	ldx #$0000	                LDX #0                          ; If success: Start scanning at the beginning of the sectors
.394a66	82 70 ff	brl $3949d9	                BRL chk_cluster                 ; And start checking from there
.394a69					fat_fail
.394a69	e2 20		sep #$20	                SEP #$20        ; set A short
.394a6b	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394a6d	82 00 00	brl $394a70	                BRL ret_failure
.394a70					ret_failure
.394a70	e2 20		sep #$20	                SEP #$20        ; set A short
.394a72	85 0e		sta $032e	                STA DOS_STATUS
.394a74	28		plp		                PLP
.394a75	2b		pld		                PLD
.394a76	ab		plb		                PLB
.394a77	fa		plx		                PLX
.394a78	18		clc		                CLC
.394a79	6b		rtl		                RTL
.394a7a					DOS_FREECLUS32
.394a7a	8b		phb		                PHB
.394a7b	0b		phd		                PHD
.394a7c	08		php		                PHP
.394a7d	48		pha		                PHA             ; begin setdbr macro
.394a7e	08		php		                PHP
.394a7f	e2 20		sep #$20	                SEP #$20        ; set A short
.394a81	a9 00		lda #$00	                LDA #0
.394a83	48		pha		                PHA
.394a84	ab		plb		                PLB
.394a85	28		plp		                PLP
.394a86	68		pla		                PLA             ; end setdbr macro
.394a87	48		pha		                PHA             ; begin setdp macro
.394a88	08		php		                PHP
.394a89	c2 20		rep #$20	                REP #$20        ; set A long
.394a8b	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394a8e	5b		tcd		                TCD
.394a8f	28		plp		                PLP
.394a90	68		pla		                PLA             ; end setdp macro
.394a91	c2 30		rep #$30	                REP #$30        ; set A&X long
.394a93	a9 00 e3	lda #$e300	                LDA #<>DOS_SECTOR               ; Set the location to store the sector
.394a96	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394a98	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.394a9b	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394a9d	af 14 e0 38	lda $38e014	                LDA FAT_BEGIN_LBA               ; Set the LBA to that of the first FAT sector
.394aa1	85 02		sta $0322	                STA BIOS_LBA
.394aa3	af 16 e0 38	lda $38e016	                LDA FAT_BEGIN_LBA+2
.394aa7	85 04		sta $0324	                STA BIOS_LBA+2
.394aa9	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Load the sector into memory
.394aad	b0 07		bcs $394ab6	                BCS initial_entry               ; If OK: set the initial entry to check
.394aaf	e2 20		sep #$20	                SEP #$20        ; set A short
.394ab1	a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Return a NOFAT error
.394ab3	82 5e 00	brl $394b14	                BRL ret_failure
.394ab6					initial_entry
.394ab6	c2 20		rep #$20	                REP #$20        ; set A long
.394ab8	a9 02 00	lda #$0002	                LDA #2                          ; Set DOS_CLUS_ID to 2
.394abb	85 10		sta $0330	                STA DOS_CLUS_ID
.394abd	a9 00 00	lda #$0000	                LDA #0
.394ac0	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394ac2	a2 08 00	ldx #$0008	                LDX #8                          ; Set the offset to DOS_CLUS_ID * 4
.394ac5	bf 00 e3 38	lda $38e300,x	chk_entry       LDA DOS_SECTOR,X                ; Is the cluster entry == $00000000?
.394ac9	d0 06		bne $394ad1	                BNE next_entry                  ; No: move to the next entry
.394acb	bf 02 e3 38	lda $38e302,x	                LDA DOS_SECTOR+2,X
.394acf	f0 29		beq $394afa	                BEQ found_free                  ; Yes: go to allocate and return it
.394ad1	e6 10		inc $0330	next_entry      INC DOS_CLUS_ID                 ; Move to the next cluster
.394ad3	d0 02		bne $394ad7	                BNE inc_ptr
.394ad5	e6 12		inc $0332	                INC DOS_CLUS_ID+2
.394ad7	e8		inx		inc_ptr         INX                             ; Update the index to the entry
.394ad8	e8		inx		                INX
.394ad9	e8		inx		                INX
.394ada	e8		inx		                INX
.394adb	e0 00 02	cpx #$0200	                CPX #DOS_SECTOR_SIZE            ; Are we outside the sector?
.394ade	90 e5		bcc $394ac5	                BLT chk_entry                   ; No: check this entry
.394ae0	18		clc		                CLC                             ; Point to the next sector in the FAT
.394ae1	a5 02		lda $0322	                LDA BIOS_LBA
.394ae3	69 00 02	adc #$0200	                ADC #DOS_SECTOR_SIZE
.394ae6	85 02		sta $0322	                STA BIOS_LBA
.394ae8	a5 04		lda $0324	                LDA BIOS_LBA+2
.394aea	69 00 00	adc #$0000	                ADC #0
.394aed	85 04		sta $0324	                STA BIOS_LBA+2
.394aef	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Attempt to read the block
.394af3	b0 00		bcs $394af5	                BCS set_ptr                     ; If OK: set the pointer and check it
.394af5	a2 00 00	ldx #$0000	set_ptr         LDX #0                          ; Set index pointer to the first entry
.394af8	80 cb		bra $394ac5	                BRA chk_entry                   ; Check this entry
.394afa					found_free
.394afa	c2 20		rep #$20	                REP #$20        ; set A long
.394afc	a9 ff ff	lda #$ffff	                LDA #<>FAT_LAST_CLUSTER         ; Set the entry to $0FFFFFFF to make it the last entry in its chain
.394aff	9f 00 e3 38	sta $38e300,x	                STA DOS_SECTOR,X
.394b03	a9 ff 0f	lda #$0fff	                LDA #(FAT_LAST_CLUSTER >> 16)
.394b06	9f 02 e3 38	sta $38e302,x	                STA DOS_SECTOR+2,X
.394b0a	22 24 10 38	jsl $381024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.394b0e	b0 0d		bcs $394b1d	                BCS ret_success                 ; If OK: return success
.394b10	e2 20		sep #$20	                SEP #$20        ; set A short
.394b12	a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Otherwise: return NOFAT error
.394b14					ret_failure
.394b14	e2 20		sep #$20	                SEP #$20        ; set A short
.394b16	85 0e		sta $032e	                STA DOS_STATUS
.394b18	28		plp		                PLP
.394b19	2b		pld		                PLD
.394b1a	ab		plb		                PLB
.394b1b	18		clc		                CLC
.394b1c	6b		rtl		                RTL
.394b1d					ret_success
.394b1d	e2 20		sep #$20	                SEP #$20        ; set A short
.394b1f	64 0e		stz $032e	                STZ DOS_STATUS
.394b21	28		plp		                PLP
.394b22	2b		pld		                PLD
.394b23	ab		plb		                PLB
.394b24	38		sec		                SEC
.394b25	6b		rtl		                RTL
.394b26					DELCLUSTER
.394b26	e2 20		sep #$20	                SEP #$20        ; set A short
.394b28	af 01 e0 38	lda $38e001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394b2c	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394b2e	d0 04		bne $394b34	                BNE fat32                       ; No: assume it's FAT32
.394b30	5c 7e 4b 39	jmp $394b7e	fat12           JML DELCLUSTER12
.394b34	4c cc 4b	jmp $394bcc	fat32           JMP DELCLUSTER32
.394b37					WRITEFAT12
.394b37	8b		phb		                PHB
.394b38	0b		phd		                PHD
.394b39	48		pha		                PHA             ; begin setdbr macro
.394b3a	08		php		                PHP
.394b3b	e2 20		sep #$20	                SEP #$20        ; set A short
.394b3d	a9 00		lda #$00	                LDA #0
.394b3f	48		pha		                PHA
.394b40	ab		plb		                PLB
.394b41	28		plp		                PLP
.394b42	68		pla		                PLA             ; end setdbr macro
.394b43	48		pha		                PHA             ; begin setdp macro
.394b44	08		php		                PHP
.394b45	c2 20		rep #$20	                REP #$20        ; set A long
.394b47	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394b4a	5b		tcd		                TCD
.394b4b	28		plp		                PLP
.394b4c	68		pla		                PLA             ; end setdp macro
.394b4d	c2 30		rep #$30	                REP #$30        ; set A&X long
.394b4f	a9 00 e5	lda #$e500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first FAT sector in memory
.394b52	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394b54	a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394b57	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394b59	a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Set the LBA to that of the first sector's
.394b5b	85 02		sta $0322	                STA BIOS_LBA
.394b5d	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394b5f	85 04		sta $0324	                STA BIOS_LBA+2
.394b61	22 24 10 38	jsl $381024	                JSL PUTBLOCK                    ; Write the first sector back to the block device
.394b65	90 14		bcc $394b7b	                BCC done
.394b67	a9 00 e7	lda #$e700	                LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394b6a	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394b6c	a9 38 00	lda #$0038	                LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394b6f	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394b71	e6 02		inc $0322	                INC BIOS_LBA                    ; Point to the next sector in the FAT
.394b73	d0 02		bne $394b77	                BNE put_second
.394b75	e6 04		inc $0324	                INC BIOS_LBA+2
.394b77	22 24 10 38	jsl $381024	put_second      JSL PUTBLOCK                    ; Write the second sector back to the block device
.394b7b	2b		pld		done            PLD
.394b7c	ab		plb		                PLB
.394b7d	6b		rtl		                RTL
.394b7e					DELCLUSTER12
.394b7e	8b		phb		                PHB
.394b7f	0b		phd		                PHD
.394b80	08		php		                PHP
.394b81	48		pha		                PHA             ; begin setdbr macro
.394b82	08		php		                PHP
.394b83	e2 20		sep #$20	                SEP #$20        ; set A short
.394b85	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394b87	48		pha		                PHA
.394b88	ab		plb		                PLB
.394b89	28		plp		                PLP
.394b8a	68		pla		                PLA             ; end setdbr macro
.394b8b	48		pha		                PHA             ; begin setdp macro
.394b8c	08		php		                PHP
.394b8d	c2 20		rep #$20	                REP #$20        ; set A long
.394b8f	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394b92	5b		tcd		                TCD
.394b93	28		plp		                PLP
.394b94	68		pla		                PLA             ; end setdp macro
.394b95	c2 30		rep #$30	                REP #$30        ; set A&X long
.394b97	22 4a 47 39	jsl $39474a	                JSL FATFORCLUSTER12
.394b9b	8a		txa		                TXA                             ; Check to see if the index is odd or even
.394b9c	89 01 00	bit #$0001	                BIT #1
.394b9f	d0 08		bne $394ba9	                BNE is_odd
.394ba1	bd 00 e5	lda $38e500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.394ba4	29 00 f0	and #$f000	                AND #$F000                      ; Mask out the lower 12 bits
.394ba7	80 06		bra $394baf	                BRA save_update
.394ba9	bd 00 e5	lda $38e500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.394bac	29 0f 00	and #$000f	                AND #$000F                      ; Mask out the upper 12 bits
.394baf	9d 00 e5	sta $38e500,x	save_update     STA DOS_FAT_SECTORS,X           ; And write it back
.394bb2	22 37 4b 39	jsl $394b37	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.394bb6	b0 0b		bcs $394bc3	                BCS ret_success
.394bb8					ret_failure
.394bb8	e2 20		sep #$20	                SEP #$20        ; set A short
.394bba	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394bbc	85 0e		sta $032e	                STA DOS_STATUS
.394bbe	28		plp		                PLP
.394bbf	2b		pld		                PLD
.394bc0	ab		plb		                PLB
.394bc1	18		clc		                CLC
.394bc2	6b		rtl		                RTL
.394bc3					ret_success
.394bc3	e2 20		sep #$20	                SEP #$20        ; set A short
.394bc5	64 0e		stz $032e	                STZ DOS_STATUS
.394bc7	28		plp		                PLP
.394bc8	2b		pld		                PLD
.394bc9	ab		plb		                PLB
.394bca	38		sec		                SEC
.394bcb	6b		rtl		                RTL
.394bcc					DELCLUSTER32
.394bcc	8b		phb		                PHB
.394bcd	0b		phd		                PHD
.394bce	08		php		                PHP
.394bcf	c2 30		rep #$30	                REP #$30        ; set A&X long
.394bd1	48		pha		                PHA             ; begin setdbr macro
.394bd2	08		php		                PHP
.394bd3	e2 20		sep #$20	                SEP #$20        ; set A short
.394bd5	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394bd7	48		pha		                PHA
.394bd8	ab		plb		                PLB
.394bd9	28		plp		                PLP
.394bda	68		pla		                PLA             ; end setdbr macro
.394bdb	48		pha		                PHA             ; begin setdp macro
.394bdc	08		php		                PHP
.394bdd	c2 20		rep #$20	                REP #$20        ; set A long
.394bdf	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394be2	5b		tcd		                TCD
.394be3	28		plp		                PLP
.394be4	68		pla		                PLA             ; end setdp macro
.394be5	22 b2 47 39	jsl $3947b2	                JSL FATFORCLUSTER32
.394be9	a9 00 00	lda #$0000	                LDA #0
.394bec	9d 00 e5	sta $38e500,x	                STA DOS_FAT_SECTORS,X           ; Set the cluster entry to 0
.394bef	9d 02 e5	sta $38e502,x	                STA DOS_FAT_SECTORS+2,X
.394bf2	22 24 10 38	jsl $381024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.394bf6	b0 0b		bcs $394c03	                BCS ret_success
.394bf8					ret_failure
.394bf8	e2 20		sep #$20	                SEP #$20        ; set A short
.394bfa	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394bfc	85 0e		sta $032e	                STA DOS_STATUS
.394bfe	28		plp		                PLP
.394bff	2b		pld		                PLD
.394c00	ab		plb		                PLB
.394c01	18		clc		                CLC
.394c02	6b		rtl		                RTL
.394c03					ret_success
.394c03	e2 20		sep #$20	                SEP #$20        ; set A short
.394c05	64 0e		stz $032e	                STZ DOS_STATUS
.394c07	28		plp		                PLP
.394c08	2b		pld		                PLD
.394c09	ab		plb		                PLB
.394c0a	38		sec		                SEC
.394c0b	6b		rtl		                RTL
.394c0c					DOS_APPENDCLUS
.394c0c	8b		phb		                PHB
.394c0d	0b		phd		                PHD
.394c0e	08		php		                PHP
.394c0f	48		pha		                PHA             ; begin setdbr macro
.394c10	08		php		                PHP
.394c11	e2 20		sep #$20	                SEP #$20        ; set A short
.394c13	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394c15	48		pha		                PHA
.394c16	ab		plb		                PLB
.394c17	28		plp		                PLP
.394c18	68		pla		                PLA             ; end setdbr macro
.394c19	48		pha		                PHA             ; begin setdp macro
.394c1a	08		php		                PHP
.394c1b	c2 20		rep #$20	                REP #$20        ; set A long
.394c1d	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394c20	5b		tcd		                TCD
.394c21	28		plp		                PLP
.394c22	68		pla		                PLA             ; end setdp macro
.394c23	c2 30		rep #$30	                REP #$30        ; set A&X long
.394c25	a5 12		lda $0332	                LDA DOS_CLUS_ID+2               ; Save the cluster number for later
.394c27	48		pha		                PHA
.394c28	a5 10		lda $0330	                LDA DOS_CLUS_ID
.394c2a	48		pha		                PHA
.394c2b	22 11 49 39	jsl $394911	                JSL DOS_FREECLUS                ; Find a free cluster on the block device
.394c2f	b0 09		bcs $394c3a	                BCS save_cluster                ; If we got a cluster, write the data to it
.394c31	68		pla		fail_cleanup    PLA                             ; Restore the cluster of the file
.394c32	85 10		sta $0330	                STA DOS_CLUS_ID
.394c34	68		pla		                PLA
.394c35	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394c37	82 7d 00	brl $394cb7	                BRL pass_failure                ; Pass the failure back up the chain
.394c3a	a5 10		lda $0330	save_cluster    LDA DOS_CLUS_ID
.394c3c	8d 36 e0	sta $38e036	                STA DOS_NEW_CLUSTER
.394c3f	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394c41	8d 38 e0	sta $38e038	                STA DOS_NEW_CLUSTER+2
.394c44	22 4f 44 39	jsl $39444f	                JSL DOS_PUTCLUSTER              ; Write the data to the free cluster
.394c48	90 e7		bcc $394c31	                BCC fail_cleanup                ; If failure: clean up stack and pass the failure up
.394c4a	68		pla		                PLA                             ; Restore the cluster of the file
.394c4b	85 10		sta $0330	                STA DOS_CLUS_ID
.394c4d	68		pla		                PLA
.394c4e	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394c50	22 1d 48 39	jsl $39481d	walk_loop       JSL NEXTCLUSTER                 ; Try to get the next cluster in the chain
.394c54	b0 fa		bcs $394c50	                BCS walk_loop                   ; If found a cluster, keep walking the chain
.394c56	e2 20		sep #$20	                SEP #$20        ; set A short
.394c58	af 01 e0 38	lda $38e001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394c5c	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394c5e	d0 3d		bne $394c9d	                BNE fat32                       ; No: assume it's FAT32
.394c60					fat12
.394c60	c2 20		rep #$20	                REP #$20        ; set A long
.394c62	22 d7 46 39	jsl $3946d7	                JSL ENTRYFORCLUS12              ; Make sure we have the right offset for the cluster
.394c66	a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if the last cluster ID is even or odd
.394c68	89 01 00	bit #$0001	                BIT #1
.394c6b	d0 11		bne $394c7e	                BNE is_odd
.394c6d	ad 36 e0	lda $38e036	is_even         LDA DOS_NEW_CLUSTER             ; Handle the even case (change the lower 12 bits)
.394c70	29 ff 0f	and #$0fff	                AND #$0FFF
.394c73	8d 36 e0	sta $38e036	                STA DOS_NEW_CLUSTER
.394c76	bd 00 e5	lda $38e500,x	                LDA DOS_FAT_SECTORS,X
.394c79	29 00 f0	and #$f000	                AND #$F000
.394c7c	80 10		bra $394c8e	                BRA update_fat12
.394c7e	ad 36 e0	lda $38e036	is_odd          LDA DOS_NEW_CLUSTER             ; Handle the odd case (change the upper 12 bits)
.394c81	0a		asl a		                ASL A
.394c82	0a		asl a		                ASL A
.394c83	0a		asl a		                ASL A
.394c84	0a		asl a		                ASL A
.394c85	8d 36 e0	sta $38e036	                STA DOS_NEW_CLUSTER
.394c88	bd 00 e5	lda $38e500,x	                LDA DOS_FAT_SECTORS,X
.394c8b	29 0f 00	and #$000f	                AND #$000F
.394c8e	0d 36 e0	ora $38e036	update_fat12    ORA DOS_NEW_CLUSTER
.394c91	9d 00 e5	sta $38e500,x	                STA DOS_FAT_SECTORS,X
.394c94	22 37 4b 39	jsl $394b37	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.394c98	b0 22		bcs $394cbc	                BCS ret_success
.394c9a	82 1a 00	brl $394cb7	                BRL pass_failure
.394c9d					fat32
.394c9d	c2 20		rep #$20	                REP #$20        ; set A long
.394c9f	ad 36 e0	lda $38e036	                LDA DOS_NEW_CLUSTER             ; Write the ID of the new cluster to the end of the chain
.394ca2	9d 00 e5	sta $38e500,x	                STA DOS_FAT_SECTORS,X
.394ca5	ad 38 e0	lda $38e038	                LDA DOS_NEW_CLUSTER+2
.394ca8	9d 02 e5	sta $38e502,x	                STA DOS_FAT_SECTORS+2,X
.394cab	22 24 10 38	jsl $381024	                JSL PUTBLOCK                    ; Write the FAT sector back (assumes BIOS_LBA and BIOS_BUFF_PTR haven't changed)
.394caf	b0 0b		bcs $394cbc	                BCS ret_success
.394cb1	e2 20		sep #$20	                SEP #$20        ; set A short
.394cb3	a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Problem working with the FAT
.394cb5	85 0e		sta $032e	                STA DOS_STATUS
.394cb7	28		plp		pass_failure    PLP
.394cb8	2b		pld		                PLD
.394cb9	ab		plb		                PLB
.394cba	18		clc		                CLC
.394cbb	6b		rtl		                RTL
.394cbc					ret_success
.394cbc	e2 20		sep #$20	                SEP #$20        ; set A short
.394cbe	64 0e		stz $032e	                STZ DOS_STATUS
.394cc0	28		plp		                PLP
.394cc1	2b		pld		                PLD
.394cc2	ab		plb		                PLB
.394cc3	38		sec		                SEC
.394cc4	6b		rtl		                RTL
.394cc5					BCD2BIN
.394cc5	8b		phb		                PHB
.394cc6	0b		phd		                PHD
.394cc7	08		php		                PHP
.394cc8	48		pha		                PHA             ; begin setdbr macro
.394cc9	08		php		                PHP
.394cca	e2 20		sep #$20	                SEP #$20        ; set A short
.394ccc	a9 00		lda #$00	                LDA #0
.394cce	48		pha		                PHA
.394ccf	ab		plb		                PLB
.394cd0	28		plp		                PLP
.394cd1	68		pla		                PLA             ; end setdbr macro
.394cd2	48		pha		                PHA             ; begin setdp macro
.394cd3	08		php		                PHP
.394cd4	c2 20		rep #$20	                REP #$20        ; set A long
.394cd6	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394cd9	5b		tcd		                TCD
.394cda	28		plp		                PLP
.394cdb	68		pla		                PLA             ; end setdp macro
.394cdc	c2 30		rep #$30	                REP #$30        ; set A&X long
.394cde	85 28		sta $0348	                STA DOS_TEMP
.394ce0	29 0f 00	and #$000f	                AND #$000F
.394ce3	85 2a		sta $034a	                STA DOS_TEMP+2
.394ce5	a5 28		lda $0348	                LDA DOS_TEMP
.394ce7	4a		lsr a		                LSR A
.394ce8	4a		lsr a		                LSR A
.394ce9	4a		lsr a		                LSR A
.394cea	4a		lsr a		                LSR A
.394ceb	85 28		sta $0348	                STA DOS_TEMP
.394ced	29 0f 00	and #$000f	                AND #$000F
.394cf0	8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.394cf4	a9 0a 00	lda #$000a	                LDA #10
.394cf7	8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.394cfb	af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.394cff	18		clc		                CLC
.394d00	65 2a		adc $034a	                ADC DOS_TEMP+2
.394d02	85 2a		sta $034a	                STA DOS_TEMP+2
.394d04	a5 28		lda $0348	                LDA DOS_TEMP
.394d06	4a		lsr a		                LSR A
.394d07	4a		lsr a		                LSR A
.394d08	4a		lsr a		                LSR A
.394d09	4a		lsr a		                LSR A
.394d0a	85 28		sta $0348	                STA DOS_TEMP
.394d0c	29 0f 00	and #$000f	                AND #$000F
.394d0f	8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.394d13	a9 64 00	lda #$0064	                LDA #100
.394d16	8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.394d1a	af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.394d1e	18		clc		                CLC
.394d1f	65 2a		adc $034a	                ADC DOS_TEMP+2
.394d21	85 2a		sta $034a	                STA DOS_TEMP+2
.394d23	a5 28		lda $0348	                LDA DOS_TEMP
.394d25	4a		lsr a		                LSR A
.394d26	4a		lsr a		                LSR A
.394d27	4a		lsr a		                LSR A
.394d28	4a		lsr a		                LSR A
.394d29	29 0f 00	and #$000f	                AND #$000F
.394d2c	8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.394d30	a9 e8 03	lda #$03e8	                LDA #1000
.394d33	8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.394d37	af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.394d3b	18		clc		                CLC
.394d3c	65 2a		adc $034a	                ADC DOS_TEMP+2
.394d3e	28		plp		                PLP
.394d3f	2b		pld		                PLD
.394d40	ab		plb		                PLB
.394d41	6b		rtl		                RTL
.394d42					DOS_RTCCREATE
.394d42	8b		phb		                PHB
.394d43	0b		phd		                PHD
.394d44	08		php		                PHP
.394d45	48		pha		                PHA             ; begin setdbr macro
.394d46	08		php		                PHP
.394d47	e2 20		sep #$20	                SEP #$20        ; set A short
.394d49	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394d4b	48		pha		                PHA
.394d4c	ab		plb		                PLB
.394d4d	28		plp		                PLP
.394d4e	68		pla		                PLA             ; end setdbr macro
.394d4f	48		pha		                PHA             ; begin setdp macro
.394d50	08		php		                PHP
.394d51	c2 20		rep #$20	                REP #$20        ; set A long
.394d53	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394d56	5b		tcd		                TCD
.394d57	28		plp		                PLP
.394d58	68		pla		                PLA             ; end setdp macro
.394d59	c2 10		rep #$10	                REP #$10        ; set X long
.394d5b	e2 20		sep #$20	                SEP #$20        ; set A short
.394d5d	af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn off the updates to the clock
.394d61	09 08		ora #$08	                ORA #%00001000
.394d63	8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.394d67	af 0f 08 af	lda $af080f	                LDA @l RTC_CENTURY
.394d6b	85 29		sta $0349	                STA DOS_TEMP+1
.394d6d	af 0a 08 af	lda $af080a	                LDA @l RTC_YEAR             ; Get the year
.394d71	85 28		sta $0348	                STA DOS_TEMP
.394d73	c2 20		rep #$20	                REP #$20        ; set A long
.394d75	a5 28		lda $0348	                LDA DOS_TEMP
.394d77	22 c5 4c 39	jsl $394cc5	                JSL BCD2BIN                 ; Convert it to binary
.394d7b	85 28		sta $0348	                STA DOS_TEMP
.394d7d	38		sec		                SEC                         ; Year is relative to 1980
.394d7e	e9 bc 07	sbc #$07bc	                SBC #1980
.394d81	c2 20		rep #$20	                REP #$20        ; set A long
.394d83	0a		asl a		                ASL A
.394d84	0a		asl a		                ASL A
.394d85	0a		asl a		                ASL A
.394d86	0a		asl a		                ASL A
.394d87	0a		asl a		                ASL A
.394d88	0a		asl a		                ASL A
.394d89	0a		asl a		                ASL A
.394d8a	0a		asl a		                ASL A
.394d8b	0a		asl a		                ASL A
.394d8c	29 00 fe	and #$fe00	                AND #$FE00
.394d8f	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.394d92	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394d94	e2 20		sep #$20	                SEP #$20        ; set A short
.394d96	af 09 08 af	lda $af0809	                LDA @l RTC_MONTH            ; Get the month
.394d9a	c2 20		rep #$20	                REP #$20        ; set A long
.394d9c	29 ff 00	and #$00ff	                AND #$00FF
.394d9f	22 c5 4c 39	jsl $394cc5	                JSL BCD2BIN                 ; Convert it to binary
.394da3	29 ff 00	and #$00ff	                AND #$00FF                  ; Move the year to bits 15 - 9
.394da6	0a		asl a		                ASL A
.394da7	0a		asl a		                ASL A
.394da8	0a		asl a		                ASL A
.394da9	0a		asl a		                ASL A
.394daa	0a		asl a		                ASL A
.394dab	29 e0 01	and #$01e0	                AND #$01E0                  ; Make sure only the month is covered
.394dae	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.394db1	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.394db3	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394db5	e2 20		sep #$20	                SEP #$20        ; set A short
.394db7	af 06 08 af	lda $af0806	                LDA @l RTC_DAY              ; Get the day
.394dbb	c2 20		rep #$20	                REP #$20        ; set A long
.394dbd	29 ff 00	and #$00ff	                AND #$00FF
.394dc0	22 c5 4c 39	jsl $394cc5	                JSL BCD2BIN                 ; Convert it to binary
.394dc4	29 1f 00	and #$001f	                AND #$001F                  ; Make sure only the day is covered
.394dc7	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.394dca	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.394dcc	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394dce	e2 20		sep #$20	                SEP #$20        ; set A short
.394dd0	af 04 08 af	lda $af0804	                LDA @l RTC_HRS              ; Get the hour
.394dd4	29 1f		and #$1f	                AND #$1F                    ; Trim AM/PM bit
.394dd6	c2 20		rep #$20	                REP #$20        ; set A long
.394dd8	29 ff 00	and #$00ff	                AND #$00FF
.394ddb	22 c5 4c 39	jsl $394cc5	                JSL BCD2BIN                 ; Convert it to binary
.394ddf	c2 20		rep #$20	                REP #$20        ; set A long
.394de1	0a		asl a		                ASL A
.394de2	0a		asl a		                ASL A
.394de3	0a		asl a		                ASL A
.394de4	0a		asl a		                ASL A
.394de5	0a		asl a		                ASL A
.394de6	0a		asl a		                ASL A
.394de7	0a		asl a		                ASL A
.394de8	0a		asl a		                ASL A
.394de9	0a		asl a		                ASL A
.394dea	0a		asl a		                ASL A
.394deb	0a		asl a		                ASL A
.394dec	29 00 f8	and #$f800	                AND #$F800
.394def	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.394df2	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394df4	e2 20		sep #$20	                SEP #$20        ; set A short
.394df6	af 02 08 af	lda $af0802	                LDA @l RTC_MIN              ; Get the minute
.394dfa	c2 20		rep #$20	                REP #$20        ; set A long
.394dfc	29 ff 00	and #$00ff	                AND #$00FF
.394dff	22 c5 4c 39	jsl $394cc5	                JSL BCD2BIN                 ; Convert it to binary
.394e03	c2 20		rep #$20	                REP #$20        ; set A long
.394e05	0a		asl a		                ASL A
.394e06	0a		asl a		                ASL A
.394e07	0a		asl a		                ASL A
.394e08	0a		asl a		                ASL A
.394e09	0a		asl a		                ASL A
.394e0a	29 e0 07	and #$07e0	                AND #$07E0
.394e0d	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.394e10	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.394e12	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394e14	e2 20		sep #$20	                SEP #$20        ; set A short
.394e16	af 00 08 af	lda $af0800	                LDA @l RTC_SEC              ; Get the second
.394e1a	c2 20		rep #$20	                REP #$20        ; set A long
.394e1c	29 ff 00	and #$00ff	                AND #$00FF
.394e1f	22 c5 4c 39	jsl $394cc5	                JSL BCD2BIN                 ; Convert it to binary
.394e23	c2 20		rep #$20	                REP #$20        ; set A long
.394e25	29 1f 00	and #$001f	                AND #$001F
.394e28	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.394e2b	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.394e2d	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394e2f	af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn on the updates again
.394e33	29 f7 00	and #$00f7	                AND #%11110111
.394e36	8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.394e3a	28		plp		                PLP
.394e3b	2b		pld		                PLD
.394e3c	ab		plb		                PLB
.394e3d	6b		rtl		                RTL
.394e3e					DOS_CREATE
.394e3e	8b		phb		                PHB
.394e3f	0b		phd		                PHD
.394e40	08		php		                PHP
.394e41	48		pha		                PHA             ; begin setdbr macro
.394e42	08		php		                PHP
.394e43	e2 20		sep #$20	                SEP #$20        ; set A short
.394e45	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394e47	48		pha		                PHA
.394e48	ab		plb		                PLB
.394e49	28		plp		                PLP
.394e4a	68		pla		                PLA             ; end setdbr macro
.394e4b	48		pha		                PHA             ; begin setdp macro
.394e4c	08		php		                PHP
.394e4d	c2 20		rep #$20	                REP #$20        ; set A long
.394e4f	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394e52	5b		tcd		                TCD
.394e53	28		plp		                PLP
.394e54	68		pla		                PLA             ; end setdp macro
.394e55	c2 30		rep #$30	                REP #$30        ; set A&X long
.394e57	a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; DOS_TEMP := DOS_FD_PTR->PATH
.394e5a	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394e5c	85 28		sta $0348	                STA DOS_TEMP
.394e5e	c8		iny		                INY
.394e5f	c8		iny		                INY
.394e60	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394e62	85 2a		sta $034a	                STA DOS_TEMP+2
.394e64	e2 20		sep #$20	                SEP #$20        ; set A short
.394e66	a0 00 00	ldy #$0000	                LDY #0
.394e69	a2 00 00	ldx #$0000	                LDX #0
.394e6c	b7 28		lda [$0348],y	path_loop       LDA [DOS_TEMP],Y                ; Get a byte of the path
.394e6e	95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X             ; ... save it to the path buffer
.394e70	f0 04		beq $394e76	                BEQ find_file                   ; If it's NULL, we're done
.394e72	e8		inx		                INX
.394e73	c8		iny		                INY
.394e74	80 f6		bra $394e6c	                BRA path_loop
.394e76	22 60 45 39	jsl $394560	find_file       JSL DOS_PARSE_PATH
.394e7a	22 f8 45 39	jsl $3945f8	                JSL DOS_FINDFILE
.394e7e	90 07		bcc $394e87	                BCC set_device
.394e80	e2 20		sep #$20	                SEP #$20        ; set A short
.394e82	a9 0b		lda #$0b	                LDA #DOS_ERR_FILEEXISTS
.394e84	82 c9 00	brl $394f50	                BRL ret_failure
.394e87					set_device
.394e87	e2 20		sep #$20	                SEP #$20        ; set A short
.394e89	a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.394e8c	a5 01		lda $0321	                LDA BIOS_DEV
.394e8e	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394e90					validate_name
.394e90	22 11 49 39	jsl $394911	                JSL DOS_FREECLUS
.394e94	b0 03		bcs $394e99	                BCS save_data
.394e96	82 bb 00	brl $394f54	                BRL pass_failure
.394e99					save_data
.394e99	c2 20		rep #$20	                REP #$20        ; set A long
.394e9b	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER
.394e9e	a5 10		lda $0330	                LDA DOS_CLUS_ID             ; DOS_FD_PTR->FIRST_CLUSTER := DOS_CLUS_ID
.394ea0	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394ea2	c8		iny		                INY
.394ea3	c8		iny		                INY
.394ea4	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394ea6	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394ea8	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; DOS_BUFF_PTR := DOS_FD_PTR->BUFFER
.394eab	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394ead	85 1c		sta $033c	                STA DOS_BUFF_PTR
.394eaf	c8		iny		                INY
.394eb0	c8		iny		                INY
.394eb1	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394eb3	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394eb5	22 4f 44 39	jsl $39444f	                JSL DOS_PUTCLUSTER
.394eb9	b0 00		bcs $394ebb	                BCS find_dir
.394ebb					find_dir
.394ebb	c2 20		rep #$20	                REP #$20        ; set A long
.394ebd	22 b2 40 39	jsl $3940b2	                JSL DOS_DIRFINDFREE
.394ec1	b0 1a		bcs $394edd	                BCS set_entry
.394ec3	c2 20		rep #$20	                REP #$20        ; set A long
.394ec5	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Failed to get the directory entry...
.394ec8	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y              ; DOS_CLUS_ID := DOS_FD_PTR->FIRST_CLUSTER
.394eca	85 10		sta $0330	                STA DOS_CLUS_ID
.394ecc	c8		iny		                INY
.394ecd	c8		iny		                INY
.394ece	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394ed0	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394ed2	22 cc 4b 39	jsl $394bcc	                JSL DELCLUSTER32                ; Delete the cluster
.394ed6	e2 20		sep #$20	                SEP #$20        ; set A short
.394ed8	a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Return that we couldn't read the directory
.394eda	82 73 00	brl $394f50	                BRL ret_failure
.394edd					set_entry
.394edd	e2 20		sep #$20	                SEP #$20        ; set A short
.394edf	a0 00 00	ldy #$0000	                LDY #0
.394ee2	a9 00		lda #$00	                LDA #0                          ; NULL
.394ee4	97 18		sta [$0338],y	copy_dir_loop   STA [DOS_DIR_PTR],Y             ; Save it to the directory cluster
.394ee6	c8		iny		                INY
.394ee7	c0 20 00	cpy #$0020	                CPY #SIZE(DIRENTRY)
.394eea	d0 f8		bne $394ee4	                BNE copy_dir_loop
.394eec	a0 00 00	ldy #$0000	                LDY #0
.394eef	b9 3a e0	lda $38e03a,y	name_loop       LDA DOS_SHORT_NAME,Y            ; Copy the name over
.394ef2	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394ef4	c8		iny		                INY
.394ef5	c0 0b 00	cpy #$000b	                CPY #11
.394ef8	d0 f5		bne $394eef	                BNE name_loop
.394efa	c2 20		rep #$20	                REP #$20        ; set A long
.394efc	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; DOS_DIR_PTR->CLUSTER_L := DOS_FD_PTR->FIRST_CLUSTER[15..0]
.394eff	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394f01	a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.394f04	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394f06	a0 0c 00	ldy #$000c	                LDY #FILEDESC.FIRST_CLUSTER+2   ; DOS_DIR_PTR->CLUSTER_H := DOS_FD_PTR->FIRST_CLUSTER[31..16]
.394f09	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394f0b	a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.394f0e	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394f10	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE              ; DOS_DIR_PTR->SIZE := DOS_FD_PTR->SIZE
.394f13	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394f15	a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE
.394f18	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394f1a	a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.394f1d	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394f1f	a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.394f22	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394f24	22 42 4d 39	jsl $394d42	                JSL DOS_RTCCREATE               ; Pull the creation date-time from the RTC
.394f28	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; DOS_DIR_PTR->CREATE_DATE := DOS_FD_PTR->CREATE_DATE
.394f2b	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394f2d	a0 10 00	ldy #$0010	                LDY #DIRENTRY.CREATE_DATE
.394f30	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394f32	a0 18 00	ldy #$0018	                LDY #DIRENTRY.MODIFIED_DATE     ; And DOS_DIR_PTR->MODIFIED_DATE
.394f35	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394f37	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME       ; DOS_DIR_PTR->CREATE_TIME := DOS_FD_PTR->CREATE_TIME
.394f3a	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394f3c	a0 0e 00	ldy #$000e	                LDY #DIRENTRY.CREATE_TIME
.394f3f	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394f41	a0 16 00	ldy #$0016	                LDY #DIRENTRY.MODIFIED_TIME     ; And DOS_DIR_PTR->MODIFIED_TIME
.394f44	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394f46	c2 20		rep #$20	                REP #$20        ; set A long
.394f48	22 70 41 39	jsl $394170	                JSL DOS_DIRWRITE
.394f4c	b0 0b		bcs $394f59	                BCS ret_success
.394f4e	80 04		bra $394f54	                BRA pass_failure
.394f50					ret_failure
.394f50	e2 20		sep #$20	                SEP #$20        ; set A short
.394f52	85 0e		sta $032e	                STA DOS_STATUS
.394f54	28		plp		pass_failure    PLP
.394f55	2b		pld		                PLD
.394f56	ab		plb		                PLB
.394f57	18		clc		                CLC
.394f58	6b		rtl		                RTL
.394f59					ret_success
.394f59	e2 20		sep #$20	                SEP #$20        ; set A short
.394f5b	64 0e		stz $032e	                STZ DOS_STATUS
.394f5d	28		plp		                PLP
.394f5e	2b		pld		                PLD
.394f5f	ab		plb		                PLB
.394f60	38		sec		                SEC
.394f61	6b		rtl		                RTL
.394f62					DOS_COPYPATH
.394f62	da		phx		                PHX
.394f63	5a		phy		                PHY
.394f64	8b		phb		                PHB
.394f65	0b		phd		                PHD
.394f66	08		php		                PHP
.394f67	48		pha		                PHA             ; begin setdbr macro
.394f68	08		php		                PHP
.394f69	e2 20		sep #$20	                SEP #$20        ; set A short
.394f6b	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394f6d	48		pha		                PHA
.394f6e	ab		plb		                PLB
.394f6f	28		plp		                PLP
.394f70	68		pla		                PLA             ; end setdbr macro
.394f71	48		pha		                PHA             ; begin setdp macro
.394f72	08		php		                PHP
.394f73	c2 20		rep #$20	                REP #$20        ; set A long
.394f75	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394f78	5b		tcd		                TCD
.394f79	28		plp		                PLP
.394f7a	68		pla		                PLA             ; end setdp macro
.394f7b	c2 30		rep #$30	                REP #$30        ; set A&X long
.394f7d	a9 00 00	lda #$0000	                LDA #0                  ; Set the DOS_PATH_BUFF to all zeros
.394f80	a2 00 00	ldx #$0000	                LDX #0
.394f83	95 e0		sta $0400,x	clr_loop        STA DOS_PATH_BUFF,X
.394f85	e8		inx		                INX
.394f86	e8		inx		                INX
.394f87	e0 00 01	cpx #$0100	                CPX #256
.394f8a	d0 f7		bne $394f83	                BNE clr_loop
.394f8c	a5 20		lda $0340	                LDA DOS_FD_PTR          ; Is the DOS_FD_PTR null?
.394f8e	d0 04		bne $394f94	                BNE get_path            ; No: attempt to fetch the path
.394f90	a5 22		lda $0342	                LDA DOS_FD_PTR+2
.394f92	f0 27		beq $394fbb	                BEQ done                ; Yes: return an empty buffer
.394f94	a0 02 00	ldy #$0002	get_path        LDY #FILEDESC.PATH      ; Get the path buffer
.394f97	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394f99	85 28		sta $0348	                STA DOS_TEMP
.394f9b	c8		iny		                INY
.394f9c	c8		iny		                INY
.394f9d	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394f9f	85 2a		sta $034a	                STA DOS_TEMP+2
.394fa1	a5 28		lda $0348	                LDA DOS_TEMP            ; Is the path pointer NULL?
.394fa3	d0 04		bne $394fa9	                BNE start_copy          ; No: start copying it
.394fa5	a5 2a		lda $034a	                LDA DOS_TEMP+2
.394fa7	f0 12		beq $394fbb	                BEQ done                ; Yes: return an empty buffer
.394fa9					start_copy
.394fa9	e2 20		sep #$20	                SEP #$20        ; set A short
.394fab	a2 00 00	ldx #$0000	                LDX #0
.394fae	a0 00 00	ldy #$0000	                LDY #0
.394fb1	b7 28		lda [$0348],y	loop            LDA [DOS_TEMP],Y
.394fb3	95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.394fb5	f0 04		beq $394fbb	                BEQ done
.394fb7	e8		inx		                INX
.394fb8	c8		iny		                INY
.394fb9	d0 f6		bne $394fb1	                BNE loop
.394fbb	28		plp		done            PLP
.394fbc	2b		pld		                PLD
.394fbd	ab		plb		                PLB
.394fbe	7a		ply		                PLY
.394fbf	fa		plx		                PLX
.394fc0	6b		rtl		                RTL

;******  Return to file: src\sdos.asm

.394fc1					DOS_TEST
.394fc1	8b		phb		                PHB
.394fc2	0b		phd		                PHD
.394fc3	08		php		                PHP
.394fc4	48		pha		                PHA             ; begin setdbr macro
.394fc5	08		php		                PHP
.394fc6	e2 20		sep #$20	                SEP #$20        ; set A short
.394fc8	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394fca	48		pha		                PHA
.394fcb	ab		plb		                PLB
.394fcc	28		plp		                PLP
.394fcd	68		pla		                PLA             ; end setdbr macro
.394fce	48		pha		                PHA             ; begin setdp macro
.394fcf	08		php		                PHP
.394fd0	c2 20		rep #$20	                REP #$20        ; set A long
.394fd2	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394fd5	5b		tcd		                TCD
.394fd6	28		plp		                PLP
.394fd7	68		pla		                PLA             ; end setdp macro
.394fd8	c2 30		rep #$30	                REP #$30        ; set A&X long
.394fda	a9 f2 4f	lda #$4ff2	                LDA #<>sample
.394fdd	8f 60 03 00	sta $000360	                STA @l DOS_RUN_PARAM
.394fe1	a9 39 00	lda #$0039	                LDA #`sample
.394fe4	8f 62 03 00	sta $000362	                STA @l DOS_RUN_PARAM+2
.394fe8	22 4c 55 39	jsl $39554c	                JSL IF_RUN
.394fec	b0 00		bcs $394fee	                BCS done
.394fee	28		plp		done            PLP
.394fef	2b		pld		                PLD
.394ff0	ab		plb		                PLB
.394ff1	6b		rtl		                RTL
>394ff2	40 46 3a 53 41 4d 50 4c		sample          .null "@F:SAMPLE.PGX Hello, world!"
>394ffa	45 2e 50 47 58 20 48 65 6c 6c 6f 2c 20 77 6f 72
>39500a	6c 64 21 00
.39500e					IF_OPEN
.39500e	da		phx		                PHX
.39500f	5a		phy		                PHY
.395010	0b		phd		                PHD
.395011	8b		phb		                PHB
.395012	08		php		                PHP
.395013	48		pha		                PHA             ; begin setdbr macro
.395014	08		php		                PHP
.395015	e2 20		sep #$20	                SEP #$20        ; set A short
.395017	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395019	48		pha		                PHA
.39501a	ab		plb		                PLB
.39501b	28		plp		                PLP
.39501c	68		pla		                PLA             ; end setdbr macro
.39501d	48		pha		                PHA             ; begin setdp macro
.39501e	08		php		                PHP
.39501f	c2 20		rep #$20	                REP #$20        ; set A long
.395021	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395024	5b		tcd		                TCD
.395025	28		plp		                PLP
.395026	68		pla		                PLA             ; end setdp macro
.395027	e2 20		sep #$20	                SEP #$20        ; set A short
.395029	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Get the status to make sure a open is ok
.39502c	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39502e	89 40		bit #$40	                BIT #FD_STAT_OPEN
.395030	f0 05		beq $395037	                BEQ ok_to_open
.395032	a9 0f		lda #$0f	                LDA #DOS_ERR_OPEN               ; If already open: throw an error
.395034	82 fd 04	brl $395534	                BRL IF_FAILURE
.395037	22 62 4f 39	jsl $394f62	ok_to_open      JSL DOS_COPYPATH                ; Copy the path to the path buffer
.39503b	22 f8 45 39	jsl $3945f8	                JSL DOS_FINDFILE                ; Attempt to find the file
.39503f	b0 03		bcs $395044	                BCS is_found                    ; If OK: we found the file
.395041	82 f4 04	brl $395538	                BRL IF_PASSFAILURE              ; Otherwise: pass the failure up the chain
.395044					is_found
.395044	e2 20		sep #$20	                SEP #$20        ; set A short
.395046	a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.395049	a5 01		lda $0321	                LDA BIOS_DEV
.39504b	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39504d	c2 20		rep #$20	                REP #$20        ; set A long
.39504f	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Set the buffer point to the one provided in the file
.395052	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395054	85 1c		sta $033c	                STA DOS_BUFF_PTR
.395056	c8		iny		                INY
.395057	c8		iny		                INY
.395058	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39505a	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.39505c	22 12 44 39	jsl $394412	                JSL DOS_GETCLUSTER              ; Attempt to load the cluster
.395060	b0 03		bcs $395065	                BCS read_cluster
.395062	82 d3 04	brl $395538	                BRL IF_PASSFAILURE
.395065	a0 0a 00	ldy #$000a	read_cluster    LDY #FILEDESC.FIRST_CLUSTER     ; Set the first cluster in the file descriptor
.395068	a5 10		lda $0330	                LDA DOS_CLUS_ID
.39506a	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39506c	c8		iny		                INY
.39506d	c8		iny		                INY
.39506e	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.395070	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395072	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Set the current cluster in the file descriptor
.395075	a5 10		lda $0330	                LDA DOS_CLUS_ID
.395077	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395079	c8		iny		                INY
.39507a	c8		iny		                INY
.39507b	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.39507d	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39507f	a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE              ; Copy the filesize from the directory entry to the file descriptor
.395082	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.395084	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE
.395087	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395089	a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.39508c	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.39508e	a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.395091	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395093	e2 20		sep #$20	                SEP #$20        ; set A short
.395095	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Mark file as open and readable
.395098	a9 41		lda #$41	                LDA #FD_STAT_OPEN | FD_STAT_READ
.39509a	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.39509c	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39509e	82 9e 04	brl $39553f	                BRL IF_SUCCESS
.3950a1					IF_CREATE
.3950a1	da		phx		                PHX
.3950a2	5a		phy		                PHY
.3950a3	0b		phd		                PHD
.3950a4	8b		phb		                PHB
.3950a5	08		php		                PHP
.3950a6	48		pha		                PHA             ; begin setdbr macro
.3950a7	08		php		                PHP
.3950a8	e2 20		sep #$20	                SEP #$20        ; set A short
.3950aa	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3950ac	48		pha		                PHA
.3950ad	ab		plb		                PLB
.3950ae	28		plp		                PLP
.3950af	68		pla		                PLA             ; end setdbr macro
.3950b0	48		pha		                PHA             ; begin setdp macro
.3950b1	08		php		                PHP
.3950b2	c2 20		rep #$20	                REP #$20        ; set A long
.3950b4	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3950b7	5b		tcd		                TCD
.3950b8	28		plp		                PLP
.3950b9	68		pla		                PLA             ; end setdp macro
.3950ba	22 3e 4e 39	jsl $394e3e	                JSL DOS_CREATE                  ; Attempt to create the file
.3950be	90 18		bcc $3950d8	                BCC pass_failure                ; If it fails: pass the failure up the chain
.3950c0	c2 30		rep #$30	                REP #$30        ; set A&X long
.3950c2	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Sets the current cluster to 0 to make sure the next write appends
.3950c5	a9 00 00	lda #$0000	                LDA #0
.3950c8	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3950ca	c8		iny		                INY
.3950cb	c8		iny		                INY
.3950cc	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3950ce	e2 20		sep #$20	                SEP #$20        ; set A short
.3950d0	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS
.3950d3	a9 42		lda #$42	                LDA #FD_STAT_OPEN | FD_STAT_WRITE   ; Set the file to open and APPEND only
.3950d5	82 67 04	brl $39553f	                BRL IF_SUCCESS
.3950d8	82 59 04	brl $395534	pass_failure    BRL IF_FAILURE
.3950db					IF_CLOSE
.3950db	da		phx		                PHX
.3950dc	5a		phy		                PHY
.3950dd	0b		phd		                PHD
.3950de	8b		phb		                PHB
.3950df	08		php		                PHP
.3950e0	48		pha		                PHA             ; begin setdbr macro
.3950e1	08		php		                PHP
.3950e2	e2 20		sep #$20	                SEP #$20        ; set A short
.3950e4	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3950e6	48		pha		                PHA
.3950e7	ab		plb		                PLB
.3950e8	28		plp		                PLP
.3950e9	68		pla		                PLA             ; end setdbr macro
.3950ea	48		pha		                PHA             ; begin setdp macro
.3950eb	08		php		                PHP
.3950ec	c2 20		rep #$20	                REP #$20        ; set A long
.3950ee	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3950f1	5b		tcd		                TCD
.3950f2	28		plp		                PLP
.3950f3	68		pla		                PLA             ; end setdp macro
.3950f4	e2 20		sep #$20	                SEP #$20        ; set A short
.3950f6	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Check to see if we were writing the file
.3950f9	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3950fb	89 02		bit #$02	                BIT #FD_STAT_WRITE
.3950fd	f0 09		beq $395108	                BEQ set_flag                    ; No, just mark it closed
.3950ff	22 68 51 39	jsl $395168	                JSL IF_WRITE                    ; Attempt to write the cluster
.395103	b0 03		bcs $395108	                BCS set_flag
.395105	82 30 04	brl $395538	                BRL IF_PASSFAILURE              ; If there was a problem, pass it up the chain
.395108	a0 00 00	ldy #$0000	set_flag        LDY #FILEDESC.STATUS
.39510b	a9 bf		lda #$bf	                LDA #~FD_STAT_OPEN              ; Mark file as closed
.39510d	37 20		and [$0340],y	                AND [DOS_FD_PTR],Y
.39510f	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395111	82 2b 04	brl $39553f	                BRL IF_SUCCESS
.395114					IF_READ
.395114	da		phx		                PHX
.395115	5a		phy		                PHY
.395116	0b		phd		                PHD
.395117	8b		phb		                PHB
.395118	08		php		                PHP
.395119	48		pha		                PHA             ; begin setdbr macro
.39511a	08		php		                PHP
.39511b	e2 20		sep #$20	                SEP #$20        ; set A short
.39511d	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39511f	48		pha		                PHA
.395120	ab		plb		                PLB
.395121	28		plp		                PLP
.395122	68		pla		                PLA             ; end setdbr macro
.395123	48		pha		                PHA             ; begin setdp macro
.395124	08		php		                PHP
.395125	c2 20		rep #$20	                REP #$20        ; set A long
.395127	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39512a	5b		tcd		                TCD
.39512b	28		plp		                PLP
.39512c	68		pla		                PLA             ; end setdp macro
.39512d	c2 10		rep #$10	                REP #$10        ; set X long
.39512f	e2 20		sep #$20	                SEP #$20        ; set A short
.395131					get_dev
.395131	e2 20		sep #$20	                SEP #$20        ; set A short
.395133	a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.395136	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395138	85 01		sta $0321	                STA BIOS_DEV
.39513a	c2 20		rep #$20	                REP #$20        ; set A long
.39513c	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.39513f	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395141	85 10		sta $0330	                STA DOS_CLUS_ID
.395143	c8		iny		                INY
.395144	c8		iny		                INY
.395145	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395147	85 12		sta $0332	                STA DOS_CLUS_ID+2
.395149	22 1d 48 39	jsl $39481d	                JSL NEXTCLUSTER                 ; Find the next cluster of the file
.39514d	90 13		bcc $395162	                BCC pass_failure                ; If not OK: pass the failure up the chaing
.39514f	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.395152	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395154	85 1c		sta $033c	                STA DOS_BUFF_PTR
.395156	c8		iny		                INY
.395157	c8		iny		                INY
.395158	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39515a	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.39515c	22 12 44 39	jsl $394412	                JSL DOS_GETCLUSTER              ; Get the cluster
.395160	b0 03		bcs $395165	                BCS ret_success                 ; If ok: return success
.395162					pass_failure
.395162	82 d3 03	brl $395538	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.395165	82 d7 03	brl $39553f	ret_success     BRL IF_SUCCESS
.395168					IF_WRITE
.395168	da		phx		                PHX
.395169	5a		phy		                PHY
.39516a	0b		phd		                PHD
.39516b	8b		phb		                PHB
.39516c	08		php		                PHP
.39516d	48		pha		                PHA             ; begin setdbr macro
.39516e	08		php		                PHP
.39516f	e2 20		sep #$20	                SEP #$20        ; set A short
.395171	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395173	48		pha		                PHA
.395174	ab		plb		                PLB
.395175	28		plp		                PLP
.395176	68		pla		                PLA             ; end setdbr macro
.395177	48		pha		                PHA             ; begin setdp macro
.395178	08		php		                PHP
.395179	c2 20		rep #$20	                REP #$20        ; set A long
.39517b	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39517e	5b		tcd		                TCD
.39517f	28		plp		                PLP
.395180	68		pla		                PLA             ; end setdp macro
.395181	c2 10		rep #$10	                REP #$10        ; set X long
.395183	e2 20		sep #$20	                SEP #$20        ; set A short
.395185	a0 01 00	ldy #$0001	get_dev         LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.395188	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39518a	85 01		sta $0321	                STA BIOS_DEV
.39518c	c2 20		rep #$20	                REP #$20        ; set A long
.39518e	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.395191	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395193	85 1c		sta $033c	                STA DOS_BUFF_PTR
.395195	c8		iny		                INY
.395196	c8		iny		                INY
.395197	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395199	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.39519b	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.39519e	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3951a0	85 10		sta $0330	                STA DOS_CLUS_ID
.3951a2	c8		iny		                INY
.3951a3	c8		iny		                INY
.3951a4	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3951a6	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3951a8	d0 1a		bne $3951c4	                BNE rewrite_cluster             ; If the cluster ID <> 0, overwrite it
.3951aa	a5 10		lda $0330	                LDA DOS_CLUS_ID
.3951ac	d0 16		bne $3951c4	                BNE rewrite_cluster
.3951ae	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Get the file's first cluster
.3951b1	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3951b3	85 10		sta $0330	                STA DOS_CLUS_ID
.3951b5	c8		iny		                INY
.3951b6	c8		iny		                INY
.3951b7	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3951b9	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3951bb	22 0c 4c 39	jsl $394c0c	                JSL DOS_APPENDCLUS              ; Append the cluster
.3951bf	b0 0c		bcs $3951cd	                BCS ret_success                 ; If OK: return success
.3951c1	82 74 03	brl $395538	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.3951c4	22 4f 44 39	jsl $39444f	rewrite_cluster JSL DOS_PUTCLUSTER              ; Over-write the cluster
.3951c8	b0 03		bcs $3951cd	                BCS ret_success                 ; If ok: return success
.3951ca	82 6b 03	brl $395538	pass_failure    BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.3951cd	82 6f 03	brl $39553f	ret_success     BRL IF_SUCCESS
.3951d0					IF_DIROPEN
.3951d0	da		phx		                PHX
.3951d1	5a		phy		                PHY
.3951d2	0b		phd		                PHD
.3951d3	8b		phb		                PHB
.3951d4	08		php		                PHP
.3951d5	48		pha		                PHA             ; begin setdbr macro
.3951d6	08		php		                PHP
.3951d7	e2 20		sep #$20	                SEP #$20        ; set A short
.3951d9	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3951db	48		pha		                PHA
.3951dc	ab		plb		                PLB
.3951dd	28		plp		                PLP
.3951de	68		pla		                PLA             ; end setdbr macro
.3951df	48		pha		                PHA             ; begin setdp macro
.3951e0	08		php		                PHP
.3951e1	c2 20		rep #$20	                REP #$20        ; set A long
.3951e3	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3951e6	5b		tcd		                TCD
.3951e7	28		plp		                PLP
.3951e8	68		pla		                PLA             ; end setdp macro
.3951e9	c2 30		rep #$30	                REP #$30        ; set A&X long
.3951eb	22 62 4f 39	jsl $394f62	                JSL DOS_COPYPATH            ; Copy the path from the file descriptor to the path buffer
.3951ef	22 60 45 39	jsl $394560	                JSL DOS_PARSE_PATH          ; Parse the path
.3951f3	22 01 42 39	jsl $394201	                JSL DOS_MOUNT               ; Make sure we've mounted the SDC.
.3951f7	b0 03		bcs $3951fc	                BCS get_root_dir            ; If successful: get the root directory
.3951f9	82 3c 03	brl $395538	                BRL IF_PASSFAILURE          ; Otherwise: pass the error up the chain
.3951fc					get_root_dir
.3951fc	c2 30		rep #$30	                REP #$30        ; set A&X long
.3951fe	22 57 3f 39	jsl $393f57	                JSL DOS_DIROPEN
.395202	b0 03		bcs $395207	                BCS success
.395204	82 31 03	brl $395538	                BRL IF_PASSFAILURE
.395207	82 35 03	brl $39553f	success         BRL IF_SUCCESS
.39520a					IF_DIRNEXT
.39520a	5c f1 3f 39	jmp $393ff1	                JML DOS_DIRNEXT
.39520e					IF_DELETE
.39520e	da		phx		                PHX
.39520f	5a		phy		                PHY
.395210	0b		phd		                PHD
.395211	8b		phb		                PHB
.395212	08		php		                PHP
.395213	48		pha		                PHA             ; begin setdbr macro
.395214	08		php		                PHP
.395215	e2 20		sep #$20	                SEP #$20        ; set A short
.395217	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395219	48		pha		                PHA
.39521a	ab		plb		                PLB
.39521b	28		plp		                PLP
.39521c	68		pla		                PLA             ; end setdbr macro
.39521d	48		pha		                PHA             ; begin setdp macro
.39521e	08		php		                PHP
.39521f	c2 20		rep #$20	                REP #$20        ; set A long
.395221	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395224	5b		tcd		                TCD
.395225	28		plp		                PLP
.395226	68		pla		                PLA             ; end setdp macro
.395227	c2 30		rep #$30	                REP #$30        ; set A&X long
.395229	22 f8 45 39	jsl $3945f8	                JSL DOS_FINDFILE
.39522d	b0 03		bcs $395232	                BCS get_first_clus
.39522f	82 06 03	brl $395538	                BRL IF_PASSFAILURE
.395232					get_first_clus
.395232	a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.395235	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.395237	85 10		sta $0330	                STA DOS_CLUS_ID
.395239	a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.39523c	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.39523e	85 12		sta $0332	                STA DOS_CLUS_ID+2
.395240	a5 10		lda $0330	                LDA DOS_CLUS_ID
.395242	8d 2a e0	sta $38e02a	                STA DOS_CURR_CLUS
.395245	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.395247	8d 2c e0	sta $38e02c	                STA DOS_CURR_CLUS+2
.39524a	22 1d 48 39	jsl $39481d	del_loop        JSL NEXTCLUSTER
.39524e	90 2f		bcc $39527f	                BCC del_one
.395250	a5 10		lda $0330	                LDA DOS_CLUS_ID
.395252	8d 2e e0	sta $38e02e	                STA DOS_NEXT_CLUS
.395255	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.395257	8d 30 e0	sta $38e030	                STA DOS_NEXT_CLUS+2
.39525a	ad 2a e0	lda $38e02a	                LDA DOS_CURR_CLUS
.39525d	85 10		sta $0330	                STA DOS_CLUS_ID
.39525f	ad 2c e0	lda $38e02c	                LDA DOS_CURR_CLUS+2
.395262	85 12		sta $0332	                STA DOS_CLUS_ID+2
.395264	22 cc 4b 39	jsl $394bcc	                JSL DELCLUSTER32
.395268	b0 03		bcs $39526d	                BCS go_next
.39526a	82 cb 02	brl $395538	                BRL IF_PASSFAILURE
.39526d					go_next
.39526d	ad 2e e0	lda $38e02e	                LDA DOS_NEXT_CLUS
.395270	85 10		sta $0330	                STA DOS_CLUS_ID
.395272	8d 2a e0	sta $38e02a	                STA DOS_CURR_CLUS
.395275	ad 30 e0	lda $38e030	                LDA DOS_NEXT_CLUS+2
.395278	85 12		sta $0332	                STA DOS_CLUS_ID+2
.39527a	8d 2c e0	sta $38e02c	                STA DOS_CURR_CLUS+2
.39527d	80 cb		bra $39524a	                BRA del_loop
.39527f					del_one
.39527f	ad 2a e0	lda $38e02a	                LDA DOS_CURR_CLUS
.395282	85 10		sta $0330	                STA DOS_CLUS_ID
.395284	ad 2c e0	lda $38e02c	                LDA DOS_CURR_CLUS+2
.395287	85 12		sta $0332	                STA DOS_CLUS_ID+2
.395289	22 26 4b 39	jsl $394b26	                JSL DELCLUSTER
.39528d	b0 03		bcs $395292	                BCS free_dir_entry
.39528f	82 a6 02	brl $395538	                BRL IF_PASSFAILURE
.395292					free_dir_entry
.395292	e2 20		sep #$20	                SEP #$20        ; set A short
.395294	a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME         ; Flag the directory entry as deleted
.395297	a9 e5		lda #$e5	                LDA #DOS_DIR_ENT_UNUSED
.395299	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.39529b	22 70 41 39	jsl $394170	                JSL DOS_DIRWRITE                ; Write the directory entry back
.39529f	b0 03		bcs $3952a4	                BCS ret_success
.3952a1	82 94 02	brl $395538	                BRL IF_PASSFAILURE
.3952a4	82 98 02	brl $39553f	ret_success     BRL IF_SUCCESS
.3952a7					IF_DIRREAD
.3952a7	da		phx		                PHX
.3952a8	5a		phy		                PHY
.3952a9	0b		phd		                PHD
.3952aa	8b		phb		                PHB
.3952ab	08		php		                PHP
.3952ac	48		pha		                PHA             ; begin setdbr macro
.3952ad	08		php		                PHP
.3952ae	e2 20		sep #$20	                SEP #$20        ; set A short
.3952b0	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3952b2	48		pha		                PHA
.3952b3	ab		plb		                PLB
.3952b4	28		plp		                PLP
.3952b5	68		pla		                PLA             ; end setdbr macro
.3952b6	48		pha		                PHA             ; begin setdp macro
.3952b7	08		php		                PHP
.3952b8	c2 20		rep #$20	                REP #$20        ; set A long
.3952ba	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3952bd	5b		tcd		                TCD
.3952be	28		plp		                PLP
.3952bf	68		pla		                PLA             ; end setdp macro
.3952c0	c2 30		rep #$30	                REP #$30        ; set A&X long
.3952c2	22 f8 45 39	jsl $3945f8	                JSL DOS_FINDFILE
.3952c6	b0 03		bcs $3952cb	                BCS success
.3952c8	82 69 02	brl $395534	                BRL IF_FAILURE
.3952cb	82 71 02	brl $39553f	success         BRL IF_SUCCESS
.3952ce					IF_DIRWRITE
.3952ce	5c 70 41 39	jmp $394170	                JML DOS_DIRWRITE
.3952d2					IF_LOAD
.3952d2	da		phx		                PHX
.3952d3	5a		phy		                PHY
.3952d4	0b		phd		                PHD
.3952d5	8b		phb		                PHB
.3952d6	08		php		                PHP
.3952d7	48		pha		                PHA             ; begin setdbr macro
.3952d8	08		php		                PHP
.3952d9	e2 20		sep #$20	                SEP #$20        ; set A short
.3952db	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3952dd	48		pha		                PHA
.3952de	ab		plb		                PLB
.3952df	28		plp		                PLP
.3952e0	68		pla		                PLA             ; end setdbr macro
.3952e1	48		pha		                PHA             ; begin setdp macro
.3952e2	08		php		                PHP
.3952e3	c2 20		rep #$20	                REP #$20        ; set A long
.3952e5	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3952e8	5b		tcd		                TCD
.3952e9	28		plp		                PLP
.3952ea	68		pla		                PLA             ; end setdp macro
.3952eb	c2 30		rep #$30	                REP #$30        ; set A&X long
.3952ed	22 0e 50 39	jsl $39500e	                JSL IF_OPEN
.3952f1	b0 03		bcs $3952f6	                BCS setup                   ; If success: start setting things up
.3952f3	82 42 02	brl $395538	                BRL IF_PASSFAILURE          ; Otherwise: pass the failure up the chain
.3952f6					setup
.3952f6	c2 20		rep #$20	                REP #$20        ; set A long
.3952f8	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE          ; Record the size of the file in DOS_FILE_SIZE
.3952fb	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3952fd	85 2c		sta $034c	                STA DOS_FILE_SIZE
.3952ff	c8		iny		                INY
.395300	c8		iny		                INY
.395301	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395303	85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.395305	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; Set up the source pointer
.395308	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39530a	85 30		sta $0350	                STA DOS_SRC_PTR
.39530c	c8		iny		                INY
.39530d	c8		iny		                INY
.39530e	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395310	85 32		sta $0352	                STA DOS_SRC_PTR+2
.395312	a5 36		lda $0356	                LDA DOS_DST_PTR+2           ; Is there a destination address in RAM?
.395314	c9 40 00	cmp #$0040	                CMP #$0040
.395317	b0 04		bcs $39531d	                BGE load_by_type            ; No: try to load it by type
.395319	5c e7 53 39	jmp $3953e7	                JML IF_LOADRAW              ; Otherwise, load it to the supplied destination
.39531d	a0 08 00	ldy #$0008	load_by_type    LDY #8                      ; Point to the first extension byte
.395320	a2 00 00	ldx #$0000	                LDX #0                      ; and the first byte of the table
.395323					type_loop
.395323	e2 20		sep #$20	                SEP #$20        ; set A short
.395325	bf 69 53 39	lda $395369,x	                LDA LOAD_TYPE_TABLE,X       ; Get 1st extension character of the entry
.395329	f0 37		beq $395362	                BEQ no_match                ; If NULL... we didn't get a match
.39532b	d9 3a e0	cmp $38e03a,y	                CMP DOS_SHORT_NAME,Y        ; Get the character of the extension
.39532e	d0 28		bne $395358	                BNE next_entry              ; If they don't match, try the next entry
.395330	bf 6a 53 39	lda $39536a,x	                LDA LOAD_TYPE_TABLE+1,X     ; Get 2nd extension character of the entry
.395334	d9 3b e0	cmp $38e03b,y	                CMP DOS_SHORT_NAME+1,Y      ; Get the 2nd character of the extension
.395337	d0 1f		bne $395358	                BNE next_entry              ; If they don't match, try the next entry
.395339	bf 6b 53 39	lda $39536b,x	                LDA LOAD_TYPE_TABLE+2,X     ; Get 3rd extension character of the entry
.39533d	d9 3c e0	cmp $38e03c,y	                CMP DOS_SHORT_NAME+2,Y      ; Get the 3rd character of the extension
.395340	d0 16		bne $395358	                BNE next_entry              ; If they don't match, try the next entry
.395342	c2 20		rep #$20	                REP #$20        ; set A long
.395344	bf 6c 53 39	lda $39536c,x	                LDA LOAD_TYPE_TABLE+3,X     ; Get the low word of the address
.395348	85 28		sta $0348	                STA DOS_TEMP                ; Save it to the jump vector
.39534a	e2 20		sep #$20	                SEP #$20        ; set A short
.39534c	bf 6e 53 39	lda $39536e,x	                LDA LOAD_TYPE_TABLE+5,X     ; Get the high byte of the address
.395350	85 2a		sta $034a	                STA DOS_TEMP+2              ; Save it to the jump vector
.395352	a2 00 00	ldx #$0000	                LDX #0
.395355	dc 48 03	jmp [$0348]	                JML [DOS_TEMP]              ; Jump to the loading routine
.395358					next_entry
.395358	c2 30		rep #$30	                REP #$30        ; set A&X long
.39535a	8a		txa		                TXA
.39535b	18		clc		                CLC
.39535c	69 06 00	adc #$0006	                ADC #6
.39535f	aa		tax		                TAX
.395360	80 c1		bra $395323	                BRA type_loop               ; And check it against the file
.395362					no_match
.395362	e2 20		sep #$20	                SEP #$20        ; set A short
.395364	a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC         ; Return an not-executable error
.395366	82 cb 01	brl $395534	                BRL IF_FAILURE
>395369	50 47 58			LOAD_TYPE_TABLE .text "PGX"                 ; "PGX" --> IF_LOADPGX
>39536c	70 53				                .word <>IF_LOADPGX
>39536e	39				                .byte `IF_LOADPGX
>39536f	00				                .byte 0
.395370					IF_LOADPGX
.395370	c2 10		rep #$10	                REP #$10        ; set X long
.395372	e2 20		sep #$20	                SEP #$20        ; set A short
.395374	a0 00 00	ldy #$0000	                LDY #0
.395377	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Check for "PGX" signature
.395379	c9 50		cmp #$50	                CMP #'P'
.39537b	d0 15		bne $395392	                BNE fail_sig                        ; If not found, fail
.39537d	c8		iny		                INY
.39537e	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.395380	c9 47		cmp #$47	                CMP #'G'
.395382	d0 0e		bne $395392	                BNE fail_sig
.395384	c8		iny		                INY
.395385	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.395387	c9 58		cmp #$58	                CMP #'X'
.395389	d0 07		bne $395392	                BNE fail_sig
.39538b	c8		iny		                INY                                 ; Check for CPU and version code ($01 for 65816)
.39538c	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.39538e	c9 01		cmp #$01	                CMP #$01
.395390	f0 06		beq $395398	                BEQ get_dest                        ; All passes: go to get the destination address
.395392	a9 10		lda #$10	fail_sig        LDA #DOS_ERR_PGXSIG                 ; Fail with a PGXSIG error code
.395394	22 34 55 39	jsl $395534	                JSL IF_FAILURE
.395398					get_dest
.395398	c2 20		rep #$20	                REP #$20        ; set A long
.39539a	c8		iny		                INY
.39539b	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get low word of destination address
.39539d	85 34		sta $0354	                STA DOS_DST_PTR                     ; And save it to the destination pointer
.39539f	85 3c		sta $035c	                STA DOS_RUN_PTR                     ; And save it to the RUN pointer
.3953a1	c8		iny		                INY
.3953a2	c8		iny		                INY
.3953a3	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get high word of destination address
.3953a5	85 36		sta $0356	                STA DOS_DST_PTR+2
.3953a7	85 3e		sta $035e	                STA DOS_RUN_PTR+2
.3953a9	c8		iny		                INY                                 ; Point to the first data byte
.3953aa	c8		iny		                INY
.3953ab					copy_loop
.3953ab	e2 20		sep #$20	                SEP #$20        ; set A short
.3953ad	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Read a byte from the file
.3953af	87 34		sta [$0354]	                STA [DOS_DST_PTR]                   ; Write it to the destination
.3953b1	c2 20		rep #$20	                REP #$20        ; set A long
.3953b3	e6 34		inc $0354	                INC DOS_DST_PTR                     ; Move to the next destination location
.3953b5	d0 02		bne $3953b9	                BNE dec_file_size
.3953b7	e6 34		inc $0354	                INC DOS_DST_PTR
.3953b9	38		sec		dec_file_size   SEC                                 ; Count down the number of bytes to read
.3953ba	a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.3953bc	e9 01 00	sbc #$0001	                SBC #1
.3953bf	85 2c		sta $034c	                STA DOS_FILE_SIZE
.3953c1	a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.3953c3	e9 00 00	sbc #$0000	                SBC #0
.3953c6	85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.3953c8	a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Are we at the end of the file?
.3953ca	d0 04		bne $3953d0	                BNE next_byte
.3953cc	a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.3953ce	f0 14		beq $3953e4	                BEQ done                            ; Yes: we're done
.3953d0	c8		iny		next_byte       INY                                 ; Otherwise, move to the next source location
.3953d1	cc 0e e0	cpy $38e00e	                CPY CLUSTER_SIZE                    ; Are we at the end of the cluster?
.3953d4	d0 d5		bne $3953ab	                BNE copy_loop                       ; No: keep copying
.3953d6	22 fc 48 39	jsl $3948fc	                JSL DOS_READNEXT                    ; Yes: Load the next cluster
.3953da	b0 03		bcs $3953df	                BCS next_cluster
.3953dc	82 59 01	brl $395538	                BRL IF_PASSFAILURE                  ; If failed: pass that up the chain
.3953df	a0 00 00	ldy #$0000	next_cluster    LDY #0                              ; Reset the source index
.3953e2	80 c7		bra $3953ab	                BRA copy_loop                       ; Go back to copying
.3953e4	82 58 01	brl $39553f	done            BRL IF_SUCCESS
.3953e7					IF_LOADRAW
.3953e7	c2 30		rep #$30	                REP #$30        ; set A&X long
.3953e9	a0 00 00	ldy #$0000	copy_cluster    LDY #0
.3953ec					copy_loop
.3953ec	e2 20		sep #$20	                SEP #$20        ; set A short
.3953ee	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y         ; Copy byte from cluster to destination
.3953f0	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.3953f2	c2 20		rep #$20	                REP #$20        ; set A long
.3953f4	38		sec		                SEC                         ; Count down the number of bytes left
.3953f5	a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.3953f7	e9 01 00	sbc #$0001	                SBC #1
.3953fa	85 2c		sta $034c	                STA DOS_FILE_SIZE
.3953fc	a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.3953fe	e9 00 00	sbc #$0000	                SBC #0
.395401	85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.395403	d0 04		bne $395409	                BNE continue
.395405	a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.395407	f0 1b		beq $395424	                BEQ close_file              ; If not: we're done
.395409	c8		iny		continue        INY
.39540a	cc 0e e0	cpy $38e00e	                CPY CLUSTER_SIZE            ; Are we done with the cluster?
.39540d	d0 dd		bne $3953ec	                BNE copy_loop               ; No: keep processing the bytes
.39540f	18		clc		                CLC                         ; Advance the destination pointer to the next chunk of memory
.395410	a5 34		lda $0354	                LDA DOS_DST_PTR
.395412	6d 0e e0	adc $38e00e	                ADC CLUSTER_SIZE
.395415	85 34		sta $0354	                STA DOS_DST_PTR
.395417	a5 36		lda $0356	                LDA DOS_DST_PTR+2
.395419	69 00 00	adc #$0000	                ADC #0
.39541c	85 36		sta $0356	                STA DOS_DST_PTR+2
.39541e	22 14 51 39	jsl $395114	                JSL IF_READ                 ; Yes: load the next cluster
.395422	b0 c5		bcs $3953e9	                BCS copy_cluster            ; And start copying it
.395424					close_file
.395424	82 18 01	brl $39553f	ret_success     BRL IF_SUCCESS
.395427					IF_NULLBUFFER
.395427	5a		phy		                PHY
.395428	8b		phb		                PHB
.395429	0b		phd		                PHD
.39542a	08		php		                PHP
.39542b	48		pha		                PHA             ; begin setdbr macro
.39542c	08		php		                PHP
.39542d	e2 20		sep #$20	                SEP #$20        ; set A short
.39542f	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395431	48		pha		                PHA
.395432	ab		plb		                PLB
.395433	28		plp		                PLP
.395434	68		pla		                PLA             ; end setdbr macro
.395435	48		pha		                PHA             ; begin setdp macro
.395436	08		php		                PHP
.395437	c2 20		rep #$20	                REP #$20        ; set A long
.395439	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39543c	5b		tcd		                TCD
.39543d	28		plp		                PLP
.39543e	68		pla		                PLA             ; end setdp macro
.39543f	c2 30		rep #$30	                REP #$30        ; set A&X long
.395441	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.395444	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395446	85 28		sta $0348	                STA DOS_TEMP
.395448	c8		iny		                INY
.395449	c8		iny		                INY
.39544a	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39544c	85 2a		sta $034a	                STA DOS_TEMP+2
.39544e	a0 00 00	ldy #$0000	                LDY #0
.395451	a9 00 00	lda #$0000	                LDA #0
.395454	97 28		sta [$0348],y	loop            STA [DOS_TEMP],Y
.395456	c8		iny		                INY
.395457	c8		iny		                INY
.395458	cc 0e e0	cpy $38e00e	                CPY CLUSTER_SIZE
.39545b	d0 f7		bne $395454	                BNE loop
.39545d	28		plp		                PLP
.39545e	2b		pld		                PLD
.39545f	ab		plb		                PLB
.395460	7a		ply		                PLY
.395461	6b		rtl		                RTL
.395462					IF_COPY2BUFF
.395462	5a		phy		                PHY
.395463	8b		phb		                PHB
.395464	0b		phd		                PHD
.395465	08		php		                PHP
.395466	48		pha		                PHA             ; begin setdbr macro
.395467	08		php		                PHP
.395468	e2 20		sep #$20	                SEP #$20        ; set A short
.39546a	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39546c	48		pha		                PHA
.39546d	ab		plb		                PLB
.39546e	28		plp		                PLP
.39546f	68		pla		                PLA             ; end setdbr macro
.395470	48		pha		                PHA             ; begin setdp macro
.395471	08		php		                PHP
.395472	c2 20		rep #$20	                REP #$20        ; set A long
.395474	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395477	5b		tcd		                TCD
.395478	28		plp		                PLP
.395479	68		pla		                PLA             ; end setdp macro
.39547a	c2 30		rep #$30	                REP #$30        ; set A&X long
.39547c	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.39547f	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395481	85 28		sta $0348	                STA DOS_TEMP
.395483	c8		iny		                INY
.395484	c8		iny		                INY
.395485	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395487	85 2a		sta $034a	                STA DOS_TEMP+2
.395489	a0 00 00	ldy #$0000	                LDY #0
.39548c					copy_loop
.39548c	e2 20		sep #$20	                SEP #$20        ; set A short
.39548e	a7 30		lda [$0350]	                LDA [DOS_SRC_PTR]           ; Copy a byte
.395490	97 28		sta [$0348],y	                STA [DOS_TEMP],Y
.395492	c2 20		rep #$20	                REP #$20        ; set A long
.395494	c8		iny		                INY                         ; Count it
.395495	cc 0e e0	cpy $38e00e	                CPY CLUSTER_SIZE            ; Have we reached the limit?
.395498	f0 14		beq $3954ae	                BEQ done                    ; Yes: we're done
.39549a	a5 30		lda $0350	                LDA DOS_SRC_PTR             ; Check if we copied the last byte
.39549c	c5 38		cmp $0358	                CMP DOS_END_PTR
.39549e	d0 06		bne $3954a6	                BNE next_byte
.3954a0	a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.3954a2	c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.3954a4	f0 08		beq $3954ae	                BEQ done                    ; Yes: we're done
.3954a6	e6 30		inc $0350	next_byte       INC DOS_SRC_PTR             ; No: advance the source pointer
.3954a8	d0 e2		bne $39548c	                BNE copy_loop
.3954aa	e6 32		inc $0352	                INC DOS_SRC_PTR+2
.3954ac	80 de		bra $39548c	                BRA copy_loop               ; And try this next byte
.3954ae	28		plp		done            PLP
.3954af	2b		pld		                PLD
.3954b0	ab		plb		                PLB
.3954b1	7a		ply		                PLY
.3954b2	6b		rtl		                RTL
.3954b3					IF_SAVE
.3954b3	da		phx		                PHX
.3954b4	5a		phy		                PHY
.3954b5	0b		phd		                PHD
.3954b6	8b		phb		                PHB
.3954b7	08		php		                PHP
.3954b8	48		pha		                PHA             ; begin setdbr macro
.3954b9	08		php		                PHP
.3954ba	e2 20		sep #$20	                SEP #$20        ; set A short
.3954bc	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3954be	48		pha		                PHA
.3954bf	ab		plb		                PLB
.3954c0	28		plp		                PLP
.3954c1	68		pla		                PLA             ; end setdbr macro
.3954c2	48		pha		                PHA             ; begin setdp macro
.3954c3	08		php		                PHP
.3954c4	c2 20		rep #$20	                REP #$20        ; set A long
.3954c6	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3954c9	5b		tcd		                TCD
.3954ca	28		plp		                PLP
.3954cb	68		pla		                PLA             ; end setdp macro
.3954cc	c2 30		rep #$30	                REP #$30        ; set A&X long
.3954ce	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE := DOS_END_PTR - DOS_SRC_PTR
.3954d1	38		sec		                SEC
.3954d2	a5 38		lda $0358	                LDA DOS_END_PTR
.3954d4	e5 30		sbc $0350	                SBC DOS_SRC_PTR
.3954d6	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3954d8	c8		iny		                INY
.3954d9	c8		iny		                INY
.3954da	a5 3a		lda $035a	                LDA DOS_END_PTR+2
.3954dc	e5 32		sbc $0352	                SBC DOS_SRC_PTR+2
.3954de	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3954e0	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE++
.3954e3	18		clc		                CLC
.3954e4	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3954e6	69 01 00	adc #$0001	                ADC #1
.3954e9	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3954eb	90 09		bcc $3954f6	                BCC first_block
.3954ed	c8		iny		                INY
.3954ee	c8		iny		                INY
.3954ef	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3954f1	69 00 00	adc #$0000	                ADC #0
.3954f4	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3954f6	22 27 54 39	jsl $395427	first_block     JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.3954fa	22 62 54 39	jsl $395462	                JSL IF_COPY2BUFF        ; Copy first (at most) 512 bytes of data to FD buffer
.3954fe	22 a1 50 39	jsl $3950a1	                JSL IF_CREATE           ; Create file.
.395502	b0 03		bcs $395507	                BCS check_for_end
.395504	82 31 00	brl $395538	                BRL IF_PASSFAILURE      ; If we couldn't create the file, pass the failure up
.395507	a5 30		lda $0350	check_for_end   LDA DOS_SRC_PTR         ; Check if we copied the last byte
.395509	c5 38		cmp $0358	                CMP DOS_END_PTR
.39550b	d0 06		bne $395513	                BNE next_block
.39550d	a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.39550f	c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.395511	f0 1d		beq $395530	                BEQ done                ; Yes: we're done
.395513	22 27 54 39	jsl $395427	next_block      JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.395517	22 62 54 39	jsl $395462	                JSL IF_COPY2BUFF        ; Copy next (at most) 512 bytes of data to FD buffer
.39551b	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER   ; Make sure the CLUSTER is 0 to force an append
.39551e	a9 00 00	lda #$0000	                LDA #0
.395521	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395523	c8		iny		                INY
.395524	c8		iny		                INY
.395525	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395527	22 68 51 39	jsl $395168	                JSL IF_WRITE            ; Append to the file
.39552b	b0 da		bcs $395507	                BCS check_for_end       ; And try again
.39552d	82 08 00	brl $395538	                BRL IF_PASSFAILURE      ; If we couldn't update the file, pass the failure up
.395530	5c 3f 55 39	jmp $39553f	done            JML IF_SUCCESS
.395534					IF_FAILURE
.395534	e2 20		sep #$20	                SEP #$20        ; set A short
.395536	85 0e		sta $032e	                STA DOS_STATUS
.395538	28		plp		IF_PASSFAILURE  PLP
.395539	18		clc		                CLC
.39553a	ab		plb		                PLB
.39553b	2b		pld		                PLD
.39553c	7a		ply		                PLY
.39553d	fa		plx		                PLX
.39553e	6b		rtl		                RTL
.39553f					IF_SUCCESS
.39553f	e2 20		sep #$20	                SEP #$20        ; set A short
.395541	64 00		stz $0320	                STZ BIOS_STATUS
.395543	64 0e		stz $032e	                STZ DOS_STATUS
.395545	28		plp		                PLP
.395546	38		sec		                SEC
.395547	ab		plb		                PLB
.395548	2b		pld		                PLD
.395549	7a		ply		                PLY
.39554a	fa		plx		                PLX
.39554b	6b		rtl		                RTL
.39554c					IF_RUN
.39554c	da		phx		                PHX
.39554d	5a		phy		                PHY
.39554e	0b		phd		                PHD
.39554f	8b		phb		                PHB
.395550	08		php		                PHP
.395551	48		pha		                PHA             ; begin setdbr macro
.395552	08		php		                PHP
.395553	e2 20		sep #$20	                SEP #$20        ; set A short
.395555	a9 00		lda #$00	                LDA #0
.395557	48		pha		                PHA
.395558	ab		plb		                PLB
.395559	28		plp		                PLP
.39555a	68		pla		                PLA             ; end setdbr macro
.39555b	48		pha		                PHA             ; begin setdp macro
.39555c	08		php		                PHP
.39555d	c2 20		rep #$20	                REP #$20        ; set A long
.39555f	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395562	5b		tcd		                TCD
.395563	28		plp		                PLP
.395564	68		pla		                PLA             ; end setdp macro
.395565	e2 20		sep #$20	                SEP #$20        ; set A short
.395567	c2 10		rep #$10	                REP #$10        ; set X long
.395569	a9 00		lda #$00	                LDA #0                                  ; Zero out the file descriptor
.39556b	a2 00 00	ldx #$0000	                LDX #0
.39556e	9f 00 eb 38	sta $38eb00,x	clr_fd_loop     STA @l DOS_SPARE_FD,X
.395572	e8		inx		                INX
.395573	e0 1e 00	cpx #$001e	                CPX #SIZE(FILEDESC)
.395576	d0 f6		bne $39556e	                BNE clr_fd_loop
.395578	c2 20		rep #$20	                REP #$20        ; set A long
.39557a	a9 00 e9	lda #$e900	                LDA #<>DOS_SPARE_SECTOR                 ; Set the buffer for the file descriptor
.39557d	8f 0e eb 38	sta $38eb0e	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER
.395581	a9 38 00	lda #$0038	                LDA #`DOS_SPARE_SECTOR
.395584	8f 10 eb 38	sta $38eb10	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER+2
.395588	a5 40		lda $0360	                LDA DOS_RUN_PARAM                        ; Set the path for the file descriptor
.39558a	8f 02 eb 38	sta $38eb02	                STA @l DOS_SPARE_FD+FILEDESC.PATH
.39558e	a5 42		lda $0362	                LDA DOS_RUN_PARAM+2
.395590	8f 04 eb 38	sta $38eb04	                STA @l DOS_SPARE_FD+FILEDESC.PATH+2
.395594	a9 00 00	lda #$0000	                LDA #0                                  ; Clear the run pointer
.395597	85 3c		sta $035c	                STA DOS_RUN_PTR                         ; This is used to check that we loaded an executable binary
.395599	85 3e		sta $035e	                STA DOS_RUN_PTR+2
.39559b	a9 00 eb	lda #$eb00	                LDA #<>DOS_SPARE_FD
.39559e	85 20		sta $0340	                STA DOS_FD_PTR
.3955a0	a9 38 00	lda #$0038	                LDA #`DOS_SPARE_FD
.3955a3	85 22		sta $0342	                STA DOS_FD_PTR+2
.3955a5	a9 ff ff	lda #$ffff	                LDA #$FFFF                              ; We want to load to the address provided by the file
.3955a8	8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.3955ac	8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.3955b0	22 18 11 38	jsl $381118	                JSL F_LOAD                              ; Try to load the file
.3955b4	b0 14		bcs $3955ca	                BCS try_execute
.3955b6	82 7f ff	brl $395538	                BRL IF_PASSFAILURE                      ; On error: pass failure up the chain
.3955b9					chk_execute
.3955b9	c2 20		rep #$20	                REP #$20        ; set A long
.3955bb	a5 3c		lda $035c	                LDA DOS_RUN_PTR                         ; Check to see if we got a startup address back
.3955bd	d0 0b		bne $3955ca	                BNE try_execute                         ; If so: call it
.3955bf	a5 3e		lda $035e	                LDA DOS_RUN_PTR+2
.3955c1	d0 07		bne $3955ca	                BNE try_execute
.3955c3	e2 20		sep #$20	                SEP #$20        ; set A short
.3955c5	a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC                     ; If not: return an error that it's not executable
.3955c7	82 6a ff	brl $395534	                BRL IF_FAILURE
.3955ca					try_execute
.3955ca	e2 20		sep #$20	                SEP #$20        ; set A short
.3955cc	a9 5c		lda #$5c	                LDA #$5C                                ; Write a JML opcode
.3955ce	85 3b		sta $035b	                STA DOS_RUN_PTR-1
.3955d0	22 5b 03 00	jsl $00035b	                JSL DOS_RUN_PTR-1                       ; And call to it
.3955d4	82 68 ff	brl $39553f	                BRL IF_SUCCESS                          ; Return success

;******  Return to file: src\kernel.asm


;******  Processing file: src\uart.asm

=$af13f8				UART1_BASE = $AF13F8        ; Base address for UART 1 (COM1)
=$af12f8				UART2_BASE = $AF12F8        ; Base address for UART 2 (COM2)
=$00					UART_TRHB = $00             ; Transmit/Receive Hold Buffer
=$00					UART_DLL = UART_TRHB        ; Divisor Latch Low Byte
=$01					UART_DLH = $01              ; Divisor Latch High Byte
=$01					UART_IER = UART_DLH         ; Interupt Enable Register
=$02					UART_FCR = $02              ; FIFO Control Register
=$02					UART_IIR = UART_FCR         ; Interupt Indentification Register
=$03					UART_LCR = $03              ; Line Control Register
=$04					UART_MCR = $04              ; Modem Control REgister
=$05					UART_LSR = $05              ; Line Status Register
=$06					UART_MSR = $06              ; Modem Status Register
=$07					UART_SR = $07               ; Scratch Register
=$20					UINT_LOW_POWER = $20        ; Enable Low Power Mode (16750)
=$10					UINT_SLEEP_MODE = $10       ; Enable Sleep Mode (16750)
=$08					UINT_MODEM_STATUS = $08     ; Enable Modem Status Interrupt
=$04					UINT_LINE_STATUS = $04      ; Enable Receiver Line Status Interupt
=$02					UINT_THR_EMPTY = $02        ; Enable Transmit Holding Register Empty interrupt
=$01					UINT_DATA_AVAIL = $01       ; Enable Recieve Data Available interupt
=$80					IIR_FIFO_ENABLED = $80      ; FIFO is enabled
=$40					IIR_FIFO_NONFUNC = $40      ; FIFO is not functioning
=$20					IIR_FIFO_64BYTE = $20       ; 64 byte FIFO enabled (16750)
=$00					IIR_MODEM_STATUS = $00      ; Modem Status Interrupt
=$02					IIR_THR_EMPTY = $02         ; Transmit Holding Register Empty Interrupt
=$04					IIR_DATA_AVAIL = $04        ; Data Available Interrupt
=$06					IIR_LINE_STATUS = $06       ; Line Status Interrupt
=$0c					IIR_TIMEOUT = $0C           ; Time-out Interrupt (16550 and later)
=$01					IIR_INTERRUPT_PENDING = $01 ; Interrupt Pending Flag
=$80					LCR_DLB = $80               ; Divisor Latch Access Bit
=$60					LCR_SBE = $60               ; Set Break Enable
=$00					LCR_PARITY_NONE = $00       ; Parity: None
=$08					LCR_PARITY_ODD = $08        ; Parity: Odd
=$18					LCR_PARITY_EVEN = $18       ; Parity: Even
=$28					LCR_PARITY_MARK = $28       ; Parity: Mark
=$38					LCR_PARITY_SPACE = $38      ; Parity: Space
=$00					LCR_STOPBIT_1 = $00         ; One Stop Bit
=$04					LCR_STOPBIT_2 = $04         ; 1.5 or 2 Stop Bits
=$00					LCR_DATABITS_5 = $00        ; Data Bits: 5
=$01					LCR_DATABITS_6 = $01        ; Data Bits: 6
=$02					LCR_DATABITS_7 = $02        ; Data Bits: 7
=$03					LCR_DATABITS_8 = $03        ; Data Bits: 8
=$80					LSR_ERR_RECIEVE = $80       ; Error in Received FIFO
=$40					LSR_XMIT_DONE = $40         ; All data has been transmitted
=$20					LSR_XMIT_EMPTY = $20        ; Empty transmit holding register
=$10					LSR_BREAK_INT = $10         ; Break interrupt
=$08					LSR_ERR_FRAME = $08         ; Framing error
=$04					LSR_ERR_PARITY = $04        ; Parity error
=$02					LSR_ERR_OVERRUN = $02       ; Overrun error
=$01					LSR_DATA_AVAIL = $01        ; Data is ready in the receive buffer
=384					UART_300 = 384              ; Code for 300 bps
=96					UART_1200 = 96              ; Code for 1200 bps
=48					UART_2400 = 48              ; Code for 2400 bps
=24					UART_4800 = 24              ; Code for 4800 bps
=12					UART_9600 = 12              ; Code for 9600 bps
=6					UART_19200 = 6              ; Code for 19200 bps
=3					UART_38400 = 3              ; Code for 28400 bps
=2					UART_57600 = 2              ; Code for 57600 bps
=1					UART_115200 = 1             ; Code for 115200 bps
.3955d7					UART_SELECT
.3955d7	08		php		            PHP
.3955d8	c2 20		rep #$20	                REP #$20        ; set A long
.3955da	c9 02 00	cmp #$0002	            CMP #2
.3955dd	f0 07		beq $3955e6	            BEQ is_COM2
.3955df	c2 20		rep #$20	                REP #$20        ; set A long
.3955e1	a9 f8 13	lda #$13f8	            LDA #<>UART1_BASE
.3955e4	80 05		bra $3955eb	            BRA setaddr
.3955e6					is_COM2
.3955e6	c2 20		rep #$20	                REP #$20        ; set A long
.3955e8	a9 f8 12	lda #$12f8	            LDA #<>UART2_BASE
.3955eb	8f 00 07 00	sta $000700	setaddr     STA @lCURRUART
.3955ef	e2 20		sep #$20	                SEP #$20        ; set A short
.3955f1	a9 af		lda #$af	            LDA #`UART1_BASE
.3955f3	8f 02 07 00	sta $000702	            STA @lCURRUART+2
.3955f7	28		plp		            PLP
.3955f8	6b		rtl		            RTL
.3955f9					UART_SETBPS
.3955f9	08		php		            PHP
.3955fa	0b		phd		            PHD
.3955fb	48		pha		                PHA             ; begin setdp macro
.3955fc	08		php		                PHP
.3955fd	c2 20		rep #$20	                REP #$20        ; set A long
.3955ff	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395602	5b		tcd		                TCD
.395603	28		plp		                PLP
.395604	68		pla		                PLA             ; end setdp macro
.395605	c2 30		rep #$30	                REP #$30        ; set A&X long
.395607	48		pha		            PHA
.395608	e2 20		sep #$20	                SEP #$20        ; set A short
.39560a	a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Enable divisor latch
.39560d	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.39560f	09 80		ora #$80	            ORA #LCR_DLB
.395611	97 00		sta [$0700],y	            STA [CURRUART],Y
.395613	c2 20		rep #$20	                REP #$20        ; set A long
.395615	68		pla		            PLA
.395616	a0 00 00	ldy #$0000	            LDY #UART_DLL
.395619	97 00		sta [$0700],y	            STA [CURRUART],Y    ; Save the divisor to the UART
.39561b	e2 20		sep #$20	                SEP #$20        ; set A short
.39561d	a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Disable divisor latch
.395620	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.395622	49 80		eor #$80	            EOR #LCR_DLB
.395624	97 00		sta [$0700],y	            STA [CURRUART],Y
.395626	2b		pld		            PLD
.395627	28		plp		            PLP
.395628	6b		rtl		            RTL
.395629					UART_SETLCR
.395629	08		php		            PHP
.39562a	0b		phd		            PHD
.39562b	48		pha		                PHA             ; begin setdp macro
.39562c	08		php		                PHP
.39562d	c2 20		rep #$20	                REP #$20        ; set A long
.39562f	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395632	5b		tcd		                TCD
.395633	28		plp		                PLP
.395634	68		pla		                PLA             ; end setdp macro
.395635	e2 20		sep #$20	                SEP #$20        ; set A short
.395637	c2 10		rep #$10	                REP #$10        ; set X long
.395639	29 7f		and #$7f	            AND #$7F            ; We don't want to alter divisor latch
.39563b	a0 03 00	ldy #$0003	            LDY #UART_LCR
.39563e	97 00		sta [$0700],y	            STA [CURRUART],Y
.395640	2b		pld		            PLD
.395641	28		plp		            PLP
.395642	6b		rtl		            RTL
.395643					UART_INIT
.395643	08		php		            PHP
.395644	0b		phd		            PHD
.395645	c2 30		rep #$30	                REP #$30        ; set A&X long
.395647	48		pha		                PHA             ; begin setdp macro
.395648	08		php		                PHP
.395649	c2 20		rep #$20	                REP #$20        ; set A long
.39564b	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.39564e	5b		tcd		                TCD
.39564f	28		plp		                PLP
.395650	68		pla		                PLA             ; end setdp macro
.395651	a9 01 00	lda #$0001	            LDA #UART_115200
.395654	22 f9 55 39	jsl $3955f9	            JSL UART_SETBPS
.395658	e2 20		sep #$20	                SEP #$20        ; set A short
.39565a	a9 03		lda #$03	            LDA #LCR_PARITY_NONE | LCR_STOPBIT_1 | LCR_DATABITS_8
.39565c	22 29 56 39	jsl $395629	            JSL UART_SETLCR
.395660	a9 e1		lda #$e1	            LDA #%11100001
.395662	a0 02 00	ldy #$0002	            LDY #UART_FCR
.395665	97 00		sta [$0700],y	            STA [CURRUART],Y
.395667	2b		pld		            PLD
.395668	28		plp		            PLP
.395669	6b		rtl		            RTL
.39566a					UART_HASBYT
.39566a	08		php		            PHP
.39566b	0b		phd		            PHD
.39566c	c2 30		rep #$30	                REP #$30        ; set A&X long
.39566e	48		pha		                PHA             ; begin setdp macro
.39566f	08		php		                PHP
.395670	c2 20		rep #$20	                REP #$20        ; set A long
.395672	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395675	5b		tcd		                TCD
.395676	28		plp		                PLP
.395677	68		pla		                PLA             ; end setdp macro
.395678	e2 20		sep #$20	                SEP #$20        ; set A short
.39567a	a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.39567d	b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.39567f	29 01		and #$01	            AND #LSR_DATA_AVAIL
.395681	d0 04		bne $395687	            BNE ret_true            ; If flag is set, return true
.395683	2b		pld		ret_false   PLD                     ; Return false
.395684	28		plp		            PLP
.395685	18		clc		            CLC
.395686	6b		rtl		            RTL
.395687	2b		pld		ret_true    PLD                     ; Return true
.395688	28		plp		            PLP
.395689	38		sec		            SEC
.39568a	6b		rtl		            RTL
.39568b					UART_GETC
.39568b	08		php		            PHP
.39568c	0b		phd		            PHD
.39568d	c2 30		rep #$30	                REP #$30        ; set A&X long
.39568f	48		pha		                PHA             ; begin setdp macro
.395690	08		php		                PHP
.395691	c2 20		rep #$20	                REP #$20        ; set A long
.395693	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395696	5b		tcd		                TCD
.395697	28		plp		                PLP
.395698	68		pla		                PLA             ; end setdp macro
.395699	e2 20		sep #$20	                SEP #$20        ; set A short
.39569b	a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.39569e	b7 00		lda [$0700],y	wait_getc   LDA [CURRUART],Y
.3956a0	29 01		and #$01	            AND #LSR_DATA_AVAIL
.3956a2	f0 fa		beq $39569e	            BEQ wait_getc           ; If the flag is clear, wait
.3956a4	a0 00 00	ldy #$0000	            LDY #UART_TRHB          ; Get the byte from the receive FIFO
.3956a7	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.3956a9	2b		pld		            PLD
.3956aa	28		plp		            PLP
.3956ab	6b		rtl		            RTL
.3956ac					UART_PUTC
.3956ac	08		php		            PHP
.3956ad	0b		phd		            PHD
.3956ae	c2 30		rep #$30	                REP #$30        ; set A&X long
.3956b0	48		pha		                PHA             ; begin setdp macro
.3956b1	08		php		                PHP
.3956b2	c2 20		rep #$20	                REP #$20        ; set A long
.3956b4	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.3956b7	5b		tcd		                TCD
.3956b8	28		plp		                PLP
.3956b9	68		pla		                PLA             ; end setdp macro
.3956ba	e2 20		sep #$20	                SEP #$20        ; set A short
.3956bc	48		pha		            PHA                     ; Wait for the transmit FIFO to free up
.3956bd	a0 05 00	ldy #$0005	            LDY #UART_LSR
.3956c0	b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.3956c2	29 20		and #$20	            AND #LSR_XMIT_EMPTY
.3956c4	f0 fa		beq $3956c0	            BEQ wait_putc
.3956c6	68		pla		            PLA
.3956c7	a0 00 00	ldy #$0000	            LDY #UART_TRHB
.3956ca	97 00		sta [$0700],y	            STA [CURRUART],Y
.3956cc	2b		pld		            PLD
.3956cd	28		plp		            PLP
.3956ce	6b		rtl		            RTL
.3956cf					UART_PUTS
.3956cf	08		php		            PHP
.3956d0	e2 20		sep #$20	                SEP #$20        ; set A short
.3956d2	bd 00 00	lda $0000,x	put_loop    LDA #0,B,X
.3956d5	f0 07		beq $3956de	            BEQ done
.3956d7	22 ac 56 39	jsl $3956ac	            JSL UART_PUTC
.3956db	e8		inx		            INX
.3956dc	80 f4		bra $3956d2	            BRA put_loop
.3956de	28		plp		done        PLP
.3956df	6b		rtl		            RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\joystick.asm

.3956e0					JOYSTICK_SET_NES_MODE
.3956e0	e2 20		sep #$20	                SEP #$20        ; set A short
.3956e2	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.3956e6	29 fb		and #$fb	          AND #~NES_SNES_JOY  ; 0 = NES (8 bit shift)
.3956e8	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.3956ec	6b		rtl		          RTL
.3956ed					JOYSTICK_SET_SNES_MODE
.3956ed	e2 20		sep #$20	                SEP #$20        ; set A short
.3956ef	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.3956f3	29 fb		and #$fb	          AND #~NES_SNES_JOY
.3956f5	09 04		ora #$04	          ORA #NES_SNES_JOY   ; 1 = SNES (12 Bit Shift)
.3956f7	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.3956fb	6b		rtl		          RTL
.3956fc					JOYSTICK_ENABLE_NES_SNES_PORT0
.3956fc	e2 20		sep #$20	                SEP #$20        ; set A short
.3956fe	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395702	29 fe		and #$fe	          AND #~NES_SNES_EN0
.395704	09 01		ora #$01	          ORA #NES_SNES_EN0
.395706	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.39570a	6b		rtl		          RTL
.39570b					JOYSTICK_ENABLE_NES_SNES_PORT1
.39570b	e2 20		sep #$20	                SEP #$20        ; set A short
.39570d	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395711	29 fd		and #$fd	          AND #~NES_SNES_EN1
.395713	09 02		ora #$02	          ORA #NES_SNES_EN1
.395715	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395719	6b		rtl		          RTL
.39571a					JOYSTICK_DISABLE_NES_SNES_PORT0
.39571a	e2 20		sep #$20	                SEP #$20        ; set A short
.39571c	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395720	29 fe		and #$fe	          AND #~NES_SNES_EN0
.395722	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395726	6b		rtl		          RTL
.395727					JOYSTICK_DISABLE_NES_SNES_PORT1
.395727	e2 20		sep #$20	                SEP #$20        ; set A short
.395729	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.39572d	29 fd		and #$fd	          AND #~NES_SNES_EN1
.39572f	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395733	6b		rtl		          RTL
.395734					JOYSTICK_NES_SNES_TRIG_WITH_POLL
.395734	e2 20		sep #$20	                SEP #$20        ; set A short
.395736	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.39573a	29 03		and #$03	          AND #(NES_SNES_EN0 | NES_SNES_EN1)
.39573c	c9 00		cmp #$00	          CMP #$00
.39573e	f0 14		beq $395754	          BEQ END_OF_JOYSTICK_POLL
.395740	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395744	09 80		ora #$80	          ORA #NES_SNES_TRIG   ; Set to 1 (Will auto Clear)
.395746	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.39574a					JOYSTICK_POLLING_ISNOTOVER
.39574a	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE ;
.39574e	29 40		and #$40	          AND #NES_SNES_DONE
.395750	c9 40		cmp #$40	          CMP #NES_SNES_DONE
.395752	d0 f6		bne $39574a	          BNE JOYSTICK_POLLING_ISNOTOVER
.395754					END_OF_JOYSTICK_POLL
.395754	6b		rtl		          RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\sdc_library.asm

.395755					SDC_TEST
.395755	8b		phb		                PHB
.395756	0b		phd		                PHD
.395757	08		php		                PHP
.395758	48		pha		                PHA             ; begin setdbr macro
.395759	08		php		                PHP
.39575a	e2 20		sep #$20	                SEP #$20        ; set A short
.39575c	a9 00		lda #$00	                LDA #0
.39575e	48		pha		                PHA
.39575f	ab		plb		                PLB
.395760	28		plp		                PLP
.395761	68		pla		                PLA             ; end setdbr macro
.395762	48		pha		                PHA             ; begin setdp macro
.395763	08		php		                PHP
.395764	c2 20		rep #$20	                REP #$20        ; set A long
.395766	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395769	5b		tcd		                TCD
.39576a	28		plp		                PLP
.39576b	68		pla		                PLA             ; end setdp macro
.39576c	e2 20		sep #$20	                SEP #$20        ; set A short
.39576e	a9 f0		lda #$f0	                LDA #$F0                            ; Set white on black background
.395770	8d 1e 00	sta $001e	                STA @w CURCOLOR
.395773	22 a8 10 38	jsl $3810a8	                JSL CLRSCREEN
.395777	22 a0 10 38	jsl $3810a0	                JSL CSRHOME
.39577b	22 bb 57 39	jsl $3957bb	                JSL SDC_INIT                        ; Attempt to initilize the SDC interface
.39577f	b0 03		bcs $395784	                BCS init_ok
.395781	82 15 00	brl $395799	                BRL done
.395784	a9 02		lda #$02	init_ok         LDA #BIOS_DEV_SD
.395786	85 01		sta $0321	                STA BIOS_DEV
.395788	22 01 42 39	jsl $394201	                JSL DOS_MOUNT                       ; Attempt to mount the SDC
.39578c	b0 03		bcs $395791	                BCS mount_ok
.39578e	82 08 00	brl $395799	                BRL done
.395791	22 d0 51 39	jsl $3951d0	mount_ok        JSL IF_DIROPEN
.395795	b0 02		bcs $395799	                BCS all_ok
.395797	80 00		bra $395799	                BRA done
.395799					all_ok
.395799	22 6c 10 38	jsl $38106c	done            JSL PRINTCR
.39579d	28		plp		                PLP
.39579e	2b		pld		                PLD
.39579f	ab		plb		                PLB
.3957a0	6b		rtl		                RTL
.3957a1					SDC_WAITBUSY
.3957a1	08		php		                PHP
.3957a2	e2 20		sep #$20	                SEP #$20        ; set A short
.3957a4	af 04 ea af	lda $afea04	wait_xact       LDA @l SDC_TRANS_STATUS_REG         ; Wait for the transaction to complete
.3957a8	29 01		and #$01	                AND #SDC_TRANS_BUSY
.3957aa	c9 01		cmp #$01	                CMP #SDC_TRANS_BUSY
.3957ac	f0 f6		beq $3957a4	                BEQ wait_xact
.3957ae	28		plp		                PLP
.3957af	6b		rtl		                RTL
.3957b0					SDC_RESET
.3957b0	08		php		                PHP
.3957b1	e2 20		sep #$20	                SEP #$20        ; set A short
.3957b3	a9 01		lda #$01	                LDA #1
.3957b5	8f 01 ea af	sta $afea01	                STA @l SDC_CONTROL_REG
.3957b9	28		plp		                PLP
.3957ba	6b		rtl		                RTL
.3957bb	0b		phd		SDC_INIT        PHD
.3957bc	8b		phb		                PHB
.3957bd	08		php		                PHP
.3957be	48		pha		                PHA             ; begin setdbr macro
.3957bf	08		php		                PHP
.3957c0	e2 20		sep #$20	                SEP #$20        ; set A short
.3957c2	a9 00		lda #$00	                LDA #0
.3957c4	48		pha		                PHA
.3957c5	ab		plb		                PLB
.3957c6	28		plp		                PLP
.3957c7	68		pla		                PLA             ; end setdbr macro
.3957c8	48		pha		                PHA             ; begin setdp macro
.3957c9	08		php		                PHP
.3957ca	c2 20		rep #$20	                REP #$20        ; set A long
.3957cc	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3957cf	5b		tcd		                TCD
.3957d0	28		plp		                PLP
.3957d1	68		pla		                PLA             ; end setdp macro
.3957d2	e2 20		sep #$20	                SEP #$20        ; set A short
.3957d4	a9 01		lda #$01	                LDA #SDC_TRANS_INIT_SD
.3957d6	8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG           ; Set Init SD
.3957da	a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.3957dc	8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.3957e0	22 a1 57 39	jsl $3957a1	                JSL SDC_WAITBUSY                    ; Wait for initialization to complete
.3957e4	af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.3957e8	d0 07		bne $3957f1	                BNE ret_error                       ; Is there one? Process the error
.3957ea	64 00		stz $0320	ret_success     STZ BIOS_STATUS
.3957ec	28		plp		                PLP
.3957ed	ab		plb		                PLB
.3957ee	2b		pld		                PLD
.3957ef	38		sec		                SEC
.3957f0	6b		rtl		                RTL
.3957f1	8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.3957f4	a9 8b		lda #$8b	                LDA #BIOS_ERR_NOTINIT
.3957f6	85 00		sta $0320	                STA BIOS_STATUS
.3957f8	28		plp		                PLP
.3957f9	ab		plb		                PLB
.3957fa	2b		pld		                PLD
.3957fb	18		clc		                CLC
.3957fc	6b		rtl		                RTL
.3957fd					SDC_GETBLOCK
.3957fd	0b		phd		                PHD
.3957fe	8b		phb		                PHB
.3957ff	08		php		                PHP
.395800	48		pha		                PHA             ; begin setdbr macro
.395801	08		php		                PHP
.395802	e2 20		sep #$20	                SEP #$20        ; set A short
.395804	a9 00		lda #$00	                LDA #0
.395806	48		pha		                PHA
.395807	ab		plb		                PLB
.395808	28		plp		                PLP
.395809	68		pla		                PLA             ; end setdbr macro
.39580a	48		pha		                PHA             ; begin setdp macro
.39580b	08		php		                PHP
.39580c	c2 20		rep #$20	                REP #$20        ; set A long
.39580e	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395811	5b		tcd		                TCD
.395812	28		plp		                PLP
.395813	68		pla		                PLA             ; end setdp macro
.395814	e2 20		sep #$20	                SEP #$20        ; set A short
.395816	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.39581a	09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.39581c	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395820	a9 00		lda #$00	                LDA #0
.395822	8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.395826	a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to read
.395828	0a		asl a		                ASL A
.395829	8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.39582d	a5 03		lda $0323	                LDA BIOS_LBA+1
.39582f	2a		rol a		                ROL A
.395830	8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.395834	a5 04		lda $0324	                LDA BIOS_LBA+2
.395836	2a		rol a		                ROL A
.395837	8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.39583b	a9 02		lda #$02	                LDA #SDC_TRANS_READ_BLK             ; Set the transaction to READ
.39583d	8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.395841	a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.395843	8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.395847	22 a1 57 39	jsl $3957a1	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.39584b	af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.39584f	d0 36		bne $395887	                BNE ret_error                       ; Is there one? Process the error
.395851	e2 20		sep #$20	                SEP #$20        ; set A short
.395853	af 13 ea af	lda $afea13	                LDA @l SDC_RX_FIFO_DATA_CNT_LO      ; Record the number of bytes read
.395857	85 0a		sta $032a	                STA BIOS_FIFO_COUNT
.395859	af 12 ea af	lda $afea12	                LDA @l SDC_RX_FIFO_DATA_CNT_HI
.39585d	85 0b		sta $032b	                STA BIOS_FIFO_COUNT+1
.39585f	c2 10		rep #$10	                REP #$10        ; set X long
.395861	a0 00 00	ldy #$0000	                LDY #0
.395864	af 10 ea af	lda $afea10	loop_rd         LDA @l SDC_RX_FIFO_DATA_REG         ; Get the byte...
.395868	97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y               ; Save it to the buffer
.39586a	c8		iny		                INY                                 ; Advance to the next byte
.39586b	c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.39586e	d0 f4		bne $395864	                BNE loop_rd                         ; No: keep reading
.395870	af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395874	d0 11		bne $395887	                BNE ret_error                       ; Is there one? Process the error
.395876	64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.395878	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.39587c	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.39587e	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395882	28		plp		                PLP
.395883	ab		plb		                PLB
.395884	2b		pld		                PLD
.395885	38		sec		                SEC
.395886	6b		rtl		                RTL
.395887	8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.39588a	a9 82		lda #$82	                LDA #BIOS_ERR_READ
.39588c	85 00		sta $0320	                STA BIOS_STATUS
.39588e	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395892	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395894	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395898	28		plp		                PLP
.395899	ab		plb		                PLB
.39589a	2b		pld		                PLD
.39589b	18		clc		                CLC
.39589c	6b		rtl		                RTL
.39589d					SDC_PUTBLOCK
.39589d	0b		phd		                PHD
.39589e	8b		phb		                PHB
.39589f	08		php		                PHP
.3958a0	48		pha		                PHA             ; begin setdbr macro
.3958a1	08		php		                PHP
.3958a2	e2 20		sep #$20	                SEP #$20        ; set A short
.3958a4	a9 00		lda #$00	                LDA #0
.3958a6	48		pha		                PHA
.3958a7	ab		plb		                PLB
.3958a8	28		plp		                PLP
.3958a9	68		pla		                PLA             ; end setdbr macro
.3958aa	48		pha		                PHA             ; begin setdp macro
.3958ab	08		php		                PHP
.3958ac	c2 20		rep #$20	                REP #$20        ; set A long
.3958ae	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3958b1	5b		tcd		                TCD
.3958b2	28		plp		                PLP
.3958b3	68		pla		                PLA             ; end setdp macro
.3958b4	e2 20		sep #$20	                SEP #$20        ; set A short
.3958b6	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.3958ba	09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.3958bc	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.3958c0	c2 10		rep #$10	                REP #$10        ; set X long
.3958c2	a0 00 00	ldy #$0000	                LDY #0
.3958c5	b7 06		lda [$0326],y	loop_wr         LDA [BIOS_BUFF_PTR],Y               ; Get the byte...
.3958c7	8f 20 ea af	sta $afea20	                STA @l SDC_TX_FIFO_DATA_REG         ; Save it to the SDC
.3958cb	c8		iny		                INY                                 ; Advance to the next byte
.3958cc	c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.3958cf	d0 f4		bne $3958c5	                BNE loop_wr                         ; No: keep writing
.3958d1	a9 00		lda #$00	                LDA #0
.3958d3	8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.3958d7	a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to write
.3958d9	0a		asl a		                ASL A
.3958da	8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.3958de	a5 03		lda $0323	                LDA BIOS_LBA+1
.3958e0	2a		rol a		                ROL A
.3958e1	8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.3958e5	a5 04		lda $0324	                LDA BIOS_LBA+2
.3958e7	2a		rol a		                ROL A
.3958e8	8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.3958ec	a9 03		lda #$03	                LDA #SDC_TRANS_WRITE_BLK            ; Set the transaction to WRITE
.3958ee	8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.3958f2	a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.3958f4	8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.3958f8	22 a1 57 39	jsl $3957a1	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.3958fc	af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395900	d0 11		bne $395913	                BNE ret_error                       ; Is there one? Process the error
.395902	64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.395904	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395908	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.39590a	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.39590e	28		plp		                PLP
.39590f	ab		plb		                PLB
.395910	2b		pld		                PLD
.395911	38		sec		                SEC
.395912	6b		rtl		                RTL
.395913	8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.395916	a9 82		lda #$82	                LDA #BIOS_ERR_READ
.395918	85 00		sta $0320	                STA BIOS_STATUS
.39591a	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.39591e	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395920	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395924	28		plp		                PLP
.395925	ab		plb		                PLB
.395926	2b		pld		                PLD
.395927	18		clc		                CLC
.395928	6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\fdc_library.asm

=4295454				FDC_MOTOR_TIME = 4295454        ; Time to wait for the motor to come on: 300ms
=2147727				FDC_SEEK_TIME = 2147727         ; Time to wait for a seek to happen: 150ms
=900					FDC_MOTOR_ON_TIME = 60 * 15     ; Time (in SOF interrupt counts) for the motor to stay on: ~15s?
=30					FDC_WAIT_TIME = 30              ; Time (in SOF interrupt counts) to allow for a waiting loop to continue
=13					BPB_SECPERCLUS12_OFF = 13       ; Offset to sectors per cluster in a FAT12 boot sector
=17					BPB_ROOT_MAX_ENTRY12_OFF = 17   ; Offset to the maximum number of entries in the root directory in FAT12 boot sector
=22					BPB_SECPERFAT12_OFF = 22        ; Offset to sectors per FAT on a FAT12 boot sector
.395929					FDC_TEST
.395929	8b		phb		                    PHB
.39592a	0b		phd		                    PHD
.39592b	08		php		                    PHP
.39592c	48		pha		                PHA             ; begin setdbr macro
.39592d	08		php		                PHP
.39592e	e2 20		sep #$20	                SEP #$20        ; set A short
.395930	a9 00		lda #$00	                LDA #0
.395932	48		pha		                PHA
.395933	ab		plb		                PLB
.395934	28		plp		                PLP
.395935	68		pla		                PLA             ; end setdbr macro
.395936	48		pha		                PHA             ; begin setdp macro
.395937	08		php		                PHP
.395938	c2 20		rep #$20	                REP #$20        ; set A long
.39593a	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39593d	5b		tcd		                TCD
.39593e	28		plp		                PLP
.39593f	68		pla		                PLA             ; end setdp macro
.395940	e2 20		sep #$20	                SEP #$20        ; set A short
.395942	a9 f0		lda #$f0	                    LDA #$F0
.395944	8d 1e 00	sta $001e	                    STA @w CURCOLOR
.395947	22 d9 09 39	jsl $3909d9	                    JSL ICLRSCREEN
.39594b	22 45 08 39	jsl $390845	                    JSL ICSRHOME
.39594f	c2 30		rep #$30	                REP #$30        ; set A&X long
.395951	22 1f 5c 39	jsl $395c1f	                    JSL FDC_Init
.395955	b0 03		bcs $39595a	                    BCS init_ok
.395957	82 20 00	brl $39597a	                    BRL motor_off
.39595a	22 16 63 39	jsl $396316	init_ok             JSL FDC_CHK_MEDIA
.39595e	90 03		bcc $395963	                    BCC no_media
.395960	82 03 00	brl $395966	                    BRL is_ok1
.395963					no_media
.395963	82 14 00	brl $39597a	                    BRL motor_off
.395966	22 ad 61 39	jsl $3961ad	is_ok1              JSL FDC_MOUNT
.39596a	90 03		bcc $39596f	                    BCC mount_err
.39596c	82 03 00	brl $395972	                    BRL is_ok2
.39596f					mount_err
.39596f	82 08 00	brl $39597a	                    BRL motor_off
.395972	22 86 59 39	jsl $395986	is_ok2              JSL FDC_TEST_PUTBLOCK
.395976	b0 02		bcs $39597a	                    BCS all_ok
.395978	80 00		bra $39597a	                    BRA motor_off
.39597a					all_ok
.39597a	22 6c 10 38	jsl $38106c	motor_off           JSL PRINTCR
.39597e	22 cb 5c 39	jsl $395ccb	                    JSL FDC_Motor_Off
.395982	28		plp		                    PLP
.395983	2b		pld		                    PLD
.395984	ab		plb		                    PLB
.395985	6b		rtl		                    RTL
.395986					FDC_TEST_PUTBLOCK
.395986	e2 20		sep #$20	                SEP #$20        ; set A short
.395988	a9 00		lda #$00	                    LDA #0                          ; Initialize the data to write to the drive
.39598a	a2 00 00	ldx #$0000	                    LDX #0
.39598d	9f 00 00 03	sta $030000,x	init_loop           STA @l TEST_BUFFER,X
.395991	1a		inc a		                    INC A
.395992	e8		inx		                    INX
.395993	e0 00 02	cpx #$0200	                    CPX #512
.395996	d0 f5		bne $39598d	                    BNE init_loop
.395998	c2 20		rep #$20	                REP #$20        ; set A long
.39599a	a9 00 00	lda #$0000	                    LDA #<>TEST_BUFFER              ; Set BIOS_BUFF_PTR
.39599d	8f 26 03 00	sta $000326	                    STA @l BIOS_BUFF_PTR
.3959a1	a9 03 00	lda #$0003	                    LDA #`TEST_BUFFER
.3959a4	8f 28 03 00	sta $000328	                    STA @l BIOS_BUFF_PTR+2
.3959a8	a9 64 00	lda #$0064	                    LDA #100                        ; Set LBA = 100
.3959ab	8f 22 03 00	sta $000322	                    STA @l BIOS_LBA
.3959af	a9 00 00	lda #$0000	                    LDA #0
.3959b2	8f 24 03 00	sta $000324	                    STA @l BIOS_LBA+2
.3959b6	22 41 61 39	jsl $396141	                    JSL FDC_PUTBLOCK                ; Try to write the data
.3959ba	6b		rtl		                    RTL
>3959bb	40 46 3a 53 41 4d 50 4c		BOOT_FILE           .null "@F:SAMPLE.PGX Hello, world!"
>3959c3	45 2e 50 47 58 20 48 65 6c 6c 6f 2c 20 77 6f 72
>3959d3	6c 64 21 00
=$020000				TEST_LOCATION = $020000                     ; Location to try to load it
=$030000				TEST_BUFFER = $030000                       ; Temporary location for a cluster buffer
.3959d7					FDC_Check_RQM
.3959d7	0b		phd		                    PHD
.3959d8	08		php		                    PHP
.3959d9	48		pha		                PHA             ; begin setdp macro
.3959da	08		php		                PHP
.3959db	c2 20		rep #$20	                REP #$20        ; set A long
.3959dd	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3959e0	5b		tcd		                TCD
.3959e1	28		plp		                PLP
.3959e2	68		pla		                PLA             ; end setdp macro
.3959e3	e2 20		sep #$20	                SEP #$20        ; set A short
.3959e5	a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.3959e7	22 61 3e 39	jsl $393e61	                    JSL ISETTIMEOUT
.3959eb	a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.3959ed	30 12		bmi $395a01	                    BMI time_out            ; If so: signal a time out
.3959ef	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.3959f3	89 80		bit #$80	                    BIT #FDC_MSR_RQM
.3959f5	f0 f4		beq $3959eb	                    BEQ loop
.3959f7	a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.3959f9	22 61 3e 39	jsl $393e61	                    JSL ISETTIMEOUT
.3959fd	28		plp		                    PLP
.3959fe	2b		pld		                    PLD
.3959ff	38		sec		                    SEC
.395a00	60		rts		                    RTS
.395a01	28		plp		time_out            PLP
.395a02	2b		pld		                    PLD
.395a03	18		clc		                    CLC
.395a04	60		rts		                    RTS
.395a05					FDC_Check_DRV0_BSY
.395a05	0b		phd		                    PHD
.395a06	08		php		                    PHP
.395a07	48		pha		                PHA             ; begin setdp macro
.395a08	08		php		                PHP
.395a09	c2 20		rep #$20	                REP #$20        ; set A long
.395a0b	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395a0e	5b		tcd		                TCD
.395a0f	28		plp		                PLP
.395a10	68		pla		                PLA             ; end setdp macro
.395a11	e2 20		sep #$20	                SEP #$20        ; set A short
.395a13	a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395a15	22 61 3e 39	jsl $393e61	                    JSL ISETTIMEOUT
.395a19	a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395a1b	30 12		bmi $395a2f	                    BMI time_out            ; If so: signal a time out
.395a1d	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395a21	89 01		bit #$01	                    BIT #FDC_MSR_DRV0BSY
.395a23	d0 f4		bne $395a19	                    BNE loop
.395a25	a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395a27	22 61 3e 39	jsl $393e61	                    JSL ISETTIMEOUT
.395a2b	28		plp		                    PLP
.395a2c	2b		pld		                    PLD
.395a2d	38		sec		                    SEC
.395a2e	60		rts		                    RTS
.395a2f	28		plp		time_out            PLP
.395a30	2b		pld		                    PLD
.395a31	18		clc		                    CLC
.395a32	60		rts		                    RTS
.395a33					FDC_Check_CMD_BSY
.395a33	0b		phd		                    PHD
.395a34	08		php		                    PHP
.395a35	48		pha		                PHA             ; begin setdp macro
.395a36	08		php		                PHP
.395a37	c2 20		rep #$20	                REP #$20        ; set A long
.395a39	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395a3c	5b		tcd		                TCD
.395a3d	28		plp		                PLP
.395a3e	68		pla		                PLA             ; end setdp macro
.395a3f	e2 20		sep #$20	                SEP #$20        ; set A short
.395a41	a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395a43	22 61 3e 39	jsl $393e61	                    JSL ISETTIMEOUT
.395a47	a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395a49	30 12		bmi $395a5d	                    BMI time_out            ; If so: signal a time out
.395a4b	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395a4f	89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.395a51	d0 f4		bne $395a47	                    BNE loop
.395a53	a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395a55	22 61 3e 39	jsl $393e61	                    JSL ISETTIMEOUT
.395a59	28		plp		                    PLP
.395a5a	2b		pld		                    PLD
.395a5b	38		sec		                    SEC
.395a5c	60		rts		                    RTS
.395a5d	28		plp		time_out            PLP
.395a5e	2b		pld		                    PLD
.395a5f	18		clc		                    CLC
.395a60	60		rts		                    RTS
.395a61					FDC_Can_Read_Data
.395a61	0b		phd		                    PHD
.395a62	08		php		                    PHP
.395a63	48		pha		                PHA             ; begin setdp macro
.395a64	08		php		                PHP
.395a65	c2 20		rep #$20	                REP #$20        ; set A long
.395a67	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395a6a	5b		tcd		                TCD
.395a6b	28		plp		                PLP
.395a6c	68		pla		                PLA             ; end setdp macro
.395a6d	e2 20		sep #$20	                SEP #$20        ; set A short
.395a6f	a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395a71	22 61 3e 39	jsl $393e61	                    JSL ISETTIMEOUT
.395a75	a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395a77	30 14		bmi $395a8d	                    BMI time_out            ; If so: signal a time out
.395a79	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395a7d	29 40		and #$40	                    AND #FDC_MSR_DIO
.395a7f	c9 40		cmp #$40	                    CMP #FDC_MSR_DIO
.395a81	d0 f2		bne $395a75	                    BNE loop
.395a83	a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395a85	22 61 3e 39	jsl $393e61	                    JSL ISETTIMEOUT
.395a89	28		plp		                    PLP
.395a8a	2b		pld		                    PLD
.395a8b	38		sec		                    SEC
.395a8c	60		rts		                    RTS
.395a8d	28		plp		time_out            PLP
.395a8e	2b		pld		                    PLD
.395a8f	18		clc		                    CLC
.395a90	60		rts		                    RTS
.395a91					FDC_CAN_WRITE
.395a91	0b		phd		                    PHD
.395a92	08		php		                    PHP
.395a93	48		pha		                PHA             ; begin setdp macro
.395a94	08		php		                PHP
.395a95	c2 20		rep #$20	                REP #$20        ; set A long
.395a97	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395a9a	5b		tcd		                TCD
.395a9b	28		plp		                PLP
.395a9c	68		pla		                PLA             ; end setdp macro
.395a9d	e2 20		sep #$20	                SEP #$20        ; set A short
.395a9f	a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395aa1	22 61 3e 39	jsl $393e61	                    JSL ISETTIMEOUT
.395aa5	a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395aa7	30 14		bmi $395abd	                    BMI time_out            ; If so: signal a time out
.395aa9	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395aad	29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.395aaf	c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.395ab1	d0 f2		bne $395aa5	                    BNE loop
.395ab3	a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395ab5	22 61 3e 39	jsl $393e61	                    JSL ISETTIMEOUT
.395ab9	28		plp		                    PLP
.395aba	2b		pld		                    PLD
.395abb	38		sec		                    SEC
.395abc	60		rts		                    RTS
.395abd	28		plp		time_out            PLP
.395abe	2b		pld		                    PLD
.395abf	18		clc		                    CLC
.395ac0	60		rts		                    RTS
.395ac1					FDC_DELAY_10MS
.395ac1	da		phx		                    PHX
.395ac2	08		php		                    PHP
.395ac3	c2 10		rep #$10	                REP #$10        ; set X long
.395ac5	a2 80 3e	ldx #$3e80	                    LDX #16000          ; Wait for around 10ms
.395ac8	ea		nop		loop                NOP                 ; Each iteration should take 9 cycles
.395ac9	ca		dex		                    DEX
.395aca	e0 00 00	cpx #$0000	                    CPX #0
.395acd	d0 f9		bne $395ac8	                    BNE loop
.395acf	28		plp		                    PLP
.395ad0	fa		plx		                    PLX
.395ad1	6b		rtl		                    RTL
.395ad2					FDC_COMMAND
.395ad2	da		phx		                    PHX
.395ad3	8b		phb		                    PHB
.395ad4	0b		phd		                    PHD
.395ad5	08		php		                    PHP
.395ad6	48		pha		                PHA             ; begin setdbr macro
.395ad7	08		php		                PHP
.395ad8	e2 20		sep #$20	                SEP #$20        ; set A short
.395ada	a9 00		lda #$00	                LDA #0
.395adc	48		pha		                PHA
.395add	ab		plb		                PLB
.395ade	28		plp		                PLP
.395adf	68		pla		                PLA             ; end setdbr macro
.395ae0	48		pha		                PHA             ; begin setdp macro
.395ae1	08		php		                PHP
.395ae2	c2 20		rep #$20	                REP #$20        ; set A long
.395ae4	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395ae7	5b		tcd		                TCD
.395ae8	28		plp		                PLP
.395ae9	68		pla		                PLA             ; end setdp macro
.395aea	22 c1 5a 39	jsl $395ac1	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms
.395aee	e2 30		sep #$30	                SEP #$30        ; set A&X short
.395af0	a2 00		ldx #$00	                    LDX #0
.395af2	a9 00		lda #$00	                    LDA #0
.395af4	9d 10 05	sta $0510,x	clr_results         STA FDC_RESULTS,X                       ; Clear the result buffer
.395af7	e8		inx		                    INX
.395af8	e0 10		cpx #$10	                    CPX #16
.395afa	d0 f8		bne $395af4	                    BNE clr_results
.395afc	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Validate we can send a command
.395b00	29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.395b02	c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.395b04	f0 04		beq $395b0a	                    BEQ start_send                          ; If so, start sending
.395b06	22 1f 5c 39	jsl $395c1f	fdc_reset           JSL FDC_INIT                            ; Reset the FDC
.395b0a					start_send
.395b0a	e2 10		sep #$10	                SEP #$10        ; set X short
.395b0c	a2 00		ldx #$00	                    LDX #0
.395b0e	20 d7 59	jsr $3959d7	send_loop           JSR FDC_Check_RQM                       ; Wait until we can write
.395b11	b0 03		bcs $395b16	                    BCS send_param
.395b13	82 5e 00	brl $395b74	                    BRL time_out                            ; If there was a timeout, flag the time out
.395b16	bd 00 05	lda $0500,x	send_param          LDA FDC_PARAMETERS,X                    ; Get the parameter/command byte to write
.395b19	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; Send it
.395b1d	22 c1 5a 39	jsl $395ac1	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms for things to settle
.395b21	e8		inx		                    INX                                     ; Advance to the next byte
.395b22	ec 30 05	cpx $0530	                    CPX FDC_PARAM_NUM
.395b25	d0 e7		bne $395b0e	                    BNE send_loop                           ; Keep sending until we've sent them all
.395b27	ad 33 05	lda $0533	                    LDA FDC_EXPECT_DAT                      ; Check the data expectation byte
.395b2a	d0 03		bne $395b2f	                    BNE chk_data_dir
.395b2c	82 80 00	brl $395baf	                    BRL result_phase                        ; If 0: we just want a result
.395b2f	10 3c		bpl $395b6d	chk_data_dir        BPL rd_data                             ; If >0: we want to read data
.395b31					wr_data
.395b31	a5 0b		lda $030b	wr_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.395b33	30 03		bmi $395b38	                    BMI wr_chk_rqm
.395b35	82 3c 00	brl $395b74	                    BRL time_out                            ; If not, raise an error
.395b38	af f4 13 af	lda $af13f4	wr_chk_rqm          LDA @l SIO_FDC_MSR                      ; Wait for ready to write
.395b3c	89 80		bit #$80	                    BIT #FDC_MSR_RQM
.395b3e	f0 f1		beq $395b31	                    BEQ wr_data_rdy
.395b40	89 20		bit #$20	                    BIT #FDC_MSR_NONDMA                     ; Check if in execution mode
.395b42	d0 03		bne $395b47	                    BNE wr_data_phase                       ; If so: transfer the data
.395b44	82 68 00	brl $395baf	                    BRL result_phase                          ; If not: it's an error
.395b47					wr_data_phase
.395b47	c2 10		rep #$10	                REP #$10        ; set X long
.395b49	a0 00 00	ldy #$0000	                    LDY #0
.395b4c	a5 0b		lda $030b	wr_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.395b4e	30 03		bmi $395b53	                    BMI wr_chk_nondma
.395b50	82 21 00	brl $395b74	                    BRL time_out                            ; If not, raise an error
.395b53	af f4 13 af	lda $af13f4	wr_chk_nondma       LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.395b57	89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.395b59	f0 54		beq $395baf	                    BEQ result_phase                        ; If not: break out to result phase
.395b5b	89 80		bit #$80	                    BIT #FDC_MSR_RQM                        ; Check if we can read data
.395b5d	f0 ed		beq $395b4c	                    BEQ wr_data_loop                        ; No: keep waiting
.395b5f	b7 26		lda [$0326],y	                    LDA [BIOS_BUFF_PTR],Y                   ; Get the data byte
.395b61	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; And save it to the buffer
.395b65	c8		iny		                    INY                                     ; Move to the next position
.395b66	c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.395b69	d0 e1		bne $395b4c	                    BNE wr_data_loop                        ; If not at the end, keep fetching
.395b6b	80 42		bra $395baf	                    BRA result_phase                        ; ready for the result phase
.395b6d	20 61 5a	jsr $395a61	rd_data             JSR FDC_Can_Read_Data
.395b70	a5 0b		lda $030b	rd_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.395b72	30 07		bmi $395b7b	                    BMI chk_rd_rdy                          ; If so, check to see if the data is ready
.395b74					time_out
.395b74	e2 20		sep #$20	                SEP #$20        ; set A short
.395b76	a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT                   ; Otherwise: throw a BIOS_ERR_TIMEOUT error
.395b78	82 9c 00	brl $395c17	                    BRL pass_error
.395b7b	af f4 13 af	lda $af13f4	chk_rd_rdy          LDA @l SIO_FDC_MSR                      ; Wait for data to be ready
.395b7f	29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.395b81	c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.395b83	d0 eb		bne $395b70	                    BNE rd_data_rdy
.395b85	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.395b89	89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.395b8b	d0 03		bne $395b90	                    BNE rd_data_phase                       ; If so: transfer the data
.395b8d	82 83 00	brl $395c13	                    BRL error                               ; If not: it's an error
.395b90					rd_data_phase
.395b90	c2 10		rep #$10	                REP #$10        ; set X long
.395b92	a0 00 00	ldy #$0000	                    LDY #0
.395b95	a5 0b		lda $030b	rd_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.395b97	10 db		bpl $395b74	                    BPL time_out                            ; If not: throw a timeout error
.395b99	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Wait for the next byte to be ready
.395b9d	29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.395b9f	c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.395ba1	d0 f2		bne $395b95	                    BNE rd_data_loop
.395ba3	af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Get the data byte
.395ba7	97 26		sta [$0326],y	                    STA [BIOS_BUFF_PTR],Y                   ; And save it to the buffer
.395ba9	c8		iny		                    INY                                     ; Move to the next position
.395baa	c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.395bad	d0 e6		bne $395b95	                    BNE rd_data_loop                        ; If not at the end, keep fetching
.395baf	ad 32 05	lda $0532	result_phase        LDA FDC_RESULT_NUM                      ; If no results are expected...
.395bb2	f0 34		beq $395be8	                    BEQ chk_busy                            ; Then we're done
.395bb4	e2 10		sep #$10	                SEP #$10        ; set X short
.395bb6	a2 00		ldx #$00	                    LDX #0
.395bb8	a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME                      ; Set the watchdog timer
.395bba	22 61 3e 39	jsl $393e61	                    JSL ISETTIMEOUT
.395bbe	20 61 5a	jsr $395a61	result_loop         JSR FDC_Can_Read_Data                   ; Wait until we can read
.395bc1	90 b1		bcc $395b74	                    BCC time_out                            ; If there was a time out, raise an error
.395bc3	af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Yes: get the data
.395bc7	20 61 5a	jsr $395a61	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.395bca	90 a8		bcc $395b74	                    BCC time_out                            ; If there was a time out, raise an error
.395bcc	af f5 13 af	lda $af13f5	read_result         LDA @l SIO_FDC_DTA                      ; Yes: get the data
.395bd0	9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X                       ; Save it to the result buffer
.395bd3	20 d7 59	jsr $3959d7	                    JSR FDC_Check_RQM
.395bd6	90 9c		bcc $395b74	                    BCC time_out                            ; If there was a time out, flag the error
.395bd8	af f4 13 af	lda $af13f4	rd_chk_1            LDA @l SIO_FDC_MSR
.395bdc	29 50		and #$50	                    AND #FDC_MSR_DIO | FDC_MSR_CMDBSY
.395bde	c9 50		cmp #$50	                    CMP #FDC_MSR_DIO | FDC_MSR_CMDBSY
.395be0	d0 06		bne $395be8	                    BNE chk_busy
.395be2	e8		inx		                    INX                                     ; Move to the next result positions
.395be3	ec 32 05	cpx $0532	                    CPX FDC_RESULT_NUM
.395be6	d0 e4		bne $395bcc	                    BNE read_result                         ; And keep looping until we've read all
.395be8					chk_busy
.395be8	c2 10		rep #$10	                REP #$10        ; set X long
.395bea	a2 0a 00	ldx #$000a	                    LDX #10                                 ; Wait 10ms (I guess?)
.395bed	22 76 13 39	jsl $391376	                    JSL ILOOP_MS
.395bf1	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check the command busy bit
.395bf5	89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.395bf7	f0 12		beq $395c0b	                    BEQ done                                ; If not set: we're done
.395bf9	20 61 5a	jsr $395a61	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.395bfc	b0 03		bcs $395c01	                    BCS get_result_byte
.395bfe	82 73 ff	brl $395b74	                    BRL time_out                            ; If there was a time out, flag the error
.395c01	af f5 13 af	lda $af13f5	get_result_byte     LDA @l SIO_FDC_DTA                      ; Read the data
.395c05	9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X
.395c08	e8		inx		                    INX
.395c09	80 dd		bra $395be8	                    BRA chk_busy                            ; And keep checking
.395c0b					done
.395c0b	64 20		stz $0320	                    STZ BIOS_STATUS
.395c0d	28		plp		                    PLP
.395c0e	2b		pld		                    PLD
.395c0f	ab		plb		                    PLB
.395c10	fa		plx		                    PLX
.395c11	38		sec		                    SEC
.395c12	6b		rtl		                    RTL
.395c13					error
.395c13	e2 20		sep #$20	                SEP #$20        ; set A short
.395c15	a9 85		lda #$85	                    LDA #BIOS_ERR_CMD
.395c17	85 20		sta $0320	pass_error          STA BIOS_STATUS
.395c19	28		plp		                    PLP
.395c1a	2b		pld		                    PLD
.395c1b	ab		plb		                    PLB
.395c1c	fa		plx		                    PLX
.395c1d	18		clc		                    CLC
.395c1e	6b		rtl		                    RTL
.395c1f					FDC_Init
.395c1f	08		php		                    PHP
.395c20	c2 10		rep #$10	                REP #$10        ; set X long
.395c22	e2 20		sep #$20	                SEP #$20        ; set A short
.395c24	a9 00		lda #$00	                    LDA #0
.395c26	8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.395c2a	a2 e8 03	ldx #$03e8	                    LDX #1000                   ; Wait
.395c2d	a0 00 00	ldy #$0000	                    LDY #0
.395c30	22 83 13 39	jsl $391383	                    JSL IDELAY
.395c34	a9 04		lda #$04	                    LDA #FDC_DOR_NRESET         ; Reset the FDC
.395c36	8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.395c3a	ea		nop		                    NOP
.395c3b	ea		nop		                    NOP
.395c3c	ea		nop		                    NOP
.395c3d	ea		nop		                    NOP
.395c3e	a9 00		lda #$00	                    LDA #$00                    ; Make sure the Speed and Compensation has been set
.395c40	8f f4 13 af	sta $af13f4	                    STA @l SIO_FDC_DSR
.395c44	a9 00		lda #$00	                    LDA #$00                    ; Precompensation set to 0
.395c46	8f f7 13 af	sta $af13f7	                    STA @l SIO_FDC_CCR
.395c4a	a2 8f c5	ldx #$c58f	                    LDX #<>FDC_SEEK_TIME
.395c4d	a0 20 00	ldy #$0020	                    LDY #`FDC_SEEK_TIME
.395c50	22 83 13 39	jsl $391383	                    JSL IDELAY
.395c54	22 2b 5d 39	jsl $395d2b	                    JSL FDC_Sense_Int_Status
.395c58	90 21		bcc $395c7b	                    BCC pass_failure
.395c5a	22 2b 5d 39	jsl $395d2b	                    JSL FDC_Sense_Int_Status
.395c5e	90 1b		bcc $395c7b	                    BCC pass_failure
.395c60	22 2b 5d 39	jsl $395d2b	                    JSL FDC_Sense_Int_Status
.395c64	90 15		bcc $395c7b	                    BCC pass_failure
.395c66	22 2b 5d 39	jsl $395d2b	                    JSL FDC_Sense_Int_Status
.395c6a	90 0f		bcc $395c7b	                    BCC pass_failure
.395c6c	22 ed 5d 39	jsl $395ded	                    JSL FDC_Configure_Command
.395c70	90 09		bcc $395c7b	                    BCC pass_failure
.395c72	22 94 5d 39	jsl $395d94	                    JSL FDC_Specify_Command
.395c76	90 03		bcc $395c7b	                    BCC pass_failure
.395c78	28		plp		                    PLP
.395c79	38		sec		                    SEC
.395c7a	6b		rtl		                    RTL
.395c7b	28		plp		pass_failure        PLP
.395c7c	18		clc		                    CLC
.395c7d	6b		rtl		                    RTL
.395c7e					FDC_MOTOR_NEEDED
.395c7e	08		php		                    PHP
.395c7f	c2 20		rep #$20	                REP #$20        ; set A long
.395c81	78		sei		                    SEI                         ; Turn off interrupts
.395c82	a9 84 03	lda #$0384	                    LDA #FDC_MOTOR_ON_TIME      ; Reset the FDC timeout clock
.395c85	8f 4e e0 38	sta $38e04e	                    STA @l FDC_MOTOR_TIMER
.395c89	e2 20		sep #$20	                SEP #$20        ; set A short
.395c8b	af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.395c8f	29 fe		and #$fe	                    AND #~FNX0_INT00_SOF        ; Enable the SOF interrupt
.395c91	8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.395c95	28		plp		                    PLP
.395c96	6b		rtl		                    RTL
.395c97					FDC_Motor_On
.395c97	08		php		                    PHP
.395c98	22 7e 5c 39	jsl $395c7e	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.395c9c	e2 20		sep #$20	                SEP #$20        ; set A short
.395c9e	af f2 13 af	lda $af13f2	                    LDA @l SIO_FDC_DOR          ; Check to see if the motor is already on
.395ca2	89 10		bit #$10	                    BIT #FDC_DOR_MOT0
.395ca4	d0 1f		bne $395cc5	                    BNE done                    ; If so: skip
.395ca6	a9 14		lda #$14	                    LDA #FDC_DOR_MOT0 | FDC_DOR_NRESET
.395ca8	8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.395cac	20 d7 59	jsr $3959d7	                    JSR FDC_Check_RQM           ; Make sure we can leave knowing that everything set properly
.395caf	90 17		bcc $395cc8	                    BCC time_out
.395cb1	a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.395cb4	a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.395cb7	22 83 13 39	jsl $391383	                    JSL IDELAY
.395cbb	af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.395cbf	09 80		ora #$80	                    ORA #$80                    ; Flag that the motor should be on
.395cc1	8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.395cc5	28		plp		done                PLP
.395cc6	38		sec		                    SEC
.395cc7	6b		rtl		                    RTL
.395cc8	28		plp		time_out            PLP                         ; Return a timeout error
.395cc9	18		clc		                    CLC
.395cca	6b		rtl		                    RTL
.395ccb					FDC_Motor_Off
.395ccb	08		php		                    PHP
.395ccc	e2 20		sep #$20	                SEP #$20        ; set A short
.395cce	a9 04		lda #$04	                    LDA #FDC_DOR_NRESET
.395cd0	8f f2 13 af	sta $af13f2	                    STA @L SIO_FDC_DOR
.395cd4	c2 20		rep #$20	                REP #$20        ; set A long
.395cd6	78		sei		                    SEI                         ; Turn off interrupts
.395cd7	a9 00 00	lda #$0000	                    LDA #0                      ; Set FDC motor timeout counter to 0 to disable it
.395cda	8f 4e e0 38	sta $38e04e	                    STA @l FDC_MOTOR_TIMER
.395cde	e2 20		sep #$20	                SEP #$20        ; set A short
.395ce0	af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.395ce4	09 01		ora #$01	                    ORA #FNX0_INT00_SOF         ; Disable the SOF interrupt
.395ce6	8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.395cea	af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.395cee	29 7f		and #$7f	                    AND #$7F                    ; Flag that the motor should be off
.395cf0	8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.395cf4	28		plp		                    PLP
.395cf5	6b		rtl		                    RTL
.395cf6					FDC_Recalibrate_Command
.395cf6	0b		phd		                    PHD
.395cf7	08		php		                    PHP
.395cf8	48		pha		                PHA             ; begin setdp macro
.395cf9	08		php		                PHP
.395cfa	c2 20		rep #$20	                REP #$20        ; set A long
.395cfc	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395cff	5b		tcd		                TCD
.395d00	28		plp		                PLP
.395d01	68		pla		                PLA             ; end setdp macro
.395d02	22 7e 5c 39	jsl $395c7e	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.395d06	e2 20		sep #$20	                SEP #$20        ; set A short
.395d08	a9 07		lda #$07	                    LDA #FDC_CMD_RECALIBRATE    ; RECALIBRATE Command
.395d0a	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.395d0d	a5 00		lda $0300	                    LDA FDC_DRIVE
.395d0f	8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.395d12	a9 02		lda #$02	                    LDA #2
.395d14	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM           ; 2 parameters
.395d17	9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT          ; 0 data
.395d1a	9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM          ; 0 results
.395d1d	22 d2 5a 39	jsl $395ad2	                    JSL FDC_COMMAND             ; Issue the command
.395d21	90 04		bcc $395d27	                    BCC pass_failure            ; If failure, pass the failure up
.395d23	28		plp		                    PLP
.395d24	2b		pld		                    PLD
.395d25	38		sec		                    SEC
.395d26	6b		rtl		                    RTL
.395d27	28		plp		pass_failure        PLP
.395d28	2b		pld		                    PLD
.395d29	18		clc		                    CLC
.395d2a	6b		rtl		                    RTL
.395d2b					FDC_Sense_Int_Status
.395d2b	8b		phb		                    PHB
.395d2c	0b		phd		                    PHD
.395d2d	08		php		                    PHP
.395d2e	48		pha		                PHA             ; begin setdbr macro
.395d2f	08		php		                PHP
.395d30	e2 20		sep #$20	                SEP #$20        ; set A short
.395d32	a9 00		lda #$00	                LDA #0
.395d34	48		pha		                PHA
.395d35	ab		plb		                PLB
.395d36	28		plp		                PLP
.395d37	68		pla		                PLA             ; end setdbr macro
.395d38	48		pha		                PHA             ; begin setdp macro
.395d39	08		php		                PHP
.395d3a	c2 20		rep #$20	                REP #$20        ; set A long
.395d3c	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395d3f	5b		tcd		                TCD
.395d40	28		plp		                PLP
.395d41	68		pla		                PLA             ; end setdp macro
.395d42	c2 30		rep #$30	                REP #$30        ; set A&X long
.395d44	a2 0a 00	ldx #$000a	                    LDX #10                            ; Wait for 10ms
.395d47	22 76 13 39	jsl $391376	                    JSL ILOOP_MS
.395d4b	e2 20		sep #$20	                SEP #$20        ; set A short
.395d4d	64 06		stz $0306	                    STZ FDC_ST0                         ; Clear ST0
.395d4f	a9 ff		lda #$ff	                    LDA #$FF
.395d51	85 0a		sta $030a	                    STA FDC_PCN                         ; Set PCN to some obviously bad value
.395d53	20 33 5a	jsr $395a33	                    JSR FDC_Check_CMD_BSY               ; Check I can send a command
.395d56	90 30		bcc $395d88	                    BCC time_out                        ; If there was a time out, raise an error
.395d58	20 d7 59	jsr $3959d7	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.395d5b	90 2b		bcc $395d88	                    BCC time_out                        ; If there was a time out, raise an error
.395d5d	a9 08		lda #$08	                    LDA #FDC_CMD_SENSE_INTERRUPT
.395d5f	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395d63	20 61 5a	jsr $395a61	                    JSR FDC_Can_Read_Data
.395d66	90 20		bcc $395d88	                    BCC time_out                        ; If there was a time out, raise an error
.395d68	20 d7 59	jsr $3959d7	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.395d6b	90 1b		bcc $395d88	                    BCC time_out                        ; If there was a time out, raise an error
.395d6d	af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.395d71	85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.395d73	20 d7 59	jsr $3959d7	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.395d76	90 10		bcc $395d88	                    BCC time_out                        ; If there was a time out, raise an error
.395d78	af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.395d7c	85 0a		sta $030a	                    STA FDC_PCN                         ; --- Cylinder ---
.395d7e	e2 20		sep #$20	                SEP #$20        ; set A short
.395d80	9c 20 03	stz $0320	                    STZ @w BIOS_STATUS
.395d83	28		plp		                    PLP
.395d84	2b		pld		                    PLD
.395d85	ab		plb		                    PLB
.395d86	38		sec		                    SEC
.395d87	6b		rtl		                    RTL
.395d88					time_out
.395d88	e2 20		sep #$20	                SEP #$20        ; set A short
.395d8a	a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT               ; Return a time out error
.395d8c	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.395d8f	28		plp		                    PLP
.395d90	2b		pld		                    PLD
.395d91	ab		plb		                    PLB
.395d92	18		clc		                    CLC
.395d93	6b		rtl		                    RTL
.395d94					FDC_Specify_Command
.395d94	8b		phb		                    PHB
.395d95	0b		phd		                    PHD
.395d96	08		php		                    PHP
.395d97	48		pha		                PHA             ; begin setdbr macro
.395d98	08		php		                PHP
.395d99	e2 20		sep #$20	                SEP #$20        ; set A short
.395d9b	a9 00		lda #$00	                LDA #0
.395d9d	48		pha		                PHA
.395d9e	ab		plb		                PLB
.395d9f	28		plp		                PLP
.395da0	68		pla		                PLA             ; end setdbr macro
.395da1	48		pha		                PHA             ; begin setdp macro
.395da2	08		php		                PHP
.395da3	c2 20		rep #$20	                REP #$20        ; set A long
.395da5	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395da8	5b		tcd		                TCD
.395da9	28		plp		                PLP
.395daa	68		pla		                PLA             ; end setdp macro
.395dab	c2 30		rep #$30	                REP #$30        ; set A&X long
.395dad	a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.395db0	22 76 13 39	jsl $391376	                    JSL ILOOP_MS
.395db4	e2 20		sep #$20	                SEP #$20        ; set A short
.395db6	20 33 5a	jsr $395a33	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.395db9	90 26		bcc $395de1	                    BCC time_out            ; If there was a time out, raise an error
.395dbb	20 d7 59	jsr $3959d7	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.395dbe	90 21		bcc $395de1	                    BCC time_out            ; If there was a time out, raise an error
.395dc0	a9 03		lda #$03	                    LDA #FDC_CMD_SPECIFY    ; Specify Command
.395dc2	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395dc6	20 d7 59	jsr $3959d7	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.395dc9	90 16		bcc $395de1	                    BCC time_out            ; If there was a time out, raise an error
.395dcb	a9 cf		lda #$cf	                    LDA #$CF
.395dcd	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395dd1	20 d7 59	jsr $3959d7	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.395dd4	90 0b		bcc $395de1	                    BCC time_out            ; If there was a time out, raise an error
.395dd6	a9 01		lda #$01	                    LDA #$01                ; 1 = Non-DMA
.395dd8	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395ddc	28		plp		                    PLP
.395ddd	2b		pld		                    PLD
.395dde	ab		plb		                    PLB
.395ddf	38		sec		                    SEC
.395de0	6b		rtl		                    RTL
.395de1					time_out
.395de1	e2 20		sep #$20	                SEP #$20        ; set A short
.395de3	a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.395de5	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.395de8	28		plp		                    PLP
.395de9	2b		pld		                    PLD
.395dea	ab		plb		                    PLB
.395deb	18		clc		                    CLC
.395dec	6b		rtl		                    RTL
.395ded					FDC_Configure_Command
.395ded	8b		phb		                    PHB
.395dee	0b		phd		                    PHD
.395def	08		php		                    PHP
.395df0	48		pha		                PHA             ; begin setdbr macro
.395df1	08		php		                PHP
.395df2	e2 20		sep #$20	                SEP #$20        ; set A short
.395df4	a9 00		lda #$00	                LDA #0
.395df6	48		pha		                PHA
.395df7	ab		plb		                PLB
.395df8	28		plp		                PLP
.395df9	68		pla		                PLA             ; end setdbr macro
.395dfa	48		pha		                PHA             ; begin setdp macro
.395dfb	08		php		                PHP
.395dfc	c2 20		rep #$20	                REP #$20        ; set A long
.395dfe	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395e01	5b		tcd		                TCD
.395e02	28		plp		                PLP
.395e03	68		pla		                PLA             ; end setdp macro
.395e04	c2 30		rep #$30	                REP #$30        ; set A&X long
.395e06	a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.395e09	22 76 13 39	jsl $391376	                    JSL ILOOP_MS
.395e0d	e2 20		sep #$20	                SEP #$20        ; set A short
.395e0f	20 33 5a	jsr $395a33	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.395e12	90 36		bcc $395e4a	                    BCC time_out            ; If there was a time out, raise an error
.395e14	20 d7 59	jsr $3959d7	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.395e17	90 31		bcc $395e4a	                    BCC time_out            ; If there was a time out, raise an error
.395e19	a9 13		lda #$13	                    LDA #FDC_CMD_CONFIGURE  ; Specify Command
.395e1b	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395e1f	20 d7 59	jsr $3959d7	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.395e22	90 26		bcc $395e4a	                    BCC time_out            ; If there was a time out, raise an error
.395e24	a9 00		lda #$00	                    LDA #$00
.395e26	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395e2a	20 d7 59	jsr $3959d7	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.395e2d	90 1b		bcc $395e4a	                    BCC time_out            ; If there was a time out, raise an error
.395e2f	a9 44		lda #$44	                    LDA #$44                ; Implied Seek, FIFOTHR = 4 byte
.395e31	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395e35	20 d7 59	jsr $3959d7	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.395e38	90 10		bcc $395e4a	                    BCC time_out            ; If there was a time out, raise an error
.395e3a	a9 00		lda #$00	                    LDA #$00
.395e3c	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395e40	20 33 5a	jsr $395a33	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.395e43	90 05		bcc $395e4a	                    BCC time_out            ; If there was a time out, raise an error
.395e45	28		plp		                    PLP
.395e46	2b		pld		                    PLD
.395e47	ab		plb		                    PLB
.395e48	38		sec		                    SEC
.395e49	6b		rtl		                    RTL
.395e4a					time_out
.395e4a	e2 20		sep #$20	                SEP #$20        ; set A short
.395e4c	a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.395e4e	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.395e51	28		plp		                    PLP
.395e52	2b		pld		                    PLD
.395e53	ab		plb		                    PLB
.395e54	18		clc		                    CLC
.395e55	6b		rtl		                    RTL
.395e56					FDC_Read_ID_Command
.395e56	8b		phb		                    PHB
.395e57	0b		phd		                    PHD
.395e58	08		php		                    PHP
.395e59	48		pha		                PHA             ; begin setdbr macro
.395e5a	08		php		                PHP
.395e5b	e2 20		sep #$20	                SEP #$20        ; set A short
.395e5d	a9 00		lda #$00	                LDA #0
.395e5f	48		pha		                PHA
.395e60	ab		plb		                PLB
.395e61	28		plp		                PLP
.395e62	68		pla		                PLA             ; end setdbr macro
.395e63	48		pha		                PHA             ; begin setdp macro
.395e64	08		php		                PHP
.395e65	c2 20		rep #$20	                REP #$20        ; set A long
.395e67	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395e6a	5b		tcd		                TCD
.395e6b	28		plp		                PLP
.395e6c	68		pla		                PLA             ; end setdp macro
.395e6d	e2 20		sep #$20	                SEP #$20        ; set A short
.395e6f	a9 0a		lda #$0a	                    LDA #FDC_CMD_READ_ID                ; READID Command
.395e71	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.395e74	a9 01		lda #$01	                    LDA #1
.395e76	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.395e79	9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.395e7c	a9 07		lda #$07	                    LDA #7
.395e7e	8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.395e81	22 d2 5a 39	jsl $395ad2	                    JSL FDC_COMMAND                     ; Issue the command
.395e85	90 27		bcc $395eae	                    BCC pass_failure
.395e87	ad 10 05	lda $0510	                    LDA FDC_RESULTS
.395e8a	85 06		sta $0306	                    STA FDC_ST0                         ; Get ST0
.395e8c	ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.395e8f	85 07		sta $0307	                    STA FDC_ST1                         ; Get ST1
.395e91	ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.395e94	85 08		sta $0308	                    STA FDC_ST2                         ; Get ST2
.395e96	ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.395e99	85 02		sta $0302	                    STA FDC_CYLINDER                    ; Get the cylinder
.395e9b	ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.395e9e	85 01		sta $0301	                    STA FDC_HEAD                        ; Get the head
.395ea0	ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.395ea3	85 0a		sta $030a	                    STA FDC_PCN                         ; Get the sector
.395ea5	ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.395ea8	85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; Get the sector size code
.395eaa	28		plp		                    PLP
.395eab	2b		pld		                    PLD
.395eac	ab		plb		                    PLB
.395ead	6b		rtl		                    RTL
.395eae	28		plp		pass_failure        PLP
.395eaf	2b		pld		                    PLD
.395eb0	ab		plb		                    PLB
.395eb1	18		clc		                    CLC
.395eb2	6b		rtl		                    RTL
.395eb3					FDC_DumpReg_Command
.395eb3	0b		phd		                    PHD
.395eb4	08		php		                    PHP
.395eb5	e2 20		sep #$20	                SEP #$20        ; set A short
.395eb7	a9 0e		lda #$0e	                    LDA #FDC_CMD_DUMPREG                ; DUMPREG Command
.395eb9	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.395ebc	a9 01		lda #$01	                    LDA #1
.395ebe	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.395ec1	9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.395ec4	a9 0a		lda #$0a	                    LDA #10
.395ec6	8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 10 results
.395ec9	22 d2 5a 39	jsl $395ad2	                    JSL FDC_COMMAND                     ; Issue the command
.395ecd	90 03		bcc $395ed2	                    BCC pass_failure
.395ecf	28		plp		                    PLP
.395ed0	2b		pld		                    PLD
.395ed1	6b		rtl		                    RTL
.395ed2	28		plp		pass_failure        PLP
.395ed3	2b		pld		                    PLD
.395ed4	18		clc		                    CLC
.395ed5	6b		rtl		                    RTL
.395ed6					FDC_Seek_Track
.395ed6	8b		phb		                    PHB
.395ed7	0b		phd		                    PHD
.395ed8	08		php		                    PHP
.395ed9	48		pha		                PHA             ; begin setdbr macro
.395eda	08		php		                PHP
.395edb	e2 20		sep #$20	                SEP #$20        ; set A short
.395edd	a9 00		lda #$00	                LDA #0
.395edf	48		pha		                PHA
.395ee0	ab		plb		                PLB
.395ee1	28		plp		                PLP
.395ee2	68		pla		                PLA             ; end setdbr macro
.395ee3	48		pha		                PHA             ; begin setdp macro
.395ee4	08		php		                PHP
.395ee5	c2 20		rep #$20	                REP #$20        ; set A long
.395ee7	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395eea	5b		tcd		                TCD
.395eeb	28		plp		                PLP
.395eec	68		pla		                PLA             ; end setdp macro
.395eed	22 7e 5c 39	jsl $395c7e	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.395ef1	e2 20		sep #$20	                SEP #$20        ; set A short
.395ef3	a9 0f		lda #$0f	                    LDA #FDC_CMD_SEEK                   ; Seek Command
.395ef5	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.395ef8	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.395efa	29 01		and #$01	                    AND #$01
.395efc	0a		asl a		                    ASL A
.395efd	0a		asl a		                    ASL A
.395efe	05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.395f00	8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.395f03	a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; And the track
.395f05	8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.395f08	a9 03		lda #$03	                    LDA #3
.395f0a	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 3 parameter (the command)
.395f0d	9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.395f10	9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM                  ; 0 results
.395f13	22 d2 5a 39	jsl $395ad2	                    JSL FDC_COMMAND                     ; Issue the command
.395f17	90 05		bcc $395f1e	                    BCC pass_failure
.395f19	28		plp		                    PLP
.395f1a	2b		pld		                    PLD
.395f1b	ab		plb		                    PLB
.395f1c	38		sec		                    SEC
.395f1d	6b		rtl		                    RTL
.395f1e	28		plp		pass_failure        PLP
.395f1f	2b		pld		                    PLD
.395f20	ab		plb		                    PLB
.395f21	18		clc		                    CLC
.395f22	6b		rtl		                    RTL
.395f23					FDC_Read_Sector
.395f23	8b		phb		                    PHB
.395f24	0b		phd		                    PHD
.395f25	08		php		                    PHP
.395f26	48		pha		                PHA             ; begin setdbr macro
.395f27	08		php		                PHP
.395f28	e2 20		sep #$20	                SEP #$20        ; set A short
.395f2a	a9 00		lda #$00	                LDA #0
.395f2c	48		pha		                PHA
.395f2d	ab		plb		                PLB
.395f2e	28		plp		                PLP
.395f2f	68		pla		                PLA             ; end setdbr macro
.395f30	48		pha		                PHA             ; begin setdp macro
.395f31	08		php		                PHP
.395f32	c2 20		rep #$20	                REP #$20        ; set A long
.395f34	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395f37	5b		tcd		                TCD
.395f38	28		plp		                PLP
.395f39	68		pla		                PLA             ; end setdp macro
.395f3a	22 7e 5c 39	jsl $395c7e	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.395f3e	e2 20		sep #$20	                SEP #$20        ; set A short
.395f40	a9 06		lda #$06	                    LDA #FDC_CMD_READ_DATA              ; The READ_DATA command
.395f42	09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.395f44	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.395f47	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.395f49	29 01		and #$01	                    AND #$01
.395f4b	0a		asl a		                    ASL A
.395f4c	0a		asl a		                    ASL A
.395f4d	05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.395f4f	8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.395f52	a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.395f54	8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.395f57	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.395f59	8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.395f5c	a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.395f5e	8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.395f61	a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.395f63	8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.395f66	a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.395f68	8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.395f6b	a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.395f6d	8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.395f70	a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.395f72	8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.395f75	a9 09		lda #$09	                    LDA #9
.395f77	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.395f7a	a9 01		lda #$01	                    LDA #1
.395f7c	8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect data
.395f7f	a9 07		lda #$07	                    LDA #7
.395f81	8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.395f84	22 d2 5a 39	jsl $395ad2	command             JSL FDC_COMMAND                     ; Issue the command
.395f88	08		php		                    PHP
.395f89	ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.395f8c	85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ----
.395f8e	ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.395f91	85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ----
.395f93	ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.395f96	85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ----
.395f98	ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.395f9b	85 02		sta $0302	                    STA FDC_CYLINDER                    ; -- C ---
.395f9d	ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.395fa0	85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.395fa2	ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.395fa5	85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.395fa7	ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.395faa	85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.395fac	28		plp		                    PLP
.395fad	90 04		bcc $395fb3	                    BCC pass_failure
.395faf	28		plp		done                PLP
.395fb0	2b		pld		                    PLD
.395fb1	ab		plb		                    PLB
.395fb2	6b		rtl		                    RTL
.395fb3	28		plp		pass_failure        PLP
.395fb4	2b		pld		                    PLD
.395fb5	ab		plb		                    PLB
.395fb6	18		clc		                    CLC
.395fb7	6b		rtl		                    RTL
.395fb8					FDC_Write_Sector
.395fb8	8b		phb		                    PHB
.395fb9	0b		phd		                    PHD
.395fba	08		php		                    PHP
.395fbb	48		pha		                PHA             ; begin setdbr macro
.395fbc	08		php		                PHP
.395fbd	e2 20		sep #$20	                SEP #$20        ; set A short
.395fbf	a9 00		lda #$00	                LDA #0
.395fc1	48		pha		                PHA
.395fc2	ab		plb		                PLB
.395fc3	28		plp		                PLP
.395fc4	68		pla		                PLA             ; end setdbr macro
.395fc5	48		pha		                PHA             ; begin setdp macro
.395fc6	08		php		                PHP
.395fc7	c2 20		rep #$20	                REP #$20        ; set A long
.395fc9	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395fcc	5b		tcd		                TCD
.395fcd	28		plp		                PLP
.395fce	68		pla		                PLA             ; end setdp macro
.395fcf	e2 20		sep #$20	                SEP #$20        ; set A short
.395fd1	22 7e 5c 39	jsl $395c7e	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.395fd5	a9 05		lda #$05	                    LDA #FDC_CMD_WRITE_DATA             ; The WRITE_DATA command
.395fd7	09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.395fd9	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.395fdc	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.395fde	29 01		and #$01	                    AND #$01
.395fe0	0a		asl a		                    ASL A
.395fe1	0a		asl a		                    ASL A
.395fe2	05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.395fe4	8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.395fe7	a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.395fe9	8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.395fec	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.395fee	8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.395ff1	a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.395ff3	8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.395ff6	a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.395ff8	8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.395ffb	a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.395ffd	8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.396000	a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.396002	8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.396005	a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.396007	8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.39600a	a9 09		lda #$09	                    LDA #9
.39600c	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.39600f	a9 ff		lda #$ff	                    LDA #$FF
.396011	8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect to write data
.396014	a9 07		lda #$07	                    LDA #7
.396016	8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.396019	22 d2 5a 39	jsl $395ad2	command             JSL FDC_COMMAND                     ; Issue the command
.39601d	08		php		                    PHP
.39601e	ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.396021	85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.396023	ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.396026	85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ---
.396028	ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.39602b	85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ---
.39602d	ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.396030	85 02		sta $0302	                    STA FDC_CYLINDER                    ; --- C ---
.396032	ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.396035	85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.396037	ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.39603a	85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.39603c	ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.39603f	85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.396041	28		plp		check_status        PLP
.396042	90 04		bcc $396048	                    BCC pass_failure
.396044	28		plp		done                PLP
.396045	2b		pld		                    PLD
.396046	ab		plb		                    PLB
.396047	6b		rtl		                    RTL
.396048	28		plp		pass_failure        PLP
.396049	2b		pld		                    PLD
.39604a	ab		plb		                    PLB
.39604b	18		clc		                    CLC
.39604c	6b		rtl		                    RTL
.39604d					DIVIDE32
.39604d	da		phx		                    PHX
.39604e	5a		phy		                    PHY
.39604f	0b		phd		                    PHD
.396050	08		php		                    PHP
.396051	48		pha		                PHA             ; begin setdp macro
.396052	08		php		                PHP
.396053	c2 20		rep #$20	                REP #$20        ; set A long
.396055	a9 0c 03	lda #$030c	                LDA #DIVIDEND         ; set DP to page 0
.396058	5b		tcd		                TCD
.396059	28		plp		                PLP
.39605a	68		pla		                PLA             ; end setdp macro
.39605b	c2 30		rep #$30	                REP #$30        ; set A&X long
.39605d	64 08		stz $0314	                    STZ REMAINDER           ; Initialize the remainder
.39605f	64 0a		stz $0316	                    STZ REMAINDER+2
.396061	a2 20 00	ldx #$0020	                    LDX #32                 ; Set the number of bits to process
.396064	06 00		asl $030c	loop                ASL DIVIDEND
.396066	26 02		rol $030e	                    ROL DIVIDEND+2
.396068	26 08		rol $0314	                    ROL REMAINDER
.39606a	26 0a		rol $0316	                    ROL REMAINDER+2
.39606c	a5 08		lda $0314	                    LDA REMAINDER
.39606e	38		sec		                    SEC
.39606f	e5 04		sbc $0310	                    SBC DIVISOR
.396071	a8		tay		                    TAY
.396072	a5 0a		lda $0316	                    LDA REMAINDER+2
.396074	e5 06		sbc $0312	                    SBC DIVISOR+2
.396076	90 06		bcc $39607e	                    BCC skip
.396078	85 0a		sta $0316	                    STA REMAINDER+2
.39607a	84 08		sty $0314	                    STY REMAINDER
.39607c	e6 00		inc $030c	                    INC DIVIDEND
.39607e	ca		dex		skip                DEX
.39607f	d0 e3		bne $396064	                    BNE loop
.396081	28		plp		                    PLP
.396082	2b		pld		                    PLD
.396083	7a		ply		                    PLY
.396084	fa		plx		                    PLX
.396085	60		rts		                    RTS
.396086					LBA2CHS
.396086	8b		phb		                    PHB
.396087	0b		phd		                    PHD
.396088	08		php		                    PHP
.396089	48		pha		                PHA             ; begin setdbr macro
.39608a	08		php		                PHP
.39608b	e2 20		sep #$20	                SEP #$20        ; set A short
.39608d	a9 00		lda #$00	                LDA #0
.39608f	48		pha		                PHA
.396090	ab		plb		                PLB
.396091	28		plp		                PLP
.396092	68		pla		                PLA             ; end setdbr macro
.396093	48		pha		                PHA             ; begin setdp macro
.396094	08		php		                PHP
.396095	c2 20		rep #$20	                REP #$20        ; set A long
.396097	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39609a	5b		tcd		                TCD
.39609b	28		plp		                PLP
.39609c	68		pla		                PLA             ; end setdp macro
.39609d	c2 30		rep #$30	                REP #$30        ; set A&X long
.39609f	a5 22		lda $0322	                    LDA BIOS_LBA
.3960a1	85 0c		sta $030c	                    STA DIVIDEND
.3960a3	a5 24		lda $0324	                    LDA BIOS_LBA+2
.3960a5	85 0e		sta $030e	                    STA DIVIDEND+2
.3960a7	a9 24 00	lda #$0024	                    LDA #36
.3960aa	85 10		sta $0310	                    STA DIVISOR
.3960ac	64 12		stz $0312	                    STZ DIVISOR+2
.3960ae	20 4d 60	jsr $39604d	                    JSR DIVIDE32
.3960b1	e2 20		sep #$20	                SEP #$20        ; set A short
.3960b3	a5 0c		lda $030c	                    LDA DIVIDEND
.3960b5	85 02		sta $0302	                    STA FDC_CYLINDER
.3960b7	c2 20		rep #$20	                REP #$20        ; set A long
.3960b9	a5 14		lda $0314	                    LDA REMAINDER
.3960bb	85 0c		sta $030c	                    STA DIVIDEND
.3960bd	a5 16		lda $0316	                    LDA REMAINDER+2
.3960bf	85 0e		sta $030e	                    STA DIVIDEND+2
.3960c1	a9 12 00	lda #$0012	                    LDA #18
.3960c4	85 10		sta $0310	                    STA DIVISOR
.3960c6	64 12		stz $0312	                    STZ DIVISOR+2
.3960c8	20 4d 60	jsr $39604d	                    JSR DIVIDE32
.3960cb	e2 20		sep #$20	                SEP #$20        ; set A short
.3960cd	a5 0c		lda $030c	                    LDA DIVIDEND
.3960cf	29 01		and #$01	                    AND #$01
.3960d1	85 01		sta $0301	                    STA FDC_HEAD
.3960d3	a5 14		lda $0314	                    LDA REMAINDER
.3960d5	1a		inc a		                    INC A
.3960d6	85 03		sta $0303	                    STA FDC_SECTOR
.3960d8	28		plp		                    PLP
.3960d9	2b		pld		                    PLD
.3960da	ab		plb		                    PLB
.3960db	6b		rtl		                    RTL
.3960dc					FDC_GETBLOCK
.3960dc	8b		phb		                    PHB
.3960dd	0b		phd		                    PHD
.3960de	08		php		                    PHP
.3960df	48		pha		                PHA             ; begin setdbr macro
.3960e0	08		php		                PHP
.3960e1	e2 20		sep #$20	                SEP #$20        ; set A short
.3960e3	a9 00		lda #$00	                LDA #0
.3960e5	48		pha		                PHA
.3960e6	ab		plb		                PLB
.3960e7	28		plp		                PLP
.3960e8	68		pla		                PLA             ; end setdbr macro
.3960e9	48		pha		                PHA             ; begin setdp macro
.3960ea	08		php		                PHP
.3960eb	c2 20		rep #$20	                REP #$20        ; set A long
.3960ed	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3960f0	5b		tcd		                TCD
.3960f1	28		plp		                PLP
.3960f2	68		pla		                PLA             ; end setdp macro
.3960f3	e2 20		sep #$20	                SEP #$20        ; set A short
.3960f5	a9 03		lda #$03	                    LDA #3                      ; We can retry 3 times
.3960f7	8d 34 05	sta $0534	                    STA FDC_CMD_RETRY
.3960fa	c2 30		rep #$30	                REP #$30        ; set A&X long
.3960fc	22 86 60 39	jsl $396086	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.396100	e2 20		sep #$20	                SEP #$20        ; set A short
.396102	a5 03		lda $0303	                    LDA FDC_SECTOR              ; Just make sure the sector is ok
.396104	f0 29		beq $39612f	                    BEQ read_failure
.396106					try_read
.396106	c2 20		rep #$20	                REP #$20        ; set A long
.396108	22 23 5f 39	jsl $395f23	                    JSL FDC_Read_Sector         ; Read the sector
.39610c	90 14		bcc $396122	                    BCC retry
.39610e	e2 20		sep #$20	                SEP #$20        ; set A short
.396110	a5 06		lda $0306	                    LDA FDC_ST0
.396112	29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.396114	d0 19		bne $39612f	                    BNE read_failure
.396116					ret_success
.396116	e2 20		sep #$20	                SEP #$20        ; set A short
.396118	a9 00		lda #$00	                    LDA #0
.39611a	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.39611d	28		plp		                    PLP
.39611e	2b		pld		                    PLD
.39611f	ab		plb		                    PLB
.396120	38		sec		                    SEC
.396121	6b		rtl		                    RTL
.396122					retry
.396122	e2 20		sep #$20	                SEP #$20        ; set A short
.396124	ce 34 05	dec $0534	                    DEC FDC_CMD_RETRY           ; Decrement the retry counter
.396127	30 13		bmi $39613c	                    BMI pass_failure            ; If it's gone negative, we should quit with an error
.396129	22 1f 5c 39	jsl $395c1f	                    JSL FDC_INIT                ; Otherwise, reinitialize the FDC
.39612d	80 d7		bra $396106	                    BRA try_read                ; And try the read again
.39612f					read_failure
.39612f	e2 20		sep #$20	                SEP #$20        ; set A short
.396131	a9 82		lda #$82	                    LDA #BIOS_ERR_READ
.396133	80 04		bra $396139	                    BRA ret_failure
.396135					seek_failure
.396135	e2 20		sep #$20	                SEP #$20        ; set A short
.396137	a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.396139	8d 20 03	sta $0320	ret_failure         STA @w BIOS_STATUS
.39613c	28		plp		pass_failure        PLP
.39613d	2b		pld		                    PLD
.39613e	ab		plb		                    PLB
.39613f	18		clc		                    CLC
.396140	6b		rtl		                    RTL
.396141					FDC_PUTBLOCK
.396141	8b		phb		                    PHB
.396142	0b		phd		                    PHD
.396143	08		php		                    PHP
.396144	48		pha		                PHA             ; begin setdbr macro
.396145	08		php		                PHP
.396146	e2 20		sep #$20	                SEP #$20        ; set A short
.396148	a9 00		lda #$00	                LDA #0
.39614a	48		pha		                PHA
.39614b	ab		plb		                PLB
.39614c	28		plp		                PLP
.39614d	68		pla		                PLA             ; end setdbr macro
.39614e	48		pha		                PHA             ; begin setdp macro
.39614f	08		php		                PHP
.396150	c2 20		rep #$20	                REP #$20        ; set A long
.396152	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396155	5b		tcd		                TCD
.396156	28		plp		                PLP
.396157	68		pla		                PLA             ; end setdp macro
.396158	e2 20		sep #$20	                SEP #$20        ; set A short
.39615a	a9 03		lda #$03	                    LDA #3                      ; Set the number of retries we're willing to do
.39615c	8d 34 05	sta $0534	                    STA @w FDC_CMD_RETRY
.39615f	c2 30		rep #$30	                REP #$30        ; set A&X long
.396161	22 86 60 39	jsl $396086	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.396165	22 b8 5f 39	jsl $395fb8	retry               JSL FDC_Write_Sector        ; Write the sector
.396169	b0 03		bcs $39616e	                    BCS chk_st0
.39616b	82 28 00	brl $396196	                    BRL attempt_retry
.39616e					chk_st0
.39616e	e2 20		sep #$20	                SEP #$20        ; set A short
.396170	a5 06		lda $0306	                    LDA FDC_ST0
.396172	29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.396174	d0 0c		bne $396182	                    BNE write_failure
.396176					ret_success
.396176	e2 20		sep #$20	                SEP #$20        ; set A short
.396178	a9 00		lda #$00	                    LDA #0
.39617a	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.39617d	28		plp		                    PLP
.39617e	2b		pld		                    PLD
.39617f	ab		plb		                    PLB
.396180	38		sec		                    SEC
.396181	6b		rtl		                    RTL
.396182					write_failure
.396182	e2 20		sep #$20	                SEP #$20        ; set A short
.396184	a5 07		lda $0307	                    LDA FDC_ST1                         ; Check ST1 for write protect
.396186	89 02		bit #$02	                    BIT #FDC_ST1_NW
.396188	f0 04		beq $39618e	                    BEQ generic_err
.39618a	a9 86		lda #$86	                    LDA #BIOS_ERR_WRITEPROT             ; Yes: return a write-protect error
.39618c	80 17		bra $3961a5	                    BRA ret_failure
.39618e	89 10		bit #$10	generic_err         BIT #FDC_ST1_OR                     ; TODO: properly handle over/under run errors
.396190	d0 e4		bne $396176	                    BNE ret_success
.396192	89 80		bit #$80	                    BIT #FDC_ST1_EN                     ; TODO: properly handle end-of-track
.396194	d0 e0		bne $396176	                    BNE ret_success
.396196					attempt_retry
.396196	e2 20		sep #$20	                SEP #$20        ; set A short
.396198	ce 34 05	dec $0534	                    DEC @w FDC_CMD_RETRY                ; Count down the retries
.39619b	d0 c8		bne $396165	                    BNE retry                           ; And retry unless we have none left
.39619d	a9 83		lda #$83	                    LDA #BIOS_ERR_WRITE                 ; Otherwise: return a generic write error
.39619f	80 04		bra $3961a5	                    BRA ret_failure
.3961a1					seek_failure
.3961a1	e2 20		sep #$20	                SEP #$20        ; set A short
.3961a3	a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.3961a5					ret_failure
.3961a5	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.3961a8	28		plp		pass_failure        PLP
.3961a9	2b		pld		                    PLD
.3961aa	ab		plb		                    PLB
.3961ab	18		clc		                    CLC
.3961ac	6b		rtl		                    RTL
.3961ad					FDC_MOUNT
.3961ad	8b		phb		                    PHB
.3961ae	0b		phd		                    PHD
.3961af	08		php		                    PHP
.3961b0	48		pha		                PHA             ; begin setdbr macro
.3961b1	08		php		                PHP
.3961b2	e2 20		sep #$20	                SEP #$20        ; set A short
.3961b4	a9 00		lda #$00	                LDA #0
.3961b6	48		pha		                PHA
.3961b7	ab		plb		                PLB
.3961b8	28		plp		                PLP
.3961b9	68		pla		                PLA             ; end setdbr macro
.3961ba	48		pha		                PHA             ; begin setdp macro
.3961bb	08		php		                PHP
.3961bc	c2 20		rep #$20	                REP #$20        ; set A long
.3961be	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3961c1	5b		tcd		                TCD
.3961c2	28		plp		                PLP
.3961c3	68		pla		                PLA             ; end setdp macro
.3961c4	e2 20		sep #$20	                SEP #$20        ; set A short
.3961c6	c2 10		rep #$10	                REP #$10        ; set X long
.3961c8	a9 00		lda #$00	                    LDA #0
.3961ca	a2 00 00	ldx #$0000	                    LDX #0
.3961cd	9f 00 e3 38	sta $38e300,x	zero_loop           STA DOS_SECTOR,X
.3961d1	e8		inx		                    INX
.3961d2	e0 00 02	cpx #$0200	                    CPX #512
.3961d5	d0 f6		bne $3961cd	                    BNE zero_loop
.3961d7	a9 00		lda #$00	                    LDA #0                                  ; We only support drive 0
.3961d9	85 00		sta $0300	                    STA FDC_DRIVE
.3961db	22 97 5c 39	jsl $395c97	                    JSL FDC_Motor_On                        ; Turn the motor on
.3961df	c2 30		rep #$30	                REP #$30        ; set A&X long
.3961e1	a9 00 00	lda #$0000	                    LDA #0                                  ; We want sector 0
.3961e4	85 22		sta $0322	                    STA BIOS_LBA
.3961e6	85 24		sta $0324	                    STA BIOS_LBA+2
.3961e8	a9 00 e3	lda #$e300	                    LDA #<>DOS_SECTOR                       ; And load it into DOS_SECTOR
.3961eb	85 26		sta $0326	                    STA BIOS_BUFF_PTR
.3961ed	a9 38 00	lda #$0038	                    LDA #`DOS_SECTOR
.3961f0	85 28		sta $0328	                    STA BIOS_BUFF_PTR+2
.3961f2	22 dc 60 39	jsl $3960dc	                    JSL FDC_GETBLOCK                        ; Attempt to read the data
.3961f6	b0 03		bcs $3961fb	                    BCS parse_boot                          ; If ok: start parsing the boot record
.3961f8	82 d3 00	brl $3962ce	                    BRL pass_failure                        ; Pass the error up the chain
.3961fb					parse_boot
.3961fb	e2 20		sep #$20	                SEP #$20        ; set A short
.3961fd	a9 00		lda #$00	                    LDA #PART_TYPE_FAT12                    ; Set the file system to FAT12
.3961ff	8f 01 e0 38	sta $38e001	                    STA @l FILE_SYSTEM
.396203	a9 00		lda #$00	                    LDA #0                                  ; There are no partitions on the disk
.396205	8f 02 e0 38	sta $38e002	                    STA @l PARTITION
.396209	e2 20		sep #$20	                SEP #$20        ; set A short
.39620b	af 0d e3 38	lda $38e30d	                    LDA DOS_SECTOR+BPB_SECPERCLUS12_OFF     ; Get the # of sectors per cluster (usually 1)
.39620f	8f 03 e0 38	sta $38e003	                    STA @l SECTORS_PER_CLUSTER
.396213	c2 20		rep #$20	                REP #$20        ; set A long
.396215	a9 00 00	lda #$0000	                    LDA #0                                  ; First sector of the "partition" is 0
.396218	8f 04 e0 38	sta $38e004	                    STA @l FIRSTSECTOR
.39621c	8f 06 e0 38	sta $38e006	                    STA @l FIRSTSECTOR+2
.396220	af 16 e3 38	lda $38e316	                    LDA DOS_SECTOR+BPB_SECPERFAT12_OFF      ; Get the number of sectors per FAT
.396224	8f 10 e0 38	sta $38e010	                    STA @l SEC_PER_FAT
.396228	a9 00 00	lda #$0000	                    LDA #0
.39622b	8f 12 e0 38	sta $38e012	                    STA @l SEC_PER_FAT+2
.39622f	a9 01 00	lda #$0001	                    LDA #1                                  ; FAT#1 begins at sector 1
.396232	8f 14 e0 38	sta $38e014	                    STA @l FAT_BEGIN_LBA
.396236	18		clc		                    CLC
.396237	6f 10 e0 38	adc $38e010	                    ADC @l SEC_PER_FAT
.39623b	8f 18 e0 38	sta $38e018	                    STA @l FAT2_BEGIN_LBA                   ; FAT#2 begins SEC_PER_FAT sectors later
.39623f	a9 00 00	lda #$0000	                    LDA #0
.396242	8f 16 e0 38	sta $38e016	                    STA @l FAT_BEGIN_LBA+2
.396246	8f 1a e0 38	sta $38e01a	                    STA @L FAT2_BEGIN_LBA+2
.39624a	18		clc		                    CLC                                     ; Calculate the root directory's starting sector
.39624b	af 18 e0 38	lda $38e018	                    LDA @l FAT2_BEGIN_LBA
.39624f	6f 10 e0 38	adc $38e010	                    ADC @l SEC_PER_FAT
.396253	8f 20 e0 38	sta $38e020	                    STA @l ROOT_DIR_FIRST_CLUSTER           ; ROOT_DIR_FIRST_CLUSTER will be a sector LBA for FAT12!
.396257	a9 00 00	lda #$0000	                    LDA #0
.39625a	8f 22 e0 38	sta $38e022	                    STA @l ROOT_DIR_FIRST_CLUSTER+2
.39625e	af 11 e3 38	lda $38e311	                    LDA DOS_SECTOR+BPB_ROOT_MAX_ENTRY12_OFF ; Get the maximum number of directory entries for the root dir
.396262	8f 24 e0 38	sta $38e024	                    STA @l ROOT_DIR_MAX_ENTRY
.396266	4a		lsr a		                    LSR A                                   ; 16 entries per sector
.396267	4a		lsr a		                    LSR A
.396268	4a		lsr a		                    LSR A
.396269	4a		lsr a		                    LSR A                                   ; So now A is the number of sectors in the root directory
.39626a	18		clc		                    CLC
.39626b	6f 20 e0 38	adc $38e020	                    ADC @L ROOT_DIR_FIRST_CLUSTER           ; Add that to the first sector LBA for the root directory
.39626f	8f 1c e0 38	sta $38e01c	                    STA @l CLUSTER_BEGIN_LBA                ; And that is the LBA for the first cluster
.396273	a9 00 00	lda #$0000	                    LDA #0
.396276	8f 1e e0 38	sta $38e01e	                    STA @l CLUSTER_BEGIN_LBA+2
.39627a	af 13 e3 38	lda $38e313	                    LDA DOS_SECTOR+BPB_TOTAL_SECTORS        ; Set the sector limit
.39627e	8f 08 e0 38	sta $38e008	                    STA @l SECTORCOUNT
.396282	a9 00 00	lda #$0000	                    LDA #0
.396285	8f 0a e0 38	sta $38e00a	                    STA @l SECTORCOUNT+2
.396289	af 0e e3 38	lda $38e30e	                    LDA DOS_SECTOR+BPB_RSRVCLUS_OFF         ; Get the number of reserved clusters
.39628d	8f 0c e0 38	sta $38e00c	                    STA @l NUM_RSRV_SEC
.396291	a9 00 02	lda #$0200	                    LDA #DOS_SECTOR_SIZE                    ; Set the size of a FAT12 cluster
.396294	8f 0e e0 38	sta $38e00e	                    STA @l CLUSTER_SIZE
.396298	e2 20		sep #$20	                SEP #$20        ; set A short
.39629a	af 26 e3 38	lda $38e326	                    LDA DOS_SECTOR+BPB_SIGNATUREB           ; Is signature B $29?
.39629e	c9 29		cmp #$29	                    CMP #BPB_EXTENDED_RECORD
.3962a0	80 14		bra $3962b6	                    BRA no_volume_id                        ; No: there is no volume ID
.3962a2					is_extended
.3962a2	c2 20		rep #$20	                REP #$20        ; set A long
.3962a4	af 27 e3 38	lda $38e327	                    LDA DOS_SECTOR+BPB_VOLUMEID             ; Yes: set the volume ID
.3962a8	8f 26 e0 38	sta $38e026	                    STA @l VOLUME_ID
.3962ac	af 29 e3 38	lda $38e329	                    LDA DOS_SECTOR+BPB_VOLUMEID+2
.3962b0	8f 28 e0 38	sta $38e028	                    STA @l VOLUME_ID+2
.3962b4	80 0d		bra $3962c3	                    BRA ret_success
.3962b6					no_volume_id
.3962b6	c2 20		rep #$20	                REP #$20        ; set A long
.3962b8	a9 00 00	lda #$0000	                    LDA #0                                  ; No: blank the Volume ID
.3962bb	8f 26 e0 38	sta $38e026	                    STA @l VOLUME_ID
.3962bf	8f 28 e0 38	sta $38e028	                    STA @L VOLUME_ID+2
.3962c3					ret_success
.3962c3	e2 20		sep #$20	                SEP #$20        ; set A short
.3962c5	a9 00		lda #$00	                    LDA #0
.3962c7	85 20		sta $0320	                    STA BIOS_STATUS
.3962c9	28		plp		                    PLP
.3962ca	2b		pld		                    PLD
.3962cb	ab		plb		                    PLB
.3962cc	38		sec		                    SEC
.3962cd	6b		rtl		                    RTL
.3962ce	28		plp		pass_failure        PLP
.3962cf	2b		pld		                    PLD
.3962d0	ab		plb		                    PLB
.3962d1	18		clc		                    CLC
.3962d2	6b		rtl		                    RTL
.3962d3					FDC_CMDBLOCK
.3962d3	8b		phb		                    PHB
.3962d4	0b		phd		                    PHD
.3962d5	08		php		                    PHP
.3962d6	48		pha		                PHA             ; begin setdbr macro
.3962d7	08		php		                PHP
.3962d8	e2 20		sep #$20	                SEP #$20        ; set A short
.3962da	a9 00		lda #$00	                LDA #0
.3962dc	48		pha		                PHA
.3962dd	ab		plb		                PLB
.3962de	28		plp		                PLP
.3962df	68		pla		                PLA             ; end setdbr macro
.3962e0	48		pha		                PHA             ; begin setdp macro
.3962e1	08		php		                PHP
.3962e2	c2 20		rep #$20	                REP #$20        ; set A long
.3962e4	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3962e7	5b		tcd		                TCD
.3962e8	28		plp		                PLP
.3962e9	68		pla		                PLA             ; end setdp macro
.3962ea	e2 30		sep #$30	                SEP #$30        ; set A&X short
.3962ec	e0 01		cpx #$01	                    CPX #FDC_DEVCMD_MOTOR_ON
.3962ee	f0 0f		beq $3962ff	                    BEQ motor_on
.3962f0	e0 02		cpx #$02	                    CPX #FDC_DEVCMD_MOTOR_OFF
.3962f2	f0 11		beq $396305	                    BEQ motor_off
.3962f4	e0 03		cpx #$03	                    CPX #FDC_DEVCMD_RECAL
.3962f6	f0 13		beq $39630b	                    BEQ recalibrate
.3962f8	64 20		stz $0320	ret_success         STZ BIOS_STATUS
.3962fa	28		plp		                    PLP
.3962fb	2b		pld		                    PLD
.3962fc	ab		plb		                    PLB
.3962fd	38		sec		                    SEC
.3962fe	6b		rtl		                    RTL
.3962ff	22 97 5c 39	jsl $395c97	motor_on            JSL FDC_Motor_On
.396303	80 f3		bra $3962f8	                    BRA ret_success
.396305	22 cb 5c 39	jsl $395ccb	motor_off           JSL FDC_Motor_Off
.396309	80 ed		bra $3962f8	                    BRA ret_success
.39630b	22 f6 5c 39	jsl $395cf6	recalibrate         JSL FDC_Recalibrate_Command
.39630f	b0 e7		bcs $3962f8	                    BCS ret_success
.396311	28		plp		pass_failure        PLP
.396312	2b		pld		                    PLD
.396313	ab		plb		                    PLB
.396314	18		clc		                    CLC
.396315	6b		rtl		                    RTL
.396316					FDC_CHK_MEDIA
.396316	0b		phd		                    PHD
.396317	08		php		                    PHP
.396318	48		pha		                PHA             ; begin setdp macro
.396319	08		php		                PHP
.39631a	c2 20		rep #$20	                REP #$20        ; set A long
.39631c	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39631f	5b		tcd		                TCD
.396320	28		plp		                PLP
.396321	68		pla		                PLA             ; end setdp macro
.396322	22 97 5c 39	jsl $395c97	                    JSL FDC_Motor_On                ; Turn on the motor
.396326	e2 20		sep #$20	                SEP #$20        ; set A short
.396328	af f7 13 af	lda $af13f7	                    LDA @l SIO_FDC_DIR              ; Check if the DSKCHG bit is set
.39632c	89 80		bit #$80	                    BIT #FDC_DIR_DSKCHG
.39632e	f0 42		beq $396372	                    BEQ ret_true                    ; If not: assume the disk is present
.396330	a9 00		lda #$00	                    LDA #0
.396332	85 00		sta $0300	                    STA FDC_DRIVE
.396334	a9 00		lda #$00	                    LDA #0
.396336	85 01		sta $0301	                    STA FDC_HEAD
.396338	a9 50		lda #$50	                    LDA #80
.39633a	85 02		sta $0302	                    STA FDC_CYLINDER
.39633c	22 d6 5e 39	jsl $395ed6	                    JSL FDC_Seek_Track              ; Attempt to seek to track 80
.396340	90 34		bcc $396376	                    BCC ret_false                   ; If fail: return false
.396342	c2 10		rep #$10	                REP #$10        ; set X long
.396344	a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.396347	a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.39634a	22 83 13 39	jsl $391383	                    JSL IDELAY
.39634e	22 2b 5d 39	jsl $395d2b	                    JSL FDC_Sense_Int_Status
.396352	a5 06		lda $0306	                    LDA FDC_ST0
.396354	29 d0		and #$d0	                    AND #%11010000
.396356	d0 1e		bne $396376	                    BNE ret_false
.396358	22 f6 5c 39	jsl $395cf6	                    JSL FDC_Recalibrate_Command     ; Attempt to recalibrate
.39635c	90 18		bcc $396376	                    BCC ret_false                   ; If fail: return false
.39635e	a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.396361	a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.396364	22 83 13 39	jsl $391383	                    JSL IDELAY
.396368	22 2b 5d 39	jsl $395d2b	                    JSL FDC_Sense_Int_Status
.39636c	a5 06		lda $0306	                    LDA FDC_ST0
.39636e	29 d0		and #$d0	                    AND #%11010000
.396370	d0 04		bne $396376	                    BNE ret_false
.396372					ret_true
.396372	28		plp		                    PLP
.396373	2b		pld		                    PLD
.396374	38		sec		                    SEC
.396375	6b		rtl		                    RTL
.396376					ret_false
.396376	28		plp		                    PLP
.396377	2b		pld		                    PLD
.396378	18		clc		                    CLC
.396379	6b		rtl		                    RTL
.39637a					FDC_WRITEVBR
.39637a	8b		phb		                    PHB
.39637b	0b		phd		                    PHD
.39637c	08		php		                    PHP
.39637d	48		pha		                PHA             ; begin setdbr macro
.39637e	08		php		                PHP
.39637f	e2 20		sep #$20	                SEP #$20        ; set A short
.396381	a9 00		lda #$00	                LDA #0
.396383	48		pha		                PHA
.396384	ab		plb		                PLB
.396385	28		plp		                PLP
.396386	68		pla		                PLA             ; end setdbr macro
.396387	48		pha		                PHA             ; begin setdp macro
.396388	08		php		                PHP
.396389	c2 20		rep #$20	                REP #$20        ; set A long
.39638b	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39638e	5b		tcd		                TCD
.39638f	28		plp		                PLP
.396390	68		pla		                PLA             ; end setdp macro
.396391	22 ad 61 39	jsl $3961ad	                    JSL FDC_MOUNT               ; Mount the floppy disk
.396395	c2 30		rep #$30	                REP #$30        ; set A&X long
.396397	a9 00 00	lda #$0000	                    LDA #0                      ; Clear the sector buffer
.39639a	a2 00 00	ldx #$0000	                    LDX #0
.39639d	9f 00 e3 38	sta $38e300,x	clr_loop            STA DOS_SECTOR,X
.3963a1	e8		inx		                    INX
.3963a2	e8		inx		                    INX
.3963a3	e0 00 02	cpx #$0200	                    CPX #512
.3963a6	d0 f5		bne $39639d	                    BNE clr_loop
.3963a8	e2 20		sep #$20	                SEP #$20        ; set A short
.3963aa	a2 00 00	ldx #$0000	                    LDX #0                      ; Copy the prototype VBR to the sector buffer
.3963ad	bf 10 64 39	lda $396410,x	copy_loop           LDA FDC_VBR_BEGIN,X
.3963b1	9f 00 e3 38	sta $38e300,x	                    STA DOS_SECTOR,X
.3963b5	e8		inx		                    INX
.3963b6	e0 c9 00	cpx #$00c9	                    CPX #<>(FDC_VBR_END - FDC_VBR_BEGIN + 1)
.3963b9	d0 f2		bne $3963ad	                    BNE copy_loop
.3963bb	a0 00 00	ldy #$0000	                    LDY #0                      ; Copy the boot binary path to the VBR
.3963be	a2 40 00	ldx #$0040	                    LDX #FDC_VBR_PATH
.3963c1	b7 3c		lda [$035c],y	path_copy_loop      LDA [DOS_RUN_PTR],Y
.3963c3	9f 00 e3 38	sta $38e300,x	                    STA DOS_SECTOR,X
.3963c7	f0 07		beq $3963d0	                    BEQ path_copy_done
.3963c9	e8		inx		                    INX
.3963ca	c8		iny		                    INY
.3963cb	c0 80 00	cpy #$0080	                    CPY #128
.3963ce	d0 f1		bne $3963c1	                    BNE path_copy_loop
.3963d0					path_copy_done
.3963d0	c2 20		rep #$20	                REP #$20        ; set A long
.3963d2	a9 55 aa	lda #$aa55	                    LDA #$AA55                  ; Set the VBR signature bytes at the end
.3963d5	8f fe e4 38	sta $38e4fe	                    STA DOS_SECTOR+BPB_SIGNATURE
.3963d9	c2 20		rep #$20	                REP #$20        ; set A long
.3963db	a9 00 e3	lda #$e300	                    LDA #<>DOS_SECTOR           ; Point to the BIOS buffer
.3963de	85 06		sta $0326	                    STA BIOS_BUFF_PTR
.3963e0	a9 38 00	lda #$0038	                    LDA #`DOS_SECTOR
.3963e3	85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.3963e5	a9 00 00	lda #$0000	                    LDA #0                      ; Set the sector to #0 (boot record)
.3963e8	85 02		sta $0322	                    STA BIOS_LBA
.3963ea	85 04		sta $0324	                    STA BIOS_LBA+2
.3963ec	e2 20		sep #$20	                SEP #$20        ; set A short
.3963ee	a9 00		lda #$00	                    LDA #BIOS_DEV_FDC
.3963f0	85 01		sta $0321	                    STA BIOS_DEV
.3963f2	22 24 10 38	jsl $381024	                    JSL PUTBLOCK                ; Attempt to write the boot record
.3963f6	b0 09		bcs $396401	                    BCS ret_success
.3963f8	22 cb 5c 39	jsl $395ccb	                    JSL FDC_Motor_Off
.3963fc	28		plp		                    PLP                         ; Return the failure
.3963fd	2b		pld		                    PLD
.3963fe	ab		plb		                    PLB
.3963ff	18		clc		                    CLC
.396400	6b		rtl		                    RTL
.396401	22 cb 5c 39	jsl $395ccb	ret_success         JSL FDC_Motor_Off
.396405	e2 20		sep #$20	                SEP #$20        ; set A short
.396407	a9 00		lda #$00	                    LDA #0
.396409	85 00		sta $0320	                    STA BIOS_STATUS
.39640b	28		plp		                    PLP
.39640c	2b		pld		                    PLD
.39640d	ab		plb		                    PLB
.39640e	38		sec		                    SEC
.39640f	6b		rtl		                    RTL
=62					FDC_BOOT_START = 62                         ; Entry point to the boot code
=64					FDC_VBR_PATH = 64                           ; Offset to the path in the VBR
.396410					FDC_VBR_BEGIN
>396410	eb 00 90			start               .byte $EB, $00, $90     ; Entry point
>396413	43 32 35 36 44 4f 53 20		magic               .text "C256DOS "        ; OEM name / magic text for booting
>39641b	00 02				bytes_per_sec       .word 512               ; How many bytes per sector
>39641d	01				sec_per_cluster     .byte 1                 ; How many sectors per cluster
>39641e	01 00				rsrv_sectors        .word 1                 ; Number of reserved sectors
>396420	02				num_fat             .byte 2                 ; Number of FATs
>396421	e0 00				max_dir_entry       .word (32-18)*16        ; Total number of root dir entries
>396423	40 0b				total_sectors       .word 2880              ; Total sectors
>396425	f0				media_descriptor    .byte $F0               ; 3.5" 1.44 MB floppy 80 tracks, 18 tracks per sector
>396426	09 00				sec_per_fat         .word 9                 ; Sectors per FAT
>396428	12 00				sec_per_track       .word 18                ; Sectors per track
>39642a	02 00				num_head            .word 2                 ; Number of heads
>39642c	00 00 00 00			ignore2             .dword 0
>396430	00 00 00 00			fat32_sector        .dword 0                ; # of sectors in FAT32
>396434	00 00				ignore3             .word 0
>396436	29				boot_signature      .byte $29
>396437	78 56 34 12			volume_id           .dword $12345678        ; Replaced by code
>39643b	55 4e 54 49 54 4c 45 44		volume_name         .text "UNTITLED   "     ; Replace by code
>396443	20 20 20
>396446	46 41 54 31 32 20 20 20		fs_type             .text "FAT12   "
.39644e	80 40		bra $396490	                    BRA vbr_start
>396450					file_path           .fill 64                ; Reserve 64 bytes for a path and any options
.396490					vbr_start
.396490	c2 20		rep #$20	                REP #$20        ; set A long
.396492	a9 40 e3	lda #$e340	                    LDA #<>(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.396495	8f 60 03 00	sta $000360	                    STA @l DOS_RUN_PARAM
.396499	a9 38 00	lda #$0038	                    LDA #`(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.39649c	8f 62 03 00	sta $000362	                    STA @l DOS_RUN_PARAM+2
.3964a0	22 4c 55 39	jsl $39554c	                    JSL IF_RUN              ; And try to execute the binary file
.3964a4	b0 0c		bcs $3964b2	                    BCS lock                ; If it returned success... lock up... I guess?
.3964a6					error
.3964a6	e2 20		sep #$20	                SEP #$20        ; set A short
.3964a8	4b		phk		                    PHK                     ; Otherwise, print an error message
.3964a9	ab		plb		                    PLB
.3964aa	62 08 00	per $3964b5	                    PER message
.3964ad	fa		plx		                    PLX
.3964ae	22 1c 10 38	jsl $38101c	                    JSL PUTS
.3964b2	ea		nop		lock                NOP                     ; And lock up
.3964b3	80 fd		bra $3964b2	                    BRA lock
>3964b5	43 6f 75 6c 64 20 6e 6f		message             .null "Could not find a bootable binary.",13
>3964bd	74 20 66 69 6e 64 20 61 20 62 6f 6f 74 61 62 6c
>3964cd	65 20 62 69 6e 61 72 79 2e 0d 00
.3964d8					FDC_VBR_END

;******  Return to file: src\kernel.asm


;******  Processing file: src\ide_library.asm

.0000					IDE_ID
>0000	00 00				General_Config        .word $0000
>0002	00 00				Obsolete0             .word $0000
>0004	00 00				Specific_Config       .word $0000
>0006	00 00				Obsolete1             .word $0000
>0008	00 00				Retired0              .word $0000
>000a	00 00				Retired1              .word $0000
>000c	00 00				Obsolete2             .word $0000
>000e	00 00				Reserved_CFlash0      .word $0000
>0010	00 00				Reserved_CFlash1      .word $0000
>0012	00 00				Retired2              .word $0000
>0014	00 00 00 00 00 00 00 00		Serial_Number_String  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>001c	00 00 00 00 00 00 00 00 00 00 00 00
>0028	00 00 00 00			Retired3              .word $0000, $0000
>002c	00 00				Obsolete3             .word $0000
>002e	00 00 00 00 00 00 00 00		Firmware_Rev_String   .byte $00, $00, $00, $00, $00, $00, $00, $00
>0036	00 00 00 00 00 00 00 00		Model_Number_String   .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>003e	00 00 00 00 00 00 00 00
>0046	00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>004e	00 00 00 00 00 00 00 00
>0056	00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00
>005e	00 00				Max_Number_Logic_Sec  .word $0000
>0060	00 00				Trusted_Comp_Feature  .word $0000
>0062	00 00 00 00			Capabilities          .word $0000, $0000
>0066	00 00 00 00			Obsolete4             .word $0000, $0000
>006a	00 00				Free_Fall_Control     .word $0000
>006c	00 00 00 00 00 00 00 00		Obsolete5             .word $0000, $0000, $0000, $0000, $0000
>0074	00 00
>0076	00 00				Reserved0             .word $0000
>0078	00 00 00 00			Total_Addy_Logic_Sec  .word $0000, $0000
>007c	00 00				Obsolete6             .word $0000
>007e	00 00 00 00			Reserved1             .word $0000, $0000
>0082	00 00				Min_Multiword_DMA_Trf .word $0000
>0084	00 00				Manu_Recommended_Mult .word $0000
>0086	00 00				Min_PIO_Trf           .word $0000      ; Word 67
>0088	00 00				Min_PIO_Trf_with_IORD .word $0000      ; Word 68
>008a	00 00 00 00			Reserved2             .word $0000, $0000
>008e	00 00 00 00 00 00 00 00		Reserved3             .word $0000, $0000, $0000, $0000
>0096	00 00				Queue_Dept            .word $0000
>0098	00 00				SATA_Capabilities     .word $0000
>009a	00 00				Reserved_SATA         .word $0000
>009c	00 00				Sup_Feat_SATA         .word $0000
>009e	00 00				Sup_Feat_SATA_Enabled .word $0000    ; Word 79
>00a0	00 00				Major_Version_Number  .word $0000    ; Word 80
>00a2	00 00				Minor_Version_Number  .word $0000    ; Word 81
>00a4	00 00 00 00 00 00 00 00		Cmd_And_Features_Sup  .word $0000, $0000, $0000, $0000, $0000, $0000
>00ac	00 00 00 00
>00b0	00 00				UDMA_Modes            .word $0000
>00b2	00 00 00 00			Reserved4             .word $0000, $0000 ; Word 89
>00b6	00 00				Current_APM_Level     .word $0000
>00b8	00 00				Master_Password_Ident .word $0000
>00ba	00 00				Hardware_Reset_Result .word $0000
>00bc	00 00				Current_AAM_Value     .word $0000  ; Word 94
>00be	00 00				Stream_Min_Req_Size   .word $0000  ; Word 95
>00c0	00 00				Stream_Trf_Time_DMA   .word $0000  ; Word 96
>00c2	00 00				Stream_Access_Lat     .word $0000
>00c4	00 00 00 00			Streaming_Perf_Gran   .word $0000, $0000
>00c8	00 00 00 00 00 00 00 00		Tot_Num_Add_Logic_Sec .word $0000, $0000, $0000, $0000
>00d0	00 00				Streaming_Trf_Time    .word $0000 ; Word 104
>00d2	00 00				Reserved5             .word $0000 ; Word 105
.3964d8					IDE_TEST
.3964d8	08		php		                PHP
.3964d9	c2 20		rep #$20	                REP #$20        ; set A long
.3964db	a9 00 e3	lda #$e300	                LDA #<>DOS_SECTOR
.3964de	8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.3964e2	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.3964e5	8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.3964e9	22 06 66 39	jsl $396606	                JSL IDE_IDENTIFY
.3964ed	b0 03		bcs $3964f2	                BCS id_ok
.3964ef	82 ab 00	brl $39659d	                BRL done
.3964f2					id_ok
.3964f2	c2 10		rep #$10	                REP #$10        ; set X long
.3964f4	e2 20		sep #$20	                SEP #$20        ; set A short
.3964f6	a0 28 00	ldy #$0028	                LDY #40
.3964f9	a2 36 00	ldx #$0036	                LDX #27*2
.3964fc	bf 01 e3 38	lda $38e301,x	pr_model        LDA DOS_SECTOR+1,X
.396500	22 18 10 38	jsl $381018	                JSL PUTC
.396504	bf 00 e3 38	lda $38e300,x	                LDA DOS_SECTOR,X
.396508	22 18 10 38	jsl $381018	                JSL PUTC
.39650c	e8		inx		                INX
.39650d	e8		inx		                INX
.39650e	88		dey		                DEY
.39650f	88		dey		                DEY
.396510	d0 ea		bne $3964fc	                BNE pr_model
.396512	c2 10		rep #$10	                REP #$10        ; set X long
.396514	e2 20		sep #$20	                SEP #$20        ; set A short
.396516	a0 14 00	ldy #$0014	                LDY #20
.396519	a2 14 00	ldx #$0014	                LDX #10*2
.39651c	bf 01 e3 38	lda $38e301,x	pr_serial       LDA DOS_SECTOR+1,X
.396520	22 18 10 38	jsl $381018	                JSL PUTC
.396524	bf 00 e3 38	lda $38e300,x	                LDA DOS_SECTOR,X
.396528	22 18 10 38	jsl $381018	                JSL PUTC
.39652c	e8		inx		                INX
.39652d	e8		inx		                INX
.39652e	88		dey		                DEY
.39652f	88		dey		                DEY
.396530	d0 ea		bne $39651c	                BNE pr_serial
.396532	22 6c 10 38	jsl $38106c	                JSL PRINTCR
.396536	c2 30		rep #$30	                REP #$30        ; set A&X long
.396538	a9 01 00	lda #$0001	                LDA #1                 ; Set LBA = 1
.39653b	8f 22 03 00	sta $000322	                STA @l BIOS_LBA
.39653f	a9 00 00	lda #$0000	                LDA #0
.396542	8f 24 03 00	sta $000324	                STA @l BIOS_LBA+2
.396546	a9 00 e3	lda #$e300	                LDA #<>DOS_SECTOR
.396549	8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.39654d	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.396550	8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.396554	a2 00 00	ldx #$0000	                LDX #0                  ; Initialize the block to some recognizable data
.396557	a9 a5 5a	lda #$5aa5	                LDA #$5AA5
.39655a	9f 00 e3 38	sta $38e300,x	init_loop       STA DOS_SECTOR,X
.39655e	e8		inx		                INX
.39655f	e8		inx		                INX
.396560	e0 00 02	cpx #$0200	                CPX #512
.396563	d0 f5		bne $39655a	                BNE init_loop
.396565	22 25 67 39	jsl $396725	                JSL IDE_PUTBLOCK        ; Attempt to write the block
.396569	b0 06		bcs $396571	                BCS read_sect1
.39656b	22 6c 10 38	jsl $38106c	                JSL PRINTCR
.39656f	80 2c		bra $39659d	                BRA done
.396571	a9 01 00	lda #$0001	read_sect1      LDA #1                 ; Set LBA = 1
.396574	8f 22 03 00	sta $000322	                STA @l BIOS_LBA
.396578	a9 00 00	lda #$0000	                LDA #0
.39657b	8f 24 03 00	sta $000324	                STA @l BIOS_LBA+2
.39657f	a9 00 e5	lda #$e500	                LDA #<>DOS_FAT_SECTORS
.396582	8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.396586	a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.396589	8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.39658d	22 94 66 39	jsl $396694	                JSL IDE_GETBLOCK        ; Attempt to read the block
.396591	b0 06		bcs $396599	                BCS all_ok
.396593	22 6c 10 38	jsl $38106c	                JSL PRINTCR
.396597	80 04		bra $39659d	                BRA done
.396599					all_ok
.396599	22 6c 10 38	jsl $38106c	                JSL PRINTCR
.39659d	28		plp		done            PLP
.39659e	6b		rtl		                RTL
.39659f					IDE_INIT
.39659f	e2 20		sep #$20	                SEP #$20        ; set A short
.3965a1	20 c2 65	jsr $3965c2	              JSR IDE_DRIVE_BSY ; Check to see if drive is busy
.3965a4	a9 00		lda #$00	              LDA #$00
.3965a6	8f 35 e8 af	sta $afe835	              STA IDE_CLDR_HI
.3965aa	8f 34 e8 af	sta $afe834	              STA IDE_CLDR_LO
.3965ae	8f 32 e8 af	sta $afe832	              STA IDE_SECT_CNT
.3965b2	a9 01		lda #$01	              LDA #$01
.3965b4	8f 33 e8 af	sta $afe833	              STA IDE_SECT_SRT
.3965b8	a9 a0		lda #$a0	              LDA #$A0 ; HEAD 0 - Select Master Drive
.3965ba	8f 36 e8 af	sta $afe836	              STA IDE_HEAD
.3965be	20 e0 65	jsr $3965e0	              JSR IDE_DRV_READY_NOTBUSY
.3965c1	6b		rtl		              RTL
.3965c2					IDE_DRIVE_BSY
.3965c2	08		php		                PHP
.3965c3	e2 20		sep #$20	                SEP #$20        ; set A short
.3965c5	af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.3965c9	29 80		and #$80	                AND #IDE_STAT_BSY         ; Check for RDY Bit, this needs to be 1'b1
.3965cb	c9 80		cmp #$80	                CMP #IDE_STAT_BSY         ; If not go read again
.3965cd	f0 f6		beq $3965c5	                BEQ loop
.3965cf	28		plp		                PLP
.3965d0	60		rts		                RTS
.3965d1					IDE_DRIVE_READY
.3965d1	08		php		                PHP
.3965d2	e2 20		sep #$20	                SEP #$20        ; set A short
.3965d4	af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.3965d8	29 40		and #$40	                AND #IDE_STAT_DRDY          ; Check to see if the Busy Signal is Cleared
.3965da	c9 40		cmp #$40	                CMP #IDE_STAT_DRDY          ; if it is still one, then go back to read again.
.3965dc	d0 f6		bne $3965d4	                BNE loop
.3965de	28		plp		                PLP
.3965df	60		rts		                RTS
.3965e0					IDE_DRV_READY_NOTBUSY
.3965e0	08		php		                PHP
.3965e1	e2 20		sep #$20	                SEP #$20        ; set A short
.3965e3	af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT                 ; Check the status
.3965e7	29 c0		and #$c0	                AND #IDE_STAT_BSY | IDE_STAT_DRDY
.3965e9	c9 40		cmp #$40	                CMP #IDE_STAT_DRDY                  ; Is it READY but not BUSY?
.3965eb	d0 f6		bne $3965e3	                BNE loop                            ; No: keep waiting
.3965ed	28		plp		ret_success     PLP                                 ; Return success
.3965ee	38		sec		                SEC
.3965ef	60		rts		                RTS
.3965f0	8f 07 03 00	sta $000307	ret_failure     STA @l FDC_ST1                      ; Save the status code to FDC_ST1
.3965f4	28		plp		                PLP                                 ; Return failure
.3965f5	18		clc		                CLC
.3965f6	60		rts		                RTS
.3965f7					IDE_NOT_DRQ
.3965f7	08		php		                PHP
.3965f8	e2 20		sep #$20	                SEP #$20        ; set A short
.3965fa	af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT     ; Get the status
.3965fe	29 08		and #$08	                AND #IDE_STAT_DRQ
.396600	c9 08		cmp #$08	                CMP #IDE_STAT_DRQ       ; Is the DRQ bit set?
.396602	d0 f6		bne $3965fa	                BNE loop                ; No: keep waiting
.396604	28		plp		                PLP
.396605	60		rts		                RTS
.396606					IDE_IDENTIFY
.396606	5a		phy		                PHY
.396607	8b		phb		                PHB
.396608	0b		phd		                PHD
.396609	08		php		                PHP
.39660a	48		pha		                PHA             ; begin setdbr macro
.39660b	08		php		                PHP
.39660c	e2 20		sep #$20	                SEP #$20        ; set A short
.39660e	a9 00		lda #$00	                LDA #0
.396610	48		pha		                PHA
.396611	ab		plb		                PLB
.396612	28		plp		                PLP
.396613	68		pla		                PLA             ; end setdbr macro
.396614	48		pha		                PHA             ; begin setdp macro
.396615	08		php		                PHP
.396616	c2 20		rep #$20	                REP #$20        ; set A long
.396618	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39661b	5b		tcd		                TCD
.39661c	28		plp		                PLP
.39661d	68		pla		                PLA             ; end setdp macro
.39661e	e2 20		sep #$20	                SEP #$20        ; set A short
.396620	20 e0 65	jsr $3965e0	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.396623	a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.396625	29 07		and #$07	                AND #$07
.396627	09 a0		ora #$a0	                ORA #%10100000                  ; Select DEV=0 and LBA mode = 1
.396629	8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.39662d	20 e0 65	jsr $3965e0	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.396630	e2 20		sep #$20	                SEP #$20        ; set A short
.396632	a9 00		lda #$00	                LDA #0                          ; Clear sector count and LBA
.396634	8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.396638	8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.39663c	8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.396640	8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.396644	a9 ec		lda #$ec	                LDA #IDE_CMD_IDENTIFY           ; The IDENTIFY command
.396646	8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT             ; Check the status
.39664a	f0 29		beq $396675	                BEQ no_media                    ; If 0: there is no drive
.39664c	20 c2 65	jsr $3965c2	                JSR IDE_DRIVE_BSY               ; Othewise: wait for drive to not be busy
.39664f	20 e0 65	jsr $3965e0	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396652	90 2d		bcc $396681	                BCC ret_failure                 ; If an error occurred, return it
.396654	c2 30		rep #$30	                REP #$30        ; set A&X long
.396656	a0 00 00	ldy #$0000	                LDY #0
.396659	af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.39665d	97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.39665f	c8		iny		                INY                             ; Move to the next position
.396660	c8		iny		                INY
.396661	c0 00 02	cpy #$0200	                CPY #512
.396664	d0 f3		bne $396659	                BNE read_loop
.396666					ret_success
.396666	e2 20		sep #$20	                SEP #$20        ; set A short
.396668	a9 00		lda #$00	                LDA #0
.39666a	85 00		sta $0320	                STA BIOS_STATUS
.39666c	8d 06 03	sta $0306	                STA @w FDC_ST0
.39666f	28		plp		                PLP                             ; Return success
.396670	2b		pld		                PLD
.396671	ab		plb		                PLB
.396672	7a		ply		                PLY
.396673	38		sec		                SEC
.396674	6b		rtl		                RTL
.396675					no_media
.396675	e2 20		sep #$20	                SEP #$20        ; set A short
.396677	a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA
.396679	80 0a		bra $396685	                BRA pass_failure
.39667b					not_ata
.39667b	e2 20		sep #$20	                SEP #$20        ; set A short
.39667d	a9 8a		lda #$8a	                LDA #BIOS_ERR_NOTATA
.39667f	80 04		bra $396685	                BRA pass_failure
.396681					ret_failure
.396681	e2 20		sep #$20	                SEP #$20        ; set A short
.396683	a9 82		lda #$82	                LDA #BIOS_ERR_READ
.396685	85 00		sta $0320	pass_failure    STA BIOS_STATUS
.396687	af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.39668b	8d 06 03	sta $0306	                STA @w FDC_ST0
.39668e	28		plp		                PLP
.39668f	2b		pld		                PLD
.396690	ab		plb		                PLB
.396691	7a		ply		                PLY
.396692	18		clc		                CLC
.396693	6b		rtl		                RTL
.396694					IDE_GETBLOCK
.396694	5a		phy		                PHY
.396695	8b		phb		                PHB
.396696	0b		phd		                PHD
.396697	08		php		                PHP
.396698	48		pha		                PHA             ; begin setdbr macro
.396699	08		php		                PHP
.39669a	e2 20		sep #$20	                SEP #$20        ; set A short
.39669c	a9 00		lda #$00	                LDA #0
.39669e	48		pha		                PHA
.39669f	ab		plb		                PLB
.3966a0	28		plp		                PLP
.3966a1	68		pla		                PLA             ; end setdbr macro
.3966a2	48		pha		                PHA             ; begin setdp macro
.3966a3	08		php		                PHP
.3966a4	c2 20		rep #$20	                REP #$20        ; set A long
.3966a6	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3966a9	5b		tcd		                TCD
.3966aa	28		plp		                PLP
.3966ab	68		pla		                PLA             ; end setdp macro
.3966ac	e2 20		sep #$20	                SEP #$20        ; set A short
.3966ae	20 e0 65	jsr $3965e0	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.3966b1	a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.3966b3	29 07		and #$07	                AND #$07
.3966b5	09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.3966b7	8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.3966bb	20 e0 65	jsr $3965e0	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.3966be	e2 20		sep #$20	                SEP #$20        ; set A short
.3966c0	a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.3966c2	8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.3966c6	a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.3966c8	8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.3966cc	a5 03		lda $0323	                LDA BIOS_LBA+1
.3966ce	8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.3966d2	a5 04		lda $0324	                LDA BIOS_LBA+2
.3966d4	8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.3966d8	a9 21		lda #$21	                LDA #IDE_CMD_READ_SECTOR        ; The READ SECTOR command
.3966da	8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.3966de	ea		nop		                NOP                             ; Wait about 500ns
.3966df	ea		nop		                NOP
.3966e0	ea		nop		                NOP
.3966e1	ea		nop		                NOP
.3966e2	20 e0 65	jsr $3965e0	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.3966e5	90 2b		bcc $396712	                BCC ret_failure                 ; If an error occurred, return it
.3966e7	e2 20		sep #$20	                SEP #$20        ; set A short
.3966e9	af 30 e8 af	lda $afe830	                LDA @l IDE_DATA                 ; Read and toss out one byte from the 8-bit interface
.3966ed	a0 00 00	ldy #$0000	                LDY #0
.3966f0	c2 20		rep #$20	                REP #$20        ; set A long
.3966f2	af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.3966f6	97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.3966f8	c8		iny		                INY                             ; Move to the next position
.3966f9	c8		iny		                INY
.3966fa	c0 00 02	cpy #$0200	                CPY #512
.3966fd	d0 f3		bne $3966f2	                BNE read_loop
.3966ff	ea		nop		                NOP                             ; Wait about 500ns
.396700	ea		nop		                NOP
.396701	ea		nop		                NOP
.396702	ea		nop		                NOP
.396703					ret_success
.396703	e2 20		sep #$20	                SEP #$20        ; set A short
.396705	a9 00		lda #$00	                LDA #0
.396707	85 00		sta $0320	                STA BIOS_STATUS
.396709	8d 06 03	sta $0306	                STA @w FDC_ST0
.39670c	28		plp		                PLP                             ; Return success
.39670d	2b		pld		                PLD
.39670e	ab		plb		                PLB
.39670f	7a		ply		                PLY
.396710	38		sec		                SEC
.396711	6b		rtl		                RTL
.396712					ret_failure
.396712	e2 20		sep #$20	                SEP #$20        ; set A short
.396714	af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.396718	8d 06 03	sta $0306	                STA @w FDC_ST0
.39671b	a9 82		lda #$82	                LDA #BIOS_ERR_READ
.39671d	85 00		sta $0320	                STA BIOS_STATUS
.39671f	28		plp		                PLP
.396720	2b		pld		                PLD
.396721	ab		plb		                PLB
.396722	7a		ply		                PLY
.396723	18		clc		                CLC
.396724	6b		rtl		                RTL
.396725					IDE_PUTBLOCK
.396725	5a		phy		                PHY
.396726	8b		phb		                PHB
.396727	0b		phd		                PHD
.396728	08		php		                PHP
.396729	48		pha		                PHA             ; begin setdbr macro
.39672a	08		php		                PHP
.39672b	e2 20		sep #$20	                SEP #$20        ; set A short
.39672d	a9 00		lda #$00	                LDA #0
.39672f	48		pha		                PHA
.396730	ab		plb		                PLB
.396731	28		plp		                PLP
.396732	68		pla		                PLA             ; end setdbr macro
.396733	48		pha		                PHA             ; begin setdp macro
.396734	08		php		                PHP
.396735	c2 20		rep #$20	                REP #$20        ; set A long
.396737	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39673a	5b		tcd		                TCD
.39673b	28		plp		                PLP
.39673c	68		pla		                PLA             ; end setdp macro
.39673d	e2 20		sep #$20	                SEP #$20        ; set A short
.39673f	20 e0 65	jsr $3965e0	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.396742	a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.396744	29 07		and #$07	                AND #$07
.396746	09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.396748	8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.39674c	20 e0 65	jsr $3965e0	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.39674f	e2 20		sep #$20	                SEP #$20        ; set A short
.396751	a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.396753	8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.396757	a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.396759	8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.39675d	a5 03		lda $0323	                LDA BIOS_LBA+1
.39675f	8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.396763	a5 04		lda $0324	                LDA BIOS_LBA+2
.396765	8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.396769	a9 30		lda #$30	                LDA #IDE_CMD_WRITE_SECTOR       ; The READ SECTOR command
.39676b	8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.39676f	ea		nop		                NOP                             ; Wait about 500ns
.396770	ea		nop		                NOP
.396771	ea		nop		                NOP
.396772	ea		nop		                NOP
.396773	20 e0 65	jsr $3965e0	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396776	90 33		bcc $3967ab	                BCC ret_failure                 ; If an error occurred, return it
.396778	c2 30		rep #$30	                REP #$30        ; set A&X long
.39677a	a0 00 00	ldy #$0000	                LDY #0
.39677d	b7 06		lda [$0326],y	read_loop       LDA [BIOS_BUFF_PTR],Y           ; Get the word from the buffer
.39677f	8f 38 e8 af	sta $afe838	                STA @l IDE_DATA_LO              ; Save the word to the device
.396783	c8		iny		                INY                             ; Move to the next position
.396784	c8		iny		                INY
.396785	c0 00 02	cpy #$0200	                CPY #512
.396788	d0 f3		bne $39677d	                BNE read_loop
.39678a	ea		nop		                NOP                             ; Wait about 500ns
.39678b	ea		nop		                NOP
.39678c	ea		nop		                NOP
.39678d	ea		nop		                NOP
.39678e	20 e0 65	jsr $3965e0	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396791	90 18		bcc $3967ab	                BCC ret_failure                 ; If an error occurred, return it
.396793	af 37 e8 af	lda $afe837	                LDA @l IDE_CMD_STAT             ; Check the status
.396797	89 21 00	bit #$0021	                BIT #IDE_STAT_ERR | IDE_STAT_DF
.39679a	d0 0f		bne $3967ab	                BNE ret_failure                 ; If error: return failure
.39679c					ret_success
.39679c	e2 20		sep #$20	                SEP #$20        ; set A short
.39679e	a9 00		lda #$00	                LDA #0
.3967a0	85 00		sta $0320	                STA BIOS_STATUS
.3967a2	8d 06 03	sta $0306	                STA @w FDC_ST0
.3967a5	28		plp		                PLP                             ; Return success
.3967a6	2b		pld		                PLD
.3967a7	ab		plb		                PLB
.3967a8	7a		ply		                PLY
.3967a9	38		sec		                SEC
.3967aa	6b		rtl		                RTL
.3967ab					ret_failure
.3967ab	e2 20		sep #$20	                SEP #$20        ; set A short
.3967ad	af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.3967b1	8d 06 03	sta $0306	                STA @w FDC_ST0
.3967b4	a9 82		lda #$82	                LDA #BIOS_ERR_READ
.3967b6	85 00		sta $0320	                STA BIOS_STATUS
.3967b8	28		plp		                PLP
.3967b9	2b		pld		                PLD
.3967ba	ab		plb		                PLB
.3967bb	7a		ply		                PLY
.3967bc	18		clc		                CLC
.3967bd	6b		rtl		                RTL

;******  Return to file: src\kernel.asm

.3967be					KERNEL_DATA
>3967be	20 20 20 20 0b 0c 0b 0c		greet_msg       .text $20, $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, " FFFFFFF MMMMMMMM XX    XXX " ,$0D
>3967c6	0b 0c 0b 0c 0b 0c 20 46 46 46 46 46 46 46 20 4d
>3967d6	4d 4d 4d 4d 4d 4d 4d 20 58 58 20 20 20 20 58 58
>3967e6	58 20 0d
>3967e9	20 20 20 0b 0c 0b 0c 0b		                .text $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM   XX XXX   ",$0D
>3967f1	0c 0b 0c 0b 0c 20 46 46 20 20 20 20 20 20 4d 4d
>396801	20 4d 4d 20 4d 4d 20 20 20 58 58 20 58 58 58 20
>396811	20 20 0d
>396814	20 20 0b 0c 0b 0c 0b 0c		                .text $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FFFFF   MM MM MM    XXX      ",$0D
>39681c	0b 0c 0b 0c 20 46 46 46 46 46 20 20 20 4d 4d 20
>39682c	4d 4d 20 4d 4d 20 20 20 20 58 58 58 20 20 20 20
>39683c	20 20 0d
>39683f	20 0b 0c 0b 0c 0b 0c 0b		                .text $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM  XXX  XX     ",$0D
>396847	0c 0b 0c 20 46 46 20 20 20 20 20 20 4d 4d 20 4d
>396857	4d 20 4d 4d 20 20 58 58 58 20 20 58 58 20 20 20
>396867	20 20 0d
>39686a	0b 0c 0b 0c 0b 0c 0b 0c		                .text $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM XXX     XX    ",$0D
>396872	0b 0c 20 46 46 20 20 20 20 20 20 4d 4d 20 4d 4d
>396882	20 4d 4d 20 58 58 58 20 20 20 20 20 58 58 20 20
>396892	20 20 0d
>396895	0d 43 32 35 36 20 46 4f		                .text $0D, "C256 FOENIX FMX -- 3,670,016 Bytes Free", $0D
>39689d	45 4e 49 58 20 46 4d 58 20 2d 2d 20 33 2c 36 37
>3968ad	30 2c 30 31 36 20 42 79 74 65 73 20 46 72 65 65
>3968bd	0d
>3968be	77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com - Kernel version: "
>3968c6	66 6f 65 6e 69 78 2e 63 6f 6d 20 2d 20 4b 65 72
>3968d6	6e 65 6c 20 76 65 72 73 69 6f 6e 3a 20

;******  Processing file: src\version.asm

>3968e3	76 30 2e 31 2e 30 2d 61		.text "v0.1.0-alpha+701 (2020-06-14)"
>3968eb	6c 70 68 61 2b 37 30 31 20 28 32 30 32 30 2d 30
>3968fb	36 2d 31 34 29

;******  Return to file: src\kernel.asm

>396900	0d 00				                .text $0D,$00
.396902					old_pc_style_stat
>396902	1d 1d 1d 1d 1d 1d 8d 8d		greet_clr_line1 .text $1D, $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>39690a	4d 4d 2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd
>39691a	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>39692a	fd fd
>39692c	1d 1d 1d 1d 1d 8d 8d 4d		greet_clr_line2 .text $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>396934	4d 2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd
>396944	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396954	fd fd
>396956	1d 1d 1d 1d 8d 8d 4d 4d		greet_clr_line3 .text $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>39695e	2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd fd
>39696e	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>39697e	fd fd
>396980	1d 1d 1d 8d 8d 4d 4d 2d		greet_clr_line4 .text $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>396988	2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd fd fd
>396998	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3969a8	fd fd
>3969aa	1d 1d 8d 8d 4d 4d 2d 2d		greet_clr_line5 .text $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>3969b2	5d 5d fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3969c2	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3969d2	fd fd
>3969d4	00 00 00 ff			fg_color_lut	  .text $00, $00, $00, $FF
>3969d8	00 00 80 ff			                .text $00, $00, $80, $FF
>3969dc	00 80 00 ff			                .text $00, $80, $00, $FF
>3969e0	80 00 00 ff			                .text $80, $00, $00, $FF
>3969e4	00 80 80 ff			                .text $00, $80, $80, $FF
>3969e8	80 80 00 ff			                .text $80, $80, $00, $FF
>3969ec	80 00 80 ff			                .text $80, $00, $80, $FF
>3969f0	80 80 80 ff			                .text $80, $80, $80, $FF
>3969f4	00 45 ff ff			                .text $00, $45, $FF, $FF
>3969f8	13 45 8b ff			                .text $13, $45, $8B, $FF
>3969fc	00 00 20 ff			                .text $00, $00, $20, $FF
>396a00	00 20 00 ff			                .text $00, $20, $00, $FF
>396a04	20 00 00 ff			                .text $20, $00, $00, $FF
>396a08	20 20 20 ff			                .text $20, $20, $20, $FF
>396a0c	40 40 40 ff			                .text $40, $40, $40, $FF
>396a10	ff ff ff ff			                .text $FF, $FF, $FF, $FF
>396a14	00 00 00 ff			bg_color_lut	  .text $00, $00, $00, $FF
>396a18	00 00 80 ff			                .text $00, $00, $80, $FF
>396a1c	00 80 00 ff			                .text $00, $80, $00, $FF
>396a20	80 00 00 ff			                .text $80, $00, $00, $FF
>396a24	00 20 20 ff			                .text $00, $20, $20, $FF
>396a28	20 20 00 ff			                .text $20, $20, $00, $FF
>396a2c	20 00 20 ff			                .text $20, $00, $20, $FF
>396a30	20 20 20 ff			                .text $20, $20, $20, $FF
>396a34	1e 69 d2 ff			                .text $1E, $69, $D2, $FF
>396a38	13 45 8b ff			                .text $13, $45, $8B, $FF
>396a3c	00 00 20 ff			                .text $00, $00, $20, $FF
>396a40	00 20 00 ff			                .text $00, $20, $00, $FF
>396a44	40 00 00 ff			                .text $40, $00, $00, $FF
>396a48	10 10 10 ff			                .text $10, $10, $10, $FF
>396a4c	40 40 40 ff			                .text $40, $40, $40, $FF
>396a50	ff ff ff ff			                .text $FF, $FF, $FF, $FF
>396a54	43 6d 64 20 30 78 41 41		pass_tst0xAAmsg .text "Cmd 0xAA Test passed...", $0D, $00
>396a5c	20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>396a6c	00
>396a6d	43 6d 64 20 30 78 41 42		pass_tst0xABmsg .text "Cmd 0xAB Test passed...", $0D, $00
>396a75	20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>396a85	00
>396a86	43 6d 64 20 30 78 36 30		pass_cmd0x60msg .text "Cmd 0x60 Executed.", $0D, $00
>396a8e	20 45 78 65 63 75 74 65 64 2e 0d 00
>396a9a	43 6d 64 20 30 78 46 46		pass_cmd0xFFmsg .text "Cmd 0xFF (Reset) Done.", $0D, $00
>396aa2	20 28 52 65 73 65 74 29 20 44 6f 6e 65 2e 0d 00
>396ab2	43 6d 64 20 30 78 45 45		pass_cmd0xEEmsg .text "Cmd 0xEE Echo Test passed...", $0D, $00
>396aba	20 45 63 68 6f 20 54 65 73 74 20 70 61 73 73 65
>396aca	64 2e 2e 2e 0d 00
>396ad0	4b 65 79 62 6f 61 72 64		Success_kb_init .text "Keyboard Present", $0D, $00
>396ad8	20 50 72 65 73 65 6e 74 0d 00
>396ae2	4e 6f 20 4b 65 79 62 6f		Failed_kb_init  .text "No Keyboard Attached or Failed Init...", $0D, $00
>396aea	61 72 64 20 41 74 74 61 63 68 65 64 20 6f 72 20
>396afa	46 61 69 6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>396b0a	4e 4f 20 53 49 47 4e 41		bmp_parser_err0 .text "NO SIGNATURE FOUND.", $00
>396b12	54 55 52 45 20 46 4f 55 4e 44 2e 00
>396b1e	42 4d 50 20 4c 4f 41 44		bmp_parser_msg0 .text "BMP LOADED.", $00
>396b26	45 44 2e 00
>396b2a	45 58 45 43 55 54 49 4e		bmp_parser_msg1 .text "EXECUTING BMP PARSER", $00
>396b32	47 20 42 4d 50 20 50 41 52 53 45 52 00
>396b3f	49 44 45 20 48 44 44 20		IDE_HDD_Present_msg0 .text "IDE HDD Present:", $00
>396b47	50 72 65 73 65 6e 74 3a 00
>396b50	42 6f 6f 74 20 44 49 50		boot_invalid    .null "Boot DIP switch settings are invalid."
>396b58	20 73 77 69 74 63 68 20 73 65 74 74 69 6e 67 73
>396b68	20 61 72 65 20 69 6e 76 61 6c 69 64 2e 00
>396b76	50 72 65 73 73 20 52 20		boot_retry      .null "Press R to retry, B to go to BASIC.", 13
>396b7e	74 6f 20 72 65 74 72 79 2c 20 42 20 74 6f 20 67
>396b8e	6f 20 74 6f 20 42 41 53 49 43 2e 0d 00
>396b9b	55 6e 61 62 6c 65 20 74		sdc_err_boot    .null "Unable to read the SD card."
>396ba3	6f 20 72 65 61 64 20 74 68 65 20 53 44 20 63 61
>396bb3	72 64 2e 00
>396bb7	55 6e 61 62 6c 65 20 74		ide_err_boot    .null "Unable to read from the IDE drive."
>396bbf	6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>396bcf	49 44 45 20 64 72 69 76 65 2e 00
>396bda	55 6e 61 62 6c 65 20 74		fdc_err_boot    .null "Unable to read from the floppy drive."
>396be2	6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>396bf2	66 6c 6f 70 70 79 20 64 72 69 76 65 2e 00
>396c00	42 6f 6f 74 69 6e 67 20		fdc_boot        .null "Booting from floppy..."
>396c08	66 72 6f 6d 20 66 6c 6f 70 70 79 2e 2e 2e 00
>396c17	0d 52 45 41 44 59 2e 00		ready_msg       .null $0D,"READY."
>396c1f	41 42 4f 52 54 20 45 52		error_01        .null "ABORT ERROR"
>396c27	52 4f 52 00
>396c2b	30 31 32 33 34 35 36 37		hex_digits      .text "0123456789ABCDEF",0
>396c33	38 39 41 42 43 44 45 46 00
>396c3c					.align 256
>396d00	00 1b 31 32 33 34 35 36		ScanCode_Press_Set1   .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>396d08	37 38 39 30 2d 3d 08 09
>396d10	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>396d18	6f 70 5b 5d 0d 00 61 73
>396d20	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>396d28	27 60 00 5c 7a 78 63 76
>396d30	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>396d38	00 20 00 00 00 00 00 00
>396d40	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $11, $00, $00, $9D, $00, $1D, $00, $00    ; $40
>396d48	11 00 00 9d 00 1d 00 00
>396d50	91 00 00 00 00 00 00 00		                      .text $91, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>396d58	00 00 00 00 00 00 00 00
>396d60	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>396d68	00 00 00 00 00 00 00 00
>396d70	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>396d78	00 00 00 00 00 00 00 00
>396d80	00 00 21 40 23 24 25 5e		ScanCode_Shift_Set1   .text $00, $00, $21, $40, $23, $24, $25, $5E, $26, $2A, $28, $29, $5F, $2B, $08, $09    ; $00
>396d88	26 2a 28 29 5f 2b 08 09
>396d90	51 57 45 52 54 59 55 49		                      .text $51, $57, $45, $52, $54, $59, $55, $49, $4F, $50, $7B, $7D, $0D, $00, $41, $53    ; $10
>396d98	4f 50 7b 7d 0d 00 41 53
>396da0	44 46 47 48 4a 4b 4c 3a		                      .text $44, $46, $47, $48, $4A, $4B, $4C, $3A, $22, $7E, $00, $5C, $5A, $58, $43, $56    ; $20
>396da8	22 7e 00 5c 5a 58 43 56
>396db0	42 4e 4d 3c 3e 3f 00 00		                      .text $42, $4E, $4D, $3C, $3E, $3F, $00, $00, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>396db8	00 20 00 00 00 00 00 00
>396dc0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>396dc8	00 00 00 00 00 00 00 00
>396dd0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>396dd8	00 00 00 00 00 00 00 00
>396de0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>396de8	00 00 00 00 00 00 00 00
>396df0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>396df8	00 00 00 00 00 00 00 00
>396e00	00 1b 31 32 33 34 35 36		ScanCode_Ctrl_Set1    .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>396e08	37 38 39 30 2d 3d 08 09
>396e10	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>396e18	6f 70 5b 5d 0d 00 61 73
>396e20	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $03, $76    ; $20
>396e28	27 60 00 5c 7a 78 03 76
>396e30	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>396e38	00 20 00 00 00 00 00 00
>396e40	00 00 00 00 00 18 00 00		                      .text $00, $00, $00, $00, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>396e48	00 00 00 00 00 00 00 00
>396e50	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>396e58	00 00 00 00 00 00 00 00
>396e60	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>396e68	00 00 00 00 00 00 00 00
>396e70	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>396e78	00 00 00 00 00 00 00 00
>396e80	00 1b 31 32 33 34 35 36		ScanCode_Alt_Set1     .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>396e88	37 38 39 30 2d 3d 08 09
>396e90	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>396e98	6f 70 5b 5d 0d 00 61 73
>396ea0	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>396ea8	27 60 00 5c 7a 78 63 76
>396eb0	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>396eb8	00 20 00 00 00 00 00 00
>396ec0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>396ec8	00 00 00 00 00 00 00 00
>396ed0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>396ed8	00 00 00 00 00 00 00 00
>396ee0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>396ee8	00 00 00 00 00 00 00 00
>396ef0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>396ef8	00 00 00 00 00 00 00 00
>396f00	00 1b 31 32 33 34 35 36		ScanCode_NumLock_Set1 .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>396f08	37 38 39 30 2d 3d 08 09
>396f10	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>396f18	6f 70 5b 5d 0d 00 61 73
>396f20	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>396f28	27 60 00 5c 7a 78 63 76
>396f30	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>396f38	00 20 00 00 00 00 00 00
>396f40	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>396f48	00 00 00 00 00 00 00 00
>396f50	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>396f58	00 00 00 00 00 00 00 00
>396f60	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>396f68	00 00 00 00 00 00 00 00
>396f70	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>396f78	00 00 00 00 00 00 00 00
>396f80	00 00 00 00 00 00 00 00		ScanCode_Prefix_Set1  .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $00
>396f88	00 00 00 00 00 00 00 00
>396f90	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $10
>396f98	00 00 00 00 00 00 00 00
>396fa0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $20
>396fa8	00 00 00 00 00 00 00 00
>396fb0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $30
>396fb8	00 00 00 00 00 00 00 00
>396fc0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $11, $00, $00, $9D, $00, $1D, $00, $00    ; $40
>396fc8	11 00 00 9d 00 1d 00 00
>396fd0	91 00 0f 7f 00 00 00 00		                      .text $91, $00, $0F, $7F, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>396fd8	00 00 00 00 00 00 00 00
>396fe0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>396fe8	00 00 00 00 00 00 00 00
>396ff0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>396ff8	00 00 00 00 00 00 00 00
>397000					.align 256
>397000	00 14 1c 21 26 2a 2e 31		GAMMA_2_2_Tbl         .text  $00, $14, $1c, $21, $26, $2a, $2e, $31, $34, $37, $3a, $3d, $3f, $41, $44, $46
>397008	34 37 3a 3d 3f 41 44 46
>397010	48 4a 4c 4e 50 51 53 55		                      .text  $48, $4a, $4c, $4e, $50, $51, $53, $55, $57, $58, $5a, $5b, $5d, $5e, $60, $61
>397018	57 58 5a 5b 5d 5e 60 61
>397020	63 64 66 67 68 6a 6b 6c		                      .text  $63, $64, $66, $67, $68, $6a, $6b, $6c, $6d, $6f, $70, $71, $72, $73, $75, $76
>397028	6d 6f 70 71 72 73 75 76
>397030	77 78 79 7a 7b 7c 7d 7e		                      .text  $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $80, $81, $82, $83, $84, $85, $86, $87
>397038	80 81 82 83 84 85 86 87
>397040	88 88 89 8a 8b 8c 8d 8e		                      .text  $88, $88, $89, $8a, $8b, $8c, $8d, $8e, $8f, $90, $91, $92, $93, $93, $94, $95
>397048	8f 90 91 92 93 93 94 95
>397050	96 97 98 99 99 9a 9b 9c		                      .text  $96, $97, $98, $99, $99, $9a, $9b, $9c, $9d, $9e, $9e, $9f, $a0, $a1, $a2, $a2
>397058	9d 9e 9e 9f a0 a1 a2 a2
>397060	a3 a4 a5 a5 a6 a7 a8 a8		                      .text  $a3, $a4, $a5, $a5, $a6, $a7, $a8, $a8, $a9, $aa, $ab, $ab, $ac, $ad, $ae, $ae
>397068	a9 aa ab ab ac ad ae ae
>397070	af b0 b0 b1 b2 b2 b3 b4		                      .text  $AF, $b0, $b0, $b1, $b2, $b2, $b3, $b4, $b5, $b5, $b6, $b7, $b7, $b8, $b9, $b9
>397078	b5 b5 b6 b7 b7 b8 b9 b9
>397080	ba bb bb bc bd bd be be		                      .text  $ba, $bb, $bb, $bc, $bd, $bd, $be, $be, $bf, $c0, $c0, $c1, $c2, $c2, $c3, $c4
>397088	bf c0 c0 c1 c2 c2 c3 c4
>397090	c4 c5 c5 c6 c7 c7 c8 c8		                      .text  $c4, $c5, $c5, $c6, $c7, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cb, $cc, $cd, $cd
>397098	c9 ca ca cb cb cc cd cd
>3970a0	ce ce cf d0 d0 d1 d1 d2		                      .text  $ce, $ce, $cf, $d0, $d0, $d1, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d5, $d6, $d6
>3970a8	d2 d3 d4 d4 d5 d5 d6 d6
>3970b0	d7 d8 d8 d9 d9 da da db		                      .text  $d7, $d8, $d8, $d9, $d9, $da, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $df
>3970b8	db dc dc dd de de df df
>3970c0	e0 e0 e1 e1 e2 e2 e3 e3		                      .text  $e0, $e0, $e1, $e1, $e2, $e2, $e3, $e3, $e4, $e4, $e5, $e5, $e6, $e6, $e7, $e7
>3970c8	e4 e4 e5 e5 e6 e6 e7 e7
>3970d0	e8 e8 e9 e9 ea ea eb eb		                      .text  $e8, $e8, $e9, $e9, $ea, $ea, $eb, $eb, $ec, $ec, $ed, $ed, $ee, $ee, $ef, $ef
>3970d8	ec ec ed ed ee ee ef ef
>3970e0	f0 f0 f1 f1 f2 f2 f3 f3		                      .text  $f0, $f0, $f1, $f1, $f2, $f2, $f3, $f3, $f4, $f4, $f5, $f5, $f6, $f6, $f7, $f7
>3970e8	f4 f4 f5 f5 f6 f6 f7 f7
>3970f0	f8 f8 f9 f9 f9 fa fa fb		                      .text  $f8, $f8, $f9, $f9, $f9, $fa, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $fe, $ff
>3970f8	fb fc fc fd fd fe fe ff
>397100					.align 256
>397100	00 0b 11 15 19 1c 1f 22		GAMMA_1_8_Tbl         .text  $00, $0b, $11, $15, $19, $1c, $1f, $22, $25, $27, $2a, $2c, $2e, $30, $32, $34
>397108	25 27 2a 2c 2e 30 32 34
>397110	36 38 3a 3c 3d 3f 41 43		                      .text  $36, $38, $3a, $3c, $3d, $3f, $41, $43, $44, $46, $47, $49, $4a, $4c, $4d, $4f
>397118	44 46 47 49 4a 4c 4d 4f
>397120	50 51 53 54 55 57 58 59		                      .text  $50, $51, $53, $54, $55, $57, $58, $59, $5b, $5c, $5d, $5e, $60, $61, $62, $63
>397128	5b 5c 5d 5e 60 61 62 63
>397130	64 65 67 68 69 6a 6b 6c		                      .text  $64, $65, $67, $68, $69, $6a, $6b, $6c, $6d, $6e, $70, $71, $72, $73, $74, $75
>397138	6d 6e 70 71 72 73 74 75
>397140	76 77 78 79 7a 7b 7c 7d		                      .text  $76, $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $7f, $80, $81, $82, $83, $84, $84
>397148	7e 7f 80 81 82 83 84 84
>397150	85 86 87 88 89 8a 8b 8c		                      .text  $85, $86, $87, $88, $89, $8a, $8b, $8c, $8d, $8e, $8e, $8f, $90, $91, $92, $93
>397158	8d 8e 8e 8f 90 91 92 93
>397160	94 95 95 96 97 98 99 9a		                      .text  $94, $95, $95, $96, $97, $98, $99, $9a, $9a, $9b, $9c, $9d, $9e, $9f, $9f, $a0
>397168	9a 9b 9c 9d 9e 9f 9f a0
>397170	a1 a2 a3 a3 a4 a5 a6 a6		                      .text  $a1, $a2, $a3, $a3, $a4, $a5, $a6, $a6, $a7, $a8, $a9, $aa, $aa, $ab, $ac, $ad
>397178	a7 a8 a9 aa aa ab ac ad
>397180	ad ae af b0 b0 b1 b2 b3		                      .text  $ad, $ae, $af, $b0, $b0, $b1, $b2, $b3, $b3, $b4, $b5, $b6, $b6, $b7, $b8, $b8
>397188	b3 b4 b5 b6 b6 b7 b8 b8
>397190	b9 ba bb bb bc bd bd be		                      .text  $b9, $ba, $bb, $bb, $bc, $bd, $bd, $be, $bf, $bf, $c0, $c1, $c2, $c2, $c3, $c4
>397198	bf bf c0 c1 c2 c2 c3 c4
>3971a0	c4 c5 c6 c6 c7 c8 c8 c9		                      .text  $c4, $c5, $c6, $c6, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cc, $cc, $cd, $ce, $ce
>3971a8	ca ca cb cc cc cd ce ce
>3971b0	cf d0 d0 d1 d2 d2 d3 d4		                      .text  $cf, $d0, $d0, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d6, $d6, $d7, $d7, $d8, $d9
>3971b8	d4 d5 d6 d6 d7 d7 d8 d9
>3971c0	d9 da db db dc dc dd de		                      .text  $d9, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $e0, $e0, $e1, $e1, $e2, $e3
>3971c8	de df e0 e0 e1 e1 e2 e3
>3971d0	e3 e4 e4 e5 e6 e6 e7 e7		                      .text  $e3, $e4, $e4, $e5, $e6, $e6, $e7, $e7, $e8, $e9, $e9, $ea, $ea, $eb, $ec, $ec
>3971d8	e8 e9 e9 ea ea eb ec ec
>3971e0	ed ed ee ef ef f0 f0 f1		                      .text  $ed, $ed, $ee, $ef, $ef, $f0, $f0, $f1, $f1, $f2, $f3, $f3, $f4, $f4, $f5, $f5
>3971e8	f1 f2 f3 f3 f4 f4 f5 f5
>3971f0	f6 f7 f7 f8 f8 f9 f9 fa		                      .text  $f6, $f7, $f7, $f8, $f8, $f9, $f9, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $ff
>3971f8	fb fb fc fc fd fd fe ff
>397200					.align 256
>397200	1d c8 a7 ac 10 d6 52 7c		RANDOM_LUT_Tbl		    .text  $1d, $c8, $a7, $ac, $10, $d6, $52, $7c, $83, $dd, $ce, $39, $cd, $c5, $3b, $15
>397208	83 dd ce 39 cd c5 3b 15
>397210	22 55 3b 94 e0 33 1f 38						              .text  $22, $55, $3b, $94, $e0, $33, $1f, $38, $87, $12, $31, $65, $89, $27, $88, $42
>397218	87 12 31 65 89 27 88 42
>397220	b2 32 72 84 b2 b2 31 52						              .text  $b2, $32, $72, $84, $b2, $b2, $31, $52, $94, $ce, $56, $ec, $fe, $da, $58, $c9
>397228	94 ce 56 ec fe da 58 c9
>397230	c8 5b 53 2a 08 3b 19 c1						              .text  $c8, $5b, $53, $2a, $08, $3b, $19, $c1, $d0, $10, $2c, $b2, $4b, $ea, $32, $61
>397238	d0 10 2c b2 4b ea 32 61
>397240	da 34 33 8f 2b da 49 89						              .text  $da, $34, $33, $8f, $2b, $da, $49, $89, $a1, $e6, $ca, $2d, $b3, $ce, $b0, $79
>397248	a1 e6 ca 2d b3 ce b0 79
>397250	44 aa 32 82 91 e9 29 16						              .text  $44, $aa, $32, $82, $91, $e9, $29, $16, $5f, $e3, $fb, $bd, $15, $2e, $be, $f5
>397258	5f e3 fb bd 15 2e be f5
>397260	e9 4a e4 2e 60 24 94 35						              .text  $e9, $4a, $e4, $2e, $60, $24, $94, $35, $8d, $8f, $2c, $80, $0a, $5e, $99, $36
>397268	8d 8f 2c 80 0a 5e 99 36
>397270	ac ab 21 26 42 7c 5e bc						              .text  $ac, $ab, $21, $26, $42, $7c, $5e, $bc, $13, $52, $44, $2f, $e3, $ef, $44, $a2
>397278	13 52 44 2f e3 ef 44 a2
>397280	86 c1 9c 47 5f 36 6d 02						              .text  $86, $c1, $9c, $47, $5f, $36, $6d, $02, $be, $23, $02, $58, $0a, $52, $5e, $b4
>397288	be 23 02 58 0a 52 5e b4
>397290	9f 06 08 c9 97 cb 9e dd						              .text  $9f, $06, $08, $c9, $97, $cb, $9e, $dd, $d5, $cf, $3e, $df, $c4, $9e, $da, $bb
>397298	d5 cf 3e df c4 9e da bb
>3972a0	9b 5d c9 f5 d9 c3 7e 87						              .text  $9b, $5d, $c9, $f5, $d9, $c3, $7e, $87, $77, $7d, $b1, $3b, $4a, $68, $35, $6e
>3972a8	77 7d b1 3b 4a 68 35 6e
>3972b0	ee 47 ad 8f fd 73 2e 46						              .text  $ee, $47, $ad, $8f, $fd, $73, $2e, $46, $b5, $8f, $44, $63, $55, $6f, $e1, $50
>3972b8	b5 8f 44 63 55 6f e1 50
>3972c0	f4 b6 a3 4f 68 c4 a5 a4						              .text  $f4, $b6, $a3, $4f, $68, $c4, $a5, $a4, $57, $74, $b9, $bd, $05, $14, $50, $eb
>3972c8	57 74 b9 bd 05 14 50 eb
>3972d0	a5 5c 57 2f 99 dc 2e 8a						              .text  $a5, $5c, $57, $2f, $99, $dc, $2e, $8a, $44, $bc, $ec, $db, $22, $58, $fc, $be
>3972d8	44 bc ec db 22 58 fc be
>3972e0	5f 3f 50 bd 2a 36 ab ae						              .text  $5f, $3f, $50, $bd, $2a, $36, $ab, $ae, $24, $aa, $82, $11, $5c, $9f, $43, $4d
>3972e8	24 aa 82 11 5c 9f 43 4d
>3972f0	8f 0c 20 00 91 b6 45 9e						              .text  $8f, $0c, $20, $00, $91, $b6, $45, $9e, $3e, $3d, $66, $7e, $0a, $1c, $6b, $74
>3972f8	3e 3d 66 7e 0a 1c 6b 74
>397300					.align 16
>397300	00 01 01 00 00 00 00 00		MOUSE_POINTER_PTR     .text $00,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00
>397308	01 01 01 00 00 00 00 00
>397310	01 ff ff 01 00 00 01 01		                      .text $01,$FF,$FF,$01,$00,$00,$01,$01,$FF,$FF,$FF,$01,$00,$00,$00,$00
>397318	ff ff ff 01 00 00 00 00
>397320	01 ff ff ff 01 01 55 ff		                      .text $01,$FF,$FF,$FF,$01,$01,$55,$FF,$01,$55,$FF,$FF,$01,$00,$00,$00
>397328	01 55 ff ff 01 00 00 00
>397330	01 55 ff ff ff ff 01 55		                      .text $01,$55,$FF,$FF,$FF,$FF,$01,$55,$FF,$FF,$FF,$FF,$01,$00,$00,$00
>397338	ff ff ff ff 01 00 00 00
>397340	00 01 55 ff ff ff ff ff		                      .text $00,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$00,$00
>397348	ff ff 01 ff ff 01 00 00
>397350	00 00 01 55 ff ff ff ff		                      .text $00,$00,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$FF,$01,$00,$00
>397358	01 ff ff 01 ff 01 00 00
>397360	00 00 01 01 55 ff ff ff		                      .text $00,$00,$01,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$FF,$01,$00,$00
>397368	ff 01 ff ff ff 01 00 00
>397370	00 00 01 55 01 55 ff ff		                      .text $00,$00,$01,$55,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$01,$00
>397378	ff ff ff ff ff 01 01 00
>397380	00 00 01 55 55 55 ff ff		                      .text $00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01
>397388	ff ff ff ff 01 ff ff 01
>397390	00 00 00 01 55 55 55 ff		                      .text $00,$00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01
>397398	ff ff ff ff ff ff ff 01
>3973a0	00 00 00 00 01 55 55 55		                      .text $00,$00,$00,$00,$01,$55,$55,$55,$55,$55,$01,$FF,$FF,$55,$01,$00
>3973a8	55 55 01 ff ff 55 01 00
>3973b0	00 00 00 00 00 01 01 01		                      .text $00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$55,$FF,$55,$01,$00,$00
>3973b8	01 01 55 ff 55 01 00 00
>3973c0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$55,$01,$00,$00,$00
>3973c8	01 55 55 55 01 00 00 00
>3973d0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$01,$00,$00,$00,$00
>3973d8	01 55 55 01 00 00 00 00
>3973e0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00
>3973e8	00 01 01 00 00 00 00 00
>3973f0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>3973f8	00 00 00 00 00 00 00 00
.3ff000					FONT_4_BANK0
>3ff000	00 00 00 00 00 00 00 00		.binary "FONT/Bm437_PhoenixEGA_8x8.bin", 0, 2048
>3ff008	7e 81 a5 81 bd 99 81 7e 3c 7e db ff c3 7e 3c 00
>3ff018	00 ee fe fe 7c 38 10 00 10 38 7c fe 7c 38 10 00
>3ff028	00 3c 18 ff ff 08 18 00 10 38 7c fe fe 10 38 00
>3ff038	00 00 18 3c 18 00 00 00 ff ff e7 c3 e7 ff ff ff
>3ff048	00 3c 42 81 81 42 3c 00 ff c3 bd 7e 7e bd c3 ff
>3ff058	01 03 07 0f 1f 3f 7f ff ff fe fc f8 f0 e0 c0 80
>3ff068	04 06 07 04 04 fc f8 00 0c 0a 0d 0b f9 f9 1f 1f
>3ff078	00 92 7c 44 c6 7c 92 00 00 00 60 78 7e 78 60 00
>3ff088	00 00 06 1e 7e 1e 06 00 18 7e 18 18 18 18 7e 18
>3ff098	66 66 66 66 66 00 66 00 ff b6 76 36 36 36 36 00
>3ff0a8	7e c1 dc 22 22 1f 83 7e 00 00 00 7e 7e 00 00 00
>3ff0b8	18 7e 18 18 7e 18 00 ff 18 7e 18 18 18 18 18 00
>3ff0c8	18 18 18 18 18 7e 18 00 00 04 06 ff 06 04 00 00
>3ff0d8	00 20 60 ff 60 20 00 00 00 00 00 c0 c0 c0 ff 00
>3ff0e8	00 24 66 ff 66 24 00 00 00 00 10 38 7c fe 00 00
>3ff0f8	00 00 00 fe 7c 38 10 00 00 00 00 00 00 00 00 00
>3ff108	30 30 30 30 30 00 30 00 66 66 00 00 00 00 00 00
>3ff118	6c 6c fe 6c fe 6c 6c 00 10 7c d2 7c 86 7c 10 00
>3ff128	f0 96 fc 18 3e 72 de 00 30 48 30 78 ce cc 78 00
>3ff138	0c 0c 18 00 00 00 00 00 10 60 c0 c0 c0 60 10 00
>3ff148	10 0c 06 06 06 0c 10 00 00 54 38 fe 38 54 00 00
>3ff158	00 18 18 7e 18 18 00 00 00 00 00 00 00 00 18 70
>3ff168	00 00 00 7e 00 00 00 00 00 00 00 00 00 00 18 00
>3ff178	02 06 0c 18 30 60 c0 00 7c ce de f6 e6 e6 7c 00
>3ff188	18 38 78 18 18 18 3c 00 7c c6 06 0c 30 60 fe 00
>3ff198	7c c6 06 3c 06 c6 7c 00 0e 1e 36 66 fe 06 06 00
>3ff1a8	fe c0 c0 fc 06 06 fc 00 7c c6 c0 fc c6 c6 7c 00
>3ff1b8	fe 06 0c 18 30 60 60 00 7c c6 c6 7c c6 c6 7c 00
>3ff1c8	7c c6 c6 7e 06 c6 7c 00 00 30 00 00 00 30 00 00
>3ff1d8	00 30 00 00 00 30 20 00 00 1c 30 60 30 1c 00 00
>3ff1e8	00 00 7e 00 7e 00 00 00 00 70 18 0c 18 70 00 00
>3ff1f8	7c c6 0c 18 30 00 30 00 7c 82 9a aa aa 9e 7c 00
>3ff208	7c c6 c6 fe c6 c6 c6 00 fc 66 66 7c 66 66 fc 00
>3ff218	7c c6 c0 c0 c0 c6 7c 00 fc 66 66 66 66 66 fc 00
>3ff228	fe 62 68 78 68 62 fe 00 fe 62 68 78 68 60 f0 00
>3ff238	7c c6 c6 c0 de c6 7c 00 c6 c6 c6 fe c6 c6 c6 00
>3ff248	3c 18 18 18 18 18 3c 00 1e 0c 0c 0c 0c cc 78 00
>3ff258	c6 cc d8 f0 d8 cc c6 00 f0 60 60 60 60 62 fe 00
>3ff268	c6 ee fe d6 c6 c6 c6 00 c6 e6 f6 de ce c6 c6 00
>3ff278	7c c6 c6 c6 c6 c6 7c 00 fc 66 66 7c 60 60 f0 00
>3ff288	7c c6 c6 c6 c6 c6 7c 0c fc 66 66 7c 66 66 e6 00
>3ff298	7c c6 c0 7c 06 c6 7c 00 7e 5a 18 18 18 18 3c 00
>3ff2a8	c6 c6 c6 c6 c6 c6 7c 00 c6 c6 c6 c6 c6 6c 38 00
>3ff2b8	c6 c6 c6 c6 d6 ee c6 00 c6 6c 38 38 38 6c c6 00
>3ff2c8	66 66 66 3c 18 18 3c 00 fe c6 0c 18 30 66 fe 00
>3ff2d8	1c 18 18 18 18 18 1c 00 c0 60 30 18 0c 06 02 00
>3ff2e8	70 30 30 30 30 30 70 00 00 00 10 38 6c c6 00 00
>3ff2f8	00 00 00 00 00 00 00 ff 30 30 18 00 00 00 00 00
>3ff308	00 00 7c 06 7e c6 7e 00 c0 c0 fc c6 c6 c6 fc 00
>3ff318	00 00 7c c6 c0 c6 7c 00 06 06 7e c6 c6 c6 7e 00
>3ff328	00 00 7c c6 fe c0 7c 00 3c 66 60 f0 60 60 60 00
>3ff338	00 00 7e c6 c6 7e 06 7c c0 c0 fc c6 c6 c6 c6 00
>3ff348	18 00 38 18 18 18 3c 00 00 0c 00 1c 0c 0c cc 78
>3ff358	c0 c0 c6 d8 f0 d8 c6 00 38 18 18 18 18 18 3c 00
>3ff368	00 00 ee fe d6 c6 c6 00 00 00 fc c6 c6 c6 c6 00
>3ff378	00 00 7c c6 c6 c6 7c 00 00 00 fc c6 c6 fc c0 c0
>3ff388	00 00 7e c6 c6 7e 06 06 00 00 de 76 60 60 60 00
>3ff398	00 00 7c c0 7c 06 7c 00 18 18 7e 18 18 18 1e 00
>3ff3a8	00 00 c6 c6 c6 c6 7e 00 00 00 c6 c6 c6 6c 38 00
>3ff3b8	00 00 c6 c6 d6 fe c6 00 00 00 c6 6c 38 6c c6 00
>3ff3c8	00 00 c6 c6 c6 7e 06 7c 00 00 fe 0c 18 60 fe 00
>3ff3d8	0e 18 18 70 18 18 0e 00 18 18 18 00 18 18 18 00
>3ff3e8	e0 30 30 1c 30 30 e0 00 00 00 70 9a 0e 00 00 00
>3ff3f8	00 00 18 3c 66 ff 00 00 7c c6 c0 c0 c6 7c 18 70
>3ff408	66 00 c6 c6 c6 c6 7e 00 0e 18 7c c6 fe c0 7c 00
>3ff418	18 24 7c 06 7e c6 7e 00 66 00 7c 06 7e c6 7e 00
>3ff428	38 0c 7c 06 7e c6 7e 00 18 00 7c 06 7e c6 7e 00
>3ff438	00 00 7c c0 c0 7c 18 70 18 24 7c c6 fe c0 7c 00
>3ff448	66 00 7c c6 fe c0 7c 00 70 18 7c c6 fe c0 7c 00
>3ff458	66 00 38 18 18 18 3c 00 18 24 38 18 18 18 3c 00
>3ff468	38 0c 38 18 18 18 3c 00 66 00 7c c6 fe c6 c6 00
>3ff478	18 00 7c c6 fe c6 c6 00 0e 18 fe 60 78 60 fe 00
>3ff488	00 00 7c 1a 7e d8 7e 00 7e d8 d8 de f8 d8 de 00
>3ff498	18 24 7c c6 c6 c6 7c 00 66 00 7c c6 c6 c6 7c 00
>3ff4a8	38 0c 7c c6 c6 c6 7c 00 18 24 c6 c6 c6 c6 7e 00
>3ff4b8	38 0c c6 c6 c6 c6 7e 00 66 00 c6 c6 c6 7e 06 7c
>3ff4c8	66 7c c6 c6 c6 c6 7c 00 c6 00 c6 c6 c6 c6 7c 00
>3ff4d8	18 7c c6 c0 c6 7c 18 00 1e 32 30 78 30 70 fe 00
>3ff4e8	66 3c 18 7e 18 3c 18 00 fc c6 fc c0 cc de cc 0e
>3ff4f8	00 1c 32 30 fc 30 f0 00 0e 18 7c 06 7e c6 7e 00
>3ff508	1a 30 38 18 18 18 3c 00 0e 18 7c c6 c6 c6 7c 00
>3ff518	0e 18 c6 c6 c6 c6 7e 00 66 98 fc c6 c6 c6 c6 00
>3ff528	66 98 e6 f6 de ce c6 00 7c 06 7e c6 7e 00 fe 00
>3ff538	7c c6 c6 c6 7c 00 fe 00 18 00 18 30 60 c6 7c 00
>3ff548	00 00 fe c0 c0 c0 c0 00 00 00 fe 06 06 06 06 00
>3ff558	c0 c0 c0 de 06 0c 1e 00 c0 c0 c0 cc 1c 3e 0c 00
>3ff568	30 00 30 30 30 30 30 00 00 36 6c d8 6c 36 00 00
>3ff578	00 d8 6c 36 6c d8 00 00 aa aa aa aa aa aa aa aa
>3ff588	aa 55 aa 55 aa 55 aa 55 44 22 44 22 44 22 44 22
>3ff598	18 18 18 18 18 18 18 18 18 18 18 f8 18 18 18 18
>3ff5a8	18 18 18 f8 18 f8 18 18 36 36 36 f6 36 36 36 36
>3ff5b8	00 00 00 fe 36 36 36 36 00 00 00 f8 18 f8 18 18
>3ff5c8	36 36 36 f6 06 f6 36 36 36 36 36 36 36 36 36 36
>3ff5d8	00 00 00 fe 06 f6 36 36 36 36 36 f6 06 fe 00 00
>3ff5e8	36 36 36 fe 00 00 00 00 18 18 18 f8 18 f8 00 00
>3ff5f8	00 00 00 f8 18 18 18 18 18 18 18 1f 00 00 00 00
>3ff608	18 18 18 ff 00 00 00 00 00 00 00 ff 18 18 18 18
>3ff618	18 18 18 1f 18 18 18 18 00 00 00 ff 00 00 00 00
>3ff628	18 18 18 ff 18 18 18 18 18 18 18 1f 18 1f 18 18
>3ff638	36 36 36 37 36 36 36 36 36 36 36 37 30 3f 00 00
>3ff648	00 00 00 3f 30 37 36 36 36 36 36 f7 00 ff 00 00
>3ff658	00 00 00 ff 00 f7 36 36 36 36 36 37 30 37 36 36
>3ff668	00 00 00 ff 00 ff 00 00 36 36 36 f7 00 f7 36 36
>3ff678	18 18 18 ff 00 ff 00 00 36 36 36 ff 00 00 00 00
>3ff688	00 00 00 ff 00 ff 18 18 00 00 00 ff 36 36 36 36
>3ff698	36 36 36 3f 00 00 00 00 18 18 18 1f 18 1f 00 00
>3ff6a8	00 00 00 1f 18 1f 18 18 00 00 00 3f 36 36 36 36
>3ff6b8	36 36 36 ff 36 36 36 36 18 18 18 ff 18 ff 18 18
>3ff6c8	18 18 18 f8 00 00 00 00 00 00 00 1f 18 18 18 18
>3ff6d8	ff ff ff ff ff ff ff ff 00 00 00 00 ff ff ff ff
>3ff6e8	f0 f0 f0 f0 f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f
>3ff6f8	ff ff ff ff 00 00 00 00 00 00 77 98 98 77 00 00
>3ff708	1c 36 66 fc c6 c6 fc c0 fe 62 60 60 60 60 60 00
>3ff718	00 00 ff 66 66 66 66 00 fe 62 30 18 30 62 fe 00
>3ff728	00 00 3f 66 c6 cc 78 00 00 00 33 33 33 3e 30 f0
>3ff738	00 00 ff 18 18 18 18 00 3c 18 3c 66 66 3c 18 3c
>3ff748	00 7c c6 fe c6 7c 00 00 00 7e c3 c3 c3 66 e7 00
>3ff758	1e 19 3c 66 c6 cc 78 00 00 00 66 99 99 66 00 00
>3ff768	00 03 7c ce e6 7c c0 00 00 3e c0 fe c0 3e 00 00
>3ff778	00 7e c3 c3 c3 c3 00 00 00 fe 00 fe 00 fe 00 00
>3ff788	18 18 7e 18 18 7e 00 00 70 18 0c 18 70 00 fe 00
>3ff798	1c 30 60 30 1c 00 fe 00 00 0e 1b 18 18 18 18 18
>3ff7a8	18 18 18 18 18 d8 70 00 00 18 00 7e 00 18 00 00
>3ff7b8	00 76 dc 00 76 dc 00 00 3c 66 3c 00 00 00 00 00
>3ff7c8	00 18 3c 18 00 00 00 00 00 00 00 00 18 00 00 00
>3ff7d8	0f 0c 0c 0c ec 6c 38 00 d8 ec cc cc 00 00 00 00
>3ff7e8	f0 30 c0 f0 00 00 00 00 00 00 00 3c 3c 3c 3c 00
>3ff7f8	00 00 00 00 00 00 00 00
.3ff800					FONT_4_BANK1
>3ff800	00 00 00 00 00 00 00 00		.binary "FONT/CBM-ASCII_8x8.bin", 0, 2048
>3ff808	7c 82 aa 82 ba 92 82 7c 7c fe d6 fe c6 ee fe 7c
>3ff818	ff fd fb f5 eb d5 ab ff ff e1 fd 85 85 87 87 ff
>3ff828	ff bd db e7 e7 db bd ff ff 81 81 bd bd bd 81 ff
>3ff838	ff ff ff ff ff 81 81 ff 00 08 10 20 10 08 00 00
>3ff848	00 24 14 0c 14 24 00 00 00 8e 88 8c 88 e8 00 00
>3ff858	00 00 00 00 00 00 00 00 00 ee 88 cc 88 88 00 00
>3ff868	00 00 04 14 3c 10 00 00 00 30 4c 4c 30 00 00 00
>3ff878	00 38 28 38 28 00 00 00 ff 81 bd bd bd bd 81 ff
>3ff888	ff 55 aa 55 aa 55 aa ff ab d5 ab d5 ab d5 ab d5
>3ff898	ff 81 81 81 81 81 81 ff ff f9 e1 81 81 e1 f9 ff
>3ff8a8	ff 9f 87 81 81 87 9f ff ff e7 e7 c3 c3 81 81 ff
>3ff8b8	ff 81 81 c3 c3 e7 e7 ff 00 26 54 04 04 04 06 00
>3ff8c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 3 times (48 bytes)...
>3ff908	10 10 10 10 00 10 00 00 24 24 24 00 00 00 00 00
>3ff918	24 7e 24 24 7e 24 00 00 10 3c 50 38 14 78 10 00
>3ff928	62 64 08 10 20 4c 8c 00 30 48 48 30 58 4c 4c 38
>3ff938	10 10 10 00 00 00 00 00 08 10 20 20 20 20 10 08
>3ff948	10 08 04 04 04 04 08 10 00 24 18 7e 18 24 00 00
>3ff958	00 10 10 7c 10 10 00 00 00 00 00 00 10 10 20 00
>3ff968	00 00 00 3c 00 00 00 00 00 00 00 00 18 18 00 00
>3ff978	04 04 08 08 10 10 20 20 3c 46 4a 52 62 42 3c 00
>3ff988	10 30 10 10 10 10 38 00 38 44 04 18 20 40 7c 00
>3ff998	38 44 04 18 04 44 38 00 08 18 28 48 7c 08 08 00
>3ff9a8	7c 40 78 04 04 44 38 00 38 44 40 78 44 44 38 00
>3ff9b8	7c 44 04 08 08 10 10 00 38 44 44 38 44 44 38 00
>3ff9c8	38 44 44 3c 04 44 38 00 00 00 18 00 00 18 00 00
>3ff9d8	00 00 18 00 00 18 18 30 00 08 10 20 10 08 00 00
>3ff9e8	00 00 3c 00 3c 00 00 00 00 10 08 04 08 10 00 00
>3ff9f8	38 44 04 08 10 00 10 00 38 44 4c 4c 40 44 38 00
>3ffa08	10 28 44 7c 44 44 00 00 78 44 78 44 44 78 00 00
>3ffa18	38 44 40 40 44 38 00 00 78 44 44 44 44 78 00 00
>3ffa28	7c 40 78 40 40 7c 00 00 7c 40 78 40 40 40 00 00
>3ffa38	38 44 40 4c 44 38 00 00 44 44 7c 44 44 44 00 00
>3ffa48	38 10 10 10 10 38 00 00 1c 08 08 08 48 30 00 00
>3ffa58	24 28 30 30 28 24 00 00 20 20 20 20 20 3c 00 00
>3ffa68	44 6c 7c 54 44 44 00 00 44 64 54 4c 44 44 00 00
>3ffa78	38 44 44 44 44 38 00 00 78 44 44 78 40 40 00 00
>3ffa88	38 44 44 44 44 38 0c 00 78 44 44 78 48 44 00 00
>3ffa98	3c 40 38 04 04 78 00 00 7c 10 10 10 10 10 00 00
>3ffaa8	44 44 44 44 44 38 00 00 44 44 44 44 28 10 00 00
>3ffab8	82 82 82 92 92 6c 00 00 42 24 18 18 24 42 00 00
>3ffac8	44 44 28 10 10 10 00 00 7c 08 10 20 40 7c 00 00
>3ffad8	38 20 20 20 20 20 38 00 20 20 10 10 08 08 04 04
>3ffae8	38 08 08 08 08 08 38 00 00 10 28 44 00 00 00 00
>3ffaf8	00 00 00 00 00 00 00 7e 40 20 10 00 00 00 00 00
>3ffb08	00 38 04 3c 64 3c 00 00 40 40 78 44 44 78 00 00
>3ffb18	00 00 38 40 40 38 00 00 04 04 3c 44 44 3c 00 00
>3ffb28	00 38 44 7c 40 3c 00 00 0c 10 3c 10 10 10 00 00
>3ffb38	00 00 3c 44 44 3c 04 78 40 40 78 44 44 44 00 00
>3ffb48	10 00 30 10 10 38 00 00 08 00 08 08 08 08 08 30
>3ffb58	20 20 24 38 28 24 00 00 30 10 10 10 10 10 00 00
>3ffb68	00 00 68 54 54 44 00 00 00 00 38 24 24 24 00 00
>3ffb78	00 00 38 44 44 38 00 00 00 00 78 44 44 78 40 40
>3ffb88	00 00 3c 44 44 3c 04 04 00 00 78 44 40 40 00 00
>3ffb98	00 00 1c 30 0c 38 00 00 00 10 7c 10 10 10 0c 00
>3ffba8	00 00 44 44 44 3c 00 00 00 00 42 42 24 18 00 00
>3ffbb8	00 00 82 82 92 6c 00 00 00 00 24 18 18 24 00 00
>3ffbc8	00 00 24 24 24 1c 04 38 00 00 7c 18 30 7c 00 00
>3ffbd8	0c 10 10 30 30 10 10 0c 18 18 18 00 18 18 18 00
>3ffbe8	30 08 08 0c 0c 08 08 30 00 00 32 7e 4c 00 00 00
>3ffbf8	00 00 10 28 38 00 00 00 00 00 3c 3c 3c 3c 00 00
>3ffc08	00 00 3c 24 24 3c 00 00 00 00 18 3c 3c 18 00 00
>3ffc18	00 00 18 24 24 18 00 00 18 24 24 18 00 00 00 00
>3ffc28	00 3c 42 42 66 24 66 00 00 18 00 18 0c 06 66 3c
>3ffc38	0c 12 30 7c 30 62 fc 00 1c 20 70 20 70 20 1c 00
>3ffc48	02 06 0c d8 f0 e0 c0 00 18 18 ff 00 00 ff 00 00
>3ffc58	00 00 ff 00 00 ff 18 18 24 24 24 e7 e7 24 24 24
>3ffc68	18 18 ff 00 00 ff 18 18 24 24 24 27 27 24 24 24
>3ffc78	24 24 24 e4 e4 24 24 24 00 00 00 ff ff ff ff ff
>3ffc88	00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>3ffc98	ff ff ff ff ff ff ff 00 ff ff ff ff ff ff 00 00
>3ffca8	ff ff ff ff ff 00 00 00 ff ff ff ff 00 00 00 00
>3ffcb8	f8 f8 f8 f8 f8 f8 f8 f8 fc fc fc fc fc fc fc fc
>3ffcc8	fe fe fe fe fe fe fe fe 7f 7f 7f 7f 7f 7f 7f 7f
>3ffcd8	3f 3f 3f 3f 3f 3f 3f 3f 1f 1f 1f 1f 1f 1f 1f 1f
>3ffce8	0f 0f 0f 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00
>3ffcf8	00 00 00 00 00 00 00 00 ff ff ff ff ff ff ff ff
>3ffd08	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 00 ff ff ff ff
>3ffd18	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>3ffd28	80 80 80 80 80 80 80 80 aa 55 aa 55 aa 55 aa 55
>3ffd38	01 01 01 01 01 01 01 01 00 00 00 00 aa 55 aa 55
>3ffd48	ff fe fc f8 f0 e0 c0 80 03 03 03 03 03 03 03 03
>3ffd58	18 18 18 1f 1f 18 18 18 00 00 00 00 0f 0f 0f 0f
>3ffd68	18 18 18 1f 1f 00 00 00 00 00 00 f8 f8 18 18 18
>3ffd78	00 00 00 00 00 00 ff ff 00 00 00 1f 1f 18 18 18
>3ffd88	18 18 18 ff ff 00 00 00 00 00 00 ff ff 18 18 18
>3ffd98	18 18 18 f8 f8 18 18 18 c0 c0 c0 c0 c0 c0 c0 c0
>3ffda8	e0 e0 e0 e0 e0 e0 e0 e0 07 07 07 07 07 07 07 07
>3ffdb8	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00
>3ffdc8	00 00 00 00 00 ff ff ff 03 03 03 03 03 03 ff ff
>3ffdd8	00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>3ffde8	18 18 18 f8 f8 00 00 00 f0 f0 f0 f0 00 00 00 00
>3ffdf8	f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 ff ff 00 00 00
>3ffe08	08 1c 3e 7f 7f 1c 3e 00 18 18 18 18 18 18 18 18
>3ffe18	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00
>3ffe28	00 ff ff 00 00 00 00 00 00 00 00 00 ff ff 00 00
>3ffe38	30 30 30 30 30 30 30 30 0c 0c 0c 0c 0c 0c 0c 0c
>3ffe48	00 00 00 e0 f0 38 18 18 18 18 1c 0f 07 00 00 00
>3ffe58	18 18 38 f0 e0 00 00 00 c0 c0 c0 c0 c0 c0 ff ff
>3ffe68	c0 e0 70 38 1c 0e 07 03 03 07 0e 1c 38 70 e0 c0
>3ffe78	ff ff c0 c0 c0 c0 c0 c0 ff ff 03 03 03 03 03 03
>3ffe88	00 3c 7e 7e 7e 7e 3c 00 00 00 00 00 00 ff ff 00
>3ffe98	36 7f 7f 7f 3e 1c 08 00 60 60 60 60 60 60 60 60
>3ffea8	00 00 00 07 0f 1c 18 18 c3 e7 7e 3c 3c 7e e7 c3
>3ffeb8	00 3c 7e 66 66 7e 3c 00 18 18 66 66 18 18 3c 00
>3ffec8	06 06 06 06 06 06 06 06 08 1c 3e 7f 3e 1c 08 00
>3ffed8	18 18 18 ff ff 18 18 18 c0 c0 30 30 c0 c0 30 30
>3ffee8	18 18 18 18 18 18 18 18 00 00 03 3e 76 36 36 00
>3ffef8	ff 7f 3f 1f 0f 07 03 01 24 24 24 24 24 24 24 24
>3fff08	00 00 ff 00 00 ff 00 00 00 00 3f 20 20 27 24 24
>3fff18	00 00 ff 00 00 e7 24 24 00 00 fc 04 04 e4 24 24
>3fff28	24 24 27 20 20 3f 00 00 24 24 e7 00 00 ff 00 00
>3fff38	24 24 e4 04 04 fc 00 00 24 24 27 20 20 27 24 24
>3fff48	24 24 e4 04 04 e4 24 24 24 24 e7 00 00 e7 24 24
>3fff58	0f 0f 0f 0f f0 f0 f0 f0 01 03 07 0f 1f 3f 7f ff
>3fff68	80 c0 e0 f0 f8 fc fe ff 33 99 cc 66 33 99 cc 66
>3fff78	cc 99 33 66 cc 99 33 66 f0 f0 f0 f0 ff ff ff ff
>3fff88	0f 0f 0f 0f ff ff ff ff ff ff ff ff f0 f0 f0 f0
>3fff98	ff ff ff ff 0f 0f 0f 0f 05 0a 05 0a 00 00 00 00
>3fffa8	00 00 00 00 0a 05 0a 05 a0 50 a0 50 00 00 00 00
>3fffb8	00 00 00 00 a0 50 a0 50 0a 05 0a 05 0a 05 0a 05
>3fffc8	aa 55 aa 55 00 00 00 00 00 18 3c 7e 18 18 18 18
>3fffd8	00 10 30 7f 7f 30 10 00 00 08 0c fe fe 0c 08 00
>3fffe8	18 18 18 18 7e 3c 18 00 00 00 36 49 36 00 00 00
>3ffff8	00 00 00 00 00 00 00 00
>3a0000	5c 22 65 3a 5c 34 4b 3a		.binary "binaries/basic816.bin"
>3a0008	5c 73 20 3a 5c 40 01 3a 5c 58 00 3a 5c d6 00 3a
>3a0018	5c 53 02 3a 5c e4 00 3a 5c ff 00 3a 5c 06 01 3a
>3a0028	0b 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 85 b3
>3a0038	c2 20 a5 a4 d0 06 e2 20 a5 a6 f0 11 c2 10 a4 a9
>3a0048	c4 a7 f0 09 e2 20 a5 b3 97 a4 c8 84 a9 28 2b 60
>3a0058	08 c2 10 e2 20 a9 01 20 1c 00 a2 00 00 a9 00 9f
>3a0068	00 4c 00 e8 e0 00 01 d0 f6 a2 00 00 20 14 00 c9
>3a0078	0d d0 03 4c cf 00 c9 9d d0 08 e0 00 00 f0 ed ca
>3a0088	80 39 c9 1d d0 0e bf 00 4c 00 f0 e0 e0 4f 00 f0
>3a0098	db e8 80 27 c9 08 d0 1a e0 00 00 f0 cf da bf 01
>3a00a8	4c 00 9f 00 4c 00 f0 06 e8 e0 ff 00 d0 f0 fa ca
>3a00b8	80 0e c9 20 90 b6 9f 00 4c 00 e8 20 18 00 80 ac
>3a00c8	a9 08 20 18 00 80 a5 a9 00 20 1c 00 28 60 22 4c
>3a00d8	10 00 60 20 14 00 48 20 18 00 68 60 08 e2 20 c9
>3a00e8	00 f0 08 af 10 00 af 09 01 80 06 af 10 00 af 29
>3a00f8	fe 8f 10 00 af 28 60 08 22 84 10 00 28 60 48 da
>3a0108	5a 0b 08 e2 20 c2 10 a2 00 00 a9 20 9f 00 a0 af
>3a0118	af 1e 00 00 9f 00 c0 af e8 e0 00 20 d0 ec 08 c2
>3a0128	20 48 a9 00 00 5b 68 28 a2 00 00 a0 00 00 22 84
>3a0138	10 00 28 2b 7a fa 68 60 da 5a 0b 08 08 c2 20 48
>3a0148	a9 00 08 5b 68 28 c2 30 af 0c 00 00 85 08 e2 20
>3a0158	af 0e 00 00 c2 20 29 ff 00 85 0a a9 80 00 8f 08
>3a0168	01 00 af 1c 00 00 3a 8f 0a 01 00 18 a5 08 6f 0c
>3a0178	01 00 85 08 a5 0a 69 00 00 85 0a e2 20 a0 00 00
>3a0188	a2 00 00 b7 08 9f 00 4f 00 e8 c8 c0 80 00 d0 f3
>3a0198	ca bf 00 4f 00 c9 20 d0 09 a9 00 9f 00 4f 00 ca
>3a01a8	10 ef 28 2b 7a fa 60 e2 20 a9 48 8f 0f 00 00 a9
>3a01b8	34 8f 13 00 00 a9 20 8f 08 00 af 8f 09 00 af a2
>3a01c8	00 00 a9 00 9f 10 f0 3a e8 e0 12 00 d0 f6 a9 80
>3a01d8	8f b2 08 00 e2 20 a9 00 8f 89 0f 00 60 08 e2 20
>3a01e8	48 48 a9 00 22 3c 10 00 68 22 18 10 00 af 89 0f
>3a01f8	00 29 01 d0 f8 68 28 60 08 e2 20 48 48 a9 01 22
>3a0208	3c 10 00 68 22 18 10 00 af 89 0f 00 29 01 d0 f8
>3a0218	68 28 60 08 c2 20 48 e2 20 a9 0d 20 18 00 c2 20
>3a0228	68 28 60 08 22 78 10 00 28 60 08 0b 08 c2 20 48
>3a0238	a9 00 08 5b 68 28 e2 20 a5 b4 1a 85 b4 cf 13 00
>3a0248	00 90 05 20 14 00 64 b4 2b 28 60 da 5a 0b 08 08
>3a0258	c2 20 48 a9 00 08 5b 68 28 e2 20 c2 10 8f b3 08
>3a0268	00 af b2 08 00 29 20 f0 07 af b3 08 00 20 28 00
>3a0278	af b2 08 00 29 80 f0 07 af b3 08 00 20 e5 01 af
>3a0288	b2 08 00 29 40 f0 14 af b3 08 00 20 00 02 af b3
>3a0298	08 00 c9 0d d0 05 a9 0a 20 00 02 28 2b 7a fa 60
>3a02a8	08 e2 20 bd 00 00 f0 06 20 18 00 e8 80 f5 28 60
>3a02b8	08 c2 20 48 48 4a 4a 4a 4a 4a 4a 4a 4a 20 d2 02
>3a02c8	68 29 ff 00 20 d2 02 68 28 60 08 c2 20 48 e2 20
>3a02d8	48 4a 4a 4a 4a 20 e9 02 68 20 e9 02 c2 20 68 28
>3a02e8	60 08 c2 30 da 29 0f 00 aa bf 00 d0 3a 20 18 00
>3a02f8	fa 28 60 08 e2 20 c9 5b b0 04 c9 41 b0 0b c9 7b
>3a0308	b0 04 c9 61 b0 03 28 18 60 28 38 60 08 e2 20 c9
>3a0318	3a b0 04 c9 30 b0 03 28 18 60 28 38 60 08 e2 20
>3a0328	c9 3a b0 04 c9 30 b0 13 c9 67 b0 04 c9 61 b0 0b
>3a0338	c9 47 b0 04 c9 41 b0 03 28 18 60 28 38 60 08 e2
>3a0348	20 c9 3a b0 04 c9 30 b0 12 c9 67 b0 04 c9 61 b0
>3a0358	0f c9 47 b0 04 c9 41 b0 09 28 60 38 e9 30 80 f9
>3a0368	29 df 38 e9 37 80 f2 08 e2 20 c9 7b b0 06 c9 61
>3a0378	90 02 29 df 28 60 08 e2 20 c2 10 bd 00 00 f0 09
>3a0388	20 6f 03 9d 00 00 e8 80 f2 28 60 08 0b 08 c2 20
>3a0398	48 a9 00 08 5b 68 28 c2 20 48 06 21 26 23 a5 21
>3a03a8	85 0c a5 23 85 0e 06 0c 26 0e 06 0c 26 0e 18 a5
>3a03b8	21 65 0c 85 21 a5 23 65 0e 85 23 68 2b 28 60 08
>3a03c8	0b 08 c2 20 48 a9 00 08 5b 68 28 c2 20 a5 21 8f
>3a03d8	12 01 00 a9 0a 00 8f 10 01 00 af 14 01 00 85 21
>3a03e8	64 23 af 16 01 00 85 27 64 29 e2 20 a9 00 85 25
>3a03f8	85 2b 2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68
>3a0408	28 c2 20 a5 21 8f 12 01 00 a9 64 00 8f 10 01 00
>3a0418	af 14 01 00 85 21 64 23 af 16 01 00 85 27 64 29
>3a0428	e2 20 a9 00 85 25 85 2b 2b 28 60 08 c2 20 a5 21
>3a0438	d0 08 a5 23 d0 04 28 e2 02 60 28 c2 02 60 08 e2
>3a0448	20 a5 25 c9 00 d0 02 28 60 08 c2 20 48 a9 00 08
>3a0458	5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00
>3a0468	20 4d 18 e2 20 dc d2 08 08 e2 20 a5 25 c9 02 d0
>3a0478	02 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a0488	04 8f d1 08 00 c2 20 29 ff 00 20 4d 18 e2 20 dc
>3a0498	d2 08 08 e2 20 a5 25 c9 00 d0 08 c2 20 a5 23 d0
>3a04a8	21 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a04b8	04 8f d1 08 00 c2 20 29 ff 00 20 4d 18 e2 20 dc
>3a04c8	d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09
>3a04d8	8f d1 08 00 c2 20 29 ff 00 20 4d 18 e2 20 dc d2
>3a04e8	08 08 e2 20 a5 25 c9 00 d0 0e a5 24 d0 29 a5 23
>3a04f8	d0 25 a5 22 d0 21 28 60 08 c2 20 48 a9 00 08 5b
>3a0508	68 28 e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00 20
>3a0518	4d 18 e2 20 dc d2 08 08 c2 20 48 a9 00 08 5b 68
>3a0528	28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff 00 20 4d
>3a0538	18 e2 20 dc d2 08 08 0b 08 c2 20 48 a9 00 08 5b
>3a0548	68 28 c2 30 64 21 64 23 e2 20 64 25 a7 00 c9 26
>3a0558	f0 44 e2 20 a7 00 20 14 03 90 76 20 93 03 38 e9
>3a0568	30 c2 20 29 ff 00 18 65 21 85 21 a5 23 69 00 00
>3a0578	85 23 20 d8 1a 80 db 08 c2 20 48 a9 00 08 5b 68
>3a0588	28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00 20 4d
>3a0598	18 e2 20 dc d2 08 20 d8 1a a7 00 c9 48 f0 04 c9
>3a05a8	68 d0 d4 20 d8 1a e2 20 a7 00 20 25 03 90 22 20
>3a05b8	46 03 c2 20 06 21 26 23 06 21 26 23 06 21 26 23
>3a05c8	06 21 26 23 29 ff 00 18 65 21 85 21 20 d8 1a 80
>3a05d8	d5 2b 28 60 08 c2 30 38 a5 04 e5 18 a8 e2 20 b7
>3a05e8	18 f0 10 c9 20 f0 06 c9 09 f0 02 28 60 88 c0 ff
>3a05f8	ff d0 ec a9 00 60 08 0b 08 c2 20 48 a9 00 08 5b
>3a0608	68 28 c2 30 a5 18 85 00 e2 20 a5 1a 85 02 20 f9
>3a0618	1a a7 00 20 14 03 90 0c 20 3e 05 c2 20 a5 21 85
>3a0628	d5 20 f9 1a c2 20 a5 00 85 18 e2 20 a5 02 85 1a
>3a0638	20 4c 06 e2 20 20 bd 06 c9 00 f0 05 20 46 08 80
>3a0648	f4 2b 28 60 08 c2 20 a5 18 85 00 a5 1a 85 02 a2
>3a0658	00 00 e2 20 a0 00 00 e0 00 00 f0 0d b7 00 f0 53
>3a0668	c9 3a f0 04 c9 20 d0 33 c8 b7 00 f0 46 c9 52 f0
>3a0678	10 c9 72 d0 26 b7 00 f0 3a c9 52 f0 04 c9 72 d0
>3a0688	1a c8 b7 00 f0 2d c9 45 f0 04 c9 65 d0 0d c8 b7
>3a0698	00 f0 20 c9 4d f0 0a c9 6d f0 06 e8 20 d8 1a 80
>3a06a8	b3 a7 00 c9 3a d0 03 20 d8 1a a9 03 85 1c a9 8e
>3a06b8	20 46 08 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68
>3a06c8	28 e2 20 a9 7f 85 1c c2 10 20 fb 07 a5 1c d0 03
>3a06d8	4c 60 07 c2 20 a5 18 85 00 e2 20 a5 1a 85 02 c2
>3a06e8	20 64 04 64 06 e2 30 a0 00 b7 00 f0 da c9 8e f0
>3a06f8	d6 c8 c4 1c 90 f3 c2 10 a7 00 c9 22 d0 05 20 82
>3a0708	07 80 28 a5 1c c9 01 f0 19 c2 20 a5 00 c5 18 d0
>3a0718	08 e2 20 a5 02 c5 1a f0 09 e2 20 a7 04 20 51 3d
>3a0728	b0 09 e2 20 20 92 07 c9 00 d0 11 c2 20 a5 00 85
>3a0738	04 e2 20 a5 02 85 06 20 d8 1a 80 a9 c9 81 d0 18
>3a0748	20 dc 05 c9 00 f0 14 89 80 10 0b 20 e7 08 c9 30
>3a0758	f0 04 a9 af 80 02 a9 81 2b 28 60 08 c2 20 48 a9
>3a0768	00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29
>3a0778	ff 00 20 4d 18 e2 20 dc d2 08 08 e2 20 20 d8 1a
>3a0788	a7 00 f0 04 c9 22 d0 f5 28 60 08 0b c2 30 da 5a
>3a0798	08 c2 20 48 a9 00 08 5b 68 28 a9 11 09 85 08 e2
>3a07a8	20 a9 3a 85 0a a2 80 00 e2 20 a0 01 00 b7 08 f0
>3a07b8	26 c5 1c d0 29 c2 30 a0 02 00 b7 08 85 0c e2 20
>3a07c8	a9 3a 85 0e e2 10 a0 00 b7 00 20 6f 03 d7 0c d0
>3a07d8	0d c8 c4 1c 90 f2 8a c2 10 7a fa 2b 28 60 c2 30
>3a07e8	18 a5 08 69 08 00 85 08 e2 20 a5 0a 69 00 85 0a
>3a07f8	e8 80 b5 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28
>3a0808	c2 30 a9 11 09 85 08 a9 3a 00 85 0a 64 0c e2 20
>3a0818	a0 01 00 b7 08 f0 1d c5 1c b0 06 c5 0c 90 02 85
>3a0828	0c c2 20 18 a5 08 69 08 00 85 08 a5 0a 69 00 00
>3a0838	85 0a 80 da e2 20 a5 0c 85 1c ab 2b 28 60 08 0b
>3a0848	08 c2 20 48 a9 00 08 5b 68 28 e2 20 87 00 c2 20
>3a0858	18 a5 00 69 01 00 85 08 a5 02 69 00 00 85 0a e2
>3a0868	10 a4 1c 88 e2 20 b7 08 87 08 f0 13 c2 20 18 a5
>3a0878	08 69 01 00 85 08 a5 0a 69 00 00 85 0a 80 e5 2b
>3a0888	28 60 08 c2 30 29 7f 00 0a 0a 0a 18 69 11 09 aa
>3a0898	28 60 08 8b 0b 08 c2 20 48 a9 00 08 5b 68 28 08
>3a08a8	e2 20 48 a9 3a 48 ab 68 28 e2 20 c2 10 20 8a 08
>3a08b8	bd 00 00 c2 20 29 0f 00 2b ab 28 60 08 8b 0b 08
>3a08c8	c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 3a 48
>3a08d8	ab 68 28 c2 30 20 8a 08 bd 04 00 2b ab 28 60 08
>3a08e8	8b 0b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48
>3a08f8	a9 3a 48 ab 68 28 e2 20 c2 10 20 8a 08 bd 00 00
>3a0908	c2 20 29 f0 00 2b ab 28 60 03 01 10 d0 06 21 00
>3a0918	00 03 01 12 d0 45 21 00 00 02 01 14 d0 53 21 00
>3a0928	00 02 01 16 d0 6c 21 00 00 02 03 18 d0 7f 21 00
>3a0938	00 00 01 1c d0 00 00 00 00 04 01 1e d0 c1 21 00
>3a0948	00 04 01 20 d0 f7 21 00 00 04 01 22 d0 dc 21 00
>3a0958	00 05 03 24 d0 b0 21 00 00 06 03 28 d0 92 21 00
>3a0968	00 07 02 2c d0 a1 21 00 00 ff 01 2f d0 00 00 00
>3a0978	00 40 01 31 d0 00 00 00 00 20 03 33 d0 4a 2f 00
>3a0988	00 20 05 37 d0 4f 33 00 00 20 03 3d d0 9a 32 00
>3a0998	00 20 04 41 d0 3a 32 00 00 20 03 46 d0 31 32 00
>3a09a8	00 20 02 4a d0 c9 31 00 00 50 04 4d d0 00 00 00
>3a09b8	00 50 04 52 d0 00 00 00 00 20 05 57 d0 0c 31 00
>3a09c8	00 20 06 5d d0 85 31 00 00 20 03 64 d0 61 2f 00
>3a09d8	00 50 02 68 d0 00 00 00 00 50 04 6b d0 00 00 00
>3a09e8	00 20 04 70 d0 55 30 00 00 20 02 75 d0 5b 2f 00
>3a09f8	00 20 04 78 d0 5e 2f 00 00 50 05 7d d0 00 00 00
>3a0a08	00 50 05 83 d0 00 00 00 00 20 04 89 d0 58 2f 00
>3a0a18	00 20 03 8e d0 90 32 00 00 20 04 92 d0 2b 2f 00
>3a0a28	00 20 04 97 d0 bb 2e 00 00 20 05 9c d0 51 2e 00
>3a0a38	00 20 05 a2 d0 de 2d 00 00 20 03 a8 d0 da 2d 00
>3a0a48	00 20 04 ac d0 bb 2c 00 00 20 04 b1 d0 cd 2d 00
>3a0a58	00 20 07 b6 d0 d1 2d 00 00 20 03 be d0 0e 2c 00
>3a0a68	00 20 04 c2 d0 77 2b 00 00 04 02 c7 d0 4a 22 00
>3a0a78	00 04 02 ca d0 2d 22 00 00 04 02 cd d0 12 22 00
>3a0a88	00 30 01 d0 d0 e9 34 00 00 30 03 d2 d0 03 39 00
>3a0a98	00 30 04 d6 d0 53 39 00 00 30 05 db d0 e4 39 00
>3a0aa8	00 30 05 e1 d0 96 39 00 00 30 04 e7 d0 23 3a 00
>3a0ab8	00 30 03 ec d0 78 3a 00 00 30 03 f0 d0 bd 3a 00
>3a0ac8	00 30 03 f4 d0 46 3b 00 00 30 03 f8 d0 cf 3b 00
>3a0ad8	00 30 03 fc d0 ff 3b 00 00 30 04 00 d1 72 38 00
>3a0ae8	00 30 03 05 d1 11 38 00 00 30 04 09 d1 c0 37 00
>3a0af8	00 30 03 0e d1 6a 37 00 00 30 05 12 d1 a1 36 00
>3a0b08	00 30 06 18 d1 c0 35 00 00 30 04 1f d1 0b 35 00
>3a0b18	00 10 03 24 d1 8d 3c 00 00 10 03 28 d1 58 3c 00
>3a0b28	00 10 04 2c d1 79 47 00 00 10 04 31 d1 a4 3c 00
>3a0b38	00 10 03 36 d1 77 44 00 00 20 05 3a d1 4b 46 00
>3a0b48	00 10 04 40 d1 26 47 00 00 20 05 45 d1 30 48 00
>3a0b58	00 20 03 4b d1 4f 49 00 00 10 04 4f d1 bc 48 00
>3a0b68	00 20 06 54 d1 c5 49 00 00 10 07 5b d1 55 3c 00
>3a0b78	00 20 03 63 d1 03 2b 00 00 20 05 67 d1 35 2a 00
>3a0b88	00 20 09 6d d1 cc 23 00 00 20 09 77 d1 67 23 00
>3a0b98	00 20 0a 81 d1 95 23 00 00 20 07 8c d1 d4 22 00
>3a0ba8	00 30 08 94 d1 14 34 00 00 20 07 9d d1 69 22 00
>3a0bb8	00 30 08 a5 d1 81 34 00 00 20 08 ae d1 ed 24 00
>3a0bc8	00 20 08 b7 d1 49 24 00 00 20 06 c0 d1 2e 25 00
>3a0bd8	00 20 09 c7 d1 f6 25 00 00 20 04 d1 d1 89 27 00
>3a0be8	00 20 04 d6 d1 cf 27 00 00 20 04 db d1 35 28 00
>3a0bf8	00 20 06 e0 d1 db 28 00 00 20 08 e7 d1 68 29 00
>3a0c08	00 20 0a f0 d1 9c 29 00 00 00 00 00 00 00 00 00
>3a0c18	00 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 a9
>3a0c28	ff ff 85 b8 e2 20 a9 37 85 ba c2 20 64 b5 64 bb
>3a0c38	e2 20 64 b7 64 bd 2b 28 60 5a 08 e2 20 85 e8 c2
>3a0c48	10 86 8d c2 20 a5 0e 48 a5 0c 48 a5 12 48 a5 10
>3a0c58	48 20 f1 0c b0 03 20 75 0c 20 7d 0e c2 20 68 85
>3a0c68	10 68 85 12 68 85 0c 68 85 0e 28 7a 60 08 0b 08
>3a0c78	c2 20 48 a9 00 08 5b 68 28 e2 20 a6 8d ca 86 0c
>3a0c88	e8 c2 30 38 a5 b8 e5 0c 85 be e2 20 a5 ba e9 00
>3a0c98	85 c0 20 7d 0e e2 20 a5 e8 a0 00 00 97 c1 a9 00
>3a0ca8	a0 01 00 97 c1 a0 02 00 97 c1 c2 20 a9 00 00 97
>3a0cb8	c1 c2 20 18 a5 b8 69 01 00 a0 05 00 97 c1 e2 20
>3a0cc8	c8 c8 a5 ba 69 00 97 c1 c2 20 a5 be 85 b5 e2 20
>3a0cd8	a5 c0 85 b7 c2 20 38 a5 c1 e9 01 00 85 b8 e2 20
>3a0ce8	a5 c3 e9 00 85 ba 2b 28 60 08 0b 08 c2 20 48 a9
>3a0cf8	00 08 5b 68 28 c2 30 c2 20 a5 bb 85 c7 e2 20 a5
>3a0d08	bd 85 c9 a5 c7 d0 17 e2 20 a5 c9 d0 11 c2 20 a9
>3a0d18	00 00 85 cd e2 20 a9 00 85 cf 2b 28 18 60 c2 20
>3a0d28	a0 05 00 b7 c7 85 ca e2 20 c8 c8 b7 c7 85 cc c2
>3a0d38	20 18 a5 c7 65 8d 85 0c e2 20 a5 c9 69 00 85 0e
>3a0d48	c2 20 18 a5 0c 69 08 00 85 0c e2 20 a5 0e 69 00
>3a0d58	85 0e c2 20 a5 0c c5 ca d0 28 e2 20 a5 0e c5 cc
>3a0d68	d0 20 c2 20 a5 cd d0 5d e2 20 a5 cf d0 57 c2 20
>3a0d78	a0 02 00 b7 c7 85 bb e2 20 c8 c8 b7 c7 85 bd 4c
>3a0d88	2e 0e c2 20 a5 0c 69 08 00 85 10 e2 20 a5 0e 69
>3a0d98	00 85 12 e2 20 a5 c4 c5 10 b0 3e 90 08 c2 20 a5
>3a0da8	c4 c5 10 b0 34 c2 20 a5 c7 85 cd e2 20 a5 c9 85
>3a0db8	cf c2 20 a0 02 00 b7 cd 85 c7 e2 20 c8 c8 b7 cd
>3a0dc8	85 c9 4c 0b 0d c2 20 a0 02 00 b7 c7 97 cd e2 20
>3a0dd8	c8 c8 b7 c7 97 cd 4c 2e 0e c2 20 a0 05 00 b7 c7
>3a0de8	97 0c e2 20 c8 c8 b7 c7 97 0c c2 20 a0 02 00 b7
>3a0df8	c7 97 0c e2 20 c8 c8 b7 c7 97 0c c2 20 a5 cd d0
>3a0e08	14 e2 20 a5 cd d0 0e c2 20 a5 0c 85 bb e2 20 a5
>3a0e18	0e 85 bd 80 11 c2 20 a0 02 00 a5 0c 97 cd e2 20
>3a0e28	c8 c8 a5 0e 97 cd c2 20 a5 c7 85 c1 e2 20 a5 c9
>3a0e38	85 c3 c2 20 a5 c1 85 b5 e2 20 a5 c3 85 b7 c2 20
>3a0e48	a0 05 00 a5 0c 97 c1 e2 20 c8 c8 a5 0e 97 c1 c2
>3a0e58	20 a0 02 00 a9 00 00 97 c1 e2 20 c8 c8 97 c1 e2
>3a0e68	20 a5 e8 e2 20 a0 00 00 97 c1 a0 01 00 a9 00 97
>3a0e78	c1 2b 28 38 60 08 c2 20 38 a5 be e9 08 00 85 c1
>3a0e88	e2 20 a5 c0 e9 00 85 c3 28 60 08 e2 20 a5 c3 f0
>3a0e98	04 c9 38 b0 12 c2 20 a5 c1 f0 0c e2 20 a0 01 00
>3a0ea8	b7 c1 1a 97 c1 28 60 00 ea 08 e2 20 a5 c3 f0 04
>3a0eb8	c9 38 b0 17 c2 20 a5 c1 f0 11 e2 20 a0 01 00 b7
>3a0ec8	c1 3a 97 c1 d0 03 20 d5 0e 28 60 00 ea 08 c2 20
>3a0ed8	a5 bb d0 21 e2 20 a5 bd d0 1b a5 c3 85 bd c2 20
>3a0ee8	a5 c1 85 bb a9 00 00 a0 02 00 97 c1 c8 c8 e2 20
>3a0ef8	97 c1 4c bc 0f e2 20 a5 bd c5 c3 90 28 c2 20 a5
>3a0f08	bb c5 c1 90 20 c2 20 a5 bb a0 02 00 97 c1 e2 20
>3a0f18	c8 c8 a5 bd 97 c1 c2 20 a5 c1 85 bb e2 20 a5 c3
>3a0f28	85 bd 4c bc 0f c2 20 a5 bb 85 08 e2 20 a5 bd 85
>3a0f38	0a e2 20 a0 04 00 b7 08 c5 c6 90 32 d0 0b c2 20
>3a0f48	a0 02 00 b7 08 c5 c4 90 25 c2 20 a0 02 00 b7 08
>3a0f58	97 c1 e2 20 c8 c8 b7 08 97 c1 c2 20 a5 c1 a0 02
>3a0f68	00 97 08 e2 20 a5 c3 c8 c8 97 08 4c bc 0f c2 20
>3a0f78	a0 02 00 b7 08 d0 08 e2 20 c8 c8 b7 08 f0 19 c2
>3a0f88	20 a0 02 00 b7 08 85 0c e2 20 c8 c8 b7 08 85 0a
>3a0f98	c2 20 a5 0c 85 08 80 99 c2 20 a5 c1 a0 02 00 97
>3a0fa8	08 e2 20 c8 c8 a5 c3 97 08 a9 00 97 c1 c2 20 a0
>3a0fb8	02 00 97 c1 20 c1 0f 28 60 08 c2 20 a5 bb 85 c1
>3a0fc8	e2 20 a5 bd 85 c3 c2 20 a5 c1 d0 09 e2 20 a5 c3
>3a0fd8	d0 03 4c 64 10 c2 20 a0 02 00 b7 c1 85 0c e2 20
>3a0fe8	c8 c8 b7 c1 85 0e c2 20 a0 05 00 b7 c1 85 10 e2
>3a0ff8	20 c8 c8 b7 c1 85 12 c2 20 a5 0c c5 10 d0 08 e2
>3a1008	20 a5 0e c5 12 f0 1f c2 20 a0 02 00 b7 c1 85 0c
>3a1018	e2 20 c8 c8 b7 c1 85 0e c2 20 a5 0c 85 c1 e2 20
>3a1028	a5 0e 85 c3 80 a0 c2 20 a0 02 00 b7 c1 85 0c e2
>3a1038	20 c8 c8 b7 c1 85 0e c2 20 a0 02 00 b7 0c 97 c1
>3a1048	e2 20 c8 c8 b7 0c 97 c1 c2 20 a0 05 00 b7 0c 97
>3a1058	c1 e2 20 c8 c8 b7 0c 97 c1 4c dd 0f 28 60 08 c2
>3a1068	10 e2 20 64 14 a5 e0 1a 1a 85 15 e2 20 a5 e1 85
>3a1078	16 c5 ba 90 29 f0 08 c2 20 a5 14 c5 b8 90 1f 08
>3a1088	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 03 8f d1 08
>3a1098	00 c2 20 29 ff 00 20 4d 18 e2 20 dc d2 08 28 60
>3a10a8	c9 00 d0 05 c0 01 00 f0 05 09 30 97 14 c8 60 08
>3a10b8	c2 30 64 0c a5 23 10 1a 18 a5 21 49 ff ff 69 01
>3a10c8	00 85 21 a5 23 49 ff ff 69 00 00 85 23 a9 ff ff
>3a10d8	85 0c 64 10 64 12 a2 1f 00 f8 06 21 26 23 a5 10
>3a10e8	65 10 85 10 a5 12 65 12 85 12 ca 10 ed d8 e2 20
>3a10f8	20 66 10 a0 00 00 a5 0c f0 04 a9 2d 80 02 a9 20
>3a1108	97 14 c8 a2 03 00 b5 10 29 f0 4a 4a 4a 4a 20 a8
>3a1118	10 b5 10 29 0f 20 a8 10 ca 10 eb c0 01 00 d0 0c
>3a1128	a9 20 87 14 a0 01 00 a9 30 97 14 c8 a9 00 97 14
>3a1138	28 60 00 ea 08 e2 20 c2 10 a0 00 00 bd 00 00 f0
>3a1148	04 e8 c8 80 f7 28 60 08 0b 8b 08 c2 20 48 a9 00
>3a1158	08 5b 68 28 e2 20 c2 10 08 c2 20 48 e2 20 a5 23
>3a1168	48 ab c2 20 68 28 a6 21 20 3c 11 84 0c 08 c2 20
>3a1178	48 e2 20 a5 29 48 ab c2 20 68 28 a6 27 20 3c 11
>3a1188	c2 20 98 38 65 0c aa e2 20 a9 02 20 41 0c c2 20
>3a1198	a5 b5 85 08 e2 20 a5 b7 85 0a a0 00 00 08 c2 20
>3a11a8	48 e2 20 a5 23 48 ab c2 20 68 28 a6 21 bd 00 00
>3a11b8	f0 06 97 08 e8 c8 80 f5 e2 20 08 c2 20 48 e2 20
>3a11c8	a5 29 48 ab c2 20 68 28 a6 27 bd 00 00 97 08 f0
>3a11d8	04 e8 c8 80 f5 c2 20 a5 08 85 21 e2 20 a5 0a 85
>3a11e8	23 a9 02 85 25 ab 2b 28 60 08 0b 8b 08 c2 20 48
>3a11f8	a9 00 08 5b 68 28 c2 30 08 c2 20 48 e2 20 a5 23
>3a1208	48 ab c2 20 68 28 a6 21 20 3c 11 98 aa e8 e2 20
>3a1218	a9 02 20 41 0c c2 20 a5 be 85 08 e2 20 a5 c0 85
>3a1228	0a a0 00 00 b7 21 97 08 f0 03 c8 80 f7 a5 08 85
>3a1238	21 a5 09 85 22 a5 0a 85 23 a9 00 85 24 ab 2b 28
>3a1248	60 08 e2 20 c2 10 a0 00 00 b7 21 f0 05 c8 80 f9
>3a1258	84 90 c2 30 c4 27 90 13 f0 11 a5 8d 30 0d f0 0b
>3a1268	c4 8d b0 12 a5 27 d0 0e 4c ca 12 20 66 10 e2 20
>3a1278	a9 00 87 14 80 39 20 66 10 c2 30 18 a5 21 65 27
>3a1288	85 21 a5 23 69 00 00 85 23 a0 00 00 e2 20 a7 21
>3a1298	97 14 f0 1b c2 20 18 a5 21 69 01 00 85 21 a5 23
>3a12a8	69 00 00 85 23 c8 c4 8d d0 e2 a9 00 00 97 14 c2
>3a12b8	20 a5 14 85 21 a5 16 85 23 e2 20 a9 02 85 25 20
>3a12c8	f1 11 28 60 48 5a 0b 08 08 c2 20 48 a9 00 08 5b
>3a12d8	68 28 c2 30 a9 00 00 85 00 85 18 a9 36 00 85 02
>3a12e8	85 1a ad 8a 0f 30 20 a0 02 00 b7 18 f0 0f c5 53
>3a12f8	90 10 c5 57 f0 02 b0 05 20 2e 13 80 e5 28 2b 7a
>3a1308	68 60 20 b5 1b 80 db 08 c2 20 48 a9 00 08 5b 68
>3a1318	28 e2 20 a9 01 8f d1 08 00 c2 20 29 ff 00 20 4d
>3a1328	18 e2 20 dc d2 08 08 c2 30 85 21 64 23 20 b7 10
>3a1338	a5 14 1a 85 21 a5 16 85 23 20 c4 33 18 a5 18 69
>3a1348	04 00 85 00 a5 1a 69 00 00 85 02 e2 20 a9 20 20
>3a1358	18 00 c2 20 20 6d 13 90 fb e2 20 a9 0d 20 18 00
>3a1368	20 b5 1b 28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b
>3a1378	68 28 08 e2 20 48 a9 00 48 ab 68 28 e2 20 c2 10
>3a1388	a7 00 f0 3a 30 05 20 18 00 80 29 c2 20 29 7f 00
>3a1398	0a 0a 0a 18 69 11 09 85 08 a9 3a 00 69 00 00 85
>3a13a8	0a 08 e2 20 48 a9 3a 48 ab 68 28 a0 02 00 b7 08
>3a13b8	aa 20 a8 02 c2 20 20 d8 1a ab 2b 28 18 60 ab 2b
>3a13c8	28 38 60 08 c2 20 a9 ff 6f 85 1d a9 ff 7f 85 1f
>3a13d8	a9 ff ff 85 21 85 23 85 27 85 29 e2 20 85 25 85
>3a13e8	2b 28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28
>3a13f8	08 e2 20 48 a9 00 48 ab 68 28 c2 30 5a a4 1d bd
>3a1408	00 00 99 00 00 bd 02 00 99 02 00 e2 20 bd 04 00
>3a1418	99 04 00 c2 20 38 98 e9 05 00 85 1d 7a ab 2b 28
>3a1428	60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2
>3a1438	20 48 a9 00 48 ab 68 28 c2 30 5a 18 a5 1d 69 05
>3a1448	00 85 1d a8 b9 00 00 9d 00 00 b9 02 00 9d 02 00
>3a1458	e2 20 b9 04 00 9d 04 00 bd 00 00 7a ab 2b 28 60
>3a1468	08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20
>3a1478	48 a9 00 48 ab 68 28 e2 20 c2 10 5a a4 1f 99 00
>3a1488	00 88 84 1f 7a ab 2b 28 60 08 0b 8b 08 c2 20 48
>3a1498	a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28
>3a14a8	e2 20 c2 10 5a a4 1f c8 84 1f b9 00 00 c2 20 29
>3a14b8	ff 00 7a ab 2b 28 60 08 e2 20 a9 01 20 68 14 28
>3a14c8	60 5a 08 8b 08 e2 20 48 a9 00 48 ab 68 28 e2 20
>3a14d8	a4 1f b9 01 00 c9 01 d0 08 c2 20 e6 1f ab 28 7a
>3a14e8	60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a14f8	d1 08 00 c2 20 29 ff 00 20 4d 18 e2 20 dc d2 08
>3a1508	08 0b 8b c2 20 48 08 c2 20 48 a9 00 08 5b 68 28
>3a1518	08 e2 20 48 a9 00 48 ab 68 28 e2 20 c2 10 a4 1f
>3a1528	c0 ff 7f f0 11 20 9a 08 85 0c b9 01 00 20 9a 08
>3a1538	c5 0c f0 02 90 08 c2 20 68 ab 2b 28 18 60 c2 20
>3a1548	68 ab 2b 28 38 60 4c 3e 05 08 e2 20 a9 00 8f 00
>3a1558	4d 00 a2 01 00 20 fb 16 20 9a 04 c2 20 a5 21 9f
>3a1568	00 4d 00 e2 20 af 00 4d 00 1a 30 3e 8f 00 4d 00
>3a1578	e8 e8 20 f9 1a e2 20 a7 00 c9 8d f0 09 c9 2c d0
>3a1588	0a 20 d8 1a 80 cf 20 d8 1a 28 60 08 c2 20 48 a9
>3a1598	00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29
>3a15a8	ff 00 20 4d 18 e2 20 dc d2 08 08 c2 20 48 a9 00
>3a15b8	08 5b 68 28 e2 20 a9 0a 8f d1 08 00 c2 20 29 ff
>3a15c8	00 20 4d 18 e2 20 dc d2 08 08 20 cf 3f 90 23 e2
>3a15d8	20 a5 e8 29 80 d0 06 20 25 3e 4c f8 15 e2 20 a9
>3a15e8	8c 20 e5 1b 20 bf 14 20 51 15 20 b6 42 20 c9 14
>3a15f8	28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>3a1608	8f d1 08 00 c2 20 29 ff 00 20 4d 18 e2 20 dc d2
>3a1618	08 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 c2
>3a1628	10 20 d8 1a a0 00 00 b7 00 f0 24 c9 22 f0 03 c8
>3a1638	80 f5 84 0c e2 20 a9 02 a6 0c e8 20 41 0c a0 00
>3a1648	00 c4 0c f0 29 a7 00 97 be c8 20 d8 1a 80 f2 08
>3a1658	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08
>3a1668	00 c2 20 29 ff 00 20 4d 18 e2 20 dc d2 08 a9 00
>3a1678	97 be c2 20 a5 be 85 21 e2 20 a5 c0 85 23 a9 02
>3a1688	85 25 20 d8 1a 2b 28 60 08 e2 20 a7 00 c2 20 29
>3a1698	ff 00 20 c4 08 85 2d 20 bf 14 08 e2 20 48 a9 00
>3a16a8	48 ab 68 28 20 b4 16 20 c9 14 28 60 20 d8 1a 6c
>3a16b8	2d 08 08 0b 8b c2 20 48 08 c2 20 48 a9 00 08 5b
>3a16c8	68 28 c2 30 a2 27 08 20 29 14 a2 21 08 20 29 14
>3a16d8	20 91 14 20 c4 08 85 2d 08 e2 20 48 a9 00 48 ab
>3a16e8	68 28 20 f8 16 a2 21 08 20 eb 13 68 ab 2b 28 60
>3a16f8	6c 2d 08 08 08 c2 20 48 a9 00 08 5b 68 28 08 e2
>3a1708	20 48 a9 00 48 ab 68 28 c2 10 da e2 20 a7 00 d0
>3a1718	03 4c be 17 30 33 c9 20 d0 03 4c b8 17 c9 3a b0
>3a1728	04 c9 30 b0 56 c9 26 f0 52 c9 22 d0 03 4c d1 17
>3a1738	c9 5b b0 07 c9 41 90 03 4c dd 17 c9 7b b0 07 c9
>3a1748	61 90 03 4c dd 17 4c be 17 c9 8c f0 40 c9 8d f0
>3a1758	41 20 e7 08 c9 30 d0 0c 20 90 16 a2 21 08 20 eb
>3a1768	13 4c 13 17 c9 00 d0 4e a7 00 a6 1f e0 ff 7f f0
>3a1778	05 20 08 15 b0 12 20 68 14 80 35 c2 20 20 4e 15
>3a1788	a2 21 08 20 eb 13 80 83 20 ba 16 80 dd 20 68 14
>3a1798	80 1e e2 20 a4 1f c0 ff 7f f0 46 a4 1f b9 01 00
>3a17a8	c9 01 f0 3d c9 8c f0 05 20 ba 16 80 ee 20 91 14
>3a17b8	20 d8 1a 4c 13 17 a6 1f e0 ff 7f b0 24 bd 01 00
>3a17c8	c9 01 f0 1d 20 ba 16 80 ed 20 19 16 a2 21 08 20
>3a17d8	eb 13 4c 13 17 20 d1 15 a2 21 08 20 eb 13 4c 13
>3a17e8	17 a2 21 08 20 29 14 fa 28 60 08 0b 8b 08 e2 20
>3a17f8	48 a9 00 48 ab 68 28 08 c2 20 48 a9 00 08 5b 68
>3a1808	28 c2 30 a9 fd 5f 85 31 ab 2b 28 60 08 0b 08 c2
>3a1818	20 48 a9 00 08 5b 68 28 c2 30 92 31 c6 31 c6 31
>3a1828	2b 28 60 08 c2 30 29 ff 00 20 14 18 28 60 08 0b
>3a1838	08 c2 20 48 a9 00 08 5b 68 28 c2 30 e6 31 e6 31
>3a1848	b2 31 2b 28 60 8b 0b 08 08 c2 20 48 a9 00 08 5b
>3a1858	68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 20 85 21
>3a1868	a9 00 00 85 23 e2 20 a9 00 85 25 85 e8 a9 3a 85
>3a1878	e7 c2 20 a9 a7 18 85 e5 20 6c 3f c2 20 a5 d5 85
>3a1888	21 a5 d7 85 23 e2 20 a9 00 85 25 85 e8 a9 3a 85
>3a1898	e7 c2 20 a9 ab 18 85 e5 20 6c 3f 28 2b ab 60 45
>3a18a8	52 52 00 45 52 4c 00 e2 20 c2 10 20 1b 02 af d1
>3a18b8	08 00 0a c2 20 29 ff 00 a8 08 e2 20 48 a9 3a 48
>3a18c8	ab 68 28 be 01 19 20 a8 02 c2 20 a5 d5 f0 27 a2
>3a18d8	2d 19 20 a8 02 08 e2 20 48 a9 00 48 ab 68 28 c2
>3a18e8	20 af d5 08 00 8f 21 08 00 a9 00 00 8f 23 08 00
>3a18f8	20 e4 33 20 1b 02 4c bb 20 31 19 34 19 3a 19 47
>3a1908	19 55 19 63 19 76 19 8c 19 9c 19 ab 19 b8 19 c9
>3a1918	19 d8 19 e5 19 f3 19 02 1a 13 1a 2c 1a 40 1a 54
>3a1928	1a 6a 1a 7e 1a 20 61 74 00 4f 4b 00 42 72 65 61
>3a1938	6b 00 53 79 6e 74 61 78 20 65 72 72 6f 72 00 4f
>3a1948	75 74 20 6f 66 20 6d 65 6d 6f 72 79 00 54 79 70
>3a1958	65 20 6d 69 73 6d 61 74 63 68 00 56 61 72 69 61
>3a1968	62 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 00 4c 69
>3a1978	6e 65 20 6e 75 6d 62 65 72 20 6e 6f 74 20 66 6f
>3a1988	75 6e 64 00 53 74 61 63 6b 20 75 6e 64 65 72 66
>3a1998	6c 6f 77 00 53 74 61 63 6b 20 6f 76 65 72 66 6c
>3a19a8	6f 77 00 4f 75 74 20 6f 66 20 72 61 6e 67 65 00
>3a19b8	49 6c 6c 65 67 61 6c 20 61 72 67 75 6d 65 6e 74
>3a19c8	00 46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 00
>3a19d8	4e 6f 74 20 61 20 6e 75 6d 62 65 72 00 4d 61 74
>3a19e8	68 20 6f 76 65 72 66 6c 6f 77 00 4d 61 74 68 20
>3a19f8	75 6e 64 65 72 66 6c 6f 77 00 44 69 76 69 73 69
>3a1a08	6f 6e 20 62 79 20 7a 65 72 6f 00 55 6e 61 62 6c
>3a1a18	65 20 74 6f 20 72 65 61 64 20 64 69 72 65 63 74
>3a1a28	6f 72 79 00 55 6e 61 62 6c 65 20 74 6f 20 6c 6f
>3a1a38	61 64 20 66 69 6c 65 00 55 6e 61 62 6c 65 20 74
>3a1a48	6f 20 73 61 76 65 20 66 69 6c 65 00 55 6e 61 62
>3a1a58	6c 65 20 74 6f 20 64 65 6c 65 74 65 20 66 69 6c
>3a1a68	65 00 43 6f 75 6c 64 20 6e 6f 74 20 66 69 6e 64
>3a1a78	20 66 69 6c 65 00 43 6f 75 6c 64 20 6e 6f 74 20
>3a1a88	75 70 64 61 74 65 20 64 69 72 65 63 74 6f 72 79
>3a1a98	00 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a1aa8	00 85 d0 2b 28 60 0b 08 08 c2 20 48 a9 00 08 5b
>3a1ab8	68 28 08 c2 20 a9 af 18 8f d2 08 00 e2 20 a9 3a
>3a1ac8	8f d4 08 00 28 20 90 32 20 d1 2d 64 2f 28 2b 60
>3a1ad8	08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 20 18 a5
>3a1ae8	00 69 01 00 85 00 e2 20 a5 02 69 00 85 02 2b 28
>3a1af8	60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a7
>3a1b08	00 f0 0f c9 20 f0 06 c9 09 f0 02 80 05 20 d8 1a
>3a1b18	80 ed 2b 28 60 08 e2 20 a7 00 f0 09 c9 3a f0 05
>3a1b28	20 d8 1a 80 f3 28 60 08 e2 20 64 34 a7 00 f0 19
>3a1b38	c5 35 f0 2c c9 98 f0 1e c9 9c f0 1a c9 9b f0 1a
>3a1b48	c9 9d f0 16 20 d8 1a 80 e3 20 b5 1b c2 20 a5 d5
>3a1b58	f0 1d e2 20 80 d6 e6 34 80 ea c6 34 30 30 80 e4
>3a1b68	a5 33 30 06 a5 34 f0 02 80 da 20 d8 1a 28 60 08
>3a1b78	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08
>3a1b88	00 c2 20 29 ff 00 20 4d 18 e2 20 dc d2 08 08 c2
>3a1b98	20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00
>3a1ba8	c2 20 29 ff 00 20 4d 18 e2 20 dc d2 08 08 c2 30
>3a1bb8	a0 00 00 b7 18 85 0c 18 a5 18 65 0c 85 18 a5 1a
>3a1bc8	69 00 00 85 1a a0 02 00 b7 18 85 d5 18 a5 18 69
>3a1bd8	04 00 85 00 a5 1a 69 00 00 85 02 28 60 08 e2 20
>3a1be8	48 20 f9 1a 68 e2 20 c7 00 d0 08 20 d8 1a 20 f9
>3a1bf8	1a 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a1c08	02 8f d1 08 00 c2 20 29 ff 00 20 4d 18 e2 20 dc
>3a1c18	d2 08 08 e2 20 20 f9 1a e2 20 a7 00 f0 10 c9 3a
>3a1c28	f0 0c c5 35 f0 05 20 d8 1a 80 ef 28 38 60 28 18
>3a1c38	60 5a 08 e2 20 a0 00 00 b7 00 f0 0d c9 3a f0 07
>3a1c48	c9 20 d0 05 c8 80 f1 a9 00 28 7a 60 08 0b 8b 08
>3a1c58	c2 20 48 a9 00 08 5b 68 28 20 cb 13 e2 20 a9 00
>3a1c68	85 da ad 8a 0f 30 4b a7 00 c9 3a d0 03 20 d8 1a
>3a1c78	20 f9 1a a7 00 d0 03 4c 04 1d 20 fb 02 b0 52 a7
>3a1c88	00 10 10 20 e7 08 85 0c c9 20 d0 03 4c f2 1c a5
>3a1c98	d0 f0 51 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a1ca8	02 8f d1 08 00 c2 20 29 ff 00 20 4d 18 e2 20 dc
>3a1cb8	d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 01
>3a1cc8	8f d1 08 00 c2 20 29 ff 00 20 4d 18 e2 20 dc d2
>3a1cd8	08 20 9a 32 4c 04 1d 08 e2 20 48 a9 00 48 ab 68
>3a1ce8	28 6c 2d 08 a5 0c c9 10 d0 a9 a7 00 20 c4 08 c2
>3a1cf8	20 85 2d 20 cb 13 20 d8 1a 20 df 1c ab 2b 28 60
>3a1d08	08 58 20 99 1a 20 f2 17 e2 20 9c 8a 0f c2 20 a5
>3a1d18	18 85 00 a5 1a 85 02 4c 46 1d 08 c2 20 a0 02 00
>3a1d28	b7 18 85 d5 e2 20 a5 da c9 03 f0 12 c2 20 18 a5
>3a1d38	18 69 04 00 85 00 e2 20 a5 1a 69 00 85 02 c2 20
>3a1d48	20 54 1c e2 20 a5 da c9 03 f0 f3 c9 00 d0 31 e2
>3a1d58	20 20 f9 1a a7 00 f0 28 c9 3a f0 1f 08 c2 20 48
>3a1d68	a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20
>3a1d78	29 ff 00 20 4d 18 e2 20 dc d2 08 20 d8 1a 80 be
>3a1d88	28 60 08 58 e2 20 a9 80 85 d0 9c 8a 0f 20 f2 17
>3a1d98	c2 30 64 2f a0 02 00 b7 18 f0 29 20 22 1d e2 20
>3a1da8	a5 da c9 01 f0 1e c9 02 f0 ea c9 03 f0 e6 c2 20
>3a1db8	a0 00 00 18 a5 18 77 18 85 18 e2 20 a5 1a 69 00
>3a1dc8	85 1a 80 d0 e2 20 a9 00 85 d0 28 60 08 c2 30 c2
>3a1dd8	20 a9 00 00 85 08 a9 36 00 85 0a c2 20 a0 02 00
>3a1de8	b7 08 f0 31 c5 21 f0 1e b0 2b c2 20 a0 00 00 18
>3a1df8	a5 08 77 08 85 0c e2 20 a5 0a 69 00 85 0a c2 20
>3a1e08	a5 0c 85 08 80 d7 c2 20 a5 08 85 18 e2 20 a5 0a
>3a1e18	85 1a 28 38 60 28 18 60 08 e2 20 a7 0c 87 08 c2
>3a1e28	20 a5 0c c5 00 d0 08 e2 20 a5 0e c5 02 f0 26 c2
>3a1e38	20 18 a5 0c 69 01 00 85 0c e2 20 a5 0e 69 00 85
>3a1e48	0e c2 20 18 a5 08 69 01 00 85 08 e2 20 a5 0a 69
>3a1e58	00 85 0a 80 c4 28 60 08 e2 20 a7 0c 87 08 c2 20
>3a1e68	a5 0c c5 00 d0 06 a5 0e c5 02 f0 26 c2 20 38 a5
>3a1e78	0c e9 01 00 85 0c e2 20 a5 0e e9 00 85 0e c2 20
>3a1e88	38 a5 08 e9 01 00 85 08 e2 20 a5 0a e9 00 85 0a
>3a1e98	80 c6 28 60 08 a0 00 00 c2 20 18 a5 08 77 08 85
>3a1ea8	0c e2 20 a5 0a 69 00 85 0e c2 20 18 a5 d7 69 04
>3a1eb8	00 85 00 e2 20 a5 d9 69 00 85 02 a0 00 00 c2 20
>3a1ec8	38 a5 d7 f7 08 85 d7 e2 20 a5 d9 e9 00 85 d9 20
>3a1ed8	20 1e 20 90 32 28 60 08 08 c2 20 48 a9 00 08 5b
>3a1ee8	68 28 c2 30 a0 02 00 97 d7 18 a5 d7 69 04 00 85
>3a1ef8	08 e2 20 a5 d9 69 00 85 0a e2 20 a0 00 00 b7 18
>3a1f08	97 08 f0 03 c8 80 f7 c2 20 98 18 69 05 00 85 0c
>3a1f18	c2 20 a0 00 00 a5 0c 97 d7 c2 20 18 a5 d7 65 0c
>3a1f28	85 0c e2 20 a5 d9 69 00 85 d9 c2 20 a5 0c 85 d7
>3a1f38	c2 20 a0 00 00 a9 00 00 97 d7 c8 c0 05 00 d0 f8
>3a1f48	20 90 32 28 60 0b 08 08 c2 20 48 a9 00 08 5b 68
>3a1f58	28 c2 30 a9 00 00 85 08 a9 36 00 85 0a a0 02 00
>3a1f68	b7 08 f0 1d c5 d5 f0 25 b0 1d a0 00 00 18 a5 08
>3a1f78	77 08 85 0c a5 0a 69 00 00 85 0a a5 0c 85 08 80
>3a1f88	dc a9 00 00 28 2b 60 a9 01 00 28 2b 60 a9 02 00
>3a1f98	28 2b 60 08 c2 30 a9 05 00 85 10 a0 00 00 e2 20
>3a1fa8	b7 18 f0 07 c2 20 e6 10 c8 80 f3 c2 20 a5 08 85
>3a1fb8	00 a5 0a 85 02 18 a5 d7 69 04 00 85 0c a5 d9 69
>3a1fc8	00 00 85 0e 18 a5 d7 65 10 85 d7 a5 d9 69 00 00
>3a1fd8	85 d9 18 a5 d7 69 04 00 85 08 a5 d9 69 00 00 85
>3a1fe8	0a 20 5f 1e c2 20 a5 10 a0 00 00 97 00 a5 d5 a0
>3a1ff8	02 00 97 00 18 a5 00 69 04 00 85 00 a5 02 69 00
>3a2008	00 85 02 a0 00 00 e2 20 b7 18 97 00 f0 03 c8 80
>3a2018	f7 20 90 32 28 60 08 c2 30 85 d5 20 4d 1f c9 00
>3a2028	00 f0 2c c9 01 00 f0 22 c2 20 a5 08 48 a5 0a 48
>3a2038	20 9c 1e 68 85 0a 68 85 08 a5 18 85 00 a5 1a 85
>3a2048	02 20 f9 1a e2 20 a7 00 f0 0a 20 9b 1f 80 05 a5
>3a2058	d5 20 df 1e 28 60 8b 08 08 e2 20 48 a9 3a 48 ab
>3a2068	68 28 a2 fb d1 20 a8 02 28 ab 60 08 e2 30 a9 01
>3a2078	20 1c 00 20 db 00 f0 06 c9 0d f0 02 80 f5 28 60
>3a2088	0b 08 08 c2 20 48 a9 00 08 5b 68 28 c2 30 64 d5
>3a2098	a9 00 4f 85 18 a9 00 00 85 1a 20 fe 05 c2 20 a5
>3a20a8	d5 d0 05 20 08 1d 80 07 20 1e 20 28 2b 38 60 28
>3a20b8	2b 18 60 c2 30 a2 ff fe 9a 20 5e 20 20 08 00 20
>3a20c8	0c 00 a9 00 00 20 1c 00 20 88 20 b0 ef 80 ea e2
>3a20d8	20 a5 25 c5 2b d0 06 c2 20 29 ff 00 60 c2 20 08
>3a20e8	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08
>3a20f8	00 c2 20 29 ff 00 20 4d 18 e2 20 dc d2 08 20 d7
>3a2108	20 c2 20 c9 00 00 f0 27 c9 02 00 d0 03 4c 4f 11
>3a2118	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1
>3a2128	08 00 c2 20 29 ff 00 20 4d 18 e2 20 dc d2 08 18
>3a2138	a5 21 65 27 85 21 a5 23 65 29 85 23 60 38 a5 21
>3a2148	e5 27 85 21 a5 23 e5 29 85 23 60 a5 21 8f 08 01
>3a2158	00 a5 27 8f 0a 01 00 af 0c 01 00 85 21 af 0e 01
>3a2168	00 85 23 60 a5 21 8f 12 01 00 a5 27 8f 10 01 00
>3a2178	af 14 01 00 85 21 60 a5 21 8f 12 01 00 a5 27 8f
>3a2188	10 01 00 af 16 01 00 85 21 60 c2 20 a5 21 25 27
>3a2198	85 21 a5 23 25 29 85 23 60 c2 20 a5 21 05 27 85
>3a21a8	21 a5 23 05 29 85 23 60 c2 20 a5 21 49 ff ff 85
>3a21b8	21 a5 23 49 ff ff 85 23 60 c2 20 a5 23 c5 29 90
>3a21c8	0b a5 21 c5 27 90 05 64 21 64 23 60 a9 ff ff 85
>3a21d8	21 85 23 60 c2 20 a5 29 c5 23 90 0b a5 27 c5 21
>3a21e8	90 05 64 21 64 23 60 a9 ff ff 85 21 85 23 60 c2
>3a21f8	20 a5 29 c5 23 d0 0e a5 27 c5 21 d0 08 a9 ff ff
>3a2208	85 21 85 23 60 64 21 64 23 60 c2 20 a5 29 c5 23
>3a2218	d0 0e a5 27 c5 21 d0 08 a9 ff ff 85 21 85 23 60
>3a2228	64 21 64 23 60 c2 20 a5 23 c5 29 90 10 d0 06 a5
>3a2238	21 c5 27 90 08 a9 ff ff 85 21 85 23 60 64 21 64
>3a2248	23 60 c2 20 a5 23 c5 29 90 0f f0 05 64 21 64 23
>3a2258	60 a5 21 c5 27 f0 02 b0 f3 a9 ff ff 85 21 85 23
>3a2268	60 08 e2 20 20 fb 16 20 e9 04 20 c7 03 a5 21 0a
>3a2278	0a 0a 0a 05 27 48 a9 2c 20 e5 1b 20 fb 16 20 e9
>3a2288	04 20 c7 03 a5 21 0a 0a 0a 0a 05 27 48 a9 2c 20
>3a2298	e5 1b 20 fb 16 20 e9 04 20 c7 03 a5 21 0a 0a 0a
>3a22a8	0a 05 27 48 af 0e 08 af 09 0c 8f 0e 08 af 68 8f
>3a22b8	00 08 af 68 8f 02 08 af 68 8f 04 08 af af 0e 08
>3a22c8	af 29 f7 8f 0e 08 af 20 1d 1b 28 60 08 e2 20 20
>3a22d8	fb 16 20 e9 04 20 c7 03 a5 21 0a 0a 0a 0a 05 27
>3a22e8	48 a9 2c 20 e5 1b 20 fb 16 20 e9 04 20 c7 03 a5
>3a22f8	21 0a 0a 0a 0a 05 27 48 a9 2c 20 e5 1b 20 fb 16
>3a2308	20 46 04 20 fd 03 c2 20 a5 21 85 90 a5 27 85 21
>3a2318	20 c7 03 e2 20 a5 21 0a 0a 0a 0a 05 27 48 c2 20
>3a2328	a5 90 85 21 20 c7 03 e2 20 a5 21 0a 0a 0a 0a 05
>3a2338	27 48 af 0e 08 af 09 0c 8f 0e 08 af 68 8f 0f 08
>3a2348	af 68 8f 0a 08 af 68 8f 09 08 af 68 8f 06 08 af
>3a2358	af 0e 08 af 29 f7 8f 0e 08 af 20 1d 1b 28 60 08
>3a2368	20 fb 16 20 e9 04 e2 20 a5 21 29 0f 0a 0a 0a 0a
>3a2378	8f 53 08 00 a9 2c 20 e5 1b 20 fb 16 20 e9 04 a5
>3a2388	21 29 0f 0f 53 08 00 8f 1e 00 00 28 60 08 e2 20
>3a2398	20 fb 16 20 e9 04 a5 21 48 a9 2c 20 e5 1b 20 fb
>3a23a8	16 20 e9 04 a5 21 48 a9 2c 20 e5 1b 20 fb 16 20
>3a23b8	e9 04 a5 21 8f 08 00 af 68 8f 09 00 af 68 8f 0a
>3a23c8	00 af 28 60 08 e2 20 20 fb 16 20 46 04 a5 21 f0
>3a23d8	1e a9 01 8f 04 00 af a9 20 8f 08 00 af 8f 09 00
>3a23e8	af a9 48 8f 0f 00 00 a9 34 8f 13 00 00 80 12 a9
>3a23f8	00 8f 04 00 af a9 50 8f 0f 00 00 a9 3c 8f 13 00
>3a2408	00 a9 2c 85 35 20 1a 1c 90 35 20 d8 1a 20 fb 16
>3a2418	20 e9 04 a5 21 48 a9 2c 20 e5 1b 20 fb 16 20 e9
>3a2428	04 a5 21 48 a9 2c 20 e5 1b 20 fb 16 20 e9 04 a5
>3a2438	21 8f 05 00 af 68 8f 06 00 af 68 8f 07 00 af 28
>3a2448	60 08 c2 20 20 fb 16 20 e9 04 a9 af 00 85 9e a5
>3a2458	21 c9 0a 00 b0 5c 0a aa bf d9 24 3a 85 9c a9 2c
>3a2468	00 20 e5 1b 20 fb 16 20 e9 04 a5 21 0a 0a 18 65
>3a2478	9c 85 9c a9 2c 00 20 e5 1b 20 fb 16 20 e9 04 a0
>3a2488	02 00 a5 21 e2 20 97 9c a9 2c 20 e5 1b 20 fb 16
>3a2498	20 e9 04 a0 01 00 a5 21 e2 20 97 9c a9 2c 20 e5
>3a24a8	1b 20 fb 16 20 e9 04 a0 00 00 a5 21 e2 20 97 9c
>3a24b8	28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a
>3a24c8	8f d1 08 00 c2 20 29 ff 00 20 4d 18 e2 20 dc d2
>3a24d8	08 00 20 00 24 00 28 00 2c 00 30 00 34 00 38 00
>3a24e8	3c 40 1f 80 1f 08 20 fb 16 20 e9 04 a5 21 8f 00
>3a24f8	00 af c2 20 a9 80 02 8f 08 f0 3a a9 e0 01 8f 0a
>3a2508	f0 3a af 08 f0 3a 8f 08 01 00 af 0a f0 3a 8f 0a
>3a2518	01 00 af 0c 01 00 8f 0c f0 3a e2 20 af 0e 01 00
>3a2528	8f 0e f0 3a 28 60 08 c2 20 20 fb 16 20 e9 04 c2
>3a2538	20 a5 21 85 53 a9 2c 00 20 e5 1b 20 fb 16 20 e9
>3a2548	04 e2 20 a5 53 d0 05 a5 21 0a 80 04 a5 21 38 2a
>3a2558	8f 40 01 af c2 20 a9 2c 00 85 35 20 1a 1c b0 18
>3a2568	c2 20 08 c2 20 a9 00 00 85 21 a9 b0 00 85 23 e2
>3a2578	20 a9 00 85 25 28 80 08 c2 20 20 d8 1a 20 fb 16
>3a2588	e2 20 38 a5 23 8f 02 f0 3a e9 b0 30 42 8f 43 01
>3a2598	af 8f 06 f0 3a a5 21 8f 00 f0 3a 8f 41 01 af 8f
>3a25a8	04 f0 3a a5 22 8f 42 01 af 8f 05 f0 3a 8f 01 f0
>3a25b8	3a a9 00 8f 07 f0 3a 8f 03 f0 3a c2 20 af 08 f0
>3a25c8	3a 8f 44 01 af af 0a f0 3a 8f 46 01 af 28 60 08
>3a25d8	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d1 08
>3a25e8	00 c2 20 29 ff 00 20 4d 18 e2 20 dc d2 08 08 c2
>3a25f8	20 af 04 f0 3a 8f 05 04 af af 0c f0 3a 8f 08 04
>3a2608	af e2 20 af 06 f0 3a 8f 07 04 af af 0e f0 3a 8f
>3a2618	0a 04 af a9 00 8f 01 04 af a9 85 8f 00 04 af af
>3a2628	01 04 af 30 fa a9 00 8f 00 04 af 28 60 08 c2 20
>3a2638	a5 5b 8f 08 01 00 af 08 f0 3a 8f 0a 01 00 18 af
>3a2648	0c 01 00 65 57 85 0c af 0e 01 00 69 00 00 85 0e
>3a2658	18 a5 0c 6f 00 f0 3a 85 9c a5 0e 6f 02 f0 3a 85
>3a2668	9e e2 20 a5 53 87 9c 28 60 c2 20 a9 01 00 85 db
>3a2678	38 a5 5f e5 57 85 67 10 0b 49 ff ff 1a 85 67 a9
>3a2688	ff ff 85 db a9 01 00 85 dd 38 a5 63 e5 5b 85 6b
>3a2698	10 0b 49 ff ff 1a 85 6b a9 ff ff 85 dd a5 6b c5
>3a26a8	67 b0 04 a5 67 80 06 a5 6b 49 ff ff 1a 48 0a 68
>3a26b8	6a 85 6f 20 35 26 a5 57 c5 5f d0 06 a5 5b c5 63
>3a26c8	f0 36 a5 6f 85 73 a5 67 49 ff ff 1a c5 73 10 10
>3a26d8	f0 0e 38 a5 6f e5 6b 85 6f 18 a5 57 65 db 85 57
>3a26e8	a5 73 c5 6b 10 cd f0 cb 18 a5 6f 65 67 85 6f 18
>3a26f8	a5 5b 65 dd 85 5b 80 bb 60 08 a9 00 00 8f 00 04
>3a2708	af c2 20 a5 5b 8f 08 01 00 af 08 f0 3a 8f 0a 01
>3a2718	00 18 af 0c 01 00 65 57 85 0c e2 20 af 0e 01 00
>3a2728	69 00 85 0e c2 20 18 af 04 f0 3a 65 0c 8f 05 04
>3a2738	af e2 20 af 06 f0 3a 65 0e 8f 07 04 af c2 20 38
>3a2748	a5 5f e5 57 85 0c 8f 08 04 af 38 af 08 f0 3a 8f
>3a2758	0e 04 af 38 a5 63 e5 5b 8f 0a 04 af a9 01 00 8f
>3a2768	0c 04 af e2 20 af 53 08 00 8f 01 04 af a9 87 8f
>3a2778	00 04 af af 01 04 af 30 fa a9 00 8f 00 04 af 28
>3a2788	60 08 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48
>3a2798	a9 00 48 ab 68 28 c2 30 20 fb 16 20 46 04 a5 21
>3a27a8	85 53 a9 2c 00 20 e5 1b 20 fb 16 20 46 04 a5 21
>3a27b8	85 57 a9 2c 00 20 e5 1b 20 fb 16 20 e9 04 a5 21
>3a27c8	85 5b 20 35 26 28 60 08 08 c2 20 48 a9 00 08 5b
>3a27d8	68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 30 20 fb
>3a27e8	16 20 46 04 a5 21 85 57 a9 2c 00 20 e5 1b 20 fb
>3a27f8	16 20 46 04 a5 21 85 5b a9 2c 00 20 e5 1b 20 fb
>3a2808	16 20 46 04 a5 21 85 5f a9 2c 00 20 e5 1b 20 fb
>3a2818	16 20 46 04 a5 21 85 63 a9 2c 00 20 e5 1b 20 fb
>3a2828	16 20 e9 04 a5 21 85 53 20 71 26 28 60 08 08 c2
>3a2838	20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab
>3a2848	68 28 c2 30 20 fb 16 20 46 04 a5 21 85 57 a9 2c
>3a2858	00 20 e5 1b 20 fb 16 20 46 04 a5 21 85 5b a9 2c
>3a2868	00 20 e5 1b 20 fb 16 20 46 04 a5 21 85 5f a9 2c
>3a2878	00 20 e5 1b 20 fb 16 20 46 04 a5 21 85 63 a9 2c
>3a2888	00 20 e5 1b 20 fb 16 20 e9 04 a5 21 85 53 20 01
>3a2898	27 28 60 08 e2 20 a5 21 c9 12 b0 18 0a 0a 0a 18
>3a28a8	69 00 85 9c a9 02 69 00 85 9d a9 af 69 00 85 9e
>3a28b8	64 9f 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a28c8	a9 09 8f d1 08 00 c2 20 29 ff 00 20 4d 18 e2 20
>3a28d8	dc d2 08 08 e2 20 20 fb 16 20 e9 04 20 9b 28 a5
>3a28e8	21 8f 0e f0 3a a9 2c 20 e5 1b 20 fb 16 20 e9 04
>3a28f8	a5 21 c9 08 b0 4b 48 a9 2c 20 e5 1b 20 fb 16 20
>3a2908	46 04 c2 20 38 a5 21 e9 00 00 85 21 a5 23 e9 b0
>3a2918	00 85 23 30 2c c2 20 a5 21 a0 01 00 97 9c e2 20
>3a2928	a5 23 c8 c8 97 9c af 0e f0 3a aa bf 10 f0 3a 29
>3a2938	f1 85 0c 68 0a 29 0e 05 0c 87 9c 9f 10 f0 3a 28
>3a2948	60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>3a2958	d1 08 00 c2 20 29 ff 00 20 4d 18 e2 20 dc d2 08
>3a2968	08 c2 20 20 fb 16 20 e9 04 20 9b 28 a9 2c 00 20
>3a2978	e5 1b 20 fb 16 20 46 04 a5 21 a0 04 00 97 9c a9
>3a2988	2c 00 20 e5 1b 20 fb 16 20 46 04 a5 21 a0 06 00
>3a2998	97 9c 28 60 08 c2 20 20 fb 16 20 e9 04 20 9b 28
>3a29a8	a5 21 8f 0e f0 3a a9 2c 00 20 e5 1b 20 fb 16 20
>3a29b8	46 04 a5 21 48 a9 2c 00 85 35 20 1a 1c b0 1c af
>3a29c8	0e f0 3a aa bf 10 f0 3a 29 fe 00 85 0c 68 29 01
>3a29d8	00 05 0c 9f 10 f0 3a 87 9c 80 31 e2 20 20 d8 1a
>3a29e8	20 fb 16 20 e9 04 a5 21 c9 08 b0 22 0a 0a 0a 0a
>3a29f8	85 0c 68 29 01 05 0c 85 0c af 0e f0 3a aa bf 10
>3a2a08	f0 3a 29 8e 05 0c 87 9c 9f 10 f0 3a 28 60 08 c2
>3a2a18	20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08 00
>3a2a28	c2 20 29 ff 00 20 4d 18 e2 20 dc d2 08 08 20 f9
>3a2a38	1a e2 20 a7 00 d0 03 4c dd 2a c9 3a d0 03 4c dd
>3a2a48	2a c9 22 d0 0b 20 19 16 20 c4 33 a9 3b 20 e5 1b
>3a2a58	20 fb 02 90 41 20 cf 3f 90 3c a9 3f 20 18 00 a9
>3a2a68	20 20 18 00 20 10 00 e2 20 a5 e8 c9 02 f0 46 c9
>3a2a78	00 f0 65 c9 01 f0 60 08 c2 20 48 a9 00 08 5b 68
>3a2a88	28 e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00 20 4d
>3a2a98	18 e2 20 dc d2 08 08 c2 20 48 a9 00 08 5b 68 28
>3a2aa8	e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00 20 4d 18
>3a2ab8	e2 20 dc d2 08 c2 20 a9 00 4c 85 21 a9 00 00 85
>3a2ac8	23 e2 20 a9 02 85 25 20 f1 11 c2 20 20 6c 3f a9
>3a2ad8	0d 00 20 18 00 28 60 ea c2 20 a5 00 85 3e a5 02
>3a2ae8	85 40 a9 00 4c 85 00 a9 00 00 85 02 20 3e 05 c2
>3a2af8	20 a5 3e 85 00 a5 40 85 02 80 cf 08 20 f9 1a e2
>3a2b08	20 a7 00 f0 49 c9 3a f0 45 20 fb 02 90 42 20 cf
>3a2b18	3f 90 3d 20 14 00 e2 20 8f 00 4e 00 a9 00 8f 01
>3a2b28	4e 00 c2 20 a9 00 4e 85 21 a9 00 00 85 23 e2 20
>3a2b38	a9 02 85 25 20 f1 11 20 6c 3f 20 f9 1a a7 00 f0
>3a2b48	0d c9 3a f0 09 c9 2c d0 07 20 d8 1a 80 ae 28 60
>3a2b58	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1
>3a2b68	08 00 c2 20 29 ff 00 20 4d 18 e2 20 dc d2 08 08
>3a2b78	20 fb 16 20 46 04 e2 20 a9 5c 85 a0 c2 20 a5 21
>3a2b88	85 a1 e2 20 a5 23 85 a3 e2 20 a9 2c 85 35 20 1a
>3a2b98	1c 90 41 20 d8 1a 20 fb 16 20 9a 04 c2 20 a5 21
>3a2ba8	85 53 e2 20 a9 2c 85 35 20 1a 1c 90 27 20 d8 1a
>3a2bb8	20 fb 16 20 9a 04 c2 20 a5 21 85 57 e2 20 a9 2c
>3a2bc8	85 35 20 1a 1c 90 0d 20 d8 1a 20 fb 16 20 9a 04
>3a2bd8	c2 20 a4 21 a6 57 a5 53 0b 8b 08 22 a0 08 00 28
>3a2be8	ab 2b 20 1d 1b 28 60 08 c2 20 48 a9 00 08 5b 68
>3a2bf8	28 e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00 20 4d
>3a2c08	18 e2 20 dc d2 08 08 e2 20 20 f9 1a 20 cf 3f 90
>3a2c18	64 a9 8c 20 e5 1b a9 01 20 68 14 a2 01 00 a9 00
>3a2c28	8f 00 4d 00 20 fb 16 20 9a 04 c2 20 a5 21 9f 00
>3a2c38	4d 00 e2 20 af 00 4d 00 1a 8f 00 4d 00 30 55 e8
>3a2c48	e8 20 f9 1a a7 00 c9 2c f0 25 c9 8d d0 27 20 d8
>3a2c58	1a 20 7d 40 c2 20 a5 be 85 21 e2 20 a5 c0 85 23
>3a2c68	64 24 a5 e8 09 80 85 e8 85 25 20 6c 3f 28 60 20
>3a2c78	d8 1a 4c 2c 2c 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a2c88	20 a9 02 8f d1 08 00 c2 20 29 ff 00 20 4d 18 e2
>3a2c98	20 dc d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a2ca8	a9 0a 8f d1 08 00 c2 20 29 ff 00 20 4d 18 e2 20
>3a2cb8	dc d2 08 08 20 f9 1a e2 20 a7 00 f0 28 c9 3a f0
>3a2cc8	24 20 fb 02 90 21 20 cf 3f 90 1c 20 0e 2d 20 6c
>3a2cd8	3f 20 f9 1a a7 00 f0 0d c9 3a f0 09 c9 2c d0 07
>3a2ce8	20 d8 1a 80 cf 28 60 08 c2 20 48 a9 00 08 5b 68
>3a2cf8	28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00 20 4d
>3a2d08	18 e2 20 dc d2 08 08 a5 02 85 40 a5 00 85 3e a5
>3a2d18	1a 85 44 a5 18 85 42 c2 20 a5 38 d0 04 a5 36 f0
>3a2d28	4e a5 36 85 00 a5 38 85 02 a5 3a 85 18 a5 3c 85
>3a2d38	1a e2 20 a7 00 f0 53 c9 3a f0 4f c9 2c d0 03 20
>3a2d48	d8 1a 20 f9 1a a7 00 c9 22 f0 4e 20 14 03 b0 4e
>3a2d58	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1
>3a2d68	08 00 c2 20 29 ff 00 20 4d 18 e2 20 dc d2 08 c2
>3a2d78	20 a9 00 00 85 18 a9 36 00 85 1a 18 a5 18 69 04
>3a2d88	00 85 00 a5 1a 69 00 00 85 02 e2 20 a9 80 85 33
>3a2d98	a9 a8 85 35 20 2f 1b 80 a9 20 19 16 80 03 20 4e
>3a2da8	15 c2 20 a5 00 85 36 a5 02 85 38 a5 18 85 3a a5
>3a2db8	1a 85 3c a5 42 85 18 a5 44 85 1a a5 3e 85 00 a5
>3a2dc8	40 85 02 28 60 20 1d 1b 60 64 36 64 38 64 3a 64
>3a2dd8	3c 60 20 24 00 60 20 fb 16 c2 20 a5 23 48 a5 21
>3a2de8	48 e2 20 a7 00 c9 2c d0 22 20 d8 1a 20 fb 16 c2
>3a2df8	20 a5 24 d0 35 68 85 08 68 85 0a c2 20 a5 21 87
>3a2e08	08 e2 20 a0 02 00 a5 23 97 08 60 08 c2 20 48 a9
>3a2e18	00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29
>3a2e28	ff 00 20 4d 18 e2 20 dc d2 08 08 c2 20 48 a9 00
>3a2e38	08 5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff
>3a2e48	00 20 4d 18 e2 20 dc d2 08 20 fb 16 c2 20 a5 23
>3a2e58	48 a5 21 48 e2 20 a7 00 c9 2c d0 19 20 d8 1a 20
>3a2e68	fb 16 c2 20 a5 23 d0 2c 68 85 08 68 85 0a c2 20
>3a2e78	a5 21 87 08 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a2e88	20 a9 02 8f d1 08 00 c2 20 29 ff 00 20 4d 18 e2
>3a2e98	20 dc d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a2ea8	a9 09 8f d1 08 00 c2 20 29 ff 00 20 4d 18 e2 20
>3a2eb8	dc d2 08 20 fb 16 c2 20 a5 23 48 a5 21 48 e2 20
>3a2ec8	a7 00 c9 2c d0 1f 20 d8 1a 20 fb 16 e2 20 a5 22
>3a2ed8	d0 32 c2 20 a5 23 d0 2c 68 85 08 68 85 0a e2 20
>3a2ee8	a5 21 87 08 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a2ef8	20 a9 02 8f d1 08 00 c2 20 29 ff 00 20 4d 18 e2
>3a2f08	20 dc d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a2f18	a9 09 8f d1 08 00 c2 20 29 ff 00 20 4d 18 e2 20
>3a2f28	dc d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a2f38	01 8f d1 08 00 c2 20 29 ff 00 20 4d 18 e2 20 dc
>3a2f48	d2 08 08 e2 20 a7 00 f0 05 20 d8 1a 80 f7 28 60
>3a2f58	08 28 60 08 28 60 08 28 60 08 c2 20 a5 1a 20 14
>3a2f68	18 a5 18 20 14 18 a5 02 48 a5 00 48 20 1d 1b a5
>3a2f78	02 20 14 18 a5 00 20 14 18 68 85 00 68 85 02 20
>3a2f88	f9 1a 20 cf 3f b0 1f 08 c2 20 48 a9 00 08 5b 68
>3a2f98	28 e2 20 a9 05 8f d1 08 00 c2 20 29 ff 00 20 4d
>3a2fa8	18 e2 20 dc d2 08 e2 20 a5 e8 20 2b 18 a5 e7 20
>3a2fb8	2b 18 c2 20 a5 e5 20 14 18 20 f9 1a e2 20 a7 00
>3a2fc8	c9 87 d0 6a a5 e8 c9 00 f0 04 c9 01 f0 00 20 d8
>3a2fd8	1a 20 fb 16 20 6c 3f e2 20 a9 99 20 e5 1b 20 fb
>3a2fe8	16 c2 20 a5 25 20 14 18 a5 23 20 14 18 a5 21 20
>3a2ff8	14 18 e2 20 a9 9a 85 35 20 1a 1c 90 1b 20 d8 1a
>3a3008	20 fb 16 e2 20 a5 25 20 14 18 c2 20 a5 23 20 14
>3a3018	18 a5 21 20 14 18 80 14 c2 20 a9 00 00 20 14 18
>3a3028	a9 00 00 20 14 18 a9 01 00 20 14 18 28 60 08 c2
>3a3038	20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00
>3a3048	c2 20 29 ff 00 20 4d 18 e2 20 dc d2 08 08 8b 08
>3a3058	e2 20 48 a9 00 48 ab 68 28 08 c2 20 48 a9 00 08
>3a3068	5b 68 28 c2 30 a4 31 c8 c8 c2 20 b9 0c 00 85 e5
>3a3078	b9 0e 00 e2 20 85 e7 b9 10 00 85 e8 c2 20 5a 20
>3a3088	25 3e 7a c2 20 b9 00 00 85 27 b9 02 00 85 29 e2
>3a3098	20 b9 04 00 85 2b c2 20 5a 20 06 21 20 6c 3f 7a
>3a30a8	c2 20 b9 06 00 85 27 b9 08 00 85 29 e2 20 b9 0a
>3a30b8	00 85 2b c2 20 b9 02 00 30 0a 20 4a 22 20 33 04
>3a30c8	f0 28 80 08 20 2d 22 20 33 04 f0 1e c2 20 b9 12
>3a30d8	00 85 00 b9 14 00 85 02 b9 16 00 85 18 b9 18 00
>3a30e8	85 1a e2 20 a9 03 85 da 80 17 a2 21 08 20 29 14
>3a30f8	c2 20 18 a5 31 69 1a 00 85 31 a5 33 69 00 00 85
>3a3108	33 ab 28 60 08 a5 18 48 a5 1a 48 20 f9 1a 20 3e
>3a3118	05 a5 21 f0 26 20 d4 1d 90 42 e2 20 a9 02 85 da
>3a3128	20 1d 1b c2 20 68 20 14 18 68 20 14 18 a5 02 20
>3a3138	14 18 a5 00 20 14 18 e6 2f 28 60 68 68 08 c2 20
>3a3148	48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2
>3a3158	20 29 ff 00 20 4d 18 e2 20 dc d2 08 68 68 08 c2
>3a3168	20 48 a9 00 08 5b 68 28 e2 20 a9 06 8f d1 08 00
>3a3178	c2 20 29 ff 00 20 4d 18 e2 20 dc d2 08 08 c2 30
>3a3188	a5 2f f0 1e 20 36 18 85 00 20 36 18 85 02 20 36
>3a3198	18 85 18 20 36 18 85 1a c6 2f e2 20 a9 03 85 da
>3a31a8	28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 07
>3a31b8	8f d1 08 00 c2 20 29 ff 00 20 4d 18 e2 20 dc d2
>3a31c8	08 08 20 fb 16 20 33 04 f0 1c e2 20 a9 94 20 e5
>3a31d8	1b 20 3e 05 20 33 04 f0 12 20 d4 1d 90 2c e2 20
>3a31e8	a9 02 85 da 80 03 20 1d 1b 28 60 08 c2 20 48 a9
>3a31f8	00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29
>3a3208	ff 00 20 4d 18 e2 20 dc d2 08 08 c2 20 48 a9 00
>3a3218	08 5b 68 28 e2 20 a9 06 8f d1 08 00 c2 20 29 ff
>3a3228	00 20 4d 18 e2 20 dc d2 08 08 e2 20 a9 01 85 da
>3a3238	28 60 08 20 f9 1a 20 3e 05 a5 21 f0 0d 20 d4 1d
>3a3248	90 27 e2 20 a9 02 85 da 28 60 08 c2 20 48 a9 00
>3a3258	08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff
>3a3268	00 20 4d 18 e2 20 dc d2 08 08 c2 20 48 a9 00 08
>3a3278	5b 68 28 e2 20 a9 06 8f d1 08 00 c2 20 29 ff 00
>3a3288	20 4d 18 e2 20 dc d2 08 20 cb 13 20 19 0c 20 24
>3a3298	3d 60 08 a7 00 10 03 20 d8 1a 20 cf 3f b0 03 4c
>3a32a8	11 33 e2 20 20 39 1c c9 8c d0 0e a9 8c 20 e5 1b
>3a32b8	a9 00 8f 00 4d 00 20 51 15 20 f9 1a e2 20 a7 00
>3a32c8	c9 87 f0 03 4c 11 33 20 d8 1a a5 e8 48 a5 e7 48
>3a32d8	a5 e6 48 a5 e5 48 20 fb 16 68 85 e5 68 85 e6 68
>3a32e8	85 e7 68 85 e8 29 80 f0 1b 20 97 3d 90 3a c2 20
>3a32f8	a0 09 00 b7 08 85 be e2 20 c8 c8 b7 08 85 c0 20
>3a3308	5e 42 80 03 20 6c 3f 28 60 08 c2 20 48 a9 00 08
>3a3318	5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00
>3a3328	20 4d 18 e2 20 dc d2 08 08 c2 20 48 a9 00 08 5b
>3a3338	68 28 e2 20 a9 05 8f d1 08 00 c2 20 29 ff 00 20
>3a3348	4d 18 e2 20 dc d2 08 08 e2 20 20 39 1c c9 00 f0
>3a3358	66 20 fb 16 e2 20 a5 25 c9 ff f0 14 c9 02 d0 05
>3a3368	20 c4 33 80 0b c9 00 d0 05 20 e4 33 80 02 80 4a
>3a3378	20 f9 1a a7 00 f0 40 c9 3a f0 3c c9 2c f0 23 c9
>3a3388	3b f0 24 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a3398	02 8f d1 08 00 c2 20 29 ff 00 20 4d 18 e2 20 dc
>3a33a8	d2 08 a9 09 20 18 00 20 d8 1a 20 f9 1a a7 00 f0
>3a33b8	09 c9 3a f0 05 80 9a 20 1b 02 28 60 08 8b 08 c2
>3a33c8	20 48 a9 00 08 5b 68 28 e2 20 c2 10 a0 00 00 b7
>3a33d8	21 f0 06 20 18 00 c8 80 f6 ab 28 60 08 c2 20 20
>3a33e8	b7 10 a5 14 85 21 a5 16 85 23 20 c4 33 28 60 08
>3a33f8	e2 20 85 b3 4a 4a 4a 4a 29 0f 18 69 30 97 14 c8
>3a3408	a5 b3 29 0f 18 69 30 97 14 c8 28 60 e2 20 a9 8c
>3a3418	20 e5 1b 08 20 fb 16 e2 20 c2 10 af 0e 08 af 09
>3a3428	08 8f 0e 08 af 20 66 10 a0 00 00 af 06 08 af 20
>3a3438	f7 33 a9 2f 97 14 c8 af 09 08 af 20 f7 33 a9 2f
>3a3448	97 14 c8 af 0f 08 af 20 f7 33 af 0a 08 af 20 f7
>3a3458	33 a9 00 97 14 af 0e 08 af 29 f7 8f 0e 08 af c2
>3a3468	20 a5 14 85 21 a5 16 85 23 e2 20 a9 02 85 25 20
>3a3478	f1 11 28 e2 20 20 d8 1a 60 e2 20 a9 8c 20 e5 1b
>3a3488	08 20 fb 16 e2 20 c2 10 af 0e 08 af 09 08 8f 0e
>3a3498	08 af 20 66 10 a0 00 00 af 04 08 af 29 7f 20 f7
>3a34a8	33 a9 3a 97 14 c8 af 02 08 af 20 f7 33 a9 3a 97
>3a34b8	14 c8 af 00 08 af 20 f7 33 a9 00 97 14 af 0e 08
>3a34c8	af 29 f7 8f 0e 08 af c2 20 a5 14 85 21 a5 16 85
>3a34d8	23 e2 20 a9 02 85 25 20 f1 11 28 e2 20 20 d8 1a
>3a34e8	60 08 c2 20 20 fb 16 20 46 04 c2 20 a5 21 49 ff
>3a34f8	ff 85 21 a5 23 49 ff ff 85 23 e6 21 d0 03 e6 23
>3a3508	00 28 60 e2 20 a9 8c 20 e5 1b 08 c2 30 20 fb 16
>3a3518	20 70 04 c2 20 a5 23 48 a5 21 48 20 f9 1a e2 20
>3a3528	a7 00 c9 2c f0 03 4c 82 35 20 d8 1a 20 fb 16 20
>3a3538	9a 04 c2 20 a5 21 48 20 f9 1a e2 20 a7 00 c9 2c
>3a3548	f0 03 4c 82 35 20 d8 1a 20 fb 16 20 9a 04 c2 20
>3a3558	a5 21 85 8d e2 20 a5 23 85 8f c2 20 68 85 27 a9
>3a3568	00 00 85 29 68 85 21 68 85 23 e2 20 a9 02 85 25
>3a3578	20 49 12 e2 20 20 d8 1a 28 60 08 c2 20 48 a9 00
>3a3588	08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff
>3a3598	00 20 4d 18 e2 20 dc d2 08 08 c2 20 48 a9 00 08
>3a35a8	5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff 00
>3a35b8	20 4d 18 e2 20 dc d2 08 e2 20 a9 8c 20 e5 1b 08
>3a35c8	c2 30 20 fb 16 e2 20 a5 25 c9 02 f0 03 4c 44 36
>3a35d8	c2 20 a5 23 48 a5 21 48 20 f9 1a e2 20 a7 00 c9
>3a35e8	2c f0 03 4c 63 36 20 d8 1a 20 fb 16 e2 20 a5 25
>3a35f8	c9 00 d0 48 c2 20 a5 21 85 8d c2 20 68 85 21 68
>3a3608	85 23 e2 20 a9 02 85 25 e2 20 a0 00 00 b7 21 f0
>3a3618	03 c8 80 f9 c2 20 98 38 e5 8d 30 09 85 27 a9 00
>3a3628	00 85 29 80 07 a9 00 00 85 27 85 29 e2 20 a9 00
>3a3638	85 2b 20 49 12 e2 20 20 d8 1a 28 60 08 c2 20 48
>3a3648	a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20
>3a3658	29 ff 00 20 4d 18 e2 20 dc d2 08 08 c2 20 48 a9
>3a3668	00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29
>3a3678	ff 00 20 4d 18 e2 20 dc d2 08 08 c2 20 48 a9 00
>3a3688	08 5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff
>3a3698	00 20 4d 18 e2 20 dc d2 08 e2 20 a9 8c 20 e5 1b
>3a36a8	08 c2 30 20 fb 16 e2 20 a5 25 c9 02 f0 03 4c 0d
>3a36b8	37 c2 20 a5 23 48 a5 21 48 20 f9 1a e2 20 a7 00
>3a36c8	c9 2c f0 03 4c 2c 37 20 d8 1a 20 fb 16 e2 20 a5
>3a36d8	25 c9 00 d0 30 c2 20 a5 21 85 8d c2 20 a9 00 00
>3a36e8	85 27 a9 00 00 85 29 e2 20 a9 00 85 2b c2 20 68
>3a36f8	85 21 68 85 23 e2 20 a9 02 85 25 20 49 12 e2 20
>3a3708	20 d8 1a 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a3718	20 a9 04 8f d1 08 00 c2 20 29 ff 00 20 4d 18 e2
>3a3728	20 dc d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a3738	a9 02 8f d1 08 00 c2 20 29 ff 00 20 4d 18 e2 20
>3a3748	dc d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a3758	09 8f d1 08 00 c2 20 29 ff 00 20 4d 18 e2 20 dc
>3a3768	d2 08 e2 20 a9 8c 20 e5 1b 20 fb 16 c2 10 e2 20
>3a3778	a5 25 c9 02 d0 23 c2 20 a5 00 85 3e a5 02 85 40
>3a3788	a5 21 85 00 a5 23 85 02 20 3e 05 a5 3e 85 00 a5
>3a3798	40 85 02 e2 20 20 d8 1a 60 08 c2 20 48 a9 00 08
>3a37a8	5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00
>3a37b8	20 4d 18 e2 20 dc d2 08 e2 20 a9 8c 20 e5 1b 08
>3a37c8	20 fb 16 c2 10 e2 20 a5 25 c9 00 d0 1d 20 b7 10
>3a37d8	c2 20 a5 14 85 21 a5 16 85 23 e2 20 a9 02 85 25
>3a37e8	20 f1 11 28 e2 20 20 d8 1a 60 08 c2 20 48 a9 00
>3a37f8	08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20 29 ff
>3a3808	00 20 4d 18 e2 20 dc d2 08 e2 20 a9 8c 20 e5 1b
>3a3818	08 20 fb 16 20 70 04 c2 20 64 0c 64 0e e2 30 a0
>3a3828	00 b7 21 c9 20 f0 04 c9 24 d0 03 c8 80 f3 b7 21
>3a3838	20 25 03 90 1e c2 20 06 0c 26 0e 06 0c 26 0e 06
>3a3848	0c 26 0e 06 0c 26 0e e2 20 20 46 03 05 0c 85 0c
>3a3858	c8 80 db c2 20 a5 0c 85 21 a5 0e 85 23 e2 20 a9
>3a3868	00 85 25 28 e2 20 20 d8 1a 60 e2 20 a9 8c 20 e5
>3a3878	1b 08 20 fb 16 20 46 04 20 66 10 e2 30 a0 ff a9
>3a3888	00 97 14 88 a5 21 29 0f aa bf 00 d0 3a 97 14 88
>3a3898	a5 21 29 f0 4a 4a 4a 4a aa bf 00 d0 3a 97 14 88
>3a38a8	a5 22 85 21 a5 23 85 22 a5 24 85 23 a9 00 85 24
>3a38b8	a5 21 d0 d0 a5 22 d0 cc a5 23 d0 c8 98 38 65 14
>3a38c8	85 21 a5 15 85 22 a5 16 85 23 a5 17 85 24 a9 02
>3a38d8	85 25 20 f1 11 28 e2 20 20 d8 1a 60 08 c2 20 48
>3a38e8	a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20
>3a38f8	29 ff 00 20 4d 18 e2 20 dc d2 08 e2 20 a9 8c 20
>3a3908	e5 1b 20 fb 16 e2 20 a5 25 c9 02 d0 1f 8b a5 23
>3a3918	48 ab c2 10 a6 21 20 3c 11 ab 84 21 c2 20 64 23
>3a3928	e2 20 a9 00 85 25 e2 20 20 d8 1a 60 08 c2 20 48
>3a3938	a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20
>3a3948	29 ff 00 20 4d 18 e2 20 dc d2 08 e2 20 a9 8c 20
>3a3958	e5 1b 20 fb 16 e2 20 a5 25 c9 00 d0 12 e2 20 a7
>3a3968	21 85 21 64 22 64 23 64 2e e2 20 20 d8 1a 60 08
>3a3978	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08
>3a3988	00 c2 20 29 ff 00 20 4d 18 e2 20 dc d2 08 e2 20
>3a3998	a9 8c 20 e5 1b 20 fb 16 e2 20 a5 25 c9 00 d0 1d
>3a39a8	c2 20 a7 21 85 0c e2 20 a0 02 00 b7 21 85 23 64
>3a39b8	24 c2 20 a5 0c 85 21 e2 20 20 d8 1a 60 08 c2 20
>3a39c8	48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2
>3a39d8	20 29 ff 00 20 4d 18 e2 20 dc d2 08 e2 20 a9 8c
>3a39e8	20 e5 1b 20 fb 16 e2 20 a5 25 c9 00 d0 0e c2 20
>3a39f8	a7 21 85 21 64 23 e2 20 20 d8 1a 60 08 c2 20 48
>3a3a08	a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20
>3a3a18	29 ff 00 20 4d 18 e2 20 dc d2 08 e2 20 a9 8c 20
>3a3a28	e5 1b 20 fb 16 e2 20 a5 25 c9 00 d0 24 20 66 10
>3a3a38	a5 21 87 14 a9 00 a0 01 00 97 14 c2 20 a5 14 85
>3a3a48	21 a5 16 85 23 e2 20 a9 02 85 25 e2 20 20 d8 1a
>3a3a58	60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f
>3a3a68	d1 08 00 c2 20 29 ff 00 20 4d 18 e2 20 dc d2 08
>3a3a78	e2 20 a9 8c 20 e5 1b 20 fb 16 e2 20 a5 25 c9 02
>3a3a88	d0 14 a7 21 85 21 64 22 64 23 64 24 a9 00 85 25
>3a3a98	e2 20 20 d8 1a 60 08 c2 20 48 a9 00 08 5b 68 28
>3a3aa8	e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00 20 4d 18
>3a3ab8	e2 20 dc d2 08 e2 20 a9 8c 20 e5 1b 20 fb 16 e2
>3a3ac8	20 a5 25 c9 00 d0 39 e2 20 a5 24 d0 52 a5 23 d0
>3a3ad8	4e a5 22 d0 4a c2 10 20 66 10 a4 21 e2 20 a9 00
>3a3ae8	97 14 88 30 07 a9 20 97 14 88 10 fb a9 02 85 25
>3a3af8	c2 20 a5 14 85 21 a5 16 85 23 e2 20 20 d8 1a 60
>3a3b08	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1
>3a3b18	08 00 c2 20 29 ff 00 20 4d 18 e2 20 dc d2 08 08
>3a3b28	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08
>3a3b38	00 c2 20 29 ff 00 20 4d 18 e2 20 dc d2 08 e2 20
>3a3b48	a9 8c 20 e5 1b 20 fb 16 e2 20 a5 25 c9 00 d0 39
>3a3b58	e2 20 a5 24 d0 52 a5 23 d0 4e a5 22 d0 4a c2 10
>3a3b68	20 66 10 a4 21 e2 20 a9 00 97 14 88 30 07 a9 09
>3a3b78	97 14 88 10 fb a9 02 85 25 c2 20 a5 14 85 21 a5
>3a3b88	16 85 23 e2 20 20 d8 1a 60 08 c2 20 48 a9 00 08
>3a3b98	5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00
>3a3ba8	20 4d 18 e2 20 dc d2 08 08 c2 20 48 a9 00 08 5b
>3a3bb8	68 28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff 00 20
>3a3bc8	4d 18 e2 20 dc d2 08 e2 20 a9 8c 20 e5 1b 20 fb
>3a3bd8	16 20 46 04 c2 20 a5 23 10 17 49 ff ff 85 23 a5
>3a3be8	21 49 ff ff 18 69 01 00 85 21 a5 23 69 00 00 85
>3a3bf8	23 e2 20 20 d8 1a 60 e2 20 a9 8c 20 e5 1b 20 fb
>3a3c08	16 e2 20 a5 25 c9 00 d0 25 c2 20 a5 23 30 12 d0
>3a3c18	04 a5 21 f0 13 a9 00 00 85 23 a9 01 00 85 21 80
>3a3c28	07 a9 ff ff 85 23 85 21 e2 20 20 d8 1a 60 08 c2
>3a3c38	20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00
>3a3c48	c2 20 29 ff 00 20 4d 18 e2 20 dc d2 08 00 ea 60
>3a3c58	08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 c2 20
>3a3c68	a9 00 00 85 d7 e2 20 a9 36 85 d9 c2 30 a9 00 00
>3a3c78	a0 00 00 97 d7 a0 02 00 97 d7 a0 04 00 97 d7 20
>3a3c88	ae 1a 2b 28 60 8b 08 c2 20 a9 00 00 85 18 a9 36
>3a3c98	00 85 1a 20 ae 1a 20 8a 1d 28 ab 60 08 c2 20 64
>3a3ca8	53 a9 ff 7f 85 57 20 1b 02 20 39 1c 29 ff 00 c9
>3a3cb8	00 00 f0 2c c9 81 00 f0 1a 20 f9 1a 20 3e 05 a5
>3a3cc8	21 85 53 20 39 1c 29 ff 00 c9 00 00 f0 12 c9 81
>3a3cd8	00 d0 2a 20 e5 1b 20 f9 1a 20 3e 05 a5 21 85 57
>3a3ce8	a5 1a 48 a5 18 48 a5 02 48 a5 00 48 20 cc 12 68
>3a3cf8	85 00 68 85 02 68 85 18 68 85 1a 28 60 08 c2 20
>3a3d08	48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2
>3a3d18	20 29 ff 00 20 4d 18 e2 20 dc d2 08 08 08 c2 20
>3a3d28	48 a9 00 08 5b 68 28 c2 20 64 e2 64 e5 e2 20 64
>3a3d38	e4 64 e7 64 e8 c2 20 38 a5 d7 69 04 00 85 df e2
>3a3d48	20 a5 d9 69 00 85 e1 28 60 c9 5f f0 1a c9 3a b0
>3a3d58	04 c9 30 b0 12 c9 5b b0 04 c9 41 b0 0a c9 7b b0
>3a3d68	04 c9 61 b0 02 18 60 38 60 08 e2 20 c2 10 a0 00
>3a3d78	00 b7 0c f0 0a d7 e5 d0 13 c8 c0 08 00 d0 f2 b7
>3a3d88	e5 20 6f 03 20 51 3d b0 03 28 38 60 28 18 60 08
>3a3d98	e2 20 c2 10 a0 00 00 a2 00 00 b7 e5 f0 0b 20 6f
>3a3da8	03 9f 00 4e 00 c8 e8 80 f1 a9 00 9f 00 4e 00 c2
>3a3db8	20 a9 00 4e 85 e5 e2 20 a9 00 85 e7 c2 20 a5 e2
>3a3dc8	85 08 d0 06 e2 20 a5 e4 f0 4d e2 20 a5 e4 85 0a
>3a3dd8	a5 e8 a0 00 00 d7 08 d0 17 c2 20 18 a5 08 69 01
>3a3de8	00 85 0c e2 20 a5 0a 69 00 85 0e 20 71 3d b0 2a
>3a3df8	a0 0d 00 c2 20 b7 08 85 0c c8 c8 e2 20 b7 08 85
>3a3e08	0e d0 06 c2 20 a5 0c f0 0e c2 20 a5 0c 85 08 e2
>3a3e18	20 a5 0e 85 0a 80 b9 28 18 60 28 38 60 08 20 97
>3a3e28	3d b0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a3e38	05 8f d1 08 00 c2 20 29 ff 00 20 4d 18 e2 20 dc
>3a3e48	d2 08 c2 30 a0 09 00 b7 08 85 21 c8 c8 b7 08 85
>3a3e58	23 e2 20 a0 00 00 b7 08 85 25 28 60 08 c2 20 18
>3a3e68	a5 df 69 10 00 85 08 e2 20 a5 e1 69 00 85 0a c5
>3a3e78	ba 90 27 c2 20 a5 08 c5 b8 90 1f 08 c2 20 48 a9
>3a3e88	00 08 5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20 29
>3a3e98	ff 00 20 4d 18 e2 20 dc d2 08 c2 20 a5 df 85 be
>3a3ea8	e2 20 a5 e1 85 c0 c2 20 a5 08 85 df e2 20 a5 0a
>3a3eb8	85 e1 28 60 08 e2 20 a5 25 c5 e8 f0 1f 08 c2 20
>3a3ec8	48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2
>3a3ed8	20 29 ff 00 20 4d 18 e2 20 dc d2 08 c2 10 20 64
>3a3ee8	3e c2 30 18 a5 be 69 01 00 85 08 e2 20 a5 c0 69
>3a3ef8	00 85 0a a0 00 00 a9 00 97 08 c8 c0 08 00 d0 f8
>3a3f08	a0 00 00 b7 e5 f0 10 20 6f 03 20 51 3d 90 08 97
>3a3f18	08 c8 c0 08 00 d0 ec c2 20 a0 09 00 a5 21 97 be
>3a3f28	a5 23 c8 c8 97 be a5 e2 a0 0d 00 97 be c8 c8 e2
>3a3f38	20 a5 e4 97 be c2 20 a5 be 85 e2 e2 20 a5 c0 85
>3a3f48	e4 e2 20 a0 00 00 a5 25 97 be c9 02 f0 02 28 60
>3a3f58	c2 20 a5 21 85 be e2 20 a5 23 85 c0 20 7d 0e 20
>3a3f68	92 0e 80 ea 08 c2 30 a5 e2 d0 06 e2 20 a5 e4 f0
>3a3f78	05 20 97 3d b0 05 20 bc 3e 80 17 e2 20 a5 25 c9
>3a3f88	02 f0 11 c2 30 a0 09 00 a5 21 97 08 c8 c8 a5 23
>3a3f98	97 08 28 60 a0 09 00 b7 08 85 be c8 c8 e2 20 b7
>3a3fa8	08 85 c0 20 7d 0e 20 b1 0e e2 20 a5 25 c9 02 f0
>3a3fb8	02 80 d0 c2 20 a5 21 85 be e2 20 a5 23 85 c0 20
>3a3fc8	7d 0e 20 92 0e 80 bc 08 20 f9 1a e2 20 a7 00 20
>3a3fd8	fb 02 90 42 c2 20 a5 00 85 e5 e2 20 a5 02 85 e7
>3a3fe8	20 d8 1a a7 00 f0 0d c9 24 f0 14 c9 25 f0 09 20
>3a3ff8	51 3d b0 ec a9 00 80 0c 20 d8 1a a9 00 80 05 20
>3a4008	d8 1a a9 02 85 e8 20 39 1c c9 8c d0 06 a5 e8 09
>3a4018	80 85 e8 28 38 60 28 18 60 08 c2 20 48 a9 00 08
>3a4028	5b 68 28 c2 20 a5 21 85 0c a5 23 64 0e 64 21 64
>3a4038	23 e2 20 64 26 a9 01 85 25 c2 20 a5 0c f0 35 10
>3a4048	0e e2 20 a9 80 85 26 c2 20 49 ff ff 1a 85 0c e2
>3a4058	20 e6 24 c2 20 46 0e 66 0c e2 20 66 23 66 22 66
>3a4068	21 c2 20 a5 0c c9 01 00 d0 e5 e2 20 06 26 66 23
>3a4078	66 22 66 21 60 08 20 7d 0e c2 20 a9 01 00 85 21
>3a4088	a9 00 00 85 23 e2 20 af 00 4d 00 c2 20 29 ff 00
>3a4098	85 8d a8 a2 01 00 c2 20 bf 00 4d 00 85 27 a9 00
>3a40a8	00 85 29 20 53 21 e8 e8 88 d0 eb c2 20 a9 04 00
>3a40b8	85 27 a9 00 00 85 29 20 53 21 e2 20 af 00 4d 00
>3a40c8	85 0c a9 00 85 0d c2 20 06 0c 38 a5 21 65 0c 85
>3a40d8	21 a5 23 69 00 00 85 23 d0 29 e2 20 a5 e8 09 80
>3a40e8	a6 21 20 41 0c e2 20 af 00 4d 00 87 be a0 01 00
>3a40f8	a2 00 00 e2 20 bf 01 4d 00 97 be e4 8d f0 23 e8
>3a4108	c8 80 f0 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a4118	09 8f d1 08 00 c2 20 29 ff 00 20 4d 18 e2 20 dc
>3a4128	d2 08 e2 20 38 a5 be 67 be 85 08 a5 bf 69 00 85
>3a4138	09 a5 c0 69 00 85 0a 64 0b c2 20 a0 05 00 b7 c1
>3a4148	85 0c e2 20 c8 c8 b7 c1 85 0e 64 0f e2 20 a9 00
>3a4158	87 08 c2 20 18 a5 08 69 01 00 85 08 a5 0a 69 00
>3a4168	00 85 0a c5 0e d0 e5 a5 08 c5 0c d0 df 28 60 08
>3a4178	c2 20 64 08 64 0a e2 20 af 00 4d 00 85 8d 64 8e
>3a4188	a2 01 00 e2 20 a7 be c5 8d f0 1f 08 c2 20 48 a9
>3a4198	00 08 5b 68 28 e2 20 a9 0a 8f d1 08 00 c2 20 29
>3a41a8	ff 00 20 4d 18 e2 20 dc d2 08 c9 01 f0 3a a0 01
>3a41b8	00 e2 20 bf 00 4d 00 85 21 64 22 64 23 64 24 b7
>3a41c8	be 85 27 64 28 64 29 64 2a a5 21 c5 27 b0 68 20
>3a41d8	53 21 c2 20 18 a5 08 65 21 85 08 a5 0a 65 23 85
>3a41e8	0a e8 e8 c8 c4 8d d0 c9 e2 20 18 bf 00 4d 00 85
>3a41f8	8e 65 08 85 08 a5 09 69 00 85 09 c2 20 a5 0a 69
>3a4208	00 00 85 0a c2 20 06 08 26 0a 06 08 26 0a e2 20
>3a4218	38 a5 08 65 8d 85 08 a5 09 69 00 85 09 c2 20 a5
>3a4228	0a 69 00 00 85 0a 18 a5 08 65 be 85 08 e2 20 a5
>3a4238	0a 65 c0 85 0a 28 60 08 c2 20 48 a9 00 08 5b 68
>3a4248	28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff 00 20 4d
>3a4258	18 e2 20 dc d2 08 08 20 7d 0e e2 20 a0 00 00 b7
>3a4268	c1 29 7f c5 25 d0 28 a5 25 48 c2 20 a5 23 48 a5
>3a4278	21 48 20 77 41 68 85 21 68 85 23 e2 20 68 85 25
>3a4288	c2 20 a5 21 87 08 a0 02 00 a5 23 97 08 28 60 08
>3a4298	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08
>3a42a8	00 c2 20 29 ff 00 20 4d 18 e2 20 dc d2 08 08 20
>3a42b8	7d 0e f4 00 00 f4 00 00 e2 20 48 20 77 41 e2 20
>3a42c8	68 c2 20 68 68 c2 20 a7 08 85 21 a0 02 00 b7 08
>3a42d8	85 23 e2 20 a0 00 00 b7 c1 29 7f 85 25 28 60 da
>3a42e8	0b 08 08 c2 20 48 a9 00 08 5b 68 28 c2 30 a5 23
>3a42f8	89 f0 ff d0 29 89 0f 00 d0 0c a5 21 89 00 fc d0
>3a4308	05 20 e4 33 80 2e a2 0a 00 46 23 66 21 ca d0 f9
>3a4318	20 e4 33 e2 20 a9 4b 20 18 00 c2 20 80 16 a2 14
>3a4328	00 46 23 66 21 ca d0 f9 20 e4 33 e2 20 a9 4d 20
>3a4338	18 00 c2 20 28 2b fa 60 0b 08 08 c2 20 48 a9 00
>3a4348	08 5b 68 28 c2 20 20 b7 10 20 62 43 a5 14 85 21
>3a4358	a5 16 85 23 20 c4 33 28 2b 60 5a 0b 08 08 c2 20
>3a4368	48 a9 00 08 5b 68 28 e2 20 a7 14 c9 20 d0 1c a0
>3a4378	02 00 b7 14 d0 06 a9 30 87 14 80 0f a0 01 00 b7
>3a4388	14 87 14 c2 20 e6 14 d0 02 e6 16 28 2b 7a 60 0b
>3a4398	08 08 c2 20 48 a9 00 08 5b 68 28 c2 20 8f 44 02
>3a43a8	00 a2 09 00 4a ca d0 fc 18 69 bc 07 85 21 64 23
>3a43b8	e2 20 a9 00 85 25 c2 20 20 e4 33 a9 2d 00 20 18
>3a43c8	00 c2 20 af 44 02 00 a2 05 00 4a ca d0 fc 29 0f
>3a43d8	00 85 21 64 23 e2 20 a9 00 85 25 c2 20 20 40 43
>3a43e8	a9 2d 00 20 18 00 c2 20 af 44 02 00 29 1f 00 85
>3a43f8	21 64 23 e2 20 a9 00 85 25 c2 20 20 40 43 28 2b
>3a4408	60 0b 08 08 c2 20 48 a9 00 08 5b 68 28 c2 20 8f
>3a4418	44 02 00 a2 0b 00 4a ca d0 fc 85 21 64 23 e2 20
>3a4428	a9 00 85 25 c2 20 20 e4 33 a9 3a 00 20 18 00 c2
>3a4438	20 af 44 02 00 a2 05 00 4a ca d0 fc 29 0f 00 85
>3a4448	21 64 23 e2 20 a9 00 85 25 c2 20 20 40 43 a9 3a
>3a4458	00 20 18 00 c2 20 af 44 02 00 29 1f 00 85 21 64
>3a4468	23 e2 20 a9 00 85 25 c2 20 20 40 43 28 2b 60 0b
>3a4478	08 c2 30 a9 00 00 8f b4 08 00 8f b6 08 00 e2 20
>3a4488	20 39 1c c9 00 f0 08 20 fb 16 20 70 04 80 11 c2
>3a4498	20 a9 00 00 85 21 85 23 e2 20 a9 02 85 25 c2 20
>3a44a8	20 01 46 22 08 11 00 b0 22 20 b2 46 08 c2 20 48
>3a44b8	a9 00 08 5b 68 28 e2 20 a9 10 8f d1 08 00 c2 20
>3a44c8	29 ff 00 20 4d 18 e2 20 dc d2 08 08 c2 20 48 a9
>3a44d8	20 03 5b 68 28 e2 20 a0 00 00 b7 18 d0 03 82 d2
>3a44e8	00 c9 e5 d0 03 82 bf 00 a0 0b 00 b7 18 89 08 f0
>3a44f8	03 82 d5 00 89 02 f0 03 82 ac 00 29 0f c9 0f d0
>3a4508	03 82 a3 00 a0 00 00 b7 18 c9 20 f0 09 20 18 00
>3a4518	c8 c0 08 00 d0 f1 a0 08 00 b7 18 c9 20 f0 17 a9
>3a4528	2e 20 18 00 a0 08 00 b7 18 c9 20 f0 09 20 18 00
>3a4538	c8 c0 0b 00 d0 f1 a9 09 20 18 00 a0 0b 00 b7 18
>3a4548	89 08 d0 60 89 01 f0 05 a9 52 20 18 00 89 04 f0
>3a4558	05 a9 53 20 18 00 89 10 f0 05 a9 44 20 18 00 a9
>3a4568	09 20 18 00 c2 20 a0 1c 00 b7 18 8f 21 08 00 c8
>3a4578	c8 b7 18 8f 23 08 00 e2 20 a9 00 8f 25 08 00 20
>3a4588	e7 42 e2 20 a9 09 20 18 00 c2 20 a0 10 00 b7 18
>3a4598	20 97 43 e2 20 a9 20 20 18 00 c2 20 a0 0e 00 b7
>3a45a8	18 20 09 44 20 1b 02 20 32 02 22 0c 11 00 90 03
>3a45b8	82 18 ff 20 b2 46 08 c2 20 48 a9 00 08 5b 68 28
>3a45c8	20 1d 1b 20 1b 02 28 2b 60 08 c2 20 48 a9 20 03
>3a45d8	5b 68 28 e2 20 29 0f c9 0f f0 cc a9 5b 20 18 00
>3a45e8	a0 00 00 b7 18 c9 20 f0 09 20 18 00 c8 c0 08 00
>3a45f8	d0 f1 a9 5d 20 18 00 80 ab 0b 08 08 c2 20 48 a9
>3a4608	20 03 5b 68 28 c2 30 a9 22 f2 85 20 a9 3a 00 85
>3a4618	22 a0 00 00 e2 20 a9 00 97 20 c8 c0 1e 00 d0 f8
>3a4628	c2 20 a9 22 f0 8f 30 f2 3a a9 3a 00 8f 32 f2 3a
>3a4638	af 21 08 00 8f 24 f2 3a af 23 08 00 8f 26 f2 3a
>3a4648	28 2b 60 08 c2 30 20 f9 1a 20 fb 16 20 70 04 20
>3a4658	01 46 e2 20 a9 2c 85 35 20 1a 1c b0 0f c2 20 a9
>3a4668	ff ff 8f 54 03 00 8f 56 03 00 80 17 20 d8 1a 20
>3a4678	fb 16 20 46 04 c2 20 a5 21 8f 54 03 00 a5 23 8f
>3a4688	56 03 00 22 18 11 00 b0 1f 08 c2 20 48 a9 00 08
>3a4698	5b 68 28 e2 20 a9 11 8f d1 08 00 c2 20 29 ff 00
>3a46a8	20 4d 18 e2 20 dc d2 08 28 60 8b 0b 08 08 c2 20
>3a46b8	48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68
>3a46c8	28 e2 20 af 2e 03 00 85 21 a9 00 85 22 85 23 85
>3a46d8	24 a9 00 85 25 85 e8 a9 3a 85 e7 c2 20 a9 15 47
>3a46e8	85 e5 20 6c 3f e2 20 af 20 03 00 85 21 a9 00 85
>3a46f8	22 85 23 85 24 a9 00 85 25 85 e8 a9 3a 85 e7 c2
>3a4708	20 a9 1d 47 85 e5 20 6c 3f 28 2b ab 60 44 4f 53
>3a4718	53 54 41 54 00 42 49 4f 53 53 54 41 54 00 08 c2
>3a4728	30 20 f9 1a 20 fb 16 20 70 04 a5 21 8f 60 03 00
>3a4738	a5 23 8f 62 03 00 a9 ff ff 8f 54 03 00 8f 56 03
>3a4748	00 22 24 11 00 b0 25 20 4d 18 20 b2 46 08 c2 20
>3a4758	48 a9 00 08 5b 68 28 e2 20 a9 11 8f d1 08 00 c2
>3a4768	20 29 ff 00 20 4d 18 e2 20 dc d2 08 20 4d 18 28
>3a4778	60 08 c2 30 20 f9 1a 20 fb 16 20 70 04 20 01 46
>3a4788	a9 00 00 8f 54 03 00 a9 01 00 8f 56 03 00 20 58
>3a4798	3c 22 18 11 00 b0 22 20 b2 46 08 c2 20 48 a9 00
>3a47a8	08 5b 68 28 e2 20 a9 11 8f d1 08 00 c2 20 29 ff
>3a47b8	00 20 4d 18 e2 20 dc d2 08 20 b2 46 c2 20 a2 12
>3a47c8	00 18 bf 22 f2 3a 69 00 00 85 90 bf 24 f2 3a 69
>3a47d8	01 00 85 92 e2 20 a9 00 87 90 c2 20 a9 00 00 85
>3a47e8	78 a9 01 00 85 7a a2 00 00 e2 20 a7 78 f0 28 c9
>3a47f8	0d f0 12 c9 0a f0 04 9d 00 4f e8 c2 20 e6 78 d0
>3a4808	e8 e6 7a 80 e4 e2 20 a9 00 9d 00 4f 20 88 20 e6
>3a4818	78 d0 d3 e6 7a 80 cf e0 00 00 f0 0a e2 20 a9 00
>3a4828	9d 00 4f 20 88 20 28 60 08 c2 30 20 f9 1a 20 fb
>3a4838	16 20 70 04 20 01 46 e2 20 a9 2c 20 e5 1b c2 20
>3a4848	20 fb 16 20 46 04 a5 21 8f 50 03 00 a5 23 8f 52
>3a4858	03 00 e2 20 a9 2c c2 20 20 e5 1b 20 fb 16 20 46
>3a4868	04 a5 21 8f 58 03 00 a5 23 8f 5a 03 00 22 1c 11
>3a4878	00 b0 22 20 b2 46 08 c2 20 48 a9 00 08 5b 68 28
>3a4888	e2 20 a9 12 8f d1 08 00 c2 20 29 ff 00 20 4d 18
>3a4898	e2 20 dc d2 08 20 b2 46 28 60 da 5a 08 a2 00 00
>3a48a8	a0 00 00 e2 20 b7 21 9d 00 04 f0 04 e8 c8 80 f5
>3a48b8	28 7a fa 60 08 c2 30 20 f9 1a 20 fb 16 20 70 04
>3a48c8	20 01 46 a9 00 00 85 a4 e2 20 a9 01 85 a6 a9 20
>3a48d8	85 b2 c2 20 a9 00 00 85 a9 a9 ff ff 85 a7 c2 20
>3a48e8	a9 00 00 85 53 85 55 a9 ff ff 85 57 a9 ff 7f 85
>3a48f8	59 20 cc 12 e2 20 a9 80 85 b2 c2 20 c6 a9 18 a9
>3a4908	00 00 8f 50 03 00 65 a9 8f 58 03 00 a9 01 00 8f
>3a4918	52 03 00 69 00 00 8f 5a 03 00 22 1c 11 00 b0 22
>3a4928	20 b2 46 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a4938	12 8f d1 08 00 c2 20 29 ff 00 20 4d 18 e2 20 dc
>3a4948	d2 08 20 b2 46 28 60 08 c2 30 20 f9 1a 20 fb 16
>3a4958	20 70 04 20 a2 48 22 04 11 00 b0 22 20 b2 46 08
>3a4968	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 13 8f d1 08
>3a4978	00 c2 20 29 ff 00 20 4d 18 e2 20 dc d2 08 20 b2
>3a4988	46 28 60 da 08 e2 20 c9 61 90 08 c9 7b b0 04 29
>3a4998	df 80 13 c9 20 90 13 a2 00 00 df b6 49 3a f0 0a
>3a49a8	e8 e0 0f 00 d0 f4 28 38 fa 6b 28 18 fa 6b 2a 2b
>3a49b8	2c 2f 3a 3b 3c 3d 3e 3f 5c 5b 5d 7c 22 08 08 c2
>3a49c8	20 48 a9 00 08 5b 68 28 c2 30 20 fb 16 20 70 04
>3a49d8	20 a2 48 22 10 11 00 b0 22 20 b2 46 08 c2 20 48
>3a49e8	a9 00 08 5b 68 28 e2 20 a9 14 8f d1 08 00 c2 20
>3a49f8	29 ff 00 20 4d 18 e2 20 dc d2 08 e2 20 a9 2c 20
>3a4a08	e5 1b c2 20 20 fb 16 20 70 04 ad 38 03 85 08 ad
>3a4a18	3a 03 85 0a e2 20 a2 00 00 a9 20 95 7c e8 e0 0b
>3a4a28	00 d0 f8 a2 00 00 a0 00 00 b7 21 f0 6d c9 2e f0
>3a4a38	30 22 8b 49 3a b0 1f 08 c2 20 48 a9 00 08 5b 68
>3a4a48	28 e2 20 a9 0a 8f d1 08 00 c2 20 29 ff 00 20 4d
>3a4a58	18 e2 20 dc d2 08 95 7c c8 e8 c0 08 00 d0 ca 80
>3a4a68	01 c8 a2 08 00 b7 21 f0 31 22 8b 49 3a b0 22 20
>3a4a78	b2 46 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a
>3a4a88	8f d1 08 00 c2 20 29 ff 00 20 4d 18 e2 20 dc d2
>3a4a98	08 95 7c c8 e8 c0 0b 00 d0 cb a2 00 00 a0 00 00
>3a4aa8	b5 7c 97 08 e8 c8 c0 0b 00 d0 f5 22 14 11 00 b0
>3a4ab8	22 20 b2 46 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a4ac8	a9 15 8f d1 08 00 c2 20 29 ff 00 20 4d 18 e2 20
>3a4ad8	dc d2 08 20 b2 46 28 60 5c 9d 64 3a 5c ee 62 3a
>3a4ae8	5c 9e 64 3a 5c 1a 54 3a 5c 77 54 3a 5c aa 53 3a
>3a4af8	5c 30 53 3a 5c ad 58 3a 5c 9b 4f 3a 5c c8 52 3a
>3a4b08	5c 83 52 3a 5c 0d 52 3a 5c ac 63 3a 5c a9 50 3a
>3a4b18	5c ff 4e 3a 5c 27 64 3a 5c d7 4f 3a 5c a0 64 3a
>3a4b28	5c 99 64 3a 5c c6 51 3a 5c a1 64 3a 18 fb c2 20
>3a4b38	a9 ff fe 1b 58 5c 41 4b 3a c2 30 22 ff 4e 3a 20
>3a4b48	08 00 20 0c 00 8b e2 20 a9 00 48 ab a2 00 4f 20
>3a4b58	7e 03 ab 22 e4 4a 3a 22 ec 4a 3a 80 e2 08 8b e2
>3a4b68	20 a9 3a 48 ab c2 10 a2 78 4b 20 a8 02 ab 28 6b
>3a4b78	41 20 3c 73 74 61 72 74 3e 20 3c 61 73 73 65 6d
>3a4b88	62 6c 79 3e 0d 20 20 41 73 73 65 6d 62 6c 65 20
>3a4b98	61 20 70 72 6f 67 72 61 6d 0d 0d 43 20 3c 73 74
>3a4ba8	61 72 74 31 3e 20 3c 73 74 61 72 74 32 3e 20 5b
>3a4bb8	6c 65 6e 20 28 31 20 69 66 20 62 6c 61 6e 6b 29
>3a4bc8	5d 0d 20 20 43 6f 6d 70 61 72 65 20 74 6f 20 73
>3a4bd8	65 63 74 69 6f 6e 73 20 6f 66 20 6d 65 6d 6f 72
>3a4be8	79 0d 0d 44 20 3c 73 74 61 72 74 3e 20 5b 65 6e
>3a4bf8	64 5d 0d 20 20 44 69 73 61 73 73 65 6d 62 6c 65
>3a4c08	20 61 20 70 72 6f 67 72 61 6d 0d 0d 46 20 3c 73
>3a4c18	74 61 72 74 3e 20 3c 65 6e 64 3e 20 3c 62 79 74
>3a4c28	65 3e 0d 20 20 46 69 6c 6c 20 61 20 62 6c 6f 63
>3a4c38	6b 20 6f 66 20 6d 65 6d 6f 72 79 20 77 69 74 68
>3a4c48	20 61 20 62 79 74 65 0d 0d 47 20 5b 61 64 64 72
>3a4c58	65 73 73 5d 0d 20 20 53 74 61 72 74 20 65 78 65
>3a4c68	63 75 74 69 6f 6e 20 61 74 20 61 20 6c 6f 63 61
>3a4c78	74 69 6f 6e 0d 0d 4a 20 5b 61 64 64 72 65 73 73
>3a4c88	5d 20 2d 20 4a 75 6d 70 20 74 6f 20 61 20 6c 6f
>3a4c98	63 61 74 69 6f 6e 20 69 6e 20 6d 65 6d 6f 72 79
>3a4ca8	0d 20 20 4a 75 6d 70 20 74 6f 20 61 20 6c 6f 63
>3a4cb8	61 74 69 6f 6e 20 69 6e 20 6d 65 6d 6f 72 79 0d
>3a4cc8	0d 48 20 3c 73 74 61 72 74 3e 20 3c 65 6e 64 3e
>3a4cd8	20 3c 62 79 74 65 3e 20 5b 62 79 74 65 5d 2e 2e
>3a4ce8	0d 20 20 48 75 6e 74 20 66 6f 72 20 76 61 6c 75
>3a4cf8	65 73 20 69 6e 20 6d 65 6d 6f 72 79 0d 0d 4c 20
>3a4d08	20 20 20 20 4c 4f 41 44 20 20 20 20 20 20 20 20
>3a4d18	20 22 46 69 6c 65 22 20 5b 64 65 73 74 69 6e 61
>3a4d28	74 69 6f 6e 5d 0d 4d 20 3c 73 74 61 72 74 3e 20
>3a4d38	5b 65 6e 64 5d 0d 20 20 44 75 6d 70 20 74 68 65
>3a4d48	20 76 61 6c 75 65 20 69 6e 20 6d 65 6d 6f 72 79
>3a4d58	0d 0d 52 20 2d 20 44 69 73 70 6c 61 79 20 74 68
>3a4d68	65 20 76 61 6c 75 65 73 20 6f 66 20 74 68 65 20
>3a4d78	72 65 67 69 73 74 65 72 73 0d 0d 3b 20 3c 50 43
>3a4d88	3e 20 3c 41 3e 20 3c 58 3e 20 3c 59 3e 20 3c 53
>3a4d98	50 3e 20 3c 44 42 52 3e 20 3c 44 50 3e 20 3c 4e
>3a4da8	56 4d 58 44 49 5a 43 3e 0d 20 20 43 68 61 6e 67
>3a4db8	65 20 74 68 65 20 63 6f 6e 74 65 6e 74 73 20 6f
>3a4dc8	66 20 74 68 65 20 72 65 67 69 73 74 65 72 73 0d
>3a4dd8	0d 53 20 20 20 20 20 53 41 56 45 20 20 20 20 20
>3a4de8	20 20 20 20 22 46 69 6c 65 22 20 3c 73 74 61 72
>3a4df8	74 3e 20 3c 65 6e 64 3e 0d 54 20 3c 73 74 61 72
>3a4e08	74 3e 20 3c 65 6e 64 3e 20 3c 64 65 73 74 69 6e
>3a4e18	61 74 69 6f 6e 3e 0d 20 20 54 72 61 6e 73 66 65
>3a4e28	72 20 28 63 6f 70 79 29 20 64 61 74 61 20 77 69
>3a4e38	74 68 69 6e 20 6d 65 6d 6f 72 79 0d 0d 57 20 3c
>3a4e48	62 79 74 65 3e 0d 20 20 53 65 74 20 74 68 65 20
>3a4e58	72 65 67 69 73 74 65 72 20 77 69 64 74 68 20 66
>3a4e68	6c 61 67 73 20 66 6f 72 20 74 68 65 20 64 69 73
>3a4e78	61 73 73 65 6d 62 6c 65 72 0d 0d 58 20 2d 20 52
>3a4e88	65 74 75 72 6e 20 74 6f 20 42 41 53 49 43 0d 0d
>3a4e98	3e 20 3c 73 74 61 72 74 3e 20 3c 62 79 74 65 3e
>3a4ea8	20 5b 62 79 74 65 5d 2e 2e 2e 0d 20 20 45 64 69
>3a4eb8	74 20 64 61 74 61 20 69 6e 20 6d 65 6d 6f 72 79
>3a4ec8	0d 0d 3f 20 2d 20 44 69 73 70 6c 61 79 20 61 20
>3a4ed8	73 68 6f 72 74 20 68 65 6c 70 20 73 63 72 65 65
>3a4ee8	6e 0d 0d 00 08 08 c2 20 48 a9 46 08 5b 68 28 e2
>3a4ef8	20 a5 0d 85 4e 28 6b 08 e2 20 48 a9 3a 48 ab 68
>3a4f08	28 a2 de 64 20 a8 02 e2 20 a9 3b 20 18 00 a9 20
>3a4f18	20 18 00 c2 30 08 e2 20 48 a9 00 48 ab 68 28 a0
>3a4f28	03 00 a2 42 02 20 2b 02 c2 20 a9 20 00 20 18 00
>3a4f38	af 44 02 00 20 b8 02 a9 20 00 20 18 00 af 46 02
>3a4f48	00 20 b8 02 a9 20 00 20 18 00 af 48 02 00 20 b8
>3a4f58	02 a9 20 00 20 18 00 af 4a 02 00 20 b8 02 a9 20
>3a4f68	00 20 18 00 af 4e 02 00 20 d2 02 a9 20 00 20 18
>3a4f78	00 20 18 00 af 4c 02 00 20 b8 02 a9 20 00 20 18
>3a4f88	00 08 e2 20 ad 4f 02 22 f7 61 3a 28 20 1b 02 20
>3a4f98	1b 02 6b 08 0b 08 c2 20 48 a9 46 08 5b 68 28 e2
>3a4fa8	20 a5 15 87 0d e2 20 a5 0f c5 13 d0 0e c2 20 a5
>3a4fb8	0d c5 11 d0 06 20 1b 02 2b 28 6b c2 20 18 a5 0d
>3a4fc8	69 01 00 85 0d e2 20 a5 0e 69 00 85 0e 80 d0 08
>3a4fd8	0b 08 c2 20 48 a9 46 08 5b 68 28 e2 20 a5 0f c5
>3a4fe8	17 90 45 c2 20 a5 0d c5 15 90 3d e2 20 a7 0d 87
>3a4ff8	15 a5 0f c5 13 d0 0b c2 20 a5 0d c5 11 d0 03 4c
>3a5008	8e 50 c2 20 18 a5 0d 69 01 00 85 0d e2 20 a5 0e
>3a5018	69 00 85 0e c2 20 18 a5 15 69 01 00 85 15 e2 20
>3a5028	a5 16 69 00 85 16 80 c3 c2 20 38 a5 11 e5 0d 85
>3a5038	19 e2 20 a5 13 e5 0f 85 1b c2 20 18 a5 19 65 15
>3a5048	85 15 e2 20 a5 1b 65 17 85 17 e2 20 a7 11 87 15
>3a5058	a5 13 c5 0f d0 0a c2 20 a5 11 c5 0d d0 02 80 26
>3a5068	c2 20 38 a5 11 e9 01 00 85 11 e2 20 a5 12 e9 00
>3a5078	85 12 c2 20 38 a5 15 e9 01 00 85 15 e2 20 a5 16
>3a5088	e9 00 85 16 80 c4 20 1b 02 2b 28 6b 08 e2 20 c9
>3a5098	21 90 0b c9 7f 90 04 c9 a0 90 03 28 38 6b 28 18
>3a50a8	6b 08 8b 0b 08 c2 20 48 a9 46 08 5b 68 28 e2 20
>3a50b8	a9 00 8f b4 08 00 a5 31 c9 02 b0 16 c9 01 90 20
>3a50c8	c2 20 18 a5 0d 69 00 01 85 11 e2 20 a5 0f 69 00
>3a50d8	85 13 c2 20 a5 0d 85 32 e2 20 a5 0f 85 34 80 12
>3a50e8	c2 20 18 a5 32 69 00 01 85 11 e2 20 a5 34 69 00
>3a50f8	85 13 e2 20 a0 00 00 c2 20 a5 32 85 19 e2 20 a5
>3a5108	34 85 1b e2 20 a7 19 22 94 50 3a b0 02 a9 3f 99
>3a5118	7c 08 c2 20 18 a5 19 69 01 00 85 19 e2 20 a5 1b
>3a5128	69 00 85 1b c8 c0 08 00 90 db a9 00 99 7c 08 a9
>3a5138	3e 20 18 00 a9 20 20 18 00 e2 20 a5 34 20 d2 02
>3a5148	a9 3a 20 18 00 c2 20 a5 32 20 b8 02 c2 20 a9 08
>3a5158	00 85 47 e2 20 a9 20 20 18 00 a7 32 20 d2 02 22
>3a5168	d6 61 3a e2 20 c6 47 d0 ea a9 20 20 18 00 a9 20
>3a5178	20 18 00 08 e2 20 48 a9 00 48 ab 68 28 a2 7c 08
>3a5188	20 a8 02 20 1b 02 20 32 02 a5 34 c5 13 90 0f c2
>3a5198	20 a5 32 c5 11 90 07 20 1b 02 2b ab 28 6b 4c fa
>3a51a8	50 08 8d 90 08 e2 20 bd 00 00 99 00 00 ad 90 08
>3a51b8	f0 0a c8 e8 e8 e8 e8 ce 90 08 80 eb 28 6b 08 0b
>3a51c8	8b 08 c2 20 48 a9 46 08 5b 68 28 08 e2 20 48 a9
>3a51d8	00 48 ab 68 28 c2 30 a5 0d 85 32 a5 0f 85 34 e2
>3a51e8	20 a5 31 3a 85 47 a2 57 08 a0 7c 08 22 a9 51 3a
>3a51f8	a0 00 00 b9 7c 08 87 32 22 d6 61 3a c8 c4 47 d0
>3a5208	f2 ab 2b 28 6b 08 0b 8b 08 c2 20 48 a9 46 08 5b
>3a5218	68 28 08 e2 20 48 a9 00 48 ab 68 28 e2 20 c2 10
>3a5228	a5 31 3a 3a 85 47 a2 5b 08 a0 7c 08 22 a9 51 3a
>3a5238	c2 20 a5 0d 85 32 a5 0f 85 34 c2 20 a5 34 c5 13
>3a5248	d0 06 a5 32 c5 11 f0 2c e2 20 a0 00 00 b7 32 d9
>3a5258	7c 08 d0 1a c8 c4 47 d0 f4 c2 20 a5 32 85 4a a5
>3a5268	34 85 4c 22 80 5c 3a e2 20 a9 20 20 18 00 22 d6
>3a5278	61 3a 80 c6 20 1b 02 ab 2b 28 6b 08 c2 20 48 a9
>3a5288	46 08 5b 68 28 e2 20 a5 31 f0 0e c2 30 a5 0d 8f
>3a5298	40 02 00 a5 0f 8f 42 02 00 af 46 02 00 aa af 48
>3a52a8	02 00 a8 af 4a 02 00 1b af 4c 02 00 5b e2 20 a9
>3a52b8	3a 48 a9 52 48 a9 c3 48 4c fa 52 ea 5c 04 00 3a
>3a52c8	08 c2 20 48 a9 46 08 5b 68 28 e2 20 a5 31 f0 c9
>3a52d8	c2 30 a5 0d 8f 40 02 00 a5 0f 8f 42 02 00 af 46
>3a52e8	02 00 aa af 48 02 00 a8 af 4a 02 00 1b af 4c 02
>3a52f8	00 5b e2 20 af 4e 02 00 48 ab a9 5c 8f a0 08 00
>3a5308	af 42 02 00 8f a3 08 00 af 41 02 00 8f a2 08 00
>3a5318	af 40 02 00 8f a1 08 00 af 4f 02 00 48 c2 20 af
>3a5328	44 02 00 28 5c a0 08 00 08 0b 8b 08 e2 20 48 a9
>3a5338	3a 48 ab 68 28 08 c2 20 48 a9 46 08 5b 68 28 c2
>3a5348	10 e2 20 a5 31 c9 02 f0 0c c9 03 d0 11 c2 20 a5
>3a5358	15 85 47 80 11 c2 20 a9 01 00 85 47 80 08 a2 a2
>3a5368	64 20 a8 02 80 35 a5 0d 85 4a a5 0f 85 4c a0 00
>3a5378	00 e2 20 a7 4a d7 11 f0 09 22 80 5c 3a a9 20 20
>3a5388	18 00 c2 20 18 a5 4a 69 01 00 85 4a a5 4c 69 00
>3a5398	00 85 4c c8 c4 47 d0 d9 20 1b 02 20 1b 02 ab 2b
>3a53a8	28 6b 08 0b 8b 08 e2 20 48 a9 00 48 ab 68 28 08
>3a53b8	c2 20 48 a9 46 08 5b 68 28 e2 20 a5 31 f0 4f a6
>3a53c8	0d 8e 40 02 a6 0f 8e 42 02 c9 01 f0 41 a6 11 8e
>3a53d8	44 02 c9 02 f0 38 a6 15 8e 46 02 c9 03 f0 2f a6
>3a53e8	19 8e 48 02 c9 04 f0 26 a6 1d 8e 4a 02 c9 05 f0
>3a53f8	1d e2 10 a6 21 8e 4e 02 c9 06 f0 12 c2 10 a6 25
>3a5408	8e 4c 02 c9 07 f0 07 e2 10 a6 29 8e 4f 02 ab 2b
>3a5418	28 6b 08 0b 8b 08 c2 20 48 a9 46 08 5b 68 28 e2
>3a5428	20 c2 10 a2 00 00 bf 0f 65 3a f0 18 c7 08 f0 03
>3a5438	e8 80 f3 c2 20 8a 0a aa bf 50 54 3a 8f 2d 08 00
>3a5448	22 74 54 3a ab 2b 28 6b f0 4a f8 4a fc 4a 00 4b
>3a5458	04 4b 08 4b 0c 4b 10 4b 14 4b 18 4b f4 4a 1c 4b
>3a5468	20 4b 24 4b ec 4e 28 4b 2c 4b 65 4b 6c 2d 08 08
>3a5478	8b 0b 08 c2 20 48 a9 46 08 5b 68 28 e2 20 a5 31
>3a5488	c9 02 b0 03 4c 1d 56 c2 20 a5 0d 85 32 a5 0f 85
>3a5498	34 c2 20 22 1f 58 3a c9 ff ff f0 10 85 54 e2 20
>3a54a8	a5 31 c9 03 f0 36 a9 13 85 4f 80 4c 20 1b 02 08
>3a54b8	e2 20 48 a9 3a 48 ab 68 28 c2 10 a2 54 56 20 a8
>3a54c8	02 4c 1d 56 20 1b 02 08 e2 20 48 a9 3a 48 ab 68
>3a54d8	28 c2 10 a2 63 56 20 a8 02 4c 1d 56 e2 20 22 55
>3a54e8	58 3a c9 ff f0 de 85 4f c9 03 f0 62 c9 0b f0 5e
>3a54f8	c9 13 f0 04 c9 08 f0 00 22 4d 57 3a b0 03 4c e6
>3a5508	55 87 32 22 d6 61 3a 08 e2 20 48 a9 00 48 ab 68
>3a5518	28 c2 20 a5 32 85 56 a5 34 85 58 e2 20 a5 4f c9
>3a5528	12 f0 6c c9 16 f0 68 c9 14 f0 7c 29 3f c9 02 d0
>3a5538	03 4c 14 56 c2 20 29 ff 00 aa e2 20 bf 1c 61 3a
>3a5548	c9 03 f0 57 c9 02 f0 5f c9 01 f0 67 80 71 c2 20
>3a5558	a5 54 c9 94 5d f0 26 c9 f8 5d f0 2a c9 78 5d f0
>3a5568	1c c9 7c 5d f0 17 c9 84 5d f0 12 c9 6c 5d f0 0d
>3a5578	c9 80 5d f0 08 c9 68 5d f0 03 4c 00 55 e2 20 a9
>3a5588	12 85 4f 4c 00 55 e2 20 a9 16 85 4f 4c 00 55 22
>3a5598	90 56 3a 90 60 c9 02 f0 0e 80 18 a0 02 00 b9 96
>3a55a8	08 97 56 22 d6 61 3a a0 01 00 b9 96 08 97 56 22
>3a55b8	d6 61 3a a0 00 00 b9 96 08 97 56 22 d6 61 3a e2
>3a55c8	20 a9 41 20 18 00 a9 20 20 18 00 a6 32 86 4a a6
>3a55d8	34 86 4c 22 80 5c 3a a9 20 20 18 00 80 37 20 1b
>3a55e8	02 08 e2 20 48 a9 3a 48 ab 68 28 c2 10 a2 21 56
>3a55f8	20 a8 02 80 20 20 1b 02 08 e2 20 48 a9 3a 48 ab
>3a5608	68 28 c2 10 a2 71 56 20 a8 02 80 09 a5 4f 29 c0
>3a5618	d0 95 4c bb 55 2b ab 28 6b 41 64 64 72 65 73 73
>3a5628	69 6e 67 20 6d 6f 64 65 20 6e 6f 74 20 64 65 66
>3a5638	69 6e 65 64 20 66 6f 72 20 74 68 61 74 20 69 6e
>3a5648	73 74 72 75 63 74 69 6f 6e 2e 0d 00 42 61 64 20
>3a5658	6d 6e 65 6d 6f 6e 69 63 2e 0d 00 42 61 64 20 6f
>3a5668	70 65 72 61 6e 64 2e 0d 00 52 65 6c 61 74 69 76
>3a5678	65 20 6f 66 66 73 65 74 20 69 73 20 74 6f 6f 20
>3a5688	6c 61 72 67 65 2e 0d 00 08 0b 08 c2 20 48 a9 46
>3a5698	08 5b 68 28 e2 20 a5 4f c9 12 f0 0a c2 20 18 a5
>3a56a8	32 69 02 00 80 08 c2 20 18 a5 32 69 01 00 85 4a
>3a56b8	a5 34 69 00 00 85 4c 38 a5 50 e5 4a 85 50 a5 52
>3a56c8	e5 4c 85 52 e2 20 a5 4f c9 16 f0 1e a5 50 30 0c
>3a56d8	a5 51 d0 2a a5 52 d0 26 a9 01 80 26 a5 51 c9 ff
>3a56e8	d0 1c a5 52 c9 ff d0 16 80 18 a5 51 30 06 a5 52
>3a56f8	d0 0c 80 0e a5 52 c9 ff d0 04 a9 02 80 04 2b 28
>3a5708	18 6b 2b 28 38 6b 08 0b c2 10 da 08 c2 20 48 a9
>3a5718	46 08 5b 68 28 e2 20 a2 00 00 df 00 d0 3a f0 08
>3a5728	e8 e0 10 00 f0 1b 80 f2 c2 20 06 50 26 52 06 50
>3a5738	26 52 06 50 26 52 06 50 26 52 e2 20 8a 05 50 85
>3a5748	50 fa 2b 28 6b 0b 8b 08 c2 20 48 a9 46 08 5b 68
>3a5758	28 08 e2 20 48 a9 3a 48 ab 68 28 e2 20 a5 4f 29
>3a5768	3f 85 4a c2 30 a2 00 00 a0 00 00 bd 1a 5e f0 1b
>3a5778	c5 54 d0 0d e2 20 b9 1c 60 29 3f c5 4a f0 07 c2
>3a5788	20 e8 e8 c8 80 e5 98 38 ab 2b 6b 18 ab 2b 6b 08
>3a5798	0b 08 c2 20 48 a9 46 08 5b 68 28 e2 20 c2 10 a0
>3a57a8	00 00 64 50 64 52 b7 03 f0 11 c9 64 f0 19 48 b7
>3a57b8	36 85 4a 68 c5 4a d0 0b c8 80 eb b7 36 d0 04 2b
>3a57c8	28 38 6b 2b 28 18 6b e2 20 b7 36 c9 3a b0 04 c9
>3a57d8	30 b0 14 c9 47 b0 04 c9 41 b0 0c c9 67 b0 e4 c9
>3a57e8	61 b0 02 80 de 29 df 22 0e 57 3a 80 cb 0b 08 c2
>3a57f8	20 48 a9 46 08 5b 68 28 a0 00 00 e2 20 b7 03 f0
>3a5808	03 c8 80 f9 c2 20 c8 5a 68 18 65 03 85 03 a5 05
>3a5818	69 00 00 85 05 2b 6b 0b 08 c2 20 48 a9 46 08 5b
>3a5828	68 28 c2 20 a5 11 85 36 a5 13 85 38 a9 a8 5c 85
>3a5838	03 a9 3a 00 85 05 22 97 57 3a b0 0d 22 f5 57 3a
>3a5848	a7 03 d0 f2 a9 ff ff 80 02 a5 03 2b 6b 08 0b 08
>3a5858	c2 20 48 a9 46 08 5b 68 28 c2 30 a5 15 85 36 a5
>3a5868	17 85 38 a9 34 61 85 03 a9 3a 00 85 05 22 97 57
>3a5878	3a b0 22 22 f5 57 3a c2 20 18 a5 03 69 01 00 85
>3a5888	03 a5 05 69 00 00 85 05 e2 20 a7 03 d0 df c2 20
>3a5898	a9 ff ff 80 0d 22 f5 57 3a e2 20 a7 03 c2 20 29
>3a58a8	ff 00 2b 28 6b 08 8b 0b 08 c2 20 48 a9 46 08 5b
>3a58b8	68 28 e2 20 a9 00 8f b4 08 00 a5 31 c9 02 b0 16
>3a58c8	c9 01 90 20 c2 20 18 a5 0d 69 00 01 85 11 e2 20
>3a58d8	a5 0f 69 00 85 13 c2 20 a5 0d 85 32 e2 20 a5 0f
>3a58e8	85 34 80 12 c2 20 18 a5 32 69 00 01 85 11 e2 20
>3a58f8	a5 34 69 00 85 13 22 19 59 3a e2 20 a5 34 c5 13
>3a5908	90 f4 c2 20 a5 32 c5 11 90 ec 20 1b 02 2b ab 28
>3a5918	6b 08 0b e2 20 a9 41 20 18 00 a9 20 20 18 00 08
>3a5928	c2 20 48 a9 78 08 5b 68 28 c2 20 a5 00 85 18 e2
>3a5938	20 a5 02 85 1a 22 80 5c 3a a9 20 20 18 00 c2 20
>3a5948	18 a5 00 69 01 00 85 18 e2 20 a5 02 69 00 85 1a
>3a5958	e2 20 c2 10 a7 00 c9 c2 d0 0b 48 a7 18 49 ff 2f
>3a5968	94 08 00 80 0b c9 e2 d0 0c 48 a7 18 0f 94 08 00
>3a5978	8f 94 08 00 68 c2 20 29 ff 00 0a aa bf 1a 5e 3a
>3a5988	aa 22 fa 5b 3a e2 20 a7 00 aa bf 1c 60 3a 22 d6
>3a5998	61 3a 22 a7 59 3a 20 1b 02 20 32 02 2b 28 6b 08
>3a59a8	e2 20 48 29 3f 0a c2 10 aa 68 7c b5 59 e5 59 00
>3a59b8	5a 07 5a 2c 5a 33 5a 4e 5a 70 5a 81 5a be 5a c6
>3a59c8	5a d7 5a e8 5a ef 5a 14 5b 41 5b ad 5a 92 5a 5f
>3a59d8	5a 34 5b 3e 5b 52 5b 81 5b 2f 5b 92 5b a9 28 20
>3a59e8	18 00 22 a9 5b 3a a9 2c 20 18 00 a9 58 20 18 00
>3a59f8	a9 29 20 18 00 4c a3 5b 22 a9 5b 3a 4c a3 5b e2
>3a5a08	20 48 a9 23 20 18 00 68 29 c0 c9 00 f0 0f 4a 4a
>3a5a18	2f 94 08 00 d0 07 22 b3 5b 3a 4c a3 5b 22 a9 5b
>3a5a28	3a 4c a3 5b 22 b3 5b 3a 4c a3 5b a9 28 20 18 00
>3a5a38	22 a9 5b 3a a9 29 20 18 00 a9 2c 20 18 00 a9 59
>3a5a48	20 18 00 4c a3 5b 22 a9 5b 3a a9 2c 20 18 00 a9
>3a5a58	58 20 18 00 4c a3 5b 22 a9 5b 3a a9 2c 20 18 00
>3a5a68	a9 59 20 18 00 4c a3 5b 22 b3 5b 3a a9 2c 20 18
>3a5a78	00 a9 59 20 18 00 4c a3 5b 22 b3 5b 3a a9 2c 20
>3a5a88	18 00 a9 58 20 18 00 4c a3 5b a9 28 20 18 00 22
>3a5a98	b3 5b 3a a9 2c 20 18 00 a9 58 20 18 00 a9 29 20
>3a5aa8	18 00 4c a3 5b a9 28 20 18 00 22 a9 5b 3a a9 29
>3a5ab8	20 18 00 4c a3 5b a9 41 20 18 00 4c a7 5b 22 a9
>3a5ac8	5b 3a a9 2c 20 18 00 a9 53 20 18 00 4c a3 5b a9
>3a5ad8	5b 20 18 00 22 a9 5b 3a a9 5d 20 18 00 4c a3 5b
>3a5ae8	22 c1 5b 3a 4c a7 5b a9 28 20 18 00 22 a9 5b 3a
>3a5af8	a9 2c 20 18 00 a9 53 20 18 00 a9 29 20 18 00 a9
>3a5b08	2c 20 18 00 a9 59 20 18 00 4c a3 5b a9 5b 20 18
>3a5b18	00 22 a9 5b 3a a9 5d 20 18 00 a9 2c 20 18 00 a9
>3a5b28	59 20 18 00 4c a3 5b a0 02 00 80 03 a0 01 00 22
>3a5b38	27 5c 3a 4c a7 5b 4c a7 5b 22 c1 5b 3a a9 2c 20
>3a5b48	18 00 a9 58 20 18 00 4c a7 5b a9 23 20 18 00 8b
>3a5b58	a5 02 48 ab a6 00 e8 a0 01 00 22 2b 02 3a a9 2c
>3a5b68	20 18 00 a9 23 20 18 00 a6 00 a0 01 00 22 2b 02
>3a5b78	3a ab 22 d6 61 3a 4c a3 5b a9 28 20 18 00 22 b3
>3a5b88	5b 3a a9 29 20 18 00 4c a3 5b a9 5b 20 18 00 22
>3a5b98	b3 5b 3a a9 5d 20 18 00 4c a3 5b 22 d6 61 3a 28
>3a5ba8	6b 08 e2 20 a7 00 20 d2 02 28 6b 08 c2 30 a7 00
>3a5bb8	20 b8 02 22 d6 61 3a 28 6b 08 8b 0b c2 30 5a 08
>3a5bc8	c2 20 48 a9 78 08 5b 68 28 08 e2 20 48 a9 00 48
>3a5bd8	ab 68 28 e2 20 a0 00 00 a7 00 99 90 08 22 d6 61
>3a5be8	3a c8 c0 03 00 d0 f1 22 80 5c 3a c2 30 7a 2b ab
>3a5bf8	28 6b 08 8b e2 20 c2 10 08 e2 20 48 a9 3a 48 ab
>3a5c08	68 28 bd 00 00 20 18 00 e8 bd 00 00 20 18 00 e8
>3a5c18	bd 00 00 20 18 00 e8 a9 20 20 18 00 ab 28 6b 08
>3a5c28	0b 08 c2 20 48 a9 78 08 5b 68 28 e2 20 c0 02 00
>3a5c38	f0 14 a7 00 85 18 30 06 64 19 64 1a 80 1e a9 ff
>3a5c48	85 19 85 1a 80 16 a7 00 85 18 22 d6 61 3a a7 00
>3a5c58	85 19 30 04 64 1a 80 04 a9 ff 85 1a c2 20 38 a5
>3a5c68	00 65 18 85 18 e2 20 a5 02 65 1a 85 1a 22 80 5c
>3a5c78	3a 22 d6 61 3a 2b 28 6b 08 0b c2 20 48 08 c2 20
>3a5c88	48 a9 46 08 5b 68 28 e2 20 a5 4c 20 d2 02 e2 20
>3a5c98	a9 3a 20 18 00 c2 20 a5 4a 20 b8 02 68 2b 28 6b
>3a5ca8	4f 52 41 00 41 4e 44 00 45 4f 52 00 41 44 43 00
>3a5cb8	53 54 41 00 4c 44 41 00 43 4d 50 00 53 42 43 00
>3a5cc8	41 53 4c 00 52 4f 4c 00 4c 53 52 00 52 4f 52 00
>3a5cd8	53 54 58 00 4c 44 58 00 44 45 43 00 49 4e 43 00
>3a5ce8	42 49 54 00 4a 4d 50 00 53 54 59 00 4c 44 59 00
>3a5cf8	43 50 59 00 43 50 58 00 42 52 4b 00 4a 53 52 00
>3a5d08	52 54 49 00 52 54 53 00 50 48 50 00 50 4c 50 00
>3a5d18	50 48 41 00 50 4c 41 00 44 45 59 00 54 41 59 00
>3a5d28	49 4e 59 00 49 4e 58 00 43 4c 43 00 53 45 43 00
>3a5d38	43 4c 49 00 53 45 49 00 54 59 41 00 43 4c 56 00
>3a5d48	43 4c 44 00 53 45 44 00 54 58 41 00 54 58 53 00
>3a5d58	54 41 58 00 54 53 58 00 44 45 58 00 4e 4f 50 00
>3a5d68	42 50 4c 00 42 4d 49 00 42 56 43 00 42 56 53 00
>3a5d78	42 43 43 00 42 43 53 00 42 4e 45 00 42 45 51 00
>3a5d88	54 53 42 00 54 52 42 00 53 54 5a 00 42 52 41 00
>3a5d98	50 48 59 00 50 4c 59 00 50 48 58 00 50 4c 58 00
>3a5da8	50 48 44 00 50 4c 44 00 50 48 4b 00 52 54 4c 00
>3a5db8	50 48 42 00 50 4c 42 00 57 41 49 00 58 42 41 00
>3a5dc8	54 43 53 00 54 53 43 00 54 43 44 00 54 44 43 00
>3a5dd8	54 58 59 00 54 59 58 00 53 54 50 00 58 43 45 00
>3a5de8	43 4f 50 00 4a 53 4c 00 57 44 4d 00 50 45 52 00
>3a5df8	42 52 4c 00 52 45 50 00 53 45 50 00 4d 56 50 00
>3a5e08	4d 56 4e 00 50 45 49 00 50 45 41 00 4a 4d 4c 00
>3a5e18	00 00 00 5d a8 5c e8 5d a8 5c 88 5d a8 5c c8 5c
>3a5e28	a8 5c 10 5d a8 5c c8 5c a8 5d 88 5d a8 5c c8 5c
>3a5e38	a8 5c 68 5d a8 5c a8 5c a8 5c 8c 5d a8 5c c8 5c
>3a5e48	a8 5c 30 5d a8 5c e4 5c c8 5d 8c 5d a8 5c c8 5c
>3a5e58	a8 5c 04 5d ac 5c ec 5d ac 5c e8 5c ac 5c cc 5c
>3a5e68	ac 5c 14 5d ac 5c cc 5c ac 5d e8 5c ac 5c cc 5c
>3a5e78	ac 5c 6c 5d ac 5c ac 5c ac 5c e8 5c ac 5c cc 5c
>3a5e88	ac 5c 34 5d ac 5c e0 5c cc 5d e8 5c ac 5c cc 5c
>3a5e98	ac 5c 08 5d b0 5c f0 5d b0 5c 04 5e b0 5c d0 5c
>3a5ea8	b0 5c 18 5d b0 5c d0 5c b0 5d ec 5c b0 5c d0 5c
>3a5eb8	b0 5c 70 5d b0 5c b0 5c b0 5c 08 5e b0 5c d0 5c
>3a5ec8	b0 5c 38 5d b0 5c 98 5d d0 5d 14 5e b0 5c d0 5c
>3a5ed8	b0 5c 0c 5d b4 5c f4 5d b4 5c 90 5d b4 5c d4 5c
>3a5ee8	b4 5c 1c 5d b4 5c d4 5c b4 5d ec 5c b4 5c d4 5c
>3a5ef8	b4 5c 74 5d b4 5c b4 5c b4 5c 90 5d b4 5c d4 5c
>3a5f08	b4 5c 3c 5d b4 5c 9c 5d d4 5d ec 5c b4 5c d4 5c
>3a5f18	b4 5c 94 5d b8 5c f8 5d b8 5c f0 5c b8 5c d8 5c
>3a5f28	b8 5c 20 5d e8 5c 50 5d b8 5d f0 5c b8 5c d8 5c
>3a5f38	b8 5c 78 5d b8 5c b8 5c b8 5c f0 5c b8 5c d8 5c
>3a5f48	b8 5c 40 5d b8 5c 54 5d d8 5d 90 5d b8 5c 90 5d
>3a5f58	b8 5c f4 5c bc 5c dc 5c bc 5c f4 5c bc 5c dc 5c
>3a5f68	bc 5c 24 5d bc 5c 58 5d bc 5d f4 5c bc 5c dc 5c
>3a5f78	bc 5c 7c 5d bc 5c bc 5c bc 5c f4 5c bc 5c dc 5c
>3a5f88	bc 5c 44 5d bc 5c 5c 5d dc 5d f4 5c bc 5c dc 5c
>3a5f98	bc 5c f8 5c c0 5c fc 5d c0 5c f8 5c c0 5c e0 5c
>3a5fa8	c0 5c 28 5d c0 5c 60 5d c0 5d f8 5c c0 5c e0 5c
>3a5fb8	c0 5c 80 5d c0 5c c0 5c c0 5c 0c 5e c0 5c e0 5c
>3a5fc8	c0 5c 48 5d c0 5c a0 5d e0 5d 14 5e c0 5c e0 5c
>3a5fd8	c0 5c fc 5c c4 5c 00 5e c4 5c fc 5c c4 5c e4 5c
>3a5fe8	c4 5c 2c 5d c4 5c 64 5d c4 5d fc 5c c4 5c e4 5c
>3a5ff8	c4 5c 84 5d c4 5c c4 5c c4 5c 10 5e c4 5c e4 5c
>3a6008	c4 5c 4c 5d c4 5c a4 5d e4 5d 04 5d c4 5c e4 5c
>3a6018	c4 5c 00 00 13 00 02 09 01 01 01 0a 13 82 08 13
>3a6028	03 03 03 0b 12 04 0f 0c 01 05 05 0d 13 06 08 13
>3a6038	03 07 07 0e 03 00 0b 09 01 01 01 0a 13 82 08 13
>3a6048	03 03 03 0b 12 04 0f 0c 05 05 05 0d 13 06 08 13
>3a6058	07 07 07 0e 13 00 13 09 14 01 01 0a 13 82 08 13
>3a6068	03 03 03 0b 12 04 0f 0c 14 05 05 0d 13 06 13 13
>3a6078	0b 07 07 0b 13 00 16 09 01 01 01 0a 13 82 08 13
>3a6088	15 03 03 0b 12 04 0f 0c 05 05 05 0d 13 06 13 13
>3a6098	10 07 07 0e 12 00 16 09 01 01 01 0a 13 82 13 13
>3a60a8	03 03 03 0b 12 04 0f 0c 05 05 11 0d 13 06 13 13
>3a60b8	03 07 07 0e 82 00 42 09 01 01 01 0a 13 82 13 13
>3a60c8	03 03 03 0b 12 04 0f 0c 05 05 11 0d 13 06 13 13
>3a60d8	07 07 06 0e 42 00 02 09 01 01 01 0a 13 82 13 13
>3a60e8	03 03 03 0b 12 04 0f 0c 01 05 05 0d 13 06 13 13
>3a60f8	17 07 07 0e 42 00 02 09 01 01 01 0f 13 82 13 13
>3a6108	03 03 03 0b 12 04 0f 0c 03 05 05 0d 13 06 13 13
>3a6118	10 07 07 0e 01 01 01 02 01 01 02 02 00 01 01 03
>3a6128	01 01 03 01 02 01 01 00 02 02 02 02 41 00 08 64
>3a6138	64 3a 64 64 64 64 2c 58 00 0e 64 64 3a 64 64 64
>3a6148	64 00 0b 64 64 64 64 2c 58 00 07 64 64 64 64 2c
>3a6158	59 00 06 64 64 64 64 00 03 64 64 2c 58 00 05 64
>3a6168	64 2c 59 00 11 64 64 2c 53 00 09 64 64 00 01 23
>3a6178	64 64 64 64 00 c2 23 64 64 2c 23 64 64 00 14 23
>3a6188	64 64 00 02 28 64 64 2c 53 29 2c 59 00 0c 28 64
>3a6198	64 64 64 2c 58 29 00 10 28 64 64 64 64 29 00 10
>3a61a8	28 64 64 2c 58 29 00 00 28 64 64 29 2c 59 00 04
>3a61b8	28 64 64 29 00 0f 5b 64 64 64 64 5d 00 17 5b 64
>3a61c8	64 5d 2c 59 00 0d 5b 64 64 5d 00 0a 00 00 08 c2
>3a61d8	20 48 18 af 78 08 00 69 01 00 8f 78 08 00 e2 20
>3a61e8	af 7a 08 00 69 00 8f 7a 08 00 c2 20 68 28 6b 08
>3a61f8	c2 10 e2 20 da a2 08 00 0a b0 08 48 a9 30 20 18
>3a6208	00 80 06 48 a9 31 20 18 00 68 ca d0 eb fa 28 6b
>3a6218	08 c2 20 48 a9 46 08 5b 68 28 e2 20 a7 32 f0 0a
>3a6228	c9 20 d0 06 22 d6 61 3a 80 f2 6b 08 08 c2 20 48
>3a6238	a9 46 08 5b 68 28 22 d6 61 3a 22 18 62 3a c2 30
>3a6248	a5 31 c2 20 29 ff 00 0a 0a aa a5 32 95 0d a5 34
>3a6258	95 0f e2 20 a7 32 f0 14 c9 22 f0 06 22 d6 61 3a
>3a6268	80 f2 a9 00 87 32 22 d6 61 3a e6 31 28 6b 08 c2
>3a6278	20 48 a9 46 08 5b 68 28 e2 20 64 4a c2 20 64 50
>3a6288	64 52 e2 20 a7 32 c9 3a f0 0d 20 25 03 90 0e 22
>3a6298	0e 57 3a a9 01 85 4a 22 d6 61 3a 80 e5 a5 4a f0
>3a62a8	16 a5 31 c2 20 29 ff 00 0a 0a aa a5 50 95 0d a5
>3a62b8	52 95 0f e2 20 e6 31 6b e2 20 64 31 22 18 62 3a
>3a62c8	a7 32 f0 21 c9 22 d0 06 22 33 62 3a 80 0a 22 76
>3a62d8	62 3a a5 31 c9 09 b0 0d a7 32 f0 09 c9 20 f0 dc
>3a62e8	20 25 03 b0 d7 6b 08 0b 08 c2 20 48 a9 46 08 5b
>3a62f8	68 28 c2 10 e2 20 a2 31 00 74 00 ca d0 fb a9 00
>3a6308	85 02 85 34 c2 20 a9 00 4f 85 00 85 32 e2 20 22
>3a6318	18 62 3a c9 00 f0 38 c2 20 a5 32 85 08 e2 20 a5
>3a6328	34 85 0a a2 01 00 22 d6 61 3a a7 32 d0 06 86 0b
>3a6338	64 31 80 1b c9 20 f0 03 e8 80 eb 86 0b a9 00 87
>3a6348	32 22 d6 61 3a a7 08 c9 41 f0 07 22 c0 62 3a 2b
>3a6358	28 6b 22 18 62 3a a7 32 f0 f5 22 76 62 3a 22 18
>3a6368	62 3a a7 32 f0 e9 c2 20 a5 32 85 11 e2 20 a5 34
>3a6378	85 13 22 d6 61 3a a7 32 f0 26 c9 20 d0 f4 a9 00
>3a6388	87 32 e6 31 22 d6 61 3a 22 18 62 3a a7 32 f0 bf
>3a6398	c2 20 a5 32 85 15 e2 20 a5 34 85 17 e6 31 80 af
>3a63a8	e6 31 80 ab 08 c2 10 e2 20 a5 31 d0 0f a2 a2 64
>3a63b8	a9 3a 48 ab 20 a8 02 20 1b 02 80 61 c2 20 a5 0d
>3a63c8	8f 21 08 00 a5 0f 8f 23 08 00 20 01 46 e2 20 a5
>3a63d8	31 c9 01 d0 0f c2 20 a9 ff ff 8f 54 03 00 8f 56
>3a63e8	03 00 80 0e c2 20 a5 11 8f 54 03 00 a5 13 8f 56
>3a63f8	03 00 22 18 11 00 b0 25 e2 20 a2 c8 64 a9 3a 48
>3a6408	ab 20 a8 02 af 2e 03 00 20 d2 02 a9 20 20 18 00
>3a6418	af 20 03 00 20 d2 02 20 1b 02 20 1b 02 28 6b 8b
>3a6428	08 c2 10 e2 20 a5 31 c9 03 f0 0f a2 a2 64 a9 3a
>3a6438	48 ab 20 a8 02 20 1b 02 80 54 c2 20 a5 0d 8f 21
>3a6448	08 00 a5 0f 8f 23 08 00 20 01 46 a5 11 8f 50 03
>3a6458	00 a5 13 8f 52 03 00 a5 15 8f 58 03 00 a5 17 8f
>3a6468	5a 03 00 22 1c 11 00 b0 25 e2 20 a2 b2 64 a9 3a
>3a6478	48 ab 20 a8 02 af 2e 03 00 20 d2 02 a9 20 20 18
>3a6488	00 af 20 03 00 20 d2 02 20 1b 02 20 1b 02 28 ab
>3a6498	6b 5c bb 20 3a 6b 00 00 00 00 42 61 64 20 61 72
>3a64a8	67 75 6d 65 6e 74 73 0d 0d 00 55 6e 61 62 6c 65
>3a64b8	20 74 6f 20 73 61 76 65 20 66 69 6c 65 3a 20 00
>3a64c8	55 6e 61 62 6c 65 20 74 6f 20 6c 6f 61 64 20 66
>3a64d8	69 6c 65 3a 20 00 0d 20 20 50 43 20 20 20 20 20
>3a64e8	41 20 20 20 20 58 20 20 20 20 59 20 20 20 20 53
>3a64f8	50 20 20 20 44 42 52 20 44 50 20 20 20 4e 56 4d
>3a6508	58 44 49 5a 43 0d 00 41 43 44 46 47 4a 48 4c 4d
>3a6518	52 3b 53 54 56 57 58 3e 3f 00 18 fb 08 c2 20 48
>3a6528	a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28
>3a6538	c2 30 20 61 65 a9 ff fe 1b 08 e2 20 48 a9 3a 48
>3a6548	ab 68 28 a2 03 d2 20 a8 02 08 e2 20 48 a9 00 48
>3a6558	ab 68 28 4c bb 20 4c 5e 65 08 20 af 01 20 58 3c
>3a6568	28 60 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3a6578	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 1703 times (27248 bytes)...
>3acff8	00 00 00 00 00 00 00 00 30 31 32 33 34 35 36 37
>3ad008	38 39 41 42 43 44 45 46 2b 00 2d 00 2a 00 2f 00
>3ad018	4d 4f 44 00 5e 00 3c 00 3d 00 3e 00 4e 4f 54 00
>3ad028	41 4e 44 00 4f 52 00 28 00 29 00 52 45 4d 00 50
>3ad038	52 49 4e 54 00 4c 45 54 00 47 4f 54 4f 00 45 4e
>3ad048	44 00 49 46 00 54 48 45 4e 00 45 4c 53 45 00 47
>3ad058	4f 53 55 42 00 52 45 54 55 52 4e 00 46 4f 52 00
>3ad068	54 4f 00 53 54 45 50 00 4e 45 58 54 00 44 4f 00
>3ad078	4c 4f 4f 50 00 57 48 49 4c 45 00 55 4e 54 49 4c
>3ad088	00 45 58 49 54 00 43 4c 52 00 53 54 4f 50 00 50
>3ad098	4f 4b 45 00 50 4f 4b 45 57 00 50 4f 4b 45 4c 00
>3ad0a8	43 4c 53 00 52 45 41 44 00 44 41 54 41 00 52 45
>3ad0b8	53 54 4f 52 45 00 44 49 4d 00 43 41 4c 4c 00 3c
>3ad0c8	3d 00 3e 3d 00 3c 3e 00 2d 00 4c 45 4e 00 50 45
>3ad0d8	45 4b 00 50 45 45 4b 57 00 50 45 45 4b 4c 00 43
>3ad0e8	48 52 24 00 41 53 43 00 53 50 43 00 54 41 42 00
>3ad0f8	41 42 53 00 53 47 4e 00 48 45 58 24 00 44 45 43
>3ad108	00 53 54 52 24 00 56 41 4c 00 4c 45 46 54 24 00
>3ad118	52 49 47 48 54 24 00 4d 49 44 24 00 52 55 4e 00
>3ad128	4e 45 57 00 4c 4f 41 44 00 4c 49 53 54 00 44 49
>3ad138	52 00 42 4c 4f 41 44 00 42 52 55 4e 00 42 53 41
>3ad148	56 45 00 44 45 4c 00 53 41 56 45 00 52 45 4e 41
>3ad158	4d 45 00 4d 4f 4e 49 54 4f 52 00 47 45 54 00 49
>3ad168	4e 50 55 54 00 53 45 54 42 4f 52 44 45 52 00 54
>3ad178	45 58 54 43 4f 4c 4f 52 00 53 45 54 42 47 43 4f
>3ad188	4c 4f 52 00 53 45 54 44 41 54 45 00 47 45 54 44
>3ad198	41 54 45 24 00 53 45 54 54 49 4d 45 00 47 45 54
>3ad1a8	54 49 4d 45 24 00 47 52 41 50 48 49 43 53 00 53
>3ad1b8	45 54 43 4f 4c 4f 52 00 50 49 58 4d 41 50 00 43
>3ad1c8	4c 52 50 49 58 4d 41 50 00 50 4c 4f 54 00 4c 49
>3ad1d8	4e 45 00 46 49 4c 4c 00 53 50 52 49 54 45 00 53
>3ad1e8	50 52 49 54 45 41 54 00 53 50 52 49 54 45 53 48
>3ad1f8	4f 57 00 0d 52 45 41 44 59 0d 00 43 32 35 36 20
>3ad208	46 6f 65 6e 69 78 20 42 41 53 49 43 38 31 36 20
>3ad218	76 30 2e 31 2e 30 2d 61 6c 70 68 61 2b 32 38 0d
>3ad228	00
>3b0000					.align 256
.3b0000					CREDITS_TEXT
>3b0000	54 68 69 73 20 69 73 20		                .text "This is the credits screen!"
>3b0008	74 68 65 20 63 72 65 64 69 74 73 20 73 63 72 65
>3b0018	65 6e 21
>3b001b	20 20 20 20 20 20 20 20		                .fill 128 - len("This is the credits screen!"), $20
>3b0023	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 4 times (64 bytes)...
>3b0073	20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0080	49 20 77 6f 75 6c 64 20		                .text "I would like to thank the academy."
>3b0088	6c 69 6b 65 20 74 6f 20 74 68 61 6e 6b 20 74 68
>3b0098	65 20 61 63 61 64 65 6d 79 2e
>3b00a2	20 20 20 20 20 20 20 20		                .fill 128 - len("I would like to thank the academy."), $20
>3b00aa	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 4 times (64 bytes)...
>3b00fa	20 20 20 20 20 20
>3b0100					                .text ""
>3b0100	20 20 20 20 20 20 20 20		                .fill 128 - len(""), $20
>3b0108	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 6 times (96 bytes)...
>3b0178	20 20 20 20 20 20 20 20
>3b0180	50 72 65 73 73 20 61 6e		                .text "Press any key to go back..."
>3b0188	79 20 6b 65 79 20 74 6f 20 67 6f 20 62 61 63 6b
>3b0198	2e 2e 2e
>3b019b	20 20 20 20 20 20 20 20		                .fill 128 - len("Press any key to go back..."), $20
>3b01a3	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 4 times (64 bytes)...
>3b01f3	20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0200	20 20 20 20 20 20 20 20		                .fill 128 * 60,$20
>3b0208	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 478 times (7648 bytes)...
>3b1ff8	20 20 20 20 20 20 20 20
>3b2000					.align 256
>3b2000	f3 f3 f3 f3 f3 f3 f3 f3		CREDITS_COLOR   .fill 128 * 64, $F3
>3b2008	f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3
;	...repeated 510 times (8160 bytes)...
>3b3ff8	f3 f3 f3 f3 f3 f3 f3 f3

;******  End of listing
