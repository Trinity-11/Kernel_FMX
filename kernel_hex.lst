
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -D TARGET=2 --long-address --flat --intel-hex -o kernel.hex --list kernel_hex.lst --labels=kernel_hex.lbl src\kernel.asm
; Thu Sep 03 15:43:17 2020

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=2					TARGET=2

;******  Processing input file: src\kernel.asm

=1					TARGET_FLASH = 1              ; The code is being assembled for Flash
=2					TARGET_RAM = 2                ; The code is being assembled for RAM

;******  Processing file: src\macros_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\characters.asm

=$01					CHAR_CTRL_A = $01   ; CTRL-A (move to start of line)
=$03					CHAR_CTRL_C = $03   ; CTRL-C
=$05					CHAR_CTRL_E = $05   ; CTRL-E (move to end of line)
=$08					CHAR_BS = $08       ; Backspace (delete character to the left of the cursor)
=$09					CHAR_TAB = $09      ; TAB (moves cursor to next tabulated column)
=$0a					CHAR_LF = $0A       ; Line feed
=$0d					CHAR_CR = $0D       ; Carriage return
=$0f					CHAR_INS = $0F      ; Insert a space at the cursor
=$11					CHAR_UP = $11       ; Up arrow
=$1d					CHAR_RIGHT = $1D    ; Right arrow
=$20					CHAR_SP = $20       ; Space
=$91					CHAR_DOWN = $91     ; Down arrow
=$9d					CHAR_LEFT = $9D     ; Left arrow
=$7f					CHAR_DEL = $7F      ; Delete key (delete the character at the cursor)
=$81					CHAR_F1 = $81       ; Function keys
=$82					CHAR_F2 = $82
=$83					CHAR_F3 = $83
=$84					CHAR_F4 = $84
=$85					CHAR_F5 = $85
=$86					CHAR_F6 = $86
=$87					CHAR_F7 = $87
=$88					CHAR_F8 = $88
=$89					CHAR_F9 = $89
=$8a					CHAR_F10 = $8A
=$8b					CHAR_F11 = $8B
=$8c					CHAR_F12 = $8C

;******  Return to file: src\kernel.asm


;******  Processing file: src\simulator_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_inc.asm

=$000000				BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000				TMPPTR1          = $000000 ; 4 byte temporary pointer
=$000004				TMPPTR2          = $000004 ; 4 byte temporary pointer
=$000008				OPL2_ADDY_PTR_LO = $000008 ; THis Points towards the Instruments Database
=$000009				OPL2_ADDY_PTR_MD = $000009
=$00000a				OPL2_ADDY_PTR_HI = $00000A
=$00000c				SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f				COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011				COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013				LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=25
=$000015				LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017				CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a				CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c				CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e				CURCOLOR         = $00001E ;1 Byte Color of next character to be printed to the screen.
=$00001f				COLORPOS         = $00001F ;3 Byte address of cursor's position in the color matrix
=$000022				STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024				STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$000026				OPL2_OPERATOR    = $000026 ;
=$000027				OPL2_CHANNEL     = $000027 ;
=$000028				OPL2_REG_REGION  = $000028 ; Offset to the Group of Registers
=$00002a				OPL2_REG_OFFSET  = $00002A ; 2 Bytes (16Bits)
=$00002c				OPL2_IND_ADDY_LL = $00002C ; 2 Bytes Reserved (Only need 3)
=$00002e				OPL2_IND_ADDY_HL = $00002E ; 2 Bytes Reserved (Only need 3)
=$000030				OPL2_NOTE        = $000030 ; 1 Byte
=$000031				OPL2_OCTAVE      = $000031 ; 1 Byte
=$000032				OPL2_PARAMETER0  = $000032 ; 1 Byte - Key On/Feedback
=$000033				OPL2_PARAMETER1  = $000033 ; 1 Byte
=$000034				OPL2_PARAMETER2  = $000034 ; 1 Byte
=$000035				OPL2_PARAMETER3  = $000035 ; 1 Byte
=$000036				OPL2_LOOP        = $000036 ;
=$000036				OPL2_BLOCK       = $000036
=$000038				SDCARD_FILE_PTR  = $000038 ; 3 Bytes Pointer to Filename to open
=$00003c				SDCARD_BYTE_NUM  = $00003C ; 2Bytes
=$00003f				SDCARD_PRSNT_MNT = $00003F ; 1 Byte, Indicate that the SDCard is Present and that it is Mounted
=$000040				BM_CLEAR_SCRN_X  = $000040
=$000042				BM_CLEAR_SCRN_Y  = $000042
=$000040				RAD_STARTLINE    = $000040 ; 1 Byte
=$000041				RAD_PATTERN_IDX  = $000041 ; 1 Byte
=$000042				RAD_LINE         = $000042 ; 1 Byte
=$000043				RAD_LINENUMBER   = $000043 ; 1 Byte
=$000044				RAD_CHANNEL_NUM  = $000044 ; 1 Byte
=$000045				RAD_ISLASTCHAN   = $000045 ; 1 Byte
=$000046				RAD_Y_POINTER    = $000046 ; 2 Bytes
=$000048				RAD_TICK         = $000048
=$00004a				RAD_CHANNEL_DATA = $00004A ; 2 Bytes
=$00004c				RAD_CHANNE_EFFCT = $00004C
=$00004d				RAD_TEMP         = $00004D
=$000050				RAD_ADDR         = $000050 ; 3 bytes to avoid OPL2 errors.
=$000053				RAD_PATTRN       = $000053 ; 1 bytes - offset to patter
=$000054				RAD_PTN_DEST     = $000054 ; 3 bytes - where to write the pattern data
=$000057				RAD_CHANNEL      = $000057 ; 2 bytes - 0 to 8
=$000059				RAD_LAST_NOTE    = $000059 ; 1 if this is the last note
=$00005a				RAD_LINE_PTR     = $00005A ; 2 bytes - offset to memory location
=$000040				BMP_X_SIZE       = $000040 ; 2 Bytes
=$000042				BMP_Y_SIZE       = $000042 ; 2 Bytes
=$000044				BMP_PRSE_SRC_PTR = $000044 ; 3 Bytes
=$000048				BMP_PRSE_DST_PTR = $000048 ; 3 Bytes
=$00004c				BMP_COLOR_PALET  = $00004C ; 2 Bytes
=$00004e				SCRN_X_STRIDE    = $00004E ; 2 Bytes, Basically How many Pixel Accross in Bitmap Mode
=$000050				BMP_FILE_SIZE    = $000050 ; 4 Bytes
=$000054				BMP_POSITION_X   = $000054 ; 2 Bytes Where, the BMP will be position on the X Axis
=$000056				BMP_POSITION_Y   = $000056 ; 2 Bytes Where, the BMP will be position on the Y Axis
=$000058				BMP_PALET_CHOICE = $000058 ;
=$0000e0				MOUSE_PTR        = $0000E0
=$0000e1				MOUSE_POS_X_LO   = $0000E1
=$0000e2				MOUSE_POS_X_HI   = $0000E2
=$0000e3				MOUSE_POS_Y_LO   = $0000E3
=$0000e4				MOUSE_POS_Y_HI   = $0000E4
=$0000f0				USER_TEMP        = $0000F0 ;32 Bytes Temp space for user programs
=$000100				GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000140				INT_CONTROLLER   = $000140 ; $000140...$00015F Interrupt Controller
=$000160				TIMER_CONTROLLER = $000160 ; $000160...$00017F Timer0/Timer1/Timer2 Block
=$000160				TIMER_CTRL_REGLL = $000160 ;
=$000161				TIMER_CTRL_REGLH = $000161 ;
=$000162				TIMER_CTRL_REGHL = $000162 ;
=$000163				TIMER_CTRL_REGHH = $000163 ;
=$000240				CPU_REGISTERS    = $000240 ; Byte
=$000240				CPUPC            = $000240 ;2 Bytes Program Counter (PC)
=$000242				CPUPBR           = $000242 ;2 Bytes Program Bank Register (K)
=$000244				CPUA             = $000244 ;2 Bytes Accumulator (A)
=$000246				CPUX             = $000246 ;2 Bytes X Register (X)
=$000248				CPUY             = $000248 ;2 Bytes Y Register (Y)
=$00024a				CPUSTACK         = $00024A ;2 Bytes Stack Pointer (S)
=$00024c				CPUDP            = $00024C ;2 Bytes Direct Page Register (D)
=$00024e				CPUDBR           = $00024E ;1 Byte  Data Bank Register (B)
=$00024f				CPUFLAGS         = $00024F ;1 Byte  Flags (P)
=$000250				MONITOR_VARS     = $000250 ; Byte  MONITOR Variables. BASIC variables may overlap this space
=$000250				MCMDADDR         = $000250 ;3 Bytes Address of the current line of text being processed by the command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
=$000253				MCMP_TEXT        = $000253 ;3 Bytes Address of symbol being evaluated for COMPARE routine
=$000256				MCMP_LEN         = $000256 ;2 Bytes Length of symbol being evaluated for COMPARE routine
=$000258				MCMD             = $000258 ;3 Bytes Address of the current command/function string
=$00025b				MCMD_LEN         = $00025B ;2 Bytes Length of the current command/function string
=$00025d				MARG1            = $00025D ;4 Bytes First command argument. May be data or address, depending on command
=$000261				MARG2            = $000261 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000265				MARG3            = $000265 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000269				MARG4            = $000269 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$00026d				MARG5            = $00026D ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000271				MARG6            = $000271 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000275				MARG7            = $000275 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000279				MARG8            = $000279 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000300				LOADFILE_VARS    = $000300 ; Byte
=$000300				LOADFILE_NAME    = $000300 ;3 Bytes (addr) Name of file to load. Address in Data Page
=$000303				LOADFILE_LEN     = $000303 ;1 Byte  Length of filename. 0=Null Terminated
=$000304				LOADPBR          = $000304 ;1 Byte  First Program Bank of loaded file ($05 segment)
=$000305				LOADPC           = $000305 ;2 Bytes Start address of loaded file ($05 segment)
=$000307				LOADDBR          = $000307 ;1 Byte  First data bank of loaded file ($06 segment)
=$000308				LOADADDR         = $000308 ;2 Bytes FIrst data address of loaded file ($06 segment)
=$00030a				LOADFILE_TYPE    = $00030A ;3 Bytes (addr) File type string in loaded data file. Actual string data will be in Bank 1. Valid values are BIN, PRG, P16
=$00030d				BLOCK_LEN        = $00030D ;2 Bytes Length of block being loaded
=$00030f				BLOCK_ADDR       = $00030F ;2 Bytes (temp) Address of block being loaded
=$000311				BLOCK_BANK       = $000311 ;1 Byte  (temp) Bank of block being loaded
=$000312				BLOCK_COUNT      = $000312 ;2 Bytes (temp) Counter of bytes read as file is loaded
=$000300				FDC_DRIVE        = $000300 ;1 byte - The number of the selected drive
=$000301				FDC_HEAD         = $000301 ;1 byte - The head number (0 or 1)
=$000302				FDC_CYLINDER     = $000302 ;1 byte - The cylinder number
=$000303				FDC_SECTOR       = $000303 ;1 byte - The sector number
=$000304				FDC_SECTOR_SIZE  = $000304 ;1 byte - The sector size code (2 = 512)
=$000305				FDC_SECPERTRK    = $000305 ;1 byte - The number of sectors per track (18 for 1.44 MB floppy)
=$000306				FDC_ST0          = $000306 ;1 byte - Status Register 0
=$000307				FDC_ST1          = $000307 ;1 byte - Status Register 1
=$000308				FDC_ST2          = $000308 ;1 byte - Status Register 2
=$000309				FDC_ST3          = $000309 ;1 byte - Status Register 3
=$00030a				FDC_PCN          = $00030A ;1 byte - Present Cylinder Number
=$00030b				FDC_STATUS       = $00030B ;1 byte - Status of what we think is going on with the FDC:
=$00030c				DIVIDEND         = $00030C ;4 bytes - Dividend for 32-bit division
=$000310				DIVISOR          = $000310 ;4 bytes - Divisor for 32-bit division
=$000314				REMAINDER        = $000314 ;4 bytes - Remainder for 32-bit division
=$000320				SDOS_VARIABLES   = $000320
=$000320				BIOS_STATUS      = $000320      ; 1 byte - Status of any BIOS operation
=$000321				BIOS_DEV         = $000321      ; 1 byte - Block device number for block operations
=$000322				BIOS_LBA         = $000322      ; 4 bytes - Address of block to read/write (this is the physical block, w/o reference to partition)
=$000326				BIOS_BUFF_PTR    = $000326      ; 4 bytes - 24-bit pointer to memory for read/write operations
=$00032a				BIOS_FIFO_COUNT  = $00032A      ; 2 bytes - The number of bytes read on the last block read
=$00032c				BIOS_FLAGS       = $00032C      ; 1 byte - Flags for various BIOSy things:
=$00032d				BIOS_TIMER       = $00032D      ; 1 byte - the number of 1/60 ticks for a time out
=$00032e				DOS_STATUS       = $00032E      ; 1 byte - The error code describing any error with file access
=$000330				DOS_CLUS_ID      = $000330      ; 4 bytes - The cluster desired for a DOS operation
=$000338				DOS_DIR_PTR      = $000338      ; 4 bytes - Pointer to a directory entry (assumed to be within DOS_SECTOR)
=$00033c				DOS_BUFF_PTR     = $00033C      ; 4 bytes - A pointer for DOS cluster read/write operations
=$000340				DOS_FD_PTR       = $000340      ; 4 bytes - A pointer to a file descriptor
=$000344				DOS_FAT_LBA      = $000344      ; 4 bytes - The LBA for a sector of the FAT we need to read/write
=$000348				DOS_TEMP         = $000348      ; 4 bytes - Temporary storage for DOS operations
=$00034c				DOS_FILE_SIZE    = $00034C      ; 4 bytes - The size of a file
=$000350				DOS_SRC_PTR      = $000350      ; 4 bytes - Pointer for transferring data
=$000354				DOS_DST_PTR      = $000354      ; 4 bytes - Pointer for transferring data
=$000358				DOS_END_PTR      = $000358      ; 4 bytes - Pointer to the last byte to save
=$00035c				DOS_RUN_PTR      = $00035C      ; 4 bytes - Pointer for starting a loaded program
=$000360				DOS_RUN_PARAM    = $000360      ; 4 bytes - Pointer to the ASCIIZ string for arguments in loading a program
=$000364				DOS_STR1_PTR     = $000364      ; 4 bytes - pointer to a string
=$000368				DOS_STR2_PTR     = $000368      ; 4 bytes - pointer to a string
=$00036b				DOS_SCRATCH      = $00036B      ; 4 bytes - general purpose short term storage
=$000400				DOS_PATH_BUFF    = $000400      ; 256 bytes - A buffer for path names
=$000500				FDC_PARAMETERS   = $000500      ; 16 bytes - a buffer of parameter data for the FDC
=$000510				FDC_RESULTS      = $000510      ; 16 bytes - Buffer for results of FDC commands
=$000530				FDC_PARAM_NUM    = $000530      ; 1 byte - The number of parameters to send to the FDC (including command)
=$000532				FDC_RESULT_NUM   = $000532      ; 1 byte - The number of results expected
=$000533				FDC_EXPECT_DAT   = $000533      ; 1 byte - 0 = the command expects no data, otherwise expects data
=$000534				FDC_CMD_RETRY    = $000534      ; 1 byte - a retry counter for commands
=$000700				CURRUART         = $000700 ; 3-bytes: the base address of the current UART
=$000703				CHAN_OUT         = $000703 ; 1-byte: the number of the current output channel (for PUTC, etc.)
=$000704				CHAN_IN          = $000704 ; 1-byte: the number of the current input channel (for GETCH, etc.)
=$000705				TIMERFLAGS       = $000705 ; 1-byte: flags to indicate that one of the timer interupts has triggered
=$80					TIMER0TRIGGER    = $80
=$40					TIMER1TRIGGER    = $40
=$20					TIMER2TRIGGER    = $20
=$000f00				KEY_BUFFER       = $000F00 ; 64 Bytes keyboard buffer
=$0080					KEY_BUFFER_SIZE  = $0080   ;128 Bytes (constant) keyboard buffer length
=$000f7f				KEY_BUFFER_END   = $000F7F ;  1 Byte  Last byte of keyboard buffer
=$000f83				KEY_BUFFER_CMD   = $000F83 ;  1 Byte  Indicates the Command Process Status
=$000f84				COMMAND_SIZE_STR = $000F84 ;  1 Byte
=$000f86				COMMAND_COMP_TMP = $000F86 ;  2 Bytes
=$000f87				KEYBOARD_SC_FLG  = $000F87 ;  1 Bytes that indicate the Status of Left Shift, Left CTRL, Left ALT, Right Shift
=$000f88				KEYBOARD_SC_TMP  = $000F88 ;  1 Byte, Interrupt Save Scan Code while Processing
=$000f89				KEYBOARD_LOCKS   = $000F89 ;  1 Byte, the status of the various lock keys
=$000f8a				KEYFLAG          = $000F8A ;  1 Byte, flag to indicate if CTRL-C has been pressed
=$000f8b				KEY_BUFFER_RPOS  = $000F8B ;  2 Byte, position of the character to read from the KEY_BUFFER
=$000f8d				KEY_BUFFER_WPOS  = $000F8D ;  2 Byte, position of the character to write to the KEY_BUFFER
=$001000				KERNEL_JMP_BEGIN = $001000 ; Reserved for the Kernel jump table
=$001fff				KERNEL_JMP_END   = $001FFF
=$002000				TEST_BEGIN       = $002000 ;28672 Bytes Test/diagnostic code for prototype.
=$007fff				TEST_END         = $007FFF ;0 Byte
=$008000				STACK_BEGIN      = $008000 ;32512 Bytes The default beginning of stack space
=$00feff				STACK_END        = $00FEFF ;0 Byte  End of stack space. Everything below this is I/O space
=$00ff00				ISR_BEGIN        = $00FF00 ; Byte  Beginning of CPU vectors in Direct page
=$00ff00				HRESET           = $00FF00 ;16 Bytes Handle RESET asserted. Reboot computer and re-initialize the kernel.
=$00ff10				HCOP             = $00FF10 ;16 Bytes Handle the COP instruction. Program use; not used by OS
=$00ff20				HBRK             = $00FF20 ;16 Bytes Handle the BRK instruction. Returns to BASIC Ready prompt.
=$00ff30				HABORT           = $00FF30 ;16 Bytes Handle ABORT asserted. Return to Ready prompt with an error message.
=$00ff40				HNMI             = $00FF40 ;32 Bytes Handle NMI
=$00ff60				HIRQ             = $00FF60 ;32 Bytes Handle IRQ
=$00ff80				Unused_FF80      = $00FF80 ;End of direct page Interrrupt handlers
=$00ffe0				VECTORS_BEGIN    = $00FFE0 ;0 Byte  Interrupt vectors
=$00ffe0				JMP_READY        = $00FFE0 ;4 Bytes Jumps to ROM READY routine. Modified whenever alternate command interpreter is loaded.
=$00ffe4				VECTOR_COP       = $00FFE4 ;2 Bytes Native COP Interrupt vector
=$00ffe6				VECTOR_BRK       = $00FFE6 ;2 Bytes Native BRK Interrupt vector
=$00ffe8				VECTOR_ABORT     = $00FFE8 ;2 Bytes Native ABORT Interrupt vector
=$00ffea				VECTOR_NMI       = $00FFEA ;2 Bytes Native NMI Interrupt vector
=$00ffec				VECTOR_RESET     = $00FFEC ;2 Bytes Unused (Native RESET vector)
=$00ffee				VECTOR_IRQ       = $00FFEE ;2 Bytes Native IRQ Vector
=$00fff0				RETURN           = $00FFF0 ;4 Bytes RETURN key handler. Points to BASIC or MONITOR subroutine to execute when RETURN is pressed.
=$00fff4				VECTOR_ECOP      = $00FFF4 ;2 Bytes Emulation mode interrupt handler
=$00fff6				VECTOR_EBRK      = $00FFF6 ;2 Bytes Emulation mode interrupt handler
=$00fff8				VECTOR_EABORT    = $00FFF8 ;2 Bytes Emulation mode interrupt handler
=$00fffa				VECTOR_ENMI      = $00FFFA ;2 Bytes Emulation mode interrupt handler
=$00fffc				VECTOR_ERESET    = $00FFFC ;2 Bytes Emulation mode interrupt handler
=$00fffe				VECTOR_EIRQ      = $00FFFE ;2 Bytes Emulation mode interrupt handler
=$010000				VECTORS_END      = $010000 ;*End of vector space
=$00ffff				BANK0_END        = $00FFFF ;End of Bank 00 and Direct page

;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_data.asm

>380000	00 a0 af			                .long $AFA000       ; SCREENBEGIN, 3 bytes, Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>380003	4c 00				                .word 76            ; COLS_VISIBLE, 2 bytes, Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>380005	64 00				                .word 100           ; COLS_PER_LINE, 2 bytes, Columns in memory per screen line. A virtual line can be this long. Default=128
>380007	38 00				                .word 56            ; LINES_VISIBLE, 2 bytes, The number of rows visible on the screen. Default=25
>380009	40 00				                .word 64            ; LINES_MAX, 2 bytes, The number of rows in memory for the screen. Default=64
>38000b	00 a0 af			                .long $AFA000       ; CURSORPOS, 3 bytes, The next character written to the screen will be written in this location.
>38000e	00 00				                .word 0             ; CURSORX, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380010	00 00				                .word 0             ; CURSORY, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380012	0f				                .byte $0F           ; CURCOLOR, 2 bytes, Color of next character to be printed to the screen.
>380013	00				                .byte $00           ; CURATTR, 2 bytes, Attribute of next character to be printed to the screen.
>380014	00 80				                .word STACK_BEGIN   ; STACKBOT, 2 bytes, Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
>380016	ff fe				                .word STACK_END     ; STACKTOP, 2 bytes, Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.

;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_code.asm

.ff00	18		clc		RHRESET         CLC
.ff01	fb		xce		                XCE
.ff02	5c 00 10 38	jmp $381000	                JML BOOT
.ff10					RHCOP
.ff10	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff12	8b		phb		                PHB
.ff13	0b		phd		                PHD
.ff14	48		pha		                PHA
.ff15	da		phx		                PHX
.ff16	5a		phy		                PHY
.ff17	5c 08 10 38	jmp $381008	                JML BREAK
.ff20					RHBRK
.ff20	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff22	8b		phb		                PHB
.ff23	0b		phd		                PHD
.ff24	48		pha		                PHA
.ff25	da		phx		                PHX
.ff26	5a		phy		                PHY
.ff27	5c 08 10 38	jmp $381008	                JML BREAK
.ff30					RHABORT
.ff30	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff32	8b		phb		                PHB
.ff33	0b		phd		                PHD
.ff34	48		pha		                PHA
.ff35	da		phx		                PHX
.ff36	5a		phy		                PHY
.ff37	5c 08 10 38	jmp $381008	                JML BREAK
.ff40					 RHNMI
.ff40	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff42	8b		phb		                PHB
.ff43	0b		phd		                PHD
.ff44	48		pha		                PHA
.ff45	da		phx		                PHX
.ff46	5a		phy		                PHY
.ff47	22 ea 12 38	jsl $3812ea	                JSL NMI_HANDLER
.ff4b	7a		ply		                PLY
.ff4c	fa		plx		                PLX
.ff4d	68		pla		                PLA
.ff4e	2b		pld		                PLD
.ff4f	ab		plb		                PLB
.ff50	40		rti		                RTI
.ff60					RHIRQ
.ff60	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff62	8b		phb		                PHB
.ff63	0b		phd		                PHD
.ff64	48		pha		                PHA
.ff65	da		phx		                PHX
.ff66	5a		phy		                PHY
.ff67	22 3c 11 38	jsl $38113c	                JSL IRQ_HANDLER
.ff6b	7a		ply		                PLY
.ff6c	fa		plx		                PLX
.ff6d	68		pla		                PLA
.ff6e	2b		pld		                PLD
.ff6f	ab		plb		                PLB
.ff70	40		rti		                RTI
.ffe0	5c 04 00 3a	jmp $3a0004	JUMP_READY      JML MONITOR    ; Kernel READY routine. Rewrite this address to jump to a custom kernel.
>ffe4	10 ff				RVECTOR_COP     .addr HCOP     ; FFE4
>ffe6	20 ff				RVECTOR_BRK     .addr HBRK     ; FFE6
>ffe8	30 ff				RVECTOR_ABORT   .addr HABORT   ; FFE8
>ffea	40 ff				RVECTOR_NMI     .addr HNMI     ; FFEA
>ffec	00 00				                .word $0000    ; FFEC
>ffee	60 ff				RVECTOR_IRQ     .addr HIRQ    ; FFEE
.fff0	5c 05 07 39	jmp $390705	RRETURN         JML IRETURN
>fff4	10 ff				RVECTOR_ECOP    .addr HCOP     ; FFF4
>fff6	20 ff				RVECTOR_EBRK    .addr HBRK     ; FFF6
>fff8	30 ff				RVECTOR_EABORT  .addr HABORT   ; FFF8
>fffa	40 ff				RVECTOR_ENMI    .addr HNMI     ; FFFA
>fffc	00 ff				RVECTOR_ERESET  .addr HRESET   ; FFFC
>fffe	60 ff				RVECTOR_EIRQ    .addr HIRQ     ; FFFE

;******  Return to file: src\kernel.asm


;******  Processing file: src\Math_def.asm

=$000100				UNSIGNED_MULT_A_LO  = $000100
=$000101				UNSIGNED_MULT_A_HI  = $000101
=$000102				UNSIGNED_MULT_B_LO  = $000102
=$000103				UNSIGNED_MULT_B_HI  = $000103
=$000104				UNSIGNED_MULT_AL_LO = $000104
=$000105				UNSIGNED_MULT_AL_HI = $000105
=$000106				UNSIGNED_MULT_AH_LO = $000106
=$000107				UNSIGNED_MULT_AH_HI = $000107
=$000108				SIGNED_MULT_A_LO    = $000108
=$000109				SIGNED_MULT_A_HI    = $000109
=$00010a				SIGNED_MULT_B_LO    = $00010A
=$00010b				SIGNED_MULT_B_HI    = $00010B
=$00010c				SIGNED_MULT_AL_LO   = $00010C
=$00010d				SIGNED_MULT_AL_HI   = $00010D
=$00010e				SIGNED_MULT_AH_LO   = $00010E
=$00010f				SIGNED_MULT_AH_HI   = $00010F
=$000110				UNSIGNED_DIV_DEM_LO = $000110
=$000111				UNSIGNED_DIV_DEM_HI = $000111
=$000112				UNSIGNED_DIV_NUM_LO = $000112
=$000113				UNSIGNED_DIV_NUM_HI = $000113
=$000114				UNSIGNED_DIV_QUO_LO = $000114
=$000115				UNSIGNED_DIV_QUO_HI = $000115
=$000116				UNSIGNED_DIV_REM_LO = $000116
=$000117				UNSIGNED_DIV_REM_HI = $000117
=$000118				SIGNED_DIV_DEM_LO   = $000118
=$000119				SIGNED_DIV_DEM_HI   = $000119
=$00011a				SIGNED_DIV_NUM_LO   = $00011A
=$00011b				SIGNED_DIV_NUM_HI   = $00011B
=$00011c				SIGNED_DIV_QUO_LO   = $00011C
=$00011d				SIGNED_DIV_QUO_HI   = $00011D
=$00011e				SIGNED_DIV_REM_LO   = $00011E
=$00011f				SIGNED_DIV_REM_HI   = $00011F
=$000120				ADDER32_A_LL        = $000120
=$000121				ADDER32_A_LH        = $000121
=$000122				ADDER32_A_HL        = $000122
=$000123				ADDER32_A_HH        = $000123
=$000124				ADDER32_B_LL        = $000124
=$000125				ADDER32_B_LH        = $000125
=$000126				ADDER32_B_HL        = $000126
=$000127				ADDER32_B_HH        = $000127
=$000128				ADDER32_R_LL        = $000128
=$000129				ADDER32_R_LH        = $000129
=$00012a				ADDER32_R_HL        = $00012A
=$00012b				ADDER32_R_HH        = $00012B

;******  Return to file: src\kernel.asm


;******  Processing file: src\interrupt_def.asm

=$000140				INT_PENDING_REG0 = $000140 ;
=$000141				INT_PENDING_REG1 = $000141 ;
=$000142				INT_PENDING_REG2 = $000142 ;
=$000143				INT_PENDING_REG3 = $000143 ; FMX Model
=$000144				INT_POL_REG0     = $000144 ;
=$000145				INT_POL_REG1     = $000145 ;
=$000146				INT_POL_REG2     = $000146 ;
=$000147				INT_POL_REG7     = $000147 ; FMX Model
=$000148				INT_EDGE_REG0    = $000148 ;
=$000149				INT_EDGE_REG1    = $000149 ;
=$00014a				INT_EDGE_REG2    = $00014A ;
=$00014b				INT_EDGE_REG3    = $00014B ; FMX Model
=$00014c				INT_MASK_REG0    = $00014C ;
=$00014d				INT_MASK_REG1    = $00014D ;
=$00014e				INT_MASK_REG2    = $00014E ;
=$00014f				INT_MASK_REG3    = $00014F ; FMX Model
=$01					FNX0_INT00_SOF        = $01  ;Start of Frame @ 60FPS
=$02					FNX0_INT01_SOL        = $02  ;Start of Line (Programmable)
=$04					FNX0_INT02_TMR0       = $04  ;Timer 0 Interrupt
=$08					FNX0_INT03_TMR1       = $08  ;Timer 1 Interrupt
=$10					FNX0_INT04_TMR2       = $10  ;Timer 2 Interrupt
=$20					FNX0_INT05_RTC        = $20  ;Real-Time Clock Interrupt
=$40					FNX0_INT06_FDC        = $40  ;Floppy Disk Controller
=$80					FNX0_INT07_MOUSE      = $80  ; Mouse Interrupt (INT12 in SuperIO IOspace)
=$01					FNX1_INT00_KBD        = $01  ;Keyboard Interrupt
=$02					FNX1_INT01_SC0        = $02  ;VICKY_II (INT2) Sprite 2 Sprite Collision
=$04					FNX1_INT02_SC1        = $04  ;VICKY_II (INT3) Sprite 2 Tiles Collision
=$08					FNX1_INT03_COM2       = $08  ;Serial Port 2
=$10					FNX1_INT04_COM1       = $10  ;Serial Port 1
=$20					FNX1_INT05_MPU401     = $20  ;Midi Controller Interrupt
=$40					FNX1_INT06_LPT        = $40  ;Parallel Port
=$80					FNX1_INT07_SDCARD     = $80  ;SD Card Controller Interrupt (CH376S)
=$01					FNX2_INT00_OPL3       = $01  ;OPl3
=$02					FNX2_INT01_GABE_INT0  = $02  ;GABE (INT0) - TBD
=$04					FNX2_INT02_GABE_INT1  = $04  ;GABE (INT1) - TBD
=$08					FNX2_INT03_SDMA       = $08  ;VICKY_II (INT4)
=$10					FNX2_INT04_VDMA       = $10  ;VICKY_II (INT5)
=$20					FNX2_INT05_GABE_INT2  = $20  ;GABE (INT2) - TBD
=$40					FNX2_INT06_EXT        = $40  ;External Expansion
=$80					FNX2_INT07_SDCARD_INS = $80  ; SDCARD Insertion
=$01					FNX3_INT00_OPN2       = $01  ;OPN2
=$02					FNX3_INT01_OPM        = $02  ;OPM
=$04					FNX3_INT02_IDE        = $04  ;HDD IDE INTERRUPT
=$08					FNX3_INT03_TBD        = $08  ;TBD
=$10					FNX3_INT04_TBD        = $10  ;TBD
=$20					FNX3_INT05_TBD        = $20  ;GABE (INT2) - TBD
=$40					FNX3_INT06_TBD        = $40  ;External Expansion
=$80					FNX3_INT07_TBD        = $80  ; SDCARD Insertion

;******  Return to file: src\kernel.asm


;******  Processing file: src\dram_inc.asm

=$afa000				SCREEN_PAGE0     = $AFA000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
=$afc000				SCREEN_PAGE1     = $AFC000 ;8192 Bytes Additional page of display RAM. This can be used for page flipping or to handle multiple edit buffers.
=$b00000				SCREEN_END       = $B00000 ;End of display memory

;******  Return to file: src\kernel.asm


;******  Processing file: src\vicky_ii_def.asm

=$af0000				MASTER_CTRL_REG_L	      = $AF0000
=$01					Mstr_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$02					Mstr_Ctrl_Text_Overlay  = $02       ; Enable the Overlay of the text mode on top of Graphic Mode (the Background Color is ignored)
=$04					Mstr_Ctrl_Graph_Mode_En = $04       ; Enable the Graphic Mode
=$08					Mstr_Ctrl_Bitmap_En     = $08       ; Enable the Bitmap Module In Vicky
=$10					Mstr_Ctrl_TileMap_En    = $10       ; Enable the Tile Module in Vicky
=$20					Mstr_Ctrl_Sprite_En     = $20       ; Enable the Sprite Module in Vicky
=$40					Mstr_Ctrl_GAMMA_En      = $40       ; this Enable the GAMMA correction - The Analog and DVI have different color value, the GAMMA is great to correct the difference
=$80					Mstr_Ctrl_Disable_Vid   = $80       ; This will disable the Scanning of the Video hence giving 100% bandwith to the CPU
=$af0001				MASTER_CTRL_REG_H       = $AF0001
=$01					Mstr_Ctrl_Video_Mode0   = $01       ; 0 - 640x480 (Clock @ 25.175Mhz), 1 - 800x600 (Clock @ 40Mhz)
=$02					Mstr_Ctrl_Video_Mode1   = $02       ; 0 - No Pixel Doubling, 1- Pixel Doubling (Reduce the Pixel Resolution by 2)
=$af0002				VKY_RESERVED_00         = $AF0002
=$af0003				VKY_RESERVED_01         = $AF0003
=$01					Border_Ctrl_Enable      = $01
=$af0004				BORDER_CTRL_REG         = $AF0004 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$af0005				BORDER_COLOR_B          = $AF0005
=$af0006				BORDER_COLOR_G          = $AF0006
=$af0007				BORDER_COLOR_R          = $AF0007
=$af0008				BORDER_X_SIZE           = $AF0008; X-  Values: 0 - 32 (Default: 32)
=$af0009				BORDER_Y_SIZE           = $AF0009; Y- Values 0 -32 (Default: 32)
=$af000d				BACKGROUND_COLOR_B      = $AF000D ; When in Graphic Mode, if a pixel is "0" then the Background pixel is chosen
=$af000e				BACKGROUND_COLOR_G      = $AF000E
=$af000f				BACKGROUND_COLOR_R      = $AF000F ;
=$af0010				VKY_TXT_CURSOR_CTRL_REG = $AF0010   ;[0]  Enable Text Mode
=$01					Vky_Cursor_Enable       = $01
=$02					Vky_Cursor_Flash_Rate0  = $02
=$04					Vky_Cursor_Flash_Rate1  = $04
=$08					Vky_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10					Vky_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$af0011				VKY_TXT_START_ADD_PTR   = $AF0011   ; This is an offset to change the Starting address of the Text Mode Buffer (in x)
=$af0012				VKY_TXT_CURSOR_CHAR_REG = $AF0012
=$af0013				VKY_TXT_CURSOR_COLR_REG = $AF0013
=$af0014				VKY_TXT_CURSOR_X_REG_L  = $AF0014
=$af0015				VKY_TXT_CURSOR_X_REG_H  = $AF0015
=$af0016				VKY_TXT_CURSOR_Y_REG_L  = $AF0016
=$af0017				VKY_TXT_CURSOR_Y_REG_H  = $AF0017
=$af001b				VKY_LINE_IRQ_CTRL_REG   = $AF001B ;[0] - Enable Line 0, [1] -Enable Line 1
=$af001c				VKY_LINE0_CMP_VALUE_LO  = $AF001C ;Write Only [7:0]
=$af001d				VKY_LINE0_CMP_VALUE_HI  = $AF001D ;Write Only [3:0]
=$af001e				VKY_LINE1_CMP_VALUE_LO  = $AF001E ;Write Only [7:0]
=$af001f				VKY_LINE1_CMP_VALUE_HI  = $AF001F ;Write Only [3:0]
=$af001c				VKY_INFO_CHIP_NUM_L     = $AF001C
=$af001d				VKY_INFO_CHIP_NUM_H     = $AF001D
=$af001e				VKY_INFO_CHIP_VER_L     = $AF001E
=$af001f				VKY_INFO_CHIP_VER_H     = $AF001F
=$af0500				MOUSE_PTR_GRAP0_START    = $AF0500 ; 16 x 16 = 256 Pixels (Grey Scale) 0 = Transparent, 1 = Black , 255 = White
=$af05ff				MOUSE_PTR_GRAP0_END      = $AF05FF ; Pointer 0
=$af0600				MOUSE_PTR_GRAP1_START    = $AF0600 ;
=$af06ff				MOUSE_PTR_GRAP1_END      = $AF06FF ; Pointer 1
=$af0700				MOUSE_PTR_CTRL_REG_L    = $AF0700 ; Bit[0] Enable, Bit[1] = 0  ( 0 = Pointer0, 1 = Pointer1)
=$af0701				MOUSE_PTR_CTRL_REG_H    = $AF0701 ;
=$af0702				MOUSE_PTR_X_POS_L       = $AF0702 ; X Position (0 - 639) (Can only read now) Writing will have no effect
=$af0703				MOUSE_PTR_X_POS_H       = $AF0703 ;
=$af0704				MOUSE_PTR_Y_POS_L       = $AF0704 ; Y Position (0 - 479) (Can only read now) Writing will have no effect
=$af0705				MOUSE_PTR_Y_POS_H       = $AF0705 ;
=$af0706				MOUSE_PTR_BYTE0         = $AF0706 ; Byte 0 of Mouse Packet (you must write 3 Bytes)
=$af0707				MOUSE_PTR_BYTE1         = $AF0707 ; Byte 1 of Mouse Packet (if you don't, then )
=$af0708				MOUSE_PTR_BYTE2         = $AF0708 ; Byte 2 of Mouse Packet (state Machine will be jammed in 1 state)
=$af070b				C256F_MODEL_MAJOR       = $AF070B ;
=$af070c				C256F_MODEL_MINOR       = $AF070C ;
=$af070d				FPGA_DOR                = $AF070D ;
=$af070e				FPGA_MOR                = $AF070E ;
=$af070f				FPGA_YOR                = $AF070F ;
=$af1f40				FG_CHAR_LUT_PTR         = $AF1F40
=$af1f80				BG_CHAR_LUT_PTR		    = $AF1F80
=$af2000				GRPH_LUT0_PTR		    = $AF2000
=$af2400				GRPH_LUT1_PTR		    = $AF2400
=$af2800				GRPH_LUT2_PTR		    = $AF2800
=$af2c00				GRPH_LUT3_PTR		    = $AF2C00
=$af3000				GRPH_LUT4_PTR		    = $AF3000
=$af3400				GRPH_LUT5_PTR		    = $AF3400
=$af3800				GRPH_LUT6_PTR		    = $AF3800
=$af3c00				GRPH_LUT7_PTR		    = $AF3C00
=$af4000				GAMMA_B_LUT_PTR		    = $AF4000
=$af4100				GAMMA_G_LUT_PTR		    = $AF4100
=$af4200				GAMMA_R_LUT_PTR		    = $AF4200
=$af5000				TILE_MAP0       		= $AF5000     ;$AF5000 - $AF57FF
=$af5800				TILE_MAP1               = $AF5800     ;$AF5800 - $AF5FFF
=$af6000				TILE_MAP2               = $AF6000     ;$AF6000 - $AF67FF
=$af6800				TILE_MAP3               = $AF6800     ;$AF6800 - $AF6FFF
=$af8000				FONT_MEMORY_BANK0       = $AF8000     ;$AF8000 - $AF87FF
=$af8800				FONT_MEMORY_BANK1       = $AF8800     ;$AF8800 - $AF8FFF
=$afa000				CS_TEXT_MEM_PTR         = $AFA000
=$afc000				CS_COLOR_MEM_PTR        = $AFC000
=$afe000				BTX_START               = $AFE000     ; BEATRIX Registers
=$afffff				BTX_END                 = $AFFFFF

;******  Processing file: src\VKYII_CFP9553_BITMAP_def.asm

=$01					BM_Enable             = $01
=$00					BM_LUT0               = $00 ;
=$02					BM_LUT1               = $02 ;
=$04					BM_LUT2               = $04 ;
=$06					BM_LUT3               = $06 ;
=$08					BM_LUT4               = $08 ;
=$0a					BM_LUT5               = $0A ;
=$0c					BM_LUT6               = $0C ;
=$0e					BM_LUT7               = $0E ;
=$af0100				BM0_CONTROL_REG     = $AF0100
=$af0101				BM0_START_ADDY_L    = $AF0101
=$af0102				BM0_START_ADDY_M    = $AF0102
=$af0103				BM0_START_ADDY_H    = $AF0103
=$af0104				BM0_X_OFFSET        = $AF0104   ; Not Implemented
=$af0105				BM0_Y_OFFSET        = $AF0105   ; Not Implemented
=$af0106				BM0_RESERVED_6      = $AF0106
=$af0107				BM0_RESERVED_7      = $AF0107
=$af0108				BM1_CONTROL_REG     = $AF0108
=$af0109				BM1_START_ADDY_L    = $AF0109
=$af010a				BM1_START_ADDY_M    = $AF010A
=$af010b				BM1_START_ADDY_H    = $AF010B
=$af010c				BM1_X_OFFSET        = $AF010C   ; Not Implemented
=$af010d				BM1_Y_OFFSET        = $AF010D   ; Not Implemented
=$af010e				BM1_RESERVED_6      = $AF010E
=$af010f				BM1_RESERVED_7      = $AF010F

;******  Return to file: src\vicky_ii_def.asm


;******  Processing file: src\VKYII_CFP9553_TILEMAP_def.asm

=$01					TILE_Enable             = $01
=$af0200				TL0_CONTROL_REG         = $AF0200       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0201				TL0_START_ADDY_L        = $AF0201       ; Not USed right now - Starting Address to where is the MAP
=$af0202				TL0_START_ADDY_M        = $AF0202
=$af0203				TL0_START_ADDY_H        = $AF0203
=$af0204				TL0_TOTAL_X_SIZE_L      = $AF0204       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0205				TL0_TOTAL_X_SIZE_H      = $AF0205
=$af0206				TL0_TOTAL_Y_SIZE_L      = $AF0206       ; Size of the Map in Y Tile Count [9:0]
=$af0207				TL0_TOTAL_Y_SIZE_H      = $AF0207
=$af0208				TL0_WINDOW_X_POS_L      = $AF0208       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0209				TL0_WINDOW_X_POS_H      = $AF0209       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af020a				TL0_WINDOW_Y_POS_L      = $AF020A       ; Top Left Corner Position of the TileMAp Window in Y
=$af020b				TL0_WINDOW_Y_POS_H      = $AF020B       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af020c				TL1_CONTROL_REG         = $AF020C       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af020d				TL1_START_ADDY_L        = $AF020D       ; Not USed right now - Starting Address to where is the MAP
=$af020e				TL1_START_ADDY_M        = $AF020E
=$af020f				TL1_START_ADDY_H        = $AF020F
=$af0210				TL1_TOTAL_X_SIZE_L      = $AF0210       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0211				TL1_TOTAL_X_SIZE_H      = $AF0211
=$af0212				TL1_TOTAL_Y_SIZE_L      = $AF0212       ; Size of the Map in Y Tile Count [9:0]
=$af0213				TL1_TOTAL_Y_SIZE_H      = $AF0213
=$af0214				TL1_WINDOW_X_POS_L      = $AF0214       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0215				TL1_WINDOW_X_POS_H      = $AF0215       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0216				TL1_WINDOW_Y_POS_L      = $AF0216       ; Top Left Corner Position of the TileMAp Window in Y
=$af0217				TL1_WINDOW_Y_POS_H      = $AF0217       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0218				TL2_CONTROL_REG         = $AF0218       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0219				TL2_START_ADDY_L        = $AF0219       ; Not USed right now - Starting Address to where is the MAP
=$af021a				TL2_START_ADDY_M        = $AF021A
=$af021b				TL2_START_ADDY_H        = $AF021B
=$af021c				TL2_TOTAL_X_SIZE_L      = $AF021C       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af021d				TL2_TOTAL_X_SIZE_H      = $AF021D
=$af021e				TL2_TOTAL_Y_SIZE_L      = $AF021E       ; Size of the Map in Y Tile Count [9:0]
=$af021f				TL2_TOTAL_Y_SIZE_H      = $AF021F
=$af0220				TL2_WINDOW_X_POS_L      = $AF0220       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0221				TL2_WINDOW_X_POS_H      = $AF0221       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0222				TL2_WINDOW_Y_POS_L      = $AF0222       ; Top Left Corner Position of the TileMAp Window in Y
=$af0223				TL2_WINDOW_Y_POS_H      = $AF0223       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0224				TL3_CONTROL_REG         = $AF0224       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0225				TL3_START_ADDY_L        = $AF0225       ; Not USed right now - Starting Address to where is the MAP
=$af0226				TL3_START_ADDY_M        = $AF0226
=$af0227				TL3_START_ADDY_H        = $AF0227
=$af0228				TL3_TOTAL_X_SIZE_L      = $AF0228       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0229				TL3_TOTAL_X_SIZE_H      = $AF0229
=$af022a				TL3_TOTAL_Y_SIZE_L      = $AF022A       ; Size of the Map in Y Tile Count [9:0]
=$af022b				TL3_TOTAL_Y_SIZE_H      = $AF022B
=$af022c				TL3_WINDOW_X_POS_L      = $AF022C       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af022d				TL3_WINDOW_X_POS_H      = $AF022D       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af022e				TL3_WINDOW_Y_POS_L      = $AF022E       ; Top Left Corner Position of the TileMAp Window in Y
=$af022f				TL3_WINDOW_Y_POS_H      = $AF022F       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0280				TILESET0_ADDY_L         = $AF0280   ; Pointer to Tileset 0 [21:0]
=$af0281				TILESET0_ADDY_M         = $AF0281
=$af0282				TILESET0_ADDY_H         = $AF0282
=$af0283				TILESET0_ADDY_CFG       = $AF0283   ; [3] - TileStride256x256 [2:0] LUT
=$af0284				TILESET1_ADDY_L         = $AF0284
=$af0285				TILESET1_ADDY_M         = $AF0285
=$af0286				TILESET1_ADDY_H         = $AF0286
=$af0287				TILESET1_ADDY_CFG       = $AF0287
=$af0288				TILESET2_ADDY_L         = $AF0288
=$af0289				TILESET2_ADDY_M         = $AF0289
=$af028a				TILESET2_ADDY_H         = $AF028A
=$af028b				TILESET2_ADDY_CFG       = $AF028B
=$af028c				TILESET3_ADDY_L         = $AF028C
=$af028d				TILESET3_ADDY_M         = $AF028D
=$af028e				TILESET3_ADDY_H         = $AF028E
=$af028f				TILESET3_ADDY_CFG       = $AF028F
=$af0290				TILESET4_ADDY_L         = $AF0290
=$af0291				TILESET4_ADDY_M         = $AF0291
=$af0292				TILESET4_ADDY_H         = $AF0292
=$af0293				TILESET4_ADDY_CFG       = $AF0293
=$af0294				TILESET5_ADDY_L         = $AF0294
=$af0295				TILESET5_ADDY_M         = $AF0295
=$af0296				TILESET5_ADDY_H         = $AF0296
=$af0297				TILESET5_ADDY_CFG       = $AF0297
=$af0298				TILESET6_ADDY_L         = $AF0298
=$af0299				TILESET6_ADDY_M         = $AF0299
=$af029a				TILESET6_ADDY_H         = $AF029A
=$af029b				TILESET6_ADDY_CFG       = $AF029B
=$af029c				TILESET7_ADDY_L         = $AF029C
=$af029d				TILESET7_ADDY_M         = $AF029D
=$af029e				TILESET7_ADDY_H         = $AF029E
=$af029f				TILESET7_ADDY_CFG       = $AF029F

;******  Return to file: src\vicky_ii_def.asm


;******  Processing file: src\VKYII_CFP9553_VDMA_def.asm

=$af0400				VDMA_CONTROL_REG        = $AF0400
=$01					VDMA_CTRL_Enable        = $01
=$02					VDMA_CTRL_1D_2D         = $02       ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04					VDMA_CTRL_TRF_Fill      = $04       ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08					VDMA_CTRL_Int_Enable    = $08       ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10					VDMA_CTRL_SysRAM_Src    = $10       ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20					VDMA_CTRL_SysRAM_Dst    = $20       ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$80					VDMA_CTRL_Start_TRF     = $80       ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$00					VDMA_XFER_VRAM2VRAM = $00           ; VRAM -> VRAM transfer
=$01					VDMA_XFER_SRAM2VRAM = $01           ; SRAM -> VRAM transfer
=$02					VDMA_XFER_VRAM2SRAM = $02           ; VRAM -> SRAM transfer
=$af0401				VDMA_BYTE_2_WRITE       = $AF0401   ; Write Only - Byte to Write in the Fill Function
=$af0401				VDMA_STATUS_REG         = $AF0401   ; Read only
=$01					VDMA_STAT_Size_Err      = $01       ; If Set to 1, Overall Size is Invalid
=$02					VDMA_STAT_Dst_Add_Err   = $02       ; If Set to 1, Destination Address Invalid
=$04					VDMA_STAT_Src_Add_Err   = $04       ; If Set to 1, Source Address Invalid
=$80					VDMA_STAT_VDMA_IPS      = $80       ; If Set to 1, VDMA Transfer in Progress (this Inhibit CPU Access to Mem)
=$af0402				VDMA_SRC_ADDY_L         = $AF0402   ; Pointer to the Source of the Data to be stransfered
=$af0403				VDMA_SRC_ADDY_M         = $AF0403   ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0404				VDMA_SRC_ADDY_H         = $AF0404
=$af0405				VDMA_DST_ADDY_L         = $AF0405   ; Destination Pointer within Vicky's video memory Range
=$af0406				VDMA_DST_ADDY_M         = $AF0406   ; ($00_0000 - $3F_0000)
=$af0407				VDMA_DST_ADDY_H         = $AF0407
=$af0408				VDMA_SIZE_L             = $AF0408   ; Maximum Value: $40:0000 (4Megs)
=$af0409				VDMA_SIZE_M             = $AF0409
=$af040a				VDMA_SIZE_H             = $AF040A
=$af040b				VDMA_IGNORED            = $AF040B
=$af0408				VDMA_X_SIZE_L           = $AF0408   ; Maximum Value: 65535
=$af0409				VDMA_X_SIZE_H           = $AF0409
=$af040a				VDMA_Y_SIZE_L           = $AF040A   ; Maximum Value: 65535
=$af040b				VDMA_Y_SIZE_H           = $AF040B
=$af040c				VDMA_SRC_STRIDE_L       = $AF040C   ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040d				VDMA_SRC_STRIDE_H       = $AF040D   ;
=$af040e				VDMA_DST_STRIDE_L       = $AF040E   ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040f				VDMA_DST_STRIDE_H       = $AF040F   ;

;******  Return to file: src\vicky_ii_def.asm


;******  Processing file: src\VKYII_CFP9553_SDMA_def.asm

=$af0420				SDMA_CTRL_REG0           = $AF0420
=$01					SDMA_CTRL0_Enable        = $01
=$02					SDMA_CTRL0_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04					SDMA_CTRL0_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08					SDMA_CTRL0_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10					SDMA_CTRL0_SysRAM_Src    = $10     ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20					SDMA_CTRL0_SysRAM_Dst    = $20     ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$00					SDMA_XFER_SRAM2SRAM = $00           ; SRAM -> SRAM transfer
=$10					SDMA_XFER_SRAM2VRAM = $10           ; SRAM -> VRAM transfer
=$20					SDMA_XFER_VRAM2SRAM = $20           ; VRAM -> SRAM transfer
=$30					SDMA_XFER_SRAMIO = $30              ; SRAM <-> IO transfer (see: SDMA_CONTROL_REG1 for config and direction)
=$40					SDMA_CTLR0_RSVD          = $40      ; Reserved
=$80					SDMA_CTRL0_Start_TRF     = $80      ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0421				SDMA_CTRL_REG1           = $AF0421  ; Write Only - Byte to Write in the Fill Function
=$01					SDMA_CTRL1_IO_Src		 = $01		; 1 = Source is an IO Address (ADC, SuperIO, IDE)
=$02					SDMA_CTRL1_IO_Src16		 = $02		; 0 = Src 8Bits Transfer / 1= 16Bits Transfer
=$04					SDMA_CTRL1_IO_Dst		 = $04		; 1 = Destination is an IO Address (DAC, SuperIO, IDE)
=$08					SDMA_CTRL1_IO_Dst16      = $08      ; 0 = Dst 8bits Transfer / 1= 16bits
=$af0422				SDMA_SRC_ADDY_L         = $AF0422   ; Pointer to the Source of the Data to be stransfered
=$af0423				SDMA_SRC_ADDY_M         = $AF0423   ; This needs to be within CPU's system RAM range ($00_0000 - $3F_FFFF)
=$af0424				SDMA_SRC_ADDY_H         = $AF0424
=$af0425				SDMA_DST_ADDY_L         = $AF0425   ; Destination Pointer within CPU's video memory Range
=$af0426				SDMA_DST_ADDY_M         = $AF0426   ; This needs to be within CPU's system RAM range ($00_0000 - $3F_FFFF)
=$af0427				SDMA_DST_ADDY_H         = $AF0427
=$af0428				SDMA_SIZE_L             = $AF0428   ; Maximum Value: $40:0000 (4Megs)
=$af0429				SDMA_SIZE_M             = $AF0429
=$af042a				SDMA_SIZE_H             = $AF042A
=$af042b				SDMA_IGNORED            = $AF042B
=$af0428				SDMA_X_SIZE_L           = $AF0428   ; Maximum Value: 65535
=$af0429				SDMA_X_SIZE_H           = $AF0429
=$af042a				SDMA_Y_SIZE_L           = $AF042A   ; Maximum Value: 65535
=$af042b				SDMA_Y_SIZE_H           = $AF042B
=$af042c				SDMA_SRC_STRIDE_L       = $AF042C   ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af042d				SDMA_SRC_STRIDE_H       = $AF042D   ;
=$af042e				SDMA_DST_STRIDE_L       = $AF042E   ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af042f				SDMA_DST_STRIDE_H       = $AF042F   ;
=$af0430				SDMA_BYTE_2_WRITE       = $AF0430   ; Write Only - Byte to Write in the Fill Function
=$af0430				SDMA_STATUS_REG         = $AF0430   ; Read only
=$01					SDMA_STAT_Size_Err       = $01      ; If Set to 1, Overall Size is Invalid
=$02					SDMA_STAT_Dst_Add_Err    = $02      ; If Set to 1, Destination Address Invalid
=$04					SDMA_STAT_Src_Add_Err    = $04      ; If Set to 1, Source Address Invalid
=$08					SDMA_STAT_TimeOut_Err    = $08      ; will be set to 1 if a Timeout occur when transfering between data from and to VRAM

;******  Return to file: src\vicky_ii_def.asm


;******  Processing file: src\VKYII_CFP9553_SPRITE_def.asm

=$01					SPRITE_Enable             = $01
=$00					SPRITE_LUT0               = $00 ; This is the LUT that the Sprite will use
=$02					SPRITE_LUT1               = $02
=$04					SPRITE_LUT2               = $04 ; Only 4 LUT for Now, So this bit is not used.
=$06					SPRITE_LUT3               = $06 ; Only 4 LUT for Now, So this bit is not used.
=$08					SPRITE_LUT4               = $08 ; Only 4 LUT for Now, So this bit is not used.
=$0a					SPRITE_LUT5               = $0A ; Only 4 LUT for Now, So this bit is not used.
=$0c					SPRITE_LUT6               = $0C ; Only 4 LUT for Now, So this bit is not used.
=$0e					SPRITE_LUT7               = $0E ; Only 4 LUT for Now, So this bit is not used.
=$00					SPRITE_DEPTH0             = $00
=$10					SPRITE_DEPTH1             = $10
=$20					SPRITE_DEPTH2             = $20
=$30					SPRITE_DEPTH3             = $30
=$40					SPRITE_DEPTH4             = $40
=$50					SPRITE_DEPTH5             = $50
=$60					SPRITE_DEPTH6             = $60
=$af0c00				SP00_CONTROL_REG        = $AF0C00
=$af0c01				SP00_ADDY_PTR_L         = $AF0C01
=$af0c02				SP00_ADDY_PTR_M         = $AF0C02
=$af0c03				SP00_ADDY_PTR_H         = $AF0C03
=$af0c04				SP00_X_POS_L            = $AF0C04
=$af0c05				SP00_X_POS_H            = $AF0C05
=$af0c06				SP00_Y_POS_L            = $AF0C06
=$af0c07				SP00_Y_POS_H            = $AF0C07
=$af0c08				SP01_CONTROL_REG        = $AF0C08
=$af0c09				SP01_ADDY_PTR_L         = $AF0C09
=$af0c0a				SP01_ADDY_PTR_M         = $AF0C0A
=$af0c0b				SP01_ADDY_PTR_H         = $AF0C0B
=$af0c0c				SP01_X_POS_L            = $AF0C0C
=$af0c0d				SP01_X_POS_H            = $AF0C0D
=$af0c0e				SP01_Y_POS_L            = $AF0C0E
=$af0c0f				SP01_Y_POS_H            = $AF0C0F
=$af0c10				SP02_CONTROL_REG        = $AF0C10
=$af0c11				SP02_ADDY_PTR_L         = $AF0C11
=$af0c12				SP02_ADDY_PTR_M         = $AF0C12
=$af0c13				SP02_ADDY_PTR_H         = $AF0C13
=$af0c14				SP02_X_POS_L            = $AF0C14
=$af0c15				SP02_X_POS_H            = $AF0C15
=$af0c16				SP02_Y_POS_L            = $AF0C16
=$af0c17				SP02_Y_POS_H            = $AF0C17
=$af0c18				SP03_CONTROL_REG        = $AF0C18
=$af0c19				SP03_ADDY_PTR_L         = $AF0C19
=$af0c1a				SP03_ADDY_PTR_M         = $AF0C1A
=$af0c1b				SP03_ADDY_PTR_H         = $AF0C1B
=$af0c1c				SP03_X_POS_L            = $AF0C1C
=$af0c1d				SP03_X_POS_H            = $AF0C1D
=$af0c1e				SP03_Y_POS_L            = $AF0C1E
=$af0c1f				SP03_Y_POS_H            = $AF0C1F
=$af0c20				SP04_CONTROL_REG        = $AF0C20
=$af0c21				SP04_ADDY_PTR_L         = $AF0C21
=$af0c22				SP04_ADDY_PTR_M         = $AF0C22
=$af0c23				SP04_ADDY_PTR_H         = $AF0C23
=$af0c24				SP04_X_POS_L            = $AF0C24
=$af0c25				SP04_X_POS_H            = $AF0C25
=$af0c26				SP04_Y_POS_L            = $AF0C26
=$af0c27				SP04_Y_POS_H            = $AF0C27
=$af0c28				SP05_CONTROL_REG        = $AF0C28
=$af0c29				SP05_ADDY_PTR_L         = $AF0C29
=$af0c2a				SP05_ADDY_PTR_M         = $AF0C2A
=$af0c2b				SP05_ADDY_PTR_H         = $AF0C2B
=$af0c2c				SP05_X_POS_L            = $AF0C2C
=$af0c2d				SP05_X_POS_H            = $AF0C2D
=$af0c2e				SP05_Y_POS_L            = $AF0C2E
=$af0c2f				SP05_Y_POS_H            = $AF0C2F
=$af0c30				SP06_CONTROL_REG        = $AF0C30
=$af0c31				SP06_ADDY_PTR_L         = $AF0C31
=$af0c32				SP06_ADDY_PTR_M         = $AF0C32
=$af0c33				SP06_ADDY_PTR_H         = $AF0C33
=$af0c34				SP06_X_POS_L            = $AF0C34
=$af0c35				SP06_X_POS_H            = $AF0C35
=$af0c36				SP06_Y_POS_L            = $AF0C36
=$af0c37				SP06_Y_POS_H            = $AF0C37
=$af0c38				SP07_CONTROL_REG        = $AF0C38
=$af0c39				SP07_ADDY_PTR_L         = $AF0C39
=$af0c3a				SP07_ADDY_PTR_M         = $AF0C3A
=$af0c3b				SP07_ADDY_PTR_H         = $AF0C3B
=$af0c3c				SP07_X_POS_L            = $AF0C3C
=$af0c3d				SP07_X_POS_H            = $AF0C3D
=$af0c3e				SP07_Y_POS_L            = $AF0C3E
=$af0c3f				SP07_Y_POS_H            = $AF0C3F
=$af0c40				SP08_CONTROL_REG        = $AF0C40
=$af0c41				SP08_ADDY_PTR_L         = $AF0C41
=$af0c42				SP08_ADDY_PTR_M         = $AF0C42
=$af0c43				SP08_ADDY_PTR_H         = $AF0C43
=$af0c44				SP08_X_POS_L            = $AF0C44
=$af0c45				SP08_X_POS_H            = $AF0C45
=$af0c46				SP08_Y_POS_L            = $AF0C46
=$af0c47				SP08_Y_POS_H            = $AF0C47
=$af0c48				SP09_CONTROL_REG        = $AF0C48
=$af0c49				SP09_ADDY_PTR_L         = $AF0C49
=$af0c4a				SP09_ADDY_PTR_M         = $AF0C4A
=$af0c4b				SP09_ADDY_PTR_H         = $AF0C4B
=$af0c4c				SP09_X_POS_L            = $AF0C4C
=$af0c4d				SP09_X_POS_H            = $AF0C4D
=$af0c4e				SP09_Y_POS_L            = $AF0C4E
=$af0c4f				SP09_Y_POS_H            = $AF0C4F
=$af0c50				SP10_CONTROL_REG        = $AF0C50
=$af0c51				SP10_ADDY_PTR_L         = $AF0C51
=$af0c52				SP10_ADDY_PTR_M         = $AF0C52
=$af0c53				SP10_ADDY_PTR_H         = $AF0C53
=$af0c54				SP10_X_POS_L            = $AF0C54
=$af0c55				SP10_X_POS_H            = $AF0C55
=$af0c56				SP10_Y_POS_L            = $AF0C56
=$af0c57				SP10_Y_POS_H            = $AF0C57
=$af0c58				SP11_CONTROL_REG        = $AF0C58
=$af0c59				SP11_ADDY_PTR_L         = $AF0C59
=$af0c5a				SP11_ADDY_PTR_M         = $AF0C5A
=$af0c5b				SP11_ADDY_PTR_H         = $AF0C5B
=$af0c5c				SP11_X_POS_L            = $AF0C5C
=$af0c5d				SP11_X_POS_H            = $AF0C5D
=$af0c5e				SP11_Y_POS_L            = $AF0C5E
=$af0c5f				SP11_Y_POS_H            = $AF0C5F
=$af0c60				SP12_CONTROL_REG        = $AF0C60
=$af0c61				SP12_ADDY_PTR_L         = $AF0C61
=$af0c62				SP12_ADDY_PTR_M         = $AF0C62
=$af0c63				SP12_ADDY_PTR_H         = $AF0C63
=$af0c64				SP12_X_POS_L            = $AF0C64
=$af0c65				SP12_X_POS_H            = $AF0C65
=$af0c66				SP12_Y_POS_L            = $AF0C66
=$af0c67				SP12_Y_POS_H            = $AF0C67
=$af0c68				SP13_CONTROL_REG        = $AF0C68
=$af0c69				SP13_ADDY_PTR_L         = $AF0C69
=$af0c6a				SP13_ADDY_PTR_M         = $AF0C6A
=$af0c6b				SP13_ADDY_PTR_H         = $AF0C6B
=$af0c6c				SP13_X_POS_L            = $AF0C6C
=$af0c6d				SP13_X_POS_H            = $AF0C6D
=$af0c6e				SP13_Y_POS_L            = $AF0C6E
=$af0c6f				SP13_Y_POS_H            = $AF0C6F
=$af0c70				SP14_CONTROL_REG        = $AF0C70
=$af0c71				SP14_ADDY_PTR_L         = $AF0C71
=$af0c72				SP14_ADDY_PTR_M         = $AF0C72
=$af0c73				SP14_ADDY_PTR_H         = $AF0C73
=$af0c74				SP14_X_POS_L            = $AF0C74
=$af0c75				SP14_X_POS_H            = $AF0C75
=$af0c76				SP14_Y_POS_L            = $AF0C76
=$af0c77				SP14_Y_POS_H            = $AF0C77
=$af0c78				SP15_CONTROL_REG        = $AF0C78
=$af0c79				SP15_ADDY_PTR_L         = $AF0C79
=$af0c7a				SP15_ADDY_PTR_M         = $AF0C7A
=$af0c7b				SP15_ADDY_PTR_H         = $AF0C7B
=$af0c7c				SP15_X_POS_L            = $AF0C7C
=$af0c7d				SP15_X_POS_H            = $AF0C7D
=$af0c7e				SP15_Y_POS_L            = $AF0C7E
=$af0c7f				SP15_Y_POS_H            = $AF0C7F
=$af0c80				SP16_CONTROL_REG        = $AF0C80
=$af0c81				SP16_ADDY_PTR_L         = $AF0C81
=$af0c82				SP16_ADDY_PTR_M         = $AF0C82
=$af0c83				SP16_ADDY_PTR_H         = $AF0C83
=$af0c84				SP16_X_POS_L            = $AF0C84
=$af0c85				SP16_X_POS_H            = $AF0C85
=$af0c86				SP16_Y_POS_L            = $AF0C86
=$af0c87				SP16_Y_POS_H            = $AF0C87
=$af0c88				SP17_CONTROL_REG        = $AF0C88
=$af0c89				SP17_ADDY_PTR_L         = $AF0C89
=$af0c8a				SP17_ADDY_PTR_M         = $AF0C8A
=$af0c8b				SP17_ADDY_PTR_H         = $AF0C8B
=$af0c8c				SP17_X_POS_L            = $AF0C8C
=$af0c8d				SP17_X_POS_H            = $AF0C8D
=$af0c8e				SP17_Y_POS_L            = $AF0C8E
=$af0c8f				SP17_Y_POS_H            = $AF0C8F
=$af0c90				SP18_CONTROL_REG        = $AF0C90
=$af0c91				SP18_ADDY_PTR_L         = $AF0C91
=$af0c92				SP18_ADDY_PTR_M         = $AF0C92
=$af0c93				SP18_ADDY_PTR_H         = $AF0C93
=$af0c94				SP18_X_POS_L            = $AF0C94
=$af0c95				SP18_X_POS_H            = $AF0C95
=$af0c96				SP18_Y_POS_L            = $AF0C96
=$af0c97				SP18_Y_POS_H            = $AF0C97
=$af0c98				SP19_CONTROL_REG        = $AF0C98
=$af0c99				SP19_ADDY_PTR_L         = $AF0C99
=$af0c9a				SP19_ADDY_PTR_M         = $AF0C9A
=$af0c9b				SP19_ADDY_PTR_H         = $AF0C9B
=$af0c9c				SP19_X_POS_L            = $AF0C9C
=$af0c9d				SP19_X_POS_H            = $AF0C9D
=$af0c9e				SP19_Y_POS_L            = $AF0C9E
=$af0c9f				SP19_Y_POS_H            = $AF0C9F
=$af0ca0				SP20_CONTROL_REG        = $AF0CA0
=$af0ca1				SP20_ADDY_PTR_L         = $AF0CA1
=$af0ca2				SP20_ADDY_PTR_M         = $AF0CA2
=$af0ca3				SP20_ADDY_PTR_H         = $AF0CA3
=$af0ca4				SP20_X_POS_L            = $AF0CA4
=$af0ca5				SP20_X_POS_H            = $AF0CA5
=$af0ca6				SP20_Y_POS_L            = $AF0CA6
=$af0ca7				SP20_Y_POS_H            = $AF0CA7
=$af0ca8				SP21_CONTROL_REG        = $AF0CA8
=$af0ca9				SP21_ADDY_PTR_L         = $AF0CA9
=$af0caa				SP21_ADDY_PTR_M         = $AF0CAA
=$af0cab				SP21_ADDY_PTR_H         = $AF0CAB
=$af0cac				SP21_X_POS_L            = $AF0CAC
=$af0cad				SP21_X_POS_H            = $AF0CAD
=$af0cae				SP21_Y_POS_L            = $AF0CAE
=$af0caf				SP21_Y_POS_H            = $AF0CAF
=$af0cb0				SP22_CONTROL_REG        = $AF0CB0
=$af0cb1				SP22_ADDY_PTR_L         = $AF0CB1
=$af0cb2				SP22_ADDY_PTR_M         = $AF0CB2
=$af0cb3				SP22_ADDY_PTR_H         = $AF0CB3
=$af0cb4				SP22_X_POS_L            = $AF0CB4
=$af0cb5				SP22_X_POS_H            = $AF0CB5
=$af0cb6				SP22_Y_POS_L            = $AF0CB6
=$af0cb7				SP22_Y_POS_H            = $AF0CB7
=$af0cb8				SP23_CONTROL_REG        = $AF0CB8
=$af0cb9				SP23_ADDY_PTR_L         = $AF0CB9
=$af0cba				SP23_ADDY_PTR_M         = $AF0CBA
=$af0cbb				SP23_ADDY_PTR_H         = $AF0CBB
=$af0cbc				SP23_X_POS_L            = $AF0CBC
=$af0cbd				SP23_X_POS_H            = $AF0CBD
=$af0cbe				SP23_Y_POS_L            = $AF0CBE
=$af0cbf				SP23_Y_POS_H            = $AF0CBF
=$af0cc0				SP24_CONTROL_REG        = $AF0CC0
=$af0cc1				SP24_ADDY_PTR_L         = $AF0CC1
=$af0cc2				SP24_ADDY_PTR_M         = $AF0CC2
=$af0cc3				SP24_ADDY_PTR_H         = $AF0CC3
=$af0cc4				SP24_X_POS_L            = $AF0CC4
=$af0cc5				SP24_X_POS_H            = $AF0CC5
=$af0cc6				SP24_Y_POS_L            = $AF0CC6
=$af0cc7				SP24_Y_POS_H            = $AF0CC7
=$af0cc8				SP25_CONTROL_REG        = $AF0CC8
=$af0cc9				SP25_ADDY_PTR_L         = $AF0CC9
=$af0cca				SP25_ADDY_PTR_M         = $AF0CCA
=$af0ccb				SP25_ADDY_PTR_H         = $AF0CCB
=$af0ccc				SP25_X_POS_L            = $AF0CCC
=$af0ccd				SP25_X_POS_H            = $AF0CCD
=$af0cce				SP25_Y_POS_L            = $AF0CCE
=$af0ccf				SP25_Y_POS_H            = $AF0CCF
=$af0cd0				SP26_CONTROL_REG        = $AF0CD0
=$af0cd1				SP26_ADDY_PTR_L         = $AF0CD1
=$af0cd2				SP26_ADDY_PTR_M         = $AF0CD2
=$af0cd3				SP26_ADDY_PTR_H         = $AF0CD3
=$af0cd4				SP26_X_POS_L            = $AF0CD4
=$af0cd5				SP26_X_POS_H            = $AF0CD5
=$af0cd6				SP26_Y_POS_L            = $AF0CD6
=$af0cd7				SP26_Y_POS_H            = $AF0CD7
=$af0cd8				SP27_CONTROL_REG        = $AF0CD8
=$af0cd9				SP27_ADDY_PTR_L         = $AF0CD9
=$af0cda				SP27_ADDY_PTR_M         = $AF0CDA
=$af0cdb				SP27_ADDY_PTR_H         = $AF0CDB
=$af0cdc				SP27_X_POS_L            = $AF0CDC
=$af0cdd				SP27_X_POS_H            = $AF0CDD
=$af0cde				SP27_Y_POS_L            = $AF0CDE
=$af0cdf				SP27_Y_POS_H            = $AF0CDF
=$af0ce0				SP28_CONTROL_REG        = $AF0CE0
=$af0ce1				SP28_ADDY_PTR_L         = $AF0CE1
=$af0ce2				SP28_ADDY_PTR_M         = $AF0CE2
=$af0ce3				SP28_ADDY_PTR_H         = $AF0CE3
=$af0ce4				SP28_X_POS_L            = $AF0CE4
=$af0ce5				SP28_X_POS_H            = $AF0CE5
=$af0ce6				SP28_Y_POS_L            = $AF0CE6
=$af0ce7				SP28_Y_POS_H            = $AF0CE7
=$af0ce8				SP29_CONTROL_REG        = $AF0CE8
=$af0ce9				SP29_ADDY_PTR_L         = $AF0CE9
=$af0cea				SP29_ADDY_PTR_M         = $AF0CEA
=$af0ceb				SP29_ADDY_PTR_H         = $AF0CEB
=$af0cec				SP29_X_POS_L            = $AF0CEC
=$af0ced				SP29_X_POS_H            = $AF0CED
=$af0cee				SP29_Y_POS_L            = $AF0CEE
=$af0cef				SP29_Y_POS_H            = $AF0CEF
=$af0cf0				SP30_CONTROL_REG        = $AF0CF0
=$af0cf1				SP30_ADDY_PTR_L         = $AF0CF1
=$af0cf2				SP30_ADDY_PTR_M         = $AF0CF2
=$af0cf3				SP30_ADDY_PTR_H         = $AF0CF3
=$af0cf4				SP30_X_POS_L            = $AF0CF4
=$af0cf5				SP30_X_POS_H            = $AF0CF5
=$af0cf6				SP30_Y_POS_L            = $AF0CF6
=$af0cf7				SP30_Y_POS_H            = $AF0CF7
=$af0cf8				SP31_CONTROL_REG        = $AF0CF8
=$af0cf9				SP31_ADDY_PTR_L         = $AF0CF9
=$af0cfa				SP31_ADDY_PTR_M         = $AF0CFA
=$af0cfb				SP31_ADDY_PTR_H         = $AF0CFB
=$af0cfc				SP31_X_POS_L            = $AF0CFC
=$af0cfd				SP31_X_POS_H            = $AF0CFD
=$af0cfe				SP31_Y_POS_L            = $AF0CFE
=$af0cff				SP31_Y_POS_H            = $AF0CFF
=$af0d00				SP32_CONTROL_REG        = $AF0D00
=$af0d01				SP32_ADDY_PTR_L         = $AF0D01
=$af0d02				SP32_ADDY_PTR_M         = $AF0D02
=$af0d03				SP32_ADDY_PTR_H         = $AF0D03
=$af0d04				SP32_X_POS_L            = $AF0D04
=$af0d05				SP32_X_POS_H            = $AF0D05
=$af0d06				SP32_Y_POS_L            = $AF0D06
=$af0d07				SP32_Y_POS_H            = $AF0D07
=$af0d08				SP33_CONTROL_REG        = $AF0D08
=$af0d09				SP33_ADDY_PTR_L         = $AF0D09
=$af0d0a				SP33_ADDY_PTR_M         = $AF0D0A
=$af0d0b				SP33_ADDY_PTR_H         = $AF0D0B
=$af0d0c				SP33_X_POS_L            = $AF0D0C
=$af0d0d				SP33_X_POS_H            = $AF0D0D
=$af0d0e				SP33_Y_POS_L            = $AF0D0E
=$af0d0f				SP33_Y_POS_H            = $AF0D0F
=$af0d10				SP34_CONTROL_REG        = $AF0D10
=$af0d11				SP34_ADDY_PTR_L         = $AF0D11
=$af0d12				SP34_ADDY_PTR_M         = $AF0D12
=$af0d13				SP34_ADDY_PTR_H         = $AF0D13
=$af0d14				SP34_X_POS_L            = $AF0D14
=$af0d15				SP34_X_POS_H            = $AF0D15
=$af0d16				SP34_Y_POS_L            = $AF0D16
=$af0d17				SP34_Y_POS_H            = $AF0D17
=$af0d18				SP35_CONTROL_REG        = $AF0D18
=$af0d19				SP35_ADDY_PTR_L         = $AF0D19
=$af0d1a				SP35_ADDY_PTR_M         = $AF0D1A
=$af0d1b				SP35_ADDY_PTR_H         = $AF0D1B
=$af0d1c				SP35_X_POS_L            = $AF0D1C
=$af0d1d				SP35_X_POS_H            = $AF0D1D
=$af0d1e				SP35_Y_POS_L            = $AF0D1E
=$af0d1f				SP35_Y_POS_H            = $AF0D1F
=$af0d20				SP36_CONTROL_REG        = $AF0D20
=$af0d21				SP36_ADDY_PTR_L         = $AF0D21
=$af0d22				SP36_ADDY_PTR_M         = $AF0D22
=$af0d23				SP36_ADDY_PTR_H         = $AF0D23
=$af0d24				SP36_X_POS_L            = $AF0D24
=$af0d25				SP36_X_POS_H            = $AF0D25
=$af0d26				SP36_Y_POS_L            = $AF0D26
=$af0d27				SP36_Y_POS_H            = $AF0D27
=$af0d28				SP37_CONTROL_REG        = $AF0D28
=$af0d29				SP37_ADDY_PTR_L         = $AF0D29
=$af0d2a				SP37_ADDY_PTR_M         = $AF0D2A
=$af0d2b				SP37_ADDY_PTR_H         = $AF0D2B
=$af0d2c				SP37_X_POS_L            = $AF0D2C
=$af0d2d				SP37_X_POS_H            = $AF0D2D
=$af0d2e				SP37_Y_POS_L            = $AF0D2E
=$af0d2f				SP37_Y_POS_H            = $AF0D2F
=$af0d30				SP38_CONTROL_REG        = $AF0D30
=$af0d31				SP38_ADDY_PTR_L         = $AF0D31
=$af0d32				SP38_ADDY_PTR_M         = $AF0D32
=$af0d33				SP38_ADDY_PTR_H         = $AF0D33
=$af0d34				SP38_X_POS_L            = $AF0D34
=$af0d35				SP38_X_POS_H            = $AF0D35
=$af0d36				SP38_Y_POS_L            = $AF0D36
=$af0d37				SP38_Y_POS_H            = $AF0D37
=$af0d38				SP39_CONTROL_REG        = $AF0D38
=$af0d39				SP39_ADDY_PTR_L         = $AF0D39
=$af0d3a				SP39_ADDY_PTR_M         = $AF0D3A
=$af0d3b				SP39_ADDY_PTR_H         = $AF0D3B
=$af0d3c				SP39_X_POS_L            = $AF0D3C
=$af0d3d				SP39_X_POS_H            = $AF0D3D
=$af0d3e				SP39_Y_POS_L            = $AF0D3E
=$af0d3f				SP39_Y_POS_H            = $AF0D3F
=$af0d40				SP40_CONTROL_REG        = $AF0D40
=$af0d41				SP40_ADDY_PTR_L         = $AF0D41
=$af0d42				SP40_ADDY_PTR_M         = $AF0D42
=$af0d43				SP40_ADDY_PTR_H         = $AF0D43
=$af0d44				SP40_X_POS_L            = $AF0D44
=$af0d45				SP40_X_POS_H            = $AF0D45
=$af0d46				SP40_Y_POS_L            = $AF0D46
=$af0d47				SP40_Y_POS_H            = $AF0D47
=$af0d48				SP41_CONTROL_REG        = $AF0D48
=$af0d49				SP41_ADDY_PTR_L         = $AF0D49
=$af0d4a				SP41_ADDY_PTR_M         = $AF0D4A
=$af0d4b				SP41_ADDY_PTR_H         = $AF0D4B
=$af0d4c				SP41_X_POS_L            = $AF0D4C
=$af0d4d				SP41_X_POS_H            = $AF0D4D
=$af0d4e				SP41_Y_POS_L            = $AF0D4E
=$af0d4f				SP41_Y_POS_H            = $AF0D4F
=$af0d50				SP42_CONTROL_REG        = $AF0D50
=$af0d51				SP42_ADDY_PTR_L         = $AF0D51
=$af0d52				SP42_ADDY_PTR_M         = $AF0D52
=$af0d53				SP42_ADDY_PTR_H         = $AF0D53
=$af0d54				SP42_X_POS_L            = $AF0D54
=$af0d55				SP42_X_POS_H            = $AF0D55
=$af0d56				SP42_Y_POS_L            = $AF0D56
=$af0d57				SP42_Y_POS_H            = $AF0D57
=$af0d58				SP43_CONTROL_REG        = $AF0D58
=$af0d59				SP43_ADDY_PTR_L         = $AF0D59
=$af0d5a				SP43_ADDY_PTR_M         = $AF0D5A
=$af0d5b				SP43_ADDY_PTR_H         = $AF0D5B
=$af0d5c				SP43_X_POS_L            = $AF0D5C
=$af0d5d				SP43_X_POS_H            = $AF0D5D
=$af0d5e				SP43_Y_POS_L            = $AF0D5E
=$af0d5f				SP43_Y_POS_H            = $AF0D5F
=$af0d60				SP44_CONTROL_REG        = $AF0D60
=$af0d61				SP44_ADDY_PTR_L         = $AF0D61
=$af0d62				SP44_ADDY_PTR_M         = $AF0D62
=$af0d63				SP44_ADDY_PTR_H         = $AF0D63
=$af0d64				SP44_X_POS_L            = $AF0D64
=$af0d65				SP44_X_POS_H            = $AF0D65
=$af0d66				SP44_Y_POS_L            = $AF0D66
=$af0d67				SP44_Y_POS_H            = $AF0D67
=$af0d68				SP45_CONTROL_REG        = $AF0D68
=$af0d69				SP45_ADDY_PTR_L         = $AF0D69
=$af0d6a				SP45_ADDY_PTR_M         = $AF0D6A
=$af0d6b				SP45_ADDY_PTR_H         = $AF0D6B
=$af0d6c				SP45_X_POS_L            = $AF0D6C
=$af0d6d				SP45_X_POS_H            = $AF0D6D
=$af0d6e				SP45_Y_POS_L            = $AF0D6E
=$af0d6f				SP45_Y_POS_H            = $AF0D6F
=$af0d70				SP46_CONTROL_REG        = $AF0D70
=$af0d71				SP46_ADDY_PTR_L         = $AF0D71
=$af0d72				SP46_ADDY_PTR_M         = $AF0D72
=$af0d73				SP46_ADDY_PTR_H         = $AF0D73
=$af0d74				SP46_X_POS_L            = $AF0D74
=$af0d75				SP46_X_POS_H            = $AF0D75
=$af0d76				SP46_Y_POS_L            = $AF0D76
=$af0d77				SP46_Y_POS_H            = $AF0D77
=$af0d78				SP47_CONTROL_REG        = $AF0D78
=$af0d79				SP47_ADDY_PTR_L         = $AF0D79
=$af0d7a				SP47_ADDY_PTR_M         = $AF0D7A
=$af0d7b				SP47_ADDY_PTR_H         = $AF0D7B
=$af0d7c				SP47_X_POS_L            = $AF0D7C
=$af0d7d				SP47_X_POS_H            = $AF0D7D
=$af0d7e				SP47_Y_POS_L            = $AF0D7E
=$af0d7f				SP47_Y_POS_H            = $AF0D7F
=$af0d80				SP48_CONTROL_REG        = $AF0D80
=$af0d81				SP48_ADDY_PTR_L         = $AF0D81
=$af0d82				SP48_ADDY_PTR_M         = $AF0D82
=$af0d83				SP48_ADDY_PTR_H         = $AF0D83
=$af0d84				SP48_X_POS_L            = $AF0D84
=$af0d85				SP48_X_POS_H            = $AF0D85
=$af0d86				SP48_Y_POS_L            = $AF0D86
=$af0d87				SP48_Y_POS_H            = $AF0D87
=$af0d88				SP49_CONTROL_REG        = $AF0D88
=$af0d89				SP49_ADDY_PTR_L         = $AF0D89
=$af0d8a				SP49_ADDY_PTR_M         = $AF0D8A
=$af0d8b				SP49_ADDY_PTR_H         = $AF0D8B
=$af0d8c				SP49_X_POS_L            = $AF0D8C
=$af0d8d				SP49_X_POS_H            = $AF0D8D
=$af0d8e				SP49_Y_POS_L            = $AF0D8E
=$af0d8f				SP49_Y_POS_H            = $AF0D8F
=$af0d90				SP50_CONTROL_REG        = $AF0D90
=$af0d91				SP50_ADDY_PTR_L         = $AF0D91
=$af0d92				SP50_ADDY_PTR_M         = $AF0D92
=$af0d93				SP50_ADDY_PTR_H         = $AF0D93
=$af0d94				SP50_X_POS_L            = $AF0D94
=$af0d95				SP50_X_POS_H            = $AF0D95
=$af0d96				SP50_Y_POS_L            = $AF0D96
=$af0d97				SP50_Y_POS_H            = $AF0D97
=$af0d98				SP51_CONTROL_REG        = $AF0D98
=$af0d99				SP51_ADDY_PTR_L         = $AF0D99
=$af0d9a				SP51_ADDY_PTR_M         = $AF0D9A
=$af0d9b				SP51_ADDY_PTR_H         = $AF0D9B
=$af0d9c				SP51_X_POS_L            = $AF0D9C
=$af0d9d				SP51_X_POS_H            = $AF0D9D
=$af0d9e				SP51_Y_POS_L            = $AF0D9E
=$af0d9f				SP51_Y_POS_H            = $AF0D9F
=$af0da0				SP52_CONTROL_REG        = $AF0DA0
=$af0da1				SP52_ADDY_PTR_L         = $AF0DA1
=$af0da2				SP52_ADDY_PTR_M         = $AF0DA2
=$af0da3				SP52_ADDY_PTR_H         = $AF0DA3
=$af0da4				SP52_X_POS_L            = $AF0DA4
=$af0da5				SP52_X_POS_H            = $AF0DA5
=$af0da6				SP52_Y_POS_L            = $AF0DA6
=$af0da7				SP52_Y_POS_H            = $AF0DA7
=$af0da8				SP53_CONTROL_REG        = $AF0DA8
=$af0da9				SP53_ADDY_PTR_L         = $AF0DA9
=$af0daa				SP53_ADDY_PTR_M         = $AF0DAA
=$af0dab				SP53_ADDY_PTR_H         = $AF0DAB
=$af0dac				SP53_X_POS_L            = $AF0DAC
=$af0dad				SP53_X_POS_H            = $AF0DAD
=$af0dae				SP53_Y_POS_L            = $AF0DAE
=$af0daf				SP53_Y_POS_H            = $AF0DAF
=$af0db0				SP54_CONTROL_REG        = $AF0DB0
=$af0db1				SP54_ADDY_PTR_L         = $AF0DB1
=$af0db2				SP54_ADDY_PTR_M         = $AF0DB2
=$af0db3				SP54_ADDY_PTR_H         = $AF0DB3
=$af0db4				SP54_X_POS_L            = $AF0DB4
=$af0db5				SP54_X_POS_H            = $AF0DB5
=$af0db6				SP54_Y_POS_L            = $AF0DB6
=$af0db7				SP54_Y_POS_H            = $AF0DB7
=$af0db8				SP55_CONTROL_REG        = $AF0DB8
=$af0db9				SP55_ADDY_PTR_L         = $AF0DB9
=$af0dba				SP55_ADDY_PTR_M         = $AF0DBA
=$af0dbb				SP55_ADDY_PTR_H         = $AF0DBB
=$af0dbc				SP55_X_POS_L            = $AF0DBC
=$af0dbd				SP55_X_POS_H            = $AF0DBD
=$af0dbe				SP55_Y_POS_L            = $AF0DBE
=$af0dbf				SP55_Y_POS_H            = $AF0DBF
=$af0dc0				SP56_CONTROL_REG        = $AF0DC0
=$af0dc1				SP56_ADDY_PTR_L         = $AF0DC1
=$af0dc2				SP56_ADDY_PTR_M         = $AF0DC2
=$af0dc3				SP56_ADDY_PTR_H         = $AF0DC3
=$af0dc4				SP56_X_POS_L            = $AF0DC4
=$af0dc5				SP56_X_POS_H            = $AF0DC5
=$af0dc6				SP56_Y_POS_L            = $AF0DC6
=$af0dc7				SP56_Y_POS_H            = $AF0DC7
=$af0dc8				SP57_CONTROL_REG        = $AF0DC8
=$af0dc9				SP57_ADDY_PTR_L         = $AF0DC9
=$af0dca				SP57_ADDY_PTR_M         = $AF0DCA
=$af0dcb				SP57_ADDY_PTR_H         = $AF0DCB
=$af0dcc				SP57_X_POS_L            = $AF0DCC
=$af0dcd				SP57_X_POS_H            = $AF0DCD
=$af0dce				SP57_Y_POS_L            = $AF0DCE
=$af0dcf				SP57_Y_POS_H            = $AF0DCF
=$af0dd0				SP58_CONTROL_REG        = $AF0DD0
=$af0dd1				SP58_ADDY_PTR_L         = $AF0DD1
=$af0dd2				SP58_ADDY_PTR_M         = $AF0DD2
=$af0dd3				SP58_ADDY_PTR_H         = $AF0DD3
=$af0dd4				SP58_X_POS_L            = $AF0DD4
=$af0dd5				SP58_X_POS_H            = $AF0DD5
=$af0dd6				SP58_Y_POS_L            = $AF0DD6
=$af0dd7				SP58_Y_POS_H            = $AF0DD7
=$af0dd8				SP59_CONTROL_REG        = $AF0DD8
=$af0dd9				SP59_ADDY_PTR_L         = $AF0DD9
=$af0dda				SP59_ADDY_PTR_M         = $AF0DDA
=$af0ddb				SP59_ADDY_PTR_H         = $AF0DDB
=$af0ddc				SP59_X_POS_L            = $AF0DDC
=$af0ddd				SP59_X_POS_H            = $AF0DDD
=$af0dde				SP59_Y_POS_L            = $AF0DDE
=$af0ddf				SP59_Y_POS_H            = $AF0DDF
=$af0de0				SP60_CONTROL_REG        = $AF0DE0
=$af0de1				SP60_ADDY_PTR_L         = $AF0DE1
=$af0de2				SP60_ADDY_PTR_M         = $AF0DE2
=$af0de3				SP60_ADDY_PTR_H         = $AF0DE3
=$af0de4				SP60_X_POS_L            = $AF0DE4
=$af0de5				SP60_X_POS_H            = $AF0DE5
=$af0de6				SP60_Y_POS_L            = $AF0DE6
=$af0de7				SP60_Y_POS_H            = $AF0DE7
=$af0de8				SP61_CONTROL_REG        = $AF0DE8
=$af0de9				SP61_ADDY_PTR_L         = $AF0DE9
=$af0dea				SP61_ADDY_PTR_M         = $AF0DEA
=$af0deb				SP61_ADDY_PTR_H         = $AF0DEB
=$af0dec				SP61_X_POS_L            = $AF0DEC
=$af0ded				SP61_X_POS_H            = $AF0DED
=$af0dee				SP61_Y_POS_L            = $AF0DEE
=$af0def				SP61_Y_POS_H            = $AF0DEF
=$af0df0				SP62_CONTROL_REG        = $AF0DF0
=$af0df1				SP62_ADDY_PTR_L         = $AF0DF1
=$af0df2				SP62_ADDY_PTR_M         = $AF0DF2
=$af0df3				SP62_ADDY_PTR_H         = $AF0DF3
=$af0df4				SP62_X_POS_L            = $AF0DF4
=$af0df5				SP62_X_POS_H            = $AF0DF5
=$af0df6				SP62_Y_POS_L            = $AF0DF6
=$af0df7				SP62_Y_POS_H            = $AF0DF7
=$af0df8				SP63_CONTROL_REG        = $AF0DF8
=$af0df9				SP63_ADDY_PTR_L         = $AF0DF9
=$af0dfa				SP63_ADDY_PTR_M         = $AF0DFA
=$af0dfb				SP63_ADDY_PTR_H         = $AF0DFB
=$af0dfc				SP63_X_POS_L            = $AF0DFC
=$af0dfd				SP63_X_POS_H            = $AF0DFD
=$af0dfe				SP63_Y_POS_L            = $AF0DFE
=$af0dff				SP63_Y_POS_H            = $AF0DFF

;******  Return to file: src\vicky_ii_def.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\super_io_def.asm

=$af1100				PME_STS_REG     = $AF1100
=$af1102				PME_EN_REG		  = $AF1102
=$af1104				PME_STS1_REG		= $AF1104
=$af1105				PME_STS2_REG		= $AF1105
=$af1106				PME_STS3_REG		= $AF1106
=$af1107				PME_STS4_REG		= $AF1107
=$af1108				PME_STS5_REG		= $AF1108
=$af110a				PME_EN1_REG     = $AF110A
=$af110b				PME_EN2_REG     = $AF110B
=$af110c				PME_EN3_REG     = $AF110C
=$af110d				PME_EN4_REG     = $AF110D
=$af110e				PME_EN5_REG     = $AF110E
=$af1110				SMI_STS1_REG		= $AF1110
=$af1111				SMI_STS2_REG		= $AF1111
=$af1112				SMI_STS3_REG		= $AF1112
=$af1113				SMI_STS4_REG		= $AF1113
=$af1114				SMI_STS5_REG		= $AF1114
=$af1116				SMI_EN1_REG     = $AF1116
=$af1117				SMI_EN2_REG     = $AF1117
=$af1118				SMI_EN3_REG     = $AF1118
=$af1119				SMI_EN4_REG     = $AF1119
=$af111a				SMI_EN5_REG     = $AF111A
=$af111c				MSC_ST_REG      = $AF111C
=$af111e				FORCE_DISK_CHANGE       = $AF111E
=$af111f				FLOPPY_DATA_RATE        = $AF111F
=$af1120				UART1_FIFO_CTRL_SHDW    = $AF1120
=$af1121				UART2_FIFO_CTRL_SHDW    = $AF1121
=$af1122				DEV_DISABLE_REG         = $AF1122
=$af1123				GP10_REG    		= $AF1123
=$af1124				GP11_REG    		= $AF1124
=$af1125				GP12_REG    		= $AF1125
=$af1126				GP13_REG    		= $AF1126
=$af1127				GP14_REG    		= $AF1127
=$af1128				GP15_REG    		= $AF1128
=$af1129				GP16_REG    		= $AF1129
=$af112a				GP17_REG    		= $AF112A
=$af112b				GP20_REG    		= $AF112B
=$af112c				GP21_REG    		= $AF112C
=$af112d				GP22_REG		= $AF112D
=$af112f				GP24_REG		= $AF112F
=$af1130				GP25_REG		= $AF1130
=$af1131				GP26_REG		= $AF1131
=$af1132				GP27_REG		= $AF1132
=$af1133				GP30_REG		= $AF1133
=$af1134				GP31_REG		= $AF1134
=$af1135				GP32_REG		= $AF1135
=$af1136				GP33_REG		= $AF1136
=$af1137				GP34_REG		= $AF1137
=$af1138				GP35_REG		= $AF1138
=$af1139				GP36_REG		= $AF1139
=$af113a				GP37_REG		= $AF113A
=$af113b				GP40_REG		= $AF113B
=$af113c				GP41_REG		= $AF113C
=$af113d				GP42_REG		= $AF113D
=$af113e				GP43_REG		= $AF113E
=$af113f				GP50_REG		= $AF113F
=$af1140				GP51_REG		= $AF1140
=$af1141				GP52_REG		= $AF1141
=$af1142				GP53_REG		= $AF1142
=$af1143				GP54_REG		= $AF1143
=$af1144				GP55_REG		= $AF1144
=$af1145				GP56_REG		= $AF1145
=$af1146				GP57_REG		= $AF1146
=$af1147				GP60_REG		= $AF1147
=$af1148				GP61_REG		= $AF1148
=$af114b				GP1_REG			= $AF114B
=$af114c				GP2_REG			= $AF114C
=$af114d				GP3_REG			= $AF114D
=$af114e				GP4_REG			= $AF114E
=$af114f				GP5_REG			= $AF114F
=$af1150				GP6_REG			= $AF1150
=$af1156				FAN1_REG		        = $AF1156
=$af1157				FAN2_REG            = $AF1157
=$af1158				FAN_CTRL_REG  	    = $AF1158
=$af1159				FAN1_TACH_REG       = $AF1159
=$af115a				FAN2_TACH_REG       = $AF115A
=$af115b				FAN1_PRELOAD_REG    = $AF115B
=$af115c				FAN2_PRELOAD_REG    = $AF115C
=$af115d				LED1_REG    		    = $AF115D
=$af115e				LED2_REG    		    = $AF115E
=$af115f				KEYBOARD_SCAN_CODE	= $AF115F

;******  Return to file: src\kernel.asm


;******  Processing file: src\keyboard_def.asm

=$af1064				STATUS_PORT 	= $AF1064
=$af1060				KBD_OUT_BUF 	= $AF1060
=$af1060				KBD_INPT_BUF	= $AF1060
=$af1064				KBD_CMD_BUF		= $AF1064
=$af1060				KBD_DATA_BUF	= $AF1060
=$af1060				PORT_A		    = $AF1060
=$af1061				PORT_B			= $AF1061
=$01					OUT_BUF_FULL    = $01
=$02					INPT_BUF_FULL	= $02
=$04					SYS_FLAG		= $04
=$08					CMD_DATA		= $08
=$10					KEYBD_INH       = $10
=$20					TRANS_TMOUT	    = $20
=$40					RCV_TMOUT		= $40
=$80					PARITY_EVEN		= $80
=$10					INH_KEYBOARD	= $10
=$ae					KBD_ENA			= $AE
=$ad					KBD_DIS			= $AD
=$f1					KB_MENU			= $F1
=$f4					KB_ENABLE		= $F4
=$f7					KB_MAKEBREAK    = $F7
=$fe					KB_ECHO			= $FE
=$ff					KB_RESET		= $FF
=$ed					KB_LED_CMD		= $ED
=$aa					KB_OK			= $AA
=$fa					KB_ACK			= $FA
=$ff					KB_OVERRUN		= $FF
=$fe					KB_RESEND		= $FE
=$f0					KB_BREAK		= $F0
=$10					KB_FA			= $10
=$20					KB_FE			= $20
=$40					KB_PR_LED		= $40
=$01					KB_SCROLL_LOCK  = $01
=$02					KB_NUM_LOCK     = $02
=$04					KB_CAPS_LOCK    = $04
=$80					KB_CTRL_C = $80             ; CTRL-C was pressed
=$60					KB_CREDITS = $60            ; Credits key was pressed

;******  Return to file: src\kernel.asm


;******  Processing file: src\SID_def.asm

=$afe400				SID0_V1_FREQ_LO    = $AFE400 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$afe401				SID0_V1_FREQ_HI    = $AFE401 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$afe402				SID0_V1_PW_LO      = $AFE402 ;SID - L - Voice 1 (Write Only) - PW LOW
=$afe403				SID0_V1_PW_HI      = $AFE403 ;SID - L - Voice 1 (Write Only) - PW HI
=$afe404				SID0_V1_CTRL       = $AFE404 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$afe405				SID0_V1_ATCK_DECY  = $AFE405 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$afe406				SID0_V1_SSTN_RLSE  = $AFE406 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$afe407				SID0_V2_FREQ_LO    = $AFE407 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$afe408				SID0_V2_FREQ_HI    = $AFE408 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$afe409				SID0_V2_PW_LO      = $AFE409 ;SID - L - Voice 2 (Write Only) - PW LOW
=$afe40a				SID0_V2_PW_HI      = $AFE40A ;SID - L - Voice 2 (Write Only) - PW HI
=$afe40b				SID0_V2_CTRL       = $AFE40B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$afe40c				SID0_V2_ATCK_DECY  = $AFE40C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$afe40d				SID0_V2_SSTN_RLSE  = $AFE40D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$afe40e				SID0_V3_FREQ_LO    = $AFE40E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$afe40f				SID0_V3_FREQ_HI    = $AFE40F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$afe410				SID0_V3_PW_LO      = $AFE410 ;SID - L - Voice 3 (Write Only) - PW LOW
=$afe411				SID0_V3_PW_HI      = $AFE411 ;SID - L - Voice 3 (Write Only) - PW HI
=$afe412				SID0_V3_CTRL       = $AFE412 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$afe413				SID0_V3_ATCK_DECY  = $AFE413 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$afe414				SID0_V3_SSTN_RLSE  = $AFE414 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$afe415				SID0_FC_LO         = $AFE415 ;SID - L - Filter (Write Only) - FC LOW
=$afe416				SID0_FC_HI         = $AFE416 ;SID - L - Filter (Write Only) - FC HI
=$afe417				SID0_RES_FILT      = $AFE417 ;SID - L - Filter (Write Only) - RES / FILT
=$afe418				SID0_MODE_VOL      = $AFE418 ;SID - L - Filter (Write Only) - MODE / VOL
=$afe419				SID0_POT_X         = $AFE419 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$afe41a				SID0_POT_Y         = $AFE41A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$afe41b				SID0_OSC3_RND      = $AFE41B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$afe41c				SID0_ENV3          = $AFE41C ;SID - L - Misc (Read Only)  - ENV3
=$afe41d				SID0_NOT_USED0     = $AFE41D ;SID - L - NOT USED
=$afe41e				SID0_NOT_USED1     = $AFE41E ;SID - L - NOT USED
=$afe41f				SID0_NOT_USED2     = $AFE41F ;SID - L - NOT USED

;******  Return to file: src\kernel.asm


;******  Processing file: src\RTC_def.asm

=$af0800				RTC_SEC       = $AF0800 ;Seconds Register
=$af0801				RTC_SEC_ALARM = $AF0801 ;Seconds Alarm Register
=$af0802				RTC_MIN       = $AF0802 ;Minutes Register
=$af0803				RTC_MIN_ALARM = $AF0803 ;Minutes Alarm Register
=$af0804				RTC_HRS       = $AF0804 ;Hours Register
=$af0805				RTC_HRS_ALARM = $AF0805 ;Hours Alarm Register
=$af0806				RTC_DAY       = $AF0806 ;Day Register
=$af0807				RTC_DAY_ALARM = $AF0807 ;Day Alarm Register
=$af0808				RTC_DOW       = $AF0808 ;Day of Week Register
=$af0809				RTC_MONTH     = $AF0809 ;Month Register
=$af080a				RTC_YEAR      = $AF080A ;Year Register
=$af080b				RTC_RATES     = $AF080B ;Rates Register
=$af080c				RTC_ENABLE    = $AF080C ;Enables Register
=$af080d				RTC_FLAGS     = $AF080D ;Flags Register
=$af080e				RTC_CTRL      = $AF080E ;Control Register
=$af080f				RTC_CENTURY   = $AF080F ;Century Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\io_def.asm

=0					CHAN_CONSOLE  = 0           ; ID for screen and keyboard access
=1					CHAN_COM1     = 1           ; ID for serial access on COM1 (external port)
=2					CHAN_COM2     = 2           ; ID for serial access on COM2 (internal port)
=3					CHAN_LPT      = 3           ; ID for parallel port
=$afe810				SDCARD_DATA   = $AFE810     ;(R/W) SDCARD (CH376S) Data PORT_A (A0 = 0)
=$afe811				SDCARD_CMD    = $AFE811     ;(R/W) SDCARD (CH376S) CMD/STATUS Port (A0 = 1)
=$afe812				SDCARD_STAT   = $AFE812     ;(R) SDCARD (Bit[0] = CD, Bit[1] = WP)
=$01					SDC_DETECTED = $01          ; SD card has been detected (0 = card present, 1 = no card present)
=$02					SDC_WRITEPROT = $02         ; SD card is write protected (0 = card is writeable, 1 = card is write protected or missing)
=$afe900				CODEC_DATA_LO = $AFE900     ;(W) LSB of Add/Data Reg to Control CODEC See WM8776 Spec
=$afe901				CODEC_DATA_HI = $AFE901     ;(W) MSB od Add/Data Reg to Control CODEC See WM8776 Spec
=$afe902				CODEC_WR_CTRL = $AFE902     ;(W) Bit[0] = 1 -> Start Writing the CODEC Control Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\Trinity_CFP9301_def.asm

=$afe800				JOYSTICK0           = $AFE800   ;(R) Joystick 0 - J7 (next to SD Card)
=$afe801				JOYSTICK1           = $AFE801   ;(R) Joystick 1 - J8
=$afe802				JOYSTICK2           = $AFE802   ;(R) Joystick 2 - J9
=$afe803				JOYSTICK3           = $AFE803   ;(R) Joystick 3 - J10 (Next to Buzzer)
=$afe804				JOYSTICK_MODE       = $AFE804
=$01					NES_SNES_EN0        = $01       ; Enable the NES/SNES Mode on Port 0
=$02					NES_SNES_EN1        = $02       ; Enable the NES/SNES Mode on Port 1
=$04					NES_SNES_JOY        = $04       ; 0 = NES, 1 = SNES
=$40					NES_SNES_DONE       = $40       ; Poll to see if the Deserializer is done
=$80					NES_SNES_TRIG       = $80       ; Set to start the Serializer
=$afe805				REVOFPCB_C          = $AFE805   ; You should read the ASCCII for "C"
=$afe806				REVOFPCB_4          = $AFE806   ; You should read the ASCCII for "4"
=$afe807				REVOFPCB_A          = $AFE807   ; You should read the ASCCII for "A"
=$afe808				NES_SNES0_DAT_LO    = $AFE808   ; Contains the 8bits From NES and SNES
=$afe809				SNES0_DAT_HI0       = $AFE809   ; Contains the extra 4 bit from the SNES Controller
=$afe80a				NES_SNES1_DAT_LO    = $AFE80A
=$afe80b				SNES1_DAT_HI0       = $AFE80B
=$afe80c				CFP9301_REV         = $AFE80C   ; Hardware Revision of the CPLD Code
=$afe80d				DIP_USER            = $AFE80D   ; Dip Switch 3/4/5 can be user Defined
=$afe80e				DIP_BOOTMODE        = $AFE80E
=$01					BOOT_MODE0          = $01
=$02					BOOT_MODE1          = $02
=$80					HD_INSTALLED        = $80
=$00					DIP_BOOT_IDE        = $00
=$01					DIP_BOOT_SDCARD     = $01
=$02					DIP_BOOT_FLOPPY     = $02
=$03					DIP_BOOT_BASIC      = $03

;******  Return to file: src\kernel.asm


;******  Processing file: src\Unity_CFP9307_def.asm

=$afe830				IDE_DATA      = $AFE830 ; 8-Bit Access here Only
=$afe831				IDE_ERROR     = $AFE831 ; Error Information register (only read when there is an error ) - Probably clears Error Bits
=$afe832				IDE_SECT_CNT  = $AFE832 ; Sector Count Register (also used to pass parameter for timeout for IDLE modus Command)
=$afe833				IDE_SECT_SRT  = $AFE833 ; Start Sector Register (0 = 256), so start @ 1
=$afe834				IDE_CLDR_LO   = $AFE834 ; Low Byte of Cylinder Numnber {7:0}
=$afe835				IDE_CLDR_HI   = $AFE835 ;  Hi Byte of Cylinder Number {9:8} (1023-0).
=$afe836				IDE_HEAD      = $AFE836 ; Head, device select, {3:0} HEad Number, 4 -> 0:Master, 1:Slave, {7:5} = 101 (legacy);
=$afe837				IDE_CMD_STAT  = $AFE837 ; Command/Status Register - Reading this will clear the Interrupt Registers
=$afe838				IDE_DATA_LO   = $AFE838 ; 16-bit access here
=$afe839				IDE_DATA_HI   = $AFE839 ;
=$01					IDE_ERR_AMNF = $01      ; Error: Address mark not found
=$02					IDE_ERR_TKZNF = $02     ; Error: Track 0 not found
=$04					IDE_ERR_ABRT = $04      ; Error: Aborted command
=$08					IDE_ERR_MCR = $08       ; Error: Media change request
=$10					IDE_ERR_IDNF = $10      ; Error: ID not found
=$20					IDE_ERR_MC = $20        ; Error: Media change
=$40					IDE_ERR_UNC = $40       ; Error: Uncorrectable data error
=$80					IDE_ERR_BBK = $80       ; Error: Bad block detected
=$80					IDE_STAT_BSY = $80      ; BSY (Busy) is set whenever the device has control of the command Block Registers.
=$40					IDE_STAT_DRDY = $40     ; DRDY (Device Ready) is set to indicate that the device is capable of accepting all command codes.
=$20					IDE_STAT_DF = $20       ; DF (Device Fault) indicates a device fault error has been detected.
=$10					IDE_STAT_DSC = $10      ; DSC (Device Seek Complete) indicates that the device heads are settled over a track.
=$08					IDE_STAT_DRQ = $08      ; DRQ (Data Request) indicates that the device is ready to transfer a word or byte of data between
=$04					IDE_STAT_CORR = $04     ; CORR (Corrected Data) is used to indicate a correctable data error.
=$02					IDE_STAT_IDX = $02      ; Vendor specific bit
=$01					IDE_STAT_ERR = $01      ; ERR (Error) indicates that an error occurred during execution of the previous command.
=$ec					IDE_CMD_IDENTIFY = $EC      ; Get device identification data
=$21					IDE_CMD_READ_SECTOR = $21   ; Read 1 or more sectors
=$30					IDE_CMD_WRITE_SECTOR = $30  ; Write 1 or more sectors

;******  Return to file: src\kernel.asm


;******  Processing file: src\GABE_Control_Registers_def.asm

=$afe880				GABE_MSTR_CTRL      = $AFE880
=$01					GABE_CTRL_PWR_LED   = $01     ; Controls the LED in the Front of the case (Next to the reset button)
=$02					GABE_CTRL_SDC_LED   = $02     ; Controls the LED in the Front of the Case (Next to SDCard)
=$10					GABE_CTRL_BUZZER    = $10     ; Controls the Buzzer
=$80					GABE_CTRL_WRM_RST   = $80     ; Warm Reset (needs to Setup other registers)
=$afe881				GABE_NOTUSED        = $AFE881 ; Reserved for future use
=$afe882				GABE_RST_AUTH0      = $AFE882 ; Must Contain the BYTE $AD for Reset to Activate
=$afe883				GABE_RST_AUTH1      = $AFE883 ; Must Contain the BYTE $DE for Reset to Activate
=$afe884				GABE_RNG_DAT_LO     = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885				GABE_RNG_DAT_HI     = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe884				GABE_RNG_SEED_LO    = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885				GABE_RNG_SEED_HI    = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe886				GABE_RNG_STAT       = $AFE886 ;
=$80					GABE_RNG_LFSR_DONE  = $80     ; indicates that Output = SEED Database
=$afe886				GABE_RNG_CTRL       = $AFE886 ;
=$01					GABE_RNG_CTRL_EN    = $01     ; Enable the LFSR BLOCK_LEN
=$02					GABE_RNG_CTRL_DV    = $02     ; After Setting the Seed Value, Toggle that Bit for it be registered
=$afe887				GABE_SYS_STAT       = $AFE887 ;
=$01					GABE_SYS_STAT_MID0  = $01     ; Machine ID -- LSB
=$02					GABE_SYS_STAT_MID1  = $02     ; Machine ID -- MSB
=$08					GABE_SYS_STAT_EXP   = $08     ; if Zero, there is an Expansion Card Preset
=$40					GABE_SYS_STAT_CPUA  = $40     ; Indicates the (8bit/16bit) Size of the Accumulator
=$80					GABE_SYS_STAT_CPUX  = $80     ; Indicates the (8bit/16bit) Size of the Accumulator

;******  Return to file: src\kernel.asm


;******  Processing file: src\fdc_inc.asm

=$af13f0				SIO_FDC  = $AF13F0
=$af13f0				SIO_FDC_SRA = $AF13F0 ; Read Only - Status Register A (not used in AT mode)
=$af13f1				SIO_FDC_SRB = $AF13F1 ; Read Only - Status Register B (not used in AT mode)
=$af13f2				SIO_FDC_DOR = $AF13F2 ; Read/Write - Digital Output Register
=$01					FDC_DOR_DSEL0 = $01     ; Drive 0 Select
=$02					FDC_DOR_DSEL1 = $02     ; Drive 1 Select
=$04					FDC_DOR_NRESET = $04    ; Reset the FDC
=$08					FDC_DOR_DMAEN = $08     ; Enable DMA
=$10					FDC_DOR_MOT0  = $10     ; Turn on motor 0
=$20					FDC_DOR_MOT1  = $20     ; Turn on motor 1
=$40					FDC_DOR_MOT2  = $40     ; Turn on motor 2
=$80					FDC_DOR_MOT3  = $80     ; Turn on motor 3
=$af13f3				SIO_FDC_TSR = $AF13F3   ; Read/Write - Tape Drive Status (not used on the C256)
=$af13f4				SIO_FDC_MSR = $AF13F4   ; Read - Main Status Register
=$01					FDC_MSR_DRV0BSY = $01   ; Indicates if drive 0 is busy
=$02					FDC_MSR_DRV1BSY = $02   ; Indicates if drive 1 is busy
=$10					FDC_MSR_CMDBSY = $10    ; Indicates if a command is in progress
=$20					FDC_MSR_NONDMA = $20    ;
=$40					FDC_MSR_DIO = $40       ; Data direction: 1 = read, 0 = write
=$80					FDC_MSR_RQM = $80       ; 1 = host can transfer data, 0 = host must wait
=$af13f4				SIO_FDC_DSR = $AF13F4   ; Write - Data Select Register
=$40					FDC_DSR_LOPWR = $40     ; Turn on low power mode
=$80					FDC_DSR_RESET = $80     ; Software reset of the FDC
=$af13f5				SIO_FDC_DTA = $AF13F5   ; Read/Write - Data - FIFO
=$af13f6				SIO_FDC_RSV = $AF13F6   ; Reserved
=$af13f7				SIO_FDC_DIR = $AF13F7   ; Read - Digital Input Register
=$80					FDC_DIR_DSKCHG = $80    ; Indicates if the disk has changed
=$af13f7				SIO_FDC_CCR = $AF13F7   ; Write - Configuration Control Register
=$03					FDC_ST0_DRVSEL = $03    ; Mask for the current selected drive
=$04					FDC_ST0_HEAD = $04      ; Bit for the current selected head
=$08					FDC_ST0_EC = $08        ; Bit for EQUIPMENT CHECK, error in recalibrate or relative seek
=$10					FDC_ST0_SEEKEND = $10   ; The FDC completed a seek, relative seek, or recalibrate
=$c0					FDC_ST0_INTCODE = $C0   ; Mask for interrupt code:
=$01					FDC_ST1_MA = $01        ; Missing address mark
=$02					FDC_ST1_NW = $02        ; Not writable (disk is write protected)
=$04					FDC_ST1_ND = $04        ; No data
=$10					FDC_ST1_OR = $10        ; Overrun/underrun of the data
=$20					FDC_ST1_DE = $20        ; Data error... a CRC check failed
=$80					FDC_ST1_EN = $80        ; End of cylinder: tried to acess a sector not on the track
=$01					FDC_ST2_MD = $01        ; Missing address mark: FDC cannot detect a data address mark
=$02					FDC_ST2_BC = $02        ; Bad cylinder
=$10					FDC_ST2_WC = $10        ; Wrong cylinder: track is not the same as expected
=$20					FDC_ST2_DD = $20        ; Data error in field: CRC error
=$40					FDC_ST2_CM = $40        ; Control mark
=$03					FDC_ST3_DRVSEL = $03    ; Drive select mask
=$04					FDC_ST3_HEAD = $04      ; Head address bit
=$10					FDC_ST3_TRACK0 = $10    ; Track 0: Status of the TRK0 pin
=$40					FDC_ST3_WP = $40        ; Write Protect: status of the WP pin
=2					FDC_CMD_READ_TRACK          = 2
=3					FDC_CMD_SPECIFY             = 3
=4					FDC_CMD_SENSE_DRIVE_STATUS  = 4
=5					FDC_CMD_WRITE_DATA          = 5
=6					FDC_CMD_READ_DATA           = 6
=7					FDC_CMD_RECALIBRATE         = 7
=8					FDC_CMD_SENSE_INTERRUPT     = 8
=9					FDC_CMD_WRITE_DELETED_DATA  = 9
=10					FDC_CMD_READ_ID             = 10
=12					FDC_CMD_READ_DELETED_DATA   = 12
=13					FDC_CMD_FORMAT_TRACK        = 13
=14					FDC_CMD_DUMPREG             = 14
=15					FDC_CMD_SEEK                = 15
=16					FDC_CMD_VERSION             = 16
=17					FDC_CMD_SCAN_EQUAL          = 17
=18					FDC_CMD_PERPENDICULAR_MODE  = 18
=19					FDC_CMD_CONFIGURE           = 19
=20					FDC_CMD_LOCK                = 20
=22					FDC_CMD_VERIFY              = 22
=25					FDC_CMD_SCAN_LOW_OR_EQUAL   = 25
=29					FDC_CMD_SCAN_HIGH_OR_EQUAL  = 29
=$80					FDC_CMD_MT = $80                    ; Command bit to turn on multi-track
=$40					FDC_CMD_MFM = $40                   ; Command bit to operate in MFM format
=$20					FDC_CMD_SK = $20                    ; Command bit to skip deleted sectors
=$40					FDC_CMD_EIS = $40                   ; Command bit to turn on implied seek
=1					FDC_DEVCMD_MOTOR_ON         = 1     ; Device code to turn the motor on
=2					FDC_DEVCMD_MOTOR_OFF        = 2     ; Device code to turn the motor off
=3					FDC_DEVCMD_RECAL            = 3     ; Device code to recalibrate the drive

;******  Return to file: src\kernel.asm


;******  Processing file: src\timer_def.asm

=$000160				TIMER0_CTRL_REG   = $000160 ; (Write - Control, Read Status)
=$01					TMR0_EN     = $01
=$02					TMR0_SCLR   = $02
=$04					TMR0_SLOAD  = $04 ; Use SLOAD is
=$08					TMR0_UPDWN  = $08
=$000161				TIMER0_CHARGE_L   = $000161 ; Use if you want to Precharge and countdown
=$000162				TIMER0_CHARGE_M   = $000162 ;
=$000163				TIMER0_CHARGE_H   = $000163 ;
=$000164				TIMER0_CMP_REG    = $000164 ;
=$01					TMR0_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02					TMR0_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$000165				TIMER0_CMP_L      = $000165 ; Load this Value for Countup
=$000166				TIMER0_CMP_M      = $000166 ;
=$000167				TIMER0_CMP_H      = $000167 ;
=$000168				TIMER1_CTRL_REG   = $000168 ;
=$01					TMR1_EN     = $01
=$02					TMR1_SCLR   = $02
=$04					TMR1_SLOAD  = $04
=$08					TMR1_UPDWN  = $08 ; 1 = Up, 0 = Down
=$000169				TIMER1_CHARGE_L   = $000169 ; Use if you want to Precharge and countdown
=$00016a				TIMER1_CHARGE_M   = $00016A ;
=$00016b				TIMER1_CHARGE_H   = $00016B ;
=$00016c				TIMER1_CMP_REG    = $00016C ;
=$01					TMR1_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02					TMR1_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$00016d				TIMER1_CMP_L      = $00016D ;
=$00016e				TIMER1_CMP_M      = $00016E ;
=$00016f				TIMER1_CMP_H      = $00016F ;

;******  Return to file: src\kernel.asm


;******  Processing file: src\basic_inc.asm

=$3a0000				BASIC = $3A0000
=3801092				MONITOR = BASIC + 4

;******  Return to file: src\kernel.asm


;******  Processing file: src\kernel_jumptable.asm

.381000	5c 00 04 39	jmp $390400	BOOT            JML IBOOT
.381004	5c d0 16 39	jmp $3916d0	RESTORE         JML IRESTORE
.381008	5c a4 06 39	jmp $3906a4	BREAK           JML IBREAK
.38100c	5c eb 06 39	jmp $3906eb	READY           JML IREADY
.381010	5c d1 16 39	jmp $3916d1	SCINIT          JML ISCINIT
.381014	5c d2 16 39	jmp $3916d2	IOINIT          JML IIOINIT
.381018	5c 9e 07 39	jmp $39079e	PUTC            JML IPUTC
.38101c	5c 87 07 39	jmp $390787	PUTS            JML IPUTS
.381020	5c 15 09 39	jmp $390915	PUTB            JML IPUTB
.381024	5c a5 41 39	jmp $3941a5	PUTBLOCK        JML IPUTBLOCK
.381028	5c d3 16 39	jmp $3916d3	SETLFS          JML ISETLFS
.38102c	5c d4 16 39	jmp $3916d4	SETNAM          JML ISETNAM
.381030	5c d5 16 39	jmp $3916d5	OPEN            JML IOPEN
.381034	5c d6 16 39	jmp $3916d6	CLOSE           JML ICLOSE
.381038	5c 06 07 39	jmp $390706	SETIN           JML ISETIN
.38103c	5c 0f 07 39	jmp $39070f	SETOUT          JML ISETOUT
.381040	5c d7 16 39	jmp $3916d7	GETB            JML IGETB
.381044	5c 52 41 39	jmp $394152	GETBLOCK        JML IGETBLOCK
.381048	5c 48 07 39	jmp $390748	GETCH           JML IGETCH
.38104c	5c 21 07 39	jmp $390721	GETCHW          JML IGETCHW
.381050	5c 18 07 39	jmp $390718	GETCHE          JML IGETCHE
.381054	5c d8 16 39	jmp $3916d8	GETS            JML IGETS
.381058	5c d9 16 39	jmp $3916d9	GETLINE         JML IGETLINE
.38105c	5c da 16 39	jmp $3916da	GETFIELD        JML IGETFIELD
.381060	5c db 16 39	jmp $3916db	TRIM            JML ITRIM
.381064	5c dc 16 39	jmp $3916dc	PRINTC          JML IPRINTC
.381068	5c dd 16 39	jmp $3916dd	PRINTS          JML IPRINTS
.38106c	5c 16 09 39	jmp $390916	PRINTCR         JML IPRINTCR
.381070	5c de 16 39	jmp $3916de	PRINTF          JML IPRINTF
.381074	5c df 16 39	jmp $3916df	PRINTI          JML IPRINTI
.381078	5c d6 0a 39	jmp $390ad6	PRINTH          JML IPRINTH
.38107c	5c e0 16 39	jmp $3916e0	PRINTAI         JML IPRINTAI
.381080	5c f3 0a 39	jmp $390af3	PRINTAH         JML IPRINTAH
.381084	5c 1a 0a 39	jmp $390a1a	LOCATE          JML ILOCATE
.381088	5c e1 16 39	jmp $3916e1	PUSHKEY         JML IPUSHKEY
.38108c	5c e2 16 39	jmp $3916e2	PUSHKEYS        JML IPUSHKEYS
.381090	5c 76 09 39	jmp $390976	CSRRIGHT        JML ICSRRIGHT
.381094	5c a9 09 39	jmp $3909a9	CSRLEFT         JML ICSRLEFT
.381098	5c cf 09 39	jmp $3909cf	CSRUP           JML ICSRUP
.38109c	5c f5 09 39	jmp $3909f5	CSRDOWN         JML ICSRDOWN
.3810a0	5c 65 09 39	jmp $390965	CSRHOME         JML ICSRHOME
.3810a4	5c 66 0a 39	jmp $390a66	SCROLLUP        JML ISCROLLUP
.3810a8	5c 41 0b 39	jmp $390b41	CLRSCREEN       JML ICLRSCREEN
.3810ac	5c 0c 0c 39	jmp $390c0c	INITCHLUT	    JML IINITCHLUT
.3810b0	5c f8 0f 39	jmp $390ff8	INITSUPERIO	    JML IINITSUPERIO
.3810b4	5c f7 10 39	jmp $3910f7	INITKEYBOARD    JML IINITKEYBOARD
.3810b8	5c 62 12 39	jmp $391262	TESTSID         JML ITESTSID
.3810bc	5c d7 0f 39	jmp $390fd7	INITCURSOR      JML IINITCURSOR
.3810c0	5c 9f 0f 39	jmp $390f9f	INITFONTSET     JML IINITFONTSET
.3810c4	5c 3b 0c 39	jmp $390c3b	INITGAMMATABLE  JML IINITGAMMATABLE
.3810c8	5c 5b 0c 39	jmp $390c5b	INITALLLUT      JML IINITALLLUT
.3810cc	5c 1d 0d 39	jmp $390d1d	INITVKYTXTMODE  JML IINITVKYTXTMODE
.3810d0	5c 2a 0e 39	jmp $390e2a	INITVKYGRPMODE  JML IINITVKYGRPMODE
.3810d4	5c 61 0e 39	jmp $390e61	INITTILEMODE    JML IINITTILEMODE
.3810d8	5c 62 0e 39	jmp $390e62	INITSPRITE      JML IINITSPRITE
.3810dc	5c 31 13 39	jmp $391331	INITCODEC       JML IINITCODEC
.3810e0	5c ad 13 39	jmp $3913ad	RESETCODEC      JML IRESETCODEC
.3810e4	5c 1b 14 39	jmp $39141b	BMP_PARSER      JML IBMP_PARSER
.3810e8	5c d0 13 39	jmp $3913d0	BM_FILL_SCREEN  JML IBM_FILL_SCREEN
.3810ec	5c 5e 37 39	jmp $39375e	OPL2_TONE_TEST  JML IOPL2_TONE_TEST
.3810f0	5c 1f 54 39	jmp $39541f	F_OPEN          JML IF_OPEN         ; open a file for reading/writing/creating
.3810f4	5c b2 54 39	jmp $3954b2	F_CREATE        JML IF_CREATE       ; create a new file
.3810f8	5c ec 54 39	jmp $3954ec	F_CLOSE         JML IF_CLOSE        ; close a file (make sure last cluster is written)
.3810fc	5c 85 55 39	jmp $395585	F_WRITE         JML IF_WRITE        ; write the current cluster to the file
.381100	5c 20 55 39	jmp $395520	F_READ          JML IF_READ         ; read the next cluster from the file
.381104	5c 2f 56 39	jmp $39562f	F_DELETE        JML IF_DELETE       ; delete a file / directory
.381108	5c f1 55 39	jmp $3955f1	F_DIROPEN       JML IF_DIROPEN      ; open a directory and seek the first directory entry
.38110c	5c 2b 56 39	jmp $39562b	F_DIRNEXT       JML IF_DIRNEXT      ; seek to the next directory of an open directory
.381110	5c c8 56 39	jmp $3956c8	F_DIRREAD       JML IF_DIRREAD      ; Read the directory entry for the specified file
.381114	5c ef 56 39	jmp $3956ef	F_DIRWRITE      JML IF_DIRWRITE     ; Write any changes in the current directory cluster back to the drive
.381118	5c f3 56 39	jmp $3956f3	F_LOAD          JML IF_LOAD         ; load a binary file into memory, supports multiple file formats
.38111c	5c e5 58 39	jmp $3958e5	F_SAVE          JML IF_SAVE         ; Save memory to a binary file
.381120	5c 28 41 39	jmp $394128	CMDBLOCK        JML ICMDBLOCK       ; Send a command to a block device
.381124	5c 7e 59 39	jmp $39597e	F_RUN           JML IF_RUN          ; Load an run a binary file
.381128	5c 43 45 39	jmp $394543	F_MOUNT         JML DOS_MOUNT       ; Mount the designated block device
.38112c	5c 77 0d 39	jmp $390d77	SETSIZES        JML ISETSIZES
.381130	5c a7 5a 39	jmp $395aa7	F_COPY          JML IF_COPY         ; Copy a file
.381134	5c 09 5a 39	jmp $395a09	F_ALLOCFD       JML IF_ALLOCFD      ; Allocate a file descriptor
.381138	5c 5d 5a 39	jmp $395a5d	F_FREEFD        JML IF_FREEFD       ; Free a file descriptor

;******  Return to file: src\kernel.asm


;******  Processing file: src\Interrupt_Handler.asm

.38113c					IRQ_HANDLER
.38113c	e2 20		sep #$20	                SEP #$20        ; set A short
.38113e	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381142	c9 00		cmp #$00	                CMP #$00
.381144	f0 4a		beq $381190	                BEQ CHECK_PENDING_REG1
.381146	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.38114a	29 01		and #$01	                AND #FNX0_INT00_SOF
.38114c	c9 01		cmp #$01	                CMP #FNX0_INT00_SOF
.38114e	d0 09		bne $381159	                BNE SERVICE_NEXT_IRQ2
.381150	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381154	20 fa 11	jsr $3811fa	                JSR SOF_INTERRUPT
.381157	e2 20		sep #$20	                SEP #$20        ; set A short
.381159					SERVICE_NEXT_IRQ2
.381159	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.38115d	29 04		and #$04	                AND #FNX0_INT02_TMR0
.38115f	c9 04		cmp #$04	                CMP #FNX0_INT02_TMR0
.381161	d0 09		bne $38116c	                BNE SERVICE_NEXT_IRQ6
.381163	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381167	20 58 12	jsr $381258	                JSR TIMER0_INTERRUPT
.38116a	e2 20		sep #$20	                SEP #$20        ; set A short
.38116c					SERVICE_NEXT_IRQ6
.38116c	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381170	29 40		and #$40	                AND #FNX0_INT06_FDC
.381172	c9 40		cmp #$40	                CMP #FNX0_INT06_FDC
.381174	d0 09		bne $38117f	                BNE SERVICE_NEXT_IRQ7
.381176	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.38117a	20 b3 12	jsr $3812b3	                JSR FDC_INTERRUPT
.38117d	e2 20		sep #$20	                SEP #$20        ; set A short
.38117f					SERVICE_NEXT_IRQ7
.38117f	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381183	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.381185	c9 80		cmp #$80	                CMP #FNX0_INT07_MOUSE
.381187	d0 07		bne $381190	                BNE CHECK_PENDING_REG1
.381189	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.38118d	20 72 12	jsr $381272	                JSR MOUSE_INTERRUPT
.381190					CHECK_PENDING_REG1
.381190	e2 20		sep #$20	                SEP #$20        ; set A short
.381192	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381196	c9 00		cmp #$00	                CMP #$00
.381198	f0 5d		beq $3811f7	                BEQ EXIT_IRQ_HANDLE
.38119a					SERVICE_NEXT_IRQ8
.38119a	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.38119e	29 01		and #$01	                AND #FNX1_INT00_KBD
.3811a0	c9 01		cmp #$01	                CMP #FNX1_INT00_KBD
.3811a2	d0 09		bne $3811ad	                BNE SERVICE_NEXT_IRQ11
.3811a4	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811a8	20 eb 12	jsr $3812eb	                JSR KEYBOARD_INTERRUPT
.3811ab	e2 20		sep #$20	                SEP #$20        ; set A short
.3811ad					SERVICE_NEXT_IRQ11
.3811ad	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3811b1	29 08		and #$08	                AND #FNX1_INT03_COM2
.3811b3	c9 08		cmp #$08	                CMP #FNX1_INT03_COM2
.3811b5	d0 09		bne $3811c0	                BNE SERVICE_NEXT_IRQ12
.3811b7	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811bb	20 be 12	jsr $3812be	                JSR COM2_INTERRUPT
.3811be	e2 20		sep #$20	                SEP #$20        ; set A short
.3811c0					SERVICE_NEXT_IRQ12
.3811c0	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3811c4	29 10		and #$10	                AND #FNX1_INT04_COM1
.3811c6	c9 10		cmp #$10	                CMP #FNX1_INT04_COM1
.3811c8	d0 09		bne $3811d3	                BNE SERVICE_NEXT_IRQ13
.3811ca	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811ce	20 c9 12	jsr $3812c9	                JSR COM1_INTERRUPT
.3811d1	e2 20		sep #$20	                SEP #$20        ; set A short
.3811d3					SERVICE_NEXT_IRQ13
.3811d3	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3811d7	29 20		and #$20	                AND #FNX1_INT05_MPU401
.3811d9	c9 20		cmp #$20	                CMP #FNX1_INT05_MPU401
.3811db	d0 09		bne $3811e6	                BNE SERVICE_NEXT_IRQ14
.3811dd	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811e1	20 d4 12	jsr $3812d4	                JSR MPU401_INTERRUPT
.3811e4	e2 20		sep #$20	                SEP #$20        ; set A short
.3811e6					SERVICE_NEXT_IRQ14
.3811e6	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3811ea	29 40		and #$40	                AND #FNX1_INT06_LPT
.3811ec	c9 40		cmp #$40	                CMP #FNX1_INT06_LPT
.3811ee	d0 07		bne $3811f7	                BNE EXIT_IRQ_HANDLE
.3811f0	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811f4	20 df 12	jsr $3812df	                JSR LPT1_INTERRUPT
.3811f7					EXIT_IRQ_HANDLE
.3811f7	c2 30		rep #$30	                REP #$30        ; set A&X long
.3811f9	6b		rtl		                RTL
.3811fa					SOF_INTERRUPT
.3811fa	08		php		                PHP
.3811fb	e2 20		sep #$20	                SEP #$20        ; set A short
.3811fd	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381201	29 01		and #$01	                AND #FNX0_INT00_SOF
.381203	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381207	e2 20		sep #$20	                SEP #$20        ; set A short
.381209	af 4e a0 38	lda $38a04e	                LDA @l FDC_MOTOR_TIMER          ; Check the FDC motor count-down timer
.38120d	d0 06		bne $381215	                BNE dec_motor                   ; If not zero: decrement the timer
.38120f	af 4f a0 38	lda $38a04f	                LDA @l FDC_MOTOR_TIMER+1        ; Check the high byte
.381213	f0 28		beq $38123d	                BEQ sof_timeout                 ; If zero: move on to the next timer
.381215	af 4e a0 38	lda $38a04e	dec_motor       LDA @l FDC_MOTOR_TIMER          ; Decrement the low byte
.381219	3a		dec a		                DEC A
.38121a	8f 4e a0 38	sta $38a04e	                STA @l FDC_MOTOR_TIMER
.38121e	c9 ff		cmp #$ff	                CMP #$FF                        ; Did it roll over?
.381220	d0 0b		bne $38122d	                BNE chk_motor_end               ; No: check to see if we're a the end
.381222	af 4f a0 38	lda $38a04f	                LDA @l FDC_MOTOR_TIMER+1        ; Decrement the high byte
.381226	3a		dec a		                DEC A
.381227	8f 4f a0 38	sta $38a04f	                STA @l FDC_MOTOR_TIMER+1
.38122b	80 10		bra $38123d	                BRA sof_timeout                 ; And move on to the next timer
.38122d	af 4e a0 38	lda $38a04e	chk_motor_end   LDA @l FDC_MOTOR_TIMER          ; Check timer
.381231	d0 0a		bne $38123d	                BNE sof_timeout                 ; if it's <>0, move on to the next timer
.381233	af 4f a0 38	lda $38a04f	                LDA @l FDC_MOTOR_TIMER+1
.381237	d0 04		bne $38123d	                BNE sof_timeout
.381239	22 b6 62 39	jsl $3962b6	                JSL FDC_Motor_Off               ; Otherwise, turn off the motor
.38123d					sof_timeout
.38123d	e2 20		sep #$20	                SEP #$20        ; set A short
.38123f	af 2d 03 00	lda $00032d	                LDA @l BIOS_TIMER               ; Check the BIOS_TIMER
.381243	f0 11		beq $381256	                BEQ sof_int_done                ; If it's 0, we don't do anything
.381245	3a		dec a		                DEC A                           ; Count down one tick
.381246	8f 2d 03 00	sta $00032d	                STA @l BIOS_TIMER
.38124a	d0 0a		bne $381256	                BNE sof_int_done                ; If not 0, we're done
.38124c	af 2c 03 00	lda $00032c	                LDA @l BIOS_FLAGS               ; Otherwise: flag a time out event
.381250	09 80		ora #$80	                ORA #BIOS_TIMEOUT
.381252	8f 2c 03 00	sta $00032c	                STA @l BIOS_FLAGS
.381256	28		plp		sof_int_done    PLP
.381257	60		rts		                RTS
.381258					TIMER0_INTERRUPT
.381258	e2 20		sep #$20	                SEP #$20        ; set A short
.38125a	af 05 07 00	lda $000705	                LDA @l TIMERFLAGS               ; Flag that the interrupt has happened
.38125e	09 80		ora #$80	                ORA #TIMER0TRIGGER
.381260	8f 05 07 00	sta $000705	                STA @l TIMERFLAGS
.381264	60		rts		                RTS
.381265					TIMER2_INTERRUPT
.381265	e2 20		sep #$20	                SEP #$20        ; set A short
.381267	af 05 07 00	lda $000705	                LDA @l TIMERFLAGS               ; Flag that the interrupt has happened
.38126b	09 20		ora #$20	                ORA #TIMER2TRIGGER
.38126d	8f 05 07 00	sta $000705	                STA @l TIMERFLAGS
.381271	60		rts		                RTS
.381272					MOUSE_INTERRUPT
.381272	e2 20		sep #$20	                SEP #$20        ; set A short
.381274	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381278	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.38127a	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.38127e	af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF
.381282	a2 00 00	ldx #$0000	                LDX #$0000
.381285	e2 10		sep #$10	                SEP #$10        ; set X short
.381287	a6 e0		ldx $e0		                LDX MOUSE_PTR
.381289	9f 06 07 af	sta $af0706,x	                STA @lMOUSE_PTR_BYTE0, X
.38128d	e8		inx		                INX
.38128e	e0 03		cpx #$03	                CPX #$03
.381290	d0 1c		bne $3812ae	                BNE EXIT_FOR_NEXT_VALUE
.381292	af 02 07 af	lda $af0702	                LDA @lMOUSE_PTR_X_POS_L
.381296	85 e1		sta $e1		                STA MOUSE_POS_X_LO
.381298	af 03 07 af	lda $af0703	                LDA @lMOUSE_PTR_X_POS_H
.38129c	85 e2		sta $e2		                STA MOUSE_POS_X_HI
.38129e	af 04 07 af	lda $af0704	                LDA @lMOUSE_PTR_Y_POS_L
.3812a2	85 e3		sta $e3		                STA MOUSE_POS_Y_LO
.3812a4	af 05 07 af	lda $af0705	                LDA @lMOUSE_PTR_Y_POS_H
.3812a8	85 e4		sta $e4		                STA MOUSE_POS_Y_HI
.3812aa	e2 20		sep #$20	                SEP #$20        ; set A short
.3812ac	a2 00		ldx #$00	                LDX #$00
.3812ae					EXIT_FOR_NEXT_VALUE
.3812ae	86 e0		stx $e0		                STX MOUSE_PTR
.3812b0	c2 10		rep #$10	                REP #$10        ; set X long
.3812b2	60		rts		                RTS
.3812b3					FDC_INTERRUPT
.3812b3	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.3812b7	29 40		and #$40	                AND #FNX0_INT06_FDC
.3812b9	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.3812bd	60		rts		                RTS
.3812be					COM2_INTERRUPT
.3812be	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3812c2	29 08		and #$08	                AND #FNX1_INT03_COM2
.3812c4	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3812c8	60		rts		                RTS
.3812c9					COM1_INTERRUPT
.3812c9	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3812cd	29 10		and #$10	                AND #FNX1_INT04_COM1
.3812cf	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3812d3	60		rts		                RTS
.3812d4					MPU401_INTERRUPT
.3812d4	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3812d8	29 20		and #$20	                AND #FNX1_INT05_MPU401
.3812da	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3812de	60		rts		                RTS
.3812df					LPT1_INTERRUPT
.3812df	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3812e3	29 40		and #$40	                AND #FNX1_INT06_LPT
.3812e5	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3812e9	60		rts		                RTS
.3812ea					NMI_HANDLER
.3812ea	6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\keyboard.asm

.3812eb					KEYBOARD_INTERRUPT
.3812eb	48		pha		                PHA             ; begin setdp macro
.3812ec	08		php		                PHP
.3812ed	c2 20		rep #$20	                REP #$20        ; set A long
.3812ef	a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.3812f2	5b		tcd		                TCD
.3812f3	28		plp		                PLP
.3812f4	68		pla		                PLA             ; end setdp macro
.3812f5	a2 00 00	ldx #$0000	                ldx #$0000
.3812f8	e2 10		sep #$10	                SEP #$10        ; set X short
.3812fa	e2 20		sep #$20	                SEP #$20        ; set A short
.3812fc	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381300	29 01		and #$01	                AND #FNX1_INT00_KBD
.381302	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.381306					IRQ_HANDLER_FETCH
.381306	af 60 10 af	lda $af1060	                LDA @lKBD_INPT_BUF      ; Get Scan Code from KeyBoard
.38130a	85 88		sta $0f88	                STA KEYBOARD_SC_TMP     ; Save Code Immediately
.38130c	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the Prefix was picked up before
.38130e	29 80		and #$80	                AND #$80
.381310	c9 80		cmp #$80	                CMP #$80
.381312	d0 10		bne $381324	                BNE CHK_LSHIFT          ; No: do normal scan-code checks
.381314	a5 87		lda $0f87	PREFIX_ON       LDA KEYBOARD_SC_FLG     ; Otherwise: clear prefix
.381316	29 7f		and #$7f	                AND #$7F
.381318	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.38131a	a5 88		lda $0f88	                LDA KEYBOARD_SC_TMP     ; Get the prefixed scan-code's character
.38131c	aa		tax		                TAX
.38131d	bf 80 75 39	lda $397580,x	                LDA @lScanCode_Prefix_Set1, x
.381321	4c c7 13	jmp $3813c7	                JMP KB_WR_2_SCREEN      ; And save it
.381324	a5 88		lda $0f88	CHK_LSHIFT      LDA KEYBOARD_SC_TMP
.381326	c9 2a		cmp #$2a	                CMP #$2A                ; Left Shift Pressed
.381328	d0 03		bne $38132d	                BNE NOT_KB_SET_LSHIFT
.38132a	82 ad 00	brl $3813da	                BRL KB_SET_SHIFT
.38132d					NOT_KB_SET_LSHIFT
.38132d	c9 aa		cmp #$aa	                CMP #$AA                ; Left Shift Unpressed
.38132f	d0 03		bne $381334	                BNE NOT_KB_CLR_LSHIFT
.381331	82 af 00	brl $3813e3	                BRL KB_CLR_SHIFT
.381334					NOT_KB_CLR_LSHIFT
.381334	c9 36		cmp #$36	                CMP #$36                ; Right Shift Pressed
.381336	d0 03		bne $38133b	                BNE NOT_KB_SET_RSHIFT
.381338	82 9f 00	brl $3813da	                BRL KB_SET_SHIFT
.38133b					NOT_KB_SET_RSHIFT
.38133b	c9 b6		cmp #$b6	                CMP #$B6                ; Right Shift Unpressed
.38133d	d0 03		bne $381342	                BNE NOT_KB_CLR_RSHIFT
.38133f	82 a1 00	brl $3813e3	                BRL KB_CLR_SHIFT
.381342					NOT_KB_CLR_RSHIFT
.381342	c9 1d		cmp #$1d	                CMP #$1D                ; Left CTRL pressed
.381344	d0 03		bne $381349	                BNE NOT_KB_SET_CTRL
.381346	82 a3 00	brl $3813ec	                BRL KB_SET_CTRL
.381349					NOT_KB_SET_CTRL
.381349	c9 9d		cmp #$9d	                CMP #$9D                ; Left CTRL Unpressed
.38134b	d0 03		bne $381350	                BNE NOT_KB_CLR_CTRL
.38134d	82 a5 00	brl $3813f5	                BRL KB_CLR_CTRL
.381350					NOT_KB_CLR_CTRL
.381350	c9 38		cmp #$38	                CMP #$38                ; Left ALT Pressed
.381352	d0 03		bne $381357	                BNE NOT_KB_SET_ALT
.381354	82 a7 00	brl $3813fe	                BRL KB_SET_ALT
.381357					NOT_KB_SET_ALT
.381357	c9 b8		cmp #$b8	                CMP #$B8                ; Left ALT Unpressed
.381359	d0 03		bne $38135e	                BNE NOT_KB_CLR_ALT
.38135b	82 a9 00	brl $381407	                BRL KB_CLR_ALT
.38135e	c9 e0		cmp #$e0	NOT_KB_CLR_ALT  CMP #$E0                ; Prefixed scan code
.381360	d0 03		bne $381365	                BNE NOT_PREFIXED
.381362	82 ab 00	brl $381410	                BRL KB_SET_PREFIX
.381365	c9 45		cmp #$45	NOT_PREFIXED    CMP #$45                ; Numlock Pressed
.381367	d0 03		bne $38136c	                BNE NOT_KB_SET_NUM
.381369	82 b6 00	brl $381422	                BRL KB_TOG_NUMLOCK
.38136c	c9 46		cmp #$46	NOT_KB_SET_NUM  CMP #$46                ; Scroll Lock Pressed
.38136e	d0 03		bne $381373	                BNE NOT_KB_SET_SCR
.381370	82 a6 00	brl $381419	                BRL KB_TOG_SCRLOCK
.381373	c9 3a		cmp #$3a	NOT_KB_SET_SCR  CMP #$3A                ; Caps Lock Pressed
.381375	d0 03		bne $38137a	                BNE NOT_KB_CAPSLOCK
.381377	82 bc 00	brl $381436	                BRL KB_TOG_CAPLOCK
.38137a	c9 58		cmp #$58	NOT_KB_CAPSLOCK CMP #$58                ; F12 Pressed
.38137c	d0 09		bne $381387	                BNE KB_UNPRESSED
.38137e	a9 60		lda #$60	                LDA #KB_CREDITS         ; Yes: flag that the CREDITS key has been pressed
.381380	8f 8a 0f 00	sta $000f8a	                STA @lKEYFLAG
.381384	82 b5 00	brl $38143c	                BRL KB_CHECK_B_DONE
.381387	29 80		and #$80	KB_UNPRESSED    AND #$80                ; See if the Scan Code is press or Depressed
.381389	c9 80		cmp #$80	                CMP #$80                ; Depress Status - We will not do anything at this point
.38138b	d0 03		bne $381390	                BNE KB_NORM_SC
.38138d	82 ac 00	brl $38143c	                BRL KB_CHECK_B_DONE
.381390	a5 88		lda $0f88	KB_NORM_SC      LDA KEYBOARD_SC_TMP       ;
.381392	aa		tax		                TAX
.381393	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the SHIFT Key is being Pushed
.381395	29 10		and #$10	                AND #$10
.381397	c9 10		cmp #$10	                CMP #$10
.381399	f0 17		beq $3813b2	                BEQ SHIFT_KEY_ON
.38139b	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the CTRL Key is being Pushed
.38139d	29 20		and #$20	                AND #$20
.38139f	c9 20		cmp #$20	                CMP #$20
.3813a1	f0 16		beq $3813b9	                BEQ CTRL_KEY_ON
.3813a3	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the ALT Key is being Pushed
.3813a5	29 40		and #$40	                AND #$40
.3813a7	c9 40		cmp #$40	                CMP #$40
.3813a9	f0 15		beq $3813c0	                BEQ ALT_KEY_ON
.3813ab	bf 00 73 39	lda $397300,x	                LDA @lScanCode_Press_Set1, x
.3813af	82 15 00	brl $3813c7	                BRL KB_WR_2_SCREEN
.3813b2	bf 80 73 39	lda $397380,x	SHIFT_KEY_ON    LDA @lScanCode_Shift_Set1, x
.3813b6	82 0e 00	brl $3813c7	                BRL KB_WR_2_SCREEN
.3813b9	bf 00 74 39	lda $397400,x	CTRL_KEY_ON     LDA @lScanCode_Ctrl_Set1, x
.3813bd	82 07 00	brl $3813c7	                BRL KB_WR_2_SCREEN
.3813c0	bf 80 74 39	lda $397480,x	ALT_KEY_ON      LDA @lScanCode_Alt_Set1, x
.3813c4	82 00 00	brl $3813c7	                BRL KB_WR_2_SCREEN
.3813c7	c9 18		cmp #$18	KB_WR_2_SCREEN  CMP #$18                ; Is it SysRq?
.3813c9	d0 03		bne $3813ce	                BNE savechar
.3813cb	4c 4c 14	jmp $38144c	                JMP programmerKey       ; Yes: trigger the programmer key
.3813ce	48		pha		savechar        PHA
.3813cf	c2 10		rep #$10	                REP #$10        ; set X long
.3813d1	20 58 14	jsr $381458	                JSR SAVEKEY
.3813d4	e2 20		sep #$20	                SEP #$20        ; set A short
.3813d6	68		pla		                PLA
.3813d7	4c 3c 14	jmp $38143c	                JMP KB_CHECK_B_DONE
.3813da	a5 87		lda $0f87	KB_SET_SHIFT    LDA KEYBOARD_SC_FLG
.3813dc	09 10		ora #$10	                ORA #$10
.3813de	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813e0	4c 3c 14	jmp $38143c	                JMP KB_CHECK_B_DONE
.3813e3	a5 87		lda $0f87	KB_CLR_SHIFT    LDA KEYBOARD_SC_FLG
.3813e5	29 ef		and #$ef	                AND #$EF
.3813e7	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813e9	4c 3c 14	jmp $38143c	                JMP KB_CHECK_B_DONE
.3813ec	a5 87		lda $0f87	KB_SET_CTRL     LDA KEYBOARD_SC_FLG
.3813ee	09 20		ora #$20	                ORA #$20
.3813f0	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813f2	4c 3c 14	jmp $38143c	                JMP KB_CHECK_B_DONE
.3813f5	a5 87		lda $0f87	KB_CLR_CTRL     LDA KEYBOARD_SC_FLG
.3813f7	29 df		and #$df	                AND #$DF
.3813f9	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813fb	4c 3c 14	jmp $38143c	                JMP KB_CHECK_B_DONE
.3813fe	a5 87		lda $0f87	KB_SET_ALT      LDA KEYBOARD_SC_FLG
.381400	09 40		ora #$40	                ORA #$40
.381402	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.381404	4c 3c 14	jmp $38143c	                JMP KB_CHECK_B_DONE
.381407	a5 87		lda $0f87	KB_CLR_ALT      LDA KEYBOARD_SC_FLG
.381409	29 bf		and #$bf	                AND #$BF
.38140b	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.38140d	4c 3c 14	jmp $38143c	                JMP KB_CHECK_B_DONE
.381410	a5 87		lda $0f87	KB_SET_PREFIX   LDA KEYBOARD_SC_FLG
.381412	09 80		ora #$80	                ORA #$80
.381414	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.381416	4c 3c 14	jmp $38143c	                JMP KB_CHECK_B_DONE
.381419	a5 89		lda $0f89	KB_TOG_SCRLOCK  LDA KEYBOARD_LOCKS
.38141b	49 01		eor #$01	                EOR #KB_SCROLL_LOCK         ; toggle the Scroll Lock flag
.38141d	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.38141f	4c 3c 14	jmp $38143c	                JMP KB_CHECK_B_DONE
.381422	a5 87		lda $0f87	KB_TOG_NUMLOCK  LDA KEYBOARD_SC_FLG         ; Check flags...
.381424	29 60		and #$60	                AND #$60                    ; ... is control-alt pressed?
.381426	c9 60		cmp #$60	                CMP #$60
.381428	d0 03		bne $38142d	                BNE KB_TOG_NUMLOC2
.38142a	82 63 ff	brl $381390	                BRL KB_NORM_SC              ; No: treat as a BREAK key
.38142d	a5 89		lda $0f89	KB_TOG_NUMLOC2  LDA KEYBOARD_LOCKS
.38142f	49 02		eor #$02	                EOR #KB_NUM_LOCK            ; toggle the Num Lock flag
.381431	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.381433	4c 3c 14	jmp $38143c	                JMP KB_CHECK_B_DONE
.381436	a5 89		lda $0f89	KB_TOG_CAPLOCK  LDA KEYBOARD_LOCKS
.381438	49 04		eor #$04	                EOR #KB_CAPS_LOCK           ; toggle the Caps Lock flag
.38143a	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.38143c					KB_CHECK_B_DONE
.38143c	af 64 10 af	lda $af1064	                LDA STATUS_PORT
.381440	29 01		and #$01	                AND #OUT_BUF_FULL           ; Test bit $01 (if 1, Full)
.381442	c9 01		cmp #$01	                CMP #OUT_BUF_FULL           ; if Still Byte in the Buffer, fetch it out
.381444	d0 03		bne $381449	                BNE SET_LED
.381446	4c 06 13	jmp $381306	                JMP IRQ_HANDLER_FETCH
.381449					SET_LED
.381449					KB_DONE
.381449	c2 30		rep #$30	                REP #$30        ; set A&X long
.38144b	60		rts		                RTS
.38144c					programmerKey
.38144c	c2 30		rep #$30	                REP #$30        ; set A&X long
.38144e	68		pla		                PLA                     ; Get and throw-away the return address to the interrupt handler
.38144f	2b		pld		                PLD                     ; Restore the registers that were present when the handler was invoked
.381450	ab		plb		                PLB
.381451	7a		ply		                PLY
.381452	fa		plx		                PLX
.381453	68		pla		                PLA
.381454	5c 08 10 38	jmp $381008	                JML BREAK               ; And go to the BRK handler directly to open the monitor
.381458					SAVEKEY
.381458	e2 20		sep #$20	                SEP #$20        ; set A short
.38145a	48		pha		                PHA                     ; Save the character
.38145b	a5 89		lda $0f89	                LDA KEYBOARD_LOCKS      ; Check the keyboard lock flags
.38145d	29 04		and #$04	                AND #KB_CAPS_LOCK       ; Is CAPS lock on?
.38145f	f0 0d		beq $38146e	                BEQ no_caps             ; No... just use the character as-is
.381461	68		pla		                PLA                     ; Get the character back
.381462	c9 61		cmp #$61	                CMP #'a'                ; Is it < 'a'
.381464	90 09		bcc $38146f	                BLT check_break         ; Yes: just use as-is
.381466	c9 7b		cmp #$7b	                CMP #'z'+1              ; Is it > 'z'
.381468	b0 05		bcs $38146f	                BGE check_break         ; Yes: just us as-is
.38146a	29 df		and #$df	                AND #%11011111          ; Conver to upper case
.38146c	80 01		bra $38146f	                BRA check_break
.38146e	68		pla		no_caps         PLA                     ; Restore the character
.38146f	c9 00		cmp #$00	check_break     CMP #0
.381471	f0 18		beq $38148b	                BEQ done
.381473	c9 03		cmp #$03	                CMP #CHAR_CTRL_C        ; Is it CTRL-C?
.381475	f0 15		beq $38148c	                BEQ flag_break          ; Yes: flag a break
.381477	a6 8d		ldx $0f8d	no_break        LDX KEY_BUFFER_WPOS     ; So the Receive Character is saved in the Buffer
.381479	e0 80 00	cpx #$0080	                CPX #KEY_BUFFER_SIZE    ; Make sure we haven't been overboard.
.38147c	b0 0d		bcs $38148b	                BCS done                ; Stop storing - An error should ensue here...
.38147e	9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER,X
.381482	e8		inx		                INX
.381483	86 8d		stx $0f8d	                STX KEY_BUFFER_WPOS
.381485	a9 00		lda #$00	                LDA #$00
.381487	9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER, X       ; Store a EOL in the following location for good measure
.38148b	60		rts		done            RTS
.38148c					flag_break
.38148c	e2 20		sep #$20	                SEP #$20        ; set A short
.38148e	a9 80		lda #$80	                LDA #KB_CTRL_C          ; Flag that an interrupt key has been pressed
.381490	85 8a		sta $0f8a	                STA KEYFLAG             ; The interpreter should see this soon and throw a BREAK
.381492	60		rts		                RTS
.381493					KBD_GETC
.381493	da		phx		                PHX
.381494	0b		phd		                PHD
.381495	08		php		                PHP
.381496	48		pha		                PHA             ; begin setdp macro
.381497	08		php		                PHP
.381498	c2 20		rep #$20	                REP #$20        ; set A long
.38149a	a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.38149d	5b		tcd		                TCD
.38149e	28		plp		                PLP
.38149f	68		pla		                PLA             ; end setdp macro
.3814a0	e2 20		sep #$20	                SEP #$20        ; set A short
.3814a2	c2 10		rep #$10	                REP #$10        ; set X long
.3814a4	58		cli		                CLI                     ; Make sure interrupts can happen
.3814a5	af 8a 0f 00	lda $000f8a	get_wait        LDA @lKEYFLAG           ; Check the keyboard control flag
.3814a9	29 60		and #$60	                AND #KB_CREDITS         ; Are the credits flagged?
.3814ab	c9 60		cmp #$60	                CMP #KB_CREDITS
.3814ad	d0 0a		bne $3814b9	                BNE check_buffer        ; No: check the key buffer
.3814af	a9 00		lda #$00	                LDA #0                  ; Yes: clear the flags
.3814b1	8f 8a 0f 00	sta $000f8a	                STA @lKEYFLAG
.3814b5	22 8a 16 39	jsl $39168a	                JSL SHOW_CREDITS        ; Then show the credits screen and wait for a key press
.3814b9	a6 8b		ldx $0f8b	check_buffer    LDX KEY_BUFFER_RPOS     ; Is KEY_BUFFER_RPOS < KEY_BUFFER_WPOS
.3814bb	e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS
.3814bd	90 02		bcc $3814c1	                BCC read_buff           ; Yes: a key is present, read it
.3814bf	80 e4		bra $3814a5	                BRA get_wait            ; Otherwise, keep waiting
.3814c1	78		sei		read_buff       SEI                     ; Don't interrupt me!
.3814c2	b5 00		lda $0f00,x	                LDA KEY_BUFFER,X        ; Get the key
.3814c4	e8		inx		                INX                     ; And move to the next key
.3814c5	e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS     ; Did we just read the last key?
.3814c7	f0 07		beq $3814d0	                BEQ reset_indexes       ; Yes: return to 0 position
.3814c9	86 8b		stx $0f8b	                STX KEY_BUFFER_RPOS     ; Otherwise: Update the read index
.3814cb	58		cli		                CLI
.3814cc	28		plp		done            PLP                     ; Restore status and interrupts
.3814cd	2b		pld		                PLD
.3814ce	fa		plx		                PLX
.3814cf	6b		rtl		                RTL
.3814d0	64 8b		stz $0f8b	reset_indexes   STZ KEY_BUFFER_RPOS     ; Reset read index to the beginning
.3814d2	64 8d		stz $0f8d	                STZ KEY_BUFFER_WPOS     ; Reset the write index to the beginning
.3814d4	80 f6		bra $3814cc	                BRA done

;******  Return to file: src\kernel.asm

.390400					IBOOT
.390400	18		clc		                CLC               ; clear the carry flag
.390401	fb		xce		                XCE               ; move carry to emulation flag.
.390402	78		sei		                SEI               ; Disable interrupts
.390403	c2 30		rep #$30	                REP #$30        ; set A&X long
.390405	a9 ff fe	lda #$feff	                LDA #STACK_END    ; initialize stack pointer
.390408	1b		tcs		                TAS
.390409	a2 00 10	ldx #$1000	                LDX #<>BOOT       ; Copy the kernel jump table to bank 0
.39040c	a0 00 10	ldy #$1000	                LDY #<>BOOT       ; Ordinarily, this is done by GAVIN, but
.39040f	a9 00 01	lda #$0100	                LDA #$0100        ; this is ensures it can be reloaded in case of errors
.390412	54 00 38	mvn $38,$00	                MVN `BOOT,$00     ; Or during soft loading of the kernel from the debug port
.390415	48		pha		                PHA             ; begin setdp macro
.390416	08		php		                PHP
.390417	c2 20		rep #$20	                REP #$20        ; set A long
.390419	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39041c	5b		tcd		                TCD
.39041d	28		plp		                PLP
.39041e	68		pla		                PLA             ; end setdp macro
.39041f	e2 20		sep #$20	                SEP #$20        ; set A short
.390421	a2 00 00	ldx #$0000	                LDX #$0000
.390424	a9 00		lda #$00	                LDA #$00
.390426					CLEAR_MEM_LOOP
.390426	95 00		sta $00,x	                STA $0000, X
.390428	e8		inx		                INX
.390429	e0 00 01	cpx #$0100	                CPX #$0100
.39042c	d0 f8		bne $390426	                BNE CLEAR_MEM_LOOP
.39042e	ea		nop		                NOP
.39042f	a9 ff		lda #$ff	                LDA #$FF
.390431	8f 48 01 00	sta $000148	                STA @lINT_EDGE_REG0
.390435	8f 49 01 00	sta $000149	                STA @lINT_EDGE_REG1
.390439	8f 4a 01 00	sta $00014a	                STA @lINT_EDGE_REG2
.39043d	8f 4b 01 00	sta $00014b	                STA @lINT_EDGE_REG3
.390441	8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.390445	8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.390449	8f 4e 01 00	sta $00014e	                STA @lINT_MASK_REG2
.39044d	8f 4f 01 00	sta $00014f	                STA @lINT_MASK_REG3
.390451	22 47 12 39	jsl $391247	                JSL INITRTC               ; Initialize the RTC
.390455	c2 30		rep #$30	                REP #$30        ; set A&X long
.390457	a9 00 a0	lda #$a000	                LDA #<>SCREEN_PAGE0      ; store the initial screen buffer location
.39045a	85 0c		sta $0c		                STA SCREENBEGIN
.39045c	85 17		sta $17		                STA CURSORPOS
.39045e	a9 00 c0	lda #$c000	                LDA #<>CS_COLOR_MEM_PTR   ; Set the initial COLOR cursor position
.390461	85 1f		sta $1f		                STA COLORPOS
.390463	e2 20		sep #$20	                SEP #$20        ; set A short
.390465	a9 af		lda #$af	                LDA #`SCREEN_PAGE0
.390467	85 0e		sta $0e		                STA SCREENBEGIN+2
.390469	85 19		sta $19		                STA CURSORPOS+2
.39046b	a9 af		lda #$af	                LDA #`CS_COLOR_MEM_PTR    ; Set the initial COLOR cursor position
.39046d	85 21		sta $21		                STA COLORPOS+2
.39046f	e2 20		sep #$20	                SEP #$20        ; set A short
.390471	a9 00		lda #$00	                LDA #$00
.390473	8d 87 0f	sta $0f87	                STA KEYBOARD_SC_FLG     ; Clear the Keyboard Flag
.390476	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.390478	8f 00 f1 af	sta $aff100	                STA $AFF100
.39047c	a9 bf		lda #$bf	                LDA #$BF ; Channel Two - No Atteniation
.39047e	8f 00 f1 af	sta $aff100	                STA $AFF100
.390482	a9 df		lda #$df	                LDA #$DF ; Channel Two - No Atteniation
.390484	8f 00 f1 af	sta $aff100	                STA $AFF100
.390488	a9 ff		lda #$ff	                LDA #$FF ; Channel Two - No Atteniation
.39048a	8f 00 f1 af	sta $aff100	                STA $AFF100
.39048e	c2 30		rep #$30	                REP #$30        ; set A&X long
.390490	a2 48 00	ldx #$0048	                LDX #72
.390493	86 0f		stx $0f		                STX COLS_VISIBLE
.390495	a0 34 00	ldy #$0034	                LDY #52
.390498	84 13		sty $13		                STY LINES_VISIBLE
.39049a	a2 80 00	ldx #$0080	                LDX #128
.39049d	86 11		stx $11		                STX COLS_PER_LINE
.39049f	a0 40 00	ldy #$0040	                LDY #64
.3904a2	84 15		sty $15		                STY LINES_MAX
.3904a4	a9 ed 00	lda #$00ed	                LDA #$ED                  ; Set the default text color to light gray on dark gray
.3904a7	85 1e		sta $1e		                STA CURCOLOR
.3904a9	22 dc 10 38	jsl $3810dc	                JSL INITCODEC
.3904ad	22 b0 10 38	jsl $3810b0	                JSL INITSUPERIO
.3904b1	22 c4 10 38	jsl $3810c4	                JSL INITGAMMATABLE
.3904b5	22 c8 10 38	jsl $3810c8	                JSL INITALLLUT
.3904b9	22 ac 10 38	jsl $3810ac	                JSL INITCHLUT
.3904bd	22 b8 0f 39	jsl $390fb8	                JSL INITMOUSEPOINTER
.3904c1	22 bc 10 38	jsl $3810bc	                JSL INITCURSOR
.3904c5	22 cc 10 38	jsl $3810cc	                JSL INITVKYTXTMODE
.3904c9	22 9f 0f 39	jsl $390f9f	                JSL IINITFONTSET
.3904cd	22 41 0b 39	jsl $390b41	                JSL ICLRSCREEN  ; Clear Screen and Set a standard color in Color Memory
.3904d1	a9 01 00	lda #$0001	                LDA #CHAN_COM1    ; Initialize COM1
.3904d4	22 be 5b 39	jsl $395bbe	                JSL UART_SELECT
.3904d8	22 2a 5c 39	jsl $395c2a	                JSL UART_INIT
.3904dc	a9 02 00	lda #$0002	                LDA #CHAN_COM2    ; Initialize COM2
.3904df	22 be 5b 39	jsl $395bbe	                JSL UART_SELECT
.3904e3	22 2a 5c 39	jsl $395c2a	                JSL UART_INIT
.3904e7	a9 00 00	lda #$0000	                LDA #0
.3904ea	22 38 10 38	jsl $381038	                JSL SETIN
.3904ee	22 3c 10 38	jsl $38103c	                JSL SETOUT
.3904f2	c2 20		rep #$20	                REP #$20        ; set A long
.3904f4	a2 00 00	ldx #$0000	                LDX #0
.3904f7	a0 00 00	ldy #$0000	                LDY #0
.3904fa	22 1a 0a 39	jsl $390a1a	                JSL ILOCATE
.3904fe	c2 30		rep #$30	                REP #$30        ; set A&X long
.390500					greet
.390500	48		pha		                PHA             ; begin setdbr macro
.390501	08		php		                PHP
.390502	e2 20		sep #$20	                SEP #$20        ; set A short
.390504	a9 39		lda #$39	                LDA #`greet_msg
.390506	48		pha		                PHA
.390507	ab		plb		                PLB
.390508	28		plp		                PLP
.390509	68		pla		                PLA             ; end setdbr macro
.39050a	a2 ad 6d	ldx #$6dad	                LDX #<>greet_msg
.39050d	22 7e 07 39	jsl $39077e	                JSL IPRINT       ; print the first line
.390511	22 8c 0b 39	jsl $390b8c	                JSL ICOLORFLAG  ; This is to set the Color Memory for the Logo
.390515	48		pha		                PHA             ; begin setdp macro
.390516	08		php		                PHP
.390517	c2 20		rep #$20	                REP #$20        ; set A long
.390519	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39051c	5b		tcd		                TCD
.39051d	28		plp		                PLP
.39051e	68		pla		                PLA             ; end setdp macro
.39051f	22 b4 10 38	jsl $3810b4	                JSL INITKEYBOARD ;
.390523	e2 20		sep #$20	                SEP #$20        ; set A short
.390525	c2 10		rep #$10	                REP #$10        ; set X long
.390527	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.390529	8f 00 f1 af	sta $aff100	                STA $AFF100
.39052d	a9 bf		lda #$bf	                LDA #$BF ; Channel Two - No Atteniation
.39052f	8f 00 f1 af	sta $aff100	                STA $AFF100
.390533	a9 df		lda #$df	                LDA #$DF ; Channel Two - No Atteniation
.390535	8f 00 f1 af	sta $aff100	                STA $AFF100
.390539	a9 ff		lda #$ff	                LDA #$FF ; Channel Two - No Atteniation
.39053b	8f 00 f1 af	sta $aff100	                STA $AFF100
.39053f	a9 83		lda #$83	                LDA #$83 ; Channel Zero - No Atteniation
.390541	8f 00 f1 af	sta $aff100	                STA $AFF100
.390545	a9 12		lda #$12	                LDA #$12 ; Channel Zero - No Atteniation
.390547	8f 00 f1 af	sta $aff100	                STA $AFF100
.39054b	a9 90		lda #$90	                LDA #$90 ; Channel One - No Atteniation
.39054d	8f 00 f1 af	sta $aff100	                STA $AFF100
.390551	a2 00 40	ldx #$4000	                LDX #16384      ; 400ms
.390554	22 18 16 39	jsl $391618	          		 	JSL ILOOP_MS
.390558	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.39055a	8f 00 f1 af	sta $aff100	                STA $AFF100
.39055e	58		cli		                CLI                   ; Make sure no Interrupt will come and fuck up Init before this point.
.39055f	e2 20		sep #$20	                SEP #$20        ; set A short
.390561	c2 10		rep #$10	                REP #$10        ; set X long
.390563	48		pha		                PHA             ; begin setdbr macro
.390564	08		php		                PHP
.390565	e2 20		sep #$20	                SEP #$20        ; set A short
.390567	a9 39		lda #$39	                LDA #`greet_msg
.390569	48		pha		                PHA
.39056a	ab		plb		                PLB
.39056b	28		plp		                PLP
.39056c	68		pla		                PLA             ; end setdbr macro
.39056d	a2 00 00	ldx #$0000	                LDX #0
.390570	bf 00 10 38	lda $381000,x	jmpcopy         LDA @l BOOT,X
.390574	9f 00 10 00	sta $001000,x	                STA @l $001000,X
.390578	e8		inx		                INX
.390579	e0 00 10	cpx #$1000	                CPX #$1000
.39057c	d0 f2		bne $390570	                BNE jmpcopy
.39057e	22 71 44 39	jsl $394471	retry_boot      JSL DOS_INIT          ; Initialize the "disc operating system"
.390582	22 2c 06 39	jsl $39062c	                JSL BOOT_MENU         ; Show the splash screen / boot menu and wait for key presses
.390586	c9 20		cmp #$20	                CMP #CHAR_SP          ; Did the user press SPACE?
.390588	f0 10		beq $39059a	                BEQ BOOT_DIP          ; Yes: boot via the DIP switches
.39058a	c9 0d		cmp #$0d	                CMP #CHAR_CR          ; Did the user press RETURN?
.39058c	f0 1e		beq $3905ac	                BEQ BOOTBASIC         ; Yes: go straight to BASIC
.39058e	c9 81		cmp #$81	                CMP #CHAR_F1          ; Did the user press F1?
.390590	f0 54		beq $3905e6	                BEQ BOOTFLOPPY        ; Yes: boot via the floppy
.390592	c9 82		cmp #$82	                CMP #CHAR_F2          ; Did the user press F2?
.390594	f0 1d		beq $3905b3	                BEQ BOOTSDC           ; Yes: boot via the SDC
.390596	c9 83		cmp #$83	                CMP #CHAR_F3          ; Did the user press F3?
.390598	f0 32		beq $3905cc	                BEQ BOOTIDE           ; Yes: boot via the IDE
.39059a	af 0e e8 af	lda $afe80e	BOOT_DIP        LDA @lDIP_BOOTMODE    ; {HD_INSTALLED, 5'b0_0000, BOOT_MODE[1], BOOT_MODE[0]}
.39059e	29 03		and #$03	                AND #%00000011        ; Look at the mode bits
.3905a0	c9 00		cmp #$00	                CMP #DIP_BOOT_IDE     ; DIP set for IDE?
.3905a2	f0 28		beq $3905cc	                BEQ BOOTIDE           ; Yes: Boot from the IDE
.3905a4	c9 01		cmp #$01	                CMP #DIP_BOOT_SDCARD  ; DIP set for SD card?
.3905a6	f0 0b		beq $3905b3	                BEQ BOOTSDC           ; Yes: try to boot from the SD card
.3905a8	c9 02		cmp #$02	                CMP #DIP_BOOT_FLOPPY  ; DIP set for floppy?
.3905aa	f0 3a		beq $3905e6	                BEQ BOOTFLOPPY        ; Yes: try to boot from the floppy
.3905ac	5c 00 00 3a	jmp $3a0000	BOOTBASIC       JML BASIC             ; Cold start of the BASIC interpreter (or its replacement)
.3905b0	ea		nop		CREDIT_LOCK     NOP
.3905b1	80 fd		bra $3905b0	                BRA CREDIT_LOCK
.3905b3					BOOTSDC
.3905b3	e2 20		sep #$20	                SEP #$20        ; set A short
.3905b5	a9 02		lda #$02	                LDA #BIOS_DEV_SD
.3905b7	8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3905bb	22 43 45 39	jsl $394543	                JSL DOS_MOUNT         ; Mount the SDC
.3905bf	90 06		bcc $3905c7	                BCC sdc_error         ; Print an error message if couldn't get anything
.3905c1	22 fe 46 39	jsl $3946fe	                JSL DOS_TESTBOOT      ; Try to boot from the SDC's MBR
.3905c5	80 e5		bra $3905ac	                BRA BOOTBASIC         ; If we couldn't fall, into BASIC
.3905c7	a2 8a 71	ldx #$718a	sdc_error       LDX #<>sdc_err_boot   ; Print a message saying SD card booting is not implemented
.3905ca	80 39		bra $390605	                BRA PR_BOOT_ERROR
.3905cc					BOOTIDE
.3905cc	e2 20		sep #$20	                SEP #$20        ; set A short
.3905ce	a9 06		lda #$06	                LDA #BIOS_DEV_HD0
.3905d0	8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3905d4	22 43 45 39	jsl $394543	                JSL DOS_MOUNT         ; Mount the IDE drive
.3905d8	90 07		bcc $3905e1	                BCC hdc_error         ; Print an error message if couldn't get anything
.3905da	22 fe 46 39	jsl $3946fe	                JSL DOS_TESTBOOT      ; Try to boot from the IDE's MBR
.3905de	82 cb ff	brl $3905ac	                BRL BOOTBASIC         ; If we couldn't fall, into BASIC
.3905e1	a2 a6 71	ldx #$71a6	hdc_error       LDX #<>ide_err_boot   ; Print a message saying SD card booting is not implemented
.3905e4	80 1f		bra $390605	                BRA PR_BOOT_ERROR
.3905e6	a2 ef 71	ldx #$71ef	BOOTFLOPPY      LDX #<>fdc_boot
.3905e9	22 7e 07 39	jsl $39077e	                JSL IPRINT
.3905ed	e2 20		sep #$20	                SEP #$20        ; set A short
.3905ef	a9 00		lda #$00	                LDA #BIOS_DEV_FDC
.3905f1	8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3905f5	22 98 67 39	jsl $396798	                JSL FDC_MOUNT         ; Mount the floppy drive
.3905f9	90 07		bcc $390602	                BCC fdc_error         ; Print an error message if couldn't get anything
.3905fb	22 fe 46 39	jsl $3946fe	                JSL DOS_TESTBOOT      ; Try to boot from the FDC's MBR
.3905ff	82 aa ff	brl $3905ac	                BRL BOOTBASIC         ; If we couldn't, fall into BASIC
.390602	a2 c9 71	ldx #$71c9	fdc_error       LDX #<>fdc_err_boot   ; Print a message saying SD card booting is not implemented
.390605	22 7e 07 39	jsl $39077e	PR_BOOT_ERROR   JSL IPRINT            ; Print the error message in X
.390609	a2 65 71	ldx #$7165	                LDX #<>boot_retry     ; Print the boot retry prompt
.39060c	22 7e 07 39	jsl $39077e	                JSL IPRINT
.390610	22 21 07 39	jsl $390721	boot_wait_key   JSL IGETCHW           ; Wait for a keypress
.390614	c9 52		cmp #$52	                CMP #'R'              ; Was "R" pressed?
.390616	d0 03		bne $39061b	                BNE chk_r_lc
.390618	82 63 ff	brl $39057e	                BRL retry_boot        ; Yes: retry the boot sequence
.39061b	c9 72		cmp #$72	chk_r_lc        CMP #'r'
.39061d	d0 03		bne $390622	                BNE chk_b_lc
.39061f	82 5c ff	brl $39057e	                BRL retry_boot
.390622	c9 62		cmp #$62	chk_b_lc        CMP #'b'              ; Was "B" pressed?
.390624	f0 86		beq $3905ac	                BEQ BOOTBASIC         ; Yes: try going to BASIC
.390626	c9 42		cmp #$42	                CMP #'B'
.390628	f0 82		beq $3905ac	                BEQ BOOTBASIC
.39062a	80 e4		bra $390610	                BRA boot_wait_key     ; No: keep waiting
.39062c					BOOT_MENU
.39062c	8b		phb		                PHB
.39062d	08		php		                PHP
.39062e	e2 20		sep #$20	                SEP #$20        ; set A short
.390630	c2 10		rep #$10	                REP #$10        ; set X long
.390632	a9 39		lda #$39	                LDA #`bootmenu          ; Point DBR:X to the boot menu
.390634	48		pha		                PHA
.390635	ab		plb		                PLB
.390636	a2 6f 06	ldx #$066f	                LDX #<>bootmenu
.390639	22 1c 10 38	jsl $38101c	                JSL PUTS                ; Display the boot menu
.39063d	c2 10		rep #$10	                REP #$10        ; set X long
.39063f	a0 e8 03	ldy #$03e8	                LDY #1000               ; Number of cycles we'll wait... total wait time is about 30s (ish)
.390642	e2 20		sep #$20	                SEP #$20        ; set A short
.390644	a2 e8 03	ldx #$03e8	wait_key        LDX #1000
.390647	22 18 16 39	jsl $391618	                JSL ILOOP_MS            ; Wait ...
.39064b	88		dey		                DEY                     ; Count down the tenths of seconds
.39064c	f0 1c		beq $39066a	                BEQ timeout             ; If we've got to 0, we're done
.39064e	22 48 10 38	jsl $381048	                JSL GETCH               ; Try to get a character
.390652	c9 00		cmp #$00	                CMP #0                  ; Did we get anything
.390654	f0 ee		beq $390644	                BEQ wait_key            ; No: keep waiting until timeout
.390656	c9 81		cmp #$81	                CMP #CHAR_F1            ; Did the user press F1?
.390658	f0 12		beq $39066c	                BEQ return              ; Yes: return it
.39065a	c9 82		cmp #$82	                CMP #CHAR_F2            ; Did the user press F2?
.39065c	f0 0e		beq $39066c	                BEQ return              ; Yes: return it
.39065e	c9 83		cmp #$83	                CMP #CHAR_F3            ; Did the user press F3?
.390660	f0 0a		beq $39066c	                BEQ return              ; Yes: return it
.390662	c9 0d		cmp #$0d	                CMP #CHAR_CR            ; Did the user press CR?
.390664	f0 06		beq $39066c	                BEQ return              ; Yes: return it
.390666	c9 20		cmp #$20	                CMP #CHAR_SP            ; Did the user press SPACE?
.390668	d0 da		bne $390644	                BNE wait_key            ; No: keep waiting
.39066a	a9 00		lda #$00	timeout         LDA #0                  ; Return 0 for a timeout / SPACE
.39066c	28		plp		return          PLP
.39066d	ab		plb		                PLB
.39066e	6b		rtl		                RTL
>39066f	46 31 3d 46 44 43 2c 20		bootmenu        .null "F1=FDC, F2=SDC, F3=IDE, RETURN=BASIC, SPACE=DEFAULT", CHAR_CR
>390677	46 32 3d 53 44 43 2c 20 46 33 3d 49 44 45 2c 20
>390687	52 45 54 55 52 4e 3d 42 41 53 49 43 2c 20 53 50
>390697	41 43 45 3d 44 45 46 41 55 4c 54 0d 00
.3906a4					IBREAK
.3906a4	48		pha		                PHA             ; begin setdp macro
.3906a5	08		php		                PHP
.3906a6	c2 20		rep #$20	                REP #$20        ; set A long
.3906a8	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3906ab	5b		tcd		                TCD
.3906ac	28		plp		                PLP
.3906ad	68		pla		                PLA             ; end setdp macro
.3906ae	68		pla		                PLA             ; Pull .Y and stuff it in the CPUY variable
.3906af	8f 48 02 00	sta $000248	                STA CPUY
.3906b3	68		pla		                PLA             ; Pull .X and stuff it in the CPUY variable
.3906b4	8f 46 02 00	sta $000246	                STA CPUX
.3906b8	68		pla		                PLA             ; Pull .A and stuff it in the CPUY variable
.3906b9	8f 44 02 00	sta $000244	                STA CPUA
.3906bd	68		pla		                PLA
.3906be	8f 4c 02 00	sta $00024c	                STA CPUDP       ; Pull Direct page
.3906c2	e2 20		sep #$20	                SEP #$20        ; set A short
.3906c4	68		pla		                PLA             ; Pull Data Bank (8 bits)
.3906c5	8f 4e 02 00	sta $00024e	                STA CPUDBR
.3906c9	68		pla		                PLA             ; Pull Flags (8 bits)
.3906ca	8f 4f 02 00	sta $00024f	                STA CPUFLAGS
.3906ce	c2 20		rep #$20	                REP #$20        ; set A long
.3906d0	68		pla		                PLA             ; Pull Program Counter (16 bits)
.3906d1	8f 40 02 00	sta $000240	                STA CPUPC
.3906d5	e2 20		sep #$20	                SEP #$20        ; set A short
.3906d7	68		pla		                PLA             ; Pull Program Bank (8 bits)
.3906d8	8f 42 02 00	sta $000242	                STA CPUPBR
.3906dc	c2 20		rep #$20	                REP #$20        ; set A long
.3906de	3b		tsc		                TSA             ; Get the stack
.3906df	8f 4a 02 00	sta $00024a	                STA CPUSTACK    ; Store the stack at immediately before the interrupt was asserted
.3906e3	a9 ff fe	lda #$feff	                LDA #<>STACK_END   ; initialize stack pointer back to the bootup value
.3906e6	1b		tcs		                TAS
.3906e7	5c 04 00 3a	jmp $3a0004	                JML MONITOR
.3906eb					IREADY
.3906eb	48		pha		                PHA             ; begin setdbr macro
.3906ec	08		php		                PHP
.3906ed	e2 20		sep #$20	                SEP #$20        ; set A short
.3906ef	a9 39		lda #$39	                LDA #`ready_msg
.3906f1	48		pha		                PHA
.3906f2	ab		plb		                PLB
.3906f3	28		plp		                PLP
.3906f4	68		pla		                PLA             ; end setdbr macro
.3906f5	e2 20		sep #$20	                SEP #$20        ; set A short
.3906f7	a2 06 72	ldx #$7206	                LDX #<>ready_msg
.3906fa	22 7e 07 39	jsl $39077e	                JSL IPRINT
.3906fe					IREADYWAIT
.3906fe	22 18 07 39	jsl $390718	                JSL IGETCHE
.390702	80 fa		bra $3906fe	                BRA IREADYWAIT
.390704	db		stp		IKEYDOWN        STP             ; Keyboard key pressed
.390705	db		stp		IRETURN         STP
.390706	08		php		ISETIN          PHP
.390707	e2 20		sep #$20	                SEP #$20        ; set A short
.390709	8f 04 07 00	sta $000704	                STA @lCHAN_IN   ; Save the channel number
.39070d	28		plp		                PLP
.39070e	6b		rtl		                RTL
.39070f	08		php		ISETOUT         PHP
.390710	e2 20		sep #$20	                SEP #$20        ; set A short
.390712	8f 03 07 00	sta $000703	                STA @lCHAN_OUT  ; Save the channel number
.390716	28		plp		                PLP
.390717	6b		rtl		                RTL
.390718	22 21 07 39	jsl $390721	IGETCHE         JSL IGETCHW
.39071c	22 9e 07 39	jsl $39079e	                JSL IPUTC
.390720	6b		rtl		                RTL
.390721					IGETCHW
.390721	08		php		                PHP
.390722	e2 20		sep #$20	                SEP #$20        ; set A short
.390724	af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.390728	f0 17		beq $390741	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.39072a	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.39072c	f0 09		beq $390737	                BEQ getc_uart       ; Yes: handle reading from the UART
.39072e	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.390730	f0 05		beq $390737	                BEQ getc_uart       ; Yes: handle reading from the UART
.390732	a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.390734	28		plp		                PLP
.390735	38		sec		                SEC                 ; And return carry set
.390736	6b		rtl		                RTL
.390737	22 be 5b 39	jsl $395bbe	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.39073b	22 72 5c 39	jsl $395c72	                JSL UART_GETC       ; Get the charater from the COM port
.39073f	80 04		bra $390745	                BRA done
.390741	22 93 14 38	jsl $381493	getc_keyboard   JSL KBD_GETC        ; Get the character from the keyboard
.390745	28		plp		done            PLP
.390746	18		clc		                CLC                 ; Return carry clear for valid data
.390747	6b		rtl		                RTL
.390748					IGETCH
.390748	da		phx		                PHX
.390749	5a		phy		                PHY
.39074a	8b		phb		                PHB
.39074b	0b		phd		                PHD
.39074c	08		php		                PHP
.39074d	48		pha		                PHA             ; begin setdbr macro
.39074e	08		php		                PHP
.39074f	e2 20		sep #$20	                SEP #$20        ; set A short
.390751	a9 00		lda #$00	                LDA #0
.390753	48		pha		                PHA
.390754	ab		plb		                PLB
.390755	28		plp		                PLP
.390756	68		pla		                PLA             ; end setdbr macro
.390757	e2 20		sep #$20	                SEP #$20        ; set A short
.390759	ad 04 07	lda $0704	                LDA @w CHAN_IN          ; Check the channel
.39075c	c9 00		cmp #$00	                CMP #CHAN_CONSOLE       ; Is it the console
.39075e	f0 03		beq $390763	                BEQ getch_console       ; Yes: dispatch on the console
.390760	82 10 00	brl $390773	                BRL ret_nothing         ; Unhandled device: return 0
.390763					getch_console
.390763	c2 20		rep #$20	                REP #$20        ; set A long
.390765	ad 8b 0f	lda $0f8b	                LDA @w KEY_BUFFER_RPOS  ; Is KEY_BUFFER_RPOS < KEY_BUFFER_WPOS
.390768	cd 8d 0f	cmp $0f8d	                CMP @w KEY_BUFFER_WPOS
.39076b	b0 06		bcs $390773	                BCS ret_nothing         ; No: there's nothing ready yet... return 0
.39076d	22 4c 10 38	jsl $38104c	                JSL GETCHW              ; Otherwise: retrieve the character
.390771	80 05		bra $390778	                BRA done                ; And return it
.390773					ret_nothing
.390773	c2 20		rep #$20	                REP #$20        ; set A long
.390775	a9 00 00	lda #$0000	                LDA #0                  ; Return 0 for no key
.390778	28		plp		done            PLP
.390779	2b		pld		                PLD
.39077a	ab		plb		                PLB
.39077b	7a		ply		                PLY
.39077c	fa		plx		                PLX
.39077d	6b		rtl		                RTL
.39077e	22 87 07 39	jsl $390787	IPRINT          JSL IPUTS
.390782	22 16 09 39	jsl $390916	                JSL IPRINTCR
.390786	6b		rtl		                RTL
.390787	48		pha		IPUTS           PHA
.390788	08		php		                PHP
.390789	e2 20		sep #$20	                SEP #$20        ; set A short
.39078b	c2 10		rep #$10	                REP #$10        ; set X long
.39078d	bd 00 00	lda $0000,x	iputs1          LDA $0,b,x      ; read from the string
.390790	f0 08		beq $39079a	                BEQ iputs_done
.390792	22 9e 07 39	jsl $39079e	iputs2          JSL IPUTC
.390796	e8		inx		iputs3          INX
.390797	4c 8d 07	jmp $39078d	                JMP iputs1
.39079a	e8		inx		iputs_done      INX
.39079b	28		plp		                PLP
.39079c	68		pla		                PLA
.39079d	6b		rtl		                RTL
.39079e					IPUTC
.39079e	da		phx		                PHX
.39079f	5a		phy		                PHY
.3907a0	0b		phd		                PHD
.3907a1	8b		phb		                PHB
.3907a2	08		php		                PHP                 ; stash the flags (we'll be changing M)
.3907a3	48		pha		                PHA             ; begin setdp macro
.3907a4	08		php		                PHP
.3907a5	c2 20		rep #$20	                REP #$20        ; set A long
.3907a7	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3907aa	5b		tcd		                TCD
.3907ab	28		plp		                PLP
.3907ac	68		pla		                PLA             ; end setdp macro
.3907ad	48		pha		                PHA             ; begin setdbr macro
.3907ae	08		php		                PHP
.3907af	e2 20		sep #$20	                SEP #$20        ; set A short
.3907b1	a9 00		lda #$00	                LDA #0
.3907b3	48		pha		                PHA
.3907b4	ab		plb		                PLB
.3907b5	28		plp		                PLP
.3907b6	68		pla		                PLA             ; end setdbr macro
.3907b7	e2 20		sep #$20	                SEP #$20        ; set A short
.3907b9	c2 10		rep #$10	                REP #$10        ; set X long
.3907bb	48		pha		                PHA                 ; Save the character to print
.3907bc	af 03 07 00	lda $000703	                LDA @lCHAN_OUT      ; Check the output channel #
.3907c0	f0 16		beq $3907d8	                BEQ putc_screen     ; If it's 0: print to the screen
.3907c2	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.3907c4	f0 07		beq $3907cd	                BEQ putc_uart       ; Yes: handle printing to the UART
.3907c6	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.3907c8	f0 03		beq $3907cd	                BEQ putc_uart       ; Yes: handle printing to the UART
.3907ca	68		pla		                PLA                 ; Otherwise, just exit
.3907cb	80 57		bra $390824	                BRA done
.3907cd	22 be 5b 39	jsl $395bbe	putc_uart       JSL UART_SELECT     ; Point to the correct UART
.3907d1	68		pla		                PLA                 ; Recover the character to send
.3907d2	22 93 5c 39	jsl $395c93	                JSL UART_PUTC       ; Send the character
.3907d6	80 4c		bra $390824	                BRA done
.3907d8	68		pla		putc_screen     PLA                 ; Get the character to print
.3907d9	c9 0a		cmp #$0a	                CMP #CHAR_LF        ; Linefeed moves cursor down one line
.3907db	f0 69		beq $390846	                BEQ go_down
.3907dd	c9 20		cmp #$20	                CMP #$20
.3907df	90 19		bcc $3907fa	                BCC check_ctrl0     ; [$00..$1F]: check for arrows
.3907e1	c9 7f		cmp #$7f	                CMP #$7F
.3907e3	f0 45		beq $39082a	                BEQ do_del
.3907e5	b0 02		bcs $3907e9	                BCS check_A0        ; [$20..$7E]: print it
.3907e7	80 31		bra $39081a	                BRA printc
.3907e9	c9 a0		cmp #$a0	check_A0        CMP #$A0
.3907eb	90 02		bcc $3907ef	                BCC check_ctrl1
.3907ed	80 2b		bra $39081a	                BRA printc          ; [$A0..$FF]: print it
.3907ef	c9 91		cmp #$91	check_ctrl1     CMP #CHAR_DOWN      ; If the down arrow key was pressed
.3907f1	f0 53		beq $390846	                BEQ go_down         ; ... move the cursor down one row
.3907f3	c9 9d		cmp #$9d	                CMP #CHAR_LEFT      ; If the left arrow key was pressed
.3907f5	f0 61		beq $390858	                BEQ go_left         ; ... move the cursor left one column
.3907f7	4c 24 08	jmp $390824	                JMP done
.3907fa	c9 09		cmp #$09	check_ctrl0     CMP #CHAR_TAB       ; If it's a TAB...
.3907fc	f0 69		beq $390867	                BEQ do_TAB          ; ... move to the next TAB stop
.3907fe	c9 08		cmp #$08	                CMP #CHAR_BS        ; If it's a backspace...
.390800	f0 34		beq $390836	                BEQ backspace       ; ... move the cursor back and replace with a space
.390802	c9 0d		cmp #$0d	                CMP #CHAR_CR        ; If the carriage return was pressed
.390804	f0 3a		beq $390840	                BEQ do_cr           ; ... move cursor down and to the first column
.390806	c9 11		cmp #$11	                CMP #CHAR_UP        ; If the up arrow key was pressed
.390808	f0 42		beq $39084c	                BEQ go_up           ; ... move the cursor up one row
.39080a	c9 1d		cmp #$1d	                CMP #CHAR_RIGHT     ; If the right arrow key was pressed
.39080c	f0 44		beq $390852	                BEQ go_right        ; ... move the cursor right one column
.39080e	c9 0f		cmp #$0f	                CMP #CHAR_INS       ; If the insert key was pressed
.390810	f0 1e		beq $390830	                BEQ do_ins          ; ... insert a space
.390812	c9 01		cmp #$01	                CMP #CHAR_CTRL_A    ; Check for CTRL-A (start of line)
.390814	f0 48		beq $39085e	                BEQ go_sol          ; ... move the cursor to the start of the line
.390816	c9 05		cmp #$05	                CMP #CHAR_CTRL_E    ; Check for CTRL-E (end of line)
.390818	f0 74		beq $39088e	                BEQ go_eol          ; ... move the cursor to the end of the line
.39081a	87 17		sta [$17]	printc          STA [CURSORPOS]     ; Save the character on the screen
.39081c	a5 1e		lda $1e		                LDA CURCOLOR        ; Set the color based on CURCOLOR
.39081e	87 1f		sta [$1f]	                STA [COLORPOS]
.390820	22 76 09 39	jsl $390976	                JSL ICSRRIGHT       ; And advance the cursor
.390824	28		plp		done            PLP
.390825	ab		plb		                PLB
.390826	2b		pld		                PLD
.390827	7a		ply		                PLY
.390828	fa		plx		                PLX
.390829	6b		rtl		                RTL
.39082a	22 bb 08 39	jsl $3908bb	do_del          JSL SCRSHIFTLL      ; Shift the current line left one space into the cursor
.39082e	80 f4		bra $390824	                BRA done
.390830	22 df 08 39	jsl $3908df	do_ins          JSL SCRSHIFTLR      ; Shift the current line right one space from the cursor
.390834	80 ee		bra $390824	                BRA done
.390836	22 a9 09 39	jsl $3909a9	backspace       JSL ICSRLEFT
.39083a	22 bb 08 39	jsl $3908bb	                JSL SCRSHIFTLL      ; Shift the current line left one space into the cursor
.39083e	80 e4		bra $390824	                BRA done
.390840	22 16 09 39	jsl $390916	do_cr           JSL IPRINTCR        ; Move the cursor to the beginning of the next line
.390844	80 de		bra $390824	                BRA done
.390846	22 f5 09 39	jsl $3909f5	go_down         JSL ICSRDOWN        ; Move the cursor down one row (might force a scroll)
.39084a	80 d8		bra $390824	                BRA done
.39084c	22 cf 09 39	jsl $3909cf	go_up           JSL ICSRUP          ; Move the cursor up one line
.390850	80 d2		bra $390824	                BRA done
.390852	22 76 09 39	jsl $390976	go_right        JSL ICSRRIGHT       ; Move the cursor right one column
.390856	80 cc		bra $390824	                BRA done
.390858	22 a9 09 39	jsl $3909a9	go_left         JSL ICSRLEFT        ; Move the cursor left one column
.39085c	80 c6		bra $390824	                BRA done
.39085e					go_sol
.39085e	c2 20		rep #$20	                REP #$20        ; set A long
.390860	a2 00 00	ldx #$0000	                LDX #0
.390863	a4 1c		ldy $1c		                LDY CURSORY
.390865	80 21		bra $390888	                BRA do_locate
.390867					do_TAB
.390867	c2 20		rep #$20	                REP #$20        ; set A long
.390869	a5 1a		lda $1a		                LDA CURSORX         ; Get the current column
.39086b	29 f8 ff	and #$fff8	                AND #$FFF8          ; See which group of 8 it's in
.39086e	18		clc		                CLC
.39086f	69 08 00	adc #$0008	                ADC #$0008          ; And move it to the next one
.390872	aa		tax		                TAX
.390873	a4 1c		ldy $1c		                LDY CURSORY
.390875	e2 20		sep #$20	                SEP #$20        ; set A short
.390877	e4 0f		cpx $0f		set_xy          CPX COLS_VISIBLE    ; Check if we're still on screen horizontally
.390879	90 04		bcc $39087f	                BCC check_row       ; Yes: check the row
.39087b	a2 00 00	ldx #$0000	                LDX #0              ; No: move to the first column...
.39087e	c8		iny		                INY                 ; ... and the next row
.39087f	c4 13		cpy $13		check_row       CPY LINES_VISIBLE   ; Check if we're still on the screen vertically
.390881	90 05		bcc $390888	                BCC do_locate       ; Yes: reposition the cursor
.390883	22 66 0a 39	jsl $390a66	                JSL ISCROLLUP       ; No: scroll the screen
.390887	88		dey		                DEY                 ; And set the row to the last one
.390888	22 1a 0a 39	jsl $390a1a	do_locate       JSL ILOCATE         ; Set the cursor position
.39088c	80 96		bra $390824	                BRA done
.39088e	a6 0f		ldx $0f		go_eol          LDX COLS_VISIBLE    ; Move the cursor to the right most column
.390890	ca		dex		                DEX
.390891	a4 1c		ldy $1c		                LDY CURSORY
.390893	22 1a 0a 39	jsl $390a1a	                JSL ILOCATE
.390897	e2 20		sep #$20	                SEP #$20        ; set A short
.390899	a7 17		lda [$17]	eol_loop        LDA [CURSORPOS]     ; Get the character under the cursor
.39089b	c9 20		cmp #$20	                CMP #CHAR_SP        ; Is it blank?
.39089d	d0 0b		bne $3908aa	                BNE eol_done        ; No: exit the loop
.39089f	22 a9 09 39	jsl $3909a9	                JSL ICSRLEFT        ; Yes: move to the left
.3908a3	a6 1a		ldx $1a		                LDX CURSORX         ; Are we at column 0?
.3908a5	d0 f2		bne $390899	                BNE eol_loop        ; No: try again
.3908a7	82 7a ff	brl $390824	                BRL done            ; Yes: we're done
.3908aa	a6 1a		ldx $1a		eol_done        LDX CURSORX         ; Check the column
.3908ac	e8		inx		                INX
.3908ad	e4 0f		cpx $0f		                CPX COLS_VISIBLE    ; Is it the right most?
.3908af	d0 03		bne $3908b4	                BNE eol_right
.3908b1	82 70 ff	brl $390824	                BRL done            ; Yes: we're done
.3908b4	22 76 09 39	jsl $390976	eol_right       JSL ICSRRIGHT       ; No: move right one column
.3908b8	82 69 ff	brl $390824	                BRL done
.3908bb	da		phx		SCRSHIFTLL      PHX
.3908bc	5a		phy		                PHY
.3908bd	48		pha		                PHA
.3908be	0b		phd		                PHD
.3908bf	08		php		                PHP
.3908c0	48		pha		                PHA             ; begin setdp macro
.3908c1	08		php		                PHP
.3908c2	c2 20		rep #$20	                REP #$20        ; set A long
.3908c4	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3908c7	5b		tcd		                TCD
.3908c8	28		plp		                PLP
.3908c9	68		pla		                PLA             ; end setdp macro
.3908ca	c2 30		rep #$30	                REP #$30        ; set A&X long
.3908cc	a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.3908ce	a8		tay		                TAY                 ; Set it as the destination
.3908cf	aa		tax		                TAX
.3908d0	e8		inx		                INX                 ; And set the next cell as the source
.3908d1	18		clc		                CLC                 ; Calculate the length of the block to move
.3908d2	a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.3908d4	e5 1a		sbc $1a		                SBC CURSORX
.3908d6	54 af af	mvn $af,$af	                MVN $AF, $AF        ; And move the block
.3908d9	28		plp		                PLP
.3908da	2b		pld		                PLD
.3908db	68		pla		                PLA
.3908dc	7a		ply		                PLY
.3908dd	fa		plx		                PLX
.3908de	6b		rtl		                RTL
.3908df	da		phx		SCRSHIFTLR      PHX
.3908e0	48		pha		                PHA
.3908e1	0b		phd		                PHD
.3908e2	08		php		                PHP
.3908e3	48		pha		                PHA             ; begin setdp macro
.3908e4	08		php		                PHP
.3908e5	c2 20		rep #$20	                REP #$20        ; set A long
.3908e7	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3908ea	5b		tcd		                TCD
.3908eb	28		plp		                PLP
.3908ec	68		pla		                PLA             ; end setdp macro
.3908ed	c2 30		rep #$30	                REP #$30        ; set A&X long
.3908ef	a5 1a		lda $1a		                LDA CURSORX         ; What column are we on
.3908f1	1a		inc a		                INC A
.3908f2	c5 0f		cmp $0f		                CMP COLS_VISIBLE    ; >= the # visible?
.3908f4	b0 1a		bcs $390910	                BGE done            ; Yes: just skip the whole thing
.3908f6	38		sec		                SEC                 ; Calculate the length of the block to move
.3908f7	a5 0f		lda $0f		                LDA COLS_VISIBLE
.3908f9	e5 1a		sbc $1a		                SBC CURSORX
.3908fb	18		clc		                CLC
.3908fc	65 17		adc $17		                ADC CURSORPOS       ; Add the current cursor position
.3908fe	3a		dec a		                DEC A
.3908ff	a8		tay		                TAY                 ; Make it the destination
.390900	3a		dec a		                DEC A               ; Move to the previous column
.390901	aa		tax		                TAX                 ; Make it the source
.390902	38		sec		                SEC                 ; Calculate the length of the block to move
.390903	a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.390905	e5 1a		sbc $1a		                SBC CURSORX
.390907	44 af af	mvp $af,$af	                MVP $AF, $AF        ; And move the block
.39090a	e2 20		sep #$20	                SEP #$20        ; set A short
.39090c	a9 20		lda #$20	                LDA #CHAR_SP        ; Put a blank space at the cursor position
.39090e	87 17		sta [$17]	                STA [CURSORPOS]
.390910	28		plp		done            PLP
.390911	2b		pld		                PLD
.390912	68		pla		                PLA
.390913	fa		plx		                PLX
.390914	6b		rtl		                RTL
.390915					IPUTB
.390915	6b		rtl		                RTL
.390916					IPRINTCR
.390916	da		phx		                PHX
.390917	5a		phy		                PHY
.390918	8b		phb		                PHB
.390919	0b		phd		                PHD
.39091a	08		php		                PHP
.39091b	48		pha		                PHA             ; begin setdbr macro
.39091c	08		php		                PHP
.39091d	e2 20		sep #$20	                SEP #$20        ; set A short
.39091f	a9 00		lda #$00	                LDA #0
.390921	48		pha		                PHA
.390922	ab		plb		                PLB
.390923	28		plp		                PLP
.390924	68		pla		                PLA             ; end setdbr macro
.390925	48		pha		                PHA             ; begin setdp macro
.390926	08		php		                PHP
.390927	c2 20		rep #$20	                REP #$20        ; set A long
.390929	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39092c	5b		tcd		                TCD
.39092d	28		plp		                PLP
.39092e	68		pla		                PLA             ; end setdp macro
.39092f	e2 20		sep #$20	                SEP #$20        ; set A short
.390931	c2 10		rep #$10	                REP #$10        ; set X long
.390933	af 03 07 00	lda $000703	                LDA @lCHAN_OUT
.390937	f0 1c		beq $390955	                BEQ scr_printcr
.390939	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.39093b	f0 06		beq $390943	                BEQ uart_printcr    ; Yes: handle printing to the UART
.39093d	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.39093f	f0 02		beq $390943	                BEQ uart_printcr    ; Yes: handle printing to the UART
.390941	80 1c		bra $39095f	                BRA done
.390943	22 be 5b 39	jsl $395bbe	uart_printcr    JSL UART_SELECT
.390947	a9 0d		lda #$0d	                LDA #CHAR_CR
.390949	22 9e 07 39	jsl $39079e	                JSL IPUTC
.39094d	a9 0a		lda #$0a	                LDA #CHAR_LF
.39094f	22 9e 07 39	jsl $39079e	                JSL IPUTC
.390953	80 0a		bra $39095f	                BRA done
.390955	a2 00 00	ldx #$0000	scr_printcr     LDX #0
.390958	a4 1c		ldy $1c		                LDY CURSORY
.39095a	c8		iny		                INY
.39095b	22 1a 0a 39	jsl $390a1a	                JSL ILOCATE
.39095f	28		plp		done            PLP
.390960	2b		pld		                PLD
.390961	ab		plb		                PLB
.390962	7a		ply		                PLY
.390963	fa		plx		                PLX
.390964	6b		rtl		                RTL
.390965	da		phx		ICSRHOME        PHX
.390966	5a		phy		                PHY
.390967	08		php		                PHP
.390968	a2 00 00	ldx #$0000	                LDX #0
.39096b	a0 00 00	ldy #$0000	                LDY #0
.39096e	22 1a 0a 39	jsl $390a1a	                JSL ILOCATE
.390972	28		plp		                PLP
.390973	7a		ply		                PLY
.390974	fa		plx		                PLX
.390975	6b		rtl		                RTL
.390976	da		phx		ICSRRIGHT       PHX
.390977	5a		phy		                PHY
.390978	48		pha		                PHA
.390979	0b		phd		                PHD
.39097a	08		php		                PHP
.39097b	c2 20		rep #$20	                REP #$20        ; set A long
.39097d	c2 10		rep #$10	                REP #$10        ; set X long
.39097f	48		pha		                PHA             ; begin setdp macro
.390980	08		php		                PHP
.390981	c2 20		rep #$20	                REP #$20        ; set A long
.390983	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.390986	5b		tcd		                TCD
.390987	28		plp		                PLP
.390988	68		pla		                PLA             ; end setdp macro
.390989	a6 1a		ldx $1a		                LDX CURSORX           ; Get the new column
.39098b	e8		inx		                INX
.39098c	a4 1c		ldy $1c		                LDY CURSORY           ; Get the current row
.39098e	e4 0f		cpx $0f		                CPX COLS_VISIBLE      ; Are we off screen?
.390990	90 0d		bcc $39099f	                BCC icsrright_nowrap  ; No: just set the position
.390992	a2 00 00	ldx #$0000	                LDX #0                ; Yes: move to the first column
.390995	c8		iny		                INY                   ; And move to the next row
.390996	c4 13		cpy $13		                CPY LINES_VISIBLE     ; Are we still off screen?
.390998	90 05		bcc $39099f	                BCC icsrright_nowrap  ; No: just set the position
.39099a	88		dey		                DEY                   ; Yes: lock to the last row
.39099b	22 66 0a 39	jsl $390a66	                JSL ISCROLLUP         ; But scroll the screen up
.39099f					icsrright_nowrap
.39099f	22 1a 0a 39	jsl $390a1a	                JSL ILOCATE           ; Set the cursor position
.3909a3	28		plp		                PLP
.3909a4	2b		pld		                PLD
.3909a5	68		pla		                PLA
.3909a6	7a		ply		                PLY
.3909a7	fa		plx		                PLX
.3909a8	6b		rtl		                RTL
.3909a9					ICSRLEFT
.3909a9	da		phx		                PHX
.3909aa	5a		phy		                PHY
.3909ab	48		pha		                PHA
.3909ac	0b		phd		                PHD
.3909ad	08		php		                PHP
.3909ae	c2 30		rep #$30	                REP #$30        ; set A&X long
.3909b0	48		pha		                PHA             ; begin setdp macro
.3909b1	08		php		                PHP
.3909b2	c2 20		rep #$20	                REP #$20        ; set A long
.3909b4	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.3909b7	5b		tcd		                TCD
.3909b8	28		plp		                PLP
.3909b9	68		pla		                PLA             ; end setdp macro
.3909ba	a5 1a		lda $1a		                LDA CURSORX
.3909bc	f0 0b		beq $3909c9	                BEQ icsrleft_done_already_zero ; Check that we are not already @ Zero
.3909be	a6 1a		ldx $1a		                LDX CURSORX
.3909c0	ca		dex		                DEX
.3909c1	86 1a		stx $1a		                STX CURSORX
.3909c3	a4 1c		ldy $1c		                LDY CURSORY
.3909c5	22 1a 0a 39	jsl $390a1a	                JSL ILOCATE
.3909c9					icsrleft_done_already_zero
.3909c9	28		plp		                PLP
.3909ca	2b		pld		                PLD
.3909cb	68		pla		                PLA
.3909cc	7a		ply		                PLY
.3909cd	fa		plx		                PLX
.3909ce	6b		rtl		                RTL
.3909cf					ICSRUP
.3909cf	da		phx		                PHX
.3909d0	5a		phy		                PHY
.3909d1	48		pha		                PHA
.3909d2	0b		phd		                PHD
.3909d3	08		php		                PHP
.3909d4	c2 30		rep #$30	                REP #$30        ; set A&X long
.3909d6	48		pha		                PHA             ; begin setdp macro
.3909d7	08		php		                PHP
.3909d8	c2 20		rep #$20	                REP #$20        ; set A long
.3909da	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.3909dd	5b		tcd		                TCD
.3909de	28		plp		                PLP
.3909df	68		pla		                PLA             ; end setdp macro
.3909e0	a5 1c		lda $1c		                LDA CURSORY
.3909e2	f0 0b		beq $3909ef	                BEQ isrup_done_already_zero ; Check if we are not already @ Zero
.3909e4	a4 1c		ldy $1c		                LDY CURSORY
.3909e6	88		dey		                DEY
.3909e7	84 1c		sty $1c		                STY CURSORY
.3909e9	a6 1a		ldx $1a		                LDX CURSORX
.3909eb	22 1a 0a 39	jsl $390a1a	                JSL ILOCATE
.3909ef					isrup_done_already_zero
.3909ef	28		plp		                PLP
.3909f0	2b		pld		                PLD
.3909f1	68		pla		                PLA
.3909f2	7a		ply		                PLY
.3909f3	fa		plx		                PLX
.3909f4	6b		rtl		                RTL
.3909f5	da		phx		ICSRDOWN        PHX
.3909f6	5a		phy		                PHY
.3909f7	0b		phd		                PHD
.3909f8	c2 30		rep #$30	                REP #$30        ; set A&X long
.3909fa	48		pha		                PHA             ; begin setdp macro
.3909fb	08		php		                PHP
.3909fc	c2 20		rep #$20	                REP #$20        ; set A long
.3909fe	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.390a01	5b		tcd		                TCD
.390a02	28		plp		                PLP
.390a03	68		pla		                PLA             ; end setdp macro
.390a04	a6 1a		ldx $1a		                LDX CURSORX                 ; Get the current column
.390a06	a4 1c		ldy $1c		                LDY CURSORY                 ; Get the new row
.390a08	c8		iny		                INY
.390a09	c4 13		cpy $13		                CPY LINES_VISIBLE           ; Check to see if we're off screen
.390a0b	90 05		bcc $390a12	                BCC icsrdown_noscroll       ; No: go ahead and set the position
.390a0d	88		dey		                DEY                         ; Yes: go back to the last row
.390a0e	22 66 0a 39	jsl $390a66	                JSL ISCROLLUP               ; But scroll the screen up
.390a12					icsrdown_noscroll
.390a12	22 1a 0a 39	jsl $390a1a	                JSL ILOCATE                 ; And set the cursor position
.390a16	2b		pld		                PLD
.390a17	7a		ply		                PLY
.390a18	fa		plx		                PLX
.390a19	6b		rtl		                RTL
.390a1a	48		pha		ILOCATE         PHA
.390a1b	0b		phd		                PHD
.390a1c	08		php		                PHP
.390a1d	48		pha		                PHA             ; begin setdp macro
.390a1e	08		php		                PHP
.390a1f	c2 20		rep #$20	                REP #$20        ; set A long
.390a21	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390a24	5b		tcd		                TCD
.390a25	28		plp		                PLP
.390a26	68		pla		                PLA             ; end setdp macro
.390a27	c2 30		rep #$30	                REP #$30        ; set A&X long
.390a29					ilocate_scroll
.390a29	c4 13		cpy $13		                CPY LINES_VISIBLE
.390a2b	90 07		bcc $390a34	                BCC ilocate_scrolldone
.390a2d	22 66 0a 39	jsl $390a66	                JSL ISCROLLUP
.390a31	88		dey		                DEY
.390a32	80 f5		bra $390a29	                BRA ilocate_scroll
.390a34					ilocate_scrolldone
.390a34	86 1a		stx $1a		                STX CURSORX
.390a36	84 1c		sty $1c		                STY CURSORY
.390a38	a5 0c		lda $0c		                LDA SCREENBEGIN
.390a3a					ilocate_row
.390a3a	c0 00 00	cpy #$0000	                CPY #$0
.390a3d	f0 08		beq $390a47	                BEQ ilocate_right
.390a3f	18		clc		ilocate_down    CLC
.390a40	65 11		adc $11		                ADC COLS_PER_LINE
.390a42	88		dey		                DEY
.390a43	f0 02		beq $390a47	                BEQ ilocate_right
.390a45	80 f8		bra $390a3f	                BRA ilocate_down
.390a47	18		clc		ilocate_right   CLC
.390a48	65 1a		adc $1a		                ADC CURSORX             ; move the cursor right X columns
.390a4a	85 17		sta $17		                STA CURSORPOS
.390a4c	a4 1c		ldy $1c		                LDY CURSORY
.390a4e	98		tya		                TYA
.390a4f	8f 16 00 af	sta $af0016	                STA @lVKY_TXT_CURSOR_Y_REG_L  ;Store in Vicky's registers
.390a53	8a		txa		                TXA
.390a54	8f 14 00 af	sta $af0014	                STA @lVKY_TXT_CURSOR_X_REG_L  ;Store in Vicky's register
.390a58	c2 20		rep #$20	                REP #$20        ; set A long
.390a5a	18		clc		                CLC
.390a5b	a5 17		lda $17		                LDA CURSORPOS
.390a5d	69 00 20	adc #$2000	                ADC #<>(CS_COLOR_MEM_PTR - CS_TEXT_MEM_PTR)
.390a60	85 1f		sta $1f		                STA COLORPOS
.390a62	28		plp		ilocate_done    PLP
.390a63	2b		pld		                PLD
.390a64	68		pla		                PLA
.390a65	6b		rtl		                RTL
.390a66					ISCROLLUP
.390a66	48		pha		                PHA
.390a67	da		phx		                PHX
.390a68	5a		phy		                PHY
.390a69	8b		phb		                PHB
.390a6a	0b		phd		                PHD
.390a6b	08		php		                PHP
.390a6c	48		pha		                PHA             ; begin setdp macro
.390a6d	08		php		                PHP
.390a6e	c2 20		rep #$20	                REP #$20        ; set A long
.390a70	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390a73	5b		tcd		                TCD
.390a74	28		plp		                PLP
.390a75	68		pla		                PLA             ; end setdp macro
.390a76	c2 30		rep #$30	                REP #$30        ; set A&X long
.390a78	a5 11		lda $11		                LDA COLS_PER_LINE
.390a7a	8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.390a7e	a5 13		lda $13		                LDA LINES_VISIBLE
.390a80	8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.390a84	af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.390a88	85 00		sta $00		                STA TMPPTR1
.390a8a	18		clc		                CLC
.390a8b	a9 00 a0	lda #$a000	                LDA #$A000
.390a8e	a8		tay		                TAY
.390a8f	65 11		adc $11		                ADC COLS_PER_LINE
.390a91	aa		tax		                TAX
.390a92	a5 00		lda $00		                LDA TMPPTR1
.390a94	54 af af	mvn $af,$af	                MVN $AF,$AF
.390a97	c2 30		rep #$30	                REP #$30        ; set A&X long
.390a99	18		clc		                CLC
.390a9a	a9 00 c0	lda #$c000	                LDA #$C000
.390a9d	a8		tay		                TAY
.390a9e	65 11		adc $11		                ADC COLS_PER_LINE
.390aa0	aa		tax		                TAX
.390aa1	a5 00		lda $00		                LDA TMPPTR1
.390aa3	54 af af	mvn $af,$af	                MVN $AF,$AF
.390aa6	a5 00		lda $00		                LDA TMPPTR1
.390aa8	48		pha		                PHA
.390aa9	18		clc		                CLC
.390aaa	69 00 a0	adc #$a000	                ADC #<>CS_TEXT_MEM_PTR
.390aad	85 00		sta $00		                STA TMPPTR1
.390aaf	a0 00 00	ldy #$0000	                LDY #0
.390ab2	a9 20 00	lda #$0020	                LDA #' '
.390ab5	97 00		sta [$00],y	clr_text        STA [TMPPTR1],Y
.390ab7	c8		iny		                INY
.390ab8	c4 0f		cpy $0f		                CPY COLS_VISIBLE
.390aba	d0 f9		bne $390ab5	                BNE clr_text
.390abc	68		pla		                PLA
.390abd	18		clc		                CLC
.390abe	69 00 c0	adc #$c000	                ADC #<>CS_COLOR_MEM_PTR
.390ac1	85 00		sta $00		                STA TMPPTR1
.390ac3	a0 00 00	ldy #$0000	                LDY #0
.390ac6	a5 1e		lda $1e		                LDA CURCOLOR
.390ac8	97 00		sta [$00],y	clr_color       STA [TMPPTR1],Y
.390aca	c8		iny		                INY
.390acb	c4 0f		cpy $0f		                CPY COLS_VISIBLE
.390acd	d0 f9		bne $390ac8	                BNE clr_color
.390acf	28		plp		                PLP
.390ad0	2b		pld		                PLD
.390ad1	ab		plb		                PLB
.390ad2	7a		ply		                PLY
.390ad3	fa		plx		                PLX
.390ad4	68		pla		                PLA
.390ad5	6b		rtl		                RTL
.390ad6	08		php		IPRINTH         PHP
.390ad7	48		pha		                PHA
.390ad8					iprinth1
.390ad8	e2 20		sep #$20	                SEP #$20        ; set A short
.390ada	bd 00 00	lda $0000,x	                LDA #0,b,x      ; Read the value to be printed
.390add	4a		lsr a		                LSR
.390ade	4a		lsr a		                LSR
.390adf	4a		lsr a		                LSR
.390ae0	4a		lsr a		                LSR
.390ae1	22 30 0b 39	jsl $390b30	                JSL iprint_digit
.390ae5	bd 00 00	lda $0000,x	                LDA #0,b,x
.390ae8	22 30 0b 39	jsl $390b30	                JSL iprint_digit
.390aec	ca		dex		                DEX
.390aed	88		dey		                DEY
.390aee	d0 e8		bne $390ad8	                BNE iprinth1
.390af0	68		pla		                PLA
.390af1	28		plp		                PLP
.390af2	6b		rtl		                RTL
.390af3					IPRINTAH
.390af3	48		pha		                PHA
.390af4	08		php		                PHP
.390af5	8f 44 02 00	sta $000244	                STA @lCPUA            ; Save A where we can use it multiple times
.390af9	08		php		                PHP                   ; Get the processor status into A
.390afa	e2 20		sep #$20	                SEP #$20        ; set A short
.390afc	c2 10		rep #$10	                REP #$10        ; set X long
.390afe	68		pla		                PLA
.390aff	29 20		and #$20	                AND #%00100000        ; Is M = 1?
.390b01	c9 20		cmp #$20	                CMP #%00100000
.390b03	f0 14		beq $390b19	                BEQ eight_bit
.390b05	af 46 02 00	lda $000246	                LDA @lCPUA+2          ; Get nibble [15..12]
.390b09	4a		lsr a		                LSR A
.390b0a	4a		lsr a		                LSR A
.390b0b	4a		lsr a		                LSR A
.390b0c	4a		lsr a		                LSR A
.390b0d	22 30 0b 39	jsl $390b30	                JSL iprint_digit      ; And print it
.390b11	af 46 02 00	lda $000246	                LDA @lCPUA+2          ; Get nibble [11..8]
.390b15	22 30 0b 39	jsl $390b30	                JSL iprint_digit      ; And print it
.390b19	af 44 02 00	lda $000244	eight_bit       LDA @lCPUA            ; Get nibble [7..4]
.390b1d	4a		lsr a		                LSR A
.390b1e	4a		lsr a		                LSR A
.390b1f	4a		lsr a		                LSR A
.390b20	4a		lsr a		                LSR A
.390b21	22 30 0b 39	jsl $390b30	                JSL iprint_digit      ; And print it
.390b25	af 44 02 00	lda $000244	                LDA @lCPUA            ; Get nibble [3..0]
.390b29	22 30 0b 39	jsl $390b30	                JSL iprint_digit      ; And print it
.390b2d	28		plp		                PLP
.390b2e	68		pla		                PLA
.390b2f	6b		rtl		                RTL
.390b30	da		phx		iprint_digit    PHX
.390b31	c2 20		rep #$20	                REP #$20        ; set A long
.390b33	29 0f 00	and #$000f	                AND #$0F
.390b36	aa		tax		                TAX
.390b37	bf 1a 72 39	lda $39721a,x	                LDA hex_digits,X
.390b3b	22 9e 07 39	jsl $39079e	                JSL IPUTC       ; Print the digit
.390b3f	fa		plx		                PLX
.390b40	6b		rtl		                RTL
.390b41	48		pha		ICLRSCREEN	    PHA
.390b42	da		phx		                PHX
.390b43	08		php		                PHP
.390b44	e2 20		sep #$20	                SEP #$20        ; set A short
.390b46	c2 10		rep #$10	                REP #$10        ; set X long
.390b48	a2 00 00	ldx #$0000	                LDX #$0000		          ; Only Use One Pointer
.390b4b	a9 20		lda #$20	                LDA #$20		            ; Fill the Entire Screen with Space
.390b4d	9f 00 a0 af	sta $afa000,x	iclearloop0	    STA CS_TEXT_MEM_PTR, x	;
.390b51	e8		inx		                inx
.390b52	e0 00 20	cpx #$2000	                cpx #$2000
.390b55	d0 f6		bne $390b4d	                bne iclearloop0
.390b57	a2 00 00	ldx #$0000	                LDX	#$0000		          ; Only Use One Pointer
.390b5a	af 1e 00 00	lda $00001e	                LDA @lCURCOLOR          ; Fill the Color Memory with the current color
.390b5e	9f 00 c0 af	sta $afc000,x	iclearloop1	    STA CS_COLOR_MEM_PTR, x	;
.390b62	e8		inx		                inx
.390b63	e0 00 20	cpx #$2000	                cpx #$2000
.390b66	d0 f6		bne $390b5e	                bne iclearloop1
.390b68	28		plp		                PLP
.390b69	fa		plx		                PLX
.390b6a	68		pla		                PLA
.390b6b	6b		rtl		                RTL
.390b6c					COPYBYTES42
.390b6c	08		php		                PHP
.390b6d	0b		phd		                PHD
.390b6e	48		pha		                PHA             ; begin setdp macro
.390b6f	08		php		                PHP
.390b70	c2 20		rep #$20	                REP #$20        ; set A long
.390b72	a9 00 00	lda #$0000	                LDA #TMPPTR1         ; set DP to page 0
.390b75	5b		tcd		                TCD
.390b76	28		plp		                PLP
.390b77	68		pla		                PLA             ; end setdp macro
.390b78	e2 20		sep #$20	                SEP #$20        ; set A short
.390b7a	c2 10		rep #$10	                REP #$10        ; set X long
.390b7c	a0 00 00	ldy #$0000	                LDY #0
.390b7f	b7 00		lda [$00],y	copy_loop       LDA [TMPPTR1],Y
.390b81	97 04		sta [$04],y	                STA [TMPPTR2],Y
.390b83	c8		iny		                INY
.390b84	c0 2a 00	cpy #$002a	                CPY #42
.390b87	d0 f6		bne $390b7f	                BNE copy_loop
.390b89	2b		pld		                PLD
.390b8a	28		plp		                PLP
.390b8b	60		rts		                RTS
.390b8c					ICOLORFLAG
.390b8c	48		pha		                PHA
.390b8d	da		phx		                PHX
.390b8e	5a		phy		                PHY
.390b8f	08		php		                PHP
.390b90	8b		phb		                PHB
.390b91	0b		phd		                PHD
.390b92	48		pha		                PHA             ; begin setdp macro
.390b93	08		php		                PHP
.390b94	c2 20		rep #$20	                REP #$20        ; set A long
.390b96	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390b99	5b		tcd		                TCD
.390b9a	28		plp		                PLP
.390b9b	68		pla		                PLA             ; end setdp macro
.390b9c	c2 30		rep #$30	                REP #$30        ; set A&X long
.390b9e	a9 00 c0	lda #$c000	                LDA #<>CS_COLOR_MEM_PTR
.390ba1	85 04		sta $04		                STA TMPPTR2
.390ba3	a9 af 00	lda #$00af	                LDA #`CS_COLOR_MEM_PTR
.390ba6	85 06		sta $06		                STA TMPPTR2+2
.390ba8	a9 f1 6e	lda #$6ef1	                LDA #<>greet_clr_line1
.390bab	85 00		sta $00		                STA TMPPTR1
.390bad	a9 39 00	lda #$0039	                LDA #`greet_clr_line1
.390bb0	85 02		sta $02		                STA TMPPTR1+2
.390bb2	20 6c 0b	jsr $390b6c	                JSR COPYBYTES42
.390bb5	18		clc		                CLC
.390bb6	a5 04		lda $04		                LDA TMPPTR2
.390bb8	65 11		adc $11		                ADC COLS_PER_LINE
.390bba	85 04		sta $04		                STA TMPPTR2
.390bbc	a9 1b 6f	lda #$6f1b	                LDA #<>greet_clr_line2
.390bbf	85 00		sta $00		                STA TMPPTR1
.390bc1	a9 39 00	lda #$0039	                LDA #`greet_clr_line2
.390bc4	85 02		sta $02		                STA TMPPTR1+2
.390bc6	20 6c 0b	jsr $390b6c	                JSR COPYBYTES42
.390bc9	18		clc		                CLC
.390bca	a5 04		lda $04		                LDA TMPPTR2
.390bcc	65 11		adc $11		                ADC COLS_PER_LINE
.390bce	85 04		sta $04		                STA TMPPTR2
.390bd0	a9 45 6f	lda #$6f45	                LDA #<>greet_clr_line3
.390bd3	85 00		sta $00		                STA TMPPTR1
.390bd5	a9 39 00	lda #$0039	                LDA #`greet_clr_line3
.390bd8	85 02		sta $02		                STA TMPPTR1+2
.390bda	20 6c 0b	jsr $390b6c	                JSR COPYBYTES42
.390bdd	18		clc		                CLC
.390bde	a5 04		lda $04		                LDA TMPPTR2
.390be0	65 11		adc $11		                ADC COLS_PER_LINE
.390be2	85 04		sta $04		                STA TMPPTR2
.390be4	a9 6f 6f	lda #$6f6f	                LDA #<>greet_clr_line4
.390be7	85 00		sta $00		                STA TMPPTR1
.390be9	a9 39 00	lda #$0039	                LDA #`greet_clr_line4
.390bec	85 02		sta $02		                STA TMPPTR1+2
.390bee	20 6c 0b	jsr $390b6c	                JSR COPYBYTES42
.390bf1	18		clc		                CLC
.390bf2	a5 04		lda $04		                LDA TMPPTR2
.390bf4	65 11		adc $11		                ADC COLS_PER_LINE
.390bf6	85 04		sta $04		                STA TMPPTR2
.390bf8	a9 99 6f	lda #$6f99	                LDA #<>greet_clr_line5
.390bfb	85 00		sta $00		                STA TMPPTR1
.390bfd	a9 39 00	lda #$0039	                LDA #`greet_clr_line5
.390c00	85 02		sta $02		                STA TMPPTR1+2
.390c02	20 6c 0b	jsr $390b6c	                JSR COPYBYTES42
.390c05	2b		pld		                PLD
.390c06	ab		plb		                PLB
.390c07	28		plp		                PLP
.390c08	7a		ply		                PLY
.390c09	fa		plx		                PLX
.390c0a	68		pla		                PLA
.390c0b	6b		rtl		                RTL
.390c0c	0b		phd		IINITCHLUT		  PHD
.390c0d	08		php		                PHP
.390c0e	48		pha		                PHA
.390c0f	da		phx		                PHX
.390c10	e2 20		sep #$20	                SEP #$20        ; set A short
.390c12	e2 10		sep #$10	                SEP #$10        ; set X short
.390c14	a2 00		ldx #$00					        LDX	#$00
.390c16	bf c3 6f 39	lda $396fc3,x	lutinitloop0	  LDA @lfg_color_lut,x		; get Local Data
.390c1a	9f 40 1f af	sta $af1f40,x	                STA FG_CHAR_LUT_PTR,x	; Write in LUT Memory
.390c1e	e8		inx		                inx
.390c1f	e0 40		cpx #$40	                cpx #$40
.390c21	d0 f3		bne $390c16	                bne lutinitloop0
.390c23	a2 00		ldx #$00	                LDX	#$00
.390c25	bf 03 70 39	lda $397003,x	lutinitloop1	  LDA @lbg_color_lut,x		; get Local Data
.390c29	9f 80 1f af	sta $af1f80,x	                STA BG_CHAR_LUT_PTR,x	; Write in LUT Memory
.390c2d	e8		inx		                INX
.390c2e	e0 40		cpx #$40	                CPX #$40
.390c30	d0 f3		bne $390c25	                bne lutinitloop1
.390c32	c2 20		rep #$20	                REP #$20        ; set A long
.390c34	c2 10		rep #$10	                REP #$10        ; set X long
.390c36	fa		plx		                PLX
.390c37	68		pla		                PLA
.390c38	28		plp		                PLP
.390c39	2b		pld		                PLD
.390c3a	6b		rtl		                RTL
.390c3b					IINITGAMMATABLE
.390c3b	e2 20		sep #$20	                SEP #$20        ; set A short
.390c3d	c2 10		rep #$10	                REP #$10        ; set X long
.390c3f	a2 00 00	ldx #$0000	                ldx #$0000
.390c42	bf 00 77 39	lda $397700,x	initgammaloop   LDA GAMMA_1_8_Tbl, x
.390c46	9f 00 40 af	sta $af4000,x	                STA GAMMA_B_LUT_PTR, x
.390c4a	9f 00 41 af	sta $af4100,x	                STA GAMMA_G_LUT_PTR, x
.390c4e	9f 00 42 af	sta $af4200,x	                STA GAMMA_R_LUT_PTR, x
.390c52	e8		inx		                inx
.390c53	e0 00 01	cpx #$0100	                cpx #$0100
.390c56	d0 ea		bne $390c42	                bne initgammaloop
.390c58	c2 30		rep #$30	                REP #$30        ; set A&X long
.390c5a	6b		rtl		                RTL
.390c5b	48		pha		IINITALLLUT     PHA
.390c5c	da		phx		                PHX
.390c5d	a2 00 00	ldx #$0000	                LDX #$0000
.390c60	e2 20		sep #$20	                SEP #$20        ; set A short
.390c62	a9 00		lda #$00	                LDA #$00
.390c64	85 0a		sta $0a		                STA $0A     ; Temp Location
.390c66					iinit_lut_loop
.390c66	86 02		stx $02		                STX $02
.390c68	a6 0a		ldx $0a		                LDX $0A
.390c6a	bf 00 76 39	lda $397600,x	                LDA GAMMA_2_2_Tbl, x
.390c6e	49 55		eor #$55	                EOR  #$55
.390c70	a6 02		ldx $02		                LDX $02
.390c72	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390c76	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390c7a	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390c7e	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390c82	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390c86	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390c8a	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390c8e	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390c92	e8		inx		                inx
.390c93	86 02		stx $02		                STX $02
.390c95	a6 0a		ldx $0a		                LDX $0A
.390c97	bf 00 78 39	lda $397800,x	                LDA RANDOM_LUT_Tbl, x
.390c9b	a6 02		ldx $02		                LDX $02
.390c9d	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390ca1	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390ca5	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390ca9	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390cad	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390cb1	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390cb5	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390cb9	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390cbd	e8		inx		                inx
.390cbe	86 02		stx $02		                STX $02
.390cc0	a6 0a		ldx $0a		                LDX $0A
.390cc2	bf 00 77 39	lda $397700,x	                LDA GAMMA_1_8_Tbl, x
.390cc6	49 aa		eor #$aa	                EOR  #$AA
.390cc8	a6 02		ldx $02		                LDX $02
.390cca	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390cce	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390cd2	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390cd6	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390cda	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390cde	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390ce2	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390ce6	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390cea	e8		inx		                inx
.390ceb	a9 ff		lda #$ff	                LDA #$FF
.390ced	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390cf1	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390cf5	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390cf9	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390cfd	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390d01	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390d05	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390d09	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390d0d	e6 0a		inc $0a		                inc $0A
.390d0f	e8		inx		                inx
.390d10	e0 00 04	cpx #$0400	                cpx #$0400
.390d13	f0 03		beq $390d18	                beq iinit_lut_exit
.390d15	82 4e ff	brl $390c66	                brl iinit_lut_loop
.390d18					iinit_lut_exit
.390d18	c2 30		rep #$30	                REP #$30        ; set A&X long
.390d1a	fa		plx		                PLX
.390d1b	68		pla		                PLA
.390d1c	6b		rtl		                RTL
.390d1d	48		pha		IINITVKYTXTMODE PHA
.390d1e	08		php		                PHP
.390d1f	e2 20		sep #$20	                SEP #$20        ; set A short
.390d21	af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.390d25	29 01		and #$01	                AND #$01
.390d27	c9 01		cmp #$01	                CMP #$01
.390d29	d0 15		bne $390d40	                BNE INITVICKYMODE
.390d2b	a9 00		lda #$00	                LDA #$00
.390d2d	8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.390d31	ea		nop		                NOP
.390d32	ea		nop		                NOP
.390d33	ea		nop		                NOP
.390d34	ea		nop		                NOP
.390d35	ea		nop		                NOP
.390d36	a9 01		lda #$01	                LDA #$01
.390d38	8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.390d3c	ea		nop		                NOP
.390d3d	ea		nop		                NOP
.390d3e	ea		nop		                NOP
.390d3f	ea		nop		                NOP
.390d40					INITVICKYMODE
.390d40	a9 00		lda #$00	                LDA #$00
.390d42	8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.390d46	a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En       ; Set it to 640x480 for real
.390d48	8f 00 00 af	sta $af0000	                STA @L MASTER_CTRL_REG_L
.390d4c	e2 20		sep #$20	                SEP #$20        ; set A short
.390d4e	a9 20		lda #$20	                LDA #$20
.390d50	8f 05 00 af	sta $af0005	                STA BORDER_COLOR_B
.390d54	8f 07 00 af	sta $af0007	                STA BORDER_COLOR_R
.390d58	a9 00		lda #$00	                LDA #$00
.390d5a	8f 06 00 af	sta $af0006	                STA BORDER_COLOR_G
.390d5e	a9 01		lda #$01	                LDA #Border_Ctrl_Enable           ; Enable the Border
.390d60	8f 04 00 af	sta $af0004	                STA BORDER_CTRL_REG
.390d64	a9 20		lda #$20	                LDA #32                           ; Set the border to the standard 32 pixels
.390d66	8f 08 00 af	sta $af0008	                STA BORDER_X_SIZE
.390d6a	8f 09 00 af	sta $af0009	                STA BORDER_Y_SIZE
.390d6e	c2 30		rep #$30	                REP #$30        ; set A&X long
.390d70	22 77 0d 39	jsl $390d77	                JSL ISETSIZES                     ; Calculate the size of the text screen
.390d74	28		plp		                PLP
.390d75	68		pla		                PLA
.390d76	6b		rtl		                RTL
.390d77					ISETSIZES
.390d77	48		pha		                PHA
.390d78	da		phx		                PHX
.390d79	5a		phy		                PHY
.390d7a	8b		phb		                PHB
.390d7b	0b		phd		                PHD
.390d7c	08		php		                PHP
.390d7d	48		pha		                PHA             ; begin setdp macro
.390d7e	08		php		                PHP
.390d7f	c2 20		rep #$20	                REP #$20        ; set A long
.390d81	a9 00 00	lda #$0000	                LDA #<>BANK0_BEGIN         ; set DP to page 0
.390d84	5b		tcd		                TCD
.390d85	28		plp		                PLP
.390d86	68		pla		                PLA             ; end setdp macro
.390d87	48		pha		                PHA             ; begin setdbr macro
.390d88	08		php		                PHP
.390d89	e2 20		sep #$20	                SEP #$20        ; set A short
.390d8b	a9 00		lda #$00	                LDA #0
.390d8d	48		pha		                PHA
.390d8e	ab		plb		                PLB
.390d8f	28		plp		                PLP
.390d90	68		pla		                PLA             ; end setdbr macro
.390d91	e2 30		sep #$30	                SEP #$30        ; set A&X short
.390d93	af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.390d97	29 03		and #$03	                AND #$03                    ; Mask off the resolution bits
.390d99	0a		asl a		                ASL A
.390d9a	aa		tax		                TAX                         ; Index to the col/line count in X
.390d9b	c2 20		rep #$20	                REP #$20        ; set A long
.390d9d	bf 1a 0e 39	lda $390e1a,x	                LDA cols_by_res,X           ; Get the number of columns
.390da1	85 11		sta $11		                STA COLS_PER_LINE           ; This is how many columns there are per line in the memory
.390da3	85 0f		sta $0f		                STA COLS_VISIBLE            ; This is how many would be visible with no border
.390da5	bf 22 0e 39	lda $390e22,x	                LDA lines_by_res,X          ; Get the number of lines
.390da9	85 15		sta $15		                STA LINES_MAX               ; This is the total number of lines in memory
.390dab	85 13		sta $13		                STA LINES_VISIBLE           ; This is how many lines would be visible with no border
.390dad	e2 20		sep #$20	                SEP #$20        ; set A short
.390daf	af 04 00 af	lda $af0004	                LDA @l BORDER_CTRL_REG      ; Check to see if we have a border
.390db3	89 01		bit #$01	                BIT #Border_Ctrl_Enable
.390db5	f0 5c		beq $390e13	                BEQ done                    ; No border... the sizes are correct now
.390db7	af 08 00 af	lda $af0008	                LDA @l BORDER_X_SIZE        ; Get the horizontal border width
.390dbb	29 3f		and #$3f	                AND #$3F
.390dbd	89 03		bit #$03	                BIT #$03                    ; Check the lower two bits... indicates a partial column is eaten
.390dbf	d0 04		bne $390dc5	                BNE frac_width
.390dc1	4a		lsr a		                LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.390dc2	4a		lsr a		                LSR A
.390dc3	80 03		bra $390dc8	                BRA store_width
.390dc5	4a		lsr a		frac_width      LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.390dc6	4a		lsr a		                LSR A                       ; because a column is partially hidden
.390dc7	1a		inc a		                INC A
.390dc8	85 00		sta $00		store_width     STA TMPPTR1
.390dca	64 01		stz $01		                STZ TMPPTR1+1
.390dcc	e2 20		sep #$20	                SEP #$20        ; set A short
.390dce	af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H    ; Check if we're pixel doubling
.390dd2	89 02		bit #$02	                BIT #Mstr_Ctrl_Video_Mode1
.390dd4	f0 04		beq $390dda	                BEQ adjust_width            ; No... just adjust the width of the screen
.390dd6	c2 20		rep #$20	                REP #$20        ; set A long
.390dd8	46 00		lsr $00		                LSR TMPPTR1                 ; Yes... cut the adjustment in half
.390dda					adjust_width
.390dda	c2 20		rep #$20	                REP #$20        ; set A long
.390ddc	38		sec		                SEC
.390ddd	a5 11		lda $11		                LDA COLS_PER_LINE
.390ddf	e5 00		sbc $00		                SBC TMPPTR1
.390de1	85 0f		sta $0f		                STA COLS_VISIBLE
.390de3	af 09 00 af	lda $af0009	                LDA @l BORDER_Y_SIZE        ; Get the horizontal border width
.390de7	29 3f 00	and #$003f	                AND #$3F
.390dea	89 03 00	bit #$0003	                BIT #$03                    ; Check the lower two bits... indicates a partial column is eaten
.390ded	d0 04		bne $390df3	                BNE frac_height
.390def	4a		lsr a		                LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.390df0	4a		lsr a		                LSR A
.390df1	80 03		bra $390df6	                BRA store_height
.390df3	4a		lsr a		frac_height     LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.390df4	4a		lsr a		                LSR A                       ; because a column is partially hidden
.390df5	1a		inc a		                INC A
.390df6	85 00		sta $00		store_height    STA TMPPTR1
.390df8	64 01		stz $01		                STZ TMPPTR1+1
.390dfa	e2 20		sep #$20	                SEP #$20        ; set A short
.390dfc	af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H    ; Check if we're pixel doubling
.390e00	89 02		bit #$02	                BIT #Mstr_Ctrl_Video_Mode1
.390e02	f0 04		beq $390e08	                BEQ adjust_height           ; No... just adjust the height of the screen
.390e04	c2 20		rep #$20	                REP #$20        ; set A long
.390e06	46 00		lsr $00		                LSR TMPPTR1                 ; Yes... cut the adjustment in half
.390e08					adjust_height
.390e08	c2 20		rep #$20	                REP #$20        ; set A long
.390e0a	38		sec		                SEC
.390e0b	a5 15		lda $15		                LDA LINES_MAX
.390e0d	e5 00		sbc $00		                SBC TMPPTR1
.390e0f	85 13		sta $13		                STA LINES_VISIBLE
.390e11	c2 30		rep #$30	                REP #$30        ; set A&X long
.390e13	28		plp		done            PLP
.390e14	2b		pld		                PLD
.390e15	ab		plb		                PLB
.390e16	7a		ply		                PLY
.390e17	fa		plx		                PLX
.390e18	68		pla		                PLA
.390e19	6b		rtl		                RTL
>390e1a	50 00 64 00 28 00 32 00		cols_by_res     .word 80,100,40,50
>390e22	3c 00 4b 00 1e 00 25 00		lines_by_res    .word 60,75,30,37
.390e2a					IINITVKYGRPMODE
.390e2a	48		pha		                PHA
.390e2b	e2 20		sep #$20	                SEP #$20        ; set A short
.390e2d	a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.390e2f	8f 00 01 af	sta $af0100	                STA @lBM0_CONTROL_REG
.390e33	a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.390e35	8f 01 01 af	sta $af0101	                STA @lBM0_START_ADDY_L
.390e39	a9 c0		lda #$c0	                LDA #$C0
.390e3b	8f 02 01 af	sta $af0102	                STA @lBM0_START_ADDY_M
.390e3f	a9 00		lda #$00	                LDA #$00
.390e41	8f 03 01 af	sta $af0103	                STA @lBM0_START_ADDY_H ; This address is always base from
.390e45	a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.390e47	8f 08 01 af	sta $af0108	                STA @lBM1_CONTROL_REG
.390e4b	a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.390e4d	8f 09 01 af	sta $af0109	                STA @lBM1_START_ADDY_L
.390e51	a9 c0		lda #$c0	                LDA #$C0
.390e53	8f 0a 01 af	sta $af010a	                STA @lBM1_START_ADDY_M
.390e57	a9 00		lda #$00	                LDA #$00
.390e59	8f 0b 01 af	sta $af010b	                STA @lBM1_START_ADDY_H ; This address is always base from
.390e5d	c2 30		rep #$30	                REP #$30        ; set A&X long
.390e5f	68		pla		                PLA
.390e60	6b		rtl		                RTL
.390e61					IINITTILEMODE
.390e61	6b		rtl		                RTL
.390e62	48		pha		IINITSPRITE     PHA
.390e63	e2 20		sep #$20	                SEP #$20        ; set A short
.390e65	a9 03		lda #$03	                LDA #$03    ; Enable 17 Sprites
.390e67	8f 00 0c af	sta $af0c00	                STA SP00_CONTROL_REG
.390e6b	8f 08 0c af	sta $af0c08	                STA SP01_CONTROL_REG
.390e6f	8f 10 0c af	sta $af0c10	                STA SP02_CONTROL_REG
.390e73	8f 18 0c af	sta $af0c18	                STA SP03_CONTROL_REG
.390e77	8f 20 0c af	sta $af0c20	                STA SP04_CONTROL_REG
.390e7b	8f 28 0c af	sta $af0c28	                STA SP05_CONTROL_REG
.390e7f	8f 30 0c af	sta $af0c30	                STA SP06_CONTROL_REG
.390e83	8f 38 0c af	sta $af0c38	                STA SP07_CONTROL_REG
.390e87	8f 40 0c af	sta $af0c40	                STA SP08_CONTROL_REG
.390e8b	8f 48 0c af	sta $af0c48	                STA SP09_CONTROL_REG
.390e8f	8f 50 0c af	sta $af0c50	                STA SP10_CONTROL_REG
.390e93	8f 58 0c af	sta $af0c58	                STA SP11_CONTROL_REG
.390e97	8f 60 0c af	sta $af0c60	                STA SP12_CONTROL_REG
.390e9b	8f 68 0c af	sta $af0c68	                STA SP13_CONTROL_REG
.390e9f	8f 70 0c af	sta $af0c70	                STA SP14_CONTROL_REG
.390ea3	8f 78 0c af	sta $af0c78	                STA SP15_CONTROL_REG
.390ea7	8f 80 0c af	sta $af0c80	                STA SP16_CONTROL_REG
.390eab	a9 09		lda #$09	                LDA #$09
.390ead	8f 03 0c af	sta $af0c03	                STA SP00_ADDY_PTR_H
.390eb1	8f 0b 0c af	sta $af0c0b	                STA SP01_ADDY_PTR_H
.390eb5	8f 13 0c af	sta $af0c13	                STA SP02_ADDY_PTR_H
.390eb9	8f 1b 0c af	sta $af0c1b	                STA SP03_ADDY_PTR_H
.390ebd	8f 23 0c af	sta $af0c23	                STA SP04_ADDY_PTR_H
.390ec1	8f 2b 0c af	sta $af0c2b	                STA SP05_ADDY_PTR_H
.390ec5	8f 33 0c af	sta $af0c33	                STA SP06_ADDY_PTR_H
.390ec9	8f 3b 0c af	sta $af0c3b	                STA SP07_ADDY_PTR_H
.390ecd	8f 43 0c af	sta $af0c43	                STA SP08_ADDY_PTR_H
.390ed1	8f 4b 0c af	sta $af0c4b	                STA SP09_ADDY_PTR_H
.390ed5	8f 53 0c af	sta $af0c53	                STA SP10_ADDY_PTR_H
.390ed9	8f 5b 0c af	sta $af0c5b	                STA SP11_ADDY_PTR_H
.390edd	8f 63 0c af	sta $af0c63	                STA SP12_ADDY_PTR_H
.390ee1	8f 6b 0c af	sta $af0c6b	                STA SP13_ADDY_PTR_H
.390ee5	8f 73 0c af	sta $af0c73	                STA SP14_ADDY_PTR_H
.390ee9	8f 7b 0c af	sta $af0c7b	                STA SP15_ADDY_PTR_H
.390eed	8f 83 0c af	sta $af0c83	                STA SP16_ADDY_PTR_H
.390ef1	a9 00		lda #$00	                LDA #$00
.390ef3	8f 02 0c af	sta $af0c02	                STA SP00_ADDY_PTR_M
.390ef7	a9 04		lda #$04	                LDA #$04
.390ef9	8f 0a 0c af	sta $af0c0a	                STA SP01_ADDY_PTR_M
.390efd	a9 08		lda #$08	                LDA #$08
.390eff	8f 12 0c af	sta $af0c12	                STA SP02_ADDY_PTR_M
.390f03	a9 0c		lda #$0c	                LDA #$0C
.390f05	8f 1a 0c af	sta $af0c1a	                STA SP03_ADDY_PTR_M
.390f09	a9 10		lda #$10	                LDA #$10
.390f0b	8f 22 0c af	sta $af0c22	                STA SP04_ADDY_PTR_M
.390f0f	a9 14		lda #$14	                LDA #$14
.390f11	8f 2a 0c af	sta $af0c2a	                STA SP05_ADDY_PTR_M
.390f15	a9 18		lda #$18	                LDA #$18
.390f17	8f 32 0c af	sta $af0c32	                STA SP06_ADDY_PTR_M
.390f1b	a9 1c		lda #$1c	                LDA #$1C
.390f1d	8f 3a 0c af	sta $af0c3a	                STA SP07_ADDY_PTR_M
.390f21	a9 20		lda #$20	                LDA #$20
.390f23	8f 42 0c af	sta $af0c42	                STA SP08_ADDY_PTR_M
.390f27	a9 24		lda #$24	                LDA #$24
.390f29	8f 4a 0c af	sta $af0c4a	                STA SP09_ADDY_PTR_M
.390f2d	a9 28		lda #$28	                LDA #$28
.390f2f	8f 52 0c af	sta $af0c52	                STA SP10_ADDY_PTR_M
.390f33	a9 2c		lda #$2c	                LDA #$2C
.390f35	8f 5a 0c af	sta $af0c5a	                STA SP11_ADDY_PTR_M
.390f39	a9 30		lda #$30	                LDA #$30
.390f3b	8f 62 0c af	sta $af0c62	                STA SP12_ADDY_PTR_M
.390f3f	a9 34		lda #$34	                LDA #$34
.390f41	8f 6a 0c af	sta $af0c6a	                STA SP13_ADDY_PTR_M
.390f45	a9 38		lda #$38	                LDA #$38
.390f47	8f 72 0c af	sta $af0c72	                STA SP14_ADDY_PTR_M
.390f4b	a9 3c		lda #$3c	                LDA #$3C
.390f4d	8f 7a 0c af	sta $af0c7a	                STA SP15_ADDY_PTR_M
.390f51	a9 40		lda #$40	                LDA #$40
.390f53	8f 82 0c af	sta $af0c82	                STA SP16_ADDY_PTR_M
.390f57	a9 00		lda #$00	                LDA #$00
.390f59	8f 01 0c af	sta $af0c01	                STA SP00_ADDY_PTR_L
.390f5d	8f 09 0c af	sta $af0c09	                STA SP01_ADDY_PTR_L
.390f61	8f 11 0c af	sta $af0c11	                STA SP02_ADDY_PTR_L
.390f65	8f 19 0c af	sta $af0c19	                STA SP03_ADDY_PTR_L
.390f69	8f 21 0c af	sta $af0c21	                STA SP04_ADDY_PTR_L
.390f6d	8f 29 0c af	sta $af0c29	                STA SP05_ADDY_PTR_L
.390f71	8f 31 0c af	sta $af0c31	                STA SP06_ADDY_PTR_L
.390f75	8f 39 0c af	sta $af0c39	                STA SP07_ADDY_PTR_L
.390f79	8f 41 0c af	sta $af0c41	                STA SP08_ADDY_PTR_L
.390f7d	8f 49 0c af	sta $af0c49	                STA SP09_ADDY_PTR_L
.390f81	8f 51 0c af	sta $af0c51	                STA SP10_ADDY_PTR_L
.390f85	8f 59 0c af	sta $af0c59	                STA SP11_ADDY_PTR_L
.390f89	8f 61 0c af	sta $af0c61	                STA SP12_ADDY_PTR_L
.390f8d	8f 69 0c af	sta $af0c69	                STA SP13_ADDY_PTR_L
.390f91	8f 71 0c af	sta $af0c71	                STA SP14_ADDY_PTR_L
.390f95	8f 79 0c af	sta $af0c79	                STA SP15_ADDY_PTR_L
.390f99	8f 81 0c af	sta $af0c81	                STA SP16_ADDY_PTR_L
.390f9d	68		pla		                PLA
.390f9e	6b		rtl		                RTL
.390f9f					IINITFONTSET
.390f9f	48		pha		                PHA
.390fa0	da		phx		                PHX
.390fa1	5a		phy		                PHY
.390fa2	8b		phb		                PHB
.390fa3	08		php		                PHP
.390fa4	c2 30		rep #$30	                REP #$30        ; set A&X long
.390fa6	a2 00 f0	ldx #$f000	                LDX #<>FONT_4_BANK0         ; Font data to load
.390fa9	a0 00 80	ldy #$8000	                LDY #<>FONT_MEMORY_BANK0    ; Location to load the font data
.390fac	a9 00 08	lda #$0800	                LDA #8 * 256                ; Size of a FONT in bytes
.390faf	54 af 3f	mvn $3f,$af	                MVN #`FONT_4_BANK0, #`FONT_MEMORY_BANK0
.390fb2	28		plp		                PLP
.390fb3	ab		plb		                PLB
.390fb4	7a		ply		                PLY
.390fb5	fa		plx		                PLX
.390fb6	68		pla		                PLA
.390fb7	6b		rtl		                RTL
.390fb8					INITMOUSEPOINTER
.390fb8	e2 20		sep #$20	                SEP #$20        ; set A short
.390fba	c2 10		rep #$10	                REP #$10        ; set X long
.390fbc	a2 00 00	ldx #$0000	                LDX #$0000
.390fbf					FILL_MOUSE_MARKER
.390fbf	bf 00 79 39	lda $397900,x	                LDA @lMOUSE_POINTER_PTR,X
.390fc3	9f 00 05 af	sta $af0500,x	                STA @lMOUSE_PTR_GRAP0_START, X
.390fc7	e8		inx		                INX
.390fc8	e0 00 01	cpx #$0100	                CPX #$0100
.390fcb	d0 f2		bne $390fbf	                BNE FILL_MOUSE_MARKER
.390fcd	ea		nop		                nop
.390fce	a9 01		lda #$01	                LDA #$01
.390fd0	8f 00 07 af	sta $af0700	                STA @lMOUSE_PTR_CTRL_REG_L  ; Enable Mouse, Mouse Pointer Graphic Bank 0
.390fd4	c2 30		rep #$30	                REP #$30        ; set A&X long
.390fd6	6b		rtl		                RTL
.390fd7	48		pha		IINITCURSOR     PHA
.390fd8	e2 20		sep #$20	                SEP #$20        ; set A short
.390fda	a9 b1		lda #$b1	                LDA #$B1      ;The Cursor Character will be a Fully Filled Block
.390fdc	8f 12 00 af	sta $af0012	                STA VKY_TXT_CURSOR_CHAR_REG
.390fe0	a9 03		lda #$03	                LDA #$03      ;Set Cursor Enable And Flash Rate @1Hz
.390fe2	8f 10 00 af	sta $af0010	                STA VKY_TXT_CURSOR_CTRL_REG ;
.390fe6	c2 30		rep #$30	                REP #$30        ; set A&X long
.390fe8	a9 00 00	lda #$0000	                LDA #$0000;
.390feb	8f 14 00 af	sta $af0014	                STA VKY_TXT_CURSOR_X_REG_L; // Set the X to Position 1
.390fef	a9 06 00	lda #$0006	                LDA #$0006;
.390ff2	8f 16 00 af	sta $af0016	                STA VKY_TXT_CURSOR_Y_REG_L; // Set the Y to Position 6 (Below)
.390ff6	68		pla		                PLA
.390ff7	6b		rtl		                RTL
.390ff8	0b		phd		IINITSUPERIO	  PHD
.390ff9	08		php		                PHP
.390ffa	48		pha		                PHA
.390ffb	e2 20		sep #$20	                SEP #$20        ; set A short
.390ffd	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390fff	8f 23 11 af	sta $af1123	                STA GP10_REG
.391003	af 23 11 af	lda $af1123	                LDA GP10_REG
.391007	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.391009	8f 24 11 af	sta $af1124	                STA GP11_REG
.39100d	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.39100f	8f 25 11 af	sta $af1125	                STA GP12_REG
.391013	a9 01		lda #$01	        				LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.391015	8f 26 11 af	sta $af1126	        				STA GP13_REG
.391019	a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BX) Bit[0] = 1, Bit[2] = 1
.39101b	8f 27 11 af	sta $af1127	        				STA GP14_REG
.39101f	a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BY) Bit[0] = 1, Bit[2] = 1
.391021	8f 28 11 af	sta $af1128	        				STA GP15_REG
.391025	a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BX) Bit[0] = 1, Bit[2] = 1
.391027	8f 29 11 af	sta $af1129	        				STA GP16_REG
.39102b	a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BY) Bit[0] = 1, Bit[2] = 1
.39102d	8f 2a 11 af	sta $af112a	        				STA GP17_REG
.391031	a9 00		lda #$00	        				LDA #$00		;(C256 - HEADPHONE MUTE) - Output GPIO - Push-Pull (1 - Headphone On, 0 - HeadPhone Off)
.391033	8f 2b 11 af	sta $af112b	        				STA GP20_REG
.391037	a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.391039	8f 2f 11 af	sta $af112f					        STA GP24_REG
.39103d	a9 05		lda #$05					        LDA #$05		;(C256 - MIDI IN) Bit[0] = 1, Bit[2] = 1 (Page 132 Manual)
.39103f	8f 30 11 af	sta $af1130					        STA GP25_REG
.391043	a9 84		lda #$84				        	LDA #$84		;(C256 - MIDI OUT) Bit[2] = 1, Bit[7] = 1 (Open Drain - To be Checked)
.391045	8f 31 11 af	sta $af1131					        STA GP26_REG
.391049	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 1) Setup as GPIO Input for now
.39104b	8f 33 11 af	sta $af1133					        STA GP30_REG
.39104f	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 4) Setup as GPIO Input for now
.391051	8f 34 11 af	sta $af1134					        STA GP31_REG
.391055	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 3) Setup as GPIO Input for now
.391057	8f 35 11 af	sta $af1135					        STA GP32_REG
.39105b	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 6) Setup as GPIO Input for now
.39105d	8f 36 11 af	sta $af1136					        STA GP33_REG
.391061	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 5) Setup as GPIO Input for now
.391063	8f 37 11 af	sta $af1137					        STA GP34_REG
.391067	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 8) Setup as GPIO Input for now
.391069	8f 38 11 af	sta $af1138					        STA GP35_REG
.39106d	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 7) Setup as GPIO Input for now
.39106f	8f 39 11 af	sta $af1139					        STA GP36_REG
.391073	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 10) Setup as GPIO Input for now
.391075	8f 3a 11 af	sta $af113a					        STA GP37_REG
.391079	a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.39107b	8f 3d 11 af	sta $af113d					        STA GP42_REG
.39107f	a9 01		lda #$01				          LDA #$01		;(C256 - INPUT PLL CLK INTERRUPT) Default Value - Will keep it as an input for now, no real usage for now
.391081	8f 3e 11 af	sta $af113e					        STA GP43_REG
.391085	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RI2) - Input - Set Secondary Function
.391087	8f 3f 11 af	sta $af113f					        STA GP50_REG
.39108b	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DCD2) - Input - Set Secondary Function
.39108d	8f 40 11 af	sta $af1140					        STA GP51_REG
.391091	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RXD2) - Input - Set Secondary Function
.391093	8f 41 11 af	sta $af1141					        STA GP52_REG
.391097	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - TXD2) - Output - Set Secondary Function
.391099	8f 42 11 af	sta $af1142					        STA GP53_REG
.39109d	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DSR2) - Input - Set Secondary Function
.39109f	8f 43 11 af	sta $af1143					        STA GP54_REG
.3910a3	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - RTS2) - Output - Set Secondary Function
.3910a5	8f 44 11 af	sta $af1144					        STA GP55_REG
.3910a9	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - CTS2) - Input - Set Secondary Function
.3910ab	8f 45 11 af	sta $af1145					        STA GP56_REG
.3910af	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - DTR2) - Output - Set Secondary Function
.3910b1	8f 46 11 af	sta $af1146					        STA GP57_REG
.3910b5	a9 84		lda #$84					        LDA #$84		;(C256 - LED1) - Open Drain - Output
.3910b7	8f 47 11 af	sta $af1147					        STA GP60_REG
.3910bb	a9 84		lda #$84					        LDA #$84		;(C256 - LED2) - Open Drain - Output
.3910bd	8f 48 11 af	sta $af1148					        STA GP61_REG
.3910c1	a9 00		lda #$00				        	LDA #$00		;GPIO Data Register (GP10..GP17) - Not Used
.3910c3	8f 4b 11 af	sta $af114b					        STA GP1_REG
.3910c7	a9 01		lda #$01					        LDA #$01		;GPIO Data Register (GP20..GP27) - Bit[0] - Headphone Mute (Enabling it)
.3910c9	8f 4c 11 af	sta $af114c					        STA GP2_REG
.3910cd	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP30..GP37) - Since it is in Output mode, nothing to write here.
.3910cf	8f 4d 11 af	sta $af114d					        STA GP3_REG
.3910d3	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP40..GP47)  - Not Used
.3910d5	8f 4e 11 af	sta $af114e					        STA GP4_REG
.3910d9	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP50..GP57)  - Not Used
.3910db	8f 4f 11 af	sta $af114f					        STA GP5_REG
.3910df	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP60..GP61)  - Not Used
.3910e1	8f 50 11 af	sta $af1150					        STA GP6_REG
.3910e5	a9 01		lda #$01					        LDA #$01		;LED1 Output - Already setup by Vicky Init Phase, for now, I will leave it alone
.3910e7	8f 5d 11 af	sta $af115d					        STA LED1_REG
.3910eb	a9 02		lda #$02					        LDA #$02		;LED2 Output - However, I will setup this one, to make sure the Code works (Full On, when Code was ran)
.3910ed	8f 5e 11 af	sta $af115e					        STA LED2_REG
.3910f1	c2 20		rep #$20	                REP #$20        ; set A long
.3910f3	68		pla		                PLA
.3910f4	28		plp						        PLP
.3910f5	2b		pld					        	PLD
.3910f6	6b		rtl		                RTL
.3910f7	0b		phd		IINITKEYBOARD	  PHD
.3910f8	08		php						        PHP
.3910f9	48		pha						        PHA
.3910fa	da		phx						        PHX
.3910fb	e2 20		sep #$20	                SEP #$20        ; set A short
.3910fd	c2 10		rep #$10	                REP #$10        ; set X long
.3910ff	18		clc		                CLC
.391100	20 b0 11	jsr $3911b0	                JSR Poll_Inbuf ;
.391103	a9 aa		lda #$aa					        LDA #$AA			;Send self test command
.391105	8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.391109	20 bb 11	jsr $3911bb	                JSR Poll_Outbuf ;
.39110c	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Check self test result
.391110	c9 55		cmp #$55					        CMP #$55
.391112	f0 03		beq $391117					        BEQ	passAAtest
.391114	82 89 00	brl $3911a0	                BRL initkb_loop_out
.391117					passAAtest
.391117	a9 ab		lda #$ab					        LDA #$AB			;Send test Interface command
.391119	8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.39111d	20 bb 11	jsr $3911bb	                JSR Poll_Outbuf ;
.391120	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Display Interface test results
.391124	c9 00		cmp #$00					        CMP #$00			;Should be 00
.391126	f0 03		beq $39112b					        BEQ	passABtest
.391128	82 75 00	brl $3911a0	                BRL initkb_loop_out
.39112b					passABtest
.39112b	a9 60		lda #$60	                LDA #$60            ; Send Command 0x60 so to Enable Interrupt
.39112d	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.391131	20 b0 11	jsr $3911b0	                JSR Poll_Inbuf ;
.391134	a9 69		lda #$69	                LDA #%01101001      ; Enable Interrupt
.391136	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.39113a	20 b0 11	jsr $3911b0	                JSR Poll_Inbuf ;
.39113d	a9 ff		lda #$ff	                LDA #$FF      ; Send Keyboard Reset command
.39113f	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.391143	a2 ff ff	ldx #$ffff	                LDX #$FFFF
.391146	ca		dex		DLY_LOOP1       DEX
.391147	ea		nop		                NOP
.391148	ea		nop		                NOP
.391149	ea		nop		                NOP
.39114a	ea		nop		                NOP
.39114b	ea		nop		                NOP
.39114c	ea		nop		                NOP
.39114d	ea		nop		                NOP
.39114e	ea		nop		                NOP
.39114f	e0 00 00	cpx #$0000	                CPX #$0000
.391152	d0 f2		bne $391146	                BNE DLY_LOOP1
.391154	20 bb 11	jsr $3911bb	                JSR Poll_Outbuf ;
.391157	af 60 10 af	lda $af1060	                LDA KBD_OUT_BUF   ; Read Output Buffer
.39115b					DO_CMD_F4_AGAIN
.39115b	20 b0 11	jsr $3911b0	                JSR Poll_Inbuf ;
.39115e	a9 f4		lda #$f4					        LDA #$F4			; Enable the Keyboard
.391160	8f 60 10 af	sta $af1060					        STA KBD_DATA_BUF
.391164	20 bb 11	jsr $3911bb	                JSR Poll_Outbuf ;
.391167	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		; Clear the Output buffer
.39116b	c9 fa		cmp #$fa	                CMP #$FA
.39116d	d0 ec		bne $39115b	                BNE DO_CMD_F4_AGAIN
.39116f	20 c6 11	jsr $3911c6	                JSR INIT_MOUSE
.391172	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0  ; Read the Pending Register &
.391176	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.391178	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0  ; Writing it back will clear the Active Bit
.39117c	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1  ; Read the Pending Register &
.391180	29 01		and #$01	                AND #FNX1_INT00_KBD
.391182	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1  ; Writing it back will clear the Active Bit
.391186	af 4d 01 00	lda $00014d	                LDA @lINT_MASK_REG1
.39118a	29 fe		and #$fe	                AND #~FNX1_INT00_KBD
.39118c	8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.391190	af 4c 01 00	lda $00014c	                LDA @lINT_MASK_REG0
.391194	29 7f		and #$7f	                AND #~FNX0_INT07_MOUSE
.391196	8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.39119a	a2 bf 70	ldx #$70bf	                LDX #<>Success_kb_init
.39119d	38		sec		                SEC
.39119e	b0 03		bcs $3911a3	                BCS InitSuccess
.3911a0	a2 d1 70	ldx #$70d1	initkb_loop_out LDX #<>Failed_kb_init
.3911a3	22 7e 07 39	jsl $39077e	InitSuccess     JSL IPRINT       ; print Message
.3911a7	c2 20		rep #$20	                REP #$20        ; set A long
.3911a9	c2 10		rep #$10	                REP #$10        ; set X long
.3911ab	fa		plx		                PLX
.3911ac	68		pla		                PLA
.3911ad	28		plp						        PLP
.3911ae	2b		pld						        PLD
.3911af	6b		rtl		                RTL
.3911b0					Poll_Inbuf
.3911b0	af 64 10 af	lda $af1064	                LDA STATUS_PORT		; Load Status Byte
.3911b4	29 02		and #$02					        AND	#<INPT_BUF_FULL	; Test bit $02 (if 0, Empty)
.3911b6	c9 02		cmp #$02					        CMP #<INPT_BUF_FULL
.3911b8	f0 f6		beq $3911b0					        BEQ Poll_Inbuf
.3911ba	60		rts		                RTS
.3911bb					Poll_Outbuf
.3911bb	af 64 10 af	lda $af1064	                LDA STATUS_PORT
.3911bf	29 01		and #$01	                AND #OUT_BUF_FULL ; Test bit $01 (if 1, Full)
.3911c1	c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.3911c3	d0 f6		bne $3911bb	                BNE Poll_Outbuf
.3911c5	60		rts		                RTS
.3911c6					INIT_MOUSE
.3911c6	20 b0 11	jsr $3911b0	                JSR Poll_Inbuf
.3911c9	a9 a8		lda #$a8	                LDA #$A8          ; Enable the second PS2 Channel
.3911cb	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.3911cf					DO_CMD_A9_AGAIN
.3911cf	20 b0 11	jsr $3911b0	                JSR Poll_Inbuf
.3911d2	a9 a9		lda #$a9	                LDA #$A9          ; Tests second PS2 Channel
.3911d4	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.3911d8	20 bb 11	jsr $3911bb	                JSR Poll_Outbuf ;
.3911db	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		; Clear the Output buffer
.3911df	c9 00		cmp #$00	                CMP #$00
.3911e1	d0 ec		bne $3911cf	                BNE DO_CMD_A9_AGAIN
.3911e3	20 b0 11	jsr $3911b0	                JSR Poll_Inbuf
.3911e6	a9 20		lda #$20	                LDA #$20
.3911e8	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.3911ec	20 bb 11	jsr $3911bb	                JSR Poll_Outbuf ;
.3911ef	af 60 10 af	lda $af1060	                LDA KBD_OUT_BUF
.3911f3	09 02		ora #$02	                ORA #$02
.3911f5	48		pha		                PHA
.3911f6	20 b0 11	jsr $3911b0	                JSR Poll_Inbuf
.3911f9	a9 60		lda #$60	                LDA #$60
.3911fb	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.3911ff	20 b0 11	jsr $3911b0	                JSR Poll_Inbuf ;
.391202	68		pla		                PLA
.391203	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.391207	a9 f6		lda #$f6	                LDA #$F6        ;Tell the mouse to use default settings
.391209	20 2c 12	jsr $39122c	                JSR MOUSE_WRITE
.39120c	20 3f 12	jsr $39123f	                JSR MOUSE_READ
.39120f	a9 e8		lda #$e8	                LDA #$E8
.391211	20 2c 12	jsr $39122c	                JSR MOUSE_WRITE
.391214	20 3f 12	jsr $39123f	                JSR MOUSE_READ
.391217	a9 00		lda #$00	                LDA #$00
.391219	20 2c 12	jsr $39122c	                JSR MOUSE_WRITE
.39121c	20 3f 12	jsr $39123f	                JSR MOUSE_READ
.39121f	a9 f4		lda #$f4	                LDA #$F4        ; Enable the Mouse
.391221	20 2c 12	jsr $39122c	                JSR MOUSE_WRITE
.391224	20 3f 12	jsr $39123f	                JSR MOUSE_READ
.391227	a9 00		lda #$00	                LDA #$00
.391229	85 e0		sta $e0		                STA MOUSE_PTR
.39122b	60		rts		                RTS
.39122c					MOUSE_WRITE
.39122c	48		pha		                PHA
.39122d	20 b0 11	jsr $3911b0	                JSR Poll_Inbuf
.391230	a9 d4		lda #$d4	                LDA #$D4
.391232	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.391236	20 b0 11	jsr $3911b0	                JSR Poll_Inbuf
.391239	68		pla		                PLA
.39123a	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.39123e	60		rts		                RTS
.39123f					MOUSE_READ
.39123f	20 bb 11	jsr $3911bb	                JSR Poll_Outbuf ;
.391242	af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF
.391246	60		rts		                RTS
.391247	48		pha		INITRTC         PHA
.391248	08		php		                PHP
.391249	e2 20		sep #$20	                SEP #$20        ; set A short
.39124b	a9 00		lda #$00	                LDA #0
.39124d	8f 0b 08 af	sta $af080b	                STA @l RTC_RATES    ; Set watch dog timer and periodic interrupt rates to 0
.391251	8f 0c 08 af	sta $af080c	                STA @l RTC_ENABLE   ; Disable all the alarms and interrupts
.391255	af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL      ; Make sure the RTC will continue to tick in battery mode
.391259	09 04		ora #$04	                ORA #%00000100
.39125b	8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.39125f	28		plp		                PLP
.391260	68		pla		                PLA
.391261	6b		rtl		                RTL
.391262					ITESTSID
.391262	a9 0f		lda #$0f	                LDA #$0F
.391264	8f 18 e4 af	sta $afe418	                STA SID0_MODE_VOL
.391268	a9 be		lda #$be	                LDA #$BE
.39126a	8f 05 e4 af	sta $afe405	                STA SID0_V1_ATCK_DECY
.39126e	a9 f8		lda #$f8	                LDA #$F8
.391270	8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.391274	a9 11		lda #$11	                LDA #$11
.391276	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.39127a	a9 25		lda #$25	                LDA #$25
.39127c	8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.391280	a9 11		lda #$11	                LDA #$11
.391282	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL
.391286	a9 08		lda #$08	                LDA #$08
.391288	8f 03 e4 af	sta $afe403	                STA SID0_V1_PW_HI   ;G1
.39128c	a9 00		lda #$00	                LDA #$00
.39128e	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.391292	a9 c6		lda #$c6	                LDA #$C6
.391294	8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.391298	a9 08		lda #$08	                LDA #$08
.39129a	8f 0a e4 af	sta $afe40a	                STA SID0_V2_PW_HI   ;G1
.39129e	a9 00		lda #$00	                LDA #$00
.3912a0	8f 08 e4 af	sta $afe408	                STA SID0_V2_FREQ_HI
.3912a4	a9 08		lda #$08	                LDA #$08
.3912a6	8f 0c e4 af	sta $afe40c	                STA SID0_V2_ATCK_DECY
.3912aa	a9 c6		lda #$c6	                LDA #$C6
.3912ac	8f 0d e4 af	sta $afe40d	                STA SID0_V2_SSTN_RLSE
.3912b0	a9 08		lda #$08	                LDA #$08
.3912b2	8f 11 e4 af	sta $afe411	                STA SID0_V3_PW_HI   ;G1
.3912b6	a9 00		lda #$00	                LDA #$00
.3912b8	8f 0f e4 af	sta $afe40f	                STA SID0_V3_FREQ_HI
.3912bc	a9 08		lda #$08	                LDA #$08
.3912be	8f 13 e4 af	sta $afe413	                STA SID0_V3_ATCK_DECY
.3912c2	a9 c6		lda #$c6	                LDA #$C6
.3912c4	8f 14 e4 af	sta $afe414	                STA SID0_V3_SSTN_RLSE
.3912c8	a9 36		lda #$36	                LDA #$36              ;Left Side (Rev A of Board)
.3912ca	8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.3912ce	a9 01		lda #$01	                LDA #$01
.3912d0	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI   ;G1
.3912d4	a9 00		lda #$00	                LDA #$00              ;Left Side (Rev A of Board)
.3912d6	8f 02 e4 af	sta $afe402	                STA SID0_V1_PW_LO
.3912da	a9 08		lda #$08	                LDA #$08
.3912dc	8f 03 e4 af	sta $afe403	                STA SID0_V1_PW_HI   ;G1
.3912e0	a9 08		lda #$08	                LDA #$08
.3912e2	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL    ; Reset
.3912e6	a9 0c		lda #$0c	                LDA #$0C
.3912e8	8f 07 e4 af	sta $afe407	                STA SID0_V2_FREQ_LO
.3912ec	a9 04		lda #$04	                LDA #$04
.3912ee	8f 08 e4 af	sta $afe408	                STA SID0_V2_FREQ_HI   ;B1
.3912f2	a9 00		lda #$00	                LDA #$00              ;Left Side (Rev A of Board)
.3912f4	8f 09 e4 af	sta $afe409	                STA SID0_V2_PW_LO
.3912f8	a9 08		lda #$08	                LDA #$08
.3912fa	8f 0a e4 af	sta $afe40a	                STA SID0_V2_PW_HI   ;G1
.3912fe	a9 08		lda #$08	                LDA #$08
.391300	8f 0b e4 af	sta $afe40b	                STA SID0_V2_CTRL    ; Reset
.391304	a9 00		lda #$00	                LDA #$00
.391306	8f 0e e4 af	sta $afe40e	                STA SID0_V3_FREQ_LO
.39130a	a9 08		lda #$08	                LDA #$08
.39130c	8f 0f e4 af	sta $afe40f	                STA SID0_V3_FREQ_HI   ;D
.391310	a9 00		lda #$00	                LDA #$00              ;Left Side (Rev A of Board)
.391312	8f 10 e4 af	sta $afe410	                STA SID0_V3_PW_LO
.391316	a9 08		lda #$08	                LDA #$08
.391318	8f 11 e4 af	sta $afe411	                STA SID0_V3_PW_HI   ;G1
.39131c	a9 08		lda #$08	                LDA #$08
.39131e	8f 12 e4 af	sta $afe412	                STA SID0_V3_CTRL    ; Reset
.391322	a9 10		lda #$10	                LDA #$10
.391324	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL    ; Triangle
.391328	8f 0b e4 af	sta $afe40b	                STA SID0_V2_CTRL    ; Triangle
.39132c	8f 12 e4 af	sta $afe412	                STA SID0_V3_CTRL    ; Triangle
.391330	6b		rtl		                RTL
.391331	48		pha		IINITCODEC      PHA
.391332	c2 20		rep #$20	                REP #$20        ; set A long
.391334	a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R13 - Turn On Headphones
.391337	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39133b	a9 01 00	lda #$0001	                LDA #$0001
.39133e	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391342	20 c1 13	jsr $3913c1	                JSR CODEC_TRF_FINISHED
.391345	a9 0f 2a	lda #$2a0f	                LDA #%0010101000001111       ;R21 - Enable All the Analog In
.391348	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39134c	a9 01 00	lda #$0001	                LDA #$0001
.39134f	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391353	20 c1 13	jsr $3913c1	                JSR CODEC_TRF_FINISHED
.391356	a9 01 23	lda #$2301	                LDA #%0010001100000001      ;R17 - Enable All the Analog In
.391359	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39135d	a9 01 00	lda #$0001	                LDA #$0001
.391360	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391364	20 c1 13	jsr $3913c1	                JSR CODEC_TRF_FINISHED
.391367	a9 07 2c	lda #$2c07	                LDA #%0010110000000111      ;R22 - Enable all Analog Out
.39136a	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39136e	a9 01 00	lda #$0001	                LDA #$0001
.391371	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391375	20 c1 13	jsr $3913c1	                JSR CODEC_TRF_FINISHED
.391378	a9 02 14	lda #$1402	                LDA #%0001010000000010      ;R10 - DAC Interface Control
.39137b	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39137f	a9 01 00	lda #$0001	                LDA #$0001
.391382	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391386	20 c1 13	jsr $3913c1	                JSR CODEC_TRF_FINISHED
.391389	a9 02 16	lda #$1602	                LDA #%0001011000000010      ;R11 - ADC Interface Control
.39138c	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391390	a9 01 00	lda #$0001	                LDA #$0001
.391393	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391397	20 c1 13	jsr $3913c1	                JSR CODEC_TRF_FINISHED
.39139a	a9 d5 19	lda #$19d5	                LDA #%0001100111010101      ;R12 - Master Mode Control
.39139d	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.3913a1	a9 01 00	lda #$0001	                LDA #$0001
.3913a4	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.3913a8	20 c1 13	jsr $3913c1	                JSR CODEC_TRF_FINISHED
.3913ab	68		pla		                PLA
.3913ac	6b		rtl		                RTL
.3913ad					IRESETCODEC
.3913ad	c2 20		rep #$20	                REP #$20        ; set A long
.3913af	a9 00 2e	lda #$2e00	                LDA #$2E00      ;R22 - Enable all Analog Out
.3913b2	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.3913b6	a9 01 00	lda #$0001	                LDA #$0001
.3913b9	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.3913bd	20 c1 13	jsr $3913c1	                JSR CODEC_TRF_FINISHED
.3913c0	6b		rtl		                RTL
.3913c1					CODEC_TRF_FINISHED
.3913c1	e2 20		sep #$20	                SEP #$20        ; set A short
.3913c3	af 02 e9 af	lda $afe902	CODEC_LOOP      LDA CODEC_WR_CTRL
.3913c7	29 01		and #$01	                AND #$01
.3913c9	c9 01		cmp #$01	                CMP #$01
.3913cb	f0 f6		beq $3913c3	                BEQ CODEC_LOOP
.3913cd	c2 20		rep #$20	                REP #$20        ; set A long
.3913cf	60		rts		                RTS
.3913d0					IBM_FILL_SCREEN
.3913d0	c2 30		rep #$30	                REP #$30        ; set A&X long
.3913d2	a9 00 00	lda #$0000	                LDA #$0000
.3913d5	a2 00 00	ldx #$0000	                LDX #$0000
.3913d8					BM_FILL_SCREEN_LOOPY
.3913d8	a0 00 00	ldy #$0000	                LDY #$0000
.3913db	e2 20		sep #$20	                SEP #$20        ; set A short
.3913dd					BM_FILL_SCREEN_LOOPX
.3913dd	97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.3913df	c8		iny		                INY
.3913e0	c4 40		cpy $40		                CPY BM_CLEAR_SCRN_X              ; Transfer the First line
.3913e2	d0 f9		bne $3913dd	                BNE BM_FILL_SCREEN_LOOPX
.3913e4	20 ef 13	jsr $3913ef	                JSR BM_FILL_COMPUTE_Y_DST
.3913e7	e8		inx		                INX
.3913e8	e4 42		cpx $42		                CPX BM_CLEAR_SCRN_Y
.3913ea	d0 ec		bne $3913d8	                BNE BM_FILL_SCREEN_LOOPY
.3913ec	c2 30		rep #$30	                REP #$30        ; set A&X long
.3913ee	6b		rtl		                RTL
.3913ef					BM_FILL_COMPUTE_Y_DST
.3913ef	c2 20		rep #$20	                REP #$20        ; set A long
.3913f1	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR        ; Right now it is set @ $020000 (128K) + File Size
.3913f3	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3913f7	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2      ; Right now it is set @ $020000 (128K)
.3913f9	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.3913fd	a9 80 02	lda #$0280	                LDA #$280        ; Right now it is set @ $020000 (128K) + File Size
.391400	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.391404	a9 00 00	lda #$0000	                LDA #$0000
.391407	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.39140b	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.39140f	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.391411	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.391415	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.391417	a9 00 00	lda #$0000	                LDA #$0000
.39141a	60		rts		                RTS
.39141b					IBMP_PARSER
.39141b	c2 30		rep #$30	                REP #$30        ; set A&X long
.39141d	a0 00 00	ldy #$0000	                LDY #$0000
.391420	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y
.391422	c9 42 4d	cmp #$4d42	                CMP #$4D42
.391425	f0 03		beq $39142a	                BEQ IBMP_PARSER_CONT
.391427	82 04 01	brl $39152e	                BRL BMP_PARSER_END_WITH_ERROR
.39142a					IBMP_PARSER_CONT
.39142a	a0 02 00	ldy #$0002	                LDY #$0002
.39142d	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size Low Short
.39142f	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.391433	a0 04 00	ldy #$0004	                LDY #$0004
.391436	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size High Short
.391438	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.39143c	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Store -1 in Adder (B)
.39143f	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.391443	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.391447	18		clc		                CLC
.391448	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.39144c	85 50		sta $50		                STA BMP_FILE_SIZE
.39144e	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.391452	85 52		sta $52		                STA BMP_FILE_SIZE+2
.391454	a0 12 00	ldy #$0012	                LDY #$0012
.391457	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.391459	85 40		sta $40		                STA BMP_X_SIZE
.39145b	a0 16 00	ldy #$0016	                LDY #$0016
.39145e	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.391460	85 42		sta $42		                STA BMP_Y_SIZE
.391462	a0 2e 00	ldy #$002e	                LDY #$002E
.391465	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.391467	0a		asl a		                ASL A; Multiply by 2
.391468	0a		asl a		                ASL A; Multiply by 2
.391469	85 4c		sta $4c		                STA BMP_COLOR_PALET         ;
.39146b	e0 00 00	cpx #$0000	                CPX #$0000
.39146e	d0 05		bne $391475	                BNE BMP_LUT1_PICK
.391470	20 36 15	jsr $391536	                JSR BMP_PARSER_UPDATE_LUT0   ; Go Upload the LUT0
.391473	80 08		bra $39147d	                BRA DONE_TRANSFER_LUT;
.391475					  BMP_LUT1_PICK
.391475	e0 01 00	cpx #$0001	                CPX #$0001
.391478	d0 03		bne $39147d	                BNE BMP_LUT2_PICK
.39147a	20 66 15	jsr $391566	                JSR BMP_PARSER_UPDATE_LUT1   ; Go Upload the LUT1
.39147d					  BMP_LUT2_PICK
.39147d					  DONE_TRANSFER_LUT
.39147d	a5 56		lda $56		                LDA BMP_POSITION_Y
.39147f	8f 00 01 00	sta $000100	                STA @lUNSIGNED_MULT_A_LO
.391483	a5 4e		lda $4e		                LDA SCRN_X_STRIDE
.391485	8f 02 01 00	sta $000102	                STA @lUNSIGNED_MULT_B_LO
.391489	af 04 01 00	lda $000104	                LDA @lUNSIGNED_MULT_AL_LO
.39148d	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.391491	af 06 01 00	lda $000106	                LDA @lUNSIGNED_MULT_AL_LO+2
.391495	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.391499	a5 54		lda $54		                LDA BMP_POSITION_X
.39149b	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Put the X Position Adder (B)
.39149f	a9 00 00	lda #$0000	                LDA #$0000
.3914a2	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.3914a6	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in TEMP
.3914aa	85 f0		sta $f0		                STA USER_TEMP
.3914ac	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in TEMP
.3914b0	85 f2		sta $f2		                STA USER_TEMP+2
.3914b2	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.3914b4	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.3914b8	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.3914ba	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.3914be	a5 f0		lda $f0		                LDA USER_TEMP
.3914c0	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store in 32Bit Adder (B)
.3914c4	a5 f2		lda $f2		                LDA USER_TEMP+2
.3914c6	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in 32Bit Adder (B)
.3914ca	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in BMP_PRSE_DST_PTR
.3914ce	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.3914d0	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in BMP_PRSE_DST_PTR
.3914d4	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.3914d6	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K)
.3914d8	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3914dc	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2        ; Right now it is set @ $020000 (128K)
.3914de	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.3914e2	a5 50		lda $50		                LDA BMP_FILE_SIZE
.3914e4	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.3914e8	a5 52		lda $52		                LDA BMP_FILE_SIZE+2
.3914ea	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.3914ee	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.3914f2	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.3914f4	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.3914f8	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.3914fa	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.3914fc	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.391500	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.391502	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.391506	18		clc		                CLC
.391507	a5 40		lda $40		                LDA BMP_X_SIZE              ; Load The Size in X of the image and Make it negative
.391509	49 ff ff	eor #$ffff	                EOR #$FFFF                  ; Inverse all bit
.39150c	69 01 00	adc #$0001	                ADC #$0001                  ; Add 0 ()
.39150f	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store the Results in reg B of ADDER32
.391513	a9 ff ff	lda #$ffff	                LDA #$FFFF
.391516	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in the Reminder of the 32Bits B Register
.39151a	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.39151e	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.391520	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.391524	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.391526	20 96 15	jsr $391596	                JSR BMP_PARSER_DMA_SHIT_OUT  ; We are going to start with the slow method
.391529	a2 0d 71	ldx #$710d	                LDX #<>bmp_parser_msg0
.39152c	80 03		bra $391531	                BRA BMP_PARSER_END_NO_ERROR
.39152e					BMP_PARSER_END_WITH_ERROR
.39152e	a2 f9 70	ldx #$70f9	                LDX #<>bmp_parser_err0
.391531					BMP_PARSER_END_NO_ERROR
.391531	22 7e 07 39	jsl $39077e	                JSL IPRINT       ; print the first line
.391535	6b		rtl		                RTL
.391536					BMP_PARSER_UPDATE_LUT0
.391536	38		sec		                SEC
.391537	a0 7a 00	ldy #$007a	                LDY #$007A
.39153a	a2 00 00	ldx #$0000	                LDX #$0000
.39153d	e2 20		sep #$20	                SEP #$20        ; set A short
.39153f					BMP_PARSER_UPDATE_LOOP
.39153f	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.391541	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR+0, X      ; The look-up Table point to a pixel Blue
.391545	c8		iny		                INY
.391546	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.391548	9f 01 20 af	sta $af2001,x	                STA @lGRPH_LUT0_PTR+1, X      ; The look-up Table point to a pixel Blue
.39154c	c8		iny		                INY
.39154d	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.39154f	9f 02 20 af	sta $af2002,x	                STA @lGRPH_LUT0_PTR+2, X      ; The look-up Table point to a pixel Blue
.391553	c8		iny		                INY
.391554	a9 80		lda #$80	                LDA #$80
.391556	9f 03 20 af	sta $af2003,x	                STA @lGRPH_LUT0_PTR+3, X      ; The look-up Table point to a pixel Blue
.39155a	c8		iny		                INY ; For the Alpha Value, nobody cares
.39155b	e8		inx		                INX
.39155c	e8		inx		                INX
.39155d	e8		inx		                INX
.39155e	e8		inx		                INX
.39155f	e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.391561	d0 dc		bne $39153f	                BNE BMP_PARSER_UPDATE_LOOP
.391563	c2 20		rep #$20	                REP #$20        ; set A long
.391565	60		rts		                RTS
.391566					BMP_PARSER_UPDATE_LUT1
.391566	38		sec		                SEC
.391567	a0 36 00	ldy #$0036	                LDY #$0036
.39156a	a2 00 00	ldx #$0000	                LDX #$0000
.39156d	e2 20		sep #$20	                SEP #$20        ; set A short
.39156f					PALETTE_LUT1_LOOP
.39156f	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.391571	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR+0, X      ; The look-up Table point to a pixel Blue
.391575	c8		iny		                INY
.391576	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.391578	9f 01 24 af	sta $af2401,x	                STA @lGRPH_LUT1_PTR+1, X      ; The look-up Table point to a pixel Blue
.39157c	c8		iny		                INY
.39157d	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.39157f	9f 02 24 af	sta $af2402,x	                STA @lGRPH_LUT1_PTR+2, X      ; The look-up Table point to a pixel Blue
.391583	c8		iny		                INY
.391584	a9 80		lda #$80	                LDA #$80
.391586	9f 03 24 af	sta $af2403,x	                STA @lGRPH_LUT1_PTR+3, X      ; The look-up Table point to a pixel Blue
.39158a	c8		iny		                INY ; For the Alpha Value, nobody cares
.39158b	e8		inx		                INX
.39158c	e8		inx		                INX
.39158d	e8		inx		                INX
.39158e	e8		inx		                INX
.39158f	e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.391591	d0 dc		bne $39156f	                BNE PALETTE_LUT1_LOOP
.391593	c2 20		rep #$20	                REP #$20        ; set A long
.391595	60		rts		                RTS
.391596					BMP_PARSER_DMA_SHIT_OUT
.391596	a2 00 00	ldx #$0000	                LDX #$0000
.391599					BMP_PARSER_LOOPY
.391599	a0 00 00	ldy #$0000	                LDY #$0000
.39159c	e2 20		sep #$20	                SEP #$20        ; set A short
.39159e					BMP_PARSER_LOOPX
.39159e	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Load First Pixel Y (will be linear)
.3915a0	97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.3915a2	c8		iny		                INY
.3915a3	c4 40		cpy $40		                CPY BMP_X_SIZE              ; Transfer the First line
.3915a5	d0 f7		bne $39159e	                BNE BMP_PARSER_LOOPX
.3915a7	20 b3 15	jsr $3915b3	                JSR BMP_PARSER_COMPUTE_Y_SRC
.3915aa	20 ce 15	jsr $3915ce	                JSR BMP_PARSER_COMPUTE_Y_DST
.3915ad	e8		inx		                INX
.3915ae	e4 42		cpx $42		                CPX BMP_Y_SIZE
.3915b0	d0 e7		bne $391599	                BNE BMP_PARSER_LOOPY
.3915b2	60		rts		                RTS
.3915b3					BMP_PARSER_COMPUTE_Y_SRC
.3915b3	c2 20		rep #$20	                REP #$20        ; set A long
.3915b5	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.3915b7	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3915bb	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.3915bd	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.3915c1	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.3915c5	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.3915c7	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.3915cb	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.3915cd	60		rts		                RTS
.3915ce					BMP_PARSER_COMPUTE_Y_DST
.3915ce	c2 20		rep #$20	                REP #$20        ; set A long
.3915d0	18		clc		                CLC
.3915d1	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.3915d3	65 4e		adc $4e		                ADC SCRN_X_STRIDE        ; In Normal Circumstances, it is 640
.3915d5	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.3915d7	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.3915d9	69 00 00	adc #$0000	                ADC #$0000
.3915dc	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.3915de	60		rts		                RTS
.3915df	ea		nop		ILOOP           NOP
.3915e0	ea		nop		                NOP
.3915e1	ea		nop		                NOP
.3915e2	ea		nop		                NOP
.3915e3	ea		nop		                NOP
.3915e4	ea		nop		                NOP
.3915e5	ea		nop		                NOP
.3915e6	ea		nop		                NOP
.3915e7	ea		nop		                NOP
.3915e8	ea		nop		                NOP
.3915e9	6b		rtl		                RTL
.3915ea	22 df 15 39	jsl $3915df	ILOOP_1         JSL ILOOP
.3915ee	22 df 15 39	jsl $3915df	                JSL ILOOP
.3915f2	22 df 15 39	jsl $3915df	                JSL ILOOP
.3915f6	22 df 15 39	jsl $3915df	                JSL ILOOP
.3915fa	22 df 15 39	jsl $3915df	                JSL ILOOP
.3915fe	22 df 15 39	jsl $3915df	                JSL ILOOP
.391602	22 df 15 39	jsl $3915df	                JSL ILOOP
.391606	22 df 15 39	jsl $3915df	                JSL ILOOP
.39160a	22 df 15 39	jsl $3915df	                JSL ILOOP
.39160e	22 df 15 39	jsl $3915df	                JSL ILOOP
.391612	6b		rtl		                RTL
.391613	22 ea 15 39	jsl $3915ea	ILOOP_1MS       JSL ILOOP_1
.391617	6b		rtl		                RTL
.391618	e0 00 00	cpx #$0000	ILOOP_MS        CPX #0
.39161b	f0 07		beq $391624	                BEQ LOOP_MS_END
.39161d	22 13 16 39	jsl $391613	                JSL ILOOP_1MS
.391621	ca		dex		                DEX
.391622	80 f4		bra $391618	                BRA ILOOP_MS
.391624	6b		rtl		LOOP_MS_END     RTL
.391625					IDELAY
.391625	8b		phb		                PHB
.391626	08		php		                PHP
.391627	48		pha		                PHA             ; begin setdbr macro
.391628	08		php		                PHP
.391629	e2 20		sep #$20	                SEP #$20        ; set A short
.39162b	a9 00		lda #$00	                LDA #0
.39162d	48		pha		                PHA
.39162e	ab		plb		                PLB
.39162f	28		plp		                PLP
.391630	68		pla		                PLA             ; end setdbr macro
.391631	e2 20		sep #$20	                SEP #$20        ; set A short
.391633	a9 00		lda #$00	                LDA #0                      ; Stop the timer if it's running
.391635	8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.391639	af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Enable Timer 0 Interrupts
.39163d	29 fb		and #$fb	                AND #~FNX0_INT02_TMR0
.39163f	8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.391643	a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.391645	8d 05 07	sta $0705	                STA @w TIMERFLAGS
.391648	a9 00		lda #$00	                LDA #0
.39164a	8f 61 01 00	sta $000161	                STA @l TIMER0_CHARGE_L      ; Clear the comparator for count-down
.39164e	8f 62 01 00	sta $000162	                STA @l TIMER0_CHARGE_M
.391652	8f 63 01 00	sta $000163	                STA @l TIMER0_CHARGE_H
.391656	c2 30		rep #$30	                REP #$30        ; set A&X long
.391658	8a		txa		                TXA
.391659	8f 65 01 00	sta $000165	                STA @l TIMER0_CMP_L         ; Set the number of ticks
.39165d	98		tya		                TYA
.39165e	e2 20		sep #$20	                SEP #$20        ; set A short
.391660	8f 67 01 00	sta $000167	                STA @l TIMER0_CMP_H
.391664	a9 09		lda #$09	                LDA #TMR0_EN | TMR0_UPDWN   ; Enable the timer to count up
.391666	8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.39166a	a9 80		lda #$80	                LDA #TIMER0TRIGGER          ; Timer zero's trigger flag
.39166c	cb		wai		loop            WAI                         ; Wait for an interrupt
.39166d	1c 05 07	trb $0705	                TRB @w TIMERFLAGS           ; Check for the flag
.391670	f0 fa		beq $39166c	                BEQ loop                    ; Keep checking until it's set
.391672	a9 00		lda #$00	                LDA #0                      ; Stop the timer
.391674	8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.391678	a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.39167a	8d 05 07	sta $0705	                STA @w TIMERFLAGS
.39167d	af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Disable Timer 0 Interrupts
.391681	09 04		ora #$04	                ORA #FNX0_INT02_TMR0
.391683	8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.391687	28		plp		                PLP
.391688	ab		plb		                PLB
.391689	6b		rtl		                RTL
.39168a					SHOW_CREDITS
.39168a	48		pha		                PHA
.39168b	da		phx		                PHX
.39168c	5a		phy		                PHY
.39168d	08		php		                PHP
.39168e	e2 20		sep #$20	                SEP #$20        ; set A short
.391690	c2 10		rep #$10	                REP #$10        ; set X long
.391692	af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Disable the cursor
.391696	29 fe		and #$fe	                AND #~Vky_Cursor_Enable
.391698	8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.39169c	a2 00 00	ldx #$0000	                LDX #0
.39169f	bf 00 00 3b	lda $3b0000,x	credit_loop     LDA @lCREDITS_TEXT,X            ; Copy a byte of text
.3916a3	9f 00 a0 af	sta $afa000,x	                STA @lCS_TEXT_MEM_PTR,X
.3916a7	bf 00 20 3b	lda $3b2000,x	                LDA @lCREDITS_COLOR,X           ; Copy a byte of color
.3916ab	9f 00 c0 af	sta $afc000,x	                STA @lCS_COLOR_MEM_PTR,X
.3916af	e8		inx		                INX
.3916b0	e0 00 20	cpx #$2000	                CPX #128 * 64
.3916b3	d0 ea		bne $39169f	                BNE credit_loop
.3916b5	22 21 07 39	jsl $390721	                JSL IGETCHW                     ; Wait for a keypress
.3916b9	22 41 0b 39	jsl $390b41	                JSL ICLRSCREEN                  ; Then clear the screen and return
.3916bd	22 65 09 39	jsl $390965	                JSL ICSRHOME                    ; Move cursor to the home position
.3916c1	af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Enable the cursor
.3916c5	09 01		ora #$01	                ORA #Vky_Cursor_Enable
.3916c7	8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.3916cb	28		plp		                PLP
.3916cc	7a		ply		                PLY
.3916cd	fa		plx		                PLX
.3916ce	68		pla		                PLA
.3916cf	6b		rtl		                RTL
.3916d0	00		brk #		IRESTORE        BRK ; Warm boot routine
.3916d1	00		brk #		ISCINIT         BRK ;
.3916d2	00		brk #		IIOINIT         BRK ;
.3916d3	00		brk #		ISETLFS         BRK ; Obsolete (done in OPEN)
.3916d4	00		brk #		ISETNAM         BRK ; Obsolete (done in OPEN)
.3916d5	00		brk #		IOPEN           BRK ; Open a channel for reading and/or writing. Use SETLFS and SETNAM to set the channels and filename first.
.3916d6	00		brk #		ICLOSE          BRK ; Close a channel
.3916d7	00		brk #		IGETB           BRK ; Get a byte from input channel. Return 0 if no input. Carry is set if no input.
.3916d8	00		brk #		IGETS           BRK ; Get a string from the input channel. NULL terminates
.3916d9	00		brk #		IGETLINE        BRK ; Get a line of text from input channel. CR or NULL terminates.
.3916da	00		brk #		IGETFIELD       BRK ; Get a field from the input channel. Value in A, CR, or NULL terminates
.3916db	00		brk #		ITRIM           BRK ; Removes spaces at beginning and end of string.
.3916dc	00		brk #		IPRINTC         BRK ; Print character to screen. Handles terminal commands
.3916dd	00		brk #		IPRINTS         BRK ; Print string to screen. Handles terminal commands
.3916de	00		brk #		IPRINTF         BRK ; Print a float value
.3916df	00		brk #		IPRINTI         BRK ; Prints integer value in TEMP
.3916e0	00		brk #		IPRINTAI        BRK ; Prints integer value in A
.3916e1	00		brk #		IPUSHKEY        BRK ;
.3916e2	00		brk #		IPUSHKEYS       BRK ;
.3916e3	00		brk #		ISCRREADLINE    BRK ; Loads the MCMDADDR/BCMDADDR variable with the address of the current line on the screen. This is called when the RETURN key is pressed and is the first step in processing an immediate mode command.
.3916e4	00		brk #		ISCRGETWORD     BRK ; Read a current word on the screen. A word ends with a space, punctuation (except _), or any control character (value < 32). Loads the address into CMPTEXT_VAL and length into CMPTEXT_LEN variables.

;******  Processing file: src\OPL2_Library.asm


;******  Processing file: src\OPL3_def.asm

=$afe600				OPL3_R_BASE               = $AFE600
=$e600					OPL3_R_BASE_LL            = $E600
=$00af					OPL3_R_BASE_HL            = $00AF
=$afe601				OPL3_R_TEST               = $AFE601 ; TEST
=$afe602				OPL3_R_TIMER1             = $AFE602 ; TIMER-1
=$afe603				OPL3_R_TIMER2             = $AFE603 ; TIMER-2
=$afe604				OPL3_R_IRQ                = $AFE604 ;
=$afe605				OPL3_R_OPL3_MODE          = $AFE605 ; Set bit 0 to 1 if you want to use in OPL3 Mode
=$afe608				OPL3_R_CSM                = $AFE608 ;
=$afe620				OPL3_R_AM_VID_EG_KSR_MULT = $AFE620 ; $40..$35 (21 Registers)
=$afe640				OPL3_R_KSL_TL             = $AFE640;  $40..$55 (21 Registers)
=$afe660				OPL3_R_AR_DR              = $AFE660;  $60..$75 (21 Registers)
=$afe680				OPL3_R_SL_RR              = $AFE680;  $80..$95 (21 Registers)
=$afe6a0				OPL3_R_FNumber            = $AFE6A0;  $A0..$A8
=$afe6b0				OPL3_R_KON_BLOCK_FNumber  = $AFE6B0;  $B0..$B9
=$afe6bd				OPL3_R_DPTH_RHYTM         = $AFE6BD;  $BD
=$afe6c0				OPL3_R_FEEDBACK           = $AFE6C0;  $C0..$C9
=$afe6e0				OPL3_R_WAVE_SELECT        = $AFE6E0;  $E0..$F5
=$afe700				OPL3_L_BASE               = $AFE700
=$e700					OPL3_L_BASE_LL            = $E700
=$00af					OPL3_L_BASE_HL            = $00AF
=$afe701				OPL3_L_TEST               = $AFE701 ; TEST
=$afe702				OPL3_L_TIMER1             = $AFE702 ; TIMER-1
=$afe703				OPL3_L_TIMER2             = $AFE703 ; TIMER-2
=$afe704				OPL3_L_IRQ                = $AFE704 ;
=$afe708				OPL3_L_CSM                = $AFE708 ;
=$afe720				OPL3_L_AM_VID_EG_KSR_MULT = $AFE720 ; $40..$35 (21 Registers)
=$afe740				OPL3_L_KSL_TL             = $AFE740;  $40..$55 (21 Registers)
=$afe760				OPL3_L_AR_DR              = $AFE760;  $60..$75 (21 Registers)
=$afe780				OPL3_L_SL_RR              = $AFE780;  $80..$95 (21 Registers)
=$afe7a0				OPL3_L_FNumber            = $AFE7A0;  $A0..$A8
=$afe7b0				OPL3_L_KON_BLOCK_FNumber  = $AFE7B0;  $B0..$B9
=$afe7bd				OPL3_L_DPTH_RHYTM         = $AFE7BD;  $BD
=$afe7c0				OPL3_L_FEEDBACK           = $AFE7C0;  $C0..$C9
=$afe7e0				OPL3_L_WAVE_SELECT        = $AFE7E0;  $E0..$F5
=$80					TREMOLO    = $80
=$40					VIBRATO    = $40
=$20					SUSTAINING = $20
=$10					KSR        = $10
=$0f					MULTIPLIER = $0F
=$c0					KEY_SCALE  = $C0
=$3f					OP_LEVEL   = $3F
=$f0					ATTACK_RT  = $F0
=$0f					DECAY_RT   = $0F
=$f0					SUSTAIN_RT = $F0
=$0f					RELEASE_RT = $0F
=$0e					FEEDBACK   = $0E
=$01					ALGORITHM  = $01
=9					OPL2_NUM_CHANNELS = 9
=0					OPERATOR1 = 0
=1					OPERATOR2 = 1
=0					MODULATOR = 0
=1					CARRIER = 1
=0					FREQ_MODULATION = 0
=1					ADDITIVE_SYNTH  = 1
=$10					DRUM_BASS   = $10
=$08					DRUM_SNARE  = $08
=$04					DRUM_TOM    = $04
=$02					DRUM_CYMBAL = $02
=$01					DRUM_HI_HAT = $01
=1					NOTE_CS =   1
=2					NOTE_D =    2
=3					NOTE_DS =   3
=4					NOTE_E =    4
=5					NOTE_F =    5
=6					NOTE_FS =   6
=7					NOTE_G =    7
=8					NOTE_GS =   8
=9					NOTE_A =    9
=10					NOTE_AS =  10
=11					NOTE_B =   11
=12					NOTE_C =   12
>3916e5	6b 01 81 01 98 01 b0 01		noteFNumbers    .word  $016B, $0181, $0198, $01B0, $01CA, $01E5, $0202, $0220, $0241, $0263, $0287, $02AE
>3916ed	ca 01 e5 01 02 02 20 02 41 02 63 02 87 02 ae 02
>3916fd	00 01 02 08 09 0a 10 11		registerOffsets_operator0 .byte $00, $01, $02, $08, $09, $0A, $10, $11, $12 ;initializers for operator 1 */
>391705	12
>391706	03 04 05 0b 0c 0d 13 14		registerOffsets_operator1 .byte $03, $04, $05, $0B, $0C, $0D, $13, $14, $15 ;initializers for operator 2 */
>39170e	15
>39170f	10 13 14 12 15 11		drumOffsets               .byte $10, $13, $14, $12, $15, $11
>391715	10 08 04 02 01			drumBits                  .byte $10, $08, $04, $02, $01
>39171a	20 40 60 80 e0 c0		instrumentBaseRegs        .byte $20, $40, $60, $80, $E0, $C0

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Instruments.asm

>391720	00 24 4f f2 0b 00 0e 31		INSTRUMENT_ACCORDN    .text $00, $24, $4F, $F2, $0B, $00, $0E, $31, $00, $52, $0B, $00, 'ACCORDN   '
>391728	00 52 0b 00 41 43 43 4f 52 44 4e 20 20 20
>391736	00 31 43 6e 17 01 02 22		INSTRUMENT_BAGPIPE1   .text $00, $31, $43, $6E, $17, $01, $02, $22, $05, $8B, $0C, $02, 'BAGPIPE1  '
>39173e	05 8b 0c 02 42 41 47 50 49 50 45 31 20 20
>39174c	00 30 00 ff a0 03 00 a3		INSTRUMENT_BAGPIPE2   .text $00, $30, $00, $FF, $A0, $03, $00, $A3, $00, $65, $0B, $02, 'BAGPIPE2  '
>391754	00 65 0b 02 42 41 47 50 49 50 45 32 20 20
>391762	00 31 87 a1 11 00 08 16		INSTRUMENT_BANJO1     .text $00, $31, $87, $A1, $11, $00, $08, $16, $80, $7D, $43, $00, 'BANJO1    '
>39176a	80 7d 43 00 42 41 4e 4a 4f 31 20 20 20 20
>391778	00 01 15 25 2f 00 0a 21		INSTRUMENT_BASS1      .text $00, $01, $15, $25, $2F, $00, $0A, $21, $80, $65, $6C, $00, 'BASS1     '
>391780	80 65 6c 00 42 41 53 53 31 20 20 20 20 20
>39178e	00 01 1d f2 ef 00 0a 01		INSTRUMENT_BASS2      .text $00, $01, $1D, $F2, $EF, $00, $0A, $01, $00, $F5, $78, $00, 'BASS2     '
>391796	00 f5 78 00 42 41 53 53 32 20 20 20 20 20
>3917a4	00 c0 6d f9 01 01 0e 41		INSTRUMENT_BASSHARP   .text $00, $C0, $6D, $F9, $01, $01, $0E, $41, $00, $F2, $73, $00, 'BASSHARP  '
>3917ac	00 f2 73 00 42 41 53 53 48 41 52 50 20 20
>3917ba	00 30 c8 d5 19 00 0c 71		INSTRUMENT_BASSOON1   .text $00, $30, $C8, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'BASSOON1  '
>3917c2	80 61 1b 00 42 41 53 53 4f 4f 4e 31 20 20
>3917d0	00 c1 4f b1 53 03 06 e0		INSTRUMENT_BASSTRLG   .text $00, $C1, $4F, $B1, $53, $03, $06, $E0, $00, $12, $74, $03, 'BASSTRLG  '
>3917d8	00 12 74 03 42 41 53 53 54 52 4c 47 20 20
>3917e6	06 00 0b a8 4c 00 00 00		INSTRUMENT_BDRUM1     .text $06, $00, $0B, $A8, $4C, $00, $00, $00, $00, $00, $00, $00, 'BDRUM1    '
>3917ee	00 00 00 00 42 44 52 55 4d 31 20 20 20 20
>3917fc	00 64 db ff 01 00 04 3e		INSTRUMENT_BELLONG    .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F3, $62, $00, 'BELLONG   '
>391804	c0 f3 62 00 42 45 4c 4c 4f 4e 47 20 20 20
>391812	00 07 4f f2 60 00 08 12		INSTRUMENT_BELLS      .text $00, $07, $4F, $F2, $60, $00, $08, $12, $00, $F2, $72, $00, 'BELLS     '
>39181a	00 f2 72 00 42 45 4c 4c 53 20 20 20 20 20
>391828	00 64 db ff 01 00 04 3e		INSTRUMENT_BELSHORT   .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F5, $F3, $00, 'BELSHORT  '
>391830	c0 f5 f3 00 42 45 4c 53 48 4f 52 54 20 20
>39183e	00 20 4b 7b 04 01 0e 21		INSTRUMENT_BNCEBASS   .text $00, $20, $4B, $7B, $04, $01, $0E, $21, $00, $F5, $72, $00, 'BNCEBASS  '
>391846	00 f5 72 00 42 4e 43 45 42 41 53 53 20 20
>391854	00 21 16 71 ae 00 0e 21		INSTRUMENT_BRASS1     .text $00, $21, $16, $71, $AE, $00, $0E, $21, $00, $81, $9E, $00, 'BRASS1    '
>39185c	00 81 9e 00 42 52 41 53 53 31 20 20 20 20
>39186a	00 30 c5 52 11 00 00 31		INSTRUMENT_CBASSOON   .text $00, $30, $C5, $52, $11, $00, $00, $31, $80, $31, $2E, $00, 'CBASSOON  '
>391872	80 31 2e 00 43 42 41 53 53 4f 4f 4e 20 20
>391880	00 33 87 01 10 00 08 14		INSTRUMENT_CELESTA    .text $00, $33, $87, $01, $10, $00, $08, $14, $80, $7D, $33, $00, 'CELESTA   '
>391888	80 7d 33 00 43 45 4c 45 53 54 41 20 20 20
>391896	00 32 16 73 24 00 0e 21		INSTRUMENT_CLAR1      .text $00, $32, $16, $73, $24, $00, $0E, $21, $80, $75, $57, $00, 'CLAR1     '
>39189e	80 75 57 00 43 4c 41 52 31 20 20 20 20 20
>3918ac	00 31 1c 41 1b 00 0c 60		INSTRUMENT_CLAR2      .text $00, $31, $1C, $41, $1B, $00, $0C, $60, $80, $42, $3B, $00, 'CLAR2     '
>3918b4	80 42 3b 00 43 4c 41 52 32 20 20 20 20 20
>3918c2	00 32 9a 51 1b 00 0c 61		INSTRUMENT_CLARINET   .text $00, $32, $9A, $51, $1B, $00, $0C, $61, $82, $A2, $3B, $00, 'CLARINET  '
>3918ca	82 a2 3b 00 43 4c 41 52 49 4e 45 54 20 20
>3918d8	00 11 0d f2 01 00 0a 15		INSTRUMENT_CLAVECIN   .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'CLAVECIN  '
>3918e0	0d f2 b1 00 43 4c 41 56 45 43 49 4e 20 20
>3918ee	00 00 02 f0 ff 00 06 11		INSTRUMENT_CROMORNE   .text $00, $00, $02, $F0, $FF, $00, $06, $11, $80, $F0, $FF, $00, 'CROMORNE  '
>3918f6	80 f0 ff 00 43 52 4f 4d 4f 52 4e 45 20 20
>391904	09 01 00 f5 b5 00 00 00		INSTRUMENT_CYMBAL1    .text $09, $01, $00, $F5, $B5, $00, $00, $00, $00, $00, $00, $00, 'CYMBAL1   '
>39190c	00 00 00 00 43 59 4d 42 41 4c 31 20 20 20
>39191a	00 05 8a f0 7b 00 08 01		INSTRUMENT_ELCLAV1    .text $00, $05, $8A, $F0, $7B, $00, $08, $01, $80, $F4, $7B, $00, 'ELCLAV1   '
>391922	80 f4 7b 00 45 4c 43 4c 41 56 31 20 20 20
>391930	00 01 49 f1 53 01 06 11		INSTRUMENT_ELCLAV2    .text $00, $01, $49, $F1, $53, $01, $06, $11, $00, $F1, $74, $02, 'ELCLAV2   '
>391938	00 f1 74 02 45 4c 43 4c 41 56 32 20 20 20
>391946	00 e0 6d 57 04 01 0e 61		INSTRUMENT_ELECFL     .text $00, $E0, $6D, $57, $04, $01, $0E, $61, $00, $67, $7D, $00, 'ELECFL    '
>39194e	00 67 7d 00 45 4c 45 43 46 4c 20 20 20 20
>39195c	00 13 97 9a 12 02 0e 91		INSTRUMENT_ELECVIBE   .text $00, $13, $97, $9A, $12, $02, $0E, $91, $80, $9B, $11, $00, 'ELECVIBE  '
>391964	80 9b 11 00 45 4c 45 43 56 49 42 45 20 20
>391972	00 f1 01 97 17 00 08 21		INSTRUMENT_ELGUIT1    .text $00, $F1, $01, $97, $17, $00, $08, $21, $0D, $F1, $18, $00, 'ELGUIT1   '
>39197a	0d f1 18 00 45 4c 47 55 49 54 31 20 20 20
>391988	00 13 96 ff 21 00 0a 11		INSTRUMENT_ELGUIT2    .text $00, $13, $96, $FF, $21, $00, $0A, $11, $80, $FF, $03, $00, 'ELGUIT2   '
>391990	80 ff 03 00 45 4c 47 55 49 54 32 20 20 20
>39199e	00 07 8f 82 7d 00 0c 14		INSTRUMENT_ELGUIT3    .text $00, $07, $8F, $82, $7D, $00, $0C, $14, $80, $82, $7D, $00, 'ELGUIT3   '
>3919a6	80 82 7d 00 45 4c 47 55 49 54 33 20 20 20
>3919b4	00 05 8f da 15 00 0a 01		INSTRUMENT_ELGUIT4    .text $00, $05, $8F, $DA, $15, $00, $0A, $01, $80, $F9, $14, $02, 'ELGUIT4   '
>3919bc	80 f9 14 02 45 4c 47 55 49 54 34 20 20 20
>3919ca	00 b2 cd 91 2a 02 09 b1		INSTRUMENT_ELORGAN1   .text $00, $B2, $CD, $91, $2A, $02, $09, $B1, $80, $91, $2A, $01, 'ELORGAN1  '
>3919d2	80 91 2a 01 45 4c 4f 52 47 41 4e 31 20 20
>3919e0	00 01 4f f1 50 00 06 01		INSTRUMENT_ELPIANO1   .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'ELPIANO1  '
>3919e8	04 d2 7c 00 45 4c 50 49 41 4e 4f 31 20 20
>3919f6	00 02 22 f2 13 00 0e 02		INSTRUMENT_ELPIANO2   .text $00, $02, $22, $F2, $13, $00, $0E, $02, $00, $F5, $43, $00, 'ELPIANO2  '
>3919fe	00 f5 43 00 45 4c 50 49 41 4e 4f 32 20 20
>391a0c	00 81 63 f3 58 00 00 01		INSTRUMENT_EPIANO1A   .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'EPIANO1A  '
>391a14	80 f2 58 00 45 50 49 41 4e 4f 31 41 20 20
>391a22	00 07 1f f5 fa 00 0e 01		INSTRUMENT_EPIANO1B   .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'EPIANO1B  '
>391a2a	57 f5 fa 00 45 50 49 41 4e 4f 31 42 20 20
>391a38	00 21 83 74 17 00 07 a2		INSTRUMENT_FLUTE      .text $00, $21, $83, $74, $17, $00, $07, $A2, $8D, $65, $17, $00, 'FLUTE     '
>391a40	8d 65 17 00 46 4c 55 54 45 20 20 20 20 20
>391a4e	00 a1 27 74 8f 00 02 a1		INSTRUMENT_FLUTE1     .text $00, $A1, $27, $74, $8F, $00, $02, $A1, $80, $65, $2A, $00, 'FLUTE1    '
>391a56	80 65 2a 00 46 4c 55 54 45 31 20 20 20 20
>391a64	00 e0 ec 6e 8f 00 0e 61		INSTRUMENT_FLUTE2     .text $00, $E0, $EC, $6E, $8F, $00, $0E, $61, $00, $65, $2A, $00, 'FLUTE2    '
>391a6c	00 65 2a 00 46 4c 55 54 45 32 20 20 20 20
>391a7a	00 21 9f 53 5a 00 0c 21		INSTRUMENT_FRHORN1    .text $00, $21, $9F, $53, $5A, $00, $0C, $21, $80, $AA, $1A, $00, 'FRHORN1   '
>391a82	80 aa 1a 00 46 52 48 4f 52 4e 31 20 20 20
>391a90	00 20 8e a5 8f 02 06 21		INSTRUMENT_FRHORN2    .text $00, $20, $8E, $A5, $8F, $02, $06, $21, $00, $36, $3D, $00, 'FRHORN2   '
>391a98	00 36 3d 00 46 52 48 4f 52 4e 32 20 20 20
>391aa6	00 f0 18 55 ef 02 00 e0		INSTRUMENT_FSTRP1     .text $00, $F0, $18, $55, $EF, $02, $00, $E0, $80, $87, $1E, $03, 'FSTRP1    '
>391aae	80 87 1e 03 46 53 54 52 50 31 20 20 20 20
>391abc	00 70 16 55 2f 02 0c e0		INSTRUMENT_FSTRP2     .text $00, $70, $16, $55, $2F, $02, $0C, $E0, $80, $87, $1E, $03, 'FSTRP2    '
>391ac4	80 87 1e 03 46 53 54 52 50 32 20 20 20 20
>391ad2	00 f1 00 97 13 00 0a 25		INSTRUMENT_FUZGUIT1   .text $00, $F1, $00, $97, $13, $00, $0A, $25, $0D, $F1, $18, $01, 'FUZGUIT1  '
>391ada	0d f1 18 01 46 55 5a 47 55 49 54 31 20 20
>391ae8	00 31 48 f1 53 00 06 32		INSTRUMENT_FUZGUIT2   .text $00, $31, $48, $F1, $53, $00, $06, $32, $00, $F2, $27, $02, 'FUZGUIT2  '
>391af0	00 f2 27 02 46 55 5a 47 55 49 54 32 20 20
>391afe	00 01 11 f2 1f 00 0a 01		INSTRUMENT_GUITAR1    .text $00, $01, $11, $F2, $1F, $00, $0A, $01, $00, $F5, $88, $00, 'GUITAR1   '
>391b06	00 f5 88 00 47 55 49 54 41 52 31 20 20 20
>391b14	00 02 29 f5 75 00 00 01		INSTRUMENT_HARP1      .text $00, $02, $29, $F5, $75, $00, $00, $01, $83, $F2, $F3, $00, 'HARP1     '
>391b1c	83 f2 f3 00 48 41 52 50 31 20 20 20 20 20
>391b2a	00 02 99 f5 55 00 00 01		INSTRUMENT_HARP2      .text $00, $02, $99, $F5, $55, $00, $00, $01, $80, $F6, $53, $00, 'HARP2     '
>391b32	80 f6 53 00 48 41 52 50 32 20 20 20 20 20
>391b40	00 02 57 f5 56 00 00 01		INSTRUMENT_HARP3      .text $00, $02, $57, $F5, $56, $00, $00, $01, $80, $F6, $54, $00, 'HARP3     '
>391b48	80 f6 54 00 48 41 52 50 33 20 20 20 20 20
>391b56	00 02 29 f5 75 00 00 01		INSTRUMENT_HARPE1     .text $00, $02, $29, $F5, $75, $00, $00, $01, $03, $F2, $F3, $00, 'HARPE1    '
>391b5e	03 f2 f3 00 48 41 52 50 45 31 20 20 20 20
>391b6c	00 32 87 a1 10 00 08 16		INSTRUMENT_HARPSI1    .text $00, $32, $87, $A1, $10, $00, $08, $16, $80, $7D, $33, $00, 'HARPSI1   '
>391b74	80 7d 33 00 48 41 52 50 53 49 31 20 20 20
>391b82	00 33 87 a1 10 00 06 15		INSTRUMENT_HARPSI2    .text $00, $33, $87, $A1, $10, $00, $06, $15, $80, $7D, $43, $00, 'HARPSI2   '
>391b8a	80 7d 43 00 48 41 52 50 53 49 32 20 20 20
>391b98	00 35 84 a8 10 00 08 18		INSTRUMENT_HARPSI3    .text $00, $35, $84, $A8, $10, $00, $08, $18, $80, $7D, $33, $00, 'HARPSI3   '
>391ba0	80 7d 33 00 48 41 52 50 53 49 33 20 20 20
>391bae	00 11 0d f2 01 00 0a 15		INSTRUMENT_HARPSI4    .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'HARPSI4   '
>391bb6	0d f2 b1 00 48 41 52 50 53 49 34 20 20 20
>391bc4	00 36 87 8a 00 00 08 1a		INSTRUMENT_HARPSI5    .text $00, $36, $87, $8A, $00, $00, $08, $1A, $80, $7F, $33, $00, 'HARPSI5   '
>391bcc	80 7f 33 00 48 41 52 50 53 49 35 20 20 20
>391bda	00 f0 00 1e 11 01 08 e2		INSTRUMENT_HELICPTR   .text $00, $F0, $00, $1E, $11, $01, $08, $E2, $C0, $11, $11, $01, 'HELICPTR  '
>391be2	c0 11 11 01 48 45 4c 49 43 50 54 52 20 20
>391bf0	0a 01 00 f7 b5 00 00 00		INSTRUMENT_HIHAT1     .text $0A, $01, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'HIHAT1    '
>391bf8	00 00 00 00 48 49 48 41 54 31 20 20 20 20
>391c06	0a 01 03 da 18 00 00 00		INSTRUMENT_HIHAT2     .text $0A, $01, $03, $DA, $18, $00, $00, $00, $00, $00, $00, $00, 'HIHAT2    '
>391c0e	00 00 00 00 48 49 48 41 54 32 20 20 20 20
>391c1c	00 87 4d 78 42 00 0a 94		INSTRUMENT_JAVAICAN   .text $00, $87, $4D, $78, $42, $00, $0A, $94, $00, $85, $54, $00, 'JAVAICAN  '
>391c24	00 85 54 00 4a 41 56 41 49 43 41 4e 20 20
>391c32	00 03 5e 85 51 01 0e 11		INSTRUMENT_JAZZGUIT   .text $00, $03, $5E, $85, $51, $01, $0E, $11, $00, $D2, $71, $00, 'JAZZGUIT  '
>391c3a	00 d2 71 00 4a 41 5a 5a 47 55 49 54 20 20
>391c48	00 00 50 f2 70 00 0e 13		INSTRUMENT_JEWSHARP   .text $00, $00, $50, $F2, $70, $00, $0E, $13, $00, $F2, $72, $00, 'JEWSHARP  '
>391c50	00 f2 72 00 4a 45 57 53 48 41 52 50 20 20
>391c5e	00 00 02 f0 fa 01 06 11		INSTRUMENT_KEYBRD1    .text $00, $00, $02, $F0, $FA, $01, $06, $11, $80, $F2, $FA, $01, 'KEYBRD1   '
>391c66	80 f2 fa 01 4b 45 59 42 52 44 31 20 20 20
>391c74	00 01 8f f2 bd 00 08 14		INSTRUMENT_KEYBRD2    .text $00, $01, $8F, $F2, $BD, $00, $08, $14, $80, $82, $BD, $00, 'KEYBRD2   '
>391c7c	80 82 bd 00 4b 45 59 42 52 44 32 20 20 20
>391c8a	00 01 00 f0 f0 00 00 e4		INSTRUMENT_KEYBRD3    .text $00, $01, $00, $F0, $F0, $00, $00, $E4, $03, $F3, $36, $00, 'KEYBRD3   '
>391c92	03 f3 36 00 4b 45 59 42 52 44 33 20 20 20
>391ca0	09 e6 00 25 b5 00 00 00		INSTRUMENT_LASER      .text $09, $E6, $00, $25, $B5, $00, $00, $00, $00, $00, $00, $00, 'LASER     '
>391ca8	00 00 00 00 4c 41 53 45 52 20 20 20 20 20
>391cb6	00 32 44 f8 ff 00 0e 11		INSTRUMENT_LOGDRUM1   .text $00, $32, $44, $F8, $FF, $00, $0E, $11, $00, $F5, $7F, $00, 'LOGDRUM1  '
>391cbe	00 f5 7f 00 4c 4f 47 44 52 55 4d 31 20 20
>391ccc	00 05 4e da 25 00 0a 01		INSTRUMENT_MARIMBA1   .text $00, $05, $4E, $DA, $25, $00, $0A, $01, $00, $F9, $15, $00, 'MARIMBA1  '
>391cd4	00 f9 15 00 4d 41 52 49 4d 42 41 31 20 20
>391ce2	00 85 4e da 15 00 0a 81		INSTRUMENT_MARIMBA2   .text $00, $85, $4E, $DA, $15, $00, $0A, $81, $80, $F9, $13, $00, 'MARIMBA2  '
>391cea	80 f9 13 00 4d 41 52 49 4d 42 41 32 20 20
>391cf8	00 30 00 fe 11 01 08 ae		INSTRUMENT_MDRNPHON   .text $00, $30, $00, $FE, $11, $01, $08, $AE, $C0, $F1, $19, $01, 'MDRNPHON  '
>391d00	c0 f1 19 01 4d 44 52 4e 50 48 4f 4e 20 20
>391d0e	07 0c 00 c8 b6 01 00 00		INSTRUMENT_MLTRDRUM   .text $07, $0C, $00, $C8, $B6, $01, $00, $00, $00, $00, $00, $00, 'MLTRDRUM  '
>391d16	00 00 00 00 4d 4c 54 52 44 52 55 4d 20 20
>391d24	00 20 90 f5 9e 02 0c 11		INSTRUMENT_MOOGSYNT   .text $00, $20, $90, $F5, $9E, $02, $0C, $11, $00, $F4, $5B, $03, 'MOOGSYNT  '
>391d2c	00 f4 5b 03 4d 4f 4f 47 53 59 4e 54 20 20
>391d3a	00 0e 40 d1 53 00 0e 0e		INSTRUMENT_NOISE1     .text $00, $0E, $40, $D1, $53, $00, $0E, $0E, $00, $F2, $7F, $03, 'NOISE1    '
>391d42	00 f2 7f 03 4e 4f 49 53 45 31 20 20 20 20
>391d50	00 b1 c5 6e 17 00 02 22		INSTRUMENT_OBOE1      .text $00, $B1, $C5, $6E, $17, $00, $02, $22, $05, $8B, $0E, $00, 'OBOE1     '
>391d58	05 8b 0e 00 4f 42 4f 45 31 20 20 20 20 20
>391d66	00 65 d2 81 03 00 02 71		INSTRUMENT_ORGAN1     .text $00, $65, $D2, $81, $03, $00, $02, $71, $80, $F1, $05, $00, 'ORGAN1    '
>391d6e	80 f1 05 00 4f 52 47 41 4e 31 20 20 20 20
>391d7c	00 24 80 ff 0f 00 01 21		INSTRUMENT_ORGAN2     .text $00, $24, $80, $FF, $0F, $00, $01, $21, $80, $FF, $0F, $00, 'ORGAN2    '
>391d84	80 ff 0f 00 4f 52 47 41 4e 32 20 20 20 20
>391d92	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3     .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $80, $F0, $1F, $00, 'ORGAN3    '
>391d9a	80 f0 1f 00 4f 52 47 41 4e 33 20 20 20 20
>391da8	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3A    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $8D, $F0, $13, $00, 'ORGAN3A   '
>391db0	8d f0 13 00 4f 52 47 41 4e 33 41 20 20 20
>391dbe	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3B    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $92, $F0, $12, $00, 'ORGAN3B   '
>391dc6	92 f0 12 00 4f 52 47 41 4e 33 42 20 20 20
>391dd4	00 0c 00 f8 b5 00 01 00		INSTRUMENT_ORGNPERC   .text $00, $0C, $00, $F8, $B5, $00, $01, $00, $00, $D6, $4F, $00, 'ORGNPERC  '
>391ddc	00 d6 4f 00 4f 52 47 4e 50 45 52 43 20 20
>391dea	00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE1     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F1, $B2, $00, 'PHONE1    '
>391df2	08 f1 b2 00 50 48 4f 4e 45 31 20 20 20 20
>391e00	00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE2     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $0A, $F1, $B4, $00, 'PHONE2    '
>391e08	0a f1 b4 00 50 48 4f 4e 45 32 20 20 20 20
>391e16	00 81 63 f3 58 00 00 01		INSTRUMENT_PIAN1A     .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'PIAN1A    '
>391e1e	80 f2 58 00 50 49 41 4e 31 41 20 20 20 20
>391e2c	00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1B     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $26, $F5, $FA, $00, 'PIAN1B    '
>391e34	26 f5 fa 00 50 49 41 4e 31 42 20 20 20 20
>391e42	00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1C     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'PIAN1C    '
>391e4a	57 f5 fa 00 50 49 41 4e 31 43 20 20 20 20
>391e58	00 03 4f f1 53 00 06 17		INSTRUMENT_PIANO      .text $00, $03, $4F, $F1, $53, $00, $06, $17, $00, $F2, $74, $00, 'PIANO     '
>391e60	00 f2 74 00 50 49 41 4e 4f 20 20 20 20 20
>391e6e	00 01 4f f1 53 00 06 11		INSTRUMENT_PIANO1     .text $00, $01, $4F, $F1, $53, $00, $06, $11, $00, $D2, $74, $00, 'PIANO1    '
>391e76	00 d2 74 00 50 49 41 4e 4f 31 20 20 20 20
>391e84	00 41 9d f2 51 00 06 13		INSTRUMENT_PIANO2     .text $00, $41, $9D, $F2, $51, $00, $06, $13, $00, $F2, $F1, $00, 'PIANO2    '
>391e8c	00 f2 f1 00 50 49 41 4e 4f 32 20 20 20 20
>391e9a	00 01 4f f1 50 00 06 01		INSTRUMENT_PIANO3     .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'PIANO3    '
>391ea2	04 d2 7c 00 50 49 41 4e 4f 33 20 20 20 20
>391eb0	00 01 4d f1 60 00 08 11		INSTRUMENT_PIANO4     .text $00, $01, $4D, $F1, $60, $00, $08, $11, $00, $D2, $7B, $00, 'PIANO4    '
>391eb8	00 d2 7b 00 50 49 41 4e 4f 34 20 20 20 20
>391ec6	00 03 4f f1 53 00 06 17		INSTRUMENT_PIANOBEL   .text $00, $03, $4F, $F1, $53, $00, $06, $17, $03, $F2, $74, $00, 'PIANOBEL  '
>391ece	03 f2 74 00 50 49 41 4e 4f 42 45 4c 20 20
>391edc	00 01 cf f1 53 00 02 12		INSTRUMENT_PIANOF     .text $00, $01, $CF, $F1, $53, $00, $02, $12, $00, $F2, $83, $00, 'PIANOF    '
>391ee4	00 f2 83 00 50 49 41 4e 4f 46 20 20 20 20
>391ef2	00 10 00 75 93 01 00 01		INSTRUMENT_POPBASS1   .text $00, $10, $00, $75, $93, $01, $00, $01, $00, $F5, $82, $01, 'POPBASS1  '
>391efa	00 f5 82 01 50 4f 50 42 41 53 53 31 20 20
>391f08	07 0c 00 c7 b4 00 00 00		INSTRUMENT_RKSNARE1   .text $07, $0C, $00, $C7, $B4, $00, $00, $00, $00, $00, $00, $00, 'RKSNARE1  '
>391f10	00 00 00 00 52 4b 53 4e 41 52 45 31 20 20
>391f1e	00 01 4f 71 53 00 0a 12		INSTRUMENT_SAX1       .text $00, $01, $4F, $71, $53, $00, $0A, $12, $00, $52, $7C, $00, 'SAX1      '
>391f26	00 52 7c 00 53 41 58 31 20 20 20 20 20 20
>391f34	00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH    .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH   '
>391f3c	00 5c dc 00 53 43 52 41 54 43 48 20 20 20
>391f4a	00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH4   .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH4  '
>391f52	00 5c dc 00 53 43 52 41 54 43 48 34 20 20
>391f60	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SDRUM2     .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SDRUM2    '
>391f68	00 f6 b4 00 53 44 52 55 4d 32 20 20 20 20
>391f76	00 e4 0e ff 3f 01 00 c0		INSTRUMENT_SHRTVIBE   .text $00, $E4, $0E, $FF, $3F, $01, $00, $C0, $00, $F3, $07, $00, 'SHRTVIBE  '
>391f7e	00 f3 07 00 53 48 52 54 56 49 42 45 20 20
>391f8c	00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR1     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $00, 'SITAR1    '
>391f94	40 f1 53 00 53 49 54 41 52 31 20 20 20 20
>391fa2	00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR2     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $01, 'SITAR2    '
>391faa	40 f1 53 01 53 49 54 41 52 32 20 20 20 20
>391fb8	00 61 0c 81 03 00 08 71		INSTRUMENT_SNAKEFL    .text $00, $61, $0C, $81, $03, $00, $08, $71, $80, $61, $0C, $00, 'SNAKEFL   '
>391fc0	80 61 0c 00 53 4e 41 4b 45 46 4c 20 20 20
>391fce	07 0c 00 f8 b5 00 00 00		INSTRUMENT_SNARE1     .text $07, $0C, $00, $F8, $B5, $00, $00, $00, $00, $00, $00, $00, 'SNARE1    '
>391fd6	00 00 00 00 53 4e 41 52 45 31 20 20 20 20
>391fe4	00 06 00 f0 f0 00 0e c4		INSTRUMENT_SNRSUST    .text $00, $06, $00, $F0, $F0, $00, $0E, $C4, $03, $C4, $34, $00, 'SNRSUST   '
>391fec	03 c4 34 00 53 4e 52 53 55 53 54 20 20 20
>391ffa	00 70 1c 51 03 02 0e 20		INSTRUMENT_SOLOVLN    .text $00, $70, $1C, $51, $03, $02, $0E, $20, $00, $54, $67, $02, 'SOLOVLN   '
>392002	00 54 67 02 53 4f 4c 4f 56 4c 4e 20 20 20
>392010	00 01 46 f1 83 00 06 61		INSTRUMENT_STEELGT1   .text $00, $01, $46, $F1, $83, $00, $06, $61, $03, $31, $86, $00, 'STEELGT1  '
>392018	03 31 86 00 53 54 45 45 4c 47 54 31 20 20
>392026	00 01 47 f1 83 00 06 61		INSTRUMENT_STEELGT2   .text $00, $01, $47, $F1, $83, $00, $06, $61, $03, $91, $86, $00, 'STEELGT2  '
>39202e	03 91 86 00 53 54 45 45 4c 47 54 32 20 20
>39203c	00 b1 8b 71 11 00 06 61		INSTRUMENT_STRINGS1   .text $00, $B1, $8B, $71, $11, $00, $06, $61, $40, $42, $15, $01, 'STRINGS1  '
>392044	40 42 15 01 53 54 52 49 4e 47 53 31 20 20
>392052	00 e1 4f b1 d3 03 06 21		INSTRUMENT_STRNLONG   .text $00, $E1, $4F, $B1, $D3, $03, $06, $21, $00, $12, $74, $01, 'STRNLONG  '
>39205a	00 12 74 01 53 54 52 4e 4c 4f 4e 47 20 20
>392068	00 55 97 2a 02 00 00 12		INSTRUMENT_SYN1       .text $00, $55, $97, $2A, $02, $00, $00, $12, $80, $42, $F3, $00, 'SYN1      '
>392070	80 42 f3 00 53 59 4e 31 20 20 20 20 20 20
>39207e	00 13 97 9a 12 00 0e 11		INSTRUMENT_SYN2       .text $00, $13, $97, $9A, $12, $00, $0E, $11, $80, $9B, $14, $00, 'SYN2      '
>392086	80 9b 14 00 53 59 4e 32 20 20 20 20 20 20
>392094	00 11 8a f1 11 00 06 01		INSTRUMENT_SYN3       .text $00, $11, $8A, $F1, $11, $00, $06, $01, $40, $F1, $B3, $00, 'SYN3      '
>39209c	40 f1 b3 00 53 59 4e 33 20 20 20 20 20 20
>3920aa	00 21 0d e9 3a 00 0a 22		INSTRUMENT_SYN4       .text $00, $21, $0D, $E9, $3A, $00, $0A, $22, $80, $65, $6C, $00, 'SYN4      '
>3920b2	80 65 6c 00 53 59 4e 34 20 20 20 20 20 20
>3920c0	00 01 4f 71 53 00 06 19		INSTRUMENT_SYN5       .text $00, $01, $4F, $71, $53, $00, $06, $19, $00, $52, $7C, $00, 'SYN5      '
>3920c8	00 52 7c 00 53 59 4e 35 20 20 20 20 20 20
>3920d6	00 24 0f 41 7e 00 0a 21		INSTRUMENT_SYN6       .text $00, $24, $0F, $41, $7E, $00, $0A, $21, $00, $F1, $5E, $00, 'SYN6      '
>3920de	00 f1 5e 00 53 59 4e 36 20 20 20 20 20 20
>3920ec	00 07 87 f0 05 00 04 01		INSTRUMENT_SYN9       .text $00, $07, $87, $F0, $05, $00, $04, $01, $80, $F0, $05, $00, 'SYN9      '
>3920f4	80 f0 05 00 53 59 4e 39 20 20 20 20 20 20
>392102	00 26 03 e0 f0 00 08 1e		INSTRUMENT_SYNBAL1    .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'SYNBAL1   '
>39210a	00 ff 31 00 53 59 4e 42 41 4c 31 20 20 20
>392118	00 28 03 e0 f0 00 04 13		INSTRUMENT_SYNBAL2    .text $00, $28, $03, $E0, $F0, $00, $04, $13, $00, $E8, $11, $00, 'SYNBAL2   '
>392120	00 e8 11 00 53 59 4e 42 41 4c 32 20 20 20
>39212e	00 30 88 d5 19 00 0c 71		INSTRUMENT_SYNBASS1   .text $00, $30, $88, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'SYNBASS1  '
>392136	80 61 1b 00 53 59 4e 42 41 53 53 31 20 20
>392144	00 81 86 65 01 00 0c 11		INSTRUMENT_SYNBASS2   .text $00, $81, $86, $65, $01, $00, $0C, $11, $00, $32, $74, $00, 'SYNBASS2  '
>39214c	00 32 74 00 53 59 4e 42 41 53 53 32 20 20
>39215a	00 81 83 65 05 00 0a 51		INSTRUMENT_SYNBASS4   .text $00, $81, $83, $65, $05, $00, $0A, $51, $00, $32, $74, $00, 'SYNBASS4  '
>392162	00 32 74 00 53 59 4e 42 41 53 53 34 20 20
>392170	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR1    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F8, $B6, $00, 'SYNSNR1   '
>392178	00 f8 b6 00 53 59 4e 53 4e 52 31 20 20 20
>392186	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR2    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SYNSNR2   '
>39218e	00 f6 b4 00 53 59 4e 53 4e 52 32 20 20 20
>39219c	00 8f 81 ef 01 00 04 01		INSTRUMENT_TINCAN1    .text $00, $8F, $81, $EF, $01, $00, $04, $01, $00, $98, $F1, $00, 'TINCAN1   '
>3921a4	00 98 f1 00 54 49 4e 43 41 4e 31 20 20 20
>3921b2	08 04 00 f7 b5 00 00 00		INSTRUMENT_TOM1       .text $08, $04, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'TOM1      '
>3921ba	00 00 00 00 54 4f 4d 31 20 20 20 20 20 20
>3921c8	08 02 00 c8 97 00 00 00		INSTRUMENT_TOM2       .text $08, $02, $00, $C8, $97, $00, $00, $00, $00, $00, $00, $00, 'TOM2      '
>3921d0	00 00 00 00 54 4f 4d 32 20 20 20 20 20 20
>3921de	00 17 4f f2 61 00 08 12		INSTRUMENT_TRAINBEL   .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F2, $74, $00, 'TRAINBEL  '
>3921e6	08 f2 74 00 54 52 41 49 4e 42 45 4c 20 20
>3921f4	00 26 03 e0 f0 00 08 1e		INSTRUMENT_TRIANGLE   .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'TRIANGLE  '
>3921fc	00 ff 31 00 54 52 49 41 4e 47 4c 45 20 20
>39220a	00 b1 1c 41 1f 00 0e 61		INSTRUMENT_TROMB1     .text $00, $B1, $1C, $41, $1F, $00, $0E, $61, $80, $92, $3B, $00, 'TROMB1    '
>392212	80 92 3b 00 54 52 4f 4d 42 31 20 20 20 20
>392220	00 21 1c 53 1d 00 0c 61		INSTRUMENT_TROMB2     .text $00, $21, $1C, $53, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TROMB2    '
>392228	80 52 3b 00 54 52 4f 4d 42 32 20 20 20 20
>392236	00 31 1c 41 0b 00 0e 61		INSTRUMENT_TRUMPET1   .text $00, $31, $1C, $41, $0B, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET1  '
>39223e	80 92 3b 00 54 52 55 4d 50 45 54 31 20 20
>39224c	00 31 1c 23 1d 00 0c 61		INSTRUMENT_TRUMPET2   .text $00, $31, $1C, $23, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TRUMPET2  '
>392254	80 52 3b 00 54 52 55 4d 50 45 54 32 20 20
>392262	00 31 1c 41 01 00 0e 61		INSTRUMENT_TRUMPET3   .text $00, $31, $1C, $41, $01, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET3  '
>39226a	80 92 3b 00 54 52 55 4d 50 45 54 33 20 20
>392278	00 31 1c 41 0b 00 0c 61		INSTRUMENT_TRUMPET4   .text $00, $31, $1C, $41, $0B, $00, $0C, $61, $80, $92, $3B, $00, 'TRUMPET4  '
>392280	80 92 3b 00 54 52 55 4d 50 45 54 34 20 20
>39228e	00 21 19 43 8c 00 0c 21		INSTRUMENT_TUBA1      .text $00, $21, $19, $43, $8C, $00, $0C, $21, $80, $85, $2F, $00, 'TUBA1     '
>392296	80 85 2f 00 54 55 42 41 31 20 20 20 20 20
>3922a4	00 84 53 f5 33 00 06 a0		INSTRUMENT_VIBRA1     .text $00, $84, $53, $F5, $33, $00, $06, $A0, $80, $FD, $25, $00, 'VIBRA1    '
>3922ac	80 fd 25 00 56 49 42 52 41 31 20 20 20 20
>3922ba	00 06 73 f6 54 00 00 81		INSTRUMENT_VIBRA2     .text $00, $06, $73, $F6, $54, $00, $00, $81, $03, $F2, $B3, $00, 'VIBRA2    '
>3922c2	03 f2 b3 00 56 49 42 52 41 32 20 20 20 20
>3922d0	00 93 97 aa 12 02 0e 91		INSTRUMENT_VIBRA3     .text $00, $93, $97, $AA, $12, $02, $0E, $91, $80, $AC, $21, $00, 'VIBRA3    '
>3922d8	80 ac 21 00 56 49 42 52 41 33 20 20 20 20
>3922e6	00 31 1c 51 03 00 0e 61		INSTRUMENT_VIOLIN1    .text $00, $31, $1C, $51, $03, $00, $0E, $61, $80, $54, $67, $00, 'VIOLIN1   '
>3922ee	80 54 67 00 56 49 4f 4c 49 4e 31 20 20 20
>3922fc	00 e1 88 62 29 00 0c 22		INSTRUMENT_VIOLIN2    .text $00, $E1, $88, $62, $29, $00, $0C, $22, $80, $53, $2C, $00, 'VIOLIN2   '
>392304	80 53 2c 00 56 49 4f 4c 49 4e 32 20 20 20
>392312	00 e1 88 64 29 00 06 22		INSTRUMENT_VIOLIN3    .text $00, $E1, $88, $64, $29, $00, $06, $22, $83, $53, $2C, $00, 'VIOLIN3   '
>39231a	83 53 2c 00 56 49 4f 4c 49 4e 33 20 20 20
>392328	00 31 9c f1 f9 00 0e 31		INSTRUMENT_VLNPIZZ1   .text $00, $31, $9C, $F1, $F9, $00, $0E, $31, $80, $F7, $E6, $00, 'VLNPIZZ1  '
>392330	80 f7 e6 00 56 4c 4e 50 49 5a 5a 31 20 20
>39233e	00 00 02 00 f0 00 0e 14		INSTRUMENT_WAVE       .text $00, $00, $02, $00, $F0, $00, $0E, $14, $80, $1B, $A2, $00, 'WAVE      '
>392346	80 1b a2 00 57 41 56 45 20 20 20 20 20 20
>392354	00 11 2d c8 2f 00 0c 31		INSTRUMENT_XYLO1      .text $00, $11, $2D, $C8, $2F, $00, $0C, $31, $00, $F5, $F5, $00, 'XYLO1     '
>39235c	00 f5 f5 00 58 59 4c 4f 31 20 20 20 20 20
>39236a	06 2e 00 ff 0f 00 00 00		INSTRUMENT_XYLO2      .text $06, $2E, $00, $FF, $0F, $00, $00, $00, $00, $00, $00, $00, 'XYLO2     '
>392372	00 00 00 00 58 59 4c 4f 32 20 20 20 20 20
>392380	00 06 00 ff f0 00 0e c4		INSTRUMENT_XYLO3      .text $00, $06, $00, $FF, $F0, $00, $0E, $C4, $00, $F8, $B5, $00, 'XYLO3     '
>392388	00 f8 b5 00 58 59 4c 4f 33 20 20 20 20 20

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Drums.asm

>392396	00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP2         .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>39239e	00 87 fa 00
>3923a2	00 01 00 78 97 09 00 02		DRUMINS_SCRATCH1      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>3923aa	00 88 98 03
>3923ae	00 01 00 78 97 09 00 02		DRUMINS_SCRATCH2      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>3923b6	00 88 98 03
>3923ba	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT2      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>3923c2	00 f9 69 00
>3923c6	00 00 00 f8 6c 01 00 0e		DRUMINS_HIQ           .text $00, $00, $00, $F8, $6C, $01, $00, $0E, $80, $E8, $4A, $00
>3923ce	80 e8 4a 00
>3923d2	00 25 1b fa f2 01 00 12		DRUMINS_WOODBLOK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>3923da	00 f6 9a 00
>3923de	00 06 03 f4 44 00 01 01		DRUMINS_GLOCK         .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>3923e6	1b f2 34 00
>3923ea	00 00 00 f9 f3 05 00 01		DRUMINS_BASS_DR2      .text $00, $00, $00, $F9, $F3, $05, $00, $01, $00, $F7, $8A, $00
>3923f2	00 f7 8a 00
>3923f6	00 01 07 fa fd 05 00 01		DRUMINS_BASS_DR1      .text $00, $01, $07, $FA, $FD, $05, $00, $01, $00, $F6, $47, $00
>3923fe	00 f6 47 00
>392402	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT       .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>39240a	00 f9 69 00
>39240e	00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_AC      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>392416	00 f7 a9 00
>39241a	00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP          .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>392422	00 87 fa 00
>392426	00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_EL      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>39242e	00 f7 a9 00
>392432	00 06 0a fa 1f 0c 00 11		DRUMINS_LO_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>39243a	00 f5 f5 00
>39243e	00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_CL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>392446	06 b8 d8 03
>39244a	00 06 0a fa 1f 0c 00 11		DRUMINS_HI_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>392452	00 f5 f5 00
>392456	00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_PL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>39245e	06 b8 d8 03
>392462	00 06 0a fa 1f 0c 00 11		DRUMINS_LOW_TOM       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>39246a	00 f5 f5 00
>39246e	00 2e 00 82 f6 05 00 04		DRUMINS_HIHAT_OP      .text $00, $2E, $00, $82, $F6, $05, $00, $04, $10, $74, $F8, $03
>392476	10 74 f8 03
>39247a	00 06 0a fa 1f 0c 00 11		DRUMINS_LTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>392482	00 f5 f5 00
>392486	00 06 0a fa 1f 0c 00 11		DRUMINS_HTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>39248e	00 f5 f5 00
>392492	00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH         .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>39249a	05 c5 d4 03
>39249e	00 06 0a fa 1f 0c 00 11		DRUMINS_TOM_HIGH      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>3924a6	00 f5 f5 00
>3924aa	00 29 10 94 00 0f 00 04		DRUMINS_RIDE_CY       .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>3924b2	04 f9 44 03
>3924b6	00 2c 00 9f 00 0f 02 0e		DRUMINS_TAMBOUR       .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>3924be	05 c5 d4 03
>3924c2	00 29 10 94 00 0f 00 04		DRUMINS_CYMBAL        .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>3924ca	04 f9 44 03
>3924ce	00 2e 09 f5 f1 01 00 06		DRUMINS_TAMBOU2       .text $00, $2E, $09, $F5, $F1, $01, $00, $06, $03, $87, $F7, $03
>3924d6	03 87 f7 03
>3924da	00 2c 00 9f 00 0f 02 0e		DRUMINS_SPLASH        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>3924e2	05 c5 d4 03
>3924e6	00 37 14 f7 a1 09 01 03		DRUMINS_COWBELL       .text $00, $37, $14, $F7, $A1, $09, $01, $03, $00, $F6, $28, $00
>3924ee	00 f6 28 00
>3924f2	00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH2        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>3924fa	05 c5 d4 03
>3924fe	00 80 00 ff 00 0d 01 00		DRUMINS_VIBRASLA      .text $00, $80, $00, $FF, $00, $0D, $01, $00, $00, $F5, $F7, $01
>392506	00 f5 f7 01
>39250a	00 29 10 94 00 0f 00 04		DRUMINS_RIDE2         .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>392512	04 f9 44 03
>392516	00 25 c4 fa fa 01 00 03		DRUMINS_HI_BONGO      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>39251e	00 99 f9 00
>392522	00 21 03 fb fa 01 01 02		DRUMINS_LO_BONGO      .text $00, $21, $03, $FB, $FA, $01, $01, $02, $00, $A8, $F7, $00
>39252a	00 a8 f7 00
>39252e	00 25 c4 fa fa 01 00 03		DRUMINS_MUTECONG      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>392536	00 99 f9 00
>39253a	00 24 18 f9 fa 0f 02 03		DRUMINS_OPENCONG      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>392542	00 a6 f6 00
>392546	00 24 18 f9 fa 0f 02 03		DRUMINS_LOWCONGA      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>39254e	00 a6 f6 00
>392552	00 05 14 f5 f5 07 02 03		DRUMINS_HI_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>39255a	00 f6 36 02
>39255e	00 05 14 f5 f5 07 02 03		DRUMINS_LO_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>392566	00 f6 36 02
>39256a	00 1c 0c f9 31 0f 01 15		DRUMINS_HI_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>392572	00 96 e8 01
>392576	00 1c 0c f9 31 0f 01 15		DRUMINS_LO_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>39257e	00 96 e8 01
>392582	00 0e 00 ff 01 0f 00 0e		DRUMINS_CABASA        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>39258a	02 79 77 03
>39258e	00 0e 00 ff 01 0f 00 0e		DRUMINS_MARACAS       .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>392596	02 79 77 03
>39259a	00 20 15 af 07 05 01 0e		DRUMINS_S_WHISTL      .text $00, $20, $15, $AF, $07, $05, $01, $0E, $00, $A5, $2B, $02
>3925a2	00 a5 2b 02
>3925a6	00 20 18 bf 07 01 01 0e		DRUMINS_L_WHISTL      .text $00, $20, $18, $BF, $07, $01, $01, $0E, $00, $93, $3B, $02
>3925ae	00 93 3b 02
>3925b2	00 20 00 f0 f7 0b 00 08		DRUMINS_S_GUIRO       .text $00, $20, $00, $F0, $F7, $0B, $00, $08, $01, $89, $3B, $03
>3925ba	01 89 3b 03
>3925be	00 20 00 f3 fa 09 00 08		DRUMINS_L_GUIRO       .text $00, $20, $00, $F3, $FA, $09, $00, $08, $0A, $53, $2B, $02
>3925c6	0a 53 2b 02
>3925ca	00 15 21 f8 9a 09 01 13		DRUMINS_CLAVES        .text $00, $15, $21, $F8, $9A, $09, $01, $13, $00, $F6, $89, $00
>3925d2	00 f6 89 00
>3925d6	00 25 1b fa f2 01 00 12		DRUMINS_HI_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>3925de	00 f6 9a 00
>3925e2	00 25 1b fa f2 01 00 12		DRUMINS_LO_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>3925ea	00 f6 9a 00
>3925ee	00 20 01 5f 07 01 00 08		DRUMINS_MU_CUICA      .text $00, $20, $01, $5F, $07, $01, $00, $08, $00, $87, $4B, $01
>3925f6	00 87 4b 01
>3925fa	00 25 12 57 f7 01 01 03		DRUMINS_OP_CUICA      .text $00, $25, $12, $57, $F7, $01, $01, $03, $00, $78, $67, $01
>392602	00 78 67 01
>392606	00 22 2f f1 f0 07 00 27		DRUMINS_MU_TRNGL      .text $00, $22, $2F, $F1, $F0, $07, $00, $27, $02, $F8, $FC, $00
>39260e	02 f8 fc 00
>392612	00 26 44 f1 f0 07 00 27		DRUMINS_OP_TRNGL      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>39261a	40 f5 f5 00
>39261e	00 0e 00 ff 01 0f 00 0e		DRUMINS_SHAKER        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>392626	02 79 77 03
>39262a	00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL1      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>392632	40 f5 f5 00
>392636	00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL2      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>39263e	40 f5 f5 00
>392642	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT3      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>39264a	00 f9 69 00
>39264e	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT4      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>392656	00 f9 69 00
>39265a	00 02 1d f5 93 01 00 00		DRUMINS_TAIKO         .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>392662	00 c6 45 00
=27					DRUM_NOTE_BASE = 27;
=60					NUM_MIDI_DRUMS = 60;
>392666	96 23 39 00 a2 23 39 00		midiDrums     .dword DRUMINS_CLAP2, DRUMINS_SCRATCH1, DRUMINS_SCRATCH2, DRUMINS_RIMSHOT2
>39266e	ae 23 39 00 ba 23 39 00
>392676	c6 23 39 00 d2 23 39 00		              .dword DRUMINS_HIQ, DRUMINS_WOODBLOK, DRUMINS_GLOCK, DRUMINS_BASS_DR2
>39267e	de 23 39 00 ea 23 39 00
>392686	f6 23 39 00 02 24 39 00		              .dword DRUMINS_BASS_DR1, DRUMINS_RIMSHOT,  DRUMINS_SNARE_AC, DRUMINS_CLAP
>39268e	0e 24 39 00 1a 24 39 00
>392696	26 24 39 00 32 24 39 00		              .dword DRUMINS_SNARE_EL, DRUMINS_LO_TOMS,  DRUMINS_HIHAT_CL, DRUMINS_HI_TOMS
>39269e	3e 24 39 00 4a 24 39 00
>3926a6	56 24 39 00 62 24 39 00		              .dword DRUMINS_HIHAT_PL, DRUMINS_LOW_TOM,	DRUMINS_HIHAT_OP, DRUMINS_LTOM_MID
>3926ae	6e 24 39 00 7a 24 39 00
>3926b6	86 24 39 00 92 24 39 00		              .dword DRUMINS_HTOM_MID, DRUMINS_CRASH,    DRUMINS_TOM_HIGH, DRUMINS_RIDE_CY
>3926be	9e 24 39 00 aa 24 39 00
>3926c6	b6 24 39 00 c2 24 39 00		              .dword DRUMINS_TAMBOUR,  DRUMINS_CYMBAL,   DRUMINS_TAMBOU2,  DRUMINS_SPLASH
>3926ce	ce 24 39 00 da 24 39 00
>3926d6	e6 24 39 00 f2 24 39 00		              .dword DRUMINS_COWBELL,  DRUMINS_CRASH2, 	DRUMINS_VIBRASLA, DRUMINS_RIDE2
>3926de	fe 24 39 00 0a 25 39 00
>3926e6	16 25 39 00 22 25 39 00		              .dword DRUMINS_HI_BONGO, DRUMINS_LO_BONGO, DRUMINS_MUTECONG, DRUMINS_OPENCONG
>3926ee	2e 25 39 00 3a 25 39 00
>3926f6	46 25 39 00 52 25 39 00		              .dword DRUMINS_LOWCONGA, DRUMINS_HI_TIMBA, DRUMINS_LO_TIMBA, DRUMINS_HI_AGOGO
>3926fe	5e 25 39 00 6a 25 39 00
>392706	76 25 39 00 82 25 39 00		              .dword DRUMINS_LO_AGOGO, DRUMINS_CABASA, DRUMINS_MARACAS,  DRUMINS_S_WHISTL
>39270e	8e 25 39 00 9a 25 39 00
>392716	a6 25 39 00 b2 25 39 00		              .dword DRUMINS_L_WHISTL, DRUMINS_S_GUIRO,  DRUMINS_L_GUIRO,  DRUMINS_CLAVES
>39271e	be 25 39 00 ca 25 39 00
>392726	d6 25 39 00 e2 25 39 00		              .dword DRUMINS_HI_WDBLK, DRUMINS_LO_WDBLK, DRUMINS_MU_CUICA, DRUMINS_OP_CUICA
>39272e	ee 25 39 00 fa 25 39 00
>392736	06 26 39 00 12 26 39 00		              .dword DRUMINS_MU_TRNGL, DRUMINS_OP_TRNGL, DRUMINS_SHAKER, DRUMINS_TRIANGL1
>39273e	1e 26 39 00 2a 26 39 00
>392746	36 26 39 00 42 26 39 00		              .dword DRUMINS_TRIANGL2, DRUMINS_RIMSHOT3, DRUMINS_RIMSHOT4, DRUMINS_TAIKO
>39274e	4e 26 39 00 5a 26 39 00

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Instruments.asm

>392756	00 33 5a b2 50 01 00 31		MIDI_INSTRUMENT_PIANO1     .text $00, $33, $5A, $B2, $50, $01, $00, $31, $00, $B1, $F5, $01
>39275e	00 b1 f5 01
>392762	00 31 49 f2 53 07 01 11		MIDI_INSTRUMENT_PIANO2     .text $00, $31, $49, $F2, $53, $07, $01, $11, $03, $F1, $F5, $00
>39276a	03 f1 f5 00
>39276e	00 31 95 d1 83 0d 01 32		MIDI_INSTRUMENT_PIANO3     .text $00, $31, $95, $D1, $83, $0D, $01, $32, $03, $C1, $F5, $00
>392776	03 c1 f5 00
>39277a	00 34 9b f3 63 01 01 11		MIDI_INSTRUMENT_HONKTONK   .text $00, $34, $9B, $F3, $63, $01, $01, $11, $00, $92, $F5, $01
>392782	00 92 f5 01
>392786	00 27 28 f8 b7 01 02 91		MIDI_INSTRUMENT_EP1        .text $00, $27, $28, $F8, $B7, $01, $02, $91, $00, $F1, $F9, $00
>39278e	00 f1 f9 00
>392792	00 1a 2d f3 ee 01 01 11		MIDI_INSTRUMENT_EP2        .text $00, $1A, $2D, $F3, $EE, $01, $01, $11, $00, $F1, $F5, $00
>39279a	00 f1 f5 00
>39279e	00 35 95 f2 58 0f 01 32		MIDI_INSTRUMENT_HARPSIC    .text $00, $35, $95, $F2, $58, $0F, $01, $32, $02, $81, $F6, $01
>3927a6	02 81 f6 01
>3927aa	00 31 85 c9 40 01 00 35		MIDI_INSTRUMENT_CLAVIC     .text $00, $31, $85, $C9, $40, $01, $00, $35, $00, $C2, $B9, $01
>3927b2	00 c2 b9 01
>3927b6	00 09 15 c7 64 08 00 01		MIDI_INSTRUMENT_CELESTA    .text $00, $09, $15, $C7, $64, $08, $00, $01, $05, $B2, $35, $00
>3927be	05 b2 35 00
>3927c2	00 06 03 f4 44 00 01 01		MIDI_INSTRUMENT_GLOCK      .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>3927ca	1b f2 34 00
>3927ce	00 04 06 a9 24 0a 01 01		MIDI_INSTRUMENT_MUSICBOX   .text $00, $04, $06, $A9, $24, $0A, $01, $01, $01, $F5, $74, $00
>3927d6	01 f5 74 00
>3927da	00 d4 00 f6 33 00 00 f1		MIDI_INSTRUMENT_VIBES      .text $00, $D4, $00, $F6, $33, $00, $00, $F1, $00, $61, $E3, $00
>3927e2	00 61 e3 00
>3927e6	00 d4 00 f7 e8 04 00 d1		MIDI_INSTRUMENT_MARIMBA    .text $00, $D4, $00, $F7, $E8, $04, $00, $D1, $00, $A4, $64, $00
>3927ee	00 a4 64 00
>3927f2	00 36 16 f7 f7 01 00 31		MIDI_INSTRUMENT_XYLO       .text $00, $36, $16, $F7, $F7, $01, $00, $31, $07, $B5, $F5, $00
>3927fa	07 b5 f5 00
>3927fe	00 03 1b a2 43 0b 00 00		MIDI_INSTRUMENT_TUBEBELL   .text $00, $03, $1B, $A2, $43, $0B, $00, $00, $00, $F3, $74, $00
>392806	00 f3 74 00
>39280a	00 c3 8e f8 35 01 01 11		MIDI_INSTRUMENT_SANTUR     .text $00, $C3, $8E, $F8, $35, $01, $01, $11, $00, $C3, $94, $01
>392812	00 c3 94 01
>392816	00 e2 07 f4 1b 06 01 e0		MIDI_INSTRUMENT_ORGAN1     .text $00, $E2, $07, $F4, $1B, $06, $01, $E0, $00, $F4, $0D, $01
>39281e	00 f4 0d 01
>392822	00 f2 00 f6 2c 04 00 f0		MIDI_INSTRUMENT_ORGAN2     .text $00, $F2, $00, $F6, $2C, $04, $00, $F0, $00, $F5, $0B, $01
>39282a	00 f5 0b 01
>39282e	00 f1 06 b6 15 0a 00 f0		MIDI_INSTRUMENT_ORGAN3     .text $00, $F1, $06, $B6, $15, $0A, $00, $F0, $00, $BF, $07, $00
>392836	00 bf 07 00
>39283a	00 22 03 79 16 08 01 e0		MIDI_INSTRUMENT_PIPEORG    .text $00, $22, $03, $79, $16, $08, $01, $E0, $00, $6D, $08, $01
>392842	00 6d 08 01
>392846	00 31 27 63 06 01 00 72		MIDI_INSTRUMENT_REEDORG    .text $00, $31, $27, $63, $06, $01, $00, $72, $00, $51, $17, $01
>39284e	00 51 17 01
>392852	00 b4 1d 53 16 0f 01 71		MIDI_INSTRUMENT_ACORDIAN   .text $00, $B4, $1D, $53, $16, $0F, $01, $71, $00, $51, $17, $01
>39285a	00 51 17 01
>39285e	00 25 29 97 15 01 00 32		MIDI_INSTRUMENT_HARMONIC   .text $00, $25, $29, $97, $15, $01, $00, $32, $00, $53, $08, $01
>392866	00 53 08 01
>39286a	00 24 9e 67 15 0f 00 31		MIDI_INSTRUMENT_BANDNEON   .text $00, $24, $9E, $67, $15, $0F, $00, $31, $00, $53, $06, $01
>392872	00 53 06 01
>392876	00 13 27 a3 b4 05 01 31		MIDI_INSTRUMENT_NYLONGT    .text $00, $13, $27, $A3, $B4, $05, $01, $31, $00, $D2, $F8, $00
>39287e	00 d2 f8 00
>392882	00 17 a3 f3 32 01 00 11		MIDI_INSTRUMENT_STEELGT    .text $00, $17, $A3, $F3, $32, $01, $00, $11, $00, $E2, $C7, $01
>39288a	00 e2 c7 01
>39288e	00 33 24 d2 c1 0f 01 31		MIDI_INSTRUMENT_JAZZGT     .text $00, $33, $24, $D2, $C1, $0F, $01, $31, $00, $F1, $9C, $00
>392896	00 f1 9c 00
>39289a	00 31 05 f8 44 01 00 32		MIDI_INSTRUMENT_CLEANGT    .text $00, $31, $05, $F8, $44, $01, $00, $32, $02, $F2, $C9, $01
>3928a2	02 f2 c9 01
>3928a6	00 21 09 9c 7b 07 00 02		MIDI_INSTRUMENT_MUTEGT     .text $00, $21, $09, $9C, $7B, $07, $00, $02, $03, $95, $FB, $00
>3928ae	03 95 fb 00
>3928b2	00 21 84 81 98 07 01 21		MIDI_INSTRUMENT_OVERDGT    .text $00, $21, $84, $81, $98, $07, $01, $21, $04, $A1, $59, $00
>3928ba	04 a1 59 00
>3928be	00 b1 0c 78 43 01 00 22		MIDI_INSTRUMENT_DISTGT     .text $00, $B1, $0C, $78, $43, $01, $00, $22, $03, $91, $FC, $03
>3928c6	03 91 fc 03
>3928ca	00 00 0a 82 8c 09 00 08		MIDI_INSTRUMENT_GTHARMS    .text $00, $00, $0A, $82, $8C, $09, $00, $08, $02, $B4, $EC, $00
>3928d2	02 b4 ec 00
>3928d6	00 21 13 ab 46 01 00 21		MIDI_INSTRUMENT_ACOUBASS   .text $00, $21, $13, $AB, $46, $01, $00, $21, $00, $93, $F7, $00
>3928de	00 93 f7 00
>3928e2	00 01 0a f9 32 01 00 22		MIDI_INSTRUMENT_FINGBASS   .text $00, $01, $0A, $F9, $32, $01, $00, $22, $04, $C1, $58, $00
>3928ea	04 c1 58 00
>3928ee	00 21 07 fa 77 0b 00 22		MIDI_INSTRUMENT_PICKBASS   .text $00, $21, $07, $FA, $77, $0B, $00, $22, $02, $C3, $6A, $00
>3928f6	02 c3 6a 00
>3928fa	00 21 17 71 57 0b 00 21		MIDI_INSTRUMENT_FRETLESS   .text $00, $21, $17, $71, $57, $0B, $00, $21, $00, $62, $87, $00
>392902	00 62 87 00
>392906	00 25 01 fa 78 07 01 12		MIDI_INSTRUMENT_SLAPBAS1   .text $00, $25, $01, $FA, $78, $07, $01, $12, $00, $F3, $97, $00
>39290e	00 f3 97 00
>392912	00 21 03 fa 88 0d 00 13		MIDI_INSTRUMENT_SLAPBAS2   .text $00, $21, $03, $FA, $88, $0D, $00, $13, $00, $B3, $97, $00
>39291a	00 b3 97 00
>39291e	00 21 09 f5 7f 09 01 23		MIDI_INSTRUMENT_SYNBASS1   .text $00, $21, $09, $F5, $7F, $09, $01, $23, $04, $F3, $CC, $00
>392926	04 f3 cc 00
>39292a	00 01 10 a3 9b 09 00 01		MIDI_INSTRUMENT_SYNBASS2   .text $00, $01, $10, $A3, $9B, $09, $00, $01, $00, $93, $AA, $00
>392932	00 93 aa 00
>392936	00 e2 19 f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLIN     .text $00, $E2, $19, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>39293e	00 78 08 01
>392942	00 e2 1c f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLA      .text $00, $E2, $1C, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>39294a	00 78 08 01
>39294e	00 61 19 69 16 0b 01 61		MIDI_INSTRUMENT_CELLO      .text $00, $61, $19, $69, $16, $0B, $01, $61, $00, $54, $27, $01
>392956	00 54 27 01
>39295a	00 71 18 82 31 0d 01 32		MIDI_INSTRUMENT_CONTRAB    .text $00, $71, $18, $82, $31, $0D, $01, $32, $00, $61, $56, $00
>392962	00 61 56 00
>392966	00 e2 23 70 06 0d 01 e1		MIDI_INSTRUMENT_TREMSTR    .text $00, $E2, $23, $70, $06, $0D, $01, $E1, $00, $75, $16, $01
>39296e	00 75 16 01
>392972	00 02 00 88 e6 08 00 61		MIDI_INSTRUMENT_PIZZ       .text $00, $02, $00, $88, $E6, $08, $00, $61, $00, $F5, $F6, $01
>39297a	00 f5 f6 01
>39297e	00 12 20 f6 d5 0f 01 11		MIDI_INSTRUMENT_HARP       .text $00, $12, $20, $F6, $D5, $0F, $01, $11, $80, $F3, $E3, $00
>392986	80 f3 e3 00
>39298a	00 61 0e f4 f4 01 01 00		MIDI_INSTRUMENT_TIMPANI    .text $00, $61, $0E, $F4, $F4, $01, $01, $00, $00, $B5, $F5, $00
>392992	00 b5 f5 00
>392996	00 61 1e 9c 04 0f 01 21		MIDI_INSTRUMENT_STRINGS    .text $00, $61, $1E, $9C, $04, $0F, $01, $21, $80, $71, $16, $00
>39299e	80 71 16 00
>3929a2	00 a2 2a c0 d6 0f 02 21		MIDI_INSTRUMENT_SLOWSTR    .text $00, $A2, $2A, $C0, $D6, $0F, $02, $21, $00, $30, $55, $01
>3929aa	00 30 55 01
>3929ae	00 61 21 72 35 0f 01 61		MIDI_INSTRUMENT_SYNSTR1    .text $00, $61, $21, $72, $35, $0F, $01, $61, $00, $62, $36, $01
>3929b6	00 62 36 01
>3929ba	00 21 1a 72 23 0f 01 21		MIDI_INSTRUMENT_SYNSTR2    .text $00, $21, $1A, $72, $23, $0F, $01, $21, $02, $51, $07, $00
>3929c2	02 51 07 00
>3929c6	00 e1 16 97 31 09 00 61		MIDI_INSTRUMENT_CHOIR      .text $00, $E1, $16, $97, $31, $09, $00, $61, $00, $62, $39, $00
>3929ce	00 62 39 00
>3929d2	00 22 c3 79 45 01 00 21		MIDI_INSTRUMENT_OOHS       .text $00, $22, $C3, $79, $45, $01, $00, $21, $00, $66, $27, $00
>3929da	00 66 27 00
>3929de	00 21 de 63 55 01 01 21		MIDI_INSTRUMENT_SYNVOX     .text $00, $21, $DE, $63, $55, $01, $01, $21, $00, $73, $46, $00
>3929e6	00 73 46 00
>3929ea	00 42 05 86 f7 0a 00 50		MIDI_INSTRUMENT_ORCHIT     .text $00, $42, $05, $86, $F7, $0A, $00, $50, $00, $74, $76, $01
>3929f2	00 74 76 01
>3929f6	00 31 1c 61 02 0f 00 61		MIDI_INSTRUMENT_TRUMPET    .text $00, $31, $1C, $61, $02, $0F, $00, $61, $81, $92, $38, $00
>3929fe	81 92 38 00
>392a02	00 71 1e 52 23 0f 00 61		MIDI_INSTRUMENT_TROMBONE   .text $00, $71, $1E, $52, $23, $0F, $00, $61, $02, $71, $19, $00
>392a0a	02 71 19 00
>392a0e	00 21 1a 76 16 0f 00 21		MIDI_INSTRUMENT_TUBA       .text $00, $21, $1A, $76, $16, $0F, $00, $21, $01, $81, $09, $00
>392a16	01 81 09 00
>392a1a	00 25 28 89 2c 07 02 20		MIDI_INSTRUMENT_MUTETRP    .text $00, $25, $28, $89, $2C, $07, $02, $20, $00, $83, $4B, $02
>392a22	00 83 4b 02
>392a26	00 21 1f 79 16 09 00 a2		MIDI_INSTRUMENT_FRHORN     .text $00, $21, $1F, $79, $16, $09, $00, $A2, $05, $71, $59, $00
>392a2e	05 71 59 00
>392a32	00 21 19 87 16 0f 00 21		MIDI_INSTRUMENT_BRASS1     .text $00, $21, $19, $87, $16, $0F, $00, $21, $03, $82, $39, $00
>392a3a	03 82 39 00
>392a3e	00 21 17 75 35 0f 00 22		MIDI_INSTRUMENT_SYNBRAS1   .text $00, $21, $17, $75, $35, $0F, $00, $22, $82, $84, $17, $00
>392a46	82 84 17 00
>392a4a	00 21 22 62 58 0f 00 21		MIDI_INSTRUMENT_SYNBRAS2   .text $00, $21, $22, $62, $58, $0F, $00, $21, $02, $72, $16, $00
>392a52	02 72 16 00
>392a56	00 b1 1b 59 07 01 01 a1		MIDI_INSTRUMENT_SOPSAX     .text $00, $B1, $1B, $59, $07, $01, $01, $A1, $00, $7B, $0A, $00
>392a5e	00 7b 0a 00
>392a62	00 21 16 9f 04 0b 00 21		MIDI_INSTRUMENT_ALTOSAX    .text $00, $21, $16, $9F, $04, $0B, $00, $21, $00, $85, $0C, $01
>392a6a	00 85 0c 01
>392a6e	00 21 0f a8 20 0d 00 23		MIDI_INSTRUMENT_TENSAX     .text $00, $21, $0F, $A8, $20, $0D, $00, $23, $00, $7B, $0A, $01
>392a76	00 7b 0a 01
>392a7a	00 21 0f 88 04 09 00 26		MIDI_INSTRUMENT_BARISAX    .text $00, $21, $0F, $88, $04, $09, $00, $26, $00, $79, $18, $01
>392a82	00 79 18 01
>392a86	00 31 18 8f 05 01 00 32		MIDI_INSTRUMENT_OBOE       .text $00, $31, $18, $8F, $05, $01, $00, $32, $01, $73, $08, $00
>392a8e	01 73 08 00
>392a92	00 a1 0a 8c 37 01 01 24		MIDI_INSTRUMENT_ENGLHORN   .text $00, $A1, $0A, $8C, $37, $01, $01, $24, $04, $77, $0A, $00
>392a9a	04 77 0a 00
>392a9e	00 31 04 a8 67 0b 00 75		MIDI_INSTRUMENT_BASSOON    .text $00, $31, $04, $A8, $67, $0B, $00, $75, $00, $51, $19, $00
>392aa6	00 51 19 00
>392aaa	00 a2 1f 77 26 01 01 21		MIDI_INSTRUMENT_CLARINET   .text $00, $A2, $1F, $77, $26, $01, $01, $21, $01, $74, $09, $00
>392ab2	01 74 09 00
>392ab6	00 e1 07 b8 94 01 01 21		MIDI_INSTRUMENT_PICCOLO    .text $00, $E1, $07, $B8, $94, $01, $01, $21, $01, $63, $28, $00
>392abe	01 63 28 00
>392ac2	00 a1 93 87 59 01 00 e1		MIDI_INSTRUMENT_FLUTE1     .text $00, $A1, $93, $87, $59, $01, $00, $E1, $00, $65, $0A, $00
>392aca	00 65 0a 00
>392ace	00 22 10 9f 38 01 00 61		MIDI_INSTRUMENT_RECORDER   .text $00, $22, $10, $9F, $38, $01, $00, $61, $00, $67, $29, $00
>392ad6	00 67 29 00
>392ada	00 e2 0d 88 9a 01 01 21		MIDI_INSTRUMENT_PANFLUTE   .text $00, $E2, $0D, $88, $9A, $01, $01, $21, $00, $67, $09, $00
>392ae2	00 67 09 00
>392ae6	00 a2 10 98 94 0f 00 21		MIDI_INSTRUMENT_BOTTLEB    .text $00, $A2, $10, $98, $94, $0F, $00, $21, $01, $6A, $28, $00
>392aee	01 6a 28 00
>392af2	00 f1 1c 86 26 0f 00 f1		MIDI_INSTRUMENT_SHAKU      .text $00, $F1, $1C, $86, $26, $0F, $00, $F1, $00, $55, $27, $00
>392afa	00 55 27 00
>392afe	00 e1 3f 9f 09 00 00 e1		MIDI_INSTRUMENT_WHISTLE    .text $00, $E1, $3F, $9F, $09, $00, $00, $E1, $00, $6F, $08, $00
>392b06	00 6f 08 00
>392b0a	00 e2 3b f7 19 01 00 21		MIDI_INSTRUMENT_OCARINA    .text $00, $E2, $3B, $F7, $19, $01, $00, $21, $00, $7A, $07, $00
>392b12	00 7a 07 00
>392b16	00 22 1e 92 0c 0f 00 61		MIDI_INSTRUMENT_SQUARWAV   .text $00, $22, $1E, $92, $0C, $0F, $00, $61, $06, $A2, $0D, $00
>392b1e	06 a2 0d 00
>392b22	00 21 15 f4 22 0f 01 21		MIDI_INSTRUMENT_SAWWAV     .text $00, $21, $15, $F4, $22, $0F, $01, $21, $00, $A3, $5F, $00
>392b2a	00 a3 5f 00
>392b2e	00 f2 20 47 66 03 01 f1		MIDI_INSTRUMENT_SYNCALLI   .text $00, $F2, $20, $47, $66, $03, $01, $F1, $00, $42, $27, $00
>392b36	00 42 27 00
>392b3a	00 61 19 88 28 0f 00 61		MIDI_INSTRUMENT_CHIFLEAD   .text $00, $61, $19, $88, $28, $0F, $00, $61, $05, $B2, $49, $00
>392b42	05 b2 49 00
>392b46	00 21 16 82 1b 01 00 23		MIDI_INSTRUMENT_CHARANG    .text $00, $21, $16, $82, $1B, $01, $00, $23, $00, $B2, $79, $01
>392b4e	00 b2 79 01
>392b52	00 21 00 ca 93 01 00 22		MIDI_INSTRUMENT_SOLOVOX    .text $00, $21, $00, $CA, $93, $01, $00, $22, $00, $7A, $1A, $00
>392b5a	00 7a 1a 00
>392b5e	00 23 00 92 c9 08 01 22		MIDI_INSTRUMENT_FIFTHSAW   .text $00, $23, $00, $92, $C9, $08, $01, $22, $00, $82, $28, $01
>392b66	00 82 28 01
>392b6a	00 21 1d f3 7b 0f 00 22		MIDI_INSTRUMENT_BASSLEAD   .text $00, $21, $1D, $F3, $7B, $0F, $00, $22, $02, $C3, $5F, $00
>392b72	02 c3 5f 00
>392b76	00 e1 00 81 25 00 01 a6		MIDI_INSTRUMENT_FANTASIA   .text $00, $E1, $00, $81, $25, $00, $01, $A6, $86, $C4, $95, $01
>392b7e	86 c4 95 01
>392b82	00 21 27 31 01 0f 00 21		MIDI_INSTRUMENT_WARMPAD    .text $00, $21, $27, $31, $01, $0F, $00, $21, $00, $44, $15, $00
>392b8a	00 44 15 00
>392b8e	00 60 14 83 35 0d 02 61		MIDI_INSTRUMENT_POLYSYN    .text $00, $60, $14, $83, $35, $0D, $02, $61, $00, $D1, $06, $00
>392b96	00 d1 06 00
>392b9a	00 e1 5c d3 01 01 01 62		MIDI_INSTRUMENT_SPACEVOX   .text $00, $E1, $5C, $D3, $01, $01, $01, $62, $00, $82, $37, $00
>392ba2	00 82 37 00
>392ba6	00 28 38 34 86 01 02 21		MIDI_INSTRUMENT_BOWEDGLS   .text $00, $28, $38, $34, $86, $01, $02, $21, $00, $41, $35, $00
>392bae	00 41 35 00
>392bb2	00 24 12 52 f3 05 01 23		MIDI_INSTRUMENT_METALPAD   .text $00, $24, $12, $52, $F3, $05, $01, $23, $02, $32, $F5, $01
>392bba	02 32 f5 01
>392bbe	00 61 1d 62 a6 0b 00 a1		MIDI_INSTRUMENT_HALOPAD    .text $00, $61, $1D, $62, $A6, $0B, $00, $A1, $00, $61, $26, $00
>392bc6	00 61 26 00
>392bca	00 22 0f 22 d5 0b 01 21		MIDI_INSTRUMENT_SWEEPPAD   .text $00, $22, $0F, $22, $D5, $0B, $01, $21, $84, $3F, $05, $01
>392bd2	84 3f 05 01
>392bd6	00 e3 1f f9 24 01 00 31		MIDI_INSTRUMENT_ICERAIN    .text $00, $E3, $1F, $F9, $24, $01, $00, $31, $01, $D1, $F6, $00
>392bde	01 d1 f6 00
>392be2	00 63 00 41 55 06 01 a2		MIDI_INSTRUMENT_SOUNDTRK   .text $00, $63, $00, $41, $55, $06, $01, $A2, $00, $41, $05, $01
>392bea	00 41 05 01
>392bee	00 c7 25 a7 65 01 01 c1		MIDI_INSTRUMENT_CRYSTAL    .text $00, $C7, $25, $A7, $65, $01, $01, $C1, $05, $F3, $E4, $00
>392bf6	05 f3 e4 00
>392bfa	00 e3 19 f7 b7 01 01 61		MIDI_INSTRUMENT_ATMOSPH    .text $00, $E3, $19, $F7, $B7, $01, $01, $61, $00, $92, $F5, $01
>392c02	00 92 f5 01
>392c06	00 66 9b a8 44 0f 00 41		MIDI_INSTRUMENT_BRIGHT     .text $00, $66, $9B, $A8, $44, $0F, $00, $41, $04, $F2, $E4, $01
>392c0e	04 f2 e4 01
>392c12	00 61 20 22 75 0d 00 61		MIDI_INSTRUMENT_GOBLIN     .text $00, $61, $20, $22, $75, $0D, $00, $61, $00, $45, $25, $00
>392c1a	00 45 25 00
>392c1e	00 e1 21 f6 84 0f 00 e1		MIDI_INSTRUMENT_ECHODROP   .text $00, $E1, $21, $F6, $84, $0F, $00, $E1, $01, $A3, $36, $00
>392c26	01 a3 36 00
>392c2a	00 e2 14 73 64 0b 01 e1		MIDI_INSTRUMENT_STARTHEM   .text $00, $E2, $14, $73, $64, $0B, $01, $E1, $01, $98, $05, $01
>392c32	01 98 05 01
>392c36	00 21 0b 72 34 09 00 24		MIDI_INSTRUMENT_SITAR      .text $00, $21, $0B, $72, $34, $09, $00, $24, $02, $A3, $F6, $01
>392c3e	02 a3 f6 01
>392c42	00 21 16 f4 53 0d 00 04		MIDI_INSTRUMENT_BANJO      .text $00, $21, $16, $F4, $53, $0D, $00, $04, $00, $F6, $F8, $00
>392c4a	00 f6 f8 00
>392c4e	00 21 18 da 02 0d 00 35		MIDI_INSTRUMENT_SHAMISEN   .text $00, $21, $18, $DA, $02, $0D, $00, $35, $00, $F3, $F5, $00
>392c56	00 f3 f5 00
>392c5a	00 25 0f fa 63 09 00 02		MIDI_INSTRUMENT_KOTO       .text $00, $25, $0F, $FA, $63, $09, $00, $02, $00, $94, $E5, $01
>392c62	00 94 e5 01
>392c66	00 32 07 f9 96 01 00 11		MIDI_INSTRUMENT_KALIMBA    .text $00, $32, $07, $F9, $96, $01, $00, $11, $00, $84, $44, $00
>392c6e	00 84 44 00
>392c72	00 20 0e 97 18 09 02 25		MIDI_INSTRUMENT_BAGPIPE    .text $00, $20, $0E, $97, $18, $09, $02, $25, $03, $83, $18, $01
>392c7a	03 83 18 01
>392c7e	00 61 18 f6 29 01 00 62		MIDI_INSTRUMENT_FIDDLE     .text $00, $61, $18, $F6, $29, $01, $00, $62, $01, $78, $08, $01
>392c86	01 78 08 01
>392c8a	00 e6 21 76 19 0b 00 61		MIDI_INSTRUMENT_SHANNAI    .text $00, $E6, $21, $76, $19, $0B, $00, $61, $03, $8E, $08, $01
>392c92	03 8e 08 01
>392c96	00 27 23 f0 d4 01 00 05		MIDI_INSTRUMENT_TINKLBEL   .text $00, $27, $23, $F0, $D4, $01, $00, $05, $09, $F2, $46, $00
>392c9e	09 f2 46 00
>392ca2	00 1c 0c f9 31 0f 01 15		MIDI_INSTRUMENT_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>392caa	00 96 e8 01
>392cae	00 02 00 75 16 06 02 01		MIDI_INSTRUMENT_STEELDRM   .text $00, $02, $00, $75, $16, $06, $02, $01, $00, $F6, $F6, $01
>392cb6	00 f6 f6 01
>392cba	00 25 1b fa f2 01 00 12		MIDI_INSTRUMENT_WOODBLOK   .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>392cc2	00 f6 9a 00
>392cc6	00 02 1d f5 93 01 00 00		MIDI_INSTRUMENT_TAIKO      .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>392cce	00 c6 45 00
>392cd2	00 11 15 f5 32 05 00 10		MIDI_INSTRUMENT_MELOTOM    .text $00, $11, $15, $F5, $32, $05, $00, $10, $00, $F4, $B4, $00
>392cda	00 f4 b4 00
>392cde	00 22 06 fa 99 09 00 01		MIDI_INSTRUMENT_SYNDRUM    .text $00, $22, $06, $FA, $99, $09, $00, $01, $00, $D5, $25, $00
>392ce6	00 d5 25 00
>392cea	00 2e 00 ff 00 0f 02 0e		MIDI_INSTRUMENT_REVRSCYM   .text $00, $2E, $00, $FF, $00, $0F, $02, $0E, $0E, $21, $2D, $00
>392cf2	0e 21 2d 00
>392cf6	00 30 0b 56 e4 01 01 17		MIDI_INSTRUMENT_FRETNOIS   .text $00, $30, $0B, $56, $E4, $01, $01, $17, $00, $55, $87, $02
>392cfe	00 55 87 02
>392d02	00 24 00 ff 03 0d 00 05		MIDI_INSTRUMENT_BRTHNOIS   .text $00, $24, $00, $FF, $03, $0D, $00, $05, $08, $98, $87, $01
>392d0a	08 98 87 01
>392d0e	00 0e 00 f0 00 0f 02 0a		MIDI_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F0, $00, $0F, $02, $0A, $04, $17, $04, $03
>392d16	04 17 04 03
>392d1a	00 20 08 f6 f7 01 00 0e		MIDI_INSTRUMENT_BIRDS      .text $00, $20, $08, $F6, $F7, $01, $00, $0E, $05, $77, $F9, $02
>392d22	05 77 f9 02
>392d26	00 20 14 f1 08 01 00 2e		MIDI_INSTRUMENT_TELEPHON   .text $00, $20, $14, $F1, $08, $01, $00, $2E, $02, $F4, $08, $00
>392d2e	02 f4 08 00
>392d32	00 20 04 f2 00 03 01 23		MIDI_INSTRUMENT_HELICOPT   .text $00, $20, $04, $F2, $00, $03, $01, $23, $00, $36, $05, $01
>392d3a	00 36 05 01
>392d3e	00 2e 00 ff 02 0f 00 2a		MIDI_INSTRUMENT_APPLAUSE   .text $00, $2E, $00, $FF, $02, $0F, $00, $2A, $05, $32, $55, $03
>392d46	05 32 55 03
>392d4a	00 20 00 a1 ef 0f 00 10		MIDI_INSTRUMENT_GUNSHOT    .text $00, $20, $00, $A1, $EF, $0F, $00, $10, $00, $F3, $DF, $00
>392d52	00 f3 df 00
>392d56	56 27 39 00 62 27 39 00		midiInstruments .dword MIDI_INSTRUMENT_PIANO1,   MIDI_INSTRUMENT_PIANO2,   MIDI_INSTRUMENT_PIANO3,   MIDI_INSTRUMENT_HONKTONK, MIDI_INSTRUMENT_EP1,      MIDI_INSTRUMENT_EP2
>392d5e	6e 27 39 00 7a 27 39 00 86 27 39 00 92 27 39 00
>392d6e	9e 27 39 00 aa 27 39 00		              	.dword MIDI_INSTRUMENT_HARPSIC,  MIDI_INSTRUMENT_CLAVIC,   MIDI_INSTRUMENT_CELESTA,  MIDI_INSTRUMENT_GLOCK,    MIDI_INSTRUMENT_MUSICBOX, MIDI_INSTRUMENT_VIBES
>392d76	b6 27 39 00 c2 27 39 00 ce 27 39 00 da 27 39 00
>392d86	e6 27 39 00 f2 27 39 00		              	.dword MIDI_INSTRUMENT_MARIMBA,  MIDI_INSTRUMENT_XYLO,     MIDI_INSTRUMENT_TUBEBELL, MIDI_INSTRUMENT_SANTUR,   MIDI_INSTRUMENT_ORGAN1,   MIDI_INSTRUMENT_ORGAN2
>392d8e	fe 27 39 00 0a 28 39 00 16 28 39 00 22 28 39 00
>392d9e	2e 28 39 00 3a 28 39 00		              	.dword MIDI_INSTRUMENT_ORGAN3,   MIDI_INSTRUMENT_PIPEORG,  MIDI_INSTRUMENT_REEDORG,  MIDI_INSTRUMENT_ACORDIAN, MIDI_INSTRUMENT_HARMONIC, MIDI_INSTRUMENT_BANDNEON
>392da6	46 28 39 00 52 28 39 00 5e 28 39 00 6a 28 39 00
>392db6	76 28 39 00 82 28 39 00		              	.dword MIDI_INSTRUMENT_NYLONGT,  MIDI_INSTRUMENT_STEELGT,  MIDI_INSTRUMENT_JAZZGT,   MIDI_INSTRUMENT_CLEANGT,  MIDI_INSTRUMENT_MUTEGT,   MIDI_INSTRUMENT_OVERDGT
>392dbe	8e 28 39 00 9a 28 39 00 a6 28 39 00 b2 28 39 00
>392dce	be 28 39 00 ca 28 39 00		              	.dword MIDI_INSTRUMENT_DISTGT,   MIDI_INSTRUMENT_GTHARMS,  MIDI_INSTRUMENT_ACOUBASS, MIDI_INSTRUMENT_FINGBASS, MIDI_INSTRUMENT_PICKBASS, MIDI_INSTRUMENT_FRETLESS
>392dd6	d6 28 39 00 e2 28 39 00 ee 28 39 00 fa 28 39 00
>392de6	06 29 39 00 12 29 39 00		              	.dword MIDI_INSTRUMENT_SLAPBAS1, MIDI_INSTRUMENT_SLAPBAS2, MIDI_INSTRUMENT_SYNBASS1, MIDI_INSTRUMENT_SYNBASS2, MIDI_INSTRUMENT_VIOLIN,   MIDI_INSTRUMENT_VIOLA
>392dee	1e 29 39 00 2a 29 39 00 36 29 39 00 42 29 39 00
>392dfe	4e 29 39 00 5a 29 39 00		              	.dword MIDI_INSTRUMENT_CELLO,    MIDI_INSTRUMENT_CONTRAB,  MIDI_INSTRUMENT_TREMSTR,  MIDI_INSTRUMENT_PIZZ,     MIDI_INSTRUMENT_HARP,     MIDI_INSTRUMENT_TIMPANI
>392e06	66 29 39 00 72 29 39 00 7e 29 39 00 8a 29 39 00
>392e16	96 29 39 00 a2 29 39 00		              	.dword MIDI_INSTRUMENT_STRINGS,  MIDI_INSTRUMENT_SLOWSTR,  MIDI_INSTRUMENT_SYNSTR1,  MIDI_INSTRUMENT_SYNSTR2,  MIDI_INSTRUMENT_CHOIR,    MIDI_INSTRUMENT_OOHS
>392e1e	ae 29 39 00 ba 29 39 00 c6 29 39 00 d2 29 39 00
>392e2e	de 29 39 00 ea 29 39 00		              	.dword MIDI_INSTRUMENT_SYNVOX,   MIDI_INSTRUMENT_ORCHIT,   MIDI_INSTRUMENT_TRUMPET,  MIDI_INSTRUMENT_TROMBONE, MIDI_INSTRUMENT_TUBA,     MIDI_INSTRUMENT_MUTETRP
>392e36	f6 29 39 00 02 2a 39 00 0e 2a 39 00 1a 2a 39 00
>392e46	26 2a 39 00 32 2a 39 00		              	.dword MIDI_INSTRUMENT_FRHORN,   MIDI_INSTRUMENT_BRASS1,   MIDI_INSTRUMENT_SYNBRAS1, MIDI_INSTRUMENT_SYNBRAS2, MIDI_INSTRUMENT_SOPSAX,   MIDI_INSTRUMENT_ALTOSAX
>392e4e	3e 2a 39 00 4a 2a 39 00 56 2a 39 00 62 2a 39 00
>392e5e	6e 2a 39 00 7a 2a 39 00		              	.dword MIDI_INSTRUMENT_TENSAX,   MIDI_INSTRUMENT_BARISAX,  MIDI_INSTRUMENT_OBOE,     MIDI_INSTRUMENT_ENGLHORN, MIDI_INSTRUMENT_BASSOON,  MIDI_INSTRUMENT_CLARINET
>392e66	86 2a 39 00 92 2a 39 00 9e 2a 39 00 aa 2a 39 00
>392e76	b6 2a 39 00 c2 2a 39 00		              	.dword MIDI_INSTRUMENT_PICCOLO,  MIDI_INSTRUMENT_FLUTE1,   MIDI_INSTRUMENT_RECORDER, MIDI_INSTRUMENT_PANFLUTE, MIDI_INSTRUMENT_BOTTLEB,  MIDI_INSTRUMENT_SHAKU
>392e7e	ce 2a 39 00 da 2a 39 00 e6 2a 39 00 f2 2a 39 00
>392e8e	fe 2a 39 00 0a 2b 39 00		              	.dword MIDI_INSTRUMENT_WHISTLE,  MIDI_INSTRUMENT_OCARINA,  MIDI_INSTRUMENT_SQUARWAV, MIDI_INSTRUMENT_SAWWAV,   MIDI_INSTRUMENT_SYNCALLI, MIDI_INSTRUMENT_CHIFLEAD
>392e96	16 2b 39 00 22 2b 39 00 2e 2b 39 00 3a 2b 39 00
>392ea6	46 2b 39 00 52 2b 39 00		              	.dword MIDI_INSTRUMENT_CHARANG,  MIDI_INSTRUMENT_SOLOVOX,  MIDI_INSTRUMENT_FIFTHSAW, MIDI_INSTRUMENT_BASSLEAD, MIDI_INSTRUMENT_FANTASIA, MIDI_INSTRUMENT_WARMPAD
>392eae	5e 2b 39 00 6a 2b 39 00 76 2b 39 00 82 2b 39 00
>392ebe	8e 2b 39 00 9a 2b 39 00		              	.dword MIDI_INSTRUMENT_POLYSYN,  MIDI_INSTRUMENT_SPACEVOX, MIDI_INSTRUMENT_BOWEDGLS, MIDI_INSTRUMENT_METALPAD, MIDI_INSTRUMENT_HALOPAD,  MIDI_INSTRUMENT_SWEEPPAD
>392ec6	a6 2b 39 00 b2 2b 39 00 be 2b 39 00 ca 2b 39 00
>392ed6	d6 2b 39 00 e2 2b 39 00		              	.dword MIDI_INSTRUMENT_ICERAIN,  MIDI_INSTRUMENT_SOUNDTRK, MIDI_INSTRUMENT_CRYSTAL,  MIDI_INSTRUMENT_ATMOSPH,  MIDI_INSTRUMENT_BRIGHT,   MIDI_INSTRUMENT_GOBLIN
>392ede	ee 2b 39 00 fa 2b 39 00 06 2c 39 00 12 2c 39 00
>392eee	1e 2c 39 00 2a 2c 39 00		              	.dword MIDI_INSTRUMENT_ECHODROP, MIDI_INSTRUMENT_STARTHEM, MIDI_INSTRUMENT_SITAR,    MIDI_INSTRUMENT_BANJO,    MIDI_INSTRUMENT_SHAMISEN, MIDI_INSTRUMENT_KOTO
>392ef6	36 2c 39 00 42 2c 39 00 4e 2c 39 00 5a 2c 39 00
>392f06	66 2c 39 00 72 2c 39 00		              	.dword MIDI_INSTRUMENT_KALIMBA,  MIDI_INSTRUMENT_BAGPIPE,  MIDI_INSTRUMENT_FIDDLE,   MIDI_INSTRUMENT_SHANNAI,  MIDI_INSTRUMENT_TINKLBEL, MIDI_INSTRUMENT_AGOGO
>392f0e	7e 2c 39 00 8a 2c 39 00 96 2c 39 00 a2 2c 39 00
>392f1e	ae 2c 39 00 ba 2c 39 00		              	.dword MIDI_INSTRUMENT_STEELDRM, MIDI_INSTRUMENT_WOODBLOK, MIDI_INSTRUMENT_TAIKO,    MIDI_INSTRUMENT_MELOTOM,  MIDI_INSTRUMENT_SYNDRUM,  MIDI_INSTRUMENT_REVRSCYM
>392f26	c6 2c 39 00 d2 2c 39 00 de 2c 39 00 ea 2c 39 00
>392f36	f6 2c 39 00 02 2d 39 00		              	.dword MIDI_INSTRUMENT_FRETNOIS, MIDI_INSTRUMENT_BRTHNOIS, MIDI_INSTRUMENT_SEASHORE, MIDI_INSTRUMENT_BIRDS,    MIDI_INSTRUMENT_TELEPHON, MIDI_INSTRUMENT_HELICOPT
>392f3e	0e 2d 39 00 1a 2d 39 00 26 2d 39 00 32 2d 39 00
>392f4e	3e 2d 39 00 4a 2d 39 00		              	.dword MIDI_INSTRUMENT_APPLAUSE, MIDI_INSTRUMENT_GUNSHOT

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Instruments_Win31.asm

>392f56	00 01 8f f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO1     .text $00, $01, $8F, $F2, $F4, $38, $00, $01, $0D, $F2, $F7, $00
>392f5e	0d f2 f7 00
>392f62	00 01 4b f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO2     .text $00, $01, $4B, $F2, $F4, $38, $00, $01, $07, $F2, $F7, $00
>392f6a	07 f2 f7 00
>392f6e	00 01 49 f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO3     .text $00, $01, $49, $F2, $F4, $38, $00, $01, $07, $F2, $F6, $00
>392f76	07 f2 f6 00
>392f7a	00 81 12 f2 f7 00 00 41		MIDIW31_INSTRUMENT_HONKTONK   .text $00, $81, $12, $F2, $F7, $00, $00, $41, $07, $F2, $F7, $00
>392f82	07 f2 f7 00
>392f86	00 01 57 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP1        .text $00, $01, $57, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>392f8e	07 f2 f7 00
>392f92	00 01 93 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP2        .text $00, $01, $93, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>392f9a	07 f2 f7 00
>392f9e	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HARPSIC    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392fa6	00 00 00 00
>392faa	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLAVIC     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392fb2	00 00 00 00
>392fb6	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELESTA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392fbe	00 00 00 00
>392fc2	00 07 97 f3 f2 32 00 11		MIDIW31_INSTRUMENT_GLOCK      .text $00, $07, $97, $F3, $F2, $32, $00, $11, $87, $F2, $F1, $00
>392fca	87 f2 f1 00
>392fce	00 17 21 54 f4 32 00 01		MIDIW31_INSTRUMENT_MUSICBOX   .text $00, $17, $21, $54, $F4, $32, $00, $01, $07, $F4, $F4, $00
>392fd6	07 f4 f4 00
>392fda	00 98 62 f3 f6 30 00 81		MIDIW31_INSTRUMENT_VIBES      .text $00, $98, $62, $F3, $F6, $30, $00, $81, $07, $F2, $F6, $00
>392fe2	07 f2 f6 00
>392fe6	00 18 23 f6 f6 00 00 01		MIDIW31_INSTRUMENT_MARIMBA    .text $00, $18, $23, $F6, $F6, $00, $00, $01, $07, $E7, $F7, $00
>392fee	07 e7 f7 00
>392ff2	00 15 91 f6 f6 00 00 01		MIDIW31_INSTRUMENT_XYLO       .text $00, $15, $91, $F6, $F6, $00, $00, $01, $07, $F6, $F6, $00
>392ffa	07 f6 f6 00
>392ffe	00 45 59 d3 f3 00 00 81		MIDIW31_INSTRUMENT_TUBEBELL   .text $00, $45, $59, $D3, $F3, $00, $00, $81, $87, $A3, $F3, $00
>393006	87 a3 f3 00
>39300a	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SANTUR     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393012	00 00 00 00
>393016	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39301e	00 00 00 00
>393022	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN2     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39302a	00 00 00 00
>39302e	00 70 44 aa 18 34 00 b1		MIDIW31_INSTRUMENT_ORGAN3     .text $00, $70, $44, $AA, $18, $34, $00, $B1, $07, $8A, $08, $00
>393036	07 8a 08 00
>39303a	00 23 93 97 23 34 01 b1		MIDIW31_INSTRUMENT_PIPEORG    .text $00, $23, $93, $97, $23, $34, $01, $B1, $07, $55, $14, $00
>393042	07 55 14 00
>393046	00 61 13 97 04 30 01 b1		MIDIW31_INSTRUMENT_REEDORG    .text $00, $61, $13, $97, $04, $30, $01, $B1, $87, $55, $04, $00
>39304e	87 55 04 00
>393052	00 24 48 98 2a 30 01 b1		MIDIW31_INSTRUMENT_ACORDIAN   .text $00, $24, $48, $98, $2A, $30, $01, $B1, $07, $46, $1A, $00
>39305a	07 46 1a 00
>39305e	00 61 13 91 06 00 01 21		MIDIW31_INSTRUMENT_HARMONIC   .text $00, $61, $13, $91, $06, $00, $01, $21, $07, $61, $07, $00
>393066	07 61 07 00
>39306a	00 21 13 71 06 00 00 a1		MIDIW31_INSTRUMENT_BANDNEON   .text $00, $21, $13, $71, $06, $00, $00, $A1, $90, $61, $07, $00
>393072	90 61 07 00
>393076	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_NYLONGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39307e	00 00 00 00
>393082	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39308a	00 00 00 00
>39308e	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_JAZZGT     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393096	00 00 00 00
>39309a	00 03 87 f6 22 36 01 21		MIDIW31_INSTRUMENT_CLEANGT    .text $00, $03, $87, $F6, $22, $36, $01, $21, $87, $F3, $F8, $00
>3930a2	87 f3 f8 00
>3930a6	00 03 47 f9 54 30 00 21		MIDIW31_INSTRUMENT_MUTEGT     .text $00, $03, $47, $F9, $54, $30, $00, $21, $07, $F6, $3A, $00
>3930ae	07 f6 3a 00
>3930b2	00 23 4a 91 41 38 01 21		MIDIW31_INSTRUMENT_OVERDGT    .text $00, $23, $4A, $91, $41, $38, $01, $21, $0C, $84, $19, $00
>3930ba	0c 84 19 00
>3930be	00 23 4a 95 19 32 01 21		MIDIW31_INSTRUMENT_DISTGT     .text $00, $23, $4A, $95, $19, $32, $01, $21, $07, $94, $19, $00
>3930c6	07 94 19 00
>3930ca	00 09 a1 20 4f 00 00 84		MIDIW31_INSTRUMENT_GTHARMS    .text $00, $09, $A1, $20, $4F, $00, $00, $84, $87, $D1, $F8, $00
>3930d2	87 d1 f8 00
>3930d6	00 21 1e 94 06 00 00 a2		MIDIW31_INSTRUMENT_ACOUBASS   .text $00, $21, $1E, $94, $06, $00, $00, $A2, $07, $C3, $A6, $00
>3930de	07 c3 a6 00
>3930e2	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FINGBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3930ea	00 00 00 00
>3930ee	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_PICKBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3930f6	00 00 00 00
>3930fa	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRETLESS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393102	00 00 00 00
>393106	00 01 8b a1 9a 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS1   .text $00, $01, $8B, $A1, $9A, $38, $00, $21, $47, $F2, $DF, $00
>39310e	47 f2 df 00
>393112	00 21 8b a2 16 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS2   .text $00, $21, $8B, $A2, $16, $38, $00, $21, $0F, $A1, $DF, $00
>39311a	0f a1 df 00
>39311e	00 31 8b f4 e8 3a 00 31		MIDIW31_INSTRUMENT_SYNBASS1   .text $00, $31, $8B, $F4, $E8, $3A, $00, $31, $07, $F1, $78, $00
>393126	07 f1 78 00
>39312a	00 31 12 f1 28 30 00 31		MIDIW31_INSTRUMENT_SYNBASS2   .text $00, $31, $12, $F1, $28, $30, $00, $31, $07, $F1, $18, $00
>393132	07 f1 18 00
>393136	00 31 15 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLIN     .text $00, $31, $15, $DD, $13, $00, $01, $21, $07, $56, $26, $00
>39313e	07 56 26 00
>393142	00 31 16 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLA      .text $00, $31, $16, $DD, $13, $00, $01, $21, $07, $66, $06, $00
>39314a	07 66 06 00
>39314e	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELLO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393156	00 00 00 00
>39315a	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CONTRAB    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393162	00 00 00 00
>393166	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TREMSTR    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39316e	00 00 00 00
>393172	00 02 1a f5 75 30 01 01		MIDIW31_INSTRUMENT_PIZZ       .text $00, $02, $1A, $F5, $75, $30, $01, $01, $87, $85, $35, $00
>39317a	87 85 35 00
>39317e	00 02 1d f5 75 30 01 01		MIDIW31_INSTRUMENT_HARP       .text $00, $02, $1D, $F5, $75, $30, $01, $01, $87, $F3, $F4, $00
>393186	87 f3 f4 00
>39318a	00 10 41 f5 05 32 01 11		MIDIW31_INSTRUMENT_TIMPANI    .text $00, $10, $41, $F5, $05, $32, $01, $11, $07, $F2, $C3, $00
>393192	07 f2 c3 00
>393196	00 21 9b b1 25 3c 01 a2		MIDIW31_INSTRUMENT_STRINGS    .text $00, $21, $9B, $B1, $25, $3C, $01, $A2, $08, $72, $08, $00
>39319e	08 72 08 00
>3931a2	00 a1 98 7f 03 00 01 21		MIDIW31_INSTRUMENT_SLOWSTR    .text $00, $A1, $98, $7F, $03, $00, $01, $21, $07, $3F, $07, $01
>3931aa	07 3f 07 01
>3931ae	00 a1 93 c1 12 00 00 61		MIDIW31_INSTRUMENT_SYNSTR1    .text $00, $A1, $93, $C1, $12, $00, $00, $61, $07, $4F, $05, $00
>3931b6	07 4f 05 00
>3931ba	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNSTR2    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3931c2	00 00 00 00
>3931c6	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CHOIR      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3931ce	00 00 00 00
>3931d2	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OOHS       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3931da	00 00 00 00
>3931de	00 71 57 54 05 3c 00 72		MIDIW31_INSTRUMENT_SYNVOX     .text $00, $71, $57, $54, $05, $3C, $00, $72, $07, $7A, $05, $00
>3931e6	07 7a 05 00
>3931ea	00 90 00 54 63 38 00 41		MIDIW31_INSTRUMENT_ORCHIT     .text $00, $90, $00, $54, $63, $38, $00, $41, $07, $A5, $45, $00
>3931f2	07 a5 45 00
>3931f6	00 21 92 85 17 3c 00 21		MIDIW31_INSTRUMENT_TRUMPET    .text $00, $21, $92, $85, $17, $3C, $00, $21, $08, $8F, $09, $00
>3931fe	08 8f 09 00
>393202	00 21 94 75 17 32 00 21		MIDIW31_INSTRUMENT_TROMBONE   .text $00, $21, $94, $75, $17, $32, $00, $21, $0C, $8F, $09, $00
>39320a	0c 8f 09 00
>39320e	00 21 94 76 15 00 00 61		MIDIW31_INSTRUMENT_TUBA       .text $00, $21, $94, $76, $15, $00, $00, $61, $07, $82, $37, $00
>393216	07 82 37 00
>39321a	00 31 43 9e 17 00 01 21		MIDIW31_INSTRUMENT_MUTETRP    .text $00, $31, $43, $9E, $17, $00, $01, $21, $07, $62, $2C, $01
>393222	07 62 2c 01
>393226	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRHORN     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39322e	00 00 00 00
>393232	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BRASS1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39323a	00 00 00 00
>39323e	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNBRAS1   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393246	00 00 00 00
>39324a	00 21 4d 54 3c 38 00 21		MIDIW31_INSTRUMENT_SYNBRAS2   .text $00, $21, $4D, $54, $3C, $38, $00, $21, $07, $A6, $1C, $00
>393252	07 a6 1c 00
>393256	00 31 8f 93 02 38 01 61		MIDIW31_INSTRUMENT_SOPSAX     .text $00, $31, $8F, $93, $02, $38, $01, $61, $07, $72, $0B, $00
>39325e	07 72 0b 00
>393262	00 31 8e 93 03 38 01 61		MIDIW31_INSTRUMENT_ALTOSAX    .text $00, $31, $8E, $93, $03, $38, $01, $61, $07, $72, $09, $00
>39326a	07 72 09 00
>39326e	00 31 91 93 03 30 01 61		MIDIW31_INSTRUMENT_TENSAX     .text $00, $31, $91, $93, $03, $30, $01, $61, $07, $82, $09, $00
>393276	07 82 09 00
>39327a	00 31 8e 93 0f 00 01 61		MIDIW31_INSTRUMENT_BARISAX    .text $00, $31, $8E, $93, $0F, $00, $01, $61, $07, $72, $0F, $00
>393282	07 72 0f 00
>393286	00 21 4b aa 16 00 01 21		MIDIW31_INSTRUMENT_OBOE       .text $00, $21, $4B, $AA, $16, $00, $01, $21, $07, $8F, $0A, $00
>39328e	07 8f 0a 00
>393292	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ENGLHORN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39329a	00 00 00 00
>39329e	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSOON    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3932a6	00 00 00 00
>3932aa	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLARINET   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3932b2	00 00 00 00
>3932b6	00 e1 1f 85 5f 30 00 e1		MIDIW31_INSTRUMENT_PICCOLO    .text $00, $E1, $1F, $85, $5F, $30, $00, $E1, $07, $65, $1A, $00
>3932be	07 65 1a 00
>3932c2	00 e1 46 88 5f 30 00 e1		MIDIW31_INSTRUMENT_FLUTE1     .text $00, $E1, $46, $88, $5F, $30, $00, $E1, $07, $65, $1A, $00
>3932ca	07 65 1a 00
>3932ce	00 a1 9c 75 1f 32 00 21		MIDIW31_INSTRUMENT_RECORDER   .text $00, $A1, $9C, $75, $1F, $32, $00, $21, $07, $75, $0A, $00
>3932d6	07 75 0a 00
>3932da	00 31 8b 84 58 30 00 21		MIDIW31_INSTRUMENT_PANFLUTE   .text $00, $31, $8B, $84, $58, $30, $00, $21, $07, $65, $1A, $00
>3932e2	07 65 1a 00
>3932e6	00 e1 4c 66 56 00 00 a1		MIDIW31_INSTRUMENT_BOTTLEB    .text $00, $E1, $4C, $66, $56, $00, $00, $A1, $07, $65, $26, $00
>3932ee	07 65 26 00
>3932f2	00 62 cb 76 46 00 00 a1		MIDIW31_INSTRUMENT_SHAKU      .text $00, $62, $CB, $76, $46, $00, $00, $A1, $07, $55, $36, $00
>3932fa	07 55 36 00
>3932fe	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WHISTLE    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393306	00 00 00 00
>39330a	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OCARINA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393312	00 00 00 00
>393316	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SQUARWAV   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39331e	00 00 00 00
>393322	00 21 0e ff 0f 30 01 21		MIDIW31_INSTRUMENT_SAWWAV     .text $00, $21, $0E, $FF, $0F, $30, $01, $21, $07, $FF, $0F, $01
>39332a	07 ff 0f 01
>39332e	00 22 46 86 55 30 00 21		MIDIW31_INSTRUMENT_SYNCALLI   .text $00, $22, $46, $86, $55, $30, $00, $21, $87, $64, $18, $00
>393336	87 64 18 00
>39333a	00 21 45 66 12 30 00 a1		MIDIW31_INSTRUMENT_CHIFLEAD   .text $00, $21, $45, $66, $12, $30, $00, $A1, $07, $96, $0A, $00
>393342	07 96 0a 00
>393346	00 21 8b 92 2a 34 01 22		MIDIW31_INSTRUMENT_CHARANG    .text $00, $21, $8B, $92, $2A, $34, $01, $22, $07, $91, $2A, $00
>39334e	07 91 2a 00
>393352	00 a2 9e df 05 00 00 61		MIDIW31_INSTRUMENT_SOLOVOX    .text $00, $A2, $9E, $DF, $05, $00, $00, $61, $47, $6F, $07, $00
>39335a	47 6f 07 00
>39335e	00 20 1a ef 01 00 00 60		MIDIW31_INSTRUMENT_FIFTHSAW   .text $00, $20, $1A, $EF, $01, $00, $00, $60, $07, $8F, $06, $02
>393366	07 8f 06 02
>39336a	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSLEAD   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393372	00 00 00 00
>393376	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FANTASIA   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39337e	00 00 00 00
>393382	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WARMPAD    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39338a	00 00 00 00
>39338e	00 61 17 91 34 3c 00 61		MIDIW31_INSTRUMENT_POLYSYN    .text $00, $61, $17, $91, $34, $3C, $00, $61, $07, $55, $16, $00
>393396	07 55 16 00
>39339a	00 71 5d 54 01 30 00 72		MIDIW31_INSTRUMENT_SPACEVOX   .text $00, $71, $5D, $54, $01, $30, $00, $72, $07, $6A, $03, $00
>3933a2	07 6a 03 00
>3933a6	00 21 97 21 43 38 00 a2		MIDIW31_INSTRUMENT_BOWEDGLS   .text $00, $21, $97, $21, $43, $38, $00, $A2, $07, $42, $35, $00
>3933ae	07 42 35 00
>3933b2	00 a1 1c a1 77 30 01 21		MIDIW31_INSTRUMENT_METALPAD   .text $00, $A1, $1C, $A1, $77, $30, $01, $21, $07, $31, $47, $01
>3933ba	07 31 47 01
>3933be	00 21 89 11 33 00 00 61		MIDIW31_INSTRUMENT_HALOPAD    .text $00, $21, $89, $11, $33, $00, $00, $61, $0A, $42, $25, $00
>3933c6	0a 42 25 00
>3933ca	00 a1 15 11 47 00 01 21		MIDIW31_INSTRUMENT_SWEEPPAD   .text $00, $A1, $15, $11, $47, $00, $01, $21, $07, $CF, $07, $00
>3933d2	07 cf 07 00
>3933d6	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ICERAIN    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3933de	00 00 00 00
>3933e2	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SOUNDTRK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3933ea	00 00 00 00
>3933ee	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CRYSTAL    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3933f6	00 00 00 00
>3933fa	00 22 92 b1 81 3c 00 61		MIDIW31_INSTRUMENT_ATMOSPH    .text $00, $22, $92, $B1, $81, $3C, $00, $61, $8A, $F2, $26, $00
>393402	8a f2 26 00
>393406	00 41 4d f1 51 30 01 42		MIDIW31_INSTRUMENT_BRIGHT     .text $00, $41, $4D, $F1, $51, $30, $01, $42, $07, $F2, $F5, $00
>39340e	07 f2 f5 00
>393412	00 61 94 11 51 36 01 a3		MIDIW31_INSTRUMENT_GOBLIN     .text $00, $61, $94, $11, $51, $36, $01, $A3, $87, $11, $13, $00
>39341a	87 11 13 00
>39341e	00 61 8c 11 31 3a 00 a1		MIDIW31_INSTRUMENT_ECHODROP   .text $00, $61, $8C, $11, $31, $3A, $00, $A1, $87, $1D, $03, $00
>393426	87 1d 03 00
>39342a	00 a4 4c f3 73 00 01 61		MIDIW31_INSTRUMENT_STARTHEM   .text $00, $A4, $4C, $F3, $73, $00, $01, $61, $07, $81, $23, $00
>393432	07 81 23 00
>393436	00 02 85 d2 53 00 00 07		MIDIW31_INSTRUMENT_SITAR      .text $00, $02, $85, $D2, $53, $00, $00, $07, $0A, $F2, $F6, $01
>39343e	0a f2 f6 01
>393442	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BANJO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39344a	00 00 00 00
>39344e	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SHAMISEN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393456	00 00 00 00
>39345a	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_KOTO       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393462	00 00 00 00
>393466	00 04 4f fa 56 3c 00 01		MIDIW31_INSTRUMENT_KALIMBA    .text $00, $04, $4F, $FA, $56, $3C, $00, $01, $07, $C2, $05, $00
>39346e	07 c2 05 00
>393472	00 21 49 7c 20 36 00 22		MIDIW31_INSTRUMENT_BAGPIPE    .text $00, $21, $49, $7C, $20, $36, $00, $22, $07, $6F, $0C, $01
>39347a	07 6f 0c 01
>39347e	00 31 85 dd 33 3a 01 21		MIDIW31_INSTRUMENT_FIDDLE     .text $00, $31, $85, $DD, $33, $3A, $01, $21, $07, $56, $16, $00
>393486	07 56 16 00
>39348a	00 20 04 da 05 30 02 21		MIDIW31_INSTRUMENT_SHANNAI    .text $00, $20, $04, $DA, $05, $30, $02, $21, $88, $8F, $0B, $00
>393492	88 8f 0b 00
>393496	00 05 6a f1 e5 00 00 03		MIDIW31_INSTRUMENT_TINKLBEL   .text $00, $05, $6A, $F1, $E5, $00, $00, $03, $87, $C3, $E5, $00
>39349e	87 c3 e5 00
>3934a2	00 07 15 ec 26 00 00 02		MIDIW31_INSTRUMENT_AGOGO      .text $00, $07, $15, $EC, $26, $00, $00, $02, $07, $F8, $16, $00
>3934aa	07 f8 16 00
>3934ae	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELDRM   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3934b6	00 00 00 00
>3934ba	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WOODBLOK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3934c2	00 00 00 00
>3934c6	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TAIKO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3934ce	00 00 00 00
>3934d2	00 11 41 f8 47 34 02 10		MIDIW31_INSTRUMENT_MELOTOM    .text $00, $11, $41, $F8, $47, $34, $02, $10, $0A, $F3, $03, $00
>3934da	0a f3 03 00
>3934de	00 01 8e f1 06 3e 02 10		MIDIW31_INSTRUMENT_SYNDRUM    .text $00, $01, $8E, $F1, $06, $3E, $02, $10, $07, $F3, $02, $00
>3934e6	07 f3 02 00
>3934ea	00 0e 00 1f 00 3e 00 c0		MIDIW31_INSTRUMENT_REVRSCYM   .text $00, $0E, $00, $1F, $00, $3E, $00, $C0, $07, $1F, $FF, $03
>3934f2	07 1f ff 03
>3934f6	00 06 80 f8 24 38 00 03		MIDIW31_INSTRUMENT_FRETNOIS   .text $00, $06, $80, $F8, $24, $38, $00, $03, $8F, $56, $84, $02
>3934fe	8f 56 84 02
>393502	00 0e 00 f8 00 00 00 d0		MIDIW31_INSTRUMENT_BRTHNOIS   .text $00, $0E, $00, $F8, $00, $00, $00, $D0, $0C, $34, $04, $03
>39350a	0c 34 04 03
>39350e	00 0e 00 f6 00 00 00 c0		MIDIW31_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F6, $00, $00, $00, $C0, $07, $1F, $02, $03
>393516	07 1f 02 03
>39351a	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BIRDS      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393522	00 00 00 00
>393526	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TELEPHON   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39352e	00 00 00 00
>393532	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HELICOPT   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39353a	00 00 00 00
>39353e	00 26 00 ff 01 3e 00 e4		MIDIW31_INSTRUMENT_APPLAUSE   .text $00, $26, $00, $FF, $01, $3E, $00, $E4, $07, $12, $16, $01
>393546	07 12 16 01
>39354a	00 00 00 f3 f0 3e 00 00		MIDIW31_INSTRUMENT_GUNSHOT    .text $00, $00, $00, $F3, $F0, $3E, $00, $00, $07, $F6, $C9, $02
>393552	07 f6 c9 02
>393556	56 2f 39 00 62 2f 39 00		midiInstrumentsw31 .dword MIDIW31_INSTRUMENT_PIANO1,   MIDIW31_INSTRUMENT_PIANO2,   MIDIW31_INSTRUMENT_PIANO3,   MIDIW31_INSTRUMENT_HONKTONK, MIDIW31_INSTRUMENT_EP1, MIDIW31_INSTRUMENT_EP2
>39355e	6e 2f 39 00 7a 2f 39 00 86 2f 39 00 92 2f 39 00
>39356e	9e 2f 39 00 aa 2f 39 00		                   .dword MIDIW31_INSTRUMENT_HARPSIC,  MIDIW31_INSTRUMENT_CLAVIC,   MIDIW31_INSTRUMENT_CELESTA,  MIDIW31_INSTRUMENT_GLOCK,    MIDIW31_INSTRUMENT_MUSICBOX, MIDIW31_INSTRUMENT_VIBES
>393576	b6 2f 39 00 c2 2f 39 00 ce 2f 39 00 da 2f 39 00
>393586	e6 2f 39 00 f2 2f 39 00			                 .dword MIDIW31_INSTRUMENT_MARIMBA,  MIDIW31_INSTRUMENT_XYLO,     MIDIW31_INSTRUMENT_TUBEBELL, MIDIW31_INSTRUMENT_SANTUR,   MIDIW31_INSTRUMENT_ORGAN1,   MIDIW31_INSTRUMENT_ORGAN2
>39358e	fe 2f 39 00 0a 30 39 00 16 30 39 00 22 30 39 00
>39359e	2e 30 39 00 3a 30 39 00			                 .dword MIDIW31_INSTRUMENT_ORGAN3,   MIDIW31_INSTRUMENT_PIPEORG,  MIDIW31_INSTRUMENT_REEDORG,  MIDIW31_INSTRUMENT_ACORDIAN, MIDIW31_INSTRUMENT_HARMONIC, MIDIW31_INSTRUMENT_BANDNEON
>3935a6	46 30 39 00 52 30 39 00 5e 30 39 00 6a 30 39 00
>3935b6	76 30 39 00 82 30 39 00		                     .dword MIDIW31_INSTRUMENT_NYLONGT,  MIDIW31_INSTRUMENT_STEELGT,  MIDIW31_INSTRUMENT_JAZZGT,   MIDIW31_INSTRUMENT_CLEANGT,  MIDIW31_INSTRUMENT_MUTEGT,   MIDIW31_INSTRUMENT_OVERDGT
>3935be	8e 30 39 00 9a 30 39 00 a6 30 39 00 b2 30 39 00
>3935ce	be 30 39 00 ca 30 39 00			                 .dword MIDIW31_INSTRUMENT_DISTGT,   MIDIW31_INSTRUMENT_GTHARMS,  MIDIW31_INSTRUMENT_ACOUBASS, MIDIW31_INSTRUMENT_FINGBASS, MIDIW31_INSTRUMENT_PICKBASS, MIDIW31_INSTRUMENT_FRETLESS
>3935d6	d6 30 39 00 e2 30 39 00 ee 30 39 00 fa 30 39 00
>3935e6	06 31 39 00 12 31 39 00			                 .dword MIDIW31_INSTRUMENT_SLAPBAS1, MIDIW31_INSTRUMENT_SLAPBAS2, MIDIW31_INSTRUMENT_SYNBASS1, MIDIW31_INSTRUMENT_SYNBASS2, MIDIW31_INSTRUMENT_VIOLIN,   MIDIW31_INSTRUMENT_VIOLA
>3935ee	1e 31 39 00 2a 31 39 00 36 31 39 00 42 31 39 00
>3935fe	4e 31 39 00 5a 31 39 00			                 .dword MIDIW31_INSTRUMENT_CELLO,    MIDIW31_INSTRUMENT_CONTRAB,  MIDIW31_INSTRUMENT_TREMSTR,  MIDIW31_INSTRUMENT_PIZZ,     MIDIW31_INSTRUMENT_HARP,     MIDIW31_INSTRUMENT_TIMPANI
>393606	66 31 39 00 72 31 39 00 7e 31 39 00 8a 31 39 00
>393616	96 31 39 00 a2 31 39 00			                 .dword MIDIW31_INSTRUMENT_STRINGS,  MIDIW31_INSTRUMENT_SLOWSTR,  MIDIW31_INSTRUMENT_SYNSTR1,  MIDIW31_INSTRUMENT_SYNSTR2,  MIDIW31_INSTRUMENT_CHOIR,    MIDIW31_INSTRUMENT_OOHS
>39361e	ae 31 39 00 ba 31 39 00 c6 31 39 00 d2 31 39 00
>39362e	de 31 39 00 ea 31 39 00			                 .dword MIDIW31_INSTRUMENT_SYNVOX,   MIDIW31_INSTRUMENT_ORCHIT,   MIDIW31_INSTRUMENT_TRUMPET,  MIDIW31_INSTRUMENT_TROMBONE, MIDIW31_INSTRUMENT_TUBA,     MIDIW31_INSTRUMENT_MUTETRP
>393636	f6 31 39 00 02 32 39 00 0e 32 39 00 1a 32 39 00
>393646	26 32 39 00 32 32 39 00			                 .dword MIDIW31_INSTRUMENT_FRHORN,   MIDIW31_INSTRUMENT_BRASS1,   MIDIW31_INSTRUMENT_SYNBRAS1, MIDIW31_INSTRUMENT_SYNBRAS2, MIDIW31_INSTRUMENT_SOPSAX,   MIDIW31_INSTRUMENT_ALTOSAX
>39364e	3e 32 39 00 4a 32 39 00 56 32 39 00 62 32 39 00
>39365e	6e 32 39 00 7a 32 39 00			                 .dword MIDIW31_INSTRUMENT_TENSAX,   MIDIW31_INSTRUMENT_BARISAX,  MIDIW31_INSTRUMENT_OBOE,     MIDIW31_INSTRUMENT_ENGLHORN, MIDIW31_INSTRUMENT_BASSOON,  MIDIW31_INSTRUMENT_CLARINET
>393666	86 32 39 00 92 32 39 00 9e 32 39 00 aa 32 39 00
>393676	b6 32 39 00 c2 32 39 00			                 .dword MIDIW31_INSTRUMENT_PICCOLO,  MIDIW31_INSTRUMENT_FLUTE1,   MIDIW31_INSTRUMENT_RECORDER, MIDIW31_INSTRUMENT_PANFLUTE, MIDIW31_INSTRUMENT_BOTTLEB,  MIDIW31_INSTRUMENT_SHAKU
>39367e	ce 32 39 00 da 32 39 00 e6 32 39 00 f2 32 39 00
>39368e	fe 32 39 00 0a 33 39 00			                 .dword MIDIW31_INSTRUMENT_WHISTLE,  MIDIW31_INSTRUMENT_OCARINA,  MIDIW31_INSTRUMENT_SQUARWAV, MIDIW31_INSTRUMENT_SAWWAV,   MIDIW31_INSTRUMENT_SYNCALLI, MIDIW31_INSTRUMENT_CHIFLEAD
>393696	16 33 39 00 22 33 39 00 2e 33 39 00 3a 33 39 00
>3936a6	46 33 39 00 52 33 39 00			                 .dword MIDIW31_INSTRUMENT_CHARANG,  MIDIW31_INSTRUMENT_SOLOVOX,  MIDIW31_INSTRUMENT_FIFTHSAW, MIDIW31_INSTRUMENT_BASSLEAD, MIDIW31_INSTRUMENT_FANTASIA, MIDIW31_INSTRUMENT_WARMPAD
>3936ae	5e 33 39 00 6a 33 39 00 76 33 39 00 82 33 39 00
>3936be	8e 33 39 00 9a 33 39 00			                 .dword MIDIW31_INSTRUMENT_POLYSYN,  MIDIW31_INSTRUMENT_SPACEVOX, MIDIW31_INSTRUMENT_BOWEDGLS, MIDIW31_INSTRUMENT_METALPAD, MIDIW31_INSTRUMENT_HALOPAD,  MIDIW31_INSTRUMENT_SWEEPPAD
>3936c6	a6 33 39 00 b2 33 39 00 be 33 39 00 ca 33 39 00
>3936d6	d6 33 39 00 e2 33 39 00			                 .dword MIDIW31_INSTRUMENT_ICERAIN,  MIDIW31_INSTRUMENT_SOUNDTRK, MIDIW31_INSTRUMENT_CRYSTAL,  MIDIW31_INSTRUMENT_ATMOSPH,  MIDIW31_INSTRUMENT_BRIGHT,   MIDIW31_INSTRUMENT_GOBLIN
>3936de	ee 33 39 00 fa 33 39 00 06 34 39 00 12 34 39 00
>3936ee	1e 34 39 00 2a 34 39 00			                 .dword MIDIW31_INSTRUMENT_ECHODROP, MIDIW31_INSTRUMENT_STARTHEM, MIDIW31_INSTRUMENT_SITAR,    MIDIW31_INSTRUMENT_BANJO,    MIDIW31_INSTRUMENT_SHAMISEN, MIDIW31_INSTRUMENT_KOTO
>3936f6	36 34 39 00 42 34 39 00 4e 34 39 00 5a 34 39 00
>393706	66 34 39 00 72 34 39 00			                 .dword MIDIW31_INSTRUMENT_KALIMBA,  MIDIW31_INSTRUMENT_BAGPIPE,  MIDIW31_INSTRUMENT_FIDDLE,   MIDIW31_INSTRUMENT_SHANNAI,  MIDIW31_INSTRUMENT_TINKLBEL, MIDIW31_INSTRUMENT_AGOGO
>39370e	7e 34 39 00 8a 34 39 00 96 34 39 00 a2 34 39 00
>39371e	ae 34 39 00 ba 34 39 00			                 .dword MIDIW31_INSTRUMENT_STEELDRM, MIDIW31_INSTRUMENT_WOODBLOK, MIDIW31_INSTRUMENT_TAIKO,    MIDIW31_INSTRUMENT_MELOTOM,  MIDIW31_INSTRUMENT_SYNDRUM,  MIDIW31_INSTRUMENT_REVRSCYM
>393726	c6 34 39 00 d2 34 39 00 de 34 39 00 ea 34 39 00
>393736	f6 34 39 00 02 35 39 00			                 .dword MIDIW31_INSTRUMENT_FRETNOIS, MIDIW31_INSTRUMENT_BRTHNOIS, MIDIW31_INSTRUMENT_SEASHORE, MIDIW31_INSTRUMENT_BIRDS,    MIDIW31_INSTRUMENT_TELEPHON, MIDIW31_INSTRUMENT_HELICOPT
>39373e	0e 35 39 00 1a 35 39 00 26 35 39 00 32 35 39 00
>39374e	3e 35 39 00 4a 35 39 00			                 .dword MIDIW31_INSTRUMENT_APPLAUSE, MIDIW31_INSTRUMENT_GUNSHOT

;******  Return to file: src\OPL2_Library.asm

>393756	3c 42 44 45 47 49 4b 4c		NOTE_INTRO  .byte  $3C, $42, $44, $45, $47, $49, $4B, $4C
.39375e					IOPL2_TONE_TEST
.39375e	e2 20		sep #$20	                SEP #$20        ; set A short
.393760	c2 10		rep #$10	                REP #$10        ; set X long
.393762	a2 00 00	ldx #$0000	                LDX #0
.393765					OPL2_TONE_TESTING_L1
.393765	bf 56 37 39	lda $393756,x	                LDA NOTE_INTRO, X
.393769	29 0f		and #$0f	                AND #$F
.39376b	85 30		sta $30		                STA OPL2_NOTE ; start at C
.39376d	bf 56 37 39	lda $393756,x	                LDA NOTE_INTRO, X
.393771	29 70		and #$70	                AND #$70
.393773	4a		lsr a		                LSR A
.393774	4a		lsr a		                LSR A
.393775	4a		lsr a		                LSR A
.393776	4a		lsr a		                LSR A
.393777	85 31		sta $31		                STA OPL2_OCTAVE
.393779	8a		txa		                TXA
.39377a	29 03		and #$03	                AND #$03        ; replace modulo 3 -  play each note on a different channel
.39377c	85 27		sta $27		                STA OPL2_CHANNEL
.39377e	22 4e 39 39	jsl $39394e	                JSL OPL2_PLAYNOTE
.393782	a0 00 00	ldy #$0000	                LDY #$0000
.393785					OPL2_TONE_TESTING_L2
.393785	ea		nop		                NOP
.393786	ea		nop		                NOP
.393787	ea		nop		                NOP
.393788	ea		nop		                NOP
.393789	c8		iny		                INY
.39378a	c0 ff ff	cpy #$ffff	                CPY #$FFFF
.39378d	d0 f6		bne $393785	                BNE OPL2_TONE_TESTING_L2
.39378f	e8		inx		                INX
.393790	e0 08 00	cpx #$0008	                CPX #8
.393793	d0 d0		bne $393765	                BNE OPL2_TONE_TESTING_L1
.393795	6b		rtl		                RTL
.393796					OPL2_INIT
.393796	c2 20		rep #$20	                REP #$20        ; set A long
.393798	a9 00 00	lda #$0000	                LDA #$0000
.39379b	85 28		sta $28		                STA OPL2_REG_REGION
.39379d	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.39379f	85 30		sta $30		                STA OPL2_NOTE
.3937a1	85 32		sta $32		                STA OPL2_PARAMETER0
.3937a3	85 34		sta $34		                STA OPL2_PARAMETER2
.3937a5	a9 20 17	lda #$1720	                LDA #<>INSTRUMENT_ACCORDN
.3937a8	85 50		sta $50		                STA RAD_ADDR
.3937aa	a9 39 00	lda #$0039	                LDA #<`INSTRUMENT_ACCORDN
.3937ad	85 52		sta $52		                STA RAD_ADDR + 2
.3937af	e2 20		sep #$20	                SEP #$20        ; set A short
.3937b1	6b		rtl		                RTL
.3937b2					OPL2_Reset
.3937b2	6b		rtl		                RTL
.3937b3					OPL2_Get_FrequencyBlock
.3937b3	6b		rtl		                RTL
.3937b4					OPL2_GET_REGISTER
.3937b4	48		pha		                PHA             ; begin setdp macro
.3937b5	08		php		                PHP
.3937b6	c2 20		rep #$20	                REP #$20        ; set A long
.3937b8	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3937bb	5b		tcd		                TCD
.3937bc	28		plp		                PLP
.3937bd	68		pla		                PLA             ; end setdp macro
.3937be	c2 20		rep #$20	                REP #$20        ; set A long
.3937c0	18		clc		              CLC
.3937c1	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3937c4	65 32		adc $32		              ADC OPL2_PARAMETER0
.3937c6	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3937c8	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3937cb	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3937cd	e2 20		sep #$20	                SEP #$20        ; set A short
.3937cf	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3937d1	6b		rtl		              RTL
.3937d2					OPL2_GET_WAVEFORM_SELECT
.3937d2	48		pha		                PHA             ; begin setdp macro
.3937d3	08		php		                PHP
.3937d4	c2 20		rep #$20	                REP #$20        ; set A long
.3937d6	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3937d9	5b		tcd		                TCD
.3937da	28		plp		                PLP
.3937db	68		pla		                PLA             ; end setdp macro
.3937dc	c2 20		rep #$20	                REP #$20        ; set A long
.3937de	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3937e1	69 01 00	adc #$0001	              ADC #$0001
.3937e4	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3937e6	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3937e9	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3937eb	e2 20		sep #$20	                SEP #$20        ; set A short
.3937ed	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3937ef	29 20		and #$20	              AND #$20
.3937f1	6b		rtl		              RTL
.3937f2					OPL2_GET_SCALINGLEVEL
.3937f2	48		pha		                PHA             ; begin setdp macro
.3937f3	08		php		                PHP
.3937f4	c2 20		rep #$20	                REP #$20        ; set A long
.3937f6	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3937f9	5b		tcd		                TCD
.3937fa	28		plp		                PLP
.3937fb	68		pla		                PLA             ; end setdp macro
.3937fc	c2 20		rep #$20	                REP #$20        ; set A long
.3937fe	a9 40 00	lda #$0040	              LDA #$0040  ;
.393801	85 28		sta $28		              STA OPL2_REG_REGION
.393803	20 b5 40	jsr $3940b5	              JSR OPL2_GET_REG_OFFSET
.393806	e2 20		sep #$20	                SEP #$20        ; set A short
.393808	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39380a	29 c0		and #$c0	              AND #$C0
.39380c	4a		lsr a		              LSR A
.39380d	4a		lsr a		              LSR A
.39380e	4a		lsr a		              LSR A
.39380f	4a		lsr a		              LSR A
.393810	4a		lsr a		              LSR A
.393811	4a		lsr a		              LSR A
.393812	6b		rtl		              RTL
.393813					OPL2_GET_BLOCK
.393813	48		pha		                PHA             ; begin setdp macro
.393814	08		php		                PHP
.393815	c2 20		rep #$20	                REP #$20        ; set A long
.393817	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39381a	5b		tcd		                TCD
.39381b	28		plp		                PLP
.39381c	68		pla		                PLA             ; end setdp macro
.39381d	e2 20		sep #$20	                SEP #$20        ; set A short
.39381f	18		clc		              CLC
.393820	a5 27		lda $27		              LDA OPL2_CHANNEL
.393822	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393824	69 b0		adc #$b0	              ADC #$B0
.393826	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393828	a9 00		lda #$00	              LDA #$00
.39382a	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.39382c	c2 30		rep #$30	                REP #$30        ; set A&X long
.39382e	18		clc		              CLC
.39382f	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393832	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393834	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393836	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393839	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39383b	e2 20		sep #$20	                SEP #$20        ; set A short
.39383d	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39383f	29 1c		and #$1c	              AND #$1C
.393841	4a		lsr a		              LSR A
.393842	4a		lsr a		              LSR A
.393843	6b		rtl		              RTL
.393844					OPL2_GET_KEYON
.393844	48		pha		                PHA             ; begin setdp macro
.393845	08		php		                PHP
.393846	c2 20		rep #$20	                REP #$20        ; set A long
.393848	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39384b	5b		tcd		                TCD
.39384c	28		plp		                PLP
.39384d	68		pla		                PLA             ; end setdp macro
.39384e	e2 20		sep #$20	                SEP #$20        ; set A short
.393850	18		clc		              CLC
.393851	a5 27		lda $27		              LDA OPL2_CHANNEL
.393853	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393855	69 b0		adc #$b0	              ADC #$B0
.393857	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393859	a9 00		lda #$00	              LDA #$00
.39385b	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.39385d	c2 30		rep #$30	                REP #$30        ; set A&X long
.39385f	18		clc		              CLC
.393860	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393863	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393865	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393867	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.39386a	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39386c	e2 20		sep #$20	                SEP #$20        ; set A short
.39386e	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393870	29 20		and #$20	              AND #$20
.393872	6b		rtl		              RTL
.393873					OPL2_GET_FEEDBACK
.393873	48		pha		                PHA             ; begin setdp macro
.393874	08		php		                PHP
.393875	c2 20		rep #$20	                REP #$20        ; set A long
.393877	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39387a	5b		tcd		                TCD
.39387b	28		plp		                PLP
.39387c	68		pla		                PLA             ; end setdp macro
.39387d	e2 20		sep #$20	                SEP #$20        ; set A short
.39387f	18		clc		              CLC
.393880	a5 27		lda $27		              LDA OPL2_CHANNEL
.393882	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393884	69 c0		adc #$c0	              ADC #$C0
.393886	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393888	a9 00		lda #$00	              LDA #$00
.39388a	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.39388c	c2 30		rep #$30	                REP #$30        ; set A&X long
.39388e	18		clc		              CLC
.39388f	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393892	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393894	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393896	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393899	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39389b	e2 20		sep #$20	                SEP #$20        ; set A short
.39389d	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39389f	29 e0		and #$e0	              AND #$E0
.3938a1	4a		lsr a		              LSR
.3938a2	6b		rtl		              RTL
.3938a3					OPL2_GET_SYNTHMODE
.3938a3	48		pha		                PHA             ; begin setdp macro
.3938a4	08		php		                PHP
.3938a5	c2 20		rep #$20	                REP #$20        ; set A long
.3938a7	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3938aa	5b		tcd		                TCD
.3938ab	28		plp		                PLP
.3938ac	68		pla		                PLA             ; end setdp macro
.3938ad	e2 20		sep #$20	                SEP #$20        ; set A short
.3938af	18		clc		              CLC
.3938b0	a5 27		lda $27		              LDA OPL2_CHANNEL
.3938b2	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.3938b4	69 c0		adc #$c0	              ADC #$C0
.3938b6	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.3938b8	a9 00		lda #$00	              LDA #$00
.3938ba	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.3938bc	c2 30		rep #$30	                REP #$30        ; set A&X long
.3938be	18		clc		              CLC
.3938bf	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3938c2	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.3938c4	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3938c6	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3938c9	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3938cb	e2 20		sep #$20	                SEP #$20        ; set A short
.3938cd	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3938cf	29 01		and #$01	              AND #$01
.3938d1	6b		rtl		              RTL
.3938d2					OPL2_GET_DEEPTREMOLO
.3938d2	48		pha		                PHA             ; begin setdp macro
.3938d3	08		php		                PHP
.3938d4	c2 20		rep #$20	                REP #$20        ; set A long
.3938d6	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3938d9	5b		tcd		                TCD
.3938da	28		plp		                PLP
.3938db	68		pla		                PLA             ; end setdp macro
.3938dc	c2 20		rep #$20	                REP #$20        ; set A long
.3938de	a9 bd 00	lda #$00bd	              LDA #$00BD;
.3938e1	85 28		sta $28		              STA OPL2_REG_REGION
.3938e3	20 b5 40	jsr $3940b5	              JSR OPL2_GET_REG_OFFSET
.3938e6	e2 20		sep #$20	                SEP #$20        ; set A short
.3938e8	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3938ea	29 80		and #$80	              AND #$80
.3938ec	6b		rtl		              RTL
.3938ed					OPL2_GET_DEEPVIBRATO
.3938ed	48		pha		                PHA             ; begin setdp macro
.3938ee	08		php		                PHP
.3938ef	c2 20		rep #$20	                REP #$20        ; set A long
.3938f1	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3938f4	5b		tcd		                TCD
.3938f5	28		plp		                PLP
.3938f6	68		pla		                PLA             ; end setdp macro
.3938f7	c2 20		rep #$20	                REP #$20        ; set A long
.3938f9	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3938fc	69 bd 00	adc #$00bd	              ADC #$00BD
.3938ff	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393901	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393904	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393906	e2 20		sep #$20	                SEP #$20        ; set A short
.393908	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39390a	29 40		and #$40	              AND #$40
.39390c	6b		rtl		              RTL
.39390d					OPL2_GET_PERCUSSION
.39390d	48		pha		                PHA             ; begin setdp macro
.39390e	08		php		                PHP
.39390f	c2 20		rep #$20	                REP #$20        ; set A long
.393911	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393914	5b		tcd		                TCD
.393915	28		plp		                PLP
.393916	68		pla		                PLA             ; end setdp macro
.393917	c2 20		rep #$20	                REP #$20        ; set A long
.393919	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39391c	69 bd 00	adc #$00bd	              ADC #$00BD
.39391f	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393921	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393924	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393926	e2 20		sep #$20	                SEP #$20        ; set A short
.393928	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39392a	29 20		and #$20	              AND #$20
.39392c	6b		rtl		              RTL
.39392d					OPL2_GET_DRUMS
.39392d	48		pha		                PHA             ; begin setdp macro
.39392e	08		php		                PHP
.39392f	c2 20		rep #$20	                REP #$20        ; set A long
.393931	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393934	5b		tcd		                TCD
.393935	28		plp		                PLP
.393936	68		pla		                PLA             ; end setdp macro
.393937	c2 20		rep #$20	                REP #$20        ; set A long
.393939	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39393c	69 bd 00	adc #$00bd	              ADC #$00BD
.39393f	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393941	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393944	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393946	e2 20		sep #$20	                SEP #$20        ; set A short
.393948	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39394a	29 1f		and #$1f	              AND #$1F
.39394c	6b		rtl		              RTL
.39394d					OPL2_Get_WaveForm
.39394d	6b		rtl		                RTL
.39394e					OPL2_PLAYNOTE
.39394e	48		pha		                PHA             ; begin setdp macro
.39394f	08		php		                PHP
.393950	c2 20		rep #$20	                REP #$20        ; set A long
.393952	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393955	5b		tcd		                TCD
.393956	28		plp		                PLP
.393957	68		pla		                PLA             ; end setdp macro
.393958	e2 20		sep #$20	                SEP #$20        ; set A short
.39395a	da		phx		                PHX
.39395b	a9 00		lda #$00	                LDA #$00
.39395d	85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.39395f	20 36 3f	jsr $393f36	                JSR OPL2_SET_KEYON
.393962	20 fb 3e	jsr $393efb	                JSR OPL2_SET_BLOCK  ; OPL2_SET_BLOCK Already to OPL2_OCTAVE
.393965	e2 10		sep #$10	                SEP #$10        ; set X short
.393967	a5 30		lda $30		                LDA OPL2_NOTE
.393969	3a		dec a		                DEC A
.39396a	0a		asl a		                ASL A
.39396b	aa		tax		                TAX
.39396c	bf e5 16 39	lda $3916e5,x	                LDA @lnoteFNumbers,X
.393970	85 32		sta $32		                STA OPL2_PARAMETER0 ; Store the 8it in Param OPL2_PARAMETER0
.393972	e8		inx		                INX
.393973	bf e5 16 39	lda $3916e5,x	                LDA @lnoteFNumbers,X
.393977	85 33		sta $33		                STA OPL2_PARAMETER1 ; Store the 8bit in Param OPL2_PARAMETER1
.393979	22 79 3e 39	jsl $393e79	                JSL OPL2_SET_FNUMBER
.39397d	a9 01		lda #$01	                LDA #$01
.39397f	85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.393981	20 36 3f	jsr $393f36	                JSR OPL2_SET_KEYON
.393984	c2 10		rep #$10	                REP #$10        ; set X long
.393986	fa		plx		                PLX
.393987	6b		rtl		                RTL
.393988					OPL2_PLAYDRUM
.393988	6b		rtl		                RTL
.393989					OPL2_SET_INSTRUMENT
.393989	48		pha		                PHA             ; begin setdp macro
.39398a	08		php		                PHP
.39398b	c2 20		rep #$20	                REP #$20        ; set A long
.39398d	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393990	5b		tcd		                TCD
.393991	28		plp		                PLP
.393992	68		pla		                PLA             ; end setdp macro
.393993	38		sec		              SEC ; Set the WaveFormSelect to True
.393994	22 77 3b 39	jsl $393b77	              JSL OPL2_SET_WAVEFORMSELECT;
.393998	e2 20		sep #$20	                SEP #$20        ; set A short
.39399a	c2 10		rep #$10	                REP #$10        ; set X long
.39399c	a0 00 00	ldy #$0000	              LDY #$0000
.39399f	a2 00 00	ldx #$0000	              LDX #$0000
.3939a2	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO],Y ; Pointer Location 0 in Instrument Profile
.3939a4	85 35		sta $35		              STA OPL2_PARAMETER3
.3939a6	c8		iny		              INY
.3939a7	c9 06		cmp #$06	              CMP #$06
.3939a9	d0 03		bne $3939ae	              BNE PERCUSSION_NEXT07
.3939ab	82 70 01	brl $393b1e	              BRL Percussion_6
.3939ae					PERCUSSION_NEXT07
.3939ae	c9 07		cmp #$07	              CMP #$07
.3939b0	d0 03		bne $3939b5	              BNE PERCUSSION_NEXT08
.3939b2	82 44 01	brl $393af9	              BRL Percussion_7
.3939b5					PERCUSSION_NEXT08
.3939b5	c9 08		cmp #$08	              CMP #$08
.3939b7	d0 03		bne $3939bc	              BNE PERCUSSION_NEXT09
.3939b9	82 18 01	brl $393ad4	              BRL Percussion_8
.3939bc					PERCUSSION_NEXT09
.3939bc	c9 09		cmp #$09	              CMP #$09
.3939be	d0 03		bne $3939c3	              BNE PERCUSSION_NEXT0A
.3939c0	82 ec 00	brl $393aaf	              BRL Percussion_9
.3939c3					PERCUSSION_NEXT0A
.3939c3	c9 0a		cmp #$0a	              CMP #$0A
.3939c5	d0 03		bne $3939ca	              BNE Percussion_Default
.3939c7	82 c0 00	brl $393a8a	              BRL Percussion_A
.3939ca					Percussion_Default
.3939ca	a9 00		lda #$00	              LDA #$00
.3939cc	85 26		sta $26		              STA OPL2_OPERATOR
.3939ce	c2 20		rep #$20	                REP #$20        ; set A long
.3939d0	a9 20 00	lda #$0020	              LDA #$0020;
.3939d3	85 28		sta $28		              STA OPL2_REG_REGION
.3939d5	20 b5 40	jsr $3940b5	              JSR OPL2_GET_REG_OFFSET
.3939d8	e2 20		sep #$20	                SEP #$20        ; set A short
.3939da	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.3939dc	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3939de	c8		iny		              INY
.3939df	c2 20		rep #$20	                REP #$20        ; set A long
.3939e1	a9 40 00	lda #$0040	              LDA #$0040;
.3939e4	85 28		sta $28		              STA OPL2_REG_REGION
.3939e6	20 b5 40	jsr $3940b5	              JSR OPL2_GET_REG_OFFSET
.3939e9	e2 20		sep #$20	                SEP #$20        ; set A short
.3939eb	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.3939ed	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3939ef	c8		iny		              INY
.3939f0	c2 20		rep #$20	                REP #$20        ; set A long
.3939f2	a9 60 00	lda #$0060	              LDA #$0060;
.3939f5	85 28		sta $28		              STA OPL2_REG_REGION
.3939f7	20 b5 40	jsr $3940b5	              JSR OPL2_GET_REG_OFFSET
.3939fa	e2 20		sep #$20	                SEP #$20        ; set A short
.3939fc	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.3939fe	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a00	c8		iny		              INY
.393a01	c2 20		rep #$20	                REP #$20        ; set A long
.393a03	a9 80 00	lda #$0080	              LDA #$0080;
.393a06	85 28		sta $28		              STA OPL2_REG_REGION
.393a08	20 b5 40	jsr $3940b5	              JSR OPL2_GET_REG_OFFSET
.393a0b	e2 20		sep #$20	                SEP #$20        ; set A short
.393a0d	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393a0f	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a11	c8		iny		              INY
.393a12	c2 20		rep #$20	                REP #$20        ; set A long
.393a14	a9 e0 00	lda #$00e0	              LDA #$00E0;
.393a17	85 28		sta $28		              STA OPL2_REG_REGION
.393a19	20 b5 40	jsr $3940b5	              JSR OPL2_GET_REG_OFFSET
.393a1c	e2 20		sep #$20	                SEP #$20        ; set A short
.393a1e	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393a20	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a22	c8		iny		              INY
.393a23	e2 10		sep #$10	                SEP #$10        ; set X short
.393a25	a5 27		lda $27		              LDA OPL2_CHANNEL
.393a27	29 0f		and #$0f	              AND #$0F
.393a29	aa		tax		              TAX
.393a2a	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 6 in Instrument Profile
.393a2c	9f c0 e6 af	sta $afe6c0,x	              STA @lOPL3_R_FEEDBACK,X
.393a30	c8		iny		              INY
.393a31	a9 01		lda #$01	              LDA #$01
.393a33	85 26		sta $26		              STA OPL2_OPERATOR
.393a35	c2 20		rep #$20	                REP #$20        ; set A long
.393a37	a9 20 00	lda #$0020	              LDA #$0020;
.393a3a	85 28		sta $28		              STA OPL2_REG_REGION
.393a3c	20 b5 40	jsr $3940b5	              JSR OPL2_GET_REG_OFFSET
.393a3f	e2 20		sep #$20	                SEP #$20        ; set A short
.393a41	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 7 in Instrument Profile
.393a43	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a45	c8		iny		              INY
.393a46	c2 20		rep #$20	                REP #$20        ; set A long
.393a48	a9 40 00	lda #$0040	              LDA #$0040;
.393a4b	85 28		sta $28		              STA OPL2_REG_REGION
.393a4d	20 b5 40	jsr $3940b5	              JSR OPL2_GET_REG_OFFSET
.393a50	e2 20		sep #$20	                SEP #$20        ; set A short
.393a52	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 8 in Instrument Profile
.393a54	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a56	c8		iny		              INY
.393a57	c2 20		rep #$20	                REP #$20        ; set A long
.393a59	a9 60 00	lda #$0060	              LDA #$0060;
.393a5c	85 28		sta $28		              STA OPL2_REG_REGION
.393a5e	20 b5 40	jsr $3940b5	              JSR OPL2_GET_REG_OFFSET
.393a61	e2 20		sep #$20	                SEP #$20        ; set A short
.393a63	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 9 in Instrument Profile
.393a65	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a67	c8		iny		              INY
.393a68	c2 20		rep #$20	                REP #$20        ; set A long
.393a6a	a9 80 00	lda #$0080	              LDA #$0080;
.393a6d	85 28		sta $28		              STA OPL2_REG_REGION
.393a6f	20 b5 40	jsr $3940b5	              JSR OPL2_GET_REG_OFFSET
.393a72	e2 20		sep #$20	                SEP #$20        ; set A short
.393a74	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location A in Instrument Profile
.393a76	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a78	c8		iny		              INY
.393a79	c2 20		rep #$20	                REP #$20        ; set A long
.393a7b	a9 e0 00	lda #$00e0	              LDA #$00E0;
.393a7e	85 28		sta $28		              STA OPL2_REG_REGION
.393a80	20 b5 40	jsr $3940b5	              JSR OPL2_GET_REG_OFFSET
.393a83	e2 20		sep #$20	                SEP #$20        ; set A short
.393a85	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location B in Instrument Profile
.393a87	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a89	6b		rtl		                RTL
.393a8a					Percussion_A
.393a8a	e2 20		sep #$20	                SEP #$20        ; set A short
.393a8c	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393a8e	8f 31 e6 af	sta $afe631	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $11
.393a92	c8		iny		              INY
.393a93	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393a95	8f 51 e6 af	sta $afe651	              STA @lOPL3_R_KSL_TL + $11
.393a99	c8		iny		              INY
.393a9a	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393a9c	8f 71 e6 af	sta $afe671	              STA @lOPL3_R_AR_DR + $11
.393aa0	c8		iny		              INY
.393aa1	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393aa3	8f 91 e6 af	sta $afe691	              STA @lOPL3_R_SL_RR + $11
.393aa7	c8		iny		              INY
.393aa8	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393aaa	8f f1 e6 af	sta $afe6f1	              STA @lOPL3_R_WAVE_SELECT + $11
.393aae	6b		rtl		                RTL
.393aaf					Percussion_9
.393aaf	e2 20		sep #$20	                SEP #$20        ; set A short
.393ab1	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393ab3	8f 35 e6 af	sta $afe635	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $15
.393ab7	c8		iny		              INY
.393ab8	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393aba	8f 55 e6 af	sta $afe655	              STA @lOPL3_R_KSL_TL + $15
.393abe	c8		iny		              INY
.393abf	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393ac1	8f 75 e6 af	sta $afe675	              STA @lOPL3_R_AR_DR + $15
.393ac5	c8		iny		              INY
.393ac6	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393ac8	8f 95 e6 af	sta $afe695	              STA @lOPL3_R_SL_RR + $15
.393acc	c8		iny		              INY
.393acd	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393acf	8f f5 e6 af	sta $afe6f5	              STA @lOPL3_R_WAVE_SELECT + $15
.393ad3	6b		rtl		              RTL
.393ad4					Percussion_8
.393ad4	e2 20		sep #$20	                SEP #$20        ; set A short
.393ad6	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393ad8	8f 32 e6 af	sta $afe632	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $12
.393adc	c8		iny		              INY
.393add	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393adf	8f 52 e6 af	sta $afe652	              STA @lOPL3_R_KSL_TL + $12
.393ae3	c8		iny		              INY
.393ae4	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393ae6	8f 72 e6 af	sta $afe672	              STA @lOPL3_R_AR_DR + $12
.393aea	c8		iny		              INY
.393aeb	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393aed	8f 92 e6 af	sta $afe692	              STA @lOPL3_R_SL_RR + $12
.393af1	c8		iny		              INY
.393af2	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393af4	8f f2 e6 af	sta $afe6f2	              STA @lOPL3_R_WAVE_SELECT + $12
.393af8	6b		rtl		              RTL
.393af9					Percussion_7
.393af9	e2 20		sep #$20	                SEP #$20        ; set A short
.393afb	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393afd	8f 34 e6 af	sta $afe634	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $14
.393b01	c8		iny		              INY
.393b02	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393b04	8f 54 e6 af	sta $afe654	              STA @lOPL3_R_KSL_TL + $14
.393b08	c8		iny		              INY
.393b09	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393b0b	8f 74 e6 af	sta $afe674	              STA @lOPL3_R_AR_DR + $14
.393b0f	c8		iny		              INY
.393b10	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393b12	8f 94 e6 af	sta $afe694	              STA @lOPL3_R_SL_RR + $14
.393b16	c8		iny		              INY
.393b17	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393b19	8f f4 e6 af	sta $afe6f4	              STA @lOPL3_R_WAVE_SELECT + $14
.393b1d	6b		rtl		              RTL
.393b1e					Percussion_6
.393b1e	e2 20		sep #$20	                SEP #$20        ; set A short
.393b20	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393b22	8f 30 e6 af	sta $afe630	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $10
.393b26	8f 33 e6 af	sta $afe633	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $13
.393b2a	c8		iny		              INY
.393b2b	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393b2d	8f 50 e6 af	sta $afe650	              STA @lOPL3_R_KSL_TL + $10
.393b31	8f 53 e6 af	sta $afe653	              STA @lOPL3_R_KSL_TL + $13
.393b35	c8		iny		              INY
.393b36	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393b38	8f 70 e6 af	sta $afe670	              STA @lOPL3_R_AR_DR + $10
.393b3c	8f 73 e6 af	sta $afe673	              STA @lOPL3_R_AR_DR + $13
.393b40	c8		iny		              INY
.393b41	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393b43	8f 90 e6 af	sta $afe690	              STA @lOPL3_R_SL_RR + $10
.393b47	8f 93 e6 af	sta $afe693	              STA @lOPL3_R_SL_RR + $13
.393b4b	c8		iny		              INY
.393b4c	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393b4e	8f f0 e6 af	sta $afe6f0	              STA @lOPL3_R_WAVE_SELECT + $10
.393b52	8f f3 e6 af	sta $afe6f3	              STA @lOPL3_R_WAVE_SELECT + $13
.393b56	6b		rtl		              RTL
.393b57					OPL2_SET_REGISTER
.393b57	48		pha		                PHA             ; begin setdp macro
.393b58	08		php		                PHP
.393b59	c2 20		rep #$20	                REP #$20        ; set A long
.393b5b	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b5e	5b		tcd		                TCD
.393b5f	28		plp		                PLP
.393b60	68		pla		                PLA             ; end setdp macro
.393b61	c2 20		rep #$20	                REP #$20        ; set A long
.393b63	18		clc		              CLC
.393b64	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393b67	65 32		adc $32		              ADC OPL2_PARAMETER0
.393b69	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393b6b	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393b6e	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393b70	e2 20		sep #$20	                SEP #$20        ; set A short
.393b72	a5 33		lda $33		              LDA OPL2_PARAMETER1
.393b74	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393b76	6b		rtl		              RTL
.393b77					OPL2_SET_WAVEFORMSELECT
.393b77	48		pha		                PHA             ; begin setdp macro
.393b78	08		php		                PHP
.393b79	c2 20		rep #$20	                REP #$20        ; set A long
.393b7b	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b7e	5b		tcd		                TCD
.393b7f	28		plp		                PLP
.393b80	68		pla		                PLA             ; end setdp macro
.393b81	c2 20		rep #$20	                REP #$20        ; set A long
.393b83	a9 01 e6	lda #$e601	              LDA #<>OPL3_R_BASE + $0001
.393b86	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393b88	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393b8b	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393b8d	e2 20		sep #$20	                SEP #$20        ; set A short
.393b8f	b0 07		bcs $393b98	              BCS OPL2_Set_WaveFormSelect_set
.393b91	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393b93	29 df		and #$df	              AND #$DF
.393b95	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393b97	6b		rtl		              RTL
.393b98					OPL2_Set_WaveFormSelect_set
.393b98	48		pha		                PHA             ; begin setdp macro
.393b99	08		php		                PHP
.393b9a	c2 20		rep #$20	                REP #$20        ; set A long
.393b9c	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b9f	5b		tcd		                TCD
.393ba0	28		plp		                PLP
.393ba1	68		pla		                PLA             ; end setdp macro
.393ba2	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393ba4	09 20 00	ora #$0020	              ORA #$20
.393ba7	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393ba9	6b		rtl		                RTL
.393baa					OPL2_SET_TREMOLO
.393baa	48		pha		                PHA             ; begin setdp macro
.393bab	08		php		                PHP
.393bac	c2 20		rep #$20	                REP #$20        ; set A long
.393bae	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393bb1	5b		tcd		                TCD
.393bb2	28		plp		                PLP
.393bb3	68		pla		                PLA             ; end setdp macro
.393bb4	08		php		                PHP ; Push the Carry
.393bb5	c2 20		rep #$20	                REP #$20        ; set A long
.393bb7	18		clc		                CLC
.393bb8	a9 20 00	lda #$0020	                LDA #$0020 ;
.393bbb	85 28		sta $28		                STA OPL2_REG_REGION
.393bbd	20 b5 40	jsr $3940b5	                JSR OPL2_GET_REG_OFFSET
.393bc0	28		plp		                PLP ; Pull the Carry out
.393bc1	e2 20		sep #$20	                SEP #$20        ; set A short
.393bc3	b0 08		bcs $393bcd	                BCS OPL2_Set_Tremolo_Set;
.393bc5	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393bc7	29 7f		and #$7f	                AND #$7F
.393bc9	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393bcb	80 06		bra $393bd3	                BRA OPL2_Set_Tremolo_Exit
.393bcd					OPL2_Set_Tremolo_Set
.393bcd	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393bcf	09 80		ora #$80	                ORA #$80
.393bd1	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393bd3					OPL2_Set_Tremolo_Exit
.393bd3	6b		rtl		                RTL
.393bd4					OPL2_GET_TREMOLO
.393bd4	48		pha		                PHA             ; begin setdp macro
.393bd5	08		php		                PHP
.393bd6	c2 20		rep #$20	                REP #$20        ; set A long
.393bd8	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393bdb	5b		tcd		                TCD
.393bdc	28		plp		                PLP
.393bdd	68		pla		                PLA             ; end setdp macro
.393bde	c2 20		rep #$20	                REP #$20        ; set A long
.393be0	a9 20 00	lda #$0020	                LDA #$0020;
.393be3	85 28		sta $28		                STA OPL2_REG_REGION
.393be5	20 b5 40	jsr $3940b5	                JSR OPL2_GET_REG_OFFSET
.393be8	e2 20		sep #$20	                SEP #$20        ; set A short
.393bea	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393bec	29 80		and #$80	                AND #$80
.393bee	6b		rtl		                RTL
.393bef					OPL2_SET_VIBRATO
.393bef	48		pha		                PHA             ; begin setdp macro
.393bf0	08		php		                PHP
.393bf1	c2 20		rep #$20	                REP #$20        ; set A long
.393bf3	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393bf6	5b		tcd		                TCD
.393bf7	28		plp		                PLP
.393bf8	68		pla		                PLA             ; end setdp macro
.393bf9	08		php		                PHP ; Push the Carry
.393bfa	c2 20		rep #$20	                REP #$20        ; set A long
.393bfc	18		clc		                CLC
.393bfd	a9 20 00	lda #$0020	                LDA #$0020;
.393c00	85 28		sta $28		                STA OPL2_REG_REGION
.393c02	20 b5 40	jsr $3940b5	                JSR OPL2_GET_REG_OFFSET
.393c05	28		plp		                PLP ; Pull the Carry out
.393c06	e2 20		sep #$20	                SEP #$20        ; set A short
.393c08	b0 08		bcs $393c12	                BCS OPL2_Set_Vibrato_Set;
.393c0a	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393c0c	29 bf		and #$bf	                AND #$BF
.393c0e	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393c10	80 06		bra $393c18	                BRA OPL2_Set_Vibrato_Exit
.393c12					OPL2_Set_Vibrato_Set
.393c12	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393c14	09 40		ora #$40	                ORA #$40
.393c16	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393c18					OPL2_Set_Vibrato_Exit
.393c18	6b		rtl		                RTL
.393c19					OPL2_GET_VIBRATO
.393c19	48		pha		                PHA             ; begin setdp macro
.393c1a	08		php		                PHP
.393c1b	c2 20		rep #$20	                REP #$20        ; set A long
.393c1d	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c20	5b		tcd		                TCD
.393c21	28		plp		                PLP
.393c22	68		pla		                PLA             ; end setdp macro
.393c23	c2 20		rep #$20	                REP #$20        ; set A long
.393c25	a9 20 00	lda #$0020	                LDA #$0020;
.393c28	85 28		sta $28		                STA OPL2_REG_REGION
.393c2a	20 b5 40	jsr $3940b5	                JSR OPL2_GET_REG_OFFSET
.393c2d	e2 20		sep #$20	                SEP #$20        ; set A short
.393c2f	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393c31	29 40		and #$40	                AND #$40
.393c33	6b		rtl		                RTL
.393c34					OPL2_SET_MAINTAINSUSTAIN
.393c34	48		pha		                PHA             ; begin setdp macro
.393c35	08		php		                PHP
.393c36	c2 20		rep #$20	                REP #$20        ; set A long
.393c38	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c3b	5b		tcd		                TCD
.393c3c	28		plp		                PLP
.393c3d	68		pla		                PLA             ; end setdp macro
.393c3e	08		php		              PHP ; Push the Carry
.393c3f	c2 20		rep #$20	                REP #$20        ; set A long
.393c41	18		clc		              CLC
.393c42	a9 20 00	lda #$0020	              LDA #$0020;
.393c45	85 28		sta $28		              STA OPL2_REG_REGION
.393c47	20 b5 40	jsr $3940b5	              JSR OPL2_GET_REG_OFFSET
.393c4a	28		plp		              PLP ; Pull the Carry out
.393c4b	e2 20		sep #$20	                SEP #$20        ; set A short
.393c4d	b0 08		bcs $393c57	              BCS OPL2_Set_MaintainSustain_Set;
.393c4f	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393c51	29 df		and #$df	              AND #$DF
.393c53	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393c55	80 06		bra $393c5d	              BRA OPL2_Set_MaintainSustain_Exit
.393c57					OPL2_Set_MaintainSustain_Set
.393c57	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393c59	09 20		ora #$20	              ORA #$20
.393c5b	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393c5d					OPL2_Set_MaintainSustain_Exit
.393c5d	6b		rtl		                RTL
.393c5e					OPL2_GET_MAINTAINSUSTAIN
.393c5e	48		pha		                PHA             ; begin setdp macro
.393c5f	08		php		                PHP
.393c60	c2 20		rep #$20	                REP #$20        ; set A long
.393c62	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c65	5b		tcd		                TCD
.393c66	28		plp		                PLP
.393c67	68		pla		                PLA             ; end setdp macro
.393c68	c2 20		rep #$20	                REP #$20        ; set A long
.393c6a	a9 20 00	lda #$0020	              LDA #$0020;
.393c6d	85 28		sta $28		              STA OPL2_REG_REGION
.393c6f	20 b5 40	jsr $3940b5	              JSR OPL2_GET_REG_OFFSET
.393c72	e2 20		sep #$20	                SEP #$20        ; set A short
.393c74	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393c76	29 20		and #$20	              AND #$20
.393c78	6b		rtl		                RTL
.393c79					OPL2_SET_ENVELOPESCALING
.393c79	48		pha		                PHA             ; begin setdp macro
.393c7a	08		php		                PHP
.393c7b	c2 20		rep #$20	                REP #$20        ; set A long
.393c7d	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c80	5b		tcd		                TCD
.393c81	28		plp		                PLP
.393c82	68		pla		                PLA             ; end setdp macro
.393c83	08		php		              PHP ; Push the Carry
.393c84	c2 20		rep #$20	                REP #$20        ; set A long
.393c86	18		clc		              CLC
.393c87	a9 20 00	lda #$0020	              LDA #$0020;
.393c8a	85 28		sta $28		              STA OPL2_REG_REGION
.393c8c	20 b5 40	jsr $3940b5	              JSR OPL2_GET_REG_OFFSET
.393c8f	28		plp		              PLP ; Pull the Carry out
.393c90	e2 20		sep #$20	                SEP #$20        ; set A short
.393c92	b0 08		bcs $393c9c	              BCS OPL2_Set_EnvelopeScaling_Set;
.393c94	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393c96	29 ef		and #$ef	              AND #$EF
.393c98	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393c9a	80 06		bra $393ca2	              BRA OPL2_Set_EnvelopeScaling_Exit
.393c9c					OPL2_Set_EnvelopeScaling_Set
.393c9c	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393c9e	09 10		ora #$10	              ORA #$10
.393ca0	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393ca2					OPL2_Set_EnvelopeScaling_Exit
.393ca2	6b		rtl		                RTL
.393ca3					OPL2_GET_ENVELOPESCALING
.393ca3	48		pha		                PHA             ; begin setdp macro
.393ca4	08		php		                PHP
.393ca5	c2 20		rep #$20	                REP #$20        ; set A long
.393ca7	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393caa	5b		tcd		                TCD
.393cab	28		plp		                PLP
.393cac	68		pla		                PLA             ; end setdp macro
.393cad	c2 20		rep #$20	                REP #$20        ; set A long
.393caf	a9 20 00	lda #$0020	              LDA #$0020;
.393cb2	85 28		sta $28		              STA OPL2_REG_REGION
.393cb4	20 b5 40	jsr $3940b5	              JSR OPL2_GET_REG_OFFSET
.393cb7	e2 20		sep #$20	                SEP #$20        ; set A short
.393cb9	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393cbb	29 10		and #$10	              AND #$10
.393cbd	6b		rtl		                RTL
.393cbe					OPL2_GET_MODFREQMULTIPLE
.393cbe	48		pha		                PHA             ; begin setdp macro
.393cbf	08		php		                PHP
.393cc0	c2 20		rep #$20	                REP #$20        ; set A long
.393cc2	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393cc5	5b		tcd		                TCD
.393cc6	28		plp		                PLP
.393cc7	68		pla		                PLA             ; end setdp macro
.393cc8	c2 20		rep #$20	                REP #$20        ; set A long
.393cca	a9 20 00	lda #$0020	              LDA #$0020;
.393ccd	85 28		sta $28		              STA OPL2_REG_REGION
.393ccf	20 b5 40	jsr $3940b5	              JSR OPL2_GET_REG_OFFSET
.393cd2	e2 20		sep #$20	                SEP #$20        ; set A short
.393cd4	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393cd6	29 0f		and #$0f	              AND #$0F
.393cd8	6b		rtl		              RTL
.393cd9					OPL2_SET_MODFREQMULTIPLE
.393cd9	48		pha		                PHA             ; begin setdp macro
.393cda	08		php		                PHP
.393cdb	c2 20		rep #$20	                REP #$20        ; set A long
.393cdd	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393ce0	5b		tcd		                TCD
.393ce1	28		plp		                PLP
.393ce2	68		pla		                PLA             ; end setdp macro
.393ce3	c2 20		rep #$20	                REP #$20        ; set A long
.393ce5	a9 20 00	lda #$0020	                LDA #$0020;
.393ce8	85 28		sta $28		                STA OPL2_REG_REGION
.393cea	20 b5 40	jsr $3940b5	                JSR OPL2_GET_REG_OFFSET
.393ced	e2 20		sep #$20	                SEP #$20        ; set A short
.393cef	a5 32		lda $32		                LDA OPL2_PARAMETER0
.393cf1	29 0f		and #$0f	                AND #$0F
.393cf3	85 32		sta $32		                STA OPL2_PARAMETER0
.393cf5	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393cf7	29 f0		and #$f0	                AND #$F0
.393cf9	05 32		ora $32		                ORA OPL2_PARAMETER0
.393cfb	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393cfd	6b		rtl		                RTL
.393cfe					OPL2_SET_SCALINGLEVEL
.393cfe	48		pha		                PHA             ; begin setdp macro
.393cff	08		php		                PHP
.393d00	c2 20		rep #$20	                REP #$20        ; set A long
.393d02	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d05	5b		tcd		                TCD
.393d06	28		plp		                PLP
.393d07	68		pla		                PLA             ; end setdp macro
.393d08	c2 20		rep #$20	                REP #$20        ; set A long
.393d0a	a9 40 00	lda #$0040	                LDA #$0040;
.393d0d	85 28		sta $28		                STA OPL2_REG_REGION
.393d0f	20 b5 40	jsr $3940b5	                JSR OPL2_GET_REG_OFFSET
.393d12	e2 20		sep #$20	                SEP #$20        ; set A short
.393d14	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393d16	29 03		and #$03	                AND #$03
.393d18	0a		asl a		                ASL
.393d19	0a		asl a		                ASL
.393d1a	0a		asl a		                ASL
.393d1b	0a		asl a		                ASL
.393d1c	0a		asl a		                ASL
.393d1d	0a		asl a		                ASL
.393d1e	85 32		sta $32		                STA OPL2_PARAMETER0
.393d20	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d22	29 3f		and #$3f	                AND #$3F
.393d24	05 32		ora $32		                ORA OPL2_PARAMETER0
.393d26	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393d28	6b		rtl		                RTL
.393d29					OPL2_SET_VOLUME
.393d29	48		pha		                PHA             ; begin setdp macro
.393d2a	08		php		                PHP
.393d2b	c2 20		rep #$20	                REP #$20        ; set A long
.393d2d	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d30	5b		tcd		                TCD
.393d31	28		plp		                PLP
.393d32	68		pla		                PLA             ; end setdp macro
.393d33	c2 20		rep #$20	                REP #$20        ; set A long
.393d35	a9 40 00	lda #$0040	                LDA #$0040  ;
.393d38	85 28		sta $28		                STA OPL2_REG_REGION
.393d3a	20 b5 40	jsr $3940b5	                JSR OPL2_GET_REG_OFFSET
.393d3d	e2 20		sep #$20	                SEP #$20        ; set A short
.393d3f	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Volume
.393d41	29 3f		and #$3f	                AND #$3F
.393d43	85 32		sta $32		                STA OPL2_PARAMETER0
.393d45	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d47	29 c0		and #$c0	                AND #$C0
.393d49	05 32		ora $32		                ORA OPL2_PARAMETER0
.393d4b	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393d4d	6b		rtl		                RTL
.393d4e					OPL2_GET_VOLUME
.393d4e	48		pha		                PHA             ; begin setdp macro
.393d4f	08		php		                PHP
.393d50	c2 20		rep #$20	                REP #$20        ; set A long
.393d52	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d55	5b		tcd		                TCD
.393d56	28		plp		                PLP
.393d57	68		pla		                PLA             ; end setdp macro
.393d58	c2 20		rep #$20	                REP #$20        ; set A long
.393d5a	a9 40 00	lda #$0040	                LDA #$0040  ;
.393d5d	85 28		sta $28		                STA OPL2_REG_REGION
.393d5f	20 b5 40	jsr $3940b5	                JSR OPL2_GET_REG_OFFSET
.393d62	e2 20		sep #$20	                SEP #$20        ; set A short
.393d64	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d66	29 3f		and #$3f	                AND #$3F
.393d68	6b		rtl		                RTL
.393d69					OPL2_SET_ATTACK
.393d69	48		pha		                PHA             ; begin setdp macro
.393d6a	08		php		                PHP
.393d6b	c2 20		rep #$20	                REP #$20        ; set A long
.393d6d	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d70	5b		tcd		                TCD
.393d71	28		plp		                PLP
.393d72	68		pla		                PLA             ; end setdp macro
.393d73	c2 20		rep #$20	                REP #$20        ; set A long
.393d75	a9 60 00	lda #$0060	                LDA #$0060  ;
.393d78	85 28		sta $28		                STA OPL2_REG_REGION
.393d7a	20 b5 40	jsr $3940b5	                JSR OPL2_GET_REG_OFFSET
.393d7d	e2 20		sep #$20	                SEP #$20        ; set A short
.393d7f	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393d81	29 0f		and #$0f	                AND #$0F
.393d83	0a		asl a		                ASL
.393d84	0a		asl a		                ASL
.393d85	0a		asl a		                ASL
.393d86	0a		asl a		                ASL
.393d87	85 32		sta $32		                STA OPL2_PARAMETER0
.393d89	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d8b	29 0f		and #$0f	                AND #$0F
.393d8d	05 32		ora $32		                ORA OPL2_PARAMETER0
.393d8f	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393d91	6b		rtl		                RTL
.393d92					OPL2_GET_ATTACK
.393d92	48		pha		                PHA             ; begin setdp macro
.393d93	08		php		                PHP
.393d94	c2 20		rep #$20	                REP #$20        ; set A long
.393d96	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d99	5b		tcd		                TCD
.393d9a	28		plp		                PLP
.393d9b	68		pla		                PLA             ; end setdp macro
.393d9c	c2 20		rep #$20	                REP #$20        ; set A long
.393d9e	a9 60 00	lda #$0060	                LDA #$0060
.393da1	85 28		sta $28		                STA OPL2_REG_REGION
.393da3	20 b5 40	jsr $3940b5	                JSR OPL2_GET_REG_OFFSET
.393da6	e2 20		sep #$20	                SEP #$20        ; set A short
.393da8	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393daa	29 f0		and #$f0	                AND #$F0
.393dac	4a		lsr a		                LSR
.393dad	4a		lsr a		                LSR
.393dae	4a		lsr a		                LSR
.393daf	4a		lsr a		                LSR
.393db0	6b		rtl		                RTL
.393db1					OPL2_SET_DECAY
.393db1	48		pha		                PHA             ; begin setdp macro
.393db2	08		php		                PHP
.393db3	c2 20		rep #$20	                REP #$20        ; set A long
.393db5	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393db8	5b		tcd		                TCD
.393db9	28		plp		                PLP
.393dba	68		pla		                PLA             ; end setdp macro
.393dbb	c2 20		rep #$20	                REP #$20        ; set A long
.393dbd	a9 60 00	lda #$0060	                LDA #$0060;
.393dc0	85 28		sta $28		                STA OPL2_REG_REGION
.393dc2	20 b5 40	jsr $3940b5	                JSR OPL2_GET_REG_OFFSET
.393dc5	e2 20		sep #$20	                SEP #$20        ; set A short
.393dc7	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393dc9	29 0f		and #$0f	                AND #$0F
.393dcb	85 32		sta $32		                STA OPL2_PARAMETER0
.393dcd	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393dcf	29 f0		and #$f0	                AND #$F0
.393dd1	05 32		ora $32		                ORA OPL2_PARAMETER0
.393dd3	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393dd5	6b		rtl		                RTL
.393dd6					OPL2_GET_DECAY
.393dd6	48		pha		                PHA             ; begin setdp macro
.393dd7	08		php		                PHP
.393dd8	c2 20		rep #$20	                REP #$20        ; set A long
.393dda	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393ddd	5b		tcd		                TCD
.393dde	28		plp		                PLP
.393ddf	68		pla		                PLA             ; end setdp macro
.393de0	c2 20		rep #$20	                REP #$20        ; set A long
.393de2	a9 60 00	lda #$0060	                LDA #$0060
.393de5	85 28		sta $28		                STA OPL2_REG_REGION
.393de7	20 b5 40	jsr $3940b5	                JSR OPL2_GET_REG_OFFSET
.393dea	e2 20		sep #$20	                SEP #$20        ; set A short
.393dec	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393dee	29 0f		and #$0f	                AND #$0F
.393df0	6b		rtl		                RTL
.393df1					OPL2_SET_SUSTAIN
.393df1	48		pha		                PHA             ; begin setdp macro
.393df2	08		php		                PHP
.393df3	c2 20		rep #$20	                REP #$20        ; set A long
.393df5	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393df8	5b		tcd		                TCD
.393df9	28		plp		                PLP
.393dfa	68		pla		                PLA             ; end setdp macro
.393dfb	c2 20		rep #$20	                REP #$20        ; set A long
.393dfd	a9 80 00	lda #$0080	                LDA #$0080;
.393e00	85 28		sta $28		                STA OPL2_REG_REGION
.393e02	20 b5 40	jsr $3940b5	                JSR OPL2_GET_REG_OFFSET
.393e05	e2 20		sep #$20	                SEP #$20        ; set A short
.393e07	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393e09	29 0f		and #$0f	                AND #$0F
.393e0b	0a		asl a		                ASL
.393e0c	0a		asl a		                ASL
.393e0d	0a		asl a		                ASL
.393e0e	0a		asl a		                ASL
.393e0f	85 32		sta $32		                STA OPL2_PARAMETER0
.393e11	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393e13	29 0f		and #$0f	                AND #$0F
.393e15	05 32		ora $32		                ORA OPL2_PARAMETER0
.393e17	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393e19	6b		rtl		                RTL
.393e1a					OPL2_GET_SUSTAIN
.393e1a	48		pha		                PHA             ; begin setdp macro
.393e1b	08		php		                PHP
.393e1c	c2 20		rep #$20	                REP #$20        ; set A long
.393e1e	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393e21	5b		tcd		                TCD
.393e22	28		plp		                PLP
.393e23	68		pla		                PLA             ; end setdp macro
.393e24	c2 20		rep #$20	                REP #$20        ; set A long
.393e26	a9 80 00	lda #$0080	                LDA #$0080
.393e29	85 28		sta $28		                STA OPL2_REG_REGION
.393e2b	20 b5 40	jsr $3940b5	                JSR OPL2_GET_REG_OFFSET
.393e2e	e2 20		sep #$20	                SEP #$20        ; set A short
.393e30	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393e32	29 f0		and #$f0	                AND #$F0
.393e34	4a		lsr a		                LSR
.393e35	4a		lsr a		                LSR
.393e36	4a		lsr a		                LSR
.393e37	4a		lsr a		                LSR
.393e38	6b		rtl		                RTL
.393e39					OPL2_SET_RELEASE
.393e39	48		pha		                PHA             ; begin setdp macro
.393e3a	08		php		                PHP
.393e3b	c2 20		rep #$20	                REP #$20        ; set A long
.393e3d	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393e40	5b		tcd		                TCD
.393e41	28		plp		                PLP
.393e42	68		pla		                PLA             ; end setdp macro
.393e43	c2 20		rep #$20	                REP #$20        ; set A long
.393e45	a9 80 00	lda #$0080	                LDA #$0080;
.393e48	85 28		sta $28		                STA OPL2_REG_REGION
.393e4a	20 b5 40	jsr $3940b5	                JSR OPL2_GET_REG_OFFSET
.393e4d	e2 20		sep #$20	                SEP #$20        ; set A short
.393e4f	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393e51	29 0f		and #$0f	                AND #$0F
.393e53	85 32		sta $32		                STA OPL2_PARAMETER0
.393e55	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393e57	29 f0		and #$f0	                AND #$F0
.393e59	05 32		ora $32		                ORA OPL2_PARAMETER0
.393e5b	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393e5d	6b		rtl		                RTL
.393e5e					OPL2_GET_RELEASE
.393e5e	48		pha		                PHA             ; begin setdp macro
.393e5f	08		php		                PHP
.393e60	c2 20		rep #$20	                REP #$20        ; set A long
.393e62	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393e65	5b		tcd		                TCD
.393e66	28		plp		                PLP
.393e67	68		pla		                PLA             ; end setdp macro
.393e68	c2 20		rep #$20	                REP #$20        ; set A long
.393e6a	a9 80 00	lda #$0080	                LDA #$0080
.393e6d	85 28		sta $28		                STA OPL2_REG_REGION
.393e6f	20 b5 40	jsr $3940b5	                JSR OPL2_GET_REG_OFFSET
.393e72	e2 20		sep #$20	                SEP #$20        ; set A short
.393e74	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393e76	29 0f		and #$0f	                AND #$0F
.393e78	6b		rtl		                RTL
.393e79					OPL2_SET_FNUMBER
.393e79	48		pha		                PHA             ; begin setdp macro
.393e7a	08		php		                PHP
.393e7b	c2 20		rep #$20	                REP #$20        ; set A long
.393e7d	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393e80	5b		tcd		                TCD
.393e81	28		plp		                PLP
.393e82	68		pla		                PLA             ; end setdp macro
.393e83	e2 20		sep #$20	                SEP #$20        ; set A short
.393e85	18		clc		                CLC
.393e86	a5 27		lda $27		                LDA OPL2_CHANNEL
.393e88	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393e8a	69 a0		adc #$a0	                ADC #$A0
.393e8c	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393e8e	a9 00		lda #$00	                LDA #$00
.393e90	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393e92	c2 30		rep #$30	                REP #$30        ; set A&X long
.393e94	18		clc		                CLC
.393e95	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393e98	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393e9a	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393e9c	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393e9f	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393ea1	e2 20		sep #$20	                SEP #$20        ; set A short
.393ea3	a5 32		lda $32		                LDA OPL2_PARAMETER0     ; Load the first 8 Bits Value of FNumber
.393ea5	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]  ; Load
.393ea7	18		clc		                CLC
.393ea8	a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.393eaa	69 10		adc #$10	                ADC #$10
.393eac	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393eae	a5 33		lda $33		                LDA OPL2_PARAMETER1
.393eb0	29 03		and #$03	                AND #$03
.393eb2	85 33		sta $33		                STA OPL2_PARAMETER1
.393eb4	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393eb6	29 fc		and #$fc	                AND #$FC
.393eb8	05 33		ora $33		                ORA OPL2_PARAMETER1
.393eba	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393ebc	6b		rtl		                RTL
.393ebd					OPL2_GET_FNUMBER
.393ebd	48		pha		                PHA             ; begin setdp macro
.393ebe	08		php		                PHP
.393ebf	c2 20		rep #$20	                REP #$20        ; set A long
.393ec1	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393ec4	5b		tcd		                TCD
.393ec5	28		plp		                PLP
.393ec6	68		pla		                PLA             ; end setdp macro
.393ec7	e2 20		sep #$20	                SEP #$20        ; set A short
.393ec9	18		clc		                CLC
.393eca	a5 27		lda $27		                LDA OPL2_CHANNEL
.393ecc	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393ece	69 a0		adc #$a0	                ADC #$A0
.393ed0	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393ed2	a9 00		lda #$00	                LDA #$00
.393ed4	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393ed6	c2 30		rep #$30	                REP #$30        ; set A&X long
.393ed8	18		clc		                CLC
.393ed9	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393edc	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393ede	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393ee0	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393ee3	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393ee5	e2 20		sep #$20	                SEP #$20        ; set A short
.393ee7	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393ee9	85 32		sta $32		                STA OPL2_PARAMETER0
.393eeb	18		clc		                CLC
.393eec	a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.393eee	69 10		adc #$10	                ADC #$10
.393ef0	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393ef2	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393ef4	29 03		and #$03	                AND #$03
.393ef6	85 33		sta $33		                STA OPL2_PARAMETER1
.393ef8	6b		rtl		                RTL
.393ef9					OPL2_Set_Frequency
.393ef9	6b		rtl		                RTL
.393efa					OPL2_Get_Frequency
.393efa	6b		rtl		                RTL
.393efb					OPL2_SET_BLOCK
.393efb	48		pha		                PHA             ; begin setdp macro
.393efc	08		php		                PHP
.393efd	c2 20		rep #$20	                REP #$20        ; set A long
.393eff	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393f02	5b		tcd		                TCD
.393f03	28		plp		                PLP
.393f04	68		pla		                PLA             ; end setdp macro
.393f05	e2 20		sep #$20	                SEP #$20        ; set A short
.393f07	18		clc		                CLC
.393f08	a5 27		lda $27		                LDA OPL2_CHANNEL
.393f0a	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393f0c	69 b0		adc #$b0	                ADC #$B0
.393f0e	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393f10	a9 00		lda #$00	                LDA #$00
.393f12	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393f14	c2 30		rep #$30	                REP #$30        ; set A&X long
.393f16	18		clc		                CLC
.393f17	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393f1a	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393f1c	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393f1e	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393f21	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393f23	e2 20		sep #$20	                SEP #$20        ; set A short
.393f25	a5 31		lda $31		                LDA OPL2_OCTAVE
.393f27	29 07		and #$07	                AND #$07
.393f29	0a		asl a		                ASL
.393f2a	0a		asl a		                ASL
.393f2b	85 31		sta $31		                STA OPL2_OCTAVE
.393f2d	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393f2f	29 e3		and #$e3	                AND #$E3
.393f31	05 31		ora $31		                ORA OPL2_OCTAVE
.393f33	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393f35	60		rts		                RTS
.393f36					OPL2_SET_KEYON
.393f36	48		pha		                PHA             ; begin setdp macro
.393f37	08		php		                PHP
.393f38	c2 20		rep #$20	                REP #$20        ; set A long
.393f3a	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393f3d	5b		tcd		                TCD
.393f3e	28		plp		                PLP
.393f3f	68		pla		                PLA             ; end setdp macro
.393f40	e2 20		sep #$20	                SEP #$20        ; set A short
.393f42	18		clc		                CLC
.393f43	a5 27		lda $27		                LDA OPL2_CHANNEL
.393f45	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393f47	69 b0		adc #$b0	                ADC #$B0
.393f49	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393f4b	a9 00		lda #$00	                LDA #$00
.393f4d	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393f4f	c2 30		rep #$30	                REP #$30        ; set A&X long
.393f51	18		clc		                CLC
.393f52	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393f55	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393f57	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393f59	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393f5c	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393f5e	e2 20		sep #$20	                SEP #$20        ; set A short
.393f60	a5 32		lda $32		                LDA OPL2_PARAMETER0
.393f62	29 01		and #$01	                AND #$01
.393f64	f0 02		beq $393f68	                BEQ SET_KEYON_OFF
.393f66	a9 20		lda #$20	                LDA #$20
.393f68					    SET_KEYON_OFF
.393f68	85 32		sta $32		                STA OPL2_PARAMETER0
.393f6a	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393f6c	29 df		and #$df	                AND #$DF
.393f6e	05 32		ora $32		                ORA OPL2_PARAMETER0
.393f70	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393f72	60		rts		                RTS
.393f73					OPL2_SET_FEEDBACK
.393f73	48		pha		                PHA             ; begin setdp macro
.393f74	08		php		                PHP
.393f75	c2 20		rep #$20	                REP #$20        ; set A long
.393f77	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393f7a	5b		tcd		                TCD
.393f7b	28		plp		                PLP
.393f7c	68		pla		                PLA             ; end setdp macro
.393f7d	e2 20		sep #$20	                SEP #$20        ; set A short
.393f7f	18		clc		              CLC
.393f80	a5 27		lda $27		              LDA OPL2_CHANNEL
.393f82	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393f84	69 c0		adc #$c0	              ADC #$C0
.393f86	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393f88	a9 00		lda #$00	              LDA #$00
.393f8a	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393f8c	c2 30		rep #$30	                REP #$30        ; set A&X long
.393f8e	18		clc		              CLC
.393f8f	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393f92	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393f94	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393f96	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393f99	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393f9b	e2 20		sep #$20	                SEP #$20        ; set A short
.393f9d	a5 32		lda $32		              LDA OPL2_PARAMETER0
.393f9f	29 07		and #$07	              AND #$07
.393fa1	0a		asl a		              ASL
.393fa2	85 32		sta $32		              STA OPL2_PARAMETER0
.393fa4	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393fa6	29 01		and #$01	              AND #$01
.393fa8	05 32		ora $32		              ORA OPL2_PARAMETER0
.393faa	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393fac	6b		rtl		                RTL
.393fad					OPL2_SET_SYNTHMODE
.393fad	48		pha		                PHA             ; begin setdp macro
.393fae	08		php		                PHP
.393faf	c2 20		rep #$20	                REP #$20        ; set A long
.393fb1	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393fb4	5b		tcd		                TCD
.393fb5	28		plp		                PLP
.393fb6	68		pla		                PLA             ; end setdp macro
.393fb7	08		php		              PHP ; Push the Carry
.393fb8	e2 20		sep #$20	                SEP #$20        ; set A short
.393fba	18		clc		              CLC
.393fbb	a5 27		lda $27		              LDA OPL2_CHANNEL
.393fbd	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393fbf	69 c0		adc #$c0	              ADC #$C0
.393fc1	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393fc3	a9 00		lda #$00	              LDA #$00
.393fc5	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393fc7	c2 30		rep #$30	                REP #$30        ; set A&X long
.393fc9	18		clc		              CLC
.393fca	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393fcd	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393fcf	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393fd1	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393fd4	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393fd6	28		plp		              PLP ; Pull the Carry out
.393fd7	e2 20		sep #$20	                SEP #$20        ; set A short
.393fd9	b0 08		bcs $393fe3	              BCS OPL2_Set_Synthmode_Set;
.393fdb	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393fdd	29 fe		and #$fe	              AND #$FE
.393fdf	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393fe1	80 06		bra $393fe9	              BRA OPL2_Set_Synthmode_Exit
.393fe3					OPL2_Set_Synthmode_Set
.393fe3	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393fe5	09 01		ora #$01	              ORA #$01
.393fe7	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393fe9					OPL2_Set_Synthmode_Exit
.393fe9	6b		rtl		                RTL
.393fea					OPL2_SET_DEEPTREMOLO
.393fea	48		pha		                PHA             ; begin setdp macro
.393feb	08		php		                PHP
.393fec	c2 20		rep #$20	                REP #$20        ; set A long
.393fee	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393ff1	5b		tcd		                TCD
.393ff2	28		plp		                PLP
.393ff3	68		pla		                PLA             ; end setdp macro
.393ff4	c2 20		rep #$20	                REP #$20        ; set A long
.393ff6	a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.393ff9	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393ffb	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393ffe	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.394000	e2 20		sep #$20	                SEP #$20        ; set A short
.394002	b0 08		bcs $39400c	              BCS OPL2_Set_DeepTremolo_Set;
.394004	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.394006	29 7f		and #$7f	              AND #$7F
.394008	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39400a	80 06		bra $394012	              BRA OPL2_Set_DeepTremolo_Exit
.39400c					OPL2_Set_DeepTremolo_Set
.39400c	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39400e	09 80		ora #$80	              ORA #$80
.394010	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.394012					OPL2_Set_DeepTremolo_Exit
.394012	6b		rtl		                RTL
.394013					OPL2_SET_DEEPVIBRATO
.394013	48		pha		                PHA             ; begin setdp macro
.394014	08		php		                PHP
.394015	c2 20		rep #$20	                REP #$20        ; set A long
.394017	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39401a	5b		tcd		                TCD
.39401b	28		plp		                PLP
.39401c	68		pla		                PLA             ; end setdp macro
.39401d	c2 20		rep #$20	                REP #$20        ; set A long
.39401f	a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.394022	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.394024	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.394027	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.394029	e2 20		sep #$20	                SEP #$20        ; set A short
.39402b	b0 08		bcs $394035	              BCS OPL2_Set_DeepVibrato_Set;
.39402d	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39402f	29 bf		and #$bf	              AND #$BF
.394031	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.394033	80 06		bra $39403b	              BRA OPL2_Set_DeepVibrato_Exit
.394035					OPL2_Set_DeepVibrato_Set
.394035	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.394037	09 40		ora #$40	              ORA #$40
.394039	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39403b					OPL2_Set_DeepVibrato_Exit
.39403b	6b		rtl		                RTL
.39403c					OPL2_SET_PERCUSSION
.39403c	48		pha		                PHA             ; begin setdp macro
.39403d	08		php		                PHP
.39403e	c2 20		rep #$20	                REP #$20        ; set A long
.394040	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.394043	5b		tcd		                TCD
.394044	28		plp		                PLP
.394045	68		pla		                PLA             ; end setdp macro
.394046	c2 20		rep #$20	                REP #$20        ; set A long
.394048	a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.39404b	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.39404d	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.394050	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.394052	e2 20		sep #$20	                SEP #$20        ; set A short
.394054	b0 08		bcs $39405e	                BCS OPL2_Set_Percussion_Set;
.394056	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.394058	29 df		and #$df	                AND #$DF
.39405a	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.39405c	80 06		bra $394064	                BRA OPL2_Set_Percussion_Exit
.39405e					OPL2_Set_Percussion_Set
.39405e	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.394060	09 20		ora #$20	                ORA #$20
.394062	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.394064					OPL2_Set_Percussion_Exit
.394064	6b		rtl		                RTL
.394065					OPL2_SET_DRUMS
.394065	48		pha		                PHA             ; begin setdp macro
.394066	08		php		                PHP
.394067	c2 20		rep #$20	                REP #$20        ; set A long
.394069	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39406c	5b		tcd		                TCD
.39406d	28		plp		                PLP
.39406e	68		pla		                PLA             ; end setdp macro
.39406f	c2 20		rep #$20	                REP #$20        ; set A long
.394071	a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.394074	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.394076	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.394079	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.39407b	e2 20		sep #$20	                SEP #$20        ; set A short
.39407d	a5 32		lda $32		                LDA OPL2_PARAMETER0
.39407f	29 1f		and #$1f	                AND #$1F
.394081	85 32		sta $32		                STA OPL2_PARAMETER0
.394083	49 ff		eor #$ff	                EOR #$FF
.394085	85 33		sta $33		                STA OPL2_PARAMETER1
.394087	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.394089	25 33		and $33		                AND OPL2_PARAMETER1
.39408b	05 32		ora $32		                ORA OPL2_PARAMETER0
.39408d	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.39408f	6b		rtl		                RTL
.394090					OPL2_SET_WAVEFORM
.394090	48		pha		                PHA             ; begin setdp macro
.394091	08		php		                PHP
.394092	c2 20		rep #$20	                REP #$20        ; set A long
.394094	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.394097	5b		tcd		                TCD
.394098	28		plp		                PLP
.394099	68		pla		                PLA             ; end setdp macro
.39409a	c2 20		rep #$20	                REP #$20        ; set A long
.39409c	a9 e0 00	lda #$00e0	                LDA #$00E0;
.39409f	85 28		sta $28		                STA OPL2_REG_REGION
.3940a1	20 b5 40	jsr $3940b5	                JSR OPL2_GET_REG_OFFSET
.3940a4	e2 20		sep #$20	                SEP #$20        ; set A short
.3940a6	a5 32		lda $32		                LDA OPL2_PARAMETER0
.3940a8	29 03		and #$03	                AND #$03
.3940aa	85 32		sta $32		                STA OPL2_PARAMETER0
.3940ac	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3940ae	29 fc		and #$fc	                AND #$FC
.3940b0	05 32		ora $32		                ORA OPL2_PARAMETER0
.3940b2	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3940b4	6b		rtl		                RTL
.3940b5					OPL2_GET_REG_OFFSET
.3940b5	e2 30		sep #$30	                SEP #$30        ; set A&X short
.3940b7	a5 27		lda $27		                LDA OPL2_CHANNEL
.3940b9	29 0f		and #$0f	                AND #$0F
.3940bb	aa		tax		                TAX
.3940bc	a5 26		lda $26		                LDA OPL2_OPERATOR   ; 0 = operator 1, other = operator 2
.3940be	d0 06		bne $3940c6	                BNE OPL2_Get_Register_Offset_l0
.3940c0	bf fd 16 39	lda $3916fd,x	                LDA @lregisterOffsets_operator0, X
.3940c4	80 04		bra $3940ca	                BRA OPL2_Get_Register_Offset_exit
.3940c6					OPL2_Get_Register_Offset_l0
.3940c6	bf 06 17 39	lda $391706,x	                LDA @lregisterOffsets_operator1, X
.3940ca					OPL2_Get_Register_Offset_exit
.3940ca	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.3940cc	a9 00		lda #$00	                LDA #$00
.3940ce	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.3940d0	c2 30		rep #$30	                REP #$30        ; set A&X long
.3940d2	18		clc		                CLC
.3940d3	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.3940d6	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.3940d8	65 28		adc $28		                ADC OPL2_REG_REGION ; Ex: $20, or $40, $60, $80 (in 16bits)
.3940da	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.3940dc	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.3940df	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.3940e1	60		rts		                RTS

;******  Return to file: src\kernel.asm


;******  Processing file: src\sdcard_controller_def.asm

=$afea00				SDC_VERSION_REG         = $AFEA00    ; Ought to read 12
=$afea01				SDC_CONTROL_REG         = $AFEA01    ; Bit0 1 = Reset core logic, and registers. Self clearing
=$afea02				SDC_TRANS_TYPE_REG      = $AFEA02  ; Bit[1:0]
=$00					SDC_TRANS_DIRECT      = $00   ; 00 = Direct Access
=$01					SDC_TRANS_INIT_SD     = $01   ; 01 = Init SD
=$02					SDC_TRANS_READ_BLK    = $02   ; 10 = RW_READ_BLOCK (512 Bytes)
=$03					SDC_TRANS_WRITE_BLK   = $03   ; 11 = RW_WRITE_SD_BLOCK
=$afea03				SDC_TRANS_CONTROL_REG   = $AFEA03
=$01					SDC_TRANS_START         = $01
=$afea04				SDC_TRANS_STATUS_REG    = $AFEA04
=$01					SDC_TRANS_BUSY          = $01     ;  1= Transaction Busy
=$afea05				SDC_TRANS_ERROR_REG     = $AFEA05
=$00					SDC_TRANS_INIT_NO_ERR   = $00   ; Init Error Report [1:0]
=$01					SDC_TRANS_INIT_CMD0_ERR = $01
=$02					SDC_TRANS_INIT_CMD1_ERR = $02
=$00					SDC_TRANS_RD_NO_ERR     = $00   ; Read Error Report [3:2]
=$04					SDC_TRANS_RD_CMD_ERR    = $04
=$08					SDC_TRANS_RD_TOKEN_ERR  = $08
=$00					SDC_TRANS_WR_NO_ERR     = $00   ; Write Report Error  [5:4]
=$10					SDC_TRANS_WR_CMD_ERR    = $10   ;
=$20					SDC_TRANS_WR_DATA_ERR   = $20
=$30					SDC_TRANS_WR_BUSY_ERR   = $30
=$afea06				SDC_DIRECT_ACCESS_REG   = $AFEA06 ; SPI Direct Read and Write - Set DATA before initiating direct Access Transaction
=$afea07				SDC_SD_ADDR_7_0_REG     = $AFEA07 ; Set the ADDR before a block read or block write
=$afea08				SDC_SD_ADDR_15_8_REG    = $AFEA08 ; Addr0 [8:0] Always should be 0, since each block is 512Bytes
=$afea09				SDC_SD_ADDR_23_16_REG   = $AFEA09
=$afea0a				SDC_SD_ADDR_31_24_REG   = $AFEA0A
=$afea0b				SDC_SPI_CLK_DEL_REG     = $AFEA0B
=$afea10				SDC_RX_FIFO_DATA_REG    = $AFEA10 ; Data from the Block Read
=$afea12				SDC_RX_FIFO_DATA_CNT_HI = $AFEA12 ; How many Bytes in the FIFO HI
=$afea13				SDC_RX_FIFO_DATA_CNT_LO = $AFEA13 ; How many Bytes in the FIFO LO
=$afea14				SDC_RX_FIFO_CTRL_REG    = $AFEA14 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)
=$afea20				SDC_TX_FIFO_DATA_REG    = $AFEA20 ; Write Data Block here
=$afea24				SDC_TX_FIFO_CTRL_REG    = $AFEA24 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)

;******  Return to file: src\kernel.asm


;******  Processing file: src\sdos.asm


;******  Processing file: src\sdos_fat.asm


;******  Processing file: src\sdos_bios.asm

=$80					BIOS_TIMEOUT = $80              ; Flag to indicate if a time out has occurred (see ISETTIMEOUT)
=0					BIOS_DEV_FDC = 0                ; Floppy 0
=1					BIOS_DEV_FD1 = 1                ; Future support: Floppy 1 (not likely to be attached)
=2					BIOS_DEV_SD = 2                 ; SD card, partition 0
=3					BIOS_DEV_SD1 = 3                ; Future support: SD card, partition 1
=4					BIOS_DEV_SD2 = 4                ; Future support: SD card, partition 2
=5					BIOS_DEV_SD3 = 5                ; Future support: SD card, partition 3
=6					BIOS_DEV_HD0 = 6                ; Future support: IDE Drive 0, partition 0
=7					BIOS_DEV_HD1 = 7                ; Future support: IDE Drive 0, partition 1
=8					BIOS_DEV_HD2 = 8                ; Future support: IDE Drive 0, partition 2
=9					BIOS_DEV_HD3 = 9                ; Future support: IDE Drive 0, partition 3
=$80					BIOS_ERR_BADDEV = $80           ; BIOS bad device # error
=$81					BIOS_ERR_MOUNT = $81            ; BIOS failed to mount the device
=$82					BIOS_ERR_READ = $82             ; BIOS failed to read from a device
=$83					BIOS_ERR_WRITE = $83            ; BIOS failed to write to a device
=$84					BIOS_ERR_TRACK = $84            ; BIOS failed to seek to the correct track
=$85					BIOS_ERR_CMD = $85              ; A general block device command error
=$86					BIOS_ERR_WRITEPROT = $86        ; The media was write-protected
=$87					BIOS_ERR_NOMEDIA = $87          ; No media detected... unable to read/write in time
=$88					BIOS_ERR_RESULT = $88           ; Couldn't get the result bytes for some reason
=$89					BIOS_ERR_OOS = $89              ; FDC state is somehow out of sync with the driver.
=$8a					BIOS_ERR_NOTATA = $8A           ; IDE drive is not ATA
=$8b					BIOS_ERR_NOTINIT = $8B          ; Could not initilize the device
=$8c					BIOS_ERR_TIMEOUT = $8C          ; Timeout error
.3940e2					ITRACE
.3940e2	08		php		                PHP
.3940e3	c2 30		rep #$30	                REP #$30        ; set A&X long
.3940e5	8b		phb		                PHB                 ; Print the text
.3940e6	a3 06		lda $06,s	                LDA #6,S            ; Get bits[15..0] of string pointer
.3940e8	aa		tax		                TAX                 ; ... into X
.3940e9	e2 20		sep #$20	                SEP #$20        ; set A short
.3940eb	a3 08		lda $08,s	                LDA #8,S            ; Get bits[23..16] of string pointer
.3940ed	48		pha		                PHA
.3940ee	ab		plb		                PLB                 ; ... into B
.3940ef	22 87 07 39	jsl $390787	                JSL IPUTS           ; Print the string
.3940f3	c2 20		rep #$20	                REP #$20        ; set A long
.3940f5	a3 04		lda $04,s	                LDA #4,S            ; Move P and return address down over the string pointer
.3940f7	83 08		sta $08,s	                STA #8,S
.3940f9	a3 02		lda $02,s	                LDA #2,S
.3940fb	83 06		sta $06,s	                STA #6,S
.3940fd	ab		plb		                PLB
.3940fe	68		pla		                PLA                 ; Clean up the stack
.3940ff	68		pla		                PLA
.394100	28		plp		                PLP
.394101	6b		rtl		                RTL
.394102					ISETTIMEOUT
.394102	8b		phb		                PHB
.394103	0b		phd		                PHD
.394104	08		php		                PHP
.394105	48		pha		                PHA             ; begin setdbr macro
.394106	08		php		                PHP
.394107	e2 20		sep #$20	                SEP #$20        ; set A short
.394109	a9 00		lda #$00	                LDA #0
.39410b	48		pha		                PHA
.39410c	ab		plb		                PLB
.39410d	28		plp		                PLP
.39410e	68		pla		                PLA             ; end setdbr macro
.39410f	48		pha		                PHA             ; begin setdp macro
.394110	08		php		                PHP
.394111	c2 20		rep #$20	                REP #$20        ; set A long
.394113	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394116	5b		tcd		                TCD
.394117	28		plp		                PLP
.394118	68		pla		                PLA             ; end setdp macro
.394119	78		sei		                SEI                             ; We don't want to be interrupted
.39411a	e2 20		sep #$20	                SEP #$20        ; set A short
.39411c	85 0d		sta $032d	                STA @b BIOS_TIMER               ; Set the number of ticks to wait
.39411e	a5 0c		lda $032c	                LDA @b BIOS_FLAGS               ; Clear the BIOS_TIMEOUT flag
.394120	29 7f		and #$7f	                AND #~BIOS_TIMEOUT
.394122	85 0c		sta $032c	                STA @b BIOS_FLAGS
.394124	28		plp		done            PLP
.394125	2b		pld		                PLD
.394126	ab		plb		                PLB
.394127	6b		rtl		                RTL
.394128					ICMDBLOCK
.394128	0b		phd		                PHD
.394129	08		php		                PHP
.39412a	48		pha		                PHA             ; begin setdp macro
.39412b	08		php		                PHP
.39412c	c2 20		rep #$20	                REP #$20        ; set A long
.39412e	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394131	5b		tcd		                TCD
.394132	28		plp		                PLP
.394133	68		pla		                PLA             ; end setdp macro
.394134	e2 20		sep #$20	                SEP #$20        ; set A short
.394136	a5 01		lda $0321	                LDA BIOS_DEV                ; Get the device number
.394138	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Check to see if we're sending to the floppy
.39413a	d0 06		bne $394142	                BNE ret_success             ; No: just return
.39413c	22 c2 68 39	jsl $3968c2	                JSL FDC_CMDBLOCK            ; Yes: call upon the floppy code
.394140	90 0c		bcc $39414e	                BCC pass_failure
.394142					ret_success
.394142	e2 20		sep #$20	                SEP #$20        ; set A short
.394144	64 00		stz $0320	                STZ BIOS_STATUS
.394146	28		plp		                PLP
.394147	2b		pld		                PLD
.394148	38		sec		                SEC
.394149	6b		rtl		                RTL
.39414a					ret_failure
.39414a	e2 20		sep #$20	                SEP #$20        ; set A short
.39414c	85 00		sta $0320	                STA BIOS_STATUS
.39414e	28		plp		pass_failure    PLP
.39414f	2b		pld		                PLD
.394150	18		clc		                CLC
.394151	6b		rtl		                RTL
.394152					IGETBLOCK
.394152	0b		phd		                PHD
.394153	8b		phb		                PHB
.394154	08		php		                PHP
.394155	48		pha		                PHA             ; begin setdbr macro
.394156	08		php		                PHP
.394157	e2 20		sep #$20	                SEP #$20        ; set A short
.394159	a9 00		lda #$00	                LDA #0
.39415b	48		pha		                PHA
.39415c	ab		plb		                PLB
.39415d	28		plp		                PLP
.39415e	68		pla		                PLA             ; end setdbr macro
.39415f	48		pha		                PHA             ; begin setdp macro
.394160	08		php		                PHP
.394161	c2 20		rep #$20	                REP #$20        ; set A long
.394163	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394166	5b		tcd		                TCD
.394167	28		plp		                PLP
.394168	68		pla		                PLA             ; end setdp macro
.394169	e2 20		sep #$20	                SEP #$20        ; set A short
.39416b	a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.39416d	c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.39416f	f0 13		beq $394184	                BEQ sd_getblock                     ; Yes: go to the SDC GETBLOCK routine
.394171	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the floppy drive?
.394173	f0 17		beq $39418c	                BEQ fd_getblock                     ; Yes: go to the FDC GETBLOCK routine
.394175	c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.394177	f0 1b		beq $394194	                BEQ hd_getblock
.394179	a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.39417b					ret_failure
.39417b	e2 20		sep #$20	                SEP #$20        ; set A short
.39417d	85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.39417f	28		plp		                PLP
.394180	ab		plb		                PLB
.394181	2b		pld		                PLD
.394182	38		sec		                SEC                                 ; Return failure
.394183	6b		rtl		                RTL
.394184	22 e4 5d 39	jsl $395de4	sd_getblock     JSL SDC_GETBLOCK                    ; Call the SDC GETBLOCK routine
.394188	b0 12		bcs $39419c	                BCS ret_success
.39418a	80 ef		bra $39417b	                BRA ret_failure
.39418c	22 c7 66 39	jsl $3966c7	fd_getblock     JSL FDC_GETBLOCK                    ; Call the FDC GETBLOCK routine
.394190	b0 0a		bcs $39419c	                BCS ret_success
.394192	80 e7		bra $39417b	                BRA ret_failure
.394194	22 83 6c 39	jsl $396c83	hd_getblock     JSL IDE_GETBLOCK                    ; Call the IDE GETBLOCK routine
.394198	b0 02		bcs $39419c	                BCS ret_success
.39419a	80 df		bra $39417b	                BRA ret_failure
.39419c					ret_success
.39419c	e2 20		sep #$20	                SEP #$20        ; set A short
.39419e	64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.3941a0	28		plp		                PLP
.3941a1	ab		plb		                PLB
.3941a2	2b		pld		                PLD
.3941a3	38		sec		                SEC                                 ; Return success
.3941a4	6b		rtl		                RTL
.3941a5					IPUTBLOCK
.3941a5	0b		phd		                PHD
.3941a6	8b		phb		                PHB
.3941a7	08		php		                PHP
.3941a8	48		pha		                PHA             ; begin setdbr macro
.3941a9	08		php		                PHP
.3941aa	e2 20		sep #$20	                SEP #$20        ; set A short
.3941ac	a9 00		lda #$00	                LDA #0
.3941ae	48		pha		                PHA
.3941af	ab		plb		                PLB
.3941b0	28		plp		                PLP
.3941b1	68		pla		                PLA             ; end setdbr macro
.3941b2	48		pha		                PHA             ; begin setdp macro
.3941b3	08		php		                PHP
.3941b4	c2 20		rep #$20	                REP #$20        ; set A long
.3941b6	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3941b9	5b		tcd		                TCD
.3941ba	28		plp		                PLP
.3941bb	68		pla		                PLA             ; end setdp macro
.3941bc	e2 20		sep #$20	                SEP #$20        ; set A short
.3941be	a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.3941c0	c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.3941c2	f0 13		beq $3941d7	                BEQ sd_putblock                     ; Yes: go to the SDC PUTBLOCK routine
.3941c4	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the FDC?
.3941c6	f0 17		beq $3941df	                BEQ fd_putblock                     ; Yes: go to the FDC PUTBLOCK routine
.3941c8	c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.3941ca	f0 1b		beq $3941e7	                BEQ hd_putblock
.3941cc	a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.3941ce					ret_failure
.3941ce	e2 20		sep #$20	                SEP #$20        ; set A short
.3941d0	85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.3941d2	28		plp		                PLP
.3941d3	ab		plb		                PLB
.3941d4	2b		pld		                PLD
.3941d5	18		clc		                CLC                                 ; Return failure
.3941d6	6b		rtl		                RTL
.3941d7	22 84 5e 39	jsl $395e84	sd_putblock     JSL SDC_PUTBLOCK                    ; Call the SDC PUTBLOCK routine
.3941db	90 f1		bcc $3941ce	                BCC ret_failure
.3941dd	80 10		bra $3941ef	                BRA ret_success
.3941df	22 2c 67 39	jsl $39672c	fd_putblock     JSL FDC_PUTBLOCK                    ; Call the FDC PUTBLOCK routine
.3941e3	90 e9		bcc $3941ce	                BCC ret_failure
.3941e5	80 08		bra $3941ef	                BRA ret_success
.3941e7	22 14 6d 39	jsl $396d14	hd_putblock     JSL IDE_PUTBLOCK                    ; Call the IDE PUTBLOCK routine
.3941eb	90 e1		bcc $3941ce	                BCC ret_failure
.3941ed	80 00		bra $3941ef	                BRA ret_success
.3941ef					ret_success
.3941ef	e2 20		sep #$20	                SEP #$20        ; set A short
.3941f1	64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.3941f3	28		plp		                PLP
.3941f4	ab		plb		                PLB
.3941f5	2b		pld		                PLD
.3941f6	38		sec		                SEC                                 ; Return success
.3941f7	6b		rtl		                RTL

;******  Return to file: src\sdos_fat.asm


;******  Processing file: src\sdos_dir.asm

.3941f8					DOS_DIROPEN
.3941f8	da		phx		                PHX
.3941f9	5a		phy		                PHY
.3941fa	0b		phd		                PHD
.3941fb	8b		phb		                PHB
.3941fc	08		php		                PHP
.3941fd	48		pha		                PHA             ; begin setdbr macro
.3941fe	08		php		                PHP
.3941ff	e2 20		sep #$20	                SEP #$20        ; set A short
.394201	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394203	48		pha		                PHA
.394204	ab		plb		                PLB
.394205	28		plp		                PLP
.394206	68		pla		                PLA             ; end setdbr macro
.394207	48		pha		                PHA             ; begin setdp macro
.394208	08		php		                PHP
.394209	c2 20		rep #$20	                REP #$20        ; set A long
.39420b	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39420e	5b		tcd		                TCD
.39420f	28		plp		                PLP
.394210	68		pla		                PLA             ; end setdp macro
.394211	ad 20 a0	lda $38a020	                LDA ROOT_DIR_FIRST_CLUSTER  ; Set the cluster (or sector for FAT12)
.394214	8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID        ; to that of the root directory's start
.394217	ad 22 a0	lda $38a022	                LDA ROOT_DIR_FIRST_CLUSTER+2
.39421a	8d 34 a0	sta $38a034	                STA DOS_DIR_BLOCK_ID+2
.39421d	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Point to the directory cluster buffer for loading
.394220	85 1c		sta $033c	                STA DOS_BUFF_PTR
.394222	85 18		sta $0338	                STA DOS_DIR_PTR
.394224	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.394227	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394229	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.39422b	e2 20		sep #$20	                SEP #$20        ; set A short
.39422d	ad 01 a0	lda $38a001	                LDA FILE_SYSTEM             ; Check the file system
.394230	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12        ; Is it FAT12?
.394232	d0 24		bne $394258	                BNE fetch_fat32             ; No: handle processing the diretory as FAT32
.394234					fetch_fat12
.394234	e2 20		sep #$20	                SEP #$20        ; set A short
.394236	a9 00		lda #$00	                LDA #DOS_DIR_TYPE_FAT12ROOT ; Set the directory type to FAT12 root directory
.394238	8d 45 a0	sta $38a045	                STA DOS_DIR_TYPE
.39423b	c2 20		rep #$20	                REP #$20        ; set A long
.39423d	a5 18		lda $0338	                LDA DOS_DIR_PTR             ; Set the BIOS buffer pointer
.39423f	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394241	a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.394243	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394245	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA of the sector
.394248	85 02		sta $0322	                STA BIOS_LBA
.39424a	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.39424d	85 04		sta $0324	                STA BIOS_LBA+2
.39424f	22 44 10 38	jsl $381044	                JSL GETBLOCK                ; Get the sector from the FAT12 device
.394253	b0 1f		bcs $394274	                BCS do_success              ; If sucessful, set the directory cursor
.394255	82 12 17	brl $39596a	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.394258					fetch_fat32
.394258	e2 20		sep #$20	                SEP #$20        ; set A short
.39425a	a9 01		lda #$01	                LDA #DOS_DIR_TYPE_FILE      ; Set the directory type to file type (all FAT32, any FAT12 subdirectory)
.39425c	8d 45 a0	sta $38a045	                STA DOS_DIR_TYPE
.39425f	c2 20		rep #$20	                REP #$20        ; set A long
.394261	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID
.394264	85 10		sta $0330	                STA DOS_CLUS_ID
.394266	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.394269	85 12		sta $0332	                STA DOS_CLUS_ID+2
.39426b	22 db 47 39	jsl $3947db	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.39426f	b0 03		bcs $394274	                BCS do_success              ; If successful: set the directory cursor
.394271	82 f6 16	brl $39596a	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.394274	82 fa 16	brl $395971	do_success      BRL IF_SUCCESS
.394277					DOS_DIRFIRST
.394277	0b		phd		                PHD
.394278	08		php		                PHP
.394279	48		pha		                PHA             ; begin setdp macro
.39427a	08		php		                PHP
.39427b	c2 20		rep #$20	                REP #$20        ; set A long
.39427d	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394280	5b		tcd		                TCD
.394281	28		plp		                PLP
.394282	68		pla		                PLA             ; end setdp macro
.394283	c2 20		rep #$20	                REP #$20        ; set A long
.394285	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER
.394288	85 18		sta $0338	                STA DOS_DIR_PTR
.39428a	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.39428d	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.39428f	28		plp		                PLP
.394290	2b		pld		                PLD
.394291	6b		rtl		                RTL
.394292					DOS_DIRNEXT
.394292	da		phx		                PHX
.394293	5a		phy		                PHY
.394294	0b		phd		                PHD
.394295	8b		phb		                PHB
.394296	08		php		                PHP
.394297	48		pha		                PHA             ; begin setdbr macro
.394298	08		php		                PHP
.394299	e2 20		sep #$20	                SEP #$20        ; set A short
.39429b	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39429d	48		pha		                PHA
.39429e	ab		plb		                PLB
.39429f	28		plp		                PLP
.3942a0	68		pla		                PLA             ; end setdbr macro
.3942a1	48		pha		                PHA             ; begin setdp macro
.3942a2	08		php		                PHP
.3942a3	c2 20		rep #$20	                REP #$20        ; set A long
.3942a5	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3942a8	5b		tcd		                TCD
.3942a9	28		plp		                PLP
.3942aa	68		pla		                PLA             ; end setdp macro
.3942ab	c2 20		rep #$20	                REP #$20        ; set A long
.3942ad	18		clc		                CLC                         ; Advance the directory entry pointer to the next entry
.3942ae	a5 18		lda $0338	                LDA DOS_DIR_PTR
.3942b0	69 20 00	adc #$0020	                ADC #DOS_DIR_ENTRY_SIZE
.3942b3	85 18		sta $0338	                STA DOS_DIR_PTR
.3942b5	a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.3942b7	69 00 00	adc #$0000	                ADC #0
.3942ba	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.3942bc	38		sec		                SEC                         ; Check to see if we've reached the end of the sector buffer
.3942bd	a9 00 a3	lda #$a300	                LDA #<>DOS_DIR_CLUSTER_END
.3942c0	e5 18		sbc $0338	                SBC DOS_DIR_PTR
.3942c2	85 28		sta $0348	                STA DOS_TEMP
.3942c4	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER_END
.3942c7	e5 1a		sbc $033a	                SBC DOS_DIR_PTR+2
.3942c9	85 2a		sta $034a	                STA DOS_TEMP+2
.3942cb	30 0c		bmi $3942d9	                BMI get_next_block          ; Yes: try to fetch the next directory entry
.3942cd	f0 03		beq $3942d2	                BEQ check_lower
.3942cf	82 9f 16	brl $395971	                BRL IF_SUCCESS
.3942d2	a5 28		lda $0348	check_lower     LDA DOS_TEMP
.3942d4	f0 03		beq $3942d9	                BEQ get_next_block
.3942d6	82 98 16	brl $395971	                BRL IF_SUCCESS
.3942d9					get_next_block
.3942d9	e2 20		sep #$20	                SEP #$20        ; set A short
.3942db	ad 45 a0	lda $38a045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.3942de	c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE
.3942e0	f0 38		beq $39431a	                BEQ next_cluster            ; FILE TYPE: it's cluster based (FAT32, or FAT12 non-root)
.3942e2					next_sector
.3942e2	c2 20		rep #$20	                REP #$20        ; set A long
.3942e4	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID
.3942e7	1a		inc a		                INC A
.3942e8	8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID        ; Increment the sector number (FAT12 root directory is sector based)
.3942eb	c9 0a 00	cmp #$000a	                CMP #10                     ; See if we're at the end (TODO: calculate this)
.3942ee	d0 07		bne $3942f7	                BNE read_sector
.3942f0	e2 20		sep #$20	                SEP #$20        ; set A short
.3942f2	a9 00		lda #$00	                LDA #0
.3942f4	82 6f 16	brl $395966	                BRL IF_FAILURE
.3942f7					read_sector
.3942f7	c2 20		rep #$20	                REP #$20        ; set A long
.3942f9	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA to the sector #
.3942fc	85 02		sta $0322	                STA BIOS_LBA
.3942fe	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.394301	85 04		sta $0324	                STA BIOS_LBA+2
.394303	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointers to the buffer
.394306	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394308	85 18		sta $0338	                STA DOS_DIR_PTR
.39430a	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.39430d	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.39430f	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.394311	22 44 10 38	jsl $381044	                JSL GETBLOCK                ; Attempt to read the sector from the FAT12 device
.394315	b0 39		bcs $394350	                BCS do_success              ; If successful: set the directory cursor
.394317	82 50 16	brl $39596a	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.39431a					next_cluster
.39431a	c2 20		rep #$20	                REP #$20        ; set A long
.39431c	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Get the current block (cluster) ID
.39431f	85 10		sta $0330	                STA DOS_CLUS_ID
.394321	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.394324	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394326	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER
.394329	85 1c		sta $033c	                STA DOS_BUFF_PTR
.39432b	85 18		sta $0338	                STA DOS_DIR_PTR
.39432d	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.394330	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394332	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.394334	22 e6 4b 39	jsl $394be6	                JSL NEXTCLUSTER             ; Try to find the next cluster
.394338	b0 03		bcs $39433d	                BCS set_next
.39433a	82 2d 16	brl $39596a	                BRL IF_PASSFAILURE          ; If error: pass it up the chain
.39433d	a5 10		lda $0330	set_next        LDA DOS_CLUS_ID             ; Save the cluster as the current directory cluster
.39433f	8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID
.394342	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394344	8d 34 a0	sta $38a034	                STA DOS_DIR_BLOCK_ID+2
.394347	22 db 47 39	jsl $3947db	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.39434b	b0 03		bcs $394350	                BCS do_success              ; If successful: set the directory cursor
.39434d	82 1a 16	brl $39596a	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.394350	82 1e 16	brl $395971	do_success      BRL IF_SUCCESS
.394353					DOS_DIRFINDFREE
.394353	da		phx		                PHX
.394354	5a		phy		                PHY
.394355	0b		phd		                PHD
.394356	8b		phb		                PHB
.394357	08		php		                PHP
.394358	48		pha		                PHA             ; begin setdbr macro
.394359	08		php		                PHP
.39435a	e2 20		sep #$20	                SEP #$20        ; set A short
.39435c	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39435e	48		pha		                PHA
.39435f	ab		plb		                PLB
.394360	28		plp		                PLP
.394361	68		pla		                PLA             ; end setdbr macro
.394362	48		pha		                PHA             ; begin setdp macro
.394363	08		php		                PHP
.394364	c2 20		rep #$20	                REP #$20        ; set A long
.394366	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394369	5b		tcd		                TCD
.39436a	28		plp		                PLP
.39436b	68		pla		                PLA             ; end setdp macro
.39436c	22 f1 55 39	jsl $3955f1	                JSL IF_DIROPEN
.394370	b0 06		bcs $394378	                BCS start_walk
.394372	a9 08 00	lda #$0008	                LDA #DOS_ERR_NODIR          ; Return that we could not read the directory
.394375	82 28 00	brl $3943a0	                BRL ret_failure
.394378	a0 00 00	ldy #$0000	start_walk      LDY #0                      ; We check the first character of the entry
.39437b					chk_entry
.39437b	e2 20		sep #$20	                SEP #$20        ; set A short
.39437d	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the first byte of the directory entry
.39437f	f0 1c		beq $39439d	                BEQ ret_success             ; If 0: we have a blank... return it
.394381	c9 e5		cmp #$e5	                CMP #DOS_DIR_ENT_UNUSED     ; Is it an unused (deleted) entry?
.394383	f0 18		beq $39439d	                BEQ ret_success             ; Yes: return it
.394385	22 2b 56 39	jsl $39562b	                JSL IF_DIRNEXT              ; Go to the next directory entry
.394389	b0 ed		bcs $394378	                BCS start_walk              ; If we got one, start walking it
.39438b	22 a3 43 39	jsl $3943a3	                JSL DOS_DIRAPPEND           ; If there isn't one, create a blank cluster
.39438f	90 0f		bcc $3943a0	                BCC ret_failure             ; If that didn't work, return the failure
.394391	c2 20		rep #$20	                REP #$20        ; set A long
.394393	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Return the first entry
.394396	85 18		sta $0338	                STA DOS_DIR_PTR
.394398	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.39439b	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.39439d	82 d1 15	brl $395971	ret_success     BRL IF_SUCCESS
.3943a0	82 c3 15	brl $395966	ret_failure     BRL IF_FAILURE
.3943a3					DOS_DIRAPPEND
.3943a3	da		phx		                PHX
.3943a4	8b		phb		                PHB
.3943a5	0b		phd		                PHD
.3943a6	08		php		                PHP
.3943a7	48		pha		                PHA             ; begin setdbr macro
.3943a8	08		php		                PHP
.3943a9	e2 20		sep #$20	                SEP #$20        ; set A short
.3943ab	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3943ad	48		pha		                PHA
.3943ae	ab		plb		                PLB
.3943af	28		plp		                PLP
.3943b0	68		pla		                PLA             ; end setdbr macro
.3943b1	48		pha		                PHA             ; begin setdp macro
.3943b2	08		php		                PHP
.3943b3	c2 20		rep #$20	                REP #$20        ; set A long
.3943b5	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3943b8	5b		tcd		                TCD
.3943b9	28		plp		                PLP
.3943ba	68		pla		                PLA             ; end setdp macro
.3943bb	e2 20		sep #$20	                SEP #$20        ; set A short
.3943bd	ad 45 a0	lda $38a045	                LDA DOS_DIR_TYPE
.3943c0	c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE          ; Are we looking at a file type directory
.3943c2	f0 09		beq $3943cd	                BEQ clr_sector                  ; Yes: clear out the directory data
.3943c4					ret_failure
.3943c4	e2 20		sep #$20	                SEP #$20        ; set A short
.3943c6	a9 15		lda #$15	                LDA #DOS_ERR_DIRFULL            ; No: return a directory-full error
.3943c8	85 0e		sta $032e	                STA DOS_STATUS
.3943ca	82 3e 00	brl $39440b	                BRL pass_failure
.3943cd					clr_sector
.3943cd	c2 20		rep #$20	                REP #$20        ; set A long
.3943cf	a9 00 00	lda #$0000	                LDA #0
.3943d2	a2 00 00	ldx #$0000	                LDX #0
.3943d5	9d 00 a1	sta $38a100,x	clr_loop        STA DOS_DIR_CLUSTER,X           ; Clear the directory cluster
.3943d8	e8		inx		                INX
.3943d9	e8		inx		                INX
.3943da	e0 00 02	cpx #$0200	                CPX #512
.3943dd	d0 f6		bne $3943d5	                BNE clr_loop
.3943df	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER          ; Point to the new, blank directory data
.3943e2	85 1c		sta $033c	                STA DOS_BUFF_PTR
.3943e4	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.3943e7	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3943e9	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID            ; We want to append it to the current directory
.3943ec	85 10		sta $0330	                STA DOS_CLUS_ID
.3943ee	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.3943f1	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3943f3	22 07 50 39	jsl $395007	                JSL DOS_APPENDCLUS              ; Attempt to append the blank data as a new cluster
.3943f7	90 12		bcc $39440b	                BCC pass_failure                ; If there was an error, pass it up the chain
.3943f9	ad 36 a0	lda $38a036	                LDA DOS_NEW_CLUSTER             ; Set the block ID of the new directory cluster
.3943fc	8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID
.3943ff	ad 38 a0	lda $38a038	                LDA DOS_NEW_CLUSTER+2
.394402	8d 34 a0	sta $38a034	                STA DOS_DIR_BLOCK_ID+2
.394405	28		plp		ret_success     PLP
.394406	2b		pld		                PLD
.394407	ab		plb		                PLB
.394408	fa		plx		                PLX
.394409	38		sec		                SEC
.39440a	6b		rtl		                RTL
.39440b	28		plp		pass_failure    PLP
.39440c	2b		pld		                PLD
.39440d	ab		plb		                PLB
.39440e	fa		plx		                PLX
.39440f	18		clc		                CLC
.394410	6b		rtl		                RTL
.394411					DOS_DIRWRITE
.394411	da		phx		                PHX
.394412	5a		phy		                PHY
.394413	0b		phd		                PHD
.394414	8b		phb		                PHB
.394415	08		php		                PHP
.394416	48		pha		                PHA             ; begin setdbr macro
.394417	08		php		                PHP
.394418	e2 20		sep #$20	                SEP #$20        ; set A short
.39441a	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39441c	48		pha		                PHA
.39441d	ab		plb		                PLB
.39441e	28		plp		                PLP
.39441f	68		pla		                PLA             ; end setdbr macro
.394420	48		pha		                PHA             ; begin setdp macro
.394421	08		php		                PHP
.394422	c2 20		rep #$20	                REP #$20        ; set A long
.394424	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394427	5b		tcd		                TCD
.394428	28		plp		                PLP
.394429	68		pla		                PLA             ; end setdp macro
.39442a	e2 20		sep #$20	                SEP #$20        ; set A short
.39442c	ad 45 a0	lda $38a045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.39442f	c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE      ; Is it a file type directory (FAT32 or FAT12 non-root?)
.394431	f0 1f		beq $394452	                BEQ write_cluster           ; Yes: write it back using a cluster ID
.394433					write_sector
.394433	c2 20		rep #$20	                REP #$20        ; set A long
.394435	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the BIOS_LBA to the LBA of the sector
.394438	85 02		sta $0322	                STA BIOS_LBA
.39443a	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.39443d	85 04		sta $0324	                STA BIOS_LBA+2
.39443f	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.394442	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394444	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.394447	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394449	22 24 10 38	jsl $381024	                JSL PUTBLOCK                ; Try to write the sector to disk
.39444d	b0 1f		bcs $39446e	                BCS ret_success
.39444f	82 14 15	brl $395966	ret_failure     BRL IF_FAILURE
.394452					write_cluster
.394452	c2 20		rep #$20	                REP #$20        ; set A long
.394454	ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the DOS_CLUS_ID to the ID of the cluster
.394457	85 10		sta $0330	                STA DOS_CLUS_ID
.394459	ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.39445c	85 12		sta $0332	                STA DOS_CLUS_ID+2
.39445e	a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.394461	85 1c		sta $033c	                STA DOS_BUFF_PTR
.394463	a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.394466	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394468	22 18 48 39	jsl $394818	                JSL DOS_PUTCLUSTER          ; Try to write the cluster to disk
.39446c	90 e1		bcc $39444f	                BCC ret_failure
.39446e	82 00 15	brl $395971	ret_success     BRL IF_SUCCESS

;******  Return to file: src\sdos_fat.asm

.0000					DEVICE_DESC
>0000					DEVNAME         .dword ?            ; A pointer to the ASCIIZ name of the device
>0004					DEVNUMBER       .byte ?           ; The BIOS_DEV number for the device
>0005					NEXT            .dword ?            ; A pointer to the next device descriptor
.0000					DIRENTRY
>0000					SHORTNAME               .fill 11        ; $00 - The short name of the file (8 name, 3 extension)
>000b					ATTRIBUTE               .byte ?         ; $0B - The attribute bits
>000c					IGNORED1                .word ?         ; $0C - Unused (by us) bytes
>000e					CREATE_TIME             .word ?         ; $0E - Creation time
>0010					CREATE_DATE             .word ?         ; $10 - Creation date
>0012					ACCESS_DATE             .word ?         ; $12 - Last access date
>0014					CLUSTER_H               .word ?         ; $14 - High word of the first cluster #
>0016					MODIFIED_TIME           .word ?         ; $16 - Last modified time
>0018					MODIFIED_DATE           .word ?         ; $18 - Last modified date
>001a					CLUSTER_L               .word ?         ; $1A - Low word of the first cluster #
>001c					SIZE                    .dword ?        ; $1C - The size of the file (in bytes)
=$01					DOS_ATTR_RO = $01                       ; File is read-only
=$02					DOS_ATTR_HIDDEN = $02                   ; File is hidden
=$04					DOS_ATTR_SYSTEM = $04                   ; File is a system file
=$08					DOS_ATTR_VOLUME = $08                   ; Entry is the volume label
=$10					DOS_ATTR_DIR = $10                      ; Entry is a directory
=$20					DOS_ATTR_ARCH = $20                     ; Entry has changed since last backup
=$0f					DOS_ATTR_LONGNAME = $0F                 ; Entry is the long file name
.0000					FILEDESC
>0000					STATUS              .byte ?             ; The status flags of the file descriptor (open, closed, error, EOF, etc.)
>0001					DEV                 .byte ?             ; The ID of the device holding the file
>0002					PATH                .dword ?            ; Pointer to a NULL terminated path string
>0006					CLUSTER             .dword ?            ; The current cluster of the file.
>000a					FIRST_CLUSTER       .dword ?            ; The ID of the first cluster in the file
>000e					BUFFER              .dword ?            ; Pointer to a cluster-sized buffer
>0012					SIZE                .dword ?            ; The size of the file
>0016					CREATE_DATE         .word ?             ; The creation date of the file
>0018					CREATE_TIME         .word ?             ; The creation time of the file
>001a					MODIFIED_DATE       .word ?             ; The modification date of the file
>001c					MODIFIED_TIME       .word ?             ; The modification time of the file
>001e					RESERVED            .word ?             ; Two reserved bytes to bring the descriptor up to 32 bytes
=$01					FD_STAT_READ = $01                      ; The file is readable
=$02					FD_STAT_WRITE = $02                     ; The file is writable
=$10					FD_STAT_ALLOC = $10                     ; The file descriptor has been allocated
=$38					FD_STAT_OPEN = $38                      ; The file is open
=$40					FD_STAT_ERROR = $40                     ; The file is in an error condition
=$80					FD_STAT_EOF = $80                       ; The file cursor is at the end of the file
=$0fffffff				FAT_LAST_CLUSTER = $0FFFFFFF            ; Code to mark the last cluster of a file
=1					VOLUMEMAX = 1                           ; The maximum number of mounted volumes we support
=32					DOS_DIR_ENTRY_SIZE = 32                 ; The size of a directory entry
=512					DOS_SECTOR_SIZE = 512                   ; The size of a sector
=$e5					DOS_DIR_ENT_UNUSED = $E5                ; Marker for an unused directory entry
=$00					PART_TYPE_FAT12 = $00                   ; "Partition" type: FAT12, used for floppy disks
=$0c					PART_TYPE_FAT32_LBA = $0C               ; Patition type: FAT32 with LBA addressing
=$29					BPB_EXTENDED_RECORD = $29               ; If SIGNATUREB of the BPB has this byte, the volume label is valid
=0					DOS_DIR_TYPE_FAT12ROOT = 0              ; Directory is a FAT12 root directory
=1					DOS_DIR_TYPE_FILE = 1                   ; Directory is a file type directory
=8					DOS_FD_MAX = 8                          ; The maximum number of open file descriptors
=1					DOS_ERR_READ = 1                        ; We could not read a sector, check BIOS_STATUS for details
=2					DOS_ERR_NOTMBR = 2                      ; We could not find the MBR
=3					DOS_ERR_NOFAT32 = 3                     ; We could not find a FAT32 parition using LBA
=4					DOS_ERR_NOINIT = 4                      ; We could not INIT the block device
=5					DOS_ERR_VOLID = 5                       ; Volume ID sector could not be loaded
=6					DOS_ERR_FAT = 6                         ; Can't scan the FAT for some reason
=7					DOS_ERR_BADPATH = 7                     ; The path was badly formatted
=8					DOS_ERR_NODIR = 8                       ; Could not read the directory
=9					DOS_ERR_NOTFOUND = 9                    ; File/directory requested was not found
=10					DOS_ERR_NOCLUSTER = 10                  ; There are no more clusters
=11					DOS_ERR_FILEEXISTS = 11                 ; There is already a file of that name
=12					DOS_ERR_NOTOPEN = 12                    ; File has not been open
=13					DOS_ERR_NOTREAD = 13                    ; File is not open for reading
=14					DOS_ERR_NOTWRITE = 14                   ; File is not open for writing
=15					DOS_ERR_OPEN = 15                       ; File is already open
=16					DOS_ERR_PGXSIG = 16                     ; File does not have the PGX signature
=17					DOS_ERR_NOEXEC = 17                     ; File does is not an executable format
=18					DOS_ERR_MEDIAFULL = 18                  ; There are no more free clusters on the drive
=19					DOS_ERR_WRITEPROT = 19                  ; The medium is write-protected
=20					DOS_ERR_FATUPDATE = 20                  ; Can't update the FAT
=21					DOS_ERR_DIRFULL = 21                    ; The directory is full
=22					DOS_ERR_NOFD = 22                       ; No file descriptors are available for allocation
=446					PART0_OFF = 446                         ; Offset to the first partition in the MBR
=4					PART_TYPE_OFF = 4                       ; Offset to the partition's type
=8					PART_LBA_OFF = 8                        ; Offset to the LBA of the first sector of the partition
=13					PART_SECT_COUNT_OFF = 13                ; Offset to the sector count of the partition
=510					MBR_SIGNATURE = 510                     ; The offset to the MBR signature bytes
=11					BPB_BYTEPERSEC_OFF = 11                 ; Offset in the BPB sector to the Bytes Per Sector
=13					BPB_SECPERCLUS_OFF = 13                 ; Offset in the BPB sector to the Sectors Per Cluster
=14					BPB_RSRVCLUS_OFF = 14                   ; Offset in the BPB sector to the Number of Reserved Clusters
=16					BPB_NUMFAT_OFF = 16                     ; Offset in the BPB sector to the Number of FATs
=17					BPB_ROOT_MAX_ENTRY_OFF = 17             ; Offset in the BPB sector to the Maximum # of entries in the root directory (FAT12)
=19					BPB_TOTAL_SECTORS = 19                  ; Offset in the BPB sector to the number of sectors on the partition or disk (FAT12)
=$24					BPB_SECPERFAT_OFF = $24                 ; Offset in the BPB sector to the Sectors Per FAT
=38					BPB_SIGNATUREB = 38                     ; Offset in the BPB sector to the second signature byte
=39					BPB_VOLUMEID = 39                       ; Offset in the BPB sector to the volume ID
=$2c					BPB_ROOTCLUS_OFF = $2C                  ; Offset in the BPB sector to the Root Cluster Number
=510					BPB_SIGNATURE = 510                     ; The offset to the MBR signature bytes
=$38a000				DOS_HIGH_VARIABLES      = $38A000
=$38a000				DEVICE                  = $38A000       ; 1 byte - The number of the block device
=$38a001				FILE_SYSTEM             = $38A001       ; 1 byte - The type of filesystem (FAT12, FAT32, etc.)
=$38a002				PARTITION               = $38A002       ; 1 byte - The number of the partitions on the device
=$38a003				SECTORS_PER_CLUSTER     = $38A003       ; 1 byte - The number of sectors in a cluster
=$38a004				FIRSTSECTOR             = $38A004       ; 4 bytes - The LBA of the first sector on the volume
=$38a008				SECTORCOUNT             = $38A008       ; 4 bytes - The number of sectors in the volume
=$38a00c				NUM_RSRV_SEC            = $38A00C       ; 2 bytes - The number of hidden or reserved sectors
=$38a00e				CLUSTER_SIZE            = $38A00E       ; 2 bytes - The size of a cluster in bytes
=$38a010				SEC_PER_FAT             = $38A010       ; 4 bytes - The number of sectors per FAT
=$38a014				FAT_BEGIN_LBA           = $38A014       ; 4 bytes - The LBA of the first sector of FAT #1
=$38a018				FAT2_BEGIN_LBA          = $38A018       ; 4 bytes - The LBA of the first sector of FAT #2
=$38a01c				CLUSTER_BEGIN_LBA       = $38A01C       ; 4 bytes - The LBA of the first cluster in the storage area
=$38a020				ROOT_DIR_FIRST_CLUSTER  = $38A020       ; 4 bytes - The number of the first cluster in the root directory
=$38a024				ROOT_DIR_MAX_ENTRY      = $38A024       ; 2 bytes - The maximum number of entries in the root directory (0 = no limit)
=$38a026				VOLUME_ID               = $38A026       ; 4 bytes - The ID of the volume
=$38a02a				DOS_CURR_CLUS           = $38A02A       ; 4 bytes - The current cluster (for delete)
=$38a02e				DOS_NEXT_CLUS           = $38A02E       ; 4 bytes - The next cluster in a file (for delete)
=$38a032				DOS_DIR_BLOCK_ID        = $38A032       ; 4 bytes - The ID of the current directory block
=$38a036				DOS_NEW_CLUSTER         = $38A036       ; 4 bytes - Space to store a newly written cluster ID
=$38a03a				DOS_SHORT_NAME          = $38A03A       ; 11 bytes - The short name for a desired file
=$38a045				DOS_DIR_TYPE            = $38A045       ; 1 byte - a code indicating the type of the current directory (0 = cluster based, $80 = sector based)
=$38a046				DOS_CURR_DIR_ID         = $38A046       ; 4 byte - the ID of the first sector or cluster of the current directory
=$38a04a				DOS_DEV_NAMES           = $38A04A       ; 4 byte - pointer to the linked list of device names
=$38a04e				FDC_MOTOR_TIMER         = $38A04E       ; 2 bytes - count-down timer to automatically turn off the FDC spindle motor
=$38a050				DOS_MOUNT_DEV           = $38A050       ; 1 byte - the device code of the currently mounted device
=$38a100				DOS_DIR_CLUSTER         = $38A100       ; 512 bytes - A buffer for directory entries
=$38a300				DOS_DIR_CLUSTER_END     = $38A300       ; The byte just past the end of the directory cluster buffer
=$38a300				DOS_SECTOR              = $38A300       ; 512 bytes - A buffer for block device read/write
=$38a500				DOS_SECTOR_END          = $38A500       ; The byte just past the end of the cluster buffer
=$38a500				DOS_FAT_SECTORS         = $38A500       ; 1024 bytes - two sectors worth of the FAT
=$38a900				DOS_FAT_SECTORS_END     = $38A900       ; The byte just past the end of the FAT buffers
=$38a900				DOS_BOOT_SECTOR         = $38A900       ; A sector for holding the boot sector
=$38ab00				DOS_BOOT_SECTOR_END     = $38AB00
=$38ab00				DOS_SPARE_SECTOR        = $38AB00       ; A spare 512 byte buffer for loading sectors
=$38ad00				DOS_SPARE_SECTOR_END    = $38AD00
=$38ad00				DOS_SPARE_FD            = $38AD00       ; A spare file descriptor buffer
=3714336				DOS_SPARE_FD_END        = DOS_SPARE_FD + SIZE(FILEDESC)
=3714336				DOS_FILE_DESCS          = DOS_SPARE_FD_END
=3714592				DOS_FILE_DESCS_END      = DOS_FILE_DESCS + SIZE(FILEDESC) * DOS_FD_MAX
=$38b000				DOS_FILE_BUFFS          = $38B000
=3719168				DOS_FILE_BUFFS_END      = DOS_FILE_BUFFS + DOS_SECTOR_SIZE * DOS_FD_MAX
.394471					DOS_INIT
.394471	8b		phb		                PHB
.394472	0b		phd		                PHD
.394473	08		php		                PHP
.394474	48		pha		                PHA             ; begin setdbr macro
.394475	08		php		                PHP
.394476	e2 20		sep #$20	                SEP #$20        ; set A short
.394478	a9 00		lda #$00	                LDA #0
.39447a	48		pha		                PHA
.39447b	ab		plb		                PLB
.39447c	28		plp		                PLP
.39447d	68		pla		                PLA             ; end setdbr macro
.39447e	48		pha		                PHA             ; begin setdp macro
.39447f	08		php		                PHP
.394480	c2 20		rep #$20	                REP #$20        ; set A long
.394482	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394485	5b		tcd		                TCD
.394486	28		plp		                PLP
.394487	68		pla		                PLA             ; end setdp macro
.394488	e2 20		sep #$20	                SEP #$20        ; set A short
.39448a	c2 10		rep #$10	                REP #$10        ; set X long
.39448c	a2 00 00	ldx #$0000	                LDX #0                  ; Zero out all the bank 0 variables
.39448f	a9 00		lda #$00	                LDA #0
.394491	9d 20 03	sta $0320,x	b0_clr_loop     STA @w SDOS_VARIABLES,X
.394494	e8		inx		                INX
.394495	e0 15 02	cpx #$0215	                CPX #<>(FDC_CMD_RETRY - SDOS_VARIABLES + 1)
.394498	d0 f7		bne $394491	                BNE b0_clr_loop
.39449a	48		pha		                PHA             ; begin setdbr macro
.39449b	08		php		                PHP
.39449c	e2 20		sep #$20	                SEP #$20        ; set A short
.39449e	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3944a0	48		pha		                PHA
.3944a1	ab		plb		                PLB
.3944a2	28		plp		                PLP
.3944a3	68		pla		                PLA             ; end setdbr macro
.3944a4	48		pha		                PHA             ; begin setdp macro
.3944a5	08		php		                PHP
.3944a6	c2 20		rep #$20	                REP #$20        ; set A long
.3944a8	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3944ab	5b		tcd		                TCD
.3944ac	28		plp		                PLP
.3944ad	68		pla		                PLA             ; end setdp macro
.3944ae	e2 20		sep #$20	                SEP #$20        ; set A short
.3944b0	c2 10		rep #$10	                REP #$10        ; set X long
.3944b2	a2 00 00	ldx #$0000	                LDX #0                  ; Zero out all the bank $38 variables
.3944b5	a9 00		lda #$00	                LDA #0
.3944b7	9d 00 a0	sta $38a000,x	b38_clr_loop    STA @w DOS_HIGH_VARIABLES,X
.3944ba	e8		inx		                INX
.3944bb	e0 01 20	cpx #$2001	                CPX #<>(DOS_FILE_BUFFS_END - DOS_HIGH_VARIABLES + 1)
.3944be	d0 f7		bne $3944b7	                BNE b38_clr_loop
.3944c0	c2 20		rep #$20	                REP #$20        ; set A long
.3944c2	a9 70 48	lda #$4870	                LDA #<>DOS_HD_DESC      ; Initialize the device names list
.3944c5	8f 4a a0 38	sta $38a04a	                STA @l DOS_DEV_NAMES
.3944c9	a9 39 00	lda #$0039	                LDA #`DOS_HD_DESC
.3944cc	8f 4c a0 38	sta $38a04c	                STA @l DOS_DEV_NAMES+2
.3944d0	e2 20		sep #$20	                SEP #$20        ; set A short
.3944d2	a9 02		lda #$02	                LDA #BIOS_DEV_SD        ; Default to the SD card
.3944d4	85 01		sta $0321	                STA BIOS_DEV
.3944d6	a9 ff		lda #$ff	                LDA #$FF                ; Set the mounted device to a sentinel value
.3944d8	8f 50 a0 38	sta $38a050	                STA @l DOS_MOUNT_DEV
.3944dc	a9 00		lda #$00	                LDA #0
.3944de	a2 00 00	ldx #$0000	                LDX #0
.3944e1	9d 20 ad	sta $38ad20,x	fd_zero_loop    STA @w DOS_FILE_DESCS,X
.3944e4	e8		inx		                INX
.3944e5	e0 00 01	cpx #$0100	                CPX #(DOS_FILE_DESCS_END - DOS_FILE_DESCS)
.3944e8	d0 f7		bne $3944e1	                BNE fd_zero_loop
.3944ea	a9 00		lda #$00	                LDA #0
.3944ec	a2 00 00	ldx #$0000	                LDX #0
.3944ef	9d 00 b0	sta $38b000,x	sect_zero_loop  STA @w DOS_FILE_BUFFS,X
.3944f2	e8		inx		                INX
.3944f3	e0 00 10	cpx #$1000	                CPX #(DOS_FILE_BUFFS_END - DOS_FILE_BUFFS)
.3944f6	d0 f7		bne $3944ef	                BNE sect_zero_loop
.3944f8	c2 20		rep #$20	                REP #$20        ; set A long
.3944fa	a9 20 ad	lda #$ad20	                LDA #<>DOS_FILE_DESCS   ; Initialize a pointer to the file descriptors
.3944fd	85 20		sta $0340	                STA @b DOS_FD_PTR
.3944ff	a9 38 00	lda #$0038	                LDA #`DOS_FILE_DESCS
.394502	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.394504	a9 00 b0	lda #$b000	                LDA #<>DOS_FILE_BUFFS   ; Initialize a pointer to the sector buffers
.394507	85 28		sta $0348	                STA @b DOS_TEMP
.394509	a9 38 00	lda #$0038	                LDA #`DOS_FILE_BUFFS
.39450c	85 2a		sta $034a	                STA @b DOS_TEMP+2
.39450e	a2 08 00	ldx #$0008	                LDX #DOS_FD_MAX         ; Set how many file descriptors to update
.394511	a0 0e 00	ldy #$000e	fd_buff_loop    LDY #FILEDESC.BUFFER    ; Set the file descriptor's buffer pointer
.394514	a5 28		lda $0348	                LDA @b DOS_TEMP
.394516	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394518	c8		iny		                INY
.394519	c8		iny		                INY
.39451a	a5 2a		lda $034a	                LDA @b DOS_TEMP+2
.39451c	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39451e	18		clc		                CLC                     ; Advance the file descriptor pointer to the next file descriptor
.39451f	a5 20		lda $0340	                LDA @b DOS_FD_PTR
.394521	69 20 00	adc #$0020	                ADC #SIZE(FILEDESC)
.394524	85 20		sta $0340	                STA @b DOS_FD_PTR
.394526	a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.394528	69 00 00	adc #$0000	                ADC #0
.39452b	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.39452d	18		clc		                CLC                     ; Advance the sector buffer pointer to the next buffer
.39452e	a5 28		lda $0348	                LDA @b DOS_TEMP
.394530	69 00 02	adc #$0200	                ADC #DOS_SECTOR_SIZE
.394533	85 28		sta $0348	                STA @b DOS_TEMP
.394535	a5 2a		lda $034a	                LDA @b DOS_TEMP+2
.394537	69 00 00	adc #$0000	                ADC #0
.39453a	85 2a		sta $034a	                STA @b DOS_TEMP+2
.39453c	ca		dex		                DEX                     ; Count down the descriptors...
.39453d	d0 d2		bne $394511	                BNE fd_buff_loop        ; If not zero, keep setting the buffer pointers
.39453f	28		plp		                PLP
.394540	2b		pld		                PLD
.394541	ab		plb		                PLB
.394542	6b		rtl		                RTL
.394543					DOS_MOUNT
.394543	8b		phb		                PHB
.394544	0b		phd		                PHD
.394545	08		php		                PHP
.394546	48		pha		                PHA             ; begin setdbr macro
.394547	08		php		                PHP
.394548	e2 20		sep #$20	                SEP #$20        ; set A short
.39454a	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39454c	48		pha		                PHA
.39454d	ab		plb		                PLB
.39454e	28		plp		                PLP
.39454f	68		pla		                PLA             ; end setdbr macro
.394550	48		pha		                PHA             ; begin setdp macro
.394551	08		php		                PHP
.394552	c2 20		rep #$20	                REP #$20        ; set A long
.394554	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394557	5b		tcd		                TCD
.394558	28		plp		                PLP
.394559	68		pla		                PLA             ; end setdp macro
.39455a	e2 20		sep #$20	                SEP #$20        ; set A short
.39455c	a5 01		lda $0321	                LDA BIOS_DEV            ; Get the device to moount
.39455e	8f 50 a0 38	sta $38a050	try_mount       STA @l DOS_MOUNT_DEV    ; Save the device we're going to try to mount
.394562	c9 02		cmp #$02	                CMP #BIOS_DEV_SD        ; Is it the SDC?
.394564	f0 1f		beq $394585	                BEQ do_sdc_mount        ; Yes: attempt to mount it
.394566	c9 06		cmp #$06	                CMP #BIOS_DEV_HD0       ; Is it HD0?
.394568	f0 26		beq $394590	                BEQ do_ide_mount        ; Yes: attempt to mount the IDE drive
.39456a	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC       ; Is it the FDC?
.39456c	f0 0b		beq $394579	                BEQ do_fdc_mount        ; Yes: attempt to mount it
.39456e	a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return a bad device error
.394570	85 0e		sta $032e	                STA DOS_STATUS
.394572	a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV
.394574	85 00		sta $0320	                STA BIOS_STATUS
.394576	82 7c 01	brl $3946f5	                BRL ret_failure
.394579	22 98 67 39	jsl $396798	do_fdc_mount    JSL FDC_MOUNT           ; Attempt to mount the floppy disk
.39457d	b0 03		bcs $394582	                BCS fdc_success
.39457f	82 73 01	brl $3946f5	                BRL ret_failure
.394582	82 67 01	brl $3946ec	fdc_success     BRL ret_success
.394585	22 a2 5d 39	jsl $395da2	do_sdc_mount    JSL SDC_INIT            ; Yes: Initialize access to the SDC
.394589	b0 10		bcs $39459b	                BCS get_mbr             ; Continue if success
.39458b	a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.39458d	82 65 01	brl $3946f5	                BRL ret_failure
.394590	22 8e 6b 39	jsl $396b8e	do_ide_mount    JSL IDE_INIT            ; Yes: Initialize access to the IDE drive
.394594	b0 05		bcs $39459b	                BCS get_mbr             ; Continue if success
.394596	a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.394598	82 5a 01	brl $3946f5	                BRL ret_failure
.39459b					get_mbr
.39459b	c2 30		rep #$30	                REP #$30        ; set A&X long
.39459d	64 02		stz $0322	                STZ BIOS_LBA            ; Get the MBR
.39459f	64 04		stz $0324	                STZ BIOS_LBA+2
.3945a1	a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR       ; Into DOS_SECTOR
.3945a4	85 06		sta $0326	                STA BIOS_BUFF_PTR
.3945a6	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.3945a9	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3945ab	22 44 10 38	jsl $381044	                JSL GETBLOCK            ; Try to read the MBR
.3945af	b0 07		bcs $3945b8	                BCS chk_signature       ; If success, check the signature bytes
.3945b1	e2 20		sep #$20	                SEP #$20        ; set A short
.3945b3	a9 01		lda #$01	                LDA #DOS_ERR_READ       ; Otherwise: report we couldn't read the first sector
.3945b5	82 3d 01	brl $3946f5	                BRL ret_failure
.3945b8					chk_signature
.3945b8	e2 20		sep #$20	                SEP #$20        ; set A short
.3945ba	ad fe a4	lda $38a4fe	                LDA DOS_SECTOR+MBR_SIGNATURE
.3945bd	c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.3945bf	d0 07		bne $3945c8	                BNE not_mbr             ; No: signal we could find the MBR
.3945c1	ad ff a4	lda $38a4ff	                LDA DOS_SECTOR+MBR_SIGNATURE+1
.3945c4	c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.3945c6	f0 05		beq $3945cd	                BEQ chk_part_type       ; Yes: we have an MBR
.3945c8	a9 02		lda #$02	not_mbr         LDA #DOS_ERR_NOTMBR     ; Return that we didn't find the MBR
.3945ca	82 28 01	brl $3946f5	                BRL ret_failure
.3945cd	ad c2 a4	lda $38a4c2	chk_part_type   LDA DOS_SECTOR+PART0_OFF+PART_TYPE_OFF
.3945d0	c9 0c		cmp #$0c	                CMP #PART_TYPE_FAT32_LBA
.3945d2	f0 05		beq $3945d9	                BEQ get_LBA             ; Is FAT32 with LBA?
.3945d4	a9 03		lda #$03	                LDA #DOS_ERR_NOFAT32    ; No: return No FAT32 found error
.3945d6	82 1c 01	brl $3946f5	                BRL ret_failure
.3945d9	8d 01 a0	sta $38a001	get_LBA         STA FILE_SYSTEM         ; Save the file system of the partition
.3945dc	c2 20		rep #$20	                REP #$20        ; set A long
.3945de	ad c6 a4	lda $38a4c6	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF
.3945e1	8d 04 a0	sta $38a004	                STA FIRSTSECTOR
.3945e4	ad c8 a4	lda $38a4c8	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF+2
.3945e7	8d 06 a0	sta $38a006	                STA FIRSTSECTOR+2
.3945ea	ad cb a4	lda $38a4cb	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF
.3945ed	8d 08 a0	sta $38a008	                STA SECTORCOUNT
.3945f0	ad cd a4	lda $38a4cd	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF+2
.3945f3	8d 0a a0	sta $38a00a	                STA SECTORCOUNT+2
.3945f6	e2 20		sep #$20	                SEP #$20        ; set A short
.3945f8	a5 01		lda $0321	                LDA BIOS_DEV            ; Save the device number
.3945fa	8d 00 a0	sta $38a000	                STA DEVICE
.3945fd	a9 00		lda #$00	                LDA #0
.3945ff	8d 02 a0	sta $38a002	                STA PARTITION           ; For the moment, we only support the first partition
.394602	c2 20		rep #$20	                REP #$20        ; set A long
.394604	a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.394607	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394609	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.39460c	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.39460e	ad 04 a0	lda $38a004	                LDA FIRSTSECTOR
.394611	85 02		sta $0322	                STA BIOS_LBA
.394613	ad 06 a0	lda $38a006	                LDA FIRSTSECTOR+2
.394616	85 04		sta $0324	                STA BIOS_LBA+2
.394618	22 44 10 38	jsl $381044	                JSL GETBLOCK            ; Attempt to load the volume ID
.39461c	b0 1c		bcs $39463a	                BCS get_first_sec       ; Got it? Start parsing it
.39461e	e2 20		sep #$20	                SEP #$20        ; set A short
.394620	a9 05		lda #$05	                LDA #DOS_ERR_VOLID      ; Otherwise: return an error
.394622	82 d0 00	brl $3946f5	                BRL ret_failure
.394625					chk_bpb_sig
.394625	e2 20		sep #$20	                SEP #$20        ; set A short
.394627	ad fe a4	lda $38a4fe	                LDA DOS_SECTOR+BPB_SIGNATURE
.39462a	c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.39462c	d0 07		bne $394635	                BNE not_bpb             ; No: signal we could find the volume ID
.39462e	ad ff a4	lda $38a4ff	                LDA DOS_SECTOR+BPB_SIGNATURE+1
.394631	c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.394633	f0 05		beq $39463a	                BEQ get_first_sec       ; Yes: we have an volume ID
.394635	a9 05		lda #$05	not_bpb         LDA #DOS_ERR_VOLID      ; Return that we didn't find the Volume ID (BPB)
.394637	82 bb 00	brl $3946f5	                BRL ret_failure
.39463a					get_first_sec
.39463a	c2 20		rep #$20	                REP #$20        ; set A long
.39463c	ad 2c a3	lda $38a32c	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF
.39463f	8d 20 a0	sta $38a020	                STA ROOT_DIR_FIRST_CLUSTER
.394642	ad 2e a3	lda $38a32e	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF+2
.394645	8d 22 a0	sta $38a022	                STA ROOT_DIR_FIRST_CLUSTER+2
.394648	ad 0e a3	lda $38a30e	                LDA DOS_SECTOR+BPB_RSRVCLUS_OFF
.39464b	8d 0c a0	sta $38a00c	                STA NUM_RSRV_SEC
.39464e	18		clc		                CLC                     ; fat_begin_lba := FirstSector + Number_of_Reserved_Sectors
.39464f	ad 04 a0	lda $38a004	                LDA FIRSTSECTOR
.394652	6d 0c a0	adc $38a00c	                ADC NUM_RSRV_SEC
.394655	8d 14 a0	sta $38a014	                STA FAT_BEGIN_LBA
.394658	ad 06 a0	lda $38a006	                LDA FIRSTSECTOR+2
.39465b	69 00 00	adc #$0000	                ADC #0
.39465e	8d 16 a0	sta $38a016	                STA FAT_BEGIN_LBA+2
.394661	e2 20		sep #$20	                SEP #$20        ; set A short
.394663	a2 00 00	ldx #$0000	                LDX #0
.394666	bf 24 a3 38	lda $38a324,x	cpy_secperfat   LDA @l DOS_SECTOR+BPB_SECPERFAT_OFF,X
.39466a	9f 10 a0 38	sta $38a010,x	                STA @l SEC_PER_FAT,X
.39466e	e8		inx		                INX
.39466f	e0 04 00	cpx #$0004	                CPX #4
.394672	d0 f2		bne $394666	                BNE cpy_secperfat
.394674	ad 10 a0	lda $38a010	                LDA SEC_PER_FAT
.394677	0a		asl a		                ASL A
.394678	8d 1c a0	sta $38a01c	                STA CLUSTER_BEGIN_LBA
.39467b	ad 11 a0	lda $38a011	                LDA SEC_PER_FAT+1
.39467e	2a		rol a		                ROL A
.39467f	8d 1d a0	sta $38a01d	                STA CLUSTER_BEGIN_LBA+1
.394682	ad 12 a0	lda $38a012	                LDA SEC_PER_FAT+2
.394685	2a		rol a		                ROL A
.394686	8d 1e a0	sta $38a01e	                STA CLUSTER_BEGIN_LBA+2
.394689	ad 13 a0	lda $38a013	                LDA SEC_PER_FAT+3
.39468c	2a		rol a		                ROL A
.39468d	8d 1f a0	sta $38a01f	                STA CLUSTER_BEGIN_LBA+3
.394690	18		clc		                CLC
.394691	ad 1c a0	lda $38a01c	                LDA CLUSTER_BEGIN_LBA
.394694	6d 14 a0	adc $38a014	                ADC FAT_BEGIN_LBA
.394697	8d 1c a0	sta $38a01c	                STA CLUSTER_BEGIN_LBA
.39469a	ad 1d a0	lda $38a01d	                LDA CLUSTER_BEGIN_LBA+1
.39469d	6d 15 a0	adc $38a015	                ADC FAT_BEGIN_LBA+1
.3946a0	8d 1d a0	sta $38a01d	                STA CLUSTER_BEGIN_LBA+1
.3946a3	ad 1e a0	lda $38a01e	                LDA CLUSTER_BEGIN_LBA+2
.3946a6	6d 16 a0	adc $38a016	                ADC FAT_BEGIN_LBA+2
.3946a9	8d 1e a0	sta $38a01e	                STA CLUSTER_BEGIN_LBA+2
.3946ac	ad 1f a0	lda $38a01f	                LDA CLUSTER_BEGIN_LBA+3
.3946af	6d 17 a0	adc $38a017	                ADC FAT_BEGIN_LBA+3
.3946b2	8d 1f a0	sta $38a01f	                STA CLUSTER_BEGIN_LBA+3
.3946b5	e2 20		sep #$20	                SEP #$20        ; set A short
.3946b7	ad 0d a3	lda $38a30d	                LDA DOS_SECTOR+BPB_SECPERCLUS_OFF
.3946ba	8d 03 a0	sta $38a003	                STA SECTORS_PER_CLUSTER
.3946bd	18		clc		                CLC
.3946be	ad 14 a0	lda $38a014	                LDA FAT_BEGIN_LBA                       ; Compute the address of the first sector of
.3946c1	6d 10 a0	adc $38a010	                ADC SEC_PER_FAT                         ; the second copy of the FAT
.3946c4	8d 18 a0	sta $38a018	                STA FAT2_BEGIN_LBA
.3946c7	ad 15 a0	lda $38a015	                LDA FAT_BEGIN_LBA+1
.3946ca	6d 11 a0	adc $38a011	                ADC SEC_PER_FAT+1
.3946cd	8d 19 a0	sta $38a019	                STA FAT2_BEGIN_LBA+1
.3946d0	ad 16 a0	lda $38a016	                LDA FAT_BEGIN_LBA+2
.3946d3	6d 12 a0	adc $38a012	                ADC SEC_PER_FAT+2
.3946d6	8d 1a a0	sta $38a01a	                STA FAT2_BEGIN_LBA+2
.3946d9	ad 17 a0	lda $38a017	                LDA FAT_BEGIN_LBA+3
.3946dc	6d 13 a0	adc $38a013	                ADC SEC_PER_FAT+3
.3946df	8d 1b a0	sta $38a01b	                STA FAT2_BEGIN_LBA+3
.3946e2	a9 00		lda #$00	                LDA #<DOS_SECTOR_SIZE                   ; Default to one sector's worth of bytes
.3946e4	8d 0e a0	sta $38a00e	                STA CLUSTER_SIZE
.3946e7	a9 02		lda #$02	                LDA #>DOS_SECTOR_SIZE
.3946e9	8d 0f a0	sta $38a00f	                STA CLUSTER_SIZE+1
.3946ec					ret_success
.3946ec	e2 20		sep #$20	                SEP #$20        ; set A short
.3946ee	64 0e		stz $032e	                STZ DOS_STATUS          ; Set status code to 0
.3946f0	28		plp		                PLP
.3946f1	2b		pld		                PLD
.3946f2	ab		plb		                PLB
.3946f3	38		sec		                SEC
.3946f4	6b		rtl		                RTL
.3946f5					ret_failure
.3946f5	e2 20		sep #$20	                SEP #$20        ; set A short
.3946f7	85 0e		sta $032e	                STA DOS_STATUS          ; Save the status code
.3946f9	28		plp		                PLP
.3946fa	2b		pld		                PLD
.3946fb	ab		plb		                PLB
.3946fc	18		clc		                CLC
.3946fd	6b		rtl		                RTL
.3946fe					DOS_TESTBOOT
.3946fe	8b		phb		                PHB
.3946ff	0b		phd		                PHD
.394700	da		phx		                PHX
.394701	08		php		                PHP
.394702	48		pha		                PHA             ; begin setdbr macro
.394703	08		php		                PHP
.394704	e2 20		sep #$20	                SEP #$20        ; set A short
.394706	a9 00		lda #$00	                LDA #0
.394708	48		pha		                PHA
.394709	ab		plb		                PLB
.39470a	28		plp		                PLP
.39470b	68		pla		                PLA             ; end setdbr macro
.39470c	48		pha		                PHA             ; begin setdp macro
.39470d	08		php		                PHP
.39470e	c2 20		rep #$20	                REP #$20        ; set A long
.394710	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394713	5b		tcd		                TCD
.394714	28		plp		                PLP
.394715	68		pla		                PLA             ; end setdp macro
.394716	c2 10		rep #$10	                REP #$10        ; set X long
.394718					chk_dev
.394718	e2 20		sep #$20	                SEP #$20        ; set A short
.39471a	a5 01		lda $0321	                LDA @b BIOS_DEV             ; Look at the device #
.39471c	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Is it the floppy drive?
.39471e	f0 24		beq $394744	                BEQ chk_vbr_brl             ; Yes: check if BRL is in the right place in the VBR
.394720	c2 30		rep #$30	                REP #$30        ; set A&X long
.394722	a9 00 00	lda #$0000	                LDA #0                      ; Point to the MBR
.394725	85 02		sta $0322	                STA @b BIOS_LBA
.394727	85 04		sta $0324	                STA @b BIOS_LBA+2
.394729	a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR           ; And the buffer
.39472c	85 06		sta $0326	                STA @b BIOS_BUFF_PTR
.39472e	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.394731	85 08		sta $0328	                STA @b BIOS_BUFF_PTR+2
.394733	22 44 10 38	jsl $381044	                JSL GETBLOCK                ; Try to load the MBR
.394737	b0 03		bcs $39473c	                BCS chk_mbr_brl
.394739	82 47 00	brl $394783	                BRL done                    ; If failed... just return
.39473c					chk_mbr_brl
.39473c	e2 20		sep #$20	                SEP #$20        ; set A short
.39473e	af 00 a3 38	lda $38a300	                LDA @l DOS_SECTOR           ; Check the first byte of the MBR
.394742	80 04		bra $394748	                BRA chk_brl
.394744	af 3e a3 38	lda $38a33e	chk_vbr_brl     LDA @l DOS_SECTOR+FDC_BOOT_START
.394748	c9 80		cmp #$80	chk_brl         CMP #$80                    ; Is the first byte a BRL/BRA instruction?
.39474a	f0 06		beq $394752	                BEQ chk_magic               ; Yes: check for the magic text
.39474c	c9 82		cmp #$82	                CMP #$82
.39474e	f0 02		beq $394752	                BEQ chk_magic
.394750	80 31		bra $394783	                BRA done                    ; No: just return
.394752	a2 00 00	ldx #$0000	chk_magic       LDX #0
.394755	bf 03 a3 38	lda $38a303,x	magic_loop      LDA @l DOS_SECTOR+3,X       ; Check the "vendor" byte
.394759	df 88 47 39	cmp $394788,x	                CMP DOS_BOOT_MAGIC,X        ; Compare it against our boot magic code
.39475d	d0 24		bne $394783	                BNE done                    ; If it's not equal, just return
.39475f	e8		inx		                INX                         ; Otherwise, check the next one
.394760	e0 08 00	cpx #$0008	                CPX #8
.394763	d0 f0		bne $394755	                BNE magic_loop              ; Until we've checked all 8 bytes
.394765	c2 30		rep #$30	                REP #$30        ; set A&X long
.394767	a9 00 02	lda #$0200	                LDA #DOS_SECTOR_SIZE
.39476a	a2 00 a5	ldx #$a500	                LDX #<>(DOS_SECTOR+DOS_SECTOR_SIZE)
.39476d	a0 00 ab	ldy #$ab00	                LDY #<>(DOS_BOOT_SECTOR+DOS_SECTOR_SIZE)
.394770	44 38 38	mvp $38,$38	                MVP #`DOS_SECTOR, #`DOS_BOOT_SECTOR
.394773	e2 20		sep #$20	                SEP #$20        ; set A short
.394775	a5 01		lda $0321	                LDA @b BIOS_DEV             ; Check the device
.394777	c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Is it the FDC?
.394779	f0 04		beq $39477f	                BEQ jmp_fdc_start           ; Yes: jump to the start of the VBR code
.39477b	5c 00 a9 38	jmp $38a900	                JML DOS_BOOT_SECTOR         ; No: it's an MBR, start at the first byte
.39477f	5c 3e a9 38	jmp $38a93e	jmp_fdc_start   JML DOS_BOOT_SECTOR+FDC_BOOT_START
.394783	28		plp		done            PLP
.394784	2b		pld		                PLD
.394785	ab		plb		                PLB
.394786	fa		plx		                PLX
.394787	6b		rtl		                RTL
>394788	43 32 35 36 44 4f 53 20		DOS_BOOT_MAGIC  .text "C256DOS "
.394790					DOS_CALC_LBA
.394790	8b		phb		                PHB
.394791	0b		phd		                PHD
.394792	08		php		                PHP
.394793	48		pha		                PHA             ; begin setdbr macro
.394794	08		php		                PHP
.394795	e2 20		sep #$20	                SEP #$20        ; set A short
.394797	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394799	48		pha		                PHA
.39479a	ab		plb		                PLB
.39479b	28		plp		                PLP
.39479c	68		pla		                PLA             ; end setdbr macro
.39479d	48		pha		                PHA             ; begin setdp macro
.39479e	08		php		                PHP
.39479f	c2 20		rep #$20	                REP #$20        ; set A long
.3947a1	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3947a4	5b		tcd		                TCD
.3947a5	28		plp		                PLP
.3947a6	68		pla		                PLA             ; end setdp macro
.3947a7	c2 20		rep #$20	                REP #$20        ; set A long
.3947a9	38		sec		                SEC
.3947aa	a5 10		lda $0330	                LDA DOS_CLUS_ID                     ; cluster - 2
.3947ac	e9 02 00	sbc #$0002	                SBC #2
.3947af	85 28		sta $0348	                STA DOS_TEMP
.3947b1	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3947b3	e9 00 00	sbc #$0000	                SBC #0
.3947b6	85 2a		sta $034a	                STA DOS_TEMP+2
.3947b8	e2 10		sep #$10	                SEP #$10        ; set X short
.3947ba	ae 03 a0	ldx $38a003	                LDX SECTORS_PER_CLUSTER
.3947bd	e0 01		cpx #$01	mult_loop       CPX #1
.3947bf	f0 07		beq $3947c8	                BEQ add_offset
.3947c1	06 28		asl $0348	                ASL DOS_TEMP
.3947c3	26 28		rol $0348	                ROL DOS_TEMP
.3947c5	ca		dex		                DEX
.3947c6	80 f5		bra $3947bd	                BRA mult_loop
.3947c8	18		clc		add_offset      CLC
.3947c9	a5 28		lda $0348	                LDA DOS_TEMP                        ; cluster_being_lba + (cluster - 2) * SECTORS_PER_CLUSTER
.3947cb	6d 1c a0	adc $38a01c	                ADC CLUSTER_BEGIN_LBA
.3947ce	85 02		sta $0322	                STA BIOS_LBA
.3947d0	a5 2a		lda $034a	                LDA DOS_TEMP+2
.3947d2	6d 1e a0	adc $38a01e	                ADC CLUSTER_BEGIN_LBA+2
.3947d5	85 04		sta $0324	                STA BIOS_LBA+2
.3947d7	28		plp		                PLP
.3947d8	2b		pld		                PLD
.3947d9	ab		plb		                PLB
.3947da	6b		rtl		                RTL
.3947db					DOS_GETCLUSTER
.3947db	8b		phb		                PHB
.3947dc	0b		phd		                PHD
.3947dd	08		php		                PHP
.3947de	48		pha		                PHA             ; begin setdbr macro
.3947df	08		php		                PHP
.3947e0	e2 20		sep #$20	                SEP #$20        ; set A short
.3947e2	a9 00		lda #$00	                LDA #0
.3947e4	48		pha		                PHA
.3947e5	ab		plb		                PLB
.3947e6	28		plp		                PLP
.3947e7	68		pla		                PLA             ; end setdbr macro
.3947e8	48		pha		                PHA             ; begin setdp macro
.3947e9	08		php		                PHP
.3947ea	c2 20		rep #$20	                REP #$20        ; set A long
.3947ec	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3947ef	5b		tcd		                TCD
.3947f0	28		plp		                PLP
.3947f1	68		pla		                PLA             ; end setdp macro
.3947f2	c2 20		rep #$20	                REP #$20        ; set A long
.3947f4	a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.3947f6	85 06		sta $0326	                STA BIOS_BUFF_PTR
.3947f8	a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.3947fa	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3947fc	22 90 47 39	jsl $394790	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.394800	22 44 10 38	jsl $381044	                JSL GETBLOCK                        ; Get the first block of the cluster
.394804	90 09		bcc $39480f	                BCC ret_failure
.394806					ret_success
.394806	e2 20		sep #$20	                SEP #$20        ; set A short
.394808	64 0e		stz $032e	                STZ DOS_STATUS
.39480a	28		plp		                PLP
.39480b	2b		pld		                PLD
.39480c	ab		plb		                PLB
.39480d	38		sec		                SEC
.39480e	6b		rtl		                RTL
.39480f					ret_failure
.39480f	e2 20		sep #$20	                SEP #$20        ; set A short
.394811	85 0e		sta $032e	                STA DOS_STATUS
.394813	28		plp		                PLP
.394814	2b		pld		                PLD
.394815	ab		plb		                PLB
.394816	18		clc		                CLC
.394817	6b		rtl		                RTL
.394818					DOS_PUTCLUSTER
.394818	8b		phb		                PHB
.394819	0b		phd		                PHD
.39481a	08		php		                PHP
.39481b	48		pha		                PHA             ; begin setdbr macro
.39481c	08		php		                PHP
.39481d	e2 20		sep #$20	                SEP #$20        ; set A short
.39481f	a9 00		lda #$00	                LDA #0
.394821	48		pha		                PHA
.394822	ab		plb		                PLB
.394823	28		plp		                PLP
.394824	68		pla		                PLA             ; end setdbr macro
.394825	48		pha		                PHA             ; begin setdp macro
.394826	08		php		                PHP
.394827	c2 20		rep #$20	                REP #$20        ; set A long
.394829	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39482c	5b		tcd		                TCD
.39482d	28		plp		                PLP
.39482e	68		pla		                PLA             ; end setdp macro
.39482f	c2 20		rep #$20	                REP #$20        ; set A long
.394831	a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.394833	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394835	a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.394837	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394839	22 90 47 39	jsl $394790	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.39483d	22 24 10 38	jsl $381024	                JSL PUTBLOCK                        ; PUT the first block of the cluster
.394841	90 09		bcc $39484c	                BCC ret_failure
.394843					ret_success
.394843	e2 20		sep #$20	                SEP #$20        ; set A short
.394845	64 0e		stz $032e	                STZ DOS_STATUS
.394847	28		plp		                PLP
.394848	2b		pld		                PLD
.394849	ab		plb		                PLB
.39484a	38		sec		                SEC
.39484b	6b		rtl		                RTL
.39484c					ret_failure
.39484c	e2 20		sep #$20	                SEP #$20        ; set A short
.39484e	85 0e		sta $032e	                STA DOS_STATUS
.394850	28		plp		                PLP
.394851	2b		pld		                PLD
.394852	ab		plb		                PLB
.394853	18		clc		                CLC
.394854	6b		rtl		                RTL
>394855	40 46 00			DOS_FDC_NAME    .null "@F"
.394858					DOS_FDC_DESC
>394858	55 48 39 00			DEVNAME         .dword DOS_FDC_NAME            ; A pointer to the ASCIIZ name of the device
>39485c	00				DEVNUMBER       .byte BIOS_DEV_FDC           ; The BIOS_DEV number for the device
>39485d	00 00 00 00			NEXT            .dword 0            ; A pointer to the next device descriptor
>394861	40 53 00			DOS_SDC_NAME    .null "@S"
.394864					DOS_SDC_DESC
>394864	61 48 39 00			DEVNAME         .dword DOS_SDC_NAME            ; A pointer to the ASCIIZ name of the device
>394868	02				DEVNUMBER       .byte BIOS_DEV_SD           ; The BIOS_DEV number for the device
>394869	58 48 39 00			NEXT            .dword DOS_FDC_DESC            ; A pointer to the next device descriptor
>39486d	40 48 00			DOS_HDC_NAME    .null "@H"
.394870					DOS_HD_DESC
>394870	6d 48 39 00			DEVNAME         .dword DOS_HDC_NAME            ; A pointer to the ASCIIZ name of the device
>394874	06				DEVNUMBER       .byte BIOS_DEV_HD0           ; The BIOS_DEV number for the device
>394875	64 48 39 00			NEXT            .dword DOS_SDC_DESC            ; A pointer to the next device descriptor
.394879					DOS_PARSE_DEV
.394879	8b		phb		                PHB
.39487a	0b		phd		                PHD
.39487b	08		php		                PHP
.39487c	48		pha		                PHA             ; begin setdbr macro
.39487d	08		php		                PHP
.39487e	e2 20		sep #$20	                SEP #$20        ; set A short
.394880	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394882	48		pha		                PHA
.394883	ab		plb		                PLB
.394884	28		plp		                PLP
.394885	68		pla		                PLA             ; end setdbr macro
.394886	48		pha		                PHA             ; begin setdp macro
.394887	08		php		                PHP
.394888	c2 20		rep #$20	                REP #$20        ; set A long
.39488a	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39488d	5b		tcd		                TCD
.39488e	28		plp		                PLP
.39488f	68		pla		                PLA             ; end setdp macro
.394890	c2 30		rep #$30	                REP #$30        ; set A&X long
.394892	af 4a a0 38	lda $38a04a	                LDA @l DOS_DEV_NAMES        ; Point to the first device name to check
.394896	85 28		sta $0348	                STA DOS_TEMP
.394898	af 4c a0 38	lda $38a04c	                LDA @l DOS_DEV_NAMES+2
.39489c	85 2a		sta $034a	                STA DOS_TEMP+2
.39489e	a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF        ; Make DOS_STR2_PTR point to the path to check
.3948a1	85 48		sta $0368	                STA DOS_STR2_PTR
.3948a3	a9 00 00	lda #$0000	                LDA #`DOS_PATH_BUFF
.3948a6	85 4a		sta $036a	                STA DOS_STR2_PTR+2
.3948a8	a0 00 00	ldy #$0000	dev_loop        LDY #DEVICE_DESC.DEVNAME    ; Get the name of the current device into DOS_STR1_PTR
.3948ab	b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.3948ad	85 44		sta $0364	                STA DOS_STR1_PTR
.3948af	c8		iny		                INY
.3948b0	c8		iny		                INY
.3948b1	b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.3948b3	85 46		sta $0366	                STA DOS_STR1_PTR+2
.3948b5	e2 20		sep #$20	                SEP #$20        ; set A short
.3948b7	a0 00 00	ldy #$0000	                LDY #0
.3948ba	b7 44		lda [$0364],y	cmp_loop        LDA [DOS_STR1_PTR],Y        ; Get the Yth character of the device name
.3948bc	f0 24		beq $3948e2	                BEQ found                   ; If it's NULL, we found a match
.3948be	d7 48		cmp [$0368],y	                CMP [DOS_STR2_PTR],Y        ; Compare it to the Yth character of the path
.3948c0	d0 03		bne $3948c5	                BNE next_device             ; If no match, try to load the next device
.3948c2	c8		iny		                INY                         ; Go to the next character
.3948c3	80 f5		bra $3948ba	                BRA cmp_loop
.3948c5					next_device
.3948c5	c2 20		rep #$20	                REP #$20        ; set A long
.3948c7	a0 05 00	ldy #$0005	                LDY #DEVICE_DESC.NEXT       ; DOS_TEMP := DOS_TEMP->NEXT
.3948ca	b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.3948cc	48		pha		                PHA
.3948cd	c8		iny		                INY
.3948ce	c8		iny		                INY
.3948cf	b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.3948d1	85 2a		sta $034a	                STA DOS_TEMP+2
.3948d3	68		pla		                PLA
.3948d4	85 28		sta $0348	                STA DOS_TEMP
.3948d6	a5 28		lda $0348	                LDA DOS_TEMP                ; Is DOS_TEMP = NULL?
.3948d8	d0 ce		bne $3948a8	                BNE dev_loop                ; No: check this device
.3948da	a5 2a		lda $034a	                LDA DOS_TEMP+2
.3948dc	d0 ca		bne $3948a8	                BNE dev_loop
.3948de	28		plp		done            PLP                         ; Otherwise, return having not found a match
.3948df	2b		pld		                PLD
.3948e0	ab		plb		                PLB
.3948e1	6b		rtl		                RTL
.3948e2	22 f3 48 39	jsl $3948f3	found           JSL DOS_ADJUSTPATH          ; Remove the device name from the buffer
.3948e6	e2 20		sep #$20	                SEP #$20        ; set A short
.3948e8	a0 04 00	ldy #$0004	                LDY #DEVICE_DESC.DEVNUMBER  ; Set the BIOS device number from the found device
.3948eb	b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.3948ed	8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3948f1	80 eb		bra $3948de	                BRA done
.3948f3					DOS_ADJUSTPATH
.3948f3	da		phx		                PHX
.3948f4	5a		phy		                PHY
.3948f5	8b		phb		                PHB
.3948f6	0b		phd		                PHD
.3948f7	08		php		                PHP
.3948f8	48		pha		                PHA             ; begin setdbr macro
.3948f9	08		php		                PHP
.3948fa	e2 20		sep #$20	                SEP #$20        ; set A short
.3948fc	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3948fe	48		pha		                PHA
.3948ff	ab		plb		                PLB
.394900	28		plp		                PLP
.394901	68		pla		                PLA             ; end setdbr macro
.394902	48		pha		                PHA             ; begin setdp macro
.394903	08		php		                PHP
.394904	c2 20		rep #$20	                REP #$20        ; set A long
.394906	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394909	5b		tcd		                TCD
.39490a	28		plp		                PLP
.39490b	68		pla		                PLA             ; end setdp macro
.39490c	c2 30		rep #$30	                REP #$30        ; set A&X long
.39490e	84 4b		sty $036b	                STY DOS_SCRATCH                 ; Save the index to later compute the size
.394910	98		tya		                TYA                             ; Compute the address of the first source byte
.394911	18		clc		                CLC
.394912	69 00 04	adc #$0400	                ADC #<>DOS_PATH_BUFF
.394915	aa		tax		                TAX
.394916	a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF            ; Compute the destination address for the source byte
.394919	a8		tay		                TAY
.39491a	38		sec		                SEC                             ; Compute the number of bytes to copy
.39491b	a9 00 01	lda #$0100	                LDA #256
.39491e	e5 4b		sbc $036b	                SBC DOS_SCRATCH
.394920	54 00 00	mvn $00,$00	                MVN #`DOS_PATH_BUFF, #`DOS_PATH_BUFF
.394923	28		plp		                PLP
.394924	2b		pld		                PLD
.394925	ab		plb		                PLB
.394926	7a		ply		                PLY
.394927	fa		plx		                PLX
.394928	6b		rtl		                RTL
.394929					DOS_PARSE_PATH
.394929	8b		phb		                PHB
.39492a	0b		phd		                PHD
.39492b	08		php		                PHP
.39492c	48		pha		                PHA             ; begin setdbr macro
.39492d	08		php		                PHP
.39492e	e2 20		sep #$20	                SEP #$20        ; set A short
.394930	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394932	48		pha		                PHA
.394933	ab		plb		                PLB
.394934	28		plp		                PLP
.394935	68		pla		                PLA             ; end setdbr macro
.394936	48		pha		                PHA             ; begin setdp macro
.394937	08		php		                PHP
.394938	c2 20		rep #$20	                REP #$20        ; set A long
.39493a	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39493d	5b		tcd		                TCD
.39493e	28		plp		                PLP
.39493f	68		pla		                PLA             ; end setdp macro
.394940	c2 10		rep #$10	                REP #$10        ; set X long
.394942	e2 20		sep #$20	                SEP #$20        ; set A short
.394944	a2 00 00	ldx #$0000	                LDX #0
.394947	b5 e0		lda $0400,x	upcase_loop     LDA DOS_PATH_BUFF,X     ; Get the character
.394949	f0 1b		beq $394966	                BEQ parse_dev           ; If it's NULL, the path is upper case, attempt to parse the device
.39494b	c9 20		cmp #$20	                CMP #' '                ; Is a control character?
.39494d	b0 05		bcs $394954	                BGE check_case          ; No: check the case
.39494f	a9 07		lda #$07	                LDA #DOS_ERR_BADPATH    ; Yes: return a bad path error
.394951	82 64 00	brl $3949b8	                BRL ret_failure
.394954	c9 61		cmp #$61	check_case      CMP #'a'                ; Is the character lower case?
.394956	90 08		bcc $394960	                BLT next_char
.394958	c9 7b		cmp #$7b	                CMP #'z'+1
.39495a	b0 04		bcs $394960	                BGE next_char
.39495c	29 5f		and #$5f	                AND #%01011111          ; Yes: Convert to uppercase
.39495e	95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.394960	e8		inx		next_char       INX                     ; Move to the next character
.394961	e0 00 01	cpx #$0100	                CPX #$100
.394964	d0 e1		bne $394947	                BNE upcase_loop
.394966	22 79 48 39	jsl $394879	parse_dev       JSL DOS_PARSE_DEV       ; Parse and extract a device specifier ":xxx:"
.39496a	a5 e0		lda $0400	                LDA DOS_PATH_BUFF       ; Check the first character of the path
.39496c	c9 3a		cmp #$3a	                CMP #':'
.39496e	d0 07		bne $394977	                BNE clr_name            ; If not colon, treat it as a file name
.394970	a0 01 00	ldy #$0001	                LDY #1                  ; Otherwise...
.394973	22 f3 48 39	jsl $3948f3	                JSL DOS_ADJUSTPATH      ; For now, just remove the leading ":"
.394977	a0 00 00	ldy #$0000	clr_name        LDY #0                  ; Set the short name to blanks
.39497a	a9 20		lda #$20	                LDA #' '
.39497c	99 3a a0	sta $38a03a,y	clr_loop        STA DOS_SHORT_NAME,Y
.39497f	c8		iny		                INY
.394980	c0 0b 00	cpy #$000b	                CPY #11
.394983	d0 f7		bne $39497c	                BNE clr_loop
.394985	a2 00 00	ldx #$0000	                LDX #0
.394988	a0 00 00	ldy #$0000	                LDY #0
.39498b	b5 e0		lda $0400,x	cpy_name_loop   LDA DOS_PATH_BUFF,X     ; Get the character of the name
.39498d	f0 20		beq $3949af	                BEQ ret_success         ; If NULL: we've finished parsing the path
.39498f	c9 2e		cmp #$2e	                CMP #'.'                ; If it's a dot, we've finished the name part
.394991	f0 0a		beq $39499d	                BEQ cpy_ext             ; And move to the extension
.394993	99 3a a0	sta $38a03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, store it to the name portion
.394996	e8		inx		                INX
.394997	c8		iny		                INY                     ; Move to the next character
.394998	c0 08 00	cpy #$0008	                CPY #8                  ; Have we processed 8?
.39499b	d0 ee		bne $39498b	                BNE cpy_name_loop       ; No: process this one
.39499d	e8		inx		cpy_ext         INX                     ; Skip the dot
.39499e	a0 08 00	ldy #$0008	                LDY #8
.3949a1	b5 e0		lda $0400,x	cpy_ext_loop    LDA DOS_PATH_BUFF,X     ; Get the character of the extension
.3949a3	f0 0a		beq $3949af	                BEQ ret_success         ; If it's NULL, we've finished
.3949a5	99 3a a0	sta $38a03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, copy it to the short name
.3949a8	e8		inx		                INX
.3949a9	c8		iny		                INY                     ; Move to the next character
.3949aa	c0 0b 00	cpy #$000b	                CPY #11                 ; Have we processed the three ext characters?
.3949ad	d0 f2		bne $3949a1	                BNE cpy_ext_loop        ; No: process this one
.3949af					ret_success
.3949af	e2 20		sep #$20	                SEP #$20        ; set A short
.3949b1	64 0e		stz $032e	                STZ DOS_STATUS
.3949b3	28		plp		                PLP
.3949b4	2b		pld		                PLD
.3949b5	ab		plb		                PLB
.3949b6	38		sec		                SEC
.3949b7	6b		rtl		                RTL
.3949b8					ret_failure
.3949b8	e2 20		sep #$20	                SEP #$20        ; set A short
.3949ba	85 0e		sta $032e	                STA DOS_STATUS
.3949bc	28		plp		                PLP
.3949bd	2b		pld		                PLD
.3949be	ab		plb		                PLB
.3949bf	18		clc		                CLC
.3949c0	6b		rtl		                RTL
.3949c1					DOS_FINDFILE
.3949c1	8b		phb		                PHB
.3949c2	0b		phd		                PHD
.3949c3	08		php		                PHP
.3949c4	48		pha		                PHA             ; begin setdbr macro
.3949c5	08		php		                PHP
.3949c6	e2 20		sep #$20	                SEP #$20        ; set A short
.3949c8	a9 00		lda #$00	                LDA #0
.3949ca	48		pha		                PHA
.3949cb	ab		plb		                PLB
.3949cc	28		plp		                PLP
.3949cd	68		pla		                PLA             ; end setdbr macro
.3949ce	48		pha		                PHA             ; begin setdp macro
.3949cf	08		php		                PHP
.3949d0	c2 20		rep #$20	                REP #$20        ; set A long
.3949d2	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3949d5	5b		tcd		                TCD
.3949d6	28		plp		                PLP
.3949d7	68		pla		                PLA             ; end setdp macro
.3949d8	c2 30		rep #$30	                REP #$30        ; set A&X long
.3949da	22 29 49 39	jsl $394929	                JSL DOS_PARSE_PATH              ; Break out the path into its components
.3949de	b0 05		bcs $3949e5	                BCS mount                       ; If success: try to open the directory
.3949e0	28		plp		pass_failure    PLP                             ; If failure, just pass the failure back up
.3949e1	2b		pld		                PLD
.3949e2	ab		plb		                PLB
.3949e3	18		clc		                CLC
.3949e4	6b		rtl		                RTL
.3949e5	22 43 45 39	jsl $394543	mount           JSL DOS_MOUNT
.3949e9					get_directory
.3949e9	c2 20		rep #$20	                REP #$20        ; set A long
.3949eb	22 f8 41 39	jsl $3941f8	                JSL DOS_DIROPEN                 ; Get the directory
.3949ef	b0 07		bcs $3949f8	                BCS scan_entries                ; If success: start scanning the directory entries
.3949f1	e2 20		sep #$20	                SEP #$20        ; set A short
.3949f3	a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Otherwise: return a no directory error
.3949f5	82 47 00	brl $394a3f	                BRL ret_failure
.3949f8	22 77 42 39	jsl $394277	scan_entries    JSL DOS_DIRFIRST                ; Move the DIR pointer to the beginning of the sector
.3949fc					scan_loop
.3949fc	e2 20		sep #$20	                SEP #$20        ; set A short
.3949fe	a0 00 00	ldy #$0000	                LDY #0
.394a01	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y             ; Check the directory entry
.394a03	d0 05		bne $394a0a	                BNE chk_unused                  ; If there's an entry, check to see if it's unused
.394a05	a9 09		lda #$09	                LDA #DOS_ERR_NOTFOUND           ; If end-of-directory, we couldn't find a match
.394a07	82 35 00	brl $394a3f	                BRL ret_failure
.394a0a	c9 e5		cmp #$e5	chk_unused      CMP #DOS_DIR_ENT_UNUSED         ; If it's unused...
.394a0c	f0 26		beq $394a34	                BEQ next_entry                  ; Go to the next entry
.394a0e	a0 0b 00	ldy #$000b	                LDY #DIRENTRY.ATTRIBUTE         ; Check the entry's attributes
.394a11	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.394a13	89 08		bit #$08	                BIT #DOS_ATTR_VOLUME            ; Is it a volume name?
.394a15	d0 1d		bne $394a34	                BNE next_entry                  ; Yes: skip it!
.394a17	29 0f		and #$0f	                AND #DOS_ATTR_LONGNAME
.394a19	c9 0f		cmp #$0f	                CMP #DOS_ATTR_LONGNAME          ; Is it a long name field?
.394a1b	f0 17		beq $394a34	                BEQ next_entry                  ; Yes: skip it!
.394a1d	a2 00 00	ldx #$0000	                LDX #0
.394a20	a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME
.394a23	b7 18		lda [$0338],y	scan_cmp_loop   LDA [DOS_DIR_PTR],Y             ; Get the X'th character of the entry
.394a25	df 3a a0 38	cmp $38a03a,x	                CMP DOS_SHORT_NAME,X            ; And compare to the X'th character of the name we want
.394a29	d0 09		bne $394a34	                BNE next_entry                  ; If not equal: try the next entry
.394a2b	c8		iny		                INY                             ; Advance to the next character
.394a2c	e8		inx		                INX
.394a2d	e0 0b 00	cpx #$000b	                CPX #11                         ; Did we reach the end of the names?
.394a30	f0 16		beq $394a48	                BEQ match                       ; Yes: we have a match!
.394a32	80 ef		bra $394a23	                BRA scan_cmp_loop               ; No: keep checking
.394a34	22 92 42 39	jsl $394292	next_entry      JSL DOS_DIRNEXT                 ; Try to get the next directory entry
.394a38	90 05		bcc $394a3f	                BCC ret_failure                 ; If we're at the end of the directory, return a failure.
.394a3a	82 bf ff	brl $3949fc	                BRL scan_loop                   ; If found: keep scanning
.394a3d	a9 08		lda #$08	bad_dir         LDA #DOS_ERR_NODIR              ; Otherwise: fail with a NODIR error (maybe something else is better)
.394a3f					ret_failure
.394a3f	e2 20		sep #$20	                SEP #$20        ; set A short
.394a41	85 0e		sta $032e	                STA DOS_STATUS
.394a43	28		plp		                PLP
.394a44	2b		pld		                PLD
.394a45	ab		plb		                PLB
.394a46	18		clc		                CLC
.394a47	6b		rtl		                RTL
.394a48					match
.394a48	c2 20		rep #$20	                REP #$20        ; set A long
.394a4a	a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L         ; Copy the cluster number from the directory entry
.394a4d	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.394a4f	85 10		sta $0330	                STA DOS_CLUS_ID                 ; To DOS_CLUS_ID
.394a51	a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.394a54	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.394a56	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394a58					ret_success
.394a58	e2 20		sep #$20	                SEP #$20        ; set A short
.394a5a	64 0e		stz $032e	                STZ DOS_STATUS
.394a5c	28		plp		                PLP
.394a5d	2b		pld		                PLD
.394a5e	ab		plb		                PLB
.394a5f	38		sec		                SEC
.394a60	6b		rtl		                RTL
.394a61					DOS_READFILE
.394a61	8b		phb		                PHB
.394a62	0b		phd		                PHD
.394a63	08		php		                PHP
.394a64	48		pha		                PHA             ; begin setdbr macro
.394a65	08		php		                PHP
.394a66	e2 20		sep #$20	                SEP #$20        ; set A short
.394a68	a9 00		lda #$00	                LDA #0
.394a6a	48		pha		                PHA
.394a6b	ab		plb		                PLB
.394a6c	28		plp		                PLP
.394a6d	68		pla		                PLA             ; end setdbr macro
.394a6e	48		pha		                PHA             ; begin setdp macro
.394a6f	08		php		                PHP
.394a70	c2 20		rep #$20	                REP #$20        ; set A long
.394a72	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394a75	5b		tcd		                TCD
.394a76	28		plp		                PLP
.394a77	68		pla		                PLA             ; end setdp macro
.394a78	c2 30		rep #$30	                REP #$30        ; set A&X long
.394a7a	a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.394a7c	48		pha		                PHA
.394a7d	a5 1c		lda $033c	                LDA DOS_BUFF_PTR
.394a7f	48		pha		                PHA
.394a80	22 c1 49 39	jsl $3949c1	                JSL DOS_FINDFILE                    ; Attempt to find the file's directory entry
.394a84	68		pla		                PLA
.394a85	85 1c		sta $033c	                STA DOS_BUFF_PTR
.394a87	68		pla		                PLA
.394a88	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394a8a	90 0f		bcc $394a9b	                BCC pass_failure                    ; If found: try to load the cluster
.394a8c	22 db 47 39	jsl $3947db	load_cluster    JSL DOS_GETCLUSTER                  ; Get the first block of the cluster
.394a90	90 09		bcc $394a9b	                BCC pass_failure                    ; If there's an error... pass it up the chain
.394a92					ret_success
.394a92	e2 20		sep #$20	                SEP #$20        ; set A short
.394a94	64 0e		stz $032e	                STZ DOS_STATUS
.394a96	28		plp		                PLP
.394a97	2b		pld		                PLD
.394a98	ab		plb		                PLB
.394a99	38		sec		                SEC
.394a9a	6b		rtl		                RTL
.394a9b	28		plp		pass_failure    PLP                                 ; Otherwise: pass any error up the chain
.394a9c	2b		pld		                PLD
.394a9d	ab		plb		                PLB
.394a9e	18		clc		                CLC
.394a9f	6b		rtl		                RTL
.394aa0					ENTRYFORCLUS12
.394aa0	8b		phb		                PHB
.394aa1	0b		phd		                PHD
.394aa2	08		php		                PHP
.394aa3	48		pha		                PHA             ; begin setdbr macro
.394aa4	08		php		                PHP
.394aa5	e2 20		sep #$20	                SEP #$20        ; set A short
.394aa7	a9 00		lda #$00	                LDA #0
.394aa9	48		pha		                PHA
.394aaa	ab		plb		                PLB
.394aab	28		plp		                PLP
.394aac	68		pla		                PLA             ; end setdbr macro
.394aad	48		pha		                PHA             ; begin setdp macro
.394aae	08		php		                PHP
.394aaf	c2 20		rep #$20	                REP #$20        ; set A long
.394ab1	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394ab4	5b		tcd		                TCD
.394ab5	28		plp		                PLP
.394ab6	68		pla		                PLA             ; end setdp macro
.394ab7	c2 30		rep #$30	                REP #$30        ; set A&X long
.394ab9	a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; DOS_TEMP := DOS_CLUS_ID * 3
.394abb	0a		asl a		                ASL A
.394abc	85 28		sta $0348	                STA DOS_TEMP
.394abe	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394ac0	2a		rol a		                ROL A
.394ac1	85 2a		sta $034a	                STA DOS_TEMP+2
.394ac3	18		clc		                CLC
.394ac4	a5 10		lda $0330	                LDA DOS_CLUS_ID
.394ac6	65 28		adc $0348	                ADC DOS_TEMP
.394ac8	85 28		sta $0348	                STA DOS_TEMP
.394aca	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394acc	65 2a		adc $034a	                ADC DOS_TEMP+2
.394ace	85 2a		sta $034a	                STA DOS_TEMP+2
.394ad0	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := (DOS_CLUS_ID * 3) / 2
.394ad2	66 28		ror $0348	                ROR DOS_TEMP                    ; DOS_TEMP is now the offset to the cluster's entry in the FAT
.394ad4	a5 28		lda $0348	                LDA DOS_TEMP                    ; X should be the offset within the FAT buffer
.394ad6	29 ff 03	and #$03ff	                AND #$003FF
.394ad9	aa		tax		                TAX
.394ada	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394adc	66 28		ror $0348	                ROR DOS_TEMP
.394ade	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394ae0	66 28		ror $0348	                ROR DOS_TEMP
.394ae2	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394ae4	66 28		ror $0348	                ROR DOS_TEMP
.394ae6	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394ae8	66 28		ror $0348	                ROR DOS_TEMP
.394aea	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394aec	66 28		ror $0348	                ROR DOS_TEMP
.394aee	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394af0	66 28		ror $0348	                ROR DOS_TEMP
.394af2	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394af4	66 28		ror $0348	                ROR DOS_TEMP
.394af6	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394af8	66 28		ror $0348	                ROR DOS_TEMP
.394afa	46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394afc	66 28		ror $0348	                ROR DOS_TEMP
.394afe	18		clc		                CLC                             ; DOS_FAT_LBA should be the LBA of the first FAT sector we need
.394aff	af 14 a0 38	lda $38a014	                LDA FAT_BEGIN_LBA
.394b03	65 28		adc $0348	                ADC DOS_TEMP
.394b05	85 24		sta $0344	                STA DOS_FAT_LBA
.394b07	af 16 a0 38	lda $38a016	                LDA FAT_BEGIN_LBA+2
.394b0b	65 2a		adc $034a	                ADC DOS_TEMP+2
.394b0d	85 26		sta $0346	                STA DOS_FAT_LBA+2
.394b0f	28		plp		                PLP
.394b10	2b		pld		                PLD
.394b11	ab		plb		                PLB
.394b12	6b		rtl		                RTL
.394b13					FATFORCLUSTER12
.394b13	8b		phb		                PHB
.394b14	0b		phd		                PHD
.394b15	08		php		                PHP
.394b16	48		pha		                PHA             ; begin setdbr macro
.394b17	08		php		                PHP
.394b18	e2 20		sep #$20	                SEP #$20        ; set A short
.394b1a	a9 00		lda #$00	                LDA #0
.394b1c	48		pha		                PHA
.394b1d	ab		plb		                PLB
.394b1e	28		plp		                PLP
.394b1f	68		pla		                PLA             ; end setdbr macro
.394b20	48		pha		                PHA             ; begin setdp macro
.394b21	08		php		                PHP
.394b22	c2 20		rep #$20	                REP #$20        ; set A long
.394b24	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394b27	5b		tcd		                TCD
.394b28	28		plp		                PLP
.394b29	68		pla		                PLA             ; end setdp macro
.394b2a	c2 30		rep #$30	                REP #$30        ; set A&X long
.394b2c	a2 00 00	ldx #$0000	                LDX #0
.394b2f	a9 5a 5a	lda #$5a5a	                LDA #$5A5A
.394b32	8f 00 a5 38	sta $38a500	clr_loop        STA DOS_FAT_SECTORS
.394b36	e8		inx		                INX
.394b37	e8		inx		                INX
.394b38	e0 00 04	cpx #$0400	                CPX #1024
.394b3b	d0 f5		bne $394b32	                BNE clr_loop
.394b3d	22 a0 4a 39	jsl $394aa0	                JSL ENTRYFORCLUS12              ; Calculate the LBA
.394b41	a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Point to the desired sector in the FAT
.394b43	85 02		sta $0322	                STA BIOS_LBA
.394b45	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394b47	85 04		sta $0324	                STA BIOS_LBA+2
.394b49	a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first 512 bytes of the FAT buffer
.394b4c	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394b4e	a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394b51	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394b53	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.394b57	90 17		bcc $394b70	                BCC error
.394b59	e6 02		inc $0322	                INC BIOS_LBA                    ; Move to the next sector
.394b5b	a9 00 a7	lda #$a700	                LDA #<>DOS_FAT_SECTORS+512      ; And point to the second 512 bytes of teh FAT buffer
.394b5e	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394b60	a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394b63	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394b65	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.394b69	90 05		bcc $394b70	                BCC error
.394b6b	28		plp		                PLP
.394b6c	2b		pld		                PLD
.394b6d	ab		plb		                PLB
.394b6e	38		sec		                SEC
.394b6f	6b		rtl		                RTL
.394b70					error
.394b70	e2 20		sep #$20	                SEP #$20        ; set A short
.394b72	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394b74	85 0e		sta $032e	                STA DOS_STATUS
.394b76	28		plp		                PLP
.394b77	2b		pld		                PLD
.394b78	ab		plb		                PLB
.394b79	18		clc		                CLC
.394b7a	6b		rtl		                RTL
.394b7b					FATFORCLUSTER32
.394b7b	8b		phb		                PHB
.394b7c	0b		phd		                PHD
.394b7d	48		pha		                PHA             ; begin setdbr macro
.394b7e	08		php		                PHP
.394b7f	e2 20		sep #$20	                SEP #$20        ; set A short
.394b81	a9 00		lda #$00	                LDA #0
.394b83	48		pha		                PHA
.394b84	ab		plb		                PLB
.394b85	28		plp		                PLP
.394b86	68		pla		                PLA             ; end setdbr macro
.394b87	48		pha		                PHA             ; begin setdp macro
.394b88	08		php		                PHP
.394b89	c2 20		rep #$20	                REP #$20        ; set A long
.394b8b	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394b8e	5b		tcd		                TCD
.394b8f	28		plp		                PLP
.394b90	68		pla		                PLA             ; end setdp macro
.394b91	c2 30		rep #$30	                REP #$30        ; set A&X long
.394b93	a5 10		lda $0330	                LDA DOS_CLUS_ID
.394b95	85 24		sta $0344	                STA DOS_FAT_LBA
.394b97	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394b99	85 26		sta $0346	                STA DOS_FAT_LBA+2
.394b9b	a2 07 00	ldx #$0007	                LDX #7
.394b9e	46 26		lsr $0346	div_loop        LSR DOS_FAT_LBA+2
.394ba0	66 24		ror $0344	                ROR DOS_FAT_LBA
.394ba2	ca		dex		                DEX
.394ba3	d0 f9		bne $394b9e	                BNE div_loop
.394ba5	18		clc		                CLC
.394ba6	a5 24		lda $0344	                LDA DOS_FAT_LBA
.394ba8	6f 14 a0 38	adc $38a014	                ADC FAT_BEGIN_LBA
.394bac	85 24		sta $0344	                STA DOS_FAT_LBA
.394bae	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394bb0	6f 16 a0 38	adc $38a016	                ADC FAT_BEGIN_LBA+2
.394bb4	85 26		sta $0346	                STA DOS_FAT_LBA+2
.394bb6	a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; We want to load the FAT sector
.394bb8	85 02		sta $0322	                STA BIOS_LBA
.394bba	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394bbc	85 04		sta $0324	                STA BIOS_LBA+2
.394bbe	a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; We want to load the FAT sector in DOS_FAT_SECTORS
.394bc1	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394bc3	a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394bc6	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394bc8	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Load the FAT entry
.394bcc	b0 06		bcs $394bd4	                BCS find_entry
.394bce	e2 20		sep #$20	                SEP #$20        ; set A short
.394bd0	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394bd2	80 0e		bra $394be2	                BRA ret_failure
.394bd4					find_entry
.394bd4	c2 20		rep #$20	                REP #$20        ; set A long
.394bd6	a5 10		lda $0330	                LDA DOS_CLUS_ID
.394bd8	0a		asl a		                ASL A
.394bd9	0a		asl a		                ASL A                           ; * 4
.394bda	29 ff 01	and #$01ff	                AND #$1FF                       ; DOS_CLUS_ID MOD 512
.394bdd	aa		tax		                TAX                             ; X should be the offset within the sector
.394bde	2b		pld		ret_success     PLD
.394bdf	ab		plb		                PLB
.394be0	38		sec		                SEC                             ; return success
.394be1	6b		rtl		                RTL
.394be2	2b		pld		ret_failure     PLD
.394be3	ab		plb		                PLB
.394be4	18		clc		                CLC                             ; Return failure
.394be5	6b		rtl		                RTL
.394be6					NEXTCLUSTER
.394be6	08		php		                PHP
.394be7	e2 20		sep #$20	                SEP #$20        ; set A short
.394be9	af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394bed	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394bef	d0 08		bne $394bf9	                BNE fat32                       ; No: assume it's FAT32
.394bf1	22 07 4c 39	jsl $394c07	fat12           JSL NEXTCLUSTER12               ; Lookup the next cluster from FAT12
.394bf5	90 0d		bcc $394c04	                BCC pass_failure                ; If there was an error, pass it up the chain
.394bf7	80 06		bra $394bff	                BRA ret_success
.394bf9	22 6f 4c 39	jsl $394c6f	fat32           JSL NEXTCLUSTER32               ; Lookup the next cluster from FAT32
.394bfd	90 05		bcc $394c04	                BCC pass_failure                ; If there was an error, pass it up the chain
.394bff	64 0e		stz $032e	ret_success     STZ DOS_STATUS
.394c01	28		plp		                PLP
.394c02	38		sec		                SEC
.394c03	6b		rtl		                RTL
.394c04	28		plp		pass_failure    PLP
.394c05	18		clc		                CLC
.394c06	6b		rtl		                RTL
.394c07					NEXTCLUSTER12
.394c07	8b		phb		                    PHB
.394c08	0b		phd		                    PHD
.394c09	08		php		                    PHP
.394c0a	48		pha		                PHA             ; begin setdbr macro
.394c0b	08		php		                PHP
.394c0c	e2 20		sep #$20	                SEP #$20        ; set A short
.394c0e	a9 00		lda #$00	                LDA #0
.394c10	48		pha		                PHA
.394c11	ab		plb		                PLB
.394c12	28		plp		                PLP
.394c13	68		pla		                PLA             ; end setdbr macro
.394c14	48		pha		                PHA             ; begin setdp macro
.394c15	08		php		                PHP
.394c16	c2 20		rep #$20	                REP #$20        ; set A long
.394c18	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394c1b	5b		tcd		                TCD
.394c1c	28		plp		                PLP
.394c1d	68		pla		                PLA             ; end setdp macro
.394c1e	c2 30		rep #$30	                REP #$30        ; set A&X long
.394c20	22 13 4b 39	jsl $394b13	                    JSL FATFORCLUSTER12             ; Attempt to load the FAT entries
.394c24	b0 03		bcs $394c29	                    BCS chk_clus_id
.394c26	82 41 00	brl $394c6a	                    BRL pass_failure
.394c29	a5 10		lda $0330	chk_clus_id         LDA DOS_CLUS_ID                 ; Check the cluster ID...
.394c2b	89 01 00	bit #$0001	                    BIT #1                          ; Is it odd?
.394c2e	d0 0d		bne $394c3d	                    BNE is_odd                      ; Yes: calculate the next cluster for odd
.394c30					is_even
.394c30	c2 20		rep #$20	                REP #$20        ; set A long
.394c32	bf 00 a5 38	lda $38a500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] & $0FFF
.394c36	29 ff 0f	and #$0fff	                    AND #$0FFF
.394c39	85 28		sta $0348	                    STA DOS_TEMP
.394c3b	80 0c		bra $394c49	                    BRA check_id
.394c3d					is_odd
.394c3d	c2 20		rep #$20	                REP #$20        ; set A long
.394c3f	bf 00 a5 38	lda $38a500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] >> 4
.394c43	4a		lsr a		                    LSR A
.394c44	4a		lsr a		                    LSR A
.394c45	4a		lsr a		                    LSR A
.394c46	4a		lsr a		                    LSR A
.394c47	85 28		sta $0348	                    STA DOS_TEMP
.394c49					check_id
.394c49	c2 20		rep #$20	                REP #$20        ; set A long
.394c4b	a5 28		lda $0348	                    LDA DOS_TEMP                    ; Check the new cluster ID we got
.394c4d	29 f0 0f	and #$0ff0	                    AND #$0FF0                      ; Is it in the range $0FF0 -- $0FFF?
.394c50	c9 f0 0f	cmp #$0ff0	                    CMP #$0FF0
.394c53	f0 0f		beq $394c64	                    BEQ no_more                     ; Yes: return that we've reached the end of the chain
.394c55	a5 28		lda $0348	                    LDA DOS_TEMP                    ; Restore the "current" cluster ID
.394c57	85 10		sta $0330	                    STA DOS_CLUS_ID
.394c59	64 12		stz $0332	                    STZ DOS_CLUS_ID+2
.394c5b					ret_success
.394c5b	e2 20		sep #$20	                SEP #$20        ; set A short
.394c5d	64 0e		stz $032e	                    STZ DOS_STATUS
.394c5f	28		plp		                    PLP
.394c60	2b		pld		                    PLD
.394c61	ab		plb		                    PLB
.394c62	38		sec		                    SEC
.394c63	6b		rtl		                    RTL
.394c64					no_more
.394c64	e2 20		sep #$20	                SEP #$20        ; set A short
.394c66	a9 0a		lda #$0a	                    LDA #DOS_ERR_NOCLUSTER
.394c68	85 0e		sta $032e	                    STA DOS_STATUS
.394c6a	28		plp		pass_failure        PLP
.394c6b	2b		pld		                    PLD
.394c6c	ab		plb		                    PLB
.394c6d	18		clc		                    CLC
.394c6e	6b		rtl		                    RTL
.394c6f					NEXTCLUSTER32
.394c6f	8b		phb		                PHB
.394c70	0b		phd		                PHD
.394c71	08		php		                PHP
.394c72	48		pha		                PHA             ; begin setdbr macro
.394c73	08		php		                PHP
.394c74	e2 20		sep #$20	                SEP #$20        ; set A short
.394c76	a9 00		lda #$00	                LDA #0
.394c78	48		pha		                PHA
.394c79	ab		plb		                PLB
.394c7a	28		plp		                PLP
.394c7b	68		pla		                PLA             ; end setdbr macro
.394c7c	48		pha		                PHA             ; begin setdp macro
.394c7d	08		php		                PHP
.394c7e	c2 20		rep #$20	                REP #$20        ; set A long
.394c80	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394c83	5b		tcd		                TCD
.394c84	28		plp		                PLP
.394c85	68		pla		                PLA             ; end setdp macro
.394c86	c2 30		rep #$30	                REP #$30        ; set A&X long
.394c88	22 7b 4b 39	jsl $394b7b	                JSL FATFORCLUSTER32             ; Get the FAT entry for this cluster
.394c8c	90 53		bcc $394ce1	                BCC ret_failure                 ; If it did not work, return the error
.394c8e	e2 20		sep #$20	                SEP #$20        ; set A short
.394c90	bf 00 a5 38	lda $38a500,x	                LDA @l DOS_FAT_SECTORS,X        ; Get the entry and copy it to DOS_TEMP
.394c94	85 28		sta $0348	                STA DOS_TEMP
.394c96	bf 01 a5 38	lda $38a501,x	                LDA @l DOS_FAT_SECTORS+1,X
.394c9a	85 29		sta $0349	                STA DOS_TEMP+1
.394c9c	bf 02 a5 38	lda $38a502,x	                LDA @l DOS_FAT_SECTORS+2,X
.394ca0	85 2a		sta $034a	                STA DOS_TEMP+2
.394ca2	bf 03 a5 38	lda $38a503,x	                LDA @l DOS_FAT_SECTORS+3,X
.394ca6	85 2b		sta $034b	                STA DOS_TEMP+3
.394ca8	a5 28		lda $0348	xxxx            LDA DOS_TEMP                    ; Is DOS_TEMP = $FFFFFFFF?
.394caa	c9 ff		cmp #$ff	                CMP #$FF
.394cac	d0 18		bne $394cc6	                BNE found_next
.394cae	a5 29		lda $0349	                LDA DOS_TEMP+1
.394cb0	c9 ff		cmp #$ff	                CMP #$FF
.394cb2	d0 12		bne $394cc6	                BNE found_next
.394cb4	a5 2a		lda $034a	                LDA DOS_TEMP+2
.394cb6	c9 ff		cmp #$ff	                CMP #$FF
.394cb8	d0 0c		bne $394cc6	                BNE found_next
.394cba	a5 2b		lda $034b	                LDA DOS_TEMP+3
.394cbc	c9 0f		cmp #$0f	                CMP #$0F
.394cbe	d0 06		bne $394cc6	                BNE found_next                  ; No: return this cluster as the next
.394cc0	e2 20		sep #$20	                SEP #$20        ; set A short
.394cc2	a9 0a		lda #$0a	                LDA #DOS_ERR_NOCLUSTER          ; Yes: return that there are no more clusters
.394cc4	80 1b		bra $394ce1	                BRA ret_failure
.394cc6					found_next
.394cc6	e2 20		sep #$20	                SEP #$20        ; set A short
.394cc8	a5 28		lda $0348	                LDA DOS_TEMP                    ; No: return DOS_TEMP as the new DOS_CLUS_ID
.394cca	85 10		sta $0330	                STA DOS_CLUS_ID
.394ccc	a5 29		lda $0349	                LDA DOS_TEMP+1
.394cce	85 11		sta $0331	                STA DOS_CLUS_ID+1
.394cd0	a5 2a		lda $034a	                LDA DOS_TEMP+2
.394cd2	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394cd4	a5 2b		lda $034b	                LDA DOS_TEMP+3
.394cd6	85 13		sta $0333	                STA DOS_CLUS_ID+3
.394cd8					ret_success
.394cd8	e2 20		sep #$20	                SEP #$20        ; set A short
.394cda	64 0e		stz $032e	                STZ DOS_STATUS                  ; Record success
.394cdc	28		plp		                PLP
.394cdd	2b		pld		                PLD
.394cde	ab		plb		                PLB
.394cdf	38		sec		                SEC
.394ce0	6b		rtl		                RTL
.394ce1					ret_failure
.394ce1	e2 20		sep #$20	                SEP #$20        ; set A short
.394ce3	85 0e		sta $032e	                STA DOS_STATUS                  ; Record the error condition
.394ce5	28		plp		                PLP
.394ce6	2b		pld		                PLD
.394ce7	ab		plb		                PLB
.394ce8	18		clc		                CLC
.394ce9	6b		rtl		                RTL
.394cea					DOS_READNEXT
.394cea	08		php		                PHP
.394ceb	c2 30		rep #$30	                REP #$30        ; set A&X long
.394ced	22 e6 4b 39	jsl $394be6	                JSL NEXTCLUSTER                 ; Attempt to find the next cluster in the FAT
.394cf1	90 09		bcc $394cfc	                BCC pass_failure                ; If nothing found: pass the failure up the chain
.394cf3	22 db 47 39	jsl $3947db	                JSL DOS_GETCLUSTER              ; Otherwise: attempt to read the cluster
.394cf7	90 03		bcc $394cfc	                BCC pass_failure                ; If nothing read: pass the failure up the chain
.394cf9	28		plp		ret_success     PLP
.394cfa	38		sec		                SEC
.394cfb	6b		rtl		                RTL
.394cfc	28		plp		pass_failure    PLP
.394cfd	18		clc		                CLC
.394cfe	6b		rtl		                RTL
.394cff					DOS_FREECLUS
.394cff	08		php		                PHP
.394d00	48		pha		                PHA             ; begin setdp macro
.394d01	08		php		                PHP
.394d02	c2 20		rep #$20	                REP #$20        ; set A long
.394d04	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394d07	5b		tcd		                TCD
.394d08	28		plp		                PLP
.394d09	68		pla		                PLA             ; end setdp macro
.394d0a	e2 20		sep #$20	                SEP #$20        ; set A short
.394d0c	af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394d10	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394d12	d0 08		bne $394d1c	                BNE fat32                       ; No: assume it's FAT32
.394d14	22 90 4d 39	jsl $394d90	fat12           JSL DOS_FREECLUS12              ; Find the next free cluster from FAT12
.394d18	90 0d		bcc $394d27	                BCC pass_failure                ; If there was an error, pass it up the chain
.394d1a	80 06		bra $394d22	                BRA ret_success
.394d1c	22 68 4e 39	jsl $394e68	fat32           JSL DOS_FREECLUS32              ; Find the next free cluster from FAT32
.394d20	90 05		bcc $394d27	                BCC pass_failure                ; If there was an error, pass it up the chain
.394d22	64 0e		stz $032e	ret_success     STZ DOS_STATUS
.394d24	28		plp		                PLP
.394d25	38		sec		                SEC
.394d26	6b		rtl		                RTL
.394d27	28		plp		pass_failure    PLP
.394d28	18		clc		                CLC
.394d29	6b		rtl		                RTL
.394d2a					FDC_READ2FAT12
.394d2a	8b		phb		                    PHB
.394d2b	0b		phd		                    PHD
.394d2c	08		php		                    PHP
.394d2d	48		pha		                PHA             ; begin setdbr macro
.394d2e	08		php		                PHP
.394d2f	e2 20		sep #$20	                SEP #$20        ; set A short
.394d31	a9 00		lda #$00	                LDA #0
.394d33	48		pha		                PHA
.394d34	ab		plb		                PLB
.394d35	28		plp		                PLP
.394d36	68		pla		                PLA             ; end setdbr macro
.394d37	48		pha		                PHA             ; begin setdp macro
.394d38	08		php		                PHP
.394d39	c2 20		rep #$20	                REP #$20        ; set A long
.394d3b	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394d3e	5b		tcd		                TCD
.394d3f	28		plp		                PLP
.394d40	68		pla		                PLA             ; end setdp macro
.394d41	c2 30		rep #$30	                REP #$30        ; set A&X long
.394d43	a9 00 a5	lda #$a500	                    LDA #<>DOS_FAT_SECTORS          ; Set the location to store the sector
.394d46	85 06		sta $0326	                    STA BIOS_BUFF_PTR
.394d48	a9 38 00	lda #$0038	                    LDA #`DOS_FAT_SECTORS
.394d4b	85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.394d4d	a5 24		lda $0344	                    LDA DOS_FAT_LBA
.394d4f	85 02		sta $0322	                    STA BIOS_LBA
.394d51	a5 26		lda $0346	                    LDA DOS_FAT_LBA+2
.394d53	85 04		sta $0324	                    STA BIOS_LBA+2
.394d55	22 44 10 38	jsl $381044	                    JSL GETBLOCK                    ; Read the first sector
.394d59	b0 07		bcs $394d62	                    BCS inc_sect2                   ; If success: start getting the second sector
.394d5b	e2 20		sep #$20	                SEP #$20        ; set A short
.394d5d	a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.394d5f	82 1c 00	brl $394d7e	                    BRL ret_failure
.394d62					inc_sect2
.394d62	c2 20		rep #$20	                REP #$20        ; set A long
.394d64	e6 02		inc $0322	                    INC BIOS_LBA                    ; Move to the next sector
.394d66	d0 02		bne $394d6a	                    BNE inc_buff_ptr
.394d68	e6 04		inc $0324	                    INC BIOS_LBA+2
.394d6a	a9 00 a7	lda #$a700	inc_buff_ptr        LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394d6d	85 06		sta $0326	                    STA BIOS_BUFF_PTR
.394d6f	a9 38 00	lda #$0038	                    LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394d72	85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.394d74	22 44 10 38	jsl $381044	                    JSL GETBLOCK                    ; Read the second sector
.394d78	b0 0d		bcs $394d87	                    BCS ret_success                 ; If success, return success
.394d7a	e2 20		sep #$20	                SEP #$20        ; set A short
.394d7c	a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.394d7e					ret_failure
.394d7e	e2 20		sep #$20	                SEP #$20        ; set A short
.394d80	85 00		sta $0320	                    STA BIOS_STATUS
.394d82	28		plp		                    PLP
.394d83	2b		pld		                    PLD
.394d84	ab		plb		                    PLB
.394d85	18		clc		                    CLC
.394d86	6b		rtl		                    RTL
.394d87					ret_success
.394d87	e2 20		sep #$20	                SEP #$20        ; set A short
.394d89	64 00		stz $0320	                    STZ BIOS_STATUS
.394d8b	28		plp		                    PLP
.394d8c	2b		pld		                    PLD
.394d8d	ab		plb		                    PLB
.394d8e	38		sec		                    SEC
.394d8f	6b		rtl		                    RTL
.394d90					DOS_FREECLUS12
.394d90	da		phx		                PHX
.394d91	8b		phb		                PHB
.394d92	0b		phd		                PHD
.394d93	08		php		                PHP
.394d94	48		pha		                PHA             ; begin setdbr macro
.394d95	08		php		                PHP
.394d96	e2 20		sep #$20	                SEP #$20        ; set A short
.394d98	a9 00		lda #$00	                LDA #0
.394d9a	48		pha		                PHA
.394d9b	ab		plb		                PLB
.394d9c	28		plp		                PLP
.394d9d	68		pla		                PLA             ; end setdbr macro
.394d9e	48		pha		                PHA             ; begin setdp macro
.394d9f	08		php		                PHP
.394da0	c2 20		rep #$20	                REP #$20        ; set A long
.394da2	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394da5	5b		tcd		                TCD
.394da6	28		plp		                PLP
.394da7	68		pla		                PLA             ; end setdp macro
.394da8	c2 30		rep #$30	                REP #$30        ; set A&X long
.394daa	a9 02 00	lda #$0002	                LDA #2                          ; Cluster ID is 2 to start with
.394dad	85 10		sta $0330	                STA DOS_CLUS_ID
.394daf	a9 00 00	lda #$0000	                LDA #0
.394db2	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394db4	22 a0 4a 39	jsl $394aa0	                JSL ENTRYFORCLUS12              ; Calculate the LBA and buffer offset for the cluster
.394db8	22 2a 4d 39	jsl $394d2a	                JSL FDC_READ2FAT12              ; Read the first two sectors of the FAT
.394dbc	b0 07		bcs $394dc5	                BCS start_of_fat                ; If success, move X to the start of the FAT
.394dbe	e2 20		sep #$20	                SEP #$20        ; set A short
.394dc0	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394dc2	82 99 00	brl $394e5e	                BRL ret_failure
.394dc5					start_of_fat
.394dc5	c2 30		rep #$30	                REP #$30        ; set A&X long
.394dc7	a5 10		lda $0330	chk_cluster     LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.394dc9	89 01 00	bit #$0001	                BIT #1
.394dcc	d0 09		bne $394dd7	                BNE is_odd
.394dce	bf 00 a5 38	lda $38a500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an even numbered cluster
.394dd2	29 ff 0f	and #$0fff	                AND #$0FFF
.394dd5	80 08		bra $394ddf	                BRA chk_available
.394dd7	bf 00 a5 38	lda $38a500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an odd numbered cluster
.394ddb	4a		lsr a		                LSR A
.394ddc	4a		lsr a		                LSR A
.394ddd	4a		lsr a		                LSR A
.394dde	4a		lsr a		                LSR A
.394ddf					chk_available
.394ddf	85 28		sta $0348	                STA DOS_TEMP
.394de1	c9 00 00	cmp #$0000	                CMP #0                          ; Is it available?
.394de4	f0 03		beq $394de9	                BEQ chk_found
.394de6	82 39 00	brl $394e22	                BRL next_cluster                ; No: advance to the next cluster
.394de9	8a		txa		chk_found       TXA
.394dea	85 2a		sta $034a	                STA DOS_TEMP+2
.394dec	a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.394dee	89 01 00	bit #$0001	                BIT #1
.394df1	d0 0d		bne $394e00	                BNE is_odd2
.394df3					is_even2
.394df3	bf 00 a5 38	lda $38a500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, even offset case
.394df7	09 ff 0f	ora #$0fff	                ORA #$0FFF
.394dfa	9f 00 a5 38	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.394dfe	80 0b		bra $394e0b	                BRA write_fat
.394e00					is_odd2
.394e00	bf 00 a5 38	lda $38a500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, odd offset case
.394e04	09 f0 ff	ora #$fff0	                ORA #$FFF0
.394e07	9f 00 a5 38	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.394e0b	22 32 4f 39	jsl $394f32	write_fat       JSL WRITEFAT12                  ; Write the two FAT sectors back to disk
.394e0f	b0 07		bcs $394e18	                BCS ret_success                 ; If success: return success
.394e11	e2 20		sep #$20	                SEP #$20        ; set A short
.394e13	a9 14		lda #$14	                LDA #DOS_ERR_FATUPDATE          ; Flag an error trying to write the FAT back
.394e15	82 46 00	brl $394e5e	                BRL ret_failure
.394e18					ret_success
.394e18	e2 20		sep #$20	                SEP #$20        ; set A short
.394e1a	64 0e		stz $032e	                STZ DOS_STATUS
.394e1c	28		plp		                PLP
.394e1d	2b		pld		                PLD
.394e1e	ab		plb		                PLB
.394e1f	fa		plx		                PLX
.394e20	38		sec		                SEC
.394e21	6b		rtl		                RTL
.394e22					next_cluster
.394e22	e6 10		inc $0330	                INC DOS_CLUS_ID                 ; And advance the cluster ID
.394e24	d0 02		bne $394e28	                BNE calc_entry
.394e26	e6 12		inc $0332	                INC DOS_CLUS_ID+2
.394e28	22 a0 4a 39	jsl $394aa0	calc_entry      JSL ENTRYFORCLUS12              ; Calculate the LBA and offset into the buffer for the cluster
.394e2c	e0 00 00	cpx #$0000	                CPX #0                          ; Did we wrap around?
.394e2f	f0 03		beq $394e34	                BEQ chk_end_of_fat
.394e31	82 93 ff	brl $394dc7	                BRL chk_cluster                 ; No: go back and check it too
.394e34					chk_end_of_fat
.394e34	a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Are we at the end of the FAT?
.394e36	cf 18 a0 38	cmp $38a018	                CMP FAT2_BEGIN_LBA              ; NOTE: we use the start sector of the second FAT as our sentinel
.394e3a	d0 0f		bne $394e4b	                BNE next_2
.394e3c	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394e3e	cf 1a a0 38	cmp $38a01a	                CMP FAT2_BEGIN_LBA+2
.394e42	d0 07		bne $394e4b	                BNE next_2                      ; No: get the next to sectors
.394e44	e2 20		sep #$20	                SEP #$20        ; set A short
.394e46	a9 12		lda #$12	                LDA #DOS_ERR_MEDIAFULL          ; Yes: return media full
.394e48	82 13 00	brl $394e5e	                BRL ret_failure
.394e4b					next_2
.394e4b	22 2a 4d 39	jsl $394d2a	                JSL FDC_READ2FAT12              ; Read the next two sectors of the FAT
.394e4f	90 06		bcc $394e57	                BCC fat_fail                    ; If failed: return error
.394e51	a2 00 00	ldx #$0000	                LDX #0                          ; If success: Start scanning at the beginning of the sectors
.394e54	82 70 ff	brl $394dc7	                BRL chk_cluster                 ; And start checking from there
.394e57					fat_fail
.394e57	e2 20		sep #$20	                SEP #$20        ; set A short
.394e59	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394e5b	82 00 00	brl $394e5e	                BRL ret_failure
.394e5e					ret_failure
.394e5e	e2 20		sep #$20	                SEP #$20        ; set A short
.394e60	85 0e		sta $032e	                STA DOS_STATUS
.394e62	28		plp		                PLP
.394e63	2b		pld		                PLD
.394e64	ab		plb		                PLB
.394e65	fa		plx		                PLX
.394e66	18		clc		                CLC
.394e67	6b		rtl		                RTL
.394e68					DOS_FREECLUS32
.394e68	8b		phb		                PHB
.394e69	0b		phd		                PHD
.394e6a	08		php		                PHP
.394e6b	48		pha		                PHA             ; begin setdbr macro
.394e6c	08		php		                PHP
.394e6d	e2 20		sep #$20	                SEP #$20        ; set A short
.394e6f	a9 00		lda #$00	                LDA #0
.394e71	48		pha		                PHA
.394e72	ab		plb		                PLB
.394e73	28		plp		                PLP
.394e74	68		pla		                PLA             ; end setdbr macro
.394e75	48		pha		                PHA             ; begin setdp macro
.394e76	08		php		                PHP
.394e77	c2 20		rep #$20	                REP #$20        ; set A long
.394e79	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394e7c	5b		tcd		                TCD
.394e7d	28		plp		                PLP
.394e7e	68		pla		                PLA             ; end setdp macro
.394e7f	c2 30		rep #$30	                REP #$30        ; set A&X long
.394e81	a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR               ; Set the location to store the sector
.394e84	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394e86	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.394e89	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394e8b	af 14 a0 38	lda $38a014	                LDA FAT_BEGIN_LBA               ; Set the LBA to that of the first FAT sector
.394e8f	85 02		sta $0322	                STA BIOS_LBA
.394e91	af 16 a0 38	lda $38a016	                LDA FAT_BEGIN_LBA+2
.394e95	85 04		sta $0324	                STA BIOS_LBA+2
.394e97	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Load the sector into memory
.394e9b	b0 07		bcs $394ea4	                BCS initial_entry               ; If OK: set the initial entry to check
.394e9d	e2 20		sep #$20	                SEP #$20        ; set A short
.394e9f	a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Return a NOFAT error
.394ea1	82 6b 00	brl $394f0f	                BRL ret_failure
.394ea4					initial_entry
.394ea4	c2 20		rep #$20	                REP #$20        ; set A long
.394ea6	a9 02 00	lda #$0002	                LDA #2                          ; Set DOS_CLUS_ID to 2
.394ea9	85 10		sta $0330	                STA DOS_CLUS_ID
.394eab	a9 00 00	lda #$0000	                LDA #0
.394eae	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394eb0	a2 08 00	ldx #$0008	                LDX #8                          ; Set the offset to DOS_CLUS_ID * 4
.394eb3	bf 00 a3 38	lda $38a300,x	chk_entry       LDA DOS_SECTOR,X                ; Is the cluster entry == $00000000?
.394eb7	d0 06		bne $394ebf	                BNE next_entry                  ; No: move to the next entry
.394eb9	bf 02 a3 38	lda $38a302,x	                LDA DOS_SECTOR+2,X
.394ebd	f0 36		beq $394ef5	                BEQ found_free                  ; Yes: go to allocate and return it
.394ebf	e6 10		inc $0330	next_entry      INC DOS_CLUS_ID                 ; Move to the next cluster
.394ec1	d0 02		bne $394ec5	                BNE inc_ptr
.394ec3	e6 12		inc $0332	                INC DOS_CLUS_ID+2
.394ec5	e8		inx		inc_ptr         INX                             ; Update the index to the entry
.394ec6	e8		inx		                INX
.394ec7	e8		inx		                INX
.394ec8	e8		inx		                INX
.394ec9	e0 00 02	cpx #$0200	                CPX #DOS_SECTOR_SIZE            ; Are we outside the sector?
.394ecc	90 e5		bcc $394eb3	                BLT chk_entry                   ; No: check this entry
.394ece	e6 02		inc $0322	                INC BIOS_LBA                    ; Point to the next sector in the FAT
.394ed0	d0 18		bne $394eea	                BNE get_block
.394ed2	e6 04		inc $0324	                INC BIOS_LBA+2
.394ed4	a5 04		lda $0324	                LDA BIOS_LBA+2
.394ed6	cf 1a a0 38	cmp $38a01a	                CMP FAT2_BEGIN_LBA+2
.394eda	90 0e		bcc $394eea	                BLT get_block
.394edc	a5 02		lda $0322	                LDA BIOS_LBA
.394ede	cf 18 a0 38	cmp $38a018	                CMP FAT2_BEGIN_LBA
.394ee2	90 06		bcc $394eea	                BLT get_block
.394ee4	e2 20		sep #$20	                SEP #$20        ; set A short
.394ee6	a9 12		lda #$12	                LDA #DOS_ERR_MEDIAFULL          ; No: throw a media full error
.394ee8	80 25		bra $394f0f	                BRA ret_failure
.394eea	22 44 10 38	jsl $381044	get_block       JSL GETBLOCK                    ; Attempt to read the block
.394eee	90 1b		bcc $394f0b	                BCC ret_fat_error               ; If error: throw a FAT error
.394ef0	a2 00 00	ldx #$0000	set_ptr         LDX #0                          ; Set index pointer to the first entry
.394ef3	80 be		bra $394eb3	                BRA chk_entry                   ; Check this entry
.394ef5					found_free
.394ef5	c2 20		rep #$20	                REP #$20        ; set A long
.394ef7	a9 ff ff	lda #$ffff	                LDA #<>FAT_LAST_CLUSTER         ; Set the entry to $0FFFFFFF to make it the last entry in its chain
.394efa	9f 00 a3 38	sta $38a300,x	                STA DOS_SECTOR,X
.394efe	a9 ff 0f	lda #$0fff	                LDA #(FAT_LAST_CLUSTER >> 16)
.394f01	9f 02 a3 38	sta $38a302,x	                STA DOS_SECTOR+2,X
.394f05	22 24 10 38	jsl $381024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.394f09	b0 0d		bcs $394f18	                BCS ret_success                 ; If OK: return success
.394f0b					ret_fat_error
.394f0b	e2 20		sep #$20	                SEP #$20        ; set A short
.394f0d	a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Otherwise: return NOFAT error
.394f0f					ret_failure
.394f0f	e2 20		sep #$20	                SEP #$20        ; set A short
.394f11	85 0e		sta $032e	                STA DOS_STATUS
.394f13	28		plp		                PLP
.394f14	2b		pld		                PLD
.394f15	ab		plb		                PLB
.394f16	18		clc		                CLC
.394f17	6b		rtl		                RTL
.394f18					ret_success
.394f18	e2 20		sep #$20	                SEP #$20        ; set A short
.394f1a	64 0e		stz $032e	                STZ DOS_STATUS
.394f1c	28		plp		                PLP
.394f1d	2b		pld		                PLD
.394f1e	ab		plb		                PLB
.394f1f	38		sec		                SEC
.394f20	6b		rtl		                RTL
.394f21					DELCLUSTER
.394f21	e2 20		sep #$20	                SEP #$20        ; set A short
.394f23	af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394f27	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394f29	d0 04		bne $394f2f	                BNE fat32                       ; No: assume it's FAT32
.394f2b	5c 79 4f 39	jmp $394f79	fat12           JML DELCLUSTER12
.394f2f	4c c7 4f	jmp $394fc7	fat32           JMP DELCLUSTER32
.394f32					WRITEFAT12
.394f32	8b		phb		                PHB
.394f33	0b		phd		                PHD
.394f34	48		pha		                PHA             ; begin setdbr macro
.394f35	08		php		                PHP
.394f36	e2 20		sep #$20	                SEP #$20        ; set A short
.394f38	a9 00		lda #$00	                LDA #0
.394f3a	48		pha		                PHA
.394f3b	ab		plb		                PLB
.394f3c	28		plp		                PLP
.394f3d	68		pla		                PLA             ; end setdbr macro
.394f3e	48		pha		                PHA             ; begin setdp macro
.394f3f	08		php		                PHP
.394f40	c2 20		rep #$20	                REP #$20        ; set A long
.394f42	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394f45	5b		tcd		                TCD
.394f46	28		plp		                PLP
.394f47	68		pla		                PLA             ; end setdp macro
.394f48	c2 30		rep #$30	                REP #$30        ; set A&X long
.394f4a	a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first FAT sector in memory
.394f4d	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394f4f	a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394f52	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394f54	a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Set the LBA to that of the first sector's
.394f56	85 02		sta $0322	                STA BIOS_LBA
.394f58	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394f5a	85 04		sta $0324	                STA BIOS_LBA+2
.394f5c	22 24 10 38	jsl $381024	                JSL PUTBLOCK                    ; Write the first sector back to the block device
.394f60	90 14		bcc $394f76	                BCC done
.394f62	a9 00 a7	lda #$a700	                LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394f65	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394f67	a9 38 00	lda #$0038	                LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394f6a	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394f6c	e6 02		inc $0322	                INC BIOS_LBA                    ; Point to the next sector in the FAT
.394f6e	d0 02		bne $394f72	                BNE put_second
.394f70	e6 04		inc $0324	                INC BIOS_LBA+2
.394f72	22 24 10 38	jsl $381024	put_second      JSL PUTBLOCK                    ; Write the second sector back to the block device
.394f76	2b		pld		done            PLD
.394f77	ab		plb		                PLB
.394f78	6b		rtl		                RTL
.394f79					DELCLUSTER12
.394f79	8b		phb		                PHB
.394f7a	0b		phd		                PHD
.394f7b	08		php		                PHP
.394f7c	48		pha		                PHA             ; begin setdbr macro
.394f7d	08		php		                PHP
.394f7e	e2 20		sep #$20	                SEP #$20        ; set A short
.394f80	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394f82	48		pha		                PHA
.394f83	ab		plb		                PLB
.394f84	28		plp		                PLP
.394f85	68		pla		                PLA             ; end setdbr macro
.394f86	48		pha		                PHA             ; begin setdp macro
.394f87	08		php		                PHP
.394f88	c2 20		rep #$20	                REP #$20        ; set A long
.394f8a	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394f8d	5b		tcd		                TCD
.394f8e	28		plp		                PLP
.394f8f	68		pla		                PLA             ; end setdp macro
.394f90	c2 30		rep #$30	                REP #$30        ; set A&X long
.394f92	22 13 4b 39	jsl $394b13	                JSL FATFORCLUSTER12
.394f96	8a		txa		                TXA                             ; Check to see if the index is odd or even
.394f97	89 01 00	bit #$0001	                BIT #1
.394f9a	d0 08		bne $394fa4	                BNE is_odd
.394f9c	bd 00 a5	lda $38a500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.394f9f	29 00 f0	and #$f000	                AND #$F000                      ; Mask out the lower 12 bits
.394fa2	80 06		bra $394faa	                BRA save_update
.394fa4	bd 00 a5	lda $38a500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.394fa7	29 0f 00	and #$000f	                AND #$000F                      ; Mask out the upper 12 bits
.394faa	9d 00 a5	sta $38a500,x	save_update     STA DOS_FAT_SECTORS,X           ; And write it back
.394fad	22 32 4f 39	jsl $394f32	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.394fb1	b0 0b		bcs $394fbe	                BCS ret_success
.394fb3					ret_failure
.394fb3	e2 20		sep #$20	                SEP #$20        ; set A short
.394fb5	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394fb7	85 0e		sta $032e	                STA DOS_STATUS
.394fb9	28		plp		                PLP
.394fba	2b		pld		                PLD
.394fbb	ab		plb		                PLB
.394fbc	18		clc		                CLC
.394fbd	6b		rtl		                RTL
.394fbe					ret_success
.394fbe	e2 20		sep #$20	                SEP #$20        ; set A short
.394fc0	64 0e		stz $032e	                STZ DOS_STATUS
.394fc2	28		plp		                PLP
.394fc3	2b		pld		                PLD
.394fc4	ab		plb		                PLB
.394fc5	38		sec		                SEC
.394fc6	6b		rtl		                RTL
.394fc7					DELCLUSTER32
.394fc7	8b		phb		                PHB
.394fc8	0b		phd		                PHD
.394fc9	08		php		                PHP
.394fca	c2 30		rep #$30	                REP #$30        ; set A&X long
.394fcc	48		pha		                PHA             ; begin setdbr macro
.394fcd	08		php		                PHP
.394fce	e2 20		sep #$20	                SEP #$20        ; set A short
.394fd0	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394fd2	48		pha		                PHA
.394fd3	ab		plb		                PLB
.394fd4	28		plp		                PLP
.394fd5	68		pla		                PLA             ; end setdbr macro
.394fd6	48		pha		                PHA             ; begin setdp macro
.394fd7	08		php		                PHP
.394fd8	c2 20		rep #$20	                REP #$20        ; set A long
.394fda	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394fdd	5b		tcd		                TCD
.394fde	28		plp		                PLP
.394fdf	68		pla		                PLA             ; end setdp macro
.394fe0	22 7b 4b 39	jsl $394b7b	                JSL FATFORCLUSTER32
.394fe4	a9 00 00	lda #$0000	                LDA #0
.394fe7	9d 00 a5	sta $38a500,x	                STA DOS_FAT_SECTORS,X           ; Set the cluster entry to 0
.394fea	9d 02 a5	sta $38a502,x	                STA DOS_FAT_SECTORS+2,X
.394fed	22 24 10 38	jsl $381024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.394ff1	b0 0b		bcs $394ffe	                BCS ret_success
.394ff3					ret_failure
.394ff3	e2 20		sep #$20	                SEP #$20        ; set A short
.394ff5	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394ff7	85 0e		sta $032e	                STA DOS_STATUS
.394ff9	28		plp		                PLP
.394ffa	2b		pld		                PLD
.394ffb	ab		plb		                PLB
.394ffc	18		clc		                CLC
.394ffd	6b		rtl		                RTL
.394ffe					ret_success
.394ffe	e2 20		sep #$20	                SEP #$20        ; set A short
.395000	64 0e		stz $032e	                STZ DOS_STATUS
.395002	28		plp		                PLP
.395003	2b		pld		                PLD
.395004	ab		plb		                PLB
.395005	38		sec		                SEC
.395006	6b		rtl		                RTL
.395007					DOS_APPENDCLUS
.395007	8b		phb		                PHB
.395008	0b		phd		                PHD
.395009	08		php		                PHP
.39500a	48		pha		                PHA             ; begin setdbr macro
.39500b	08		php		                PHP
.39500c	e2 20		sep #$20	                SEP #$20        ; set A short
.39500e	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395010	48		pha		                PHA
.395011	ab		plb		                PLB
.395012	28		plp		                PLP
.395013	68		pla		                PLA             ; end setdbr macro
.395014	48		pha		                PHA             ; begin setdp macro
.395015	08		php		                PHP
.395016	c2 20		rep #$20	                REP #$20        ; set A long
.395018	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39501b	5b		tcd		                TCD
.39501c	28		plp		                PLP
.39501d	68		pla		                PLA             ; end setdp macro
.39501e	c2 30		rep #$30	                REP #$30        ; set A&X long
.395020	a5 12		lda $0332	                LDA DOS_CLUS_ID+2               ; Save the cluster number for later
.395022	48		pha		                PHA
.395023	a5 10		lda $0330	                LDA DOS_CLUS_ID
.395025	48		pha		                PHA
.395026	22 ff 4c 39	jsl $394cff	                JSL DOS_FREECLUS                ; Find a free cluster on the block device
.39502a	b0 09		bcs $395035	                BCS save_cluster                ; If we got a cluster, write the data to it
.39502c	68		pla		fail_cleanup    PLA                             ; Restore the cluster of the file
.39502d	85 10		sta $0330	                STA DOS_CLUS_ID
.39502f	68		pla		                PLA
.395030	85 12		sta $0332	                STA DOS_CLUS_ID+2
.395032	82 7d 00	brl $3950b2	                BRL pass_failure                ; Pass the failure back up the chain
.395035	a5 10		lda $0330	save_cluster    LDA DOS_CLUS_ID
.395037	8d 36 a0	sta $38a036	                STA DOS_NEW_CLUSTER
.39503a	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.39503c	8d 38 a0	sta $38a038	                STA DOS_NEW_CLUSTER+2
.39503f	22 18 48 39	jsl $394818	                JSL DOS_PUTCLUSTER              ; Write the data to the free cluster
.395043	90 e7		bcc $39502c	                BCC fail_cleanup                ; If failure: clean up stack and pass the failure up
.395045	68		pla		                PLA                             ; Restore the cluster of the file
.395046	85 10		sta $0330	                STA DOS_CLUS_ID
.395048	68		pla		                PLA
.395049	85 12		sta $0332	                STA DOS_CLUS_ID+2
.39504b	22 e6 4b 39	jsl $394be6	walk_loop       JSL NEXTCLUSTER                 ; Try to get the next cluster in the chain
.39504f	b0 fa		bcs $39504b	                BCS walk_loop                   ; If found a cluster, keep walking the chain
.395051	e2 20		sep #$20	                SEP #$20        ; set A short
.395053	af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.395057	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.395059	d0 3d		bne $395098	                BNE fat32                       ; No: assume it's FAT32
.39505b					fat12
.39505b	c2 20		rep #$20	                REP #$20        ; set A long
.39505d	22 a0 4a 39	jsl $394aa0	                JSL ENTRYFORCLUS12              ; Make sure we have the right offset for the cluster
.395061	a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if the last cluster ID is even or odd
.395063	89 01 00	bit #$0001	                BIT #1
.395066	d0 11		bne $395079	                BNE is_odd
.395068	ad 36 a0	lda $38a036	is_even         LDA DOS_NEW_CLUSTER             ; Handle the even case (change the lower 12 bits)
.39506b	29 ff 0f	and #$0fff	                AND #$0FFF
.39506e	8d 36 a0	sta $38a036	                STA DOS_NEW_CLUSTER
.395071	bd 00 a5	lda $38a500,x	                LDA DOS_FAT_SECTORS,X
.395074	29 00 f0	and #$f000	                AND #$F000
.395077	80 10		bra $395089	                BRA update_fat12
.395079	ad 36 a0	lda $38a036	is_odd          LDA DOS_NEW_CLUSTER             ; Handle the odd case (change the upper 12 bits)
.39507c	0a		asl a		                ASL A
.39507d	0a		asl a		                ASL A
.39507e	0a		asl a		                ASL A
.39507f	0a		asl a		                ASL A
.395080	8d 36 a0	sta $38a036	                STA DOS_NEW_CLUSTER
.395083	bd 00 a5	lda $38a500,x	                LDA DOS_FAT_SECTORS,X
.395086	29 0f 00	and #$000f	                AND #$000F
.395089	0d 36 a0	ora $38a036	update_fat12    ORA DOS_NEW_CLUSTER
.39508c	9d 00 a5	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.39508f	22 32 4f 39	jsl $394f32	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.395093	b0 22		bcs $3950b7	                BCS ret_success
.395095	82 1a 00	brl $3950b2	                BRL pass_failure
.395098					fat32
.395098	c2 20		rep #$20	                REP #$20        ; set A long
.39509a	ad 36 a0	lda $38a036	                LDA DOS_NEW_CLUSTER             ; Write the ID of the new cluster to the end of the chain
.39509d	9d 00 a5	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.3950a0	ad 38 a0	lda $38a038	                LDA DOS_NEW_CLUSTER+2
.3950a3	9d 02 a5	sta $38a502,x	                STA DOS_FAT_SECTORS+2,X
.3950a6	22 24 10 38	jsl $381024	                JSL PUTBLOCK                    ; Write the FAT sector back (assumes BIOS_LBA and BIOS_BUFF_PTR haven't changed)
.3950aa	b0 0b		bcs $3950b7	                BCS ret_success
.3950ac	e2 20		sep #$20	                SEP #$20        ; set A short
.3950ae	a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Problem working with the FAT
.3950b0	85 0e		sta $032e	                STA DOS_STATUS
.3950b2	28		plp		pass_failure    PLP
.3950b3	2b		pld		                PLD
.3950b4	ab		plb		                PLB
.3950b5	18		clc		                CLC
.3950b6	6b		rtl		                RTL
.3950b7					ret_success
.3950b7	e2 20		sep #$20	                SEP #$20        ; set A short
.3950b9	64 0e		stz $032e	                STZ DOS_STATUS
.3950bb	28		plp		                PLP
.3950bc	2b		pld		                PLD
.3950bd	ab		plb		                PLB
.3950be	38		sec		                SEC
.3950bf	6b		rtl		                RTL
.3950c0					BCD2BIN
.3950c0	8b		phb		                PHB
.3950c1	0b		phd		                PHD
.3950c2	08		php		                PHP
.3950c3	48		pha		                PHA             ; begin setdbr macro
.3950c4	08		php		                PHP
.3950c5	e2 20		sep #$20	                SEP #$20        ; set A short
.3950c7	a9 00		lda #$00	                LDA #0
.3950c9	48		pha		                PHA
.3950ca	ab		plb		                PLB
.3950cb	28		plp		                PLP
.3950cc	68		pla		                PLA             ; end setdbr macro
.3950cd	48		pha		                PHA             ; begin setdp macro
.3950ce	08		php		                PHP
.3950cf	c2 20		rep #$20	                REP #$20        ; set A long
.3950d1	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3950d4	5b		tcd		                TCD
.3950d5	28		plp		                PLP
.3950d6	68		pla		                PLA             ; end setdp macro
.3950d7	c2 30		rep #$30	                REP #$30        ; set A&X long
.3950d9	85 28		sta $0348	                STA DOS_TEMP
.3950db	29 0f 00	and #$000f	                AND #$000F
.3950de	85 2a		sta $034a	                STA DOS_TEMP+2
.3950e0	a5 28		lda $0348	                LDA DOS_TEMP
.3950e2	4a		lsr a		                LSR A
.3950e3	4a		lsr a		                LSR A
.3950e4	4a		lsr a		                LSR A
.3950e5	4a		lsr a		                LSR A
.3950e6	85 28		sta $0348	                STA DOS_TEMP
.3950e8	29 0f 00	and #$000f	                AND #$000F
.3950eb	8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.3950ef	a9 0a 00	lda #$000a	                LDA #10
.3950f2	8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.3950f6	af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.3950fa	18		clc		                CLC
.3950fb	65 2a		adc $034a	                ADC DOS_TEMP+2
.3950fd	85 2a		sta $034a	                STA DOS_TEMP+2
.3950ff	a5 28		lda $0348	                LDA DOS_TEMP
.395101	4a		lsr a		                LSR A
.395102	4a		lsr a		                LSR A
.395103	4a		lsr a		                LSR A
.395104	4a		lsr a		                LSR A
.395105	85 28		sta $0348	                STA DOS_TEMP
.395107	29 0f 00	and #$000f	                AND #$000F
.39510a	8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.39510e	a9 64 00	lda #$0064	                LDA #100
.395111	8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.395115	af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.395119	18		clc		                CLC
.39511a	65 2a		adc $034a	                ADC DOS_TEMP+2
.39511c	85 2a		sta $034a	                STA DOS_TEMP+2
.39511e	a5 28		lda $0348	                LDA DOS_TEMP
.395120	4a		lsr a		                LSR A
.395121	4a		lsr a		                LSR A
.395122	4a		lsr a		                LSR A
.395123	4a		lsr a		                LSR A
.395124	29 0f 00	and #$000f	                AND #$000F
.395127	8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.39512b	a9 e8 03	lda #$03e8	                LDA #1000
.39512e	8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.395132	af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.395136	18		clc		                CLC
.395137	65 2a		adc $034a	                ADC DOS_TEMP+2
.395139	28		plp		                PLP
.39513a	2b		pld		                PLD
.39513b	ab		plb		                PLB
.39513c	6b		rtl		                RTL
.39513d					DOS_RTCCREATE
.39513d	8b		phb		                PHB
.39513e	0b		phd		                PHD
.39513f	08		php		                PHP
.395140	48		pha		                PHA             ; begin setdbr macro
.395141	08		php		                PHP
.395142	e2 20		sep #$20	                SEP #$20        ; set A short
.395144	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395146	48		pha		                PHA
.395147	ab		plb		                PLB
.395148	28		plp		                PLP
.395149	68		pla		                PLA             ; end setdbr macro
.39514a	48		pha		                PHA             ; begin setdp macro
.39514b	08		php		                PHP
.39514c	c2 20		rep #$20	                REP #$20        ; set A long
.39514e	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395151	5b		tcd		                TCD
.395152	28		plp		                PLP
.395153	68		pla		                PLA             ; end setdp macro
.395154	c2 10		rep #$10	                REP #$10        ; set X long
.395156	e2 20		sep #$20	                SEP #$20        ; set A short
.395158	af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn off the updates to the clock
.39515c	09 08		ora #$08	                ORA #%00001000
.39515e	8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.395162	af 0f 08 af	lda $af080f	                LDA @l RTC_CENTURY
.395166	85 29		sta $0349	                STA DOS_TEMP+1
.395168	af 0a 08 af	lda $af080a	                LDA @l RTC_YEAR             ; Get the year
.39516c	85 28		sta $0348	                STA DOS_TEMP
.39516e	c2 20		rep #$20	                REP #$20        ; set A long
.395170	a5 28		lda $0348	                LDA DOS_TEMP
.395172	22 c0 50 39	jsl $3950c0	                JSL BCD2BIN                 ; Convert it to binary
.395176	85 28		sta $0348	                STA DOS_TEMP
.395178	38		sec		                SEC                         ; Year is relative to 1980
.395179	e9 bc 07	sbc #$07bc	                SBC #1980
.39517c	c2 20		rep #$20	                REP #$20        ; set A long
.39517e	0a		asl a		                ASL A
.39517f	0a		asl a		                ASL A
.395180	0a		asl a		                ASL A
.395181	0a		asl a		                ASL A
.395182	0a		asl a		                ASL A
.395183	0a		asl a		                ASL A
.395184	0a		asl a		                ASL A
.395185	0a		asl a		                ASL A
.395186	0a		asl a		                ASL A
.395187	29 00 fe	and #$fe00	                AND #$FE00
.39518a	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.39518d	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39518f	e2 20		sep #$20	                SEP #$20        ; set A short
.395191	af 09 08 af	lda $af0809	                LDA @l RTC_MONTH            ; Get the month
.395195	c2 20		rep #$20	                REP #$20        ; set A long
.395197	29 ff 00	and #$00ff	                AND #$00FF
.39519a	22 c0 50 39	jsl $3950c0	                JSL BCD2BIN                 ; Convert it to binary
.39519e	29 ff 00	and #$00ff	                AND #$00FF                  ; Move the year to bits 15 - 9
.3951a1	0a		asl a		                ASL A
.3951a2	0a		asl a		                ASL A
.3951a3	0a		asl a		                ASL A
.3951a4	0a		asl a		                ASL A
.3951a5	0a		asl a		                ASL A
.3951a6	29 e0 01	and #$01e0	                AND #$01E0                  ; Make sure only the month is covered
.3951a9	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.3951ac	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.3951ae	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3951b0	e2 20		sep #$20	                SEP #$20        ; set A short
.3951b2	af 06 08 af	lda $af0806	                LDA @l RTC_DAY              ; Get the day
.3951b6	c2 20		rep #$20	                REP #$20        ; set A long
.3951b8	29 ff 00	and #$00ff	                AND #$00FF
.3951bb	22 c0 50 39	jsl $3950c0	                JSL BCD2BIN                 ; Convert it to binary
.3951bf	29 1f 00	and #$001f	                AND #$001F                  ; Make sure only the day is covered
.3951c2	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.3951c5	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.3951c7	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3951c9	e2 20		sep #$20	                SEP #$20        ; set A short
.3951cb	af 04 08 af	lda $af0804	                LDA @l RTC_HRS              ; Get the hour
.3951cf	29 1f		and #$1f	                AND #$1F                    ; Trim AM/PM bit
.3951d1	c2 20		rep #$20	                REP #$20        ; set A long
.3951d3	29 ff 00	and #$00ff	                AND #$00FF
.3951d6	22 c0 50 39	jsl $3950c0	                JSL BCD2BIN                 ; Convert it to binary
.3951da	c2 20		rep #$20	                REP #$20        ; set A long
.3951dc	0a		asl a		                ASL A
.3951dd	0a		asl a		                ASL A
.3951de	0a		asl a		                ASL A
.3951df	0a		asl a		                ASL A
.3951e0	0a		asl a		                ASL A
.3951e1	0a		asl a		                ASL A
.3951e2	0a		asl a		                ASL A
.3951e3	0a		asl a		                ASL A
.3951e4	0a		asl a		                ASL A
.3951e5	0a		asl a		                ASL A
.3951e6	0a		asl a		                ASL A
.3951e7	29 00 f8	and #$f800	                AND #$F800
.3951ea	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.3951ed	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3951ef	e2 20		sep #$20	                SEP #$20        ; set A short
.3951f1	af 02 08 af	lda $af0802	                LDA @l RTC_MIN              ; Get the minute
.3951f5	c2 20		rep #$20	                REP #$20        ; set A long
.3951f7	29 ff 00	and #$00ff	                AND #$00FF
.3951fa	22 c0 50 39	jsl $3950c0	                JSL BCD2BIN                 ; Convert it to binary
.3951fe	c2 20		rep #$20	                REP #$20        ; set A long
.395200	0a		asl a		                ASL A
.395201	0a		asl a		                ASL A
.395202	0a		asl a		                ASL A
.395203	0a		asl a		                ASL A
.395204	0a		asl a		                ASL A
.395205	29 e0 07	and #$07e0	                AND #$07E0
.395208	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.39520b	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.39520d	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39520f	e2 20		sep #$20	                SEP #$20        ; set A short
.395211	af 00 08 af	lda $af0800	                LDA @l RTC_SEC              ; Get the second
.395215	c2 20		rep #$20	                REP #$20        ; set A long
.395217	29 ff 00	and #$00ff	                AND #$00FF
.39521a	22 c0 50 39	jsl $3950c0	                JSL BCD2BIN                 ; Convert it to binary
.39521e	c2 20		rep #$20	                REP #$20        ; set A long
.395220	29 1f 00	and #$001f	                AND #$001F
.395223	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.395226	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.395228	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39522a	af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn on the updates again
.39522e	29 f7 00	and #$00f7	                AND #%11110111
.395231	8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.395235	28		plp		                PLP
.395236	2b		pld		                PLD
.395237	ab		plb		                PLB
.395238	6b		rtl		                RTL
.395239					DOS_CREATE
.395239	8b		phb		                PHB
.39523a	0b		phd		                PHD
.39523b	08		php		                PHP
.39523c	48		pha		                PHA             ; begin setdbr macro
.39523d	08		php		                PHP
.39523e	e2 20		sep #$20	                SEP #$20        ; set A short
.395240	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395242	48		pha		                PHA
.395243	ab		plb		                PLB
.395244	28		plp		                PLP
.395245	68		pla		                PLA             ; end setdbr macro
.395246	48		pha		                PHA             ; begin setdp macro
.395247	08		php		                PHP
.395248	c2 20		rep #$20	                REP #$20        ; set A long
.39524a	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39524d	5b		tcd		                TCD
.39524e	28		plp		                PLP
.39524f	68		pla		                PLA             ; end setdp macro
.395250	c2 30		rep #$30	                REP #$30        ; set A&X long
.395252	a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; DOS_TEMP := DOS_FD_PTR->PATH
.395255	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395257	85 28		sta $0348	                STA DOS_TEMP
.395259	c8		iny		                INY
.39525a	c8		iny		                INY
.39525b	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39525d	85 2a		sta $034a	                STA DOS_TEMP+2
.39525f	e2 20		sep #$20	                SEP #$20        ; set A short
.395261	a0 00 00	ldy #$0000	                LDY #0
.395264	a2 00 00	ldx #$0000	                LDX #0
.395267	b7 28		lda [$0348],y	path_loop       LDA [DOS_TEMP],Y                ; Get a byte of the path
.395269	95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X             ; ... save it to the path buffer
.39526b	f0 04		beq $395271	                BEQ find_file                   ; If it's NULL, we're done
.39526d	e8		inx		                INX
.39526e	c8		iny		                INY
.39526f	80 f6		bra $395267	                BRA path_loop
.395271	22 29 49 39	jsl $394929	find_file       JSL DOS_PARSE_PATH
.395275	22 c1 49 39	jsl $3949c1	                JSL DOS_FINDFILE
.395279	90 07		bcc $395282	                BCC set_device
.39527b	e2 20		sep #$20	                SEP #$20        ; set A short
.39527d	a9 0b		lda #$0b	                LDA #DOS_ERR_FILEEXISTS
.39527f	82 d2 00	brl $395354	                BRL ret_failure
.395282					set_device
.395282	e2 20		sep #$20	                SEP #$20        ; set A short
.395284	a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.395287	a5 01		lda $0321	                LDA BIOS_DEV
.395289	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39528b					validate_name
.39528b	22 ff 4c 39	jsl $394cff	                JSL DOS_FREECLUS
.39528f	b0 03		bcs $395294	                BCS save_data
.395291	82 c4 00	brl $395358	                BRL pass_failure
.395294					save_data
.395294	c2 20		rep #$20	                REP #$20        ; set A long
.395296	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER
.395299	a5 10		lda $0330	                LDA DOS_CLUS_ID             ; DOS_FD_PTR->FIRST_CLUSTER := DOS_CLUS_ID
.39529b	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39529d	c8		iny		                INY
.39529e	c8		iny		                INY
.39529f	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3952a1	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3952a3	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; DOS_BUFF_PTR := DOS_FD_PTR->BUFFER
.3952a6	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3952a8	85 1c		sta $033c	                STA DOS_BUFF_PTR
.3952aa	c8		iny		                INY
.3952ab	c8		iny		                INY
.3952ac	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3952ae	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3952b0	22 18 48 39	jsl $394818	                JSL DOS_PUTCLUSTER
.3952b4	b0 00		bcs $3952b6	                BCS find_dir
.3952b6					find_dir
.3952b6	c2 20		rep #$20	                REP #$20        ; set A long
.3952b8	22 53 43 39	jsl $394353	                JSL DOS_DIRFINDFREE
.3952bc	b0 1a		bcs $3952d8	                BCS set_entry
.3952be	c2 20		rep #$20	                REP #$20        ; set A long
.3952c0	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Failed to get the directory entry...
.3952c3	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y              ; DOS_CLUS_ID := DOS_FD_PTR->FIRST_CLUSTER
.3952c5	85 10		sta $0330	                STA DOS_CLUS_ID
.3952c7	c8		iny		                INY
.3952c8	c8		iny		                INY
.3952c9	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3952cb	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3952cd	22 c7 4f 39	jsl $394fc7	                JSL DELCLUSTER32                ; Delete the cluster
.3952d1	e2 20		sep #$20	                SEP #$20        ; set A short
.3952d3	a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Return that we couldn't read the directory
.3952d5	82 7c 00	brl $395354	                BRL ret_failure
.3952d8					set_entry
.3952d8	e2 20		sep #$20	                SEP #$20        ; set A short
.3952da	a0 00 00	ldy #$0000	                LDY #0
.3952dd	a9 00		lda #$00	                LDA #0                          ; NULL
.3952df	97 18		sta [$0338],y	copy_dir_loop   STA [DOS_DIR_PTR],Y             ; Save it to the directory cluster
.3952e1	c8		iny		                INY
.3952e2	c0 20 00	cpy #$0020	                CPY #SIZE(DIRENTRY)
.3952e5	d0 f8		bne $3952df	                BNE copy_dir_loop
.3952e7	a0 00 00	ldy #$0000	                LDY #0
.3952ea	b9 3a a0	lda $38a03a,y	name_loop       LDA DOS_SHORT_NAME,Y            ; Copy the name over
.3952ed	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.3952ef	c8		iny		                INY
.3952f0	c0 0b 00	cpy #$000b	                CPY #11
.3952f3	d0 f5		bne $3952ea	                BNE name_loop
.3952f5	c2 20		rep #$20	                REP #$20        ; set A long
.3952f7	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; DOS_DIR_PTR->CLUSTER_L := DOS_FD_PTR->FIRST_CLUSTER[15..0]
.3952fa	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3952fc	a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.3952ff	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395301	a0 0c 00	ldy #$000c	                LDY #FILEDESC.FIRST_CLUSTER+2   ; DOS_DIR_PTR->CLUSTER_H := DOS_FD_PTR->FIRST_CLUSTER[31..16]
.395304	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395306	a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.395309	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.39530b	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE              ; DOS_DIR_PTR->SIZE := DOS_FD_PTR->SIZE
.39530e	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395310	a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE
.395313	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395315	a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.395318	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39531a	a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.39531d	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.39531f	a9 00 00	lda #$0000	                LDA #0                          ; Force create date-time to 0
.395322	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; TODO: restore the RTC integration when that is working better.
.395325	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395327	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME
.39532a	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39532c	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; DOS_DIR_PTR->CREATE_DATE := DOS_FD_PTR->CREATE_DATE
.39532f	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395331	a0 10 00	ldy #$0010	                LDY #DIRENTRY.CREATE_DATE
.395334	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395336	a0 18 00	ldy #$0018	                LDY #DIRENTRY.MODIFIED_DATE     ; And DOS_DIR_PTR->MODIFIED_DATE
.395339	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.39533b	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME       ; DOS_DIR_PTR->CREATE_TIME := DOS_FD_PTR->CREATE_TIME
.39533e	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395340	a0 0e 00	ldy #$000e	                LDY #DIRENTRY.CREATE_TIME
.395343	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395345	a0 16 00	ldy #$0016	                LDY #DIRENTRY.MODIFIED_TIME     ; And DOS_DIR_PTR->MODIFIED_TIME
.395348	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.39534a	c2 20		rep #$20	                REP #$20        ; set A long
.39534c	22 11 44 39	jsl $394411	                JSL DOS_DIRWRITE
.395350	b0 0b		bcs $39535d	                BCS ret_success
.395352	80 04		bra $395358	                BRA pass_failure
.395354					ret_failure
.395354	e2 20		sep #$20	                SEP #$20        ; set A short
.395356	85 0e		sta $032e	                STA DOS_STATUS
.395358	28		plp		pass_failure    PLP
.395359	2b		pld		                PLD
.39535a	ab		plb		                PLB
.39535b	18		clc		                CLC
.39535c	6b		rtl		                RTL
.39535d					ret_success
.39535d	e2 20		sep #$20	                SEP #$20        ; set A short
.39535f	64 0e		stz $032e	                STZ DOS_STATUS
.395361	28		plp		                PLP
.395362	2b		pld		                PLD
.395363	ab		plb		                PLB
.395364	38		sec		                SEC
.395365	6b		rtl		                RTL
.395366					DOS_COPYPATH
.395366	da		phx		                PHX
.395367	5a		phy		                PHY
.395368	8b		phb		                PHB
.395369	0b		phd		                PHD
.39536a	08		php		                PHP
.39536b	48		pha		                PHA             ; begin setdbr macro
.39536c	08		php		                PHP
.39536d	e2 20		sep #$20	                SEP #$20        ; set A short
.39536f	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395371	48		pha		                PHA
.395372	ab		plb		                PLB
.395373	28		plp		                PLP
.395374	68		pla		                PLA             ; end setdbr macro
.395375	48		pha		                PHA             ; begin setdp macro
.395376	08		php		                PHP
.395377	c2 20		rep #$20	                REP #$20        ; set A long
.395379	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39537c	5b		tcd		                TCD
.39537d	28		plp		                PLP
.39537e	68		pla		                PLA             ; end setdp macro
.39537f	c2 30		rep #$30	                REP #$30        ; set A&X long
.395381	a9 00 00	lda #$0000	                LDA #0                  ; Set the DOS_PATH_BUFF to all zeros
.395384	a2 00 00	ldx #$0000	                LDX #0
.395387	95 e0		sta $0400,x	clr_loop        STA DOS_PATH_BUFF,X
.395389	e8		inx		                INX
.39538a	e8		inx		                INX
.39538b	e0 00 01	cpx #$0100	                CPX #256
.39538e	d0 f7		bne $395387	                BNE clr_loop
.395390	a5 20		lda $0340	                LDA DOS_FD_PTR          ; Is the DOS_FD_PTR null?
.395392	d0 04		bne $395398	                BNE get_path            ; No: attempt to fetch the path
.395394	a5 22		lda $0342	                LDA DOS_FD_PTR+2
.395396	f0 27		beq $3953bf	                BEQ done                ; Yes: return an empty buffer
.395398	a0 02 00	ldy #$0002	get_path        LDY #FILEDESC.PATH      ; Get the path buffer
.39539b	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39539d	85 28		sta $0348	                STA DOS_TEMP
.39539f	c8		iny		                INY
.3953a0	c8		iny		                INY
.3953a1	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3953a3	85 2a		sta $034a	                STA DOS_TEMP+2
.3953a5	a5 28		lda $0348	                LDA DOS_TEMP            ; Is the path pointer NULL?
.3953a7	d0 04		bne $3953ad	                BNE start_copy          ; No: start copying it
.3953a9	a5 2a		lda $034a	                LDA DOS_TEMP+2
.3953ab	f0 12		beq $3953bf	                BEQ done                ; Yes: return an empty buffer
.3953ad					start_copy
.3953ad	e2 20		sep #$20	                SEP #$20        ; set A short
.3953af	a2 00 00	ldx #$0000	                LDX #0
.3953b2	a0 00 00	ldy #$0000	                LDY #0
.3953b5	b7 28		lda [$0348],y	loop            LDA [DOS_TEMP],Y
.3953b7	95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.3953b9	f0 04		beq $3953bf	                BEQ done
.3953bb	e8		inx		                INX
.3953bc	c8		iny		                INY
.3953bd	d0 f6		bne $3953b5	                BNE loop
.3953bf	28		plp		done            PLP
.3953c0	2b		pld		                PLD
.3953c1	ab		plb		                PLB
.3953c2	7a		ply		                PLY
.3953c3	fa		plx		                PLX
.3953c4	6b		rtl		                RTL

;******  Return to file: src\sdos.asm

.3953c5					DOS_TEST
.3953c5	8b		phb		                PHB
.3953c6	0b		phd		                PHD
.3953c7	08		php		                PHP
.3953c8	48		pha		                PHA             ; begin setdbr macro
.3953c9	08		php		                PHP
.3953ca	e2 20		sep #$20	                SEP #$20        ; set A short
.3953cc	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3953ce	48		pha		                PHA
.3953cf	ab		plb		                PLB
.3953d0	28		plp		                PLP
.3953d1	68		pla		                PLA             ; end setdbr macro
.3953d2	48		pha		                PHA             ; begin setdp macro
.3953d3	08		php		                PHP
.3953d4	c2 20		rep #$20	                REP #$20        ; set A long
.3953d6	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3953d9	5b		tcd		                TCD
.3953da	28		plp		                PLP
.3953db	68		pla		                PLA             ; end setdp macro
.3953dc	c2 30		rep #$30	                REP #$30        ; set A&X long
.3953de	a9 04 54	lda #$5404	                LDA #<>src_file
.3953e1	8f 64 03 00	sta $000364	                STA @l DOS_STR1_PTR
.3953e5	a9 39 00	lda #$0039	                LDA #`src_file
.3953e8	8f 66 03 00	sta $000366	                STA @l DOS_STR1_PTR+2
.3953ec	a9 11 54	lda #$5411	                LDA #<>dst_file
.3953ef	8f 68 03 00	sta $000368	                STA @l DOS_STR2_PTR
.3953f3	a9 39 00	lda #$0039	                LDA #`dst_file
.3953f6	8f 6a 03 00	sta $00036a	                STA @l DOS_STR2_PTR+2
.3953fa	22 a7 5a 39	jsl $395aa7	                JSL IF_COPY
.3953fe	b0 00		bcs $395400	                BCS done
.395400	28		plp		done            PLP
.395401	2b		pld		                PLD
.395402	ab		plb		                PLB
.395403	6b		rtl		                RTL
>395404	40 73 3a 68 65 6c 6c 6f		src_file        .null "@s:hello.bas"
>39540c	2e 62 61 73 00
>395411	40 73 3a 68 65 6c 6c 6f		dst_file        .null "@s:hello2.bas"
>395419	32 2e 62 61 73 00
.39541f					IF_OPEN
.39541f	da		phx		                PHX
.395420	5a		phy		                PHY
.395421	0b		phd		                PHD
.395422	8b		phb		                PHB
.395423	08		php		                PHP
.395424	48		pha		                PHA             ; begin setdbr macro
.395425	08		php		                PHP
.395426	e2 20		sep #$20	                SEP #$20        ; set A short
.395428	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39542a	48		pha		                PHA
.39542b	ab		plb		                PLB
.39542c	28		plp		                PLP
.39542d	68		pla		                PLA             ; end setdbr macro
.39542e	48		pha		                PHA             ; begin setdp macro
.39542f	08		php		                PHP
.395430	c2 20		rep #$20	                REP #$20        ; set A long
.395432	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395435	5b		tcd		                TCD
.395436	28		plp		                PLP
.395437	68		pla		                PLA             ; end setdp macro
.395438	e2 20		sep #$20	                SEP #$20        ; set A short
.39543a	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Get the status to make sure a open is ok
.39543d	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39543f	89 38		bit #$38	                BIT #FD_STAT_OPEN
.395441	f0 05		beq $395448	                BEQ ok_to_open
.395443	a9 0f		lda #$0f	                LDA #DOS_ERR_OPEN               ; If already open: throw an error
.395445	82 1e 05	brl $395966	                BRL IF_FAILURE
.395448	22 66 53 39	jsl $395366	ok_to_open      JSL DOS_COPYPATH                ; Copy the path to the path buffer
.39544c	22 c1 49 39	jsl $3949c1	                JSL DOS_FINDFILE                ; Attempt to find the file
.395450	b0 03		bcs $395455	                BCS is_found                    ; If OK: we found the file
.395452	82 15 05	brl $39596a	                BRL IF_PASSFAILURE              ; Otherwise: pass the failure up the chain
.395455					is_found
.395455	e2 20		sep #$20	                SEP #$20        ; set A short
.395457	a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.39545a	a5 01		lda $0321	                LDA BIOS_DEV
.39545c	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39545e	c2 20		rep #$20	                REP #$20        ; set A long
.395460	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Set the buffer point to the one provided in the file
.395463	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395465	85 1c		sta $033c	                STA DOS_BUFF_PTR
.395467	c8		iny		                INY
.395468	c8		iny		                INY
.395469	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39546b	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.39546d	22 db 47 39	jsl $3947db	                JSL DOS_GETCLUSTER              ; Attempt to load the cluster
.395471	b0 03		bcs $395476	                BCS read_cluster
.395473	82 f4 04	brl $39596a	                BRL IF_PASSFAILURE
.395476	a0 0a 00	ldy #$000a	read_cluster    LDY #FILEDESC.FIRST_CLUSTER     ; Set the first cluster in the file descriptor
.395479	a5 10		lda $0330	                LDA DOS_CLUS_ID
.39547b	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39547d	c8		iny		                INY
.39547e	c8		iny		                INY
.39547f	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.395481	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395483	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Set the current cluster in the file descriptor
.395486	a5 10		lda $0330	                LDA DOS_CLUS_ID
.395488	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39548a	c8		iny		                INY
.39548b	c8		iny		                INY
.39548c	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.39548e	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395490	a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE              ; Copy the filesize from the directory entry to the file descriptor
.395493	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.395495	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE
.395498	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39549a	a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.39549d	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.39549f	a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.3954a2	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3954a4	e2 20		sep #$20	                SEP #$20        ; set A short
.3954a6	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Mark file as open and readable
.3954a9	a9 39		lda #$39	                LDA #FD_STAT_OPEN | FD_STAT_READ
.3954ab	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.3954ad	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3954af	82 bf 04	brl $395971	                BRL IF_SUCCESS
.3954b2					IF_CREATE
.3954b2	da		phx		                PHX
.3954b3	5a		phy		                PHY
.3954b4	0b		phd		                PHD
.3954b5	8b		phb		                PHB
.3954b6	08		php		                PHP
.3954b7	48		pha		                PHA             ; begin setdbr macro
.3954b8	08		php		                PHP
.3954b9	e2 20		sep #$20	                SEP #$20        ; set A short
.3954bb	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3954bd	48		pha		                PHA
.3954be	ab		plb		                PLB
.3954bf	28		plp		                PLP
.3954c0	68		pla		                PLA             ; end setdbr macro
.3954c1	48		pha		                PHA             ; begin setdp macro
.3954c2	08		php		                PHP
.3954c3	c2 20		rep #$20	                REP #$20        ; set A long
.3954c5	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3954c8	5b		tcd		                TCD
.3954c9	28		plp		                PLP
.3954ca	68		pla		                PLA             ; end setdp macro
.3954cb	22 39 52 39	jsl $395239	                JSL DOS_CREATE                  ; Attempt to create the file
.3954cf	90 18		bcc $3954e9	                BCC pass_failure                ; If it fails: pass the failure up the chain
.3954d1	c2 30		rep #$30	                REP #$30        ; set A&X long
.3954d3	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Sets the current cluster to 0 to make sure the next write appends
.3954d6	a9 00 00	lda #$0000	                LDA #0
.3954d9	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3954db	c8		iny		                INY
.3954dc	c8		iny		                INY
.3954dd	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3954df	e2 20		sep #$20	                SEP #$20        ; set A short
.3954e1	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS
.3954e4	a9 3a		lda #$3a	                LDA #FD_STAT_OPEN | FD_STAT_WRITE   ; Set the file to open and APPEND only
.3954e6	82 88 04	brl $395971	                BRL IF_SUCCESS
.3954e9	82 7a 04	brl $395966	pass_failure    BRL IF_FAILURE
.3954ec					IF_CLOSE
.3954ec	da		phx		                PHX
.3954ed	5a		phy		                PHY
.3954ee	0b		phd		                PHD
.3954ef	8b		phb		                PHB
.3954f0	08		php		                PHP
.3954f1	48		pha		                PHA             ; begin setdbr macro
.3954f2	08		php		                PHP
.3954f3	e2 20		sep #$20	                SEP #$20        ; set A short
.3954f5	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3954f7	48		pha		                PHA
.3954f8	ab		plb		                PLB
.3954f9	28		plp		                PLP
.3954fa	68		pla		                PLA             ; end setdbr macro
.3954fb	48		pha		                PHA             ; begin setdp macro
.3954fc	08		php		                PHP
.3954fd	c2 20		rep #$20	                REP #$20        ; set A long
.3954ff	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395502	5b		tcd		                TCD
.395503	28		plp		                PLP
.395504	68		pla		                PLA             ; end setdp macro
.395505	e2 20		sep #$20	                SEP #$20        ; set A short
.395507	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Check to see if we were writing the file
.39550a	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39550c	89 02		bit #$02	                BIT #FD_STAT_WRITE
.39550e	f0 09		beq $395519	                BEQ set_flag                    ; No, just mark it closed
.395510	22 85 55 39	jsl $395585	                JSL IF_WRITE                    ; Attempt to write the cluster
.395514	b0 03		bcs $395519	                BCS set_flag
.395516	82 51 04	brl $39596a	                BRL IF_PASSFAILURE              ; If there was a problem, pass it up the chain
.395519	22 5d 5a 39	jsl $395a5d	set_flag        JSL IF_FREEFD                   ; Free the file descriptor as well
.39551d	82 51 04	brl $395971	                BRL IF_SUCCESS
.395520					IF_READ
.395520	da		phx		                PHX
.395521	5a		phy		                PHY
.395522	0b		phd		                PHD
.395523	8b		phb		                PHB
.395524	08		php		                PHP
.395525	48		pha		                PHA             ; begin setdbr macro
.395526	08		php		                PHP
.395527	e2 20		sep #$20	                SEP #$20        ; set A short
.395529	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39552b	48		pha		                PHA
.39552c	ab		plb		                PLB
.39552d	28		plp		                PLP
.39552e	68		pla		                PLA             ; end setdbr macro
.39552f	48		pha		                PHA             ; begin setdp macro
.395530	08		php		                PHP
.395531	c2 20		rep #$20	                REP #$20        ; set A long
.395533	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395536	5b		tcd		                TCD
.395537	28		plp		                PLP
.395538	68		pla		                PLA             ; end setdp macro
.395539	c2 10		rep #$10	                REP #$10        ; set X long
.39553b	e2 20		sep #$20	                SEP #$20        ; set A short
.39553d					get_dev
.39553d	e2 20		sep #$20	                SEP #$20        ; set A short
.39553f	a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.395542	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395544	85 01		sta $0321	                STA BIOS_DEV
.395546	22 43 45 39	jsl $394543	                JSL DOS_MOUNT                   ; Make sure the device is mounted (if needed)
.39554a	c2 20		rep #$20	                REP #$20        ; set A long
.39554c	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.39554f	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395551	85 10		sta $0330	                STA DOS_CLUS_ID
.395553	c8		iny		                INY
.395554	c8		iny		                INY
.395555	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395557	85 12		sta $0332	                STA DOS_CLUS_ID+2
.395559	22 e6 4b 39	jsl $394be6	                JSL NEXTCLUSTER                 ; Find the next cluster of the file
.39555d	90 13		bcc $395572	                BCC pass_failure                ; If not OK: pass the failure up the chain
.39555f	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.395562	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395564	85 1c		sta $033c	                STA DOS_BUFF_PTR
.395566	c8		iny		                INY
.395567	c8		iny		                INY
.395568	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39556a	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.39556c	22 db 47 39	jsl $3947db	                JSL DOS_GETCLUSTER              ; Get the cluster
.395570	b0 03		bcs $395575	                BCS ret_success                 ; If ok: return success
.395572					pass_failure
.395572	82 f5 03	brl $39596a	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.395575	a0 06 00	ldy #$0006	ret_success     LDY #FILEDESC.CLUSTER           ; Save the new cluster as the file's current cluster
.395578	a5 10		lda $0330	                LDA DOS_CLUS_ID
.39557a	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39557c	c8		iny		                INY
.39557d	c8		iny		                INY
.39557e	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.395580	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395582	82 ec 03	brl $395971	                BRL IF_SUCCESS
.395585					IF_WRITE
.395585	da		phx		                PHX
.395586	5a		phy		                PHY
.395587	0b		phd		                PHD
.395588	8b		phb		                PHB
.395589	08		php		                PHP
.39558a	48		pha		                PHA             ; begin setdbr macro
.39558b	08		php		                PHP
.39558c	e2 20		sep #$20	                SEP #$20        ; set A short
.39558e	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395590	48		pha		                PHA
.395591	ab		plb		                PLB
.395592	28		plp		                PLP
.395593	68		pla		                PLA             ; end setdbr macro
.395594	48		pha		                PHA             ; begin setdp macro
.395595	08		php		                PHP
.395596	c2 20		rep #$20	                REP #$20        ; set A long
.395598	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39559b	5b		tcd		                TCD
.39559c	28		plp		                PLP
.39559d	68		pla		                PLA             ; end setdp macro
.39559e	c2 10		rep #$10	                REP #$10        ; set X long
.3955a0	e2 20		sep #$20	                SEP #$20        ; set A short
.3955a2	a0 01 00	ldy #$0001	get_dev         LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.3955a5	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3955a7	85 01		sta $0321	                STA BIOS_DEV
.3955a9	22 43 45 39	jsl $394543	                JSL DOS_MOUNT                   ; Make sure the device is mounted (if needed)
.3955ad	c2 20		rep #$20	                REP #$20        ; set A long
.3955af	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.3955b2	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3955b4	85 1c		sta $033c	                STA DOS_BUFF_PTR
.3955b6	c8		iny		                INY
.3955b7	c8		iny		                INY
.3955b8	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3955ba	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3955bc	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.3955bf	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3955c1	85 10		sta $0330	                STA DOS_CLUS_ID
.3955c3	c8		iny		                INY
.3955c4	c8		iny		                INY
.3955c5	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3955c7	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3955c9	d0 1a		bne $3955e5	                BNE rewrite_cluster             ; If the cluster ID <> 0, overwrite it
.3955cb	a5 10		lda $0330	                LDA DOS_CLUS_ID
.3955cd	d0 16		bne $3955e5	                BNE rewrite_cluster
.3955cf	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Get the file's first cluster
.3955d2	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3955d4	85 10		sta $0330	                STA DOS_CLUS_ID
.3955d6	c8		iny		                INY
.3955d7	c8		iny		                INY
.3955d8	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3955da	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3955dc	22 07 50 39	jsl $395007	                JSL DOS_APPENDCLUS              ; Append the cluster
.3955e0	b0 0c		bcs $3955ee	                BCS ret_success                 ; If OK: return success
.3955e2	82 85 03	brl $39596a	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.3955e5	22 18 48 39	jsl $394818	rewrite_cluster JSL DOS_PUTCLUSTER              ; Over-write the cluster
.3955e9	b0 03		bcs $3955ee	                BCS ret_success                 ; If ok: return success
.3955eb	82 7c 03	brl $39596a	pass_failure    BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.3955ee	82 80 03	brl $395971	ret_success     BRL IF_SUCCESS
.3955f1					IF_DIROPEN
.3955f1	da		phx		                PHX
.3955f2	5a		phy		                PHY
.3955f3	0b		phd		                PHD
.3955f4	8b		phb		                PHB
.3955f5	08		php		                PHP
.3955f6	48		pha		                PHA             ; begin setdbr macro
.3955f7	08		php		                PHP
.3955f8	e2 20		sep #$20	                SEP #$20        ; set A short
.3955fa	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3955fc	48		pha		                PHA
.3955fd	ab		plb		                PLB
.3955fe	28		plp		                PLP
.3955ff	68		pla		                PLA             ; end setdbr macro
.395600	48		pha		                PHA             ; begin setdp macro
.395601	08		php		                PHP
.395602	c2 20		rep #$20	                REP #$20        ; set A long
.395604	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395607	5b		tcd		                TCD
.395608	28		plp		                PLP
.395609	68		pla		                PLA             ; end setdp macro
.39560a	c2 30		rep #$30	                REP #$30        ; set A&X long
.39560c	22 66 53 39	jsl $395366	                JSL DOS_COPYPATH            ; Copy the path from the file descriptor to the path buffer
.395610	22 29 49 39	jsl $394929	                JSL DOS_PARSE_PATH          ; Parse the path
.395614	22 43 45 39	jsl $394543	                JSL DOS_MOUNT               ; Make sure we've mounted the SDC.
.395618	b0 03		bcs $39561d	                BCS get_root_dir            ; If successful: get the root directory
.39561a	82 4d 03	brl $39596a	                BRL IF_PASSFAILURE          ; Otherwise: pass the error up the chain
.39561d					get_root_dir
.39561d	c2 30		rep #$30	                REP #$30        ; set A&X long
.39561f	22 f8 41 39	jsl $3941f8	                JSL DOS_DIROPEN
.395623	b0 03		bcs $395628	                BCS success
.395625	82 42 03	brl $39596a	                BRL IF_PASSFAILURE
.395628	82 46 03	brl $395971	success         BRL IF_SUCCESS
.39562b					IF_DIRNEXT
.39562b	5c 92 42 39	jmp $394292	                JML DOS_DIRNEXT
.39562f					IF_DELETE
.39562f	da		phx		                PHX
.395630	5a		phy		                PHY
.395631	0b		phd		                PHD
.395632	8b		phb		                PHB
.395633	08		php		                PHP
.395634	48		pha		                PHA             ; begin setdbr macro
.395635	08		php		                PHP
.395636	e2 20		sep #$20	                SEP #$20        ; set A short
.395638	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39563a	48		pha		                PHA
.39563b	ab		plb		                PLB
.39563c	28		plp		                PLP
.39563d	68		pla		                PLA             ; end setdbr macro
.39563e	48		pha		                PHA             ; begin setdp macro
.39563f	08		php		                PHP
.395640	c2 20		rep #$20	                REP #$20        ; set A long
.395642	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395645	5b		tcd		                TCD
.395646	28		plp		                PLP
.395647	68		pla		                PLA             ; end setdp macro
.395648	c2 30		rep #$30	                REP #$30        ; set A&X long
.39564a	22 c1 49 39	jsl $3949c1	                JSL DOS_FINDFILE
.39564e	b0 03		bcs $395653	                BCS get_first_clus
.395650	82 17 03	brl $39596a	                BRL IF_PASSFAILURE
.395653					get_first_clus
.395653	a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.395656	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.395658	85 10		sta $0330	                STA DOS_CLUS_ID
.39565a	a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.39565d	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.39565f	85 12		sta $0332	                STA DOS_CLUS_ID+2
.395661	a5 10		lda $0330	                LDA DOS_CLUS_ID
.395663	8d 2a a0	sta $38a02a	                STA DOS_CURR_CLUS
.395666	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.395668	8d 2c a0	sta $38a02c	                STA DOS_CURR_CLUS+2
.39566b	22 e6 4b 39	jsl $394be6	del_loop        JSL NEXTCLUSTER
.39566f	90 2f		bcc $3956a0	                BCC del_one
.395671	a5 10		lda $0330	                LDA DOS_CLUS_ID
.395673	8d 2e a0	sta $38a02e	                STA DOS_NEXT_CLUS
.395676	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.395678	8d 30 a0	sta $38a030	                STA DOS_NEXT_CLUS+2
.39567b	ad 2a a0	lda $38a02a	                LDA DOS_CURR_CLUS
.39567e	85 10		sta $0330	                STA DOS_CLUS_ID
.395680	ad 2c a0	lda $38a02c	                LDA DOS_CURR_CLUS+2
.395683	85 12		sta $0332	                STA DOS_CLUS_ID+2
.395685	22 c7 4f 39	jsl $394fc7	                JSL DELCLUSTER32
.395689	b0 03		bcs $39568e	                BCS go_next
.39568b	82 dc 02	brl $39596a	                BRL IF_PASSFAILURE
.39568e					go_next
.39568e	ad 2e a0	lda $38a02e	                LDA DOS_NEXT_CLUS
.395691	85 10		sta $0330	                STA DOS_CLUS_ID
.395693	8d 2a a0	sta $38a02a	                STA DOS_CURR_CLUS
.395696	ad 30 a0	lda $38a030	                LDA DOS_NEXT_CLUS+2
.395699	85 12		sta $0332	                STA DOS_CLUS_ID+2
.39569b	8d 2c a0	sta $38a02c	                STA DOS_CURR_CLUS+2
.39569e	80 cb		bra $39566b	                BRA del_loop
.3956a0					del_one
.3956a0	ad 2a a0	lda $38a02a	                LDA DOS_CURR_CLUS
.3956a3	85 10		sta $0330	                STA DOS_CLUS_ID
.3956a5	ad 2c a0	lda $38a02c	                LDA DOS_CURR_CLUS+2
.3956a8	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3956aa	22 21 4f 39	jsl $394f21	                JSL DELCLUSTER
.3956ae	b0 03		bcs $3956b3	                BCS free_dir_entry
.3956b0	82 b7 02	brl $39596a	                BRL IF_PASSFAILURE
.3956b3					free_dir_entry
.3956b3	e2 20		sep #$20	                SEP #$20        ; set A short
.3956b5	a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME         ; Flag the directory entry as deleted
.3956b8	a9 e5		lda #$e5	                LDA #DOS_DIR_ENT_UNUSED
.3956ba	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.3956bc	22 11 44 39	jsl $394411	                JSL DOS_DIRWRITE                ; Write the directory entry back
.3956c0	b0 03		bcs $3956c5	                BCS ret_success
.3956c2	82 a5 02	brl $39596a	                BRL IF_PASSFAILURE
.3956c5	82 a9 02	brl $395971	ret_success     BRL IF_SUCCESS
.3956c8					IF_DIRREAD
.3956c8	da		phx		                PHX
.3956c9	5a		phy		                PHY
.3956ca	0b		phd		                PHD
.3956cb	8b		phb		                PHB
.3956cc	08		php		                PHP
.3956cd	48		pha		                PHA             ; begin setdbr macro
.3956ce	08		php		                PHP
.3956cf	e2 20		sep #$20	                SEP #$20        ; set A short
.3956d1	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3956d3	48		pha		                PHA
.3956d4	ab		plb		                PLB
.3956d5	28		plp		                PLP
.3956d6	68		pla		                PLA             ; end setdbr macro
.3956d7	48		pha		                PHA             ; begin setdp macro
.3956d8	08		php		                PHP
.3956d9	c2 20		rep #$20	                REP #$20        ; set A long
.3956db	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3956de	5b		tcd		                TCD
.3956df	28		plp		                PLP
.3956e0	68		pla		                PLA             ; end setdp macro
.3956e1	c2 30		rep #$30	                REP #$30        ; set A&X long
.3956e3	22 c1 49 39	jsl $3949c1	                JSL DOS_FINDFILE
.3956e7	b0 03		bcs $3956ec	                BCS success
.3956e9	82 7a 02	brl $395966	                BRL IF_FAILURE
.3956ec	82 82 02	brl $395971	success         BRL IF_SUCCESS
.3956ef					IF_DIRWRITE
.3956ef	5c 11 44 39	jmp $394411	                JML DOS_DIRWRITE
.3956f3					IF_LOAD
.3956f3	da		phx		                PHX
.3956f4	5a		phy		                PHY
.3956f5	0b		phd		                PHD
.3956f6	8b		phb		                PHB
.3956f7	08		php		                PHP
.3956f8	48		pha		                PHA             ; begin setdbr macro
.3956f9	08		php		                PHP
.3956fa	e2 20		sep #$20	                SEP #$20        ; set A short
.3956fc	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3956fe	48		pha		                PHA
.3956ff	ab		plb		                PLB
.395700	28		plp		                PLP
.395701	68		pla		                PLA             ; end setdbr macro
.395702	48		pha		                PHA             ; begin setdp macro
.395703	08		php		                PHP
.395704	c2 20		rep #$20	                REP #$20        ; set A long
.395706	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395709	5b		tcd		                TCD
.39570a	28		plp		                PLP
.39570b	68		pla		                PLA             ; end setdp macro
.39570c	c2 30		rep #$30	                REP #$30        ; set A&X long
.39570e	22 1f 54 39	jsl $39541f	                JSL IF_OPEN
.395712	b0 03		bcs $395717	                BCS setup                   ; If success: start setting things up
.395714	82 53 02	brl $39596a	                BRL IF_PASSFAILURE          ; Otherwise: pass the failure up the chain
.395717					setup
.395717	c2 20		rep #$20	                REP #$20        ; set A long
.395719	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE          ; Record the size of the file in DOS_FILE_SIZE
.39571c	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39571e	85 2c		sta $034c	                STA DOS_FILE_SIZE
.395720	c8		iny		                INY
.395721	c8		iny		                INY
.395722	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395724	85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.395726	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; Set up the source pointer
.395729	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39572b	85 30		sta $0350	                STA DOS_SRC_PTR
.39572d	c8		iny		                INY
.39572e	c8		iny		                INY
.39572f	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395731	85 32		sta $0352	                STA DOS_SRC_PTR+2
.395733	a5 36		lda $0356	                LDA DOS_DST_PTR+2           ; Is there a destination address in RAM?
.395735	c9 40 00	cmp #$0040	                CMP #$0040
.395738	b0 04		bcs $39573e	                BGE load_by_type            ; No: try to load it by type
.39573a	5c 19 58 39	jmp $395819	                JML IF_LOADRAW              ; Otherwise, load it to the supplied destination
.39573e	a0 08 00	ldy #$0008	load_by_type    LDY #8                      ; Point to the first extension byte
.395741	a2 00 00	ldx #$0000	                LDX #0                      ; and the first byte of the table
.395744					type_loop
.395744	e2 20		sep #$20	                SEP #$20        ; set A short
.395746	bf 8a 57 39	lda $39578a,x	                LDA LOAD_TYPE_TABLE,X       ; Get 1st extension character of the entry
.39574a	f0 37		beq $395783	                BEQ no_match                ; If NULL... we didn't get a match
.39574c	d9 3a a0	cmp $38a03a,y	                CMP DOS_SHORT_NAME,Y        ; Get the character of the extension
.39574f	d0 28		bne $395779	                BNE next_entry              ; If they don't match, try the next entry
.395751	bf 8b 57 39	lda $39578b,x	                LDA LOAD_TYPE_TABLE+1,X     ; Get 2nd extension character of the entry
.395755	d9 3b a0	cmp $38a03b,y	                CMP DOS_SHORT_NAME+1,Y      ; Get the 2nd character of the extension
.395758	d0 1f		bne $395779	                BNE next_entry              ; If they don't match, try the next entry
.39575a	bf 8c 57 39	lda $39578c,x	                LDA LOAD_TYPE_TABLE+2,X     ; Get 3rd extension character of the entry
.39575e	d9 3c a0	cmp $38a03c,y	                CMP DOS_SHORT_NAME+2,Y      ; Get the 3rd character of the extension
.395761	d0 16		bne $395779	                BNE next_entry              ; If they don't match, try the next entry
.395763	c2 20		rep #$20	                REP #$20        ; set A long
.395765	bf 8d 57 39	lda $39578d,x	                LDA LOAD_TYPE_TABLE+3,X     ; Get the low word of the address
.395769	85 28		sta $0348	                STA DOS_TEMP                ; Save it to the jump vector
.39576b	e2 20		sep #$20	                SEP #$20        ; set A short
.39576d	bf 8f 57 39	lda $39578f,x	                LDA LOAD_TYPE_TABLE+5,X     ; Get the high byte of the address
.395771	85 2a		sta $034a	                STA DOS_TEMP+2              ; Save it to the jump vector
.395773	a2 00 00	ldx #$0000	                LDX #0
.395776	dc 48 03	jmp [$0348]	                JML [DOS_TEMP]              ; Jump to the loading routine
.395779					next_entry
.395779	c2 30		rep #$30	                REP #$30        ; set A&X long
.39577b	8a		txa		                TXA
.39577c	18		clc		                CLC
.39577d	69 06 00	adc #$0006	                ADC #6
.395780	aa		tax		                TAX
.395781	80 c1		bra $395744	                BRA type_loop               ; And check it against the file
.395783					no_match
.395783	e2 20		sep #$20	                SEP #$20        ; set A short
.395785	a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC         ; Return an not-executable error
.395787	82 dc 01	brl $395966	                BRL IF_FAILURE
>39578a	50 47 58			LOAD_TYPE_TABLE .text "PGX"                 ; "PGX" --> IF_LOADPGX
>39578d	91 57				                .word <>IF_LOADPGX
>39578f	39				                .byte `IF_LOADPGX
>395790	00				                .byte 0
.395791					IF_LOADPGX
.395791	c2 10		rep #$10	                REP #$10        ; set X long
.395793	e2 20		sep #$20	                SEP #$20        ; set A short
.395795	a0 00 00	ldy #$0000	                LDY #0
.395798	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Check for "PGX" signature
.39579a	c9 50		cmp #$50	                CMP #'P'
.39579c	d0 15		bne $3957b3	                BNE fail_sig                        ; If not found, fail
.39579e	c8		iny		                INY
.39579f	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.3957a1	c9 47		cmp #$47	                CMP #'G'
.3957a3	d0 0e		bne $3957b3	                BNE fail_sig
.3957a5	c8		iny		                INY
.3957a6	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.3957a8	c9 58		cmp #$58	                CMP #'X'
.3957aa	d0 07		bne $3957b3	                BNE fail_sig
.3957ac	c8		iny		                INY                                 ; Check for CPU and version code ($01 for 65816)
.3957ad	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.3957af	c9 01		cmp #$01	                CMP #$01
.3957b1	f0 17		beq $3957ca	                BEQ get_dest                        ; All passes: go to get the destination address
.3957b3	a9 10		lda #$10	fail_sig        LDA #DOS_ERR_PGXSIG                 ; Fail with a PGXSIG error code
.3957b5	22 66 59 39	jsl $395966	                JSL IF_FAILURE
.3957b9					adjust_size
.3957b9	c2 20		rep #$20	                REP #$20        ; set A long
.3957bb	38		sec		                SEC                                 ; Subtract the 8 bytes of the header from the file size
.3957bc	a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.3957be	e9 08 00	sbc #$0008	                SBC #8
.3957c1	85 2c		sta $034c	                STA DOS_FILE_SIZE
.3957c3	a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.3957c5	e9 00 00	sbc #$0000	                SBC #0
.3957c8	85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.3957ca					get_dest
.3957ca	c2 20		rep #$20	                REP #$20        ; set A long
.3957cc	c8		iny		                INY
.3957cd	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get low word of destination address
.3957cf	85 34		sta $0354	                STA DOS_DST_PTR                     ; And save it to the destination pointer
.3957d1	85 3c		sta $035c	                STA DOS_RUN_PTR                     ; And save it to the RUN pointer
.3957d3	c8		iny		                INY
.3957d4	c8		iny		                INY
.3957d5	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get high word of destination address
.3957d7	85 36		sta $0356	                STA DOS_DST_PTR+2
.3957d9	85 3e		sta $035e	                STA DOS_RUN_PTR+2
.3957db	c8		iny		                INY                                 ; Point to the first data byte
.3957dc	c8		iny		                INY
.3957dd					copy_loop
.3957dd	e2 20		sep #$20	                SEP #$20        ; set A short
.3957df	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Read a byte from the file
.3957e1	87 34		sta [$0354]	                STA [DOS_DST_PTR]                   ; Write it to the destination
.3957e3	c2 20		rep #$20	                REP #$20        ; set A long
.3957e5	e6 34		inc $0354	                INC DOS_DST_PTR                     ; Move to the next destination location
.3957e7	d0 02		bne $3957eb	                BNE dec_file_size
.3957e9	e6 36		inc $0356	                INC DOS_DST_PTR+2
.3957eb	38		sec		dec_file_size   SEC                                 ; Count down the number of bytes to read
.3957ec	a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.3957ee	e9 01 00	sbc #$0001	                SBC #1
.3957f1	85 2c		sta $034c	                STA DOS_FILE_SIZE
.3957f3	a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.3957f5	e9 00 00	sbc #$0000	                SBC #0
.3957f8	85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.3957fa	a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Are we at the end of the file?
.3957fc	d0 04		bne $395802	                BNE next_byte
.3957fe	a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.395800	f0 14		beq $395816	                BEQ done                            ; Yes: we're done
.395802	c8		iny		next_byte       INY                                 ; Otherwise, move to the next source location
.395803	cc 0e a0	cpy $38a00e	                CPY CLUSTER_SIZE                    ; Are we at the end of the cluster?
.395806	d0 d5		bne $3957dd	                BNE copy_loop                       ; No: keep copying
.395808	22 ea 4c 39	jsl $394cea	                JSL DOS_READNEXT                    ; Yes: Load the next cluster
.39580c	b0 03		bcs $395811	                BCS next_cluster
.39580e	82 59 01	brl $39596a	                BRL IF_PASSFAILURE                  ; If failed: pass that up the chain
.395811	a0 00 00	ldy #$0000	next_cluster    LDY #0
.395814	80 c7		bra $3957dd	                BRA copy_loop                       ; Go back to copying
.395816	82 58 01	brl $395971	done            BRL IF_SUCCESS
.395819					IF_LOADRAW
.395819	c2 30		rep #$30	                REP #$30        ; set A&X long
.39581b	a0 00 00	ldy #$0000	copy_cluster    LDY #0
.39581e					copy_loop
.39581e	e2 20		sep #$20	                SEP #$20        ; set A short
.395820	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y         ; Copy byte from cluster to destination
.395822	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395824	c2 20		rep #$20	                REP #$20        ; set A long
.395826	38		sec		                SEC                         ; Count down the number of bytes left
.395827	a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.395829	e9 01 00	sbc #$0001	                SBC #1
.39582c	85 2c		sta $034c	                STA DOS_FILE_SIZE
.39582e	a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.395830	e9 00 00	sbc #$0000	                SBC #0
.395833	85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.395835	d0 04		bne $39583b	                BNE continue
.395837	a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.395839	f0 1b		beq $395856	                BEQ close_file              ; If not: we're done
.39583b	c8		iny		continue        INY
.39583c	cc 0e a0	cpy $38a00e	                CPY CLUSTER_SIZE            ; Are we done with the cluster?
.39583f	d0 dd		bne $39581e	                BNE copy_loop               ; No: keep processing the bytes
.395841	18		clc		                CLC                         ; Advance the destination pointer to the next chunk of memory
.395842	a5 34		lda $0354	                LDA DOS_DST_PTR
.395844	6d 0e a0	adc $38a00e	                ADC CLUSTER_SIZE
.395847	85 34		sta $0354	                STA DOS_DST_PTR
.395849	a5 36		lda $0356	                LDA DOS_DST_PTR+2
.39584b	69 00 00	adc #$0000	                ADC #0
.39584e	85 36		sta $0356	                STA DOS_DST_PTR+2
.395850	22 20 55 39	jsl $395520	                JSL IF_READ                 ; Yes: load the next cluster
.395854	b0 c5		bcs $39581b	                BCS copy_cluster            ; And start copying it
.395856					close_file
.395856	82 18 01	brl $395971	ret_success     BRL IF_SUCCESS
.395859					IF_NULLBUFFER
.395859	5a		phy		                PHY
.39585a	8b		phb		                PHB
.39585b	0b		phd		                PHD
.39585c	08		php		                PHP
.39585d	48		pha		                PHA             ; begin setdbr macro
.39585e	08		php		                PHP
.39585f	e2 20		sep #$20	                SEP #$20        ; set A short
.395861	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395863	48		pha		                PHA
.395864	ab		plb		                PLB
.395865	28		plp		                PLP
.395866	68		pla		                PLA             ; end setdbr macro
.395867	48		pha		                PHA             ; begin setdp macro
.395868	08		php		                PHP
.395869	c2 20		rep #$20	                REP #$20        ; set A long
.39586b	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39586e	5b		tcd		                TCD
.39586f	28		plp		                PLP
.395870	68		pla		                PLA             ; end setdp macro
.395871	c2 30		rep #$30	                REP #$30        ; set A&X long
.395873	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.395876	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395878	85 28		sta $0348	                STA DOS_TEMP
.39587a	c8		iny		                INY
.39587b	c8		iny		                INY
.39587c	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39587e	85 2a		sta $034a	                STA DOS_TEMP+2
.395880	a0 00 00	ldy #$0000	                LDY #0
.395883	a9 00 00	lda #$0000	                LDA #0
.395886	97 28		sta [$0348],y	loop            STA [DOS_TEMP],Y
.395888	c8		iny		                INY
.395889	c8		iny		                INY
.39588a	c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE
.39588d	d0 f7		bne $395886	                BNE loop
.39588f	28		plp		                PLP
.395890	2b		pld		                PLD
.395891	ab		plb		                PLB
.395892	7a		ply		                PLY
.395893	6b		rtl		                RTL
.395894					IF_COPY2BUFF
.395894	5a		phy		                PHY
.395895	8b		phb		                PHB
.395896	0b		phd		                PHD
.395897	08		php		                PHP
.395898	48		pha		                PHA             ; begin setdbr macro
.395899	08		php		                PHP
.39589a	e2 20		sep #$20	                SEP #$20        ; set A short
.39589c	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39589e	48		pha		                PHA
.39589f	ab		plb		                PLB
.3958a0	28		plp		                PLP
.3958a1	68		pla		                PLA             ; end setdbr macro
.3958a2	48		pha		                PHA             ; begin setdp macro
.3958a3	08		php		                PHP
.3958a4	c2 20		rep #$20	                REP #$20        ; set A long
.3958a6	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3958a9	5b		tcd		                TCD
.3958aa	28		plp		                PLP
.3958ab	68		pla		                PLA             ; end setdp macro
.3958ac	c2 30		rep #$30	                REP #$30        ; set A&X long
.3958ae	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.3958b1	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3958b3	85 28		sta $0348	                STA DOS_TEMP
.3958b5	c8		iny		                INY
.3958b6	c8		iny		                INY
.3958b7	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3958b9	85 2a		sta $034a	                STA DOS_TEMP+2
.3958bb	a0 00 00	ldy #$0000	                LDY #0
.3958be					copy_loop
.3958be	e2 20		sep #$20	                SEP #$20        ; set A short
.3958c0	a7 30		lda [$0350]	                LDA [DOS_SRC_PTR]           ; Copy a byte
.3958c2	97 28		sta [$0348],y	                STA [DOS_TEMP],Y
.3958c4	c2 20		rep #$20	                REP #$20        ; set A long
.3958c6	c8		iny		                INY                         ; Count it
.3958c7	c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE        ; Have we reached the limit?
.3958ca	f0 14		beq $3958e0	                BEQ done                    ; Yes: we're done
.3958cc	a5 30		lda $0350	                LDA DOS_SRC_PTR             ; Check if we copied the last byte
.3958ce	c5 38		cmp $0358	                CMP DOS_END_PTR
.3958d0	d0 06		bne $3958d8	                BNE next_byte
.3958d2	a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.3958d4	c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.3958d6	f0 08		beq $3958e0	                BEQ done                    ; Yes: we're done
.3958d8	e6 30		inc $0350	next_byte       INC DOS_SRC_PTR             ; No: advance the source pointer
.3958da	d0 e2		bne $3958be	                BNE copy_loop
.3958dc	e6 32		inc $0352	                INC DOS_SRC_PTR+2
.3958de	80 de		bra $3958be	                BRA copy_loop               ; And try this next byte
.3958e0	28		plp		done            PLP
.3958e1	2b		pld		                PLD
.3958e2	ab		plb		                PLB
.3958e3	7a		ply		                PLY
.3958e4	6b		rtl		                RTL
.3958e5					IF_SAVE
.3958e5	da		phx		                PHX
.3958e6	5a		phy		                PHY
.3958e7	0b		phd		                PHD
.3958e8	8b		phb		                PHB
.3958e9	08		php		                PHP
.3958ea	48		pha		                PHA             ; begin setdbr macro
.3958eb	08		php		                PHP
.3958ec	e2 20		sep #$20	                SEP #$20        ; set A short
.3958ee	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3958f0	48		pha		                PHA
.3958f1	ab		plb		                PLB
.3958f2	28		plp		                PLP
.3958f3	68		pla		                PLA             ; end setdbr macro
.3958f4	48		pha		                PHA             ; begin setdp macro
.3958f5	08		php		                PHP
.3958f6	c2 20		rep #$20	                REP #$20        ; set A long
.3958f8	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3958fb	5b		tcd		                TCD
.3958fc	28		plp		                PLP
.3958fd	68		pla		                PLA             ; end setdp macro
.3958fe	c2 30		rep #$30	                REP #$30        ; set A&X long
.395900	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE := DOS_END_PTR - DOS_SRC_PTR
.395903	38		sec		                SEC
.395904	a5 38		lda $0358	                LDA DOS_END_PTR
.395906	e5 30		sbc $0350	                SBC DOS_SRC_PTR
.395908	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39590a	c8		iny		                INY
.39590b	c8		iny		                INY
.39590c	a5 3a		lda $035a	                LDA DOS_END_PTR+2
.39590e	e5 32		sbc $0352	                SBC DOS_SRC_PTR+2
.395910	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395912	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE++
.395915	18		clc		                CLC
.395916	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395918	69 01 00	adc #$0001	                ADC #1
.39591b	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39591d	90 09		bcc $395928	                BCC first_block
.39591f	c8		iny		                INY
.395920	c8		iny		                INY
.395921	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395923	69 00 00	adc #$0000	                ADC #0
.395926	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395928	22 59 58 39	jsl $395859	first_block     JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.39592c	22 94 58 39	jsl $395894	                JSL IF_COPY2BUFF        ; Copy first (at most) 512 bytes of data to FD buffer
.395930	22 b2 54 39	jsl $3954b2	                JSL IF_CREATE           ; Create file.
.395934	b0 03		bcs $395939	                BCS check_for_end
.395936	82 31 00	brl $39596a	                BRL IF_PASSFAILURE      ; If we couldn't create the file, pass the failure up
.395939	a5 30		lda $0350	check_for_end   LDA DOS_SRC_PTR         ; Check if we copied the last byte
.39593b	c5 38		cmp $0358	                CMP DOS_END_PTR
.39593d	d0 06		bne $395945	                BNE next_block
.39593f	a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.395941	c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.395943	f0 1d		beq $395962	                BEQ done                ; Yes: we're done
.395945	22 59 58 39	jsl $395859	next_block      JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.395949	22 94 58 39	jsl $395894	                JSL IF_COPY2BUFF        ; Copy next (at most) 512 bytes of data to FD buffer
.39594d	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER   ; Make sure the CLUSTER is 0 to force an append
.395950	a9 00 00	lda #$0000	                LDA #0
.395953	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395955	c8		iny		                INY
.395956	c8		iny		                INY
.395957	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395959	22 85 55 39	jsl $395585	                JSL IF_WRITE            ; Append to the file
.39595d	b0 da		bcs $395939	                BCS check_for_end       ; And try again
.39595f	82 08 00	brl $39596a	                BRL IF_PASSFAILURE      ; If we couldn't update the file, pass the failure up
.395962	5c 71 59 39	jmp $395971	done            JML IF_SUCCESS
.395966					IF_FAILURE
.395966	e2 20		sep #$20	                SEP #$20        ; set A short
.395968	85 0e		sta $032e	                STA DOS_STATUS
.39596a	28		plp		IF_PASSFAILURE  PLP
.39596b	18		clc		                CLC
.39596c	ab		plb		                PLB
.39596d	2b		pld		                PLD
.39596e	7a		ply		                PLY
.39596f	fa		plx		                PLX
.395970	6b		rtl		                RTL
.395971					IF_SUCCESS
.395971	e2 20		sep #$20	                SEP #$20        ; set A short
.395973	64 00		stz $0320	                STZ BIOS_STATUS
.395975	64 0e		stz $032e	                STZ DOS_STATUS
.395977	28		plp		                PLP
.395978	38		sec		                SEC
.395979	ab		plb		                PLB
.39597a	2b		pld		                PLD
.39597b	7a		ply		                PLY
.39597c	fa		plx		                PLX
.39597d	6b		rtl		                RTL
.39597e					IF_RUN
.39597e	da		phx		                PHX
.39597f	5a		phy		                PHY
.395980	0b		phd		                PHD
.395981	8b		phb		                PHB
.395982	08		php		                PHP
.395983	48		pha		                PHA             ; begin setdbr macro
.395984	08		php		                PHP
.395985	e2 20		sep #$20	                SEP #$20        ; set A short
.395987	a9 00		lda #$00	                LDA #0
.395989	48		pha		                PHA
.39598a	ab		plb		                PLB
.39598b	28		plp		                PLP
.39598c	68		pla		                PLA             ; end setdbr macro
.39598d	48		pha		                PHA             ; begin setdp macro
.39598e	08		php		                PHP
.39598f	c2 20		rep #$20	                REP #$20        ; set A long
.395991	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395994	5b		tcd		                TCD
.395995	28		plp		                PLP
.395996	68		pla		                PLA             ; end setdp macro
.395997	e2 20		sep #$20	                SEP #$20        ; set A short
.395999	c2 10		rep #$10	                REP #$10        ; set X long
.39599b	a9 00		lda #$00	                LDA #0                                  ; Zero out the file descriptor
.39599d	a2 00 00	ldx #$0000	                LDX #0
.3959a0	9f 00 ad 38	sta $38ad00,x	clr_fd_loop     STA @l DOS_SPARE_FD,X
.3959a4	e8		inx		                INX
.3959a5	e0 20 00	cpx #$0020	                CPX #SIZE(FILEDESC)
.3959a8	d0 f6		bne $3959a0	                BNE clr_fd_loop
.3959aa	c2 20		rep #$20	                REP #$20        ; set A long
.3959ac	a9 00 ab	lda #$ab00	                LDA #<>DOS_SPARE_SECTOR                 ; Set the buffer for the file descriptor
.3959af	8f 0e ad 38	sta $38ad0e	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER
.3959b3	a9 38 00	lda #$0038	                LDA #`DOS_SPARE_SECTOR
.3959b6	8f 10 ad 38	sta $38ad10	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER+2
.3959ba	a5 40		lda $0360	                LDA DOS_RUN_PARAM                        ; Set the path for the file descriptor
.3959bc	8f 02 ad 38	sta $38ad02	                STA @l DOS_SPARE_FD+FILEDESC.PATH
.3959c0	a5 42		lda $0362	                LDA DOS_RUN_PARAM+2
.3959c2	8f 04 ad 38	sta $38ad04	                STA @l DOS_SPARE_FD+FILEDESC.PATH+2
.3959c6	a9 00 00	lda #$0000	                LDA #0                                  ; Clear the run pointer
.3959c9	85 3c		sta $035c	                STA DOS_RUN_PTR                         ; This is used to check that we loaded an executable binary
.3959cb	85 3e		sta $035e	                STA DOS_RUN_PTR+2
.3959cd	a9 00 ad	lda #$ad00	                LDA #<>DOS_SPARE_FD
.3959d0	85 20		sta $0340	                STA DOS_FD_PTR
.3959d2	a9 38 00	lda #$0038	                LDA #`DOS_SPARE_FD
.3959d5	85 22		sta $0342	                STA DOS_FD_PTR+2
.3959d7	a9 ff ff	lda #$ffff	                LDA #$FFFF                              ; We want to load to the address provided by the file
.3959da	8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.3959de	8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.3959e2	22 18 11 38	jsl $381118	                JSL F_LOAD                              ; Try to load the file
.3959e6	b0 14		bcs $3959fc	                BCS try_execute
.3959e8	82 7f ff	brl $39596a	                BRL IF_PASSFAILURE                      ; On error: pass failure up the chain
.3959eb					chk_execute
.3959eb	c2 20		rep #$20	                REP #$20        ; set A long
.3959ed	a5 3c		lda $035c	                LDA DOS_RUN_PTR                         ; Check to see if we got a startup address back
.3959ef	d0 0b		bne $3959fc	                BNE try_execute                         ; If so: call it
.3959f1	a5 3e		lda $035e	                LDA DOS_RUN_PTR+2
.3959f3	d0 07		bne $3959fc	                BNE try_execute
.3959f5	e2 20		sep #$20	                SEP #$20        ; set A short
.3959f7	a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC                     ; If not: return an error that it's not executable
.3959f9	82 6a ff	brl $395966	                BRL IF_FAILURE
.3959fc					try_execute
.3959fc	e2 20		sep #$20	                SEP #$20        ; set A short
.3959fe	a9 5c		lda #$5c	                LDA #$5C                                ; Write a JML opcode
.395a00	85 3b		sta $035b	                STA DOS_RUN_PTR-1
.395a02	22 5b 03 00	jsl $00035b	                JSL DOS_RUN_PTR-1                       ; And call to it
.395a06	82 68 ff	brl $395971	                BRL IF_SUCCESS                          ; Return success
.395a09					IF_ALLOCFD
.395a09	da		phx		                PHX
.395a0a	5a		phy		                PHY
.395a0b	0b		phd		                PHD
.395a0c	8b		phb		                PHB
.395a0d	08		php		                PHP
.395a0e	48		pha		                PHA             ; begin setdbr macro
.395a0f	08		php		                PHP
.395a10	e2 20		sep #$20	                SEP #$20        ; set A short
.395a12	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395a14	48		pha		                PHA
.395a15	ab		plb		                PLB
.395a16	28		plp		                PLP
.395a17	68		pla		                PLA             ; end setdbr macro
.395a18	48		pha		                PHA             ; begin setdp macro
.395a19	08		php		                PHP
.395a1a	c2 20		rep #$20	                REP #$20        ; set A long
.395a1c	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395a1f	5b		tcd		                TCD
.395a20	28		plp		                PLP
.395a21	68		pla		                PLA             ; end setdp macro
.395a22	c2 10		rep #$10	                REP #$10        ; set X long
.395a24	a2 00 00	ldx #$0000	                LDX #0                              ; Point to the first file descriptor
.395a27					chk_fd
.395a27	e2 20		sep #$20	                SEP #$20        ; set A short
.395a29	bd 20 ad	lda $38ad20,x	                LDA @w DOS_FILE_DESCS,X             ; Check the file descriptor's status
.395a2c	89 10		bit #$10	                BIT #FD_STAT_ALLOC                  ; Is the file descriptor allocated?
.395a2e	f0 14		beq $395a44	                BEQ found                           ; No: flag and return the found descriptor
.395a30					next_fd
.395a30	c2 20		rep #$20	                REP #$20        ; set A long
.395a32	8a		txa		                TXA                                 ; Yes: Move to the next file descriptor
.395a33	18		clc		                CLC
.395a34	69 20 00	adc #$0020	                ADC #SIZE(FILEDESC)
.395a37	aa		tax		                TAX
.395a38	e0 00 01	cpx #$0100	                CPX #SIZE(FILEDESC) * DOS_FD_MAX    ; Are we out of file descriptors?
.395a3b	90 ea		bcc $395a27	                BLT chk_fd                          ; No: check this new file descriptor
.395a3d	e2 20		sep #$20	                SEP #$20        ; set A short
.395a3f	a9 16		lda #$16	                LDA #DOS_ERR_NOFD                   ; Yes: Return failure (no file descriptors available)
.395a41	82 22 ff	brl $395966	                BRL IF_FAILURE
.395a44	09 10		ora #$10	found           ORA #FD_STAT_ALLOC                  ; No: Set the ALLOC bit
.395a46	9d 20 ad	sta $38ad20,x	                STA @w DOS_FILE_DESCS,X             ; And store it in the file descriptor's status
.395a49	c2 20		rep #$20	                REP #$20        ; set A long
.395a4b	8a		txa		                TXA
.395a4c	18		clc		                CLC
.395a4d	69 20 ad	adc #$ad20	                ADC #<>DOS_FILE_DESCS
.395a50	85 20		sta $0340	                STA @b DOS_FD_PTR
.395a52	a9 38 00	lda #$0038	                LDA #`DOS_FILE_DESCS
.395a55	69 00 00	adc #$0000	                ADC #0
.395a58	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395a5a	82 14 ff	brl $395971	                BRL IF_SUCCESS                      ; Return this file descriptor
.395a5d					IF_FREEFD
.395a5d	da		phx		                PHX
.395a5e	5a		phy		                PHY
.395a5f	0b		phd		                PHD
.395a60	8b		phb		                PHB
.395a61	08		php		                PHP
.395a62	48		pha		                PHA             ; begin setdbr macro
.395a63	08		php		                PHP
.395a64	e2 20		sep #$20	                SEP #$20        ; set A short
.395a66	a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395a68	48		pha		                PHA
.395a69	ab		plb		                PLB
.395a6a	28		plp		                PLP
.395a6b	68		pla		                PLA             ; end setdbr macro
.395a6c	48		pha		                PHA             ; begin setdp macro
.395a6d	08		php		                PHP
.395a6e	c2 20		rep #$20	                REP #$20        ; set A long
.395a70	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395a73	5b		tcd		                TCD
.395a74	28		plp		                PLP
.395a75	68		pla		                PLA             ; end setdp macro
.395a76	e2 20		sep #$20	                SEP #$20        ; set A short
.395a78	c2 10		rep #$10	                REP #$10        ; set X long
.395a7a	a9 00		lda #$00	                LDA #0
.395a7c	87 20		sta [$0340]	                STA [DOS_FD_PTR]
.395a7e	82 f0 fe	brl $395971	                BRL IF_SUCCESS
.395a81					DOS_SRC2DST
.395a81	da		phx		                PHX
.395a82	5a		phy		                PHY
.395a83	0b		phd		                PHD
.395a84	8b		phb		                PHB
.395a85	08		php		                PHP
.395a86	48		pha		                PHA             ; begin setdp macro
.395a87	08		php		                PHP
.395a88	c2 20		rep #$20	                REP #$20        ; set A long
.395a8a	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395a8d	5b		tcd		                TCD
.395a8e	28		plp		                PLP
.395a8f	68		pla		                PLA             ; end setdp macro
.395a90	c2 30		rep #$30	                REP #$30        ; set A&X long
.395a92	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.395a95	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.395a97	aa		tax		                TAX                                     ; X := source buffer address
.395a98	b7 34		lda [$0354],y	                LDA [DOS_DST_PTR],Y
.395a9a	a8		tay		                TAY                                     ; Y := destination buffer address
.395a9b	a9 00 02	lda #$0200	                LDA #DOS_SECTOR_SIZE                    ; A := the size of the buffers
.395a9e	54 38 38	mvn $38,$38	                MVN #`DOS_FILE_BUFFS,#`DOS_FILE_BUFFS   ; Copy the sector data
.395aa1	28		plp		                PLP
.395aa2	ab		plb		                PLB
.395aa3	2b		pld		                PLD
.395aa4	7a		ply		                PLY
.395aa5	fa		plx		                PLX
.395aa6	6b		rtl		                RTL
.395aa7					IF_COPY
.395aa7	da		phx		                PHX
.395aa8	5a		phy		                PHY
.395aa9	0b		phd		                PHD
.395aaa	8b		phb		                PHB
.395aab	08		php		                PHP
.395aac	48		pha		                PHA             ; begin setdbr macro
.395aad	08		php		                PHP
.395aae	e2 20		sep #$20	                SEP #$20        ; set A short
.395ab0	a9 00		lda #$00	                LDA #0
.395ab2	48		pha		                PHA
.395ab3	ab		plb		                PLB
.395ab4	28		plp		                PLP
.395ab5	68		pla		                PLA             ; end setdbr macro
.395ab6	48		pha		                PHA             ; begin setdp macro
.395ab7	08		php		                PHP
.395ab8	c2 20		rep #$20	                REP #$20        ; set A long
.395aba	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395abd	5b		tcd		                TCD
.395abe	28		plp		                PLP
.395abf	68		pla		                PLA             ; end setdp macro
.395ac0	22 09 5a 39	jsl $395a09	                JSL IF_ALLOCFD                  ; Allocate an FD for the source
.395ac4	b0 03		bcs $395ac9	                BCS set_src_path
.395ac6	82 a1 fe	brl $39596a	                BRL IF_PASSFAILURE              ; If failed: pass the failure up the chain
.395ac9					set_src_path
.395ac9	c2 30		rep #$30	                REP #$30        ; set A&X long
.395acb	a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; Set the source path
.395ace	a5 44		lda $0364	                LDA @b DOS_STR1_PTR
.395ad0	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395ad2	c8		iny		                INY
.395ad3	c8		iny		                INY
.395ad4	a5 46		lda $0366	                LDA @b DOS_STR1_PTR+2
.395ad6	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395ad8					alloc_dest
.395ad8	c2 30		rep #$30	                REP #$30        ; set A&X long
.395ada	a5 20		lda $0340	                LDA @b DOS_FD_PTR               ; set DOS_SRC_PTR to the file descriptor pointer
.395adc	85 30		sta $0350	                STA @b DOS_SRC_PTR
.395ade	a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.395ae0	85 32		sta $0352	                STA @b DOS_SRC_PTR+2
.395ae2	22 09 5a 39	jsl $395a09	                JSL IF_ALLOCFD                  ; Allocate an FD for the destination
.395ae6	b0 0f		bcs $395af7	                BCS set_paths                   ; If everything is ok... start setting the paths
.395ae8	a5 30		lda $0350	err_free_src_fd LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395aea	85 20		sta $0340	                STA @b DOS_FD_PTR
.395aec	a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395aee	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395af0	22 5d 5a 39	jsl $395a5d	                JSL IF_FREEFD                   ; And free it
.395af4	82 73 fe	brl $39596a	                BRL IF_PASSFAILURE              ; Pass the failure up the chain
.395af7					set_paths
.395af7	c2 30		rep #$30	                REP #$30        ; set A&X long
.395af9	a5 20		lda $0340	                LDA @b DOS_FD_PTR               ; Set DOS_DST_PTR to the file descriptor pointer for the destination
.395afb	85 34		sta $0354	                STA @b DOS_DST_PTR
.395afd	a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.395aff	85 36		sta $0356	                STA @b DOS_DST_PTR+2
.395b01	a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; Set the destination path
.395b04	a5 48		lda $0368	                LDA @b DOS_STR2_PTR
.395b06	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395b08	c8		iny		                INY
.395b09	c8		iny		                INY
.395b0a	a5 4a		lda $036a	                LDA @b DOS_STR2_PTR+2
.395b0c	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395b0e	a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395b10	85 20		sta $0340	                STA @b DOS_FD_PTR
.395b12	a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395b14	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395b16	22 f0 10 38	jsl $3810f0	                JSL F_OPEN                      ; Try to open the file
.395b1a	b0 0f		bcs $395b2b	                BCS src_open                    ; If success, work with the openned file
.395b1c	a5 34		lda $0354	err_free_dst_fd LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395b1e	85 20		sta $0340	                STA @b DOS_FD_PTR
.395b20	a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395b22	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395b24	22 5d 5a 39	jsl $395a5d	                JSL IF_FREEFD                   ; And free it
.395b28	82 bd ff	brl $395ae8	                BRL err_free_src_fd             ; Free the source file descriptor
.395b2b	a0 12 00	ldy #$0012	src_open        LDY #FILEDESC.SIZE              ; destination file size := source file size
.395b2e	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.395b30	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395b32	c8		iny		                INY
.395b33	c8		iny		                INY
.395b34	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.395b36	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395b38	22 81 5a 39	jsl $395a81	                JSL DOS_SRC2DST                 ; Copy the first sector's worth of data
.395b3c	a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395b3e	85 20		sta $0340	                STA @b DOS_FD_PTR
.395b40	a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395b42	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395b44	22 f4 10 38	jsl $3810f4	                JSL F_CREATE                    ; Attempt to create the file
.395b48	b0 0f		bcs $395b59	                BCS read_next                   ; If sucessful, try to get the next cluster
.395b4a	a5 30		lda $0350	err_src_close   LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395b4c	85 20		sta $0340	                STA @b DOS_FD_PTR
.395b4e	a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395b50	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395b52	22 f8 10 38	jsl $3810f8	                JSL F_CLOSE                     ; Close the source file (maybe not really necessary)
.395b56	82 c3 ff	brl $395b1c	                BRL err_free_dst_fd             ; Free the file descriptors and return an error
.395b59					read_next
.395b59	a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395b5b	85 20		sta $0340	                STA @b DOS_FD_PTR
.395b5d	a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395b5f	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395b61	22 00 11 38	jsl $381100	                JSL F_READ                      ; Attempt to read the next sector of the source
.395b65	b0 19		bcs $395b80	                BCS copy2dest                   ; If successful, copy the sector
.395b67	e2 20		sep #$20	                SEP #$20        ; set A short
.395b69	a5 0e		lda $032e	                LDA @b DOS_STATUS
.395b6b	c9 0a		cmp #$0a	                CMP #DOS_ERR_NOCLUSTER          ; Are there no more clusters in the source file?
.395b6d	f0 32		beq $395ba1	                BEQ file_copied                 ; Yes: we're done copying
.395b6f					err_dest_close
.395b6f	c2 20		rep #$20	                REP #$20        ; set A long
.395b71	a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395b73	85 20		sta $0340	                STA @b DOS_FD_PTR
.395b75	a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395b77	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395b79	22 f8 10 38	jsl $3810f8	                JSL F_CLOSE                     ; Attempt to close the destination
.395b7d	82 ca ff	brl $395b4a	                BRL err_src_close               ; Close the source and throw an error
.395b80					copy2dest
.395b80	22 81 5a 39	jsl $395a81	                JSL DOS_SRC2DST                 ; Copy the source sector to the destination sector
.395b84	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; destination sector cluster ID := 0 to append
.395b87	a9 00 00	lda #$0000	                LDA #0
.395b8a	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395b8c	c8		iny		                INY
.395b8d	c8		iny		                INY
.395b8e	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395b90	a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395b92	85 20		sta $0340	                STA @b DOS_FD_PTR
.395b94	a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395b96	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395b98	22 fc 10 38	jsl $3810fc	                JSL F_WRITE                     ; Attempt to write the destionation sector to the disk
.395b9c	90 d1		bcc $395b6f	                BCC err_dest_close              ; If error: close all files and throw the error
.395b9e	82 b8 ff	brl $395b59	                BRL read_next                   ; Otherwise: repeat the loop
.395ba1					file_copied
.395ba1	c2 20		rep #$20	                REP #$20        ; set A long
.395ba3	a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395ba5	85 20		sta $0340	                STA @b DOS_FD_PTR
.395ba7	a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395ba9	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395bab	22 f8 10 38	jsl $3810f8	                JSL F_CLOSE                     ; Close the destination
.395baf	a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395bb1	85 20		sta $0340	                STA @b DOS_FD_PTR
.395bb3	a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395bb5	85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395bb7	22 f8 10 38	jsl $3810f8	                JSL F_CLOSE                     ; Close the source
.395bbb	82 b3 fd	brl $395971	                BRL IF_SUCCESS

;******  Return to file: src\kernel.asm


;******  Processing file: src\uart.asm

=$af13f8				UART1_BASE = $AF13F8        ; Base address for UART 1 (COM1)
=$af12f8				UART2_BASE = $AF12F8        ; Base address for UART 2 (COM2)
=$00					UART_TRHB = $00             ; Transmit/Receive Hold Buffer
=$00					UART_DLL = UART_TRHB        ; Divisor Latch Low Byte
=$01					UART_DLH = $01              ; Divisor Latch High Byte
=$01					UART_IER = UART_DLH         ; Interupt Enable Register
=$02					UART_FCR = $02              ; FIFO Control Register
=$02					UART_IIR = UART_FCR         ; Interupt Indentification Register
=$03					UART_LCR = $03              ; Line Control Register
=$04					UART_MCR = $04              ; Modem Control REgister
=$05					UART_LSR = $05              ; Line Status Register
=$06					UART_MSR = $06              ; Modem Status Register
=$07					UART_SR = $07               ; Scratch Register
=$20					UINT_LOW_POWER = $20        ; Enable Low Power Mode (16750)
=$10					UINT_SLEEP_MODE = $10       ; Enable Sleep Mode (16750)
=$08					UINT_MODEM_STATUS = $08     ; Enable Modem Status Interrupt
=$04					UINT_LINE_STATUS = $04      ; Enable Receiver Line Status Interupt
=$02					UINT_THR_EMPTY = $02        ; Enable Transmit Holding Register Empty interrupt
=$01					UINT_DATA_AVAIL = $01       ; Enable Recieve Data Available interupt
=$80					IIR_FIFO_ENABLED = $80      ; FIFO is enabled
=$40					IIR_FIFO_NONFUNC = $40      ; FIFO is not functioning
=$20					IIR_FIFO_64BYTE = $20       ; 64 byte FIFO enabled (16750)
=$00					IIR_MODEM_STATUS = $00      ; Modem Status Interrupt
=$02					IIR_THR_EMPTY = $02         ; Transmit Holding Register Empty Interrupt
=$04					IIR_DATA_AVAIL = $04        ; Data Available Interrupt
=$06					IIR_LINE_STATUS = $06       ; Line Status Interrupt
=$0c					IIR_TIMEOUT = $0C           ; Time-out Interrupt (16550 and later)
=$01					IIR_INTERRUPT_PENDING = $01 ; Interrupt Pending Flag
=$80					LCR_DLB = $80               ; Divisor Latch Access Bit
=$60					LCR_SBE = $60               ; Set Break Enable
=$00					LCR_PARITY_NONE = $00       ; Parity: None
=$08					LCR_PARITY_ODD = $08        ; Parity: Odd
=$18					LCR_PARITY_EVEN = $18       ; Parity: Even
=$28					LCR_PARITY_MARK = $28       ; Parity: Mark
=$38					LCR_PARITY_SPACE = $38      ; Parity: Space
=$00					LCR_STOPBIT_1 = $00         ; One Stop Bit
=$04					LCR_STOPBIT_2 = $04         ; 1.5 or 2 Stop Bits
=$00					LCR_DATABITS_5 = $00        ; Data Bits: 5
=$01					LCR_DATABITS_6 = $01        ; Data Bits: 6
=$02					LCR_DATABITS_7 = $02        ; Data Bits: 7
=$03					LCR_DATABITS_8 = $03        ; Data Bits: 8
=$80					LSR_ERR_RECIEVE = $80       ; Error in Received FIFO
=$40					LSR_XMIT_DONE = $40         ; All data has been transmitted
=$20					LSR_XMIT_EMPTY = $20        ; Empty transmit holding register
=$10					LSR_BREAK_INT = $10         ; Break interrupt
=$08					LSR_ERR_FRAME = $08         ; Framing error
=$04					LSR_ERR_PARITY = $04        ; Parity error
=$02					LSR_ERR_OVERRUN = $02       ; Overrun error
=$01					LSR_DATA_AVAIL = $01        ; Data is ready in the receive buffer
=384					UART_300 = 384              ; Code for 300 bps
=96					UART_1200 = 96              ; Code for 1200 bps
=48					UART_2400 = 48              ; Code for 2400 bps
=24					UART_4800 = 24              ; Code for 4800 bps
=12					UART_9600 = 12              ; Code for 9600 bps
=6					UART_19200 = 6              ; Code for 19200 bps
=3					UART_38400 = 3              ; Code for 28400 bps
=2					UART_57600 = 2              ; Code for 57600 bps
=1					UART_115200 = 1             ; Code for 115200 bps
.395bbe					UART_SELECT
.395bbe	08		php		            PHP
.395bbf	c2 20		rep #$20	                REP #$20        ; set A long
.395bc1	c9 02 00	cmp #$0002	            CMP #2
.395bc4	f0 07		beq $395bcd	            BEQ is_COM2
.395bc6	c2 20		rep #$20	                REP #$20        ; set A long
.395bc8	a9 f8 13	lda #$13f8	            LDA #<>UART1_BASE
.395bcb	80 05		bra $395bd2	            BRA setaddr
.395bcd					is_COM2
.395bcd	c2 20		rep #$20	                REP #$20        ; set A long
.395bcf	a9 f8 12	lda #$12f8	            LDA #<>UART2_BASE
.395bd2	8f 00 07 00	sta $000700	setaddr     STA @lCURRUART
.395bd6	e2 20		sep #$20	                SEP #$20        ; set A short
.395bd8	a9 af		lda #$af	            LDA #`UART1_BASE
.395bda	8f 02 07 00	sta $000702	            STA @lCURRUART+2
.395bde	28		plp		            PLP
.395bdf	6b		rtl		            RTL
.395be0					UART_SETBPS
.395be0	08		php		            PHP
.395be1	0b		phd		            PHD
.395be2	48		pha		                PHA             ; begin setdp macro
.395be3	08		php		                PHP
.395be4	c2 20		rep #$20	                REP #$20        ; set A long
.395be6	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395be9	5b		tcd		                TCD
.395bea	28		plp		                PLP
.395beb	68		pla		                PLA             ; end setdp macro
.395bec	c2 30		rep #$30	                REP #$30        ; set A&X long
.395bee	48		pha		            PHA
.395bef	e2 20		sep #$20	                SEP #$20        ; set A short
.395bf1	a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Enable divisor latch
.395bf4	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.395bf6	09 80		ora #$80	            ORA #LCR_DLB
.395bf8	97 00		sta [$0700],y	            STA [CURRUART],Y
.395bfa	c2 20		rep #$20	                REP #$20        ; set A long
.395bfc	68		pla		            PLA
.395bfd	a0 00 00	ldy #$0000	            LDY #UART_DLL
.395c00	97 00		sta [$0700],y	            STA [CURRUART],Y    ; Save the divisor to the UART
.395c02	e2 20		sep #$20	                SEP #$20        ; set A short
.395c04	a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Disable divisor latch
.395c07	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.395c09	49 80		eor #$80	            EOR #LCR_DLB
.395c0b	97 00		sta [$0700],y	            STA [CURRUART],Y
.395c0d	2b		pld		            PLD
.395c0e	28		plp		            PLP
.395c0f	6b		rtl		            RTL
.395c10					UART_SETLCR
.395c10	08		php		            PHP
.395c11	0b		phd		            PHD
.395c12	48		pha		                PHA             ; begin setdp macro
.395c13	08		php		                PHP
.395c14	c2 20		rep #$20	                REP #$20        ; set A long
.395c16	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395c19	5b		tcd		                TCD
.395c1a	28		plp		                PLP
.395c1b	68		pla		                PLA             ; end setdp macro
.395c1c	e2 20		sep #$20	                SEP #$20        ; set A short
.395c1e	c2 10		rep #$10	                REP #$10        ; set X long
.395c20	29 7f		and #$7f	            AND #$7F            ; We don't want to alter divisor latch
.395c22	a0 03 00	ldy #$0003	            LDY #UART_LCR
.395c25	97 00		sta [$0700],y	            STA [CURRUART],Y
.395c27	2b		pld		            PLD
.395c28	28		plp		            PLP
.395c29	6b		rtl		            RTL
.395c2a					UART_INIT
.395c2a	08		php		            PHP
.395c2b	0b		phd		            PHD
.395c2c	c2 30		rep #$30	                REP #$30        ; set A&X long
.395c2e	48		pha		                PHA             ; begin setdp macro
.395c2f	08		php		                PHP
.395c30	c2 20		rep #$20	                REP #$20        ; set A long
.395c32	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395c35	5b		tcd		                TCD
.395c36	28		plp		                PLP
.395c37	68		pla		                PLA             ; end setdp macro
.395c38	a9 01 00	lda #$0001	            LDA #UART_115200
.395c3b	22 e0 5b 39	jsl $395be0	            JSL UART_SETBPS
.395c3f	e2 20		sep #$20	                SEP #$20        ; set A short
.395c41	a9 03		lda #$03	            LDA #LCR_PARITY_NONE | LCR_STOPBIT_1 | LCR_DATABITS_8
.395c43	22 10 5c 39	jsl $395c10	            JSL UART_SETLCR
.395c47	a9 e1		lda #$e1	            LDA #%11100001
.395c49	a0 02 00	ldy #$0002	            LDY #UART_FCR
.395c4c	97 00		sta [$0700],y	            STA [CURRUART],Y
.395c4e	2b		pld		            PLD
.395c4f	28		plp		            PLP
.395c50	6b		rtl		            RTL
.395c51					UART_HASBYT
.395c51	08		php		            PHP
.395c52	0b		phd		            PHD
.395c53	c2 30		rep #$30	                REP #$30        ; set A&X long
.395c55	48		pha		                PHA             ; begin setdp macro
.395c56	08		php		                PHP
.395c57	c2 20		rep #$20	                REP #$20        ; set A long
.395c59	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395c5c	5b		tcd		                TCD
.395c5d	28		plp		                PLP
.395c5e	68		pla		                PLA             ; end setdp macro
.395c5f	e2 20		sep #$20	                SEP #$20        ; set A short
.395c61	a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.395c64	b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.395c66	29 01		and #$01	            AND #LSR_DATA_AVAIL
.395c68	d0 04		bne $395c6e	            BNE ret_true            ; If flag is set, return true
.395c6a	2b		pld		ret_false   PLD                     ; Return false
.395c6b	28		plp		            PLP
.395c6c	18		clc		            CLC
.395c6d	6b		rtl		            RTL
.395c6e	2b		pld		ret_true    PLD                     ; Return true
.395c6f	28		plp		            PLP
.395c70	38		sec		            SEC
.395c71	6b		rtl		            RTL
.395c72					UART_GETC
.395c72	08		php		            PHP
.395c73	0b		phd		            PHD
.395c74	c2 30		rep #$30	                REP #$30        ; set A&X long
.395c76	48		pha		                PHA             ; begin setdp macro
.395c77	08		php		                PHP
.395c78	c2 20		rep #$20	                REP #$20        ; set A long
.395c7a	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395c7d	5b		tcd		                TCD
.395c7e	28		plp		                PLP
.395c7f	68		pla		                PLA             ; end setdp macro
.395c80	e2 20		sep #$20	                SEP #$20        ; set A short
.395c82	a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.395c85	b7 00		lda [$0700],y	wait_getc   LDA [CURRUART],Y
.395c87	29 01		and #$01	            AND #LSR_DATA_AVAIL
.395c89	f0 fa		beq $395c85	            BEQ wait_getc           ; If the flag is clear, wait
.395c8b	a0 00 00	ldy #$0000	            LDY #UART_TRHB          ; Get the byte from the receive FIFO
.395c8e	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.395c90	2b		pld		            PLD
.395c91	28		plp		            PLP
.395c92	6b		rtl		            RTL
.395c93					UART_PUTC
.395c93	08		php		            PHP
.395c94	0b		phd		            PHD
.395c95	c2 30		rep #$30	                REP #$30        ; set A&X long
.395c97	48		pha		                PHA             ; begin setdp macro
.395c98	08		php		                PHP
.395c99	c2 20		rep #$20	                REP #$20        ; set A long
.395c9b	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395c9e	5b		tcd		                TCD
.395c9f	28		plp		                PLP
.395ca0	68		pla		                PLA             ; end setdp macro
.395ca1	e2 20		sep #$20	                SEP #$20        ; set A short
.395ca3	48		pha		            PHA                     ; Wait for the transmit FIFO to free up
.395ca4	a0 05 00	ldy #$0005	            LDY #UART_LSR
.395ca7	b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.395ca9	29 20		and #$20	            AND #LSR_XMIT_EMPTY
.395cab	f0 fa		beq $395ca7	            BEQ wait_putc
.395cad	68		pla		            PLA
.395cae	a0 00 00	ldy #$0000	            LDY #UART_TRHB
.395cb1	97 00		sta [$0700],y	            STA [CURRUART],Y
.395cb3	2b		pld		            PLD
.395cb4	28		plp		            PLP
.395cb5	6b		rtl		            RTL
.395cb6					UART_PUTS
.395cb6	08		php		            PHP
.395cb7	e2 20		sep #$20	                SEP #$20        ; set A short
.395cb9	bd 00 00	lda $0000,x	put_loop    LDA #0,B,X
.395cbc	f0 07		beq $395cc5	            BEQ done
.395cbe	22 93 5c 39	jsl $395c93	            JSL UART_PUTC
.395cc2	e8		inx		            INX
.395cc3	80 f4		bra $395cb9	            BRA put_loop
.395cc5	28		plp		done        PLP
.395cc6	6b		rtl		            RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\joystick.asm

.395cc7					JOYSTICK_SET_NES_MODE
.395cc7	e2 20		sep #$20	                SEP #$20        ; set A short
.395cc9	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395ccd	29 fb		and #$fb	          AND #~NES_SNES_JOY  ; 0 = NES (8 bit shift)
.395ccf	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395cd3	6b		rtl		          RTL
.395cd4					JOYSTICK_SET_SNES_MODE
.395cd4	e2 20		sep #$20	                SEP #$20        ; set A short
.395cd6	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395cda	29 fb		and #$fb	          AND #~NES_SNES_JOY
.395cdc	09 04		ora #$04	          ORA #NES_SNES_JOY   ; 1 = SNES (12 Bit Shift)
.395cde	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395ce2	6b		rtl		          RTL
.395ce3					JOYSTICK_ENABLE_NES_SNES_PORT0
.395ce3	e2 20		sep #$20	                SEP #$20        ; set A short
.395ce5	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395ce9	29 fe		and #$fe	          AND #~NES_SNES_EN0
.395ceb	09 01		ora #$01	          ORA #NES_SNES_EN0
.395ced	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395cf1	6b		rtl		          RTL
.395cf2					JOYSTICK_ENABLE_NES_SNES_PORT1
.395cf2	e2 20		sep #$20	                SEP #$20        ; set A short
.395cf4	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395cf8	29 fd		and #$fd	          AND #~NES_SNES_EN1
.395cfa	09 02		ora #$02	          ORA #NES_SNES_EN1
.395cfc	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395d00	6b		rtl		          RTL
.395d01					JOYSTICK_DISABLE_NES_SNES_PORT0
.395d01	e2 20		sep #$20	                SEP #$20        ; set A short
.395d03	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395d07	29 fe		and #$fe	          AND #~NES_SNES_EN0
.395d09	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395d0d	6b		rtl		          RTL
.395d0e					JOYSTICK_DISABLE_NES_SNES_PORT1
.395d0e	e2 20		sep #$20	                SEP #$20        ; set A short
.395d10	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395d14	29 fd		and #$fd	          AND #~NES_SNES_EN1
.395d16	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395d1a	6b		rtl		          RTL
.395d1b					JOYSTICK_NES_SNES_TRIG_WITH_POLL
.395d1b	e2 20		sep #$20	                SEP #$20        ; set A short
.395d1d	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395d21	29 03		and #$03	          AND #(NES_SNES_EN0 | NES_SNES_EN1)
.395d23	c9 00		cmp #$00	          CMP #$00
.395d25	f0 14		beq $395d3b	          BEQ END_OF_JOYSTICK_POLL
.395d27	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395d2b	09 80		ora #$80	          ORA #NES_SNES_TRIG   ; Set to 1 (Will auto Clear)
.395d2d	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395d31					JOYSTICK_POLLING_ISNOTOVER
.395d31	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE ;
.395d35	29 40		and #$40	          AND #NES_SNES_DONE
.395d37	c9 40		cmp #$40	          CMP #NES_SNES_DONE
.395d39	d0 f6		bne $395d31	          BNE JOYSTICK_POLLING_ISNOTOVER
.395d3b					END_OF_JOYSTICK_POLL
.395d3b	6b		rtl		          RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\sdc_library.asm

.395d3c					SDC_TEST
.395d3c	8b		phb		                PHB
.395d3d	0b		phd		                PHD
.395d3e	08		php		                PHP
.395d3f	48		pha		                PHA             ; begin setdbr macro
.395d40	08		php		                PHP
.395d41	e2 20		sep #$20	                SEP #$20        ; set A short
.395d43	a9 00		lda #$00	                LDA #0
.395d45	48		pha		                PHA
.395d46	ab		plb		                PLB
.395d47	28		plp		                PLP
.395d48	68		pla		                PLA             ; end setdbr macro
.395d49	48		pha		                PHA             ; begin setdp macro
.395d4a	08		php		                PHP
.395d4b	c2 20		rep #$20	                REP #$20        ; set A long
.395d4d	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395d50	5b		tcd		                TCD
.395d51	28		plp		                PLP
.395d52	68		pla		                PLA             ; end setdp macro
.395d53	e2 20		sep #$20	                SEP #$20        ; set A short
.395d55	a9 f0		lda #$f0	                LDA #$F0                            ; Set white on black background
.395d57	8d 1e 00	sta $001e	                STA @w CURCOLOR
.395d5a	22 a8 10 38	jsl $3810a8	                JSL CLRSCREEN
.395d5e	22 a0 10 38	jsl $3810a0	                JSL CSRHOME
.395d62	22 a2 5d 39	jsl $395da2	                JSL SDC_INIT                        ; Attempt to initilize the SDC interface
.395d66	b0 03		bcs $395d6b	                BCS init_ok
.395d68	82 15 00	brl $395d80	                BRL done
.395d6b	a9 02		lda #$02	init_ok         LDA #BIOS_DEV_SD
.395d6d	85 01		sta $0321	                STA BIOS_DEV
.395d6f	22 43 45 39	jsl $394543	                JSL DOS_MOUNT                       ; Attempt to mount the SDC
.395d73	b0 03		bcs $395d78	                BCS mount_ok
.395d75	82 08 00	brl $395d80	                BRL done
.395d78	22 f1 55 39	jsl $3955f1	mount_ok        JSL IF_DIROPEN
.395d7c	b0 02		bcs $395d80	                BCS all_ok
.395d7e	80 00		bra $395d80	                BRA done
.395d80					all_ok
.395d80	22 6c 10 38	jsl $38106c	done            JSL PRINTCR
.395d84	28		plp		                PLP
.395d85	2b		pld		                PLD
.395d86	ab		plb		                PLB
.395d87	6b		rtl		                RTL
.395d88					SDC_WAITBUSY
.395d88	08		php		                PHP
.395d89	e2 20		sep #$20	                SEP #$20        ; set A short
.395d8b	af 04 ea af	lda $afea04	wait_xact       LDA @l SDC_TRANS_STATUS_REG         ; Wait for the transaction to complete
.395d8f	29 01		and #$01	                AND #SDC_TRANS_BUSY
.395d91	c9 01		cmp #$01	                CMP #SDC_TRANS_BUSY
.395d93	f0 f6		beq $395d8b	                BEQ wait_xact
.395d95	28		plp		                PLP
.395d96	6b		rtl		                RTL
.395d97					SDC_RESET
.395d97	08		php		                PHP
.395d98	e2 20		sep #$20	                SEP #$20        ; set A short
.395d9a	a9 01		lda #$01	                LDA #1
.395d9c	8f 01 ea af	sta $afea01	                STA @l SDC_CONTROL_REG
.395da0	28		plp		                PLP
.395da1	6b		rtl		                RTL
.395da2					SDC_INIT
.395da2	0b		phd		                PHD
.395da3	8b		phb		                PHB
.395da4	08		php		                PHP
.395da5	48		pha		                PHA             ; begin setdbr macro
.395da6	08		php		                PHP
.395da7	e2 20		sep #$20	                SEP #$20        ; set A short
.395da9	a9 00		lda #$00	                LDA #0
.395dab	48		pha		                PHA
.395dac	ab		plb		                PLB
.395dad	28		plp		                PLP
.395dae	68		pla		                PLA             ; end setdbr macro
.395daf	48		pha		                PHA             ; begin setdp macro
.395db0	08		php		                PHP
.395db1	c2 20		rep #$20	                REP #$20        ; set A long
.395db3	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395db6	5b		tcd		                TCD
.395db7	28		plp		                PLP
.395db8	68		pla		                PLA             ; end setdp macro
.395db9	e2 20		sep #$20	                SEP #$20        ; set A short
.395dbb	a9 01		lda #$01	start_trans     LDA #SDC_TRANS_INIT_SD
.395dbd	8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG           ; Set Init SD
.395dc1	a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.395dc3	8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.395dc7	22 88 5d 39	jsl $395d88	                JSL SDC_WAITBUSY                    ; Wait for initialization to complete
.395dcb	af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395dcf	d0 07		bne $395dd8	                BNE ret_error                       ; Is there one? Process the error
.395dd1	64 00		stz $0320	ret_success     STZ BIOS_STATUS
.395dd3	28		plp		                PLP
.395dd4	ab		plb		                PLB
.395dd5	2b		pld		                PLD
.395dd6	38		sec		                SEC
.395dd7	6b		rtl		                RTL
.395dd8	8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.395ddb	a9 8b		lda #$8b	                LDA #BIOS_ERR_NOTINIT
.395ddd	85 00		sta $0320	set_error       STA BIOS_STATUS
.395ddf	28		plp		                PLP
.395de0	ab		plb		                PLB
.395de1	2b		pld		                PLD
.395de2	18		clc		                CLC
.395de3	6b		rtl		                RTL
.395de4					SDC_GETBLOCK
.395de4	0b		phd		                PHD
.395de5	8b		phb		                PHB
.395de6	08		php		                PHP
.395de7	48		pha		                PHA             ; begin setdbr macro
.395de8	08		php		                PHP
.395de9	e2 20		sep #$20	                SEP #$20        ; set A short
.395deb	a9 00		lda #$00	                LDA #0
.395ded	48		pha		                PHA
.395dee	ab		plb		                PLB
.395def	28		plp		                PLP
.395df0	68		pla		                PLA             ; end setdbr macro
.395df1	48		pha		                PHA             ; begin setdp macro
.395df2	08		php		                PHP
.395df3	c2 20		rep #$20	                REP #$20        ; set A long
.395df5	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395df8	5b		tcd		                TCD
.395df9	28		plp		                PLP
.395dfa	68		pla		                PLA             ; end setdp macro
.395dfb	e2 20		sep #$20	                SEP #$20        ; set A short
.395dfd	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.395e01	09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.395e03	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395e07	a9 00		lda #$00	                LDA #0
.395e09	8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.395e0d	a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to read
.395e0f	0a		asl a		                ASL A
.395e10	8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.395e14	a5 03		lda $0323	                LDA BIOS_LBA+1
.395e16	2a		rol a		                ROL A
.395e17	8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.395e1b	a5 04		lda $0324	                LDA BIOS_LBA+2
.395e1d	2a		rol a		                ROL A
.395e1e	8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.395e22	a9 02		lda #$02	                LDA #SDC_TRANS_READ_BLK             ; Set the transaction to READ
.395e24	8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.395e28	a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.395e2a	8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.395e2e	22 88 5d 39	jsl $395d88	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.395e32	af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395e36	d0 36		bne $395e6e	                BNE ret_error                       ; Is there one? Process the error
.395e38	e2 20		sep #$20	                SEP #$20        ; set A short
.395e3a	af 13 ea af	lda $afea13	                LDA @l SDC_RX_FIFO_DATA_CNT_LO      ; Record the number of bytes read
.395e3e	85 0a		sta $032a	                STA BIOS_FIFO_COUNT
.395e40	af 12 ea af	lda $afea12	                LDA @l SDC_RX_FIFO_DATA_CNT_HI
.395e44	85 0b		sta $032b	                STA BIOS_FIFO_COUNT+1
.395e46	c2 10		rep #$10	                REP #$10        ; set X long
.395e48	a0 00 00	ldy #$0000	                LDY #0
.395e4b	af 10 ea af	lda $afea10	loop_rd         LDA @l SDC_RX_FIFO_DATA_REG         ; Get the byte...
.395e4f	97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y               ; Save it to the buffer
.395e51	c8		iny		                INY                                 ; Advance to the next byte
.395e52	c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.395e55	d0 f4		bne $395e4b	                BNE loop_rd                         ; No: keep reading
.395e57	af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395e5b	d0 11		bne $395e6e	                BNE ret_error                       ; Is there one? Process the error
.395e5d	64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.395e5f	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395e63	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395e65	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395e69	28		plp		                PLP
.395e6a	ab		plb		                PLB
.395e6b	2b		pld		                PLD
.395e6c	38		sec		                SEC
.395e6d	6b		rtl		                RTL
.395e6e	8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.395e71	a9 82		lda #$82	                LDA #BIOS_ERR_READ
.395e73	85 00		sta $0320	                STA BIOS_STATUS
.395e75	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395e79	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395e7b	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395e7f	28		plp		                PLP
.395e80	ab		plb		                PLB
.395e81	2b		pld		                PLD
.395e82	18		clc		                CLC
.395e83	6b		rtl		                RTL
.395e84					SDC_PUTBLOCK
.395e84	0b		phd		                PHD
.395e85	8b		phb		                PHB
.395e86	08		php		                PHP
.395e87	48		pha		                PHA             ; begin setdbr macro
.395e88	08		php		                PHP
.395e89	e2 20		sep #$20	                SEP #$20        ; set A short
.395e8b	a9 00		lda #$00	                LDA #0
.395e8d	48		pha		                PHA
.395e8e	ab		plb		                PLB
.395e8f	28		plp		                PLP
.395e90	68		pla		                PLA             ; end setdbr macro
.395e91	48		pha		                PHA             ; begin setdp macro
.395e92	08		php		                PHP
.395e93	c2 20		rep #$20	                REP #$20        ; set A long
.395e95	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395e98	5b		tcd		                TCD
.395e99	28		plp		                PLP
.395e9a	68		pla		                PLA             ; end setdp macro
.395e9b	e2 20		sep #$20	                SEP #$20        ; set A short
.395e9d	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.395ea1	09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.395ea3	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395ea7	c2 10		rep #$10	                REP #$10        ; set X long
.395ea9	a0 00 00	ldy #$0000	                LDY #0
.395eac	b7 06		lda [$0326],y	loop_wr         LDA [BIOS_BUFF_PTR],Y               ; Get the byte...
.395eae	8f 20 ea af	sta $afea20	                STA @l SDC_TX_FIFO_DATA_REG         ; Save it to the SDC
.395eb2	c8		iny		                INY                                 ; Advance to the next byte
.395eb3	c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.395eb6	d0 f4		bne $395eac	                BNE loop_wr                         ; No: keep writing
.395eb8	a9 00		lda #$00	                LDA #0
.395eba	8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.395ebe	a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to write
.395ec0	0a		asl a		                ASL A
.395ec1	8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.395ec5	a5 03		lda $0323	                LDA BIOS_LBA+1
.395ec7	2a		rol a		                ROL A
.395ec8	8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.395ecc	a5 04		lda $0324	                LDA BIOS_LBA+2
.395ece	2a		rol a		                ROL A
.395ecf	8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.395ed3	a9 03		lda #$03	                LDA #SDC_TRANS_WRITE_BLK            ; Set the transaction to WRITE
.395ed5	8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.395ed9	a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.395edb	8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.395edf	22 88 5d 39	jsl $395d88	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.395ee3	af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395ee7	d0 11		bne $395efa	                BNE ret_error                       ; Is there one? Process the error
.395ee9	64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.395eeb	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395eef	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395ef1	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395ef5	28		plp		                PLP
.395ef6	ab		plb		                PLB
.395ef7	2b		pld		                PLD
.395ef8	38		sec		                SEC
.395ef9	6b		rtl		                RTL
.395efa	8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.395efd	a9 82		lda #$82	                LDA #BIOS_ERR_READ
.395eff	85 00		sta $0320	                STA BIOS_STATUS
.395f01	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395f05	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395f07	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395f0b	28		plp		                PLP
.395f0c	ab		plb		                PLB
.395f0d	2b		pld		                PLD
.395f0e	18		clc		                CLC
.395f0f	6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\fdc_library.asm

=4295454				FDC_MOTOR_TIME = 4295454        ; Time to wait for the motor to come on: 300ms
=2147727				FDC_SEEK_TIME = 2147727         ; Time to wait for a seek to happen: 150ms
=900					FDC_MOTOR_ON_TIME = 60*15       ; Time (in SOF interrupt counts) for the motor to stay on: ~15s?
=30					FDC_WAIT_TIME = 30              ; Time (in SOF interrupt counts) to allow for a waiting loop to continue
=13					BPB_SECPERCLUS12_OFF = 13       ; Offset to sectors per cluster in a FAT12 boot sector
=17					BPB_ROOT_MAX_ENTRY12_OFF = 17   ; Offset to the maximum number of entries in the root directory in FAT12 boot sector
=22					BPB_SECPERFAT12_OFF = 22        ; Offset to sectors per FAT on a FAT12 boot sector
.395f10					FDC_TEST
.395f10	8b		phb		                    PHB
.395f11	0b		phd		                    PHD
.395f12	08		php		                    PHP
.395f13	48		pha		                PHA             ; begin setdbr macro
.395f14	08		php		                PHP
.395f15	e2 20		sep #$20	                SEP #$20        ; set A short
.395f17	a9 00		lda #$00	                LDA #0
.395f19	48		pha		                PHA
.395f1a	ab		plb		                PLB
.395f1b	28		plp		                PLP
.395f1c	68		pla		                PLA             ; end setdbr macro
.395f1d	48		pha		                PHA             ; begin setdp macro
.395f1e	08		php		                PHP
.395f1f	c2 20		rep #$20	                REP #$20        ; set A long
.395f21	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395f24	5b		tcd		                TCD
.395f25	28		plp		                PLP
.395f26	68		pla		                PLA             ; end setdp macro
.395f27	e2 20		sep #$20	                SEP #$20        ; set A short
.395f29	a9 f0		lda #$f0	                    LDA #$F0
.395f2b	8d 1e 00	sta $001e	                    STA @w CURCOLOR
.395f2e	22 41 0b 39	jsl $390b41	                    JSL ICLRSCREEN
.395f32	22 65 09 39	jsl $390965	                    JSL ICSRHOME
.395f36	c2 30		rep #$30	                REP #$30        ; set A&X long
.395f38	22 06 62 39	jsl $396206	                    JSL FDC_Init
.395f3c	b0 03		bcs $395f41	                    BCS init_ok
.395f3e	82 20 00	brl $395f61	                    BRL motor_off
.395f41	22 05 69 39	jsl $396905	init_ok             JSL FDC_CHK_MEDIA
.395f45	90 03		bcc $395f4a	                    BCC no_media
.395f47	82 03 00	brl $395f4d	                    BRL is_ok1
.395f4a					no_media
.395f4a	82 14 00	brl $395f61	                    BRL motor_off
.395f4d	22 98 67 39	jsl $396798	is_ok1              JSL FDC_MOUNT
.395f51	90 03		bcc $395f56	                    BCC mount_err
.395f53	82 03 00	brl $395f59	                    BRL is_ok2
.395f56					mount_err
.395f56	82 08 00	brl $395f61	                    BRL motor_off
.395f59	22 6d 5f 39	jsl $395f6d	is_ok2              JSL FDC_TEST_PUTBLOCK
.395f5d	b0 02		bcs $395f61	                    BCS all_ok
.395f5f	80 00		bra $395f61	                    BRA motor_off
.395f61					all_ok
.395f61	22 6c 10 38	jsl $38106c	motor_off           JSL PRINTCR
.395f65	22 b6 62 39	jsl $3962b6	                    JSL FDC_Motor_Off
.395f69	28		plp		                    PLP
.395f6a	2b		pld		                    PLD
.395f6b	ab		plb		                    PLB
.395f6c	6b		rtl		                    RTL
.395f6d					FDC_TEST_PUTBLOCK
.395f6d	e2 20		sep #$20	                SEP #$20        ; set A short
.395f6f	a9 00		lda #$00	                    LDA #0                          ; Initialize the data to write to the drive
.395f71	a2 00 00	ldx #$0000	                    LDX #0
.395f74	9f 00 00 03	sta $030000,x	init_loop           STA @l TEST_BUFFER,X
.395f78	1a		inc a		                    INC A
.395f79	e8		inx		                    INX
.395f7a	e0 00 02	cpx #$0200	                    CPX #512
.395f7d	d0 f5		bne $395f74	                    BNE init_loop
.395f7f	c2 20		rep #$20	                REP #$20        ; set A long
.395f81	a9 00 00	lda #$0000	                    LDA #<>TEST_BUFFER              ; Set BIOS_BUFF_PTR
.395f84	8f 26 03 00	sta $000326	                    STA @l BIOS_BUFF_PTR
.395f88	a9 03 00	lda #$0003	                    LDA #`TEST_BUFFER
.395f8b	8f 28 03 00	sta $000328	                    STA @l BIOS_BUFF_PTR+2
.395f8f	a9 64 00	lda #$0064	                    LDA #100                        ; Set LBA = 100
.395f92	8f 22 03 00	sta $000322	                    STA @l BIOS_LBA
.395f96	a9 00 00	lda #$0000	                    LDA #0
.395f99	8f 24 03 00	sta $000324	                    STA @l BIOS_LBA+2
.395f9d	22 2c 67 39	jsl $39672c	                    JSL FDC_PUTBLOCK                ; Try to write the data
.395fa1	6b		rtl		                    RTL
>395fa2	40 46 3a 53 41 4d 50 4c		BOOT_FILE           .null "@F:SAMPLE.PGX Hello, world!"
>395faa	45 2e 50 47 58 20 48 65 6c 6c 6f 2c 20 77 6f 72
>395fba	6c 64 21 00
=$020000				TEST_LOCATION = $020000                     ; Location to try to load it
=$030000				TEST_BUFFER = $030000                       ; Temporary location for a cluster buffer
.395fbe					FDC_Check_RQM
.395fbe	0b		phd		                    PHD
.395fbf	08		php		                    PHP
.395fc0	48		pha		                PHA             ; begin setdp macro
.395fc1	08		php		                PHP
.395fc2	c2 20		rep #$20	                REP #$20        ; set A long
.395fc4	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395fc7	5b		tcd		                TCD
.395fc8	28		plp		                PLP
.395fc9	68		pla		                PLA             ; end setdp macro
.395fca	e2 20		sep #$20	                SEP #$20        ; set A short
.395fcc	a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395fce	22 02 41 39	jsl $394102	                    JSL ISETTIMEOUT
.395fd2	a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395fd4	30 12		bmi $395fe8	                    BMI time_out            ; If so: signal a time out
.395fd6	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395fda	89 80		bit #$80	                    BIT #FDC_MSR_RQM
.395fdc	f0 f4		beq $395fd2	                    BEQ loop
.395fde	a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395fe0	22 02 41 39	jsl $394102	                    JSL ISETTIMEOUT
.395fe4	28		plp		                    PLP
.395fe5	2b		pld		                    PLD
.395fe6	38		sec		                    SEC
.395fe7	60		rts		                    RTS
.395fe8	28		plp		time_out            PLP
.395fe9	2b		pld		                    PLD
.395fea	18		clc		                    CLC
.395feb	60		rts		                    RTS
.395fec					FDC_Check_DRV0_BSY
.395fec	0b		phd		                    PHD
.395fed	08		php		                    PHP
.395fee	48		pha		                PHA             ; begin setdp macro
.395fef	08		php		                PHP
.395ff0	c2 20		rep #$20	                REP #$20        ; set A long
.395ff2	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395ff5	5b		tcd		                TCD
.395ff6	28		plp		                PLP
.395ff7	68		pla		                PLA             ; end setdp macro
.395ff8	e2 20		sep #$20	                SEP #$20        ; set A short
.395ffa	a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395ffc	22 02 41 39	jsl $394102	                    JSL ISETTIMEOUT
.396000	a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.396002	30 12		bmi $396016	                    BMI time_out            ; If so: signal a time out
.396004	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.396008	89 01		bit #$01	                    BIT #FDC_MSR_DRV0BSY
.39600a	d0 f4		bne $396000	                    BNE loop
.39600c	a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.39600e	22 02 41 39	jsl $394102	                    JSL ISETTIMEOUT
.396012	28		plp		                    PLP
.396013	2b		pld		                    PLD
.396014	38		sec		                    SEC
.396015	60		rts		                    RTS
.396016	28		plp		time_out            PLP
.396017	2b		pld		                    PLD
.396018	18		clc		                    CLC
.396019	60		rts		                    RTS
.39601a					FDC_Check_CMD_BSY
.39601a	0b		phd		                    PHD
.39601b	08		php		                    PHP
.39601c	48		pha		                PHA             ; begin setdp macro
.39601d	08		php		                PHP
.39601e	c2 20		rep #$20	                REP #$20        ; set A long
.396020	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396023	5b		tcd		                TCD
.396024	28		plp		                PLP
.396025	68		pla		                PLA             ; end setdp macro
.396026	e2 20		sep #$20	                SEP #$20        ; set A short
.396028	a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.39602a	22 02 41 39	jsl $394102	                    JSL ISETTIMEOUT
.39602e	a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.396030	30 12		bmi $396044	                    BMI time_out            ; If so: signal a time out
.396032	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.396036	89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.396038	d0 f4		bne $39602e	                    BNE loop
.39603a	a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.39603c	22 02 41 39	jsl $394102	                    JSL ISETTIMEOUT
.396040	28		plp		                    PLP
.396041	2b		pld		                    PLD
.396042	38		sec		                    SEC
.396043	60		rts		                    RTS
.396044	28		plp		time_out            PLP
.396045	2b		pld		                    PLD
.396046	18		clc		                    CLC
.396047	60		rts		                    RTS
.396048					FDC_Can_Read_Data
.396048	0b		phd		                    PHD
.396049	08		php		                    PHP
.39604a	48		pha		                PHA             ; begin setdp macro
.39604b	08		php		                PHP
.39604c	c2 20		rep #$20	                REP #$20        ; set A long
.39604e	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396051	5b		tcd		                TCD
.396052	28		plp		                PLP
.396053	68		pla		                PLA             ; end setdp macro
.396054	e2 20		sep #$20	                SEP #$20        ; set A short
.396056	a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.396058	22 02 41 39	jsl $394102	                    JSL ISETTIMEOUT
.39605c	a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.39605e	30 14		bmi $396074	                    BMI time_out            ; If so: signal a time out
.396060	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.396064	29 40		and #$40	                    AND #FDC_MSR_DIO
.396066	c9 40		cmp #$40	                    CMP #FDC_MSR_DIO
.396068	d0 f2		bne $39605c	                    BNE loop
.39606a	a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.39606c	22 02 41 39	jsl $394102	                    JSL ISETTIMEOUT
.396070	28		plp		                    PLP
.396071	2b		pld		                    PLD
.396072	38		sec		                    SEC
.396073	60		rts		                    RTS
.396074	28		plp		time_out            PLP
.396075	2b		pld		                    PLD
.396076	18		clc		                    CLC
.396077	60		rts		                    RTS
.396078					FDC_CAN_WRITE
.396078	0b		phd		                    PHD
.396079	08		php		                    PHP
.39607a	48		pha		                PHA             ; begin setdp macro
.39607b	08		php		                PHP
.39607c	c2 20		rep #$20	                REP #$20        ; set A long
.39607e	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396081	5b		tcd		                TCD
.396082	28		plp		                PLP
.396083	68		pla		                PLA             ; end setdp macro
.396084	e2 20		sep #$20	                SEP #$20        ; set A short
.396086	a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.396088	22 02 41 39	jsl $394102	                    JSL ISETTIMEOUT
.39608c	a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.39608e	30 14		bmi $3960a4	                    BMI time_out            ; If so: signal a time out
.396090	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.396094	29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.396096	c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.396098	d0 f2		bne $39608c	                    BNE loop
.39609a	a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.39609c	22 02 41 39	jsl $394102	                    JSL ISETTIMEOUT
.3960a0	28		plp		                    PLP
.3960a1	2b		pld		                    PLD
.3960a2	38		sec		                    SEC
.3960a3	60		rts		                    RTS
.3960a4	28		plp		time_out            PLP
.3960a5	2b		pld		                    PLD
.3960a6	18		clc		                    CLC
.3960a7	60		rts		                    RTS
.3960a8					FDC_DELAY_10MS
.3960a8	da		phx		                    PHX
.3960a9	08		php		                    PHP
.3960aa	c2 10		rep #$10	                REP #$10        ; set X long
.3960ac	a2 80 3e	ldx #$3e80	                    LDX #16000          ; Wait for around 10ms
.3960af	ea		nop		loop                NOP                 ; Each iteration should take 9 cycles
.3960b0	ca		dex		                    DEX
.3960b1	e0 00 00	cpx #$0000	                    CPX #0
.3960b4	d0 f9		bne $3960af	                    BNE loop
.3960b6	28		plp		                    PLP
.3960b7	fa		plx		                    PLX
.3960b8	6b		rtl		                    RTL
.3960b9					FDC_COMMAND
.3960b9	da		phx		                    PHX
.3960ba	8b		phb		                    PHB
.3960bb	0b		phd		                    PHD
.3960bc	08		php		                    PHP
.3960bd	48		pha		                PHA             ; begin setdbr macro
.3960be	08		php		                PHP
.3960bf	e2 20		sep #$20	                SEP #$20        ; set A short
.3960c1	a9 00		lda #$00	                LDA #0
.3960c3	48		pha		                PHA
.3960c4	ab		plb		                PLB
.3960c5	28		plp		                PLP
.3960c6	68		pla		                PLA             ; end setdbr macro
.3960c7	48		pha		                PHA             ; begin setdp macro
.3960c8	08		php		                PHP
.3960c9	c2 20		rep #$20	                REP #$20        ; set A long
.3960cb	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3960ce	5b		tcd		                TCD
.3960cf	28		plp		                PLP
.3960d0	68		pla		                PLA             ; end setdp macro
.3960d1	22 a8 60 39	jsl $3960a8	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms
.3960d5	e2 30		sep #$30	                SEP #$30        ; set A&X short
.3960d7	a2 00		ldx #$00	                    LDX #0
.3960d9	a9 00		lda #$00	                    LDA #0
.3960db	9d 10 05	sta $0510,x	clr_results         STA FDC_RESULTS,X                       ; Clear the result buffer
.3960de	e8		inx		                    INX
.3960df	e0 10		cpx #$10	                    CPX #16
.3960e1	d0 f8		bne $3960db	                    BNE clr_results
.3960e3	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Validate we can send a command
.3960e7	29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.3960e9	c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.3960eb	f0 04		beq $3960f1	                    BEQ start_send                          ; If so, start sending
.3960ed	22 06 62 39	jsl $396206	fdc_reset           JSL FDC_INIT                            ; Reset the FDC
.3960f1					start_send
.3960f1	e2 10		sep #$10	                SEP #$10        ; set X short
.3960f3	a2 00		ldx #$00	                    LDX #0
.3960f5	20 be 5f	jsr $395fbe	send_loop           JSR FDC_Check_RQM                       ; Wait until we can write
.3960f8	b0 03		bcs $3960fd	                    BCS send_param
.3960fa	82 5e 00	brl $39615b	                    BRL time_out                            ; If there was a timeout, flag the time out
.3960fd	bd 00 05	lda $0500,x	send_param          LDA FDC_PARAMETERS,X                    ; Get the parameter/command byte to write
.396100	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; Send it
.396104	22 a8 60 39	jsl $3960a8	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms for things to settle
.396108	e8		inx		                    INX                                     ; Advance to the next byte
.396109	ec 30 05	cpx $0530	                    CPX FDC_PARAM_NUM
.39610c	d0 e7		bne $3960f5	                    BNE send_loop                           ; Keep sending until we've sent them all
.39610e	ad 33 05	lda $0533	                    LDA FDC_EXPECT_DAT                      ; Check the data expectation byte
.396111	d0 03		bne $396116	                    BNE chk_data_dir
.396113	82 80 00	brl $396196	                    BRL result_phase                        ; If 0: we just want a result
.396116	10 3c		bpl $396154	chk_data_dir        BPL rd_data                             ; If >0: we want to read data
.396118					wr_data
.396118	a5 0b		lda $030b	wr_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.39611a	30 03		bmi $39611f	                    BMI wr_chk_rqm
.39611c	82 3c 00	brl $39615b	                    BRL time_out                            ; If not, raise an error
.39611f	af f4 13 af	lda $af13f4	wr_chk_rqm          LDA @l SIO_FDC_MSR                      ; Wait for ready to write
.396123	89 80		bit #$80	                    BIT #FDC_MSR_RQM
.396125	f0 f1		beq $396118	                    BEQ wr_data_rdy
.396127	89 20		bit #$20	                    BIT #FDC_MSR_NONDMA                     ; Check if in execution mode
.396129	d0 03		bne $39612e	                    BNE wr_data_phase                       ; If so: transfer the data
.39612b	82 68 00	brl $396196	                    BRL result_phase                          ; If not: it's an error
.39612e					wr_data_phase
.39612e	c2 10		rep #$10	                REP #$10        ; set X long
.396130	a0 00 00	ldy #$0000	                    LDY #0
.396133	a5 0b		lda $030b	wr_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.396135	30 03		bmi $39613a	                    BMI wr_chk_nondma
.396137	82 21 00	brl $39615b	                    BRL time_out                            ; If not, raise an error
.39613a	af f4 13 af	lda $af13f4	wr_chk_nondma       LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.39613e	89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.396140	f0 54		beq $396196	                    BEQ result_phase                        ; If not: break out to result phase
.396142	89 80		bit #$80	                    BIT #FDC_MSR_RQM                        ; Check if we can read data
.396144	f0 ed		beq $396133	                    BEQ wr_data_loop                        ; No: keep waiting
.396146	b7 26		lda [$0326],y	                    LDA [BIOS_BUFF_PTR],Y                   ; Get the data byte
.396148	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; And save it to the buffer
.39614c	c8		iny		                    INY                                     ; Move to the next position
.39614d	c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.396150	d0 e1		bne $396133	                    BNE wr_data_loop                        ; If not at the end, keep fetching
.396152	80 42		bra $396196	                    BRA result_phase                        ; ready for the result phase
.396154	20 48 60	jsr $396048	rd_data             JSR FDC_Can_Read_Data
.396157	a5 0b		lda $030b	rd_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.396159	30 07		bmi $396162	                    BMI chk_rd_rdy                          ; If so, check to see if the data is ready
.39615b					time_out
.39615b	e2 20		sep #$20	                SEP #$20        ; set A short
.39615d	a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT                   ; Otherwise: throw a BIOS_ERR_TIMEOUT error
.39615f	82 9c 00	brl $3961fe	                    BRL pass_error
.396162	af f4 13 af	lda $af13f4	chk_rd_rdy          LDA @l SIO_FDC_MSR                      ; Wait for data to be ready
.396166	29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.396168	c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.39616a	d0 eb		bne $396157	                    BNE rd_data_rdy
.39616c	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.396170	89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.396172	d0 03		bne $396177	                    BNE rd_data_phase                       ; If so: transfer the data
.396174	82 83 00	brl $3961fa	                    BRL error                               ; If not: it's an error
.396177					rd_data_phase
.396177	c2 10		rep #$10	                REP #$10        ; set X long
.396179	a0 00 00	ldy #$0000	                    LDY #0
.39617c	a5 0b		lda $030b	rd_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.39617e	10 db		bpl $39615b	                    BPL time_out                            ; If not: throw a timeout error
.396180	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Wait for the next byte to be ready
.396184	29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.396186	c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.396188	d0 f2		bne $39617c	                    BNE rd_data_loop
.39618a	af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Get the data byte
.39618e	97 26		sta [$0326],y	                    STA [BIOS_BUFF_PTR],Y                   ; And save it to the buffer
.396190	c8		iny		                    INY                                     ; Move to the next position
.396191	c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.396194	d0 e6		bne $39617c	                    BNE rd_data_loop                        ; If not at the end, keep fetching
.396196	ad 32 05	lda $0532	result_phase        LDA FDC_RESULT_NUM                      ; If no results are expected...
.396199	f0 34		beq $3961cf	                    BEQ chk_busy                            ; Then we're done
.39619b	e2 10		sep #$10	                SEP #$10        ; set X short
.39619d	a2 00		ldx #$00	                    LDX #0
.39619f	a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME                      ; Set the watchdog timer
.3961a1	22 02 41 39	jsl $394102	                    JSL ISETTIMEOUT
.3961a5	20 48 60	jsr $396048	result_loop         JSR FDC_Can_Read_Data                   ; Wait until we can read
.3961a8	90 b1		bcc $39615b	                    BCC time_out                            ; If there was a time out, raise an error
.3961aa	af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Yes: get the data
.3961ae	20 48 60	jsr $396048	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.3961b1	90 a8		bcc $39615b	                    BCC time_out                            ; If there was a time out, raise an error
.3961b3	af f5 13 af	lda $af13f5	read_result         LDA @l SIO_FDC_DTA                      ; Yes: get the data
.3961b7	9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X                       ; Save it to the result buffer
.3961ba	20 be 5f	jsr $395fbe	                    JSR FDC_Check_RQM
.3961bd	90 9c		bcc $39615b	                    BCC time_out                            ; If there was a time out, flag the error
.3961bf	af f4 13 af	lda $af13f4	rd_chk_1            LDA @l SIO_FDC_MSR
.3961c3	29 50		and #$50	                    AND #FDC_MSR_DIO | FDC_MSR_CMDBSY
.3961c5	c9 50		cmp #$50	                    CMP #FDC_MSR_DIO | FDC_MSR_CMDBSY
.3961c7	d0 06		bne $3961cf	                    BNE chk_busy
.3961c9	e8		inx		                    INX                                     ; Move to the next result positions
.3961ca	ec 32 05	cpx $0532	                    CPX FDC_RESULT_NUM
.3961cd	d0 e4		bne $3961b3	                    BNE read_result                         ; And keep looping until we've read all
.3961cf					chk_busy
.3961cf	c2 10		rep #$10	                REP #$10        ; set X long
.3961d1	a2 0a 00	ldx #$000a	                    LDX #10                                 ; Wait 10ms (I guess?)
.3961d4	22 18 16 39	jsl $391618	                    JSL ILOOP_MS
.3961d8	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check the command busy bit
.3961dc	89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.3961de	f0 12		beq $3961f2	                    BEQ done                                ; If not set: we're done
.3961e0	20 48 60	jsr $396048	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.3961e3	b0 03		bcs $3961e8	                    BCS get_result_byte
.3961e5	82 73 ff	brl $39615b	                    BRL time_out                            ; If there was a time out, flag the error
.3961e8	af f5 13 af	lda $af13f5	get_result_byte     LDA @l SIO_FDC_DTA                      ; Read the data
.3961ec	9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X
.3961ef	e8		inx		                    INX
.3961f0	80 dd		bra $3961cf	                    BRA chk_busy                            ; And keep checking
.3961f2					done
.3961f2	64 20		stz $0320	                    STZ BIOS_STATUS
.3961f4	28		plp		                    PLP
.3961f5	2b		pld		                    PLD
.3961f6	ab		plb		                    PLB
.3961f7	fa		plx		                    PLX
.3961f8	38		sec		                    SEC
.3961f9	6b		rtl		                    RTL
.3961fa					error
.3961fa	e2 20		sep #$20	                SEP #$20        ; set A short
.3961fc	a9 85		lda #$85	                    LDA #BIOS_ERR_CMD
.3961fe	85 20		sta $0320	pass_error          STA BIOS_STATUS
.396200	28		plp		                    PLP
.396201	2b		pld		                    PLD
.396202	ab		plb		                    PLB
.396203	fa		plx		                    PLX
.396204	18		clc		                    CLC
.396205	6b		rtl		                    RTL
.396206					FDC_Init
.396206	08		php		                    PHP
.396207	c2 10		rep #$10	                REP #$10        ; set X long
.396209	e2 20		sep #$20	                SEP #$20        ; set A short
.39620b	a9 00		lda #$00	                    LDA #0
.39620d	8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.396211	a2 e8 03	ldx #$03e8	                    LDX #1000                   ; Wait
.396214	a0 00 00	ldy #$0000	                    LDY #0
.396217	22 25 16 39	jsl $391625	                    JSL IDELAY
.39621b	a9 04		lda #$04	                    LDA #FDC_DOR_NRESET         ; Reset the FDC
.39621d	8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.396221	ea		nop		                    NOP
.396222	ea		nop		                    NOP
.396223	ea		nop		                    NOP
.396224	ea		nop		                    NOP
.396225	a9 00		lda #$00	                    LDA #$00                    ; Make sure the Speed and Compensation has been set
.396227	8f f4 13 af	sta $af13f4	                    STA @l SIO_FDC_DSR
.39622b	a9 00		lda #$00	                    LDA #$00                    ; Precompensation set to 0
.39622d	8f f7 13 af	sta $af13f7	                    STA @l SIO_FDC_CCR
.396231	a2 8f c5	ldx #$c58f	                    LDX #<>FDC_SEEK_TIME
.396234	a0 20 00	ldy #$0020	                    LDY #`FDC_SEEK_TIME
.396237	22 25 16 39	jsl $391625	                    JSL IDELAY
.39623b	22 16 63 39	jsl $396316	                    JSL FDC_Sense_Int_Status
.39623f	90 25		bcc $396266	                    BCC pass_failure
.396241	22 16 63 39	jsl $396316	                    JSL FDC_Sense_Int_Status
.396245	90 1f		bcc $396266	                    BCC pass_failure
.396247	22 16 63 39	jsl $396316	                    JSL FDC_Sense_Int_Status
.39624b	90 19		bcc $396266	                    BCC pass_failure
.39624d	22 16 63 39	jsl $396316	                    JSL FDC_Sense_Int_Status
.396251	90 13		bcc $396266	                    BCC pass_failure
.396253	22 d8 63 39	jsl $3963d8	                    JSL FDC_Configure_Command
.396257	90 0d		bcc $396266	                    BCC pass_failure
.396259	22 7f 63 39	jsl $39637f	                    JSL FDC_Specify_Command
.39625d	90 07		bcc $396266	                    BCC pass_failure
.39625f	22 82 62 39	jsl $396282	                    JSL FDC_Motor_On
.396263	28		plp		                    PLP
.396264	38		sec		                    SEC
.396265	6b		rtl		                    RTL
.396266	28		plp		pass_failure        PLP
.396267	18		clc		                    CLC
.396268	6b		rtl		                    RTL
.396269					FDC_MOTOR_NEEDED
.396269	08		php		                    PHP
.39626a	c2 20		rep #$20	                REP #$20        ; set A long
.39626c	78		sei		                    SEI                         ; Turn off interrupts
.39626d	a9 84 03	lda #$0384	                    LDA #FDC_MOTOR_ON_TIME      ; Reset the FDC timeout clock
.396270	8f 4e a0 38	sta $38a04e	                    STA @l FDC_MOTOR_TIMER
.396274	e2 20		sep #$20	                SEP #$20        ; set A short
.396276	af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.39627a	29 fe		and #$fe	                    AND #~FNX0_INT00_SOF        ; Enable the SOF interrupt
.39627c	8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.396280	28		plp		                    PLP
.396281	6b		rtl		                    RTL
.396282					FDC_Motor_On
.396282	08		php		                    PHP
.396283	22 69 62 39	jsl $396269	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.396287	e2 20		sep #$20	                SEP #$20        ; set A short
.396289	af f2 13 af	lda $af13f2	                    LDA @l SIO_FDC_DOR          ; Check to see if the motor is already on
.39628d	89 10		bit #$10	                    BIT #FDC_DOR_MOT0
.39628f	d0 1f		bne $3962b0	                    BNE done                    ; If so: skip
.396291	a9 14		lda #$14	                    LDA #FDC_DOR_MOT0 | FDC_DOR_NRESET
.396293	8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.396297	20 be 5f	jsr $395fbe	                    JSR FDC_Check_RQM           ; Make sure we can leave knowing that everything set properly
.39629a	90 17		bcc $3962b3	                    BCC time_out
.39629c	a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.39629f	a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.3962a2	22 25 16 39	jsl $391625	                    JSL IDELAY
.3962a6	af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.3962aa	09 80		ora #$80	                    ORA #$80                    ; Flag that the motor should be on
.3962ac	8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.3962b0	28		plp		done                PLP
.3962b1	38		sec		                    SEC
.3962b2	6b		rtl		                    RTL
.3962b3	28		plp		time_out            PLP                         ; Return a timeout error
.3962b4	18		clc		                    CLC
.3962b5	6b		rtl		                    RTL
.3962b6					FDC_Motor_Off
.3962b6	08		php		                    PHP
.3962b7	e2 20		sep #$20	                SEP #$20        ; set A short
.3962b9	a9 04		lda #$04	                    LDA #FDC_DOR_NRESET
.3962bb	8f f2 13 af	sta $af13f2	                    STA @L SIO_FDC_DOR
.3962bf	c2 20		rep #$20	                REP #$20        ; set A long
.3962c1	78		sei		                    SEI                         ; Turn off interrupts
.3962c2	a9 00 00	lda #$0000	                    LDA #0                      ; Set FDC motor timeout counter to 0 to disable it
.3962c5	8f 4e a0 38	sta $38a04e	                    STA @l FDC_MOTOR_TIMER
.3962c9	e2 20		sep #$20	                SEP #$20        ; set A short
.3962cb	af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.3962cf	09 01		ora #$01	                    ORA #FNX0_INT00_SOF         ; Disable the SOF interrupt
.3962d1	8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.3962d5	af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.3962d9	29 7f		and #$7f	                    AND #$7F                    ; Flag that the motor should be off
.3962db	8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.3962df	28		plp		                    PLP
.3962e0	6b		rtl		                    RTL
.3962e1					FDC_Recalibrate_Command
.3962e1	0b		phd		                    PHD
.3962e2	08		php		                    PHP
.3962e3	48		pha		                PHA             ; begin setdp macro
.3962e4	08		php		                PHP
.3962e5	c2 20		rep #$20	                REP #$20        ; set A long
.3962e7	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3962ea	5b		tcd		                TCD
.3962eb	28		plp		                PLP
.3962ec	68		pla		                PLA             ; end setdp macro
.3962ed	22 69 62 39	jsl $396269	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.3962f1	e2 20		sep #$20	                SEP #$20        ; set A short
.3962f3	a9 07		lda #$07	                    LDA #FDC_CMD_RECALIBRATE    ; RECALIBRATE Command
.3962f5	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.3962f8	a5 00		lda $0300	                    LDA FDC_DRIVE
.3962fa	8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.3962fd	a9 02		lda #$02	                    LDA #2
.3962ff	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM           ; 2 parameters
.396302	9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT          ; 0 data
.396305	9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM          ; 0 results
.396308	22 b9 60 39	jsl $3960b9	                    JSL FDC_COMMAND             ; Issue the command
.39630c	90 04		bcc $396312	                    BCC pass_failure            ; If failure, pass the failure up
.39630e	28		plp		                    PLP
.39630f	2b		pld		                    PLD
.396310	38		sec		                    SEC
.396311	6b		rtl		                    RTL
.396312	28		plp		pass_failure        PLP
.396313	2b		pld		                    PLD
.396314	18		clc		                    CLC
.396315	6b		rtl		                    RTL
.396316					FDC_Sense_Int_Status
.396316	8b		phb		                    PHB
.396317	0b		phd		                    PHD
.396318	08		php		                    PHP
.396319	48		pha		                PHA             ; begin setdbr macro
.39631a	08		php		                PHP
.39631b	e2 20		sep #$20	                SEP #$20        ; set A short
.39631d	a9 00		lda #$00	                LDA #0
.39631f	48		pha		                PHA
.396320	ab		plb		                PLB
.396321	28		plp		                PLP
.396322	68		pla		                PLA             ; end setdbr macro
.396323	48		pha		                PHA             ; begin setdp macro
.396324	08		php		                PHP
.396325	c2 20		rep #$20	                REP #$20        ; set A long
.396327	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39632a	5b		tcd		                TCD
.39632b	28		plp		                PLP
.39632c	68		pla		                PLA             ; end setdp macro
.39632d	c2 30		rep #$30	                REP #$30        ; set A&X long
.39632f	a2 0a 00	ldx #$000a	                    LDX #10                            ; Wait for 10ms
.396332	22 18 16 39	jsl $391618	                    JSL ILOOP_MS
.396336	e2 20		sep #$20	                SEP #$20        ; set A short
.396338	64 06		stz $0306	                    STZ FDC_ST0                         ; Clear ST0
.39633a	a9 ff		lda #$ff	                    LDA #$FF
.39633c	85 0a		sta $030a	                    STA FDC_PCN                         ; Set PCN to some obviously bad value
.39633e	20 1a 60	jsr $39601a	                    JSR FDC_Check_CMD_BSY               ; Check I can send a command
.396341	90 30		bcc $396373	                    BCC time_out                        ; If there was a time out, raise an error
.396343	20 be 5f	jsr $395fbe	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.396346	90 2b		bcc $396373	                    BCC time_out                        ; If there was a time out, raise an error
.396348	a9 08		lda #$08	                    LDA #FDC_CMD_SENSE_INTERRUPT
.39634a	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.39634e	20 48 60	jsr $396048	                    JSR FDC_Can_Read_Data
.396351	90 20		bcc $396373	                    BCC time_out                        ; If there was a time out, raise an error
.396353	20 be 5f	jsr $395fbe	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.396356	90 1b		bcc $396373	                    BCC time_out                        ; If there was a time out, raise an error
.396358	af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.39635c	85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.39635e	20 be 5f	jsr $395fbe	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.396361	90 10		bcc $396373	                    BCC time_out                        ; If there was a time out, raise an error
.396363	af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.396367	85 0a		sta $030a	                    STA FDC_PCN                         ; --- Cylinder ---
.396369	e2 20		sep #$20	                SEP #$20        ; set A short
.39636b	9c 20 03	stz $0320	                    STZ @w BIOS_STATUS
.39636e	28		plp		                    PLP
.39636f	2b		pld		                    PLD
.396370	ab		plb		                    PLB
.396371	38		sec		                    SEC
.396372	6b		rtl		                    RTL
.396373					time_out
.396373	e2 20		sep #$20	                SEP #$20        ; set A short
.396375	a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT               ; Return a time out error
.396377	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.39637a	28		plp		                    PLP
.39637b	2b		pld		                    PLD
.39637c	ab		plb		                    PLB
.39637d	18		clc		                    CLC
.39637e	6b		rtl		                    RTL
.39637f					FDC_Specify_Command
.39637f	8b		phb		                    PHB
.396380	0b		phd		                    PHD
.396381	08		php		                    PHP
.396382	48		pha		                PHA             ; begin setdbr macro
.396383	08		php		                PHP
.396384	e2 20		sep #$20	                SEP #$20        ; set A short
.396386	a9 00		lda #$00	                LDA #0
.396388	48		pha		                PHA
.396389	ab		plb		                PLB
.39638a	28		plp		                PLP
.39638b	68		pla		                PLA             ; end setdbr macro
.39638c	48		pha		                PHA             ; begin setdp macro
.39638d	08		php		                PHP
.39638e	c2 20		rep #$20	                REP #$20        ; set A long
.396390	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396393	5b		tcd		                TCD
.396394	28		plp		                PLP
.396395	68		pla		                PLA             ; end setdp macro
.396396	c2 30		rep #$30	                REP #$30        ; set A&X long
.396398	a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.39639b	22 18 16 39	jsl $391618	                    JSL ILOOP_MS
.39639f	e2 20		sep #$20	                SEP #$20        ; set A short
.3963a1	20 1a 60	jsr $39601a	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.3963a4	90 26		bcc $3963cc	                    BCC time_out            ; If there was a time out, raise an error
.3963a6	20 be 5f	jsr $395fbe	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.3963a9	90 21		bcc $3963cc	                    BCC time_out            ; If there was a time out, raise an error
.3963ab	a9 03		lda #$03	                    LDA #FDC_CMD_SPECIFY    ; Specify Command
.3963ad	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.3963b1	20 be 5f	jsr $395fbe	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.3963b4	90 16		bcc $3963cc	                    BCC time_out            ; If there was a time out, raise an error
.3963b6	a9 cf		lda #$cf	                    LDA #$CF
.3963b8	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.3963bc	20 be 5f	jsr $395fbe	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.3963bf	90 0b		bcc $3963cc	                    BCC time_out            ; If there was a time out, raise an error
.3963c1	a9 01		lda #$01	                    LDA #$01                ; 1 = Non-DMA
.3963c3	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.3963c7	28		plp		                    PLP
.3963c8	2b		pld		                    PLD
.3963c9	ab		plb		                    PLB
.3963ca	38		sec		                    SEC
.3963cb	6b		rtl		                    RTL
.3963cc					time_out
.3963cc	e2 20		sep #$20	                SEP #$20        ; set A short
.3963ce	a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.3963d0	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.3963d3	28		plp		                    PLP
.3963d4	2b		pld		                    PLD
.3963d5	ab		plb		                    PLB
.3963d6	18		clc		                    CLC
.3963d7	6b		rtl		                    RTL
.3963d8					FDC_Configure_Command
.3963d8	8b		phb		                    PHB
.3963d9	0b		phd		                    PHD
.3963da	08		php		                    PHP
.3963db	48		pha		                PHA             ; begin setdbr macro
.3963dc	08		php		                PHP
.3963dd	e2 20		sep #$20	                SEP #$20        ; set A short
.3963df	a9 00		lda #$00	                LDA #0
.3963e1	48		pha		                PHA
.3963e2	ab		plb		                PLB
.3963e3	28		plp		                PLP
.3963e4	68		pla		                PLA             ; end setdbr macro
.3963e5	48		pha		                PHA             ; begin setdp macro
.3963e6	08		php		                PHP
.3963e7	c2 20		rep #$20	                REP #$20        ; set A long
.3963e9	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3963ec	5b		tcd		                TCD
.3963ed	28		plp		                PLP
.3963ee	68		pla		                PLA             ; end setdp macro
.3963ef	c2 30		rep #$30	                REP #$30        ; set A&X long
.3963f1	a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.3963f4	22 18 16 39	jsl $391618	                    JSL ILOOP_MS
.3963f8	e2 20		sep #$20	                SEP #$20        ; set A short
.3963fa	20 1a 60	jsr $39601a	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.3963fd	90 36		bcc $396435	                    BCC time_out            ; If there was a time out, raise an error
.3963ff	20 be 5f	jsr $395fbe	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.396402	90 31		bcc $396435	                    BCC time_out            ; If there was a time out, raise an error
.396404	a9 13		lda #$13	                    LDA #FDC_CMD_CONFIGURE  ; Specify Command
.396406	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.39640a	20 be 5f	jsr $395fbe	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.39640d	90 26		bcc $396435	                    BCC time_out            ; If there was a time out, raise an error
.39640f	a9 00		lda #$00	                    LDA #$00
.396411	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.396415	20 be 5f	jsr $395fbe	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.396418	90 1b		bcc $396435	                    BCC time_out            ; If there was a time out, raise an error
.39641a	a9 44		lda #$44	                    LDA #$44                ; Implied Seek, FIFOTHR = 4 byte
.39641c	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.396420	20 be 5f	jsr $395fbe	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.396423	90 10		bcc $396435	                    BCC time_out            ; If there was a time out, raise an error
.396425	a9 00		lda #$00	                    LDA #$00
.396427	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.39642b	20 1a 60	jsr $39601a	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.39642e	90 05		bcc $396435	                    BCC time_out            ; If there was a time out, raise an error
.396430	28		plp		                    PLP
.396431	2b		pld		                    PLD
.396432	ab		plb		                    PLB
.396433	38		sec		                    SEC
.396434	6b		rtl		                    RTL
.396435					time_out
.396435	e2 20		sep #$20	                SEP #$20        ; set A short
.396437	a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.396439	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.39643c	28		plp		                    PLP
.39643d	2b		pld		                    PLD
.39643e	ab		plb		                    PLB
.39643f	18		clc		                    CLC
.396440	6b		rtl		                    RTL
.396441					FDC_Read_ID_Command
.396441	8b		phb		                    PHB
.396442	0b		phd		                    PHD
.396443	08		php		                    PHP
.396444	48		pha		                PHA             ; begin setdbr macro
.396445	08		php		                PHP
.396446	e2 20		sep #$20	                SEP #$20        ; set A short
.396448	a9 00		lda #$00	                LDA #0
.39644a	48		pha		                PHA
.39644b	ab		plb		                PLB
.39644c	28		plp		                PLP
.39644d	68		pla		                PLA             ; end setdbr macro
.39644e	48		pha		                PHA             ; begin setdp macro
.39644f	08		php		                PHP
.396450	c2 20		rep #$20	                REP #$20        ; set A long
.396452	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396455	5b		tcd		                TCD
.396456	28		plp		                PLP
.396457	68		pla		                PLA             ; end setdp macro
.396458	e2 20		sep #$20	                SEP #$20        ; set A short
.39645a	a9 0a		lda #$0a	                    LDA #FDC_CMD_READ_ID                ; READID Command
.39645c	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.39645f	a9 01		lda #$01	                    LDA #1
.396461	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.396464	9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.396467	a9 07		lda #$07	                    LDA #7
.396469	8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.39646c	22 b9 60 39	jsl $3960b9	                    JSL FDC_COMMAND                     ; Issue the command
.396470	90 27		bcc $396499	                    BCC pass_failure
.396472	ad 10 05	lda $0510	                    LDA FDC_RESULTS
.396475	85 06		sta $0306	                    STA FDC_ST0                         ; Get ST0
.396477	ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.39647a	85 07		sta $0307	                    STA FDC_ST1                         ; Get ST1
.39647c	ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.39647f	85 08		sta $0308	                    STA FDC_ST2                         ; Get ST2
.396481	ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.396484	85 02		sta $0302	                    STA FDC_CYLINDER                    ; Get the cylinder
.396486	ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.396489	85 01		sta $0301	                    STA FDC_HEAD                        ; Get the head
.39648b	ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.39648e	85 0a		sta $030a	                    STA FDC_PCN                         ; Get the sector
.396490	ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.396493	85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; Get the sector size code
.396495	28		plp		                    PLP
.396496	2b		pld		                    PLD
.396497	ab		plb		                    PLB
.396498	6b		rtl		                    RTL
.396499	28		plp		pass_failure        PLP
.39649a	2b		pld		                    PLD
.39649b	ab		plb		                    PLB
.39649c	18		clc		                    CLC
.39649d	6b		rtl		                    RTL
.39649e					FDC_DumpReg_Command
.39649e	0b		phd		                    PHD
.39649f	08		php		                    PHP
.3964a0	e2 20		sep #$20	                SEP #$20        ; set A short
.3964a2	a9 0e		lda #$0e	                    LDA #FDC_CMD_DUMPREG                ; DUMPREG Command
.3964a4	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.3964a7	a9 01		lda #$01	                    LDA #1
.3964a9	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.3964ac	9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.3964af	a9 0a		lda #$0a	                    LDA #10
.3964b1	8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 10 results
.3964b4	22 b9 60 39	jsl $3960b9	                    JSL FDC_COMMAND                     ; Issue the command
.3964b8	90 03		bcc $3964bd	                    BCC pass_failure
.3964ba	28		plp		                    PLP
.3964bb	2b		pld		                    PLD
.3964bc	6b		rtl		                    RTL
.3964bd	28		plp		pass_failure        PLP
.3964be	2b		pld		                    PLD
.3964bf	18		clc		                    CLC
.3964c0	6b		rtl		                    RTL
.3964c1					FDC_Seek_Track
.3964c1	8b		phb		                    PHB
.3964c2	0b		phd		                    PHD
.3964c3	08		php		                    PHP
.3964c4	48		pha		                PHA             ; begin setdbr macro
.3964c5	08		php		                PHP
.3964c6	e2 20		sep #$20	                SEP #$20        ; set A short
.3964c8	a9 00		lda #$00	                LDA #0
.3964ca	48		pha		                PHA
.3964cb	ab		plb		                PLB
.3964cc	28		plp		                PLP
.3964cd	68		pla		                PLA             ; end setdbr macro
.3964ce	48		pha		                PHA             ; begin setdp macro
.3964cf	08		php		                PHP
.3964d0	c2 20		rep #$20	                REP #$20        ; set A long
.3964d2	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3964d5	5b		tcd		                TCD
.3964d6	28		plp		                PLP
.3964d7	68		pla		                PLA             ; end setdp macro
.3964d8	22 69 62 39	jsl $396269	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.3964dc	e2 20		sep #$20	                SEP #$20        ; set A short
.3964de	a9 0f		lda #$0f	                    LDA #FDC_CMD_SEEK                   ; Seek Command
.3964e0	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.3964e3	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.3964e5	29 01		and #$01	                    AND #$01
.3964e7	0a		asl a		                    ASL A
.3964e8	0a		asl a		                    ASL A
.3964e9	05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.3964eb	8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.3964ee	a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; And the track
.3964f0	8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.3964f3	a9 03		lda #$03	                    LDA #3
.3964f5	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 3 parameter (the command)
.3964f8	9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.3964fb	9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM                  ; 0 results
.3964fe	22 b9 60 39	jsl $3960b9	                    JSL FDC_COMMAND                     ; Issue the command
.396502	90 05		bcc $396509	                    BCC pass_failure
.396504	28		plp		                    PLP
.396505	2b		pld		                    PLD
.396506	ab		plb		                    PLB
.396507	38		sec		                    SEC
.396508	6b		rtl		                    RTL
.396509	28		plp		pass_failure        PLP
.39650a	2b		pld		                    PLD
.39650b	ab		plb		                    PLB
.39650c	18		clc		                    CLC
.39650d	6b		rtl		                    RTL
.39650e					FDC_Read_Sector
.39650e	8b		phb		                    PHB
.39650f	0b		phd		                    PHD
.396510	08		php		                    PHP
.396511	48		pha		                PHA             ; begin setdbr macro
.396512	08		php		                PHP
.396513	e2 20		sep #$20	                SEP #$20        ; set A short
.396515	a9 00		lda #$00	                LDA #0
.396517	48		pha		                PHA
.396518	ab		plb		                PLB
.396519	28		plp		                PLP
.39651a	68		pla		                PLA             ; end setdbr macro
.39651b	48		pha		                PHA             ; begin setdp macro
.39651c	08		php		                PHP
.39651d	c2 20		rep #$20	                REP #$20        ; set A long
.39651f	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396522	5b		tcd		                TCD
.396523	28		plp		                PLP
.396524	68		pla		                PLA             ; end setdp macro
.396525	22 69 62 39	jsl $396269	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.396529	e2 20		sep #$20	                SEP #$20        ; set A short
.39652b	a9 06		lda #$06	                    LDA #FDC_CMD_READ_DATA              ; The READ_DATA command
.39652d	09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.39652f	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.396532	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.396534	29 01		and #$01	                    AND #$01
.396536	0a		asl a		                    ASL A
.396537	0a		asl a		                    ASL A
.396538	05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.39653a	8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.39653d	a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.39653f	8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.396542	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.396544	8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.396547	a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.396549	8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.39654c	a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.39654e	8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.396551	a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.396553	8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.396556	a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.396558	8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.39655b	a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.39655d	8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.396560	a9 09		lda #$09	                    LDA #9
.396562	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.396565	a9 01		lda #$01	                    LDA #1
.396567	8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect data
.39656a	a9 07		lda #$07	                    LDA #7
.39656c	8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.39656f	22 b9 60 39	jsl $3960b9	command             JSL FDC_COMMAND                     ; Issue the command
.396573	08		php		                    PHP
.396574	ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.396577	85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ----
.396579	ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.39657c	85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ----
.39657e	ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.396581	85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ----
.396583	ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.396586	85 02		sta $0302	                    STA FDC_CYLINDER                    ; -- C ---
.396588	ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.39658b	85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.39658d	ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.396590	85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.396592	ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.396595	85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.396597	28		plp		                    PLP
.396598	90 04		bcc $39659e	                    BCC pass_failure
.39659a	28		plp		done                PLP
.39659b	2b		pld		                    PLD
.39659c	ab		plb		                    PLB
.39659d	6b		rtl		                    RTL
.39659e	28		plp		pass_failure        PLP
.39659f	2b		pld		                    PLD
.3965a0	ab		plb		                    PLB
.3965a1	18		clc		                    CLC
.3965a2	6b		rtl		                    RTL
.3965a3					FDC_Write_Sector
.3965a3	8b		phb		                    PHB
.3965a4	0b		phd		                    PHD
.3965a5	08		php		                    PHP
.3965a6	48		pha		                PHA             ; begin setdbr macro
.3965a7	08		php		                PHP
.3965a8	e2 20		sep #$20	                SEP #$20        ; set A short
.3965aa	a9 00		lda #$00	                LDA #0
.3965ac	48		pha		                PHA
.3965ad	ab		plb		                PLB
.3965ae	28		plp		                PLP
.3965af	68		pla		                PLA             ; end setdbr macro
.3965b0	48		pha		                PHA             ; begin setdp macro
.3965b1	08		php		                PHP
.3965b2	c2 20		rep #$20	                REP #$20        ; set A long
.3965b4	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3965b7	5b		tcd		                TCD
.3965b8	28		plp		                PLP
.3965b9	68		pla		                PLA             ; end setdp macro
.3965ba	e2 20		sep #$20	                SEP #$20        ; set A short
.3965bc	22 69 62 39	jsl $396269	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.3965c0	a9 05		lda #$05	                    LDA #FDC_CMD_WRITE_DATA             ; The WRITE_DATA command
.3965c2	09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.3965c4	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.3965c7	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.3965c9	29 01		and #$01	                    AND #$01
.3965cb	0a		asl a		                    ASL A
.3965cc	0a		asl a		                    ASL A
.3965cd	05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.3965cf	8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.3965d2	a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.3965d4	8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.3965d7	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.3965d9	8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.3965dc	a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.3965de	8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.3965e1	a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.3965e3	8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.3965e6	a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.3965e8	8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.3965eb	a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.3965ed	8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.3965f0	a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.3965f2	8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.3965f5	a9 09		lda #$09	                    LDA #9
.3965f7	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.3965fa	a9 ff		lda #$ff	                    LDA #$FF
.3965fc	8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect to write data
.3965ff	a9 07		lda #$07	                    LDA #7
.396601	8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.396604	22 b9 60 39	jsl $3960b9	command             JSL FDC_COMMAND                     ; Issue the command
.396608	08		php		                    PHP
.396609	ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.39660c	85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.39660e	ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.396611	85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ---
.396613	ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.396616	85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ---
.396618	ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.39661b	85 02		sta $0302	                    STA FDC_CYLINDER                    ; --- C ---
.39661d	ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.396620	85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.396622	ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.396625	85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.396627	ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.39662a	85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.39662c	28		plp		check_status        PLP
.39662d	90 04		bcc $396633	                    BCC pass_failure
.39662f	28		plp		done                PLP
.396630	2b		pld		                    PLD
.396631	ab		plb		                    PLB
.396632	6b		rtl		                    RTL
.396633	28		plp		pass_failure        PLP
.396634	2b		pld		                    PLD
.396635	ab		plb		                    PLB
.396636	18		clc		                    CLC
.396637	6b		rtl		                    RTL
.396638					DIVIDE32
.396638	da		phx		                    PHX
.396639	5a		phy		                    PHY
.39663a	0b		phd		                    PHD
.39663b	08		php		                    PHP
.39663c	48		pha		                PHA             ; begin setdp macro
.39663d	08		php		                PHP
.39663e	c2 20		rep #$20	                REP #$20        ; set A long
.396640	a9 0c 03	lda #$030c	                LDA #DIVIDEND         ; set DP to page 0
.396643	5b		tcd		                TCD
.396644	28		plp		                PLP
.396645	68		pla		                PLA             ; end setdp macro
.396646	c2 30		rep #$30	                REP #$30        ; set A&X long
.396648	64 08		stz $0314	                    STZ REMAINDER           ; Initialize the remainder
.39664a	64 0a		stz $0316	                    STZ REMAINDER+2
.39664c	a2 20 00	ldx #$0020	                    LDX #32                 ; Set the number of bits to process
.39664f	06 00		asl $030c	loop                ASL DIVIDEND
.396651	26 02		rol $030e	                    ROL DIVIDEND+2
.396653	26 08		rol $0314	                    ROL REMAINDER
.396655	26 0a		rol $0316	                    ROL REMAINDER+2
.396657	a5 08		lda $0314	                    LDA REMAINDER
.396659	38		sec		                    SEC
.39665a	e5 04		sbc $0310	                    SBC DIVISOR
.39665c	a8		tay		                    TAY
.39665d	a5 0a		lda $0316	                    LDA REMAINDER+2
.39665f	e5 06		sbc $0312	                    SBC DIVISOR+2
.396661	90 06		bcc $396669	                    BCC skip
.396663	85 0a		sta $0316	                    STA REMAINDER+2
.396665	84 08		sty $0314	                    STY REMAINDER
.396667	e6 00		inc $030c	                    INC DIVIDEND
.396669	ca		dex		skip                DEX
.39666a	d0 e3		bne $39664f	                    BNE loop
.39666c	28		plp		                    PLP
.39666d	2b		pld		                    PLD
.39666e	7a		ply		                    PLY
.39666f	fa		plx		                    PLX
.396670	60		rts		                    RTS
.396671					LBA2CHS
.396671	8b		phb		                    PHB
.396672	0b		phd		                    PHD
.396673	08		php		                    PHP
.396674	48		pha		                PHA             ; begin setdbr macro
.396675	08		php		                PHP
.396676	e2 20		sep #$20	                SEP #$20        ; set A short
.396678	a9 00		lda #$00	                LDA #0
.39667a	48		pha		                PHA
.39667b	ab		plb		                PLB
.39667c	28		plp		                PLP
.39667d	68		pla		                PLA             ; end setdbr macro
.39667e	48		pha		                PHA             ; begin setdp macro
.39667f	08		php		                PHP
.396680	c2 20		rep #$20	                REP #$20        ; set A long
.396682	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396685	5b		tcd		                TCD
.396686	28		plp		                PLP
.396687	68		pla		                PLA             ; end setdp macro
.396688	c2 30		rep #$30	                REP #$30        ; set A&X long
.39668a	a5 22		lda $0322	                    LDA BIOS_LBA
.39668c	85 0c		sta $030c	                    STA DIVIDEND
.39668e	a5 24		lda $0324	                    LDA BIOS_LBA+2
.396690	85 0e		sta $030e	                    STA DIVIDEND+2
.396692	a9 24 00	lda #$0024	                    LDA #36
.396695	85 10		sta $0310	                    STA DIVISOR
.396697	64 12		stz $0312	                    STZ DIVISOR+2
.396699	20 38 66	jsr $396638	                    JSR DIVIDE32
.39669c	e2 20		sep #$20	                SEP #$20        ; set A short
.39669e	a5 0c		lda $030c	                    LDA DIVIDEND
.3966a0	85 02		sta $0302	                    STA FDC_CYLINDER
.3966a2	c2 20		rep #$20	                REP #$20        ; set A long
.3966a4	a5 14		lda $0314	                    LDA REMAINDER
.3966a6	85 0c		sta $030c	                    STA DIVIDEND
.3966a8	a5 16		lda $0316	                    LDA REMAINDER+2
.3966aa	85 0e		sta $030e	                    STA DIVIDEND+2
.3966ac	a9 12 00	lda #$0012	                    LDA #18
.3966af	85 10		sta $0310	                    STA DIVISOR
.3966b1	64 12		stz $0312	                    STZ DIVISOR+2
.3966b3	20 38 66	jsr $396638	                    JSR DIVIDE32
.3966b6	e2 20		sep #$20	                SEP #$20        ; set A short
.3966b8	a5 0c		lda $030c	                    LDA DIVIDEND
.3966ba	29 01		and #$01	                    AND #$01
.3966bc	85 01		sta $0301	                    STA FDC_HEAD
.3966be	a5 14		lda $0314	                    LDA REMAINDER
.3966c0	1a		inc a		                    INC A
.3966c1	85 03		sta $0303	                    STA FDC_SECTOR
.3966c3	28		plp		                    PLP
.3966c4	2b		pld		                    PLD
.3966c5	ab		plb		                    PLB
.3966c6	6b		rtl		                    RTL
.3966c7					FDC_GETBLOCK
.3966c7	8b		phb		                    PHB
.3966c8	0b		phd		                    PHD
.3966c9	08		php		                    PHP
.3966ca	48		pha		                PHA             ; begin setdbr macro
.3966cb	08		php		                PHP
.3966cc	e2 20		sep #$20	                SEP #$20        ; set A short
.3966ce	a9 00		lda #$00	                LDA #0
.3966d0	48		pha		                PHA
.3966d1	ab		plb		                PLB
.3966d2	28		plp		                PLP
.3966d3	68		pla		                PLA             ; end setdbr macro
.3966d4	48		pha		                PHA             ; begin setdp macro
.3966d5	08		php		                PHP
.3966d6	c2 20		rep #$20	                REP #$20        ; set A long
.3966d8	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3966db	5b		tcd		                TCD
.3966dc	28		plp		                PLP
.3966dd	68		pla		                PLA             ; end setdp macro
.3966de	e2 20		sep #$20	                SEP #$20        ; set A short
.3966e0	a9 03		lda #$03	                    LDA #3                      ; We can retry 3 times
.3966e2	8d 34 05	sta $0534	                    STA FDC_CMD_RETRY
.3966e5	c2 30		rep #$30	                REP #$30        ; set A&X long
.3966e7	22 71 66 39	jsl $396671	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.3966eb	e2 20		sep #$20	                SEP #$20        ; set A short
.3966ed	a5 03		lda $0303	                    LDA FDC_SECTOR              ; Just make sure the sector is ok
.3966ef	f0 29		beq $39671a	                    BEQ read_failure
.3966f1					try_read
.3966f1	c2 20		rep #$20	                REP #$20        ; set A long
.3966f3	22 0e 65 39	jsl $39650e	                    JSL FDC_Read_Sector         ; Read the sector
.3966f7	90 14		bcc $39670d	                    BCC retry
.3966f9	e2 20		sep #$20	                SEP #$20        ; set A short
.3966fb	a5 06		lda $0306	                    LDA FDC_ST0
.3966fd	29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.3966ff	d0 19		bne $39671a	                    BNE read_failure
.396701					ret_success
.396701	e2 20		sep #$20	                SEP #$20        ; set A short
.396703	a9 00		lda #$00	                    LDA #0
.396705	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.396708	28		plp		                    PLP
.396709	2b		pld		                    PLD
.39670a	ab		plb		                    PLB
.39670b	38		sec		                    SEC
.39670c	6b		rtl		                    RTL
.39670d					retry
.39670d	e2 20		sep #$20	                SEP #$20        ; set A short
.39670f	ce 34 05	dec $0534	                    DEC FDC_CMD_RETRY           ; Decrement the retry counter
.396712	30 13		bmi $396727	                    BMI pass_failure            ; If it's gone negative, we should quit with an error
.396714	22 06 62 39	jsl $396206	                    JSL FDC_INIT                ; Otherwise, reinitialize the FDC
.396718	80 d7		bra $3966f1	                    BRA try_read                ; And try the read again
.39671a					read_failure
.39671a	e2 20		sep #$20	                SEP #$20        ; set A short
.39671c	a9 82		lda #$82	                    LDA #BIOS_ERR_READ
.39671e	80 04		bra $396724	                    BRA ret_failure
.396720					seek_failure
.396720	e2 20		sep #$20	                SEP #$20        ; set A short
.396722	a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.396724	8d 20 03	sta $0320	ret_failure         STA @w BIOS_STATUS
.396727	28		plp		pass_failure        PLP
.396728	2b		pld		                    PLD
.396729	ab		plb		                    PLB
.39672a	18		clc		                    CLC
.39672b	6b		rtl		                    RTL
.39672c					FDC_PUTBLOCK
.39672c	8b		phb		                    PHB
.39672d	0b		phd		                    PHD
.39672e	08		php		                    PHP
.39672f	48		pha		                PHA             ; begin setdbr macro
.396730	08		php		                PHP
.396731	e2 20		sep #$20	                SEP #$20        ; set A short
.396733	a9 00		lda #$00	                LDA #0
.396735	48		pha		                PHA
.396736	ab		plb		                PLB
.396737	28		plp		                PLP
.396738	68		pla		                PLA             ; end setdbr macro
.396739	48		pha		                PHA             ; begin setdp macro
.39673a	08		php		                PHP
.39673b	c2 20		rep #$20	                REP #$20        ; set A long
.39673d	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396740	5b		tcd		                TCD
.396741	28		plp		                PLP
.396742	68		pla		                PLA             ; end setdp macro
.396743	e2 20		sep #$20	                SEP #$20        ; set A short
.396745	a9 03		lda #$03	                    LDA #3                      ; Set the number of retries we're willing to do
.396747	8d 34 05	sta $0534	                    STA @w FDC_CMD_RETRY
.39674a	c2 30		rep #$30	                REP #$30        ; set A&X long
.39674c	22 71 66 39	jsl $396671	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.396750	22 a3 65 39	jsl $3965a3	retry               JSL FDC_Write_Sector        ; Write the sector
.396754	b0 03		bcs $396759	                    BCS chk_st0
.396756	82 28 00	brl $396781	                    BRL attempt_retry
.396759					chk_st0
.396759	e2 20		sep #$20	                SEP #$20        ; set A short
.39675b	a5 06		lda $0306	                    LDA FDC_ST0
.39675d	29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.39675f	d0 0c		bne $39676d	                    BNE write_failure
.396761					ret_success
.396761	e2 20		sep #$20	                SEP #$20        ; set A short
.396763	a9 00		lda #$00	                    LDA #0
.396765	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.396768	28		plp		                    PLP
.396769	2b		pld		                    PLD
.39676a	ab		plb		                    PLB
.39676b	38		sec		                    SEC
.39676c	6b		rtl		                    RTL
.39676d					write_failure
.39676d	e2 20		sep #$20	                SEP #$20        ; set A short
.39676f	a5 07		lda $0307	                    LDA FDC_ST1                         ; Check ST1 for write protect
.396771	89 02		bit #$02	                    BIT #FDC_ST1_NW
.396773	f0 04		beq $396779	                    BEQ generic_err
.396775	a9 86		lda #$86	                    LDA #BIOS_ERR_WRITEPROT             ; Yes: return a write-protect error
.396777	80 17		bra $396790	                    BRA ret_failure
.396779	89 10		bit #$10	generic_err         BIT #FDC_ST1_OR                     ; TODO: properly handle over/under run errors
.39677b	d0 e4		bne $396761	                    BNE ret_success
.39677d	89 80		bit #$80	                    BIT #FDC_ST1_EN                     ; TODO: properly handle end-of-track
.39677f	d0 e0		bne $396761	                    BNE ret_success
.396781					attempt_retry
.396781	e2 20		sep #$20	                SEP #$20        ; set A short
.396783	ce 34 05	dec $0534	                    DEC @w FDC_CMD_RETRY                ; Count down the retries
.396786	d0 c8		bne $396750	                    BNE retry                           ; And retry unless we have none left
.396788	a9 83		lda #$83	                    LDA #BIOS_ERR_WRITE                 ; Otherwise: return a generic write error
.39678a	80 04		bra $396790	                    BRA ret_failure
.39678c					seek_failure
.39678c	e2 20		sep #$20	                SEP #$20        ; set A short
.39678e	a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.396790					ret_failure
.396790	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.396793	28		plp		pass_failure        PLP
.396794	2b		pld		                    PLD
.396795	ab		plb		                    PLB
.396796	18		clc		                    CLC
.396797	6b		rtl		                    RTL
.396798					FDC_MOUNT
.396798	8b		phb		                    PHB
.396799	0b		phd		                    PHD
.39679a	08		php		                    PHP
.39679b	48		pha		                PHA             ; begin setdbr macro
.39679c	08		php		                PHP
.39679d	e2 20		sep #$20	                SEP #$20        ; set A short
.39679f	a9 00		lda #$00	                LDA #0
.3967a1	48		pha		                PHA
.3967a2	ab		plb		                PLB
.3967a3	28		plp		                PLP
.3967a4	68		pla		                PLA             ; end setdbr macro
.3967a5	48		pha		                PHA             ; begin setdp macro
.3967a6	08		php		                PHP
.3967a7	c2 20		rep #$20	                REP #$20        ; set A long
.3967a9	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3967ac	5b		tcd		                TCD
.3967ad	28		plp		                PLP
.3967ae	68		pla		                PLA             ; end setdp macro
.3967af	22 06 62 39	jsl $396206	                    JSL FDC_INIT
.3967b3	e2 20		sep #$20	                SEP #$20        ; set A short
.3967b5	c2 10		rep #$10	                REP #$10        ; set X long
.3967b7	a9 00		lda #$00	                    LDA #0
.3967b9	a2 00 00	ldx #$0000	                    LDX #0
.3967bc	9f 00 a3 38	sta $38a300,x	zero_loop           STA DOS_SECTOR,X
.3967c0	e8		inx		                    INX
.3967c1	e0 00 02	cpx #$0200	                    CPX #512
.3967c4	d0 f6		bne $3967bc	                    BNE zero_loop
.3967c6	a9 00		lda #$00	                    LDA #0                                  ; We only support drive 0
.3967c8	85 00		sta $0300	                    STA FDC_DRIVE
.3967ca	22 82 62 39	jsl $396282	                    JSL FDC_Motor_On                        ; Turn the motor on
.3967ce	c2 30		rep #$30	                REP #$30        ; set A&X long
.3967d0	a9 00 00	lda #$0000	                    LDA #0                                  ; We want sector 0
.3967d3	85 22		sta $0322	                    STA BIOS_LBA
.3967d5	85 24		sta $0324	                    STA BIOS_LBA+2
.3967d7	a9 00 a3	lda #$a300	                    LDA #<>DOS_SECTOR                       ; And load it into DOS_SECTOR
.3967da	85 26		sta $0326	                    STA BIOS_BUFF_PTR
.3967dc	a9 38 00	lda #$0038	                    LDA #`DOS_SECTOR
.3967df	85 28		sta $0328	                    STA BIOS_BUFF_PTR+2
.3967e1	22 c7 66 39	jsl $3966c7	                    JSL FDC_GETBLOCK                        ; Attempt to read the data
.3967e5	b0 03		bcs $3967ea	                    BCS parse_boot                          ; If ok: start parsing the boot record
.3967e7	82 d3 00	brl $3968bd	                    BRL pass_failure                        ; Pass the error up the chain
.3967ea					parse_boot
.3967ea	e2 20		sep #$20	                SEP #$20        ; set A short
.3967ec	a9 00		lda #$00	                    LDA #PART_TYPE_FAT12                    ; Set the file system to FAT12
.3967ee	8f 01 a0 38	sta $38a001	                    STA @l FILE_SYSTEM
.3967f2	a9 00		lda #$00	                    LDA #0                                  ; There are no partitions on the disk
.3967f4	8f 02 a0 38	sta $38a002	                    STA @l PARTITION
.3967f8	e2 20		sep #$20	                SEP #$20        ; set A short
.3967fa	af 0d a3 38	lda $38a30d	                    LDA DOS_SECTOR+BPB_SECPERCLUS12_OFF     ; Get the # of sectors per cluster (usually 1)
.3967fe	8f 03 a0 38	sta $38a003	                    STA @l SECTORS_PER_CLUSTER
.396802	c2 20		rep #$20	                REP #$20        ; set A long
.396804	a9 00 00	lda #$0000	                    LDA #0                                  ; First sector of the "partition" is 0
.396807	8f 04 a0 38	sta $38a004	                    STA @l FIRSTSECTOR
.39680b	8f 06 a0 38	sta $38a006	                    STA @l FIRSTSECTOR+2
.39680f	af 16 a3 38	lda $38a316	                    LDA DOS_SECTOR+BPB_SECPERFAT12_OFF      ; Get the number of sectors per FAT
.396813	8f 10 a0 38	sta $38a010	                    STA @l SEC_PER_FAT
.396817	a9 00 00	lda #$0000	                    LDA #0
.39681a	8f 12 a0 38	sta $38a012	                    STA @l SEC_PER_FAT+2
.39681e	a9 01 00	lda #$0001	                    LDA #1                                  ; FAT#1 begins at sector 1
.396821	8f 14 a0 38	sta $38a014	                    STA @l FAT_BEGIN_LBA
.396825	18		clc		                    CLC
.396826	6f 10 a0 38	adc $38a010	                    ADC @l SEC_PER_FAT
.39682a	8f 18 a0 38	sta $38a018	                    STA @l FAT2_BEGIN_LBA                   ; FAT#2 begins SEC_PER_FAT sectors later
.39682e	a9 00 00	lda #$0000	                    LDA #0
.396831	8f 16 a0 38	sta $38a016	                    STA @l FAT_BEGIN_LBA+2
.396835	8f 1a a0 38	sta $38a01a	                    STA @L FAT2_BEGIN_LBA+2
.396839	18		clc		                    CLC                                     ; Calculate the root directory's starting sector
.39683a	af 18 a0 38	lda $38a018	                    LDA @l FAT2_BEGIN_LBA
.39683e	6f 10 a0 38	adc $38a010	                    ADC @l SEC_PER_FAT
.396842	8f 20 a0 38	sta $38a020	                    STA @l ROOT_DIR_FIRST_CLUSTER           ; ROOT_DIR_FIRST_CLUSTER will be a sector LBA for FAT12!
.396846	a9 00 00	lda #$0000	                    LDA #0
.396849	8f 22 a0 38	sta $38a022	                    STA @l ROOT_DIR_FIRST_CLUSTER+2
.39684d	af 11 a3 38	lda $38a311	                    LDA DOS_SECTOR+BPB_ROOT_MAX_ENTRY12_OFF ; Get the maximum number of directory entries for the root dir
.396851	8f 24 a0 38	sta $38a024	                    STA @l ROOT_DIR_MAX_ENTRY
.396855	4a		lsr a		                    LSR A                                   ; 16 entries per sector
.396856	4a		lsr a		                    LSR A
.396857	4a		lsr a		                    LSR A
.396858	4a		lsr a		                    LSR A                                   ; So now A is the number of sectors in the root directory
.396859	18		clc		                    CLC
.39685a	6f 20 a0 38	adc $38a020	                    ADC @L ROOT_DIR_FIRST_CLUSTER           ; Add that to the first sector LBA for the root directory
.39685e	8f 1c a0 38	sta $38a01c	                    STA @l CLUSTER_BEGIN_LBA                ; And that is the LBA for the first cluster
.396862	a9 00 00	lda #$0000	                    LDA #0
.396865	8f 1e a0 38	sta $38a01e	                    STA @l CLUSTER_BEGIN_LBA+2
.396869	af 13 a3 38	lda $38a313	                    LDA DOS_SECTOR+BPB_TOTAL_SECTORS        ; Set the sector limit
.39686d	8f 08 a0 38	sta $38a008	                    STA @l SECTORCOUNT
.396871	a9 00 00	lda #$0000	                    LDA #0
.396874	8f 0a a0 38	sta $38a00a	                    STA @l SECTORCOUNT+2
.396878	af 0e a3 38	lda $38a30e	                    LDA DOS_SECTOR+BPB_RSRVCLUS_OFF         ; Get the number of reserved clusters
.39687c	8f 0c a0 38	sta $38a00c	                    STA @l NUM_RSRV_SEC
.396880	a9 00 02	lda #$0200	                    LDA #DOS_SECTOR_SIZE                    ; Set the size of a FAT12 cluster
.396883	8f 0e a0 38	sta $38a00e	                    STA @l CLUSTER_SIZE
.396887	e2 20		sep #$20	                SEP #$20        ; set A short
.396889	af 26 a3 38	lda $38a326	                    LDA DOS_SECTOR+BPB_SIGNATUREB           ; Is signature B $29?
.39688d	c9 29		cmp #$29	                    CMP #BPB_EXTENDED_RECORD
.39688f	80 14		bra $3968a5	                    BRA no_volume_id                        ; No: there is no volume ID
.396891					is_extended
.396891	c2 20		rep #$20	                REP #$20        ; set A long
.396893	af 27 a3 38	lda $38a327	                    LDA DOS_SECTOR+BPB_VOLUMEID             ; Yes: set the volume ID
.396897	8f 26 a0 38	sta $38a026	                    STA @l VOLUME_ID
.39689b	af 29 a3 38	lda $38a329	                    LDA DOS_SECTOR+BPB_VOLUMEID+2
.39689f	8f 28 a0 38	sta $38a028	                    STA @l VOLUME_ID+2
.3968a3	80 0d		bra $3968b2	                    BRA ret_success
.3968a5					no_volume_id
.3968a5	c2 20		rep #$20	                REP #$20        ; set A long
.3968a7	a9 00 00	lda #$0000	                    LDA #0                                  ; No: blank the Volume ID
.3968aa	8f 26 a0 38	sta $38a026	                    STA @l VOLUME_ID
.3968ae	8f 28 a0 38	sta $38a028	                    STA @L VOLUME_ID+2
.3968b2					ret_success
.3968b2	e2 20		sep #$20	                SEP #$20        ; set A short
.3968b4	a9 00		lda #$00	                    LDA #0
.3968b6	85 20		sta $0320	                    STA BIOS_STATUS
.3968b8	28		plp		                    PLP
.3968b9	2b		pld		                    PLD
.3968ba	ab		plb		                    PLB
.3968bb	38		sec		                    SEC
.3968bc	6b		rtl		                    RTL
.3968bd	28		plp		pass_failure        PLP
.3968be	2b		pld		                    PLD
.3968bf	ab		plb		                    PLB
.3968c0	18		clc		                    CLC
.3968c1	6b		rtl		                    RTL
.3968c2					FDC_CMDBLOCK
.3968c2	8b		phb		                    PHB
.3968c3	0b		phd		                    PHD
.3968c4	08		php		                    PHP
.3968c5	48		pha		                PHA             ; begin setdbr macro
.3968c6	08		php		                PHP
.3968c7	e2 20		sep #$20	                SEP #$20        ; set A short
.3968c9	a9 00		lda #$00	                LDA #0
.3968cb	48		pha		                PHA
.3968cc	ab		plb		                PLB
.3968cd	28		plp		                PLP
.3968ce	68		pla		                PLA             ; end setdbr macro
.3968cf	48		pha		                PHA             ; begin setdp macro
.3968d0	08		php		                PHP
.3968d1	c2 20		rep #$20	                REP #$20        ; set A long
.3968d3	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3968d6	5b		tcd		                TCD
.3968d7	28		plp		                PLP
.3968d8	68		pla		                PLA             ; end setdp macro
.3968d9	e2 30		sep #$30	                SEP #$30        ; set A&X short
.3968db	e0 01		cpx #$01	                    CPX #FDC_DEVCMD_MOTOR_ON
.3968dd	f0 0f		beq $3968ee	                    BEQ motor_on
.3968df	e0 02		cpx #$02	                    CPX #FDC_DEVCMD_MOTOR_OFF
.3968e1	f0 11		beq $3968f4	                    BEQ motor_off
.3968e3	e0 03		cpx #$03	                    CPX #FDC_DEVCMD_RECAL
.3968e5	f0 13		beq $3968fa	                    BEQ recalibrate
.3968e7	64 20		stz $0320	ret_success         STZ BIOS_STATUS
.3968e9	28		plp		                    PLP
.3968ea	2b		pld		                    PLD
.3968eb	ab		plb		                    PLB
.3968ec	38		sec		                    SEC
.3968ed	6b		rtl		                    RTL
.3968ee	22 82 62 39	jsl $396282	motor_on            JSL FDC_Motor_On
.3968f2	80 f3		bra $3968e7	                    BRA ret_success
.3968f4	22 b6 62 39	jsl $3962b6	motor_off           JSL FDC_Motor_Off
.3968f8	80 ed		bra $3968e7	                    BRA ret_success
.3968fa	22 e1 62 39	jsl $3962e1	recalibrate         JSL FDC_Recalibrate_Command
.3968fe	b0 e7		bcs $3968e7	                    BCS ret_success
.396900	28		plp		pass_failure        PLP
.396901	2b		pld		                    PLD
.396902	ab		plb		                    PLB
.396903	18		clc		                    CLC
.396904	6b		rtl		                    RTL
.396905					FDC_CHK_MEDIA
.396905	0b		phd		                    PHD
.396906	08		php		                    PHP
.396907	48		pha		                PHA             ; begin setdp macro
.396908	08		php		                PHP
.396909	c2 20		rep #$20	                REP #$20        ; set A long
.39690b	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39690e	5b		tcd		                TCD
.39690f	28		plp		                PLP
.396910	68		pla		                PLA             ; end setdp macro
.396911	22 82 62 39	jsl $396282	                    JSL FDC_Motor_On                ; Turn on the motor
.396915	e2 20		sep #$20	                SEP #$20        ; set A short
.396917	af f7 13 af	lda $af13f7	                    LDA @l SIO_FDC_DIR              ; Check if the DSKCHG bit is set
.39691b	89 80		bit #$80	                    BIT #FDC_DIR_DSKCHG
.39691d	f0 42		beq $396961	                    BEQ ret_true                    ; If not: assume the disk is present
.39691f	a9 00		lda #$00	                    LDA #0
.396921	85 00		sta $0300	                    STA FDC_DRIVE
.396923	a9 00		lda #$00	                    LDA #0
.396925	85 01		sta $0301	                    STA FDC_HEAD
.396927	a9 50		lda #$50	                    LDA #80
.396929	85 02		sta $0302	                    STA FDC_CYLINDER
.39692b	22 c1 64 39	jsl $3964c1	                    JSL FDC_Seek_Track              ; Attempt to seek to track 80
.39692f	90 34		bcc $396965	                    BCC ret_false                   ; If fail: return false
.396931	c2 10		rep #$10	                REP #$10        ; set X long
.396933	a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.396936	a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.396939	22 25 16 39	jsl $391625	                    JSL IDELAY
.39693d	22 16 63 39	jsl $396316	                    JSL FDC_Sense_Int_Status
.396941	a5 06		lda $0306	                    LDA FDC_ST0
.396943	29 d0		and #$d0	                    AND #%11010000
.396945	d0 1e		bne $396965	                    BNE ret_false
.396947	22 e1 62 39	jsl $3962e1	                    JSL FDC_Recalibrate_Command     ; Attempt to recalibrate
.39694b	90 18		bcc $396965	                    BCC ret_false                   ; If fail: return false
.39694d	a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.396950	a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.396953	22 25 16 39	jsl $391625	                    JSL IDELAY
.396957	22 16 63 39	jsl $396316	                    JSL FDC_Sense_Int_Status
.39695b	a5 06		lda $0306	                    LDA FDC_ST0
.39695d	29 d0		and #$d0	                    AND #%11010000
.39695f	d0 04		bne $396965	                    BNE ret_false
.396961					ret_true
.396961	28		plp		                    PLP
.396962	2b		pld		                    PLD
.396963	38		sec		                    SEC
.396964	6b		rtl		                    RTL
.396965					ret_false
.396965	28		plp		                    PLP
.396966	2b		pld		                    PLD
.396967	18		clc		                    CLC
.396968	6b		rtl		                    RTL
.396969					FDC_WRITEVBR
.396969	8b		phb		                    PHB
.39696a	0b		phd		                    PHD
.39696b	08		php		                    PHP
.39696c	48		pha		                PHA             ; begin setdbr macro
.39696d	08		php		                PHP
.39696e	e2 20		sep #$20	                SEP #$20        ; set A short
.396970	a9 00		lda #$00	                LDA #0
.396972	48		pha		                PHA
.396973	ab		plb		                PLB
.396974	28		plp		                PLP
.396975	68		pla		                PLA             ; end setdbr macro
.396976	48		pha		                PHA             ; begin setdp macro
.396977	08		php		                PHP
.396978	c2 20		rep #$20	                REP #$20        ; set A long
.39697a	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39697d	5b		tcd		                TCD
.39697e	28		plp		                PLP
.39697f	68		pla		                PLA             ; end setdp macro
.396980	22 98 67 39	jsl $396798	                    JSL FDC_MOUNT               ; Mount the floppy disk
.396984	c2 30		rep #$30	                REP #$30        ; set A&X long
.396986	a9 00 00	lda #$0000	                    LDA #0                      ; Clear the sector buffer
.396989	a2 00 00	ldx #$0000	                    LDX #0
.39698c	9f 00 a3 38	sta $38a300,x	clr_loop            STA DOS_SECTOR,X
.396990	e8		inx		                    INX
.396991	e8		inx		                    INX
.396992	e0 00 02	cpx #$0200	                    CPX #512
.396995	d0 f5		bne $39698c	                    BNE clr_loop
.396997	e2 20		sep #$20	                SEP #$20        ; set A short
.396999	a2 00 00	ldx #$0000	                    LDX #0                      ; Copy the prototype VBR to the sector buffer
.39699c	bf ff 69 39	lda $3969ff,x	copy_loop           LDA FDC_VBR_BEGIN,X
.3969a0	9f 00 a3 38	sta $38a300,x	                    STA DOS_SECTOR,X
.3969a4	e8		inx		                    INX
.3969a5	e0 c9 00	cpx #$00c9	                    CPX #<>(FDC_VBR_END - FDC_VBR_BEGIN + 1)
.3969a8	d0 f2		bne $39699c	                    BNE copy_loop
.3969aa	a0 00 00	ldy #$0000	                    LDY #0                      ; Copy the boot binary path to the VBR
.3969ad	a2 40 00	ldx #$0040	                    LDX #FDC_VBR_PATH
.3969b0	b7 3c		lda [$035c],y	path_copy_loop      LDA [DOS_RUN_PTR],Y
.3969b2	9f 00 a3 38	sta $38a300,x	                    STA DOS_SECTOR,X
.3969b6	f0 07		beq $3969bf	                    BEQ path_copy_done
.3969b8	e8		inx		                    INX
.3969b9	c8		iny		                    INY
.3969ba	c0 80 00	cpy #$0080	                    CPY #128
.3969bd	d0 f1		bne $3969b0	                    BNE path_copy_loop
.3969bf					path_copy_done
.3969bf	c2 20		rep #$20	                REP #$20        ; set A long
.3969c1	a9 55 aa	lda #$aa55	                    LDA #$AA55                  ; Set the VBR signature bytes at the end
.3969c4	8f fe a4 38	sta $38a4fe	                    STA DOS_SECTOR+BPB_SIGNATURE
.3969c8	c2 20		rep #$20	                REP #$20        ; set A long
.3969ca	a9 00 a3	lda #$a300	                    LDA #<>DOS_SECTOR           ; Point to the BIOS buffer
.3969cd	85 06		sta $0326	                    STA BIOS_BUFF_PTR
.3969cf	a9 38 00	lda #$0038	                    LDA #`DOS_SECTOR
.3969d2	85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.3969d4	a9 00 00	lda #$0000	                    LDA #0                      ; Set the sector to #0 (boot record)
.3969d7	85 02		sta $0322	                    STA BIOS_LBA
.3969d9	85 04		sta $0324	                    STA BIOS_LBA+2
.3969db	e2 20		sep #$20	                SEP #$20        ; set A short
.3969dd	a9 00		lda #$00	                    LDA #BIOS_DEV_FDC
.3969df	85 01		sta $0321	                    STA BIOS_DEV
.3969e1	22 24 10 38	jsl $381024	                    JSL PUTBLOCK                ; Attempt to write the boot record
.3969e5	b0 09		bcs $3969f0	                    BCS ret_success
.3969e7	22 b6 62 39	jsl $3962b6	                    JSL FDC_Motor_Off
.3969eb	28		plp		                    PLP                         ; Return the failure
.3969ec	2b		pld		                    PLD
.3969ed	ab		plb		                    PLB
.3969ee	18		clc		                    CLC
.3969ef	6b		rtl		                    RTL
.3969f0	22 b6 62 39	jsl $3962b6	ret_success         JSL FDC_Motor_Off
.3969f4	e2 20		sep #$20	                SEP #$20        ; set A short
.3969f6	a9 00		lda #$00	                    LDA #0
.3969f8	85 00		sta $0320	                    STA BIOS_STATUS
.3969fa	28		plp		                    PLP
.3969fb	2b		pld		                    PLD
.3969fc	ab		plb		                    PLB
.3969fd	38		sec		                    SEC
.3969fe	6b		rtl		                    RTL
=62					FDC_BOOT_START = 62                         ; Entry point to the boot code
=64					FDC_VBR_PATH = 64                           ; Offset to the path in the VBR
.3969ff					FDC_VBR_BEGIN
>3969ff	eb 00 90			start               .byte $EB, $00, $90     ; Entry point
>396a02	43 32 35 36 44 4f 53 20		magic               .text "C256DOS "        ; OEM name / magic text for booting
>396a0a	00 02				bytes_per_sec       .word 512               ; How many bytes per sector
>396a0c	01				sec_per_cluster     .byte 1                 ; How many sectors per cluster
>396a0d	01 00				rsrv_sectors        .word 1                 ; Number of reserved sectors
>396a0f	02				num_fat             .byte 2                 ; Number of FATs
>396a10	e0 00				max_dir_entry       .word (32-18)*16        ; Total number of root dir entries
>396a12	40 0b				total_sectors       .word 2880              ; Total sectors
>396a14	f0				media_descriptor    .byte $F0               ; 3.5" 1.44 MB floppy 80 tracks, 18 tracks per sector
>396a15	09 00				sec_per_fat         .word 9                 ; Sectors per FAT
>396a17	12 00				sec_per_track       .word 18                ; Sectors per track
>396a19	02 00				num_head            .word 2                 ; Number of heads
>396a1b	00 00 00 00			ignore2             .dword 0
>396a1f	00 00 00 00			fat32_sector        .dword 0                ; # of sectors in FAT32
>396a23	00 00				ignore3             .word 0
>396a25	29				boot_signature      .byte $29
>396a26	78 56 34 12			volume_id           .dword $12345678        ; Replaced by code
>396a2a	55 4e 54 49 54 4c 45 44		volume_name         .text "UNTITLED   "     ; Replace by code
>396a32	20 20 20
>396a35	46 41 54 31 32 20 20 20		fs_type             .text "FAT12   "
.396a3d	80 40		bra $396a7f	                    BRA vbr_start
>396a3f					file_path           .fill 64                ; Reserve 64 bytes for a path and any options
.396a7f					vbr_start
.396a7f	c2 20		rep #$20	                REP #$20        ; set A long
.396a81	a9 40 a3	lda #$a340	                    LDA #<>(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.396a84	8f 60 03 00	sta $000360	                    STA @l DOS_RUN_PARAM
.396a88	a9 38 00	lda #$0038	                    LDA #`(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.396a8b	8f 62 03 00	sta $000362	                    STA @l DOS_RUN_PARAM+2
.396a8f	22 7e 59 39	jsl $39597e	                    JSL IF_RUN              ; And try to execute the binary file
.396a93	b0 0c		bcs $396aa1	                    BCS lock                ; If it returned success... lock up... I guess?
.396a95					error
.396a95	e2 20		sep #$20	                SEP #$20        ; set A short
.396a97	4b		phk		                    PHK                     ; Otherwise, print an error message
.396a98	ab		plb		                    PLB
.396a99	62 08 00	per $396aa4	                    PER message
.396a9c	fa		plx		                    PLX
.396a9d	22 1c 10 38	jsl $38101c	                    JSL PUTS
.396aa1	ea		nop		lock                NOP                     ; And lock up
.396aa2	80 fd		bra $396aa1	                    BRA lock
>396aa4	43 6f 75 6c 64 20 6e 6f		message             .null "Could not find a bootable binary.",13
>396aac	74 20 66 69 6e 64 20 61 20 62 6f 6f 74 61 62 6c
>396abc	65 20 62 69 6e 61 72 79 2e 0d 00
.396ac7					FDC_VBR_END

;******  Return to file: src\kernel.asm


;******  Processing file: src\ide_library.asm

.0000					IDE_ID
>0000	00 00				General_Config        .word $0000
>0002	00 00				Obsolete0             .word $0000
>0004	00 00				Specific_Config       .word $0000
>0006	00 00				Obsolete1             .word $0000
>0008	00 00				Retired0              .word $0000
>000a	00 00				Retired1              .word $0000
>000c	00 00				Obsolete2             .word $0000
>000e	00 00				Reserved_CFlash0      .word $0000
>0010	00 00				Reserved_CFlash1      .word $0000
>0012	00 00				Retired2              .word $0000
>0014	00 00 00 00 00 00 00 00		Serial_Number_String  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>001c	00 00 00 00 00 00 00 00 00 00 00 00
>0028	00 00 00 00			Retired3              .word $0000, $0000
>002c	00 00				Obsolete3             .word $0000
>002e	00 00 00 00 00 00 00 00		Firmware_Rev_String   .byte $00, $00, $00, $00, $00, $00, $00, $00
>0036	00 00 00 00 00 00 00 00		Model_Number_String   .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>003e	00 00 00 00 00 00 00 00
>0046	00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>004e	00 00 00 00 00 00 00 00
>0056	00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00
>005e	00 00				Max_Number_Logic_Sec  .word $0000
>0060	00 00				Trusted_Comp_Feature  .word $0000
>0062	00 00 00 00			Capabilities          .word $0000, $0000
>0066	00 00 00 00			Obsolete4             .word $0000, $0000
>006a	00 00				Free_Fall_Control     .word $0000
>006c	00 00 00 00 00 00 00 00		Obsolete5             .word $0000, $0000, $0000, $0000, $0000
>0074	00 00
>0076	00 00				Reserved0             .word $0000
>0078	00 00 00 00			Total_Addy_Logic_Sec  .word $0000, $0000
>007c	00 00				Obsolete6             .word $0000
>007e	00 00 00 00			Reserved1             .word $0000, $0000
>0082	00 00				Min_Multiword_DMA_Trf .word $0000
>0084	00 00				Manu_Recommended_Mult .word $0000
>0086	00 00				Min_PIO_Trf           .word $0000      ; Word 67
>0088	00 00				Min_PIO_Trf_with_IORD .word $0000      ; Word 68
>008a	00 00 00 00			Reserved2             .word $0000, $0000
>008e	00 00 00 00 00 00 00 00		Reserved3             .word $0000, $0000, $0000, $0000
>0096	00 00				Queue_Dept            .word $0000
>0098	00 00				SATA_Capabilities     .word $0000
>009a	00 00				Reserved_SATA         .word $0000
>009c	00 00				Sup_Feat_SATA         .word $0000
>009e	00 00				Sup_Feat_SATA_Enabled .word $0000    ; Word 79
>00a0	00 00				Major_Version_Number  .word $0000    ; Word 80
>00a2	00 00				Minor_Version_Number  .word $0000    ; Word 81
>00a4	00 00 00 00 00 00 00 00		Cmd_And_Features_Sup  .word $0000, $0000, $0000, $0000, $0000, $0000
>00ac	00 00 00 00
>00b0	00 00				UDMA_Modes            .word $0000
>00b2	00 00 00 00			Reserved4             .word $0000, $0000 ; Word 89
>00b6	00 00				Current_APM_Level     .word $0000
>00b8	00 00				Master_Password_Ident .word $0000
>00ba	00 00				Hardware_Reset_Result .word $0000
>00bc	00 00				Current_AAM_Value     .word $0000  ; Word 94
>00be	00 00				Stream_Min_Req_Size   .word $0000  ; Word 95
>00c0	00 00				Stream_Trf_Time_DMA   .word $0000  ; Word 96
>00c2	00 00				Stream_Access_Lat     .word $0000
>00c4	00 00 00 00			Streaming_Perf_Gran   .word $0000, $0000
>00c8	00 00 00 00 00 00 00 00		Tot_Num_Add_Logic_Sec .word $0000, $0000, $0000, $0000
>00d0	00 00				Streaming_Trf_Time    .word $0000 ; Word 104
>00d2	00 00				Reserved5             .word $0000 ; Word 105
.396ac7					IDE_TEST
.396ac7	08		php		                PHP
.396ac8	c2 20		rep #$20	                REP #$20        ; set A long
.396aca	a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.396acd	8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.396ad1	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.396ad4	8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.396ad8	22 f5 6b 39	jsl $396bf5	                JSL IDE_IDENTIFY
.396adc	b0 03		bcs $396ae1	                BCS id_ok
.396ade	82 ab 00	brl $396b8c	                BRL done
.396ae1					id_ok
.396ae1	c2 10		rep #$10	                REP #$10        ; set X long
.396ae3	e2 20		sep #$20	                SEP #$20        ; set A short
.396ae5	a0 28 00	ldy #$0028	                LDY #40
.396ae8	a2 36 00	ldx #$0036	                LDX #27*2
.396aeb	bf 01 a3 38	lda $38a301,x	pr_model        LDA DOS_SECTOR+1,X
.396aef	22 18 10 38	jsl $381018	                JSL PUTC
.396af3	bf 00 a3 38	lda $38a300,x	                LDA DOS_SECTOR,X
.396af7	22 18 10 38	jsl $381018	                JSL PUTC
.396afb	e8		inx		                INX
.396afc	e8		inx		                INX
.396afd	88		dey		                DEY
.396afe	88		dey		                DEY
.396aff	d0 ea		bne $396aeb	                BNE pr_model
.396b01	c2 10		rep #$10	                REP #$10        ; set X long
.396b03	e2 20		sep #$20	                SEP #$20        ; set A short
.396b05	a0 14 00	ldy #$0014	                LDY #20
.396b08	a2 14 00	ldx #$0014	                LDX #10*2
.396b0b	bf 01 a3 38	lda $38a301,x	pr_serial       LDA DOS_SECTOR+1,X
.396b0f	22 18 10 38	jsl $381018	                JSL PUTC
.396b13	bf 00 a3 38	lda $38a300,x	                LDA DOS_SECTOR,X
.396b17	22 18 10 38	jsl $381018	                JSL PUTC
.396b1b	e8		inx		                INX
.396b1c	e8		inx		                INX
.396b1d	88		dey		                DEY
.396b1e	88		dey		                DEY
.396b1f	d0 ea		bne $396b0b	                BNE pr_serial
.396b21	22 6c 10 38	jsl $38106c	                JSL PRINTCR
.396b25	c2 30		rep #$30	                REP #$30        ; set A&X long
.396b27	a9 01 00	lda #$0001	                LDA #1                 ; Set LBA = 1
.396b2a	8f 22 03 00	sta $000322	                STA @l BIOS_LBA
.396b2e	a9 00 00	lda #$0000	                LDA #0
.396b31	8f 24 03 00	sta $000324	                STA @l BIOS_LBA+2
.396b35	a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.396b38	8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.396b3c	a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.396b3f	8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.396b43	a2 00 00	ldx #$0000	                LDX #0                  ; Initialize the block to some recognizable data
.396b46	a9 a5 5a	lda #$5aa5	                LDA #$5AA5
.396b49	9f 00 a3 38	sta $38a300,x	init_loop       STA DOS_SECTOR,X
.396b4d	e8		inx		                INX
.396b4e	e8		inx		                INX
.396b4f	e0 00 02	cpx #$0200	                CPX #512
.396b52	d0 f5		bne $396b49	                BNE init_loop
.396b54	22 14 6d 39	jsl $396d14	                JSL IDE_PUTBLOCK        ; Attempt to write the block
.396b58	b0 06		bcs $396b60	                BCS read_sect1
.396b5a	22 6c 10 38	jsl $38106c	                JSL PRINTCR
.396b5e	80 2c		bra $396b8c	                BRA done
.396b60	a9 01 00	lda #$0001	read_sect1      LDA #1                 ; Set LBA = 1
.396b63	8f 22 03 00	sta $000322	                STA @l BIOS_LBA
.396b67	a9 00 00	lda #$0000	                LDA #0
.396b6a	8f 24 03 00	sta $000324	                STA @l BIOS_LBA+2
.396b6e	a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS
.396b71	8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.396b75	a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.396b78	8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.396b7c	22 83 6c 39	jsl $396c83	                JSL IDE_GETBLOCK        ; Attempt to read the block
.396b80	b0 06		bcs $396b88	                BCS all_ok
.396b82	22 6c 10 38	jsl $38106c	                JSL PRINTCR
.396b86	80 04		bra $396b8c	                BRA done
.396b88					all_ok
.396b88	22 6c 10 38	jsl $38106c	                JSL PRINTCR
.396b8c	28		plp		done            PLP
.396b8d	6b		rtl		                RTL
.396b8e					IDE_INIT
.396b8e	e2 20		sep #$20	                SEP #$20        ; set A short
.396b90	20 b1 6b	jsr $396bb1	              JSR IDE_DRIVE_BSY ; Check to see if drive is busy
.396b93	a9 00		lda #$00	              LDA #$00
.396b95	8f 35 e8 af	sta $afe835	              STA IDE_CLDR_HI
.396b99	8f 34 e8 af	sta $afe834	              STA IDE_CLDR_LO
.396b9d	8f 32 e8 af	sta $afe832	              STA IDE_SECT_CNT
.396ba1	a9 01		lda #$01	              LDA #$01
.396ba3	8f 33 e8 af	sta $afe833	              STA IDE_SECT_SRT
.396ba7	a9 a0		lda #$a0	              LDA #$A0 ; HEAD 0 - Select Master Drive
.396ba9	8f 36 e8 af	sta $afe836	              STA IDE_HEAD
.396bad	20 cf 6b	jsr $396bcf	              JSR IDE_DRV_READY_NOTBUSY
.396bb0	6b		rtl		              RTL
.396bb1					IDE_DRIVE_BSY
.396bb1	08		php		                PHP
.396bb2	e2 20		sep #$20	                SEP #$20        ; set A short
.396bb4	af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.396bb8	29 80		and #$80	                AND #IDE_STAT_BSY         ; Check for RDY Bit, this needs to be 1'b1
.396bba	c9 80		cmp #$80	                CMP #IDE_STAT_BSY         ; If not go read again
.396bbc	f0 f6		beq $396bb4	                BEQ loop
.396bbe	28		plp		                PLP
.396bbf	60		rts		                RTS
.396bc0					IDE_DRIVE_READY
.396bc0	08		php		                PHP
.396bc1	e2 20		sep #$20	                SEP #$20        ; set A short
.396bc3	af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.396bc7	29 40		and #$40	                AND #IDE_STAT_DRDY          ; Check to see if the Busy Signal is Cleared
.396bc9	c9 40		cmp #$40	                CMP #IDE_STAT_DRDY          ; if it is still one, then go back to read again.
.396bcb	d0 f6		bne $396bc3	                BNE loop
.396bcd	28		plp		                PLP
.396bce	60		rts		                RTS
.396bcf					IDE_DRV_READY_NOTBUSY
.396bcf	08		php		                PHP
.396bd0	e2 20		sep #$20	                SEP #$20        ; set A short
.396bd2	af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT                 ; Check the status
.396bd6	29 c0		and #$c0	                AND #IDE_STAT_BSY | IDE_STAT_DRDY
.396bd8	c9 40		cmp #$40	                CMP #IDE_STAT_DRDY                  ; Is it READY but not BUSY?
.396bda	d0 f6		bne $396bd2	                BNE loop                            ; No: keep waiting
.396bdc	28		plp		ret_success     PLP                                 ; Return success
.396bdd	38		sec		                SEC
.396bde	60		rts		                RTS
.396bdf	8f 07 03 00	sta $000307	ret_failure     STA @l FDC_ST1                      ; Save the status code to FDC_ST1
.396be3	28		plp		                PLP                                 ; Return failure
.396be4	18		clc		                CLC
.396be5	60		rts		                RTS
.396be6					IDE_NOT_DRQ
.396be6	08		php		                PHP
.396be7	e2 20		sep #$20	                SEP #$20        ; set A short
.396be9	af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT     ; Get the status
.396bed	29 08		and #$08	                AND #IDE_STAT_DRQ
.396bef	c9 08		cmp #$08	                CMP #IDE_STAT_DRQ       ; Is the DRQ bit set?
.396bf1	d0 f6		bne $396be9	                BNE loop                ; No: keep waiting
.396bf3	28		plp		                PLP
.396bf4	60		rts		                RTS
.396bf5					IDE_IDENTIFY
.396bf5	5a		phy		                PHY
.396bf6	8b		phb		                PHB
.396bf7	0b		phd		                PHD
.396bf8	08		php		                PHP
.396bf9	48		pha		                PHA             ; begin setdbr macro
.396bfa	08		php		                PHP
.396bfb	e2 20		sep #$20	                SEP #$20        ; set A short
.396bfd	a9 00		lda #$00	                LDA #0
.396bff	48		pha		                PHA
.396c00	ab		plb		                PLB
.396c01	28		plp		                PLP
.396c02	68		pla		                PLA             ; end setdbr macro
.396c03	48		pha		                PHA             ; begin setdp macro
.396c04	08		php		                PHP
.396c05	c2 20		rep #$20	                REP #$20        ; set A long
.396c07	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.396c0a	5b		tcd		                TCD
.396c0b	28		plp		                PLP
.396c0c	68		pla		                PLA             ; end setdp macro
.396c0d	e2 20		sep #$20	                SEP #$20        ; set A short
.396c0f	20 cf 6b	jsr $396bcf	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.396c12	a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.396c14	29 07		and #$07	                AND #$07
.396c16	09 a0		ora #$a0	                ORA #%10100000                  ; Select DEV=0 and LBA mode = 1
.396c18	8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.396c1c	20 cf 6b	jsr $396bcf	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.396c1f	e2 20		sep #$20	                SEP #$20        ; set A short
.396c21	a9 00		lda #$00	                LDA #0                          ; Clear sector count and LBA
.396c23	8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.396c27	8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.396c2b	8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.396c2f	8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.396c33	a9 ec		lda #$ec	                LDA #IDE_CMD_IDENTIFY           ; The IDENTIFY command
.396c35	8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT             ; Check the status
.396c39	f0 29		beq $396c64	                BEQ no_media                    ; If 0: there is no drive
.396c3b	20 b1 6b	jsr $396bb1	                JSR IDE_DRIVE_BSY               ; Othewise: wait for drive to not be busy
.396c3e	20 cf 6b	jsr $396bcf	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396c41	90 2d		bcc $396c70	                BCC ret_failure                 ; If an error occurred, return it
.396c43	c2 30		rep #$30	                REP #$30        ; set A&X long
.396c45	a0 00 00	ldy #$0000	                LDY #0
.396c48	af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.396c4c	97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.396c4e	c8		iny		                INY                             ; Move to the next position
.396c4f	c8		iny		                INY
.396c50	c0 00 02	cpy #$0200	                CPY #512
.396c53	d0 f3		bne $396c48	                BNE read_loop
.396c55					ret_success
.396c55	e2 20		sep #$20	                SEP #$20        ; set A short
.396c57	a9 00		lda #$00	                LDA #0
.396c59	85 00		sta $0320	                STA BIOS_STATUS
.396c5b	8d 06 03	sta $0306	                STA @w FDC_ST0
.396c5e	28		plp		                PLP                             ; Return success
.396c5f	2b		pld		                PLD
.396c60	ab		plb		                PLB
.396c61	7a		ply		                PLY
.396c62	38		sec		                SEC
.396c63	6b		rtl		                RTL
.396c64					no_media
.396c64	e2 20		sep #$20	                SEP #$20        ; set A short
.396c66	a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA
.396c68	80 0a		bra $396c74	                BRA pass_failure
.396c6a					not_ata
.396c6a	e2 20		sep #$20	                SEP #$20        ; set A short
.396c6c	a9 8a		lda #$8a	                LDA #BIOS_ERR_NOTATA
.396c6e	80 04		bra $396c74	                BRA pass_failure
.396c70					ret_failure
.396c70	e2 20		sep #$20	                SEP #$20        ; set A short
.396c72	a9 82		lda #$82	                LDA #BIOS_ERR_READ
.396c74	85 00		sta $0320	pass_failure    STA BIOS_STATUS
.396c76	af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.396c7a	8d 06 03	sta $0306	                STA @w FDC_ST0
.396c7d	28		plp		                PLP
.396c7e	2b		pld		                PLD
.396c7f	ab		plb		                PLB
.396c80	7a		ply		                PLY
.396c81	18		clc		                CLC
.396c82	6b		rtl		                RTL
.396c83					IDE_GETBLOCK
.396c83	5a		phy		                PHY
.396c84	8b		phb		                PHB
.396c85	0b		phd		                PHD
.396c86	08		php		                PHP
.396c87	48		pha		                PHA             ; begin setdbr macro
.396c88	08		php		                PHP
.396c89	e2 20		sep #$20	                SEP #$20        ; set A short
.396c8b	a9 00		lda #$00	                LDA #0
.396c8d	48		pha		                PHA
.396c8e	ab		plb		                PLB
.396c8f	28		plp		                PLP
.396c90	68		pla		                PLA             ; end setdbr macro
.396c91	48		pha		                PHA             ; begin setdp macro
.396c92	08		php		                PHP
.396c93	c2 20		rep #$20	                REP #$20        ; set A long
.396c95	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.396c98	5b		tcd		                TCD
.396c99	28		plp		                PLP
.396c9a	68		pla		                PLA             ; end setdp macro
.396c9b	e2 20		sep #$20	                SEP #$20        ; set A short
.396c9d	20 cf 6b	jsr $396bcf	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.396ca0	a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.396ca2	29 07		and #$07	                AND #$07
.396ca4	09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.396ca6	8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.396caa	20 cf 6b	jsr $396bcf	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.396cad	e2 20		sep #$20	                SEP #$20        ; set A short
.396caf	a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.396cb1	8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.396cb5	a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.396cb7	8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.396cbb	a5 03		lda $0323	                LDA BIOS_LBA+1
.396cbd	8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.396cc1	a5 04		lda $0324	                LDA BIOS_LBA+2
.396cc3	8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.396cc7	a9 21		lda #$21	                LDA #IDE_CMD_READ_SECTOR        ; The READ SECTOR command
.396cc9	8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.396ccd	ea		nop		                NOP                             ; Wait about 500ns
.396cce	ea		nop		                NOP
.396ccf	ea		nop		                NOP
.396cd0	ea		nop		                NOP
.396cd1	20 cf 6b	jsr $396bcf	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396cd4	90 2b		bcc $396d01	                BCC ret_failure                 ; If an error occurred, return it
.396cd6	e2 20		sep #$20	                SEP #$20        ; set A short
.396cd8	af 30 e8 af	lda $afe830	                LDA @l IDE_DATA                 ; Read and toss out one byte from the 8-bit interface
.396cdc	a0 00 00	ldy #$0000	                LDY #0
.396cdf	c2 20		rep #$20	                REP #$20        ; set A long
.396ce1	af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.396ce5	97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.396ce7	c8		iny		                INY                             ; Move to the next position
.396ce8	c8		iny		                INY
.396ce9	c0 00 02	cpy #$0200	                CPY #512
.396cec	d0 f3		bne $396ce1	                BNE read_loop
.396cee	ea		nop		                NOP                             ; Wait about 500ns
.396cef	ea		nop		                NOP
.396cf0	ea		nop		                NOP
.396cf1	ea		nop		                NOP
.396cf2					ret_success
.396cf2	e2 20		sep #$20	                SEP #$20        ; set A short
.396cf4	a9 00		lda #$00	                LDA #0
.396cf6	85 00		sta $0320	                STA BIOS_STATUS
.396cf8	8d 06 03	sta $0306	                STA @w FDC_ST0
.396cfb	28		plp		                PLP                             ; Return success
.396cfc	2b		pld		                PLD
.396cfd	ab		plb		                PLB
.396cfe	7a		ply		                PLY
.396cff	38		sec		                SEC
.396d00	6b		rtl		                RTL
.396d01					ret_failure
.396d01	e2 20		sep #$20	                SEP #$20        ; set A short
.396d03	af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.396d07	8d 06 03	sta $0306	                STA @w FDC_ST0
.396d0a	a9 82		lda #$82	                LDA #BIOS_ERR_READ
.396d0c	85 00		sta $0320	                STA BIOS_STATUS
.396d0e	28		plp		                PLP
.396d0f	2b		pld		                PLD
.396d10	ab		plb		                PLB
.396d11	7a		ply		                PLY
.396d12	18		clc		                CLC
.396d13	6b		rtl		                RTL
.396d14					IDE_PUTBLOCK
.396d14	5a		phy		                PHY
.396d15	8b		phb		                PHB
.396d16	0b		phd		                PHD
.396d17	08		php		                PHP
.396d18	48		pha		                PHA             ; begin setdbr macro
.396d19	08		php		                PHP
.396d1a	e2 20		sep #$20	                SEP #$20        ; set A short
.396d1c	a9 00		lda #$00	                LDA #0
.396d1e	48		pha		                PHA
.396d1f	ab		plb		                PLB
.396d20	28		plp		                PLP
.396d21	68		pla		                PLA             ; end setdbr macro
.396d22	48		pha		                PHA             ; begin setdp macro
.396d23	08		php		                PHP
.396d24	c2 20		rep #$20	                REP #$20        ; set A long
.396d26	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.396d29	5b		tcd		                TCD
.396d2a	28		plp		                PLP
.396d2b	68		pla		                PLA             ; end setdp macro
.396d2c	e2 20		sep #$20	                SEP #$20        ; set A short
.396d2e	20 cf 6b	jsr $396bcf	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.396d31	a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.396d33	29 07		and #$07	                AND #$07
.396d35	09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.396d37	8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.396d3b	20 cf 6b	jsr $396bcf	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.396d3e	e2 20		sep #$20	                SEP #$20        ; set A short
.396d40	a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.396d42	8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.396d46	a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.396d48	8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.396d4c	a5 03		lda $0323	                LDA BIOS_LBA+1
.396d4e	8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.396d52	a5 04		lda $0324	                LDA BIOS_LBA+2
.396d54	8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.396d58	a9 30		lda #$30	                LDA #IDE_CMD_WRITE_SECTOR       ; The READ SECTOR command
.396d5a	8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.396d5e	ea		nop		                NOP                             ; Wait about 500ns
.396d5f	ea		nop		                NOP
.396d60	ea		nop		                NOP
.396d61	ea		nop		                NOP
.396d62	20 cf 6b	jsr $396bcf	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396d65	90 33		bcc $396d9a	                BCC ret_failure                 ; If an error occurred, return it
.396d67	c2 30		rep #$30	                REP #$30        ; set A&X long
.396d69	a0 00 00	ldy #$0000	                LDY #0
.396d6c	b7 06		lda [$0326],y	read_loop       LDA [BIOS_BUFF_PTR],Y           ; Get the word from the buffer
.396d6e	8f 38 e8 af	sta $afe838	                STA @l IDE_DATA_LO              ; Save the word to the device
.396d72	c8		iny		                INY                             ; Move to the next position
.396d73	c8		iny		                INY
.396d74	c0 00 02	cpy #$0200	                CPY #512
.396d77	d0 f3		bne $396d6c	                BNE read_loop
.396d79	ea		nop		                NOP                             ; Wait about 500ns
.396d7a	ea		nop		                NOP
.396d7b	ea		nop		                NOP
.396d7c	ea		nop		                NOP
.396d7d	20 cf 6b	jsr $396bcf	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396d80	90 18		bcc $396d9a	                BCC ret_failure                 ; If an error occurred, return it
.396d82	af 37 e8 af	lda $afe837	                LDA @l IDE_CMD_STAT             ; Check the status
.396d86	89 21 00	bit #$0021	                BIT #IDE_STAT_ERR | IDE_STAT_DF
.396d89	d0 0f		bne $396d9a	                BNE ret_failure                 ; If error: return failure
.396d8b					ret_success
.396d8b	e2 20		sep #$20	                SEP #$20        ; set A short
.396d8d	a9 00		lda #$00	                LDA #0
.396d8f	85 00		sta $0320	                STA BIOS_STATUS
.396d91	8d 06 03	sta $0306	                STA @w FDC_ST0
.396d94	28		plp		                PLP                             ; Return success
.396d95	2b		pld		                PLD
.396d96	ab		plb		                PLB
.396d97	7a		ply		                PLY
.396d98	38		sec		                SEC
.396d99	6b		rtl		                RTL
.396d9a					ret_failure
.396d9a	e2 20		sep #$20	                SEP #$20        ; set A short
.396d9c	af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.396da0	8d 06 03	sta $0306	                STA @w FDC_ST0
.396da3	a9 82		lda #$82	                LDA #BIOS_ERR_READ
.396da5	85 00		sta $0320	                STA BIOS_STATUS
.396da7	28		plp		                PLP
.396da8	2b		pld		                PLD
.396da9	ab		plb		                PLB
.396daa	7a		ply		                PLY
.396dab	18		clc		                CLC
.396dac	6b		rtl		                RTL

;******  Return to file: src\kernel.asm

.396dad					KERNEL_DATA
>396dad	20 20 20 20 0b 0c 0b 0c		greet_msg       .text $20, $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, " FFFFFFF MMMMMMMM XX    XXX " ,$0D
>396db5	0b 0c 0b 0c 0b 0c 20 46 46 46 46 46 46 46 20 4d
>396dc5	4d 4d 4d 4d 4d 4d 4d 20 58 58 20 20 20 20 58 58
>396dd5	58 20 0d
>396dd8	20 20 20 0b 0c 0b 0c 0b		                .text $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM   XX XXX   ",$0D
>396de0	0c 0b 0c 0b 0c 20 46 46 20 20 20 20 20 20 4d 4d
>396df0	20 4d 4d 20 4d 4d 20 20 20 58 58 20 58 58 58 20
>396e00	20 20 0d
>396e03	20 20 0b 0c 0b 0c 0b 0c		                .text $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FFFFF   MM MM MM    XXX      ",$0D
>396e0b	0b 0c 0b 0c 20 46 46 46 46 46 20 20 20 4d 4d 20
>396e1b	4d 4d 20 4d 4d 20 20 20 20 58 58 58 20 20 20 20
>396e2b	20 20 0d
>396e2e	20 0b 0c 0b 0c 0b 0c 0b		                .text $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM  XXX  XX     ",$0D
>396e36	0c 0b 0c 20 46 46 20 20 20 20 20 20 4d 4d 20 4d
>396e46	4d 20 4d 4d 20 20 58 58 58 20 20 58 58 20 20 20
>396e56	20 20 0d
>396e59	0b 0c 0b 0c 0b 0c 0b 0c		                .text $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM XXX     XX    ",$0D
>396e61	0b 0c 20 46 46 20 20 20 20 20 20 4d 4d 20 4d 4d
>396e71	20 4d 4d 20 58 58 58 20 20 20 20 20 58 58 20 20
>396e81	20 20 0d
>396e84	0d 43 32 35 36 20 46 4f		                .text $0D, "C256 FOENIX FMX -- 3,670,016 Bytes Free", $0D
>396e8c	45 4e 49 58 20 46 4d 58 20 2d 2d 20 33 2c 36 37
>396e9c	30 2c 30 31 36 20 42 79 74 65 73 20 46 72 65 65
>396eac	0d
>396ead	77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com - Kernel version: "
>396eb5	66 6f 65 6e 69 78 2e 63 6f 6d 20 2d 20 4b 65 72
>396ec5	6e 65 6c 20 76 65 72 73 69 6f 6e 3a 20

;******  Processing file: src\version.asm

>396ed2	76 30 2e 31 2e 30 2d 61		.text "v0.1.0-alpha+904 (2020-09-03)"
>396eda	6c 70 68 61 2b 39 30 34 20 28 32 30 32 30 2d 30
>396eea	39 2d 30 33 29

;******  Return to file: src\kernel.asm

>396eef	0d 00				                .text $0D,$00
.396ef1					old_pc_style_stat
>396ef1	1d 1d 1d 1d 1d 1d 8d 8d		greet_clr_line1 .text $1D, $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>396ef9	4d 4d 2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd
>396f09	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396f19	fd fd
>396f1b	1d 1d 1d 1d 1d 8d 8d 4d		greet_clr_line2 .text $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>396f23	4d 2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd
>396f33	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396f43	fd fd
>396f45	1d 1d 1d 1d 8d 8d 4d 4d		greet_clr_line3 .text $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>396f4d	2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd fd
>396f5d	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396f6d	fd fd
>396f6f	1d 1d 1d 8d 8d 4d 4d 2d		greet_clr_line4 .text $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>396f77	2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd fd fd
>396f87	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396f97	fd fd
>396f99	1d 1d 8d 8d 4d 4d 2d 2d		greet_clr_line5 .text $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>396fa1	5d 5d fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396fb1	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>396fc1	fd fd
>396fc3	00 00 00 ff			fg_color_lut	  .text $00, $00, $00, $FF
>396fc7	00 00 80 ff			                .text $00, $00, $80, $FF
>396fcb	00 80 00 ff			                .text $00, $80, $00, $FF
>396fcf	80 00 00 ff			                .text $80, $00, $00, $FF
>396fd3	00 80 80 ff			                .text $00, $80, $80, $FF
>396fd7	80 80 00 ff			                .text $80, $80, $00, $FF
>396fdb	80 00 80 ff			                .text $80, $00, $80, $FF
>396fdf	80 80 80 ff			                .text $80, $80, $80, $FF
>396fe3	00 45 ff ff			                .text $00, $45, $FF, $FF
>396fe7	13 45 8b ff			                .text $13, $45, $8B, $FF
>396feb	00 00 20 ff			                .text $00, $00, $20, $FF
>396fef	00 20 00 ff			                .text $00, $20, $00, $FF
>396ff3	20 00 00 ff			                .text $20, $00, $00, $FF
>396ff7	20 20 20 ff			                .text $20, $20, $20, $FF
>396ffb	40 40 40 ff			                .text $40, $40, $40, $FF
>396fff	ff ff ff ff			                .text $FF, $FF, $FF, $FF
>397003	00 00 00 ff			bg_color_lut	  .text $00, $00, $00, $FF
>397007	00 00 80 ff			                .text $00, $00, $80, $FF
>39700b	00 80 00 ff			                .text $00, $80, $00, $FF
>39700f	80 00 00 ff			                .text $80, $00, $00, $FF
>397013	00 20 20 ff			                .text $00, $20, $20, $FF
>397017	20 20 00 ff			                .text $20, $20, $00, $FF
>39701b	20 00 20 ff			                .text $20, $00, $20, $FF
>39701f	20 20 20 ff			                .text $20, $20, $20, $FF
>397023	1e 69 d2 ff			                .text $1E, $69, $D2, $FF
>397027	13 45 8b ff			                .text $13, $45, $8B, $FF
>39702b	00 00 20 ff			                .text $00, $00, $20, $FF
>39702f	00 20 00 ff			                .text $00, $20, $00, $FF
>397033	40 00 00 ff			                .text $40, $00, $00, $FF
>397037	10 10 10 ff			                .text $10, $10, $10, $FF
>39703b	40 40 40 ff			                .text $40, $40, $40, $FF
>39703f	ff ff ff ff			                .text $FF, $FF, $FF, $FF
>397043	43 6d 64 20 30 78 41 41		pass_tst0xAAmsg .text "Cmd 0xAA Test passed...", $0D, $00
>39704b	20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>39705b	00
>39705c	43 6d 64 20 30 78 41 42		pass_tst0xABmsg .text "Cmd 0xAB Test passed...", $0D, $00
>397064	20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>397074	00
>397075	43 6d 64 20 30 78 36 30		pass_cmd0x60msg .text "Cmd 0x60 Executed.", $0D, $00
>39707d	20 45 78 65 63 75 74 65 64 2e 0d 00
>397089	43 6d 64 20 30 78 46 46		pass_cmd0xFFmsg .text "Cmd 0xFF (Reset) Done.", $0D, $00
>397091	20 28 52 65 73 65 74 29 20 44 6f 6e 65 2e 0d 00
>3970a1	43 6d 64 20 30 78 45 45		pass_cmd0xEEmsg .text "Cmd 0xEE Echo Test passed...", $0D, $00
>3970a9	20 45 63 68 6f 20 54 65 73 74 20 70 61 73 73 65
>3970b9	64 2e 2e 2e 0d 00
>3970bf	4b 65 79 62 6f 61 72 64		Success_kb_init .text "Keyboard Present", $0D, $00
>3970c7	20 50 72 65 73 65 6e 74 0d 00
>3970d1	4e 6f 20 4b 65 79 62 6f		Failed_kb_init  .text "No Keyboard Attached or Failed Init...", $0D, $00
>3970d9	61 72 64 20 41 74 74 61 63 68 65 64 20 6f 72 20
>3970e9	46 61 69 6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>3970f9	4e 4f 20 53 49 47 4e 41		bmp_parser_err0 .text "NO SIGNATURE FOUND.", $00
>397101	54 55 52 45 20 46 4f 55 4e 44 2e 00
>39710d	42 4d 50 20 4c 4f 41 44		bmp_parser_msg0 .text "BMP LOADED.", $00
>397115	45 44 2e 00
>397119	45 58 45 43 55 54 49 4e		bmp_parser_msg1 .text "EXECUTING BMP PARSER", $00
>397121	47 20 42 4d 50 20 50 41 52 53 45 52 00
>39712e	49 44 45 20 48 44 44 20		IDE_HDD_Present_msg0 .text "IDE HDD Present:", $00
>397136	50 72 65 73 65 6e 74 3a 00
>39713f	42 6f 6f 74 20 44 49 50		boot_invalid    .null "Boot DIP switch settings are invalid."
>397147	20 73 77 69 74 63 68 20 73 65 74 74 69 6e 67 73
>397157	20 61 72 65 20 69 6e 76 61 6c 69 64 2e 00
>397165	50 72 65 73 73 20 52 20		boot_retry      .null "Press R to retry, B to go to BASIC.", 13
>39716d	74 6f 20 72 65 74 72 79 2c 20 42 20 74 6f 20 67
>39717d	6f 20 74 6f 20 42 41 53 49 43 2e 0d 00
>39718a	55 6e 61 62 6c 65 20 74		sdc_err_boot    .null "Unable to read the SD card."
>397192	6f 20 72 65 61 64 20 74 68 65 20 53 44 20 63 61
>3971a2	72 64 2e 00
>3971a6	55 6e 61 62 6c 65 20 74		ide_err_boot    .null "Unable to read from the IDE drive."
>3971ae	6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>3971be	49 44 45 20 64 72 69 76 65 2e 00
>3971c9	55 6e 61 62 6c 65 20 74		fdc_err_boot    .null "Unable to read from the floppy drive."
>3971d1	6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>3971e1	66 6c 6f 70 70 79 20 64 72 69 76 65 2e 00
>3971ef	42 6f 6f 74 69 6e 67 20		fdc_boot        .null "Booting from floppy..."
>3971f7	66 72 6f 6d 20 66 6c 6f 70 70 79 2e 2e 2e 00
>397206	0d 52 45 41 44 59 2e 00		ready_msg       .null $0D,"READY."
>39720e	41 42 4f 52 54 20 45 52		error_01        .null "ABORT ERROR"
>397216	52 4f 52 00
>39721a	30 31 32 33 34 35 36 37		hex_digits      .text "0123456789ABCDEF",0
>397222	38 39 41 42 43 44 45 46 00
>39722b					.align 256
>397300	00 1b 31 32 33 34 35 36		ScanCode_Press_Set1   .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>397308	37 38 39 30 2d 3d 08 09
>397310	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>397318	6f 70 5b 5d 0d 00 61 73
>397320	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>397328	27 60 00 5c 7a 78 63 76
>397330	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $81, $82, $83, $84, $85    ; $30
>397338	00 20 00 81 82 83 84 85
>397340	86 87 88 89 8a 00 00 00		                      .text $86, $87, $88, $89, $8A, $00, $00, $00, $11, $00, $00, $9D, $00, $1D, $00, $00    ; $40
>397348	11 00 00 9d 00 1d 00 00
>397350	91 00 00 00 00 00 00 8b		                      .text $91, $00, $00, $00, $00, $00, $00, $8B, $8C, $00, $00, $00, $00, $00, $00, $00    ; $50
>397358	8c 00 00 00 00 00 00 00
>397360	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>397368	00 00 00 00 00 00 00 00
>397370	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>397378	00 00 00 00 00 00 00 00
>397380	00 00 21 40 23 24 25 5e		ScanCode_Shift_Set1   .text $00, $00, $21, $40, $23, $24, $25, $5E, $26, $2A, $28, $29, $5F, $2B, $08, $09    ; $00
>397388	26 2a 28 29 5f 2b 08 09
>397390	51 57 45 52 54 59 55 49		                      .text $51, $57, $45, $52, $54, $59, $55, $49, $4F, $50, $7B, $7D, $0D, $00, $41, $53    ; $10
>397398	4f 50 7b 7d 0d 00 41 53
>3973a0	44 46 47 48 4a 4b 4c 3a		                      .text $44, $46, $47, $48, $4A, $4B, $4C, $3A, $22, $7E, $00, $5C, $5A, $58, $43, $56    ; $20
>3973a8	22 7e 00 5c 5a 58 43 56
>3973b0	42 4e 4d 3c 3e 3f 00 00		                      .text $42, $4E, $4D, $3C, $3E, $3F, $00, $00, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>3973b8	00 20 00 00 00 00 00 00
>3973c0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>3973c8	00 00 00 00 00 00 00 00
>3973d0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3973d8	00 00 00 00 00 00 00 00
>3973e0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3973e8	00 00 00 00 00 00 00 00
>3973f0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3973f8	00 00 00 00 00 00 00 00
>397400	00 1b 31 32 33 34 35 36		ScanCode_Ctrl_Set1    .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>397408	37 38 39 30 2d 3d 08 09
>397410	11 17 05 12 14 19 15 09		                      .text $11, $17, $05, $12, $14, $19, $15, $09, $0F, $10, $5B, $5D, $0D, $00, $01, $13    ; $10
>397418	0f 10 5b 5d 0d 00 01 13
>397420	04 06 07 08 0a 0b 0c 3b		                      .text $04, $06, $07, $08, $0A, $0B, $0C, $3B, $27, $00, $00, $5C, $1A, $18, $03, $16    ; $20
>397428	27 00 00 5c 1a 18 03 16
>397430	02 0e 0d 2c 2e 2f 00 2a		                      .text $02, $0E, $0D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>397438	00 20 00 00 00 00 00 00
>397440	00 00 00 00 00 18 00 00		                      .text $00, $00, $00, $00, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>397448	00 00 00 00 00 00 00 00
>397450	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>397458	00 00 00 00 00 00 00 00
>397460	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>397468	00 00 00 00 00 00 00 00
>397470	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>397478	00 00 00 00 00 00 00 00
>397480	00 1b 31 32 33 34 35 36		ScanCode_Alt_Set1     .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>397488	37 38 39 30 2d 3d 08 09
>397490	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>397498	6f 70 5b 5d 0d 00 61 73
>3974a0	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>3974a8	27 60 00 5c 7a 78 63 76
>3974b0	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>3974b8	00 20 00 00 00 00 00 00
>3974c0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>3974c8	00 00 00 00 00 00 00 00
>3974d0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3974d8	00 00 00 00 00 00 00 00
>3974e0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3974e8	00 00 00 00 00 00 00 00
>3974f0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3974f8	00 00 00 00 00 00 00 00
>397500	00 1b 31 32 33 34 35 36		ScanCode_NumLock_Set1 .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>397508	37 38 39 30 2d 3d 08 09
>397510	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>397518	6f 70 5b 5d 0d 00 61 73
>397520	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>397528	27 60 00 5c 7a 78 63 76
>397530	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>397538	00 20 00 00 00 00 00 00
>397540	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>397548	00 00 00 00 00 00 00 00
>397550	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>397558	00 00 00 00 00 00 00 00
>397560	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>397568	00 00 00 00 00 00 00 00
>397570	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>397578	00 00 00 00 00 00 00 00
>397580	00 00 00 00 00 00 00 00		ScanCode_Prefix_Set1  .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $00
>397588	00 00 00 00 00 00 00 00
>397590	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $10
>397598	00 00 00 00 00 00 00 00
>3975a0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $20
>3975a8	00 00 00 00 00 00 00 00
>3975b0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $30
>3975b8	00 00 00 00 00 00 00 00
>3975c0	00 00 00 00 00 00 00 01		                      .text $00, $00, $00, $00, $00, $00, $00, $01, $11, $00, $00, $9D, $00, $1D, $00, $05    ; $40
>3975c8	11 00 00 9d 00 1d 00 05
>3975d0	91 00 0f 7f 00 00 00 00		                      .text $91, $00, $0F, $7F, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3975d8	00 00 00 00 00 00 00 00
>3975e0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3975e8	00 00 00 00 00 00 00 00
>3975f0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3975f8	00 00 00 00 00 00 00 00
>397600					.align 256
>397600	00 14 1c 21 26 2a 2e 31		GAMMA_2_2_Tbl         .text  $00, $14, $1c, $21, $26, $2a, $2e, $31, $34, $37, $3a, $3d, $3f, $41, $44, $46
>397608	34 37 3a 3d 3f 41 44 46
>397610	48 4a 4c 4e 50 51 53 55		                      .text  $48, $4a, $4c, $4e, $50, $51, $53, $55, $57, $58, $5a, $5b, $5d, $5e, $60, $61
>397618	57 58 5a 5b 5d 5e 60 61
>397620	63 64 66 67 68 6a 6b 6c		                      .text  $63, $64, $66, $67, $68, $6a, $6b, $6c, $6d, $6f, $70, $71, $72, $73, $75, $76
>397628	6d 6f 70 71 72 73 75 76
>397630	77 78 79 7a 7b 7c 7d 7e		                      .text  $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $80, $81, $82, $83, $84, $85, $86, $87
>397638	80 81 82 83 84 85 86 87
>397640	88 88 89 8a 8b 8c 8d 8e		                      .text  $88, $88, $89, $8a, $8b, $8c, $8d, $8e, $8f, $90, $91, $92, $93, $93, $94, $95
>397648	8f 90 91 92 93 93 94 95
>397650	96 97 98 99 99 9a 9b 9c		                      .text  $96, $97, $98, $99, $99, $9a, $9b, $9c, $9d, $9e, $9e, $9f, $a0, $a1, $a2, $a2
>397658	9d 9e 9e 9f a0 a1 a2 a2
>397660	a3 a4 a5 a5 a6 a7 a8 a8		                      .text  $a3, $a4, $a5, $a5, $a6, $a7, $a8, $a8, $a9, $aa, $ab, $ab, $ac, $ad, $ae, $ae
>397668	a9 aa ab ab ac ad ae ae
>397670	af b0 b0 b1 b2 b2 b3 b4		                      .text  $AF, $b0, $b0, $b1, $b2, $b2, $b3, $b4, $b5, $b5, $b6, $b7, $b7, $b8, $b9, $b9
>397678	b5 b5 b6 b7 b7 b8 b9 b9
>397680	ba bb bb bc bd bd be be		                      .text  $ba, $bb, $bb, $bc, $bd, $bd, $be, $be, $bf, $c0, $c0, $c1, $c2, $c2, $c3, $c4
>397688	bf c0 c0 c1 c2 c2 c3 c4
>397690	c4 c5 c5 c6 c7 c7 c8 c8		                      .text  $c4, $c5, $c5, $c6, $c7, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cb, $cc, $cd, $cd
>397698	c9 ca ca cb cb cc cd cd
>3976a0	ce ce cf d0 d0 d1 d1 d2		                      .text  $ce, $ce, $cf, $d0, $d0, $d1, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d5, $d6, $d6
>3976a8	d2 d3 d4 d4 d5 d5 d6 d6
>3976b0	d7 d8 d8 d9 d9 da da db		                      .text  $d7, $d8, $d8, $d9, $d9, $da, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $df
>3976b8	db dc dc dd de de df df
>3976c0	e0 e0 e1 e1 e2 e2 e3 e3		                      .text  $e0, $e0, $e1, $e1, $e2, $e2, $e3, $e3, $e4, $e4, $e5, $e5, $e6, $e6, $e7, $e7
>3976c8	e4 e4 e5 e5 e6 e6 e7 e7
>3976d0	e8 e8 e9 e9 ea ea eb eb		                      .text  $e8, $e8, $e9, $e9, $ea, $ea, $eb, $eb, $ec, $ec, $ed, $ed, $ee, $ee, $ef, $ef
>3976d8	ec ec ed ed ee ee ef ef
>3976e0	f0 f0 f1 f1 f2 f2 f3 f3		                      .text  $f0, $f0, $f1, $f1, $f2, $f2, $f3, $f3, $f4, $f4, $f5, $f5, $f6, $f6, $f7, $f7
>3976e8	f4 f4 f5 f5 f6 f6 f7 f7
>3976f0	f8 f8 f9 f9 f9 fa fa fb		                      .text  $f8, $f8, $f9, $f9, $f9, $fa, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $fe, $ff
>3976f8	fb fc fc fd fd fe fe ff
>397700					.align 256
>397700	00 0b 11 15 19 1c 1f 22		GAMMA_1_8_Tbl         .text  $00, $0b, $11, $15, $19, $1c, $1f, $22, $25, $27, $2a, $2c, $2e, $30, $32, $34
>397708	25 27 2a 2c 2e 30 32 34
>397710	36 38 3a 3c 3d 3f 41 43		                      .text  $36, $38, $3a, $3c, $3d, $3f, $41, $43, $44, $46, $47, $49, $4a, $4c, $4d, $4f
>397718	44 46 47 49 4a 4c 4d 4f
>397720	50 51 53 54 55 57 58 59		                      .text  $50, $51, $53, $54, $55, $57, $58, $59, $5b, $5c, $5d, $5e, $60, $61, $62, $63
>397728	5b 5c 5d 5e 60 61 62 63
>397730	64 65 67 68 69 6a 6b 6c		                      .text  $64, $65, $67, $68, $69, $6a, $6b, $6c, $6d, $6e, $70, $71, $72, $73, $74, $75
>397738	6d 6e 70 71 72 73 74 75
>397740	76 77 78 79 7a 7b 7c 7d		                      .text  $76, $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $7f, $80, $81, $82, $83, $84, $84
>397748	7e 7f 80 81 82 83 84 84
>397750	85 86 87 88 89 8a 8b 8c		                      .text  $85, $86, $87, $88, $89, $8a, $8b, $8c, $8d, $8e, $8e, $8f, $90, $91, $92, $93
>397758	8d 8e 8e 8f 90 91 92 93
>397760	94 95 95 96 97 98 99 9a		                      .text  $94, $95, $95, $96, $97, $98, $99, $9a, $9a, $9b, $9c, $9d, $9e, $9f, $9f, $a0
>397768	9a 9b 9c 9d 9e 9f 9f a0
>397770	a1 a2 a3 a3 a4 a5 a6 a6		                      .text  $a1, $a2, $a3, $a3, $a4, $a5, $a6, $a6, $a7, $a8, $a9, $aa, $aa, $ab, $ac, $ad
>397778	a7 a8 a9 aa aa ab ac ad
>397780	ad ae af b0 b0 b1 b2 b3		                      .text  $ad, $ae, $af, $b0, $b0, $b1, $b2, $b3, $b3, $b4, $b5, $b6, $b6, $b7, $b8, $b8
>397788	b3 b4 b5 b6 b6 b7 b8 b8
>397790	b9 ba bb bb bc bd bd be		                      .text  $b9, $ba, $bb, $bb, $bc, $bd, $bd, $be, $bf, $bf, $c0, $c1, $c2, $c2, $c3, $c4
>397798	bf bf c0 c1 c2 c2 c3 c4
>3977a0	c4 c5 c6 c6 c7 c8 c8 c9		                      .text  $c4, $c5, $c6, $c6, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cc, $cc, $cd, $ce, $ce
>3977a8	ca ca cb cc cc cd ce ce
>3977b0	cf d0 d0 d1 d2 d2 d3 d4		                      .text  $cf, $d0, $d0, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d6, $d6, $d7, $d7, $d8, $d9
>3977b8	d4 d5 d6 d6 d7 d7 d8 d9
>3977c0	d9 da db db dc dc dd de		                      .text  $d9, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $e0, $e0, $e1, $e1, $e2, $e3
>3977c8	de df e0 e0 e1 e1 e2 e3
>3977d0	e3 e4 e4 e5 e6 e6 e7 e7		                      .text  $e3, $e4, $e4, $e5, $e6, $e6, $e7, $e7, $e8, $e9, $e9, $ea, $ea, $eb, $ec, $ec
>3977d8	e8 e9 e9 ea ea eb ec ec
>3977e0	ed ed ee ef ef f0 f0 f1		                      .text  $ed, $ed, $ee, $ef, $ef, $f0, $f0, $f1, $f1, $f2, $f3, $f3, $f4, $f4, $f5, $f5
>3977e8	f1 f2 f3 f3 f4 f4 f5 f5
>3977f0	f6 f7 f7 f8 f8 f9 f9 fa		                      .text  $f6, $f7, $f7, $f8, $f8, $f9, $f9, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $ff
>3977f8	fb fb fc fc fd fd fe ff
>397800					.align 256
>397800	1d c8 a7 ac 10 d6 52 7c		RANDOM_LUT_Tbl		    .text  $1d, $c8, $a7, $ac, $10, $d6, $52, $7c, $83, $dd, $ce, $39, $cd, $c5, $3b, $15
>397808	83 dd ce 39 cd c5 3b 15
>397810	22 55 3b 94 e0 33 1f 38						              .text  $22, $55, $3b, $94, $e0, $33, $1f, $38, $87, $12, $31, $65, $89, $27, $88, $42
>397818	87 12 31 65 89 27 88 42
>397820	b2 32 72 84 b2 b2 31 52						              .text  $b2, $32, $72, $84, $b2, $b2, $31, $52, $94, $ce, $56, $ec, $fe, $da, $58, $c9
>397828	94 ce 56 ec fe da 58 c9
>397830	c8 5b 53 2a 08 3b 19 c1						              .text  $c8, $5b, $53, $2a, $08, $3b, $19, $c1, $d0, $10, $2c, $b2, $4b, $ea, $32, $61
>397838	d0 10 2c b2 4b ea 32 61
>397840	da 34 33 8f 2b da 49 89						              .text  $da, $34, $33, $8f, $2b, $da, $49, $89, $a1, $e6, $ca, $2d, $b3, $ce, $b0, $79
>397848	a1 e6 ca 2d b3 ce b0 79
>397850	44 aa 32 82 91 e9 29 16						              .text  $44, $aa, $32, $82, $91, $e9, $29, $16, $5f, $e3, $fb, $bd, $15, $2e, $be, $f5
>397858	5f e3 fb bd 15 2e be f5
>397860	e9 4a e4 2e 60 24 94 35						              .text  $e9, $4a, $e4, $2e, $60, $24, $94, $35, $8d, $8f, $2c, $80, $0a, $5e, $99, $36
>397868	8d 8f 2c 80 0a 5e 99 36
>397870	ac ab 21 26 42 7c 5e bc						              .text  $ac, $ab, $21, $26, $42, $7c, $5e, $bc, $13, $52, $44, $2f, $e3, $ef, $44, $a2
>397878	13 52 44 2f e3 ef 44 a2
>397880	86 c1 9c 47 5f 36 6d 02						              .text  $86, $c1, $9c, $47, $5f, $36, $6d, $02, $be, $23, $02, $58, $0a, $52, $5e, $b4
>397888	be 23 02 58 0a 52 5e b4
>397890	9f 06 08 c9 97 cb 9e dd						              .text  $9f, $06, $08, $c9, $97, $cb, $9e, $dd, $d5, $cf, $3e, $df, $c4, $9e, $da, $bb
>397898	d5 cf 3e df c4 9e da bb
>3978a0	9b 5d c9 f5 d9 c3 7e 87						              .text  $9b, $5d, $c9, $f5, $d9, $c3, $7e, $87, $77, $7d, $b1, $3b, $4a, $68, $35, $6e
>3978a8	77 7d b1 3b 4a 68 35 6e
>3978b0	ee 47 ad 8f fd 73 2e 46						              .text  $ee, $47, $ad, $8f, $fd, $73, $2e, $46, $b5, $8f, $44, $63, $55, $6f, $e1, $50
>3978b8	b5 8f 44 63 55 6f e1 50
>3978c0	f4 b6 a3 4f 68 c4 a5 a4						              .text  $f4, $b6, $a3, $4f, $68, $c4, $a5, $a4, $57, $74, $b9, $bd, $05, $14, $50, $eb
>3978c8	57 74 b9 bd 05 14 50 eb
>3978d0	a5 5c 57 2f 99 dc 2e 8a						              .text  $a5, $5c, $57, $2f, $99, $dc, $2e, $8a, $44, $bc, $ec, $db, $22, $58, $fc, $be
>3978d8	44 bc ec db 22 58 fc be
>3978e0	5f 3f 50 bd 2a 36 ab ae						              .text  $5f, $3f, $50, $bd, $2a, $36, $ab, $ae, $24, $aa, $82, $11, $5c, $9f, $43, $4d
>3978e8	24 aa 82 11 5c 9f 43 4d
>3978f0	8f 0c 20 00 91 b6 45 9e						              .text  $8f, $0c, $20, $00, $91, $b6, $45, $9e, $3e, $3d, $66, $7e, $0a, $1c, $6b, $74
>3978f8	3e 3d 66 7e 0a 1c 6b 74
>397900					.align 16
>397900	00 01 01 00 00 00 00 00		MOUSE_POINTER_PTR     .text $00,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00
>397908	01 01 01 00 00 00 00 00
>397910	01 ff ff 01 00 00 01 01		                      .text $01,$FF,$FF,$01,$00,$00,$01,$01,$FF,$FF,$FF,$01,$00,$00,$00,$00
>397918	ff ff ff 01 00 00 00 00
>397920	01 ff ff ff 01 01 55 ff		                      .text $01,$FF,$FF,$FF,$01,$01,$55,$FF,$01,$55,$FF,$FF,$01,$00,$00,$00
>397928	01 55 ff ff 01 00 00 00
>397930	01 55 ff ff ff ff 01 55		                      .text $01,$55,$FF,$FF,$FF,$FF,$01,$55,$FF,$FF,$FF,$FF,$01,$00,$00,$00
>397938	ff ff ff ff 01 00 00 00
>397940	00 01 55 ff ff ff ff ff		                      .text $00,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$00,$00
>397948	ff ff 01 ff ff 01 00 00
>397950	00 00 01 55 ff ff ff ff		                      .text $00,$00,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$FF,$01,$00,$00
>397958	01 ff ff 01 ff 01 00 00
>397960	00 00 01 01 55 ff ff ff		                      .text $00,$00,$01,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$FF,$01,$00,$00
>397968	ff 01 ff ff ff 01 00 00
>397970	00 00 01 55 01 55 ff ff		                      .text $00,$00,$01,$55,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$01,$00
>397978	ff ff ff ff ff 01 01 00
>397980	00 00 01 55 55 55 ff ff		                      .text $00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01
>397988	ff ff ff ff 01 ff ff 01
>397990	00 00 00 01 55 55 55 ff		                      .text $00,$00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01
>397998	ff ff ff ff ff ff ff 01
>3979a0	00 00 00 00 01 55 55 55		                      .text $00,$00,$00,$00,$01,$55,$55,$55,$55,$55,$01,$FF,$FF,$55,$01,$00
>3979a8	55 55 01 ff ff 55 01 00
>3979b0	00 00 00 00 00 01 01 01		                      .text $00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$55,$FF,$55,$01,$00,$00
>3979b8	01 01 55 ff 55 01 00 00
>3979c0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$55,$01,$00,$00,$00
>3979c8	01 55 55 55 01 00 00 00
>3979d0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$01,$00,$00,$00,$00
>3979d8	01 55 55 01 00 00 00 00
>3979e0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00
>3979e8	00 01 01 00 00 00 00 00
>3979f0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>3979f8	00 00 00 00 00 00 00 00
.3ff000					FONT_4_BANK0
>3ff000	00 00 00 00 00 00 00 00		.binary "FONT/Bm437_PhoenixEGA_8x8.bin", 0, 2048
>3ff008	7e 81 a5 81 bd 99 81 7e 3c 7e db ff c3 7e 3c 00
>3ff018	00 ee fe fe 7c 38 10 00 10 38 7c fe 7c 38 10 00
>3ff028	00 3c 18 ff ff 08 18 00 10 38 7c fe fe 10 38 00
>3ff038	00 00 18 3c 18 00 00 00 ff ff e7 c3 e7 ff ff ff
>3ff048	00 3c 42 81 81 42 3c 00 ff c3 bd 7e 7e bd c3 ff
>3ff058	01 03 07 0f 1f 3f 7f ff ff fe fc f8 f0 e0 c0 80
>3ff068	04 06 07 04 04 fc f8 00 0c 0a 0d 0b f9 f9 1f 1f
>3ff078	00 92 7c 44 c6 7c 92 00 00 00 60 78 7e 78 60 00
>3ff088	00 00 06 1e 7e 1e 06 00 18 7e 18 18 18 18 7e 18
>3ff098	66 66 66 66 66 00 66 00 ff b6 76 36 36 36 36 00
>3ff0a8	7e c1 dc 22 22 1f 83 7e 00 00 00 7e 7e 00 00 00
>3ff0b8	18 7e 18 18 7e 18 00 ff 18 7e 18 18 18 18 18 00
>3ff0c8	18 18 18 18 18 7e 18 00 00 04 06 ff 06 04 00 00
>3ff0d8	00 20 60 ff 60 20 00 00 00 00 00 c0 c0 c0 ff 00
>3ff0e8	00 24 66 ff 66 24 00 00 00 00 10 38 7c fe 00 00
>3ff0f8	00 00 00 fe 7c 38 10 00 00 00 00 00 00 00 00 00
>3ff108	30 30 30 30 30 00 30 00 66 66 00 00 00 00 00 00
>3ff118	6c 6c fe 6c fe 6c 6c 00 10 7c d2 7c 86 7c 10 00
>3ff128	f0 96 fc 18 3e 72 de 00 30 48 30 78 ce cc 78 00
>3ff138	0c 0c 18 00 00 00 00 00 10 60 c0 c0 c0 60 10 00
>3ff148	10 0c 06 06 06 0c 10 00 00 54 38 fe 38 54 00 00
>3ff158	00 18 18 7e 18 18 00 00 00 00 00 00 00 00 18 70
>3ff168	00 00 00 7e 00 00 00 00 00 00 00 00 00 00 18 00
>3ff178	02 06 0c 18 30 60 c0 00 7c ce de f6 e6 e6 7c 00
>3ff188	18 38 78 18 18 18 3c 00 7c c6 06 0c 30 60 fe 00
>3ff198	7c c6 06 3c 06 c6 7c 00 0e 1e 36 66 fe 06 06 00
>3ff1a8	fe c0 c0 fc 06 06 fc 00 7c c6 c0 fc c6 c6 7c 00
>3ff1b8	fe 06 0c 18 30 60 60 00 7c c6 c6 7c c6 c6 7c 00
>3ff1c8	7c c6 c6 7e 06 c6 7c 00 00 30 00 00 00 30 00 00
>3ff1d8	00 30 00 00 00 30 20 00 00 1c 30 60 30 1c 00 00
>3ff1e8	00 00 7e 00 7e 00 00 00 00 70 18 0c 18 70 00 00
>3ff1f8	7c c6 0c 18 30 00 30 00 7c 82 9a aa aa 9e 7c 00
>3ff208	7c c6 c6 fe c6 c6 c6 00 fc 66 66 7c 66 66 fc 00
>3ff218	7c c6 c0 c0 c0 c6 7c 00 fc 66 66 66 66 66 fc 00
>3ff228	fe 62 68 78 68 62 fe 00 fe 62 68 78 68 60 f0 00
>3ff238	7c c6 c6 c0 de c6 7c 00 c6 c6 c6 fe c6 c6 c6 00
>3ff248	3c 18 18 18 18 18 3c 00 1e 0c 0c 0c 0c cc 78 00
>3ff258	c6 cc d8 f0 d8 cc c6 00 f0 60 60 60 60 62 fe 00
>3ff268	c6 ee fe d6 c6 c6 c6 00 c6 e6 f6 de ce c6 c6 00
>3ff278	7c c6 c6 c6 c6 c6 7c 00 fc 66 66 7c 60 60 f0 00
>3ff288	7c c6 c6 c6 c6 c6 7c 0c fc 66 66 7c 66 66 e6 00
>3ff298	7c c6 c0 7c 06 c6 7c 00 7e 5a 18 18 18 18 3c 00
>3ff2a8	c6 c6 c6 c6 c6 c6 7c 00 c6 c6 c6 c6 c6 6c 38 00
>3ff2b8	c6 c6 c6 c6 d6 ee c6 00 c6 6c 38 38 38 6c c6 00
>3ff2c8	66 66 66 3c 18 18 3c 00 fe c6 0c 18 30 66 fe 00
>3ff2d8	1c 18 18 18 18 18 1c 00 c0 60 30 18 0c 06 02 00
>3ff2e8	70 30 30 30 30 30 70 00 00 00 10 38 6c c6 00 00
>3ff2f8	00 00 00 00 00 00 00 ff 30 30 18 00 00 00 00 00
>3ff308	00 00 7c 06 7e c6 7e 00 c0 c0 fc c6 c6 c6 fc 00
>3ff318	00 00 7c c6 c0 c6 7c 00 06 06 7e c6 c6 c6 7e 00
>3ff328	00 00 7c c6 fe c0 7c 00 3c 66 60 f0 60 60 60 00
>3ff338	00 00 7e c6 c6 7e 06 7c c0 c0 fc c6 c6 c6 c6 00
>3ff348	18 00 38 18 18 18 3c 00 00 0c 00 1c 0c 0c cc 78
>3ff358	c0 c0 c6 d8 f0 d8 c6 00 38 18 18 18 18 18 3c 00
>3ff368	00 00 ee fe d6 c6 c6 00 00 00 fc c6 c6 c6 c6 00
>3ff378	00 00 7c c6 c6 c6 7c 00 00 00 fc c6 c6 fc c0 c0
>3ff388	00 00 7e c6 c6 7e 06 06 00 00 de 76 60 60 60 00
>3ff398	00 00 7c c0 7c 06 7c 00 18 18 7e 18 18 18 1e 00
>3ff3a8	00 00 c6 c6 c6 c6 7e 00 00 00 c6 c6 c6 6c 38 00
>3ff3b8	00 00 c6 c6 d6 fe c6 00 00 00 c6 6c 38 6c c6 00
>3ff3c8	00 00 c6 c6 c6 7e 06 7c 00 00 fe 0c 18 60 fe 00
>3ff3d8	0e 18 18 70 18 18 0e 00 18 18 18 00 18 18 18 00
>3ff3e8	e0 30 30 1c 30 30 e0 00 00 00 70 9a 0e 00 00 00
>3ff3f8	00 00 18 3c 66 ff 00 00 7c c6 c0 c0 c6 7c 18 70
>3ff408	66 00 c6 c6 c6 c6 7e 00 0e 18 7c c6 fe c0 7c 00
>3ff418	18 24 7c 06 7e c6 7e 00 66 00 7c 06 7e c6 7e 00
>3ff428	38 0c 7c 06 7e c6 7e 00 18 00 7c 06 7e c6 7e 00
>3ff438	00 00 7c c0 c0 7c 18 70 18 24 7c c6 fe c0 7c 00
>3ff448	66 00 7c c6 fe c0 7c 00 70 18 7c c6 fe c0 7c 00
>3ff458	66 00 38 18 18 18 3c 00 18 24 38 18 18 18 3c 00
>3ff468	38 0c 38 18 18 18 3c 00 66 00 7c c6 fe c6 c6 00
>3ff478	18 00 7c c6 fe c6 c6 00 0e 18 fe 60 78 60 fe 00
>3ff488	00 00 7c 1a 7e d8 7e 00 7e d8 d8 de f8 d8 de 00
>3ff498	18 24 7c c6 c6 c6 7c 00 66 00 7c c6 c6 c6 7c 00
>3ff4a8	38 0c 7c c6 c6 c6 7c 00 18 24 c6 c6 c6 c6 7e 00
>3ff4b8	38 0c c6 c6 c6 c6 7e 00 66 00 c6 c6 c6 7e 06 7c
>3ff4c8	66 7c c6 c6 c6 c6 7c 00 c6 00 c6 c6 c6 c6 7c 00
>3ff4d8	18 7c c6 c0 c6 7c 18 00 1e 32 30 78 30 70 fe 00
>3ff4e8	66 3c 18 7e 18 3c 18 00 fc c6 fc c0 cc de cc 0e
>3ff4f8	00 1c 32 30 fc 30 f0 00 0e 18 7c 06 7e c6 7e 00
>3ff508	1a 30 38 18 18 18 3c 00 0e 18 7c c6 c6 c6 7c 00
>3ff518	0e 18 c6 c6 c6 c6 7e 00 66 98 fc c6 c6 c6 c6 00
>3ff528	66 98 e6 f6 de ce c6 00 7c 06 7e c6 7e 00 fe 00
>3ff538	7c c6 c6 c6 7c 00 fe 00 18 00 18 30 60 c6 7c 00
>3ff548	00 00 fe c0 c0 c0 c0 00 00 00 fe 06 06 06 06 00
>3ff558	c0 c0 c0 de 06 0c 1e 00 c0 c0 c0 cc 1c 3e 0c 00
>3ff568	30 00 30 30 30 30 30 00 00 36 6c d8 6c 36 00 00
>3ff578	00 d8 6c 36 6c d8 00 00 aa aa aa aa aa aa aa aa
>3ff588	aa 55 aa 55 aa 55 aa 55 44 22 44 22 44 22 44 22
>3ff598	18 18 18 18 18 18 18 18 18 18 18 f8 18 18 18 18
>3ff5a8	18 18 18 f8 18 f8 18 18 36 36 36 f6 36 36 36 36
>3ff5b8	00 00 00 fe 36 36 36 36 00 00 00 f8 18 f8 18 18
>3ff5c8	36 36 36 f6 06 f6 36 36 36 36 36 36 36 36 36 36
>3ff5d8	00 00 00 fe 06 f6 36 36 36 36 36 f6 06 fe 00 00
>3ff5e8	36 36 36 fe 00 00 00 00 18 18 18 f8 18 f8 00 00
>3ff5f8	00 00 00 f8 18 18 18 18 18 18 18 1f 00 00 00 00
>3ff608	18 18 18 ff 00 00 00 00 00 00 00 ff 18 18 18 18
>3ff618	18 18 18 1f 18 18 18 18 00 00 00 ff 00 00 00 00
>3ff628	18 18 18 ff 18 18 18 18 18 18 18 1f 18 1f 18 18
>3ff638	36 36 36 37 36 36 36 36 36 36 36 37 30 3f 00 00
>3ff648	00 00 00 3f 30 37 36 36 36 36 36 f7 00 ff 00 00
>3ff658	00 00 00 ff 00 f7 36 36 36 36 36 37 30 37 36 36
>3ff668	00 00 00 ff 00 ff 00 00 36 36 36 f7 00 f7 36 36
>3ff678	18 18 18 ff 00 ff 00 00 36 36 36 ff 00 00 00 00
>3ff688	00 00 00 ff 00 ff 18 18 00 00 00 ff 36 36 36 36
>3ff698	36 36 36 3f 00 00 00 00 18 18 18 1f 18 1f 00 00
>3ff6a8	00 00 00 1f 18 1f 18 18 00 00 00 3f 36 36 36 36
>3ff6b8	36 36 36 ff 36 36 36 36 18 18 18 ff 18 ff 18 18
>3ff6c8	18 18 18 f8 00 00 00 00 00 00 00 1f 18 18 18 18
>3ff6d8	ff ff ff ff ff ff ff ff 00 00 00 00 ff ff ff ff
>3ff6e8	f0 f0 f0 f0 f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f
>3ff6f8	ff ff ff ff 00 00 00 00 00 00 77 98 98 77 00 00
>3ff708	1c 36 66 fc c6 c6 fc c0 fe 62 60 60 60 60 60 00
>3ff718	00 00 ff 66 66 66 66 00 fe 62 30 18 30 62 fe 00
>3ff728	00 00 3f 66 c6 cc 78 00 00 00 33 33 33 3e 30 f0
>3ff738	00 00 ff 18 18 18 18 00 3c 18 3c 66 66 3c 18 3c
>3ff748	00 7c c6 fe c6 7c 00 00 00 7e c3 c3 c3 66 e7 00
>3ff758	1e 19 3c 66 c6 cc 78 00 00 00 66 99 99 66 00 00
>3ff768	00 03 7c ce e6 7c c0 00 00 3e c0 fe c0 3e 00 00
>3ff778	00 7e c3 c3 c3 c3 00 00 00 fe 00 fe 00 fe 00 00
>3ff788	18 18 7e 18 18 7e 00 00 70 18 0c 18 70 00 fe 00
>3ff798	1c 30 60 30 1c 00 fe 00 00 0e 1b 18 18 18 18 18
>3ff7a8	18 18 18 18 18 d8 70 00 00 18 00 7e 00 18 00 00
>3ff7b8	00 76 dc 00 76 dc 00 00 3c 66 3c 00 00 00 00 00
>3ff7c8	00 18 3c 18 00 00 00 00 00 00 00 00 18 00 00 00
>3ff7d8	0f 0c 0c 0c ec 6c 38 00 d8 ec cc cc 00 00 00 00
>3ff7e8	f0 30 c0 f0 00 00 00 00 00 00 00 3c 3c 3c 3c 00
>3ff7f8	00 00 00 00 00 00 00 00
.3ff800					FONT_4_BANK1
>3ff800	00 00 00 00 00 00 00 00		.binary "FONT/CBM-ASCII_8x8.bin", 0, 2048
>3ff808	7c 82 aa 82 ba 92 82 7c 7c fe d6 fe c6 ee fe 7c
>3ff818	ff fd fb f5 eb d5 ab ff ff e1 fd 85 85 87 87 ff
>3ff828	ff bd db e7 e7 db bd ff ff 81 81 bd bd bd 81 ff
>3ff838	ff ff ff ff ff 81 81 ff 00 08 10 20 10 08 00 00
>3ff848	00 24 14 0c 14 24 00 00 00 8e 88 8c 88 e8 00 00
>3ff858	00 00 00 00 00 00 00 00 00 ee 88 cc 88 88 00 00
>3ff868	00 00 04 14 3c 10 00 00 00 30 4c 4c 30 00 00 00
>3ff878	00 38 28 38 28 00 00 00 ff 81 bd bd bd bd 81 ff
>3ff888	ff 55 aa 55 aa 55 aa ff ab d5 ab d5 ab d5 ab d5
>3ff898	ff 81 81 81 81 81 81 ff ff f9 e1 81 81 e1 f9 ff
>3ff8a8	ff 9f 87 81 81 87 9f ff ff e7 e7 c3 c3 81 81 ff
>3ff8b8	ff 81 81 c3 c3 e7 e7 ff 00 26 54 04 04 04 06 00
>3ff8c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 3 times (48 bytes)...
>3ff908	10 10 10 10 00 10 00 00 24 24 24 00 00 00 00 00
>3ff918	24 7e 24 24 7e 24 00 00 10 3c 50 38 14 78 10 00
>3ff928	62 64 08 10 20 4c 8c 00 30 48 48 30 58 4c 4c 38
>3ff938	10 10 10 00 00 00 00 00 08 10 20 20 20 20 10 08
>3ff948	10 08 04 04 04 04 08 10 00 24 18 7e 18 24 00 00
>3ff958	00 10 10 7c 10 10 00 00 00 00 00 00 10 10 20 00
>3ff968	00 00 00 3c 00 00 00 00 00 00 00 00 18 18 00 00
>3ff978	04 04 08 08 10 10 20 20 3c 46 4a 52 62 42 3c 00
>3ff988	10 30 10 10 10 10 38 00 38 44 04 18 20 40 7c 00
>3ff998	38 44 04 18 04 44 38 00 08 18 28 48 7c 08 08 00
>3ff9a8	7c 40 78 04 04 44 38 00 38 44 40 78 44 44 38 00
>3ff9b8	7c 44 04 08 08 10 10 00 38 44 44 38 44 44 38 00
>3ff9c8	38 44 44 3c 04 44 38 00 00 00 18 00 00 18 00 00
>3ff9d8	00 00 18 00 00 18 18 30 00 08 10 20 10 08 00 00
>3ff9e8	00 00 3c 00 3c 00 00 00 00 10 08 04 08 10 00 00
>3ff9f8	38 44 04 08 10 00 10 00 38 44 4c 4c 40 44 38 00
>3ffa08	10 28 44 7c 44 44 00 00 78 44 78 44 44 78 00 00
>3ffa18	38 44 40 40 44 38 00 00 78 44 44 44 44 78 00 00
>3ffa28	7c 40 78 40 40 7c 00 00 7c 40 78 40 40 40 00 00
>3ffa38	38 44 40 4c 44 38 00 00 44 44 7c 44 44 44 00 00
>3ffa48	38 10 10 10 10 38 00 00 1c 08 08 08 48 30 00 00
>3ffa58	24 28 30 30 28 24 00 00 20 20 20 20 20 3c 00 00
>3ffa68	44 6c 7c 54 44 44 00 00 44 64 54 4c 44 44 00 00
>3ffa78	38 44 44 44 44 38 00 00 78 44 44 78 40 40 00 00
>3ffa88	38 44 44 44 44 38 0c 00 78 44 44 78 48 44 00 00
>3ffa98	3c 40 38 04 04 78 00 00 7c 10 10 10 10 10 00 00
>3ffaa8	44 44 44 44 44 38 00 00 44 44 44 44 28 10 00 00
>3ffab8	82 82 82 92 92 6c 00 00 42 24 18 18 24 42 00 00
>3ffac8	44 44 28 10 10 10 00 00 7c 08 10 20 40 7c 00 00
>3ffad8	38 20 20 20 20 20 38 00 20 20 10 10 08 08 04 04
>3ffae8	38 08 08 08 08 08 38 00 00 10 28 44 00 00 00 00
>3ffaf8	00 00 00 00 00 00 00 7e 40 20 10 00 00 00 00 00
>3ffb08	00 38 04 3c 64 3c 00 00 40 40 78 44 44 78 00 00
>3ffb18	00 00 38 40 40 38 00 00 04 04 3c 44 44 3c 00 00
>3ffb28	00 38 44 7c 40 3c 00 00 0c 10 3c 10 10 10 00 00
>3ffb38	00 00 3c 44 44 3c 04 78 40 40 78 44 44 44 00 00
>3ffb48	10 00 30 10 10 38 00 00 08 00 08 08 08 08 08 30
>3ffb58	20 20 24 38 28 24 00 00 30 10 10 10 10 10 00 00
>3ffb68	00 00 68 54 54 44 00 00 00 00 38 24 24 24 00 00
>3ffb78	00 00 38 44 44 38 00 00 00 00 78 44 44 78 40 40
>3ffb88	00 00 3c 44 44 3c 04 04 00 00 78 44 40 40 00 00
>3ffb98	00 00 1c 30 0c 38 00 00 00 10 7c 10 10 10 0c 00
>3ffba8	00 00 44 44 44 3c 00 00 00 00 42 42 24 18 00 00
>3ffbb8	00 00 82 82 92 6c 00 00 00 00 24 18 18 24 00 00
>3ffbc8	00 00 24 24 24 1c 04 38 00 00 7c 18 30 7c 00 00
>3ffbd8	0c 10 10 30 30 10 10 0c 18 18 18 00 18 18 18 00
>3ffbe8	30 08 08 0c 0c 08 08 30 00 00 32 7e 4c 00 00 00
>3ffbf8	00 00 10 28 38 00 00 00 00 00 3c 3c 3c 3c 00 00
>3ffc08	00 00 3c 24 24 3c 00 00 00 00 18 3c 3c 18 00 00
>3ffc18	00 00 18 24 24 18 00 00 18 24 24 18 00 00 00 00
>3ffc28	00 3c 42 42 66 24 66 00 00 18 00 18 0c 06 66 3c
>3ffc38	0c 12 30 7c 30 62 fc 00 1c 20 70 20 70 20 1c 00
>3ffc48	02 06 0c d8 f0 e0 c0 00 18 18 ff 00 00 ff 00 00
>3ffc58	00 00 ff 00 00 ff 18 18 24 24 24 e7 e7 24 24 24
>3ffc68	18 18 ff 00 00 ff 18 18 24 24 24 27 27 24 24 24
>3ffc78	24 24 24 e4 e4 24 24 24 00 00 00 ff ff ff ff ff
>3ffc88	00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>3ffc98	ff ff ff ff ff ff ff 00 ff ff ff ff ff ff 00 00
>3ffca8	ff ff ff ff ff 00 00 00 ff ff ff ff 00 00 00 00
>3ffcb8	f8 f8 f8 f8 f8 f8 f8 f8 fc fc fc fc fc fc fc fc
>3ffcc8	fe fe fe fe fe fe fe fe 7f 7f 7f 7f 7f 7f 7f 7f
>3ffcd8	3f 3f 3f 3f 3f 3f 3f 3f 1f 1f 1f 1f 1f 1f 1f 1f
>3ffce8	0f 0f 0f 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00
>3ffcf8	00 00 00 00 00 00 00 00 ff ff ff ff ff ff ff ff
>3ffd08	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 00 ff ff ff ff
>3ffd18	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>3ffd28	80 80 80 80 80 80 80 80 aa 55 aa 55 aa 55 aa 55
>3ffd38	01 01 01 01 01 01 01 01 00 00 00 00 aa 55 aa 55
>3ffd48	ff fe fc f8 f0 e0 c0 80 03 03 03 03 03 03 03 03
>3ffd58	18 18 18 1f 1f 18 18 18 00 00 00 00 0f 0f 0f 0f
>3ffd68	18 18 18 1f 1f 00 00 00 00 00 00 f8 f8 18 18 18
>3ffd78	00 00 00 00 00 00 ff ff 00 00 00 1f 1f 18 18 18
>3ffd88	18 18 18 ff ff 00 00 00 00 00 00 ff ff 18 18 18
>3ffd98	18 18 18 f8 f8 18 18 18 c0 c0 c0 c0 c0 c0 c0 c0
>3ffda8	e0 e0 e0 e0 e0 e0 e0 e0 07 07 07 07 07 07 07 07
>3ffdb8	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00
>3ffdc8	00 00 00 00 00 ff ff ff 03 03 03 03 03 03 ff ff
>3ffdd8	00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>3ffde8	18 18 18 f8 f8 00 00 00 f0 f0 f0 f0 00 00 00 00
>3ffdf8	f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 ff ff 00 00 00
>3ffe08	08 1c 3e 7f 7f 1c 3e 00 18 18 18 18 18 18 18 18
>3ffe18	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00
>3ffe28	00 ff ff 00 00 00 00 00 00 00 00 00 ff ff 00 00
>3ffe38	30 30 30 30 30 30 30 30 0c 0c 0c 0c 0c 0c 0c 0c
>3ffe48	00 00 00 e0 f0 38 18 18 18 18 1c 0f 07 00 00 00
>3ffe58	18 18 38 f0 e0 00 00 00 c0 c0 c0 c0 c0 c0 ff ff
>3ffe68	c0 e0 70 38 1c 0e 07 03 03 07 0e 1c 38 70 e0 c0
>3ffe78	ff ff c0 c0 c0 c0 c0 c0 ff ff 03 03 03 03 03 03
>3ffe88	00 3c 7e 7e 7e 7e 3c 00 00 00 00 00 00 ff ff 00
>3ffe98	36 7f 7f 7f 3e 1c 08 00 60 60 60 60 60 60 60 60
>3ffea8	00 00 00 07 0f 1c 18 18 c3 e7 7e 3c 3c 7e e7 c3
>3ffeb8	00 3c 7e 66 66 7e 3c 00 18 18 66 66 18 18 3c 00
>3ffec8	06 06 06 06 06 06 06 06 08 1c 3e 7f 3e 1c 08 00
>3ffed8	18 18 18 ff ff 18 18 18 c0 c0 30 30 c0 c0 30 30
>3ffee8	18 18 18 18 18 18 18 18 00 00 03 3e 76 36 36 00
>3ffef8	ff 7f 3f 1f 0f 07 03 01 24 24 24 24 24 24 24 24
>3fff08	00 00 ff 00 00 ff 00 00 00 00 3f 20 20 27 24 24
>3fff18	00 00 ff 00 00 e7 24 24 00 00 fc 04 04 e4 24 24
>3fff28	24 24 27 20 20 3f 00 00 24 24 e7 00 00 ff 00 00
>3fff38	24 24 e4 04 04 fc 00 00 24 24 27 20 20 27 24 24
>3fff48	24 24 e4 04 04 e4 24 24 24 24 e7 00 00 e7 24 24
>3fff58	0f 0f 0f 0f f0 f0 f0 f0 01 03 07 0f 1f 3f 7f ff
>3fff68	80 c0 e0 f0 f8 fc fe ff 33 99 cc 66 33 99 cc 66
>3fff78	cc 99 33 66 cc 99 33 66 f0 f0 f0 f0 ff ff ff ff
>3fff88	0f 0f 0f 0f ff ff ff ff ff ff ff ff f0 f0 f0 f0
>3fff98	ff ff ff ff 0f 0f 0f 0f 05 0a 05 0a 00 00 00 00
>3fffa8	00 00 00 00 0a 05 0a 05 a0 50 a0 50 00 00 00 00
>3fffb8	00 00 00 00 a0 50 a0 50 0a 05 0a 05 0a 05 0a 05
>3fffc8	aa 55 aa 55 00 00 00 00 00 18 3c 7e 18 18 18 18
>3fffd8	00 10 30 7f 7f 30 10 00 00 08 0c fe fe 0c 08 00
>3fffe8	18 18 18 18 7e 3c 18 00 00 00 36 49 36 00 00 00
>3ffff8	00 00 00 00 00 00 00 00
>3a0000	5c c1 6c 3a 5c d3 52 3a		.binary "binaries/basic816.bin"
>3a0008	5c 10 21 3a 5c 40 01 3a 5c 58 00 3a 5c d6 00 3a
>3a0018	5c 6b 02 3a 5c e4 00 3a 5c ff 00 3a 5c 06 01 3a
>3a0028	0b 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 85 b3
>3a0038	c2 20 a5 a4 d0 06 e2 20 a5 a6 f0 11 c2 10 a4 a9
>3a0048	c4 a7 f0 09 e2 20 a5 b3 97 a4 c8 84 a9 28 2b 60
>3a0058	08 c2 10 e2 20 a9 01 20 1c 00 a2 00 00 a9 00 9f
>3a0068	00 4c 00 e8 e0 00 01 d0 f6 a2 00 00 20 14 00 c9
>3a0078	0d d0 03 4c cf 00 c9 9d d0 08 e0 00 00 f0 ed ca
>3a0088	80 39 c9 1d d0 0e bf 00 4c 00 f0 e0 e0 4f 00 f0
>3a0098	db e8 80 27 c9 08 d0 1a e0 00 00 f0 cf da bf 01
>3a00a8	4c 00 9f 00 4c 00 f0 06 e8 e0 ff 00 d0 f0 fa ca
>3a00b8	80 0e c9 20 90 b6 9f 00 4c 00 e8 20 18 00 80 ac
>3a00c8	a9 08 20 18 00 80 a5 a9 00 20 1c 00 28 60 22 4c
>3a00d8	10 00 60 20 14 00 48 20 18 00 68 60 08 e2 20 c9
>3a00e8	00 f0 08 af 10 00 af 09 01 80 06 af 10 00 af 29
>3a00f8	fe 8f 10 00 af 28 60 08 22 84 10 00 28 60 48 da
>3a0108	5a 0b 08 e2 20 c2 10 a2 00 00 a9 20 9f 00 a0 af
>3a0118	af 1e 00 00 9f 00 c0 af e8 e0 00 20 d0 ec 08 c2
>3a0128	20 48 a9 00 00 5b 68 28 a2 00 00 a0 00 00 22 84
>3a0138	10 00 28 2b 7a fa 68 60 da 5a 0b 08 08 c2 20 48
>3a0148	a9 00 08 5b 68 28 c2 30 af 0c 00 00 85 08 e2 20
>3a0158	af 0e 00 00 c2 20 29 ff 00 85 0a af 11 00 00 8f
>3a0168	08 01 00 af 1c 00 00 3a 8f 0a 01 00 18 a5 08 6f
>3a0178	0c 01 00 85 08 a5 0a 69 00 00 85 0a e2 20 af 0f
>3a0188	00 00 85 8d a0 00 00 a2 00 00 b7 08 9f 00 4f 00
>3a0198	e8 c8 c4 8d d0 f4 ca bf 00 4f 00 c9 20 d0 09 a9
>3a01a8	00 9f 00 4f 00 ca 10 ef 28 2b 7a fa 60 e2 20 a9
>3a01b8	48 8f 0f 00 00 a9 34 8f 13 00 00 a9 20 8f 08 00
>3a01c8	af 8f 09 00 af a2 00 00 a9 00 9f 18 f0 3a e8 e0
>3a01d8	40 00 d0 f6 a9 80 8f b2 08 00 e2 20 a9 00 8f 89
>3a01e8	0f 00 a9 00 8f 00 02 af 8f 0c 02 af 8f 18 02 af
>3a01f8	8f 24 02 af 60 08 e2 20 48 48 a9 00 22 3c 10 00
>3a0208	68 22 18 10 00 af 89 0f 00 29 01 d0 f8 68 28 60
>3a0218	08 e2 20 48 48 a9 01 22 3c 10 00 68 22 18 10 00
>3a0228	af 89 0f 00 29 01 d0 f8 68 28 60 08 c2 20 48 e2
>3a0238	20 a9 0d 20 18 00 c2 20 68 28 60 08 22 78 10 00
>3a0248	28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a0258	a5 b4 1a 85 b4 cf 13 00 00 90 05 20 14 00 64 b4
>3a0268	2b 28 60 da 5a 0b 08 08 c2 20 48 a9 00 08 5b 68
>3a0278	28 e2 20 c2 10 8f b3 08 00 af b2 08 00 29 20 f0
>3a0288	07 af b3 08 00 20 28 00 af b2 08 00 29 80 f0 07
>3a0298	af b3 08 00 20 fd 01 af b2 08 00 29 40 f0 14 af
>3a02a8	b3 08 00 20 18 02 af b3 08 00 c9 0d d0 05 a9 0a
>3a02b8	20 18 02 28 2b 7a fa 60 08 e2 20 bd 00 00 f0 06
>3a02c8	20 18 00 e8 80 f5 28 60 08 c2 20 48 48 4a 4a 4a
>3a02d8	4a 4a 4a 4a 4a 20 ea 02 68 29 ff 00 20 ea 02 68
>3a02e8	28 60 08 c2 20 48 e2 20 48 4a 4a 4a 4a 20 01 03
>3a02f8	68 20 01 03 c2 20 68 28 60 08 c2 30 da 29 0f 00
>3a0308	aa bf 00 d0 3a 20 18 00 fa 28 60 08 c2 30 48 da
>3a0318	5a 8b 0b c2 30 a3 0b 18 69 03 00 aa e2 20 a9 3a
>3a0328	48 ab bd 00 00 f0 06 20 fd 01 e8 80 f5 c2 30 2b
>3a0338	ab 7a fa 68 28 60 08 e2 20 c9 5b b0 04 c9 41 b0
>3a0348	0b c9 7b b0 04 c9 61 b0 03 28 18 60 28 38 60 08
>3a0358	e2 20 c9 3a b0 04 c9 30 b0 03 28 18 60 28 38 60
>3a0368	08 e2 20 c9 3a b0 04 c9 30 b0 13 c9 67 b0 04 c9
>3a0378	61 b0 0b c9 47 b0 04 c9 41 b0 03 28 18 60 28 38
>3a0388	60 08 e2 20 c9 3a b0 04 c9 30 b0 12 c9 67 b0 04
>3a0398	c9 61 b0 0f c9 47 b0 04 c9 41 b0 09 28 60 38 e9
>3a03a8	30 80 f9 29 df 38 e9 37 80 f2 08 e2 20 c9 7b b0
>3a03b8	06 c9 61 90 02 29 df 28 60 08 e2 20 c2 10 bd 00
>3a03c8	00 f0 09 20 b2 03 9d 00 00 e8 80 f2 28 60 08 0b
>3a03d8	08 c2 20 48 a9 00 08 5b 68 28 c2 20 48 06 21 26
>3a03e8	23 a5 21 85 0c a5 23 85 0e 06 0c 26 0e 06 0c 26
>3a03f8	0e 18 a5 21 65 0c 85 21 a5 23 65 0e 85 23 68 2b
>3a0408	28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 20
>3a0418	a5 21 8f 12 01 00 a9 0a 00 8f 10 01 00 af 14 01
>3a0428	00 85 21 64 23 af 16 01 00 85 27 64 29 e2 20 a9
>3a0438	00 85 25 85 2b 2b 28 60 08 0b 08 c2 20 48 a9 00
>3a0448	08 5b 68 28 c2 20 a5 21 8f 12 01 00 a9 64 00 8f
>3a0458	10 01 00 af 14 01 00 85 21 64 23 af 16 01 00 85
>3a0468	27 64 29 e2 20 a9 00 85 25 85 2b 2b 28 60 08 c2
>3a0478	20 a5 21 d0 08 a5 23 d0 04 28 e2 02 60 28 c2 02
>3a0488	60 08 e2 20 a5 25 c9 00 d0 02 28 60 08 c2 20 48
>3a0498	a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20
>3a04a8	29 ff 00 20 d0 18 e2 20 dc d2 08 08 e2 20 a5 25
>3a04b8	c9 02 d0 02 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a04c8	e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00 20 d0 18
>3a04d8	e2 20 dc d2 08 08 e2 20 a5 25 c9 00 d0 08 c2 20
>3a04e8	a5 23 d0 21 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a04f8	e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00 20 d0 18
>3a0508	e2 20 dc d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a0518	20 a9 09 8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2
>3a0528	20 dc d2 08 08 e2 20 a5 25 c9 00 d0 0e a5 24 d0
>3a0538	29 a5 23 d0 25 a5 22 d0 21 28 60 08 c2 20 48 a9
>3a0548	00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20 29
>3a0558	ff 00 20 d0 18 e2 20 dc d2 08 08 c2 20 48 a9 00
>3a0568	08 5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff
>3a0578	00 20 d0 18 e2 20 dc d2 08 08 0b 08 c2 20 48 a9
>3a0588	00 08 5b 68 28 c2 30 64 21 64 23 e2 20 64 25 a7
>3a0598	00 c9 26 f0 44 e2 20 a7 00 20 57 03 90 76 20 d6
>3a05a8	03 38 e9 30 c2 20 29 ff 00 18 65 21 85 21 a5 23
>3a05b8	69 00 00 85 23 20 75 1b 80 db 08 c2 20 48 a9 00
>3a05c8	08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff
>3a05d8	00 20 d0 18 e2 20 dc d2 08 20 75 1b a7 00 c9 48
>3a05e8	f0 04 c9 68 d0 d4 20 75 1b e2 20 a7 00 20 68 03
>3a05f8	90 22 20 89 03 c2 20 06 21 26 23 06 21 26 23 06
>3a0608	21 26 23 06 21 26 23 29 ff 00 18 65 21 85 21 20
>3a0618	75 1b 80 d5 2b 28 60 08 c2 30 38 a5 04 e5 18 a8
>3a0628	e2 20 b7 18 f0 10 c9 20 f0 06 c9 09 f0 02 28 60
>3a0638	88 c0 ff ff d0 ec a9 00 60 08 0b 08 c2 20 48 a9
>3a0648	00 08 5b 68 28 c2 30 a5 18 85 00 e2 20 a5 1a 85
>3a0658	02 20 96 1b a7 00 20 57 03 90 0c 20 81 05 c2 20
>3a0668	a5 21 85 d5 20 96 1b c2 20 a5 00 85 18 e2 20 a5
>3a0678	02 85 1a 20 8f 06 e2 20 20 00 07 c9 00 f0 05 20
>3a0688	89 08 80 f4 2b 28 60 08 c2 20 a5 18 85 00 a5 1a
>3a0698	85 02 a2 00 00 e2 20 a0 00 00 e0 00 00 f0 0d b7
>3a06a8	00 f0 53 c9 3a f0 04 c9 20 d0 33 c8 b7 00 f0 46
>3a06b8	c9 52 f0 10 c9 72 d0 26 b7 00 f0 3a c9 52 f0 04
>3a06c8	c9 72 d0 1a c8 b7 00 f0 2d c9 45 f0 04 c9 65 d0
>3a06d8	0d c8 b7 00 f0 20 c9 4d f0 0a c9 6d f0 06 e8 20
>3a06e8	75 1b 80 b3 a7 00 c9 3a d0 03 20 75 1b a9 03 85
>3a06f8	1c a9 8e 20 89 08 28 60 08 0b 08 c2 20 48 a9 00
>3a0708	08 5b 68 28 e2 20 a9 7f 85 1c c2 10 20 3e 08 a5
>3a0718	1c d0 03 4c a3 07 c2 20 a5 18 85 00 e2 20 a5 1a
>3a0728	85 02 c2 20 64 04 64 06 e2 30 a0 00 b7 00 f0 da
>3a0738	c9 8e f0 d6 c8 c4 1c 90 f3 c2 10 a7 00 c9 22 d0
>3a0748	05 20 c5 07 80 28 a5 1c c9 01 f0 19 c2 20 a5 00
>3a0758	c5 18 d0 08 e2 20 a5 02 c5 1a f0 09 e2 20 a7 04
>3a0768	20 ef 45 b0 09 e2 20 20 d5 07 c9 00 d0 11 c2 20
>3a0778	a5 00 85 04 e2 20 a5 02 85 06 20 75 1b 80 a9 c9
>3a0788	81 d0 18 20 1f 06 c9 00 f0 14 89 80 10 0b 20 2a
>3a0798	09 c9 30 f0 04 a9 af 80 02 a9 81 2b 28 60 08 c2
>3a07a8	20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00
>3a07b8	c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 08 e2 20
>3a07c8	20 75 1b a7 00 f0 04 c9 22 d0 f5 28 60 08 0b c2
>3a07d8	30 da 5a 08 c2 20 48 a9 00 08 5b 68 28 a9 54 09
>3a07e8	85 08 e2 20 a9 3a 85 0a a2 80 00 e2 20 a0 01 00
>3a07f8	b7 08 f0 26 c5 1c d0 29 c2 30 a0 02 00 b7 08 85
>3a0808	0c e2 20 a9 3a 85 0e e2 10 a0 00 b7 00 20 b2 03
>3a0818	d7 0c d0 0d c8 c4 1c 90 f2 8a c2 10 7a fa 2b 28
>3a0828	60 c2 30 18 a5 08 69 08 00 85 08 e2 20 a5 0a 69
>3a0838	00 85 0a e8 80 b5 08 0b 8b 08 c2 20 48 a9 00 08
>3a0848	5b 68 28 c2 30 a9 54 09 85 08 a9 3a 00 85 0a 64
>3a0858	0c e2 20 a0 01 00 b7 08 f0 1d c5 1c b0 06 c5 0c
>3a0868	90 02 85 0c c2 20 18 a5 08 69 08 00 85 08 a5 0a
>3a0878	69 00 00 85 0a 80 da e2 20 a5 0c 85 1c ab 2b 28
>3a0888	60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 87
>3a0898	00 c2 20 18 a5 00 69 01 00 85 08 a5 02 69 00 00
>3a08a8	85 0a e2 10 a4 1c 88 e2 20 b7 08 87 08 f0 13 c2
>3a08b8	20 18 a5 08 69 01 00 85 08 a5 0a 69 00 00 85 0a
>3a08c8	80 e5 2b 28 60 08 c2 30 29 7f 00 0a 0a 0a 18 69
>3a08d8	54 09 aa 28 60 08 8b 0b 08 c2 20 48 a9 00 08 5b
>3a08e8	68 28 08 e2 20 48 a9 3a 48 ab 68 28 e2 20 c2 10
>3a08f8	20 cd 08 bd 00 00 c2 20 29 0f 00 2b ab 28 60 08
>3a0908	8b 0b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48
>3a0918	a9 3a 48 ab 68 28 c2 30 20 cd 08 bd 04 00 2b ab
>3a0928	28 60 08 8b 0b 08 c2 20 48 a9 00 08 5b 68 28 08
>3a0938	e2 20 48 a9 3a 48 ab 68 28 e2 20 c2 10 20 cd 08
>3a0948	bd 00 00 c2 20 29 f0 00 2b ab 28 60 03 01 10 d0
>3a0958	a3 21 00 00 03 01 12 d0 e2 21 00 00 02 01 14 d0
>3a0968	f0 21 00 00 02 01 16 d0 09 22 00 00 02 03 18 d0
>3a0978	1c 22 00 00 00 01 1c d0 00 00 00 00 04 01 1e d0
>3a0988	5e 22 00 00 04 01 20 d0 94 22 00 00 04 01 22 d0
>3a0998	79 22 00 00 05 03 24 d0 4d 22 00 00 06 03 28 d0
>3a09a8	2f 22 00 00 07 02 2c d0 3e 22 00 00 ff 01 2f d0
>3a09b8	00 00 00 00 40 01 31 d0 00 00 00 00 20 03 33 d0
>3a09c8	e8 37 00 00 20 05 37 d0 ed 3b 00 00 20 03 3d d0
>3a09d8	38 3b 00 00 20 04 41 d0 d8 3a 00 00 20 03 46 d0
>3a09e8	cf 3a 00 00 20 02 4a d0 67 3a 00 00 50 04 4d d0
>3a09f8	00 00 00 00 50 04 52 d0 00 00 00 00 20 05 57 d0
>3a0a08	aa 39 00 00 20 06 5d d0 23 3a 00 00 20 03 64 d0
>3a0a18	ff 37 00 00 50 02 68 d0 00 00 00 00 50 04 6b d0
>3a0a28	00 00 00 00 20 04 70 d0 f3 38 00 00 20 02 75 d0
>3a0a38	f9 37 00 00 20 04 78 d0 fc 37 00 00 50 05 7d d0
>3a0a48	00 00 00 00 50 05 83 d0 00 00 00 00 20 04 89 d0
>3a0a58	f6 37 00 00 20 03 8e d0 2e 3b 00 00 20 04 92 d0
>3a0a68	c9 37 00 00 20 04 97 d0 59 37 00 00 20 05 9c d0
>3a0a78	ef 36 00 00 20 05 a2 d0 7c 36 00 00 20 03 a8 d0
>3a0a88	78 36 00 00 20 04 ac d0 59 35 00 00 20 04 b1 d0
>3a0a98	6b 36 00 00 20 07 b6 d0 6f 36 00 00 20 03 be d0
>3a0aa8	ac 34 00 00 20 04 c2 d0 15 34 00 00 04 02 c7 d0
>3a0ab8	e7 22 00 00 04 02 ca d0 ca 22 00 00 04 02 cd d0
>3a0ac8	af 22 00 00 30 01 d0 d0 87 3d 00 00 30 03 d2 d0
>3a0ad8	a1 41 00 00 30 04 d6 d0 f1 41 00 00 30 05 db d0
>3a0ae8	82 42 00 00 30 05 e1 d0 34 42 00 00 30 04 e7 d0
>3a0af8	c1 42 00 00 30 03 ec d0 16 43 00 00 30 03 f0 d0
>3a0b08	5b 43 00 00 30 03 f4 d0 e4 43 00 00 30 03 f8 d0
>3a0b18	6d 44 00 00 30 03 fc d0 9d 44 00 00 30 04 00 d1
>3a0b28	10 41 00 00 30 03 05 d1 af 40 00 00 30 04 09 d1
>3a0b38	5e 40 00 00 30 03 0e d1 08 40 00 00 30 05 12 d1
>3a0b48	3f 3f 00 00 30 06 18 d1 5e 3e 00 00 30 04 1f d1
>3a0b58	a9 3d 00 00 10 03 24 d1 2b 45 00 00 10 03 28 d1
>3a0b68	f6 44 00 00 10 04 2c d1 b7 4e 00 00 10 04 31 d1
>3a0b78	42 45 00 00 10 03 36 d1 de 4b 00 00 20 05 3a d1
>3a0b88	89 4d 00 00 10 04 40 d1 64 4e 00 00 20 05 45 d1
>3a0b98	6e 4f 00 00 20 03 4b d1 8d 50 00 00 10 04 4f d1
>3a0ba8	fa 4f 00 00 20 06 54 d1 03 51 00 00 20 04 5b d1
>3a0bb8	1e 52 00 00 10 07 60 d1 f3 44 00 00 20 03 68 d1
>3a0bc8	a1 33 00 00 20 05 6c d1 d3 32 00 00 20 09 72 d1
>3a0bd8	69 24 00 00 20 09 7c d1 04 24 00 00 20 0a 86 d1
>3a0be8	32 24 00 00 20 07 91 d1 71 23 00 00 30 08 99 d1
>3a0bf8	b2 3c 00 00 20 07 a2 d1 06 23 00 00 30 08 aa d1
>3a0c08	1f 3d 00 00 20 08 b3 d1 7a 25 00 00 20 08 bc d1
>3a0c18	d6 24 00 00 20 06 c5 d1 aa 26 00 00 20 09 cc d1
>3a0c28	a8 27 00 00 20 04 d6 d1 3a 29 00 00 20 04 db d1
>3a0c38	8f 29 00 00 20 04 e0 d1 04 2a 00 00 20 06 e5 d1
>3a0c48	b9 2a 00 00 20 08 ec d1 46 2b 00 00 20 0a f5 d1
>3a0c58	7a 2b 00 00 20 07 00 d2 9d 2c 00 00 20 07 08 d2
>3a0c68	2b 2d 00 00 20 08 10 d2 a7 2d 00 00 20 06 19 d2
>3a0c78	e6 2d 00 00 20 07 20 d2 be 30 00 00 50 06 28 d2
>3a0c88	00 00 00 00 50 04 2f d2 00 00 00 00 00 00 00 00
>3a0c98	00 00 00 00 08 0b 08 c2 20 48 a9 00 08 5b 68 28
>3a0ca8	c2 30 a9 ff ff 85 b8 e2 20 a9 37 85 ba c2 20 64
>3a0cb8	b5 64 bb e2 20 64 b7 64 bd 2b 28 60 5a 08 e2 20
>3a0cc8	85 e8 c2 10 86 8d c2 20 a5 0e 48 a5 0c 48 a5 12
>3a0cd8	48 a5 10 48 20 74 0d b0 03 20 f8 0c 20 00 0f c2
>3a0ce8	20 68 85 10 68 85 12 68 85 0c 68 85 0e 28 7a 60
>3a0cf8	08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a6 8d
>3a0d08	ca 86 0c e8 c2 30 38 a5 b8 e5 0c 85 be e2 20 a5
>3a0d18	ba e9 00 85 c0 20 00 0f e2 20 a5 e8 a0 00 00 97
>3a0d28	c1 a9 00 a0 01 00 97 c1 a0 02 00 97 c1 c2 20 a9
>3a0d38	00 00 97 c1 c2 20 18 a5 b8 69 01 00 a0 05 00 97
>3a0d48	c1 e2 20 c8 c8 a5 ba 69 00 97 c1 c2 20 a5 be 85
>3a0d58	b5 e2 20 a5 c0 85 b7 c2 20 38 a5 c1 e9 01 00 85
>3a0d68	b8 e2 20 a5 c3 e9 00 85 ba 2b 28 60 08 0b 08 c2
>3a0d78	20 48 a9 00 08 5b 68 28 c2 30 c2 20 a5 bb 85 c7
>3a0d88	e2 20 a5 bd 85 c9 a5 c7 d0 17 e2 20 a5 c9 d0 11
>3a0d98	c2 20 a9 00 00 85 cd e2 20 a9 00 85 cf 2b 28 18
>3a0da8	60 c2 20 a0 05 00 b7 c7 85 ca e2 20 c8 c8 b7 c7
>3a0db8	85 cc c2 20 18 a5 c7 65 8d 85 0c e2 20 a5 c9 69
>3a0dc8	00 85 0e c2 20 18 a5 0c 69 08 00 85 0c e2 20 a5
>3a0dd8	0e 69 00 85 0e c2 20 a5 0c c5 ca d0 28 e2 20 a5
>3a0de8	0e c5 cc d0 20 c2 20 a5 cd d0 5d e2 20 a5 cf d0
>3a0df8	57 c2 20 a0 02 00 b7 c7 85 bb e2 20 c8 c8 b7 c7
>3a0e08	85 bd 4c b1 0e c2 20 a5 0c 69 08 00 85 10 e2 20
>3a0e18	a5 0e 69 00 85 12 e2 20 a5 c4 c5 10 b0 3e 90 08
>3a0e28	c2 20 a5 c4 c5 10 b0 34 c2 20 a5 c7 85 cd e2 20
>3a0e38	a5 c9 85 cf c2 20 a0 02 00 b7 cd 85 c7 e2 20 c8
>3a0e48	c8 b7 cd 85 c9 4c 8e 0d c2 20 a0 02 00 b7 c7 97
>3a0e58	cd e2 20 c8 c8 b7 c7 97 cd 4c b1 0e c2 20 a0 05
>3a0e68	00 b7 c7 97 0c e2 20 c8 c8 b7 c7 97 0c c2 20 a0
>3a0e78	02 00 b7 c7 97 0c e2 20 c8 c8 b7 c7 97 0c c2 20
>3a0e88	a5 cd d0 14 e2 20 a5 cd d0 0e c2 20 a5 0c 85 bb
>3a0e98	e2 20 a5 0e 85 bd 80 11 c2 20 a0 02 00 a5 0c 97
>3a0ea8	cd e2 20 c8 c8 a5 0e 97 cd c2 20 a5 c7 85 c1 e2
>3a0eb8	20 a5 c9 85 c3 c2 20 a5 c1 85 b5 e2 20 a5 c3 85
>3a0ec8	b7 c2 20 a0 05 00 a5 0c 97 c1 e2 20 c8 c8 a5 0e
>3a0ed8	97 c1 c2 20 a0 02 00 a9 00 00 97 c1 e2 20 c8 c8
>3a0ee8	97 c1 e2 20 a5 e8 e2 20 a0 00 00 97 c1 a0 01 00
>3a0ef8	a9 00 97 c1 2b 28 38 60 08 c2 20 38 a5 be e9 08
>3a0f08	00 85 c1 e2 20 a5 c0 e9 00 85 c3 28 60 08 e2 20
>3a0f18	a5 c3 f0 04 c9 38 b0 12 c2 20 a5 c1 f0 0c e2 20
>3a0f28	a0 01 00 b7 c1 1a 97 c1 28 60 00 ea 08 e2 20 a5
>3a0f38	c3 f0 04 c9 38 b0 17 c2 20 a5 c1 f0 11 e2 20 a0
>3a0f48	01 00 b7 c1 3a 97 c1 d0 03 20 58 0f 28 60 00 ea
>3a0f58	08 c2 20 a5 bb d0 21 e2 20 a5 bd d0 1b a5 c3 85
>3a0f68	bd c2 20 a5 c1 85 bb a9 00 00 a0 02 00 97 c1 c8
>3a0f78	c8 e2 20 97 c1 4c 3f 10 e2 20 a5 bd c5 c3 90 28
>3a0f88	c2 20 a5 bb c5 c1 90 20 c2 20 a5 bb a0 02 00 97
>3a0f98	c1 e2 20 c8 c8 a5 bd 97 c1 c2 20 a5 c1 85 bb e2
>3a0fa8	20 a5 c3 85 bd 4c 3f 10 c2 20 a5 bb 85 08 e2 20
>3a0fb8	a5 bd 85 0a e2 20 a0 04 00 b7 08 c5 c6 90 32 d0
>3a0fc8	0b c2 20 a0 02 00 b7 08 c5 c4 90 25 c2 20 a0 02
>3a0fd8	00 b7 08 97 c1 e2 20 c8 c8 b7 08 97 c1 c2 20 a5
>3a0fe8	c1 a0 02 00 97 08 e2 20 a5 c3 c8 c8 97 08 4c 3f
>3a0ff8	10 c2 20 a0 02 00 b7 08 d0 08 e2 20 c8 c8 b7 08
>3a1008	f0 19 c2 20 a0 02 00 b7 08 85 0c e2 20 c8 c8 b7
>3a1018	08 85 0a c2 20 a5 0c 85 08 80 99 c2 20 a5 c1 a0
>3a1028	02 00 97 08 e2 20 c8 c8 a5 c3 97 08 a9 00 97 c1
>3a1038	c2 20 a0 02 00 97 c1 20 44 10 28 60 08 c2 20 a5
>3a1048	bb 85 c1 e2 20 a5 bd 85 c3 c2 20 a5 c1 d0 09 e2
>3a1058	20 a5 c3 d0 03 4c e7 10 c2 20 a0 02 00 b7 c1 85
>3a1068	0c e2 20 c8 c8 b7 c1 85 0e c2 20 a0 05 00 b7 c1
>3a1078	85 10 e2 20 c8 c8 b7 c1 85 12 c2 20 a5 0c c5 10
>3a1088	d0 08 e2 20 a5 0e c5 12 f0 1f c2 20 a0 02 00 b7
>3a1098	c1 85 0c e2 20 c8 c8 b7 c1 85 0e c2 20 a5 0c 85
>3a10a8	c1 e2 20 a5 0e 85 c3 80 a0 c2 20 a0 02 00 b7 c1
>3a10b8	85 0c e2 20 c8 c8 b7 c1 85 0e c2 20 a0 02 00 b7
>3a10c8	0c 97 c1 e2 20 c8 c8 b7 0c 97 c1 c2 20 a0 05 00
>3a10d8	b7 0c 97 c1 e2 20 c8 c8 b7 0c 97 c1 4c 60 10 28
>3a10e8	60 08 c2 10 e2 20 64 14 a5 e0 1a 1a 85 15 e2 20
>3a10f8	a5 e1 85 16 c5 ba 90 29 f0 08 c2 20 a5 14 c5 b8
>3a1108	90 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 03
>3a1118	8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2
>3a1128	08 28 60 c9 00 d0 05 c0 01 00 f0 05 09 30 97 14
>3a1138	c8 60 08 c2 30 64 0c a5 23 10 1a 18 a5 21 49 ff
>3a1148	ff 69 01 00 85 21 a5 23 49 ff ff 69 00 00 85 23
>3a1158	a9 ff ff 85 0c 64 10 64 12 a2 1f 00 f8 06 21 26
>3a1168	23 a5 10 65 10 85 10 a5 12 65 12 85 12 ca 10 ed
>3a1178	d8 e2 20 20 e9 10 a0 00 00 a5 0c f0 04 a9 2d 80
>3a1188	02 a9 20 97 14 c8 a2 03 00 b5 10 29 f0 4a 4a 4a
>3a1198	4a 20 2b 11 b5 10 29 0f 20 2b 11 ca 10 eb c0 01
>3a11a8	00 d0 0c a9 20 87 14 a0 01 00 a9 30 97 14 c8 a9
>3a11b8	00 97 14 28 60 00 ea 08 e2 20 c2 10 a0 00 00 bd
>3a11c8	00 00 f0 04 e8 c8 80 f7 28 60 08 0b 8b 08 c2 20
>3a11d8	48 a9 00 08 5b 68 28 e2 20 c2 10 08 c2 20 48 e2
>3a11e8	20 a5 23 48 ab c2 20 68 28 a6 21 20 bf 11 84 0c
>3a11f8	08 c2 20 48 e2 20 a5 29 48 ab c2 20 68 28 a6 27
>3a1208	20 bf 11 c2 20 98 38 65 0c aa e2 20 a9 02 20 c4
>3a1218	0c c2 20 a5 b5 85 08 e2 20 a5 b7 85 0a a0 00 00
>3a1228	08 c2 20 48 e2 20 a5 23 48 ab c2 20 68 28 a6 21
>3a1238	bd 00 00 f0 06 97 08 e8 c8 80 f5 e2 20 08 c2 20
>3a1248	48 e2 20 a5 29 48 ab c2 20 68 28 a6 27 bd 00 00
>3a1258	97 08 f0 04 e8 c8 80 f5 c2 20 a5 08 85 21 e2 20
>3a1268	a5 0a 85 23 a9 02 85 25 ab 2b 28 60 08 0b 8b 08
>3a1278	c2 20 48 a9 00 08 5b 68 28 c2 30 08 c2 20 48 e2
>3a1288	20 a5 23 48 ab c2 20 68 28 a6 21 20 bf 11 98 aa
>3a1298	e8 e2 20 a9 02 20 c4 0c c2 20 a5 be 85 08 e2 20
>3a12a8	a5 c0 85 0a a0 00 00 b7 21 97 08 f0 03 c8 80 f7
>3a12b8	a5 08 85 21 a5 09 85 22 a5 0a 85 23 a9 00 85 24
>3a12c8	ab 2b 28 60 08 e2 20 c2 10 a0 00 00 b7 21 f0 05
>3a12d8	c8 80 f9 84 90 c2 30 c4 27 90 13 f0 11 a5 8d 30
>3a12e8	0d f0 0b c4 8d b0 12 a5 27 d0 0e 4c 4d 13 20 e9
>3a12f8	10 e2 20 a9 00 87 14 80 39 20 e9 10 c2 30 18 a5
>3a1308	21 65 27 85 21 a5 23 69 00 00 85 23 a0 00 00 e2
>3a1318	20 a7 21 97 14 f0 1b c2 20 18 a5 21 69 01 00 85
>3a1328	21 a5 23 69 00 00 85 23 c8 c4 8d d0 e2 a9 00 00
>3a1338	97 14 c2 20 a5 14 85 21 a5 16 85 23 e2 20 a9 02
>3a1348	85 25 20 74 12 28 60 48 5a 0b 08 08 c2 20 48 a9
>3a1358	00 08 5b 68 28 c2 30 a9 00 00 85 00 85 18 a9 36
>3a1368	00 85 02 85 1a ad 8a 0f 30 20 a0 02 00 b7 18 f0
>3a1378	0f c5 53 90 10 c5 57 f0 02 b0 05 20 b1 13 80 e5
>3a1388	28 2b 7a 68 60 20 52 1c 80 db 08 c2 20 48 a9 00
>3a1398	08 5b 68 28 e2 20 a9 01 8f d1 08 00 c2 20 29 ff
>3a13a8	00 20 d0 18 e2 20 dc d2 08 08 c2 30 85 21 64 23
>3a13b8	20 3a 11 a5 14 1a 85 21 a5 16 85 23 20 62 3c 18
>3a13c8	a5 18 69 04 00 85 00 a5 1a 69 00 00 85 02 e2 20
>3a13d8	a9 20 20 18 00 c2 20 20 f0 13 90 fb e2 20 a9 0d
>3a13e8	20 18 00 20 52 1c 28 60 08 0b 8b 08 c2 20 48 a9
>3a13f8	00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 e2
>3a1408	20 c2 10 a7 00 f0 3a 30 05 20 18 00 80 29 c2 20
>3a1418	29 7f 00 0a 0a 0a 18 69 54 09 85 08 a9 3a 00 69
>3a1428	00 00 85 0a 08 e2 20 48 a9 3a 48 ab 68 28 a0 02
>3a1438	00 b7 08 aa 20 c0 02 c2 20 20 75 1b ab 2b 28 18
>3a1448	60 ab 2b 28 38 60 08 c2 20 a9 ff 6f 85 1d a9 ff
>3a1458	7f 85 1f a9 ff ff 85 21 85 23 85 27 85 29 e2 20
>3a1468	85 25 85 2b 28 60 08 0b 8b 08 c2 20 48 a9 00 08
>3a1478	5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 30 5a
>3a1488	a4 1d bd 00 00 99 00 00 bd 02 00 99 02 00 e2 20
>3a1498	bd 04 00 99 04 00 c2 20 38 98 e9 05 00 85 1d 7a
>3a14a8	ab 2b 28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68
>3a14b8	28 08 e2 20 48 a9 00 48 ab 68 28 c2 30 5a 18 a5
>3a14c8	1d 69 05 00 85 1d a8 b9 00 00 9d 00 00 b9 02 00
>3a14d8	9d 02 00 e2 20 b9 04 00 9d 04 00 bd 00 00 7a ab
>3a14e8	2b 28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28
>3a14f8	08 e2 20 48 a9 00 48 ab 68 28 e2 20 c2 10 5a a4
>3a1508	1f 99 00 00 88 84 1f 7a ab 2b 28 60 08 0b 8b 08
>3a1518	c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48
>3a1528	ab 68 28 e2 20 c2 10 5a a4 1f c8 84 1f b9 00 00
>3a1538	c2 20 29 ff 00 7a ab 2b 28 60 08 e2 20 a9 01 20
>3a1548	eb 14 28 60 5a 08 8b 08 e2 20 48 a9 00 48 ab 68
>3a1558	28 e2 20 a4 1f b9 01 00 c9 01 d0 08 c2 20 e6 1f
>3a1568	ab 28 7a 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a1578	a9 02 8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20
>3a1588	dc d2 08 08 0b 8b c2 20 48 08 c2 20 48 a9 00 08
>3a1598	5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 e2 20 c2
>3a15a8	10 a4 1f c0 ff 7f f0 11 20 dd 08 85 0c b9 01 00
>3a15b8	20 dd 08 c5 0c f0 02 90 08 c2 20 68 ab 2b 28 18
>3a15c8	60 c2 20 68 ab 2b 28 38 60 4c 81 05 08 e2 20 a9
>3a15d8	00 8f 00 4d 00 a2 01 00 20 7e 17 20 dd 04 c2 20
>3a15e8	a5 21 9f 00 4d 00 e2 20 af 00 4d 00 1a 30 3e 8f
>3a15f8	00 4d 00 e8 e8 20 96 1b e2 20 a7 00 c9 8d f0 09
>3a1608	c9 2c d0 0a 20 75 1b 80 cf 20 75 1b 28 60 08 c2
>3a1618	20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00
>3a1628	c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 08 c2 20
>3a1638	48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d1 08 00 c2
>3a1648	20 29 ff 00 20 d0 18 e2 20 dc d2 08 08 20 6d 48
>3a1658	90 23 e2 20 a5 e8 29 80 d0 06 20 c3 46 4c 7b 16
>3a1668	e2 20 a9 8c 20 82 1c 20 42 15 20 d4 15 20 54 4b
>3a1678	20 4c 15 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a1688	20 a9 02 8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2
>3a1698	20 dc d2 08 08 0b 08 c2 20 48 a9 00 08 5b 68 28
>3a16a8	e2 20 c2 10 20 75 1b a0 00 00 b7 00 f0 24 c9 22
>3a16b8	f0 03 c8 80 f5 84 0c e2 20 a9 02 a6 0c e8 20 c4
>3a16c8	0c a0 00 00 c4 0c f0 29 a7 00 97 be c8 20 75 1b
>3a16d8	80 f2 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>3a16e8	8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2
>3a16f8	08 a9 00 97 be c2 20 a5 be 85 21 e2 20 a5 c0 85
>3a1708	23 a9 02 85 25 20 75 1b 2b 28 60 08 e2 20 a7 00
>3a1718	c2 20 29 ff 00 20 07 09 85 2d 20 42 15 08 e2 20
>3a1728	48 a9 00 48 ab 68 28 20 37 17 20 4c 15 28 60 20
>3a1738	75 1b 6c 2d 08 08 0b 8b c2 20 48 08 c2 20 48 a9
>3a1748	00 08 5b 68 28 c2 30 a2 27 08 20 ac 14 a2 21 08
>3a1758	20 ac 14 20 14 15 20 07 09 85 2d 08 e2 20 48 a9
>3a1768	00 48 ab 68 28 20 7b 17 a2 21 08 20 6e 14 68 ab
>3a1778	2b 28 60 6c 2d 08 08 08 c2 20 48 a9 00 08 5b 68
>3a1788	28 08 e2 20 48 a9 00 48 ab 68 28 c2 10 da e2 20
>3a1798	a7 00 d0 03 4c 41 18 30 33 c9 20 d0 03 4c 3b 18
>3a17a8	c9 3a b0 04 c9 30 b0 56 c9 26 f0 52 c9 22 d0 03
>3a17b8	4c 54 18 c9 5b b0 07 c9 41 90 03 4c 60 18 c9 7b
>3a17c8	b0 07 c9 61 90 03 4c 60 18 4c 41 18 c9 8c f0 40
>3a17d8	c9 8d f0 41 20 2a 09 c9 30 d0 0c 20 13 17 a2 21
>3a17e8	08 20 6e 14 4c 96 17 c9 00 d0 4e a7 00 a6 1f e0
>3a17f8	ff 7f f0 05 20 8b 15 b0 12 20 eb 14 80 35 c2 20
>3a1808	20 d1 15 a2 21 08 20 6e 14 80 83 20 3d 17 80 dd
>3a1818	20 eb 14 80 1e e2 20 a4 1f c0 ff 7f f0 46 a4 1f
>3a1828	b9 01 00 c9 01 f0 3d c9 8c f0 05 20 3d 17 80 ee
>3a1838	20 14 15 20 75 1b 4c 96 17 a6 1f e0 ff 7f b0 24
>3a1848	bd 01 00 c9 01 f0 1d 20 3d 17 80 ed 20 9c 16 a2
>3a1858	21 08 20 6e 14 4c 96 17 20 54 16 a2 21 08 20 6e
>3a1868	14 4c 96 17 a2 21 08 20 ac 14 fa 28 60 08 0b 8b
>3a1878	08 e2 20 48 a9 00 48 ab 68 28 08 c2 20 48 a9 00
>3a1888	08 5b 68 28 c2 30 a9 fd 5f 85 31 ab 2b 28 60 08
>3a1898	0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 92 31 c6
>3a18a8	31 c6 31 2b 28 60 08 c2 30 29 ff 00 20 97 18 28
>3a18b8	60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 e6
>3a18c8	31 e6 31 b2 31 2b 28 60 8b 0b 08 08 c2 20 48 a9
>3a18d8	00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 c2
>3a18e8	20 85 21 a9 00 00 85 23 e2 20 a9 00 85 25 85 e8
>3a18f8	a9 3a 85 e7 c2 20 a9 2a 19 85 e5 20 0a 48 c2 20
>3a1908	a5 d5 85 21 a5 d7 85 23 e2 20 a9 00 85 25 85 e8
>3a1918	a9 3a 85 e7 c2 20 a9 2e 19 85 e5 20 0a 48 28 2b
>3a1928	ab 60 45 52 52 00 45 52 4c 00 e2 20 c2 10 20 33
>3a1938	02 af d1 08 00 0a c2 20 29 ff 00 a8 08 e2 20 48
>3a1948	a9 3a 48 ab 68 28 be 84 19 20 c0 02 c2 20 a5 d5
>3a1958	f0 27 a2 b2 19 20 c0 02 08 e2 20 48 a9 00 48 ab
>3a1968	68 28 c2 20 af d5 08 00 8f 21 08 00 a9 00 00 8f
>3a1978	23 08 00 20 82 3c 20 33 02 4c 58 21 b6 19 b9 19
>3a1988	bf 19 cc 19 da 19 e8 19 fb 19 11 1a 21 1a 30 1a
>3a1998	3d 1a 4e 1a 5d 1a 6a 1a 78 1a 87 1a 98 1a b1 1a
>3a19a8	c5 1a d9 1a ef 1a 03 1b 1e 1b 20 61 74 00 4f 4b
>3a19b8	00 42 72 65 61 6b 00 53 79 6e 74 61 78 20 65 72
>3a19c8	72 6f 72 00 4f 75 74 20 6f 66 20 6d 65 6d 6f 72
>3a19d8	79 00 54 79 70 65 20 6d 69 73 6d 61 74 63 68 00
>3a19e8	56 61 72 69 61 62 6c 65 20 6e 6f 74 20 66 6f 75
>3a19f8	6e 64 00 4c 69 6e 65 20 6e 75 6d 62 65 72 20 6e
>3a1a08	6f 74 20 66 6f 75 6e 64 00 53 74 61 63 6b 20 75
>3a1a18	6e 64 65 72 66 6c 6f 77 00 53 74 61 63 6b 20 6f
>3a1a28	76 65 72 66 6c 6f 77 00 4f 75 74 20 6f 66 20 72
>3a1a38	61 6e 67 65 00 49 6c 6c 65 67 61 6c 20 61 72 67
>3a1a48	75 6d 65 6e 74 00 46 69 6c 65 20 6e 6f 74 20 66
>3a1a58	6f 75 6e 64 00 4e 6f 74 20 61 20 6e 75 6d 62 65
>3a1a68	72 00 4d 61 74 68 20 6f 76 65 72 66 6c 6f 77 00
>3a1a78	4d 61 74 68 20 75 6e 64 65 72 66 6c 6f 77 00 44
>3a1a88	69 76 69 73 69 6f 6e 20 62 79 20 7a 65 72 6f 00
>3a1a98	55 6e 61 62 6c 65 20 74 6f 20 72 65 61 64 20 64
>3a1aa8	69 72 65 63 74 6f 72 79 00 55 6e 61 62 6c 65 20
>3a1ab8	74 6f 20 6c 6f 61 64 20 66 69 6c 65 00 55 6e 61
>3a1ac8	62 6c 65 20 74 6f 20 73 61 76 65 20 66 69 6c 65
>3a1ad8	00 55 6e 61 62 6c 65 20 74 6f 20 64 65 6c 65 74
>3a1ae8	65 20 66 69 6c 65 00 43 6f 75 6c 64 20 6e 6f 74
>3a1af8	20 66 69 6e 64 20 66 69 6c 65 00 43 6f 75 6c 64
>3a1b08	20 6e 6f 74 20 75 70 64 61 74 65 20 64 69 72 65
>3a1b18	63 74 6f 72 79 00 43 6f 75 6c 64 20 6e 6f 74 20
>3a1b28	63 6f 70 79 20 74 68 65 20 66 69 6c 65 00 08 0b
>3a1b38	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 00 85 d0
>3a1b48	2b 28 60 0b 08 08 c2 20 48 a9 00 08 5b 68 28 08
>3a1b58	c2 20 a9 32 19 8f d2 08 00 e2 20 a9 3a 8f d4 08
>3a1b68	00 28 20 2e 3b 20 6f 36 64 2f 28 2b 60 08 0b 08
>3a1b78	c2 20 48 a9 00 08 5b 68 28 c2 20 18 a5 00 69 01
>3a1b88	00 85 00 e2 20 a5 02 69 00 85 02 2b 28 60 08 0b
>3a1b98	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a7 00 f0 0f
>3a1ba8	c9 20 f0 06 c9 09 f0 02 80 05 20 75 1b 80 ed 2b
>3a1bb8	28 60 08 e2 20 a7 00 f0 09 c9 3a f0 05 20 75 1b
>3a1bc8	80 f3 28 60 08 e2 20 64 34 a7 00 f0 19 c5 35 f0
>3a1bd8	2c c9 98 f0 1e c9 9c f0 1a c9 9b f0 1a c9 9d f0
>3a1be8	16 20 75 1b 80 e3 20 52 1c c2 20 a5 d5 f0 1d e2
>3a1bf8	20 80 d6 e6 34 80 ea c6 34 30 30 80 e4 a5 33 30
>3a1c08	06 a5 34 f0 02 80 da 20 75 1b 28 60 08 c2 20 48
>3a1c18	a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20
>3a1c28	29 ff 00 20 d0 18 e2 20 dc d2 08 08 c2 20 48 a9
>3a1c38	00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29
>3a1c48	ff 00 20 d0 18 e2 20 dc d2 08 08 c2 30 a0 00 00
>3a1c58	b7 18 85 0c 18 a5 18 65 0c 85 18 a5 1a 69 00 00
>3a1c68	85 1a a0 02 00 b7 18 85 d5 18 a5 18 69 04 00 85
>3a1c78	00 a5 1a 69 00 00 85 02 28 60 08 e2 20 48 20 96
>3a1c88	1b 68 e2 20 c7 00 d0 08 20 75 1b 20 96 1b 28 60
>3a1c98	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1
>3a1ca8	08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 08
>3a1cb8	e2 20 20 96 1b e2 20 a7 00 f0 10 c9 3a f0 0c c5
>3a1cc8	35 f0 05 20 75 1b 80 ef 28 38 60 28 18 60 5a 08
>3a1cd8	e2 20 a0 00 00 b7 00 f0 0d c9 3a f0 07 c9 20 d0
>3a1ce8	05 c8 80 f1 a9 00 28 7a 60 08 0b 8b 08 c2 20 48
>3a1cf8	a9 00 08 5b 68 28 20 4e 14 e2 20 a9 00 85 da ad
>3a1d08	8a 0f 30 4b a7 00 c9 3a d0 03 20 75 1b 20 96 1b
>3a1d18	a7 00 d0 03 4c a1 1d 20 3e 03 b0 52 a7 00 10 10
>3a1d28	20 2a 09 85 0c c9 20 d0 03 4c 8f 1d a5 d0 f0 51
>3a1d38	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1
>3a1d48	08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 08
>3a1d58	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 01 8f d1 08
>3a1d68	00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 20 38
>3a1d78	3b 4c a1 1d 08 e2 20 48 a9 00 48 ab 68 28 6c 2d
>3a1d88	08 a5 0c c9 10 d0 a9 a7 00 20 07 09 c2 20 85 2d
>3a1d98	20 4e 14 20 75 1b 20 7c 1d ab 2b 28 60 08 58 20
>3a1da8	36 1b 20 75 18 e2 20 9c 8a 0f c2 20 a5 18 85 00
>3a1db8	a5 1a 85 02 4c e3 1d 08 c2 20 a0 02 00 b7 18 85
>3a1dc8	d5 e2 20 a5 da c9 03 f0 12 c2 20 18 a5 18 69 04
>3a1dd8	00 85 00 e2 20 a5 1a 69 00 85 02 c2 20 20 f1 1c
>3a1de8	e2 20 a5 da c9 03 f0 f3 c9 00 d0 31 e2 20 20 96
>3a1df8	1b a7 00 f0 28 c9 3a f0 1f 08 c2 20 48 a9 00 08
>3a1e08	5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00
>3a1e18	20 d0 18 e2 20 dc d2 08 20 75 1b 80 be 28 60 08
>3a1e28	58 e2 20 a9 80 85 d0 9c 8a 0f 20 75 18 c2 30 64
>3a1e38	2f a0 02 00 b7 18 f0 29 20 bf 1d e2 20 a5 da c9
>3a1e48	01 f0 1e c9 02 f0 ea c9 03 f0 e6 c2 20 a0 00 00
>3a1e58	18 a5 18 77 18 85 18 e2 20 a5 1a 69 00 85 1a 80
>3a1e68	d0 e2 20 a9 00 85 d0 28 60 08 c2 30 c2 20 a9 00
>3a1e78	00 85 08 a9 36 00 85 0a c2 20 a0 02 00 b7 08 f0
>3a1e88	31 c5 21 f0 1e b0 2b c2 20 a0 00 00 18 a5 08 77
>3a1e98	08 85 0c e2 20 a5 0a 69 00 85 0a c2 20 a5 0c 85
>3a1ea8	08 80 d7 c2 20 a5 08 85 18 e2 20 a5 0a 85 1a 28
>3a1eb8	38 60 28 18 60 08 e2 20 a7 0c 87 08 c2 20 a5 0c
>3a1ec8	c5 00 d0 08 e2 20 a5 0e c5 02 f0 26 c2 20 18 a5
>3a1ed8	0c 69 01 00 85 0c e2 20 a5 0e 69 00 85 0e c2 20
>3a1ee8	18 a5 08 69 01 00 85 08 e2 20 a5 0a 69 00 85 0a
>3a1ef8	80 c4 28 60 08 e2 20 a7 0c 87 08 c2 20 a5 0c c5
>3a1f08	00 d0 06 a5 0e c5 02 f0 26 c2 20 38 a5 0c e9 01
>3a1f18	00 85 0c e2 20 a5 0e e9 00 85 0e c2 20 38 a5 08
>3a1f28	e9 01 00 85 08 e2 20 a5 0a e9 00 85 0a 80 c6 28
>3a1f38	60 08 a0 00 00 c2 20 18 a5 08 77 08 85 0c e2 20
>3a1f48	a5 0a 69 00 85 0e c2 20 18 a5 d7 69 04 00 85 00
>3a1f58	e2 20 a5 d9 69 00 85 02 a0 00 00 c2 20 38 a5 d7
>3a1f68	f7 08 85 d7 e2 20 a5 d9 e9 00 85 d9 20 bd 1e 20
>3a1f78	2e 3b 28 60 08 08 c2 20 48 a9 00 08 5b 68 28 c2
>3a1f88	30 a0 02 00 97 d7 18 a5 d7 69 04 00 85 08 e2 20
>3a1f98	a5 d9 69 00 85 0a e2 20 a0 00 00 b7 18 97 08 f0
>3a1fa8	03 c8 80 f7 c2 20 98 18 69 05 00 85 0c c2 20 a0
>3a1fb8	00 00 a5 0c 97 d7 c2 20 18 a5 d7 65 0c 85 0c e2
>3a1fc8	20 a5 d9 69 00 85 d9 c2 20 a5 0c 85 d7 c2 20 a0
>3a1fd8	00 00 a9 00 00 97 d7 c8 c0 05 00 d0 f8 20 2e 3b
>3a1fe8	28 60 0b 08 08 c2 20 48 a9 00 08 5b 68 28 c2 30
>3a1ff8	a9 00 00 85 08 a9 36 00 85 0a a0 02 00 b7 08 f0
>3a2008	1d c5 d5 f0 25 b0 1d a0 00 00 18 a5 08 77 08 85
>3a2018	0c a5 0a 69 00 00 85 0a a5 0c 85 08 80 dc a9 00
>3a2028	00 28 2b 60 a9 01 00 28 2b 60 a9 02 00 28 2b 60
>3a2038	08 c2 30 a9 05 00 85 10 a0 00 00 e2 20 b7 18 f0
>3a2048	07 c2 20 e6 10 c8 80 f3 c2 20 a5 08 85 00 a5 0a
>3a2058	85 02 18 a5 d7 69 04 00 85 0c a5 d9 69 00 00 85
>3a2068	0e 18 a5 d7 65 10 85 d7 a5 d9 69 00 00 85 d9 18
>3a2078	a5 d7 69 04 00 85 08 a5 d9 69 00 00 85 0a 20 fc
>3a2088	1e c2 20 a5 10 a0 00 00 97 00 a5 d5 a0 02 00 97
>3a2098	00 18 a5 00 69 04 00 85 00 a5 02 69 00 00 85 02
>3a20a8	a0 00 00 e2 20 b7 18 97 00 f0 03 c8 80 f7 20 2e
>3a20b8	3b 28 60 08 c2 30 85 d5 20 ea 1f c9 00 00 f0 2c
>3a20c8	c9 01 00 f0 22 c2 20 a5 08 48 a5 0a 48 20 39 1f
>3a20d8	68 85 0a 68 85 08 a5 18 85 00 a5 1a 85 02 20 96
>3a20e8	1b e2 20 a7 00 f0 0a 20 38 20 80 05 a5 d5 20 7c
>3a20f8	1f 28 60 8b 08 08 e2 20 48 a9 3a 48 ab 68 28 a2
>3a2108	34 d2 20 c0 02 28 ab 60 08 e2 30 a9 01 20 1c 00
>3a2118	20 db 00 f0 06 c9 0d f0 02 80 f5 28 60 0b 08 08
>3a2128	c2 20 48 a9 00 08 5b 68 28 c2 30 64 d5 a9 00 4f
>3a2138	85 18 a9 00 00 85 1a 20 41 06 c2 20 a5 d5 d0 05
>3a2148	20 a5 1d 80 07 20 bb 20 28 2b 38 60 28 2b 18 60
>3a2158	c2 30 a2 ff fe 9a 20 fb 20 20 08 00 20 0c 00 a9
>3a2168	00 00 20 1c 00 20 25 21 b0 ef 80 ea e2 20 a5 25
>3a2178	c5 2b d0 06 c2 20 29 ff 00 60 c2 20 08 c2 20 48
>3a2188	a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20
>3a2198	29 ff 00 20 d0 18 e2 20 dc d2 08 20 74 21 c2 20
>3a21a8	c9 00 00 f0 27 c9 02 00 d0 03 4c d2 11 08 c2 20
>3a21b8	48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2
>3a21c8	20 29 ff 00 20 d0 18 e2 20 dc d2 08 18 a5 21 65
>3a21d8	27 85 21 a5 23 65 29 85 23 60 38 a5 21 e5 27 85
>3a21e8	21 a5 23 e5 29 85 23 60 a5 21 8f 08 01 00 a5 27
>3a21f8	8f 0a 01 00 af 0c 01 00 85 21 af 0e 01 00 85 23
>3a2208	60 a5 21 8f 12 01 00 a5 27 8f 10 01 00 af 14 01
>3a2218	00 85 21 60 a5 21 8f 12 01 00 a5 27 8f 10 01 00
>3a2228	af 16 01 00 85 21 60 c2 20 a5 21 25 27 85 21 a5
>3a2238	23 25 29 85 23 60 c2 20 a5 21 05 27 85 21 a5 23
>3a2248	05 29 85 23 60 c2 20 a5 21 49 ff ff 85 21 a5 23
>3a2258	49 ff ff 85 23 60 c2 20 a5 23 c5 29 90 0b a5 21
>3a2268	c5 27 90 05 64 21 64 23 60 a9 ff ff 85 21 85 23
>3a2278	60 c2 20 a5 29 c5 23 90 0b a5 27 c5 21 90 05 64
>3a2288	21 64 23 60 a9 ff ff 85 21 85 23 60 c2 20 a5 29
>3a2298	c5 23 d0 0e a5 27 c5 21 d0 08 a9 ff ff 85 21 85
>3a22a8	23 60 64 21 64 23 60 c2 20 a5 29 c5 23 d0 0e a5
>3a22b8	27 c5 21 d0 08 a9 ff ff 85 21 85 23 60 64 21 64
>3a22c8	23 60 c2 20 a5 23 c5 29 90 10 d0 06 a5 21 c5 27
>3a22d8	90 08 a9 ff ff 85 21 85 23 60 64 21 64 23 60 c2
>3a22e8	20 a5 23 c5 29 90 0f f0 05 64 21 64 23 60 a5 21
>3a22f8	c5 27 f0 02 b0 f3 a9 ff ff 85 21 85 23 60 08 e2
>3a2308	20 20 7e 17 20 2c 05 20 0a 04 a5 21 0a 0a 0a 0a
>3a2318	05 27 48 a9 2c 20 82 1c 20 7e 17 20 2c 05 20 0a
>3a2328	04 a5 21 0a 0a 0a 0a 05 27 48 a9 2c 20 82 1c 20
>3a2338	7e 17 20 2c 05 20 0a 04 a5 21 0a 0a 0a 0a 05 27
>3a2348	48 af 0e 08 af 09 0c 8f 0e 08 af 68 8f 00 08 af
>3a2358	68 8f 02 08 af 68 8f 04 08 af af 0e 08 af 29 f7
>3a2368	8f 0e 08 af 20 ba 1b 28 60 08 e2 20 20 7e 17 20
>3a2378	2c 05 20 0a 04 a5 21 0a 0a 0a 0a 05 27 48 a9 2c
>3a2388	20 82 1c 20 7e 17 20 2c 05 20 0a 04 a5 21 0a 0a
>3a2398	0a 0a 05 27 48 a9 2c 20 82 1c 20 7e 17 20 89 04
>3a23a8	20 40 04 c2 20 a5 21 85 90 a5 27 85 21 20 0a 04
>3a23b8	e2 20 a5 21 0a 0a 0a 0a 05 27 48 c2 20 a5 90 85
>3a23c8	21 20 0a 04 e2 20 a5 21 0a 0a 0a 0a 05 27 48 af
>3a23d8	0e 08 af 09 0c 8f 0e 08 af 68 8f 0f 08 af 68 8f
>3a23e8	0a 08 af 68 8f 09 08 af 68 8f 06 08 af af 0e 08
>3a23f8	af 29 f7 8f 0e 08 af 20 ba 1b 28 60 08 20 7e 17
>3a2408	20 2c 05 e2 20 a5 21 29 0f 0a 0a 0a 0a 8f 53 08
>3a2418	00 a9 2c 20 82 1c 20 7e 17 20 2c 05 a5 21 29 0f
>3a2428	0f 53 08 00 8f 1e 00 00 28 60 08 e2 20 20 7e 17
>3a2438	20 2c 05 a5 21 48 a9 2c 20 82 1c 20 7e 17 20 2c
>3a2448	05 a5 21 48 a9 2c 20 82 1c 20 7e 17 20 2c 05 a5
>3a2458	21 8f 0d 00 af 68 8f 0e 00 af 68 8f 0f 00 af 28
>3a2468	60 08 e2 20 20 7e 17 20 89 04 a5 21 f0 16 a9 01
>3a2478	8f 04 00 af a9 20 8f 08 00 af 8f 09 00 af 22 2c
>3a2488	11 00 80 0a a9 00 8f 04 00 af 22 2c 11 00 a9 2c
>3a2498	85 35 20 b7 1c 90 35 20 75 1b 20 7e 17 20 2c 05
>3a24a8	a5 21 48 a9 2c 20 82 1c 20 7e 17 20 2c 05 a5 21
>3a24b8	48 a9 2c 20 82 1c 20 7e 17 20 2c 05 a5 21 8f 05
>3a24c8	00 af 68 8f 06 00 af 68 8f 07 00 af 28 60 08 c2
>3a24d8	20 20 7e 17 20 2c 05 a9 af 00 85 9e a5 21 c9 0a
>3a24e8	00 b0 5c 0a aa bf 66 25 3a 85 9c a9 2c 00 20 82
>3a24f8	1c 20 7e 17 20 2c 05 a5 21 0a 0a 18 65 9c 85 9c
>3a2508	a9 2c 00 20 82 1c 20 7e 17 20 2c 05 a0 02 00 a5
>3a2518	21 e2 20 97 9c a9 2c 20 82 1c 20 7e 17 20 2c 05
>3a2528	a0 01 00 a5 21 e2 20 97 9c a9 2c 20 82 1c 20 7e
>3a2538	17 20 2c 05 a0 00 00 a5 21 e2 20 97 9c 28 60 08
>3a2548	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d1 08
>3a2558	00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 00 20
>3a2568	00 24 00 28 00 2c 00 30 00 34 00 38 00 3c 40 1f
>3a2578	80 1f da 5a 08 20 7e 17 20 89 04 c2 20 a5 21 89
>3a2588	00 01 d0 17 af 00 00 af 89 00 01 f0 0e e2 20 a9
>3a2598	00 8f 01 00 af a9 01 8f 01 00 af c2 20 a5 21 8f
>3a25a8	00 00 af 4a 4a 4a 4a 4a 4a 4a 29 ff 00 0a aa c2
>3a25b8	20 bf 02 26 3a 8f 10 f0 3a bf 0a 26 3a 8f 12 f0
>3a25c8	3a af 10 f0 3a 8f 08 01 00 af 12 f0 3a 8f 0a 01
>3a25d8	00 af 0c 01 00 8f 14 f0 3a e2 20 af 0e 01 00 8f
>3a25e8	16 f0 3a 22 2c 11 00 c2 20 af 1a 00 00 aa af 1c
>3a25f8	00 00 a8 20 20 00 28 7a fa 60 80 02 20 03 40 01
>3a2608	90 01 e0 01 58 02 f0 00 2c 01 50 00 64 00 28 00
>3a2618	32 00 3c 00 4b 00 1e 00 32 00 48 00 5c 00 20 00
>3a2628	2a 00 34 00 43 00 16 00 34 00 da 08 c2 30 a5 21
>3a2638	c9 02 00 b0 12 0a 0a aa bf 00 f0 3a 85 9c bf 02
>3a2648	f0 3a 85 9e 28 fa 60 08 c2 20 48 a9 00 08 5b 68
>3a2658	28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff 00 20 d0
>3a2668	18 e2 20 dc d2 08 da 08 c2 30 a5 21 c9 02 00 b0
>3a2678	12 0a 0a aa bf 08 f0 3a 85 9c bf 0a f0 3a 85 9e
>3a2688	28 fa 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a2698	09 8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc
>3a26a8	d2 08 08 c2 20 20 7e 17 20 2c 05 c2 20 a5 21 c9
>3a26b8	02 00 b0 5d 85 53 a9 2c 00 20 82 1c 20 7e 17 20
>3a26c8	2c 05 c2 20 a5 21 85 57 a9 2c 00 20 82 1c 20 7e
>3a26d8	17 20 2c 05 a5 53 0a 0a 0a aa e2 20 a5 57 d0 05
>3a26e8	a5 21 0a 80 04 a5 21 38 2a 9f 00 01 af c2 20 a9
>3a26f8	2c 00 85 35 20 b7 1c b0 37 c2 20 08 c2 20 a9 00
>3a2708	00 85 21 a9 b0 00 85 23 e2 20 a9 00 85 25 28 80
>3a2718	27 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>3a2728	d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08
>3a2738	c2 20 20 75 1b 20 7e 17 c2 20 a5 53 0a 0a aa a5
>3a2748	21 9f 00 f0 3a 9f 08 f0 3a 85 5b a5 23 9f 02 f0
>3a2758	3a 38 e9 b0 00 9f 0a f0 3a 85 5d a5 53 0a 0a 0a
>3a2768	aa e2 20 a5 5b 9f 01 01 af a5 5c 9f 02 01 af a5
>3a2778	5d 9f 03 01 af a9 00 9f 04 01 af 9f 05 01 af 28
>3a2788	60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f
>3a2798	d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08
>3a27a8	08 c2 20 20 7e 17 20 2c 05 20 6e 26 c2 20 a5 9c
>3a27b8	8f 05 04 af af 14 f0 3a 8f 08 04 af e2 20 a5 9e
>3a27c8	8f 07 04 af af 16 f0 3a 8f 0a 04 af a9 00 8f 01
>3a27d8	04 af a9 85 8f 00 04 af af 01 04 af 30 fa a9 00
>3a27e8	8f 00 04 af 28 60 08 c2 20 a5 5b 8f 08 01 00 af
>3a27f8	10 f0 3a 8f 0a 01 00 18 af 0c 01 00 65 57 85 0c
>3a2808	af 0e 01 00 69 00 00 85 0e 18 a5 0c 65 9c 85 0c
>3a2818	a5 0e 65 9e 85 0e e2 20 a5 53 87 0c 28 60 c2 20
>3a2828	a9 01 00 85 db 38 a5 5f e5 57 85 67 10 0b 49 ff
>3a2838	ff 1a 85 67 a9 ff ff 85 db a9 01 00 85 dd 38 a5
>3a2848	63 e5 5b 85 6b 10 0b 49 ff ff 1a 85 6b a9 ff ff
>3a2858	85 dd a5 6b c5 67 b0 04 a5 67 80 06 a5 6b 49 ff
>3a2868	ff 1a 48 0a 68 6a 85 6f 20 ee 27 a5 57 c5 5f d0
>3a2878	06 a5 5b c5 63 f0 36 a5 6f 85 73 a5 67 49 ff ff
>3a2888	1a c5 73 10 10 f0 0e 38 a5 6f e5 6b 85 6f 18 a5
>3a2898	57 65 db 85 57 a5 73 c5 6b 10 cd f0 cb 18 a5 6f
>3a28a8	65 67 85 6f 18 a5 5b 65 dd 85 5b 80 bb 60 08 a9
>3a28b8	00 00 8f 00 04 af c2 20 a5 5b 8f 08 01 00 af 10
>3a28c8	f0 3a 8f 0a 01 00 18 af 0c 01 00 65 57 85 0c e2
>3a28d8	20 af 0e 01 00 69 00 85 0e c2 20 18 a5 9c 65 0c
>3a28e8	8f 05 04 af e2 20 a5 9e 65 0e 8f 07 04 af c2 20
>3a28f8	38 a5 5f e5 57 85 0c 8f 08 04 af 38 af 10 f0 3a
>3a2908	8f 0e 04 af 38 a5 63 e5 5b 8f 0a 04 af a9 01 00
>3a2918	8f 0c 04 af e2 20 af 53 08 00 8f 01 04 af a9 87
>3a2928	8f 00 04 af af 01 04 af 30 fa a9 00 8f 00 04 af
>3a2938	28 60 08 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20
>3a2948	48 a9 00 48 ab 68 28 c2 30 20 7e 17 20 2c 05 20
>3a2958	32 26 a9 2c 00 20 82 1c 20 7e 17 20 89 04 a5 21
>3a2968	85 57 a9 2c 00 20 82 1c 20 7e 17 20 89 04 a5 21
>3a2978	85 5b a9 2c 00 20 82 1c 20 7e 17 20 2c 05 a5 21
>3a2988	85 53 20 ee 27 28 60 08 08 c2 20 48 a9 00 08 5b
>3a2998	68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 30 20 7e
>3a29a8	17 20 2c 05 20 32 26 a9 2c 00 20 82 1c 20 7e 17
>3a29b8	20 89 04 a5 21 85 57 a9 2c 00 20 82 1c 20 7e 17
>3a29c8	20 89 04 a5 21 85 5b a9 2c 00 20 82 1c 20 7e 17
>3a29d8	20 89 04 a5 21 85 5f a9 2c 00 20 82 1c 20 7e 17
>3a29e8	20 89 04 a5 21 85 63 a9 2c 00 20 82 1c 20 7e 17
>3a29f8	20 2c 05 a5 21 85 53 20 26 28 28 60 08 08 c2 20
>3a2a08	48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68
>3a2a18	28 c2 30 20 7e 17 20 2c 05 20 32 26 a9 2c 00 20
>3a2a28	82 1c 20 7e 17 20 89 04 a5 21 85 57 a9 2c 00 20
>3a2a38	82 1c 20 7e 17 20 89 04 a5 21 85 5b a9 2c 00 20
>3a2a48	82 1c 20 7e 17 20 89 04 a5 21 85 5f a9 2c 00 20
>3a2a58	82 1c 20 7e 17 20 89 04 a5 21 85 63 a9 2c 00 20
>3a2a68	82 1c 20 7e 17 20 2c 05 a5 21 85 53 20 b6 28 28
>3a2a78	60 08 e2 20 a5 21 c9 40 b0 18 0a 0a 0a 18 69 00
>3a2a88	85 9c a9 0c 69 00 85 9d a9 af 69 00 85 9e 64 9f
>3a2a98	28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09
>3a2aa8	8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2
>3a2ab8	08 08 e2 20 20 7e 17 20 2c 05 20 79 2a a5 21 8f
>3a2ac8	16 f0 3a a9 2c 20 82 1c 20 7e 17 20 2c 05 a5 21
>3a2ad8	c9 08 b0 4b 48 a9 2c 20 82 1c 20 7e 17 20 89 04
>3a2ae8	c2 20 38 a5 21 e9 00 00 85 21 a5 23 e9 b0 00 85
>3a2af8	23 30 2c c2 20 a5 21 a0 01 00 97 9c e2 20 a5 23
>3a2b08	c8 c8 97 9c af 16 f0 3a aa bf 18 f0 3a 29 f1 85
>3a2b18	0c 68 0a 29 0e 05 0c 87 9c 9f 18 f0 3a 28 60 08
>3a2b28	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08
>3a2b38	00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 08 c2
>3a2b48	20 20 7e 17 20 2c 05 20 79 2a a9 2c 00 20 82 1c
>3a2b58	20 7e 17 20 89 04 a5 21 a0 04 00 97 9c a9 2c 00
>3a2b68	20 82 1c 20 7e 17 20 89 04 a5 21 a0 06 00 97 9c
>3a2b78	28 60 08 c2 20 20 7e 17 20 2c 05 20 79 2a a5 21
>3a2b88	8f 16 f0 3a a9 2c 00 20 82 1c 20 7e 17 20 89 04
>3a2b98	a5 21 48 a9 2c 00 85 35 20 b7 1c b0 1e af 16 f0
>3a2ba8	3a aa bf 18 f0 3a 29 fe 00 85 0c 68 29 01 00 05
>3a2bb8	0c 9f 18 f0 3a e2 20 87 9c 80 35 c2 20 20 75 1b
>3a2bc8	20 7e 17 20 2c 05 a5 21 c9 08 00 b0 25 0a 0a 0a
>3a2bd8	0a 85 0c 68 29 01 00 05 0c 85 0c af 16 f0 3a aa
>3a2be8	e2 20 bf 18 f0 3a 29 8e 05 0c 87 9c 9f 18 f0 3a
>3a2bf8	28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09
>3a2c08	8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2
>3a2c18	08 08 c2 20 a5 21 c9 04 00 b0 19 8d 00 01 a9 04
>3a2c28	00 8d 02 01 18 ad 04 01 69 80 02 85 9c a9 af 00
>3a2c38	85 9e 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a2c48	a9 09 8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20
>3a2c58	dc d2 08 08 c2 20 a5 21 c9 04 00 b0 19 8d 00 01
>3a2c68	a9 0c 00 8d 02 01 18 ad 04 01 69 00 02 85 9c a9
>3a2c78	af 00 85 9e 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a2c88	e2 20 a9 09 8f d1 08 00 c2 20 29 ff 00 20 d0 18
>3a2c98	e2 20 dc d2 08 08 c2 20 20 7e 17 20 2c 05 20 19
>3a2ca8	2c c2 20 a5 9e 48 a5 9c 48 a9 2c 00 20 82 1c 20
>3a2cb8	7e 17 20 2c 05 c2 20 a5 21 48 a9 2c 00 20 82 1c
>3a2cc8	20 7e 17 20 2c 05 c2 20 a5 21 48 a9 2c 00 20 82
>3a2cd8	1c 20 7e 17 20 89 04 c2 20 a5 21 85 5b a5 23 85
>3a2ce8	5d 68 85 57 68 85 53 68 85 9c 68 85 9e a5 5b 87
>3a2cf8	9c e2 20 38 a5 5d e9 b0 a0 02 00 97 9c c2 20 a5
>3a2d08	57 d0 11 a5 59 d0 0d e2 20 a5 53 29 07 a0 03 00
>3a2d18	97 9c 80 0d e2 20 a5 53 29 07 09 08 a0 03 00 97
>3a2d28	9c 28 60 08 c2 20 20 7e 17 20 2c 05 20 5b 2c c2
>3a2d38	20 a5 9e 48 a5 9c 48 a9 2c 00 20 82 1c 20 7e 17
>3a2d48	20 89 04 c2 20 a5 21 48 a9 2c 00 20 82 1c 20 7e
>3a2d58	17 20 89 04 c2 20 a5 21 48 a9 2c 00 20 82 1c 20
>3a2d68	7e 17 20 89 04 c2 20 a5 21 85 5b a5 23 85 5d 68
>3a2d78	85 57 68 85 53 68 85 9c 68 85 9e a5 5b a0 01 00
>3a2d88	97 9c e2 20 38 a5 5d e9 b0 c8 c8 97 9c c2 20 a5
>3a2d98	53 a0 04 00 97 9c a5 57 a0 06 00 97 9c 28 60 08
>3a2da8	c2 20 20 7e 17 20 2c 05 20 5b 2c c2 20 a5 9e 48
>3a2db8	a5 9c 48 a9 2c 00 20 82 1c 20 7e 17 20 89 04 c2
>3a2dc8	20 68 85 9c 68 85 9e a5 21 d0 06 e2 20 a9 00 80
>3a2dd8	04 e2 20 a9 01 e2 20 a0 00 00 97 9c 28 60 08 c2
>3a2de8	20 20 7e 17 20 2c 05 20 5b 2c a5 9e 48 a5 9c 48
>3a2df8	a9 2c 00 20 82 1c 20 7e 17 20 89 04 a5 21 48 a9
>3a2e08	2c 00 20 82 1c 20 7e 17 20 89 04 a5 21 85 57 68
>3a2e18	85 53 68 85 9c 68 85 9e a5 53 a0 08 00 97 9c a5
>3a2e28	57 a0 0a 00 97 9c 28 60 0b 08 08 c2 20 48 a9 00
>3a2e38	08 5b 68 28 e2 20 a9 00 8f 58 f0 3a af 5c f0 3a
>3a2e48	c9 b0 b0 1c 8f 24 04 af af 5b f0 3a 8f 23 04 af
>3a2e58	af 5a f0 3a 8f 22 04 af a9 10 8f 58 f0 3a 80 17
>3a2e68	38 e9 b0 8f 04 04 af af 5b f0 3a 8f 03 04 af af
>3a2e78	5a f0 3a 8f 02 04 af af 59 f0 3a d0 3c af 58 f0
>3a2e88	3a f0 1b af 5d f0 3a 8f 28 04 af af 5e f0 3a 8f
>3a2e98	29 04 af af 5f f0 3a 8f 2a 04 af 82 8b 00 af 5d
>3a2ea8	f0 3a 8f 08 04 af af 5e f0 3a 8f 09 04 af af 5f
>3a2eb8	f0 3a 8f 0a 04 af 82 70 00 af 58 f0 3a 09 01 8f
>3a2ec8	58 f0 3a 89 10 d0 32 af 60 f0 3a 8f 28 04 af af
>3a2ed8	61 f0 3a 8f 29 04 af af 62 f0 3a 8f 2a 04 af af
>3a2ee8	63 f0 3a 8f 2b 04 af af 64 f0 3a 8f 2c 04 af af
>3a2ef8	65 f0 3a 8f 2d 04 af 80 30 af 60 f0 3a 8f 08 04
>3a2f08	af af 61 f0 3a 8f 09 04 af af 62 f0 3a 8f 0a 04
>3a2f18	af af 63 f0 3a 8f 0b 04 af af 64 f0 3a 8f 0c 04
>3a2f28	af af 65 f0 3a 8f 0d 04 af e2 20 af 69 f0 3a c9
>3a2f38	b0 b0 20 8f 27 04 af af 68 f0 3a 8f 26 04 af af
>3a2f48	67 f0 3a 8f 25 04 af af 58 f0 3a 09 20 8f 58 f0
>3a2f58	3a 80 17 38 e9 b0 8f 07 04 af af 68 f0 3a 8f 06
>3a2f68	04 af af 67 f0 3a 8f 05 04 af af 66 f0 3a d0 3e
>3a2f78	af 58 f0 3a 89 20 f0 1b af 6a f0 3a 8f 28 04 af
>3a2f88	af 6b f0 3a 8f 29 04 af af 6c f0 3a 8f 2a 04 af
>3a2f98	82 8b 00 af 6a f0 3a 8f 08 04 af af 6b f0 3a 8f
>3a2fa8	09 04 af af 6c f0 3a 8f 0a 04 af 82 70 00 af 58
>3a2fb8	f0 3a 09 02 8f 58 f0 3a 89 20 f0 32 af 6d f0 3a
>3a2fc8	8f 28 04 af af 6e f0 3a 8f 29 04 af af 6f f0 3a
>3a2fd8	8f 2a 04 af af 70 f0 3a 8f 2b 04 af af 71 f0 3a
>3a2fe8	8f 2e 04 af af 72 f0 3a 8f 2f 04 af 80 30 af 6d
>3a2ff8	f0 3a 8f 08 04 af af 6e f0 3a 8f 09 04 af af 6f
>3a3008	f0 3a 8f 0a 04 af af 70 f0 3a 8f 0b 04 af af 71
>3a3018	f0 3a 8f 0e 04 af af 72 f0 3a 8f 0f 04 af af 58
>3a3028	f0 3a 29 30 f0 16 c9 10 f0 20 c9 20 f0 37 af 58
>3a3038	f0 3a 29 01 09 01 8f 20 04 af 80 56 af 58 f0 3a
>3a3048	29 01 09 11 8f 00 04 af 80 36 af 58 f0 3a 29 01
>3a3058	0a 09 11 8f 20 04 af af 58 f0 3a 29 02 09 11 8f
>3a3068	00 04 af 80 1b af 58 f0 3a 29 02 09 21 8f 20 04
>3a3078	af af 58 f0 3a 29 01 0a 09 21 8f 00 04 af 80 00
>3a3088	af 00 04 af 09 80 8f 00 04 af af 58 f0 3a 29 30
>3a3098	f0 0f af 20 04 af 09 80 8f 20 04 af ea ea ea ea
>3a30a8	ea af 01 04 af 89 80 d0 f8 a9 00 8f 20 04 af 8f
>3a30b8	00 04 af 28 2b 60 0b 08 e2 20 c2 10 a9 00 a2 00
>3a30c8	00 8f 59 f0 3a e8 e0 1a 00 d0 f6 20 d6 1c c9 e6
>3a30d8	f0 23 c9 e7 f0 5e 08 c2 20 48 a9 00 08 5b 68 28
>3a30e8	e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00 20 d0 18
>3a30f8	e2 20 dc d2 08 20 82 1c 20 7e 17 20 89 04 c2 20
>3a3108	a5 21 8f 5a f0 3a e2 20 a5 23 8f 5c f0 3a a9 2c
>3a3118	20 82 1c 20 7e 17 20 89 04 c2 20 a5 21 8f 5d f0
>3a3128	3a e2 20 a5 23 8f 5f f0 3a e2 20 a9 00 8f 59 f0
>3a3138	3a 82 74 00 20 82 1c 20 7e 17 20 89 04 c2 20 a5
>3a3148	21 8f 5a f0 3a e2 20 a5 23 8f 5c f0 3a a9 2c 20
>3a3158	82 1c 20 7e 17 20 dd 04 c2 20 a5 21 8f 60 f0 3a
>3a3168	8d 00 01 a9 2c 00 20 82 1c 20 7e 17 20 dd 04 c2
>3a3178	20 a5 21 8f 62 f0 3a 8d 02 01 a9 2c 00 20 82 1c
>3a3188	20 7e 17 20 dd 04 c2 20 a5 21 8f 64 f0 3a c2 20
>3a3198	ad 04 01 8f 5d f0 3a e2 20 ad 06 01 8f 5f f0 3a
>3a31a8	e2 20 a9 01 8f 59 f0 3a e2 20 a9 99 20 82 1c 20
>3a31b8	d6 1c c9 e6 f0 23 c9 e7 f0 5e 08 c2 20 48 a9 00
>3a31c8	08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff
>3a31d8	00 20 d0 18 e2 20 dc d2 08 20 82 1c 20 7e 17 20
>3a31e8	89 04 c2 20 a5 21 8f 67 f0 3a e2 20 a5 23 8f 69
>3a31f8	f0 3a a9 2c 20 82 1c 20 7e 17 20 89 04 c2 20 a5
>3a3208	21 8f 6a f0 3a e2 20 a5 23 8f 6c f0 3a e2 20 a9
>3a3218	00 8f 66 f0 3a 82 74 00 20 82 1c 20 7e 17 20 89
>3a3228	04 c2 20 a5 21 8f 67 f0 3a e2 20 a5 23 8f 69 f0
>3a3238	3a a9 2c 20 82 1c 20 7e 17 20 dd 04 c2 20 a5 21
>3a3248	8f 6d f0 3a 8d 00 01 a9 2c 00 20 82 1c 20 7e 17
>3a3258	20 dd 04 c2 20 a5 21 8f 6f f0 3a 8d 02 01 a9 2c
>3a3268	00 20 82 1c 20 7e 17 20 dd 04 c2 20 a5 21 8f 71
>3a3278	f0 3a c2 20 ad 04 01 8f 6a f0 3a e2 20 ad 06 01
>3a3288	8f 6c f0 3a e2 20 a9 01 8f 66 f0 3a c2 20 af 5d
>3a3298	f0 3a cf 6a f0 3a d0 14 e2 20 af 5f f0 3a cf 6c
>3a32a8	f0 3a d0 08 c2 20 20 30 2e 28 2b 60 08 c2 20 48
>3a32b8	a9 00 08 5b 68 28 e2 20 a9 0a 8f d1 08 00 c2 20
>3a32c8	29 ff 00 20 d0 18 e2 20 dc d2 08 08 20 96 1b e2
>3a32d8	20 a7 00 d0 03 4c 7b 33 c9 3a d0 03 4c 7b 33 c9
>3a32e8	22 d0 0b 20 9c 16 20 62 3c a9 3b 20 82 1c 20 3e
>3a32f8	03 90 41 20 6d 48 90 3c a9 3f 20 18 00 a9 20 20
>3a3308	18 00 20 10 00 e2 20 a5 e8 c9 02 f0 46 c9 00 f0
>3a3318	65 c9 01 f0 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a3328	20 a9 04 8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2
>3a3338	20 dc d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a3348	a9 02 8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20
>3a3358	dc d2 08 c2 20 a9 00 4c 85 21 a9 00 00 85 23 e2
>3a3368	20 a9 02 85 25 20 74 12 c2 20 20 0a 48 a9 0d 00
>3a3378	20 18 00 28 60 ea c2 20 a5 00 85 3e a5 02 85 40
>3a3388	a9 00 4c 85 00 a9 00 00 85 02 20 81 05 c2 20 a5
>3a3398	3e 85 00 a5 40 85 02 80 cf 08 20 96 1b e2 20 a7
>3a33a8	00 f0 49 c9 3a f0 45 20 3e 03 90 42 20 6d 48 90
>3a33b8	3d 20 14 00 e2 20 8f 00 4e 00 a9 00 8f 01 4e 00
>3a33c8	c2 20 a9 00 4e 85 21 a9 00 00 85 23 e2 20 a9 02
>3a33d8	85 25 20 74 12 20 0a 48 20 96 1b a7 00 f0 0d c9
>3a33e8	3a f0 09 c9 2c d0 07 20 75 1b 80 ae 28 60 08 c2
>3a33f8	20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00
>3a3408	c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 08 20 7e
>3a3418	17 20 89 04 e2 20 a9 5c 85 a0 c2 20 a5 21 85 a1
>3a3428	e2 20 a5 23 85 a3 e2 20 a9 2c 85 35 20 b7 1c 90
>3a3438	41 20 75 1b 20 7e 17 20 dd 04 c2 20 a5 21 85 53
>3a3448	e2 20 a9 2c 85 35 20 b7 1c 90 27 20 75 1b 20 7e
>3a3458	17 20 dd 04 c2 20 a5 21 85 57 e2 20 a9 2c 85 35
>3a3468	20 b7 1c 90 0d 20 75 1b 20 7e 17 20 dd 04 c2 20
>3a3478	a4 21 a6 57 a5 53 0b 8b 08 22 a0 08 00 28 ab 2b
>3a3488	20 ba 1b 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a3498	20 a9 04 8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2
>3a34a8	20 dc d2 08 08 e2 20 20 96 1b 20 6d 48 90 64 a9
>3a34b8	8c 20 82 1c a9 01 20 eb 14 a2 01 00 a9 00 8f 00
>3a34c8	4d 00 20 7e 17 20 dd 04 c2 20 a5 21 9f 00 4d 00
>3a34d8	e2 20 af 00 4d 00 1a 8f 00 4d 00 30 55 e8 e8 20
>3a34e8	96 1b a7 00 c9 2c f0 25 c9 8d d0 27 20 75 1b 20
>3a34f8	1b 49 c2 20 a5 be 85 21 e2 20 a5 c0 85 23 64 24
>3a3508	a5 e8 09 80 85 e8 85 25 20 0a 48 28 60 20 75 1b
>3a3518	4c ca 34 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a3528	02 8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc
>3a3538	d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a
>3a3548	8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2
>3a3558	08 08 20 96 1b e2 20 a7 00 f0 28 c9 3a f0 24 20
>3a3568	3e 03 90 21 20 6d 48 90 1c 20 ac 35 20 0a 48 20
>3a3578	96 1b a7 00 f0 0d c9 3a f0 09 c9 2c d0 07 20 75
>3a3588	1b 80 cf 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a3598	20 a9 02 8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2
>3a35a8	20 dc d2 08 08 a5 02 85 40 a5 00 85 3e a5 1a 85
>3a35b8	44 a5 18 85 42 c2 20 a5 38 d0 04 a5 36 f0 4e a5
>3a35c8	36 85 00 a5 38 85 02 a5 3a 85 18 a5 3c 85 1a e2
>3a35d8	20 a7 00 f0 53 c9 3a f0 4f c9 2c d0 03 20 75 1b
>3a35e8	20 96 1b a7 00 c9 22 f0 4e 20 57 03 b0 4e 08 c2
>3a35f8	20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00
>3a3608	c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 c2 20 a9
>3a3618	00 00 85 18 a9 36 00 85 1a 18 a5 18 69 04 00 85
>3a3628	00 a5 1a 69 00 00 85 02 e2 20 a9 80 85 33 a9 a8
>3a3638	85 35 20 cc 1b 80 a9 20 9c 16 80 03 20 d1 15 c2
>3a3648	20 a5 00 85 36 a5 02 85 38 a5 18 85 3a a5 1a 85
>3a3658	3c a5 42 85 18 a5 44 85 1a a5 3e 85 00 a5 40 85
>3a3668	02 28 60 20 ba 1b 60 64 36 64 38 64 3a 64 3c 60
>3a3678	20 24 00 60 20 7e 17 c2 20 a5 23 48 a5 21 48 e2
>3a3688	20 a7 00 c9 2c d0 22 20 75 1b 20 7e 17 c2 20 a5
>3a3698	24 d0 35 68 85 08 68 85 0a c2 20 a5 21 87 08 e2
>3a36a8	20 a0 02 00 a5 23 97 08 60 08 c2 20 48 a9 00 08
>3a36b8	5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00
>3a36c8	20 d0 18 e2 20 dc d2 08 08 c2 20 48 a9 00 08 5b
>3a36d8	68 28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff 00 20
>3a36e8	d0 18 e2 20 dc d2 08 20 7e 17 c2 20 a5 23 48 a5
>3a36f8	21 48 e2 20 a7 00 c9 2c d0 19 20 75 1b 20 7e 17
>3a3708	c2 20 a5 23 d0 2c 68 85 08 68 85 0a c2 20 a5 21
>3a3718	87 08 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a3728	02 8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc
>3a3738	d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09
>3a3748	8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2
>3a3758	08 20 7e 17 c2 20 a5 23 48 a5 21 48 e2 20 a7 00
>3a3768	c9 2c d0 1f 20 75 1b 20 7e 17 e2 20 a5 22 d0 32
>3a3778	c2 20 a5 23 d0 2c 68 85 08 68 85 0a e2 20 a5 21
>3a3788	87 08 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a3798	02 8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc
>3a37a8	d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09
>3a37b8	8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2
>3a37c8	08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 01 8f
>3a37d8	d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08
>3a37e8	08 e2 20 a7 00 f0 05 20 75 1b 80 f7 28 60 08 28
>3a37f8	60 08 28 60 08 28 60 08 c2 20 a5 1a 20 97 18 a5
>3a3808	18 20 97 18 a5 02 48 a5 00 48 20 ba 1b a5 02 20
>3a3818	97 18 a5 00 20 97 18 68 85 00 68 85 02 20 96 1b
>3a3828	20 6d 48 b0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a3838	20 a9 05 8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2
>3a3848	20 dc d2 08 e2 20 a5 e8 20 ae 18 a5 e7 20 ae 18
>3a3858	c2 20 a5 e5 20 97 18 20 96 1b e2 20 a7 00 c9 87
>3a3868	d0 6a a5 e8 c9 00 f0 04 c9 01 f0 00 20 75 1b 20
>3a3878	7e 17 20 0a 48 e2 20 a9 99 20 82 1c 20 7e 17 c2
>3a3888	20 a5 25 20 97 18 a5 23 20 97 18 a5 21 20 97 18
>3a3898	e2 20 a9 9a 85 35 20 b7 1c 90 1b 20 75 1b 20 7e
>3a38a8	17 e2 20 a5 25 20 97 18 c2 20 a5 23 20 97 18 a5
>3a38b8	21 20 97 18 80 14 c2 20 a9 00 00 20 97 18 a9 00
>3a38c8	00 20 97 18 a9 01 00 20 97 18 28 60 08 c2 20 48
>3a38d8	a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20
>3a38e8	29 ff 00 20 d0 18 e2 20 dc d2 08 08 8b 08 e2 20
>3a38f8	48 a9 00 48 ab 68 28 08 c2 20 48 a9 00 08 5b 68
>3a3908	28 c2 30 a4 31 c8 c8 c2 20 b9 0c 00 85 e5 b9 0e
>3a3918	00 e2 20 85 e7 b9 10 00 85 e8 c2 20 5a 20 c3 46
>3a3928	7a c2 20 b9 00 00 85 27 b9 02 00 85 29 e2 20 b9
>3a3938	04 00 85 2b c2 20 5a 20 a3 21 20 0a 48 7a c2 20
>3a3948	b9 06 00 85 27 b9 08 00 85 29 e2 20 b9 0a 00 85
>3a3958	2b c2 20 b9 02 00 30 0a 20 e7 22 20 76 04 f0 28
>3a3968	80 08 20 ca 22 20 76 04 f0 1e c2 20 b9 12 00 85
>3a3978	00 b9 14 00 85 02 b9 16 00 85 18 b9 18 00 85 1a
>3a3988	e2 20 a9 03 85 da 80 17 a2 21 08 20 ac 14 c2 20
>3a3998	18 a5 31 69 1a 00 85 31 a5 33 69 00 00 85 33 ab
>3a39a8	28 60 08 a5 18 48 a5 1a 48 20 96 1b 20 81 05 a5
>3a39b8	21 f0 26 20 71 1e 90 42 e2 20 a9 02 85 da 20 ba
>3a39c8	1b c2 20 68 20 97 18 68 20 97 18 a5 02 20 97 18
>3a39d8	a5 00 20 97 18 e6 2f 28 60 68 68 08 c2 20 48 a9
>3a39e8	00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29
>3a39f8	ff 00 20 d0 18 e2 20 dc d2 08 68 68 08 c2 20 48
>3a3a08	a9 00 08 5b 68 28 e2 20 a9 06 8f d1 08 00 c2 20
>3a3a18	29 ff 00 20 d0 18 e2 20 dc d2 08 08 c2 30 a5 2f
>3a3a28	f0 1e 20 b9 18 85 00 20 b9 18 85 02 20 b9 18 85
>3a3a38	18 20 b9 18 85 1a c6 2f e2 20 a9 03 85 da 28 60
>3a3a48	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 07 8f d1
>3a3a58	08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 08
>3a3a68	20 7e 17 20 76 04 f0 1c e2 20 a9 94 20 82 1c 20
>3a3a78	81 05 20 76 04 f0 12 20 71 1e 90 2c e2 20 a9 02
>3a3a88	85 da 80 03 20 ba 1b 28 60 08 c2 20 48 a9 00 08
>3a3a98	5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00
>3a3aa8	20 d0 18 e2 20 dc d2 08 08 c2 20 48 a9 00 08 5b
>3a3ab8	68 28 e2 20 a9 06 8f d1 08 00 c2 20 29 ff 00 20
>3a3ac8	d0 18 e2 20 dc d2 08 08 e2 20 a9 01 85 da 28 60
>3a3ad8	08 20 96 1b 20 81 05 a5 21 f0 0d 20 71 1e 90 27
>3a3ae8	e2 20 a9 02 85 da 28 60 08 c2 20 48 a9 00 08 5b
>3a3af8	68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00 20
>3a3b08	d0 18 e2 20 dc d2 08 08 c2 20 48 a9 00 08 5b 68
>3a3b18	28 e2 20 a9 06 8f d1 08 00 c2 20 29 ff 00 20 d0
>3a3b28	18 e2 20 dc d2 08 20 4e 14 20 9c 0c 20 c2 45 60
>3a3b38	08 a7 00 10 03 20 75 1b 20 6d 48 b0 03 4c af 3b
>3a3b48	e2 20 20 d6 1c c9 8c d0 0e a9 8c 20 82 1c a9 00
>3a3b58	8f 00 4d 00 20 d4 15 20 96 1b e2 20 a7 00 c9 87
>3a3b68	f0 03 4c af 3b 20 75 1b a5 e8 48 a5 e7 48 a5 e6
>3a3b78	48 a5 e5 48 20 7e 17 68 85 e5 68 85 e6 68 85 e7
>3a3b88	68 85 e8 29 80 f0 1b 20 35 46 90 3a c2 20 a0 09
>3a3b98	00 b7 08 85 be e2 20 c8 c8 b7 08 85 c0 20 fc 4a
>3a3ba8	80 03 20 0a 48 28 60 08 c2 20 48 a9 00 08 5b 68
>3a3bb8	28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00 20 d0
>3a3bc8	18 e2 20 dc d2 08 08 c2 20 48 a9 00 08 5b 68 28
>3a3bd8	e2 20 a9 05 8f d1 08 00 c2 20 29 ff 00 20 d0 18
>3a3be8	e2 20 dc d2 08 08 e2 20 20 d6 1c c9 00 f0 66 20
>3a3bf8	7e 17 e2 20 a5 25 c9 ff f0 14 c9 02 d0 05 20 62
>3a3c08	3c 80 0b c9 00 d0 05 20 82 3c 80 02 80 4a 20 96
>3a3c18	1b a7 00 f0 40 c9 3a f0 3c c9 2c f0 23 c9 3b f0
>3a3c28	24 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a3c38	d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08
>3a3c48	a9 09 20 18 00 20 75 1b 20 96 1b a7 00 f0 09 c9
>3a3c58	3a f0 05 80 9a 20 33 02 28 60 08 8b 08 c2 20 48
>3a3c68	a9 00 08 5b 68 28 e2 20 c2 10 a0 00 00 b7 21 f0
>3a3c78	06 20 18 00 c8 80 f6 ab 28 60 08 c2 20 20 3a 11
>3a3c88	a5 14 85 21 a5 16 85 23 20 62 3c 28 60 08 e2 20
>3a3c98	85 b3 4a 4a 4a 4a 29 0f 18 69 30 97 14 c8 a5 b3
>3a3ca8	29 0f 18 69 30 97 14 c8 28 60 e2 20 a9 8c 20 82
>3a3cb8	1c 08 20 7e 17 e2 20 c2 10 af 0e 08 af 09 08 8f
>3a3cc8	0e 08 af 20 e9 10 a0 00 00 af 06 08 af 20 95 3c
>3a3cd8	a9 2f 97 14 c8 af 09 08 af 20 95 3c a9 2f 97 14
>3a3ce8	c8 af 0f 08 af 20 95 3c af 0a 08 af 20 95 3c a9
>3a3cf8	00 97 14 af 0e 08 af 29 f7 8f 0e 08 af c2 20 a5
>3a3d08	14 85 21 a5 16 85 23 e2 20 a9 02 85 25 20 74 12
>3a3d18	28 e2 20 20 75 1b 60 e2 20 a9 8c 20 82 1c 08 20
>3a3d28	7e 17 e2 20 c2 10 af 0e 08 af 09 08 8f 0e 08 af
>3a3d38	20 e9 10 a0 00 00 af 04 08 af 29 7f 20 95 3c a9
>3a3d48	3a 97 14 c8 af 02 08 af 20 95 3c a9 3a 97 14 c8
>3a3d58	af 00 08 af 20 95 3c a9 00 97 14 af 0e 08 af 29
>3a3d68	f7 8f 0e 08 af c2 20 a5 14 85 21 a5 16 85 23 e2
>3a3d78	20 a9 02 85 25 20 74 12 28 e2 20 20 75 1b 60 08
>3a3d88	c2 20 20 7e 17 20 89 04 c2 20 a5 21 49 ff ff 85
>3a3d98	21 a5 23 49 ff ff 85 23 e6 21 d0 03 e6 23 00 28
>3a3da8	60 e2 20 a9 8c 20 82 1c 08 c2 30 20 7e 17 20 b3
>3a3db8	04 c2 20 a5 23 48 a5 21 48 20 96 1b e2 20 a7 00
>3a3dc8	c9 2c f0 03 4c 20 3e 20 75 1b 20 7e 17 20 dd 04
>3a3dd8	c2 20 a5 21 48 20 96 1b e2 20 a7 00 c9 2c f0 03
>3a3de8	4c 20 3e 20 75 1b 20 7e 17 20 dd 04 c2 20 a5 21
>3a3df8	85 8d e2 20 a5 23 85 8f c2 20 68 85 27 a9 00 00
>3a3e08	85 29 68 85 21 68 85 23 e2 20 a9 02 85 25 20 cc
>3a3e18	12 e2 20 20 75 1b 28 60 08 c2 20 48 a9 00 08 5b
>3a3e28	68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00 20
>3a3e38	d0 18 e2 20 dc d2 08 08 c2 20 48 a9 00 08 5b 68
>3a3e48	28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff 00 20 d0
>3a3e58	18 e2 20 dc d2 08 e2 20 a9 8c 20 82 1c 08 c2 30
>3a3e68	20 7e 17 e2 20 a5 25 c9 02 f0 03 4c e2 3e c2 20
>3a3e78	a5 23 48 a5 21 48 20 96 1b e2 20 a7 00 c9 2c f0
>3a3e88	03 4c 01 3f 20 75 1b 20 7e 17 e2 20 a5 25 c9 00
>3a3e98	d0 48 c2 20 a5 21 85 8d c2 20 68 85 21 68 85 23
>3a3ea8	e2 20 a9 02 85 25 e2 20 a0 00 00 b7 21 f0 03 c8
>3a3eb8	80 f9 c2 20 98 38 e5 8d 30 09 85 27 a9 00 00 85
>3a3ec8	29 80 07 a9 00 00 85 27 85 29 e2 20 a9 00 85 2b
>3a3ed8	20 cc 12 e2 20 20 75 1b 28 60 08 c2 20 48 a9 00
>3a3ee8	08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20 29 ff
>3a3ef8	00 20 d0 18 e2 20 dc d2 08 08 c2 20 48 a9 00 08
>3a3f08	5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29 ff 00
>3a3f18	20 d0 18 e2 20 dc d2 08 08 c2 20 48 a9 00 08 5b
>3a3f28	68 28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff 00 20
>3a3f38	d0 18 e2 20 dc d2 08 e2 20 a9 8c 20 82 1c 08 c2
>3a3f48	30 20 7e 17 e2 20 a5 25 c9 02 f0 03 4c ab 3f c2
>3a3f58	20 a5 23 48 a5 21 48 20 96 1b e2 20 a7 00 c9 2c
>3a3f68	f0 03 4c ca 3f 20 75 1b 20 7e 17 e2 20 a5 25 c9
>3a3f78	00 d0 30 c2 20 a5 21 85 8d c2 20 a9 00 00 85 27
>3a3f88	a9 00 00 85 29 e2 20 a9 00 85 2b c2 20 68 85 21
>3a3f98	68 85 23 e2 20 a9 02 85 25 20 cc 12 e2 20 20 75
>3a3fa8	1b 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a3fb8	04 8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc
>3a3fc8	d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>3a3fd8	8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2
>3a3fe8	08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>3a3ff8	d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08
>3a4008	e2 20 a9 8c 20 82 1c 20 7e 17 c2 10 e2 20 a5 25
>3a4018	c9 02 d0 23 c2 20 a5 00 85 3e a5 02 85 40 a5 21
>3a4028	85 00 a5 23 85 02 20 81 05 a5 3e 85 00 a5 40 85
>3a4038	02 e2 20 20 75 1b 60 08 c2 20 48 a9 00 08 5b 68
>3a4048	28 e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00 20 d0
>3a4058	18 e2 20 dc d2 08 e2 20 a9 8c 20 82 1c 08 20 7e
>3a4068	17 c2 10 e2 20 a5 25 c9 00 d0 1d 20 3a 11 c2 20
>3a4078	a5 14 85 21 a5 16 85 23 e2 20 a9 02 85 25 20 74
>3a4088	12 28 e2 20 20 75 1b 60 08 c2 20 48 a9 00 08 5b
>3a4098	68 28 e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00 20
>3a40a8	d0 18 e2 20 dc d2 08 e2 20 a9 8c 20 82 1c 08 20
>3a40b8	7e 17 20 b3 04 c2 20 64 0c 64 0e e2 30 a0 00 b7
>3a40c8	21 c9 20 f0 04 c9 24 d0 03 c8 80 f3 b7 21 20 68
>3a40d8	03 90 1e c2 20 06 0c 26 0e 06 0c 26 0e 06 0c 26
>3a40e8	0e 06 0c 26 0e e2 20 20 89 03 05 0c 85 0c c8 80
>3a40f8	db c2 20 a5 0c 85 21 a5 0e 85 23 e2 20 a9 00 85
>3a4108	25 28 e2 20 20 75 1b 60 e2 20 a9 8c 20 82 1c 08
>3a4118	20 7e 17 20 89 04 20 e9 10 e2 30 a0 ff a9 00 97
>3a4128	14 88 a5 21 29 0f aa bf 00 d0 3a 97 14 88 a5 21
>3a4138	29 f0 4a 4a 4a 4a aa bf 00 d0 3a 97 14 88 a5 22
>3a4148	85 21 a5 23 85 22 a5 24 85 23 a9 00 85 24 a5 21
>3a4158	d0 d0 a5 22 d0 cc a5 23 d0 c8 98 38 65 14 85 21
>3a4168	a5 15 85 22 a5 16 85 23 a5 17 85 24 a9 02 85 25
>3a4178	20 74 12 28 e2 20 20 75 1b 60 08 c2 20 48 a9 00
>3a4188	08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20 29 ff
>3a4198	00 20 d0 18 e2 20 dc d2 08 e2 20 a9 8c 20 82 1c
>3a41a8	20 7e 17 e2 20 a5 25 c9 02 d0 1f 8b a5 23 48 ab
>3a41b8	c2 10 a6 21 20 bf 11 ab 84 21 c2 20 64 23 e2 20
>3a41c8	a9 00 85 25 e2 20 20 75 1b 60 08 c2 20 48 a9 00
>3a41d8	08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20 29 ff
>3a41e8	00 20 d0 18 e2 20 dc d2 08 e2 20 a9 8c 20 82 1c
>3a41f8	20 7e 17 e2 20 a5 25 c9 00 d0 12 e2 20 a7 21 85
>3a4208	21 64 22 64 23 64 2e e2 20 20 75 1b 60 08 c2 20
>3a4218	48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2
>3a4228	20 29 ff 00 20 d0 18 e2 20 dc d2 08 e2 20 a9 8c
>3a4238	20 82 1c 20 7e 17 e2 20 a5 25 c9 00 d0 1d c2 20
>3a4248	a7 21 85 0c e2 20 a0 02 00 b7 21 85 23 64 24 c2
>3a4258	20 a5 0c 85 21 e2 20 20 75 1b 60 08 c2 20 48 a9
>3a4268	00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20 29
>3a4278	ff 00 20 d0 18 e2 20 dc d2 08 e2 20 a9 8c 20 82
>3a4288	1c 20 7e 17 e2 20 a5 25 c9 00 d0 0e c2 20 a7 21
>3a4298	85 21 64 23 e2 20 20 75 1b 60 08 c2 20 48 a9 00
>3a42a8	08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20 29 ff
>3a42b8	00 20 d0 18 e2 20 dc d2 08 e2 20 a9 8c 20 82 1c
>3a42c8	20 7e 17 e2 20 a5 25 c9 00 d0 24 20 e9 10 a5 21
>3a42d8	87 14 a9 00 a0 01 00 97 14 c2 20 a5 14 85 21 a5
>3a42e8	16 85 23 e2 20 a9 02 85 25 e2 20 20 75 1b 60 08
>3a42f8	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08
>3a4308	00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 e2 20
>3a4318	a9 8c 20 82 1c 20 7e 17 e2 20 a5 25 c9 02 d0 14
>3a4328	a7 21 85 21 64 22 64 23 64 24 a9 00 85 25 e2 20
>3a4338	20 75 1b 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a4348	a9 04 8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20
>3a4358	dc d2 08 e2 20 a9 8c 20 82 1c 20 7e 17 e2 20 a5
>3a4368	25 c9 00 d0 39 e2 20 a5 24 d0 52 a5 23 d0 4e a5
>3a4378	22 d0 4a c2 10 20 e9 10 a4 21 e2 20 a9 00 97 14
>3a4388	88 30 07 a9 20 97 14 88 10 fb a9 02 85 25 c2 20
>3a4398	a5 14 85 21 a5 16 85 23 e2 20 20 75 1b 60 08 c2
>3a43a8	20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00
>3a43b8	c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 08 c2 20
>3a43c8	48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08 00 c2
>3a43d8	20 29 ff 00 20 d0 18 e2 20 dc d2 08 e2 20 a9 8c
>3a43e8	20 82 1c 20 7e 17 e2 20 a5 25 c9 00 d0 39 e2 20
>3a43f8	a5 24 d0 52 a5 23 d0 4e a5 22 d0 4a c2 10 20 e9
>3a4408	10 a4 21 e2 20 a9 00 97 14 88 30 07 a9 09 97 14
>3a4418	88 10 fb a9 02 85 25 c2 20 a5 14 85 21 a5 16 85
>3a4428	23 e2 20 20 75 1b 60 08 c2 20 48 a9 00 08 5b 68
>3a4438	28 e2 20 a9 04 8f d1 08 00 c2 20 29 ff 00 20 d0
>3a4448	18 e2 20 dc d2 08 08 c2 20 48 a9 00 08 5b 68 28
>3a4458	e2 20 a9 09 8f d1 08 00 c2 20 29 ff 00 20 d0 18
>3a4468	e2 20 dc d2 08 e2 20 a9 8c 20 82 1c 20 7e 17 20
>3a4478	89 04 c2 20 a5 23 10 17 49 ff ff 85 23 a5 21 49
>3a4488	ff ff 18 69 01 00 85 21 a5 23 69 00 00 85 23 e2
>3a4498	20 20 75 1b 60 e2 20 a9 8c 20 82 1c 20 7e 17 e2
>3a44a8	20 a5 25 c9 00 d0 25 c2 20 a5 23 30 12 d0 04 a5
>3a44b8	21 f0 13 a9 00 00 85 23 a9 01 00 85 21 80 07 a9
>3a44c8	ff ff 85 23 85 21 e2 20 20 75 1b 60 08 c2 20 48
>3a44d8	a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20
>3a44e8	29 ff 00 20 d0 18 e2 20 dc d2 08 00 ea 60 08 0b
>3a44f8	08 c2 20 48 a9 00 08 5b 68 28 c2 30 c2 20 a9 00
>3a4508	00 85 d7 e2 20 a9 36 85 d9 c2 30 a9 00 00 a0 00
>3a4518	00 97 d7 a0 02 00 97 d7 a0 04 00 97 d7 20 4b 1b
>3a4528	2b 28 60 8b 08 c2 20 a9 00 00 85 18 a9 36 00 85
>3a4538	1a 20 4b 1b 20 27 1e 28 ab 60 08 c2 20 64 53 a9
>3a4548	ff 7f 85 57 20 33 02 20 d6 1c 29 ff 00 c9 00 00
>3a4558	f0 2c c9 81 00 f0 1a 20 96 1b 20 81 05 a5 21 85
>3a4568	53 20 d6 1c 29 ff 00 c9 00 00 f0 12 c9 81 00 d0
>3a4578	2a 20 82 1c 20 96 1b 20 81 05 a5 21 85 57 a5 1a
>3a4588	48 a5 18 48 a5 02 48 a5 00 48 20 4f 13 68 85 00
>3a4598	68 85 02 68 85 18 68 85 1a 28 60 08 c2 20 48 a9
>3a45a8	00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 c2 20 29
>3a45b8	ff 00 20 d0 18 e2 20 dc d2 08 08 08 c2 20 48 a9
>3a45c8	00 08 5b 68 28 c2 20 64 e2 64 e5 e2 20 64 e4 64
>3a45d8	e7 64 e8 c2 20 38 a5 d7 69 04 00 85 df e2 20 a5
>3a45e8	d9 69 00 85 e1 28 60 c9 5f f0 1a c9 3a b0 04 c9
>3a45f8	30 b0 12 c9 5b b0 04 c9 41 b0 0a c9 7b b0 04 c9
>3a4608	61 b0 02 18 60 38 60 08 e2 20 c2 10 a0 00 00 b7
>3a4618	0c f0 0a d7 e5 d0 13 c8 c0 08 00 d0 f2 b7 e5 20
>3a4628	b2 03 20 ef 45 b0 03 28 38 60 28 18 60 08 e2 20
>3a4638	c2 10 a0 00 00 a2 00 00 b7 e5 f0 0b 20 b2 03 9f
>3a4648	00 4e 00 c8 e8 80 f1 a9 00 9f 00 4e 00 c2 20 a9
>3a4658	00 4e 85 e5 e2 20 a9 00 85 e7 c2 20 a5 e2 85 08
>3a4668	d0 06 e2 20 a5 e4 f0 4d e2 20 a5 e4 85 0a a5 e8
>3a4678	a0 00 00 d7 08 d0 17 c2 20 18 a5 08 69 01 00 85
>3a4688	0c e2 20 a5 0a 69 00 85 0e 20 0f 46 b0 2a a0 0d
>3a4698	00 c2 20 b7 08 85 0c c8 c8 e2 20 b7 08 85 0e d0
>3a46a8	06 c2 20 a5 0c f0 0e c2 20 a5 0c 85 08 e2 20 a5
>3a46b8	0e 85 0a 80 b9 28 18 60 28 38 60 08 20 35 46 b0
>3a46c8	1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 05 8f
>3a46d8	d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08
>3a46e8	c2 30 a0 09 00 b7 08 85 21 c8 c8 b7 08 85 23 e2
>3a46f8	20 a0 00 00 b7 08 85 25 28 60 08 c2 20 18 a5 df
>3a4708	69 10 00 85 08 e2 20 a5 e1 69 00 85 0a c5 ba 90
>3a4718	27 c2 20 a5 08 c5 b8 90 1f 08 c2 20 48 a9 00 08
>3a4728	5b 68 28 e2 20 a9 09 8f d1 08 00 c2 20 29 ff 00
>3a4738	20 d0 18 e2 20 dc d2 08 c2 20 a5 df 85 be e2 20
>3a4748	a5 e1 85 c0 c2 20 a5 08 85 df e2 20 a5 0a 85 e1
>3a4758	28 60 08 e2 20 a5 25 c5 e8 f0 1f 08 c2 20 48 a9
>3a4768	00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2 20 29
>3a4778	ff 00 20 d0 18 e2 20 dc d2 08 c2 10 20 02 47 c2
>3a4788	30 18 a5 be 69 01 00 85 08 e2 20 a5 c0 69 00 85
>3a4798	0a a0 00 00 a9 00 97 08 c8 c0 08 00 d0 f8 a0 00
>3a47a8	00 b7 e5 f0 10 20 b2 03 20 ef 45 90 08 97 08 c8
>3a47b8	c0 08 00 d0 ec c2 20 a0 09 00 a5 21 97 be a5 23
>3a47c8	c8 c8 97 be a5 e2 a0 0d 00 97 be c8 c8 e2 20 a5
>3a47d8	e4 97 be c2 20 a5 be 85 e2 e2 20 a5 c0 85 e4 e2
>3a47e8	20 a0 00 00 a5 25 97 be c9 02 f0 02 28 60 c2 20
>3a47f8	a5 21 85 be e2 20 a5 23 85 c0 20 00 0f 20 15 0f
>3a4808	80 ea 08 c2 30 a5 e2 d0 06 e2 20 a5 e4 f0 05 20
>3a4818	35 46 b0 05 20 5a 47 80 17 e2 20 a5 25 c9 02 f0
>3a4828	11 c2 30 a0 09 00 a5 21 97 08 c8 c8 a5 23 97 08
>3a4838	28 60 a0 09 00 b7 08 85 be c8 c8 e2 20 b7 08 85
>3a4848	c0 20 00 0f 20 34 0f e2 20 a5 25 c9 02 f0 02 80
>3a4858	d0 c2 20 a5 21 85 be e2 20 a5 23 85 c0 20 00 0f
>3a4868	20 15 0f 80 bc 08 20 96 1b e2 20 a7 00 20 3e 03
>3a4878	90 42 c2 20 a5 00 85 e5 e2 20 a5 02 85 e7 20 75
>3a4888	1b a7 00 f0 0d c9 24 f0 14 c9 25 f0 09 20 ef 45
>3a4898	b0 ec a9 00 80 0c 20 75 1b a9 00 80 05 20 75 1b
>3a48a8	a9 02 85 e8 20 d6 1c c9 8c d0 06 a5 e8 09 80 85
>3a48b8	e8 28 38 60 28 18 60 08 c2 20 48 a9 00 08 5b 68
>3a48c8	28 c2 20 a5 21 85 0c a5 23 64 0e 64 21 64 23 e2
>3a48d8	20 64 26 a9 01 85 25 c2 20 a5 0c f0 35 10 0e e2
>3a48e8	20 a9 80 85 26 c2 20 49 ff ff 1a 85 0c e2 20 e6
>3a48f8	24 c2 20 46 0e 66 0c e2 20 66 23 66 22 66 21 c2
>3a4908	20 a5 0c c9 01 00 d0 e5 e2 20 06 26 66 23 66 22
>3a4918	66 21 60 08 20 00 0f c2 20 a9 01 00 85 21 a9 00
>3a4928	00 85 23 e2 20 af 00 4d 00 c2 20 29 ff 00 85 8d
>3a4938	a8 a2 01 00 c2 20 bf 00 4d 00 85 27 a9 00 00 85
>3a4948	29 20 f0 21 e8 e8 88 d0 eb c2 20 a9 04 00 85 27
>3a4958	a9 00 00 85 29 20 f0 21 e2 20 af 00 4d 00 85 0c
>3a4968	a9 00 85 0d c2 20 06 0c 38 a5 21 65 0c 85 21 a5
>3a4978	23 69 00 00 85 23 d0 29 e2 20 a5 e8 09 80 a6 21
>3a4988	20 c4 0c e2 20 af 00 4d 00 87 be a0 01 00 a2 00
>3a4998	00 e2 20 bf 01 4d 00 97 be e4 8d f0 23 e8 c8 80
>3a49a8	f0 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>3a49b8	d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08
>3a49c8	e2 20 38 a5 be 67 be 85 08 a5 bf 69 00 85 09 a5
>3a49d8	c0 69 00 85 0a 64 0b c2 20 a0 05 00 b7 c1 85 0c
>3a49e8	e2 20 c8 c8 b7 c1 85 0e 64 0f e2 20 a9 00 87 08
>3a49f8	c2 20 18 a5 08 69 01 00 85 08 a5 0a 69 00 00 85
>3a4a08	0a c5 0e d0 e5 a5 08 c5 0c d0 df 28 60 08 c2 20
>3a4a18	64 08 64 0a e2 20 af 00 4d 00 85 8d 64 8e a2 01
>3a4a28	00 e2 20 a7 be c5 8d f0 1f 08 c2 20 48 a9 00 08
>3a4a38	5b 68 28 e2 20 a9 0a 8f d1 08 00 c2 20 29 ff 00
>3a4a48	20 d0 18 e2 20 dc d2 08 c9 01 f0 3a a0 01 00 e2
>3a4a58	20 bf 00 4d 00 85 21 64 22 64 23 64 24 b7 be 85
>3a4a68	27 64 28 64 29 64 2a a5 21 c5 27 b0 68 20 f0 21
>3a4a78	c2 20 18 a5 08 65 21 85 08 a5 0a 65 23 85 0a e8
>3a4a88	e8 c8 c4 8d d0 c9 e2 20 18 bf 00 4d 00 85 8e 65
>3a4a98	08 85 08 a5 09 69 00 85 09 c2 20 a5 0a 69 00 00
>3a4aa8	85 0a c2 20 06 08 26 0a 06 08 26 0a e2 20 38 a5
>3a4ab8	08 65 8d 85 08 a5 09 69 00 85 09 c2 20 a5 0a 69
>3a4ac8	00 00 85 0a 18 a5 08 65 be 85 08 e2 20 a5 0a 65
>3a4ad8	c0 85 0a 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a4ae8	20 a9 09 8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2
>3a4af8	20 dc d2 08 08 20 00 0f e2 20 a0 00 00 b7 c1 29
>3a4b08	7f c5 25 d0 28 a5 25 48 c2 20 a5 23 48 a5 21 48
>3a4b18	20 15 4a 68 85 21 68 85 23 e2 20 68 85 25 c2 20
>3a4b28	a5 21 87 08 a0 02 00 a5 23 97 08 28 60 08 c2 20
>3a4b38	48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 c2
>3a4b48	20 29 ff 00 20 d0 18 e2 20 dc d2 08 08 20 00 0f
>3a4b58	f4 00 00 f4 00 00 e2 20 48 20 15 4a e2 20 68 c2
>3a4b68	20 68 68 c2 20 a7 08 85 21 a0 02 00 b7 08 85 23
>3a4b78	e2 20 a0 00 00 b7 c1 29 7f 85 25 28 60 da 0b 08
>3a4b88	08 c2 20 48 a9 00 08 5b 68 28 c2 30 a5 23 89 f0
>3a4b98	ff d0 29 89 0f 00 d0 0c a5 21 89 00 fc d0 05 20
>3a4ba8	82 3c 80 2e a2 0a 00 46 23 66 21 ca d0 f9 20 82
>3a4bb8	3c e2 20 a9 4b 20 18 00 c2 20 80 16 a2 14 00 46
>3a4bc8	23 66 21 ca d0 f9 20 82 3c e2 20 a9 4d 20 18 00
>3a4bd8	c2 20 28 2b fa 60 0b 08 c2 30 a9 00 00 8f b4 08
>3a4be8	00 8f b6 08 00 e2 20 20 d6 1c c9 00 f0 08 20 7e
>3a4bf8	17 20 b3 04 80 11 c2 20 a9 00 00 85 21 85 23 e2
>3a4c08	20 a9 02 85 25 c2 20 20 3f 4d 22 08 11 00 b0 22
>3a4c18	20 f0 4d 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a4c28	10 8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc
>3a4c38	d2 08 20 33 02 08 c2 20 48 a9 20 03 5b 68 28 e2
>3a4c48	20 a0 00 00 b7 18 d0 03 82 a9 00 c9 e5 d0 03 82
>3a4c58	96 00 a0 0b 00 b7 18 89 08 f0 03 82 a9 00 89 02
>3a4c68	f0 03 82 83 00 29 0f c9 0f d0 03 82 7a 00 a0 00
>3a4c78	00 b7 18 20 18 00 c8 c0 08 00 d0 f5 a9 20 20 18
>3a4c88	00 a0 08 00 b7 18 20 18 00 c8 c0 0b 00 d0 f5 a9
>3a4c98	09 20 18 00 a0 0b 00 b7 18 89 10 d0 1e c2 20 a0
>3a4ca8	1c 00 b7 18 8f 21 08 00 c8 c8 b7 18 8f 23 08 00
>3a4cb8	e2 20 a9 00 8f 25 08 00 20 85 4b a9 09 20 18 00
>3a4cc8	a0 0b 00 b7 18 89 08 d0 1c 89 01 f0 05 a9 52 20
>3a4cd8	18 00 89 04 f0 05 a9 53 20 18 00 89 10 f0 05 a9
>3a4ce8	44 20 18 00 ea 20 33 02 20 4a 02 22 0c 11 00 90
>3a4cf8	03 82 41 ff 20 f0 4d 08 c2 20 48 a9 00 08 5b 68
>3a4d08	28 20 ba 1b 28 2b 60 08 c2 20 48 a9 20 03 5b 68
>3a4d18	28 e2 20 29 0f c9 0f f0 cf a9 5b 20 18 00 a0 00
>3a4d28	00 b7 18 c9 20 f0 09 20 18 00 c8 c0 08 00 d0 f1
>3a4d38	a9 5d 20 18 00 80 ae 0b 08 08 c2 20 48 a9 20 03
>3a4d48	5b 68 28 c2 30 a9 73 f2 85 20 a9 3a 00 85 22 a0
>3a4d58	00 00 e2 20 a9 00 97 20 c8 c0 1e 00 d0 f8 c2 20
>3a4d68	a9 73 f0 8f 81 f2 3a a9 3a 00 8f 83 f2 3a af 21
>3a4d78	08 00 8f 75 f2 3a af 23 08 00 8f 77 f2 3a 28 2b
>3a4d88	60 08 c2 30 20 96 1b 20 7e 17 20 b3 04 20 3f 4d
>3a4d98	e2 20 a9 2c 85 35 20 b7 1c b0 0f c2 20 a9 ff ff
>3a4da8	8f 54 03 00 8f 56 03 00 80 17 20 75 1b 20 7e 17
>3a4db8	20 89 04 c2 20 a5 21 8f 54 03 00 a5 23 8f 56 03
>3a4dc8	00 22 18 11 00 b0 1f 08 c2 20 48 a9 00 08 5b 68
>3a4dd8	28 e2 20 a9 11 8f d1 08 00 c2 20 29 ff 00 20 d0
>3a4de8	18 e2 20 dc d2 08 28 60 8b 0b 08 08 c2 20 48 a9
>3a4df8	00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 e2
>3a4e08	20 af 2e 03 00 85 21 a9 00 85 22 85 23 85 24 a9
>3a4e18	00 85 25 85 e8 a9 3a 85 e7 c2 20 a9 53 4e 85 e5
>3a4e28	20 0a 48 e2 20 af 20 03 00 85 21 a9 00 85 22 85
>3a4e38	23 85 24 a9 00 85 25 85 e8 a9 3a 85 e7 c2 20 a9
>3a4e48	5b 4e 85 e5 20 0a 48 28 2b ab 60 44 4f 53 53 54
>3a4e58	41 54 00 42 49 4f 53 53 54 41 54 00 08 c2 30 20
>3a4e68	96 1b 20 7e 17 20 b3 04 a5 21 8f 60 03 00 a5 23
>3a4e78	8f 62 03 00 a9 ff ff 8f 54 03 00 8f 56 03 00 22
>3a4e88	24 11 00 b0 25 20 d0 18 20 f0 4d 08 c2 20 48 a9
>3a4e98	00 08 5b 68 28 e2 20 a9 11 8f d1 08 00 c2 20 29
>3a4ea8	ff 00 20 d0 18 e2 20 dc d2 08 20 d0 18 28 60 08
>3a4eb8	c2 30 20 96 1b 20 7e 17 20 b3 04 20 3f 4d a9 00
>3a4ec8	00 8f 54 03 00 a9 01 00 8f 56 03 00 20 f6 44 22
>3a4ed8	18 11 00 b0 22 20 f0 4d 08 c2 20 48 a9 00 08 5b
>3a4ee8	68 28 e2 20 a9 11 8f d1 08 00 c2 20 29 ff 00 20
>3a4ef8	d0 18 e2 20 dc d2 08 20 f0 4d c2 20 a2 12 00 18
>3a4f08	bf 73 f2 3a 69 00 00 85 90 bf 75 f2 3a 69 01 00
>3a4f18	85 92 e2 20 a9 00 87 90 c2 20 a9 00 00 85 78 a9
>3a4f28	01 00 85 7a a2 00 00 e2 20 a7 78 f0 28 c9 0d f0
>3a4f38	12 c9 0a f0 04 9d 00 4f e8 c2 20 e6 78 d0 e8 e6
>3a4f48	7a 80 e4 e2 20 a9 00 9d 00 4f 20 25 21 e6 78 d0
>3a4f58	d3 e6 7a 80 cf e0 00 00 f0 0a e2 20 a9 00 9d 00
>3a4f68	4f 20 25 21 28 60 08 c2 30 20 96 1b 20 7e 17 20
>3a4f78	b3 04 20 3f 4d e2 20 a9 2c 20 82 1c c2 20 20 7e
>3a4f88	17 20 89 04 a5 21 8f 50 03 00 a5 23 8f 52 03 00
>3a4f98	e2 20 a9 2c c2 20 20 82 1c 20 7e 17 20 89 04 a5
>3a4fa8	21 8f 58 03 00 a5 23 8f 5a 03 00 22 1c 11 00 b0
>3a4fb8	22 20 f0 4d 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a4fc8	a9 12 8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20
>3a4fd8	dc d2 08 20 f0 4d 28 60 da 5a 08 a2 00 00 a0 00
>3a4fe8	00 e2 20 b7 21 9d 00 04 f0 04 e8 c8 80 f5 28 7a
>3a4ff8	fa 60 08 c2 30 20 96 1b 20 7e 17 20 b3 04 20 3f
>3a5008	4d a9 00 00 85 a4 e2 20 a9 01 85 a6 a9 20 85 b2
>3a5018	c2 20 a9 00 00 85 a9 a9 ff ff 85 a7 c2 20 a9 00
>3a5028	00 85 53 85 55 a9 ff ff 85 57 a9 ff 7f 85 59 20
>3a5038	4f 13 e2 20 a9 80 85 b2 c2 20 c6 a9 18 a9 00 00
>3a5048	8f 50 03 00 65 a9 8f 58 03 00 a9 01 00 8f 52 03
>3a5058	00 69 00 00 8f 5a 03 00 22 1c 11 00 b0 22 20 f0
>3a5068	4d 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 12 8f
>3a5078	d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08
>3a5088	20 f0 4d 28 60 08 c2 30 20 96 1b 20 7e 17 20 b3
>3a5098	04 20 e0 4f 22 04 11 00 b0 22 20 f0 4d 08 c2 20
>3a50a8	48 a9 00 08 5b 68 28 e2 20 a9 13 8f d1 08 00 c2
>3a50b8	20 29 ff 00 20 d0 18 e2 20 dc d2 08 20 f0 4d 28
>3a50c8	60 da 08 e2 20 c9 61 90 08 c9 7b b0 04 29 df 80
>3a50d8	13 c9 20 90 13 a2 00 00 df f4 50 3a f0 0a e8 e0
>3a50e8	0f 00 d0 f4 28 38 fa 6b 28 18 fa 6b 2a 2b 2c 2f
>3a50f8	3a 3b 3c 3d 3e 3f 5c 5b 5d 7c 22 08 08 c2 20 48
>3a5108	a9 00 08 5b 68 28 c2 30 20 7e 17 20 b3 04 20 e0
>3a5118	4f 22 10 11 00 b0 22 20 f0 4d 08 c2 20 48 a9 00
>3a5128	08 5b 68 28 e2 20 a9 14 8f d1 08 00 c2 20 29 ff
>3a5138	00 20 d0 18 e2 20 dc d2 08 e2 20 a9 2c 20 82 1c
>3a5148	c2 20 20 7e 17 20 b3 04 ad 38 03 85 08 ad 3a 03
>3a5158	85 0a e2 20 a2 00 00 a9 20 95 7c e8 e0 0b 00 d0
>3a5168	f8 a2 00 00 a0 00 00 b7 21 f0 6d c9 2e f0 30 22
>3a5178	c9 50 3a b0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a5188	20 a9 0a 8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2
>3a5198	20 dc d2 08 95 7c c8 e8 c0 08 00 d0 ca 80 01 c8
>3a51a8	a2 08 00 b7 21 f0 31 22 c9 50 3a b0 22 20 f0 4d
>3a51b8	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d1
>3a51c8	08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2 08 95
>3a51d8	7c c8 e8 c0 0b 00 d0 cb a2 00 00 a0 00 00 b5 7c
>3a51e8	97 08 e8 c8 c0 0b 00 d0 f5 22 14 11 00 b0 22 20
>3a51f8	f0 4d 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 15
>3a5208	8f d1 08 00 c2 20 29 ff 00 20 d0 18 e2 20 dc d2
>3a5218	08 20 f0 4d 28 60 08 08 c2 20 48 a9 00 08 5b 68
>3a5228	28 c2 30 20 7e 17 20 b3 04 a5 21 8f 64 03 00 a5
>3a5238	23 8f 66 03 00 e2 20 a9 2c 20 82 1c c2 20 20 7e
>3a5248	17 20 b3 04 a5 21 8f 68 03 00 a5 23 8f 6a 03 00
>3a5258	22 30 11 00 b0 1f 08 c2 20 48 a9 00 08 5b 68 28
>3a5268	e2 20 a9 16 8f d1 08 00 c2 20 29 ff 00 20 d0 18
>3a5278	e2 20 dc d2 08 28 60 5c 3c 6c 3a 5c 8d 6a 3a 5c
>3a5288	3d 6c 3a 5c b9 5b 3a 5c 16 5c 3a 5c 49 5b 3a 5c
>3a5298	cf 5a 3a 5c 4c 60 3a 5c 3a 57 3a 5c 67 5a 3a 5c
>3a52a8	22 5a 3a 5c ac 59 3a 5c 4b 6b 3a 5c 48 58 3a 5c
>3a52b8	9e 56 3a 5c c6 6b 3a 5c 76 57 3a 5c 3f 6c 3a 5c
>3a52c8	38 6c 3a 5c 65 59 3a 5c 40 6c 3a 18 fb c2 20 a9
>3a52d8	ff fe 1b 58 5c e0 52 3a c2 30 22 9e 56 3a 20 08
>3a52e8	00 20 0c 00 8b e2 20 a9 00 48 ab a2 00 4f 20 c1
>3a52f8	03 ab 22 83 52 3a 22 8b 52 3a 80 e2 08 8b e2 20
>3a5308	a9 3a 48 ab c2 10 a2 17 53 20 c0 02 ab 28 6b 41
>3a5318	20 3c 73 74 61 72 74 3e 20 3c 61 73 73 65 6d 62
>3a5328	6c 79 3e 0d 20 20 41 73 73 65 6d 62 6c 65 20 61
>3a5338	20 70 72 6f 67 72 61 6d 0d 0d 43 20 3c 73 74 61
>3a5348	72 74 31 3e 20 3c 73 74 61 72 74 32 3e 20 5b 6c
>3a5358	65 6e 20 28 31 20 69 66 20 62 6c 61 6e 6b 29 5d
>3a5368	0d 20 20 43 6f 6d 70 61 72 65 20 74 6f 20 73 65
>3a5378	63 74 69 6f 6e 73 20 6f 66 20 6d 65 6d 6f 72 79
>3a5388	0d 0d 44 20 3c 73 74 61 72 74 3e 20 5b 65 6e 64
>3a5398	5d 0d 20 20 44 69 73 61 73 73 65 6d 62 6c 65 20
>3a53a8	61 20 70 72 6f 67 72 61 6d 0d 0d 46 20 3c 73 74
>3a53b8	61 72 74 3e 20 3c 65 6e 64 3e 20 3c 62 79 74 65
>3a53c8	3e 0d 20 20 46 69 6c 6c 20 61 20 62 6c 6f 63 6b
>3a53d8	20 6f 66 20 6d 65 6d 6f 72 79 20 77 69 74 68 20
>3a53e8	61 20 62 79 74 65 0d 0d 47 20 5b 61 64 64 72 65
>3a53f8	73 73 5d 0d 20 20 53 74 61 72 74 20 65 78 65 63
>3a5408	75 74 69 6f 6e 20 61 74 20 61 20 6c 6f 63 61 74
>3a5418	69 6f 6e 0d 0d 4a 20 5b 61 64 64 72 65 73 73 5d
>3a5428	20 2d 20 4a 75 6d 70 20 74 6f 20 61 20 6c 6f 63
>3a5438	61 74 69 6f 6e 20 69 6e 20 6d 65 6d 6f 72 79 0d
>3a5448	20 20 4a 75 6d 70 20 74 6f 20 61 20 6c 6f 63 61
>3a5458	74 69 6f 6e 20 69 6e 20 6d 65 6d 6f 72 79 0d 0d
>3a5468	48 20 3c 73 74 61 72 74 3e 20 3c 65 6e 64 3e 20
>3a5478	3c 62 79 74 65 3e 20 5b 62 79 74 65 5d 2e 2e 0d
>3a5488	20 20 48 75 6e 74 20 66 6f 72 20 76 61 6c 75 65
>3a5498	73 20 69 6e 20 6d 65 6d 6f 72 79 0d 0d 4c 20 20
>3a54a8	20 20 20 4c 4f 41 44 20 20 20 20 20 20 20 20 20
>3a54b8	22 46 69 6c 65 22 20 5b 64 65 73 74 69 6e 61 74
>3a54c8	69 6f 6e 5d 0d 4d 20 3c 73 74 61 72 74 3e 20 5b
>3a54d8	65 6e 64 5d 0d 20 20 44 75 6d 70 20 74 68 65 20
>3a54e8	76 61 6c 75 65 20 69 6e 20 6d 65 6d 6f 72 79 0d
>3a54f8	0d 52 20 2d 20 44 69 73 70 6c 61 79 20 74 68 65
>3a5508	20 76 61 6c 75 65 73 20 6f 66 20 74 68 65 20 72
>3a5518	65 67 69 73 74 65 72 73 0d 0d 3b 20 3c 50 43 3e
>3a5528	20 3c 41 3e 20 3c 58 3e 20 3c 59 3e 20 3c 53 50
>3a5538	3e 20 3c 44 42 52 3e 20 3c 44 50 3e 20 3c 4e 56
>3a5548	4d 58 44 49 5a 43 3e 0d 20 20 43 68 61 6e 67 65
>3a5558	20 74 68 65 20 63 6f 6e 74 65 6e 74 73 20 6f 66
>3a5568	20 74 68 65 20 72 65 67 69 73 74 65 72 73 0d 0d
>3a5578	53 20 20 20 20 20 53 41 56 45 20 20 20 20 20 20
>3a5588	20 20 20 22 46 69 6c 65 22 20 3c 73 74 61 72 74
>3a5598	3e 20 3c 65 6e 64 3e 0d 54 20 3c 73 74 61 72 74
>3a55a8	3e 20 3c 65 6e 64 3e 20 3c 64 65 73 74 69 6e 61
>3a55b8	74 69 6f 6e 3e 0d 20 20 54 72 61 6e 73 66 65 72
>3a55c8	20 28 63 6f 70 79 29 20 64 61 74 61 20 77 69 74
>3a55d8	68 69 6e 20 6d 65 6d 6f 72 79 0d 0d 57 20 3c 62
>3a55e8	79 74 65 3e 0d 20 20 53 65 74 20 74 68 65 20 72
>3a55f8	65 67 69 73 74 65 72 20 77 69 64 74 68 20 66 6c
>3a5608	61 67 73 20 66 6f 72 20 74 68 65 20 64 69 73 61
>3a5618	73 73 65 6d 62 6c 65 72 0d 0d 58 20 2d 20 52 65
>3a5628	74 75 72 6e 20 74 6f 20 42 41 53 49 43 0d 0d 3e
>3a5638	20 3c 73 74 61 72 74 3e 20 3c 62 79 74 65 3e 20
>3a5648	5b 62 79 74 65 5d 2e 2e 2e 0d 20 20 45 64 69 74
>3a5658	20 64 61 74 61 20 69 6e 20 6d 65 6d 6f 72 79 0d
>3a5668	0d 3f 20 2d 20 44 69 73 70 6c 61 79 20 61 20 73
>3a5678	68 6f 72 74 20 68 65 6c 70 20 73 63 72 65 65 6e
>3a5688	0d 0d 00 08 08 c2 20 48 a9 46 08 5b 68 28 e2 20
>3a5698	a5 0d 85 4e 28 6b 08 e2 20 48 a9 3a 48 ab 68 28
>3a56a8	a2 7d 6c 20 c0 02 e2 20 a9 3b 20 18 00 a9 20 20
>3a56b8	18 00 c2 30 08 e2 20 48 a9 00 48 ab 68 28 a0 03
>3a56c8	00 a2 42 02 20 43 02 c2 20 a9 20 00 20 18 00 af
>3a56d8	44 02 00 20 d0 02 a9 20 00 20 18 00 af 46 02 00
>3a56e8	20 d0 02 a9 20 00 20 18 00 af 48 02 00 20 d0 02
>3a56f8	a9 20 00 20 18 00 af 4a 02 00 20 d0 02 a9 20 00
>3a5708	20 18 00 af 4e 02 00 20 ea 02 a9 20 00 20 18 00
>3a5718	20 18 00 af 4c 02 00 20 d0 02 a9 20 00 20 18 00
>3a5728	08 e2 20 ad 4f 02 22 96 69 3a 28 20 33 02 20 33
>3a5738	02 6b 08 0b 08 c2 20 48 a9 46 08 5b 68 28 e2 20
>3a5748	a5 15 87 0d e2 20 a5 0f c5 13 d0 0e c2 20 a5 0d
>3a5758	c5 11 d0 06 20 33 02 2b 28 6b c2 20 18 a5 0d 69
>3a5768	01 00 85 0d e2 20 a5 0e 69 00 85 0e 80 d0 08 0b
>3a5778	08 c2 20 48 a9 46 08 5b 68 28 e2 20 a5 0f c5 17
>3a5788	90 45 c2 20 a5 0d c5 15 90 3d e2 20 a7 0d 87 15
>3a5798	a5 0f c5 13 d0 0b c2 20 a5 0d c5 11 d0 03 4c 2d
>3a57a8	58 c2 20 18 a5 0d 69 01 00 85 0d e2 20 a5 0e 69
>3a57b8	00 85 0e c2 20 18 a5 15 69 01 00 85 15 e2 20 a5
>3a57c8	16 69 00 85 16 80 c3 c2 20 38 a5 11 e5 0d 85 19
>3a57d8	e2 20 a5 13 e5 0f 85 1b c2 20 18 a5 19 65 15 85
>3a57e8	15 e2 20 a5 1b 65 17 85 17 e2 20 a7 11 87 15 a5
>3a57f8	13 c5 0f d0 0a c2 20 a5 11 c5 0d d0 02 80 26 c2
>3a5808	20 38 a5 11 e9 01 00 85 11 e2 20 a5 12 e9 00 85
>3a5818	12 c2 20 38 a5 15 e9 01 00 85 15 e2 20 a5 16 e9
>3a5828	00 85 16 80 c4 20 33 02 2b 28 6b 08 e2 20 c9 21
>3a5838	90 0b c9 7f 90 04 c9 a0 90 03 28 38 6b 28 18 6b
>3a5848	08 8b 0b 08 c2 20 48 a9 46 08 5b 68 28 e2 20 a9
>3a5858	00 8f b4 08 00 a5 31 c9 02 b0 16 c9 01 90 20 c2
>3a5868	20 18 a5 0d 69 00 01 85 11 e2 20 a5 0f 69 00 85
>3a5878	13 c2 20 a5 0d 85 32 e2 20 a5 0f 85 34 80 12 c2
>3a5888	20 18 a5 32 69 00 01 85 11 e2 20 a5 34 69 00 85
>3a5898	13 e2 20 a0 00 00 c2 20 a5 32 85 19 e2 20 a5 34
>3a58a8	85 1b e2 20 a7 19 22 33 58 3a b0 02 a9 3f 99 7c
>3a58b8	08 c2 20 18 a5 19 69 01 00 85 19 e2 20 a5 1b 69
>3a58c8	00 85 1b c8 c0 08 00 90 db a9 00 99 7c 08 a9 3e
>3a58d8	20 18 00 a9 20 20 18 00 e2 20 a5 34 20 ea 02 a9
>3a58e8	3a 20 18 00 c2 20 a5 32 20 d0 02 c2 20 a9 08 00
>3a58f8	85 47 e2 20 a9 20 20 18 00 a7 32 20 ea 02 22 75
>3a5908	69 3a e2 20 c6 47 d0 ea a9 20 20 18 00 a9 20 20
>3a5918	18 00 08 e2 20 48 a9 00 48 ab 68 28 a2 7c 08 20
>3a5928	c0 02 20 33 02 20 4a 02 a5 34 c5 13 90 0f c2 20
>3a5938	a5 32 c5 11 90 07 20 33 02 2b ab 28 6b 4c 99 58
>3a5948	08 8d 90 08 e2 20 bd 00 00 99 00 00 ad 90 08 f0
>3a5958	0a c8 e8 e8 e8 e8 ce 90 08 80 eb 28 6b 08 0b 8b
>3a5968	08 c2 20 48 a9 46 08 5b 68 28 08 e2 20 48 a9 00
>3a5978	48 ab 68 28 c2 30 a5 0d 85 32 a5 0f 85 34 e2 20
>3a5988	a5 31 3a 85 47 a2 57 08 a0 7c 08 22 48 59 3a a0
>3a5998	00 00 b9 7c 08 87 32 22 75 69 3a c8 c4 47 d0 f2
>3a59a8	ab 2b 28 6b 08 0b 8b 08 c2 20 48 a9 46 08 5b 68
>3a59b8	28 08 e2 20 48 a9 00 48 ab 68 28 e2 20 c2 10 a5
>3a59c8	31 3a 3a 85 47 a2 5b 08 a0 7c 08 22 48 59 3a c2
>3a59d8	20 a5 0d 85 32 a5 0f 85 34 c2 20 a5 34 c5 13 d0
>3a59e8	06 a5 32 c5 11 f0 2c e2 20 a0 00 00 b7 32 d9 7c
>3a59f8	08 d0 1a c8 c4 47 d0 f4 c2 20 a5 32 85 4a a5 34
>3a5a08	85 4c 22 1f 64 3a e2 20 a9 20 20 18 00 22 75 69
>3a5a18	3a 80 c6 20 33 02 ab 2b 28 6b 08 c2 20 48 a9 46
>3a5a28	08 5b 68 28 e2 20 a5 31 f0 0e c2 30 a5 0d 8f 40
>3a5a38	02 00 a5 0f 8f 42 02 00 af 46 02 00 aa af 48 02
>3a5a48	00 a8 af 4a 02 00 1b af 4c 02 00 5b e2 20 a9 3a
>3a5a58	48 a9 5a 48 a9 62 48 4c 99 5a ea 5c 04 00 3a 08
>3a5a68	c2 20 48 a9 46 08 5b 68 28 e2 20 a5 31 f0 c9 c2
>3a5a78	30 a5 0d 8f 40 02 00 a5 0f 8f 42 02 00 af 46 02
>3a5a88	00 aa af 48 02 00 a8 af 4a 02 00 1b af 4c 02 00
>3a5a98	5b e2 20 af 4e 02 00 48 ab a9 5c 8f a0 08 00 af
>3a5aa8	42 02 00 8f a3 08 00 af 41 02 00 8f a2 08 00 af
>3a5ab8	40 02 00 8f a1 08 00 af 4f 02 00 48 c2 20 af 44
>3a5ac8	02 00 28 5c a0 08 00 08 0b 8b 08 e2 20 48 a9 3a
>3a5ad8	48 ab 68 28 08 c2 20 48 a9 46 08 5b 68 28 c2 10
>3a5ae8	e2 20 a5 31 c9 02 f0 0c c9 03 d0 11 c2 20 a5 15
>3a5af8	85 47 80 11 c2 20 a9 01 00 85 47 80 08 a2 41 6c
>3a5b08	20 c0 02 80 35 a5 0d 85 4a a5 0f 85 4c a0 00 00
>3a5b18	e2 20 a7 4a d7 11 f0 09 22 1f 64 3a a9 20 20 18
>3a5b28	00 c2 20 18 a5 4a 69 01 00 85 4a a5 4c 69 00 00
>3a5b38	85 4c c8 c4 47 d0 d9 20 33 02 20 33 02 ab 2b 28
>3a5b48	6b 08 0b 8b 08 e2 20 48 a9 00 48 ab 68 28 08 c2
>3a5b58	20 48 a9 46 08 5b 68 28 e2 20 a5 31 f0 4f a6 0d
>3a5b68	8e 40 02 a6 0f 8e 42 02 c9 01 f0 41 a6 11 8e 44
>3a5b78	02 c9 02 f0 38 a6 15 8e 46 02 c9 03 f0 2f a6 19
>3a5b88	8e 48 02 c9 04 f0 26 a6 1d 8e 4a 02 c9 05 f0 1d
>3a5b98	e2 10 a6 21 8e 4e 02 c9 06 f0 12 c2 10 a6 25 8e
>3a5ba8	4c 02 c9 07 f0 07 e2 10 a6 29 8e 4f 02 ab 2b 28
>3a5bb8	6b 08 0b 8b 08 c2 20 48 a9 46 08 5b 68 28 e2 20
>3a5bc8	c2 10 a2 00 00 bf ae 6c 3a f0 18 c7 08 f0 03 e8
>3a5bd8	80 f3 c2 20 8a 0a aa bf ef 5b 3a 8f 2d 08 00 22
>3a5be8	13 5c 3a ab 2b 28 6b 8f 52 97 52 9b 52 9f 52 a3
>3a5bf8	52 a7 52 ab 52 af 52 b3 52 b7 52 93 52 bb 52 bf
>3a5c08	52 c3 52 8b 56 c7 52 cb 52 04 53 6c 2d 08 08 8b
>3a5c18	0b 08 c2 20 48 a9 46 08 5b 68 28 e2 20 a5 31 c9
>3a5c28	02 b0 03 4c bc 5d c2 20 a5 0d 85 32 a5 0f 85 34
>3a5c38	c2 20 22 be 5f 3a c9 ff ff f0 10 85 54 e2 20 a5
>3a5c48	31 c9 03 f0 36 a9 13 85 4f 80 4c 20 33 02 08 e2
>3a5c58	20 48 a9 3a 48 ab 68 28 c2 10 a2 f3 5d 20 c0 02
>3a5c68	4c bc 5d 20 33 02 08 e2 20 48 a9 3a 48 ab 68 28
>3a5c78	c2 10 a2 02 5e 20 c0 02 4c bc 5d e2 20 22 f4 5f
>3a5c88	3a c9 ff f0 de 85 4f c9 03 f0 62 c9 0b f0 5e c9
>3a5c98	13 f0 04 c9 08 f0 00 22 ec 5e 3a b0 03 4c 85 5d
>3a5ca8	87 32 22 75 69 3a 08 e2 20 48 a9 00 48 ab 68 28
>3a5cb8	c2 20 a5 32 85 56 a5 34 85 58 e2 20 a5 4f c9 12
>3a5cc8	f0 6c c9 16 f0 68 c9 14 f0 7c 29 3f c9 02 d0 03
>3a5cd8	4c b3 5d c2 20 29 ff 00 aa e2 20 bf bb 68 3a c9
>3a5ce8	03 f0 57 c9 02 f0 5f c9 01 f0 67 80 71 c2 20 a5
>3a5cf8	54 c9 33 65 f0 26 c9 97 65 f0 2a c9 17 65 f0 1c
>3a5d08	c9 1b 65 f0 17 c9 23 65 f0 12 c9 0b 65 f0 0d c9
>3a5d18	1f 65 f0 08 c9 07 65 f0 03 4c 9f 5c e2 20 a9 12
>3a5d28	85 4f 4c 9f 5c e2 20 a9 16 85 4f 4c 9f 5c 22 2f
>3a5d38	5e 3a 90 60 c9 02 f0 0e 80 18 a0 02 00 b9 96 08
>3a5d48	97 56 22 75 69 3a a0 01 00 b9 96 08 97 56 22 75
>3a5d58	69 3a a0 00 00 b9 96 08 97 56 22 75 69 3a e2 20
>3a5d68	a9 41 20 18 00 a9 20 20 18 00 a6 32 86 4a a6 34
>3a5d78	86 4c 22 1f 64 3a a9 20 20 18 00 80 37 20 33 02
>3a5d88	08 e2 20 48 a9 3a 48 ab 68 28 c2 10 a2 c0 5d 20
>3a5d98	c0 02 80 20 20 33 02 08 e2 20 48 a9 3a 48 ab 68
>3a5da8	28 c2 10 a2 10 5e 20 c0 02 80 09 a5 4f 29 c0 d0
>3a5db8	95 4c 5a 5d 2b ab 28 6b 41 64 64 72 65 73 73 69
>3a5dc8	6e 67 20 6d 6f 64 65 20 6e 6f 74 20 64 65 66 69
>3a5dd8	6e 65 64 20 66 6f 72 20 74 68 61 74 20 69 6e 73
>3a5de8	74 72 75 63 74 69 6f 6e 2e 0d 00 42 61 64 20 6d
>3a5df8	6e 65 6d 6f 6e 69 63 2e 0d 00 42 61 64 20 6f 70
>3a5e08	65 72 61 6e 64 2e 0d 00 52 65 6c 61 74 69 76 65
>3a5e18	20 6f 66 66 73 65 74 20 69 73 20 74 6f 6f 20 6c
>3a5e28	61 72 67 65 2e 0d 00 08 0b 08 c2 20 48 a9 46 08
>3a5e38	5b 68 28 e2 20 a5 4f c9 12 f0 0a c2 20 18 a5 32
>3a5e48	69 02 00 80 08 c2 20 18 a5 32 69 01 00 85 4a a5
>3a5e58	34 69 00 00 85 4c 38 a5 50 e5 4a 85 50 a5 52 e5
>3a5e68	4c 85 52 e2 20 a5 4f c9 16 f0 1e a5 50 30 0c a5
>3a5e78	51 d0 2a a5 52 d0 26 a9 01 80 26 a5 51 c9 ff d0
>3a5e88	1c a5 52 c9 ff d0 16 80 18 a5 51 30 06 a5 52 d0
>3a5e98	0c 80 0e a5 52 c9 ff d0 04 a9 02 80 04 2b 28 18
>3a5ea8	6b 2b 28 38 6b 08 0b c2 10 da 08 c2 20 48 a9 46
>3a5eb8	08 5b 68 28 e2 20 a2 00 00 df 00 d0 3a f0 08 e8
>3a5ec8	e0 10 00 f0 1b 80 f2 c2 20 06 50 26 52 06 50 26
>3a5ed8	52 06 50 26 52 06 50 26 52 e2 20 8a 05 50 85 50
>3a5ee8	fa 2b 28 6b 0b 8b 08 c2 20 48 a9 46 08 5b 68 28
>3a5ef8	08 e2 20 48 a9 3a 48 ab 68 28 e2 20 a5 4f 29 3f
>3a5f08	85 4a c2 30 a2 00 00 a0 00 00 bd b9 65 f0 1b c5
>3a5f18	54 d0 0d e2 20 b9 bb 67 29 3f c5 4a f0 07 c2 20
>3a5f28	e8 e8 c8 80 e5 98 38 ab 2b 6b 18 ab 2b 6b 08 0b
>3a5f38	08 c2 20 48 a9 46 08 5b 68 28 e2 20 c2 10 a0 00
>3a5f48	00 64 50 64 52 b7 03 f0 11 c9 64 f0 19 48 b7 36
>3a5f58	85 4a 68 c5 4a d0 0b c8 80 eb b7 36 d0 04 2b 28
>3a5f68	38 6b 2b 28 18 6b e2 20 b7 36 c9 3a b0 04 c9 30
>3a5f78	b0 14 c9 47 b0 04 c9 41 b0 0c c9 67 b0 e4 c9 61
>3a5f88	b0 02 80 de 29 df 22 ad 5e 3a 80 cb 0b 08 c2 20
>3a5f98	48 a9 46 08 5b 68 28 a0 00 00 e2 20 b7 03 f0 03
>3a5fa8	c8 80 f9 c2 20 c8 5a 68 18 65 03 85 03 a5 05 69
>3a5fb8	00 00 85 05 2b 6b 0b 08 c2 20 48 a9 46 08 5b 68
>3a5fc8	28 c2 20 a5 11 85 36 a5 13 85 38 a9 47 64 85 03
>3a5fd8	a9 3a 00 85 05 22 36 5f 3a b0 0d 22 94 5f 3a a7
>3a5fe8	03 d0 f2 a9 ff ff 80 02 a5 03 2b 6b 08 0b 08 c2
>3a5ff8	20 48 a9 46 08 5b 68 28 c2 30 a5 15 85 36 a5 17
>3a6008	85 38 a9 d3 68 85 03 a9 3a 00 85 05 22 36 5f 3a
>3a6018	b0 22 22 94 5f 3a c2 20 18 a5 03 69 01 00 85 03
>3a6028	a5 05 69 00 00 85 05 e2 20 a7 03 d0 df c2 20 a9
>3a6038	ff ff 80 0d 22 94 5f 3a e2 20 a7 03 c2 20 29 ff
>3a6048	00 2b 28 6b 08 8b 0b 08 c2 20 48 a9 46 08 5b 68
>3a6058	28 e2 20 a9 00 8f b4 08 00 a5 31 c9 02 b0 16 c9
>3a6068	01 90 20 c2 20 18 a5 0d 69 00 01 85 11 e2 20 a5
>3a6078	0f 69 00 85 13 c2 20 a5 0d 85 32 e2 20 a5 0f 85
>3a6088	34 80 12 c2 20 18 a5 32 69 00 01 85 11 e2 20 a5
>3a6098	34 69 00 85 13 22 b8 60 3a e2 20 a5 34 c5 13 90
>3a60a8	f4 c2 20 a5 32 c5 11 90 ec 20 33 02 2b ab 28 6b
>3a60b8	08 0b e2 20 a9 41 20 18 00 a9 20 20 18 00 08 c2
>3a60c8	20 48 a9 78 08 5b 68 28 c2 20 a5 00 85 18 e2 20
>3a60d8	a5 02 85 1a 22 1f 64 3a a9 20 20 18 00 c2 20 18
>3a60e8	a5 00 69 01 00 85 18 e2 20 a5 02 69 00 85 1a e2
>3a60f8	20 c2 10 a7 00 c9 c2 d0 0b 48 a7 18 49 ff 2f 94
>3a6108	08 00 80 0b c9 e2 d0 0c 48 a7 18 0f 94 08 00 8f
>3a6118	94 08 00 68 c2 20 29 ff 00 0a aa bf b9 65 3a aa
>3a6128	22 99 63 3a e2 20 a7 00 aa bf bb 67 3a 22 75 69
>3a6138	3a 22 46 61 3a 20 33 02 20 4a 02 2b 28 6b 08 e2
>3a6148	20 48 29 3f 0a c2 10 aa 68 7c 54 61 84 61 9f 61
>3a6158	a6 61 cb 61 d2 61 ed 61 0f 62 20 62 5d 62 65 62
>3a6168	76 62 87 62 8e 62 b3 62 e0 62 4c 62 31 62 fe 61
>3a6178	d3 62 dd 62 f1 62 20 63 ce 62 31 63 a9 28 20 18
>3a6188	00 22 48 63 3a a9 2c 20 18 00 a9 58 20 18 00 a9
>3a6198	29 20 18 00 4c 42 63 22 48 63 3a 4c 42 63 e2 20
>3a61a8	48 a9 23 20 18 00 68 29 c0 c9 00 f0 0f 4a 4a 2f
>3a61b8	94 08 00 d0 07 22 52 63 3a 4c 42 63 22 48 63 3a
>3a61c8	4c 42 63 22 52 63 3a 4c 42 63 a9 28 20 18 00 22
>3a61d8	48 63 3a a9 29 20 18 00 a9 2c 20 18 00 a9 59 20
>3a61e8	18 00 4c 42 63 22 48 63 3a a9 2c 20 18 00 a9 58
>3a61f8	20 18 00 4c 42 63 22 48 63 3a a9 2c 20 18 00 a9
>3a6208	59 20 18 00 4c 42 63 22 52 63 3a a9 2c 20 18 00
>3a6218	a9 59 20 18 00 4c 42 63 22 52 63 3a a9 2c 20 18
>3a6228	00 a9 58 20 18 00 4c 42 63 a9 28 20 18 00 22 52
>3a6238	63 3a a9 2c 20 18 00 a9 58 20 18 00 a9 29 20 18
>3a6248	00 4c 42 63 a9 28 20 18 00 22 48 63 3a a9 29 20
>3a6258	18 00 4c 42 63 a9 41 20 18 00 4c 46 63 22 48 63
>3a6268	3a a9 2c 20 18 00 a9 53 20 18 00 4c 42 63 a9 5b
>3a6278	20 18 00 22 48 63 3a a9 5d 20 18 00 4c 42 63 22
>3a6288	60 63 3a 4c 46 63 a9 28 20 18 00 22 48 63 3a a9
>3a6298	2c 20 18 00 a9 53 20 18 00 a9 29 20 18 00 a9 2c
>3a62a8	20 18 00 a9 59 20 18 00 4c 42 63 a9 5b 20 18 00
>3a62b8	22 48 63 3a a9 5d 20 18 00 a9 2c 20 18 00 a9 59
>3a62c8	20 18 00 4c 42 63 a0 02 00 80 03 a0 01 00 22 c6
>3a62d8	63 3a 4c 46 63 4c 46 63 22 60 63 3a a9 2c 20 18
>3a62e8	00 a9 58 20 18 00 4c 46 63 a9 23 20 18 00 8b a5
>3a62f8	02 48 ab a6 00 e8 a0 01 00 22 43 02 3a a9 2c 20
>3a6308	18 00 a9 23 20 18 00 a6 00 a0 01 00 22 43 02 3a
>3a6318	ab 22 75 69 3a 4c 42 63 a9 28 20 18 00 22 52 63
>3a6328	3a a9 29 20 18 00 4c 42 63 a9 5b 20 18 00 22 52
>3a6338	63 3a a9 5d 20 18 00 4c 42 63 22 75 69 3a 28 6b
>3a6348	08 e2 20 a7 00 20 ea 02 28 6b 08 c2 30 a7 00 20
>3a6358	d0 02 22 75 69 3a 28 6b 08 8b 0b c2 30 5a 08 c2
>3a6368	20 48 a9 78 08 5b 68 28 08 e2 20 48 a9 00 48 ab
>3a6378	68 28 e2 20 a0 00 00 a7 00 99 90 08 22 75 69 3a
>3a6388	c8 c0 03 00 d0 f1 22 1f 64 3a c2 30 7a 2b ab 28
>3a6398	6b 08 8b e2 20 c2 10 08 e2 20 48 a9 3a 48 ab 68
>3a63a8	28 bd 00 00 20 18 00 e8 bd 00 00 20 18 00 e8 bd
>3a63b8	00 00 20 18 00 e8 a9 20 20 18 00 ab 28 6b 08 0b
>3a63c8	08 c2 20 48 a9 78 08 5b 68 28 e2 20 c0 02 00 f0
>3a63d8	14 a7 00 85 18 30 06 64 19 64 1a 80 1e a9 ff 85
>3a63e8	19 85 1a 80 16 a7 00 85 18 22 75 69 3a a7 00 85
>3a63f8	19 30 04 64 1a 80 04 a9 ff 85 1a c2 20 38 a5 00
>3a6408	65 18 85 18 e2 20 a5 02 65 1a 85 1a 22 1f 64 3a
>3a6418	22 75 69 3a 2b 28 6b 08 0b c2 20 48 08 c2 20 48
>3a6428	a9 46 08 5b 68 28 e2 20 a5 4c 20 ea 02 e2 20 a9
>3a6438	3a 20 18 00 c2 20 a5 4a 20 d0 02 68 2b 28 6b 4f
>3a6448	52 41 00 41 4e 44 00 45 4f 52 00 41 44 43 00 53
>3a6458	54 41 00 4c 44 41 00 43 4d 50 00 53 42 43 00 41
>3a6468	53 4c 00 52 4f 4c 00 4c 53 52 00 52 4f 52 00 53
>3a6478	54 58 00 4c 44 58 00 44 45 43 00 49 4e 43 00 42
>3a6488	49 54 00 4a 4d 50 00 53 54 59 00 4c 44 59 00 43
>3a6498	50 59 00 43 50 58 00 42 52 4b 00 4a 53 52 00 52
>3a64a8	54 49 00 52 54 53 00 50 48 50 00 50 4c 50 00 50
>3a64b8	48 41 00 50 4c 41 00 44 45 59 00 54 41 59 00 49
>3a64c8	4e 59 00 49 4e 58 00 43 4c 43 00 53 45 43 00 43
>3a64d8	4c 49 00 53 45 49 00 54 59 41 00 43 4c 56 00 43
>3a64e8	4c 44 00 53 45 44 00 54 58 41 00 54 58 53 00 54
>3a64f8	41 58 00 54 53 58 00 44 45 58 00 4e 4f 50 00 42
>3a6508	50 4c 00 42 4d 49 00 42 56 43 00 42 56 53 00 42
>3a6518	43 43 00 42 43 53 00 42 4e 45 00 42 45 51 00 54
>3a6528	53 42 00 54 52 42 00 53 54 5a 00 42 52 41 00 50
>3a6538	48 59 00 50 4c 59 00 50 48 58 00 50 4c 58 00 50
>3a6548	48 44 00 50 4c 44 00 50 48 4b 00 52 54 4c 00 50
>3a6558	48 42 00 50 4c 42 00 57 41 49 00 58 42 41 00 54
>3a6568	43 53 00 54 53 43 00 54 43 44 00 54 44 43 00 54
>3a6578	58 59 00 54 59 58 00 53 54 50 00 58 43 45 00 43
>3a6588	4f 50 00 4a 53 4c 00 57 44 4d 00 50 45 52 00 42
>3a6598	52 4c 00 52 45 50 00 53 45 50 00 4d 56 50 00 4d
>3a65a8	56 4e 00 50 45 49 00 50 45 41 00 4a 4d 4c 00 00
>3a65b8	00 9f 64 47 64 87 65 47 64 27 65 47 64 67 64 47
>3a65c8	64 af 64 47 64 67 64 47 65 27 65 47 64 67 64 47
>3a65d8	64 07 65 47 64 47 64 47 64 2b 65 47 64 67 64 47
>3a65e8	64 cf 64 47 64 83 64 67 65 2b 65 47 64 67 64 47
>3a65f8	64 a3 64 4b 64 8b 65 4b 64 87 64 4b 64 6b 64 4b
>3a6608	64 b3 64 4b 64 6b 64 4b 65 87 64 4b 64 6b 64 4b
>3a6618	64 0b 65 4b 64 4b 64 4b 64 87 64 4b 64 6b 64 4b
>3a6628	64 d3 64 4b 64 7f 64 6b 65 87 64 4b 64 6b 64 4b
>3a6638	64 a7 64 4f 64 8f 65 4f 64 a3 65 4f 64 6f 64 4f
>3a6648	64 b7 64 4f 64 6f 64 4f 65 8b 64 4f 64 6f 64 4f
>3a6658	64 0f 65 4f 64 4f 64 4f 64 a7 65 4f 64 6f 64 4f
>3a6668	64 d7 64 4f 64 37 65 6f 65 b3 65 4f 64 6f 64 4f
>3a6678	64 ab 64 53 64 93 65 53 64 2f 65 53 64 73 64 53
>3a6688	64 bb 64 53 64 73 64 53 65 8b 64 53 64 73 64 53
>3a6698	64 13 65 53 64 53 64 53 64 2f 65 53 64 73 64 53
>3a66a8	64 db 64 53 64 3b 65 73 65 8b 64 53 64 73 64 53
>3a66b8	64 33 65 57 64 97 65 57 64 8f 64 57 64 77 64 57
>3a66c8	64 bf 64 87 64 ef 64 57 65 8f 64 57 64 77 64 57
>3a66d8	64 17 65 57 64 57 64 57 64 8f 64 57 64 77 64 57
>3a66e8	64 df 64 57 64 f3 64 77 65 2f 65 57 64 2f 65 57
>3a66f8	64 93 64 5b 64 7b 64 5b 64 93 64 5b 64 7b 64 5b
>3a6708	64 c3 64 5b 64 f7 64 5b 65 93 64 5b 64 7b 64 5b
>3a6718	64 1b 65 5b 64 5b 64 5b 64 93 64 5b 64 7b 64 5b
>3a6728	64 e3 64 5b 64 fb 64 7b 65 93 64 5b 64 7b 64 5b
>3a6738	64 97 64 5f 64 9b 65 5f 64 97 64 5f 64 7f 64 5f
>3a6748	64 c7 64 5f 64 ff 64 5f 65 97 64 5f 64 7f 64 5f
>3a6758	64 1f 65 5f 64 5f 64 5f 64 ab 65 5f 64 7f 64 5f
>3a6768	64 e7 64 5f 64 3f 65 7f 65 b3 65 5f 64 7f 64 5f
>3a6778	64 9b 64 63 64 9f 65 63 64 9b 64 63 64 83 64 63
>3a6788	64 cb 64 63 64 03 65 63 65 9b 64 63 64 83 64 63
>3a6798	64 23 65 63 64 63 64 63 64 af 65 63 64 83 64 63
>3a67a8	64 eb 64 63 64 43 65 83 65 a3 64 63 64 83 64 63
>3a67b8	64 00 00 13 00 02 09 01 01 01 0a 13 82 08 13 03
>3a67c8	03 03 0b 12 04 0f 0c 01 05 05 0d 13 06 08 13 03
>3a67d8	07 07 0e 03 00 0b 09 01 01 01 0a 13 82 08 13 03
>3a67e8	03 03 0b 12 04 0f 0c 05 05 05 0d 13 06 08 13 07
>3a67f8	07 07 0e 13 00 13 09 14 01 01 0a 13 82 08 13 03
>3a6808	03 03 0b 12 04 0f 0c 14 05 05 0d 13 06 13 13 0b
>3a6818	07 07 0b 13 00 16 09 01 01 01 0a 13 82 08 13 15
>3a6828	03 03 0b 12 04 0f 0c 05 05 05 0d 13 06 13 13 10
>3a6838	07 07 0e 12 00 16 09 01 01 01 0a 13 82 13 13 03
>3a6848	03 03 0b 12 04 0f 0c 05 05 11 0d 13 06 13 13 03
>3a6858	07 07 0e 82 00 42 09 01 01 01 0a 13 82 13 13 03
>3a6868	03 03 0b 12 04 0f 0c 05 05 11 0d 13 06 13 13 07
>3a6878	07 06 0e 42 00 02 09 01 01 01 0a 13 82 13 13 03
>3a6888	03 03 0b 12 04 0f 0c 01 05 05 0d 13 06 13 13 17
>3a6898	07 07 0e 42 00 02 09 01 01 01 0f 13 82 13 13 03
>3a68a8	03 03 0b 12 04 0f 0c 03 05 05 0d 13 06 13 13 10
>3a68b8	07 07 0e 01 01 01 02 01 01 02 02 00 01 01 03 01
>3a68c8	01 03 01 02 01 01 00 02 02 02 02 41 00 08 64 64
>3a68d8	3a 64 64 64 64 2c 58 00 0e 64 64 3a 64 64 64 64
>3a68e8	00 0b 64 64 64 64 2c 58 00 07 64 64 64 64 2c 59
>3a68f8	00 06 64 64 64 64 00 03 64 64 2c 58 00 05 64 64
>3a6908	2c 59 00 11 64 64 2c 53 00 09 64 64 00 01 23 64
>3a6918	64 64 64 00 c2 23 64 64 2c 23 64 64 00 14 23 64
>3a6928	64 00 02 28 64 64 2c 53 29 2c 59 00 0c 28 64 64
>3a6938	64 64 2c 58 29 00 10 28 64 64 64 64 29 00 10 28
>3a6948	64 64 2c 58 29 00 00 28 64 64 29 2c 59 00 04 28
>3a6958	64 64 29 00 0f 5b 64 64 64 64 5d 00 17 5b 64 64
>3a6968	5d 2c 59 00 0d 5b 64 64 5d 00 0a 00 00 08 c2 20
>3a6978	48 18 af 78 08 00 69 01 00 8f 78 08 00 e2 20 af
>3a6988	7a 08 00 69 00 8f 7a 08 00 c2 20 68 28 6b 08 c2
>3a6998	10 e2 20 da a2 08 00 0a b0 08 48 a9 30 20 18 00
>3a69a8	80 06 48 a9 31 20 18 00 68 ca d0 eb fa 28 6b 08
>3a69b8	c2 20 48 a9 46 08 5b 68 28 e2 20 a7 32 f0 0a c9
>3a69c8	20 d0 06 22 75 69 3a 80 f2 6b 08 08 c2 20 48 a9
>3a69d8	46 08 5b 68 28 22 75 69 3a 22 b7 69 3a c2 30 a5
>3a69e8	31 c2 20 29 ff 00 0a 0a aa a5 32 95 0d a5 34 95
>3a69f8	0f e2 20 a7 32 f0 14 c9 22 f0 06 22 75 69 3a 80
>3a6a08	f2 a9 00 87 32 22 75 69 3a e6 31 28 6b 08 c2 20
>3a6a18	48 a9 46 08 5b 68 28 e2 20 64 4a c2 20 64 50 64
>3a6a28	52 e2 20 a7 32 c9 3a f0 0d 20 68 03 90 0e 22 ad
>3a6a38	5e 3a a9 01 85 4a 22 75 69 3a 80 e5 a5 4a f0 16
>3a6a48	a5 31 c2 20 29 ff 00 0a 0a aa a5 50 95 0d a5 52
>3a6a58	95 0f e2 20 e6 31 6b e2 20 64 31 22 b7 69 3a a7
>3a6a68	32 f0 21 c9 22 d0 06 22 d2 69 3a 80 0a 22 15 6a
>3a6a78	3a a5 31 c9 09 b0 0d a7 32 f0 09 c9 20 f0 dc 20
>3a6a88	68 03 b0 d7 6b 08 0b 08 c2 20 48 a9 46 08 5b 68
>3a6a98	28 c2 10 e2 20 a2 31 00 74 00 ca d0 fb a9 00 85
>3a6aa8	02 85 34 c2 20 a9 00 4f 85 00 85 32 e2 20 22 b7
>3a6ab8	69 3a c9 00 f0 38 c2 20 a5 32 85 08 e2 20 a5 34
>3a6ac8	85 0a a2 01 00 22 75 69 3a a7 32 d0 06 86 0b 64
>3a6ad8	31 80 1b c9 20 f0 03 e8 80 eb 86 0b a9 00 87 32
>3a6ae8	22 75 69 3a a7 08 c9 41 f0 07 22 5f 6a 3a 2b 28
>3a6af8	6b 22 b7 69 3a a7 32 f0 f5 22 15 6a 3a 22 b7 69
>3a6b08	3a a7 32 f0 e9 c2 20 a5 32 85 11 e2 20 a5 34 85
>3a6b18	13 22 75 69 3a a7 32 f0 26 c9 20 d0 f4 a9 00 87
>3a6b28	32 e6 31 22 75 69 3a 22 b7 69 3a a7 32 f0 bf c2
>3a6b38	20 a5 32 85 15 e2 20 a5 34 85 17 e6 31 80 af e6
>3a6b48	31 80 ab 08 c2 10 e2 20 a5 31 d0 0f a2 41 6c a9
>3a6b58	3a 48 ab 20 c0 02 20 33 02 80 61 c2 20 a5 0d 8f
>3a6b68	21 08 00 a5 0f 8f 23 08 00 20 3f 4d e2 20 a5 31
>3a6b78	c9 01 d0 0f c2 20 a9 ff ff 8f 54 03 00 8f 56 03
>3a6b88	00 80 0e c2 20 a5 11 8f 54 03 00 a5 13 8f 56 03
>3a6b98	00 22 18 11 00 b0 25 e2 20 a2 67 6c a9 3a 48 ab
>3a6ba8	20 c0 02 af 2e 03 00 20 ea 02 a9 20 20 18 00 af
>3a6bb8	20 03 00 20 ea 02 20 33 02 20 33 02 28 6b 8b 08
>3a6bc8	c2 10 e2 20 a5 31 c9 03 f0 0f a2 41 6c a9 3a 48
>3a6bd8	ab 20 c0 02 20 33 02 80 54 c2 20 a5 0d 8f 21 08
>3a6be8	00 a5 0f 8f 23 08 00 20 3f 4d a5 11 8f 50 03 00
>3a6bf8	a5 13 8f 52 03 00 a5 15 8f 58 03 00 a5 17 8f 5a
>3a6c08	03 00 22 1c 11 00 b0 25 e2 20 a2 51 6c a9 3a 48
>3a6c18	ab 20 c0 02 af 2e 03 00 20 ea 02 a9 20 20 18 00
>3a6c28	af 20 03 00 20 ea 02 20 33 02 20 33 02 28 ab 6b
>3a6c38	5c 58 21 3a 6b 00 00 00 00 42 61 64 20 61 72 67
>3a6c48	75 6d 65 6e 74 73 0d 0d 00 55 6e 61 62 6c 65 20
>3a6c58	74 6f 20 73 61 76 65 20 66 69 6c 65 3a 20 00 55
>3a6c68	6e 61 62 6c 65 20 74 6f 20 6c 6f 61 64 20 66 69
>3a6c78	6c 65 3a 20 00 0d 20 20 50 43 20 20 20 20 20 41
>3a6c88	20 20 20 20 58 20 20 20 20 59 20 20 20 20 53 50
>3a6c98	20 20 20 44 42 52 20 44 50 20 20 20 4e 56 4d 58
>3a6ca8	44 49 5a 43 0d 00 41 43 44 46 47 4a 48 4c 4d 52
>3a6cb8	3b 53 54 56 57 58 3e 3f 00 18 fb 08 c2 20 48 a9
>3a6cc8	00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 c2
>3a6cd8	30 20 00 6d a9 ff fe 1b 08 e2 20 48 a9 3a 48 ab
>3a6ce8	68 28 a2 3c d2 20 c0 02 08 e2 20 48 a9 00 48 ab
>3a6cf8	68 28 4c 58 21 4c fd 6c 08 20 b5 01 20 f6 44 28
>3a6d08	60 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3a6d18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 1581 times (25296 bytes)...
>3acff8	00 00 00 00 00 00 00 00 30 31 32 33 34 35 36 37
>3ad008	38 39 41 42 43 44 45 46 2b 00 2d 00 2a 00 2f 00
>3ad018	4d 4f 44 00 5e 00 3c 00 3d 00 3e 00 4e 4f 54 00
>3ad028	41 4e 44 00 4f 52 00 28 00 29 00 52 45 4d 00 50
>3ad038	52 49 4e 54 00 4c 45 54 00 47 4f 54 4f 00 45 4e
>3ad048	44 00 49 46 00 54 48 45 4e 00 45 4c 53 45 00 47
>3ad058	4f 53 55 42 00 52 45 54 55 52 4e 00 46 4f 52 00
>3ad068	54 4f 00 53 54 45 50 00 4e 45 58 54 00 44 4f 00
>3ad078	4c 4f 4f 50 00 57 48 49 4c 45 00 55 4e 54 49 4c
>3ad088	00 45 58 49 54 00 43 4c 52 00 53 54 4f 50 00 50
>3ad098	4f 4b 45 00 50 4f 4b 45 57 00 50 4f 4b 45 4c 00
>3ad0a8	43 4c 53 00 52 45 41 44 00 44 41 54 41 00 52 45
>3ad0b8	53 54 4f 52 45 00 44 49 4d 00 43 41 4c 4c 00 3c
>3ad0c8	3d 00 3e 3d 00 3c 3e 00 2d 00 4c 45 4e 00 50 45
>3ad0d8	45 4b 00 50 45 45 4b 57 00 50 45 45 4b 4c 00 43
>3ad0e8	48 52 24 00 41 53 43 00 53 50 43 00 54 41 42 00
>3ad0f8	41 42 53 00 53 47 4e 00 48 45 58 24 00 44 45 43
>3ad108	00 53 54 52 24 00 56 41 4c 00 4c 45 46 54 24 00
>3ad118	52 49 47 48 54 24 00 4d 49 44 24 00 52 55 4e 00
>3ad128	4e 45 57 00 4c 4f 41 44 00 4c 49 53 54 00 44 49
>3ad138	52 00 42 4c 4f 41 44 00 42 52 55 4e 00 42 53 41
>3ad148	56 45 00 44 45 4c 00 53 41 56 45 00 52 45 4e 41
>3ad158	4d 45 00 43 4f 50 59 00 4d 4f 4e 49 54 4f 52 00
>3ad168	47 45 54 00 49 4e 50 55 54 00 53 45 54 42 4f 52
>3ad178	44 45 52 00 54 45 58 54 43 4f 4c 4f 52 00 53 45
>3ad188	54 42 47 43 4f 4c 4f 52 00 53 45 54 44 41 54 45
>3ad198	00 47 45 54 44 41 54 45 24 00 53 45 54 54 49 4d
>3ad1a8	45 00 47 45 54 54 49 4d 45 24 00 47 52 41 50 48
>3ad1b8	49 43 53 00 53 45 54 43 4f 4c 4f 52 00 42 49 54
>3ad1c8	4d 41 50 00 43 4c 52 42 49 54 4d 41 50 00 50 4c
>3ad1d8	4f 54 00 4c 49 4e 45 00 46 49 4c 4c 00 53 50 52
>3ad1e8	49 54 45 00 53 50 52 49 54 45 41 54 00 53 50 52
>3ad1f8	49 54 45 53 48 4f 57 00 54 49 4c 45 53 45 54 00
>3ad208	54 49 4c 45 4d 41 50 00 54 49 4c 45 53 48 4f 57
>3ad218	00 54 49 4c 45 41 54 00 4d 45 4d 43 4f 50 59 00
>3ad228	4c 49 4e 45 41 52 00 52 45 43 54 00 0d 52 45 41
>3ad238	44 59 0d 00 43 32 35 36 20 46 6f 65 6e 69 78 20
>3ad248	42 41 53 49 43 38 31 36 20 76 30 2e 31 2e 30 2d
>3ad258	61 6c 70 68 61 2b 31 38 34 0d 00
>3b0000					.align 256
.3b0000					CREDITS_TEXT
>3b0000	54 68 69 73 20 69 73 20		                .text "This is the credits screen!"
>3b0008	74 68 65 20 63 72 65 64 69 74 73 20 73 63 72 65
>3b0018	65 6e 21
>3b001b	20 20 20 20 20 20 20 20		                .fill 128 - len("This is the credits screen!"), $20
>3b0023	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 4 times (64 bytes)...
>3b0073	20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0080	49 20 77 6f 75 6c 64 20		                .text "I would like to thank the academy."
>3b0088	6c 69 6b 65 20 74 6f 20 74 68 61 6e 6b 20 74 68
>3b0098	65 20 61 63 61 64 65 6d 79 2e
>3b00a2	20 20 20 20 20 20 20 20		                .fill 128 - len("I would like to thank the academy."), $20
>3b00aa	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 4 times (64 bytes)...
>3b00fa	20 20 20 20 20 20
>3b0100					                .text ""
>3b0100	20 20 20 20 20 20 20 20		                .fill 128 - len(""), $20
>3b0108	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 6 times (96 bytes)...
>3b0178	20 20 20 20 20 20 20 20
>3b0180	50 72 65 73 73 20 61 6e		                .text "Press any key to go back..."
>3b0188	79 20 6b 65 79 20 74 6f 20 67 6f 20 62 61 63 6b
>3b0198	2e 2e 2e
>3b019b	20 20 20 20 20 20 20 20		                .fill 128 - len("Press any key to go back..."), $20
>3b01a3	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 4 times (64 bytes)...
>3b01f3	20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0200	20 20 20 20 20 20 20 20		                .fill 128 * 60,$20
>3b0208	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 478 times (7648 bytes)...
>3b1ff8	20 20 20 20 20 20 20 20
>3b2000					.align 256
>3b2000	f3 f3 f3 f3 f3 f3 f3 f3		CREDITS_COLOR   .fill 128 * 64, $F3
>3b2008	f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3
;	...repeated 510 times (8160 bytes)...
>3b3ff8	f3 f3 f3 f3 f3 f3 f3 f3

;******  End of listing
