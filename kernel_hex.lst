
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -D TARGET=2 --long-address --flat --intel-hex -o kernel.hex --list kernel_hex.lst --labels=kernel_hex.lbl src\kernel.asm
; Tue Feb 18 14:40:53 2020

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=2					TARGET=2

;******  Processing input file: src\kernel.asm

=1					TARGET_FLASH = 1              ; The code is being assembled for Flash
=2					TARGET_RAM = 2                ; The code is being assembled for RAM

;******  Processing file: src\macros_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\characters.asm

=$03					CHAR_CTRL_C = $03   ; CTRL-C
=$08					CHAR_BS = $08       ; Backspace (delete character to the left of the cursor)
=$09					CHAR_TAB = $09      ; TAB (moves cursor to next tabulated column)
=$0a					CHAR_LF = $0A       ; Line feed
=$0d					CHAR_CR = $0D       ; Carriage return
=$0f					CHAR_INS = $0F      ; Insert a space at the cursor
=$11					CHAR_UP = $11       ; Up arrow
=$1d					CHAR_RIGHT = $1D    ; Right arrow
=$20					CHAR_SP = $20       ; Space
=$91					CHAR_DOWN = $91     ; Down arrow
=$9d					CHAR_LEFT = $9D     ; Left arrow
=$7f					CHAR_DEL = $7F      ; Delete key (delete the character at the cursor)

;******  Return to file: src\kernel.asm


;******  Processing file: src\simulator_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_inc.asm

=$000000				BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000				TMPPTR1          = $000000 ; 4 byte temporary pointer
=$000004				TMPPTR2          = $000004 ; 4 byte temporary pointer
=$000008				OPL2_ADDY_PTR_LO = $000008 ; THis Points towards the Instruments Database
=$000009				OPL2_ADDY_PTR_MD = $000009
=$00000a				OPL2_ADDY_PTR_HI = $00000A
=$00000c				SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f				COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011				COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013				LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=25
=$000015				LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017				CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a				CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c				CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e				CURCOLOR         = $00001E ;1 Byte Color of next character to be printed to the screen.
=$00001f				COLORPOS         = $00001F ;3 Byte address of cursor's position in the color matrix
=$000022				STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024				STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$000026				OPL2_OPERATOR    = $000026 ;
=$000027				OPL2_CHANNEL     = $000027 ;
=$000028				OPL2_REG_REGION  = $000028 ; Offset to the Group of Registers
=$00002a				OPL2_REG_OFFSET  = $00002A ; 2 Bytes (16Bits)
=$00002c				OPL2_IND_ADDY_LL = $00002C ; 2 Bytes Reserved (Only need 3)
=$00002e				OPL2_IND_ADDY_HL = $00002E ; 2 Bytes Reserved (Only need 3)
=$000030				OPL2_NOTE        = $000030 ; 1 Byte
=$000031				OPL2_OCTAVE      = $000031 ; 1 Byte
=$000032				OPL2_PARAMETER0  = $000032 ; 1 Byte - Key On/Feedback
=$000033				OPL2_PARAMETER1  = $000033 ; 1 Byte
=$000034				OPL2_PARAMETER2  = $000034 ; 1 Byte
=$000035				OPL2_PARAMETER3  = $000035 ; 1 Byte
=$000036				OPL2_LOOP        = $000036 ;
=$000036				OPL2_BLOCK       = $000036
=$000038				SDCARD_FILE_PTR  = $000038 ; 3 Bytes Pointer to Filename to open
=$00003c				SDCARD_BYTE_NUM  = $00003C ; 2Bytes
=$00003f				SDCARD_PRSNT_MNT = $00003F ; 1 Byte, Indicate that the SDCard is Present and that it is Mounted
=$000040				BM_CLEAR_SCRN_X  = $000040
=$000042				BM_CLEAR_SCRN_Y  = $000042
=$000040				RAD_STARTLINE    = $000040 ; 1 Byte
=$000041				RAD_PATTERN_IDX  = $000041 ; 1 Byte
=$000042				RAD_LINE         = $000042 ; 1 Byte
=$000043				RAD_LINENUMBER   = $000043 ; 1 Byte
=$000044				RAD_CHANNEL_NUM  = $000044 ; 1 Byte
=$000045				RAD_ISLASTCHAN   = $000045 ; 1 Byte
=$000046				RAD_Y_POINTER    = $000046 ; 2 Bytes
=$000048				RAD_TICK         = $000048
=$00004a				RAD_CHANNEL_DATA = $00004A ; 2 Bytes
=$00004c				RAD_CHANNE_EFFCT = $00004C
=$00004d				RAD_TEMP         = $00004D
=$000050				RAD_ADDR         = $000050 ; 3 bytes to avoid OPL2 errors.
=$000053				RAD_PATTRN       = $000053 ; 1 bytes - offset to patter
=$000054				RAD_PTN_DEST     = $000054 ; 3 bytes - where to write the pattern data
=$000057				RAD_CHANNEL      = $000057 ; 2 bytes - 0 to 8
=$000059				RAD_LAST_NOTE    = $000059 ; 1 if this is the last note
=$00005a				RAD_LINE_PTR     = $00005A ; 2 bytes - offset to memory location
=$000040				BMP_X_SIZE       = $000040 ; 2 Bytes
=$000042				BMP_Y_SIZE       = $000042 ; 2 Bytes
=$000044				BMP_PRSE_SRC_PTR = $000044 ; 3 Bytes
=$000048				BMP_PRSE_DST_PTR = $000048 ; 3 Bytes
=$00004c				BMP_COLOR_PALET  = $00004C ; 2 Bytes
=$00004e				SCRN_X_STRIDE    = $00004E ; 2 Bytes, Basically How many Pixel Accross in Bitmap Mode
=$000050				BMP_FILE_SIZE    = $000050 ; 4 Bytes
=$000054				BMP_POSITION_X   = $000054 ; 2 Bytes Where, the BMP will be position on the X Axis
=$000056				BMP_POSITION_Y   = $000056 ; 2 Bytes Where, the BMP will be position on the Y Axis
=$000058				BMP_PALET_CHOICE = $000058 ;
=$0000e0				MOUSE_PTR        = $0000E0
=$0000e1				MOUSE_POS_X_LO   = $0000E1
=$0000e2				MOUSE_POS_X_HI   = $0000E2
=$0000e3				MOUSE_POS_Y_LO   = $0000E3
=$0000e4				MOUSE_POS_Y_HI   = $0000E4
=$0000f0				USER_TEMP        = $0000F0 ;32 Bytes Temp space for user programs
=$000100				GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000100				MULTIPLIER_0     = $000100 ;0 Byte  Unsigned multiplier
=$000100				M0_OPERAND_A     = $000100 ;2 Bytes Operand A (ie: A x B)
=$000102				M0_OPERAND_B     = $000102 ;2 Bytes Operand B (ie: A x B)
=$000104				M0_RESULT        = $000104 ;4 Bytes Result of A x B
=$000108				MULTIPLIER_1     = $000108 ;0 Byte  Signed Multiplier
=$000108				M1_OPERAND_A     = $000108 ;2 Bytes Operand A (ie: A x B)
=$00010a				M1_OPERAND_B     = $00010A ;2 Bytes Operand B (ie: A x B)
=$00010c				M1_RESULT        = $00010C ;4 Bytes Result of A x B
=$000108				DIVIDER_0        = $000108 ;0 Byte  Unsigned divider
=$000108				D0_OPERAND_A     = $000108 ;2 Bytes Divider 0 Dividend ex: A in  A/B
=$00010a				D0_OPERAND_B     = $00010A ;2 Bytes Divider 0 Divisor ex B in A/B
=$00010c				D0_RESULT        = $00010C ;2 Bytes Quotient result of A/B ex: 7/2 = 3 r 1
=$00010e				D0_REMAINDER     = $00010E ;2 Bytes Remainder of A/B ex: 1 in 7/2=3 r 1
=$000110				DIVIDER_1        = $000110 ;0 Byte  Signed divider
=$000110				D1_OPERAND_A     = $000110 ;2 Bytes Divider 1 Dividend ex: A in  A/B
=$000112				D1_OPERAND_B     = $000112 ;2 Bytes Divider 1 Divisor ex B in A/B
=$000114				D1_RESULT        = $000114 ;2 Bytes Signed quotient result of A/B ex: 7/2 = 3 r 1
=$000116				D1_REMAINDER     = $000116 ;2 Bytes Signed remainder of A/B ex: 1 in 7/2=3 r 1
=$000120				ADDER_SIGNED_32  = $000120 ; The 32 Bit Adders takes 12Byte that are NOT RAM Location
=$000120				ADDER_A          = $000120 ; 4 bytes (32 bit) Accumulator A
=$000124				ADDER_B          = $000124 ; 4 bytes (32 bit) Accumulator B
=$000128				ADDER_R          = $000128 ; 4 bytes (32 bit) Result
=$000140				INT_CONTROLLER   = $000140 ; $000140...$00015F Interrupt Controller
=$000160				TIMER_CONTROLLER = $000160 ; $000160...$00017F Timer0/Timer1/Timer2 Block
=$000160				TIMER_CTRL_REGLL = $000160 ;
=$000161				TIMER_CTRL_REGLH = $000161 ;
=$000162				TIMER_CTRL_REGHL = $000162 ;
=$000163				TIMER_CTRL_REGHH = $000163 ;
=$000240				CPU_REGISTERS    = $000240 ; Byte
=$000240				CPUPC            = $000240 ;2 Bytes Program Counter (PC)
=$000242				CPUPBR           = $000242 ;2 Bytes Program Bank Register (K)
=$000244				CPUA             = $000244 ;2 Bytes Accumulator (A)
=$000246				CPUX             = $000246 ;2 Bytes X Register (X)
=$000248				CPUY             = $000248 ;2 Bytes Y Register (Y)
=$00024a				CPUSTACK         = $00024A ;2 Bytes Stack Pointer (S)
=$00024c				CPUDP            = $00024C ;2 Bytes Direct Page Register (D)
=$00024e				CPUDBR           = $00024E ;1 Byte  Data Bank Register (B)
=$00024f				CPUFLAGS         = $00024F ;1 Byte  Flags (P)
=$000250				MONITOR_VARS     = $000250 ; Byte  MONITOR Variables. BASIC variables may overlap this space
=$000250				MCMDADDR         = $000250 ;3 Bytes Address of the current line of text being processed by the command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
=$000253				MCMP_TEXT        = $000253 ;3 Bytes Address of symbol being evaluated for COMPARE routine
=$000256				MCMP_LEN         = $000256 ;2 Bytes Length of symbol being evaluated for COMPARE routine
=$000258				MCMD             = $000258 ;3 Bytes Address of the current command/function string
=$00025b				MCMD_LEN         = $00025B ;2 Bytes Length of the current command/function string
=$00025d				MARG1            = $00025D ;4 Bytes First command argument. May be data or address, depending on command
=$000261				MARG2            = $000261 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000265				MARG3            = $000265 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000269				MARG4            = $000269 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$00026d				MARG5            = $00026D ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000271				MARG6            = $000271 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000275				MARG7            = $000275 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000279				MARG8            = $000279 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000300				LOADFILE_VARS    = $000300 ; Byte
=$000300				LOADFILE_NAME    = $000300 ;3 Bytes (addr) Name of file to load. Address in Data Page
=$000303				LOADFILE_LEN     = $000303 ;1 Byte  Length of filename. 0=Null Terminated
=$000304				LOADPBR          = $000304 ;1 Byte  First Program Bank of loaded file ($05 segment)
=$000305				LOADPC           = $000305 ;2 Bytes Start address of loaded file ($05 segment)
=$000307				LOADDBR          = $000307 ;1 Byte  First data bank of loaded file ($06 segment)
=$000308				LOADADDR         = $000308 ;2 Bytes FIrst data address of loaded file ($06 segment)
=$00030a				LOADFILE_TYPE    = $00030A ;3 Bytes (addr) File type string in loaded data file. Actual string data will be in Bank 1. Valid values are BIN, PRG, P16
=$00030d				BLOCK_LEN        = $00030D ;2 Bytes Length of block being loaded
=$00030f				BLOCK_ADDR       = $00030F ;2 Bytes (temp) Address of block being loaded
=$000311				BLOCK_BANK       = $000311 ;1 Byte  (temp) Bank of block being loaded
=$000312				BLOCK_COUNT      = $000312 ;2 Bytes (temp) Counter of bytes read as file is loaded
=$000320				SDOS_BLOCK_BEGIN = $000320 ;
=$000324				SDOS_LOAD_ADDY   = $000324 ; 4 Bytes (Uses 3 Only)
=$000328				SDOS_FILE_SIZE   = $000328 ;
=$00032c				SDOS_BYTE_NUMBER = $00032C ; Number of Byte to Read or Write before changing the Pointer
=$000330				SDOS_REG_WR32_AD = $000330 ; 4 Bytes (Used to read and Write Values in/from CH376S)
=$000334				SDOS_BYTE_PTR    = $000334
=$000337				SDOS_FILE_REC_PTR= $000337 ; 3 byte pointer to a simple file struct
=$00033a				SDOS_LOOP        = $00033A ; variable to count file length
=$000380				SDOS_FILE_NAME   = $000380 ; // Max of 128 Chars
=$000400				SDOS_BLK_BEGIN   = $000400 ; 512 Bytes to Store SD Card Incoming or Outcoming Block
=$0006ff				SDOS_BLK_END     = $0006FF ;
=$000700				CURRUART         = $000700 ; 3-bytes: the base address of the current UART
=$000703				CHAN_OUT         = $000703 ; 1-byte: the number of the current output channel (for PUTC, etc.)
=$000704				CHAN_IN          = $000704 ; 1-byte: the number of the current input channel (for GETCH, etc.)
=$000f00				KEY_BUFFER       = $000F00 ;64 Bytes keyboard buffer
=$0080					KEY_BUFFER_SIZE  = $0080 ;128 Bytes (constant) keyboard buffer length
=$000f7f				KEY_BUFFER_END   = $000F7F ;1 Byte  Last byte of keyboard buffer
=$000f83				KEY_BUFFER_CMD   = $000F83 ;1 Byte  Indicates the Command Process Status
=$000f84				COMMAND_SIZE_STR = $000F84 ; 1 Byte
=$000f86				COMMAND_COMP_TMP = $000F86 ; 2 Bytes
=$000f87				KEYBOARD_SC_FLG  = $000F87 ;1 Bytes that indicate the Status of Left Shift, Left CTRL, Left ALT, Right Shift
=$000f88				KEYBOARD_SC_TMP  = $000F88 ;1 Byte, Interrupt Save Scan Code while Processing
=$000f89				KEYBOARD_LOCKS   = $000F89 ;1 Byte, the status of the various lock keys
=$000f8a				KEYFLAG          = $000F8A ;1 Byte, flag to indicate if CTRL-C has been pressed
=$000f8b				KEY_BUFFER_RPOS  = $000F8B ;2 Byte, position of the character to read from the KEY_BUFFER
=$000f8d				KEY_BUFFER_WPOS  = $000F8D ;2 Byte, position of the character to write to the KEY_BUFFER
=$001000				KERNEL_JMP_BEGIN = $001000 ; Reserved for the Kernel jump table
=$001fff				KERNEL_JMP_END   = $001FFF
=$002000				TEST_BEGIN       = $002000 ;28672 Bytes Test/diagnostic code for prototype.
=$007fff				TEST_END         = $007FFF ;0 Byte
=$008000				STACK_BEGIN      = $008000 ;32512 Bytes The default beginning of stack space
=$00feff				STACK_END        = $00FEFF ;0 Byte  End of stack space. Everything below this is I/O space
=$00ff00				ISR_BEGIN        = $00FF00 ; Byte  Beginning of CPU vectors in Direct page
=$00ff00				HRESET           = $00FF00 ;16 Bytes Handle RESET asserted. Reboot computer and re-initialize the kernel.
=$00ff10				HCOP             = $00FF10 ;16 Bytes Handle the COP instruction. Program use; not used by OS
=$00ff20				HBRK             = $00FF20 ;16 Bytes Handle the BRK instruction. Returns to BASIC Ready prompt.
=$00ff30				HABORT           = $00FF30 ;16 Bytes Handle ABORT asserted. Return to Ready prompt with an error message.
=$00ff40				HNMI             = $00FF40 ;32 Bytes Handle NMI
=$00ff60				HIRQ             = $00FF60 ;32 Bytes Handle IRQ
=$00ff80				Unused_FF80      = $00FF80 ;End of direct page Interrrupt handlers
=$00ffe0				VECTORS_BEGIN    = $00FFE0 ;0 Byte  Interrupt vectors
=$00ffe0				JMP_READY        = $00FFE0 ;4 Bytes Jumps to ROM READY routine. Modified whenever alternate command interpreter is loaded.
=$00ffe4				VECTOR_COP       = $00FFE4 ;2 Bytes Native COP Interrupt vector
=$00ffe6				VECTOR_BRK       = $00FFE6 ;2 Bytes Native BRK Interrupt vector
=$00ffe8				VECTOR_ABORT     = $00FFE8 ;2 Bytes Native ABORT Interrupt vector
=$00ffea				VECTOR_NMI       = $00FFEA ;2 Bytes Native NMI Interrupt vector
=$00ffec				VECTOR_RESET     = $00FFEC ;2 Bytes Unused (Native RESET vector)
=$00ffee				VECTOR_IRQ       = $00FFEE ;2 Bytes Native IRQ Vector
=$00fff0				RETURN           = $00FFF0 ;4 Bytes RETURN key handler. Points to BASIC or MONITOR subroutine to execute when RETURN is pressed.
=$00fff4				VECTOR_ECOP      = $00FFF4 ;2 Bytes Emulation mode interrupt handler
=$00fff6				VECTOR_EBRK      = $00FFF6 ;2 Bytes Emulation mode interrupt handler
=$00fff8				VECTOR_EABORT    = $00FFF8 ;2 Bytes Emulation mode interrupt handler
=$00fffa				VECTOR_ENMI      = $00FFFA ;2 Bytes Emulation mode interrupt handler
=$00fffc				VECTOR_ERESET    = $00FFFC ;2 Bytes Emulation mode interrupt handler
=$00fffe				VECTOR_EIRQ      = $00FFFE ;2 Bytes Emulation mode interrupt handler
=$010000				VECTORS_END      = $010000 ;*End of vector space
=$00ffff				BANK0_END        = $00FFFF ;End of Bank 00 and Direct page

;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_data.asm

>380000	00 a0 af			                .long $AFA000       ; SCREENBEGIN, 3 bytes, Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>380003	4c 00				                .word 76            ; COLS_VISIBLE, 2 bytes, Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>380005	64 00				                .word 100           ; COLS_PER_LINE, 2 bytes, Columns in memory per screen line. A virtual line can be this long. Default=128
>380007	38 00				                .word 56            ; LINES_VISIBLE, 2 bytes, The number of rows visible on the screen. Default=25
>380009	40 00				                .word 64            ; LINES_MAX, 2 bytes, The number of rows in memory for the screen. Default=64
>38000b	00 a0 af			                .long $AFA000       ; CURSORPOS, 3 bytes, The next character written to the screen will be written in this location.
>38000e	00 00				                .word 0             ; CURSORX, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380010	00 00				                .word 0             ; CURSORY, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380012	0f				                .byte $0F           ; CURCOLOR, 2 bytes, Color of next character to be printed to the screen.
>380013	00				                .byte $00           ; CURATTR, 2 bytes, Attribute of next character to be printed to the screen.
>380014	00 80				                .word STACK_BEGIN   ; STACKBOT, 2 bytes, Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
>380016	ff fe				                .word STACK_END     ; STACKTOP, 2 bytes, Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.

;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_code.asm

.ff00	18		clc		RHRESET         CLC
.ff01	fb		xce		                XCE
.ff02	5c 00 10 38	jmp $381000	                JML BOOT
.ff10					RHCOP
.ff10	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff12	8b		phb		                PHB
.ff13	0b		phd		                PHD
.ff14	48		pha		                PHA
.ff15	da		phx		                PHX
.ff16	5a		phy		                PHY
.ff17	5c 08 10 38	jmp $381008	                JML BREAK
.ff20					RHBRK
.ff20	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff22	8b		phb		                PHB
.ff23	0b		phd		                PHD
.ff24	48		pha		                PHA
.ff25	da		phx		                PHX
.ff26	5a		phy		                PHY
.ff27	5c 08 10 38	jmp $381008	                JML BREAK
.ff30					RHABORT
.ff30	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff32	8b		phb		                PHB
.ff33	0b		phd		                PHD
.ff34	48		pha		                PHA
.ff35	da		phx		                PHX
.ff36	5a		phy		                PHY
.ff37	5c 08 10 38	jmp $381008	                JML BREAK
.ff40					 RHNMI
.ff40	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff42	8b		phb		                PHB
.ff43	0b		phd		                PHD
.ff44	48		pha		                PHA
.ff45	da		phx		                PHX
.ff46	5a		phy		                PHY
.ff47	22 22 12 38	jsl $381222	                JSL NMI_HANDLER
.ff4b	7a		ply		                PLY
.ff4c	fa		plx		                PLX
.ff4d	68		pla		                PLA
.ff4e	2b		pld		                PLD
.ff4f	ab		plb		                PLB
.ff50	40		rti		                RTI
.ff60					RHIRQ
.ff60	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff62	8b		phb		                PHB
.ff63	0b		phd		                PHD
.ff64	48		pha		                PHA
.ff65	da		phx		                PHX
.ff66	5a		phy		                PHY
.ff67	22 f4 10 38	jsl $3810f4	                JSL IRQ_HANDLER
.ff6b	7a		ply		                PLY
.ff6c	fa		plx		                PLX
.ff6d	68		pla		                PLA
.ff6e	2b		pld		                PLD
.ff6f	ab		plb		                PLB
.ff70	40		rti		                RTI
.ffe0	5c 04 00 3a	jmp $3a0004	JUMP_READY      JML MONITOR    ; Kernel READY routine. Rewrite this address to jump to a custom kernel.
>ffe4	10 ff				RVECTOR_COP     .addr HCOP     ; FFE4
>ffe6	20 ff				RVECTOR_BRK     .addr HBRK     ; FFE6
>ffe8	30 ff				RVECTOR_ABORT   .addr HABORT   ; FFE8
>ffea	40 ff				RVECTOR_NMI     .addr HNMI     ; FFEA
>ffec	00 00				                .word $0000    ; FFEC
>ffee	60 ff				RVECTOR_IRQ     .addr HIRQ    ; FFEE
.fff0	5c ec 05 39	jmp $3905ec	RRETURN         JML IRETURN
>fff4	10 ff				RVECTOR_ECOP    .addr HCOP     ; FFF4
>fff6	20 ff				RVECTOR_EBRK    .addr HBRK     ; FFF6
>fff8	30 ff				RVECTOR_EABORT  .addr HABORT   ; FFF8
>fffa	40 ff				RVECTOR_ENMI    .addr HNMI     ; FFFA
>fffc	00 ff				RVECTOR_ERESET  .addr HRESET   ; FFFC
>fffe	60 ff				RVECTOR_EIRQ    .addr HIRQ     ; FFFE

;******  Return to file: src\kernel.asm


;******  Processing file: src\Math_def.asm

=$000100				UNSIGNED_MULT_A_LO  = $000100
=$000101				UNSIGNED_MULT_A_HI  = $000101
=$000102				UNSIGNED_MULT_B_LO  = $000102
=$000103				UNSIGNED_MULT_B_HI  = $000103
=$000104				UNSIGNED_MULT_AL_LO = $000104
=$000105				UNSIGNED_MULT_AL_HI = $000105
=$000106				UNSIGNED_MULT_AH_LO = $000106
=$000107				UNSIGNED_MULT_AH_HI = $000107
=$000108				SIGNED_MULT_A_LO    = $000108
=$000109				SIGNED_MULT_A_HI    = $000109
=$00010a				SIGNED_MULT_B_LO    = $00010A
=$00010b				SIGNED_MULT_B_HI    = $00010B
=$00010c				SIGNED_MULT_AL_LO   = $00010C
=$00010d				SIGNED_MULT_AL_HI   = $00010D
=$00010e				SIGNED_MULT_AH_LO   = $00010E
=$00010f				SIGNED_MULT_AH_HI   = $00010F
=$000110				UNSIGNED_DIV_DEM_LO = $000110
=$000111				UNSIGNED_DIV_DEM_HI = $000111
=$000112				UNSIGNED_DIV_NUM_LO = $000112
=$000113				UNSIGNED_DIV_NUM_HI = $000113
=$000114				UNSIGNED_DIV_QUO_LO = $000114
=$000115				UNSIGNED_DIV_QUO_HI = $000115
=$000116				UNSIGNED_DIV_REM_LO = $000116
=$000117				UNSIGNED_DIV_REM_HI = $000117
=$000118				SIGNED_DIV_DEM_LO   = $000118
=$000119				SIGNED_DIV_DEM_HI   = $000119
=$00011a				SIGNED_DIV_NUM_LO   = $00011A
=$00011b				SIGNED_DIV_NUM_HI   = $00011B
=$00011c				SIGNED_DIV_QUO_LO   = $00011C
=$00011d				SIGNED_DIV_QUO_HI   = $00011D
=$00011e				SIGNED_DIV_REM_LO   = $00011E
=$00011f				SIGNED_DIV_REM_HI   = $00011F
=$000120				ADDER32_A_LL        = $000120
=$000121				ADDER32_A_LH        = $000121
=$000122				ADDER32_A_HL        = $000122
=$000123				ADDER32_A_HH        = $000123
=$000124				ADDER32_B_LL        = $000124
=$000125				ADDER32_B_LH        = $000125
=$000126				ADDER32_B_HL        = $000126
=$000127				ADDER32_B_HH        = $000127
=$000128				ADDER32_R_LL        = $000128
=$000129				ADDER32_R_LH        = $000129
=$00012a				ADDER32_R_HL        = $00012A
=$00012b				ADDER32_R_HH        = $00012B

;******  Return to file: src\kernel.asm


;******  Processing file: src\interrupt_def.asm

=$000140				INT_PENDING_REG0 = $000140 ;
=$000141				INT_PENDING_REG1 = $000141 ;
=$000142				INT_PENDING_REG2 = $000142 ;
=$000143				INT_PENDING_REG3 = $000143 ; FMX Model
=$000144				INT_POL_REG0     = $000144 ;
=$000145				INT_POL_REG1     = $000145 ;
=$000146				INT_POL_REG2     = $000146 ;
=$000147				INT_POL_REG7     = $000147 ; FMX Model
=$000148				INT_EDGE_REG0    = $000148 ;
=$000149				INT_EDGE_REG1    = $000149 ;
=$00014a				INT_EDGE_REG2    = $00014A ;
=$00014b				INT_EDGE_REG3    = $00014B ; FMX Model
=$00014c				INT_MASK_REG0    = $00014C ;
=$00014d				INT_MASK_REG1    = $00014D ;
=$00014e				INT_MASK_REG2    = $00014E ;
=$00014f				INT_MASK_REG3    = $00014F ; FMX Model
=$01					FNX0_INT00_SOF        = $01  ;Start of Frame @ 60FPS
=$02					FNX0_INT01_SOL        = $02  ;Start of Line (Programmable)
=$04					FNX0_INT02_TMR0       = $04  ;Timer 0 Interrupt
=$08					FNX0_INT03_TMR1       = $08  ;Timer 1 Interrupt
=$10					FNX0_INT04_TMR2       = $10  ;Timer 2 Interrupt
=$20					FNX0_INT05_RTC        = $20  ;Real-Time Clock Interrupt
=$40					FNX0_INT06_FDC        = $40  ;Floppy Disk Controller
=$80					FNX0_INT07_MOUSE      = $80  ; Mouse Interrupt (INT12 in SuperIO IOspace)
=$01					FNX1_INT00_KBD        = $01  ;Keyboard Interrupt
=$02					FNX1_INT01_SC0        = $02  ;VICKY_II (INT2) Sprite 2 Sprite Collision
=$04					FNX1_INT02_SC1        = $04  ;VICKY_II (INT3) Sprite 2 Tiles Collision
=$08					FNX1_INT03_COM2       = $08  ;Serial Port 2
=$10					FNX1_INT04_COM1       = $10  ;Serial Port 1
=$20					FNX1_INT05_MPU401     = $20  ;Midi Controller Interrupt
=$40					FNX1_INT06_LPT        = $40  ;Parallel Port
=$80					FNX1_INT07_SDCARD     = $80  ;SD Card Controller Interrupt (CH376S)
=$01					FNX2_INT00_OPL3       = $01  ;OPl3
=$02					FNX2_INT01_GABE_INT0  = $02  ;GABE (INT0) - TBD
=$04					FNX2_INT02_GABE_INT1  = $04  ;GABE (INT1) - TBD
=$08					FNX2_INT03_SDMA       = $08  ;VICKY_II (INT4)
=$10					FNX2_INT04_VDMA       = $10  ;VICKY_II (INT5)
=$20					FNX2_INT05_GABE_INT2  = $20  ;GABE (INT2) - TBD
=$40					FNX2_INT06_EXT        = $40  ;External Expansion
=$80					FNX2_INT07_SDCARD_INS = $80  ; SDCARD Insertion
=$01					FNX3_INT00_OPN2       = $01  ;OPN2
=$02					FNX3_INT01_OPM        = $02  ;OPM
=$04					FNX3_INT02_IDE        = $04  ;HDD IDE INTERRUPT
=$08					FNX3_INT03_TBD        = $08  ;TBD
=$10					FNX3_INT04_TBD        = $10  ;TBD
=$20					FNX3_INT05_TBD        = $20  ;GABE (INT2) - TBD
=$40					FNX3_INT06_TBD        = $40  ;External Expansion
=$80					FNX3_INT07_TBD        = $80  ; SDCARD Insertion

;******  Return to file: src\kernel.asm


;******  Processing file: src\dram_inc.asm

=$afa000				SCREEN_PAGE0     = $AFA000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
=$afc000				SCREEN_PAGE1     = $AFC000 ;8192 Bytes Additional page of display RAM. This can be used for page flipping or to handle multiple edit buffers.
=$b00000				SCREEN_END       = $B00000 ;End of display memory

;******  Return to file: src\kernel.asm


;******  Processing file: src\vicky_def.asm

=$af0000				MASTER_CTRL_REG_L	      = $AF0000
=$01					Mstr_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$02					Mstr_Ctrl_Text_Overlay  = $02       ; Enable the Overlay of the text mode on top of Graphic Mode (the Background Color is ignored)
=$04					Mstr_Ctrl_Graph_Mode_En = $04       ; Enable the Graphic Mode
=$08					Mstr_Ctrl_Bitmap_En     = $08       ; Enable the Bitmap Module In Vicky
=$10					Mstr_Ctrl_TileMap_En    = $10       ; Enable the Tile Module in Vicky
=$20					Mstr_Ctrl_Sprite_En     = $20       ; Enable the Sprite Module in Vicky
=$40					Mstr_Ctrl_GAMMA_En      = $40       ; this Enable the GAMMA correction - The Analog and DVI have different color value, the GAMMA is great to correct the difference
=$80					Mstr_Ctrl_Disable_Vid   = $80       ; This will disable the Scanning of the Video hence giving 100% bandwith to the CPU
=$af0001				MASTER_CTRL_REG_H       = $AF0001
=$01					Mstr_Ctrl_Video_Mode0   = $01       ; 0 - 640x480 (Clock @ 25.175Mhz), 1 - 800x600 (Clock @ 40Mhz)
=$02					Mstt_Ctrl_Video_Mode1   = $02       ; 0 - No Pixel Doubling, 1- Pixel Doubling (Reduce the Pixel Resolution by 2)
=$af0002				VKY_RESERVED_00         = $AF0002
=$af0003				VKY_RESERVED_01         = $AF0003
=$01					Border_Ctrl_Enable      = $01
=$af0004				BORDER_CTRL_REG         = $AF0004 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$af0005				BORDER_COLOR_B          = $AF0005
=$af0006				BORDER_COLOR_G          = $AF0006
=$af0007				BORDER_COLOR_R          = $AF0007
=$af0008				BORDER_X_SIZE           = $AF0008; X-  Values: 0 - 32 (Default: 32)
=$af0009				BORDER_Y_SIZE           = $AF0009; Y- Values 0 -32 (Default: 32)
=$af000d				BACKGROUND_COLOR_B      = $AF000D ; When in Graphic Mode, if a pixel is "0" then the Background pixel is chosen
=$af000e				BACKGROUND_COLOR_G      = $AF000E
=$af000f				BACKGROUND_COLOR_R      = $AF000F ;
=$af0010				VKY_TXT_CURSOR_CTRL_REG = $AF0010   ;[0]  Enable Text Mode
=$01					Vky_Cursor_Enable       = $01
=$02					Vky_Cursor_Flash_Rate0  = $02
=$04					Vky_Cursor_Flash_Rate1  = $04
=$08					Vky_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10					Vky_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$af0011				VKY_TXT_START_ADD_PTR   = $AF0011   ; This is an offset to change the Starting address of the Text Mode Buffer (in x)
=$af0012				VKY_TXT_CURSOR_CHAR_REG = $AF0012
=$af0013				VKY_TXT_CURSOR_COLR_REG = $AF0013
=$af0014				VKY_TXT_CURSOR_X_REG_L  = $AF0014
=$af0015				VKY_TXT_CURSOR_X_REG_H  = $AF0015
=$af0016				VKY_TXT_CURSOR_Y_REG_L  = $AF0016
=$af0017				VKY_TXT_CURSOR_Y_REG_H  = $AF0017
=$af001b				VKY_LINE_IRQ_CTRL_REG   = $AF001B ;[0] - Enable Line 0, [1] -Enable Line 1
=$af001c				VKY_LINE0_CMP_VALUE_LO  = $AF001C ;Write Only [7:0]
=$af001d				VKY_LINE0_CMP_VALUE_HI  = $AF001D ;Write Only [3:0]
=$af001e				VKY_LINE1_CMP_VALUE_LO  = $AF001E ;Write Only [7:0]
=$af001f				VKY_LINE1_CMP_VALUE_HI  = $AF001F ;Write Only [3:0]
=$af001c				VKY_INFO_CHIP_NUM_L     = $AF001C
=$af001d				VKY_INFO_CHIP_NUM_H     = $AF001D
=$af001e				VKY_INFO_CHIP_VER_L     = $AF001E
=$af001f				VKY_INFO_CHIP_VER_H     = $AF001F
=$01					TILE_Enable             = $01
=$02					TILE_LUT0               = $02
=$04					TILE_LUT1               = $04
=$08					TILE_LUT2               = $08
=$80					TILESHEET_256x256_En    = $80   ; 0 -> Sequential, 1-> 256x256 Tile Sheet Striding
=$af0100				TL0_CONTROL_REG         = $AF0100       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0101				TL0_START_ADDY_L        = $AF0101       ; Not USed right now - Starting Address to where is the MAP
=$af0102				TL0_START_ADDY_M        = $AF0102
=$af0103				TL0_START_ADDY_H        = $AF0103
=$af0104				TL0_MAP_X_STRIDE_L      = $AF0104       ; The Stride of the Map
=$af0105				TL0_MAP_X_STRIDE_H      = $AF0105
=$af0106				TL0_MAP_Y_STRIDE_L      = $AF0106       ; The Stride of the Map
=$af0107				TL0_MAP_Y_STRIDE_H      = $AF0107
=$af0108				TL1_CONTROL_REG         = $AF0108       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0109				TL1_START_ADDY_L        = $AF0109       ; Not USed right now - Starting Address to where is the MAP
=$af010a				TL1_START_ADDY_M        = $AF010A
=$af010b				TL1_START_ADDY_H        = $AF010B
=$af010c				TL1_MAP_X_STRIDE_L      = $AF010C       ; The Stride of the Map
=$af010d				TL1_MAP_X_STRIDE_H      = $AF010D
=$af010e				TL1_MAP_Y_STRIDE_L      = $AF010E       ; The Stride of the Map
=$af010f				TL1_MAP_Y_STRIDE_H      = $AF010F
=$af0110				TL2_CONTROL_REG         = $AF0110       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0111				TL2_START_ADDY_L        = $AF0111       ; Not USed right now - Starting Address to where is the MAP
=$af0112				TL2_START_ADDY_M        = $AF0112
=$af0113				TL2_START_ADDY_H        = $AF0113
=$af0114				TL2_MAP_X_STRIDE_L      = $AF0114       ; The Stride of the Map
=$af0115				TL2_MAP_X_STRIDE_H      = $AF0115
=$af0116				TL2_MAP_Y_STRIDE_L      = $AF0116       ; The Stride of the Map
=$af0117				TL2_MAP_Y_STRIDE_H      = $AF0117
=$af0118				TL3_CONTROL_REG         = $AF0118       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0119				TL3_START_ADDY_L        = $AF0119       ; Not USed right now - Starting Address to where is the MAP
=$af011a				TL3_START_ADDY_M        = $AF011A
=$af011b				TL3_START_ADDY_H        = $AF011B
=$af011c				TL3_MAP_X_STRIDE_L      = $AF011C       ; The Stride of the Map
=$af011d				TL3_MAP_X_STRIDE_H      = $AF011D
=$af011e				TL3_MAP_Y_STRIDE_L      = $AF011E       ; The Stride of the Map
=$af011f				TL3_MAP_Y_STRIDE_H      = $AF011F
=$af0140				BM_CONTROL_REG          = $AF0140
=$af0141				BM_START_ADDY_L         = $AF0141
=$af0142				BM_START_ADDY_M         = $AF0142
=$af0143				BM_START_ADDY_H         = $AF0143
=$af0144				BM_X_SIZE_L             = $AF0144
=$af0145				BM_X_SIZE_H             = $AF0145
=$af0146				BM_Y_SIZE_L             = $AF0146
=$af0147				BM_Y_SIZE_H             = $AF0147
=$af0148				BM_RESERVED_0           = $AF0148
=$af0149				BM_RESERVED_1           = $AF0149
=$af014a				BM_RESERVED_2           = $AF014A
=$af014b				BM_RESERVED_3           = $AF014B
=$af014c				BM_RESERVED_4           = $AF014C
=$af014d				BM_RESERVED_5           = $AF014D
=$af014e				BM_RESERVED_6           = $AF014E
=$af014f				BM_RESERVED_7           = $AF014F
=$01					SPRITE_Enable             = $01
=$02					SPRITE_LUT0               = $02 ; This is the LUT that the Sprite will use
=$04					SPRITE_LUT1               = $04
=$08					SPRITE_LUT2               = $08 ; Only 4 LUT for Now, So this bit is not used.
=$10					SPRITE_DEPTH0             = $10 ; This is the Layer the Sprite will be Displayed in
=$20					SPRITE_DEPTH1             = $20
=$40					SPRITE_DEPTH2             = $40
=$af0200				SP00_CONTROL_REG        = $AF0200
=$af0201				SP00_ADDY_PTR_L         = $AF0201
=$af0202				SP00_ADDY_PTR_M         = $AF0202
=$af0203				SP00_ADDY_PTR_H         = $AF0203
=$af0204				SP00_X_POS_L            = $AF0204
=$af0205				SP00_X_POS_H            = $AF0205
=$af0206				SP00_Y_POS_L            = $AF0206
=$af0207				SP00_Y_POS_H            = $AF0207
=$af0208				SP01_CONTROL_REG        = $AF0208
=$af0209				SP01_ADDY_PTR_L         = $AF0209
=$af020a				SP01_ADDY_PTR_M         = $AF020A
=$af020b				SP01_ADDY_PTR_H         = $AF020B
=$af020c				SP01_X_POS_L            = $AF020C
=$af020d				SP01_X_POS_H            = $AF020D
=$af020e				SP01_Y_POS_L            = $AF020E
=$af020f				SP01_Y_POS_H            = $AF020F
=$af0210				SP02_CONTROL_REG        = $AF0210
=$af0211				SP02_ADDY_PTR_L         = $AF0211
=$af0212				SP02_ADDY_PTR_M         = $AF0212
=$af0213				SP02_ADDY_PTR_H         = $AF0213
=$af0214				SP02_X_POS_L            = $AF0214
=$af0215				SP02_X_POS_H            = $AF0215
=$af0216				SP02_Y_POS_L            = $AF0216
=$af0217				SP02_Y_POS_H            = $AF0217
=$af0218				SP03_CONTROL_REG        = $AF0218
=$af0219				SP03_ADDY_PTR_L         = $AF0219
=$af021a				SP03_ADDY_PTR_M         = $AF021A
=$af021b				SP03_ADDY_PTR_H         = $AF021B
=$af021c				SP03_X_POS_L            = $AF021C
=$af021d				SP03_X_POS_H            = $AF021D
=$af021e				SP03_Y_POS_L            = $AF021E
=$af021f				SP03_Y_POS_H            = $AF021F
=$af0220				SP04_CONTROL_REG        = $AF0220
=$af0221				SP04_ADDY_PTR_L         = $AF0221
=$af0222				SP04_ADDY_PTR_M         = $AF0222
=$af0223				SP04_ADDY_PTR_H         = $AF0223
=$af0224				SP04_X_POS_L            = $AF0224
=$af0225				SP04_X_POS_H            = $AF0225
=$af0226				SP04_Y_POS_L            = $AF0226
=$af0227				SP04_Y_POS_H            = $AF0227
=$af0228				SP05_CONTROL_REG        = $AF0228
=$af0229				SP05_ADDY_PTR_L         = $AF0229
=$af022a				SP05_ADDY_PTR_M         = $AF022A
=$af022b				SP05_ADDY_PTR_H         = $AF022B
=$af022c				SP05_X_POS_L            = $AF022C
=$af022d				SP05_X_POS_H            = $AF022D
=$af022e				SP05_Y_POS_L            = $AF022E
=$af022f				SP05_Y_POS_H            = $AF022F
=$af0230				SP06_CONTROL_REG        = $AF0230
=$af0231				SP06_ADDY_PTR_L         = $AF0231
=$af0232				SP06_ADDY_PTR_M         = $AF0232
=$af0233				SP06_ADDY_PTR_H         = $AF0233
=$af0234				SP06_X_POS_L            = $AF0234
=$af0235				SP06_X_POS_H            = $AF0235
=$af0236				SP06_Y_POS_L            = $AF0236
=$af0237				SP06_Y_POS_H            = $AF0237
=$af0238				SP07_CONTROL_REG        = $AF0238
=$af0239				SP07_ADDY_PTR_L         = $AF0239
=$af023a				SP07_ADDY_PTR_M         = $AF023A
=$af023b				SP07_ADDY_PTR_H         = $AF023B
=$af023c				SP07_X_POS_L            = $AF023C
=$af023d				SP07_X_POS_H            = $AF023D
=$af023e				SP07_Y_POS_L            = $AF023E
=$af023f				SP07_Y_POS_H            = $AF023F
=$af0240				SP08_CONTROL_REG        = $AF0240
=$af0241				SP08_ADDY_PTR_L         = $AF0241
=$af0242				SP08_ADDY_PTR_M         = $AF0242
=$af0243				SP08_ADDY_PTR_H         = $AF0243
=$af0244				SP08_X_POS_L            = $AF0244
=$af0245				SP08_X_POS_H            = $AF0245
=$af0246				SP08_Y_POS_L            = $AF0246
=$af0247				SP08_Y_POS_H            = $AF0247
=$af0248				SP09_CONTROL_REG        = $AF0248
=$af0249				SP09_ADDY_PTR_L         = $AF0249
=$af024a				SP09_ADDY_PTR_M         = $AF024A
=$af024b				SP09_ADDY_PTR_H         = $AF024B
=$af024c				SP09_X_POS_L            = $AF024C
=$af024d				SP09_X_POS_H            = $AF024D
=$af024e				SP09_Y_POS_L            = $AF024E
=$af024f				SP09_Y_POS_H            = $AF024F
=$af0250				SP10_CONTROL_REG        = $AF0250
=$af0251				SP10_ADDY_PTR_L         = $AF0251
=$af0252				SP10_ADDY_PTR_M         = $AF0252
=$af0253				SP10_ADDY_PTR_H         = $AF0253
=$af0254				SP10_X_POS_L            = $AF0254
=$af0255				SP10_X_POS_H            = $AF0255
=$af0256				SP10_Y_POS_L            = $AF0256
=$af0257				SP10_Y_POS_H            = $AF0257
=$af0258				SP11_CONTROL_REG        = $AF0258
=$af0259				SP11_ADDY_PTR_L         = $AF0259
=$af025a				SP11_ADDY_PTR_M         = $AF025A
=$af025b				SP11_ADDY_PTR_H         = $AF025B
=$af025c				SP11_X_POS_L            = $AF025C
=$af025d				SP11_X_POS_H            = $AF025D
=$af025e				SP11_Y_POS_L            = $AF025E
=$af025f				SP11_Y_POS_H            = $AF025F
=$af0260				SP12_CONTROL_REG        = $AF0260
=$af0261				SP12_ADDY_PTR_L         = $AF0261
=$af0262				SP12_ADDY_PTR_M         = $AF0262
=$af0263				SP12_ADDY_PTR_H         = $AF0263
=$af0264				SP12_X_POS_L            = $AF0264
=$af0265				SP12_X_POS_H            = $AF0265
=$af0266				SP12_Y_POS_L            = $AF0266
=$af0267				SP12_Y_POS_H            = $AF0267
=$af0268				SP13_CONTROL_REG        = $AF0268
=$af0269				SP13_ADDY_PTR_L         = $AF0269
=$af026a				SP13_ADDY_PTR_M         = $AF026A
=$af026b				SP13_ADDY_PTR_H         = $AF026B
=$af026c				SP13_X_POS_L            = $AF026C
=$af026d				SP13_X_POS_H            = $AF026D
=$af026e				SP13_Y_POS_L            = $AF026E
=$af026f				SP13_Y_POS_H            = $AF026F
=$af0270				SP14_CONTROL_REG        = $AF0270
=$af0271				SP14_ADDY_PTR_L         = $AF0271
=$af0272				SP14_ADDY_PTR_M         = $AF0272
=$af0273				SP14_ADDY_PTR_H         = $AF0273
=$af0274				SP14_X_POS_L            = $AF0274
=$af0275				SP14_X_POS_H            = $AF0275
=$af0276				SP14_Y_POS_L            = $AF0276
=$af0277				SP14_Y_POS_H            = $AF0277
=$af0278				SP15_CONTROL_REG        = $AF0278
=$af0279				SP15_ADDY_PTR_L         = $AF0279
=$af027a				SP15_ADDY_PTR_M         = $AF027A
=$af027b				SP15_ADDY_PTR_H         = $AF027B
=$af027c				SP15_X_POS_L            = $AF027C
=$af027d				SP15_X_POS_H            = $AF027D
=$af027e				SP15_Y_POS_L            = $AF027E
=$af027f				SP15_Y_POS_H            = $AF027F
=$af0280				SP16_CONTROL_REG        = $AF0280
=$af0281				SP16_ADDY_PTR_L         = $AF0281
=$af0282				SP16_ADDY_PTR_M         = $AF0282
=$af0283				SP16_ADDY_PTR_H         = $AF0283
=$af0284				SP16_X_POS_L            = $AF0284
=$af0285				SP16_X_POS_H            = $AF0285
=$af0286				SP16_Y_POS_L            = $AF0286
=$af0287				SP16_Y_POS_H            = $AF0287
=$af0288				SP17_CONTROL_REG        = $AF0288
=$af0289				SP17_ADDY_PTR_L         = $AF0289
=$af028a				SP17_ADDY_PTR_M         = $AF028A
=$af028b				SP17_ADDY_PTR_H         = $AF028B
=$af028c				SP17_X_POS_L            = $AF028C
=$af028d				SP17_X_POS_H            = $AF028D
=$af028e				SP17_Y_POS_L            = $AF028E
=$af028f				SP17_Y_POS_H            = $AF028F
=$af0400				VDMA_CONTROL_REG        = $AF0400
=$01					VDMA_CTRL_Enable        = $01
=$02					VDMA_CTRL_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04					VDMA_CTRL_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08					VDMA_CTRL_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$80					VDMA_CTRL_Start_TRF     = $80     ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0401				VDMA_BYTE_2_WRITE       = $AF0401 ; Write Only - Byte to Write in the Fill Function
=$af0401				VDMA_STATUS_REG         = $AF0401 ; Read only
=$01					VDMA_STAT_Size_Err      = $01     ; If Set to 1, Overall Size is Invalid
=$02					VDMA_STAT_Dst_Add_Err   = $02     ; If Set to 1, Destination Address Invalid
=$04					VDMA_STAT_Src_Add_Err   = $04     ; If Set to 1, Source Address Invalid
=$80					VDMA_STAT_VDMA_IPS      = $80     ; If Set to 1, VDMA Transfer in Progress (this Inhibit CPU Access to Mem)
=$af0402				VDMA_SRC_ADDY_L         = $AF0402 ; Pointer to the Source of the Data to be stransfered
=$af0403				VDMA_SRC_ADDY_M         = $AF0403 ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0404				VDMA_SRC_ADDY_H         = $AF0404
=$af0405				VDMA_DST_ADDY_L         = $AF0405 ; Destination Pointer within Vicky's video memory Range
=$af0406				VDMA_DST_ADDY_M         = $AF0406 ; ($00_0000 - $3F_0000)
=$af0407				VDMA_DST_ADDY_H         = $AF0407
=$af0408				VDMA_SIZE_L             = $AF0408 ; Maximum Value: $40:0000 (4Megs)
=$af0409				VDMA_SIZE_M             = $AF0409
=$af040a				VDMA_SIZE_H             = $AF040A
=$af040b				VDMA_IGNORED            = $AF040B
=$af0408				VDMA_X_SIZE_L           = $AF0408 ; Maximum Value: 65535
=$af0409				VDMA_X_SIZE_H           = $AF0409
=$af040a				VDMA_Y_SIZE_L           = $AF040A ; Maximum Value: 65535
=$af040b				VDMA_Y_SIZE_H           = $AF040B
=$af040c				VDMA_SRC_STRIDE_L       = $AF040C ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040d				VDMA_SRC_STRIDE_H       = $AF040D ;
=$af040e				VDMA_DST_STRIDE_L       = $AF040E ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040f				VDMA_DST_STRIDE_H       = $AF040F ;
=$af0500				MOUSE_PTR_GRAP0_START    = $AF0500 ; 16 x 16 = 256 Pixels (Grey Scale) 0 = Transparent, 1 = Black , 255 = White
=$af05ff				MOUSE_PTR_GRAP0_END      = $AF05FF ; Pointer 0
=$af0600				MOUSE_PTR_GRAP1_START    = $AF0600 ;
=$af06ff				MOUSE_PTR_GRAP1_END      = $AF06FF ; Pointer 1
=$af0700				MOUSE_PTR_CTRL_REG_L    = $AF0700 ; Bit[0] Enable, Bit[1] = 0  ( 0 = Pointer0, 1 = Pointer1)
=$af0701				MOUSE_PTR_CTRL_REG_H    = $AF0701 ;
=$af0702				MOUSE_PTR_X_POS_L       = $AF0702 ; X Position (0 - 639) (Can only read now) Writing will have no effect
=$af0703				MOUSE_PTR_X_POS_H       = $AF0703 ;
=$af0704				MOUSE_PTR_Y_POS_L       = $AF0704 ; Y Position (0 - 479) (Can only read now) Writing will have no effect
=$af0705				MOUSE_PTR_Y_POS_H       = $AF0705 ;
=$af0706				MOUSE_PTR_BYTE0         = $AF0706 ; Byte 0 of Mouse Packet (you must write 3 Bytes)
=$af0707				MOUSE_PTR_BYTE1         = $AF0707 ; Byte 1 of Mouse Packet (if you don't, then )
=$af0708				MOUSE_PTR_BYTE2         = $AF0708 ; Byte 2 of Mouse Packet (state Machine will be jammed in 1 state)
=$af070b				C256F_MODEL_MAJOR       = $AF070B ;
=$af070c				C256F_MODEL_MINOR       = $AF070C ;
=$af070d				FPGA_DOR                = $AF070D ;
=$af070e				FPGA_MOR                = $AF070E ;
=$af070f				FPGA_YOR                = $AF070F ;
=$af1f40				FG_CHAR_LUT_PTR         = $AF1F40
=$af1f80				BG_CHAR_LUT_PTR		      = $AF1F80
=$af2000				GRPH_LUT0_PTR		        = $AF2000
=$af2400				GRPH_LUT1_PTR		        = $AF2400
=$af2800				GRPH_LUT2_PTR		        = $AF2800
=$af2c00				GRPH_LUT3_PTR		        = $AF2C00
=$af3000				GRPH_LUT4_PTR		        = $AF3000
=$af3400				GRPH_LUT5_PTR		        = $AF3400
=$af3800				GRPH_LUT6_PTR		        = $AF3800
=$af3c00				GRPH_LUT7_PTR		        = $AF3C00
=$af4000				GAMMA_B_LUT_PTR		      = $AF4000
=$af4100				GAMMA_G_LUT_PTR		      = $AF4100
=$af4200				GAMMA_R_LUT_PTR		      = $AF4200
=$af5000				TILE_MAP0       		    = $AF5000     ;$AF5000 - $AF57FF
=$af5800				TILE_MAP1               = $AF5800     ;$AF5800 - $AF5FFF
=$af6000				TILE_MAP2               = $AF6000     ;$AF6000 - $AF67FF
=$af6800				TILE_MAP3               = $AF6800     ;$AF6800 - $AF6FFF
=$af8000				FONT_MEMORY_BANK0       = $AF8000     ;$AF8000 - $AF87FF
=$af8800				FONT_MEMORY_BANK1       = $AF8800     ;$AF8800 - $AF8FFF
=$afa000				CS_TEXT_MEM_PTR         = $AFA000
=$afc000				CS_COLOR_MEM_PTR        = $AFC000
=$afe000				BTX_START               = $AFE000     ; BEATRIX Registers
=$afffff				BTX_END                 = $AFFFFF

;******  Return to file: src\kernel.asm


;******  Processing file: src\super_io_def.asm

=$af1100				PME_STS_REG     = $AF1100
=$af1102				PME_EN_REG		  = $AF1102
=$af1104				PME_STS1_REG		= $AF1104
=$af1105				PME_STS2_REG		= $AF1105
=$af1106				PME_STS3_REG		= $AF1106
=$af1107				PME_STS4_REG		= $AF1107
=$af1108				PME_STS5_REG		= $AF1108
=$af110a				PME_EN1_REG     = $AF110A
=$af110b				PME_EN2_REG     = $AF110B
=$af110c				PME_EN3_REG     = $AF110C
=$af110d				PME_EN4_REG     = $AF110D
=$af110e				PME_EN5_REG     = $AF110E
=$af1110				SMI_STS1_REG		= $AF1110
=$af1111				SMI_STS2_REG		= $AF1111
=$af1112				SMI_STS3_REG		= $AF1112
=$af1113				SMI_STS4_REG		= $AF1113
=$af1114				SMI_STS5_REG		= $AF1114
=$af1116				SMI_EN1_REG     = $AF1116
=$af1117				SMI_EN2_REG     = $AF1117
=$af1118				SMI_EN3_REG     = $AF1118
=$af1119				SMI_EN4_REG     = $AF1119
=$af111a				SMI_EN5_REG     = $AF111A
=$af111c				MSC_ST_REG      = $AF111C
=$af111e				FORCE_DISK_CHANGE       = $AF111E
=$af111f				FLOPPY_DATA_RATE        = $AF111F
=$af1120				UART1_FIFO_CTRL_SHDW    = $AF1120
=$af1121				UART2_FIFO_CTRL_SHDW    = $AF1121
=$af1122				DEV_DISABLE_REG         = $AF1122
=$af1123				GP10_REG    		= $AF1123
=$af1124				GP11_REG    		= $AF1124
=$af1125				GP12_REG    		= $AF1125
=$af1126				GP13_REG    		= $AF1126
=$af1127				GP14_REG    		= $AF1127
=$af1128				GP15_REG    		= $AF1128
=$af1129				GP16_REG    		= $AF1129
=$af112a				GP17_REG    		= $AF112A
=$af112b				GP20_REG    		= $AF112B
=$af112c				GP21_REG    		= $AF112C
=$af112d				GP22_REG		= $AF112D
=$af112f				GP24_REG		= $AF112F
=$af1130				GP25_REG		= $AF1130
=$af1131				GP26_REG		= $AF1131
=$af1132				GP27_REG		= $AF1132
=$af1133				GP30_REG		= $AF1133
=$af1134				GP31_REG		= $AF1134
=$af1135				GP32_REG		= $AF1135
=$af1136				GP33_REG		= $AF1136
=$af1137				GP34_REG		= $AF1137
=$af1138				GP35_REG		= $AF1138
=$af1139				GP36_REG		= $AF1139
=$af113a				GP37_REG		= $AF113A
=$af113b				GP40_REG		= $AF113B
=$af113c				GP41_REG		= $AF113C
=$af113d				GP42_REG		= $AF113D
=$af113e				GP43_REG		= $AF113E
=$af113f				GP50_REG		= $AF113F
=$af1140				GP51_REG		= $AF1140
=$af1141				GP52_REG		= $AF1141
=$af1142				GP53_REG		= $AF1142
=$af1143				GP54_REG		= $AF1143
=$af1144				GP55_REG		= $AF1144
=$af1145				GP56_REG		= $AF1145
=$af1146				GP57_REG		= $AF1146
=$af1147				GP60_REG		= $AF1147
=$af1148				GP61_REG		= $AF1148
=$af114b				GP1_REG			= $AF114B
=$af114c				GP2_REG			= $AF114C
=$af114d				GP3_REG			= $AF114D
=$af114e				GP4_REG			= $AF114E
=$af114f				GP5_REG			= $AF114F
=$af1150				GP6_REG			= $AF1150
=$af1156				FAN1_REG		        = $AF1156
=$af1157				FAN2_REG            = $AF1157
=$af1158				FAN_CTRL_REG  	    = $AF1158
=$af1159				FAN1_TACH_REG       = $AF1159
=$af115a				FAN2_TACH_REG       = $AF115A
=$af115b				FAN1_PRELOAD_REG    = $AF115B
=$af115c				FAN2_PRELOAD_REG    = $AF115C
=$af115d				LED1_REG    		    = $AF115D
=$af115e				LED2_REG    		    = $AF115E
=$af115f				KEYBOARD_SCAN_CODE	= $AF115F

;******  Return to file: src\kernel.asm


;******  Processing file: src\keyboard_def.asm

=$af1064				STATUS_PORT 	= $AF1064
=$af1060				KBD_OUT_BUF 	= $AF1060
=$af1060				KBD_INPT_BUF	= $AF1060
=$af1064				KBD_CMD_BUF		= $AF1064
=$af1060				KBD_DATA_BUF	= $AF1060
=$af1060				PORT_A		    = $AF1060
=$af1061				PORT_B			= $AF1061
=$01					OUT_BUF_FULL    = $01
=$02					INPT_BUF_FULL	= $02
=$04					SYS_FLAG		= $04
=$08					CMD_DATA		= $08
=$10					KEYBD_INH       = $10
=$20					TRANS_TMOUT	    = $20
=$40					RCV_TMOUT		= $40
=$80					PARITY_EVEN		= $80
=$10					INH_KEYBOARD	= $10
=$ae					KBD_ENA			= $AE
=$ad					KBD_DIS			= $AD
=$f1					KB_MENU			= $F1
=$f4					KB_ENABLE		= $F4
=$f7					KB_MAKEBREAK    = $F7
=$fe					KB_ECHO			= $FE
=$ff					KB_RESET		= $FF
=$ed					KB_LED_CMD		= $ED
=$aa					KB_OK			= $AA
=$fa					KB_ACK			= $FA
=$ff					KB_OVERRUN		= $FF
=$fe					KB_RESEND		= $FE
=$f0					KB_BREAK		= $F0
=$10					KB_FA			= $10
=$20					KB_FE			= $20
=$40					KB_PR_LED		= $40
=$01					KB_SCROLL_LOCK  = $01
=$02					KB_NUM_LOCK     = $02
=$04					KB_CAPS_LOCK    = $04
=$80					KB_CTRL_C = $80             ; CTRL-C was pressed
=$60					KB_CREDITS = $60            ; Credits key was pressed

;******  Return to file: src\kernel.asm


;******  Processing file: src\SID_def.asm

=$afe400				SID0_V1_FREQ_LO    = $AFE400 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$afe401				SID0_V1_FREQ_HI    = $AFE401 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$afe402				SID0_V1_PW_LO      = $AFE402 ;SID - L - Voice 1 (Write Only) - PW LOW
=$afe403				SID0_V1_PW_HI      = $AFE403 ;SID - L - Voice 1 (Write Only) - PW HI
=$afe404				SID0_V1_CTRL       = $AFE404 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$afe405				SID0_V1_ATCK_DECY  = $AFE405 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$afe406				SID0_V1_SSTN_RLSE  = $AFE406 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$afe407				SID0_V2_FREQ_LO    = $AFE407 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$afe408				SID0_V2_FREQ_HI    = $AFE408 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$afe409				SID0_V2_PW_LO      = $AFE409 ;SID - L - Voice 2 (Write Only) - PW LOW
=$afe40a				SID0_V2_PW_HI      = $AFE40A ;SID - L - Voice 2 (Write Only) - PW HI
=$afe40b				SID0_V2_CTRL       = $AFE40B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$afe40c				SID0_V2_ATCK_DECY  = $AFE40C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$afe40d				SID0_V2_SSTN_RLSE  = $AFE40D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$afe40e				SID0_V3_FREQ_LO    = $AFE40E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$afe40f				SID0_V3_FREQ_HI    = $AFE40F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$afe410				SID0_V3_PW_LO      = $AFE410 ;SID - L - Voice 3 (Write Only) - PW LOW
=$afe411				SID0_V3_PW_HI      = $AFE411 ;SID - L - Voice 3 (Write Only) - PW HI
=$afe412				SID0_V3_CTRL       = $AFE412 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$afe413				SID0_V3_ATCK_DECY  = $AFE413 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$afe414				SID0_V3_SSTN_RLSE  = $AFE414 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$afe415				SID0_FC_LO         = $AFE415 ;SID - L - Filter (Write Only) - FC LOW
=$afe416				SID0_FC_HI         = $AFE416 ;SID - L - Filter (Write Only) - FC HI
=$afe417				SID0_RES_FILT      = $AFE417 ;SID - L - Filter (Write Only) - RES / FILT
=$afe418				SID0_MODE_VOL      = $AFE418 ;SID - L - Filter (Write Only) - MODE / VOL
=$afe419				SID0_POT_X         = $AFE419 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$afe41a				SID0_POT_Y         = $AFE41A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$afe41b				SID0_OSC3_RND      = $AFE41B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$afe41c				SID0_ENV3          = $AFE41C ;SID - L - Misc (Read Only)  - ENV3
=$afe41d				SID0_NOT_USED0     = $AFE41D ;SID - L - NOT USED
=$afe41e				SID0_NOT_USED1     = $AFE41E ;SID - L - NOT USED
=$afe41f				SID0_NOT_USED2     = $AFE41F ;SID - L - NOT USED

;******  Return to file: src\kernel.asm


;******  Processing file: src\RTC_def.asm

=$af0800				RTC_SEC       = $AF0800 ;Seconds Register
=$af0801				RTC_SEC_ALARM = $AF0801 ;Seconds Alarm Register
=$af0802				RTC_MIN       = $AF0802 ;Minutes Register
=$af0803				RTC_MIN_ALARM = $AF0803 ;Minutes Alarm Register
=$af0804				RTC_HRS       = $AF0804 ;Hours Register
=$af0805				RTC_HRS_ALARM = $AF0805 ;Hours Alarm Register
=$af0806				RTC_DAY       = $AF0806 ;Day Register
=$af0807				RTC_DAY_ALARM = $AF0807 ;Day Alarm Register
=$af0808				RTC_DOW       = $AF0808 ;Day of Week Register
=$af0809				RTC_MONTH     = $AF0809 ;Month Register
=$af080a				RTC_YEAR      = $AF080A ;Year Register
=$af080b				RTC_RATES     = $AF080B ;Rates Register
=$af080c				RTC_ENABLE    = $AF080C ;Enables Register
=$af080d				RTC_FLAGS     = $AF080D ;Flags Register
=$af080e				RTC_CTRL      = $AF080E ;Control Register
=$af080f				RTC_CENTURY   = $AF080F ;Century Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\io_def.asm

=0					CHAN_CONSOLE  = 0           ; ID for screen and keyboard access
=1					CHAN_COM1     = 1           ; ID for serial access on COM1 (external port)
=2					CHAN_COM2     = 2           ; ID for serial access on COM2 (internal port)
=3					CHAN_LPT      = 3           ; ID for parallel port
=$afe810				SDCARD_DATA   = $AFE810     ;(R/W) SDCARD (CH376S) Data PORT_A (A0 = 0)
=$afe811				SDCARD_CMD    = $AFE811     ;(R/W) SDCARD (CH376S) CMD/STATUS Port (A0 = 1)
=$afe812				SDCARD_STAT   = $AFE812     ;(R) SDCARD (Bit[0] = CD, Bit[1] = WP)
=$afe900				CODEC_DATA_LO = $AFE900     ;(W) LSB of Add/Data Reg to Control CODEC See WM8776 Spec
=$afe901				CODEC_DATA_HI = $AFE901     ;(W) MSB od Add/Data Reg to Control CODEC See WM8776 Spec
=$afe902				CODEC_WR_CTRL = $AFE902     ;(W) Bit[0] = 1 -> Start Writing the CODEC Control Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\Trinity_CFP9301_def.asm

=$afe800				JOYSTICK0           = $AFE800   ;(R) Joystick 0 - J7 (next to SD Card)
=$afe801				JOYSTICK1           = $AFE801   ;(R) Joystick 1 - J8
=$afe802				JOYSTICK2           = $AFE802   ;(R) Joystick 2 - J9
=$afe803				JOYSTICK3           = $AFE803   ;(R) Joystick 3 - J10 (Next to Buzzer)
=$afe804				JOYSTICK_MODE       = $AFE804
=$01					NES_SNES_EN0        = $01       ; Enable the NES/SNES Mode on Port 0
=$02					NES_SNES_EN1        = $02       ; Enable the NES/SNES Mode on Port 1
=$04					NES_SNES_JOY        = $04       ; 0 = NES, 1 = SNES
=$40					NES_SNES_DONE       = $40       ; Poll to see if the Deserializer is done
=$80					NES_SNES_TRIG       = $80       ; Set to start the Serializer
=$afe805				REVOFPCB_C          = $AFE805   ; You should read the ASCCII for "C"
=$afe806				REVOFPCB_4          = $AFE806   ; You should read the ASCCII for "4"
=$afe807				REVOFPCB_A          = $AFE807   ; You should read the ASCCII for "A"
=$afe808				NES_SNES0_DAT_LO    = $AFE808   ; Contains the 8bits From NES and SNES
=$afe809				SNES0_DAT_HI0       = $AFE809   ; Contains the extra 4 bit from the SNES Controller
=$afe80a				NES_SNES1_DAT_LO    = $AFE80A
=$afe80b				SNES1_DAT_HI0       = $AFE80B
=$afe80c				CFP9301_REV         = $AFE80C   ; Hardware Revision of the CPLD Code
=$afe80d				DIP_USER            = $AFE80D   ; Dip Switch 3/4/5 can be user Defined
=$afe80e				DIP_BOOTMODE        = $AFE80E
=$01					BOOT_MODE0          = $01
=$02					BOOT_MODE1          = $02
=$80					HD_INSTALLED        = $80
=$00					DIP_BOOT_IDE        = $00
=$01					DIP_BOOT_SDCARD     = $01
=$02					DIP_BOOT_FLOPPY     = $02
=$03					DIP_BOOT_BASIC      = $03

;******  Return to file: src\kernel.asm


;******  Processing file: src\Unity_CFP9307_def.asm

=$afe830				IDE_DATA      = $AFE830 ; 8Bit Access here Only
=$afe831				IDE_ERROR     = $AFE831 ; Error Information register (only read when there is an error ) - Probably clears Error Bits
=$afe832				IDE_SECT_CNT  = $AFE832 ; Sector Count Register (also used to pass parameter for timeout for IDLE modus Command)
=$afe833				IDE_SECT_SRT  = $AFE833 ; Start Sector Register (0 = 256), so start @ 1
=$afe834				IDE_CLDR_LO   = $AFE834 ; Low Byte of Cylinder Numnber {7:0}
=$afe835				IDE_CLDR_HI   = $AFE835 ;  Hi Byte of Cylinder Number {9:8} (1023-0).
=$afe836				IDE_HEAD      = $AFE836 ; Head, device select, {3:0} HEad Number, 4 -> 0:Master, 1:Slave, {7:5} = 101 (legacy);
=$afe837				IDE_CMD_STAT  = $AFE837 ; Command/Status Register - Reading this will clear the Interrupt Registers
=$afe838				IDE_DATA_LO   = $AFE838 ; The 16Bits Buffer is LITTLE ENDIAN, the 65C816 is BIG ENDIAN, but UNITY does the conversion
=$afe839				IDE_DATA_HI   = $AFE839 ;

;******  Return to file: src\kernel.asm


;******  Processing file: src\GABE_Control_Registers_def.asm

=$afe880				GABE_MSTR_CTRL      = $AFE880
=$01					GABE_CTRL_PWR_LED   = $01     ; Controls the LED in the Front of the case (Next to the reset button)
=$02					GABE_CTRL_SDC_LED   = $02     ; Controls the LED in the Front of the Case (Next to SDCard)
=$10					GABE_CTRL_BUZZER    = $10     ; Controls the Buzzer
=$80					GABE_CTRL_WRM_RST   = $80     ; Warm Reset (needs to Setup other registers)
=$afe881				GABE_NOTUSED        = $AFE881 ; Reserved for future use
=$afe882				GABE_RST_AUTH0      = $AFE882 ; Must Contain the BYTE $AD for Reset to Activate
=$afe883				GABE_RST_AUTH1      = $AFE883 ; Must Contain the BYTE $DE for Reset to Activate
=$afe884				GABE_RNG_DAT_LO     = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885				GABE_RNG_DAT_HI     = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe884				GABE_RNG_SEED_LO    = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885				GABE_RNG_SEED_HI    = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe886				GABE_RNG_STAT       = $AFE886 ;
=$80					GABE_RNG_LFSR_DONE  = $80     ; indicates that Output = SEED Database
=$afe886				GABE_RNG_CTRL       = $AFE886 ;
=$01					GABE_RNG_CTRL_EN    = $01     ; Enable the LFSR BLOCK_LEN
=$02					GABE_RNG_CTRL_DV    = $02     ; After Setting the Seed Value, Toggle that Bit for it be registered
=$afe887				GABE_SYS_STAT       = $AFE887 ;
=$01					GABE_SYS_STAT_MID0  = $01     ; Machine ID -- LSB
=$02					GABE_SYS_STAT_MID1  = $02     ; Machine ID -- MSB
=$08					GABE_SYS_STAT_EXP   = $08     ; if Zero, there is an Expansion Card Preset
=$40					GABE_SYS_STAT_CPUA  = $40     ; Indicates the (8bit/16bit) Size of the Accumulator
=$80					GABE_SYS_STAT_CPUX  = $80     ; Indicates the (8bit/16bit) Size of the Accumulator

;******  Return to file: src\kernel.asm


;******  Processing file: src\basic_inc.asm

=$3a0000				BASIC = $3A0000
=3801092				MONITOR = BASIC + 4

;******  Return to file: src\kernel.asm


;******  Processing file: src\kernel_jumptable.asm

.381000	5c 00 04 39	jmp $390400	BOOT            JML IBOOT
.381004	5c 70 14 39	jmp $391470	RESTORE         JML IRESTORE
.381008	5c 8b 05 39	jmp $39058b	BREAK           JML IBREAK
.38100c	5c d2 05 39	jmp $3905d2	READY           JML IREADY
.381010	5c 71 14 39	jmp $391471	SCINIT          JML ISCINIT
.381014	5c 72 14 39	jmp $391472	IOINIT          JML IIOINIT
.381018	5c 4f 06 39	jmp $39064f	PUTC            JML IPUTC
.38101c	5c 38 06 39	jmp $390638	PUTS            JML IPUTS
.381020	5c 74 07 39	jmp $390774	PUTB            JML IPUTB
.381024	5c 73 14 39	jmp $391473	PUTBLOCK        JML IPUTBLOCK
.381028	5c 74 14 39	jmp $391474	SETLFS          JML ISETLFS
.38102c	5c 75 14 39	jmp $391475	SETNAM          JML ISETNAM
.381030	5c 76 14 39	jmp $391476	OPEN            JML IOPEN
.381034	5c 77 14 39	jmp $391477	CLOSE           JML ICLOSE
.381038	5c ed 05 39	jmp $3905ed	SETIN           JML ISETIN
.38103c	5c f6 05 39	jmp $3905f6	SETOUT          JML ISETOUT
.381040	5c 78 14 39	jmp $391478	GETB            JML IGETB
.381044	5c 79 14 39	jmp $391479	GETBLOCK        JML IGETBLOCK
.381048	5c 7a 14 39	jmp $39147a	GETCH           JML IGETCH
.38104c	5c 08 06 39	jmp $390608	GETCHW          JML IGETCHW
.381050	5c ff 05 39	jmp $3905ff	GETCHE          JML IGETCHE
.381054	5c 7b 14 39	jmp $39147b	GETS            JML IGETS
.381058	5c 7c 14 39	jmp $39147c	GETLINE         JML IGETLINE
.38105c	5c 7d 14 39	jmp $39147d	GETFIELD        JML IGETFIELD
.381060	5c 7e 14 39	jmp $39147e	TRIM            JML ITRIM
.381064	5c 7f 14 39	jmp $39147f	PRINTC          JML IPRINTC
.381068	5c 80 14 39	jmp $391480	PRINTS          JML IPRINTS
.38106c	5c 75 07 39	jmp $390775	PRINTCR         JML IPRINTCR
.381070	5c 81 14 39	jmp $391481	PRINTF          JML IPRINTF
.381074	5c 82 14 39	jmp $391482	PRINTI          JML IPRINTI
.381078	5c f4 08 39	jmp $3908f4	PRINTH          JML IPRINTH
.38107c	5c 83 14 39	jmp $391483	PRINTAI         JML IPRINTAI
.381080	5c 11 09 39	jmp $390911	PRINTAH         JML IPRINTAH
.381084	5c 5f 08 39	jmp $39085f	LOCATE          JML ILOCATE
.381088	5c 84 14 39	jmp $391484	PUSHKEY         JML IPUSHKEY
.38108c	5c 85 14 39	jmp $391485	PUSHKEYS        JML IPUSHKEYS
.381090	5c bb 07 39	jmp $3907bb	CSRRIGHT        JML ICSRRIGHT
.381094	5c ee 07 39	jmp $3907ee	CSRLEFT         JML ICSRLEFT
.381098	5c 14 08 39	jmp $390814	CSRUP           JML ICSRUP
.38109c	5c 3a 08 39	jmp $39083a	CSRDOWN         JML ICSRDOWN
.3810a0	5c aa 07 39	jmp $3907aa	CSRHOME         JML ICSRHOME
.3810a4	5c ab 08 39	jmp $3908ab	SCROLLUP        JML ISCROLLUP
.3810a8	5c 5f 09 39	jmp $39095f	CLRSCREEN       JML ICLRSCREEN
.3810ac	5c 2a 0a 39	jmp $390a2a	INITCHLUT	    JML IINITCHLUT
.3810b0	5c eb 0d 39	jmp $390deb	INITSUPERIO	    JML IINITSUPERIO
.3810b4	5c ea 0e 39	jmp $390eea	INITKEYBOARD    JML IINITKEYBOARD
.3810b8	5c 46 10 39	jmp $391046	TESTSID         JML ITESTSID
.3810bc	5c ca 0d 39	jmp $390dca	INITCURSOR      JML IINITCURSOR
.3810c0	5c 80 0d 39	jmp $390d80	INITFONTSET     JML IINITFONTSET
.3810c4	5c 59 0a 39	jmp $390a59	INITGAMMATABLE  JML IINITGAMMATABLE
.3810c8	5c 79 0a 39	jmp $390a79	INITALLLUT      JML IINITALLLUT
.3810cc	5c 3b 0b 39	jmp $390b3b	INITVKYTXTMODE  JML IINITVKYTXTMODE
.3810d0	5c 0b 0c 39	jmp $390c0b	INITVKYGRPMODE  JML IINITVKYGRPMODE
.3810d4	5c 42 0c 39	jmp $390c42	INITTILEMODE    JML IINITTILEMODE
.3810d8	5c 43 0c 39	jmp $390c43	INITSPRITE      JML IINITSPRITE
.3810dc	5c 36 11 39	jmp $391136	INITCODEC       JML IINITCODEC
.3810e0	5c b2 11 39	jmp $3911b2	RESETCODEC      JML IRESETCODEC
.3810e4	5c 20 12 39	jmp $391220	BMP_PARSER      JML IBMP_PARSER
.3810e8	5c d5 11 39	jmp $3911d5	BM_FILL_SCREEN  JML IBM_FILL_SCREEN
.3810ec	5c 41 37 38	jmp $383741	OPL2_TONE_TEST  JML IOPL2_TONE_TEST
.3810f0	5c 74 0b 39	jmp $390b74	SETSIZES        JML ISETSIZES

;******  Return to file: src\kernel.asm


;******  Processing file: src\Interrupt_Handler.asm

.3810f4					IRQ_HANDLER
.3810f4	e2 20		sep #$20	                SEP #$20        ; set A short
.3810f6	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.3810fa	c9 00		cmp #$00	                CMP #$00
.3810fc	f0 37		beq $381135	                BEQ CHECK_PENDING_REG1
.3810fe	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381102	29 01		and #$01	                AND #FNX0_INT00_SOF
.381104	c9 01		cmp #$01	                CMP #FNX0_INT00_SOF
.381106	d0 09		bne $381111	                BNE SERVICE_NEXT_IRQ6
.381108	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.38110c	20 9f 11	jsr $38119f	                JSR SOF_INTERRUPT
.38110f	e2 20		sep #$20	                SEP #$20        ; set A short
.381111					SERVICE_NEXT_IRQ6
.381111	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381115	29 40		and #$40	                AND #FNX0_INT06_FDC
.381117	c9 40		cmp #$40	                CMP #FNX0_INT06_FDC
.381119	d0 09		bne $381124	                BNE SERVICE_NEXT_IRQ7
.38111b	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.38111f	20 eb 11	jsr $3811eb	                JSR FDC_INTERRUPT
.381122	e2 20		sep #$20	                SEP #$20        ; set A short
.381124					SERVICE_NEXT_IRQ7
.381124	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381128	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.38112a	c9 80		cmp #$80	                CMP #FNX0_INT07_MOUSE
.38112c	d0 07		bne $381135	                BNE CHECK_PENDING_REG1
.38112e	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381132	20 aa 11	jsr $3811aa	                JSR MOUSE_INTERRUPT
.381135					CHECK_PENDING_REG1
.381135	e2 20		sep #$20	                SEP #$20        ; set A short
.381137	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.38113b	c9 00		cmp #$00	                CMP #$00
.38113d	f0 5d		beq $38119c	                BEQ EXIT_IRQ_HANDLE
.38113f					SERVICE_NEXT_IRQ8
.38113f	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381143	29 01		and #$01	                AND #FNX1_INT00_KBD
.381145	c9 01		cmp #$01	                CMP #FNX1_INT00_KBD
.381147	d0 09		bne $381152	                BNE SERVICE_NEXT_IRQ11
.381149	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.38114d	20 69 41	jsr $384169	                JSR KEYBOARD_INTERRUPT
.381150	e2 20		sep #$20	                SEP #$20        ; set A short
.381152					SERVICE_NEXT_IRQ11
.381152	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381156	29 08		and #$08	                AND #FNX1_INT03_COM2
.381158	c9 08		cmp #$08	                CMP #FNX1_INT03_COM2
.38115a	d0 09		bne $381165	                BNE SERVICE_NEXT_IRQ12
.38115c	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.381160	20 f6 11	jsr $3811f6	                JSR COM2_INTERRUPT
.381163	e2 20		sep #$20	                SEP #$20        ; set A short
.381165					SERVICE_NEXT_IRQ12
.381165	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381169	29 10		and #$10	                AND #FNX1_INT04_COM1
.38116b	c9 10		cmp #$10	                CMP #FNX1_INT04_COM1
.38116d	d0 09		bne $381178	                BNE SERVICE_NEXT_IRQ13
.38116f	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.381173	20 01 12	jsr $381201	                JSR COM1_INTERRUPT
.381176	e2 20		sep #$20	                SEP #$20        ; set A short
.381178					SERVICE_NEXT_IRQ13
.381178	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.38117c	29 20		and #$20	                AND #FNX1_INT05_MPU401
.38117e	c9 20		cmp #$20	                CMP #FNX1_INT05_MPU401
.381180	d0 09		bne $38118b	                BNE SERVICE_NEXT_IRQ14
.381182	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.381186	20 0c 12	jsr $38120c	                JSR MPU401_INTERRUPT
.381189	e2 20		sep #$20	                SEP #$20        ; set A short
.38118b					SERVICE_NEXT_IRQ14
.38118b	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.38118f	29 40		and #$40	                AND #FNX1_INT06_LPT
.381191	c9 40		cmp #$40	                CMP #FNX1_INT06_LPT
.381193	d0 07		bne $38119c	                BNE EXIT_IRQ_HANDLE
.381195	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.381199	20 17 12	jsr $381217	                JSR LPT1_INTERRUPT
.38119c					EXIT_IRQ_HANDLE
.38119c	c2 30		rep #$30	                REP #$30        ; set A&X long
.38119e	6b		rtl		                RTL
.38119f					SOF_INTERRUPT
.38119f	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.3811a3	29 01		and #$01	                AND #FNX0_INT00_SOF
.3811a5	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.3811a9	60		rts		                RTS
.3811aa					MOUSE_INTERRUPT
.3811aa	e2 20		sep #$20	                SEP #$20        ; set A short
.3811ac	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.3811b0	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.3811b2	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.3811b6	af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF
.3811ba	a2 00 00	ldx #$0000	                LDX #$0000
.3811bd	e2 10		sep #$10	                SEP #$10        ; set X short
.3811bf	a6 e0		ldx $e0		                LDX MOUSE_PTR
.3811c1	9f 06 07 af	sta $af0706,x	                STA @lMOUSE_PTR_BYTE0, X
.3811c5	e8		inx		                INX
.3811c6	e0 03		cpx #$03	                CPX #$03
.3811c8	d0 1c		bne $3811e6	                BNE EXIT_FOR_NEXT_VALUE
.3811ca	af 02 07 af	lda $af0702	                LDA @lMOUSE_PTR_X_POS_L
.3811ce	85 e1		sta $e1		                STA MOUSE_POS_X_LO
.3811d0	af 03 07 af	lda $af0703	                LDA @lMOUSE_PTR_X_POS_H
.3811d4	85 e2		sta $e2		                STA MOUSE_POS_X_HI
.3811d6	af 04 07 af	lda $af0704	                LDA @lMOUSE_PTR_Y_POS_L
.3811da	85 e3		sta $e3		                STA MOUSE_POS_Y_LO
.3811dc	af 05 07 af	lda $af0705	                LDA @lMOUSE_PTR_Y_POS_H
.3811e0	85 e4		sta $e4		                STA MOUSE_POS_Y_HI
.3811e2	e2 20		sep #$20	                SEP #$20        ; set A short
.3811e4	a2 00		ldx #$00	                LDX #$00
.3811e6					EXIT_FOR_NEXT_VALUE
.3811e6	86 e0		stx $e0		                STX MOUSE_PTR
.3811e8	c2 10		rep #$10	                REP #$10        ; set X long
.3811ea	60		rts		                RTS
.3811eb					FDC_INTERRUPT
.3811eb	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.3811ef	29 40		and #$40	                AND #FNX0_INT06_FDC
.3811f1	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.3811f5	60		rts		                RTS
.3811f6					COM2_INTERRUPT
.3811f6	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3811fa	29 08		and #$08	                AND #FNX1_INT03_COM2
.3811fc	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.381200	60		rts		                RTS
.381201					COM1_INTERRUPT
.381201	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381205	29 10		and #$10	                AND #FNX1_INT04_COM1
.381207	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.38120b	60		rts		                RTS
.38120c					MPU401_INTERRUPT
.38120c	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381210	29 20		and #$20	                AND #FNX1_INT05_MPU401
.381212	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.381216	60		rts		                RTS
.381217					LPT1_INTERRUPT
.381217	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.38121b	29 40		and #$40	                AND #FNX1_INT06_LPT
.38121d	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.381221	60		rts		                RTS
.381222					NMI_HANDLER
.381222	6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\SDOS.asm


;******  Processing file: src\ch376s_inc.asm

=$00					DEF_NULL_CHAR           = $00
=$2a					DEF_WILDCARD_CHAR       = $2A
=$5c					DEF_SEPAR_CHAR1         = $5C
=$2f					DEF_SEPAR_CHAR2         = $2F
=$06					CH_CMD_CHECK_EXIST      = $06
=$0c					CH_CMD_GET_FILE_SIZE    = $0C
=$15					CH_CMD_SET_MODE         = $15     ; Set the Controller's mode, in our Case in SDCARD
=$22					CH_CMD_GET_STATUS       = $22     ; Get Interrupt Status
=$27					CH_CMD_RD_DATA0         = $27     ;
=$2c					CH_CMD_WR_DATA          = $2C
=$2f					CH_CMD_SET_FILENAME     = $2F     ;SET_FILE_NAME
=$31					CH_CMD_DISK_MOUNT       = $31     ;DISK_MOUNT
=$32					CH_CMD_FILE_OPEN        = $32     ;FILE_OPEN
=$33					CH_CMD_FILE_ENUM_GO     = $33
=$36					CH_CMD_FILE_CLOSE       = $36     ; To be Implemented
=$39					CH_CMD_BYTE_LOCATE      = $39
=$3a					CH_CMD_BYTE_READ        = $3A
=$3b					CH_CMD_BYTE_RD_GO       = $3B
=$3c					CH_CMD_BYTE_WRITE       = $3C
=$3d					CH_CMD_BYTE_WR_GO       = $3D
=$44					CH_VAR_DISK_ROOT		= $44
=$48					CH_VAR_DSK_TOTAL_CLUS	= $48
=$4c					CH_VAR_DSK_START_LBA	= $4C
=$50					CH_VAR_DSK_DAT_START	= $50
=$54					CH_VAR_LBA_BUFFER		= $54
=$58					CH_VAR_LBA_CURRENT		= $58
=$5c					CH_VAR_FAT_DIR_LBA		= $5C
=$60					CH_VAR_START_CLUSTER	= $60
=$64					CH_VAR_CURRENT_CLUST	= $64
=$68					CH_VAR_FILE_SIZE		= $68
=$6c					CH_VAR_CURRENT_OFFSET	= $6C
=$14					CH376S_STAT_SUCCESS     = $14
=$17					CH376S_STAT_BUF_OVF     = $17
=$1d					CH376S_STAT_DSK_RD      = $1D
=$1e					CH376S_STAT_DSK_WR      = $1E
=$41					CH376S_ERR_OPEN_DIR     = $41
=$42					CH376S_ERR_MISS_FIL     = $42
=$43					CH376S_ERR_FOUND_NAME   = $43
=$82					CH376S_ERR_DISK_DSC     = $82
=$84					CH376S_ERR_LRG_SEC      = $84
=$92					CH376S_ERR_PARTTION     = $92
=$a1					CH376S_ERR_NOT_FORM     = $A1
=$b1					CH376S_ERR_DSK_FULL     = $B1
=$b2					CH376S_FDT_OVER         = $B2
=$b4					CH376S_FILE_CLOSED      = $B4
=$51					CH376S_CMD_RET_SUCCESS  = $51
=$5f					CH376S_CMD_RET_ABORT    = $5F
=$00					SDCARD_PRSNT_NO_CARD    = $00
=$01					SDCARD_PRSNT_CD         = $01
=$02					SDCARD_PRSNT_WP         = $02
=$04					SDCARD_PRSNT_MNTED      = $04  ; Card is present and Mounted1

;******  Return to file: src\SDOS.asm

.0000					fatrec
>0000					  name      .fill 8
>0008					  extension .fill 3
>000b	01				  type      .byte 1
>000c					  reserved  .fill 16
>001c	00 00				  size_l    .word 0
>001e	00 00				  size_h    .word 0
.0000					simplefilestruct
>0000					  name      .fill 8
>0008					  extension .fill 3
>000b	01				  type      .byte 1
>000c	00 00				  size_l    .word 0
>000e	00 00				  size_h    .word 0
.381223	5c 3a 14 38	jmp $38143a	SDOS_CHECK_CD JML ISDOS_CHK_CD ; Check if Card is Present
.381227	5c 49 14 38	jmp $381449	SDOS_CHECK_WP JML ISDOS_CHK_WP ; Check if Card is Write Protected
.38122b	5c 43 12 38	jmp $381243	SDOS_INIT     JML ISDOS_INIT
.38122f	5c d3 12 38	jmp $3812d3	SDOS_DIR      JML ISDOS_DIR
.381233	5c 50 13 38	jmp $381350	SDOS_CHDIR    JML ISDOS_CHDIR
.381237	5c 56 14 38	jmp $381456	SDOS_LOAD     JML ISDOS_READ_FILE
.38123b	5c 51 13 38	jmp $381351	SDOS_SAVE     JML ISDOS_SAVE
.38123f	5c 52 13 38	jmp $381352	SDOS_EXEC     JML ISDOS_EXEC
.381243	48		pha		ISDOS_INIT    PHA
.381244	da		phx		              PHX
.381245	5a		phy		              PHY
.381246	08		php		              PHP
.381247	0b		phd		              PHD
.381248	48		pha		                PHA             ; begin setdp macro
.381249	08		php		                PHP
.38124a	c2 20		rep #$20	                REP #$20        ; set A long
.38124c	a9 20 03	lda #$0320	                LDA #SDOS_BLOCK_BEGIN         ; set DP to page 0
.38124f	5b		tcd		                TCD
.381250	28		plp		                PLP
.381251	68		pla		                PLA             ; end setdp macro
.381252	e2 20		sep #$20	                SEP #$20        ; set A short
.381254	af 41 01 00	lda $000141	              LDA @lINT_PENDING_REG1    ; Read the Pending Register &
.381258	29 7f		and #$7f	              AND #~FNX1_INT07_SDCARD   ; Enable
.38125a	8f 41 01 00	sta $000141	              STA @lINT_PENDING_REG1
.38125e	a9 06		lda #$06	              LDA #CH_CMD_CHECK_EXIST
.381260	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD
.381264	20 0b 14	jsr $38140b	              JSR DLYCMD_2_DTA
.381267	a9 a8		lda #$a8	              LDA #$A8
.381269	8f 10 e8 af	sta $afe810	              STA SDCARD_DATA
.38126d					    CHK_LOOP
.38126d	20 10 14	jsr $381410	              JSR DLYDTA_2_DTA
.381270	20 10 14	jsr $381410	              JSR DLYDTA_2_DTA
.381273	20 10 14	jsr $381410	              JSR DLYDTA_2_DTA
.381276	af 10 e8 af	lda $afe810	              LDA SDCARD_DATA  ; the data returned must be the complement
.38127a	c9 57		cmp #$57	              CMP #~$A8;  $57
.38127c	d0 ef		bne $38126d	              BNE CHK_LOOP
.38127e	20 0b 14	jsr $38140b	              JSR DLYCMD_2_DTA
.381281	a9 15		lda #$15	              LDA #CH_CMD_SET_MODE
.381283	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD
.381287	20 0b 14	jsr $38140b	              JSR DLYCMD_2_DTA
.38128a	20 0b 14	jsr $38140b	              JSR DLYCMD_2_DTA
.38128d	a9 03		lda #$03	              LDA #$03            ; Mode 3 - SDCARD
.38128f	8f 10 e8 af	sta $afe810	              STA SDCARD_DATA     ; Write the MODE and Wait for around ~10us
.381293					    ISDOS_WAIT_FOR_MODE_SW
.381293	20 10 14	jsr $381410	              JSR DLYDTA_2_DTA ; Wait 0.6us
.381296	af 10 e8 af	lda $afe810	              LDA SDCARD_DATA
.38129a	c9 51		cmp #$51	              CMP #$51         ; CMD_RET_SUCCESS = 051H, CMD_RET_ABORT = 05FH
.38129c	f0 06		beq $3812a4	              BEQ CHK_SET_OK
.38129e	c9 5f		cmp #$5f	              CMP #$5F
.3812a0	f0 09		beq $3812ab	              BEQ CHK_SET_NOK
.3812a2	d0 ef		bne $381293	              BNE ISDOS_WAIT_FOR_MODE_SW
.3812a4					    CHK_SET_OK
.3812a4	a9 01		lda #$01	              LDA #SDCARD_PRSNT_CD
.3812a6	8d 3f 00	sta $003f	              STA SDCARD_PRSNT_MNT
.3812a9	80 07		bra $3812b2	              BRA SD_INIT_DONE
.3812ab					    CHK_SET_NOK
.3812ab	a9 00		lda #$00	              LDA #SDCARD_PRSNT_NO_CARD
.3812ad	8d 3f 00	sta $003f	              STA SDCARD_PRSNT_MNT
.3812b0	80 00		bra $3812b2	              BRA SD_INIT_DONE
.3812b2					    SD_INIT_DONE
.3812b2	2b		pld		              PLD
.3812b3	28		plp		              PLP
.3812b4	7a		ply		              PLY
.3812b5	fa		plx		              PLX
.3812b6	68		pla		              PLA
.3812b7	6b		rtl		              RTL
.3812b8					ISDOS_CLEAR_FAT_REC
.3812b8	0b		phd		              PHD
.3812b9	48		pha		                PHA             ; begin setdp macro
.3812ba	08		php		                PHP
.3812bb	c2 20		rep #$20	                REP #$20        ; set A long
.3812bd	a9 20 03	lda #$0320	                LDA #SDOS_BLOCK_BEGIN         ; set DP to page 0
.3812c0	5b		tcd		                TCD
.3812c1	28		plp		                PLP
.3812c2	68		pla		                PLA             ; end setdp macro
.3812c3	a0 00 00	ldy #$0000	              LDY #0
.3812c6	a9 00 00	lda #$0000	              LDA #0
.3812c9					    CLEAR_LOOP
.3812c9	97 17		sta [$0337],y	              STA [SDOS_FILE_REC_PTR],Y
.3812cb	c8		iny		              INY
.3812cc	c0 20 00	cpy #$0020	              CPY #32
.3812cf	d0 f8		bne $3812c9	              BNE CLEAR_LOOP
.3812d1	2b		pld		              PLD
.3812d2	60		rts		              RTS
.3812d3	48		pha		ISDOS_DIR     PHA
.3812d4	da		phx		              PHX
.3812d5	5a		phy		              PHY
.3812d6	0b		phd		              PHD
.3812d7	08		php		              PHP
.3812d8	48		pha		                PHA             ; begin setdp macro
.3812d9	08		php		                PHP
.3812da	c2 20		rep #$20	                REP #$20        ; set A long
.3812dc	a9 20 03	lda #$0320	                LDA #SDOS_BLOCK_BEGIN         ; set DP to page 0
.3812df	5b		tcd		                TCD
.3812e0	28		plp		                PLP
.3812e1	68		pla		                PLA             ; end setdp macro
.3812e2	e2 20		sep #$20	                SEP #$20        ; set A short
.3812e4	c2 10		rep #$10	                REP #$10        ; set X long
.3812e6	20 53 13	jsr $381353	              JSR ISDOS_MOUNT_CARD;     First to See if the Card is Present
.3812e9	20 b8 12	jsr $3812b8	              JSR ISDOS_CLEAR_FAT_REC
.3812ec	20 88 13	jsr $381388	              JSR SDOS_FILE_OPEN     ; Now that the file name is set, go open File
.3812ef	a2 00 00	ldx #$0000	              LDX #0 ; count the number of items displayed - limit to 38
.3812f2					    ISDOS_NEXT_ENTRY
.3812f2	a9 27		lda #$27	              LDA #CH_CMD_RD_DATA0
.3812f4	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD
.3812f8	20 0b 14	jsr $38140b	              JSR DLYCMD_2_DTA;      ; Wait 1.5us
.3812fb	af 10 e8 af	lda $afe810	              LDA SDCARD_DATA        ;  Load Data Length - should be 32 - we don't care.
.3812ff	a0 00 00	ldy #$0000	              LDY #0
.381302					    FAT_REC_LOOP
.381302	20 10 14	jsr $381410	              JSR DLYDTA_2_DTA       ; Wait 0.6us
.381305	af 10 e8 af	lda $afe810	              LDA SDCARD_DATA
.381309	97 17		sta [$0337],y	              STA [SDOS_FILE_REC_PTR],Y
.38130b	c8		iny		              INY
.38130c	c0 20 00	cpy #$0020	              CPY #32
.38130f	d0 f1		bne $381302	              BNE FAT_REC_LOOP
.381311	c2 20		rep #$20	                REP #$20        ; set A long
.381313	a0 1c 00	ldy #$001c	              LDY #28
.381316	b7 17		lda [$0337],y	              LDA [SDOS_FILE_REC_PTR],Y
.381318	a0 0c 00	ldy #$000c	              LDY #12
.38131b	97 17		sta [$0337],y	              STA [SDOS_FILE_REC_PTR],Y
.38131d	a0 1e 00	ldy #$001e	              LDY #30
.381320	b7 17		lda [$0337],y	              LDA [SDOS_FILE_REC_PTR],Y
.381322	a0 0e 00	ldy #$000e	              LDY #14
.381325	97 17		sta [$0337],y	              STA [SDOS_FILE_REC_PTR],Y
.381327	a5 17		lda $0337	              LDA SDOS_FILE_REC_PTR
.381329	18		clc		              CLC
.38132a	69 10 00	adc #$0010	              ADC #$10
.38132d	85 17		sta $0337	              STA SDOS_FILE_REC_PTR
.38132f	e2 20		sep #$20	                SEP #$20        ; set A short
.381331	e8		inx		              INX
.381332	e0 40 00	cpx #$0040	              CPX #64
.381335	f0 10		beq $381347	              BEQ ISDOS_DIR_DONE
.381337	20 0b 14	jsr $38140b	              JSR DLYCMD_2_DTA;      ; Wait 1.5us
.38133a	a9 33		lda #$33	              LDA #CH_CMD_FILE_ENUM_GO
.38133c	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD
.381340	20 16 14	jsr $381416	              JSR SDCARD_WAIT_4_INT       ; Go Wait for Interrupt
.381343	c9 1d		cmp #$1d	              CMP #CH376S_STAT_DSK_RD
.381345	f0 ab		beq $3812f2	              BEQ ISDOS_NEXT_ENTRY
.381347					    ISDOS_DIR_DONE
.381347	20 d9 13	jsr $3813d9	              JSR SDOS_FILE_CLOSE
.38134a	28		plp		              PLP
.38134b	2b		pld		              PLD
.38134c	7a		ply		              PLY
.38134d	fa		plx		              PLX
.38134e	68		pla		              PLA
.38134f	6b		rtl		              RTL
.381350	00		brk #		ISDOS_CHDIR   BRK;
.381351	00		brk #		ISDOS_SAVE    BRK;
.381352	00		brk #		ISDOS_EXEC    BRK;
.381353					ISDOS_MOUNT_CARD
.381353	e2 20		sep #$20	                SEP #$20        ; set A short
.381355	c2 10		rep #$10	                REP #$10        ; set X long
.381357	a0 00 00	ldy #$0000	              LDY #$0000
.38135a	a9 01		lda #$01	              LDA #$01
.38135c	8d 3f 00	sta $003f	              STA SDCARD_PRSNT_MNT        ; Bit[0] = Card Present
.38135f					    TRY_MOUNT_AGAIN
.38135f	a9 31		lda #$31	              LDA #CH_CMD_DISK_MOUNT      ; If Present, go Mount it.
.381361	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD              ;
.381365	20 16 14	jsr $381416	              JSR SDCARD_WAIT_4_INT       ;
.381368	c9 14		cmp #$14	              CMP #CH376S_STAT_SUCCESS    ;
.38136a	f0 09		beq $381375	              BEQ ISDOS_MOUNTED
.38136c	c8		iny		              INY
.38136d	c0 05 00	cpy #$0005	              CPY #$0005
.381370	d0 ed		bne $38135f	              BNE TRY_MOUNT_AGAIN
.381372	4c 7d 13	jmp $38137d	              JMP SDCARD_ERROR_MOUNT
.381375					    ISDOS_MOUNTED
.381375	ad 3f 00	lda $003f	              LDA SDCARD_PRSNT_MNT
.381378	29 fb		and #$fb	              AND #~SDCARD_PRSNT_MNTED
.38137a	09 04		ora #$04	              ORA #SDCARD_PRSNT_MNTED     ; Set Bit to Indicate that is mounted
.38137c	60		rts		              RTS
.38137d					    SDCARD_ERROR_MOUNT
.38137d	a2 71 16	ldx #$1671	              LDX #<>sd_card_msg3         ; Print Screen the Message "Card Detected"
.381380	00		brk #		              BRK
.381381	60		rts		              RTS
.381382					    ISDOS_NO_CARD
.381382	a9 00		lda #$00	              LDA #SDCARD_PRSNT_NO_CARD
.381384	8d 3f 00	sta $003f	              STA SDCARD_PRSNT_MNT
.381387	60		rts		              RTS
.381388					SDOS_FILE_OPEN
.381388	8b		phb		              PHB
.381389	a2 00 00	ldx #$0000	              LDX #0
.38138c	a0 01 00	ldy #$0001	              LDY #1
.38138f	a9 2f		lda #$2f	              LDA #'/'
.381391	9f 80 03 00	sta $000380,x	              STA @lSDOS_FILE_NAME,X
.381395	e8		inx		              INX
.381396	48		pha		                PHA             ; begin setdbr macro
.381397	08		php		                PHP
.381398	e2 20		sep #$20	                SEP #$20        ; set A short
.38139a	a9 38		lda #$38	                LDA #`sd_card_dir_string
.38139c	48		pha		                PHA
.38139d	ab		plb		                PLB
.38139e	28		plp		                PLP
.38139f	68		pla		                PLA             ; end setdbr macro
.3813a0					    ISDOS_DIR_TRF
.3813a0	b9 8e 15	lda $38158e,y	              LDA sd_card_dir_string,Y
.3813a3	c9 2f		cmp #$2f	              CMP #'/'
.3813a5	f0 0c		beq $3813b3	              BEQ FO_READ_SLASH
.3813a7	9f 80 03 00	sta $000380,x	              STA @lSDOS_FILE_NAME,X
.3813ab	e8		inx		              INX
.3813ac	c8		iny		              INY
.3813ad	c9 00		cmp #$00	              CMP #0
.3813af	f0 0c		beq $3813bd	              BEQ FO_READ_END_PATH
.3813b1	80 ed		bra $3813a0	              BRA ISDOS_DIR_TRF  ; path string must be 0 terminated
.3813b3					    FO_READ_SLASH
.3813b3	a9 00		lda #$00	              LDA #0
.3813b5	9f 80 03 00	sta $000380,x	              STA @lSDOS_FILE_NAME,X
.3813b9	e8		inx		              INX
.3813ba	c8		iny		              INY
.3813bb	a9 2f		lda #$2f	              LDA #'/'
.3813bd					    FO_READ_END_PATH
.3813bd	48		pha		              PHA
.3813be	20 ec 13	jsr $3813ec	              JSR SDOS_SET_FILE_NAME ; Make Sure the Pointer to the File Name is properly
.3813c1	20 0b 14	jsr $38140b	              JSR DLYCMD_2_DTA
.3813c4	a9 32		lda #$32	              LDA #CH_CMD_FILE_OPEN ;
.3813c6	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD          ; Go Request to open the File
.3813ca	20 16 14	jsr $381416	              JSR SDCARD_WAIT_4_INT   ; A Interrupt is Generated, so go polling it
.3813cd	68		pla		              PLA
.3813ce	c9 00		cmp #$00	              CMP #0
.3813d0	f0 05		beq $3813d7	              BEQ FO_DONE
.3813d2	a2 00 00	ldx #$0000	              LDX #0
.3813d5	80 c9		bra $3813a0	              BRA ISDOS_DIR_TRF
.3813d7					    FO_DONE
.3813d7	ab		plb		              PLB
.3813d8	60		rts		              RTS
.3813d9					SDOS_FILE_CLOSE
.3813d9	a9 36		lda #$36	              LDA #CH_CMD_FILE_CLOSE ;
.3813db	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD          ; Go Request to open the File
.3813df	20 0b 14	jsr $38140b	              JSR DLYCMD_2_DTA
.3813e2	a9 00		lda #$00	              LDA #$00                ; FALSE
.3813e4	8f 10 e8 af	sta $afe810	              STA SDCARD_DATA         ; Store into the Data Register of the CH376s
.3813e8	20 16 14	jsr $381416	              JSR SDCARD_WAIT_4_INT   ; A Interrupt is Generated, so go polling it
.3813eb	60		rts		              RTS
.3813ec					SDOS_SET_FILE_NAME
.3813ec	da		phx		              PHX
.3813ed	a9 2f		lda #$2f	              LDA #CH_CMD_SET_FILENAME
.3813ef	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD
.3813f3	20 0b 14	jsr $38140b	              JSR DLYCMD_2_DTA
.3813f6	a2 00 00	ldx #$0000	              LDX #$0000
.3813f9					    SDOS_SET_FILE_LOOP
.3813f9	bf 80 03 00	lda $000380,x	              LDA @lSDOS_FILE_NAME, X   ; This is where the FileName ought to be.
.3813fd	8f 10 e8 af	sta $afe810	              STA SDCARD_DATA         ; Store into the Data Register of the CH376s
.381401	20 10 14	jsr $381410	              JSR DLYDTA_2_DTA
.381404	e8		inx		              INX
.381405	c9 00		cmp #$00	              CMP #$00              ; Check end of Line
.381407	d0 f0		bne $3813f9	              BNE SDOS_SET_FILE_LOOP
.381409	fa		plx		              PLX
.38140a	60		rts		              RTS
.38140b					DLYCMD_2_DTA
.38140b	ea		nop		              NOP
.38140c	ea		nop		              NOP
.38140d	ea		nop		              NOP
.38140e	ea		nop		              NOP
.38140f	ea		nop		              NOP
.381410					DLYDTA_2_DTA
.381410	ea		nop		              NOP
.381411	ea		nop		              NOP
.381412	ea		nop		              NOP
.381413	ea		nop		              NOP
.381414	ea		nop		              NOP
.381415	60		rts		              RTS
.381416					SDCARD_WAIT_4_INT
.381416	e2 20		sep #$20	                SEP #$20        ; set A short
.381418					    SDCARD_BUSY_INT
.381418	af 41 01 00	lda $000141	              LDA @lINT_PENDING_REG1   ; Check to See if the Pending Register for the SD_INT is Set
.38141c	29 80		and #$80	              AND #FNX1_INT07_SDCARD   ;
.38141e	c9 80		cmp #$80	              CMP #FNX1_INT07_SDCARD
.381420	d0 f6		bne $381418	              BNE SDCARD_BUSY_INT      ; Go Check again to see if it is checked
.381422	8f 41 01 00	sta $000141	              STA @lINT_PENDING_REG1   ;Interrupt as occured, clear the Pending Register for next time.
.381426	20 0b 14	jsr $38140b	              JSR DLYCMD_2_DTA ;
.381429	20 0b 14	jsr $38140b	              JSR DLYCMD_2_DTA ;
.38142c	a9 22		lda #$22	              LDA #CH_CMD_GET_STATUS
.38142e	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD;
.381432	20 0b 14	jsr $38140b	              JSR DLYCMD_2_DTA;   ; 1.5us Delay to get the Value Return
.381435	af 10 e8 af	lda $afe810	              LDA SDCARD_DATA;
.381439	60		rts		              RTS           ;
.38143a					ISDOS_CHK_CD
.38143a	e2 20		sep #$20	                SEP #$20        ; set A short
.38143c	18		clc		              CLC
.38143d	af 12 e8 af	lda $afe812	              LDA SDCARD_STAT;  BIT[0] = Cd, BIT[1] = WP
.381441	29 01		and #$01	              AND #$01
.381443	c9 01		cmp #$01	              CMP #$01
.381445	f0 01		beq $381448	              BEQ SDCD_NOT_PRST;
.381447	38		sec		              SEC
.381448					    SDCD_NOT_PRST
.381448	60		rts		              RTS
.381449					ISDOS_CHK_WP
.381449	e2 20		sep #$20	                SEP #$20        ; set A short
.38144b	18		clc		              CLC
.38144c	af 12 e8 af	lda $afe812	              LDA SDCARD_STAT;  BIT[0] = Cd, BIT[1] = WP
.381450	29 02		and #$02	              AND #$02
.381452	d0 01		bne $381455	              BNE SDCD_NOT_WP;
.381454	38		sec		              SEC
.381455					    SDCD_NOT_WP
.381455	60		rts		              RTS
.381456					ISDOS_READ_FILE
.381456	20 88 13	jsr $381388	              JSR SDOS_FILE_OPEN   ; open the file
.381459	af 10 e8 af	lda $afe810	              LDA SDCARD_DATA
.38145d	c9 14		cmp #$14	              CMP #CH376S_STAT_SUCCESS ; if the file open successfully, let's go on.
.38145f	f0 03		beq $381464	              BEQ SDOS_READ_FILE_KEEP_GOING
.381461	82 80 00	brl $3814e4	              BRL SDOS_READ_DONE
.381464					    SDOS_READ_FILE_KEEP_GOING
.381464	c2 20		rep #$20	                REP #$20        ; set A long
.381466	20 52 15	jsr $381552	              JSR SDOS_SET_FILE_LENGTH;
.381469	a9 00 00	lda #$0000	              LDA #$0000
.38146c	8f 3c 00 00	sta $00003c	              STA @lSDCARD_BYTE_NUM; Just make sure the High Part of the Size is Zero
.381470	8f 34 03 00	sta $000334	              STA @lSDOS_BYTE_PTR   ; Clear the Byte Pointer 32 Bytes Register
.381474	8f 36 03 00	sta $000336	              STA @lSDOS_BYTE_PTR+2 ; This is to Relocated the Pointer after you passed the 64K Boundary
.381478	e2 20		sep #$20	                SEP #$20        ; set A short
.38147a					    SDOS_READ_FILE_GO_FETCH_A_NEW_64KBlock
.38147a	a9 3a		lda #$3a	              LDA #CH_CMD_BYTE_READ
.38147c	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD;
.381480	20 0b 14	jsr $38140b	              JSR DLYCMD_2_DTA;   ; 3us Delay to get the Value Return
.381483	af 2c 03 00	lda $00032c	              LDA @lSDOS_BYTE_NUMBER
.381487	8f 10 e8 af	sta $afe810	              STA SDCARD_DATA
.38148b	20 10 14	jsr $381410	              JSR DLYDTA_2_DTA;   ; 1.5us Delay to get the Value Return
.38148e	af 2d 03 00	lda $00032d	              LDA @lSDOS_BYTE_NUMBER+1
.381492	8f 10 e8 af	sta $afe810	              STA SDCARD_DATA
.381496	20 16 14	jsr $381416	              JSR SDCARD_WAIT_4_INT
.381499	c9 1d		cmp #$1d	              CMP #CH376S_STAT_DSK_RD ;
.38149b	f0 03		beq $3814a0	              BEQ SDOS_READ_FILE_GO_FETCH_A_NEW_BLOCK
.38149d	82 44 00	brl $3814e4	              BRL SDOS_READ_DONE
.3814a0					    SDOS_READ_FILE_GO_FETCH_A_NEW_BLOCK
.3814a0	20 5f 15	jsr $38155f	              JSR SDOS_READ_BLOCK
.3814a3	a9 3b		lda #$3b	              LDA #CH_CMD_BYTE_RD_GO
.3814a5	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD
.3814a9	20 16 14	jsr $381416	              JSR SDCARD_WAIT_4_INT
.3814ac	c9 1d		cmp #$1d	              CMP #CH376S_STAT_DSK_RD ;
.3814ae	d0 05		bne $3814b5	              BNE SDOS_READ_PROC_DONE
.3814b0	20 e7 14	jsr $3814e7	              JSR SDOS_ADJUST_POINTER  ; Go Adjust the Address
.3814b3	80 eb		bra $3814a0	              BRA SDOS_READ_FILE_GO_FETCH_A_NEW_BLOCK
.3814b5					    SDOS_READ_PROC_DONE
.3814b5	c2 20		rep #$20	                REP #$20        ; set A long
.3814b7	af 2c 03 00	lda $00032c	              LDA @lSDOS_BYTE_NUMBER  ; Load the Previously number of Byte
.3814bb	c9 ff ff	cmp #$ffff	              CMP #$FFFF
.3814be	d0 24		bne $3814e4	              BNE SDOS_READ_DONE                  ; if it equal 64K, then the file is bigger than 64K
.3814c0	af 28 01 00	lda $000128	              LDA @lADDER_R
.3814c4	8f 20 01 00	sta $000120	              STA @lADDER_A
.3814c8	af 2a 01 00	lda $00012a	              LDA @lADDER_R+2
.3814cc	8f 22 01 00	sta $000122	              STA @lADDER_A+2
.3814d0	20 52 15	jsr $381552	              JSR SDOS_SET_FILE_LENGTH ;
.3814d3	20 38 15	jsr $381538	              JSR SDOS_COMPUTE_LOCATE_POINTER
.3814d6	e2 20		sep #$20	                SEP #$20        ; set A short
.3814d8	20 03 15	jsr $381503	              JSR SDOS_BYTE_LOCATE    ; Apply the new location for the CH376S
.3814db	20 16 14	jsr $381416	              JSR SDCARD_WAIT_4_INT
.3814de	c9 14		cmp #$14	              CMP #CH376S_STAT_SUCCESS ;
.3814e0	d0 d3		bne $3814b5	              BNE SDOS_READ_PROC_DONE
.3814e2	80 96		bra $38147a	              BRA SDOS_READ_FILE_GO_FETCH_A_NEW_64KBlock ; Let's go fetch a new block of 64K or less
.3814e4					    SDOS_READ_DONE
.3814e4	e2 20		sep #$20	                SEP #$20        ; set A short
.3814e6	6b		rtl		              RTL
.3814e7					SDOS_ADJUST_POINTER
.3814e7	c2 20		rep #$20	                REP #$20        ; set A long
.3814e9	18		clc		              CLC
.3814ea	af 38 00 00	lda $000038	              LDA SDCARD_FILE_PTR ;Load the Pointer
.3814ee	6f 3c 00 00	adc $00003c	              ADC SDCARD_BYTE_NUM
.3814f2	8f 38 00 00	sta $000038	              STA SDCARD_FILE_PTR;
.3814f6	e2 20		sep #$20	                SEP #$20        ; set A short
.3814f8	af 3a 00 00	lda $00003a	              LDA SDCARD_FILE_PTR+2;
.3814fc	69 00		adc #$00	              ADC #$00          ; This is just add up the Carry
.3814fe	8f 3a 00 00	sta $00003a	              STA SDCARD_FILE_PTR+2;
.381502					    SDOS_ADJ_DONE
.381502	60		rts		              RTS
.381503					SDOS_BYTE_LOCATE
.381503	e2 20		sep #$20	                SEP #$20        ; set A short
.381505	a9 39		lda #$39	              LDA #CH_CMD_BYTE_LOCATE
.381507	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD
.38150b	20 0b 14	jsr $38140b	              JSR DLYCMD_2_DTA
.38150e	af 34 03 00	lda $000334	              LDA @lSDOS_BYTE_PTR
.381512	8f 10 e8 af	sta $afe810	              STA SDCARD_DATA
.381516	20 10 14	jsr $381410	              JSR DLYDTA_2_DTA
.381519	af 35 03 00	lda $000335	              LDA @lSDOS_BYTE_PTR+1
.38151d	8f 10 e8 af	sta $afe810	              STA SDCARD_DATA
.381521	20 10 14	jsr $381410	              JSR DLYDTA_2_DTA
.381524	af 36 03 00	lda $000336	              LDA @lSDOS_BYTE_PTR+2
.381528	8f 10 e8 af	sta $afe810	              STA SDCARD_DATA
.38152c	20 10 14	jsr $381410	              JSR DLYDTA_2_DTA
.38152f	af 37 03 00	lda $000337	              LDA @lSDOS_BYTE_PTR+3
.381533	8f 10 e8 af	sta $afe810	              STA SDCARD_DATA
.381537	60		rts		              RTS
.381538					SDOS_COMPUTE_LOCATE_POINTER
.381538	c2 20		rep #$20	                REP #$20        ; set A long
.38153a	18		clc		              CLC
.38153b	af 34 03 00	lda $000334	              LDA @lSDOS_BYTE_PTR ; $00330
.38153f	69 ff ff	adc #$ffff	              ADC #$FFFF
.381542	8f 34 03 00	sta $000334	              STA @lSDOS_BYTE_PTR
.381546	af 36 03 00	lda $000336	              LDA @lSDOS_BYTE_PTR+2
.38154a	69 00 00	adc #$0000	              ADC #$0000          ; this is to Add the Carry
.38154d	8f 36 03 00	sta $000336	              STA @lSDOS_BYTE_PTR+2
.381551	60		rts		              RTS
.381552					SDOS_SET_FILE_LENGTH
.381552	a5 0a		lda $032a	              LDA SDOS_FILE_SIZE + 2
.381554	f0 02		beq $381558	              BEQ SFL_DONE
.381556	7a		ply		              PLY ; deplete the stack to return back to the long jump
.381557	6b		rtl		              RTL
.381558					    SFL_DONE
.381558	a5 08		lda $0328	              LDA SDOS_FILE_SIZE
.38155a	8f 2c 03 00	sta $00032c	              STA @lSDOS_BYTE_NUMBER
.38155e	60		rts		              RTS
.38155f					SDOS_READ_BLOCK
.38155f	0b		phd		              PHD
.381560	48		pha		                PHA             ; begin setdp macro
.381561	08		php		                PHP
.381562	c2 20		rep #$20	                REP #$20        ; set A long
.381564	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.381567	5b		tcd		                TCD
.381568	28		plp		                PLP
.381569	68		pla		                PLA             ; end setdp macro
.38156a	a9 27		lda #$27	              LDA #CH_CMD_RD_DATA0
.38156c	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD;
.381570	20 0b 14	jsr $38140b	              JSR DLYCMD_2_DTA;   ; 3us Delay to get the Value Return
.381573	af 10 e8 af	lda $afe810	              LDA SDCARD_DATA     ; Read First Byte for Number of Byte to Read
.381577	85 3c		sta $3c		              STA SDCARD_BYTE_NUM  ; Store the Number of byte to be read
.381579	20 10 14	jsr $381410	              JSR DLYDTA_2_DTA;   ; 3us Delay to get the Value Return
.38157c	a0 00 00	ldy #$0000	              LDY #$0000
.38157f					    SDOS_READ_MORE
.38157f	af 10 e8 af	lda $afe810	              LDA SDCARD_DATA
.381583	97 38		sta [$38],y	              STA [SDCARD_FILE_PTR], Y        ; Store Block Data Sector Begin
.381585	c8		iny		              INY
.381586	c4 3c		cpy $3c		              CPY SDCARD_BYTE_NUM
.381588	d0 f5		bne $38157f	              BNE SDOS_READ_MORE
.38158a	a5 3c		lda $3c		              LDA SDCARD_BYTE_NUM  ; Reload the Number of Byte Read
.38158c	2b		pld		              PLD
.38158d	60		rts		              RTS
>38158e	2f 2a 00			sd_card_dir_string  .text '/*' ,$00
>381591	00 00 00 00 00 00 00 00		                    .fill 128-3,0  ; leave space for the path
>381599	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 6 times (96 bytes)...
>381609	00 00 00 00 00
>38160e	4e 4f 20 53 44 43 41 52		sd_no_card_msg      .text "NO SDCARD PRESENT", $0D, $00
>381616	44 20 50 52 45 53 45 4e 54 0d 00
>381621	45 52 52 4f 52 20 49 4e		sd_card_err0        .text "ERROR IN READIND CARD", $00
>381629	20 52 45 41 44 49 4e 44 20 43 41 52 44 00
>381637	45 52 52 4f 52 20 4c 4f		sd_card_err1        .text "ERROR LOADING FILE", $00
>38163f	41 44 49 4e 47 20 46 49 4c 45 00
>38164a	4e 61 6d 65 3a 20 0d 00		sd_card_msg0        .text "Name: ", $0D,$00
>381652	53 44 43 41 52 44 20 44		sd_card_msg1        .text "SDCARD DETECTED", $00
>38165a	45 54 45 43 54 45 44 00
>381662	53 44 43 41 52 44 20 4d		sd_card_msg2        .text "SDCARD MOUNTED", $00
>38166a	4f 55 4e 54 45 44 00
>381671	46 41 49 4c 45 44 20 54		sd_card_msg3        .text "FAILED TO MOUNT SDCARD", $0D, $00
>381679	4f 20 4d 4f 55 4e 54 20 53 44 43 41 52 44 0d 00
>381689	46 49 4c 45 20 4f 50 45		sd_card_msg4        .text "FILE OPENED", $0D, $00
>381691	4e 45 44 0d 00
>381696	45 4e 44 20 4f 46 20 4c		sd_card_msg5        .text "END OF LINE...", $00
>38169e	49 4e 45 2e 2e 2e 00
>3816a5	46 49 4c 45 20 46 4f 55		sd_card_msg6        .text "FILE FOUND, LOADING...", $00
>3816ad	4e 44 2c 20 4c 4f 41 44 49 4e 47 2e 2e 2e 00
>3816bc	46 49 4c 45 20 4c 4f 41		sd_card_msg7        .text "FILE LOADED", $00
>3816c4	44 45 44 00

;******  Return to file: src\kernel.asm


;******  Processing file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_def.asm

=$afe500				OPL2_L_BASE               = $AFE500
=$afe502				OPL2_L_TIMER1             = $AFE502 ; TIMER-1
=$afe503				OPL2_L_TIMER2             = $AFE503 ; TIMER-2
=$afe504				OPL2_L_IRQ                = $AFE504 ;
=$afe700				OPL2_S_BASE                 = $AFE700
=$afe720				OPL2_S_AM_VID_EG_KSR_MULT = $AFE720 ; $20..$35 (21 Registers)
=$afe740				OPL2_S_KSL_TL             = $AFE740;  $40..$55 (21 Registers)
=$afe760				OPL2_S_AR_DR              = $AFE760;  $60..$75 (21 Registers)
=$afe780				OPL2_S_SL_RR              = $AFE780;  $80..$95 (21 Registers)
=$afe7c0				OPL2_S_FEEDBACK           = $AFE7C0;  $C0..$C9
=$afe7e0				OPL2_S_WAVE_SELECT        = $AFE7E0;  $E0..$F5
=$80					TREMOLO    = $80
=$40					VIBRATO    = $40
=$20					SUSTAINING = $20
=$10					KSR        = $10
=$0f					MULTIPLIER = $0F
=$c0					KEY_SCALE  = $C0
=$3f					OP_LEVEL   = $3F
=$f0					ATTACK_RT  = $F0
=$0f					DECAY_RT   = $0F
=$f0					SUSTAIN_RT = $F0
=$0f					RELEASE_RT = $0F
=$0e					FEEDBACK   = $0E
=$01					ALGORITHM  = $01
=9					OPL2_NUM_CHANNELS = 9
=0					OPERATOR1 = 0
=1					OPERATOR2 = 1
=0					MODULATOR = 0
=1					CARRIER = 1
=0					FREQ_MODULATION = 0
=1					ADDITIVE_SYNTH  = 1
=$10					DRUM_BASS   = $10
=$08					DRUM_SNARE  = $08
=$04					DRUM_TOM    = $04
=$02					DRUM_CYMBAL = $02
=$01					DRUM_HI_HAT = $01
=1					NOTE_CS =   1
=2					NOTE_D =    2
=3					NOTE_DS =   3
=4					NOTE_E =    4
=5					NOTE_F =    5
=6					NOTE_FS =   6
=7					NOTE_G =    7
=8					NOTE_GS =   8
=9					NOTE_A =    9
=10					NOTE_AS =  10
=11					NOTE_B =   11
=12					NOTE_C =   12
>3816c8	6b 01 81 01 98 01 b0 01		noteFNumbers    .word  $016B, $0181, $0198, $01B0, $01CA, $01E5, $0202, $0220, $0241, $0263, $0287, $02AE
>3816d0	ca 01 e5 01 02 02 20 02 41 02 63 02 87 02 ae 02
>3816e0	00 01 02 08 09 0a 10 11		registerOffsets_operator0 .byte $00, $01, $02, $08, $09, $0A, $10, $11, $12 ;initializers for operator 1 */
>3816e8	12
>3816e9	03 04 05 0b 0c 0d 13 14		registerOffsets_operator1 .byte $03, $04, $05, $0B, $0C, $0D, $13, $14, $15 ;initializers for operator 2 */
>3816f1	15
>3816f2	10 13 14 12 15 11		drumOffsets               .byte $10, $13, $14, $12, $15, $11
>3816f8	10 08 04 02 01			drumBits                  .byte $10, $08, $04, $02, $01
>3816fd	20 40 60 80 e0 c0		instrumentBaseRegs        .byte $20, $40, $60, $80, $E0, $C0

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Instruments.asm

>381703	00 24 4f f2 0b 00 0e 31		INSTRUMENT_ACCORDN    .text $00, $24, $4F, $F2, $0B, $00, $0E, $31, $00, $52, $0B, $00, 'ACCORDN   '
>38170b	00 52 0b 00 41 43 43 4f 52 44 4e 20 20 20
>381719	00 31 43 6e 17 01 02 22		INSTRUMENT_BAGPIPE1   .text $00, $31, $43, $6E, $17, $01, $02, $22, $05, $8B, $0C, $02, 'BAGPIPE1  '
>381721	05 8b 0c 02 42 41 47 50 49 50 45 31 20 20
>38172f	00 30 00 ff a0 03 00 a3		INSTRUMENT_BAGPIPE2   .text $00, $30, $00, $FF, $A0, $03, $00, $A3, $00, $65, $0B, $02, 'BAGPIPE2  '
>381737	00 65 0b 02 42 41 47 50 49 50 45 32 20 20
>381745	00 31 87 a1 11 00 08 16		INSTRUMENT_BANJO1     .text $00, $31, $87, $A1, $11, $00, $08, $16, $80, $7D, $43, $00, 'BANJO1    '
>38174d	80 7d 43 00 42 41 4e 4a 4f 31 20 20 20 20
>38175b	00 01 15 25 2f 00 0a 21		INSTRUMENT_BASS1      .text $00, $01, $15, $25, $2F, $00, $0A, $21, $80, $65, $6C, $00, 'BASS1     '
>381763	80 65 6c 00 42 41 53 53 31 20 20 20 20 20
>381771	00 01 1d f2 ef 00 0a 01		INSTRUMENT_BASS2      .text $00, $01, $1D, $F2, $EF, $00, $0A, $01, $00, $F5, $78, $00, 'BASS2     '
>381779	00 f5 78 00 42 41 53 53 32 20 20 20 20 20
>381787	00 c0 6d f9 01 01 0e 41		INSTRUMENT_BASSHARP   .text $00, $C0, $6D, $F9, $01, $01, $0E, $41, $00, $F2, $73, $00, 'BASSHARP  '
>38178f	00 f2 73 00 42 41 53 53 48 41 52 50 20 20
>38179d	00 30 c8 d5 19 00 0c 71		INSTRUMENT_BASSOON1   .text $00, $30, $C8, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'BASSOON1  '
>3817a5	80 61 1b 00 42 41 53 53 4f 4f 4e 31 20 20
>3817b3	00 c1 4f b1 53 03 06 e0		INSTRUMENT_BASSTRLG   .text $00, $C1, $4F, $B1, $53, $03, $06, $E0, $00, $12, $74, $03, 'BASSTRLG  '
>3817bb	00 12 74 03 42 41 53 53 54 52 4c 47 20 20
>3817c9	06 00 0b a8 4c 00 00 00		INSTRUMENT_BDRUM1     .text $06, $00, $0B, $A8, $4C, $00, $00, $00, $00, $00, $00, $00, 'BDRUM1    '
>3817d1	00 00 00 00 42 44 52 55 4d 31 20 20 20 20
>3817df	00 64 db ff 01 00 04 3e		INSTRUMENT_BELLONG    .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F3, $62, $00, 'BELLONG   '
>3817e7	c0 f3 62 00 42 45 4c 4c 4f 4e 47 20 20 20
>3817f5	00 07 4f f2 60 00 08 12		INSTRUMENT_BELLS      .text $00, $07, $4F, $F2, $60, $00, $08, $12, $00, $F2, $72, $00, 'BELLS     '
>3817fd	00 f2 72 00 42 45 4c 4c 53 20 20 20 20 20
>38180b	00 64 db ff 01 00 04 3e		INSTRUMENT_BELSHORT   .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F5, $F3, $00, 'BELSHORT  '
>381813	c0 f5 f3 00 42 45 4c 53 48 4f 52 54 20 20
>381821	00 20 4b 7b 04 01 0e 21		INSTRUMENT_BNCEBASS   .text $00, $20, $4B, $7B, $04, $01, $0E, $21, $00, $F5, $72, $00, 'BNCEBASS  '
>381829	00 f5 72 00 42 4e 43 45 42 41 53 53 20 20
>381837	00 21 16 71 ae 00 0e 21		INSTRUMENT_BRASS1     .text $00, $21, $16, $71, $AE, $00, $0E, $21, $00, $81, $9E, $00, 'BRASS1    '
>38183f	00 81 9e 00 42 52 41 53 53 31 20 20 20 20
>38184d	00 30 c5 52 11 00 00 31		INSTRUMENT_CBASSOON   .text $00, $30, $C5, $52, $11, $00, $00, $31, $80, $31, $2E, $00, 'CBASSOON  '
>381855	80 31 2e 00 43 42 41 53 53 4f 4f 4e 20 20
>381863	00 33 87 01 10 00 08 14		INSTRUMENT_CELESTA    .text $00, $33, $87, $01, $10, $00, $08, $14, $80, $7D, $33, $00, 'CELESTA   '
>38186b	80 7d 33 00 43 45 4c 45 53 54 41 20 20 20
>381879	00 32 16 73 24 00 0e 21		INSTRUMENT_CLAR1      .text $00, $32, $16, $73, $24, $00, $0E, $21, $80, $75, $57, $00, 'CLAR1     '
>381881	80 75 57 00 43 4c 41 52 31 20 20 20 20 20
>38188f	00 31 1c 41 1b 00 0c 60		INSTRUMENT_CLAR2      .text $00, $31, $1C, $41, $1B, $00, $0C, $60, $80, $42, $3B, $00, 'CLAR2     '
>381897	80 42 3b 00 43 4c 41 52 32 20 20 20 20 20
>3818a5	00 32 9a 51 1b 00 0c 61		INSTRUMENT_CLARINET   .text $00, $32, $9A, $51, $1B, $00, $0C, $61, $82, $A2, $3B, $00, 'CLARINET  '
>3818ad	82 a2 3b 00 43 4c 41 52 49 4e 45 54 20 20
>3818bb	00 11 0d f2 01 00 0a 15		INSTRUMENT_CLAVECIN   .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'CLAVECIN  '
>3818c3	0d f2 b1 00 43 4c 41 56 45 43 49 4e 20 20
>3818d1	00 00 02 f0 ff 00 06 11		INSTRUMENT_CROMORNE   .text $00, $00, $02, $F0, $FF, $00, $06, $11, $80, $F0, $FF, $00, 'CROMORNE  '
>3818d9	80 f0 ff 00 43 52 4f 4d 4f 52 4e 45 20 20
>3818e7	09 01 00 f5 b5 00 00 00		INSTRUMENT_CYMBAL1    .text $09, $01, $00, $F5, $B5, $00, $00, $00, $00, $00, $00, $00, 'CYMBAL1   '
>3818ef	00 00 00 00 43 59 4d 42 41 4c 31 20 20 20
>3818fd	00 05 8a f0 7b 00 08 01		INSTRUMENT_ELCLAV1    .text $00, $05, $8A, $F0, $7B, $00, $08, $01, $80, $F4, $7B, $00, 'ELCLAV1   '
>381905	80 f4 7b 00 45 4c 43 4c 41 56 31 20 20 20
>381913	00 01 49 f1 53 01 06 11		INSTRUMENT_ELCLAV2    .text $00, $01, $49, $F1, $53, $01, $06, $11, $00, $F1, $74, $02, 'ELCLAV2   '
>38191b	00 f1 74 02 45 4c 43 4c 41 56 32 20 20 20
>381929	00 e0 6d 57 04 01 0e 61		INSTRUMENT_ELECFL     .text $00, $E0, $6D, $57, $04, $01, $0E, $61, $00, $67, $7D, $00, 'ELECFL    '
>381931	00 67 7d 00 45 4c 45 43 46 4c 20 20 20 20
>38193f	00 13 97 9a 12 02 0e 91		INSTRUMENT_ELECVIBE   .text $00, $13, $97, $9A, $12, $02, $0E, $91, $80, $9B, $11, $00, 'ELECVIBE  '
>381947	80 9b 11 00 45 4c 45 43 56 49 42 45 20 20
>381955	00 f1 01 97 17 00 08 21		INSTRUMENT_ELGUIT1    .text $00, $F1, $01, $97, $17, $00, $08, $21, $0D, $F1, $18, $00, 'ELGUIT1   '
>38195d	0d f1 18 00 45 4c 47 55 49 54 31 20 20 20
>38196b	00 13 96 ff 21 00 0a 11		INSTRUMENT_ELGUIT2    .text $00, $13, $96, $FF, $21, $00, $0A, $11, $80, $FF, $03, $00, 'ELGUIT2   '
>381973	80 ff 03 00 45 4c 47 55 49 54 32 20 20 20
>381981	00 07 8f 82 7d 00 0c 14		INSTRUMENT_ELGUIT3    .text $00, $07, $8F, $82, $7D, $00, $0C, $14, $80, $82, $7D, $00, 'ELGUIT3   '
>381989	80 82 7d 00 45 4c 47 55 49 54 33 20 20 20
>381997	00 05 8f da 15 00 0a 01		INSTRUMENT_ELGUIT4    .text $00, $05, $8F, $DA, $15, $00, $0A, $01, $80, $F9, $14, $02, 'ELGUIT4   '
>38199f	80 f9 14 02 45 4c 47 55 49 54 34 20 20 20
>3819ad	00 b2 cd 91 2a 02 09 b1		INSTRUMENT_ELORGAN1   .text $00, $B2, $CD, $91, $2A, $02, $09, $B1, $80, $91, $2A, $01, 'ELORGAN1  '
>3819b5	80 91 2a 01 45 4c 4f 52 47 41 4e 31 20 20
>3819c3	00 01 4f f1 50 00 06 01		INSTRUMENT_ELPIANO1   .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'ELPIANO1  '
>3819cb	04 d2 7c 00 45 4c 50 49 41 4e 4f 31 20 20
>3819d9	00 02 22 f2 13 00 0e 02		INSTRUMENT_ELPIANO2   .text $00, $02, $22, $F2, $13, $00, $0E, $02, $00, $F5, $43, $00, 'ELPIANO2  '
>3819e1	00 f5 43 00 45 4c 50 49 41 4e 4f 32 20 20
>3819ef	00 81 63 f3 58 00 00 01		INSTRUMENT_EPIANO1A   .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'EPIANO1A  '
>3819f7	80 f2 58 00 45 50 49 41 4e 4f 31 41 20 20
>381a05	00 07 1f f5 fa 00 0e 01		INSTRUMENT_EPIANO1B   .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'EPIANO1B  '
>381a0d	57 f5 fa 00 45 50 49 41 4e 4f 31 42 20 20
>381a1b	00 21 83 74 17 00 07 a2		INSTRUMENT_FLUTE      .text $00, $21, $83, $74, $17, $00, $07, $A2, $8D, $65, $17, $00, 'FLUTE     '
>381a23	8d 65 17 00 46 4c 55 54 45 20 20 20 20 20
>381a31	00 a1 27 74 8f 00 02 a1		INSTRUMENT_FLUTE1     .text $00, $A1, $27, $74, $8F, $00, $02, $A1, $80, $65, $2A, $00, 'FLUTE1    '
>381a39	80 65 2a 00 46 4c 55 54 45 31 20 20 20 20
>381a47	00 e0 ec 6e 8f 00 0e 61		INSTRUMENT_FLUTE2     .text $00, $E0, $EC, $6E, $8F, $00, $0E, $61, $00, $65, $2A, $00, 'FLUTE2    '
>381a4f	00 65 2a 00 46 4c 55 54 45 32 20 20 20 20
>381a5d	00 21 9f 53 5a 00 0c 21		INSTRUMENT_FRHORN1    .text $00, $21, $9F, $53, $5A, $00, $0C, $21, $80, $AA, $1A, $00, 'FRHORN1   '
>381a65	80 aa 1a 00 46 52 48 4f 52 4e 31 20 20 20
>381a73	00 20 8e a5 8f 02 06 21		INSTRUMENT_FRHORN2    .text $00, $20, $8E, $A5, $8F, $02, $06, $21, $00, $36, $3D, $00, 'FRHORN2   '
>381a7b	00 36 3d 00 46 52 48 4f 52 4e 32 20 20 20
>381a89	00 f0 18 55 ef 02 00 e0		INSTRUMENT_FSTRP1     .text $00, $F0, $18, $55, $EF, $02, $00, $E0, $80, $87, $1E, $03, 'FSTRP1    '
>381a91	80 87 1e 03 46 53 54 52 50 31 20 20 20 20
>381a9f	00 70 16 55 2f 02 0c e0		INSTRUMENT_FSTRP2     .text $00, $70, $16, $55, $2F, $02, $0C, $E0, $80, $87, $1E, $03, 'FSTRP2    '
>381aa7	80 87 1e 03 46 53 54 52 50 32 20 20 20 20
>381ab5	00 f1 00 97 13 00 0a 25		INSTRUMENT_FUZGUIT1   .text $00, $F1, $00, $97, $13, $00, $0A, $25, $0D, $F1, $18, $01, 'FUZGUIT1  '
>381abd	0d f1 18 01 46 55 5a 47 55 49 54 31 20 20
>381acb	00 31 48 f1 53 00 06 32		INSTRUMENT_FUZGUIT2   .text $00, $31, $48, $F1, $53, $00, $06, $32, $00, $F2, $27, $02, 'FUZGUIT2  '
>381ad3	00 f2 27 02 46 55 5a 47 55 49 54 32 20 20
>381ae1	00 01 11 f2 1f 00 0a 01		INSTRUMENT_GUITAR1    .text $00, $01, $11, $F2, $1F, $00, $0A, $01, $00, $F5, $88, $00, 'GUITAR1   '
>381ae9	00 f5 88 00 47 55 49 54 41 52 31 20 20 20
>381af7	00 02 29 f5 75 00 00 01		INSTRUMENT_HARP1      .text $00, $02, $29, $F5, $75, $00, $00, $01, $83, $F2, $F3, $00, 'HARP1     '
>381aff	83 f2 f3 00 48 41 52 50 31 20 20 20 20 20
>381b0d	00 02 99 f5 55 00 00 01		INSTRUMENT_HARP2      .text $00, $02, $99, $F5, $55, $00, $00, $01, $80, $F6, $53, $00, 'HARP2     '
>381b15	80 f6 53 00 48 41 52 50 32 20 20 20 20 20
>381b23	00 02 57 f5 56 00 00 01		INSTRUMENT_HARP3      .text $00, $02, $57, $F5, $56, $00, $00, $01, $80, $F6, $54, $00, 'HARP3     '
>381b2b	80 f6 54 00 48 41 52 50 33 20 20 20 20 20
>381b39	00 02 29 f5 75 00 00 01		INSTRUMENT_HARPE1     .text $00, $02, $29, $F5, $75, $00, $00, $01, $03, $F2, $F3, $00, 'HARPE1    '
>381b41	03 f2 f3 00 48 41 52 50 45 31 20 20 20 20
>381b4f	00 32 87 a1 10 00 08 16		INSTRUMENT_HARPSI1    .text $00, $32, $87, $A1, $10, $00, $08, $16, $80, $7D, $33, $00, 'HARPSI1   '
>381b57	80 7d 33 00 48 41 52 50 53 49 31 20 20 20
>381b65	00 33 87 a1 10 00 06 15		INSTRUMENT_HARPSI2    .text $00, $33, $87, $A1, $10, $00, $06, $15, $80, $7D, $43, $00, 'HARPSI2   '
>381b6d	80 7d 43 00 48 41 52 50 53 49 32 20 20 20
>381b7b	00 35 84 a8 10 00 08 18		INSTRUMENT_HARPSI3    .text $00, $35, $84, $A8, $10, $00, $08, $18, $80, $7D, $33, $00, 'HARPSI3   '
>381b83	80 7d 33 00 48 41 52 50 53 49 33 20 20 20
>381b91	00 11 0d f2 01 00 0a 15		INSTRUMENT_HARPSI4    .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'HARPSI4   '
>381b99	0d f2 b1 00 48 41 52 50 53 49 34 20 20 20
>381ba7	00 36 87 8a 00 00 08 1a		INSTRUMENT_HARPSI5    .text $00, $36, $87, $8A, $00, $00, $08, $1A, $80, $7F, $33, $00, 'HARPSI5   '
>381baf	80 7f 33 00 48 41 52 50 53 49 35 20 20 20
>381bbd	00 f0 00 1e 11 01 08 e2		INSTRUMENT_HELICPTR   .text $00, $F0, $00, $1E, $11, $01, $08, $E2, $C0, $11, $11, $01, 'HELICPTR  '
>381bc5	c0 11 11 01 48 45 4c 49 43 50 54 52 20 20
>381bd3	0a 01 00 f7 b5 00 00 00		INSTRUMENT_HIHAT1     .text $0A, $01, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'HIHAT1    '
>381bdb	00 00 00 00 48 49 48 41 54 31 20 20 20 20
>381be9	0a 01 03 da 18 00 00 00		INSTRUMENT_HIHAT2     .text $0A, $01, $03, $DA, $18, $00, $00, $00, $00, $00, $00, $00, 'HIHAT2    '
>381bf1	00 00 00 00 48 49 48 41 54 32 20 20 20 20
>381bff	00 87 4d 78 42 00 0a 94		INSTRUMENT_JAVAICAN   .text $00, $87, $4D, $78, $42, $00, $0A, $94, $00, $85, $54, $00, 'JAVAICAN  '
>381c07	00 85 54 00 4a 41 56 41 49 43 41 4e 20 20
>381c15	00 03 5e 85 51 01 0e 11		INSTRUMENT_JAZZGUIT   .text $00, $03, $5E, $85, $51, $01, $0E, $11, $00, $D2, $71, $00, 'JAZZGUIT  '
>381c1d	00 d2 71 00 4a 41 5a 5a 47 55 49 54 20 20
>381c2b	00 00 50 f2 70 00 0e 13		INSTRUMENT_JEWSHARP   .text $00, $00, $50, $F2, $70, $00, $0E, $13, $00, $F2, $72, $00, 'JEWSHARP  '
>381c33	00 f2 72 00 4a 45 57 53 48 41 52 50 20 20
>381c41	00 00 02 f0 fa 01 06 11		INSTRUMENT_KEYBRD1    .text $00, $00, $02, $F0, $FA, $01, $06, $11, $80, $F2, $FA, $01, 'KEYBRD1   '
>381c49	80 f2 fa 01 4b 45 59 42 52 44 31 20 20 20
>381c57	00 01 8f f2 bd 00 08 14		INSTRUMENT_KEYBRD2    .text $00, $01, $8F, $F2, $BD, $00, $08, $14, $80, $82, $BD, $00, 'KEYBRD2   '
>381c5f	80 82 bd 00 4b 45 59 42 52 44 32 20 20 20
>381c6d	00 01 00 f0 f0 00 00 e4		INSTRUMENT_KEYBRD3    .text $00, $01, $00, $F0, $F0, $00, $00, $E4, $03, $F3, $36, $00, 'KEYBRD3   '
>381c75	03 f3 36 00 4b 45 59 42 52 44 33 20 20 20
>381c83	09 e6 00 25 b5 00 00 00		INSTRUMENT_LASER      .text $09, $E6, $00, $25, $B5, $00, $00, $00, $00, $00, $00, $00, 'LASER     '
>381c8b	00 00 00 00 4c 41 53 45 52 20 20 20 20 20
>381c99	00 32 44 f8 ff 00 0e 11		INSTRUMENT_LOGDRUM1   .text $00, $32, $44, $F8, $FF, $00, $0E, $11, $00, $F5, $7F, $00, 'LOGDRUM1  '
>381ca1	00 f5 7f 00 4c 4f 47 44 52 55 4d 31 20 20
>381caf	00 05 4e da 25 00 0a 01		INSTRUMENT_MARIMBA1   .text $00, $05, $4E, $DA, $25, $00, $0A, $01, $00, $F9, $15, $00, 'MARIMBA1  '
>381cb7	00 f9 15 00 4d 41 52 49 4d 42 41 31 20 20
>381cc5	00 85 4e da 15 00 0a 81		INSTRUMENT_MARIMBA2   .text $00, $85, $4E, $DA, $15, $00, $0A, $81, $80, $F9, $13, $00, 'MARIMBA2  '
>381ccd	80 f9 13 00 4d 41 52 49 4d 42 41 32 20 20
>381cdb	00 30 00 fe 11 01 08 ae		INSTRUMENT_MDRNPHON   .text $00, $30, $00, $FE, $11, $01, $08, $AE, $C0, $F1, $19, $01, 'MDRNPHON  '
>381ce3	c0 f1 19 01 4d 44 52 4e 50 48 4f 4e 20 20
>381cf1	07 0c 00 c8 b6 01 00 00		INSTRUMENT_MLTRDRUM   .text $07, $0C, $00, $C8, $B6, $01, $00, $00, $00, $00, $00, $00, 'MLTRDRUM  '
>381cf9	00 00 00 00 4d 4c 54 52 44 52 55 4d 20 20
>381d07	00 20 90 f5 9e 02 0c 11		INSTRUMENT_MOOGSYNT   .text $00, $20, $90, $F5, $9E, $02, $0C, $11, $00, $F4, $5B, $03, 'MOOGSYNT  '
>381d0f	00 f4 5b 03 4d 4f 4f 47 53 59 4e 54 20 20
>381d1d	00 0e 40 d1 53 00 0e 0e		INSTRUMENT_NOISE1     .text $00, $0E, $40, $D1, $53, $00, $0E, $0E, $00, $F2, $7F, $03, 'NOISE1    '
>381d25	00 f2 7f 03 4e 4f 49 53 45 31 20 20 20 20
>381d33	00 b1 c5 6e 17 00 02 22		INSTRUMENT_OBOE1      .text $00, $B1, $C5, $6E, $17, $00, $02, $22, $05, $8B, $0E, $00, 'OBOE1     '
>381d3b	05 8b 0e 00 4f 42 4f 45 31 20 20 20 20 20
>381d49	00 65 d2 81 03 00 02 71		INSTRUMENT_ORGAN1     .text $00, $65, $D2, $81, $03, $00, $02, $71, $80, $F1, $05, $00, 'ORGAN1    '
>381d51	80 f1 05 00 4f 52 47 41 4e 31 20 20 20 20
>381d5f	00 24 80 ff 0f 00 01 21		INSTRUMENT_ORGAN2     .text $00, $24, $80, $FF, $0F, $00, $01, $21, $80, $FF, $0F, $00, 'ORGAN2    '
>381d67	80 ff 0f 00 4f 52 47 41 4e 32 20 20 20 20
>381d75	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3     .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $80, $F0, $1F, $00, 'ORGAN3    '
>381d7d	80 f0 1f 00 4f 52 47 41 4e 33 20 20 20 20
>381d8b	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3A    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $8D, $F0, $13, $00, 'ORGAN3A   '
>381d93	8d f0 13 00 4f 52 47 41 4e 33 41 20 20 20
>381da1	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3B    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $92, $F0, $12, $00, 'ORGAN3B   '
>381da9	92 f0 12 00 4f 52 47 41 4e 33 42 20 20 20
>381db7	00 0c 00 f8 b5 00 01 00		INSTRUMENT_ORGNPERC   .text $00, $0C, $00, $F8, $B5, $00, $01, $00, $00, $D6, $4F, $00, 'ORGNPERC  '
>381dbf	00 d6 4f 00 4f 52 47 4e 50 45 52 43 20 20
>381dcd	00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE1     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F1, $B2, $00, 'PHONE1    '
>381dd5	08 f1 b2 00 50 48 4f 4e 45 31 20 20 20 20
>381de3	00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE2     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $0A, $F1, $B4, $00, 'PHONE2    '
>381deb	0a f1 b4 00 50 48 4f 4e 45 32 20 20 20 20
>381df9	00 81 63 f3 58 00 00 01		INSTRUMENT_PIAN1A     .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'PIAN1A    '
>381e01	80 f2 58 00 50 49 41 4e 31 41 20 20 20 20
>381e0f	00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1B     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $26, $F5, $FA, $00, 'PIAN1B    '
>381e17	26 f5 fa 00 50 49 41 4e 31 42 20 20 20 20
>381e25	00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1C     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'PIAN1C    '
>381e2d	57 f5 fa 00 50 49 41 4e 31 43 20 20 20 20
>381e3b	00 03 4f f1 53 00 06 17		INSTRUMENT_PIANO      .text $00, $03, $4F, $F1, $53, $00, $06, $17, $00, $F2, $74, $00, 'PIANO     '
>381e43	00 f2 74 00 50 49 41 4e 4f 20 20 20 20 20
>381e51	00 01 4f f1 53 00 06 11		INSTRUMENT_PIANO1     .text $00, $01, $4F, $F1, $53, $00, $06, $11, $00, $D2, $74, $00, 'PIANO1    '
>381e59	00 d2 74 00 50 49 41 4e 4f 31 20 20 20 20
>381e67	00 41 9d f2 51 00 06 13		INSTRUMENT_PIANO2     .text $00, $41, $9D, $F2, $51, $00, $06, $13, $00, $F2, $F1, $00, 'PIANO2    '
>381e6f	00 f2 f1 00 50 49 41 4e 4f 32 20 20 20 20
>381e7d	00 01 4f f1 50 00 06 01		INSTRUMENT_PIANO3     .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'PIANO3    '
>381e85	04 d2 7c 00 50 49 41 4e 4f 33 20 20 20 20
>381e93	00 01 4d f1 60 00 08 11		INSTRUMENT_PIANO4     .text $00, $01, $4D, $F1, $60, $00, $08, $11, $00, $D2, $7B, $00, 'PIANO4    '
>381e9b	00 d2 7b 00 50 49 41 4e 4f 34 20 20 20 20
>381ea9	00 03 4f f1 53 00 06 17		INSTRUMENT_PIANOBEL   .text $00, $03, $4F, $F1, $53, $00, $06, $17, $03, $F2, $74, $00, 'PIANOBEL  '
>381eb1	03 f2 74 00 50 49 41 4e 4f 42 45 4c 20 20
>381ebf	00 01 cf f1 53 00 02 12		INSTRUMENT_PIANOF     .text $00, $01, $CF, $F1, $53, $00, $02, $12, $00, $F2, $83, $00, 'PIANOF    '
>381ec7	00 f2 83 00 50 49 41 4e 4f 46 20 20 20 20
>381ed5	00 10 00 75 93 01 00 01		INSTRUMENT_POPBASS1   .text $00, $10, $00, $75, $93, $01, $00, $01, $00, $F5, $82, $01, 'POPBASS1  '
>381edd	00 f5 82 01 50 4f 50 42 41 53 53 31 20 20
>381eeb	07 0c 00 c7 b4 00 00 00		INSTRUMENT_RKSNARE1   .text $07, $0C, $00, $C7, $B4, $00, $00, $00, $00, $00, $00, $00, 'RKSNARE1  '
>381ef3	00 00 00 00 52 4b 53 4e 41 52 45 31 20 20
>381f01	00 01 4f 71 53 00 0a 12		INSTRUMENT_SAX1       .text $00, $01, $4F, $71, $53, $00, $0A, $12, $00, $52, $7C, $00, 'SAX1      '
>381f09	00 52 7c 00 53 41 58 31 20 20 20 20 20 20
>381f17	00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH    .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH   '
>381f1f	00 5c dc 00 53 43 52 41 54 43 48 20 20 20
>381f2d	00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH4   .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH4  '
>381f35	00 5c dc 00 53 43 52 41 54 43 48 34 20 20
>381f43	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SDRUM2     .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SDRUM2    '
>381f4b	00 f6 b4 00 53 44 52 55 4d 32 20 20 20 20
>381f59	00 e4 0e ff 3f 01 00 c0		INSTRUMENT_SHRTVIBE   .text $00, $E4, $0E, $FF, $3F, $01, $00, $C0, $00, $F3, $07, $00, 'SHRTVIBE  '
>381f61	00 f3 07 00 53 48 52 54 56 49 42 45 20 20
>381f6f	00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR1     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $00, 'SITAR1    '
>381f77	40 f1 53 00 53 49 54 41 52 31 20 20 20 20
>381f85	00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR2     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $01, 'SITAR2    '
>381f8d	40 f1 53 01 53 49 54 41 52 32 20 20 20 20
>381f9b	00 61 0c 81 03 00 08 71		INSTRUMENT_SNAKEFL    .text $00, $61, $0C, $81, $03, $00, $08, $71, $80, $61, $0C, $00, 'SNAKEFL   '
>381fa3	80 61 0c 00 53 4e 41 4b 45 46 4c 20 20 20
>381fb1	07 0c 00 f8 b5 00 00 00		INSTRUMENT_SNARE1     .text $07, $0C, $00, $F8, $B5, $00, $00, $00, $00, $00, $00, $00, 'SNARE1    '
>381fb9	00 00 00 00 53 4e 41 52 45 31 20 20 20 20
>381fc7	00 06 00 f0 f0 00 0e c4		INSTRUMENT_SNRSUST    .text $00, $06, $00, $F0, $F0, $00, $0E, $C4, $03, $C4, $34, $00, 'SNRSUST   '
>381fcf	03 c4 34 00 53 4e 52 53 55 53 54 20 20 20
>381fdd	00 70 1c 51 03 02 0e 20		INSTRUMENT_SOLOVLN    .text $00, $70, $1C, $51, $03, $02, $0E, $20, $00, $54, $67, $02, 'SOLOVLN   '
>381fe5	00 54 67 02 53 4f 4c 4f 56 4c 4e 20 20 20
>381ff3	00 01 46 f1 83 00 06 61		INSTRUMENT_STEELGT1   .text $00, $01, $46, $F1, $83, $00, $06, $61, $03, $31, $86, $00, 'STEELGT1  '
>381ffb	03 31 86 00 53 54 45 45 4c 47 54 31 20 20
>382009	00 01 47 f1 83 00 06 61		INSTRUMENT_STEELGT2   .text $00, $01, $47, $F1, $83, $00, $06, $61, $03, $91, $86, $00, 'STEELGT2  '
>382011	03 91 86 00 53 54 45 45 4c 47 54 32 20 20
>38201f	00 b1 8b 71 11 00 06 61		INSTRUMENT_STRINGS1   .text $00, $B1, $8B, $71, $11, $00, $06, $61, $40, $42, $15, $01, 'STRINGS1  '
>382027	40 42 15 01 53 54 52 49 4e 47 53 31 20 20
>382035	00 e1 4f b1 d3 03 06 21		INSTRUMENT_STRNLONG   .text $00, $E1, $4F, $B1, $D3, $03, $06, $21, $00, $12, $74, $01, 'STRNLONG  '
>38203d	00 12 74 01 53 54 52 4e 4c 4f 4e 47 20 20
>38204b	00 55 97 2a 02 00 00 12		INSTRUMENT_SYN1       .text $00, $55, $97, $2A, $02, $00, $00, $12, $80, $42, $F3, $00, 'SYN1      '
>382053	80 42 f3 00 53 59 4e 31 20 20 20 20 20 20
>382061	00 13 97 9a 12 00 0e 11		INSTRUMENT_SYN2       .text $00, $13, $97, $9A, $12, $00, $0E, $11, $80, $9B, $14, $00, 'SYN2      '
>382069	80 9b 14 00 53 59 4e 32 20 20 20 20 20 20
>382077	00 11 8a f1 11 00 06 01		INSTRUMENT_SYN3       .text $00, $11, $8A, $F1, $11, $00, $06, $01, $40, $F1, $B3, $00, 'SYN3      '
>38207f	40 f1 b3 00 53 59 4e 33 20 20 20 20 20 20
>38208d	00 21 0d e9 3a 00 0a 22		INSTRUMENT_SYN4       .text $00, $21, $0D, $E9, $3A, $00, $0A, $22, $80, $65, $6C, $00, 'SYN4      '
>382095	80 65 6c 00 53 59 4e 34 20 20 20 20 20 20
>3820a3	00 01 4f 71 53 00 06 19		INSTRUMENT_SYN5       .text $00, $01, $4F, $71, $53, $00, $06, $19, $00, $52, $7C, $00, 'SYN5      '
>3820ab	00 52 7c 00 53 59 4e 35 20 20 20 20 20 20
>3820b9	00 24 0f 41 7e 00 0a 21		INSTRUMENT_SYN6       .text $00, $24, $0F, $41, $7E, $00, $0A, $21, $00, $F1, $5E, $00, 'SYN6      '
>3820c1	00 f1 5e 00 53 59 4e 36 20 20 20 20 20 20
>3820cf	00 07 87 f0 05 00 04 01		INSTRUMENT_SYN9       .text $00, $07, $87, $F0, $05, $00, $04, $01, $80, $F0, $05, $00, 'SYN9      '
>3820d7	80 f0 05 00 53 59 4e 39 20 20 20 20 20 20
>3820e5	00 26 03 e0 f0 00 08 1e		INSTRUMENT_SYNBAL1    .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'SYNBAL1   '
>3820ed	00 ff 31 00 53 59 4e 42 41 4c 31 20 20 20
>3820fb	00 28 03 e0 f0 00 04 13		INSTRUMENT_SYNBAL2    .text $00, $28, $03, $E0, $F0, $00, $04, $13, $00, $E8, $11, $00, 'SYNBAL2   '
>382103	00 e8 11 00 53 59 4e 42 41 4c 32 20 20 20
>382111	00 30 88 d5 19 00 0c 71		INSTRUMENT_SYNBASS1   .text $00, $30, $88, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'SYNBASS1  '
>382119	80 61 1b 00 53 59 4e 42 41 53 53 31 20 20
>382127	00 81 86 65 01 00 0c 11		INSTRUMENT_SYNBASS2   .text $00, $81, $86, $65, $01, $00, $0C, $11, $00, $32, $74, $00, 'SYNBASS2  '
>38212f	00 32 74 00 53 59 4e 42 41 53 53 32 20 20
>38213d	00 81 83 65 05 00 0a 51		INSTRUMENT_SYNBASS4   .text $00, $81, $83, $65, $05, $00, $0A, $51, $00, $32, $74, $00, 'SYNBASS4  '
>382145	00 32 74 00 53 59 4e 42 41 53 53 34 20 20
>382153	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR1    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F8, $B6, $00, 'SYNSNR1   '
>38215b	00 f8 b6 00 53 59 4e 53 4e 52 31 20 20 20
>382169	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR2    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SYNSNR2   '
>382171	00 f6 b4 00 53 59 4e 53 4e 52 32 20 20 20
>38217f	00 8f 81 ef 01 00 04 01		INSTRUMENT_TINCAN1    .text $00, $8F, $81, $EF, $01, $00, $04, $01, $00, $98, $F1, $00, 'TINCAN1   '
>382187	00 98 f1 00 54 49 4e 43 41 4e 31 20 20 20
>382195	08 04 00 f7 b5 00 00 00		INSTRUMENT_TOM1       .text $08, $04, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'TOM1      '
>38219d	00 00 00 00 54 4f 4d 31 20 20 20 20 20 20
>3821ab	08 02 00 c8 97 00 00 00		INSTRUMENT_TOM2       .text $08, $02, $00, $C8, $97, $00, $00, $00, $00, $00, $00, $00, 'TOM2      '
>3821b3	00 00 00 00 54 4f 4d 32 20 20 20 20 20 20
>3821c1	00 17 4f f2 61 00 08 12		INSTRUMENT_TRAINBEL   .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F2, $74, $00, 'TRAINBEL  '
>3821c9	08 f2 74 00 54 52 41 49 4e 42 45 4c 20 20
>3821d7	00 26 03 e0 f0 00 08 1e		INSTRUMENT_TRIANGLE   .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'TRIANGLE  '
>3821df	00 ff 31 00 54 52 49 41 4e 47 4c 45 20 20
>3821ed	00 b1 1c 41 1f 00 0e 61		INSTRUMENT_TROMB1     .text $00, $B1, $1C, $41, $1F, $00, $0E, $61, $80, $92, $3B, $00, 'TROMB1    '
>3821f5	80 92 3b 00 54 52 4f 4d 42 31 20 20 20 20
>382203	00 21 1c 53 1d 00 0c 61		INSTRUMENT_TROMB2     .text $00, $21, $1C, $53, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TROMB2    '
>38220b	80 52 3b 00 54 52 4f 4d 42 32 20 20 20 20
>382219	00 31 1c 41 0b 00 0e 61		INSTRUMENT_TRUMPET1   .text $00, $31, $1C, $41, $0B, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET1  '
>382221	80 92 3b 00 54 52 55 4d 50 45 54 31 20 20
>38222f	00 31 1c 23 1d 00 0c 61		INSTRUMENT_TRUMPET2   .text $00, $31, $1C, $23, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TRUMPET2  '
>382237	80 52 3b 00 54 52 55 4d 50 45 54 32 20 20
>382245	00 31 1c 41 01 00 0e 61		INSTRUMENT_TRUMPET3   .text $00, $31, $1C, $41, $01, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET3  '
>38224d	80 92 3b 00 54 52 55 4d 50 45 54 33 20 20
>38225b	00 31 1c 41 0b 00 0c 61		INSTRUMENT_TRUMPET4   .text $00, $31, $1C, $41, $0B, $00, $0C, $61, $80, $92, $3B, $00, 'TRUMPET4  '
>382263	80 92 3b 00 54 52 55 4d 50 45 54 34 20 20
>382271	00 21 19 43 8c 00 0c 21		INSTRUMENT_TUBA1      .text $00, $21, $19, $43, $8C, $00, $0C, $21, $80, $85, $2F, $00, 'TUBA1     '
>382279	80 85 2f 00 54 55 42 41 31 20 20 20 20 20
>382287	00 84 53 f5 33 00 06 a0		INSTRUMENT_VIBRA1     .text $00, $84, $53, $F5, $33, $00, $06, $A0, $80, $FD, $25, $00, 'VIBRA1    '
>38228f	80 fd 25 00 56 49 42 52 41 31 20 20 20 20
>38229d	00 06 73 f6 54 00 00 81		INSTRUMENT_VIBRA2     .text $00, $06, $73, $F6, $54, $00, $00, $81, $03, $F2, $B3, $00, 'VIBRA2    '
>3822a5	03 f2 b3 00 56 49 42 52 41 32 20 20 20 20
>3822b3	00 93 97 aa 12 02 0e 91		INSTRUMENT_VIBRA3     .text $00, $93, $97, $AA, $12, $02, $0E, $91, $80, $AC, $21, $00, 'VIBRA3    '
>3822bb	80 ac 21 00 56 49 42 52 41 33 20 20 20 20
>3822c9	00 31 1c 51 03 00 0e 61		INSTRUMENT_VIOLIN1    .text $00, $31, $1C, $51, $03, $00, $0E, $61, $80, $54, $67, $00, 'VIOLIN1   '
>3822d1	80 54 67 00 56 49 4f 4c 49 4e 31 20 20 20
>3822df	00 e1 88 62 29 00 0c 22		INSTRUMENT_VIOLIN2    .text $00, $E1, $88, $62, $29, $00, $0C, $22, $80, $53, $2C, $00, 'VIOLIN2   '
>3822e7	80 53 2c 00 56 49 4f 4c 49 4e 32 20 20 20
>3822f5	00 e1 88 64 29 00 06 22		INSTRUMENT_VIOLIN3    .text $00, $E1, $88, $64, $29, $00, $06, $22, $83, $53, $2C, $00, 'VIOLIN3   '
>3822fd	83 53 2c 00 56 49 4f 4c 49 4e 33 20 20 20
>38230b	00 31 9c f1 f9 00 0e 31		INSTRUMENT_VLNPIZZ1   .text $00, $31, $9C, $F1, $F9, $00, $0E, $31, $80, $F7, $E6, $00, 'VLNPIZZ1  '
>382313	80 f7 e6 00 56 4c 4e 50 49 5a 5a 31 20 20
>382321	00 00 02 00 f0 00 0e 14		INSTRUMENT_WAVE       .text $00, $00, $02, $00, $F0, $00, $0E, $14, $80, $1B, $A2, $00, 'WAVE      '
>382329	80 1b a2 00 57 41 56 45 20 20 20 20 20 20
>382337	00 11 2d c8 2f 00 0c 31		INSTRUMENT_XYLO1      .text $00, $11, $2D, $C8, $2F, $00, $0C, $31, $00, $F5, $F5, $00, 'XYLO1     '
>38233f	00 f5 f5 00 58 59 4c 4f 31 20 20 20 20 20
>38234d	06 2e 00 ff 0f 00 00 00		INSTRUMENT_XYLO2      .text $06, $2E, $00, $FF, $0F, $00, $00, $00, $00, $00, $00, $00, 'XYLO2     '
>382355	00 00 00 00 58 59 4c 4f 32 20 20 20 20 20
>382363	00 06 00 ff f0 00 0e c4		INSTRUMENT_XYLO3      .text $00, $06, $00, $FF, $F0, $00, $0E, $C4, $00, $F8, $B5, $00, 'XYLO3     '
>38236b	00 f8 b5 00 58 59 4c 4f 33 20 20 20 20 20

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Drums.asm

>382379	00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP2         .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>382381	00 87 fa 00
>382385	00 01 00 78 97 09 00 02		DRUMINS_SCRATCH1      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>38238d	00 88 98 03
>382391	00 01 00 78 97 09 00 02		DRUMINS_SCRATCH2      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>382399	00 88 98 03
>38239d	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT2      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>3823a5	00 f9 69 00
>3823a9	00 00 00 f8 6c 01 00 0e		DRUMINS_HIQ           .text $00, $00, $00, $F8, $6C, $01, $00, $0E, $80, $E8, $4A, $00
>3823b1	80 e8 4a 00
>3823b5	00 25 1b fa f2 01 00 12		DRUMINS_WOODBLOK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>3823bd	00 f6 9a 00
>3823c1	00 06 03 f4 44 00 01 01		DRUMINS_GLOCK         .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>3823c9	1b f2 34 00
>3823cd	00 00 00 f9 f3 05 00 01		DRUMINS_BASS_DR2      .text $00, $00, $00, $F9, $F3, $05, $00, $01, $00, $F7, $8A, $00
>3823d5	00 f7 8a 00
>3823d9	00 01 07 fa fd 05 00 01		DRUMINS_BASS_DR1      .text $00, $01, $07, $FA, $FD, $05, $00, $01, $00, $F6, $47, $00
>3823e1	00 f6 47 00
>3823e5	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT       .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>3823ed	00 f9 69 00
>3823f1	00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_AC      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>3823f9	00 f7 a9 00
>3823fd	00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP          .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>382405	00 87 fa 00
>382409	00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_EL      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>382411	00 f7 a9 00
>382415	00 06 0a fa 1f 0c 00 11		DRUMINS_LO_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>38241d	00 f5 f5 00
>382421	00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_CL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>382429	06 b8 d8 03
>38242d	00 06 0a fa 1f 0c 00 11		DRUMINS_HI_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>382435	00 f5 f5 00
>382439	00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_PL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>382441	06 b8 d8 03
>382445	00 06 0a fa 1f 0c 00 11		DRUMINS_LOW_TOM       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>38244d	00 f5 f5 00
>382451	00 2e 00 82 f6 05 00 04		DRUMINS_HIHAT_OP      .text $00, $2E, $00, $82, $F6, $05, $00, $04, $10, $74, $F8, $03
>382459	10 74 f8 03
>38245d	00 06 0a fa 1f 0c 00 11		DRUMINS_LTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>382465	00 f5 f5 00
>382469	00 06 0a fa 1f 0c 00 11		DRUMINS_HTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>382471	00 f5 f5 00
>382475	00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH         .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>38247d	05 c5 d4 03
>382481	00 06 0a fa 1f 0c 00 11		DRUMINS_TOM_HIGH      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>382489	00 f5 f5 00
>38248d	00 29 10 94 00 0f 00 04		DRUMINS_RIDE_CY       .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>382495	04 f9 44 03
>382499	00 2c 00 9f 00 0f 02 0e		DRUMINS_TAMBOUR       .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>3824a1	05 c5 d4 03
>3824a5	00 29 10 94 00 0f 00 04		DRUMINS_CYMBAL        .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>3824ad	04 f9 44 03
>3824b1	00 2e 09 f5 f1 01 00 06		DRUMINS_TAMBOU2       .text $00, $2E, $09, $F5, $F1, $01, $00, $06, $03, $87, $F7, $03
>3824b9	03 87 f7 03
>3824bd	00 2c 00 9f 00 0f 02 0e		DRUMINS_SPLASH        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>3824c5	05 c5 d4 03
>3824c9	00 37 14 f7 a1 09 01 03		DRUMINS_COWBELL       .text $00, $37, $14, $F7, $A1, $09, $01, $03, $00, $F6, $28, $00
>3824d1	00 f6 28 00
>3824d5	00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH2        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>3824dd	05 c5 d4 03
>3824e1	00 80 00 ff 00 0d 01 00		DRUMINS_VIBRASLA      .text $00, $80, $00, $FF, $00, $0D, $01, $00, $00, $F5, $F7, $01
>3824e9	00 f5 f7 01
>3824ed	00 29 10 94 00 0f 00 04		DRUMINS_RIDE2         .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>3824f5	04 f9 44 03
>3824f9	00 25 c4 fa fa 01 00 03		DRUMINS_HI_BONGO      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>382501	00 99 f9 00
>382505	00 21 03 fb fa 01 01 02		DRUMINS_LO_BONGO      .text $00, $21, $03, $FB, $FA, $01, $01, $02, $00, $A8, $F7, $00
>38250d	00 a8 f7 00
>382511	00 25 c4 fa fa 01 00 03		DRUMINS_MUTECONG      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>382519	00 99 f9 00
>38251d	00 24 18 f9 fa 0f 02 03		DRUMINS_OPENCONG      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>382525	00 a6 f6 00
>382529	00 24 18 f9 fa 0f 02 03		DRUMINS_LOWCONGA      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>382531	00 a6 f6 00
>382535	00 05 14 f5 f5 07 02 03		DRUMINS_HI_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>38253d	00 f6 36 02
>382541	00 05 14 f5 f5 07 02 03		DRUMINS_LO_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>382549	00 f6 36 02
>38254d	00 1c 0c f9 31 0f 01 15		DRUMINS_HI_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>382555	00 96 e8 01
>382559	00 1c 0c f9 31 0f 01 15		DRUMINS_LO_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>382561	00 96 e8 01
>382565	00 0e 00 ff 01 0f 00 0e		DRUMINS_CABASA        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>38256d	02 79 77 03
>382571	00 0e 00 ff 01 0f 00 0e		DRUMINS_MARACAS       .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>382579	02 79 77 03
>38257d	00 20 15 af 07 05 01 0e		DRUMINS_S_WHISTL      .text $00, $20, $15, $AF, $07, $05, $01, $0E, $00, $A5, $2B, $02
>382585	00 a5 2b 02
>382589	00 20 18 bf 07 01 01 0e		DRUMINS_L_WHISTL      .text $00, $20, $18, $BF, $07, $01, $01, $0E, $00, $93, $3B, $02
>382591	00 93 3b 02
>382595	00 20 00 f0 f7 0b 00 08		DRUMINS_S_GUIRO       .text $00, $20, $00, $F0, $F7, $0B, $00, $08, $01, $89, $3B, $03
>38259d	01 89 3b 03
>3825a1	00 20 00 f3 fa 09 00 08		DRUMINS_L_GUIRO       .text $00, $20, $00, $F3, $FA, $09, $00, $08, $0A, $53, $2B, $02
>3825a9	0a 53 2b 02
>3825ad	00 15 21 f8 9a 09 01 13		DRUMINS_CLAVES        .text $00, $15, $21, $F8, $9A, $09, $01, $13, $00, $F6, $89, $00
>3825b5	00 f6 89 00
>3825b9	00 25 1b fa f2 01 00 12		DRUMINS_HI_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>3825c1	00 f6 9a 00
>3825c5	00 25 1b fa f2 01 00 12		DRUMINS_LO_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>3825cd	00 f6 9a 00
>3825d1	00 20 01 5f 07 01 00 08		DRUMINS_MU_CUICA      .text $00, $20, $01, $5F, $07, $01, $00, $08, $00, $87, $4B, $01
>3825d9	00 87 4b 01
>3825dd	00 25 12 57 f7 01 01 03		DRUMINS_OP_CUICA      .text $00, $25, $12, $57, $F7, $01, $01, $03, $00, $78, $67, $01
>3825e5	00 78 67 01
>3825e9	00 22 2f f1 f0 07 00 27		DRUMINS_MU_TRNGL      .text $00, $22, $2F, $F1, $F0, $07, $00, $27, $02, $F8, $FC, $00
>3825f1	02 f8 fc 00
>3825f5	00 26 44 f1 f0 07 00 27		DRUMINS_OP_TRNGL      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>3825fd	40 f5 f5 00
>382601	00 0e 00 ff 01 0f 00 0e		DRUMINS_SHAKER        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>382609	02 79 77 03
>38260d	00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL1      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>382615	40 f5 f5 00
>382619	00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL2      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>382621	40 f5 f5 00
>382625	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT3      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>38262d	00 f9 69 00
>382631	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT4      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>382639	00 f9 69 00
>38263d	00 02 1d f5 93 01 00 00		DRUMINS_TAIKO         .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>382645	00 c6 45 00
=27					DRUM_NOTE_BASE = 27;
=60					NUM_MIDI_DRUMS = 60;
>382649	79 23 38 00 85 23 38 00		midiDrums     .dword DRUMINS_CLAP2, DRUMINS_SCRATCH1, DRUMINS_SCRATCH2, DRUMINS_RIMSHOT2
>382651	91 23 38 00 9d 23 38 00
>382659	a9 23 38 00 b5 23 38 00		              .dword DRUMINS_HIQ, DRUMINS_WOODBLOK, DRUMINS_GLOCK, DRUMINS_BASS_DR2
>382661	c1 23 38 00 cd 23 38 00
>382669	d9 23 38 00 e5 23 38 00		              .dword DRUMINS_BASS_DR1, DRUMINS_RIMSHOT,  DRUMINS_SNARE_AC, DRUMINS_CLAP
>382671	f1 23 38 00 fd 23 38 00
>382679	09 24 38 00 15 24 38 00		              .dword DRUMINS_SNARE_EL, DRUMINS_LO_TOMS,  DRUMINS_HIHAT_CL, DRUMINS_HI_TOMS
>382681	21 24 38 00 2d 24 38 00
>382689	39 24 38 00 45 24 38 00		              .dword DRUMINS_HIHAT_PL, DRUMINS_LOW_TOM,	DRUMINS_HIHAT_OP, DRUMINS_LTOM_MID
>382691	51 24 38 00 5d 24 38 00
>382699	69 24 38 00 75 24 38 00		              .dword DRUMINS_HTOM_MID, DRUMINS_CRASH,    DRUMINS_TOM_HIGH, DRUMINS_RIDE_CY
>3826a1	81 24 38 00 8d 24 38 00
>3826a9	99 24 38 00 a5 24 38 00		              .dword DRUMINS_TAMBOUR,  DRUMINS_CYMBAL,   DRUMINS_TAMBOU2,  DRUMINS_SPLASH
>3826b1	b1 24 38 00 bd 24 38 00
>3826b9	c9 24 38 00 d5 24 38 00		              .dword DRUMINS_COWBELL,  DRUMINS_CRASH2, 	DRUMINS_VIBRASLA, DRUMINS_RIDE2
>3826c1	e1 24 38 00 ed 24 38 00
>3826c9	f9 24 38 00 05 25 38 00		              .dword DRUMINS_HI_BONGO, DRUMINS_LO_BONGO, DRUMINS_MUTECONG, DRUMINS_OPENCONG
>3826d1	11 25 38 00 1d 25 38 00
>3826d9	29 25 38 00 35 25 38 00		              .dword DRUMINS_LOWCONGA, DRUMINS_HI_TIMBA, DRUMINS_LO_TIMBA, DRUMINS_HI_AGOGO
>3826e1	41 25 38 00 4d 25 38 00
>3826e9	59 25 38 00 65 25 38 00		              .dword DRUMINS_LO_AGOGO, DRUMINS_CABASA, DRUMINS_MARACAS,  DRUMINS_S_WHISTL
>3826f1	71 25 38 00 7d 25 38 00
>3826f9	89 25 38 00 95 25 38 00		              .dword DRUMINS_L_WHISTL, DRUMINS_S_GUIRO,  DRUMINS_L_GUIRO,  DRUMINS_CLAVES
>382701	a1 25 38 00 ad 25 38 00
>382709	b9 25 38 00 c5 25 38 00		              .dword DRUMINS_HI_WDBLK, DRUMINS_LO_WDBLK, DRUMINS_MU_CUICA, DRUMINS_OP_CUICA
>382711	d1 25 38 00 dd 25 38 00
>382719	e9 25 38 00 f5 25 38 00		              .dword DRUMINS_MU_TRNGL, DRUMINS_OP_TRNGL, DRUMINS_SHAKER, DRUMINS_TRIANGL1
>382721	01 26 38 00 0d 26 38 00
>382729	19 26 38 00 25 26 38 00		              .dword DRUMINS_TRIANGL2, DRUMINS_RIMSHOT3, DRUMINS_RIMSHOT4, DRUMINS_TAIKO
>382731	31 26 38 00 3d 26 38 00

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Instruments.asm

>382739	00 33 5a b2 50 01 00 31		MIDI_INSTRUMENT_PIANO1     .text $00, $33, $5A, $B2, $50, $01, $00, $31, $00, $B1, $F5, $01
>382741	00 b1 f5 01
>382745	00 31 49 f2 53 07 01 11		MIDI_INSTRUMENT_PIANO2     .text $00, $31, $49, $F2, $53, $07, $01, $11, $03, $F1, $F5, $00
>38274d	03 f1 f5 00
>382751	00 31 95 d1 83 0d 01 32		MIDI_INSTRUMENT_PIANO3     .text $00, $31, $95, $D1, $83, $0D, $01, $32, $03, $C1, $F5, $00
>382759	03 c1 f5 00
>38275d	00 34 9b f3 63 01 01 11		MIDI_INSTRUMENT_HONKTONK   .text $00, $34, $9B, $F3, $63, $01, $01, $11, $00, $92, $F5, $01
>382765	00 92 f5 01
>382769	00 27 28 f8 b7 01 02 91		MIDI_INSTRUMENT_EP1        .text $00, $27, $28, $F8, $B7, $01, $02, $91, $00, $F1, $F9, $00
>382771	00 f1 f9 00
>382775	00 1a 2d f3 ee 01 01 11		MIDI_INSTRUMENT_EP2        .text $00, $1A, $2D, $F3, $EE, $01, $01, $11, $00, $F1, $F5, $00
>38277d	00 f1 f5 00
>382781	00 35 95 f2 58 0f 01 32		MIDI_INSTRUMENT_HARPSIC    .text $00, $35, $95, $F2, $58, $0F, $01, $32, $02, $81, $F6, $01
>382789	02 81 f6 01
>38278d	00 31 85 c9 40 01 00 35		MIDI_INSTRUMENT_CLAVIC     .text $00, $31, $85, $C9, $40, $01, $00, $35, $00, $C2, $B9, $01
>382795	00 c2 b9 01
>382799	00 09 15 c7 64 08 00 01		MIDI_INSTRUMENT_CELESTA    .text $00, $09, $15, $C7, $64, $08, $00, $01, $05, $B2, $35, $00
>3827a1	05 b2 35 00
>3827a5	00 06 03 f4 44 00 01 01		MIDI_INSTRUMENT_GLOCK      .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>3827ad	1b f2 34 00
>3827b1	00 04 06 a9 24 0a 01 01		MIDI_INSTRUMENT_MUSICBOX   .text $00, $04, $06, $A9, $24, $0A, $01, $01, $01, $F5, $74, $00
>3827b9	01 f5 74 00
>3827bd	00 d4 00 f6 33 00 00 f1		MIDI_INSTRUMENT_VIBES      .text $00, $D4, $00, $F6, $33, $00, $00, $F1, $00, $61, $E3, $00
>3827c5	00 61 e3 00
>3827c9	00 d4 00 f7 e8 04 00 d1		MIDI_INSTRUMENT_MARIMBA    .text $00, $D4, $00, $F7, $E8, $04, $00, $D1, $00, $A4, $64, $00
>3827d1	00 a4 64 00
>3827d5	00 36 16 f7 f7 01 00 31		MIDI_INSTRUMENT_XYLO       .text $00, $36, $16, $F7, $F7, $01, $00, $31, $07, $B5, $F5, $00
>3827dd	07 b5 f5 00
>3827e1	00 03 1b a2 43 0b 00 00		MIDI_INSTRUMENT_TUBEBELL   .text $00, $03, $1B, $A2, $43, $0B, $00, $00, $00, $F3, $74, $00
>3827e9	00 f3 74 00
>3827ed	00 c3 8e f8 35 01 01 11		MIDI_INSTRUMENT_SANTUR     .text $00, $C3, $8E, $F8, $35, $01, $01, $11, $00, $C3, $94, $01
>3827f5	00 c3 94 01
>3827f9	00 e2 07 f4 1b 06 01 e0		MIDI_INSTRUMENT_ORGAN1     .text $00, $E2, $07, $F4, $1B, $06, $01, $E0, $00, $F4, $0D, $01
>382801	00 f4 0d 01
>382805	00 f2 00 f6 2c 04 00 f0		MIDI_INSTRUMENT_ORGAN2     .text $00, $F2, $00, $F6, $2C, $04, $00, $F0, $00, $F5, $0B, $01
>38280d	00 f5 0b 01
>382811	00 f1 06 b6 15 0a 00 f0		MIDI_INSTRUMENT_ORGAN3     .text $00, $F1, $06, $B6, $15, $0A, $00, $F0, $00, $BF, $07, $00
>382819	00 bf 07 00
>38281d	00 22 03 79 16 08 01 e0		MIDI_INSTRUMENT_PIPEORG    .text $00, $22, $03, $79, $16, $08, $01, $E0, $00, $6D, $08, $01
>382825	00 6d 08 01
>382829	00 31 27 63 06 01 00 72		MIDI_INSTRUMENT_REEDORG    .text $00, $31, $27, $63, $06, $01, $00, $72, $00, $51, $17, $01
>382831	00 51 17 01
>382835	00 b4 1d 53 16 0f 01 71		MIDI_INSTRUMENT_ACORDIAN   .text $00, $B4, $1D, $53, $16, $0F, $01, $71, $00, $51, $17, $01
>38283d	00 51 17 01
>382841	00 25 29 97 15 01 00 32		MIDI_INSTRUMENT_HARMONIC   .text $00, $25, $29, $97, $15, $01, $00, $32, $00, $53, $08, $01
>382849	00 53 08 01
>38284d	00 24 9e 67 15 0f 00 31		MIDI_INSTRUMENT_BANDNEON   .text $00, $24, $9E, $67, $15, $0F, $00, $31, $00, $53, $06, $01
>382855	00 53 06 01
>382859	00 13 27 a3 b4 05 01 31		MIDI_INSTRUMENT_NYLONGT    .text $00, $13, $27, $A3, $B4, $05, $01, $31, $00, $D2, $F8, $00
>382861	00 d2 f8 00
>382865	00 17 a3 f3 32 01 00 11		MIDI_INSTRUMENT_STEELGT    .text $00, $17, $A3, $F3, $32, $01, $00, $11, $00, $E2, $C7, $01
>38286d	00 e2 c7 01
>382871	00 33 24 d2 c1 0f 01 31		MIDI_INSTRUMENT_JAZZGT     .text $00, $33, $24, $D2, $C1, $0F, $01, $31, $00, $F1, $9C, $00
>382879	00 f1 9c 00
>38287d	00 31 05 f8 44 01 00 32		MIDI_INSTRUMENT_CLEANGT    .text $00, $31, $05, $F8, $44, $01, $00, $32, $02, $F2, $C9, $01
>382885	02 f2 c9 01
>382889	00 21 09 9c 7b 07 00 02		MIDI_INSTRUMENT_MUTEGT     .text $00, $21, $09, $9C, $7B, $07, $00, $02, $03, $95, $FB, $00
>382891	03 95 fb 00
>382895	00 21 84 81 98 07 01 21		MIDI_INSTRUMENT_OVERDGT    .text $00, $21, $84, $81, $98, $07, $01, $21, $04, $A1, $59, $00
>38289d	04 a1 59 00
>3828a1	00 b1 0c 78 43 01 00 22		MIDI_INSTRUMENT_DISTGT     .text $00, $B1, $0C, $78, $43, $01, $00, $22, $03, $91, $FC, $03
>3828a9	03 91 fc 03
>3828ad	00 00 0a 82 8c 09 00 08		MIDI_INSTRUMENT_GTHARMS    .text $00, $00, $0A, $82, $8C, $09, $00, $08, $02, $B4, $EC, $00
>3828b5	02 b4 ec 00
>3828b9	00 21 13 ab 46 01 00 21		MIDI_INSTRUMENT_ACOUBASS   .text $00, $21, $13, $AB, $46, $01, $00, $21, $00, $93, $F7, $00
>3828c1	00 93 f7 00
>3828c5	00 01 0a f9 32 01 00 22		MIDI_INSTRUMENT_FINGBASS   .text $00, $01, $0A, $F9, $32, $01, $00, $22, $04, $C1, $58, $00
>3828cd	04 c1 58 00
>3828d1	00 21 07 fa 77 0b 00 22		MIDI_INSTRUMENT_PICKBASS   .text $00, $21, $07, $FA, $77, $0B, $00, $22, $02, $C3, $6A, $00
>3828d9	02 c3 6a 00
>3828dd	00 21 17 71 57 0b 00 21		MIDI_INSTRUMENT_FRETLESS   .text $00, $21, $17, $71, $57, $0B, $00, $21, $00, $62, $87, $00
>3828e5	00 62 87 00
>3828e9	00 25 01 fa 78 07 01 12		MIDI_INSTRUMENT_SLAPBAS1   .text $00, $25, $01, $FA, $78, $07, $01, $12, $00, $F3, $97, $00
>3828f1	00 f3 97 00
>3828f5	00 21 03 fa 88 0d 00 13		MIDI_INSTRUMENT_SLAPBAS2   .text $00, $21, $03, $FA, $88, $0D, $00, $13, $00, $B3, $97, $00
>3828fd	00 b3 97 00
>382901	00 21 09 f5 7f 09 01 23		MIDI_INSTRUMENT_SYNBASS1   .text $00, $21, $09, $F5, $7F, $09, $01, $23, $04, $F3, $CC, $00
>382909	04 f3 cc 00
>38290d	00 01 10 a3 9b 09 00 01		MIDI_INSTRUMENT_SYNBASS2   .text $00, $01, $10, $A3, $9B, $09, $00, $01, $00, $93, $AA, $00
>382915	00 93 aa 00
>382919	00 e2 19 f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLIN     .text $00, $E2, $19, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>382921	00 78 08 01
>382925	00 e2 1c f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLA      .text $00, $E2, $1C, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>38292d	00 78 08 01
>382931	00 61 19 69 16 0b 01 61		MIDI_INSTRUMENT_CELLO      .text $00, $61, $19, $69, $16, $0B, $01, $61, $00, $54, $27, $01
>382939	00 54 27 01
>38293d	00 71 18 82 31 0d 01 32		MIDI_INSTRUMENT_CONTRAB    .text $00, $71, $18, $82, $31, $0D, $01, $32, $00, $61, $56, $00
>382945	00 61 56 00
>382949	00 e2 23 70 06 0d 01 e1		MIDI_INSTRUMENT_TREMSTR    .text $00, $E2, $23, $70, $06, $0D, $01, $E1, $00, $75, $16, $01
>382951	00 75 16 01
>382955	00 02 00 88 e6 08 00 61		MIDI_INSTRUMENT_PIZZ       .text $00, $02, $00, $88, $E6, $08, $00, $61, $00, $F5, $F6, $01
>38295d	00 f5 f6 01
>382961	00 12 20 f6 d5 0f 01 11		MIDI_INSTRUMENT_HARP       .text $00, $12, $20, $F6, $D5, $0F, $01, $11, $80, $F3, $E3, $00
>382969	80 f3 e3 00
>38296d	00 61 0e f4 f4 01 01 00		MIDI_INSTRUMENT_TIMPANI    .text $00, $61, $0E, $F4, $F4, $01, $01, $00, $00, $B5, $F5, $00
>382975	00 b5 f5 00
>382979	00 61 1e 9c 04 0f 01 21		MIDI_INSTRUMENT_STRINGS    .text $00, $61, $1E, $9C, $04, $0F, $01, $21, $80, $71, $16, $00
>382981	80 71 16 00
>382985	00 a2 2a c0 d6 0f 02 21		MIDI_INSTRUMENT_SLOWSTR    .text $00, $A2, $2A, $C0, $D6, $0F, $02, $21, $00, $30, $55, $01
>38298d	00 30 55 01
>382991	00 61 21 72 35 0f 01 61		MIDI_INSTRUMENT_SYNSTR1    .text $00, $61, $21, $72, $35, $0F, $01, $61, $00, $62, $36, $01
>382999	00 62 36 01
>38299d	00 21 1a 72 23 0f 01 21		MIDI_INSTRUMENT_SYNSTR2    .text $00, $21, $1A, $72, $23, $0F, $01, $21, $02, $51, $07, $00
>3829a5	02 51 07 00
>3829a9	00 e1 16 97 31 09 00 61		MIDI_INSTRUMENT_CHOIR      .text $00, $E1, $16, $97, $31, $09, $00, $61, $00, $62, $39, $00
>3829b1	00 62 39 00
>3829b5	00 22 c3 79 45 01 00 21		MIDI_INSTRUMENT_OOHS       .text $00, $22, $C3, $79, $45, $01, $00, $21, $00, $66, $27, $00
>3829bd	00 66 27 00
>3829c1	00 21 de 63 55 01 01 21		MIDI_INSTRUMENT_SYNVOX     .text $00, $21, $DE, $63, $55, $01, $01, $21, $00, $73, $46, $00
>3829c9	00 73 46 00
>3829cd	00 42 05 86 f7 0a 00 50		MIDI_INSTRUMENT_ORCHIT     .text $00, $42, $05, $86, $F7, $0A, $00, $50, $00, $74, $76, $01
>3829d5	00 74 76 01
>3829d9	00 31 1c 61 02 0f 00 61		MIDI_INSTRUMENT_TRUMPET    .text $00, $31, $1C, $61, $02, $0F, $00, $61, $81, $92, $38, $00
>3829e1	81 92 38 00
>3829e5	00 71 1e 52 23 0f 00 61		MIDI_INSTRUMENT_TROMBONE   .text $00, $71, $1E, $52, $23, $0F, $00, $61, $02, $71, $19, $00
>3829ed	02 71 19 00
>3829f1	00 21 1a 76 16 0f 00 21		MIDI_INSTRUMENT_TUBA       .text $00, $21, $1A, $76, $16, $0F, $00, $21, $01, $81, $09, $00
>3829f9	01 81 09 00
>3829fd	00 25 28 89 2c 07 02 20		MIDI_INSTRUMENT_MUTETRP    .text $00, $25, $28, $89, $2C, $07, $02, $20, $00, $83, $4B, $02
>382a05	00 83 4b 02
>382a09	00 21 1f 79 16 09 00 a2		MIDI_INSTRUMENT_FRHORN     .text $00, $21, $1F, $79, $16, $09, $00, $A2, $05, $71, $59, $00
>382a11	05 71 59 00
>382a15	00 21 19 87 16 0f 00 21		MIDI_INSTRUMENT_BRASS1     .text $00, $21, $19, $87, $16, $0F, $00, $21, $03, $82, $39, $00
>382a1d	03 82 39 00
>382a21	00 21 17 75 35 0f 00 22		MIDI_INSTRUMENT_SYNBRAS1   .text $00, $21, $17, $75, $35, $0F, $00, $22, $82, $84, $17, $00
>382a29	82 84 17 00
>382a2d	00 21 22 62 58 0f 00 21		MIDI_INSTRUMENT_SYNBRAS2   .text $00, $21, $22, $62, $58, $0F, $00, $21, $02, $72, $16, $00
>382a35	02 72 16 00
>382a39	00 b1 1b 59 07 01 01 a1		MIDI_INSTRUMENT_SOPSAX     .text $00, $B1, $1B, $59, $07, $01, $01, $A1, $00, $7B, $0A, $00
>382a41	00 7b 0a 00
>382a45	00 21 16 9f 04 0b 00 21		MIDI_INSTRUMENT_ALTOSAX    .text $00, $21, $16, $9F, $04, $0B, $00, $21, $00, $85, $0C, $01
>382a4d	00 85 0c 01
>382a51	00 21 0f a8 20 0d 00 23		MIDI_INSTRUMENT_TENSAX     .text $00, $21, $0F, $A8, $20, $0D, $00, $23, $00, $7B, $0A, $01
>382a59	00 7b 0a 01
>382a5d	00 21 0f 88 04 09 00 26		MIDI_INSTRUMENT_BARISAX    .text $00, $21, $0F, $88, $04, $09, $00, $26, $00, $79, $18, $01
>382a65	00 79 18 01
>382a69	00 31 18 8f 05 01 00 32		MIDI_INSTRUMENT_OBOE       .text $00, $31, $18, $8F, $05, $01, $00, $32, $01, $73, $08, $00
>382a71	01 73 08 00
>382a75	00 a1 0a 8c 37 01 01 24		MIDI_INSTRUMENT_ENGLHORN   .text $00, $A1, $0A, $8C, $37, $01, $01, $24, $04, $77, $0A, $00
>382a7d	04 77 0a 00
>382a81	00 31 04 a8 67 0b 00 75		MIDI_INSTRUMENT_BASSOON    .text $00, $31, $04, $A8, $67, $0B, $00, $75, $00, $51, $19, $00
>382a89	00 51 19 00
>382a8d	00 a2 1f 77 26 01 01 21		MIDI_INSTRUMENT_CLARINET   .text $00, $A2, $1F, $77, $26, $01, $01, $21, $01, $74, $09, $00
>382a95	01 74 09 00
>382a99	00 e1 07 b8 94 01 01 21		MIDI_INSTRUMENT_PICCOLO    .text $00, $E1, $07, $B8, $94, $01, $01, $21, $01, $63, $28, $00
>382aa1	01 63 28 00
>382aa5	00 a1 93 87 59 01 00 e1		MIDI_INSTRUMENT_FLUTE1     .text $00, $A1, $93, $87, $59, $01, $00, $E1, $00, $65, $0A, $00
>382aad	00 65 0a 00
>382ab1	00 22 10 9f 38 01 00 61		MIDI_INSTRUMENT_RECORDER   .text $00, $22, $10, $9F, $38, $01, $00, $61, $00, $67, $29, $00
>382ab9	00 67 29 00
>382abd	00 e2 0d 88 9a 01 01 21		MIDI_INSTRUMENT_PANFLUTE   .text $00, $E2, $0D, $88, $9A, $01, $01, $21, $00, $67, $09, $00
>382ac5	00 67 09 00
>382ac9	00 a2 10 98 94 0f 00 21		MIDI_INSTRUMENT_BOTTLEB    .text $00, $A2, $10, $98, $94, $0F, $00, $21, $01, $6A, $28, $00
>382ad1	01 6a 28 00
>382ad5	00 f1 1c 86 26 0f 00 f1		MIDI_INSTRUMENT_SHAKU      .text $00, $F1, $1C, $86, $26, $0F, $00, $F1, $00, $55, $27, $00
>382add	00 55 27 00
>382ae1	00 e1 3f 9f 09 00 00 e1		MIDI_INSTRUMENT_WHISTLE    .text $00, $E1, $3F, $9F, $09, $00, $00, $E1, $00, $6F, $08, $00
>382ae9	00 6f 08 00
>382aed	00 e2 3b f7 19 01 00 21		MIDI_INSTRUMENT_OCARINA    .text $00, $E2, $3B, $F7, $19, $01, $00, $21, $00, $7A, $07, $00
>382af5	00 7a 07 00
>382af9	00 22 1e 92 0c 0f 00 61		MIDI_INSTRUMENT_SQUARWAV   .text $00, $22, $1E, $92, $0C, $0F, $00, $61, $06, $A2, $0D, $00
>382b01	06 a2 0d 00
>382b05	00 21 15 f4 22 0f 01 21		MIDI_INSTRUMENT_SAWWAV     .text $00, $21, $15, $F4, $22, $0F, $01, $21, $00, $A3, $5F, $00
>382b0d	00 a3 5f 00
>382b11	00 f2 20 47 66 03 01 f1		MIDI_INSTRUMENT_SYNCALLI   .text $00, $F2, $20, $47, $66, $03, $01, $F1, $00, $42, $27, $00
>382b19	00 42 27 00
>382b1d	00 61 19 88 28 0f 00 61		MIDI_INSTRUMENT_CHIFLEAD   .text $00, $61, $19, $88, $28, $0F, $00, $61, $05, $B2, $49, $00
>382b25	05 b2 49 00
>382b29	00 21 16 82 1b 01 00 23		MIDI_INSTRUMENT_CHARANG    .text $00, $21, $16, $82, $1B, $01, $00, $23, $00, $B2, $79, $01
>382b31	00 b2 79 01
>382b35	00 21 00 ca 93 01 00 22		MIDI_INSTRUMENT_SOLOVOX    .text $00, $21, $00, $CA, $93, $01, $00, $22, $00, $7A, $1A, $00
>382b3d	00 7a 1a 00
>382b41	00 23 00 92 c9 08 01 22		MIDI_INSTRUMENT_FIFTHSAW   .text $00, $23, $00, $92, $C9, $08, $01, $22, $00, $82, $28, $01
>382b49	00 82 28 01
>382b4d	00 21 1d f3 7b 0f 00 22		MIDI_INSTRUMENT_BASSLEAD   .text $00, $21, $1D, $F3, $7B, $0F, $00, $22, $02, $C3, $5F, $00
>382b55	02 c3 5f 00
>382b59	00 e1 00 81 25 00 01 a6		MIDI_INSTRUMENT_FANTASIA   .text $00, $E1, $00, $81, $25, $00, $01, $A6, $86, $C4, $95, $01
>382b61	86 c4 95 01
>382b65	00 21 27 31 01 0f 00 21		MIDI_INSTRUMENT_WARMPAD    .text $00, $21, $27, $31, $01, $0F, $00, $21, $00, $44, $15, $00
>382b6d	00 44 15 00
>382b71	00 60 14 83 35 0d 02 61		MIDI_INSTRUMENT_POLYSYN    .text $00, $60, $14, $83, $35, $0D, $02, $61, $00, $D1, $06, $00
>382b79	00 d1 06 00
>382b7d	00 e1 5c d3 01 01 01 62		MIDI_INSTRUMENT_SPACEVOX   .text $00, $E1, $5C, $D3, $01, $01, $01, $62, $00, $82, $37, $00
>382b85	00 82 37 00
>382b89	00 28 38 34 86 01 02 21		MIDI_INSTRUMENT_BOWEDGLS   .text $00, $28, $38, $34, $86, $01, $02, $21, $00, $41, $35, $00
>382b91	00 41 35 00
>382b95	00 24 12 52 f3 05 01 23		MIDI_INSTRUMENT_METALPAD   .text $00, $24, $12, $52, $F3, $05, $01, $23, $02, $32, $F5, $01
>382b9d	02 32 f5 01
>382ba1	00 61 1d 62 a6 0b 00 a1		MIDI_INSTRUMENT_HALOPAD    .text $00, $61, $1D, $62, $A6, $0B, $00, $A1, $00, $61, $26, $00
>382ba9	00 61 26 00
>382bad	00 22 0f 22 d5 0b 01 21		MIDI_INSTRUMENT_SWEEPPAD   .text $00, $22, $0F, $22, $D5, $0B, $01, $21, $84, $3F, $05, $01
>382bb5	84 3f 05 01
>382bb9	00 e3 1f f9 24 01 00 31		MIDI_INSTRUMENT_ICERAIN    .text $00, $E3, $1F, $F9, $24, $01, $00, $31, $01, $D1, $F6, $00
>382bc1	01 d1 f6 00
>382bc5	00 63 00 41 55 06 01 a2		MIDI_INSTRUMENT_SOUNDTRK   .text $00, $63, $00, $41, $55, $06, $01, $A2, $00, $41, $05, $01
>382bcd	00 41 05 01
>382bd1	00 c7 25 a7 65 01 01 c1		MIDI_INSTRUMENT_CRYSTAL    .text $00, $C7, $25, $A7, $65, $01, $01, $C1, $05, $F3, $E4, $00
>382bd9	05 f3 e4 00
>382bdd	00 e3 19 f7 b7 01 01 61		MIDI_INSTRUMENT_ATMOSPH    .text $00, $E3, $19, $F7, $B7, $01, $01, $61, $00, $92, $F5, $01
>382be5	00 92 f5 01
>382be9	00 66 9b a8 44 0f 00 41		MIDI_INSTRUMENT_BRIGHT     .text $00, $66, $9B, $A8, $44, $0F, $00, $41, $04, $F2, $E4, $01
>382bf1	04 f2 e4 01
>382bf5	00 61 20 22 75 0d 00 61		MIDI_INSTRUMENT_GOBLIN     .text $00, $61, $20, $22, $75, $0D, $00, $61, $00, $45, $25, $00
>382bfd	00 45 25 00
>382c01	00 e1 21 f6 84 0f 00 e1		MIDI_INSTRUMENT_ECHODROP   .text $00, $E1, $21, $F6, $84, $0F, $00, $E1, $01, $A3, $36, $00
>382c09	01 a3 36 00
>382c0d	00 e2 14 73 64 0b 01 e1		MIDI_INSTRUMENT_STARTHEM   .text $00, $E2, $14, $73, $64, $0B, $01, $E1, $01, $98, $05, $01
>382c15	01 98 05 01
>382c19	00 21 0b 72 34 09 00 24		MIDI_INSTRUMENT_SITAR      .text $00, $21, $0B, $72, $34, $09, $00, $24, $02, $A3, $F6, $01
>382c21	02 a3 f6 01
>382c25	00 21 16 f4 53 0d 00 04		MIDI_INSTRUMENT_BANJO      .text $00, $21, $16, $F4, $53, $0D, $00, $04, $00, $F6, $F8, $00
>382c2d	00 f6 f8 00
>382c31	00 21 18 da 02 0d 00 35		MIDI_INSTRUMENT_SHAMISEN   .text $00, $21, $18, $DA, $02, $0D, $00, $35, $00, $F3, $F5, $00
>382c39	00 f3 f5 00
>382c3d	00 25 0f fa 63 09 00 02		MIDI_INSTRUMENT_KOTO       .text $00, $25, $0F, $FA, $63, $09, $00, $02, $00, $94, $E5, $01
>382c45	00 94 e5 01
>382c49	00 32 07 f9 96 01 00 11		MIDI_INSTRUMENT_KALIMBA    .text $00, $32, $07, $F9, $96, $01, $00, $11, $00, $84, $44, $00
>382c51	00 84 44 00
>382c55	00 20 0e 97 18 09 02 25		MIDI_INSTRUMENT_BAGPIPE    .text $00, $20, $0E, $97, $18, $09, $02, $25, $03, $83, $18, $01
>382c5d	03 83 18 01
>382c61	00 61 18 f6 29 01 00 62		MIDI_INSTRUMENT_FIDDLE     .text $00, $61, $18, $F6, $29, $01, $00, $62, $01, $78, $08, $01
>382c69	01 78 08 01
>382c6d	00 e6 21 76 19 0b 00 61		MIDI_INSTRUMENT_SHANNAI    .text $00, $E6, $21, $76, $19, $0B, $00, $61, $03, $8E, $08, $01
>382c75	03 8e 08 01
>382c79	00 27 23 f0 d4 01 00 05		MIDI_INSTRUMENT_TINKLBEL   .text $00, $27, $23, $F0, $D4, $01, $00, $05, $09, $F2, $46, $00
>382c81	09 f2 46 00
>382c85	00 1c 0c f9 31 0f 01 15		MIDI_INSTRUMENT_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>382c8d	00 96 e8 01
>382c91	00 02 00 75 16 06 02 01		MIDI_INSTRUMENT_STEELDRM   .text $00, $02, $00, $75, $16, $06, $02, $01, $00, $F6, $F6, $01
>382c99	00 f6 f6 01
>382c9d	00 25 1b fa f2 01 00 12		MIDI_INSTRUMENT_WOODBLOK   .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>382ca5	00 f6 9a 00
>382ca9	00 02 1d f5 93 01 00 00		MIDI_INSTRUMENT_TAIKO      .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>382cb1	00 c6 45 00
>382cb5	00 11 15 f5 32 05 00 10		MIDI_INSTRUMENT_MELOTOM    .text $00, $11, $15, $F5, $32, $05, $00, $10, $00, $F4, $B4, $00
>382cbd	00 f4 b4 00
>382cc1	00 22 06 fa 99 09 00 01		MIDI_INSTRUMENT_SYNDRUM    .text $00, $22, $06, $FA, $99, $09, $00, $01, $00, $D5, $25, $00
>382cc9	00 d5 25 00
>382ccd	00 2e 00 ff 00 0f 02 0e		MIDI_INSTRUMENT_REVRSCYM   .text $00, $2E, $00, $FF, $00, $0F, $02, $0E, $0E, $21, $2D, $00
>382cd5	0e 21 2d 00
>382cd9	00 30 0b 56 e4 01 01 17		MIDI_INSTRUMENT_FRETNOIS   .text $00, $30, $0B, $56, $E4, $01, $01, $17, $00, $55, $87, $02
>382ce1	00 55 87 02
>382ce5	00 24 00 ff 03 0d 00 05		MIDI_INSTRUMENT_BRTHNOIS   .text $00, $24, $00, $FF, $03, $0D, $00, $05, $08, $98, $87, $01
>382ced	08 98 87 01
>382cf1	00 0e 00 f0 00 0f 02 0a		MIDI_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F0, $00, $0F, $02, $0A, $04, $17, $04, $03
>382cf9	04 17 04 03
>382cfd	00 20 08 f6 f7 01 00 0e		MIDI_INSTRUMENT_BIRDS      .text $00, $20, $08, $F6, $F7, $01, $00, $0E, $05, $77, $F9, $02
>382d05	05 77 f9 02
>382d09	00 20 14 f1 08 01 00 2e		MIDI_INSTRUMENT_TELEPHON   .text $00, $20, $14, $F1, $08, $01, $00, $2E, $02, $F4, $08, $00
>382d11	02 f4 08 00
>382d15	00 20 04 f2 00 03 01 23		MIDI_INSTRUMENT_HELICOPT   .text $00, $20, $04, $F2, $00, $03, $01, $23, $00, $36, $05, $01
>382d1d	00 36 05 01
>382d21	00 2e 00 ff 02 0f 00 2a		MIDI_INSTRUMENT_APPLAUSE   .text $00, $2E, $00, $FF, $02, $0F, $00, $2A, $05, $32, $55, $03
>382d29	05 32 55 03
>382d2d	00 20 00 a1 ef 0f 00 10		MIDI_INSTRUMENT_GUNSHOT    .text $00, $20, $00, $A1, $EF, $0F, $00, $10, $00, $F3, $DF, $00
>382d35	00 f3 df 00
>382d39	39 27 38 00 45 27 38 00		midiInstruments .dword MIDI_INSTRUMENT_PIANO1,   MIDI_INSTRUMENT_PIANO2,   MIDI_INSTRUMENT_PIANO3,   MIDI_INSTRUMENT_HONKTONK, MIDI_INSTRUMENT_EP1,      MIDI_INSTRUMENT_EP2
>382d41	51 27 38 00 5d 27 38 00 69 27 38 00 75 27 38 00
>382d51	81 27 38 00 8d 27 38 00		              	.dword MIDI_INSTRUMENT_HARPSIC,  MIDI_INSTRUMENT_CLAVIC,   MIDI_INSTRUMENT_CELESTA,  MIDI_INSTRUMENT_GLOCK,    MIDI_INSTRUMENT_MUSICBOX, MIDI_INSTRUMENT_VIBES
>382d59	99 27 38 00 a5 27 38 00 b1 27 38 00 bd 27 38 00
>382d69	c9 27 38 00 d5 27 38 00		              	.dword MIDI_INSTRUMENT_MARIMBA,  MIDI_INSTRUMENT_XYLO,     MIDI_INSTRUMENT_TUBEBELL, MIDI_INSTRUMENT_SANTUR,   MIDI_INSTRUMENT_ORGAN1,   MIDI_INSTRUMENT_ORGAN2
>382d71	e1 27 38 00 ed 27 38 00 f9 27 38 00 05 28 38 00
>382d81	11 28 38 00 1d 28 38 00		              	.dword MIDI_INSTRUMENT_ORGAN3,   MIDI_INSTRUMENT_PIPEORG,  MIDI_INSTRUMENT_REEDORG,  MIDI_INSTRUMENT_ACORDIAN, MIDI_INSTRUMENT_HARMONIC, MIDI_INSTRUMENT_BANDNEON
>382d89	29 28 38 00 35 28 38 00 41 28 38 00 4d 28 38 00
>382d99	59 28 38 00 65 28 38 00		              	.dword MIDI_INSTRUMENT_NYLONGT,  MIDI_INSTRUMENT_STEELGT,  MIDI_INSTRUMENT_JAZZGT,   MIDI_INSTRUMENT_CLEANGT,  MIDI_INSTRUMENT_MUTEGT,   MIDI_INSTRUMENT_OVERDGT
>382da1	71 28 38 00 7d 28 38 00 89 28 38 00 95 28 38 00
>382db1	a1 28 38 00 ad 28 38 00		              	.dword MIDI_INSTRUMENT_DISTGT,   MIDI_INSTRUMENT_GTHARMS,  MIDI_INSTRUMENT_ACOUBASS, MIDI_INSTRUMENT_FINGBASS, MIDI_INSTRUMENT_PICKBASS, MIDI_INSTRUMENT_FRETLESS
>382db9	b9 28 38 00 c5 28 38 00 d1 28 38 00 dd 28 38 00
>382dc9	e9 28 38 00 f5 28 38 00		              	.dword MIDI_INSTRUMENT_SLAPBAS1, MIDI_INSTRUMENT_SLAPBAS2, MIDI_INSTRUMENT_SYNBASS1, MIDI_INSTRUMENT_SYNBASS2, MIDI_INSTRUMENT_VIOLIN,   MIDI_INSTRUMENT_VIOLA
>382dd1	01 29 38 00 0d 29 38 00 19 29 38 00 25 29 38 00
>382de1	31 29 38 00 3d 29 38 00		              	.dword MIDI_INSTRUMENT_CELLO,    MIDI_INSTRUMENT_CONTRAB,  MIDI_INSTRUMENT_TREMSTR,  MIDI_INSTRUMENT_PIZZ,     MIDI_INSTRUMENT_HARP,     MIDI_INSTRUMENT_TIMPANI
>382de9	49 29 38 00 55 29 38 00 61 29 38 00 6d 29 38 00
>382df9	79 29 38 00 85 29 38 00		              	.dword MIDI_INSTRUMENT_STRINGS,  MIDI_INSTRUMENT_SLOWSTR,  MIDI_INSTRUMENT_SYNSTR1,  MIDI_INSTRUMENT_SYNSTR2,  MIDI_INSTRUMENT_CHOIR,    MIDI_INSTRUMENT_OOHS
>382e01	91 29 38 00 9d 29 38 00 a9 29 38 00 b5 29 38 00
>382e11	c1 29 38 00 cd 29 38 00		              	.dword MIDI_INSTRUMENT_SYNVOX,   MIDI_INSTRUMENT_ORCHIT,   MIDI_INSTRUMENT_TRUMPET,  MIDI_INSTRUMENT_TROMBONE, MIDI_INSTRUMENT_TUBA,     MIDI_INSTRUMENT_MUTETRP
>382e19	d9 29 38 00 e5 29 38 00 f1 29 38 00 fd 29 38 00
>382e29	09 2a 38 00 15 2a 38 00		              	.dword MIDI_INSTRUMENT_FRHORN,   MIDI_INSTRUMENT_BRASS1,   MIDI_INSTRUMENT_SYNBRAS1, MIDI_INSTRUMENT_SYNBRAS2, MIDI_INSTRUMENT_SOPSAX,   MIDI_INSTRUMENT_ALTOSAX
>382e31	21 2a 38 00 2d 2a 38 00 39 2a 38 00 45 2a 38 00
>382e41	51 2a 38 00 5d 2a 38 00		              	.dword MIDI_INSTRUMENT_TENSAX,   MIDI_INSTRUMENT_BARISAX,  MIDI_INSTRUMENT_OBOE,     MIDI_INSTRUMENT_ENGLHORN, MIDI_INSTRUMENT_BASSOON,  MIDI_INSTRUMENT_CLARINET
>382e49	69 2a 38 00 75 2a 38 00 81 2a 38 00 8d 2a 38 00
>382e59	99 2a 38 00 a5 2a 38 00		              	.dword MIDI_INSTRUMENT_PICCOLO,  MIDI_INSTRUMENT_FLUTE1,   MIDI_INSTRUMENT_RECORDER, MIDI_INSTRUMENT_PANFLUTE, MIDI_INSTRUMENT_BOTTLEB,  MIDI_INSTRUMENT_SHAKU
>382e61	b1 2a 38 00 bd 2a 38 00 c9 2a 38 00 d5 2a 38 00
>382e71	e1 2a 38 00 ed 2a 38 00		              	.dword MIDI_INSTRUMENT_WHISTLE,  MIDI_INSTRUMENT_OCARINA,  MIDI_INSTRUMENT_SQUARWAV, MIDI_INSTRUMENT_SAWWAV,   MIDI_INSTRUMENT_SYNCALLI, MIDI_INSTRUMENT_CHIFLEAD
>382e79	f9 2a 38 00 05 2b 38 00 11 2b 38 00 1d 2b 38 00
>382e89	29 2b 38 00 35 2b 38 00		              	.dword MIDI_INSTRUMENT_CHARANG,  MIDI_INSTRUMENT_SOLOVOX,  MIDI_INSTRUMENT_FIFTHSAW, MIDI_INSTRUMENT_BASSLEAD, MIDI_INSTRUMENT_FANTASIA, MIDI_INSTRUMENT_WARMPAD
>382e91	41 2b 38 00 4d 2b 38 00 59 2b 38 00 65 2b 38 00
>382ea1	71 2b 38 00 7d 2b 38 00		              	.dword MIDI_INSTRUMENT_POLYSYN,  MIDI_INSTRUMENT_SPACEVOX, MIDI_INSTRUMENT_BOWEDGLS, MIDI_INSTRUMENT_METALPAD, MIDI_INSTRUMENT_HALOPAD,  MIDI_INSTRUMENT_SWEEPPAD
>382ea9	89 2b 38 00 95 2b 38 00 a1 2b 38 00 ad 2b 38 00
>382eb9	b9 2b 38 00 c5 2b 38 00		              	.dword MIDI_INSTRUMENT_ICERAIN,  MIDI_INSTRUMENT_SOUNDTRK, MIDI_INSTRUMENT_CRYSTAL,  MIDI_INSTRUMENT_ATMOSPH,  MIDI_INSTRUMENT_BRIGHT,   MIDI_INSTRUMENT_GOBLIN
>382ec1	d1 2b 38 00 dd 2b 38 00 e9 2b 38 00 f5 2b 38 00
>382ed1	01 2c 38 00 0d 2c 38 00		              	.dword MIDI_INSTRUMENT_ECHODROP, MIDI_INSTRUMENT_STARTHEM, MIDI_INSTRUMENT_SITAR,    MIDI_INSTRUMENT_BANJO,    MIDI_INSTRUMENT_SHAMISEN, MIDI_INSTRUMENT_KOTO
>382ed9	19 2c 38 00 25 2c 38 00 31 2c 38 00 3d 2c 38 00
>382ee9	49 2c 38 00 55 2c 38 00		              	.dword MIDI_INSTRUMENT_KALIMBA,  MIDI_INSTRUMENT_BAGPIPE,  MIDI_INSTRUMENT_FIDDLE,   MIDI_INSTRUMENT_SHANNAI,  MIDI_INSTRUMENT_TINKLBEL, MIDI_INSTRUMENT_AGOGO
>382ef1	61 2c 38 00 6d 2c 38 00 79 2c 38 00 85 2c 38 00
>382f01	91 2c 38 00 9d 2c 38 00		              	.dword MIDI_INSTRUMENT_STEELDRM, MIDI_INSTRUMENT_WOODBLOK, MIDI_INSTRUMENT_TAIKO,    MIDI_INSTRUMENT_MELOTOM,  MIDI_INSTRUMENT_SYNDRUM,  MIDI_INSTRUMENT_REVRSCYM
>382f09	a9 2c 38 00 b5 2c 38 00 c1 2c 38 00 cd 2c 38 00
>382f19	d9 2c 38 00 e5 2c 38 00		              	.dword MIDI_INSTRUMENT_FRETNOIS, MIDI_INSTRUMENT_BRTHNOIS, MIDI_INSTRUMENT_SEASHORE, MIDI_INSTRUMENT_BIRDS,    MIDI_INSTRUMENT_TELEPHON, MIDI_INSTRUMENT_HELICOPT
>382f21	f1 2c 38 00 fd 2c 38 00 09 2d 38 00 15 2d 38 00
>382f31	21 2d 38 00 2d 2d 38 00		              	.dword MIDI_INSTRUMENT_APPLAUSE, MIDI_INSTRUMENT_GUNSHOT

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Instruments_Win31.asm

>382f39	00 01 8f f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO1     .text $00, $01, $8F, $F2, $F4, $38, $00, $01, $0D, $F2, $F7, $00
>382f41	0d f2 f7 00
>382f45	00 01 4b f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO2     .text $00, $01, $4B, $F2, $F4, $38, $00, $01, $07, $F2, $F7, $00
>382f4d	07 f2 f7 00
>382f51	00 01 49 f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO3     .text $00, $01, $49, $F2, $F4, $38, $00, $01, $07, $F2, $F6, $00
>382f59	07 f2 f6 00
>382f5d	00 81 12 f2 f7 00 00 41		MIDIW31_INSTRUMENT_HONKTONK   .text $00, $81, $12, $F2, $F7, $00, $00, $41, $07, $F2, $F7, $00
>382f65	07 f2 f7 00
>382f69	00 01 57 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP1        .text $00, $01, $57, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>382f71	07 f2 f7 00
>382f75	00 01 93 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP2        .text $00, $01, $93, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>382f7d	07 f2 f7 00
>382f81	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HARPSIC    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382f89	00 00 00 00
>382f8d	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLAVIC     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382f95	00 00 00 00
>382f99	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELESTA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382fa1	00 00 00 00
>382fa5	00 07 97 f3 f2 32 00 11		MIDIW31_INSTRUMENT_GLOCK      .text $00, $07, $97, $F3, $F2, $32, $00, $11, $87, $F2, $F1, $00
>382fad	87 f2 f1 00
>382fb1	00 17 21 54 f4 32 00 01		MIDIW31_INSTRUMENT_MUSICBOX   .text $00, $17, $21, $54, $F4, $32, $00, $01, $07, $F4, $F4, $00
>382fb9	07 f4 f4 00
>382fbd	00 98 62 f3 f6 30 00 81		MIDIW31_INSTRUMENT_VIBES      .text $00, $98, $62, $F3, $F6, $30, $00, $81, $07, $F2, $F6, $00
>382fc5	07 f2 f6 00
>382fc9	00 18 23 f6 f6 00 00 01		MIDIW31_INSTRUMENT_MARIMBA    .text $00, $18, $23, $F6, $F6, $00, $00, $01, $07, $E7, $F7, $00
>382fd1	07 e7 f7 00
>382fd5	00 15 91 f6 f6 00 00 01		MIDIW31_INSTRUMENT_XYLO       .text $00, $15, $91, $F6, $F6, $00, $00, $01, $07, $F6, $F6, $00
>382fdd	07 f6 f6 00
>382fe1	00 45 59 d3 f3 00 00 81		MIDIW31_INSTRUMENT_TUBEBELL   .text $00, $45, $59, $D3, $F3, $00, $00, $81, $87, $A3, $F3, $00
>382fe9	87 a3 f3 00
>382fed	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SANTUR     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>382ff5	00 00 00 00
>382ff9	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383001	00 00 00 00
>383005	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN2     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>38300d	00 00 00 00
>383011	00 70 44 aa 18 34 00 b1		MIDIW31_INSTRUMENT_ORGAN3     .text $00, $70, $44, $AA, $18, $34, $00, $B1, $07, $8A, $08, $00
>383019	07 8a 08 00
>38301d	00 23 93 97 23 34 01 b1		MIDIW31_INSTRUMENT_PIPEORG    .text $00, $23, $93, $97, $23, $34, $01, $B1, $07, $55, $14, $00
>383025	07 55 14 00
>383029	00 61 13 97 04 30 01 b1		MIDIW31_INSTRUMENT_REEDORG    .text $00, $61, $13, $97, $04, $30, $01, $B1, $87, $55, $04, $00
>383031	87 55 04 00
>383035	00 24 48 98 2a 30 01 b1		MIDIW31_INSTRUMENT_ACORDIAN   .text $00, $24, $48, $98, $2A, $30, $01, $B1, $07, $46, $1A, $00
>38303d	07 46 1a 00
>383041	00 61 13 91 06 00 01 21		MIDIW31_INSTRUMENT_HARMONIC   .text $00, $61, $13, $91, $06, $00, $01, $21, $07, $61, $07, $00
>383049	07 61 07 00
>38304d	00 21 13 71 06 00 00 a1		MIDIW31_INSTRUMENT_BANDNEON   .text $00, $21, $13, $71, $06, $00, $00, $A1, $90, $61, $07, $00
>383055	90 61 07 00
>383059	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_NYLONGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383061	00 00 00 00
>383065	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>38306d	00 00 00 00
>383071	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_JAZZGT     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383079	00 00 00 00
>38307d	00 03 87 f6 22 36 01 21		MIDIW31_INSTRUMENT_CLEANGT    .text $00, $03, $87, $F6, $22, $36, $01, $21, $87, $F3, $F8, $00
>383085	87 f3 f8 00
>383089	00 03 47 f9 54 30 00 21		MIDIW31_INSTRUMENT_MUTEGT     .text $00, $03, $47, $F9, $54, $30, $00, $21, $07, $F6, $3A, $00
>383091	07 f6 3a 00
>383095	00 23 4a 91 41 38 01 21		MIDIW31_INSTRUMENT_OVERDGT    .text $00, $23, $4A, $91, $41, $38, $01, $21, $0C, $84, $19, $00
>38309d	0c 84 19 00
>3830a1	00 23 4a 95 19 32 01 21		MIDIW31_INSTRUMENT_DISTGT     .text $00, $23, $4A, $95, $19, $32, $01, $21, $07, $94, $19, $00
>3830a9	07 94 19 00
>3830ad	00 09 a1 20 4f 00 00 84		MIDIW31_INSTRUMENT_GTHARMS    .text $00, $09, $A1, $20, $4F, $00, $00, $84, $87, $D1, $F8, $00
>3830b5	87 d1 f8 00
>3830b9	00 21 1e 94 06 00 00 a2		MIDIW31_INSTRUMENT_ACOUBASS   .text $00, $21, $1E, $94, $06, $00, $00, $A2, $07, $C3, $A6, $00
>3830c1	07 c3 a6 00
>3830c5	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FINGBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3830cd	00 00 00 00
>3830d1	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_PICKBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3830d9	00 00 00 00
>3830dd	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRETLESS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3830e5	00 00 00 00
>3830e9	00 01 8b a1 9a 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS1   .text $00, $01, $8B, $A1, $9A, $38, $00, $21, $47, $F2, $DF, $00
>3830f1	47 f2 df 00
>3830f5	00 21 8b a2 16 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS2   .text $00, $21, $8B, $A2, $16, $38, $00, $21, $0F, $A1, $DF, $00
>3830fd	0f a1 df 00
>383101	00 31 8b f4 e8 3a 00 31		MIDIW31_INSTRUMENT_SYNBASS1   .text $00, $31, $8B, $F4, $E8, $3A, $00, $31, $07, $F1, $78, $00
>383109	07 f1 78 00
>38310d	00 31 12 f1 28 30 00 31		MIDIW31_INSTRUMENT_SYNBASS2   .text $00, $31, $12, $F1, $28, $30, $00, $31, $07, $F1, $18, $00
>383115	07 f1 18 00
>383119	00 31 15 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLIN     .text $00, $31, $15, $DD, $13, $00, $01, $21, $07, $56, $26, $00
>383121	07 56 26 00
>383125	00 31 16 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLA      .text $00, $31, $16, $DD, $13, $00, $01, $21, $07, $66, $06, $00
>38312d	07 66 06 00
>383131	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELLO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383139	00 00 00 00
>38313d	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CONTRAB    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383145	00 00 00 00
>383149	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TREMSTR    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383151	00 00 00 00
>383155	00 02 1a f5 75 30 01 01		MIDIW31_INSTRUMENT_PIZZ       .text $00, $02, $1A, $F5, $75, $30, $01, $01, $87, $85, $35, $00
>38315d	87 85 35 00
>383161	00 02 1d f5 75 30 01 01		MIDIW31_INSTRUMENT_HARP       .text $00, $02, $1D, $F5, $75, $30, $01, $01, $87, $F3, $F4, $00
>383169	87 f3 f4 00
>38316d	00 10 41 f5 05 32 01 11		MIDIW31_INSTRUMENT_TIMPANI    .text $00, $10, $41, $F5, $05, $32, $01, $11, $07, $F2, $C3, $00
>383175	07 f2 c3 00
>383179	00 21 9b b1 25 3c 01 a2		MIDIW31_INSTRUMENT_STRINGS    .text $00, $21, $9B, $B1, $25, $3C, $01, $A2, $08, $72, $08, $00
>383181	08 72 08 00
>383185	00 a1 98 7f 03 00 01 21		MIDIW31_INSTRUMENT_SLOWSTR    .text $00, $A1, $98, $7F, $03, $00, $01, $21, $07, $3F, $07, $01
>38318d	07 3f 07 01
>383191	00 a1 93 c1 12 00 00 61		MIDIW31_INSTRUMENT_SYNSTR1    .text $00, $A1, $93, $C1, $12, $00, $00, $61, $07, $4F, $05, $00
>383199	07 4f 05 00
>38319d	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNSTR2    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3831a5	00 00 00 00
>3831a9	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CHOIR      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3831b1	00 00 00 00
>3831b5	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OOHS       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3831bd	00 00 00 00
>3831c1	00 71 57 54 05 3c 00 72		MIDIW31_INSTRUMENT_SYNVOX     .text $00, $71, $57, $54, $05, $3C, $00, $72, $07, $7A, $05, $00
>3831c9	07 7a 05 00
>3831cd	00 90 00 54 63 38 00 41		MIDIW31_INSTRUMENT_ORCHIT     .text $00, $90, $00, $54, $63, $38, $00, $41, $07, $A5, $45, $00
>3831d5	07 a5 45 00
>3831d9	00 21 92 85 17 3c 00 21		MIDIW31_INSTRUMENT_TRUMPET    .text $00, $21, $92, $85, $17, $3C, $00, $21, $08, $8F, $09, $00
>3831e1	08 8f 09 00
>3831e5	00 21 94 75 17 32 00 21		MIDIW31_INSTRUMENT_TROMBONE   .text $00, $21, $94, $75, $17, $32, $00, $21, $0C, $8F, $09, $00
>3831ed	0c 8f 09 00
>3831f1	00 21 94 76 15 00 00 61		MIDIW31_INSTRUMENT_TUBA       .text $00, $21, $94, $76, $15, $00, $00, $61, $07, $82, $37, $00
>3831f9	07 82 37 00
>3831fd	00 31 43 9e 17 00 01 21		MIDIW31_INSTRUMENT_MUTETRP    .text $00, $31, $43, $9E, $17, $00, $01, $21, $07, $62, $2C, $01
>383205	07 62 2c 01
>383209	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRHORN     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383211	00 00 00 00
>383215	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BRASS1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>38321d	00 00 00 00
>383221	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNBRAS1   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383229	00 00 00 00
>38322d	00 21 4d 54 3c 38 00 21		MIDIW31_INSTRUMENT_SYNBRAS2   .text $00, $21, $4D, $54, $3C, $38, $00, $21, $07, $A6, $1C, $00
>383235	07 a6 1c 00
>383239	00 31 8f 93 02 38 01 61		MIDIW31_INSTRUMENT_SOPSAX     .text $00, $31, $8F, $93, $02, $38, $01, $61, $07, $72, $0B, $00
>383241	07 72 0b 00
>383245	00 31 8e 93 03 38 01 61		MIDIW31_INSTRUMENT_ALTOSAX    .text $00, $31, $8E, $93, $03, $38, $01, $61, $07, $72, $09, $00
>38324d	07 72 09 00
>383251	00 31 91 93 03 30 01 61		MIDIW31_INSTRUMENT_TENSAX     .text $00, $31, $91, $93, $03, $30, $01, $61, $07, $82, $09, $00
>383259	07 82 09 00
>38325d	00 31 8e 93 0f 00 01 61		MIDIW31_INSTRUMENT_BARISAX    .text $00, $31, $8E, $93, $0F, $00, $01, $61, $07, $72, $0F, $00
>383265	07 72 0f 00
>383269	00 21 4b aa 16 00 01 21		MIDIW31_INSTRUMENT_OBOE       .text $00, $21, $4B, $AA, $16, $00, $01, $21, $07, $8F, $0A, $00
>383271	07 8f 0a 00
>383275	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ENGLHORN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>38327d	00 00 00 00
>383281	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSOON    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383289	00 00 00 00
>38328d	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLARINET   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383295	00 00 00 00
>383299	00 e1 1f 85 5f 30 00 e1		MIDIW31_INSTRUMENT_PICCOLO    .text $00, $E1, $1F, $85, $5F, $30, $00, $E1, $07, $65, $1A, $00
>3832a1	07 65 1a 00
>3832a5	00 e1 46 88 5f 30 00 e1		MIDIW31_INSTRUMENT_FLUTE1     .text $00, $E1, $46, $88, $5F, $30, $00, $E1, $07, $65, $1A, $00
>3832ad	07 65 1a 00
>3832b1	00 a1 9c 75 1f 32 00 21		MIDIW31_INSTRUMENT_RECORDER   .text $00, $A1, $9C, $75, $1F, $32, $00, $21, $07, $75, $0A, $00
>3832b9	07 75 0a 00
>3832bd	00 31 8b 84 58 30 00 21		MIDIW31_INSTRUMENT_PANFLUTE   .text $00, $31, $8B, $84, $58, $30, $00, $21, $07, $65, $1A, $00
>3832c5	07 65 1a 00
>3832c9	00 e1 4c 66 56 00 00 a1		MIDIW31_INSTRUMENT_BOTTLEB    .text $00, $E1, $4C, $66, $56, $00, $00, $A1, $07, $65, $26, $00
>3832d1	07 65 26 00
>3832d5	00 62 cb 76 46 00 00 a1		MIDIW31_INSTRUMENT_SHAKU      .text $00, $62, $CB, $76, $46, $00, $00, $A1, $07, $55, $36, $00
>3832dd	07 55 36 00
>3832e1	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WHISTLE    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3832e9	00 00 00 00
>3832ed	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OCARINA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3832f5	00 00 00 00
>3832f9	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SQUARWAV   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383301	00 00 00 00
>383305	00 21 0e ff 0f 30 01 21		MIDIW31_INSTRUMENT_SAWWAV     .text $00, $21, $0E, $FF, $0F, $30, $01, $21, $07, $FF, $0F, $01
>38330d	07 ff 0f 01
>383311	00 22 46 86 55 30 00 21		MIDIW31_INSTRUMENT_SYNCALLI   .text $00, $22, $46, $86, $55, $30, $00, $21, $87, $64, $18, $00
>383319	87 64 18 00
>38331d	00 21 45 66 12 30 00 a1		MIDIW31_INSTRUMENT_CHIFLEAD   .text $00, $21, $45, $66, $12, $30, $00, $A1, $07, $96, $0A, $00
>383325	07 96 0a 00
>383329	00 21 8b 92 2a 34 01 22		MIDIW31_INSTRUMENT_CHARANG    .text $00, $21, $8B, $92, $2A, $34, $01, $22, $07, $91, $2A, $00
>383331	07 91 2a 00
>383335	00 a2 9e df 05 00 00 61		MIDIW31_INSTRUMENT_SOLOVOX    .text $00, $A2, $9E, $DF, $05, $00, $00, $61, $47, $6F, $07, $00
>38333d	47 6f 07 00
>383341	00 20 1a ef 01 00 00 60		MIDIW31_INSTRUMENT_FIFTHSAW   .text $00, $20, $1A, $EF, $01, $00, $00, $60, $07, $8F, $06, $02
>383349	07 8f 06 02
>38334d	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSLEAD   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383355	00 00 00 00
>383359	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FANTASIA   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383361	00 00 00 00
>383365	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WARMPAD    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>38336d	00 00 00 00
>383371	00 61 17 91 34 3c 00 61		MIDIW31_INSTRUMENT_POLYSYN    .text $00, $61, $17, $91, $34, $3C, $00, $61, $07, $55, $16, $00
>383379	07 55 16 00
>38337d	00 71 5d 54 01 30 00 72		MIDIW31_INSTRUMENT_SPACEVOX   .text $00, $71, $5D, $54, $01, $30, $00, $72, $07, $6A, $03, $00
>383385	07 6a 03 00
>383389	00 21 97 21 43 38 00 a2		MIDIW31_INSTRUMENT_BOWEDGLS   .text $00, $21, $97, $21, $43, $38, $00, $A2, $07, $42, $35, $00
>383391	07 42 35 00
>383395	00 a1 1c a1 77 30 01 21		MIDIW31_INSTRUMENT_METALPAD   .text $00, $A1, $1C, $A1, $77, $30, $01, $21, $07, $31, $47, $01
>38339d	07 31 47 01
>3833a1	00 21 89 11 33 00 00 61		MIDIW31_INSTRUMENT_HALOPAD    .text $00, $21, $89, $11, $33, $00, $00, $61, $0A, $42, $25, $00
>3833a9	0a 42 25 00
>3833ad	00 a1 15 11 47 00 01 21		MIDIW31_INSTRUMENT_SWEEPPAD   .text $00, $A1, $15, $11, $47, $00, $01, $21, $07, $CF, $07, $00
>3833b5	07 cf 07 00
>3833b9	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ICERAIN    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3833c1	00 00 00 00
>3833c5	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SOUNDTRK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3833cd	00 00 00 00
>3833d1	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CRYSTAL    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3833d9	00 00 00 00
>3833dd	00 22 92 b1 81 3c 00 61		MIDIW31_INSTRUMENT_ATMOSPH    .text $00, $22, $92, $B1, $81, $3C, $00, $61, $8A, $F2, $26, $00
>3833e5	8a f2 26 00
>3833e9	00 41 4d f1 51 30 01 42		MIDIW31_INSTRUMENT_BRIGHT     .text $00, $41, $4D, $F1, $51, $30, $01, $42, $07, $F2, $F5, $00
>3833f1	07 f2 f5 00
>3833f5	00 61 94 11 51 36 01 a3		MIDIW31_INSTRUMENT_GOBLIN     .text $00, $61, $94, $11, $51, $36, $01, $A3, $87, $11, $13, $00
>3833fd	87 11 13 00
>383401	00 61 8c 11 31 3a 00 a1		MIDIW31_INSTRUMENT_ECHODROP   .text $00, $61, $8C, $11, $31, $3A, $00, $A1, $87, $1D, $03, $00
>383409	87 1d 03 00
>38340d	00 a4 4c f3 73 00 01 61		MIDIW31_INSTRUMENT_STARTHEM   .text $00, $A4, $4C, $F3, $73, $00, $01, $61, $07, $81, $23, $00
>383415	07 81 23 00
>383419	00 02 85 d2 53 00 00 07		MIDIW31_INSTRUMENT_SITAR      .text $00, $02, $85, $D2, $53, $00, $00, $07, $0A, $F2, $F6, $01
>383421	0a f2 f6 01
>383425	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BANJO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>38342d	00 00 00 00
>383431	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SHAMISEN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383439	00 00 00 00
>38343d	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_KOTO       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383445	00 00 00 00
>383449	00 04 4f fa 56 3c 00 01		MIDIW31_INSTRUMENT_KALIMBA    .text $00, $04, $4F, $FA, $56, $3C, $00, $01, $07, $C2, $05, $00
>383451	07 c2 05 00
>383455	00 21 49 7c 20 36 00 22		MIDIW31_INSTRUMENT_BAGPIPE    .text $00, $21, $49, $7C, $20, $36, $00, $22, $07, $6F, $0C, $01
>38345d	07 6f 0c 01
>383461	00 31 85 dd 33 3a 01 21		MIDIW31_INSTRUMENT_FIDDLE     .text $00, $31, $85, $DD, $33, $3A, $01, $21, $07, $56, $16, $00
>383469	07 56 16 00
>38346d	00 20 04 da 05 30 02 21		MIDIW31_INSTRUMENT_SHANNAI    .text $00, $20, $04, $DA, $05, $30, $02, $21, $88, $8F, $0B, $00
>383475	88 8f 0b 00
>383479	00 05 6a f1 e5 00 00 03		MIDIW31_INSTRUMENT_TINKLBEL   .text $00, $05, $6A, $F1, $E5, $00, $00, $03, $87, $C3, $E5, $00
>383481	87 c3 e5 00
>383485	00 07 15 ec 26 00 00 02		MIDIW31_INSTRUMENT_AGOGO      .text $00, $07, $15, $EC, $26, $00, $00, $02, $07, $F8, $16, $00
>38348d	07 f8 16 00
>383491	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELDRM   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383499	00 00 00 00
>38349d	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WOODBLOK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3834a5	00 00 00 00
>3834a9	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TAIKO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3834b1	00 00 00 00
>3834b5	00 11 41 f8 47 34 02 10		MIDIW31_INSTRUMENT_MELOTOM    .text $00, $11, $41, $F8, $47, $34, $02, $10, $0A, $F3, $03, $00
>3834bd	0a f3 03 00
>3834c1	00 01 8e f1 06 3e 02 10		MIDIW31_INSTRUMENT_SYNDRUM    .text $00, $01, $8E, $F1, $06, $3E, $02, $10, $07, $F3, $02, $00
>3834c9	07 f3 02 00
>3834cd	00 0e 00 1f 00 3e 00 c0		MIDIW31_INSTRUMENT_REVRSCYM   .text $00, $0E, $00, $1F, $00, $3E, $00, $C0, $07, $1F, $FF, $03
>3834d5	07 1f ff 03
>3834d9	00 06 80 f8 24 38 00 03		MIDIW31_INSTRUMENT_FRETNOIS   .text $00, $06, $80, $F8, $24, $38, $00, $03, $8F, $56, $84, $02
>3834e1	8f 56 84 02
>3834e5	00 0e 00 f8 00 00 00 d0		MIDIW31_INSTRUMENT_BRTHNOIS   .text $00, $0E, $00, $F8, $00, $00, $00, $D0, $0C, $34, $04, $03
>3834ed	0c 34 04 03
>3834f1	00 0e 00 f6 00 00 00 c0		MIDIW31_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F6, $00, $00, $00, $C0, $07, $1F, $02, $03
>3834f9	07 1f 02 03
>3834fd	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BIRDS      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383505	00 00 00 00
>383509	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TELEPHON   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>383511	00 00 00 00
>383515	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HELICOPT   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>38351d	00 00 00 00
>383521	00 26 00 ff 01 3e 00 e4		MIDIW31_INSTRUMENT_APPLAUSE   .text $00, $26, $00, $FF, $01, $3E, $00, $E4, $07, $12, $16, $01
>383529	07 12 16 01
>38352d	00 00 00 f3 f0 3e 00 00		MIDIW31_INSTRUMENT_GUNSHOT    .text $00, $00, $00, $F3, $F0, $3E, $00, $00, $07, $F6, $C9, $02
>383535	07 f6 c9 02
>383539	39 2f 38 00 45 2f 38 00		midiInstrumentsw31 .dword MIDIW31_INSTRUMENT_PIANO1,   MIDIW31_INSTRUMENT_PIANO2,   MIDIW31_INSTRUMENT_PIANO3,   MIDIW31_INSTRUMENT_HONKTONK, MIDIW31_INSTRUMENT_EP1, MIDIW31_INSTRUMENT_EP2
>383541	51 2f 38 00 5d 2f 38 00 69 2f 38 00 75 2f 38 00
>383551	81 2f 38 00 8d 2f 38 00		                   .dword MIDIW31_INSTRUMENT_HARPSIC,  MIDIW31_INSTRUMENT_CLAVIC,   MIDIW31_INSTRUMENT_CELESTA,  MIDIW31_INSTRUMENT_GLOCK,    MIDIW31_INSTRUMENT_MUSICBOX, MIDIW31_INSTRUMENT_VIBES
>383559	99 2f 38 00 a5 2f 38 00 b1 2f 38 00 bd 2f 38 00
>383569	c9 2f 38 00 d5 2f 38 00			                 .dword MIDIW31_INSTRUMENT_MARIMBA,  MIDIW31_INSTRUMENT_XYLO,     MIDIW31_INSTRUMENT_TUBEBELL, MIDIW31_INSTRUMENT_SANTUR,   MIDIW31_INSTRUMENT_ORGAN1,   MIDIW31_INSTRUMENT_ORGAN2
>383571	e1 2f 38 00 ed 2f 38 00 f9 2f 38 00 05 30 38 00
>383581	11 30 38 00 1d 30 38 00			                 .dword MIDIW31_INSTRUMENT_ORGAN3,   MIDIW31_INSTRUMENT_PIPEORG,  MIDIW31_INSTRUMENT_REEDORG,  MIDIW31_INSTRUMENT_ACORDIAN, MIDIW31_INSTRUMENT_HARMONIC, MIDIW31_INSTRUMENT_BANDNEON
>383589	29 30 38 00 35 30 38 00 41 30 38 00 4d 30 38 00
>383599	59 30 38 00 65 30 38 00		                     .dword MIDIW31_INSTRUMENT_NYLONGT,  MIDIW31_INSTRUMENT_STEELGT,  MIDIW31_INSTRUMENT_JAZZGT,   MIDIW31_INSTRUMENT_CLEANGT,  MIDIW31_INSTRUMENT_MUTEGT,   MIDIW31_INSTRUMENT_OVERDGT
>3835a1	71 30 38 00 7d 30 38 00 89 30 38 00 95 30 38 00
>3835b1	a1 30 38 00 ad 30 38 00			                 .dword MIDIW31_INSTRUMENT_DISTGT,   MIDIW31_INSTRUMENT_GTHARMS,  MIDIW31_INSTRUMENT_ACOUBASS, MIDIW31_INSTRUMENT_FINGBASS, MIDIW31_INSTRUMENT_PICKBASS, MIDIW31_INSTRUMENT_FRETLESS
>3835b9	b9 30 38 00 c5 30 38 00 d1 30 38 00 dd 30 38 00
>3835c9	e9 30 38 00 f5 30 38 00			                 .dword MIDIW31_INSTRUMENT_SLAPBAS1, MIDIW31_INSTRUMENT_SLAPBAS2, MIDIW31_INSTRUMENT_SYNBASS1, MIDIW31_INSTRUMENT_SYNBASS2, MIDIW31_INSTRUMENT_VIOLIN,   MIDIW31_INSTRUMENT_VIOLA
>3835d1	01 31 38 00 0d 31 38 00 19 31 38 00 25 31 38 00
>3835e1	31 31 38 00 3d 31 38 00			                 .dword MIDIW31_INSTRUMENT_CELLO,    MIDIW31_INSTRUMENT_CONTRAB,  MIDIW31_INSTRUMENT_TREMSTR,  MIDIW31_INSTRUMENT_PIZZ,     MIDIW31_INSTRUMENT_HARP,     MIDIW31_INSTRUMENT_TIMPANI
>3835e9	49 31 38 00 55 31 38 00 61 31 38 00 6d 31 38 00
>3835f9	79 31 38 00 85 31 38 00			                 .dword MIDIW31_INSTRUMENT_STRINGS,  MIDIW31_INSTRUMENT_SLOWSTR,  MIDIW31_INSTRUMENT_SYNSTR1,  MIDIW31_INSTRUMENT_SYNSTR2,  MIDIW31_INSTRUMENT_CHOIR,    MIDIW31_INSTRUMENT_OOHS
>383601	91 31 38 00 9d 31 38 00 a9 31 38 00 b5 31 38 00
>383611	c1 31 38 00 cd 31 38 00			                 .dword MIDIW31_INSTRUMENT_SYNVOX,   MIDIW31_INSTRUMENT_ORCHIT,   MIDIW31_INSTRUMENT_TRUMPET,  MIDIW31_INSTRUMENT_TROMBONE, MIDIW31_INSTRUMENT_TUBA,     MIDIW31_INSTRUMENT_MUTETRP
>383619	d9 31 38 00 e5 31 38 00 f1 31 38 00 fd 31 38 00
>383629	09 32 38 00 15 32 38 00			                 .dword MIDIW31_INSTRUMENT_FRHORN,   MIDIW31_INSTRUMENT_BRASS1,   MIDIW31_INSTRUMENT_SYNBRAS1, MIDIW31_INSTRUMENT_SYNBRAS2, MIDIW31_INSTRUMENT_SOPSAX,   MIDIW31_INSTRUMENT_ALTOSAX
>383631	21 32 38 00 2d 32 38 00 39 32 38 00 45 32 38 00
>383641	51 32 38 00 5d 32 38 00			                 .dword MIDIW31_INSTRUMENT_TENSAX,   MIDIW31_INSTRUMENT_BARISAX,  MIDIW31_INSTRUMENT_OBOE,     MIDIW31_INSTRUMENT_ENGLHORN, MIDIW31_INSTRUMENT_BASSOON,  MIDIW31_INSTRUMENT_CLARINET
>383649	69 32 38 00 75 32 38 00 81 32 38 00 8d 32 38 00
>383659	99 32 38 00 a5 32 38 00			                 .dword MIDIW31_INSTRUMENT_PICCOLO,  MIDIW31_INSTRUMENT_FLUTE1,   MIDIW31_INSTRUMENT_RECORDER, MIDIW31_INSTRUMENT_PANFLUTE, MIDIW31_INSTRUMENT_BOTTLEB,  MIDIW31_INSTRUMENT_SHAKU
>383661	b1 32 38 00 bd 32 38 00 c9 32 38 00 d5 32 38 00
>383671	e1 32 38 00 ed 32 38 00			                 .dword MIDIW31_INSTRUMENT_WHISTLE,  MIDIW31_INSTRUMENT_OCARINA,  MIDIW31_INSTRUMENT_SQUARWAV, MIDIW31_INSTRUMENT_SAWWAV,   MIDIW31_INSTRUMENT_SYNCALLI, MIDIW31_INSTRUMENT_CHIFLEAD
>383679	f9 32 38 00 05 33 38 00 11 33 38 00 1d 33 38 00
>383689	29 33 38 00 35 33 38 00			                 .dword MIDIW31_INSTRUMENT_CHARANG,  MIDIW31_INSTRUMENT_SOLOVOX,  MIDIW31_INSTRUMENT_FIFTHSAW, MIDIW31_INSTRUMENT_BASSLEAD, MIDIW31_INSTRUMENT_FANTASIA, MIDIW31_INSTRUMENT_WARMPAD
>383691	41 33 38 00 4d 33 38 00 59 33 38 00 65 33 38 00
>3836a1	71 33 38 00 7d 33 38 00			                 .dword MIDIW31_INSTRUMENT_POLYSYN,  MIDIW31_INSTRUMENT_SPACEVOX, MIDIW31_INSTRUMENT_BOWEDGLS, MIDIW31_INSTRUMENT_METALPAD, MIDIW31_INSTRUMENT_HALOPAD,  MIDIW31_INSTRUMENT_SWEEPPAD
>3836a9	89 33 38 00 95 33 38 00 a1 33 38 00 ad 33 38 00
>3836b9	b9 33 38 00 c5 33 38 00			                 .dword MIDIW31_INSTRUMENT_ICERAIN,  MIDIW31_INSTRUMENT_SOUNDTRK, MIDIW31_INSTRUMENT_CRYSTAL,  MIDIW31_INSTRUMENT_ATMOSPH,  MIDIW31_INSTRUMENT_BRIGHT,   MIDIW31_INSTRUMENT_GOBLIN
>3836c1	d1 33 38 00 dd 33 38 00 e9 33 38 00 f5 33 38 00
>3836d1	01 34 38 00 0d 34 38 00			                 .dword MIDIW31_INSTRUMENT_ECHODROP, MIDIW31_INSTRUMENT_STARTHEM, MIDIW31_INSTRUMENT_SITAR,    MIDIW31_INSTRUMENT_BANJO,    MIDIW31_INSTRUMENT_SHAMISEN, MIDIW31_INSTRUMENT_KOTO
>3836d9	19 34 38 00 25 34 38 00 31 34 38 00 3d 34 38 00
>3836e9	49 34 38 00 55 34 38 00			                 .dword MIDIW31_INSTRUMENT_KALIMBA,  MIDIW31_INSTRUMENT_BAGPIPE,  MIDIW31_INSTRUMENT_FIDDLE,   MIDIW31_INSTRUMENT_SHANNAI,  MIDIW31_INSTRUMENT_TINKLBEL, MIDIW31_INSTRUMENT_AGOGO
>3836f1	61 34 38 00 6d 34 38 00 79 34 38 00 85 34 38 00
>383701	91 34 38 00 9d 34 38 00			                 .dword MIDIW31_INSTRUMENT_STEELDRM, MIDIW31_INSTRUMENT_WOODBLOK, MIDIW31_INSTRUMENT_TAIKO,    MIDIW31_INSTRUMENT_MELOTOM,  MIDIW31_INSTRUMENT_SYNDRUM,  MIDIW31_INSTRUMENT_REVRSCYM
>383709	a9 34 38 00 b5 34 38 00 c1 34 38 00 cd 34 38 00
>383719	d9 34 38 00 e5 34 38 00			                 .dword MIDIW31_INSTRUMENT_FRETNOIS, MIDIW31_INSTRUMENT_BRTHNOIS, MIDIW31_INSTRUMENT_SEASHORE, MIDIW31_INSTRUMENT_BIRDS,    MIDIW31_INSTRUMENT_TELEPHON, MIDIW31_INSTRUMENT_HELICOPT
>383721	f1 34 38 00 fd 34 38 00 09 35 38 00 15 35 38 00
>383731	21 35 38 00 2d 35 38 00			                 .dword MIDIW31_INSTRUMENT_APPLAUSE, MIDIW31_INSTRUMENT_GUNSHOT

;******  Return to file: src\OPL2_Library.asm

>383739	3c 42 44 45 47 49 4b 4c		NOTE_INTRO  .byte  $3C, $42, $44, $45, $47, $49, $4B, $4C
.383741					IOPL2_TONE_TEST
.383741	e2 20		sep #$20	                SEP #$20        ; set A short
.383743	c2 10		rep #$10	                REP #$10        ; set X long
.383745	a2 00 00	ldx #$0000	                LDX #0
.383748					OPL2_TONE_TESTING_L1
.383748	bd 39 37	lda $383739,x	                LDA NOTE_INTRO, X
.38374b	29 0f		and #$0f	                AND #$F
.38374d	85 30		sta $30		                STA OPL2_NOTE ; start at C
.38374f	bd 39 37	lda $383739,x	                LDA NOTE_INTRO, X
.383752	29 70		and #$70	                AND #$70
.383754	4a		lsr a		                LSR A
.383755	4a		lsr a		                LSR A
.383756	4a		lsr a		                LSR A
.383757	4a		lsr a		                LSR A
.383758	85 31		sta $31		                STA OPL2_OCTAVE
.38375a	8a		txa		                TXA
.38375b	29 03		and #$03	                AND #$03        ; replace modulo 3 -  play each note on a different channel
.38375d	85 27		sta $27		                STA OPL2_CHANNEL
.38375f	22 2f 39 38	jsl $38392f	                JSL OPL2_PLAYNOTE
.383763	a0 00 00	ldy #$0000	                LDY #$0000
.383766					OPL2_TONE_TESTING_L2
.383766	ea		nop		                NOP
.383767	ea		nop		                NOP
.383768	ea		nop		                NOP
.383769	ea		nop		                NOP
.38376a	c8		iny		                INY
.38376b	c0 ff ff	cpy #$ffff	                CPY #$FFFF
.38376e	d0 f6		bne $383766	                BNE OPL2_TONE_TESTING_L2
.383770	e8		inx		                INX
.383771	e0 08 00	cpx #$0008	                CPX #8
.383774	d0 d2		bne $383748	                BNE OPL2_TONE_TESTING_L1
.383776	6b		rtl		                RTL
.383777					OPL2_INIT
.383777	c2 20		rep #$20	                REP #$20        ; set A long
.383779	a9 00 00	lda #$0000	                LDA #$0000
.38377c	85 28		sta $28		                STA OPL2_REG_REGION
.38377e	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.383780	85 30		sta $30		                STA OPL2_NOTE
.383782	85 32		sta $32		                STA OPL2_PARAMETER0
.383784	85 34		sta $34		                STA OPL2_PARAMETER2
.383786	a9 03 17	lda #$1703	                LDA #<>INSTRUMENT_ACCORDN
.383789	85 50		sta $50		                STA RAD_ADDR
.38378b	a9 38 00	lda #$0038	                LDA #<`INSTRUMENT_ACCORDN
.38378e	85 52		sta $52		                STA RAD_ADDR + 2
.383790	e2 20		sep #$20	                SEP #$20        ; set A short
.383792	6b		rtl		                RTL
.383793					OPL2_Reset
.383793	6b		rtl		                RTL
.383794					OPL2_Get_FrequencyBlock
.383794	6b		rtl		                RTL
.383795					OPL2_GET_REGISTER
.383795	48		pha		                PHA             ; begin setdp macro
.383796	08		php		                PHP
.383797	c2 20		rep #$20	                REP #$20        ; set A long
.383799	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.38379c	5b		tcd		                TCD
.38379d	28		plp		                PLP
.38379e	68		pla		                PLA             ; end setdp macro
.38379f	c2 20		rep #$20	                REP #$20        ; set A long
.3837a1	18		clc		              CLC
.3837a2	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.3837a5	65 32		adc $32		              ADC OPL2_PARAMETER0
.3837a7	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3837a9	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.3837ac	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3837ae	e2 20		sep #$20	                SEP #$20        ; set A short
.3837b0	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3837b2	6b		rtl		              RTL
.3837b3					OPL2_GET_WAVEFORM_SELECT
.3837b3	48		pha		                PHA             ; begin setdp macro
.3837b4	08		php		                PHP
.3837b5	c2 20		rep #$20	                REP #$20        ; set A long
.3837b7	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3837ba	5b		tcd		                TCD
.3837bb	28		plp		                PLP
.3837bc	68		pla		                PLA             ; end setdp macro
.3837bd	c2 20		rep #$20	                REP #$20        ; set A long
.3837bf	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.3837c2	69 01 00	adc #$0001	              ADC #$0001
.3837c5	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3837c7	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.3837ca	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3837cc	e2 20		sep #$20	                SEP #$20        ; set A short
.3837ce	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3837d0	29 20		and #$20	              AND #$20
.3837d2	6b		rtl		              RTL
.3837d3					OPL2_GET_SCALINGLEVEL
.3837d3	48		pha		                PHA             ; begin setdp macro
.3837d4	08		php		                PHP
.3837d5	c2 20		rep #$20	                REP #$20        ; set A long
.3837d7	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3837da	5b		tcd		                TCD
.3837db	28		plp		                PLP
.3837dc	68		pla		                PLA             ; end setdp macro
.3837dd	c2 20		rep #$20	                REP #$20        ; set A long
.3837df	a9 40 00	lda #$0040	              LDA #$0040  ;
.3837e2	85 28		sta $28		              STA OPL2_REG_REGION
.3837e4	20 96 40	jsr $384096	              JSR OPL2_GET_REG_OFFSET
.3837e7	e2 20		sep #$20	                SEP #$20        ; set A short
.3837e9	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3837eb	29 c0		and #$c0	              AND #$C0
.3837ed	4a		lsr a		              LSR A
.3837ee	4a		lsr a		              LSR A
.3837ef	4a		lsr a		              LSR A
.3837f0	4a		lsr a		              LSR A
.3837f1	4a		lsr a		              LSR A
.3837f2	4a		lsr a		              LSR A
.3837f3	6b		rtl		              RTL
.3837f4					OPL2_GET_BLOCK
.3837f4	48		pha		                PHA             ; begin setdp macro
.3837f5	08		php		                PHP
.3837f6	c2 20		rep #$20	                REP #$20        ; set A long
.3837f8	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3837fb	5b		tcd		                TCD
.3837fc	28		plp		                PLP
.3837fd	68		pla		                PLA             ; end setdp macro
.3837fe	e2 20		sep #$20	                SEP #$20        ; set A short
.383800	18		clc		              CLC
.383801	a5 27		lda $27		              LDA OPL2_CHANNEL
.383803	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.383805	69 b0		adc #$b0	              ADC #$B0
.383807	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.383809	a9 00		lda #$00	              LDA #$00
.38380b	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.38380d	c2 30		rep #$30	                REP #$30        ; set A&X long
.38380f	18		clc		              CLC
.383810	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.383813	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.383815	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.383817	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.38381a	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.38381c	e2 20		sep #$20	                SEP #$20        ; set A short
.38381e	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383820	29 1c		and #$1c	              AND #$1C
.383822	4a		lsr a		              LSR A
.383823	4a		lsr a		              LSR A
.383824	6b		rtl		              RTL
.383825					OPL2_GET_KEYON
.383825	48		pha		                PHA             ; begin setdp macro
.383826	08		php		                PHP
.383827	c2 20		rep #$20	                REP #$20        ; set A long
.383829	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.38382c	5b		tcd		                TCD
.38382d	28		plp		                PLP
.38382e	68		pla		                PLA             ; end setdp macro
.38382f	e2 20		sep #$20	                SEP #$20        ; set A short
.383831	18		clc		              CLC
.383832	a5 27		lda $27		              LDA OPL2_CHANNEL
.383834	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.383836	69 b0		adc #$b0	              ADC #$B0
.383838	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.38383a	a9 00		lda #$00	              LDA #$00
.38383c	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.38383e	c2 30		rep #$30	                REP #$30        ; set A&X long
.383840	18		clc		              CLC
.383841	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.383844	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.383846	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.383848	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.38384b	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.38384d	e2 20		sep #$20	                SEP #$20        ; set A short
.38384f	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383851	29 20		and #$20	              AND #$20
.383853	6b		rtl		              RTL
.383854					OPL2_GET_FEEDBACK
.383854	48		pha		                PHA             ; begin setdp macro
.383855	08		php		                PHP
.383856	c2 20		rep #$20	                REP #$20        ; set A long
.383858	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.38385b	5b		tcd		                TCD
.38385c	28		plp		                PLP
.38385d	68		pla		                PLA             ; end setdp macro
.38385e	e2 20		sep #$20	                SEP #$20        ; set A short
.383860	18		clc		              CLC
.383861	a5 27		lda $27		              LDA OPL2_CHANNEL
.383863	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.383865	69 c0		adc #$c0	              ADC #$C0
.383867	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.383869	a9 00		lda #$00	              LDA #$00
.38386b	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.38386d	c2 30		rep #$30	                REP #$30        ; set A&X long
.38386f	18		clc		              CLC
.383870	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.383873	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.383875	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.383877	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.38387a	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.38387c	e2 20		sep #$20	                SEP #$20        ; set A short
.38387e	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383880	29 e0		and #$e0	              AND #$E0
.383882	4a		lsr a		              LSR
.383883	6b		rtl		              RTL
.383884					OPL2_GET_SYNTHMODE
.383884	48		pha		                PHA             ; begin setdp macro
.383885	08		php		                PHP
.383886	c2 20		rep #$20	                REP #$20        ; set A long
.383888	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.38388b	5b		tcd		                TCD
.38388c	28		plp		                PLP
.38388d	68		pla		                PLA             ; end setdp macro
.38388e	e2 20		sep #$20	                SEP #$20        ; set A short
.383890	18		clc		              CLC
.383891	a5 27		lda $27		              LDA OPL2_CHANNEL
.383893	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.383895	69 c0		adc #$c0	              ADC #$C0
.383897	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.383899	a9 00		lda #$00	              LDA #$00
.38389b	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.38389d	c2 30		rep #$30	                REP #$30        ; set A&X long
.38389f	18		clc		              CLC
.3838a0	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.3838a3	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.3838a5	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3838a7	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.3838aa	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3838ac	e2 20		sep #$20	                SEP #$20        ; set A short
.3838ae	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3838b0	29 01		and #$01	              AND #$01
.3838b2	6b		rtl		              RTL
.3838b3					OPL2_GET_DEEPTREMOLO
.3838b3	48		pha		                PHA             ; begin setdp macro
.3838b4	08		php		                PHP
.3838b5	c2 20		rep #$20	                REP #$20        ; set A long
.3838b7	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3838ba	5b		tcd		                TCD
.3838bb	28		plp		                PLP
.3838bc	68		pla		                PLA             ; end setdp macro
.3838bd	c2 20		rep #$20	                REP #$20        ; set A long
.3838bf	a9 bd 00	lda #$00bd	              LDA #$00BD;
.3838c2	85 28		sta $28		              STA OPL2_REG_REGION
.3838c4	20 96 40	jsr $384096	              JSR OPL2_GET_REG_OFFSET
.3838c7	e2 20		sep #$20	                SEP #$20        ; set A short
.3838c9	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3838cb	29 80		and #$80	              AND #$80
.3838cd	6b		rtl		              RTL
.3838ce					OPL2_GET_DEEPVIBRATO
.3838ce	48		pha		                PHA             ; begin setdp macro
.3838cf	08		php		                PHP
.3838d0	c2 20		rep #$20	                REP #$20        ; set A long
.3838d2	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3838d5	5b		tcd		                TCD
.3838d6	28		plp		                PLP
.3838d7	68		pla		                PLA             ; end setdp macro
.3838d8	c2 20		rep #$20	                REP #$20        ; set A long
.3838da	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.3838dd	69 bd 00	adc #$00bd	              ADC #$00BD
.3838e0	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3838e2	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.3838e5	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3838e7	e2 20		sep #$20	                SEP #$20        ; set A short
.3838e9	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3838eb	29 40		and #$40	              AND #$40
.3838ed	6b		rtl		              RTL
.3838ee					OPL2_GET_PERCUSSION
.3838ee	48		pha		                PHA             ; begin setdp macro
.3838ef	08		php		                PHP
.3838f0	c2 20		rep #$20	                REP #$20        ; set A long
.3838f2	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3838f5	5b		tcd		                TCD
.3838f6	28		plp		                PLP
.3838f7	68		pla		                PLA             ; end setdp macro
.3838f8	c2 20		rep #$20	                REP #$20        ; set A long
.3838fa	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.3838fd	69 bd 00	adc #$00bd	              ADC #$00BD
.383900	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.383902	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.383905	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.383907	e2 20		sep #$20	                SEP #$20        ; set A short
.383909	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.38390b	29 20		and #$20	              AND #$20
.38390d	6b		rtl		              RTL
.38390e					OPL2_GET_DRUMS
.38390e	48		pha		                PHA             ; begin setdp macro
.38390f	08		php		                PHP
.383910	c2 20		rep #$20	                REP #$20        ; set A long
.383912	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383915	5b		tcd		                TCD
.383916	28		plp		                PLP
.383917	68		pla		                PLA             ; end setdp macro
.383918	c2 20		rep #$20	                REP #$20        ; set A long
.38391a	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.38391d	69 bd 00	adc #$00bd	              ADC #$00BD
.383920	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.383922	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.383925	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.383927	e2 20		sep #$20	                SEP #$20        ; set A short
.383929	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.38392b	29 1f		and #$1f	              AND #$1F
.38392d	6b		rtl		              RTL
.38392e					OPL2_Get_WaveForm
.38392e	6b		rtl		                RTL
.38392f					OPL2_PLAYNOTE
.38392f	48		pha		                PHA             ; begin setdp macro
.383930	08		php		                PHP
.383931	c2 20		rep #$20	                REP #$20        ; set A long
.383933	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383936	5b		tcd		                TCD
.383937	28		plp		                PLP
.383938	68		pla		                PLA             ; end setdp macro
.383939	e2 20		sep #$20	                SEP #$20        ; set A short
.38393b	da		phx		                PHX
.38393c	a9 00		lda #$00	                LDA #$00
.38393e	85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.383940	20 17 3f	jsr $383f17	                JSR OPL2_SET_KEYON
.383943	20 dc 3e	jsr $383edc	                JSR OPL2_SET_BLOCK  ; OPL2_SET_BLOCK Already to OPL2_OCTAVE
.383946	e2 10		sep #$10	                SEP #$10        ; set X short
.383948	a5 30		lda $30		                LDA OPL2_NOTE
.38394a	3a		dec a		                DEC A
.38394b	0a		asl a		                ASL A
.38394c	aa		tax		                TAX
.38394d	bf c8 16 38	lda $3816c8,x	                LDA @lnoteFNumbers,X
.383951	85 32		sta $32		                STA OPL2_PARAMETER0 ; Store the 8it in Param OPL2_PARAMETER0
.383953	e8		inx		                INX
.383954	bf c8 16 38	lda $3816c8,x	                LDA @lnoteFNumbers,X
.383958	85 33		sta $33		                STA OPL2_PARAMETER1 ; Store the 8bit in Param OPL2_PARAMETER1
.38395a	22 5a 3e 38	jsl $383e5a	                JSL OPL2_SET_FNUMBER
.38395e	a9 01		lda #$01	                LDA #$01
.383960	85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.383962	20 17 3f	jsr $383f17	                JSR OPL2_SET_KEYON
.383965	c2 10		rep #$10	                REP #$10        ; set X long
.383967	fa		plx		                PLX
.383968	6b		rtl		                RTL
.383969					OPL2_PLAYDRUM
.383969	6b		rtl		                RTL
.38396a					OPL2_SET_INSTRUMENT
.38396a	48		pha		                PHA             ; begin setdp macro
.38396b	08		php		                PHP
.38396c	c2 20		rep #$20	                REP #$20        ; set A long
.38396e	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383971	5b		tcd		                TCD
.383972	28		plp		                PLP
.383973	68		pla		                PLA             ; end setdp macro
.383974	38		sec		              SEC ; Set the WaveFormSelect to True
.383975	22 58 3b 38	jsl $383b58	              JSL OPL2_SET_WAVEFORMSELECT;
.383979	e2 20		sep #$20	                SEP #$20        ; set A short
.38397b	c2 10		rep #$10	                REP #$10        ; set X long
.38397d	a0 00 00	ldy #$0000	              LDY #$0000
.383980	a2 00 00	ldx #$0000	              LDX #$0000
.383983	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO],Y ; Pointer Location 0 in Instrument Profile
.383985	85 35		sta $35		              STA OPL2_PARAMETER3
.383987	c8		iny		              INY
.383988	c9 06		cmp #$06	              CMP #$06
.38398a	d0 03		bne $38398f	              BNE PERCUSSION_NEXT07
.38398c	82 70 01	brl $383aff	              BRL Percussion_6
.38398f					PERCUSSION_NEXT07
.38398f	c9 07		cmp #$07	              CMP #$07
.383991	d0 03		bne $383996	              BNE PERCUSSION_NEXT08
.383993	82 44 01	brl $383ada	              BRL Percussion_7
.383996					PERCUSSION_NEXT08
.383996	c9 08		cmp #$08	              CMP #$08
.383998	d0 03		bne $38399d	              BNE PERCUSSION_NEXT09
.38399a	82 18 01	brl $383ab5	              BRL Percussion_8
.38399d					PERCUSSION_NEXT09
.38399d	c9 09		cmp #$09	              CMP #$09
.38399f	d0 03		bne $3839a4	              BNE PERCUSSION_NEXT0A
.3839a1	82 ec 00	brl $383a90	              BRL Percussion_9
.3839a4					PERCUSSION_NEXT0A
.3839a4	c9 0a		cmp #$0a	              CMP #$0A
.3839a6	d0 03		bne $3839ab	              BNE Percussion_Default
.3839a8	82 c0 00	brl $383a6b	              BRL Percussion_A
.3839ab					Percussion_Default
.3839ab	a9 00		lda #$00	              LDA #$00
.3839ad	85 26		sta $26		              STA OPL2_OPERATOR
.3839af	c2 20		rep #$20	                REP #$20        ; set A long
.3839b1	a9 20 00	lda #$0020	              LDA #$0020;
.3839b4	85 28		sta $28		              STA OPL2_REG_REGION
.3839b6	20 96 40	jsr $384096	              JSR OPL2_GET_REG_OFFSET
.3839b9	e2 20		sep #$20	                SEP #$20        ; set A short
.3839bb	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.3839bd	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3839bf	c8		iny		              INY
.3839c0	c2 20		rep #$20	                REP #$20        ; set A long
.3839c2	a9 40 00	lda #$0040	              LDA #$0040;
.3839c5	85 28		sta $28		              STA OPL2_REG_REGION
.3839c7	20 96 40	jsr $384096	              JSR OPL2_GET_REG_OFFSET
.3839ca	e2 20		sep #$20	                SEP #$20        ; set A short
.3839cc	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.3839ce	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3839d0	c8		iny		              INY
.3839d1	c2 20		rep #$20	                REP #$20        ; set A long
.3839d3	a9 60 00	lda #$0060	              LDA #$0060;
.3839d6	85 28		sta $28		              STA OPL2_REG_REGION
.3839d8	20 96 40	jsr $384096	              JSR OPL2_GET_REG_OFFSET
.3839db	e2 20		sep #$20	                SEP #$20        ; set A short
.3839dd	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.3839df	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3839e1	c8		iny		              INY
.3839e2	c2 20		rep #$20	                REP #$20        ; set A long
.3839e4	a9 80 00	lda #$0080	              LDA #$0080;
.3839e7	85 28		sta $28		              STA OPL2_REG_REGION
.3839e9	20 96 40	jsr $384096	              JSR OPL2_GET_REG_OFFSET
.3839ec	e2 20		sep #$20	                SEP #$20        ; set A short
.3839ee	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.3839f0	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3839f2	c8		iny		              INY
.3839f3	c2 20		rep #$20	                REP #$20        ; set A long
.3839f5	a9 e0 00	lda #$00e0	              LDA #$00E0;
.3839f8	85 28		sta $28		              STA OPL2_REG_REGION
.3839fa	20 96 40	jsr $384096	              JSR OPL2_GET_REG_OFFSET
.3839fd	e2 20		sep #$20	                SEP #$20        ; set A short
.3839ff	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.383a01	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383a03	c8		iny		              INY
.383a04	e2 10		sep #$10	                SEP #$10        ; set X short
.383a06	a5 27		lda $27		              LDA OPL2_CHANNEL
.383a08	29 0f		and #$0f	              AND #$0F
.383a0a	aa		tax		              TAX
.383a0b	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 6 in Instrument Profile
.383a0d	9f c0 e7 af	sta $afe7c0,x	              STA @lOPL2_S_FEEDBACK,X
.383a11	c8		iny		              INY
.383a12	a9 01		lda #$01	              LDA #$01
.383a14	85 26		sta $26		              STA OPL2_OPERATOR
.383a16	c2 20		rep #$20	                REP #$20        ; set A long
.383a18	a9 20 00	lda #$0020	              LDA #$0020;
.383a1b	85 28		sta $28		              STA OPL2_REG_REGION
.383a1d	20 96 40	jsr $384096	              JSR OPL2_GET_REG_OFFSET
.383a20	e2 20		sep #$20	                SEP #$20        ; set A short
.383a22	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 7 in Instrument Profile
.383a24	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383a26	c8		iny		              INY
.383a27	c2 20		rep #$20	                REP #$20        ; set A long
.383a29	a9 40 00	lda #$0040	              LDA #$0040;
.383a2c	85 28		sta $28		              STA OPL2_REG_REGION
.383a2e	20 96 40	jsr $384096	              JSR OPL2_GET_REG_OFFSET
.383a31	e2 20		sep #$20	                SEP #$20        ; set A short
.383a33	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 8 in Instrument Profile
.383a35	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383a37	c8		iny		              INY
.383a38	c2 20		rep #$20	                REP #$20        ; set A long
.383a3a	a9 60 00	lda #$0060	              LDA #$0060;
.383a3d	85 28		sta $28		              STA OPL2_REG_REGION
.383a3f	20 96 40	jsr $384096	              JSR OPL2_GET_REG_OFFSET
.383a42	e2 20		sep #$20	                SEP #$20        ; set A short
.383a44	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 9 in Instrument Profile
.383a46	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383a48	c8		iny		              INY
.383a49	c2 20		rep #$20	                REP #$20        ; set A long
.383a4b	a9 80 00	lda #$0080	              LDA #$0080;
.383a4e	85 28		sta $28		              STA OPL2_REG_REGION
.383a50	20 96 40	jsr $384096	              JSR OPL2_GET_REG_OFFSET
.383a53	e2 20		sep #$20	                SEP #$20        ; set A short
.383a55	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location A in Instrument Profile
.383a57	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383a59	c8		iny		              INY
.383a5a	c2 20		rep #$20	                REP #$20        ; set A long
.383a5c	a9 e0 00	lda #$00e0	              LDA #$00E0;
.383a5f	85 28		sta $28		              STA OPL2_REG_REGION
.383a61	20 96 40	jsr $384096	              JSR OPL2_GET_REG_OFFSET
.383a64	e2 20		sep #$20	                SEP #$20        ; set A short
.383a66	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location B in Instrument Profile
.383a68	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383a6a	6b		rtl		                RTL
.383a6b					Percussion_A
.383a6b	e2 20		sep #$20	                SEP #$20        ; set A short
.383a6d	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.383a6f	8f 31 e7 af	sta $afe731	              STA @lOPL2_S_AM_VID_EG_KSR_MULT + $11
.383a73	c8		iny		              INY
.383a74	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.383a76	8f 51 e7 af	sta $afe751	              STA @lOPL2_S_KSL_TL + $11
.383a7a	c8		iny		              INY
.383a7b	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.383a7d	8f 71 e7 af	sta $afe771	              STA @lOPL2_S_AR_DR + $11
.383a81	c8		iny		              INY
.383a82	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.383a84	8f 91 e7 af	sta $afe791	              STA @lOPL2_S_SL_RR + $11
.383a88	c8		iny		              INY
.383a89	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.383a8b	8f f1 e7 af	sta $afe7f1	              STA @lOPL2_S_WAVE_SELECT + $11
.383a8f	6b		rtl		                RTL
.383a90					Percussion_9
.383a90	e2 20		sep #$20	                SEP #$20        ; set A short
.383a92	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.383a94	8f 35 e7 af	sta $afe735	              STA @lOPL2_S_AM_VID_EG_KSR_MULT + $15
.383a98	c8		iny		              INY
.383a99	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.383a9b	8f 55 e7 af	sta $afe755	              STA @lOPL2_S_KSL_TL + $15
.383a9f	c8		iny		              INY
.383aa0	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.383aa2	8f 75 e7 af	sta $afe775	              STA @lOPL2_S_AR_DR + $15
.383aa6	c8		iny		              INY
.383aa7	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.383aa9	8f 95 e7 af	sta $afe795	              STA @lOPL2_S_SL_RR + $15
.383aad	c8		iny		              INY
.383aae	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.383ab0	8f f5 e7 af	sta $afe7f5	              STA @lOPL2_S_WAVE_SELECT + $15
.383ab4	6b		rtl		              RTL
.383ab5					Percussion_8
.383ab5	e2 20		sep #$20	                SEP #$20        ; set A short
.383ab7	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.383ab9	8f 32 e7 af	sta $afe732	              STA @lOPL2_S_AM_VID_EG_KSR_MULT + $12
.383abd	c8		iny		              INY
.383abe	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.383ac0	8f 52 e7 af	sta $afe752	              STA @lOPL2_S_KSL_TL + $12
.383ac4	c8		iny		              INY
.383ac5	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.383ac7	8f 72 e7 af	sta $afe772	              STA @lOPL2_S_AR_DR + $12
.383acb	c8		iny		              INY
.383acc	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.383ace	8f 92 e7 af	sta $afe792	              STA @lOPL2_S_SL_RR + $12
.383ad2	c8		iny		              INY
.383ad3	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.383ad5	8f f2 e7 af	sta $afe7f2	              STA @lOPL2_S_WAVE_SELECT + $12
.383ad9	6b		rtl		              RTL
.383ada					Percussion_7
.383ada	e2 20		sep #$20	                SEP #$20        ; set A short
.383adc	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.383ade	8f 34 e7 af	sta $afe734	              STA @lOPL2_S_AM_VID_EG_KSR_MULT + $14
.383ae2	c8		iny		              INY
.383ae3	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.383ae5	8f 54 e7 af	sta $afe754	              STA @lOPL2_S_KSL_TL + $14
.383ae9	c8		iny		              INY
.383aea	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.383aec	8f 74 e7 af	sta $afe774	              STA @lOPL2_S_AR_DR + $14
.383af0	c8		iny		              INY
.383af1	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.383af3	8f 94 e7 af	sta $afe794	              STA @lOPL2_S_SL_RR + $14
.383af7	c8		iny		              INY
.383af8	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.383afa	8f f4 e7 af	sta $afe7f4	              STA @lOPL2_S_WAVE_SELECT + $14
.383afe	6b		rtl		              RTL
.383aff					Percussion_6
.383aff	e2 20		sep #$20	                SEP #$20        ; set A short
.383b01	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.383b03	8f 30 e7 af	sta $afe730	              STA @lOPL2_S_AM_VID_EG_KSR_MULT + $10
.383b07	8f 33 e7 af	sta $afe733	              STA @lOPL2_S_AM_VID_EG_KSR_MULT + $13
.383b0b	c8		iny		              INY
.383b0c	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.383b0e	8f 50 e7 af	sta $afe750	              STA @lOPL2_S_KSL_TL + $10
.383b12	8f 53 e7 af	sta $afe753	              STA @lOPL2_S_KSL_TL + $13
.383b16	c8		iny		              INY
.383b17	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.383b19	8f 70 e7 af	sta $afe770	              STA @lOPL2_S_AR_DR + $10
.383b1d	8f 73 e7 af	sta $afe773	              STA @lOPL2_S_AR_DR + $13
.383b21	c8		iny		              INY
.383b22	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.383b24	8f 90 e7 af	sta $afe790	              STA @lOPL2_S_SL_RR + $10
.383b28	8f 93 e7 af	sta $afe793	              STA @lOPL2_S_SL_RR + $13
.383b2c	c8		iny		              INY
.383b2d	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.383b2f	8f f0 e7 af	sta $afe7f0	              STA @lOPL2_S_WAVE_SELECT + $10
.383b33	8f f3 e7 af	sta $afe7f3	              STA @lOPL2_S_WAVE_SELECT + $13
.383b37	6b		rtl		              RTL
.383b38					OPL2_SET_REGISTER
.383b38	48		pha		                PHA             ; begin setdp macro
.383b39	08		php		                PHP
.383b3a	c2 20		rep #$20	                REP #$20        ; set A long
.383b3c	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383b3f	5b		tcd		                TCD
.383b40	28		plp		                PLP
.383b41	68		pla		                PLA             ; end setdp macro
.383b42	c2 20		rep #$20	                REP #$20        ; set A long
.383b44	18		clc		              CLC
.383b45	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.383b48	65 32		adc $32		              ADC OPL2_PARAMETER0
.383b4a	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.383b4c	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.383b4f	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.383b51	e2 20		sep #$20	                SEP #$20        ; set A short
.383b53	a5 33		lda $33		              LDA OPL2_PARAMETER1
.383b55	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383b57	6b		rtl		              RTL
.383b58					OPL2_SET_WAVEFORMSELECT
.383b58	48		pha		                PHA             ; begin setdp macro
.383b59	08		php		                PHP
.383b5a	c2 20		rep #$20	                REP #$20        ; set A long
.383b5c	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383b5f	5b		tcd		                TCD
.383b60	28		plp		                PLP
.383b61	68		pla		                PLA             ; end setdp macro
.383b62	c2 20		rep #$20	                REP #$20        ; set A long
.383b64	a9 01 e7	lda #$e701	              LDA #<>OPL2_S_BASE + $0001
.383b67	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.383b69	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.383b6c	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.383b6e	e2 20		sep #$20	                SEP #$20        ; set A short
.383b70	b0 07		bcs $383b79	              BCS OPL2_Set_WaveFormSelect_set
.383b72	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383b74	29 df		and #$df	              AND #$DF
.383b76	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383b78	6b		rtl		              RTL
.383b79					OPL2_Set_WaveFormSelect_set
.383b79	48		pha		                PHA             ; begin setdp macro
.383b7a	08		php		                PHP
.383b7b	c2 20		rep #$20	                REP #$20        ; set A long
.383b7d	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383b80	5b		tcd		                TCD
.383b81	28		plp		                PLP
.383b82	68		pla		                PLA             ; end setdp macro
.383b83	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383b85	09 20 00	ora #$0020	              ORA #$20
.383b88	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383b8a	6b		rtl		                RTL
.383b8b					OPL2_SET_TREMOLO
.383b8b	48		pha		                PHA             ; begin setdp macro
.383b8c	08		php		                PHP
.383b8d	c2 20		rep #$20	                REP #$20        ; set A long
.383b8f	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383b92	5b		tcd		                TCD
.383b93	28		plp		                PLP
.383b94	68		pla		                PLA             ; end setdp macro
.383b95	08		php		                PHP ; Push the Carry
.383b96	c2 20		rep #$20	                REP #$20        ; set A long
.383b98	18		clc		                CLC
.383b99	a9 20 00	lda #$0020	                LDA #$0020 ;
.383b9c	85 28		sta $28		                STA OPL2_REG_REGION
.383b9e	20 96 40	jsr $384096	                JSR OPL2_GET_REG_OFFSET
.383ba1	28		plp		                PLP ; Pull the Carry out
.383ba2	e2 20		sep #$20	                SEP #$20        ; set A short
.383ba4	b0 08		bcs $383bae	                BCS OPL2_Set_Tremolo_Set;
.383ba6	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383ba8	29 7f		and #$7f	                AND #$7F
.383baa	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383bac	80 06		bra $383bb4	                BRA OPL2_Set_Tremolo_Exit
.383bae					OPL2_Set_Tremolo_Set
.383bae	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383bb0	09 80		ora #$80	                ORA #$80
.383bb2	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383bb4					OPL2_Set_Tremolo_Exit
.383bb4	6b		rtl		                RTL
.383bb5					OPL2_GET_TREMOLO
.383bb5	48		pha		                PHA             ; begin setdp macro
.383bb6	08		php		                PHP
.383bb7	c2 20		rep #$20	                REP #$20        ; set A long
.383bb9	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383bbc	5b		tcd		                TCD
.383bbd	28		plp		                PLP
.383bbe	68		pla		                PLA             ; end setdp macro
.383bbf	c2 20		rep #$20	                REP #$20        ; set A long
.383bc1	a9 20 00	lda #$0020	                LDA #$0020;
.383bc4	85 28		sta $28		                STA OPL2_REG_REGION
.383bc6	20 96 40	jsr $384096	                JSR OPL2_GET_REG_OFFSET
.383bc9	e2 20		sep #$20	                SEP #$20        ; set A short
.383bcb	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383bcd	29 80		and #$80	                AND #$80
.383bcf	6b		rtl		                RTL
.383bd0					OPL2_SET_VIBRATO
.383bd0	48		pha		                PHA             ; begin setdp macro
.383bd1	08		php		                PHP
.383bd2	c2 20		rep #$20	                REP #$20        ; set A long
.383bd4	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383bd7	5b		tcd		                TCD
.383bd8	28		plp		                PLP
.383bd9	68		pla		                PLA             ; end setdp macro
.383bda	08		php		                PHP ; Push the Carry
.383bdb	c2 20		rep #$20	                REP #$20        ; set A long
.383bdd	18		clc		                CLC
.383bde	a9 20 00	lda #$0020	                LDA #$0020;
.383be1	85 28		sta $28		                STA OPL2_REG_REGION
.383be3	20 96 40	jsr $384096	                JSR OPL2_GET_REG_OFFSET
.383be6	28		plp		                PLP ; Pull the Carry out
.383be7	e2 20		sep #$20	                SEP #$20        ; set A short
.383be9	b0 08		bcs $383bf3	                BCS OPL2_Set_Vibrato_Set;
.383beb	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383bed	29 bf		and #$bf	                AND #$BF
.383bef	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383bf1	80 06		bra $383bf9	                BRA OPL2_Set_Vibrato_Exit
.383bf3					OPL2_Set_Vibrato_Set
.383bf3	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383bf5	09 40		ora #$40	                ORA #$40
.383bf7	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383bf9					OPL2_Set_Vibrato_Exit
.383bf9	6b		rtl		                RTL
.383bfa					OPL2_GET_VIBRATO
.383bfa	48		pha		                PHA             ; begin setdp macro
.383bfb	08		php		                PHP
.383bfc	c2 20		rep #$20	                REP #$20        ; set A long
.383bfe	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383c01	5b		tcd		                TCD
.383c02	28		plp		                PLP
.383c03	68		pla		                PLA             ; end setdp macro
.383c04	c2 20		rep #$20	                REP #$20        ; set A long
.383c06	a9 20 00	lda #$0020	                LDA #$0020;
.383c09	85 28		sta $28		                STA OPL2_REG_REGION
.383c0b	20 96 40	jsr $384096	                JSR OPL2_GET_REG_OFFSET
.383c0e	e2 20		sep #$20	                SEP #$20        ; set A short
.383c10	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383c12	29 40		and #$40	                AND #$40
.383c14	6b		rtl		                RTL
.383c15					OPL2_SET_MAINTAINSUSTAIN
.383c15	48		pha		                PHA             ; begin setdp macro
.383c16	08		php		                PHP
.383c17	c2 20		rep #$20	                REP #$20        ; set A long
.383c19	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383c1c	5b		tcd		                TCD
.383c1d	28		plp		                PLP
.383c1e	68		pla		                PLA             ; end setdp macro
.383c1f	08		php		              PHP ; Push the Carry
.383c20	c2 20		rep #$20	                REP #$20        ; set A long
.383c22	18		clc		              CLC
.383c23	a9 20 00	lda #$0020	              LDA #$0020;
.383c26	85 28		sta $28		              STA OPL2_REG_REGION
.383c28	20 96 40	jsr $384096	              JSR OPL2_GET_REG_OFFSET
.383c2b	28		plp		              PLP ; Pull the Carry out
.383c2c	e2 20		sep #$20	                SEP #$20        ; set A short
.383c2e	b0 08		bcs $383c38	              BCS OPL2_Set_MaintainSustain_Set;
.383c30	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383c32	29 df		and #$df	              AND #$DF
.383c34	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383c36	80 06		bra $383c3e	              BRA OPL2_Set_MaintainSustain_Exit
.383c38					OPL2_Set_MaintainSustain_Set
.383c38	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383c3a	09 20		ora #$20	              ORA #$20
.383c3c	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383c3e					OPL2_Set_MaintainSustain_Exit
.383c3e	6b		rtl		                RTL
.383c3f					OPL2_GET_MAINTAINSUSTAIN
.383c3f	48		pha		                PHA             ; begin setdp macro
.383c40	08		php		                PHP
.383c41	c2 20		rep #$20	                REP #$20        ; set A long
.383c43	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383c46	5b		tcd		                TCD
.383c47	28		plp		                PLP
.383c48	68		pla		                PLA             ; end setdp macro
.383c49	c2 20		rep #$20	                REP #$20        ; set A long
.383c4b	a9 20 00	lda #$0020	              LDA #$0020;
.383c4e	85 28		sta $28		              STA OPL2_REG_REGION
.383c50	20 96 40	jsr $384096	              JSR OPL2_GET_REG_OFFSET
.383c53	e2 20		sep #$20	                SEP #$20        ; set A short
.383c55	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383c57	29 20		and #$20	              AND #$20
.383c59	6b		rtl		                RTL
.383c5a					OPL2_SET_ENVELOPESCALING
.383c5a	48		pha		                PHA             ; begin setdp macro
.383c5b	08		php		                PHP
.383c5c	c2 20		rep #$20	                REP #$20        ; set A long
.383c5e	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383c61	5b		tcd		                TCD
.383c62	28		plp		                PLP
.383c63	68		pla		                PLA             ; end setdp macro
.383c64	08		php		              PHP ; Push the Carry
.383c65	c2 20		rep #$20	                REP #$20        ; set A long
.383c67	18		clc		              CLC
.383c68	a9 20 00	lda #$0020	              LDA #$0020;
.383c6b	85 28		sta $28		              STA OPL2_REG_REGION
.383c6d	20 96 40	jsr $384096	              JSR OPL2_GET_REG_OFFSET
.383c70	28		plp		              PLP ; Pull the Carry out
.383c71	e2 20		sep #$20	                SEP #$20        ; set A short
.383c73	b0 08		bcs $383c7d	              BCS OPL2_Set_EnvelopeScaling_Set;
.383c75	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383c77	29 ef		and #$ef	              AND #$EF
.383c79	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383c7b	80 06		bra $383c83	              BRA OPL2_Set_EnvelopeScaling_Exit
.383c7d					OPL2_Set_EnvelopeScaling_Set
.383c7d	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383c7f	09 10		ora #$10	              ORA #$10
.383c81	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383c83					OPL2_Set_EnvelopeScaling_Exit
.383c83	6b		rtl		                RTL
.383c84					OPL2_GET_ENVELOPESCALING
.383c84	48		pha		                PHA             ; begin setdp macro
.383c85	08		php		                PHP
.383c86	c2 20		rep #$20	                REP #$20        ; set A long
.383c88	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383c8b	5b		tcd		                TCD
.383c8c	28		plp		                PLP
.383c8d	68		pla		                PLA             ; end setdp macro
.383c8e	c2 20		rep #$20	                REP #$20        ; set A long
.383c90	a9 20 00	lda #$0020	              LDA #$0020;
.383c93	85 28		sta $28		              STA OPL2_REG_REGION
.383c95	20 96 40	jsr $384096	              JSR OPL2_GET_REG_OFFSET
.383c98	e2 20		sep #$20	                SEP #$20        ; set A short
.383c9a	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383c9c	29 10		and #$10	              AND #$10
.383c9e	6b		rtl		                RTL
.383c9f					OPL2_GET_MODFREQMULTIPLE
.383c9f	48		pha		                PHA             ; begin setdp macro
.383ca0	08		php		                PHP
.383ca1	c2 20		rep #$20	                REP #$20        ; set A long
.383ca3	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383ca6	5b		tcd		                TCD
.383ca7	28		plp		                PLP
.383ca8	68		pla		                PLA             ; end setdp macro
.383ca9	c2 20		rep #$20	                REP #$20        ; set A long
.383cab	a9 20 00	lda #$0020	              LDA #$0020;
.383cae	85 28		sta $28		              STA OPL2_REG_REGION
.383cb0	20 96 40	jsr $384096	              JSR OPL2_GET_REG_OFFSET
.383cb3	e2 20		sep #$20	                SEP #$20        ; set A short
.383cb5	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383cb7	29 0f		and #$0f	              AND #$0F
.383cb9	6b		rtl		              RTL
.383cba					OPL2_SET_MODFREQMULTIPLE
.383cba	48		pha		                PHA             ; begin setdp macro
.383cbb	08		php		                PHP
.383cbc	c2 20		rep #$20	                REP #$20        ; set A long
.383cbe	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383cc1	5b		tcd		                TCD
.383cc2	28		plp		                PLP
.383cc3	68		pla		                PLA             ; end setdp macro
.383cc4	c2 20		rep #$20	                REP #$20        ; set A long
.383cc6	a9 20 00	lda #$0020	                LDA #$0020;
.383cc9	85 28		sta $28		                STA OPL2_REG_REGION
.383ccb	20 96 40	jsr $384096	                JSR OPL2_GET_REG_OFFSET
.383cce	e2 20		sep #$20	                SEP #$20        ; set A short
.383cd0	a5 32		lda $32		                LDA OPL2_PARAMETER0
.383cd2	29 0f		and #$0f	                AND #$0F
.383cd4	85 32		sta $32		                STA OPL2_PARAMETER0
.383cd6	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383cd8	29 f0		and #$f0	                AND #$F0
.383cda	05 32		ora $32		                ORA OPL2_PARAMETER0
.383cdc	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383cde	6b		rtl		                RTL
.383cdf					OPL2_SET_SCALINGLEVEL
.383cdf	48		pha		                PHA             ; begin setdp macro
.383ce0	08		php		                PHP
.383ce1	c2 20		rep #$20	                REP #$20        ; set A long
.383ce3	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383ce6	5b		tcd		                TCD
.383ce7	28		plp		                PLP
.383ce8	68		pla		                PLA             ; end setdp macro
.383ce9	c2 20		rep #$20	                REP #$20        ; set A long
.383ceb	a9 40 00	lda #$0040	                LDA #$0040;
.383cee	85 28		sta $28		                STA OPL2_REG_REGION
.383cf0	20 96 40	jsr $384096	                JSR OPL2_GET_REG_OFFSET
.383cf3	e2 20		sep #$20	                SEP #$20        ; set A short
.383cf5	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.383cf7	29 03		and #$03	                AND #$03
.383cf9	0a		asl a		                ASL
.383cfa	0a		asl a		                ASL
.383cfb	0a		asl a		                ASL
.383cfc	0a		asl a		                ASL
.383cfd	0a		asl a		                ASL
.383cfe	0a		asl a		                ASL
.383cff	85 32		sta $32		                STA OPL2_PARAMETER0
.383d01	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383d03	29 3f		and #$3f	                AND #$3F
.383d05	05 32		ora $32		                ORA OPL2_PARAMETER0
.383d07	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383d09	6b		rtl		                RTL
.383d0a					OPL2_SET_VOLUME
.383d0a	48		pha		                PHA             ; begin setdp macro
.383d0b	08		php		                PHP
.383d0c	c2 20		rep #$20	                REP #$20        ; set A long
.383d0e	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383d11	5b		tcd		                TCD
.383d12	28		plp		                PLP
.383d13	68		pla		                PLA             ; end setdp macro
.383d14	c2 20		rep #$20	                REP #$20        ; set A long
.383d16	a9 40 00	lda #$0040	                LDA #$0040  ;
.383d19	85 28		sta $28		                STA OPL2_REG_REGION
.383d1b	20 96 40	jsr $384096	                JSR OPL2_GET_REG_OFFSET
.383d1e	e2 20		sep #$20	                SEP #$20        ; set A short
.383d20	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Volume
.383d22	29 3f		and #$3f	                AND #$3F
.383d24	85 32		sta $32		                STA OPL2_PARAMETER0
.383d26	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383d28	29 c0		and #$c0	                AND #$C0
.383d2a	05 32		ora $32		                ORA OPL2_PARAMETER0
.383d2c	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383d2e	6b		rtl		                RTL
.383d2f					OPL2_GET_VOLUME
.383d2f	48		pha		                PHA             ; begin setdp macro
.383d30	08		php		                PHP
.383d31	c2 20		rep #$20	                REP #$20        ; set A long
.383d33	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383d36	5b		tcd		                TCD
.383d37	28		plp		                PLP
.383d38	68		pla		                PLA             ; end setdp macro
.383d39	c2 20		rep #$20	                REP #$20        ; set A long
.383d3b	a9 40 00	lda #$0040	                LDA #$0040  ;
.383d3e	85 28		sta $28		                STA OPL2_REG_REGION
.383d40	20 96 40	jsr $384096	                JSR OPL2_GET_REG_OFFSET
.383d43	e2 20		sep #$20	                SEP #$20        ; set A short
.383d45	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383d47	29 3f		and #$3f	                AND #$3F
.383d49	6b		rtl		                RTL
.383d4a					OPL2_SET_ATTACK
.383d4a	48		pha		                PHA             ; begin setdp macro
.383d4b	08		php		                PHP
.383d4c	c2 20		rep #$20	                REP #$20        ; set A long
.383d4e	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383d51	5b		tcd		                TCD
.383d52	28		plp		                PLP
.383d53	68		pla		                PLA             ; end setdp macro
.383d54	c2 20		rep #$20	                REP #$20        ; set A long
.383d56	a9 60 00	lda #$0060	                LDA #$0060  ;
.383d59	85 28		sta $28		                STA OPL2_REG_REGION
.383d5b	20 96 40	jsr $384096	                JSR OPL2_GET_REG_OFFSET
.383d5e	e2 20		sep #$20	                SEP #$20        ; set A short
.383d60	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.383d62	29 0f		and #$0f	                AND #$0F
.383d64	0a		asl a		                ASL
.383d65	0a		asl a		                ASL
.383d66	0a		asl a		                ASL
.383d67	0a		asl a		                ASL
.383d68	85 32		sta $32		                STA OPL2_PARAMETER0
.383d6a	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383d6c	29 0f		and #$0f	                AND #$0F
.383d6e	05 32		ora $32		                ORA OPL2_PARAMETER0
.383d70	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383d72	6b		rtl		                RTL
.383d73					OPL2_GET_ATTACK
.383d73	48		pha		                PHA             ; begin setdp macro
.383d74	08		php		                PHP
.383d75	c2 20		rep #$20	                REP #$20        ; set A long
.383d77	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383d7a	5b		tcd		                TCD
.383d7b	28		plp		                PLP
.383d7c	68		pla		                PLA             ; end setdp macro
.383d7d	c2 20		rep #$20	                REP #$20        ; set A long
.383d7f	a9 60 00	lda #$0060	                LDA #$0060
.383d82	85 28		sta $28		                STA OPL2_REG_REGION
.383d84	20 96 40	jsr $384096	                JSR OPL2_GET_REG_OFFSET
.383d87	e2 20		sep #$20	                SEP #$20        ; set A short
.383d89	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383d8b	29 f0		and #$f0	                AND #$F0
.383d8d	4a		lsr a		                LSR
.383d8e	4a		lsr a		                LSR
.383d8f	4a		lsr a		                LSR
.383d90	4a		lsr a		                LSR
.383d91	6b		rtl		                RTL
.383d92					OPL2_SET_DECAY
.383d92	48		pha		                PHA             ; begin setdp macro
.383d93	08		php		                PHP
.383d94	c2 20		rep #$20	                REP #$20        ; set A long
.383d96	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383d99	5b		tcd		                TCD
.383d9a	28		plp		                PLP
.383d9b	68		pla		                PLA             ; end setdp macro
.383d9c	c2 20		rep #$20	                REP #$20        ; set A long
.383d9e	a9 60 00	lda #$0060	                LDA #$0060;
.383da1	85 28		sta $28		                STA OPL2_REG_REGION
.383da3	20 96 40	jsr $384096	                JSR OPL2_GET_REG_OFFSET
.383da6	e2 20		sep #$20	                SEP #$20        ; set A short
.383da8	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.383daa	29 0f		and #$0f	                AND #$0F
.383dac	85 32		sta $32		                STA OPL2_PARAMETER0
.383dae	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383db0	29 f0		and #$f0	                AND #$F0
.383db2	05 32		ora $32		                ORA OPL2_PARAMETER0
.383db4	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383db6	6b		rtl		                RTL
.383db7					OPL2_GET_DECAY
.383db7	48		pha		                PHA             ; begin setdp macro
.383db8	08		php		                PHP
.383db9	c2 20		rep #$20	                REP #$20        ; set A long
.383dbb	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383dbe	5b		tcd		                TCD
.383dbf	28		plp		                PLP
.383dc0	68		pla		                PLA             ; end setdp macro
.383dc1	c2 20		rep #$20	                REP #$20        ; set A long
.383dc3	a9 60 00	lda #$0060	                LDA #$0060
.383dc6	85 28		sta $28		                STA OPL2_REG_REGION
.383dc8	20 96 40	jsr $384096	                JSR OPL2_GET_REG_OFFSET
.383dcb	e2 20		sep #$20	                SEP #$20        ; set A short
.383dcd	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383dcf	29 0f		and #$0f	                AND #$0F
.383dd1	6b		rtl		                RTL
.383dd2					OPL2_SET_SUSTAIN
.383dd2	48		pha		                PHA             ; begin setdp macro
.383dd3	08		php		                PHP
.383dd4	c2 20		rep #$20	                REP #$20        ; set A long
.383dd6	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383dd9	5b		tcd		                TCD
.383dda	28		plp		                PLP
.383ddb	68		pla		                PLA             ; end setdp macro
.383ddc	c2 20		rep #$20	                REP #$20        ; set A long
.383dde	a9 80 00	lda #$0080	                LDA #$0080;
.383de1	85 28		sta $28		                STA OPL2_REG_REGION
.383de3	20 96 40	jsr $384096	                JSR OPL2_GET_REG_OFFSET
.383de6	e2 20		sep #$20	                SEP #$20        ; set A short
.383de8	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.383dea	29 0f		and #$0f	                AND #$0F
.383dec	0a		asl a		                ASL
.383ded	0a		asl a		                ASL
.383dee	0a		asl a		                ASL
.383def	0a		asl a		                ASL
.383df0	85 32		sta $32		                STA OPL2_PARAMETER0
.383df2	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383df4	29 0f		and #$0f	                AND #$0F
.383df6	05 32		ora $32		                ORA OPL2_PARAMETER0
.383df8	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383dfa	6b		rtl		                RTL
.383dfb					OPL2_GET_SUSTAIN
.383dfb	48		pha		                PHA             ; begin setdp macro
.383dfc	08		php		                PHP
.383dfd	c2 20		rep #$20	                REP #$20        ; set A long
.383dff	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383e02	5b		tcd		                TCD
.383e03	28		plp		                PLP
.383e04	68		pla		                PLA             ; end setdp macro
.383e05	c2 20		rep #$20	                REP #$20        ; set A long
.383e07	a9 80 00	lda #$0080	                LDA #$0080
.383e0a	85 28		sta $28		                STA OPL2_REG_REGION
.383e0c	20 96 40	jsr $384096	                JSR OPL2_GET_REG_OFFSET
.383e0f	e2 20		sep #$20	                SEP #$20        ; set A short
.383e11	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383e13	29 f0		and #$f0	                AND #$F0
.383e15	4a		lsr a		                LSR
.383e16	4a		lsr a		                LSR
.383e17	4a		lsr a		                LSR
.383e18	4a		lsr a		                LSR
.383e19	6b		rtl		                RTL
.383e1a					OPL2_SET_RELEASE
.383e1a	48		pha		                PHA             ; begin setdp macro
.383e1b	08		php		                PHP
.383e1c	c2 20		rep #$20	                REP #$20        ; set A long
.383e1e	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383e21	5b		tcd		                TCD
.383e22	28		plp		                PLP
.383e23	68		pla		                PLA             ; end setdp macro
.383e24	c2 20		rep #$20	                REP #$20        ; set A long
.383e26	a9 80 00	lda #$0080	                LDA #$0080;
.383e29	85 28		sta $28		                STA OPL2_REG_REGION
.383e2b	20 96 40	jsr $384096	                JSR OPL2_GET_REG_OFFSET
.383e2e	e2 20		sep #$20	                SEP #$20        ; set A short
.383e30	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.383e32	29 0f		and #$0f	                AND #$0F
.383e34	85 32		sta $32		                STA OPL2_PARAMETER0
.383e36	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383e38	29 f0		and #$f0	                AND #$F0
.383e3a	05 32		ora $32		                ORA OPL2_PARAMETER0
.383e3c	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383e3e	6b		rtl		                RTL
.383e3f					OPL2_GET_RELEASE
.383e3f	48		pha		                PHA             ; begin setdp macro
.383e40	08		php		                PHP
.383e41	c2 20		rep #$20	                REP #$20        ; set A long
.383e43	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383e46	5b		tcd		                TCD
.383e47	28		plp		                PLP
.383e48	68		pla		                PLA             ; end setdp macro
.383e49	c2 20		rep #$20	                REP #$20        ; set A long
.383e4b	a9 80 00	lda #$0080	                LDA #$0080
.383e4e	85 28		sta $28		                STA OPL2_REG_REGION
.383e50	20 96 40	jsr $384096	                JSR OPL2_GET_REG_OFFSET
.383e53	e2 20		sep #$20	                SEP #$20        ; set A short
.383e55	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383e57	29 0f		and #$0f	                AND #$0F
.383e59	6b		rtl		                RTL
.383e5a					OPL2_SET_FNUMBER
.383e5a	48		pha		                PHA             ; begin setdp macro
.383e5b	08		php		                PHP
.383e5c	c2 20		rep #$20	                REP #$20        ; set A long
.383e5e	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383e61	5b		tcd		                TCD
.383e62	28		plp		                PLP
.383e63	68		pla		                PLA             ; end setdp macro
.383e64	e2 20		sep #$20	                SEP #$20        ; set A short
.383e66	18		clc		                CLC
.383e67	a5 27		lda $27		                LDA OPL2_CHANNEL
.383e69	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.383e6b	69 a0		adc #$a0	                ADC #$A0
.383e6d	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.383e6f	a9 00		lda #$00	                LDA #$00
.383e71	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.383e73	c2 30		rep #$30	                REP #$30        ; set A&X long
.383e75	18		clc		                CLC
.383e76	a9 00 e7	lda #$e700	                LDA #<>OPL2_S_BASE
.383e79	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.383e7b	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.383e7d	a9 af 00	lda #$00af	                LDA #`OPL2_S_BASE
.383e80	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.383e82	e2 20		sep #$20	                SEP #$20        ; set A short
.383e84	a5 32		lda $32		                LDA OPL2_PARAMETER0     ; Load the first 8 Bits Value of FNumber
.383e86	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]  ; Load
.383e88	18		clc		                CLC
.383e89	a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.383e8b	69 10		adc #$10	                ADC #$10
.383e8d	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.383e8f	a5 33		lda $33		                LDA OPL2_PARAMETER1
.383e91	29 03		and #$03	                AND #$03
.383e93	85 33		sta $33		                STA OPL2_PARAMETER1
.383e95	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383e97	29 fc		and #$fc	                AND #$FC
.383e99	05 33		ora $33		                ORA OPL2_PARAMETER1
.383e9b	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383e9d	6b		rtl		                RTL
.383e9e					OPL2_GET_FNUMBER
.383e9e	48		pha		                PHA             ; begin setdp macro
.383e9f	08		php		                PHP
.383ea0	c2 20		rep #$20	                REP #$20        ; set A long
.383ea2	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383ea5	5b		tcd		                TCD
.383ea6	28		plp		                PLP
.383ea7	68		pla		                PLA             ; end setdp macro
.383ea8	e2 20		sep #$20	                SEP #$20        ; set A short
.383eaa	18		clc		                CLC
.383eab	a5 27		lda $27		                LDA OPL2_CHANNEL
.383ead	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.383eaf	69 a0		adc #$a0	                ADC #$A0
.383eb1	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.383eb3	a9 00		lda #$00	                LDA #$00
.383eb5	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.383eb7	c2 30		rep #$30	                REP #$30        ; set A&X long
.383eb9	18		clc		                CLC
.383eba	a9 00 e7	lda #$e700	                LDA #<>OPL2_S_BASE
.383ebd	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.383ebf	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.383ec1	a9 af 00	lda #$00af	                LDA #`OPL2_S_BASE
.383ec4	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.383ec6	e2 20		sep #$20	                SEP #$20        ; set A short
.383ec8	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383eca	85 32		sta $32		                STA OPL2_PARAMETER0
.383ecc	18		clc		                CLC
.383ecd	a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.383ecf	69 10		adc #$10	                ADC #$10
.383ed1	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.383ed3	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383ed5	29 03		and #$03	                AND #$03
.383ed7	85 33		sta $33		                STA OPL2_PARAMETER1
.383ed9	6b		rtl		                RTL
.383eda					OPL2_Set_Frequency
.383eda	6b		rtl		                RTL
.383edb					OPL2_Get_Frequency
.383edb	6b		rtl		                RTL
.383edc					OPL2_SET_BLOCK
.383edc	48		pha		                PHA             ; begin setdp macro
.383edd	08		php		                PHP
.383ede	c2 20		rep #$20	                REP #$20        ; set A long
.383ee0	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383ee3	5b		tcd		                TCD
.383ee4	28		plp		                PLP
.383ee5	68		pla		                PLA             ; end setdp macro
.383ee6	e2 20		sep #$20	                SEP #$20        ; set A short
.383ee8	18		clc		                CLC
.383ee9	a5 27		lda $27		                LDA OPL2_CHANNEL
.383eeb	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.383eed	69 b0		adc #$b0	                ADC #$B0
.383eef	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.383ef1	a9 00		lda #$00	                LDA #$00
.383ef3	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.383ef5	c2 30		rep #$30	                REP #$30        ; set A&X long
.383ef7	18		clc		                CLC
.383ef8	a9 00 e7	lda #$e700	                LDA #<>OPL2_S_BASE
.383efb	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.383efd	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.383eff	a9 af 00	lda #$00af	                LDA #`OPL2_S_BASE
.383f02	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.383f04	e2 20		sep #$20	                SEP #$20        ; set A short
.383f06	a5 31		lda $31		                LDA OPL2_OCTAVE
.383f08	29 07		and #$07	                AND #$07
.383f0a	0a		asl a		                ASL
.383f0b	0a		asl a		                ASL
.383f0c	85 31		sta $31		                STA OPL2_OCTAVE
.383f0e	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383f10	29 e3		and #$e3	                AND #$E3
.383f12	05 31		ora $31		                ORA OPL2_OCTAVE
.383f14	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383f16	60		rts		                RTS
.383f17					OPL2_SET_KEYON
.383f17	48		pha		                PHA             ; begin setdp macro
.383f18	08		php		                PHP
.383f19	c2 20		rep #$20	                REP #$20        ; set A long
.383f1b	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383f1e	5b		tcd		                TCD
.383f1f	28		plp		                PLP
.383f20	68		pla		                PLA             ; end setdp macro
.383f21	e2 20		sep #$20	                SEP #$20        ; set A short
.383f23	18		clc		                CLC
.383f24	a5 27		lda $27		                LDA OPL2_CHANNEL
.383f26	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.383f28	69 b0		adc #$b0	                ADC #$B0
.383f2a	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.383f2c	a9 00		lda #$00	                LDA #$00
.383f2e	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.383f30	c2 30		rep #$30	                REP #$30        ; set A&X long
.383f32	18		clc		                CLC
.383f33	a9 00 e7	lda #$e700	                LDA #<>OPL2_S_BASE
.383f36	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.383f38	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.383f3a	a9 af 00	lda #$00af	                LDA #`OPL2_S_BASE
.383f3d	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.383f3f	e2 20		sep #$20	                SEP #$20        ; set A short
.383f41	a5 32		lda $32		                LDA OPL2_PARAMETER0
.383f43	29 01		and #$01	                AND #$01
.383f45	f0 02		beq $383f49	                BEQ SET_KEYON_OFF
.383f47	a9 20		lda #$20	                LDA #$20
.383f49					    SET_KEYON_OFF
.383f49	85 32		sta $32		                STA OPL2_PARAMETER0
.383f4b	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.383f4d	29 df		and #$df	                AND #$DF
.383f4f	05 32		ora $32		                ORA OPL2_PARAMETER0
.383f51	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.383f53	60		rts		                RTS
.383f54					OPL2_SET_FEEDBACK
.383f54	48		pha		                PHA             ; begin setdp macro
.383f55	08		php		                PHP
.383f56	c2 20		rep #$20	                REP #$20        ; set A long
.383f58	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383f5b	5b		tcd		                TCD
.383f5c	28		plp		                PLP
.383f5d	68		pla		                PLA             ; end setdp macro
.383f5e	e2 20		sep #$20	                SEP #$20        ; set A short
.383f60	18		clc		              CLC
.383f61	a5 27		lda $27		              LDA OPL2_CHANNEL
.383f63	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.383f65	69 c0		adc #$c0	              ADC #$C0
.383f67	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.383f69	a9 00		lda #$00	              LDA #$00
.383f6b	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.383f6d	c2 30		rep #$30	                REP #$30        ; set A&X long
.383f6f	18		clc		              CLC
.383f70	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.383f73	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.383f75	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.383f77	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.383f7a	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.383f7c	e2 20		sep #$20	                SEP #$20        ; set A short
.383f7e	a5 32		lda $32		              LDA OPL2_PARAMETER0
.383f80	29 07		and #$07	              AND #$07
.383f82	0a		asl a		              ASL
.383f83	85 32		sta $32		              STA OPL2_PARAMETER0
.383f85	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383f87	29 01		and #$01	              AND #$01
.383f89	05 32		ora $32		              ORA OPL2_PARAMETER0
.383f8b	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383f8d	6b		rtl		                RTL
.383f8e					OPL2_SET_SYNTHMODE
.383f8e	48		pha		                PHA             ; begin setdp macro
.383f8f	08		php		                PHP
.383f90	c2 20		rep #$20	                REP #$20        ; set A long
.383f92	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383f95	5b		tcd		                TCD
.383f96	28		plp		                PLP
.383f97	68		pla		                PLA             ; end setdp macro
.383f98	08		php		              PHP ; Push the Carry
.383f99	e2 20		sep #$20	                SEP #$20        ; set A short
.383f9b	18		clc		              CLC
.383f9c	a5 27		lda $27		              LDA OPL2_CHANNEL
.383f9e	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.383fa0	69 c0		adc #$c0	              ADC #$C0
.383fa2	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.383fa4	a9 00		lda #$00	              LDA #$00
.383fa6	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.383fa8	c2 30		rep #$30	                REP #$30        ; set A&X long
.383faa	18		clc		              CLC
.383fab	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.383fae	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.383fb0	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.383fb2	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.383fb5	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.383fb7	28		plp		              PLP ; Pull the Carry out
.383fb8	e2 20		sep #$20	                SEP #$20        ; set A short
.383fba	b0 08		bcs $383fc4	              BCS OPL2_Set_Synthmode_Set;
.383fbc	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383fbe	29 fe		and #$fe	              AND #$FE
.383fc0	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383fc2	80 06		bra $383fca	              BRA OPL2_Set_Synthmode_Exit
.383fc4					OPL2_Set_Synthmode_Set
.383fc4	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383fc6	09 01		ora #$01	              ORA #$01
.383fc8	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383fca					OPL2_Set_Synthmode_Exit
.383fca	6b		rtl		                RTL
.383fcb					OPL2_SET_DEEPTREMOLO
.383fcb	48		pha		                PHA             ; begin setdp macro
.383fcc	08		php		                PHP
.383fcd	c2 20		rep #$20	                REP #$20        ; set A long
.383fcf	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383fd2	5b		tcd		                TCD
.383fd3	28		plp		                PLP
.383fd4	68		pla		                PLA             ; end setdp macro
.383fd5	c2 20		rep #$20	                REP #$20        ; set A long
.383fd7	a9 bd e7	lda #$e7bd	              LDA #<>OPL2_S_BASE + $00BD
.383fda	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.383fdc	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.383fdf	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.383fe1	e2 20		sep #$20	                SEP #$20        ; set A short
.383fe3	b0 08		bcs $383fed	              BCS OPL2_Set_DeepTremolo_Set;
.383fe5	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383fe7	29 7f		and #$7f	              AND #$7F
.383fe9	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383feb	80 06		bra $383ff3	              BRA OPL2_Set_DeepTremolo_Exit
.383fed					OPL2_Set_DeepTremolo_Set
.383fed	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.383fef	09 80		ora #$80	              ORA #$80
.383ff1	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.383ff3					OPL2_Set_DeepTremolo_Exit
.383ff3	6b		rtl		                RTL
.383ff4					OPL2_SET_DEEPVIBRATO
.383ff4	48		pha		                PHA             ; begin setdp macro
.383ff5	08		php		                PHP
.383ff6	c2 20		rep #$20	                REP #$20        ; set A long
.383ff8	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.383ffb	5b		tcd		                TCD
.383ffc	28		plp		                PLP
.383ffd	68		pla		                PLA             ; end setdp macro
.383ffe	c2 20		rep #$20	                REP #$20        ; set A long
.384000	a9 bd e7	lda #$e7bd	              LDA #<>OPL2_S_BASE + $00BD
.384003	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.384005	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.384008	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.38400a	e2 20		sep #$20	                SEP #$20        ; set A short
.38400c	b0 08		bcs $384016	              BCS OPL2_Set_DeepVibrato_Set;
.38400e	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.384010	29 bf		and #$bf	              AND #$BF
.384012	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.384014	80 06		bra $38401c	              BRA OPL2_Set_DeepVibrato_Exit
.384016					OPL2_Set_DeepVibrato_Set
.384016	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.384018	09 40		ora #$40	              ORA #$40
.38401a	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.38401c					OPL2_Set_DeepVibrato_Exit
.38401c	6b		rtl		                RTL
.38401d					OPL2_SET_PERCUSSION
.38401d	48		pha		                PHA             ; begin setdp macro
.38401e	08		php		                PHP
.38401f	c2 20		rep #$20	                REP #$20        ; set A long
.384021	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.384024	5b		tcd		                TCD
.384025	28		plp		                PLP
.384026	68		pla		                PLA             ; end setdp macro
.384027	c2 20		rep #$20	                REP #$20        ; set A long
.384029	a9 bd e7	lda #$e7bd	                LDA #<>OPL2_S_BASE + $00BD
.38402c	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.38402e	a9 af 00	lda #$00af	                LDA #`OPL2_S_BASE
.384031	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.384033	e2 20		sep #$20	                SEP #$20        ; set A short
.384035	b0 08		bcs $38403f	                BCS OPL2_Set_Percussion_Set;
.384037	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.384039	29 df		and #$df	                AND #$DF
.38403b	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.38403d	80 06		bra $384045	                BRA OPL2_Set_Percussion_Exit
.38403f					OPL2_Set_Percussion_Set
.38403f	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.384041	09 20		ora #$20	                ORA #$20
.384043	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.384045					OPL2_Set_Percussion_Exit
.384045	6b		rtl		                RTL
.384046					OPL2_SET_DRUMS
.384046	48		pha		                PHA             ; begin setdp macro
.384047	08		php		                PHP
.384048	c2 20		rep #$20	                REP #$20        ; set A long
.38404a	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.38404d	5b		tcd		                TCD
.38404e	28		plp		                PLP
.38404f	68		pla		                PLA             ; end setdp macro
.384050	c2 20		rep #$20	                REP #$20        ; set A long
.384052	a9 bd e7	lda #$e7bd	                LDA #<>OPL2_S_BASE + $00BD
.384055	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.384057	a9 af 00	lda #$00af	                LDA #`OPL2_S_BASE
.38405a	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.38405c	e2 20		sep #$20	                SEP #$20        ; set A short
.38405e	a5 32		lda $32		                LDA OPL2_PARAMETER0
.384060	29 1f		and #$1f	                AND #$1F
.384062	85 32		sta $32		                STA OPL2_PARAMETER0
.384064	49 ff		eor #$ff	                EOR #$FF
.384066	85 33		sta $33		                STA OPL2_PARAMETER1
.384068	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.38406a	25 33		and $33		                AND OPL2_PARAMETER1
.38406c	05 32		ora $32		                ORA OPL2_PARAMETER0
.38406e	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.384070	6b		rtl		                RTL
.384071					OPL2_SET_WAVEFORM
.384071	48		pha		                PHA             ; begin setdp macro
.384072	08		php		                PHP
.384073	c2 20		rep #$20	                REP #$20        ; set A long
.384075	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.384078	5b		tcd		                TCD
.384079	28		plp		                PLP
.38407a	68		pla		                PLA             ; end setdp macro
.38407b	c2 20		rep #$20	                REP #$20        ; set A long
.38407d	a9 e0 00	lda #$00e0	                LDA #$00E0;
.384080	85 28		sta $28		                STA OPL2_REG_REGION
.384082	20 96 40	jsr $384096	                JSR OPL2_GET_REG_OFFSET
.384085	e2 20		sep #$20	                SEP #$20        ; set A short
.384087	a5 32		lda $32		                LDA OPL2_PARAMETER0
.384089	29 03		and #$03	                AND #$03
.38408b	85 32		sta $32		                STA OPL2_PARAMETER0
.38408d	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.38408f	29 fc		and #$fc	                AND #$FC
.384091	05 32		ora $32		                ORA OPL2_PARAMETER0
.384093	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.384095	6b		rtl		                RTL
.384096					OPL2_GET_REG_OFFSET
.384096	e2 30		sep #$30	                SEP #$30        ; set A&X short
.384098	a5 27		lda $27		                LDA OPL2_CHANNEL
.38409a	29 0f		and #$0f	                AND #$0F
.38409c	aa		tax		                TAX
.38409d	a5 26		lda $26		                LDA OPL2_OPERATOR   ; 0 = operator 1, other = operator 2
.38409f	d0 06		bne $3840a7	                BNE OPL2_Get_Register_Offset_l0
.3840a1	bf e0 16 38	lda $3816e0,x	                LDA @lregisterOffsets_operator0, X
.3840a5	80 04		bra $3840ab	                BRA OPL2_Get_Register_Offset_exit
.3840a7					OPL2_Get_Register_Offset_l0
.3840a7	bf e9 16 38	lda $3816e9,x	                LDA @lregisterOffsets_operator1, X
.3840ab					OPL2_Get_Register_Offset_exit
.3840ab	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.3840ad	a9 00		lda #$00	                LDA #$00
.3840af	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.3840b1	c2 30		rep #$30	                REP #$30        ; set A&X long
.3840b3	18		clc		                CLC
.3840b4	a9 00 e7	lda #$e700	                LDA #<>OPL2_S_BASE
.3840b7	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.3840b9	65 28		adc $28		                ADC OPL2_REG_REGION ; Ex: $20, or $40, $60, $80 (in 16bits)
.3840bb	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.3840bd	a9 af 00	lda #$00af	                LDA #`OPL2_S_BASE
.3840c0	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.3840c2	60		rts		                RTS

;******  Return to file: src\kernel.asm


;******  Processing file: src\ide_library.asm

.0000					IDE_ID
>0000	00 00				General_Config        .word $0000
>0002	00 00				Obsolete0             .word $0000
>0004	00 00				Specific_Config       .word $0000
>0006	00 00				Obsolete1             .word $0000
>0008	00 00				Retired0              .word $0000
>000a	00 00				Retired1              .word $0000
>000c	00 00				Obsolete2             .word $0000
>000e	00 00				Reserved_CFlash0      .word $0000
>0010	00 00				Reserved_CFlash1      .word $0000
>0012	00 00				Retired2              .word $0000
>0014	00 00 00 00 00 00 00 00		Serial_Number_String  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>001c	00 00 00 00 00 00 00 00 00 00 00 00
>0028	00 00 00 00			Retired3              .word $0000, $0000
>002c	00 00				Obsolete3             .word $0000
>002e	00 00 00 00 00 00 00 00		Firmware_Rev_String   .byte $00, $00, $00, $00, $00, $00, $00, $00
>0036	00 00 00 00 00 00 00 00		Model_Number_String   .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>003e	00 00 00 00 00 00 00 00
>0046	00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>004e	00 00 00 00 00 00 00 00
>0056	00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00
>005e	00 00				Max_Number_Logic_Sec  .word $0000
>0060	00 00				Trusted_Comp_Feature  .word $0000
>0062	00 00 00 00			Capabilities          .word $0000, $0000
>0066	00 00 00 00			Obsolete4             .word $0000, $0000
>006a	00 00				Free_Fall_Control     .word $0000
>006c	00 00 00 00 00 00 00 00		Obsolete5             .word $0000, $0000, $0000, $0000, $0000
>0074	00 00
>0076	00 00				Reserved0             .word $0000
>0078	00 00 00 00			Total_Addy_Logic_Sec  .word $0000, $0000
>007c	00 00				Obsolete6             .word $0000
>007e	00 00 00 00			Reserved1             .word $0000, $0000
>0082	00 00				Min_Multiword_DMA_Trf .word $0000
>0084	00 00				Manu_Recommended_Mult .word $0000
>0086	00 00				Min_PIO_Trf           .word $0000      ; Word 67
>0088	00 00				Min_PIO_Trf_with_IORD .word $0000      ; Word 68
>008a	00 00 00 00			Reserved2             .word $0000, $0000
>008e	00 00 00 00 00 00 00 00		Reserved3             .word $0000, $0000, $0000, $0000
>0096	00 00				Queue_Dept            .word $0000
>0098	00 00				SATA_Capabilities     .word $0000
>009a	00 00				Reserved_SATA         .word $0000
>009c	00 00				Sup_Feat_SATA         .word $0000
>009e	00 00				Sup_Feat_SATA_Enabled .word $0000    ; Word 79
>00a0	00 00				Major_Version_Number  .word $0000    ; Word 80
>00a2	00 00				Minor_Version_Number  .word $0000    ; Word 81
>00a4	00 00 00 00 00 00 00 00		Cmd_And_Features_Sup  .word $0000, $0000, $0000, $0000, $0000, $0000
>00ac	00 00 00 00
>00b0	00 00				UDMA_Modes            .word $0000
>00b2	00 00 00 00			Reserved4             .word $0000, $0000 ; Word 89
>00b6	00 00				Current_APM_Level     .word $0000
>00b8	00 00				Master_Password_Ident .word $0000
>00ba	00 00				Hardware_Reset_Result .word $0000
>00bc	00 00				Current_AAM_Value     .word $0000  ; Word 94
>00be	00 00				Stream_Min_Req_Size   .word $0000  ; Word 95
>00c0	00 00				Stream_Trf_Time_DMA   .word $0000  ; Word 96
>00c2	00 00				Stream_Access_Lat     .word $0000
>00c4	00 00 00 00			Streaming_Perf_Gran   .word $0000, $0000
>00c8	00 00 00 00 00 00 00 00		Tot_Num_Add_Logic_Sec .word $0000, $0000, $0000, $0000
>00d0	00 00				Streaming_Trf_Time    .word $0000 ; Word 104
>00d2	00 00				Reserved5             .word $0000 ; Word 105
.3840c3					IDE_INIT
.3840c3	e2 20		sep #$20	                SEP #$20        ; set A short
.3840c5	20 e6 40	jsr $3840e6	              JSR IDE_DRIVE_BSY ; Check to see if drive is busy
.3840c8	a9 00		lda #$00	              LDA #$00
.3840ca	8f 35 e8 af	sta $afe835	              STA IDE_CLDR_HI
.3840ce	8f 34 e8 af	sta $afe834	              STA IDE_CLDR_LO
.3840d2	8f 32 e8 af	sta $afe832	              STA IDE_SECT_CNT
.3840d6	a9 01		lda #$01	              LDA #$01
.3840d8	8f 33 e8 af	sta $afe833	              STA IDE_SECT_SRT
.3840dc	a9 a0		lda #$a0	              LDA #$A0 ; HEAD 0 - Select Master Drive
.3840de	8f 36 e8 af	sta $afe836	              STA IDE_HEAD
.3840e2	20 fc 40	jsr $3840fc	              JSR IDE_DRV_READY_NOTBUSY
.3840e5	6b		rtl		              RTL
.3840e6					IDE_DRIVE_BSY
.3840e6	af 37 e8 af	lda $afe837	              LDA IDE_CMD_STAT
.3840ea	29 80		and #$80	              AND #$80    ;; Check for RDY Bit, this needs to be 1'b1
.3840ec	c9 80		cmp #$80	              CMP #$80    ;; If not go read again
.3840ee	f0 f6		beq $3840e6	              BEQ IDE_DRIVE_BSY
.3840f0	60		rts		              RTS
.3840f1					IDE_DRIVE_READY
.3840f1	af 37 e8 af	lda $afe837	              LDA IDE_CMD_STAT
.3840f5	29 40		and #$40	              AND #$40    ;; Check to see if the Busy Signal is Cleared
.3840f7	c9 40		cmp #$40	              CMP #$40    ; if it is still one, then go back to read again.
.3840f9	d0 f6		bne $3840f1	              BNE IDE_DRIVE_READY
.3840fb	60		rts		              RTS
.3840fc					IDE_DRV_READY_NOTBUSY
.3840fc	af 37 e8 af	lda $afe837	              LDA IDE_CMD_STAT
.384100	29 40		and #$40	              AND #$40    ;; Check to see if the Busy Signal is Cleared
.384102	c9 40		cmp #$40	              CMP #$40    ; if it is still one, then go back to read again.
.384104	d0 f6		bne $3840fc	              BNE IDE_DRV_READY_NOTBUSY
.384106	af 37 e8 af	lda $afe837	              LDA IDE_CMD_STAT
.38410a	29 80		and #$80	              AND #$80    ;; Check for RDY Bit, this needs to be 1'b1
.38410c	c9 80		cmp #$80	              CMP #$80    ;; If not go read again
.38410e	f0 ec		beq $3840fc	              BEQ IDE_DRV_READY_NOTBUSY
.384110	60		rts		              RTS
.384111					IDE_NOT_DRQ
.384111	af 37 e8 af	lda $afe837	              LDA IDE_CMD_STAT
.384115	29 08		and #$08	              AND #$08
.384117	c9 08		cmp #$08	              CMP #$08
.384119	d0 f6		bne $384111	              BNE IDE_NOT_DRQ
.38411b	60		rts		              RTS
.38411c					IDE_GET_512BYTES
.38411c	c2 30		rep #$30	                REP #$30        ; set A&X long
.38411e	af 38 e8 af	lda $afe838	              LDA IDE_DATA_LO
.384122	a2 00 00	ldx #$0000	              LDX #$0000
.384125					IDE_GET_INFO_KEEP_FETCHING
.384125	af 38 e8 af	lda $afe838	              LDA IDE_DATA_LO
.384129	9f 00 04 00	sta $000400,x	              STA SDOS_BLK_BEGIN, X
.38412d	e8		inx		              INX
.38412e	e8		inx		              INX
.38412f	e0 00 02	cpx #$0200	              CPX #$0200
.384132	d0 f1		bne $384125	              BNE IDE_GET_INFO_KEEP_FETCHING
.384134	6b		rtl		              RTL
.384135					IDE_GET_INFO
.384135	e2 20		sep #$20	                SEP #$20        ; set A short
.384137	20 e6 40	jsr $3840e6	              JSR IDE_DRIVE_BSY
.38413a	a9 ec		lda #$ec	              LDA #$EC              ; Send the Command #$EC to fetch the INFO about the HDD
.38413c	8f 37 e8 af	sta $afe837	              STA IDE_CMD_STAT
.384140	20 fc 40	jsr $3840fc	              JSR IDE_DRV_READY_NOTBUSY
.384143	20 11 41	jsr $384111	              JSR IDE_NOT_DRQ       ; Wait for the Drive to let us know that the Data is ready
.384146	22 1c 41 38	jsl $38411c	              JSL IDE_GET_512BYTES
.38414a	e2 20		sep #$20	                SEP #$20        ; set A short
.38414c	c2 10		rep #$10	                REP #$10        ; set X long
.38414e	a2 00 00	ldx #$0000	              LDX #$0000
.384151					GET_INFO_LOOP
.384151	bf 37 04 00	lda $000437,x	              LDA SDOS_BLK_BEGIN+55, X    ; Model String
.384155	22 4f 06 39	jsl $39064f	              JSL IPUTC
.384159	bf 36 04 00	lda $000436,x	              LDA SDOS_BLK_BEGIN+54, X    ; Model String
.38415d	22 4f 06 39	jsl $39064f	              JSL IPUTC
.384161	e8		inx		              INX
.384162	e8		inx		              INX
.384163	e0 28 00	cpx #$0028	              CPX #40
.384166	d0 e9		bne $384151	              BNE GET_INFO_LOOP
.384168	6b		rtl		              RTL
.384169					IDE_DISPLAY_INFO

;******  Return to file: src\kernel.asm


;******  Processing file: src\keyboard.asm

.384169					KEYBOARD_INTERRUPT
.384169	48		pha		                PHA             ; begin setdp macro
.38416a	08		php		                PHP
.38416b	c2 20		rep #$20	                REP #$20        ; set A long
.38416d	a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.384170	5b		tcd		                TCD
.384171	28		plp		                PLP
.384172	68		pla		                PLA             ; end setdp macro
.384173	a2 00 00	ldx #$0000	                ldx #$0000
.384176	e2 10		sep #$10	                SEP #$10        ; set X short
.384178	e2 20		sep #$20	                SEP #$20        ; set A short
.38417a	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.38417e	29 01		and #$01	                AND #FNX1_INT00_KBD
.384180	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.384184					IRQ_HANDLER_FETCH
.384184	af 60 10 af	lda $af1060	                LDA @lKBD_INPT_BUF      ; Get Scan Code from KeyBoard
.384188	85 88		sta $0f88	                STA KEYBOARD_SC_TMP     ; Save Code Immediately
.38418a	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the Prefix was picked up before
.38418c	29 80		and #$80	                AND #$80
.38418e	c9 80		cmp #$80	                CMP #$80
.384190	d0 10		bne $3841a2	                BNE CHK_LSHIFT          ; No: do normal scan-code checks
.384192	a5 87		lda $0f87	PREFIX_ON       LDA KEYBOARD_SC_FLG     ; Otherwise: clear prefix
.384194	29 7f		and #$7f	                AND #$7F
.384196	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.384198	a5 88		lda $0f88	                LDA KEYBOARD_SC_TMP     ; Get the prefixed scan-code's character
.38419a	aa		tax		                TAX
.38419b	bf 80 1b 39	lda $391b80,x	                LDA @lScanCode_Prefix_Set1, x
.38419f	4c 45 42	jmp $384245	                JMP KB_WR_2_SCREEN      ; And save it
.3841a2	a5 88		lda $0f88	CHK_LSHIFT      LDA KEYBOARD_SC_TMP
.3841a4	c9 2a		cmp #$2a	                CMP #$2A                ; Left Shift Pressed
.3841a6	d0 03		bne $3841ab	                BNE NOT_KB_SET_LSHIFT
.3841a8	82 ad 00	brl $384258	                BRL KB_SET_SHIFT
.3841ab					NOT_KB_SET_LSHIFT
.3841ab	c9 aa		cmp #$aa	                CMP #$AA                ; Left Shift Unpressed
.3841ad	d0 03		bne $3841b2	                BNE NOT_KB_CLR_LSHIFT
.3841af	82 af 00	brl $384261	                BRL KB_CLR_SHIFT
.3841b2					NOT_KB_CLR_LSHIFT
.3841b2	c9 36		cmp #$36	                CMP #$36                ; Right Shift Pressed
.3841b4	d0 03		bne $3841b9	                BNE NOT_KB_SET_RSHIFT
.3841b6	82 9f 00	brl $384258	                BRL KB_SET_SHIFT
.3841b9					NOT_KB_SET_RSHIFT
.3841b9	c9 b6		cmp #$b6	                CMP #$B6                ; Right Shift Unpressed
.3841bb	d0 03		bne $3841c0	                BNE NOT_KB_CLR_RSHIFT
.3841bd	82 a1 00	brl $384261	                BRL KB_CLR_SHIFT
.3841c0					NOT_KB_CLR_RSHIFT
.3841c0	c9 1d		cmp #$1d	                CMP #$1D                ; Left CTRL pressed
.3841c2	d0 03		bne $3841c7	                BNE NOT_KB_SET_CTRL
.3841c4	82 a3 00	brl $38426a	                BRL KB_SET_CTRL
.3841c7					NOT_KB_SET_CTRL
.3841c7	c9 9d		cmp #$9d	                CMP #$9D                ; Left CTRL Unpressed
.3841c9	d0 03		bne $3841ce	                BNE NOT_KB_CLR_CTRL
.3841cb	82 a5 00	brl $384273	                BRL KB_CLR_CTRL
.3841ce					NOT_KB_CLR_CTRL
.3841ce	c9 38		cmp #$38	                CMP #$38                ; Left ALT Pressed
.3841d0	d0 03		bne $3841d5	                BNE NOT_KB_SET_ALT
.3841d2	82 a7 00	brl $38427c	                BRL KB_SET_ALT
.3841d5					NOT_KB_SET_ALT
.3841d5	c9 b8		cmp #$b8	                CMP #$B8                ; Left ALT Unpressed
.3841d7	d0 03		bne $3841dc	                BNE NOT_KB_CLR_ALT
.3841d9	82 a9 00	brl $384285	                BRL KB_CLR_ALT
.3841dc	c9 e0		cmp #$e0	NOT_KB_CLR_ALT  CMP #$E0                ; Prefixed scan code
.3841de	d0 03		bne $3841e3	                BNE NOT_PREFIXED
.3841e0	82 ab 00	brl $38428e	                BRL KB_SET_PREFIX
.3841e3	c9 45		cmp #$45	NOT_PREFIXED    CMP #$45                ; Numlock Pressed
.3841e5	d0 03		bne $3841ea	                BNE NOT_KB_SET_NUM
.3841e7	82 b6 00	brl $3842a0	                BRL KB_TOG_NUMLOCK
.3841ea	c9 46		cmp #$46	NOT_KB_SET_NUM  CMP #$46                ; Scroll Lock Pressed
.3841ec	d0 03		bne $3841f1	                BNE NOT_KB_SET_SCR
.3841ee	82 a6 00	brl $384297	                BRL KB_TOG_SCRLOCK
.3841f1	c9 3a		cmp #$3a	NOT_KB_SET_SCR  CMP #$3A                ; Caps Lock Pressed
.3841f3	d0 03		bne $3841f8	                BNE NOT_KB_CAPSLOCK
.3841f5	82 b1 00	brl $3842a9	                BRL KB_TOG_CAPLOCK
.3841f8	c9 58		cmp #$58	NOT_KB_CAPSLOCK CMP #$58                ; F12 Pressed
.3841fa	d0 09		bne $384205	                BNE KB_UNPRESSED
.3841fc	a9 60		lda #$60	                LDA #KB_CREDITS         ; Yes: flag that the CREDITS key has been pressed
.3841fe	8f 8a 0f 00	sta $000f8a	                STA @lKEYFLAG
.384202	82 aa 00	brl $3842af	                BRL KB_CHECK_B_DONE
.384205	29 80		and #$80	KB_UNPRESSED    AND #$80                ; See if the Scan Code is press or Depressed
.384207	c9 80		cmp #$80	                CMP #$80                ; Depress Status - We will not do anything at this point
.384209	d0 03		bne $38420e	                BNE KB_NORM_SC
.38420b	82 a1 00	brl $3842af	                BRL KB_CHECK_B_DONE
.38420e	a5 88		lda $0f88	KB_NORM_SC      LDA KEYBOARD_SC_TMP       ;
.384210	aa		tax		                TAX
.384211	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the SHIFT Key is being Pushed
.384213	29 10		and #$10	                AND #$10
.384215	c9 10		cmp #$10	                CMP #$10
.384217	f0 17		beq $384230	                BEQ SHIFT_KEY_ON
.384219	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the CTRL Key is being Pushed
.38421b	29 20		and #$20	                AND #$20
.38421d	c9 20		cmp #$20	                CMP #$20
.38421f	f0 16		beq $384237	                BEQ CTRL_KEY_ON
.384221	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the ALT Key is being Pushed
.384223	29 40		and #$40	                AND #$40
.384225	c9 40		cmp #$40	                CMP #$40
.384227	f0 15		beq $38423e	                BEQ ALT_KEY_ON
.384229	bf 00 19 39	lda $391900,x	                LDA @lScanCode_Press_Set1, x
.38422d	82 15 00	brl $384245	                BRL KB_WR_2_SCREEN
.384230	bf 80 19 39	lda $391980,x	SHIFT_KEY_ON    LDA @lScanCode_Shift_Set1, x
.384234	82 0e 00	brl $384245	                BRL KB_WR_2_SCREEN
.384237	bf 00 1a 39	lda $391a00,x	CTRL_KEY_ON     LDA @lScanCode_Ctrl_Set1, x
.38423b	82 07 00	brl $384245	                BRL KB_WR_2_SCREEN
.38423e	bf 80 1a 39	lda $391a80,x	ALT_KEY_ON      LDA @lScanCode_Alt_Set1, x
.384242	82 00 00	brl $384245	                BRL KB_WR_2_SCREEN
.384245	c9 18		cmp #$18	KB_WR_2_SCREEN  CMP #$18                ; Is it SysRq?
.384247	d0 03		bne $38424c	                BNE savechar
.384249	4c bf 42	jmp $3842bf	                JMP programmerKey       ; Yes: trigger the programmer key
.38424c	48		pha		savechar        PHA
.38424d	c2 10		rep #$10	                REP #$10        ; set X long
.38424f	20 cb 42	jsr $3842cb	                JSR SAVEKEY
.384252	e2 20		sep #$20	                SEP #$20        ; set A short
.384254	68		pla		                PLA
.384255	4c af 42	jmp $3842af	                JMP KB_CHECK_B_DONE
.384258	a5 87		lda $0f87	KB_SET_SHIFT    LDA KEYBOARD_SC_FLG
.38425a	09 10		ora #$10	                ORA #$10
.38425c	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.38425e	4c af 42	jmp $3842af	                JMP KB_CHECK_B_DONE
.384261	a5 87		lda $0f87	KB_CLR_SHIFT    LDA KEYBOARD_SC_FLG
.384263	29 ef		and #$ef	                AND #$EF
.384265	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.384267	4c af 42	jmp $3842af	                JMP KB_CHECK_B_DONE
.38426a	a5 87		lda $0f87	KB_SET_CTRL     LDA KEYBOARD_SC_FLG
.38426c	09 20		ora #$20	                ORA #$20
.38426e	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.384270	4c af 42	jmp $3842af	                JMP KB_CHECK_B_DONE
.384273	a5 87		lda $0f87	KB_CLR_CTRL     LDA KEYBOARD_SC_FLG
.384275	29 df		and #$df	                AND #$DF
.384277	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.384279	4c af 42	jmp $3842af	                JMP KB_CHECK_B_DONE
.38427c	a5 87		lda $0f87	KB_SET_ALT      LDA KEYBOARD_SC_FLG
.38427e	09 40		ora #$40	                ORA #$40
.384280	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.384282	4c af 42	jmp $3842af	                JMP KB_CHECK_B_DONE
.384285	a5 87		lda $0f87	KB_CLR_ALT      LDA KEYBOARD_SC_FLG
.384287	29 bf		and #$bf	                AND #$BF
.384289	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.38428b	4c af 42	jmp $3842af	                JMP KB_CHECK_B_DONE
.38428e	a5 87		lda $0f87	KB_SET_PREFIX   LDA KEYBOARD_SC_FLG
.384290	09 80		ora #$80	                ORA #$80
.384292	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.384294	4c af 42	jmp $3842af	                JMP KB_CHECK_B_DONE
.384297	a5 89		lda $0f89	KB_TOG_SCRLOCK  LDA KEYBOARD_LOCKS
.384299	49 01		eor #$01	                EOR #KB_SCROLL_LOCK         ; toggle the Scroll Lock flag
.38429b	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.38429d	4c af 42	jmp $3842af	                JMP KB_CHECK_B_DONE
.3842a0	a5 89		lda $0f89	KB_TOG_NUMLOCK  LDA KEYBOARD_LOCKS
.3842a2	49 02		eor #$02	                EOR #KB_NUM_LOCK            ; toggle the Num Lock flag
.3842a4	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.3842a6	4c af 42	jmp $3842af	                JMP KB_CHECK_B_DONE
.3842a9	a5 89		lda $0f89	KB_TOG_CAPLOCK  LDA KEYBOARD_LOCKS
.3842ab	49 04		eor #$04	                EOR #KB_CAPS_LOCK           ; toggle the Caps Lock flag
.3842ad	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.3842af					KB_CHECK_B_DONE
.3842af	af 64 10 af	lda $af1064	                LDA STATUS_PORT
.3842b3	29 01		and #$01	                AND #OUT_BUF_FULL           ; Test bit $01 (if 1, Full)
.3842b5	c9 01		cmp #$01	                CMP #OUT_BUF_FULL           ; if Still Byte in the Buffer, fetch it out
.3842b7	d0 03		bne $3842bc	                BNE SET_LED
.3842b9	4c 84 41	jmp $384184	                JMP IRQ_HANDLER_FETCH
.3842bc					SET_LED
.3842bc					KB_DONE
.3842bc	c2 30		rep #$30	                REP #$30        ; set A&X long
.3842be	60		rts		                RTS
.3842bf					programmerKey
.3842bf	c2 30		rep #$30	                REP #$30        ; set A&X long
.3842c1	68		pla		                PLA                     ; Get and throw-away the return address to the interrupt handler
.3842c2	2b		pld		                PLD                     ; Restore the registers that were present when the handler was invoked
.3842c3	ab		plb		                PLB
.3842c4	7a		ply		                PLY
.3842c5	fa		plx		                PLX
.3842c6	68		pla		                PLA
.3842c7	5c 08 10 38	jmp $381008	                JML BREAK               ; And go to the BRK handler directly to open the monitor
.3842cb					SAVEKEY
.3842cb	e2 20		sep #$20	                SEP #$20        ; set A short
.3842cd	48		pha		                PHA                     ; Save the character
.3842ce	a5 89		lda $0f89	                LDA KEYBOARD_LOCKS      ; Check the keyboard lock flags
.3842d0	29 04		and #$04	                AND #KB_CAPS_LOCK       ; Is CAPS lock on?
.3842d2	f0 0d		beq $3842e1	                BEQ no_caps             ; No... just use the character as-is
.3842d4	68		pla		                PLA                     ; Get the character back
.3842d5	c9 61		cmp #$61	                CMP #'a'                ; Is it < 'a'
.3842d7	90 09		bcc $3842e2	                BLT check_break         ; Yes: just use as-is
.3842d9	c9 7b		cmp #$7b	                CMP #'z'+1              ; Is it > 'z'
.3842db	b0 05		bcs $3842e2	                BGE check_break         ; Yes: just us as-is
.3842dd	29 df		and #$df	                AND #%11011111          ; Conver to upper case
.3842df	80 01		bra $3842e2	                BRA check_break
.3842e1	68		pla		no_caps         PLA                     ; Restore the character
.3842e2	c9 00		cmp #$00	check_break     CMP #0
.3842e4	f0 18		beq $3842fe	                BEQ done
.3842e6	c9 03		cmp #$03	                CMP #CHAR_CTRL_C        ; Is it CTRL-C?
.3842e8	f0 15		beq $3842ff	                BEQ flag_break          ; Yes: flag a break
.3842ea	a6 8d		ldx $0f8d	no_break        LDX KEY_BUFFER_WPOS     ; So the Receive Character is saved in the Buffer
.3842ec	e0 80 00	cpx #$0080	                CPX #KEY_BUFFER_SIZE    ; Make sure we haven't been overboard.
.3842ef	b0 0d		bcs $3842fe	                BCS done                ; Stop storing - An error should ensue here...
.3842f1	9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER,X
.3842f5	e8		inx		                INX
.3842f6	86 8d		stx $0f8d	                STX KEY_BUFFER_WPOS
.3842f8	a9 00		lda #$00	                LDA #$00
.3842fa	9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER, X       ; Store a EOL in the following location for good measure
.3842fe	60		rts		done            RTS
.3842ff					flag_break
.3842ff	e2 20		sep #$20	                SEP #$20        ; set A short
.384301	a9 80		lda #$80	                LDA #KB_CTRL_C          ; Flag that an interrupt key has been pressed
.384303	85 8a		sta $0f8a	                STA KEYFLAG             ; The interpreter should see this soon and throw a BREAK
.384305	60		rts		                RTS
.384306					KBD_GETC
.384306	da		phx		                PHX
.384307	0b		phd		                PHD
.384308	08		php		                PHP
.384309	48		pha		                PHA             ; begin setdp macro
.38430a	08		php		                PHP
.38430b	c2 20		rep #$20	                REP #$20        ; set A long
.38430d	a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.384310	5b		tcd		                TCD
.384311	28		plp		                PLP
.384312	68		pla		                PLA             ; end setdp macro
.384313	e2 20		sep #$20	                SEP #$20        ; set A short
.384315	c2 10		rep #$10	                REP #$10        ; set X long
.384317	58		cli		                CLI                     ; Make sure interrupts can happen
.384318	af 8a 0f 00	lda $000f8a	get_wait        LDA @lKEYFLAG           ; Check the keyboard control flag
.38431c	29 60		and #$60	                AND #KB_CREDITS         ; Are the credits flagged?
.38431e	c9 60		cmp #$60	                CMP #KB_CREDITS
.384320	d0 0a		bne $38432c	                BNE check_buffer        ; No: check the key buffer
.384322	a9 00		lda #$00	                LDA #0                  ; Yes: clear the flags
.384324	8f 8a 0f 00	sta $000f8a	                STA @lKEYFLAG
.384328	22 2a 14 39	jsl $39142a	                JSL SHOW_CREDITS        ; Then show the credits screen and wait for a key press
.38432c	a6 8b		ldx $0f8b	check_buffer    LDX KEY_BUFFER_RPOS     ; Is KEY_BUFFER_RPOS < KEY_BUFFER_WPOS
.38432e	e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS
.384330	90 02		bcc $384334	                BCC read_buff           ; Yes: a key is present, read it
.384332	80 e4		bra $384318	                BRA get_wait            ; Otherwise, keep waiting
.384334	78		sei		read_buff       SEI                     ; Don't interrupt me!
.384335	b5 00		lda $0f00,x	                LDA KEY_BUFFER,X        ; Get the key
.384337	e8		inx		                INX                     ; And move to the next key
.384338	e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS     ; Did we just read the last key?
.38433a	f0 07		beq $384343	                BEQ reset_indexes       ; Yes: return to 0 position
.38433c	86 8b		stx $0f8b	                STX KEY_BUFFER_RPOS     ; Otherwise: Update the read index
.38433e	58		cli		                CLI
.38433f	28		plp		done            PLP                     ; Restore status and interrupts
.384340	2b		pld		                PLD
.384341	fa		plx		                PLX
.384342	6b		rtl		                RTL
.384343	64 8b		stz $0f8b	reset_indexes   STZ KEY_BUFFER_RPOS     ; Reset read index to the beginning
.384345	64 8d		stz $0f8d	                STZ KEY_BUFFER_WPOS     ; Reset the write index to the beginning
.384347	80 f6		bra $38433f	                BRA done

;******  Return to file: src\kernel.asm


;******  Processing file: src\uart.asm

=$af13f8				UART1_BASE = $AF13F8        ; Base address for UART 1 (COM1)
=$af12f8				UART2_BASE = $AF12F8        ; Base address for UART 2 (COM2)
=$00					UART_TRHB = $00             ; Transmit/Receive Hold Buffer
=$00					UART_DLL = UART_TRHB        ; Divisor Latch Low Byte
=$01					UART_DLH = $01              ; Divisor Latch High Byte
=$01					UART_IER = UART_DLH         ; Interupt Enable Register
=$02					UART_FCR = $02              ; FIFO Control Register
=$02					UART_IIR = UART_FCR         ; Interupt Indentification Register
=$03					UART_LCR = $03              ; Line Control Register
=$04					UART_MCR = $04              ; Modem Control REgister
=$05					UART_LSR = $05              ; Line Status Register
=$06					UART_MSR = $06              ; Modem Status Register
=$07					UART_SR = $07               ; Scratch Register
=$20					UINT_LOW_POWER = $20        ; Enable Low Power Mode (16750)
=$10					UINT_SLEEP_MODE = $10       ; Enable Sleep Mode (16750)
=$08					UINT_MODEM_STATUS = $08     ; Enable Modem Status Interrupt
=$04					UINT_LINE_STATUS = $04      ; Enable Receiver Line Status Interupt
=$02					UINT_THR_EMPTY = $02        ; Enable Transmit Holding Register Empty interrupt
=$01					UINT_DATA_AVAIL = $01       ; Enable Recieve Data Available interupt
=$80					IIR_FIFO_ENABLED = $80      ; FIFO is enabled
=$40					IIR_FIFO_NONFUNC = $40      ; FIFO is not functioning
=$20					IIR_FIFO_64BYTE = $20       ; 64 byte FIFO enabled (16750)
=$00					IIR_MODEM_STATUS = $00      ; Modem Status Interrupt
=$02					IIR_THR_EMPTY = $02         ; Transmit Holding Register Empty Interrupt
=$04					IIR_DATA_AVAIL = $04        ; Data Available Interrupt
=$06					IIR_LINE_STATUS = $06       ; Line Status Interrupt
=$0c					IIR_TIMEOUT = $0C           ; Time-out Interrupt (16550 and later)
=$01					IIR_INTERRUPT_PENDING = $01 ; Interrupt Pending Flag
=$80					LCR_DLB = $80               ; Divisor Latch Access Bit
=$60					LCR_SBE = $60               ; Set Break Enable
=$00					LCR_PARITY_NONE = $00       ; Parity: None
=$08					LCR_PARITY_ODD = $08        ; Parity: Odd
=$18					LCR_PARITY_EVEN = $18       ; Parity: Even
=$28					LCR_PARITY_MARK = $28       ; Parity: Mark
=$38					LCR_PARITY_SPACE = $38      ; Parity: Space
=$00					LCR_STOPBIT_1 = $00         ; One Stop Bit
=$04					LCR_STOPBIT_2 = $04         ; 1.5 or 2 Stop Bits
=$00					LCR_DATABITS_5 = $00        ; Data Bits: 5
=$01					LCR_DATABITS_6 = $01        ; Data Bits: 6
=$02					LCR_DATABITS_7 = $02        ; Data Bits: 7
=$03					LCR_DATABITS_8 = $03        ; Data Bits: 8
=$80					LSR_ERR_RECIEVE = $80       ; Error in Received FIFO
=$40					LSR_XMIT_DONE = $40         ; All data has been transmitted
=$20					LSR_XMIT_EMPTY = $20        ; Empty transmit holding register
=$10					LSR_BREAK_INT = $10         ; Break interrupt
=$08					LSR_ERR_FRAME = $08         ; Framing error
=$04					LSR_ERR_PARITY = $04        ; Parity error
=$02					LSR_ERR_OVERRUN = $02       ; Overrun error
=$01					LSR_DATA_AVAIL = $01        ; Data is ready in the receive buffer
=384					UART_300 = 384              ; Code for 300 bps
=96					UART_1200 = 96              ; Code for 1200 bps
=48					UART_2400 = 48              ; Code for 2400 bps
=24					UART_4800 = 24              ; Code for 4800 bps
=12					UART_9600 = 12              ; Code for 9600 bps
=6					UART_19200 = 6              ; Code for 19200 bps
=3					UART_38400 = 3              ; Code for 28400 bps
=2					UART_57600 = 2              ; Code for 57600 bps
=1					UART_115200 = 1             ; Code for 115200 bps
.384349					UART_SELECT
.384349	08		php		            PHP
.38434a	c2 20		rep #$20	                REP #$20        ; set A long
.38434c	c9 02 00	cmp #$0002	            CMP #2
.38434f	f0 07		beq $384358	            BEQ is_COM2
.384351	c2 20		rep #$20	                REP #$20        ; set A long
.384353	a9 f8 13	lda #$13f8	            LDA #<>UART1_BASE
.384356	80 05		bra $38435d	            BRA setaddr
.384358					is_COM2
.384358	c2 20		rep #$20	                REP #$20        ; set A long
.38435a	a9 f8 12	lda #$12f8	            LDA #<>UART2_BASE
.38435d	8f 00 07 00	sta $000700	setaddr     STA @lCURRUART
.384361	e2 20		sep #$20	                SEP #$20        ; set A short
.384363	a9 af		lda #$af	            LDA #`UART1_BASE
.384365	8f 02 07 00	sta $000702	            STA @lCURRUART+2
.384369	28		plp		            PLP
.38436a	6b		rtl		            RTL
.38436b					UART_SETBPS
.38436b	08		php		            PHP
.38436c	0b		phd		            PHD
.38436d	48		pha		                PHA             ; begin setdp macro
.38436e	08		php		                PHP
.38436f	c2 20		rep #$20	                REP #$20        ; set A long
.384371	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.384374	5b		tcd		                TCD
.384375	28		plp		                PLP
.384376	68		pla		                PLA             ; end setdp macro
.384377	c2 30		rep #$30	                REP #$30        ; set A&X long
.384379	48		pha		            PHA
.38437a	e2 20		sep #$20	                SEP #$20        ; set A short
.38437c	a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Enable divisor latch
.38437f	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.384381	09 80		ora #$80	            ORA #LCR_DLB
.384383	97 00		sta [$0700],y	            STA [CURRUART],Y
.384385	c2 20		rep #$20	                REP #$20        ; set A long
.384387	68		pla		            PLA
.384388	a0 00 00	ldy #$0000	            LDY #UART_DLL
.38438b	97 00		sta [$0700],y	            STA [CURRUART],Y    ; Save the divisor to the UART
.38438d	e2 20		sep #$20	                SEP #$20        ; set A short
.38438f	a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Disable divisor latch
.384392	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.384394	49 80		eor #$80	            EOR #LCR_DLB
.384396	97 00		sta [$0700],y	            STA [CURRUART],Y
.384398	2b		pld		            PLD
.384399	28		plp		            PLP
.38439a	6b		rtl		            RTL
.38439b					UART_SETLCR
.38439b	08		php		            PHP
.38439c	0b		phd		            PHD
.38439d	48		pha		                PHA             ; begin setdp macro
.38439e	08		php		                PHP
.38439f	c2 20		rep #$20	                REP #$20        ; set A long
.3843a1	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.3843a4	5b		tcd		                TCD
.3843a5	28		plp		                PLP
.3843a6	68		pla		                PLA             ; end setdp macro
.3843a7	e2 20		sep #$20	                SEP #$20        ; set A short
.3843a9	c2 10		rep #$10	                REP #$10        ; set X long
.3843ab	29 7f		and #$7f	            AND #$7F            ; We don't want to alter divisor latch
.3843ad	a0 03 00	ldy #$0003	            LDY #UART_LCR
.3843b0	97 00		sta [$0700],y	            STA [CURRUART],Y
.3843b2	2b		pld		            PLD
.3843b3	28		plp		            PLP
.3843b4	6b		rtl		            RTL
.3843b5					UART_INIT
.3843b5	08		php		            PHP
.3843b6	0b		phd		            PHD
.3843b7	c2 30		rep #$30	                REP #$30        ; set A&X long
.3843b9	48		pha		                PHA             ; begin setdp macro
.3843ba	08		php		                PHP
.3843bb	c2 20		rep #$20	                REP #$20        ; set A long
.3843bd	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.3843c0	5b		tcd		                TCD
.3843c1	28		plp		                PLP
.3843c2	68		pla		                PLA             ; end setdp macro
.3843c3	a9 01 00	lda #$0001	            LDA #UART_115200
.3843c6	22 6b 43 38	jsl $38436b	            JSL UART_SETBPS
.3843ca	e2 20		sep #$20	                SEP #$20        ; set A short
.3843cc	a9 03		lda #$03	            LDA #LCR_PARITY_NONE | LCR_STOPBIT_1 | LCR_DATABITS_8
.3843ce	22 9b 43 38	jsl $38439b	            JSL UART_SETLCR
.3843d2	a9 e1		lda #$e1	            LDA #%11100001
.3843d4	a0 02 00	ldy #$0002	            LDY #UART_FCR
.3843d7	97 00		sta [$0700],y	            STA [CURRUART],Y
.3843d9	2b		pld		            PLD
.3843da	28		plp		            PLP
.3843db	6b		rtl		            RTL
.3843dc					UART_HASBYT
.3843dc	08		php		            PHP
.3843dd	0b		phd		            PHD
.3843de	c2 30		rep #$30	                REP #$30        ; set A&X long
.3843e0	48		pha		                PHA             ; begin setdp macro
.3843e1	08		php		                PHP
.3843e2	c2 20		rep #$20	                REP #$20        ; set A long
.3843e4	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.3843e7	5b		tcd		                TCD
.3843e8	28		plp		                PLP
.3843e9	68		pla		                PLA             ; end setdp macro
.3843ea	e2 20		sep #$20	                SEP #$20        ; set A short
.3843ec	a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.3843ef	b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.3843f1	29 01		and #$01	            AND #LSR_DATA_AVAIL
.3843f3	d0 04		bne $3843f9	            BNE ret_true            ; If flag is set, return true
.3843f5	2b		pld		ret_false   PLD                     ; Return false
.3843f6	28		plp		            PLP
.3843f7	18		clc		            CLC
.3843f8	6b		rtl		            RTL
.3843f9	2b		pld		ret_true    PLD                     ; Return true
.3843fa	28		plp		            PLP
.3843fb	38		sec		            SEC
.3843fc	6b		rtl		            RTL
.3843fd					UART_GETC
.3843fd	08		php		            PHP
.3843fe	0b		phd		            PHD
.3843ff	c2 30		rep #$30	                REP #$30        ; set A&X long
.384401	48		pha		                PHA             ; begin setdp macro
.384402	08		php		                PHP
.384403	c2 20		rep #$20	                REP #$20        ; set A long
.384405	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.384408	5b		tcd		                TCD
.384409	28		plp		                PLP
.38440a	68		pla		                PLA             ; end setdp macro
.38440b	e2 20		sep #$20	                SEP #$20        ; set A short
.38440d	a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.384410	b7 00		lda [$0700],y	wait_getc   LDA [CURRUART],Y
.384412	29 01		and #$01	            AND #LSR_DATA_AVAIL
.384414	f0 fa		beq $384410	            BEQ wait_getc           ; If the flag is clear, wait
.384416	a0 00 00	ldy #$0000	            LDY #UART_TRHB          ; Get the byte from the receive FIFO
.384419	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.38441b	2b		pld		            PLD
.38441c	28		plp		            PLP
.38441d	6b		rtl		            RTL
.38441e					UART_PUTC
.38441e	08		php		            PHP
.38441f	0b		phd		            PHD
.384420	c2 30		rep #$30	                REP #$30        ; set A&X long
.384422	48		pha		                PHA             ; begin setdp macro
.384423	08		php		                PHP
.384424	c2 20		rep #$20	                REP #$20        ; set A long
.384426	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.384429	5b		tcd		                TCD
.38442a	28		plp		                PLP
.38442b	68		pla		                PLA             ; end setdp macro
.38442c	e2 20		sep #$20	                SEP #$20        ; set A short
.38442e	48		pha		            PHA                     ; Wait for the transmit FIFO to free up
.38442f	a0 05 00	ldy #$0005	            LDY #UART_LSR
.384432	b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.384434	29 20		and #$20	            AND #LSR_XMIT_EMPTY
.384436	f0 fa		beq $384432	            BEQ wait_putc
.384438	68		pla		            PLA
.384439	a0 00 00	ldy #$0000	            LDY #UART_TRHB
.38443c	97 00		sta [$0700],y	            STA [CURRUART],Y
.38443e	2b		pld		            PLD
.38443f	28		plp		            PLP
.384440	6b		rtl		            RTL
.384441					UART_PUTS
.384441	08		php		            PHP
.384442	e2 20		sep #$20	                SEP #$20        ; set A short
.384444	bd 00 00	lda $380000,x	put_loop    LDA #0,B,X
.384447	f0 07		beq $384450	            BEQ done
.384449	22 1e 44 38	jsl $38441e	            JSL UART_PUTC
.38444d	e8		inx		            INX
.38444e	80 f4		bra $384444	            BRA put_loop
.384450	28		plp		done        PLP
.384451	6b		rtl		            RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\joystick.asm

.384452					JOYSTICK_SET_NES_MODE
.384452	e2 20		sep #$20	                SEP #$20        ; set A short
.384454	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.384458	29 fb		and #$fb	          AND #~NES_SNES_JOY  ; 0 = NES (8 bit shift)
.38445a	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.38445e	6b		rtl		          RTL
.38445f					JOYSTICK_SET_SNES_MODE
.38445f	e2 20		sep #$20	                SEP #$20        ; set A short
.384461	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.384465	29 fb		and #$fb	          AND #~NES_SNES_JOY
.384467	09 04		ora #$04	          ORA #NES_SNES_JOY   ; 1 = SNES (12 Bit Shift)
.384469	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.38446d	6b		rtl		          RTL
.38446e					JOYSTICK_ENABLE_NES_SNES_PORT0
.38446e	e2 20		sep #$20	                SEP #$20        ; set A short
.384470	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.384474	29 fe		and #$fe	          AND #~NES_SNES_EN0
.384476	09 01		ora #$01	          ORA #NES_SNES_EN0
.384478	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.38447c	6b		rtl		          RTL
.38447d					JOYSTICK_ENABLE_NES_SNES_PORT1
.38447d	e2 20		sep #$20	                SEP #$20        ; set A short
.38447f	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.384483	29 fd		and #$fd	          AND #~NES_SNES_EN1
.384485	09 02		ora #$02	          ORA #NES_SNES_EN1
.384487	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.38448b	6b		rtl		          RTL
.38448c					JOYSTICK_DISABLE_NES_SNES_PORT0
.38448c	e2 20		sep #$20	                SEP #$20        ; set A short
.38448e	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.384492	29 fe		and #$fe	          AND #~NES_SNES_EN0
.384494	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.384498	6b		rtl		          RTL
.384499					JOYSTICK_DISABLE_NES_SNES_PORT1
.384499	e2 20		sep #$20	                SEP #$20        ; set A short
.38449b	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.38449f	29 fd		and #$fd	          AND #~NES_SNES_EN1
.3844a1	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.3844a5	6b		rtl		          RTL
.3844a6					JOYSTICK_NES_SNES_TRIG_WITH_POLL
.3844a6	e2 20		sep #$20	                SEP #$20        ; set A short
.3844a8	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.3844ac	29 03		and #$03	          AND #(NES_SNES_EN0 | NES_SNES_EN1)
.3844ae	c9 00		cmp #$00	          CMP #$00
.3844b0	f0 14		beq $3844c6	          BEQ END_OF_JOYSTICK_POLL
.3844b2	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.3844b6	09 80		ora #$80	          ORA #NES_SNES_TRIG   ; Set to 1 (Will auto Clear)
.3844b8	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.3844bc					JOYSTICK_POLLING_ISNOTOVER
.3844bc	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE ;
.3844c0	29 40		and #$40	          AND #NES_SNES_DONE
.3844c2	c9 40		cmp #$40	          CMP #NES_SNES_DONE
.3844c4	d0 f6		bne $3844bc	          BNE JOYSTICK_POLLING_ISNOTOVER
.3844c6					END_OF_JOYSTICK_POLL
.3844c6	6b		rtl		          RTL

;******  Return to file: src\kernel.asm

.390400					IBOOT
.390400	18		clc		                CLC           ; clear the carry flag
.390401	fb		xce		                XCE           ; move carry to emulation flag.
.390402	78		sei		                SEI
.390403	c2 30		rep #$30	                REP #$30        ; set A&X long
.390405	a9 ff fe	lda #$feff	                LDA #STACK_END   ; initialize stack pointer
.390408	1b		tcs		                TAS
.390409	48		pha		                PHA             ; begin setdp macro
.39040a	08		php		                PHP
.39040b	c2 20		rep #$20	                REP #$20        ; set A long
.39040d	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390410	5b		tcd		                TCD
.390411	28		plp		                PLP
.390412	68		pla		                PLA             ; end setdp macro
.390413	e2 20		sep #$20	                SEP #$20        ; set A short
.390415	a2 00 00	ldx #$0000	                LDX #$0000
.390418	a9 00		lda #$00	                LDA #$00
.39041a					CLEAR_MEM_LOOP
.39041a	95 00		sta $00,x	                STA $0000, X
.39041c	e8		inx		                INX
.39041d	e0 00 01	cpx #$0100	                CPX #$0100
.390420	d0 f8		bne $39041a	                BNE CLEAR_MEM_LOOP
.390422	ea		nop		                NOP
.390423	a9 ff		lda #$ff	                LDA #$FF
.390425	8f 48 01 00	sta $000148	                STA @lINT_EDGE_REG0
.390429	8f 49 01 00	sta $000149	                STA @lINT_EDGE_REG1
.39042d	8f 4a 01 00	sta $00014a	                STA @lINT_EDGE_REG2
.390431	8f 4b 01 00	sta $00014b	                STA @lINT_EDGE_REG3
.390435	8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.390439	8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.39043d	8f 4e 01 00	sta $00014e	                STA @lINT_MASK_REG2
.390441	8f 4f 01 00	sta $00014f	                STA @lINT_MASK_REG3
.390445	c2 30		rep #$30	                REP #$30        ; set A&X long
.390447	a9 00 a0	lda #$a000	                LDA #<>SCREEN_PAGE0      ; store the initial screen buffer location
.39044a	85 0c		sta $0c		                STA SCREENBEGIN
.39044c	85 17		sta $17		                STA CURSORPOS
.39044e	a9 00 c0	lda #$c000	                LDA #<>CS_COLOR_MEM_PTR   ; Set the initial COLOR cursor position
.390451	85 1f		sta $1f		                STA COLORPOS
.390453	e2 20		sep #$20	                SEP #$20        ; set A short
.390455	a9 af		lda #$af	                LDA #`SCREEN_PAGE0
.390457	85 0e		sta $0e		                STA SCREENBEGIN+2
.390459	85 19		sta $19		                STA CURSORPOS+2
.39045b	a9 af		lda #$af	                LDA #`CS_COLOR_MEM_PTR    ; Set the initial COLOR cursor position
.39045d	85 21		sta $21		                STA COLORPOS+2
.39045f	e2 20		sep #$20	                SEP #$20        ; set A short
.390461	a9 00		lda #$00	                LDA #$00
.390463	8f 87 0f 00	sta $000f87	                STA KEYBOARD_SC_FLG     ; Clear the Keyboard Flag
.390467	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.390469	8f 00 f1 af	sta $aff100	                STA $AFF100
.39046d	a9 bf		lda #$bf	                LDA #$BF ; Channel Two - No Atteniation
.39046f	8f 00 f1 af	sta $aff100	                STA $AFF100
.390473	a9 df		lda #$df	                LDA #$DF ; Channel Two - No Atteniation
.390475	8f 00 f1 af	sta $aff100	                STA $AFF100
.390479	a9 ff		lda #$ff	                LDA #$FF ; Channel Two - No Atteniation
.39047b	8f 00 f1 af	sta $aff100	                STA $AFF100
.39047f	c2 30		rep #$30	                REP #$30        ; set A&X long
.390481	a2 48 00	ldx #$0048	                LDX #72
.390484	86 0f		stx $0f		                STX COLS_VISIBLE
.390486	a0 34 00	ldy #$0034	                LDY #52
.390489	84 13		sty $13		                STY LINES_VISIBLE
.39048b	a2 80 00	ldx #$0080	                LDX #128
.39048e	86 11		stx $11		                STX COLS_PER_LINE
.390490	a0 40 00	ldy #$0040	                LDY #64
.390493	84 15		sty $15		                STY LINES_MAX
.390495	a9 ed 00	lda #$00ed	                LDA #$ED                  ; Set the default text color to light gray on dark gray
.390498	85 1e		sta $1e		                STA CURCOLOR
.39049a	22 dc 10 38	jsl $3810dc	                JSL INITCODEC
.39049e	22 b0 10 38	jsl $3810b0	                JSL INITSUPERIO
.3904a2	22 c4 10 38	jsl $3810c4	                JSL INITGAMMATABLE
.3904a6	22 c8 10 38	jsl $3810c8	                JSL INITALLLUT
.3904aa	22 ac 10 38	jsl $3810ac	                JSL INITCHLUT
.3904ae	22 ab 0d 39	jsl $390dab	                JSL INITMOUSEPOINTER
.3904b2	22 bc 10 38	jsl $3810bc	                JSL INITCURSOR
.3904b6	22 cc 10 38	jsl $3810cc	                JSL INITVKYTXTMODE
.3904ba	22 80 0d 39	jsl $390d80	                JSL IINITFONTSET
.3904be	22 5f 09 39	jsl $39095f	                JSL ICLRSCREEN  ; Clear Screen and Set a standard color in Color Memory
.3904c2	a9 01 00	lda #$0001	                LDA #CHAN_COM1    ; Initialize COM1
.3904c5	22 49 43 38	jsl $384349	                JSL UART_SELECT
.3904c9	22 b5 43 38	jsl $3843b5	                JSL UART_INIT
.3904cd	a9 02 00	lda #$0002	                LDA #CHAN_COM2    ; Initialize COM2
.3904d0	22 49 43 38	jsl $384349	                JSL UART_SELECT
.3904d4	22 b5 43 38	jsl $3843b5	                JSL UART_INIT
.3904d8	a9 00 00	lda #$0000	                LDA #0
.3904db	22 38 10 38	jsl $381038	                JSL SETIN
.3904df	22 3c 10 38	jsl $38103c	                JSL SETOUT
.3904e3	c2 20		rep #$20	                REP #$20        ; set A long
.3904e5	a2 00 00	ldx #$0000	                LDX #0
.3904e8	a0 00 00	ldy #$0000	                LDY #0
.3904eb	22 5f 08 39	jsl $39085f	                JSL ILOCATE
.3904ef	c2 30		rep #$30	                REP #$30        ; set A&X long
.3904f1					greet
.3904f1	48		pha		                PHA             ; begin setdbr macro
.3904f2	08		php		                PHP
.3904f3	e2 20		sep #$20	                SEP #$20        ; set A short
.3904f5	a9 39		lda #$39	                LDA #`greet_msg
.3904f7	48		pha		                PHA
.3904f8	ab		plb		                PLB
.3904f9	28		plp		                PLP
.3904fa	68		pla		                PLA             ; end setdbr macro
.3904fb	a2 88 14	ldx #$1488	                LDX #<>greet_msg
.3904fe	22 2f 06 39	jsl $39062f	                JSL IPRINT       ; print the first line
.390502	22 aa 09 39	jsl $3909aa	                JSL ICOLORFLAG  ; This is to set the Color Memory for the Logo
.390506	48		pha		                PHA             ; begin setdp macro
.390507	08		php		                PHP
.390508	c2 20		rep #$20	                REP #$20        ; set A long
.39050a	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39050d	5b		tcd		                TCD
.39050e	28		plp		                PLP
.39050f	68		pla		                PLA             ; end setdp macro
.390510	22 b4 10 38	jsl $3810b4	                JSL INITKEYBOARD ;
.390514	e2 20		sep #$20	                SEP #$20        ; set A short
.390516	c2 10		rep #$10	                REP #$10        ; set X long
.390518	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.39051a	8f 00 f1 af	sta $aff100	                STA $AFF100
.39051e	a9 bf		lda #$bf	                LDA #$BF ; Channel Two - No Atteniation
.390520	8f 00 f1 af	sta $aff100	                STA $AFF100
.390524	a9 df		lda #$df	                LDA #$DF ; Channel Two - No Atteniation
.390526	8f 00 f1 af	sta $aff100	                STA $AFF100
.39052a	a9 ff		lda #$ff	                LDA #$FF ; Channel Two - No Atteniation
.39052c	8f 00 f1 af	sta $aff100	                STA $AFF100
.390530	a9 83		lda #$83	                LDA #$83 ; Channel Zero - No Atteniation
.390532	8f 00 f1 af	sta $aff100	                STA $AFF100
.390536	a9 12		lda #$12	                LDA #$12 ; Channel Zero - No Atteniation
.390538	8f 00 f1 af	sta $aff100	                STA $AFF100
.39053c	a9 90		lda #$90	                LDA #$90 ; Channel One - No Atteniation
.39053e	8f 00 f1 af	sta $aff100	                STA $AFF100
.390542	a2 00 40	ldx #$4000	                LDX #16384      ; 400ms
.390545	22 1d 14 39	jsl $39141d	          		 	JSL ILOOP_MS
.390549	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.39054b	8f 00 f1 af	sta $aff100	                STA $AFF100
.39054f	58		cli		                CLI                   ; Make sure no Interrupt will come and fuck up Init before this point.
.390550	e2 20		sep #$20	                SEP #$20        ; set A short
.390552	c2 10		rep #$10	                REP #$10        ; set X long
.390554	48		pha		                PHA             ; begin setdbr macro
.390555	08		php		                PHP
.390556	e2 20		sep #$20	                SEP #$20        ; set A short
.390558	a9 39		lda #$39	                LDA #`greet_msg
.39055a	48		pha		                PHA
.39055b	ab		plb		                PLB
.39055c	28		plp		                PLP
.39055d	68		pla		                PLA             ; end setdbr macro
.39055e	af 0e e8 af	lda $afe80e	                LDA @lDIP_BOOTMODE    ; {HD_INSTALLED, 5'b0_0000, BOOT_MODE[1], BOOT_MODE[0]}
.390562	29 03		and #$03	                AND #%00000011        ; Look at the mode bits
.390564	c9 00		cmp #$00	                CMP #DIP_BOOT_IDE     ; DIP set for IDE?
.390566	f0 14		beq $39057c	                BEQ BOOTIDE           ; Yes: Boot from the IDE
.390568	c9 01		cmp #$01	                CMP #DIP_BOOT_SDCARD  ; DIP set for SD card?
.39056a	f0 0b		beq $390577	                BEQ BOOTSDC           ; Yes: try to boot from the SD card
.39056c	c9 02		cmp #$02	                CMP #DIP_BOOT_FLOPPY  ; DIP set for floppy?
.39056e	f0 11		beq $390581	                BEQ BOOTFLOPPY        ; Yes: try to boot from the floppy
.390570	5c 00 00 3a	jmp $3a0000	BOOTBASIC       JML BASIC             ; Cold start of the BASIC interpreter (or its replacement)
.390574	ea		nop		CREDIT_LOCK     NOP
.390575	80 fd		bra $390574	                BRA CREDIT_LOCK
.390577					BOOTSDC
.390577	a2 30 18	ldx #$1830	                LDX #<>sdcard_notimpl ; Print a message saying SD card booting is not implemented
.39057a	80 08		bra $390584	                BRA PR_BOOT_ERROR
.39057c					BOOTIDE
.39057c	a2 5d 18	ldx #$185d	                LDX #<>ide_notimpl    ; Print a message saying SD card booting is not implemented
.39057f	80 03		bra $390584	                BRA PR_BOOT_ERROR
.390581					BOOTFLOPPY
.390581	a2 8c 18	ldx #$188c	                LDX #<>floppy_notimpl ; Print a message saying SD card booting is not implemented
.390584	22 2f 06 39	jsl $39062f	PR_BOOT_ERROR   JSL IPRINT
.390588	ea		nop		LOOP_FOREVER    NOP
.390589	80 fd		bra $390588	                BRA LOOP_FOREVER
.39058b					IBREAK
.39058b	48		pha		                PHA             ; begin setdp macro
.39058c	08		php		                PHP
.39058d	c2 20		rep #$20	                REP #$20        ; set A long
.39058f	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390592	5b		tcd		                TCD
.390593	28		plp		                PLP
.390594	68		pla		                PLA             ; end setdp macro
.390595	68		pla		                PLA             ; Pull .Y and stuff it in the CPUY variable
.390596	8f 48 02 00	sta $000248	                STA CPUY
.39059a	68		pla		                PLA             ; Pull .X and stuff it in the CPUY variable
.39059b	8f 46 02 00	sta $000246	                STA CPUX
.39059f	68		pla		                PLA             ; Pull .A and stuff it in the CPUY variable
.3905a0	8f 44 02 00	sta $000244	                STA CPUA
.3905a4	68		pla		                PLA
.3905a5	8f 4c 02 00	sta $00024c	                STA CPUDP       ; Pull Direct page
.3905a9	e2 20		sep #$20	                SEP #$20        ; set A short
.3905ab	68		pla		                PLA             ; Pull Data Bank (8 bits)
.3905ac	8f 4e 02 00	sta $00024e	                STA CPUDBR
.3905b0	68		pla		                PLA             ; Pull Flags (8 bits)
.3905b1	8f 4f 02 00	sta $00024f	                STA CPUFLAGS
.3905b5	c2 20		rep #$20	                REP #$20        ; set A long
.3905b7	68		pla		                PLA             ; Pull Program Counter (16 bits)
.3905b8	8f 40 02 00	sta $000240	                STA CPUPC
.3905bc	e2 20		sep #$20	                SEP #$20        ; set A short
.3905be	68		pla		                PLA             ; Pull Program Bank (8 bits)
.3905bf	8f 42 02 00	sta $000242	                STA CPUPBR
.3905c3	c2 20		rep #$20	                REP #$20        ; set A long
.3905c5	3b		tsc		                TSA             ; Get the stack
.3905c6	8f 4a 02 00	sta $00024a	                STA CPUSTACK    ; Store the stack at immediately before the interrupt was asserted
.3905ca	a9 ff fe	lda #$feff	                LDA #<>STACK_END   ; initialize stack pointer back to the bootup value
.3905cd	1b		tcs		                TAS
.3905ce	5c 04 00 3a	jmp $3a0004	                JML MONITOR
.3905d2					IREADY
.3905d2	48		pha		                PHA             ; begin setdbr macro
.3905d3	08		php		                PHP
.3905d4	e2 20		sep #$20	                SEP #$20        ; set A short
.3905d6	a9 39		lda #$39	                LDA #`ready_msg
.3905d8	48		pha		                PHA
.3905d9	ab		plb		                PLB
.3905da	28		plp		                PLP
.3905db	68		pla		                PLA             ; end setdbr macro
.3905dc	e2 20		sep #$20	                SEP #$20        ; set A short
.3905de	a2 be 18	ldx #$18be	                LDX #<>ready_msg
.3905e1	22 2f 06 39	jsl $39062f	                JSL IPRINT
.3905e5					IREADYWAIT
.3905e5	22 ff 05 39	jsl $3905ff	                JSL IGETCHE
.3905e9	80 fa		bra $3905e5	                BRA IREADYWAIT
.3905eb	db		stp		IKEYDOWN        STP             ; Keyboard key pressed
.3905ec	db		stp		IRETURN         STP
.3905ed	08		php		ISETIN          PHP
.3905ee	e2 20		sep #$20	                SEP #$20        ; set A short
.3905f0	8f 04 07 00	sta $000704	                STA @lCHAN_IN   ; Save the channel number
.3905f4	28		plp		                PLP
.3905f5	6b		rtl		                RTL
.3905f6	08		php		ISETOUT         PHP
.3905f7	e2 20		sep #$20	                SEP #$20        ; set A short
.3905f9	8f 03 07 00	sta $000703	                STA @lCHAN_OUT  ; Save the channel number
.3905fd	28		plp		                PLP
.3905fe	6b		rtl		                RTL
.3905ff	22 08 06 39	jsl $390608	IGETCHE         JSL IGETCHW
.390603	22 4f 06 39	jsl $39064f	                JSL IPUTC
.390607	6b		rtl		                RTL
.390608					IGETCHW
.390608	08		php		                PHP
.390609	e2 20		sep #$20	                SEP #$20        ; set A short
.39060b	af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.39060f	f0 17		beq $390628	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.390611	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.390613	f0 09		beq $39061e	                BEQ getc_uart       ; Yes: handle reading from the UART
.390615	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.390617	f0 05		beq $39061e	                BEQ getc_uart       ; Yes: handle reading from the UART
.390619	a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.39061b	28		plp		                PLP
.39061c	38		sec		                SEC                 ; And return carry set
.39061d	6b		rtl		                RTL
.39061e	22 49 43 38	jsl $384349	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.390622	22 fd 43 38	jsl $3843fd	                JSL UART_GETC       ; Get the charater from the COM port
.390626	80 04		bra $39062c	                BRA done
.390628	22 06 43 38	jsl $384306	getc_keyboard   JSL KBD_GETC        ; Get the character from the keyboard
.39062c	28		plp		done            PLP
.39062d	18		clc		                CLC                 ; Return carry clear for valid data
.39062e	6b		rtl		                RTL
.39062f	22 38 06 39	jsl $390638	IPRINT          JSL IPUTS
.390633	22 75 07 39	jsl $390775	                JSL IPRINTCR
.390637	6b		rtl		                RTL
.390638	48		pha		IPUTS           PHA
.390639	08		php		                PHP
.39063a	e2 20		sep #$20	                SEP #$20        ; set A short
.39063c	c2 10		rep #$10	                REP #$10        ; set X long
.39063e	bd 00 00	lda $390000,x	iputs1          LDA $0,b,x      ; read from the string
.390641	f0 08		beq $39064b	                BEQ iputs_done
.390643	22 4f 06 39	jsl $39064f	iputs2          JSL IPUTC
.390647	e8		inx		iputs3          INX
.390648	4c 3e 06	jmp $39063e	                JMP iputs1
.39064b	e8		inx		iputs_done      INX
.39064c	28		plp		                PLP
.39064d	68		pla		                PLA
.39064e	6b		rtl		                RTL
.39064f					IPUTC
.39064f	da		phx		                PHX
.390650	5a		phy		                PHY
.390651	0b		phd		                PHD
.390652	8b		phb		                PHB
.390653	08		php		                PHP                 ; stash the flags (we'll be changing M)
.390654	48		pha		                PHA             ; begin setdp macro
.390655	08		php		                PHP
.390656	c2 20		rep #$20	                REP #$20        ; set A long
.390658	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39065b	5b		tcd		                TCD
.39065c	28		plp		                PLP
.39065d	68		pla		                PLA             ; end setdp macro
.39065e	48		pha		                PHA             ; begin setdbr macro
.39065f	08		php		                PHP
.390660	e2 20		sep #$20	                SEP #$20        ; set A short
.390662	a9 00		lda #$00	                LDA #0
.390664	48		pha		                PHA
.390665	ab		plb		                PLB
.390666	28		plp		                PLP
.390667	68		pla		                PLA             ; end setdbr macro
.390668	e2 20		sep #$20	                SEP #$20        ; set A short
.39066a	c2 10		rep #$10	                REP #$10        ; set X long
.39066c	48		pha		                PHA                 ; Save the character to print
.39066d	af 03 07 00	lda $000703	                LDA @lCHAN_OUT      ; Check the output channel #
.390671	f0 16		beq $390689	                BEQ putc_screen     ; If it's 0: print to the screen
.390673	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.390675	f0 07		beq $39067e	                BEQ putc_uart       ; Yes: handle printing to the UART
.390677	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.390679	f0 03		beq $39067e	                BEQ putc_uart       ; Yes: handle printing to the UART
.39067b	68		pla		                PLA                 ; Otherwise, just exit
.39067c	80 4f		bra $3906cd	                BRA done
.39067e	22 49 43 38	jsl $384349	putc_uart       JSL UART_SELECT     ; Point to the correct UART
.390682	68		pla		                PLA                 ; Recover the character to send
.390683	22 1e 44 38	jsl $38441e	                JSL UART_PUTC       ; Send the character
.390687	80 44		bra $3906cd	                BRA done
.390689	68		pla		putc_screen     PLA                 ; Get the character to print
.39068a	c9 0a		cmp #$0a	                CMP #CHAR_LF        ; Linefeed moves cursor down one line
.39068c	f0 61		beq $3906ef	                BEQ go_down
.39068e	c9 20		cmp #$20	                CMP #$20
.390690	90 19		bcc $3906ab	                BCC check_ctrl0     ; [$00..$1F]: check for arrows
.390692	c9 7f		cmp #$7f	                CMP #$7F
.390694	f0 3d		beq $3906d3	                BEQ do_del
.390696	b0 02		bcs $39069a	                BCS check_A0        ; [$20..$7E]: print it
.390698	80 29		bra $3906c3	                BRA printc
.39069a	c9 a0		cmp #$a0	check_A0        CMP #$A0
.39069c	90 02		bcc $3906a0	                BCC check_ctrl1
.39069e	80 23		bra $3906c3	                BRA printc          ; [$A0..$FF]: print it
.3906a0	c9 91		cmp #$91	check_ctrl1     CMP #CHAR_DOWN      ; If the down arrow key was pressed
.3906a2	f0 4b		beq $3906ef	                BEQ go_down         ; ... move the cursor down one row
.3906a4	c9 9d		cmp #$9d	                CMP #CHAR_LEFT      ; If the left arrow key was pressed
.3906a6	f0 59		beq $390701	                BEQ go_left         ; ... move the cursor left one column
.3906a8	4c cd 06	jmp $3906cd	                JMP done
.3906ab	c9 09		cmp #$09	check_ctrl0     CMP #CHAR_TAB       ; If it's a TAB...
.3906ad	f0 58		beq $390707	                BEQ do_TAB          ; ... move to the next TAB stop
.3906af	c9 08		cmp #$08	                CMP #CHAR_BS        ; If it's a backspace...
.3906b1	f0 2c		beq $3906df	                BEQ backspace       ; ... move the cursor back and replace with a space
.3906b3	c9 0d		cmp #$0d	                CMP #CHAR_CR        ; If the carriage return was pressed
.3906b5	f0 32		beq $3906e9	                BEQ do_cr           ; ... move cursor down and to the first column
.3906b7	c9 11		cmp #$11	                CMP #CHAR_UP        ; If the up arrow key was pressed
.3906b9	f0 3a		beq $3906f5	                BEQ go_up           ; ... move the cursor up one row
.3906bb	c9 1d		cmp #$1d	                CMP #CHAR_RIGHT     ; If the right arrow key was pressed
.3906bd	f0 3c		beq $3906fb	                BEQ go_right        ; ... move the cursor right one column
.3906bf	c9 0f		cmp #$0f	                CMP #CHAR_INS       ; If the insert key was pressed
.3906c1	f0 16		beq $3906d9	                BEQ do_ins          ; ... insert a space
.3906c3	87 17		sta [$17]	printc          STA [CURSORPOS]     ; Save the character on the screen
.3906c5	a5 1e		lda $1e		                LDA CURCOLOR        ; Set the color based on CURCOLOR
.3906c7	87 1f		sta [$1f]	                STA [COLORPOS]
.3906c9	22 bb 07 39	jsl $3907bb	                JSL ICSRRIGHT       ; And advance the cursor
.3906cd	28		plp		done            PLP
.3906ce	ab		plb		                PLB
.3906cf	2b		pld		                PLD
.3906d0	7a		ply		                PLY
.3906d1	fa		plx		                PLX
.3906d2	6b		rtl		                RTL
.3906d3	22 2e 07 39	jsl $39072e	do_del          JSL SCRSHIFTLL      ; Shift the current line left one space into the cursor
.3906d7	80 f4		bra $3906cd	                BRA done
.3906d9	22 51 07 39	jsl $390751	do_ins          JSL SCRSHIFTLR      ; Shift the current line right one space from the cursor
.3906dd	80 ee		bra $3906cd	                BRA done
.3906df	22 ee 07 39	jsl $3907ee	backspace       JSL ICSRLEFT
.3906e3	22 2e 07 39	jsl $39072e	                JSL SCRSHIFTLL      ; Shift the current line left one space into the cursor
.3906e7	80 e4		bra $3906cd	                BRA done
.3906e9	22 75 07 39	jsl $390775	do_cr           JSL IPRINTCR        ; Move the cursor to the beginning of the next line
.3906ed	80 de		bra $3906cd	                BRA done
.3906ef	22 3a 08 39	jsl $39083a	go_down         JSL ICSRDOWN        ; Move the cursor down one row (might force a scroll)
.3906f3	80 d8		bra $3906cd	                BRA done
.3906f5	22 14 08 39	jsl $390814	go_up           JSL ICSRUP          ; Move the cursor up one line
.3906f9	80 d2		bra $3906cd	                BRA done
.3906fb	22 bb 07 39	jsl $3907bb	go_right        JSL ICSRRIGHT       ; Move the cursor right one column
.3906ff	80 cc		bra $3906cd	                BRA done
.390701	22 ee 07 39	jsl $3907ee	go_left         JSL ICSRLEFT        ; Move the cursor left one column
.390705	80 c6		bra $3906cd	                BRA done
.390707					do_TAB
.390707	c2 20		rep #$20	                REP #$20        ; set A long
.390709	a5 1a		lda $1a		                LDA CURSORX         ; Get the current column
.39070b	29 f8 ff	and #$fff8	                AND #$FFF8          ; See which group of 8 it's in
.39070e	18		clc		                CLC
.39070f	69 08 00	adc #$0008	                ADC #$0008          ; And move it to the next one
.390712	aa		tax		                TAX
.390713	a4 1c		ldy $1c		                LDY CURSORY
.390715	e2 20		sep #$20	                SEP #$20        ; set A short
.390717	e4 0f		cpx $0f		set_xy          CPX COLS_VISIBLE    ; Check if we're still on screen horizontally
.390719	90 04		bcc $39071f	                BCC check_row       ; Yes: check the row
.39071b	a2 00 00	ldx #$0000	                LDX #0              ; No: move to the first column...
.39071e	c8		iny		                INY                 ; ... and the next row
.39071f	c4 13		cpy $13		check_row       CPY LINES_VISIBLE   ; Check if we're still on the screen vertically
.390721	90 05		bcc $390728	                BCC do_locate       ; Yes: reposition the cursor
.390723	22 ab 08 39	jsl $3908ab	                JSL ISCROLLUP       ; No: scroll the screen
.390727	88		dey		                DEY                 ; And set the row to the last one
.390728	22 5f 08 39	jsl $39085f	do_locate       JSL ILOCATE         ; Set the cursor position
.39072c	80 9f		bra $3906cd	                BRA done
.39072e	da		phx		SCRSHIFTLL      PHX
.39072f	5a		phy		                PHY
.390730	48		pha		                PHA
.390731	08		php		                PHP
.390732	48		pha		                PHA             ; begin setdp macro
.390733	08		php		                PHP
.390734	c2 20		rep #$20	                REP #$20        ; set A long
.390736	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390739	5b		tcd		                TCD
.39073a	28		plp		                PLP
.39073b	68		pla		                PLA             ; end setdp macro
.39073c	c2 30		rep #$30	                REP #$30        ; set A&X long
.39073e	a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.390740	a8		tay		                TAY                 ; Set it as the destination
.390741	aa		tax		                TAX
.390742	e8		inx		                INX                 ; And set the next cell as the source
.390743	38		sec		                SEC                 ; Calculate the length of the block to move
.390744	a9 7f 00	lda #$007f	                LDA #127            ; as 127 - X
.390747	e5 1a		sbc $1a		                SBC CURSORX
.390749	54 af af	mvn $af,$af	                MVN $AF, $AF        ; And move the block
.39074c	28		plp		                PLP
.39074d	68		pla		                PLA
.39074e	7a		ply		                PLY
.39074f	fa		plx		                PLX
.390750	6b		rtl		                RTL
.390751	da		phx		SCRSHIFTLR      PHX
.390752	48		pha		                PHA
.390753	08		php		                PHP
.390754	c2 30		rep #$30	                REP #$30        ; set A&X long
.390756	a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.390758	29 80 ff	and #$ff80	                AND #$FF80          ; Mask off the column bits
.39075b	09 7f 00	ora #$007f	                ORA #$007F          ; And compute the address of the last cell
.39075e	a8		tay		                TAY                 ; And set that as the destination address
.39075f	3a		dec a		                DEC A               ; Compute the address of the character to the left
.390760	aa		tax		                TAX                 ; And make it the source
.390761	38		sec		                SEC                 ; Calculate the length of the block to move
.390762	a9 7f 00	lda #$007f	                LDA #127            ; as 127 - X
.390765	e5 1a		sbc $1a		                SBC CURSORX
.390767	44 af af	mvp $af,$af	                MVP $AF, $AF        ; And move the block
.39076a	e2 20		sep #$20	                SEP #$20        ; set A short
.39076c	a9 20		lda #$20	                LDA #CHAR_SP        ; Put a blank space at the cursor position
.39076e	87 17		sta [$17]	                STA [CURSORPOS]
.390770	28		plp		                PLP
.390771	68		pla		                PLA
.390772	fa		plx		                PLX
.390773	6b		rtl		                RTL
.390774					IPUTB
.390774	6b		rtl		                RTL
.390775					IPRINTCR
.390775	da		phx		                PHX
.390776	5a		phy		                PHY
.390777	08		php		                PHP
.390778	e2 20		sep #$20	                SEP #$20        ; set A short
.39077a	af 03 07 00	lda $000703	                LDA @lCHAN_OUT
.39077e	f0 1c		beq $39079c	                BEQ scr_printcr
.390780	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.390782	f0 06		beq $39078a	                BEQ uart_printcr    ; Yes: handle printing to the UART
.390784	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.390786	f0 02		beq $39078a	                BEQ uart_printcr    ; Yes: handle printing to the UART
.390788	80 1c		bra $3907a6	                BRA done
.39078a	22 49 43 38	jsl $384349	uart_printcr    JSL UART_SELECT
.39078e	a9 0d		lda #$0d	                LDA #CHAR_CR
.390790	22 4f 06 39	jsl $39064f	                JSL IPUTC
.390794	a9 0a		lda #$0a	                LDA #CHAR_LF
.390796	22 4f 06 39	jsl $39064f	                JSL IPUTC
.39079a	80 0a		bra $3907a6	                BRA done
.39079c	a2 00 00	ldx #$0000	scr_printcr     LDX #0
.39079f	a4 1c		ldy $1c		                LDY CURSORY
.3907a1	c8		iny		                INY
.3907a2	22 5f 08 39	jsl $39085f	                JSL ILOCATE
.3907a6	28		plp		done            PLP
.3907a7	7a		ply		                PLY
.3907a8	fa		plx		                PLX
.3907a9	6b		rtl		                RTL
.3907aa	da		phx		ICSRHOME        PHX
.3907ab	5a		phy		                PHY
.3907ac	08		php		                PHP
.3907ad	a2 00 00	ldx #$0000	                LDX #0
.3907b0	a0 00 00	ldy #$0000	                LDY #0
.3907b3	22 5f 08 39	jsl $39085f	                JSL ILOCATE
.3907b7	28		plp		                PLP
.3907b8	7a		ply		                PLY
.3907b9	fa		plx		                PLX
.3907ba	6b		rtl		                RTL
.3907bb	da		phx		ICSRRIGHT       PHX
.3907bc	5a		phy		                PHY
.3907bd	48		pha		                PHA
.3907be	0b		phd		                PHD
.3907bf	08		php		                PHP
.3907c0	c2 20		rep #$20	                REP #$20        ; set A long
.3907c2	c2 10		rep #$10	                REP #$10        ; set X long
.3907c4	48		pha		                PHA             ; begin setdp macro
.3907c5	08		php		                PHP
.3907c6	c2 20		rep #$20	                REP #$20        ; set A long
.3907c8	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.3907cb	5b		tcd		                TCD
.3907cc	28		plp		                PLP
.3907cd	68		pla		                PLA             ; end setdp macro
.3907ce	a6 1a		ldx $1a		                LDX CURSORX           ; Get the new column
.3907d0	e8		inx		                INX
.3907d1	a4 1c		ldy $1c		                LDY CURSORY           ; Get the current row
.3907d3	e4 0f		cpx $0f		                CPX COLS_VISIBLE      ; Are we off screen?
.3907d5	90 0d		bcc $3907e4	                BCC icsrright_nowrap  ; No: just set the position
.3907d7	a2 00 00	ldx #$0000	                LDX #0                ; Yes: move to the first column
.3907da	c8		iny		                INY                   ; And move to the next row
.3907db	c4 13		cpy $13		                CPY LINES_VISIBLE     ; Are we still off screen?
.3907dd	90 05		bcc $3907e4	                BCC icsrright_nowrap  ; No: just set the position
.3907df	88		dey		                DEY                   ; Yes: lock to the last row
.3907e0	22 ab 08 39	jsl $3908ab	                JSL ISCROLLUP         ; But scroll the screen up
.3907e4					icsrright_nowrap
.3907e4	22 5f 08 39	jsl $39085f	                JSL ILOCATE           ; Set the cursor position
.3907e8	28		plp		                PLP
.3907e9	2b		pld		                PLD
.3907ea	68		pla		                PLA
.3907eb	7a		ply		                PLY
.3907ec	fa		plx		                PLX
.3907ed	6b		rtl		                RTL
.3907ee					ICSRLEFT
.3907ee	da		phx		                PHX
.3907ef	5a		phy		                PHY
.3907f0	48		pha		                PHA
.3907f1	0b		phd		                PHD
.3907f2	08		php		                PHP
.3907f3	c2 30		rep #$30	                REP #$30        ; set A&X long
.3907f5	48		pha		                PHA             ; begin setdp macro
.3907f6	08		php		                PHP
.3907f7	c2 20		rep #$20	                REP #$20        ; set A long
.3907f9	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.3907fc	5b		tcd		                TCD
.3907fd	28		plp		                PLP
.3907fe	68		pla		                PLA             ; end setdp macro
.3907ff	a5 1a		lda $1a		                LDA CURSORX
.390801	f0 0b		beq $39080e	                BEQ icsrleft_done_already_zero ; Check that we are not already @ Zero
.390803	a6 1a		ldx $1a		                LDX CURSORX
.390805	ca		dex		                DEX
.390806	86 1a		stx $1a		                STX CURSORX
.390808	a4 1c		ldy $1c		                LDY CURSORY
.39080a	22 5f 08 39	jsl $39085f	                JSL ILOCATE
.39080e					icsrleft_done_already_zero
.39080e	28		plp		                PLP
.39080f	2b		pld		                PLD
.390810	68		pla		                PLA
.390811	7a		ply		                PLY
.390812	fa		plx		                PLX
.390813	6b		rtl		                RTL
.390814					ICSRUP
.390814	da		phx		                PHX
.390815	5a		phy		                PHY
.390816	48		pha		                PHA
.390817	0b		phd		                PHD
.390818	08		php		                PHP
.390819	c2 30		rep #$30	                REP #$30        ; set A&X long
.39081b	48		pha		                PHA             ; begin setdp macro
.39081c	08		php		                PHP
.39081d	c2 20		rep #$20	                REP #$20        ; set A long
.39081f	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.390822	5b		tcd		                TCD
.390823	28		plp		                PLP
.390824	68		pla		                PLA             ; end setdp macro
.390825	a5 1c		lda $1c		                LDA CURSORY
.390827	f0 0b		beq $390834	                BEQ isrup_done_already_zero ; Check if we are not already @ Zero
.390829	a4 1c		ldy $1c		                LDY CURSORY
.39082b	88		dey		                DEY
.39082c	84 1c		sty $1c		                STY CURSORY
.39082e	a6 1a		ldx $1a		                LDX CURSORX
.390830	22 5f 08 39	jsl $39085f	                JSL ILOCATE
.390834					isrup_done_already_zero
.390834	28		plp		                PLP
.390835	2b		pld		                PLD
.390836	68		pla		                PLA
.390837	7a		ply		                PLY
.390838	fa		plx		                PLX
.390839	6b		rtl		                RTL
.39083a	da		phx		ICSRDOWN        PHX
.39083b	5a		phy		                PHY
.39083c	0b		phd		                PHD
.39083d	c2 30		rep #$30	                REP #$30        ; set A&X long
.39083f	48		pha		                PHA             ; begin setdp macro
.390840	08		php		                PHP
.390841	c2 20		rep #$20	                REP #$20        ; set A long
.390843	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.390846	5b		tcd		                TCD
.390847	28		plp		                PLP
.390848	68		pla		                PLA             ; end setdp macro
.390849	a6 1a		ldx $1a		                LDX CURSORX                 ; Get the current column
.39084b	a4 1c		ldy $1c		                LDY CURSORY                 ; Get the new row
.39084d	c8		iny		                INY
.39084e	c4 13		cpy $13		                CPY LINES_VISIBLE           ; Check to see if we're off screen
.390850	90 05		bcc $390857	                BCC icsrdown_noscroll       ; No: go ahead and set the position
.390852	88		dey		                DEY                         ; Yes: go back to the last row
.390853	22 ab 08 39	jsl $3908ab	                JSL ISCROLLUP               ; But scroll the screen up
.390857					icsrdown_noscroll
.390857	22 5f 08 39	jsl $39085f	                JSL ILOCATE                 ; And set the cursor position
.39085b	2b		pld		                PLD
.39085c	7a		ply		                PLY
.39085d	fa		plx		                PLX
.39085e	6b		rtl		                RTL
.39085f	48		pha		ILOCATE         PHA
.390860	0b		phd		                PHD
.390861	08		php		                PHP
.390862	48		pha		                PHA             ; begin setdp macro
.390863	08		php		                PHP
.390864	c2 20		rep #$20	                REP #$20        ; set A long
.390866	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390869	5b		tcd		                TCD
.39086a	28		plp		                PLP
.39086b	68		pla		                PLA             ; end setdp macro
.39086c	c2 30		rep #$30	                REP #$30        ; set A&X long
.39086e					ilocate_scroll
.39086e	c4 13		cpy $13		                CPY LINES_VISIBLE
.390870	90 07		bcc $390879	                BCC ilocate_scrolldone
.390872	22 ab 08 39	jsl $3908ab	                JSL ISCROLLUP
.390876	88		dey		                DEY
.390877	80 f5		bra $39086e	                BRA ilocate_scroll
.390879					ilocate_scrolldone
.390879	86 1a		stx $1a		                STX CURSORX
.39087b	84 1c		sty $1c		                STY CURSORY
.39087d	a5 0c		lda $0c		                LDA SCREENBEGIN
.39087f					ilocate_row
.39087f	c0 00 00	cpy #$0000	                CPY #$0
.390882	f0 08		beq $39088c	                BEQ ilocate_right
.390884	18		clc		ilocate_down    CLC
.390885	65 11		adc $11		                ADC COLS_PER_LINE
.390887	88		dey		                DEY
.390888	f0 02		beq $39088c	                BEQ ilocate_right
.39088a	80 f8		bra $390884	                BRA ilocate_down
.39088c	18		clc		ilocate_right   CLC
.39088d	65 1a		adc $1a		                ADC CURSORX             ; move the cursor right X columns
.39088f	85 17		sta $17		                STA CURSORPOS
.390891	a4 1c		ldy $1c		                LDY CURSORY
.390893	98		tya		                TYA
.390894	8f 16 00 af	sta $af0016	                STA @lVKY_TXT_CURSOR_Y_REG_L  ;Store in Vicky's registers
.390898	8a		txa		                TXA
.390899	8f 14 00 af	sta $af0014	                STA @lVKY_TXT_CURSOR_X_REG_L  ;Store in Vicky's register
.39089d	c2 20		rep #$20	                REP #$20        ; set A long
.39089f	18		clc		                CLC
.3908a0	a5 17		lda $17		                LDA CURSORPOS
.3908a2	69 00 20	adc #$2000	                ADC #<>(CS_COLOR_MEM_PTR - CS_TEXT_MEM_PTR)
.3908a5	85 1f		sta $1f		                STA COLORPOS
.3908a7	28		plp		ilocate_done    PLP
.3908a8	2b		pld		                PLD
.3908a9	68		pla		                PLA
.3908aa	6b		rtl		                RTL
.3908ab					ISCROLLUP
.3908ab	48		pha		                PHA
.3908ac	da		phx		                PHX
.3908ad	5a		phy		                PHY
.3908ae	8b		phb		                PHB
.3908af	08		php		                PHP
.3908b0	c2 30		rep #$30	                REP #$30        ; set A&X long
.3908b2	af 11 00 00	lda $000011	                LDA @lCOLS_PER_LINE
.3908b6	8f 00 01 00	sta $000100	                STA @lM0_OPERAND_A
.3908ba	af 13 00 00	lda $000013	                LDA @lLINES_VISIBLE
.3908be	8f 02 01 00	sta $000102	                STA @lM0_OPERAND_B
.3908c2	af 04 01 00	lda $000104	                LDA @lM0_RESULT
.3908c6	8f 00 00 00	sta $000000	                STA @lTMPPTR1
.3908ca	18		clc		                CLC
.3908cb	a9 00 a0	lda #$a000	                LDA #$A000
.3908ce	a8		tay		                TAY
.3908cf	6f 11 00 00	adc $000011	                ADC @lCOLS_PER_LINE
.3908d3	aa		tax		                TAX
.3908d4	af 00 00 00	lda $000000	                LDA @lTMPPTR1
.3908d8	54 af af	mvn $af,$af	                MVN $AF,$AF
.3908db	c2 30		rep #$30	                REP #$30        ; set A&X long
.3908dd	18		clc		                CLC
.3908de	a9 00 c0	lda #$c000	                LDA #$C000
.3908e1	a8		tay		                TAY
.3908e2	6f 11 00 00	adc $000011	                ADC @lCOLS_PER_LINE
.3908e6	aa		tax		                TAX
.3908e7	af 00 00 00	lda $000000	                LDA @lTMPPTR1
.3908eb	54 af af	mvn $af,$af	                MVN $AF,$AF
.3908ee	28		plp		                PLP
.3908ef	ab		plb		                PLB
.3908f0	7a		ply		                PLY
.3908f1	fa		plx		                PLX
.3908f2	68		pla		                PLA
.3908f3	6b		rtl		                RTL
.3908f4	08		php		IPRINTH         PHP
.3908f5	48		pha		                PHA
.3908f6					iprinth1
.3908f6	e2 20		sep #$20	                SEP #$20        ; set A short
.3908f8	bd 00 00	lda $0000,x	                LDA #0,b,x      ; Read the value to be printed
.3908fb	4a		lsr a		                LSR
.3908fc	4a		lsr a		                LSR
.3908fd	4a		lsr a		                LSR
.3908fe	4a		lsr a		                LSR
.3908ff	22 4e 09 39	jsl $39094e	                JSL iprint_digit
.390903	bd 00 00	lda $0000,x	                LDA #0,b,x
.390906	22 4e 09 39	jsl $39094e	                JSL iprint_digit
.39090a	ca		dex		                DEX
.39090b	88		dey		                DEY
.39090c	d0 e8		bne $3908f6	                BNE iprinth1
.39090e	68		pla		                PLA
.39090f	28		plp		                PLP
.390910	6b		rtl		                RTL
.390911					IPRINTAH
.390911	48		pha		                PHA
.390912	08		php		                PHP
.390913	8f 44 02 00	sta $000244	                STA @lCPUA            ; Save A where we can use it multiple times
.390917	08		php		                PHP                   ; Get the processor status into A
.390918	e2 20		sep #$20	                SEP #$20        ; set A short
.39091a	c2 10		rep #$10	                REP #$10        ; set X long
.39091c	68		pla		                PLA
.39091d	29 20		and #$20	                AND #%00100000        ; Is M = 1?
.39091f	c9 20		cmp #$20	                CMP #%00100000
.390921	f0 14		beq $390937	                BEQ eight_bit
.390923	af 46 02 00	lda $000246	                LDA @lCPUA+2          ; Get nibble [15..12]
.390927	4a		lsr a		                LSR A
.390928	4a		lsr a		                LSR A
.390929	4a		lsr a		                LSR A
.39092a	4a		lsr a		                LSR A
.39092b	22 4e 09 39	jsl $39094e	                JSL iprint_digit      ; And print it
.39092f	af 46 02 00	lda $000246	                LDA @lCPUA+2          ; Get nibble [11..8]
.390933	22 4e 09 39	jsl $39094e	                JSL iprint_digit      ; And print it
.390937	af 44 02 00	lda $000244	eight_bit       LDA @lCPUA            ; Get nibble [7..4]
.39093b	4a		lsr a		                LSR A
.39093c	4a		lsr a		                LSR A
.39093d	4a		lsr a		                LSR A
.39093e	4a		lsr a		                LSR A
.39093f	22 4e 09 39	jsl $39094e	                JSL iprint_digit      ; And print it
.390943	af 44 02 00	lda $000244	                LDA @lCPUA            ; Get nibble [3..0]
.390947	22 4e 09 39	jsl $39094e	                JSL iprint_digit      ; And print it
.39094b	28		plp		                PLP
.39094c	68		pla		                PLA
.39094d	6b		rtl		                RTL
.39094e	da		phx		iprint_digit    PHX
.39094f	c2 20		rep #$20	                REP #$20        ; set A long
.390951	29 0f 00	and #$000f	                AND #$0F
.390954	aa		tax		                TAX
.390955	bf d2 18 39	lda $3918d2,x	                LDA hex_digits,X
.390959	22 4f 06 39	jsl $39064f	                JSL IPUTC       ; Print the digit
.39095d	fa		plx		                PLX
.39095e	6b		rtl		                RTL
.39095f	48		pha		ICLRSCREEN	    PHA
.390960	da		phx		                PHX
.390961	08		php		                PHP
.390962	e2 20		sep #$20	                SEP #$20        ; set A short
.390964	c2 10		rep #$10	                REP #$10        ; set X long
.390966	a2 00 00	ldx #$0000	                LDX #$0000		          ; Only Use One Pointer
.390969	a9 20		lda #$20	                LDA #$20		            ; Fill the Entire Screen with Space
.39096b	9f 00 a0 af	sta $afa000,x	iclearloop0	    STA CS_TEXT_MEM_PTR, x	;
.39096f	e8		inx		                inx
.390970	e0 00 20	cpx #$2000	                cpx #$2000
.390973	d0 f6		bne $39096b	                bne iclearloop0
.390975	a2 00 00	ldx #$0000	                LDX	#$0000		          ; Only Use One Pointer
.390978	af 1e 00 00	lda $00001e	                LDA @lCURCOLOR          ; Fill the Color Memory with the current color
.39097c	9f 00 c0 af	sta $afc000,x	iclearloop1	    STA CS_COLOR_MEM_PTR, x	;
.390980	e8		inx		                inx
.390981	e0 00 20	cpx #$2000	                cpx #$2000
.390984	d0 f6		bne $39097c	                bne iclearloop1
.390986	28		plp		                PLP
.390987	fa		plx		                PLX
.390988	68		pla		                PLA
.390989	6b		rtl		                RTL
.39098a					COPYBYTES42
.39098a	08		php		                PHP
.39098b	0b		phd		                PHD
.39098c	48		pha		                PHA             ; begin setdp macro
.39098d	08		php		                PHP
.39098e	c2 20		rep #$20	                REP #$20        ; set A long
.390990	a9 00 00	lda #$0000	                LDA #TMPPTR1         ; set DP to page 0
.390993	5b		tcd		                TCD
.390994	28		plp		                PLP
.390995	68		pla		                PLA             ; end setdp macro
.390996	e2 20		sep #$20	                SEP #$20        ; set A short
.390998	c2 10		rep #$10	                REP #$10        ; set X long
.39099a	a0 00 00	ldy #$0000	                LDY #0
.39099d	b7 00		lda [$00],y	copy_loop       LDA [TMPPTR1],Y
.39099f	97 04		sta [$04],y	                STA [TMPPTR2],Y
.3909a1	c8		iny		                INY
.3909a2	c0 2a 00	cpy #$002a	                CPY #42
.3909a5	d0 f6		bne $39099d	                BNE copy_loop
.3909a7	2b		pld		                PLD
.3909a8	28		plp		                PLP
.3909a9	60		rts		                RTS
.3909aa					ICOLORFLAG
.3909aa	48		pha		                PHA
.3909ab	da		phx		                PHX
.3909ac	5a		phy		                PHY
.3909ad	08		php		                PHP
.3909ae	8b		phb		                PHB
.3909af	0b		phd		                PHD
.3909b0	48		pha		                PHA             ; begin setdp macro
.3909b1	08		php		                PHP
.3909b2	c2 20		rep #$20	                REP #$20        ; set A long
.3909b4	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3909b7	5b		tcd		                TCD
.3909b8	28		plp		                PLP
.3909b9	68		pla		                PLA             ; end setdp macro
.3909ba	c2 30		rep #$30	                REP #$30        ; set A&X long
.3909bc	a9 00 c0	lda #$c000	                LDA #<>CS_COLOR_MEM_PTR
.3909bf	85 04		sta $04		                STA TMPPTR2
.3909c1	a9 af 00	lda #$00af	                LDA #`CS_COLOR_MEM_PTR
.3909c4	85 06		sta $06		                STA TMPPTR2+2
.3909c6	a9 bd 15	lda #$15bd	                LDA #<>greet_clr_line1
.3909c9	85 00		sta $00		                STA TMPPTR1
.3909cb	a9 39 00	lda #$0039	                LDA #`greet_clr_line1
.3909ce	85 02		sta $02		                STA TMPPTR1+2
.3909d0	20 8a 09	jsr $39098a	                JSR COPYBYTES42
.3909d3	18		clc		                CLC
.3909d4	a5 04		lda $04		                LDA TMPPTR2
.3909d6	65 11		adc $11		                ADC COLS_PER_LINE
.3909d8	85 04		sta $04		                STA TMPPTR2
.3909da	a9 e7 15	lda #$15e7	                LDA #<>greet_clr_line2
.3909dd	85 00		sta $00		                STA TMPPTR1
.3909df	a9 39 00	lda #$0039	                LDA #`greet_clr_line2
.3909e2	85 02		sta $02		                STA TMPPTR1+2
.3909e4	20 8a 09	jsr $39098a	                JSR COPYBYTES42
.3909e7	18		clc		                CLC
.3909e8	a5 04		lda $04		                LDA TMPPTR2
.3909ea	65 11		adc $11		                ADC COLS_PER_LINE
.3909ec	85 04		sta $04		                STA TMPPTR2
.3909ee	a9 11 16	lda #$1611	                LDA #<>greet_clr_line3
.3909f1	85 00		sta $00		                STA TMPPTR1
.3909f3	a9 39 00	lda #$0039	                LDA #`greet_clr_line3
.3909f6	85 02		sta $02		                STA TMPPTR1+2
.3909f8	20 8a 09	jsr $39098a	                JSR COPYBYTES42
.3909fb	18		clc		                CLC
.3909fc	a5 04		lda $04		                LDA TMPPTR2
.3909fe	65 11		adc $11		                ADC COLS_PER_LINE
.390a00	85 04		sta $04		                STA TMPPTR2
.390a02	a9 3b 16	lda #$163b	                LDA #<>greet_clr_line4
.390a05	85 00		sta $00		                STA TMPPTR1
.390a07	a9 39 00	lda #$0039	                LDA #`greet_clr_line4
.390a0a	85 02		sta $02		                STA TMPPTR1+2
.390a0c	20 8a 09	jsr $39098a	                JSR COPYBYTES42
.390a0f	18		clc		                CLC
.390a10	a5 04		lda $04		                LDA TMPPTR2
.390a12	65 11		adc $11		                ADC COLS_PER_LINE
.390a14	85 04		sta $04		                STA TMPPTR2
.390a16	a9 65 16	lda #$1665	                LDA #<>greet_clr_line5
.390a19	85 00		sta $00		                STA TMPPTR1
.390a1b	a9 39 00	lda #$0039	                LDA #`greet_clr_line5
.390a1e	85 02		sta $02		                STA TMPPTR1+2
.390a20	20 8a 09	jsr $39098a	                JSR COPYBYTES42
.390a23	2b		pld		                PLD
.390a24	ab		plb		                PLB
.390a25	28		plp		                PLP
.390a26	7a		ply		                PLY
.390a27	fa		plx		                PLX
.390a28	68		pla		                PLA
.390a29	6b		rtl		                RTL
.390a2a	0b		phd		IINITCHLUT		  PHD
.390a2b	08		php		                PHP
.390a2c	48		pha		                PHA
.390a2d	da		phx		                PHX
.390a2e	e2 20		sep #$20	                SEP #$20        ; set A short
.390a30	e2 10		sep #$10	                SEP #$10        ; set X short
.390a32	a2 00		ldx #$00					        LDX	#$00
.390a34	bf 8f 16 39	lda $39168f,x	lutinitloop0	  LDA @lfg_color_lut,x		; get Local Data
.390a38	9f 40 1f af	sta $af1f40,x	                STA FG_CHAR_LUT_PTR,x	; Write in LUT Memory
.390a3c	e8		inx		                inx
.390a3d	e0 40		cpx #$40	                cpx #$40
.390a3f	d0 f3		bne $390a34	                bne lutinitloop0
.390a41	a2 00		ldx #$00	                LDX	#$00
.390a43	bf cf 16 39	lda $3916cf,x	lutinitloop1	  LDA @lbg_color_lut,x		; get Local Data
.390a47	9f 80 1f af	sta $af1f80,x	                STA BG_CHAR_LUT_PTR,x	; Write in LUT Memory
.390a4b	e8		inx		                INX
.390a4c	e0 40		cpx #$40	                CPX #$40
.390a4e	d0 f3		bne $390a43	                bne lutinitloop1
.390a50	c2 20		rep #$20	                REP #$20        ; set A long
.390a52	c2 10		rep #$10	                REP #$10        ; set X long
.390a54	fa		plx		                PLX
.390a55	68		pla		                PLA
.390a56	28		plp		                PLP
.390a57	2b		pld		                PLD
.390a58	6b		rtl		                RTL
.390a59					IINITGAMMATABLE
.390a59	e2 20		sep #$20	                SEP #$20        ; set A short
.390a5b	c2 10		rep #$10	                REP #$10        ; set X long
.390a5d	a2 00 00	ldx #$0000	                ldx #$0000
.390a60	bf 00 1d 39	lda $391d00,x	initgammaloop   LDA GAMMA_1_8_Tbl, x
.390a64	9f 00 40 af	sta $af4000,x	                STA GAMMA_B_LUT_PTR, x
.390a68	9f 00 41 af	sta $af4100,x	                STA GAMMA_G_LUT_PTR, x
.390a6c	9f 00 42 af	sta $af4200,x	                STA GAMMA_R_LUT_PTR, x
.390a70	e8		inx		                inx
.390a71	e0 00 01	cpx #$0100	                cpx #$0100
.390a74	d0 ea		bne $390a60	                bne initgammaloop
.390a76	c2 30		rep #$30	                REP #$30        ; set A&X long
.390a78	6b		rtl		                RTL
.390a79	48		pha		IINITALLLUT     PHA
.390a7a	da		phx		                PHX
.390a7b	a2 00 00	ldx #$0000	                LDX #$0000
.390a7e	e2 20		sep #$20	                SEP #$20        ; set A short
.390a80	a9 00		lda #$00	                LDA #$00
.390a82	85 0a		sta $0a		                STA $0A     ; Temp Location
.390a84					iinit_lut_loop
.390a84	86 02		stx $02		                STX $02
.390a86	a6 0a		ldx $0a		                LDX $0A
.390a88	bf 00 1c 39	lda $391c00,x	                LDA GAMMA_2_2_Tbl, x
.390a8c	49 55		eor #$55	                EOR  #$55
.390a8e	a6 02		ldx $02		                LDX $02
.390a90	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390a94	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390a98	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390a9c	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390aa0	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390aa4	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390aa8	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390aac	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390ab0	e8		inx		                inx
.390ab1	86 02		stx $02		                STX $02
.390ab3	a6 0a		ldx $0a		                LDX $0A
.390ab5	bf 00 1e 39	lda $391e00,x	                LDA RANDOM_LUT_Tbl, x
.390ab9	a6 02		ldx $02		                LDX $02
.390abb	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390abf	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390ac3	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390ac7	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390acb	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390acf	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390ad3	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390ad7	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390adb	e8		inx		                inx
.390adc	86 02		stx $02		                STX $02
.390ade	a6 0a		ldx $0a		                LDX $0A
.390ae0	bf 00 1d 39	lda $391d00,x	                LDA GAMMA_1_8_Tbl, x
.390ae4	49 aa		eor #$aa	                EOR  #$AA
.390ae6	a6 02		ldx $02		                LDX $02
.390ae8	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390aec	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390af0	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390af4	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390af8	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390afc	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390b00	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390b04	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390b08	e8		inx		                inx
.390b09	a9 ff		lda #$ff	                LDA #$FF
.390b0b	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390b0f	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390b13	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390b17	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390b1b	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390b1f	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390b23	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390b27	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390b2b	e6 0a		inc $0a		                inc $0A
.390b2d	e8		inx		                inx
.390b2e	e0 00 04	cpx #$0400	                cpx #$0400
.390b31	f0 03		beq $390b36	                beq iinit_lut_exit
.390b33	82 4e ff	brl $390a84	                brl iinit_lut_loop
.390b36					iinit_lut_exit
.390b36	c2 30		rep #$30	                REP #$30        ; set A&X long
.390b38	fa		plx		                PLX
.390b39	68		pla		                PLA
.390b3a	6b		rtl		                RTL
.390b3b	48		pha		IINITVKYTXTMODE PHA
.390b3c	08		php		                PHP
.390b3d	e2 20		sep #$20	                SEP #$20        ; set A short
.390b3f	a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En       ; Okay, this Enables the Text Mode (Video Display)
.390b41	8f 00 00 af	sta $af0000	                STA MASTER_CTRL_REG_L
.390b45	a9 00		lda #$00	                LDA #0                            ; 640x480 mode (80 columns max)
.390b47	8f 01 00 af	sta $af0001	                STA @lMASTER_CTRL_REG_H
.390b4b	a9 20		lda #$20	                LDA #$20
.390b4d	8f 05 00 af	sta $af0005	                STA BORDER_COLOR_B
.390b51	8f 07 00 af	sta $af0007	                STA BORDER_COLOR_R
.390b55	a9 00		lda #$00	                LDA #$00
.390b57	8f 06 00 af	sta $af0006	                STA BORDER_COLOR_G
.390b5b	a9 01		lda #$01	                LDA #Border_Ctrl_Enable           ; Enable the Border
.390b5d	8f 04 00 af	sta $af0004	                STA BORDER_CTRL_REG
.390b61	a9 20		lda #$20	                LDA #32                           ; Set the border to the standard 32 pixels
.390b63	8f 08 00 af	sta $af0008	                STA BORDER_X_SIZE
.390b67	8f 09 00 af	sta $af0009	                STA BORDER_Y_SIZE
.390b6b	c2 30		rep #$30	                REP #$30        ; set A&X long
.390b6d	22 74 0b 39	jsl $390b74	                JSL ISETSIZES                     ; Calculate the size of the text screen
.390b71	28		plp		                PLP
.390b72	68		pla		                PLA
.390b73	6b		rtl		                RTL
.390b74					ISETSIZES
.390b74	48		pha		                PHA
.390b75	da		phx		                PHX
.390b76	5a		phy		                PHY
.390b77	8b		phb		                PHB
.390b78	0b		phd		                PHD
.390b79	08		php		                PHP
.390b7a	48		pha		                PHA             ; begin setdp macro
.390b7b	08		php		                PHP
.390b7c	c2 20		rep #$20	                REP #$20        ; set A long
.390b7e	a9 00 00	lda #$0000	                LDA #<>BANK0_BEGIN         ; set DP to page 0
.390b81	5b		tcd		                TCD
.390b82	28		plp		                PLP
.390b83	68		pla		                PLA             ; end setdp macro
.390b84	48		pha		                PHA             ; begin setdbr macro
.390b85	08		php		                PHP
.390b86	e2 20		sep #$20	                SEP #$20        ; set A short
.390b88	a9 00		lda #$00	                LDA #0
.390b8a	48		pha		                PHA
.390b8b	ab		plb		                PLB
.390b8c	28		plp		                PLP
.390b8d	68		pla		                PLA             ; end setdbr macro
.390b8e	e2 30		sep #$30	                SEP #$30        ; set A&X short
.390b90	af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.390b94	29 03		and #$03	                AND #$03                    ; Mask off the resolution bits
.390b96	0a		asl a		                ASL A
.390b97	aa		tax		                TAX                         ; Index to the col/line count in X
.390b98	c2 20		rep #$20	                REP #$20        ; set A long
.390b9a	bf fb 0b 39	lda $390bfb,x	                LDA cols_by_res,X           ; Get the number of columns
.390b9e	85 11		sta $11		                STA COLS_PER_LINE           ; This is how many columns there are per line in the memory
.390ba0	85 0f		sta $0f		                STA COLS_VISIBLE            ; This is how many would be visible with no border
.390ba2	bf 03 0c 39	lda $390c03,x	                LDA lines_by_res,X          ; Get the number of lines
.390ba6	85 15		sta $15		                STA LINES_MAX               ; This is the total number of lines in memory
.390ba8	85 13		sta $13		                STA LINES_VISIBLE           ; This is how many lines would be visible with no border
.390baa	e2 20		sep #$20	                SEP #$20        ; set A short
.390bac	af 04 00 af	lda $af0004	                LDA @l BORDER_CTRL_REG      ; Check to see if we have a border
.390bb0	89 01		bit #$01	                BIT #Border_Ctrl_Enable
.390bb2	f0 40		beq $390bf4	                BEQ done                    ; No border... the sizes are correct now
.390bb4	af 08 00 af	lda $af0008	                LDA @l BORDER_X_SIZE        ; Get the horizontal border width
.390bb8	29 3f		and #$3f	                AND #$3F
.390bba	89 03		bit #$03	                BIT #$03                    ; Check the lower two bits... indicates a partial column is eaten
.390bbc	d0 04		bne $390bc2	                BNE frac_width
.390bbe	4a		lsr a		                LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.390bbf	4a		lsr a		                LSR A
.390bc0	80 03		bra $390bc5	                BRA store_width
.390bc2	4a		lsr a		frac_width      LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.390bc3	4a		lsr a		                LSR A                       ; because a column is partially hidden
.390bc4	1a		inc a		                INC A
.390bc5	85 00		sta $00		store_width     STA TMPPTR1
.390bc7	64 01		stz $01		                STZ TMPPTR1+1
.390bc9	c2 20		rep #$20	                REP #$20        ; set A long
.390bcb	38		sec		                SEC
.390bcc	a5 11		lda $11		                LDA COLS_PER_LINE
.390bce	e5 00		sbc $00		                SBC TMPPTR1
.390bd0	85 0f		sta $0f		                STA COLS_VISIBLE
.390bd2	af 09 00 af	lda $af0009	                LDA @l BORDER_Y_SIZE        ; Get the horizontal border width
.390bd6	29 3f 00	and #$003f	                AND #$3F
.390bd9	89 03 00	bit #$0003	                BIT #$03                    ; Check the lower two bits... indicates a partial column is eaten
.390bdc	d0 04		bne $390be2	                BNE frac_height
.390bde	4a		lsr a		                LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.390bdf	4a		lsr a		                LSR A
.390be0	80 03		bra $390be5	                BRA store_height
.390be2	4a		lsr a		frac_height     LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.390be3	4a		lsr a		                LSR A                       ; because a column is partially hidden
.390be4	1a		inc a		                INC A
.390be5	85 00		sta $00		store_height    STA TMPPTR1
.390be7	64 01		stz $01		                STZ TMPPTR1+1
.390be9	c2 20		rep #$20	                REP #$20        ; set A long
.390beb	38		sec		                SEC
.390bec	a5 15		lda $15		                LDA LINES_MAX
.390bee	e5 00		sbc $00		                SBC TMPPTR1
.390bf0	85 13		sta $13		                STA LINES_VISIBLE
.390bf2	c2 30		rep #$30	                REP #$30        ; set A&X long
.390bf4	28		plp		done            PLP
.390bf5	2b		pld		                PLD
.390bf6	ab		plb		                PLB
.390bf7	7a		ply		                PLY
.390bf8	fa		plx		                PLX
.390bf9	68		pla		                PLA
.390bfa	6b		rtl		                RTL
>390bfb	50 00 64 00 28 00 32 00		cols_by_res     .word 80,100,40,50
>390c03	3c 00 4b 00 1e 00 25 00		lines_by_res    .word 60,75,30,37
.390c0b					IINITVKYGRPMODE
.390c0b	48		pha		                PHA
.390c0c	e2 20		sep #$20	                SEP #$20        ; set A short
.390c0e	a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.390c10	8f 40 01 af	sta $af0140	                STA @lBM_CONTROL_REG
.390c14	a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.390c16	8f 41 01 af	sta $af0141	                STA @lBM_START_ADDY_L
.390c1a	a9 c0		lda #$c0	                LDA #$C0
.390c1c	8f 42 01 af	sta $af0142	                STA @lBM_START_ADDY_M
.390c20	a9 00		lda #$00	                LDA #$00
.390c22	8f 43 01 af	sta $af0143	                STA @lBM_START_ADDY_H ; This address is always base from
.390c26	a9 80		lda #$80	                LDA #$80
.390c28	8f 44 01 af	sta $af0144	                STA BM_X_SIZE_L
.390c2c	a9 02		lda #$02	                LDA #$02
.390c2e	8f 45 01 af	sta $af0145	                STA BM_X_SIZE_H         ; $0280 = 640
.390c32	a9 e0		lda #$e0	                LDA #$E0
.390c34	8f 46 01 af	sta $af0146	                STA BM_Y_SIZE_L
.390c38	a9 01		lda #$01	                LDA #$01
.390c3a	8f 47 01 af	sta $af0147	                STA BM_Y_SIZE_H         ; $01E0 = 480
.390c3e	c2 30		rep #$30	                REP #$30        ; set A&X long
.390c40	68		pla		                PLA
.390c41	6b		rtl		                RTL
.390c42					IINITTILEMODE
.390c42	6b		rtl		                RTL
.390c43	48		pha		IINITSPRITE     PHA
.390c44	e2 20		sep #$20	                SEP #$20        ; set A short
.390c46	a9 03		lda #$03	                LDA #$03    ; Enable 17 Sprites
.390c48	8f 00 02 af	sta $af0200	                STA SP00_CONTROL_REG
.390c4c	8f 08 02 af	sta $af0208	                STA SP01_CONTROL_REG
.390c50	8f 10 02 af	sta $af0210	                STA SP02_CONTROL_REG
.390c54	8f 18 02 af	sta $af0218	                STA SP03_CONTROL_REG
.390c58	8f 20 02 af	sta $af0220	                STA SP04_CONTROL_REG
.390c5c	8f 28 02 af	sta $af0228	                STA SP05_CONTROL_REG
.390c60	8f 30 02 af	sta $af0230	                STA SP06_CONTROL_REG
.390c64	8f 38 02 af	sta $af0238	                STA SP07_CONTROL_REG
.390c68	8f 40 02 af	sta $af0240	                STA SP08_CONTROL_REG
.390c6c	8f 48 02 af	sta $af0248	                STA SP09_CONTROL_REG
.390c70	8f 50 02 af	sta $af0250	                STA SP10_CONTROL_REG
.390c74	8f 58 02 af	sta $af0258	                STA SP11_CONTROL_REG
.390c78	8f 60 02 af	sta $af0260	                STA SP12_CONTROL_REG
.390c7c	8f 68 02 af	sta $af0268	                STA SP13_CONTROL_REG
.390c80	8f 70 02 af	sta $af0270	                STA SP14_CONTROL_REG
.390c84	8f 78 02 af	sta $af0278	                STA SP15_CONTROL_REG
.390c88	8f 80 02 af	sta $af0280	                STA SP16_CONTROL_REG
.390c8c	a9 09		lda #$09	                LDA #$09
.390c8e	8f 03 02 af	sta $af0203	                STA SP00_ADDY_PTR_H
.390c92	8f 0b 02 af	sta $af020b	                STA SP01_ADDY_PTR_H
.390c96	8f 13 02 af	sta $af0213	                STA SP02_ADDY_PTR_H
.390c9a	8f 1b 02 af	sta $af021b	                STA SP03_ADDY_PTR_H
.390c9e	8f 23 02 af	sta $af0223	                STA SP04_ADDY_PTR_H
.390ca2	8f 2b 02 af	sta $af022b	                STA SP05_ADDY_PTR_H
.390ca6	8f 33 02 af	sta $af0233	                STA SP06_ADDY_PTR_H
.390caa	8f 3b 02 af	sta $af023b	                STA SP07_ADDY_PTR_H
.390cae	8f 43 02 af	sta $af0243	                STA SP08_ADDY_PTR_H
.390cb2	8f 4b 02 af	sta $af024b	                STA SP09_ADDY_PTR_H
.390cb6	8f 53 02 af	sta $af0253	                STA SP10_ADDY_PTR_H
.390cba	8f 5b 02 af	sta $af025b	                STA SP11_ADDY_PTR_H
.390cbe	8f 63 02 af	sta $af0263	                STA SP12_ADDY_PTR_H
.390cc2	8f 6b 02 af	sta $af026b	                STA SP13_ADDY_PTR_H
.390cc6	8f 73 02 af	sta $af0273	                STA SP14_ADDY_PTR_H
.390cca	8f 7b 02 af	sta $af027b	                STA SP15_ADDY_PTR_H
.390cce	8f 83 02 af	sta $af0283	                STA SP16_ADDY_PTR_H
.390cd2	a9 00		lda #$00	                LDA #$00
.390cd4	8f 02 02 af	sta $af0202	                STA SP00_ADDY_PTR_M
.390cd8	a9 04		lda #$04	                LDA #$04
.390cda	8f 0a 02 af	sta $af020a	                STA SP01_ADDY_PTR_M
.390cde	a9 08		lda #$08	                LDA #$08
.390ce0	8f 12 02 af	sta $af0212	                STA SP02_ADDY_PTR_M
.390ce4	a9 0c		lda #$0c	                LDA #$0C
.390ce6	8f 1a 02 af	sta $af021a	                STA SP03_ADDY_PTR_M
.390cea	a9 10		lda #$10	                LDA #$10
.390cec	8f 22 02 af	sta $af0222	                STA SP04_ADDY_PTR_M
.390cf0	a9 14		lda #$14	                LDA #$14
.390cf2	8f 2a 02 af	sta $af022a	                STA SP05_ADDY_PTR_M
.390cf6	a9 18		lda #$18	                LDA #$18
.390cf8	8f 32 02 af	sta $af0232	                STA SP06_ADDY_PTR_M
.390cfc	a9 1c		lda #$1c	                LDA #$1C
.390cfe	8f 3a 02 af	sta $af023a	                STA SP07_ADDY_PTR_M
.390d02	a9 20		lda #$20	                LDA #$20
.390d04	8f 42 02 af	sta $af0242	                STA SP08_ADDY_PTR_M
.390d08	a9 24		lda #$24	                LDA #$24
.390d0a	8f 4a 02 af	sta $af024a	                STA SP09_ADDY_PTR_M
.390d0e	a9 28		lda #$28	                LDA #$28
.390d10	8f 52 02 af	sta $af0252	                STA SP10_ADDY_PTR_M
.390d14	a9 2c		lda #$2c	                LDA #$2C
.390d16	8f 5a 02 af	sta $af025a	                STA SP11_ADDY_PTR_M
.390d1a	a9 30		lda #$30	                LDA #$30
.390d1c	8f 62 02 af	sta $af0262	                STA SP12_ADDY_PTR_M
.390d20	a9 34		lda #$34	                LDA #$34
.390d22	8f 6a 02 af	sta $af026a	                STA SP13_ADDY_PTR_M
.390d26	a9 38		lda #$38	                LDA #$38
.390d28	8f 72 02 af	sta $af0272	                STA SP14_ADDY_PTR_M
.390d2c	a9 3c		lda #$3c	                LDA #$3C
.390d2e	8f 7a 02 af	sta $af027a	                STA SP15_ADDY_PTR_M
.390d32	a9 40		lda #$40	                LDA #$40
.390d34	8f 82 02 af	sta $af0282	                STA SP16_ADDY_PTR_M
.390d38	a9 00		lda #$00	                LDA #$00
.390d3a	8f 01 02 af	sta $af0201	                STA SP00_ADDY_PTR_L
.390d3e	8f 09 02 af	sta $af0209	                STA SP01_ADDY_PTR_L
.390d42	8f 11 02 af	sta $af0211	                STA SP02_ADDY_PTR_L
.390d46	8f 19 02 af	sta $af0219	                STA SP03_ADDY_PTR_L
.390d4a	8f 21 02 af	sta $af0221	                STA SP04_ADDY_PTR_L
.390d4e	8f 29 02 af	sta $af0229	                STA SP05_ADDY_PTR_L
.390d52	8f 31 02 af	sta $af0231	                STA SP06_ADDY_PTR_L
.390d56	8f 39 02 af	sta $af0239	                STA SP07_ADDY_PTR_L
.390d5a	8f 41 02 af	sta $af0241	                STA SP08_ADDY_PTR_L
.390d5e	8f 49 02 af	sta $af0249	                STA SP09_ADDY_PTR_L
.390d62	8f 51 02 af	sta $af0251	                STA SP10_ADDY_PTR_L
.390d66	8f 59 02 af	sta $af0259	                STA SP11_ADDY_PTR_L
.390d6a	8f 61 02 af	sta $af0261	                STA SP12_ADDY_PTR_L
.390d6e	8f 69 02 af	sta $af0269	                STA SP13_ADDY_PTR_L
.390d72	8f 71 02 af	sta $af0271	                STA SP14_ADDY_PTR_L
.390d76	8f 79 02 af	sta $af0279	                STA SP15_ADDY_PTR_L
.390d7a	8f 81 02 af	sta $af0281	                STA SP16_ADDY_PTR_L
.390d7e	68		pla		                PLA
.390d7f	6b		rtl		                RTL
.390d80					IINITFONTSET
.390d80	e2 20		sep #$20	                SEP #$20        ; set A short
.390d82	c2 10		rep #$10	                REP #$10        ; set X long
.390d84	a2 00 00	ldx #$0000	                LDX #$0000
.390d87					initFontsetbranch0
.390d87	bf 00 f0 3f	lda $3ff000,x	                LDA @lFONT_4_BANK0,X    ; RAM Content
.390d8b	9f 00 80 af	sta $af8000,x	                STA @lFONT_MEMORY_BANK0,X ; Vicky FONT RAM Bank
.390d8f	e8		inx		                INX
.390d90	e0 00 08	cpx #$0800	                CPX #$0800
.390d93	d0 f2		bne $390d87	                BNE initFontsetbranch0
.390d95	ea		nop		                NOP
.390d96	a2 00 00	ldx #$0000	                LDX #$0000
.390d99					initFontsetbranch1
.390d99	bf 00 f8 3f	lda $3ff800,x	                LDA @lFONT_4_BANK1,X
.390d9d	9f 00 88 af	sta $af8800,x	                STA @lFONT_MEMORY_BANK1,X ; Vicky FONT RAM Bank
.390da1	e8		inx		                INX
.390da2	e0 00 08	cpx #$0800	                CPX #$0800
.390da5	d0 f2		bne $390d99	                BNE initFontsetbranch1
.390da7	ea		nop		                NOP
.390da8	c2 30		rep #$30	                REP #$30        ; set A&X long
.390daa	6b		rtl		                RTL
.390dab					INITMOUSEPOINTER
.390dab	e2 20		sep #$20	                SEP #$20        ; set A short
.390dad	c2 10		rep #$10	                REP #$10        ; set X long
.390daf	a2 00 00	ldx #$0000	                LDX #$0000
.390db2					FILL_MOUSE_MARKER
.390db2	bf 00 1f 39	lda $391f00,x	                LDA @lMOUSE_POINTER_PTR,X
.390db6	9f 00 05 af	sta $af0500,x	                STA @lMOUSE_PTR_GRAP0_START, X
.390dba	e8		inx		                INX
.390dbb	e0 00 01	cpx #$0100	                CPX #$0100
.390dbe	d0 f2		bne $390db2	                BNE FILL_MOUSE_MARKER
.390dc0	ea		nop		                nop
.390dc1	a9 01		lda #$01	                LDA #$01
.390dc3	8f 00 07 af	sta $af0700	                STA @lMOUSE_PTR_CTRL_REG_L  ; Enable Mouse, Mouse Pointer Graphic Bank 0
.390dc7	c2 30		rep #$30	                REP #$30        ; set A&X long
.390dc9	6b		rtl		                RTL
.390dca	48		pha		IINITCURSOR     PHA
.390dcb	e2 20		sep #$20	                SEP #$20        ; set A short
.390dcd	a9 b1		lda #$b1	                LDA #$B1      ;The Cursor Character will be a Fully Filled Block
.390dcf	8f 12 00 af	sta $af0012	                STA VKY_TXT_CURSOR_CHAR_REG
.390dd3	a9 03		lda #$03	                LDA #$03      ;Set Cursor Enable And Flash Rate @1Hz
.390dd5	8f 10 00 af	sta $af0010	                STA VKY_TXT_CURSOR_CTRL_REG ;
.390dd9	c2 30		rep #$30	                REP #$30        ; set A&X long
.390ddb	a9 00 00	lda #$0000	                LDA #$0000;
.390dde	8f 14 00 af	sta $af0014	                STA VKY_TXT_CURSOR_X_REG_L; // Set the X to Position 1
.390de2	a9 06 00	lda #$0006	                LDA #$0006;
.390de5	8f 16 00 af	sta $af0016	                STA VKY_TXT_CURSOR_Y_REG_L; // Set the Y to Position 6 (Below)
.390de9	68		pla		                PLA
.390dea	6b		rtl		                RTL
.390deb	0b		phd		IINITSUPERIO	  PHD
.390dec	08		php		                PHP
.390ded	48		pha		                PHA
.390dee	e2 20		sep #$20	                SEP #$20        ; set A short
.390df0	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390df2	8f 23 11 af	sta $af1123	                STA GP10_REG
.390df6	af 23 11 af	lda $af1123	                LDA GP10_REG
.390dfa	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390dfc	8f 24 11 af	sta $af1124	                STA GP11_REG
.390e00	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390e02	8f 25 11 af	sta $af1125	                STA GP12_REG
.390e06	a9 01		lda #$01	        				LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390e08	8f 26 11 af	sta $af1126	        				STA GP13_REG
.390e0c	a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BX) Bit[0] = 1, Bit[2] = 1
.390e0e	8f 27 11 af	sta $af1127	        				STA GP14_REG
.390e12	a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BY) Bit[0] = 1, Bit[2] = 1
.390e14	8f 28 11 af	sta $af1128	        				STA GP15_REG
.390e18	a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BX) Bit[0] = 1, Bit[2] = 1
.390e1a	8f 29 11 af	sta $af1129	        				STA GP16_REG
.390e1e	a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BY) Bit[0] = 1, Bit[2] = 1
.390e20	8f 2a 11 af	sta $af112a	        				STA GP17_REG
.390e24	a9 00		lda #$00	        				LDA #$00		;(C256 - HEADPHONE MUTE) - Output GPIO - Push-Pull (1 - Headphone On, 0 - HeadPhone Off)
.390e26	8f 2b 11 af	sta $af112b	        				STA GP20_REG
.390e2a	a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390e2c	8f 2f 11 af	sta $af112f					        STA GP24_REG
.390e30	a9 05		lda #$05					        LDA #$05		;(C256 - MIDI IN) Bit[0] = 1, Bit[2] = 1 (Page 132 Manual)
.390e32	8f 30 11 af	sta $af1130					        STA GP25_REG
.390e36	a9 84		lda #$84				        	LDA #$84		;(C256 - MIDI OUT) Bit[2] = 1, Bit[7] = 1 (Open Drain - To be Checked)
.390e38	8f 31 11 af	sta $af1131					        STA GP26_REG
.390e3c	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 1) Setup as GPIO Input for now
.390e3e	8f 33 11 af	sta $af1133					        STA GP30_REG
.390e42	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 4) Setup as GPIO Input for now
.390e44	8f 34 11 af	sta $af1134					        STA GP31_REG
.390e48	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 3) Setup as GPIO Input for now
.390e4a	8f 35 11 af	sta $af1135					        STA GP32_REG
.390e4e	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 6) Setup as GPIO Input for now
.390e50	8f 36 11 af	sta $af1136					        STA GP33_REG
.390e54	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 5) Setup as GPIO Input for now
.390e56	8f 37 11 af	sta $af1137					        STA GP34_REG
.390e5a	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 8) Setup as GPIO Input for now
.390e5c	8f 38 11 af	sta $af1138					        STA GP35_REG
.390e60	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 7) Setup as GPIO Input for now
.390e62	8f 39 11 af	sta $af1139					        STA GP36_REG
.390e66	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 10) Setup as GPIO Input for now
.390e68	8f 3a 11 af	sta $af113a					        STA GP37_REG
.390e6c	a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390e6e	8f 3d 11 af	sta $af113d					        STA GP42_REG
.390e72	a9 01		lda #$01				          LDA #$01		;(C256 - INPUT PLL CLK INTERRUPT) Default Value - Will keep it as an input for now, no real usage for now
.390e74	8f 3e 11 af	sta $af113e					        STA GP43_REG
.390e78	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RI2) - Input - Set Secondary Function
.390e7a	8f 3f 11 af	sta $af113f					        STA GP50_REG
.390e7e	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DCD2) - Input - Set Secondary Function
.390e80	8f 40 11 af	sta $af1140					        STA GP51_REG
.390e84	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RXD2) - Input - Set Secondary Function
.390e86	8f 41 11 af	sta $af1141					        STA GP52_REG
.390e8a	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - TXD2) - Output - Set Secondary Function
.390e8c	8f 42 11 af	sta $af1142					        STA GP53_REG
.390e90	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DSR2) - Input - Set Secondary Function
.390e92	8f 43 11 af	sta $af1143					        STA GP54_REG
.390e96	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - RTS2) - Output - Set Secondary Function
.390e98	8f 44 11 af	sta $af1144					        STA GP55_REG
.390e9c	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - CTS2) - Input - Set Secondary Function
.390e9e	8f 45 11 af	sta $af1145					        STA GP56_REG
.390ea2	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - DTR2) - Output - Set Secondary Function
.390ea4	8f 46 11 af	sta $af1146					        STA GP57_REG
.390ea8	a9 84		lda #$84					        LDA #$84		;(C256 - LED1) - Open Drain - Output
.390eaa	8f 47 11 af	sta $af1147					        STA GP60_REG
.390eae	a9 84		lda #$84					        LDA #$84		;(C256 - LED2) - Open Drain - Output
.390eb0	8f 48 11 af	sta $af1148					        STA GP61_REG
.390eb4	a9 00		lda #$00				        	LDA #$00		;GPIO Data Register (GP10..GP17) - Not Used
.390eb6	8f 4b 11 af	sta $af114b					        STA GP1_REG
.390eba	a9 01		lda #$01					        LDA #$01		;GPIO Data Register (GP20..GP27) - Bit[0] - Headphone Mute (Enabling it)
.390ebc	8f 4c 11 af	sta $af114c					        STA GP2_REG
.390ec0	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP30..GP37) - Since it is in Output mode, nothing to write here.
.390ec2	8f 4d 11 af	sta $af114d					        STA GP3_REG
.390ec6	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP40..GP47)  - Not Used
.390ec8	8f 4e 11 af	sta $af114e					        STA GP4_REG
.390ecc	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP50..GP57)  - Not Used
.390ece	8f 4f 11 af	sta $af114f					        STA GP5_REG
.390ed2	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP60..GP61)  - Not Used
.390ed4	8f 50 11 af	sta $af1150					        STA GP6_REG
.390ed8	a9 01		lda #$01					        LDA #$01		;LED1 Output - Already setup by Vicky Init Phase, for now, I will leave it alone
.390eda	8f 5d 11 af	sta $af115d					        STA LED1_REG
.390ede	a9 02		lda #$02					        LDA #$02		;LED2 Output - However, I will setup this one, to make sure the Code works (Full On, when Code was ran)
.390ee0	8f 5e 11 af	sta $af115e					        STA LED2_REG
.390ee4	c2 20		rep #$20	                REP #$20        ; set A long
.390ee6	68		pla		                PLA
.390ee7	28		plp						        PLP
.390ee8	2b		pld					        	PLD
.390ee9	6b		rtl		                RTL
.390eea	0b		phd		IINITKEYBOARD	  PHD
.390eeb	08		php						        PHP
.390eec	48		pha						        PHA
.390eed	da		phx						        PHX
.390eee	e2 20		sep #$20	                SEP #$20        ; set A short
.390ef0	c2 10		rep #$10	                REP #$10        ; set X long
.390ef2	18		clc		                CLC
.390ef3	20 a3 0f	jsr $390fa3	                JSR Poll_Inbuf ;
.390ef6	a9 aa		lda #$aa					        LDA #$AA			;Send self test command
.390ef8	8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.390efc	20 ae 0f	jsr $390fae	                JSR Poll_Outbuf ;
.390eff	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Check self test result
.390f03	c9 55		cmp #$55					        CMP #$55
.390f05	f0 03		beq $390f0a					        BEQ	passAAtest
.390f07	82 89 00	brl $390f93	                BRL initkb_loop_out
.390f0a					passAAtest
.390f0a	a9 ab		lda #$ab					        LDA #$AB			;Send test Interface command
.390f0c	8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.390f10	20 ae 0f	jsr $390fae	                JSR Poll_Outbuf ;
.390f13	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Display Interface test results
.390f17	c9 00		cmp #$00					        CMP #$00			;Should be 00
.390f19	f0 03		beq $390f1e					        BEQ	passABtest
.390f1b	82 75 00	brl $390f93	                BRL initkb_loop_out
.390f1e					passABtest
.390f1e	a9 60		lda #$60	                LDA #$60            ; Send Command 0x60 so to Enable Interrupt
.390f20	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390f24	20 a3 0f	jsr $390fa3	                JSR Poll_Inbuf ;
.390f27	a9 69		lda #$69	                LDA #%01101001      ; Enable Interrupt
.390f29	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.390f2d	20 a3 0f	jsr $390fa3	                JSR Poll_Inbuf ;
.390f30	a9 ff		lda #$ff	                LDA #$FF      ; Send Keyboard Reset command
.390f32	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.390f36	a2 ff ff	ldx #$ffff	                LDX #$FFFF
.390f39	ca		dex		DLY_LOOP1       DEX
.390f3a	ea		nop		                NOP
.390f3b	ea		nop		                NOP
.390f3c	ea		nop		                NOP
.390f3d	ea		nop		                NOP
.390f3e	ea		nop		                NOP
.390f3f	ea		nop		                NOP
.390f40	ea		nop		                NOP
.390f41	ea		nop		                NOP
.390f42	e0 00 00	cpx #$0000	                CPX #$0000
.390f45	d0 f2		bne $390f39	                BNE DLY_LOOP1
.390f47	20 ae 0f	jsr $390fae	                JSR Poll_Outbuf ;
.390f4a	af 60 10 af	lda $af1060	                LDA KBD_OUT_BUF   ; Read Output Buffer
.390f4e					DO_CMD_F4_AGAIN
.390f4e	20 a3 0f	jsr $390fa3	                JSR Poll_Inbuf ;
.390f51	a9 f4		lda #$f4					        LDA #$F4			; Enable the Keyboard
.390f53	8f 60 10 af	sta $af1060					        STA KBD_DATA_BUF
.390f57	20 ae 0f	jsr $390fae	                JSR Poll_Outbuf ;
.390f5a	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		; Clear the Output buffer
.390f5e	c9 fa		cmp #$fa	                CMP #$FA
.390f60	d0 ec		bne $390f4e	                BNE DO_CMD_F4_AGAIN
.390f62	20 b9 0f	jsr $390fb9	                JSR INIT_MOUSE
.390f65	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0  ; Read the Pending Register &
.390f69	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.390f6b	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0  ; Writing it back will clear the Active Bit
.390f6f	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1  ; Read the Pending Register &
.390f73	29 01		and #$01	                AND #FNX1_INT00_KBD
.390f75	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1  ; Writing it back will clear the Active Bit
.390f79	af 4d 01 00	lda $00014d	                LDA @lINT_MASK_REG1
.390f7d	29 fe		and #$fe	                AND #~FNX1_INT00_KBD
.390f7f	8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.390f83	af 4c 01 00	lda $00014c	                LDA @lINT_MASK_REG0
.390f87	29 7f		and #$7f	                AND #~FNX0_INT07_MOUSE
.390f89	8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.390f8d	a2 8b 17	ldx #$178b	                LDX #<>Success_kb_init
.390f90	38		sec		                SEC
.390f91	b0 03		bcs $390f96	                BCS InitSuccess
.390f93	a2 9d 17	ldx #$179d	initkb_loop_out LDX #<>Failed_kb_init
.390f96	22 2f 06 39	jsl $39062f	InitSuccess     JSL IPRINT       ; print Message
.390f9a	c2 20		rep #$20	                REP #$20        ; set A long
.390f9c	c2 10		rep #$10	                REP #$10        ; set X long
.390f9e	fa		plx		                PLX
.390f9f	68		pla		                PLA
.390fa0	28		plp						        PLP
.390fa1	2b		pld						        PLD
.390fa2	6b		rtl		                RTL
.390fa3					Poll_Inbuf
.390fa3	af 64 10 af	lda $af1064	                LDA STATUS_PORT		; Load Status Byte
.390fa7	29 02		and #$02					        AND	#<INPT_BUF_FULL	; Test bit $02 (if 0, Empty)
.390fa9	c9 02		cmp #$02					        CMP #<INPT_BUF_FULL
.390fab	f0 f6		beq $390fa3					        BEQ Poll_Inbuf
.390fad	60		rts		                RTS
.390fae					Poll_Outbuf
.390fae	af 64 10 af	lda $af1064	                LDA STATUS_PORT
.390fb2	29 01		and #$01	                AND #OUT_BUF_FULL ; Test bit $01 (if 1, Full)
.390fb4	c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.390fb6	d0 f6		bne $390fae	                BNE Poll_Outbuf
.390fb8	60		rts		                RTS
.390fb9					INIT_MOUSE
.390fb9	20 a3 0f	jsr $390fa3	                JSR Poll_Inbuf
.390fbc	a9 a8		lda #$a8	                LDA #$A8          ; Enable the second PS2 Channel
.390fbe	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390fc2					DO_CMD_A9_AGAIN
.390fc2	20 a3 0f	jsr $390fa3	                JSR Poll_Inbuf
.390fc5	a9 a9		lda #$a9	                LDA #$A9          ; Tests second PS2 Channel
.390fc7	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390fcb	20 ae 0f	jsr $390fae	                JSR Poll_Outbuf ;
.390fce	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		; Clear the Output buffer
.390fd2	c9 00		cmp #$00	                CMP #$00
.390fd4	d0 ec		bne $390fc2	                BNE DO_CMD_A9_AGAIN
.390fd6	20 a3 0f	jsr $390fa3	                JSR Poll_Inbuf
.390fd9	a9 20		lda #$20	                LDA #$20
.390fdb	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390fdf	20 ae 0f	jsr $390fae	                JSR Poll_Outbuf ;
.390fe2	af 60 10 af	lda $af1060	                LDA KBD_OUT_BUF
.390fe6	09 02		ora #$02	                ORA #$02
.390fe8	48		pha		                PHA
.390fe9	20 a3 0f	jsr $390fa3	                JSR Poll_Inbuf
.390fec	a9 60		lda #$60	                LDA #$60
.390fee	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390ff2	20 a3 0f	jsr $390fa3	                JSR Poll_Inbuf ;
.390ff5	68		pla		                PLA
.390ff6	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.390ffa	a9 f6		lda #$f6	                LDA #$F6        ;Tell the mouse to use default settings
.390ffc	20 1f 10	jsr $39101f	                JSR MOUSE_WRITE
.390fff	20 32 10	jsr $391032	                JSR MOUSE_READ
.391002	a9 e8		lda #$e8	                LDA #$E8
.391004	20 1f 10	jsr $39101f	                JSR MOUSE_WRITE
.391007	20 32 10	jsr $391032	                JSR MOUSE_READ
.39100a	a9 00		lda #$00	                LDA #$00
.39100c	20 1f 10	jsr $39101f	                JSR MOUSE_WRITE
.39100f	20 32 10	jsr $391032	                JSR MOUSE_READ
.391012	a9 f4		lda #$f4	                LDA #$F4        ; Enable the Mouse
.391014	20 1f 10	jsr $39101f	                JSR MOUSE_WRITE
.391017	20 32 10	jsr $391032	                JSR MOUSE_READ
.39101a	a9 00		lda #$00	                LDA #$00
.39101c	85 e0		sta $e0		                STA MOUSE_PTR
.39101e	60		rts		                RTS
.39101f					MOUSE_WRITE
.39101f	48		pha		                PHA
.391020	20 a3 0f	jsr $390fa3	                JSR Poll_Inbuf
.391023	a9 d4		lda #$d4	                LDA #$D4
.391025	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.391029	20 a3 0f	jsr $390fa3	                JSR Poll_Inbuf
.39102c	68		pla		                PLA
.39102d	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.391031	60		rts		                RTS
.391032					MOUSE_READ
.391032	20 ae 0f	jsr $390fae	                JSR Poll_Outbuf ;
.391035	af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF
.391039	60		rts		                RTS
.39103a	48		pha		INITRTC         PHA
.39103b	e2 20		sep #$20	                SEP #$20        ; set A short
.39103d	af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL
.391041	00		brk #		                BRK
.391042	c2 20		rep #$20	                REP #$20        ; set A long
.391044	68		pla		                PLA
.391045	6b		rtl		                RTL
.391046					ITESTSID
.391046	a9 0f 00	lda #$000f	                LDA #$0F
.391049	8f 18 e4 af	sta $afe418	                STA SID0_MODE_VOL
.39104d	a9 be 00	lda #$00be	                LDA #$BE
.391050	8f 05 e4 af	sta $afe405	                STA SID0_V1_ATCK_DECY
.391054	a9 f8 00	lda #$00f8	                LDA #$F8
.391057	8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.39105b	a9 11 00	lda #$0011	                LDA #$11
.39105e	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.391062	a9 25 00	lda #$0025	                LDA #$25
.391065	8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.391069	a9 11 00	lda #$0011	                LDA #$11
.39106c	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL
.391070	a9 08 00	lda #$0008	                LDA #$08
.391073	8f 03 e4 af	sta $afe403	                STA SID0_V1_PW_HI   ;G1
.391077	a9 00 00	lda #$0000	                LDA #$00
.39107a	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.39107e	a9 c6 00	lda #$00c6	                LDA #$C6
.391081	8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.391085	a9 08 00	lda #$0008	                LDA #$08
.391088	8f 0a e4 af	sta $afe40a	                STA SID0_V2_PW_HI   ;G1
.39108c	a9 00 00	lda #$0000	                LDA #$00
.39108f	8f 08 e4 af	sta $afe408	                STA SID0_V2_FREQ_HI
.391093	a9 08 00	lda #$0008	                LDA #$08
.391096	8f 0c e4 af	sta $afe40c	                STA SID0_V2_ATCK_DECY
.39109a	a9 c6 00	lda #$00c6	                LDA #$C6
.39109d	8f 0d e4 af	sta $afe40d	                STA SID0_V2_SSTN_RLSE
.3910a1	a9 08 00	lda #$0008	                LDA #$08
.3910a4	8f 11 e4 af	sta $afe411	                STA SID0_V3_PW_HI   ;G1
.3910a8	a9 00 00	lda #$0000	                LDA #$00
.3910ab	8f 0f e4 af	sta $afe40f	                STA SID0_V3_FREQ_HI
.3910af	a9 08 00	lda #$0008	                LDA #$08
.3910b2	8f 13 e4 af	sta $afe413	                STA SID0_V3_ATCK_DECY
.3910b6	a9 c6 00	lda #$00c6	                LDA #$C6
.3910b9	8f 14 e4 af	sta $afe414	                STA SID0_V3_SSTN_RLSE
.3910bd	a9 36 00	lda #$0036	                LDA #$36              ;Left Side (Rev A of Board)
.3910c0	8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.3910c4	a9 01 00	lda #$0001	                LDA #$01
.3910c7	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI   ;G1
.3910cb	a9 00 00	lda #$0000	                LDA #$00              ;Left Side (Rev A of Board)
.3910ce	8f 02 e4 af	sta $afe402	                STA SID0_V1_PW_LO
.3910d2	a9 08 00	lda #$0008	                LDA #$08
.3910d5	8f 03 e4 af	sta $afe403	                STA SID0_V1_PW_HI   ;G1
.3910d9	a9 08 00	lda #$0008	                LDA #$08
.3910dc	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL    ; Reset
.3910e0	a9 0c 00	lda #$000c	                LDA #$0C
.3910e3	8f 07 e4 af	sta $afe407	                STA SID0_V2_FREQ_LO
.3910e7	a9 04 00	lda #$0004	                LDA #$04
.3910ea	8f 08 e4 af	sta $afe408	                STA SID0_V2_FREQ_HI   ;B1
.3910ee	a9 00 00	lda #$0000	                LDA #$00              ;Left Side (Rev A of Board)
.3910f1	8f 09 e4 af	sta $afe409	                STA SID0_V2_PW_LO
.3910f5	a9 08 00	lda #$0008	                LDA #$08
.3910f8	8f 0a e4 af	sta $afe40a	                STA SID0_V2_PW_HI   ;G1
.3910fc	a9 08 00	lda #$0008	                LDA #$08
.3910ff	8f 0b e4 af	sta $afe40b	                STA SID0_V2_CTRL    ; Reset
.391103	a9 00 00	lda #$0000	                LDA #$00
.391106	8f 0e e4 af	sta $afe40e	                STA SID0_V3_FREQ_LO
.39110a	a9 08 00	lda #$0008	                LDA #$08
.39110d	8f 0f e4 af	sta $afe40f	                STA SID0_V3_FREQ_HI   ;D
.391111	a9 00 00	lda #$0000	                LDA #$00              ;Left Side (Rev A of Board)
.391114	8f 10 e4 af	sta $afe410	                STA SID0_V3_PW_LO
.391118	a9 08 00	lda #$0008	                LDA #$08
.39111b	8f 11 e4 af	sta $afe411	                STA SID0_V3_PW_HI   ;G1
.39111f	a9 08 00	lda #$0008	                LDA #$08
.391122	8f 12 e4 af	sta $afe412	                STA SID0_V3_CTRL    ; Reset
.391126	a9 10 00	lda #$0010	                LDA #$10
.391129	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL    ; Triangle
.39112d	8f 0b e4 af	sta $afe40b	                STA SID0_V2_CTRL    ; Triangle
.391131	8f 12 e4 af	sta $afe412	                STA SID0_V3_CTRL    ; Triangle
.391135	6b		rtl		                RTL
.391136	48		pha		IINITCODEC      PHA
.391137	c2 20		rep #$20	                REP #$20        ; set A long
.391139	a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R13 - Turn On Headphones
.39113c	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391140	a9 01 00	lda #$0001	                LDA #$0001
.391143	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391147	20 c6 11	jsr $3911c6	                JSR CODEC_TRF_FINISHED
.39114a	a9 0f 2a	lda #$2a0f	                LDA #%0010101000001111       ;R21 - Enable All the Analog In
.39114d	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391151	a9 01 00	lda #$0001	                LDA #$0001
.391154	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391158	20 c6 11	jsr $3911c6	                JSR CODEC_TRF_FINISHED
.39115b	a9 01 23	lda #$2301	                LDA #%0010001100000001      ;R17 - Enable All the Analog In
.39115e	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391162	a9 01 00	lda #$0001	                LDA #$0001
.391165	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391169	20 c6 11	jsr $3911c6	                JSR CODEC_TRF_FINISHED
.39116c	a9 07 2c	lda #$2c07	                LDA #%0010110000000111      ;R22 - Enable all Analog Out
.39116f	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391173	a9 01 00	lda #$0001	                LDA #$0001
.391176	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.39117a	20 c6 11	jsr $3911c6	                JSR CODEC_TRF_FINISHED
.39117d	a9 02 14	lda #$1402	                LDA #%0001010000000010      ;R10 - DAC Interface Control
.391180	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391184	a9 01 00	lda #$0001	                LDA #$0001
.391187	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.39118b	20 c6 11	jsr $3911c6	                JSR CODEC_TRF_FINISHED
.39118e	a9 02 16	lda #$1602	                LDA #%0001011000000010      ;R11 - ADC Interface Control
.391191	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391195	a9 01 00	lda #$0001	                LDA #$0001
.391198	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.39119c	20 c6 11	jsr $3911c6	                JSR CODEC_TRF_FINISHED
.39119f	a9 d5 19	lda #$19d5	                LDA #%0001100111010101      ;R12 - Master Mode Control
.3911a2	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.3911a6	a9 01 00	lda #$0001	                LDA #$0001
.3911a9	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.3911ad	20 c6 11	jsr $3911c6	                JSR CODEC_TRF_FINISHED
.3911b0	68		pla		                PLA
.3911b1	6b		rtl		                RTL
.3911b2					IRESETCODEC
.3911b2	c2 20		rep #$20	                REP #$20        ; set A long
.3911b4	a9 00 2e	lda #$2e00	                LDA #$2E00      ;R22 - Enable all Analog Out
.3911b7	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.3911bb	a9 01 00	lda #$0001	                LDA #$0001
.3911be	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.3911c2	20 c6 11	jsr $3911c6	                JSR CODEC_TRF_FINISHED
.3911c5	6b		rtl		                RTL
.3911c6					CODEC_TRF_FINISHED
.3911c6	e2 20		sep #$20	                SEP #$20        ; set A short
.3911c8	af 02 e9 af	lda $afe902	CODEC_LOOP      LDA CODEC_WR_CTRL
.3911cc	29 01		and #$01	                AND #$01
.3911ce	c9 01		cmp #$01	                CMP #$01
.3911d0	f0 f6		beq $3911c8	                BEQ CODEC_LOOP
.3911d2	c2 20		rep #$20	                REP #$20        ; set A long
.3911d4	60		rts		                RTS
.3911d5					IBM_FILL_SCREEN
.3911d5	c2 30		rep #$30	                REP #$30        ; set A&X long
.3911d7	a9 00 00	lda #$0000	                LDA #$0000
.3911da	a2 00 00	ldx #$0000	                LDX #$0000
.3911dd					BM_FILL_SCREEN_LOOPY
.3911dd	a0 00 00	ldy #$0000	                LDY #$0000
.3911e0	e2 20		sep #$20	                SEP #$20        ; set A short
.3911e2					BM_FILL_SCREEN_LOOPX
.3911e2	97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.3911e4	c8		iny		                INY
.3911e5	c4 40		cpy $40		                CPY BM_CLEAR_SCRN_X              ; Transfer the First line
.3911e7	d0 f9		bne $3911e2	                BNE BM_FILL_SCREEN_LOOPX
.3911e9	20 f4 11	jsr $3911f4	                JSR BM_FILL_COMPUTE_Y_DST
.3911ec	e8		inx		                INX
.3911ed	e4 42		cpx $42		                CPX BM_CLEAR_SCRN_Y
.3911ef	d0 ec		bne $3911dd	                BNE BM_FILL_SCREEN_LOOPY
.3911f1	c2 30		rep #$30	                REP #$30        ; set A&X long
.3911f3	6b		rtl		                RTL
.3911f4					BM_FILL_COMPUTE_Y_DST
.3911f4	c2 20		rep #$20	                REP #$20        ; set A long
.3911f6	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR        ; Right now it is set @ $020000 (128K) + File Size
.3911f8	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3911fc	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2      ; Right now it is set @ $020000 (128K)
.3911fe	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.391202	a9 80 02	lda #$0280	                LDA #$280        ; Right now it is set @ $020000 (128K) + File Size
.391205	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.391209	a9 00 00	lda #$0000	                LDA #$0000
.39120c	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.391210	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.391214	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.391216	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.39121a	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.39121c	a9 00 00	lda #$0000	                LDA #$0000
.39121f	60		rts		                RTS
.391220					IBMP_PARSER
.391220	c2 30		rep #$30	                REP #$30        ; set A&X long
.391222	a0 00 00	ldy #$0000	                LDY #$0000
.391225	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y
.391227	c9 42 4d	cmp #$4d42	                CMP #$4D42
.39122a	f0 03		beq $39122f	                BEQ IBMP_PARSER_CONT
.39122c	82 04 01	brl $391333	                BRL BMP_PARSER_END_WITH_ERROR
.39122f					IBMP_PARSER_CONT
.39122f	a0 02 00	ldy #$0002	                LDY #$0002
.391232	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size Low Short
.391234	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.391238	a0 04 00	ldy #$0004	                LDY #$0004
.39123b	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size High Short
.39123d	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.391241	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Store -1 in Adder (B)
.391244	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.391248	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.39124c	18		clc		                CLC
.39124d	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.391251	85 50		sta $50		                STA BMP_FILE_SIZE
.391253	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.391257	85 52		sta $52		                STA BMP_FILE_SIZE+2
.391259	a0 12 00	ldy #$0012	                LDY #$0012
.39125c	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.39125e	85 40		sta $40		                STA BMP_X_SIZE
.391260	a0 16 00	ldy #$0016	                LDY #$0016
.391263	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.391265	85 42		sta $42		                STA BMP_Y_SIZE
.391267	a0 2e 00	ldy #$002e	                LDY #$002E
.39126a	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.39126c	0a		asl a		                ASL A; Multiply by 2
.39126d	0a		asl a		                ASL A; Multiply by 2
.39126e	85 4c		sta $4c		                STA BMP_COLOR_PALET         ;
.391270	e0 00 00	cpx #$0000	                CPX #$0000
.391273	d0 05		bne $39127a	                BNE BMP_LUT1_PICK
.391275	20 3b 13	jsr $39133b	                JSR BMP_PARSER_UPDATE_LUT0   ; Go Upload the LUT0
.391278	80 08		bra $391282	                BRA DONE_TRANSFER_LUT;
.39127a					  BMP_LUT1_PICK
.39127a	e0 01 00	cpx #$0001	                CPX #$0001
.39127d	d0 03		bne $391282	                BNE BMP_LUT2_PICK
.39127f	20 6b 13	jsr $39136b	                JSR BMP_PARSER_UPDATE_LUT1   ; Go Upload the LUT1
.391282					  BMP_LUT2_PICK
.391282					  DONE_TRANSFER_LUT
.391282	a5 56		lda $56		                LDA BMP_POSITION_Y
.391284	8f 00 01 00	sta $000100	                STA @lM0_OPERAND_A
.391288	a5 4e		lda $4e		                LDA SCRN_X_STRIDE
.39128a	8f 02 01 00	sta $000102	                STA @lM0_OPERAND_B
.39128e	af 04 01 00	lda $000104	                LDA @lM0_RESULT
.391292	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.391296	af 06 01 00	lda $000106	                LDA @lM0_RESULT+2
.39129a	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.39129e	a5 54		lda $54		                LDA BMP_POSITION_X
.3912a0	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Put the X Position Adder (B)
.3912a4	a9 00 00	lda #$0000	                LDA #$0000
.3912a7	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.3912ab	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in TEMP
.3912af	85 f0		sta $f0		                STA USER_TEMP
.3912b1	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in TEMP
.3912b5	85 f2		sta $f2		                STA USER_TEMP+2
.3912b7	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.3912b9	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.3912bd	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.3912bf	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.3912c3	a5 f0		lda $f0		                LDA USER_TEMP
.3912c5	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store in 32Bit Adder (B)
.3912c9	a5 f2		lda $f2		                LDA USER_TEMP+2
.3912cb	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in 32Bit Adder (B)
.3912cf	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in BMP_PRSE_DST_PTR
.3912d3	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.3912d5	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in BMP_PRSE_DST_PTR
.3912d9	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.3912db	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K)
.3912dd	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3912e1	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2        ; Right now it is set @ $020000 (128K)
.3912e3	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.3912e7	a5 50		lda $50		                LDA BMP_FILE_SIZE
.3912e9	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.3912ed	a5 52		lda $52		                LDA BMP_FILE_SIZE+2
.3912ef	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.3912f3	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.3912f7	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.3912f9	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.3912fd	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.3912ff	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.391301	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.391305	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.391307	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.39130b	18		clc		                CLC
.39130c	a5 40		lda $40		                LDA BMP_X_SIZE              ; Load The Size in X of the image and Make it negative
.39130e	49 ff ff	eor #$ffff	                EOR #$FFFF                  ; Inverse all bit
.391311	69 01 00	adc #$0001	                ADC #$0001                  ; Add 0 ()
.391314	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store the Results in reg B of ADDER32
.391318	a9 ff ff	lda #$ffff	                LDA #$FFFF
.39131b	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in the Reminder of the 32Bits B Register
.39131f	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.391323	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.391325	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.391329	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.39132b	20 9b 13	jsr $39139b	                JSR BMP_PARSER_DMA_SHIT_OUT  ; We are going to start with the slow method
.39132e	a2 d9 17	ldx #$17d9	                LDX #<>bmp_parser_msg0
.391331	80 03		bra $391336	                BRA BMP_PARSER_END_NO_ERROR
.391333					BMP_PARSER_END_WITH_ERROR
.391333	a2 c5 17	ldx #$17c5	                LDX #<>bmp_parser_err0
.391336					BMP_PARSER_END_NO_ERROR
.391336	22 2f 06 39	jsl $39062f	                JSL IPRINT       ; print the first line
.39133a	6b		rtl		                RTL
.39133b					BMP_PARSER_UPDATE_LUT0
.39133b	38		sec		                SEC
.39133c	a0 7a 00	ldy #$007a	                LDY #$007A
.39133f	a2 00 00	ldx #$0000	                LDX #$0000
.391342	e2 20		sep #$20	                SEP #$20        ; set A short
.391344					BMP_PARSER_UPDATE_LOOP
.391344	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.391346	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR+0, X      ; The look-up Table point to a pixel Blue
.39134a	c8		iny		                INY
.39134b	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.39134d	9f 01 20 af	sta $af2001,x	                STA @lGRPH_LUT0_PTR+1, X      ; The look-up Table point to a pixel Blue
.391351	c8		iny		                INY
.391352	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.391354	9f 02 20 af	sta $af2002,x	                STA @lGRPH_LUT0_PTR+2, X      ; The look-up Table point to a pixel Blue
.391358	c8		iny		                INY
.391359	a9 80		lda #$80	                LDA #$80
.39135b	9f 03 20 af	sta $af2003,x	                STA @lGRPH_LUT0_PTR+3, X      ; The look-up Table point to a pixel Blue
.39135f	c8		iny		                INY ; For the Alpha Value, nobody cares
.391360	e8		inx		                INX
.391361	e8		inx		                INX
.391362	e8		inx		                INX
.391363	e8		inx		                INX
.391364	e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.391366	d0 dc		bne $391344	                BNE BMP_PARSER_UPDATE_LOOP
.391368	c2 20		rep #$20	                REP #$20        ; set A long
.39136a	60		rts		                RTS
.39136b					BMP_PARSER_UPDATE_LUT1
.39136b	38		sec		                SEC
.39136c	a0 36 00	ldy #$0036	                LDY #$0036
.39136f	a2 00 00	ldx #$0000	                LDX #$0000
.391372	e2 20		sep #$20	                SEP #$20        ; set A short
.391374					PALETTE_LUT1_LOOP
.391374	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.391376	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR+0, X      ; The look-up Table point to a pixel Blue
.39137a	c8		iny		                INY
.39137b	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.39137d	9f 01 24 af	sta $af2401,x	                STA @lGRPH_LUT1_PTR+1, X      ; The look-up Table point to a pixel Blue
.391381	c8		iny		                INY
.391382	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.391384	9f 02 24 af	sta $af2402,x	                STA @lGRPH_LUT1_PTR+2, X      ; The look-up Table point to a pixel Blue
.391388	c8		iny		                INY
.391389	a9 80		lda #$80	                LDA #$80
.39138b	9f 03 24 af	sta $af2403,x	                STA @lGRPH_LUT1_PTR+3, X      ; The look-up Table point to a pixel Blue
.39138f	c8		iny		                INY ; For the Alpha Value, nobody cares
.391390	e8		inx		                INX
.391391	e8		inx		                INX
.391392	e8		inx		                INX
.391393	e8		inx		                INX
.391394	e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.391396	d0 dc		bne $391374	                BNE PALETTE_LUT1_LOOP
.391398	c2 20		rep #$20	                REP #$20        ; set A long
.39139a	60		rts		                RTS
.39139b					BMP_PARSER_DMA_SHIT_OUT
.39139b	a2 00 00	ldx #$0000	                LDX #$0000
.39139e					BMP_PARSER_LOOPY
.39139e	a0 00 00	ldy #$0000	                LDY #$0000
.3913a1	e2 20		sep #$20	                SEP #$20        ; set A short
.3913a3					BMP_PARSER_LOOPX
.3913a3	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Load First Pixel Y (will be linear)
.3913a5	97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.3913a7	c8		iny		                INY
.3913a8	c4 40		cpy $40		                CPY BMP_X_SIZE              ; Transfer the First line
.3913aa	d0 f7		bne $3913a3	                BNE BMP_PARSER_LOOPX
.3913ac	20 b8 13	jsr $3913b8	                JSR BMP_PARSER_COMPUTE_Y_SRC
.3913af	20 d3 13	jsr $3913d3	                JSR BMP_PARSER_COMPUTE_Y_DST
.3913b2	e8		inx		                INX
.3913b3	e4 42		cpx $42		                CPX BMP_Y_SIZE
.3913b5	d0 e7		bne $39139e	                BNE BMP_PARSER_LOOPY
.3913b7	60		rts		                RTS
.3913b8					BMP_PARSER_COMPUTE_Y_SRC
.3913b8	c2 20		rep #$20	                REP #$20        ; set A long
.3913ba	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.3913bc	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3913c0	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.3913c2	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.3913c6	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.3913ca	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.3913cc	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.3913d0	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.3913d2	60		rts		                RTS
.3913d3					BMP_PARSER_COMPUTE_Y_DST
.3913d3	c2 20		rep #$20	                REP #$20        ; set A long
.3913d5	18		clc		                CLC
.3913d6	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.3913d8	65 4e		adc $4e		                ADC SCRN_X_STRIDE        ; In Normal Circumstances, it is 640
.3913da	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.3913dc	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.3913de	69 00 00	adc #$0000	                ADC #$0000
.3913e1	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.3913e3	60		rts		                RTS
.3913e4	ea		nop		ILOOP           NOP
.3913e5	ea		nop		                NOP
.3913e6	ea		nop		                NOP
.3913e7	ea		nop		                NOP
.3913e8	ea		nop		                NOP
.3913e9	ea		nop		                NOP
.3913ea	ea		nop		                NOP
.3913eb	ea		nop		                NOP
.3913ec	ea		nop		                NOP
.3913ed	ea		nop		                NOP
.3913ee	6b		rtl		                RTL
.3913ef	22 e4 13 39	jsl $3913e4	ILOOP_1         JSL ILOOP
.3913f3	22 e4 13 39	jsl $3913e4	                JSL ILOOP
.3913f7	22 e4 13 39	jsl $3913e4	                JSL ILOOP
.3913fb	22 e4 13 39	jsl $3913e4	                JSL ILOOP
.3913ff	22 e4 13 39	jsl $3913e4	                JSL ILOOP
.391403	22 e4 13 39	jsl $3913e4	                JSL ILOOP
.391407	22 e4 13 39	jsl $3913e4	                JSL ILOOP
.39140b	22 e4 13 39	jsl $3913e4	                JSL ILOOP
.39140f	22 e4 13 39	jsl $3913e4	                JSL ILOOP
.391413	22 e4 13 39	jsl $3913e4	                JSL ILOOP
.391417	6b		rtl		                RTL
.391418	22 ef 13 39	jsl $3913ef	ILOOP_1MS       JSL ILOOP_1
.39141c	6b		rtl		                RTL
.39141d	e0 00 00	cpx #$0000	ILOOP_MS        CPX #0
.391420	f0 07		beq $391429	                BEQ LOOP_MS_END
.391422	22 18 14 39	jsl $391418	                JSL ILOOP_1MS
.391426	ca		dex		                DEX
.391427	80 f4		bra $39141d	                BRA ILOOP_MS
.391429	6b		rtl		LOOP_MS_END     RTL
.39142a					SHOW_CREDITS
.39142a	48		pha		                PHA
.39142b	da		phx		                PHX
.39142c	5a		phy		                PHY
.39142d	08		php		                PHP
.39142e	e2 20		sep #$20	                SEP #$20        ; set A short
.391430	c2 10		rep #$10	                REP #$10        ; set X long
.391432	af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Disable the cursor
.391436	29 fe		and #$fe	                AND #~Vky_Cursor_Enable
.391438	8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.39143c	a2 00 00	ldx #$0000	                LDX #0
.39143f	bf 00 00 3b	lda $3b0000,x	credit_loop     LDA @lCREDITS_TEXT,X            ; Copy a byte of text
.391443	9f 00 a0 af	sta $afa000,x	                STA @lCS_TEXT_MEM_PTR,X
.391447	bf 00 20 3b	lda $3b2000,x	                LDA @lCREDITS_COLOR,X           ; Copy a byte of color
.39144b	9f 00 c0 af	sta $afc000,x	                STA @lCS_COLOR_MEM_PTR,X
.39144f	e8		inx		                INX
.391450	e0 00 20	cpx #$2000	                CPX #128 * 64
.391453	d0 ea		bne $39143f	                BNE credit_loop
.391455	22 08 06 39	jsl $390608	                JSL IGETCHW                     ; Wait for a keypress
.391459	22 5f 09 39	jsl $39095f	                JSL ICLRSCREEN                  ; Then clear the screen and return
.39145d	22 aa 07 39	jsl $3907aa	                JSL ICSRHOME                    ; Move cursor to the home position
.391461	af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Enable the cursor
.391465	09 01		ora #$01	                ORA #Vky_Cursor_Enable
.391467	8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.39146b	28		plp		                PLP
.39146c	7a		ply		                PLY
.39146d	fa		plx		                PLX
.39146e	68		pla		                PLA
.39146f	6b		rtl		                RTL
.391470	00		brk #		IRESTORE        BRK ; Warm boot routine
.391471	00		brk #		ISCINIT         BRK ;
.391472	00		brk #		IIOINIT         BRK ;
.391473	00		brk #		IPUTBLOCK       BRK ; Ouput a binary block to the currently selected channel
.391474	00		brk #		ISETLFS         BRK ; Obsolete (done in OPEN)
.391475	00		brk #		ISETNAM         BRK ; Obsolete (done in OPEN)
.391476	00		brk #		IOPEN           BRK ; Open a channel for reading and/or writing. Use SETLFS and SETNAM to set the channels and filename first.
.391477	00		brk #		ICLOSE          BRK ; Close a channel
.391478	00		brk #		IGETB           BRK ; Get a byte from input channel. Return 0 if no input. Carry is set if no input.
.391479	00		brk #		IGETBLOCK       BRK ; Get a X byes from input channel. If Carry is set, wait. If Carry is clear, do not wait.
.39147a	00		brk #		IGETCH          BRK ; Get a character from the input channel. A=0 and Carry=1 if no data is wating
.39147b	00		brk #		IGETS           BRK ; Get a string from the input channel. NULL terminates
.39147c	00		brk #		IGETLINE        BRK ; Get a line of text from input channel. CR or NULL terminates.
.39147d	00		brk #		IGETFIELD       BRK ; Get a field from the input channel. Value in A, CR, or NULL terminates
.39147e	00		brk #		ITRIM           BRK ; Removes spaces at beginning and end of string.
.39147f	00		brk #		IPRINTC         BRK ; Print character to screen. Handles terminal commands
.391480	00		brk #		IPRINTS         BRK ; Print string to screen. Handles terminal commands
.391481	00		brk #		IPRINTF         BRK ; Print a float value
.391482	00		brk #		IPRINTI         BRK ; Prints integer value in TEMP
.391483	00		brk #		IPRINTAI        BRK ; Prints integer value in A
.391484	00		brk #		IPUSHKEY        BRK ;
.391485	00		brk #		IPUSHKEYS       BRK ;
.391486	00		brk #		ISCRREADLINE    BRK ; Loads the MCMDADDR/BCMDADDR variable with the address of the current line on the screen. This is called when the RETURN key is pressed and is the first step in processing an immediate mode command.
.391487	00		brk #		ISCRGETWORD     BRK ; Read a current word on the screen. A word ends with a space, punctuation (except _), or any control character (value < 32). Loads the address into CMPTEXT_VAL and length into CMPTEXT_LEN variables.
.391488					KERNEL_DATA
>391488	20 20 20 20 0b 0c 0b 0c		greet_msg       .text $20, $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, " FFFFFFF MMMMMMMM XX    XXX " ,$0D
>391490	0b 0c 0b 0c 0b 0c 20 46 46 46 46 46 46 46 20 4d
>3914a0	4d 4d 4d 4d 4d 4d 4d 20 58 58 20 20 20 20 58 58
>3914b0	58 20 0d
>3914b3	20 20 20 0b 0c 0b 0c 0b		                .text $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM   XX XXX   ",$0D
>3914bb	0c 0b 0c 0b 0c 20 46 46 20 20 20 20 20 20 4d 4d
>3914cb	20 4d 4d 20 4d 4d 20 20 20 58 58 20 58 58 58 20
>3914db	20 20 0d
>3914de	20 20 0b 0c 0b 0c 0b 0c		                .text $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FFFFF   MM MM MM    XXX      ",$0D
>3914e6	0b 0c 0b 0c 20 46 46 46 46 46 20 20 20 4d 4d 20
>3914f6	4d 4d 20 4d 4d 20 20 20 20 58 58 58 20 20 20 20
>391506	20 20 0d
>391509	20 0b 0c 0b 0c 0b 0c 0b		                .text $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM  XXX  XX     ",$0D
>391511	0c 0b 0c 20 46 46 20 20 20 20 20 20 4d 4d 20 4d
>391521	4d 20 4d 4d 20 20 58 58 58 20 20 58 58 20 20 20
>391531	20 20 0d
>391534	0b 0c 0b 0c 0b 0c 0b 0c		                .text $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM XXX     XX    ",$0D
>39153c	0b 0c 20 46 46 20 20 20 20 20 20 4d 4d 20 4d 4d
>39154c	20 4d 4d 20 58 58 58 20 20 20 20 20 58 58 20 20
>39155c	20 20 0d
>39155f	0d 43 32 35 36 20 46 4f		                .text $0D, "C256 FOENIX FMX -- 3,670,016 Bytes Free", $0D
>391567	45 4e 49 58 20 46 4d 58 20 2d 2d 20 33 2c 36 37
>391577	30 2c 30 31 36 20 42 79 74 65 73 20 46 72 65 65
>391587	0d
>391588	77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com - Kernel Date: "
>391590	66 6f 65 6e 69 78 2e 63 6f 6d 20 2d 20 4b 65 72
>3915a0	6e 65 6c 20 44 61 74 65 3a 20

;******  Processing file: src\version.asm

>3915aa	46 65 62 72 75 61 72 79		.text "February 18, 2020"
>3915b2	20 31 38 2c 20 32 30 32 30

;******  Return to file: src\kernel.asm

>3915bb	0d 00				                .text $0D,$00
.3915bd					old_pc_style_stat
>3915bd	1d 1d 1d 1d 1d 1d 8d 8d		greet_clr_line1 .text $1D, $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>3915c5	4d 4d 2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd
>3915d5	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3915e5	fd fd
>3915e7	1d 1d 1d 1d 1d 8d 8d 4d		greet_clr_line2 .text $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>3915ef	4d 2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd
>3915ff	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>39160f	fd fd
>391611	1d 1d 1d 1d 8d 8d 4d 4d		greet_clr_line3 .text $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>391619	2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd fd
>391629	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>391639	fd fd
>39163b	1d 1d 1d 8d 8d 4d 4d 2d		greet_clr_line4 .text $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>391643	2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd fd fd
>391653	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>391663	fd fd
>391665	1d 1d 8d 8d 4d 4d 2d 2d		greet_clr_line5 .text $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>39166d	5d 5d fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>39167d	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>39168d	fd fd
>39168f	00 00 00 ff			fg_color_lut	  .text $00, $00, $00, $FF
>391693	00 00 80 ff			                .text $00, $00, $80, $FF
>391697	00 80 00 ff			                .text $00, $80, $00, $FF
>39169b	80 00 00 ff			                .text $80, $00, $00, $FF
>39169f	00 80 80 ff			                .text $00, $80, $80, $FF
>3916a3	80 80 00 ff			                .text $80, $80, $00, $FF
>3916a7	80 00 80 ff			                .text $80, $00, $80, $FF
>3916ab	80 80 80 ff			                .text $80, $80, $80, $FF
>3916af	00 45 ff ff			                .text $00, $45, $FF, $FF
>3916b3	13 45 8b ff			                .text $13, $45, $8B, $FF
>3916b7	00 00 20 ff			                .text $00, $00, $20, $FF
>3916bb	00 20 00 ff			                .text $00, $20, $00, $FF
>3916bf	20 00 00 ff			                .text $20, $00, $00, $FF
>3916c3	20 20 20 ff			                .text $20, $20, $20, $FF
>3916c7	40 40 40 ff			                .text $40, $40, $40, $FF
>3916cb	ff ff ff ff			                .text $FF, $FF, $FF, $FF
>3916cf	00 00 00 ff			bg_color_lut	  .text $00, $00, $00, $FF
>3916d3	00 00 80 ff			                .text $00, $00, $80, $FF
>3916d7	00 80 00 ff			                .text $00, $80, $00, $FF
>3916db	80 00 00 ff			                .text $80, $00, $00, $FF
>3916df	00 20 20 ff			                .text $00, $20, $20, $FF
>3916e3	20 20 00 ff			                .text $20, $20, $00, $FF
>3916e7	20 00 20 ff			                .text $20, $00, $20, $FF
>3916eb	20 20 20 ff			                .text $20, $20, $20, $FF
>3916ef	1e 69 d2 ff			                .text $1E, $69, $D2, $FF
>3916f3	13 45 8b ff			                .text $13, $45, $8B, $FF
>3916f7	00 00 20 ff			                .text $00, $00, $20, $FF
>3916fb	00 20 00 ff			                .text $00, $20, $00, $FF
>3916ff	40 00 00 ff			                .text $40, $00, $00, $FF
>391703	10 10 10 ff			                .text $10, $10, $10, $FF
>391707	40 40 40 ff			                .text $40, $40, $40, $FF
>39170b	ff ff ff ff			                .text $FF, $FF, $FF, $FF
>39170f	43 6d 64 20 30 78 41 41		pass_tst0xAAmsg .text "Cmd 0xAA Test passed...", $0D, $00
>391717	20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>391727	00
>391728	43 6d 64 20 30 78 41 42		pass_tst0xABmsg .text "Cmd 0xAB Test passed...", $0D, $00
>391730	20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>391740	00
>391741	43 6d 64 20 30 78 36 30		pass_cmd0x60msg .text "Cmd 0x60 Executed.", $0D, $00
>391749	20 45 78 65 63 75 74 65 64 2e 0d 00
>391755	43 6d 64 20 30 78 46 46		pass_cmd0xFFmsg .text "Cmd 0xFF (Reset) Done.", $0D, $00
>39175d	20 28 52 65 73 65 74 29 20 44 6f 6e 65 2e 0d 00
>39176d	43 6d 64 20 30 78 45 45		pass_cmd0xEEmsg .text "Cmd 0xEE Echo Test passed...", $0D, $00
>391775	20 45 63 68 6f 20 54 65 73 74 20 70 61 73 73 65
>391785	64 2e 2e 2e 0d 00
>39178b	4b 65 79 62 6f 61 72 64		Success_kb_init .text "Keyboard Present", $0D, $00
>391793	20 50 72 65 73 65 6e 74 0d 00
>39179d	4e 6f 20 4b 65 79 62 6f		Failed_kb_init  .text "No Keyboard Attached or Failed Init...", $0D, $00
>3917a5	61 72 64 20 41 74 74 61 63 68 65 64 20 6f 72 20
>3917b5	46 61 69 6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>3917c5	4e 4f 20 53 49 47 4e 41		bmp_parser_err0 .text "NO SIGNATURE FOUND.", $00
>3917cd	54 55 52 45 20 46 4f 55 4e 44 2e 00
>3917d9	42 4d 50 20 4c 4f 41 44		bmp_parser_msg0 .text "BMP LOADED.", $00
>3917e1	45 44 2e 00
>3917e5	45 58 45 43 55 54 49 4e		bmp_parser_msg1 .text "EXECUTING BMP PARSER", $00
>3917ed	47 20 42 4d 50 20 50 41 52 53 45 52 00
>3917fa	49 44 45 20 48 44 44 20		IDE_HDD_Present_msg0 .text "IDE HDD Present:", $00
>391802	50 72 65 73 65 6e 74 3a 00
>39180b	42 6f 6f 74 20 44 49 50		boot_invalid    .text "Boot DIP switch settings are invalid", $00
>391813	20 73 77 69 74 63 68 20 73 65 74 74 69 6e 67 73
>391823	20 61 72 65 20 69 6e 76 61 6c 69 64 00
>391830	42 6f 6f 74 69 6e 67 20		sdcard_notimpl  .text "Booting from SD card is not yet implemented.", $00
>391838	66 72 6f 6d 20 53 44 20 63 61 72 64 20 69 73 20
>391848	6e 6f 74 20 79 65 74 20 69 6d 70 6c 65 6d 65 6e
>391858	74 65 64 2e 00
>39185d	42 6f 6f 74 69 6e 67 20		ide_notimpl     .text "Booting from IDE drive is not yet implemented.", $00
>391865	66 72 6f 6d 20 49 44 45 20 64 72 69 76 65 20 69
>391875	73 20 6e 6f 74 20 79 65 74 20 69 6d 70 6c 65 6d
>391885	65 6e 74 65 64 2e 00
>39188c	42 6f 6f 74 69 6e 67 20		floppy_notimpl  .text "Booting from floppy drive is not yet implemented.", $00
>391894	66 72 6f 6d 20 66 6c 6f 70 70 79 20 64 72 69 76
>3918a4	65 20 69 73 20 6e 6f 74 20 79 65 74 20 69 6d 70
>3918b4	6c 65 6d 65 6e 74 65 64 2e 00
>3918be	0d 52 45 41 44 59 2e 00		ready_msg       .null $0D,"READY."
>3918c6	41 42 4f 52 54 20 45 52		error_01        .null "ABORT ERROR"
>3918ce	52 4f 52 00
>3918d2	30 31 32 33 34 35 36 37		hex_digits      .text "0123456789ABCDEF",0
>3918da	38 39 41 42 43 44 45 46 00
>3918e3					.align 256
>391900	00 1b 31 32 33 34 35 36		ScanCode_Press_Set1   .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>391908	37 38 39 30 2d 3d 08 09
>391910	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>391918	6f 70 5b 5d 0d 00 61 73
>391920	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>391928	27 60 00 5c 7a 78 63 76
>391930	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>391938	00 20 00 00 00 00 00 00
>391940	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $11, $00, $00, $9D, $00, $1D, $00, $00    ; $40
>391948	11 00 00 9d 00 1d 00 00
>391950	91 00 00 00 00 00 00 00		                      .text $91, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>391958	00 00 00 00 00 00 00 00
>391960	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>391968	00 00 00 00 00 00 00 00
>391970	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>391978	00 00 00 00 00 00 00 00
>391980	00 00 21 40 23 24 25 5e		ScanCode_Shift_Set1   .text $00, $00, $21, $40, $23, $24, $25, $5E, $26, $2A, $28, $29, $5F, $2B, $08, $09    ; $00
>391988	26 2a 28 29 5f 2b 08 09
>391990	51 57 45 52 54 59 55 49		                      .text $51, $57, $45, $52, $54, $59, $55, $49, $4F, $50, $7B, $7D, $0D, $00, $41, $53    ; $10
>391998	4f 50 7b 7d 0d 00 41 53
>3919a0	44 46 47 48 4a 4b 4c 3a		                      .text $44, $46, $47, $48, $4A, $4B, $4C, $3A, $22, $7E, $00, $5C, $5A, $58, $43, $56    ; $20
>3919a8	22 7e 00 5c 5a 58 43 56
>3919b0	42 4e 4d 3c 3e 3f 00 18		                      .text $42, $4E, $4D, $3C, $3E, $3F, $00, $18, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>3919b8	00 20 00 00 00 00 00 00
>3919c0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>3919c8	00 00 00 00 00 00 00 00
>3919d0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3919d8	00 00 00 00 00 00 00 00
>3919e0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3919e8	00 00 00 00 00 00 00 00
>3919f0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3919f8	00 00 00 00 00 00 00 00
>391a00	00 1b 31 32 33 34 35 36		ScanCode_Ctrl_Set1    .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>391a08	37 38 39 30 2d 3d 08 09
>391a10	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>391a18	6f 70 5b 5d 0d 00 61 73
>391a20	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $03, $76    ; $20
>391a28	27 60 00 5c 7a 78 03 76
>391a30	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>391a38	00 20 00 00 00 00 00 00
>391a40	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>391a48	00 00 00 00 00 00 00 00
>391a50	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>391a58	00 00 00 00 00 00 00 00
>391a60	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>391a68	00 00 00 00 00 00 00 00
>391a70	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>391a78	00 00 00 00 00 00 00 00
>391a80	00 1b 31 32 33 34 35 36		ScanCode_Alt_Set1     .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>391a88	37 38 39 30 2d 3d 08 09
>391a90	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>391a98	6f 70 5b 5d 0d 00 61 73
>391aa0	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>391aa8	27 60 00 5c 7a 78 63 76
>391ab0	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>391ab8	00 20 00 00 00 00 00 00
>391ac0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>391ac8	00 00 00 00 00 00 00 00
>391ad0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>391ad8	00 00 00 00 00 00 00 00
>391ae0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>391ae8	00 00 00 00 00 00 00 00
>391af0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>391af8	00 00 00 00 00 00 00 00
>391b00	00 1b 31 32 33 34 35 36		ScanCode_NumLock_Set1 .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>391b08	37 38 39 30 2d 3d 08 09
>391b10	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>391b18	6f 70 5b 5d 0d 00 61 73
>391b20	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>391b28	27 60 00 5c 7a 78 63 76
>391b30	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>391b38	00 20 00 00 00 00 00 00
>391b40	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>391b48	00 00 00 00 00 00 00 00
>391b50	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>391b58	00 00 00 00 00 00 00 00
>391b60	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>391b68	00 00 00 00 00 00 00 00
>391b70	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>391b78	00 00 00 00 00 00 00 00
>391b80	00 00 00 00 00 00 00 00		ScanCode_Prefix_Set1  .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $00
>391b88	00 00 00 00 00 00 00 00
>391b90	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $10
>391b98	00 00 00 00 00 00 00 00
>391ba0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $20
>391ba8	00 00 00 00 00 00 00 00
>391bb0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $30
>391bb8	00 00 00 00 00 00 00 00
>391bc0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $11, $00, $00, $9D, $00, $1D, $00, $00    ; $40
>391bc8	11 00 00 9d 00 1d 00 00
>391bd0	91 00 0f 7f 00 00 00 00		                      .text $91, $00, $0F, $7F, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>391bd8	00 00 00 00 00 00 00 00
>391be0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>391be8	00 00 00 00 00 00 00 00
>391bf0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>391bf8	00 00 00 00 00 00 00 00
>391c00					.align 256
>391c00	00 14 1c 21 26 2a 2e 31		GAMMA_2_2_Tbl         .text  $00, $14, $1c, $21, $26, $2a, $2e, $31, $34, $37, $3a, $3d, $3f, $41, $44, $46
>391c08	34 37 3a 3d 3f 41 44 46
>391c10	48 4a 4c 4e 50 51 53 55		                      .text  $48, $4a, $4c, $4e, $50, $51, $53, $55, $57, $58, $5a, $5b, $5d, $5e, $60, $61
>391c18	57 58 5a 5b 5d 5e 60 61
>391c20	63 64 66 67 68 6a 6b 6c		                      .text  $63, $64, $66, $67, $68, $6a, $6b, $6c, $6d, $6f, $70, $71, $72, $73, $75, $76
>391c28	6d 6f 70 71 72 73 75 76
>391c30	77 78 79 7a 7b 7c 7d 7e		                      .text  $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $80, $81, $82, $83, $84, $85, $86, $87
>391c38	80 81 82 83 84 85 86 87
>391c40	88 88 89 8a 8b 8c 8d 8e		                      .text  $88, $88, $89, $8a, $8b, $8c, $8d, $8e, $8f, $90, $91, $92, $93, $93, $94, $95
>391c48	8f 90 91 92 93 93 94 95
>391c50	96 97 98 99 99 9a 9b 9c		                      .text  $96, $97, $98, $99, $99, $9a, $9b, $9c, $9d, $9e, $9e, $9f, $a0, $a1, $a2, $a2
>391c58	9d 9e 9e 9f a0 a1 a2 a2
>391c60	a3 a4 a5 a5 a6 a7 a8 a8		                      .text  $a3, $a4, $a5, $a5, $a6, $a7, $a8, $a8, $a9, $aa, $ab, $ab, $ac, $ad, $ae, $ae
>391c68	a9 aa ab ab ac ad ae ae
>391c70	af b0 b0 b1 b2 b2 b3 b4		                      .text  $AF, $b0, $b0, $b1, $b2, $b2, $b3, $b4, $b5, $b5, $b6, $b7, $b7, $b8, $b9, $b9
>391c78	b5 b5 b6 b7 b7 b8 b9 b9
>391c80	ba bb bb bc bd bd be be		                      .text  $ba, $bb, $bb, $bc, $bd, $bd, $be, $be, $bf, $c0, $c0, $c1, $c2, $c2, $c3, $c4
>391c88	bf c0 c0 c1 c2 c2 c3 c4
>391c90	c4 c5 c5 c6 c7 c7 c8 c8		                      .text  $c4, $c5, $c5, $c6, $c7, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cb, $cc, $cd, $cd
>391c98	c9 ca ca cb cb cc cd cd
>391ca0	ce ce cf d0 d0 d1 d1 d2		                      .text  $ce, $ce, $cf, $d0, $d0, $d1, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d5, $d6, $d6
>391ca8	d2 d3 d4 d4 d5 d5 d6 d6
>391cb0	d7 d8 d8 d9 d9 da da db		                      .text  $d7, $d8, $d8, $d9, $d9, $da, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $df
>391cb8	db dc dc dd de de df df
>391cc0	e0 e0 e1 e1 e2 e2 e3 e3		                      .text  $e0, $e0, $e1, $e1, $e2, $e2, $e3, $e3, $e4, $e4, $e5, $e5, $e6, $e6, $e7, $e7
>391cc8	e4 e4 e5 e5 e6 e6 e7 e7
>391cd0	e8 e8 e9 e9 ea ea eb eb		                      .text  $e8, $e8, $e9, $e9, $ea, $ea, $eb, $eb, $ec, $ec, $ed, $ed, $ee, $ee, $ef, $ef
>391cd8	ec ec ed ed ee ee ef ef
>391ce0	f0 f0 f1 f1 f2 f2 f3 f3		                      .text  $f0, $f0, $f1, $f1, $f2, $f2, $f3, $f3, $f4, $f4, $f5, $f5, $f6, $f6, $f7, $f7
>391ce8	f4 f4 f5 f5 f6 f6 f7 f7
>391cf0	f8 f8 f9 f9 f9 fa fa fb		                      .text  $f8, $f8, $f9, $f9, $f9, $fa, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $fe, $ff
>391cf8	fb fc fc fd fd fe fe ff
>391d00					.align 256
>391d00	00 0b 11 15 19 1c 1f 22		GAMMA_1_8_Tbl         .text  $00, $0b, $11, $15, $19, $1c, $1f, $22, $25, $27, $2a, $2c, $2e, $30, $32, $34
>391d08	25 27 2a 2c 2e 30 32 34
>391d10	36 38 3a 3c 3d 3f 41 43		                      .text  $36, $38, $3a, $3c, $3d, $3f, $41, $43, $44, $46, $47, $49, $4a, $4c, $4d, $4f
>391d18	44 46 47 49 4a 4c 4d 4f
>391d20	50 51 53 54 55 57 58 59		                      .text  $50, $51, $53, $54, $55, $57, $58, $59, $5b, $5c, $5d, $5e, $60, $61, $62, $63
>391d28	5b 5c 5d 5e 60 61 62 63
>391d30	64 65 67 68 69 6a 6b 6c		                      .text  $64, $65, $67, $68, $69, $6a, $6b, $6c, $6d, $6e, $70, $71, $72, $73, $74, $75
>391d38	6d 6e 70 71 72 73 74 75
>391d40	76 77 78 79 7a 7b 7c 7d		                      .text  $76, $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $7f, $80, $81, $82, $83, $84, $84
>391d48	7e 7f 80 81 82 83 84 84
>391d50	85 86 87 88 89 8a 8b 8c		                      .text  $85, $86, $87, $88, $89, $8a, $8b, $8c, $8d, $8e, $8e, $8f, $90, $91, $92, $93
>391d58	8d 8e 8e 8f 90 91 92 93
>391d60	94 95 95 96 97 98 99 9a		                      .text  $94, $95, $95, $96, $97, $98, $99, $9a, $9a, $9b, $9c, $9d, $9e, $9f, $9f, $a0
>391d68	9a 9b 9c 9d 9e 9f 9f a0
>391d70	a1 a2 a3 a3 a4 a5 a6 a6		                      .text  $a1, $a2, $a3, $a3, $a4, $a5, $a6, $a6, $a7, $a8, $a9, $aa, $aa, $ab, $ac, $ad
>391d78	a7 a8 a9 aa aa ab ac ad
>391d80	ad ae af b0 b0 b1 b2 b3		                      .text  $ad, $ae, $af, $b0, $b0, $b1, $b2, $b3, $b3, $b4, $b5, $b6, $b6, $b7, $b8, $b8
>391d88	b3 b4 b5 b6 b6 b7 b8 b8
>391d90	b9 ba bb bb bc bd bd be		                      .text  $b9, $ba, $bb, $bb, $bc, $bd, $bd, $be, $bf, $bf, $c0, $c1, $c2, $c2, $c3, $c4
>391d98	bf bf c0 c1 c2 c2 c3 c4
>391da0	c4 c5 c6 c6 c7 c8 c8 c9		                      .text  $c4, $c5, $c6, $c6, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cc, $cc, $cd, $ce, $ce
>391da8	ca ca cb cc cc cd ce ce
>391db0	cf d0 d0 d1 d2 d2 d3 d4		                      .text  $cf, $d0, $d0, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d6, $d6, $d7, $d7, $d8, $d9
>391db8	d4 d5 d6 d6 d7 d7 d8 d9
>391dc0	d9 da db db dc dc dd de		                      .text  $d9, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $e0, $e0, $e1, $e1, $e2, $e3
>391dc8	de df e0 e0 e1 e1 e2 e3
>391dd0	e3 e4 e4 e5 e6 e6 e7 e7		                      .text  $e3, $e4, $e4, $e5, $e6, $e6, $e7, $e7, $e8, $e9, $e9, $ea, $ea, $eb, $ec, $ec
>391dd8	e8 e9 e9 ea ea eb ec ec
>391de0	ed ed ee ef ef f0 f0 f1		                      .text  $ed, $ed, $ee, $ef, $ef, $f0, $f0, $f1, $f1, $f2, $f3, $f3, $f4, $f4, $f5, $f5
>391de8	f1 f2 f3 f3 f4 f4 f5 f5
>391df0	f6 f7 f7 f8 f8 f9 f9 fa		                      .text  $f6, $f7, $f7, $f8, $f8, $f9, $f9, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $ff
>391df8	fb fb fc fc fd fd fe ff
>391e00					.align 256
>391e00	1d c8 a7 ac 10 d6 52 7c		RANDOM_LUT_Tbl		    .text  $1d, $c8, $a7, $ac, $10, $d6, $52, $7c, $83, $dd, $ce, $39, $cd, $c5, $3b, $15
>391e08	83 dd ce 39 cd c5 3b 15
>391e10	22 55 3b 94 e0 33 1f 38						              .text  $22, $55, $3b, $94, $e0, $33, $1f, $38, $87, $12, $31, $65, $89, $27, $88, $42
>391e18	87 12 31 65 89 27 88 42
>391e20	b2 32 72 84 b2 b2 31 52						              .text  $b2, $32, $72, $84, $b2, $b2, $31, $52, $94, $ce, $56, $ec, $fe, $da, $58, $c9
>391e28	94 ce 56 ec fe da 58 c9
>391e30	c8 5b 53 2a 08 3b 19 c1						              .text  $c8, $5b, $53, $2a, $08, $3b, $19, $c1, $d0, $10, $2c, $b2, $4b, $ea, $32, $61
>391e38	d0 10 2c b2 4b ea 32 61
>391e40	da 34 33 8f 2b da 49 89						              .text  $da, $34, $33, $8f, $2b, $da, $49, $89, $a1, $e6, $ca, $2d, $b3, $ce, $b0, $79
>391e48	a1 e6 ca 2d b3 ce b0 79
>391e50	44 aa 32 82 91 e9 29 16						              .text  $44, $aa, $32, $82, $91, $e9, $29, $16, $5f, $e3, $fb, $bd, $15, $2e, $be, $f5
>391e58	5f e3 fb bd 15 2e be f5
>391e60	e9 4a e4 2e 60 24 94 35						              .text  $e9, $4a, $e4, $2e, $60, $24, $94, $35, $8d, $8f, $2c, $80, $0a, $5e, $99, $36
>391e68	8d 8f 2c 80 0a 5e 99 36
>391e70	ac ab 21 26 42 7c 5e bc						              .text  $ac, $ab, $21, $26, $42, $7c, $5e, $bc, $13, $52, $44, $2f, $e3, $ef, $44, $a2
>391e78	13 52 44 2f e3 ef 44 a2
>391e80	86 c1 9c 47 5f 36 6d 02						              .text  $86, $c1, $9c, $47, $5f, $36, $6d, $02, $be, $23, $02, $58, $0a, $52, $5e, $b4
>391e88	be 23 02 58 0a 52 5e b4
>391e90	9f 06 08 c9 97 cb 9e dd						              .text  $9f, $06, $08, $c9, $97, $cb, $9e, $dd, $d5, $cf, $3e, $df, $c4, $9e, $da, $bb
>391e98	d5 cf 3e df c4 9e da bb
>391ea0	9b 5d c9 f5 d9 c3 7e 87						              .text  $9b, $5d, $c9, $f5, $d9, $c3, $7e, $87, $77, $7d, $b1, $3b, $4a, $68, $35, $6e
>391ea8	77 7d b1 3b 4a 68 35 6e
>391eb0	ee 47 ad 8f fd 73 2e 46						              .text  $ee, $47, $ad, $8f, $fd, $73, $2e, $46, $b5, $8f, $44, $63, $55, $6f, $e1, $50
>391eb8	b5 8f 44 63 55 6f e1 50
>391ec0	f4 b6 a3 4f 68 c4 a5 a4						              .text  $f4, $b6, $a3, $4f, $68, $c4, $a5, $a4, $57, $74, $b9, $bd, $05, $14, $50, $eb
>391ec8	57 74 b9 bd 05 14 50 eb
>391ed0	a5 5c 57 2f 99 dc 2e 8a						              .text  $a5, $5c, $57, $2f, $99, $dc, $2e, $8a, $44, $bc, $ec, $db, $22, $58, $fc, $be
>391ed8	44 bc ec db 22 58 fc be
>391ee0	5f 3f 50 bd 2a 36 ab ae						              .text  $5f, $3f, $50, $bd, $2a, $36, $ab, $ae, $24, $aa, $82, $11, $5c, $9f, $43, $4d
>391ee8	24 aa 82 11 5c 9f 43 4d
>391ef0	8f 0c 20 00 91 b6 45 9e						              .text  $8f, $0c, $20, $00, $91, $b6, $45, $9e, $3e, $3d, $66, $7e, $0a, $1c, $6b, $74
>391ef8	3e 3d 66 7e 0a 1c 6b 74
>391f00					.align 16
>391f00	00 01 01 00 00 00 00 00		MOUSE_POINTER_PTR     .text $00,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00
>391f08	01 01 01 00 00 00 00 00
>391f10	01 ff ff 01 00 00 01 01		                      .text $01,$FF,$FF,$01,$00,$00,$01,$01,$FF,$FF,$FF,$01,$00,$00,$00,$00
>391f18	ff ff ff 01 00 00 00 00
>391f20	01 ff ff ff 01 01 55 ff		                      .text $01,$FF,$FF,$FF,$01,$01,$55,$FF,$01,$55,$FF,$FF,$01,$00,$00,$00
>391f28	01 55 ff ff 01 00 00 00
>391f30	01 55 ff ff ff ff 01 55		                      .text $01,$55,$FF,$FF,$FF,$FF,$01,$55,$FF,$FF,$FF,$FF,$01,$00,$00,$00
>391f38	ff ff ff ff 01 00 00 00
>391f40	00 01 55 ff ff ff ff ff		                      .text $00,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$00,$00
>391f48	ff ff 01 ff ff 01 00 00
>391f50	00 00 01 55 ff ff ff ff		                      .text $00,$00,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$FF,$01,$00,$00
>391f58	01 ff ff 01 ff 01 00 00
>391f60	00 00 01 01 55 ff ff ff		                      .text $00,$00,$01,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$FF,$01,$00,$00
>391f68	ff 01 ff ff ff 01 00 00
>391f70	00 00 01 55 01 55 ff ff		                      .text $00,$00,$01,$55,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$01,$00
>391f78	ff ff ff ff ff 01 01 00
>391f80	00 00 01 55 55 55 ff ff		                      .text $00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01
>391f88	ff ff ff ff 01 ff ff 01
>391f90	00 00 00 01 55 55 55 ff		                      .text $00,$00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01
>391f98	ff ff ff ff ff ff ff 01
>391fa0	00 00 00 00 01 55 55 55		                      .text $00,$00,$00,$00,$01,$55,$55,$55,$55,$55,$01,$FF,$FF,$55,$01,$00
>391fa8	55 55 01 ff ff 55 01 00
>391fb0	00 00 00 00 00 01 01 01		                      .text $00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$55,$FF,$55,$01,$00,$00
>391fb8	01 01 55 ff 55 01 00 00
>391fc0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$55,$01,$00,$00,$00
>391fc8	01 55 55 55 01 00 00 00
>391fd0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$01,$00,$00,$00,$00
>391fd8	01 55 55 01 00 00 00 00
>391fe0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00
>391fe8	00 01 01 00 00 00 00 00
>391ff0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>391ff8	00 00 00 00 00 00 00 00
.3ff000					FONT_4_BANK0
>3ff000	00 00 00 00 00 00 00 00		.binary "FONT/Bm437_PhoenixEGA_8x8.bin", 0, 2048
>3ff008	7e 81 a5 81 bd 99 81 7e 3c 7e db ff c3 7e 3c 00
>3ff018	00 ee fe fe 7c 38 10 00 10 38 7c fe 7c 38 10 00
>3ff028	00 3c 18 ff ff 08 18 00 10 38 7c fe fe 10 38 00
>3ff038	00 00 18 3c 18 00 00 00 ff ff e7 c3 e7 ff ff ff
>3ff048	00 3c 42 81 81 42 3c 00 ff c3 bd 7e 7e bd c3 ff
>3ff058	01 03 07 0f 1f 3f 7f ff ff fe fc f8 f0 e0 c0 80
>3ff068	04 06 07 04 04 fc f8 00 0c 0a 0d 0b f9 f9 1f 1f
>3ff078	00 92 7c 44 c6 7c 92 00 00 00 60 78 7e 78 60 00
>3ff088	00 00 06 1e 7e 1e 06 00 18 7e 18 18 18 18 7e 18
>3ff098	66 66 66 66 66 00 66 00 ff b6 76 36 36 36 36 00
>3ff0a8	7e c1 dc 22 22 1f 83 7e 00 00 00 7e 7e 00 00 00
>3ff0b8	18 7e 18 18 7e 18 00 ff 18 7e 18 18 18 18 18 00
>3ff0c8	18 18 18 18 18 7e 18 00 00 04 06 ff 06 04 00 00
>3ff0d8	00 20 60 ff 60 20 00 00 00 00 00 c0 c0 c0 ff 00
>3ff0e8	00 24 66 ff 66 24 00 00 00 00 10 38 7c fe 00 00
>3ff0f8	00 00 00 fe 7c 38 10 00 00 00 00 00 00 00 00 00
>3ff108	30 30 30 30 30 00 30 00 66 66 00 00 00 00 00 00
>3ff118	6c 6c fe 6c fe 6c 6c 00 10 7c d2 7c 86 7c 10 00
>3ff128	f0 96 fc 18 3e 72 de 00 30 48 30 78 ce cc 78 00
>3ff138	0c 0c 18 00 00 00 00 00 10 60 c0 c0 c0 60 10 00
>3ff148	10 0c 06 06 06 0c 10 00 00 54 38 fe 38 54 00 00
>3ff158	00 18 18 7e 18 18 00 00 00 00 00 00 00 00 18 70
>3ff168	00 00 00 7e 00 00 00 00 00 00 00 00 00 00 18 00
>3ff178	02 06 0c 18 30 60 c0 00 7c ce de f6 e6 e6 7c 00
>3ff188	18 38 78 18 18 18 3c 00 7c c6 06 0c 30 60 fe 00
>3ff198	7c c6 06 3c 06 c6 7c 00 0e 1e 36 66 fe 06 06 00
>3ff1a8	fe c0 c0 fc 06 06 fc 00 7c c6 c0 fc c6 c6 7c 00
>3ff1b8	fe 06 0c 18 30 60 60 00 7c c6 c6 7c c6 c6 7c 00
>3ff1c8	7c c6 c6 7e 06 c6 7c 00 00 30 00 00 00 30 00 00
>3ff1d8	00 30 00 00 00 30 20 00 00 1c 30 60 30 1c 00 00
>3ff1e8	00 00 7e 00 7e 00 00 00 00 70 18 0c 18 70 00 00
>3ff1f8	7c c6 0c 18 30 00 30 00 7c 82 9a aa aa 9e 7c 00
>3ff208	7c c6 c6 fe c6 c6 c6 00 fc 66 66 7c 66 66 fc 00
>3ff218	7c c6 c0 c0 c0 c6 7c 00 fc 66 66 66 66 66 fc 00
>3ff228	fe 62 68 78 68 62 fe 00 fe 62 68 78 68 60 f0 00
>3ff238	7c c6 c6 c0 de c6 7c 00 c6 c6 c6 fe c6 c6 c6 00
>3ff248	3c 18 18 18 18 18 3c 00 1e 0c 0c 0c 0c cc 78 00
>3ff258	c6 cc d8 f0 d8 cc c6 00 f0 60 60 60 60 62 fe 00
>3ff268	c6 ee fe d6 c6 c6 c6 00 c6 e6 f6 de ce c6 c6 00
>3ff278	7c c6 c6 c6 c6 c6 7c 00 fc 66 66 7c 60 60 f0 00
>3ff288	7c c6 c6 c6 c6 c6 7c 0c fc 66 66 7c 66 66 e6 00
>3ff298	7c c6 c0 7c 06 c6 7c 00 7e 5a 18 18 18 18 3c 00
>3ff2a8	c6 c6 c6 c6 c6 c6 7c 00 c6 c6 c6 c6 c6 6c 38 00
>3ff2b8	c6 c6 c6 c6 d6 ee c6 00 c6 6c 38 38 38 6c c6 00
>3ff2c8	66 66 66 3c 18 18 3c 00 fe c6 0c 18 30 66 fe 00
>3ff2d8	1c 18 18 18 18 18 1c 00 c0 60 30 18 0c 06 02 00
>3ff2e8	70 30 30 30 30 30 70 00 00 00 10 38 6c c6 00 00
>3ff2f8	00 00 00 00 00 00 00 ff 30 30 18 00 00 00 00 00
>3ff308	00 00 7c 06 7e c6 7e 00 c0 c0 fc c6 c6 c6 fc 00
>3ff318	00 00 7c c6 c0 c6 7c 00 06 06 7e c6 c6 c6 7e 00
>3ff328	00 00 7c c6 fe c0 7c 00 3c 66 60 f0 60 60 60 00
>3ff338	00 00 7e c6 c6 7e 06 7c c0 c0 fc c6 c6 c6 c6 00
>3ff348	18 00 38 18 18 18 3c 00 00 0c 00 1c 0c 0c cc 78
>3ff358	c0 c0 c6 d8 f0 d8 c6 00 38 18 18 18 18 18 3c 00
>3ff368	00 00 ee fe d6 c6 c6 00 00 00 fc c6 c6 c6 c6 00
>3ff378	00 00 7c c6 c6 c6 7c 00 00 00 fc c6 c6 fc c0 c0
>3ff388	00 00 7e c6 c6 7e 06 06 00 00 de 76 60 60 60 00
>3ff398	00 00 7c c0 7c 06 7c 00 18 18 7e 18 18 18 1e 00
>3ff3a8	00 00 c6 c6 c6 c6 7e 00 00 00 c6 c6 c6 6c 38 00
>3ff3b8	00 00 c6 c6 d6 fe c6 00 00 00 c6 6c 38 6c c6 00
>3ff3c8	00 00 c6 c6 c6 7e 06 7c 00 00 fe 0c 18 60 fe 00
>3ff3d8	0e 18 18 70 18 18 0e 00 18 18 18 00 18 18 18 00
>3ff3e8	e0 30 30 1c 30 30 e0 00 00 00 70 9a 0e 00 00 00
>3ff3f8	00 00 18 3c 66 ff 00 00 7c c6 c0 c0 c6 7c 18 70
>3ff408	66 00 c6 c6 c6 c6 7e 00 0e 18 7c c6 fe c0 7c 00
>3ff418	18 24 7c 06 7e c6 7e 00 66 00 7c 06 7e c6 7e 00
>3ff428	38 0c 7c 06 7e c6 7e 00 18 00 7c 06 7e c6 7e 00
>3ff438	00 00 7c c0 c0 7c 18 70 18 24 7c c6 fe c0 7c 00
>3ff448	66 00 7c c6 fe c0 7c 00 70 18 7c c6 fe c0 7c 00
>3ff458	66 00 38 18 18 18 3c 00 18 24 38 18 18 18 3c 00
>3ff468	38 0c 38 18 18 18 3c 00 66 00 7c c6 fe c6 c6 00
>3ff478	18 00 7c c6 fe c6 c6 00 0e 18 fe 60 78 60 fe 00
>3ff488	00 00 7c 1a 7e d8 7e 00 7e d8 d8 de f8 d8 de 00
>3ff498	18 24 7c c6 c6 c6 7c 00 66 00 7c c6 c6 c6 7c 00
>3ff4a8	38 0c 7c c6 c6 c6 7c 00 18 24 c6 c6 c6 c6 7e 00
>3ff4b8	38 0c c6 c6 c6 c6 7e 00 66 00 c6 c6 c6 7e 06 7c
>3ff4c8	66 7c c6 c6 c6 c6 7c 00 c6 00 c6 c6 c6 c6 7c 00
>3ff4d8	18 7c c6 c0 c6 7c 18 00 1e 32 30 78 30 70 fe 00
>3ff4e8	66 3c 18 7e 18 3c 18 00 fc c6 fc c0 cc de cc 0e
>3ff4f8	00 1c 32 30 fc 30 f0 00 0e 18 7c 06 7e c6 7e 00
>3ff508	1a 30 38 18 18 18 3c 00 0e 18 7c c6 c6 c6 7c 00
>3ff518	0e 18 c6 c6 c6 c6 7e 00 66 98 fc c6 c6 c6 c6 00
>3ff528	66 98 e6 f6 de ce c6 00 7c 06 7e c6 7e 00 fe 00
>3ff538	7c c6 c6 c6 7c 00 fe 00 18 00 18 30 60 c6 7c 00
>3ff548	00 00 fe c0 c0 c0 c0 00 00 00 fe 06 06 06 06 00
>3ff558	c0 c0 c0 de 06 0c 1e 00 c0 c0 c0 cc 1c 3e 0c 00
>3ff568	30 00 30 30 30 30 30 00 00 36 6c d8 6c 36 00 00
>3ff578	00 d8 6c 36 6c d8 00 00 aa aa aa aa aa aa aa aa
>3ff588	aa 55 aa 55 aa 55 aa 55 44 22 44 22 44 22 44 22
>3ff598	18 18 18 18 18 18 18 18 18 18 18 f8 18 18 18 18
>3ff5a8	18 18 18 f8 18 f8 18 18 36 36 36 f6 36 36 36 36
>3ff5b8	00 00 00 fe 36 36 36 36 00 00 00 f8 18 f8 18 18
>3ff5c8	36 36 36 f6 06 f6 36 36 36 36 36 36 36 36 36 36
>3ff5d8	00 00 00 fe 06 f6 36 36 36 36 36 f6 06 fe 00 00
>3ff5e8	36 36 36 fe 00 00 00 00 18 18 18 f8 18 f8 00 00
>3ff5f8	00 00 00 f8 18 18 18 18 18 18 18 1f 00 00 00 00
>3ff608	18 18 18 ff 00 00 00 00 00 00 00 ff 18 18 18 18
>3ff618	18 18 18 1f 18 18 18 18 00 00 00 ff 00 00 00 00
>3ff628	18 18 18 ff 18 18 18 18 18 18 18 1f 18 1f 18 18
>3ff638	36 36 36 37 36 36 36 36 36 36 36 37 30 3f 00 00
>3ff648	00 00 00 3f 30 37 36 36 36 36 36 f7 00 ff 00 00
>3ff658	00 00 00 ff 00 f7 36 36 36 36 36 37 30 37 36 36
>3ff668	00 00 00 ff 00 ff 00 00 36 36 36 f7 00 f7 36 36
>3ff678	18 18 18 ff 00 ff 00 00 36 36 36 ff 00 00 00 00
>3ff688	00 00 00 ff 00 ff 18 18 00 00 00 ff 36 36 36 36
>3ff698	36 36 36 3f 00 00 00 00 18 18 18 1f 18 1f 00 00
>3ff6a8	00 00 00 1f 18 1f 18 18 00 00 00 3f 36 36 36 36
>3ff6b8	36 36 36 ff 36 36 36 36 18 18 18 ff 18 ff 18 18
>3ff6c8	18 18 18 f8 00 00 00 00 00 00 00 1f 18 18 18 18
>3ff6d8	ff ff ff ff ff ff ff ff 00 00 00 00 ff ff ff ff
>3ff6e8	f0 f0 f0 f0 f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f
>3ff6f8	ff ff ff ff 00 00 00 00 00 00 77 98 98 77 00 00
>3ff708	1c 36 66 fc c6 c6 fc c0 fe 62 60 60 60 60 60 00
>3ff718	00 00 ff 66 66 66 66 00 fe 62 30 18 30 62 fe 00
>3ff728	00 00 3f 66 c6 cc 78 00 00 00 33 33 33 3e 30 f0
>3ff738	00 00 ff 18 18 18 18 00 3c 18 3c 66 66 3c 18 3c
>3ff748	00 7c c6 fe c6 7c 00 00 00 7e c3 c3 c3 66 e7 00
>3ff758	1e 19 3c 66 c6 cc 78 00 00 00 66 99 99 66 00 00
>3ff768	00 03 7c ce e6 7c c0 00 00 3e c0 fe c0 3e 00 00
>3ff778	00 7e c3 c3 c3 c3 00 00 00 fe 00 fe 00 fe 00 00
>3ff788	18 18 7e 18 18 7e 00 00 70 18 0c 18 70 00 fe 00
>3ff798	1c 30 60 30 1c 00 fe 00 00 0e 1b 18 18 18 18 18
>3ff7a8	18 18 18 18 18 d8 70 00 00 18 00 7e 00 18 00 00
>3ff7b8	00 76 dc 00 76 dc 00 00 3c 66 3c 00 00 00 00 00
>3ff7c8	00 18 3c 18 00 00 00 00 00 00 00 00 18 00 00 00
>3ff7d8	0f 0c 0c 0c ec 6c 38 00 d8 ec cc cc 00 00 00 00
>3ff7e8	f0 30 c0 f0 00 00 00 00 00 00 00 3c 3c 3c 3c 00
>3ff7f8	00 00 00 00 00 00 00 00
.3ff800					FONT_4_BANK1
>3ff800	00 00 00 00 00 00 00 00		.binary "FONT/CBM-ASCII_8x8.bin", 0, 2048
>3ff808	7c 82 aa 82 ba 92 82 7c 7c fe d6 fe c6 ee fe 7c
>3ff818	ff fd fb f5 eb d5 ab ff ff e1 fd 85 85 87 87 ff
>3ff828	ff bd db e7 e7 db bd ff ff 81 81 bd bd bd 81 ff
>3ff838	ff ff ff ff ff 81 81 ff 00 08 10 20 10 08 00 00
>3ff848	00 24 14 0c 14 24 00 00 00 8e 88 8c 88 e8 00 00
>3ff858	00 00 00 00 00 00 00 00 00 ee 88 cc 88 88 00 00
>3ff868	00 00 04 14 3c 10 00 00 00 30 4c 4c 30 00 00 00
>3ff878	00 38 28 38 28 00 00 00 ff 81 bd bd bd bd 81 ff
>3ff888	ff 55 aa 55 aa 55 aa ff ab d5 ab d5 ab d5 ab d5
>3ff898	ff 81 81 81 81 81 81 ff ff f9 e1 81 81 e1 f9 ff
>3ff8a8	ff 9f 87 81 81 87 9f ff ff e7 e7 c3 c3 81 81 ff
>3ff8b8	ff 81 81 c3 c3 e7 e7 ff 00 26 54 04 04 04 06 00
>3ff8c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 3 times (48 bytes)...
>3ff908	10 10 10 10 00 10 00 00 24 24 24 00 00 00 00 00
>3ff918	24 7e 24 24 7e 24 00 00 10 3c 50 38 14 78 10 00
>3ff928	62 64 08 10 20 4c 8c 00 30 48 48 30 58 4c 4c 38
>3ff938	10 10 10 00 00 00 00 00 08 10 20 20 20 20 10 08
>3ff948	10 08 04 04 04 04 08 10 00 24 18 7e 18 24 00 00
>3ff958	00 10 10 7c 10 10 00 00 00 00 00 00 10 10 20 00
>3ff968	00 00 00 3c 00 00 00 00 00 00 00 00 18 18 00 00
>3ff978	04 04 08 08 10 10 20 20 3c 46 4a 52 62 42 3c 00
>3ff988	10 30 10 10 10 10 38 00 38 44 04 18 20 40 7c 00
>3ff998	38 44 04 18 04 44 38 00 08 18 28 48 7c 08 08 00
>3ff9a8	7c 40 78 04 04 44 38 00 38 44 40 78 44 44 38 00
>3ff9b8	7c 44 04 08 08 10 10 00 38 44 44 38 44 44 38 00
>3ff9c8	38 44 44 3c 04 44 38 00 00 00 18 00 00 18 00 00
>3ff9d8	00 00 18 00 00 18 18 30 00 08 10 20 10 08 00 00
>3ff9e8	00 00 3c 00 3c 00 00 00 00 10 08 04 08 10 00 00
>3ff9f8	38 44 04 08 10 00 10 00 38 44 4c 4c 40 44 38 00
>3ffa08	10 28 44 7c 44 44 00 00 78 44 78 44 44 78 00 00
>3ffa18	38 44 40 40 44 38 00 00 78 44 44 44 44 78 00 00
>3ffa28	7c 40 78 40 40 7c 00 00 7c 40 78 40 40 40 00 00
>3ffa38	38 44 40 4c 44 38 00 00 44 44 7c 44 44 44 00 00
>3ffa48	38 10 10 10 10 38 00 00 1c 08 08 08 48 30 00 00
>3ffa58	24 28 30 30 28 24 00 00 20 20 20 20 20 3c 00 00
>3ffa68	44 6c 7c 54 44 44 00 00 44 64 54 4c 44 44 00 00
>3ffa78	38 44 44 44 44 38 00 00 78 44 44 78 40 40 00 00
>3ffa88	38 44 44 44 44 38 0c 00 78 44 44 78 48 44 00 00
>3ffa98	3c 40 38 04 04 78 00 00 7c 10 10 10 10 10 00 00
>3ffaa8	44 44 44 44 44 38 00 00 44 44 44 44 28 10 00 00
>3ffab8	82 82 82 92 92 6c 00 00 42 24 18 18 24 42 00 00
>3ffac8	44 44 28 10 10 10 00 00 7c 08 10 20 40 7c 00 00
>3ffad8	38 20 20 20 20 20 38 00 20 20 10 10 08 08 04 04
>3ffae8	38 08 08 08 08 08 38 00 00 10 28 44 00 00 00 00
>3ffaf8	00 00 00 00 00 00 00 7e 40 20 10 00 00 00 00 00
>3ffb08	00 38 04 3c 64 3c 00 00 40 40 78 44 44 78 00 00
>3ffb18	00 00 38 40 40 38 00 00 04 04 3c 44 44 3c 00 00
>3ffb28	00 38 44 7c 40 3c 00 00 0c 10 3c 10 10 10 00 00
>3ffb38	00 00 3c 44 44 3c 04 78 40 40 78 44 44 44 00 00
>3ffb48	10 00 30 10 10 38 00 00 08 00 08 08 08 08 08 30
>3ffb58	20 20 24 38 28 24 00 00 30 10 10 10 10 10 00 00
>3ffb68	00 00 68 54 54 44 00 00 00 00 38 24 24 24 00 00
>3ffb78	00 00 38 44 44 38 00 00 00 00 78 44 44 78 40 40
>3ffb88	00 00 3c 44 44 3c 04 04 00 00 78 44 40 40 00 00
>3ffb98	00 00 1c 30 0c 38 00 00 00 10 7c 10 10 10 0c 00
>3ffba8	00 00 44 44 44 3c 00 00 00 00 42 42 24 18 00 00
>3ffbb8	00 00 82 82 92 6c 00 00 00 00 24 18 18 24 00 00
>3ffbc8	00 00 24 24 24 1c 04 38 00 00 7c 18 30 7c 00 00
>3ffbd8	0c 10 10 30 30 10 10 0c 18 18 18 00 18 18 18 00
>3ffbe8	30 08 08 0c 0c 08 08 30 00 00 32 7e 4c 00 00 00
>3ffbf8	00 00 10 28 38 00 00 00 00 00 3c 3c 3c 3c 00 00
>3ffc08	00 00 3c 24 24 3c 00 00 00 00 18 3c 3c 18 00 00
>3ffc18	00 00 18 24 24 18 00 00 18 24 24 18 00 00 00 00
>3ffc28	00 3c 42 42 66 24 66 00 00 18 00 18 0c 06 66 3c
>3ffc38	0c 12 30 7c 30 62 fc 00 1c 20 70 20 70 20 1c 00
>3ffc48	02 06 0c d8 f0 e0 c0 00 18 18 ff 00 00 ff 00 00
>3ffc58	00 00 ff 00 00 ff 18 18 24 24 24 e7 e7 24 24 24
>3ffc68	18 18 ff 00 00 ff 18 18 24 24 24 27 27 24 24 24
>3ffc78	24 24 24 e4 e4 24 24 24 00 00 00 ff ff ff ff ff
>3ffc88	00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>3ffc98	ff ff ff ff ff ff ff 00 ff ff ff ff ff ff 00 00
>3ffca8	ff ff ff ff ff 00 00 00 ff ff ff ff 00 00 00 00
>3ffcb8	f8 f8 f8 f8 f8 f8 f8 f8 fc fc fc fc fc fc fc fc
>3ffcc8	fe fe fe fe fe fe fe fe 7f 7f 7f 7f 7f 7f 7f 7f
>3ffcd8	3f 3f 3f 3f 3f 3f 3f 3f 1f 1f 1f 1f 1f 1f 1f 1f
>3ffce8	0f 0f 0f 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00
>3ffcf8	00 00 00 00 00 00 00 00 ff ff ff ff ff ff ff ff
>3ffd08	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 00 ff ff ff ff
>3ffd18	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>3ffd28	80 80 80 80 80 80 80 80 aa 55 aa 55 aa 55 aa 55
>3ffd38	01 01 01 01 01 01 01 01 00 00 00 00 aa 55 aa 55
>3ffd48	ff fe fc f8 f0 e0 c0 80 03 03 03 03 03 03 03 03
>3ffd58	18 18 18 1f 1f 18 18 18 00 00 00 00 0f 0f 0f 0f
>3ffd68	18 18 18 1f 1f 00 00 00 00 00 00 f8 f8 18 18 18
>3ffd78	00 00 00 00 00 00 ff ff 00 00 00 1f 1f 18 18 18
>3ffd88	18 18 18 ff ff 00 00 00 00 00 00 ff ff 18 18 18
>3ffd98	18 18 18 f8 f8 18 18 18 c0 c0 c0 c0 c0 c0 c0 c0
>3ffda8	e0 e0 e0 e0 e0 e0 e0 e0 07 07 07 07 07 07 07 07
>3ffdb8	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00
>3ffdc8	00 00 00 00 00 ff ff ff 03 03 03 03 03 03 ff ff
>3ffdd8	00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>3ffde8	18 18 18 f8 f8 00 00 00 f0 f0 f0 f0 00 00 00 00
>3ffdf8	f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 ff ff 00 00 00
>3ffe08	08 1c 3e 7f 7f 1c 3e 00 18 18 18 18 18 18 18 18
>3ffe18	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00
>3ffe28	00 ff ff 00 00 00 00 00 00 00 00 00 ff ff 00 00
>3ffe38	30 30 30 30 30 30 30 30 0c 0c 0c 0c 0c 0c 0c 0c
>3ffe48	00 00 00 e0 f0 38 18 18 18 18 1c 0f 07 00 00 00
>3ffe58	18 18 38 f0 e0 00 00 00 c0 c0 c0 c0 c0 c0 ff ff
>3ffe68	c0 e0 70 38 1c 0e 07 03 03 07 0e 1c 38 70 e0 c0
>3ffe78	ff ff c0 c0 c0 c0 c0 c0 ff ff 03 03 03 03 03 03
>3ffe88	00 3c 7e 7e 7e 7e 3c 00 00 00 00 00 00 ff ff 00
>3ffe98	36 7f 7f 7f 3e 1c 08 00 60 60 60 60 60 60 60 60
>3ffea8	00 00 00 07 0f 1c 18 18 c3 e7 7e 3c 3c 7e e7 c3
>3ffeb8	00 3c 7e 66 66 7e 3c 00 18 18 66 66 18 18 3c 00
>3ffec8	06 06 06 06 06 06 06 06 08 1c 3e 7f 3e 1c 08 00
>3ffed8	18 18 18 ff ff 18 18 18 c0 c0 30 30 c0 c0 30 30
>3ffee8	18 18 18 18 18 18 18 18 00 00 03 3e 76 36 36 00
>3ffef8	ff 7f 3f 1f 0f 07 03 01 24 24 24 24 24 24 24 24
>3fff08	00 00 ff 00 00 ff 00 00 00 00 3f 20 20 27 24 24
>3fff18	00 00 ff 00 00 e7 24 24 00 00 fc 04 04 e4 24 24
>3fff28	24 24 27 20 20 3f 00 00 24 24 e7 00 00 ff 00 00
>3fff38	24 24 e4 04 04 fc 00 00 24 24 27 20 20 27 24 24
>3fff48	24 24 e4 04 04 e4 24 24 24 24 e7 00 00 e7 24 24
>3fff58	0f 0f 0f 0f f0 f0 f0 f0 01 03 07 0f 1f 3f 7f ff
>3fff68	80 c0 e0 f0 f8 fc fe ff 33 99 cc 66 33 99 cc 66
>3fff78	cc 99 33 66 cc 99 33 66 f0 f0 f0 f0 ff ff ff ff
>3fff88	0f 0f 0f 0f ff ff ff ff ff ff ff ff f0 f0 f0 f0
>3fff98	ff ff ff ff 0f 0f 0f 0f 05 0a 05 0a 00 00 00 00
>3fffa8	00 00 00 00 0a 05 0a 05 a0 50 a0 50 00 00 00 00
>3fffb8	00 00 00 00 a0 50 a0 50 0a 05 0a 05 0a 05 0a 05
>3fffc8	aa 55 aa 55 00 00 00 00 00 18 3c 7e 18 18 18 18
>3fffd8	00 10 30 7f 7f 30 10 00 00 08 0c fe fe 0c 08 00
>3fffe8	18 18 18 18 7e 3c 18 00 00 00 36 49 36 00 00 00
>3ffff8	00 00 00 00 00 00 00 00
>3a0000	5c de 57 3a 5c b9 3f 3a		.binary "binaries/basic816.bin"
>3a0008	5c 10 1f 3a 5c 96 01 3a 5c ae 00 3a 5c 2c 01 3a
>3a0018	5c 73 03 3a 5c 3a 01 3a 5c 55 01 3a 5c 5c 01 3a
>3a0028	da 08 c2 10 a2 00 00 e2 20 20 59 00 90 11 f0 0f
>3a0038	c9 0d f0 0b c9 0a f0 07 9f 00 4f 00 e8 80 ea a9
>3a0048	00 9f 00 4f 00 28 fa 60 c2 10 ae b0 08 ec ae 08
>3a0058	60 5a 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 c2
>3a0068	10 a4 b0 c4 ae 10 0d b7 ab c2 20 29 ff 00 e6 b0
>3a0078	28 7a 38 60 28 7a 18 60 8b e2 20 85 b3 08 c2 20
>3a0088	48 a9 00 08 5b 68 28 c2 20 a5 a4 d0 06 e2 20 a5
>3a0098	a6 f0 11 c2 10 a4 a9 c4 a7 f0 09 e2 20 a5 b3 97
>3a00a8	a4 c8 84 a9 ab 60 08 c2 10 e2 20 a9 01 20 1c 00
>3a00b8	a2 00 00 a9 00 9f 00 4c 00 e8 e0 00 01 d0 f6 a2
>3a00c8	00 00 20 14 00 c9 0d d0 03 4c 25 01 c9 9d d0 08
>3a00d8	e0 00 00 f0 ed ca 80 39 c9 1d d0 0e bf 00 4c 00
>3a00e8	f0 e0 e0 4f 00 f0 db e8 80 27 c9 08 d0 1a e0 00
>3a00f8	00 f0 cf da bf 01 4c 00 9f 00 4c 00 f0 06 e8 e0
>3a0108	ff 00 d0 f0 fa ca 80 0e c9 20 90 b6 9f 00 4c 00
>3a0118	e8 20 18 00 80 ac a9 08 20 18 00 80 a5 a9 00 20
>3a0128	1c 00 28 60 22 4c 10 00 60 20 14 00 48 20 18 00
>3a0138	68 60 08 e2 20 c9 00 f0 08 af 10 00 af 09 01 80
>3a0148	06 af 10 00 af 29 fe 8f 10 00 af 28 60 08 22 84
>3a0158	10 00 28 60 48 da 5a 0b 08 e2 20 c2 10 a2 00 00
>3a0168	a9 20 9f 00 a0 af af 1e 00 00 9f 00 c0 af e8 e0
>3a0178	00 20 d0 ec 08 c2 20 48 a9 00 00 5b 68 28 a2 00
>3a0188	00 a0 00 00 22 84 10 00 28 2b 7a fa 68 60 da 5a
>3a0198	0b 08 08 c2 20 48 a9 00 08 5b 68 28 c2 30 af 0c
>3a01a8	00 00 85 08 e2 20 af 0e 00 00 c2 20 29 ff 00 85
>3a01b8	0a af 11 00 00 8f 08 01 00 af 1c 00 00 3a 8f 0a
>3a01c8	01 00 18 a5 08 6f 0c 01 00 85 08 a5 0a 69 00 00
>3a01d8	85 0a e2 20 af 0f 00 00 85 8d a0 00 00 a2 00 00
>3a01e8	b7 08 9f 00 4f 00 e8 c8 c4 8d d0 f4 ca bf 00 4f
>3a01f8	00 c9 20 d0 09 a9 00 9f 00 4f 00 ca 10 ef 28 2b
>3a0208	7a fa 60 08 c2 10 e2 20 a2 00 00 bf 00 00 36 9f
>3a0218	00 f1 3a e8 e0 18 00 d0 f2 28 60 08 0b 08 c2 20
>3a0228	48 a9 00 08 5b 68 28 c2 30 a2 14 00 bf 00 f1 3a
>3a0238	85 08 e8 e8 bf 00 f1 3a 85 0a a5 08 d0 08 a5 0a
>3a0248	d0 04 2b 28 18 60 e2 20 a2 00 00 a0 00 00 b7 08
>3a0258	9f 00 f1 3a e8 c8 e0 18 00 d0 f3 2b 28 38 60 08
>3a0268	8b 08 e2 20 48 a9 3a 48 ab 68 28 20 0b 02 e2 20
>3a0278	a0 00 00 a2 00 00 bf 00 f1 3a f0 2d d9 00 f0 d0
>3a0288	2f e8 c8 e0 08 00 d0 ee c8 a2 08 00 bf 00 f1 3a
>3a0298	f0 10 d9 00 f0 d0 19 e8 c8 e0 03 00 d0 ee ab 28
>3a02a8	38 60 b9 00 f0 f0 f7 80 07 b9 00 f0 c9 2e f0 d8
>3a02b8	20 23 02 b0 b9 ab 28 18 60 0b 8b 08 08 c2 20 48
>3a02c8	a9 00 08 5b 68 28 c2 30 20 67 02 90 2c a2 10 00
>3a02d8	bf 00 f1 3a 85 08 bf 02 f1 3a 85 0a e2 20 a7 08
>3a02e8	87 57 f0 10 c2 20 e6 08 d0 02 e6 0a e6 57 d0 ee
>3a02f8	e6 59 80 ea 28 ab 2b 38 60 28 ab 2b 18 60 e2 20
>3a0308	a2 00 00 a9 00 9f 28 f1 3a e8 e0 12 00 d0 f6 a9
>3a0318	80 8f b2 08 00 e2 20 a9 00 8f 89 0f 00 60 08 e2
>3a0328	20 48 48 a9 00 22 3c 10 00 68 22 18 10 00 af 89
>3a0338	0f 00 29 01 d0 f8 68 28 60 08 e2 20 48 48 a9 01
>3a0348	22 3c 10 00 68 22 18 10 00 af 89 0f 00 29 01 d0
>3a0358	f8 68 28 60 08 c2 20 48 e2 20 a9 0d 20 18 00 c2
>3a0368	20 68 28 60 08 22 78 10 00 28 60 08 e2 20 c2 10
>3a0378	da 5a 8f b3 08 00 af b2 08 00 29 20 f0 07 af b3
>3a0388	08 00 20 80 00 af b2 08 00 29 80 f0 07 af b3 08
>3a0398	00 20 26 03 af b2 08 00 29 40 f0 14 af b3 08 00
>3a03a8	20 41 03 af b3 08 00 c9 0d d0 05 a9 0a 20 41 03
>3a03b8	7a fa 28 60 08 e2 20 bd 00 00 f0 06 20 18 00 e8
>3a03c8	80 f5 28 60 08 c2 20 48 48 4a 4a 4a 4a 4a 4a 4a
>3a03d8	4a 20 e6 03 68 29 ff 00 20 e6 03 68 28 60 08 c2
>3a03e8	20 48 e2 20 48 4a 4a 4a 4a 20 fd 03 68 20 fd 03
>3a03f8	c2 20 68 28 60 08 c2 30 da 29 0f 00 aa bf 00 d0
>3a0408	3a 20 18 00 fa 28 60 08 e2 20 c9 5b b0 04 c9 41
>3a0418	b0 0b c9 7b b0 04 c9 61 b0 03 28 18 60 28 38 60
>3a0428	08 e2 20 c9 3a b0 04 c9 30 b0 03 28 18 60 28 38
>3a0438	60 08 e2 20 c9 3a b0 04 c9 30 b0 13 c9 67 b0 04
>3a0448	c9 61 b0 0b c9 47 b0 04 c9 41 b0 03 28 18 60 28
>3a0458	38 60 08 e2 20 c9 3a b0 04 c9 30 b0 12 c9 67 b0
>3a0468	04 c9 61 b0 0f c9 47 b0 04 c9 41 b0 09 28 60 38
>3a0478	e9 30 80 f9 29 df 38 e9 37 80 f2 08 e2 20 c9 7b
>3a0488	b0 06 c9 61 90 02 29 df 28 60 08 e2 20 c2 10 bd
>3a0498	00 00 f0 09 20 83 04 9d 00 00 e8 80 f2 28 60 08
>3a04a8	0b 08 c2 20 48 a9 00 08 5b 68 28 c2 20 48 06 21
>3a04b8	26 23 a5 21 85 0c a5 23 85 0e 06 0c 26 0e 06 0c
>3a04c8	26 0e 18 a5 21 65 0c 85 21 a5 23 65 0e 85 23 68
>3a04d8	2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2
>3a04e8	20 a5 21 8f 12 01 00 a9 0a 00 8f 10 01 00 af 14
>3a04f8	01 00 85 21 64 23 af 16 01 00 85 27 64 29 e2 20
>3a0508	a9 00 85 25 85 2b 2b 28 60 08 c2 20 a5 21 d0 08
>3a0518	a5 23 d0 04 28 e2 02 60 28 c2 02 60 08 e2 20 a5
>3a0528	25 c9 00 d0 02 28 60 08 c2 20 48 a9 00 08 5b 68
>3a0538	28 e2 20 a9 04 8f d0 08 00 dc d1 08 08 e2 20 a5
>3a0548	25 c9 02 d0 02 28 60 08 c2 20 48 a9 00 08 5b 68
>3a0558	28 e2 20 a9 04 8f d0 08 00 dc d1 08 08 e2 20 a5
>3a0568	25 c9 00 d0 08 c2 20 a5 23 d0 17 28 60 08 c2 20
>3a0578	48 a9 00 08 5b 68 28 e2 20 a9 04 8f d0 08 00 dc
>3a0588	d1 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09
>3a0598	8f d0 08 00 dc d1 08 08 e2 20 a5 25 c9 00 d0 0e
>3a05a8	a5 24 d0 1f a5 23 d0 1b a5 22 d0 17 28 60 08 c2
>3a05b8	20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d0 08 00
>3a05c8	dc d1 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a05d8	09 8f d0 08 00 dc d1 08 08 0b 08 c2 20 48 a9 00
>3a05e8	08 5b 68 28 c2 30 64 21 64 23 e2 20 64 25 a7 00
>3a05f8	c9 26 f0 3a e2 20 a7 00 20 28 04 90 6c 20 a7 04
>3a0608	38 e9 30 c2 20 29 ff 00 18 65 21 85 21 a5 23 69
>3a0618	00 00 85 23 20 b1 19 80 db 08 c2 20 48 a9 00 08
>3a0628	5b 68 28 e2 20 a9 02 8f d0 08 00 dc d1 08 20 b1
>3a0638	19 a7 00 c9 48 f0 04 c9 68 d0 de 20 b1 19 e2 20
>3a0648	a7 00 20 39 04 90 22 20 5a 04 c2 20 06 21 26 23
>3a0658	06 21 26 23 06 21 26 23 06 21 26 23 29 ff 00 18
>3a0668	65 21 85 21 20 b1 19 80 d5 2b 28 60 08 c2 30 38
>3a0678	a5 04 e5 18 a8 e2 20 b7 18 f0 10 c9 20 f0 06 c9
>3a0688	09 f0 02 28 60 88 c0 ff ff d0 ec a9 00 60 08 0b
>3a0698	08 c2 20 48 a9 00 08 5b 68 28 c2 30 a5 18 85 00
>3a06a8	e2 20 a5 1a 85 02 20 d2 19 a7 00 20 28 04 90 0c
>3a06b8	20 e0 05 c2 20 a5 21 85 d4 20 d2 19 c2 20 a5 00
>3a06c8	85 18 e2 20 a5 02 85 1a 20 e4 06 e2 20 20 55 07
>3a06d8	c9 00 f0 05 20 d4 08 80 f4 2b 28 60 08 c2 20 a5
>3a06e8	18 85 00 a5 1a 85 02 a2 00 00 e2 20 a0 00 00 e0
>3a06f8	00 00 f0 0d b7 00 f0 53 c9 3a f0 04 c9 20 d0 33
>3a0708	c8 b7 00 f0 46 c9 52 f0 10 c9 72 d0 26 b7 00 f0
>3a0718	3a c9 52 f0 04 c9 72 d0 1a c8 b7 00 f0 2d c9 45
>3a0728	f0 04 c9 65 d0 0d c8 b7 00 f0 20 c9 4d f0 0a c9
>3a0738	6d f0 06 e8 20 b1 19 80 b3 a7 00 c9 3a d0 03 20
>3a0748	b1 19 a9 03 85 1c a9 8e 20 d4 08 28 60 08 0b 08
>3a0758	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 7f 85 1c c2
>3a0768	10 20 89 08 a5 1c d0 03 4c f8 07 c2 20 a5 18 85
>3a0778	00 e2 20 a5 1a 85 02 c2 20 64 04 64 06 e2 30 a0
>3a0788	00 b7 00 f0 da c9 8e f0 d6 c8 c4 1c 90 f3 c2 10
>3a0798	a7 00 c9 22 d0 05 20 10 08 80 28 a5 1c c9 01 f0
>3a07a8	19 c2 20 a5 00 c5 18 d0 08 e2 20 a5 02 c5 1a f0
>3a07b8	09 e2 20 a7 04 20 15 3a b0 09 e2 20 20 20 08 c9
>3a07c8	00 d0 11 c2 20 a5 00 85 04 e2 20 a5 02 85 06 20
>3a07d8	b1 19 80 a9 c9 81 d0 18 20 74 06 c9 00 f0 14 89
>3a07e8	80 10 0b 20 75 09 c9 30 f0 04 a9 af 80 02 a9 81
>3a07f8	2b 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a0808	02 8f d0 08 00 dc d1 08 08 e2 20 20 b1 19 a7 00
>3a0818	f0 04 c9 22 d0 f5 28 60 08 0b c2 30 da 5a 08 c2
>3a0828	20 48 a9 00 08 5b 68 28 a9 9f 09 85 08 e2 20 a9
>3a0838	3a 85 0a a2 80 00 e2 20 a0 01 00 b7 08 f0 26 c5
>3a0848	1c d0 29 c2 30 a0 02 00 b7 08 85 0c e2 20 a9 3a
>3a0858	85 0e e2 10 a0 00 b7 00 20 83 04 d7 0c d0 0d c8
>3a0868	c4 1c 90 f2 8a c2 10 7a fa 2b 28 60 c2 30 18 a5
>3a0878	08 69 08 00 85 08 e2 20 a5 0a 69 00 85 0a e8 80
>3a0888	b5 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 c2 30
>3a0898	a9 9f 09 85 08 a9 3a 00 85 0a 64 0c e2 20 a0 01
>3a08a8	00 b7 08 f0 1d c5 1c b0 06 c5 0c 90 02 85 0c c2
>3a08b8	20 18 a5 08 69 08 00 85 08 a5 0a 69 00 00 85 0a
>3a08c8	80 da e2 20 a5 0c 85 1c ab 2b 28 60 08 0b 08 c2
>3a08d8	20 48 a9 00 08 5b 68 28 e2 20 87 00 c2 20 18 a5
>3a08e8	00 69 01 00 85 08 a5 02 69 00 00 85 0a e2 10 a4
>3a08f8	1c 88 e2 20 b7 08 87 08 f0 13 c2 20 18 a5 08 69
>3a0908	01 00 85 08 a5 0a 69 00 00 85 0a 80 e5 2b 28 60
>3a0918	08 c2 30 29 7f 00 0a 0a 0a 18 69 9f 09 aa 28 60
>3a0928	08 8b 0b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20
>3a0938	48 a9 3a 48 ab 68 28 e2 20 c2 10 20 18 09 bd 00
>3a0948	00 c2 20 29 0f 00 2b ab 28 60 08 8b 0b 08 c2 20
>3a0958	48 a9 00 08 5b 68 28 08 e2 20 48 a9 3a 48 ab 68
>3a0968	28 c2 30 20 18 09 bd 04 00 2b ab 28 60 08 8b 0b
>3a0978	08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 3a
>3a0988	48 ab 68 28 e2 20 c2 10 20 18 09 bd 00 00 c2 20
>3a0998	29 f0 00 2b ab 28 60 03 01 10 d0 99 1f 00 00 03
>3a09a8	01 12 d0 ce 1f 00 00 02 01 14 d0 dc 1f 00 00 02
>3a09b8	01 16 d0 f5 1f 00 00 02 03 18 d0 08 20 00 00 00
>3a09c8	01 1c d0 00 00 00 00 04 01 1e d0 4a 20 00 00 04
>3a09d8	01 20 d0 80 20 00 00 04 01 22 d0 65 20 00 00 05
>3a09e8	03 24 d0 39 20 00 00 06 03 28 d0 1b 20 00 00 07
>3a09f8	02 2c d0 2a 20 00 00 ff 01 2f d0 00 00 00 00 40
>3a0a08	01 31 d0 00 00 00 00 20 03 33 d0 b6 2c 00 00 20
>3a0a18	05 37 d0 4d 30 00 00 20 03 3d d0 ac 2f 00 00 20
>3a0a28	04 41 d0 60 2f 00 00 20 03 46 d0 57 2f 00 00 20
>3a0a38	02 4a d0 03 2f 00 00 50 04 4d d0 00 00 00 00 50
>3a0a48	04 52 d0 00 00 00 00 20 05 57 d0 64 2e 00 00 20
>3a0a58	06 5d d0 c9 2e 00 00 20 03 64 d0 cd 2c 00 00 50
>3a0a68	02 68 d0 00 00 00 00 50 04 6b d0 00 00 00 00 20
>3a0a78	04 70 d0 ad 2d 00 00 20 02 75 d0 c7 2c 00 00 20
>3a0a88	04 78 d0 ca 2c 00 00 50 05 7d d0 00 00 00 00 50
>3a0a98	05 83 d0 00 00 00 00 20 04 89 d0 c4 2c 00 00 20
>3a0aa8	03 8e d0 a2 2f 00 00 20 04 92 d0 a1 2c 00 00 20
>3a0ab8	04 97 d0 45 2c 00 00 20 05 9c d0 ef 2b 00 00 20
>3a0ac8	05 a2 d0 90 2b 00 00 20 03 a8 d0 8c 2b 00 00 20
>3a0ad8	04 ac d0 81 2a 00 00 20 04 b1 d0 7f 2b 00 00 20
>3a0ae8	07 b6 d0 83 2b 00 00 20 03 be d0 e8 29 00 00 20
>3a0af8	04 c2 d0 61 29 00 00 04 02 c7 d0 d3 20 00 00 04
>3a0b08	02 ca d0 b6 20 00 00 04 02 cd d0 9b 20 00 00 30
>3a0b18	01 d0 d0 d4 31 00 00 30 03 d2 d0 80 35 00 00 30
>3a0b28	04 d6 d0 c6 35 00 00 30 05 db d0 43 36 00 00 30
>3a0b38	05 e1 d0 ff 35 00 00 30 04 e7 d0 78 36 00 00 30
>3a0b48	03 ec d0 c3 36 00 00 30 03 f0 d0 fe 36 00 00 30
>3a0b58	03 f4 d0 73 37 00 00 30 03 f8 d0 e8 37 00 00 30
>3a0b68	03 fc d0 18 38 00 00 30 04 00 d1 f9 34 00 00 30
>3a0b78	03 05 d1 98 34 00 00 30 04 09 d1 51 34 00 00 30
>3a0b88	03 0e d1 05 34 00 00 30 05 12 d1 5a 33 00 00 30
>3a0b98	06 18 d1 97 32 00 00 30 04 1f d1 f6 31 00 00 10
>3a0ba8	03 24 d1 9c 38 00 00 10 03 28 d1 67 38 00 00 10
>3a0bb8	04 2c d1 29 39 00 00 10 04 31 d1 b3 38 00 00 10
>3a0bc8	03 36 d1 9b 39 00 00 10 07 3a d1 64 38 00 00 20
>3a0bd8	03 42 d1 f7 28 00 00 20 05 46 d1 3d 28 00 00 20
>3a0be8	09 4c d1 33 22 00 00 20 09 56 d1 ce 21 00 00 20
>3a0bf8	0a 60 d1 fc 21 00 00 20 07 6b d1 60 21 00 00 30
>3a0c08	08 73 d1 08 31 00 00 20 07 7c d1 f2 20 00 00 30
>3a0c18	08 84 d1 6e 31 00 00 20 08 8d d1 36 23 00 00 20
>3a0c28	08 96 d1 9c 22 00 00 20 06 9f d1 5e 23 00 00 20
>3a0c38	09 a6 d1 1c 24 00 00 20 04 b0 d1 af 25 00 00 20
>3a0c48	04 b5 d1 f5 25 00 00 20 04 ba d1 5b 26 00 00 20
>3a0c58	06 bf d1 f7 26 00 00 20 08 c6 d1 7a 27 00 00 20
>3a0c68	0a cf d1 ae 27 00 00 00 00 00 00 00 00 00 00 08
>3a0c78	0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 a9 ff ff
>3a0c88	85 b7 e2 20 a9 34 85 b9 c2 20 64 b4 64 ba e2 20
>3a0c98	64 b6 64 bc 2b 28 60 5a 08 e2 20 85 e7 c2 10 86
>3a0ca8	8d c2 20 a5 0e 48 a5 0c 48 a5 12 48 a5 10 48 20
>3a0cb8	4f 0d b0 03 20 d3 0c 20 db 0e c2 20 68 85 10 68
>3a0cc8	85 12 68 85 0c 68 85 0e 28 7a 60 08 0b 08 c2 20
>3a0cd8	48 a9 00 08 5b 68 28 e2 20 a6 8d ca 86 0c e8 c2
>3a0ce8	30 38 a5 b7 e5 0c 85 bd e2 20 a5 b9 e9 00 85 bf
>3a0cf8	20 db 0e e2 20 a5 e7 a0 00 00 97 c0 a9 00 a0 01
>3a0d08	00 97 c0 a0 02 00 97 c0 c2 20 a9 00 00 97 c0 c2
>3a0d18	20 18 a5 b7 69 01 00 a0 05 00 97 c0 e2 20 c8 c8
>3a0d28	a5 b9 69 00 97 c0 c2 20 a5 bd 85 b4 e2 20 a5 bf
>3a0d38	85 b6 c2 20 38 a5 c0 e9 01 00 85 b7 e2 20 a5 c2
>3a0d48	e9 00 85 b9 2b 28 60 08 0b 08 c2 20 48 a9 00 08
>3a0d58	5b 68 28 c2 30 c2 20 a5 ba 85 c6 e2 20 a5 bc 85
>3a0d68	c8 a5 c6 d0 17 e2 20 a5 c8 d0 11 c2 20 a9 00 00
>3a0d78	85 cc e2 20 a9 00 85 ce 2b 28 18 60 c2 20 a0 05
>3a0d88	00 b7 c6 85 c9 e2 20 c8 c8 b7 c6 85 cb c2 20 18
>3a0d98	a5 c6 65 8d 85 0c e2 20 a5 c8 69 00 85 0e c2 20
>3a0da8	18 a5 0c 69 08 00 85 0c e2 20 a5 0e 69 00 85 0e
>3a0db8	c2 20 a5 0c c5 c9 d0 28 e2 20 a5 0e c5 cb d0 20
>3a0dc8	c2 20 a5 cc d0 5d e2 20 a5 ce d0 57 c2 20 a0 02
>3a0dd8	00 b7 c6 85 ba e2 20 c8 c8 b7 c6 85 bc 4c 8c 0e
>3a0de8	c2 20 a5 0c 69 08 00 85 10 e2 20 a5 0e 69 00 85
>3a0df8	12 e2 20 a5 c3 c5 10 b0 3e 90 08 c2 20 a5 c3 c5
>3a0e08	10 b0 34 c2 20 a5 c6 85 cc e2 20 a5 c8 85 ce c2
>3a0e18	20 a0 02 00 b7 cc 85 c6 e2 20 c8 c8 b7 cc 85 c8
>3a0e28	4c 69 0d c2 20 a0 02 00 b7 c6 97 cc e2 20 c8 c8
>3a0e38	b7 c6 97 cc 4c 8c 0e c2 20 a0 05 00 b7 c6 97 0c
>3a0e48	e2 20 c8 c8 b7 c6 97 0c c2 20 a0 02 00 b7 c6 97
>3a0e58	0c e2 20 c8 c8 b7 c6 97 0c c2 20 a5 cc d0 14 e2
>3a0e68	20 a5 cc d0 0e c2 20 a5 0c 85 ba e2 20 a5 0e 85
>3a0e78	bc 80 11 c2 20 a0 02 00 a5 0c 97 cc e2 20 c8 c8
>3a0e88	a5 0e 97 cc c2 20 a5 c6 85 c0 e2 20 a5 c8 85 c2
>3a0e98	c2 20 a5 c0 85 b4 e2 20 a5 c2 85 b6 c2 20 a0 05
>3a0ea8	00 a5 0c 97 c0 e2 20 c8 c8 a5 0e 97 c0 c2 20 a0
>3a0eb8	02 00 a9 00 00 97 c0 e2 20 c8 c8 97 c0 e2 20 a5
>3a0ec8	e7 e2 20 a0 00 00 97 c0 a0 01 00 a9 00 97 c0 2b
>3a0ed8	28 38 60 08 c2 20 38 a5 bd e9 08 00 85 c0 e2 20
>3a0ee8	a5 bf e9 00 85 c2 28 60 08 e2 20 a5 c2 f0 04 c9
>3a0ef8	35 b0 12 c2 20 a5 c0 f0 0c e2 20 a0 01 00 b7 c0
>3a0f08	1a 97 c0 28 60 00 ea 08 e2 20 a5 c2 f0 04 c9 35
>3a0f18	b0 17 c2 20 a5 c0 f0 11 e2 20 a0 01 00 b7 c0 3a
>3a0f28	97 c0 d0 03 20 33 0f 28 60 00 ea 08 c2 20 a5 ba
>3a0f38	d0 21 e2 20 a5 bc d0 1b a5 c2 85 bc c2 20 a5 c0
>3a0f48	85 ba a9 00 00 a0 02 00 97 c0 c8 c8 e2 20 97 c0
>3a0f58	4c 1a 10 e2 20 a5 bc c5 c2 90 28 c2 20 a5 ba c5
>3a0f68	c0 90 20 c2 20 a5 ba a0 02 00 97 c0 e2 20 c8 c8
>3a0f78	a5 bc 97 c0 c2 20 a5 c0 85 ba e2 20 a5 c2 85 bc
>3a0f88	4c 1a 10 c2 20 a5 ba 85 08 e2 20 a5 bc 85 0a e2
>3a0f98	20 a0 04 00 b7 08 c5 c5 90 32 d0 0b c2 20 a0 02
>3a0fa8	00 b7 08 c5 c3 90 25 c2 20 a0 02 00 b7 08 97 c0
>3a0fb8	e2 20 c8 c8 b7 08 97 c0 c2 20 a5 c0 a0 02 00 97
>3a0fc8	08 e2 20 a5 c2 c8 c8 97 08 4c 1a 10 c2 20 a0 02
>3a0fd8	00 b7 08 d0 08 e2 20 c8 c8 b7 08 f0 19 c2 20 a0
>3a0fe8	02 00 b7 08 85 0c e2 20 c8 c8 b7 08 85 0a c2 20
>3a0ff8	a5 0c 85 08 80 99 c2 20 a5 c0 a0 02 00 97 08 e2
>3a1008	20 c8 c8 a5 c2 97 08 a9 00 97 c0 c2 20 a0 02 00
>3a1018	97 c0 20 1f 10 28 60 08 c2 20 a5 ba 85 c0 e2 20
>3a1028	a5 bc 85 c2 c2 20 a5 c0 d0 09 e2 20 a5 c2 d0 03
>3a1038	4c c2 10 c2 20 a0 02 00 b7 c0 85 0c e2 20 c8 c8
>3a1048	b7 c0 85 0e c2 20 a0 05 00 b7 c0 85 10 e2 20 c8
>3a1058	c8 b7 c0 85 12 c2 20 a5 0c c5 10 d0 08 e2 20 a5
>3a1068	0e c5 12 f0 1f c2 20 a0 02 00 b7 c0 85 0c e2 20
>3a1078	c8 c8 b7 c0 85 0e c2 20 a5 0c 85 c0 e2 20 a5 0e
>3a1088	85 c2 80 a0 c2 20 a0 02 00 b7 c0 85 0c e2 20 c8
>3a1098	c8 b7 c0 85 0e c2 20 a0 02 00 b7 0c 97 c0 e2 20
>3a10a8	c8 c8 b7 0c 97 c0 c2 20 a0 05 00 b7 0c 97 c0 e2
>3a10b8	20 c8 c8 b7 0c 97 c0 4c 3b 10 28 60 08 c2 10 e2
>3a10c8	20 64 14 a5 df 1a 1a 85 15 e2 20 a5 e0 85 16 c5
>3a10d8	b9 90 1f f0 08 c2 20 a5 14 c5 b7 90 15 08 c2 20
>3a10e8	48 a9 00 08 5b 68 28 e2 20 a9 03 8f d0 08 00 dc
>3a10f8	d1 08 28 60 c9 00 d0 05 c0 01 00 f0 05 09 30 97
>3a1108	14 c8 60 08 c2 30 64 0c a5 23 10 1a 18 a5 21 49
>3a1118	ff ff 69 01 00 85 21 a5 23 49 ff ff 69 00 00 85
>3a1128	23 a9 ff ff 85 0c 64 10 64 12 a2 1f 00 f8 06 21
>3a1138	26 23 a5 10 65 10 85 10 a5 12 65 12 85 12 ca 10
>3a1148	ed d8 e2 20 20 c4 10 a0 00 00 a5 0c f0 04 a9 2d
>3a1158	80 02 a9 20 97 14 c8 a2 03 00 b5 10 29 f0 4a 4a
>3a1168	4a 4a 20 fc 10 b5 10 29 0f 20 fc 10 ca 10 eb c0
>3a1178	01 00 d0 04 a9 30 87 14 a9 00 97 14 28 60 00 ea
>3a1188	08 e2 20 c2 10 a0 00 00 bd 00 00 f0 04 e8 c8 80
>3a1198	f7 28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28
>3a11a8	e2 20 c2 10 08 c2 20 48 e2 20 a5 23 48 ab c2 20
>3a11b8	68 28 a6 21 20 88 11 84 0c 08 c2 20 48 e2 20 a5
>3a11c8	29 48 ab c2 20 68 28 a6 27 20 88 11 c2 20 98 38
>3a11d8	65 0c aa e2 20 a9 02 20 9f 0c c2 20 a5 b4 85 08
>3a11e8	e2 20 a5 b6 85 0a a0 00 00 08 c2 20 48 e2 20 a5
>3a11f8	23 48 ab c2 20 68 28 a6 21 bd 00 00 f0 06 97 08
>3a1208	e8 c8 80 f5 e2 20 08 c2 20 48 e2 20 a5 29 48 ab
>3a1218	c2 20 68 28 a6 27 bd 00 00 97 08 f0 04 e8 c8 80
>3a1228	f5 c2 20 a5 08 85 21 e2 20 a5 0a 85 23 a9 02 85
>3a1238	25 ab 2b 28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b
>3a1248	68 28 c2 30 08 c2 20 48 e2 20 a5 23 48 ab c2 20
>3a1258	68 28 a6 21 20 88 11 98 aa e8 e2 20 a9 02 20 9f
>3a1268	0c c2 20 a5 bd 85 08 e2 20 a5 bf 85 0a a0 00 00
>3a1278	b7 21 97 08 f0 03 c8 80 f7 a5 08 85 21 a5 09 85
>3a1288	22 a5 0a 85 23 a9 00 85 24 ab 2b 28 60 08 e2 20
>3a1298	c2 10 a0 00 00 b7 21 f0 05 c8 80 f9 84 90 c2 30
>3a12a8	c4 27 90 13 f0 11 a5 8d 30 0d f0 0b c4 8d b0 12
>3a12b8	a5 27 d0 0e 4c 16 13 20 c4 10 e2 20 a9 00 87 14
>3a12c8	80 39 20 c4 10 c2 30 18 a5 21 65 27 85 21 a5 23
>3a12d8	69 00 00 85 23 a0 00 00 e2 20 a7 21 97 14 f0 1b
>3a12e8	c2 20 18 a5 21 69 01 00 85 21 a5 23 69 00 00 85
>3a12f8	23 c8 c4 8d d0 e2 a9 00 00 97 14 c2 20 a5 14 85
>3a1308	21 a5 16 85 23 e2 20 a9 02 85 25 20 3d 12 28 60
>3a1318	48 5a 0b 08 08 c2 20 48 a9 00 08 5b 68 28 c2 30
>3a1328	a9 00 00 85 00 85 18 a9 01 00 85 02 85 1a ad 8a
>3a1338	0f 30 20 a0 02 00 b7 18 f0 0f c5 53 90 10 c5 57
>3a1348	f0 02 b0 05 20 70 13 80 e5 28 2b 7a 68 60 20 7a
>3a1358	1a 80 db 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a1368	01 8f d0 08 00 dc d1 08 08 c2 30 85 21 64 23 20
>3a1378	0b 11 a5 14 1a 85 21 a5 16 85 23 20 b8 30 18 a5
>3a1388	18 69 04 00 85 00 a5 1a 69 00 00 85 02 e2 20 a9
>3a1398	20 20 18 00 c2 20 20 af 13 90 fb e2 20 a9 0d 20
>3a13a8	18 00 20 7a 1a 28 60 08 0b 8b 08 c2 20 48 a9 00
>3a13b8	08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 e2 20
>3a13c8	c2 10 a7 00 f0 3a 30 05 20 18 00 80 29 c2 20 29
>3a13d8	7f 00 0a 0a 0a 18 69 9f 09 85 08 a9 3a 00 69 00
>3a13e8	00 85 0a 08 e2 20 48 a9 3a 48 ab 68 28 a0 02 00
>3a13f8	b7 08 aa 20 bc 03 c2 20 20 b1 19 ab 2b 28 18 60
>3a1408	ab 2b 28 38 60 08 c2 20 a9 ff 6f 85 1d a9 ff 7f
>3a1418	85 1f a9 ff ff 85 21 85 23 85 27 85 29 e2 20 85
>3a1428	25 85 2b 28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b
>3a1438	68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 30 5a a4
>3a1448	1d bd 00 00 99 00 00 bd 02 00 99 02 00 e2 20 bd
>3a1458	04 00 99 04 00 c2 20 38 98 e9 05 00 85 1d 7a ab
>3a1468	2b 28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28
>3a1478	08 e2 20 48 a9 00 48 ab 68 28 c2 30 5a 18 a5 1d
>3a1488	69 05 00 85 1d a8 b9 00 00 9d 00 00 b9 02 00 9d
>3a1498	02 00 e2 20 b9 04 00 9d 04 00 bd 00 00 7a ab 2b
>3a14a8	28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08
>3a14b8	e2 20 48 a9 00 48 ab 68 28 e2 20 c2 10 5a a4 1f
>3a14c8	99 00 00 88 84 1f 7a ab 2b 28 60 08 0b 8b 08 c2
>3a14d8	20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab
>3a14e8	68 28 e2 20 c2 10 5a a4 1f c8 84 1f b9 00 00 c2
>3a14f8	20 29 ff 00 7a ab 2b 28 60 08 e2 20 a9 01 20 aa
>3a1508	14 28 60 5a 08 8b 08 e2 20 48 a9 00 48 ab 68 28
>3a1518	e2 20 a4 1f b9 01 00 c9 01 d0 08 c2 20 e6 1f ab
>3a1528	28 7a 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a1538	02 8f d0 08 00 dc d1 08 08 0b 8b c2 20 48 08 c2
>3a1548	20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab
>3a1558	68 28 e2 20 c2 10 a4 1f c0 ff 7f f0 11 20 28 09
>3a1568	85 0c b9 01 00 20 28 09 c5 0c f0 02 90 08 c2 20
>3a1578	68 ab 2b 28 18 60 c2 20 68 ab 2b 28 38 60 4c e0
>3a1588	05 08 e2 20 a9 00 8f 00 4d 00 a2 01 00 20 0b 17
>3a1598	20 64 05 c2 20 a5 21 9f 00 4d 00 e2 20 af 00 4d
>3a15a8	00 1a 30 34 8f 00 4d 00 e8 e8 20 d2 19 e2 20 a7
>3a15b8	00 c9 8d f0 09 c9 2c d0 0a 20 b1 19 80 cf 20 b1
>3a15c8	19 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a15d8	02 8f d0 08 00 dc d1 08 08 c2 20 48 a9 00 08 5b
>3a15e8	68 28 e2 20 a9 0a 8f d0 08 00 dc d1 08 08 20 75
>3a15f8	3c 90 23 e2 20 a5 e7 29 80 d0 06 20 e9 3a 4c 1c
>3a1608	16 e2 20 a9 8c 20 aa 1a 20 01 15 20 89 15 20 34
>3a1618	3f 20 0b 15 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a1628	e2 20 a9 02 8f d0 08 00 dc d1 08 08 0b 08 c2 20
>3a1638	48 a9 00 08 5b 68 28 e2 20 c2 10 20 b1 19 a0 00
>3a1648	00 b7 00 f0 24 c9 22 f0 03 c8 80 f5 84 0c e2 20
>3a1658	a9 02 a6 0c e8 20 9f 0c a0 00 00 c4 0c f0 1f a7
>3a1668	00 97 bd c8 20 b1 19 80 f2 08 c2 20 48 a9 00 08
>3a1678	5b 68 28 e2 20 a9 02 8f d0 08 00 dc d1 08 a9 00
>3a1688	97 bd c2 20 a5 bd 85 21 e2 20 a5 bf 85 23 a9 02
>3a1698	85 25 20 b1 19 2b 28 60 08 e2 20 a7 00 c2 20 29
>3a16a8	ff 00 20 52 09 85 2d 20 01 15 08 e2 20 48 a9 00
>3a16b8	48 ab 68 28 20 c4 16 20 0b 15 28 60 20 b1 19 6c
>3a16c8	2d 08 08 0b 8b c2 20 48 08 c2 20 48 a9 00 08 5b
>3a16d8	68 28 c2 30 a2 27 08 20 6b 14 a2 21 08 20 6b 14
>3a16e8	20 d3 14 20 52 09 85 2d 08 e2 20 48 a9 00 48 ab
>3a16f8	68 28 20 08 17 a2 21 08 20 2d 14 68 ab 2b 28 60
>3a1708	6c 2d 08 08 08 c2 20 48 a9 00 08 5b 68 28 08 e2
>3a1718	20 48 a9 00 48 ab 68 28 c2 10 da e2 20 a7 00 d0
>3a1728	03 4c ce 17 30 33 c9 20 d0 03 4c c8 17 c9 3a b0
>3a1738	04 c9 30 b0 56 c9 26 f0 52 c9 22 d0 03 4c e1 17
>3a1748	c9 5b b0 07 c9 41 90 03 4c ed 17 c9 7b b0 07 c9
>3a1758	61 90 03 4c ed 17 4c ce 17 c9 8c f0 40 c9 8d f0
>3a1768	41 20 75 09 c9 30 d0 0c 20 a0 16 a2 21 08 20 2d
>3a1778	14 4c 23 17 c9 00 d0 4e a7 00 a6 1f e0 ff 7f f0
>3a1788	05 20 40 15 b0 12 20 aa 14 80 35 c2 20 20 86 15
>3a1798	a2 21 08 20 2d 14 80 83 20 ca 16 80 dd 20 aa 14
>3a17a8	80 1e e2 20 a4 1f c0 ff 7f f0 46 a4 1f b9 01 00
>3a17b8	c9 01 f0 3d c9 8c f0 05 20 ca 16 80 ee 20 d3 14
>3a17c8	20 b1 19 4c 23 17 a6 1f e0 ff 7f b0 24 bd 01 00
>3a17d8	c9 01 f0 1d 20 ca 16 80 ed 20 33 16 a2 21 08 20
>3a17e8	2d 14 4c 23 17 20 f5 15 a2 21 08 20 2d 14 4c 23
>3a17f8	17 a2 21 08 20 6b 14 fa 28 60 08 0b 8b 08 e2 20
>3a1808	48 a9 00 48 ab 68 28 08 c2 20 48 a9 00 08 5b 68
>3a1818	28 c2 30 a9 fd 5f 85 31 ab 2b 28 60 08 0b 08 c2
>3a1828	20 48 a9 00 08 5b 68 28 c2 30 92 31 c6 31 c6 31
>3a1838	2b 28 60 08 c2 30 29 ff 00 20 24 18 28 60 08 0b
>3a1848	08 c2 20 48 a9 00 08 5b 68 28 c2 30 e6 31 e6 31
>3a1858	b2 31 2b 28 60 e2 20 c2 10 20 5c 03 af d0 08 00
>3a1868	0a c2 20 29 ff 00 a8 08 e2 20 48 a9 3a 48 ab 68
>3a1878	28 be af 18 20 bc 03 c2 20 a5 d4 f0 27 a2 c7 18
>3a1888	20 bc 03 08 e2 20 48 a9 00 48 ab 68 28 c2 20 af
>3a1898	d4 08 00 8f 21 08 00 a9 00 00 8f 23 08 00 20 d8
>3a18a8	30 20 5c 03 4c 58 1f cb 18 ce 18 d4 18 e1 18 ef
>3a18b8	18 fd 18 10 19 26 19 36 19 45 19 52 19 63 19 20
>3a18c8	61 74 00 4f 4b 00 42 72 65 61 6b 00 53 79 6e 74
>3a18d8	61 78 20 65 72 72 6f 72 00 4f 75 74 20 6f 66 20
>3a18e8	6d 65 6d 6f 72 79 00 54 79 70 65 20 6d 69 73 6d
>3a18f8	61 74 63 68 00 56 61 72 69 61 62 6c 65 20 6e 6f
>3a1908	74 20 66 6f 75 6e 64 00 4c 69 6e 65 20 6e 75 6d
>3a1918	62 65 72 20 6e 6f 74 20 66 6f 75 6e 64 00 53 74
>3a1928	61 63 6b 20 75 6e 64 65 72 66 6c 6f 77 00 53 74
>3a1938	61 63 6b 20 6f 76 65 72 66 6c 6f 77 00 4f 75 74
>3a1948	20 6f 66 20 72 61 6e 67 65 00 49 6c 6c 65 67 61
>3a1958	6c 20 61 72 67 75 6d 65 6e 74 00 46 69 6c 65 20
>3a1968	6e 6f 74 20 66 6f 75 6e 64 00 08 0b 08 c2 20 48
>3a1978	a9 00 08 5b 68 28 e2 20 a9 00 85 cf 2b 28 60 0b
>3a1988	08 08 c2 20 48 a9 00 08 5b 68 28 08 c2 20 a9 5d
>3a1998	18 8f d1 08 00 e2 20 a9 3a 8f d3 08 00 28 20 a2
>3a19a8	2f 20 83 2b 64 2f 28 2b 60 08 0b 08 c2 20 48 a9
>3a19b8	00 08 5b 68 28 c2 20 18 a5 00 69 01 00 85 00 e2
>3a19c8	20 a5 02 69 00 85 02 2b 28 60 08 0b 08 c2 20 48
>3a19d8	a9 00 08 5b 68 28 e2 20 a7 00 f0 0f c9 20 f0 06
>3a19e8	c9 09 f0 02 80 05 20 b1 19 80 ed 2b 28 60 08 e2
>3a19f8	20 a7 00 f0 09 c9 3a f0 05 20 b1 19 80 f3 28 60
>3a1a08	08 e2 20 64 34 a7 00 f0 19 c5 35 f0 2c c9 98 f0
>3a1a18	1e c9 9c f0 1a c9 9b f0 1a c9 9d f0 16 20 b1 19
>3a1a28	80 e3 20 7a 1a c2 20 a5 d4 f0 1d e2 20 80 d6 e6
>3a1a38	34 80 ea c6 34 30 26 80 e4 a5 33 30 06 a5 34 f0
>3a1a48	02 80 da 20 b1 19 28 60 08 c2 20 48 a9 00 08 5b
>3a1a58	68 28 e2 20 a9 02 8f d0 08 00 dc d1 08 08 c2 20
>3a1a68	48 a9 00 08 5b 68 28 e2 20 a9 02 8f d0 08 00 dc
>3a1a78	d1 08 08 c2 30 a0 00 00 b7 18 85 0c 18 a5 18 65
>3a1a88	0c 85 18 a5 1a 69 00 00 85 1a a0 02 00 b7 18 85
>3a1a98	d4 18 a5 18 69 04 00 85 00 a5 1a 69 00 00 85 02
>3a1aa8	28 60 08 e2 20 48 20 d2 19 68 e2 20 c7 00 d0 08
>3a1ab8	20 b1 19 20 d2 19 28 60 08 c2 20 48 a9 00 08 5b
>3a1ac8	68 28 e2 20 a9 02 8f d0 08 00 dc d1 08 08 e2 20
>3a1ad8	20 d2 19 e2 20 a7 00 f0 10 c9 3a f0 0c c5 35 f0
>3a1ae8	05 20 b1 19 80 ef 28 38 60 28 18 60 5a 08 e2 20
>3a1af8	a0 00 00 b7 00 f0 0d c9 3a f0 07 c9 20 d0 05 c8
>3a1b08	80 f1 a9 00 28 7a 60 08 0b 8b 08 c2 20 48 a9 00
>3a1b18	08 5b 68 28 20 0d 14 e2 20 a9 00 85 d9 ad 8a 0f
>3a1b28	30 41 a7 00 c9 3a d0 03 20 b1 19 20 d2 19 a7 00
>3a1b38	d0 03 4c ab 1b 20 0f 04 b0 3e a7 00 10 10 20 75
>3a1b48	09 85 0c c9 20 d0 03 4c 99 1b a5 cf f0 3d 08 c2
>3a1b58	20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d0 08 00
>3a1b68	dc d1 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a1b78	01 8f d0 08 00 dc d1 08 20 ac 2f 4c ab 1b 08 e2
>3a1b88	20 48 a9 00 48 ab 68 28 6c 2d 08 a5 0c c9 10 d0
>3a1b98	bd a7 00 20 52 09 c2 20 85 2d 20 0d 14 20 b1 19
>3a1ba8	20 86 1b ab 2b 28 60 08 58 20 72 19 20 02 18 e2
>3a1bb8	20 9c 8a 0f c2 20 a5 18 85 00 a5 1a 85 02 4c ed
>3a1bc8	1b 08 c2 20 a0 02 00 b7 18 85 d4 e2 20 a5 d9 c9
>3a1bd8	03 f0 12 c2 20 18 a5 18 69 04 00 85 00 e2 20 a5
>3a1be8	1a 69 00 85 02 c2 20 20 0f 1b e2 20 a5 d9 c9 03
>3a1bf8	f0 f3 c9 00 d0 27 e2 20 20 d2 19 a7 00 f0 1e c9
>3a1c08	3a f0 15 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a1c18	02 8f d0 08 00 dc d1 08 20 b1 19 80 c8 28 60 08
>3a1c28	58 e2 20 a9 80 85 cf 9c 8a 0f 20 02 18 c2 30 64
>3a1c38	2f a0 02 00 b7 18 f0 29 20 c9 1b e2 20 a5 d9 c9
>3a1c48	01 f0 1e c9 02 f0 ea c9 03 f0 e6 c2 20 a0 00 00
>3a1c58	18 a5 18 77 18 85 18 e2 20 a5 1a 69 00 85 1a 80
>3a1c68	d0 e2 20 a9 00 85 cf 28 60 08 c2 30 c2 20 a9 00
>3a1c78	00 85 08 a9 01 00 85 0a c2 20 a0 02 00 b7 08 f0
>3a1c88	31 c5 21 f0 1e b0 2b c2 20 a0 00 00 18 a5 08 77
>3a1c98	08 85 0c e2 20 a5 0a 69 00 85 0a c2 20 a5 0c 85
>3a1ca8	08 80 d7 c2 20 a5 08 85 18 e2 20 a5 0a 85 1a 28
>3a1cb8	38 60 28 18 60 08 e2 20 a7 0c 87 08 c2 20 a5 0c
>3a1cc8	c5 00 d0 08 e2 20 a5 0e c5 02 f0 26 c2 20 18 a5
>3a1cd8	0c 69 01 00 85 0c e2 20 a5 0e 69 00 85 0e c2 20
>3a1ce8	18 a5 08 69 01 00 85 08 e2 20 a5 0a 69 00 85 0a
>3a1cf8	80 c4 28 60 08 e2 20 a7 0c 87 08 c2 20 a5 0c c5
>3a1d08	00 d0 06 a5 0e c5 02 f0 26 c2 20 38 a5 0c e9 01
>3a1d18	00 85 0c e2 20 a5 0e e9 00 85 0e c2 20 38 a5 08
>3a1d28	e9 01 00 85 08 e2 20 a5 0a e9 00 85 0a 80 c6 28
>3a1d38	60 08 a0 00 00 c2 20 18 a5 08 77 08 85 0c e2 20
>3a1d48	a5 0a 69 00 85 0e c2 20 18 a5 d6 69 04 00 85 00
>3a1d58	e2 20 a5 d8 69 00 85 02 a0 00 00 c2 20 38 a5 d6
>3a1d68	f7 08 85 d6 e2 20 a5 d8 e9 00 85 d8 20 bd 1c 20
>3a1d78	a2 2f 28 60 08 08 c2 20 48 a9 00 08 5b 68 28 c2
>3a1d88	30 a0 02 00 97 d6 18 a5 d6 69 04 00 85 08 e2 20
>3a1d98	a5 d8 69 00 85 0a e2 20 a0 00 00 b7 18 97 08 f0
>3a1da8	03 c8 80 f7 c2 20 98 18 69 05 00 85 0c c2 20 a0
>3a1db8	00 00 a5 0c 97 d6 c2 20 18 a5 d6 65 0c 85 0c e2
>3a1dc8	20 a5 d8 69 00 85 d8 c2 20 a5 0c 85 d6 c2 20 a0
>3a1dd8	00 00 a9 00 00 97 d6 c8 c0 05 00 d0 f8 20 a2 2f
>3a1de8	28 60 0b 08 08 c2 20 48 a9 00 08 5b 68 28 c2 30
>3a1df8	a9 00 00 85 08 a9 01 00 85 0a a0 02 00 b7 08 f0
>3a1e08	1d c5 d4 f0 25 b0 1d a0 00 00 18 a5 08 77 08 85
>3a1e18	0c a5 0a 69 00 00 85 0a a5 0c 85 08 80 dc a9 00
>3a1e28	00 28 2b 60 a9 01 00 28 2b 60 a9 02 00 28 2b 60
>3a1e38	08 c2 30 a9 05 00 85 10 a0 00 00 e2 20 b7 18 f0
>3a1e48	07 c2 20 e6 10 c8 80 f3 c2 20 a5 08 85 00 a5 0a
>3a1e58	85 02 18 a5 d6 69 04 00 85 0c a5 d8 69 00 00 85
>3a1e68	0e 18 a5 d6 65 10 85 d6 a5 d8 69 00 00 85 d8 18
>3a1e78	a5 d6 69 04 00 85 08 a5 d8 69 00 00 85 0a 20 fc
>3a1e88	1c c2 20 a5 10 a0 00 00 97 00 a5 d4 a0 02 00 97
>3a1e98	00 18 a5 00 69 04 00 85 00 a5 02 69 00 00 85 02
>3a1ea8	a0 00 00 e2 20 b7 18 97 00 f0 03 c8 80 f7 20 a2
>3a1eb8	2f 28 60 08 c2 30 85 d4 20 ea 1d c9 00 00 f0 2c
>3a1ec8	c9 01 00 f0 22 c2 20 a5 08 48 a5 0a 48 20 39 1d
>3a1ed8	68 85 0a 68 85 08 a5 18 85 00 a5 1a 85 02 20 d2
>3a1ee8	19 e2 20 a7 00 f0 0a 20 38 1e 80 05 a5 d4 20 7c
>3a1ef8	1d 28 60 8b 08 08 e2 20 48 a9 3a 48 ab 68 28 a2
>3a1f08	da d1 20 bc 03 28 ab 60 08 e2 30 a9 01 20 1c 00
>3a1f18	20 31 01 f0 06 c9 0d f0 02 80 f5 28 60 0b 08 08
>3a1f28	c2 20 48 a9 00 08 5b 68 28 c2 30 64 d4 a9 00 4f
>3a1f38	85 18 a9 00 00 85 1a 20 96 06 c2 20 a5 d4 d0 05
>3a1f48	20 af 1b 80 07 20 bb 1e 28 2b 38 60 28 2b 18 60
>3a1f58	c2 30 a2 ff fe 9a 20 fb 1e 20 08 00 20 0c 00 a9
>3a1f68	00 00 20 1c 00 20 25 1f b0 ef 80 ea e2 20 a5 25
>3a1f78	c5 2b d0 06 c2 20 29 ff 00 60 c2 20 08 c2 20 48
>3a1f88	a9 00 08 5b 68 28 e2 20 a9 04 8f d0 08 00 dc d1
>3a1f98	08 20 74 1f c2 20 c9 00 00 f0 1d c9 02 00 d0 03
>3a1fa8	4c 9b 11 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a1fb8	04 8f d0 08 00 dc d1 08 18 a5 21 65 27 85 21 a5
>3a1fc8	23 65 29 85 23 60 38 a5 21 e5 27 85 21 a5 23 e5
>3a1fd8	29 85 23 60 a5 21 8f 08 01 00 a5 27 8f 0a 01 00
>3a1fe8	af 0c 01 00 85 21 af 0e 01 00 85 23 60 a5 21 8f
>3a1ff8	12 01 00 a5 27 8f 10 01 00 af 14 01 00 85 21 60
>3a2008	a5 21 8f 12 01 00 a5 27 8f 10 01 00 af 16 01 00
>3a2018	85 21 60 c2 20 a5 21 25 27 85 21 a5 23 25 29 85
>3a2028	23 60 c2 20 a5 21 05 27 85 21 a5 23 05 29 85 23
>3a2038	60 c2 20 a5 21 49 ff ff 85 21 a5 23 49 ff ff 85
>3a2048	23 60 c2 20 a5 23 c5 29 90 0b a5 21 c5 27 90 05
>3a2058	64 21 64 23 60 a9 ff ff 85 21 85 23 60 c2 20 a5
>3a2068	29 c5 23 90 0b a5 27 c5 21 90 05 64 21 64 23 60
>3a2078	a9 ff ff 85 21 85 23 60 c2 20 a5 29 c5 23 d0 0e
>3a2088	a5 27 c5 21 d0 08 a9 ff ff 85 21 85 23 60 64 21
>3a2098	64 23 60 c2 20 a5 29 c5 23 d0 0e a5 27 c5 21 d0
>3a20a8	08 a9 ff ff 85 21 85 23 60 64 21 64 23 60 c2 20
>3a20b8	a5 23 c5 29 90 10 d0 06 a5 21 c5 27 90 08 a9 ff
>3a20c8	ff 85 21 85 23 60 64 21 64 23 60 c2 20 a5 23 c5
>3a20d8	29 90 0f f0 05 64 21 64 23 60 a5 21 c5 27 f0 02
>3a20e8	b0 f3 a9 ff ff 85 21 85 23 60 08 e2 20 20 0b 17
>3a20f8	20 9f 05 20 db 04 a5 21 0a 0a 0a 0a 05 27 85 0c
>3a2108	a9 2c 20 aa 1a 20 0b 17 20 9f 05 20 db 04 a5 21
>3a2118	0a 0a 0a 0a 05 27 85 0d a9 2c 20 aa 1a 20 0b 17
>3a2128	20 9f 05 20 db 04 a5 21 0a 0a 0a 0a 05 27 85 0e
>3a2138	af 0e 08 af 09 08 8f 0e 08 af a5 0c 8f 04 08 af
>3a2148	a5 0d 8f 02 08 af a5 0e 8f 00 08 af af 0e 08 af
>3a2158	29 f7 8f 0e 08 af 28 60 08 e2 20 20 0b 17 20 9f
>3a2168	05 20 db 04 a5 21 0a 0a 0a 0a 05 27 85 0c a9 2c
>3a2178	20 aa 1a 20 0b 17 20 9f 05 20 db 04 a5 21 0a 0a
>3a2188	0a 0a 05 27 85 0d a9 2c 20 aa 1a 20 0b 17 20 9f
>3a2198	05 20 db 04 a5 21 0a 0a 0a 0a 05 27 85 0e af 0e
>3a21a8	08 af 09 08 8f 0e 08 af a5 0c 8f 06 08 af a5 0d
>3a21b8	8f 09 08 af a5 0e 8f 0a 08 af af 0e 08 af 29 f7
>3a21c8	8f 0e 08 af 28 60 08 20 0b 17 20 9f 05 e2 20 a5
>3a21d8	21 29 0f 0a 0a 0a 0a 8f 53 08 00 a9 2c 20 aa 1a
>3a21e8	20 0b 17 20 9f 05 a5 21 29 0f 0f 53 08 00 8f 1e
>3a21f8	00 00 28 60 08 e2 20 20 0b 17 20 9f 05 a5 21 48
>3a2208	a9 2c 20 aa 1a 20 0b 17 20 9f 05 a5 21 48 a9 2c
>3a2218	20 aa 1a 20 0b 17 20 9f 05 a5 21 8f 08 00 af 68
>3a2228	8f 09 00 af 68 8f 0a 00 af 28 60 08 e2 20 20 0b
>3a2238	17 20 24 05 a5 21 f0 12 a9 01 8f 04 00 af a9 20
>3a2248	8f 08 00 af 8f 09 00 af 80 06 a9 00 8f 04 00 af
>3a2258	a9 2c 85 35 20 d5 1a 90 39 20 b1 19 20 0b 17 20
>3a2268	9f 05 a5 21 48 a9 2c 20 aa 1a 20 0b 17 20 9f 05
>3a2278	a5 21 48 a9 2c 20 aa 1a 20 0b 17 20 9f 05 a5 21
>3a2288	8f 05 00 af 68 8f 06 00 af 68 8f 07 00 af 22 f0
>3a2298	10 00 28 60 08 c2 20 20 0b 17 20 9f 05 a9 af 00
>3a22a8	85 9e a5 21 c9 0a 00 b0 5c 0a aa bf 22 23 3a 85
>3a22b8	9c a9 2c 00 20 aa 1a 20 0b 17 20 9f 05 a5 21 0a
>3a22c8	0a 18 65 9c 85 9c a9 2c 00 20 aa 1a 20 0b 17 20
>3a22d8	9f 05 a0 02 00 a5 21 e2 20 97 9c a9 2c 20 aa 1a
>3a22e8	20 0b 17 20 9f 05 a0 01 00 a5 21 e2 20 97 9c a9
>3a22f8	2c 20 aa 1a 20 0b 17 20 9f 05 a0 00 00 a5 21 e2
>3a2308	20 97 9c 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a2318	20 a9 0a 8f d0 08 00 dc d1 08 00 20 00 24 00 28
>3a2328	00 2c 00 30 00 34 00 38 00 3c 40 1f 80 1f da 5a
>3a2338	08 c2 20 20 0b 17 20 24 05 a5 21 8f 00 00 af 22
>3a2348	f0 10 00 c2 20 af 1a 00 00 aa af 1c 00 00 a8 20
>3a2358	20 00 28 7a fa 60 08 c2 20 20 0b 17 20 9f 05 c2
>3a2368	20 a5 21 85 53 a9 2c 00 20 aa 1a 20 0b 17 20 9f
>3a2378	05 e2 20 a5 53 d0 05 a5 21 0a 80 04 a5 21 38 2a
>3a2388	8f 40 01 af c2 20 a9 2c 00 85 35 20 d5 1a b0 18
>3a2398	c2 20 08 c2 20 a9 00 00 85 21 a9 b0 00 85 23 e2
>3a23a8	20 a9 00 85 25 28 80 08 c2 20 20 b1 19 20 0b 17
>3a23b8	e2 20 38 a5 23 8f 1a f1 3a e9 b0 30 42 8f 43 01
>3a23c8	af 8f 1e f1 3a a5 21 8f 18 f1 3a 8f 41 01 af 8f
>3a23d8	1c f1 3a a5 22 8f 42 01 af 8f 1d f1 3a 8f 19 f1
>3a23e8	3a a9 00 8f 1f f1 3a 8f 1b f1 3a c2 20 af 20 f1
>3a23f8	3a 8f 44 01 af af 22 f1 3a 8f 46 01 af 28 60 08
>3a2408	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d0 08
>3a2418	00 dc d1 08 08 c2 20 af 1c f1 3a 8f 05 04 af af
>3a2428	24 f1 3a 8f 08 04 af e2 20 af 1e f1 3a 8f 07 04
>3a2438	af af 26 f1 3a 8f 0a 04 af a9 00 8f 01 04 af a9
>3a2448	85 8f 00 04 af af 01 04 af 30 fa a9 00 8f 00 04
>3a2458	af 28 60 08 c2 20 a5 5b 8f 08 01 00 af 20 f1 3a
>3a2468	8f 0a 01 00 18 af 0c 01 00 65 57 85 0c af 0e 01
>3a2478	00 69 00 00 85 0e 18 a5 0c 6f 18 f1 3a 85 9c a5
>3a2488	0e 6f 1a f1 3a 85 9e e2 20 a5 53 87 9c 28 60 c2
>3a2498	20 a9 01 00 85 da 38 a5 5f e5 57 85 67 10 0b 49
>3a24a8	ff ff 1a 85 67 a9 ff ff 85 da a9 01 00 85 dc 38
>3a24b8	a5 63 e5 5b 85 6b 10 0b 49 ff ff 1a 85 6b a9 ff
>3a24c8	ff 85 dc a5 6b c5 67 b0 04 a5 67 80 06 a5 6b 49
>3a24d8	ff ff 1a 48 0a 68 6a 85 6f 20 5b 24 a5 57 c5 5f
>3a24e8	d0 06 a5 5b c5 63 f0 36 a5 6f 85 73 a5 67 49 ff
>3a24f8	ff 1a c5 73 10 10 f0 0e 38 a5 6f e5 6b 85 6f 18
>3a2508	a5 57 65 da 85 57 a5 73 c5 6b 10 cd f0 cb 18 a5
>3a2518	6f 65 67 85 6f 18 a5 5b 65 dc 85 5b 80 bb 60 08
>3a2528	a9 00 00 8f 00 04 af c2 20 a5 5b 8f 08 01 00 af
>3a2538	20 f1 3a 8f 0a 01 00 18 af 0c 01 00 65 57 85 0c
>3a2548	e2 20 af 0e 01 00 69 00 85 0e c2 20 18 af 1c f1
>3a2558	3a 65 0c 8f 05 04 af e2 20 af 1e f1 3a 65 0e 8f
>3a2568	07 04 af c2 20 38 a5 5f e5 57 85 0c 8f 08 04 af
>3a2578	38 af 20 f1 3a 8f 0e 04 af 38 a5 63 e5 5b 8f 0a
>3a2588	04 af a9 01 00 8f 0c 04 af e2 20 af 53 08 00 8f
>3a2598	01 04 af a9 87 8f 00 04 af af 01 04 af 30 fa a9
>3a25a8	00 8f 00 04 af 28 60 08 08 c2 20 48 a9 00 08 5b
>3a25b8	68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 30 20 0b
>3a25c8	17 20 24 05 a5 21 85 53 a9 2c 00 20 aa 1a 20 0b
>3a25d8	17 20 24 05 a5 21 85 57 a9 2c 00 20 aa 1a 20 0b
>3a25e8	17 20 9f 05 a5 21 85 5b 20 5b 24 28 60 08 08 c2
>3a25f8	20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab
>3a2608	68 28 c2 30 20 0b 17 20 24 05 a5 21 85 57 a9 2c
>3a2618	00 20 aa 1a 20 0b 17 20 24 05 a5 21 85 5b a9 2c
>3a2628	00 20 aa 1a 20 0b 17 20 24 05 a5 21 85 5f a9 2c
>3a2638	00 20 aa 1a 20 0b 17 20 24 05 a5 21 85 63 a9 2c
>3a2648	00 20 aa 1a 20 0b 17 20 9f 05 a5 21 85 53 20 97
>3a2658	24 28 60 08 08 c2 20 48 a9 00 08 5b 68 28 08 e2
>3a2668	20 48 a9 00 48 ab 68 28 c2 30 20 0b 17 20 24 05
>3a2678	a5 21 85 57 a9 2c 00 20 aa 1a 20 0b 17 20 24 05
>3a2688	a5 21 85 5b a9 2c 00 20 aa 1a 20 0b 17 20 24 05
>3a2698	a5 21 85 5f a9 2c 00 20 aa 1a 20 0b 17 20 24 05
>3a26a8	a5 21 85 63 a9 2c 00 20 aa 1a 20 0b 17 20 9f 05
>3a26b8	a5 21 85 53 20 27 25 28 60 08 e2 20 a5 21 c9 12
>3a26c8	b0 18 0a 0a 0a 18 69 00 85 9c a9 02 69 00 85 9d
>3a26d8	a9 af 69 00 85 9e 64 9f 28 60 08 c2 20 48 a9 00
>3a26e8	08 5b 68 28 e2 20 a9 09 8f d0 08 00 dc d1 08 08
>3a26f8	e2 20 20 0b 17 20 9f 05 20 c1 26 a5 21 8f 26 f1
>3a2708	3a a9 2c 20 aa 1a 20 0b 17 20 9f 05 a5 21 c9 08
>3a2718	b0 4b 48 a9 2c 20 aa 1a 20 0b 17 20 24 05 c2 20
>3a2728	38 a5 21 e9 00 00 85 21 a5 23 e9 b0 00 85 23 30
>3a2738	2c c2 20 a5 21 a0 01 00 97 9c e2 20 a5 23 c8 c8
>3a2748	97 9c af 26 f1 3a aa bf 28 f1 3a 29 f1 85 0c 68
>3a2758	0a 29 0e 05 0c 87 9c 9f 28 f1 3a 28 60 08 c2 20
>3a2768	48 a9 00 08 5b 68 28 e2 20 a9 09 8f d0 08 00 dc
>3a2778	d1 08 08 c2 20 20 0b 17 20 9f 05 20 c1 26 a9 2c
>3a2788	00 20 aa 1a 20 0b 17 20 24 05 a5 21 a0 04 00 97
>3a2798	9c a9 2c 00 20 aa 1a 20 0b 17 20 24 05 a5 21 a0
>3a27a8	06 00 97 9c 28 60 08 c2 20 20 0b 17 20 9f 05 20
>3a27b8	c1 26 a5 21 8f 26 f1 3a a9 2c 00 20 aa 1a 20 0b
>3a27c8	17 20 24 05 a5 21 48 a9 2c 00 85 35 20 d5 1a b0
>3a27d8	1c af 26 f1 3a aa bf 28 f1 3a 29 fe 00 85 0c 68
>3a27e8	29 01 00 05 0c 9f 28 f1 3a 87 9c 80 31 e2 20 20
>3a27f8	b1 19 20 0b 17 20 9f 05 a5 21 c9 08 b0 22 0a 0a
>3a2808	0a 0a 85 0c 68 29 01 05 0c 85 0c af 26 f1 3a aa
>3a2818	bf 28 f1 3a 29 8e 05 0c 87 9c 9f 28 f1 3a 28 60
>3a2828	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d0
>3a2838	08 00 dc d1 08 08 20 d2 19 e2 20 a7 00 d0 03 4c
>3a2848	d1 28 c9 3a d0 03 4c d1 28 c9 22 d0 0b 20 33 16
>3a2858	20 b8 30 a9 3b 20 aa 1a 20 0f 04 90 37 20 75 3c
>3a2868	90 32 a9 3f 20 18 00 a9 20 20 18 00 20 10 00 e2
>3a2878	20 a5 e7 c9 02 f0 32 c9 00 f0 51 c9 01 f0 4c 08
>3a2888	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d0 08
>3a2898	00 dc d1 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a28a8	a9 02 8f d0 08 00 dc d1 08 c2 20 a9 00 4c 85 21
>3a28b8	a9 00 00 85 23 e2 20 a9 02 85 25 20 3d 12 c2 20
>3a28c8	20 12 3c a9 0d 00 20 18 00 28 60 ea c2 20 a5 00
>3a28d8	85 3e a5 02 85 40 a9 00 4c 85 00 a9 00 00 85 02
>3a28e8	20 e0 05 c2 20 a5 3e 85 00 a5 40 85 02 80 cf 08
>3a28f8	20 d2 19 e2 20 a7 00 f0 49 c9 3a f0 45 20 0f 04
>3a2908	90 42 20 75 3c 90 3d 20 14 00 e2 20 8f 00 4e 00
>3a2918	a9 00 8f 01 4e 00 c2 20 a9 00 4e 85 21 a9 00 00
>3a2928	85 23 e2 20 a9 02 85 25 20 3d 12 20 12 3c 20 d2
>3a2938	19 a7 00 f0 0d c9 3a f0 09 c9 2c d0 07 20 b1 19
>3a2948	80 ae 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a2958	a9 02 8f d0 08 00 dc d1 08 08 20 0b 17 20 24 05
>3a2968	e2 20 a9 5c 85 a0 c2 20 a5 21 85 a1 e2 20 a5 23
>3a2978	85 a3 e2 20 a9 2c 85 35 20 d5 1a 90 41 20 b1 19
>3a2988	20 0b 17 20 64 05 c2 20 a5 21 85 53 e2 20 a9 2c
>3a2998	85 35 20 d5 1a 90 27 20 b1 19 20 0b 17 20 64 05
>3a29a8	c2 20 a5 21 85 57 e2 20 a9 2c 85 35 20 d5 1a 90
>3a29b8	0d 20 b1 19 20 0b 17 20 64 05 c2 20 a4 21 a6 57
>3a29c8	a5 53 22 a0 08 00 20 f6 19 28 60 08 c2 20 48 a9
>3a29d8	00 08 5b 68 28 e2 20 a9 04 8f d0 08 00 dc d1 08
>3a29e8	08 e2 20 20 d2 19 20 75 3c 90 64 a9 8c 20 aa 1a
>3a29f8	a9 01 20 aa 14 a2 01 00 a9 00 8f 00 4d 00 20 0b
>3a2a08	17 20 64 05 c2 20 a5 21 9f 00 4d 00 e2 20 af 00
>3a2a18	4d 00 1a 8f 00 4d 00 30 4b e8 e8 20 d2 19 a7 00
>3a2a28	c9 2c f0 25 c9 8d d0 27 20 b1 19 20 23 3d c2 20
>3a2a38	a5 bd 85 21 e2 20 a5 bf 85 23 64 24 a5 e7 09 80
>3a2a48	85 e7 85 25 20 12 3c 28 60 20 b1 19 4c 06 2a 08
>3a2a58	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d0 08
>3a2a68	00 dc d1 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a2a78	a9 0a 8f d0 08 00 dc d1 08 08 20 d2 19 e2 20 a7
>3a2a88	00 f0 28 c9 3a f0 24 20 0f 04 90 21 20 75 3c 90
>3a2a98	1c 20 ca 2a 20 12 3c 20 d2 19 a7 00 f0 0d c9 3a
>3a2aa8	f0 09 c9 2c d0 07 20 b1 19 80 cf 28 60 08 c2 20
>3a2ab8	48 a9 00 08 5b 68 28 e2 20 a9 02 8f d0 08 00 dc
>3a2ac8	d1 08 08 a5 02 85 40 a5 00 85 3e a5 1a 85 44 a5
>3a2ad8	18 85 42 c2 20 a5 38 d0 04 a5 36 f0 44 a5 36 85
>3a2ae8	00 a5 38 85 02 a5 3a 85 18 a5 3c 85 1a e2 20 a7
>3a2af8	00 f0 49 c9 3a f0 45 c9 2c d0 03 20 b1 19 20 d2
>3a2b08	19 a7 00 c9 22 f0 44 20 28 04 b0 44 08 c2 20 48
>3a2b18	a9 00 08 5b 68 28 e2 20 a9 02 8f d0 08 00 dc d1
>3a2b28	08 c2 20 a9 00 00 85 18 a9 01 00 85 1a 18 a5 18
>3a2b38	69 04 00 85 00 a5 1a 69 00 00 85 02 e2 20 a9 80
>3a2b48	85 33 a9 a8 85 35 20 08 1a 80 b3 20 33 16 80 03
>3a2b58	20 86 15 c2 20 a5 00 85 36 a5 02 85 38 a5 18 85
>3a2b68	3a a5 1a 85 3c a5 42 85 18 a5 44 85 1a a5 3e 85
>3a2b78	00 a5 40 85 02 28 60 20 f6 19 60 64 36 64 38 64
>3a2b88	3a 64 3c 60 20 24 00 60 20 0b 17 c2 20 a5 23 48
>3a2b98	a5 21 48 e2 20 a7 00 c9 2c d0 22 20 b1 19 20 0b
>3a2ba8	17 c2 20 a5 24 d0 2b 68 85 08 68 85 0a c2 20 a5
>3a2bb8	21 87 08 e2 20 a0 02 00 a5 23 97 08 60 08 c2 20
>3a2bc8	48 a9 00 08 5b 68 28 e2 20 a9 02 8f d0 08 00 dc
>3a2bd8	d1 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09
>3a2be8	8f d0 08 00 dc d1 08 20 0b 17 c2 20 a5 23 48 a5
>3a2bf8	21 48 e2 20 a7 00 c9 2c d0 19 20 b1 19 20 0b 17
>3a2c08	c2 20 a5 23 d0 22 68 85 08 68 85 0a c2 20 a5 21
>3a2c18	87 08 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a2c28	02 8f d0 08 00 dc d1 08 08 c2 20 48 a9 00 08 5b
>3a2c38	68 28 e2 20 a9 09 8f d0 08 00 dc d1 08 20 0b 17
>3a2c48	c2 20 a5 23 48 a5 21 48 e2 20 a7 00 c9 2c d0 1f
>3a2c58	20 b1 19 20 0b 17 e2 20 a5 22 d0 28 c2 20 a5 23
>3a2c68	d0 22 68 85 08 68 85 0a e2 20 a5 21 87 08 60 08
>3a2c78	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d0 08
>3a2c88	00 dc d1 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a2c98	a9 09 8f d0 08 00 dc d1 08 08 c2 20 48 a9 00 08
>3a2ca8	5b 68 28 e2 20 a9 01 8f d0 08 00 dc d1 08 08 e2
>3a2cb8	20 a7 00 f0 05 20 b1 19 80 f7 28 60 08 28 60 08
>3a2cc8	28 60 08 28 60 08 c2 20 a5 1a 20 24 18 a5 18 20
>3a2cd8	24 18 a5 02 48 a5 00 48 20 f6 19 a5 02 20 24 18
>3a2ce8	a5 00 20 24 18 68 85 00 68 85 02 20 d2 19 20 75
>3a2cf8	3c b0 15 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a2d08	05 8f d0 08 00 dc d1 08 e2 20 a5 e7 20 3b 18 a5
>3a2d18	e6 20 3b 18 c2 20 a5 e4 20 24 18 20 d2 19 e2 20
>3a2d28	a7 00 c9 87 d0 6a a5 e7 c9 00 f0 04 c9 01 f0 00
>3a2d38	20 b1 19 20 0b 17 20 12 3c e2 20 a9 99 20 aa 1a
>3a2d48	20 0b 17 c2 20 a5 25 20 24 18 a5 23 20 24 18 a5
>3a2d58	21 20 24 18 e2 20 a9 9a 85 35 20 d5 1a 90 1b 20
>3a2d68	b1 19 20 0b 17 e2 20 a5 25 20 24 18 c2 20 a5 23
>3a2d78	20 24 18 a5 21 20 24 18 80 14 c2 20 a9 00 00 20
>3a2d88	24 18 a9 00 00 20 24 18 a9 01 00 20 24 18 28 60
>3a2d98	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d0
>3a2da8	08 00 dc d1 08 08 8b 08 e2 20 48 a9 00 48 ab 68
>3a2db8	28 08 c2 20 48 a9 00 08 5b 68 28 c2 30 a4 31 c8
>3a2dc8	c8 c2 20 b9 0c 00 85 e4 b9 0e 00 e2 20 85 e6 b9
>3a2dd8	10 00 85 e7 c2 20 5a 20 e9 3a 7a c2 20 b9 00 00
>3a2de8	85 27 b9 02 00 85 29 e2 20 b9 04 00 85 2b c2 20
>3a2df8	5a 20 99 1f 20 12 3c 7a c2 20 b9 06 00 85 27 b9
>3a2e08	08 00 85 29 e2 20 b9 0a 00 85 2b c2 20 b9 02 00
>3a2e18	30 0a 20 d3 20 20 11 05 f0 28 80 08 20 b6 20 20
>3a2e28	11 05 f0 1e c2 20 b9 12 00 85 00 b9 14 00 85 02
>3a2e38	b9 16 00 85 18 b9 18 00 85 1a e2 20 a9 03 85 d9
>3a2e48	80 17 a2 21 08 20 6b 14 c2 20 18 a5 31 69 1a 00
>3a2e58	85 31 a5 33 69 00 00 85 33 ab 28 60 08 a5 18 48
>3a2e68	a5 1a 48 20 d2 19 20 e0 05 a5 21 f0 26 20 71 1c
>3a2e78	90 38 e2 20 a9 02 85 d9 20 f6 19 c2 20 68 20 24
>3a2e88	18 68 20 24 18 a5 02 20 24 18 a5 00 20 24 18 e6
>3a2e98	2f 28 60 68 68 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a2ea8	20 a9 02 8f d0 08 00 dc d1 08 68 68 08 c2 20 48
>3a2eb8	a9 00 08 5b 68 28 e2 20 a9 06 8f d0 08 00 dc d1
>3a2ec8	08 08 c2 30 a5 2f f0 1e 20 46 18 85 00 20 46 18
>3a2ed8	85 02 20 46 18 85 18 20 46 18 85 1a c6 2f e2 20
>3a2ee8	a9 03 85 d9 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a2ef8	e2 20 a9 07 8f d0 08 00 dc d1 08 08 20 0b 17 20
>3a2f08	11 05 f0 1c e2 20 a9 94 20 aa 1a 20 e0 05 20 11
>3a2f18	05 f0 12 20 71 1c 90 22 e2 20 a9 02 85 d9 80 03
>3a2f28	20 f6 19 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a2f38	20 a9 02 8f d0 08 00 dc d1 08 08 c2 20 48 a9 00
>3a2f48	08 5b 68 28 e2 20 a9 06 8f d0 08 00 dc d1 08 08
>3a2f58	e2 20 a9 01 85 d9 28 60 08 20 d2 19 20 e0 05 a5
>3a2f68	21 f0 0d 20 71 1c 90 1d e2 20 a9 02 85 d9 28 60
>3a2f78	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d0
>3a2f88	08 00 dc d1 08 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a2f98	20 a9 06 8f d0 08 00 dc d1 08 20 0d 14 20 77 0c
>3a2fa8	20 e8 39 60 08 a7 00 10 03 20 b1 19 20 75 3c b0
>3a2fb8	03 4c 23 30 e2 20 20 f4 1a c9 8c d0 0e a9 8c 20
>3a2fc8	aa 1a a9 00 8f 00 4d 00 20 89 15 20 d2 19 e2 20
>3a2fd8	a7 00 c9 87 f0 03 4c 23 30 20 b1 19 a5 e7 48 a5
>3a2fe8	e6 48 a5 e5 48 a5 e4 48 20 0b 17 68 85 e4 68 85
>3a2ff8	e5 68 85 e6 68 85 e7 29 80 f0 1b 20 5b 3a 90 30
>3a3008	c2 20 a0 09 00 b7 08 85 bd e2 20 c8 c8 b7 08 85
>3a3018	bf 20 e6 3e 80 03 20 12 3c 28 60 08 c2 20 48 a9
>3a3028	00 08 5b 68 28 e2 20 a9 02 8f d0 08 00 dc d1 08
>3a3038	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 05 8f d0
>3a3048	08 00 dc d1 08 08 e2 20 20 f4 1a c9 00 f0 5c 20
>3a3058	0b 17 e2 20 a5 25 c9 ff f0 14 c9 02 d0 05 20 b8
>3a3068	30 80 0b c9 00 d0 05 20 d8 30 80 02 80 40 20 d2
>3a3078	19 a7 00 f0 36 c9 3a f0 32 c9 2c f0 19 c9 3b f0
>3a3088	1a 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a3098	d0 08 00 dc d1 08 a9 09 20 18 00 20 b1 19 20 d2
>3a30a8	19 a7 00 f0 09 c9 3a f0 05 80 a4 20 5c 03 28 60
>3a30b8	08 8b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 c2 10
>3a30c8	a0 00 00 b7 21 f0 06 20 18 00 c8 80 f6 ab 28 60
>3a30d8	08 c2 20 20 0b 11 a5 14 85 21 a5 16 85 23 20 b8
>3a30e8	30 28 60 08 e2 20 85 b3 4a 4a 4a 4a 29 0f 18 69
>3a30f8	30 97 14 c8 a5 b3 29 0f 18 69 30 97 14 c8 28 60
>3a3108	e2 20 a9 8c 20 aa 1a 08 20 0b 17 e2 20 c2 10 af
>3a3118	0e 08 af 09 08 8f 0e 08 af 20 c4 10 a0 00 00 af
>3a3128	06 08 af 20 eb 30 a9 2f 97 14 c8 af 09 08 af 20
>3a3138	eb 30 a9 2f 97 14 c8 af 0a 08 af 20 eb 30 a9 00
>3a3148	97 14 af 0e 08 af 29 f7 8f 0e 08 af c2 20 a5 14
>3a3158	85 21 a5 16 85 23 e2 20 a9 02 85 25 20 3d 12 28
>3a3168	e2 20 20 b1 19 60 e2 20 a9 8c 20 aa 1a 08 20 0b
>3a3178	17 e2 20 c2 10 af 0e 08 af 09 08 8f 0e 08 af 20
>3a3188	c4 10 a0 00 00 af 04 08 af 20 eb 30 a9 3a 97 14
>3a3198	c8 af 02 08 af 20 eb 30 a9 3a 97 14 c8 af 00 08
>3a31a8	af 20 eb 30 a9 00 97 14 af 0e 08 af 29 f7 8f 0e
>3a31b8	08 af c2 20 a5 14 85 21 a5 16 85 23 e2 20 a9 02
>3a31c8	85 25 20 3d 12 28 e2 20 20 b1 19 60 08 c2 20 20
>3a31d8	0b 17 20 24 05 c2 20 a5 21 49 ff ff 85 21 a5 23
>3a31e8	49 ff ff 85 23 e6 21 d0 03 e6 23 00 28 60 e2 20
>3a31f8	a9 8c 20 aa 1a 08 c2 30 20 0b 17 20 44 05 c2 20
>3a3208	a5 23 48 a5 21 48 20 d2 19 e2 20 a7 00 c9 2c f0
>3a3218	03 4c 6d 32 20 b1 19 20 0b 17 20 64 05 c2 20 a5
>3a3228	21 48 20 d2 19 e2 20 a7 00 c9 2c f0 03 4c 6d 32
>3a3238	20 b1 19 20 0b 17 20 64 05 c2 20 a5 21 85 8d e2
>3a3248	20 a5 23 85 8f c2 20 68 85 27 a9 00 00 85 29 68
>3a3258	85 21 68 85 23 e2 20 a9 02 85 25 20 95 12 e2 20
>3a3268	20 b1 19 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a3278	20 a9 02 8f d0 08 00 dc d1 08 08 c2 20 48 a9 00
>3a3288	08 5b 68 28 e2 20 a9 09 8f d0 08 00 dc d1 08 e2
>3a3298	20 a9 8c 20 aa 1a 08 c2 30 20 0b 17 e2 20 a5 25
>3a32a8	c9 02 f0 03 4c 1b 33 c2 20 a5 23 48 a5 21 48 20
>3a32b8	d2 19 e2 20 a7 00 c9 2c f0 03 4c 30 33 20 b1 19
>3a32c8	20 0b 17 e2 20 a5 25 c9 00 d0 48 c2 20 a5 21 85
>3a32d8	8d c2 20 68 85 21 68 85 23 e2 20 a9 02 85 25 e2
>3a32e8	20 a0 00 00 b7 21 f0 03 c8 80 f9 c2 20 98 38 e5
>3a32f8	8d 30 09 85 27 a9 00 00 85 29 80 07 a9 00 00 85
>3a3308	27 85 29 e2 20 a9 00 85 2b 20 95 12 e2 20 20 b1
>3a3318	19 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a3328	04 8f d0 08 00 dc d1 08 08 c2 20 48 a9 00 08 5b
>3a3338	68 28 e2 20 a9 02 8f d0 08 00 dc d1 08 08 c2 20
>3a3348	48 a9 00 08 5b 68 28 e2 20 a9 09 8f d0 08 00 dc
>3a3358	d1 08 e2 20 a9 8c 20 aa 1a 08 c2 30 20 0b 17 e2
>3a3368	20 a5 25 c9 02 f0 03 4c c6 33 c2 20 a5 23 48 a5
>3a3378	21 48 20 d2 19 e2 20 a7 00 c9 2c f0 03 4c db 33
>3a3388	20 b1 19 20 0b 17 e2 20 a5 25 c9 00 d0 30 c2 20
>3a3398	a5 21 85 8d c2 20 a9 00 00 85 27 a9 00 00 85 29
>3a33a8	e2 20 a9 00 85 2b c2 20 68 85 21 68 85 23 e2 20
>3a33b8	a9 02 85 25 20 95 12 e2 20 20 b1 19 28 60 08 c2
>3a33c8	20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d0 08 00
>3a33d8	dc d1 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a33e8	02 8f d0 08 00 dc d1 08 08 c2 20 48 a9 00 08 5b
>3a33f8	68 28 e2 20 a9 09 8f d0 08 00 dc d1 08 e2 20 a9
>3a3408	8c 20 aa 1a 20 0b 17 c2 10 e2 20 a5 25 c9 02 d0
>3a3418	23 c2 20 a5 00 85 3e a5 02 85 40 a5 21 85 00 a5
>3a3428	23 85 02 20 e0 05 a5 3e 85 00 a5 40 85 02 e2 20
>3a3438	20 b1 19 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a3448	a9 04 8f d0 08 00 dc d1 08 e2 20 a9 8c 20 aa 1a
>3a3458	08 20 0b 17 c2 10 e2 20 a5 25 c9 00 d0 1d 20 0b
>3a3468	11 c2 20 a5 14 85 21 a5 16 85 23 e2 20 a9 02 85
>3a3478	25 20 3d 12 28 e2 20 20 b1 19 60 08 c2 20 48 a9
>3a3488	00 08 5b 68 28 e2 20 a9 04 8f d0 08 00 dc d1 08
>3a3498	e2 20 a9 8c 20 aa 1a 08 20 0b 17 20 44 05 c2 20
>3a34a8	64 0c 64 0e e2 30 a0 00 b7 21 c9 20 f0 04 c9 24
>3a34b8	d0 03 c8 80 f3 b7 21 20 39 04 90 1e c2 20 06 0c
>3a34c8	26 0e 06 0c 26 0e 06 0c 26 0e 06 0c 26 0e e2 20
>3a34d8	20 5a 04 05 0c 85 0c c8 80 db c2 20 a5 0c 85 21
>3a34e8	a5 0e 85 23 e2 20 a9 00 85 25 28 e2 20 20 b1 19
>3a34f8	60 e2 20 a9 8c 20 aa 1a 08 20 0b 17 20 24 05 20
>3a3508	c4 10 e2 30 a0 ff a9 00 97 14 88 a5 21 29 0f aa
>3a3518	bf 00 d0 3a 97 14 88 a5 21 29 f0 4a 4a 4a 4a aa
>3a3528	bf 00 d0 3a 97 14 88 a5 22 85 21 a5 23 85 22 a5
>3a3538	24 85 23 a9 00 85 24 a5 21 d0 d0 a5 22 d0 cc a5
>3a3548	23 d0 c8 98 38 65 14 85 21 a5 15 85 22 a5 16 85
>3a3558	23 a5 17 85 24 a9 02 85 25 20 3d 12 28 e2 20 20
>3a3568	b1 19 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a3578	04 8f d0 08 00 dc d1 08 e2 20 a9 8c 20 aa 1a 20
>3a3588	0b 17 e2 20 a5 25 c9 02 d0 1f 8b a5 23 48 ab c2
>3a3598	10 a6 21 20 88 11 ab 84 21 c2 20 64 23 e2 20 a9
>3a35a8	00 85 25 e2 20 20 b1 19 60 08 c2 20 48 a9 00 08
>3a35b8	5b 68 28 e2 20 a9 04 8f d0 08 00 dc d1 08 e2 20
>3a35c8	a9 8c 20 aa 1a 20 0b 17 e2 20 a5 25 c9 00 d0 12
>3a35d8	e2 20 a7 21 85 21 64 22 64 23 64 2e e2 20 20 b1
>3a35e8	19 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>3a35f8	8f d0 08 00 dc d1 08 e2 20 a9 8c 20 aa 1a 20 0b
>3a3608	17 e2 20 a5 25 c9 00 d0 1d c2 20 a7 21 85 0c e2
>3a3618	20 a0 02 00 b7 21 85 23 64 24 c2 20 a5 0c 85 21
>3a3628	e2 20 20 b1 19 60 08 c2 20 48 a9 00 08 5b 68 28
>3a3638	e2 20 a9 04 8f d0 08 00 dc d1 08 e2 20 a9 8c 20
>3a3648	aa 1a 20 0b 17 e2 20 a5 25 c9 00 d0 0e c2 20 a7
>3a3658	21 85 21 64 23 e2 20 20 b1 19 60 08 c2 20 48 a9
>3a3668	00 08 5b 68 28 e2 20 a9 04 8f d0 08 00 dc d1 08
>3a3678	e2 20 a9 8c 20 aa 1a 20 0b 17 e2 20 a5 25 c9 00
>3a3688	d0 24 20 c4 10 a5 21 87 14 a9 00 a0 01 00 97 14
>3a3698	c2 20 a5 14 85 21 a5 16 85 23 e2 20 a9 02 85 25
>3a36a8	e2 20 20 b1 19 60 08 c2 20 48 a9 00 08 5b 68 28
>3a36b8	e2 20 a9 04 8f d0 08 00 dc d1 08 e2 20 a9 8c 20
>3a36c8	aa 1a 20 0b 17 e2 20 a5 25 c9 02 d0 14 a7 21 85
>3a36d8	21 64 22 64 23 64 24 a9 00 85 25 e2 20 20 b1 19
>3a36e8	60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f
>3a36f8	d0 08 00 dc d1 08 e2 20 a9 8c 20 aa 1a 20 0b 17
>3a3708	e2 20 a5 25 c9 00 d0 39 e2 20 a5 24 d0 48 a5 23
>3a3718	d0 44 a5 22 d0 40 c2 10 20 c4 10 a4 21 e2 20 a9
>3a3728	00 97 14 88 30 07 a9 20 97 14 88 10 fb a9 02 85
>3a3738	25 c2 20 a5 14 85 21 a5 16 85 23 e2 20 20 b1 19
>3a3748	60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f
>3a3758	d0 08 00 dc d1 08 08 c2 20 48 a9 00 08 5b 68 28
>3a3768	e2 20 a9 09 8f d0 08 00 dc d1 08 e2 20 a9 8c 20
>3a3778	aa 1a 20 0b 17 e2 20 a5 25 c9 00 d0 39 e2 20 a5
>3a3788	24 d0 48 a5 23 d0 44 a5 22 d0 40 c2 10 20 c4 10
>3a3798	a4 21 e2 20 a9 00 97 14 88 30 07 a9 09 97 14 88
>3a37a8	10 fb a9 02 85 25 c2 20 a5 14 85 21 a5 16 85 23
>3a37b8	e2 20 20 b1 19 60 08 c2 20 48 a9 00 08 5b 68 28
>3a37c8	e2 20 a9 04 8f d0 08 00 dc d1 08 08 c2 20 48 a9
>3a37d8	00 08 5b 68 28 e2 20 a9 09 8f d0 08 00 dc d1 08
>3a37e8	e2 20 a9 8c 20 aa 1a 20 0b 17 20 24 05 c2 20 a5
>3a37f8	23 10 17 49 ff ff 85 23 a5 21 49 ff ff 18 69 01
>3a3808	00 85 21 a5 23 69 00 00 85 23 e2 20 20 b1 19 60
>3a3818	e2 20 a9 8c 20 aa 1a 20 0b 17 e2 20 a5 25 c9 00
>3a3828	d0 25 c2 20 a5 23 30 12 d0 04 a5 21 f0 13 a9 00
>3a3838	00 85 23 a9 01 00 85 21 80 07 a9 ff ff 85 23 85
>3a3848	21 e2 20 20 b1 19 60 08 c2 20 48 a9 00 08 5b 68
>3a3858	28 e2 20 a9 04 8f d0 08 00 dc d1 08 00 ea 60 08
>3a3868	0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 c2 20 a9
>3a3878	00 00 85 d6 e2 20 a9 01 85 d8 c2 30 a9 00 00 a0
>3a3888	00 00 97 d6 a0 02 00 97 d6 a0 04 00 97 d6 20 87
>3a3898	19 2b 28 60 8b 08 c2 20 a9 00 00 85 18 a9 01 00
>3a38a8	85 1a 20 87 19 20 27 1c 28 ab 60 08 c2 20 64 53
>3a38b8	a9 ff 7f 85 57 20 5c 03 20 f4 1a 29 ff 00 c9 00
>3a38c8	00 f0 2c c9 81 00 f0 1a 20 d2 19 20 e0 05 a5 21
>3a38d8	85 53 20 f4 1a 29 ff 00 c9 00 00 f0 12 c9 81 00
>3a38e8	d0 2a 20 aa 1a 20 d2 19 20 e0 05 a5 21 85 57 a5
>3a38f8	1a 48 a5 18 48 a5 02 48 a5 00 48 20 18 13 68 85
>3a3908	00 68 85 02 68 85 18 68 85 1a 28 60 08 c2 20 48
>3a3918	a9 00 08 5b 68 28 e2 20 a9 02 8f d0 08 00 dc d1
>3a3928	08 08 20 0b 17 20 44 05 e2 20 c2 10 a0 00 00 a2
>3a3938	00 00 b7 21 9f 00 f0 3a f0 04 e8 c8 80 f4 c2 30
>3a3948	a9 00 00 85 ab 85 57 e2 20 a9 02 85 ad 85 59 c2
>3a3958	20 64 b0 20 67 38 20 c1 02 90 23 c2 20 a2 0c 00
>3a3968	bf 00 f1 3a 85 ae 20 50 00 10 11 20 28 00 20 25
>3a3978	1f e2 20 a9 2e 20 18 00 c2 20 80 ea 28 60 08 c2
>3a3988	20 48 a9 00 08 5b 68 28 e2 20 a9 0b 8f d0 08 00
>3a3998	dc d1 08 08 e2 20 20 5c 03 20 0b 02 a2 00 00 bf
>3a39a8	00 f1 3a f0 09 20 18 00 e8 e0 08 00 d0 f1 a9 2e
>3a39b8	20 18 00 a2 08 00 bf 00 f1 3a f0 09 20 18 00 e8
>3a39c8	e0 0b 00 d0 f1 20 5c 03 a2 14 00 bf 00 f1 3a d0
>3a39d8	08 e8 e8 bf 00 f1 3a f0 05 20 23 02 b0 be 28 60
>3a39e8	08 08 c2 20 48 a9 00 08 5b 68 28 c2 20 64 e1 64
>3a39f8	e4 e2 20 64 e3 64 e6 64 e7 c2 20 38 a5 d6 69 04
>3a3a08	00 85 de e2 20 a5 d8 69 00 85 e0 28 60 c9 5f f0
>3a3a18	1a c9 3a b0 04 c9 30 b0 12 c9 5b b0 04 c9 41 b0
>3a3a28	0a c9 7b b0 04 c9 61 b0 02 18 60 38 60 08 e2 20
>3a3a38	c2 10 a0 00 00 b7 0c f0 0a d7 e4 d0 13 c8 c0 08
>3a3a48	00 d0 f2 b7 e4 20 83 04 20 15 3a b0 03 28 38 60
>3a3a58	28 18 60 08 e2 20 c2 10 a0 00 00 a2 00 00 b7 e4
>3a3a68	f0 0b 20 83 04 9f 00 4e 00 c8 e8 80 f1 a9 00 9f
>3a3a78	00 4e 00 c2 20 a9 00 4e 85 e4 e2 20 a9 00 85 e6
>3a3a88	c2 20 a5 e1 85 08 d0 06 e2 20 a5 e3 f0 4d e2 20
>3a3a98	a5 e3 85 0a a5 e7 a0 00 00 d7 08 d0 17 c2 20 18
>3a3aa8	a5 08 69 01 00 85 0c e2 20 a5 0a 69 00 85 0e 20
>3a3ab8	35 3a b0 2a a0 0d 00 c2 20 b7 08 85 0c c8 c8 e2
>3a3ac8	20 b7 08 85 0e d0 06 c2 20 a5 0c f0 0e c2 20 a5
>3a3ad8	0c 85 08 e2 20 a5 0e 85 0a 80 b9 28 18 60 28 38
>3a3ae8	60 08 20 5b 3a b0 15 08 c2 20 48 a9 00 08 5b 68
>3a3af8	28 e2 20 a9 05 8f d0 08 00 dc d1 08 c2 30 a0 09
>3a3b08	00 b7 08 85 21 c8 c8 b7 08 85 23 e2 20 a0 00 00
>3a3b18	b7 08 85 25 28 60 08 c2 20 18 a5 de 69 10 00 85
>3a3b28	08 e2 20 a5 e0 69 00 85 0a c5 b9 90 1d c2 20 a5
>3a3b38	08 c5 b7 90 15 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a3b48	20 a9 09 8f d0 08 00 dc d1 08 c2 20 a5 de 85 bd
>3a3b58	e2 20 a5 e0 85 bf c2 20 a5 08 85 de e2 20 a5 0a
>3a3b68	85 e0 28 60 08 e2 20 a5 25 c5 e7 f0 15 08 c2 20
>3a3b78	48 a9 00 08 5b 68 28 e2 20 a9 04 8f d0 08 00 dc
>3a3b88	d1 08 c2 10 20 1e 3b c2 30 18 a5 bd 69 01 00 85
>3a3b98	08 e2 20 a5 bf 69 00 85 0a a0 00 00 a9 00 97 08
>3a3ba8	c8 c0 08 00 d0 f8 a0 00 00 b7 e4 f0 10 20 83 04
>3a3bb8	20 15 3a 90 08 97 08 c8 c0 08 00 d0 ec c2 20 a0
>3a3bc8	09 00 a5 21 97 bd a5 23 c8 c8 97 bd a5 e1 a0 0d
>3a3bd8	00 97 bd c8 c8 e2 20 a5 e3 97 bd c2 20 a5 bd 85
>3a3be8	e1 e2 20 a5 bf 85 e3 e2 20 a0 00 00 a5 25 97 bd
>3a3bf8	c9 02 f0 02 28 60 c2 20 a5 21 85 bd e2 20 a5 23
>3a3c08	85 bf 20 db 0e 20 f0 0e 80 ea 08 c2 30 a5 e1 d0
>3a3c18	06 e2 20 a5 e3 f0 05 20 5b 3a b0 05 20 6c 3b 80
>3a3c28	17 e2 20 a5 25 c9 02 f0 11 c2 30 a0 09 00 a5 21
>3a3c38	97 08 c8 c8 a5 23 97 08 28 60 a0 09 00 b7 08 85
>3a3c48	bd c8 c8 e2 20 b7 08 85 bf 20 db 0e 20 0f 0f e2
>3a3c58	20 a5 25 c9 02 f0 02 80 d0 c2 20 a5 21 85 bd e2
>3a3c68	20 a5 23 85 bf 20 db 0e 20 f0 0e 80 bc 08 20 d2
>3a3c78	19 e2 20 a7 00 20 0f 04 90 42 c2 20 a5 00 85 e4
>3a3c88	e2 20 a5 02 85 e6 20 b1 19 a7 00 f0 0d c9 24 f0
>3a3c98	14 c9 25 f0 09 20 15 3a b0 ec a9 00 80 0c 20 b1
>3a3ca8	19 a9 00 80 05 20 b1 19 a9 02 85 e7 20 f4 1a c9
>3a3cb8	8c d0 06 a5 e7 09 80 85 e7 28 38 60 28 18 60 08
>3a3cc8	c2 20 48 a9 00 08 5b 68 28 c2 20 a5 21 85 0c a5
>3a3cd8	23 64 0e 64 21 64 23 e2 20 64 26 a9 01 85 25 c2
>3a3ce8	20 a5 0c f0 35 10 0e e2 20 a9 80 85 26 c2 20 49
>3a3cf8	ff ff 1a 85 0c e2 20 e6 24 c2 20 46 0e 66 0c e2
>3a3d08	20 66 23 66 22 66 21 c2 20 a5 0c c9 01 00 d0 e5
>3a3d18	e2 20 06 26 66 23 66 22 66 21 60 08 20 db 0e c2
>3a3d28	20 a9 01 00 85 21 a9 00 00 85 23 e2 20 af 00 4d
>3a3d38	00 c2 20 29 ff 00 85 8d a8 a2 01 00 c2 20 bf 00
>3a3d48	4d 00 85 27 a9 00 00 85 29 20 dc 1f e8 e8 88 d0
>3a3d58	eb c2 20 a9 04 00 85 27 a9 00 00 85 29 20 dc 1f
>3a3d68	e2 20 af 00 4d 00 85 0c a9 00 85 0d c2 20 06 0c
>3a3d78	38 a5 21 65 0c 85 21 a5 23 69 00 00 85 23 d0 29
>3a3d88	e2 20 a5 e7 09 80 a6 21 20 9f 0c e2 20 af 00 4d
>3a3d98	00 87 bd a0 01 00 a2 00 00 e2 20 bf 01 4d 00 97
>3a3da8	bd e4 8d f0 19 e8 c8 80 f0 08 c2 20 48 a9 00 08
>3a3db8	5b 68 28 e2 20 a9 09 8f d0 08 00 dc d1 08 e2 20
>3a3dc8	38 a5 bd 67 bd 85 08 a5 be 69 00 85 09 a5 bf 69
>3a3dd8	00 85 0a 64 0b c2 20 a0 05 00 b7 c0 85 0c e2 20
>3a3de8	c8 c8 b7 c0 85 0e 64 0f e2 20 a9 00 87 08 c2 20
>3a3df8	18 a5 08 69 01 00 85 08 a5 0a 69 00 00 85 0a c5
>3a3e08	0e d0 e5 a5 08 c5 0c d0 df 28 60 08 c2 20 64 08
>3a3e18	64 0a e2 20 af 00 4d 00 85 8d 64 8e a2 01 00 e2
>3a3e28	20 a7 bd c5 8d f0 15 08 c2 20 48 a9 00 08 5b 68
>3a3e38	28 e2 20 a9 0a 8f d0 08 00 dc d1 08 c9 01 f0 3a
>3a3e48	a0 01 00 e2 20 bf 00 4d 00 85 21 64 22 64 23 64
>3a3e58	24 b7 bd 85 27 64 28 64 29 64 2a a5 21 c5 27 b0
>3a3e68	68 20 dc 1f c2 20 18 a5 08 65 21 85 08 a5 0a 65
>3a3e78	23 85 0a e8 e8 c8 c4 8d d0 c9 e2 20 18 bf 00 4d
>3a3e88	00 85 8e 65 08 85 08 a5 09 69 00 85 09 c2 20 a5
>3a3e98	0a 69 00 00 85 0a c2 20 06 08 26 0a 06 08 26 0a
>3a3ea8	e2 20 38 a5 08 65 8d 85 08 a5 09 69 00 85 09 c2
>3a3eb8	20 a5 0a 69 00 00 85 0a 18 a5 08 65 bd 85 08 e2
>3a3ec8	20 a5 0a 65 bf 85 0a 28 60 08 c2 20 48 a9 00 08
>3a3ed8	5b 68 28 e2 20 a9 09 8f d0 08 00 dc d1 08 08 20
>3a3ee8	db 0e e2 20 a0 00 00 b7 c0 29 7f c5 25 d0 28 a5
>3a3ef8	25 48 c2 20 a5 23 48 a5 21 48 20 13 3e 68 85 21
>3a3f08	68 85 23 e2 20 68 85 25 c2 20 a5 21 87 08 a0 02
>3a3f18	00 a5 23 97 08 28 60 08 c2 20 48 a9 00 08 5b 68
>3a3f28	28 e2 20 a9 04 8f d0 08 00 dc d1 08 08 20 db 0e
>3a3f38	f4 00 00 f4 00 00 e2 20 48 20 13 3e e2 20 68 c2
>3a3f48	20 68 68 c2 20 a7 08 85 21 a0 02 00 b7 08 85 23
>3a3f58	e2 20 a0 00 00 b7 c0 29 7f 85 25 28 60 5c 84 57
>3a3f68	3a 5c c2 56 3a 5c 85 57 3a 5c 46 48 3a 5c a3 48
>3a3f78	3a 5c d6 47 3a 5c 5c 47 3a 5c d9 4c 3a 5c d0 43
>3a3f88	3a 5c f4 46 3a 5c af 46 3a 5c 39 46 3a 5c 87 57
>3a3f98	3a 5c de 44 3a 5c 34 43 3a 5c 88 57 3a 5c 0c 44
>3a3fa8	3a 5c 89 57 3a 5c 80 57 3a 5c f2 45 3a 5c 8a 57
>3a3fb8	3a 18 fb c2 20 a9 ff fe 1b 58 5c c6 3f 3a c2 30
>3a3fc8	22 34 43 3a 20 08 00 20 0c 00 8b e2 20 a9 00 48
>3a3fd8	ab a2 00 4f 20 92 04 ab 22 69 3f 3a 22 71 3f 3a
>3a3fe8	80 e2 08 8b e2 20 a9 3a 48 ab c2 10 a2 fd 3f 20
>3a3ff8	bc 03 ab 28 6b 41 20 3c 73 74 61 72 74 3e 20 3c
>3a4008	61 73 73 65 6d 62 6c 79 3e 0d 20 20 41 73 73 65
>3a4018	6d 62 6c 65 20 61 20 70 72 6f 67 72 61 6d 0d 0d
>3a4028	43 20 3c 73 74 61 72 74 31 3e 20 3c 73 74 61 72
>3a4038	74 32 3e 20 5b 6c 65 6e 20 28 31 20 69 66 20 62
>3a4048	6c 61 6e 6b 29 5d 0d 20 20 43 6f 6d 70 61 72 65
>3a4058	20 74 6f 20 73 65 63 74 69 6f 6e 73 20 6f 66 20
>3a4068	6d 65 6d 6f 72 79 0d 0d 44 20 3c 73 74 61 72 74
>3a4078	3e 20 5b 65 6e 64 5d 0d 20 20 44 69 73 61 73 73
>3a4088	65 6d 62 6c 65 20 61 20 70 72 6f 67 72 61 6d 0d
>3a4098	0d 46 20 3c 73 74 61 72 74 3e 20 3c 65 6e 64 3e
>3a40a8	20 3c 62 79 74 65 3e 0d 20 20 46 69 6c 6c 20 61
>3a40b8	20 62 6c 6f 63 6b 20 6f 66 20 6d 65 6d 6f 72 79
>3a40c8	20 77 69 74 68 20 61 20 62 79 74 65 0d 0d 47 20
>3a40d8	5b 61 64 64 72 65 73 73 5d 0d 20 20 53 74 61 72
>3a40e8	74 20 65 78 65 63 75 74 69 6f 6e 20 61 74 20 61
>3a40f8	20 6c 6f 63 61 74 69 6f 6e 0d 0d 4a 20 5b 61 64
>3a4108	64 72 65 73 73 5d 20 2d 20 4a 75 6d 70 20 74 6f
>3a4118	20 61 20 6c 6f 63 61 74 69 6f 6e 20 69 6e 20 6d
>3a4128	65 6d 6f 72 79 0d 20 20 4a 75 6d 70 20 74 6f 20
>3a4138	61 20 6c 6f 63 61 74 69 6f 6e 20 69 6e 20 6d 65
>3a4148	6d 6f 72 79 0d 0d 48 20 3c 73 74 61 72 74 3e 20
>3a4158	3c 65 6e 64 3e 20 3c 62 79 74 65 3e 20 5b 62 79
>3a4168	74 65 5d 2e 2e 0d 20 20 48 75 6e 74 20 66 6f 72
>3a4178	20 76 61 6c 75 65 73 20 69 6e 20 6d 65 6d 6f 72
>3a4188	79 0d 0d 4d 20 3c 73 74 61 72 74 3e 20 5b 65 6e
>3a4198	64 5d 0d 20 20 44 75 6d 70 20 74 68 65 20 76 61
>3a41a8	6c 75 65 20 69 6e 20 6d 65 6d 6f 72 79 0d 0d 52
>3a41b8	20 2d 20 44 69 73 70 6c 61 79 20 74 68 65 20 76
>3a41c8	61 6c 75 65 73 20 6f 66 20 74 68 65 20 72 65 67
>3a41d8	69 73 74 65 72 73 0d 0d 3b 20 3c 50 43 3e 20 3c
>3a41e8	41 3e 20 3c 58 3e 20 3c 59 3e 20 3c 53 50 3e 20
>3a41f8	3c 44 42 52 3e 20 3c 44 50 3e 20 3c 4e 56 4d 58
>3a4208	44 49 5a 43 3e 0d 20 20 43 68 61 6e 67 65 20 74
>3a4218	68 65 20 63 6f 6e 74 65 6e 74 73 20 6f 66 20 74
>3a4228	68 65 20 72 65 67 69 73 74 65 72 73 0d 0d 54 20
>3a4238	3c 73 74 61 72 74 3e 20 3c 65 6e 64 3e 20 3c 64
>3a4248	65 73 74 69 6e 61 74 69 6f 6e 3e 0d 20 20 54 72
>3a4258	61 6e 73 66 65 72 20 28 63 6f 70 79 29 20 64 61
>3a4268	74 61 20 77 69 74 68 69 6e 20 6d 65 6d 6f 72 79
>3a4278	0d 0d 57 20 3c 62 79 74 65 3e 0d 20 20 53 65 74
>3a4288	20 74 68 65 20 72 65 67 69 73 74 65 72 20 77 69
>3a4298	64 74 68 20 66 6c 61 67 73 20 66 6f 72 20 74 68
>3a42a8	65 20 64 69 73 61 73 73 65 6d 62 6c 65 72 0d 0d
>3a42b8	58 20 2d 20 52 65 74 75 72 6e 20 74 6f 20 42 41
>3a42c8	53 49 43 0d 0d 3e 20 3c 73 74 61 72 74 3e 20 3c
>3a42d8	62 79 74 65 3e 20 5b 62 79 74 65 5d 2e 2e 2e 0d
>3a42e8	20 20 45 64 69 74 20 64 61 74 61 20 69 6e 20 6d
>3a42f8	65 6d 6f 72 79 0d 0d 3f 20 2d 20 44 69 73 70 6c
>3a4308	61 79 20 61 20 73 68 6f 72 74 20 68 65 6c 70 20
>3a4318	73 63 72 65 65 6e 0d 0d 00 08 08 c2 20 48 a9 46
>3a4328	08 5b 68 28 e2 20 a5 0d 85 4e 28 6b 08 e2 20 48
>3a4338	a9 3a 48 ab 68 28 a2 9a 57 20 bc 03 e2 20 a9 3b
>3a4348	20 18 00 a9 20 20 18 00 c2 30 08 e2 20 48 a9 00
>3a4358	48 ab 68 28 a0 03 00 a2 42 02 20 6c 03 c2 20 a9
>3a4368	20 00 20 18 00 af 44 02 00 20 cc 03 a9 20 00 20
>3a4378	18 00 af 46 02 00 20 cc 03 a9 20 00 20 18 00 af
>3a4388	48 02 00 20 cc 03 a9 20 00 20 18 00 af 4a 02 00
>3a4398	20 cc 03 a9 20 00 20 18 00 af 4e 02 00 20 e6 03
>3a43a8	a9 20 00 20 18 00 20 18 00 af 4c 02 00 20 cc 03
>3a43b8	a9 20 00 20 18 00 08 e2 20 ad 4f 02 22 18 56 3a
>3a43c8	28 20 5c 03 20 5c 03 6b 08 0b 08 c2 20 48 a9 46
>3a43d8	08 5b 68 28 e2 20 a5 15 87 0d e2 20 a5 0f c5 13
>3a43e8	d0 0e c2 20 a5 0d c5 11 d0 06 20 5c 03 2b 28 6b
>3a43f8	c2 20 18 a5 0d 69 01 00 85 0d e2 20 a5 0e 69 00
>3a4408	85 0e 80 d0 08 0b 08 c2 20 48 a9 46 08 5b 68 28
>3a4418	e2 20 a5 0f c5 17 90 45 c2 20 a5 0d c5 15 90 3d
>3a4428	e2 20 a7 0d 87 15 a5 0f c5 13 d0 0b c2 20 a5 0d
>3a4438	c5 11 d0 03 4c c3 44 c2 20 18 a5 0d 69 01 00 85
>3a4448	0d e2 20 a5 0e 69 00 85 0e c2 20 18 a5 15 69 01
>3a4458	00 85 15 e2 20 a5 16 69 00 85 16 80 c3 c2 20 38
>3a4468	a5 11 e5 0d 85 19 e2 20 a5 13 e5 0f 85 1b c2 20
>3a4478	18 a5 19 65 15 85 15 e2 20 a5 1b 65 17 85 17 e2
>3a4488	20 a7 11 87 15 a5 13 c5 0f d0 0a c2 20 a5 11 c5
>3a4498	0d d0 02 80 26 c2 20 38 a5 11 e9 01 00 85 11 e2
>3a44a8	20 a5 12 e9 00 85 12 c2 20 38 a5 15 e9 01 00 85
>3a44b8	15 e2 20 a5 16 e9 00 85 16 80 c4 20 5c 03 2b 28
>3a44c8	6b 08 e2 20 c9 21 90 0b c9 7f 90 04 c9 a0 90 03
>3a44d8	28 38 6b 28 18 6b 08 8b 0b 08 c2 20 48 a9 46 08
>3a44e8	5b 68 28 e2 20 a5 31 c9 02 b0 16 c9 01 90 20 c2
>3a44f8	20 18 a5 0d 69 00 01 85 11 e2 20 a5 0f 69 00 85
>3a4508	13 c2 20 a5 0d 85 32 e2 20 a5 0f 85 34 80 12 c2
>3a4518	20 18 a5 32 69 00 01 85 11 e2 20 a5 34 69 00 85
>3a4528	13 e2 20 a0 00 00 c2 20 a5 32 85 19 e2 20 a5 34
>3a4538	85 1b e2 20 a7 19 22 c9 44 3a b0 02 a9 3f 99 7c
>3a4548	08 c2 20 18 a5 19 69 01 00 85 19 e2 20 a5 1b 69
>3a4558	00 85 1b c8 c0 08 00 90 db a9 00 99 7c 08 a9 3e
>3a4568	20 18 00 a9 20 20 18 00 e2 20 a5 34 20 e6 03 a9
>3a4578	3a 20 18 00 c2 20 a5 32 20 cc 03 c2 20 a9 08 00
>3a4588	85 47 e2 20 a9 20 20 18 00 a7 32 20 e6 03 22 f7
>3a4598	55 3a e2 20 c6 47 d0 ea a9 20 20 18 00 a9 20 20
>3a45a8	18 00 08 e2 20 48 a9 00 48 ab 68 28 a2 7c 08 20
>3a45b8	bc 03 20 5c 03 a5 34 c5 13 90 0f c2 20 a5 32 c5
>3a45c8	11 90 07 20 5c 03 2b ab 28 6b 4c 29 45 08 8d 90
>3a45d8	08 e2 20 bd 00 00 99 00 00 ad 90 08 f0 0a c8 e8
>3a45e8	e8 e8 e8 ce 90 08 80 eb 28 6b 08 0b 8b 08 c2 20
>3a45f8	48 a9 46 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68
>3a4608	28 c2 30 a5 0d 85 32 a5 0f 85 34 e2 20 a5 31 3a
>3a4618	85 47 a2 57 08 a0 7c 08 22 d5 45 3a a0 00 00 b9
>3a4628	7c 08 87 32 22 f7 55 3a c8 c4 47 d0 f2 ab 2b 28
>3a4638	6b 08 0b 8b 08 c2 20 48 a9 46 08 5b 68 28 08 e2
>3a4648	20 48 a9 00 48 ab 68 28 e2 20 c2 10 a5 31 3a 3a
>3a4658	85 47 a2 5b 08 a0 7c 08 22 d5 45 3a c2 20 a5 0d
>3a4668	85 32 a5 0f 85 34 c2 20 a5 34 c5 13 d0 06 a5 32
>3a4678	c5 11 f0 2c e2 20 a0 00 00 b7 32 d9 7c 08 d0 1a
>3a4688	c8 c4 47 d0 f4 c2 20 a5 32 85 4a a5 34 85 4c 22
>3a4698	a1 50 3a e2 20 a9 20 20 18 00 22 f7 55 3a 80 c6
>3a46a8	20 5c 03 ab 2b 28 6b 08 c2 20 48 a9 46 08 5b 68
>3a46b8	28 e2 20 a5 31 f0 0e c2 30 a5 0d 8f 40 02 00 a5
>3a46c8	0f 8f 42 02 00 af 46 02 00 aa af 48 02 00 a8 af
>3a46d8	4a 02 00 1b af 4c 02 00 5b e2 20 a9 3a 48 a9 46
>3a46e8	48 a9 ef 48 4c 26 47 ea 5c 04 00 3a 08 c2 20 48
>3a46f8	a9 46 08 5b 68 28 e2 20 a5 31 f0 c9 c2 30 a5 0d
>3a4708	8f 40 02 00 a5 0f 8f 42 02 00 af 46 02 00 aa af
>3a4718	48 02 00 a8 af 4a 02 00 1b af 4c 02 00 5b e2 20
>3a4728	af 4e 02 00 48 ab a9 5c 8f a0 08 00 af 42 02 00
>3a4738	8f a3 08 00 af 41 02 00 8f a2 08 00 af 40 02 00
>3a4748	8f a1 08 00 af 4f 02 00 48 c2 20 af 44 02 00 28
>3a4758	5c a0 08 00 08 0b 8b 08 e2 20 48 a9 3a 48 ab 68
>3a4768	28 08 c2 20 48 a9 46 08 5b 68 28 c2 10 e2 20 a5
>3a4778	31 c9 02 f0 0c c9 03 d0 11 c2 20 a5 15 85 47 80
>3a4788	11 c2 20 a9 01 00 85 47 80 08 a2 8b 57 20 bc 03
>3a4798	80 35 a5 0d 85 4a a5 0f 85 4c a0 00 00 e2 20 a7
>3a47a8	4a d7 11 f0 09 22 a1 50 3a a9 20 20 18 00 c2 20
>3a47b8	18 a5 4a 69 01 00 85 4a a5 4c 69 00 00 85 4c c8
>3a47c8	c4 47 d0 d9 20 5c 03 20 5c 03 ab 2b 28 6b 08 0b
>3a47d8	8b 08 e2 20 48 a9 00 48 ab 68 28 08 c2 20 48 a9
>3a47e8	46 08 5b 68 28 e2 20 a5 31 f0 4f a6 0d 8e 40 02
>3a47f8	a6 0f 8e 42 02 c9 01 f0 41 a6 11 8e 44 02 c9 02
>3a4808	f0 38 a6 15 8e 46 02 c9 03 f0 2f a6 19 8e 48 02
>3a4818	c9 04 f0 26 a6 1d 8e 4a 02 c9 05 f0 1d e2 10 a6
>3a4828	21 8e 4e 02 c9 06 f0 12 c2 10 a6 25 8e 4c 02 c9
>3a4838	07 f0 07 e2 10 a6 29 8e 4f 02 ab 2b 28 6b 08 0b
>3a4848	8b 08 c2 20 48 a9 46 08 5b 68 28 e2 20 c2 10 a2
>3a4858	00 00 bf cb 57 3a f0 18 c7 08 f0 03 e8 80 f3 c2
>3a4868	20 8a 0a aa bf 7c 48 3a 8f 2d 08 00 22 a0 48 3a
>3a4878	ab 2b 28 6b 75 3f 7d 3f 81 3f 85 3f 89 3f 8d 3f
>3a4888	91 3f 95 3f 99 3f 9d 3f 79 3f a1 3f a5 3f a9 3f
>3a4898	21 43 ad 3f b1 3f ea 3f 6c 2d 08 08 8b 0b 08 c2
>3a48a8	20 48 a9 46 08 5b 68 28 e2 20 a5 31 c9 02 b0 03
>3a48b8	4c 49 4a c2 20 a5 0d 85 32 a5 0f 85 34 c2 20 22
>3a48c8	4b 4c 3a c9 ff ff f0 10 85 54 e2 20 a5 31 c9 03
>3a48d8	f0 36 a9 13 85 4f 80 4c 20 5c 03 08 e2 20 48 a9
>3a48e8	3a 48 ab 68 28 c2 10 a2 80 4a 20 bc 03 4c 49 4a
>3a48f8	20 5c 03 08 e2 20 48 a9 3a 48 ab 68 28 c2 10 a2
>3a4908	8f 4a 20 bc 03 4c 49 4a e2 20 22 81 4c 3a c9 ff
>3a4918	f0 de 85 4f c9 03 f0 62 c9 0b f0 5e c9 13 f0 04
>3a4928	c9 08 f0 00 22 79 4b 3a b0 03 4c 12 4a 87 32 22
>3a4938	f7 55 3a 08 e2 20 48 a9 00 48 ab 68 28 c2 20 a5
>3a4948	32 85 56 a5 34 85 58 e2 20 a5 4f c9 12 f0 6c c9
>3a4958	16 f0 68 c9 14 f0 7c 29 3f c9 02 d0 03 4c 40 4a
>3a4968	c2 20 29 ff 00 aa e2 20 bf 3d 55 3a c9 03 f0 57
>3a4978	c9 02 f0 5f c9 01 f0 67 80 71 c2 20 a5 54 c9 b5
>3a4988	51 f0 26 c9 19 52 f0 2a c9 99 51 f0 1c c9 9d 51
>3a4998	f0 17 c9 a5 51 f0 12 c9 8d 51 f0 0d c9 a1 51 f0
>3a49a8	08 c9 89 51 f0 03 4c 2c 49 e2 20 a9 12 85 4f 4c
>3a49b8	2c 49 e2 20 a9 16 85 4f 4c 2c 49 22 bc 4a 3a 90
>3a49c8	60 c9 02 f0 0e 80 18 a0 02 00 b9 96 08 97 56 22
>3a49d8	f7 55 3a a0 01 00 b9 96 08 97 56 22 f7 55 3a a0
>3a49e8	00 00 b9 96 08 97 56 22 f7 55 3a e2 20 a9 41 20
>3a49f8	18 00 a9 20 20 18 00 a6 32 86 4a a6 34 86 4c 22
>3a4a08	a1 50 3a a9 20 20 18 00 80 37 20 5c 03 08 e2 20
>3a4a18	48 a9 3a 48 ab 68 28 c2 10 a2 4d 4a 20 bc 03 80
>3a4a28	20 20 5c 03 08 e2 20 48 a9 3a 48 ab 68 28 c2 10
>3a4a38	a2 9d 4a 20 bc 03 80 09 a5 4f 29 c0 d0 95 4c e7
>3a4a48	49 2b ab 28 6b 41 64 64 72 65 73 73 69 6e 67 20
>3a4a58	6d 6f 64 65 20 6e 6f 74 20 64 65 66 69 6e 65 64
>3a4a68	20 66 6f 72 20 74 68 61 74 20 69 6e 73 74 72 75
>3a4a78	63 74 69 6f 6e 2e 0d 00 42 61 64 20 6d 6e 65 6d
>3a4a88	6f 6e 69 63 2e 0d 00 42 61 64 20 6f 70 65 72 61
>3a4a98	6e 64 2e 0d 00 52 65 6c 61 74 69 76 65 20 6f 66
>3a4aa8	66 73 65 74 20 69 73 20 74 6f 6f 20 6c 61 72 67
>3a4ab8	65 2e 0d 00 08 0b 08 c2 20 48 a9 46 08 5b 68 28
>3a4ac8	e2 20 a5 4f c9 12 f0 0a c2 20 18 a5 32 69 02 00
>3a4ad8	80 08 c2 20 18 a5 32 69 01 00 85 4a a5 34 69 00
>3a4ae8	00 85 4c 38 a5 50 e5 4a 85 50 a5 52 e5 4c 85 52
>3a4af8	e2 20 a5 4f c9 16 f0 1e a5 50 30 0c a5 51 d0 2a
>3a4b08	a5 52 d0 26 a9 01 80 26 a5 51 c9 ff d0 1c a5 52
>3a4b18	c9 ff d0 16 80 18 a5 51 30 06 a5 52 d0 0c 80 0e
>3a4b28	a5 52 c9 ff d0 04 a9 02 80 04 2b 28 18 6b 2b 28
>3a4b38	38 6b 08 0b c2 10 da 08 c2 20 48 a9 46 08 5b 68
>3a4b48	28 e2 20 a2 00 00 df 00 d0 3a f0 08 e8 e0 10 00
>3a4b58	f0 1b 80 f2 c2 20 06 50 26 52 06 50 26 52 06 50
>3a4b68	26 52 06 50 26 52 e2 20 8a 05 50 85 50 fa 2b 28
>3a4b78	6b 0b 8b 08 c2 20 48 a9 46 08 5b 68 28 08 e2 20
>3a4b88	48 a9 3a 48 ab 68 28 e2 20 a5 4f 29 3f 85 4a c2
>3a4b98	30 a2 00 00 a0 00 00 bd 3b 52 f0 1b c5 54 d0 0d
>3a4ba8	e2 20 b9 3d 54 29 3f c5 4a f0 07 c2 20 e8 e8 c8
>3a4bb8	80 e5 98 38 ab 2b 6b 18 ab 2b 6b 08 0b 08 c2 20
>3a4bc8	48 a9 46 08 5b 68 28 e2 20 c2 10 a0 00 00 64 50
>3a4bd8	64 52 b7 03 f0 11 c9 64 f0 19 48 b7 36 85 4a 68
>3a4be8	c5 4a d0 0b c8 80 eb b7 36 d0 04 2b 28 38 6b 2b
>3a4bf8	28 18 6b e2 20 b7 36 c9 3a b0 04 c9 30 b0 14 c9
>3a4c08	47 b0 04 c9 41 b0 0c c9 67 b0 e4 c9 61 b0 02 80
>3a4c18	de 29 df 22 3a 4b 3a 80 cb 0b 08 c2 20 48 a9 46
>3a4c28	08 5b 68 28 a0 00 00 e2 20 b7 03 f0 03 c8 80 f9
>3a4c38	c2 20 c8 5a 68 18 65 03 85 03 a5 05 69 00 00 85
>3a4c48	05 2b 6b 0b 08 c2 20 48 a9 46 08 5b 68 28 c2 20
>3a4c58	a5 11 85 36 a5 13 85 38 a9 c9 50 85 03 a9 3a 00
>3a4c68	85 05 22 c3 4b 3a b0 0d 22 21 4c 3a a7 03 d0 f2
>3a4c78	a9 ff ff 80 02 a5 03 2b 6b 08 0b 08 c2 20 48 a9
>3a4c88	46 08 5b 68 28 c2 30 a5 15 85 36 a5 17 85 38 a9
>3a4c98	55 55 85 03 a9 3a 00 85 05 22 c3 4b 3a b0 22 22
>3a4ca8	21 4c 3a c2 20 18 a5 03 69 01 00 85 03 a5 05 69
>3a4cb8	00 00 85 05 e2 20 a7 03 d0 df c2 20 a9 ff ff 80
>3a4cc8	0d 22 21 4c 3a e2 20 a7 03 c2 20 29 ff 00 2b 28
>3a4cd8	6b 08 8b 0b 08 c2 20 48 a9 46 08 5b 68 28 e2 20
>3a4ce8	a5 31 c9 02 b0 16 c9 01 90 20 c2 20 18 a5 0d 69
>3a4cf8	00 01 85 11 e2 20 a5 0f 69 00 85 13 c2 20 a5 0d
>3a4d08	85 32 e2 20 a5 0f 85 34 80 12 c2 20 18 a5 32 69
>3a4d18	00 01 85 11 e2 20 a5 34 69 00 85 13 22 3f 4d 3a
>3a4d28	e2 20 a5 34 c5 13 90 f4 c2 20 a5 32 c5 11 90 ec
>3a4d38	20 5c 03 2b ab 28 6b 08 0b e2 20 a9 41 20 18 00
>3a4d48	a9 20 20 18 00 08 c2 20 48 a9 78 08 5b 68 28 c2
>3a4d58	20 a5 00 85 18 e2 20 a5 02 85 1a 22 a1 50 3a a9
>3a4d68	20 20 18 00 c2 20 18 a5 00 69 01 00 85 18 e2 20
>3a4d78	a5 02 69 00 85 1a e2 20 c2 10 a7 00 c9 c2 d0 0b
>3a4d88	48 a7 18 49 ff 2f 94 08 00 80 0b c9 e2 d0 0c 48
>3a4d98	a7 18 0f 94 08 00 8f 94 08 00 68 c2 20 29 ff 00
>3a4da8	0a aa bf 3b 52 3a aa 22 1b 50 3a e2 20 a7 00 aa
>3a4db8	bf 3d 54 3a 22 f7 55 3a 22 ca 4d 3a 20 5c 03 2b
>3a4dc8	28 6b 08 e2 20 48 29 3f 0a c2 10 aa 68 7c d8 4d
>3a4dd8	08 4e 23 4e 2a 4e 4f 4e 56 4e 71 4e 93 4e a4 4e
>3a4de8	e1 4e e9 4e fa 4e 0b 4f 12 4f 37 4f 64 4f d0 4e
>3a4df8	b5 4e 82 4e 57 4f 61 4f 75 4f a2 4f 52 4f b3 4f
>3a4e08	a9 28 20 18 00 22 ca 4f 3a a9 2c 20 18 00 a9 58
>3a4e18	20 18 00 a9 29 20 18 00 4c c4 4f 22 ca 4f 3a 4c
>3a4e28	c4 4f e2 20 48 a9 23 20 18 00 68 29 c0 c9 00 f0
>3a4e38	0f 4a 4a 2f 94 08 00 d0 07 22 d4 4f 3a 4c c4 4f
>3a4e48	22 ca 4f 3a 4c c4 4f 22 d4 4f 3a 4c c4 4f a9 28
>3a4e58	20 18 00 22 ca 4f 3a a9 29 20 18 00 a9 2c 20 18
>3a4e68	00 a9 59 20 18 00 4c c4 4f 22 ca 4f 3a a9 2c 20
>3a4e78	18 00 a9 58 20 18 00 4c c4 4f 22 ca 4f 3a a9 2c
>3a4e88	20 18 00 a9 59 20 18 00 4c c4 4f 22 d4 4f 3a a9
>3a4e98	2c 20 18 00 a9 59 20 18 00 4c c4 4f 22 d4 4f 3a
>3a4ea8	a9 2c 20 18 00 a9 58 20 18 00 4c c4 4f a9 28 20
>3a4eb8	18 00 22 d4 4f 3a a9 2c 20 18 00 a9 58 20 18 00
>3a4ec8	a9 29 20 18 00 4c c4 4f a9 28 20 18 00 22 ca 4f
>3a4ed8	3a a9 29 20 18 00 4c c4 4f a9 41 20 18 00 4c c8
>3a4ee8	4f 22 ca 4f 3a a9 2c 20 18 00 a9 53 20 18 00 4c
>3a4ef8	c4 4f a9 5b 20 18 00 22 ca 4f 3a a9 5d 20 18 00
>3a4f08	4c c4 4f 22 e2 4f 3a 4c c8 4f a9 28 20 18 00 22
>3a4f18	ca 4f 3a a9 2c 20 18 00 a9 53 20 18 00 a9 29 20
>3a4f28	18 00 a9 2c 20 18 00 a9 59 20 18 00 4c c4 4f a9
>3a4f38	5b 20 18 00 22 ca 4f 3a a9 5d 20 18 00 a9 2c 20
>3a4f48	18 00 a9 59 20 18 00 4c c4 4f a0 02 00 80 03 a0
>3a4f58	01 00 22 48 50 3a 4c c8 4f 4c c8 4f 22 e2 4f 3a
>3a4f68	a9 2c 20 18 00 a9 58 20 18 00 4c c8 4f a9 23 20
>3a4f78	18 00 8b a5 02 48 ab a6 00 e8 a0 01 00 20 6c 03
>3a4f88	a9 2c 20 18 00 a9 23 20 18 00 a6 00 a0 01 00 20
>3a4f98	6c 03 ab 22 f7 55 3a 4c c4 4f a9 28 20 18 00 22
>3a4fa8	d4 4f 3a a9 29 20 18 00 4c c4 4f a9 5b 20 18 00
>3a4fb8	22 d4 4f 3a a9 5d 20 18 00 4c c4 4f 22 f7 55 3a
>3a4fc8	28 6b 08 e2 20 a7 00 20 e6 03 28 6b 08 c2 30 a7
>3a4fd8	00 20 cc 03 22 f7 55 3a 28 6b 08 8b 0b c2 30 5a
>3a4fe8	08 c2 20 48 a9 78 08 5b 68 28 08 e2 20 48 a9 00
>3a4ff8	48 ab 68 28 e2 20 a0 00 00 a7 00 99 90 08 22 f7
>3a5008	55 3a c8 c0 03 00 d0 f1 22 a1 50 3a c2 30 7a 2b
>3a5018	ab 28 6b 08 8b e2 20 c2 10 08 e2 20 48 a9 3a 48
>3a5028	ab 68 28 bd 00 00 20 18 00 e8 bd 00 00 20 18 00
>3a5038	e8 bd 00 00 20 18 00 e8 a9 20 20 18 00 ab 28 6b
>3a5048	08 0b 08 c2 20 48 a9 78 08 5b 68 28 e2 20 c0 02
>3a5058	00 f0 14 a7 00 85 18 30 06 64 19 64 1a 80 1e a9
>3a5068	ff 85 19 85 1a 80 16 a7 00 85 18 22 f7 55 3a a7
>3a5078	00 85 19 30 04 64 1a 80 04 a9 ff 85 1a c2 20 38
>3a5088	a5 00 65 18 85 18 e2 20 a5 02 65 1a 85 1a 22 a1
>3a5098	50 3a 22 f7 55 3a 2b 28 6b 08 0b c2 20 48 08 c2
>3a50a8	20 48 a9 46 08 5b 68 28 e2 20 a5 4c 20 e6 03 e2
>3a50b8	20 a9 3a 20 18 00 c2 20 a5 4a 20 cc 03 68 2b 28
>3a50c8	6b 4f 52 41 00 41 4e 44 00 45 4f 52 00 41 44 43
>3a50d8	00 53 54 41 00 4c 44 41 00 43 4d 50 00 53 42 43
>3a50e8	00 41 53 4c 00 52 4f 4c 00 4c 53 52 00 52 4f 52
>3a50f8	00 53 54 58 00 4c 44 58 00 44 45 43 00 49 4e 43
>3a5108	00 42 49 54 00 4a 4d 50 00 53 54 59 00 4c 44 59
>3a5118	00 43 50 59 00 43 50 58 00 42 52 4b 00 4a 53 52
>3a5128	00 52 54 49 00 52 54 53 00 50 48 50 00 50 4c 50
>3a5138	00 50 48 41 00 50 4c 41 00 44 45 59 00 54 41 59
>3a5148	00 49 4e 59 00 49 4e 58 00 43 4c 43 00 53 45 43
>3a5158	00 43 4c 49 00 53 45 49 00 54 59 41 00 43 4c 56
>3a5168	00 43 4c 44 00 53 45 44 00 54 58 41 00 54 58 53
>3a5178	00 54 41 58 00 54 53 58 00 44 45 58 00 4e 4f 50
>3a5188	00 42 50 4c 00 42 4d 49 00 42 56 43 00 42 56 53
>3a5198	00 42 43 43 00 42 43 53 00 42 4e 45 00 42 45 51
>3a51a8	00 54 53 42 00 54 52 42 00 53 54 5a 00 42 52 41
>3a51b8	00 50 48 59 00 50 4c 59 00 50 48 58 00 50 4c 58
>3a51c8	00 50 48 44 00 50 4c 44 00 50 48 4b 00 52 54 4c
>3a51d8	00 50 48 42 00 50 4c 42 00 57 41 49 00 58 42 41
>3a51e8	00 54 43 53 00 54 53 43 00 54 43 44 00 54 44 43
>3a51f8	00 54 58 59 00 54 59 58 00 53 54 50 00 58 43 45
>3a5208	00 43 4f 50 00 4a 53 4c 00 57 44 4d 00 50 45 52
>3a5218	00 42 52 4c 00 52 45 50 00 53 45 50 00 4d 56 50
>3a5228	00 4d 56 4e 00 50 45 49 00 50 45 41 00 4a 4d 4c
>3a5238	00 00 00 21 51 c9 50 09 52 c9 50 a9 51 c9 50 e9
>3a5248	50 c9 50 31 51 c9 50 e9 50 c9 51 a9 51 c9 50 e9
>3a5258	50 c9 50 89 51 c9 50 c9 50 c9 50 ad 51 c9 50 e9
>3a5268	50 c9 50 51 51 c9 50 05 51 e9 51 ad 51 c9 50 e9
>3a5278	50 c9 50 25 51 cd 50 0d 52 cd 50 09 51 cd 50 ed
>3a5288	50 cd 50 35 51 cd 50 ed 50 cd 51 09 51 cd 50 ed
>3a5298	50 cd 50 8d 51 cd 50 cd 50 cd 50 09 51 cd 50 ed
>3a52a8	50 cd 50 55 51 cd 50 01 51 ed 51 09 51 cd 50 ed
>3a52b8	50 cd 50 29 51 d1 50 11 52 d1 50 25 52 d1 50 f1
>3a52c8	50 d1 50 39 51 d1 50 f1 50 d1 51 0d 51 d1 50 f1
>3a52d8	50 d1 50 91 51 d1 50 d1 50 d1 50 29 52 d1 50 f1
>3a52e8	50 d1 50 59 51 d1 50 b9 51 f1 51 35 52 d1 50 f1
>3a52f8	50 d1 50 2d 51 d5 50 15 52 d5 50 b1 51 d5 50 f5
>3a5308	50 d5 50 3d 51 d5 50 f5 50 d5 51 0d 51 d5 50 f5
>3a5318	50 d5 50 95 51 d5 50 d5 50 d5 50 b1 51 d5 50 f5
>3a5328	50 d5 50 5d 51 d5 50 bd 51 f5 51 0d 51 d5 50 f5
>3a5338	50 d5 50 b5 51 d9 50 19 52 d9 50 11 51 d9 50 f9
>3a5348	50 d9 50 41 51 09 51 71 51 d9 51 11 51 d9 50 f9
>3a5358	50 d9 50 99 51 d9 50 d9 50 d9 50 11 51 d9 50 f9
>3a5368	50 d9 50 61 51 d9 50 75 51 f9 51 b1 51 d9 50 b1
>3a5378	51 d9 50 15 51 dd 50 fd 50 dd 50 15 51 dd 50 fd
>3a5388	50 dd 50 45 51 dd 50 79 51 dd 51 15 51 dd 50 fd
>3a5398	50 dd 50 9d 51 dd 50 dd 50 dd 50 15 51 dd 50 fd
>3a53a8	50 dd 50 65 51 dd 50 7d 51 fd 51 15 51 dd 50 fd
>3a53b8	50 dd 50 19 51 e1 50 1d 52 e1 50 19 51 e1 50 01
>3a53c8	51 e1 50 49 51 e1 50 81 51 e1 51 19 51 e1 50 01
>3a53d8	51 e1 50 a1 51 e1 50 e1 50 e1 50 2d 52 e1 50 01
>3a53e8	51 e1 50 69 51 e1 50 c1 51 01 52 35 52 e1 50 01
>3a53f8	51 e1 50 1d 51 e5 50 21 52 e5 50 1d 51 e5 50 05
>3a5408	51 e5 50 4d 51 e5 50 85 51 e5 51 1d 51 e5 50 05
>3a5418	51 e5 50 a5 51 e5 50 e5 50 e5 50 31 52 e5 50 05
>3a5428	51 e5 50 6d 51 e5 50 c5 51 05 52 25 51 e5 50 05
>3a5438	51 e5 50 00 00 13 00 02 09 01 01 01 0a 13 82 08
>3a5448	13 03 03 03 0b 12 04 0f 0c 01 05 05 0d 13 06 08
>3a5458	13 03 07 07 0e 03 00 0b 09 01 01 01 0a 13 82 08
>3a5468	13 03 03 03 0b 12 04 0f 0c 05 05 05 0d 13 06 08
>3a5478	13 07 07 07 0e 13 00 13 09 14 01 01 0a 13 82 08
>3a5488	13 03 03 03 0b 12 04 0f 0c 14 05 05 0d 13 06 13
>3a5498	13 0b 07 07 0b 13 00 16 09 01 01 01 0a 13 82 08
>3a54a8	13 15 03 03 0b 12 04 0f 0c 05 05 05 0d 13 06 13
>3a54b8	13 10 07 07 0e 12 00 16 09 01 01 01 0a 13 82 13
>3a54c8	13 03 03 03 0b 12 04 0f 0c 05 05 11 0d 13 06 13
>3a54d8	13 03 07 07 0e 82 00 42 09 01 01 01 0a 13 82 13
>3a54e8	13 03 03 03 0b 12 04 0f 0c 05 05 11 0d 13 06 13
>3a54f8	13 07 07 06 0e 42 00 02 09 01 01 01 0a 13 82 13
>3a5508	13 03 03 03 0b 12 04 0f 0c 01 05 05 0d 13 06 13
>3a5518	13 17 07 07 0e 42 00 02 09 01 01 01 0f 13 82 13
>3a5528	13 03 03 03 0b 12 04 0f 0c 03 05 05 0d 13 06 13
>3a5538	13 10 07 07 0e 01 01 01 02 01 01 02 02 00 01 01
>3a5548	03 01 01 03 01 02 01 01 00 02 02 02 02 41 00 08
>3a5558	64 64 3a 64 64 64 64 2c 58 00 0e 64 64 3a 64 64
>3a5568	64 64 00 0b 64 64 64 64 2c 58 00 07 64 64 64 64
>3a5578	2c 59 00 06 64 64 64 64 00 03 64 64 2c 58 00 05
>3a5588	64 64 2c 59 00 11 64 64 2c 53 00 09 64 64 00 01
>3a5598	23 64 64 64 64 00 c2 23 64 64 2c 23 64 64 00 14
>3a55a8	23 64 64 00 02 28 64 64 2c 53 29 2c 59 00 0c 28
>3a55b8	64 64 64 64 2c 58 29 00 10 28 64 64 64 64 29 00
>3a55c8	10 28 64 64 2c 58 29 00 00 28 64 64 29 2c 59 00
>3a55d8	04 28 64 64 29 00 0f 5b 64 64 64 64 5d 00 17 5b
>3a55e8	64 64 5d 2c 59 00 0d 5b 64 64 5d 00 0a 00 00 08
>3a55f8	c2 20 48 18 af 78 08 00 69 01 00 8f 78 08 00 e2
>3a5608	20 af 7a 08 00 69 00 8f 7a 08 00 c2 20 68 28 6b
>3a5618	08 c2 10 e2 20 da a2 08 00 0a b0 08 48 a9 30 20
>3a5628	18 00 80 06 48 a9 31 20 18 00 68 ca d0 eb fa 28
>3a5638	6b 08 c2 20 48 a9 46 08 5b 68 28 e2 20 a7 32 f0
>3a5648	0a c9 20 d0 06 22 f7 55 3a 80 f2 6b 08 c2 20 48
>3a5658	a9 46 08 5b 68 28 e2 20 64 4a c2 20 64 50 64 52
>3a5668	e2 20 a7 32 c9 3a f0 0d 20 39 04 90 0e 22 3a 4b
>3a5678	3a a9 01 85 4a 22 f7 55 3a 80 e5 a5 4a f0 16 a5
>3a5688	31 c2 20 29 ff 00 0a 0a aa a5 50 95 0d a5 52 95
>3a5698	0f e2 20 e6 31 6b e2 20 64 31 22 39 56 3a a7 32
>3a56a8	f0 17 22 54 56 3a a5 31 c9 09 b0 0d a7 32 f0 09
>3a56b8	c9 20 f0 e6 20 39 04 b0 e1 6b 08 0b 08 c2 20 48
>3a56c8	a9 46 08 5b 68 28 c2 10 e2 20 a2 31 00 74 00 ca
>3a56d8	d0 fb a9 00 85 02 85 34 c2 20 a9 00 4f 85 00 85
>3a56e8	32 e2 20 22 39 56 3a c9 00 f0 38 c2 20 a5 32 85
>3a56f8	08 e2 20 a5 34 85 0a a2 01 00 22 f7 55 3a a7 32
>3a5708	d0 06 86 0b 64 31 80 1b c9 20 f0 03 e8 80 eb 86
>3a5718	0b a9 00 87 32 22 f7 55 3a a7 08 c9 41 f0 07 22
>3a5728	9e 56 3a 2b 28 6b 22 39 56 3a a7 32 f0 f5 22 54
>3a5738	56 3a 22 39 56 3a a7 32 f0 e9 c2 20 a5 32 85 11
>3a5748	e2 20 a5 34 85 13 22 f7 55 3a a7 32 f0 26 c9 20
>3a5758	d0 f4 a9 00 87 32 e6 31 22 f7 55 3a 22 39 56 3a
>3a5768	a7 32 f0 bf c2 20 a5 32 85 15 e2 20 a5 34 85 17
>3a5778	e6 31 80 af e6 31 80 ab 5c 58 1f 3a 6b 00 00 00
>3a5788	00 00 00 42 61 64 20 61 72 67 75 6d 65 6e 74 73
>3a5798	0d 00 0d 20 20 50 43 20 20 20 20 20 41 20 20 20
>3a57a8	20 58 20 20 20 20 59 20 20 20 20 53 50 20 20 20
>3a57b8	44 42 52 20 44 50 20 20 20 4e 56 4d 58 44 49 5a
>3a57c8	43 0d 00 41 43 44 46 47 4a 48 4c 4d 52 3b 53 54
>3a57d8	56 57 58 3e 3f 00 18 fb 08 c2 20 48 a9 00 08 5b
>3a57e8	68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 30 20 1d
>3a57f8	58 a9 ff fe 1b 08 e2 20 48 a9 3a 48 ab 68 28 a2
>3a5808	e2 d1 20 bc 03 08 e2 20 48 a9 00 48 ab 68 28 4c
>3a5818	58 1f 4c 1a 58 08 20 06 03 20 67 38 28 60 00 00
>3a5828	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 1916 times (30656 bytes)...
>3acff8	00 00 00 00 00 00 00 00 30 31 32 33 34 35 36 37
>3ad008	38 39 41 42 43 44 45 46 2b 00 2d 00 2a 00 2f 00
>3ad018	4d 4f 44 00 5e 00 3c 00 3d 00 3e 00 4e 4f 54 00
>3ad028	41 4e 44 00 4f 52 00 28 00 29 00 52 45 4d 00 50
>3ad038	52 49 4e 54 00 4c 45 54 00 47 4f 54 4f 00 45 4e
>3ad048	44 00 49 46 00 54 48 45 4e 00 45 4c 53 45 00 47
>3ad058	4f 53 55 42 00 52 45 54 55 52 4e 00 46 4f 52 00
>3ad068	54 4f 00 53 54 45 50 00 4e 45 58 54 00 44 4f 00
>3ad078	4c 4f 4f 50 00 57 48 49 4c 45 00 55 4e 54 49 4c
>3ad088	00 45 58 49 54 00 43 4c 52 00 53 54 4f 50 00 50
>3ad098	4f 4b 45 00 50 4f 4b 45 57 00 50 4f 4b 45 4c 00
>3ad0a8	43 4c 53 00 52 45 41 44 00 44 41 54 41 00 52 45
>3ad0b8	53 54 4f 52 45 00 44 49 4d 00 43 41 4c 4c 00 3c
>3ad0c8	3d 00 3e 3d 00 3c 3e 00 2d 00 4c 45 4e 00 50 45
>3ad0d8	45 4b 00 50 45 45 4b 57 00 50 45 45 4b 4c 00 43
>3ad0e8	48 52 24 00 41 53 43 00 53 50 43 00 54 41 42 00
>3ad0f8	41 42 53 00 53 47 4e 00 48 45 58 24 00 44 45 43
>3ad108	00 53 54 52 24 00 56 41 4c 00 4c 45 46 54 24 00
>3ad118	52 49 47 48 54 24 00 4d 49 44 24 00 52 55 4e 00
>3ad128	4e 45 57 00 4c 4f 41 44 00 4c 49 53 54 00 44 49
>3ad138	52 00 4d 4f 4e 49 54 4f 52 00 47 45 54 00 49 4e
>3ad148	50 55 54 00 53 45 54 42 4f 52 44 45 52 00 54 45
>3ad158	58 54 43 4f 4c 4f 52 00 53 45 54 42 47 43 4f 4c
>3ad168	4f 52 00 53 45 54 44 41 54 45 00 47 45 54 44 41
>3ad178	54 45 24 00 53 45 54 54 49 4d 45 00 47 45 54 54
>3ad188	49 4d 45 24 00 47 52 41 50 48 49 43 53 00 53 45
>3ad198	54 43 4f 4c 4f 52 00 50 49 58 4d 41 50 00 43 4c
>3ad1a8	52 50 49 58 4d 41 50 00 50 4c 4f 54 00 4c 49 4e
>3ad1b8	45 00 46 49 4c 4c 00 53 50 52 49 54 45 00 53 50
>3ad1c8	52 49 54 45 41 54 00 53 50 52 49 54 45 53 48 4f
>3ad1d8	57 00 0d 52 45 41 44 59 0d 00 43 32 35 36 20 46
>3ad1e8	6f 65 6e 69 78 20 42 41 53 49 43 38 31 36 20 76
>3ad1f8	30 30 2e 30 30 20 61 6c 70 68 61 20 28 32 30 32
>3ad208	30 2d 30 32 2d 31 38 29 0d 00
>3b0000					.align 256
.3b0000					CREDITS_TEXT
>3b0000	54 68 69 73 20 69 73 20		                .text "This is the credits screen!"
>3b0008	74 68 65 20 63 72 65 64 69 74 73 20 73 63 72 65
>3b0018	65 6e 21
>3b001b	20 20 20 20 20 20 20 20		                .fill 128 - len("This is the credits screen!"), $20
>3b0023	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 4 times (64 bytes)...
>3b0073	20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0080	49 20 77 6f 75 6c 64 20		                .text "I would like to thank the academy."
>3b0088	6c 69 6b 65 20 74 6f 20 74 68 61 6e 6b 20 74 68
>3b0098	65 20 61 63 61 64 65 6d 79 2e
>3b00a2	20 20 20 20 20 20 20 20		                .fill 128 - len("I would like to thank the academy."), $20
>3b00aa	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 4 times (64 bytes)...
>3b00fa	20 20 20 20 20 20
>3b0100					                .text ""
>3b0100	20 20 20 20 20 20 20 20		                .fill 128 - len(""), $20
>3b0108	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 6 times (96 bytes)...
>3b0178	20 20 20 20 20 20 20 20
>3b0180	50 72 65 73 73 20 61 6e		                .text "Press any key to go back..."
>3b0188	79 20 6b 65 79 20 74 6f 20 67 6f 20 62 61 63 6b
>3b0198	2e 2e 2e
>3b019b	20 20 20 20 20 20 20 20		                .fill 128 - len("Press any key to go back..."), $20
>3b01a3	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 4 times (64 bytes)...
>3b01f3	20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0200	20 20 20 20 20 20 20 20		                .fill 128 * 60,$20
>3b0208	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 478 times (7648 bytes)...
>3b1ff8	20 20 20 20 20 20 20 20
>3b2000					.align 256
>3b2000	f3 f3 f3 f3 f3 f3 f3 f3		CREDITS_COLOR   .fill 128 * 64, $F3
>3b2008	f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3
;	...repeated 510 times (8160 bytes)...
>3b3ff8	f3 f3 f3 f3 f3 f3 f3 f3

;******  End of listing
