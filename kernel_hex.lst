
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -D TARGET=2 --long-address --flat --intel-hex -o kernel.hex --list kernel_hex.lst --labels=kernel_hex.lbl src\kernel.asm
; Wed Apr 29 20:57:35 2020

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=2					TARGET=2

;******  Processing input file: src\kernel.asm

=1					TARGET_FLASH = 1              ; The code is being assembled for Flash
=2					TARGET_RAM = 2                ; The code is being assembled for RAM

;******  Processing file: src\macros_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\characters.asm

=$03					CHAR_CTRL_C = $03   ; CTRL-C
=$08					CHAR_BS = $08       ; Backspace (delete character to the left of the cursor)
=$09					CHAR_TAB = $09      ; TAB (moves cursor to next tabulated column)
=$0a					CHAR_LF = $0A       ; Line feed
=$0d					CHAR_CR = $0D       ; Carriage return
=$0f					CHAR_INS = $0F      ; Insert a space at the cursor
=$11					CHAR_UP = $11       ; Up arrow
=$1d					CHAR_RIGHT = $1D    ; Right arrow
=$20					CHAR_SP = $20       ; Space
=$91					CHAR_DOWN = $91     ; Down arrow
=$9d					CHAR_LEFT = $9D     ; Left arrow
=$7f					CHAR_DEL = $7F      ; Delete key (delete the character at the cursor)

;******  Return to file: src\kernel.asm


;******  Processing file: src\simulator_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_inc.asm

=$000000				BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000				unused_0000      = $000000 ;12 Bytes unused
=$000008				OPL2_ADDY_PTR_LO = $000008  ; THis Points towards the Instruments Database
=$000009				OPL2_ADDY_PTR_MD = $000009
=$00000a				OPL2_ADDY_PTR_HI = $00000A
=$00000c				SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f				COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011				COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013				LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=25
=$000015				LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017				CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a				CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c				CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e				CURCOLOR         = $00001E ;1 Byte Color of next character to be printed to the screen.
=$00001f				COLORPOS         = $00001F ;3 Byte address of cursor's position in the color matrix
=$000022				STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024				STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$000026				OPL2_OPERATOR    = $000026 ;
=$000027				OPL2_CHANNEL     = $000027 ;
=$000028				OPL2_REG_REGION  = $000028 ; Offset to the Group of Registers
=$00002a				OPL2_REG_OFFSET  = $00002A ; 2 Bytes (16Bits)
=$00002c				OPL2_IND_ADDY_LL = $00002C ; 2 Bytes Reserved (Only need 3)
=$00002e				OPL2_IND_ADDY_HL = $00002E ; 2 Bytes Reserved (Only need 3)
=$000030				OPL2_NOTE        = $000030 ; 1 Byte
=$000031				OPL2_OCTAVE      = $000031 ; 1 Byte
=$000032				OPL2_PARAMETER0  = $000032 ; 1 Byte - Key On/Feedback
=$000033				OPL2_PARAMETER1  = $000033 ; 1 Byte
=$000034				OPL2_PARAMETER2  = $000034 ; 1 Byte
=$000035				OPL2_PARAMETER3  = $000035 ; 1 Byte
=$000036				OPL2_LOOP        = $000036 ;
=$000036				OPL2_BLOCK       = $000036
=$000038				SDCARD_FILE_PTR  = $000038 ; 3 Bytes Pointer to Filename to open
=$00003c				SDCARD_BYTE_NUM  = $00003C ; 2Bytes
=$00003f				SDCARD_PRSNT_MNT = $00003F ; 1 Byte, Indicate that the SDCard is Present and that it is Mounted
=$000040				BM_CLEAR_SCRN_X  = $000040
=$000042				BM_CLEAR_SCRN_Y  = $000042
=$000040				RAD_STARTLINE    = $000040 ; 1 Byte
=$000041				RAD_PATTERN_IDX  = $000041 ; 1 Byte
=$000042				RAD_LINE         = $000042 ; 1 Byte
=$000043				RAD_LINENUMBER   = $000043 ; 1 Byte
=$000044				RAD_CHANNEL_NUM  = $000044 ; 1 Byte
=$000045				RAD_ISLASTCHAN   = $000045 ; 1 Byte
=$000046				RAD_Y_POINTER    = $000046 ; 2 Bytes
=$000048				RAD_TICK         = $000048
=$00004a				RAD_CHANNEL_DATA = $00004A ; 2 Bytes
=$00004c				RAD_CHANNE_EFFCT = $00004C
=$00004d				RAD_TEMP         = $00004D
=$000050				RAD_ADDR         = $000050 ; 3 bytes to avoid OPL2 errors.
=$000053				RAD_PATTRN       = $000053 ; 1 bytes - offset to patter
=$000054				RAD_PTN_DEST     = $000054 ; 3 bytes - where to write the pattern data
=$000057				RAD_CHANNEL      = $000057 ; 2 bytes - 0 to 8
=$000059				RAD_LAST_NOTE    = $000059 ; 1 if this is the last note
=$00005a				RAD_LINE_PTR     = $00005A ; 2 bytes - offset to memory location
=$000040				BMP_X_SIZE       = $000040 ; 2 Bytes
=$000042				BMP_Y_SIZE       = $000042 ; 2 Bytes
=$000044				BMP_PRSE_SRC_PTR = $000044 ; 3 Bytes
=$000048				BMP_PRSE_DST_PTR = $000048 ; 3 Bytes
=$00004c				BMP_COLOR_PALET  = $00004C ; 2 Bytes
=$00004e				SCRN_X_STRIDE    = $00004E ; 2 Bytes, Basically How many Pixel Accross in Bitmap Mode
=$000050				BMP_FILE_SIZE    = $000050 ; 4 Bytes
=$000054				BMP_POSITION_X   = $000054 ; 2 Bytes Where, the BMP will be position on the X Axis
=$000056				BMP_POSITION_Y   = $000056 ; 2 Bytes Where, the BMP will be position on the Y Axis
=$000058				BMP_PALET_CHOICE = $000058 ;
=$0000e0				MOUSE_PTR        = $0000E0
=$0000e1				MOUSE_POS_X_LO   = $0000E1
=$0000e2				MOUSE_POS_X_HI   = $0000E2
=$0000e3				MOUSE_POS_Y_LO   = $0000E3
=$0000e4				MOUSE_POS_Y_HI   = $0000E4
=$0000f0				USER_TEMP        = $0000F0 ;32 Bytes Temp space for user programs
=$000100				GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000140				INT_CONTROLLER   = $000140 ; $000140...$00015F Interrupt Controller
=$000160				TIMER_CONTROLLER = $000160 ; $000160...$00017F Timer0/Timer1/Timer2 Block
=$000160				TIMER_CTRL_REGLL = $000160 ;
=$000161				TIMER_CTRL_REGLH = $000161 ;
=$000162				TIMER_CTRL_REGHL = $000162 ;
=$000163				TIMER_CTRL_REGHH = $000163 ;
=$000240				CPU_REGISTERS    = $000240 ; Byte
=$000240				CPUPC            = $000240 ;2 Bytes Program Counter (PC)
=$000242				CPUPBR           = $000242 ;2 Bytes Program Bank Register (K)
=$000244				CPUA             = $000244 ;2 Bytes Accumulator (A)
=$000246				CPUX             = $000246 ;2 Bytes X Register (X)
=$000248				CPUY             = $000248 ;2 Bytes Y Register (Y)
=$00024a				CPUSTACK         = $00024A ;2 Bytes Stack Pointer (S)
=$00024c				CPUDP            = $00024C ;2 Bytes Direct Page Register (D)
=$00024e				CPUDBR           = $00024E ;1 Byte  Data Bank Register (B)
=$00024f				CPUFLAGS         = $00024F ;1 Byte  Flags (P)
=$000250				MONITOR_VARS     = $000250 ; Byte  MONITOR Variables. BASIC variables may overlap this space
=$000250				MCMDADDR         = $000250 ;3 Bytes Address of the current line of text being processed by the command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
=$000253				MCMP_TEXT        = $000253 ;3 Bytes Address of symbol being evaluated for COMPARE routine
=$000256				MCMP_LEN         = $000256 ;2 Bytes Length of symbol being evaluated for COMPARE routine
=$000258				MCMD             = $000258 ;3 Bytes Address of the current command/function string
=$00025b				MCMD_LEN         = $00025B ;2 Bytes Length of the current command/function string
=$00025d				MARG1            = $00025D ;4 Bytes First command argument. May be data or address, depending on command
=$000261				MARG2            = $000261 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000265				MARG3            = $000265 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000269				MARG4            = $000269 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$00026d				MARG5            = $00026D ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000271				MARG6            = $000271 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000275				MARG7            = $000275 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000279				MARG8            = $000279 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000300				LOADFILE_VARS    = $000300 ; Byte
=$000300				LOADFILE_NAME    = $000300 ;3 Bytes (addr) Name of file to load. Address in Data Page
=$000303				LOADFILE_LEN     = $000303 ;1 Byte  Length of filename. 0=Null Terminated
=$000304				LOADPBR          = $000304 ;1 Byte  First Program Bank of loaded file ($05 segment)
=$000305				LOADPC           = $000305 ;2 Bytes Start address of loaded file ($05 segment)
=$000307				LOADDBR          = $000307 ;1 Byte  First data bank of loaded file ($06 segment)
=$000308				LOADADDR         = $000308 ;2 Bytes FIrst data address of loaded file ($06 segment)
=$00030a				LOADFILE_TYPE    = $00030A ;3 Bytes (addr) File type string in loaded data file. Actual string data will be in Bank 1. Valid values are BIN, PRG, P16
=$00030d				BLOCK_LEN        = $00030D ;2 Bytes Length of block being loaded
=$00030f				BLOCK_ADDR       = $00030F ;2 Bytes (temp) Address of block being loaded
=$000311				BLOCK_BANK       = $000311 ;1 Byte  (temp) Bank of block being loaded
=$000312				BLOCK_COUNT      = $000312 ;2 Bytes (temp) Counter of bytes read as file is loaded
=$000300				FDC_DRIVE        = $000300 ;1 byte - The number of the selected drive
=$000301				FDC_HEAD         = $000301 ;1 byte - The head number (0 or 1)
=$000302				FDC_CYLINDER     = $000302 ;1 byte - The cylinder number
=$000303				FDC_SECTOR       = $000303 ;1 byte - The sector number
=$000304				FDC_SECTOR_SIZE  = $000304 ;1 byte - The sector size code (2 = 512)
=$000305				FDC_SECPERTRK    = $000305 ;1 byte - The number of sectors per track (18 for 1.44 MB floppy)
=$000306				FDC_ST0          = $000306 ;1 byte - Status Register 0
=$000307				FDC_ST1          = $000307 ;1 byte - Status Register 1
=$000308				FDC_ST2          = $000308 ;1 byte - Status Register 2
=$000309				FDC_ST3          = $000309 ;1 byte - Status Register 3
=$00030a				FDC_PCN          = $00030A ;1 byte - Present Cylinder Number
=$00030c				DIVIDEND         = $00030C ;4 bytes - Dividend for 32-bit division (overlaps FDC_RESULTS)
=$000310				DIVISOR          = $000310 ;4 bytes - Divisor for 32-bit division (overlaps FDC_RESULTS)
=$000314				REMAINDER        = $000314 ;4 bytes - Remainder for 32-bit division (overlaps FDC_RESULTS)
=$000320				SDOS_VARIABLES   = $000320
=$000320				BIOS_STATUS      = $000320      ; 1 byte - Status of any BIOS operation
=$000321				BIOS_DEV         = $000321      ; 1 byte - Block device number for block operations
=$000322				BIOS_LBA         = $000322      ; 4 bytes - Address of block to read/write (this is the physical block, w/o reference to partition)
=$000326				BIOS_BUFF_PTR    = $000326      ; 4 bytes - 24-bit pointer to memory for read/write operations
=$00032a				BIOS_FIFO_COUNT  = $00032A      ; 2 bytes - The number of bytes read on the last block read
=$00032e				DOS_STATUS       = $00032E      ; 1 byte - The error code describing any error with file access
=$000330				DOS_CLUS_ID      = $000330      ; 4 bytes - The cluster desired for a DOS operation
=$000338				DOS_DIR_PTR      = $000338      ; 4 bytes - Pointer to a directory entry (assumed to be within DOS_SECTOR)
=$00033c				DOS_BUFF_PTR     = $00033C      ; 4 bytes - A pointer for DOS cluster read/write operations
=$000340				DOS_FD_PTR       = $000340      ; 4 bytes - A pointer to a file descriptor
=$000344				DOS_FAT_LBA      = $000344      ; 4 bytes - The LBA for a sector of the FAT we need to read/write
=$000348				DOS_TEMP         = $000348      ; 4 bytes - Temporary storage for DOS operations
=$00034c				DOS_FILE_SIZE    = $00034C      ; 4 bytes - The size of a file
=$000350				DOS_SRC_PTR      = $000350      ; 4 bytes - Pointer for transferring data
=$000354				DOS_DST_PTR      = $000354      ; 4 bytes - Pointer for transferring data
=$000358				DOS_END_PTR      = $000358      ; 4 bytes - Pointer to the last byte to save
=$00035c				DOS_RUN_PTR      = $00035C      ; 4 bytes - Pointer for starting a loaded program
=$000400				DOS_PATH_BUFF    = $000400      ; 256 bytes - A buffer for path names
=$000500				FDC_PARAMETERS   = $000500      ; 16 bytes - a buffer of parameter data for the FDC
=$000510				FDC_RESULTS      = $000510      ; 16 bytes - Buffer for results of FDC commands
=$000530				FDC_PARAM_NUM    = $000530      ; 1 byte - The number of parameters to send to the FDC (including command)
=$000532				FDC_RESULT_NUM   = $000532      ; 1 byte - The number of results expected
=$000533				FDC_EXPECT_DAT   = $000533      ; 1 byte - 0 = the command expects no data, otherwise expects data
=$000534				FDC_CMD_RETRY    = $000534      ; 1 byte = a retry counter for commands
=$000700				CURRUART         = $000700 ; 3-bytes: the base address of the current UART
=$000703				CHAN_OUT         = $000703 ; 1-byte: the number of the current output channel (for PUTC, etc.)
=$000704				CHAN_IN          = $000704 ; 1-byte: the number of the current input channel (for GETCH, etc.)
=$000705				TIMERFLAGS       = $000705 ; 1-byte: flags to indicate that one of the timer interupts has triggered
=$80					TIMER0TRIGGER    = $80
=$40					TIMER1TRIGGER    = $40
=$20					TIMER2TRIGGER    = $20
=$000f00				KEY_BUFFER       = $000F00 ; 64 Bytes keyboard buffer
=$0080					KEY_BUFFER_SIZE  = $0080   ;128 Bytes (constant) keyboard buffer length
=$000f7f				KEY_BUFFER_END   = $000F7F ;  1 Byte  Last byte of keyboard buffer
=$000f83				KEY_BUFFER_CMD   = $000F83 ;  1 Byte  Indicates the Command Process Status
=$000f84				COMMAND_SIZE_STR = $000F84 ;  1 Byte
=$000f86				COMMAND_COMP_TMP = $000F86 ;  2 Bytes
=$000f87				KEYBOARD_SC_FLG  = $000F87 ;  1 Bytes that indicate the Status of Left Shift, Left CTRL, Left ALT, Right Shift
=$000f88				KEYBOARD_SC_TMP  = $000F88 ;  1 Byte, Interrupt Save Scan Code while Processing
=$000f89				KEYBOARD_LOCKS   = $000F89 ;  1 Byte, the status of the various lock keys
=$000f8a				KEYFLAG          = $000F8A ;  1 Byte, flag to indicate if CTRL-C has been pressed
=$000f8b				KEY_BUFFER_RPOS  = $000F8B ;  2 Byte, position of the character to read from the KEY_BUFFER
=$000f8d				KEY_BUFFER_WPOS  = $000F8D ;  2 Byte, position of the character to write to the KEY_BUFFER
=$001000				KERNEL_JMP_BEGIN = $001000 ; Reserved for the Kernel jump table
=$001fff				KERNEL_JMP_END   = $001FFF
=$002000				TEST_BEGIN       = $002000 ;28672 Bytes Test/diagnostic code for prototype.
=$007fff				TEST_END         = $007FFF ;0 Byte
=$008000				STACK_BEGIN      = $008000 ;32512 Bytes The default beginning of stack space
=$00feff				STACK_END        = $00FEFF ;0 Byte  End of stack space. Everything below this is I/O space
=$00ff00				ISR_BEGIN        = $00FF00 ; Byte  Beginning of CPU vectors in Direct page
=$00ff00				HRESET           = $00FF00 ;16 Bytes Handle RESET asserted. Reboot computer and re-initialize the kernel.
=$00ff10				HCOP             = $00FF10 ;16 Bytes Handle the COP instruction. Program use; not used by OS
=$00ff20				HBRK             = $00FF20 ;16 Bytes Handle the BRK instruction. Returns to BASIC Ready prompt.
=$00ff30				HABORT           = $00FF30 ;16 Bytes Handle ABORT asserted. Return to Ready prompt with an error message.
=$00ff40				HNMI             = $00FF40 ;32 Bytes Handle NMI
=$00ff60				HIRQ             = $00FF60 ;32 Bytes Handle IRQ
=$00ff80				Unused_FF80      = $00FF80 ;End of direct page Interrrupt handlers
=$00ffe0				VECTORS_BEGIN    = $00FFE0 ;0 Byte  Interrupt vectors
=$00ffe0				JMP_READY        = $00FFE0 ;4 Bytes Jumps to ROM READY routine. Modified whenever alternate command interpreter is loaded.
=$00ffe4				VECTOR_COP       = $00FFE4 ;2 Bytes Native COP Interrupt vector
=$00ffe6				VECTOR_BRK       = $00FFE6 ;2 Bytes Native BRK Interrupt vector
=$00ffe8				VECTOR_ABORT     = $00FFE8 ;2 Bytes Native ABORT Interrupt vector
=$00ffea				VECTOR_NMI       = $00FFEA ;2 Bytes Native NMI Interrupt vector
=$00ffec				VECTOR_RESET     = $00FFEC ;2 Bytes Unused (Native RESET vector)
=$00ffee				VECTOR_IRQ       = $00FFEE ;2 Bytes Native IRQ Vector
=$00fff0				RETURN           = $00FFF0 ;4 Bytes RETURN key handler. Points to BASIC or MONITOR subroutine to execute when RETURN is pressed.
=$00fff4				VECTOR_ECOP      = $00FFF4 ;2 Bytes Emulation mode interrupt handler
=$00fff6				VECTOR_EBRK      = $00FFF6 ;2 Bytes Emulation mode interrupt handler
=$00fff8				VECTOR_EABORT    = $00FFF8 ;2 Bytes Emulation mode interrupt handler
=$00fffa				VECTOR_ENMI      = $00FFFA ;2 Bytes Emulation mode interrupt handler
=$00fffc				VECTOR_ERESET    = $00FFFC ;2 Bytes Emulation mode interrupt handler
=$00fffe				VECTOR_EIRQ      = $00FFFE ;2 Bytes Emulation mode interrupt handler
=$010000				VECTORS_END      = $010000 ;*End of vector space
=$00ffff				BANK0_END        = $00FFFF ;End of Bank 00 and Direct page

;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_data.asm

>380000	00 a0 af			                .long $AFA000       ; SCREENBEGIN, 3 bytes, Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>380003	4c 00				                .word 76            ; COLS_VISIBLE, 2 bytes, Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>380005	80 00				                .word 128           ; COLS_PER_LINE, 2 bytes, Columns in memory per screen line. A virtual line can be this long. Default=128
>380007	38 00				                .word 56            ; LINES_VISIBLE, 2 bytes, The number of rows visible on the screen. Default=25
>380009	40 00				                .word 64            ; LINES_MAX, 2 bytes, The number of rows in memory for the screen. Default=64
>38000b	00 a0 af			                .long $AFA000       ; CURSORPOS, 3 bytes, The next character written to the screen will be written in this location.
>38000e	00 00				                .word 0             ; CURSORX, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380010	00 00				                .word 0             ; CURSORY, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380012	0f				                .byte $0F           ; CURCOLOR, 2 bytes, Color of next character to be printed to the screen.
>380013	00				                .byte $00           ; CURATTR, 2 bytes, Attribute of next character to be printed to the screen.
>380014	00 80				                .word STACK_BEGIN   ; STACKBOT, 2 bytes, Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
>380016	ff fe				                .word STACK_END     ; STACKTOP, 2 bytes, Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.

;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_code.asm

.ff00	18		clc		RHRESET         CLC
.ff01	fb		xce		                XCE
.ff02	5c 00 10 38	jmp $381000	                JML BOOT
.ff10					RHCOP
.ff10	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff12	8b		phb		                PHB
.ff13	0b		phd		                PHD
.ff14	48		pha		                PHA
.ff15	da		phx		                PHX
.ff16	5a		phy		                PHY
.ff17	5c 08 10 38	jmp $381008	                JML BREAK
.ff20					RHBRK
.ff20	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff22	8b		phb		                PHB
.ff23	0b		phd		                PHD
.ff24	48		pha		                PHA
.ff25	da		phx		                PHX
.ff26	5a		phy		                PHY
.ff27	5c 08 10 38	jmp $381008	                JML BREAK
.ff30					RHABORT
.ff30	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff32	8b		phb		                PHB
.ff33	0b		phd		                PHD
.ff34	48		pha		                PHA
.ff35	da		phx		                PHX
.ff36	5a		phy		                PHY
.ff37	5c 08 10 38	jmp $381008	                JML BREAK
.ff40					 RHNMI
.ff40	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff42	8b		phb		                PHB
.ff43	0b		phd		                PHD
.ff44	48		pha		                PHA
.ff45	da		phx		                PHX
.ff46	5a		phy		                PHY
.ff47	22 92 12 38	jsl $381292	                JSL NMI_HANDLER
.ff4b	7a		ply		                PLY
.ff4c	fa		plx		                PLX
.ff4d	68		pla		                PLA
.ff4e	2b		pld		                PLD
.ff4f	ab		plb		                PLB
.ff50	40		rti		                RTI
.ff60					RHIRQ
.ff60	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff62	8b		phb		                PHB
.ff63	0b		phd		                PHD
.ff64	48		pha		                PHA
.ff65	da		phx		                PHX
.ff66	5a		phy		                PHY
.ff67	22 24 11 38	jsl $381124	                JSL IRQ_HANDLER
.ff6b	7a		ply		                PLY
.ff6c	fa		plx		                PLX
.ff6d	68		pla		                PLA
.ff6e	2b		pld		                PLD
.ff6f	ab		plb		                PLB
.ff70	40		rti		                RTI
.ffe0	5c 04 00 3a	jmp $3a0004	JUMP_READY      JML MONITOR    ; Kernel READY routine. Rewrite this address to jump to a custom kernel.
>ffe4	10 ff				RVECTOR_COP     .addr HCOP     ; FFE4
>ffe6	20 ff				RVECTOR_BRK     .addr HBRK     ; FFE6
>ffe8	30 ff				RVECTOR_ABORT   .addr HABORT   ; FFE8
>ffea	40 ff				RVECTOR_NMI     .addr HNMI     ; FFEA
>ffec	00 00				                .word $0000    ; FFEC
>ffee	60 ff				RVECTOR_IRQ     .addr HIRQ    ; FFEE
.fff0	5c 04 06 39	jmp $390604	RRETURN         JML IRETURN
>fff4	10 ff				RVECTOR_ECOP    .addr HCOP     ; FFF4
>fff6	20 ff				RVECTOR_EBRK    .addr HBRK     ; FFF6
>fff8	30 ff				RVECTOR_EABORT  .addr HABORT   ; FFF8
>fffa	40 ff				RVECTOR_ENMI    .addr HNMI     ; FFFA
>fffc	00 ff				RVECTOR_ERESET  .addr HRESET   ; FFFC
>fffe	60 ff				RVECTOR_EIRQ    .addr HIRQ     ; FFFE

;******  Return to file: src\kernel.asm


;******  Processing file: src\Math_def.asm

=$000100				UNSIGNED_MULT_A_LO  = $000100
=$000101				UNSIGNED_MULT_A_HI  = $000101
=$000102				UNSIGNED_MULT_B_LO  = $000102
=$000103				UNSIGNED_MULT_B_HI  = $000103
=$000104				UNSIGNED_MULT_AL_LO = $000104
=$000105				UNSIGNED_MULT_AL_HI = $000105
=$000106				UNSIGNED_MULT_AH_LO = $000106
=$000107				UNSIGNED_MULT_AH_HI = $000107
=$000108				SIGNED_MULT_A_LO    = $000108
=$000109				SIGNED_MULT_A_HI    = $000109
=$00010a				SIGNED_MULT_B_LO    = $00010A
=$00010b				SIGNED_MULT_B_HI    = $00010B
=$00010c				SIGNED_MULT_AL_LO   = $00010C
=$00010d				SIGNED_MULT_AL_HI   = $00010D
=$00010e				SIGNED_MULT_AH_LO   = $00010E
=$00010f				SIGNED_MULT_AH_HI   = $00010F
=$000110				UNSIGNED_DIV_DEM_LO = $000110
=$000111				UNSIGNED_DIV_DEM_HI = $000111
=$000112				UNSIGNED_DIV_NUM_LO = $000112
=$000113				UNSIGNED_DIV_NUM_HI = $000113
=$000114				UNSIGNED_DIV_QUO_LO = $000114
=$000115				UNSIGNED_DIV_QUO_HI = $000115
=$000116				UNSIGNED_DIV_REM_LO = $000116
=$000117				UNSIGNED_DIV_REM_HI = $000117
=$000118				SIGNED_DIV_DEM_LO   = $000118
=$000119				SIGNED_DIV_DEM_HI   = $000119
=$00011a				SIGNED_DIV_NUM_LO   = $00011A
=$00011b				SIGNED_DIV_NUM_HI   = $00011B
=$00011c				SIGNED_DIV_QUO_LO   = $00011C
=$00011d				SIGNED_DIV_QUO_HI   = $00011D
=$00011e				SIGNED_DIV_REM_LO   = $00011E
=$00011f				SIGNED_DIV_REM_HI   = $00011F
=$000120				ADDER32_A_LL        = $000120
=$000121				ADDER32_A_LH        = $000121
=$000122				ADDER32_A_HL        = $000122
=$000123				ADDER32_A_HH        = $000123
=$000124				ADDER32_B_LL        = $000124
=$000125				ADDER32_B_LH        = $000125
=$000126				ADDER32_B_HL        = $000126
=$000127				ADDER32_B_HH        = $000127
=$000128				ADDER32_R_LL        = $000128
=$000129				ADDER32_R_LH        = $000129
=$00012a				ADDER32_R_HL        = $00012A
=$00012b				ADDER32_R_HH        = $00012B

;******  Return to file: src\kernel.asm


;******  Processing file: src\interrupt_def.asm

=$000140				INT_PENDING_REG0 = $000140 ;
=$000141				INT_PENDING_REG1 = $000141 ;
=$000142				INT_PENDING_REG2 = $000142 ;
=$000143				INT_PENDING_REG3 = $000143 ; FMX Model
=$000144				INT_POL_REG0     = $000144 ;
=$000145				INT_POL_REG1     = $000145 ;
=$000146				INT_POL_REG2     = $000146 ;
=$000147				INT_POL_REG7     = $000147 ; FMX Model
=$000148				INT_EDGE_REG0    = $000148 ;
=$000149				INT_EDGE_REG1    = $000149 ;
=$00014a				INT_EDGE_REG2    = $00014A ;
=$00014b				INT_EDGE_REG3    = $00014B ; FMX Model
=$00014c				INT_MASK_REG0    = $00014C ;
=$00014d				INT_MASK_REG1    = $00014D ;
=$00014e				INT_MASK_REG2    = $00014E ;
=$00014f				INT_MASK_REG3    = $00014F ; FMX Model
=$01					FNX0_INT00_SOF        = $01  ;Start of Frame @ 60FPS
=$02					FNX0_INT01_SOL        = $02  ;Start of Line (Programmable)
=$04					FNX0_INT02_TMR0       = $04  ;Timer 0 Interrupt
=$08					FNX0_INT03_TMR1       = $08  ;Timer 1 Interrupt
=$10					FNX0_INT04_TMR2       = $10  ;Timer 2 Interrupt
=$20					FNX0_INT05_RTC        = $20  ;Real-Time Clock Interrupt
=$40					FNX0_INT06_FDC        = $40  ;Floppy Disk Controller
=$80					FNX0_INT07_MOUSE      = $80  ; Mouse Interrupt (INT12 in SuperIO IOspace)
=$01					FNX1_INT00_KBD        = $01  ;Keyboard Interrupt
=$02					FNX1_INT01_SC0        = $02  ;VICKY_II (INT2) Sprite 2 Sprite Collision
=$04					FNX1_INT02_SC1        = $04  ;VICKY_II (INT3) Sprite 2 Tiles Collision
=$08					FNX1_INT03_COM2       = $08  ;Serial Port 2
=$10					FNX1_INT04_COM1       = $10  ;Serial Port 1
=$20					FNX1_INT05_MPU401     = $20  ;Midi Controller Interrupt
=$40					FNX1_INT06_LPT        = $40  ;Parallel Port
=$80					FNX1_INT07_SDCARD     = $80  ;SD Card Controller Interrupt (CH376S)
=$01					FNX2_INT00_OPL3       = $01  ;OPl3
=$02					FNX2_INT01_GABE_INT0  = $02  ;GABE (INT0) - TBD
=$04					FNX2_INT02_GABE_INT1  = $04  ;GABE (INT1) - TBD
=$08					FNX2_INT03_SDMA       = $08  ;VICKY_II (INT4)
=$10					FNX2_INT04_VDMA       = $10  ;VICKY_II (INT5)
=$20					FNX2_INT05_GABE_INT2  = $20  ;GABE (INT2) - TBD
=$40					FNX2_INT06_EXT        = $40  ;External Expansion
=$80					FNX2_INT07_SDCARD_INS = $80  ; SDCARD Insertion
=$01					FNX3_INT00_OPN2       = $01  ;OPN2
=$02					FNX3_INT01_OPM        = $02  ;OPM
=$04					FNX3_INT02_IDE        = $04  ;HDD IDE INTERRUPT
=$08					FNX3_INT03_TBD        = $08  ;TBD
=$10					FNX3_INT04_TBD        = $10  ;TBD
=$20					FNX3_INT05_TBD        = $20  ;GABE (INT2) - TBD
=$40					FNX3_INT06_TBD        = $40  ;External Expansion
=$80					FNX3_INT07_TBD        = $80  ; SDCARD Insertion

;******  Return to file: src\kernel.asm


;******  Processing file: src\dram_inc.asm

=$afa000				SCREEN_PAGE0     = $AFA000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
=$afc000				SCREEN_PAGE1     = $AFC000 ;8192 Bytes Additional page of display RAM. This can be used for page flipping or to handle multiple edit buffers.
=$b00000				SCREEN_END       = $B00000 ;End of display memory

;******  Return to file: src\kernel.asm


;******  Processing file: src\vicky_def.asm

=$af0000				MASTER_CTRL_REG_L	      = $AF0000
=$01					Mstr_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$02					Mstr_Ctrl_Text_Overlay  = $02       ; Enable the Overlay of the text mode on top of Graphic Mode (the Background Color is ignored)
=$04					Mstr_Ctrl_Graph_Mode_En = $04       ; Enable the Graphic Mode
=$08					Mstr_Ctrl_Bitmap_En     = $08       ; Enable the Bitmap Module In Vicky
=$10					Mstr_Ctrl_TileMap_En    = $10       ; Enable the Tile Module in Vicky
=$20					Mstr_Ctrl_Sprite_En     = $20       ; Enable the Sprite Module in Vicky
=$40					Mstr_Ctrl_GAMMA_En      = $40       ; this Enable the GAMMA correction - The Analog and DVI have different color value, the GAMMA is great to correct the difference
=$80					Mstr_Ctrl_Disable_Vid   = $80       ; This will disable the Scanning of the Video hence giving 100% bandwith to the CPU
=$af0001				MASTER_CTRL_REG_H	      = $AF0001
=$af0002				VKY_RESERVED_00         = $AF0002
=$af0003				VKY_RESERVED_01         = $AF0003
=$01					Border_Ctrl_Enable      = $01
=$af0004				BORDER_CTRL_REG         = $AF0004 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$af0005				BORDER_COLOR_B          = $AF0005
=$af0006				BORDER_COLOR_G          = $AF0006
=$af0007				BORDER_COLOR_R          = $AF0007
=$af0008				BORDER_X_SIZE           = $AF0008; X-  Values: 0 - 32 (Default: 32)
=$af0009				BORDER_Y_SIZE           = $AF0009; Y- Values 0 -32 (Default: 32)
=$af000d				BACKGROUND_COLOR_B      = $AF000D ; When in Graphic Mode, if a pixel is "0" then the Background pixel is chosen
=$af000e				BACKGROUND_COLOR_G      = $AF000E
=$af000f				BACKGROUND_COLOR_R      = $AF000F ;
=$af0010				VKY_TXT_CURSOR_CTRL_REG = $AF0010   ;[0]  Enable Text Mode
=$01					Vky_Cursor_Enable       = $01
=$02					Vky_Cursor_Flash_Rate0  = $02
=$04					Vky_Cursor_Flash_Rate1  = $04
=$08					Vky_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10					Vky_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$af0011				VKY_TXT_START_ADD_PTR   = $AF0011   ; This is an offset to change the Starting address of the Text Mode Buffer (in x)
=$af0012				VKY_TXT_CURSOR_CHAR_REG = $AF0012
=$af0013				VKY_TXT_CURSOR_COLR_REG = $AF0013
=$af0014				VKY_TXT_CURSOR_X_REG_L  = $AF0014
=$af0015				VKY_TXT_CURSOR_X_REG_H  = $AF0015
=$af0016				VKY_TXT_CURSOR_Y_REG_L  = $AF0016
=$af0017				VKY_TXT_CURSOR_Y_REG_H  = $AF0017
=$af001b				VKY_LINE_IRQ_CTRL_REG   = $AF001B ;[0] - Enable Line 0, [1] -Enable Line 1
=$af001c				VKY_LINE0_CMP_VALUE_LO  = $AF001C ;Write Only [7:0]
=$af001d				VKY_LINE0_CMP_VALUE_HI  = $AF001D ;Write Only [3:0]
=$af001e				VKY_LINE1_CMP_VALUE_LO  = $AF001E ;Write Only [7:0]
=$af001f				VKY_LINE1_CMP_VALUE_HI  = $AF001F ;Write Only [3:0]
=$af001c				VKY_INFO_CHIP_NUM_L     = $AF001C
=$af001d				VKY_INFO_CHIP_NUM_H     = $AF001D
=$af001e				VKY_INFO_CHIP_VER_L     = $AF001E
=$af001f				VKY_INFO_CHIP_VER_H     = $AF001F
=$01					TILE_Enable             = $01
=$02					TILE_LUT0               = $02
=$04					TILE_LUT1               = $04
=$08					TILE_LUT2               = $08
=$80					TILESHEET_256x256_En    = $80   ; 0 -> Sequential, 1-> 256x256 Tile Sheet Striding
=$af0100				TL0_CONTROL_REG         = $AF0100       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0101				TL0_START_ADDY_L        = $AF0101       ; Not USed right now - Starting Address to where is the MAP
=$af0102				TL0_START_ADDY_M        = $AF0102
=$af0103				TL0_START_ADDY_H        = $AF0103
=$af0104				TL0_MAP_X_STRIDE_L      = $AF0104       ; The Stride of the Map
=$af0105				TL0_MAP_X_STRIDE_H      = $AF0105
=$af0106				TL0_MAP_Y_STRIDE_L      = $AF0106       ; The Stride of the Map
=$af0107				TL0_MAP_Y_STRIDE_H      = $AF0107
=$af0108				TL1_CONTROL_REG         = $AF0108       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0109				TL1_START_ADDY_L        = $AF0109       ; Not USed right now - Starting Address to where is the MAP
=$af010a				TL1_START_ADDY_M        = $AF010A
=$af010b				TL1_START_ADDY_H        = $AF010B
=$af010c				TL1_MAP_X_STRIDE_L      = $AF010C       ; The Stride of the Map
=$af010d				TL1_MAP_X_STRIDE_H      = $AF010D
=$af010e				TL1_MAP_Y_STRIDE_L      = $AF010E       ; The Stride of the Map
=$af010f				TL1_MAP_Y_STRIDE_H      = $AF010F
=$af0110				TL2_CONTROL_REG         = $AF0110       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0111				TL2_START_ADDY_L        = $AF0111       ; Not USed right now - Starting Address to where is the MAP
=$af0112				TL2_START_ADDY_M        = $AF0112
=$af0113				TL2_START_ADDY_H        = $AF0113
=$af0114				TL2_MAP_X_STRIDE_L      = $AF0114       ; The Stride of the Map
=$af0115				TL2_MAP_X_STRIDE_H      = $AF0115
=$af0116				TL2_MAP_Y_STRIDE_L      = $AF0116       ; The Stride of the Map
=$af0117				TL2_MAP_Y_STRIDE_H      = $AF0117
=$af0118				TL3_CONTROL_REG         = $AF0118       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0119				TL3_START_ADDY_L        = $AF0119       ; Not USed right now - Starting Address to where is the MAP
=$af011a				TL3_START_ADDY_M        = $AF011A
=$af011b				TL3_START_ADDY_H        = $AF011B
=$af011c				TL3_MAP_X_STRIDE_L      = $AF011C       ; The Stride of the Map
=$af011d				TL3_MAP_X_STRIDE_H      = $AF011D
=$af011e				TL3_MAP_Y_STRIDE_L      = $AF011E       ; The Stride of the Map
=$af011f				TL3_MAP_Y_STRIDE_H      = $AF011F
=$af0140				BM_CONTROL_REG          = $AF0140
=$af0141				BM_START_ADDY_L         = $AF0141
=$af0142				BM_START_ADDY_M         = $AF0142
=$af0143				BM_START_ADDY_H         = $AF0143
=$af0144				BM_X_SIZE_L             = $AF0144
=$af0145				BM_X_SIZE_H             = $AF0145
=$af0146				BM_Y_SIZE_L             = $AF0146
=$af0147				BM_Y_SIZE_H             = $AF0147
=$af0148				BM_RESERVED_0           = $AF0148
=$af0149				BM_RESERVED_1           = $AF0149
=$af014a				BM_RESERVED_2           = $AF014A
=$af014b				BM_RESERVED_3           = $AF014B
=$af014c				BM_RESERVED_4           = $AF014C
=$af014d				BM_RESERVED_5           = $AF014D
=$af014e				BM_RESERVED_6           = $AF014E
=$af014f				BM_RESERVED_7           = $AF014F
=$01					SPRITE_Enable             = $01
=$02					SPRITE_LUT0               = $02 ; This is the LUT that the Sprite will use
=$04					SPRITE_LUT1               = $04
=$08					SPRITE_LUT2               = $08 ; Only 4 LUT for Now, So this bit is not used.
=$10					SPRITE_DEPTH0             = $10 ; This is the Layer the Sprite will be Displayed in
=$20					SPRITE_DEPTH1             = $20
=$40					SPRITE_DEPTH2             = $40
=$af0200				SP00_CONTROL_REG        = $AF0200
=$af0201				SP00_ADDY_PTR_L         = $AF0201
=$af0202				SP00_ADDY_PTR_M         = $AF0202
=$af0203				SP00_ADDY_PTR_H         = $AF0203
=$af0204				SP00_X_POS_L            = $AF0204
=$af0205				SP00_X_POS_H            = $AF0205
=$af0206				SP00_Y_POS_L            = $AF0206
=$af0207				SP00_Y_POS_H            = $AF0207
=$af0208				SP01_CONTROL_REG        = $AF0208
=$af0209				SP01_ADDY_PTR_L         = $AF0209
=$af020a				SP01_ADDY_PTR_M         = $AF020A
=$af020b				SP01_ADDY_PTR_H         = $AF020B
=$af020c				SP01_X_POS_L            = $AF020C
=$af020d				SP01_X_POS_H            = $AF020D
=$af020e				SP01_Y_POS_L            = $AF020E
=$af020f				SP01_Y_POS_H            = $AF020F
=$af0210				SP02_CONTROL_REG        = $AF0210
=$af0211				SP02_ADDY_PTR_L         = $AF0211
=$af0212				SP02_ADDY_PTR_M         = $AF0212
=$af0213				SP02_ADDY_PTR_H         = $AF0213
=$af0214				SP02_X_POS_L            = $AF0214
=$af0215				SP02_X_POS_H            = $AF0215
=$af0216				SP02_Y_POS_L            = $AF0216
=$af0217				SP02_Y_POS_H            = $AF0217
=$af0218				SP03_CONTROL_REG        = $AF0218
=$af0219				SP03_ADDY_PTR_L         = $AF0219
=$af021a				SP03_ADDY_PTR_M         = $AF021A
=$af021b				SP03_ADDY_PTR_H         = $AF021B
=$af021c				SP03_X_POS_L            = $AF021C
=$af021d				SP03_X_POS_H            = $AF021D
=$af021e				SP03_Y_POS_L            = $AF021E
=$af021f				SP03_Y_POS_H            = $AF021F
=$af0220				SP04_CONTROL_REG        = $AF0220
=$af0221				SP04_ADDY_PTR_L         = $AF0221
=$af0222				SP04_ADDY_PTR_M         = $AF0222
=$af0223				SP04_ADDY_PTR_H         = $AF0223
=$af0224				SP04_X_POS_L            = $AF0224
=$af0225				SP04_X_POS_H            = $AF0225
=$af0226				SP04_Y_POS_L            = $AF0226
=$af0227				SP04_Y_POS_H            = $AF0227
=$af0228				SP05_CONTROL_REG        = $AF0228
=$af0229				SP05_ADDY_PTR_L         = $AF0229
=$af022a				SP05_ADDY_PTR_M         = $AF022A
=$af022b				SP05_ADDY_PTR_H         = $AF022B
=$af022c				SP05_X_POS_L            = $AF022C
=$af022d				SP05_X_POS_H            = $AF022D
=$af022e				SP05_Y_POS_L            = $AF022E
=$af022f				SP05_Y_POS_H            = $AF022F
=$af0230				SP06_CONTROL_REG        = $AF0230
=$af0231				SP06_ADDY_PTR_L         = $AF0231
=$af0232				SP06_ADDY_PTR_M         = $AF0232
=$af0233				SP06_ADDY_PTR_H         = $AF0233
=$af0234				SP06_X_POS_L            = $AF0234
=$af0235				SP06_X_POS_H            = $AF0235
=$af0236				SP06_Y_POS_L            = $AF0236
=$af0237				SP06_Y_POS_H            = $AF0237
=$af0238				SP07_CONTROL_REG        = $AF0238
=$af0239				SP07_ADDY_PTR_L         = $AF0239
=$af023a				SP07_ADDY_PTR_M         = $AF023A
=$af023b				SP07_ADDY_PTR_H         = $AF023B
=$af023c				SP07_X_POS_L            = $AF023C
=$af023d				SP07_X_POS_H            = $AF023D
=$af023e				SP07_Y_POS_L            = $AF023E
=$af023f				SP07_Y_POS_H            = $AF023F
=$af0240				SP08_CONTROL_REG        = $AF0240
=$af0241				SP08_ADDY_PTR_L         = $AF0241
=$af0242				SP08_ADDY_PTR_M         = $AF0242
=$af0243				SP08_ADDY_PTR_H         = $AF0243
=$af0244				SP08_X_POS_L            = $AF0244
=$af0245				SP08_X_POS_H            = $AF0245
=$af0246				SP08_Y_POS_L            = $AF0246
=$af0247				SP08_Y_POS_H            = $AF0247
=$af0248				SP09_CONTROL_REG        = $AF0248
=$af0249				SP09_ADDY_PTR_L         = $AF0249
=$af024a				SP09_ADDY_PTR_M         = $AF024A
=$af024b				SP09_ADDY_PTR_H         = $AF024B
=$af024c				SP09_X_POS_L            = $AF024C
=$af024d				SP09_X_POS_H            = $AF024D
=$af024e				SP09_Y_POS_L            = $AF024E
=$af024f				SP09_Y_POS_H            = $AF024F
=$af0250				SP10_CONTROL_REG        = $AF0250
=$af0251				SP10_ADDY_PTR_L         = $AF0251
=$af0252				SP10_ADDY_PTR_M         = $AF0252
=$af0253				SP10_ADDY_PTR_H         = $AF0253
=$af0254				SP10_X_POS_L            = $AF0254
=$af0255				SP10_X_POS_H            = $AF0255
=$af0256				SP10_Y_POS_L            = $AF0256
=$af0257				SP10_Y_POS_H            = $AF0257
=$af0258				SP11_CONTROL_REG        = $AF0258
=$af0259				SP11_ADDY_PTR_L         = $AF0259
=$af025a				SP11_ADDY_PTR_M         = $AF025A
=$af025b				SP11_ADDY_PTR_H         = $AF025B
=$af025c				SP11_X_POS_L            = $AF025C
=$af025d				SP11_X_POS_H            = $AF025D
=$af025e				SP11_Y_POS_L            = $AF025E
=$af025f				SP11_Y_POS_H            = $AF025F
=$af0260				SP12_CONTROL_REG        = $AF0260
=$af0261				SP12_ADDY_PTR_L         = $AF0261
=$af0262				SP12_ADDY_PTR_M         = $AF0262
=$af0263				SP12_ADDY_PTR_H         = $AF0263
=$af0264				SP12_X_POS_L            = $AF0264
=$af0265				SP12_X_POS_H            = $AF0265
=$af0266				SP12_Y_POS_L            = $AF0266
=$af0267				SP12_Y_POS_H            = $AF0267
=$af0268				SP13_CONTROL_REG        = $AF0268
=$af0269				SP13_ADDY_PTR_L         = $AF0269
=$af026a				SP13_ADDY_PTR_M         = $AF026A
=$af026b				SP13_ADDY_PTR_H         = $AF026B
=$af026c				SP13_X_POS_L            = $AF026C
=$af026d				SP13_X_POS_H            = $AF026D
=$af026e				SP13_Y_POS_L            = $AF026E
=$af026f				SP13_Y_POS_H            = $AF026F
=$af0270				SP14_CONTROL_REG        = $AF0270
=$af0271				SP14_ADDY_PTR_L         = $AF0271
=$af0272				SP14_ADDY_PTR_M         = $AF0272
=$af0273				SP14_ADDY_PTR_H         = $AF0273
=$af0274				SP14_X_POS_L            = $AF0274
=$af0275				SP14_X_POS_H            = $AF0275
=$af0276				SP14_Y_POS_L            = $AF0276
=$af0277				SP14_Y_POS_H            = $AF0277
=$af0278				SP15_CONTROL_REG        = $AF0278
=$af0279				SP15_ADDY_PTR_L         = $AF0279
=$af027a				SP15_ADDY_PTR_M         = $AF027A
=$af027b				SP15_ADDY_PTR_H         = $AF027B
=$af027c				SP15_X_POS_L            = $AF027C
=$af027d				SP15_X_POS_H            = $AF027D
=$af027e				SP15_Y_POS_L            = $AF027E
=$af027f				SP15_Y_POS_H            = $AF027F
=$af0280				SP16_CONTROL_REG        = $AF0280
=$af0281				SP16_ADDY_PTR_L         = $AF0281
=$af0282				SP16_ADDY_PTR_M         = $AF0282
=$af0283				SP16_ADDY_PTR_H         = $AF0283
=$af0284				SP16_X_POS_L            = $AF0284
=$af0285				SP16_X_POS_H            = $AF0285
=$af0286				SP16_Y_POS_L            = $AF0286
=$af0287				SP16_Y_POS_H            = $AF0287
=$af0288				SP17_CONTROL_REG        = $AF0288
=$af0289				SP17_ADDY_PTR_L         = $AF0289
=$af028a				SP17_ADDY_PTR_M         = $AF028A
=$af028b				SP17_ADDY_PTR_H         = $AF028B
=$af028c				SP17_X_POS_L            = $AF028C
=$af028d				SP17_X_POS_H            = $AF028D
=$af028e				SP17_Y_POS_L            = $AF028E
=$af028f				SP17_Y_POS_H            = $AF028F
=$af0400				VDMA_CONTROL_REG        = $AF0400
=$01					VDMA_CTRL_Enable        = $01
=$02					VDMA_CTRL_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04					VDMA_CTRL_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08					VDMA_CTRL_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$80					VDMA_CTRL_Start_TRF     = $80     ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0401				VDMA_BYTE_2_WRITE       = $AF0401 ; Write Only - Byte to Write in the Fill Function
=$af0401				VDMA_STATUS_REG         = $AF0401 ; Read only
=$01					VDMA_STAT_Size_Err      = $01     ; If Set to 1, Overall Size is Invalid
=$02					VDMA_STAT_Dst_Add_Err   = $02     ; If Set to 1, Destination Address Invalid
=$04					VDMA_STAT_Src_Add_Err   = $04     ; If Set to 1, Source Address Invalid
=$80					VDMA_STAT_VDMA_IPS      = $80     ; If Set to 1, VDMA Transfer in Progress (this Inhibit CPU Access to Mem)
=$af0402				VDMA_SRC_ADDY_L         = $AF0402 ; Pointer to the Source of the Data to be stransfered
=$af0403				VDMA_SRC_ADDY_M         = $AF0403 ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0404				VDMA_SRC_ADDY_H         = $AF0404
=$af0405				VDMA_DST_ADDY_L         = $AF0405 ; Destination Pointer within Vicky's video memory Range
=$af0406				VDMA_DST_ADDY_M         = $AF0406 ; ($00_0000 - $3F_0000)
=$af0407				VDMA_DST_ADDY_H         = $AF0407
=$af0408				VDMA_SIZE_L             = $AF0408 ; Maximum Value: $40:0000 (4Megs)
=$af0409				VDMA_SIZE_M             = $AF0409
=$af040a				VDMA_SIZE_H             = $AF040A
=$af040b				VDMA_IGNORED            = $AF040B
=$af0408				VDMA_X_SIZE_L           = $AF0408 ; Maximum Value: 65535
=$af0409				VDMA_X_SIZE_H           = $AF0409
=$af040a				VDMA_Y_SIZE_L           = $AF040A ; Maximum Value: 65535
=$af040b				VDMA_Y_SIZE_H           = $AF040B
=$af040c				VDMA_SRC_STRIDE_L       = $AF040C ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040d				VDMA_SRC_STRIDE_H       = $AF040D ;
=$af040e				VDMA_DST_STRIDE_L       = $AF040E ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040f				VDMA_DST_STRIDE_H       = $AF040F ;
=$af0500				MOUSE_PTR_GRAP0_START    = $AF0500 ; 16 x 16 = 256 Pixels (Grey Scale) 0 = Transparent, 1 = Black , 255 = White
=$af05ff				MOUSE_PTR_GRAP0_END      = $AF05FF ; Pointer 0
=$af0600				MOUSE_PTR_GRAP1_START    = $AF0600 ;
=$af06ff				MOUSE_PTR_GRAP1_END      = $AF06FF ; Pointer 1
=$af0700				MOUSE_PTR_CTRL_REG_L    = $AF0700 ; Bit[0] Enable, Bit[1] = 0  ( 0 = Pointer0, 1 = Pointer1)
=$af0701				MOUSE_PTR_CTRL_REG_H    = $AF0701 ;
=$af0702				MOUSE_PTR_X_POS_L       = $AF0702 ; X Position (0 - 639) (Can only read now) Writing will have no effect
=$af0703				MOUSE_PTR_X_POS_H       = $AF0703 ;
=$af0704				MOUSE_PTR_Y_POS_L       = $AF0704 ; Y Position (0 - 479) (Can only read now) Writing will have no effect
=$af0705				MOUSE_PTR_Y_POS_H       = $AF0705 ;
=$af0706				MOUSE_PTR_BYTE0         = $AF0706 ; Byte 0 of Mouse Packet (you must write 3 Bytes)
=$af0707				MOUSE_PTR_BYTE1         = $AF0707 ; Byte 1 of Mouse Packet (if you don't, then )
=$af0708				MOUSE_PTR_BYTE2         = $AF0708 ; Byte 2 of Mouse Packet (state Machine will be jammed in 1 state)
=$af070b				C256F_MODEL_MAJOR       = $AF070B ;
=$af070c				C256F_MODEL_MINOR       = $AF070C ;
=$af070d				FPGA_DOR                = $AF070D ;
=$af070e				FPGA_MOR                = $AF070E ;
=$af070f				FPGA_YOR                = $AF070F ;
=$af1f40				FG_CHAR_LUT_PTR         = $AF1F40
=$af1f80				BG_CHAR_LUT_PTR		      = $AF1F80
=$af2000				GRPH_LUT0_PTR		        = $AF2000
=$af2400				GRPH_LUT1_PTR		        = $AF2400
=$af2800				GRPH_LUT2_PTR		        = $AF2800
=$af2c00				GRPH_LUT3_PTR		        = $AF2C00
=$af3000				GRPH_LUT4_PTR		        = $AF3000
=$af3400				GRPH_LUT5_PTR		        = $AF3400
=$af3800				GRPH_LUT6_PTR		        = $AF3800
=$af3c00				GRPH_LUT7_PTR		        = $AF3C00
=$af4000				GAMMA_B_LUT_PTR		      = $AF4000
=$af4100				GAMMA_G_LUT_PTR		      = $AF4100
=$af4200				GAMMA_R_LUT_PTR		      = $AF4200
=$af5000				TILE_MAP0       		    = $AF5000     ;$AF5000 - $AF57FF
=$af5800				TILE_MAP1               = $AF5800     ;$AF5800 - $AF5FFF
=$af6000				TILE_MAP2               = $AF6000     ;$AF6000 - $AF67FF
=$af6800				TILE_MAP3               = $AF6800     ;$AF6800 - $AF6FFF
=$af8000				FONT_MEMORY_BANK0       = $AF8000     ;$AF8000 - $AF87FF
=$af8800				FONT_MEMORY_BANK1       = $AF8800     ;$AF8800 - $AF8FFF
=$afa000				CS_TEXT_MEM_PTR         = $AFA000
=$afc000				CS_COLOR_MEM_PTR        = $AFC000
=$afe000				BTX_START               = $AFE000     ; BEATRIX Registers
=$afffff				BTX_END                 = $AFFFFF

;******  Return to file: src\kernel.asm


;******  Processing file: src\super_io_def.asm

=$af1100				PME_STS_REG     = $AF1100
=$af1102				PME_EN_REG		  = $AF1102
=$af1104				PME_STS1_REG		= $AF1104
=$af1105				PME_STS2_REG		= $AF1105
=$af1106				PME_STS3_REG		= $AF1106
=$af1107				PME_STS4_REG		= $AF1107
=$af1108				PME_STS5_REG		= $AF1108
=$af110a				PME_EN1_REG     = $AF110A
=$af110b				PME_EN2_REG     = $AF110B
=$af110c				PME_EN3_REG     = $AF110C
=$af110d				PME_EN4_REG     = $AF110D
=$af110e				PME_EN5_REG     = $AF110E
=$af1110				SMI_STS1_REG		= $AF1110
=$af1111				SMI_STS2_REG		= $AF1111
=$af1112				SMI_STS3_REG		= $AF1112
=$af1113				SMI_STS4_REG		= $AF1113
=$af1114				SMI_STS5_REG		= $AF1114
=$af1116				SMI_EN1_REG     = $AF1116
=$af1117				SMI_EN2_REG     = $AF1117
=$af1118				SMI_EN3_REG     = $AF1118
=$af1119				SMI_EN4_REG     = $AF1119
=$af111a				SMI_EN5_REG     = $AF111A
=$af111c				MSC_ST_REG      = $AF111C
=$af111e				FORCE_DISK_CHANGE       = $AF111E
=$af111f				FLOPPY_DATA_RATE        = $AF111F
=$af1120				UART1_FIFO_CTRL_SHDW    = $AF1120
=$af1121				UART2_FIFO_CTRL_SHDW    = $AF1121
=$af1122				DEV_DISABLE_REG         = $AF1122
=$af1123				GP10_REG    		= $AF1123
=$af1124				GP11_REG    		= $AF1124
=$af1125				GP12_REG    		= $AF1125
=$af1126				GP13_REG    		= $AF1126
=$af1127				GP14_REG    		= $AF1127
=$af1128				GP15_REG    		= $AF1128
=$af1129				GP16_REG    		= $AF1129
=$af112a				GP17_REG    		= $AF112A
=$af112b				GP20_REG    		= $AF112B
=$af112c				GP21_REG    		= $AF112C
=$af112d				GP22_REG		= $AF112D
=$af112f				GP24_REG		= $AF112F
=$af1130				GP25_REG		= $AF1130
=$af1131				GP26_REG		= $AF1131
=$af1132				GP27_REG		= $AF1132
=$af1133				GP30_REG		= $AF1133
=$af1134				GP31_REG		= $AF1134
=$af1135				GP32_REG		= $AF1135
=$af1136				GP33_REG		= $AF1136
=$af1137				GP34_REG		= $AF1137
=$af1138				GP35_REG		= $AF1138
=$af1139				GP36_REG		= $AF1139
=$af113a				GP37_REG		= $AF113A
=$af113b				GP40_REG		= $AF113B
=$af113c				GP41_REG		= $AF113C
=$af113d				GP42_REG		= $AF113D
=$af113e				GP43_REG		= $AF113E
=$af113f				GP50_REG		= $AF113F
=$af1140				GP51_REG		= $AF1140
=$af1141				GP52_REG		= $AF1141
=$af1142				GP53_REG		= $AF1142
=$af1143				GP54_REG		= $AF1143
=$af1144				GP55_REG		= $AF1144
=$af1145				GP56_REG		= $AF1145
=$af1146				GP57_REG		= $AF1146
=$af1147				GP60_REG		= $AF1147
=$af1148				GP61_REG		= $AF1148
=$af114b				GP1_REG			= $AF114B
=$af114c				GP2_REG			= $AF114C
=$af114d				GP3_REG			= $AF114D
=$af114e				GP4_REG			= $AF114E
=$af114f				GP5_REG			= $AF114F
=$af1150				GP6_REG			= $AF1150
=$af1156				FAN1_REG		        = $AF1156
=$af1157				FAN2_REG            = $AF1157
=$af1158				FAN_CTRL_REG  	    = $AF1158
=$af1159				FAN1_TACH_REG       = $AF1159
=$af115a				FAN2_TACH_REG       = $AF115A
=$af115b				FAN1_PRELOAD_REG    = $AF115B
=$af115c				FAN2_PRELOAD_REG    = $AF115C
=$af115d				LED1_REG    		    = $AF115D
=$af115e				LED2_REG    		    = $AF115E
=$af115f				KEYBOARD_SCAN_CODE	= $AF115F

;******  Return to file: src\kernel.asm


;******  Processing file: src\keyboard_def.asm

=$af1064				STATUS_PORT 	= $AF1064
=$af1060				KBD_OUT_BUF 	= $AF1060
=$af1060				KBD_INPT_BUF	= $AF1060
=$af1064				KBD_CMD_BUF		= $AF1064
=$af1060				KBD_DATA_BUF	= $AF1060
=$af1060				PORT_A		    = $AF1060
=$af1061				PORT_B			= $AF1061
=$01					OUT_BUF_FULL    = $01
=$02					INPT_BUF_FULL	= $02
=$04					SYS_FLAG		= $04
=$08					CMD_DATA		= $08
=$10					KEYBD_INH       = $10
=$20					TRANS_TMOUT	    = $20
=$40					RCV_TMOUT		= $40
=$80					PARITY_EVEN		= $80
=$10					INH_KEYBOARD	= $10
=$ae					KBD_ENA			= $AE
=$ad					KBD_DIS			= $AD
=$f1					KB_MENU			= $F1
=$f4					KB_ENABLE		= $F4
=$f7					KB_MAKEBREAK    = $F7
=$fe					KB_ECHO			= $FE
=$ff					KB_RESET		= $FF
=$ed					KB_LED_CMD		= $ED
=$aa					KB_OK			= $AA
=$fa					KB_ACK			= $FA
=$ff					KB_OVERRUN		= $FF
=$fe					KB_RESEND		= $FE
=$f0					KB_BREAK		= $F0
=$10					KB_FA			= $10
=$20					KB_FE			= $20
=$40					KB_PR_LED		= $40
=$01					KB_SCROLL_LOCK  = $01
=$02					KB_NUM_LOCK     = $02
=$04					KB_CAPS_LOCK    = $04
=$80					KB_CTRL_C = $80             ; CTRL-C was pressed
=$60					KB_CREDITS = $60            ; Credits key was pressed

;******  Return to file: src\kernel.asm


;******  Processing file: src\SID_def.asm

=$afe400				SID0_V1_FREQ_LO    = $AFE400 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$afe401				SID0_V1_FREQ_HI    = $AFE401 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$afe402				SID0_V1_PW_LO      = $AFE402 ;SID - L - Voice 1 (Write Only) - PW LOW
=$afe403				SID0_V1_PW_HI      = $AFE403 ;SID - L - Voice 1 (Write Only) - PW HI
=$afe404				SID0_V1_CTRL       = $AFE404 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$afe405				SID0_V1_ATCK_DECY  = $AFE405 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$afe406				SID0_V1_SSTN_RLSE  = $AFE406 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$afe407				SID0_V2_FREQ_LO    = $AFE407 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$afe408				SID0_V2_FREQ_HI    = $AFE408 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$afe409				SID0_V2_PW_LO      = $AFE409 ;SID - L - Voice 2 (Write Only) - PW LOW
=$afe40a				SID0_V2_PW_HI      = $AFE40A ;SID - L - Voice 2 (Write Only) - PW HI
=$afe40b				SID0_V2_CTRL       = $AFE40B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$afe40c				SID0_V2_ATCK_DECY  = $AFE40C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$afe40d				SID0_V2_SSTN_RLSE  = $AFE40D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$afe40e				SID0_V3_FREQ_LO    = $AFE40E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$afe40f				SID0_V3_FREQ_HI    = $AFE40F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$afe410				SID0_V3_PW_LO      = $AFE410 ;SID - L - Voice 3 (Write Only) - PW LOW
=$afe411				SID0_V3_PW_HI      = $AFE411 ;SID - L - Voice 3 (Write Only) - PW HI
=$afe412				SID0_V3_CTRL       = $AFE412 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$afe413				SID0_V3_ATCK_DECY  = $AFE413 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$afe414				SID0_V3_SSTN_RLSE  = $AFE414 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$afe415				SID0_FC_LO         = $AFE415 ;SID - L - Filter (Write Only) - FC LOW
=$afe416				SID0_FC_HI         = $AFE416 ;SID - L - Filter (Write Only) - FC HI
=$afe417				SID0_RES_FILT      = $AFE417 ;SID - L - Filter (Write Only) - RES / FILT
=$afe418				SID0_MODE_VOL      = $AFE418 ;SID - L - Filter (Write Only) - MODE / VOL
=$afe419				SID0_POT_X         = $AFE419 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$afe41a				SID0_POT_Y         = $AFE41A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$afe41b				SID0_OSC3_RND      = $AFE41B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$afe41c				SID0_ENV3          = $AFE41C ;SID - L - Misc (Read Only)  - ENV3
=$afe41d				SID0_NOT_USED0     = $AFE41D ;SID - L - NOT USED
=$afe41e				SID0_NOT_USED1     = $AFE41E ;SID - L - NOT USED
=$afe41f				SID0_NOT_USED2     = $AFE41F ;SID - L - NOT USED

;******  Return to file: src\kernel.asm


;******  Processing file: src\RTC_def.asm

=$af0800				RTC_SEC       = $AF0800 ;Seconds Register
=$af0801				RTC_SEC_ALARM = $AF0801 ;Seconds Alarm Register
=$af0802				RTC_MIN       = $AF0802 ;Minutes Register
=$af0803				RTC_MIN_ALARM = $AF0803 ;Minutes Alarm Register
=$af0804				RTC_HRS       = $AF0804 ;Hours Register
=$af0805				RTC_HRS_ALARM = $AF0805 ;Hours Alarm Register
=$af0806				RTC_DAY       = $AF0806 ;Day Register
=$af0807				RTC_DAY_ALARM = $AF0807 ;Day Alarm Register
=$af0808				RTC_DOW       = $AF0808 ;Day of Week Register
=$af0809				RTC_MONTH     = $AF0809 ;Month Register
=$af080a				RTC_YEAR      = $AF080A ;Year Register
=$af080b				RTC_RATES     = $AF080B ;Rates Register
=$af080c				RTC_ENABLE    = $AF080C ;Enables Register
=$af080d				RTC_FLAGS     = $AF080D ;Flags Register
=$af080e				RTC_CTRL      = $AF080E ;Control Register
=$af080f				RTC_CENTURY   = $AF080F ;Century Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\io_def.asm

=0					CHAN_CONSOLE  = 0           ; ID for screen and keyboard access
=1					CHAN_COM1     = 1           ; ID for serial access on COM1 (external port)
=2					CHAN_COM2     = 2           ; ID for serial access on COM2 (internal port)
=3					CHAN_LPT      = 3           ; ID for parallel port
=$afe810				SDCARD_DATA   = $AFE810     ;(R/W) SDCARD (CH376S) Data PORT_A (A0 = 0)
=$afe811				SDCARD_CMD    = $AFE811     ;(R/W) SDCARD (CH376S) CMD/STATUS Port (A0 = 1)
=$afe812				SDCARD_STAT   = $AFE812     ;(R) SDCARD (Bit[0] = CD, Bit[1] = WP)
=$afe900				CODEC_DATA_LO = $AFE900     ;(W) LSB of Add/Data Reg to Control CODEC See WM8776 Spec
=$afe901				CODEC_DATA_HI = $AFE901     ;(W) MSB od Add/Data Reg to Control CODEC See WM8776 Spec
=$afe902				CODEC_WR_CTRL = $AFE902     ;(W) Bit[0] = 1 -> Start Writing the CODEC Control Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\Trinity_CFP9301_def.asm

=$afe800				JOYSTICK0           = $AFE800   ;(R) Joystick 0 - J7 (next to SD Card)
=$afe801				JOYSTICK1           = $AFE801   ;(R) Joystick 1 - J8
=$afe802				JOYSTICK2           = $AFE802   ;(R) Joystick 2 - J9
=$afe803				JOYSTICK3           = $AFE803   ;(R) Joystick 3 - J10 (Next to Buzzer)
=$afe804				JOYSTICK_MODE       = $AFE804
=$01					NES_SNES_EN0        = $01       ; Enable the NES/SNES Mode on Port 0
=$02					NES_SNES_EN1        = $02       ; Enable the NES/SNES Mode on Port 1
=$04					NES_SNES_JOY        = $04       ; 0 = NES, 1 = SNES
=$40					NES_SNES_DONE       = $40       ; Poll to see if the Deserializer is done
=$80					NES_SNES_TRIG       = $80       ; Set to start the Serializer
=$afe805				REVOFPCB_C          = $AFE805   ; You should read the ASCCII for "C"
=$afe806				REVOFPCB_4          = $AFE806   ; You should read the ASCCII for "4"
=$afe807				REVOFPCB_A          = $AFE807   ; You should read the ASCCII for "A"
=$afe808				NES_SNES0_DAT_LO    = $AFE808   ; Contains the 8bits From NES and SNES
=$afe809				SNES0_DAT_HI0       = $AFE809   ; Contains the extra 4 bit from the SNES Controller
=$afe80a				NES_SNES1_DAT_LO    = $AFE80A
=$afe80b				SNES1_DAT_HI0       = $AFE80B
=$afe80c				CFP9301_REV         = $AFE80C   ; Hardware Revision of the CPLD Code
=$afe80d				DIP_USER            = $AFE80D   ; Dip Switch 3/4/5 can be user Defined
=$afe80e				DIP_BOOTMODE        = $AFE80E
=$01					BOOT_MODE0          = $01
=$02					BOOT_MODE1          = $02
=$80					HD_INSTALLED        = $80
=$00					DIP_BOOT_IDE        = $00
=$01					DIP_BOOT_SDCARD     = $01
=$02					DIP_BOOT_FLOPPY     = $02
=$03					DIP_BOOT_BASIC      = $03

;******  Return to file: src\kernel.asm


;******  Processing file: src\Unity_CFP9307_def.asm

=$afe830				IDE_DATA      = $AFE830 ; 8Bit Access here Only
=$afe831				IDE_ERROR     = $AFE831 ; Error Information register (only read when there is an error ) - Probably clears Error Bits
=$afe832				IDE_SECT_CNT  = $AFE832 ; Sector Count Register (also used to pass parameter for timeout for IDLE modus Command)
=$afe833				IDE_SECT_SRT  = $AFE833 ; Start Sector Register (0 = 256), so start @ 1
=$afe834				IDE_CLDR_LO   = $AFE834 ; Low Byte of Cylinder Numnber {7:0}
=$afe835				IDE_CLDR_HI   = $AFE835 ;  Hi Byte of Cylinder Number {9:8} (1023-0).
=$afe836				IDE_HEAD      = $AFE836 ; Head, device select, {3:0} HEad Number, 4 -> 0:Master, 1:Slave, {7:5} = 101 (legacy);
=$afe837				IDE_CMD_STAT  = $AFE837 ; Command/Status Register - Reading this will clear the Interrupt Registers
=$afe838				IDE_DATA_LO   = $AFE838 ; The 16Bits Buffer is LITTLE ENDIAN, the 65C816 is BIG ENDIAN, but UNITY does the conversion
=$afe839				IDE_DATA_HI   = $AFE839 ;

;******  Return to file: src\kernel.asm


;******  Processing file: src\GABE_Control_Registers_def.asm

=$afe880				GABE_MSTR_CTRL      = $AFE880
=$01					GABE_CTRL_PWR_LED   = $01     ; Controls the LED in the Front of the case (Next to the reset button)
=$02					GABE_CTRL_SDC_LED   = $02     ; Controls the LED in the Front of the Case (Next to SDCard)
=$10					GABE_CTRL_BUZZER    = $10     ; Controls the Buzzer
=$80					GABE_CTRL_WRM_RST   = $80     ; Warm Reset (needs to Setup other registers)
=$afe881				GABE_NOTUSED        = $AFE881 ; Reserved for future use
=$afe882				GABE_RST_AUTH0      = $AFE882 ; Must Contain the BYTE $AD for Reset to Activate
=$afe883				GABE_RST_AUTH1      = $AFE883 ; Must Contain the BYTE $DE for Reset to Activate
=$afe884				GABE_RNG_DAT_LO     = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885				GABE_RNG_DAT_HI     = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe884				GABE_RNG_SEED_LO    = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885				GABE_RNG_SEED_HI    = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe886				GABE_RNG_STAT       = $AFE886 ;
=$80					GABE_RNG_LFSR_DONE  = $80     ; indicates that Output = SEED Database
=$afe886				GABE_RNG_CTRL       = $AFE886 ;
=$01					GABE_RNG_CTRL_EN    = $01     ; Enable the LFSR BLOCK_LEN
=$02					GABE_RNG_CTRL_DV    = $02     ; After Setting the Seed Value, Toggle that Bit for it be registered
=$afe887				GABE_SYS_STAT       = $AFE887 ;
=$01					GABE_SYS_STAT_MID0  = $01     ; Machine ID -- LSB
=$02					GABE_SYS_STAT_MID1  = $02     ; Machine ID -- MSB
=$08					GABE_SYS_STAT_EXP   = $08     ; if Zero, there is an Expansion Card Preset
=$40					GABE_SYS_STAT_CPUA  = $40     ; Indicates the (8bit/16bit) Size of the Accumulator
=$80					GABE_SYS_STAT_CPUX  = $80     ; Indicates the (8bit/16bit) Size of the Accumulator

;******  Return to file: src\kernel.asm


;******  Processing file: src\fdc_inc.asm

=$af13f0				SIO_FDC  = $AF13F0
=$af13f0				SIO_FDC_SRA = $AF13F0 ; Read Only - Status Register A (not used in AT mode)
=$af13f1				SIO_FDC_SRB = $AF13F1 ; Read Only - Status Register B (not used in AT mode)
=$af13f2				SIO_FDC_DOR = $AF13F2 ; Read/Write - Digital Output Register
=$01					FDC_DOR_DSEL0 = $01     ; Drive 0 Select
=$02					FDC_DOR_DSEL1 = $02     ; Drive 1 Select
=$04					FDC_DOR_NRESET = $04    ; Reset the FDC
=$08					FDC_DOR_DMAEN = $08     ; Enable DMA
=$10					FDC_DOR_MOT0  = $10     ; Turn on motor 0
=$20					FDC_DOR_MOT1  = $20     ; Turn on motor 1
=$40					FDC_DOR_MOT2  = $40     ; Turn on motor 2
=$80					FDC_DOR_MOT3  = $80     ; Turn on motor 3
=$af13f3				SIO_FDC_TSR = $AF13F3   ; Read/Write - Tape Drive Status (not used on the C256)
=$af13f4				SIO_FDC_MSR = $AF13F4   ; Read - Main Status Register
=$01					FDC_MSR_DRV0BSY = $01   ; Indicates if drive 0 is busy
=$02					FDC_MSR_DRV1BSY = $02   ; Indicates if drive 1 is busy
=$10					FDC_MSR_CMDBSY = $10    ; Indicates if a command is in progress
=$20					FDC_MSR_NONDMA = $20    ;
=$40					FDC_MSR_DIO = $40       ; Data direction: 1 = read, 0 = write
=$80					FDC_MSR_RQM = $80       ; 1 = host can transfer data, 0 = host must wait
=$af13f4				SIO_FDC_DSR = $AF13F4   ; Write - Data Select Register
=$40					FDC_DSR_LOPWR = $40     ; Turn on low power mode
=$80					FDC_DSR_RESET = $80     ; Software reset of the FDC
=$af13f5				SIO_FDC_DTA = $AF13F5   ; Read/Write - Data - FIFO
=$af13f6				SIO_FDC_RSV = $AF13F6   ; Reserved
=$af13f7				SIO_FDC_DIR = $AF13F7   ; Read - Digital Input Register
=$80					FDC_DIR_DSKCHG = $80    ; Indicates if the disk has changed
=$af13f7				SIO_FDC_CCR = $AF13F7   ; Write - Configuration Control Register
=$03					FDC_ST0_DRVSEL = $03    ; Mask for the current selected drive
=$04					FDC_ST0_HEAD = $04      ; Bit for the current selected head
=$08					FDC_ST0_EC = $08        ; Bit for EQUIPMENT CHECK, error in recalibrate or relative seek
=$10					FDC_ST0_SEEKEND = $10   ; The FDC completed a seek, relative seek, or recalibrate
=$c0					FDC_ST0_INTCODE = $C0   ; Mask for interrupt code:
=$01					FDC_ST1_MA = $01        ; Missing address mark
=$02					FDC_ST1_NW = $02        ; Not writable (disk is write protected)
=$04					FDC_ST1_ND = $04        ; No data
=$08					FDC_ST1_OR = $08        ; Overrun/underrun of the data
=$10					FDC_ST1_DE = $10        ; Data error... a CRC check failed
=$80					FDC_ST1_EN = $80        ; End of cylinder: tried to acess a sector not on the track
=$01					FDC_ST2_MD = $01        ; Missing address mark: FDC cannot detect a data address mark
=$02					FDC_ST2_BC = $02        ; Bad cylinder
=$10					FDC_ST2_WC = $10        ; Wrong cylinder: track is not the same as expected
=$20					FDC_ST2_DD = $20        ; Data error in field: CRC error
=$40					FDC_ST2_CM = $40        ; Control mark
=$03					FDC_ST3_DRVSEL = $03    ; Drive select mask
=$04					FDC_ST3_HEAD = $04      ; Head address bit
=$10					FDC_ST3_TRACK0 = $10    ; Track 0: Status of the TRK0 pin
=$40					FDC_ST3_WP = $40        ; Write Protect: status of the WP pin
=2					FDC_CMD_READ_TRACK          = 2
=3					FDC_CMD_SPECIFY             = 3
=4					FDC_CMD_SENSE_DRIVE_STATUS  = 4
=5					FDC_CMD_WRITE_DATA          = 5
=6					FDC_CMD_READ_DATA           = 6
=7					FDC_CMD_RECALIBRATE         = 7
=8					FDC_CMD_SENSE_INTERRUPT     = 8
=9					FDC_CMD_WRITE_DELETED_DATA  = 9
=10					FDC_CMD_READ_ID             = 10
=12					FDC_CMD_READ_DELETED_DATA   = 12
=13					FDC_CMD_FORMAT_TRACK        = 13
=14					FDC_CMD_DUMPREG             = 14
=15					FDC_CMD_SEEK                = 15
=16					FDC_CMD_VERSION             = 16
=17					FDC_CMD_SCAN_EQUAL          = 17
=18					FDC_CMD_PERPENDICULAR_MODE  = 18
=19					FDC_CMD_CONFIGURE           = 19
=20					FDC_CMD_LOCK                = 20
=22					FDC_CMD_VERIFY              = 22
=25					FDC_CMD_SCAN_LOW_OR_EQUAL   = 25
=29					FDC_CMD_SCAN_HIGH_OR_EQUAL  = 29
=$80					FDC_CMD_MT = $80                    ; Command bit to turn on multi-track
=$40					FDC_CMD_MFM = $40                   ; Command bit to operate in MFM format
=$20					FDC_CMD_SK = $20                    ; Command bit to skip deleted sectors
=$40					FDC_CMD_EIS = $40                   ; Command bit to turn on implied seek
=1					FDC_DEVCMD_MOTOR_ON         = 1     ; Device code to turn the motor on
=2					FDC_DEVCMD_MOTOR_OFF        = 2     ; Device code to turn the motor off
=3					FDC_DEVCMD_RECAL            = 3     ; Device code to recalibrate the drive

;******  Return to file: src\kernel.asm


;******  Processing file: src\timer_def.asm

=$000160				TIMER0_CTRL_REG   = $000160 ; (Write - Control, Read Status)
=$01					TMR0_EN     = $01
=$02					TMR0_SCLR   = $02
=$04					TMR0_SLOAD  = $04 ; Use SLOAD is
=$08					TMR0_UPDWN  = $08
=$000161				TIMER0_CHARGE_L   = $000161 ; Use if you want to Precharge and countdown
=$000162				TIMER0_CHARGE_M   = $000162 ;
=$000163				TIMER0_CHARGE_H   = $000163 ;
=$000164				TIMER0_CMP_REG    = $000164 ;
=$01					TMR0_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02					TMR0_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$000165				TIMER0_CMP_L      = $000165 ; Load this Value for Countup
=$000166				TIMER0_CMP_M      = $000166 ;
=$000167				TIMER0_CMP_H      = $000167 ;
=$000168				TIMER1_CTRL_REG   = $000168 ;
=$01					TMR1_EN     = $01
=$02					TMR1_SCLR   = $02
=$04					TMR1_SLOAD  = $04
=$08					TMR1_UPDWN  = $08 ; 1 = Up, 0 = Down
=$000169				TIMER1_CHARGE_L   = $000169 ; Use if you want to Precharge and countdown
=$00016a				TIMER1_CHARGE_M   = $00016A ;
=$00016b				TIMER1_CHARGE_H   = $00016B ;
=$00016c				TIMER1_CMP_REG    = $00016C ;
=$01					TMR1_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02					TMR1_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$00016d				TIMER1_CMP_L      = $00016D ;
=$00016e				TIMER1_CMP_M      = $00016E ;
=$00016f				TIMER1_CMP_H      = $00016F ;

;******  Return to file: src\kernel.asm


;******  Processing file: src\basic_inc.asm

=$3a0000				BASIC = $3A0000
=3801092				MONITOR = BASIC + 4

;******  Return to file: src\kernel.asm


;******  Processing file: src\kernel_jumptable.asm

.381000	5c 00 04 39	jmp $390400	BOOT            JML IBOOT
.381004	5c ab 13 39	jmp $3913ab	RESTORE         JML IRESTORE
.381008	5c a3 05 39	jmp $3905a3	BREAK           JML IBREAK
.38100c	5c ea 05 39	jmp $3905ea	READY           JML IREADY
.381010	5c ac 13 39	jmp $3913ac	SCINIT          JML ISCINIT
.381014	5c ad 13 39	jmp $3913ad	IOINIT          JML IIOINIT
.381018	5c 67 06 39	jmp $390667	PUTC            JML IPUTC
.38101c	5c 50 06 39	jmp $390650	PUTS            JML IPUTS
.381020	5c 8c 07 39	jmp $39078c	PUTB            JML IPUTB
.381024	5c 12 3e 39	jmp $393e12	PUTBLOCK        JML IPUTBLOCK
.381028	5c ae 13 39	jmp $3913ae	SETLFS          JML ISETLFS
.38102c	5c af 13 39	jmp $3913af	SETNAM          JML ISETNAM
.381030	5c b0 13 39	jmp $3913b0	OPEN            JML IOPEN
.381034	5c b1 13 39	jmp $3913b1	CLOSE           JML ICLOSE
.381038	5c 05 06 39	jmp $390605	SETIN           JML ISETIN
.38103c	5c 0e 06 39	jmp $39060e	SETOUT          JML ISETOUT
.381040	5c b2 13 39	jmp $3913b2	GETB            JML IGETB
.381044	5c db 3d 39	jmp $393ddb	GETBLOCK        JML IGETBLOCK
.381048	5c b3 13 39	jmp $3913b3	GETCH           JML IGETCH
.38104c	5c 20 06 39	jmp $390620	GETCHW          JML IGETCHW
.381050	5c 17 06 39	jmp $390617	GETCHE          JML IGETCHE
.381054	5c b4 13 39	jmp $3913b4	GETS            JML IGETS
.381058	5c b5 13 39	jmp $3913b5	GETLINE         JML IGETLINE
.38105c	5c b6 13 39	jmp $3913b6	GETFIELD        JML IGETFIELD
.381060	5c b7 13 39	jmp $3913b7	TRIM            JML ITRIM
.381064	5c b8 13 39	jmp $3913b8	PRINTC          JML IPRINTC
.381068	5c b9 13 39	jmp $3913b9	PRINTS          JML IPRINTS
.38106c	5c 8d 07 39	jmp $39078d	PRINTCR         JML IPRINTCR
.381070	5c ba 13 39	jmp $3913ba	PRINTF          JML IPRINTF
.381074	5c bb 13 39	jmp $3913bb	PRINTI          JML IPRINTI
.381078	5c eb 08 39	jmp $3908eb	PRINTH          JML IPRINTH
.38107c	5c bc 13 39	jmp $3913bc	PRINTAI         JML IPRINTAI
.381080	5c 08 09 39	jmp $390908	PRINTAH         JML IPRINTAH
.381084	5c 77 08 39	jmp $390877	LOCATE          JML ILOCATE
.381088	5c bd 13 39	jmp $3913bd	PUSHKEY         JML IPUSHKEY
.38108c	5c be 13 39	jmp $3913be	PUSHKEYS        JML IPUSHKEYS
.381090	5c d3 07 39	jmp $3907d3	CSRRIGHT        JML ICSRRIGHT
.381094	5c 06 08 39	jmp $390806	CSRLEFT         JML ICSRLEFT
.381098	5c 2c 08 39	jmp $39082c	CSRUP           JML ICSRUP
.38109c	5c 52 08 39	jmp $390852	CSRDOWN         JML ICSRDOWN
.3810a0	5c c2 07 39	jmp $3907c2	CSRHOME         JML ICSRHOME
.3810a4	5c c3 08 39	jmp $3908c3	SCROLLUP        JML ISCROLLUP
.3810a8	5c 56 09 39	jmp $390956	CLRSCREEN       JML ICLRSCREEN
.3810ac	5c b9 09 39	jmp $3909b9	INITCHLUT	    JML IINITCHLUT
.3810b0	5c d3 0c 39	jmp $390cd3	INITSUPERIO	    JML IINITSUPERIO
.3810b4	5c d2 0d 39	jmp $390dd2	INITKEYBOARD    JML IINITKEYBOARD
.3810b8	5c 3d 0f 39	jmp $390f3d	TESTSID         JML ITESTSID
.3810bc	5c b2 0c 39	jmp $390cb2	INITCURSOR      JML IINITCURSOR
.3810c0	5c 68 0c 39	jmp $390c68	INITFONTSET     JML IINITFONTSET
.3810c4	5c e8 09 39	jmp $3909e8	INITGAMMATABLE  JML IINITGAMMATABLE
.3810c8	5c 08 0a 39	jmp $390a08	INITALLLUT      JML IINITALLLUT
.3810cc	5c ca 0a 39	jmp $390aca	INITVKYTXTMODE  JML IINITVKYTXTMODE
.3810d0	5c f3 0a 39	jmp $390af3	INITVKYGRPMODE  JML IINITVKYGRPMODE
.3810d4	5c 2a 0b 39	jmp $390b2a	INITTILEMODE    JML IINITTILEMODE
.3810d8	5c 2b 0b 39	jmp $390b2b	INITSPRITE      JML IINITSPRITE
.3810dc	5c 0c 10 39	jmp $39100c	INITCODEC       JML IINITCODEC
.3810e0	5c 88 10 39	jmp $391088	RESETCODEC      JML IRESETCODEC
.3810e4	5c f6 10 39	jmp $3910f6	BMP_PARSER      JML IBMP_PARSER
.3810e8	5c ab 10 39	jmp $3910ab	BM_FILL_SCREEN  JML IBM_FILL_SCREEN
.3810ec	5c 3a 34 39	jmp $39343a	OPL2_TONE_TEST  JML IOPL2_TONE_TEST
.3810f0	5c d9 47 39	jmp $3947d9	F_OPEN          JML IF_OPEN         ; open a file for reading/writing/creating
.3810f4	5c 63 48 39	jmp $394863	F_CREATE        JML IF_CREATE       ; create a new file
.3810f8	5c 9d 48 39	jmp $39489d	F_CLOSE         JML IF_CLOSE        ; close a file (make sure last cluster is written)
.3810fc	5c 4c 49 39	jmp $39494c	F_WRITE         JML IF_WRITE        ; write the current cluster to the file
.381100	5c d6 48 39	jmp $3948d6	F_READ          JML IF_READ         ; read the next cluster from the file
.381104	5c f6 4a 39	jmp $394af6	F_DELETE        JML IF_DELETE       ; delete a file / directory
.381108	5c cb 49 39	jmp $3949cb	F_DIROPEN       JML IF_DIROPEN      ; open a directory and seek the first directory entry
.38110c	5c 5d 4a 39	jmp $394a5d	F_DIRNEXT       JML IF_DIRNEXT      ; seek to the next directory of an open directory
.381110	5c a5 4b 39	jmp $394ba5	F_DIRREAD       JML IF_DIRREAD      ; Read the directory entry for the specified file
.381114	5c cc 4b 39	jmp $394bcc	F_DIRWRITE      JML IF_DIRWRITE     ; Write any changes in the current directory cluster back to the drive
.381118	5c 07 4c 39	jmp $394c07	F_LOAD          JML IF_LOAD         ; load a binary file into memory, supports multiple file formats
.38111c	5c f1 4d 39	jmp $394df1	F_SAVE          JML IF_SAVE         ; Save memory to a binary file
.381120	5c be 3d 39	jmp $393dbe	CMDBLOCK        JML ICMDBLOCK       ; Send a command to a block device

;******  Return to file: src\kernel.asm


;******  Processing file: src\Interrupt_Handler.asm

.381124					IRQ_HANDLER
.381124	e2 20		sep #$20	                SEP #$20        ; set A short
.381126	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.38112a	c9 00		cmp #$00	                CMP #$00
.38112c	f0 4a		beq $381178	                BEQ CHECK_PENDING_REG1
.38112e	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381132	29 01		and #$01	                AND #FNX0_INT00_SOF
.381134	c9 01		cmp #$01	                CMP #FNX0_INT00_SOF
.381136	d0 09		bne $381141	                BNE SERVICE_NEXT_IRQ2
.381138	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.38113c	20 e2 11	jsr $3811e2	                JSR SOF_INTERRUPT
.38113f	e2 20		sep #$20	                SEP #$20        ; set A short
.381141					SERVICE_NEXT_IRQ2
.381141	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381145	29 04		and #$04	                AND #FNX0_INT02_TMR0
.381147	c9 04		cmp #$04	                CMP #FNX0_INT02_TMR0
.381149	d0 09		bne $381154	                BNE SERVICE_NEXT_IRQ6
.38114b	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.38114f	20 00 12	jsr $381200	                JSR TIMER0_INTERRUPT
.381152	e2 20		sep #$20	                SEP #$20        ; set A short
.381154					SERVICE_NEXT_IRQ6
.381154	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381158	29 40		and #$40	                AND #FNX0_INT06_FDC
.38115a	c9 40		cmp #$40	                CMP #FNX0_INT06_FDC
.38115c	d0 09		bne $381167	                BNE SERVICE_NEXT_IRQ7
.38115e	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381162	20 5b 12	jsr $38125b	                JSR FDC_INTERRUPT
.381165	e2 20		sep #$20	                SEP #$20        ; set A short
.381167					SERVICE_NEXT_IRQ7
.381167	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.38116b	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.38116d	c9 80		cmp #$80	                CMP #FNX0_INT07_MOUSE
.38116f	d0 07		bne $381178	                BNE CHECK_PENDING_REG1
.381171	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381175	20 1a 12	jsr $38121a	                JSR MOUSE_INTERRUPT
.381178					CHECK_PENDING_REG1
.381178	e2 20		sep #$20	                SEP #$20        ; set A short
.38117a	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.38117e	c9 00		cmp #$00	                CMP #$00
.381180	f0 5d		beq $3811df	                BEQ EXIT_IRQ_HANDLE
.381182					SERVICE_NEXT_IRQ8
.381182	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381186	29 01		and #$01	                AND #FNX1_INT00_KBD
.381188	c9 01		cmp #$01	                CMP #FNX1_INT00_KBD
.38118a	d0 09		bne $381195	                BNE SERVICE_NEXT_IRQ11
.38118c	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.381190	20 93 12	jsr $381293	                JSR KEYBOARD_INTERRUPT
.381193	e2 20		sep #$20	                SEP #$20        ; set A short
.381195					SERVICE_NEXT_IRQ11
.381195	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381199	29 08		and #$08	                AND #FNX1_INT03_COM2
.38119b	c9 08		cmp #$08	                CMP #FNX1_INT03_COM2
.38119d	d0 09		bne $3811a8	                BNE SERVICE_NEXT_IRQ12
.38119f	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811a3	20 66 12	jsr $381266	                JSR COM2_INTERRUPT
.3811a6	e2 20		sep #$20	                SEP #$20        ; set A short
.3811a8					SERVICE_NEXT_IRQ12
.3811a8	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3811ac	29 10		and #$10	                AND #FNX1_INT04_COM1
.3811ae	c9 10		cmp #$10	                CMP #FNX1_INT04_COM1
.3811b0	d0 09		bne $3811bb	                BNE SERVICE_NEXT_IRQ13
.3811b2	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811b6	20 71 12	jsr $381271	                JSR COM1_INTERRUPT
.3811b9	e2 20		sep #$20	                SEP #$20        ; set A short
.3811bb					SERVICE_NEXT_IRQ13
.3811bb	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3811bf	29 20		and #$20	                AND #FNX1_INT05_MPU401
.3811c1	c9 20		cmp #$20	                CMP #FNX1_INT05_MPU401
.3811c3	d0 09		bne $3811ce	                BNE SERVICE_NEXT_IRQ14
.3811c5	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811c9	20 7c 12	jsr $38127c	                JSR MPU401_INTERRUPT
.3811cc	e2 20		sep #$20	                SEP #$20        ; set A short
.3811ce					SERVICE_NEXT_IRQ14
.3811ce	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3811d2	29 40		and #$40	                AND #FNX1_INT06_LPT
.3811d4	c9 40		cmp #$40	                CMP #FNX1_INT06_LPT
.3811d6	d0 07		bne $3811df	                BNE EXIT_IRQ_HANDLE
.3811d8	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3811dc	20 87 12	jsr $381287	                JSR LPT1_INTERRUPT
.3811df					EXIT_IRQ_HANDLE
.3811df	c2 30		rep #$30	                REP #$30        ; set A&X long
.3811e1	6b		rtl		                RTL
.3811e2					SOF_INTERRUPT
.3811e2	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.3811e6	29 01		and #$01	                AND #FNX0_INT00_SOF
.3811e8	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.3811ec	c2 20		rep #$20	                REP #$20        ; set A long
.3811ee	af 45 e0 37	lda $37e045	                LDA @l FDC_MOTOR_TIMER          ; Check the FDC motor count-down timer
.3811f2	f0 0b		beq $3811ff	                BEQ sof_int_done                ; If it's zero, do nothing
.3811f4	3a		dec a		                DEC A                           ; Otherwise, decrement it...
.3811f5	8f 45 e0 37	sta $37e045	                STA @l FDC_MOTOR_TIMER
.3811f9	d0 04		bne $3811ff	                BNE sof_int_done                ; If it's not zero, we're done for this tick
.3811fb	22 40 52 39	jsl $395240	                JSL FDC_Motor_Off               ; Otherwise, turn off the motor
.3811ff	60		rts		sof_int_done    RTS
.381200					TIMER0_INTERRUPT
.381200	e2 20		sep #$20	                SEP #$20        ; set A short
.381202	af 05 07 00	lda $000705	                LDA @l TIMERFLAGS               ; Flag that the interrupt has happened
.381206	09 80		ora #$80	                ORA #TIMER0TRIGGER
.381208	8f 05 07 00	sta $000705	                STA @l TIMERFLAGS
.38120c	60		rts		                RTS
.38120d					TIMER2_INTERRUPT
.38120d	e2 20		sep #$20	                SEP #$20        ; set A short
.38120f	af 05 07 00	lda $000705	                LDA @l TIMERFLAGS               ; Flag that the interrupt has happened
.381213	09 20		ora #$20	                ORA #TIMER2TRIGGER
.381215	8f 05 07 00	sta $000705	                STA @l TIMERFLAGS
.381219	60		rts		                RTS
.38121a					MOUSE_INTERRUPT
.38121a	e2 20		sep #$20	                SEP #$20        ; set A short
.38121c	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381220	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.381222	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381226	af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF
.38122a	a2 00 00	ldx #$0000	                LDX #$0000
.38122d	e2 10		sep #$10	                SEP #$10        ; set X short
.38122f	a6 e0		ldx $e0		                LDX MOUSE_PTR
.381231	9f 06 07 af	sta $af0706,x	                STA @lMOUSE_PTR_BYTE0, X
.381235	e8		inx		                INX
.381236	e0 03		cpx #$03	                CPX #$03
.381238	d0 1c		bne $381256	                BNE EXIT_FOR_NEXT_VALUE
.38123a	af 02 07 af	lda $af0702	                LDA @lMOUSE_PTR_X_POS_L
.38123e	85 e1		sta $e1		                STA MOUSE_POS_X_LO
.381240	af 03 07 af	lda $af0703	                LDA @lMOUSE_PTR_X_POS_H
.381244	85 e2		sta $e2		                STA MOUSE_POS_X_HI
.381246	af 04 07 af	lda $af0704	                LDA @lMOUSE_PTR_Y_POS_L
.38124a	85 e3		sta $e3		                STA MOUSE_POS_Y_LO
.38124c	af 05 07 af	lda $af0705	                LDA @lMOUSE_PTR_Y_POS_H
.381250	85 e4		sta $e4		                STA MOUSE_POS_Y_HI
.381252	e2 20		sep #$20	                SEP #$20        ; set A short
.381254	a2 00		ldx #$00	                LDX #$00
.381256					EXIT_FOR_NEXT_VALUE
.381256	86 e0		stx $e0		                STX MOUSE_PTR
.381258	c2 10		rep #$10	                REP #$10        ; set X long
.38125a	60		rts		                RTS
.38125b					FDC_INTERRUPT
.38125b	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.38125f	29 40		and #$40	                AND #FNX0_INT06_FDC
.381261	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381265	60		rts		                RTS
.381266					COM2_INTERRUPT
.381266	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.38126a	29 08		and #$08	                AND #FNX1_INT03_COM2
.38126c	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.381270	60		rts		                RTS
.381271					COM1_INTERRUPT
.381271	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381275	29 10		and #$10	                AND #FNX1_INT04_COM1
.381277	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.38127b	60		rts		                RTS
.38127c					MPU401_INTERRUPT
.38127c	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.381280	29 20		and #$20	                AND #FNX1_INT05_MPU401
.381282	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.381286	60		rts		                RTS
.381287					LPT1_INTERRUPT
.381287	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.38128b	29 40		and #$40	                AND #FNX1_INT06_LPT
.38128d	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.381291	60		rts		                RTS
.381292					NMI_HANDLER
.381292	6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\keyboard.asm

.381293					KEYBOARD_INTERRUPT
.381293	48		pha		                PHA             ; begin setdp macro
.381294	08		php		                PHP
.381295	c2 20		rep #$20	                REP #$20        ; set A long
.381297	a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.38129a	5b		tcd		                TCD
.38129b	28		plp		                PLP
.38129c	68		pla		                PLA             ; end setdp macro
.38129d	a2 00 00	ldx #$0000	                ldx #$0000
.3812a0	e2 10		sep #$10	                SEP #$10        ; set X short
.3812a2	e2 20		sep #$20	                SEP #$20        ; set A short
.3812a4	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3812a8	29 01		and #$01	                AND #FNX1_INT00_KBD
.3812aa	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3812ae					IRQ_HANDLER_FETCH
.3812ae	af 60 10 af	lda $af1060	                LDA @lKBD_INPT_BUF      ; Get Scan Code from KeyBoard
.3812b2	85 88		sta $0f88	                STA KEYBOARD_SC_TMP     ; Save Code Immediately
.3812b4	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the Prefix was picked up before
.3812b6	29 80		and #$80	                AND #$80
.3812b8	c9 80		cmp #$80	                CMP #$80
.3812ba	d0 10		bne $3812cc	                BNE CHK_LSHIFT          ; No: do normal scan-code checks
.3812bc	a5 87		lda $0f87	PREFIX_ON       LDA KEYBOARD_SC_FLG     ; Otherwise: clear prefix
.3812be	29 7f		and #$7f	                AND #$7F
.3812c0	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3812c2	a5 88		lda $0f88	                LDA KEYBOARD_SC_TMP     ; Get the prefixed scan-code's character
.3812c4	aa		tax		                TAX
.3812c5	bf 80 5f 39	lda $395f80,x	                LDA @lScanCode_Prefix_Set1, x
.3812c9	4c 6f 13	jmp $38136f	                JMP KB_WR_2_SCREEN      ; And save it
.3812cc	a5 88		lda $0f88	CHK_LSHIFT      LDA KEYBOARD_SC_TMP
.3812ce	c9 2a		cmp #$2a	                CMP #$2A                ; Left Shift Pressed
.3812d0	d0 03		bne $3812d5	                BNE NOT_KB_SET_LSHIFT
.3812d2	82 ad 00	brl $381382	                BRL KB_SET_SHIFT
.3812d5					NOT_KB_SET_LSHIFT
.3812d5	c9 aa		cmp #$aa	                CMP #$AA                ; Left Shift Unpressed
.3812d7	d0 03		bne $3812dc	                BNE NOT_KB_CLR_LSHIFT
.3812d9	82 af 00	brl $38138b	                BRL KB_CLR_SHIFT
.3812dc					NOT_KB_CLR_LSHIFT
.3812dc	c9 36		cmp #$36	                CMP #$36                ; Right Shift Pressed
.3812de	d0 03		bne $3812e3	                BNE NOT_KB_SET_RSHIFT
.3812e0	82 9f 00	brl $381382	                BRL KB_SET_SHIFT
.3812e3					NOT_KB_SET_RSHIFT
.3812e3	c9 b6		cmp #$b6	                CMP #$B6                ; Right Shift Unpressed
.3812e5	d0 03		bne $3812ea	                BNE NOT_KB_CLR_RSHIFT
.3812e7	82 a1 00	brl $38138b	                BRL KB_CLR_SHIFT
.3812ea					NOT_KB_CLR_RSHIFT
.3812ea	c9 1d		cmp #$1d	                CMP #$1D                ; Left CTRL pressed
.3812ec	d0 03		bne $3812f1	                BNE NOT_KB_SET_CTRL
.3812ee	82 a3 00	brl $381394	                BRL KB_SET_CTRL
.3812f1					NOT_KB_SET_CTRL
.3812f1	c9 9d		cmp #$9d	                CMP #$9D                ; Left CTRL Unpressed
.3812f3	d0 03		bne $3812f8	                BNE NOT_KB_CLR_CTRL
.3812f5	82 a5 00	brl $38139d	                BRL KB_CLR_CTRL
.3812f8					NOT_KB_CLR_CTRL
.3812f8	c9 38		cmp #$38	                CMP #$38                ; Left ALT Pressed
.3812fa	d0 03		bne $3812ff	                BNE NOT_KB_SET_ALT
.3812fc	82 a7 00	brl $3813a6	                BRL KB_SET_ALT
.3812ff					NOT_KB_SET_ALT
.3812ff	c9 b8		cmp #$b8	                CMP #$B8                ; Left ALT Unpressed
.381301	d0 03		bne $381306	                BNE NOT_KB_CLR_ALT
.381303	82 a9 00	brl $3813af	                BRL KB_CLR_ALT
.381306	c9 e0		cmp #$e0	NOT_KB_CLR_ALT  CMP #$E0                ; Prefixed scan code
.381308	d0 03		bne $38130d	                BNE NOT_PREFIXED
.38130a	82 ab 00	brl $3813b8	                BRL KB_SET_PREFIX
.38130d	c9 45		cmp #$45	NOT_PREFIXED    CMP #$45                ; Numlock Pressed
.38130f	d0 03		bne $381314	                BNE NOT_KB_SET_NUM
.381311	82 b6 00	brl $3813ca	                BRL KB_TOG_NUMLOCK
.381314	c9 46		cmp #$46	NOT_KB_SET_NUM  CMP #$46                ; Scroll Lock Pressed
.381316	d0 03		bne $38131b	                BNE NOT_KB_SET_SCR
.381318	82 a6 00	brl $3813c1	                BRL KB_TOG_SCRLOCK
.38131b	c9 3a		cmp #$3a	NOT_KB_SET_SCR  CMP #$3A                ; Caps Lock Pressed
.38131d	d0 03		bne $381322	                BNE NOT_KB_CAPSLOCK
.38131f	82 bc 00	brl $3813de	                BRL KB_TOG_CAPLOCK
.381322	c9 58		cmp #$58	NOT_KB_CAPSLOCK CMP #$58                ; F12 Pressed
.381324	d0 09		bne $38132f	                BNE KB_UNPRESSED
.381326	a9 60		lda #$60	                LDA #KB_CREDITS         ; Yes: flag that the CREDITS key has been pressed
.381328	8f 8a 0f 00	sta $000f8a	                STA @lKEYFLAG
.38132c	82 b5 00	brl $3813e4	                BRL KB_CHECK_B_DONE
.38132f	29 80		and #$80	KB_UNPRESSED    AND #$80                ; See if the Scan Code is press or Depressed
.381331	c9 80		cmp #$80	                CMP #$80                ; Depress Status - We will not do anything at this point
.381333	d0 03		bne $381338	                BNE KB_NORM_SC
.381335	82 ac 00	brl $3813e4	                BRL KB_CHECK_B_DONE
.381338	a5 88		lda $0f88	KB_NORM_SC      LDA KEYBOARD_SC_TMP       ;
.38133a	aa		tax		                TAX
.38133b	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the SHIFT Key is being Pushed
.38133d	29 10		and #$10	                AND #$10
.38133f	c9 10		cmp #$10	                CMP #$10
.381341	f0 17		beq $38135a	                BEQ SHIFT_KEY_ON
.381343	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the CTRL Key is being Pushed
.381345	29 20		and #$20	                AND #$20
.381347	c9 20		cmp #$20	                CMP #$20
.381349	f0 16		beq $381361	                BEQ CTRL_KEY_ON
.38134b	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the ALT Key is being Pushed
.38134d	29 40		and #$40	                AND #$40
.38134f	c9 40		cmp #$40	                CMP #$40
.381351	f0 15		beq $381368	                BEQ ALT_KEY_ON
.381353	bf 00 5d 39	lda $395d00,x	                LDA @lScanCode_Press_Set1, x
.381357	82 15 00	brl $38136f	                BRL KB_WR_2_SCREEN
.38135a	bf 80 5d 39	lda $395d80,x	SHIFT_KEY_ON    LDA @lScanCode_Shift_Set1, x
.38135e	82 0e 00	brl $38136f	                BRL KB_WR_2_SCREEN
.381361	bf 00 5e 39	lda $395e00,x	CTRL_KEY_ON     LDA @lScanCode_Ctrl_Set1, x
.381365	82 07 00	brl $38136f	                BRL KB_WR_2_SCREEN
.381368	bf 80 5e 39	lda $395e80,x	ALT_KEY_ON      LDA @lScanCode_Alt_Set1, x
.38136c	82 00 00	brl $38136f	                BRL KB_WR_2_SCREEN
.38136f	c9 18		cmp #$18	KB_WR_2_SCREEN  CMP #$18                ; Is it SysRq?
.381371	d0 03		bne $381376	                BNE savechar
.381373	4c f4 13	jmp $3813f4	                JMP programmerKey       ; Yes: trigger the programmer key
.381376	48		pha		savechar        PHA
.381377	c2 10		rep #$10	                REP #$10        ; set X long
.381379	20 00 14	jsr $381400	                JSR SAVEKEY
.38137c	e2 20		sep #$20	                SEP #$20        ; set A short
.38137e	68		pla		                PLA
.38137f	4c e4 13	jmp $3813e4	                JMP KB_CHECK_B_DONE
.381382	a5 87		lda $0f87	KB_SET_SHIFT    LDA KEYBOARD_SC_FLG
.381384	09 10		ora #$10	                ORA #$10
.381386	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.381388	4c e4 13	jmp $3813e4	                JMP KB_CHECK_B_DONE
.38138b	a5 87		lda $0f87	KB_CLR_SHIFT    LDA KEYBOARD_SC_FLG
.38138d	29 ef		and #$ef	                AND #$EF
.38138f	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.381391	4c e4 13	jmp $3813e4	                JMP KB_CHECK_B_DONE
.381394	a5 87		lda $0f87	KB_SET_CTRL     LDA KEYBOARD_SC_FLG
.381396	09 20		ora #$20	                ORA #$20
.381398	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.38139a	4c e4 13	jmp $3813e4	                JMP KB_CHECK_B_DONE
.38139d	a5 87		lda $0f87	KB_CLR_CTRL     LDA KEYBOARD_SC_FLG
.38139f	29 df		and #$df	                AND #$DF
.3813a1	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813a3	4c e4 13	jmp $3813e4	                JMP KB_CHECK_B_DONE
.3813a6	a5 87		lda $0f87	KB_SET_ALT      LDA KEYBOARD_SC_FLG
.3813a8	09 40		ora #$40	                ORA #$40
.3813aa	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813ac	4c e4 13	jmp $3813e4	                JMP KB_CHECK_B_DONE
.3813af	a5 87		lda $0f87	KB_CLR_ALT      LDA KEYBOARD_SC_FLG
.3813b1	29 bf		and #$bf	                AND #$BF
.3813b3	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813b5	4c e4 13	jmp $3813e4	                JMP KB_CHECK_B_DONE
.3813b8	a5 87		lda $0f87	KB_SET_PREFIX   LDA KEYBOARD_SC_FLG
.3813ba	09 80		ora #$80	                ORA #$80
.3813bc	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3813be	4c e4 13	jmp $3813e4	                JMP KB_CHECK_B_DONE
.3813c1	a5 89		lda $0f89	KB_TOG_SCRLOCK  LDA KEYBOARD_LOCKS
.3813c3	49 01		eor #$01	                EOR #KB_SCROLL_LOCK         ; toggle the Scroll Lock flag
.3813c5	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.3813c7	4c e4 13	jmp $3813e4	                JMP KB_CHECK_B_DONE
.3813ca	a5 87		lda $0f87	KB_TOG_NUMLOCK  LDA KEYBOARD_SC_FLG         ; Check flags...
.3813cc	29 60		and #$60	                AND #$60                    ; ... is control-alt pressed?
.3813ce	c9 60		cmp #$60	                CMP #$60
.3813d0	d0 03		bne $3813d5	                BNE KB_TOG_NUMLOC2
.3813d2	82 63 ff	brl $381338	                BRL KB_NORM_SC              ; No: treat as a BREAK key
.3813d5	a5 89		lda $0f89	KB_TOG_NUMLOC2  LDA KEYBOARD_LOCKS
.3813d7	49 02		eor #$02	                EOR #KB_NUM_LOCK            ; toggle the Num Lock flag
.3813d9	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.3813db	4c e4 13	jmp $3813e4	                JMP KB_CHECK_B_DONE
.3813de	a5 89		lda $0f89	KB_TOG_CAPLOCK  LDA KEYBOARD_LOCKS
.3813e0	49 04		eor #$04	                EOR #KB_CAPS_LOCK           ; toggle the Caps Lock flag
.3813e2	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.3813e4					KB_CHECK_B_DONE
.3813e4	af 64 10 af	lda $af1064	                LDA STATUS_PORT
.3813e8	29 01		and #$01	                AND #OUT_BUF_FULL           ; Test bit $01 (if 1, Full)
.3813ea	c9 01		cmp #$01	                CMP #OUT_BUF_FULL           ; if Still Byte in the Buffer, fetch it out
.3813ec	d0 03		bne $3813f1	                BNE SET_LED
.3813ee	4c ae 12	jmp $3812ae	                JMP IRQ_HANDLER_FETCH
.3813f1					SET_LED
.3813f1					KB_DONE
.3813f1	c2 30		rep #$30	                REP #$30        ; set A&X long
.3813f3	60		rts		                RTS
.3813f4					programmerKey
.3813f4	c2 30		rep #$30	                REP #$30        ; set A&X long
.3813f6	68		pla		                PLA                     ; Get and throw-away the return address to the interrupt handler
.3813f7	2b		pld		                PLD                     ; Restore the registers that were present when the handler was invoked
.3813f8	ab		plb		                PLB
.3813f9	7a		ply		                PLY
.3813fa	fa		plx		                PLX
.3813fb	68		pla		                PLA
.3813fc	5c 08 10 38	jmp $381008	                JML BREAK               ; And go to the BRK handler directly to open the monitor
.381400					SAVEKEY
.381400	e2 20		sep #$20	                SEP #$20        ; set A short
.381402	48		pha		                PHA                     ; Save the character
.381403	a5 89		lda $0f89	                LDA KEYBOARD_LOCKS      ; Check the keyboard lock flags
.381405	29 04		and #$04	                AND #KB_CAPS_LOCK       ; Is CAPS lock on?
.381407	f0 0d		beq $381416	                BEQ no_caps             ; No... just use the character as-is
.381409	68		pla		                PLA                     ; Get the character back
.38140a	c9 61		cmp #$61	                CMP #'a'                ; Is it < 'a'
.38140c	90 09		bcc $381417	                BLT check_break         ; Yes: just use as-is
.38140e	c9 7b		cmp #$7b	                CMP #'z'+1              ; Is it > 'z'
.381410	b0 05		bcs $381417	                BGE check_break         ; Yes: just us as-is
.381412	29 df		and #$df	                AND #%11011111          ; Conver to upper case
.381414	80 01		bra $381417	                BRA check_break
.381416	68		pla		no_caps         PLA                     ; Restore the character
.381417	c9 00		cmp #$00	check_break     CMP #0
.381419	f0 18		beq $381433	                BEQ done
.38141b	c9 03		cmp #$03	                CMP #CHAR_CTRL_C        ; Is it CTRL-C?
.38141d	f0 15		beq $381434	                BEQ flag_break          ; Yes: flag a break
.38141f	a6 8d		ldx $0f8d	no_break        LDX KEY_BUFFER_WPOS     ; So the Receive Character is saved in the Buffer
.381421	e0 80 00	cpx #$0080	                CPX #KEY_BUFFER_SIZE    ; Make sure we haven't been overboard.
.381424	b0 0d		bcs $381433	                BCS done                ; Stop storing - An error should ensue here...
.381426	9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER,X
.38142a	e8		inx		                INX
.38142b	86 8d		stx $0f8d	                STX KEY_BUFFER_WPOS
.38142d	a9 00		lda #$00	                LDA #$00
.38142f	9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER, X       ; Store a EOL in the following location for good measure
.381433	60		rts		done            RTS
.381434					flag_break
.381434	e2 20		sep #$20	                SEP #$20        ; set A short
.381436	a9 80		lda #$80	                LDA #KB_CTRL_C          ; Flag that an interrupt key has been pressed
.381438	85 8a		sta $0f8a	                STA KEYFLAG             ; The interpreter should see this soon and throw a BREAK
.38143a	60		rts		                RTS
.38143b					KBD_GETC
.38143b	da		phx		                PHX
.38143c	0b		phd		                PHD
.38143d	08		php		                PHP
.38143e	48		pha		                PHA             ; begin setdp macro
.38143f	08		php		                PHP
.381440	c2 20		rep #$20	                REP #$20        ; set A long
.381442	a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.381445	5b		tcd		                TCD
.381446	28		plp		                PLP
.381447	68		pla		                PLA             ; end setdp macro
.381448	e2 20		sep #$20	                SEP #$20        ; set A short
.38144a	c2 10		rep #$10	                REP #$10        ; set X long
.38144c	58		cli		                CLI                     ; Make sure interrupts can happen
.38144d	af 8a 0f 00	lda $000f8a	get_wait        LDA @lKEYFLAG           ; Check the keyboard control flag
.381451	29 60		and #$60	                AND #KB_CREDITS         ; Are the credits flagged?
.381453	c9 60		cmp #$60	                CMP #KB_CREDITS
.381455	d0 0a		bne $381461	                BNE check_buffer        ; No: check the key buffer
.381457	a9 00		lda #$00	                LDA #0                  ; Yes: clear the flags
.381459	8f 8a 0f 00	sta $000f8a	                STA @lKEYFLAG
.38145d	22 65 13 39	jsl $391365	                JSL SHOW_CREDITS        ; Then show the credits screen and wait for a key press
.381461	a6 8b		ldx $0f8b	check_buffer    LDX KEY_BUFFER_RPOS     ; Is KEY_BUFFER_RPOS < KEY_BUFFER_WPOS
.381463	e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS
.381465	90 02		bcc $381469	                BCC read_buff           ; Yes: a key is present, read it
.381467	80 e4		bra $38144d	                BRA get_wait            ; Otherwise, keep waiting
.381469	78		sei		read_buff       SEI                     ; Don't interrupt me!
.38146a	b5 00		lda $0f00,x	                LDA KEY_BUFFER,X        ; Get the key
.38146c	e8		inx		                INX                     ; And move to the next key
.38146d	e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS     ; Did we just read the last key?
.38146f	f0 07		beq $381478	                BEQ reset_indexes       ; Yes: return to 0 position
.381471	86 8b		stx $0f8b	                STX KEY_BUFFER_RPOS     ; Otherwise: Update the read index
.381473	58		cli		                CLI
.381474	28		plp		done            PLP                     ; Restore status and interrupts
.381475	2b		pld		                PLD
.381476	fa		plx		                PLX
.381477	6b		rtl		                RTL
.381478	64 8b		stz $0f8b	reset_indexes   STZ KEY_BUFFER_RPOS     ; Reset read index to the beginning
.38147a	64 8d		stz $0f8d	                STZ KEY_BUFFER_WPOS     ; Reset the write index to the beginning
.38147c	80 f6		bra $381474	                BRA done

;******  Return to file: src\kernel.asm

.390400					IBOOT
.390400	18		clc		                CLC                       ; clear the carry flag
.390401	fb		xce		                XCE                       ; move carry to emulation flag.
.390402	78		sei		                SEI
.390403	c2 30		rep #$30	                REP #$30        ; set A&X long
.390405	a9 ff fe	lda #$feff	                LDA #STACK_END            ; initialize stack pointer
.390408	1b		tcs		                TAS
.390409	48		pha		                PHA             ; begin setdp macro
.39040a	08		php		                PHP
.39040b	c2 20		rep #$20	                REP #$20        ; set A long
.39040d	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390410	5b		tcd		                TCD
.390411	28		plp		                PLP
.390412	68		pla		                PLA             ; end setdp macro
.390413	e2 20		sep #$20	                SEP #$20        ; set A short
.390415	a2 00 00	ldx #$0000	                LDX #$0000
.390418	a9 00		lda #$00	                LDA #$00
.39041a					CLEAR_MEM_LOOP
.39041a	95 00		sta $00,x	                STA $0000, X
.39041c	e8		inx		                INX
.39041d	e0 00 01	cpx #$0100	                CPX #$0100
.390420	d0 f8		bne $39041a	                BNE CLEAR_MEM_LOOP
.390422	ea		nop		                NOP
.390423	a9 ff		lda #$ff	                LDA #$FF
.390425	8f 48 01 00	sta $000148	                STA @lINT_EDGE_REG0
.390429	8f 49 01 00	sta $000149	                STA @lINT_EDGE_REG1
.39042d	8f 4a 01 00	sta $00014a	                STA @lINT_EDGE_REG2
.390431	8f 4b 01 00	sta $00014b	                STA @lINT_EDGE_REG3
.390435	8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.390439	8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.39043d	8f 4e 01 00	sta $00014e	                STA @lINT_MASK_REG2
.390441	8f 4f 01 00	sta $00014f	                STA @lINT_MASK_REG3
.390445	22 22 0f 39	jsl $390f22	                JSL INITRTC               ; Initialize the RTC
.390449	c2 30		rep #$30	                REP #$30        ; set A&X long
.39044b	a9 00 a0	lda #$a000	                LDA #<>SCREEN_PAGE0      ; store the initial screen buffer location
.39044e	85 0c		sta $0c		                STA SCREENBEGIN
.390450	85 17		sta $17		                STA CURSORPOS
.390452	a9 00 c0	lda #$c000	                LDA #<>CS_COLOR_MEM_PTR   ; Set the initial COLOR cursor position
.390455	85 1f		sta $1f		                STA COLORPOS
.390457	e2 20		sep #$20	                SEP #$20        ; set A short
.390459	a9 af		lda #$af	                LDA #`SCREEN_PAGE0
.39045b	85 0e		sta $0e		                STA SCREENBEGIN+2
.39045d	85 19		sta $19		                STA CURSORPOS+2
.39045f	a9 af		lda #$af	                LDA #`CS_COLOR_MEM_PTR    ; Set the initial COLOR cursor position
.390461	85 21		sta $21		                STA COLORPOS+2
.390463	e2 20		sep #$20	                SEP #$20        ; set A short
.390465	a9 00		lda #$00	                LDA #$00
.390467	8d 87 0f	sta $0f87	                STA KEYBOARD_SC_FLG     ; Clear the Keyboard Flag
.39046a	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.39046c	8f 00 f1 af	sta $aff100	                STA $AFF100
.390470	a9 bf		lda #$bf	                LDA #$BF ; Channel Two - No Atteniation
.390472	8f 00 f1 af	sta $aff100	                STA $AFF100
.390476	a9 df		lda #$df	                LDA #$DF ; Channel Two - No Atteniation
.390478	8f 00 f1 af	sta $aff100	                STA $AFF100
.39047c	a9 ff		lda #$ff	                LDA #$FF ; Channel Two - No Atteniation
.39047e	8f 00 f1 af	sta $aff100	                STA $AFF100
.390482	c2 30		rep #$30	                REP #$30        ; set A&X long
.390484	a2 48 00	ldx #$0048	                LDX #72
.390487	86 0f		stx $0f		                STX COLS_VISIBLE
.390489	a0 34 00	ldy #$0034	                LDY #52
.39048c	84 13		sty $13		                STY LINES_VISIBLE
.39048e	a2 80 00	ldx #$0080	                LDX #128
.390491	86 11		stx $11		                STX COLS_PER_LINE
.390493	a0 40 00	ldy #$0040	                LDY #64
.390496	84 15		sty $15		                STY LINES_MAX
.390498	a9 ed 00	lda #$00ed	                LDA #$ED                  ; Set the default text color to light gray on dark gray
.39049b	85 1e		sta $1e		                STA CURCOLOR
.39049d	22 dc 10 38	jsl $3810dc	                JSL INITCODEC
.3904a1	22 b0 10 38	jsl $3810b0	                JSL INITSUPERIO
.3904a5	22 c4 10 38	jsl $3810c4	                JSL INITGAMMATABLE
.3904a9	22 c8 10 38	jsl $3810c8	                JSL INITALLLUT
.3904ad	22 ac 10 38	jsl $3810ac	                JSL INITCHLUT
.3904b1	22 93 0c 39	jsl $390c93	                JSL INITMOUSEPOINTER
.3904b5	22 bc 10 38	jsl $3810bc	                JSL INITCURSOR
.3904b9	22 cc 10 38	jsl $3810cc	                JSL INITVKYTXTMODE
.3904bd	22 68 0c 39	jsl $390c68	                JSL IINITFONTSET
.3904c1	22 56 09 39	jsl $390956	                JSL ICLRSCREEN  ; Clear Screen and Set a standard color in Color Memory
.3904c5	a9 01 00	lda #$0001	                LDA #CHAN_COM1    ; Initialize COM1
.3904c8	22 8a 4e 39	jsl $394e8a	                JSL UART_SELECT
.3904cc	22 f6 4e 39	jsl $394ef6	                JSL UART_INIT
.3904d0	a9 02 00	lda #$0002	                LDA #CHAN_COM2    ; Initialize COM2
.3904d3	22 8a 4e 39	jsl $394e8a	                JSL UART_SELECT
.3904d7	22 f6 4e 39	jsl $394ef6	                JSL UART_INIT
.3904db	a9 00 00	lda #$0000	                LDA #0
.3904de	22 38 10 38	jsl $381038	                JSL SETIN
.3904e2	22 3c 10 38	jsl $38103c	                JSL SETOUT
.3904e6	c2 20		rep #$20	                REP #$20        ; set A long
.3904e8	a2 00 00	ldx #$0000	                LDX #0
.3904eb	a0 00 00	ldy #$0000	                LDY #0
.3904ee	22 77 08 39	jsl $390877	                JSL ILOCATE
.3904f2	c2 30		rep #$30	                REP #$30        ; set A&X long
.3904f4					greet
.3904f4	48		pha		                PHA             ; begin setdbr macro
.3904f5	08		php		                PHP
.3904f6	e2 20		sep #$20	                SEP #$20        ; set A short
.3904f8	a9 39		lda #$39	                LDA #`greet_msg
.3904fa	48		pha		                PHA
.3904fb	ab		plb		                PLB
.3904fc	28		plp		                PLP
.3904fd	68		pla		                PLA             ; end setdbr macro
.3904fe	a2 f7 57	ldx #$57f7	                LDX #<>greet_msg
.390501	22 47 06 39	jsl $390647	                JSL IPRINT       ; print the first line
.390505	22 81 09 39	jsl $390981	                JSL ICOLORFLAG  ; This is to set the Color Memory for the Logo
.390509	48		pha		                PHA             ; begin setdp macro
.39050a	08		php		                PHP
.39050b	c2 20		rep #$20	                REP #$20        ; set A long
.39050d	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390510	5b		tcd		                TCD
.390511	28		plp		                PLP
.390512	68		pla		                PLA             ; end setdp macro
.390513	22 b4 10 38	jsl $3810b4	                JSL INITKEYBOARD ;
.390517	e2 20		sep #$20	                SEP #$20        ; set A short
.390519	c2 10		rep #$10	                REP #$10        ; set X long
.39051b	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.39051d	8f 00 f1 af	sta $aff100	                STA $AFF100
.390521	a9 bf		lda #$bf	                LDA #$BF ; Channel Two - No Atteniation
.390523	8f 00 f1 af	sta $aff100	                STA $AFF100
.390527	a9 df		lda #$df	                LDA #$DF ; Channel Two - No Atteniation
.390529	8f 00 f1 af	sta $aff100	                STA $AFF100
.39052d	a9 ff		lda #$ff	                LDA #$FF ; Channel Two - No Atteniation
.39052f	8f 00 f1 af	sta $aff100	                STA $AFF100
.390533	a9 83		lda #$83	                LDA #$83 ; Channel Zero - No Atteniation
.390535	8f 00 f1 af	sta $aff100	                STA $AFF100
.390539	a9 12		lda #$12	                LDA #$12 ; Channel Zero - No Atteniation
.39053b	8f 00 f1 af	sta $aff100	                STA $AFF100
.39053f	a9 90		lda #$90	                LDA #$90 ; Channel One - No Atteniation
.390541	8f 00 f1 af	sta $aff100	                STA $AFF100
.390545	a2 00 40	ldx #$4000	                LDX #16384      ; 400ms
.390548	22 f3 12 39	jsl $3912f3	          		 	JSL ILOOP_MS
.39054c	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.39054e	8f 00 f1 af	sta $aff100	                STA $AFF100
.390552	58		cli		                CLI                   ; Make sure no Interrupt will come and fuck up Init before this point.
.390553	e2 20		sep #$20	                SEP #$20        ; set A short
.390555	c2 10		rep #$10	                REP #$10        ; set X long
.390557	48		pha		                PHA             ; begin setdbr macro
.390558	08		php		                PHP
.390559	e2 20		sep #$20	                SEP #$20        ; set A short
.39055b	a9 39		lda #$39	                LDA #`greet_msg
.39055d	48		pha		                PHA
.39055e	ab		plb		                PLB
.39055f	28		plp		                PLP
.390560	68		pla		                PLA             ; end setdbr macro
.390561	af 0e e8 af	lda $afe80e	                LDA @lDIP_BOOTMODE    ; {HD_INSTALLED, 5'b0_0000, BOOT_MODE[1], BOOT_MODE[0]}
.390565	29 03		and #$03	                AND #%00000011        ; Look at the mode bits
.390567	c9 00		cmp #$00	                CMP #DIP_BOOT_IDE     ; DIP set for IDE?
.390569	f0 29		beq $390594	                BEQ BOOTIDE           ; Yes: Boot from the IDE
.39056b	c9 01		cmp #$01	                CMP #DIP_BOOT_SDCARD  ; DIP set for SD card?
.39056d	f0 20		beq $39058f	                BEQ BOOTSDC           ; Yes: try to boot from the SD card
.39056f	c9 02		cmp #$02	                CMP #DIP_BOOT_FLOPPY  ; DIP set for floppy?
.390571	f0 26		beq $390599	                BEQ BOOTFLOPPY        ; Yes: try to boot from the floppy
.390573	a2 00 00	ldx #$0000	BOOTBASIC       LDX #0
.390576	bf 00 10 38	lda $381000,x	jmpcopy         LDA $381000,X
.39057a	9f 00 10 00	sta $001000,x	                STA $001000,X
.39057e	e8		inx		                INX
.39057f	e0 00 04	cpx #$0400	                CPX #1024
.390582	d0 f2		bne $390576	                BNE jmpcopy
.390584	22 a4 51 39	jsl $3951a4	                JSL FDC_Init
.390588	5c 00 00 3a	jmp $3a0000	                JML BASIC             ; Cold start of the BASIC interpreter (or its replacement)
.39058c	ea		nop		CREDIT_LOCK     NOP
.39058d	80 fd		bra $39058c	                BRA CREDIT_LOCK
.39058f					BOOTSDC
.39058f	a2 ac 5b	ldx #$5bac	                LDX #<>sdcard_notimpl ; Print a message saying SD card booting is not implemented
.390592	80 08		bra $39059c	                BRA PR_BOOT_ERROR
.390594					BOOTIDE
.390594	a2 d9 5b	ldx #$5bd9	                LDX #<>ide_notimpl    ; Print a message saying SD card booting is not implemented
.390597	80 03		bra $39059c	                BRA PR_BOOT_ERROR
.390599					BOOTFLOPPY
.390599	a2 08 5c	ldx #$5c08	                LDX #<>floppy_notimpl ; Print a message saying SD card booting is not implemented
.39059c	22 47 06 39	jsl $390647	PR_BOOT_ERROR   JSL IPRINT
.3905a0	ea		nop		LOOP_FOREVER    NOP
.3905a1	80 fd		bra $3905a0	                BRA LOOP_FOREVER
.3905a3					IBREAK
.3905a3	48		pha		                PHA             ; begin setdp macro
.3905a4	08		php		                PHP
.3905a5	c2 20		rep #$20	                REP #$20        ; set A long
.3905a7	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3905aa	5b		tcd		                TCD
.3905ab	28		plp		                PLP
.3905ac	68		pla		                PLA             ; end setdp macro
.3905ad	68		pla		                PLA             ; Pull .Y and stuff it in the CPUY variable
.3905ae	8f 48 02 00	sta $000248	                STA CPUY
.3905b2	68		pla		                PLA             ; Pull .X and stuff it in the CPUY variable
.3905b3	8f 46 02 00	sta $000246	                STA CPUX
.3905b7	68		pla		                PLA             ; Pull .A and stuff it in the CPUY variable
.3905b8	8f 44 02 00	sta $000244	                STA CPUA
.3905bc	68		pla		                PLA
.3905bd	8f 4c 02 00	sta $00024c	                STA CPUDP       ; Pull Direct page
.3905c1	e2 20		sep #$20	                SEP #$20        ; set A short
.3905c3	68		pla		                PLA             ; Pull Data Bank (8 bits)
.3905c4	8f 4e 02 00	sta $00024e	                STA CPUDBR
.3905c8	68		pla		                PLA             ; Pull Flags (8 bits)
.3905c9	8f 4f 02 00	sta $00024f	                STA CPUFLAGS
.3905cd	c2 20		rep #$20	                REP #$20        ; set A long
.3905cf	68		pla		                PLA             ; Pull Program Counter (16 bits)
.3905d0	8f 40 02 00	sta $000240	                STA CPUPC
.3905d4	e2 20		sep #$20	                SEP #$20        ; set A short
.3905d6	68		pla		                PLA             ; Pull Program Bank (8 bits)
.3905d7	8f 42 02 00	sta $000242	                STA CPUPBR
.3905db	c2 20		rep #$20	                REP #$20        ; set A long
.3905dd	3b		tsc		                TSA             ; Get the stack
.3905de	8f 4a 02 00	sta $00024a	                STA CPUSTACK    ; Store the stack at immediately before the interrupt was asserted
.3905e2	a9 ff fe	lda #$feff	                LDA #<>STACK_END   ; initialize stack pointer back to the bootup value
.3905e5	1b		tcs		                TAS
.3905e6	5c 04 00 3a	jmp $3a0004	                JML MONITOR
.3905ea					IREADY
.3905ea	48		pha		                PHA             ; begin setdbr macro
.3905eb	08		php		                PHP
.3905ec	e2 20		sep #$20	                SEP #$20        ; set A short
.3905ee	a9 39		lda #$39	                LDA #`ready_msg
.3905f0	48		pha		                PHA
.3905f1	ab		plb		                PLB
.3905f2	28		plp		                PLP
.3905f3	68		pla		                PLA             ; end setdbr macro
.3905f4	e2 20		sep #$20	                SEP #$20        ; set A short
.3905f6	a2 3a 5c	ldx #$5c3a	                LDX #<>ready_msg
.3905f9	22 47 06 39	jsl $390647	                JSL IPRINT
.3905fd					IREADYWAIT
.3905fd	22 17 06 39	jsl $390617	                JSL IGETCHE
.390601	80 fa		bra $3905fd	                BRA IREADYWAIT
.390603	db		stp		IKEYDOWN        STP             ; Keyboard key pressed
.390604	db		stp		IRETURN         STP
.390605	08		php		ISETIN          PHP
.390606	e2 20		sep #$20	                SEP #$20        ; set A short
.390608	8f 04 07 00	sta $000704	                STA @lCHAN_IN   ; Save the channel number
.39060c	28		plp		                PLP
.39060d	6b		rtl		                RTL
.39060e	08		php		ISETOUT         PHP
.39060f	e2 20		sep #$20	                SEP #$20        ; set A short
.390611	8f 03 07 00	sta $000703	                STA @lCHAN_OUT  ; Save the channel number
.390615	28		plp		                PLP
.390616	6b		rtl		                RTL
.390617	22 20 06 39	jsl $390620	IGETCHE         JSL IGETCHW
.39061b	22 67 06 39	jsl $390667	                JSL IPUTC
.39061f	6b		rtl		                RTL
.390620					IGETCHW
.390620	08		php		                PHP
.390621	e2 20		sep #$20	                SEP #$20        ; set A short
.390623	af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.390627	f0 17		beq $390640	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.390629	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.39062b	f0 09		beq $390636	                BEQ getc_uart       ; Yes: handle reading from the UART
.39062d	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.39062f	f0 05		beq $390636	                BEQ getc_uart       ; Yes: handle reading from the UART
.390631	a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.390633	28		plp		                PLP
.390634	38		sec		                SEC                 ; And return carry set
.390635	6b		rtl		                RTL
.390636	22 8a 4e 39	jsl $394e8a	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.39063a	22 3e 4f 39	jsl $394f3e	                JSL UART_GETC       ; Get the charater from the COM port
.39063e	80 04		bra $390644	                BRA done
.390640	22 3b 14 38	jsl $38143b	getc_keyboard   JSL KBD_GETC        ; Get the character from the keyboard
.390644	28		plp		done            PLP
.390645	18		clc		                CLC                 ; Return carry clear for valid data
.390646	6b		rtl		                RTL
.390647	22 50 06 39	jsl $390650	IPRINT          JSL IPUTS
.39064b	22 8d 07 39	jsl $39078d	                JSL IPRINTCR
.39064f	6b		rtl		                RTL
.390650	48		pha		IPUTS           PHA
.390651	08		php		                PHP
.390652	e2 20		sep #$20	                SEP #$20        ; set A short
.390654	c2 10		rep #$10	                REP #$10        ; set X long
.390656	bd 00 00	lda $390000,x	iputs1          LDA $0,b,x      ; read from the string
.390659	f0 08		beq $390663	                BEQ iputs_done
.39065b	22 67 06 39	jsl $390667	iputs2          JSL IPUTC
.39065f	e8		inx		iputs3          INX
.390660	4c 56 06	jmp $390656	                JMP iputs1
.390663	e8		inx		iputs_done      INX
.390664	28		plp		                PLP
.390665	68		pla		                PLA
.390666	6b		rtl		                RTL
.390667					IPUTC
.390667	da		phx		                PHX
.390668	5a		phy		                PHY
.390669	0b		phd		                PHD
.39066a	8b		phb		                PHB
.39066b	08		php		                PHP                 ; stash the flags (we'll be changing M)
.39066c	48		pha		                PHA             ; begin setdp macro
.39066d	08		php		                PHP
.39066e	c2 20		rep #$20	                REP #$20        ; set A long
.390670	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390673	5b		tcd		                TCD
.390674	28		plp		                PLP
.390675	68		pla		                PLA             ; end setdp macro
.390676	48		pha		                PHA             ; begin setdbr macro
.390677	08		php		                PHP
.390678	e2 20		sep #$20	                SEP #$20        ; set A short
.39067a	a9 00		lda #$00	                LDA #0
.39067c	48		pha		                PHA
.39067d	ab		plb		                PLB
.39067e	28		plp		                PLP
.39067f	68		pla		                PLA             ; end setdbr macro
.390680	e2 20		sep #$20	                SEP #$20        ; set A short
.390682	c2 10		rep #$10	                REP #$10        ; set X long
.390684	48		pha		                PHA                 ; Save the character to print
.390685	af 03 07 00	lda $000703	                LDA @lCHAN_OUT      ; Check the output channel #
.390689	f0 16		beq $3906a1	                BEQ putc_screen     ; If it's 0: print to the screen
.39068b	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.39068d	f0 07		beq $390696	                BEQ putc_uart       ; Yes: handle printing to the UART
.39068f	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.390691	f0 03		beq $390696	                BEQ putc_uart       ; Yes: handle printing to the UART
.390693	68		pla		                PLA                 ; Otherwise, just exit
.390694	80 4f		bra $3906e5	                BRA done
.390696	22 8a 4e 39	jsl $394e8a	putc_uart       JSL UART_SELECT     ; Point to the correct UART
.39069a	68		pla		                PLA                 ; Recover the character to send
.39069b	22 5f 4f 39	jsl $394f5f	                JSL UART_PUTC       ; Send the character
.39069f	80 44		bra $3906e5	                BRA done
.3906a1	68		pla		putc_screen     PLA                 ; Get the character to print
.3906a2	c9 0a		cmp #$0a	                CMP #CHAR_LF        ; Linefeed moves cursor down one line
.3906a4	f0 61		beq $390707	                BEQ go_down
.3906a6	c9 20		cmp #$20	                CMP #$20
.3906a8	90 19		bcc $3906c3	                BCC check_ctrl0     ; [$00..$1F]: check for arrows
.3906aa	c9 7f		cmp #$7f	                CMP #$7F
.3906ac	f0 3d		beq $3906eb	                BEQ do_del
.3906ae	b0 02		bcs $3906b2	                BCS check_A0        ; [$20..$7E]: print it
.3906b0	80 29		bra $3906db	                BRA printc
.3906b2	c9 a0		cmp #$a0	check_A0        CMP #$A0
.3906b4	90 02		bcc $3906b8	                BCC check_ctrl1
.3906b6	80 23		bra $3906db	                BRA printc          ; [$A0..$FF]: print it
.3906b8	c9 91		cmp #$91	check_ctrl1     CMP #CHAR_DOWN      ; If the down arrow key was pressed
.3906ba	f0 4b		beq $390707	                BEQ go_down         ; ... move the cursor down one row
.3906bc	c9 9d		cmp #$9d	                CMP #CHAR_LEFT      ; If the left arrow key was pressed
.3906be	f0 59		beq $390719	                BEQ go_left         ; ... move the cursor left one column
.3906c0	4c e5 06	jmp $3906e5	                JMP done
.3906c3	c9 09		cmp #$09	check_ctrl0     CMP #CHAR_TAB       ; If it's a TAB...
.3906c5	f0 58		beq $39071f	                BEQ do_TAB          ; ... move to the next TAB stop
.3906c7	c9 08		cmp #$08	                CMP #CHAR_BS        ; If it's a backspace...
.3906c9	f0 2c		beq $3906f7	                BEQ backspace       ; ... move the cursor back and replace with a space
.3906cb	c9 0d		cmp #$0d	                CMP #CHAR_CR        ; If the carriage return was pressed
.3906cd	f0 32		beq $390701	                BEQ do_cr           ; ... move cursor down and to the first column
.3906cf	c9 11		cmp #$11	                CMP #CHAR_UP        ; If the up arrow key was pressed
.3906d1	f0 3a		beq $39070d	                BEQ go_up           ; ... move the cursor up one row
.3906d3	c9 1d		cmp #$1d	                CMP #CHAR_RIGHT     ; If the right arrow key was pressed
.3906d5	f0 3c		beq $390713	                BEQ go_right        ; ... move the cursor right one column
.3906d7	c9 0f		cmp #$0f	                CMP #CHAR_INS       ; If the insert key was pressed
.3906d9	f0 16		beq $3906f1	                BEQ do_ins          ; ... insert a space
.3906db	87 17		sta [$17]	printc          STA [CURSORPOS]     ; Save the character on the screen
.3906dd	a5 1e		lda $1e		                LDA CURCOLOR        ; Set the color based on CURCOLOR
.3906df	87 1f		sta [$1f]	                STA [COLORPOS]
.3906e1	22 d3 07 39	jsl $3907d3	                JSL ICSRRIGHT       ; And advance the cursor
.3906e5	28		plp		done            PLP
.3906e6	ab		plb		                PLB
.3906e7	2b		pld		                PLD
.3906e8	7a		ply		                PLY
.3906e9	fa		plx		                PLX
.3906ea	6b		rtl		                RTL
.3906eb	22 46 07 39	jsl $390746	do_del          JSL SCRSHIFTLL      ; Shift the current line left one space into the cursor
.3906ef	80 f4		bra $3906e5	                BRA done
.3906f1	22 69 07 39	jsl $390769	do_ins          JSL SCRSHIFTLR      ; Shift the current line right one space from the cursor
.3906f5	80 ee		bra $3906e5	                BRA done
.3906f7	22 06 08 39	jsl $390806	backspace       JSL ICSRLEFT
.3906fb	22 46 07 39	jsl $390746	                JSL SCRSHIFTLL      ; Shift the current line left one space into the cursor
.3906ff	80 e4		bra $3906e5	                BRA done
.390701	22 8d 07 39	jsl $39078d	do_cr           JSL IPRINTCR        ; Move the cursor to the beginning of the next line
.390705	80 de		bra $3906e5	                BRA done
.390707	22 52 08 39	jsl $390852	go_down         JSL ICSRDOWN        ; Move the cursor down one row (might force a scroll)
.39070b	80 d8		bra $3906e5	                BRA done
.39070d	22 2c 08 39	jsl $39082c	go_up           JSL ICSRUP          ; Move the cursor up one line
.390711	80 d2		bra $3906e5	                BRA done
.390713	22 d3 07 39	jsl $3907d3	go_right        JSL ICSRRIGHT       ; Move the cursor right one column
.390717	80 cc		bra $3906e5	                BRA done
.390719	22 06 08 39	jsl $390806	go_left         JSL ICSRLEFT        ; Move the cursor left one column
.39071d	80 c6		bra $3906e5	                BRA done
.39071f					do_TAB
.39071f	c2 20		rep #$20	                REP #$20        ; set A long
.390721	a5 1a		lda $1a		                LDA CURSORX         ; Get the current column
.390723	29 f8 ff	and #$fff8	                AND #$FFF8          ; See which group of 8 it's in
.390726	18		clc		                CLC
.390727	69 08 00	adc #$0008	                ADC #$0008          ; And move it to the next one
.39072a	aa		tax		                TAX
.39072b	a4 1c		ldy $1c		                LDY CURSORY
.39072d	e2 20		sep #$20	                SEP #$20        ; set A short
.39072f	e4 0f		cpx $0f		set_xy          CPX COLS_VISIBLE    ; Check if we're still on screen horizontally
.390731	90 04		bcc $390737	                BCC check_row       ; Yes: check the row
.390733	a2 00 00	ldx #$0000	                LDX #0              ; No: move to the first column...
.390736	c8		iny		                INY                 ; ... and the next row
.390737	c4 13		cpy $13		check_row       CPY LINES_VISIBLE   ; Check if we're still on the screen vertically
.390739	90 05		bcc $390740	                BCC do_locate       ; Yes: reposition the cursor
.39073b	22 c3 08 39	jsl $3908c3	                JSL ISCROLLUP       ; No: scroll the screen
.39073f	88		dey		                DEY                 ; And set the row to the last one
.390740	22 77 08 39	jsl $390877	do_locate       JSL ILOCATE         ; Set the cursor position
.390744	80 9f		bra $3906e5	                BRA done
.390746	da		phx		SCRSHIFTLL      PHX
.390747	5a		phy		                PHY
.390748	48		pha		                PHA
.390749	08		php		                PHP
.39074a	48		pha		                PHA             ; begin setdp macro
.39074b	08		php		                PHP
.39074c	c2 20		rep #$20	                REP #$20        ; set A long
.39074e	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390751	5b		tcd		                TCD
.390752	28		plp		                PLP
.390753	68		pla		                PLA             ; end setdp macro
.390754	c2 30		rep #$30	                REP #$30        ; set A&X long
.390756	a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.390758	a8		tay		                TAY                 ; Set it as the destination
.390759	aa		tax		                TAX
.39075a	e8		inx		                INX                 ; And set the next cell as the source
.39075b	38		sec		                SEC                 ; Calculate the length of the block to move
.39075c	a9 7f 00	lda #$007f	                LDA #127            ; as 127 - X
.39075f	e5 1a		sbc $1a		                SBC CURSORX
.390761	54 af af	mvn $af,$af	                MVN $AF, $AF        ; And move the block
.390764	28		plp		                PLP
.390765	68		pla		                PLA
.390766	7a		ply		                PLY
.390767	fa		plx		                PLX
.390768	6b		rtl		                RTL
.390769	da		phx		SCRSHIFTLR      PHX
.39076a	48		pha		                PHA
.39076b	08		php		                PHP
.39076c	c2 30		rep #$30	                REP #$30        ; set A&X long
.39076e	a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.390770	29 80 ff	and #$ff80	                AND #$FF80          ; Mask off the column bits
.390773	09 7f 00	ora #$007f	                ORA #$007F          ; And compute the address of the last cell
.390776	a8		tay		                TAY                 ; And set that as the destination address
.390777	3a		dec a		                DEC A               ; Compute the address of the character to the left
.390778	aa		tax		                TAX                 ; And make it the source
.390779	38		sec		                SEC                 ; Calculate the length of the block to move
.39077a	a9 7f 00	lda #$007f	                LDA #127            ; as 127 - X
.39077d	e5 1a		sbc $1a		                SBC CURSORX
.39077f	44 af af	mvp $af,$af	                MVP $AF, $AF        ; And move the block
.390782	e2 20		sep #$20	                SEP #$20        ; set A short
.390784	a9 20		lda #$20	                LDA #CHAR_SP        ; Put a blank space at the cursor position
.390786	87 17		sta [$17]	                STA [CURSORPOS]
.390788	28		plp		                PLP
.390789	68		pla		                PLA
.39078a	fa		plx		                PLX
.39078b	6b		rtl		                RTL
.39078c					IPUTB
.39078c	6b		rtl		                RTL
.39078d					IPRINTCR
.39078d	da		phx		                PHX
.39078e	5a		phy		                PHY
.39078f	08		php		                PHP
.390790	e2 20		sep #$20	                SEP #$20        ; set A short
.390792	af 03 07 00	lda $000703	                LDA @lCHAN_OUT
.390796	f0 1c		beq $3907b4	                BEQ scr_printcr
.390798	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.39079a	f0 06		beq $3907a2	                BEQ uart_printcr    ; Yes: handle printing to the UART
.39079c	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.39079e	f0 02		beq $3907a2	                BEQ uart_printcr    ; Yes: handle printing to the UART
.3907a0	80 1c		bra $3907be	                BRA done
.3907a2	22 8a 4e 39	jsl $394e8a	uart_printcr    JSL UART_SELECT
.3907a6	a9 0d		lda #$0d	                LDA #CHAR_CR
.3907a8	22 67 06 39	jsl $390667	                JSL IPUTC
.3907ac	a9 0a		lda #$0a	                LDA #CHAR_LF
.3907ae	22 67 06 39	jsl $390667	                JSL IPUTC
.3907b2	80 0a		bra $3907be	                BRA done
.3907b4	a2 00 00	ldx #$0000	scr_printcr     LDX #0
.3907b7	a4 1c		ldy $1c		                LDY CURSORY
.3907b9	c8		iny		                INY
.3907ba	22 77 08 39	jsl $390877	                JSL ILOCATE
.3907be	28		plp		done            PLP
.3907bf	7a		ply		                PLY
.3907c0	fa		plx		                PLX
.3907c1	6b		rtl		                RTL
.3907c2	da		phx		ICSRHOME        PHX
.3907c3	5a		phy		                PHY
.3907c4	08		php		                PHP
.3907c5	a2 00 00	ldx #$0000	                LDX #0
.3907c8	a0 00 00	ldy #$0000	                LDY #0
.3907cb	22 77 08 39	jsl $390877	                JSL ILOCATE
.3907cf	28		plp		                PLP
.3907d0	7a		ply		                PLY
.3907d1	fa		plx		                PLX
.3907d2	6b		rtl		                RTL
.3907d3	da		phx		ICSRRIGHT       PHX
.3907d4	5a		phy		                PHY
.3907d5	48		pha		                PHA
.3907d6	0b		phd		                PHD
.3907d7	08		php		                PHP
.3907d8	c2 20		rep #$20	                REP #$20        ; set A long
.3907da	c2 10		rep #$10	                REP #$10        ; set X long
.3907dc	48		pha		                PHA             ; begin setdp macro
.3907dd	08		php		                PHP
.3907de	c2 20		rep #$20	                REP #$20        ; set A long
.3907e0	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.3907e3	5b		tcd		                TCD
.3907e4	28		plp		                PLP
.3907e5	68		pla		                PLA             ; end setdp macro
.3907e6	a6 1a		ldx $1a		                LDX CURSORX           ; Get the new column
.3907e8	e8		inx		                INX
.3907e9	a4 1c		ldy $1c		                LDY CURSORY           ; Get the current row
.3907eb	e4 0f		cpx $0f		                CPX COLS_VISIBLE      ; Are we off screen?
.3907ed	90 0d		bcc $3907fc	                BCC icsrright_nowrap  ; No: just set the position
.3907ef	a2 00 00	ldx #$0000	                LDX #0                ; Yes: move to the first column
.3907f2	c8		iny		                INY                   ; And move to the next row
.3907f3	c4 13		cpy $13		                CPY LINES_VISIBLE     ; Are we still off screen?
.3907f5	90 05		bcc $3907fc	                BCC icsrright_nowrap  ; No: just set the position
.3907f7	88		dey		                DEY                   ; Yes: lock to the last row
.3907f8	22 c3 08 39	jsl $3908c3	                JSL ISCROLLUP         ; But scroll the screen up
.3907fc					icsrright_nowrap
.3907fc	22 77 08 39	jsl $390877	                JSL ILOCATE           ; Set the cursor position
.390800	28		plp		                PLP
.390801	2b		pld		                PLD
.390802	68		pla		                PLA
.390803	7a		ply		                PLY
.390804	fa		plx		                PLX
.390805	6b		rtl		                RTL
.390806					ICSRLEFT
.390806	da		phx		                PHX
.390807	5a		phy		                PHY
.390808	48		pha		                PHA
.390809	0b		phd		                PHD
.39080a	08		php		                PHP
.39080b	c2 30		rep #$30	                REP #$30        ; set A&X long
.39080d	48		pha		                PHA             ; begin setdp macro
.39080e	08		php		                PHP
.39080f	c2 20		rep #$20	                REP #$20        ; set A long
.390811	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.390814	5b		tcd		                TCD
.390815	28		plp		                PLP
.390816	68		pla		                PLA             ; end setdp macro
.390817	a5 1a		lda $1a		                LDA CURSORX
.390819	f0 0b		beq $390826	                BEQ icsrleft_done_already_zero ; Check that we are not already @ Zero
.39081b	a6 1a		ldx $1a		                LDX CURSORX
.39081d	ca		dex		                DEX
.39081e	86 1a		stx $1a		                STX CURSORX
.390820	a4 1c		ldy $1c		                LDY CURSORY
.390822	22 77 08 39	jsl $390877	                JSL ILOCATE
.390826					icsrleft_done_already_zero
.390826	28		plp		                PLP
.390827	2b		pld		                PLD
.390828	68		pla		                PLA
.390829	7a		ply		                PLY
.39082a	fa		plx		                PLX
.39082b	6b		rtl		                RTL
.39082c					ICSRUP
.39082c	da		phx		                PHX
.39082d	5a		phy		                PHY
.39082e	48		pha		                PHA
.39082f	0b		phd		                PHD
.390830	08		php		                PHP
.390831	c2 30		rep #$30	                REP #$30        ; set A&X long
.390833	48		pha		                PHA             ; begin setdp macro
.390834	08		php		                PHP
.390835	c2 20		rep #$20	                REP #$20        ; set A long
.390837	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.39083a	5b		tcd		                TCD
.39083b	28		plp		                PLP
.39083c	68		pla		                PLA             ; end setdp macro
.39083d	a5 1c		lda $1c		                LDA CURSORY
.39083f	f0 0b		beq $39084c	                BEQ isrup_done_already_zero ; Check if we are not already @ Zero
.390841	a4 1c		ldy $1c		                LDY CURSORY
.390843	88		dey		                DEY
.390844	84 1c		sty $1c		                STY CURSORY
.390846	a6 1a		ldx $1a		                LDX CURSORX
.390848	22 77 08 39	jsl $390877	                JSL ILOCATE
.39084c					isrup_done_already_zero
.39084c	28		plp		                PLP
.39084d	2b		pld		                PLD
.39084e	68		pla		                PLA
.39084f	7a		ply		                PLY
.390850	fa		plx		                PLX
.390851	6b		rtl		                RTL
.390852	da		phx		ICSRDOWN        PHX
.390853	5a		phy		                PHY
.390854	0b		phd		                PHD
.390855	c2 30		rep #$30	                REP #$30        ; set A&X long
.390857	48		pha		                PHA             ; begin setdp macro
.390858	08		php		                PHP
.390859	c2 20		rep #$20	                REP #$20        ; set A long
.39085b	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.39085e	5b		tcd		                TCD
.39085f	28		plp		                PLP
.390860	68		pla		                PLA             ; end setdp macro
.390861	a6 1a		ldx $1a		                LDX CURSORX                 ; Get the current column
.390863	a4 1c		ldy $1c		                LDY CURSORY                 ; Get the new row
.390865	c8		iny		                INY
.390866	c4 13		cpy $13		                CPY LINES_VISIBLE           ; Check to see if we're off screen
.390868	90 05		bcc $39086f	                BCC icsrdown_noscroll       ; No: go ahead and set the position
.39086a	88		dey		                DEY                         ; Yes: go back to the last row
.39086b	22 c3 08 39	jsl $3908c3	                JSL ISCROLLUP               ; But scroll the screen up
.39086f					icsrdown_noscroll
.39086f	22 77 08 39	jsl $390877	                JSL ILOCATE                 ; And set the cursor position
.390873	2b		pld		                PLD
.390874	7a		ply		                PLY
.390875	fa		plx		                PLX
.390876	6b		rtl		                RTL
.390877	48		pha		ILOCATE         PHA
.390878	0b		phd		                PHD
.390879	08		php		                PHP
.39087a	48		pha		                PHA             ; begin setdp macro
.39087b	08		php		                PHP
.39087c	c2 20		rep #$20	                REP #$20        ; set A long
.39087e	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390881	5b		tcd		                TCD
.390882	28		plp		                PLP
.390883	68		pla		                PLA             ; end setdp macro
.390884	c2 30		rep #$30	                REP #$30        ; set A&X long
.390886					ilocate_scroll
.390886	c4 13		cpy $13		                CPY LINES_VISIBLE
.390888	90 07		bcc $390891	                BCC ilocate_scrolldone
.39088a	22 c3 08 39	jsl $3908c3	                JSL ISCROLLUP
.39088e	88		dey		                DEY
.39088f	80 f5		bra $390886	                BRA ilocate_scroll
.390891					ilocate_scrolldone
.390891	86 1a		stx $1a		                STX CURSORX
.390893	84 1c		sty $1c		                STY CURSORY
.390895	a5 0c		lda $0c		                LDA SCREENBEGIN
.390897					ilocate_row
.390897	c0 00 00	cpy #$0000	                CPY #$0
.39089a	f0 08		beq $3908a4	                BEQ ilocate_right
.39089c	18		clc		ilocate_down    CLC
.39089d	65 11		adc $11		                ADC COLS_PER_LINE
.39089f	88		dey		                DEY
.3908a0	f0 02		beq $3908a4	                BEQ ilocate_right
.3908a2	80 f8		bra $39089c	                BRA ilocate_down
.3908a4	18		clc		ilocate_right   CLC
.3908a5	65 1a		adc $1a		                ADC CURSORX             ; move the cursor right X columns
.3908a7	85 17		sta $17		                STA CURSORPOS
.3908a9	a4 1c		ldy $1c		                LDY CURSORY
.3908ab	98		tya		                TYA
.3908ac	8f 16 00 af	sta $af0016	                STA @lVKY_TXT_CURSOR_Y_REG_L  ;Store in Vicky's registers
.3908b0	8a		txa		                TXA
.3908b1	8f 14 00 af	sta $af0014	                STA @lVKY_TXT_CURSOR_X_REG_L  ;Store in Vicky's register
.3908b5	c2 20		rep #$20	                REP #$20        ; set A long
.3908b7	18		clc		                CLC
.3908b8	a5 17		lda $17		                LDA CURSORPOS
.3908ba	69 00 20	adc #$2000	                ADC #<>(CS_COLOR_MEM_PTR - CS_TEXT_MEM_PTR)
.3908bd	85 1f		sta $1f		                STA COLORPOS
.3908bf	28		plp		ilocate_done    PLP
.3908c0	2b		pld		                PLD
.3908c1	68		pla		                PLA
.3908c2	6b		rtl		                RTL
.3908c3					ISCROLLUP
.3908c3	48		pha		                PHA
.3908c4	da		phx		                PHX
.3908c5	5a		phy		                PHY
.3908c6	8b		phb		                PHB
.3908c7	08		php		                PHP
.3908c8	c2 30		rep #$30	                REP #$30        ; set A&X long
.3908ca	18		clc		                CLC
.3908cb	a0 00 a0	ldy #$a000	                LDY #$A000
.3908ce	a2 80 a0	ldx #$a080	                LDX #$A080
.3908d1	a9 7f 1f	lda #$1f7f	                LDA #128 * 63 - 1
.3908d4	54 af af	mvn $af,$af	                MVN $AF,$AF
.3908d7	c2 30		rep #$30	                REP #$30        ; set A&X long
.3908d9	a0 00 c0	ldy #$c000	                LDY #$C000
.3908dc	a2 80 c0	ldx #$c080	                LDX #$C080
.3908df	a9 7f 1f	lda #$1f7f	                LDA #128 * 63 - 1
.3908e2	54 af af	mvn $af,$af	                MVN $AF,$AF
.3908e5	28		plp		                PLP
.3908e6	ab		plb		                PLB
.3908e7	7a		ply		                PLY
.3908e8	fa		plx		                PLX
.3908e9	68		pla		                PLA
.3908ea	6b		rtl		                RTL
.3908eb	08		php		IPRINTH         PHP
.3908ec	48		pha		                PHA
.3908ed					iprinth1
.3908ed	e2 20		sep #$20	                SEP #$20        ; set A short
.3908ef	bd 00 00	lda $0000,x	                LDA #0,b,x      ; Read the value to be printed
.3908f2	4a		lsr a		                LSR
.3908f3	4a		lsr a		                LSR
.3908f4	4a		lsr a		                LSR
.3908f5	4a		lsr a		                LSR
.3908f6	22 45 09 39	jsl $390945	                JSL iprint_digit
.3908fa	bd 00 00	lda $0000,x	                LDA #0,b,x
.3908fd	22 45 09 39	jsl $390945	                JSL iprint_digit
.390901	ca		dex		                DEX
.390902	88		dey		                DEY
.390903	d0 e8		bne $3908ed	                BNE iprinth1
.390905	68		pla		                PLA
.390906	28		plp		                PLP
.390907	6b		rtl		                RTL
.390908					IPRINTAH
.390908	48		pha		                PHA
.390909	08		php		                PHP
.39090a	8f 44 02 00	sta $000244	                STA @lCPUA            ; Save A where we can use it multiple times
.39090e	08		php		                PHP                   ; Get the processor status into A
.39090f	e2 20		sep #$20	                SEP #$20        ; set A short
.390911	c2 10		rep #$10	                REP #$10        ; set X long
.390913	68		pla		                PLA
.390914	29 20		and #$20	                AND #%00100000        ; Is M = 1?
.390916	c9 20		cmp #$20	                CMP #%00100000
.390918	f0 14		beq $39092e	                BEQ eight_bit
.39091a	af 46 02 00	lda $000246	                LDA @lCPUA+2          ; Get nibble [15..12]
.39091e	4a		lsr a		                LSR A
.39091f	4a		lsr a		                LSR A
.390920	4a		lsr a		                LSR A
.390921	4a		lsr a		                LSR A
.390922	22 45 09 39	jsl $390945	                JSL iprint_digit      ; And print it
.390926	af 46 02 00	lda $000246	                LDA @lCPUA+2          ; Get nibble [11..8]
.39092a	22 45 09 39	jsl $390945	                JSL iprint_digit      ; And print it
.39092e	af 44 02 00	lda $000244	eight_bit       LDA @lCPUA            ; Get nibble [7..4]
.390932	4a		lsr a		                LSR A
.390933	4a		lsr a		                LSR A
.390934	4a		lsr a		                LSR A
.390935	4a		lsr a		                LSR A
.390936	22 45 09 39	jsl $390945	                JSL iprint_digit      ; And print it
.39093a	af 44 02 00	lda $000244	                LDA @lCPUA            ; Get nibble [3..0]
.39093e	22 45 09 39	jsl $390945	                JSL iprint_digit      ; And print it
.390942	28		plp		                PLP
.390943	68		pla		                PLA
.390944	6b		rtl		                RTL
.390945	da		phx		iprint_digit    PHX
.390946	c2 20		rep #$20	                REP #$20        ; set A long
.390948	29 0f 00	and #$000f	                AND #$0F
.39094b	aa		tax		                TAX
.39094c	bf 4e 5c 39	lda $395c4e,x	                LDA hex_digits,X
.390950	22 67 06 39	jsl $390667	                JSL IPUTC       ; Print the digit
.390954	fa		plx		                PLX
.390955	6b		rtl		                RTL
.390956	48		pha		ICLRSCREEN	    PHA
.390957	da		phx		                PHX
.390958	08		php		                PHP
.390959	e2 20		sep #$20	                SEP #$20        ; set A short
.39095b	c2 10		rep #$10	                REP #$10        ; set X long
.39095d	a2 00 00	ldx #$0000	                LDX #$0000		          ; Only Use One Pointer
.390960	a9 20		lda #$20	                LDA #$20		            ; Fill the Entire Screen with Space
.390962	9f 00 a0 af	sta $afa000,x	iclearloop0	    STA CS_TEXT_MEM_PTR, x	;
.390966	e8		inx		                inx
.390967	e0 00 20	cpx #$2000	                cpx #$2000
.39096a	d0 f6		bne $390962	                bne iclearloop0
.39096c	a2 00 00	ldx #$0000	                LDX	#$0000		          ; Only Use One Pointer
.39096f	af 1e 00 00	lda $00001e	                LDA @lCURCOLOR          ; Fill the Color Memory with the current color
.390973	9f 00 c0 af	sta $afc000,x	iclearloop1	    STA CS_COLOR_MEM_PTR, x	;
.390977	e8		inx		                inx
.390978	e0 00 20	cpx #$2000	                cpx #$2000
.39097b	d0 f6		bne $390973	                bne iclearloop1
.39097d	28		plp		                PLP
.39097e	fa		plx		                PLX
.39097f	68		pla		                PLA
.390980	6b		rtl		                RTL
.390981	48		pha		ICOLORFLAG      PHA
.390982	da		phx		                PHX
.390983	08		php		                PHP
.390984	e2 30		sep #$30	                SEP #$30        ; set A&X short
.390986	a2 00		ldx #$00	                LDX #$00
.390988	bf 39 59 39	lda $395939,x	iclearloop2	    LDA @lgreet_clr_line1,x
.39098c	9f 00 c0 af	sta $afc000,x	                STA CS_COLOR_MEM_PTR,x
.390990	bf 63 59 39	lda $395963,x	                LDA @lgreet_clr_line2,x
.390994	9f 80 c0 af	sta $afc080,x	                STA CS_COLOR_MEM_PTR + $80,x
.390998	bf 8d 59 39	lda $39598d,x	                LDA @lgreet_clr_line3,x
.39099c	9f 00 c1 af	sta $afc100,x	                STA CS_COLOR_MEM_PTR + $100,x
.3909a0	bf b7 59 39	lda $3959b7,x	                LDA @lgreet_clr_line4,x
.3909a4	9f 80 c1 af	sta $afc180,x	                STA CS_COLOR_MEM_PTR + $180,x
.3909a8	bf e1 59 39	lda $3959e1,x	                LDA @lgreet_clr_line5,x
.3909ac	9f 00 c2 af	sta $afc200,x	                STA CS_COLOR_MEM_PTR + $200,x
.3909b0	e8		inx		                inx
.3909b1	e0 2a		cpx #$2a	                cpx #42
.3909b3	d0 d3		bne $390988	                bne iclearloop2
.3909b5	28		plp		                PLP
.3909b6	fa		plx		                PLX
.3909b7	68		pla		                PLA
.3909b8	6b		rtl		                RTL
.3909b9	0b		phd		IINITCHLUT		  PHD
.3909ba	08		php		                PHP
.3909bb	48		pha		                PHA
.3909bc	da		phx		                PHX
.3909bd	e2 20		sep #$20	                SEP #$20        ; set A short
.3909bf	e2 10		sep #$10	                SEP #$10        ; set X short
.3909c1	a2 00		ldx #$00					        LDX	#$00
.3909c3	bf 0b 5a 39	lda $395a0b,x	lutinitloop0	  LDA @lfg_color_lut,x		; get Local Data
.3909c7	9f 40 1f af	sta $af1f40,x	                STA FG_CHAR_LUT_PTR,x	; Write in LUT Memory
.3909cb	e8		inx		                inx
.3909cc	e0 40		cpx #$40	                cpx #$40
.3909ce	d0 f3		bne $3909c3	                bne lutinitloop0
.3909d0	a2 00		ldx #$00	                LDX	#$00
.3909d2	bf 4b 5a 39	lda $395a4b,x	lutinitloop1	  LDA @lbg_color_lut,x		; get Local Data
.3909d6	9f 80 1f af	sta $af1f80,x	                STA BG_CHAR_LUT_PTR,x	; Write in LUT Memory
.3909da	e8		inx		                INX
.3909db	e0 40		cpx #$40	                CPX #$40
.3909dd	d0 f3		bne $3909d2	                bne lutinitloop1
.3909df	c2 20		rep #$20	                REP #$20        ; set A long
.3909e1	c2 10		rep #$10	                REP #$10        ; set X long
.3909e3	fa		plx		                PLX
.3909e4	68		pla		                PLA
.3909e5	28		plp		                PLP
.3909e6	2b		pld		                PLD
.3909e7	6b		rtl		                RTL
.3909e8					IINITGAMMATABLE
.3909e8	e2 20		sep #$20	                SEP #$20        ; set A short
.3909ea	c2 10		rep #$10	                REP #$10        ; set X long
.3909ec	a2 00 00	ldx #$0000	                ldx #$0000
.3909ef	bf 00 61 39	lda $396100,x	initgammaloop   LDA GAMMA_1_8_Tbl, x
.3909f3	9f 00 40 af	sta $af4000,x	                STA GAMMA_B_LUT_PTR, x
.3909f7	9f 00 41 af	sta $af4100,x	                STA GAMMA_G_LUT_PTR, x
.3909fb	9f 00 42 af	sta $af4200,x	                STA GAMMA_R_LUT_PTR, x
.3909ff	e8		inx		                inx
.390a00	e0 00 01	cpx #$0100	                cpx #$0100
.390a03	d0 ea		bne $3909ef	                bne initgammaloop
.390a05	c2 30		rep #$30	                REP #$30        ; set A&X long
.390a07	6b		rtl		                RTL
.390a08	48		pha		IINITALLLUT     PHA
.390a09	da		phx		                PHX
.390a0a	a2 00 00	ldx #$0000	                LDX #$0000
.390a0d	e2 20		sep #$20	                SEP #$20        ; set A short
.390a0f	a9 00		lda #$00	                LDA #$00
.390a11	85 0a		sta $0a		                STA $0A     ; Temp Location
.390a13					iinit_lut_loop
.390a13	86 02		stx $02		                STX $02
.390a15	a6 0a		ldx $0a		                LDX $0A
.390a17	bf 00 60 39	lda $396000,x	                LDA GAMMA_2_2_Tbl, x
.390a1b	49 55		eor #$55	                EOR  #$55
.390a1d	a6 02		ldx $02		                LDX $02
.390a1f	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390a23	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390a27	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390a2b	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390a2f	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390a33	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390a37	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390a3b	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390a3f	e8		inx		                inx
.390a40	86 02		stx $02		                STX $02
.390a42	a6 0a		ldx $0a		                LDX $0A
.390a44	bf 00 62 39	lda $396200,x	                LDA RANDOM_LUT_Tbl, x
.390a48	a6 02		ldx $02		                LDX $02
.390a4a	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390a4e	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390a52	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390a56	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390a5a	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390a5e	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390a62	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390a66	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390a6a	e8		inx		                inx
.390a6b	86 02		stx $02		                STX $02
.390a6d	a6 0a		ldx $0a		                LDX $0A
.390a6f	bf 00 61 39	lda $396100,x	                LDA GAMMA_1_8_Tbl, x
.390a73	49 aa		eor #$aa	                EOR  #$AA
.390a75	a6 02		ldx $02		                LDX $02
.390a77	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390a7b	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390a7f	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390a83	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390a87	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390a8b	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390a8f	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390a93	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390a97	e8		inx		                inx
.390a98	a9 ff		lda #$ff	                LDA #$FF
.390a9a	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390a9e	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390aa2	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390aa6	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390aaa	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390aae	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390ab2	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390ab6	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390aba	e6 0a		inc $0a		                inc $0A
.390abc	e8		inx		                inx
.390abd	e0 00 04	cpx #$0400	                cpx #$0400
.390ac0	f0 03		beq $390ac5	                beq iinit_lut_exit
.390ac2	82 4e ff	brl $390a13	                brl iinit_lut_loop
.390ac5					iinit_lut_exit
.390ac5	c2 30		rep #$30	                REP #$30        ; set A&X long
.390ac7	fa		plx		                PLX
.390ac8	68		pla		                PLA
.390ac9	6b		rtl		                RTL
.390aca	48		pha		IINITVKYTXTMODE PHA
.390acb	e2 20		sep #$20	                SEP #$20        ; set A short
.390acd	a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En      ;Okay, this Enables the Text Mode (Video Display)
.390acf	8f 00 00 af	sta $af0000	                STA MASTER_CTRL_REG_L
.390ad3	a9 20		lda #$20	                LDA #$20
.390ad5	8f 05 00 af	sta $af0005	                STA BORDER_COLOR_B
.390ad9	8f 07 00 af	sta $af0007	                STA BORDER_COLOR_R
.390add	a9 00		lda #$00	                LDA #$00
.390adf	8f 06 00 af	sta $af0006	                STA BORDER_COLOR_G
.390ae3	a9 01		lda #$01	                LDA #Border_Ctrl_Enable   ; Enable the Border
.390ae5	8f 04 00 af	sta $af0004	                STA BORDER_CTRL_REG
.390ae9	a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En
.390aeb	8f 00 00 af	sta $af0000	                STA MASTER_CTRL_REG_L
.390aef	c2 30		rep #$30	                REP #$30        ; set A&X long
.390af1	68		pla		                PLA
.390af2	6b		rtl		                RTL
.390af3					IINITVKYGRPMODE
.390af3	48		pha		                PHA
.390af4	e2 20		sep #$20	                SEP #$20        ; set A short
.390af6	a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.390af8	8f 40 01 af	sta $af0140	                STA @lBM_CONTROL_REG
.390afc	a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.390afe	8f 41 01 af	sta $af0141	                STA @lBM_START_ADDY_L
.390b02	a9 c0		lda #$c0	                LDA #$C0
.390b04	8f 42 01 af	sta $af0142	                STA @lBM_START_ADDY_M
.390b08	a9 00		lda #$00	                LDA #$00
.390b0a	8f 43 01 af	sta $af0143	                STA @lBM_START_ADDY_H ; This address is always base from
.390b0e	a9 80		lda #$80	                LDA #$80
.390b10	8f 44 01 af	sta $af0144	                STA BM_X_SIZE_L
.390b14	a9 02		lda #$02	                LDA #$02
.390b16	8f 45 01 af	sta $af0145	                STA BM_X_SIZE_H         ; $0280 = 640
.390b1a	a9 e0		lda #$e0	                LDA #$E0
.390b1c	8f 46 01 af	sta $af0146	                STA BM_Y_SIZE_L
.390b20	a9 01		lda #$01	                LDA #$01
.390b22	8f 47 01 af	sta $af0147	                STA BM_Y_SIZE_H         ; $01E0 = 480
.390b26	c2 30		rep #$30	                REP #$30        ; set A&X long
.390b28	68		pla		                PLA
.390b29	6b		rtl		                RTL
.390b2a					IINITTILEMODE
.390b2a	6b		rtl		                RTL
.390b2b	48		pha		IINITSPRITE     PHA
.390b2c	e2 20		sep #$20	                SEP #$20        ; set A short
.390b2e	a9 03		lda #$03	                LDA #$03    ; Enable 17 Sprites
.390b30	8f 00 02 af	sta $af0200	                STA SP00_CONTROL_REG
.390b34	8f 08 02 af	sta $af0208	                STA SP01_CONTROL_REG
.390b38	8f 10 02 af	sta $af0210	                STA SP02_CONTROL_REG
.390b3c	8f 18 02 af	sta $af0218	                STA SP03_CONTROL_REG
.390b40	8f 20 02 af	sta $af0220	                STA SP04_CONTROL_REG
.390b44	8f 28 02 af	sta $af0228	                STA SP05_CONTROL_REG
.390b48	8f 30 02 af	sta $af0230	                STA SP06_CONTROL_REG
.390b4c	8f 38 02 af	sta $af0238	                STA SP07_CONTROL_REG
.390b50	8f 40 02 af	sta $af0240	                STA SP08_CONTROL_REG
.390b54	8f 48 02 af	sta $af0248	                STA SP09_CONTROL_REG
.390b58	8f 50 02 af	sta $af0250	                STA SP10_CONTROL_REG
.390b5c	8f 58 02 af	sta $af0258	                STA SP11_CONTROL_REG
.390b60	8f 60 02 af	sta $af0260	                STA SP12_CONTROL_REG
.390b64	8f 68 02 af	sta $af0268	                STA SP13_CONTROL_REG
.390b68	8f 70 02 af	sta $af0270	                STA SP14_CONTROL_REG
.390b6c	8f 78 02 af	sta $af0278	                STA SP15_CONTROL_REG
.390b70	8f 80 02 af	sta $af0280	                STA SP16_CONTROL_REG
.390b74	a9 09		lda #$09	                LDA #$09
.390b76	8f 03 02 af	sta $af0203	                STA SP00_ADDY_PTR_H
.390b7a	8f 0b 02 af	sta $af020b	                STA SP01_ADDY_PTR_H
.390b7e	8f 13 02 af	sta $af0213	                STA SP02_ADDY_PTR_H
.390b82	8f 1b 02 af	sta $af021b	                STA SP03_ADDY_PTR_H
.390b86	8f 23 02 af	sta $af0223	                STA SP04_ADDY_PTR_H
.390b8a	8f 2b 02 af	sta $af022b	                STA SP05_ADDY_PTR_H
.390b8e	8f 33 02 af	sta $af0233	                STA SP06_ADDY_PTR_H
.390b92	8f 3b 02 af	sta $af023b	                STA SP07_ADDY_PTR_H
.390b96	8f 43 02 af	sta $af0243	                STA SP08_ADDY_PTR_H
.390b9a	8f 4b 02 af	sta $af024b	                STA SP09_ADDY_PTR_H
.390b9e	8f 53 02 af	sta $af0253	                STA SP10_ADDY_PTR_H
.390ba2	8f 5b 02 af	sta $af025b	                STA SP11_ADDY_PTR_H
.390ba6	8f 63 02 af	sta $af0263	                STA SP12_ADDY_PTR_H
.390baa	8f 6b 02 af	sta $af026b	                STA SP13_ADDY_PTR_H
.390bae	8f 73 02 af	sta $af0273	                STA SP14_ADDY_PTR_H
.390bb2	8f 7b 02 af	sta $af027b	                STA SP15_ADDY_PTR_H
.390bb6	8f 83 02 af	sta $af0283	                STA SP16_ADDY_PTR_H
.390bba	a9 00		lda #$00	                LDA #$00
.390bbc	8f 02 02 af	sta $af0202	                STA SP00_ADDY_PTR_M
.390bc0	a9 04		lda #$04	                LDA #$04
.390bc2	8f 0a 02 af	sta $af020a	                STA SP01_ADDY_PTR_M
.390bc6	a9 08		lda #$08	                LDA #$08
.390bc8	8f 12 02 af	sta $af0212	                STA SP02_ADDY_PTR_M
.390bcc	a9 0c		lda #$0c	                LDA #$0C
.390bce	8f 1a 02 af	sta $af021a	                STA SP03_ADDY_PTR_M
.390bd2	a9 10		lda #$10	                LDA #$10
.390bd4	8f 22 02 af	sta $af0222	                STA SP04_ADDY_PTR_M
.390bd8	a9 14		lda #$14	                LDA #$14
.390bda	8f 2a 02 af	sta $af022a	                STA SP05_ADDY_PTR_M
.390bde	a9 18		lda #$18	                LDA #$18
.390be0	8f 32 02 af	sta $af0232	                STA SP06_ADDY_PTR_M
.390be4	a9 1c		lda #$1c	                LDA #$1C
.390be6	8f 3a 02 af	sta $af023a	                STA SP07_ADDY_PTR_M
.390bea	a9 20		lda #$20	                LDA #$20
.390bec	8f 42 02 af	sta $af0242	                STA SP08_ADDY_PTR_M
.390bf0	a9 24		lda #$24	                LDA #$24
.390bf2	8f 4a 02 af	sta $af024a	                STA SP09_ADDY_PTR_M
.390bf6	a9 28		lda #$28	                LDA #$28
.390bf8	8f 52 02 af	sta $af0252	                STA SP10_ADDY_PTR_M
.390bfc	a9 2c		lda #$2c	                LDA #$2C
.390bfe	8f 5a 02 af	sta $af025a	                STA SP11_ADDY_PTR_M
.390c02	a9 30		lda #$30	                LDA #$30
.390c04	8f 62 02 af	sta $af0262	                STA SP12_ADDY_PTR_M
.390c08	a9 34		lda #$34	                LDA #$34
.390c0a	8f 6a 02 af	sta $af026a	                STA SP13_ADDY_PTR_M
.390c0e	a9 38		lda #$38	                LDA #$38
.390c10	8f 72 02 af	sta $af0272	                STA SP14_ADDY_PTR_M
.390c14	a9 3c		lda #$3c	                LDA #$3C
.390c16	8f 7a 02 af	sta $af027a	                STA SP15_ADDY_PTR_M
.390c1a	a9 40		lda #$40	                LDA #$40
.390c1c	8f 82 02 af	sta $af0282	                STA SP16_ADDY_PTR_M
.390c20	a9 00		lda #$00	                LDA #$00
.390c22	8f 01 02 af	sta $af0201	                STA SP00_ADDY_PTR_L
.390c26	8f 09 02 af	sta $af0209	                STA SP01_ADDY_PTR_L
.390c2a	8f 11 02 af	sta $af0211	                STA SP02_ADDY_PTR_L
.390c2e	8f 19 02 af	sta $af0219	                STA SP03_ADDY_PTR_L
.390c32	8f 21 02 af	sta $af0221	                STA SP04_ADDY_PTR_L
.390c36	8f 29 02 af	sta $af0229	                STA SP05_ADDY_PTR_L
.390c3a	8f 31 02 af	sta $af0231	                STA SP06_ADDY_PTR_L
.390c3e	8f 39 02 af	sta $af0239	                STA SP07_ADDY_PTR_L
.390c42	8f 41 02 af	sta $af0241	                STA SP08_ADDY_PTR_L
.390c46	8f 49 02 af	sta $af0249	                STA SP09_ADDY_PTR_L
.390c4a	8f 51 02 af	sta $af0251	                STA SP10_ADDY_PTR_L
.390c4e	8f 59 02 af	sta $af0259	                STA SP11_ADDY_PTR_L
.390c52	8f 61 02 af	sta $af0261	                STA SP12_ADDY_PTR_L
.390c56	8f 69 02 af	sta $af0269	                STA SP13_ADDY_PTR_L
.390c5a	8f 71 02 af	sta $af0271	                STA SP14_ADDY_PTR_L
.390c5e	8f 79 02 af	sta $af0279	                STA SP15_ADDY_PTR_L
.390c62	8f 81 02 af	sta $af0281	                STA SP16_ADDY_PTR_L
.390c66	68		pla		                PLA
.390c67	6b		rtl		                RTL
.390c68					IINITFONTSET
.390c68	e2 20		sep #$20	                SEP #$20        ; set A short
.390c6a	c2 10		rep #$10	                REP #$10        ; set X long
.390c6c	a2 00 00	ldx #$0000	                LDX #$0000
.390c6f					initFontsetbranch0
.390c6f	bf 00 f0 3f	lda $3ff000,x	                LDA @lFONT_4_BANK0,X    ; RAM Content
.390c73	9f 00 80 af	sta $af8000,x	                STA @lFONT_MEMORY_BANK0,X ; Vicky FONT RAM Bank
.390c77	e8		inx		                INX
.390c78	e0 00 08	cpx #$0800	                CPX #$0800
.390c7b	d0 f2		bne $390c6f	                BNE initFontsetbranch0
.390c7d	ea		nop		                NOP
.390c7e	a2 00 00	ldx #$0000	                LDX #$0000
.390c81					initFontsetbranch1
.390c81	bf 00 f8 3f	lda $3ff800,x	                LDA @lFONT_4_BANK1,X
.390c85	9f 00 88 af	sta $af8800,x	                STA @lFONT_MEMORY_BANK1,X ; Vicky FONT RAM Bank
.390c89	e8		inx		                INX
.390c8a	e0 00 08	cpx #$0800	                CPX #$0800
.390c8d	d0 f2		bne $390c81	                BNE initFontsetbranch1
.390c8f	ea		nop		                NOP
.390c90	c2 30		rep #$30	                REP #$30        ; set A&X long
.390c92	6b		rtl		                RTL
.390c93					INITMOUSEPOINTER
.390c93	e2 20		sep #$20	                SEP #$20        ; set A short
.390c95	c2 10		rep #$10	                REP #$10        ; set X long
.390c97	a2 00 00	ldx #$0000	                LDX #$0000
.390c9a					FILL_MOUSE_MARKER
.390c9a	bf 00 63 39	lda $396300,x	                LDA @lMOUSE_POINTER_PTR,X
.390c9e	9f 00 05 af	sta $af0500,x	                STA @lMOUSE_PTR_GRAP0_START, X
.390ca2	e8		inx		                INX
.390ca3	e0 00 01	cpx #$0100	                CPX #$0100
.390ca6	d0 f2		bne $390c9a	                BNE FILL_MOUSE_MARKER
.390ca8	ea		nop		                nop
.390ca9	a9 01		lda #$01	                LDA #$01
.390cab	8f 00 07 af	sta $af0700	                STA @lMOUSE_PTR_CTRL_REG_L  ; Enable Mouse, Mouse Pointer Graphic Bank 0
.390caf	c2 30		rep #$30	                REP #$30        ; set A&X long
.390cb1	6b		rtl		                RTL
.390cb2	48		pha		IINITCURSOR     PHA
.390cb3	e2 20		sep #$20	                SEP #$20        ; set A short
.390cb5	a9 b1		lda #$b1	                LDA #$B1      ;The Cursor Character will be a Fully Filled Block
.390cb7	8f 12 00 af	sta $af0012	                STA VKY_TXT_CURSOR_CHAR_REG
.390cbb	a9 03		lda #$03	                LDA #$03      ;Set Cursor Enable And Flash Rate @1Hz
.390cbd	8f 10 00 af	sta $af0010	                STA VKY_TXT_CURSOR_CTRL_REG ;
.390cc1	c2 30		rep #$30	                REP #$30        ; set A&X long
.390cc3	a9 00 00	lda #$0000	                LDA #$0000;
.390cc6	8f 14 00 af	sta $af0014	                STA VKY_TXT_CURSOR_X_REG_L; // Set the X to Position 1
.390cca	a9 06 00	lda #$0006	                LDA #$0006;
.390ccd	8f 16 00 af	sta $af0016	                STA VKY_TXT_CURSOR_Y_REG_L; // Set the Y to Position 6 (Below)
.390cd1	68		pla		                PLA
.390cd2	6b		rtl		                RTL
.390cd3	0b		phd		IINITSUPERIO	  PHD
.390cd4	08		php		                PHP
.390cd5	48		pha		                PHA
.390cd6	e2 20		sep #$20	                SEP #$20        ; set A short
.390cd8	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390cda	8f 23 11 af	sta $af1123	                STA GP10_REG
.390cde	af 23 11 af	lda $af1123	                LDA GP10_REG
.390ce2	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390ce4	8f 24 11 af	sta $af1124	                STA GP11_REG
.390ce8	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390cea	8f 25 11 af	sta $af1125	                STA GP12_REG
.390cee	a9 01		lda #$01	        				LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390cf0	8f 26 11 af	sta $af1126	        				STA GP13_REG
.390cf4	a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BX) Bit[0] = 1, Bit[2] = 1
.390cf6	8f 27 11 af	sta $af1127	        				STA GP14_REG
.390cfa	a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BY) Bit[0] = 1, Bit[2] = 1
.390cfc	8f 28 11 af	sta $af1128	        				STA GP15_REG
.390d00	a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BX) Bit[0] = 1, Bit[2] = 1
.390d02	8f 29 11 af	sta $af1129	        				STA GP16_REG
.390d06	a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BY) Bit[0] = 1, Bit[2] = 1
.390d08	8f 2a 11 af	sta $af112a	        				STA GP17_REG
.390d0c	a9 00		lda #$00	        				LDA #$00		;(C256 - HEADPHONE MUTE) - Output GPIO - Push-Pull (1 - Headphone On, 0 - HeadPhone Off)
.390d0e	8f 2b 11 af	sta $af112b	        				STA GP20_REG
.390d12	a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390d14	8f 2f 11 af	sta $af112f					        STA GP24_REG
.390d18	a9 05		lda #$05					        LDA #$05		;(C256 - MIDI IN) Bit[0] = 1, Bit[2] = 1 (Page 132 Manual)
.390d1a	8f 30 11 af	sta $af1130					        STA GP25_REG
.390d1e	a9 84		lda #$84				        	LDA #$84		;(C256 - MIDI OUT) Bit[2] = 1, Bit[7] = 1 (Open Drain - To be Checked)
.390d20	8f 31 11 af	sta $af1131					        STA GP26_REG
.390d24	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 1) Setup as GPIO Input for now
.390d26	8f 33 11 af	sta $af1133					        STA GP30_REG
.390d2a	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 4) Setup as GPIO Input for now
.390d2c	8f 34 11 af	sta $af1134					        STA GP31_REG
.390d30	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 3) Setup as GPIO Input for now
.390d32	8f 35 11 af	sta $af1135					        STA GP32_REG
.390d36	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 6) Setup as GPIO Input for now
.390d38	8f 36 11 af	sta $af1136					        STA GP33_REG
.390d3c	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 5) Setup as GPIO Input for now
.390d3e	8f 37 11 af	sta $af1137					        STA GP34_REG
.390d42	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 8) Setup as GPIO Input for now
.390d44	8f 38 11 af	sta $af1138					        STA GP35_REG
.390d48	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 7) Setup as GPIO Input for now
.390d4a	8f 39 11 af	sta $af1139					        STA GP36_REG
.390d4e	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 10) Setup as GPIO Input for now
.390d50	8f 3a 11 af	sta $af113a					        STA GP37_REG
.390d54	a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390d56	8f 3d 11 af	sta $af113d					        STA GP42_REG
.390d5a	a9 01		lda #$01				          LDA #$01		;(C256 - INPUT PLL CLK INTERRUPT) Default Value - Will keep it as an input for now, no real usage for now
.390d5c	8f 3e 11 af	sta $af113e					        STA GP43_REG
.390d60	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RI2) - Input - Set Secondary Function
.390d62	8f 3f 11 af	sta $af113f					        STA GP50_REG
.390d66	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DCD2) - Input - Set Secondary Function
.390d68	8f 40 11 af	sta $af1140					        STA GP51_REG
.390d6c	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RXD2) - Input - Set Secondary Function
.390d6e	8f 41 11 af	sta $af1141					        STA GP52_REG
.390d72	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - TXD2) - Output - Set Secondary Function
.390d74	8f 42 11 af	sta $af1142					        STA GP53_REG
.390d78	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DSR2) - Input - Set Secondary Function
.390d7a	8f 43 11 af	sta $af1143					        STA GP54_REG
.390d7e	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - RTS2) - Output - Set Secondary Function
.390d80	8f 44 11 af	sta $af1144					        STA GP55_REG
.390d84	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - CTS2) - Input - Set Secondary Function
.390d86	8f 45 11 af	sta $af1145					        STA GP56_REG
.390d8a	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - DTR2) - Output - Set Secondary Function
.390d8c	8f 46 11 af	sta $af1146					        STA GP57_REG
.390d90	a9 84		lda #$84					        LDA #$84		;(C256 - LED1) - Open Drain - Output
.390d92	8f 47 11 af	sta $af1147					        STA GP60_REG
.390d96	a9 84		lda #$84					        LDA #$84		;(C256 - LED2) - Open Drain - Output
.390d98	8f 48 11 af	sta $af1148					        STA GP61_REG
.390d9c	a9 00		lda #$00				        	LDA #$00		;GPIO Data Register (GP10..GP17) - Not Used
.390d9e	8f 4b 11 af	sta $af114b					        STA GP1_REG
.390da2	a9 01		lda #$01					        LDA #$01		;GPIO Data Register (GP20..GP27) - Bit[0] - Headphone Mute (Enabling it)
.390da4	8f 4c 11 af	sta $af114c					        STA GP2_REG
.390da8	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP30..GP37) - Since it is in Output mode, nothing to write here.
.390daa	8f 4d 11 af	sta $af114d					        STA GP3_REG
.390dae	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP40..GP47)  - Not Used
.390db0	8f 4e 11 af	sta $af114e					        STA GP4_REG
.390db4	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP50..GP57)  - Not Used
.390db6	8f 4f 11 af	sta $af114f					        STA GP5_REG
.390dba	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP60..GP61)  - Not Used
.390dbc	8f 50 11 af	sta $af1150					        STA GP6_REG
.390dc0	a9 01		lda #$01					        LDA #$01		;LED1 Output - Already setup by Vicky Init Phase, for now, I will leave it alone
.390dc2	8f 5d 11 af	sta $af115d					        STA LED1_REG
.390dc6	a9 02		lda #$02					        LDA #$02		;LED2 Output - However, I will setup this one, to make sure the Code works (Full On, when Code was ran)
.390dc8	8f 5e 11 af	sta $af115e					        STA LED2_REG
.390dcc	c2 20		rep #$20	                REP #$20        ; set A long
.390dce	68		pla		                PLA
.390dcf	28		plp						        PLP
.390dd0	2b		pld					        	PLD
.390dd1	6b		rtl		                RTL
.390dd2	0b		phd		IINITKEYBOARD	  PHD
.390dd3	08		php						        PHP
.390dd4	48		pha						        PHA
.390dd5	da		phx						        PHX
.390dd6	e2 20		sep #$20	                SEP #$20        ; set A short
.390dd8	c2 10		rep #$10	                REP #$10        ; set X long
.390dda	18		clc		                CLC
.390ddb	20 8b 0e	jsr $390e8b	                JSR Poll_Inbuf ;
.390dde	a9 aa		lda #$aa					        LDA #$AA			;Send self test command
.390de0	8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.390de4	20 96 0e	jsr $390e96	                JSR Poll_Outbuf ;
.390de7	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Check self test result
.390deb	c9 55		cmp #$55					        CMP #$55
.390ded	f0 03		beq $390df2					        BEQ	passAAtest
.390def	82 89 00	brl $390e7b	                BRL initkb_loop_out
.390df2					passAAtest
.390df2	a9 ab		lda #$ab					        LDA #$AB			;Send test Interface command
.390df4	8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.390df8	20 96 0e	jsr $390e96	                JSR Poll_Outbuf ;
.390dfb	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Display Interface test results
.390dff	c9 00		cmp #$00					        CMP #$00			;Should be 00
.390e01	f0 03		beq $390e06					        BEQ	passABtest
.390e03	82 75 00	brl $390e7b	                BRL initkb_loop_out
.390e06					passABtest
.390e06	a9 60		lda #$60	                LDA #$60            ; Send Command 0x60 so to Enable Interrupt
.390e08	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390e0c	20 8b 0e	jsr $390e8b	                JSR Poll_Inbuf ;
.390e0f	a9 69		lda #$69	                LDA #%01101001      ; Enable Interrupt
.390e11	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.390e15	20 8b 0e	jsr $390e8b	                JSR Poll_Inbuf ;
.390e18	a9 ff		lda #$ff	                LDA #$FF      ; Send Keyboard Reset command
.390e1a	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.390e1e	a2 ff ff	ldx #$ffff	                LDX #$FFFF
.390e21	ca		dex		DLY_LOOP1       DEX
.390e22	ea		nop		                NOP
.390e23	ea		nop		                NOP
.390e24	ea		nop		                NOP
.390e25	ea		nop		                NOP
.390e26	ea		nop		                NOP
.390e27	ea		nop		                NOP
.390e28	ea		nop		                NOP
.390e29	ea		nop		                NOP
.390e2a	e0 00 00	cpx #$0000	                CPX #$0000
.390e2d	d0 f2		bne $390e21	                BNE DLY_LOOP1
.390e2f	20 96 0e	jsr $390e96	                JSR Poll_Outbuf ;
.390e32	af 60 10 af	lda $af1060	                LDA KBD_OUT_BUF   ; Read Output Buffer
.390e36					DO_CMD_F4_AGAIN
.390e36	20 8b 0e	jsr $390e8b	                JSR Poll_Inbuf ;
.390e39	a9 f4		lda #$f4					        LDA #$F4			; Enable the Keyboard
.390e3b	8f 60 10 af	sta $af1060					        STA KBD_DATA_BUF
.390e3f	20 96 0e	jsr $390e96	                JSR Poll_Outbuf ;
.390e42	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		; Clear the Output buffer
.390e46	c9 fa		cmp #$fa	                CMP #$FA
.390e48	d0 ec		bne $390e36	                BNE DO_CMD_F4_AGAIN
.390e4a	20 a1 0e	jsr $390ea1	                JSR INIT_MOUSE
.390e4d	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0  ; Read the Pending Register &
.390e51	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.390e53	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0  ; Writing it back will clear the Active Bit
.390e57	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1  ; Read the Pending Register &
.390e5b	29 01		and #$01	                AND #FNX1_INT00_KBD
.390e5d	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1  ; Writing it back will clear the Active Bit
.390e61	af 4d 01 00	lda $00014d	                LDA @lINT_MASK_REG1
.390e65	29 fe		and #$fe	                AND #~FNX1_INT00_KBD
.390e67	8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.390e6b	af 4c 01 00	lda $00014c	                LDA @lINT_MASK_REG0
.390e6f	29 7f		and #$7f	                AND #~FNX0_INT07_MOUSE
.390e71	8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.390e75	a2 07 5b	ldx #$5b07	                LDX #<>Success_kb_init
.390e78	38		sec		                SEC
.390e79	b0 03		bcs $390e7e	                BCS InitSuccess
.390e7b	a2 19 5b	ldx #$5b19	initkb_loop_out LDX #<>Failed_kb_init
.390e7e	22 47 06 39	jsl $390647	InitSuccess     JSL IPRINT       ; print Message
.390e82	c2 20		rep #$20	                REP #$20        ; set A long
.390e84	c2 10		rep #$10	                REP #$10        ; set X long
.390e86	fa		plx		                PLX
.390e87	68		pla		                PLA
.390e88	28		plp						        PLP
.390e89	2b		pld						        PLD
.390e8a	6b		rtl		                RTL
.390e8b					Poll_Inbuf
.390e8b	af 64 10 af	lda $af1064	                LDA STATUS_PORT		; Load Status Byte
.390e8f	29 02		and #$02					        AND	#<INPT_BUF_FULL	; Test bit $02 (if 0, Empty)
.390e91	c9 02		cmp #$02					        CMP #<INPT_BUF_FULL
.390e93	f0 f6		beq $390e8b					        BEQ Poll_Inbuf
.390e95	60		rts		                RTS
.390e96					Poll_Outbuf
.390e96	af 64 10 af	lda $af1064	                LDA STATUS_PORT
.390e9a	29 01		and #$01	                AND #OUT_BUF_FULL ; Test bit $01 (if 1, Full)
.390e9c	c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.390e9e	d0 f6		bne $390e96	                BNE Poll_Outbuf
.390ea0	60		rts		                RTS
.390ea1					INIT_MOUSE
.390ea1	20 8b 0e	jsr $390e8b	                JSR Poll_Inbuf
.390ea4	a9 a8		lda #$a8	                LDA #$A8          ; Enable the second PS2 Channel
.390ea6	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390eaa					DO_CMD_A9_AGAIN
.390eaa	20 8b 0e	jsr $390e8b	                JSR Poll_Inbuf
.390ead	a9 a9		lda #$a9	                LDA #$A9          ; Tests second PS2 Channel
.390eaf	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390eb3	20 96 0e	jsr $390e96	                JSR Poll_Outbuf ;
.390eb6	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		; Clear the Output buffer
.390eba	c9 00		cmp #$00	                CMP #$00
.390ebc	d0 ec		bne $390eaa	                BNE DO_CMD_A9_AGAIN
.390ebe	20 8b 0e	jsr $390e8b	                JSR Poll_Inbuf
.390ec1	a9 20		lda #$20	                LDA #$20
.390ec3	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390ec7	20 96 0e	jsr $390e96	                JSR Poll_Outbuf ;
.390eca	af 60 10 af	lda $af1060	                LDA KBD_OUT_BUF
.390ece	09 02		ora #$02	                ORA #$02
.390ed0	48		pha		                PHA
.390ed1	20 8b 0e	jsr $390e8b	                JSR Poll_Inbuf
.390ed4	a9 60		lda #$60	                LDA #$60
.390ed6	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390eda	20 8b 0e	jsr $390e8b	                JSR Poll_Inbuf ;
.390edd	68		pla		                PLA
.390ede	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.390ee2	a9 f6		lda #$f6	                LDA #$F6        ;Tell the mouse to use default settings
.390ee4	20 07 0f	jsr $390f07	                JSR MOUSE_WRITE
.390ee7	20 1a 0f	jsr $390f1a	                JSR MOUSE_READ
.390eea	a9 e8		lda #$e8	                LDA #$E8
.390eec	20 07 0f	jsr $390f07	                JSR MOUSE_WRITE
.390eef	20 1a 0f	jsr $390f1a	                JSR MOUSE_READ
.390ef2	a9 00		lda #$00	                LDA #$00
.390ef4	20 07 0f	jsr $390f07	                JSR MOUSE_WRITE
.390ef7	20 1a 0f	jsr $390f1a	                JSR MOUSE_READ
.390efa	a9 f4		lda #$f4	                LDA #$F4        ; Enable the Mouse
.390efc	20 07 0f	jsr $390f07	                JSR MOUSE_WRITE
.390eff	20 1a 0f	jsr $390f1a	                JSR MOUSE_READ
.390f02	a9 00		lda #$00	                LDA #$00
.390f04	85 e0		sta $e0		                STA MOUSE_PTR
.390f06	60		rts		                RTS
.390f07					MOUSE_WRITE
.390f07	48		pha		                PHA
.390f08	20 8b 0e	jsr $390e8b	                JSR Poll_Inbuf
.390f0b	a9 d4		lda #$d4	                LDA #$D4
.390f0d	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390f11	20 8b 0e	jsr $390e8b	                JSR Poll_Inbuf
.390f14	68		pla		                PLA
.390f15	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.390f19	60		rts		                RTS
.390f1a					MOUSE_READ
.390f1a	20 96 0e	jsr $390e96	                JSR Poll_Outbuf ;
.390f1d	af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF
.390f21	60		rts		                RTS
.390f22	48		pha		INITRTC         PHA
.390f23	08		php		                PHP
.390f24	e2 20		sep #$20	                SEP #$20        ; set A short
.390f26	a9 00		lda #$00	                LDA #0
.390f28	8f 0b 08 af	sta $af080b	                STA @l RTC_RATES    ; Set watch dog timer and periodic interrupt rates to 0
.390f2c	8f 0c 08 af	sta $af080c	                STA @l RTC_ENABLE   ; Disable all the alarms and interrupts
.390f30	af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL      ; Make sure the RTC will continue to tick in battery mode
.390f34	09 04		ora #$04	                ORA #%00000100
.390f36	8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.390f3a	28		plp		                PLP
.390f3b	68		pla		                PLA
.390f3c	6b		rtl		                RTL
.390f3d					ITESTSID
.390f3d	a9 0f		lda #$0f	                LDA #$0F
.390f3f	8f 18 e4 af	sta $afe418	                STA SID0_MODE_VOL
.390f43	a9 be		lda #$be	                LDA #$BE
.390f45	8f 05 e4 af	sta $afe405	                STA SID0_V1_ATCK_DECY
.390f49	a9 f8		lda #$f8	                LDA #$F8
.390f4b	8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.390f4f	a9 11		lda #$11	                LDA #$11
.390f51	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.390f55	a9 25		lda #$25	                LDA #$25
.390f57	8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.390f5b	a9 11		lda #$11	                LDA #$11
.390f5d	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL
.390f61	a9 08		lda #$08	                LDA #$08
.390f63	8f 03 e4 af	sta $afe403	                STA SID0_V1_PW_HI   ;G1
.390f67	a9 00		lda #$00	                LDA #$00
.390f69	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.390f6d	a9 c6		lda #$c6	                LDA #$C6
.390f6f	8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.390f73	a9 08		lda #$08	                LDA #$08
.390f75	8f 0a e4 af	sta $afe40a	                STA SID0_V2_PW_HI   ;G1
.390f79	a9 00		lda #$00	                LDA #$00
.390f7b	8f 08 e4 af	sta $afe408	                STA SID0_V2_FREQ_HI
.390f7f	a9 08		lda #$08	                LDA #$08
.390f81	8f 0c e4 af	sta $afe40c	                STA SID0_V2_ATCK_DECY
.390f85	a9 c6		lda #$c6	                LDA #$C6
.390f87	8f 0d e4 af	sta $afe40d	                STA SID0_V2_SSTN_RLSE
.390f8b	a9 08		lda #$08	                LDA #$08
.390f8d	8f 11 e4 af	sta $afe411	                STA SID0_V3_PW_HI   ;G1
.390f91	a9 00		lda #$00	                LDA #$00
.390f93	8f 0f e4 af	sta $afe40f	                STA SID0_V3_FREQ_HI
.390f97	a9 08		lda #$08	                LDA #$08
.390f99	8f 13 e4 af	sta $afe413	                STA SID0_V3_ATCK_DECY
.390f9d	a9 c6		lda #$c6	                LDA #$C6
.390f9f	8f 14 e4 af	sta $afe414	                STA SID0_V3_SSTN_RLSE
.390fa3	a9 36		lda #$36	                LDA #$36              ;Left Side (Rev A of Board)
.390fa5	8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.390fa9	a9 01		lda #$01	                LDA #$01
.390fab	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI   ;G1
.390faf	a9 00		lda #$00	                LDA #$00              ;Left Side (Rev A of Board)
.390fb1	8f 02 e4 af	sta $afe402	                STA SID0_V1_PW_LO
.390fb5	a9 08		lda #$08	                LDA #$08
.390fb7	8f 03 e4 af	sta $afe403	                STA SID0_V1_PW_HI   ;G1
.390fbb	a9 08		lda #$08	                LDA #$08
.390fbd	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL    ; Reset
.390fc1	a9 0c		lda #$0c	                LDA #$0C
.390fc3	8f 07 e4 af	sta $afe407	                STA SID0_V2_FREQ_LO
.390fc7	a9 04		lda #$04	                LDA #$04
.390fc9	8f 08 e4 af	sta $afe408	                STA SID0_V2_FREQ_HI   ;B1
.390fcd	a9 00		lda #$00	                LDA #$00              ;Left Side (Rev A of Board)
.390fcf	8f 09 e4 af	sta $afe409	                STA SID0_V2_PW_LO
.390fd3	a9 08		lda #$08	                LDA #$08
.390fd5	8f 0a e4 af	sta $afe40a	                STA SID0_V2_PW_HI   ;G1
.390fd9	a9 08		lda #$08	                LDA #$08
.390fdb	8f 0b e4 af	sta $afe40b	                STA SID0_V2_CTRL    ; Reset
.390fdf	a9 00		lda #$00	                LDA #$00
.390fe1	8f 0e e4 af	sta $afe40e	                STA SID0_V3_FREQ_LO
.390fe5	a9 08		lda #$08	                LDA #$08
.390fe7	8f 0f e4 af	sta $afe40f	                STA SID0_V3_FREQ_HI   ;D
.390feb	a9 00		lda #$00	                LDA #$00              ;Left Side (Rev A of Board)
.390fed	8f 10 e4 af	sta $afe410	                STA SID0_V3_PW_LO
.390ff1	a9 08		lda #$08	                LDA #$08
.390ff3	8f 11 e4 af	sta $afe411	                STA SID0_V3_PW_HI   ;G1
.390ff7	a9 08		lda #$08	                LDA #$08
.390ff9	8f 12 e4 af	sta $afe412	                STA SID0_V3_CTRL    ; Reset
.390ffd	a9 10		lda #$10	                LDA #$10
.390fff	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL    ; Triangle
.391003	8f 0b e4 af	sta $afe40b	                STA SID0_V2_CTRL    ; Triangle
.391007	8f 12 e4 af	sta $afe412	                STA SID0_V3_CTRL    ; Triangle
.39100b	6b		rtl		                RTL
.39100c	48		pha		IINITCODEC      PHA
.39100d	c2 20		rep #$20	                REP #$20        ; set A long
.39100f	a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R13 - Turn On Headphones
.391012	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391016	a9 01 00	lda #$0001	                LDA #$0001
.391019	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.39101d	20 9c 10	jsr $39109c	                JSR CODEC_TRF_FINISHED
.391020	a9 0f 2a	lda #$2a0f	                LDA #%0010101000001111       ;R21 - Enable All the Analog In
.391023	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391027	a9 01 00	lda #$0001	                LDA #$0001
.39102a	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.39102e	20 9c 10	jsr $39109c	                JSR CODEC_TRF_FINISHED
.391031	a9 01 23	lda #$2301	                LDA #%0010001100000001      ;R17 - Enable All the Analog In
.391034	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391038	a9 01 00	lda #$0001	                LDA #$0001
.39103b	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.39103f	20 9c 10	jsr $39109c	                JSR CODEC_TRF_FINISHED
.391042	a9 07 2c	lda #$2c07	                LDA #%0010110000000111      ;R22 - Enable all Analog Out
.391045	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391049	a9 01 00	lda #$0001	                LDA #$0001
.39104c	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391050	20 9c 10	jsr $39109c	                JSR CODEC_TRF_FINISHED
.391053	a9 02 14	lda #$1402	                LDA #%0001010000000010      ;R10 - DAC Interface Control
.391056	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39105a	a9 01 00	lda #$0001	                LDA #$0001
.39105d	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391061	20 9c 10	jsr $39109c	                JSR CODEC_TRF_FINISHED
.391064	a9 02 16	lda #$1602	                LDA #%0001011000000010      ;R11 - ADC Interface Control
.391067	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39106b	a9 01 00	lda #$0001	                LDA #$0001
.39106e	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391072	20 9c 10	jsr $39109c	                JSR CODEC_TRF_FINISHED
.391075	a9 d5 19	lda #$19d5	                LDA #%0001100111010101      ;R12 - Master Mode Control
.391078	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39107c	a9 01 00	lda #$0001	                LDA #$0001
.39107f	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391083	20 9c 10	jsr $39109c	                JSR CODEC_TRF_FINISHED
.391086	68		pla		                PLA
.391087	6b		rtl		                RTL
.391088					IRESETCODEC
.391088	c2 20		rep #$20	                REP #$20        ; set A long
.39108a	a9 00 2e	lda #$2e00	                LDA #$2E00      ;R22 - Enable all Analog Out
.39108d	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391091	a9 01 00	lda #$0001	                LDA #$0001
.391094	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391098	20 9c 10	jsr $39109c	                JSR CODEC_TRF_FINISHED
.39109b	6b		rtl		                RTL
.39109c					CODEC_TRF_FINISHED
.39109c	e2 20		sep #$20	                SEP #$20        ; set A short
.39109e	af 02 e9 af	lda $afe902	CODEC_LOOP      LDA CODEC_WR_CTRL
.3910a2	29 01		and #$01	                AND #$01
.3910a4	c9 01		cmp #$01	                CMP #$01
.3910a6	f0 f6		beq $39109e	                BEQ CODEC_LOOP
.3910a8	c2 20		rep #$20	                REP #$20        ; set A long
.3910aa	60		rts		                RTS
.3910ab					IBM_FILL_SCREEN
.3910ab	c2 30		rep #$30	                REP #$30        ; set A&X long
.3910ad	a9 00 00	lda #$0000	                LDA #$0000
.3910b0	a2 00 00	ldx #$0000	                LDX #$0000
.3910b3					BM_FILL_SCREEN_LOOPY
.3910b3	a0 00 00	ldy #$0000	                LDY #$0000
.3910b6	e2 20		sep #$20	                SEP #$20        ; set A short
.3910b8					BM_FILL_SCREEN_LOOPX
.3910b8	97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.3910ba	c8		iny		                INY
.3910bb	c4 40		cpy $40		                CPY BM_CLEAR_SCRN_X              ; Transfer the First line
.3910bd	d0 f9		bne $3910b8	                BNE BM_FILL_SCREEN_LOOPX
.3910bf	20 ca 10	jsr $3910ca	                JSR BM_FILL_COMPUTE_Y_DST
.3910c2	e8		inx		                INX
.3910c3	e4 42		cpx $42		                CPX BM_CLEAR_SCRN_Y
.3910c5	d0 ec		bne $3910b3	                BNE BM_FILL_SCREEN_LOOPY
.3910c7	c2 30		rep #$30	                REP #$30        ; set A&X long
.3910c9	6b		rtl		                RTL
.3910ca					BM_FILL_COMPUTE_Y_DST
.3910ca	c2 20		rep #$20	                REP #$20        ; set A long
.3910cc	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR        ; Right now it is set @ $020000 (128K) + File Size
.3910ce	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3910d2	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2      ; Right now it is set @ $020000 (128K)
.3910d4	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.3910d8	a9 80 02	lda #$0280	                LDA #$280        ; Right now it is set @ $020000 (128K) + File Size
.3910db	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.3910df	a9 00 00	lda #$0000	                LDA #$0000
.3910e2	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.3910e6	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.3910ea	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.3910ec	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.3910f0	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.3910f2	a9 00 00	lda #$0000	                LDA #$0000
.3910f5	60		rts		                RTS
.3910f6					IBMP_PARSER
.3910f6	c2 30		rep #$30	                REP #$30        ; set A&X long
.3910f8	a0 00 00	ldy #$0000	                LDY #$0000
.3910fb	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y
.3910fd	c9 42 4d	cmp #$4d42	                CMP #$4D42
.391100	f0 03		beq $391105	                BEQ IBMP_PARSER_CONT
.391102	82 04 01	brl $391209	                BRL BMP_PARSER_END_WITH_ERROR
.391105					IBMP_PARSER_CONT
.391105	a0 02 00	ldy #$0002	                LDY #$0002
.391108	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size Low Short
.39110a	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.39110e	a0 04 00	ldy #$0004	                LDY #$0004
.391111	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size High Short
.391113	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.391117	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Store -1 in Adder (B)
.39111a	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.39111e	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.391122	18		clc		                CLC
.391123	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.391127	85 50		sta $50		                STA BMP_FILE_SIZE
.391129	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.39112d	85 52		sta $52		                STA BMP_FILE_SIZE+2
.39112f	a0 12 00	ldy #$0012	                LDY #$0012
.391132	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.391134	85 40		sta $40		                STA BMP_X_SIZE
.391136	a0 16 00	ldy #$0016	                LDY #$0016
.391139	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.39113b	85 42		sta $42		                STA BMP_Y_SIZE
.39113d	a0 2e 00	ldy #$002e	                LDY #$002E
.391140	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.391142	0a		asl a		                ASL A; Multiply by 2
.391143	0a		asl a		                ASL A; Multiply by 2
.391144	85 4c		sta $4c		                STA BMP_COLOR_PALET         ;
.391146	e0 00 00	cpx #$0000	                CPX #$0000
.391149	d0 05		bne $391150	                BNE BMP_LUT1_PICK
.39114b	20 11 12	jsr $391211	                JSR BMP_PARSER_UPDATE_LUT0   ; Go Upload the LUT0
.39114e	80 08		bra $391158	                BRA DONE_TRANSFER_LUT;
.391150					  BMP_LUT1_PICK
.391150	e0 01 00	cpx #$0001	                CPX #$0001
.391153	d0 03		bne $391158	                BNE BMP_LUT2_PICK
.391155	20 41 12	jsr $391241	                JSR BMP_PARSER_UPDATE_LUT1   ; Go Upload the LUT1
.391158					  BMP_LUT2_PICK
.391158					  DONE_TRANSFER_LUT
.391158	a5 56		lda $56		                LDA BMP_POSITION_Y
.39115a	8f 00 01 00	sta $000100	                STA @lUNSIGNED_MULT_A_LO
.39115e	a5 4e		lda $4e		                LDA SCRN_X_STRIDE
.391160	8f 02 01 00	sta $000102	                STA @lUNSIGNED_MULT_B_LO
.391164	af 04 01 00	lda $000104	                LDA @lUNSIGNED_MULT_AL_LO
.391168	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.39116c	af 06 01 00	lda $000106	                LDA @lUNSIGNED_MULT_AL_LO+2
.391170	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.391174	a5 54		lda $54		                LDA BMP_POSITION_X
.391176	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Put the X Position Adder (B)
.39117a	a9 00 00	lda #$0000	                LDA #$0000
.39117d	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.391181	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in TEMP
.391185	85 f0		sta $f0		                STA USER_TEMP
.391187	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in TEMP
.39118b	85 f2		sta $f2		                STA USER_TEMP+2
.39118d	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.39118f	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.391193	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.391195	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.391199	a5 f0		lda $f0		                LDA USER_TEMP
.39119b	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store in 32Bit Adder (B)
.39119f	a5 f2		lda $f2		                LDA USER_TEMP+2
.3911a1	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in 32Bit Adder (B)
.3911a5	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in BMP_PRSE_DST_PTR
.3911a9	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.3911ab	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in BMP_PRSE_DST_PTR
.3911af	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.3911b1	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K)
.3911b3	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3911b7	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2        ; Right now it is set @ $020000 (128K)
.3911b9	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.3911bd	a5 50		lda $50		                LDA BMP_FILE_SIZE
.3911bf	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.3911c3	a5 52		lda $52		                LDA BMP_FILE_SIZE+2
.3911c5	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.3911c9	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.3911cd	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.3911cf	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.3911d3	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.3911d5	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.3911d7	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3911db	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.3911dd	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.3911e1	18		clc		                CLC
.3911e2	a5 40		lda $40		                LDA BMP_X_SIZE              ; Load The Size in X of the image and Make it negative
.3911e4	49 ff ff	eor #$ffff	                EOR #$FFFF                  ; Inverse all bit
.3911e7	69 01 00	adc #$0001	                ADC #$0001                  ; Add 0 ()
.3911ea	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store the Results in reg B of ADDER32
.3911ee	a9 ff ff	lda #$ffff	                LDA #$FFFF
.3911f1	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in the Reminder of the 32Bits B Register
.3911f5	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.3911f9	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.3911fb	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.3911ff	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.391201	20 71 12	jsr $391271	                JSR BMP_PARSER_DMA_SHIT_OUT  ; We are going to start with the slow method
.391204	a2 55 5b	ldx #$5b55	                LDX #<>bmp_parser_msg0
.391207	80 03		bra $39120c	                BRA BMP_PARSER_END_NO_ERROR
.391209					BMP_PARSER_END_WITH_ERROR
.391209	a2 41 5b	ldx #$5b41	                LDX #<>bmp_parser_err0
.39120c					BMP_PARSER_END_NO_ERROR
.39120c	22 47 06 39	jsl $390647	                JSL IPRINT       ; print the first line
.391210	6b		rtl		                RTL
.391211					BMP_PARSER_UPDATE_LUT0
.391211	38		sec		                SEC
.391212	a0 7a 00	ldy #$007a	                LDY #$007A
.391215	a2 00 00	ldx #$0000	                LDX #$0000
.391218	e2 20		sep #$20	                SEP #$20        ; set A short
.39121a					BMP_PARSER_UPDATE_LOOP
.39121a	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.39121c	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR+0, X      ; The look-up Table point to a pixel Blue
.391220	c8		iny		                INY
.391221	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.391223	9f 01 20 af	sta $af2001,x	                STA @lGRPH_LUT0_PTR+1, X      ; The look-up Table point to a pixel Blue
.391227	c8		iny		                INY
.391228	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.39122a	9f 02 20 af	sta $af2002,x	                STA @lGRPH_LUT0_PTR+2, X      ; The look-up Table point to a pixel Blue
.39122e	c8		iny		                INY
.39122f	a9 80		lda #$80	                LDA #$80
.391231	9f 03 20 af	sta $af2003,x	                STA @lGRPH_LUT0_PTR+3, X      ; The look-up Table point to a pixel Blue
.391235	c8		iny		                INY ; For the Alpha Value, nobody cares
.391236	e8		inx		                INX
.391237	e8		inx		                INX
.391238	e8		inx		                INX
.391239	e8		inx		                INX
.39123a	e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.39123c	d0 dc		bne $39121a	                BNE BMP_PARSER_UPDATE_LOOP
.39123e	c2 20		rep #$20	                REP #$20        ; set A long
.391240	60		rts		                RTS
.391241					BMP_PARSER_UPDATE_LUT1
.391241	38		sec		                SEC
.391242	a0 36 00	ldy #$0036	                LDY #$0036
.391245	a2 00 00	ldx #$0000	                LDX #$0000
.391248	e2 20		sep #$20	                SEP #$20        ; set A short
.39124a					PALETTE_LUT1_LOOP
.39124a	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.39124c	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR+0, X      ; The look-up Table point to a pixel Blue
.391250	c8		iny		                INY
.391251	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.391253	9f 01 24 af	sta $af2401,x	                STA @lGRPH_LUT1_PTR+1, X      ; The look-up Table point to a pixel Blue
.391257	c8		iny		                INY
.391258	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.39125a	9f 02 24 af	sta $af2402,x	                STA @lGRPH_LUT1_PTR+2, X      ; The look-up Table point to a pixel Blue
.39125e	c8		iny		                INY
.39125f	a9 80		lda #$80	                LDA #$80
.391261	9f 03 24 af	sta $af2403,x	                STA @lGRPH_LUT1_PTR+3, X      ; The look-up Table point to a pixel Blue
.391265	c8		iny		                INY ; For the Alpha Value, nobody cares
.391266	e8		inx		                INX
.391267	e8		inx		                INX
.391268	e8		inx		                INX
.391269	e8		inx		                INX
.39126a	e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.39126c	d0 dc		bne $39124a	                BNE PALETTE_LUT1_LOOP
.39126e	c2 20		rep #$20	                REP #$20        ; set A long
.391270	60		rts		                RTS
.391271					BMP_PARSER_DMA_SHIT_OUT
.391271	a2 00 00	ldx #$0000	                LDX #$0000
.391274					BMP_PARSER_LOOPY
.391274	a0 00 00	ldy #$0000	                LDY #$0000
.391277	e2 20		sep #$20	                SEP #$20        ; set A short
.391279					BMP_PARSER_LOOPX
.391279	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Load First Pixel Y (will be linear)
.39127b	97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.39127d	c8		iny		                INY
.39127e	c4 40		cpy $40		                CPY BMP_X_SIZE              ; Transfer the First line
.391280	d0 f7		bne $391279	                BNE BMP_PARSER_LOOPX
.391282	20 8e 12	jsr $39128e	                JSR BMP_PARSER_COMPUTE_Y_SRC
.391285	20 a9 12	jsr $3912a9	                JSR BMP_PARSER_COMPUTE_Y_DST
.391288	e8		inx		                INX
.391289	e4 42		cpx $42		                CPX BMP_Y_SIZE
.39128b	d0 e7		bne $391274	                BNE BMP_PARSER_LOOPY
.39128d	60		rts		                RTS
.39128e					BMP_PARSER_COMPUTE_Y_SRC
.39128e	c2 20		rep #$20	                REP #$20        ; set A long
.391290	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.391292	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.391296	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.391298	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.39129c	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.3912a0	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.3912a2	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.3912a6	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.3912a8	60		rts		                RTS
.3912a9					BMP_PARSER_COMPUTE_Y_DST
.3912a9	c2 20		rep #$20	                REP #$20        ; set A long
.3912ab	18		clc		                CLC
.3912ac	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.3912ae	65 4e		adc $4e		                ADC SCRN_X_STRIDE        ; In Normal Circumstances, it is 640
.3912b0	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.3912b2	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.3912b4	69 00 00	adc #$0000	                ADC #$0000
.3912b7	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.3912b9	60		rts		                RTS
.3912ba	ea		nop		ILOOP           NOP
.3912bb	ea		nop		                NOP
.3912bc	ea		nop		                NOP
.3912bd	ea		nop		                NOP
.3912be	ea		nop		                NOP
.3912bf	ea		nop		                NOP
.3912c0	ea		nop		                NOP
.3912c1	ea		nop		                NOP
.3912c2	ea		nop		                NOP
.3912c3	ea		nop		                NOP
.3912c4	6b		rtl		                RTL
.3912c5	22 ba 12 39	jsl $3912ba	ILOOP_1         JSL ILOOP
.3912c9	22 ba 12 39	jsl $3912ba	                JSL ILOOP
.3912cd	22 ba 12 39	jsl $3912ba	                JSL ILOOP
.3912d1	22 ba 12 39	jsl $3912ba	                JSL ILOOP
.3912d5	22 ba 12 39	jsl $3912ba	                JSL ILOOP
.3912d9	22 ba 12 39	jsl $3912ba	                JSL ILOOP
.3912dd	22 ba 12 39	jsl $3912ba	                JSL ILOOP
.3912e1	22 ba 12 39	jsl $3912ba	                JSL ILOOP
.3912e5	22 ba 12 39	jsl $3912ba	                JSL ILOOP
.3912e9	22 ba 12 39	jsl $3912ba	                JSL ILOOP
.3912ed	6b		rtl		                RTL
.3912ee	22 c5 12 39	jsl $3912c5	ILOOP_1MS       JSL ILOOP_1
.3912f2	6b		rtl		                RTL
.3912f3	e0 00 00	cpx #$0000	ILOOP_MS        CPX #0
.3912f6	f0 07		beq $3912ff	                BEQ LOOP_MS_END
.3912f8	22 ee 12 39	jsl $3912ee	                JSL ILOOP_1MS
.3912fc	ca		dex		                DEX
.3912fd	80 f4		bra $3912f3	                BRA ILOOP_MS
.3912ff	6b		rtl		LOOP_MS_END     RTL
.391300					IDELAY
.391300	8b		phb		                PHB
.391301	08		php		                PHP
.391302	48		pha		                PHA             ; begin setdbr macro
.391303	08		php		                PHP
.391304	e2 20		sep #$20	                SEP #$20        ; set A short
.391306	a9 00		lda #$00	                LDA #0
.391308	48		pha		                PHA
.391309	ab		plb		                PLB
.39130a	28		plp		                PLP
.39130b	68		pla		                PLA             ; end setdbr macro
.39130c	e2 20		sep #$20	                SEP #$20        ; set A short
.39130e	a9 00		lda #$00	                LDA #0                      ; Stop the timer if it's running
.391310	8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.391314	af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Enable Timer 0 Interrupts
.391318	29 fb		and #$fb	                AND #~FNX0_INT02_TMR0
.39131a	8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.39131e	a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.391320	8d 05 07	sta $0705	                STA @w TIMERFLAGS
.391323	a9 00		lda #$00	                LDA #0
.391325	8f 61 01 00	sta $000161	                STA @l TIMER0_CHARGE_L      ; Clear the comparator for count-down
.391329	8f 62 01 00	sta $000162	                STA @l TIMER0_CHARGE_M
.39132d	8f 63 01 00	sta $000163	                STA @l TIMER0_CHARGE_H
.391331	c2 30		rep #$30	                REP #$30        ; set A&X long
.391333	8a		txa		                TXA
.391334	8f 65 01 00	sta $000165	                STA @l TIMER0_CMP_L         ; Set the number of ticks
.391338	98		tya		                TYA
.391339	e2 20		sep #$20	                SEP #$20        ; set A short
.39133b	8f 67 01 00	sta $000167	                STA @l TIMER0_CMP_H
.39133f	a9 09		lda #$09	                LDA #TMR0_EN | TMR0_UPDWN   ; Enable the timer to count up
.391341	8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.391345	a9 80		lda #$80	                LDA #TIMER0TRIGGER          ; Timer zero's trigger flag
.391347	cb		wai		loop            WAI                         ; Wait for an interrupt
.391348	1c 05 07	trb $0705	                TRB @w TIMERFLAGS           ; Check for the flag
.39134b	f0 fa		beq $391347	                BEQ loop                    ; Keep checking until it's set
.39134d	a9 00		lda #$00	                LDA #0                      ; Stop the timer
.39134f	8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.391353	a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.391355	8d 05 07	sta $0705	                STA @w TIMERFLAGS
.391358	af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Disable Timer 0 Interrupts
.39135c	09 04		ora #$04	                ORA #FNX0_INT02_TMR0
.39135e	8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.391362	28		plp		                PLP
.391363	ab		plb		                PLB
.391364	6b		rtl		                RTL
.391365					SHOW_CREDITS
.391365	48		pha		                PHA
.391366	da		phx		                PHX
.391367	5a		phy		                PHY
.391368	08		php		                PHP
.391369	e2 20		sep #$20	                SEP #$20        ; set A short
.39136b	c2 10		rep #$10	                REP #$10        ; set X long
.39136d	af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Disable the cursor
.391371	29 fe		and #$fe	                AND #~Vky_Cursor_Enable
.391373	8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.391377	a2 00 00	ldx #$0000	                LDX #0
.39137a	bf 00 00 3b	lda $3b0000,x	credit_loop     LDA @lCREDITS_TEXT,X            ; Copy a byte of text
.39137e	9f 00 a0 af	sta $afa000,x	                STA @lCS_TEXT_MEM_PTR,X
.391382	bf 00 20 3b	lda $3b2000,x	                LDA @lCREDITS_COLOR,X           ; Copy a byte of color
.391386	9f 00 c0 af	sta $afc000,x	                STA @lCS_COLOR_MEM_PTR,X
.39138a	e8		inx		                INX
.39138b	e0 00 20	cpx #$2000	                CPX #128 * 64
.39138e	d0 ea		bne $39137a	                BNE credit_loop
.391390	22 20 06 39	jsl $390620	                JSL IGETCHW                     ; Wait for a keypress
.391394	22 56 09 39	jsl $390956	                JSL ICLRSCREEN                  ; Then clear the screen and return
.391398	22 c2 07 39	jsl $3907c2	                JSL ICSRHOME                    ; Move cursor to the home position
.39139c	af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Enable the cursor
.3913a0	09 01		ora #$01	                ORA #Vky_Cursor_Enable
.3913a2	8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.3913a6	28		plp		                PLP
.3913a7	7a		ply		                PLY
.3913a8	fa		plx		                PLX
.3913a9	68		pla		                PLA
.3913aa	6b		rtl		                RTL
.3913ab	00		brk #		IRESTORE        BRK ; Warm boot routine
.3913ac	00		brk #		ISCINIT         BRK ;
.3913ad	00		brk #		IIOINIT         BRK ;
.3913ae	00		brk #		ISETLFS         BRK ; Obsolete (done in OPEN)
.3913af	00		brk #		ISETNAM         BRK ; Obsolete (done in OPEN)
.3913b0	00		brk #		IOPEN           BRK ; Open a channel for reading and/or writing. Use SETLFS and SETNAM to set the channels and filename first.
.3913b1	00		brk #		ICLOSE          BRK ; Close a channel
.3913b2	00		brk #		IGETB           BRK ; Get a byte from input channel. Return 0 if no input. Carry is set if no input.
.3913b3	00		brk #		IGETCH          BRK ; Get a character from the input channel. A=0 and Carry=1 if no data is wating
.3913b4	00		brk #		IGETS           BRK ; Get a string from the input channel. NULL terminates
.3913b5	00		brk #		IGETLINE        BRK ; Get a line of text from input channel. CR or NULL terminates.
.3913b6	00		brk #		IGETFIELD       BRK ; Get a field from the input channel. Value in A, CR, or NULL terminates
.3913b7	00		brk #		ITRIM           BRK ; Removes spaces at beginning and end of string.
.3913b8	00		brk #		IPRINTC         BRK ; Print character to screen. Handles terminal commands
.3913b9	00		brk #		IPRINTS         BRK ; Print string to screen. Handles terminal commands
.3913ba	00		brk #		IPRINTF         BRK ; Print a float value
.3913bb	00		brk #		IPRINTI         BRK ; Prints integer value in TEMP
.3913bc	00		brk #		IPRINTAI        BRK ; Prints integer value in A
.3913bd	00		brk #		IPUSHKEY        BRK ;
.3913be	00		brk #		IPUSHKEYS       BRK ;
.3913bf	00		brk #		ISCRREADLINE    BRK ; Loads the MCMDADDR/BCMDADDR variable with the address of the current line on the screen. This is called when the RETURN key is pressed and is the first step in processing an immediate mode command.
.3913c0	00		brk #		ISCRGETWORD     BRK ; Read a current word on the screen. A word ends with a space, punctuation (except _), or any control character (value < 32). Loads the address into CMPTEXT_VAL and length into CMPTEXT_LEN variables.

;******  Processing file: src\OPL2_Library.asm


;******  Processing file: src\OPL3_def.asm

=$afe600				OPL3_R_BASE               = $AFE600
=$e600					OPL3_R_BASE_LL            = $E600
=$00af					OPL3_R_BASE_HL            = $00AF
=$afe601				OPL3_R_TEST               = $AFE601 ; TEST
=$afe602				OPL3_R_TIMER1             = $AFE602 ; TIMER-1
=$afe603				OPL3_R_TIMER2             = $AFE603 ; TIMER-2
=$afe604				OPL3_R_IRQ                = $AFE604 ;
=$afe605				OPL3_R_OPL3_MODE          = $AFE605 ; Set bit 0 to 1 if you want to use in OPL3 Mode
=$afe608				OPL3_R_CSM                = $AFE608 ;
=$afe620				OPL3_R_AM_VID_EG_KSR_MULT = $AFE620 ; $40..$35 (21 Registers)
=$afe640				OPL3_R_KSL_TL             = $AFE640;  $40..$55 (21 Registers)
=$afe660				OPL3_R_AR_DR              = $AFE660;  $60..$75 (21 Registers)
=$afe680				OPL3_R_SL_RR              = $AFE680;  $80..$95 (21 Registers)
=$afe6a0				OPL3_R_FNumber            = $AFE6A0;  $A0..$A8
=$afe6b0				OPL3_R_KON_BLOCK_FNumber  = $AFE6B0;  $B0..$B9
=$afe6bd				OPL3_R_DPTH_RHYTM         = $AFE6BD;  $BD
=$afe6c0				OPL3_R_FEEDBACK           = $AFE6C0;  $C0..$C9
=$afe6e0				OPL3_R_WAVE_SELECT        = $AFE6E0;  $E0..$F5
=$afe700				OPL3_L_BASE               = $AFE700
=$e700					OPL3_L_BASE_LL            = $E700
=$00af					OPL3_L_BASE_HL            = $00AF
=$afe701				OPL3_L_TEST               = $AFE701 ; TEST
=$afe702				OPL3_L_TIMER1             = $AFE702 ; TIMER-1
=$afe703				OPL3_L_TIMER2             = $AFE703 ; TIMER-2
=$afe704				OPL3_L_IRQ                = $AFE704 ;
=$afe708				OPL3_L_CSM                = $AFE708 ;
=$afe720				OPL3_L_AM_VID_EG_KSR_MULT = $AFE720 ; $40..$35 (21 Registers)
=$afe740				OPL3_L_KSL_TL             = $AFE740;  $40..$55 (21 Registers)
=$afe760				OPL3_L_AR_DR              = $AFE760;  $60..$75 (21 Registers)
=$afe780				OPL3_L_SL_RR              = $AFE780;  $80..$95 (21 Registers)
=$afe7a0				OPL3_L_FNumber            = $AFE7A0;  $A0..$A8
=$afe7b0				OPL3_L_KON_BLOCK_FNumber  = $AFE7B0;  $B0..$B9
=$afe7bd				OPL3_L_DPTH_RHYTM         = $AFE7BD;  $BD
=$afe7c0				OPL3_L_FEEDBACK           = $AFE7C0;  $C0..$C9
=$afe7e0				OPL3_L_WAVE_SELECT        = $AFE7E0;  $E0..$F5
=$80					TREMOLO    = $80
=$40					VIBRATO    = $40
=$20					SUSTAINING = $20
=$10					KSR        = $10
=$0f					MULTIPLIER = $0F
=$c0					KEY_SCALE  = $C0
=$3f					OP_LEVEL   = $3F
=$f0					ATTACK_RT  = $F0
=$0f					DECAY_RT   = $0F
=$f0					SUSTAIN_RT = $F0
=$0f					RELEASE_RT = $0F
=$0e					FEEDBACK   = $0E
=$01					ALGORITHM  = $01
=9					OPL2_NUM_CHANNELS = 9
=0					OPERATOR1 = 0
=1					OPERATOR2 = 1
=0					MODULATOR = 0
=1					CARRIER = 1
=0					FREQ_MODULATION = 0
=1					ADDITIVE_SYNTH  = 1
=$10					DRUM_BASS   = $10
=$08					DRUM_SNARE  = $08
=$04					DRUM_TOM    = $04
=$02					DRUM_CYMBAL = $02
=$01					DRUM_HI_HAT = $01
=1					NOTE_CS =   1
=2					NOTE_D =    2
=3					NOTE_DS =   3
=4					NOTE_E =    4
=5					NOTE_F =    5
=6					NOTE_FS =   6
=7					NOTE_G =    7
=8					NOTE_GS =   8
=9					NOTE_A =    9
=10					NOTE_AS =  10
=11					NOTE_B =   11
=12					NOTE_C =   12
>3913c1	6b 01 81 01 98 01 b0 01		noteFNumbers    .word  $016B, $0181, $0198, $01B0, $01CA, $01E5, $0202, $0220, $0241, $0263, $0287, $02AE
>3913c9	ca 01 e5 01 02 02 20 02 41 02 63 02 87 02 ae 02
>3913d9	00 01 02 08 09 0a 10 11		registerOffsets_operator0 .byte $00, $01, $02, $08, $09, $0A, $10, $11, $12 ;initializers for operator 1 */
>3913e1	12
>3913e2	03 04 05 0b 0c 0d 13 14		registerOffsets_operator1 .byte $03, $04, $05, $0B, $0C, $0D, $13, $14, $15 ;initializers for operator 2 */
>3913ea	15
>3913eb	10 13 14 12 15 11		drumOffsets               .byte $10, $13, $14, $12, $15, $11
>3913f1	10 08 04 02 01			drumBits                  .byte $10, $08, $04, $02, $01
>3913f6	20 40 60 80 e0 c0		instrumentBaseRegs        .byte $20, $40, $60, $80, $E0, $C0

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Instruments.asm

>3913fc	00 24 4f f2 0b 00 0e 31		INSTRUMENT_ACCORDN    .text $00, $24, $4F, $F2, $0B, $00, $0E, $31, $00, $52, $0B, $00, 'ACCORDN   '
>391404	00 52 0b 00 41 43 43 4f 52 44 4e 20 20 20
>391412	00 31 43 6e 17 01 02 22		INSTRUMENT_BAGPIPE1   .text $00, $31, $43, $6E, $17, $01, $02, $22, $05, $8B, $0C, $02, 'BAGPIPE1  '
>39141a	05 8b 0c 02 42 41 47 50 49 50 45 31 20 20
>391428	00 30 00 ff a0 03 00 a3		INSTRUMENT_BAGPIPE2   .text $00, $30, $00, $FF, $A0, $03, $00, $A3, $00, $65, $0B, $02, 'BAGPIPE2  '
>391430	00 65 0b 02 42 41 47 50 49 50 45 32 20 20
>39143e	00 31 87 a1 11 00 08 16		INSTRUMENT_BANJO1     .text $00, $31, $87, $A1, $11, $00, $08, $16, $80, $7D, $43, $00, 'BANJO1    '
>391446	80 7d 43 00 42 41 4e 4a 4f 31 20 20 20 20
>391454	00 01 15 25 2f 00 0a 21		INSTRUMENT_BASS1      .text $00, $01, $15, $25, $2F, $00, $0A, $21, $80, $65, $6C, $00, 'BASS1     '
>39145c	80 65 6c 00 42 41 53 53 31 20 20 20 20 20
>39146a	00 01 1d f2 ef 00 0a 01		INSTRUMENT_BASS2      .text $00, $01, $1D, $F2, $EF, $00, $0A, $01, $00, $F5, $78, $00, 'BASS2     '
>391472	00 f5 78 00 42 41 53 53 32 20 20 20 20 20
>391480	00 c0 6d f9 01 01 0e 41		INSTRUMENT_BASSHARP   .text $00, $C0, $6D, $F9, $01, $01, $0E, $41, $00, $F2, $73, $00, 'BASSHARP  '
>391488	00 f2 73 00 42 41 53 53 48 41 52 50 20 20
>391496	00 30 c8 d5 19 00 0c 71		INSTRUMENT_BASSOON1   .text $00, $30, $C8, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'BASSOON1  '
>39149e	80 61 1b 00 42 41 53 53 4f 4f 4e 31 20 20
>3914ac	00 c1 4f b1 53 03 06 e0		INSTRUMENT_BASSTRLG   .text $00, $C1, $4F, $B1, $53, $03, $06, $E0, $00, $12, $74, $03, 'BASSTRLG  '
>3914b4	00 12 74 03 42 41 53 53 54 52 4c 47 20 20
>3914c2	06 00 0b a8 4c 00 00 00		INSTRUMENT_BDRUM1     .text $06, $00, $0B, $A8, $4C, $00, $00, $00, $00, $00, $00, $00, 'BDRUM1    '
>3914ca	00 00 00 00 42 44 52 55 4d 31 20 20 20 20
>3914d8	00 64 db ff 01 00 04 3e		INSTRUMENT_BELLONG    .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F3, $62, $00, 'BELLONG   '
>3914e0	c0 f3 62 00 42 45 4c 4c 4f 4e 47 20 20 20
>3914ee	00 07 4f f2 60 00 08 12		INSTRUMENT_BELLS      .text $00, $07, $4F, $F2, $60, $00, $08, $12, $00, $F2, $72, $00, 'BELLS     '
>3914f6	00 f2 72 00 42 45 4c 4c 53 20 20 20 20 20
>391504	00 64 db ff 01 00 04 3e		INSTRUMENT_BELSHORT   .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F5, $F3, $00, 'BELSHORT  '
>39150c	c0 f5 f3 00 42 45 4c 53 48 4f 52 54 20 20
>39151a	00 20 4b 7b 04 01 0e 21		INSTRUMENT_BNCEBASS   .text $00, $20, $4B, $7B, $04, $01, $0E, $21, $00, $F5, $72, $00, 'BNCEBASS  '
>391522	00 f5 72 00 42 4e 43 45 42 41 53 53 20 20
>391530	00 21 16 71 ae 00 0e 21		INSTRUMENT_BRASS1     .text $00, $21, $16, $71, $AE, $00, $0E, $21, $00, $81, $9E, $00, 'BRASS1    '
>391538	00 81 9e 00 42 52 41 53 53 31 20 20 20 20
>391546	00 30 c5 52 11 00 00 31		INSTRUMENT_CBASSOON   .text $00, $30, $C5, $52, $11, $00, $00, $31, $80, $31, $2E, $00, 'CBASSOON  '
>39154e	80 31 2e 00 43 42 41 53 53 4f 4f 4e 20 20
>39155c	00 33 87 01 10 00 08 14		INSTRUMENT_CELESTA    .text $00, $33, $87, $01, $10, $00, $08, $14, $80, $7D, $33, $00, 'CELESTA   '
>391564	80 7d 33 00 43 45 4c 45 53 54 41 20 20 20
>391572	00 32 16 73 24 00 0e 21		INSTRUMENT_CLAR1      .text $00, $32, $16, $73, $24, $00, $0E, $21, $80, $75, $57, $00, 'CLAR1     '
>39157a	80 75 57 00 43 4c 41 52 31 20 20 20 20 20
>391588	00 31 1c 41 1b 00 0c 60		INSTRUMENT_CLAR2      .text $00, $31, $1C, $41, $1B, $00, $0C, $60, $80, $42, $3B, $00, 'CLAR2     '
>391590	80 42 3b 00 43 4c 41 52 32 20 20 20 20 20
>39159e	00 32 9a 51 1b 00 0c 61		INSTRUMENT_CLARINET   .text $00, $32, $9A, $51, $1B, $00, $0C, $61, $82, $A2, $3B, $00, 'CLARINET  '
>3915a6	82 a2 3b 00 43 4c 41 52 49 4e 45 54 20 20
>3915b4	00 11 0d f2 01 00 0a 15		INSTRUMENT_CLAVECIN   .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'CLAVECIN  '
>3915bc	0d f2 b1 00 43 4c 41 56 45 43 49 4e 20 20
>3915ca	00 00 02 f0 ff 00 06 11		INSTRUMENT_CROMORNE   .text $00, $00, $02, $F0, $FF, $00, $06, $11, $80, $F0, $FF, $00, 'CROMORNE  '
>3915d2	80 f0 ff 00 43 52 4f 4d 4f 52 4e 45 20 20
>3915e0	09 01 00 f5 b5 00 00 00		INSTRUMENT_CYMBAL1    .text $09, $01, $00, $F5, $B5, $00, $00, $00, $00, $00, $00, $00, 'CYMBAL1   '
>3915e8	00 00 00 00 43 59 4d 42 41 4c 31 20 20 20
>3915f6	00 05 8a f0 7b 00 08 01		INSTRUMENT_ELCLAV1    .text $00, $05, $8A, $F0, $7B, $00, $08, $01, $80, $F4, $7B, $00, 'ELCLAV1   '
>3915fe	80 f4 7b 00 45 4c 43 4c 41 56 31 20 20 20
>39160c	00 01 49 f1 53 01 06 11		INSTRUMENT_ELCLAV2    .text $00, $01, $49, $F1, $53, $01, $06, $11, $00, $F1, $74, $02, 'ELCLAV2   '
>391614	00 f1 74 02 45 4c 43 4c 41 56 32 20 20 20
>391622	00 e0 6d 57 04 01 0e 61		INSTRUMENT_ELECFL     .text $00, $E0, $6D, $57, $04, $01, $0E, $61, $00, $67, $7D, $00, 'ELECFL    '
>39162a	00 67 7d 00 45 4c 45 43 46 4c 20 20 20 20
>391638	00 13 97 9a 12 02 0e 91		INSTRUMENT_ELECVIBE   .text $00, $13, $97, $9A, $12, $02, $0E, $91, $80, $9B, $11, $00, 'ELECVIBE  '
>391640	80 9b 11 00 45 4c 45 43 56 49 42 45 20 20
>39164e	00 f1 01 97 17 00 08 21		INSTRUMENT_ELGUIT1    .text $00, $F1, $01, $97, $17, $00, $08, $21, $0D, $F1, $18, $00, 'ELGUIT1   '
>391656	0d f1 18 00 45 4c 47 55 49 54 31 20 20 20
>391664	00 13 96 ff 21 00 0a 11		INSTRUMENT_ELGUIT2    .text $00, $13, $96, $FF, $21, $00, $0A, $11, $80, $FF, $03, $00, 'ELGUIT2   '
>39166c	80 ff 03 00 45 4c 47 55 49 54 32 20 20 20
>39167a	00 07 8f 82 7d 00 0c 14		INSTRUMENT_ELGUIT3    .text $00, $07, $8F, $82, $7D, $00, $0C, $14, $80, $82, $7D, $00, 'ELGUIT3   '
>391682	80 82 7d 00 45 4c 47 55 49 54 33 20 20 20
>391690	00 05 8f da 15 00 0a 01		INSTRUMENT_ELGUIT4    .text $00, $05, $8F, $DA, $15, $00, $0A, $01, $80, $F9, $14, $02, 'ELGUIT4   '
>391698	80 f9 14 02 45 4c 47 55 49 54 34 20 20 20
>3916a6	00 b2 cd 91 2a 02 09 b1		INSTRUMENT_ELORGAN1   .text $00, $B2, $CD, $91, $2A, $02, $09, $B1, $80, $91, $2A, $01, 'ELORGAN1  '
>3916ae	80 91 2a 01 45 4c 4f 52 47 41 4e 31 20 20
>3916bc	00 01 4f f1 50 00 06 01		INSTRUMENT_ELPIANO1   .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'ELPIANO1  '
>3916c4	04 d2 7c 00 45 4c 50 49 41 4e 4f 31 20 20
>3916d2	00 02 22 f2 13 00 0e 02		INSTRUMENT_ELPIANO2   .text $00, $02, $22, $F2, $13, $00, $0E, $02, $00, $F5, $43, $00, 'ELPIANO2  '
>3916da	00 f5 43 00 45 4c 50 49 41 4e 4f 32 20 20
>3916e8	00 81 63 f3 58 00 00 01		INSTRUMENT_EPIANO1A   .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'EPIANO1A  '
>3916f0	80 f2 58 00 45 50 49 41 4e 4f 31 41 20 20
>3916fe	00 07 1f f5 fa 00 0e 01		INSTRUMENT_EPIANO1B   .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'EPIANO1B  '
>391706	57 f5 fa 00 45 50 49 41 4e 4f 31 42 20 20
>391714	00 21 83 74 17 00 07 a2		INSTRUMENT_FLUTE      .text $00, $21, $83, $74, $17, $00, $07, $A2, $8D, $65, $17, $00, 'FLUTE     '
>39171c	8d 65 17 00 46 4c 55 54 45 20 20 20 20 20
>39172a	00 a1 27 74 8f 00 02 a1		INSTRUMENT_FLUTE1     .text $00, $A1, $27, $74, $8F, $00, $02, $A1, $80, $65, $2A, $00, 'FLUTE1    '
>391732	80 65 2a 00 46 4c 55 54 45 31 20 20 20 20
>391740	00 e0 ec 6e 8f 00 0e 61		INSTRUMENT_FLUTE2     .text $00, $E0, $EC, $6E, $8F, $00, $0E, $61, $00, $65, $2A, $00, 'FLUTE2    '
>391748	00 65 2a 00 46 4c 55 54 45 32 20 20 20 20
>391756	00 21 9f 53 5a 00 0c 21		INSTRUMENT_FRHORN1    .text $00, $21, $9F, $53, $5A, $00, $0C, $21, $80, $AA, $1A, $00, 'FRHORN1   '
>39175e	80 aa 1a 00 46 52 48 4f 52 4e 31 20 20 20
>39176c	00 20 8e a5 8f 02 06 21		INSTRUMENT_FRHORN2    .text $00, $20, $8E, $A5, $8F, $02, $06, $21, $00, $36, $3D, $00, 'FRHORN2   '
>391774	00 36 3d 00 46 52 48 4f 52 4e 32 20 20 20
>391782	00 f0 18 55 ef 02 00 e0		INSTRUMENT_FSTRP1     .text $00, $F0, $18, $55, $EF, $02, $00, $E0, $80, $87, $1E, $03, 'FSTRP1    '
>39178a	80 87 1e 03 46 53 54 52 50 31 20 20 20 20
>391798	00 70 16 55 2f 02 0c e0		INSTRUMENT_FSTRP2     .text $00, $70, $16, $55, $2F, $02, $0C, $E0, $80, $87, $1E, $03, 'FSTRP2    '
>3917a0	80 87 1e 03 46 53 54 52 50 32 20 20 20 20
>3917ae	00 f1 00 97 13 00 0a 25		INSTRUMENT_FUZGUIT1   .text $00, $F1, $00, $97, $13, $00, $0A, $25, $0D, $F1, $18, $01, 'FUZGUIT1  '
>3917b6	0d f1 18 01 46 55 5a 47 55 49 54 31 20 20
>3917c4	00 31 48 f1 53 00 06 32		INSTRUMENT_FUZGUIT2   .text $00, $31, $48, $F1, $53, $00, $06, $32, $00, $F2, $27, $02, 'FUZGUIT2  '
>3917cc	00 f2 27 02 46 55 5a 47 55 49 54 32 20 20
>3917da	00 01 11 f2 1f 00 0a 01		INSTRUMENT_GUITAR1    .text $00, $01, $11, $F2, $1F, $00, $0A, $01, $00, $F5, $88, $00, 'GUITAR1   '
>3917e2	00 f5 88 00 47 55 49 54 41 52 31 20 20 20
>3917f0	00 02 29 f5 75 00 00 01		INSTRUMENT_HARP1      .text $00, $02, $29, $F5, $75, $00, $00, $01, $83, $F2, $F3, $00, 'HARP1     '
>3917f8	83 f2 f3 00 48 41 52 50 31 20 20 20 20 20
>391806	00 02 99 f5 55 00 00 01		INSTRUMENT_HARP2      .text $00, $02, $99, $F5, $55, $00, $00, $01, $80, $F6, $53, $00, 'HARP2     '
>39180e	80 f6 53 00 48 41 52 50 32 20 20 20 20 20
>39181c	00 02 57 f5 56 00 00 01		INSTRUMENT_HARP3      .text $00, $02, $57, $F5, $56, $00, $00, $01, $80, $F6, $54, $00, 'HARP3     '
>391824	80 f6 54 00 48 41 52 50 33 20 20 20 20 20
>391832	00 02 29 f5 75 00 00 01		INSTRUMENT_HARPE1     .text $00, $02, $29, $F5, $75, $00, $00, $01, $03, $F2, $F3, $00, 'HARPE1    '
>39183a	03 f2 f3 00 48 41 52 50 45 31 20 20 20 20
>391848	00 32 87 a1 10 00 08 16		INSTRUMENT_HARPSI1    .text $00, $32, $87, $A1, $10, $00, $08, $16, $80, $7D, $33, $00, 'HARPSI1   '
>391850	80 7d 33 00 48 41 52 50 53 49 31 20 20 20
>39185e	00 33 87 a1 10 00 06 15		INSTRUMENT_HARPSI2    .text $00, $33, $87, $A1, $10, $00, $06, $15, $80, $7D, $43, $00, 'HARPSI2   '
>391866	80 7d 43 00 48 41 52 50 53 49 32 20 20 20
>391874	00 35 84 a8 10 00 08 18		INSTRUMENT_HARPSI3    .text $00, $35, $84, $A8, $10, $00, $08, $18, $80, $7D, $33, $00, 'HARPSI3   '
>39187c	80 7d 33 00 48 41 52 50 53 49 33 20 20 20
>39188a	00 11 0d f2 01 00 0a 15		INSTRUMENT_HARPSI4    .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'HARPSI4   '
>391892	0d f2 b1 00 48 41 52 50 53 49 34 20 20 20
>3918a0	00 36 87 8a 00 00 08 1a		INSTRUMENT_HARPSI5    .text $00, $36, $87, $8A, $00, $00, $08, $1A, $80, $7F, $33, $00, 'HARPSI5   '
>3918a8	80 7f 33 00 48 41 52 50 53 49 35 20 20 20
>3918b6	00 f0 00 1e 11 01 08 e2		INSTRUMENT_HELICPTR   .text $00, $F0, $00, $1E, $11, $01, $08, $E2, $C0, $11, $11, $01, 'HELICPTR  '
>3918be	c0 11 11 01 48 45 4c 49 43 50 54 52 20 20
>3918cc	0a 01 00 f7 b5 00 00 00		INSTRUMENT_HIHAT1     .text $0A, $01, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'HIHAT1    '
>3918d4	00 00 00 00 48 49 48 41 54 31 20 20 20 20
>3918e2	0a 01 03 da 18 00 00 00		INSTRUMENT_HIHAT2     .text $0A, $01, $03, $DA, $18, $00, $00, $00, $00, $00, $00, $00, 'HIHAT2    '
>3918ea	00 00 00 00 48 49 48 41 54 32 20 20 20 20
>3918f8	00 87 4d 78 42 00 0a 94		INSTRUMENT_JAVAICAN   .text $00, $87, $4D, $78, $42, $00, $0A, $94, $00, $85, $54, $00, 'JAVAICAN  '
>391900	00 85 54 00 4a 41 56 41 49 43 41 4e 20 20
>39190e	00 03 5e 85 51 01 0e 11		INSTRUMENT_JAZZGUIT   .text $00, $03, $5E, $85, $51, $01, $0E, $11, $00, $D2, $71, $00, 'JAZZGUIT  '
>391916	00 d2 71 00 4a 41 5a 5a 47 55 49 54 20 20
>391924	00 00 50 f2 70 00 0e 13		INSTRUMENT_JEWSHARP   .text $00, $00, $50, $F2, $70, $00, $0E, $13, $00, $F2, $72, $00, 'JEWSHARP  '
>39192c	00 f2 72 00 4a 45 57 53 48 41 52 50 20 20
>39193a	00 00 02 f0 fa 01 06 11		INSTRUMENT_KEYBRD1    .text $00, $00, $02, $F0, $FA, $01, $06, $11, $80, $F2, $FA, $01, 'KEYBRD1   '
>391942	80 f2 fa 01 4b 45 59 42 52 44 31 20 20 20
>391950	00 01 8f f2 bd 00 08 14		INSTRUMENT_KEYBRD2    .text $00, $01, $8F, $F2, $BD, $00, $08, $14, $80, $82, $BD, $00, 'KEYBRD2   '
>391958	80 82 bd 00 4b 45 59 42 52 44 32 20 20 20
>391966	00 01 00 f0 f0 00 00 e4		INSTRUMENT_KEYBRD3    .text $00, $01, $00, $F0, $F0, $00, $00, $E4, $03, $F3, $36, $00, 'KEYBRD3   '
>39196e	03 f3 36 00 4b 45 59 42 52 44 33 20 20 20
>39197c	09 e6 00 25 b5 00 00 00		INSTRUMENT_LASER      .text $09, $E6, $00, $25, $B5, $00, $00, $00, $00, $00, $00, $00, 'LASER     '
>391984	00 00 00 00 4c 41 53 45 52 20 20 20 20 20
>391992	00 32 44 f8 ff 00 0e 11		INSTRUMENT_LOGDRUM1   .text $00, $32, $44, $F8, $FF, $00, $0E, $11, $00, $F5, $7F, $00, 'LOGDRUM1  '
>39199a	00 f5 7f 00 4c 4f 47 44 52 55 4d 31 20 20
>3919a8	00 05 4e da 25 00 0a 01		INSTRUMENT_MARIMBA1   .text $00, $05, $4E, $DA, $25, $00, $0A, $01, $00, $F9, $15, $00, 'MARIMBA1  '
>3919b0	00 f9 15 00 4d 41 52 49 4d 42 41 31 20 20
>3919be	00 85 4e da 15 00 0a 81		INSTRUMENT_MARIMBA2   .text $00, $85, $4E, $DA, $15, $00, $0A, $81, $80, $F9, $13, $00, 'MARIMBA2  '
>3919c6	80 f9 13 00 4d 41 52 49 4d 42 41 32 20 20
>3919d4	00 30 00 fe 11 01 08 ae		INSTRUMENT_MDRNPHON   .text $00, $30, $00, $FE, $11, $01, $08, $AE, $C0, $F1, $19, $01, 'MDRNPHON  '
>3919dc	c0 f1 19 01 4d 44 52 4e 50 48 4f 4e 20 20
>3919ea	07 0c 00 c8 b6 01 00 00		INSTRUMENT_MLTRDRUM   .text $07, $0C, $00, $C8, $B6, $01, $00, $00, $00, $00, $00, $00, 'MLTRDRUM  '
>3919f2	00 00 00 00 4d 4c 54 52 44 52 55 4d 20 20
>391a00	00 20 90 f5 9e 02 0c 11		INSTRUMENT_MOOGSYNT   .text $00, $20, $90, $F5, $9E, $02, $0C, $11, $00, $F4, $5B, $03, 'MOOGSYNT  '
>391a08	00 f4 5b 03 4d 4f 4f 47 53 59 4e 54 20 20
>391a16	00 0e 40 d1 53 00 0e 0e		INSTRUMENT_NOISE1     .text $00, $0E, $40, $D1, $53, $00, $0E, $0E, $00, $F2, $7F, $03, 'NOISE1    '
>391a1e	00 f2 7f 03 4e 4f 49 53 45 31 20 20 20 20
>391a2c	00 b1 c5 6e 17 00 02 22		INSTRUMENT_OBOE1      .text $00, $B1, $C5, $6E, $17, $00, $02, $22, $05, $8B, $0E, $00, 'OBOE1     '
>391a34	05 8b 0e 00 4f 42 4f 45 31 20 20 20 20 20
>391a42	00 65 d2 81 03 00 02 71		INSTRUMENT_ORGAN1     .text $00, $65, $D2, $81, $03, $00, $02, $71, $80, $F1, $05, $00, 'ORGAN1    '
>391a4a	80 f1 05 00 4f 52 47 41 4e 31 20 20 20 20
>391a58	00 24 80 ff 0f 00 01 21		INSTRUMENT_ORGAN2     .text $00, $24, $80, $FF, $0F, $00, $01, $21, $80, $FF, $0F, $00, 'ORGAN2    '
>391a60	80 ff 0f 00 4f 52 47 41 4e 32 20 20 20 20
>391a6e	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3     .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $80, $F0, $1F, $00, 'ORGAN3    '
>391a76	80 f0 1f 00 4f 52 47 41 4e 33 20 20 20 20
>391a84	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3A    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $8D, $F0, $13, $00, 'ORGAN3A   '
>391a8c	8d f0 13 00 4f 52 47 41 4e 33 41 20 20 20
>391a9a	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3B    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $92, $F0, $12, $00, 'ORGAN3B   '
>391aa2	92 f0 12 00 4f 52 47 41 4e 33 42 20 20 20
>391ab0	00 0c 00 f8 b5 00 01 00		INSTRUMENT_ORGNPERC   .text $00, $0C, $00, $F8, $B5, $00, $01, $00, $00, $D6, $4F, $00, 'ORGNPERC  '
>391ab8	00 d6 4f 00 4f 52 47 4e 50 45 52 43 20 20
>391ac6	00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE1     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F1, $B2, $00, 'PHONE1    '
>391ace	08 f1 b2 00 50 48 4f 4e 45 31 20 20 20 20
>391adc	00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE2     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $0A, $F1, $B4, $00, 'PHONE2    '
>391ae4	0a f1 b4 00 50 48 4f 4e 45 32 20 20 20 20
>391af2	00 81 63 f3 58 00 00 01		INSTRUMENT_PIAN1A     .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'PIAN1A    '
>391afa	80 f2 58 00 50 49 41 4e 31 41 20 20 20 20
>391b08	00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1B     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $26, $F5, $FA, $00, 'PIAN1B    '
>391b10	26 f5 fa 00 50 49 41 4e 31 42 20 20 20 20
>391b1e	00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1C     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'PIAN1C    '
>391b26	57 f5 fa 00 50 49 41 4e 31 43 20 20 20 20
>391b34	00 03 4f f1 53 00 06 17		INSTRUMENT_PIANO      .text $00, $03, $4F, $F1, $53, $00, $06, $17, $00, $F2, $74, $00, 'PIANO     '
>391b3c	00 f2 74 00 50 49 41 4e 4f 20 20 20 20 20
>391b4a	00 01 4f f1 53 00 06 11		INSTRUMENT_PIANO1     .text $00, $01, $4F, $F1, $53, $00, $06, $11, $00, $D2, $74, $00, 'PIANO1    '
>391b52	00 d2 74 00 50 49 41 4e 4f 31 20 20 20 20
>391b60	00 41 9d f2 51 00 06 13		INSTRUMENT_PIANO2     .text $00, $41, $9D, $F2, $51, $00, $06, $13, $00, $F2, $F1, $00, 'PIANO2    '
>391b68	00 f2 f1 00 50 49 41 4e 4f 32 20 20 20 20
>391b76	00 01 4f f1 50 00 06 01		INSTRUMENT_PIANO3     .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'PIANO3    '
>391b7e	04 d2 7c 00 50 49 41 4e 4f 33 20 20 20 20
>391b8c	00 01 4d f1 60 00 08 11		INSTRUMENT_PIANO4     .text $00, $01, $4D, $F1, $60, $00, $08, $11, $00, $D2, $7B, $00, 'PIANO4    '
>391b94	00 d2 7b 00 50 49 41 4e 4f 34 20 20 20 20
>391ba2	00 03 4f f1 53 00 06 17		INSTRUMENT_PIANOBEL   .text $00, $03, $4F, $F1, $53, $00, $06, $17, $03, $F2, $74, $00, 'PIANOBEL  '
>391baa	03 f2 74 00 50 49 41 4e 4f 42 45 4c 20 20
>391bb8	00 01 cf f1 53 00 02 12		INSTRUMENT_PIANOF     .text $00, $01, $CF, $F1, $53, $00, $02, $12, $00, $F2, $83, $00, 'PIANOF    '
>391bc0	00 f2 83 00 50 49 41 4e 4f 46 20 20 20 20
>391bce	00 10 00 75 93 01 00 01		INSTRUMENT_POPBASS1   .text $00, $10, $00, $75, $93, $01, $00, $01, $00, $F5, $82, $01, 'POPBASS1  '
>391bd6	00 f5 82 01 50 4f 50 42 41 53 53 31 20 20
>391be4	07 0c 00 c7 b4 00 00 00		INSTRUMENT_RKSNARE1   .text $07, $0C, $00, $C7, $B4, $00, $00, $00, $00, $00, $00, $00, 'RKSNARE1  '
>391bec	00 00 00 00 52 4b 53 4e 41 52 45 31 20 20
>391bfa	00 01 4f 71 53 00 0a 12		INSTRUMENT_SAX1       .text $00, $01, $4F, $71, $53, $00, $0A, $12, $00, $52, $7C, $00, 'SAX1      '
>391c02	00 52 7c 00 53 41 58 31 20 20 20 20 20 20
>391c10	00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH    .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH   '
>391c18	00 5c dc 00 53 43 52 41 54 43 48 20 20 20
>391c26	00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH4   .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH4  '
>391c2e	00 5c dc 00 53 43 52 41 54 43 48 34 20 20
>391c3c	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SDRUM2     .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SDRUM2    '
>391c44	00 f6 b4 00 53 44 52 55 4d 32 20 20 20 20
>391c52	00 e4 0e ff 3f 01 00 c0		INSTRUMENT_SHRTVIBE   .text $00, $E4, $0E, $FF, $3F, $01, $00, $C0, $00, $F3, $07, $00, 'SHRTVIBE  '
>391c5a	00 f3 07 00 53 48 52 54 56 49 42 45 20 20
>391c68	00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR1     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $00, 'SITAR1    '
>391c70	40 f1 53 00 53 49 54 41 52 31 20 20 20 20
>391c7e	00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR2     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $01, 'SITAR2    '
>391c86	40 f1 53 01 53 49 54 41 52 32 20 20 20 20
>391c94	00 61 0c 81 03 00 08 71		INSTRUMENT_SNAKEFL    .text $00, $61, $0C, $81, $03, $00, $08, $71, $80, $61, $0C, $00, 'SNAKEFL   '
>391c9c	80 61 0c 00 53 4e 41 4b 45 46 4c 20 20 20
>391caa	07 0c 00 f8 b5 00 00 00		INSTRUMENT_SNARE1     .text $07, $0C, $00, $F8, $B5, $00, $00, $00, $00, $00, $00, $00, 'SNARE1    '
>391cb2	00 00 00 00 53 4e 41 52 45 31 20 20 20 20
>391cc0	00 06 00 f0 f0 00 0e c4		INSTRUMENT_SNRSUST    .text $00, $06, $00, $F0, $F0, $00, $0E, $C4, $03, $C4, $34, $00, 'SNRSUST   '
>391cc8	03 c4 34 00 53 4e 52 53 55 53 54 20 20 20
>391cd6	00 70 1c 51 03 02 0e 20		INSTRUMENT_SOLOVLN    .text $00, $70, $1C, $51, $03, $02, $0E, $20, $00, $54, $67, $02, 'SOLOVLN   '
>391cde	00 54 67 02 53 4f 4c 4f 56 4c 4e 20 20 20
>391cec	00 01 46 f1 83 00 06 61		INSTRUMENT_STEELGT1   .text $00, $01, $46, $F1, $83, $00, $06, $61, $03, $31, $86, $00, 'STEELGT1  '
>391cf4	03 31 86 00 53 54 45 45 4c 47 54 31 20 20
>391d02	00 01 47 f1 83 00 06 61		INSTRUMENT_STEELGT2   .text $00, $01, $47, $F1, $83, $00, $06, $61, $03, $91, $86, $00, 'STEELGT2  '
>391d0a	03 91 86 00 53 54 45 45 4c 47 54 32 20 20
>391d18	00 b1 8b 71 11 00 06 61		INSTRUMENT_STRINGS1   .text $00, $B1, $8B, $71, $11, $00, $06, $61, $40, $42, $15, $01, 'STRINGS1  '
>391d20	40 42 15 01 53 54 52 49 4e 47 53 31 20 20
>391d2e	00 e1 4f b1 d3 03 06 21		INSTRUMENT_STRNLONG   .text $00, $E1, $4F, $B1, $D3, $03, $06, $21, $00, $12, $74, $01, 'STRNLONG  '
>391d36	00 12 74 01 53 54 52 4e 4c 4f 4e 47 20 20
>391d44	00 55 97 2a 02 00 00 12		INSTRUMENT_SYN1       .text $00, $55, $97, $2A, $02, $00, $00, $12, $80, $42, $F3, $00, 'SYN1      '
>391d4c	80 42 f3 00 53 59 4e 31 20 20 20 20 20 20
>391d5a	00 13 97 9a 12 00 0e 11		INSTRUMENT_SYN2       .text $00, $13, $97, $9A, $12, $00, $0E, $11, $80, $9B, $14, $00, 'SYN2      '
>391d62	80 9b 14 00 53 59 4e 32 20 20 20 20 20 20
>391d70	00 11 8a f1 11 00 06 01		INSTRUMENT_SYN3       .text $00, $11, $8A, $F1, $11, $00, $06, $01, $40, $F1, $B3, $00, 'SYN3      '
>391d78	40 f1 b3 00 53 59 4e 33 20 20 20 20 20 20
>391d86	00 21 0d e9 3a 00 0a 22		INSTRUMENT_SYN4       .text $00, $21, $0D, $E9, $3A, $00, $0A, $22, $80, $65, $6C, $00, 'SYN4      '
>391d8e	80 65 6c 00 53 59 4e 34 20 20 20 20 20 20
>391d9c	00 01 4f 71 53 00 06 19		INSTRUMENT_SYN5       .text $00, $01, $4F, $71, $53, $00, $06, $19, $00, $52, $7C, $00, 'SYN5      '
>391da4	00 52 7c 00 53 59 4e 35 20 20 20 20 20 20
>391db2	00 24 0f 41 7e 00 0a 21		INSTRUMENT_SYN6       .text $00, $24, $0F, $41, $7E, $00, $0A, $21, $00, $F1, $5E, $00, 'SYN6      '
>391dba	00 f1 5e 00 53 59 4e 36 20 20 20 20 20 20
>391dc8	00 07 87 f0 05 00 04 01		INSTRUMENT_SYN9       .text $00, $07, $87, $F0, $05, $00, $04, $01, $80, $F0, $05, $00, 'SYN9      '
>391dd0	80 f0 05 00 53 59 4e 39 20 20 20 20 20 20
>391dde	00 26 03 e0 f0 00 08 1e		INSTRUMENT_SYNBAL1    .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'SYNBAL1   '
>391de6	00 ff 31 00 53 59 4e 42 41 4c 31 20 20 20
>391df4	00 28 03 e0 f0 00 04 13		INSTRUMENT_SYNBAL2    .text $00, $28, $03, $E0, $F0, $00, $04, $13, $00, $E8, $11, $00, 'SYNBAL2   '
>391dfc	00 e8 11 00 53 59 4e 42 41 4c 32 20 20 20
>391e0a	00 30 88 d5 19 00 0c 71		INSTRUMENT_SYNBASS1   .text $00, $30, $88, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'SYNBASS1  '
>391e12	80 61 1b 00 53 59 4e 42 41 53 53 31 20 20
>391e20	00 81 86 65 01 00 0c 11		INSTRUMENT_SYNBASS2   .text $00, $81, $86, $65, $01, $00, $0C, $11, $00, $32, $74, $00, 'SYNBASS2  '
>391e28	00 32 74 00 53 59 4e 42 41 53 53 32 20 20
>391e36	00 81 83 65 05 00 0a 51		INSTRUMENT_SYNBASS4   .text $00, $81, $83, $65, $05, $00, $0A, $51, $00, $32, $74, $00, 'SYNBASS4  '
>391e3e	00 32 74 00 53 59 4e 42 41 53 53 34 20 20
>391e4c	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR1    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F8, $B6, $00, 'SYNSNR1   '
>391e54	00 f8 b6 00 53 59 4e 53 4e 52 31 20 20 20
>391e62	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR2    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SYNSNR2   '
>391e6a	00 f6 b4 00 53 59 4e 53 4e 52 32 20 20 20
>391e78	00 8f 81 ef 01 00 04 01		INSTRUMENT_TINCAN1    .text $00, $8F, $81, $EF, $01, $00, $04, $01, $00, $98, $F1, $00, 'TINCAN1   '
>391e80	00 98 f1 00 54 49 4e 43 41 4e 31 20 20 20
>391e8e	08 04 00 f7 b5 00 00 00		INSTRUMENT_TOM1       .text $08, $04, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'TOM1      '
>391e96	00 00 00 00 54 4f 4d 31 20 20 20 20 20 20
>391ea4	08 02 00 c8 97 00 00 00		INSTRUMENT_TOM2       .text $08, $02, $00, $C8, $97, $00, $00, $00, $00, $00, $00, $00, 'TOM2      '
>391eac	00 00 00 00 54 4f 4d 32 20 20 20 20 20 20
>391eba	00 17 4f f2 61 00 08 12		INSTRUMENT_TRAINBEL   .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F2, $74, $00, 'TRAINBEL  '
>391ec2	08 f2 74 00 54 52 41 49 4e 42 45 4c 20 20
>391ed0	00 26 03 e0 f0 00 08 1e		INSTRUMENT_TRIANGLE   .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'TRIANGLE  '
>391ed8	00 ff 31 00 54 52 49 41 4e 47 4c 45 20 20
>391ee6	00 b1 1c 41 1f 00 0e 61		INSTRUMENT_TROMB1     .text $00, $B1, $1C, $41, $1F, $00, $0E, $61, $80, $92, $3B, $00, 'TROMB1    '
>391eee	80 92 3b 00 54 52 4f 4d 42 31 20 20 20 20
>391efc	00 21 1c 53 1d 00 0c 61		INSTRUMENT_TROMB2     .text $00, $21, $1C, $53, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TROMB2    '
>391f04	80 52 3b 00 54 52 4f 4d 42 32 20 20 20 20
>391f12	00 31 1c 41 0b 00 0e 61		INSTRUMENT_TRUMPET1   .text $00, $31, $1C, $41, $0B, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET1  '
>391f1a	80 92 3b 00 54 52 55 4d 50 45 54 31 20 20
>391f28	00 31 1c 23 1d 00 0c 61		INSTRUMENT_TRUMPET2   .text $00, $31, $1C, $23, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TRUMPET2  '
>391f30	80 52 3b 00 54 52 55 4d 50 45 54 32 20 20
>391f3e	00 31 1c 41 01 00 0e 61		INSTRUMENT_TRUMPET3   .text $00, $31, $1C, $41, $01, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET3  '
>391f46	80 92 3b 00 54 52 55 4d 50 45 54 33 20 20
>391f54	00 31 1c 41 0b 00 0c 61		INSTRUMENT_TRUMPET4   .text $00, $31, $1C, $41, $0B, $00, $0C, $61, $80, $92, $3B, $00, 'TRUMPET4  '
>391f5c	80 92 3b 00 54 52 55 4d 50 45 54 34 20 20
>391f6a	00 21 19 43 8c 00 0c 21		INSTRUMENT_TUBA1      .text $00, $21, $19, $43, $8C, $00, $0C, $21, $80, $85, $2F, $00, 'TUBA1     '
>391f72	80 85 2f 00 54 55 42 41 31 20 20 20 20 20
>391f80	00 84 53 f5 33 00 06 a0		INSTRUMENT_VIBRA1     .text $00, $84, $53, $F5, $33, $00, $06, $A0, $80, $FD, $25, $00, 'VIBRA1    '
>391f88	80 fd 25 00 56 49 42 52 41 31 20 20 20 20
>391f96	00 06 73 f6 54 00 00 81		INSTRUMENT_VIBRA2     .text $00, $06, $73, $F6, $54, $00, $00, $81, $03, $F2, $B3, $00, 'VIBRA2    '
>391f9e	03 f2 b3 00 56 49 42 52 41 32 20 20 20 20
>391fac	00 93 97 aa 12 02 0e 91		INSTRUMENT_VIBRA3     .text $00, $93, $97, $AA, $12, $02, $0E, $91, $80, $AC, $21, $00, 'VIBRA3    '
>391fb4	80 ac 21 00 56 49 42 52 41 33 20 20 20 20
>391fc2	00 31 1c 51 03 00 0e 61		INSTRUMENT_VIOLIN1    .text $00, $31, $1C, $51, $03, $00, $0E, $61, $80, $54, $67, $00, 'VIOLIN1   '
>391fca	80 54 67 00 56 49 4f 4c 49 4e 31 20 20 20
>391fd8	00 e1 88 62 29 00 0c 22		INSTRUMENT_VIOLIN2    .text $00, $E1, $88, $62, $29, $00, $0C, $22, $80, $53, $2C, $00, 'VIOLIN2   '
>391fe0	80 53 2c 00 56 49 4f 4c 49 4e 32 20 20 20
>391fee	00 e1 88 64 29 00 06 22		INSTRUMENT_VIOLIN3    .text $00, $E1, $88, $64, $29, $00, $06, $22, $83, $53, $2C, $00, 'VIOLIN3   '
>391ff6	83 53 2c 00 56 49 4f 4c 49 4e 33 20 20 20
>392004	00 31 9c f1 f9 00 0e 31		INSTRUMENT_VLNPIZZ1   .text $00, $31, $9C, $F1, $F9, $00, $0E, $31, $80, $F7, $E6, $00, 'VLNPIZZ1  '
>39200c	80 f7 e6 00 56 4c 4e 50 49 5a 5a 31 20 20
>39201a	00 00 02 00 f0 00 0e 14		INSTRUMENT_WAVE       .text $00, $00, $02, $00, $F0, $00, $0E, $14, $80, $1B, $A2, $00, 'WAVE      '
>392022	80 1b a2 00 57 41 56 45 20 20 20 20 20 20
>392030	00 11 2d c8 2f 00 0c 31		INSTRUMENT_XYLO1      .text $00, $11, $2D, $C8, $2F, $00, $0C, $31, $00, $F5, $F5, $00, 'XYLO1     '
>392038	00 f5 f5 00 58 59 4c 4f 31 20 20 20 20 20
>392046	06 2e 00 ff 0f 00 00 00		INSTRUMENT_XYLO2      .text $06, $2E, $00, $FF, $0F, $00, $00, $00, $00, $00, $00, $00, 'XYLO2     '
>39204e	00 00 00 00 58 59 4c 4f 32 20 20 20 20 20
>39205c	00 06 00 ff f0 00 0e c4		INSTRUMENT_XYLO3      .text $00, $06, $00, $FF, $F0, $00, $0E, $C4, $00, $F8, $B5, $00, 'XYLO3     '
>392064	00 f8 b5 00 58 59 4c 4f 33 20 20 20 20 20

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Drums.asm

>392072	00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP2         .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>39207a	00 87 fa 00
>39207e	00 01 00 78 97 09 00 02		DRUMINS_SCRATCH1      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>392086	00 88 98 03
>39208a	00 01 00 78 97 09 00 02		DRUMINS_SCRATCH2      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>392092	00 88 98 03
>392096	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT2      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>39209e	00 f9 69 00
>3920a2	00 00 00 f8 6c 01 00 0e		DRUMINS_HIQ           .text $00, $00, $00, $F8, $6C, $01, $00, $0E, $80, $E8, $4A, $00
>3920aa	80 e8 4a 00
>3920ae	00 25 1b fa f2 01 00 12		DRUMINS_WOODBLOK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>3920b6	00 f6 9a 00
>3920ba	00 06 03 f4 44 00 01 01		DRUMINS_GLOCK         .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>3920c2	1b f2 34 00
>3920c6	00 00 00 f9 f3 05 00 01		DRUMINS_BASS_DR2      .text $00, $00, $00, $F9, $F3, $05, $00, $01, $00, $F7, $8A, $00
>3920ce	00 f7 8a 00
>3920d2	00 01 07 fa fd 05 00 01		DRUMINS_BASS_DR1      .text $00, $01, $07, $FA, $FD, $05, $00, $01, $00, $F6, $47, $00
>3920da	00 f6 47 00
>3920de	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT       .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>3920e6	00 f9 69 00
>3920ea	00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_AC      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>3920f2	00 f7 a9 00
>3920f6	00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP          .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>3920fe	00 87 fa 00
>392102	00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_EL      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>39210a	00 f7 a9 00
>39210e	00 06 0a fa 1f 0c 00 11		DRUMINS_LO_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>392116	00 f5 f5 00
>39211a	00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_CL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>392122	06 b8 d8 03
>392126	00 06 0a fa 1f 0c 00 11		DRUMINS_HI_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>39212e	00 f5 f5 00
>392132	00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_PL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>39213a	06 b8 d8 03
>39213e	00 06 0a fa 1f 0c 00 11		DRUMINS_LOW_TOM       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>392146	00 f5 f5 00
>39214a	00 2e 00 82 f6 05 00 04		DRUMINS_HIHAT_OP      .text $00, $2E, $00, $82, $F6, $05, $00, $04, $10, $74, $F8, $03
>392152	10 74 f8 03
>392156	00 06 0a fa 1f 0c 00 11		DRUMINS_LTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>39215e	00 f5 f5 00
>392162	00 06 0a fa 1f 0c 00 11		DRUMINS_HTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>39216a	00 f5 f5 00
>39216e	00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH         .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>392176	05 c5 d4 03
>39217a	00 06 0a fa 1f 0c 00 11		DRUMINS_TOM_HIGH      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>392182	00 f5 f5 00
>392186	00 29 10 94 00 0f 00 04		DRUMINS_RIDE_CY       .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>39218e	04 f9 44 03
>392192	00 2c 00 9f 00 0f 02 0e		DRUMINS_TAMBOUR       .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>39219a	05 c5 d4 03
>39219e	00 29 10 94 00 0f 00 04		DRUMINS_CYMBAL        .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>3921a6	04 f9 44 03
>3921aa	00 2e 09 f5 f1 01 00 06		DRUMINS_TAMBOU2       .text $00, $2E, $09, $F5, $F1, $01, $00, $06, $03, $87, $F7, $03
>3921b2	03 87 f7 03
>3921b6	00 2c 00 9f 00 0f 02 0e		DRUMINS_SPLASH        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>3921be	05 c5 d4 03
>3921c2	00 37 14 f7 a1 09 01 03		DRUMINS_COWBELL       .text $00, $37, $14, $F7, $A1, $09, $01, $03, $00, $F6, $28, $00
>3921ca	00 f6 28 00
>3921ce	00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH2        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>3921d6	05 c5 d4 03
>3921da	00 80 00 ff 00 0d 01 00		DRUMINS_VIBRASLA      .text $00, $80, $00, $FF, $00, $0D, $01, $00, $00, $F5, $F7, $01
>3921e2	00 f5 f7 01
>3921e6	00 29 10 94 00 0f 00 04		DRUMINS_RIDE2         .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>3921ee	04 f9 44 03
>3921f2	00 25 c4 fa fa 01 00 03		DRUMINS_HI_BONGO      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>3921fa	00 99 f9 00
>3921fe	00 21 03 fb fa 01 01 02		DRUMINS_LO_BONGO      .text $00, $21, $03, $FB, $FA, $01, $01, $02, $00, $A8, $F7, $00
>392206	00 a8 f7 00
>39220a	00 25 c4 fa fa 01 00 03		DRUMINS_MUTECONG      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>392212	00 99 f9 00
>392216	00 24 18 f9 fa 0f 02 03		DRUMINS_OPENCONG      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>39221e	00 a6 f6 00
>392222	00 24 18 f9 fa 0f 02 03		DRUMINS_LOWCONGA      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>39222a	00 a6 f6 00
>39222e	00 05 14 f5 f5 07 02 03		DRUMINS_HI_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>392236	00 f6 36 02
>39223a	00 05 14 f5 f5 07 02 03		DRUMINS_LO_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>392242	00 f6 36 02
>392246	00 1c 0c f9 31 0f 01 15		DRUMINS_HI_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>39224e	00 96 e8 01
>392252	00 1c 0c f9 31 0f 01 15		DRUMINS_LO_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>39225a	00 96 e8 01
>39225e	00 0e 00 ff 01 0f 00 0e		DRUMINS_CABASA        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>392266	02 79 77 03
>39226a	00 0e 00 ff 01 0f 00 0e		DRUMINS_MARACAS       .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>392272	02 79 77 03
>392276	00 20 15 af 07 05 01 0e		DRUMINS_S_WHISTL      .text $00, $20, $15, $AF, $07, $05, $01, $0E, $00, $A5, $2B, $02
>39227e	00 a5 2b 02
>392282	00 20 18 bf 07 01 01 0e		DRUMINS_L_WHISTL      .text $00, $20, $18, $BF, $07, $01, $01, $0E, $00, $93, $3B, $02
>39228a	00 93 3b 02
>39228e	00 20 00 f0 f7 0b 00 08		DRUMINS_S_GUIRO       .text $00, $20, $00, $F0, $F7, $0B, $00, $08, $01, $89, $3B, $03
>392296	01 89 3b 03
>39229a	00 20 00 f3 fa 09 00 08		DRUMINS_L_GUIRO       .text $00, $20, $00, $F3, $FA, $09, $00, $08, $0A, $53, $2B, $02
>3922a2	0a 53 2b 02
>3922a6	00 15 21 f8 9a 09 01 13		DRUMINS_CLAVES        .text $00, $15, $21, $F8, $9A, $09, $01, $13, $00, $F6, $89, $00
>3922ae	00 f6 89 00
>3922b2	00 25 1b fa f2 01 00 12		DRUMINS_HI_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>3922ba	00 f6 9a 00
>3922be	00 25 1b fa f2 01 00 12		DRUMINS_LO_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>3922c6	00 f6 9a 00
>3922ca	00 20 01 5f 07 01 00 08		DRUMINS_MU_CUICA      .text $00, $20, $01, $5F, $07, $01, $00, $08, $00, $87, $4B, $01
>3922d2	00 87 4b 01
>3922d6	00 25 12 57 f7 01 01 03		DRUMINS_OP_CUICA      .text $00, $25, $12, $57, $F7, $01, $01, $03, $00, $78, $67, $01
>3922de	00 78 67 01
>3922e2	00 22 2f f1 f0 07 00 27		DRUMINS_MU_TRNGL      .text $00, $22, $2F, $F1, $F0, $07, $00, $27, $02, $F8, $FC, $00
>3922ea	02 f8 fc 00
>3922ee	00 26 44 f1 f0 07 00 27		DRUMINS_OP_TRNGL      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>3922f6	40 f5 f5 00
>3922fa	00 0e 00 ff 01 0f 00 0e		DRUMINS_SHAKER        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>392302	02 79 77 03
>392306	00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL1      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>39230e	40 f5 f5 00
>392312	00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL2      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>39231a	40 f5 f5 00
>39231e	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT3      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>392326	00 f9 69 00
>39232a	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT4      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>392332	00 f9 69 00
>392336	00 02 1d f5 93 01 00 00		DRUMINS_TAIKO         .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>39233e	00 c6 45 00
=27					DRUM_NOTE_BASE = 27;
=60					NUM_MIDI_DRUMS = 60;
>392342	72 20 39 00 7e 20 39 00		midiDrums     .dword DRUMINS_CLAP2, DRUMINS_SCRATCH1, DRUMINS_SCRATCH2, DRUMINS_RIMSHOT2
>39234a	8a 20 39 00 96 20 39 00
>392352	a2 20 39 00 ae 20 39 00		              .dword DRUMINS_HIQ, DRUMINS_WOODBLOK, DRUMINS_GLOCK, DRUMINS_BASS_DR2
>39235a	ba 20 39 00 c6 20 39 00
>392362	d2 20 39 00 de 20 39 00		              .dword DRUMINS_BASS_DR1, DRUMINS_RIMSHOT,  DRUMINS_SNARE_AC, DRUMINS_CLAP
>39236a	ea 20 39 00 f6 20 39 00
>392372	02 21 39 00 0e 21 39 00		              .dword DRUMINS_SNARE_EL, DRUMINS_LO_TOMS,  DRUMINS_HIHAT_CL, DRUMINS_HI_TOMS
>39237a	1a 21 39 00 26 21 39 00
>392382	32 21 39 00 3e 21 39 00		              .dword DRUMINS_HIHAT_PL, DRUMINS_LOW_TOM,	DRUMINS_HIHAT_OP, DRUMINS_LTOM_MID
>39238a	4a 21 39 00 56 21 39 00
>392392	62 21 39 00 6e 21 39 00		              .dword DRUMINS_HTOM_MID, DRUMINS_CRASH,    DRUMINS_TOM_HIGH, DRUMINS_RIDE_CY
>39239a	7a 21 39 00 86 21 39 00
>3923a2	92 21 39 00 9e 21 39 00		              .dword DRUMINS_TAMBOUR,  DRUMINS_CYMBAL,   DRUMINS_TAMBOU2,  DRUMINS_SPLASH
>3923aa	aa 21 39 00 b6 21 39 00
>3923b2	c2 21 39 00 ce 21 39 00		              .dword DRUMINS_COWBELL,  DRUMINS_CRASH2, 	DRUMINS_VIBRASLA, DRUMINS_RIDE2
>3923ba	da 21 39 00 e6 21 39 00
>3923c2	f2 21 39 00 fe 21 39 00		              .dword DRUMINS_HI_BONGO, DRUMINS_LO_BONGO, DRUMINS_MUTECONG, DRUMINS_OPENCONG
>3923ca	0a 22 39 00 16 22 39 00
>3923d2	22 22 39 00 2e 22 39 00		              .dword DRUMINS_LOWCONGA, DRUMINS_HI_TIMBA, DRUMINS_LO_TIMBA, DRUMINS_HI_AGOGO
>3923da	3a 22 39 00 46 22 39 00
>3923e2	52 22 39 00 5e 22 39 00		              .dword DRUMINS_LO_AGOGO, DRUMINS_CABASA, DRUMINS_MARACAS,  DRUMINS_S_WHISTL
>3923ea	6a 22 39 00 76 22 39 00
>3923f2	82 22 39 00 8e 22 39 00		              .dword DRUMINS_L_WHISTL, DRUMINS_S_GUIRO,  DRUMINS_L_GUIRO,  DRUMINS_CLAVES
>3923fa	9a 22 39 00 a6 22 39 00
>392402	b2 22 39 00 be 22 39 00		              .dword DRUMINS_HI_WDBLK, DRUMINS_LO_WDBLK, DRUMINS_MU_CUICA, DRUMINS_OP_CUICA
>39240a	ca 22 39 00 d6 22 39 00
>392412	e2 22 39 00 ee 22 39 00		              .dword DRUMINS_MU_TRNGL, DRUMINS_OP_TRNGL, DRUMINS_SHAKER, DRUMINS_TRIANGL1
>39241a	fa 22 39 00 06 23 39 00
>392422	12 23 39 00 1e 23 39 00		              .dword DRUMINS_TRIANGL2, DRUMINS_RIMSHOT3, DRUMINS_RIMSHOT4, DRUMINS_TAIKO
>39242a	2a 23 39 00 36 23 39 00

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Instruments.asm

>392432	00 33 5a b2 50 01 00 31		MIDI_INSTRUMENT_PIANO1     .text $00, $33, $5A, $B2, $50, $01, $00, $31, $00, $B1, $F5, $01
>39243a	00 b1 f5 01
>39243e	00 31 49 f2 53 07 01 11		MIDI_INSTRUMENT_PIANO2     .text $00, $31, $49, $F2, $53, $07, $01, $11, $03, $F1, $F5, $00
>392446	03 f1 f5 00
>39244a	00 31 95 d1 83 0d 01 32		MIDI_INSTRUMENT_PIANO3     .text $00, $31, $95, $D1, $83, $0D, $01, $32, $03, $C1, $F5, $00
>392452	03 c1 f5 00
>392456	00 34 9b f3 63 01 01 11		MIDI_INSTRUMENT_HONKTONK   .text $00, $34, $9B, $F3, $63, $01, $01, $11, $00, $92, $F5, $01
>39245e	00 92 f5 01
>392462	00 27 28 f8 b7 01 02 91		MIDI_INSTRUMENT_EP1        .text $00, $27, $28, $F8, $B7, $01, $02, $91, $00, $F1, $F9, $00
>39246a	00 f1 f9 00
>39246e	00 1a 2d f3 ee 01 01 11		MIDI_INSTRUMENT_EP2        .text $00, $1A, $2D, $F3, $EE, $01, $01, $11, $00, $F1, $F5, $00
>392476	00 f1 f5 00
>39247a	00 35 95 f2 58 0f 01 32		MIDI_INSTRUMENT_HARPSIC    .text $00, $35, $95, $F2, $58, $0F, $01, $32, $02, $81, $F6, $01
>392482	02 81 f6 01
>392486	00 31 85 c9 40 01 00 35		MIDI_INSTRUMENT_CLAVIC     .text $00, $31, $85, $C9, $40, $01, $00, $35, $00, $C2, $B9, $01
>39248e	00 c2 b9 01
>392492	00 09 15 c7 64 08 00 01		MIDI_INSTRUMENT_CELESTA    .text $00, $09, $15, $C7, $64, $08, $00, $01, $05, $B2, $35, $00
>39249a	05 b2 35 00
>39249e	00 06 03 f4 44 00 01 01		MIDI_INSTRUMENT_GLOCK      .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>3924a6	1b f2 34 00
>3924aa	00 04 06 a9 24 0a 01 01		MIDI_INSTRUMENT_MUSICBOX   .text $00, $04, $06, $A9, $24, $0A, $01, $01, $01, $F5, $74, $00
>3924b2	01 f5 74 00
>3924b6	00 d4 00 f6 33 00 00 f1		MIDI_INSTRUMENT_VIBES      .text $00, $D4, $00, $F6, $33, $00, $00, $F1, $00, $61, $E3, $00
>3924be	00 61 e3 00
>3924c2	00 d4 00 f7 e8 04 00 d1		MIDI_INSTRUMENT_MARIMBA    .text $00, $D4, $00, $F7, $E8, $04, $00, $D1, $00, $A4, $64, $00
>3924ca	00 a4 64 00
>3924ce	00 36 16 f7 f7 01 00 31		MIDI_INSTRUMENT_XYLO       .text $00, $36, $16, $F7, $F7, $01, $00, $31, $07, $B5, $F5, $00
>3924d6	07 b5 f5 00
>3924da	00 03 1b a2 43 0b 00 00		MIDI_INSTRUMENT_TUBEBELL   .text $00, $03, $1B, $A2, $43, $0B, $00, $00, $00, $F3, $74, $00
>3924e2	00 f3 74 00
>3924e6	00 c3 8e f8 35 01 01 11		MIDI_INSTRUMENT_SANTUR     .text $00, $C3, $8E, $F8, $35, $01, $01, $11, $00, $C3, $94, $01
>3924ee	00 c3 94 01
>3924f2	00 e2 07 f4 1b 06 01 e0		MIDI_INSTRUMENT_ORGAN1     .text $00, $E2, $07, $F4, $1B, $06, $01, $E0, $00, $F4, $0D, $01
>3924fa	00 f4 0d 01
>3924fe	00 f2 00 f6 2c 04 00 f0		MIDI_INSTRUMENT_ORGAN2     .text $00, $F2, $00, $F6, $2C, $04, $00, $F0, $00, $F5, $0B, $01
>392506	00 f5 0b 01
>39250a	00 f1 06 b6 15 0a 00 f0		MIDI_INSTRUMENT_ORGAN3     .text $00, $F1, $06, $B6, $15, $0A, $00, $F0, $00, $BF, $07, $00
>392512	00 bf 07 00
>392516	00 22 03 79 16 08 01 e0		MIDI_INSTRUMENT_PIPEORG    .text $00, $22, $03, $79, $16, $08, $01, $E0, $00, $6D, $08, $01
>39251e	00 6d 08 01
>392522	00 31 27 63 06 01 00 72		MIDI_INSTRUMENT_REEDORG    .text $00, $31, $27, $63, $06, $01, $00, $72, $00, $51, $17, $01
>39252a	00 51 17 01
>39252e	00 b4 1d 53 16 0f 01 71		MIDI_INSTRUMENT_ACORDIAN   .text $00, $B4, $1D, $53, $16, $0F, $01, $71, $00, $51, $17, $01
>392536	00 51 17 01
>39253a	00 25 29 97 15 01 00 32		MIDI_INSTRUMENT_HARMONIC   .text $00, $25, $29, $97, $15, $01, $00, $32, $00, $53, $08, $01
>392542	00 53 08 01
>392546	00 24 9e 67 15 0f 00 31		MIDI_INSTRUMENT_BANDNEON   .text $00, $24, $9E, $67, $15, $0F, $00, $31, $00, $53, $06, $01
>39254e	00 53 06 01
>392552	00 13 27 a3 b4 05 01 31		MIDI_INSTRUMENT_NYLONGT    .text $00, $13, $27, $A3, $B4, $05, $01, $31, $00, $D2, $F8, $00
>39255a	00 d2 f8 00
>39255e	00 17 a3 f3 32 01 00 11		MIDI_INSTRUMENT_STEELGT    .text $00, $17, $A3, $F3, $32, $01, $00, $11, $00, $E2, $C7, $01
>392566	00 e2 c7 01
>39256a	00 33 24 d2 c1 0f 01 31		MIDI_INSTRUMENT_JAZZGT     .text $00, $33, $24, $D2, $C1, $0F, $01, $31, $00, $F1, $9C, $00
>392572	00 f1 9c 00
>392576	00 31 05 f8 44 01 00 32		MIDI_INSTRUMENT_CLEANGT    .text $00, $31, $05, $F8, $44, $01, $00, $32, $02, $F2, $C9, $01
>39257e	02 f2 c9 01
>392582	00 21 09 9c 7b 07 00 02		MIDI_INSTRUMENT_MUTEGT     .text $00, $21, $09, $9C, $7B, $07, $00, $02, $03, $95, $FB, $00
>39258a	03 95 fb 00
>39258e	00 21 84 81 98 07 01 21		MIDI_INSTRUMENT_OVERDGT    .text $00, $21, $84, $81, $98, $07, $01, $21, $04, $A1, $59, $00
>392596	04 a1 59 00
>39259a	00 b1 0c 78 43 01 00 22		MIDI_INSTRUMENT_DISTGT     .text $00, $B1, $0C, $78, $43, $01, $00, $22, $03, $91, $FC, $03
>3925a2	03 91 fc 03
>3925a6	00 00 0a 82 8c 09 00 08		MIDI_INSTRUMENT_GTHARMS    .text $00, $00, $0A, $82, $8C, $09, $00, $08, $02, $B4, $EC, $00
>3925ae	02 b4 ec 00
>3925b2	00 21 13 ab 46 01 00 21		MIDI_INSTRUMENT_ACOUBASS   .text $00, $21, $13, $AB, $46, $01, $00, $21, $00, $93, $F7, $00
>3925ba	00 93 f7 00
>3925be	00 01 0a f9 32 01 00 22		MIDI_INSTRUMENT_FINGBASS   .text $00, $01, $0A, $F9, $32, $01, $00, $22, $04, $C1, $58, $00
>3925c6	04 c1 58 00
>3925ca	00 21 07 fa 77 0b 00 22		MIDI_INSTRUMENT_PICKBASS   .text $00, $21, $07, $FA, $77, $0B, $00, $22, $02, $C3, $6A, $00
>3925d2	02 c3 6a 00
>3925d6	00 21 17 71 57 0b 00 21		MIDI_INSTRUMENT_FRETLESS   .text $00, $21, $17, $71, $57, $0B, $00, $21, $00, $62, $87, $00
>3925de	00 62 87 00
>3925e2	00 25 01 fa 78 07 01 12		MIDI_INSTRUMENT_SLAPBAS1   .text $00, $25, $01, $FA, $78, $07, $01, $12, $00, $F3, $97, $00
>3925ea	00 f3 97 00
>3925ee	00 21 03 fa 88 0d 00 13		MIDI_INSTRUMENT_SLAPBAS2   .text $00, $21, $03, $FA, $88, $0D, $00, $13, $00, $B3, $97, $00
>3925f6	00 b3 97 00
>3925fa	00 21 09 f5 7f 09 01 23		MIDI_INSTRUMENT_SYNBASS1   .text $00, $21, $09, $F5, $7F, $09, $01, $23, $04, $F3, $CC, $00
>392602	04 f3 cc 00
>392606	00 01 10 a3 9b 09 00 01		MIDI_INSTRUMENT_SYNBASS2   .text $00, $01, $10, $A3, $9B, $09, $00, $01, $00, $93, $AA, $00
>39260e	00 93 aa 00
>392612	00 e2 19 f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLIN     .text $00, $E2, $19, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>39261a	00 78 08 01
>39261e	00 e2 1c f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLA      .text $00, $E2, $1C, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>392626	00 78 08 01
>39262a	00 61 19 69 16 0b 01 61		MIDI_INSTRUMENT_CELLO      .text $00, $61, $19, $69, $16, $0B, $01, $61, $00, $54, $27, $01
>392632	00 54 27 01
>392636	00 71 18 82 31 0d 01 32		MIDI_INSTRUMENT_CONTRAB    .text $00, $71, $18, $82, $31, $0D, $01, $32, $00, $61, $56, $00
>39263e	00 61 56 00
>392642	00 e2 23 70 06 0d 01 e1		MIDI_INSTRUMENT_TREMSTR    .text $00, $E2, $23, $70, $06, $0D, $01, $E1, $00, $75, $16, $01
>39264a	00 75 16 01
>39264e	00 02 00 88 e6 08 00 61		MIDI_INSTRUMENT_PIZZ       .text $00, $02, $00, $88, $E6, $08, $00, $61, $00, $F5, $F6, $01
>392656	00 f5 f6 01
>39265a	00 12 20 f6 d5 0f 01 11		MIDI_INSTRUMENT_HARP       .text $00, $12, $20, $F6, $D5, $0F, $01, $11, $80, $F3, $E3, $00
>392662	80 f3 e3 00
>392666	00 61 0e f4 f4 01 01 00		MIDI_INSTRUMENT_TIMPANI    .text $00, $61, $0E, $F4, $F4, $01, $01, $00, $00, $B5, $F5, $00
>39266e	00 b5 f5 00
>392672	00 61 1e 9c 04 0f 01 21		MIDI_INSTRUMENT_STRINGS    .text $00, $61, $1E, $9C, $04, $0F, $01, $21, $80, $71, $16, $00
>39267a	80 71 16 00
>39267e	00 a2 2a c0 d6 0f 02 21		MIDI_INSTRUMENT_SLOWSTR    .text $00, $A2, $2A, $C0, $D6, $0F, $02, $21, $00, $30, $55, $01
>392686	00 30 55 01
>39268a	00 61 21 72 35 0f 01 61		MIDI_INSTRUMENT_SYNSTR1    .text $00, $61, $21, $72, $35, $0F, $01, $61, $00, $62, $36, $01
>392692	00 62 36 01
>392696	00 21 1a 72 23 0f 01 21		MIDI_INSTRUMENT_SYNSTR2    .text $00, $21, $1A, $72, $23, $0F, $01, $21, $02, $51, $07, $00
>39269e	02 51 07 00
>3926a2	00 e1 16 97 31 09 00 61		MIDI_INSTRUMENT_CHOIR      .text $00, $E1, $16, $97, $31, $09, $00, $61, $00, $62, $39, $00
>3926aa	00 62 39 00
>3926ae	00 22 c3 79 45 01 00 21		MIDI_INSTRUMENT_OOHS       .text $00, $22, $C3, $79, $45, $01, $00, $21, $00, $66, $27, $00
>3926b6	00 66 27 00
>3926ba	00 21 de 63 55 01 01 21		MIDI_INSTRUMENT_SYNVOX     .text $00, $21, $DE, $63, $55, $01, $01, $21, $00, $73, $46, $00
>3926c2	00 73 46 00
>3926c6	00 42 05 86 f7 0a 00 50		MIDI_INSTRUMENT_ORCHIT     .text $00, $42, $05, $86, $F7, $0A, $00, $50, $00, $74, $76, $01
>3926ce	00 74 76 01
>3926d2	00 31 1c 61 02 0f 00 61		MIDI_INSTRUMENT_TRUMPET    .text $00, $31, $1C, $61, $02, $0F, $00, $61, $81, $92, $38, $00
>3926da	81 92 38 00
>3926de	00 71 1e 52 23 0f 00 61		MIDI_INSTRUMENT_TROMBONE   .text $00, $71, $1E, $52, $23, $0F, $00, $61, $02, $71, $19, $00
>3926e6	02 71 19 00
>3926ea	00 21 1a 76 16 0f 00 21		MIDI_INSTRUMENT_TUBA       .text $00, $21, $1A, $76, $16, $0F, $00, $21, $01, $81, $09, $00
>3926f2	01 81 09 00
>3926f6	00 25 28 89 2c 07 02 20		MIDI_INSTRUMENT_MUTETRP    .text $00, $25, $28, $89, $2C, $07, $02, $20, $00, $83, $4B, $02
>3926fe	00 83 4b 02
>392702	00 21 1f 79 16 09 00 a2		MIDI_INSTRUMENT_FRHORN     .text $00, $21, $1F, $79, $16, $09, $00, $A2, $05, $71, $59, $00
>39270a	05 71 59 00
>39270e	00 21 19 87 16 0f 00 21		MIDI_INSTRUMENT_BRASS1     .text $00, $21, $19, $87, $16, $0F, $00, $21, $03, $82, $39, $00
>392716	03 82 39 00
>39271a	00 21 17 75 35 0f 00 22		MIDI_INSTRUMENT_SYNBRAS1   .text $00, $21, $17, $75, $35, $0F, $00, $22, $82, $84, $17, $00
>392722	82 84 17 00
>392726	00 21 22 62 58 0f 00 21		MIDI_INSTRUMENT_SYNBRAS2   .text $00, $21, $22, $62, $58, $0F, $00, $21, $02, $72, $16, $00
>39272e	02 72 16 00
>392732	00 b1 1b 59 07 01 01 a1		MIDI_INSTRUMENT_SOPSAX     .text $00, $B1, $1B, $59, $07, $01, $01, $A1, $00, $7B, $0A, $00
>39273a	00 7b 0a 00
>39273e	00 21 16 9f 04 0b 00 21		MIDI_INSTRUMENT_ALTOSAX    .text $00, $21, $16, $9F, $04, $0B, $00, $21, $00, $85, $0C, $01
>392746	00 85 0c 01
>39274a	00 21 0f a8 20 0d 00 23		MIDI_INSTRUMENT_TENSAX     .text $00, $21, $0F, $A8, $20, $0D, $00, $23, $00, $7B, $0A, $01
>392752	00 7b 0a 01
>392756	00 21 0f 88 04 09 00 26		MIDI_INSTRUMENT_BARISAX    .text $00, $21, $0F, $88, $04, $09, $00, $26, $00, $79, $18, $01
>39275e	00 79 18 01
>392762	00 31 18 8f 05 01 00 32		MIDI_INSTRUMENT_OBOE       .text $00, $31, $18, $8F, $05, $01, $00, $32, $01, $73, $08, $00
>39276a	01 73 08 00
>39276e	00 a1 0a 8c 37 01 01 24		MIDI_INSTRUMENT_ENGLHORN   .text $00, $A1, $0A, $8C, $37, $01, $01, $24, $04, $77, $0A, $00
>392776	04 77 0a 00
>39277a	00 31 04 a8 67 0b 00 75		MIDI_INSTRUMENT_BASSOON    .text $00, $31, $04, $A8, $67, $0B, $00, $75, $00, $51, $19, $00
>392782	00 51 19 00
>392786	00 a2 1f 77 26 01 01 21		MIDI_INSTRUMENT_CLARINET   .text $00, $A2, $1F, $77, $26, $01, $01, $21, $01, $74, $09, $00
>39278e	01 74 09 00
>392792	00 e1 07 b8 94 01 01 21		MIDI_INSTRUMENT_PICCOLO    .text $00, $E1, $07, $B8, $94, $01, $01, $21, $01, $63, $28, $00
>39279a	01 63 28 00
>39279e	00 a1 93 87 59 01 00 e1		MIDI_INSTRUMENT_FLUTE1     .text $00, $A1, $93, $87, $59, $01, $00, $E1, $00, $65, $0A, $00
>3927a6	00 65 0a 00
>3927aa	00 22 10 9f 38 01 00 61		MIDI_INSTRUMENT_RECORDER   .text $00, $22, $10, $9F, $38, $01, $00, $61, $00, $67, $29, $00
>3927b2	00 67 29 00
>3927b6	00 e2 0d 88 9a 01 01 21		MIDI_INSTRUMENT_PANFLUTE   .text $00, $E2, $0D, $88, $9A, $01, $01, $21, $00, $67, $09, $00
>3927be	00 67 09 00
>3927c2	00 a2 10 98 94 0f 00 21		MIDI_INSTRUMENT_BOTTLEB    .text $00, $A2, $10, $98, $94, $0F, $00, $21, $01, $6A, $28, $00
>3927ca	01 6a 28 00
>3927ce	00 f1 1c 86 26 0f 00 f1		MIDI_INSTRUMENT_SHAKU      .text $00, $F1, $1C, $86, $26, $0F, $00, $F1, $00, $55, $27, $00
>3927d6	00 55 27 00
>3927da	00 e1 3f 9f 09 00 00 e1		MIDI_INSTRUMENT_WHISTLE    .text $00, $E1, $3F, $9F, $09, $00, $00, $E1, $00, $6F, $08, $00
>3927e2	00 6f 08 00
>3927e6	00 e2 3b f7 19 01 00 21		MIDI_INSTRUMENT_OCARINA    .text $00, $E2, $3B, $F7, $19, $01, $00, $21, $00, $7A, $07, $00
>3927ee	00 7a 07 00
>3927f2	00 22 1e 92 0c 0f 00 61		MIDI_INSTRUMENT_SQUARWAV   .text $00, $22, $1E, $92, $0C, $0F, $00, $61, $06, $A2, $0D, $00
>3927fa	06 a2 0d 00
>3927fe	00 21 15 f4 22 0f 01 21		MIDI_INSTRUMENT_SAWWAV     .text $00, $21, $15, $F4, $22, $0F, $01, $21, $00, $A3, $5F, $00
>392806	00 a3 5f 00
>39280a	00 f2 20 47 66 03 01 f1		MIDI_INSTRUMENT_SYNCALLI   .text $00, $F2, $20, $47, $66, $03, $01, $F1, $00, $42, $27, $00
>392812	00 42 27 00
>392816	00 61 19 88 28 0f 00 61		MIDI_INSTRUMENT_CHIFLEAD   .text $00, $61, $19, $88, $28, $0F, $00, $61, $05, $B2, $49, $00
>39281e	05 b2 49 00
>392822	00 21 16 82 1b 01 00 23		MIDI_INSTRUMENT_CHARANG    .text $00, $21, $16, $82, $1B, $01, $00, $23, $00, $B2, $79, $01
>39282a	00 b2 79 01
>39282e	00 21 00 ca 93 01 00 22		MIDI_INSTRUMENT_SOLOVOX    .text $00, $21, $00, $CA, $93, $01, $00, $22, $00, $7A, $1A, $00
>392836	00 7a 1a 00
>39283a	00 23 00 92 c9 08 01 22		MIDI_INSTRUMENT_FIFTHSAW   .text $00, $23, $00, $92, $C9, $08, $01, $22, $00, $82, $28, $01
>392842	00 82 28 01
>392846	00 21 1d f3 7b 0f 00 22		MIDI_INSTRUMENT_BASSLEAD   .text $00, $21, $1D, $F3, $7B, $0F, $00, $22, $02, $C3, $5F, $00
>39284e	02 c3 5f 00
>392852	00 e1 00 81 25 00 01 a6		MIDI_INSTRUMENT_FANTASIA   .text $00, $E1, $00, $81, $25, $00, $01, $A6, $86, $C4, $95, $01
>39285a	86 c4 95 01
>39285e	00 21 27 31 01 0f 00 21		MIDI_INSTRUMENT_WARMPAD    .text $00, $21, $27, $31, $01, $0F, $00, $21, $00, $44, $15, $00
>392866	00 44 15 00
>39286a	00 60 14 83 35 0d 02 61		MIDI_INSTRUMENT_POLYSYN    .text $00, $60, $14, $83, $35, $0D, $02, $61, $00, $D1, $06, $00
>392872	00 d1 06 00
>392876	00 e1 5c d3 01 01 01 62		MIDI_INSTRUMENT_SPACEVOX   .text $00, $E1, $5C, $D3, $01, $01, $01, $62, $00, $82, $37, $00
>39287e	00 82 37 00
>392882	00 28 38 34 86 01 02 21		MIDI_INSTRUMENT_BOWEDGLS   .text $00, $28, $38, $34, $86, $01, $02, $21, $00, $41, $35, $00
>39288a	00 41 35 00
>39288e	00 24 12 52 f3 05 01 23		MIDI_INSTRUMENT_METALPAD   .text $00, $24, $12, $52, $F3, $05, $01, $23, $02, $32, $F5, $01
>392896	02 32 f5 01
>39289a	00 61 1d 62 a6 0b 00 a1		MIDI_INSTRUMENT_HALOPAD    .text $00, $61, $1D, $62, $A6, $0B, $00, $A1, $00, $61, $26, $00
>3928a2	00 61 26 00
>3928a6	00 22 0f 22 d5 0b 01 21		MIDI_INSTRUMENT_SWEEPPAD   .text $00, $22, $0F, $22, $D5, $0B, $01, $21, $84, $3F, $05, $01
>3928ae	84 3f 05 01
>3928b2	00 e3 1f f9 24 01 00 31		MIDI_INSTRUMENT_ICERAIN    .text $00, $E3, $1F, $F9, $24, $01, $00, $31, $01, $D1, $F6, $00
>3928ba	01 d1 f6 00
>3928be	00 63 00 41 55 06 01 a2		MIDI_INSTRUMENT_SOUNDTRK   .text $00, $63, $00, $41, $55, $06, $01, $A2, $00, $41, $05, $01
>3928c6	00 41 05 01
>3928ca	00 c7 25 a7 65 01 01 c1		MIDI_INSTRUMENT_CRYSTAL    .text $00, $C7, $25, $A7, $65, $01, $01, $C1, $05, $F3, $E4, $00
>3928d2	05 f3 e4 00
>3928d6	00 e3 19 f7 b7 01 01 61		MIDI_INSTRUMENT_ATMOSPH    .text $00, $E3, $19, $F7, $B7, $01, $01, $61, $00, $92, $F5, $01
>3928de	00 92 f5 01
>3928e2	00 66 9b a8 44 0f 00 41		MIDI_INSTRUMENT_BRIGHT     .text $00, $66, $9B, $A8, $44, $0F, $00, $41, $04, $F2, $E4, $01
>3928ea	04 f2 e4 01
>3928ee	00 61 20 22 75 0d 00 61		MIDI_INSTRUMENT_GOBLIN     .text $00, $61, $20, $22, $75, $0D, $00, $61, $00, $45, $25, $00
>3928f6	00 45 25 00
>3928fa	00 e1 21 f6 84 0f 00 e1		MIDI_INSTRUMENT_ECHODROP   .text $00, $E1, $21, $F6, $84, $0F, $00, $E1, $01, $A3, $36, $00
>392902	01 a3 36 00
>392906	00 e2 14 73 64 0b 01 e1		MIDI_INSTRUMENT_STARTHEM   .text $00, $E2, $14, $73, $64, $0B, $01, $E1, $01, $98, $05, $01
>39290e	01 98 05 01
>392912	00 21 0b 72 34 09 00 24		MIDI_INSTRUMENT_SITAR      .text $00, $21, $0B, $72, $34, $09, $00, $24, $02, $A3, $F6, $01
>39291a	02 a3 f6 01
>39291e	00 21 16 f4 53 0d 00 04		MIDI_INSTRUMENT_BANJO      .text $00, $21, $16, $F4, $53, $0D, $00, $04, $00, $F6, $F8, $00
>392926	00 f6 f8 00
>39292a	00 21 18 da 02 0d 00 35		MIDI_INSTRUMENT_SHAMISEN   .text $00, $21, $18, $DA, $02, $0D, $00, $35, $00, $F3, $F5, $00
>392932	00 f3 f5 00
>392936	00 25 0f fa 63 09 00 02		MIDI_INSTRUMENT_KOTO       .text $00, $25, $0F, $FA, $63, $09, $00, $02, $00, $94, $E5, $01
>39293e	00 94 e5 01
>392942	00 32 07 f9 96 01 00 11		MIDI_INSTRUMENT_KALIMBA    .text $00, $32, $07, $F9, $96, $01, $00, $11, $00, $84, $44, $00
>39294a	00 84 44 00
>39294e	00 20 0e 97 18 09 02 25		MIDI_INSTRUMENT_BAGPIPE    .text $00, $20, $0E, $97, $18, $09, $02, $25, $03, $83, $18, $01
>392956	03 83 18 01
>39295a	00 61 18 f6 29 01 00 62		MIDI_INSTRUMENT_FIDDLE     .text $00, $61, $18, $F6, $29, $01, $00, $62, $01, $78, $08, $01
>392962	01 78 08 01
>392966	00 e6 21 76 19 0b 00 61		MIDI_INSTRUMENT_SHANNAI    .text $00, $E6, $21, $76, $19, $0B, $00, $61, $03, $8E, $08, $01
>39296e	03 8e 08 01
>392972	00 27 23 f0 d4 01 00 05		MIDI_INSTRUMENT_TINKLBEL   .text $00, $27, $23, $F0, $D4, $01, $00, $05, $09, $F2, $46, $00
>39297a	09 f2 46 00
>39297e	00 1c 0c f9 31 0f 01 15		MIDI_INSTRUMENT_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>392986	00 96 e8 01
>39298a	00 02 00 75 16 06 02 01		MIDI_INSTRUMENT_STEELDRM   .text $00, $02, $00, $75, $16, $06, $02, $01, $00, $F6, $F6, $01
>392992	00 f6 f6 01
>392996	00 25 1b fa f2 01 00 12		MIDI_INSTRUMENT_WOODBLOK   .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>39299e	00 f6 9a 00
>3929a2	00 02 1d f5 93 01 00 00		MIDI_INSTRUMENT_TAIKO      .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>3929aa	00 c6 45 00
>3929ae	00 11 15 f5 32 05 00 10		MIDI_INSTRUMENT_MELOTOM    .text $00, $11, $15, $F5, $32, $05, $00, $10, $00, $F4, $B4, $00
>3929b6	00 f4 b4 00
>3929ba	00 22 06 fa 99 09 00 01		MIDI_INSTRUMENT_SYNDRUM    .text $00, $22, $06, $FA, $99, $09, $00, $01, $00, $D5, $25, $00
>3929c2	00 d5 25 00
>3929c6	00 2e 00 ff 00 0f 02 0e		MIDI_INSTRUMENT_REVRSCYM   .text $00, $2E, $00, $FF, $00, $0F, $02, $0E, $0E, $21, $2D, $00
>3929ce	0e 21 2d 00
>3929d2	00 30 0b 56 e4 01 01 17		MIDI_INSTRUMENT_FRETNOIS   .text $00, $30, $0B, $56, $E4, $01, $01, $17, $00, $55, $87, $02
>3929da	00 55 87 02
>3929de	00 24 00 ff 03 0d 00 05		MIDI_INSTRUMENT_BRTHNOIS   .text $00, $24, $00, $FF, $03, $0D, $00, $05, $08, $98, $87, $01
>3929e6	08 98 87 01
>3929ea	00 0e 00 f0 00 0f 02 0a		MIDI_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F0, $00, $0F, $02, $0A, $04, $17, $04, $03
>3929f2	04 17 04 03
>3929f6	00 20 08 f6 f7 01 00 0e		MIDI_INSTRUMENT_BIRDS      .text $00, $20, $08, $F6, $F7, $01, $00, $0E, $05, $77, $F9, $02
>3929fe	05 77 f9 02
>392a02	00 20 14 f1 08 01 00 2e		MIDI_INSTRUMENT_TELEPHON   .text $00, $20, $14, $F1, $08, $01, $00, $2E, $02, $F4, $08, $00
>392a0a	02 f4 08 00
>392a0e	00 20 04 f2 00 03 01 23		MIDI_INSTRUMENT_HELICOPT   .text $00, $20, $04, $F2, $00, $03, $01, $23, $00, $36, $05, $01
>392a16	00 36 05 01
>392a1a	00 2e 00 ff 02 0f 00 2a		MIDI_INSTRUMENT_APPLAUSE   .text $00, $2E, $00, $FF, $02, $0F, $00, $2A, $05, $32, $55, $03
>392a22	05 32 55 03
>392a26	00 20 00 a1 ef 0f 00 10		MIDI_INSTRUMENT_GUNSHOT    .text $00, $20, $00, $A1, $EF, $0F, $00, $10, $00, $F3, $DF, $00
>392a2e	00 f3 df 00
>392a32	32 24 39 00 3e 24 39 00		midiInstruments .dword MIDI_INSTRUMENT_PIANO1,   MIDI_INSTRUMENT_PIANO2,   MIDI_INSTRUMENT_PIANO3,   MIDI_INSTRUMENT_HONKTONK, MIDI_INSTRUMENT_EP1,      MIDI_INSTRUMENT_EP2
>392a3a	4a 24 39 00 56 24 39 00 62 24 39 00 6e 24 39 00
>392a4a	7a 24 39 00 86 24 39 00		              	.dword MIDI_INSTRUMENT_HARPSIC,  MIDI_INSTRUMENT_CLAVIC,   MIDI_INSTRUMENT_CELESTA,  MIDI_INSTRUMENT_GLOCK,    MIDI_INSTRUMENT_MUSICBOX, MIDI_INSTRUMENT_VIBES
>392a52	92 24 39 00 9e 24 39 00 aa 24 39 00 b6 24 39 00
>392a62	c2 24 39 00 ce 24 39 00		              	.dword MIDI_INSTRUMENT_MARIMBA,  MIDI_INSTRUMENT_XYLO,     MIDI_INSTRUMENT_TUBEBELL, MIDI_INSTRUMENT_SANTUR,   MIDI_INSTRUMENT_ORGAN1,   MIDI_INSTRUMENT_ORGAN2
>392a6a	da 24 39 00 e6 24 39 00 f2 24 39 00 fe 24 39 00
>392a7a	0a 25 39 00 16 25 39 00		              	.dword MIDI_INSTRUMENT_ORGAN3,   MIDI_INSTRUMENT_PIPEORG,  MIDI_INSTRUMENT_REEDORG,  MIDI_INSTRUMENT_ACORDIAN, MIDI_INSTRUMENT_HARMONIC, MIDI_INSTRUMENT_BANDNEON
>392a82	22 25 39 00 2e 25 39 00 3a 25 39 00 46 25 39 00
>392a92	52 25 39 00 5e 25 39 00		              	.dword MIDI_INSTRUMENT_NYLONGT,  MIDI_INSTRUMENT_STEELGT,  MIDI_INSTRUMENT_JAZZGT,   MIDI_INSTRUMENT_CLEANGT,  MIDI_INSTRUMENT_MUTEGT,   MIDI_INSTRUMENT_OVERDGT
>392a9a	6a 25 39 00 76 25 39 00 82 25 39 00 8e 25 39 00
>392aaa	9a 25 39 00 a6 25 39 00		              	.dword MIDI_INSTRUMENT_DISTGT,   MIDI_INSTRUMENT_GTHARMS,  MIDI_INSTRUMENT_ACOUBASS, MIDI_INSTRUMENT_FINGBASS, MIDI_INSTRUMENT_PICKBASS, MIDI_INSTRUMENT_FRETLESS
>392ab2	b2 25 39 00 be 25 39 00 ca 25 39 00 d6 25 39 00
>392ac2	e2 25 39 00 ee 25 39 00		              	.dword MIDI_INSTRUMENT_SLAPBAS1, MIDI_INSTRUMENT_SLAPBAS2, MIDI_INSTRUMENT_SYNBASS1, MIDI_INSTRUMENT_SYNBASS2, MIDI_INSTRUMENT_VIOLIN,   MIDI_INSTRUMENT_VIOLA
>392aca	fa 25 39 00 06 26 39 00 12 26 39 00 1e 26 39 00
>392ada	2a 26 39 00 36 26 39 00		              	.dword MIDI_INSTRUMENT_CELLO,    MIDI_INSTRUMENT_CONTRAB,  MIDI_INSTRUMENT_TREMSTR,  MIDI_INSTRUMENT_PIZZ,     MIDI_INSTRUMENT_HARP,     MIDI_INSTRUMENT_TIMPANI
>392ae2	42 26 39 00 4e 26 39 00 5a 26 39 00 66 26 39 00
>392af2	72 26 39 00 7e 26 39 00		              	.dword MIDI_INSTRUMENT_STRINGS,  MIDI_INSTRUMENT_SLOWSTR,  MIDI_INSTRUMENT_SYNSTR1,  MIDI_INSTRUMENT_SYNSTR2,  MIDI_INSTRUMENT_CHOIR,    MIDI_INSTRUMENT_OOHS
>392afa	8a 26 39 00 96 26 39 00 a2 26 39 00 ae 26 39 00
>392b0a	ba 26 39 00 c6 26 39 00		              	.dword MIDI_INSTRUMENT_SYNVOX,   MIDI_INSTRUMENT_ORCHIT,   MIDI_INSTRUMENT_TRUMPET,  MIDI_INSTRUMENT_TROMBONE, MIDI_INSTRUMENT_TUBA,     MIDI_INSTRUMENT_MUTETRP
>392b12	d2 26 39 00 de 26 39 00 ea 26 39 00 f6 26 39 00
>392b22	02 27 39 00 0e 27 39 00		              	.dword MIDI_INSTRUMENT_FRHORN,   MIDI_INSTRUMENT_BRASS1,   MIDI_INSTRUMENT_SYNBRAS1, MIDI_INSTRUMENT_SYNBRAS2, MIDI_INSTRUMENT_SOPSAX,   MIDI_INSTRUMENT_ALTOSAX
>392b2a	1a 27 39 00 26 27 39 00 32 27 39 00 3e 27 39 00
>392b3a	4a 27 39 00 56 27 39 00		              	.dword MIDI_INSTRUMENT_TENSAX,   MIDI_INSTRUMENT_BARISAX,  MIDI_INSTRUMENT_OBOE,     MIDI_INSTRUMENT_ENGLHORN, MIDI_INSTRUMENT_BASSOON,  MIDI_INSTRUMENT_CLARINET
>392b42	62 27 39 00 6e 27 39 00 7a 27 39 00 86 27 39 00
>392b52	92 27 39 00 9e 27 39 00		              	.dword MIDI_INSTRUMENT_PICCOLO,  MIDI_INSTRUMENT_FLUTE1,   MIDI_INSTRUMENT_RECORDER, MIDI_INSTRUMENT_PANFLUTE, MIDI_INSTRUMENT_BOTTLEB,  MIDI_INSTRUMENT_SHAKU
>392b5a	aa 27 39 00 b6 27 39 00 c2 27 39 00 ce 27 39 00
>392b6a	da 27 39 00 e6 27 39 00		              	.dword MIDI_INSTRUMENT_WHISTLE,  MIDI_INSTRUMENT_OCARINA,  MIDI_INSTRUMENT_SQUARWAV, MIDI_INSTRUMENT_SAWWAV,   MIDI_INSTRUMENT_SYNCALLI, MIDI_INSTRUMENT_CHIFLEAD
>392b72	f2 27 39 00 fe 27 39 00 0a 28 39 00 16 28 39 00
>392b82	22 28 39 00 2e 28 39 00		              	.dword MIDI_INSTRUMENT_CHARANG,  MIDI_INSTRUMENT_SOLOVOX,  MIDI_INSTRUMENT_FIFTHSAW, MIDI_INSTRUMENT_BASSLEAD, MIDI_INSTRUMENT_FANTASIA, MIDI_INSTRUMENT_WARMPAD
>392b8a	3a 28 39 00 46 28 39 00 52 28 39 00 5e 28 39 00
>392b9a	6a 28 39 00 76 28 39 00		              	.dword MIDI_INSTRUMENT_POLYSYN,  MIDI_INSTRUMENT_SPACEVOX, MIDI_INSTRUMENT_BOWEDGLS, MIDI_INSTRUMENT_METALPAD, MIDI_INSTRUMENT_HALOPAD,  MIDI_INSTRUMENT_SWEEPPAD
>392ba2	82 28 39 00 8e 28 39 00 9a 28 39 00 a6 28 39 00
>392bb2	b2 28 39 00 be 28 39 00		              	.dword MIDI_INSTRUMENT_ICERAIN,  MIDI_INSTRUMENT_SOUNDTRK, MIDI_INSTRUMENT_CRYSTAL,  MIDI_INSTRUMENT_ATMOSPH,  MIDI_INSTRUMENT_BRIGHT,   MIDI_INSTRUMENT_GOBLIN
>392bba	ca 28 39 00 d6 28 39 00 e2 28 39 00 ee 28 39 00
>392bca	fa 28 39 00 06 29 39 00		              	.dword MIDI_INSTRUMENT_ECHODROP, MIDI_INSTRUMENT_STARTHEM, MIDI_INSTRUMENT_SITAR,    MIDI_INSTRUMENT_BANJO,    MIDI_INSTRUMENT_SHAMISEN, MIDI_INSTRUMENT_KOTO
>392bd2	12 29 39 00 1e 29 39 00 2a 29 39 00 36 29 39 00
>392be2	42 29 39 00 4e 29 39 00		              	.dword MIDI_INSTRUMENT_KALIMBA,  MIDI_INSTRUMENT_BAGPIPE,  MIDI_INSTRUMENT_FIDDLE,   MIDI_INSTRUMENT_SHANNAI,  MIDI_INSTRUMENT_TINKLBEL, MIDI_INSTRUMENT_AGOGO
>392bea	5a 29 39 00 66 29 39 00 72 29 39 00 7e 29 39 00
>392bfa	8a 29 39 00 96 29 39 00		              	.dword MIDI_INSTRUMENT_STEELDRM, MIDI_INSTRUMENT_WOODBLOK, MIDI_INSTRUMENT_TAIKO,    MIDI_INSTRUMENT_MELOTOM,  MIDI_INSTRUMENT_SYNDRUM,  MIDI_INSTRUMENT_REVRSCYM
>392c02	a2 29 39 00 ae 29 39 00 ba 29 39 00 c6 29 39 00
>392c12	d2 29 39 00 de 29 39 00		              	.dword MIDI_INSTRUMENT_FRETNOIS, MIDI_INSTRUMENT_BRTHNOIS, MIDI_INSTRUMENT_SEASHORE, MIDI_INSTRUMENT_BIRDS,    MIDI_INSTRUMENT_TELEPHON, MIDI_INSTRUMENT_HELICOPT
>392c1a	ea 29 39 00 f6 29 39 00 02 2a 39 00 0e 2a 39 00
>392c2a	1a 2a 39 00 26 2a 39 00		              	.dword MIDI_INSTRUMENT_APPLAUSE, MIDI_INSTRUMENT_GUNSHOT

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Instruments_Win31.asm

>392c32	00 01 8f f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO1     .text $00, $01, $8F, $F2, $F4, $38, $00, $01, $0D, $F2, $F7, $00
>392c3a	0d f2 f7 00
>392c3e	00 01 4b f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO2     .text $00, $01, $4B, $F2, $F4, $38, $00, $01, $07, $F2, $F7, $00
>392c46	07 f2 f7 00
>392c4a	00 01 49 f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO3     .text $00, $01, $49, $F2, $F4, $38, $00, $01, $07, $F2, $F6, $00
>392c52	07 f2 f6 00
>392c56	00 81 12 f2 f7 00 00 41		MIDIW31_INSTRUMENT_HONKTONK   .text $00, $81, $12, $F2, $F7, $00, $00, $41, $07, $F2, $F7, $00
>392c5e	07 f2 f7 00
>392c62	00 01 57 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP1        .text $00, $01, $57, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>392c6a	07 f2 f7 00
>392c6e	00 01 93 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP2        .text $00, $01, $93, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>392c76	07 f2 f7 00
>392c7a	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HARPSIC    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392c82	00 00 00 00
>392c86	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLAVIC     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392c8e	00 00 00 00
>392c92	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELESTA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392c9a	00 00 00 00
>392c9e	00 07 97 f3 f2 32 00 11		MIDIW31_INSTRUMENT_GLOCK      .text $00, $07, $97, $F3, $F2, $32, $00, $11, $87, $F2, $F1, $00
>392ca6	87 f2 f1 00
>392caa	00 17 21 54 f4 32 00 01		MIDIW31_INSTRUMENT_MUSICBOX   .text $00, $17, $21, $54, $F4, $32, $00, $01, $07, $F4, $F4, $00
>392cb2	07 f4 f4 00
>392cb6	00 98 62 f3 f6 30 00 81		MIDIW31_INSTRUMENT_VIBES      .text $00, $98, $62, $F3, $F6, $30, $00, $81, $07, $F2, $F6, $00
>392cbe	07 f2 f6 00
>392cc2	00 18 23 f6 f6 00 00 01		MIDIW31_INSTRUMENT_MARIMBA    .text $00, $18, $23, $F6, $F6, $00, $00, $01, $07, $E7, $F7, $00
>392cca	07 e7 f7 00
>392cce	00 15 91 f6 f6 00 00 01		MIDIW31_INSTRUMENT_XYLO       .text $00, $15, $91, $F6, $F6, $00, $00, $01, $07, $F6, $F6, $00
>392cd6	07 f6 f6 00
>392cda	00 45 59 d3 f3 00 00 81		MIDIW31_INSTRUMENT_TUBEBELL   .text $00, $45, $59, $D3, $F3, $00, $00, $81, $87, $A3, $F3, $00
>392ce2	87 a3 f3 00
>392ce6	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SANTUR     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392cee	00 00 00 00
>392cf2	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392cfa	00 00 00 00
>392cfe	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN2     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392d06	00 00 00 00
>392d0a	00 70 44 aa 18 34 00 b1		MIDIW31_INSTRUMENT_ORGAN3     .text $00, $70, $44, $AA, $18, $34, $00, $B1, $07, $8A, $08, $00
>392d12	07 8a 08 00
>392d16	00 23 93 97 23 34 01 b1		MIDIW31_INSTRUMENT_PIPEORG    .text $00, $23, $93, $97, $23, $34, $01, $B1, $07, $55, $14, $00
>392d1e	07 55 14 00
>392d22	00 61 13 97 04 30 01 b1		MIDIW31_INSTRUMENT_REEDORG    .text $00, $61, $13, $97, $04, $30, $01, $B1, $87, $55, $04, $00
>392d2a	87 55 04 00
>392d2e	00 24 48 98 2a 30 01 b1		MIDIW31_INSTRUMENT_ACORDIAN   .text $00, $24, $48, $98, $2A, $30, $01, $B1, $07, $46, $1A, $00
>392d36	07 46 1a 00
>392d3a	00 61 13 91 06 00 01 21		MIDIW31_INSTRUMENT_HARMONIC   .text $00, $61, $13, $91, $06, $00, $01, $21, $07, $61, $07, $00
>392d42	07 61 07 00
>392d46	00 21 13 71 06 00 00 a1		MIDIW31_INSTRUMENT_BANDNEON   .text $00, $21, $13, $71, $06, $00, $00, $A1, $90, $61, $07, $00
>392d4e	90 61 07 00
>392d52	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_NYLONGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392d5a	00 00 00 00
>392d5e	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392d66	00 00 00 00
>392d6a	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_JAZZGT     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392d72	00 00 00 00
>392d76	00 03 87 f6 22 36 01 21		MIDIW31_INSTRUMENT_CLEANGT    .text $00, $03, $87, $F6, $22, $36, $01, $21, $87, $F3, $F8, $00
>392d7e	87 f3 f8 00
>392d82	00 03 47 f9 54 30 00 21		MIDIW31_INSTRUMENT_MUTEGT     .text $00, $03, $47, $F9, $54, $30, $00, $21, $07, $F6, $3A, $00
>392d8a	07 f6 3a 00
>392d8e	00 23 4a 91 41 38 01 21		MIDIW31_INSTRUMENT_OVERDGT    .text $00, $23, $4A, $91, $41, $38, $01, $21, $0C, $84, $19, $00
>392d96	0c 84 19 00
>392d9a	00 23 4a 95 19 32 01 21		MIDIW31_INSTRUMENT_DISTGT     .text $00, $23, $4A, $95, $19, $32, $01, $21, $07, $94, $19, $00
>392da2	07 94 19 00
>392da6	00 09 a1 20 4f 00 00 84		MIDIW31_INSTRUMENT_GTHARMS    .text $00, $09, $A1, $20, $4F, $00, $00, $84, $87, $D1, $F8, $00
>392dae	87 d1 f8 00
>392db2	00 21 1e 94 06 00 00 a2		MIDIW31_INSTRUMENT_ACOUBASS   .text $00, $21, $1E, $94, $06, $00, $00, $A2, $07, $C3, $A6, $00
>392dba	07 c3 a6 00
>392dbe	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FINGBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392dc6	00 00 00 00
>392dca	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_PICKBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392dd2	00 00 00 00
>392dd6	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRETLESS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392dde	00 00 00 00
>392de2	00 01 8b a1 9a 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS1   .text $00, $01, $8B, $A1, $9A, $38, $00, $21, $47, $F2, $DF, $00
>392dea	47 f2 df 00
>392dee	00 21 8b a2 16 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS2   .text $00, $21, $8B, $A2, $16, $38, $00, $21, $0F, $A1, $DF, $00
>392df6	0f a1 df 00
>392dfa	00 31 8b f4 e8 3a 00 31		MIDIW31_INSTRUMENT_SYNBASS1   .text $00, $31, $8B, $F4, $E8, $3A, $00, $31, $07, $F1, $78, $00
>392e02	07 f1 78 00
>392e06	00 31 12 f1 28 30 00 31		MIDIW31_INSTRUMENT_SYNBASS2   .text $00, $31, $12, $F1, $28, $30, $00, $31, $07, $F1, $18, $00
>392e0e	07 f1 18 00
>392e12	00 31 15 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLIN     .text $00, $31, $15, $DD, $13, $00, $01, $21, $07, $56, $26, $00
>392e1a	07 56 26 00
>392e1e	00 31 16 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLA      .text $00, $31, $16, $DD, $13, $00, $01, $21, $07, $66, $06, $00
>392e26	07 66 06 00
>392e2a	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELLO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392e32	00 00 00 00
>392e36	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CONTRAB    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392e3e	00 00 00 00
>392e42	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TREMSTR    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392e4a	00 00 00 00
>392e4e	00 02 1a f5 75 30 01 01		MIDIW31_INSTRUMENT_PIZZ       .text $00, $02, $1A, $F5, $75, $30, $01, $01, $87, $85, $35, $00
>392e56	87 85 35 00
>392e5a	00 02 1d f5 75 30 01 01		MIDIW31_INSTRUMENT_HARP       .text $00, $02, $1D, $F5, $75, $30, $01, $01, $87, $F3, $F4, $00
>392e62	87 f3 f4 00
>392e66	00 10 41 f5 05 32 01 11		MIDIW31_INSTRUMENT_TIMPANI    .text $00, $10, $41, $F5, $05, $32, $01, $11, $07, $F2, $C3, $00
>392e6e	07 f2 c3 00
>392e72	00 21 9b b1 25 3c 01 a2		MIDIW31_INSTRUMENT_STRINGS    .text $00, $21, $9B, $B1, $25, $3C, $01, $A2, $08, $72, $08, $00
>392e7a	08 72 08 00
>392e7e	00 a1 98 7f 03 00 01 21		MIDIW31_INSTRUMENT_SLOWSTR    .text $00, $A1, $98, $7F, $03, $00, $01, $21, $07, $3F, $07, $01
>392e86	07 3f 07 01
>392e8a	00 a1 93 c1 12 00 00 61		MIDIW31_INSTRUMENT_SYNSTR1    .text $00, $A1, $93, $C1, $12, $00, $00, $61, $07, $4F, $05, $00
>392e92	07 4f 05 00
>392e96	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNSTR2    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392e9e	00 00 00 00
>392ea2	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CHOIR      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392eaa	00 00 00 00
>392eae	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OOHS       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392eb6	00 00 00 00
>392eba	00 71 57 54 05 3c 00 72		MIDIW31_INSTRUMENT_SYNVOX     .text $00, $71, $57, $54, $05, $3C, $00, $72, $07, $7A, $05, $00
>392ec2	07 7a 05 00
>392ec6	00 90 00 54 63 38 00 41		MIDIW31_INSTRUMENT_ORCHIT     .text $00, $90, $00, $54, $63, $38, $00, $41, $07, $A5, $45, $00
>392ece	07 a5 45 00
>392ed2	00 21 92 85 17 3c 00 21		MIDIW31_INSTRUMENT_TRUMPET    .text $00, $21, $92, $85, $17, $3C, $00, $21, $08, $8F, $09, $00
>392eda	08 8f 09 00
>392ede	00 21 94 75 17 32 00 21		MIDIW31_INSTRUMENT_TROMBONE   .text $00, $21, $94, $75, $17, $32, $00, $21, $0C, $8F, $09, $00
>392ee6	0c 8f 09 00
>392eea	00 21 94 76 15 00 00 61		MIDIW31_INSTRUMENT_TUBA       .text $00, $21, $94, $76, $15, $00, $00, $61, $07, $82, $37, $00
>392ef2	07 82 37 00
>392ef6	00 31 43 9e 17 00 01 21		MIDIW31_INSTRUMENT_MUTETRP    .text $00, $31, $43, $9E, $17, $00, $01, $21, $07, $62, $2C, $01
>392efe	07 62 2c 01
>392f02	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRHORN     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f0a	00 00 00 00
>392f0e	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BRASS1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f16	00 00 00 00
>392f1a	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNBRAS1   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f22	00 00 00 00
>392f26	00 21 4d 54 3c 38 00 21		MIDIW31_INSTRUMENT_SYNBRAS2   .text $00, $21, $4D, $54, $3C, $38, $00, $21, $07, $A6, $1C, $00
>392f2e	07 a6 1c 00
>392f32	00 31 8f 93 02 38 01 61		MIDIW31_INSTRUMENT_SOPSAX     .text $00, $31, $8F, $93, $02, $38, $01, $61, $07, $72, $0B, $00
>392f3a	07 72 0b 00
>392f3e	00 31 8e 93 03 38 01 61		MIDIW31_INSTRUMENT_ALTOSAX    .text $00, $31, $8E, $93, $03, $38, $01, $61, $07, $72, $09, $00
>392f46	07 72 09 00
>392f4a	00 31 91 93 03 30 01 61		MIDIW31_INSTRUMENT_TENSAX     .text $00, $31, $91, $93, $03, $30, $01, $61, $07, $82, $09, $00
>392f52	07 82 09 00
>392f56	00 31 8e 93 0f 00 01 61		MIDIW31_INSTRUMENT_BARISAX    .text $00, $31, $8E, $93, $0F, $00, $01, $61, $07, $72, $0F, $00
>392f5e	07 72 0f 00
>392f62	00 21 4b aa 16 00 01 21		MIDIW31_INSTRUMENT_OBOE       .text $00, $21, $4B, $AA, $16, $00, $01, $21, $07, $8F, $0A, $00
>392f6a	07 8f 0a 00
>392f6e	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ENGLHORN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f76	00 00 00 00
>392f7a	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSOON    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f82	00 00 00 00
>392f86	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLARINET   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f8e	00 00 00 00
>392f92	00 e1 1f 85 5f 30 00 e1		MIDIW31_INSTRUMENT_PICCOLO    .text $00, $E1, $1F, $85, $5F, $30, $00, $E1, $07, $65, $1A, $00
>392f9a	07 65 1a 00
>392f9e	00 e1 46 88 5f 30 00 e1		MIDIW31_INSTRUMENT_FLUTE1     .text $00, $E1, $46, $88, $5F, $30, $00, $E1, $07, $65, $1A, $00
>392fa6	07 65 1a 00
>392faa	00 a1 9c 75 1f 32 00 21		MIDIW31_INSTRUMENT_RECORDER   .text $00, $A1, $9C, $75, $1F, $32, $00, $21, $07, $75, $0A, $00
>392fb2	07 75 0a 00
>392fb6	00 31 8b 84 58 30 00 21		MIDIW31_INSTRUMENT_PANFLUTE   .text $00, $31, $8B, $84, $58, $30, $00, $21, $07, $65, $1A, $00
>392fbe	07 65 1a 00
>392fc2	00 e1 4c 66 56 00 00 a1		MIDIW31_INSTRUMENT_BOTTLEB    .text $00, $E1, $4C, $66, $56, $00, $00, $A1, $07, $65, $26, $00
>392fca	07 65 26 00
>392fce	00 62 cb 76 46 00 00 a1		MIDIW31_INSTRUMENT_SHAKU      .text $00, $62, $CB, $76, $46, $00, $00, $A1, $07, $55, $36, $00
>392fd6	07 55 36 00
>392fda	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WHISTLE    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392fe2	00 00 00 00
>392fe6	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OCARINA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392fee	00 00 00 00
>392ff2	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SQUARWAV   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392ffa	00 00 00 00
>392ffe	00 21 0e ff 0f 30 01 21		MIDIW31_INSTRUMENT_SAWWAV     .text $00, $21, $0E, $FF, $0F, $30, $01, $21, $07, $FF, $0F, $01
>393006	07 ff 0f 01
>39300a	00 22 46 86 55 30 00 21		MIDIW31_INSTRUMENT_SYNCALLI   .text $00, $22, $46, $86, $55, $30, $00, $21, $87, $64, $18, $00
>393012	87 64 18 00
>393016	00 21 45 66 12 30 00 a1		MIDIW31_INSTRUMENT_CHIFLEAD   .text $00, $21, $45, $66, $12, $30, $00, $A1, $07, $96, $0A, $00
>39301e	07 96 0a 00
>393022	00 21 8b 92 2a 34 01 22		MIDIW31_INSTRUMENT_CHARANG    .text $00, $21, $8B, $92, $2A, $34, $01, $22, $07, $91, $2A, $00
>39302a	07 91 2a 00
>39302e	00 a2 9e df 05 00 00 61		MIDIW31_INSTRUMENT_SOLOVOX    .text $00, $A2, $9E, $DF, $05, $00, $00, $61, $47, $6F, $07, $00
>393036	47 6f 07 00
>39303a	00 20 1a ef 01 00 00 60		MIDIW31_INSTRUMENT_FIFTHSAW   .text $00, $20, $1A, $EF, $01, $00, $00, $60, $07, $8F, $06, $02
>393042	07 8f 06 02
>393046	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSLEAD   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39304e	00 00 00 00
>393052	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FANTASIA   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39305a	00 00 00 00
>39305e	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WARMPAD    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393066	00 00 00 00
>39306a	00 61 17 91 34 3c 00 61		MIDIW31_INSTRUMENT_POLYSYN    .text $00, $61, $17, $91, $34, $3C, $00, $61, $07, $55, $16, $00
>393072	07 55 16 00
>393076	00 71 5d 54 01 30 00 72		MIDIW31_INSTRUMENT_SPACEVOX   .text $00, $71, $5D, $54, $01, $30, $00, $72, $07, $6A, $03, $00
>39307e	07 6a 03 00
>393082	00 21 97 21 43 38 00 a2		MIDIW31_INSTRUMENT_BOWEDGLS   .text $00, $21, $97, $21, $43, $38, $00, $A2, $07, $42, $35, $00
>39308a	07 42 35 00
>39308e	00 a1 1c a1 77 30 01 21		MIDIW31_INSTRUMENT_METALPAD   .text $00, $A1, $1C, $A1, $77, $30, $01, $21, $07, $31, $47, $01
>393096	07 31 47 01
>39309a	00 21 89 11 33 00 00 61		MIDIW31_INSTRUMENT_HALOPAD    .text $00, $21, $89, $11, $33, $00, $00, $61, $0A, $42, $25, $00
>3930a2	0a 42 25 00
>3930a6	00 a1 15 11 47 00 01 21		MIDIW31_INSTRUMENT_SWEEPPAD   .text $00, $A1, $15, $11, $47, $00, $01, $21, $07, $CF, $07, $00
>3930ae	07 cf 07 00
>3930b2	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ICERAIN    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3930ba	00 00 00 00
>3930be	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SOUNDTRK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3930c6	00 00 00 00
>3930ca	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CRYSTAL    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3930d2	00 00 00 00
>3930d6	00 22 92 b1 81 3c 00 61		MIDIW31_INSTRUMENT_ATMOSPH    .text $00, $22, $92, $B1, $81, $3C, $00, $61, $8A, $F2, $26, $00
>3930de	8a f2 26 00
>3930e2	00 41 4d f1 51 30 01 42		MIDIW31_INSTRUMENT_BRIGHT     .text $00, $41, $4D, $F1, $51, $30, $01, $42, $07, $F2, $F5, $00
>3930ea	07 f2 f5 00
>3930ee	00 61 94 11 51 36 01 a3		MIDIW31_INSTRUMENT_GOBLIN     .text $00, $61, $94, $11, $51, $36, $01, $A3, $87, $11, $13, $00
>3930f6	87 11 13 00
>3930fa	00 61 8c 11 31 3a 00 a1		MIDIW31_INSTRUMENT_ECHODROP   .text $00, $61, $8C, $11, $31, $3A, $00, $A1, $87, $1D, $03, $00
>393102	87 1d 03 00
>393106	00 a4 4c f3 73 00 01 61		MIDIW31_INSTRUMENT_STARTHEM   .text $00, $A4, $4C, $F3, $73, $00, $01, $61, $07, $81, $23, $00
>39310e	07 81 23 00
>393112	00 02 85 d2 53 00 00 07		MIDIW31_INSTRUMENT_SITAR      .text $00, $02, $85, $D2, $53, $00, $00, $07, $0A, $F2, $F6, $01
>39311a	0a f2 f6 01
>39311e	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BANJO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393126	00 00 00 00
>39312a	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SHAMISEN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393132	00 00 00 00
>393136	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_KOTO       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39313e	00 00 00 00
>393142	00 04 4f fa 56 3c 00 01		MIDIW31_INSTRUMENT_KALIMBA    .text $00, $04, $4F, $FA, $56, $3C, $00, $01, $07, $C2, $05, $00
>39314a	07 c2 05 00
>39314e	00 21 49 7c 20 36 00 22		MIDIW31_INSTRUMENT_BAGPIPE    .text $00, $21, $49, $7C, $20, $36, $00, $22, $07, $6F, $0C, $01
>393156	07 6f 0c 01
>39315a	00 31 85 dd 33 3a 01 21		MIDIW31_INSTRUMENT_FIDDLE     .text $00, $31, $85, $DD, $33, $3A, $01, $21, $07, $56, $16, $00
>393162	07 56 16 00
>393166	00 20 04 da 05 30 02 21		MIDIW31_INSTRUMENT_SHANNAI    .text $00, $20, $04, $DA, $05, $30, $02, $21, $88, $8F, $0B, $00
>39316e	88 8f 0b 00
>393172	00 05 6a f1 e5 00 00 03		MIDIW31_INSTRUMENT_TINKLBEL   .text $00, $05, $6A, $F1, $E5, $00, $00, $03, $87, $C3, $E5, $00
>39317a	87 c3 e5 00
>39317e	00 07 15 ec 26 00 00 02		MIDIW31_INSTRUMENT_AGOGO      .text $00, $07, $15, $EC, $26, $00, $00, $02, $07, $F8, $16, $00
>393186	07 f8 16 00
>39318a	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELDRM   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393192	00 00 00 00
>393196	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WOODBLOK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39319e	00 00 00 00
>3931a2	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TAIKO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3931aa	00 00 00 00
>3931ae	00 11 41 f8 47 34 02 10		MIDIW31_INSTRUMENT_MELOTOM    .text $00, $11, $41, $F8, $47, $34, $02, $10, $0A, $F3, $03, $00
>3931b6	0a f3 03 00
>3931ba	00 01 8e f1 06 3e 02 10		MIDIW31_INSTRUMENT_SYNDRUM    .text $00, $01, $8E, $F1, $06, $3E, $02, $10, $07, $F3, $02, $00
>3931c2	07 f3 02 00
>3931c6	00 0e 00 1f 00 3e 00 c0		MIDIW31_INSTRUMENT_REVRSCYM   .text $00, $0E, $00, $1F, $00, $3E, $00, $C0, $07, $1F, $FF, $03
>3931ce	07 1f ff 03
>3931d2	00 06 80 f8 24 38 00 03		MIDIW31_INSTRUMENT_FRETNOIS   .text $00, $06, $80, $F8, $24, $38, $00, $03, $8F, $56, $84, $02
>3931da	8f 56 84 02
>3931de	00 0e 00 f8 00 00 00 d0		MIDIW31_INSTRUMENT_BRTHNOIS   .text $00, $0E, $00, $F8, $00, $00, $00, $D0, $0C, $34, $04, $03
>3931e6	0c 34 04 03
>3931ea	00 0e 00 f6 00 00 00 c0		MIDIW31_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F6, $00, $00, $00, $C0, $07, $1F, $02, $03
>3931f2	07 1f 02 03
>3931f6	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BIRDS      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3931fe	00 00 00 00
>393202	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TELEPHON   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39320a	00 00 00 00
>39320e	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HELICOPT   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393216	00 00 00 00
>39321a	00 26 00 ff 01 3e 00 e4		MIDIW31_INSTRUMENT_APPLAUSE   .text $00, $26, $00, $FF, $01, $3E, $00, $E4, $07, $12, $16, $01
>393222	07 12 16 01
>393226	00 00 00 f3 f0 3e 00 00		MIDIW31_INSTRUMENT_GUNSHOT    .text $00, $00, $00, $F3, $F0, $3E, $00, $00, $07, $F6, $C9, $02
>39322e	07 f6 c9 02
>393232	32 2c 39 00 3e 2c 39 00		midiInstrumentsw31 .dword MIDIW31_INSTRUMENT_PIANO1,   MIDIW31_INSTRUMENT_PIANO2,   MIDIW31_INSTRUMENT_PIANO3,   MIDIW31_INSTRUMENT_HONKTONK, MIDIW31_INSTRUMENT_EP1, MIDIW31_INSTRUMENT_EP2
>39323a	4a 2c 39 00 56 2c 39 00 62 2c 39 00 6e 2c 39 00
>39324a	7a 2c 39 00 86 2c 39 00		                   .dword MIDIW31_INSTRUMENT_HARPSIC,  MIDIW31_INSTRUMENT_CLAVIC,   MIDIW31_INSTRUMENT_CELESTA,  MIDIW31_INSTRUMENT_GLOCK,    MIDIW31_INSTRUMENT_MUSICBOX, MIDIW31_INSTRUMENT_VIBES
>393252	92 2c 39 00 9e 2c 39 00 aa 2c 39 00 b6 2c 39 00
>393262	c2 2c 39 00 ce 2c 39 00			                 .dword MIDIW31_INSTRUMENT_MARIMBA,  MIDIW31_INSTRUMENT_XYLO,     MIDIW31_INSTRUMENT_TUBEBELL, MIDIW31_INSTRUMENT_SANTUR,   MIDIW31_INSTRUMENT_ORGAN1,   MIDIW31_INSTRUMENT_ORGAN2
>39326a	da 2c 39 00 e6 2c 39 00 f2 2c 39 00 fe 2c 39 00
>39327a	0a 2d 39 00 16 2d 39 00			                 .dword MIDIW31_INSTRUMENT_ORGAN3,   MIDIW31_INSTRUMENT_PIPEORG,  MIDIW31_INSTRUMENT_REEDORG,  MIDIW31_INSTRUMENT_ACORDIAN, MIDIW31_INSTRUMENT_HARMONIC, MIDIW31_INSTRUMENT_BANDNEON
>393282	22 2d 39 00 2e 2d 39 00 3a 2d 39 00 46 2d 39 00
>393292	52 2d 39 00 5e 2d 39 00		                     .dword MIDIW31_INSTRUMENT_NYLONGT,  MIDIW31_INSTRUMENT_STEELGT,  MIDIW31_INSTRUMENT_JAZZGT,   MIDIW31_INSTRUMENT_CLEANGT,  MIDIW31_INSTRUMENT_MUTEGT,   MIDIW31_INSTRUMENT_OVERDGT
>39329a	6a 2d 39 00 76 2d 39 00 82 2d 39 00 8e 2d 39 00
>3932aa	9a 2d 39 00 a6 2d 39 00			                 .dword MIDIW31_INSTRUMENT_DISTGT,   MIDIW31_INSTRUMENT_GTHARMS,  MIDIW31_INSTRUMENT_ACOUBASS, MIDIW31_INSTRUMENT_FINGBASS, MIDIW31_INSTRUMENT_PICKBASS, MIDIW31_INSTRUMENT_FRETLESS
>3932b2	b2 2d 39 00 be 2d 39 00 ca 2d 39 00 d6 2d 39 00
>3932c2	e2 2d 39 00 ee 2d 39 00			                 .dword MIDIW31_INSTRUMENT_SLAPBAS1, MIDIW31_INSTRUMENT_SLAPBAS2, MIDIW31_INSTRUMENT_SYNBASS1, MIDIW31_INSTRUMENT_SYNBASS2, MIDIW31_INSTRUMENT_VIOLIN,   MIDIW31_INSTRUMENT_VIOLA
>3932ca	fa 2d 39 00 06 2e 39 00 12 2e 39 00 1e 2e 39 00
>3932da	2a 2e 39 00 36 2e 39 00			                 .dword MIDIW31_INSTRUMENT_CELLO,    MIDIW31_INSTRUMENT_CONTRAB,  MIDIW31_INSTRUMENT_TREMSTR,  MIDIW31_INSTRUMENT_PIZZ,     MIDIW31_INSTRUMENT_HARP,     MIDIW31_INSTRUMENT_TIMPANI
>3932e2	42 2e 39 00 4e 2e 39 00 5a 2e 39 00 66 2e 39 00
>3932f2	72 2e 39 00 7e 2e 39 00			                 .dword MIDIW31_INSTRUMENT_STRINGS,  MIDIW31_INSTRUMENT_SLOWSTR,  MIDIW31_INSTRUMENT_SYNSTR1,  MIDIW31_INSTRUMENT_SYNSTR2,  MIDIW31_INSTRUMENT_CHOIR,    MIDIW31_INSTRUMENT_OOHS
>3932fa	8a 2e 39 00 96 2e 39 00 a2 2e 39 00 ae 2e 39 00
>39330a	ba 2e 39 00 c6 2e 39 00			                 .dword MIDIW31_INSTRUMENT_SYNVOX,   MIDIW31_INSTRUMENT_ORCHIT,   MIDIW31_INSTRUMENT_TRUMPET,  MIDIW31_INSTRUMENT_TROMBONE, MIDIW31_INSTRUMENT_TUBA,     MIDIW31_INSTRUMENT_MUTETRP
>393312	d2 2e 39 00 de 2e 39 00 ea 2e 39 00 f6 2e 39 00
>393322	02 2f 39 00 0e 2f 39 00			                 .dword MIDIW31_INSTRUMENT_FRHORN,   MIDIW31_INSTRUMENT_BRASS1,   MIDIW31_INSTRUMENT_SYNBRAS1, MIDIW31_INSTRUMENT_SYNBRAS2, MIDIW31_INSTRUMENT_SOPSAX,   MIDIW31_INSTRUMENT_ALTOSAX
>39332a	1a 2f 39 00 26 2f 39 00 32 2f 39 00 3e 2f 39 00
>39333a	4a 2f 39 00 56 2f 39 00			                 .dword MIDIW31_INSTRUMENT_TENSAX,   MIDIW31_INSTRUMENT_BARISAX,  MIDIW31_INSTRUMENT_OBOE,     MIDIW31_INSTRUMENT_ENGLHORN, MIDIW31_INSTRUMENT_BASSOON,  MIDIW31_INSTRUMENT_CLARINET
>393342	62 2f 39 00 6e 2f 39 00 7a 2f 39 00 86 2f 39 00
>393352	92 2f 39 00 9e 2f 39 00			                 .dword MIDIW31_INSTRUMENT_PICCOLO,  MIDIW31_INSTRUMENT_FLUTE1,   MIDIW31_INSTRUMENT_RECORDER, MIDIW31_INSTRUMENT_PANFLUTE, MIDIW31_INSTRUMENT_BOTTLEB,  MIDIW31_INSTRUMENT_SHAKU
>39335a	aa 2f 39 00 b6 2f 39 00 c2 2f 39 00 ce 2f 39 00
>39336a	da 2f 39 00 e6 2f 39 00			                 .dword MIDIW31_INSTRUMENT_WHISTLE,  MIDIW31_INSTRUMENT_OCARINA,  MIDIW31_INSTRUMENT_SQUARWAV, MIDIW31_INSTRUMENT_SAWWAV,   MIDIW31_INSTRUMENT_SYNCALLI, MIDIW31_INSTRUMENT_CHIFLEAD
>393372	f2 2f 39 00 fe 2f 39 00 0a 30 39 00 16 30 39 00
>393382	22 30 39 00 2e 30 39 00			                 .dword MIDIW31_INSTRUMENT_CHARANG,  MIDIW31_INSTRUMENT_SOLOVOX,  MIDIW31_INSTRUMENT_FIFTHSAW, MIDIW31_INSTRUMENT_BASSLEAD, MIDIW31_INSTRUMENT_FANTASIA, MIDIW31_INSTRUMENT_WARMPAD
>39338a	3a 30 39 00 46 30 39 00 52 30 39 00 5e 30 39 00
>39339a	6a 30 39 00 76 30 39 00			                 .dword MIDIW31_INSTRUMENT_POLYSYN,  MIDIW31_INSTRUMENT_SPACEVOX, MIDIW31_INSTRUMENT_BOWEDGLS, MIDIW31_INSTRUMENT_METALPAD, MIDIW31_INSTRUMENT_HALOPAD,  MIDIW31_INSTRUMENT_SWEEPPAD
>3933a2	82 30 39 00 8e 30 39 00 9a 30 39 00 a6 30 39 00
>3933b2	b2 30 39 00 be 30 39 00			                 .dword MIDIW31_INSTRUMENT_ICERAIN,  MIDIW31_INSTRUMENT_SOUNDTRK, MIDIW31_INSTRUMENT_CRYSTAL,  MIDIW31_INSTRUMENT_ATMOSPH,  MIDIW31_INSTRUMENT_BRIGHT,   MIDIW31_INSTRUMENT_GOBLIN
>3933ba	ca 30 39 00 d6 30 39 00 e2 30 39 00 ee 30 39 00
>3933ca	fa 30 39 00 06 31 39 00			                 .dword MIDIW31_INSTRUMENT_ECHODROP, MIDIW31_INSTRUMENT_STARTHEM, MIDIW31_INSTRUMENT_SITAR,    MIDIW31_INSTRUMENT_BANJO,    MIDIW31_INSTRUMENT_SHAMISEN, MIDIW31_INSTRUMENT_KOTO
>3933d2	12 31 39 00 1e 31 39 00 2a 31 39 00 36 31 39 00
>3933e2	42 31 39 00 4e 31 39 00			                 .dword MIDIW31_INSTRUMENT_KALIMBA,  MIDIW31_INSTRUMENT_BAGPIPE,  MIDIW31_INSTRUMENT_FIDDLE,   MIDIW31_INSTRUMENT_SHANNAI,  MIDIW31_INSTRUMENT_TINKLBEL, MIDIW31_INSTRUMENT_AGOGO
>3933ea	5a 31 39 00 66 31 39 00 72 31 39 00 7e 31 39 00
>3933fa	8a 31 39 00 96 31 39 00			                 .dword MIDIW31_INSTRUMENT_STEELDRM, MIDIW31_INSTRUMENT_WOODBLOK, MIDIW31_INSTRUMENT_TAIKO,    MIDIW31_INSTRUMENT_MELOTOM,  MIDIW31_INSTRUMENT_SYNDRUM,  MIDIW31_INSTRUMENT_REVRSCYM
>393402	a2 31 39 00 ae 31 39 00 ba 31 39 00 c6 31 39 00
>393412	d2 31 39 00 de 31 39 00			                 .dword MIDIW31_INSTRUMENT_FRETNOIS, MIDIW31_INSTRUMENT_BRTHNOIS, MIDIW31_INSTRUMENT_SEASHORE, MIDIW31_INSTRUMENT_BIRDS,    MIDIW31_INSTRUMENT_TELEPHON, MIDIW31_INSTRUMENT_HELICOPT
>39341a	ea 31 39 00 f6 31 39 00 02 32 39 00 0e 32 39 00
>39342a	1a 32 39 00 26 32 39 00			                 .dword MIDIW31_INSTRUMENT_APPLAUSE, MIDIW31_INSTRUMENT_GUNSHOT

;******  Return to file: src\OPL2_Library.asm

>393432	3c 42 44 45 47 49 4b 4c		NOTE_INTRO  .byte  $3C, $42, $44, $45, $47, $49, $4B, $4C
.39343a					IOPL2_TONE_TEST
.39343a	e2 20		sep #$20	                SEP #$20        ; set A short
.39343c	c2 10		rep #$10	                REP #$10        ; set X long
.39343e	a2 00 00	ldx #$0000	                LDX #0
.393441					OPL2_TONE_TESTING_L1
.393441	bf 32 34 39	lda $393432,x	                LDA NOTE_INTRO, X
.393445	29 0f		and #$0f	                AND #$F
.393447	85 30		sta $30		                STA OPL2_NOTE ; start at C
.393449	bf 32 34 39	lda $393432,x	                LDA NOTE_INTRO, X
.39344d	29 70		and #$70	                AND #$70
.39344f	4a		lsr a		                LSR A
.393450	4a		lsr a		                LSR A
.393451	4a		lsr a		                LSR A
.393452	4a		lsr a		                LSR A
.393453	85 31		sta $31		                STA OPL2_OCTAVE
.393455	8a		txa		                TXA
.393456	29 03		and #$03	                AND #$03        ; replace modulo 3 -  play each note on a different channel
.393458	85 27		sta $27		                STA OPL2_CHANNEL
.39345a	22 2a 36 39	jsl $39362a	                JSL OPL2_PLAYNOTE
.39345e	a0 00 00	ldy #$0000	                LDY #$0000
.393461					OPL2_TONE_TESTING_L2
.393461	ea		nop		                NOP
.393462	ea		nop		                NOP
.393463	ea		nop		                NOP
.393464	ea		nop		                NOP
.393465	c8		iny		                INY
.393466	c0 ff ff	cpy #$ffff	                CPY #$FFFF
.393469	d0 f6		bne $393461	                BNE OPL2_TONE_TESTING_L2
.39346b	e8		inx		                INX
.39346c	e0 08 00	cpx #$0008	                CPX #8
.39346f	d0 d0		bne $393441	                BNE OPL2_TONE_TESTING_L1
.393471	6b		rtl		                RTL
.393472					OPL2_INIT
.393472	c2 20		rep #$20	                REP #$20        ; set A long
.393474	a9 00 00	lda #$0000	                LDA #$0000
.393477	85 28		sta $28		                STA OPL2_REG_REGION
.393479	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.39347b	85 30		sta $30		                STA OPL2_NOTE
.39347d	85 32		sta $32		                STA OPL2_PARAMETER0
.39347f	85 34		sta $34		                STA OPL2_PARAMETER2
.393481	a9 fc 13	lda #$13fc	                LDA #<>INSTRUMENT_ACCORDN
.393484	85 50		sta $50		                STA RAD_ADDR
.393486	a9 39 00	lda #$0039	                LDA #<`INSTRUMENT_ACCORDN
.393489	85 52		sta $52		                STA RAD_ADDR + 2
.39348b	e2 20		sep #$20	                SEP #$20        ; set A short
.39348d	6b		rtl		                RTL
.39348e					OPL2_Reset
.39348e	6b		rtl		                RTL
.39348f					OPL2_Get_FrequencyBlock
.39348f	6b		rtl		                RTL
.393490					OPL2_GET_REGISTER
.393490	48		pha		                PHA             ; begin setdp macro
.393491	08		php		                PHP
.393492	c2 20		rep #$20	                REP #$20        ; set A long
.393494	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393497	5b		tcd		                TCD
.393498	28		plp		                PLP
.393499	68		pla		                PLA             ; end setdp macro
.39349a	c2 20		rep #$20	                REP #$20        ; set A long
.39349c	18		clc		              CLC
.39349d	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3934a0	65 32		adc $32		              ADC OPL2_PARAMETER0
.3934a2	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3934a4	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3934a7	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3934a9	e2 20		sep #$20	                SEP #$20        ; set A short
.3934ab	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3934ad	6b		rtl		              RTL
.3934ae					OPL2_GET_WAVEFORM_SELECT
.3934ae	48		pha		                PHA             ; begin setdp macro
.3934af	08		php		                PHP
.3934b0	c2 20		rep #$20	                REP #$20        ; set A long
.3934b2	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3934b5	5b		tcd		                TCD
.3934b6	28		plp		                PLP
.3934b7	68		pla		                PLA             ; end setdp macro
.3934b8	c2 20		rep #$20	                REP #$20        ; set A long
.3934ba	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3934bd	69 01 00	adc #$0001	              ADC #$0001
.3934c0	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3934c2	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3934c5	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3934c7	e2 20		sep #$20	                SEP #$20        ; set A short
.3934c9	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3934cb	29 20		and #$20	              AND #$20
.3934cd	6b		rtl		              RTL
.3934ce					OPL2_GET_SCALINGLEVEL
.3934ce	48		pha		                PHA             ; begin setdp macro
.3934cf	08		php		                PHP
.3934d0	c2 20		rep #$20	                REP #$20        ; set A long
.3934d2	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3934d5	5b		tcd		                TCD
.3934d6	28		plp		                PLP
.3934d7	68		pla		                PLA             ; end setdp macro
.3934d8	c2 20		rep #$20	                REP #$20        ; set A long
.3934da	a9 40 00	lda #$0040	              LDA #$0040  ;
.3934dd	85 28		sta $28		              STA OPL2_REG_REGION
.3934df	20 91 3d	jsr $393d91	              JSR OPL2_GET_REG_OFFSET
.3934e2	e2 20		sep #$20	                SEP #$20        ; set A short
.3934e4	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3934e6	29 c0		and #$c0	              AND #$C0
.3934e8	4a		lsr a		              LSR A
.3934e9	4a		lsr a		              LSR A
.3934ea	4a		lsr a		              LSR A
.3934eb	4a		lsr a		              LSR A
.3934ec	4a		lsr a		              LSR A
.3934ed	4a		lsr a		              LSR A
.3934ee	6b		rtl		              RTL
.3934ef					OPL2_GET_BLOCK
.3934ef	48		pha		                PHA             ; begin setdp macro
.3934f0	08		php		                PHP
.3934f1	c2 20		rep #$20	                REP #$20        ; set A long
.3934f3	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3934f6	5b		tcd		                TCD
.3934f7	28		plp		                PLP
.3934f8	68		pla		                PLA             ; end setdp macro
.3934f9	e2 20		sep #$20	                SEP #$20        ; set A short
.3934fb	18		clc		              CLC
.3934fc	a5 27		lda $27		              LDA OPL2_CHANNEL
.3934fe	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393500	69 b0		adc #$b0	              ADC #$B0
.393502	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393504	a9 00		lda #$00	              LDA #$00
.393506	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393508	c2 30		rep #$30	                REP #$30        ; set A&X long
.39350a	18		clc		              CLC
.39350b	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39350e	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393510	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393512	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393515	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393517	e2 20		sep #$20	                SEP #$20        ; set A short
.393519	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39351b	29 1c		and #$1c	              AND #$1C
.39351d	4a		lsr a		              LSR A
.39351e	4a		lsr a		              LSR A
.39351f	6b		rtl		              RTL
.393520					OPL2_GET_KEYON
.393520	48		pha		                PHA             ; begin setdp macro
.393521	08		php		                PHP
.393522	c2 20		rep #$20	                REP #$20        ; set A long
.393524	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393527	5b		tcd		                TCD
.393528	28		plp		                PLP
.393529	68		pla		                PLA             ; end setdp macro
.39352a	e2 20		sep #$20	                SEP #$20        ; set A short
.39352c	18		clc		              CLC
.39352d	a5 27		lda $27		              LDA OPL2_CHANNEL
.39352f	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393531	69 b0		adc #$b0	              ADC #$B0
.393533	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393535	a9 00		lda #$00	              LDA #$00
.393537	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393539	c2 30		rep #$30	                REP #$30        ; set A&X long
.39353b	18		clc		              CLC
.39353c	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39353f	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393541	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393543	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393546	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393548	e2 20		sep #$20	                SEP #$20        ; set A short
.39354a	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39354c	29 20		and #$20	              AND #$20
.39354e	6b		rtl		              RTL
.39354f					OPL2_GET_FEEDBACK
.39354f	48		pha		                PHA             ; begin setdp macro
.393550	08		php		                PHP
.393551	c2 20		rep #$20	                REP #$20        ; set A long
.393553	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393556	5b		tcd		                TCD
.393557	28		plp		                PLP
.393558	68		pla		                PLA             ; end setdp macro
.393559	e2 20		sep #$20	                SEP #$20        ; set A short
.39355b	18		clc		              CLC
.39355c	a5 27		lda $27		              LDA OPL2_CHANNEL
.39355e	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393560	69 c0		adc #$c0	              ADC #$C0
.393562	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393564	a9 00		lda #$00	              LDA #$00
.393566	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393568	c2 30		rep #$30	                REP #$30        ; set A&X long
.39356a	18		clc		              CLC
.39356b	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39356e	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393570	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393572	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393575	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393577	e2 20		sep #$20	                SEP #$20        ; set A short
.393579	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39357b	29 e0		and #$e0	              AND #$E0
.39357d	4a		lsr a		              LSR
.39357e	6b		rtl		              RTL
.39357f					OPL2_GET_SYNTHMODE
.39357f	48		pha		                PHA             ; begin setdp macro
.393580	08		php		                PHP
.393581	c2 20		rep #$20	                REP #$20        ; set A long
.393583	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393586	5b		tcd		                TCD
.393587	28		plp		                PLP
.393588	68		pla		                PLA             ; end setdp macro
.393589	e2 20		sep #$20	                SEP #$20        ; set A short
.39358b	18		clc		              CLC
.39358c	a5 27		lda $27		              LDA OPL2_CHANNEL
.39358e	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393590	69 c0		adc #$c0	              ADC #$C0
.393592	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393594	a9 00		lda #$00	              LDA #$00
.393596	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393598	c2 30		rep #$30	                REP #$30        ; set A&X long
.39359a	18		clc		              CLC
.39359b	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39359e	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.3935a0	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3935a2	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3935a5	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3935a7	e2 20		sep #$20	                SEP #$20        ; set A short
.3935a9	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3935ab	29 01		and #$01	              AND #$01
.3935ad	6b		rtl		              RTL
.3935ae					OPL2_GET_DEEPTREMOLO
.3935ae	48		pha		                PHA             ; begin setdp macro
.3935af	08		php		                PHP
.3935b0	c2 20		rep #$20	                REP #$20        ; set A long
.3935b2	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3935b5	5b		tcd		                TCD
.3935b6	28		plp		                PLP
.3935b7	68		pla		                PLA             ; end setdp macro
.3935b8	c2 20		rep #$20	                REP #$20        ; set A long
.3935ba	a9 bd 00	lda #$00bd	              LDA #$00BD;
.3935bd	85 28		sta $28		              STA OPL2_REG_REGION
.3935bf	20 91 3d	jsr $393d91	              JSR OPL2_GET_REG_OFFSET
.3935c2	e2 20		sep #$20	                SEP #$20        ; set A short
.3935c4	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3935c6	29 80		and #$80	              AND #$80
.3935c8	6b		rtl		              RTL
.3935c9					OPL2_GET_DEEPVIBRATO
.3935c9	48		pha		                PHA             ; begin setdp macro
.3935ca	08		php		                PHP
.3935cb	c2 20		rep #$20	                REP #$20        ; set A long
.3935cd	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3935d0	5b		tcd		                TCD
.3935d1	28		plp		                PLP
.3935d2	68		pla		                PLA             ; end setdp macro
.3935d3	c2 20		rep #$20	                REP #$20        ; set A long
.3935d5	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3935d8	69 bd 00	adc #$00bd	              ADC #$00BD
.3935db	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3935dd	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3935e0	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3935e2	e2 20		sep #$20	                SEP #$20        ; set A short
.3935e4	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3935e6	29 40		and #$40	              AND #$40
.3935e8	6b		rtl		              RTL
.3935e9					OPL2_GET_PERCUSSION
.3935e9	48		pha		                PHA             ; begin setdp macro
.3935ea	08		php		                PHP
.3935eb	c2 20		rep #$20	                REP #$20        ; set A long
.3935ed	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3935f0	5b		tcd		                TCD
.3935f1	28		plp		                PLP
.3935f2	68		pla		                PLA             ; end setdp macro
.3935f3	c2 20		rep #$20	                REP #$20        ; set A long
.3935f5	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3935f8	69 bd 00	adc #$00bd	              ADC #$00BD
.3935fb	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3935fd	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393600	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393602	e2 20		sep #$20	                SEP #$20        ; set A short
.393604	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393606	29 20		and #$20	              AND #$20
.393608	6b		rtl		              RTL
.393609					OPL2_GET_DRUMS
.393609	48		pha		                PHA             ; begin setdp macro
.39360a	08		php		                PHP
.39360b	c2 20		rep #$20	                REP #$20        ; set A long
.39360d	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393610	5b		tcd		                TCD
.393611	28		plp		                PLP
.393612	68		pla		                PLA             ; end setdp macro
.393613	c2 20		rep #$20	                REP #$20        ; set A long
.393615	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393618	69 bd 00	adc #$00bd	              ADC #$00BD
.39361b	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39361d	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393620	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393622	e2 20		sep #$20	                SEP #$20        ; set A short
.393624	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393626	29 1f		and #$1f	              AND #$1F
.393628	6b		rtl		              RTL
.393629					OPL2_Get_WaveForm
.393629	6b		rtl		                RTL
.39362a					OPL2_PLAYNOTE
.39362a	48		pha		                PHA             ; begin setdp macro
.39362b	08		php		                PHP
.39362c	c2 20		rep #$20	                REP #$20        ; set A long
.39362e	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393631	5b		tcd		                TCD
.393632	28		plp		                PLP
.393633	68		pla		                PLA             ; end setdp macro
.393634	e2 20		sep #$20	                SEP #$20        ; set A short
.393636	da		phx		                PHX
.393637	a9 00		lda #$00	                LDA #$00
.393639	85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.39363b	20 12 3c	jsr $393c12	                JSR OPL2_SET_KEYON
.39363e	20 d7 3b	jsr $393bd7	                JSR OPL2_SET_BLOCK  ; OPL2_SET_BLOCK Already to OPL2_OCTAVE
.393641	e2 10		sep #$10	                SEP #$10        ; set X short
.393643	a5 30		lda $30		                LDA OPL2_NOTE
.393645	3a		dec a		                DEC A
.393646	0a		asl a		                ASL A
.393647	aa		tax		                TAX
.393648	bf c1 13 39	lda $3913c1,x	                LDA @lnoteFNumbers,X
.39364c	85 32		sta $32		                STA OPL2_PARAMETER0 ; Store the 8it in Param OPL2_PARAMETER0
.39364e	e8		inx		                INX
.39364f	bf c1 13 39	lda $3913c1,x	                LDA @lnoteFNumbers,X
.393653	85 33		sta $33		                STA OPL2_PARAMETER1 ; Store the 8bit in Param OPL2_PARAMETER1
.393655	22 55 3b 39	jsl $393b55	                JSL OPL2_SET_FNUMBER
.393659	a9 01		lda #$01	                LDA #$01
.39365b	85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.39365d	20 12 3c	jsr $393c12	                JSR OPL2_SET_KEYON
.393660	c2 10		rep #$10	                REP #$10        ; set X long
.393662	fa		plx		                PLX
.393663	6b		rtl		                RTL
.393664					OPL2_PLAYDRUM
.393664	6b		rtl		                RTL
.393665					OPL2_SET_INSTRUMENT
.393665	48		pha		                PHA             ; begin setdp macro
.393666	08		php		                PHP
.393667	c2 20		rep #$20	                REP #$20        ; set A long
.393669	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39366c	5b		tcd		                TCD
.39366d	28		plp		                PLP
.39366e	68		pla		                PLA             ; end setdp macro
.39366f	38		sec		              SEC ; Set the WaveFormSelect to True
.393670	22 53 38 39	jsl $393853	              JSL OPL2_SET_WAVEFORMSELECT;
.393674	e2 20		sep #$20	                SEP #$20        ; set A short
.393676	c2 10		rep #$10	                REP #$10        ; set X long
.393678	a0 00 00	ldy #$0000	              LDY #$0000
.39367b	a2 00 00	ldx #$0000	              LDX #$0000
.39367e	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO],Y ; Pointer Location 0 in Instrument Profile
.393680	85 35		sta $35		              STA OPL2_PARAMETER3
.393682	c8		iny		              INY
.393683	c9 06		cmp #$06	              CMP #$06
.393685	d0 03		bne $39368a	              BNE PERCUSSION_NEXT07
.393687	82 70 01	brl $3937fa	              BRL Percussion_6
.39368a					PERCUSSION_NEXT07
.39368a	c9 07		cmp #$07	              CMP #$07
.39368c	d0 03		bne $393691	              BNE PERCUSSION_NEXT08
.39368e	82 44 01	brl $3937d5	              BRL Percussion_7
.393691					PERCUSSION_NEXT08
.393691	c9 08		cmp #$08	              CMP #$08
.393693	d0 03		bne $393698	              BNE PERCUSSION_NEXT09
.393695	82 18 01	brl $3937b0	              BRL Percussion_8
.393698					PERCUSSION_NEXT09
.393698	c9 09		cmp #$09	              CMP #$09
.39369a	d0 03		bne $39369f	              BNE PERCUSSION_NEXT0A
.39369c	82 ec 00	brl $39378b	              BRL Percussion_9
.39369f					PERCUSSION_NEXT0A
.39369f	c9 0a		cmp #$0a	              CMP #$0A
.3936a1	d0 03		bne $3936a6	              BNE Percussion_Default
.3936a3	82 c0 00	brl $393766	              BRL Percussion_A
.3936a6					Percussion_Default
.3936a6	a9 00		lda #$00	              LDA #$00
.3936a8	85 26		sta $26		              STA OPL2_OPERATOR
.3936aa	c2 20		rep #$20	                REP #$20        ; set A long
.3936ac	a9 20 00	lda #$0020	              LDA #$0020;
.3936af	85 28		sta $28		              STA OPL2_REG_REGION
.3936b1	20 91 3d	jsr $393d91	              JSR OPL2_GET_REG_OFFSET
.3936b4	e2 20		sep #$20	                SEP #$20        ; set A short
.3936b6	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.3936b8	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3936ba	c8		iny		              INY
.3936bb	c2 20		rep #$20	                REP #$20        ; set A long
.3936bd	a9 40 00	lda #$0040	              LDA #$0040;
.3936c0	85 28		sta $28		              STA OPL2_REG_REGION
.3936c2	20 91 3d	jsr $393d91	              JSR OPL2_GET_REG_OFFSET
.3936c5	e2 20		sep #$20	                SEP #$20        ; set A short
.3936c7	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.3936c9	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3936cb	c8		iny		              INY
.3936cc	c2 20		rep #$20	                REP #$20        ; set A long
.3936ce	a9 60 00	lda #$0060	              LDA #$0060;
.3936d1	85 28		sta $28		              STA OPL2_REG_REGION
.3936d3	20 91 3d	jsr $393d91	              JSR OPL2_GET_REG_OFFSET
.3936d6	e2 20		sep #$20	                SEP #$20        ; set A short
.3936d8	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.3936da	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3936dc	c8		iny		              INY
.3936dd	c2 20		rep #$20	                REP #$20        ; set A long
.3936df	a9 80 00	lda #$0080	              LDA #$0080;
.3936e2	85 28		sta $28		              STA OPL2_REG_REGION
.3936e4	20 91 3d	jsr $393d91	              JSR OPL2_GET_REG_OFFSET
.3936e7	e2 20		sep #$20	                SEP #$20        ; set A short
.3936e9	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.3936eb	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3936ed	c8		iny		              INY
.3936ee	c2 20		rep #$20	                REP #$20        ; set A long
.3936f0	a9 e0 00	lda #$00e0	              LDA #$00E0;
.3936f3	85 28		sta $28		              STA OPL2_REG_REGION
.3936f5	20 91 3d	jsr $393d91	              JSR OPL2_GET_REG_OFFSET
.3936f8	e2 20		sep #$20	                SEP #$20        ; set A short
.3936fa	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.3936fc	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3936fe	c8		iny		              INY
.3936ff	e2 10		sep #$10	                SEP #$10        ; set X short
.393701	a5 27		lda $27		              LDA OPL2_CHANNEL
.393703	29 0f		and #$0f	              AND #$0F
.393705	aa		tax		              TAX
.393706	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 6 in Instrument Profile
.393708	9f c0 e6 af	sta $afe6c0,x	              STA @lOPL3_R_FEEDBACK,X
.39370c	c8		iny		              INY
.39370d	a9 01		lda #$01	              LDA #$01
.39370f	85 26		sta $26		              STA OPL2_OPERATOR
.393711	c2 20		rep #$20	                REP #$20        ; set A long
.393713	a9 20 00	lda #$0020	              LDA #$0020;
.393716	85 28		sta $28		              STA OPL2_REG_REGION
.393718	20 91 3d	jsr $393d91	              JSR OPL2_GET_REG_OFFSET
.39371b	e2 20		sep #$20	                SEP #$20        ; set A short
.39371d	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 7 in Instrument Profile
.39371f	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393721	c8		iny		              INY
.393722	c2 20		rep #$20	                REP #$20        ; set A long
.393724	a9 40 00	lda #$0040	              LDA #$0040;
.393727	85 28		sta $28		              STA OPL2_REG_REGION
.393729	20 91 3d	jsr $393d91	              JSR OPL2_GET_REG_OFFSET
.39372c	e2 20		sep #$20	                SEP #$20        ; set A short
.39372e	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 8 in Instrument Profile
.393730	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393732	c8		iny		              INY
.393733	c2 20		rep #$20	                REP #$20        ; set A long
.393735	a9 60 00	lda #$0060	              LDA #$0060;
.393738	85 28		sta $28		              STA OPL2_REG_REGION
.39373a	20 91 3d	jsr $393d91	              JSR OPL2_GET_REG_OFFSET
.39373d	e2 20		sep #$20	                SEP #$20        ; set A short
.39373f	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 9 in Instrument Profile
.393741	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393743	c8		iny		              INY
.393744	c2 20		rep #$20	                REP #$20        ; set A long
.393746	a9 80 00	lda #$0080	              LDA #$0080;
.393749	85 28		sta $28		              STA OPL2_REG_REGION
.39374b	20 91 3d	jsr $393d91	              JSR OPL2_GET_REG_OFFSET
.39374e	e2 20		sep #$20	                SEP #$20        ; set A short
.393750	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location A in Instrument Profile
.393752	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393754	c8		iny		              INY
.393755	c2 20		rep #$20	                REP #$20        ; set A long
.393757	a9 e0 00	lda #$00e0	              LDA #$00E0;
.39375a	85 28		sta $28		              STA OPL2_REG_REGION
.39375c	20 91 3d	jsr $393d91	              JSR OPL2_GET_REG_OFFSET
.39375f	e2 20		sep #$20	                SEP #$20        ; set A short
.393761	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location B in Instrument Profile
.393763	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393765	6b		rtl		                RTL
.393766					Percussion_A
.393766	e2 20		sep #$20	                SEP #$20        ; set A short
.393768	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.39376a	8f 31 e6 af	sta $afe631	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $11
.39376e	c8		iny		              INY
.39376f	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393771	8f 51 e6 af	sta $afe651	              STA @lOPL3_R_KSL_TL + $11
.393775	c8		iny		              INY
.393776	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393778	8f 71 e6 af	sta $afe671	              STA @lOPL3_R_AR_DR + $11
.39377c	c8		iny		              INY
.39377d	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.39377f	8f 91 e6 af	sta $afe691	              STA @lOPL3_R_SL_RR + $11
.393783	c8		iny		              INY
.393784	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393786	8f f1 e6 af	sta $afe6f1	              STA @lOPL3_R_WAVE_SELECT + $11
.39378a	6b		rtl		                RTL
.39378b					Percussion_9
.39378b	e2 20		sep #$20	                SEP #$20        ; set A short
.39378d	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.39378f	8f 35 e6 af	sta $afe635	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $15
.393793	c8		iny		              INY
.393794	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393796	8f 55 e6 af	sta $afe655	              STA @lOPL3_R_KSL_TL + $15
.39379a	c8		iny		              INY
.39379b	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.39379d	8f 75 e6 af	sta $afe675	              STA @lOPL3_R_AR_DR + $15
.3937a1	c8		iny		              INY
.3937a2	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.3937a4	8f 95 e6 af	sta $afe695	              STA @lOPL3_R_SL_RR + $15
.3937a8	c8		iny		              INY
.3937a9	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.3937ab	8f f5 e6 af	sta $afe6f5	              STA @lOPL3_R_WAVE_SELECT + $15
.3937af	6b		rtl		              RTL
.3937b0					Percussion_8
.3937b0	e2 20		sep #$20	                SEP #$20        ; set A short
.3937b2	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.3937b4	8f 32 e6 af	sta $afe632	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $12
.3937b8	c8		iny		              INY
.3937b9	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.3937bb	8f 52 e6 af	sta $afe652	              STA @lOPL3_R_KSL_TL + $12
.3937bf	c8		iny		              INY
.3937c0	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.3937c2	8f 72 e6 af	sta $afe672	              STA @lOPL3_R_AR_DR + $12
.3937c6	c8		iny		              INY
.3937c7	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.3937c9	8f 92 e6 af	sta $afe692	              STA @lOPL3_R_SL_RR + $12
.3937cd	c8		iny		              INY
.3937ce	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.3937d0	8f f2 e6 af	sta $afe6f2	              STA @lOPL3_R_WAVE_SELECT + $12
.3937d4	6b		rtl		              RTL
.3937d5					Percussion_7
.3937d5	e2 20		sep #$20	                SEP #$20        ; set A short
.3937d7	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.3937d9	8f 34 e6 af	sta $afe634	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $14
.3937dd	c8		iny		              INY
.3937de	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.3937e0	8f 54 e6 af	sta $afe654	              STA @lOPL3_R_KSL_TL + $14
.3937e4	c8		iny		              INY
.3937e5	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.3937e7	8f 74 e6 af	sta $afe674	              STA @lOPL3_R_AR_DR + $14
.3937eb	c8		iny		              INY
.3937ec	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.3937ee	8f 94 e6 af	sta $afe694	              STA @lOPL3_R_SL_RR + $14
.3937f2	c8		iny		              INY
.3937f3	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.3937f5	8f f4 e6 af	sta $afe6f4	              STA @lOPL3_R_WAVE_SELECT + $14
.3937f9	6b		rtl		              RTL
.3937fa					Percussion_6
.3937fa	e2 20		sep #$20	                SEP #$20        ; set A short
.3937fc	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.3937fe	8f 30 e6 af	sta $afe630	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $10
.393802	8f 33 e6 af	sta $afe633	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $13
.393806	c8		iny		              INY
.393807	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393809	8f 50 e6 af	sta $afe650	              STA @lOPL3_R_KSL_TL + $10
.39380d	8f 53 e6 af	sta $afe653	              STA @lOPL3_R_KSL_TL + $13
.393811	c8		iny		              INY
.393812	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393814	8f 70 e6 af	sta $afe670	              STA @lOPL3_R_AR_DR + $10
.393818	8f 73 e6 af	sta $afe673	              STA @lOPL3_R_AR_DR + $13
.39381c	c8		iny		              INY
.39381d	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.39381f	8f 90 e6 af	sta $afe690	              STA @lOPL3_R_SL_RR + $10
.393823	8f 93 e6 af	sta $afe693	              STA @lOPL3_R_SL_RR + $13
.393827	c8		iny		              INY
.393828	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.39382a	8f f0 e6 af	sta $afe6f0	              STA @lOPL3_R_WAVE_SELECT + $10
.39382e	8f f3 e6 af	sta $afe6f3	              STA @lOPL3_R_WAVE_SELECT + $13
.393832	6b		rtl		              RTL
.393833					OPL2_SET_REGISTER
.393833	48		pha		                PHA             ; begin setdp macro
.393834	08		php		                PHP
.393835	c2 20		rep #$20	                REP #$20        ; set A long
.393837	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39383a	5b		tcd		                TCD
.39383b	28		plp		                PLP
.39383c	68		pla		                PLA             ; end setdp macro
.39383d	c2 20		rep #$20	                REP #$20        ; set A long
.39383f	18		clc		              CLC
.393840	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393843	65 32		adc $32		              ADC OPL2_PARAMETER0
.393845	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393847	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.39384a	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39384c	e2 20		sep #$20	                SEP #$20        ; set A short
.39384e	a5 33		lda $33		              LDA OPL2_PARAMETER1
.393850	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393852	6b		rtl		              RTL
.393853					OPL2_SET_WAVEFORMSELECT
.393853	48		pha		                PHA             ; begin setdp macro
.393854	08		php		                PHP
.393855	c2 20		rep #$20	                REP #$20        ; set A long
.393857	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39385a	5b		tcd		                TCD
.39385b	28		plp		                PLP
.39385c	68		pla		                PLA             ; end setdp macro
.39385d	c2 20		rep #$20	                REP #$20        ; set A long
.39385f	a9 01 e6	lda #$e601	              LDA #<>OPL3_R_BASE + $0001
.393862	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393864	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393867	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393869	e2 20		sep #$20	                SEP #$20        ; set A short
.39386b	b0 07		bcs $393874	              BCS OPL2_Set_WaveFormSelect_set
.39386d	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39386f	29 df		and #$df	              AND #$DF
.393871	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393873	6b		rtl		              RTL
.393874					OPL2_Set_WaveFormSelect_set
.393874	48		pha		                PHA             ; begin setdp macro
.393875	08		php		                PHP
.393876	c2 20		rep #$20	                REP #$20        ; set A long
.393878	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39387b	5b		tcd		                TCD
.39387c	28		plp		                PLP
.39387d	68		pla		                PLA             ; end setdp macro
.39387e	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393880	09 20 00	ora #$0020	              ORA #$20
.393883	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393885	6b		rtl		                RTL
.393886					OPL2_SET_TREMOLO
.393886	48		pha		                PHA             ; begin setdp macro
.393887	08		php		                PHP
.393888	c2 20		rep #$20	                REP #$20        ; set A long
.39388a	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39388d	5b		tcd		                TCD
.39388e	28		plp		                PLP
.39388f	68		pla		                PLA             ; end setdp macro
.393890	08		php		                PHP ; Push the Carry
.393891	c2 20		rep #$20	                REP #$20        ; set A long
.393893	18		clc		                CLC
.393894	a9 20 00	lda #$0020	                LDA #$0020 ;
.393897	85 28		sta $28		                STA OPL2_REG_REGION
.393899	20 91 3d	jsr $393d91	                JSR OPL2_GET_REG_OFFSET
.39389c	28		plp		                PLP ; Pull the Carry out
.39389d	e2 20		sep #$20	                SEP #$20        ; set A short
.39389f	b0 08		bcs $3938a9	                BCS OPL2_Set_Tremolo_Set;
.3938a1	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3938a3	29 7f		and #$7f	                AND #$7F
.3938a5	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3938a7	80 06		bra $3938af	                BRA OPL2_Set_Tremolo_Exit
.3938a9					OPL2_Set_Tremolo_Set
.3938a9	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3938ab	09 80		ora #$80	                ORA #$80
.3938ad	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3938af					OPL2_Set_Tremolo_Exit
.3938af	6b		rtl		                RTL
.3938b0					OPL2_GET_TREMOLO
.3938b0	48		pha		                PHA             ; begin setdp macro
.3938b1	08		php		                PHP
.3938b2	c2 20		rep #$20	                REP #$20        ; set A long
.3938b4	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3938b7	5b		tcd		                TCD
.3938b8	28		plp		                PLP
.3938b9	68		pla		                PLA             ; end setdp macro
.3938ba	c2 20		rep #$20	                REP #$20        ; set A long
.3938bc	a9 20 00	lda #$0020	                LDA #$0020;
.3938bf	85 28		sta $28		                STA OPL2_REG_REGION
.3938c1	20 91 3d	jsr $393d91	                JSR OPL2_GET_REG_OFFSET
.3938c4	e2 20		sep #$20	                SEP #$20        ; set A short
.3938c6	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3938c8	29 80		and #$80	                AND #$80
.3938ca	6b		rtl		                RTL
.3938cb					OPL2_SET_VIBRATO
.3938cb	48		pha		                PHA             ; begin setdp macro
.3938cc	08		php		                PHP
.3938cd	c2 20		rep #$20	                REP #$20        ; set A long
.3938cf	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3938d2	5b		tcd		                TCD
.3938d3	28		plp		                PLP
.3938d4	68		pla		                PLA             ; end setdp macro
.3938d5	08		php		                PHP ; Push the Carry
.3938d6	c2 20		rep #$20	                REP #$20        ; set A long
.3938d8	18		clc		                CLC
.3938d9	a9 20 00	lda #$0020	                LDA #$0020;
.3938dc	85 28		sta $28		                STA OPL2_REG_REGION
.3938de	20 91 3d	jsr $393d91	                JSR OPL2_GET_REG_OFFSET
.3938e1	28		plp		                PLP ; Pull the Carry out
.3938e2	e2 20		sep #$20	                SEP #$20        ; set A short
.3938e4	b0 08		bcs $3938ee	                BCS OPL2_Set_Vibrato_Set;
.3938e6	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3938e8	29 bf		and #$bf	                AND #$BF
.3938ea	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3938ec	80 06		bra $3938f4	                BRA OPL2_Set_Vibrato_Exit
.3938ee					OPL2_Set_Vibrato_Set
.3938ee	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3938f0	09 40		ora #$40	                ORA #$40
.3938f2	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3938f4					OPL2_Set_Vibrato_Exit
.3938f4	6b		rtl		                RTL
.3938f5					OPL2_GET_VIBRATO
.3938f5	48		pha		                PHA             ; begin setdp macro
.3938f6	08		php		                PHP
.3938f7	c2 20		rep #$20	                REP #$20        ; set A long
.3938f9	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3938fc	5b		tcd		                TCD
.3938fd	28		plp		                PLP
.3938fe	68		pla		                PLA             ; end setdp macro
.3938ff	c2 20		rep #$20	                REP #$20        ; set A long
.393901	a9 20 00	lda #$0020	                LDA #$0020;
.393904	85 28		sta $28		                STA OPL2_REG_REGION
.393906	20 91 3d	jsr $393d91	                JSR OPL2_GET_REG_OFFSET
.393909	e2 20		sep #$20	                SEP #$20        ; set A short
.39390b	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39390d	29 40		and #$40	                AND #$40
.39390f	6b		rtl		                RTL
.393910					OPL2_SET_MAINTAINSUSTAIN
.393910	48		pha		                PHA             ; begin setdp macro
.393911	08		php		                PHP
.393912	c2 20		rep #$20	                REP #$20        ; set A long
.393914	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393917	5b		tcd		                TCD
.393918	28		plp		                PLP
.393919	68		pla		                PLA             ; end setdp macro
.39391a	08		php		              PHP ; Push the Carry
.39391b	c2 20		rep #$20	                REP #$20        ; set A long
.39391d	18		clc		              CLC
.39391e	a9 20 00	lda #$0020	              LDA #$0020;
.393921	85 28		sta $28		              STA OPL2_REG_REGION
.393923	20 91 3d	jsr $393d91	              JSR OPL2_GET_REG_OFFSET
.393926	28		plp		              PLP ; Pull the Carry out
.393927	e2 20		sep #$20	                SEP #$20        ; set A short
.393929	b0 08		bcs $393933	              BCS OPL2_Set_MaintainSustain_Set;
.39392b	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39392d	29 df		and #$df	              AND #$DF
.39392f	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393931	80 06		bra $393939	              BRA OPL2_Set_MaintainSustain_Exit
.393933					OPL2_Set_MaintainSustain_Set
.393933	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393935	09 20		ora #$20	              ORA #$20
.393937	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393939					OPL2_Set_MaintainSustain_Exit
.393939	6b		rtl		                RTL
.39393a					OPL2_GET_MAINTAINSUSTAIN
.39393a	48		pha		                PHA             ; begin setdp macro
.39393b	08		php		                PHP
.39393c	c2 20		rep #$20	                REP #$20        ; set A long
.39393e	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393941	5b		tcd		                TCD
.393942	28		plp		                PLP
.393943	68		pla		                PLA             ; end setdp macro
.393944	c2 20		rep #$20	                REP #$20        ; set A long
.393946	a9 20 00	lda #$0020	              LDA #$0020;
.393949	85 28		sta $28		              STA OPL2_REG_REGION
.39394b	20 91 3d	jsr $393d91	              JSR OPL2_GET_REG_OFFSET
.39394e	e2 20		sep #$20	                SEP #$20        ; set A short
.393950	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393952	29 20		and #$20	              AND #$20
.393954	6b		rtl		                RTL
.393955					OPL2_SET_ENVELOPESCALING
.393955	48		pha		                PHA             ; begin setdp macro
.393956	08		php		                PHP
.393957	c2 20		rep #$20	                REP #$20        ; set A long
.393959	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39395c	5b		tcd		                TCD
.39395d	28		plp		                PLP
.39395e	68		pla		                PLA             ; end setdp macro
.39395f	08		php		              PHP ; Push the Carry
.393960	c2 20		rep #$20	                REP #$20        ; set A long
.393962	18		clc		              CLC
.393963	a9 20 00	lda #$0020	              LDA #$0020;
.393966	85 28		sta $28		              STA OPL2_REG_REGION
.393968	20 91 3d	jsr $393d91	              JSR OPL2_GET_REG_OFFSET
.39396b	28		plp		              PLP ; Pull the Carry out
.39396c	e2 20		sep #$20	                SEP #$20        ; set A short
.39396e	b0 08		bcs $393978	              BCS OPL2_Set_EnvelopeScaling_Set;
.393970	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393972	29 ef		and #$ef	              AND #$EF
.393974	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393976	80 06		bra $39397e	              BRA OPL2_Set_EnvelopeScaling_Exit
.393978					OPL2_Set_EnvelopeScaling_Set
.393978	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39397a	09 10		ora #$10	              ORA #$10
.39397c	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39397e					OPL2_Set_EnvelopeScaling_Exit
.39397e	6b		rtl		                RTL
.39397f					OPL2_GET_ENVELOPESCALING
.39397f	48		pha		                PHA             ; begin setdp macro
.393980	08		php		                PHP
.393981	c2 20		rep #$20	                REP #$20        ; set A long
.393983	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393986	5b		tcd		                TCD
.393987	28		plp		                PLP
.393988	68		pla		                PLA             ; end setdp macro
.393989	c2 20		rep #$20	                REP #$20        ; set A long
.39398b	a9 20 00	lda #$0020	              LDA #$0020;
.39398e	85 28		sta $28		              STA OPL2_REG_REGION
.393990	20 91 3d	jsr $393d91	              JSR OPL2_GET_REG_OFFSET
.393993	e2 20		sep #$20	                SEP #$20        ; set A short
.393995	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393997	29 10		and #$10	              AND #$10
.393999	6b		rtl		                RTL
.39399a					OPL2_GET_MODFREQMULTIPLE
.39399a	48		pha		                PHA             ; begin setdp macro
.39399b	08		php		                PHP
.39399c	c2 20		rep #$20	                REP #$20        ; set A long
.39399e	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3939a1	5b		tcd		                TCD
.3939a2	28		plp		                PLP
.3939a3	68		pla		                PLA             ; end setdp macro
.3939a4	c2 20		rep #$20	                REP #$20        ; set A long
.3939a6	a9 20 00	lda #$0020	              LDA #$0020;
.3939a9	85 28		sta $28		              STA OPL2_REG_REGION
.3939ab	20 91 3d	jsr $393d91	              JSR OPL2_GET_REG_OFFSET
.3939ae	e2 20		sep #$20	                SEP #$20        ; set A short
.3939b0	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3939b2	29 0f		and #$0f	              AND #$0F
.3939b4	6b		rtl		              RTL
.3939b5					OPL2_SET_MODFREQMULTIPLE
.3939b5	48		pha		                PHA             ; begin setdp macro
.3939b6	08		php		                PHP
.3939b7	c2 20		rep #$20	                REP #$20        ; set A long
.3939b9	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3939bc	5b		tcd		                TCD
.3939bd	28		plp		                PLP
.3939be	68		pla		                PLA             ; end setdp macro
.3939bf	c2 20		rep #$20	                REP #$20        ; set A long
.3939c1	a9 20 00	lda #$0020	                LDA #$0020;
.3939c4	85 28		sta $28		                STA OPL2_REG_REGION
.3939c6	20 91 3d	jsr $393d91	                JSR OPL2_GET_REG_OFFSET
.3939c9	e2 20		sep #$20	                SEP #$20        ; set A short
.3939cb	a5 32		lda $32		                LDA OPL2_PARAMETER0
.3939cd	29 0f		and #$0f	                AND #$0F
.3939cf	85 32		sta $32		                STA OPL2_PARAMETER0
.3939d1	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3939d3	29 f0		and #$f0	                AND #$F0
.3939d5	05 32		ora $32		                ORA OPL2_PARAMETER0
.3939d7	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3939d9	6b		rtl		                RTL
.3939da					OPL2_SET_SCALINGLEVEL
.3939da	48		pha		                PHA             ; begin setdp macro
.3939db	08		php		                PHP
.3939dc	c2 20		rep #$20	                REP #$20        ; set A long
.3939de	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3939e1	5b		tcd		                TCD
.3939e2	28		plp		                PLP
.3939e3	68		pla		                PLA             ; end setdp macro
.3939e4	c2 20		rep #$20	                REP #$20        ; set A long
.3939e6	a9 40 00	lda #$0040	                LDA #$0040;
.3939e9	85 28		sta $28		                STA OPL2_REG_REGION
.3939eb	20 91 3d	jsr $393d91	                JSR OPL2_GET_REG_OFFSET
.3939ee	e2 20		sep #$20	                SEP #$20        ; set A short
.3939f0	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.3939f2	29 03		and #$03	                AND #$03
.3939f4	0a		asl a		                ASL
.3939f5	0a		asl a		                ASL
.3939f6	0a		asl a		                ASL
.3939f7	0a		asl a		                ASL
.3939f8	0a		asl a		                ASL
.3939f9	0a		asl a		                ASL
.3939fa	85 32		sta $32		                STA OPL2_PARAMETER0
.3939fc	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3939fe	29 3f		and #$3f	                AND #$3F
.393a00	05 32		ora $32		                ORA OPL2_PARAMETER0
.393a02	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393a04	6b		rtl		                RTL
.393a05					OPL2_SET_VOLUME
.393a05	48		pha		                PHA             ; begin setdp macro
.393a06	08		php		                PHP
.393a07	c2 20		rep #$20	                REP #$20        ; set A long
.393a09	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393a0c	5b		tcd		                TCD
.393a0d	28		plp		                PLP
.393a0e	68		pla		                PLA             ; end setdp macro
.393a0f	c2 20		rep #$20	                REP #$20        ; set A long
.393a11	a9 40 00	lda #$0040	                LDA #$0040  ;
.393a14	85 28		sta $28		                STA OPL2_REG_REGION
.393a16	20 91 3d	jsr $393d91	                JSR OPL2_GET_REG_OFFSET
.393a19	e2 20		sep #$20	                SEP #$20        ; set A short
.393a1b	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Volume
.393a1d	29 3f		and #$3f	                AND #$3F
.393a1f	85 32		sta $32		                STA OPL2_PARAMETER0
.393a21	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393a23	29 c0		and #$c0	                AND #$C0
.393a25	05 32		ora $32		                ORA OPL2_PARAMETER0
.393a27	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393a29	6b		rtl		                RTL
.393a2a					OPL2_GET_VOLUME
.393a2a	48		pha		                PHA             ; begin setdp macro
.393a2b	08		php		                PHP
.393a2c	c2 20		rep #$20	                REP #$20        ; set A long
.393a2e	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393a31	5b		tcd		                TCD
.393a32	28		plp		                PLP
.393a33	68		pla		                PLA             ; end setdp macro
.393a34	c2 20		rep #$20	                REP #$20        ; set A long
.393a36	a9 40 00	lda #$0040	                LDA #$0040  ;
.393a39	85 28		sta $28		                STA OPL2_REG_REGION
.393a3b	20 91 3d	jsr $393d91	                JSR OPL2_GET_REG_OFFSET
.393a3e	e2 20		sep #$20	                SEP #$20        ; set A short
.393a40	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393a42	29 3f		and #$3f	                AND #$3F
.393a44	6b		rtl		                RTL
.393a45					OPL2_SET_ATTACK
.393a45	48		pha		                PHA             ; begin setdp macro
.393a46	08		php		                PHP
.393a47	c2 20		rep #$20	                REP #$20        ; set A long
.393a49	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393a4c	5b		tcd		                TCD
.393a4d	28		plp		                PLP
.393a4e	68		pla		                PLA             ; end setdp macro
.393a4f	c2 20		rep #$20	                REP #$20        ; set A long
.393a51	a9 60 00	lda #$0060	                LDA #$0060  ;
.393a54	85 28		sta $28		                STA OPL2_REG_REGION
.393a56	20 91 3d	jsr $393d91	                JSR OPL2_GET_REG_OFFSET
.393a59	e2 20		sep #$20	                SEP #$20        ; set A short
.393a5b	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393a5d	29 0f		and #$0f	                AND #$0F
.393a5f	0a		asl a		                ASL
.393a60	0a		asl a		                ASL
.393a61	0a		asl a		                ASL
.393a62	0a		asl a		                ASL
.393a63	85 32		sta $32		                STA OPL2_PARAMETER0
.393a65	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393a67	29 0f		and #$0f	                AND #$0F
.393a69	05 32		ora $32		                ORA OPL2_PARAMETER0
.393a6b	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393a6d	6b		rtl		                RTL
.393a6e					OPL2_GET_ATTACK
.393a6e	48		pha		                PHA             ; begin setdp macro
.393a6f	08		php		                PHP
.393a70	c2 20		rep #$20	                REP #$20        ; set A long
.393a72	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393a75	5b		tcd		                TCD
.393a76	28		plp		                PLP
.393a77	68		pla		                PLA             ; end setdp macro
.393a78	c2 20		rep #$20	                REP #$20        ; set A long
.393a7a	a9 60 00	lda #$0060	                LDA #$0060
.393a7d	85 28		sta $28		                STA OPL2_REG_REGION
.393a7f	20 91 3d	jsr $393d91	                JSR OPL2_GET_REG_OFFSET
.393a82	e2 20		sep #$20	                SEP #$20        ; set A short
.393a84	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393a86	29 f0		and #$f0	                AND #$F0
.393a88	4a		lsr a		                LSR
.393a89	4a		lsr a		                LSR
.393a8a	4a		lsr a		                LSR
.393a8b	4a		lsr a		                LSR
.393a8c	6b		rtl		                RTL
.393a8d					OPL2_SET_DECAY
.393a8d	48		pha		                PHA             ; begin setdp macro
.393a8e	08		php		                PHP
.393a8f	c2 20		rep #$20	                REP #$20        ; set A long
.393a91	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393a94	5b		tcd		                TCD
.393a95	28		plp		                PLP
.393a96	68		pla		                PLA             ; end setdp macro
.393a97	c2 20		rep #$20	                REP #$20        ; set A long
.393a99	a9 60 00	lda #$0060	                LDA #$0060;
.393a9c	85 28		sta $28		                STA OPL2_REG_REGION
.393a9e	20 91 3d	jsr $393d91	                JSR OPL2_GET_REG_OFFSET
.393aa1	e2 20		sep #$20	                SEP #$20        ; set A short
.393aa3	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393aa5	29 0f		and #$0f	                AND #$0F
.393aa7	85 32		sta $32		                STA OPL2_PARAMETER0
.393aa9	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393aab	29 f0		and #$f0	                AND #$F0
.393aad	05 32		ora $32		                ORA OPL2_PARAMETER0
.393aaf	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393ab1	6b		rtl		                RTL
.393ab2					OPL2_GET_DECAY
.393ab2	48		pha		                PHA             ; begin setdp macro
.393ab3	08		php		                PHP
.393ab4	c2 20		rep #$20	                REP #$20        ; set A long
.393ab6	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393ab9	5b		tcd		                TCD
.393aba	28		plp		                PLP
.393abb	68		pla		                PLA             ; end setdp macro
.393abc	c2 20		rep #$20	                REP #$20        ; set A long
.393abe	a9 60 00	lda #$0060	                LDA #$0060
.393ac1	85 28		sta $28		                STA OPL2_REG_REGION
.393ac3	20 91 3d	jsr $393d91	                JSR OPL2_GET_REG_OFFSET
.393ac6	e2 20		sep #$20	                SEP #$20        ; set A short
.393ac8	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393aca	29 0f		and #$0f	                AND #$0F
.393acc	6b		rtl		                RTL
.393acd					OPL2_SET_SUSTAIN
.393acd	48		pha		                PHA             ; begin setdp macro
.393ace	08		php		                PHP
.393acf	c2 20		rep #$20	                REP #$20        ; set A long
.393ad1	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393ad4	5b		tcd		                TCD
.393ad5	28		plp		                PLP
.393ad6	68		pla		                PLA             ; end setdp macro
.393ad7	c2 20		rep #$20	                REP #$20        ; set A long
.393ad9	a9 80 00	lda #$0080	                LDA #$0080;
.393adc	85 28		sta $28		                STA OPL2_REG_REGION
.393ade	20 91 3d	jsr $393d91	                JSR OPL2_GET_REG_OFFSET
.393ae1	e2 20		sep #$20	                SEP #$20        ; set A short
.393ae3	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393ae5	29 0f		and #$0f	                AND #$0F
.393ae7	0a		asl a		                ASL
.393ae8	0a		asl a		                ASL
.393ae9	0a		asl a		                ASL
.393aea	0a		asl a		                ASL
.393aeb	85 32		sta $32		                STA OPL2_PARAMETER0
.393aed	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393aef	29 0f		and #$0f	                AND #$0F
.393af1	05 32		ora $32		                ORA OPL2_PARAMETER0
.393af3	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393af5	6b		rtl		                RTL
.393af6					OPL2_GET_SUSTAIN
.393af6	48		pha		                PHA             ; begin setdp macro
.393af7	08		php		                PHP
.393af8	c2 20		rep #$20	                REP #$20        ; set A long
.393afa	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393afd	5b		tcd		                TCD
.393afe	28		plp		                PLP
.393aff	68		pla		                PLA             ; end setdp macro
.393b00	c2 20		rep #$20	                REP #$20        ; set A long
.393b02	a9 80 00	lda #$0080	                LDA #$0080
.393b05	85 28		sta $28		                STA OPL2_REG_REGION
.393b07	20 91 3d	jsr $393d91	                JSR OPL2_GET_REG_OFFSET
.393b0a	e2 20		sep #$20	                SEP #$20        ; set A short
.393b0c	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393b0e	29 f0		and #$f0	                AND #$F0
.393b10	4a		lsr a		                LSR
.393b11	4a		lsr a		                LSR
.393b12	4a		lsr a		                LSR
.393b13	4a		lsr a		                LSR
.393b14	6b		rtl		                RTL
.393b15					OPL2_SET_RELEASE
.393b15	48		pha		                PHA             ; begin setdp macro
.393b16	08		php		                PHP
.393b17	c2 20		rep #$20	                REP #$20        ; set A long
.393b19	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b1c	5b		tcd		                TCD
.393b1d	28		plp		                PLP
.393b1e	68		pla		                PLA             ; end setdp macro
.393b1f	c2 20		rep #$20	                REP #$20        ; set A long
.393b21	a9 80 00	lda #$0080	                LDA #$0080;
.393b24	85 28		sta $28		                STA OPL2_REG_REGION
.393b26	20 91 3d	jsr $393d91	                JSR OPL2_GET_REG_OFFSET
.393b29	e2 20		sep #$20	                SEP #$20        ; set A short
.393b2b	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393b2d	29 0f		and #$0f	                AND #$0F
.393b2f	85 32		sta $32		                STA OPL2_PARAMETER0
.393b31	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393b33	29 f0		and #$f0	                AND #$F0
.393b35	05 32		ora $32		                ORA OPL2_PARAMETER0
.393b37	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393b39	6b		rtl		                RTL
.393b3a					OPL2_GET_RELEASE
.393b3a	48		pha		                PHA             ; begin setdp macro
.393b3b	08		php		                PHP
.393b3c	c2 20		rep #$20	                REP #$20        ; set A long
.393b3e	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b41	5b		tcd		                TCD
.393b42	28		plp		                PLP
.393b43	68		pla		                PLA             ; end setdp macro
.393b44	c2 20		rep #$20	                REP #$20        ; set A long
.393b46	a9 80 00	lda #$0080	                LDA #$0080
.393b49	85 28		sta $28		                STA OPL2_REG_REGION
.393b4b	20 91 3d	jsr $393d91	                JSR OPL2_GET_REG_OFFSET
.393b4e	e2 20		sep #$20	                SEP #$20        ; set A short
.393b50	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393b52	29 0f		and #$0f	                AND #$0F
.393b54	6b		rtl		                RTL
.393b55					OPL2_SET_FNUMBER
.393b55	48		pha		                PHA             ; begin setdp macro
.393b56	08		php		                PHP
.393b57	c2 20		rep #$20	                REP #$20        ; set A long
.393b59	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b5c	5b		tcd		                TCD
.393b5d	28		plp		                PLP
.393b5e	68		pla		                PLA             ; end setdp macro
.393b5f	e2 20		sep #$20	                SEP #$20        ; set A short
.393b61	18		clc		                CLC
.393b62	a5 27		lda $27		                LDA OPL2_CHANNEL
.393b64	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393b66	69 a0		adc #$a0	                ADC #$A0
.393b68	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393b6a	a9 00		lda #$00	                LDA #$00
.393b6c	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393b6e	c2 30		rep #$30	                REP #$30        ; set A&X long
.393b70	18		clc		                CLC
.393b71	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393b74	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393b76	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393b78	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393b7b	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393b7d	e2 20		sep #$20	                SEP #$20        ; set A short
.393b7f	a5 32		lda $32		                LDA OPL2_PARAMETER0     ; Load the first 8 Bits Value of FNumber
.393b81	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]  ; Load
.393b83	18		clc		                CLC
.393b84	a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.393b86	69 10		adc #$10	                ADC #$10
.393b88	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393b8a	a5 33		lda $33		                LDA OPL2_PARAMETER1
.393b8c	29 03		and #$03	                AND #$03
.393b8e	85 33		sta $33		                STA OPL2_PARAMETER1
.393b90	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393b92	29 fc		and #$fc	                AND #$FC
.393b94	05 33		ora $33		                ORA OPL2_PARAMETER1
.393b96	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393b98	6b		rtl		                RTL
.393b99					OPL2_GET_FNUMBER
.393b99	48		pha		                PHA             ; begin setdp macro
.393b9a	08		php		                PHP
.393b9b	c2 20		rep #$20	                REP #$20        ; set A long
.393b9d	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393ba0	5b		tcd		                TCD
.393ba1	28		plp		                PLP
.393ba2	68		pla		                PLA             ; end setdp macro
.393ba3	e2 20		sep #$20	                SEP #$20        ; set A short
.393ba5	18		clc		                CLC
.393ba6	a5 27		lda $27		                LDA OPL2_CHANNEL
.393ba8	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393baa	69 a0		adc #$a0	                ADC #$A0
.393bac	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393bae	a9 00		lda #$00	                LDA #$00
.393bb0	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393bb2	c2 30		rep #$30	                REP #$30        ; set A&X long
.393bb4	18		clc		                CLC
.393bb5	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393bb8	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393bba	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393bbc	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393bbf	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393bc1	e2 20		sep #$20	                SEP #$20        ; set A short
.393bc3	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393bc5	85 32		sta $32		                STA OPL2_PARAMETER0
.393bc7	18		clc		                CLC
.393bc8	a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.393bca	69 10		adc #$10	                ADC #$10
.393bcc	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393bce	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393bd0	29 03		and #$03	                AND #$03
.393bd2	85 33		sta $33		                STA OPL2_PARAMETER1
.393bd4	6b		rtl		                RTL
.393bd5					OPL2_Set_Frequency
.393bd5	6b		rtl		                RTL
.393bd6					OPL2_Get_Frequency
.393bd6	6b		rtl		                RTL
.393bd7					OPL2_SET_BLOCK
.393bd7	48		pha		                PHA             ; begin setdp macro
.393bd8	08		php		                PHP
.393bd9	c2 20		rep #$20	                REP #$20        ; set A long
.393bdb	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393bde	5b		tcd		                TCD
.393bdf	28		plp		                PLP
.393be0	68		pla		                PLA             ; end setdp macro
.393be1	e2 20		sep #$20	                SEP #$20        ; set A short
.393be3	18		clc		                CLC
.393be4	a5 27		lda $27		                LDA OPL2_CHANNEL
.393be6	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393be8	69 b0		adc #$b0	                ADC #$B0
.393bea	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393bec	a9 00		lda #$00	                LDA #$00
.393bee	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393bf0	c2 30		rep #$30	                REP #$30        ; set A&X long
.393bf2	18		clc		                CLC
.393bf3	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393bf6	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393bf8	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393bfa	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393bfd	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393bff	e2 20		sep #$20	                SEP #$20        ; set A short
.393c01	a5 31		lda $31		                LDA OPL2_OCTAVE
.393c03	29 07		and #$07	                AND #$07
.393c05	0a		asl a		                ASL
.393c06	0a		asl a		                ASL
.393c07	85 31		sta $31		                STA OPL2_OCTAVE
.393c09	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393c0b	29 e3		and #$e3	                AND #$E3
.393c0d	05 31		ora $31		                ORA OPL2_OCTAVE
.393c0f	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393c11	60		rts		                RTS
.393c12					OPL2_SET_KEYON
.393c12	48		pha		                PHA             ; begin setdp macro
.393c13	08		php		                PHP
.393c14	c2 20		rep #$20	                REP #$20        ; set A long
.393c16	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c19	5b		tcd		                TCD
.393c1a	28		plp		                PLP
.393c1b	68		pla		                PLA             ; end setdp macro
.393c1c	e2 20		sep #$20	                SEP #$20        ; set A short
.393c1e	18		clc		                CLC
.393c1f	a5 27		lda $27		                LDA OPL2_CHANNEL
.393c21	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393c23	69 b0		adc #$b0	                ADC #$B0
.393c25	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393c27	a9 00		lda #$00	                LDA #$00
.393c29	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393c2b	c2 30		rep #$30	                REP #$30        ; set A&X long
.393c2d	18		clc		                CLC
.393c2e	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393c31	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393c33	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393c35	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393c38	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393c3a	e2 20		sep #$20	                SEP #$20        ; set A short
.393c3c	a5 32		lda $32		                LDA OPL2_PARAMETER0
.393c3e	29 01		and #$01	                AND #$01
.393c40	f0 02		beq $393c44	                BEQ SET_KEYON_OFF
.393c42	a9 20		lda #$20	                LDA #$20
.393c44					    SET_KEYON_OFF
.393c44	85 32		sta $32		                STA OPL2_PARAMETER0
.393c46	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393c48	29 df		and #$df	                AND #$DF
.393c4a	05 32		ora $32		                ORA OPL2_PARAMETER0
.393c4c	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393c4e	60		rts		                RTS
.393c4f					OPL2_SET_FEEDBACK
.393c4f	48		pha		                PHA             ; begin setdp macro
.393c50	08		php		                PHP
.393c51	c2 20		rep #$20	                REP #$20        ; set A long
.393c53	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c56	5b		tcd		                TCD
.393c57	28		plp		                PLP
.393c58	68		pla		                PLA             ; end setdp macro
.393c59	e2 20		sep #$20	                SEP #$20        ; set A short
.393c5b	18		clc		              CLC
.393c5c	a5 27		lda $27		              LDA OPL2_CHANNEL
.393c5e	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393c60	69 c0		adc #$c0	              ADC #$C0
.393c62	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393c64	a9 00		lda #$00	              LDA #$00
.393c66	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393c68	c2 30		rep #$30	                REP #$30        ; set A&X long
.393c6a	18		clc		              CLC
.393c6b	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393c6e	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393c70	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393c72	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393c75	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393c77	e2 20		sep #$20	                SEP #$20        ; set A short
.393c79	a5 32		lda $32		              LDA OPL2_PARAMETER0
.393c7b	29 07		and #$07	              AND #$07
.393c7d	0a		asl a		              ASL
.393c7e	85 32		sta $32		              STA OPL2_PARAMETER0
.393c80	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393c82	29 01		and #$01	              AND #$01
.393c84	05 32		ora $32		              ORA OPL2_PARAMETER0
.393c86	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393c88	6b		rtl		                RTL
.393c89					OPL2_SET_SYNTHMODE
.393c89	48		pha		                PHA             ; begin setdp macro
.393c8a	08		php		                PHP
.393c8b	c2 20		rep #$20	                REP #$20        ; set A long
.393c8d	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c90	5b		tcd		                TCD
.393c91	28		plp		                PLP
.393c92	68		pla		                PLA             ; end setdp macro
.393c93	08		php		              PHP ; Push the Carry
.393c94	e2 20		sep #$20	                SEP #$20        ; set A short
.393c96	18		clc		              CLC
.393c97	a5 27		lda $27		              LDA OPL2_CHANNEL
.393c99	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393c9b	69 c0		adc #$c0	              ADC #$C0
.393c9d	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393c9f	a9 00		lda #$00	              LDA #$00
.393ca1	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393ca3	c2 30		rep #$30	                REP #$30        ; set A&X long
.393ca5	18		clc		              CLC
.393ca6	a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393ca9	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393cab	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393cad	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393cb0	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393cb2	28		plp		              PLP ; Pull the Carry out
.393cb3	e2 20		sep #$20	                SEP #$20        ; set A short
.393cb5	b0 08		bcs $393cbf	              BCS OPL2_Set_Synthmode_Set;
.393cb7	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393cb9	29 fe		and #$fe	              AND #$FE
.393cbb	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393cbd	80 06		bra $393cc5	              BRA OPL2_Set_Synthmode_Exit
.393cbf					OPL2_Set_Synthmode_Set
.393cbf	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393cc1	09 01		ora #$01	              ORA #$01
.393cc3	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393cc5					OPL2_Set_Synthmode_Exit
.393cc5	6b		rtl		                RTL
.393cc6					OPL2_SET_DEEPTREMOLO
.393cc6	48		pha		                PHA             ; begin setdp macro
.393cc7	08		php		                PHP
.393cc8	c2 20		rep #$20	                REP #$20        ; set A long
.393cca	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393ccd	5b		tcd		                TCD
.393cce	28		plp		                PLP
.393ccf	68		pla		                PLA             ; end setdp macro
.393cd0	c2 20		rep #$20	                REP #$20        ; set A long
.393cd2	a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.393cd5	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393cd7	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393cda	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393cdc	e2 20		sep #$20	                SEP #$20        ; set A short
.393cde	b0 08		bcs $393ce8	              BCS OPL2_Set_DeepTremolo_Set;
.393ce0	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393ce2	29 7f		and #$7f	              AND #$7F
.393ce4	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393ce6	80 06		bra $393cee	              BRA OPL2_Set_DeepTremolo_Exit
.393ce8					OPL2_Set_DeepTremolo_Set
.393ce8	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393cea	09 80		ora #$80	              ORA #$80
.393cec	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393cee					OPL2_Set_DeepTremolo_Exit
.393cee	6b		rtl		                RTL
.393cef					OPL2_SET_DEEPVIBRATO
.393cef	48		pha		                PHA             ; begin setdp macro
.393cf0	08		php		                PHP
.393cf1	c2 20		rep #$20	                REP #$20        ; set A long
.393cf3	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393cf6	5b		tcd		                TCD
.393cf7	28		plp		                PLP
.393cf8	68		pla		                PLA             ; end setdp macro
.393cf9	c2 20		rep #$20	                REP #$20        ; set A long
.393cfb	a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.393cfe	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393d00	a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393d03	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393d05	e2 20		sep #$20	                SEP #$20        ; set A short
.393d07	b0 08		bcs $393d11	              BCS OPL2_Set_DeepVibrato_Set;
.393d09	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393d0b	29 bf		and #$bf	              AND #$BF
.393d0d	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393d0f	80 06		bra $393d17	              BRA OPL2_Set_DeepVibrato_Exit
.393d11					OPL2_Set_DeepVibrato_Set
.393d11	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393d13	09 40		ora #$40	              ORA #$40
.393d15	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393d17					OPL2_Set_DeepVibrato_Exit
.393d17	6b		rtl		                RTL
.393d18					OPL2_SET_PERCUSSION
.393d18	48		pha		                PHA             ; begin setdp macro
.393d19	08		php		                PHP
.393d1a	c2 20		rep #$20	                REP #$20        ; set A long
.393d1c	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d1f	5b		tcd		                TCD
.393d20	28		plp		                PLP
.393d21	68		pla		                PLA             ; end setdp macro
.393d22	c2 20		rep #$20	                REP #$20        ; set A long
.393d24	a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.393d27	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393d29	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393d2c	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393d2e	e2 20		sep #$20	                SEP #$20        ; set A short
.393d30	b0 08		bcs $393d3a	                BCS OPL2_Set_Percussion_Set;
.393d32	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d34	29 df		and #$df	                AND #$DF
.393d36	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393d38	80 06		bra $393d40	                BRA OPL2_Set_Percussion_Exit
.393d3a					OPL2_Set_Percussion_Set
.393d3a	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d3c	09 20		ora #$20	                ORA #$20
.393d3e	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393d40					OPL2_Set_Percussion_Exit
.393d40	6b		rtl		                RTL
.393d41					OPL2_SET_DRUMS
.393d41	48		pha		                PHA             ; begin setdp macro
.393d42	08		php		                PHP
.393d43	c2 20		rep #$20	                REP #$20        ; set A long
.393d45	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d48	5b		tcd		                TCD
.393d49	28		plp		                PLP
.393d4a	68		pla		                PLA             ; end setdp macro
.393d4b	c2 20		rep #$20	                REP #$20        ; set A long
.393d4d	a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.393d50	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393d52	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393d55	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393d57	e2 20		sep #$20	                SEP #$20        ; set A short
.393d59	a5 32		lda $32		                LDA OPL2_PARAMETER0
.393d5b	29 1f		and #$1f	                AND #$1F
.393d5d	85 32		sta $32		                STA OPL2_PARAMETER0
.393d5f	49 ff		eor #$ff	                EOR #$FF
.393d61	85 33		sta $33		                STA OPL2_PARAMETER1
.393d63	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d65	25 33		and $33		                AND OPL2_PARAMETER1
.393d67	05 32		ora $32		                ORA OPL2_PARAMETER0
.393d69	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393d6b	6b		rtl		                RTL
.393d6c					OPL2_SET_WAVEFORM
.393d6c	48		pha		                PHA             ; begin setdp macro
.393d6d	08		php		                PHP
.393d6e	c2 20		rep #$20	                REP #$20        ; set A long
.393d70	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d73	5b		tcd		                TCD
.393d74	28		plp		                PLP
.393d75	68		pla		                PLA             ; end setdp macro
.393d76	c2 20		rep #$20	                REP #$20        ; set A long
.393d78	a9 e0 00	lda #$00e0	                LDA #$00E0;
.393d7b	85 28		sta $28		                STA OPL2_REG_REGION
.393d7d	20 91 3d	jsr $393d91	                JSR OPL2_GET_REG_OFFSET
.393d80	e2 20		sep #$20	                SEP #$20        ; set A short
.393d82	a5 32		lda $32		                LDA OPL2_PARAMETER0
.393d84	29 03		and #$03	                AND #$03
.393d86	85 32		sta $32		                STA OPL2_PARAMETER0
.393d88	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d8a	29 fc		and #$fc	                AND #$FC
.393d8c	05 32		ora $32		                ORA OPL2_PARAMETER0
.393d8e	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393d90	6b		rtl		                RTL
.393d91					OPL2_GET_REG_OFFSET
.393d91	e2 30		sep #$30	                SEP #$30        ; set A&X short
.393d93	a5 27		lda $27		                LDA OPL2_CHANNEL
.393d95	29 0f		and #$0f	                AND #$0F
.393d97	aa		tax		                TAX
.393d98	a5 26		lda $26		                LDA OPL2_OPERATOR   ; 0 = operator 1, other = operator 2
.393d9a	d0 06		bne $393da2	                BNE OPL2_Get_Register_Offset_l0
.393d9c	bf d9 13 39	lda $3913d9,x	                LDA @lregisterOffsets_operator0, X
.393da0	80 04		bra $393da6	                BRA OPL2_Get_Register_Offset_exit
.393da2					OPL2_Get_Register_Offset_l0
.393da2	bf e2 13 39	lda $3913e2,x	                LDA @lregisterOffsets_operator1, X
.393da6					OPL2_Get_Register_Offset_exit
.393da6	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393da8	a9 00		lda #$00	                LDA #$00
.393daa	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393dac	c2 30		rep #$30	                REP #$30        ; set A&X long
.393dae	18		clc		                CLC
.393daf	a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393db2	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393db4	65 28		adc $28		                ADC OPL2_REG_REGION ; Ex: $20, or $40, $60, $80 (in 16bits)
.393db6	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393db8	a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393dbb	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393dbd	60		rts		                RTS

;******  Return to file: src\kernel.asm


;******  Processing file: src\sdcard_controller_def.asm

=$afea00				SDC_VERSION_REG         = $AFEA00    ; Ought to read 12
=$afea01				SDC_CONTROL_REG         = $AFEA01    ; Bit0 1 = Reset core logic, and registers. Self clearing
=$afea02				SDC_TRANS_TYPE_REG      = $AFEA02  ; Bit[1:0]
=$00					SDC_TRANS_DIRECT      = $00   ; 00 = Direct Access
=$01					SDC_TRANS_INIT_SD     = $01   ; 01 = Init SD
=$02					SDC_TRANS_READ_BLK    = $02   ; 10 = RW_READ_BLOCK (512 Bytes)
=$03					SDC_TRANS_WRITE_BLK   = $03   ; 11 = RW_WRITE_SD_BLOCK
=$afea03				SDC_TRANS_CONTROL_REG   = $AFEA03
=$01					SDC_TRANS_START         = $01
=$afea04				SDC_TRANS_STATUS_REG    = $AFEA04
=$01					SDC_TRANS_BUSY          = $01     ;  1= Transaction Busy
=$afea05				SDC_TRANS_ERROR_REG     = $AFEA05
=$00					SDC_TRANS_INIT_NO_ERR   = $00   ; Init Error Report [1:0]
=$01					SDC_TRANS_INIT_CMD0_ERR = $01
=$02					SDC_TRANS_INIT_CMD1_ERR = $02
=$00					SDC_TRANS_RD_NO_ERR     = $00   ; Read Error Report [3:2]
=$04					SDC_TRANS_RD_CMD_ERR    = $04
=$08					SDC_TRANS_RD_TOKEN_ERR  = $08
=$00					SDC_TRANS_WR_NO_ERR     = $00   ; Write Report Error  [5:4]
=$10					SDC_TRANS_WR_CMD_ERR    = $10   ;
=$20					SDC_TRANS_WR_DATA_ERR   = $20
=$30					SDC_TRANS_WR_BUSY_ERR   = $30
=$afea06				SDC_DIRECT_ACCESS_REG   = $AFEA06 ; SPI Direct Read and Write - Set DATA before initiating direct Access Transaction
=$afea07				SDC_SD_ADDR_7_0_REG     = $AFEA07 ; Set the ADDR before a block read or block write
=$afea08				SDC_SD_ADDR_15_8_REG    = $AFEA08 ; Addr0 [8:0] Always should be 0, since each block is 512Bytes
=$afea09				SDC_SD_ADDR_23_16_REG   = $AFEA09
=$afea0a				SDC_SD_ADDR_31_24_REG   = $AFEA0A
=$afea0b				SDC_SPI_CLK_DEL_REG     = $AFEA0B
=$afea10				SDC_RX_FIFO_DATA_REG    = $AFEA10 ; Data from the Block Read
=$afea12				SDC_RX_FIFO_DATA_CNT_HI = $AFEA12 ; How many Bytes in the FIFO HI
=$afea13				SDC_RX_FIFO_DATA_CNT_LO = $AFEA13 ; How many Bytes in the FIFO LO
=$afea14				SDC_RX_FIFO_CTRL_REG    = $AFEA14 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)
=$afea20				SDC_TX_FIFO_DATA_REG    = $AFEA20 ; Write Data Block here
=$afea24				SDC_TX_FIFO_CTRL_REG    = $AFEA24 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)

;******  Return to file: src\kernel.asm


;******  Processing file: src\sdos.asm


;******  Processing file: src\sdos_fat.asm


;******  Processing file: src\sdos_bios.asm

=0					BIOS_DEV_HD0 = 0
=1					BIOS_DEV_HD1 = 1
=2					BIOS_DEV_SD = 2
=3					BIOS_DEV_FDC = 3
=$80					BIOS_ERR_BADDEV = $80           ; BIOS bad device # error
=$81					BIOS_ERR_MOUNT = $81            ; BIOS failed to mount the device
=$82					BIOS_ERR_READ = $82             ; BIOS failed to read from a device
=$83					BIOS_ERR_WRITE = $83            ; BIOS failed to write to a device
=$84					BIOS_ERR_TRACK = $84            ; BIOS failed to seek to the correct track
=$85					BIOS_ERR_CMD = $85              ; A general block device command error
.393dbe					ICMDBLOCK
.393dbe	08		php		                PHP
.393dbf	e2 20		sep #$20	                SEP #$20        ; set A short
.393dc1	a5 01		lda $0321	                LDA BIOS_DEV                ; Get the device number
.393dc3	c9 03		cmp #$03	                CMP #BIOS_DEV_FDC           ; Check to see if we're sending to the floppy
.393dc5	d0 06		bne $393dcd	                BNE ret_success             ; No: just return
.393dc7	22 ce 57 39	jsl $3957ce	                JSL FDC_CMDBLOCK            ; Yes: call upon the floppy code
.393dcb	90 0b		bcc $393dd8	                BCC pass_failure
.393dcd					ret_success
.393dcd	e2 20		sep #$20	                SEP #$20        ; set A short
.393dcf	64 00		stz $0320	                STZ BIOS_STATUS
.393dd1	28		plp		                PLP
.393dd2	38		sec		                SEC
.393dd3	6b		rtl		                RTL
.393dd4					ret_failure
.393dd4	e2 20		sep #$20	                SEP #$20        ; set A short
.393dd6	85 00		sta $0320	                STA BIOS_STATUS
.393dd8	28		plp		pass_failure    PLP
.393dd9	18		clc		                CLC
.393dda	6b		rtl		                RTL
.393ddb					IGETBLOCK
.393ddb	0b		phd		                PHD
.393ddc	8b		phb		                PHB
.393ddd	08		php		                PHP
.393dde	48		pha		                PHA             ; begin setdbr macro
.393ddf	08		php		                PHP
.393de0	e2 20		sep #$20	                SEP #$20        ; set A short
.393de2	a9 00		lda #$00	                LDA #0
.393de4	48		pha		                PHA
.393de5	ab		plb		                PLB
.393de6	28		plp		                PLP
.393de7	68		pla		                PLA             ; end setdbr macro
.393de8	48		pha		                PHA             ; begin setdp macro
.393de9	08		php		                PHP
.393dea	c2 20		rep #$20	                REP #$20        ; set A long
.393dec	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393def	5b		tcd		                TCD
.393df0	28		plp		                PLP
.393df1	68		pla		                PLA             ; end setdp macro
.393df2	e2 20		sep #$20	                SEP #$20        ; set A short
.393df4	a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.393df6	c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.393df8	f0 0b		beq $393e05	                BEQ sd_getblock                     ; Yes: go to the SDC GETBLOCK routine
.393dfa	a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.393dfc					ret_failure
.393dfc	e2 20		sep #$20	                SEP #$20        ; set A short
.393dfe	85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.393e00	28		plp		                PLP
.393e01	ab		plb		                PLB
.393e02	2b		pld		                PLD
.393e03	38		sec		                SEC                                 ; Return failure
.393e04	6b		rtl		                RTL
.393e05	22 a0 3e 39	jsl $393ea0	sd_getblock     JSL SDCGETBLOCK                     ; Call the SDC GETBLOCK routine
.393e09					ret_success
.393e09	e2 20		sep #$20	                SEP #$20        ; set A short
.393e0b	64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.393e0d	28		plp		                PLP
.393e0e	ab		plb		                PLB
.393e0f	2b		pld		                PLD
.393e10	38		sec		                SEC                                 ; Return success
.393e11	6b		rtl		                RTL
.393e12					IPUTBLOCK
.393e12	0b		phd		                PHD
.393e13	8b		phb		                PHB
.393e14	08		php		                PHP
.393e15	48		pha		                PHA             ; begin setdbr macro
.393e16	08		php		                PHP
.393e17	e2 20		sep #$20	                SEP #$20        ; set A short
.393e19	a9 00		lda #$00	                LDA #0
.393e1b	48		pha		                PHA
.393e1c	ab		plb		                PLB
.393e1d	28		plp		                PLP
.393e1e	68		pla		                PLA             ; end setdbr macro
.393e1f	48		pha		                PHA             ; begin setdp macro
.393e20	08		php		                PHP
.393e21	c2 20		rep #$20	                REP #$20        ; set A long
.393e23	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393e26	5b		tcd		                TCD
.393e27	28		plp		                PLP
.393e28	68		pla		                PLA             ; end setdp macro
.393e29	e2 20		sep #$20	                SEP #$20        ; set A short
.393e2b	a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.393e2d	c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.393e2f	f0 0b		beq $393e3c	                BEQ sd_putblock                     ; Yes: go to the SDC PUTBLOCK routine
.393e31	a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.393e33					ret_failure
.393e33	e2 20		sep #$20	                SEP #$20        ; set A short
.393e35	85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.393e37	28		plp		                PLP
.393e38	ab		plb		                PLB
.393e39	2b		pld		                PLD
.393e3a	38		sec		                SEC                                 ; Return failure
.393e3b	6b		rtl		                RTL
.393e3c	22 35 3f 39	jsl $393f35	sd_putblock     JSL SDCPUTBLOCK                     ; Call the SDC PUTBLOCK routine
.393e40					ret_success
.393e40	e2 20		sep #$20	                SEP #$20        ; set A short
.393e42	64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.393e44	28		plp		                PLP
.393e45	ab		plb		                PLB
.393e46	2b		pld		                PLD
.393e47	38		sec		                SEC                                 ; Return success
.393e48	6b		rtl		                RTL
.393e49					SDCWAITBUSY
.393e49	08		php		                PHP
.393e4a	e2 20		sep #$20	                SEP #$20        ; set A short
.393e4c	af 04 ea af	lda $afea04	wait_xact       LDA @l SDC_TRANS_STATUS_REG         ; Wait for the transaction to complete
.393e50	29 01		and #$01	                AND #SDC_TRANS_BUSY
.393e52	c9 01		cmp #$01	                CMP #SDC_TRANS_BUSY
.393e54	f0 f6		beq $393e4c	                BEQ wait_xact
.393e56	28		plp		                PLP
.393e57	6b		rtl		                RTL
.393e58					SDCRESET
.393e58	08		php		                PHP
.393e59	e2 20		sep #$20	                SEP #$20        ; set A short
.393e5b	a9 01		lda #$01	                LDA #1
.393e5d	8f 01 ea af	sta $afea01	                STA @l SDC_CONTROL_REG
.393e61	28		plp		                PLP
.393e62	6b		rtl		                RTL
.393e63	0b		phd		SDCINIT         PHD
.393e64	8b		phb		                PHB
.393e65	08		php		                PHP
.393e66	48		pha		                PHA             ; begin setdbr macro
.393e67	08		php		                PHP
.393e68	e2 20		sep #$20	                SEP #$20        ; set A short
.393e6a	a9 00		lda #$00	                LDA #0
.393e6c	48		pha		                PHA
.393e6d	ab		plb		                PLB
.393e6e	28		plp		                PLP
.393e6f	68		pla		                PLA             ; end setdbr macro
.393e70	48		pha		                PHA             ; begin setdp macro
.393e71	08		php		                PHP
.393e72	c2 20		rep #$20	                REP #$20        ; set A long
.393e74	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393e77	5b		tcd		                TCD
.393e78	28		plp		                PLP
.393e79	68		pla		                PLA             ; end setdp macro
.393e7a	e2 20		sep #$20	                SEP #$20        ; set A short
.393e7c	a9 01		lda #$01	                LDA #SDC_TRANS_INIT_SD
.393e7e	8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG           ; Set Init SD
.393e82	a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.393e84	8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.393e88	22 49 3e 39	jsl $393e49	                JSL SDCWAITBUSY                     ; Wait for initialization to complete
.393e8c	af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.393e90	d0 07		bne $393e99	                BNE ret_error                       ; Is there one? Process the error
.393e92	64 00		stz $0320	ret_success     STZ BIOS_STATUS
.393e94	28		plp		                PLP
.393e95	ab		plb		                PLB
.393e96	2b		pld		                PLD
.393e97	38		sec		                SEC
.393e98	6b		rtl		                RTL
.393e99	85 00		sta $0320	ret_error       STA BIOS_STATUS
.393e9b	28		plp		                PLP
.393e9c	ab		plb		                PLB
.393e9d	2b		pld		                PLD
.393e9e	18		clc		                CLC
.393e9f	6b		rtl		                RTL
.393ea0					SDCGETBLOCK
.393ea0	0b		phd		                PHD
.393ea1	8b		phb		                PHB
.393ea2	08		php		                PHP
.393ea3	48		pha		                PHA             ; begin setdbr macro
.393ea4	08		php		                PHP
.393ea5	e2 20		sep #$20	                SEP #$20        ; set A short
.393ea7	a9 00		lda #$00	                LDA #0
.393ea9	48		pha		                PHA
.393eaa	ab		plb		                PLB
.393eab	28		plp		                PLP
.393eac	68		pla		                PLA             ; end setdbr macro
.393ead	48		pha		                PHA             ; begin setdp macro
.393eae	08		php		                PHP
.393eaf	c2 20		rep #$20	                REP #$20        ; set A long
.393eb1	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393eb4	5b		tcd		                TCD
.393eb5	28		plp		                PLP
.393eb6	68		pla		                PLA             ; end setdp macro
.393eb7	e2 20		sep #$20	                SEP #$20        ; set A short
.393eb9	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.393ebd	09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.393ebf	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.393ec3	a9 00		lda #$00	                LDA #0
.393ec5	8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.393ec9	a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to read
.393ecb	0a		asl a		                ASL A
.393ecc	8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.393ed0	a5 03		lda $0323	                LDA BIOS_LBA+1
.393ed2	2a		rol a		                ROL A
.393ed3	8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.393ed7	a5 04		lda $0324	                LDA BIOS_LBA+2
.393ed9	2a		rol a		                ROL A
.393eda	8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.393ede	a9 02		lda #$02	                LDA #SDC_TRANS_READ_BLK             ; Set the transaction to READ
.393ee0	8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.393ee4	a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.393ee6	8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.393eea	22 49 3e 39	jsl $393e49	                JSL SDCWAITBUSY                     ; Wait for transaction to complete
.393eee	af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.393ef2	d0 30		bne $393f24	                BNE ret_error                       ; Is there one? Process the error
.393ef4	e2 20		sep #$20	                SEP #$20        ; set A short
.393ef6	af 13 ea af	lda $afea13	                LDA @l SDC_RX_FIFO_DATA_CNT_LO      ; Record the number of bytes read
.393efa	85 0a		sta $032a	                STA BIOS_FIFO_COUNT
.393efc	af 12 ea af	lda $afea12	                LDA @l SDC_RX_FIFO_DATA_CNT_HI
.393f00	85 0b		sta $032b	                STA BIOS_FIFO_COUNT+1
.393f02	c2 10		rep #$10	                REP #$10        ; set X long
.393f04	a0 00 00	ldy #$0000	                LDY #0
.393f07	af 10 ea af	lda $afea10	loop_rd         LDA @l SDC_RX_FIFO_DATA_REG         ; Get the byte...
.393f0b	97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y               ; Save it to the buffer
.393f0d	c8		iny		                INY                                 ; Advance to the next byte
.393f0e	c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.393f11	d0 f4		bne $393f07	                BNE loop_rd                         ; No: keep reading
.393f13	64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.393f15	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.393f19	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.393f1b	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.393f1f	28		plp		                PLP
.393f20	ab		plb		                PLB
.393f21	2b		pld		                PLD
.393f22	38		sec		                SEC
.393f23	6b		rtl		                RTL
.393f24	85 00		sta $0320	ret_error       STA BIOS_STATUS
.393f26	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.393f2a	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.393f2c	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.393f30	28		plp		                PLP
.393f31	ab		plb		                PLB
.393f32	2b		pld		                PLD
.393f33	18		clc		                CLC
.393f34	6b		rtl		                RTL
.393f35					SDCPUTBLOCK
.393f35	0b		phd		                PHD
.393f36	8b		phb		                PHB
.393f37	08		php		                PHP
.393f38	48		pha		                PHA             ; begin setdbr macro
.393f39	08		php		                PHP
.393f3a	e2 20		sep #$20	                SEP #$20        ; set A short
.393f3c	a9 00		lda #$00	                LDA #0
.393f3e	48		pha		                PHA
.393f3f	ab		plb		                PLB
.393f40	28		plp		                PLP
.393f41	68		pla		                PLA             ; end setdbr macro
.393f42	48		pha		                PHA             ; begin setdp macro
.393f43	08		php		                PHP
.393f44	c2 20		rep #$20	                REP #$20        ; set A long
.393f46	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393f49	5b		tcd		                TCD
.393f4a	28		plp		                PLP
.393f4b	68		pla		                PLA             ; end setdp macro
.393f4c	e2 20		sep #$20	                SEP #$20        ; set A short
.393f4e	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.393f52	09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.393f54	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.393f58	c2 10		rep #$10	                REP #$10        ; set X long
.393f5a	a0 00 00	ldy #$0000	                LDY #0
.393f5d	b7 06		lda [$0326],y	loop_wr         LDA [BIOS_BUFF_PTR],Y               ; Get the byte...
.393f5f	8f 20 ea af	sta $afea20	                STA @l SDC_TX_FIFO_DATA_REG         ; Save it to the SDC
.393f63	c8		iny		                INY                                 ; Advance to the next byte
.393f64	c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.393f67	d0 f4		bne $393f5d	                BNE loop_wr                         ; No: keep writing
.393f69	a9 00		lda #$00	                LDA #0
.393f6b	8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.393f6f	a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to write
.393f71	0a		asl a		                ASL A
.393f72	8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.393f76	a5 03		lda $0323	                LDA BIOS_LBA+1
.393f78	2a		rol a		                ROL A
.393f79	8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.393f7d	a5 04		lda $0324	                LDA BIOS_LBA+2
.393f7f	2a		rol a		                ROL A
.393f80	8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.393f84	a9 03		lda #$03	                LDA #SDC_TRANS_WRITE_BLK            ; Set the transaction to WRITE
.393f86	8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.393f8a	a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.393f8c	8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.393f90	22 49 3e 39	jsl $393e49	                JSL SDCWAITBUSY                     ; Wait for transaction to complete
.393f94	af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.393f98	d0 11		bne $393fab	                BNE ret_error                       ; Is there one? Process the error
.393f9a	64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.393f9c	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.393fa0	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.393fa2	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.393fa6	28		plp		                PLP
.393fa7	ab		plb		                PLB
.393fa8	2b		pld		                PLD
.393fa9	38		sec		                SEC
.393faa	6b		rtl		                RTL
.393fab	85 00		sta $0320	ret_error       STA BIOS_STATUS
.393fad	af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.393fb1	29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.393fb3	8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.393fb7	28		plp		                PLP
.393fb8	ab		plb		                PLB
.393fb9	2b		pld		                PLD
.393fba	18		clc		                CLC
.393fbb	6b		rtl		                RTL

;******  Return to file: src\sdos_fat.asm

.0000					DIRENTRY
>0000					SHORTNAME               .fill 11        ; $00 - The short name of the file (8 name, 3 extension)
>000b					ATTRIBUTE               .byte ?         ; $0B - The attribute bits
>000c					IGNORED1                .word ?         ; $0C - Unused (by us) bytes
>000e					CREATE_TIME             .word ?         ; $0E - Creation time
>0010					CREATE_DATE             .word ?         ; $10 - Creation date
>0012					ACCESS_DATE             .word ?         ; $12 - Last access date
>0014					CLUSTER_H               .word ?         ; $14 - High word of the first cluster #
>0016					MODIFIED_TIME           .word ?         ; $16 - Last modified time
>0018					MODIFIED_DATE           .word ?         ; $18 - Last modified date
>001a					CLUSTER_L               .word ?         ; $1A - Low word of the first cluster #
>001c					SIZE                    .dword ?        ; $1C - The size of the file (in bytes)
=$01					DOS_ATTR_RO = $01                       ; File is read-only
=$02					DOS_ATTR_HIDDEN = $02                   ; File is hidden
=$04					DOS_ATTR_SYSTEM = $04                   ; File is a system file
=$08					DOS_ATTR_VOLUME = $08                   ; Entry is the volume label
=$10					DOS_ATTR_DIR = $10                      ; Entry is a directory
=$20					DOS_ATTR_ARCH = $20                     ; Entry has changed since last backup
=$0f					DOS_ATTR_LONGNAME = $0F                 ; Entry is the long file name
.0000					FILEDESC
>0000					STATUS              .byte ?             ; The status flags of the file descriptor (open, closed, error, EOF, etc.)
>0001					DEV                 .byte ?             ; The ID of the device holding the file
>0002					PATH                .dword ?            ; Pointer to a NULL terminated path string
>0006					CLUSTER             .dword ?            ; The current cluster of the file.
>000a					FIRST_CLUSTER       .dword ?            ; The ID of the first cluster in the file
>000e					BUFFER              .dword ?            ; Pointer to a cluster-sized buffer
>0012					SIZE                .dword ?            ; The size of the file
>0016					CREATE_DATE         .word ?             ; The creation date of the file
>0018					CREATE_TIME         .word ?             ; The creation time of the file
>001a					MODIFIED_DATE       .word ?             ; The modification date of the file
>001c					MODIFIED_TIME       .word ?             ; The modification time of the file
=$01					FD_STAT_READ = $01                      ; The file is readable
=$02					FD_STAT_WRITE = $02                     ; The file is writable
=$40					FD_STAT_OPEN = $40                      ; The file is open
=$60					FD_STAT_ERROR = $60                     ; The file is in an error condition
=$80					FD_STAT_EOF = $80                       ; The file cursor is at the end of the file
=$0fffffff				FAT_LAST_CLUSTER = $0FFFFFFF            ; Code to mark the last cluster of a file
=1					VOLUMEMAX = 1                           ; The maximum number of mounted volumes we support
=32					DOS_DIR_ENTRY_SIZE = 32                 ; The size of a directory entry
=512					DOS_SECTOR_SIZE = 512                   ; The size of a sector
=$e5					DOS_DIR_ENT_UNUSED = $E5                ; Marker for an unused directory entry
=$00					PART_TYPE_FAT12 = $00                   ; "Partition" type: FAT12, used for floppy disks
=$0c					PART_TYPE_FAT32_LBA = $0C               ; Patition type: FAT32 with LBA addressing
=$29					BPB_EXTENDED_RECORD = $29               ; If SIGNATUREB of the BPB has this byte, the volume label is valid
=1					DOS_ERR_READ = 1                        ; We could not read a sector, check BIOS_STATUS for details
=2					DOS_ERR_NOTMBR = 2                      ; We could not find the MBR
=3					DOS_ERR_NOFAT32 = 3                     ; We could not find a FAT32 parition using LBA
=4					DOS_ERR_NOINIT = 4                      ; We could not INIT the block device
=5					DOS_ERR_VOLID = 5                       ; Volume ID sector could not be loaded
=6					DOS_ERR_FAT = 6                         ; Can't scan the FAT for some reason
=7					DOS_ERR_BADPATH = 7                     ; The path was badly formatted
=8					DOS_ERR_NODIR = 8                       ; Could not read the directory
=9					DOS_ERR_NOTFOUND = 9                    ; File/directory requested was not found
=10					DOS_ERR_NOCLUSTER = 10                  ; There are no more clusters
=11					DOS_ERR_FILEEXISTS = 11                 ; There is already a file of that name
=12					DOS_ERR_NOTOPEN = 12                    ; File has not been open
=13					DOS_ERR_NOTREAD = 13                    ; File is not open for reading
=14					DOS_ERR_NOTWRITE = 14                   ; File is not open for writing
=15					DOS_ERR_OPEN = 15                       ; File is already open
=16					DOS_ERR_PGXSIG = 16                     ; File does not have the PGX signature
=17					DOS_ERR_NOEXEC = 17                     ; File does is not an executable format
=446					PART0_OFF = 446                         ; Offset to the first partition in the MBR
=4					PART_TYPE_OFF = 4                       ; Offset to the partition's type
=8					PART_LBA_OFF = 8                        ; Offset to the LBA of the first sector of the partition
=13					PART_SECT_COUNT_OFF = 13                ; Offset to the sector count of the partition
=510					MBR_SIGNATURE = 510                     ; The offset to the MBR signature bytes
=11					BPB_BYTEPERSEC_OFF = 11                 ; Offset in the BPB sector to the Bytes Per Sector
=13					BPB_SECPERCLUS_OFF = 13                 ; Offset in the BPB sector to the Sectors Per Cluster
=14					BPB_RSRVCLUS_OFF = 14                   ; Offset in the BPB sector to the Number of Reserved Clusters
=16					BPB_NUMFAT_OFF = 16                     ; Offset in the BPB sector to the Number of FATs
=17					BPB_ROOT_MAX_ENTRY_OFF = 17             ; Offset in the BPB sector to the Maximum # of entries in the root directory (FAT12)
=19					BPB_TOTAL_SECTORS = 19                  ; Offset in the BPB sector to the number of sectors on the partition or disk (FAT12)
=22					BPB_SECPERFAT_OFF = 22                  ; Offset in the BPB sector to the Sectors Per FAT
=38					BPB_SIGNATUREB = 38                     ; Offset in the BPB sector to the second signature byte
=39					BPB_VOLUMEID = 39                       ; Offset in the BPB sector to the volume ID
=$2c					BPB_ROOTCLUS_OFF = $2C                  ; Offset in the BPB sector to the Root Cluster Number
=510					BPB_SIGNATURE = 510                     ; The offset to the MBR signature bytes
=$37e000				DOS_HIGH_VARIABLES      = $37E000
=$37e000				DEVICE                  = $37E000       ; 1 byte - The number of the block device
=$37e001				FILE_SYSTEM             = $37E001       ; 1 byte - The type of filesystem (FAT12, FAT32, etc.)
=$37e002				PARTITION               = $37E002       ; 1 byte - The number of the partitions on the device
=$37e003				SECTORS_PER_CLUSTER     = $37E003       ; 1 byte - The number of sectors in a cluster
=$37e004				FIRSTSECTOR             = $37E004       ; 4 bytes - The LBA of the first sector on the volume
=$37e008				SECTORCOUNT             = $37E008       ; 4 bytes - The number of sectors in the volume
=$37e00c				NUM_RSRV_SEC            = $37E00C       ; 2 bytes - The number of hidden or reserved sectors
=$37e00e				CLUSTER_SIZE            = $37E00E       ; 2 bytes - The size of a cluster in bytes
=$37e010				SEC_PER_FAT             = $37E010       ; 4 bytes - The number of sectors per FAT
=$37e014				FAT_BEGIN_LBA           = $37E014       ; 4 bytes - The LBA of the first sector of FAT #1
=$37e018				FAT2_BEGIN_LBA          = $37E018       ; 4 bytes - The LBA of the first sector of FAT #2
=$37e01c				CLUSTER_BEGIN_LBA       = $37E01C       ; 4 bytes - The LBA of the first cluster in the storage area
=$37e020				ROOT_DIR_FIRST_CLUSTER  = $37E020       ; 4 bytes - The number of the first cluster in the root directory
=$37e024				ROOT_DIR_MAX_ENTRY      = $37E024       ; 2 bytes - The maximum number of entries in the root directory (0 = no limit)
=$37e026				VOLUME_ID               = $37E026       ; 4 bytes - The ID of the volume
=$37e02a				DOS_CURR_CLUS           = $37E02A       ; 4 bytes - The current cluster (for delete)
=$37e02e				DOS_NEXT_CLUS           = $37E02E       ; 4 bytes - The next cluster in a file (for delete)
=$37e032				DOS_DIR_CLUS_ID         = $37E032       ; 4 bytes - The cluster ID of the current directory record
=$37e036				DOS_NEW_CLUSTER         = $37E036       ; 4 bytes - Space to store a newly written cluster ID
=$37e03a				DOS_SHORT_NAME          = $37E03A       ; 11 bytes - The short name for a desired file
=$37e045				FDC_MOTOR_TIMER         = $37E045       ; 2 bytes - count-down timer to automatically turn off the FDC spindle motor
=$37e100				DOS_DIR_CLUSTER         = $37E100       ; 512 bytes - A buffer for directory entries
=$37e300				DOS_DIR_CLUSTER_END     = $37E300       ; The byte just past the end of the directory cluster buffer
=$37e300				DOS_SECTOR              = $37E300       ; 512 bytes - A buffer for block device read/write
=$37e500				DOS_SECTOR_END          = $37E500       ; The byte just past the end of the cluster buffer
=$37e500				DOS_FAT_SECTORS         = $37E500       ; 1024 bytes - two sectors worth of the FAT
=$37e700				DOS_FAT_SECTORS_END     = $37E700       ; The byte just past the end of the FAT buffers
.393fbc					DOS_MOUNT
.393fbc	0b		phd		                PHD
.393fbd	08		php		                PHP
.393fbe	48		pha		                PHA             ; begin setdp macro
.393fbf	08		php		                PHP
.393fc0	c2 20		rep #$20	                REP #$20        ; set A long
.393fc2	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393fc5	5b		tcd		                TCD
.393fc6	28		plp		                PLP
.393fc7	68		pla		                PLA             ; end setdp macro
.393fc8	e2 20		sep #$20	                SEP #$20        ; set A short
.393fca	a5 01		lda $0321	                LDA BIOS_DEV            ; Check the device
.393fcc	c9 02		cmp #$02	                CMP #BIOS_DEV_SD        ; Is it the SDC?
.393fce	f0 1b		beq $393feb	                BEQ do_sdc_mount        ; Yes: attempt to mount it
.393fd0	c9 03		cmp #$03	                CMP #BIOS_DEV_FDC       ; Is it the FDC?
.393fd2	f0 0b		beq $393fdf	                BEQ do_fdc_mount        ; Yes: attempt to mount it
.393fd4	a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return a bad device error
.393fd6	85 0e		sta $032e	                STA DOS_STATUS
.393fd8	a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV
.393fda	85 00		sta $0320	                STA BIOS_STATUS
.393fdc	82 38 01	brl $394117	                BRL ret_failure
.393fdf	22 cc 55 39	jsl $3955cc	do_fdc_mount    JSL FDC_MOUNT           ; Attempt to mount the floppy disk
.393fe3	b0 03		bcs $393fe8	                BCS fdc_success
.393fe5	82 2f 01	brl $394117	                BRL ret_failure
.393fe8	82 24 01	brl $39410f	fdc_success     BRL ret_success
.393feb	22 63 3e 39	jsl $393e63	do_sdc_mount    JSL SDCINIT             ; Yes: Initialize access to the SDC
.393fef	b0 05		bcs $393ff6	                BCS get_mbr             ; Continue if success
.393ff1	a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.393ff3	82 21 01	brl $394117	                BRL ret_failure
.393ff6					get_mbr
.393ff6	c2 30		rep #$30	                REP #$30        ; set A&X long
.393ff8	64 02		stz $0322	                STZ BIOS_LBA            ; Get the MBR
.393ffa	64 04		stz $0324	                STZ BIOS_LBA+2
.393ffc	a9 00 e3	lda #$e300	                LDA #<>DOS_SECTOR       ; Into DOS_SECTOR
.393fff	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394001	a9 37 00	lda #$0037	                LDA #`DOS_SECTOR
.394004	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394006	22 44 10 38	jsl $381044	                JSL GETBLOCK            ; Try to read the MBR
.39400a	b0 07		bcs $394013	                BCS chk_signature       ; If success, check the signature bytes
.39400c	e2 20		sep #$20	                SEP #$20        ; set A short
.39400e	a9 01		lda #$01	                LDA #DOS_ERR_READ       ; Otherwise: report we couldn't read the first sector
.394010	82 04 01	brl $394117	                BRL ret_failure
.394013					chk_signature
.394013	e2 20		sep #$20	                SEP #$20        ; set A short
.394015	ad fe e4	lda $37e4fe	                LDA DOS_SECTOR+MBR_SIGNATURE
.394018	c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.39401a	d0 07		bne $394023	                BNE not_mbr             ; No: signal we could find the MBR
.39401c	ad ff e4	lda $37e4ff	                LDA DOS_SECTOR+MBR_SIGNATURE+1
.39401f	c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.394021	f0 05		beq $394028	                BEQ chk_part_type       ; Yes: we have an MBR
.394023	a9 02		lda #$02	not_mbr         LDA #DOS_ERR_NOTMBR     ; Return that we didn't find the MBR
.394025	82 ef 00	brl $394117	                BRL ret_failure
.394028	ad c2 e4	lda $37e4c2	chk_part_type   LDA DOS_SECTOR+PART0_OFF+PART_TYPE_OFF
.39402b	c9 0c		cmp #$0c	                CMP #PART_TYPE_FAT32_LBA
.39402d	f0 05		beq $394034	                BEQ get_LBA             ; Is FAT32 with LBA?
.39402f	a9 03		lda #$03	                LDA #DOS_ERR_NOFAT32    ; No: return No FAT32 found error
.394031	82 e3 00	brl $394117	                BRL ret_failure
.394034					get_LBA
.394034	c2 20		rep #$20	                REP #$20        ; set A long
.394036	ad c6 e4	lda $37e4c6	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF
.394039	8d 04 e0	sta $37e004	                STA FIRSTSECTOR
.39403c	ad c8 e4	lda $37e4c8	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF+2
.39403f	8d 06 e0	sta $37e006	                STA FIRSTSECTOR+2
.394042	ad cb e4	lda $37e4cb	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF
.394045	8d 08 e0	sta $37e008	                STA SECTORCOUNT
.394048	ad cd e4	lda $37e4cd	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF+2
.39404b	8d 0a e0	sta $37e00a	                STA SECTORCOUNT+2
.39404e	e2 20		sep #$20	                SEP #$20        ; set A short
.394050	a5 01		lda $0321	                LDA BIOS_DEV            ; Save the device number
.394052	8d 00 e0	sta $37e000	                STA DEVICE
.394055	a9 00		lda #$00	                LDA #0
.394057	8d 02 e0	sta $37e002	                STA PARTITION    ; For the moment, we only support the first partition
.39405a	c2 20		rep #$20	                REP #$20        ; set A long
.39405c	a9 00 e3	lda #$e300	                LDA #<>DOS_SECTOR
.39405f	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394061	a9 37 00	lda #$0037	                LDA #`DOS_SECTOR
.394064	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394066	ad 04 e0	lda $37e004	                LDA FIRSTSECTOR
.394069	85 02		sta $0322	                STA BIOS_LBA
.39406b	ad 06 e0	lda $37e006	                LDA FIRSTSECTOR+2
.39406e	85 04		sta $0324	                STA BIOS_LBA+2
.394070	22 44 10 38	jsl $381044	                JSL GETBLOCK            ; Attempt to load the volume ID
.394074	b0 1c		bcs $394092	                BCS get_first_sec       ; Got it? Start parsing it
.394076	e2 20		sep #$20	                SEP #$20        ; set A short
.394078	a9 05		lda #$05	                LDA #DOS_ERR_VOLID      ; Otherwise: return an error
.39407a	82 9a 00	brl $394117	                BRL ret_failure
.39407d					chk_bpb_sig
.39407d	e2 20		sep #$20	                SEP #$20        ; set A short
.39407f	ad fe e4	lda $37e4fe	                LDA DOS_SECTOR+BPB_SIGNATURE
.394082	c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.394084	d0 07		bne $39408d	                BNE not_bpb             ; No: signal we could find the volume ID
.394086	ad ff e4	lda $37e4ff	                LDA DOS_SECTOR+BPB_SIGNATURE+1
.394089	c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.39408b	f0 05		beq $394092	                BEQ get_first_sec       ; Yes: we have an volume ID
.39408d	a9 05		lda #$05	not_bpb         LDA #DOS_ERR_VOLID      ; Return that we didn't find the Volume ID (BPB)
.39408f	82 85 00	brl $394117	                BRL ret_failure
.394092					get_first_sec
.394092	c2 20		rep #$20	                REP #$20        ; set A long
.394094	ad 2c e3	lda $37e32c	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF
.394097	8d 20 e0	sta $37e020	                STA ROOT_DIR_FIRST_CLUSTER
.39409a	ad 2e e3	lda $37e32e	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF+2
.39409d	8d 22 e0	sta $37e022	                STA ROOT_DIR_FIRST_CLUSTER+2
.3940a0	ad 0e e3	lda $37e30e	                LDA DOS_SECTOR+BPB_RSRVCLUS_OFF
.3940a3	8d 0c e0	sta $37e00c	                STA NUM_RSRV_SEC
.3940a6	18		clc		                CLC                     ; fat_begin_lba := FirstSector + Number_of_Reserved_Sectors
.3940a7	ad 04 e0	lda $37e004	                LDA FIRSTSECTOR
.3940aa	6d 0c e0	adc $37e00c	                ADC NUM_RSRV_SEC
.3940ad	8d 14 e0	sta $37e014	                STA FAT_BEGIN_LBA
.3940b0	ad 06 e0	lda $37e006	                LDA FIRSTSECTOR+2
.3940b3	69 00 00	adc #$0000	                ADC #0
.3940b6	8d 16 e0	sta $37e016	                STA FAT_BEGIN_LBA+2
.3940b9	ad 16 e3	lda $37e316	                LDA DOS_SECTOR+BPB_SECPERFAT_OFF
.3940bc	8d 10 e0	sta $37e010	                STA SEC_PER_FAT
.3940bf	ad 18 e3	lda $37e318	                LDA DOS_SECTOR+BPB_SECPERFAT_OFF+2
.3940c2	8d 12 e0	sta $37e012	                STA SEC_PER_FAT+2
.3940c5	ad 10 e0	lda $37e010	                LDA SEC_PER_FAT
.3940c8	0a		asl a		                ASL A
.3940c9	8d 1c e0	sta $37e01c	                STA CLUSTER_BEGIN_LBA
.3940cc	ad 12 e0	lda $37e012	                LDA SEC_PER_FAT+2
.3940cf	2a		rol a		                ROL A
.3940d0	8d 1e e0	sta $37e01e	                STA CLUSTER_BEGIN_LBA+2
.3940d3	18		clc		                CLC
.3940d4	ad 1c e0	lda $37e01c	                LDA CLUSTER_BEGIN_LBA                    ; Sectors Per FAT * 2 + fat_begin_lba
.3940d7	6d 14 e0	adc $37e014	                ADC FAT_BEGIN_LBA
.3940da	8d 1c e0	sta $37e01c	                STA CLUSTER_BEGIN_LBA
.3940dd	ad 1e e0	lda $37e01e	                LDA CLUSTER_BEGIN_LBA+2
.3940e0	6d 16 e0	adc $37e016	                ADC FAT_BEGIN_LBA+2
.3940e3	8d 1e e0	sta $37e01e	                STA CLUSTER_BEGIN_LBA+2
.3940e6	e2 20		sep #$20	                SEP #$20        ; set A short
.3940e8	ad 0d e3	lda $37e30d	                LDA DOS_SECTOR+BPB_SECPERCLUS_OFF
.3940eb	8d 03 e0	sta $37e003	                STA SECTORS_PER_CLUSTER
.3940ee	c2 20		rep #$20	                REP #$20        ; set A long
.3940f0	29 ff 00	and #$00ff	                AND #$00FF
.3940f3	48		pha		                PHA                                     ; Save the number of sectors per cluster
.3940f4	a9 00 02	lda #$0200	                LDA #<>DOS_SECTOR_SIZE                  ; Default to one sector's worth of bytes
.3940f7	8d 0e e0	sta $37e00e	                STA CLUSTER_SIZE
.3940fa	a9 00 00	lda #$0000	                LDA #`DOS_SECTOR_SIZE
.3940fd	8d 10 e0	sta $37e010	                STA CLUSTER_SIZE+2
.394100	68		pla		                PLA                                     ; Restore the number of sectors per cluster
.394101	c9 01 00	cmp #$0001	clus_size_loop  CMP #1                                  ; If there's only one cluster, return success
.394104	f0 09		beq $39410f	                BEQ ret_success
.394106	0e 0e e0	asl $37e00e	                ASL CLUSTER_SIZE                        ; Otherwise, multiply the number of bytes by 2
.394109	2e 10 e0	rol $37e010	                ROL CLUSTER_SIZE+2
.39410c	4a		lsr a		                LSR A                                   ; And divide the number of sectors by 2
.39410d	80 f2		bra $394101	                BRA clus_size_loop
.39410f					ret_success
.39410f	e2 20		sep #$20	                SEP #$20        ; set A short
.394111	64 0e		stz $032e	                STZ DOS_STATUS          ; Set status code to 0
.394113	28		plp		                PLP
.394114	2b		pld		                PLD
.394115	38		sec		                SEC
.394116	6b		rtl		                RTL
.394117					ret_failure
.394117	e2 20		sep #$20	                SEP #$20        ; set A short
.394119	85 0e		sta $032e	                STA DOS_STATUS          ; Save the status code
.39411b	28		plp		                PLP
.39411c	2b		pld		                PLD
.39411d	18		clc		                CLC
.39411e	6b		rtl		                RTL
.39411f					DOS_CALC_LBA
.39411f	08		php		                PHP
.394120	c2 20		rep #$20	                REP #$20        ; set A long
.394122	38		sec		                SEC
.394123	a5 10		lda $0330	                LDA DOS_CLUS_ID                     ; cluster - 2
.394125	e9 02 00	sbc #$0002	                SBC #2
.394128	85 28		sta $0348	                STA DOS_TEMP
.39412a	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.39412c	e9 00 00	sbc #$0000	                SBC #0
.39412f	85 2a		sta $034a	                STA DOS_TEMP+2
.394131	e2 10		sep #$10	                SEP #$10        ; set X short
.394133	ae 03 e0	ldx $37e003	                LDX SECTORS_PER_CLUSTER
.394136	e0 01		cpx #$01	mult_loop       CPX #1
.394138	f0 07		beq $394141	                BEQ add_offset
.39413a	06 28		asl $0348	                ASL DOS_TEMP
.39413c	26 28		rol $0348	                ROL DOS_TEMP
.39413e	ca		dex		                DEX
.39413f	80 f5		bra $394136	                BRA mult_loop
.394141	18		clc		add_offset      CLC
.394142	a5 28		lda $0348	                LDA DOS_TEMP                        ; cluster_being_lba + (cluster - 2) * SECTORS_PER_CLUSTER
.394144	6d 1c e0	adc $37e01c	                ADC CLUSTER_BEGIN_LBA
.394147	85 02		sta $0322	                STA BIOS_LBA
.394149	a5 2a		lda $034a	                LDA DOS_TEMP+2
.39414b	6d 1e e0	adc $37e01e	                ADC CLUSTER_BEGIN_LBA+2
.39414e	85 04		sta $0324	                STA BIOS_LBA+2
.394150	28		plp		                PLP
.394151	6b		rtl		                RTL
.394152					DOS_GETCLUSTER
.394152	08		php		                PHP
.394153	c2 20		rep #$20	                REP #$20        ; set A long
.394155	a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.394157	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394159	a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.39415b	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.39415d	22 1f 41 39	jsl $39411f	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.394161	22 44 10 38	jsl $381044	                JSL GETBLOCK                        ; Get the first block of the cluster
.394165	90 07		bcc $39416e	                BCC ret_failure
.394167					ret_success
.394167	e2 20		sep #$20	                SEP #$20        ; set A short
.394169	64 0e		stz $032e	                STZ DOS_STATUS
.39416b	28		plp		                PLP
.39416c	38		sec		                SEC
.39416d	6b		rtl		                RTL
.39416e					ret_failure
.39416e	e2 20		sep #$20	                SEP #$20        ; set A short
.394170	85 0e		sta $032e	                STA DOS_STATUS
.394172	28		plp		                PLP
.394173	18		clc		                CLC
.394174	6b		rtl		                RTL
.394175					DOS_PUTCLUSTER
.394175	08		php		                PHP
.394176	c2 20		rep #$20	                REP #$20        ; set A long
.394178	a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.39417a	85 06		sta $0326	                STA BIOS_BUFF_PTR
.39417c	a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.39417e	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394180	22 1f 41 39	jsl $39411f	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.394184	22 24 10 38	jsl $381024	                JSL PUTBLOCK                        ; PUT the first block of the cluster
.394188	90 07		bcc $394191	                BCC ret_failure
.39418a					ret_success
.39418a	e2 20		sep #$20	                SEP #$20        ; set A short
.39418c	64 0e		stz $032e	                STZ DOS_STATUS
.39418e	28		plp		                PLP
.39418f	38		sec		                SEC
.394190	6b		rtl		                RTL
.394191					ret_failure
.394191	e2 20		sep #$20	                SEP #$20        ; set A short
.394193	85 0e		sta $032e	                STA DOS_STATUS
.394195	28		plp		                PLP
.394196	18		clc		                CLC
.394197	6b		rtl		                RTL
.394198					DOS_DIRFIRST
.394198	08		php		                PHP
.394199	c2 20		rep #$20	                REP #$20        ; set A long
.39419b	a9 00 e1	lda #$e100	                LDA #<>DOS_DIR_CLUSTER
.39419e	85 18		sta $0338	                STA DOS_DIR_PTR
.3941a0	a9 37 00	lda #$0037	                LDA #`DOS_DIR_CLUSTER
.3941a3	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.3941a5	28		plp		                PLP
.3941a6	6b		rtl		                RTL
.3941a7					DOS_DIRNEXT
.3941a7	08		php		                PHP
.3941a8	c2 20		rep #$20	                REP #$20        ; set A long
.3941aa	18		clc		                CLC                         ; Advance the directory entry pointer to the next entry
.3941ab	a5 18		lda $0338	                LDA DOS_DIR_PTR
.3941ad	69 20 00	adc #$0020	                ADC #DOS_DIR_ENTRY_SIZE
.3941b0	85 18		sta $0338	                STA DOS_DIR_PTR
.3941b2	a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.3941b4	69 00 00	adc #$0000	                ADC #0
.3941b7	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.3941b9	38		sec		                SEC                         ; Check to see if we've reached the end of the sector buffer
.3941ba	a9 00 e3	lda #$e300	                LDA #<>DOS_DIR_CLUSTER_END
.3941bd	e5 18		sbc $0338	                SBC DOS_DIR_PTR
.3941bf	a9 37 00	lda #$0037	                LDA #`DOS_DIR_CLUSTER_END
.3941c2	e5 1a		sbc $033a	                SBC DOS_DIR_PTR+2
.3941c4	30 03		bmi $3941c9	                BMI ret_failure             ; Yes: return failure
.3941c6	28		plp		ret_success     PLP
.3941c7	38		sec		                SEC
.3941c8	6b		rtl		                RTL
.3941c9	28		plp		ret_failure     PLP
.3941ca	18		clc		                CLC
.3941cb	6b		rtl		                RTL
.3941cc					DOS_PARSE_PATH
.3941cc	08		php		                PHP
.3941cd	c2 10		rep #$10	                REP #$10        ; set X long
.3941cf	e2 20		sep #$20	                SEP #$20        ; set A short
.3941d1	a2 00 00	ldx #$0000	                LDX #0
.3941d4	b5 e0		lda $0400,x	upcase_loop     LDA DOS_PATH_BUFF,X     ; Get the character
.3941d6	f0 1b		beq $3941f3	                BEQ clr_name            ; If it's NULL, the path is upper case, clear the name
.3941d8	c9 20		cmp #$20	                CMP #' '                ; Is a control character?
.3941da	b0 05		bcs $3941e1	                BGE check_case          ; No: check the case
.3941dc	a9 07		lda #$07	                LDA #DOS_ERR_BADPATH    ; Yes: return a bad path error
.3941de	82 51 00	brl $394232	                BRL ret_failure
.3941e1	c9 61		cmp #$61	check_case      CMP #'a'                ; Is the character lower case?
.3941e3	90 08		bcc $3941ed	                BLT next_char
.3941e5	c9 7b		cmp #$7b	                CMP #'z'+1
.3941e7	b0 04		bcs $3941ed	                BGE next_char
.3941e9	29 5f		and #$5f	                AND #%01011111          ; Yes: Convert to uppercase
.3941eb	95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.3941ed	e8		inx		next_char       INX                     ; Move to the next character
.3941ee	e0 00 01	cpx #$0100	                CPX #$100
.3941f1	d0 e1		bne $3941d4	                BNE upcase_loop
.3941f3	a0 00 00	ldy #$0000	clr_name        LDY #0                  ; Set the short name to blanks
.3941f6	a9 20		lda #$20	                LDA #' '
.3941f8	99 3a e0	sta $37e03a,y	clr_loop        STA DOS_SHORT_NAME,Y
.3941fb	c8		iny		                INY
.3941fc	c0 0b 00	cpy #$000b	                CPY #11
.3941ff	d0 f7		bne $3941f8	                BNE clr_loop
.394201	a2 00 00	ldx #$0000	                LDX #0
.394204	a0 00 00	ldy #$0000	                LDY #0
.394207	b5 e0		lda $0400,x	cpy_name_loop   LDA DOS_PATH_BUFF,X     ; Get the character of the name
.394209	f0 20		beq $39422b	                BEQ ret_success         ; If NULL: we've finished parsing the path
.39420b	c9 2e		cmp #$2e	                CMP #'.'                ; If it's a dot, we've finished the name part
.39420d	f0 0a		beq $394219	                BEQ cpy_ext             ; And move to the extension
.39420f	99 3a e0	sta $37e03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, store it to the name portion
.394212	e8		inx		                INX
.394213	c8		iny		                INY                     ; Move to the next character
.394214	c0 08 00	cpy #$0008	                CPY #8                  ; Have we processed 8?
.394217	d0 ee		bne $394207	                BNE cpy_name_loop       ; No: process this one
.394219	e8		inx		cpy_ext         INX                     ; Skip the dot
.39421a	a0 08 00	ldy #$0008	                LDY #8
.39421d	b5 e0		lda $0400,x	cpy_ext_loop    LDA DOS_PATH_BUFF,X     ; Get the character of the extension
.39421f	f0 0a		beq $39422b	                BEQ ret_success         ; If it's NULL, we've finished
.394221	99 3a e0	sta $37e03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, copy it to the short name
.394224	e8		inx		                INX
.394225	c8		iny		                INY                     ; Move to the next character
.394226	c0 0b 00	cpy #$000b	                CPY #11                 ; Have we processed the three ext characters?
.394229	d0 f2		bne $39421d	                BNE cpy_ext_loop        ; No: process this one
.39422b					ret_success
.39422b	e2 20		sep #$20	                SEP #$20        ; set A short
.39422d	64 0e		stz $032e	                STZ DOS_STATUS
.39422f	28		plp		                PLP
.394230	38		sec		                SEC
.394231	6b		rtl		                RTL
.394232					ret_failure
.394232	e2 20		sep #$20	                SEP #$20        ; set A short
.394234	85 0e		sta $032e	                STA DOS_STATUS
.394236	28		plp		                PLP
.394237	18		clc		                CLC
.394238	6b		rtl		                RTL
.394239					DOS_FINDFILE
.394239	08		php		                PHP
.39423a	c2 30		rep #$30	                REP #$30        ; set A&X long
.39423c	22 cc 41 39	jsl $3941cc	                JSL DOS_PARSE_PATH              ; Break out the path into its components
.394240	b0 03		bcs $394245	                BCS mount                       ; If success: try to open the directory
.394242	28		plp		pass_failure    PLP                             ; If failure, just pass the failure back up
.394243	18		clc		                CLC
.394244	6b		rtl		                RTL
.394245					mount
.394245	e2 20		sep #$20	                SEP #$20        ; set A short
.394247	a9 03		lda #$03	                LDA #BIOS_DEV_FDC               ; Mount the drive... defaults to SDC
.394249	85 01		sta $0321	                STA BIOS_DEV                    ; TODO: set from DOS_PARSE_PATH
.39424b	22 bc 3f 39	jsl $393fbc	                JSL DOS_MOUNT
.39424f					get_directory
.39424f	c2 20		rep #$20	                REP #$20        ; set A long
.394251	a9 00 e1	lda #$e100	                LDA #<>DOS_DIR_CLUSTER          ; Load the directory cluster into the directory buffer
.394254	85 1c		sta $033c	                STA DOS_BUFF_PTR
.394256	a9 37 00	lda #$0037	                LDA #`DOS_DIR_CLUSTER
.394259	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.39425b	ad 20 e0	lda $37e020	                LDA ROOT_DIR_FIRST_CLUSTER      ; Queue up loading the first sector of the root directory
.39425e	85 10		sta $0330	                STA DOS_CLUS_ID
.394260	ad 22 e0	lda $37e022	                LDA ROOT_DIR_FIRST_CLUSTER+2
.394263	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394265	22 52 41 39	jsl $394152	                JSL DOS_GETCLUSTER              ; Get the directory
.394269	b0 07		bcs $394272	                BCS scan_entries                ; If success: start scanning the directory entries
.39426b	e2 20		sep #$20	                SEP #$20        ; set A short
.39426d	a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Otherwise: return a no directory error
.39426f	82 5f 00	brl $3942d1	                BRL ret_failure
.394272	22 98 41 39	jsl $394198	scan_entries    JSL DOS_DIRFIRST                ; Move the DIR pointer to the beginning of the sector
.394276					scan_loop
.394276	e2 20		sep #$20	                SEP #$20        ; set A short
.394278	a0 00 00	ldy #$0000	                LDY #0
.39427b	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y             ; Check the directory entry
.39427d	d0 05		bne $394284	                BNE chk_unused                  ; If there's an entry, check to see if it's unused
.39427f	a9 09		lda #$09	                LDA #DOS_ERR_NOTFOUND           ; If end-of-directory, we couldn't find a match
.394281	82 4d 00	brl $3942d1	                BRL ret_failure
.394284	c9 e5		cmp #$e5	chk_unused      CMP #DOS_DIR_ENT_UNUSED         ; If it's unused...
.394286	f0 25		beq $3942ad	                BEQ next_entry                  ; Go to the next entry
.394288	a0 0b 00	ldy #$000b	                LDY #DIRENTRY.ATTRIBUTE         ; Check the entry's attributes
.39428b	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.39428d	89 08		bit #$08	                BIT #DOS_ATTR_VOLUME            ; Is it a volume name?
.39428f	d0 1c		bne $3942ad	                BNE next_entry                  ; Yes: skip it!
.394291	29 0f		and #$0f	                AND #DOS_ATTR_LONGNAME
.394293	c9 0f		cmp #$0f	                CMP #DOS_ATTR_LONGNAME          ; Is it a long name field?
.394295	f0 16		beq $3942ad	                BEQ next_entry                  ; Yes: skip it!
.394297	a2 00 00	ldx #$0000	                LDX #0
.39429a	a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME
.39429d	b7 18		lda [$0338],y	scan_cmp_loop   LDA [DOS_DIR_PTR],Y             ; Get the X'th character of the entry
.39429f	dd 3a e0	cmp $37e03a,x	                CMP DOS_SHORT_NAME,X            ; And compare to the X'th character of the name we want
.3942a2	d0 09		bne $3942ad	                BNE next_entry                  ; If not equal: try the next entry
.3942a4	c8		iny		                INY                             ; Advance to the next character
.3942a5	e8		inx		                INX
.3942a6	e0 0b 00	cpx #$000b	                CPX #11                         ; Did we reach the end of the names?
.3942a9	f0 2d		beq $3942d8	                BEQ match                       ; Yes: we have a match!
.3942ab	80 f0		bra $39429d	                BRA scan_cmp_loop               ; No: keep checking
.3942ad	22 a7 41 39	jsl $3941a7	next_entry      JSL DOS_DIRNEXT                 ; Try to get the next directory entry
.3942b1	82 c2 ff	brl $394276	                BRL scan_loop                   ; If found: keep scanning
.3942b4	c2 20		rep #$20	                REP #$20        ; set A long
.3942b6	22 6d 43 39	jsl $39436d	                JSL NEXTCLUSTER                 ; Move to the next cluster of the directory
.3942ba	a9 00 e1	lda #$e100	set_buff_ptr    LDA #<>DOS_DIR_CLUSTER          ; Load the directory cluster into the directory buffer
.3942bd	85 1c		sta $033c	                STA DOS_BUFF_PTR
.3942bf	a9 37 00	lda #$0037	                LDA #`DOS_DIR_CLUSTER
.3942c2	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3942c4	e2 20		sep #$20	                SEP #$20        ; set A short
.3942c6	22 52 41 39	jsl $394152	                JSL DOS_GETCLUSTER              ; Attempt to load the directory cluster
.3942ca	90 03		bcc $3942cf	                BCC bad_dir                     ; If failed: return an error
.3942cc	82 a3 ff	brl $394272	                BRL scan_entries                ; If loaded: scan it
.3942cf	a9 08		lda #$08	bad_dir         LDA #DOS_ERR_NODIR              ; Otherwise: fail with a NODIR error (maybe something else is better)
.3942d1					ret_failure
.3942d1	e2 20		sep #$20	                SEP #$20        ; set A short
.3942d3	85 0e		sta $032e	                STA DOS_STATUS
.3942d5	28		plp		                PLP
.3942d6	18		clc		                CLC
.3942d7	6b		rtl		                RTL
.3942d8					match
.3942d8	c2 20		rep #$20	                REP #$20        ; set A long
.3942da	a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Save the ID of the directory cluster for later use
.3942dc	8d 32 e0	sta $37e032	                STA DOS_DIR_CLUS_ID
.3942df	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3942e1	8d 34 e0	sta $37e034	                STA DOS_DIR_CLUS_ID+2
.3942e4	a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L         ; Copy the cluster number from the directory entry
.3942e7	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3942e9	85 10		sta $0330	                STA DOS_CLUS_ID                 ; To DOS_CLUS_ID
.3942eb	a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.3942ee	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3942f0	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3942f2					ret_success
.3942f2	e2 20		sep #$20	                SEP #$20        ; set A short
.3942f4	64 0e		stz $032e	                STZ DOS_STATUS
.3942f6	28		plp		                PLP
.3942f7	38		sec		                SEC
.3942f8	6b		rtl		                RTL
.3942f9					DOS_READFILE
.3942f9	08		php		                PHP
.3942fa	c2 30		rep #$30	                REP #$30        ; set A&X long
.3942fc	a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.3942fe	48		pha		                PHA
.3942ff	a5 1c		lda $033c	                LDA DOS_BUFF_PTR
.394301	48		pha		                PHA
.394302	22 39 42 39	jsl $394239	                JSL DOS_FINDFILE                    ; Attempt to find the file's directory entry
.394306	68		pla		                PLA
.394307	85 1c		sta $033c	                STA DOS_BUFF_PTR
.394309	68		pla		                PLA
.39430a	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.39430c	90 0d		bcc $39431b	                BCC pass_failure                    ; If found: try to load the cluster
.39430e	22 52 41 39	jsl $394152	load_cluster    JSL DOS_GETCLUSTER                  ; Get the first block of the cluster
.394312	90 07		bcc $39431b	                BCC pass_failure                    ; If there's an error... pass it up the chain
.394314					ret_success
.394314	e2 20		sep #$20	                SEP #$20        ; set A short
.394316	64 0e		stz $032e	                STZ DOS_STATUS
.394318	28		plp		                PLP
.394319	38		sec		                SEC
.39431a	6b		rtl		                RTL
.39431b	28		plp		pass_failure    PLP                                 ; Otherwise: pass any error up the chain
.39431c	18		clc		                CLC
.39431d	6b		rtl		                RTL
.39431e					FATFORCLUSTER32
.39431e	c2 30		rep #$30	                REP #$30        ; set A&X long
.394320	a5 10		lda $0330	                LDA DOS_CLUS_ID
.394322	85 24		sta $0344	                STA DOS_FAT_LBA
.394324	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394326	85 26		sta $0346	                STA DOS_FAT_LBA+2
.394328	a2 07 00	ldx #$0007	                LDX #7
.39432b	46 26		lsr $0346	div_loop        LSR DOS_FAT_LBA+2
.39432d	66 24		ror $0344	                ROR DOS_FAT_LBA
.39432f	ca		dex		                DEX
.394330	d0 f9		bne $39432b	                BNE div_loop
.394332	18		clc		                CLC
.394333	a5 24		lda $0344	                LDA DOS_FAT_LBA
.394335	6d 14 e0	adc $37e014	                ADC FAT_BEGIN_LBA
.394338	85 24		sta $0344	                STA DOS_FAT_LBA
.39433a	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.39433c	6d 16 e0	adc $37e016	                ADC FAT_BEGIN_LBA+2
.39433f	85 26		sta $0346	                STA DOS_FAT_LBA+2
.394341	a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; We want to load the FAT sector
.394343	85 02		sta $0322	                STA BIOS_LBA
.394345	a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394347	85 04		sta $0324	                STA BIOS_LBA+2
.394349	a9 00 e3	lda #$e300	                LDA #<>DOS_SECTOR               ; We want to load the FAT sector in DOS_SECTOR
.39434c	85 06		sta $0326	                STA BIOS_BUFF_PTR
.39434e	a9 37 00	lda #$0037	                LDA #`DOS_SECTOR
.394351	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394353	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Load the FAT entry
.394357	b0 06		bcs $39435f	                BCS find_entry
.394359	e2 20		sep #$20	                SEP #$20        ; set A short
.39435b	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.39435d	80 0c		bra $39436b	                BRA ret_failure
.39435f					find_entry
.39435f	c2 20		rep #$20	                REP #$20        ; set A long
.394361	a5 10		lda $0330	                LDA DOS_CLUS_ID
.394363	0a		asl a		                ASL A
.394364	0a		asl a		                ASL A                           ; * 4
.394365	29 7f 00	and #$007f	                AND #$7F                        ; DOS_CLUS_ID MOD 128
.394368	aa		tax		                TAX                             ; X should be the offset within the sector
.394369	38		sec		ret_success     SEC                             ; return success
.39436a	6b		rtl		                RTL
.39436b	18		clc		ret_failure     CLC                             ; Return failure
.39436c	6b		rtl		                RTL
.39436d					NEXTCLUSTER
.39436d	08		php		                PHP
.39436e	e2 20		sep #$20	                SEP #$20        ; set A short
.394370	af 01 e0 37	lda $37e001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394374	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394376	d0 08		bne $394380	                BNE fat32                       ; No: assume it's FAT32
.394378	22 7e 57 39	jsl $39577e	fat12           JSL NEXTCLUSTER12               ; Lookup the next cluster from FAT12
.39437c	90 0d		bcc $39438b	                BCC pass_failure                ; If there was an error, pass it up the chain
.39437e	80 06		bra $394386	                BRA ret_success
.394380	22 8e 43 39	jsl $39438e	fat32           JSL NEXTCLUSTER32               ; Lookup the next cluster from FAT32
.394384	90 05		bcc $39438b	                BCC pass_failure                ; If there was an error, pass it up the chain
.394386	64 0e		stz $032e	ret_success     STZ DOS_STATUS
.394388	28		plp		                PLP
.394389	38		sec		                SEC
.39438a	6b		rtl		                RTL
.39438b	28		plp		pass_failure    PLP
.39438c	18		clc		                CLC
.39438d	6b		rtl		                RTL
.39438e					NEXTCLUSTER32
.39438e	08		php		                PHP
.39438f	c2 30		rep #$30	                REP #$30        ; set A&X long
.394391	22 1e 43 39	jsl $39431e	                JSL FATFORCLUSTER32             ; Get the FAT entry for this cluster
.394395	90 2c		bcc $3943c3	                BCC ret_failure                 ; If it did not work, return the error
.394397	bd 00 e3	lda $37e300,x	                LDA DOS_SECTOR,X                ; Get the entry and copy it to DOS_TEMP
.39439a	85 28		sta $0348	                STA DOS_TEMP
.39439c	bd 02 e3	lda $37e302,x	                LDA DOS_SECTOR+2,X
.39439f	85 2a		sta $034a	                STA DOS_TEMP+2
.3943a1	a5 28		lda $0348	                LDA DOS_TEMP                    ; Is DOS_TEMP = $FFFFFFFF?
.3943a3	c9 ff ff	cmp #$ffff	                CMP #$FFFF
.3943a6	d0 0c		bne $3943b4	                BNE found_next
.3943a8	a5 2a		lda $034a	                LDA DOS_TEMP+2
.3943aa	c9 ff 0f	cmp #$0fff	                CMP #$0FFF
.3943ad	d0 05		bne $3943b4	                BNE found_next                  ; No: return this cluster as the next
.3943af	a9 0a 00	lda #$000a	                LDA #DOS_ERR_NOCLUSTER          ; Yes: return that there are no more clusters
.3943b2	80 0f		bra $3943c3	                BRA ret_failure
.3943b4	a5 28		lda $0348	found_next      LDA DOS_TEMP                    ; No: return DOS_TEMP as the new DOS_CLUS_ID
.3943b6	85 10		sta $0330	                STA DOS_CLUS_ID
.3943b8	a5 2a		lda $034a	                LDA DOS_TEMP+2
.3943ba	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3943bc					ret_success
.3943bc	e2 20		sep #$20	                SEP #$20        ; set A short
.3943be	64 0e		stz $032e	                STZ DOS_STATUS                  ; Record success
.3943c0	28		plp		                PLP
.3943c1	38		sec		                SEC
.3943c2	6b		rtl		                RTL
.3943c3	85 0e		sta $032e	ret_failure     STA DOS_STATUS                  ; Record the error condition
.3943c5	28		plp		                PLP
.3943c6	18		clc		                CLC
.3943c7	6b		rtl		                RTL
.3943c8					DOS_READNEXT
.3943c8	08		php		                PHP
.3943c9	c2 30		rep #$30	                REP #$30        ; set A&X long
.3943cb	22 6d 43 39	jsl $39436d	                JSL NEXTCLUSTER                 ; Attempt to find the next cluster in the FAT
.3943cf	90 09		bcc $3943da	                BCC pass_failure                ; If nothing found: pass the failure up the chain
.3943d1	22 52 41 39	jsl $394152	                JSL DOS_GETCLUSTER              ; Otherwise: attempt to read the cluster
.3943d5	90 03		bcc $3943da	                BCC pass_failure                ; If nothing read: pass the failure up the chain
.3943d7	28		plp		ret_success     PLP
.3943d8	38		sec		                SEC
.3943d9	6b		rtl		                RTL
.3943da	28		plp		pass_failure    PLP
.3943db	18		clc		                CLC
.3943dc	6b		rtl		                RTL
.3943dd					DOS_FREECLUS32
.3943dd	08		php		                PHP
.3943de	c2 30		rep #$30	                REP #$30        ; set A&X long
.3943e0	a9 00 e3	lda #$e300	                LDA #<>DOS_SECTOR               ; Set the location to store the sector
.3943e3	85 06		sta $0326	                STA BIOS_BUFF_PTR
.3943e5	a9 37 00	lda #$0037	                LDA #`DOS_SECTOR
.3943e8	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3943ea	ad 14 e0	lda $37e014	                LDA FAT_BEGIN_LBA               ; Set the LBA to that of the first FAT sector
.3943ed	85 02		sta $0322	                STA BIOS_LBA
.3943ef	ad 16 e0	lda $37e016	                LDA FAT_BEGIN_LBA+2
.3943f2	85 04		sta $0324	                STA BIOS_LBA+2
.3943f4	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Load the sector into memory
.3943f8	b0 07		bcs $394401	                BCS initial_entry               ; If OK: set the initial entry to check
.3943fa	e2 20		sep #$20	                SEP #$20        ; set A short
.3943fc	a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Return a NOFAT error
.3943fe	82 5a 00	brl $39445b	                BRL ret_failure
.394401					initial_entry
.394401	c2 20		rep #$20	                REP #$20        ; set A long
.394403	a9 02 00	lda #$0002	                LDA #2                          ; Set DOS_CLUS_ID to 2
.394406	85 10		sta $0330	                STA DOS_CLUS_ID
.394408	a9 00 00	lda #$0000	                LDA #0
.39440b	85 12		sta $0332	                STA DOS_CLUS_ID+2
.39440d	a2 08 00	ldx #$0008	                LDX #8                          ; Set the offset to DOS_CLUS_ID * 4
.394410	bd 00 e3	lda $37e300,x	chk_entry       LDA DOS_SECTOR,X                ; Is the cluster entry == $00000000?
.394413	d0 05		bne $39441a	                BNE next_entry                  ; No: move to the next entry
.394415	bd 02 e3	lda $37e302,x	                LDA DOS_SECTOR+2,X
.394418	f0 29		beq $394443	                BEQ found_free                  ; Yes: go to allocate and return it
.39441a	e6 10		inc $0330	next_entry      INC DOS_CLUS_ID                 ; Move to the next cluster
.39441c	d0 02		bne $394420	                BNE inc_ptr
.39441e	e6 12		inc $0332	                INC DOS_CLUS_ID+2
.394420	e8		inx		inc_ptr         INX                             ; Update the index to the entry
.394421	e8		inx		                INX
.394422	e8		inx		                INX
.394423	e8		inx		                INX
.394424	e0 00 02	cpx #$0200	                CPX #DOS_SECTOR_SIZE            ; Are we outside the sector?
.394427	90 e7		bcc $394410	                BLT chk_entry                   ; No: check this entry
.394429	18		clc		                CLC                             ; Point to the next sector in the FAT
.39442a	a5 02		lda $0322	                LDA BIOS_LBA
.39442c	69 00 02	adc #$0200	                ADC #DOS_SECTOR_SIZE
.39442f	85 02		sta $0322	                STA BIOS_LBA
.394431	a5 04		lda $0324	                LDA BIOS_LBA+2
.394433	69 00 00	adc #$0000	                ADC #0
.394436	85 04		sta $0324	                STA BIOS_LBA+2
.394438	22 44 10 38	jsl $381044	                JSL GETBLOCK                    ; Attempt to read the block
.39443c	b0 00		bcs $39443e	                BCS set_ptr                     ; If OK: set the pointer and check it
.39443e	a2 00 00	ldx #$0000	set_ptr         LDX #0                          ; Set index pointer to the first entry
.394441	80 cd		bra $394410	                BRA chk_entry                   ; Check this entry
.394443					found_free
.394443	c2 20		rep #$20	                REP #$20        ; set A long
.394445	a9 ff ff	lda #$ffff	                LDA #<>FAT_LAST_CLUSTER         ; Set the entry to $0FFFFFFF to make it the last entry in its chain
.394448	9d 00 e3	sta $37e300,x	                STA DOS_SECTOR,X
.39444b	a9 ff 0f	lda #$0fff	                LDA #(FAT_LAST_CLUSTER >> 16)
.39444e	9d 02 e3	sta $37e302,x	                STA DOS_SECTOR+2,X
.394451	22 24 10 38	jsl $381024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.394455	b0 0b		bcs $394462	                BCS ret_success                 ; If OK: return success
.394457	e2 20		sep #$20	                SEP #$20        ; set A short
.394459	a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Otherwise: return NOFAT error
.39445b					ret_failure
.39445b	e2 20		sep #$20	                SEP #$20        ; set A short
.39445d	85 0e		sta $032e	                STA DOS_STATUS
.39445f	28		plp		                PLP
.394460	18		clc		                CLC
.394461	6b		rtl		                RTL
.394462					ret_success
.394462	e2 20		sep #$20	                SEP #$20        ; set A short
.394464	64 0e		stz $032e	                STZ DOS_STATUS
.394466	28		plp		                PLP
.394467	38		sec		                SEC
.394468	6b		rtl		                RTL
.394469					DELCLUSTER32
.394469	08		php		                PHP
.39446a	c2 30		rep #$30	                REP #$30        ; set A&X long
.39446c	22 1e 43 39	jsl $39431e	                JSL FATFORCLUSTER32
.394470	a9 00 00	lda #$0000	                LDA #0
.394473	9d 00 e3	sta $37e300,x	                STA DOS_SECTOR,X                ; Set the cluster entry to 0
.394476	9d 02 e3	sta $37e302,x	                STA DOS_SECTOR+2,X
.394479	22 24 10 38	jsl $381024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.39447d	b0 09		bcs $394488	                BCS ret_success
.39447f					ret_failure
.39447f	e2 20		sep #$20	                SEP #$20        ; set A short
.394481	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394483	85 0e		sta $032e	                STA DOS_STATUS
.394485	28		plp		                PLP
.394486	18		clc		                CLC
.394487	6b		rtl		                RTL
.394488					ret_success
.394488	e2 20		sep #$20	                SEP #$20        ; set A short
.39448a	64 0e		stz $032e	                STZ DOS_STATUS
.39448c	28		plp		                PLP
.39448d	38		sec		                SEC
.39448e	6b		rtl		                RTL
.39448f					DOS_APPENDCLUS
.39448f	08		php		                PHP
.394490	c2 30		rep #$30	                REP #$30        ; set A&X long
.394492	a5 12		lda $0332	                LDA DOS_CLUS_ID+2               ; Save the cluster number for later
.394494	48		pha		                PHA
.394495	a5 10		lda $0330	                LDA DOS_CLUS_ID
.394497	48		pha		                PHA
.394498	22 dd 43 39	jsl $3943dd	                JSL DOS_FREECLUS32              ; Find a free cluster on the block device
.39449c	b0 08		bcs $3944a6	                BCS save_cluster                ; If we got a cluster, write the data to it
.39449e	68		pla		fail_cleanup    PLA                             ; Restore the cluster of the file
.39449f	85 10		sta $0330	                STA DOS_CLUS_ID
.3944a1	68		pla		                PLA
.3944a2	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3944a4	80 34		bra $3944da	                BRA pass_failure                ; Pass the failure back up the chain
.3944a6	a5 10		lda $0330	save_cluster    LDA DOS_CLUS_ID
.3944a8	8d 36 e0	sta $37e036	                STA DOS_NEW_CLUSTER
.3944ab	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3944ad	8d 38 e0	sta $37e038	                STA DOS_NEW_CLUSTER+2
.3944b0	22 75 41 39	jsl $394175	                JSL DOS_PUTCLUSTER              ; Write the data to the free cluster
.3944b4	90 e8		bcc $39449e	                BCC fail_cleanup                ; If failure: clean up stack and pass the failure up
.3944b6	68		pla		                PLA                             ; Restore the cluster of the file
.3944b7	85 10		sta $0330	                STA DOS_CLUS_ID
.3944b9	68		pla		                PLA
.3944ba	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3944bc	22 8e 43 39	jsl $39438e	walk_loop       JSL NEXTCLUSTER32               ; Try to get the next cluster in the chain
.3944c0	b0 fa		bcs $3944bc	                BCS walk_loop                   ; If found a cluster, keep walking the chain
.3944c2	ad 36 e0	lda $37e036	                LDA DOS_NEW_CLUSTER             ; Write the ID of the new cluster to the end of the chain
.3944c5	9d 00 e3	sta $37e300,x	                STA DOS_SECTOR,X
.3944c8	ad 38 e0	lda $37e038	                LDA DOS_NEW_CLUSTER+2
.3944cb	9d 02 e3	sta $37e302,x	                STA DOS_SECTOR+2,X
.3944ce	22 24 10 38	jsl $381024	                JSL PUTBLOCK                    ; Write the FAT sector back (assumes BIOS_LBA and BIOS_BUFF_PTR haven't changed)
.3944d2	b0 09		bcs $3944dd	                BCS ret_success
.3944d4	e2 20		sep #$20	                SEP #$20        ; set A short
.3944d6	a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Problem working with the FAT
.3944d8	85 0e		sta $032e	                STA DOS_STATUS
.3944da	28		plp		pass_failure    PLP
.3944db	18		clc		                CLC
.3944dc	6b		rtl		                RTL
.3944dd					ret_success
.3944dd	e2 20		sep #$20	                SEP #$20        ; set A short
.3944df	64 0e		stz $032e	                STZ DOS_STATUS
.3944e1	28		plp		                PLP
.3944e2	38		sec		                SEC
.3944e3	6b		rtl		                RTL
.3944e4					DOS_DIRFINDFREE
.3944e4	08		php		                PHP
.3944e5	c2 30		rep #$30	                REP #$30        ; set A&X long
.3944e7	ad 32 e0	lda $37e032	                LDA DOS_DIR_CLUS_ID
.3944ea	85 10		sta $0330	                STA DOS_CLUS_ID
.3944ec	ad 34 e0	lda $37e034	                LDA DOS_DIR_CLUS_ID+2
.3944ef	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3944f1	a9 00 e1	lda #$e100	load_dir_clus   LDA #<>DOS_DIR_CLUSTER
.3944f4	85 1c		sta $033c	                STA DOS_BUFF_PTR
.3944f6	a9 37 00	lda #$0037	                LDA #`DOS_DIR_CLUSTER
.3944f9	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3944fb	22 52 41 39	jsl $394152	                JSL DOS_GETCLUSTER
.3944ff	b0 06		bcs $394507	                BCS start_walk
.394501	a9 08 00	lda #$0008	                LDA #DOS_ERR_NODIR          ; Return that we could not read the directory
.394504	82 1f 00	brl $394526	                BRL ret_failure
.394507	22 98 41 39	jsl $394198	start_walk      JSL DOS_DIRFIRST            ; Point to the first directory entry
.39450b	a0 00 00	ldy #$0000	                LDY #0                      ; We check the first character of the entry
.39450e					chk_entry
.39450e	e2 20		sep #$20	                SEP #$20        ; set A short
.394510	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the first byte of the directory entry
.394512	f0 19		beq $39452d	                BEQ ret_success             ; If 0: we have a blank... return it
.394514	c9 e5		cmp #$e5	                CMP #DOS_DIR_ENT_UNUSED     ; Is it an unused (deleted) entry?
.394516	f0 15		beq $39452d	                BEQ ret_success             ; Yes: return it
.394518	22 a7 41 39	jsl $3941a7	                JSL DOS_DIRNEXT             ; Move to the next directory entry
.39451c	b0 f0		bcs $39450e	                BCS chk_entry               ; If there is one, check this next entry
.39451e	22 8e 43 39	jsl $39438e	                JSL NEXTCLUSTER32           ; Move to the next cluster of the directory
.394522	b0 e3		bcs $394507	                BCS start_walk              ; If we got one, start walking it
.394524	00		brk #		                BRK                         ; For the moment, just fail
.394525	ea		nop		                NOP                         ; TODO: add a new cluster to the end of the directory
.394526					ret_failure
.394526	e2 20		sep #$20	                SEP #$20        ; set A short
.394528	85 0e		sta $032e	                STA DOS_STATUS              ; Return failure
.39452a	28		plp		                PLP
.39452b	18		clc		                CLC
.39452c	6b		rtl		                RTL
.39452d					ret_success
.39452d	c2 20		rep #$20	                REP #$20        ; set A long
.39452f	a5 10		lda $0330	                LDA DOS_CLUS_ID             ; Return the directory cluster we found
.394531	8d 32 e0	sta $37e032	                STA DOS_DIR_CLUS_ID
.394534	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394536	8d 34 e0	sta $37e034	                STA DOS_DIR_CLUS_ID+2
.394539	e2 20		sep #$20	                SEP #$20        ; set A short
.39453b	64 0e		stz $032e	                STZ DOS_STATUS              ; And return success
.39453d	28		plp		                PLP
.39453e	38		sec		                SEC
.39453f	6b		rtl		                RTL
.394540					BCD2BIN
.394540	08		php		                PHP
.394541	c2 30		rep #$30	                REP #$30        ; set A&X long
.394543	85 28		sta $0348	                STA DOS_TEMP
.394545	29 0f 00	and #$000f	                AND #$000F
.394548	85 2a		sta $034a	                STA DOS_TEMP+2
.39454a	a5 28		lda $0348	                LDA DOS_TEMP
.39454c	4a		lsr a		                LSR A
.39454d	4a		lsr a		                LSR A
.39454e	4a		lsr a		                LSR A
.39454f	4a		lsr a		                LSR A
.394550	85 28		sta $0348	                STA DOS_TEMP
.394552	29 0f 00	and #$000f	                AND #$000F
.394555	8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.394559	a9 0a 00	lda #$000a	                LDA #10
.39455c	8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.394560	af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.394564	18		clc		                CLC
.394565	65 2a		adc $034a	                ADC DOS_TEMP+2
.394567	85 2a		sta $034a	                STA DOS_TEMP+2
.394569	a5 28		lda $0348	                LDA DOS_TEMP
.39456b	4a		lsr a		                LSR A
.39456c	4a		lsr a		                LSR A
.39456d	4a		lsr a		                LSR A
.39456e	4a		lsr a		                LSR A
.39456f	85 28		sta $0348	                STA DOS_TEMP
.394571	29 0f 00	and #$000f	                AND #$000F
.394574	8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.394578	a9 64 00	lda #$0064	                LDA #100
.39457b	8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.39457f	af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.394583	18		clc		                CLC
.394584	65 2a		adc $034a	                ADC DOS_TEMP+2
.394586	85 2a		sta $034a	                STA DOS_TEMP+2
.394588	a5 28		lda $0348	                LDA DOS_TEMP
.39458a	4a		lsr a		                LSR A
.39458b	4a		lsr a		                LSR A
.39458c	4a		lsr a		                LSR A
.39458d	4a		lsr a		                LSR A
.39458e	29 0f 00	and #$000f	                AND #$000F
.394591	8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.394595	a9 e8 03	lda #$03e8	                LDA #1000
.394598	8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.39459c	af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.3945a0	18		clc		                CLC
.3945a1	65 2a		adc $034a	                ADC DOS_TEMP+2
.3945a3	28		plp		                PLP
.3945a4	6b		rtl		                RTL
.3945a5					DOS_RTCCREATE
.3945a5	08		php		                PHP
.3945a6	c2 10		rep #$10	                REP #$10        ; set X long
.3945a8	e2 20		sep #$20	                SEP #$20        ; set A short
.3945aa	af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn off the updates to the clock
.3945ae	09 08		ora #$08	                ORA #%00001000
.3945b0	8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.3945b4	af 0f 08 af	lda $af080f	                LDA @l RTC_CENTURY
.3945b8	85 29		sta $0349	                STA DOS_TEMP+1
.3945ba	af 0a 08 af	lda $af080a	                LDA @l RTC_YEAR             ; Get the year
.3945be	85 28		sta $0348	                STA DOS_TEMP
.3945c0	c2 20		rep #$20	                REP #$20        ; set A long
.3945c2	a5 28		lda $0348	                LDA DOS_TEMP
.3945c4	22 40 45 39	jsl $394540	                JSL BCD2BIN                 ; Convert it to binary
.3945c8	38		sec		                SEC                         ; Year is relative to 1980
.3945c9	e9 bc 07	sbc #$07bc	                SBC #1980
.3945cc	c2 20		rep #$20	                REP #$20        ; set A long
.3945ce	0a		asl a		                ASL A
.3945cf	0a		asl a		                ASL A
.3945d0	0a		asl a		                ASL A
.3945d1	0a		asl a		                ASL A
.3945d2	0a		asl a		                ASL A
.3945d3	0a		asl a		                ASL A
.3945d4	0a		asl a		                ASL A
.3945d5	0a		asl a		                ASL A
.3945d6	0a		asl a		                ASL A
.3945d7	29 00 fe	and #$fe00	                AND #$FE00
.3945da	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.3945dd	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3945df	e2 20		sep #$20	                SEP #$20        ; set A short
.3945e1	af 09 08 af	lda $af0809	                LDA @l RTC_MONTH            ; Get the month
.3945e5	c2 20		rep #$20	                REP #$20        ; set A long
.3945e7	29 ff 00	and #$00ff	                AND #$00FF
.3945ea	22 40 45 39	jsl $394540	                JSL BCD2BIN                 ; Convert it to binary
.3945ee	29 ff 00	and #$00ff	                AND #$00FF                  ; Move the year to bits 15 - 9
.3945f1	0a		asl a		                ASL A
.3945f2	0a		asl a		                ASL A
.3945f3	0a		asl a		                ASL A
.3945f4	0a		asl a		                ASL A
.3945f5	0a		asl a		                ASL A
.3945f6	29 e0 01	and #$01e0	                AND #$01E0                  ; Make sure only the month is covered
.3945f9	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.3945fc	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.3945fe	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394600	e2 20		sep #$20	                SEP #$20        ; set A short
.394602	af 06 08 af	lda $af0806	                LDA @l RTC_DAY              ; Get the day
.394606	c2 20		rep #$20	                REP #$20        ; set A long
.394608	29 ff 00	and #$00ff	                AND #$00FF
.39460b	22 40 45 39	jsl $394540	                JSL BCD2BIN                 ; Convert it to binary
.39460f	29 1f 00	and #$001f	                AND #$001F                  ; Make sure only the day is covered
.394612	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.394615	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.394617	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394619	e2 20		sep #$20	                SEP #$20        ; set A short
.39461b	af 04 08 af	lda $af0804	                LDA @l RTC_HRS              ; Get the hour
.39461f	29 1f		and #$1f	                AND #$1F                    ; Trim AM/PM bit
.394621	c2 20		rep #$20	                REP #$20        ; set A long
.394623	29 ff 00	and #$00ff	                AND #$00FF
.394626	22 40 45 39	jsl $394540	                JSL BCD2BIN                 ; Convert it to binary
.39462a	c2 20		rep #$20	                REP #$20        ; set A long
.39462c	0a		asl a		                ASL A
.39462d	0a		asl a		                ASL A
.39462e	0a		asl a		                ASL A
.39462f	0a		asl a		                ASL A
.394630	0a		asl a		                ASL A
.394631	0a		asl a		                ASL A
.394632	0a		asl a		                ASL A
.394633	0a		asl a		                ASL A
.394634	0a		asl a		                ASL A
.394635	0a		asl a		                ASL A
.394636	0a		asl a		                ASL A
.394637	29 00 f8	and #$f800	                AND #$F800
.39463a	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.39463d	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39463f	e2 20		sep #$20	                SEP #$20        ; set A short
.394641	af 02 08 af	lda $af0802	                LDA @l RTC_MIN              ; Get the minute
.394645	c2 20		rep #$20	                REP #$20        ; set A long
.394647	29 ff 00	and #$00ff	                AND #$00FF
.39464a	22 40 45 39	jsl $394540	                JSL BCD2BIN                 ; Convert it to binary
.39464e	c2 20		rep #$20	                REP #$20        ; set A long
.394650	0a		asl a		                ASL A
.394651	0a		asl a		                ASL A
.394652	0a		asl a		                ASL A
.394653	0a		asl a		                ASL A
.394654	0a		asl a		                ASL A
.394655	29 e0 07	and #$07e0	                AND #$07E0
.394658	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.39465b	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.39465d	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39465f	e2 20		sep #$20	                SEP #$20        ; set A short
.394661	af 00 08 af	lda $af0800	                LDA @l RTC_SEC              ; Get the second
.394665	c2 20		rep #$20	                REP #$20        ; set A long
.394667	29 ff 00	and #$00ff	                AND #$00FF
.39466a	22 40 45 39	jsl $394540	                JSL BCD2BIN                 ; Convert it to binary
.39466e	c2 20		rep #$20	                REP #$20        ; set A long
.394670	29 1f 00	and #$001f	                AND #$001F
.394673	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.394676	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.394678	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39467a	af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn on the updates again
.39467e	29 f7 00	and #$00f7	                AND #%11110111
.394681	8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.394685	28		plp		                PLP
.394686	6b		rtl		                RTL
.394687					DOS_CREATE
.394687	08		php		                PHP
.394688	c2 30		rep #$30	                REP #$30        ; set A&X long
.39468a	a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; DOS_TEMP := DOS_FD_PTR->PATH
.39468d	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39468f	85 28		sta $0348	                STA DOS_TEMP
.394691	c8		iny		                INY
.394692	c8		iny		                INY
.394693	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394695	85 2a		sta $034a	                STA DOS_TEMP+2
.394697	e2 20		sep #$20	                SEP #$20        ; set A short
.394699	a0 00 00	ldy #$0000	                LDY #0
.39469c	a2 00 00	ldx #$0000	                LDX #0
.39469f	b7 28		lda [$0348],y	path_loop       LDA [DOS_TEMP],Y                ; Get a byte of the path
.3946a1	95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X             ; ... save it to the path buffer
.3946a3	f0 04		beq $3946a9	                BEQ find_file                   ; If it's NULL, we're done
.3946a5	e8		inx		                INX
.3946a6	c8		iny		                INY
.3946a7	80 f6		bra $39469f	                BRA path_loop
.3946a9	22 cc 41 39	jsl $3941cc	find_file       JSL DOS_PARSE_PATH
.3946ad	22 39 42 39	jsl $394239	                JSL DOS_FINDFILE
.3946b1	90 07		bcc $3946ba	                BCC validate_name
.3946b3	e2 20		sep #$20	                SEP #$20        ; set A short
.3946b5	a9 0b		lda #$0b	                LDA #DOS_ERR_FILEEXISTS
.3946b7	82 ed 00	brl $3947a7	                BRL ret_failure
.3946ba					validate_name
.3946ba	22 dd 43 39	jsl $3943dd	                JSL DOS_FREECLUS32
.3946be	b0 03		bcs $3946c3	                BCS save_data
.3946c0	82 e8 00	brl $3947ab	                BRL pass_failure
.3946c3					save_data
.3946c3	c2 20		rep #$20	                REP #$20        ; set A long
.3946c5	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER
.3946c8	a5 10		lda $0330	                LDA DOS_CLUS_ID             ; DOS_FD_PTR->FIRST_CLUSTER := DOS_CLUS_ID
.3946ca	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3946cc	c8		iny		                INY
.3946cd	c8		iny		                INY
.3946ce	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3946d0	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3946d2	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; DOS_BUFF_PTR := DOS_FD_PTR->BUFFER
.3946d5	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3946d7	85 1c		sta $033c	                STA DOS_BUFF_PTR
.3946d9	c8		iny		                INY
.3946da	c8		iny		                INY
.3946db	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3946dd	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3946df	22 75 41 39	jsl $394175	                JSL DOS_PUTCLUSTER
.3946e3	b0 03		bcs $3946e8	                BCS find_dir
.3946e5	82 c3 00	brl $3947ab	                BRL pass_failure
.3946e8					find_dir
.3946e8	c2 20		rep #$20	                REP #$20        ; set A long
.3946ea	ad 20 e0	lda $37e020	                LDA ROOT_DIR_FIRST_CLUSTER      ; Scan the root directory
.3946ed	8d 32 e0	sta $37e032	                STA DOS_DIR_CLUS_ID
.3946f0	ad 22 e0	lda $37e022	                LDA ROOT_DIR_FIRST_CLUSTER+2
.3946f3	8d 34 e0	sta $37e034	                STA DOS_DIR_CLUS_ID+2
.3946f6	22 e4 44 39	jsl $3944e4	                JSL DOS_DIRFINDFREE
.3946fa	b0 1a		bcs $394716	                BCS set_entry
.3946fc	c2 20		rep #$20	                REP #$20        ; set A long
.3946fe	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Failed to get the directory entry...
.394701	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y              ; DOS_CLUS_ID := DOS_FD_PTR->FIRST_CLUSTER
.394703	85 10		sta $0330	                STA DOS_CLUS_ID
.394705	c8		iny		                INY
.394706	c8		iny		                INY
.394707	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394709	85 12		sta $0332	                STA DOS_CLUS_ID+2
.39470b	22 69 44 39	jsl $394469	                JSL DELCLUSTER32                ; Delete the cluster
.39470f	e2 20		sep #$20	                SEP #$20        ; set A short
.394711	a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Return that we couldn't read the directory
.394713	82 91 00	brl $3947a7	                BRL ret_failure
.394716					set_entry
.394716	e2 20		sep #$20	                SEP #$20        ; set A short
.394718	a0 00 00	ldy #$0000	                LDY #0
.39471b	a9 00		lda #$00	                LDA #0                          ; NULL
.39471d	97 18		sta [$0338],y	copy_dir_loop   STA [DOS_DIR_PTR],Y             ; Save it to the directory cluster
.39471f	c8		iny		                INY
.394720	c0 20 00	cpy #$0020	                CPY #SIZE(DIRENTRY)
.394723	d0 f8		bne $39471d	                BNE copy_dir_loop
.394725	a0 00 00	ldy #$0000	                LDY #0
.394728	b9 3a e0	lda $37e03a,y	name_loop       LDA DOS_SHORT_NAME,Y            ; Copy the name over
.39472b	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.39472d	c8		iny		                INY
.39472e	c0 0b 00	cpy #$000b	                CPY #11
.394731	d0 f5		bne $394728	                BNE name_loop
.394733	c2 20		rep #$20	                REP #$20        ; set A long
.394735	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; DOS_DIR_PTR->CLUSTER_L := DOS_FD_PTR->FIRST_CLUSTER[15..0]
.394738	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39473a	a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.39473d	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.39473f	a0 0c 00	ldy #$000c	                LDY #FILEDESC.FIRST_CLUSTER+2   ; DOS_DIR_PTR->CLUSTER_H := DOS_FD_PTR->FIRST_CLUSTER[31..16]
.394742	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394744	a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.394747	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394749	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE              ; DOS_DIR_PTR->SIZE := DOS_FD_PTR->SIZE
.39474c	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39474e	a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE
.394751	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394753	a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.394756	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394758	a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.39475b	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.39475d	22 a5 45 39	jsl $3945a5	                JSL DOS_RTCCREATE               ; Pull the creation date-time from the RTC
.394761	a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; DOS_DIR_PTR->CREATE_DATE := DOS_FD_PTR->CREATE_DATE
.394764	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394766	a0 10 00	ldy #$0010	                LDY #DIRENTRY.CREATE_DATE
.394769	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.39476b	a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME       ; DOS_DIR_PTR->CREATE_TIME := DOS_FD_PTR->CREATE_TIME
.39476e	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394770	a0 0e 00	ldy #$000e	                LDY #DIRENTRY.CREATE_TIME
.394773	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394775	a0 1a 00	ldy #$001a	                LDY #FILEDESC.MODIFIED_DATE     ; DOS_DIR_PTR->MODIFIED_DATE := DOS_FD_PTR->MODIFIED_DATE
.394778	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39477a	a0 18 00	ldy #$0018	                LDY #DIRENTRY.MODIFIED_DATE
.39477d	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.39477f	a0 1c 00	ldy #$001c	                LDY #FILEDESC.MODIFIED_TIME     ; DOS_DIR_PTR->MODIFIED_TIME := DOS_FD_PTR->MODIFIED_TIME
.394782	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394784	a0 16 00	ldy #$0016	                LDY #DIRENTRY.MODIFIED_TIME
.394787	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394789	c2 20		rep #$20	                REP #$20        ; set A long
.39478b	ad 32 e0	lda $37e032	                LDA DOS_DIR_CLUS_ID
.39478e	85 10		sta $0330	                STA DOS_CLUS_ID
.394790	ad 34 e0	lda $37e034	                LDA DOS_DIR_CLUS_ID+2
.394793	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394795	a9 00 e1	lda #$e100	                LDA #<>DOS_DIR_CLUSTER
.394798	85 1c		sta $033c	                STA DOS_BUFF_PTR
.39479a	a9 37 00	lda #$0037	                LDA #`DOS_DIR_CLUSTER
.39479d	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.39479f	22 75 41 39	jsl $394175	                JSL DOS_PUTCLUSTER
.3947a3	b0 09		bcs $3947ae	                BCS ret_success
.3947a5	80 04		bra $3947ab	                BRA pass_failure
.3947a7					ret_failure
.3947a7	e2 20		sep #$20	                SEP #$20        ; set A short
.3947a9	85 0e		sta $032e	                STA DOS_STATUS
.3947ab	28		plp		pass_failure    PLP
.3947ac	18		clc		                CLC
.3947ad	6b		rtl		                RTL
.3947ae					ret_success
.3947ae	e2 20		sep #$20	                SEP #$20        ; set A short
.3947b0	64 0e		stz $032e	                STZ DOS_STATUS
.3947b2	28		plp		                PLP
.3947b3	38		sec		                SEC
.3947b4	6b		rtl		                RTL
.3947b5					DOS_COPYPATH
.3947b5	08		php		                PHP
.3947b6	c2 30		rep #$30	                REP #$30        ; set A&X long
.3947b8	a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH
.3947bb	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3947bd	85 28		sta $0348	                STA DOS_TEMP
.3947bf	c8		iny		                INY
.3947c0	c8		iny		                INY
.3947c1	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3947c3	85 2a		sta $034a	                STA DOS_TEMP+2
.3947c5	e2 20		sep #$20	                SEP #$20        ; set A short
.3947c7	a2 00 00	ldx #$0000	                LDX #0
.3947ca	a0 00 00	ldy #$0000	                LDY #0
.3947cd	b7 28		lda [$0348],y	loop            LDA [DOS_TEMP],Y
.3947cf	95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.3947d1	f0 04		beq $3947d7	                BEQ done
.3947d3	e8		inx		                INX
.3947d4	c8		iny		                INY
.3947d5	d0 f6		bne $3947cd	                BNE loop
.3947d7	28		plp		done            PLP
.3947d8	6b		rtl		                RTL

;******  Return to file: src\sdos.asm

.3947d9					IF_OPEN
.3947d9	da		phx		                PHX
.3947da	5a		phy		                PHY
.3947db	0b		phd		                PHD
.3947dc	8b		phb		                PHB
.3947dd	08		php		                PHP
.3947de	48		pha		                PHA             ; begin setdbr macro
.3947df	08		php		                PHP
.3947e0	e2 20		sep #$20	                SEP #$20        ; set A short
.3947e2	a9 37		lda #$37	                LDA #`DOS_HIGH_VARIABLES
.3947e4	48		pha		                PHA
.3947e5	ab		plb		                PLB
.3947e6	28		plp		                PLP
.3947e7	68		pla		                PLA             ; end setdbr macro
.3947e8	48		pha		                PHA             ; begin setdp macro
.3947e9	08		php		                PHP
.3947ea	c2 20		rep #$20	                REP #$20        ; set A long
.3947ec	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3947ef	5b		tcd		                TCD
.3947f0	28		plp		                PLP
.3947f1	68		pla		                PLA             ; end setdp macro
.3947f2	e2 20		sep #$20	                SEP #$20        ; set A short
.3947f4	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Get the status to make sure a open is ok
.3947f7	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3947f9	89 40		bit #$40	                BIT #FD_STAT_OPEN
.3947fb	f0 05		beq $394802	                BEQ ok_to_open
.3947fd	a9 0f		lda #$0f	                LDA #DOS_ERR_OPEN               ; If already open: throw an error
.3947ff	82 70 06	brl $394e72	                BRL IF_FAILURE
.394802	22 b5 47 39	jsl $3947b5	ok_to_open      JSL DOS_COPYPATH                ; Copy the path to the path buffer
.394806	22 39 42 39	jsl $394239	                JSL DOS_FINDFILE                ; Attempt to find the file
.39480a	b0 03		bcs $39480f	                BCS is_found                    ; If OK: we found the file
.39480c	82 67 06	brl $394e76	                BRL IF_PASSFAILURE              ; Otherwise: pass the failure up the chain
.39480f					is_found
.39480f	c2 20		rep #$20	                REP #$20        ; set A long
.394811	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Set the buffer point to the one provided in the file
.394814	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394816	85 1c		sta $033c	                STA DOS_BUFF_PTR
.394818	c8		iny		                INY
.394819	c8		iny		                INY
.39481a	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39481c	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.39481e	22 52 41 39	jsl $394152	                JSL DOS_GETCLUSTER              ; Attempt to load the cluster
.394822	b0 03		bcs $394827	                BCS read_cluster
.394824	82 4f 06	brl $394e76	                BRL IF_PASSFAILURE
.394827	a0 0a 00	ldy #$000a	read_cluster    LDY #FILEDESC.FIRST_CLUSTER     ; Set the first cluster in the file descriptor
.39482a	a5 10		lda $0330	                LDA DOS_CLUS_ID
.39482c	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39482e	c8		iny		                INY
.39482f	c8		iny		                INY
.394830	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394832	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394834	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Set the current cluster in the file descriptor
.394837	a5 10		lda $0330	                LDA DOS_CLUS_ID
.394839	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39483b	c8		iny		                INY
.39483c	c8		iny		                INY
.39483d	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.39483f	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394841	a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE              ; Copy the filesize from the directory entry to the file descriptor
.394844	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.394846	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE
.394849	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39484b	a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.39484e	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.394850	a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.394853	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394855	e2 20		sep #$20	                SEP #$20        ; set A short
.394857	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Mark file as open and readable
.39485a	a9 41		lda #$41	                LDA #FD_STAT_OPEN | FD_STAT_READ
.39485c	17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.39485e	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394860	82 1a 06	brl $394e7d	                BRL IF_SUCCESS
.394863					IF_CREATE
.394863	da		phx		                PHX
.394864	5a		phy		                PHY
.394865	0b		phd		                PHD
.394866	8b		phb		                PHB
.394867	08		php		                PHP
.394868	48		pha		                PHA             ; begin setdbr macro
.394869	08		php		                PHP
.39486a	e2 20		sep #$20	                SEP #$20        ; set A short
.39486c	a9 37		lda #$37	                LDA #`DOS_HIGH_VARIABLES
.39486e	48		pha		                PHA
.39486f	ab		plb		                PLB
.394870	28		plp		                PLP
.394871	68		pla		                PLA             ; end setdbr macro
.394872	48		pha		                PHA             ; begin setdp macro
.394873	08		php		                PHP
.394874	c2 20		rep #$20	                REP #$20        ; set A long
.394876	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394879	5b		tcd		                TCD
.39487a	28		plp		                PLP
.39487b	68		pla		                PLA             ; end setdp macro
.39487c	22 87 46 39	jsl $394687	                JSL DOS_CREATE                  ; Attempt to create the file
.394880	90 18		bcc $39489a	                BCC pass_failure                ; If it fails: pass the failure up the chain
.394882	c2 30		rep #$30	                REP #$30        ; set A&X long
.394884	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Sets the current cluster to 0 to make sure the next write appends
.394887	a9 00 00	lda #$0000	                LDA #0
.39488a	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39488c	c8		iny		                INY
.39488d	c8		iny		                INY
.39488e	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394890	e2 20		sep #$20	                SEP #$20        ; set A short
.394892	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS
.394895	a9 42		lda #$42	                LDA #FD_STAT_OPEN | FD_STAT_WRITE   ; Set the file to open and APPEND only
.394897	82 e3 05	brl $394e7d	                BRL IF_SUCCESS
.39489a	82 d5 05	brl $394e72	pass_failure    BRL IF_FAILURE
.39489d					IF_CLOSE
.39489d	da		phx		                PHX
.39489e	5a		phy		                PHY
.39489f	0b		phd		                PHD
.3948a0	8b		phb		                PHB
.3948a1	08		php		                PHP
.3948a2	48		pha		                PHA             ; begin setdbr macro
.3948a3	08		php		                PHP
.3948a4	e2 20		sep #$20	                SEP #$20        ; set A short
.3948a6	a9 37		lda #$37	                LDA #`DOS_HIGH_VARIABLES
.3948a8	48		pha		                PHA
.3948a9	ab		plb		                PLB
.3948aa	28		plp		                PLP
.3948ab	68		pla		                PLA             ; end setdbr macro
.3948ac	48		pha		                PHA             ; begin setdp macro
.3948ad	08		php		                PHP
.3948ae	c2 20		rep #$20	                REP #$20        ; set A long
.3948b0	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3948b3	5b		tcd		                TCD
.3948b4	28		plp		                PLP
.3948b5	68		pla		                PLA             ; end setdp macro
.3948b6	e2 20		sep #$20	                SEP #$20        ; set A short
.3948b8	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Check to see if we were writing the file
.3948bb	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3948bd	89 02		bit #$02	                BIT #FD_STAT_WRITE
.3948bf	f0 09		beq $3948ca	                BEQ set_flag                    ; No, just mark it closed
.3948c1	22 4c 49 39	jsl $39494c	                JSL IF_WRITE                    ; Attempt to write the cluster
.3948c5	b0 03		bcs $3948ca	                BCS set_flag
.3948c7	82 ac 05	brl $394e76	                BRL IF_PASSFAILURE              ; If there was a problem, pass it up the chain
.3948ca	a0 00 00	ldy #$0000	set_flag        LDY #FILEDESC.STATUS
.3948cd	a9 bf		lda #$bf	                LDA #~FD_STAT_OPEN              ; Mark file as closed
.3948cf	37 20		and [$0340],y	                AND [DOS_FD_PTR],Y
.3948d1	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3948d3	82 a7 05	brl $394e7d	                BRL IF_SUCCESS
.3948d6					IF_READ
.3948d6	da		phx		                PHX
.3948d7	5a		phy		                PHY
.3948d8	0b		phd		                PHD
.3948d9	8b		phb		                PHB
.3948da	08		php		                PHP
.3948db	48		pha		                PHA             ; begin setdbr macro
.3948dc	08		php		                PHP
.3948dd	e2 20		sep #$20	                SEP #$20        ; set A short
.3948df	a9 37		lda #$37	                LDA #`DOS_HIGH_VARIABLES
.3948e1	48		pha		                PHA
.3948e2	ab		plb		                PLB
.3948e3	28		plp		                PLP
.3948e4	68		pla		                PLA             ; end setdbr macro
.3948e5	48		pha		                PHA             ; begin setdp macro
.3948e6	08		php		                PHP
.3948e7	c2 20		rep #$20	                REP #$20        ; set A long
.3948e9	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3948ec	5b		tcd		                TCD
.3948ed	28		plp		                PLP
.3948ee	68		pla		                PLA             ; end setdp macro
.3948ef	c2 10		rep #$10	                REP #$10        ; set X long
.3948f1	e2 20		sep #$20	                SEP #$20        ; set A short
.3948f3	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Get the status to make sure a read is ok
.3948f6	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3948f8	89 40		bit #$40	                BIT #FD_STAT_OPEN               ; Make sure the file is open
.3948fa	f0 05		beq $394901	                BEQ chk_readable
.3948fc	a9 0c		lda #$0c	                LDA #DOS_ERR_NOTOPEN            ; If not: throw a NOTOPEN error
.3948fe	82 71 05	brl $394e72	                BRL IF_FAILURE
.394901	89 01		bit #$01	chk_readable    BIT #FD_STAT_READ               ; Make sure the file is readable
.394903	f0 05		beq $39490a	                BEQ get_dev
.394905	a9 0d		lda #$0d	                LDA #DOS_ERR_NOTREAD            ; If not: throw a NOTREAD error
.394907	82 68 05	brl $394e72	                BRL IF_FAILURE
.39490a	a0 01 00	ldy #$0001	get_dev         LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.39490d	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39490f	85 01		sta $0321	                STA BIOS_DEV
.394911	c2 20		rep #$20	                REP #$20        ; set A long
.394913	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.394916	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394918	85 10		sta $0330	                STA DOS_CLUS_ID
.39491a	c8		iny		                INY
.39491b	c8		iny		                INY
.39491c	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39491e	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394920	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.394923	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394925	85 1c		sta $033c	                STA DOS_BUFF_PTR
.394927	c8		iny		                INY
.394928	c8		iny		                INY
.394929	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39492b	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.39492d	22 8e 43 39	jsl $39438e	                JSL NEXTCLUSTER32               ; Find the next cluster of the file
.394931	90 13		bcc $394946	                BCC pass_failure                ; If not OK: pass the failure up the chaing
.394933	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Update the file's current cluster
.394936	a5 10		lda $0330	                LDA DOS_CLUS_ID
.394938	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39493a	c8		iny		                INY
.39493b	c8		iny		                INY
.39493c	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.39493e	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394940	22 52 41 39	jsl $394152	                JSL DOS_GETCLUSTER              ; Get the cluster
.394944	b0 03		bcs $394949	                BCS ret_success                 ; If ok: return success
.394946	82 2d 05	brl $394e76	pass_failure    BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.394949	82 31 05	brl $394e7d	ret_success     BRL IF_SUCCESS
.39494c					IF_WRITE
.39494c	da		phx		                PHX
.39494d	5a		phy		                PHY
.39494e	0b		phd		                PHD
.39494f	8b		phb		                PHB
.394950	08		php		                PHP
.394951	48		pha		                PHA             ; begin setdbr macro
.394952	08		php		                PHP
.394953	e2 20		sep #$20	                SEP #$20        ; set A short
.394955	a9 37		lda #$37	                LDA #`DOS_HIGH_VARIABLES
.394957	48		pha		                PHA
.394958	ab		plb		                PLB
.394959	28		plp		                PLP
.39495a	68		pla		                PLA             ; end setdbr macro
.39495b	48		pha		                PHA             ; begin setdp macro
.39495c	08		php		                PHP
.39495d	c2 20		rep #$20	                REP #$20        ; set A long
.39495f	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394962	5b		tcd		                TCD
.394963	28		plp		                PLP
.394964	68		pla		                PLA             ; end setdp macro
.394965	c2 10		rep #$10	                REP #$10        ; set X long
.394967	e2 20		sep #$20	                SEP #$20        ; set A short
.394969	a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Get the status to make sure a read is ok
.39496c	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39496e	89 40		bit #$40	                BIT #FD_STAT_OPEN               ; Make sure the file is open
.394970	f0 05		beq $394977	                BEQ chk_readable
.394972	a9 0c		lda #$0c	                LDA #DOS_ERR_NOTOPEN            ; If not: throw a NOTOPEN error
.394974	82 fb 04	brl $394e72	                BRL IF_FAILURE
.394977	89 02		bit #$02	chk_readable    BIT #FD_STAT_WRITE              ; Make sure the file is WRITE
.394979	f0 05		beq $394980	                BEQ get_dev
.39497b	a9 0e		lda #$0e	                LDA #DOS_ERR_NOTWRITE           ; If not: throw a NOTWRITE error
.39497d	82 f2 04	brl $394e72	                BRL IF_FAILURE
.394980	a0 01 00	ldy #$0001	get_dev         LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.394983	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394985	85 01		sta $0321	                STA BIOS_DEV
.394987	c2 20		rep #$20	                REP #$20        ; set A long
.394989	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.39498c	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39498e	85 1c		sta $033c	                STA DOS_BUFF_PTR
.394990	c8		iny		                INY
.394991	c8		iny		                INY
.394992	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394994	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394996	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.394999	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39499b	85 10		sta $0330	                STA DOS_CLUS_ID
.39499d	c8		iny		                INY
.39499e	c8		iny		                INY
.39499f	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3949a1	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3949a3	d0 1a		bne $3949bf	                BNE rewrite_cluster             ; If the cluster ID <> 0, overwrite it
.3949a5	a5 10		lda $0330	                LDA DOS_CLUS_ID
.3949a7	d0 16		bne $3949bf	                BNE rewrite_cluster
.3949a9	a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Get the file's first cluster
.3949ac	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3949ae	85 10		sta $0330	                STA DOS_CLUS_ID
.3949b0	c8		iny		                INY
.3949b1	c8		iny		                INY
.3949b2	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3949b4	85 12		sta $0332	                STA DOS_CLUS_ID+2
.3949b6	22 8f 44 39	jsl $39448f	                JSL DOS_APPENDCLUS              ; Append the cluster
.3949ba	b0 0c		bcs $3949c8	                BCS ret_success                 ; If OK: return success
.3949bc	82 b7 04	brl $394e76	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.3949bf	22 75 41 39	jsl $394175	rewrite_cluster JSL DOS_PUTCLUSTER              ; Over-write the cluster
.3949c3	b0 03		bcs $3949c8	                BCS ret_success                 ; If ok: return success
.3949c5	82 ae 04	brl $394e76	pass_failure    BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.3949c8	82 b2 04	brl $394e7d	ret_success     BRL IF_SUCCESS
.3949cb					IF_DIROPEN
.3949cb	da		phx		                PHX
.3949cc	5a		phy		                PHY
.3949cd	0b		phd		                PHD
.3949ce	8b		phb		                PHB
.3949cf	08		php		                PHP
.3949d0	48		pha		                PHA             ; begin setdbr macro
.3949d1	08		php		                PHP
.3949d2	e2 20		sep #$20	                SEP #$20        ; set A short
.3949d4	a9 37		lda #$37	                LDA #`DOS_HIGH_VARIABLES
.3949d6	48		pha		                PHA
.3949d7	ab		plb		                PLB
.3949d8	28		plp		                PLP
.3949d9	68		pla		                PLA             ; end setdbr macro
.3949da	48		pha		                PHA             ; begin setdp macro
.3949db	08		php		                PHP
.3949dc	c2 20		rep #$20	                REP #$20        ; set A long
.3949de	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3949e1	5b		tcd		                TCD
.3949e2	28		plp		                PLP
.3949e3	68		pla		                PLA             ; end setdp macro
.3949e4	c2 30		rep #$30	                REP #$30        ; set A&X long
.3949e6	a9 aa 55	lda #$55aa	                LDA #$55AA                  ; Clear the buffer
.3949e9	a2 00 00	ldx #$0000	                LDX #0                      ; TODO: remove this for production code
.3949ec	9d 00 e1	sta $37e100,x	clr_loop        STA DOS_DIR_CLUSTER,X
.3949ef	e8		inx		                INX
.3949f0	e8		inx		                INX
.3949f1	e0 00 02	cpx #$0200	                CPX #512
.3949f4	d0 f6		bne $3949ec	                BNE clr_loop
.3949f6	a9 03 00	lda #$0003	                LDA #BIOS_DEV_FDC           ; TODO: let the caller set the device
.3949f9	85 01		sta $0321	                STA BIOS_DEV
.3949fb	22 bc 3f 39	jsl $393fbc	                JSL DOS_MOUNT               ; Make sure we've mounted the SDC.
.3949ff	b0 03		bcs $394a04	                BCS get_root_dir            ; If successful: get the root directory
.394a01	82 72 04	brl $394e76	                BRL IF_PASSFAILURE          ; Otherwise: pass the error up the chain
.394a04					get_root_dir
.394a04	c2 30		rep #$30	                REP #$30        ; set A&X long
.394a06	a9 64 00	lda #$0064	                LDA #100
.394a09	22 f3 12 39	jsl $3912f3	                JSL ILOOP_MS
.394a0d	ad 20 e0	lda $37e020	                LDA ROOT_DIR_FIRST_CLUSTER  ; Set the cluster (or sector for FAT12)
.394a10	8d 32 e0	sta $37e032	                STA DOS_DIR_CLUS_ID         ; to that of the root directory's start
.394a13	85 10		sta $0330	                STA DOS_CLUS_ID
.394a15	ad 22 e0	lda $37e022	                LDA ROOT_DIR_FIRST_CLUSTER+2
.394a18	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394a1a	8d 34 e0	sta $37e034	                STA DOS_DIR_CLUS_ID+2
.394a1d	a9 00 e1	lda #$e100	                LDA #<>DOS_DIR_CLUSTER      ; Point to the directory cluster buffer for loading
.394a20	85 1c		sta $033c	                STA DOS_BUFF_PTR
.394a22	85 18		sta $0338	                STA DOS_DIR_PTR
.394a24	a9 37 00	lda #$0037	                LDA #`DOS_DIR_CLUSTER
.394a27	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394a29	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.394a2b	e2 20		sep #$20	                SEP #$20        ; set A short
.394a2d	ad 01 e0	lda $37e001	                LDA FILE_SYSTEM             ; Check the file system
.394a30	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12        ; Is it FAT12?
.394a32	d0 1d		bne $394a51	                BNE fetch_fat32             ; No: handle processing the diretory as FAT32
.394a34	c2 20		rep #$20	                REP #$20        ; set A long
.394a36	a5 18		lda $0338	                LDA DOS_DIR_PTR             ; Set the BIOS buffer pointer
.394a38	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394a3a	a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.394a3c	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394a3e	ad 32 e0	lda $37e032	                LDA DOS_DIR_CLUS_ID         ; Set the LBA of the sector
.394a41	85 02		sta $0322	                STA BIOS_LBA
.394a43	ad 34 e0	lda $37e034	                LDA DOS_DIR_CLUS_ID+2
.394a46	85 04		sta $0324	                STA BIOS_LBA+2
.394a48	22 65 55 39	jsl $395565	                JSL FDC_GETBLOCK            ; Get the sector from the floppy disk
.394a4c	b0 0c		bcs $394a5a	                BCS do_success              ; If sucessful, set the directory cursor
.394a4e	82 25 04	brl $394e76	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.394a51	22 52 41 39	jsl $394152	fetch_fat32     JSL DOS_GETCLUSTER          ; Try to read the first cluster
.394a55	b0 03		bcs $394a5a	                BCS do_success              ; If successful: set the directory cursor
.394a57	82 1c 04	brl $394e76	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.394a5a	82 20 04	brl $394e7d	do_success      BRL IF_SUCCESS
.394a5d					IF_DIRNEXT
.394a5d	da		phx		                PHX
.394a5e	5a		phy		                PHY
.394a5f	0b		phd		                PHD
.394a60	8b		phb		                PHB
.394a61	08		php		                PHP
.394a62	48		pha		                PHA             ; begin setdbr macro
.394a63	08		php		                PHP
.394a64	e2 20		sep #$20	                SEP #$20        ; set A short
.394a66	a9 37		lda #$37	                LDA #`DOS_HIGH_VARIABLES
.394a68	48		pha		                PHA
.394a69	ab		plb		                PLB
.394a6a	28		plp		                PLP
.394a6b	68		pla		                PLA             ; end setdbr macro
.394a6c	48		pha		                PHA             ; begin setdp macro
.394a6d	08		php		                PHP
.394a6e	c2 20		rep #$20	                REP #$20        ; set A long
.394a70	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394a73	5b		tcd		                TCD
.394a74	28		plp		                PLP
.394a75	68		pla		                PLA             ; end setdp macro
.394a76	22 a7 41 39	jsl $3941a7	                JSL DOS_DIRNEXT             ; Attempt to move to the next entry
.394a7a	b0 77		bcs $394af3	                BCS do_success              ; If successful, return success
.394a7c	e2 20		sep #$20	                SEP #$20        ; set A short
.394a7e	ad 01 e0	lda $37e001	                LDA FILE_SYSTEM             ; Check the file system
.394a81	c9 00		cmp #$00	                CMP #PART_TYPE_FAT12        ; Is it FAT12?
.394a83	d0 38		bne $394abd	                BNE next_fat32              ; No: handle processing the diretory as FAT32
.394a85					next_fat12
.394a85	c2 20		rep #$20	                REP #$20        ; set A long
.394a87	ad 32 e0	lda $37e032	                LDA DOS_DIR_CLUS_ID
.394a8a	1a		inc a		                INC A
.394a8b	8d 32 e0	sta $37e032	                STA DOS_DIR_CLUS_ID         ; Increment the sector number (FAT12 root directory is sector based)
.394a8e	c9 0a 00	cmp #$000a	                CMP #10                     ; See if we're at the end (TODO: calculate this)
.394a91	d0 07		bne $394a9a	                BNE read_sector
.394a93	e2 20		sep #$20	                SEP #$20        ; set A short
.394a95	a9 00		lda #$00	                LDA #0
.394a97	82 d8 03	brl $394e72	                BRL IF_FAILURE
.394a9a					read_sector
.394a9a	c2 20		rep #$20	                REP #$20        ; set A long
.394a9c	ad 32 e0	lda $37e032	                LDA DOS_DIR_CLUS_ID         ; Set the LBA to the sector #
.394a9f	85 02		sta $0322	                STA BIOS_LBA
.394aa1	ad 34 e0	lda $37e034	                LDA DOS_DIR_CLUS_ID+2
.394aa4	85 04		sta $0324	                STA BIOS_LBA+2
.394aa6	a9 00 e1	lda #$e100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointers to the buffer
.394aa9	85 06		sta $0326	                STA BIOS_BUFF_PTR
.394aab	85 18		sta $0338	                STA DOS_DIR_PTR
.394aad	a9 37 00	lda #$0037	                LDA #`DOS_DIR_CLUSTER
.394ab0	85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394ab2	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.394ab4	22 65 55 39	jsl $395565	                JSL FDC_GETBLOCK            ; Attempt to read the sector from the FDC
.394ab8	b0 39		bcs $394af3	                BCS do_success              ; If successful: set the directory cursor
.394aba	82 b9 03	brl $394e76	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.394abd					next_fat32
.394abd	c2 20		rep #$20	                REP #$20        ; set A long
.394abf	ad 32 e0	lda $37e032	                LDA DOS_DIR_CLUS_ID
.394ac2	85 10		sta $0330	                STA DOS_CLUS_ID
.394ac4	ad 34 e0	lda $37e034	                LDA DOS_DIR_CLUS_ID+2
.394ac7	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394ac9	a9 00 e1	lda #$e100	                LDA #<>DOS_DIR_CLUSTER
.394acc	85 1c		sta $033c	                STA DOS_BUFF_PTR
.394ace	85 18		sta $0338	                STA DOS_DIR_PTR
.394ad0	a9 37 00	lda #$0037	                LDA #`DOS_DIR_CLUSTER
.394ad3	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394ad5	85 1a		sta $033a	                STA DOS_DIR_PTR+2
.394ad7	22 8e 43 39	jsl $39438e	                JSL NEXTCLUSTER32           ; Try to find the next cluster
.394adb	b0 03		bcs $394ae0	                BCS set_next
.394add	82 96 03	brl $394e76	                BRL IF_PASSFAILURE          ; If error: pass it up the chain
.394ae0	a5 10		lda $0330	set_next        LDA DOS_CLUS_ID             ; Save the cluster as the current directory cluster
.394ae2	8d 32 e0	sta $37e032	                STA DOS_DIR_CLUS_ID
.394ae5	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394ae7	8d 34 e0	sta $37e034	                STA DOS_DIR_CLUS_ID+2
.394aea	22 52 41 39	jsl $394152	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.394aee	b0 03		bcs $394af3	                BCS do_success              ; If successful: set the directory cursor
.394af0	82 83 03	brl $394e76	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.394af3	82 87 03	brl $394e7d	do_success      BRL IF_SUCCESS
.394af6					IF_DELETE
.394af6	da		phx		                PHX
.394af7	5a		phy		                PHY
.394af8	0b		phd		                PHD
.394af9	8b		phb		                PHB
.394afa	08		php		                PHP
.394afb	48		pha		                PHA             ; begin setdbr macro
.394afc	08		php		                PHP
.394afd	e2 20		sep #$20	                SEP #$20        ; set A short
.394aff	a9 37		lda #$37	                LDA #`DOS_HIGH_VARIABLES
.394b01	48		pha		                PHA
.394b02	ab		plb		                PLB
.394b03	28		plp		                PLP
.394b04	68		pla		                PLA             ; end setdbr macro
.394b05	48		pha		                PHA             ; begin setdp macro
.394b06	08		php		                PHP
.394b07	c2 20		rep #$20	                REP #$20        ; set A long
.394b09	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394b0c	5b		tcd		                TCD
.394b0d	28		plp		                PLP
.394b0e	68		pla		                PLA             ; end setdp macro
.394b0f	c2 30		rep #$30	                REP #$30        ; set A&X long
.394b11	22 39 42 39	jsl $394239	                JSL DOS_FINDFILE
.394b15	b0 03		bcs $394b1a	                BCS get_first_clus
.394b17	82 5c 03	brl $394e76	                BRL IF_PASSFAILURE
.394b1a					get_first_clus
.394b1a	a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.394b1d	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.394b1f	85 10		sta $0330	                STA DOS_CLUS_ID
.394b21	a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.394b24	b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.394b26	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394b28	a5 10		lda $0330	                LDA DOS_CLUS_ID
.394b2a	8d 2a e0	sta $37e02a	                STA DOS_CURR_CLUS
.394b2d	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394b2f	8d 2c e0	sta $37e02c	                STA DOS_CURR_CLUS+2
.394b32	22 8e 43 39	jsl $39438e	del_loop        JSL NEXTCLUSTER32
.394b36	90 2f		bcc $394b67	                BCC del_one
.394b38	a5 10		lda $0330	                LDA DOS_CLUS_ID
.394b3a	8d 2e e0	sta $37e02e	                STA DOS_NEXT_CLUS
.394b3d	a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394b3f	8d 30 e0	sta $37e030	                STA DOS_NEXT_CLUS+2
.394b42	ad 2a e0	lda $37e02a	                LDA DOS_CURR_CLUS
.394b45	85 10		sta $0330	                STA DOS_CLUS_ID
.394b47	ad 2c e0	lda $37e02c	                LDA DOS_CURR_CLUS+2
.394b4a	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394b4c	22 69 44 39	jsl $394469	                JSL DELCLUSTER32
.394b50	b0 03		bcs $394b55	                BCS go_next
.394b52	82 21 03	brl $394e76	                BRL IF_PASSFAILURE
.394b55					go_next
.394b55	ad 2e e0	lda $37e02e	                LDA DOS_NEXT_CLUS
.394b58	85 10		sta $0330	                STA DOS_CLUS_ID
.394b5a	8d 2a e0	sta $37e02a	                STA DOS_CURR_CLUS
.394b5d	ad 30 e0	lda $37e030	                LDA DOS_NEXT_CLUS+2
.394b60	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394b62	8d 2c e0	sta $37e02c	                STA DOS_CURR_CLUS+2
.394b65	80 cb		bra $394b32	                BRA del_loop
.394b67					del_one
.394b67	ad 2a e0	lda $37e02a	                LDA DOS_CURR_CLUS
.394b6a	85 10		sta $0330	                STA DOS_CLUS_ID
.394b6c	ad 2c e0	lda $37e02c	                LDA DOS_CURR_CLUS+2
.394b6f	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394b71	22 69 44 39	jsl $394469	                JSL DELCLUSTER32
.394b75	b0 03		bcs $394b7a	                BCS free_dir_entry
.394b77	82 fc 02	brl $394e76	                BRL IF_PASSFAILURE
.394b7a					free_dir_entry
.394b7a	e2 20		sep #$20	                SEP #$20        ; set A short
.394b7c	a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME         ; Flag the directory entry as deleted
.394b7f	a9 e5		lda #$e5	                LDA #DOS_DIR_ENT_UNUSED
.394b81	97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394b83	c2 20		rep #$20	                REP #$20        ; set A long
.394b85	ad 32 e0	lda $37e032	                LDA DOS_DIR_CLUS_ID             ; Set up to write the directory cluster
.394b88	85 10		sta $0330	                STA DOS_CLUS_ID
.394b8a	ad 34 e0	lda $37e034	                LDA DOS_DIR_CLUS_ID+2
.394b8d	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394b8f	a9 00 e1	lda #$e100	                LDA #<>DOS_DIR_CLUSTER          ; And its buffer
.394b92	85 1c		sta $033c	                STA DOS_BUFF_PTR
.394b94	a9 37 00	lda #$0037	                LDA #`DOS_DIR_CLUSTER
.394b97	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394b99	22 75 41 39	jsl $394175	                JSL DOS_PUTCLUSTER              ; Write the cluster back
.394b9d	b0 03		bcs $394ba2	                BCS ret_success
.394b9f	82 d4 02	brl $394e76	                BRL IF_PASSFAILURE
.394ba2	82 d8 02	brl $394e7d	ret_success     BRL IF_SUCCESS
.394ba5					IF_DIRREAD
.394ba5	da		phx		                PHX
.394ba6	5a		phy		                PHY
.394ba7	0b		phd		                PHD
.394ba8	8b		phb		                PHB
.394ba9	08		php		                PHP
.394baa	48		pha		                PHA             ; begin setdbr macro
.394bab	08		php		                PHP
.394bac	e2 20		sep #$20	                SEP #$20        ; set A short
.394bae	a9 37		lda #$37	                LDA #`DOS_HIGH_VARIABLES
.394bb0	48		pha		                PHA
.394bb1	ab		plb		                PLB
.394bb2	28		plp		                PLP
.394bb3	68		pla		                PLA             ; end setdbr macro
.394bb4	48		pha		                PHA             ; begin setdp macro
.394bb5	08		php		                PHP
.394bb6	c2 20		rep #$20	                REP #$20        ; set A long
.394bb8	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394bbb	5b		tcd		                TCD
.394bbc	28		plp		                PLP
.394bbd	68		pla		                PLA             ; end setdp macro
.394bbe	c2 30		rep #$30	                REP #$30        ; set A&X long
.394bc0	22 39 42 39	jsl $394239	                JSL DOS_FINDFILE              ; This is really just DOS_FINDFILE
.394bc4	b0 03		bcs $394bc9	                BCS success
.394bc6	82 a9 02	brl $394e72	                BRL IF_FAILURE
.394bc9	82 b1 02	brl $394e7d	success         BRL IF_SUCCESS
.394bcc					IF_DIRWRITE
.394bcc	da		phx		                PHX
.394bcd	5a		phy		                PHY
.394bce	0b		phd		                PHD
.394bcf	8b		phb		                PHB
.394bd0	08		php		                PHP
.394bd1	48		pha		                PHA             ; begin setdbr macro
.394bd2	08		php		                PHP
.394bd3	e2 20		sep #$20	                SEP #$20        ; set A short
.394bd5	a9 37		lda #$37	                LDA #`DOS_HIGH_VARIABLES
.394bd7	48		pha		                PHA
.394bd8	ab		plb		                PLB
.394bd9	28		plp		                PLP
.394bda	68		pla		                PLA             ; end setdbr macro
.394bdb	48		pha		                PHA             ; begin setdp macro
.394bdc	08		php		                PHP
.394bdd	c2 20		rep #$20	                REP #$20        ; set A long
.394bdf	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394be2	5b		tcd		                TCD
.394be3	28		plp		                PLP
.394be4	68		pla		                PLA             ; end setdp macro
.394be5	c2 30		rep #$30	                REP #$30        ; set A&X long
.394be7	ad 32 e0	lda $37e032	                LDA DOS_DIR_CLUS_ID
.394bea	85 10		sta $0330	                STA DOS_CLUS_ID
.394bec	ad 34 e0	lda $37e034	                LDA DOS_DIR_CLUS_ID+2
.394bef	85 12		sta $0332	                STA DOS_CLUS_ID+2
.394bf1	a9 00 e1	lda #$e100	                LDA #<>DOS_DIR_CLUSTER
.394bf4	85 1c		sta $033c	                STA DOS_BUFF_PTR
.394bf6	a9 37 00	lda #$0037	                LDA #`DOS_DIR_CLUSTER
.394bf9	85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394bfb	22 75 41 39	jsl $394175	                JSL DOS_PUTCLUSTER
.394bff	b0 03		bcs $394c04	                BCS success
.394c01	82 6e 02	brl $394e72	                BRL IF_FAILURE
.394c04	82 76 02	brl $394e7d	success         BRL IF_SUCCESS
.394c07					IF_LOAD
.394c07	da		phx		                PHX
.394c08	5a		phy		                PHY
.394c09	0b		phd		                PHD
.394c0a	8b		phb		                PHB
.394c0b	08		php		                PHP
.394c0c	48		pha		                PHA             ; begin setdbr macro
.394c0d	08		php		                PHP
.394c0e	e2 20		sep #$20	                SEP #$20        ; set A short
.394c10	a9 37		lda #$37	                LDA #`DOS_HIGH_VARIABLES
.394c12	48		pha		                PHA
.394c13	ab		plb		                PLB
.394c14	28		plp		                PLP
.394c15	68		pla		                PLA             ; end setdbr macro
.394c16	48		pha		                PHA             ; begin setdp macro
.394c17	08		php		                PHP
.394c18	c2 20		rep #$20	                REP #$20        ; set A long
.394c1a	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394c1d	5b		tcd		                TCD
.394c1e	28		plp		                PLP
.394c1f	68		pla		                PLA             ; end setdp macro
.394c20	c2 30		rep #$30	                REP #$30        ; set A&X long
.394c22	22 d9 47 39	jsl $3947d9	                JSL IF_OPEN
.394c26	b0 03		bcs $394c2b	                BCS setup                   ; If success: start setting things up
.394c28	82 4b 02	brl $394e76	                BRL IF_PASSFAILURE          ; Otherwise: pass the failure up the chain
.394c2b					setup
.394c2b	c2 20		rep #$20	                REP #$20        ; set A long
.394c2d	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE          ; Record the size of the file in DOS_FILE_SIZE
.394c30	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394c32	85 2c		sta $034c	                STA DOS_FILE_SIZE
.394c34	c8		iny		                INY
.394c35	c8		iny		                INY
.394c36	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394c38	85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.394c3a	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; Set up the source pointer
.394c3d	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394c3f	85 30		sta $0350	                STA DOS_SRC_PTR
.394c41	c8		iny		                INY
.394c42	c8		iny		                INY
.394c43	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394c45	85 32		sta $0352	                STA DOS_SRC_PTR+2
.394c47	a5 36		lda $0356	                LDA DOS_DST_PTR+2           ; Is there a destination address in RAM?
.394c49	c9 40 00	cmp #$0040	                CMP #$0040
.394c4c	b0 04		bcs $394c52	                BGE load_by_type            ; No: try to load it by type
.394c4e	5c 1c 4d 39	jmp $394d1c	                JML IF_LOADRAW              ; Otherwise, load it to the supplied destination
.394c52	a0 08 00	ldy #$0008	load_by_type    LDY #8                      ; Point to the first extension byte
.394c55	a2 00 00	ldx #$0000	                LDX #0                      ; and the first byte of the table
.394c58					type_loop
.394c58	e2 20		sep #$20	                SEP #$20        ; set A short
.394c5a	bf 9e 4c 39	lda $394c9e,x	                LDA LOAD_TYPE_TABLE,X       ; Get 1st extension character of the entry
.394c5e	f0 37		beq $394c97	                BEQ no_match                ; If NULL... we didn't get a match
.394c60	d9 3a e0	cmp $37e03a,y	                CMP DOS_SHORT_NAME,Y        ; Get the character of the extension
.394c63	d0 28		bne $394c8d	                BNE next_entry              ; If they don't match, try the next entry
.394c65	bf 9f 4c 39	lda $394c9f,x	                LDA LOAD_TYPE_TABLE+1,X     ; Get 2nd extension character of the entry
.394c69	d9 3b e0	cmp $37e03b,y	                CMP DOS_SHORT_NAME+1,Y      ; Get the 2nd character of the extension
.394c6c	d0 1f		bne $394c8d	                BNE next_entry              ; If they don't match, try the next entry
.394c6e	bf a0 4c 39	lda $394ca0,x	                LDA LOAD_TYPE_TABLE+2,X     ; Get 3rd extension character of the entry
.394c72	d9 3c e0	cmp $37e03c,y	                CMP DOS_SHORT_NAME+2,Y      ; Get the 3rd character of the extension
.394c75	d0 16		bne $394c8d	                BNE next_entry              ; If they don't match, try the next entry
.394c77	c2 20		rep #$20	                REP #$20        ; set A long
.394c79	bf a1 4c 39	lda $394ca1,x	                LDA LOAD_TYPE_TABLE+3,X     ; Get the low word of the address
.394c7d	85 28		sta $0348	                STA DOS_TEMP                ; Save it to the jump vector
.394c7f	e2 20		sep #$20	                SEP #$20        ; set A short
.394c81	bf a3 4c 39	lda $394ca3,x	                LDA LOAD_TYPE_TABLE+5,X     ; Get the high byte of the address
.394c85	85 2a		sta $034a	                STA DOS_TEMP+2              ; Save it to the jump vector
.394c87	a2 00 00	ldx #$0000	                LDX #0
.394c8a	dc 48 03	jmp [$0348]	                JML [DOS_TEMP]              ; Jump to the loading routine
.394c8d					next_entry
.394c8d	c2 30		rep #$30	                REP #$30        ; set A&X long
.394c8f	8a		txa		                TXA
.394c90	18		clc		                CLC
.394c91	69 06 00	adc #$0006	                ADC #6
.394c94	aa		tax		                TAX
.394c95	80 c1		bra $394c58	                BRA type_loop               ; And check it against the file
.394c97					no_match
.394c97	e2 20		sep #$20	                SEP #$20        ; set A short
.394c99	a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC         ; Return an not-executable error
.394c9b	82 d4 01	brl $394e72	                BRL IF_FAILURE
>394c9e	50 47 58			LOAD_TYPE_TABLE .text "PGX"                 ; "PGX" --> IF_LOADPGX
>394ca1	a5 4c				                .word <>IF_LOADPGX
>394ca3	39				                .byte `IF_LOADPGX
>394ca4	00				                .byte 0
.394ca5					IF_LOADPGX
.394ca5	c2 10		rep #$10	                REP #$10        ; set X long
.394ca7	e2 20		sep #$20	                SEP #$20        ; set A short
.394ca9	a0 00 00	ldy #$0000	                LDY #0
.394cac	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Check for "PGX" signature
.394cae	c9 50		cmp #$50	                CMP #'P'
.394cb0	d0 15		bne $394cc7	                BNE fail_sig                        ; If not found, fail
.394cb2	c8		iny		                INY
.394cb3	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.394cb5	c9 47		cmp #$47	                CMP #'G'
.394cb7	d0 0e		bne $394cc7	                BNE fail_sig
.394cb9	c8		iny		                INY
.394cba	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.394cbc	c9 58		cmp #$58	                CMP #'X'
.394cbe	d0 07		bne $394cc7	                BNE fail_sig
.394cc0	c8		iny		                INY                                 ; Check for CPU and version code ($01 for 65816)
.394cc1	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.394cc3	c9 01		cmp #$01	                CMP #$01
.394cc5	f0 06		beq $394ccd	                BEQ get_dest                        ; All passes: go to get the destination address
.394cc7	a9 10		lda #$10	fail_sig        LDA #DOS_ERR_PGXSIG                 ; Fail with a PGXSIG error code
.394cc9	22 72 4e 39	jsl $394e72	                JSL IF_FAILURE
.394ccd					get_dest
.394ccd	c2 20		rep #$20	                REP #$20        ; set A long
.394ccf	c8		iny		                INY
.394cd0	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get low word of destination address
.394cd2	85 34		sta $0354	                STA DOS_DST_PTR                     ; And save it to the destination pointer
.394cd4	85 3c		sta $035c	                STA DOS_RUN_PTR                     ; And save it to the RUN pointer
.394cd6	c8		iny		                INY
.394cd7	c8		iny		                INY
.394cd8	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get high word of destination address
.394cda	85 36		sta $0356	                STA DOS_DST_PTR+2
.394cdc	85 3e		sta $035e	                STA DOS_RUN_PTR+2
.394cde	c8		iny		                INY                                 ; Point to the first data byte
.394cdf	c8		iny		                INY
.394ce0					copy_loop
.394ce0	e2 20		sep #$20	                SEP #$20        ; set A short
.394ce2	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Read a byte from the file
.394ce4	87 34		sta [$0354]	                STA [DOS_DST_PTR]                   ; Write it to the destination
.394ce6	c2 20		rep #$20	                REP #$20        ; set A long
.394ce8	e6 34		inc $0354	                INC DOS_DST_PTR                     ; Move to the next destination location
.394cea	d0 02		bne $394cee	                BNE dec_file_size
.394cec	e6 34		inc $0354	                INC DOS_DST_PTR
.394cee	38		sec		dec_file_size   SEC                                 ; Count down the number of bytes to read
.394cef	a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.394cf1	e9 01 00	sbc #$0001	                SBC #1
.394cf4	85 2c		sta $034c	                STA DOS_FILE_SIZE
.394cf6	a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.394cf8	e9 00 00	sbc #$0000	                SBC #0
.394cfb	85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.394cfd	a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Are we at the end of the file?
.394cff	d0 04		bne $394d05	                BNE next_byte
.394d01	a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.394d03	f0 14		beq $394d19	                BEQ done                            ; Yes: we're done
.394d05	c8		iny		next_byte       INY                                 ; Otherwise, move to the next source location
.394d06	cc 0e e0	cpy $37e00e	                CPY CLUSTER_SIZE                    ; Are we at the end of the cluster?
.394d09	d0 d5		bne $394ce0	                BNE copy_loop                       ; No: keep copying
.394d0b	22 8e 43 39	jsl $39438e	                JSL NEXTCLUSTER32                   ; Yes: Load the next cluster
.394d0f	b0 03		bcs $394d14	                BCS next_cluster
.394d11	82 62 01	brl $394e76	                BRL IF_PASSFAILURE                  ; If failed: pass that up the chain
.394d14	a0 00 00	ldy #$0000	next_cluster    LDY #0                              ; Reset the source index
.394d17	80 c7		bra $394ce0	                BRA copy_loop                       ; Go back to copying
.394d19	82 61 01	brl $394e7d	done            BRL IF_SUCCESS
.394d1c					IF_LOADRAW
.394d1c	c2 30		rep #$30	                REP #$30        ; set A&X long
.394d1e	a0 00 00	ldy #$0000	copy_cluster    LDY #0
.394d21					copy_loop
.394d21	e2 20		sep #$20	                SEP #$20        ; set A short
.394d23	b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y         ; Copy byte from cluster to destination
.394d25	97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.394d27	c2 20		rep #$20	                REP #$20        ; set A long
.394d29	38		sec		                SEC                         ; Count down the number of bytes left
.394d2a	a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.394d2c	e9 01 00	sbc #$0001	                SBC #1
.394d2f	85 2c		sta $034c	                STA DOS_FILE_SIZE
.394d31	a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.394d33	e9 00 00	sbc #$0000	                SBC #0
.394d36	85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.394d38	d0 04		bne $394d3e	                BNE continue
.394d3a	a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.394d3c	f0 1b		beq $394d59	                BEQ close_file              ; If not: we're done
.394d3e	c8		iny		continue        INY
.394d3f	cc 0e e0	cpy $37e00e	                CPY CLUSTER_SIZE            ; Are we done with the cluster?
.394d42	d0 dd		bne $394d21	                BNE copy_loop               ; No: keep processing the bytes
.394d44	18		clc		                CLC                         ; Advance the destination pointer to the next chunk of memory
.394d45	a5 34		lda $0354	                LDA DOS_DST_PTR
.394d47	6d 0e e0	adc $37e00e	                ADC CLUSTER_SIZE
.394d4a	85 34		sta $0354	                STA DOS_DST_PTR
.394d4c	a5 36		lda $0356	                LDA DOS_DST_PTR+2
.394d4e	69 00 00	adc #$0000	                ADC #0
.394d51	85 36		sta $0356	                STA DOS_DST_PTR+2
.394d53	22 8e 43 39	jsl $39438e	                JSL NEXTCLUSTER32           ; Yes: load the next cluster
.394d57	90 c5		bcc $394d1e	                BCC copy_cluster            ; And start copying it
.394d59	22 9d 48 39	jsl $39489d	close_file      JSL IF_CLOSE                ; Close the file
.394d5d	b0 03		bcs $394d62	                BCS ret_success             ; If success: we're done
.394d5f	82 14 01	brl $394e76	                BRL IF_PASSFAILURE          ; Otherwise: pass the failure up the chain
.394d62	82 18 01	brl $394e7d	ret_success     BRL IF_SUCCESS
.394d65					IF_NULLBUFFER
.394d65	5a		phy		                PHY
.394d66	8b		phb		                PHB
.394d67	0b		phd		                PHD
.394d68	08		php		                PHP
.394d69	48		pha		                PHA             ; begin setdbr macro
.394d6a	08		php		                PHP
.394d6b	e2 20		sep #$20	                SEP #$20        ; set A short
.394d6d	a9 37		lda #$37	                LDA #`DOS_HIGH_VARIABLES
.394d6f	48		pha		                PHA
.394d70	ab		plb		                PLB
.394d71	28		plp		                PLP
.394d72	68		pla		                PLA             ; end setdbr macro
.394d73	48		pha		                PHA             ; begin setdp macro
.394d74	08		php		                PHP
.394d75	c2 20		rep #$20	                REP #$20        ; set A long
.394d77	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394d7a	5b		tcd		                TCD
.394d7b	28		plp		                PLP
.394d7c	68		pla		                PLA             ; end setdp macro
.394d7d	c2 30		rep #$30	                REP #$30        ; set A&X long
.394d7f	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.394d82	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394d84	85 28		sta $0348	                STA DOS_TEMP
.394d86	c8		iny		                INY
.394d87	c8		iny		                INY
.394d88	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394d8a	85 2a		sta $034a	                STA DOS_TEMP+2
.394d8c	a0 00 00	ldy #$0000	                LDY #0
.394d8f	a9 00 00	lda #$0000	                LDA #0
.394d92	97 28		sta [$0348],y	loop            STA [DOS_TEMP],Y
.394d94	c8		iny		                INY
.394d95	c8		iny		                INY
.394d96	cc 0e e0	cpy $37e00e	                CPY CLUSTER_SIZE
.394d99	d0 f7		bne $394d92	                BNE loop
.394d9b	28		plp		                PLP
.394d9c	2b		pld		                PLD
.394d9d	ab		plb		                PLB
.394d9e	7a		ply		                PLY
.394d9f	6b		rtl		                RTL
.394da0					IF_COPY2BUFF
.394da0	5a		phy		                PHY
.394da1	8b		phb		                PHB
.394da2	0b		phd		                PHD
.394da3	08		php		                PHP
.394da4	48		pha		                PHA             ; begin setdbr macro
.394da5	08		php		                PHP
.394da6	e2 20		sep #$20	                SEP #$20        ; set A short
.394da8	a9 37		lda #$37	                LDA #`DOS_HIGH_VARIABLES
.394daa	48		pha		                PHA
.394dab	ab		plb		                PLB
.394dac	28		plp		                PLP
.394dad	68		pla		                PLA             ; end setdbr macro
.394dae	48		pha		                PHA             ; begin setdp macro
.394daf	08		php		                PHP
.394db0	c2 20		rep #$20	                REP #$20        ; set A long
.394db2	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394db5	5b		tcd		                TCD
.394db6	28		plp		                PLP
.394db7	68		pla		                PLA             ; end setdp macro
.394db8	c2 30		rep #$30	                REP #$30        ; set A&X long
.394dba	a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.394dbd	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394dbf	85 28		sta $0348	                STA DOS_TEMP
.394dc1	c8		iny		                INY
.394dc2	c8		iny		                INY
.394dc3	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394dc5	85 2a		sta $034a	                STA DOS_TEMP+2
.394dc7	a0 00 00	ldy #$0000	                LDY #0
.394dca					copy_loop
.394dca	e2 20		sep #$20	                SEP #$20        ; set A short
.394dcc	a7 30		lda [$0350]	                LDA [DOS_SRC_PTR]           ; Copy a byte
.394dce	97 28		sta [$0348],y	                STA [DOS_TEMP],Y
.394dd0	c2 20		rep #$20	                REP #$20        ; set A long
.394dd2	c8		iny		                INY                         ; Count it
.394dd3	cc 0e e0	cpy $37e00e	                CPY CLUSTER_SIZE            ; Have we reached the limit?
.394dd6	f0 14		beq $394dec	                BEQ done                    ; Yes: we're done
.394dd8	a5 30		lda $0350	                LDA DOS_SRC_PTR             ; Check if we copied the last byte
.394dda	c5 38		cmp $0358	                CMP DOS_END_PTR
.394ddc	d0 06		bne $394de4	                BNE next_byte
.394dde	a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.394de0	c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.394de2	f0 08		beq $394dec	                BEQ done                    ; Yes: we're done
.394de4	e6 30		inc $0350	next_byte       INC DOS_SRC_PTR             ; No: advance the source pointer
.394de6	d0 e2		bne $394dca	                BNE copy_loop
.394de8	e6 32		inc $0352	                INC DOS_SRC_PTR+2
.394dea	80 de		bra $394dca	                BRA copy_loop               ; And try this next byte
.394dec	28		plp		done            PLP
.394ded	2b		pld		                PLD
.394dee	ab		plb		                PLB
.394def	7a		ply		                PLY
.394df0	6b		rtl		                RTL
.394df1					IF_SAVE
.394df1	da		phx		                PHX
.394df2	5a		phy		                PHY
.394df3	0b		phd		                PHD
.394df4	8b		phb		                PHB
.394df5	08		php		                PHP
.394df6	48		pha		                PHA             ; begin setdbr macro
.394df7	08		php		                PHP
.394df8	e2 20		sep #$20	                SEP #$20        ; set A short
.394dfa	a9 37		lda #$37	                LDA #`DOS_HIGH_VARIABLES
.394dfc	48		pha		                PHA
.394dfd	ab		plb		                PLB
.394dfe	28		plp		                PLP
.394dff	68		pla		                PLA             ; end setdbr macro
.394e00	48		pha		                PHA             ; begin setdp macro
.394e01	08		php		                PHP
.394e02	c2 20		rep #$20	                REP #$20        ; set A long
.394e04	a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394e07	5b		tcd		                TCD
.394e08	28		plp		                PLP
.394e09	68		pla		                PLA             ; end setdp macro
.394e0a	c2 30		rep #$30	                REP #$30        ; set A&X long
.394e0c	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE := DOS_END_PTR - DOS_SRC_PTR
.394e0f	38		sec		                SEC
.394e10	a5 38		lda $0358	                LDA DOS_END_PTR
.394e12	e5 30		sbc $0350	                SBC DOS_SRC_PTR
.394e14	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394e16	c8		iny		                INY
.394e17	c8		iny		                INY
.394e18	a5 3a		lda $035a	                LDA DOS_END_PTR+2
.394e1a	e5 32		sbc $0352	                SBC DOS_SRC_PTR+2
.394e1c	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394e1e	a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE++
.394e21	18		clc		                CLC
.394e22	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394e24	69 01 00	adc #$0001	                ADC #1
.394e27	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394e29	90 09		bcc $394e34	                BCC first_block
.394e2b	c8		iny		                INY
.394e2c	c8		iny		                INY
.394e2d	b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394e2f	69 00 00	adc #$0000	                ADC #0
.394e32	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394e34	22 65 4d 39	jsl $394d65	first_block     JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.394e38	22 a0 4d 39	jsl $394da0	                JSL IF_COPY2BUFF        ; Copy first (at most) 512 bytes of data to FD buffer
.394e3c	22 63 48 39	jsl $394863	                JSL IF_CREATE           ; Create file.
.394e40	b0 03		bcs $394e45	                BCS check_for_end
.394e42	82 31 00	brl $394e76	                BRL IF_PASSFAILURE      ; If we couldn't create the file, pass the failure up
.394e45	a5 30		lda $0350	check_for_end   LDA DOS_SRC_PTR         ; Check if we copied the last byte
.394e47	c5 38		cmp $0358	                CMP DOS_END_PTR
.394e49	d0 06		bne $394e51	                BNE next_block
.394e4b	a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.394e4d	c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.394e4f	f0 1d		beq $394e6e	                BEQ done                ; Yes: we're done
.394e51	22 65 4d 39	jsl $394d65	next_block      JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.394e55	22 a0 4d 39	jsl $394da0	                JSL IF_COPY2BUFF        ; Copy next (at most) 512 bytes of data to FD buffer
.394e59	a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER   ; Make sure the CLUSTER is 0 to force an append
.394e5c	a9 00 00	lda #$0000	                LDA #0
.394e5f	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394e61	c8		iny		                INY
.394e62	c8		iny		                INY
.394e63	97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394e65	22 4c 49 39	jsl $39494c	                JSL IF_WRITE            ; Append to the file
.394e69	b0 da		bcs $394e45	                BCS check_for_end       ; And try again
.394e6b	82 08 00	brl $394e76	                BRL IF_PASSFAILURE      ; If we couldn't update the file, pass the failure up
.394e6e	5c 7d 4e 39	jmp $394e7d	done            JML IF_SUCCESS
.394e72					IF_FAILURE
.394e72	e2 20		sep #$20	                SEP #$20        ; set A short
.394e74	85 0e		sta $032e	                STA DOS_STATUS
.394e76	28		plp		IF_PASSFAILURE  PLP
.394e77	18		clc		                CLC
.394e78	ab		plb		                PLB
.394e79	2b		pld		                PLD
.394e7a	7a		ply		                PLY
.394e7b	fa		plx		                PLX
.394e7c	6b		rtl		                RTL
.394e7d					IF_SUCCESS
.394e7d	e2 20		sep #$20	                SEP #$20        ; set A short
.394e7f	64 00		stz $0320	                STZ BIOS_STATUS
.394e81	64 0e		stz $032e	                STZ DOS_STATUS
.394e83	28		plp		                PLP
.394e84	38		sec		                SEC
.394e85	ab		plb		                PLB
.394e86	2b		pld		                PLD
.394e87	7a		ply		                PLY
.394e88	fa		plx		                PLX
.394e89	6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\uart.asm

=$af13f8				UART1_BASE = $AF13F8        ; Base address for UART 1 (COM1)
=$af12f8				UART2_BASE = $AF12F8        ; Base address for UART 2 (COM2)
=$00					UART_TRHB = $00             ; Transmit/Receive Hold Buffer
=$00					UART_DLL = UART_TRHB        ; Divisor Latch Low Byte
=$01					UART_DLH = $01              ; Divisor Latch High Byte
=$01					UART_IER = UART_DLH         ; Interupt Enable Register
=$02					UART_FCR = $02              ; FIFO Control Register
=$02					UART_IIR = UART_FCR         ; Interupt Indentification Register
=$03					UART_LCR = $03              ; Line Control Register
=$04					UART_MCR = $04              ; Modem Control REgister
=$05					UART_LSR = $05              ; Line Status Register
=$06					UART_MSR = $06              ; Modem Status Register
=$07					UART_SR = $07               ; Scratch Register
=$20					UINT_LOW_POWER = $20        ; Enable Low Power Mode (16750)
=$10					UINT_SLEEP_MODE = $10       ; Enable Sleep Mode (16750)
=$08					UINT_MODEM_STATUS = $08     ; Enable Modem Status Interrupt
=$04					UINT_LINE_STATUS = $04      ; Enable Receiver Line Status Interupt
=$02					UINT_THR_EMPTY = $02        ; Enable Transmit Holding Register Empty interrupt
=$01					UINT_DATA_AVAIL = $01       ; Enable Recieve Data Available interupt
=$80					IIR_FIFO_ENABLED = $80      ; FIFO is enabled
=$40					IIR_FIFO_NONFUNC = $40      ; FIFO is not functioning
=$20					IIR_FIFO_64BYTE = $20       ; 64 byte FIFO enabled (16750)
=$00					IIR_MODEM_STATUS = $00      ; Modem Status Interrupt
=$02					IIR_THR_EMPTY = $02         ; Transmit Holding Register Empty Interrupt
=$04					IIR_DATA_AVAIL = $04        ; Data Available Interrupt
=$06					IIR_LINE_STATUS = $06       ; Line Status Interrupt
=$0c					IIR_TIMEOUT = $0C           ; Time-out Interrupt (16550 and later)
=$01					IIR_INTERRUPT_PENDING = $01 ; Interrupt Pending Flag
=$80					LCR_DLB = $80               ; Divisor Latch Access Bit
=$60					LCR_SBE = $60               ; Set Break Enable
=$00					LCR_PARITY_NONE = $00       ; Parity: None
=$08					LCR_PARITY_ODD = $08        ; Parity: Odd
=$18					LCR_PARITY_EVEN = $18       ; Parity: Even
=$28					LCR_PARITY_MARK = $28       ; Parity: Mark
=$38					LCR_PARITY_SPACE = $38      ; Parity: Space
=$00					LCR_STOPBIT_1 = $00         ; One Stop Bit
=$04					LCR_STOPBIT_2 = $04         ; 1.5 or 2 Stop Bits
=$00					LCR_DATABITS_5 = $00        ; Data Bits: 5
=$01					LCR_DATABITS_6 = $01        ; Data Bits: 6
=$02					LCR_DATABITS_7 = $02        ; Data Bits: 7
=$03					LCR_DATABITS_8 = $03        ; Data Bits: 8
=$80					LSR_ERR_RECIEVE = $80       ; Error in Received FIFO
=$40					LSR_XMIT_DONE = $40         ; All data has been transmitted
=$20					LSR_XMIT_EMPTY = $20        ; Empty transmit holding register
=$10					LSR_BREAK_INT = $10         ; Break interrupt
=$08					LSR_ERR_FRAME = $08         ; Framing error
=$04					LSR_ERR_PARITY = $04        ; Parity error
=$02					LSR_ERR_OVERRUN = $02       ; Overrun error
=$01					LSR_DATA_AVAIL = $01        ; Data is ready in the receive buffer
=384					UART_300 = 384              ; Code for 300 bps
=96					UART_1200 = 96              ; Code for 1200 bps
=48					UART_2400 = 48              ; Code for 2400 bps
=24					UART_4800 = 24              ; Code for 4800 bps
=12					UART_9600 = 12              ; Code for 9600 bps
=6					UART_19200 = 6              ; Code for 19200 bps
=3					UART_38400 = 3              ; Code for 28400 bps
=2					UART_57600 = 2              ; Code for 57600 bps
=1					UART_115200 = 1             ; Code for 115200 bps
.394e8a					UART_SELECT
.394e8a	08		php		            PHP
.394e8b	c2 20		rep #$20	                REP #$20        ; set A long
.394e8d	c9 02 00	cmp #$0002	            CMP #2
.394e90	f0 07		beq $394e99	            BEQ is_COM2
.394e92	c2 20		rep #$20	                REP #$20        ; set A long
.394e94	a9 f8 13	lda #$13f8	            LDA #<>UART1_BASE
.394e97	80 05		bra $394e9e	            BRA setaddr
.394e99					is_COM2
.394e99	c2 20		rep #$20	                REP #$20        ; set A long
.394e9b	a9 f8 12	lda #$12f8	            LDA #<>UART2_BASE
.394e9e	8f 00 07 00	sta $000700	setaddr     STA @lCURRUART
.394ea2	e2 20		sep #$20	                SEP #$20        ; set A short
.394ea4	a9 af		lda #$af	            LDA #`UART1_BASE
.394ea6	8f 02 07 00	sta $000702	            STA @lCURRUART+2
.394eaa	28		plp		            PLP
.394eab	6b		rtl		            RTL
.394eac					UART_SETBPS
.394eac	08		php		            PHP
.394ead	0b		phd		            PHD
.394eae	48		pha		                PHA             ; begin setdp macro
.394eaf	08		php		                PHP
.394eb0	c2 20		rep #$20	                REP #$20        ; set A long
.394eb2	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.394eb5	5b		tcd		                TCD
.394eb6	28		plp		                PLP
.394eb7	68		pla		                PLA             ; end setdp macro
.394eb8	c2 30		rep #$30	                REP #$30        ; set A&X long
.394eba	48		pha		            PHA
.394ebb	e2 20		sep #$20	                SEP #$20        ; set A short
.394ebd	a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Enable divisor latch
.394ec0	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.394ec2	09 80		ora #$80	            ORA #LCR_DLB
.394ec4	97 00		sta [$0700],y	            STA [CURRUART],Y
.394ec6	c2 20		rep #$20	                REP #$20        ; set A long
.394ec8	68		pla		            PLA
.394ec9	a0 00 00	ldy #$0000	            LDY #UART_DLL
.394ecc	97 00		sta [$0700],y	            STA [CURRUART],Y    ; Save the divisor to the UART
.394ece	e2 20		sep #$20	                SEP #$20        ; set A short
.394ed0	a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Disable divisor latch
.394ed3	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.394ed5	49 80		eor #$80	            EOR #LCR_DLB
.394ed7	97 00		sta [$0700],y	            STA [CURRUART],Y
.394ed9	2b		pld		            PLD
.394eda	28		plp		            PLP
.394edb	6b		rtl		            RTL
.394edc					UART_SETLCR
.394edc	08		php		            PHP
.394edd	0b		phd		            PHD
.394ede	48		pha		                PHA             ; begin setdp macro
.394edf	08		php		                PHP
.394ee0	c2 20		rep #$20	                REP #$20        ; set A long
.394ee2	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.394ee5	5b		tcd		                TCD
.394ee6	28		plp		                PLP
.394ee7	68		pla		                PLA             ; end setdp macro
.394ee8	e2 20		sep #$20	                SEP #$20        ; set A short
.394eea	c2 10		rep #$10	                REP #$10        ; set X long
.394eec	29 7f		and #$7f	            AND #$7F            ; We don't want to alter divisor latch
.394eee	a0 03 00	ldy #$0003	            LDY #UART_LCR
.394ef1	97 00		sta [$0700],y	            STA [CURRUART],Y
.394ef3	2b		pld		            PLD
.394ef4	28		plp		            PLP
.394ef5	6b		rtl		            RTL
.394ef6					UART_INIT
.394ef6	08		php		            PHP
.394ef7	0b		phd		            PHD
.394ef8	c2 30		rep #$30	                REP #$30        ; set A&X long
.394efa	48		pha		                PHA             ; begin setdp macro
.394efb	08		php		                PHP
.394efc	c2 20		rep #$20	                REP #$20        ; set A long
.394efe	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.394f01	5b		tcd		                TCD
.394f02	28		plp		                PLP
.394f03	68		pla		                PLA             ; end setdp macro
.394f04	a9 01 00	lda #$0001	            LDA #UART_115200
.394f07	22 ac 4e 39	jsl $394eac	            JSL UART_SETBPS
.394f0b	e2 20		sep #$20	                SEP #$20        ; set A short
.394f0d	a9 03		lda #$03	            LDA #LCR_PARITY_NONE | LCR_STOPBIT_1 | LCR_DATABITS_8
.394f0f	22 dc 4e 39	jsl $394edc	            JSL UART_SETLCR
.394f13	a9 e1		lda #$e1	            LDA #%11100001
.394f15	a0 02 00	ldy #$0002	            LDY #UART_FCR
.394f18	97 00		sta [$0700],y	            STA [CURRUART],Y
.394f1a	2b		pld		            PLD
.394f1b	28		plp		            PLP
.394f1c	6b		rtl		            RTL
.394f1d					UART_HASBYT
.394f1d	08		php		            PHP
.394f1e	0b		phd		            PHD
.394f1f	c2 30		rep #$30	                REP #$30        ; set A&X long
.394f21	48		pha		                PHA             ; begin setdp macro
.394f22	08		php		                PHP
.394f23	c2 20		rep #$20	                REP #$20        ; set A long
.394f25	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.394f28	5b		tcd		                TCD
.394f29	28		plp		                PLP
.394f2a	68		pla		                PLA             ; end setdp macro
.394f2b	e2 20		sep #$20	                SEP #$20        ; set A short
.394f2d	a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.394f30	b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.394f32	29 01		and #$01	            AND #LSR_DATA_AVAIL
.394f34	d0 04		bne $394f3a	            BNE ret_true            ; If flag is set, return true
.394f36	2b		pld		ret_false   PLD                     ; Return false
.394f37	28		plp		            PLP
.394f38	18		clc		            CLC
.394f39	6b		rtl		            RTL
.394f3a	2b		pld		ret_true    PLD                     ; Return true
.394f3b	28		plp		            PLP
.394f3c	38		sec		            SEC
.394f3d	6b		rtl		            RTL
.394f3e					UART_GETC
.394f3e	08		php		            PHP
.394f3f	0b		phd		            PHD
.394f40	c2 30		rep #$30	                REP #$30        ; set A&X long
.394f42	48		pha		                PHA             ; begin setdp macro
.394f43	08		php		                PHP
.394f44	c2 20		rep #$20	                REP #$20        ; set A long
.394f46	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.394f49	5b		tcd		                TCD
.394f4a	28		plp		                PLP
.394f4b	68		pla		                PLA             ; end setdp macro
.394f4c	e2 20		sep #$20	                SEP #$20        ; set A short
.394f4e	a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.394f51	b7 00		lda [$0700],y	wait_getc   LDA [CURRUART],Y
.394f53	29 01		and #$01	            AND #LSR_DATA_AVAIL
.394f55	f0 fa		beq $394f51	            BEQ wait_getc           ; If the flag is clear, wait
.394f57	a0 00 00	ldy #$0000	            LDY #UART_TRHB          ; Get the byte from the receive FIFO
.394f5a	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.394f5c	2b		pld		            PLD
.394f5d	28		plp		            PLP
.394f5e	6b		rtl		            RTL
.394f5f					UART_PUTC
.394f5f	08		php		            PHP
.394f60	0b		phd		            PHD
.394f61	c2 30		rep #$30	                REP #$30        ; set A&X long
.394f63	48		pha		                PHA             ; begin setdp macro
.394f64	08		php		                PHP
.394f65	c2 20		rep #$20	                REP #$20        ; set A long
.394f67	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.394f6a	5b		tcd		                TCD
.394f6b	28		plp		                PLP
.394f6c	68		pla		                PLA             ; end setdp macro
.394f6d	e2 20		sep #$20	                SEP #$20        ; set A short
.394f6f	48		pha		            PHA                     ; Wait for the transmit FIFO to free up
.394f70	a0 05 00	ldy #$0005	            LDY #UART_LSR
.394f73	b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.394f75	29 20		and #$20	            AND #LSR_XMIT_EMPTY
.394f77	f0 fa		beq $394f73	            BEQ wait_putc
.394f79	68		pla		            PLA
.394f7a	a0 00 00	ldy #$0000	            LDY #UART_TRHB
.394f7d	97 00		sta [$0700],y	            STA [CURRUART],Y
.394f7f	2b		pld		            PLD
.394f80	28		plp		            PLP
.394f81	6b		rtl		            RTL
.394f82					UART_PUTS
.394f82	08		php		            PHP
.394f83	e2 20		sep #$20	                SEP #$20        ; set A short
.394f85	bd 00 00	lda $0000,x	put_loop    LDA #0,B,X
.394f88	f0 07		beq $394f91	            BEQ done
.394f8a	22 5f 4f 39	jsl $394f5f	            JSL UART_PUTC
.394f8e	e8		inx		            INX
.394f8f	80 f4		bra $394f85	            BRA put_loop
.394f91	28		plp		done        PLP
.394f92	6b		rtl		            RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\joystick.asm

.394f93					JOYSTICK_SET_NES_MODE
.394f93	e2 20		sep #$20	                SEP #$20        ; set A short
.394f95	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.394f99	29 fb		and #$fb	          AND #~NES_SNES_JOY  ; 0 = NES (8 bit shift)
.394f9b	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.394f9f	6b		rtl		          RTL
.394fa0					JOYSTICK_SET_SNES_MODE
.394fa0	e2 20		sep #$20	                SEP #$20        ; set A short
.394fa2	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.394fa6	29 fb		and #$fb	          AND #~NES_SNES_JOY
.394fa8	09 04		ora #$04	          ORA #NES_SNES_JOY   ; 1 = SNES (12 Bit Shift)
.394faa	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.394fae	6b		rtl		          RTL
.394faf					JOYSTICK_ENABLE_NES_SNES_PORT0
.394faf	e2 20		sep #$20	                SEP #$20        ; set A short
.394fb1	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.394fb5	29 fe		and #$fe	          AND #~NES_SNES_EN0
.394fb7	09 01		ora #$01	          ORA #NES_SNES_EN0
.394fb9	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.394fbd	6b		rtl		          RTL
.394fbe					JOYSTICK_ENABLE_NES_SNES_PORT1
.394fbe	e2 20		sep #$20	                SEP #$20        ; set A short
.394fc0	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.394fc4	29 fd		and #$fd	          AND #~NES_SNES_EN1
.394fc6	09 02		ora #$02	          ORA #NES_SNES_EN1
.394fc8	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.394fcc	6b		rtl		          RTL
.394fcd					JOYSTICK_DISABLE_NES_SNES_PORT0
.394fcd	e2 20		sep #$20	                SEP #$20        ; set A short
.394fcf	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.394fd3	29 fe		and #$fe	          AND #~NES_SNES_EN0
.394fd5	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.394fd9	6b		rtl		          RTL
.394fda					JOYSTICK_DISABLE_NES_SNES_PORT1
.394fda	e2 20		sep #$20	                SEP #$20        ; set A short
.394fdc	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.394fe0	29 fd		and #$fd	          AND #~NES_SNES_EN1
.394fe2	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.394fe6	6b		rtl		          RTL
.394fe7					JOYSTICK_NES_SNES_TRIG_WITH_POLL
.394fe7	e2 20		sep #$20	                SEP #$20        ; set A short
.394fe9	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.394fed	29 03		and #$03	          AND #(NES_SNES_EN0 | NES_SNES_EN1)
.394fef	c9 00		cmp #$00	          CMP #$00
.394ff1	f0 14		beq $395007	          BEQ END_OF_JOYSTICK_POLL
.394ff3	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.394ff7	09 80		ora #$80	          ORA #NES_SNES_TRIG   ; Set to 1 (Will auto Clear)
.394ff9	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.394ffd					JOYSTICK_POLLING_ISNOTOVER
.394ffd	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE ;
.395001	29 40		and #$40	          AND #NES_SNES_DONE
.395003	c9 40		cmp #$40	          CMP #NES_SNES_DONE
.395005	d0 f6		bne $394ffd	          BNE JOYSTICK_POLLING_ISNOTOVER
.395007					END_OF_JOYSTICK_POLL
.395007	6b		rtl		          RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\fdc_library.asm

=4295454				FDC_MOTOR_TIME = 4295454        ; Time to wait for the motor to come on: 300ms
=2147727				FDC_SEEK_TIME = 2147727         ; Time to wait for a seek to happen: 150ms
=1800					FDC_MOTOR_ON_TIME = 60 * 30     ; Time (in SOF interrupt counts) for the motor to stay on: ~30s?
.395008					FDC_TEST
.395008	8b		phb		                    PHB
.395009	0b		phd		                    PHD
.39500a	08		php		                    PHP
.39500b	48		pha		                PHA             ; begin setdbr macro
.39500c	08		php		                PHP
.39500d	e2 20		sep #$20	                SEP #$20        ; set A short
.39500f	a9 00		lda #$00	                LDA #0
.395011	48		pha		                PHA
.395012	ab		plb		                PLB
.395013	28		plp		                PLP
.395014	68		pla		                PLA             ; end setdbr macro
.395015	48		pha		                PHA             ; begin setdp macro
.395016	08		php		                PHP
.395017	c2 20		rep #$20	                REP #$20        ; set A long
.395019	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39501c	5b		tcd		                TCD
.39501d	28		plp		                PLP
.39501e	68		pla		                PLA             ; end setdp macro
.39501f	e2 20		sep #$20	                SEP #$20        ; set A short
.395021	a9 f0		lda #$f0	                    LDA #$F0
.395023	8d 1e 00	sta $001e	                    STA @w CURCOLOR
.395026	22 56 09 39	jsl $390956	                    JSL ICLRSCREEN
.39502a	22 c2 07 39	jsl $3907c2	                    JSL ICSRHOME
.39502e	c2 30		rep #$30	                REP #$30        ; set A&X long
.395030	22 a4 51 39	jsl $3951a4	                    JSL FDC_Init
.395034	b0 03		bcs $395039	                    BCS init_ok
.395036	82 1d 00	brl $395056	                    BRL motor_off
.395039	22 cc 55 39	jsl $3955cc	init_ok             JSL FDC_MOUNT
.39503d	b0 03		bcs $395042	                    BCS is_ok
.39503f					mount_err
.39503f	82 14 00	brl $395056	                    BRL motor_off
.395042					is_ok
.395042	c2 20		rep #$20	                REP #$20        ; set A long
.395044	a9 02 00	lda #$0002	                    LDA #2
.395047	85 30		sta $0330	                    STA DOS_CLUS_ID
.395049	a9 00 00	lda #$0000	                    LDA #0
.39504c	85 32		sta $0332	                    STA DOS_CLUS_ID+2
.39504e	22 7e 57 39	jsl $39577e	                    JSL NEXTCLUSTER12
.395052	b0 02		bcs $395056	                    BCS is_ok2
.395054	80 00		bra $395056	                    BRA motor_off
.395056					is_ok2
.395056					is_ok3
.395056	22 40 52 39	jsl $395240	motor_off           JSL FDC_Motor_Off
.39505a	28		plp		                    PLP
.39505b	2b		pld		                    PLD
.39505c	ab		plb		                    PLB
.39505d	6b		rtl		                    RTL
.39505e					FDC_BRK_ON_ERR
.39505e	08		php		                    PHP
.39505f	e2 20		sep #$20	                SEP #$20        ; set A short
.395061	af 06 03 00	lda $000306	                    LDA @l FDC_ST0
.395065	29 d0		and #$d0	                    AND #%11010000          ; Check only the error bits
.395067	f0 09		beq $395072	                    BEQ done
.395069	a9 23		lda #$23	                    LDA #'#'
.39506b	22 67 06 39	jsl $390667	                    JSL IPUTC
.39506f	ea		nop		lock                NOP
.395070	80 fd		bra $39506f	                    BRA lock
.395072	28		plp		done                PLP
.395073	6b		rtl		                    RTL
.395074					FDC_Check_RQM
.395074	08		php		                    PHP
.395075	e2 20		sep #$20	                SEP #$20        ; set A short
.395077	af f4 13 af	lda $af13f4	loop                LDA SIO_FDC_MSR
.39507b	89 80		bit #$80	                    BIT #FDC_MSR_RQM
.39507d	f0 f8		beq $395077	                    BEQ loop
.39507f	28		plp		                    PLP
.395080	60		rts		                    RTS
.395081					FDC_Check_DRV0_BSY
.395081	08		php		                    PHP
.395082	e2 20		sep #$20	                SEP #$20        ; set A short
.395084	af f4 13 af	lda $af13f4	fdc_drv0bsy_loop    LDA SIO_FDC_MSR
.395088	89 01		bit #$01	                    BIT #FDC_MSR_DRV0BSY
.39508a	d0 f8		bne $395084	                    BNE fdc_drv0bsy_loop
.39508c	28		plp		                    PLP
.39508d	60		rts		                    RTS
.39508e					FDC_Check_CMD_BSY
.39508e	08		php		                    PHP
.39508f	e2 20		sep #$20	                SEP #$20        ; set A short
.395091	af f4 13 af	lda $af13f4	fdc_cmd_loop        LDA @l SIO_FDC_MSR
.395095	89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.395097	d0 f8		bne $395091	                    BNE fdc_cmd_loop
.395099	28		plp		                    PLP
.39509a	60		rts		                    RTS
.39509b					FDC_Can_Read_Data
.39509b	08		php		                    PHP
.39509c	e2 20		sep #$20	                SEP #$20        ; set A short
.39509e	af f4 13 af	lda $af13f4	loop                LDA @l SIO_FDC_MSR
.3950a2	29 40		and #$40	                    AND #FDC_MSR_DIO
.3950a4	c9 40		cmp #$40	                    CMP #FDC_MSR_DIO
.3950a6	d0 f6		bne $39509e	                    BNE loop
.3950a8	28		plp		                    PLP
.3950a9	60		rts		                    RTS
.3950aa					FDC_CAN_WRITE
.3950aa	08		php		                    PHP
.3950ab	e2 20		sep #$20	                SEP #$20        ; set A short
.3950ad	af f4 13 af	lda $af13f4	loop                LDA @l SIO_FDC_MSR
.3950b1	29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.3950b3	c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.3950b5	d0 f6		bne $3950ad	                    BNE loop
.3950b7	28		plp		                    PLP
.3950b8	60		rts		                    RTS
.3950b9					FDC_COMMAND
.3950b9	8b		phb		                    PHB
.3950ba	0b		phd		                    PHD
.3950bb	08		php		                    PHP
.3950bc	48		pha		                PHA             ; begin setdbr macro
.3950bd	08		php		                PHP
.3950be	e2 20		sep #$20	                SEP #$20        ; set A short
.3950c0	a9 00		lda #$00	                LDA #0
.3950c2	48		pha		                PHA
.3950c3	ab		plb		                PLB
.3950c4	28		plp		                PLP
.3950c5	68		pla		                PLA             ; end setdbr macro
.3950c6	48		pha		                PHA             ; begin setdp macro
.3950c7	08		php		                PHP
.3950c8	c2 20		rep #$20	                REP #$20        ; set A long
.3950ca	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3950cd	5b		tcd		                TCD
.3950ce	28		plp		                PLP
.3950cf	68		pla		                PLA             ; end setdp macro
.3950d0	e2 30		sep #$30	                SEP #$30        ; set A&X short
.3950d2	a2 00		ldx #$00	                    LDX #0
.3950d4	a9 00		lda #$00	                    LDA #0
.3950d6	9d 10 05	sta $0510,x	clr_results         STA FDC_RESULTS,X                       ; Clear the result buffer
.3950d9	e8		inx		                    INX
.3950da	e0 10		cpx #$10	                    CPX #16
.3950dc	d0 f8		bne $3950d6	                    BNE clr_results
.3950de	a9 03		lda #$03	                    LDA #3                                  ; Default to 3 retries
.3950e0	8d 34 05	sta $0534	                    STA FDC_CMD_RETRY
.3950e3	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Validate we can send a command
.3950e7	29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.3950e9	c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.3950eb	f0 04		beq $3950f1	                    BEQ start_send                          ; If so, start sending
.3950ed	22 a4 51 39	jsl $3951a4	fdc_reset           JSL FDC_INIT                            ; Reset the FDC
.3950f1					start_send
.3950f1	e2 10		sep #$10	                SEP #$10        ; set X short
.3950f3	a2 00		ldx #$00	                    LDX #0
.3950f5	20 74 50	jsr $395074	send_loop           JSR FDC_Check_RQM                       ; Wait until we can write
.3950f8	bd 00 05	lda $0500,x	                    LDA FDC_PARAMETERS,X                    ; Get the parameter/command byte to write
.3950fb	8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; Send it
.3950ff	e8		inx		                    INX                                     ; Advance to the next byte
.395100	ec 30 05	cpx $0530	                    CPX FDC_PARAM_NUM
.395103	d0 f0		bne $3950f5	                    BNE send_loop                           ; Keep sending until we've sent them all
.395105	ad 33 05	lda $0533	                    LDA FDC_EXPECT_DAT
.395108	f0 33		beq $39513d	                    BEQ result_phase
.39510a	20 9b 50	jsr $39509b	                    JSR FDC_Can_Read_Data
.39510d	af f4 13 af	lda $af13f4	wait_for_data_rdy   LDA @l SIO_FDC_MSR                      ; Wait for data to be ready
.395111	29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.395113	c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.395115	d0 f6		bne $39510d	                    BNE wait_for_data_rdy
.395117	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.39511b	89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.39511d	d0 03		bne $395122	                    BNE data_phase                          ; If so: transfer the data
.39511f	82 77 00	brl $395199	                    BRL error                               ; If not: it's an error
.395122					data_phase
.395122	c2 10		rep #$10	                REP #$10        ; set X long
.395124	a0 00 00	ldy #$0000	                    LDY #0
.395127	af f4 13 af	lda $af13f4	data_loop           LDA @l SIO_FDC_MSR                      ; Wait for the next byte to be ready
.39512b	29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.39512d	c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.39512f	d0 f6		bne $395127	                    BNE data_loop
.395131	af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Get the data byte
.395135	97 26		sta [$0326],y	                    STA [BIOS_BUFF_PTR],Y                   ; And save it to the buffer
.395137	c8		iny		                    INY                                     ; Move to the next position
.395138	c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.39513b	d0 ea		bne $395127	                    BNE data_loop                           ; If not at the end, keep fetching
.39513d	ad 32 05	lda $0532	result_phase        LDA FDC_RESULT_NUM                      ; If no results are expected...
.395140	f0 28		beq $39516a	                    BEQ chk_busy                                ; Then we're done
.395142	e2 10		sep #$10	                SEP #$10        ; set X short
.395144	a2 00		ldx #$00	                    LDX #0
.395146	20 9b 50	jsr $39509b	result_loop         JSR FDC_Can_Read_Data                   ; Wait until we can read
.395149	af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Yes: get the data
.39514d	20 9b 50	jsr $39509b	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.395150	af f5 13 af	lda $af13f5	read_result         LDA @l SIO_FDC_DTA                      ; Yes: get the data
.395154	9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X                       ; Save it to the result buffer
.395157	20 74 50	jsr $395074	                    JSR FDC_Check_RQM
.39515a	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.39515e	29 50		and #$50	                    AND #FDC_MSR_DIO | FDC_MSR_CMDBSY
.395160	c9 50		cmp #$50	                    CMP #FDC_MSR_DIO | FDC_MSR_CMDBSY
.395162	d0 06		bne $39516a	                    BNE chk_busy
.395164	e8		inx		                    INX                                     ; Move to the next result positions
.395165	ec 32 05	cpx $0532	                    CPX FDC_RESULT_NUM
.395168	d0 e6		bne $395150	                    BNE read_result                         ; And keep looping until we've read all
.39516a					chk_busy
.39516a	c2 10		rep #$10	                REP #$10        ; set X long
.39516c	a2 0a 00	ldx #$000a	                    LDX #10                                 ; Wait 10ms (I guess?)
.39516f	22 f3 12 39	jsl $3912f3	                    JSL ILOOP_MS
.395173	af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check the command busy bit
.395177	89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.395179	f0 0d		beq $395188	                    BEQ done                                ; If not set: we're done
.39517b	20 9b 50	jsr $39509b	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.39517e	af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Read the data
.395182	9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X
.395185	e8		inx		                    INX
.395186	80 e2		bra $39516a	                    BRA chk_busy                            ; And keep checking
.395188	64 20		stz $0320	done                STZ BIOS_STATUS
.39518a	28		plp		                    PLP
.39518b	2b		pld		                    PLD
.39518c	ab		plb		                    PLB
.39518d	38		sec		                    SEC
.39518e	6b		rtl		                    RTL
.39518f					retry
.39518f	e2 20		sep #$20	                SEP #$20        ; set A short
.395191	ce 34 05	dec $0534	                    DEC FDC_CMD_RETRY                       ; Decrement the retry counter
.395194	30 03		bmi $395199	                    BMI error                               ; If it's negative, we've failed
.395196	82 54 ff	brl $3950ed	                    BRL fdc_reset                           ; Otherwise, try to reset and try again
.395199					error
.395199	e2 20		sep #$20	                SEP #$20        ; set A short
.39519b	a9 85		lda #$85	                    LDA #BIOS_ERR_CMD
.39519d	85 20		sta $0320	                    STA BIOS_STATUS
.39519f	28		plp		                    PLP
.3951a0	2b		pld		                    PLD
.3951a1	ab		plb		                    PLB
.3951a2	18		clc		                    CLC
.3951a3	6b		rtl		                    RTL
.3951a4					FDC_Init
.3951a4	08		php		                    PHP
.3951a5	c2 10		rep #$10	                REP #$10        ; set X long
.3951a7	e2 20		sep #$20	                SEP #$20        ; set A short
.3951a9	a9 00		lda #$00	                    LDA #0
.3951ab	8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.3951af	a2 e8 03	ldx #$03e8	                    LDX #1000                   ; Wait
.3951b2	a0 00 00	ldy #$0000	                    LDY #0
.3951b5	22 00 13 39	jsl $391300	                    JSL IDELAY
.3951b9	a9 04		lda #$04	                    LDA #FDC_DOR_NRESET         ; Reset the FDC
.3951bb	8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.3951bf	ea		nop		                    NOP
.3951c0	ea		nop		                    NOP
.3951c1	ea		nop		                    NOP
.3951c2	ea		nop		                    NOP
.3951c3	a9 00		lda #$00	                    LDA #$00                    ; Make sure the Speed and Compensation has been set
.3951c5	8f f4 13 af	sta $af13f4	                    STA SIO_FDC_DSR
.3951c9	a9 00		lda #$00	                    LDA #$00                    ; Precompensation set to 0
.3951cb	8f f7 13 af	sta $af13f7	                    STA SIO_FDC_CCR
.3951cf	a2 8f c5	ldx #$c58f	                    LDX #<>FDC_SEEK_TIME
.3951d2	a0 20 00	ldy #$0020	                    LDY #`FDC_SEEK_TIME
.3951d5	22 00 13 39	jsl $391300	                    JSL IDELAY
.3951d9	22 9f 52 39	jsl $39529f	                    JSL FDC_Sense_Int_Status
.3951dd	90 21		bcc $395200	                    BCC pass_failure
.3951df	22 9f 52 39	jsl $39529f	                    JSL FDC_Sense_Int_Status
.3951e3	90 1b		bcc $395200	                    BCC pass_failure
.3951e5	22 9f 52 39	jsl $39529f	                    JSL FDC_Sense_Int_Status
.3951e9	90 15		bcc $395200	                    BCC pass_failure
.3951eb	22 9f 52 39	jsl $39529f	                    JSL FDC_Sense_Int_Status
.3951ef	90 0f		bcc $395200	                    BCC pass_failure
.3951f1	22 20 53 39	jsl $395320	                    JSL FDC_Configure_Command
.3951f5	90 09		bcc $395200	                    BCC pass_failure
.3951f7	22 e4 52 39	jsl $3952e4	                    JSL FDC_Specify_Command
.3951fb	90 03		bcc $395200	                    BCC pass_failure
.3951fd	28		plp		                    PLP
.3951fe	38		sec		                    SEC
.3951ff	6b		rtl		                    RTL
.395200	28		plp		pass_failure        PLP
.395201	18		clc		                    CLC
.395202	6b		rtl		                    RTL
.395203					FDC_MOTOR_NEEDED
.395203	08		php		                    PHP
.395204	c2 20		rep #$20	                REP #$20        ; set A long
.395206	78		sei		                    SEI                         ; Turn off interrupts
.395207	a9 08 07	lda #$0708	                    LDA #FDC_MOTOR_ON_TIME      ; Reset the FDC timeout clock
.39520a	8f 45 e0 37	sta $37e045	                    STA @l FDC_MOTOR_TIMER
.39520e	e2 20		sep #$20	                SEP #$20        ; set A short
.395210	af 4c 01 00	lda $00014c	                    LDA @lINT_MASK_REG0
.395214	29 fe		and #$fe	                    AND #~FNX0_INT00_SOF        ; Enable the SOF interrupt
.395216	8f 4c 01 00	sta $00014c	                    STA @lINT_MASK_REG0
.39521a	28		plp		                    PLP
.39521b	6b		rtl		                    RTL
.39521c					FDC_Motor_On
.39521c	08		php		                    PHP
.39521d	22 03 52 39	jsl $395203	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.395221	e2 20		sep #$20	                SEP #$20        ; set A short
.395223	af f2 13 af	lda $af13f2	                    LDA @l SIO_FDC_DOR          ; Check to see if the motor is already on
.395227	89 10		bit #$10	                    BIT #FDC_DOR_MOT0
.395229	d0 13		bne $39523e	                    BNE done                    ; If so: skip
.39522b	a9 14		lda #$14	                    LDA #FDC_DOR_MOT0 | FDC_DOR_NRESET
.39522d	8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.395231	20 74 50	jsr $395074	                    JSR FDC_Check_RQM           ; Make sure we can leave knowing that everything set properly
.395234	a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.395237	a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.39523a	22 00 13 39	jsl $391300	                    JSL IDELAY
.39523e	28		plp		done                PLP
.39523f	6b		rtl		                    RTL
.395240					FDC_Motor_Off
.395240	08		php		                    PHP
.395241	e2 20		sep #$20	                SEP #$20        ; set A short
.395243	20 81 50	jsr $395081	                    JSR FDC_Check_DRV0_BSY      ; Make sure the drive is not seeking
.395246	20 74 50	jsr $395074	                    JSR FDC_Check_RQM           ; Check if I can transfer data
.395249	a9 04		lda #$04	                    LDA #FDC_DOR_NRESET
.39524b	8f f2 13 af	sta $af13f2	                    STA SIO_FDC_DOR
.39524f	20 74 50	jsr $395074	                    JSR FDC_Check_RQM           ; Make sure we can leave knowing that everything set properly
.395252	c2 20		rep #$20	                REP #$20        ; set A long
.395254	78		sei		                    SEI                         ; Turn off interrupts
.395255	a9 00 00	lda #$0000	                    LDA #0                      ; Set FDC motor timeout counter to 0 to disable it
.395258	8f 45 e0 37	sta $37e045	                    STA @l FDC_MOTOR_TIMER
.39525c	e2 20		sep #$20	                SEP #$20        ; set A short
.39525e	af 4c 01 00	lda $00014c	                    LDA @lINT_MASK_REG0
.395262	09 01		ora #$01	                    ORA #FNX0_INT00_SOF         ; Disable the SOF interrupt
.395264	8f 4c 01 00	sta $00014c	                    STA @lINT_MASK_REG0
.395268	28		plp		                    PLP
.395269	6b		rtl		                    RTL
.39526a					FDC_Recalibrate_Command
.39526a	0b		phd		                    PHD
.39526b	08		php		                    PHP
.39526c	48		pha		                PHA             ; begin setdp macro
.39526d	08		php		                PHP
.39526e	c2 20		rep #$20	                REP #$20        ; set A long
.395270	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395273	5b		tcd		                TCD
.395274	28		plp		                PLP
.395275	68		pla		                PLA             ; end setdp macro
.395276	22 03 52 39	jsl $395203	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.39527a	e2 20		sep #$20	                SEP #$20        ; set A short
.39527c	a9 07		lda #$07	                    LDA #FDC_CMD_RECALIBRATE    ; RECALIBRATE Command
.39527e	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.395281	a5 00		lda $0300	                    LDA FDC_DRIVE
.395283	8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.395286	a9 02		lda #$02	                    LDA #2
.395288	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM           ; 2 parameters
.39528b	9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT          ; 0 data
.39528e	9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM          ; 0 results
.395291	22 b9 50 39	jsl $3950b9	                    JSL FDC_COMMAND             ; Issue the command
.395295	90 04		bcc $39529b	                    BCC pass_failure            ; If failure, pass the failure up
.395297	28		plp		                    PLP
.395298	2b		pld		                    PLD
.395299	38		sec		                    SEC
.39529a	6b		rtl		                    RTL
.39529b	28		plp		pass_failure        PLP
.39529c	2b		pld		                    PLD
.39529d	18		clc		                    CLC
.39529e	6b		rtl		                    RTL
.39529f					FDC_Sense_Int_Status
.39529f	8b		phb		                    PHB
.3952a0	0b		phd		                    PHD
.3952a1	08		php		                    PHP
.3952a2	48		pha		                PHA             ; begin setdbr macro
.3952a3	08		php		                PHP
.3952a4	e2 20		sep #$20	                SEP #$20        ; set A short
.3952a6	a9 00		lda #$00	                LDA #0
.3952a8	48		pha		                PHA
.3952a9	ab		plb		                PLB
.3952aa	28		plp		                PLP
.3952ab	68		pla		                PLA             ; end setdbr macro
.3952ac	48		pha		                PHA             ; begin setdp macro
.3952ad	08		php		                PHP
.3952ae	c2 20		rep #$20	                REP #$20        ; set A long
.3952b0	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3952b3	5b		tcd		                TCD
.3952b4	28		plp		                PLP
.3952b5	68		pla		                PLA             ; end setdp macro
.3952b6	e2 20		sep #$20	                SEP #$20        ; set A short
.3952b8	64 06		stz $0306	                    STZ FDC_ST0                         ; Clear ST0
.3952ba	a9 ff		lda #$ff	                    LDA #$FF
.3952bc	85 0a		sta $030a	                    STA FDC_PCN                         ; Set PCN to some obviously bad value
.3952be	20 8e 50	jsr $39508e	                    JSR FDC_Check_CMD_BSY               ; Check I can send a command
.3952c1	20 74 50	jsr $395074	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.3952c4	a9 08		lda #$08	                    LDA #FDC_CMD_SENSE_INTERRUPT
.3952c6	8f f5 13 af	sta $af13f5	                    STA SIO_FDC_DTA
.3952ca	20 9b 50	jsr $39509b	                    JSR FDC_Can_Read_Data
.3952cd	20 74 50	jsr $395074	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.3952d0	af f5 13 af	lda $af13f5	                    LDA SIO_FDC_DTA
.3952d4	85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.3952d6	20 74 50	jsr $395074	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.3952d9	af f5 13 af	lda $af13f5	                    LDA SIO_FDC_DTA
.3952dd	85 0a		sta $030a	                    STA FDC_PCN                         ; --- Cylinder ---
.3952df	28		plp		                    PLP
.3952e0	2b		pld		                    PLD
.3952e1	ab		plb		                    PLB
.3952e2	38		sec		                    SEC
.3952e3	6b		rtl		                    RTL
.3952e4					FDC_Specify_Command
.3952e4	8b		phb		                    PHB
.3952e5	0b		phd		                    PHD
.3952e6	08		php		                    PHP
.3952e7	48		pha		                PHA             ; begin setdbr macro
.3952e8	08		php		                PHP
.3952e9	e2 20		sep #$20	                SEP #$20        ; set A short
.3952eb	a9 00		lda #$00	                LDA #0
.3952ed	48		pha		                PHA
.3952ee	ab		plb		                PLB
.3952ef	28		plp		                PLP
.3952f0	68		pla		                PLA             ; end setdbr macro
.3952f1	48		pha		                PHA             ; begin setdp macro
.3952f2	08		php		                PHP
.3952f3	c2 20		rep #$20	                REP #$20        ; set A long
.3952f5	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3952f8	5b		tcd		                TCD
.3952f9	28		plp		                PLP
.3952fa	68		pla		                PLA             ; end setdp macro
.3952fb	e2 20		sep #$20	                SEP #$20        ; set A short
.3952fd	20 8e 50	jsr $39508e	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.395300	20 74 50	jsr $395074	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.395303	a9 03		lda #$03	                    LDA #FDC_CMD_SPECIFY    ; Specify Command
.395305	8f f5 13 af	sta $af13f5	                    STA SIO_FDC_DTA
.395309	20 74 50	jsr $395074	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.39530c	a9 cf		lda #$cf	                    LDA #$CF
.39530e	8f f5 13 af	sta $af13f5	                    STA SIO_FDC_DTA
.395312	20 74 50	jsr $395074	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.395315	a9 01		lda #$01	                    LDA #$01                ; 1 = Non-DMA
.395317	8f f5 13 af	sta $af13f5	                    STA SIO_FDC_DTA
.39531b	28		plp		                    PLP
.39531c	2b		pld		                    PLD
.39531d	ab		plb		                    PLB
.39531e	38		sec		                    SEC
.39531f	6b		rtl		                    RTL
.395320					FDC_Configure_Command
.395320	8b		phb		                    PHB
.395321	0b		phd		                    PHD
.395322	08		php		                    PHP
.395323	48		pha		                PHA             ; begin setdbr macro
.395324	08		php		                PHP
.395325	e2 20		sep #$20	                SEP #$20        ; set A short
.395327	a9 00		lda #$00	                LDA #0
.395329	48		pha		                PHA
.39532a	ab		plb		                PLB
.39532b	28		plp		                PLP
.39532c	68		pla		                PLA             ; end setdbr macro
.39532d	48		pha		                PHA             ; begin setdp macro
.39532e	08		php		                PHP
.39532f	c2 20		rep #$20	                REP #$20        ; set A long
.395331	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395334	5b		tcd		                TCD
.395335	28		plp		                PLP
.395336	68		pla		                PLA             ; end setdp macro
.395337	e2 20		sep #$20	                SEP #$20        ; set A short
.395339	20 8e 50	jsr $39508e	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.39533c	20 74 50	jsr $395074	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.39533f	a9 13		lda #$13	                    LDA #FDC_CMD_CONFIGURE  ; Specify Command
.395341	8f f5 13 af	sta $af13f5	                    STA SIO_FDC_DTA
.395345	20 74 50	jsr $395074	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.395348	a9 00		lda #$00	                    LDA #$00
.39534a	8f f5 13 af	sta $af13f5	                    STA SIO_FDC_DTA
.39534e	20 74 50	jsr $395074	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.395351	a9 08		lda #$08	                    LDA #$08                ; FIFOTHR = 8 byte
.395353	8f f5 13 af	sta $af13f5	                    STA SIO_FDC_DTA
.395357	20 74 50	jsr $395074	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.39535a	a9 00		lda #$00	                    LDA #$00
.39535c	8f f5 13 af	sta $af13f5	                    STA SIO_FDC_DTA
.395360	20 8e 50	jsr $39508e	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.395363	28		plp		                    PLP
.395364	2b		pld		                    PLD
.395365	ab		plb		                    PLB
.395366	38		sec		                    SEC
.395367	6b		rtl		                    RTL
.395368					FDC_Read_ID_Command
.395368	8b		phb		                    PHB
.395369	0b		phd		                    PHD
.39536a	08		php		                    PHP
.39536b	48		pha		                PHA             ; begin setdbr macro
.39536c	08		php		                PHP
.39536d	e2 20		sep #$20	                SEP #$20        ; set A short
.39536f	a9 00		lda #$00	                LDA #0
.395371	48		pha		                PHA
.395372	ab		plb		                PLB
.395373	28		plp		                PLP
.395374	68		pla		                PLA             ; end setdbr macro
.395375	48		pha		                PHA             ; begin setdp macro
.395376	08		php		                PHP
.395377	c2 20		rep #$20	                REP #$20        ; set A long
.395379	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39537c	5b		tcd		                TCD
.39537d	28		plp		                PLP
.39537e	68		pla		                PLA             ; end setdp macro
.39537f	e2 20		sep #$20	                SEP #$20        ; set A short
.395381	a9 0a		lda #$0a	                    LDA #FDC_CMD_READ_ID                ; READID Command
.395383	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.395386	a9 01		lda #$01	                    LDA #1
.395388	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.39538b	9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.39538e	a9 07		lda #$07	                    LDA #7
.395390	8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.395393	22 b9 50 39	jsl $3950b9	                    JSL FDC_COMMAND                     ; Issue the command
.395397	90 27		bcc $3953c0	                    BCC pass_failure
.395399	ad 10 05	lda $0510	                    LDA FDC_RESULTS
.39539c	85 06		sta $0306	                    STA FDC_ST0                         ; Get ST0
.39539e	ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.3953a1	85 07		sta $0307	                    STA FDC_ST1                         ; Get ST1
.3953a3	ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.3953a6	85 08		sta $0308	                    STA FDC_ST2                         ; Get ST2
.3953a8	ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.3953ab	85 02		sta $0302	                    STA FDC_CYLINDER                    ; Get the cylinder
.3953ad	ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.3953b0	85 01		sta $0301	                    STA FDC_HEAD                        ; Get the head
.3953b2	ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.3953b5	85 03		sta $0303	                    STA FDC_SECTOR                      ; Get the sector
.3953b7	ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.3953ba	85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; Get the sector size code
.3953bc	28		plp		                    PLP
.3953bd	2b		pld		                    PLD
.3953be	ab		plb		                    PLB
.3953bf	6b		rtl		                    RTL
.3953c0	28		plp		pass_failure        PLP
.3953c1	2b		pld		                    PLD
.3953c2	ab		plb		                    PLB
.3953c3	18		clc		                    CLC
.3953c4	6b		rtl		                    RTL
.3953c5					FDC_DumpReg_Command
.3953c5	0b		phd		                    PHD
.3953c6	08		php		                    PHP
.3953c7	e2 20		sep #$20	                SEP #$20        ; set A short
.3953c9	a9 0e		lda #$0e	                    LDA #FDC_CMD_DUMPREG                ; DUMPREG Command
.3953cb	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.3953ce	a9 01		lda #$01	                    LDA #1
.3953d0	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.3953d3	9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.3953d6	a9 0a		lda #$0a	                    LDA #10
.3953d8	8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 10 results
.3953db	22 b9 50 39	jsl $3950b9	                    JSL FDC_COMMAND                     ; Issue the command
.3953df	90 03		bcc $3953e4	                    BCC pass_failure
.3953e1	28		plp		                    PLP
.3953e2	2b		pld		                    PLD
.3953e3	6b		rtl		                    RTL
.3953e4	28		plp		pass_failure        PLP
.3953e5	2b		pld		                    PLD
.3953e6	18		clc		                    CLC
.3953e7	6b		rtl		                    RTL
.3953e8					FDC_Seek_Track
.3953e8	8b		phb		                    PHB
.3953e9	0b		phd		                    PHD
.3953ea	08		php		                    PHP
.3953eb	48		pha		                PHA             ; begin setdbr macro
.3953ec	08		php		                PHP
.3953ed	e2 20		sep #$20	                SEP #$20        ; set A short
.3953ef	a9 00		lda #$00	                LDA #0
.3953f1	48		pha		                PHA
.3953f2	ab		plb		                PLB
.3953f3	28		plp		                PLP
.3953f4	68		pla		                PLA             ; end setdbr macro
.3953f5	48		pha		                PHA             ; begin setdp macro
.3953f6	08		php		                PHP
.3953f7	c2 20		rep #$20	                REP #$20        ; set A long
.3953f9	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3953fc	5b		tcd		                TCD
.3953fd	28		plp		                PLP
.3953fe	68		pla		                PLA             ; end setdp macro
.3953ff	22 03 52 39	jsl $395203	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.395403	e2 20		sep #$20	                SEP #$20        ; set A short
.395405	a9 0f		lda #$0f	                    LDA #FDC_CMD_SEEK                   ; Seek Command
.395407	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.39540a	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.39540c	29 01		and #$01	                    AND #$01
.39540e	0a		asl a		                    ASL A
.39540f	0a		asl a		                    ASL A
.395410	05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.395412	8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.395415	a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; And the track
.395417	8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.39541a	a9 03		lda #$03	                    LDA #3
.39541c	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 3 parameter (the command)
.39541f	9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.395422	9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM                  ; 0 results
.395425	22 b9 50 39	jsl $3950b9	                    JSL FDC_COMMAND                     ; Issue the command
.395429	90 05		bcc $395430	                    BCC pass_failure
.39542b	28		plp		                    PLP
.39542c	2b		pld		                    PLD
.39542d	ab		plb		                    PLB
.39542e	38		sec		                    SEC
.39542f	6b		rtl		                    RTL
.395430	28		plp		pass_failure        PLP
.395431	2b		pld		                    PLD
.395432	ab		plb		                    PLB
.395433	18		clc		                    CLC
.395434	6b		rtl		                    RTL
.395435					FDC_Read_Sector
.395435	8b		phb		                    PHB
.395436	0b		phd		                    PHD
.395437	08		php		                    PHP
.395438	48		pha		                PHA             ; begin setdbr macro
.395439	08		php		                PHP
.39543a	e2 20		sep #$20	                SEP #$20        ; set A short
.39543c	a9 00		lda #$00	                LDA #0
.39543e	48		pha		                PHA
.39543f	ab		plb		                PLB
.395440	28		plp		                PLP
.395441	68		pla		                PLA             ; end setdbr macro
.395442	48		pha		                PHA             ; begin setdp macro
.395443	08		php		                PHP
.395444	c2 20		rep #$20	                REP #$20        ; set A long
.395446	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395449	5b		tcd		                TCD
.39544a	28		plp		                PLP
.39544b	68		pla		                PLA             ; end setdp macro
.39544c	22 03 52 39	jsl $395203	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.395450	e2 20		sep #$20	                SEP #$20        ; set A short
.395452	a9 06		lda #$06	                    LDA #FDC_CMD_READ_DATA              ; The READ_DATA command
.395454	09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.395456	8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.395459	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.39545b	29 01		and #$01	                    AND #$01
.39545d	0a		asl a		                    ASL A
.39545e	0a		asl a		                    ASL A
.39545f	05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.395461	8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.395464	a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.395466	8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.395469	a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.39546b	8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.39546e	a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.395470	8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.395473	a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.395475	8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.395478	a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.39547a	8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.39547d	a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.39547f	8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.395482	a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.395484	8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.395487	a9 09		lda #$09	                    LDA #9
.395489	8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.39548c	a9 01		lda #$01	                    LDA #1
.39548e	8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect data
.395491	a9 07		lda #$07	                    LDA #7
.395493	8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.395496	22 b9 50 39	jsl $3950b9	command             JSL FDC_COMMAND                     ; Issue the command
.39549a	08		php		                    PHP
.39549b	ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.39549e	85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ----
.3954a0	ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.3954a3	85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ----
.3954a5	ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.3954a8	85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ----
.3954aa	ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.3954ad	85 02		sta $0302	                    STA FDC_CYLINDER                    ; -- C ---
.3954af	ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.3954b2	85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.3954b4	ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.3954b7	85 03		sta $0303	                    STA FDC_SECTOR                      ; --- R ---
.3954b9	ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.3954bc	85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.3954be	28		plp		                    PLP
.3954bf	90 04		bcc $3954c5	                    BCC pass_failure
.3954c1	28		plp		done                PLP
.3954c2	2b		pld		                    PLD
.3954c3	ab		plb		                    PLB
.3954c4	6b		rtl		                    RTL
.3954c5	28		plp		pass_failure        PLP
.3954c6	2b		pld		                    PLD
.3954c7	ab		plb		                    PLB
.3954c8	18		clc		                    CLC
.3954c9	6b		rtl		                    RTL
.3954ca					DIVIDE32
.3954ca	da		phx		                    PHX
.3954cb	5a		phy		                    PHY
.3954cc	0b		phd		                    PHD
.3954cd	08		php		                    PHP
.3954ce	48		pha		                PHA             ; begin setdp macro
.3954cf	08		php		                PHP
.3954d0	c2 20		rep #$20	                REP #$20        ; set A long
.3954d2	a9 0c 03	lda #$030c	                LDA #DIVIDEND         ; set DP to page 0
.3954d5	5b		tcd		                TCD
.3954d6	28		plp		                PLP
.3954d7	68		pla		                PLA             ; end setdp macro
.3954d8	c2 30		rep #$30	                REP #$30        ; set A&X long
.3954da	64 08		stz $0314	                    STZ REMAINDER           ; Initialize the remainder
.3954dc	64 0a		stz $0316	                    STZ REMAINDER+2
.3954de	a2 20 00	ldx #$0020	                    LDX #32                 ; Set the number of bits to process
.3954e1	06 00		asl $030c	loop                ASL DIVIDEND
.3954e3	26 02		rol $030e	                    ROL DIVIDEND+2
.3954e5	26 08		rol $0314	                    ROL REMAINDER
.3954e7	26 0a		rol $0316	                    ROL REMAINDER+2
.3954e9	a5 08		lda $0314	                    LDA REMAINDER
.3954eb	38		sec		                    SEC
.3954ec	e5 04		sbc $0310	                    SBC DIVISOR
.3954ee	a8		tay		                    TAY
.3954ef	a5 0a		lda $0316	                    LDA REMAINDER+2
.3954f1	e5 06		sbc $0312	                    SBC DIVISOR+2
.3954f3	90 06		bcc $3954fb	                    BCC skip
.3954f5	85 0a		sta $0316	                    STA REMAINDER+2
.3954f7	84 08		sty $0314	                    STY REMAINDER
.3954f9	e6 00		inc $030c	                    INC DIVIDEND
.3954fb	ca		dex		skip                DEX
.3954fc	d0 e3		bne $3954e1	                    BNE loop
.3954fe	28		plp		                    PLP
.3954ff	2b		pld		                    PLD
.395500	7a		ply		                    PLY
.395501	fa		plx		                    PLX
.395502	60		rts		                    RTS
.395503					LBA2CHS
.395503	8b		phb		                    PHB
.395504	0b		phd		                    PHD
.395505	08		php		                    PHP
.395506	48		pha		                PHA             ; begin setdbr macro
.395507	08		php		                PHP
.395508	e2 20		sep #$20	                SEP #$20        ; set A short
.39550a	a9 00		lda #$00	                LDA #0
.39550c	48		pha		                PHA
.39550d	ab		plb		                PLB
.39550e	28		plp		                PLP
.39550f	68		pla		                PLA             ; end setdbr macro
.395510	48		pha		                PHA             ; begin setdp macro
.395511	08		php		                PHP
.395512	c2 20		rep #$20	                REP #$20        ; set A long
.395514	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395517	5b		tcd		                TCD
.395518	28		plp		                PLP
.395519	68		pla		                PLA             ; end setdp macro
.39551a	c2 30		rep #$30	                REP #$30        ; set A&X long
.39551c	a5 22		lda $0322	                    LDA BIOS_LBA
.39551e	8d 0c 03	sta $030c	                    STA @w DIVIDEND
.395521	a5 24		lda $0324	                    LDA BIOS_LBA+2
.395523	8d 0e 03	sta $030e	                    STA @w DIVIDEND+2
.395526	a9 24 00	lda #$0024	                    LDA #36
.395529	8d 10 03	sta $0310	                    STA @w DIVISOR
.39552c	9c 12 03	stz $0312	                    STZ @w DIVISOR+2
.39552f	20 ca 54	jsr $3954ca	                    JSR DIVIDE32
.395532	e2 20		sep #$20	                SEP #$20        ; set A short
.395534	a5 0c		lda $030c	                    LDA DIVIDEND
.395536	85 02		sta $0302	                    STA FDC_CYLINDER
.395538	c2 20		rep #$20	                REP #$20        ; set A long
.39553a	ad 14 03	lda $0314	                    LDA @w REMAINDER
.39553d	8d 0c 03	sta $030c	                    STA @w DIVIDEND
.395540	ad 16 03	lda $0316	                    LDA @w REMAINDER+2
.395543	8d 0e 03	sta $030e	                    STA @w DIVIDEND+2
.395546	a9 12 00	lda #$0012	                    LDA #18
.395549	8d 10 03	sta $0310	                    STA @w DIVISOR
.39554c	9c 12 03	stz $0312	                    STZ @w DIVISOR+2
.39554f	20 ca 54	jsr $3954ca	                    JSR DIVIDE32
.395552	e2 20		sep #$20	                SEP #$20        ; set A short
.395554	ad 0c 03	lda $030c	                    LDA @w DIVIDEND
.395557	29 01		and #$01	                    AND #$01
.395559	85 01		sta $0301	                    STA FDC_HEAD
.39555b	ad 14 03	lda $0314	                    LDA @w REMAINDER
.39555e	1a		inc a		                    INC A
.39555f	85 03		sta $0303	                    STA FDC_SECTOR
.395561	28		plp		                    PLP
.395562	2b		pld		                    PLD
.395563	ab		plb		                    PLB
.395564	6b		rtl		                    RTL
.395565					FDC_GETBLOCK
.395565	8b		phb		                    PHB
.395566	0b		phd		                    PHD
.395567	08		php		                    PHP
.395568	48		pha		                PHA             ; begin setdbr macro
.395569	08		php		                PHP
.39556a	e2 20		sep #$20	                SEP #$20        ; set A short
.39556c	a9 00		lda #$00	                LDA #0
.39556e	48		pha		                PHA
.39556f	ab		plb		                PLB
.395570	28		plp		                PLP
.395571	68		pla		                PLA             ; end setdbr macro
.395572	48		pha		                PHA             ; begin setdp macro
.395573	08		php		                PHP
.395574	c2 20		rep #$20	                REP #$20        ; set A long
.395576	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395579	5b		tcd		                TCD
.39557a	28		plp		                PLP
.39557b	68		pla		                PLA             ; end setdp macro
.39557c	c2 30		rep #$30	                REP #$30        ; set A&X long
.39557e	22 03 55 39	jsl $395503	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.395582	22 e8 53 39	jsl $3953e8	seek                JSL FDC_Seek_Track          ; Try to move to that track
.395586	90 3f		bcc $3955c7	                    BCC pass_failure
.395588	a2 8f c5	ldx #$c58f	                    LDX #<>FDC_SEEK_TIME
.39558b	a0 20 00	ldy #$0020	                    LDY #`FDC_SEEK_TIME
.39558e	22 00 13 39	jsl $391300	                    JSL IDELAY
.395592	22 9f 52 39	jsl $39529f	                    JSL FDC_Sense_Int_Status
.395596	90 2f		bcc $3955c7	                    BCC pass_failure
.395598	e2 20		sep #$20	                SEP #$20        ; set A short
.39559a	a5 06		lda $0306	                    LDA FDC_ST0
.39559c	29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.39559e	d0 20		bne $3955c0	                    BNE seek_failure            ; If anything set: fail
.3955a0	22 35 54 39	jsl $395435	                    JSL FDC_Read_Sector         ; Read the sector
.3955a4	90 21		bcc $3955c7	                    BCC pass_failure
.3955a6	e2 20		sep #$20	                SEP #$20        ; set A short
.3955a8	a5 06		lda $0306	                    LDA FDC_ST0
.3955aa	29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.3955ac	d0 0c		bne $3955ba	                    BNE read_failure
.3955ae					ret_success
.3955ae	e2 20		sep #$20	                SEP #$20        ; set A short
.3955b0	a9 00		lda #$00	                    LDA #0
.3955b2	8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.3955b5	28		plp		                    PLP
.3955b6	2b		pld		                    PLD
.3955b7	ab		plb		                    PLB
.3955b8	38		sec		                    SEC
.3955b9	6b		rtl		                    RTL
.3955ba					read_failure
.3955ba	e2 20		sep #$20	                SEP #$20        ; set A short
.3955bc	a9 82		lda #$82	                    LDA #BIOS_ERR_READ
.3955be	80 04		bra $3955c4	                    BRA ret_failure
.3955c0					seek_failure
.3955c0	e2 20		sep #$20	                SEP #$20        ; set A short
.3955c2	a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.3955c4	8d 20 03	sta $0320	ret_failure         STA @w BIOS_STATUS
.3955c7	28		plp		pass_failure        PLP
.3955c8	2b		pld		                    PLD
.3955c9	ab		plb		                    PLB
.3955ca	18		clc		                    CLC
.3955cb	6b		rtl		                    RTL
.3955cc					FDC_MOUNT
.3955cc	8b		phb		                    PHB
.3955cd	0b		phd		                    PHD
.3955ce	08		php		                    PHP
.3955cf	48		pha		                PHA             ; begin setdbr macro
.3955d0	08		php		                PHP
.3955d1	e2 20		sep #$20	                SEP #$20        ; set A short
.3955d3	a9 00		lda #$00	                LDA #0
.3955d5	48		pha		                PHA
.3955d6	ab		plb		                PLB
.3955d7	28		plp		                PLP
.3955d8	68		pla		                PLA             ; end setdbr macro
.3955d9	48		pha		                PHA             ; begin setdp macro
.3955da	08		php		                PHP
.3955db	c2 20		rep #$20	                REP #$20        ; set A long
.3955dd	a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3955e0	5b		tcd		                TCD
.3955e1	28		plp		                PLP
.3955e2	68		pla		                PLA             ; end setdp macro
.3955e3	e2 20		sep #$20	                SEP #$20        ; set A short
.3955e5	c2 10		rep #$10	                REP #$10        ; set X long
.3955e7	a9 00		lda #$00	                    LDA #0
.3955e9	a2 00 00	ldx #$0000	                    LDX #0
.3955ec	9f 00 e3 37	sta $37e300,x	zero_loop           STA DOS_SECTOR,X
.3955f0	e8		inx		                    INX
.3955f1	e0 00 02	cpx #$0200	                    CPX #512
.3955f4	d0 f6		bne $3955ec	                    BNE zero_loop
.3955f6	a9 00		lda #$00	                    LDA #0                                  ; We only support drive 0
.3955f8	85 00		sta $0300	                    STA FDC_DRIVE
.3955fa	22 1c 52 39	jsl $39521c	                    JSL FDC_Motor_On                        ; Turn the motor on
.3955fe	c2 30		rep #$30	                REP #$30        ; set A&X long
.395600	a9 00 00	lda #$0000	                    LDA #0                                  ; We want sector 0
.395603	85 22		sta $0322	                    STA BIOS_LBA
.395605	85 24		sta $0324	                    STA BIOS_LBA+2
.395607	a9 00 e3	lda #$e300	                    LDA #<>DOS_SECTOR                       ; And load it into DOS_SECTOR
.39560a	85 26		sta $0326	                    STA BIOS_BUFF_PTR
.39560c	a9 37 00	lda #$0037	                    LDA #`DOS_SECTOR
.39560f	85 28		sta $0328	                    STA BIOS_BUFF_PTR+2
.395611	22 65 55 39	jsl $395565	                    JSL FDC_GETBLOCK                        ; Attempt to read the data
.395615	b0 03		bcs $39561a	                    BCS parse_boot                          ; If ok: start parsing the boot record
.395617	82 cc 00	brl $3956e6	                    BRL pass_failure                        ; Pass the error up the chain
.39561a					parse_boot
.39561a	e2 20		sep #$20	                SEP #$20        ; set A short
.39561c	a9 00		lda #$00	                    LDA #PART_TYPE_FAT12                    ; Set the file system to FAT12
.39561e	8f 01 e0 37	sta $37e001	                    STA @l FILE_SYSTEM
.395622	a9 00		lda #$00	                    LDA #0                                  ; There are no partitions on the disk
.395624	8f 02 e0 37	sta $37e002	                    STA @l PARTITION
.395628	e2 20		sep #$20	                SEP #$20        ; set A short
.39562a	af 0d e3 37	lda $37e30d	                    LDA DOS_SECTOR+BPB_SECPERCLUS_OFF       ; Get the # of sectors per cluster (usually 1)
.39562e	8f 03 e0 37	sta $37e003	                    STA @l SECTORS_PER_CLUSTER
.395632	c2 20		rep #$20	                REP #$20        ; set A long
.395634	a9 00 00	lda #$0000	                    LDA #0                                  ; First sector of the "partition" is 0
.395637	8f 04 e0 37	sta $37e004	                    STA @l FIRSTSECTOR
.39563b	8f 06 e0 37	sta $37e006	                    STA @l FIRSTSECTOR+2
.39563f	af 16 e3 37	lda $37e316	                    LDA DOS_SECTOR+BPB_SECPERFAT_OFF        ; Get the number of sectors per FAT
.395643	8f 10 e0 37	sta $37e010	                    STA @l SEC_PER_FAT
.395647	a9 00 00	lda #$0000	                    LDA #0
.39564a	8f 12 e0 37	sta $37e012	                    STA @l SEC_PER_FAT+2
.39564e	a9 01 00	lda #$0001	                    LDA #1                                  ; FAT#1 begins at sector 1
.395651	8f 14 e0 37	sta $37e014	                    STA @l FAT_BEGIN_LBA
.395655	18		clc		                    CLC
.395656	6f 10 e0 37	adc $37e010	                    ADC @l SEC_PER_FAT
.39565a	8f 18 e0 37	sta $37e018	                    STA @l FAT2_BEGIN_LBA                   ; FAT#2 begins SEC_PER_FAT sectors later
.39565e	a9 00 00	lda #$0000	                    LDA #0
.395661	8f 16 e0 37	sta $37e016	                    STA @l FAT_BEGIN_LBA+2
.395665	8f 1a e0 37	sta $37e01a	                    STA @L FAT2_BEGIN_LBA+2
.395669	18		clc		                    CLC                                     ; Calculate the root directory's starting sector
.39566a	af 18 e0 37	lda $37e018	                    LDA @l FAT2_BEGIN_LBA
.39566e	6f 10 e0 37	adc $37e010	                    ADC @l SEC_PER_FAT
.395672	8f 20 e0 37	sta $37e020	                    STA @l ROOT_DIR_FIRST_CLUSTER           ; ROOT_DIR_FIRST_CLUSTER will be a sector LBA for FAT12!
.395676	a9 00 00	lda #$0000	                    LDA #0
.395679	8f 22 e0 37	sta $37e022	                    STA @l ROOT_DIR_FIRST_CLUSTER+2
.39567d	af 11 e3 37	lda $37e311	                    LDA DOS_SECTOR+BPB_ROOT_MAX_ENTRY_OFF   ; Get the maximum number of directory entries for the root dir
.395681	8f 24 e0 37	sta $37e024	                    STA @l ROOT_DIR_MAX_ENTRY
.395685	4a		lsr a		                    LSR A                                   ; 16 entries per sector
.395686	4a		lsr a		                    LSR A
.395687	4a		lsr a		                    LSR A
.395688	4a		lsr a		                    LSR A                                   ; So now A is the number of sectors in the root directory
.395689	18		clc		                    CLC
.39568a	6f 20 e0 37	adc $37e020	                    ADC @L ROOT_DIR_FIRST_CLUSTER           ; Add that to the first sector LBA for the root directory
.39568e	8f 1c e0 37	sta $37e01c	                    STA @l CLUSTER_BEGIN_LBA                ; And that is the LBA for the first cluster
.395692	a9 00 00	lda #$0000	                    LDA #0
.395695	8f 1e e0 37	sta $37e01e	                    STA @l CLUSTER_BEGIN_LBA+2
.395699	af 13 e3 37	lda $37e313	                    LDA DOS_SECTOR+BPB_TOTAL_SECTORS        ; Set the sector limit
.39569d	8f 08 e0 37	sta $37e008	                    STA @l SECTORCOUNT
.3956a1	a9 00 00	lda #$0000	                    LDA #0
.3956a4	8f 0a e0 37	sta $37e00a	                    STA @l SECTORCOUNT+2
.3956a8	af 0e e3 37	lda $37e30e	                    LDA DOS_SECTOR+BPB_RSRVCLUS_OFF         ; Get the number of reserved clusters
.3956ac	8f 0c e0 37	sta $37e00c	                    STA @l NUM_RSRV_SEC
.3956b0	e2 20		sep #$20	                SEP #$20        ; set A short
.3956b2	af 26 e3 37	lda $37e326	                    LDA DOS_SECTOR+BPB_SIGNATUREB           ; Is signature B $29?
.3956b6	c9 29		cmp #$29	                    CMP #BPB_EXTENDED_RECORD
.3956b8	d0 14		bne $3956ce	                    BNE no_volume_id                        ; No: there is no volume ID
.3956ba					is_extended
.3956ba	c2 20		rep #$20	                REP #$20        ; set A long
.3956bc	af 27 e3 37	lda $37e327	                    LDA DOS_SECTOR+BPB_VOLUMEID             ; Yes: set the volume ID
.3956c0	8f 26 e0 37	sta $37e026	                    STA @l VOLUME_ID
.3956c4	af 29 e3 37	lda $37e329	                    LDA DOS_SECTOR+BPB_VOLUMEID+2
.3956c8	8f 28 e0 37	sta $37e028	                    STA @l VOLUME_ID+2
.3956cc	80 0d		bra $3956db	                    BRA ret_success
.3956ce					no_volume_id
.3956ce	c2 20		rep #$20	                REP #$20        ; set A long
.3956d0	a9 00 00	lda #$0000	                    LDA #0                                  ; No: blank the Volume ID
.3956d3	8f 26 e0 37	sta $37e026	                    STA @l VOLUME_ID
.3956d7	8f 28 e0 37	sta $37e028	                    STA @L VOLUME_ID+2
.3956db					ret_success
.3956db	e2 20		sep #$20	                SEP #$20        ; set A short
.3956dd	a9 00		lda #$00	                    LDA #0
.3956df	85 20		sta $0320	                    STA BIOS_STATUS
.3956e1	28		plp		                    PLP
.3956e2	2b		pld		                    PLD
.3956e3	ab		plb		                    PLB
.3956e4	38		sec		                    SEC
.3956e5	6b		rtl		                    RTL
.3956e6	28		plp		pass_failure        PLP
.3956e7	2b		pld		                    PLD
.3956e8	ab		plb		                    PLB
.3956e9	18		clc		                    CLC
.3956ea	6b		rtl		                    RTL
.3956eb					FATFORCLUSTER12
.3956eb	08		php		                PHP
.3956ec	c2 30		rep #$30	                REP #$30        ; set A&X long
.3956ee	a5 30		lda $0330	                LDA DOS_CLUS_ID                 ; DOS_TEMP := DOS_CLUS_ID * 3
.3956f0	0a		asl a		                ASL A
.3956f1	85 48		sta $0348	                STA DOS_TEMP
.3956f3	a5 32		lda $0332	                LDA DOS_CLUS_ID+2
.3956f5	2a		rol a		                ROL A
.3956f6	85 4a		sta $034a	                STA DOS_TEMP+2
.3956f8	18		clc		                CLC
.3956f9	a5 30		lda $0330	                LDA DOS_CLUS_ID
.3956fb	65 48		adc $0348	                ADC DOS_TEMP
.3956fd	85 48		sta $0348	                STA DOS_TEMP
.3956ff	a5 32		lda $0332	                LDA DOS_CLUS_ID+2
.395701	65 4a		adc $034a	                ADC DOS_TEMP+2
.395703	85 4a		sta $034a	                STA DOS_TEMP+2
.395705	46 4a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := (DOS_CLUS_ID * 3) / 2
.395707	66 48		ror $0348	                ROR DOS_TEMP                    ; DOS_TEMP is now the offset to the cluster's entry in the FAT
.395709	a5 48		lda $0348	                LDA DOS_TEMP
.39570b	85 22		sta $0322	                STA BIOS_LBA
.39570d	a5 4a		lda $034a	                LDA DOS_TEMP+2
.39570f	85 24		sta $0324	                STA BIOS_LBA+2
.395711	46 24		lsr $0324	                LSR BIOS_LBA+2                  ; BIOS_LBA := DOS_TEMP / 512
.395713	66 22		ror $0322	                ROR BIOS_LBA
.395715	46 24		lsr $0324	                LSR BIOS_LBA+2                  ; BIOS_LBA := DOS_TEMP / 512
.395717	66 22		ror $0322	                ROR BIOS_LBA
.395719	46 24		lsr $0324	                LSR BIOS_LBA+2                  ; BIOS_LBA := DOS_TEMP / 512
.39571b	66 22		ror $0322	                ROR BIOS_LBA
.39571d	46 24		lsr $0324	                LSR BIOS_LBA+2                  ; BIOS_LBA := DOS_TEMP / 512
.39571f	66 22		ror $0322	                ROR BIOS_LBA
.395721	46 24		lsr $0324	                LSR BIOS_LBA+2                  ; BIOS_LBA := DOS_TEMP / 512
.395723	66 22		ror $0322	                ROR BIOS_LBA
.395725	46 24		lsr $0324	                LSR BIOS_LBA+2                  ; BIOS_LBA := DOS_TEMP / 512
.395727	66 22		ror $0322	                ROR BIOS_LBA
.395729	46 24		lsr $0324	                LSR BIOS_LBA+2                  ; BIOS_LBA := DOS_TEMP / 512
.39572b	66 22		ror $0322	                ROR BIOS_LBA
.39572d	46 24		lsr $0324	                LSR BIOS_LBA+2                  ; BIOS_LBA := DOS_TEMP / 512
.39572f	66 22		ror $0322	                ROR BIOS_LBA
.395731	46 24		lsr $0324	                LSR BIOS_LBA+2                  ; BIOS_LBA := DOS_TEMP / 512
.395733	66 22		ror $0322	                ROR BIOS_LBA
.395735	18		clc		                CLC                             ; BIOS_LBA should be the LBA of the first FAT sector we need
.395736	af 14 e0 37	lda $37e014	                LDA FAT_BEGIN_LBA
.39573a	65 22		adc $0322	                ADC BIOS_LBA
.39573c	85 22		sta $0322	                STA BIOS_LBA
.39573e	85 44		sta $0344	                STA DOS_FAT_LBA                 ; With a copy of the LBA in DOS_FAT_LBA
.395740	af 16 e0 37	lda $37e016	                LDA FAT_BEGIN_LBA+2
.395744	65 24		adc $0324	                ADC BIOS_LBA+2
.395746	85 24		sta $0324	                STA BIOS_LBA+2
.395748	85 46		sta $0346	                STA DOS_FAT_LBA+2
.39574a	a9 00 e5	lda #$e500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first 512 bytes of the FAT buffer
.39574d	85 26		sta $0326	                STA BIOS_BUFF_PTR
.39574f	a9 37 00	lda #$0037	                LDA #`DOS_FAT_SECTORS
.395752	85 28		sta $0328	                STA BIOS_BUFF_PTR+2
.395754	22 65 55 39	jsl $395565	                JSL FDC_GETBLOCK                ; Attempt to load the first FAT sector
.395758	90 1b		bcc $395775	                BCC error
.39575a	e6 22		inc $0322	                INC BIOS_LBA                    ; Move to the next sector
.39575c	a9 00 e7	lda #$e700	                LDA #<>DOS_FAT_SECTORS+512      ; And point to the second 512 bytes of teh FAT buffer
.39575f	85 26		sta $0326	                STA BIOS_BUFF_PTR
.395761	a9 37 00	lda #$0037	                LDA #`DOS_FAT_SECTORS
.395764	85 28		sta $0328	                STA BIOS_BUFF_PTR+2
.395766	22 65 55 39	jsl $395565	                JSL FDC_GETBLOCK                ; Attempt to load the first FAT sector
.39576a	90 09		bcc $395775	                BCC error
.39576c	a5 48		lda $0348	                LDA DOS_TEMP                    ; Get the offset to the cluster's entry in the FAT
.39576e	29 ff 3f	and #$3fff	                AND #$03FFF                     ; And mask it so it's an offset to the FAT buffer
.395771	aa		tax		                TAX                             ; And move that to X
.395772	28		plp		                PLP
.395773	38		sec		                SEC
.395774	6b		rtl		                RTL
.395775					error
.395775	e2 20		sep #$20	                SEP #$20        ; set A short
.395777	a9 06		lda #$06	                LDA #DOS_ERR_FAT
.395779	85 2e		sta $032e	                STA DOS_STATUS
.39577b	28		plp		                PLP
.39577c	18		clc		                CLC
.39577d	6b		rtl		                RTL
.39577e					NEXTCLUSTER12
.39577e	08		php		                    PHP
.39577f	c2 30		rep #$30	                REP #$30        ; set A&X long
.395781	22 eb 56 39	jsl $3956eb	                    JSL FATFORCLUSTER12             ; Attempt to load the FAT entries
.395785	b0 03		bcs $39578a	                    BCS chk_clus_id
.395787	82 41 00	brl $3957cb	                    BRL pass_failure
.39578a	a5 30		lda $0330	chk_clus_id         LDA DOS_CLUS_ID                 ; Check the cluster ID...
.39578c	89 01 00	bit #$0001	                    BIT #1                          ; Is it odd?
.39578f	d0 0f		bne $3957a0	                    BNE is_odd                      ; Yes: calculate the next cluster for odd
.395791					is_even
.395791	c2 20		rep #$20	                REP #$20        ; set A long
.395793	bf 00 e5 37	lda $37e500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] & $0FFF
.395797	29 ff 0f	and #$0fff	                    AND #$0FFF
.39579a	85 30		sta $0330	                    STA DOS_CLUS_ID
.39579c	64 32		stz $0332	                    STZ DOS_CLUS_ID+2
.39579e	80 12		bra $3957b2	                    BRA check_id
.3957a0					is_odd
.3957a0	c2 20		rep #$20	                REP #$20        ; set A long
.3957a2	bf 00 e5 37	lda $37e500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] >> 4
.3957a6	4a		lsr a		                    LSR A
.3957a7	6a		ror a		                    ROR A
.3957a8	4a		lsr a		                    LSR A
.3957a9	6a		ror a		                    ROR A
.3957aa	4a		lsr a		                    LSR A
.3957ab	6a		ror a		                    ROR A
.3957ac	4a		lsr a		                    LSR A
.3957ad	6a		ror a		                    ROR A
.3957ae	85 30		sta $0330	                    STA DOS_CLUS_ID
.3957b0	64 32		stz $0332	                    STZ DOS_CLUS_ID+2
.3957b2					check_id
.3957b2	c2 20		rep #$20	                REP #$20        ; set A long
.3957b4	a5 30		lda $0330	                    LDA DOS_CLUS_ID                 ; Check the new cluster ID we got
.3957b6	29 f0 0f	and #$0ff0	                    AND #$0FF0                      ; Is it in the range $0FF0 -- $0FFF?
.3957b9	c9 f0 0f	cmp #$0ff0	                    CMP #$0FF0
.3957bc	f0 07		beq $3957c5	                    BEQ no_more                     ; Yes: return that we've reached the end of the chain
.3957be					ret_success
.3957be	e2 20		sep #$20	                SEP #$20        ; set A short
.3957c0	64 2e		stz $032e	                    STZ DOS_STATUS
.3957c2	28		plp		                    PLP
.3957c3	38		sec		                    SEC
.3957c4	6b		rtl		                    RTL
.3957c5					no_more
.3957c5	e2 20		sep #$20	                SEP #$20        ; set A short
.3957c7	a9 0a		lda #$0a	                    LDA #DOS_ERR_NOCLUSTER
.3957c9	85 2e		sta $032e	                    STA DOS_STATUS
.3957cb	28		plp		pass_failure        PLP
.3957cc	18		clc		                    CLC
.3957cd	6b		rtl		                    RTL
.3957ce					FDC_CMDBLOCK
.3957ce	08		php		                    PHP
.3957cf	e2 30		sep #$30	                SEP #$30        ; set A&X short
.3957d1	e0 01		cpx #$01	                    CPX #FDC_DEVCMD_MOTOR_ON
.3957d3	f0 0d		beq $3957e2	                    BEQ motor_on
.3957d5	e0 02		cpx #$02	                    CPX #FDC_DEVCMD_MOTOR_OFF
.3957d7	f0 0f		beq $3957e8	                    BEQ motor_off
.3957d9	e0 03		cpx #$03	                    CPX #FDC_DEVCMD_RECAL
.3957db	f0 11		beq $3957ee	                    BEQ recalibrate
.3957dd	64 20		stz $0320	ret_success         STZ BIOS_STATUS
.3957df	28		plp		                    PLP
.3957e0	38		sec		                    SEC
.3957e1	6b		rtl		                    RTL
.3957e2	22 1c 52 39	jsl $39521c	motor_on            JSL FDC_Motor_On
.3957e6	80 f5		bra $3957dd	                    BRA ret_success
.3957e8	22 40 52 39	jsl $395240	motor_off           JSL FDC_Motor_Off
.3957ec	80 ef		bra $3957dd	                    BRA ret_success
.3957ee	22 6a 52 39	jsl $39526a	recalibrate         JSL FDC_Recalibrate_Command
.3957f2	b0 e9		bcs $3957dd	                    BCS ret_success
.3957f4	28		plp		pass_failure        PLP
.3957f5	18		clc		                    CLC
.3957f6	6b		rtl		                    RTL

;******  Return to file: src\kernel.asm

.3957f7					KERNEL_DATA
>3957f7	20 20 20 20 0b 0c 0b 0c		greet_msg       .text $20, $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, " FFFFFFF MMMMMMMM XX    XXX " ,$0D
>3957ff	0b 0c 0b 0c 0b 0c 20 46 46 46 46 46 46 46 20 4d
>39580f	4d 4d 4d 4d 4d 4d 4d 20 58 58 20 20 20 20 58 58
>39581f	58 20 0d
>395822	20 20 20 0b 0c 0b 0c 0b		                .text $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM   XX XXX   ",$0D
>39582a	0c 0b 0c 0b 0c 20 46 46 20 20 20 20 20 20 4d 4d
>39583a	20 4d 4d 20 4d 4d 20 20 20 58 58 20 58 58 58 20
>39584a	20 20 0d
>39584d	20 20 0b 0c 0b 0c 0b 0c		                .text $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FFFFF   MM MM MM    XXX      ",$0D
>395855	0b 0c 0b 0c 20 46 46 46 46 46 20 20 20 4d 4d 20
>395865	4d 4d 20 4d 4d 20 20 20 20 58 58 58 20 20 20 20
>395875	20 20 0d
>395878	20 0b 0c 0b 0c 0b 0c 0b		                .text $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM  XXX  XX     ",$0D
>395880	0c 0b 0c 20 46 46 20 20 20 20 20 20 4d 4d 20 4d
>395890	4d 20 4d 4d 20 20 58 58 58 20 20 58 58 20 20 20
>3958a0	20 20 0d
>3958a3	0b 0c 0b 0c 0b 0c 0b 0c		                .text $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM XXX     XX    ",$0D
>3958ab	0b 0c 20 46 46 20 20 20 20 20 20 4d 4d 20 4d 4d
>3958bb	20 4d 4d 20 58 58 58 20 20 20 20 20 58 58 20 20
>3958cb	20 20 0d
>3958ce	0d 43 32 35 36 20 46 4f		                .text $0D, "C256 FOENIX FMX -- 3,670,016 Bytes Free", $0D
>3958d6	45 4e 49 58 20 46 4d 58 20 2d 2d 20 33 2c 36 37
>3958e6	30 2c 30 31 36 20 42 79 74 65 73 20 46 72 65 65
>3958f6	0d
>3958f7	77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com - Kernel version: "
>3958ff	66 6f 65 6e 69 78 2e 63 6f 6d 20 2d 20 4b 65 72
>39590f	6e 65 6c 20 76 65 72 73 69 6f 6e 3a 20

;******  Processing file: src\version.asm

>39591c	76 30 2e 30 2e 31 2d 61		.text "v0.0.1-alpha+1 (2020-04-29)"
>395924	6c 70 68 61 2b 31 20 28 32 30 32 30 2d 30 34 2d
>395934	32 39 29

;******  Return to file: src\kernel.asm

>395937	0d 00				                .text $0D,$00
.395939					old_pc_style_stat
>395939	1d 1d 1d 1d 1d 1d 8d 8d		greet_clr_line1 .text $1D, $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>395941	4d 4d 2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd
>395951	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>395961	fd fd
>395963	1d 1d 1d 1d 1d 8d 8d 4d		greet_clr_line2 .text $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>39596b	4d 2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd
>39597b	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>39598b	fd fd
>39598d	1d 1d 1d 1d 8d 8d 4d 4d		greet_clr_line3 .text $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>395995	2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd fd
>3959a5	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3959b5	fd fd
>3959b7	1d 1d 1d 8d 8d 4d 4d 2d		greet_clr_line4 .text $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>3959bf	2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd fd fd
>3959cf	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3959df	fd fd
>3959e1	1d 1d 8d 8d 4d 4d 2d 2d		greet_clr_line5 .text $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>3959e9	5d 5d fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3959f9	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>395a09	fd fd
>395a0b	00 00 00 ff			fg_color_lut	  .text $00, $00, $00, $FF
>395a0f	00 00 80 ff			                .text $00, $00, $80, $FF
>395a13	00 80 00 ff			                .text $00, $80, $00, $FF
>395a17	80 00 00 ff			                .text $80, $00, $00, $FF
>395a1b	00 80 80 ff			                .text $00, $80, $80, $FF
>395a1f	80 80 00 ff			                .text $80, $80, $00, $FF
>395a23	80 00 80 ff			                .text $80, $00, $80, $FF
>395a27	80 80 80 ff			                .text $80, $80, $80, $FF
>395a2b	00 45 ff ff			                .text $00, $45, $FF, $FF
>395a2f	13 45 8b ff			                .text $13, $45, $8B, $FF
>395a33	00 00 20 ff			                .text $00, $00, $20, $FF
>395a37	00 20 00 ff			                .text $00, $20, $00, $FF
>395a3b	20 00 00 ff			                .text $20, $00, $00, $FF
>395a3f	20 20 20 ff			                .text $20, $20, $20, $FF
>395a43	40 40 40 ff			                .text $40, $40, $40, $FF
>395a47	ff ff ff ff			                .text $FF, $FF, $FF, $FF
>395a4b	00 00 00 ff			bg_color_lut	  .text $00, $00, $00, $FF
>395a4f	00 00 80 ff			                .text $00, $00, $80, $FF
>395a53	00 80 00 ff			                .text $00, $80, $00, $FF
>395a57	80 00 00 ff			                .text $80, $00, $00, $FF
>395a5b	00 20 20 ff			                .text $00, $20, $20, $FF
>395a5f	20 20 00 ff			                .text $20, $20, $00, $FF
>395a63	20 00 20 ff			                .text $20, $00, $20, $FF
>395a67	20 20 20 ff			                .text $20, $20, $20, $FF
>395a6b	1e 69 d2 ff			                .text $1E, $69, $D2, $FF
>395a6f	13 45 8b ff			                .text $13, $45, $8B, $FF
>395a73	00 00 20 ff			                .text $00, $00, $20, $FF
>395a77	00 20 00 ff			                .text $00, $20, $00, $FF
>395a7b	40 00 00 ff			                .text $40, $00, $00, $FF
>395a7f	10 10 10 ff			                .text $10, $10, $10, $FF
>395a83	40 40 40 ff			                .text $40, $40, $40, $FF
>395a87	ff ff ff ff			                .text $FF, $FF, $FF, $FF
>395a8b	43 6d 64 20 30 78 41 41		pass_tst0xAAmsg .text "Cmd 0xAA Test passed...", $0D, $00
>395a93	20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>395aa3	00
>395aa4	43 6d 64 20 30 78 41 42		pass_tst0xABmsg .text "Cmd 0xAB Test passed...", $0D, $00
>395aac	20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>395abc	00
>395abd	43 6d 64 20 30 78 36 30		pass_cmd0x60msg .text "Cmd 0x60 Executed.", $0D, $00
>395ac5	20 45 78 65 63 75 74 65 64 2e 0d 00
>395ad1	43 6d 64 20 30 78 46 46		pass_cmd0xFFmsg .text "Cmd 0xFF (Reset) Done.", $0D, $00
>395ad9	20 28 52 65 73 65 74 29 20 44 6f 6e 65 2e 0d 00
>395ae9	43 6d 64 20 30 78 45 45		pass_cmd0xEEmsg .text "Cmd 0xEE Echo Test passed...", $0D, $00
>395af1	20 45 63 68 6f 20 54 65 73 74 20 70 61 73 73 65
>395b01	64 2e 2e 2e 0d 00
>395b07	4b 65 79 62 6f 61 72 64		Success_kb_init .text "Keyboard Present", $0D, $00
>395b0f	20 50 72 65 73 65 6e 74 0d 00
>395b19	4e 6f 20 4b 65 79 62 6f		Failed_kb_init  .text "No Keyboard Attached or Failed Init...", $0D, $00
>395b21	61 72 64 20 41 74 74 61 63 68 65 64 20 6f 72 20
>395b31	46 61 69 6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>395b41	4e 4f 20 53 49 47 4e 41		bmp_parser_err0 .text "NO SIGNATURE FOUND.", $00
>395b49	54 55 52 45 20 46 4f 55 4e 44 2e 00
>395b55	42 4d 50 20 4c 4f 41 44		bmp_parser_msg0 .text "BMP LOADED.", $00
>395b5d	45 44 2e 00
>395b61	45 58 45 43 55 54 49 4e		bmp_parser_msg1 .text "EXECUTING BMP PARSER", $00
>395b69	47 20 42 4d 50 20 50 41 52 53 45 52 00
>395b76	49 44 45 20 48 44 44 20		IDE_HDD_Present_msg0 .text "IDE HDD Present:", $00
>395b7e	50 72 65 73 65 6e 74 3a 00
>395b87	42 6f 6f 74 20 44 49 50		boot_invalid    .text "Boot DIP switch settings are invalid", $00
>395b8f	20 73 77 69 74 63 68 20 73 65 74 74 69 6e 67 73
>395b9f	20 61 72 65 20 69 6e 76 61 6c 69 64 00
>395bac	42 6f 6f 74 69 6e 67 20		sdcard_notimpl  .text "Booting from SD card is not yet implemented.", $00
>395bb4	66 72 6f 6d 20 53 44 20 63 61 72 64 20 69 73 20
>395bc4	6e 6f 74 20 79 65 74 20 69 6d 70 6c 65 6d 65 6e
>395bd4	74 65 64 2e 00
>395bd9	42 6f 6f 74 69 6e 67 20		ide_notimpl     .text "Booting from IDE drive is not yet implemented.", $00
>395be1	66 72 6f 6d 20 49 44 45 20 64 72 69 76 65 20 69
>395bf1	73 20 6e 6f 74 20 79 65 74 20 69 6d 70 6c 65 6d
>395c01	65 6e 74 65 64 2e 00
>395c08	42 6f 6f 74 69 6e 67 20		floppy_notimpl  .text "Booting from floppy drive is not yet implemented.", $00
>395c10	66 72 6f 6d 20 66 6c 6f 70 70 79 20 64 72 69 76
>395c20	65 20 69 73 20 6e 6f 74 20 79 65 74 20 69 6d 70
>395c30	6c 65 6d 65 6e 74 65 64 2e 00
>395c3a	0d 52 45 41 44 59 2e 00		ready_msg       .null $0D,"READY."
>395c42	41 42 4f 52 54 20 45 52		error_01        .null "ABORT ERROR"
>395c4a	52 4f 52 00
>395c4e	30 31 32 33 34 35 36 37		hex_digits      .text "0123456789ABCDEF",0
>395c56	38 39 41 42 43 44 45 46 00
>395c5f					.align 256
>395d00	00 1b 31 32 33 34 35 36		ScanCode_Press_Set1   .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>395d08	37 38 39 30 2d 3d 08 09
>395d10	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>395d18	6f 70 5b 5d 0d 00 61 73
>395d20	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>395d28	27 60 00 5c 7a 78 63 76
>395d30	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>395d38	00 20 00 00 00 00 00 00
>395d40	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $11, $00, $00, $9D, $00, $1D, $00, $00    ; $40
>395d48	11 00 00 9d 00 1d 00 00
>395d50	91 00 00 00 00 00 00 00		                      .text $91, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>395d58	00 00 00 00 00 00 00 00
>395d60	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>395d68	00 00 00 00 00 00 00 00
>395d70	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>395d78	00 00 00 00 00 00 00 00
>395d80	00 00 21 40 23 24 25 5e		ScanCode_Shift_Set1   .text $00, $00, $21, $40, $23, $24, $25, $5E, $26, $2A, $28, $29, $5F, $2B, $08, $09    ; $00
>395d88	26 2a 28 29 5f 2b 08 09
>395d90	51 57 45 52 54 59 55 49		                      .text $51, $57, $45, $52, $54, $59, $55, $49, $4F, $50, $7B, $7D, $0D, $00, $41, $53    ; $10
>395d98	4f 50 7b 7d 0d 00 41 53
>395da0	44 46 47 48 4a 4b 4c 3a		                      .text $44, $46, $47, $48, $4A, $4B, $4C, $3A, $22, $7E, $00, $5C, $5A, $58, $43, $56    ; $20
>395da8	22 7e 00 5c 5a 58 43 56
>395db0	42 4e 4d 3c 3e 3f 00 00		                      .text $42, $4E, $4D, $3C, $3E, $3F, $00, $00, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>395db8	00 20 00 00 00 00 00 00
>395dc0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>395dc8	00 00 00 00 00 00 00 00
>395dd0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>395dd8	00 00 00 00 00 00 00 00
>395de0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>395de8	00 00 00 00 00 00 00 00
>395df0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>395df8	00 00 00 00 00 00 00 00
>395e00	00 1b 31 32 33 34 35 36		ScanCode_Ctrl_Set1    .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>395e08	37 38 39 30 2d 3d 08 09
>395e10	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>395e18	6f 70 5b 5d 0d 00 61 73
>395e20	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $03, $76    ; $20
>395e28	27 60 00 5c 7a 78 03 76
>395e30	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>395e38	00 20 00 00 00 00 00 00
>395e40	00 00 00 00 00 18 00 00		                      .text $00, $00, $00, $00, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>395e48	00 00 00 00 00 00 00 00
>395e50	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>395e58	00 00 00 00 00 00 00 00
>395e60	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>395e68	00 00 00 00 00 00 00 00
>395e70	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>395e78	00 00 00 00 00 00 00 00
>395e80	00 1b 31 32 33 34 35 36		ScanCode_Alt_Set1     .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>395e88	37 38 39 30 2d 3d 08 09
>395e90	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>395e98	6f 70 5b 5d 0d 00 61 73
>395ea0	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>395ea8	27 60 00 5c 7a 78 63 76
>395eb0	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>395eb8	00 20 00 00 00 00 00 00
>395ec0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>395ec8	00 00 00 00 00 00 00 00
>395ed0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>395ed8	00 00 00 00 00 00 00 00
>395ee0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>395ee8	00 00 00 00 00 00 00 00
>395ef0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>395ef8	00 00 00 00 00 00 00 00
>395f00	00 1b 31 32 33 34 35 36		ScanCode_NumLock_Set1 .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>395f08	37 38 39 30 2d 3d 08 09
>395f10	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>395f18	6f 70 5b 5d 0d 00 61 73
>395f20	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>395f28	27 60 00 5c 7a 78 63 76
>395f30	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>395f38	00 20 00 00 00 00 00 00
>395f40	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>395f48	00 00 00 00 00 00 00 00
>395f50	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>395f58	00 00 00 00 00 00 00 00
>395f60	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>395f68	00 00 00 00 00 00 00 00
>395f70	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>395f78	00 00 00 00 00 00 00 00
>395f80	00 00 00 00 00 00 00 00		ScanCode_Prefix_Set1  .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $00
>395f88	00 00 00 00 00 00 00 00
>395f90	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $10
>395f98	00 00 00 00 00 00 00 00
>395fa0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $20
>395fa8	00 00 00 00 00 00 00 00
>395fb0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $30
>395fb8	00 00 00 00 00 00 00 00
>395fc0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $11, $00, $00, $9D, $00, $1D, $00, $00    ; $40
>395fc8	11 00 00 9d 00 1d 00 00
>395fd0	91 00 0f 7f 00 00 00 00		                      .text $91, $00, $0F, $7F, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>395fd8	00 00 00 00 00 00 00 00
>395fe0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>395fe8	00 00 00 00 00 00 00 00
>395ff0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>395ff8	00 00 00 00 00 00 00 00
>396000					.align 256
>396000	00 14 1c 21 26 2a 2e 31		GAMMA_2_2_Tbl         .text  $00, $14, $1c, $21, $26, $2a, $2e, $31, $34, $37, $3a, $3d, $3f, $41, $44, $46
>396008	34 37 3a 3d 3f 41 44 46
>396010	48 4a 4c 4e 50 51 53 55		                      .text  $48, $4a, $4c, $4e, $50, $51, $53, $55, $57, $58, $5a, $5b, $5d, $5e, $60, $61
>396018	57 58 5a 5b 5d 5e 60 61
>396020	63 64 66 67 68 6a 6b 6c		                      .text  $63, $64, $66, $67, $68, $6a, $6b, $6c, $6d, $6f, $70, $71, $72, $73, $75, $76
>396028	6d 6f 70 71 72 73 75 76
>396030	77 78 79 7a 7b 7c 7d 7e		                      .text  $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $80, $81, $82, $83, $84, $85, $86, $87
>396038	80 81 82 83 84 85 86 87
>396040	88 88 89 8a 8b 8c 8d 8e		                      .text  $88, $88, $89, $8a, $8b, $8c, $8d, $8e, $8f, $90, $91, $92, $93, $93, $94, $95
>396048	8f 90 91 92 93 93 94 95
>396050	96 97 98 99 99 9a 9b 9c		                      .text  $96, $97, $98, $99, $99, $9a, $9b, $9c, $9d, $9e, $9e, $9f, $a0, $a1, $a2, $a2
>396058	9d 9e 9e 9f a0 a1 a2 a2
>396060	a3 a4 a5 a5 a6 a7 a8 a8		                      .text  $a3, $a4, $a5, $a5, $a6, $a7, $a8, $a8, $a9, $aa, $ab, $ab, $ac, $ad, $ae, $ae
>396068	a9 aa ab ab ac ad ae ae
>396070	af b0 b0 b1 b2 b2 b3 b4		                      .text  $AF, $b0, $b0, $b1, $b2, $b2, $b3, $b4, $b5, $b5, $b6, $b7, $b7, $b8, $b9, $b9
>396078	b5 b5 b6 b7 b7 b8 b9 b9
>396080	ba bb bb bc bd bd be be		                      .text  $ba, $bb, $bb, $bc, $bd, $bd, $be, $be, $bf, $c0, $c0, $c1, $c2, $c2, $c3, $c4
>396088	bf c0 c0 c1 c2 c2 c3 c4
>396090	c4 c5 c5 c6 c7 c7 c8 c8		                      .text  $c4, $c5, $c5, $c6, $c7, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cb, $cc, $cd, $cd
>396098	c9 ca ca cb cb cc cd cd
>3960a0	ce ce cf d0 d0 d1 d1 d2		                      .text  $ce, $ce, $cf, $d0, $d0, $d1, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d5, $d6, $d6
>3960a8	d2 d3 d4 d4 d5 d5 d6 d6
>3960b0	d7 d8 d8 d9 d9 da da db		                      .text  $d7, $d8, $d8, $d9, $d9, $da, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $df
>3960b8	db dc dc dd de de df df
>3960c0	e0 e0 e1 e1 e2 e2 e3 e3		                      .text  $e0, $e0, $e1, $e1, $e2, $e2, $e3, $e3, $e4, $e4, $e5, $e5, $e6, $e6, $e7, $e7
>3960c8	e4 e4 e5 e5 e6 e6 e7 e7
>3960d0	e8 e8 e9 e9 ea ea eb eb		                      .text  $e8, $e8, $e9, $e9, $ea, $ea, $eb, $eb, $ec, $ec, $ed, $ed, $ee, $ee, $ef, $ef
>3960d8	ec ec ed ed ee ee ef ef
>3960e0	f0 f0 f1 f1 f2 f2 f3 f3		                      .text  $f0, $f0, $f1, $f1, $f2, $f2, $f3, $f3, $f4, $f4, $f5, $f5, $f6, $f6, $f7, $f7
>3960e8	f4 f4 f5 f5 f6 f6 f7 f7
>3960f0	f8 f8 f9 f9 f9 fa fa fb		                      .text  $f8, $f8, $f9, $f9, $f9, $fa, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $fe, $ff
>3960f8	fb fc fc fd fd fe fe ff
>396100					.align 256
>396100	00 0b 11 15 19 1c 1f 22		GAMMA_1_8_Tbl         .text  $00, $0b, $11, $15, $19, $1c, $1f, $22, $25, $27, $2a, $2c, $2e, $30, $32, $34
>396108	25 27 2a 2c 2e 30 32 34
>396110	36 38 3a 3c 3d 3f 41 43		                      .text  $36, $38, $3a, $3c, $3d, $3f, $41, $43, $44, $46, $47, $49, $4a, $4c, $4d, $4f
>396118	44 46 47 49 4a 4c 4d 4f
>396120	50 51 53 54 55 57 58 59		                      .text  $50, $51, $53, $54, $55, $57, $58, $59, $5b, $5c, $5d, $5e, $60, $61, $62, $63
>396128	5b 5c 5d 5e 60 61 62 63
>396130	64 65 67 68 69 6a 6b 6c		                      .text  $64, $65, $67, $68, $69, $6a, $6b, $6c, $6d, $6e, $70, $71, $72, $73, $74, $75
>396138	6d 6e 70 71 72 73 74 75
>396140	76 77 78 79 7a 7b 7c 7d		                      .text  $76, $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $7f, $80, $81, $82, $83, $84, $84
>396148	7e 7f 80 81 82 83 84 84
>396150	85 86 87 88 89 8a 8b 8c		                      .text  $85, $86, $87, $88, $89, $8a, $8b, $8c, $8d, $8e, $8e, $8f, $90, $91, $92, $93
>396158	8d 8e 8e 8f 90 91 92 93
>396160	94 95 95 96 97 98 99 9a		                      .text  $94, $95, $95, $96, $97, $98, $99, $9a, $9a, $9b, $9c, $9d, $9e, $9f, $9f, $a0
>396168	9a 9b 9c 9d 9e 9f 9f a0
>396170	a1 a2 a3 a3 a4 a5 a6 a6		                      .text  $a1, $a2, $a3, $a3, $a4, $a5, $a6, $a6, $a7, $a8, $a9, $aa, $aa, $ab, $ac, $ad
>396178	a7 a8 a9 aa aa ab ac ad
>396180	ad ae af b0 b0 b1 b2 b3		                      .text  $ad, $ae, $af, $b0, $b0, $b1, $b2, $b3, $b3, $b4, $b5, $b6, $b6, $b7, $b8, $b8
>396188	b3 b4 b5 b6 b6 b7 b8 b8
>396190	b9 ba bb bb bc bd bd be		                      .text  $b9, $ba, $bb, $bb, $bc, $bd, $bd, $be, $bf, $bf, $c0, $c1, $c2, $c2, $c3, $c4
>396198	bf bf c0 c1 c2 c2 c3 c4
>3961a0	c4 c5 c6 c6 c7 c8 c8 c9		                      .text  $c4, $c5, $c6, $c6, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cc, $cc, $cd, $ce, $ce
>3961a8	ca ca cb cc cc cd ce ce
>3961b0	cf d0 d0 d1 d2 d2 d3 d4		                      .text  $cf, $d0, $d0, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d6, $d6, $d7, $d7, $d8, $d9
>3961b8	d4 d5 d6 d6 d7 d7 d8 d9
>3961c0	d9 da db db dc dc dd de		                      .text  $d9, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $e0, $e0, $e1, $e1, $e2, $e3
>3961c8	de df e0 e0 e1 e1 e2 e3
>3961d0	e3 e4 e4 e5 e6 e6 e7 e7		                      .text  $e3, $e4, $e4, $e5, $e6, $e6, $e7, $e7, $e8, $e9, $e9, $ea, $ea, $eb, $ec, $ec
>3961d8	e8 e9 e9 ea ea eb ec ec
>3961e0	ed ed ee ef ef f0 f0 f1		                      .text  $ed, $ed, $ee, $ef, $ef, $f0, $f0, $f1, $f1, $f2, $f3, $f3, $f4, $f4, $f5, $f5
>3961e8	f1 f2 f3 f3 f4 f4 f5 f5
>3961f0	f6 f7 f7 f8 f8 f9 f9 fa		                      .text  $f6, $f7, $f7, $f8, $f8, $f9, $f9, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $ff
>3961f8	fb fb fc fc fd fd fe ff
>396200					.align 256
>396200	1d c8 a7 ac 10 d6 52 7c		RANDOM_LUT_Tbl		    .text  $1d, $c8, $a7, $ac, $10, $d6, $52, $7c, $83, $dd, $ce, $39, $cd, $c5, $3b, $15
>396208	83 dd ce 39 cd c5 3b 15
>396210	22 55 3b 94 e0 33 1f 38						              .text  $22, $55, $3b, $94, $e0, $33, $1f, $38, $87, $12, $31, $65, $89, $27, $88, $42
>396218	87 12 31 65 89 27 88 42
>396220	b2 32 72 84 b2 b2 31 52						              .text  $b2, $32, $72, $84, $b2, $b2, $31, $52, $94, $ce, $56, $ec, $fe, $da, $58, $c9
>396228	94 ce 56 ec fe da 58 c9
>396230	c8 5b 53 2a 08 3b 19 c1						              .text  $c8, $5b, $53, $2a, $08, $3b, $19, $c1, $d0, $10, $2c, $b2, $4b, $ea, $32, $61
>396238	d0 10 2c b2 4b ea 32 61
>396240	da 34 33 8f 2b da 49 89						              .text  $da, $34, $33, $8f, $2b, $da, $49, $89, $a1, $e6, $ca, $2d, $b3, $ce, $b0, $79
>396248	a1 e6 ca 2d b3 ce b0 79
>396250	44 aa 32 82 91 e9 29 16						              .text  $44, $aa, $32, $82, $91, $e9, $29, $16, $5f, $e3, $fb, $bd, $15, $2e, $be, $f5
>396258	5f e3 fb bd 15 2e be f5
>396260	e9 4a e4 2e 60 24 94 35						              .text  $e9, $4a, $e4, $2e, $60, $24, $94, $35, $8d, $8f, $2c, $80, $0a, $5e, $99, $36
>396268	8d 8f 2c 80 0a 5e 99 36
>396270	ac ab 21 26 42 7c 5e bc						              .text  $ac, $ab, $21, $26, $42, $7c, $5e, $bc, $13, $52, $44, $2f, $e3, $ef, $44, $a2
>396278	13 52 44 2f e3 ef 44 a2
>396280	86 c1 9c 47 5f 36 6d 02						              .text  $86, $c1, $9c, $47, $5f, $36, $6d, $02, $be, $23, $02, $58, $0a, $52, $5e, $b4
>396288	be 23 02 58 0a 52 5e b4
>396290	9f 06 08 c9 97 cb 9e dd						              .text  $9f, $06, $08, $c9, $97, $cb, $9e, $dd, $d5, $cf, $3e, $df, $c4, $9e, $da, $bb
>396298	d5 cf 3e df c4 9e da bb
>3962a0	9b 5d c9 f5 d9 c3 7e 87						              .text  $9b, $5d, $c9, $f5, $d9, $c3, $7e, $87, $77, $7d, $b1, $3b, $4a, $68, $35, $6e
>3962a8	77 7d b1 3b 4a 68 35 6e
>3962b0	ee 47 ad 8f fd 73 2e 46						              .text  $ee, $47, $ad, $8f, $fd, $73, $2e, $46, $b5, $8f, $44, $63, $55, $6f, $e1, $50
>3962b8	b5 8f 44 63 55 6f e1 50
>3962c0	f4 b6 a3 4f 68 c4 a5 a4						              .text  $f4, $b6, $a3, $4f, $68, $c4, $a5, $a4, $57, $74, $b9, $bd, $05, $14, $50, $eb
>3962c8	57 74 b9 bd 05 14 50 eb
>3962d0	a5 5c 57 2f 99 dc 2e 8a						              .text  $a5, $5c, $57, $2f, $99, $dc, $2e, $8a, $44, $bc, $ec, $db, $22, $58, $fc, $be
>3962d8	44 bc ec db 22 58 fc be
>3962e0	5f 3f 50 bd 2a 36 ab ae						              .text  $5f, $3f, $50, $bd, $2a, $36, $ab, $ae, $24, $aa, $82, $11, $5c, $9f, $43, $4d
>3962e8	24 aa 82 11 5c 9f 43 4d
>3962f0	8f 0c 20 00 91 b6 45 9e						              .text  $8f, $0c, $20, $00, $91, $b6, $45, $9e, $3e, $3d, $66, $7e, $0a, $1c, $6b, $74
>3962f8	3e 3d 66 7e 0a 1c 6b 74
>396300					.align 16
>396300	00 01 01 00 00 00 00 00		MOUSE_POINTER_PTR     .text $00,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00
>396308	01 01 01 00 00 00 00 00
>396310	01 ff ff 01 00 00 01 01		                      .text $01,$FF,$FF,$01,$00,$00,$01,$01,$FF,$FF,$FF,$01,$00,$00,$00,$00
>396318	ff ff ff 01 00 00 00 00
>396320	01 ff ff ff 01 01 55 ff		                      .text $01,$FF,$FF,$FF,$01,$01,$55,$FF,$01,$55,$FF,$FF,$01,$00,$00,$00
>396328	01 55 ff ff 01 00 00 00
>396330	01 55 ff ff ff ff 01 55		                      .text $01,$55,$FF,$FF,$FF,$FF,$01,$55,$FF,$FF,$FF,$FF,$01,$00,$00,$00
>396338	ff ff ff ff 01 00 00 00
>396340	00 01 55 ff ff ff ff ff		                      .text $00,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$00,$00
>396348	ff ff 01 ff ff 01 00 00
>396350	00 00 01 55 ff ff ff ff		                      .text $00,$00,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$FF,$01,$00,$00
>396358	01 ff ff 01 ff 01 00 00
>396360	00 00 01 01 55 ff ff ff		                      .text $00,$00,$01,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$FF,$01,$00,$00
>396368	ff 01 ff ff ff 01 00 00
>396370	00 00 01 55 01 55 ff ff		                      .text $00,$00,$01,$55,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$01,$00
>396378	ff ff ff ff ff 01 01 00
>396380	00 00 01 55 55 55 ff ff		                      .text $00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01
>396388	ff ff ff ff 01 ff ff 01
>396390	00 00 00 01 55 55 55 ff		                      .text $00,$00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01
>396398	ff ff ff ff ff ff ff 01
>3963a0	00 00 00 00 01 55 55 55		                      .text $00,$00,$00,$00,$01,$55,$55,$55,$55,$55,$01,$FF,$FF,$55,$01,$00
>3963a8	55 55 01 ff ff 55 01 00
>3963b0	00 00 00 00 00 01 01 01		                      .text $00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$55,$FF,$55,$01,$00,$00
>3963b8	01 01 55 ff 55 01 00 00
>3963c0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$55,$01,$00,$00,$00
>3963c8	01 55 55 55 01 00 00 00
>3963d0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$01,$00,$00,$00,$00
>3963d8	01 55 55 01 00 00 00 00
>3963e0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00
>3963e8	00 01 01 00 00 00 00 00
>3963f0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>3963f8	00 00 00 00 00 00 00 00
.3ff000					FONT_4_BANK0
>3ff000	00 00 00 00 00 00 00 00		.binary "FONT/Bm437_PhoenixEGA_8x8.bin", 0, 2048
>3ff008	7e 81 a5 81 bd 99 81 7e 3c 7e db ff c3 7e 3c 00
>3ff018	00 ee fe fe 7c 38 10 00 10 38 7c fe 7c 38 10 00
>3ff028	00 3c 18 ff ff 08 18 00 10 38 7c fe fe 10 38 00
>3ff038	00 00 18 3c 18 00 00 00 ff ff e7 c3 e7 ff ff ff
>3ff048	00 3c 42 81 81 42 3c 00 ff c3 bd 7e 7e bd c3 ff
>3ff058	01 03 07 0f 1f 3f 7f ff ff fe fc f8 f0 e0 c0 80
>3ff068	04 06 07 04 04 fc f8 00 0c 0a 0d 0b f9 f9 1f 1f
>3ff078	00 92 7c 44 c6 7c 92 00 00 00 60 78 7e 78 60 00
>3ff088	00 00 06 1e 7e 1e 06 00 18 7e 18 18 18 18 7e 18
>3ff098	66 66 66 66 66 00 66 00 ff b6 76 36 36 36 36 00
>3ff0a8	7e c1 dc 22 22 1f 83 7e 00 00 00 7e 7e 00 00 00
>3ff0b8	18 7e 18 18 7e 18 00 ff 18 7e 18 18 18 18 18 00
>3ff0c8	18 18 18 18 18 7e 18 00 00 04 06 ff 06 04 00 00
>3ff0d8	00 20 60 ff 60 20 00 00 00 00 00 c0 c0 c0 ff 00
>3ff0e8	00 24 66 ff 66 24 00 00 00 00 10 38 7c fe 00 00
>3ff0f8	00 00 00 fe 7c 38 10 00 00 00 00 00 00 00 00 00
>3ff108	30 30 30 30 30 00 30 00 66 66 00 00 00 00 00 00
>3ff118	6c 6c fe 6c fe 6c 6c 00 10 7c d2 7c 86 7c 10 00
>3ff128	f0 96 fc 18 3e 72 de 00 30 48 30 78 ce cc 78 00
>3ff138	0c 0c 18 00 00 00 00 00 10 60 c0 c0 c0 60 10 00
>3ff148	10 0c 06 06 06 0c 10 00 00 54 38 fe 38 54 00 00
>3ff158	00 18 18 7e 18 18 00 00 00 00 00 00 00 00 18 70
>3ff168	00 00 00 7e 00 00 00 00 00 00 00 00 00 00 18 00
>3ff178	02 06 0c 18 30 60 c0 00 7c ce de f6 e6 e6 7c 00
>3ff188	18 38 78 18 18 18 3c 00 7c c6 06 0c 30 60 fe 00
>3ff198	7c c6 06 3c 06 c6 7c 00 0e 1e 36 66 fe 06 06 00
>3ff1a8	fe c0 c0 fc 06 06 fc 00 7c c6 c0 fc c6 c6 7c 00
>3ff1b8	fe 06 0c 18 30 60 60 00 7c c6 c6 7c c6 c6 7c 00
>3ff1c8	7c c6 c6 7e 06 c6 7c 00 00 30 00 00 00 30 00 00
>3ff1d8	00 30 00 00 00 30 20 00 00 1c 30 60 30 1c 00 00
>3ff1e8	00 00 7e 00 7e 00 00 00 00 70 18 0c 18 70 00 00
>3ff1f8	7c c6 0c 18 30 00 30 00 7c 82 9a aa aa 9e 7c 00
>3ff208	7c c6 c6 fe c6 c6 c6 00 fc 66 66 7c 66 66 fc 00
>3ff218	7c c6 c0 c0 c0 c6 7c 00 fc 66 66 66 66 66 fc 00
>3ff228	fe 62 68 78 68 62 fe 00 fe 62 68 78 68 60 f0 00
>3ff238	7c c6 c6 c0 de c6 7c 00 c6 c6 c6 fe c6 c6 c6 00
>3ff248	3c 18 18 18 18 18 3c 00 1e 0c 0c 0c 0c cc 78 00
>3ff258	c6 cc d8 f0 d8 cc c6 00 f0 60 60 60 60 62 fe 00
>3ff268	c6 ee fe d6 c6 c6 c6 00 c6 e6 f6 de ce c6 c6 00
>3ff278	7c c6 c6 c6 c6 c6 7c 00 fc 66 66 7c 60 60 f0 00
>3ff288	7c c6 c6 c6 c6 c6 7c 0c fc 66 66 7c 66 66 e6 00
>3ff298	7c c6 c0 7c 06 c6 7c 00 7e 5a 18 18 18 18 3c 00
>3ff2a8	c6 c6 c6 c6 c6 c6 7c 00 c6 c6 c6 c6 c6 6c 38 00
>3ff2b8	c6 c6 c6 c6 d6 ee c6 00 c6 6c 38 38 38 6c c6 00
>3ff2c8	66 66 66 3c 18 18 3c 00 fe c6 0c 18 30 66 fe 00
>3ff2d8	1c 18 18 18 18 18 1c 00 c0 60 30 18 0c 06 02 00
>3ff2e8	70 30 30 30 30 30 70 00 00 00 10 38 6c c6 00 00
>3ff2f8	00 00 00 00 00 00 00 ff 30 30 18 00 00 00 00 00
>3ff308	00 00 7c 06 7e c6 7e 00 c0 c0 fc c6 c6 c6 fc 00
>3ff318	00 00 7c c6 c0 c6 7c 00 06 06 7e c6 c6 c6 7e 00
>3ff328	00 00 7c c6 fe c0 7c 00 3c 66 60 f0 60 60 60 00
>3ff338	00 00 7e c6 c6 7e 06 7c c0 c0 fc c6 c6 c6 c6 00
>3ff348	18 00 38 18 18 18 3c 00 00 0c 00 1c 0c 0c cc 78
>3ff358	c0 c0 c6 d8 f0 d8 c6 00 38 18 18 18 18 18 3c 00
>3ff368	00 00 ee fe d6 c6 c6 00 00 00 fc c6 c6 c6 c6 00
>3ff378	00 00 7c c6 c6 c6 7c 00 00 00 fc c6 c6 fc c0 c0
>3ff388	00 00 7e c6 c6 7e 06 06 00 00 de 76 60 60 60 00
>3ff398	00 00 7c c0 7c 06 7c 00 18 18 7e 18 18 18 1e 00
>3ff3a8	00 00 c6 c6 c6 c6 7e 00 00 00 c6 c6 c6 6c 38 00
>3ff3b8	00 00 c6 c6 d6 fe c6 00 00 00 c6 6c 38 6c c6 00
>3ff3c8	00 00 c6 c6 c6 7e 06 7c 00 00 fe 0c 18 60 fe 00
>3ff3d8	0e 18 18 70 18 18 0e 00 18 18 18 00 18 18 18 00
>3ff3e8	e0 30 30 1c 30 30 e0 00 00 00 70 9a 0e 00 00 00
>3ff3f8	00 00 18 3c 66 ff 00 00 7c c6 c0 c0 c6 7c 18 70
>3ff408	66 00 c6 c6 c6 c6 7e 00 0e 18 7c c6 fe c0 7c 00
>3ff418	18 24 7c 06 7e c6 7e 00 66 00 7c 06 7e c6 7e 00
>3ff428	38 0c 7c 06 7e c6 7e 00 18 00 7c 06 7e c6 7e 00
>3ff438	00 00 7c c0 c0 7c 18 70 18 24 7c c6 fe c0 7c 00
>3ff448	66 00 7c c6 fe c0 7c 00 70 18 7c c6 fe c0 7c 00
>3ff458	66 00 38 18 18 18 3c 00 18 24 38 18 18 18 3c 00
>3ff468	38 0c 38 18 18 18 3c 00 66 00 7c c6 fe c6 c6 00
>3ff478	18 00 7c c6 fe c6 c6 00 0e 18 fe 60 78 60 fe 00
>3ff488	00 00 7c 1a 7e d8 7e 00 7e d8 d8 de f8 d8 de 00
>3ff498	18 24 7c c6 c6 c6 7c 00 66 00 7c c6 c6 c6 7c 00
>3ff4a8	38 0c 7c c6 c6 c6 7c 00 18 24 c6 c6 c6 c6 7e 00
>3ff4b8	38 0c c6 c6 c6 c6 7e 00 66 00 c6 c6 c6 7e 06 7c
>3ff4c8	66 7c c6 c6 c6 c6 7c 00 c6 00 c6 c6 c6 c6 7c 00
>3ff4d8	18 7c c6 c0 c6 7c 18 00 1e 32 30 78 30 70 fe 00
>3ff4e8	66 3c 18 7e 18 3c 18 00 fc c6 fc c0 cc de cc 0e
>3ff4f8	00 1c 32 30 fc 30 f0 00 0e 18 7c 06 7e c6 7e 00
>3ff508	1a 30 38 18 18 18 3c 00 0e 18 7c c6 c6 c6 7c 00
>3ff518	0e 18 c6 c6 c6 c6 7e 00 66 98 fc c6 c6 c6 c6 00
>3ff528	66 98 e6 f6 de ce c6 00 7c 06 7e c6 7e 00 fe 00
>3ff538	7c c6 c6 c6 7c 00 fe 00 18 00 18 30 60 c6 7c 00
>3ff548	00 00 fe c0 c0 c0 c0 00 00 00 fe 06 06 06 06 00
>3ff558	c0 c0 c0 de 06 0c 1e 00 c0 c0 c0 cc 1c 3e 0c 00
>3ff568	30 00 30 30 30 30 30 00 00 36 6c d8 6c 36 00 00
>3ff578	00 d8 6c 36 6c d8 00 00 aa aa aa aa aa aa aa aa
>3ff588	aa 55 aa 55 aa 55 aa 55 44 22 44 22 44 22 44 22
>3ff598	18 18 18 18 18 18 18 18 18 18 18 f8 18 18 18 18
>3ff5a8	18 18 18 f8 18 f8 18 18 36 36 36 f6 36 36 36 36
>3ff5b8	00 00 00 fe 36 36 36 36 00 00 00 f8 18 f8 18 18
>3ff5c8	36 36 36 f6 06 f6 36 36 36 36 36 36 36 36 36 36
>3ff5d8	00 00 00 fe 06 f6 36 36 36 36 36 f6 06 fe 00 00
>3ff5e8	36 36 36 fe 00 00 00 00 18 18 18 f8 18 f8 00 00
>3ff5f8	00 00 00 f8 18 18 18 18 18 18 18 1f 00 00 00 00
>3ff608	18 18 18 ff 00 00 00 00 00 00 00 ff 18 18 18 18
>3ff618	18 18 18 1f 18 18 18 18 00 00 00 ff 00 00 00 00
>3ff628	18 18 18 ff 18 18 18 18 18 18 18 1f 18 1f 18 18
>3ff638	36 36 36 37 36 36 36 36 36 36 36 37 30 3f 00 00
>3ff648	00 00 00 3f 30 37 36 36 36 36 36 f7 00 ff 00 00
>3ff658	00 00 00 ff 00 f7 36 36 36 36 36 37 30 37 36 36
>3ff668	00 00 00 ff 00 ff 00 00 36 36 36 f7 00 f7 36 36
>3ff678	18 18 18 ff 00 ff 00 00 36 36 36 ff 00 00 00 00
>3ff688	00 00 00 ff 00 ff 18 18 00 00 00 ff 36 36 36 36
>3ff698	36 36 36 3f 00 00 00 00 18 18 18 1f 18 1f 00 00
>3ff6a8	00 00 00 1f 18 1f 18 18 00 00 00 3f 36 36 36 36
>3ff6b8	36 36 36 ff 36 36 36 36 18 18 18 ff 18 ff 18 18
>3ff6c8	18 18 18 f8 00 00 00 00 00 00 00 1f 18 18 18 18
>3ff6d8	ff ff ff ff ff ff ff ff 00 00 00 00 ff ff ff ff
>3ff6e8	f0 f0 f0 f0 f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f
>3ff6f8	ff ff ff ff 00 00 00 00 00 00 77 98 98 77 00 00
>3ff708	1c 36 66 fc c6 c6 fc c0 fe 62 60 60 60 60 60 00
>3ff718	00 00 ff 66 66 66 66 00 fe 62 30 18 30 62 fe 00
>3ff728	00 00 3f 66 c6 cc 78 00 00 00 33 33 33 3e 30 f0
>3ff738	00 00 ff 18 18 18 18 00 3c 18 3c 66 66 3c 18 3c
>3ff748	00 7c c6 fe c6 7c 00 00 00 7e c3 c3 c3 66 e7 00
>3ff758	1e 19 3c 66 c6 cc 78 00 00 00 66 99 99 66 00 00
>3ff768	00 03 7c ce e6 7c c0 00 00 3e c0 fe c0 3e 00 00
>3ff778	00 7e c3 c3 c3 c3 00 00 00 fe 00 fe 00 fe 00 00
>3ff788	18 18 7e 18 18 7e 00 00 70 18 0c 18 70 00 fe 00
>3ff798	1c 30 60 30 1c 00 fe 00 00 0e 1b 18 18 18 18 18
>3ff7a8	18 18 18 18 18 d8 70 00 00 18 00 7e 00 18 00 00
>3ff7b8	00 76 dc 00 76 dc 00 00 3c 66 3c 00 00 00 00 00
>3ff7c8	00 18 3c 18 00 00 00 00 00 00 00 00 18 00 00 00
>3ff7d8	0f 0c 0c 0c ec 6c 38 00 d8 ec cc cc 00 00 00 00
>3ff7e8	f0 30 c0 f0 00 00 00 00 00 00 00 3c 3c 3c 3c 00
>3ff7f8	00 00 00 00 00 00 00 00
.3ff800					FONT_4_BANK1
>3ff800	00 00 00 00 00 00 00 00		.binary "FONT/CBM-ASCII_8x8.bin", 0, 2048
>3ff808	7c 82 aa 82 ba 92 82 7c 7c fe d6 fe c6 ee fe 7c
>3ff818	ff fd fb f5 eb d5 ab ff ff e1 fd 85 85 87 87 ff
>3ff828	ff bd db e7 e7 db bd ff ff 81 81 bd bd bd 81 ff
>3ff838	ff ff ff ff ff 81 81 ff 00 08 10 20 10 08 00 00
>3ff848	00 24 14 0c 14 24 00 00 00 8e 88 8c 88 e8 00 00
>3ff858	00 00 00 00 00 00 00 00 00 ee 88 cc 88 88 00 00
>3ff868	00 00 04 14 3c 10 00 00 00 30 4c 4c 30 00 00 00
>3ff878	00 38 28 38 28 00 00 00 ff 81 bd bd bd bd 81 ff
>3ff888	ff 55 aa 55 aa 55 aa ff ab d5 ab d5 ab d5 ab d5
>3ff898	ff 81 81 81 81 81 81 ff ff f9 e1 81 81 e1 f9 ff
>3ff8a8	ff 9f 87 81 81 87 9f ff ff e7 e7 c3 c3 81 81 ff
>3ff8b8	ff 81 81 c3 c3 e7 e7 ff 00 26 54 04 04 04 06 00
>3ff8c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 3 times (48 bytes)...
>3ff908	10 10 10 10 00 10 00 00 24 24 24 00 00 00 00 00
>3ff918	24 7e 24 24 7e 24 00 00 10 3c 50 38 14 78 10 00
>3ff928	62 64 08 10 20 4c 8c 00 30 48 48 30 58 4c 4c 38
>3ff938	10 10 10 00 00 00 00 00 08 10 20 20 20 20 10 08
>3ff948	10 08 04 04 04 04 08 10 00 24 18 7e 18 24 00 00
>3ff958	00 10 10 7c 10 10 00 00 00 00 00 00 10 10 20 00
>3ff968	00 00 00 3c 00 00 00 00 00 00 00 00 18 18 00 00
>3ff978	04 04 08 08 10 10 20 20 3c 46 4a 52 62 42 3c 00
>3ff988	10 30 10 10 10 10 38 00 38 44 04 18 20 40 7c 00
>3ff998	38 44 04 18 04 44 38 00 08 18 28 48 7c 08 08 00
>3ff9a8	7c 40 78 04 04 44 38 00 38 44 40 78 44 44 38 00
>3ff9b8	7c 44 04 08 08 10 10 00 38 44 44 38 44 44 38 00
>3ff9c8	38 44 44 3c 04 44 38 00 00 00 18 00 00 18 00 00
>3ff9d8	00 00 18 00 00 18 18 30 00 08 10 20 10 08 00 00
>3ff9e8	00 00 3c 00 3c 00 00 00 00 10 08 04 08 10 00 00
>3ff9f8	38 44 04 08 10 00 10 00 38 44 4c 4c 40 44 38 00
>3ffa08	10 28 44 7c 44 44 00 00 78 44 78 44 44 78 00 00
>3ffa18	38 44 40 40 44 38 00 00 78 44 44 44 44 78 00 00
>3ffa28	7c 40 78 40 40 7c 00 00 7c 40 78 40 40 40 00 00
>3ffa38	38 44 40 4c 44 38 00 00 44 44 7c 44 44 44 00 00
>3ffa48	38 10 10 10 10 38 00 00 1c 08 08 08 48 30 00 00
>3ffa58	24 28 30 30 28 24 00 00 20 20 20 20 20 3c 00 00
>3ffa68	44 6c 7c 54 44 44 00 00 44 64 54 4c 44 44 00 00
>3ffa78	38 44 44 44 44 38 00 00 78 44 44 78 40 40 00 00
>3ffa88	38 44 44 44 44 38 0c 00 78 44 44 78 48 44 00 00
>3ffa98	3c 40 38 04 04 78 00 00 7c 10 10 10 10 10 00 00
>3ffaa8	44 44 44 44 44 38 00 00 44 44 44 44 28 10 00 00
>3ffab8	82 82 82 92 92 6c 00 00 42 24 18 18 24 42 00 00
>3ffac8	44 44 28 10 10 10 00 00 7c 08 10 20 40 7c 00 00
>3ffad8	38 20 20 20 20 20 38 00 20 20 10 10 08 08 04 04
>3ffae8	38 08 08 08 08 08 38 00 00 10 28 44 00 00 00 00
>3ffaf8	00 00 00 00 00 00 00 7e 40 20 10 00 00 00 00 00
>3ffb08	00 38 04 3c 64 3c 00 00 40 40 78 44 44 78 00 00
>3ffb18	00 00 38 40 40 38 00 00 04 04 3c 44 44 3c 00 00
>3ffb28	00 38 44 7c 40 3c 00 00 0c 10 3c 10 10 10 00 00
>3ffb38	00 00 3c 44 44 3c 04 78 40 40 78 44 44 44 00 00
>3ffb48	10 00 30 10 10 38 00 00 08 00 08 08 08 08 08 30
>3ffb58	20 20 24 38 28 24 00 00 30 10 10 10 10 10 00 00
>3ffb68	00 00 68 54 54 44 00 00 00 00 38 24 24 24 00 00
>3ffb78	00 00 38 44 44 38 00 00 00 00 78 44 44 78 40 40
>3ffb88	00 00 3c 44 44 3c 04 04 00 00 78 44 40 40 00 00
>3ffb98	00 00 1c 30 0c 38 00 00 00 10 7c 10 10 10 0c 00
>3ffba8	00 00 44 44 44 3c 00 00 00 00 42 42 24 18 00 00
>3ffbb8	00 00 82 82 92 6c 00 00 00 00 24 18 18 24 00 00
>3ffbc8	00 00 24 24 24 1c 04 38 00 00 7c 18 30 7c 00 00
>3ffbd8	0c 10 10 30 30 10 10 0c 18 18 18 00 18 18 18 00
>3ffbe8	30 08 08 0c 0c 08 08 30 00 00 32 7e 4c 00 00 00
>3ffbf8	00 00 10 28 38 00 00 00 00 00 3c 3c 3c 3c 00 00
>3ffc08	00 00 3c 24 24 3c 00 00 00 00 18 3c 3c 18 00 00
>3ffc18	00 00 18 24 24 18 00 00 18 24 24 18 00 00 00 00
>3ffc28	00 3c 42 42 66 24 66 00 00 18 00 18 0c 06 66 3c
>3ffc38	0c 12 30 7c 30 62 fc 00 1c 20 70 20 70 20 1c 00
>3ffc48	02 06 0c d8 f0 e0 c0 00 18 18 ff 00 00 ff 00 00
>3ffc58	00 00 ff 00 00 ff 18 18 24 24 24 e7 e7 24 24 24
>3ffc68	18 18 ff 00 00 ff 18 18 24 24 24 27 27 24 24 24
>3ffc78	24 24 24 e4 e4 24 24 24 00 00 00 ff ff ff ff ff
>3ffc88	00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>3ffc98	ff ff ff ff ff ff ff 00 ff ff ff ff ff ff 00 00
>3ffca8	ff ff ff ff ff 00 00 00 ff ff ff ff 00 00 00 00
>3ffcb8	f8 f8 f8 f8 f8 f8 f8 f8 fc fc fc fc fc fc fc fc
>3ffcc8	fe fe fe fe fe fe fe fe 7f 7f 7f 7f 7f 7f 7f 7f
>3ffcd8	3f 3f 3f 3f 3f 3f 3f 3f 1f 1f 1f 1f 1f 1f 1f 1f
>3ffce8	0f 0f 0f 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00
>3ffcf8	00 00 00 00 00 00 00 00 ff ff ff ff ff ff ff ff
>3ffd08	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 00 ff ff ff ff
>3ffd18	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>3ffd28	80 80 80 80 80 80 80 80 aa 55 aa 55 aa 55 aa 55
>3ffd38	01 01 01 01 01 01 01 01 00 00 00 00 aa 55 aa 55
>3ffd48	ff fe fc f8 f0 e0 c0 80 03 03 03 03 03 03 03 03
>3ffd58	18 18 18 1f 1f 18 18 18 00 00 00 00 0f 0f 0f 0f
>3ffd68	18 18 18 1f 1f 00 00 00 00 00 00 f8 f8 18 18 18
>3ffd78	00 00 00 00 00 00 ff ff 00 00 00 1f 1f 18 18 18
>3ffd88	18 18 18 ff ff 00 00 00 00 00 00 ff ff 18 18 18
>3ffd98	18 18 18 f8 f8 18 18 18 c0 c0 c0 c0 c0 c0 c0 c0
>3ffda8	e0 e0 e0 e0 e0 e0 e0 e0 07 07 07 07 07 07 07 07
>3ffdb8	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00
>3ffdc8	00 00 00 00 00 ff ff ff 03 03 03 03 03 03 ff ff
>3ffdd8	00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>3ffde8	18 18 18 f8 f8 00 00 00 f0 f0 f0 f0 00 00 00 00
>3ffdf8	f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 ff ff 00 00 00
>3ffe08	08 1c 3e 7f 7f 1c 3e 00 18 18 18 18 18 18 18 18
>3ffe18	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00
>3ffe28	00 ff ff 00 00 00 00 00 00 00 00 00 ff ff 00 00
>3ffe38	30 30 30 30 30 30 30 30 0c 0c 0c 0c 0c 0c 0c 0c
>3ffe48	00 00 00 e0 f0 38 18 18 18 18 1c 0f 07 00 00 00
>3ffe58	18 18 38 f0 e0 00 00 00 c0 c0 c0 c0 c0 c0 ff ff
>3ffe68	c0 e0 70 38 1c 0e 07 03 03 07 0e 1c 38 70 e0 c0
>3ffe78	ff ff c0 c0 c0 c0 c0 c0 ff ff 03 03 03 03 03 03
>3ffe88	00 3c 7e 7e 7e 7e 3c 00 00 00 00 00 00 ff ff 00
>3ffe98	36 7f 7f 7f 3e 1c 08 00 60 60 60 60 60 60 60 60
>3ffea8	00 00 00 07 0f 1c 18 18 c3 e7 7e 3c 3c 7e e7 c3
>3ffeb8	00 3c 7e 66 66 7e 3c 00 18 18 66 66 18 18 3c 00
>3ffec8	06 06 06 06 06 06 06 06 08 1c 3e 7f 3e 1c 08 00
>3ffed8	18 18 18 ff ff 18 18 18 c0 c0 30 30 c0 c0 30 30
>3ffee8	18 18 18 18 18 18 18 18 00 00 03 3e 76 36 36 00
>3ffef8	ff 7f 3f 1f 0f 07 03 01 24 24 24 24 24 24 24 24
>3fff08	00 00 ff 00 00 ff 00 00 00 00 3f 20 20 27 24 24
>3fff18	00 00 ff 00 00 e7 24 24 00 00 fc 04 04 e4 24 24
>3fff28	24 24 27 20 20 3f 00 00 24 24 e7 00 00 ff 00 00
>3fff38	24 24 e4 04 04 fc 00 00 24 24 27 20 20 27 24 24
>3fff48	24 24 e4 04 04 e4 24 24 24 24 e7 00 00 e7 24 24
>3fff58	0f 0f 0f 0f f0 f0 f0 f0 01 03 07 0f 1f 3f 7f ff
>3fff68	80 c0 e0 f0 f8 fc fe ff 33 99 cc 66 33 99 cc 66
>3fff78	cc 99 33 66 cc 99 33 66 f0 f0 f0 f0 ff ff ff ff
>3fff88	0f 0f 0f 0f ff ff ff ff ff ff ff ff f0 f0 f0 f0
>3fff98	ff ff ff ff 0f 0f 0f 0f 05 0a 05 0a 00 00 00 00
>3fffa8	00 00 00 00 0a 05 0a 05 a0 50 a0 50 00 00 00 00
>3fffb8	00 00 00 00 a0 50 a0 50 0a 05 0a 05 0a 05 0a 05
>3fffc8	aa 55 aa 55 00 00 00 00 00 18 3c 7e 18 18 18 18
>3fffd8	00 10 30 7f 7f 30 10 00 00 08 0c fe fe 0c 08 00
>3fffe8	18 18 18 18 7e 3c 18 00 00 00 36 49 36 00 00 00
>3ffff8	00 00 00 00 00 00 00 00
>3a0000	5c 28 60 3a 5c 3a 46 3a		.binary "binaries/basic816.bin"
>3a0008	5c 33 1f 3a 5c 40 01 3a 5c 58 00 3a 5c d6 00 3a
>3a0018	5c 53 02 3a 5c e4 00 3a 5c ff 00 3a 5c 06 01 3a
>3a0028	0b 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 85 b3
>3a0038	c2 20 a5 a4 d0 06 e2 20 a5 a6 f0 11 c2 10 a4 a9
>3a0048	c4 a7 f0 09 e2 20 a5 b3 97 a4 c8 84 a9 28 2b 60
>3a0058	08 c2 10 e2 20 a9 01 20 1c 00 a2 00 00 a9 00 9f
>3a0068	00 4c 00 e8 e0 00 01 d0 f6 a2 00 00 20 14 00 c9
>3a0078	0d d0 03 4c cf 00 c9 9d d0 08 e0 00 00 f0 ed ca
>3a0088	80 39 c9 1d d0 0e bf 00 4c 00 f0 e0 e0 4f 00 f0
>3a0098	db e8 80 27 c9 08 d0 1a e0 00 00 f0 cf da bf 01
>3a00a8	4c 00 9f 00 4c 00 f0 06 e8 e0 ff 00 d0 f0 fa ca
>3a00b8	80 0e c9 20 90 b6 9f 00 4c 00 e8 20 18 00 80 ac
>3a00c8	a9 08 20 18 00 80 a5 a9 00 20 1c 00 28 60 22 4c
>3a00d8	10 00 60 20 14 00 48 20 18 00 68 60 08 e2 20 c9
>3a00e8	00 f0 08 af 10 00 af 09 01 80 06 af 10 00 af 29
>3a00f8	fe 8f 10 00 af 28 60 08 22 84 10 00 28 60 48 da
>3a0108	5a 0b 08 e2 20 c2 10 a2 00 00 a9 20 9f 00 a0 af
>3a0118	af 1e 00 00 9f 00 c0 af e8 e0 00 20 d0 ec 08 c2
>3a0128	20 48 a9 00 00 5b 68 28 a2 00 00 a0 00 00 22 84
>3a0138	10 00 28 2b 7a fa 68 60 da 5a 0b 08 08 c2 20 48
>3a0148	a9 00 08 5b 68 28 c2 30 af 0c 00 00 85 08 e2 20
>3a0158	af 0e 00 00 c2 20 29 ff 00 85 0a a9 80 00 8f 08
>3a0168	01 00 af 1c 00 00 3a 8f 0a 01 00 18 a5 08 6f 0c
>3a0178	01 00 85 08 a5 0a 69 00 00 85 0a e2 20 a0 00 00
>3a0188	a2 00 00 b7 08 9f 00 4f 00 e8 c8 c0 80 00 d0 f3
>3a0198	ca bf 00 4f 00 c9 20 d0 09 a9 00 9f 00 4f 00 ca
>3a01a8	10 ef 28 2b 7a fa 60 e2 20 a9 48 8f 0f 00 00 a9
>3a01b8	34 8f 13 00 00 a9 20 8f 08 00 af 8f 09 00 af a2
>3a01c8	00 00 a9 00 9f 10 f0 3a e8 e0 12 00 d0 f6 a9 80
>3a01d8	8f b2 08 00 e2 20 a9 00 8f 89 0f 00 60 08 e2 20
>3a01e8	48 48 a9 00 22 3c 10 00 68 22 18 10 00 af 89 0f
>3a01f8	00 29 01 d0 f8 68 28 60 08 e2 20 48 48 a9 01 22
>3a0208	3c 10 00 68 22 18 10 00 af 89 0f 00 29 01 d0 f8
>3a0218	68 28 60 08 c2 20 48 e2 20 a9 0d 20 18 00 c2 20
>3a0228	68 28 60 08 22 78 10 00 28 60 08 0b 08 c2 20 48
>3a0238	a9 00 08 5b 68 28 e2 20 a5 b4 1a 85 b4 cf 13 00
>3a0248	00 90 05 20 14 00 64 b4 2b 28 60 08 e2 20 c2 10
>3a0258	da 5a 8f b3 08 00 af b2 08 00 29 20 f0 07 af b3
>3a0268	08 00 20 28 00 af b2 08 00 29 80 f0 07 af b3 08
>3a0278	00 20 e5 01 af b2 08 00 29 40 f0 14 af b3 08 00
>3a0288	20 00 02 af b3 08 00 c9 0d d0 05 a9 0a 20 00 02
>3a0298	7a fa 28 60 08 e2 20 bd 00 00 f0 06 20 18 00 e8
>3a02a8	80 f5 28 60 08 c2 20 48 48 4a 4a 4a 4a 4a 4a 4a
>3a02b8	4a 20 c6 02 68 29 ff 00 20 c6 02 68 28 60 08 c2
>3a02c8	20 48 e2 20 48 4a 4a 4a 4a 20 dd 02 68 20 dd 02
>3a02d8	c2 20 68 28 60 08 c2 30 da 29 0f 00 aa bf 00 d0
>3a02e8	3a 20 18 00 fa 28 60 08 e2 20 c9 5b b0 04 c9 41
>3a02f8	b0 0b c9 7b b0 04 c9 61 b0 03 28 18 60 28 38 60
>3a0308	08 e2 20 c9 3a b0 04 c9 30 b0 03 28 18 60 28 38
>3a0318	60 08 e2 20 c9 3a b0 04 c9 30 b0 13 c9 67 b0 04
>3a0328	c9 61 b0 0b c9 47 b0 04 c9 41 b0 03 28 18 60 28
>3a0338	38 60 08 e2 20 c9 3a b0 04 c9 30 b0 12 c9 67 b0
>3a0348	04 c9 61 b0 0f c9 47 b0 04 c9 41 b0 09 28 60 38
>3a0358	e9 30 80 f9 29 df 38 e9 37 80 f2 08 e2 20 c9 7b
>3a0368	b0 06 c9 61 90 02 29 df 28 60 08 e2 20 c2 10 bd
>3a0378	00 00 f0 09 20 63 03 9d 00 00 e8 80 f2 28 60 08
>3a0388	0b 08 c2 20 48 a9 00 08 5b 68 28 c2 20 48 06 21
>3a0398	26 23 a5 21 85 0c a5 23 85 0e 06 0c 26 0e 06 0c
>3a03a8	26 0e 18 a5 21 65 0c 85 21 a5 23 65 0e 85 23 68
>3a03b8	2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2
>3a03c8	20 a5 21 8f 12 01 00 a9 0a 00 8f 10 01 00 af 14
>3a03d8	01 00 85 21 64 23 af 16 01 00 85 27 64 29 e2 20
>3a03e8	a9 00 85 25 85 2b 2b 28 60 08 0b 08 c2 20 48 a9
>3a03f8	00 08 5b 68 28 c2 20 a5 21 8f 12 01 00 a9 64 00
>3a0408	8f 10 01 00 af 14 01 00 85 21 64 23 af 16 01 00
>3a0418	85 27 64 29 e2 20 a9 00 85 25 85 2b 2b 28 60 08
>3a0428	c2 20 a5 21 d0 08 a5 23 d0 04 28 e2 02 60 28 c2
>3a0438	02 60 08 e2 20 a5 25 c9 00 d0 02 28 60 08 c2 20
>3a0448	48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 dc
>3a0458	d2 08 08 e2 20 a5 25 c9 02 d0 02 28 60 08 c2 20
>3a0468	48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 dc
>3a0478	d2 08 08 e2 20 a5 25 c9 00 d0 08 c2 20 a5 23 d0
>3a0488	17 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a0498	04 8f d1 08 00 dc d2 08 08 c2 20 48 a9 00 08 5b
>3a04a8	68 28 e2 20 a9 09 8f d1 08 00 dc d2 08 08 e2 20
>3a04b8	a5 25 c9 00 d0 0e a5 24 d0 1f a5 23 d0 1b a5 22
>3a04c8	d0 17 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a04d8	a9 04 8f d1 08 00 dc d2 08 08 c2 20 48 a9 00 08
>3a04e8	5b 68 28 e2 20 a9 09 8f d1 08 00 dc d2 08 08 0b
>3a04f8	08 c2 20 48 a9 00 08 5b 68 28 c2 30 64 21 64 23
>3a0508	e2 20 64 25 a7 00 c9 26 f0 3a e2 20 a7 00 20 08
>3a0518	03 90 6c 20 87 03 38 e9 30 c2 20 29 ff 00 18 65
>3a0528	21 85 21 a5 23 69 00 00 85 23 20 d4 19 80 db 08
>3a0538	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08
>3a0548	00 dc d2 08 20 d4 19 a7 00 c9 48 f0 04 c9 68 d0
>3a0558	de 20 d4 19 e2 20 a7 00 20 19 03 90 22 20 3a 03
>3a0568	c2 20 06 21 26 23 06 21 26 23 06 21 26 23 06 21
>3a0578	26 23 29 ff 00 18 65 21 85 21 20 d4 19 80 d5 2b
>3a0588	28 60 08 c2 30 38 a5 04 e5 18 a8 e2 20 b7 18 f0
>3a0598	10 c9 20 f0 06 c9 09 f0 02 28 60 88 c0 ff ff d0
>3a05a8	ec a9 00 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28
>3a05b8	c2 30 a5 18 85 00 e2 20 a5 1a 85 02 20 f5 19 a7
>3a05c8	00 20 08 03 90 0c 20 f6 04 c2 20 a5 21 85 d5 20
>3a05d8	f5 19 c2 20 a5 00 85 18 e2 20 a5 02 85 1a 20 fa
>3a05e8	05 e2 20 20 6b 06 c9 00 f0 05 20 ea 07 80 f4 2b
>3a05f8	28 60 08 c2 20 a5 18 85 00 a5 1a 85 02 a2 00 00
>3a0608	e2 20 a0 00 00 e0 00 00 f0 0d b7 00 f0 53 c9 3a
>3a0618	f0 04 c9 20 d0 33 c8 b7 00 f0 46 c9 52 f0 10 c9
>3a0628	72 d0 26 b7 00 f0 3a c9 52 f0 04 c9 72 d0 1a c8
>3a0638	b7 00 f0 2d c9 45 f0 04 c9 65 d0 0d c8 b7 00 f0
>3a0648	20 c9 4d f0 0a c9 6d f0 06 e8 20 d4 19 80 b3 a7
>3a0658	00 c9 3a d0 03 20 d4 19 a9 03 85 1c a9 8e 20 ea
>3a0668	07 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a0678	20 a9 7f 85 1c c2 10 20 9f 07 a5 1c d0 03 4c 0e
>3a0688	07 c2 20 a5 18 85 00 e2 20 a5 1a 85 02 c2 20 64
>3a0698	04 64 06 e2 30 a0 00 b7 00 f0 da c9 8e f0 d6 c8
>3a06a8	c4 1c 90 f3 c2 10 a7 00 c9 22 d0 05 20 26 07 80
>3a06b8	28 a5 1c c9 01 f0 19 c2 20 a5 00 c5 18 d0 08 e2
>3a06c8	20 a5 02 c5 1a f0 09 e2 20 a7 04 20 d7 39 b0 09
>3a06d8	e2 20 20 36 07 c9 00 d0 11 c2 20 a5 00 85 04 e2
>3a06e8	20 a5 02 85 06 20 d4 19 80 a9 c9 81 d0 18 20 8a
>3a06f8	05 c9 00 f0 14 89 80 10 0b 20 8b 08 c9 30 f0 04
>3a0708	a9 af 80 02 a9 81 2b 28 60 08 c2 20 48 a9 00 08
>3a0718	5b 68 28 e2 20 a9 02 8f d1 08 00 dc d2 08 08 e2
>3a0728	20 20 d4 19 a7 00 f0 04 c9 22 d0 f5 28 60 08 0b
>3a0738	c2 30 da 5a 08 c2 20 48 a9 00 08 5b 68 28 a9 b5
>3a0748	08 85 08 e2 20 a9 3a 85 0a a2 80 00 e2 20 a0 01
>3a0758	00 b7 08 f0 26 c5 1c d0 29 c2 30 a0 02 00 b7 08
>3a0768	85 0c e2 20 a9 3a 85 0e e2 10 a0 00 b7 00 20 63
>3a0778	03 d7 0c d0 0d c8 c4 1c 90 f2 8a c2 10 7a fa 2b
>3a0788	28 60 c2 30 18 a5 08 69 08 00 85 08 e2 20 a5 0a
>3a0798	69 00 85 0a e8 80 b5 08 0b 8b 08 c2 20 48 a9 00
>3a07a8	08 5b 68 28 c2 30 a9 b5 08 85 08 a9 3a 00 85 0a
>3a07b8	64 0c e2 20 a0 01 00 b7 08 f0 1d c5 1c b0 06 c5
>3a07c8	0c 90 02 85 0c c2 20 18 a5 08 69 08 00 85 08 a5
>3a07d8	0a 69 00 00 85 0a 80 da e2 20 a5 0c 85 1c ab 2b
>3a07e8	28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a07f8	87 00 c2 20 18 a5 00 69 01 00 85 08 a5 02 69 00
>3a0808	00 85 0a e2 10 a4 1c 88 e2 20 b7 08 87 08 f0 13
>3a0818	c2 20 18 a5 08 69 01 00 85 08 a5 0a 69 00 00 85
>3a0828	0a 80 e5 2b 28 60 08 c2 30 29 7f 00 0a 0a 0a 18
>3a0838	69 b5 08 aa 28 60 08 8b 0b 08 c2 20 48 a9 00 08
>3a0848	5b 68 28 08 e2 20 48 a9 3a 48 ab 68 28 e2 20 c2
>3a0858	10 20 2e 08 bd 00 00 c2 20 29 0f 00 2b ab 28 60
>3a0868	08 8b 0b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20
>3a0878	48 a9 3a 48 ab 68 28 c2 30 20 2e 08 bd 04 00 2b
>3a0888	ab 28 60 08 8b 0b 08 c2 20 48 a9 00 08 5b 68 28
>3a0898	08 e2 20 48 a9 3a 48 ab 68 28 e2 20 c2 10 20 2e
>3a08a8	08 bd 00 00 c2 20 29 f0 00 2b ab 28 60 03 01 10
>3a08b8	d0 bc 1f 00 00 03 01 12 d0 f1 1f 00 00 02 01 14
>3a08c8	d0 ff 1f 00 00 02 01 16 d0 18 20 00 00 02 03 18
>3a08d8	d0 2b 20 00 00 00 01 1c d0 00 00 00 00 04 01 1e
>3a08e8	d0 6d 20 00 00 04 01 20 d0 a3 20 00 00 04 01 22
>3a08f8	d0 88 20 00 00 05 03 24 d0 5c 20 00 00 06 03 28
>3a0908	d0 3e 20 00 00 07 02 2c d0 4d 20 00 00 ff 01 2f
>3a0918	d0 00 00 00 00 40 01 31 d0 00 00 00 00 20 03 33
>3a0928	d0 2e 2d 00 00 20 05 37 d0 c5 30 00 00 20 03 3d
>3a0938	d0 24 30 00 00 20 04 41 d0 d8 2f 00 00 20 03 46
>3a0948	d0 cf 2f 00 00 20 02 4a d0 7b 2f 00 00 50 04 4d
>3a0958	d0 00 00 00 00 50 04 52 d0 00 00 00 00 20 05 57
>3a0968	d0 dc 2e 00 00 20 06 5d d0 41 2f 00 00 20 03 64
>3a0978	d0 45 2d 00 00 50 02 68 d0 00 00 00 00 50 04 6b
>3a0988	d0 00 00 00 00 20 04 70 d0 25 2e 00 00 20 02 75
>3a0998	d0 3f 2d 00 00 20 04 78 d0 42 2d 00 00 50 05 7d
>3a09a8	d0 00 00 00 00 50 05 83 d0 00 00 00 00 20 04 89
>3a09b8	d0 3c 2d 00 00 20 03 8e d0 1a 30 00 00 20 04 92
>3a09c8	d0 19 2d 00 00 20 04 97 d0 bd 2c 00 00 20 05 9c
>3a09d8	d0 67 2c 00 00 20 05 a2 d0 08 2c 00 00 20 03 a8
>3a09e8	d0 04 2c 00 00 20 04 ac d0 f9 2a 00 00 20 04 b1
>3a09f8	d0 f7 2b 00 00 20 07 b6 d0 fb 2b 00 00 20 03 be
>3a0a08	d0 60 2a 00 00 20 04 c2 d0 d3 29 00 00 04 02 c7
>3a0a18	d0 f6 20 00 00 04 02 ca d0 d9 20 00 00 04 02 cd
>3a0a28	d0 be 20 00 00 30 01 d0 d0 55 32 00 00 30 03 d2
>3a0a38	d0 01 36 00 00 30 04 d6 d0 47 36 00 00 30 05 db
>3a0a48	d0 c4 36 00 00 30 05 e1 d0 80 36 00 00 30 04 e7
>3a0a58	d0 f9 36 00 00 30 03 ec d0 44 37 00 00 30 03 f0
>3a0a68	d0 7f 37 00 00 30 03 f4 d0 f4 37 00 00 30 03 f8
>3a0a78	d0 69 38 00 00 30 03 fc d0 99 38 00 00 30 04 00
>3a0a88	d1 7a 35 00 00 30 03 05 d1 19 35 00 00 30 04 09
>3a0a98	d1 d2 34 00 00 30 03 0e d1 86 34 00 00 30 05 12
>3a0aa8	d1 db 33 00 00 30 06 18 d1 18 33 00 00 30 04 1f
>3a0ab8	d1 77 32 00 00 10 03 24 d1 1d 39 00 00 10 03 28
>3a0ac8	d1 e8 38 00 00 10 04 2c d1 f3 42 00 00 10 04 31
>3a0ad8	d1 34 39 00 00 10 03 36 d1 b7 40 00 00 20 05 3a
>3a0ae8	d1 47 42 00 00 10 04 40 d1 a4 42 00 00 20 05 45
>3a0af8	d1 9a 43 00 00 20 03 4b d1 99 44 00 00 10 04 4f
>3a0b08	d1 16 44 00 00 20 06 54 d1 ff 44 00 00 10 07 5b
>3a0b18	d1 e5 38 00 00 20 03 63 d1 69 29 00 00 20 05 67
>3a0b28	d1 af 28 00 00 20 09 6d d1 78 22 00 00 20 09 77
>3a0b38	d1 13 22 00 00 20 0a 81 d1 41 22 00 00 20 07 8c
>3a0b48	d1 80 21 00 00 30 08 94 d1 80 31 00 00 20 07 9d
>3a0b58	d1 15 21 00 00 30 08 a5 d1 ed 31 00 00 20 08 ae
>3a0b68	d1 8f 23 00 00 20 08 b7 d1 f5 22 00 00 20 06 c0
>3a0b78	d1 d0 23 00 00 20 09 c7 d1 8e 24 00 00 20 04 d1
>3a0b88	d1 21 26 00 00 20 04 d6 d1 67 26 00 00 20 04 db
>3a0b98	d1 cd 26 00 00 20 06 e0 d1 69 27 00 00 20 08 e7
>3a0ba8	d1 ec 27 00 00 20 0a f0 d1 20 28 00 00 00 00 00
>3a0bb8	00 00 00 00 00 08 0b 08 c2 20 48 a9 00 08 5b 68
>3a0bc8	28 c2 30 a9 ff ff 85 b8 e2 20 a9 34 85 ba c2 20
>3a0bd8	64 b5 64 bb e2 20 64 b7 64 bd 2b 28 60 5a 08 e2
>3a0be8	20 85 e8 c2 10 86 8d c2 20 a5 0e 48 a5 0c 48 a5
>3a0bf8	12 48 a5 10 48 20 95 0c b0 03 20 19 0c 20 21 0e
>3a0c08	c2 20 68 85 10 68 85 12 68 85 0c 68 85 0e 28 7a
>3a0c18	60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a6
>3a0c28	8d ca 86 0c e8 c2 30 38 a5 b8 e5 0c 85 be e2 20
>3a0c38	a5 ba e9 00 85 c0 20 21 0e e2 20 a5 e8 a0 00 00
>3a0c48	97 c1 a9 00 a0 01 00 97 c1 a0 02 00 97 c1 c2 20
>3a0c58	a9 00 00 97 c1 c2 20 18 a5 b8 69 01 00 a0 05 00
>3a0c68	97 c1 e2 20 c8 c8 a5 ba 69 00 97 c1 c2 20 a5 be
>3a0c78	85 b5 e2 20 a5 c0 85 b7 c2 20 38 a5 c1 e9 01 00
>3a0c88	85 b8 e2 20 a5 c3 e9 00 85 ba 2b 28 60 08 0b 08
>3a0c98	c2 20 48 a9 00 08 5b 68 28 c2 30 c2 20 a5 bb 85
>3a0ca8	c7 e2 20 a5 bd 85 c9 a5 c7 d0 17 e2 20 a5 c9 d0
>3a0cb8	11 c2 20 a9 00 00 85 cd e2 20 a9 00 85 cf 2b 28
>3a0cc8	18 60 c2 20 a0 05 00 b7 c7 85 ca e2 20 c8 c8 b7
>3a0cd8	c7 85 cc c2 20 18 a5 c7 65 8d 85 0c e2 20 a5 c9
>3a0ce8	69 00 85 0e c2 20 18 a5 0c 69 08 00 85 0c e2 20
>3a0cf8	a5 0e 69 00 85 0e c2 20 a5 0c c5 ca d0 28 e2 20
>3a0d08	a5 0e c5 cc d0 20 c2 20 a5 cd d0 5d e2 20 a5 cf
>3a0d18	d0 57 c2 20 a0 02 00 b7 c7 85 bb e2 20 c8 c8 b7
>3a0d28	c7 85 bd 4c d2 0d c2 20 a5 0c 69 08 00 85 10 e2
>3a0d38	20 a5 0e 69 00 85 12 e2 20 a5 c4 c5 10 b0 3e 90
>3a0d48	08 c2 20 a5 c4 c5 10 b0 34 c2 20 a5 c7 85 cd e2
>3a0d58	20 a5 c9 85 cf c2 20 a0 02 00 b7 cd 85 c7 e2 20
>3a0d68	c8 c8 b7 cd 85 c9 4c af 0c c2 20 a0 02 00 b7 c7
>3a0d78	97 cd e2 20 c8 c8 b7 c7 97 cd 4c d2 0d c2 20 a0
>3a0d88	05 00 b7 c7 97 0c e2 20 c8 c8 b7 c7 97 0c c2 20
>3a0d98	a0 02 00 b7 c7 97 0c e2 20 c8 c8 b7 c7 97 0c c2
>3a0da8	20 a5 cd d0 14 e2 20 a5 cd d0 0e c2 20 a5 0c 85
>3a0db8	bb e2 20 a5 0e 85 bd 80 11 c2 20 a0 02 00 a5 0c
>3a0dc8	97 cd e2 20 c8 c8 a5 0e 97 cd c2 20 a5 c7 85 c1
>3a0dd8	e2 20 a5 c9 85 c3 c2 20 a5 c1 85 b5 e2 20 a5 c3
>3a0de8	85 b7 c2 20 a0 05 00 a5 0c 97 c1 e2 20 c8 c8 a5
>3a0df8	0e 97 c1 c2 20 a0 02 00 a9 00 00 97 c1 e2 20 c8
>3a0e08	c8 97 c1 e2 20 a5 e8 e2 20 a0 00 00 97 c1 a0 01
>3a0e18	00 a9 00 97 c1 2b 28 38 60 08 c2 20 38 a5 be e9
>3a0e28	08 00 85 c1 e2 20 a5 c0 e9 00 85 c3 28 60 08 e2
>3a0e38	20 a5 c3 f0 04 c9 35 b0 12 c2 20 a5 c1 f0 0c e2
>3a0e48	20 a0 01 00 b7 c1 1a 97 c1 28 60 00 ea 08 e2 20
>3a0e58	a5 c3 f0 04 c9 35 b0 17 c2 20 a5 c1 f0 11 e2 20
>3a0e68	a0 01 00 b7 c1 3a 97 c1 d0 03 20 79 0e 28 60 00
>3a0e78	ea 08 c2 20 a5 bb d0 21 e2 20 a5 bd d0 1b a5 c3
>3a0e88	85 bd c2 20 a5 c1 85 bb a9 00 00 a0 02 00 97 c1
>3a0e98	c8 c8 e2 20 97 c1 4c 60 0f e2 20 a5 bd c5 c3 90
>3a0ea8	28 c2 20 a5 bb c5 c1 90 20 c2 20 a5 bb a0 02 00
>3a0eb8	97 c1 e2 20 c8 c8 a5 bd 97 c1 c2 20 a5 c1 85 bb
>3a0ec8	e2 20 a5 c3 85 bd 4c 60 0f c2 20 a5 bb 85 08 e2
>3a0ed8	20 a5 bd 85 0a e2 20 a0 04 00 b7 08 c5 c6 90 32
>3a0ee8	d0 0b c2 20 a0 02 00 b7 08 c5 c4 90 25 c2 20 a0
>3a0ef8	02 00 b7 08 97 c1 e2 20 c8 c8 b7 08 97 c1 c2 20
>3a0f08	a5 c1 a0 02 00 97 08 e2 20 a5 c3 c8 c8 97 08 4c
>3a0f18	60 0f c2 20 a0 02 00 b7 08 d0 08 e2 20 c8 c8 b7
>3a0f28	08 f0 19 c2 20 a0 02 00 b7 08 85 0c e2 20 c8 c8
>3a0f38	b7 08 85 0a c2 20 a5 0c 85 08 80 99 c2 20 a5 c1
>3a0f48	a0 02 00 97 08 e2 20 c8 c8 a5 c3 97 08 a9 00 97
>3a0f58	c1 c2 20 a0 02 00 97 c1 20 65 0f 28 60 08 c2 20
>3a0f68	a5 bb 85 c1 e2 20 a5 bd 85 c3 c2 20 a5 c1 d0 09
>3a0f78	e2 20 a5 c3 d0 03 4c 08 10 c2 20 a0 02 00 b7 c1
>3a0f88	85 0c e2 20 c8 c8 b7 c1 85 0e c2 20 a0 05 00 b7
>3a0f98	c1 85 10 e2 20 c8 c8 b7 c1 85 12 c2 20 a5 0c c5
>3a0fa8	10 d0 08 e2 20 a5 0e c5 12 f0 1f c2 20 a0 02 00
>3a0fb8	b7 c1 85 0c e2 20 c8 c8 b7 c1 85 0e c2 20 a5 0c
>3a0fc8	85 c1 e2 20 a5 0e 85 c3 80 a0 c2 20 a0 02 00 b7
>3a0fd8	c1 85 0c e2 20 c8 c8 b7 c1 85 0e c2 20 a0 02 00
>3a0fe8	b7 0c 97 c1 e2 20 c8 c8 b7 0c 97 c1 c2 20 a0 05
>3a0ff8	00 b7 0c 97 c1 e2 20 c8 c8 b7 0c 97 c1 4c 81 0f
>3a1008	28 60 08 c2 10 e2 20 64 14 a5 e0 1a 1a 85 15 e2
>3a1018	20 a5 e1 85 16 c5 ba 90 1f f0 08 c2 20 a5 14 c5
>3a1028	b8 90 15 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a1038	03 8f d1 08 00 dc d2 08 28 60 c9 00 d0 05 c0 01
>3a1048	00 f0 05 09 30 97 14 c8 60 08 c2 30 64 0c a5 23
>3a1058	10 1a 18 a5 21 49 ff ff 69 01 00 85 21 a5 23 49
>3a1068	ff ff 69 00 00 85 23 a9 ff ff 85 0c 64 10 64 12
>3a1078	a2 1f 00 f8 06 21 26 23 a5 10 65 10 85 10 a5 12
>3a1088	65 12 85 12 ca 10 ed d8 e2 20 20 0a 10 a0 00 00
>3a1098	a5 0c f0 04 a9 2d 80 02 a9 20 97 14 c8 a2 03 00
>3a10a8	b5 10 29 f0 4a 4a 4a 4a 20 42 10 b5 10 29 0f 20
>3a10b8	42 10 ca 10 eb c0 01 00 d0 0c a9 20 87 14 a0 01
>3a10c8	00 a9 30 97 14 c8 a9 00 97 14 28 60 00 ea 08 e2
>3a10d8	20 c2 10 a0 00 00 bd 00 00 f0 04 e8 c8 80 f7 28
>3a10e8	60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a10f8	c2 10 08 c2 20 48 e2 20 a5 23 48 ab c2 20 68 28
>3a1108	a6 21 20 d6 10 84 0c 08 c2 20 48 e2 20 a5 29 48
>3a1118	ab c2 20 68 28 a6 27 20 d6 10 c2 20 98 38 65 0c
>3a1128	aa e2 20 a9 02 20 e5 0b c2 20 a5 b5 85 08 e2 20
>3a1138	a5 b7 85 0a a0 00 00 08 c2 20 48 e2 20 a5 23 48
>3a1148	ab c2 20 68 28 a6 21 bd 00 00 f0 06 97 08 e8 c8
>3a1158	80 f5 e2 20 08 c2 20 48 e2 20 a5 29 48 ab c2 20
>3a1168	68 28 a6 27 bd 00 00 97 08 f0 04 e8 c8 80 f5 c2
>3a1178	20 a5 08 85 21 e2 20 a5 0a 85 23 a9 02 85 25 ab
>3a1188	2b 28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28
>3a1198	c2 30 08 c2 20 48 e2 20 a5 23 48 ab c2 20 68 28
>3a11a8	a6 21 20 d6 10 98 aa e8 e2 20 a9 02 20 e5 0b c2
>3a11b8	20 a5 be 85 08 e2 20 a5 c0 85 0a a0 00 00 b7 21
>3a11c8	97 08 f0 03 c8 80 f7 a5 08 85 21 a5 09 85 22 a5
>3a11d8	0a 85 23 a9 00 85 24 ab 2b 28 60 08 e2 20 c2 10
>3a11e8	a0 00 00 b7 21 f0 05 c8 80 f9 84 90 c2 30 c4 27
>3a11f8	90 13 f0 11 a5 8d 30 0d f0 0b c4 8d b0 12 a5 27
>3a1208	d0 0e 4c 64 12 20 0a 10 e2 20 a9 00 87 14 80 39
>3a1218	20 0a 10 c2 30 18 a5 21 65 27 85 21 a5 23 69 00
>3a1228	00 85 23 a0 00 00 e2 20 a7 21 97 14 f0 1b c2 20
>3a1238	18 a5 21 69 01 00 85 21 a5 23 69 00 00 85 23 c8
>3a1248	c4 8d d0 e2 a9 00 00 97 14 c2 20 a5 14 85 21 a5
>3a1258	16 85 23 e2 20 a9 02 85 25 20 8b 11 28 60 48 5a
>3a1268	0b 08 08 c2 20 48 a9 00 08 5b 68 28 c2 30 a9 00
>3a1278	00 85 00 85 18 a9 01 00 85 02 85 1a ad 8a 0f 30
>3a1288	20 a0 02 00 b7 18 f0 0f c5 53 90 10 c5 57 f0 02
>3a1298	b0 05 20 be 12 80 e5 28 2b 7a 68 60 20 9d 1a 80
>3a12a8	db 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 01 8f
>3a12b8	d1 08 00 dc d2 08 08 c2 30 85 21 64 23 20 51 10
>3a12c8	a5 14 1a 85 21 a5 16 85 23 20 30 31 18 a5 18 69
>3a12d8	04 00 85 00 a5 1a 69 00 00 85 02 e2 20 a9 20 20
>3a12e8	18 00 c2 20 20 fd 12 90 fb e2 20 a9 0d 20 18 00
>3a12f8	20 9d 1a 28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b
>3a1308	68 28 08 e2 20 48 a9 00 48 ab 68 28 e2 20 c2 10
>3a1318	a7 00 f0 3a 30 05 20 18 00 80 29 c2 20 29 7f 00
>3a1328	0a 0a 0a 18 69 b5 08 85 08 a9 3a 00 69 00 00 85
>3a1338	0a 08 e2 20 48 a9 3a 48 ab 68 28 a0 02 00 b7 08
>3a1348	aa 20 9c 02 c2 20 20 d4 19 ab 2b 28 18 60 ab 2b
>3a1358	28 38 60 08 c2 20 a9 ff 6f 85 1d a9 ff 7f 85 1f
>3a1368	a9 ff ff 85 21 85 23 85 27 85 29 e2 20 85 25 85
>3a1378	2b 28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28
>3a1388	08 e2 20 48 a9 00 48 ab 68 28 c2 30 5a a4 1d bd
>3a1398	00 00 99 00 00 bd 02 00 99 02 00 e2 20 bd 04 00
>3a13a8	99 04 00 c2 20 38 98 e9 05 00 85 1d 7a ab 2b 28
>3a13b8	60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2
>3a13c8	20 48 a9 00 48 ab 68 28 c2 30 5a 18 a5 1d 69 05
>3a13d8	00 85 1d a8 b9 00 00 9d 00 00 b9 02 00 9d 02 00
>3a13e8	e2 20 b9 04 00 9d 04 00 bd 00 00 7a ab 2b 28 60
>3a13f8	08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20
>3a1408	48 a9 00 48 ab 68 28 e2 20 c2 10 5a a4 1f 99 00
>3a1418	00 88 84 1f 7a ab 2b 28 60 08 0b 8b 08 c2 20 48
>3a1428	a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28
>3a1438	e2 20 c2 10 5a a4 1f c8 84 1f b9 00 00 c2 20 29
>3a1448	ff 00 7a ab 2b 28 60 08 e2 20 a9 01 20 f8 13 28
>3a1458	60 5a 08 8b 08 e2 20 48 a9 00 48 ab 68 28 e2 20
>3a1468	a4 1f b9 01 00 c9 01 d0 08 c2 20 e6 1f ab 28 7a
>3a1478	60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a1488	d1 08 00 dc d2 08 08 0b 8b c2 20 48 08 c2 20 48
>3a1498	a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28
>3a14a8	e2 20 c2 10 a4 1f c0 ff 7f f0 11 20 3e 08 85 0c
>3a14b8	b9 01 00 20 3e 08 c5 0c f0 02 90 08 c2 20 68 ab
>3a14c8	2b 28 18 60 c2 20 68 ab 2b 28 38 60 4c f6 04 08
>3a14d8	e2 20 a9 00 8f 00 4d 00 a2 01 00 20 59 16 20 7a
>3a14e8	04 c2 20 a5 21 9f 00 4d 00 e2 20 af 00 4d 00 1a
>3a14f8	30 34 8f 00 4d 00 e8 e8 20 f5 19 e2 20 a7 00 c9
>3a1508	8d f0 09 c9 2c d0 0a 20 d4 19 80 cf 20 d4 19 28
>3a1518	60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a1528	d1 08 00 dc d2 08 08 c2 20 48 a9 00 08 5b 68 28
>3a1538	e2 20 a9 0a 8f d1 08 00 dc d2 08 08 20 37 3c 90
>3a1548	23 e2 20 a5 e8 29 80 d0 06 20 ab 3a 4c 6a 15 e2
>3a1558	20 a9 8c 20 cd 1a 20 4f 14 20 d7 14 20 f6 3e 20
>3a1568	59 14 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a1578	a9 02 8f d1 08 00 dc d2 08 08 0b 08 c2 20 48 a9
>3a1588	00 08 5b 68 28 e2 20 c2 10 20 d4 19 a0 00 00 b7
>3a1598	00 f0 24 c9 22 f0 03 c8 80 f5 84 0c e2 20 a9 02
>3a15a8	a6 0c e8 20 e5 0b a0 00 00 c4 0c f0 1f a7 00 97
>3a15b8	be c8 20 d4 19 80 f2 08 c2 20 48 a9 00 08 5b 68
>3a15c8	28 e2 20 a9 02 8f d1 08 00 dc d2 08 a9 00 97 be
>3a15d8	c2 20 a5 be 85 21 e2 20 a5 c0 85 23 a9 02 85 25
>3a15e8	20 d4 19 2b 28 60 08 e2 20 a7 00 c2 20 29 ff 00
>3a15f8	20 68 08 85 2d 20 4f 14 08 e2 20 48 a9 00 48 ab
>3a1608	68 28 20 12 16 20 59 14 28 60 20 d4 19 6c 2d 08
>3a1618	08 0b 8b c2 20 48 08 c2 20 48 a9 00 08 5b 68 28
>3a1628	c2 30 a2 27 08 20 b9 13 a2 21 08 20 b9 13 20 21
>3a1638	14 20 68 08 85 2d 08 e2 20 48 a9 00 48 ab 68 28
>3a1648	20 56 16 a2 21 08 20 7b 13 68 ab 2b 28 60 6c 2d
>3a1658	08 08 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48
>3a1668	a9 00 48 ab 68 28 c2 10 da e2 20 a7 00 d0 03 4c
>3a1678	1c 17 30 33 c9 20 d0 03 4c 16 17 c9 3a b0 04 c9
>3a1688	30 b0 56 c9 26 f0 52 c9 22 d0 03 4c 2f 17 c9 5b
>3a1698	b0 07 c9 41 90 03 4c 3b 17 c9 7b b0 07 c9 61 90
>3a16a8	03 4c 3b 17 4c 1c 17 c9 8c f0 40 c9 8d f0 41 20
>3a16b8	8b 08 c9 30 d0 0c 20 ee 15 a2 21 08 20 7b 13 4c
>3a16c8	71 16 c9 00 d0 4e a7 00 a6 1f e0 ff 7f f0 05 20
>3a16d8	8e 14 b0 12 20 f8 13 80 35 c2 20 20 d4 14 a2 21
>3a16e8	08 20 7b 13 80 83 20 18 16 80 dd 20 f8 13 80 1e
>3a16f8	e2 20 a4 1f c0 ff 7f f0 46 a4 1f b9 01 00 c9 01
>3a1708	f0 3d c9 8c f0 05 20 18 16 80 ee 20 21 14 20 d4
>3a1718	19 4c 71 16 a6 1f e0 ff 7f b0 24 bd 01 00 c9 01
>3a1728	f0 1d 20 18 16 80 ed 20 81 15 a2 21 08 20 7b 13
>3a1738	4c 71 16 20 43 15 a2 21 08 20 7b 13 4c 71 16 a2
>3a1748	21 08 20 b9 13 fa 28 60 08 0b 8b 08 e2 20 48 a9
>3a1758	00 48 ab 68 28 08 c2 20 48 a9 00 08 5b 68 28 c2
>3a1768	30 a9 fd 5f 85 31 ab 2b 28 60 08 0b 08 c2 20 48
>3a1778	a9 00 08 5b 68 28 c2 30 92 31 c6 31 c6 31 2b 28
>3a1788	60 08 c2 30 29 ff 00 20 72 17 28 60 08 0b 08 c2
>3a1798	20 48 a9 00 08 5b 68 28 c2 30 e6 31 e6 31 b2 31
>3a17a8	2b 28 60 e2 20 c2 10 20 1b 02 af d1 08 00 0a c2
>3a17b8	20 29 ff 00 a8 08 e2 20 48 a9 3a 48 ab 68 28 be
>3a17c8	fd 17 20 9c 02 c2 20 a5 d5 f0 27 a2 29 18 20 9c
>3a17d8	02 08 e2 20 48 a9 00 48 ab 68 28 c2 20 af d5 08
>3a17e8	00 8f 21 08 00 a9 00 00 8f 23 08 00 20 50 31 20
>3a17f8	1b 02 4c 7b 1f 2d 18 30 18 36 18 43 18 51 18 5f
>3a1808	18 72 18 88 18 98 18 a7 18 b4 18 c5 18 d4 18 e1
>3a1818	18 ef 18 fe 18 0f 19 28 19 3c 19 50 19 66 19 7a
>3a1828	19 20 61 74 00 4f 4b 00 42 72 65 61 6b 00 53 79
>3a1838	6e 74 61 78 20 65 72 72 6f 72 00 4f 75 74 20 6f
>3a1848	66 20 6d 65 6d 6f 72 79 00 54 79 70 65 20 6d 69
>3a1858	73 6d 61 74 63 68 00 56 61 72 69 61 62 6c 65 20
>3a1868	6e 6f 74 20 66 6f 75 6e 64 00 4c 69 6e 65 20 6e
>3a1878	75 6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64 00
>3a1888	53 74 61 63 6b 20 75 6e 64 65 72 66 6c 6f 77 00
>3a1898	53 74 61 63 6b 20 6f 76 65 72 66 6c 6f 77 00 4f
>3a18a8	75 74 20 6f 66 20 72 61 6e 67 65 00 49 6c 6c 65
>3a18b8	67 61 6c 20 61 72 67 75 6d 65 6e 74 00 46 69 6c
>3a18c8	65 20 6e 6f 74 20 66 6f 75 6e 64 00 4e 6f 74 20
>3a18d8	61 20 6e 75 6d 62 65 72 00 4d 61 74 68 20 6f 76
>3a18e8	65 72 66 6c 6f 77 00 4d 61 74 68 20 75 6e 64 65
>3a18f8	72 66 6c 6f 77 00 44 69 76 69 73 69 6f 6e 20 62
>3a1908	79 20 7a 65 72 6f 00 55 6e 61 62 6c 65 20 74 6f
>3a1918	20 72 65 61 64 20 64 69 72 65 63 74 6f 72 79 00
>3a1928	55 6e 61 62 6c 65 20 74 6f 20 6c 6f 61 64 20 66
>3a1938	69 6c 65 00 55 6e 61 62 6c 65 20 74 6f 20 73 61
>3a1948	76 65 20 66 69 6c 65 00 55 6e 61 62 6c 65 20 74
>3a1958	6f 20 64 65 6c 65 74 65 20 66 69 6c 65 00 43 6f
>3a1968	75 6c 64 20 6e 6f 74 20 66 69 6e 64 20 66 69 6c
>3a1978	65 00 43 6f 75 6c 64 20 6e 6f 74 20 75 70 64 61
>3a1988	74 65 20 64 69 72 65 63 74 6f 72 79 00 08 0b 08
>3a1998	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 00 85 d0 2b
>3a19a8	28 60 0b 08 08 c2 20 48 a9 00 08 5b 68 28 08 c2
>3a19b8	20 a9 ab 17 8f d2 08 00 e2 20 a9 3a 8f d4 08 00
>3a19c8	28 20 1a 30 20 fb 2b 64 2f 28 2b 60 08 0b 08 c2
>3a19d8	20 48 a9 00 08 5b 68 28 c2 20 18 a5 00 69 01 00
>3a19e8	85 00 e2 20 a5 02 69 00 85 02 2b 28 60 08 0b 08
>3a19f8	c2 20 48 a9 00 08 5b 68 28 e2 20 a7 00 f0 0f c9
>3a1a08	20 f0 06 c9 09 f0 02 80 05 20 d4 19 80 ed 2b 28
>3a1a18	60 08 e2 20 a7 00 f0 09 c9 3a f0 05 20 d4 19 80
>3a1a28	f3 28 60 08 e2 20 64 34 a7 00 f0 19 c5 35 f0 2c
>3a1a38	c9 98 f0 1e c9 9c f0 1a c9 9b f0 1a c9 9d f0 16
>3a1a48	20 d4 19 80 e3 20 9d 1a c2 20 a5 d5 f0 1d e2 20
>3a1a58	80 d6 e6 34 80 ea c6 34 30 26 80 e4 a5 33 30 06
>3a1a68	a5 34 f0 02 80 da 20 d4 19 28 60 08 c2 20 48 a9
>3a1a78	00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 dc d2 08
>3a1a88	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1
>3a1a98	08 00 dc d2 08 08 c2 30 a0 00 00 b7 18 85 0c 18
>3a1aa8	a5 18 65 0c 85 18 a5 1a 69 00 00 85 1a a0 02 00
>3a1ab8	b7 18 85 d5 18 a5 18 69 04 00 85 00 a5 1a 69 00
>3a1ac8	00 85 02 28 60 08 e2 20 48 20 f5 19 68 e2 20 c7
>3a1ad8	00 d0 08 20 d4 19 20 f5 19 28 60 08 c2 20 48 a9
>3a1ae8	00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 dc d2 08
>3a1af8	08 e2 20 20 f5 19 e2 20 a7 00 f0 10 c9 3a f0 0c
>3a1b08	c5 35 f0 05 20 d4 19 80 ef 28 38 60 28 18 60 5a
>3a1b18	08 e2 20 a0 00 00 b7 00 f0 0d c9 3a f0 07 c9 20
>3a1b28	d0 05 c8 80 f1 a9 00 28 7a 60 08 0b 8b 08 c2 20
>3a1b38	48 a9 00 08 5b 68 28 20 5b 13 e2 20 a9 00 85 da
>3a1b48	ad 8a 0f 30 41 a7 00 c9 3a d0 03 20 d4 19 20 f5
>3a1b58	19 a7 00 d0 03 4c ce 1b 20 ef 02 b0 3e a7 00 10
>3a1b68	10 20 8b 08 85 0c c9 20 d0 03 4c bc 1b a5 d0 f0
>3a1b78	3d 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a1b88	d1 08 00 dc d2 08 08 c2 20 48 a9 00 08 5b 68 28
>3a1b98	e2 20 a9 01 8f d1 08 00 dc d2 08 20 24 30 4c ce
>3a1ba8	1b 08 e2 20 48 a9 00 48 ab 68 28 6c 2d 08 a5 0c
>3a1bb8	c9 10 d0 bd a7 00 20 68 08 c2 20 85 2d 20 5b 13
>3a1bc8	20 d4 19 20 a9 1b ab 2b 28 60 08 58 20 95 19 20
>3a1bd8	50 17 e2 20 9c 8a 0f c2 20 a5 18 85 00 a5 1a 85
>3a1be8	02 4c 10 1c 08 c2 20 a0 02 00 b7 18 85 d5 e2 20
>3a1bf8	a5 da c9 03 f0 12 c2 20 18 a5 18 69 04 00 85 00
>3a1c08	e2 20 a5 1a 69 00 85 02 c2 20 20 32 1b e2 20 a5
>3a1c18	da c9 03 f0 f3 c9 00 d0 27 e2 20 20 f5 19 a7 00
>3a1c28	f0 1e c9 3a f0 15 08 c2 20 48 a9 00 08 5b 68 28
>3a1c38	e2 20 a9 02 8f d1 08 00 dc d2 08 20 d4 19 80 c8
>3a1c48	28 60 08 58 e2 20 a9 80 85 d0 9c 8a 0f 20 50 17
>3a1c58	c2 30 64 2f a0 02 00 b7 18 f0 29 20 ec 1b e2 20
>3a1c68	a5 da c9 01 f0 1e c9 02 f0 ea c9 03 f0 e6 c2 20
>3a1c78	a0 00 00 18 a5 18 77 18 85 18 e2 20 a5 1a 69 00
>3a1c88	85 1a 80 d0 e2 20 a9 00 85 d0 28 60 08 c2 30 c2
>3a1c98	20 a9 00 00 85 08 a9 01 00 85 0a c2 20 a0 02 00
>3a1ca8	b7 08 f0 31 c5 21 f0 1e b0 2b c2 20 a0 00 00 18
>3a1cb8	a5 08 77 08 85 0c e2 20 a5 0a 69 00 85 0a c2 20
>3a1cc8	a5 0c 85 08 80 d7 c2 20 a5 08 85 18 e2 20 a5 0a
>3a1cd8	85 1a 28 38 60 28 18 60 08 e2 20 a7 0c 87 08 c2
>3a1ce8	20 a5 0c c5 00 d0 08 e2 20 a5 0e c5 02 f0 26 c2
>3a1cf8	20 18 a5 0c 69 01 00 85 0c e2 20 a5 0e 69 00 85
>3a1d08	0e c2 20 18 a5 08 69 01 00 85 08 e2 20 a5 0a 69
>3a1d18	00 85 0a 80 c4 28 60 08 e2 20 a7 0c 87 08 c2 20
>3a1d28	a5 0c c5 00 d0 06 a5 0e c5 02 f0 26 c2 20 38 a5
>3a1d38	0c e9 01 00 85 0c e2 20 a5 0e e9 00 85 0e c2 20
>3a1d48	38 a5 08 e9 01 00 85 08 e2 20 a5 0a e9 00 85 0a
>3a1d58	80 c6 28 60 08 a0 00 00 c2 20 18 a5 08 77 08 85
>3a1d68	0c e2 20 a5 0a 69 00 85 0e c2 20 18 a5 d7 69 04
>3a1d78	00 85 00 e2 20 a5 d9 69 00 85 02 a0 00 00 c2 20
>3a1d88	38 a5 d7 f7 08 85 d7 e2 20 a5 d9 e9 00 85 d9 20
>3a1d98	e0 1c 20 1a 30 28 60 08 08 c2 20 48 a9 00 08 5b
>3a1da8	68 28 c2 30 a0 02 00 97 d7 18 a5 d7 69 04 00 85
>3a1db8	08 e2 20 a5 d9 69 00 85 0a e2 20 a0 00 00 b7 18
>3a1dc8	97 08 f0 03 c8 80 f7 c2 20 98 18 69 05 00 85 0c
>3a1dd8	c2 20 a0 00 00 a5 0c 97 d7 c2 20 18 a5 d7 65 0c
>3a1de8	85 0c e2 20 a5 d9 69 00 85 d9 c2 20 a5 0c 85 d7
>3a1df8	c2 20 a0 00 00 a9 00 00 97 d7 c8 c0 05 00 d0 f8
>3a1e08	20 1a 30 28 60 0b 08 08 c2 20 48 a9 00 08 5b 68
>3a1e18	28 c2 30 a9 00 00 85 08 a9 01 00 85 0a a0 02 00
>3a1e28	b7 08 f0 1d c5 d5 f0 25 b0 1d a0 00 00 18 a5 08
>3a1e38	77 08 85 0c a5 0a 69 00 00 85 0a a5 0c 85 08 80
>3a1e48	dc a9 00 00 28 2b 60 a9 01 00 28 2b 60 a9 02 00
>3a1e58	28 2b 60 08 c2 30 a9 05 00 85 10 a0 00 00 e2 20
>3a1e68	b7 18 f0 07 c2 20 e6 10 c8 80 f3 c2 20 a5 08 85
>3a1e78	00 a5 0a 85 02 18 a5 d7 69 04 00 85 0c a5 d9 69
>3a1e88	00 00 85 0e 18 a5 d7 65 10 85 d7 a5 d9 69 00 00
>3a1e98	85 d9 18 a5 d7 69 04 00 85 08 a5 d9 69 00 00 85
>3a1ea8	0a 20 1f 1d c2 20 a5 10 a0 00 00 97 00 a5 d5 a0
>3a1eb8	02 00 97 00 18 a5 00 69 04 00 85 00 a5 02 69 00
>3a1ec8	00 85 02 a0 00 00 e2 20 b7 18 97 00 f0 03 c8 80
>3a1ed8	f7 20 1a 30 28 60 08 c2 30 85 d5 20 0d 1e c9 00
>3a1ee8	00 f0 2c c9 01 00 f0 22 c2 20 a5 08 48 a5 0a 48
>3a1ef8	20 5c 1d 68 85 0a 68 85 08 a5 18 85 00 a5 1a 85
>3a1f08	02 20 f5 19 e2 20 a7 00 f0 0a 20 5b 1e 80 05 a5
>3a1f18	d5 20 9f 1d 28 60 8b 08 08 e2 20 48 a9 3a 48 ab
>3a1f28	68 28 a2 fb d1 20 9c 02 28 ab 60 08 e2 30 a9 01
>3a1f38	20 1c 00 20 db 00 f0 06 c9 0d f0 02 80 f5 28 60
>3a1f48	0b 08 08 c2 20 48 a9 00 08 5b 68 28 c2 30 64 d5
>3a1f58	a9 00 4f 85 18 a9 00 00 85 1a 20 ac 05 c2 20 a5
>3a1f68	d5 d0 05 20 d2 1b 80 07 20 de 1e 28 2b 38 60 28
>3a1f78	2b 18 60 c2 30 a2 ff fe 9a 20 1e 1f 20 08 00 20
>3a1f88	0c 00 a9 00 00 20 1c 00 20 48 1f b0 ef 80 ea e2
>3a1f98	20 a5 25 c5 2b d0 06 c2 20 29 ff 00 60 c2 20 08
>3a1fa8	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08
>3a1fb8	00 dc d2 08 20 97 1f c2 20 c9 00 00 f0 1d c9 02
>3a1fc8	00 d0 03 4c e9 10 08 c2 20 48 a9 00 08 5b 68 28
>3a1fd8	e2 20 a9 04 8f d1 08 00 dc d2 08 18 a5 21 65 27
>3a1fe8	85 21 a5 23 65 29 85 23 60 38 a5 21 e5 27 85 21
>3a1ff8	a5 23 e5 29 85 23 60 a5 21 8f 08 01 00 a5 27 8f
>3a2008	0a 01 00 af 0c 01 00 85 21 af 0e 01 00 85 23 60
>3a2018	a5 21 8f 12 01 00 a5 27 8f 10 01 00 af 14 01 00
>3a2028	85 21 60 a5 21 8f 12 01 00 a5 27 8f 10 01 00 af
>3a2038	16 01 00 85 21 60 c2 20 a5 21 25 27 85 21 a5 23
>3a2048	25 29 85 23 60 c2 20 a5 21 05 27 85 21 a5 23 05
>3a2058	29 85 23 60 c2 20 a5 21 49 ff ff 85 21 a5 23 49
>3a2068	ff ff 85 23 60 c2 20 a5 23 c5 29 90 0b a5 21 c5
>3a2078	27 90 05 64 21 64 23 60 a9 ff ff 85 21 85 23 60
>3a2088	c2 20 a5 29 c5 23 90 0b a5 27 c5 21 90 05 64 21
>3a2098	64 23 60 a9 ff ff 85 21 85 23 60 c2 20 a5 29 c5
>3a20a8	23 d0 0e a5 27 c5 21 d0 08 a9 ff ff 85 21 85 23
>3a20b8	60 64 21 64 23 60 c2 20 a5 29 c5 23 d0 0e a5 27
>3a20c8	c5 21 d0 08 a9 ff ff 85 21 85 23 60 64 21 64 23
>3a20d8	60 c2 20 a5 23 c5 29 90 10 d0 06 a5 21 c5 27 90
>3a20e8	08 a9 ff ff 85 21 85 23 60 64 21 64 23 60 c2 20
>3a20f8	a5 23 c5 29 90 0f f0 05 64 21 64 23 60 a5 21 c5
>3a2108	27 f0 02 b0 f3 a9 ff ff 85 21 85 23 60 08 e2 20
>3a2118	20 59 16 20 b5 04 20 bb 03 a5 21 0a 0a 0a 0a 05
>3a2128	27 48 a9 2c 20 cd 1a 20 59 16 20 b5 04 20 bb 03
>3a2138	a5 21 0a 0a 0a 0a 05 27 48 a9 2c 20 cd 1a 20 59
>3a2148	16 20 b5 04 20 bb 03 a5 21 0a 0a 0a 0a 05 27 48
>3a2158	af 0e 08 af 09 0c 8f 0e 08 af 68 8f 00 08 af 68
>3a2168	8f 02 08 af 68 8f 04 08 af af 0e 08 af 29 f7 8f
>3a2178	0e 08 af 20 19 1a 28 60 08 e2 20 20 59 16 20 b5
>3a2188	04 20 bb 03 a5 21 0a 0a 0a 0a 05 27 48 a9 2c 20
>3a2198	cd 1a 20 59 16 20 b5 04 20 bb 03 a5 21 0a 0a 0a
>3a21a8	0a 05 27 48 a9 2c 20 cd 1a 20 59 16 20 3a 04 20
>3a21b8	f1 03 c2 20 a5 21 85 90 a5 27 85 21 20 bb 03 e2
>3a21c8	20 a5 21 0a 0a 0a 0a 05 27 48 c2 20 a5 90 85 21
>3a21d8	20 bb 03 e2 20 a5 21 0a 0a 0a 0a 05 27 48 af 0e
>3a21e8	08 af 09 0c 8f 0e 08 af 68 8f 0f 08 af 68 8f 0a
>3a21f8	08 af 68 8f 09 08 af 68 8f 06 08 af af 0e 08 af
>3a2208	29 f7 8f 0e 08 af 20 19 1a 28 60 08 20 59 16 20
>3a2218	b5 04 e2 20 a5 21 29 0f 0a 0a 0a 0a 8f 53 08 00
>3a2228	a9 2c 20 cd 1a 20 59 16 20 b5 04 a5 21 29 0f 0f
>3a2238	53 08 00 8f 1e 00 00 28 60 08 e2 20 20 59 16 20
>3a2248	b5 04 a5 21 48 a9 2c 20 cd 1a 20 59 16 20 b5 04
>3a2258	a5 21 48 a9 2c 20 cd 1a 20 59 16 20 b5 04 a5 21
>3a2268	8f 08 00 af 68 8f 09 00 af 68 8f 0a 00 af 28 60
>3a2278	08 e2 20 20 59 16 20 3a 04 a5 21 f0 1e a9 01 8f
>3a2288	04 00 af a9 20 8f 08 00 af 8f 09 00 af a9 48 8f
>3a2298	0f 00 00 a9 34 8f 13 00 00 80 12 a9 00 8f 04 00
>3a22a8	af a9 50 8f 0f 00 00 a9 3c 8f 13 00 00 a9 2c 85
>3a22b8	35 20 f8 1a 90 35 20 d4 19 20 59 16 20 b5 04 a5
>3a22c8	21 48 a9 2c 20 cd 1a 20 59 16 20 b5 04 a5 21 48
>3a22d8	a9 2c 20 cd 1a 20 59 16 20 b5 04 a5 21 8f 05 00
>3a22e8	af 68 8f 06 00 af 68 8f 07 00 af 28 60 08 c2 20
>3a22f8	20 59 16 20 b5 04 a9 af 00 85 9e a5 21 c9 0a 00
>3a2308	b0 5c 0a aa bf 7b 23 3a 85 9c a9 2c 00 20 cd 1a
>3a2318	20 59 16 20 b5 04 a5 21 0a 0a 18 65 9c 85 9c a9
>3a2328	2c 00 20 cd 1a 20 59 16 20 b5 04 a0 02 00 a5 21
>3a2338	e2 20 97 9c a9 2c 20 cd 1a 20 59 16 20 b5 04 a0
>3a2348	01 00 a5 21 e2 20 97 9c a9 2c 20 cd 1a 20 59 16
>3a2358	20 b5 04 a0 00 00 a5 21 e2 20 97 9c 28 60 08 c2
>3a2368	20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d1 08 00
>3a2378	dc d2 08 00 20 00 24 00 28 00 2c 00 30 00 34 00
>3a2388	38 00 3c 40 1f 80 1f 08 20 59 16 20 b5 04 a5 21
>3a2398	8f 00 00 af c2 20 a9 80 02 8f 08 f0 3a a9 e0 01
>3a23a8	8f 0a f0 3a af 08 f0 3a 8f 08 01 00 af 0a f0 3a
>3a23b8	8f 0a 01 00 af 0c 01 00 8f 0c f0 3a e2 20 af 0e
>3a23c8	01 00 8f 0e f0 3a 28 60 08 c2 20 20 59 16 20 b5
>3a23d8	04 c2 20 a5 21 85 53 a9 2c 00 20 cd 1a 20 59 16
>3a23e8	20 b5 04 e2 20 a5 53 d0 05 a5 21 0a 80 04 a5 21
>3a23f8	38 2a 8f 40 01 af c2 20 a9 2c 00 85 35 20 f8 1a
>3a2408	b0 18 c2 20 08 c2 20 a9 00 00 85 21 a9 b0 00 85
>3a2418	23 e2 20 a9 00 85 25 28 80 08 c2 20 20 d4 19 20
>3a2428	59 16 e2 20 38 a5 23 8f 02 f0 3a e9 b0 30 42 8f
>3a2438	43 01 af 8f 06 f0 3a a5 21 8f 00 f0 3a 8f 41 01
>3a2448	af 8f 04 f0 3a a5 22 8f 42 01 af 8f 05 f0 3a 8f
>3a2458	01 f0 3a a9 00 8f 07 f0 3a 8f 03 f0 3a c2 20 af
>3a2468	08 f0 3a 8f 44 01 af af 0a f0 3a 8f 46 01 af 28
>3a2478	60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f
>3a2488	d1 08 00 dc d2 08 08 c2 20 af 04 f0 3a 8f 05 04
>3a2498	af af 0c f0 3a 8f 08 04 af e2 20 af 06 f0 3a 8f
>3a24a8	07 04 af af 0e f0 3a 8f 0a 04 af a9 00 8f 01 04
>3a24b8	af a9 85 8f 00 04 af af 01 04 af 30 fa a9 00 8f
>3a24c8	00 04 af 28 60 08 c2 20 a5 5b 8f 08 01 00 af 08
>3a24d8	f0 3a 8f 0a 01 00 18 af 0c 01 00 65 57 85 0c af
>3a24e8	0e 01 00 69 00 00 85 0e 18 a5 0c 6f 00 f0 3a 85
>3a24f8	9c a5 0e 6f 02 f0 3a 85 9e e2 20 a5 53 87 9c 28
>3a2508	60 c2 20 a9 01 00 85 db 38 a5 5f e5 57 85 67 10
>3a2518	0b 49 ff ff 1a 85 67 a9 ff ff 85 db a9 01 00 85
>3a2528	dd 38 a5 63 e5 5b 85 6b 10 0b 49 ff ff 1a 85 6b
>3a2538	a9 ff ff 85 dd a5 6b c5 67 b0 04 a5 67 80 06 a5
>3a2548	6b 49 ff ff 1a 48 0a 68 6a 85 6f 20 cd 24 a5 57
>3a2558	c5 5f d0 06 a5 5b c5 63 f0 36 a5 6f 85 73 a5 67
>3a2568	49 ff ff 1a c5 73 10 10 f0 0e 38 a5 6f e5 6b 85
>3a2578	6f 18 a5 57 65 db 85 57 a5 73 c5 6b 10 cd f0 cb
>3a2588	18 a5 6f 65 67 85 6f 18 a5 5b 65 dd 85 5b 80 bb
>3a2598	60 08 a9 00 00 8f 00 04 af c2 20 a5 5b 8f 08 01
>3a25a8	00 af 08 f0 3a 8f 0a 01 00 18 af 0c 01 00 65 57
>3a25b8	85 0c e2 20 af 0e 01 00 69 00 85 0e c2 20 18 af
>3a25c8	04 f0 3a 65 0c 8f 05 04 af e2 20 af 06 f0 3a 65
>3a25d8	0e 8f 07 04 af c2 20 38 a5 5f e5 57 85 0c 8f 08
>3a25e8	04 af 38 af 08 f0 3a 8f 0e 04 af 38 a5 63 e5 5b
>3a25f8	8f 0a 04 af a9 01 00 8f 0c 04 af e2 20 af 53 08
>3a2608	00 8f 01 04 af a9 87 8f 00 04 af af 01 04 af 30
>3a2618	fa a9 00 8f 00 04 af 28 60 08 08 c2 20 48 a9 00
>3a2628	08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 30
>3a2638	20 59 16 20 3a 04 a5 21 85 53 a9 2c 00 20 cd 1a
>3a2648	20 59 16 20 3a 04 a5 21 85 57 a9 2c 00 20 cd 1a
>3a2658	20 59 16 20 b5 04 a5 21 85 5b 20 cd 24 28 60 08
>3a2668	08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00
>3a2678	48 ab 68 28 c2 30 20 59 16 20 3a 04 a5 21 85 57
>3a2688	a9 2c 00 20 cd 1a 20 59 16 20 3a 04 a5 21 85 5b
>3a2698	a9 2c 00 20 cd 1a 20 59 16 20 3a 04 a5 21 85 5f
>3a26a8	a9 2c 00 20 cd 1a 20 59 16 20 3a 04 a5 21 85 63
>3a26b8	a9 2c 00 20 cd 1a 20 59 16 20 b5 04 a5 21 85 53
>3a26c8	20 09 25 28 60 08 08 c2 20 48 a9 00 08 5b 68 28
>3a26d8	08 e2 20 48 a9 00 48 ab 68 28 c2 30 20 59 16 20
>3a26e8	3a 04 a5 21 85 57 a9 2c 00 20 cd 1a 20 59 16 20
>3a26f8	3a 04 a5 21 85 5b a9 2c 00 20 cd 1a 20 59 16 20
>3a2708	3a 04 a5 21 85 5f a9 2c 00 20 cd 1a 20 59 16 20
>3a2718	3a 04 a5 21 85 63 a9 2c 00 20 cd 1a 20 59 16 20
>3a2728	b5 04 a5 21 85 53 20 99 25 28 60 08 e2 20 a5 21
>3a2738	c9 12 b0 18 0a 0a 0a 18 69 00 85 9c a9 02 69 00
>3a2748	85 9d a9 af 69 00 85 9e 64 9f 28 60 08 c2 20 48
>3a2758	a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08 00 dc d2
>3a2768	08 08 e2 20 20 59 16 20 b5 04 20 33 27 a5 21 8f
>3a2778	0e f0 3a a9 2c 20 cd 1a 20 59 16 20 b5 04 a5 21
>3a2788	c9 08 b0 4b 48 a9 2c 20 cd 1a 20 59 16 20 3a 04
>3a2798	c2 20 38 a5 21 e9 00 00 85 21 a5 23 e9 b0 00 85
>3a27a8	23 30 2c c2 20 a5 21 a0 01 00 97 9c e2 20 a5 23
>3a27b8	c8 c8 97 9c af 0e f0 3a aa bf 10 f0 3a 29 f1 85
>3a27c8	0c 68 0a 29 0e 05 0c 87 9c 9f 10 f0 3a 28 60 08
>3a27d8	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08
>3a27e8	00 dc d2 08 08 c2 20 20 59 16 20 b5 04 20 33 27
>3a27f8	a9 2c 00 20 cd 1a 20 59 16 20 3a 04 a5 21 a0 04
>3a2808	00 97 9c a9 2c 00 20 cd 1a 20 59 16 20 3a 04 a5
>3a2818	21 a0 06 00 97 9c 28 60 08 c2 20 20 59 16 20 b5
>3a2828	04 20 33 27 a5 21 8f 0e f0 3a a9 2c 00 20 cd 1a
>3a2838	20 59 16 20 3a 04 a5 21 48 a9 2c 00 85 35 20 f8
>3a2848	1a b0 1c af 0e f0 3a aa bf 10 f0 3a 29 fe 00 85
>3a2858	0c 68 29 01 00 05 0c 9f 10 f0 3a 87 9c 80 31 e2
>3a2868	20 20 d4 19 20 59 16 20 b5 04 a5 21 c9 08 b0 22
>3a2878	0a 0a 0a 0a 85 0c 68 29 01 05 0c 85 0c af 0e f0
>3a2888	3a aa bf 10 f0 3a 29 8e 05 0c 87 9c 9f 10 f0 3a
>3a2898	28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09
>3a28a8	8f d1 08 00 dc d2 08 08 20 f5 19 e2 20 a7 00 d0
>3a28b8	03 4c 43 29 c9 3a d0 03 4c 43 29 c9 22 d0 0b 20
>3a28c8	81 15 20 30 31 a9 3b 20 cd 1a 20 ef 02 90 37 20
>3a28d8	37 3c 90 32 a9 3f 20 18 00 a9 20 20 18 00 20 10
>3a28e8	00 e2 20 a5 e8 c9 02 f0 32 c9 00 f0 51 c9 01 f0
>3a28f8	4c 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f
>3a2908	d1 08 00 dc d2 08 08 c2 20 48 a9 00 08 5b 68 28
>3a2918	e2 20 a9 02 8f d1 08 00 dc d2 08 c2 20 a9 00 4c
>3a2928	85 21 a9 00 00 85 23 e2 20 a9 02 85 25 20 8b 11
>3a2938	c2 20 20 d4 3b a9 0d 00 20 18 00 28 60 ea c2 20
>3a2948	a5 00 85 3e a5 02 85 40 a9 00 4c 85 00 a9 00 00
>3a2958	85 02 20 f6 04 c2 20 a5 3e 85 00 a5 40 85 02 80
>3a2968	cf 08 20 f5 19 e2 20 a7 00 f0 49 c9 3a f0 45 20
>3a2978	ef 02 90 42 20 37 3c 90 3d 20 14 00 e2 20 8f 00
>3a2988	4e 00 a9 00 8f 01 4e 00 c2 20 a9 00 4e 85 21 a9
>3a2998	00 00 85 23 e2 20 a9 02 85 25 20 8b 11 20 d4 3b
>3a29a8	20 f5 19 a7 00 f0 0d c9 3a f0 09 c9 2c d0 07 20
>3a29b8	d4 19 80 ae 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a29c8	e2 20 a9 02 8f d1 08 00 dc d2 08 08 20 59 16 20
>3a29d8	3a 04 e2 20 a9 5c 85 a0 c2 20 a5 21 85 a1 e2 20
>3a29e8	a5 23 85 a3 e2 20 a9 2c 85 35 20 f8 1a 90 41 20
>3a29f8	d4 19 20 59 16 20 7a 04 c2 20 a5 21 85 53 e2 20
>3a2a08	a9 2c 85 35 20 f8 1a 90 27 20 d4 19 20 59 16 20
>3a2a18	7a 04 c2 20 a5 21 85 57 e2 20 a9 2c 85 35 20 f8
>3a2a28	1a 90 0d 20 d4 19 20 59 16 20 7a 04 c2 20 a4 21
>3a2a38	a6 57 a5 53 0b 8b 08 22 a0 08 00 28 ab 2b 20 19
>3a2a48	1a 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a2a58	04 8f d1 08 00 dc d2 08 08 e2 20 20 f5 19 20 37
>3a2a68	3c 90 64 a9 8c 20 cd 1a a9 01 20 f8 13 a2 01 00
>3a2a78	a9 00 8f 00 4d 00 20 59 16 20 7a 04 c2 20 a5 21
>3a2a88	9f 00 4d 00 e2 20 af 00 4d 00 1a 8f 00 4d 00 30
>3a2a98	4b e8 e8 20 f5 19 a7 00 c9 2c f0 25 c9 8d d0 27
>3a2aa8	20 d4 19 20 e5 3c c2 20 a5 be 85 21 e2 20 a5 c0
>3a2ab8	85 23 64 24 a5 e8 09 80 85 e8 85 25 20 d4 3b 28
>3a2ac8	60 20 d4 19 4c 7e 2a 08 c2 20 48 a9 00 08 5b 68
>3a2ad8	28 e2 20 a9 02 8f d1 08 00 dc d2 08 08 c2 20 48
>3a2ae8	a9 00 08 5b 68 28 e2 20 a9 0a 8f d1 08 00 dc d2
>3a2af8	08 08 20 f5 19 e2 20 a7 00 f0 28 c9 3a f0 24 20
>3a2b08	ef 02 90 21 20 37 3c 90 1c 20 42 2b 20 d4 3b 20
>3a2b18	f5 19 a7 00 f0 0d c9 3a f0 09 c9 2c d0 07 20 d4
>3a2b28	19 80 cf 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a2b38	20 a9 02 8f d1 08 00 dc d2 08 08 a5 02 85 40 a5
>3a2b48	00 85 3e a5 1a 85 44 a5 18 85 42 c2 20 a5 38 d0
>3a2b58	04 a5 36 f0 44 a5 36 85 00 a5 38 85 02 a5 3a 85
>3a2b68	18 a5 3c 85 1a e2 20 a7 00 f0 49 c9 3a f0 45 c9
>3a2b78	2c d0 03 20 d4 19 20 f5 19 a7 00 c9 22 f0 44 20
>3a2b88	08 03 b0 44 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a2b98	a9 02 8f d1 08 00 dc d2 08 c2 20 a9 00 00 85 18
>3a2ba8	a9 01 00 85 1a 18 a5 18 69 04 00 85 00 a5 1a 69
>3a2bb8	00 00 85 02 e2 20 a9 80 85 33 a9 a8 85 35 20 2b
>3a2bc8	1a 80 b3 20 81 15 80 03 20 d4 14 c2 20 a5 00 85
>3a2bd8	36 a5 02 85 38 a5 18 85 3a a5 1a 85 3c a5 42 85
>3a2be8	18 a5 44 85 1a a5 3e 85 00 a5 40 85 02 28 60 20
>3a2bf8	19 1a 60 64 36 64 38 64 3a 64 3c 60 20 24 00 60
>3a2c08	20 59 16 c2 20 a5 23 48 a5 21 48 e2 20 a7 00 c9
>3a2c18	2c d0 22 20 d4 19 20 59 16 c2 20 a5 24 d0 2b 68
>3a2c28	85 08 68 85 0a c2 20 a5 21 87 08 e2 20 a0 02 00
>3a2c38	a5 23 97 08 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a2c48	20 a9 02 8f d1 08 00 dc d2 08 08 c2 20 48 a9 00
>3a2c58	08 5b 68 28 e2 20 a9 09 8f d1 08 00 dc d2 08 20
>3a2c68	59 16 c2 20 a5 23 48 a5 21 48 e2 20 a7 00 c9 2c
>3a2c78	d0 19 20 d4 19 20 59 16 c2 20 a5 23 d0 22 68 85
>3a2c88	08 68 85 0a c2 20 a5 21 87 08 60 08 c2 20 48 a9
>3a2c98	00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 dc d2 08
>3a2ca8	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1
>3a2cb8	08 00 dc d2 08 20 59 16 c2 20 a5 23 48 a5 21 48
>3a2cc8	e2 20 a7 00 c9 2c d0 1f 20 d4 19 20 59 16 e2 20
>3a2cd8	a5 22 d0 28 c2 20 a5 23 d0 22 68 85 08 68 85 0a
>3a2ce8	e2 20 a5 21 87 08 60 08 c2 20 48 a9 00 08 5b 68
>3a2cf8	28 e2 20 a9 02 8f d1 08 00 dc d2 08 08 c2 20 48
>3a2d08	a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08 00 dc d2
>3a2d18	08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 01 8f
>3a2d28	d1 08 00 dc d2 08 08 e2 20 a7 00 f0 05 20 d4 19
>3a2d38	80 f7 28 60 08 28 60 08 28 60 08 28 60 08 c2 20
>3a2d48	a5 1a 20 72 17 a5 18 20 72 17 a5 02 48 a5 00 48
>3a2d58	20 19 1a a5 02 20 72 17 a5 00 20 72 17 68 85 00
>3a2d68	68 85 02 20 f5 19 20 37 3c b0 15 08 c2 20 48 a9
>3a2d78	00 08 5b 68 28 e2 20 a9 05 8f d1 08 00 dc d2 08
>3a2d88	e2 20 a5 e8 20 89 17 a5 e7 20 89 17 c2 20 a5 e5
>3a2d98	20 72 17 20 f5 19 e2 20 a7 00 c9 87 d0 6a a5 e8
>3a2da8	c9 00 f0 04 c9 01 f0 00 20 d4 19 20 59 16 20 d4
>3a2db8	3b e2 20 a9 99 20 cd 1a 20 59 16 c2 20 a5 25 20
>3a2dc8	72 17 a5 23 20 72 17 a5 21 20 72 17 e2 20 a9 9a
>3a2dd8	85 35 20 f8 1a 90 1b 20 d4 19 20 59 16 e2 20 a5
>3a2de8	25 20 72 17 c2 20 a5 23 20 72 17 a5 21 20 72 17
>3a2df8	80 14 c2 20 a9 00 00 20 72 17 a9 00 00 20 72 17
>3a2e08	a9 01 00 20 72 17 28 60 08 c2 20 48 a9 00 08 5b
>3a2e18	68 28 e2 20 a9 02 8f d1 08 00 dc d2 08 08 8b 08
>3a2e28	e2 20 48 a9 00 48 ab 68 28 08 c2 20 48 a9 00 08
>3a2e38	5b 68 28 c2 30 a4 31 c8 c8 c2 20 b9 0c 00 85 e5
>3a2e48	b9 0e 00 e2 20 85 e7 b9 10 00 85 e8 c2 20 5a 20
>3a2e58	ab 3a 7a c2 20 b9 00 00 85 27 b9 02 00 85 29 e2
>3a2e68	20 b9 04 00 85 2b c2 20 5a 20 bc 1f 20 d4 3b 7a
>3a2e78	c2 20 b9 06 00 85 27 b9 08 00 85 29 e2 20 b9 0a
>3a2e88	00 85 2b c2 20 b9 02 00 30 0a 20 f6 20 20 27 04
>3a2e98	f0 28 80 08 20 d9 20 20 27 04 f0 1e c2 20 b9 12
>3a2ea8	00 85 00 b9 14 00 85 02 b9 16 00 85 18 b9 18 00
>3a2eb8	85 1a e2 20 a9 03 85 da 80 17 a2 21 08 20 b9 13
>3a2ec8	c2 20 18 a5 31 69 1a 00 85 31 a5 33 69 00 00 85
>3a2ed8	33 ab 28 60 08 a5 18 48 a5 1a 48 20 f5 19 20 f6
>3a2ee8	04 a5 21 f0 26 20 94 1c 90 38 e2 20 a9 02 85 da
>3a2ef8	20 19 1a c2 20 68 20 72 17 68 20 72 17 a5 02 20
>3a2f08	72 17 a5 00 20 72 17 e6 2f 28 60 68 68 08 c2 20
>3a2f18	48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 dc
>3a2f28	d2 08 68 68 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a2f38	a9 06 8f d1 08 00 dc d2 08 08 c2 30 a5 2f f0 1e
>3a2f48	20 94 17 85 00 20 94 17 85 02 20 94 17 85 18 20
>3a2f58	94 17 85 1a c6 2f e2 20 a9 03 85 da 28 60 08 c2
>3a2f68	20 48 a9 00 08 5b 68 28 e2 20 a9 07 8f d1 08 00
>3a2f78	dc d2 08 08 20 59 16 20 27 04 f0 1c e2 20 a9 94
>3a2f88	20 cd 1a 20 f6 04 20 27 04 f0 12 20 94 1c 90 22
>3a2f98	e2 20 a9 02 85 da 80 03 20 19 1a 28 60 08 c2 20
>3a2fa8	48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 dc
>3a2fb8	d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 06
>3a2fc8	8f d1 08 00 dc d2 08 08 e2 20 a9 01 85 da 28 60
>3a2fd8	08 20 f5 19 20 f6 04 a5 21 f0 0d 20 94 1c 90 1d
>3a2fe8	e2 20 a9 02 85 da 28 60 08 c2 20 48 a9 00 08 5b
>3a2ff8	68 28 e2 20 a9 02 8f d1 08 00 dc d2 08 08 c2 20
>3a3008	48 a9 00 08 5b 68 28 e2 20 a9 06 8f d1 08 00 dc
>3a3018	d2 08 20 5b 13 20 bd 0b 20 aa 39 60 08 a7 00 10
>3a3028	03 20 d4 19 20 37 3c b0 03 4c 9b 30 e2 20 20 17
>3a3038	1b c9 8c d0 0e a9 8c 20 cd 1a a9 00 8f 00 4d 00
>3a3048	20 d7 14 20 f5 19 e2 20 a7 00 c9 87 f0 03 4c 9b
>3a3058	30 20 d4 19 a5 e8 48 a5 e7 48 a5 e6 48 a5 e5 48
>3a3068	20 59 16 68 85 e5 68 85 e6 68 85 e7 68 85 e8 29
>3a3078	80 f0 1b 20 1d 3a 90 30 c2 20 a0 09 00 b7 08 85
>3a3088	be e2 20 c8 c8 b7 08 85 c0 20 a8 3e 80 03 20 d4
>3a3098	3b 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a30a8	02 8f d1 08 00 dc d2 08 08 c2 20 48 a9 00 08 5b
>3a30b8	68 28 e2 20 a9 05 8f d1 08 00 dc d2 08 08 e2 20
>3a30c8	20 17 1b c9 00 f0 5c 20 59 16 e2 20 a5 25 c9 ff
>3a30d8	f0 14 c9 02 d0 05 20 30 31 80 0b c9 00 d0 05 20
>3a30e8	50 31 80 02 80 40 20 f5 19 a7 00 f0 36 c9 3a f0
>3a30f8	32 c9 2c f0 19 c9 3b f0 1a 08 c2 20 48 a9 00 08
>3a3108	5b 68 28 e2 20 a9 02 8f d1 08 00 dc d2 08 a9 09
>3a3118	20 18 00 20 d4 19 20 f5 19 a7 00 f0 09 c9 3a f0
>3a3128	05 80 a4 20 1b 02 28 60 08 8b 08 c2 20 48 a9 00
>3a3138	08 5b 68 28 e2 20 c2 10 a0 00 00 b7 21 f0 06 20
>3a3148	18 00 c8 80 f6 ab 28 60 08 c2 20 20 51 10 a5 14
>3a3158	85 21 a5 16 85 23 20 30 31 28 60 08 e2 20 85 b3
>3a3168	4a 4a 4a 4a 29 0f 18 69 30 97 14 c8 a5 b3 29 0f
>3a3178	18 69 30 97 14 c8 28 60 e2 20 a9 8c 20 cd 1a 08
>3a3188	20 59 16 e2 20 c2 10 af 0e 08 af 09 08 8f 0e 08
>3a3198	af 20 0a 10 a0 00 00 af 06 08 af 20 63 31 a9 2f
>3a31a8	97 14 c8 af 09 08 af 20 63 31 a9 2f 97 14 c8 af
>3a31b8	0f 08 af 20 63 31 af 0a 08 af 20 63 31 a9 00 97
>3a31c8	14 af 0e 08 af 29 f7 8f 0e 08 af c2 20 a5 14 85
>3a31d8	21 a5 16 85 23 e2 20 a9 02 85 25 20 8b 11 28 e2
>3a31e8	20 20 d4 19 60 e2 20 a9 8c 20 cd 1a 08 20 59 16
>3a31f8	e2 20 c2 10 af 0e 08 af 09 08 8f 0e 08 af 20 0a
>3a3208	10 a0 00 00 af 04 08 af 29 7f 20 63 31 a9 3a 97
>3a3218	14 c8 af 02 08 af 20 63 31 a9 3a 97 14 c8 af 00
>3a3228	08 af 20 63 31 a9 00 97 14 af 0e 08 af 29 f7 8f
>3a3238	0e 08 af c2 20 a5 14 85 21 a5 16 85 23 e2 20 a9
>3a3248	02 85 25 20 8b 11 28 e2 20 20 d4 19 60 08 c2 20
>3a3258	20 59 16 20 3a 04 c2 20 a5 21 49 ff ff 85 21 a5
>3a3268	23 49 ff ff 85 23 e6 21 d0 03 e6 23 00 28 60 e2
>3a3278	20 a9 8c 20 cd 1a 08 c2 30 20 59 16 20 5a 04 c2
>3a3288	20 a5 23 48 a5 21 48 20 f5 19 e2 20 a7 00 c9 2c
>3a3298	f0 03 4c ee 32 20 d4 19 20 59 16 20 7a 04 c2 20
>3a32a8	a5 21 48 20 f5 19 e2 20 a7 00 c9 2c f0 03 4c ee
>3a32b8	32 20 d4 19 20 59 16 20 7a 04 c2 20 a5 21 85 8d
>3a32c8	e2 20 a5 23 85 8f c2 20 68 85 27 a9 00 00 85 29
>3a32d8	68 85 21 68 85 23 e2 20 a9 02 85 25 20 e3 11 e2
>3a32e8	20 20 d4 19 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a32f8	e2 20 a9 02 8f d1 08 00 dc d2 08 08 c2 20 48 a9
>3a3308	00 08 5b 68 28 e2 20 a9 09 8f d1 08 00 dc d2 08
>3a3318	e2 20 a9 8c 20 cd 1a 08 c2 30 20 59 16 e2 20 a5
>3a3328	25 c9 02 f0 03 4c 9c 33 c2 20 a5 23 48 a5 21 48
>3a3338	20 f5 19 e2 20 a7 00 c9 2c f0 03 4c b1 33 20 d4
>3a3348	19 20 59 16 e2 20 a5 25 c9 00 d0 48 c2 20 a5 21
>3a3358	85 8d c2 20 68 85 21 68 85 23 e2 20 a9 02 85 25
>3a3368	e2 20 a0 00 00 b7 21 f0 03 c8 80 f9 c2 20 98 38
>3a3378	e5 8d 30 09 85 27 a9 00 00 85 29 80 07 a9 00 00
>3a3388	85 27 85 29 e2 20 a9 00 85 2b 20 e3 11 e2 20 20
>3a3398	d4 19 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a33a8	a9 04 8f d1 08 00 dc d2 08 08 c2 20 48 a9 00 08
>3a33b8	5b 68 28 e2 20 a9 02 8f d1 08 00 dc d2 08 08 c2
>3a33c8	20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08 00
>3a33d8	dc d2 08 e2 20 a9 8c 20 cd 1a 08 c2 30 20 59 16
>3a33e8	e2 20 a5 25 c9 02 f0 03 4c 47 34 c2 20 a5 23 48
>3a33f8	a5 21 48 20 f5 19 e2 20 a7 00 c9 2c f0 03 4c 5c
>3a3408	34 20 d4 19 20 59 16 e2 20 a5 25 c9 00 d0 30 c2
>3a3418	20 a5 21 85 8d c2 20 a9 00 00 85 27 a9 00 00 85
>3a3428	29 e2 20 a9 00 85 2b c2 20 68 85 21 68 85 23 e2
>3a3438	20 a9 02 85 25 20 e3 11 e2 20 20 d4 19 28 60 08
>3a3448	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08
>3a3458	00 dc d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a3468	a9 02 8f d1 08 00 dc d2 08 08 c2 20 48 a9 00 08
>3a3478	5b 68 28 e2 20 a9 09 8f d1 08 00 dc d2 08 e2 20
>3a3488	a9 8c 20 cd 1a 20 59 16 c2 10 e2 20 a5 25 c9 02
>3a3498	d0 23 c2 20 a5 00 85 3e a5 02 85 40 a5 21 85 00
>3a34a8	a5 23 85 02 20 f6 04 a5 3e 85 00 a5 40 85 02 e2
>3a34b8	20 20 d4 19 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a34c8	20 a9 04 8f d1 08 00 dc d2 08 e2 20 a9 8c 20 cd
>3a34d8	1a 08 20 59 16 c2 10 e2 20 a5 25 c9 00 d0 1d 20
>3a34e8	51 10 c2 20 a5 14 85 21 a5 16 85 23 e2 20 a9 02
>3a34f8	85 25 20 8b 11 28 e2 20 20 d4 19 60 08 c2 20 48
>3a3508	a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 dc d2
>3a3518	08 e2 20 a9 8c 20 cd 1a 08 20 59 16 20 5a 04 c2
>3a3528	20 64 0c 64 0e e2 30 a0 00 b7 21 c9 20 f0 04 c9
>3a3538	24 d0 03 c8 80 f3 b7 21 20 19 03 90 1e c2 20 06
>3a3548	0c 26 0e 06 0c 26 0e 06 0c 26 0e 06 0c 26 0e e2
>3a3558	20 20 3a 03 05 0c 85 0c c8 80 db c2 20 a5 0c 85
>3a3568	21 a5 0e 85 23 e2 20 a9 00 85 25 28 e2 20 20 d4
>3a3578	19 60 e2 20 a9 8c 20 cd 1a 08 20 59 16 20 3a 04
>3a3588	20 0a 10 e2 30 a0 ff a9 00 97 14 88 a5 21 29 0f
>3a3598	aa bf 00 d0 3a 97 14 88 a5 21 29 f0 4a 4a 4a 4a
>3a35a8	aa bf 00 d0 3a 97 14 88 a5 22 85 21 a5 23 85 22
>3a35b8	a5 24 85 23 a9 00 85 24 a5 21 d0 d0 a5 22 d0 cc
>3a35c8	a5 23 d0 c8 98 38 65 14 85 21 a5 15 85 22 a5 16
>3a35d8	85 23 a5 17 85 24 a9 02 85 25 20 8b 11 28 e2 20
>3a35e8	20 d4 19 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a35f8	a9 04 8f d1 08 00 dc d2 08 e2 20 a9 8c 20 cd 1a
>3a3608	20 59 16 e2 20 a5 25 c9 02 d0 1f 8b a5 23 48 ab
>3a3618	c2 10 a6 21 20 d6 10 ab 84 21 c2 20 64 23 e2 20
>3a3628	a9 00 85 25 e2 20 20 d4 19 60 08 c2 20 48 a9 00
>3a3638	08 5b 68 28 e2 20 a9 04 8f d1 08 00 dc d2 08 e2
>3a3648	20 a9 8c 20 cd 1a 20 59 16 e2 20 a5 25 c9 00 d0
>3a3658	12 e2 20 a7 21 85 21 64 22 64 23 64 2e e2 20 20
>3a3668	d4 19 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a3678	04 8f d1 08 00 dc d2 08 e2 20 a9 8c 20 cd 1a 20
>3a3688	59 16 e2 20 a5 25 c9 00 d0 1d c2 20 a7 21 85 0c
>3a3698	e2 20 a0 02 00 b7 21 85 23 64 24 c2 20 a5 0c 85
>3a36a8	21 e2 20 20 d4 19 60 08 c2 20 48 a9 00 08 5b 68
>3a36b8	28 e2 20 a9 04 8f d1 08 00 dc d2 08 e2 20 a9 8c
>3a36c8	20 cd 1a 20 59 16 e2 20 a5 25 c9 00 d0 0e c2 20
>3a36d8	a7 21 85 21 64 23 e2 20 20 d4 19 60 08 c2 20 48
>3a36e8	a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 dc d2
>3a36f8	08 e2 20 a9 8c 20 cd 1a 20 59 16 e2 20 a5 25 c9
>3a3708	00 d0 24 20 0a 10 a5 21 87 14 a9 00 a0 01 00 97
>3a3718	14 c2 20 a5 14 85 21 a5 16 85 23 e2 20 a9 02 85
>3a3728	25 e2 20 20 d4 19 60 08 c2 20 48 a9 00 08 5b 68
>3a3738	28 e2 20 a9 04 8f d1 08 00 dc d2 08 e2 20 a9 8c
>3a3748	20 cd 1a 20 59 16 e2 20 a5 25 c9 02 d0 14 a7 21
>3a3758	85 21 64 22 64 23 64 24 a9 00 85 25 e2 20 20 d4
>3a3768	19 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>3a3778	8f d1 08 00 dc d2 08 e2 20 a9 8c 20 cd 1a 20 59
>3a3788	16 e2 20 a5 25 c9 00 d0 39 e2 20 a5 24 d0 48 a5
>3a3798	23 d0 44 a5 22 d0 40 c2 10 20 0a 10 a4 21 e2 20
>3a37a8	a9 00 97 14 88 30 07 a9 20 97 14 88 10 fb a9 02
>3a37b8	85 25 c2 20 a5 14 85 21 a5 16 85 23 e2 20 20 d4
>3a37c8	19 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>3a37d8	8f d1 08 00 dc d2 08 08 c2 20 48 a9 00 08 5b 68
>3a37e8	28 e2 20 a9 09 8f d1 08 00 dc d2 08 e2 20 a9 8c
>3a37f8	20 cd 1a 20 59 16 e2 20 a5 25 c9 00 d0 39 e2 20
>3a3808	a5 24 d0 48 a5 23 d0 44 a5 22 d0 40 c2 10 20 0a
>3a3818	10 a4 21 e2 20 a9 00 97 14 88 30 07 a9 09 97 14
>3a3828	88 10 fb a9 02 85 25 c2 20 a5 14 85 21 a5 16 85
>3a3838	23 e2 20 20 d4 19 60 08 c2 20 48 a9 00 08 5b 68
>3a3848	28 e2 20 a9 04 8f d1 08 00 dc d2 08 08 c2 20 48
>3a3858	a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08 00 dc d2
>3a3868	08 e2 20 a9 8c 20 cd 1a 20 59 16 20 3a 04 c2 20
>3a3878	a5 23 10 17 49 ff ff 85 23 a5 21 49 ff ff 18 69
>3a3888	01 00 85 21 a5 23 69 00 00 85 23 e2 20 20 d4 19
>3a3898	60 e2 20 a9 8c 20 cd 1a 20 59 16 e2 20 a5 25 c9
>3a38a8	00 d0 25 c2 20 a5 23 30 12 d0 04 a5 21 f0 13 a9
>3a38b8	00 00 85 23 a9 01 00 85 21 80 07 a9 ff ff 85 23
>3a38c8	85 21 e2 20 20 d4 19 60 08 c2 20 48 a9 00 08 5b
>3a38d8	68 28 e2 20 a9 04 8f d1 08 00 dc d2 08 00 ea 60
>3a38e8	08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 c2 20
>3a38f8	a9 00 00 85 d7 e2 20 a9 01 85 d9 c2 30 a9 00 00
>3a3908	a0 00 00 97 d7 a0 02 00 97 d7 a0 04 00 97 d7 20
>3a3918	aa 19 2b 28 60 8b 08 c2 20 a9 00 00 85 18 a9 01
>3a3928	00 85 1a 20 aa 19 20 4a 1c 28 ab 60 08 c2 20 64
>3a3938	53 a9 ff 7f 85 57 20 1b 02 20 17 1b 29 ff 00 c9
>3a3948	00 00 f0 2c c9 81 00 f0 1a 20 f5 19 20 f6 04 a5
>3a3958	21 85 53 20 17 1b 29 ff 00 c9 00 00 f0 12 c9 81
>3a3968	00 d0 2a 20 cd 1a 20 f5 19 20 f6 04 a5 21 85 57
>3a3978	a5 1a 48 a5 18 48 a5 02 48 a5 00 48 20 66 12 68
>3a3988	85 00 68 85 02 68 85 18 68 85 1a 28 60 08 c2 20
>3a3998	48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 dc
>3a39a8	d2 08 08 08 c2 20 48 a9 00 08 5b 68 28 c2 20 64
>3a39b8	e2 64 e5 e2 20 64 e4 64 e7 64 e8 c2 20 38 a5 d7
>3a39c8	69 04 00 85 df e2 20 a5 d9 69 00 85 e1 28 60 c9
>3a39d8	5f f0 1a c9 3a b0 04 c9 30 b0 12 c9 5b b0 04 c9
>3a39e8	41 b0 0a c9 7b b0 04 c9 61 b0 02 18 60 38 60 08
>3a39f8	e2 20 c2 10 a0 00 00 b7 0c f0 0a d7 e5 d0 13 c8
>3a3a08	c0 08 00 d0 f2 b7 e5 20 63 03 20 d7 39 b0 03 28
>3a3a18	38 60 28 18 60 08 e2 20 c2 10 a0 00 00 a2 00 00
>3a3a28	b7 e5 f0 0b 20 63 03 9f 00 4e 00 c8 e8 80 f1 a9
>3a3a38	00 9f 00 4e 00 c2 20 a9 00 4e 85 e5 e2 20 a9 00
>3a3a48	85 e7 c2 20 a5 e2 85 08 d0 06 e2 20 a5 e4 f0 4d
>3a3a58	e2 20 a5 e4 85 0a a5 e8 a0 00 00 d7 08 d0 17 c2
>3a3a68	20 18 a5 08 69 01 00 85 0c e2 20 a5 0a 69 00 85
>3a3a78	0e 20 f7 39 b0 2a a0 0d 00 c2 20 b7 08 85 0c c8
>3a3a88	c8 e2 20 b7 08 85 0e d0 06 c2 20 a5 0c f0 0e c2
>3a3a98	20 a5 0c 85 08 e2 20 a5 0e 85 0a 80 b9 28 18 60
>3a3aa8	28 38 60 08 20 1d 3a b0 15 08 c2 20 48 a9 00 08
>3a3ab8	5b 68 28 e2 20 a9 05 8f d1 08 00 dc d2 08 c2 30
>3a3ac8	a0 09 00 b7 08 85 21 c8 c8 b7 08 85 23 e2 20 a0
>3a3ad8	00 00 b7 08 85 25 28 60 08 c2 20 18 a5 df 69 10
>3a3ae8	00 85 08 e2 20 a5 e1 69 00 85 0a c5 ba 90 1d c2
>3a3af8	20 a5 08 c5 b8 90 15 08 c2 20 48 a9 00 08 5b 68
>3a3b08	28 e2 20 a9 09 8f d1 08 00 dc d2 08 c2 20 a5 df
>3a3b18	85 be e2 20 a5 e1 85 c0 c2 20 a5 08 85 df e2 20
>3a3b28	a5 0a 85 e1 28 60 08 e2 20 a5 25 c5 e8 f0 15 08
>3a3b38	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08
>3a3b48	00 dc d2 08 c2 10 20 e0 3a c2 30 18 a5 be 69 01
>3a3b58	00 85 08 e2 20 a5 c0 69 00 85 0a a0 00 00 a9 00
>3a3b68	97 08 c8 c0 08 00 d0 f8 a0 00 00 b7 e5 f0 10 20
>3a3b78	63 03 20 d7 39 90 08 97 08 c8 c0 08 00 d0 ec c2
>3a3b88	20 a0 09 00 a5 21 97 be a5 23 c8 c8 97 be a5 e2
>3a3b98	a0 0d 00 97 be c8 c8 e2 20 a5 e4 97 be c2 20 a5
>3a3ba8	be 85 e2 e2 20 a5 c0 85 e4 e2 20 a0 00 00 a5 25
>3a3bb8	97 be c9 02 f0 02 28 60 c2 20 a5 21 85 be e2 20
>3a3bc8	a5 23 85 c0 20 21 0e 20 36 0e 80 ea 08 c2 30 a5
>3a3bd8	e2 d0 06 e2 20 a5 e4 f0 05 20 1d 3a b0 05 20 2e
>3a3be8	3b 80 17 e2 20 a5 25 c9 02 f0 11 c2 30 a0 09 00
>3a3bf8	a5 21 97 08 c8 c8 a5 23 97 08 28 60 a0 09 00 b7
>3a3c08	08 85 be c8 c8 e2 20 b7 08 85 c0 20 21 0e 20 55
>3a3c18	0e e2 20 a5 25 c9 02 f0 02 80 d0 c2 20 a5 21 85
>3a3c28	be e2 20 a5 23 85 c0 20 21 0e 20 36 0e 80 bc 08
>3a3c38	20 f5 19 e2 20 a7 00 20 ef 02 90 42 c2 20 a5 00
>3a3c48	85 e5 e2 20 a5 02 85 e7 20 d4 19 a7 00 f0 0d c9
>3a3c58	24 f0 14 c9 25 f0 09 20 d7 39 b0 ec a9 00 80 0c
>3a3c68	20 d4 19 a9 00 80 05 20 d4 19 a9 02 85 e8 20 17
>3a3c78	1b c9 8c d0 06 a5 e8 09 80 85 e8 28 38 60 28 18
>3a3c88	60 08 c2 20 48 a9 00 08 5b 68 28 c2 20 a5 21 85
>3a3c98	0c a5 23 64 0e 64 21 64 23 e2 20 64 26 a9 01 85
>3a3ca8	25 c2 20 a5 0c f0 35 10 0e e2 20 a9 80 85 26 c2
>3a3cb8	20 49 ff ff 1a 85 0c e2 20 e6 24 c2 20 46 0e 66
>3a3cc8	0c e2 20 66 23 66 22 66 21 c2 20 a5 0c c9 01 00
>3a3cd8	d0 e5 e2 20 06 26 66 23 66 22 66 21 60 08 20 21
>3a3ce8	0e c2 20 a9 01 00 85 21 a9 00 00 85 23 e2 20 af
>3a3cf8	00 4d 00 c2 20 29 ff 00 85 8d a8 a2 01 00 c2 20
>3a3d08	bf 00 4d 00 85 27 a9 00 00 85 29 20 ff 1f e8 e8
>3a3d18	88 d0 eb c2 20 a9 04 00 85 27 a9 00 00 85 29 20
>3a3d28	ff 1f e2 20 af 00 4d 00 85 0c a9 00 85 0d c2 20
>3a3d38	06 0c 38 a5 21 65 0c 85 21 a5 23 69 00 00 85 23
>3a3d48	d0 29 e2 20 a5 e8 09 80 a6 21 20 e5 0b e2 20 af
>3a3d58	00 4d 00 87 be a0 01 00 a2 00 00 e2 20 bf 01 4d
>3a3d68	00 97 be e4 8d f0 19 e8 c8 80 f0 08 c2 20 48 a9
>3a3d78	00 08 5b 68 28 e2 20 a9 09 8f d1 08 00 dc d2 08
>3a3d88	e2 20 38 a5 be 67 be 85 08 a5 bf 69 00 85 09 a5
>3a3d98	c0 69 00 85 0a 64 0b c2 20 a0 05 00 b7 c1 85 0c
>3a3da8	e2 20 c8 c8 b7 c1 85 0e 64 0f e2 20 a9 00 87 08
>3a3db8	c2 20 18 a5 08 69 01 00 85 08 a5 0a 69 00 00 85
>3a3dc8	0a c5 0e d0 e5 a5 08 c5 0c d0 df 28 60 08 c2 20
>3a3dd8	64 08 64 0a e2 20 af 00 4d 00 85 8d 64 8e a2 01
>3a3de8	00 e2 20 a7 be c5 8d f0 15 08 c2 20 48 a9 00 08
>3a3df8	5b 68 28 e2 20 a9 0a 8f d1 08 00 dc d2 08 c9 01
>3a3e08	f0 3a a0 01 00 e2 20 bf 00 4d 00 85 21 64 22 64
>3a3e18	23 64 24 b7 be 85 27 64 28 64 29 64 2a a5 21 c5
>3a3e28	27 b0 68 20 ff 1f c2 20 18 a5 08 65 21 85 08 a5
>3a3e38	0a 65 23 85 0a e8 e8 c8 c4 8d d0 c9 e2 20 18 bf
>3a3e48	00 4d 00 85 8e 65 08 85 08 a5 09 69 00 85 09 c2
>3a3e58	20 a5 0a 69 00 00 85 0a c2 20 06 08 26 0a 06 08
>3a3e68	26 0a e2 20 38 a5 08 65 8d 85 08 a5 09 69 00 85
>3a3e78	09 c2 20 a5 0a 69 00 00 85 0a 18 a5 08 65 be 85
>3a3e88	08 e2 20 a5 0a 65 c0 85 0a 28 60 08 c2 20 48 a9
>3a3e98	00 08 5b 68 28 e2 20 a9 09 8f d1 08 00 dc d2 08
>3a3ea8	08 20 21 0e e2 20 a0 00 00 b7 c1 29 7f c5 25 d0
>3a3eb8	28 a5 25 48 c2 20 a5 23 48 a5 21 48 20 d5 3d 68
>3a3ec8	85 21 68 85 23 e2 20 68 85 25 c2 20 a5 21 87 08
>3a3ed8	a0 02 00 a5 23 97 08 28 60 08 c2 20 48 a9 00 08
>3a3ee8	5b 68 28 e2 20 a9 04 8f d1 08 00 dc d2 08 08 20
>3a3ef8	21 0e f4 00 00 f4 00 00 e2 20 48 20 d5 3d e2 20
>3a3f08	68 c2 20 68 68 c2 20 a7 08 85 21 a0 02 00 b7 08
>3a3f18	85 23 e2 20 a0 00 00 b7 c1 29 7f 85 25 28 60 da
>3a3f28	0b 08 08 c2 20 48 a9 00 08 5b 68 28 c2 30 a5 23
>3a3f38	89 f0 ff d0 29 89 0f 00 d0 0c a5 21 89 00 fc d0
>3a3f48	05 20 50 31 80 2e a2 0a 00 46 23 66 21 ca d0 f9
>3a3f58	20 50 31 e2 20 a9 4b 20 18 00 c2 20 80 16 a2 14
>3a3f68	00 46 23 66 21 ca d0 f9 20 50 31 e2 20 a9 4d 20
>3a3f78	18 00 c2 20 28 2b fa 60 0b 08 08 c2 20 48 a9 00
>3a3f88	08 5b 68 28 c2 20 20 51 10 20 a2 3f a5 14 85 21
>3a3f98	a5 16 85 23 20 30 31 28 2b 60 5a 0b 08 08 c2 20
>3a3fa8	48 a9 00 08 5b 68 28 e2 20 a7 14 c9 20 d0 1c a0
>3a3fb8	02 00 b7 14 d0 06 a9 30 87 14 80 0f a0 01 00 b7
>3a3fc8	14 87 14 c2 20 e6 14 d0 02 e6 16 28 2b 7a 60 0b
>3a3fd8	08 08 c2 20 48 a9 00 08 5b 68 28 c2 20 8f 44 02
>3a3fe8	00 a2 09 00 4a ca d0 fc 18 69 bc 07 85 21 64 23
>3a3ff8	e2 20 a9 00 85 25 c2 20 20 50 31 a9 2d 00 20 18
>3a4008	00 c2 20 af 44 02 00 a2 05 00 4a ca d0 fc 29 0f
>3a4018	00 85 21 64 23 e2 20 a9 00 85 25 c2 20 20 80 3f
>3a4028	a9 2d 00 20 18 00 c2 20 af 44 02 00 29 1f 00 85
>3a4038	21 64 23 e2 20 a9 00 85 25 c2 20 20 80 3f 28 2b
>3a4048	60 0b 08 08 c2 20 48 a9 00 08 5b 68 28 c2 20 8f
>3a4058	44 02 00 a2 0b 00 4a ca d0 fc 85 21 64 23 e2 20
>3a4068	a9 00 85 25 c2 20 20 50 31 a9 3a 00 20 18 00 c2
>3a4078	20 af 44 02 00 a2 05 00 4a ca d0 fc 29 0f 00 85
>3a4088	21 64 23 e2 20 a9 00 85 25 c2 20 20 80 3f a9 3a
>3a4098	00 20 18 00 c2 20 af 44 02 00 29 1f 00 85 21 64
>3a40a8	23 e2 20 a9 00 85 25 c2 20 20 80 3f 28 2b 60 0b
>3a40b8	08 08 c2 20 48 a9 20 03 5b 68 28 c2 30 a9 00 00
>3a40c8	8f b4 08 00 8f b6 08 00 e2 20 20 1b 02 22 08 11
>3a40d8	00 b0 15 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a40e8	10 8f d1 08 00 dc d2 08 e2 20 a0 00 00 b7 18 d0
>3a40f8	03 82 d2 00 c9 e5 d0 03 82 bf 00 a0 0b 00 b7 18
>3a4108	89 08 f0 03 82 c8 00 89 02 f0 03 82 ac 00 29 0f
>3a4118	c9 0f d0 03 82 a3 00 a0 00 00 b7 18 c9 20 f0 09
>3a4128	20 18 00 c8 c0 08 00 d0 f1 a0 08 00 b7 18 c9 20
>3a4138	f0 17 a9 2e 20 18 00 a0 08 00 b7 18 c9 20 f0 09
>3a4148	20 18 00 c8 c0 0b 00 d0 f1 a9 09 20 18 00 a0 0b
>3a4158	00 b7 18 89 08 d0 60 89 01 f0 05 a9 52 20 18 00
>3a4168	89 04 f0 05 a9 53 20 18 00 89 10 f0 05 a9 44 20
>3a4178	18 00 a9 09 20 18 00 c2 20 a0 1c 00 b7 18 8f 21
>3a4188	08 00 c8 c8 b7 18 8f 23 08 00 e2 20 a9 00 8f 25
>3a4198	08 00 20 27 3f e2 20 a9 09 20 18 00 c2 20 a0 10
>3a41a8	00 b7 18 20 d7 3f e2 20 a9 20 20 18 00 c2 20 a0
>3a41b8	0e 00 b7 18 20 49 40 20 1b 02 20 32 02 22 0c 11
>3a41c8	00 90 03 82 22 ff 20 18 00 20 1b 02 28 2b 60 e2
>3a41d8	20 29 0f c9 0f f0 e3 a9 5b 20 18 00 a0 00 00 b7
>3a41e8	18 c9 20 f0 09 20 18 00 c8 c0 08 00 d0 f1 a9 5d
>3a41f8	20 18 00 80 c2 0b 08 08 c2 20 48 a9 20 03 5b 68
>3a4208	28 c2 30 a9 00 d2 85 20 a9 37 00 85 22 a0 00 00
>3a4218	e2 20 a9 00 97 20 c8 c0 1e 00 d0 f8 c2 20 a9 00
>3a4228	d0 8f 0e d2 37 a9 37 00 8f 10 d2 37 af 21 08 00
>3a4238	8f 02 d2 37 af 23 08 00 8f 04 d2 37 28 2b 60 08
>3a4248	c2 30 20 f5 19 20 59 16 20 5a 04 20 fd 41 e2 20
>3a4258	a9 2c 85 35 20 f8 1a b0 0f c2 20 a9 ff ff 8f 54
>3a4268	03 00 8f 56 03 00 80 17 20 d4 19 20 59 16 20 3a
>3a4278	04 c2 20 a5 21 8f 54 03 00 a5 23 8f 56 03 00 22
>3a4288	18 11 00 b0 15 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a4298	20 a9 11 8f d1 08 00 dc d2 08 28 60 08 c2 30 20
>3a42a8	f5 19 20 59 16 20 5a 04 20 fd 41 a9 ff ff 8f 54
>3a42b8	03 00 8f 56 03 00 22 18 11 00 b0 15 08 c2 20 48
>3a42c8	a9 00 08 5b 68 28 e2 20 a9 11 8f d1 08 00 dc d2
>3a42d8	08 c2 20 af 5c 03 00 85 a1 e2 20 af 5e 03 00 85
>3a42e8	a3 a9 5c 85 a0 22 a0 08 00 28 60 08 c2 30 20 f5
>3a42f8	19 20 59 16 20 5a 04 20 fd 41 a9 00 00 8f 54 03
>3a4308	00 a9 02 00 8f 56 03 00 20 e8 38 22 18 11 00 b0
>3a4318	15 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 11 8f
>3a4328	d1 08 00 dc d2 08 c2 20 a2 12 00 18 bf 00 d2 37
>3a4338	69 00 00 85 90 bf 02 d2 37 69 02 00 85 92 e2 20
>3a4348	a9 00 87 90 c2 20 a9 00 00 85 78 a9 02 00 85 7a
>3a4358	a2 00 00 e2 20 a7 78 f0 28 c9 0d f0 12 c9 0a f0
>3a4368	04 9d 00 4f e8 c2 20 e6 78 d0 e8 e6 7a 80 e4 e2
>3a4378	20 a9 00 9d 00 4f 20 48 1f e6 78 d0 d3 e6 7a 80
>3a4388	cf e0 00 00 f0 0a e2 20 a9 00 9d 00 4f 20 48 1f
>3a4398	28 60 08 c2 30 20 f5 19 20 59 16 20 5a 04 20 fd
>3a43a8	41 e2 20 a9 2c 20 cd 1a c2 20 20 59 16 20 3a 04
>3a43b8	a5 21 8f 50 03 00 a5 23 8f 52 03 00 e2 20 a9 2c
>3a43c8	c2 20 20 cd 1a 20 59 16 20 3a 04 a5 21 8f 58 03
>3a43d8	00 a5 23 8f 5a 03 00 22 1c 11 00 b0 15 08 c2 20
>3a43e8	48 a9 00 08 5b 68 28 e2 20 a9 12 8f d1 08 00 dc
>3a43f8	d2 08 28 60 da 5a 08 a2 00 00 a0 00 00 e2 20 b7
>3a4408	21 9d 00 04 f0 04 e8 c8 80 f5 28 7a fa 60 08 c2
>3a4418	30 20 f5 19 20 59 16 20 5a 04 20 fd 41 a9 00 00
>3a4428	85 a4 e2 20 a9 02 85 a6 a9 20 85 b2 c2 20 a9 00
>3a4438	00 85 a9 a9 ff ff 85 a7 c2 20 a9 00 00 85 53 85
>3a4448	55 a9 ff ff 85 57 a9 ff 7f 85 59 20 66 12 e2 20
>3a4458	a9 80 85 b2 c2 20 c6 a9 18 a9 00 00 8f 50 03 00
>3a4468	65 a9 8f 58 03 00 a9 02 00 8f 52 03 00 69 00 00
>3a4478	8f 5a 03 00 22 1c 11 00 b0 15 08 c2 20 48 a9 00
>3a4488	08 5b 68 28 e2 20 a9 12 8f d1 08 00 dc d2 08 28
>3a4498	60 08 c2 30 20 f5 19 20 59 16 20 5a 04 20 fc 43
>3a44a8	22 04 11 00 b0 15 08 c2 20 48 a9 00 08 5b 68 28
>3a44b8	e2 20 a9 13 8f d1 08 00 dc d2 08 28 60 da 08 e2
>3a44c8	20 c9 61 90 08 c9 7b b0 04 29 df 80 13 c9 20 90
>3a44d8	13 a2 00 00 df f0 44 3a f0 0a e8 e0 0f 00 d0 f4
>3a44e8	28 38 fa 6b 28 18 fa 6b 2a 2b 2c 2f 3a 3b 3c 3d
>3a44f8	3e 3f 5c 5b 5d 7c 22 08 08 c2 20 48 a9 00 08 5b
>3a4508	68 28 c2 30 20 59 16 20 5a 04 20 fc 43 22 10 11
>3a4518	00 b0 15 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a4528	14 8f d1 08 00 dc d2 08 e2 20 a9 2c 20 cd 1a c2
>3a4538	20 20 59 16 20 5a 04 ad 38 03 85 08 ad 3a 03 85
>3a4548	0a e2 20 a2 00 00 a9 20 95 7c e8 e0 0b 00 d0 f8
>3a4558	a2 00 00 a0 00 00 b7 21 f0 56 c9 2e f0 26 22 c5
>3a4568	44 3a b0 15 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a4578	a9 0a 8f d1 08 00 dc d2 08 95 7c c8 e8 c0 08 00
>3a4588	d0 d4 80 01 c8 a2 08 00 b7 21 f0 24 22 c5 44 3a
>3a4598	b0 15 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a
>3a45a8	8f d1 08 00 dc d2 08 95 7c c8 e8 c0 0b 00 d0 d8
>3a45b8	a2 00 00 a0 00 00 b5 7c 97 08 e8 c8 c0 0b 00 d0
>3a45c8	f5 22 14 11 00 b0 15 08 c2 20 48 a9 00 08 5b 68
>3a45d8	28 e2 20 a9 15 8f d1 08 00 dc d2 08 28 60 5c a3
>3a45e8	5f 3a 5c f4 5d 3a 5c a4 5f 3a 5c 20 4f 3a 5c 7d
>3a45f8	4f 3a 5c b0 4e 3a 5c 36 4e 3a 5c b3 53 3a 5c a1
>3a4608	4a 3a 5c ce 4d 3a 5c 89 4d 3a 5c 13 4d 3a 5c b2
>3a4618	5e 3a 5c af 4b 3a 5c 05 4a 3a 5c 2d 5f 3a 5c dd
>3a4628	4a 3a 5c a6 5f 3a 5c 9f 5f 3a 5c cc 4c 3a 5c a7
>3a4638	5f 3a 18 fb c2 20 a9 ff fe 1b 58 5c 47 46 3a c2
>3a4648	30 22 05 4a 3a 20 08 00 20 0c 00 8b e2 20 a9 00
>3a4658	48 ab a2 00 4f 20 72 03 ab 22 ea 45 3a 22 f2 45
>3a4668	3a 80 e2 08 8b e2 20 a9 3a 48 ab c2 10 a2 7e 46
>3a4678	20 9c 02 ab 28 6b 41 20 3c 73 74 61 72 74 3e 20
>3a4688	3c 61 73 73 65 6d 62 6c 79 3e 0d 20 20 41 73 73
>3a4698	65 6d 62 6c 65 20 61 20 70 72 6f 67 72 61 6d 0d
>3a46a8	0d 43 20 3c 73 74 61 72 74 31 3e 20 3c 73 74 61
>3a46b8	72 74 32 3e 20 5b 6c 65 6e 20 28 31 20 69 66 20
>3a46c8	62 6c 61 6e 6b 29 5d 0d 20 20 43 6f 6d 70 61 72
>3a46d8	65 20 74 6f 20 73 65 63 74 69 6f 6e 73 20 6f 66
>3a46e8	20 6d 65 6d 6f 72 79 0d 0d 44 20 3c 73 74 61 72
>3a46f8	74 3e 20 5b 65 6e 64 5d 0d 20 20 44 69 73 61 73
>3a4708	73 65 6d 62 6c 65 20 61 20 70 72 6f 67 72 61 6d
>3a4718	0d 0d 46 20 3c 73 74 61 72 74 3e 20 3c 65 6e 64
>3a4728	3e 20 3c 62 79 74 65 3e 0d 20 20 46 69 6c 6c 20
>3a4738	61 20 62 6c 6f 63 6b 20 6f 66 20 6d 65 6d 6f 72
>3a4748	79 20 77 69 74 68 20 61 20 62 79 74 65 0d 0d 47
>3a4758	20 5b 61 64 64 72 65 73 73 5d 0d 20 20 53 74 61
>3a4768	72 74 20 65 78 65 63 75 74 69 6f 6e 20 61 74 20
>3a4778	61 20 6c 6f 63 61 74 69 6f 6e 0d 0d 4a 20 5b 61
>3a4788	64 64 72 65 73 73 5d 20 2d 20 4a 75 6d 70 20 74
>3a4798	6f 20 61 20 6c 6f 63 61 74 69 6f 6e 20 69 6e 20
>3a47a8	6d 65 6d 6f 72 79 0d 20 20 4a 75 6d 70 20 74 6f
>3a47b8	20 61 20 6c 6f 63 61 74 69 6f 6e 20 69 6e 20 6d
>3a47c8	65 6d 6f 72 79 0d 0d 48 20 3c 73 74 61 72 74 3e
>3a47d8	20 3c 65 6e 64 3e 20 3c 62 79 74 65 3e 20 5b 62
>3a47e8	79 74 65 5d 2e 2e 0d 20 20 48 75 6e 74 20 66 6f
>3a47f8	72 20 76 61 6c 75 65 73 20 69 6e 20 6d 65 6d 6f
>3a4808	72 79 0d 0d 4c 20 20 20 20 20 4c 4f 41 44 20 20
>3a4818	20 20 20 20 20 20 20 22 46 69 6c 65 22 20 5b 64
>3a4828	65 73 74 69 6e 61 74 69 6f 6e 5d 0d 4d 20 3c 73
>3a4838	74 61 72 74 3e 20 5b 65 6e 64 5d 0d 20 20 44 75
>3a4848	6d 70 20 74 68 65 20 76 61 6c 75 65 20 69 6e 20
>3a4858	6d 65 6d 6f 72 79 0d 0d 52 20 2d 20 44 69 73 70
>3a4868	6c 61 79 20 74 68 65 20 76 61 6c 75 65 73 20 6f
>3a4878	66 20 74 68 65 20 72 65 67 69 73 74 65 72 73 0d
>3a4888	0d 3b 20 3c 50 43 3e 20 3c 41 3e 20 3c 58 3e 20
>3a4898	3c 59 3e 20 3c 53 50 3e 20 3c 44 42 52 3e 20 3c
>3a48a8	44 50 3e 20 3c 4e 56 4d 58 44 49 5a 43 3e 0d 20
>3a48b8	20 43 68 61 6e 67 65 20 74 68 65 20 63 6f 6e 74
>3a48c8	65 6e 74 73 20 6f 66 20 74 68 65 20 72 65 67 69
>3a48d8	73 74 65 72 73 0d 0d 53 20 20 20 20 20 53 41 56
>3a48e8	45 20 20 20 20 20 20 20 20 20 22 46 69 6c 65 22
>3a48f8	20 3c 73 74 61 72 74 3e 20 3c 65 6e 64 3e 0d 54
>3a4908	20 3c 73 74 61 72 74 3e 20 3c 65 6e 64 3e 20 3c
>3a4918	64 65 73 74 69 6e 61 74 69 6f 6e 3e 0d 20 20 54
>3a4928	72 61 6e 73 66 65 72 20 28 63 6f 70 79 29 20 64
>3a4938	61 74 61 20 77 69 74 68 69 6e 20 6d 65 6d 6f 72
>3a4948	79 0d 0d 57 20 3c 62 79 74 65 3e 0d 20 20 53 65
>3a4958	74 20 74 68 65 20 72 65 67 69 73 74 65 72 20 77
>3a4968	69 64 74 68 20 66 6c 61 67 73 20 66 6f 72 20 74
>3a4978	68 65 20 64 69 73 61 73 73 65 6d 62 6c 65 72 0d
>3a4988	0d 58 20 2d 20 52 65 74 75 72 6e 20 74 6f 20 42
>3a4998	41 53 49 43 0d 0d 3e 20 3c 73 74 61 72 74 3e 20
>3a49a8	3c 62 79 74 65 3e 20 5b 62 79 74 65 5d 2e 2e 2e
>3a49b8	0d 20 20 45 64 69 74 20 64 61 74 61 20 69 6e 20
>3a49c8	6d 65 6d 6f 72 79 0d 0d 3f 20 2d 20 44 69 73 70
>3a49d8	6c 61 79 20 61 20 73 68 6f 72 74 20 68 65 6c 70
>3a49e8	20 73 63 72 65 65 6e 0d 0d 00 08 08 c2 20 48 a9
>3a49f8	46 08 5b 68 28 e2 20 a5 0d 85 4e 28 6b 08 e2 20
>3a4a08	48 a9 3a 48 ab 68 28 a2 e4 5f 20 9c 02 e2 20 a9
>3a4a18	3b 20 18 00 a9 20 20 18 00 c2 30 08 e2 20 48 a9
>3a4a28	00 48 ab 68 28 a0 03 00 a2 42 02 20 2b 02 c2 20
>3a4a38	a9 20 00 20 18 00 af 44 02 00 20 ac 02 a9 20 00
>3a4a48	20 18 00 af 46 02 00 20 ac 02 a9 20 00 20 18 00
>3a4a58	af 48 02 00 20 ac 02 a9 20 00 20 18 00 af 4a 02
>3a4a68	00 20 ac 02 a9 20 00 20 18 00 af 4e 02 00 20 c6
>3a4a78	02 a9 20 00 20 18 00 20 18 00 af 4c 02 00 20 ac
>3a4a88	02 a9 20 00 20 18 00 08 e2 20 ad 4f 02 22 fd 5c
>3a4a98	3a 28 20 1b 02 20 1b 02 6b 08 0b 08 c2 20 48 a9
>3a4aa8	46 08 5b 68 28 e2 20 a5 15 87 0d e2 20 a5 0f c5
>3a4ab8	13 d0 0e c2 20 a5 0d c5 11 d0 06 20 1b 02 2b 28
>3a4ac8	6b c2 20 18 a5 0d 69 01 00 85 0d e2 20 a5 0e 69
>3a4ad8	00 85 0e 80 d0 08 0b 08 c2 20 48 a9 46 08 5b 68
>3a4ae8	28 e2 20 a5 0f c5 17 90 45 c2 20 a5 0d c5 15 90
>3a4af8	3d e2 20 a7 0d 87 15 a5 0f c5 13 d0 0b c2 20 a5
>3a4b08	0d c5 11 d0 03 4c 94 4b c2 20 18 a5 0d 69 01 00
>3a4b18	85 0d e2 20 a5 0e 69 00 85 0e c2 20 18 a5 15 69
>3a4b28	01 00 85 15 e2 20 a5 16 69 00 85 16 80 c3 c2 20
>3a4b38	38 a5 11 e5 0d 85 19 e2 20 a5 13 e5 0f 85 1b c2
>3a4b48	20 18 a5 19 65 15 85 15 e2 20 a5 1b 65 17 85 17
>3a4b58	e2 20 a7 11 87 15 a5 13 c5 0f d0 0a c2 20 a5 11
>3a4b68	c5 0d d0 02 80 26 c2 20 38 a5 11 e9 01 00 85 11
>3a4b78	e2 20 a5 12 e9 00 85 12 c2 20 38 a5 15 e9 01 00
>3a4b88	85 15 e2 20 a5 16 e9 00 85 16 80 c4 20 1b 02 2b
>3a4b98	28 6b 08 e2 20 c9 21 90 0b c9 7f 90 04 c9 a0 90
>3a4ba8	03 28 38 6b 28 18 6b 08 8b 0b 08 c2 20 48 a9 46
>3a4bb8	08 5b 68 28 e2 20 a9 00 8f b4 08 00 a5 31 c9 02
>3a4bc8	b0 16 c9 01 90 20 c2 20 18 a5 0d 69 00 01 85 11
>3a4bd8	e2 20 a5 0f 69 00 85 13 c2 20 a5 0d 85 32 e2 20
>3a4be8	a5 0f 85 34 80 12 c2 20 18 a5 32 69 00 01 85 11
>3a4bf8	e2 20 a5 34 69 00 85 13 e2 20 a0 00 00 c2 20 a5
>3a4c08	32 85 19 e2 20 a5 34 85 1b e2 20 a7 19 22 9a 4b
>3a4c18	3a b0 02 a9 3f 99 7c 08 c2 20 18 a5 19 69 01 00
>3a4c28	85 19 e2 20 a5 1b 69 00 85 1b c8 c0 08 00 90 db
>3a4c38	a9 00 99 7c 08 a9 3e 20 18 00 a9 20 20 18 00 e2
>3a4c48	20 a5 34 20 c6 02 a9 3a 20 18 00 c2 20 a5 32 20
>3a4c58	ac 02 c2 20 a9 08 00 85 47 e2 20 a9 20 20 18 00
>3a4c68	a7 32 20 c6 02 22 dc 5c 3a e2 20 c6 47 d0 ea a9
>3a4c78	20 20 18 00 a9 20 20 18 00 08 e2 20 48 a9 00 48
>3a4c88	ab 68 28 a2 7c 08 20 9c 02 20 1b 02 20 32 02 a5
>3a4c98	34 c5 13 90 0f c2 20 a5 32 c5 11 90 07 20 1b 02
>3a4ca8	2b ab 28 6b 4c 00 4c 08 8d 90 08 e2 20 bd 00 00
>3a4cb8	99 00 00 ad 90 08 f0 0a c8 e8 e8 e8 e8 ce 90 08
>3a4cc8	80 eb 28 6b 08 0b 8b 08 c2 20 48 a9 46 08 5b 68
>3a4cd8	28 08 e2 20 48 a9 00 48 ab 68 28 c2 30 a5 0d 85
>3a4ce8	32 a5 0f 85 34 e2 20 a5 31 3a 85 47 a2 57 08 a0
>3a4cf8	7c 08 22 af 4c 3a a0 00 00 b9 7c 08 87 32 22 dc
>3a4d08	5c 3a c8 c4 47 d0 f2 ab 2b 28 6b 08 0b 8b 08 c2
>3a4d18	20 48 a9 46 08 5b 68 28 08 e2 20 48 a9 00 48 ab
>3a4d28	68 28 e2 20 c2 10 a5 31 3a 3a 85 47 a2 5b 08 a0
>3a4d38	7c 08 22 af 4c 3a c2 20 a5 0d 85 32 a5 0f 85 34
>3a4d48	c2 20 a5 34 c5 13 d0 06 a5 32 c5 11 f0 2c e2 20
>3a4d58	a0 00 00 b7 32 d9 7c 08 d0 1a c8 c4 47 d0 f4 c2
>3a4d68	20 a5 32 85 4a a5 34 85 4c 22 86 57 3a e2 20 a9
>3a4d78	20 20 18 00 22 dc 5c 3a 80 c6 20 1b 02 ab 2b 28
>3a4d88	6b 08 c2 20 48 a9 46 08 5b 68 28 e2 20 a5 31 f0
>3a4d98	0e c2 30 a5 0d 8f 40 02 00 a5 0f 8f 42 02 00 af
>3a4da8	46 02 00 aa af 48 02 00 a8 af 4a 02 00 1b af 4c
>3a4db8	02 00 5b e2 20 a9 3a 48 a9 4d 48 a9 c9 48 4c 00
>3a4dc8	4e ea 5c 04 00 3a 08 c2 20 48 a9 46 08 5b 68 28
>3a4dd8	e2 20 a5 31 f0 c9 c2 30 a5 0d 8f 40 02 00 a5 0f
>3a4de8	8f 42 02 00 af 46 02 00 aa af 48 02 00 a8 af 4a
>3a4df8	02 00 1b af 4c 02 00 5b e2 20 af 4e 02 00 48 ab
>3a4e08	a9 5c 8f a0 08 00 af 42 02 00 8f a3 08 00 af 41
>3a4e18	02 00 8f a2 08 00 af 40 02 00 8f a1 08 00 af 4f
>3a4e28	02 00 48 c2 20 af 44 02 00 28 5c a0 08 00 08 0b
>3a4e38	8b 08 e2 20 48 a9 3a 48 ab 68 28 08 c2 20 48 a9
>3a4e48	46 08 5b 68 28 c2 10 e2 20 a5 31 c9 02 f0 0c c9
>3a4e58	03 d0 11 c2 20 a5 15 85 47 80 11 c2 20 a9 01 00
>3a4e68	85 47 80 08 a2 a8 5f 20 9c 02 80 35 a5 0d 85 4a
>3a4e78	a5 0f 85 4c a0 00 00 e2 20 a7 4a d7 11 f0 09 22
>3a4e88	86 57 3a a9 20 20 18 00 c2 20 18 a5 4a 69 01 00
>3a4e98	85 4a a5 4c 69 00 00 85 4c c8 c4 47 d0 d9 20 1b
>3a4ea8	02 20 1b 02 ab 2b 28 6b 08 0b 8b 08 e2 20 48 a9
>3a4eb8	00 48 ab 68 28 08 c2 20 48 a9 46 08 5b 68 28 e2
>3a4ec8	20 a5 31 f0 4f a6 0d 8e 40 02 a6 0f 8e 42 02 c9
>3a4ed8	01 f0 41 a6 11 8e 44 02 c9 02 f0 38 a6 15 8e 46
>3a4ee8	02 c9 03 f0 2f a6 19 8e 48 02 c9 04 f0 26 a6 1d
>3a4ef8	8e 4a 02 c9 05 f0 1d e2 10 a6 21 8e 4e 02 c9 06
>3a4f08	f0 12 c2 10 a6 25 8e 4c 02 c9 07 f0 07 e2 10 a6
>3a4f18	29 8e 4f 02 ab 2b 28 6b 08 0b 8b 08 c2 20 48 a9
>3a4f28	46 08 5b 68 28 e2 20 c2 10 a2 00 00 bf 15 60 3a
>3a4f38	f0 18 c7 08 f0 03 e8 80 f3 c2 20 8a 0a aa bf 56
>3a4f48	4f 3a 8f 2d 08 00 22 7a 4f 3a ab 2b 28 6b f6 45
>3a4f58	fe 45 02 46 06 46 0a 46 0e 46 12 46 16 46 1a 46
>3a4f68	1e 46 fa 45 22 46 26 46 2a 46 f2 49 2e 46 32 46
>3a4f78	6b 46 6c 2d 08 08 8b 0b 08 c2 20 48 a9 46 08 5b
>3a4f88	68 28 e2 20 a5 31 c9 02 b0 03 4c 23 51 c2 20 a5
>3a4f98	0d 85 32 a5 0f 85 34 c2 20 22 25 53 3a c9 ff ff
>3a4fa8	f0 10 85 54 e2 20 a5 31 c9 03 f0 36 a9 13 85 4f
>3a4fb8	80 4c 20 1b 02 08 e2 20 48 a9 3a 48 ab 68 28 c2
>3a4fc8	10 a2 5a 51 20 9c 02 4c 23 51 20 1b 02 08 e2 20
>3a4fd8	48 a9 3a 48 ab 68 28 c2 10 a2 69 51 20 9c 02 4c
>3a4fe8	23 51 e2 20 22 5b 53 3a c9 ff f0 de 85 4f c9 03
>3a4ff8	f0 62 c9 0b f0 5e c9 13 f0 04 c9 08 f0 00 22 53
>3a5008	52 3a b0 03 4c ec 50 87 32 22 dc 5c 3a 08 e2 20
>3a5018	48 a9 00 48 ab 68 28 c2 20 a5 32 85 56 a5 34 85
>3a5028	58 e2 20 a5 4f c9 12 f0 6c c9 16 f0 68 c9 14 f0
>3a5038	7c 29 3f c9 02 d0 03 4c 1a 51 c2 20 29 ff 00 aa
>3a5048	e2 20 bf 22 5c 3a c9 03 f0 57 c9 02 f0 5f c9 01
>3a5058	f0 67 80 71 c2 20 a5 54 c9 9a 58 f0 26 c9 fe 58
>3a5068	f0 2a c9 7e 58 f0 1c c9 82 58 f0 17 c9 8a 58 f0
>3a5078	12 c9 72 58 f0 0d c9 86 58 f0 08 c9 6e 58 f0 03
>3a5088	4c 06 50 e2 20 a9 12 85 4f 4c 06 50 e2 20 a9 16
>3a5098	85 4f 4c 06 50 22 96 51 3a 90 60 c9 02 f0 0e 80
>3a50a8	18 a0 02 00 b9 96 08 97 56 22 dc 5c 3a a0 01 00
>3a50b8	b9 96 08 97 56 22 dc 5c 3a a0 00 00 b9 96 08 97
>3a50c8	56 22 dc 5c 3a e2 20 a9 41 20 18 00 a9 20 20 18
>3a50d8	00 a6 32 86 4a a6 34 86 4c 22 86 57 3a a9 20 20
>3a50e8	18 00 80 37 20 1b 02 08 e2 20 48 a9 3a 48 ab 68
>3a50f8	28 c2 10 a2 27 51 20 9c 02 80 20 20 1b 02 08 e2
>3a5108	20 48 a9 3a 48 ab 68 28 c2 10 a2 77 51 20 9c 02
>3a5118	80 09 a5 4f 29 c0 d0 95 4c c1 50 2b ab 28 6b 41
>3a5128	64 64 72 65 73 73 69 6e 67 20 6d 6f 64 65 20 6e
>3a5138	6f 74 20 64 65 66 69 6e 65 64 20 66 6f 72 20 74
>3a5148	68 61 74 20 69 6e 73 74 72 75 63 74 69 6f 6e 2e
>3a5158	0d 00 42 61 64 20 6d 6e 65 6d 6f 6e 69 63 2e 0d
>3a5168	00 42 61 64 20 6f 70 65 72 61 6e 64 2e 0d 00 52
>3a5178	65 6c 61 74 69 76 65 20 6f 66 66 73 65 74 20 69
>3a5188	73 20 74 6f 6f 20 6c 61 72 67 65 2e 0d 00 08 0b
>3a5198	08 c2 20 48 a9 46 08 5b 68 28 e2 20 a5 4f c9 12
>3a51a8	f0 0a c2 20 18 a5 32 69 02 00 80 08 c2 20 18 a5
>3a51b8	32 69 01 00 85 4a a5 34 69 00 00 85 4c 38 a5 50
>3a51c8	e5 4a 85 50 a5 52 e5 4c 85 52 e2 20 a5 4f c9 16
>3a51d8	f0 1e a5 50 30 0c a5 51 d0 2a a5 52 d0 26 a9 01
>3a51e8	80 26 a5 51 c9 ff d0 1c a5 52 c9 ff d0 16 80 18
>3a51f8	a5 51 30 06 a5 52 d0 0c 80 0e a5 52 c9 ff d0 04
>3a5208	a9 02 80 04 2b 28 18 6b 2b 28 38 6b 08 0b c2 10
>3a5218	da 08 c2 20 48 a9 46 08 5b 68 28 e2 20 a2 00 00
>3a5228	df 00 d0 3a f0 08 e8 e0 10 00 f0 1b 80 f2 c2 20
>3a5238	06 50 26 52 06 50 26 52 06 50 26 52 06 50 26 52
>3a5248	e2 20 8a 05 50 85 50 fa 2b 28 6b 0b 8b 08 c2 20
>3a5258	48 a9 46 08 5b 68 28 08 e2 20 48 a9 3a 48 ab 68
>3a5268	28 e2 20 a5 4f 29 3f 85 4a c2 30 a2 00 00 a0 00
>3a5278	00 bd 20 59 f0 1b c5 54 d0 0d e2 20 b9 22 5b 29
>3a5288	3f c5 4a f0 07 c2 20 e8 e8 c8 80 e5 98 38 ab 2b
>3a5298	6b 18 ab 2b 6b 08 0b 08 c2 20 48 a9 46 08 5b 68
>3a52a8	28 e2 20 c2 10 a0 00 00 64 50 64 52 b7 03 f0 11
>3a52b8	c9 64 f0 19 48 b7 36 85 4a 68 c5 4a d0 0b c8 80
>3a52c8	eb b7 36 d0 04 2b 28 38 6b 2b 28 18 6b e2 20 b7
>3a52d8	36 c9 3a b0 04 c9 30 b0 14 c9 47 b0 04 c9 41 b0
>3a52e8	0c c9 67 b0 e4 c9 61 b0 02 80 de 29 df 22 14 52
>3a52f8	3a 80 cb 0b 08 c2 20 48 a9 46 08 5b 68 28 a0 00
>3a5308	00 e2 20 b7 03 f0 03 c8 80 f9 c2 20 c8 5a 68 18
>3a5318	65 03 85 03 a5 05 69 00 00 85 05 2b 6b 0b 08 c2
>3a5328	20 48 a9 46 08 5b 68 28 c2 20 a5 11 85 36 a5 13
>3a5338	85 38 a9 ae 57 85 03 a9 3a 00 85 05 22 9d 52 3a
>3a5348	b0 0d 22 fb 52 3a a7 03 d0 f2 a9 ff ff 80 02 a5
>3a5358	03 2b 6b 08 0b 08 c2 20 48 a9 46 08 5b 68 28 c2
>3a5368	30 a5 15 85 36 a5 17 85 38 a9 3a 5c 85 03 a9 3a
>3a5378	00 85 05 22 9d 52 3a b0 22 22 fb 52 3a c2 20 18
>3a5388	a5 03 69 01 00 85 03 a5 05 69 00 00 85 05 e2 20
>3a5398	a7 03 d0 df c2 20 a9 ff ff 80 0d 22 fb 52 3a e2
>3a53a8	20 a7 03 c2 20 29 ff 00 2b 28 6b 08 8b 0b 08 c2
>3a53b8	20 48 a9 46 08 5b 68 28 e2 20 a9 00 8f b4 08 00
>3a53c8	a5 31 c9 02 b0 16 c9 01 90 20 c2 20 18 a5 0d 69
>3a53d8	00 01 85 11 e2 20 a5 0f 69 00 85 13 c2 20 a5 0d
>3a53e8	85 32 e2 20 a5 0f 85 34 80 12 c2 20 18 a5 32 69
>3a53f8	00 01 85 11 e2 20 a5 34 69 00 85 13 22 1f 54 3a
>3a5408	e2 20 a5 34 c5 13 90 f4 c2 20 a5 32 c5 11 90 ec
>3a5418	20 1b 02 2b ab 28 6b 08 0b e2 20 a9 41 20 18 00
>3a5428	a9 20 20 18 00 08 c2 20 48 a9 78 08 5b 68 28 c2
>3a5438	20 a5 00 85 18 e2 20 a5 02 85 1a 22 86 57 3a a9
>3a5448	20 20 18 00 c2 20 18 a5 00 69 01 00 85 18 e2 20
>3a5458	a5 02 69 00 85 1a e2 20 c2 10 a7 00 c9 c2 d0 0b
>3a5468	48 a7 18 49 ff 2f 94 08 00 80 0b c9 e2 d0 0c 48
>3a5478	a7 18 0f 94 08 00 8f 94 08 00 68 c2 20 29 ff 00
>3a5488	0a aa bf 20 59 3a aa 22 00 57 3a e2 20 a7 00 aa
>3a5498	bf 22 5b 3a 22 dc 5c 3a 22 ad 54 3a 20 1b 02 20
>3a54a8	32 02 2b 28 6b 08 e2 20 48 29 3f 0a c2 10 aa 68
>3a54b8	7c bb 54 eb 54 06 55 0d 55 32 55 39 55 54 55 76
>3a54c8	55 87 55 c4 55 cc 55 dd 55 ee 55 f5 55 1a 56 47
>3a54d8	56 b3 55 98 55 65 55 3a 56 44 56 58 56 87 56 35
>3a54e8	56 98 56 a9 28 20 18 00 22 af 56 3a a9 2c 20 18
>3a54f8	00 a9 58 20 18 00 a9 29 20 18 00 4c a9 56 22 af
>3a5508	56 3a 4c a9 56 e2 20 48 a9 23 20 18 00 68 29 c0
>3a5518	c9 00 f0 0f 4a 4a 2f 94 08 00 d0 07 22 b9 56 3a
>3a5528	4c a9 56 22 af 56 3a 4c a9 56 22 b9 56 3a 4c a9
>3a5538	56 a9 28 20 18 00 22 af 56 3a a9 29 20 18 00 a9
>3a5548	2c 20 18 00 a9 59 20 18 00 4c a9 56 22 af 56 3a
>3a5558	a9 2c 20 18 00 a9 58 20 18 00 4c a9 56 22 af 56
>3a5568	3a a9 2c 20 18 00 a9 59 20 18 00 4c a9 56 22 b9
>3a5578	56 3a a9 2c 20 18 00 a9 59 20 18 00 4c a9 56 22
>3a5588	b9 56 3a a9 2c 20 18 00 a9 58 20 18 00 4c a9 56
>3a5598	a9 28 20 18 00 22 b9 56 3a a9 2c 20 18 00 a9 58
>3a55a8	20 18 00 a9 29 20 18 00 4c a9 56 a9 28 20 18 00
>3a55b8	22 af 56 3a a9 29 20 18 00 4c a9 56 a9 41 20 18
>3a55c8	00 4c ad 56 22 af 56 3a a9 2c 20 18 00 a9 53 20
>3a55d8	18 00 4c a9 56 a9 5b 20 18 00 22 af 56 3a a9 5d
>3a55e8	20 18 00 4c a9 56 22 c7 56 3a 4c ad 56 a9 28 20
>3a55f8	18 00 22 af 56 3a a9 2c 20 18 00 a9 53 20 18 00
>3a5608	a9 29 20 18 00 a9 2c 20 18 00 a9 59 20 18 00 4c
>3a5618	a9 56 a9 5b 20 18 00 22 af 56 3a a9 5d 20 18 00
>3a5628	a9 2c 20 18 00 a9 59 20 18 00 4c a9 56 a0 02 00
>3a5638	80 03 a0 01 00 22 2d 57 3a 4c ad 56 4c ad 56 22
>3a5648	c7 56 3a a9 2c 20 18 00 a9 58 20 18 00 4c ad 56
>3a5658	a9 23 20 18 00 8b a5 02 48 ab a6 00 e8 a0 01 00
>3a5668	22 2b 02 3a a9 2c 20 18 00 a9 23 20 18 00 a6 00
>3a5678	a0 01 00 22 2b 02 3a ab 22 dc 5c 3a 4c a9 56 a9
>3a5688	28 20 18 00 22 b9 56 3a a9 29 20 18 00 4c a9 56
>3a5698	a9 5b 20 18 00 22 b9 56 3a a9 5d 20 18 00 4c a9
>3a56a8	56 22 dc 5c 3a 28 6b 08 e2 20 a7 00 20 c6 02 28
>3a56b8	6b 08 c2 30 a7 00 20 ac 02 22 dc 5c 3a 28 6b 08
>3a56c8	8b 0b c2 30 5a 08 c2 20 48 a9 78 08 5b 68 28 08
>3a56d8	e2 20 48 a9 00 48 ab 68 28 e2 20 a0 00 00 a7 00
>3a56e8	99 90 08 22 dc 5c 3a c8 c0 03 00 d0 f1 22 86 57
>3a56f8	3a c2 30 7a 2b ab 28 6b 08 8b e2 20 c2 10 08 e2
>3a5708	20 48 a9 3a 48 ab 68 28 bd 00 00 20 18 00 e8 bd
>3a5718	00 00 20 18 00 e8 bd 00 00 20 18 00 e8 a9 20 20
>3a5728	18 00 ab 28 6b 08 0b 08 c2 20 48 a9 78 08 5b 68
>3a5738	28 e2 20 c0 02 00 f0 14 a7 00 85 18 30 06 64 19
>3a5748	64 1a 80 1e a9 ff 85 19 85 1a 80 16 a7 00 85 18
>3a5758	22 dc 5c 3a a7 00 85 19 30 04 64 1a 80 04 a9 ff
>3a5768	85 1a c2 20 38 a5 00 65 18 85 18 e2 20 a5 02 65
>3a5778	1a 85 1a 22 86 57 3a 22 dc 5c 3a 2b 28 6b 08 0b
>3a5788	c2 20 48 08 c2 20 48 a9 46 08 5b 68 28 e2 20 a5
>3a5798	4c 20 c6 02 e2 20 a9 3a 20 18 00 c2 20 a5 4a 20
>3a57a8	ac 02 68 2b 28 6b 4f 52 41 00 41 4e 44 00 45 4f
>3a57b8	52 00 41 44 43 00 53 54 41 00 4c 44 41 00 43 4d
>3a57c8	50 00 53 42 43 00 41 53 4c 00 52 4f 4c 00 4c 53
>3a57d8	52 00 52 4f 52 00 53 54 58 00 4c 44 58 00 44 45
>3a57e8	43 00 49 4e 43 00 42 49 54 00 4a 4d 50 00 53 54
>3a57f8	59 00 4c 44 59 00 43 50 59 00 43 50 58 00 42 52
>3a5808	4b 00 4a 53 52 00 52 54 49 00 52 54 53 00 50 48
>3a5818	50 00 50 4c 50 00 50 48 41 00 50 4c 41 00 44 45
>3a5828	59 00 54 41 59 00 49 4e 59 00 49 4e 58 00 43 4c
>3a5838	43 00 53 45 43 00 43 4c 49 00 53 45 49 00 54 59
>3a5848	41 00 43 4c 56 00 43 4c 44 00 53 45 44 00 54 58
>3a5858	41 00 54 58 53 00 54 41 58 00 54 53 58 00 44 45
>3a5868	58 00 4e 4f 50 00 42 50 4c 00 42 4d 49 00 42 56
>3a5878	43 00 42 56 53 00 42 43 43 00 42 43 53 00 42 4e
>3a5888	45 00 42 45 51 00 54 53 42 00 54 52 42 00 53 54
>3a5898	5a 00 42 52 41 00 50 48 59 00 50 4c 59 00 50 48
>3a58a8	58 00 50 4c 58 00 50 48 44 00 50 4c 44 00 50 48
>3a58b8	4b 00 52 54 4c 00 50 48 42 00 50 4c 42 00 57 41
>3a58c8	49 00 58 42 41 00 54 43 53 00 54 53 43 00 54 43
>3a58d8	44 00 54 44 43 00 54 58 59 00 54 59 58 00 53 54
>3a58e8	50 00 58 43 45 00 43 4f 50 00 4a 53 4c 00 57 44
>3a58f8	4d 00 50 45 52 00 42 52 4c 00 52 45 50 00 53 45
>3a5908	50 00 4d 56 50 00 4d 56 4e 00 50 45 49 00 50 45
>3a5918	41 00 4a 4d 4c 00 00 00 06 58 ae 57 ee 58 ae 57
>3a5928	8e 58 ae 57 ce 57 ae 57 16 58 ae 57 ce 57 ae 58
>3a5938	8e 58 ae 57 ce 57 ae 57 6e 58 ae 57 ae 57 ae 57
>3a5948	92 58 ae 57 ce 57 ae 57 36 58 ae 57 ea 57 ce 58
>3a5958	92 58 ae 57 ce 57 ae 57 0a 58 b2 57 f2 58 b2 57
>3a5968	ee 57 b2 57 d2 57 b2 57 1a 58 b2 57 d2 57 b2 58
>3a5978	ee 57 b2 57 d2 57 b2 57 72 58 b2 57 b2 57 b2 57
>3a5988	ee 57 b2 57 d2 57 b2 57 3a 58 b2 57 e6 57 d2 58
>3a5998	ee 57 b2 57 d2 57 b2 57 0e 58 b6 57 f6 58 b6 57
>3a59a8	0a 59 b6 57 d6 57 b6 57 1e 58 b6 57 d6 57 b6 58
>3a59b8	f2 57 b6 57 d6 57 b6 57 76 58 b6 57 b6 57 b6 57
>3a59c8	0e 59 b6 57 d6 57 b6 57 3e 58 b6 57 9e 58 d6 58
>3a59d8	1a 59 b6 57 d6 57 b6 57 12 58 ba 57 fa 58 ba 57
>3a59e8	96 58 ba 57 da 57 ba 57 22 58 ba 57 da 57 ba 58
>3a59f8	f2 57 ba 57 da 57 ba 57 7a 58 ba 57 ba 57 ba 57
>3a5a08	96 58 ba 57 da 57 ba 57 42 58 ba 57 a2 58 da 58
>3a5a18	f2 57 ba 57 da 57 ba 57 9a 58 be 57 fe 58 be 57
>3a5a28	f6 57 be 57 de 57 be 57 26 58 ee 57 56 58 be 58
>3a5a38	f6 57 be 57 de 57 be 57 7e 58 be 57 be 57 be 57
>3a5a48	f6 57 be 57 de 57 be 57 46 58 be 57 5a 58 de 58
>3a5a58	96 58 be 57 96 58 be 57 fa 57 c2 57 e2 57 c2 57
>3a5a68	fa 57 c2 57 e2 57 c2 57 2a 58 c2 57 5e 58 c2 58
>3a5a78	fa 57 c2 57 e2 57 c2 57 82 58 c2 57 c2 57 c2 57
>3a5a88	fa 57 c2 57 e2 57 c2 57 4a 58 c2 57 62 58 e2 58
>3a5a98	fa 57 c2 57 e2 57 c2 57 fe 57 c6 57 02 59 c6 57
>3a5aa8	fe 57 c6 57 e6 57 c6 57 2e 58 c6 57 66 58 c6 58
>3a5ab8	fe 57 c6 57 e6 57 c6 57 86 58 c6 57 c6 57 c6 57
>3a5ac8	12 59 c6 57 e6 57 c6 57 4e 58 c6 57 a6 58 e6 58
>3a5ad8	1a 59 c6 57 e6 57 c6 57 02 58 ca 57 06 59 ca 57
>3a5ae8	02 58 ca 57 ea 57 ca 57 32 58 ca 57 6a 58 ca 58
>3a5af8	02 58 ca 57 ea 57 ca 57 8a 58 ca 57 ca 57 ca 57
>3a5b08	16 59 ca 57 ea 57 ca 57 52 58 ca 57 aa 58 ea 58
>3a5b18	0a 58 ca 57 ea 57 ca 57 00 00 13 00 02 09 01 01
>3a5b28	01 0a 13 82 08 13 03 03 03 0b 12 04 0f 0c 01 05
>3a5b38	05 0d 13 06 08 13 03 07 07 0e 03 00 0b 09 01 01
>3a5b48	01 0a 13 82 08 13 03 03 03 0b 12 04 0f 0c 05 05
>3a5b58	05 0d 13 06 08 13 07 07 07 0e 13 00 13 09 14 01
>3a5b68	01 0a 13 82 08 13 03 03 03 0b 12 04 0f 0c 14 05
>3a5b78	05 0d 13 06 13 13 0b 07 07 0b 13 00 16 09 01 01
>3a5b88	01 0a 13 82 08 13 15 03 03 0b 12 04 0f 0c 05 05
>3a5b98	05 0d 13 06 13 13 10 07 07 0e 12 00 16 09 01 01
>3a5ba8	01 0a 13 82 13 13 03 03 03 0b 12 04 0f 0c 05 05
>3a5bb8	11 0d 13 06 13 13 03 07 07 0e 82 00 42 09 01 01
>3a5bc8	01 0a 13 82 13 13 03 03 03 0b 12 04 0f 0c 05 05
>3a5bd8	11 0d 13 06 13 13 07 07 06 0e 42 00 02 09 01 01
>3a5be8	01 0a 13 82 13 13 03 03 03 0b 12 04 0f 0c 01 05
>3a5bf8	05 0d 13 06 13 13 17 07 07 0e 42 00 02 09 01 01
>3a5c08	01 0f 13 82 13 13 03 03 03 0b 12 04 0f 0c 03 05
>3a5c18	05 0d 13 06 13 13 10 07 07 0e 01 01 01 02 01 01
>3a5c28	02 02 00 01 01 03 01 01 03 01 02 01 01 00 02 02
>3a5c38	02 02 41 00 08 64 64 3a 64 64 64 64 2c 58 00 0e
>3a5c48	64 64 3a 64 64 64 64 00 0b 64 64 64 64 2c 58 00
>3a5c58	07 64 64 64 64 2c 59 00 06 64 64 64 64 00 03 64
>3a5c68	64 2c 58 00 05 64 64 2c 59 00 11 64 64 2c 53 00
>3a5c78	09 64 64 00 01 23 64 64 64 64 00 c2 23 64 64 2c
>3a5c88	23 64 64 00 14 23 64 64 00 02 28 64 64 2c 53 29
>3a5c98	2c 59 00 0c 28 64 64 64 64 2c 58 29 00 10 28 64
>3a5ca8	64 64 64 29 00 10 28 64 64 2c 58 29 00 00 28 64
>3a5cb8	64 29 2c 59 00 04 28 64 64 29 00 0f 5b 64 64 64
>3a5cc8	64 5d 00 17 5b 64 64 5d 2c 59 00 0d 5b 64 64 5d
>3a5cd8	00 0a 00 00 08 c2 20 48 18 af 78 08 00 69 01 00
>3a5ce8	8f 78 08 00 e2 20 af 7a 08 00 69 00 8f 7a 08 00
>3a5cf8	c2 20 68 28 6b 08 c2 10 e2 20 da a2 08 00 0a b0
>3a5d08	08 48 a9 30 20 18 00 80 06 48 a9 31 20 18 00 68
>3a5d18	ca d0 eb fa 28 6b 08 c2 20 48 a9 46 08 5b 68 28
>3a5d28	e2 20 a7 32 f0 0a c9 20 d0 06 22 dc 5c 3a 80 f2
>3a5d38	6b 08 08 c2 20 48 a9 46 08 5b 68 28 22 dc 5c 3a
>3a5d48	22 1e 5d 3a c2 30 a5 31 c2 20 29 ff 00 0a 0a aa
>3a5d58	a5 32 95 0d a5 34 95 0f e2 20 a7 32 f0 14 c9 22
>3a5d68	f0 06 22 dc 5c 3a 80 f2 a9 00 87 32 22 dc 5c 3a
>3a5d78	e6 31 28 6b 08 c2 20 48 a9 46 08 5b 68 28 e2 20
>3a5d88	64 4a c2 20 64 50 64 52 e2 20 a7 32 c9 3a f0 0d
>3a5d98	20 19 03 90 0e 22 14 52 3a a9 01 85 4a 22 dc 5c
>3a5da8	3a 80 e5 a5 4a f0 16 a5 31 c2 20 29 ff 00 0a 0a
>3a5db8	aa a5 50 95 0d a5 52 95 0f e2 20 e6 31 6b e2 20
>3a5dc8	64 31 22 1e 5d 3a a7 32 f0 21 c9 22 d0 06 22 39
>3a5dd8	5d 3a 80 0a 22 7c 5d 3a a5 31 c9 09 b0 0d a7 32
>3a5de8	f0 09 c9 20 f0 dc 20 19 03 b0 d7 6b 08 0b 08 c2
>3a5df8	20 48 a9 46 08 5b 68 28 c2 10 e2 20 a2 31 00 74
>3a5e08	00 ca d0 fb a9 00 85 02 85 34 c2 20 a9 00 4f 85
>3a5e18	00 85 32 e2 20 22 1e 5d 3a c9 00 f0 38 c2 20 a5
>3a5e28	32 85 08 e2 20 a5 34 85 0a a2 01 00 22 dc 5c 3a
>3a5e38	a7 32 d0 06 86 0b 64 31 80 1b c9 20 f0 03 e8 80
>3a5e48	eb 86 0b a9 00 87 32 22 dc 5c 3a a7 08 c9 41 f0
>3a5e58	07 22 c6 5d 3a 2b 28 6b 22 1e 5d 3a a7 32 f0 f5
>3a5e68	22 7c 5d 3a 22 1e 5d 3a a7 32 f0 e9 c2 20 a5 32
>3a5e78	85 11 e2 20 a5 34 85 13 22 dc 5c 3a a7 32 f0 26
>3a5e88	c9 20 d0 f4 a9 00 87 32 e6 31 22 dc 5c 3a 22 1e
>3a5e98	5d 3a a7 32 f0 bf c2 20 a5 32 85 15 e2 20 a5 34
>3a5ea8	85 17 e6 31 80 af e6 31 80 ab 08 c2 10 e2 20 a5
>3a5eb8	31 d0 0f a2 a8 5f a9 3a 48 ab 20 9c 02 20 1b 02
>3a5ec8	80 61 c2 20 a5 0d 8f 21 08 00 a5 0f 8f 23 08 00
>3a5ed8	20 fd 41 e2 20 a5 31 c9 01 d0 0f c2 20 a9 ff ff
>3a5ee8	8f 54 03 00 8f 56 03 00 80 0e c2 20 a5 11 8f 54
>3a5ef8	03 00 a5 13 8f 56 03 00 22 18 11 00 b0 25 e2 20
>3a5f08	a2 ce 5f a9 3a 48 ab 20 9c 02 af 2e 03 00 20 c6
>3a5f18	02 a9 20 20 18 00 af 20 03 00 20 c6 02 20 1b 02
>3a5f28	20 1b 02 28 6b 8b 08 c2 10 e2 20 a5 31 c9 03 f0
>3a5f38	0f a2 a8 5f a9 3a 48 ab 20 9c 02 20 1b 02 80 54
>3a5f48	c2 20 a5 0d 8f 21 08 00 a5 0f 8f 23 08 00 20 fd
>3a5f58	41 a5 11 8f 50 03 00 a5 13 8f 52 03 00 a5 15 8f
>3a5f68	58 03 00 a5 17 8f 5a 03 00 22 1c 11 00 b0 25 e2
>3a5f78	20 a2 b8 5f a9 3a 48 ab 20 9c 02 af 2e 03 00 20
>3a5f88	c6 02 a9 20 20 18 00 af 20 03 00 20 c6 02 20 1b
>3a5f98	02 20 1b 02 28 ab 6b 5c 7b 1f 3a 6b 00 00 00 00
>3a5fa8	42 61 64 20 61 72 67 75 6d 65 6e 74 73 0d 0d 00
>3a5fb8	55 6e 61 62 6c 65 20 74 6f 20 73 61 76 65 20 66
>3a5fc8	69 6c 65 3a 20 00 55 6e 61 62 6c 65 20 74 6f 20
>3a5fd8	6c 6f 61 64 20 66 69 6c 65 3a 20 00 0d 20 20 50
>3a5fe8	43 20 20 20 20 20 41 20 20 20 20 58 20 20 20 20
>3a5ff8	59 20 20 20 20 53 50 20 20 20 44 42 52 20 44 50
>3a6008	20 20 20 4e 56 4d 58 44 49 5a 43 0d 00 41 43 44
>3a6018	46 47 4a 48 4c 4d 52 3b 53 54 56 57 58 3e 3f 00
>3a6028	18 fb 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48
>3a6038	a9 00 48 ab 68 28 c2 30 20 67 60 a9 ff fe 1b 08
>3a6048	e2 20 48 a9 3a 48 ab 68 28 a2 03 d2 20 9c 02 08
>3a6058	e2 20 48 a9 00 48 ab 68 28 4c 7b 1f 4c 64 60 08
>3a6068	20 af 01 20 e8 38 28 60 00 00 00 00 00 00 00 00
>3a6078	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 1783 times (28528 bytes)...
>3acff8	00 00 00 00 00 00 00 00 30 31 32 33 34 35 36 37
>3ad008	38 39 41 42 43 44 45 46 2b 00 2d 00 2a 00 2f 00
>3ad018	4d 4f 44 00 5e 00 3c 00 3d 00 3e 00 4e 4f 54 00
>3ad028	41 4e 44 00 4f 52 00 28 00 29 00 52 45 4d 00 50
>3ad038	52 49 4e 54 00 4c 45 54 00 47 4f 54 4f 00 45 4e
>3ad048	44 00 49 46 00 54 48 45 4e 00 45 4c 53 45 00 47
>3ad058	4f 53 55 42 00 52 45 54 55 52 4e 00 46 4f 52 00
>3ad068	54 4f 00 53 54 45 50 00 4e 45 58 54 00 44 4f 00
>3ad078	4c 4f 4f 50 00 57 48 49 4c 45 00 55 4e 54 49 4c
>3ad088	00 45 58 49 54 00 43 4c 52 00 53 54 4f 50 00 50
>3ad098	4f 4b 45 00 50 4f 4b 45 57 00 50 4f 4b 45 4c 00
>3ad0a8	43 4c 53 00 52 45 41 44 00 44 41 54 41 00 52 45
>3ad0b8	53 54 4f 52 45 00 44 49 4d 00 43 41 4c 4c 00 3c
>3ad0c8	3d 00 3e 3d 00 3c 3e 00 2d 00 4c 45 4e 00 50 45
>3ad0d8	45 4b 00 50 45 45 4b 57 00 50 45 45 4b 4c 00 43
>3ad0e8	48 52 24 00 41 53 43 00 53 50 43 00 54 41 42 00
>3ad0f8	41 42 53 00 53 47 4e 00 48 45 58 24 00 44 45 43
>3ad108	00 53 54 52 24 00 56 41 4c 00 4c 45 46 54 24 00
>3ad118	52 49 47 48 54 24 00 4d 49 44 24 00 52 55 4e 00
>3ad128	4e 45 57 00 4c 4f 41 44 00 4c 49 53 54 00 44 49
>3ad138	52 00 42 4c 4f 41 44 00 42 52 55 4e 00 42 53 41
>3ad148	56 45 00 44 45 4c 00 53 41 56 45 00 52 45 4e 41
>3ad158	4d 45 00 4d 4f 4e 49 54 4f 52 00 47 45 54 00 49
>3ad168	4e 50 55 54 00 53 45 54 42 4f 52 44 45 52 00 54
>3ad178	45 58 54 43 4f 4c 4f 52 00 53 45 54 42 47 43 4f
>3ad188	4c 4f 52 00 53 45 54 44 41 54 45 00 47 45 54 44
>3ad198	41 54 45 24 00 53 45 54 54 49 4d 45 00 47 45 54
>3ad1a8	54 49 4d 45 24 00 47 52 41 50 48 49 43 53 00 53
>3ad1b8	45 54 43 4f 4c 4f 52 00 50 49 58 4d 41 50 00 43
>3ad1c8	4c 52 50 49 58 4d 41 50 00 50 4c 4f 54 00 4c 49
>3ad1d8	4e 45 00 46 49 4c 4c 00 53 50 52 49 54 45 00 53
>3ad1e8	50 52 49 54 45 41 54 00 53 50 52 49 54 45 53 48
>3ad1f8	4f 57 00 0d 52 45 41 44 59 0d 00 43 32 35 36 20
>3ad208	46 6f 65 6e 69 78 20 42 41 53 49 43 38 31 36 20
>3ad218	76 30 30 2e 30 30 20 61 6c 70 68 61 20 28 32 30
>3ad228	32 30 2d 30 34 2d 31 31 29 0d 00
>3b0000					.align 256
.3b0000					CREDITS_TEXT
>3b0000	54 68 69 73 20 69 73 20		                .text "This is the credits screen!"
>3b0008	74 68 65 20 63 72 65 64 69 74 73 20 73 63 72 65
>3b0018	65 6e 21
>3b001b	20 20 20 20 20 20 20 20		                .fill 128 - len("This is the credits screen!"), $20
>3b0023	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 4 times (64 bytes)...
>3b0073	20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0080	49 20 77 6f 75 6c 64 20		                .text "I would like to thank the academy."
>3b0088	6c 69 6b 65 20 74 6f 20 74 68 61 6e 6b 20 74 68
>3b0098	65 20 61 63 61 64 65 6d 79 2e
>3b00a2	20 20 20 20 20 20 20 20		                .fill 128 - len("I would like to thank the academy."), $20
>3b00aa	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 4 times (64 bytes)...
>3b00fa	20 20 20 20 20 20
>3b0100					                .text ""
>3b0100	20 20 20 20 20 20 20 20		                .fill 128 - len(""), $20
>3b0108	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 6 times (96 bytes)...
>3b0178	20 20 20 20 20 20 20 20
>3b0180	50 72 65 73 73 20 61 6e		                .text "Press any key to go back..."
>3b0188	79 20 6b 65 79 20 74 6f 20 67 6f 20 62 61 63 6b
>3b0198	2e 2e 2e
>3b019b	20 20 20 20 20 20 20 20		                .fill 128 - len("Press any key to go back..."), $20
>3b01a3	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 4 times (64 bytes)...
>3b01f3	20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0200	20 20 20 20 20 20 20 20		                .fill 128 * 60,$20
>3b0208	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;	...repeated 478 times (7648 bytes)...
>3b1ff8	20 20 20 20 20 20 20 20
>3b2000					.align 256
>3b2000	f3 f3 f3 f3 f3 f3 f3 f3		CREDITS_COLOR   .fill 128 * 64, $F3
>3b2008	f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3
;	...repeated 510 times (8160 bytes)...
>3b3ff8	f3 f3 f3 f3 f3 f3 f3 f3

;******  End of listing
