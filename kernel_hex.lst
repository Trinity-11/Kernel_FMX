
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -D TARGET=2 --long-address --flat --intel-hex -o kernel.hex --list kernel_hex.lst --labels=kernel_hex.lbl src\kernel.asm
; Fri Jan 03 15:05:34 2020

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=2					TARGET=2

;******  Processing input file: src\kernel.asm

=1					TARGET_FLASH = 1              ; The code is being assembled for Flash
=2					TARGET_RAM = 2                ; The code is being assembled for RAM

;******  Processing file: src\macros_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\characters.asm

=$03					CHAR_CTRL_C = $03   ; CTRL-C
=$08					CHAR_BS = $08       ; Backspace (delete character to the left of the cursor)
=$09					CHAR_TAB = $09      ; TAB (moves cursor to next tabulated column)
=$0a					CHAR_LF = $0A       ; Line feed
=$0d					CHAR_CR = $0D       ; Carriage return
=$0f					CHAR_INS = $0F      ; Insert a space at the cursor
=$11					CHAR_UP = $11       ; Up arrow
=$1d					CHAR_RIGHT = $1D    ; Right arrow
=$20					CHAR_SP = $20       ; Space
=$91					CHAR_DOWN = $91     ; Down arrow
=$9d					CHAR_LEFT = $9D     ; Left arrow
=$7f					CHAR_DEL = $7F      ; Delete key (delete the character at the cursor)

;******  Return to file: src\kernel.asm


;******  Processing file: src\simulator_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_inc.asm

=$000000				BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000				unused_0000      = $000000 ;12 Bytes unused
=$000008				OPL2_ADDY_PTR_LO = $000008  ; THis Points towards the Instruments Database
=$000009				OPL2_ADDY_PTR_MD = $000009
=$00000a				OPL2_ADDY_PTR_HI = $00000A
=$00000c				SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f				COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011				COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013				LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=25
=$000015				LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017				CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a				CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c				CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e				CURCOLOR         = $00001E ;2 Bytes Color of next character to be printed to the screen.
=$000020				CURATTR          = $000020 ;2 Bytes Attribute of next character to be printed to the screen.
=$000022				STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024				STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$000026				OPL2_OPERATOR    = $000026 ;
=$000027				OPL2_CHANNEL     = $000027 ;
=$000028				OPL2_REG_REGION  = $000028 ; Offset to the Group of Registers
=$00002a				OPL2_REG_OFFSET  = $00002A ; 2 Bytes (16Bits)
=$00002c				OPL2_IND_ADDY_LL = $00002C ; 2 Bytes Reserved (Only need 3)
=$00002e				OPL2_IND_ADDY_HL = $00002E ; 2 Bytes Reserved (Only need 3)
=$000030				OPL2_NOTE        = $000030 ; 1 Byte
=$000031				OPL2_OCTAVE      = $000031 ; 1 Byte
=$000032				OPL2_PARAMETER0  = $000032 ; 1 Byte - Key On/Feedback
=$000033				OPL2_PARAMETER1  = $000033 ; 1 Byte
=$000034				OPL2_PARAMETER2  = $000034 ; 1 Byte
=$000035				OPL2_PARAMETER3  = $000035 ; 1 Byte
=$000036				OPL2_LOOP        = $000036 ;
=$000036				OPL2_BLOCK       = $000036
=$000038				SDCARD_FILE_PTR  = $000038 ; 3 Bytes Pointer to Filename to open
=$00003c				SDCARD_BYTE_NUM  = $00003C ; 2Bytes
=$00003f				SDCARD_PRSNT_MNT = $00003F ; 1 Byte, Indicate that the SDCard is Present and that it is Mounted
=$000040				BM_CLEAR_SCRN_X  = $000040
=$000042				BM_CLEAR_SCRN_Y  = $000042
=$000040				RAD_STARTLINE    = $000040 ; 1 Byte
=$000041				RAD_PATTERN_IDX  = $000041 ; 1 Byte
=$000042				RAD_LINE         = $000042 ; 1 Byte
=$000043				RAD_LINENUMBER   = $000043 ; 1 Byte
=$000044				RAD_CHANNEL_NUM  = $000044 ; 1 Byte
=$000045				RAD_ISLASTCHAN   = $000045 ; 1 Byte
=$000046				RAD_Y_POINTER    = $000046 ; 2 Bytes
=$000048				RAD_TICK         = $000048
=$00004a				RAD_CHANNEL_DATA = $00004A ; 2 Bytes
=$00004c				RAD_CHANNE_EFFCT = $00004C
=$00004d				RAD_TEMP         = $00004D
=$000050				RAD_ADDR         = $000050 ; 3 bytes to avoid OPL2 errors.
=$000053				RAD_PATTRN       = $000053 ; 1 bytes - offset to patter
=$000054				RAD_PTN_DEST     = $000054 ; 3 bytes - where to write the pattern data
=$000057				RAD_CHANNEL      = $000057 ; 2 bytes - 0 to 8
=$000059				RAD_LAST_NOTE    = $000059 ; 1 if this is the last note
=$00005a				RAD_LINE_PTR     = $00005A ; 2 bytes - offset to memory location
=$000040				BMP_X_SIZE       = $000040 ; 2 Bytes
=$000042				BMP_Y_SIZE       = $000042 ; 2 Bytes
=$000044				BMP_PRSE_SRC_PTR = $000044 ; 3 Bytes
=$000048				BMP_PRSE_DST_PTR = $000048 ; 3 Bytes
=$00004c				BMP_COLOR_PALET  = $00004C ; 2 Bytes
=$00004e				SCRN_X_STRIDE    = $00004E ; 2 Bytes, Basically How many Pixel Accross in Bitmap Mode
=$000050				BMP_FILE_SIZE    = $000050 ; 4 Bytes
=$000054				BMP_POSITION_X   = $000054 ; 2 Bytes Where, the BMP will be position on the X Axis
=$000056				BMP_POSITION_Y   = $000056 ; 2 Bytes Where, the BMP will be position on the Y Axis
=$000058				BMP_PALET_CHOICE = $000058 ;
=$0000e0				MOUSE_PTR        = $0000E0
=$0000e1				MOUSE_POS_X_LO   = $0000E1
=$0000e2				MOUSE_POS_X_HI   = $0000E2
=$0000e3				MOUSE_POS_Y_LO   = $0000E3
=$0000e4				MOUSE_POS_Y_HI   = $0000E4
=$0000f0				USER_TEMP        = $0000F0 ;32 Bytes Temp space for user programs
=$000100				GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000100				MULTIPLIER_0     = $000100 ;0 Byte  Unsigned multiplier
=$000100				M0_OPERAND_A     = $000100 ;2 Bytes Operand A (ie: A x B)
=$000102				M0_OPERAND_B     = $000102 ;2 Bytes Operand B (ie: A x B)
=$000104				M0_RESULT        = $000104 ;4 Bytes Result of A x B
=$000108				MULTIPLIER_1     = $000108 ;0 Byte  Signed Multiplier
=$000108				M1_OPERAND_A     = $000108 ;2 Bytes Operand A (ie: A x B)
=$00010a				M1_OPERAND_B     = $00010A ;2 Bytes Operand B (ie: A x B)
=$00010c				M1_RESULT        = $00010C ;4 Bytes Result of A x B
=$000108				DIVIDER_0        = $000108 ;0 Byte  Unsigned divider
=$000108				D0_OPERAND_A     = $000108 ;2 Bytes Divider 0 Dividend ex: A in  A/B
=$00010a				D0_OPERAND_B     = $00010A ;2 Bytes Divider 0 Divisor ex B in A/B
=$00010c				D0_RESULT        = $00010C ;2 Bytes Quotient result of A/B ex: 7/2 = 3 r 1
=$00010e				D0_REMAINDER     = $00010E ;2 Bytes Remainder of A/B ex: 1 in 7/2=3 r 1
=$000110				DIVIDER_1        = $000110 ;0 Byte  Signed divider
=$000110				D1_OPERAND_A     = $000110 ;2 Bytes Divider 1 Dividend ex: A in  A/B
=$000112				D1_OPERAND_B     = $000112 ;2 Bytes Divider 1 Divisor ex B in A/B
=$000114				D1_RESULT        = $000114 ;2 Bytes Signed quotient result of A/B ex: 7/2 = 3 r 1
=$000116				D1_REMAINDER     = $000116 ;2 Bytes Signed remainder of A/B ex: 1 in 7/2=3 r 1
=$000120				ADDER_SIGNED_32  = $000120 ; The 32 Bit Adders takes 12Byte that are NOT RAM Location
=$000120				ADDER_A          = $000120 ; 4 bytes (32 bit) Accumulator A
=$000124				ADDER_B          = $000124 ; 4 bytes (32 bit) Accumulator B
=$000128				ADDER_R          = $000128 ; 4 bytes (32 bit) Result
=$000140				INT_CONTROLLER   = $000140 ; $000140...$00015F Interrupt Controller
=$000160				TIMER_CONTROLLER = $000160 ; $000160...$00017F Timer0/Timer1/Timer2 Block
=$000160				TIMER_CTRL_REGLL = $000160 ;
=$000161				TIMER_CTRL_REGLH = $000161 ;
=$000162				TIMER_CTRL_REGHL = $000162 ;
=$000163				TIMER_CTRL_REGHH = $000163 ;
=$000240				CPU_REGISTERS    = $000240 ; Byte
=$000240				CPUPC            = $000240 ;2 Bytes Program Counter (PC)
=$000242				CPUPBR           = $000242 ;2 Bytes Program Bank Register (K)
=$000244				CPUA             = $000244 ;2 Bytes Accumulator (A)
=$000246				CPUX             = $000246 ;2 Bytes X Register (X)
=$000248				CPUY             = $000248 ;2 Bytes Y Register (Y)
=$00024a				CPUSTACK         = $00024A ;2 Bytes Stack Pointer (S)
=$00024c				CPUDP            = $00024C ;2 Bytes Direct Page Register (D)
=$00024e				CPUDBR           = $00024E ;1 Byte  Data Bank Register (B)
=$00024f				CPUFLAGS         = $00024F ;1 Byte  Flags (P)
=$000250				MONITOR_VARS     = $000250 ; Byte  MONITOR Variables. BASIC variables may overlap this space
=$000250				MCMDADDR         = $000250 ;3 Bytes Address of the current line of text being processed by the command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
=$000253				MCMP_TEXT        = $000253 ;3 Bytes Address of symbol being evaluated for COMPARE routine
=$000256				MCMP_LEN         = $000256 ;2 Bytes Length of symbol being evaluated for COMPARE routine
=$000258				MCMD             = $000258 ;3 Bytes Address of the current command/function string
=$00025b				MCMD_LEN         = $00025B ;2 Bytes Length of the current command/function string
=$00025d				MARG1            = $00025D ;4 Bytes First command argument. May be data or address, depending on command
=$000261				MARG2            = $000261 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000265				MARG3            = $000265 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000269				MARG4            = $000269 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$00026d				MARG5            = $00026D ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000271				MARG6            = $000271 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000275				MARG7            = $000275 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000279				MARG8            = $000279 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000300				LOADFILE_VARS    = $000300 ; Byte
=$000300				LOADFILE_NAME    = $000300 ;3 Bytes (addr) Name of file to load. Address in Data Page
=$000303				LOADFILE_LEN     = $000303 ;1 Byte  Length of filename. 0=Null Terminated
=$000304				LOADPBR          = $000304 ;1 Byte  First Program Bank of loaded file ($05 segment)
=$000305				LOADPC           = $000305 ;2 Bytes Start address of loaded file ($05 segment)
=$000307				LOADDBR          = $000307 ;1 Byte  First data bank of loaded file ($06 segment)
=$000308				LOADADDR         = $000308 ;2 Bytes FIrst data address of loaded file ($06 segment)
=$00030a				LOADFILE_TYPE    = $00030A ;3 Bytes (addr) File type string in loaded data file. Actual string data will be in Bank 1. Valid values are BIN, PRG, P16
=$00030d				BLOCK_LEN        = $00030D ;2 Bytes Length of block being loaded
=$00030f				BLOCK_ADDR       = $00030F ;2 Bytes (temp) Address of block being loaded
=$000311				BLOCK_BANK       = $000311 ;1 Byte  (temp) Bank of block being loaded
=$000312				BLOCK_COUNT      = $000312 ;2 Bytes (temp) Counter of bytes read as file is loaded
=$000320				SDOS_BLOCK_BEGIN = $000320 ;
=$000324				SDOS_LOAD_ADDY   = $000324 ; 4 Bytes (Uses 3 Only)
=$000328				SDOS_FILE_SIZE   = $000328 ;
=$00032c				SDOS_BYTE_NUMBER = $00032C ; Number of Byte to Read or Write before changing the Pointer
=$000330				SDOS_REG_WR32_AD = $000330 ; 4 Bytes (Used to read and Write Values in/from CH376S)
=$000334				SDOS_BYTE_PTR    = $000334
=$000337				SDOS_FILE_REC_PTR= $000337 ; 3 byte pointer to a simple file struct
=$00033a				SDOS_LOOP        = $00033A ; variable to count file length
=$000380				SDOS_FILE_NAME   = $000380 ; // Max of 128 Chars
=$000400				SDOS_BLK_BEGIN   = $000400 ; 512 Bytes to Store SD Card Incoming or Outcoming Block
=$0006ff				SDOS_BLK_END     = $0006FF ;
=$000700				CURRUART         = $000700 ; 3-bytes: the base address of the current UART
=$000703				CHAN_OUT         = $000703 ; 1-byte: the number of the current output channel (for PUTC, etc.)
=$000704				CHAN_IN          = $000704 ; 1-byte: the number of the current input channel (for GETCH, etc.)
=$000f00				KEY_BUFFER       = $000F00 ;64 Bytes keyboard buffer
=$0080					KEY_BUFFER_SIZE  = $0080 ;128 Bytes (constant) keyboard buffer length
=$000f7f				KEY_BUFFER_END   = $000F7F ;1 Byte  Last byte of keyboard buffer
=$000f83				KEY_BUFFER_CMD   = $000F83 ;1 Byte  Indicates the Command Process Status
=$000f84				COMMAND_SIZE_STR = $000F84 ; 1 Byte
=$000f86				COMMAND_COMP_TMP = $000F86 ; 2 Bytes
=$000f87				KEYBOARD_SC_FLG  = $000F87 ;1 Bytes that indicate the Status of Left Shift, Left CTRL, Left ALT, Right Shift
=$000f88				KEYBOARD_SC_TMP  = $000F88 ;1 Byte, Interrupt Save Scan Code while Processing
=$000f89				KEYBOARD_LOCKS   = $000F89 ;1 Byte, the status of the various lock keys
=$000f8a				KEYFLAG          = $000F8A ;1 Byte, flag to indicate if CTRL-C has been pressed
=$000f8b				KEY_BUFFER_RPOS  = $000F8B ;2 Byte, position of the character to read from the KEY_BUFFER
=$000f8d				KEY_BUFFER_WPOS  = $000F8D ;2 Byte, position of the character to write to the KEY_BUFFER
=$001000				TEST_BEGIN       = $001000 ;28672 Bytes Test/diagnostic code for prototype.
=$007fff				TEST_END         = $007FFF ;0 Byte
=$008000				STACK_BEGIN      = $008000 ;32512 Bytes The default beginning of stack space
=$00feff				STACK_END        = $00FEFF ;0 Byte  End of stack space. Everything below this is I/O space
=$00ff00				ISR_BEGIN        = $00FF00 ; Byte  Beginning of CPU vectors in Direct page
=$00ff00				HRESET           = $00FF00 ;16 Bytes Handle RESET asserted. Reboot computer and re-initialize the kernel.
=$00ff10				HCOP             = $00FF10 ;16 Bytes Handle the COP instruction. Program use; not used by OS
=$00ff20				HBRK             = $00FF20 ;16 Bytes Handle the BRK instruction. Returns to BASIC Ready prompt.
=$00ff30				HABORT           = $00FF30 ;16 Bytes Handle ABORT asserted. Return to Ready prompt with an error message.
=$00ff40				HNMI             = $00FF40 ;32 Bytes Handle NMI
=$00ff60				HIRQ             = $00FF60 ;32 Bytes Handle IRQ
=$00ff80				Unused_FF80      = $00FF80 ;End of direct page Interrrupt handlers
=$00ffe0				VECTORS_BEGIN    = $00FFE0 ;0 Byte  Interrupt vectors
=$00ffe0				JMP_READY        = $00FFE0 ;4 Bytes Jumps to ROM READY routine. Modified whenever alternate command interpreter is loaded.
=$00ffe4				VECTOR_COP       = $00FFE4 ;2 Bytes Native COP Interrupt vector
=$00ffe6				VECTOR_BRK       = $00FFE6 ;2 Bytes Native BRK Interrupt vector
=$00ffe8				VECTOR_ABORT     = $00FFE8 ;2 Bytes Native ABORT Interrupt vector
=$00ffea				VECTOR_NMI       = $00FFEA ;2 Bytes Native NMI Interrupt vector
=$00ffec				VECTOR_RESET     = $00FFEC ;2 Bytes Unused (Native RESET vector)
=$00ffee				VECTOR_IRQ       = $00FFEE ;2 Bytes Native IRQ Vector
=$00fff0				RETURN           = $00FFF0 ;4 Bytes RETURN key handler. Points to BASIC or MONITOR subroutine to execute when RETURN is pressed.
=$00fff4				VECTOR_ECOP      = $00FFF4 ;2 Bytes Emulation mode interrupt handler
=$00fff6				VECTOR_EBRK      = $00FFF6 ;2 Bytes Emulation mode interrupt handler
=$00fff8				VECTOR_EABORT    = $00FFF8 ;2 Bytes Emulation mode interrupt handler
=$00fffa				VECTOR_ENMI      = $00FFFA ;2 Bytes Emulation mode interrupt handler
=$00fffc				VECTOR_ERESET    = $00FFFC ;2 Bytes Emulation mode interrupt handler
=$00fffe				VECTOR_EIRQ      = $00FFFE ;2 Bytes Emulation mode interrupt handler
=$400000				VECTORS_END      = $400000 ;*End of vector space
=$00ffff				BANK0_END        = $00FFFF ;End of Bank 00 and Direct page

;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_data.asm

>380000	00 a0 af			                .long $AFA000       ; SCREENBEGIN, 3 bytes, Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>380003	4c 00				                .word 76            ; COLS_VISIBLE, 2 bytes, Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>380005	80 00				                .word 128           ; COLS_PER_LINE, 2 bytes, Columns in memory per screen line. A virtual line can be this long. Default=128
>380007	38 00				                .word 56            ; LINES_VISIBLE, 2 bytes, The number of rows visible on the screen. Default=25
>380009	40 00				                .word 64            ; LINES_MAX, 2 bytes, The number of rows in memory for the screen. Default=64
>38000b	00 a0 af			                .long $AFA000       ; CURSORPOS, 3 bytes, The next character written to the screen will be written in this location.
>38000e	00 00				                .word 0             ; CURSORX, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380010	00 00				                .word 0             ; CURSORY, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380012	0f				                .byte $0F           ; CURCOLOR, 2 bytes, Color of next character to be printed to the screen.
>380013	00				                .byte $00           ; CURATTR, 2 bytes, Attribute of next character to be printed to the screen.
>380014	00 80				                .word STACK_BEGIN   ; STACKBOT, 2 bytes, Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
>380016	ff fe				                .word STACK_END     ; STACKTOP, 2 bytes, Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.

;******  Return to file: src\kernel.asm


;******  Processing file: src\page_00_code.asm

.ff00	18		clc		RHRESET         CLC
.ff01	fb		xce		                XCE
.ff02	5c 00 00 39	jmp $390000	                JML BOOT
.ff10					RHCOP
.ff10	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff12	8b		phb		                PHB
.ff13	0b		phd		                PHD
.ff14	48		pha		                PHA
.ff15	da		phx		                PHX
.ff16	5a		phy		                PHY
.ff17	5c 08 00 39	jmp $390008	                JML BREAK
.ff20					RHBRK
.ff20	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff22	8b		phb		                PHB
.ff23	0b		phd		                PHD
.ff24	48		pha		                PHA
.ff25	da		phx		                PHX
.ff26	5a		phy		                PHY
.ff27	5c 08 00 39	jmp $390008	                JML BREAK
.ff30					RHABORT
.ff30	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff32	8b		phb		                PHB
.ff33	0b		phd		                PHD
.ff34	48		pha		                PHA
.ff35	da		phx		                PHX
.ff36	5a		phy		                PHY
.ff37	5c 08 00 39	jmp $390008	                JML BREAK
.ff40					 RHNMI
.ff40	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff42	8b		phb		                PHB
.ff43	0b		phd		                PHD
.ff44	48		pha		                PHA
.ff45	da		phx		                PHX
.ff46	5a		phy		                PHY
.ff47	22 1e 02 39	jsl $39021e	                JSL NMI_HANDLER
.ff4b	7a		ply		                PLY
.ff4c	fa		plx		                PLX
.ff4d	68		pla		                PLA
.ff4e	2b		pld		                PLD
.ff4f	ab		plb		                PLB
.ff50	40		rti		                RTI
.ff60					RHIRQ
.ff60	c2 30		rep #$30	                REP #$30        ; set A&X long
.ff62	8b		phb		                PHB
.ff63	0b		phd		                PHD
.ff64	48		pha		                PHA
.ff65	da		phx		                PHX
.ff66	5a		phy		                PHY
.ff67	22 f0 00 39	jsl $3900f0	                JSL IRQ_HANDLER
.ff6b	7a		ply		                PLY
.ff6c	fa		plx		                PLX
.ff6d	68		pla		                PLA
.ff6e	2b		pld		                PLD
.ff6f	ab		plb		                PLB
.ff70	40		rti		                RTI

;******  Return to file: src\kernel.asm


;******  Processing file: src\Math_def.asm

=$000100				UNSIGNED_MULT_A_LO  = $000100
=$000101				UNSIGNED_MULT_A_HI  = $000101
=$000102				UNSIGNED_MULT_B_LO  = $000102
=$000103				UNSIGNED_MULT_B_HI  = $000103
=$000104				UNSIGNED_MULT_AL_LO = $000104
=$000105				UNSIGNED_MULT_AL_HI = $000105
=$000106				UNSIGNED_MULT_AH_LO = $000106
=$000107				UNSIGNED_MULT_AH_HI = $000107
=$000108				SIGNED_MULT_A_LO    = $000108
=$000109				SIGNED_MULT_A_HI    = $000109
=$00010a				SIGNED_MULT_B_LO    = $00010A
=$00010b				SIGNED_MULT_B_HI    = $00010B
=$00010c				SIGNED_MULT_AL_LO   = $00010C
=$00010d				SIGNED_MULT_AL_HI   = $00010D
=$00010e				SIGNED_MULT_AH_LO   = $00010E
=$00010f				SIGNED_MULT_AH_HI   = $00010F
=$000110				UNSIGNED_DIV_DEM_LO = $000110
=$000111				UNSIGNED_DIV_DEM_HI = $000111
=$000112				UNSIGNED_DIV_NUM_LO = $000112
=$000113				UNSIGNED_DIV_NUM_HI = $000113
=$000114				UNSIGNED_DIV_QUO_LO = $000114
=$000115				UNSIGNED_DIV_QUO_HI = $000115
=$000116				UNSIGNED_DIV_REM_LO = $000116
=$000117				UNSIGNED_DIV_REM_HI = $000117
=$000118				SIGNED_DIV_DEM_LO   = $000118
=$000119				SIGNED_DIV_DEM_HI   = $000119
=$00011a				SIGNED_DIV_NUM_LO   = $00011A
=$00011b				SIGNED_DIV_NUM_HI   = $00011B
=$00011c				SIGNED_DIV_QUO_LO   = $00011C
=$00011d				SIGNED_DIV_QUO_HI   = $00011D
=$00011e				SIGNED_DIV_REM_LO   = $00011E
=$00011f				SIGNED_DIV_REM_HI   = $00011F
=$000120				ADDER32_A_LL        = $000120
=$000121				ADDER32_A_LH        = $000121
=$000122				ADDER32_A_HL        = $000122
=$000123				ADDER32_A_HH        = $000123
=$000124				ADDER32_B_LL        = $000124
=$000125				ADDER32_B_LH        = $000125
=$000126				ADDER32_B_HL        = $000126
=$000127				ADDER32_B_HH        = $000127
=$000128				ADDER32_R_LL        = $000128
=$000129				ADDER32_R_LH        = $000129
=$00012a				ADDER32_R_HL        = $00012A
=$00012b				ADDER32_R_HH        = $00012B

;******  Return to file: src\kernel.asm


;******  Processing file: src\interrupt_def.asm

=$000140				INT_PENDING_REG0 = $000140 ;
=$000141				INT_PENDING_REG1 = $000141 ;
=$000142				INT_PENDING_REG2 = $000142 ;
=$000144				INT_POL_REG0     = $000144 ;
=$000145				INT_POL_REG1     = $000145 ;
=$000146				INT_POL_REG2     = $000146 ;
=$000148				INT_EDGE_REG0    = $000148 ;
=$000149				INT_EDGE_REG1    = $000149 ;
=$00014a				INT_EDGE_REG2    = $00014A ;
=$00014c				INT_MASK_REG0    = $00014C ;
=$00014d				INT_MASK_REG1    = $00014D ;
=$00014e				INT_MASK_REG2    = $00014E ;
=$01					FNX0_INT00_SOF    = $01  ;Start of Frame @ 60FPS
=$02					FNX0_INT01_SOL    = $02  ;Start of Line (Programmable)
=$04					FNX0_INT02_TMR0   = $04  ;Timer 0 Interrupt
=$08					FNX0_INT03_TMR1   = $08  ;Timer 1 Interrupt
=$10					FNX0_INT04_TMR2   = $10  ;Timer 2 Interrupt
=$20					FNX0_INT05_RTC    = $20  ;Real-Time Clock Interrupt
=$40					FNX0_INT06_FDC    = $40  ;Floppy Disk Controller
=$80					FNX0_INT07_MOUSE  = $80  ; Mouse Interrupt (INT12 in SuperIO IOspace)
=$01					FNX1_INT00_KBD    = $01  ;Keyboard Interrupt
=$02					FNX1_INT01_SC0    = $02  ;Sprite 2 Sprite Collision
=$04					FNX1_INT02_SC1    = $04  ;Sprite 2 Tiles Collision
=$08					FNX1_INT03_COM2   = $08  ;Serial Port 2
=$10					FNX1_INT04_COM1   = $10  ;Serial Port 1
=$20					FNX1_INT05_MPU401 = $20  ;Midi Controller Interrupt
=$40					FNX1_INT06_LPT    = $40  ;Parallel Port
=$80					FNX1_INT07_SDCARD = $80  ;SD Card Controller Interrupt
=$01					FNX2_INT00_OPL2R  = $01  ;OPl2 Right Channel
=$02					FNX2_INT01_OPL2L  = $02  ;OPL2 Left Channel
=$04					FNX2_INT02_BTX_INT= $04  ;Beatrix Interrupt (TBD)
=$08					FNX2_INT03_SDMA   = $08  ;System DMA
=$10					FNX2_INT04_VDMA   = $10  ;Video DMA
=$20					FNX2_INT05_DACHP  = $20  ;DAC Hot Plug
=$40					FNX2_INT06_EXT    = $40  ;External Expansion
=$80					FNX2_INT07_ALLONE = $80  ; Not Used - Always 1

;******  Return to file: src\kernel.asm


;******  Processing file: src\dram_inc.asm

=$afa000				SCREEN_PAGE0     = $AFA000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
=$afc000				SCREEN_PAGE1     = $AFC000 ;8192 Bytes Additional page of display RAM. This can be used for page flipping or to handle multiple edit buffers.
=$b00000				SCREEN_END       = $B00000 ;End of display memory

;******  Return to file: src\kernel.asm


;******  Processing file: src\vicky_def.asm

=$af0000				MASTER_CTRL_REG_L	      = $AF0000
=$01					Mstr_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$02					Mstr_Ctrl_Text_Overlay  = $02       ; Enable the Overlay of the text mode on top of Graphic Mode (the Background Color is ignored)
=$04					Mstr_Ctrl_Graph_Mode_En = $04       ; Enable the Graphic Mode
=$08					Mstr_Ctrl_Bitmap_En     = $08       ; Enable the Bitmap Module In Vicky
=$10					Mstr_Ctrl_TileMap_En    = $10       ; Enable the Tile Module in Vicky
=$20					Mstr_Ctrl_Sprite_En     = $20       ; Enable the Sprite Module in Vicky
=$40					Mstr_Ctrl_GAMMA_En      = $40       ; this Enable the GAMMA correction - The Analog and DVI have different color value, the GAMMA is great to correct the difference
=$80					Mstr_Ctrl_Disable_Vid   = $80       ; This will disable the Scanning of the Video hence giving 100% bandwith to the CPU
=$af0001				MASTER_CTRL_REG_H	      = $AF0001
=$af0002				VKY_RESERVED_00         = $AF0002
=$af0003				VKY_RESERVED_01         = $AF0003
=$01					Border_Ctrl_Enable      = $01
=$af0004				BORDER_CTRL_REG         = $AF0004 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$af0005				BORDER_COLOR_B          = $AF0005
=$af0006				BORDER_COLOR_G          = $AF0006
=$af0007				BORDER_COLOR_R          = $AF0007
=$af0008				BORDER_X_SIZE           = $AF0008; X-  Values: 0 - 32 (Default: 32)
=$af0009				BORDER_Y_SIZE           = $AF0009; Y- Values 0 -32 (Default: 32)
=$af000d				BACKGROUND_COLOR_B      = $AF000D ; When in Graphic Mode, if a pixel is "0" then the Background pixel is chosen
=$af000e				BACKGROUND_COLOR_G      = $AF000E
=$af000f				BACKGROUND_COLOR_R      = $AF000F ;
=$af0010				VKY_TXT_CURSOR_CTRL_REG = $AF0010   ;[0]  Enable Text Mode
=$01					Vky_Cursor_Enable       = $01
=$02					Vky_Cursor_Flash_Rate0  = $02
=$04					Vky_Cursor_Flash_Rate1  = $04
=$08					Vky_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10					Vky_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$af0011				VKY_TXT_START_ADD_PTR   = $AF0011   ; This is an offset to change the Starting address of the Text Mode Buffer (in x)
=$af0012				VKY_TXT_CURSOR_CHAR_REG = $AF0012
=$af0013				VKY_TXT_CURSOR_COLR_REG = $AF0013
=$af0014				VKY_TXT_CURSOR_X_REG_L  = $AF0014
=$af0015				VKY_TXT_CURSOR_X_REG_H  = $AF0015
=$af0016				VKY_TXT_CURSOR_Y_REG_L  = $AF0016
=$af0017				VKY_TXT_CURSOR_Y_REG_H  = $AF0017
=$af001b				VKY_LINE_IRQ_CTRL_REG   = $AF001B ;[0] - Enable Line 0, [1] -Enable Line 1
=$af001c				VKY_LINE0_CMP_VALUE_LO  = $AF001C ;Write Only [7:0]
=$af001d				VKY_LINE0_CMP_VALUE_HI  = $AF001D ;Write Only [3:0]
=$af001e				VKY_LINE1_CMP_VALUE_LO  = $AF001E ;Write Only [7:0]
=$af001f				VKY_LINE1_CMP_VALUE_HI  = $AF001F ;Write Only [3:0]
=$af001c				VKY_INFO_CHIP_NUM_L     = $AF001C
=$af001d				VKY_INFO_CHIP_NUM_H     = $AF001D
=$af001e				VKY_INFO_CHIP_VER_L     = $AF001E
=$af001f				VKY_INFO_CHIP_VER_H     = $AF001F
=$01					TILE_Enable             = $01
=$02					TILE_LUT0               = $02
=$04					TILE_LUT1               = $04
=$08					TILE_LUT2               = $08
=$80					TILESHEET_256x256_En    = $80   ; 0 -> Sequential, 1-> 256x256 Tile Sheet Striding
=$af0100				TL0_CONTROL_REG         = $AF0100       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0101				TL0_START_ADDY_L        = $AF0101       ; Not USed right now - Starting Address to where is the MAP
=$af0102				TL0_START_ADDY_M        = $AF0102
=$af0103				TL0_START_ADDY_H        = $AF0103
=$af0104				TL0_MAP_X_STRIDE_L      = $AF0104       ; The Stride of the Map
=$af0105				TL0_MAP_X_STRIDE_H      = $AF0105
=$af0106				TL0_MAP_Y_STRIDE_L      = $AF0106       ; The Stride of the Map
=$af0107				TL0_MAP_Y_STRIDE_H      = $AF0107
=$af0108				TL1_CONTROL_REG         = $AF0108       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0109				TL1_START_ADDY_L        = $AF0109       ; Not USed right now - Starting Address to where is the MAP
=$af010a				TL1_START_ADDY_M        = $AF010A
=$af010b				TL1_START_ADDY_H        = $AF010B
=$af010c				TL1_MAP_X_STRIDE_L      = $AF010C       ; The Stride of the Map
=$af010d				TL1_MAP_X_STRIDE_H      = $AF010D
=$af010e				TL1_MAP_Y_STRIDE_L      = $AF010E       ; The Stride of the Map
=$af010f				TL1_MAP_Y_STRIDE_H      = $AF010F
=$af0110				TL2_CONTROL_REG         = $AF0110       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0111				TL2_START_ADDY_L        = $AF0111       ; Not USed right now - Starting Address to where is the MAP
=$af0112				TL2_START_ADDY_M        = $AF0112
=$af0113				TL2_START_ADDY_H        = $AF0113
=$af0114				TL2_MAP_X_STRIDE_L      = $AF0114       ; The Stride of the Map
=$af0115				TL2_MAP_X_STRIDE_H      = $AF0115
=$af0116				TL2_MAP_Y_STRIDE_L      = $AF0116       ; The Stride of the Map
=$af0117				TL2_MAP_Y_STRIDE_H      = $AF0117
=$af0118				TL3_CONTROL_REG         = $AF0118       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0119				TL3_START_ADDY_L        = $AF0119       ; Not USed right now - Starting Address to where is the MAP
=$af011a				TL3_START_ADDY_M        = $AF011A
=$af011b				TL3_START_ADDY_H        = $AF011B
=$af011c				TL3_MAP_X_STRIDE_L      = $AF011C       ; The Stride of the Map
=$af011d				TL3_MAP_X_STRIDE_H      = $AF011D
=$af011e				TL3_MAP_Y_STRIDE_L      = $AF011E       ; The Stride of the Map
=$af011f				TL3_MAP_Y_STRIDE_H      = $AF011F
=$af0140				BM_CONTROL_REG          = $AF0140
=$af0141				BM_START_ADDY_L         = $AF0141
=$af0142				BM_START_ADDY_M         = $AF0142
=$af0143				BM_START_ADDY_H         = $AF0143
=$af0144				BM_X_SIZE_L             = $AF0144
=$af0145				BM_X_SIZE_H             = $AF0145
=$af0146				BM_Y_SIZE_L             = $AF0146
=$af0147				BM_Y_SIZE_H             = $AF0147
=$af0148				BM_RESERVED_0           = $AF0148
=$af0149				BM_RESERVED_1           = $AF0149
=$af014a				BM_RESERVED_2           = $AF014A
=$af014b				BM_RESERVED_3           = $AF014B
=$af014c				BM_RESERVED_4           = $AF014C
=$af014d				BM_RESERVED_5           = $AF014D
=$af014e				BM_RESERVED_6           = $AF014E
=$af014f				BM_RESERVED_7           = $AF014F
=$01					SPRITE_Enable             = $01
=$02					SPRITE_LUT0               = $02 ; This is the LUT that the Sprite will use
=$04					SPRITE_LUT1               = $04
=$08					SPRITE_LUT2               = $08 ; Only 4 LUT for Now, So this bit is not used.
=$10					SPRITE_DEPTH0             = $10 ; This is the Layer the Sprite will be Displayed in
=$20					SPRITE_DEPTH1             = $20
=$40					SPRITE_DEPTH2             = $40
=$af0200				SP00_CONTROL_REG        = $AF0200
=$af0201				SP00_ADDY_PTR_L         = $AF0201
=$af0202				SP00_ADDY_PTR_M         = $AF0202
=$af0203				SP00_ADDY_PTR_H         = $AF0203
=$af0204				SP00_X_POS_L            = $AF0204
=$af0205				SP00_X_POS_H            = $AF0205
=$af0206				SP00_Y_POS_L            = $AF0206
=$af0207				SP00_Y_POS_H            = $AF0207
=$af0208				SP01_CONTROL_REG        = $AF0208
=$af0209				SP01_ADDY_PTR_L         = $AF0209
=$af020a				SP01_ADDY_PTR_M         = $AF020A
=$af020b				SP01_ADDY_PTR_H         = $AF020B
=$af020c				SP01_X_POS_L            = $AF020C
=$af020d				SP01_X_POS_H            = $AF020D
=$af020e				SP01_Y_POS_L            = $AF020E
=$af020f				SP01_Y_POS_H            = $AF020F
=$af0210				SP02_CONTROL_REG        = $AF0210
=$af0211				SP02_ADDY_PTR_L         = $AF0211
=$af0212				SP02_ADDY_PTR_M         = $AF0212
=$af0213				SP02_ADDY_PTR_H         = $AF0213
=$af0214				SP02_X_POS_L            = $AF0214
=$af0215				SP02_X_POS_H            = $AF0215
=$af0216				SP02_Y_POS_L            = $AF0216
=$af0217				SP02_Y_POS_H            = $AF0217
=$af0218				SP03_CONTROL_REG        = $AF0218
=$af0219				SP03_ADDY_PTR_L         = $AF0219
=$af021a				SP03_ADDY_PTR_M         = $AF021A
=$af021b				SP03_ADDY_PTR_H         = $AF021B
=$af021c				SP03_X_POS_L            = $AF021C
=$af021d				SP03_X_POS_H            = $AF021D
=$af021e				SP03_Y_POS_L            = $AF021E
=$af021f				SP03_Y_POS_H            = $AF021F
=$af0220				SP04_CONTROL_REG        = $AF0220
=$af0221				SP04_ADDY_PTR_L         = $AF0221
=$af0222				SP04_ADDY_PTR_M         = $AF0222
=$af0223				SP04_ADDY_PTR_H         = $AF0223
=$af0224				SP04_X_POS_L            = $AF0224
=$af0225				SP04_X_POS_H            = $AF0225
=$af0226				SP04_Y_POS_L            = $AF0226
=$af0227				SP04_Y_POS_H            = $AF0227
=$af0228				SP05_CONTROL_REG        = $AF0228
=$af0229				SP05_ADDY_PTR_L         = $AF0229
=$af022a				SP05_ADDY_PTR_M         = $AF022A
=$af022b				SP05_ADDY_PTR_H         = $AF022B
=$af022c				SP05_X_POS_L            = $AF022C
=$af022d				SP05_X_POS_H            = $AF022D
=$af022e				SP05_Y_POS_L            = $AF022E
=$af022f				SP05_Y_POS_H            = $AF022F
=$af0230				SP06_CONTROL_REG        = $AF0230
=$af0231				SP06_ADDY_PTR_L         = $AF0231
=$af0232				SP06_ADDY_PTR_M         = $AF0232
=$af0233				SP06_ADDY_PTR_H         = $AF0233
=$af0234				SP06_X_POS_L            = $AF0234
=$af0235				SP06_X_POS_H            = $AF0235
=$af0236				SP06_Y_POS_L            = $AF0236
=$af0237				SP06_Y_POS_H            = $AF0237
=$af0238				SP07_CONTROL_REG        = $AF0238
=$af0239				SP07_ADDY_PTR_L         = $AF0239
=$af023a				SP07_ADDY_PTR_M         = $AF023A
=$af023b				SP07_ADDY_PTR_H         = $AF023B
=$af023c				SP07_X_POS_L            = $AF023C
=$af023d				SP07_X_POS_H            = $AF023D
=$af023e				SP07_Y_POS_L            = $AF023E
=$af023f				SP07_Y_POS_H            = $AF023F
=$af0240				SP08_CONTROL_REG        = $AF0240
=$af0241				SP08_ADDY_PTR_L         = $AF0241
=$af0242				SP08_ADDY_PTR_M         = $AF0242
=$af0243				SP08_ADDY_PTR_H         = $AF0243
=$af0244				SP08_X_POS_L            = $AF0244
=$af0245				SP08_X_POS_H            = $AF0245
=$af0246				SP08_Y_POS_L            = $AF0246
=$af0247				SP08_Y_POS_H            = $AF0247
=$af0248				SP09_CONTROL_REG        = $AF0248
=$af0249				SP09_ADDY_PTR_L         = $AF0249
=$af024a				SP09_ADDY_PTR_M         = $AF024A
=$af024b				SP09_ADDY_PTR_H         = $AF024B
=$af024c				SP09_X_POS_L            = $AF024C
=$af024d				SP09_X_POS_H            = $AF024D
=$af024e				SP09_Y_POS_L            = $AF024E
=$af024f				SP09_Y_POS_H            = $AF024F
=$af0250				SP10_CONTROL_REG        = $AF0250
=$af0251				SP10_ADDY_PTR_L         = $AF0251
=$af0252				SP10_ADDY_PTR_M         = $AF0252
=$af0253				SP10_ADDY_PTR_H         = $AF0253
=$af0254				SP10_X_POS_L            = $AF0254
=$af0255				SP10_X_POS_H            = $AF0255
=$af0256				SP10_Y_POS_L            = $AF0256
=$af0257				SP10_Y_POS_H            = $AF0257
=$af0258				SP11_CONTROL_REG        = $AF0258
=$af0259				SP11_ADDY_PTR_L         = $AF0259
=$af025a				SP11_ADDY_PTR_M         = $AF025A
=$af025b				SP11_ADDY_PTR_H         = $AF025B
=$af025c				SP11_X_POS_L            = $AF025C
=$af025d				SP11_X_POS_H            = $AF025D
=$af025e				SP11_Y_POS_L            = $AF025E
=$af025f				SP11_Y_POS_H            = $AF025F
=$af0260				SP12_CONTROL_REG        = $AF0260
=$af0261				SP12_ADDY_PTR_L         = $AF0261
=$af0262				SP12_ADDY_PTR_M         = $AF0262
=$af0263				SP12_ADDY_PTR_H         = $AF0263
=$af0264				SP12_X_POS_L            = $AF0264
=$af0265				SP12_X_POS_H            = $AF0265
=$af0266				SP12_Y_POS_L            = $AF0266
=$af0267				SP12_Y_POS_H            = $AF0267
=$af0268				SP13_CONTROL_REG        = $AF0268
=$af0269				SP13_ADDY_PTR_L         = $AF0269
=$af026a				SP13_ADDY_PTR_M         = $AF026A
=$af026b				SP13_ADDY_PTR_H         = $AF026B
=$af026c				SP13_X_POS_L            = $AF026C
=$af026d				SP13_X_POS_H            = $AF026D
=$af026e				SP13_Y_POS_L            = $AF026E
=$af026f				SP13_Y_POS_H            = $AF026F
=$af0270				SP14_CONTROL_REG        = $AF0270
=$af0271				SP14_ADDY_PTR_L         = $AF0271
=$af0272				SP14_ADDY_PTR_M         = $AF0272
=$af0273				SP14_ADDY_PTR_H         = $AF0273
=$af0274				SP14_X_POS_L            = $AF0274
=$af0275				SP14_X_POS_H            = $AF0275
=$af0276				SP14_Y_POS_L            = $AF0276
=$af0277				SP14_Y_POS_H            = $AF0277
=$af0278				SP15_CONTROL_REG        = $AF0278
=$af0279				SP15_ADDY_PTR_L         = $AF0279
=$af027a				SP15_ADDY_PTR_M         = $AF027A
=$af027b				SP15_ADDY_PTR_H         = $AF027B
=$af027c				SP15_X_POS_L            = $AF027C
=$af027d				SP15_X_POS_H            = $AF027D
=$af027e				SP15_Y_POS_L            = $AF027E
=$af027f				SP15_Y_POS_H            = $AF027F
=$af0280				SP16_CONTROL_REG        = $AF0280
=$af0281				SP16_ADDY_PTR_L         = $AF0281
=$af0282				SP16_ADDY_PTR_M         = $AF0282
=$af0283				SP16_ADDY_PTR_H         = $AF0283
=$af0284				SP16_X_POS_L            = $AF0284
=$af0285				SP16_X_POS_H            = $AF0285
=$af0286				SP16_Y_POS_L            = $AF0286
=$af0287				SP16_Y_POS_H            = $AF0287
=$af0288				SP17_CONTROL_REG        = $AF0288
=$af0289				SP17_ADDY_PTR_L         = $AF0289
=$af028a				SP17_ADDY_PTR_M         = $AF028A
=$af028b				SP17_ADDY_PTR_H         = $AF028B
=$af028c				SP17_X_POS_L            = $AF028C
=$af028d				SP17_X_POS_H            = $AF028D
=$af028e				SP17_Y_POS_L            = $AF028E
=$af028f				SP17_Y_POS_H            = $AF028F
=$af0400				VDMA_CONTROL_REG        = $AF0400
=$01					VDMA_CTRL_Enable        = $01
=$02					VDMA_CTRL_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04					VDMA_CTRL_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08					VDMA_CTRL_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$80					VDMA_CTRL_Start_TRF     = $80     ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0401				VDMA_BYTE_2_WRITE       = $AF0401 ; Write Only - Byte to Write in the Fill Function
=$af0401				VDMA_STATUS_REG         = $AF0401 ; Read only
=$01					VDMA_STAT_Size_Err      = $01     ; If Set to 1, Overall Size is Invalid
=$02					VDMA_STAT_Dst_Add_Err   = $02     ; If Set to 1, Destination Address Invalid
=$04					VDMA_STAT_Src_Add_Err   = $04     ; If Set to 1, Source Address Invalid
=$80					VDMA_STAT_VDMA_IPS      = $80     ; If Set to 1, VDMA Transfer in Progress (this Inhibit CPU Access to Mem)
=$af0402				VDMA_SRC_ADDY_L         = $AF0402 ; Pointer to the Source of the Data to be stransfered
=$af0403				VDMA_SRC_ADDY_M         = $AF0403 ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0404				VDMA_SRC_ADDY_H         = $AF0404
=$af0405				VDMA_DST_ADDY_L         = $AF0405 ; Destination Pointer within Vicky's video memory Range
=$af0406				VDMA_DST_ADDY_M         = $AF0406 ; ($00_0000 - $3F_0000)
=$af0407				VDMA_DST_ADDY_H         = $AF0407
=$af0408				VDMA_SIZE_L             = $AF0408 ; Maximum Value: $40:0000 (4Megs)
=$af0409				VDMA_SIZE_M             = $AF0409
=$af040a				VDMA_SIZE_H             = $AF040A
=$af040b				VDMA_IGNORED            = $AF040B
=$af0408				VDMA_X_SIZE_L           = $AF0408 ; Maximum Value: 65535
=$af0409				VDMA_X_SIZE_H           = $AF0409
=$af040a				VDMA_Y_SIZE_L           = $AF040A ; Maximum Value: 65535
=$af040b				VDMA_Y_SIZE_H           = $AF040B
=$af040c				VDMA_SRC_STRIDE_L       = $AF040C ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040d				VDMA_SRC_STRIDE_H       = $AF040D ;
=$af040e				VDMA_DST_STRIDE_L       = $AF040E ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040f				VDMA_DST_STRIDE_H       = $AF040F ;
=$af0500				MOUSE_PTR_GRAP0_START    = $AF0500 ; 16 x 16 = 256 Pixels (Grey Scale) 0 = Transparent, 1 = Black , 255 = White
=$af05ff				MOUSE_PTR_GRAP0_END      = $AF05FF ; Pointer 0
=$af0600				MOUSE_PTR_GRAP1_START    = $AF0600 ;
=$af06ff				MOUSE_PTR_GRAP1_END      = $AF06FF ; Pointer 1
=$af0700				MOUSE_PTR_CTRL_REG_L    = $AF0700 ; Bit[0] Enable, Bit[1] = 0  ( 0 = Pointer0, 1 = Pointer1)
=$af0701				MOUSE_PTR_CTRL_REG_H    = $AF0701 ;
=$af0702				MOUSE_PTR_X_POS_L       = $AF0702 ; X Position (0 - 639) (Can only read now) Writing will have no effect
=$af0703				MOUSE_PTR_X_POS_H       = $AF0703 ;
=$af0704				MOUSE_PTR_Y_POS_L       = $AF0704 ; Y Position (0 - 479) (Can only read now) Writing will have no effect
=$af0705				MOUSE_PTR_Y_POS_H       = $AF0705 ;
=$af0706				MOUSE_PTR_BYTE0         = $AF0706 ; Byte 0 of Mouse Packet (you must write 3 Bytes)
=$af0707				MOUSE_PTR_BYTE1         = $AF0707 ; Byte 1 of Mouse Packet (if you don't, then )
=$af0708				MOUSE_PTR_BYTE2         = $AF0708 ; Byte 2 of Mouse Packet (state Machine will be jammed in 1 state)
=$af070b				C256F_MODEL_MAJOR       = $AF070B ;
=$af070c				C256F_MODEL_MINOR       = $AF070C ;
=$af070d				FPGA_DOR                = $AF070D ;
=$af070e				FPGA_MOR                = $AF070E ;
=$af070f				FPGA_YOR                = $AF070F ;
=$af1f40				FG_CHAR_LUT_PTR         = $AF1F40
=$af1f80				BG_CHAR_LUT_PTR		      = $AF1F80
=$af2000				GRPH_LUT0_PTR		        = $AF2000
=$af2400				GRPH_LUT1_PTR		        = $AF2400
=$af2800				GRPH_LUT2_PTR		        = $AF2800
=$af2c00				GRPH_LUT3_PTR		        = $AF2C00
=$af3000				GRPH_LUT4_PTR		        = $AF3000
=$af3400				GRPH_LUT5_PTR		        = $AF3400
=$af3800				GRPH_LUT6_PTR		        = $AF3800
=$af3c00				GRPH_LUT7_PTR		        = $AF3C00
=$af4000				GAMMA_B_LUT_PTR		      = $AF4000
=$af4100				GAMMA_G_LUT_PTR		      = $AF4100
=$af4200				GAMMA_R_LUT_PTR		      = $AF4200
=$af5000				TILE_MAP0       		    = $AF5000     ;$AF5000 - $AF57FF
=$af5800				TILE_MAP1               = $AF5800     ;$AF5800 - $AF5FFF
=$af6000				TILE_MAP2               = $AF6000     ;$AF6000 - $AF67FF
=$af6800				TILE_MAP3               = $AF6800     ;$AF6800 - $AF6FFF
=$af8000				FONT_MEMORY_BANK0       = $AF8000     ;$AF8000 - $AF87FF
=$af8800				FONT_MEMORY_BANK1       = $AF8800     ;$AF8800 - $AF8FFF
=$afa000				CS_TEXT_MEM_PTR         = $AFA000
=$afc000				CS_COLOR_MEM_PTR        = $AFC000
=$afe000				BTX_START               = $AFE000     ; BEATRIX Registers
=$afffff				BTX_END                 = $AFFFFF

;******  Return to file: src\kernel.asm


;******  Processing file: src\super_io_def.asm

=$af1100				PME_STS_REG     = $AF1100
=$af1102				PME_EN_REG		  = $AF1102
=$af1104				PME_STS1_REG		= $AF1104
=$af1105				PME_STS2_REG		= $AF1105
=$af1106				PME_STS3_REG		= $AF1106
=$af1107				PME_STS4_REG		= $AF1107
=$af1108				PME_STS5_REG		= $AF1108
=$af110a				PME_EN1_REG     = $AF110A
=$af110b				PME_EN2_REG     = $AF110B
=$af110c				PME_EN3_REG     = $AF110C
=$af110d				PME_EN4_REG     = $AF110D
=$af110e				PME_EN5_REG     = $AF110E
=$af1110				SMI_STS1_REG		= $AF1110
=$af1111				SMI_STS2_REG		= $AF1111
=$af1112				SMI_STS3_REG		= $AF1112
=$af1113				SMI_STS4_REG		= $AF1113
=$af1114				SMI_STS5_REG		= $AF1114
=$af1116				SMI_EN1_REG     = $AF1116
=$af1117				SMI_EN2_REG     = $AF1117
=$af1118				SMI_EN3_REG     = $AF1118
=$af1119				SMI_EN4_REG     = $AF1119
=$af111a				SMI_EN5_REG     = $AF111A
=$af111c				MSC_ST_REG      = $AF111C
=$af111e				FORCE_DISK_CHANGE       = $AF111E
=$af111f				FLOPPY_DATA_RATE        = $AF111F
=$af1120				UART1_FIFO_CTRL_SHDW    = $AF1120
=$af1121				UART2_FIFO_CTRL_SHDW    = $AF1121
=$af1122				DEV_DISABLE_REG         = $AF1122
=$af1123				GP10_REG    		= $AF1123
=$af1124				GP11_REG    		= $AF1124
=$af1125				GP12_REG    		= $AF1125
=$af1126				GP13_REG    		= $AF1126
=$af1127				GP14_REG    		= $AF1127
=$af1128				GP15_REG    		= $AF1128
=$af1129				GP16_REG    		= $AF1129
=$af112a				GP17_REG    		= $AF112A
=$af112b				GP20_REG    		= $AF112B
=$af112c				GP21_REG    		= $AF112C
=$af112d				GP22_REG		= $AF112D
=$af112f				GP24_REG		= $AF112F
=$af1130				GP25_REG		= $AF1130
=$af1131				GP26_REG		= $AF1131
=$af1132				GP27_REG		= $AF1132
=$af1133				GP30_REG		= $AF1133
=$af1134				GP31_REG		= $AF1134
=$af1135				GP32_REG		= $AF1135
=$af1136				GP33_REG		= $AF1136
=$af1137				GP34_REG		= $AF1137
=$af1138				GP35_REG		= $AF1138
=$af1139				GP36_REG		= $AF1139
=$af113a				GP37_REG		= $AF113A
=$af113b				GP40_REG		= $AF113B
=$af113c				GP41_REG		= $AF113C
=$af113d				GP42_REG		= $AF113D
=$af113e				GP43_REG		= $AF113E
=$af113f				GP50_REG		= $AF113F
=$af1140				GP51_REG		= $AF1140
=$af1141				GP52_REG		= $AF1141
=$af1142				GP53_REG		= $AF1142
=$af1143				GP54_REG		= $AF1143
=$af1144				GP55_REG		= $AF1144
=$af1145				GP56_REG		= $AF1145
=$af1146				GP57_REG		= $AF1146
=$af1147				GP60_REG		= $AF1147
=$af1148				GP61_REG		= $AF1148
=$af114b				GP1_REG			= $AF114B
=$af114c				GP2_REG			= $AF114C
=$af114d				GP3_REG			= $AF114D
=$af114e				GP4_REG			= $AF114E
=$af114f				GP5_REG			= $AF114F
=$af1150				GP6_REG			= $AF1150
=$af1156				FAN1_REG		        = $AF1156
=$af1157				FAN2_REG            = $AF1157
=$af1158				FAN_CTRL_REG  	    = $AF1158
=$af1159				FAN1_TACH_REG       = $AF1159
=$af115a				FAN2_TACH_REG       = $AF115A
=$af115b				FAN1_PRELOAD_REG    = $AF115B
=$af115c				FAN2_PRELOAD_REG    = $AF115C
=$af115d				LED1_REG    		    = $AF115D
=$af115e				LED2_REG    		    = $AF115E
=$af115f				KEYBOARD_SCAN_CODE	= $AF115F

;******  Return to file: src\kernel.asm


;******  Processing file: src\keyboard_def.asm

=$af1064				STATUS_PORT 	= $AF1064
=$af1060				KBD_OUT_BUF 	= $AF1060
=$af1060				KBD_INPT_BUF	= $AF1060
=$af1064				KBD_CMD_BUF		= $AF1064
=$af1060				KBD_DATA_BUF	= $AF1060
=$af1060				PORT_A		    = $AF1060
=$af1061				PORT_B			= $AF1061
=$01					OUT_BUF_FULL    = $01
=$02					INPT_BUF_FULL	= $02
=$04					SYS_FLAG		= $04
=$08					CMD_DATA		= $08
=$10					KEYBD_INH       = $10
=$20					TRANS_TMOUT	    = $20
=$40					RCV_TMOUT		= $40
=$80					PARITY_EVEN		= $80
=$10					INH_KEYBOARD	= $10
=$ae					KBD_ENA			= $AE
=$ad					KBD_DIS			= $AD
=$f1					KB_MENU			= $F1
=$f4					KB_ENABLE		= $F4
=$f7					KB_MAKEBREAK    = $F7
=$fe					KB_ECHO			= $FE
=$ff					KB_RESET		= $FF
=$ed					KB_LED_CMD		= $ED
=$aa					KB_OK			= $AA
=$fa					KB_ACK			= $FA
=$ff					KB_OVERRUN		= $FF
=$fe					KB_RESEND		= $FE
=$f0					KB_BREAK		= $F0
=$10					KB_FA			= $10
=$20					KB_FE			= $20
=$40					KB_PR_LED		= $40
=$01					KB_SCROLL_LOCK  = $01
=$02					KB_NUM_LOCK     = $02
=$04					KB_CAPS_LOCK    = $04

;******  Return to file: src\kernel.asm


;******  Processing file: src\SID_def.asm

=$afe400				SID0_V1_FREQ_LO    = $AFE400 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$afe401				SID0_V1_FREQ_HI    = $AFE401 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$afe402				SID0_V1_PW_LO      = $AFE402 ;SID - L - Voice 1 (Write Only) - PW LOW
=$afe403				SID0_V1_PW_HI      = $AFE403 ;SID - L - Voice 1 (Write Only) - PW HI
=$afe404				SID0_V1_CTRL       = $AFE404 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$afe405				SID0_V1_ATCK_DECY  = $AFE405 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$afe406				SID0_V1_SSTN_RLSE  = $AFE406 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$afe407				SID0_V2_FREQ_LO    = $AFE407 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$afe408				SID0_V2_FREQ_HI    = $AFE408 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$afe409				SID0_V2_PW_LO      = $AFE409 ;SID - L - Voice 2 (Write Only) - PW LOW
=$afe40a				SID0_V2_PW_HI      = $AFE40A ;SID - L - Voice 2 (Write Only) - PW HI
=$afe40b				SID0_V2_CTRL       = $AFE40B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$afe40c				SID0_V2_ATCK_DECY  = $AFE40C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$afe40d				SID0_V2_SSTN_RLSE  = $AFE40D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$afe40e				SID0_V3_FREQ_LO    = $AFE40E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$afe40f				SID0_V3_FREQ_HI    = $AFE40F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$afe410				SID0_V3_PW_LO      = $AFE410 ;SID - L - Voice 3 (Write Only) - PW LOW
=$afe411				SID0_V3_PW_HI      = $AFE411 ;SID - L - Voice 3 (Write Only) - PW HI
=$afe412				SID0_V3_CTRL       = $AFE412 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$afe413				SID0_V3_ATCK_DECY  = $AFE413 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$afe414				SID0_V3_SSTN_RLSE  = $AFE414 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$afe415				SID0_FC_LO         = $AFE415 ;SID - L - Filter (Write Only) - FC LOW
=$afe416				SID0_FC_HI         = $AFE416 ;SID - L - Filter (Write Only) - FC HI
=$afe417				SID0_RES_FILT      = $AFE417 ;SID - L - Filter (Write Only) - RES / FILT
=$afe418				SID0_MODE_VOL      = $AFE418 ;SID - L - Filter (Write Only) - MODE / VOL
=$afe419				SID0_POT_X         = $AFE419 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$afe41a				SID0_POT_Y         = $AFE41A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$afe41b				SID0_OSC3_RND      = $AFE41B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$afe41c				SID0_ENV3          = $AFE41C ;SID - L - Misc (Read Only)  - ENV3
=$afe41d				SID0_NOT_USED0     = $AFE41D ;SID - L - NOT USED
=$afe41e				SID0_NOT_USED1     = $AFE41E ;SID - L - NOT USED
=$afe41f				SID0_NOT_USED2     = $AFE41F ;SID - L - NOT USED

;******  Return to file: src\kernel.asm


;******  Processing file: src\RTC_def.asm

=$af0800				RTC_SEC       = $AF0800 ;Seconds Register
=$af0801				RTC_SEC_ALARM = $AF0801 ;Seconds Alarm Register
=$af0802				RTC_MIN       = $AF0802 ;Minutes Register
=$af0803				RTC_MIN_ALARM = $AF0803 ;Minutes Alarm Register
=$af0804				RTC_HRS       = $AF0804 ;Hours Register
=$af0805				RTC_HRS_ALARM = $AF0805 ;Hours Alarm Register
=$af0806				RTC_DAY       = $AF0806 ;Day Register
=$af0807				RTC_DAY_ALARM = $AF0807 ;Day Alarm Register
=$af0808				RTC_DOW       = $AF0808 ;Day of Week Register
=$af0809				RTC_MONTH     = $AF0809 ;Month Register
=$af080a				RTC_YEAR      = $AF080A ;Year Register
=$af080b				RTC_RATES     = $AF080B ;Rates Register
=$af080c				RTC_ENABLE    = $AF080C ;Enables Register
=$af080d				RTC_FLAGS     = $AF080D ;Flags Register
=$af080e				RTC_CTRL      = $AF080E ;Control Register
=$af080f				RTC_CENTURY   = $AF080F ;Century Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\io_def.asm

=0					CHAN_CONSOLE  = 0           ; ID for screen and keyboard access
=1					CHAN_COM1     = 1           ; ID for serial access on COM1 (external port)
=2					CHAN_COM2     = 2           ; ID for serial access on COM2 (internal port)
=3					CHAN_LPT      = 3           ; ID for parallel port
=$afe810				SDCARD_DATA   = $AFE810     ;(R/W) SDCARD (CH376S) Data PORT_A (A0 = 0)
=$afe811				SDCARD_CMD    = $AFE811     ;(R/W) SDCARD (CH376S) CMD/STATUS Port (A0 = 1)
=$afe812				SDCARD_STAT   = $AFE812     ;(R) SDCARD (Bit[0] = CD, Bit[1] = WP)
=$afe900				CODEC_DATA_LO = $AFE900     ;(W) LSB of Add/Data Reg to Control CODEC See WM8776 Spec
=$afe901				CODEC_DATA_HI = $AFE901     ;(W) MSB od Add/Data Reg to Control CODEC See WM8776 Spec
=$afe902				CODEC_WR_CTRL = $AFE902     ;(W) Bit[0] = 1 -> Start Writing the CODEC Control Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\Trinity_CFP9301_def.asm

=$afe800				JOYSTICK0           = $AFE800   ;(R) Joystick 0 - J7 (next to SD Card)
=$afe801				JOYSTICK1           = $AFE801   ;(R) Joystick 1 - J8
=$afe802				JOYSTICK2           = $AFE802   ;(R) Joystick 2 - J9
=$afe803				JOYSTICK3           = $AFE803   ;(R) Joystick 3 - J10 (Next to Buzzer)
=$afe804				JOYSTICK_MODE       = $AFE804
=$01					NES_SNES_EN0        = $01       ; Enable the NES/SNES Mode on Port 0
=$02					NES_SNES_EN1        = $02       ; Enable the NES/SNES Mode on Port 1
=$04					NES_SNES_JOY        = $04       ; 0 = NES, 1 = SNES
=$40					NES_SNES_DONE       = $40       ; Poll to see if the Deserializer is done
=$80					NES_SNES_TRIG       = $80       ; Set to start the Serializer
=$afe805				REVOFPCB_C          = $AFE805   ; You should read the ASCCII for "C"
=$afe806				REVOFPCB_4          = $AFE806   ; You should read the ASCCII for "4"
=$afe807				REVOFPCB_A          = $AFE807   ; You should read the ASCCII for "A"
=$afe808				NES_SNES0_DAT_LO    = $AFE808   ; Contains the 8bits From NES and SNES
=$afe809				SNES0_DAT_HI0       = $AFE809   ; Contains the extra 4 bit from the SNES Controller
=$afe80a				NES_SNES1_DAT_LO    = $AFE80A
=$afe80b				SNES1_DAT_HI0       = $AFE80B
=$afe80c				CFP9301_REV         = $AFE80C   ; Hardware Revision of the CPLD Code
=$afe80d				DIP_USER            = $AFE80D   ; Dip Switch 3/4/5 can be user Defined
=$afe80e				DIP_BOOTMODE        = $AFE80E
=$01					BOOT_MODE0          = $01
=$02					BOOT_MODE1          = $02
=$80					HD_INSTALLED        = $80
=$00					DIP_BOOT_IDE        = $00
=$01					DIP_BOOT_SDCARD     = $01
=$02					DIP_BOOT_FLOPPY     = $02
=$03					DIP_BOOT_BASIC      = $03

;******  Return to file: src\kernel.asm


;******  Processing file: src\Unity_CFP9307_def.asm

=$afe830				IDE_DATA      = $AFE830 ; 8Bit Access here Only
=$afe831				IDE_ERROR     = $AFE831 ; Error Information register (only read when there is an error ) - Probably clears Error Bits
=$afe832				IDE_SECT_CNT  = $AFE832 ; Sector Count Register (also used to pass parameter for timeout for IDLE modus Command)
=$afe833				IDE_SECT_SRT  = $AFE833 ; Start Sector Register (0 = 256), so start @ 1
=$afe834				IDE_CLDR_LO   = $AFE834 ; Low Byte of Cylinder Numnber {7:0}
=$afe835				IDE_CLDR_HI   = $AFE835 ;  Hi Byte of Cylinder Number {9:8} (1023-0).
=$afe836				IDE_HEAD      = $AFE836 ; Head, device select, {3:0} HEad Number, 4 -> 0:Master, 1:Slave, {7:5} = 101 (legacy);
=$afe837				IDE_CMD_STAT  = $AFE837 ; Command/Status Register - Reading this will clear the Interrupt Registers
=$afe838				IDE_DATA_LO   = $AFE838 ; The 16Bits Buffer is LITTLE ENDIAN, the 65C816 is BIG ENDIAN, but UNITY does the conversion
=$afe839				IDE_DATA_HI   = $AFE839 ;

;******  Return to file: src\kernel.asm


;******  Processing file: src\GABE_Control_Registers_def.asm

=$afe820				GABE_MSTR_CTRL      = $AFE820
=$01					GABE_CTRL_PWR_LED   = $01 ; Controls the LED in the Front of the case (Next to the reset button)
=$02					GABE_CTRL_SDC_LED   = $02 ; Controls the LED in the Front of the Case (Next to SDCard)
=$10					GABE_CTRL_BUZZER    = $10 ; Controls the Buzzer
=$80					GABE_CTRL_WRM_RST   = $80 ; Warm Reset (needs to Setup other registers)
=$afe821				GABE_NOTUSED        = $AFE821 ; Reserved for future use
=$afe822				GABE_RST_AUTH0      = $AFE822 ; Must Contain the BYTE $AD for Reset to Activate
=$afe823				GABE_RST_AUTH1      = $AFE823 ; Must Contain the BYTE $DE for Reset to Activate
=$afe824				GABE_RNG_DAT_LO     = $AFE824 ; Low Part of 16Bit RNG Generator
=$afe825				GABE_RNG_DAT_HI     = $AFE825 ; Hi Part of 16Bit RNG Generator
=$afe824				GABE_RNG_SEED_LO    = $AFE824 ; Low Part of 16Bit RNG Generator
=$afe825				GABE_RNG_SEED_HI    = $AFE825 ; Hi Part of 16Bit RNG Generator
=$afe826				GABE_RNG_STAT       = $AFE826 ;
=$80					GABE_RNG_LFSR_DONE  = $80     ; indicates that Output = SEED Database
=$afe826				GABE_RNG_CTRL       = $AFE826 ;
=$01					GABE_RNG_CTRL_EN    = $01     ; Enable the LFSR BLOCK_LEN
=$02					GABE_RNG_CTRL_DV    = $02     ; After Setting the Seed Value, Toggle that Bit for it be registered
=$afe827				GABE_SYS_STAT       = $AFE827 ;
=$01					GABE_SYS_STAT_MID0  = $01   ;
=$02					GABE_SYS_STAT_MID1  = $02   ;
=$08					GABE_SYS_STAT_EXP   = $08   ; if Zero, there is an Expansion Card Preset
=$40					GABE_SYS_STAT_CPUA  = $40   ; Indicates the (8bit/16bit) Size of the Accumulator
=$80					GABE_SYS_STAT_CPUX  = $80   ; Indicates the (8bit/16bit) Size of the Accumulator

;******  Return to file: src\kernel.asm


;******  Processing file: src\basic_inc.asm

=$3a0000				BASIC = $3A0000
=3801092				MONITOR = BASIC + 4

;******  Return to file: src\kernel.asm


;******  Processing file: src\kernel_jumptable.asm

.390000	5c 00 04 39	jmp $390400	BOOT            JML IBOOT
.390004	5c e2 12 39	jmp $3912e2	RESTORE         JML IRESTORE
.390008	5c ba 05 39	jmp $3905ba	BREAK           JML IBREAK
.39000c	5c 01 06 39	jmp $390601	READY           JML IREADY
.390010	5c e3 12 39	jmp $3912e3	SCINIT          JML ISCINIT
.390014	5c e4 12 39	jmp $3912e4	IOINIT          JML IIOINIT
.390018	5c 7e 06 39	jmp $39067e	PUTC            JML IPUTC
.39001c	5c 67 06 39	jmp $390667	PUTS            JML IPUTS
.390020	5c 9f 07 39	jmp $39079f	PUTB            JML IPUTB
.390024	5c e5 12 39	jmp $3912e5	PUTBLOCK        JML IPUTBLOCK
.390028	5c e6 12 39	jmp $3912e6	SETLFS          JML ISETLFS
.39002c	5c e7 12 39	jmp $3912e7	SETNAM          JML ISETNAM
.390030	5c e8 12 39	jmp $3912e8	OPEN            JML IOPEN
.390034	5c e9 12 39	jmp $3912e9	CLOSE           JML ICLOSE
.390038	5c 1c 06 39	jmp $39061c	SETIN           JML ISETIN
.39003c	5c 25 06 39	jmp $390625	SETOUT          JML ISETOUT
.390040	5c ea 12 39	jmp $3912ea	GETB            JML IGETB
.390044	5c eb 12 39	jmp $3912eb	GETBLOCK        JML IGETBLOCK
.390048	5c ec 12 39	jmp $3912ec	GETCH           JML IGETCH
.39004c	5c 37 06 39	jmp $390637	GETCHW          JML IGETCHW
.390050	5c 2e 06 39	jmp $39062e	GETCHE          JML IGETCHE
.390054	5c ed 12 39	jmp $3912ed	GETS            JML IGETS
.390058	5c ee 12 39	jmp $3912ee	GETLINE         JML IGETLINE
.39005c	5c ef 12 39	jmp $3912ef	GETFIELD        JML IGETFIELD
.390060	5c f0 12 39	jmp $3912f0	TRIM            JML ITRIM
.390064	5c f1 12 39	jmp $3912f1	PRINTC          JML IPRINTC
.390068	5c f2 12 39	jmp $3912f2	PRINTS          JML IPRINTS
.39006c	5c a0 07 39	jmp $3907a0	PRINTCR         JML IPRINTCR
.390070	5c f3 12 39	jmp $3912f3	PRINTF          JML IPRINTF
.390074	5c f4 12 39	jmp $3912f4	PRINTI          JML IPRINTI
.390078	5c f4 08 39	jmp $3908f4	PRINTH          JML IPRINTH
.39007c	5c f5 12 39	jmp $3912f5	PRINTAI         JML IPRINTAI
.390080	5c f6 12 39	jmp $3912f6	PRINTAH         JML IPRINTAH
.390084	5c 8a 08 39	jmp $39088a	LOCATE          JML ILOCATE
.390088	5c f7 12 39	jmp $3912f7	PUSHKEY         JML IPUSHKEY
.39008c	5c f8 12 39	jmp $3912f8	PUSHKEYS        JML IPUSHKEYS
.390090	5c e6 07 39	jmp $3907e6	CSRRIGHT        JML ICSRRIGHT
.390094	5c 19 08 39	jmp $390819	CSRLEFT         JML ICSRLEFT
.390098	5c 3f 08 39	jmp $39083f	CSRUP           JML ICSRUP
.39009c	5c 65 08 39	jmp $390865	CSRDOWN         JML ICSRDOWN
.3900a0	5c d5 07 39	jmp $3907d5	CSRHOME         JML ICSRHOME
.3900a4	5c cc 08 39	jmp $3908cc	SCROLLUP        JML ISCROLLUP
.3900a8	5c 22 09 39	jmp $390922	CLRSCREEN       JML ICLRSCREEN
.3900ac	5c 89 09 39	jmp $390989	INITCHLUT	    JML IINITCHLUT
.3900b0	5c a3 0c 39	jmp $390ca3	INITSUPERIO	    JML IINITSUPERIO
.3900b4	5c a2 0d 39	jmp $390da2	INITKEYBOARD    JML IINITKEYBOARD
.3900b8	5c fe 0e 39	jmp $390efe	TESTSID         JML ITESTSID
.3900bc	5c 82 0c 39	jmp $390c82	INITCURSOR      JML IINITCURSOR
.3900c0	5c 38 0c 39	jmp $390c38	INITFONTSET     JML IINITFONTSET
.3900c4	5c b8 09 39	jmp $3909b8	INITGAMMATABLE  JML IINITGAMMATABLE
.3900c8	5c d8 09 39	jmp $3909d8	INITALLLUT      JML IINITALLLUT
.3900cc	5c 9a 0a 39	jmp $390a9a	INITVKYTXTMODE  JML IINITVKYTXTMODE
.3900d0	5c c3 0a 39	jmp $390ac3	INITVKYGRPMODE  JML IINITVKYGRPMODE
.3900d4	5c fa 0a 39	jmp $390afa	INITTILEMODE    JML IINITTILEMODE
.3900d8	5c fb 0a 39	jmp $390afb	INITSPRITE      JML IINITSPRITE
.3900dc	5c ee 0f 39	jmp $390fee	INITCODEC       JML IINITCODEC
.3900e0	5c 6a 10 39	jmp $39106a	RESETCODEC      JML IRESETCODEC
.3900e4	5c d8 10 39	jmp $3910d8	BMP_PARSER      JML IBMP_PARSER
.3900e8	5c 8d 10 39	jmp $39108d	BM_FILL_SCREEN  JML IBM_FILL_SCREEN
.3900ec	5c 3d 27 39	jmp $39273d	OPL2_TONE_TEST  JML IOPL2_TONE_TEST

;******  Return to file: src\kernel.asm


;******  Processing file: src\Interrupt_Handler.asm

.3900f0					IRQ_HANDLER
.3900f0	e2 20		sep #$20	                SEP #$20        ; set A short
.3900f2	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.3900f6	c9 00		cmp #$00	                CMP #$00
.3900f8	f0 37		beq $390131	                BEQ CHECK_PENDING_REG1
.3900fa	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.3900fe	29 01		and #$01	                AND #FNX0_INT00_SOF
.390100	c9 01		cmp #$01	                CMP #FNX0_INT00_SOF
.390102	d0 09		bne $39010d	                BNE SERVICE_NEXT_IRQ6
.390104	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.390108	20 9b 01	jsr $39019b	                JSR SOF_INTERRUPT
.39010b	e2 20		sep #$20	                SEP #$20        ; set A short
.39010d					SERVICE_NEXT_IRQ6
.39010d	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.390111	29 40		and #$40	                AND #FNX0_INT06_FDC
.390113	c9 40		cmp #$40	                CMP #FNX0_INT06_FDC
.390115	d0 09		bne $390120	                BNE SERVICE_NEXT_IRQ7
.390117	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.39011b	20 e7 01	jsr $3901e7	                JSR FDC_INTERRUPT
.39011e	e2 20		sep #$20	                SEP #$20        ; set A short
.390120					SERVICE_NEXT_IRQ7
.390120	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.390124	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.390126	c9 80		cmp #$80	                CMP #FNX0_INT07_MOUSE
.390128	d0 07		bne $390131	                BNE CHECK_PENDING_REG1
.39012a	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.39012e	20 a6 01	jsr $3901a6	                JSR MOUSE_INTERRUPT
.390131					CHECK_PENDING_REG1
.390131	e2 20		sep #$20	                SEP #$20        ; set A short
.390133	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.390137	c9 00		cmp #$00	                CMP #$00
.390139	f0 5d		beq $390198	                BEQ EXIT_IRQ_HANDLE
.39013b					SERVICE_NEXT_IRQ8
.39013b	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.39013f	29 01		and #$01	                AND #FNX1_INT00_KBD
.390141	c9 01		cmp #$01	                CMP #FNX1_INT00_KBD
.390143	d0 09		bne $39014e	                BNE SERVICE_NEXT_IRQ11
.390145	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.390149	20 65 31	jsr $393165	                JSR KEYBOARD_INTERRUPT
.39014c	e2 20		sep #$20	                SEP #$20        ; set A short
.39014e					SERVICE_NEXT_IRQ11
.39014e	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.390152	29 08		and #$08	                AND #FNX1_INT03_COM2
.390154	c9 08		cmp #$08	                CMP #FNX1_INT03_COM2
.390156	d0 09		bne $390161	                BNE SERVICE_NEXT_IRQ12
.390158	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.39015c	20 f2 01	jsr $3901f2	                JSR COM2_INTERRUPT
.39015f	e2 20		sep #$20	                SEP #$20        ; set A short
.390161					SERVICE_NEXT_IRQ12
.390161	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.390165	29 10		and #$10	                AND #FNX1_INT04_COM1
.390167	c9 10		cmp #$10	                CMP #FNX1_INT04_COM1
.390169	d0 09		bne $390174	                BNE SERVICE_NEXT_IRQ13
.39016b	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.39016f	20 fd 01	jsr $3901fd	                JSR COM1_INTERRUPT
.390172	e2 20		sep #$20	                SEP #$20        ; set A short
.390174					SERVICE_NEXT_IRQ13
.390174	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.390178	29 20		and #$20	                AND #FNX1_INT05_MPU401
.39017a	c9 20		cmp #$20	                CMP #FNX1_INT05_MPU401
.39017c	d0 09		bne $390187	                BNE SERVICE_NEXT_IRQ14
.39017e	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.390182	20 08 02	jsr $390208	                JSR MPU401_INTERRUPT
.390185	e2 20		sep #$20	                SEP #$20        ; set A short
.390187					SERVICE_NEXT_IRQ14
.390187	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.39018b	29 40		and #$40	                AND #FNX1_INT06_LPT
.39018d	c9 40		cmp #$40	                CMP #FNX1_INT06_LPT
.39018f	d0 07		bne $390198	                BNE EXIT_IRQ_HANDLE
.390191	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.390195	20 13 02	jsr $390213	                JSR LPT1_INTERRUPT
.390198					EXIT_IRQ_HANDLE
.390198	c2 30		rep #$30	                REP #$30        ; set A&X long
.39019a	6b		rtl		                RTL
.39019b					SOF_INTERRUPT
.39019b	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.39019f	29 01		and #$01	                AND #FNX0_INT00_SOF
.3901a1	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.3901a5	60		rts		                RTS
.3901a6					MOUSE_INTERRUPT
.3901a6	e2 20		sep #$20	                SEP #$20        ; set A short
.3901a8	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.3901ac	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.3901ae	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.3901b2	af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF
.3901b6	a2 00 00	ldx #$0000	                LDX #$0000
.3901b9	e2 10		sep #$10	                SEP #$10        ; set X short
.3901bb	a6 e0		ldx $e0		                LDX MOUSE_PTR
.3901bd	9f 06 07 af	sta $af0706,x	                STA @lMOUSE_PTR_BYTE0, X
.3901c1	e8		inx		                INX
.3901c2	e0 03		cpx #$03	                CPX #$03
.3901c4	d0 1c		bne $3901e2	                BNE EXIT_FOR_NEXT_VALUE
.3901c6	af 02 07 af	lda $af0702	                LDA @lMOUSE_PTR_X_POS_L
.3901ca	85 e1		sta $e1		                STA MOUSE_POS_X_LO
.3901cc	af 03 07 af	lda $af0703	                LDA @lMOUSE_PTR_X_POS_H
.3901d0	85 e2		sta $e2		                STA MOUSE_POS_X_HI
.3901d2	af 04 07 af	lda $af0704	                LDA @lMOUSE_PTR_Y_POS_L
.3901d6	85 e3		sta $e3		                STA MOUSE_POS_Y_LO
.3901d8	af 05 07 af	lda $af0705	                LDA @lMOUSE_PTR_Y_POS_H
.3901dc	85 e4		sta $e4		                STA MOUSE_POS_Y_HI
.3901de	e2 20		sep #$20	                SEP #$20        ; set A short
.3901e0	a2 00		ldx #$00	                LDX #$00
.3901e2					EXIT_FOR_NEXT_VALUE
.3901e2	86 e0		stx $e0		                STX MOUSE_PTR
.3901e4	c2 10		rep #$10	                REP #$10        ; set X long
.3901e6	60		rts		                RTS
.3901e7					FDC_INTERRUPT
.3901e7	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.3901eb	29 40		and #$40	                AND #FNX0_INT06_FDC
.3901ed	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.3901f1	60		rts		                RTS
.3901f2					COM2_INTERRUPT
.3901f2	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3901f6	29 08		and #$08	                AND #FNX1_INT03_COM2
.3901f8	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3901fc	60		rts		                RTS
.3901fd					COM1_INTERRUPT
.3901fd	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.390201	29 10		and #$10	                AND #FNX1_INT04_COM1
.390203	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.390207	60		rts		                RTS
.390208					MPU401_INTERRUPT
.390208	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.39020c	29 20		and #$20	                AND #FNX1_INT05_MPU401
.39020e	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.390212	60		rts		                RTS
.390213					LPT1_INTERRUPT
.390213	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.390217	29 40		and #$40	                AND #FNX1_INT06_LPT
.390219	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.39021d	60		rts		                RTS
.39021e					NMI_HANDLER
.39021e	6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\SDOS.asm


;******  Processing file: src\ch376s_inc.asm

=$00					DEF_NULL_CHAR           = $00
=$2a					DEF_WILDCARD_CHAR       = $2A
=$5c					DEF_SEPAR_CHAR1         = $5C
=$2f					DEF_SEPAR_CHAR2         = $2F
=$06					CH_CMD_CHECK_EXIST      = $06
=$0c					CH_CMD_GET_FILE_SIZE    = $0C
=$15					CH_CMD_SET_MODE         = $15     ; Set the Controller's mode, in our Case in SDCARD
=$22					CH_CMD_GET_STATUS       = $22     ; Get Interrupt Status
=$27					CH_CMD_RD_DATA0         = $27     ;
=$2c					CH_CMD_WR_DATA          = $2C
=$2f					CH_CMD_SET_FILENAME     = $2F     ;SET_FILE_NAME
=$31					CH_CMD_DISK_MOUNT       = $31     ;DISK_MOUNT
=$32					CH_CMD_FILE_OPEN        = $32     ;FILE_OPEN
=$33					CH_CMD_FILE_ENUM_GO     = $33
=$36					CH_CMD_FILE_CLOSE       = $36     ; To be Implemented
=$39					CH_CMD_BYTE_LOCATE      = $39
=$3a					CH_CMD_BYTE_READ        = $3A
=$3b					CH_CMD_BYTE_RD_GO       = $3B
=$3c					CH_CMD_BYTE_WRITE       = $3C
=$3d					CH_CMD_BYTE_WR_GO       = $3D
=$44					CH_VAR_DISK_ROOT		= $44
=$48					CH_VAR_DSK_TOTAL_CLUS	= $48
=$4c					CH_VAR_DSK_START_LBA	= $4C
=$50					CH_VAR_DSK_DAT_START	= $50
=$54					CH_VAR_LBA_BUFFER		= $54
=$58					CH_VAR_LBA_CURRENT		= $58
=$5c					CH_VAR_FAT_DIR_LBA		= $5C
=$60					CH_VAR_START_CLUSTER	= $60
=$64					CH_VAR_CURRENT_CLUST	= $64
=$68					CH_VAR_FILE_SIZE		= $68
=$6c					CH_VAR_CURRENT_OFFSET	= $6C
=$14					CH376S_STAT_SUCCESS     = $14
=$17					CH376S_STAT_BUF_OVF     = $17
=$1d					CH376S_STAT_DSK_RD      = $1D
=$1e					CH376S_STAT_DSK_WR      = $1E
=$41					CH376S_ERR_OPEN_DIR     = $41
=$42					CH376S_ERR_MISS_FIL     = $42
=$43					CH376S_ERR_FOUND_NAME   = $43
=$82					CH376S_ERR_DISK_DSC     = $82
=$84					CH376S_ERR_LRG_SEC      = $84
=$92					CH376S_ERR_PARTTION     = $92
=$a1					CH376S_ERR_NOT_FORM     = $A1
=$b1					CH376S_ERR_DSK_FULL     = $B1
=$b2					CH376S_FDT_OVER         = $B2
=$b4					CH376S_FILE_CLOSED      = $B4
=$51					CH376S_CMD_RET_SUCCESS  = $51
=$5f					CH376S_CMD_RET_ABORT    = $5F
=$00					SDCARD_PRSNT_NO_CARD    = $00
=$01					SDCARD_PRSNT_CD         = $01
=$02					SDCARD_PRSNT_WP         = $02
=$04					SDCARD_PRSNT_MNTED      = $04  ; Card is present and Mounted1

;******  Return to file: src\SDOS.asm

.0000					fatrec
>0000					  name      .fill 8
>0008					  extension .fill 3
>000b	01				  type      .byte 1
>000c					  reserved  .fill 16
>001c	00 00				  size_l    .word 0
>001e	00 00				  size_h    .word 0
.0000					simplefilestruct
>0000					  name      .fill 8
>0008					  extension .fill 3
>000b	01				  type      .byte 1
>000c	00 00				  size_l    .word 0
>000e	00 00				  size_h    .word 0
.39021f	5c 36 04 39	jmp $390436	SDOS_CHECK_CD JML ISDOS_CHK_CD ; Check if Card is Present
.390223	5c 45 04 39	jmp $390445	SDOS_CHECK_WP JML ISDOS_CHK_WP ; Check if Card is Write Protected
.390227	5c 3f 02 39	jmp $39023f	SDOS_INIT     JML ISDOS_INIT
.39022b	5c cf 02 39	jmp $3902cf	SDOS_DIR      JML ISDOS_DIR
.39022f	5c 4c 03 39	jmp $39034c	SDOS_CHDIR    JML ISDOS_CHDIR
.390233	5c 52 04 39	jmp $390452	SDOS_LOAD     JML ISDOS_READ_FILE
.390237	5c 4d 03 39	jmp $39034d	SDOS_SAVE     JML ISDOS_SAVE
.39023b	5c 4e 03 39	jmp $39034e	SDOS_EXEC     JML ISDOS_EXEC
.39023f	48		pha		ISDOS_INIT    PHA
.390240	da		phx		              PHX
.390241	5a		phy		              PHY
.390242	08		php		              PHP
.390243	0b		phd		              PHD
.390244	48		pha		                PHA             ; begin setdp macro
.390245	08		php		                PHP
.390246	c2 20		rep #$20	                REP #$20        ; set A long
.390248	a9 20 03	lda #$0320	                LDA #SDOS_BLOCK_BEGIN         ; set DP to page 0
.39024b	5b		tcd		                TCD
.39024c	28		plp		                PLP
.39024d	68		pla		                PLA             ; end setdp macro
.39024e	e2 20		sep #$20	                SEP #$20        ; set A short
.390250	af 41 01 00	lda $000141	              LDA @lINT_PENDING_REG1    ; Read the Pending Register &
.390254	29 7f		and #$7f	              AND #~FNX1_INT07_SDCARD   ; Enable
.390256	8f 41 01 00	sta $000141	              STA @lINT_PENDING_REG1
.39025a	a9 06		lda #$06	              LDA #CH_CMD_CHECK_EXIST
.39025c	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD
.390260	20 07 04	jsr $390407	              JSR DLYCMD_2_DTA
.390263	a9 a8		lda #$a8	              LDA #$A8
.390265	8f 10 e8 af	sta $afe810	              STA SDCARD_DATA
.390269					    CHK_LOOP
.390269	20 0c 04	jsr $39040c	              JSR DLYDTA_2_DTA
.39026c	20 0c 04	jsr $39040c	              JSR DLYDTA_2_DTA
.39026f	20 0c 04	jsr $39040c	              JSR DLYDTA_2_DTA
.390272	af 10 e8 af	lda $afe810	              LDA SDCARD_DATA  ; the data returned must be the complement
.390276	c9 57		cmp #$57	              CMP #~$A8;  $57
.390278	d0 ef		bne $390269	              BNE CHK_LOOP
.39027a	20 07 04	jsr $390407	              JSR DLYCMD_2_DTA
.39027d	a9 15		lda #$15	              LDA #CH_CMD_SET_MODE
.39027f	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD
.390283	20 07 04	jsr $390407	              JSR DLYCMD_2_DTA
.390286	20 07 04	jsr $390407	              JSR DLYCMD_2_DTA
.390289	a9 03		lda #$03	              LDA #$03            ; Mode 3 - SDCARD
.39028b	8f 10 e8 af	sta $afe810	              STA SDCARD_DATA     ; Write the MODE and Wait for around ~10us
.39028f					    ISDOS_WAIT_FOR_MODE_SW
.39028f	20 0c 04	jsr $39040c	              JSR DLYDTA_2_DTA ; Wait 0.6us
.390292	af 10 e8 af	lda $afe810	              LDA SDCARD_DATA
.390296	c9 51		cmp #$51	              CMP #$51         ; CMD_RET_SUCCESS = 051H, CMD_RET_ABORT = 05FH
.390298	f0 06		beq $3902a0	              BEQ CHK_SET_OK
.39029a	c9 5f		cmp #$5f	              CMP #$5F
.39029c	f0 09		beq $3902a7	              BEQ CHK_SET_NOK
.39029e	d0 ef		bne $39028f	              BNE ISDOS_WAIT_FOR_MODE_SW
.3902a0					    CHK_SET_OK
.3902a0	a9 01		lda #$01	              LDA #SDCARD_PRSNT_CD
.3902a2	8d 3f 00	sta $003f	              STA SDCARD_PRSNT_MNT
.3902a5	80 07		bra $3902ae	              BRA SD_INIT_DONE
.3902a7					    CHK_SET_NOK
.3902a7	a9 00		lda #$00	              LDA #SDCARD_PRSNT_NO_CARD
.3902a9	8d 3f 00	sta $003f	              STA SDCARD_PRSNT_MNT
.3902ac	80 00		bra $3902ae	              BRA SD_INIT_DONE
.3902ae					    SD_INIT_DONE
.3902ae	2b		pld		              PLD
.3902af	28		plp		              PLP
.3902b0	7a		ply		              PLY
.3902b1	fa		plx		              PLX
.3902b2	68		pla		              PLA
.3902b3	6b		rtl		              RTL
.3902b4					ISDOS_CLEAR_FAT_REC
.3902b4	0b		phd		              PHD
.3902b5	48		pha		                PHA             ; begin setdp macro
.3902b6	08		php		                PHP
.3902b7	c2 20		rep #$20	                REP #$20        ; set A long
.3902b9	a9 20 03	lda #$0320	                LDA #SDOS_BLOCK_BEGIN         ; set DP to page 0
.3902bc	5b		tcd		                TCD
.3902bd	28		plp		                PLP
.3902be	68		pla		                PLA             ; end setdp macro
.3902bf	a0 00 00	ldy #$0000	              LDY #0
.3902c2	a9 00 00	lda #$0000	              LDA #0
.3902c5					    CLEAR_LOOP
.3902c5	97 17		sta [$0337],y	              STA [SDOS_FILE_REC_PTR],Y
.3902c7	c8		iny		              INY
.3902c8	c0 20 00	cpy #$0020	              CPY #32
.3902cb	d0 f8		bne $3902c5	              BNE CLEAR_LOOP
.3902cd	2b		pld		              PLD
.3902ce	60		rts		              RTS
.3902cf	48		pha		ISDOS_DIR     PHA
.3902d0	da		phx		              PHX
.3902d1	5a		phy		              PHY
.3902d2	0b		phd		              PHD
.3902d3	08		php		              PHP
.3902d4	48		pha		                PHA             ; begin setdp macro
.3902d5	08		php		                PHP
.3902d6	c2 20		rep #$20	                REP #$20        ; set A long
.3902d8	a9 20 03	lda #$0320	                LDA #SDOS_BLOCK_BEGIN         ; set DP to page 0
.3902db	5b		tcd		                TCD
.3902dc	28		plp		                PLP
.3902dd	68		pla		                PLA             ; end setdp macro
.3902de	e2 20		sep #$20	                SEP #$20        ; set A short
.3902e0	c2 10		rep #$10	                REP #$10        ; set X long
.3902e2	20 4f 03	jsr $39034f	              JSR ISDOS_MOUNT_CARD;     First to See if the Card is Present
.3902e5	20 b4 02	jsr $3902b4	              JSR ISDOS_CLEAR_FAT_REC
.3902e8	20 84 03	jsr $390384	              JSR SDOS_FILE_OPEN     ; Now that the file name is set, go open File
.3902eb	a2 00 00	ldx #$0000	              LDX #0 ; count the number of items displayed - limit to 38
.3902ee					    ISDOS_NEXT_ENTRY
.3902ee	a9 27		lda #$27	              LDA #CH_CMD_RD_DATA0
.3902f0	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD
.3902f4	20 07 04	jsr $390407	              JSR DLYCMD_2_DTA;      ; Wait 1.5us
.3902f7	af 10 e8 af	lda $afe810	              LDA SDCARD_DATA        ;  Load Data Length - should be 32 - we don't care.
.3902fb	a0 00 00	ldy #$0000	              LDY #0
.3902fe					    FAT_REC_LOOP
.3902fe	20 0c 04	jsr $39040c	              JSR DLYDTA_2_DTA       ; Wait 0.6us
.390301	af 10 e8 af	lda $afe810	              LDA SDCARD_DATA
.390305	97 17		sta [$0337],y	              STA [SDOS_FILE_REC_PTR],Y
.390307	c8		iny		              INY
.390308	c0 20 00	cpy #$0020	              CPY #32
.39030b	d0 f1		bne $3902fe	              BNE FAT_REC_LOOP
.39030d	c2 20		rep #$20	                REP #$20        ; set A long
.39030f	a0 1c 00	ldy #$001c	              LDY #28
.390312	b7 17		lda [$0337],y	              LDA [SDOS_FILE_REC_PTR],Y
.390314	a0 0c 00	ldy #$000c	              LDY #12
.390317	97 17		sta [$0337],y	              STA [SDOS_FILE_REC_PTR],Y
.390319	a0 1e 00	ldy #$001e	              LDY #30
.39031c	b7 17		lda [$0337],y	              LDA [SDOS_FILE_REC_PTR],Y
.39031e	a0 0e 00	ldy #$000e	              LDY #14
.390321	97 17		sta [$0337],y	              STA [SDOS_FILE_REC_PTR],Y
.390323	a5 17		lda $0337	              LDA SDOS_FILE_REC_PTR
.390325	18		clc		              CLC
.390326	69 10 00	adc #$0010	              ADC #$10
.390329	85 17		sta $0337	              STA SDOS_FILE_REC_PTR
.39032b	e2 20		sep #$20	                SEP #$20        ; set A short
.39032d	e8		inx		              INX
.39032e	e0 40 00	cpx #$0040	              CPX #64
.390331	f0 10		beq $390343	              BEQ ISDOS_DIR_DONE
.390333	20 07 04	jsr $390407	              JSR DLYCMD_2_DTA;      ; Wait 1.5us
.390336	a9 33		lda #$33	              LDA #CH_CMD_FILE_ENUM_GO
.390338	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD
.39033c	20 12 04	jsr $390412	              JSR SDCARD_WAIT_4_INT       ; Go Wait for Interrupt
.39033f	c9 1d		cmp #$1d	              CMP #CH376S_STAT_DSK_RD
.390341	f0 ab		beq $3902ee	              BEQ ISDOS_NEXT_ENTRY
.390343					    ISDOS_DIR_DONE
.390343	20 d5 03	jsr $3903d5	              JSR SDOS_FILE_CLOSE
.390346	28		plp		              PLP
.390347	2b		pld		              PLD
.390348	7a		ply		              PLY
.390349	fa		plx		              PLX
.39034a	68		pla		              PLA
.39034b	6b		rtl		              RTL
.39034c	00		brk #		ISDOS_CHDIR   BRK;
.39034d	00		brk #		ISDOS_SAVE    BRK;
.39034e	00		brk #		ISDOS_EXEC    BRK;
.39034f					ISDOS_MOUNT_CARD
.39034f	e2 20		sep #$20	                SEP #$20        ; set A short
.390351	c2 10		rep #$10	                REP #$10        ; set X long
.390353	a0 00 00	ldy #$0000	              LDY #$0000
.390356	a9 01		lda #$01	              LDA #$01
.390358	8d 3f 00	sta $003f	              STA SDCARD_PRSNT_MNT        ; Bit[0] = Card Present
.39035b					    TRY_MOUNT_AGAIN
.39035b	a9 31		lda #$31	              LDA #CH_CMD_DISK_MOUNT      ; If Present, go Mount it.
.39035d	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD              ;
.390361	20 12 04	jsr $390412	              JSR SDCARD_WAIT_4_INT       ;
.390364	c9 14		cmp #$14	              CMP #CH376S_STAT_SUCCESS    ;
.390366	f0 09		beq $390371	              BEQ ISDOS_MOUNTED
.390368	c8		iny		              INY
.390369	c0 05 00	cpy #$0005	              CPY #$0005
.39036c	d0 ed		bne $39035b	              BNE TRY_MOUNT_AGAIN
.39036e	4c 79 03	jmp $390379	              JMP SDCARD_ERROR_MOUNT
.390371					    ISDOS_MOUNTED
.390371	ad 3f 00	lda $003f	              LDA SDCARD_PRSNT_MNT
.390374	29 fb		and #$fb	              AND #~SDCARD_PRSNT_MNTED
.390376	09 04		ora #$04	              ORA #SDCARD_PRSNT_MNTED     ; Set Bit to Indicate that is mounted
.390378	60		rts		              RTS
.390379					    SDCARD_ERROR_MOUNT
.390379	a2 6d 06	ldx #$066d	              LDX #<>sd_card_msg3         ; Print Screen the Message "Card Detected"
.39037c	00		brk #		              BRK
.39037d	60		rts		              RTS
.39037e					    ISDOS_NO_CARD
.39037e	a9 00		lda #$00	              LDA #SDCARD_PRSNT_NO_CARD
.390380	8d 3f 00	sta $003f	              STA SDCARD_PRSNT_MNT
.390383	60		rts		              RTS
.390384					SDOS_FILE_OPEN
.390384	8b		phb		              PHB
.390385	a2 00 00	ldx #$0000	              LDX #0
.390388	a0 01 00	ldy #$0001	              LDY #1
.39038b	a9 2f		lda #$2f	              LDA #'/'
.39038d	9f 80 03 00	sta $000380,x	              STA @lSDOS_FILE_NAME,X
.390391	e8		inx		              INX
.390392	48		pha		                PHA             ; begin setdbr macro
.390393	08		php		                PHP
.390394	e2 20		sep #$20	                SEP #$20        ; set A short
.390396	a9 39		lda #$39	                LDA #`sd_card_dir_string
.390398	48		pha		                PHA
.390399	ab		plb		                PLB
.39039a	28		plp		                PLP
.39039b	68		pla		                PLA             ; end setdbr macro
.39039c					    ISDOS_DIR_TRF
.39039c	b9 8a 05	lda $39058a,y	              LDA sd_card_dir_string,Y
.39039f	c9 2f		cmp #$2f	              CMP #'/'
.3903a1	f0 0c		beq $3903af	              BEQ FO_READ_SLASH
.3903a3	9f 80 03 00	sta $000380,x	              STA @lSDOS_FILE_NAME,X
.3903a7	e8		inx		              INX
.3903a8	c8		iny		              INY
.3903a9	c9 00		cmp #$00	              CMP #0
.3903ab	f0 0c		beq $3903b9	              BEQ FO_READ_END_PATH
.3903ad	80 ed		bra $39039c	              BRA ISDOS_DIR_TRF  ; path string must be 0 terminated
.3903af					    FO_READ_SLASH
.3903af	a9 00		lda #$00	              LDA #0
.3903b1	9f 80 03 00	sta $000380,x	              STA @lSDOS_FILE_NAME,X
.3903b5	e8		inx		              INX
.3903b6	c8		iny		              INY
.3903b7	a9 2f		lda #$2f	              LDA #'/'
.3903b9					    FO_READ_END_PATH
.3903b9	48		pha		              PHA
.3903ba	20 e8 03	jsr $3903e8	              JSR SDOS_SET_FILE_NAME ; Make Sure the Pointer to the File Name is properly
.3903bd	20 07 04	jsr $390407	              JSR DLYCMD_2_DTA
.3903c0	a9 32		lda #$32	              LDA #CH_CMD_FILE_OPEN ;
.3903c2	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD          ; Go Request to open the File
.3903c6	20 12 04	jsr $390412	              JSR SDCARD_WAIT_4_INT   ; A Interrupt is Generated, so go polling it
.3903c9	68		pla		              PLA
.3903ca	c9 00		cmp #$00	              CMP #0
.3903cc	f0 05		beq $3903d3	              BEQ FO_DONE
.3903ce	a2 00 00	ldx #$0000	              LDX #0
.3903d1	80 c9		bra $39039c	              BRA ISDOS_DIR_TRF
.3903d3					    FO_DONE
.3903d3	ab		plb		              PLB
.3903d4	60		rts		              RTS
.3903d5					SDOS_FILE_CLOSE
.3903d5	a9 36		lda #$36	              LDA #CH_CMD_FILE_CLOSE ;
.3903d7	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD          ; Go Request to open the File
.3903db	20 07 04	jsr $390407	              JSR DLYCMD_2_DTA
.3903de	a9 00		lda #$00	              LDA #$00                ; FALSE
.3903e0	8f 10 e8 af	sta $afe810	              STA SDCARD_DATA         ; Store into the Data Register of the CH376s
.3903e4	20 12 04	jsr $390412	              JSR SDCARD_WAIT_4_INT   ; A Interrupt is Generated, so go polling it
.3903e7	60		rts		              RTS
.3903e8					SDOS_SET_FILE_NAME
.3903e8	da		phx		              PHX
.3903e9	a9 2f		lda #$2f	              LDA #CH_CMD_SET_FILENAME
.3903eb	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD
.3903ef	20 07 04	jsr $390407	              JSR DLYCMD_2_DTA
.3903f2	a2 00 00	ldx #$0000	              LDX #$0000
.3903f5					    SDOS_SET_FILE_LOOP
.3903f5	bf 80 03 00	lda $000380,x	              LDA @lSDOS_FILE_NAME, X   ; This is where the FileName ought to be.
.3903f9	8f 10 e8 af	sta $afe810	              STA SDCARD_DATA         ; Store into the Data Register of the CH376s
.3903fd	20 0c 04	jsr $39040c	              JSR DLYDTA_2_DTA
.390400	e8		inx		              INX
.390401	c9 00		cmp #$00	              CMP #$00              ; Check end of Line
.390403	d0 f0		bne $3903f5	              BNE SDOS_SET_FILE_LOOP
.390405	fa		plx		              PLX
.390406	60		rts		              RTS
.390407					DLYCMD_2_DTA
.390407	ea		nop		              NOP
.390408	ea		nop		              NOP
.390409	ea		nop		              NOP
.39040a	ea		nop		              NOP
.39040b	ea		nop		              NOP
.39040c					DLYDTA_2_DTA
.39040c	ea		nop		              NOP
.39040d	ea		nop		              NOP
.39040e	ea		nop		              NOP
.39040f	ea		nop		              NOP
.390410	ea		nop		              NOP
.390411	60		rts		              RTS
.390412					SDCARD_WAIT_4_INT
.390412	e2 20		sep #$20	                SEP #$20        ; set A short
.390414					    SDCARD_BUSY_INT
.390414	af 41 01 00	lda $000141	              LDA @lINT_PENDING_REG1   ; Check to See if the Pending Register for the SD_INT is Set
.390418	29 80		and #$80	              AND #FNX1_INT07_SDCARD   ;
.39041a	c9 80		cmp #$80	              CMP #FNX1_INT07_SDCARD
.39041c	d0 f6		bne $390414	              BNE SDCARD_BUSY_INT      ; Go Check again to see if it is checked
.39041e	8f 41 01 00	sta $000141	              STA @lINT_PENDING_REG1   ;Interrupt as occured, clear the Pending Register for next time.
.390422	20 07 04	jsr $390407	              JSR DLYCMD_2_DTA ;
.390425	20 07 04	jsr $390407	              JSR DLYCMD_2_DTA ;
.390428	a9 22		lda #$22	              LDA #CH_CMD_GET_STATUS
.39042a	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD;
.39042e	20 07 04	jsr $390407	              JSR DLYCMD_2_DTA;   ; 1.5us Delay to get the Value Return
.390431	af 10 e8 af	lda $afe810	              LDA SDCARD_DATA;
.390435	60		rts		              RTS           ;
.390436					ISDOS_CHK_CD
.390436	e2 20		sep #$20	                SEP #$20        ; set A short
.390438	18		clc		              CLC
.390439	af 12 e8 af	lda $afe812	              LDA SDCARD_STAT;  BIT[0] = Cd, BIT[1] = WP
.39043d	29 01		and #$01	              AND #$01
.39043f	c9 01		cmp #$01	              CMP #$01
.390441	f0 01		beq $390444	              BEQ SDCD_NOT_PRST;
.390443	38		sec		              SEC
.390444					    SDCD_NOT_PRST
.390444	60		rts		              RTS
.390445					ISDOS_CHK_WP
.390445	e2 20		sep #$20	                SEP #$20        ; set A short
.390447	18		clc		              CLC
.390448	af 12 e8 af	lda $afe812	              LDA SDCARD_STAT;  BIT[0] = Cd, BIT[1] = WP
.39044c	29 02		and #$02	              AND #$02
.39044e	d0 01		bne $390451	              BNE SDCD_NOT_WP;
.390450	38		sec		              SEC
.390451					    SDCD_NOT_WP
.390451	60		rts		              RTS
.390452					ISDOS_READ_FILE
.390452	20 84 03	jsr $390384	              JSR SDOS_FILE_OPEN   ; open the file
.390455	af 10 e8 af	lda $afe810	              LDA SDCARD_DATA
.390459	c9 14		cmp #$14	              CMP #CH376S_STAT_SUCCESS ; if the file open successfully, let's go on.
.39045b	f0 03		beq $390460	              BEQ SDOS_READ_FILE_KEEP_GOING
.39045d	82 80 00	brl $3904e0	              BRL SDOS_READ_DONE
.390460					    SDOS_READ_FILE_KEEP_GOING
.390460	c2 20		rep #$20	                REP #$20        ; set A long
.390462	20 4e 05	jsr $39054e	              JSR SDOS_SET_FILE_LENGTH;
.390465	a9 00 00	lda #$0000	              LDA #$0000
.390468	8f 3c 00 00	sta $00003c	              STA @lSDCARD_BYTE_NUM; Just make sure the High Part of the Size is Zero
.39046c	8f 34 03 00	sta $000334	              STA @lSDOS_BYTE_PTR   ; Clear the Byte Pointer 32 Bytes Register
.390470	8f 36 03 00	sta $000336	              STA @lSDOS_BYTE_PTR+2 ; This is to Relocated the Pointer after you passed the 64K Boundary
.390474	e2 20		sep #$20	                SEP #$20        ; set A short
.390476					    SDOS_READ_FILE_GO_FETCH_A_NEW_64KBlock
.390476	a9 3a		lda #$3a	              LDA #CH_CMD_BYTE_READ
.390478	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD;
.39047c	20 07 04	jsr $390407	              JSR DLYCMD_2_DTA;   ; 3us Delay to get the Value Return
.39047f	af 2c 03 00	lda $00032c	              LDA @lSDOS_BYTE_NUMBER
.390483	8f 10 e8 af	sta $afe810	              STA SDCARD_DATA
.390487	20 0c 04	jsr $39040c	              JSR DLYDTA_2_DTA;   ; 1.5us Delay to get the Value Return
.39048a	af 2d 03 00	lda $00032d	              LDA @lSDOS_BYTE_NUMBER+1
.39048e	8f 10 e8 af	sta $afe810	              STA SDCARD_DATA
.390492	20 12 04	jsr $390412	              JSR SDCARD_WAIT_4_INT
.390495	c9 1d		cmp #$1d	              CMP #CH376S_STAT_DSK_RD ;
.390497	f0 03		beq $39049c	              BEQ SDOS_READ_FILE_GO_FETCH_A_NEW_BLOCK
.390499	82 44 00	brl $3904e0	              BRL SDOS_READ_DONE
.39049c					    SDOS_READ_FILE_GO_FETCH_A_NEW_BLOCK
.39049c	20 5b 05	jsr $39055b	              JSR SDOS_READ_BLOCK
.39049f	a9 3b		lda #$3b	              LDA #CH_CMD_BYTE_RD_GO
.3904a1	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD
.3904a5	20 12 04	jsr $390412	              JSR SDCARD_WAIT_4_INT
.3904a8	c9 1d		cmp #$1d	              CMP #CH376S_STAT_DSK_RD ;
.3904aa	d0 05		bne $3904b1	              BNE SDOS_READ_PROC_DONE
.3904ac	20 e3 04	jsr $3904e3	              JSR SDOS_ADJUST_POINTER  ; Go Adjust the Address
.3904af	80 eb		bra $39049c	              BRA SDOS_READ_FILE_GO_FETCH_A_NEW_BLOCK
.3904b1					    SDOS_READ_PROC_DONE
.3904b1	c2 20		rep #$20	                REP #$20        ; set A long
.3904b3	af 2c 03 00	lda $00032c	              LDA @lSDOS_BYTE_NUMBER  ; Load the Previously number of Byte
.3904b7	c9 ff ff	cmp #$ffff	              CMP #$FFFF
.3904ba	d0 24		bne $3904e0	              BNE SDOS_READ_DONE                  ; if it equal 64K, then the file is bigger than 64K
.3904bc	af 28 01 00	lda $000128	              LDA @lADDER_R
.3904c0	8f 20 01 00	sta $000120	              STA @lADDER_A
.3904c4	af 2a 01 00	lda $00012a	              LDA @lADDER_R+2
.3904c8	8f 22 01 00	sta $000122	              STA @lADDER_A+2
.3904cc	20 4e 05	jsr $39054e	              JSR SDOS_SET_FILE_LENGTH ;
.3904cf	20 34 05	jsr $390534	              JSR SDOS_COMPUTE_LOCATE_POINTER
.3904d2	e2 20		sep #$20	                SEP #$20        ; set A short
.3904d4	20 ff 04	jsr $3904ff	              JSR SDOS_BYTE_LOCATE    ; Apply the new location for the CH376S
.3904d7	20 12 04	jsr $390412	              JSR SDCARD_WAIT_4_INT
.3904da	c9 14		cmp #$14	              CMP #CH376S_STAT_SUCCESS ;
.3904dc	d0 d3		bne $3904b1	              BNE SDOS_READ_PROC_DONE
.3904de	80 96		bra $390476	              BRA SDOS_READ_FILE_GO_FETCH_A_NEW_64KBlock ; Let's go fetch a new block of 64K or less
.3904e0					    SDOS_READ_DONE
.3904e0	e2 20		sep #$20	                SEP #$20        ; set A short
.3904e2	6b		rtl		              RTL
.3904e3					SDOS_ADJUST_POINTER
.3904e3	c2 20		rep #$20	                REP #$20        ; set A long
.3904e5	18		clc		              CLC
.3904e6	af 38 00 00	lda $000038	              LDA SDCARD_FILE_PTR ;Load the Pointer
.3904ea	6f 3c 00 00	adc $00003c	              ADC SDCARD_BYTE_NUM
.3904ee	8f 38 00 00	sta $000038	              STA SDCARD_FILE_PTR;
.3904f2	e2 20		sep #$20	                SEP #$20        ; set A short
.3904f4	af 3a 00 00	lda $00003a	              LDA SDCARD_FILE_PTR+2;
.3904f8	69 00		adc #$00	              ADC #$00          ; This is just add up the Carry
.3904fa	8f 3a 00 00	sta $00003a	              STA SDCARD_FILE_PTR+2;
.3904fe					    SDOS_ADJ_DONE
.3904fe	60		rts		              RTS
.3904ff					SDOS_BYTE_LOCATE
.3904ff	e2 20		sep #$20	                SEP #$20        ; set A short
.390501	a9 39		lda #$39	              LDA #CH_CMD_BYTE_LOCATE
.390503	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD
.390507	20 07 04	jsr $390407	              JSR DLYCMD_2_DTA
.39050a	af 34 03 00	lda $000334	              LDA @lSDOS_BYTE_PTR
.39050e	8f 10 e8 af	sta $afe810	              STA SDCARD_DATA
.390512	20 0c 04	jsr $39040c	              JSR DLYDTA_2_DTA
.390515	af 35 03 00	lda $000335	              LDA @lSDOS_BYTE_PTR+1
.390519	8f 10 e8 af	sta $afe810	              STA SDCARD_DATA
.39051d	20 0c 04	jsr $39040c	              JSR DLYDTA_2_DTA
.390520	af 36 03 00	lda $000336	              LDA @lSDOS_BYTE_PTR+2
.390524	8f 10 e8 af	sta $afe810	              STA SDCARD_DATA
.390528	20 0c 04	jsr $39040c	              JSR DLYDTA_2_DTA
.39052b	af 37 03 00	lda $000337	              LDA @lSDOS_BYTE_PTR+3
.39052f	8f 10 e8 af	sta $afe810	              STA SDCARD_DATA
.390533	60		rts		              RTS
.390534					SDOS_COMPUTE_LOCATE_POINTER
.390534	c2 20		rep #$20	                REP #$20        ; set A long
.390536	18		clc		              CLC
.390537	af 34 03 00	lda $000334	              LDA @lSDOS_BYTE_PTR ; $00330
.39053b	69 ff ff	adc #$ffff	              ADC #$FFFF
.39053e	8f 34 03 00	sta $000334	              STA @lSDOS_BYTE_PTR
.390542	af 36 03 00	lda $000336	              LDA @lSDOS_BYTE_PTR+2
.390546	69 00 00	adc #$0000	              ADC #$0000          ; this is to Add the Carry
.390549	8f 36 03 00	sta $000336	              STA @lSDOS_BYTE_PTR+2
.39054d	60		rts		              RTS
.39054e					SDOS_SET_FILE_LENGTH
.39054e	a5 0a		lda $032a	              LDA SDOS_FILE_SIZE + 2
.390550	f0 02		beq $390554	              BEQ SFL_DONE
.390552	7a		ply		              PLY ; deplete the stack to return back to the long jump
.390553	6b		rtl		              RTL
.390554					    SFL_DONE
.390554	a5 08		lda $0328	              LDA SDOS_FILE_SIZE
.390556	8f 2c 03 00	sta $00032c	              STA @lSDOS_BYTE_NUMBER
.39055a	60		rts		              RTS
.39055b					SDOS_READ_BLOCK
.39055b	0b		phd		              PHD
.39055c	48		pha		                PHA             ; begin setdp macro
.39055d	08		php		                PHP
.39055e	c2 20		rep #$20	                REP #$20        ; set A long
.390560	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.390563	5b		tcd		                TCD
.390564	28		plp		                PLP
.390565	68		pla		                PLA             ; end setdp macro
.390566	a9 27		lda #$27	              LDA #CH_CMD_RD_DATA0
.390568	8f 11 e8 af	sta $afe811	              STA SDCARD_CMD;
.39056c	20 07 04	jsr $390407	              JSR DLYCMD_2_DTA;   ; 3us Delay to get the Value Return
.39056f	af 10 e8 af	lda $afe810	              LDA SDCARD_DATA     ; Read First Byte for Number of Byte to Read
.390573	85 3c		sta $3c		              STA SDCARD_BYTE_NUM  ; Store the Number of byte to be read
.390575	20 0c 04	jsr $39040c	              JSR DLYDTA_2_DTA;   ; 3us Delay to get the Value Return
.390578	a0 00 00	ldy #$0000	              LDY #$0000
.39057b					    SDOS_READ_MORE
.39057b	af 10 e8 af	lda $afe810	              LDA SDCARD_DATA
.39057f	97 38		sta [$38],y	              STA [SDCARD_FILE_PTR], Y        ; Store Block Data Sector Begin
.390581	c8		iny		              INY
.390582	c4 3c		cpy $3c		              CPY SDCARD_BYTE_NUM
.390584	d0 f5		bne $39057b	              BNE SDOS_READ_MORE
.390586	a5 3c		lda $3c		              LDA SDCARD_BYTE_NUM  ; Reload the Number of Byte Read
.390588	2b		pld		              PLD
.390589	60		rts		              RTS
>39058a	2f 2a 00			sd_card_dir_string  .text '/*' ,$00
>39058d	00 00 00 00 00 00 00 00		                    .fill 128-3,0  ; leave space for the path
>390595	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 6 times (96 bytes)...
>390605	00 00 00 00 00
>39060a	4e 4f 20 53 44 43 41 52		sd_no_card_msg      .text "NO SDCARD PRESENT", $0D, $00
>390612	44 20 50 52 45 53 45 4e 54 0d 00
>39061d	45 52 52 4f 52 20 49 4e		sd_card_err0        .text "ERROR IN READIND CARD", $00
>390625	20 52 45 41 44 49 4e 44 20 43 41 52 44 00
>390633	45 52 52 4f 52 20 4c 4f		sd_card_err1        .text "ERROR LOADING FILE", $00
>39063b	41 44 49 4e 47 20 46 49 4c 45 00
>390646	4e 61 6d 65 3a 20 0d 00		sd_card_msg0        .text "Name: ", $0D,$00
>39064e	53 44 43 41 52 44 20 44		sd_card_msg1        .text "SDCARD DETECTED", $00
>390656	45 54 45 43 54 45 44 00
>39065e	53 44 43 41 52 44 20 4d		sd_card_msg2        .text "SDCARD MOUNTED", $00
>390666	4f 55 4e 54 45 44 00
>39066d	46 41 49 4c 45 44 20 54		sd_card_msg3        .text "FAILED TO MOUNT SDCARD", $0D, $00
>390675	4f 20 4d 4f 55 4e 54 20 53 44 43 41 52 44 0d 00
>390685	46 49 4c 45 20 4f 50 45		sd_card_msg4        .text "FILE OPENED", $0D, $00
>39068d	4e 45 44 0d 00
>390692	45 4e 44 20 4f 46 20 4c		sd_card_msg5        .text "END OF LINE...", $00
>39069a	49 4e 45 2e 2e 2e 00
>3906a1	46 49 4c 45 20 46 4f 55		sd_card_msg6        .text "FILE FOUND, LOADING...", $00
>3906a9	4e 44 2c 20 4c 4f 41 44 49 4e 47 2e 2e 2e 00
>3906b8	46 49 4c 45 20 4c 4f 41		sd_card_msg7        .text "FILE LOADED", $00
>3906c0	44 45 44 00

;******  Return to file: src\kernel.asm


;******  Processing file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_def.asm

=$afe500				OPL2_L_BASE               = $AFE500
=$afe502				OPL2_L_TIMER1             = $AFE502 ; TIMER-1
=$afe503				OPL2_L_TIMER2             = $AFE503 ; TIMER-2
=$afe504				OPL2_L_IRQ                = $AFE504 ;
=$afe700				OPL2_S_BASE                 = $AFE700
=$afe720				OPL2_S_AM_VID_EG_KSR_MULT = $AFE720 ; $20..$35 (21 Registers)
=$afe740				OPL2_S_KSL_TL             = $AFE740;  $40..$55 (21 Registers)
=$afe760				OPL2_S_AR_DR              = $AFE760;  $60..$75 (21 Registers)
=$afe780				OPL2_S_SL_RR              = $AFE780;  $80..$95 (21 Registers)
=$afe7c0				OPL2_S_FEEDBACK           = $AFE7C0;  $C0..$C9
=$afe7e0				OPL2_S_WAVE_SELECT        = $AFE7E0;  $E0..$F5
=$80					TREMOLO    = $80
=$40					VIBRATO    = $40
=$20					SUSTAINING = $20
=$10					KSR        = $10
=$0f					MULTIPLIER = $0F
=$c0					KEY_SCALE  = $C0
=$3f					OP_LEVEL   = $3F
=$f0					ATTACK_RT  = $F0
=$0f					DECAY_RT   = $0F
=$f0					SUSTAIN_RT = $F0
=$0f					RELEASE_RT = $0F
=$0e					FEEDBACK   = $0E
=$01					ALGORITHM  = $01
=9					OPL2_NUM_CHANNELS = 9
=0					OPERATOR1 = 0
=1					OPERATOR2 = 1
=0					MODULATOR = 0
=1					CARRIER = 1
=0					FREQ_MODULATION = 0
=1					ADDITIVE_SYNTH  = 1
=$10					DRUM_BASS   = $10
=$08					DRUM_SNARE  = $08
=$04					DRUM_TOM    = $04
=$02					DRUM_CYMBAL = $02
=$01					DRUM_HI_HAT = $01
=1					NOTE_CS =   1
=2					NOTE_D =    2
=3					NOTE_DS =   3
=4					NOTE_E =    4
=5					NOTE_F =    5
=6					NOTE_FS =   6
=7					NOTE_G =    7
=8					NOTE_GS =   8
=9					NOTE_A =    9
=10					NOTE_AS =  10
=11					NOTE_B =   11
=12					NOTE_C =   12
>3906c4	6b 01 81 01 98 01 b0 01		noteFNumbers    .word  $016B, $0181, $0198, $01B0, $01CA, $01E5, $0202, $0220, $0241, $0263, $0287, $02AE
>3906cc	ca 01 e5 01 02 02 20 02 41 02 63 02 87 02 ae 02
>3906dc	00 01 02 08 09 0a 10 11		registerOffsets_operator0 .byte $00, $01, $02, $08, $09, $0A, $10, $11, $12 ;initializers for operator 1 */
>3906e4	12
>3906e5	03 04 05 0b 0c 0d 13 14		registerOffsets_operator1 .byte $03, $04, $05, $0B, $0C, $0D, $13, $14, $15 ;initializers for operator 2 */
>3906ed	15
>3906ee	10 13 14 12 15 11		drumOffsets               .byte $10, $13, $14, $12, $15, $11
>3906f4	10 08 04 02 01			drumBits                  .byte $10, $08, $04, $02, $01
>3906f9	20 40 60 80 e0 c0		instrumentBaseRegs        .byte $20, $40, $60, $80, $E0, $C0

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Instruments.asm

>3906ff	00 24 4f f2 0b 00 0e 31		INSTRUMENT_ACCORDN    .text $00, $24, $4F, $F2, $0B, $00, $0E, $31, $00, $52, $0B, $00, 'ACCORDN   '
>390707	00 52 0b 00 41 43 43 4f 52 44 4e 20 20 20
>390715	00 31 43 6e 17 01 02 22		INSTRUMENT_BAGPIPE1   .text $00, $31, $43, $6E, $17, $01, $02, $22, $05, $8B, $0C, $02, 'BAGPIPE1  '
>39071d	05 8b 0c 02 42 41 47 50 49 50 45 31 20 20
>39072b	00 30 00 ff a0 03 00 a3		INSTRUMENT_BAGPIPE2   .text $00, $30, $00, $FF, $A0, $03, $00, $A3, $00, $65, $0B, $02, 'BAGPIPE2  '
>390733	00 65 0b 02 42 41 47 50 49 50 45 32 20 20
>390741	00 31 87 a1 11 00 08 16		INSTRUMENT_BANJO1     .text $00, $31, $87, $A1, $11, $00, $08, $16, $80, $7D, $43, $00, 'BANJO1    '
>390749	80 7d 43 00 42 41 4e 4a 4f 31 20 20 20 20
>390757	00 01 15 25 2f 00 0a 21		INSTRUMENT_BASS1      .text $00, $01, $15, $25, $2F, $00, $0A, $21, $80, $65, $6C, $00, 'BASS1     '
>39075f	80 65 6c 00 42 41 53 53 31 20 20 20 20 20
>39076d	00 01 1d f2 ef 00 0a 01		INSTRUMENT_BASS2      .text $00, $01, $1D, $F2, $EF, $00, $0A, $01, $00, $F5, $78, $00, 'BASS2     '
>390775	00 f5 78 00 42 41 53 53 32 20 20 20 20 20
>390783	00 c0 6d f9 01 01 0e 41		INSTRUMENT_BASSHARP   .text $00, $C0, $6D, $F9, $01, $01, $0E, $41, $00, $F2, $73, $00, 'BASSHARP  '
>39078b	00 f2 73 00 42 41 53 53 48 41 52 50 20 20
>390799	00 30 c8 d5 19 00 0c 71		INSTRUMENT_BASSOON1   .text $00, $30, $C8, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'BASSOON1  '
>3907a1	80 61 1b 00 42 41 53 53 4f 4f 4e 31 20 20
>3907af	00 c1 4f b1 53 03 06 e0		INSTRUMENT_BASSTRLG   .text $00, $C1, $4F, $B1, $53, $03, $06, $E0, $00, $12, $74, $03, 'BASSTRLG  '
>3907b7	00 12 74 03 42 41 53 53 54 52 4c 47 20 20
>3907c5	06 00 0b a8 4c 00 00 00		INSTRUMENT_BDRUM1     .text $06, $00, $0B, $A8, $4C, $00, $00, $00, $00, $00, $00, $00, 'BDRUM1    '
>3907cd	00 00 00 00 42 44 52 55 4d 31 20 20 20 20
>3907db	00 64 db ff 01 00 04 3e		INSTRUMENT_BELLONG    .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F3, $62, $00, 'BELLONG   '
>3907e3	c0 f3 62 00 42 45 4c 4c 4f 4e 47 20 20 20
>3907f1	00 07 4f f2 60 00 08 12		INSTRUMENT_BELLS      .text $00, $07, $4F, $F2, $60, $00, $08, $12, $00, $F2, $72, $00, 'BELLS     '
>3907f9	00 f2 72 00 42 45 4c 4c 53 20 20 20 20 20
>390807	00 64 db ff 01 00 04 3e		INSTRUMENT_BELSHORT   .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F5, $F3, $00, 'BELSHORT  '
>39080f	c0 f5 f3 00 42 45 4c 53 48 4f 52 54 20 20
>39081d	00 20 4b 7b 04 01 0e 21		INSTRUMENT_BNCEBASS   .text $00, $20, $4B, $7B, $04, $01, $0E, $21, $00, $F5, $72, $00, 'BNCEBASS  '
>390825	00 f5 72 00 42 4e 43 45 42 41 53 53 20 20
>390833	00 21 16 71 ae 00 0e 21		INSTRUMENT_BRASS1     .text $00, $21, $16, $71, $AE, $00, $0E, $21, $00, $81, $9E, $00, 'BRASS1    '
>39083b	00 81 9e 00 42 52 41 53 53 31 20 20 20 20
>390849	00 30 c5 52 11 00 00 31		INSTRUMENT_CBASSOON   .text $00, $30, $C5, $52, $11, $00, $00, $31, $80, $31, $2E, $00, 'CBASSOON  '
>390851	80 31 2e 00 43 42 41 53 53 4f 4f 4e 20 20
>39085f	00 33 87 01 10 00 08 14		INSTRUMENT_CELESTA    .text $00, $33, $87, $01, $10, $00, $08, $14, $80, $7D, $33, $00, 'CELESTA   '
>390867	80 7d 33 00 43 45 4c 45 53 54 41 20 20 20
>390875	00 32 16 73 24 00 0e 21		INSTRUMENT_CLAR1      .text $00, $32, $16, $73, $24, $00, $0E, $21, $80, $75, $57, $00, 'CLAR1     '
>39087d	80 75 57 00 43 4c 41 52 31 20 20 20 20 20
>39088b	00 31 1c 41 1b 00 0c 60		INSTRUMENT_CLAR2      .text $00, $31, $1C, $41, $1B, $00, $0C, $60, $80, $42, $3B, $00, 'CLAR2     '
>390893	80 42 3b 00 43 4c 41 52 32 20 20 20 20 20
>3908a1	00 32 9a 51 1b 00 0c 61		INSTRUMENT_CLARINET   .text $00, $32, $9A, $51, $1B, $00, $0C, $61, $82, $A2, $3B, $00, 'CLARINET  '
>3908a9	82 a2 3b 00 43 4c 41 52 49 4e 45 54 20 20
>3908b7	00 11 0d f2 01 00 0a 15		INSTRUMENT_CLAVECIN   .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'CLAVECIN  '
>3908bf	0d f2 b1 00 43 4c 41 56 45 43 49 4e 20 20
>3908cd	00 00 02 f0 ff 00 06 11		INSTRUMENT_CROMORNE   .text $00, $00, $02, $F0, $FF, $00, $06, $11, $80, $F0, $FF, $00, 'CROMORNE  '
>3908d5	80 f0 ff 00 43 52 4f 4d 4f 52 4e 45 20 20
>3908e3	09 01 00 f5 b5 00 00 00		INSTRUMENT_CYMBAL1    .text $09, $01, $00, $F5, $B5, $00, $00, $00, $00, $00, $00, $00, 'CYMBAL1   '
>3908eb	00 00 00 00 43 59 4d 42 41 4c 31 20 20 20
>3908f9	00 05 8a f0 7b 00 08 01		INSTRUMENT_ELCLAV1    .text $00, $05, $8A, $F0, $7B, $00, $08, $01, $80, $F4, $7B, $00, 'ELCLAV1   '
>390901	80 f4 7b 00 45 4c 43 4c 41 56 31 20 20 20
>39090f	00 01 49 f1 53 01 06 11		INSTRUMENT_ELCLAV2    .text $00, $01, $49, $F1, $53, $01, $06, $11, $00, $F1, $74, $02, 'ELCLAV2   '
>390917	00 f1 74 02 45 4c 43 4c 41 56 32 20 20 20
>390925	00 e0 6d 57 04 01 0e 61		INSTRUMENT_ELECFL     .text $00, $E0, $6D, $57, $04, $01, $0E, $61, $00, $67, $7D, $00, 'ELECFL    '
>39092d	00 67 7d 00 45 4c 45 43 46 4c 20 20 20 20
>39093b	00 13 97 9a 12 02 0e 91		INSTRUMENT_ELECVIBE   .text $00, $13, $97, $9A, $12, $02, $0E, $91, $80, $9B, $11, $00, 'ELECVIBE  '
>390943	80 9b 11 00 45 4c 45 43 56 49 42 45 20 20
>390951	00 f1 01 97 17 00 08 21		INSTRUMENT_ELGUIT1    .text $00, $F1, $01, $97, $17, $00, $08, $21, $0D, $F1, $18, $00, 'ELGUIT1   '
>390959	0d f1 18 00 45 4c 47 55 49 54 31 20 20 20
>390967	00 13 96 ff 21 00 0a 11		INSTRUMENT_ELGUIT2    .text $00, $13, $96, $FF, $21, $00, $0A, $11, $80, $FF, $03, $00, 'ELGUIT2   '
>39096f	80 ff 03 00 45 4c 47 55 49 54 32 20 20 20
>39097d	00 07 8f 82 7d 00 0c 14		INSTRUMENT_ELGUIT3    .text $00, $07, $8F, $82, $7D, $00, $0C, $14, $80, $82, $7D, $00, 'ELGUIT3   '
>390985	80 82 7d 00 45 4c 47 55 49 54 33 20 20 20
>390993	00 05 8f da 15 00 0a 01		INSTRUMENT_ELGUIT4    .text $00, $05, $8F, $DA, $15, $00, $0A, $01, $80, $F9, $14, $02, 'ELGUIT4   '
>39099b	80 f9 14 02 45 4c 47 55 49 54 34 20 20 20
>3909a9	00 b2 cd 91 2a 02 09 b1		INSTRUMENT_ELORGAN1   .text $00, $B2, $CD, $91, $2A, $02, $09, $B1, $80, $91, $2A, $01, 'ELORGAN1  '
>3909b1	80 91 2a 01 45 4c 4f 52 47 41 4e 31 20 20
>3909bf	00 01 4f f1 50 00 06 01		INSTRUMENT_ELPIANO1   .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'ELPIANO1  '
>3909c7	04 d2 7c 00 45 4c 50 49 41 4e 4f 31 20 20
>3909d5	00 02 22 f2 13 00 0e 02		INSTRUMENT_ELPIANO2   .text $00, $02, $22, $F2, $13, $00, $0E, $02, $00, $F5, $43, $00, 'ELPIANO2  '
>3909dd	00 f5 43 00 45 4c 50 49 41 4e 4f 32 20 20
>3909eb	00 81 63 f3 58 00 00 01		INSTRUMENT_EPIANO1A   .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'EPIANO1A  '
>3909f3	80 f2 58 00 45 50 49 41 4e 4f 31 41 20 20
>390a01	00 07 1f f5 fa 00 0e 01		INSTRUMENT_EPIANO1B   .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'EPIANO1B  '
>390a09	57 f5 fa 00 45 50 49 41 4e 4f 31 42 20 20
>390a17	00 21 83 74 17 00 07 a2		INSTRUMENT_FLUTE      .text $00, $21, $83, $74, $17, $00, $07, $A2, $8D, $65, $17, $00, 'FLUTE     '
>390a1f	8d 65 17 00 46 4c 55 54 45 20 20 20 20 20
>390a2d	00 a1 27 74 8f 00 02 a1		INSTRUMENT_FLUTE1     .text $00, $A1, $27, $74, $8F, $00, $02, $A1, $80, $65, $2A, $00, 'FLUTE1    '
>390a35	80 65 2a 00 46 4c 55 54 45 31 20 20 20 20
>390a43	00 e0 ec 6e 8f 00 0e 61		INSTRUMENT_FLUTE2     .text $00, $E0, $EC, $6E, $8F, $00, $0E, $61, $00, $65, $2A, $00, 'FLUTE2    '
>390a4b	00 65 2a 00 46 4c 55 54 45 32 20 20 20 20
>390a59	00 21 9f 53 5a 00 0c 21		INSTRUMENT_FRHORN1    .text $00, $21, $9F, $53, $5A, $00, $0C, $21, $80, $AA, $1A, $00, 'FRHORN1   '
>390a61	80 aa 1a 00 46 52 48 4f 52 4e 31 20 20 20
>390a6f	00 20 8e a5 8f 02 06 21		INSTRUMENT_FRHORN2    .text $00, $20, $8E, $A5, $8F, $02, $06, $21, $00, $36, $3D, $00, 'FRHORN2   '
>390a77	00 36 3d 00 46 52 48 4f 52 4e 32 20 20 20
>390a85	00 f0 18 55 ef 02 00 e0		INSTRUMENT_FSTRP1     .text $00, $F0, $18, $55, $EF, $02, $00, $E0, $80, $87, $1E, $03, 'FSTRP1    '
>390a8d	80 87 1e 03 46 53 54 52 50 31 20 20 20 20
>390a9b	00 70 16 55 2f 02 0c e0		INSTRUMENT_FSTRP2     .text $00, $70, $16, $55, $2F, $02, $0C, $E0, $80, $87, $1E, $03, 'FSTRP2    '
>390aa3	80 87 1e 03 46 53 54 52 50 32 20 20 20 20
>390ab1	00 f1 00 97 13 00 0a 25		INSTRUMENT_FUZGUIT1   .text $00, $F1, $00, $97, $13, $00, $0A, $25, $0D, $F1, $18, $01, 'FUZGUIT1  '
>390ab9	0d f1 18 01 46 55 5a 47 55 49 54 31 20 20
>390ac7	00 31 48 f1 53 00 06 32		INSTRUMENT_FUZGUIT2   .text $00, $31, $48, $F1, $53, $00, $06, $32, $00, $F2, $27, $02, 'FUZGUIT2  '
>390acf	00 f2 27 02 46 55 5a 47 55 49 54 32 20 20
>390add	00 01 11 f2 1f 00 0a 01		INSTRUMENT_GUITAR1    .text $00, $01, $11, $F2, $1F, $00, $0A, $01, $00, $F5, $88, $00, 'GUITAR1   '
>390ae5	00 f5 88 00 47 55 49 54 41 52 31 20 20 20
>390af3	00 02 29 f5 75 00 00 01		INSTRUMENT_HARP1      .text $00, $02, $29, $F5, $75, $00, $00, $01, $83, $F2, $F3, $00, 'HARP1     '
>390afb	83 f2 f3 00 48 41 52 50 31 20 20 20 20 20
>390b09	00 02 99 f5 55 00 00 01		INSTRUMENT_HARP2      .text $00, $02, $99, $F5, $55, $00, $00, $01, $80, $F6, $53, $00, 'HARP2     '
>390b11	80 f6 53 00 48 41 52 50 32 20 20 20 20 20
>390b1f	00 02 57 f5 56 00 00 01		INSTRUMENT_HARP3      .text $00, $02, $57, $F5, $56, $00, $00, $01, $80, $F6, $54, $00, 'HARP3     '
>390b27	80 f6 54 00 48 41 52 50 33 20 20 20 20 20
>390b35	00 02 29 f5 75 00 00 01		INSTRUMENT_HARPE1     .text $00, $02, $29, $F5, $75, $00, $00, $01, $03, $F2, $F3, $00, 'HARPE1    '
>390b3d	03 f2 f3 00 48 41 52 50 45 31 20 20 20 20
>390b4b	00 32 87 a1 10 00 08 16		INSTRUMENT_HARPSI1    .text $00, $32, $87, $A1, $10, $00, $08, $16, $80, $7D, $33, $00, 'HARPSI1   '
>390b53	80 7d 33 00 48 41 52 50 53 49 31 20 20 20
>390b61	00 33 87 a1 10 00 06 15		INSTRUMENT_HARPSI2    .text $00, $33, $87, $A1, $10, $00, $06, $15, $80, $7D, $43, $00, 'HARPSI2   '
>390b69	80 7d 43 00 48 41 52 50 53 49 32 20 20 20
>390b77	00 35 84 a8 10 00 08 18		INSTRUMENT_HARPSI3    .text $00, $35, $84, $A8, $10, $00, $08, $18, $80, $7D, $33, $00, 'HARPSI3   '
>390b7f	80 7d 33 00 48 41 52 50 53 49 33 20 20 20
>390b8d	00 11 0d f2 01 00 0a 15		INSTRUMENT_HARPSI4    .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'HARPSI4   '
>390b95	0d f2 b1 00 48 41 52 50 53 49 34 20 20 20
>390ba3	00 36 87 8a 00 00 08 1a		INSTRUMENT_HARPSI5    .text $00, $36, $87, $8A, $00, $00, $08, $1A, $80, $7F, $33, $00, 'HARPSI5   '
>390bab	80 7f 33 00 48 41 52 50 53 49 35 20 20 20
>390bb9	00 f0 00 1e 11 01 08 e2		INSTRUMENT_HELICPTR   .text $00, $F0, $00, $1E, $11, $01, $08, $E2, $C0, $11, $11, $01, 'HELICPTR  '
>390bc1	c0 11 11 01 48 45 4c 49 43 50 54 52 20 20
>390bcf	0a 01 00 f7 b5 00 00 00		INSTRUMENT_HIHAT1     .text $0A, $01, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'HIHAT1    '
>390bd7	00 00 00 00 48 49 48 41 54 31 20 20 20 20
>390be5	0a 01 03 da 18 00 00 00		INSTRUMENT_HIHAT2     .text $0A, $01, $03, $DA, $18, $00, $00, $00, $00, $00, $00, $00, 'HIHAT2    '
>390bed	00 00 00 00 48 49 48 41 54 32 20 20 20 20
>390bfb	00 87 4d 78 42 00 0a 94		INSTRUMENT_JAVAICAN   .text $00, $87, $4D, $78, $42, $00, $0A, $94, $00, $85, $54, $00, 'JAVAICAN  '
>390c03	00 85 54 00 4a 41 56 41 49 43 41 4e 20 20
>390c11	00 03 5e 85 51 01 0e 11		INSTRUMENT_JAZZGUIT   .text $00, $03, $5E, $85, $51, $01, $0E, $11, $00, $D2, $71, $00, 'JAZZGUIT  '
>390c19	00 d2 71 00 4a 41 5a 5a 47 55 49 54 20 20
>390c27	00 00 50 f2 70 00 0e 13		INSTRUMENT_JEWSHARP   .text $00, $00, $50, $F2, $70, $00, $0E, $13, $00, $F2, $72, $00, 'JEWSHARP  '
>390c2f	00 f2 72 00 4a 45 57 53 48 41 52 50 20 20
>390c3d	00 00 02 f0 fa 01 06 11		INSTRUMENT_KEYBRD1    .text $00, $00, $02, $F0, $FA, $01, $06, $11, $80, $F2, $FA, $01, 'KEYBRD1   '
>390c45	80 f2 fa 01 4b 45 59 42 52 44 31 20 20 20
>390c53	00 01 8f f2 bd 00 08 14		INSTRUMENT_KEYBRD2    .text $00, $01, $8F, $F2, $BD, $00, $08, $14, $80, $82, $BD, $00, 'KEYBRD2   '
>390c5b	80 82 bd 00 4b 45 59 42 52 44 32 20 20 20
>390c69	00 01 00 f0 f0 00 00 e4		INSTRUMENT_KEYBRD3    .text $00, $01, $00, $F0, $F0, $00, $00, $E4, $03, $F3, $36, $00, 'KEYBRD3   '
>390c71	03 f3 36 00 4b 45 59 42 52 44 33 20 20 20
>390c7f	09 e6 00 25 b5 00 00 00		INSTRUMENT_LASER      .text $09, $E6, $00, $25, $B5, $00, $00, $00, $00, $00, $00, $00, 'LASER     '
>390c87	00 00 00 00 4c 41 53 45 52 20 20 20 20 20
>390c95	00 32 44 f8 ff 00 0e 11		INSTRUMENT_LOGDRUM1   .text $00, $32, $44, $F8, $FF, $00, $0E, $11, $00, $F5, $7F, $00, 'LOGDRUM1  '
>390c9d	00 f5 7f 00 4c 4f 47 44 52 55 4d 31 20 20
>390cab	00 05 4e da 25 00 0a 01		INSTRUMENT_MARIMBA1   .text $00, $05, $4E, $DA, $25, $00, $0A, $01, $00, $F9, $15, $00, 'MARIMBA1  '
>390cb3	00 f9 15 00 4d 41 52 49 4d 42 41 31 20 20
>390cc1	00 85 4e da 15 00 0a 81		INSTRUMENT_MARIMBA2   .text $00, $85, $4E, $DA, $15, $00, $0A, $81, $80, $F9, $13, $00, 'MARIMBA2  '
>390cc9	80 f9 13 00 4d 41 52 49 4d 42 41 32 20 20
>390cd7	00 30 00 fe 11 01 08 ae		INSTRUMENT_MDRNPHON   .text $00, $30, $00, $FE, $11, $01, $08, $AE, $C0, $F1, $19, $01, 'MDRNPHON  '
>390cdf	c0 f1 19 01 4d 44 52 4e 50 48 4f 4e 20 20
>390ced	07 0c 00 c8 b6 01 00 00		INSTRUMENT_MLTRDRUM   .text $07, $0C, $00, $C8, $B6, $01, $00, $00, $00, $00, $00, $00, 'MLTRDRUM  '
>390cf5	00 00 00 00 4d 4c 54 52 44 52 55 4d 20 20
>390d03	00 20 90 f5 9e 02 0c 11		INSTRUMENT_MOOGSYNT   .text $00, $20, $90, $F5, $9E, $02, $0C, $11, $00, $F4, $5B, $03, 'MOOGSYNT  '
>390d0b	00 f4 5b 03 4d 4f 4f 47 53 59 4e 54 20 20
>390d19	00 0e 40 d1 53 00 0e 0e		INSTRUMENT_NOISE1     .text $00, $0E, $40, $D1, $53, $00, $0E, $0E, $00, $F2, $7F, $03, 'NOISE1    '
>390d21	00 f2 7f 03 4e 4f 49 53 45 31 20 20 20 20
>390d2f	00 b1 c5 6e 17 00 02 22		INSTRUMENT_OBOE1      .text $00, $B1, $C5, $6E, $17, $00, $02, $22, $05, $8B, $0E, $00, 'OBOE1     '
>390d37	05 8b 0e 00 4f 42 4f 45 31 20 20 20 20 20
>390d45	00 65 d2 81 03 00 02 71		INSTRUMENT_ORGAN1     .text $00, $65, $D2, $81, $03, $00, $02, $71, $80, $F1, $05, $00, 'ORGAN1    '
>390d4d	80 f1 05 00 4f 52 47 41 4e 31 20 20 20 20
>390d5b	00 24 80 ff 0f 00 01 21		INSTRUMENT_ORGAN2     .text $00, $24, $80, $FF, $0F, $00, $01, $21, $80, $FF, $0F, $00, 'ORGAN2    '
>390d63	80 ff 0f 00 4f 52 47 41 4e 32 20 20 20 20
>390d71	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3     .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $80, $F0, $1F, $00, 'ORGAN3    '
>390d79	80 f0 1f 00 4f 52 47 41 4e 33 20 20 20 20
>390d87	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3A    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $8D, $F0, $13, $00, 'ORGAN3A   '
>390d8f	8d f0 13 00 4f 52 47 41 4e 33 41 20 20 20
>390d9d	00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3B    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $92, $F0, $12, $00, 'ORGAN3B   '
>390da5	92 f0 12 00 4f 52 47 41 4e 33 42 20 20 20
>390db3	00 0c 00 f8 b5 00 01 00		INSTRUMENT_ORGNPERC   .text $00, $0C, $00, $F8, $B5, $00, $01, $00, $00, $D6, $4F, $00, 'ORGNPERC  '
>390dbb	00 d6 4f 00 4f 52 47 4e 50 45 52 43 20 20
>390dc9	00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE1     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F1, $B2, $00, 'PHONE1    '
>390dd1	08 f1 b2 00 50 48 4f 4e 45 31 20 20 20 20
>390ddf	00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE2     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $0A, $F1, $B4, $00, 'PHONE2    '
>390de7	0a f1 b4 00 50 48 4f 4e 45 32 20 20 20 20
>390df5	00 81 63 f3 58 00 00 01		INSTRUMENT_PIAN1A     .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'PIAN1A    '
>390dfd	80 f2 58 00 50 49 41 4e 31 41 20 20 20 20
>390e0b	00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1B     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $26, $F5, $FA, $00, 'PIAN1B    '
>390e13	26 f5 fa 00 50 49 41 4e 31 42 20 20 20 20
>390e21	00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1C     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'PIAN1C    '
>390e29	57 f5 fa 00 50 49 41 4e 31 43 20 20 20 20
>390e37	00 03 4f f1 53 00 06 17		INSTRUMENT_PIANO      .text $00, $03, $4F, $F1, $53, $00, $06, $17, $00, $F2, $74, $00, 'PIANO     '
>390e3f	00 f2 74 00 50 49 41 4e 4f 20 20 20 20 20
>390e4d	00 01 4f f1 53 00 06 11		INSTRUMENT_PIANO1     .text $00, $01, $4F, $F1, $53, $00, $06, $11, $00, $D2, $74, $00, 'PIANO1    '
>390e55	00 d2 74 00 50 49 41 4e 4f 31 20 20 20 20
>390e63	00 41 9d f2 51 00 06 13		INSTRUMENT_PIANO2     .text $00, $41, $9D, $F2, $51, $00, $06, $13, $00, $F2, $F1, $00, 'PIANO2    '
>390e6b	00 f2 f1 00 50 49 41 4e 4f 32 20 20 20 20
>390e79	00 01 4f f1 50 00 06 01		INSTRUMENT_PIANO3     .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'PIANO3    '
>390e81	04 d2 7c 00 50 49 41 4e 4f 33 20 20 20 20
>390e8f	00 01 4d f1 60 00 08 11		INSTRUMENT_PIANO4     .text $00, $01, $4D, $F1, $60, $00, $08, $11, $00, $D2, $7B, $00, 'PIANO4    '
>390e97	00 d2 7b 00 50 49 41 4e 4f 34 20 20 20 20
>390ea5	00 03 4f f1 53 00 06 17		INSTRUMENT_PIANOBEL   .text $00, $03, $4F, $F1, $53, $00, $06, $17, $03, $F2, $74, $00, 'PIANOBEL  '
>390ead	03 f2 74 00 50 49 41 4e 4f 42 45 4c 20 20
>390ebb	00 01 cf f1 53 00 02 12		INSTRUMENT_PIANOF     .text $00, $01, $CF, $F1, $53, $00, $02, $12, $00, $F2, $83, $00, 'PIANOF    '
>390ec3	00 f2 83 00 50 49 41 4e 4f 46 20 20 20 20
>390ed1	00 10 00 75 93 01 00 01		INSTRUMENT_POPBASS1   .text $00, $10, $00, $75, $93, $01, $00, $01, $00, $F5, $82, $01, 'POPBASS1  '
>390ed9	00 f5 82 01 50 4f 50 42 41 53 53 31 20 20
>390ee7	07 0c 00 c7 b4 00 00 00		INSTRUMENT_RKSNARE1   .text $07, $0C, $00, $C7, $B4, $00, $00, $00, $00, $00, $00, $00, 'RKSNARE1  '
>390eef	00 00 00 00 52 4b 53 4e 41 52 45 31 20 20
>390efd	00 01 4f 71 53 00 0a 12		INSTRUMENT_SAX1       .text $00, $01, $4F, $71, $53, $00, $0A, $12, $00, $52, $7C, $00, 'SAX1      '
>390f05	00 52 7c 00 53 41 58 31 20 20 20 20 20 20
>390f13	00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH    .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH   '
>390f1b	00 5c dc 00 53 43 52 41 54 43 48 20 20 20
>390f29	00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH4   .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH4  '
>390f31	00 5c dc 00 53 43 52 41 54 43 48 34 20 20
>390f3f	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SDRUM2     .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SDRUM2    '
>390f47	00 f6 b4 00 53 44 52 55 4d 32 20 20 20 20
>390f55	00 e4 0e ff 3f 01 00 c0		INSTRUMENT_SHRTVIBE   .text $00, $E4, $0E, $FF, $3F, $01, $00, $C0, $00, $F3, $07, $00, 'SHRTVIBE  '
>390f5d	00 f3 07 00 53 48 52 54 56 49 42 45 20 20
>390f6b	00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR1     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $00, 'SITAR1    '
>390f73	40 f1 53 00 53 49 54 41 52 31 20 20 20 20
>390f81	00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR2     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $01, 'SITAR2    '
>390f89	40 f1 53 01 53 49 54 41 52 32 20 20 20 20
>390f97	00 61 0c 81 03 00 08 71		INSTRUMENT_SNAKEFL    .text $00, $61, $0C, $81, $03, $00, $08, $71, $80, $61, $0C, $00, 'SNAKEFL   '
>390f9f	80 61 0c 00 53 4e 41 4b 45 46 4c 20 20 20
>390fad	07 0c 00 f8 b5 00 00 00		INSTRUMENT_SNARE1     .text $07, $0C, $00, $F8, $B5, $00, $00, $00, $00, $00, $00, $00, 'SNARE1    '
>390fb5	00 00 00 00 53 4e 41 52 45 31 20 20 20 20
>390fc3	00 06 00 f0 f0 00 0e c4		INSTRUMENT_SNRSUST    .text $00, $06, $00, $F0, $F0, $00, $0E, $C4, $03, $C4, $34, $00, 'SNRSUST   '
>390fcb	03 c4 34 00 53 4e 52 53 55 53 54 20 20 20
>390fd9	00 70 1c 51 03 02 0e 20		INSTRUMENT_SOLOVLN    .text $00, $70, $1C, $51, $03, $02, $0E, $20, $00, $54, $67, $02, 'SOLOVLN   '
>390fe1	00 54 67 02 53 4f 4c 4f 56 4c 4e 20 20 20
>390fef	00 01 46 f1 83 00 06 61		INSTRUMENT_STEELGT1   .text $00, $01, $46, $F1, $83, $00, $06, $61, $03, $31, $86, $00, 'STEELGT1  '
>390ff7	03 31 86 00 53 54 45 45 4c 47 54 31 20 20
>391005	00 01 47 f1 83 00 06 61		INSTRUMENT_STEELGT2   .text $00, $01, $47, $F1, $83, $00, $06, $61, $03, $91, $86, $00, 'STEELGT2  '
>39100d	03 91 86 00 53 54 45 45 4c 47 54 32 20 20
>39101b	00 b1 8b 71 11 00 06 61		INSTRUMENT_STRINGS1   .text $00, $B1, $8B, $71, $11, $00, $06, $61, $40, $42, $15, $01, 'STRINGS1  '
>391023	40 42 15 01 53 54 52 49 4e 47 53 31 20 20
>391031	00 e1 4f b1 d3 03 06 21		INSTRUMENT_STRNLONG   .text $00, $E1, $4F, $B1, $D3, $03, $06, $21, $00, $12, $74, $01, 'STRNLONG  '
>391039	00 12 74 01 53 54 52 4e 4c 4f 4e 47 20 20
>391047	00 55 97 2a 02 00 00 12		INSTRUMENT_SYN1       .text $00, $55, $97, $2A, $02, $00, $00, $12, $80, $42, $F3, $00, 'SYN1      '
>39104f	80 42 f3 00 53 59 4e 31 20 20 20 20 20 20
>39105d	00 13 97 9a 12 00 0e 11		INSTRUMENT_SYN2       .text $00, $13, $97, $9A, $12, $00, $0E, $11, $80, $9B, $14, $00, 'SYN2      '
>391065	80 9b 14 00 53 59 4e 32 20 20 20 20 20 20
>391073	00 11 8a f1 11 00 06 01		INSTRUMENT_SYN3       .text $00, $11, $8A, $F1, $11, $00, $06, $01, $40, $F1, $B3, $00, 'SYN3      '
>39107b	40 f1 b3 00 53 59 4e 33 20 20 20 20 20 20
>391089	00 21 0d e9 3a 00 0a 22		INSTRUMENT_SYN4       .text $00, $21, $0D, $E9, $3A, $00, $0A, $22, $80, $65, $6C, $00, 'SYN4      '
>391091	80 65 6c 00 53 59 4e 34 20 20 20 20 20 20
>39109f	00 01 4f 71 53 00 06 19		INSTRUMENT_SYN5       .text $00, $01, $4F, $71, $53, $00, $06, $19, $00, $52, $7C, $00, 'SYN5      '
>3910a7	00 52 7c 00 53 59 4e 35 20 20 20 20 20 20
>3910b5	00 24 0f 41 7e 00 0a 21		INSTRUMENT_SYN6       .text $00, $24, $0F, $41, $7E, $00, $0A, $21, $00, $F1, $5E, $00, 'SYN6      '
>3910bd	00 f1 5e 00 53 59 4e 36 20 20 20 20 20 20
>3910cb	00 07 87 f0 05 00 04 01		INSTRUMENT_SYN9       .text $00, $07, $87, $F0, $05, $00, $04, $01, $80, $F0, $05, $00, 'SYN9      '
>3910d3	80 f0 05 00 53 59 4e 39 20 20 20 20 20 20
>3910e1	00 26 03 e0 f0 00 08 1e		INSTRUMENT_SYNBAL1    .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'SYNBAL1   '
>3910e9	00 ff 31 00 53 59 4e 42 41 4c 31 20 20 20
>3910f7	00 28 03 e0 f0 00 04 13		INSTRUMENT_SYNBAL2    .text $00, $28, $03, $E0, $F0, $00, $04, $13, $00, $E8, $11, $00, 'SYNBAL2   '
>3910ff	00 e8 11 00 53 59 4e 42 41 4c 32 20 20 20
>39110d	00 30 88 d5 19 00 0c 71		INSTRUMENT_SYNBASS1   .text $00, $30, $88, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'SYNBASS1  '
>391115	80 61 1b 00 53 59 4e 42 41 53 53 31 20 20
>391123	00 81 86 65 01 00 0c 11		INSTRUMENT_SYNBASS2   .text $00, $81, $86, $65, $01, $00, $0C, $11, $00, $32, $74, $00, 'SYNBASS2  '
>39112b	00 32 74 00 53 59 4e 42 41 53 53 32 20 20
>391139	00 81 83 65 05 00 0a 51		INSTRUMENT_SYNBASS4   .text $00, $81, $83, $65, $05, $00, $0A, $51, $00, $32, $74, $00, 'SYNBASS4  '
>391141	00 32 74 00 53 59 4e 42 41 53 53 34 20 20
>39114f	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR1    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F8, $B6, $00, 'SYNSNR1   '
>391157	00 f8 b6 00 53 59 4e 53 4e 52 31 20 20 20
>391165	00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR2    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SYNSNR2   '
>39116d	00 f6 b4 00 53 59 4e 53 4e 52 32 20 20 20
>39117b	00 8f 81 ef 01 00 04 01		INSTRUMENT_TINCAN1    .text $00, $8F, $81, $EF, $01, $00, $04, $01, $00, $98, $F1, $00, 'TINCAN1   '
>391183	00 98 f1 00 54 49 4e 43 41 4e 31 20 20 20
>391191	08 04 00 f7 b5 00 00 00		INSTRUMENT_TOM1       .text $08, $04, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'TOM1      '
>391199	00 00 00 00 54 4f 4d 31 20 20 20 20 20 20
>3911a7	08 02 00 c8 97 00 00 00		INSTRUMENT_TOM2       .text $08, $02, $00, $C8, $97, $00, $00, $00, $00, $00, $00, $00, 'TOM2      '
>3911af	00 00 00 00 54 4f 4d 32 20 20 20 20 20 20
>3911bd	00 17 4f f2 61 00 08 12		INSTRUMENT_TRAINBEL   .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F2, $74, $00, 'TRAINBEL  '
>3911c5	08 f2 74 00 54 52 41 49 4e 42 45 4c 20 20
>3911d3	00 26 03 e0 f0 00 08 1e		INSTRUMENT_TRIANGLE   .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'TRIANGLE  '
>3911db	00 ff 31 00 54 52 49 41 4e 47 4c 45 20 20
>3911e9	00 b1 1c 41 1f 00 0e 61		INSTRUMENT_TROMB1     .text $00, $B1, $1C, $41, $1F, $00, $0E, $61, $80, $92, $3B, $00, 'TROMB1    '
>3911f1	80 92 3b 00 54 52 4f 4d 42 31 20 20 20 20
>3911ff	00 21 1c 53 1d 00 0c 61		INSTRUMENT_TROMB2     .text $00, $21, $1C, $53, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TROMB2    '
>391207	80 52 3b 00 54 52 4f 4d 42 32 20 20 20 20
>391215	00 31 1c 41 0b 00 0e 61		INSTRUMENT_TRUMPET1   .text $00, $31, $1C, $41, $0B, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET1  '
>39121d	80 92 3b 00 54 52 55 4d 50 45 54 31 20 20
>39122b	00 31 1c 23 1d 00 0c 61		INSTRUMENT_TRUMPET2   .text $00, $31, $1C, $23, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TRUMPET2  '
>391233	80 52 3b 00 54 52 55 4d 50 45 54 32 20 20
>391241	00 31 1c 41 01 00 0e 61		INSTRUMENT_TRUMPET3   .text $00, $31, $1C, $41, $01, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET3  '
>391249	80 92 3b 00 54 52 55 4d 50 45 54 33 20 20
>391257	00 31 1c 41 0b 00 0c 61		INSTRUMENT_TRUMPET4   .text $00, $31, $1C, $41, $0B, $00, $0C, $61, $80, $92, $3B, $00, 'TRUMPET4  '
>39125f	80 92 3b 00 54 52 55 4d 50 45 54 34 20 20
>39126d	00 21 19 43 8c 00 0c 21		INSTRUMENT_TUBA1      .text $00, $21, $19, $43, $8C, $00, $0C, $21, $80, $85, $2F, $00, 'TUBA1     '
>391275	80 85 2f 00 54 55 42 41 31 20 20 20 20 20
>391283	00 84 53 f5 33 00 06 a0		INSTRUMENT_VIBRA1     .text $00, $84, $53, $F5, $33, $00, $06, $A0, $80, $FD, $25, $00, 'VIBRA1    '
>39128b	80 fd 25 00 56 49 42 52 41 31 20 20 20 20
>391299	00 06 73 f6 54 00 00 81		INSTRUMENT_VIBRA2     .text $00, $06, $73, $F6, $54, $00, $00, $81, $03, $F2, $B3, $00, 'VIBRA2    '
>3912a1	03 f2 b3 00 56 49 42 52 41 32 20 20 20 20
>3912af	00 93 97 aa 12 02 0e 91		INSTRUMENT_VIBRA3     .text $00, $93, $97, $AA, $12, $02, $0E, $91, $80, $AC, $21, $00, 'VIBRA3    '
>3912b7	80 ac 21 00 56 49 42 52 41 33 20 20 20 20
>3912c5	00 31 1c 51 03 00 0e 61		INSTRUMENT_VIOLIN1    .text $00, $31, $1C, $51, $03, $00, $0E, $61, $80, $54, $67, $00, 'VIOLIN1   '
>3912cd	80 54 67 00 56 49 4f 4c 49 4e 31 20 20 20
>3912db	00 e1 88 62 29 00 0c 22		INSTRUMENT_VIOLIN2    .text $00, $E1, $88, $62, $29, $00, $0C, $22, $80, $53, $2C, $00, 'VIOLIN2   '
>3912e3	80 53 2c 00 56 49 4f 4c 49 4e 32 20 20 20
>3912f1	00 e1 88 64 29 00 06 22		INSTRUMENT_VIOLIN3    .text $00, $E1, $88, $64, $29, $00, $06, $22, $83, $53, $2C, $00, 'VIOLIN3   '
>3912f9	83 53 2c 00 56 49 4f 4c 49 4e 33 20 20 20
>391307	00 31 9c f1 f9 00 0e 31		INSTRUMENT_VLNPIZZ1   .text $00, $31, $9C, $F1, $F9, $00, $0E, $31, $80, $F7, $E6, $00, 'VLNPIZZ1  '
>39130f	80 f7 e6 00 56 4c 4e 50 49 5a 5a 31 20 20
>39131d	00 00 02 00 f0 00 0e 14		INSTRUMENT_WAVE       .text $00, $00, $02, $00, $F0, $00, $0E, $14, $80, $1B, $A2, $00, 'WAVE      '
>391325	80 1b a2 00 57 41 56 45 20 20 20 20 20 20
>391333	00 11 2d c8 2f 00 0c 31		INSTRUMENT_XYLO1      .text $00, $11, $2D, $C8, $2F, $00, $0C, $31, $00, $F5, $F5, $00, 'XYLO1     '
>39133b	00 f5 f5 00 58 59 4c 4f 31 20 20 20 20 20
>391349	06 2e 00 ff 0f 00 00 00		INSTRUMENT_XYLO2      .text $06, $2E, $00, $FF, $0F, $00, $00, $00, $00, $00, $00, $00, 'XYLO2     '
>391351	00 00 00 00 58 59 4c 4f 32 20 20 20 20 20
>39135f	00 06 00 ff f0 00 0e c4		INSTRUMENT_XYLO3      .text $00, $06, $00, $FF, $F0, $00, $0E, $C4, $00, $F8, $B5, $00, 'XYLO3     '
>391367	00 f8 b5 00 58 59 4c 4f 33 20 20 20 20 20

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Drums.asm

>391375	00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP2         .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>39137d	00 87 fa 00
>391381	00 01 00 78 97 09 00 02		DRUMINS_SCRATCH1      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>391389	00 88 98 03
>39138d	00 01 00 78 97 09 00 02		DRUMINS_SCRATCH2      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>391395	00 88 98 03
>391399	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT2      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>3913a1	00 f9 69 00
>3913a5	00 00 00 f8 6c 01 00 0e		DRUMINS_HIQ           .text $00, $00, $00, $F8, $6C, $01, $00, $0E, $80, $E8, $4A, $00
>3913ad	80 e8 4a 00
>3913b1	00 25 1b fa f2 01 00 12		DRUMINS_WOODBLOK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>3913b9	00 f6 9a 00
>3913bd	00 06 03 f4 44 00 01 01		DRUMINS_GLOCK         .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>3913c5	1b f2 34 00
>3913c9	00 00 00 f9 f3 05 00 01		DRUMINS_BASS_DR2      .text $00, $00, $00, $F9, $F3, $05, $00, $01, $00, $F7, $8A, $00
>3913d1	00 f7 8a 00
>3913d5	00 01 07 fa fd 05 00 01		DRUMINS_BASS_DR1      .text $00, $01, $07, $FA, $FD, $05, $00, $01, $00, $F6, $47, $00
>3913dd	00 f6 47 00
>3913e1	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT       .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>3913e9	00 f9 69 00
>3913ed	00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_AC      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>3913f5	00 f7 a9 00
>3913f9	00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP          .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>391401	00 87 fa 00
>391405	00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_EL      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>39140d	00 f7 a9 00
>391411	00 06 0a fa 1f 0c 00 11		DRUMINS_LO_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>391419	00 f5 f5 00
>39141d	00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_CL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>391425	06 b8 d8 03
>391429	00 06 0a fa 1f 0c 00 11		DRUMINS_HI_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>391431	00 f5 f5 00
>391435	00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_PL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>39143d	06 b8 d8 03
>391441	00 06 0a fa 1f 0c 00 11		DRUMINS_LOW_TOM       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>391449	00 f5 f5 00
>39144d	00 2e 00 82 f6 05 00 04		DRUMINS_HIHAT_OP      .text $00, $2E, $00, $82, $F6, $05, $00, $04, $10, $74, $F8, $03
>391455	10 74 f8 03
>391459	00 06 0a fa 1f 0c 00 11		DRUMINS_LTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>391461	00 f5 f5 00
>391465	00 06 0a fa 1f 0c 00 11		DRUMINS_HTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>39146d	00 f5 f5 00
>391471	00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH         .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>391479	05 c5 d4 03
>39147d	00 06 0a fa 1f 0c 00 11		DRUMINS_TOM_HIGH      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>391485	00 f5 f5 00
>391489	00 29 10 94 00 0f 00 04		DRUMINS_RIDE_CY       .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>391491	04 f9 44 03
>391495	00 2c 00 9f 00 0f 02 0e		DRUMINS_TAMBOUR       .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>39149d	05 c5 d4 03
>3914a1	00 29 10 94 00 0f 00 04		DRUMINS_CYMBAL        .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>3914a9	04 f9 44 03
>3914ad	00 2e 09 f5 f1 01 00 06		DRUMINS_TAMBOU2       .text $00, $2E, $09, $F5, $F1, $01, $00, $06, $03, $87, $F7, $03
>3914b5	03 87 f7 03
>3914b9	00 2c 00 9f 00 0f 02 0e		DRUMINS_SPLASH        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>3914c1	05 c5 d4 03
>3914c5	00 37 14 f7 a1 09 01 03		DRUMINS_COWBELL       .text $00, $37, $14, $F7, $A1, $09, $01, $03, $00, $F6, $28, $00
>3914cd	00 f6 28 00
>3914d1	00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH2        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>3914d9	05 c5 d4 03
>3914dd	00 80 00 ff 00 0d 01 00		DRUMINS_VIBRASLA      .text $00, $80, $00, $FF, $00, $0D, $01, $00, $00, $F5, $F7, $01
>3914e5	00 f5 f7 01
>3914e9	00 29 10 94 00 0f 00 04		DRUMINS_RIDE2         .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>3914f1	04 f9 44 03
>3914f5	00 25 c4 fa fa 01 00 03		DRUMINS_HI_BONGO      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>3914fd	00 99 f9 00
>391501	00 21 03 fb fa 01 01 02		DRUMINS_LO_BONGO      .text $00, $21, $03, $FB, $FA, $01, $01, $02, $00, $A8, $F7, $00
>391509	00 a8 f7 00
>39150d	00 25 c4 fa fa 01 00 03		DRUMINS_MUTECONG      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>391515	00 99 f9 00
>391519	00 24 18 f9 fa 0f 02 03		DRUMINS_OPENCONG      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>391521	00 a6 f6 00
>391525	00 24 18 f9 fa 0f 02 03		DRUMINS_LOWCONGA      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>39152d	00 a6 f6 00
>391531	00 05 14 f5 f5 07 02 03		DRUMINS_HI_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>391539	00 f6 36 02
>39153d	00 05 14 f5 f5 07 02 03		DRUMINS_LO_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>391545	00 f6 36 02
>391549	00 1c 0c f9 31 0f 01 15		DRUMINS_HI_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>391551	00 96 e8 01
>391555	00 1c 0c f9 31 0f 01 15		DRUMINS_LO_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>39155d	00 96 e8 01
>391561	00 0e 00 ff 01 0f 00 0e		DRUMINS_CABASA        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>391569	02 79 77 03
>39156d	00 0e 00 ff 01 0f 00 0e		DRUMINS_MARACAS       .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>391575	02 79 77 03
>391579	00 20 15 af 07 05 01 0e		DRUMINS_S_WHISTL      .text $00, $20, $15, $AF, $07, $05, $01, $0E, $00, $A5, $2B, $02
>391581	00 a5 2b 02
>391585	00 20 18 bf 07 01 01 0e		DRUMINS_L_WHISTL      .text $00, $20, $18, $BF, $07, $01, $01, $0E, $00, $93, $3B, $02
>39158d	00 93 3b 02
>391591	00 20 00 f0 f7 0b 00 08		DRUMINS_S_GUIRO       .text $00, $20, $00, $F0, $F7, $0B, $00, $08, $01, $89, $3B, $03
>391599	01 89 3b 03
>39159d	00 20 00 f3 fa 09 00 08		DRUMINS_L_GUIRO       .text $00, $20, $00, $F3, $FA, $09, $00, $08, $0A, $53, $2B, $02
>3915a5	0a 53 2b 02
>3915a9	00 15 21 f8 9a 09 01 13		DRUMINS_CLAVES        .text $00, $15, $21, $F8, $9A, $09, $01, $13, $00, $F6, $89, $00
>3915b1	00 f6 89 00
>3915b5	00 25 1b fa f2 01 00 12		DRUMINS_HI_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>3915bd	00 f6 9a 00
>3915c1	00 25 1b fa f2 01 00 12		DRUMINS_LO_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>3915c9	00 f6 9a 00
>3915cd	00 20 01 5f 07 01 00 08		DRUMINS_MU_CUICA      .text $00, $20, $01, $5F, $07, $01, $00, $08, $00, $87, $4B, $01
>3915d5	00 87 4b 01
>3915d9	00 25 12 57 f7 01 01 03		DRUMINS_OP_CUICA      .text $00, $25, $12, $57, $F7, $01, $01, $03, $00, $78, $67, $01
>3915e1	00 78 67 01
>3915e5	00 22 2f f1 f0 07 00 27		DRUMINS_MU_TRNGL      .text $00, $22, $2F, $F1, $F0, $07, $00, $27, $02, $F8, $FC, $00
>3915ed	02 f8 fc 00
>3915f1	00 26 44 f1 f0 07 00 27		DRUMINS_OP_TRNGL      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>3915f9	40 f5 f5 00
>3915fd	00 0e 00 ff 01 0f 00 0e		DRUMINS_SHAKER        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>391605	02 79 77 03
>391609	00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL1      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>391611	40 f5 f5 00
>391615	00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL2      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>39161d	40 f5 f5 00
>391621	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT3      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>391629	00 f9 69 00
>39162d	00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT4      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>391635	00 f9 69 00
>391639	00 02 1d f5 93 01 00 00		DRUMINS_TAIKO         .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>391641	00 c6 45 00
=27					DRUM_NOTE_BASE = 27;
=60					NUM_MIDI_DRUMS = 60;
>391645	75 13 39 00 81 13 39 00		midiDrums     .dword DRUMINS_CLAP2, DRUMINS_SCRATCH1, DRUMINS_SCRATCH2, DRUMINS_RIMSHOT2
>39164d	8d 13 39 00 99 13 39 00
>391655	a5 13 39 00 b1 13 39 00		              .dword DRUMINS_HIQ, DRUMINS_WOODBLOK, DRUMINS_GLOCK, DRUMINS_BASS_DR2
>39165d	bd 13 39 00 c9 13 39 00
>391665	d5 13 39 00 e1 13 39 00		              .dword DRUMINS_BASS_DR1, DRUMINS_RIMSHOT,  DRUMINS_SNARE_AC, DRUMINS_CLAP
>39166d	ed 13 39 00 f9 13 39 00
>391675	05 14 39 00 11 14 39 00		              .dword DRUMINS_SNARE_EL, DRUMINS_LO_TOMS,  DRUMINS_HIHAT_CL, DRUMINS_HI_TOMS
>39167d	1d 14 39 00 29 14 39 00
>391685	35 14 39 00 41 14 39 00		              .dword DRUMINS_HIHAT_PL, DRUMINS_LOW_TOM,	DRUMINS_HIHAT_OP, DRUMINS_LTOM_MID
>39168d	4d 14 39 00 59 14 39 00
>391695	65 14 39 00 71 14 39 00		              .dword DRUMINS_HTOM_MID, DRUMINS_CRASH,    DRUMINS_TOM_HIGH, DRUMINS_RIDE_CY
>39169d	7d 14 39 00 89 14 39 00
>3916a5	95 14 39 00 a1 14 39 00		              .dword DRUMINS_TAMBOUR,  DRUMINS_CYMBAL,   DRUMINS_TAMBOU2,  DRUMINS_SPLASH
>3916ad	ad 14 39 00 b9 14 39 00
>3916b5	c5 14 39 00 d1 14 39 00		              .dword DRUMINS_COWBELL,  DRUMINS_CRASH2, 	DRUMINS_VIBRASLA, DRUMINS_RIDE2
>3916bd	dd 14 39 00 e9 14 39 00
>3916c5	f5 14 39 00 01 15 39 00		              .dword DRUMINS_HI_BONGO, DRUMINS_LO_BONGO, DRUMINS_MUTECONG, DRUMINS_OPENCONG
>3916cd	0d 15 39 00 19 15 39 00
>3916d5	25 15 39 00 31 15 39 00		              .dword DRUMINS_LOWCONGA, DRUMINS_HI_TIMBA, DRUMINS_LO_TIMBA, DRUMINS_HI_AGOGO
>3916dd	3d 15 39 00 49 15 39 00
>3916e5	55 15 39 00 61 15 39 00		              .dword DRUMINS_LO_AGOGO, DRUMINS_CABASA, DRUMINS_MARACAS,  DRUMINS_S_WHISTL
>3916ed	6d 15 39 00 79 15 39 00
>3916f5	85 15 39 00 91 15 39 00		              .dword DRUMINS_L_WHISTL, DRUMINS_S_GUIRO,  DRUMINS_L_GUIRO,  DRUMINS_CLAVES
>3916fd	9d 15 39 00 a9 15 39 00
>391705	b5 15 39 00 c1 15 39 00		              .dword DRUMINS_HI_WDBLK, DRUMINS_LO_WDBLK, DRUMINS_MU_CUICA, DRUMINS_OP_CUICA
>39170d	cd 15 39 00 d9 15 39 00
>391715	e5 15 39 00 f1 15 39 00		              .dword DRUMINS_MU_TRNGL, DRUMINS_OP_TRNGL, DRUMINS_SHAKER, DRUMINS_TRIANGL1
>39171d	fd 15 39 00 09 16 39 00
>391725	15 16 39 00 21 16 39 00		              .dword DRUMINS_TRIANGL2, DRUMINS_RIMSHOT3, DRUMINS_RIMSHOT4, DRUMINS_TAIKO
>39172d	2d 16 39 00 39 16 39 00

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Instruments.asm

>391735	00 33 5a b2 50 01 00 31		MIDI_INSTRUMENT_PIANO1     .text $00, $33, $5A, $B2, $50, $01, $00, $31, $00, $B1, $F5, $01
>39173d	00 b1 f5 01
>391741	00 31 49 f2 53 07 01 11		MIDI_INSTRUMENT_PIANO2     .text $00, $31, $49, $F2, $53, $07, $01, $11, $03, $F1, $F5, $00
>391749	03 f1 f5 00
>39174d	00 31 95 d1 83 0d 01 32		MIDI_INSTRUMENT_PIANO3     .text $00, $31, $95, $D1, $83, $0D, $01, $32, $03, $C1, $F5, $00
>391755	03 c1 f5 00
>391759	00 34 9b f3 63 01 01 11		MIDI_INSTRUMENT_HONKTONK   .text $00, $34, $9B, $F3, $63, $01, $01, $11, $00, $92, $F5, $01
>391761	00 92 f5 01
>391765	00 27 28 f8 b7 01 02 91		MIDI_INSTRUMENT_EP1        .text $00, $27, $28, $F8, $B7, $01, $02, $91, $00, $F1, $F9, $00
>39176d	00 f1 f9 00
>391771	00 1a 2d f3 ee 01 01 11		MIDI_INSTRUMENT_EP2        .text $00, $1A, $2D, $F3, $EE, $01, $01, $11, $00, $F1, $F5, $00
>391779	00 f1 f5 00
>39177d	00 35 95 f2 58 0f 01 32		MIDI_INSTRUMENT_HARPSIC    .text $00, $35, $95, $F2, $58, $0F, $01, $32, $02, $81, $F6, $01
>391785	02 81 f6 01
>391789	00 31 85 c9 40 01 00 35		MIDI_INSTRUMENT_CLAVIC     .text $00, $31, $85, $C9, $40, $01, $00, $35, $00, $C2, $B9, $01
>391791	00 c2 b9 01
>391795	00 09 15 c7 64 08 00 01		MIDI_INSTRUMENT_CELESTA    .text $00, $09, $15, $C7, $64, $08, $00, $01, $05, $B2, $35, $00
>39179d	05 b2 35 00
>3917a1	00 06 03 f4 44 00 01 01		MIDI_INSTRUMENT_GLOCK      .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>3917a9	1b f2 34 00
>3917ad	00 04 06 a9 24 0a 01 01		MIDI_INSTRUMENT_MUSICBOX   .text $00, $04, $06, $A9, $24, $0A, $01, $01, $01, $F5, $74, $00
>3917b5	01 f5 74 00
>3917b9	00 d4 00 f6 33 00 00 f1		MIDI_INSTRUMENT_VIBES      .text $00, $D4, $00, $F6, $33, $00, $00, $F1, $00, $61, $E3, $00
>3917c1	00 61 e3 00
>3917c5	00 d4 00 f7 e8 04 00 d1		MIDI_INSTRUMENT_MARIMBA    .text $00, $D4, $00, $F7, $E8, $04, $00, $D1, $00, $A4, $64, $00
>3917cd	00 a4 64 00
>3917d1	00 36 16 f7 f7 01 00 31		MIDI_INSTRUMENT_XYLO       .text $00, $36, $16, $F7, $F7, $01, $00, $31, $07, $B5, $F5, $00
>3917d9	07 b5 f5 00
>3917dd	00 03 1b a2 43 0b 00 00		MIDI_INSTRUMENT_TUBEBELL   .text $00, $03, $1B, $A2, $43, $0B, $00, $00, $00, $F3, $74, $00
>3917e5	00 f3 74 00
>3917e9	00 c3 8e f8 35 01 01 11		MIDI_INSTRUMENT_SANTUR     .text $00, $C3, $8E, $F8, $35, $01, $01, $11, $00, $C3, $94, $01
>3917f1	00 c3 94 01
>3917f5	00 e2 07 f4 1b 06 01 e0		MIDI_INSTRUMENT_ORGAN1     .text $00, $E2, $07, $F4, $1B, $06, $01, $E0, $00, $F4, $0D, $01
>3917fd	00 f4 0d 01
>391801	00 f2 00 f6 2c 04 00 f0		MIDI_INSTRUMENT_ORGAN2     .text $00, $F2, $00, $F6, $2C, $04, $00, $F0, $00, $F5, $0B, $01
>391809	00 f5 0b 01
>39180d	00 f1 06 b6 15 0a 00 f0		MIDI_INSTRUMENT_ORGAN3     .text $00, $F1, $06, $B6, $15, $0A, $00, $F0, $00, $BF, $07, $00
>391815	00 bf 07 00
>391819	00 22 03 79 16 08 01 e0		MIDI_INSTRUMENT_PIPEORG    .text $00, $22, $03, $79, $16, $08, $01, $E0, $00, $6D, $08, $01
>391821	00 6d 08 01
>391825	00 31 27 63 06 01 00 72		MIDI_INSTRUMENT_REEDORG    .text $00, $31, $27, $63, $06, $01, $00, $72, $00, $51, $17, $01
>39182d	00 51 17 01
>391831	00 b4 1d 53 16 0f 01 71		MIDI_INSTRUMENT_ACORDIAN   .text $00, $B4, $1D, $53, $16, $0F, $01, $71, $00, $51, $17, $01
>391839	00 51 17 01
>39183d	00 25 29 97 15 01 00 32		MIDI_INSTRUMENT_HARMONIC   .text $00, $25, $29, $97, $15, $01, $00, $32, $00, $53, $08, $01
>391845	00 53 08 01
>391849	00 24 9e 67 15 0f 00 31		MIDI_INSTRUMENT_BANDNEON   .text $00, $24, $9E, $67, $15, $0F, $00, $31, $00, $53, $06, $01
>391851	00 53 06 01
>391855	00 13 27 a3 b4 05 01 31		MIDI_INSTRUMENT_NYLONGT    .text $00, $13, $27, $A3, $B4, $05, $01, $31, $00, $D2, $F8, $00
>39185d	00 d2 f8 00
>391861	00 17 a3 f3 32 01 00 11		MIDI_INSTRUMENT_STEELGT    .text $00, $17, $A3, $F3, $32, $01, $00, $11, $00, $E2, $C7, $01
>391869	00 e2 c7 01
>39186d	00 33 24 d2 c1 0f 01 31		MIDI_INSTRUMENT_JAZZGT     .text $00, $33, $24, $D2, $C1, $0F, $01, $31, $00, $F1, $9C, $00
>391875	00 f1 9c 00
>391879	00 31 05 f8 44 01 00 32		MIDI_INSTRUMENT_CLEANGT    .text $00, $31, $05, $F8, $44, $01, $00, $32, $02, $F2, $C9, $01
>391881	02 f2 c9 01
>391885	00 21 09 9c 7b 07 00 02		MIDI_INSTRUMENT_MUTEGT     .text $00, $21, $09, $9C, $7B, $07, $00, $02, $03, $95, $FB, $00
>39188d	03 95 fb 00
>391891	00 21 84 81 98 07 01 21		MIDI_INSTRUMENT_OVERDGT    .text $00, $21, $84, $81, $98, $07, $01, $21, $04, $A1, $59, $00
>391899	04 a1 59 00
>39189d	00 b1 0c 78 43 01 00 22		MIDI_INSTRUMENT_DISTGT     .text $00, $B1, $0C, $78, $43, $01, $00, $22, $03, $91, $FC, $03
>3918a5	03 91 fc 03
>3918a9	00 00 0a 82 8c 09 00 08		MIDI_INSTRUMENT_GTHARMS    .text $00, $00, $0A, $82, $8C, $09, $00, $08, $02, $B4, $EC, $00
>3918b1	02 b4 ec 00
>3918b5	00 21 13 ab 46 01 00 21		MIDI_INSTRUMENT_ACOUBASS   .text $00, $21, $13, $AB, $46, $01, $00, $21, $00, $93, $F7, $00
>3918bd	00 93 f7 00
>3918c1	00 01 0a f9 32 01 00 22		MIDI_INSTRUMENT_FINGBASS   .text $00, $01, $0A, $F9, $32, $01, $00, $22, $04, $C1, $58, $00
>3918c9	04 c1 58 00
>3918cd	00 21 07 fa 77 0b 00 22		MIDI_INSTRUMENT_PICKBASS   .text $00, $21, $07, $FA, $77, $0B, $00, $22, $02, $C3, $6A, $00
>3918d5	02 c3 6a 00
>3918d9	00 21 17 71 57 0b 00 21		MIDI_INSTRUMENT_FRETLESS   .text $00, $21, $17, $71, $57, $0B, $00, $21, $00, $62, $87, $00
>3918e1	00 62 87 00
>3918e5	00 25 01 fa 78 07 01 12		MIDI_INSTRUMENT_SLAPBAS1   .text $00, $25, $01, $FA, $78, $07, $01, $12, $00, $F3, $97, $00
>3918ed	00 f3 97 00
>3918f1	00 21 03 fa 88 0d 00 13		MIDI_INSTRUMENT_SLAPBAS2   .text $00, $21, $03, $FA, $88, $0D, $00, $13, $00, $B3, $97, $00
>3918f9	00 b3 97 00
>3918fd	00 21 09 f5 7f 09 01 23		MIDI_INSTRUMENT_SYNBASS1   .text $00, $21, $09, $F5, $7F, $09, $01, $23, $04, $F3, $CC, $00
>391905	04 f3 cc 00
>391909	00 01 10 a3 9b 09 00 01		MIDI_INSTRUMENT_SYNBASS2   .text $00, $01, $10, $A3, $9B, $09, $00, $01, $00, $93, $AA, $00
>391911	00 93 aa 00
>391915	00 e2 19 f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLIN     .text $00, $E2, $19, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>39191d	00 78 08 01
>391921	00 e2 1c f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLA      .text $00, $E2, $1C, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>391929	00 78 08 01
>39192d	00 61 19 69 16 0b 01 61		MIDI_INSTRUMENT_CELLO      .text $00, $61, $19, $69, $16, $0B, $01, $61, $00, $54, $27, $01
>391935	00 54 27 01
>391939	00 71 18 82 31 0d 01 32		MIDI_INSTRUMENT_CONTRAB    .text $00, $71, $18, $82, $31, $0D, $01, $32, $00, $61, $56, $00
>391941	00 61 56 00
>391945	00 e2 23 70 06 0d 01 e1		MIDI_INSTRUMENT_TREMSTR    .text $00, $E2, $23, $70, $06, $0D, $01, $E1, $00, $75, $16, $01
>39194d	00 75 16 01
>391951	00 02 00 88 e6 08 00 61		MIDI_INSTRUMENT_PIZZ       .text $00, $02, $00, $88, $E6, $08, $00, $61, $00, $F5, $F6, $01
>391959	00 f5 f6 01
>39195d	00 12 20 f6 d5 0f 01 11		MIDI_INSTRUMENT_HARP       .text $00, $12, $20, $F6, $D5, $0F, $01, $11, $80, $F3, $E3, $00
>391965	80 f3 e3 00
>391969	00 61 0e f4 f4 01 01 00		MIDI_INSTRUMENT_TIMPANI    .text $00, $61, $0E, $F4, $F4, $01, $01, $00, $00, $B5, $F5, $00
>391971	00 b5 f5 00
>391975	00 61 1e 9c 04 0f 01 21		MIDI_INSTRUMENT_STRINGS    .text $00, $61, $1E, $9C, $04, $0F, $01, $21, $80, $71, $16, $00
>39197d	80 71 16 00
>391981	00 a2 2a c0 d6 0f 02 21		MIDI_INSTRUMENT_SLOWSTR    .text $00, $A2, $2A, $C0, $D6, $0F, $02, $21, $00, $30, $55, $01
>391989	00 30 55 01
>39198d	00 61 21 72 35 0f 01 61		MIDI_INSTRUMENT_SYNSTR1    .text $00, $61, $21, $72, $35, $0F, $01, $61, $00, $62, $36, $01
>391995	00 62 36 01
>391999	00 21 1a 72 23 0f 01 21		MIDI_INSTRUMENT_SYNSTR2    .text $00, $21, $1A, $72, $23, $0F, $01, $21, $02, $51, $07, $00
>3919a1	02 51 07 00
>3919a5	00 e1 16 97 31 09 00 61		MIDI_INSTRUMENT_CHOIR      .text $00, $E1, $16, $97, $31, $09, $00, $61, $00, $62, $39, $00
>3919ad	00 62 39 00
>3919b1	00 22 c3 79 45 01 00 21		MIDI_INSTRUMENT_OOHS       .text $00, $22, $C3, $79, $45, $01, $00, $21, $00, $66, $27, $00
>3919b9	00 66 27 00
>3919bd	00 21 de 63 55 01 01 21		MIDI_INSTRUMENT_SYNVOX     .text $00, $21, $DE, $63, $55, $01, $01, $21, $00, $73, $46, $00
>3919c5	00 73 46 00
>3919c9	00 42 05 86 f7 0a 00 50		MIDI_INSTRUMENT_ORCHIT     .text $00, $42, $05, $86, $F7, $0A, $00, $50, $00, $74, $76, $01
>3919d1	00 74 76 01
>3919d5	00 31 1c 61 02 0f 00 61		MIDI_INSTRUMENT_TRUMPET    .text $00, $31, $1C, $61, $02, $0F, $00, $61, $81, $92, $38, $00
>3919dd	81 92 38 00
>3919e1	00 71 1e 52 23 0f 00 61		MIDI_INSTRUMENT_TROMBONE   .text $00, $71, $1E, $52, $23, $0F, $00, $61, $02, $71, $19, $00
>3919e9	02 71 19 00
>3919ed	00 21 1a 76 16 0f 00 21		MIDI_INSTRUMENT_TUBA       .text $00, $21, $1A, $76, $16, $0F, $00, $21, $01, $81, $09, $00
>3919f5	01 81 09 00
>3919f9	00 25 28 89 2c 07 02 20		MIDI_INSTRUMENT_MUTETRP    .text $00, $25, $28, $89, $2C, $07, $02, $20, $00, $83, $4B, $02
>391a01	00 83 4b 02
>391a05	00 21 1f 79 16 09 00 a2		MIDI_INSTRUMENT_FRHORN     .text $00, $21, $1F, $79, $16, $09, $00, $A2, $05, $71, $59, $00
>391a0d	05 71 59 00
>391a11	00 21 19 87 16 0f 00 21		MIDI_INSTRUMENT_BRASS1     .text $00, $21, $19, $87, $16, $0F, $00, $21, $03, $82, $39, $00
>391a19	03 82 39 00
>391a1d	00 21 17 75 35 0f 00 22		MIDI_INSTRUMENT_SYNBRAS1   .text $00, $21, $17, $75, $35, $0F, $00, $22, $82, $84, $17, $00
>391a25	82 84 17 00
>391a29	00 21 22 62 58 0f 00 21		MIDI_INSTRUMENT_SYNBRAS2   .text $00, $21, $22, $62, $58, $0F, $00, $21, $02, $72, $16, $00
>391a31	02 72 16 00
>391a35	00 b1 1b 59 07 01 01 a1		MIDI_INSTRUMENT_SOPSAX     .text $00, $B1, $1B, $59, $07, $01, $01, $A1, $00, $7B, $0A, $00
>391a3d	00 7b 0a 00
>391a41	00 21 16 9f 04 0b 00 21		MIDI_INSTRUMENT_ALTOSAX    .text $00, $21, $16, $9F, $04, $0B, $00, $21, $00, $85, $0C, $01
>391a49	00 85 0c 01
>391a4d	00 21 0f a8 20 0d 00 23		MIDI_INSTRUMENT_TENSAX     .text $00, $21, $0F, $A8, $20, $0D, $00, $23, $00, $7B, $0A, $01
>391a55	00 7b 0a 01
>391a59	00 21 0f 88 04 09 00 26		MIDI_INSTRUMENT_BARISAX    .text $00, $21, $0F, $88, $04, $09, $00, $26, $00, $79, $18, $01
>391a61	00 79 18 01
>391a65	00 31 18 8f 05 01 00 32		MIDI_INSTRUMENT_OBOE       .text $00, $31, $18, $8F, $05, $01, $00, $32, $01, $73, $08, $00
>391a6d	01 73 08 00
>391a71	00 a1 0a 8c 37 01 01 24		MIDI_INSTRUMENT_ENGLHORN   .text $00, $A1, $0A, $8C, $37, $01, $01, $24, $04, $77, $0A, $00
>391a79	04 77 0a 00
>391a7d	00 31 04 a8 67 0b 00 75		MIDI_INSTRUMENT_BASSOON    .text $00, $31, $04, $A8, $67, $0B, $00, $75, $00, $51, $19, $00
>391a85	00 51 19 00
>391a89	00 a2 1f 77 26 01 01 21		MIDI_INSTRUMENT_CLARINET   .text $00, $A2, $1F, $77, $26, $01, $01, $21, $01, $74, $09, $00
>391a91	01 74 09 00
>391a95	00 e1 07 b8 94 01 01 21		MIDI_INSTRUMENT_PICCOLO    .text $00, $E1, $07, $B8, $94, $01, $01, $21, $01, $63, $28, $00
>391a9d	01 63 28 00
>391aa1	00 a1 93 87 59 01 00 e1		MIDI_INSTRUMENT_FLUTE1     .text $00, $A1, $93, $87, $59, $01, $00, $E1, $00, $65, $0A, $00
>391aa9	00 65 0a 00
>391aad	00 22 10 9f 38 01 00 61		MIDI_INSTRUMENT_RECORDER   .text $00, $22, $10, $9F, $38, $01, $00, $61, $00, $67, $29, $00
>391ab5	00 67 29 00
>391ab9	00 e2 0d 88 9a 01 01 21		MIDI_INSTRUMENT_PANFLUTE   .text $00, $E2, $0D, $88, $9A, $01, $01, $21, $00, $67, $09, $00
>391ac1	00 67 09 00
>391ac5	00 a2 10 98 94 0f 00 21		MIDI_INSTRUMENT_BOTTLEB    .text $00, $A2, $10, $98, $94, $0F, $00, $21, $01, $6A, $28, $00
>391acd	01 6a 28 00
>391ad1	00 f1 1c 86 26 0f 00 f1		MIDI_INSTRUMENT_SHAKU      .text $00, $F1, $1C, $86, $26, $0F, $00, $F1, $00, $55, $27, $00
>391ad9	00 55 27 00
>391add	00 e1 3f 9f 09 00 00 e1		MIDI_INSTRUMENT_WHISTLE    .text $00, $E1, $3F, $9F, $09, $00, $00, $E1, $00, $6F, $08, $00
>391ae5	00 6f 08 00
>391ae9	00 e2 3b f7 19 01 00 21		MIDI_INSTRUMENT_OCARINA    .text $00, $E2, $3B, $F7, $19, $01, $00, $21, $00, $7A, $07, $00
>391af1	00 7a 07 00
>391af5	00 22 1e 92 0c 0f 00 61		MIDI_INSTRUMENT_SQUARWAV   .text $00, $22, $1E, $92, $0C, $0F, $00, $61, $06, $A2, $0D, $00
>391afd	06 a2 0d 00
>391b01	00 21 15 f4 22 0f 01 21		MIDI_INSTRUMENT_SAWWAV     .text $00, $21, $15, $F4, $22, $0F, $01, $21, $00, $A3, $5F, $00
>391b09	00 a3 5f 00
>391b0d	00 f2 20 47 66 03 01 f1		MIDI_INSTRUMENT_SYNCALLI   .text $00, $F2, $20, $47, $66, $03, $01, $F1, $00, $42, $27, $00
>391b15	00 42 27 00
>391b19	00 61 19 88 28 0f 00 61		MIDI_INSTRUMENT_CHIFLEAD   .text $00, $61, $19, $88, $28, $0F, $00, $61, $05, $B2, $49, $00
>391b21	05 b2 49 00
>391b25	00 21 16 82 1b 01 00 23		MIDI_INSTRUMENT_CHARANG    .text $00, $21, $16, $82, $1B, $01, $00, $23, $00, $B2, $79, $01
>391b2d	00 b2 79 01
>391b31	00 21 00 ca 93 01 00 22		MIDI_INSTRUMENT_SOLOVOX    .text $00, $21, $00, $CA, $93, $01, $00, $22, $00, $7A, $1A, $00
>391b39	00 7a 1a 00
>391b3d	00 23 00 92 c9 08 01 22		MIDI_INSTRUMENT_FIFTHSAW   .text $00, $23, $00, $92, $C9, $08, $01, $22, $00, $82, $28, $01
>391b45	00 82 28 01
>391b49	00 21 1d f3 7b 0f 00 22		MIDI_INSTRUMENT_BASSLEAD   .text $00, $21, $1D, $F3, $7B, $0F, $00, $22, $02, $C3, $5F, $00
>391b51	02 c3 5f 00
>391b55	00 e1 00 81 25 00 01 a6		MIDI_INSTRUMENT_FANTASIA   .text $00, $E1, $00, $81, $25, $00, $01, $A6, $86, $C4, $95, $01
>391b5d	86 c4 95 01
>391b61	00 21 27 31 01 0f 00 21		MIDI_INSTRUMENT_WARMPAD    .text $00, $21, $27, $31, $01, $0F, $00, $21, $00, $44, $15, $00
>391b69	00 44 15 00
>391b6d	00 60 14 83 35 0d 02 61		MIDI_INSTRUMENT_POLYSYN    .text $00, $60, $14, $83, $35, $0D, $02, $61, $00, $D1, $06, $00
>391b75	00 d1 06 00
>391b79	00 e1 5c d3 01 01 01 62		MIDI_INSTRUMENT_SPACEVOX   .text $00, $E1, $5C, $D3, $01, $01, $01, $62, $00, $82, $37, $00
>391b81	00 82 37 00
>391b85	00 28 38 34 86 01 02 21		MIDI_INSTRUMENT_BOWEDGLS   .text $00, $28, $38, $34, $86, $01, $02, $21, $00, $41, $35, $00
>391b8d	00 41 35 00
>391b91	00 24 12 52 f3 05 01 23		MIDI_INSTRUMENT_METALPAD   .text $00, $24, $12, $52, $F3, $05, $01, $23, $02, $32, $F5, $01
>391b99	02 32 f5 01
>391b9d	00 61 1d 62 a6 0b 00 a1		MIDI_INSTRUMENT_HALOPAD    .text $00, $61, $1D, $62, $A6, $0B, $00, $A1, $00, $61, $26, $00
>391ba5	00 61 26 00
>391ba9	00 22 0f 22 d5 0b 01 21		MIDI_INSTRUMENT_SWEEPPAD   .text $00, $22, $0F, $22, $D5, $0B, $01, $21, $84, $3F, $05, $01
>391bb1	84 3f 05 01
>391bb5	00 e3 1f f9 24 01 00 31		MIDI_INSTRUMENT_ICERAIN    .text $00, $E3, $1F, $F9, $24, $01, $00, $31, $01, $D1, $F6, $00
>391bbd	01 d1 f6 00
>391bc1	00 63 00 41 55 06 01 a2		MIDI_INSTRUMENT_SOUNDTRK   .text $00, $63, $00, $41, $55, $06, $01, $A2, $00, $41, $05, $01
>391bc9	00 41 05 01
>391bcd	00 c7 25 a7 65 01 01 c1		MIDI_INSTRUMENT_CRYSTAL    .text $00, $C7, $25, $A7, $65, $01, $01, $C1, $05, $F3, $E4, $00
>391bd5	05 f3 e4 00
>391bd9	00 e3 19 f7 b7 01 01 61		MIDI_INSTRUMENT_ATMOSPH    .text $00, $E3, $19, $F7, $B7, $01, $01, $61, $00, $92, $F5, $01
>391be1	00 92 f5 01
>391be5	00 66 9b a8 44 0f 00 41		MIDI_INSTRUMENT_BRIGHT     .text $00, $66, $9B, $A8, $44, $0F, $00, $41, $04, $F2, $E4, $01
>391bed	04 f2 e4 01
>391bf1	00 61 20 22 75 0d 00 61		MIDI_INSTRUMENT_GOBLIN     .text $00, $61, $20, $22, $75, $0D, $00, $61, $00, $45, $25, $00
>391bf9	00 45 25 00
>391bfd	00 e1 21 f6 84 0f 00 e1		MIDI_INSTRUMENT_ECHODROP   .text $00, $E1, $21, $F6, $84, $0F, $00, $E1, $01, $A3, $36, $00
>391c05	01 a3 36 00
>391c09	00 e2 14 73 64 0b 01 e1		MIDI_INSTRUMENT_STARTHEM   .text $00, $E2, $14, $73, $64, $0B, $01, $E1, $01, $98, $05, $01
>391c11	01 98 05 01
>391c15	00 21 0b 72 34 09 00 24		MIDI_INSTRUMENT_SITAR      .text $00, $21, $0B, $72, $34, $09, $00, $24, $02, $A3, $F6, $01
>391c1d	02 a3 f6 01
>391c21	00 21 16 f4 53 0d 00 04		MIDI_INSTRUMENT_BANJO      .text $00, $21, $16, $F4, $53, $0D, $00, $04, $00, $F6, $F8, $00
>391c29	00 f6 f8 00
>391c2d	00 21 18 da 02 0d 00 35		MIDI_INSTRUMENT_SHAMISEN   .text $00, $21, $18, $DA, $02, $0D, $00, $35, $00, $F3, $F5, $00
>391c35	00 f3 f5 00
>391c39	00 25 0f fa 63 09 00 02		MIDI_INSTRUMENT_KOTO       .text $00, $25, $0F, $FA, $63, $09, $00, $02, $00, $94, $E5, $01
>391c41	00 94 e5 01
>391c45	00 32 07 f9 96 01 00 11		MIDI_INSTRUMENT_KALIMBA    .text $00, $32, $07, $F9, $96, $01, $00, $11, $00, $84, $44, $00
>391c4d	00 84 44 00
>391c51	00 20 0e 97 18 09 02 25		MIDI_INSTRUMENT_BAGPIPE    .text $00, $20, $0E, $97, $18, $09, $02, $25, $03, $83, $18, $01
>391c59	03 83 18 01
>391c5d	00 61 18 f6 29 01 00 62		MIDI_INSTRUMENT_FIDDLE     .text $00, $61, $18, $F6, $29, $01, $00, $62, $01, $78, $08, $01
>391c65	01 78 08 01
>391c69	00 e6 21 76 19 0b 00 61		MIDI_INSTRUMENT_SHANNAI    .text $00, $E6, $21, $76, $19, $0B, $00, $61, $03, $8E, $08, $01
>391c71	03 8e 08 01
>391c75	00 27 23 f0 d4 01 00 05		MIDI_INSTRUMENT_TINKLBEL   .text $00, $27, $23, $F0, $D4, $01, $00, $05, $09, $F2, $46, $00
>391c7d	09 f2 46 00
>391c81	00 1c 0c f9 31 0f 01 15		MIDI_INSTRUMENT_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>391c89	00 96 e8 01
>391c8d	00 02 00 75 16 06 02 01		MIDI_INSTRUMENT_STEELDRM   .text $00, $02, $00, $75, $16, $06, $02, $01, $00, $F6, $F6, $01
>391c95	00 f6 f6 01
>391c99	00 25 1b fa f2 01 00 12		MIDI_INSTRUMENT_WOODBLOK   .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>391ca1	00 f6 9a 00
>391ca5	00 02 1d f5 93 01 00 00		MIDI_INSTRUMENT_TAIKO      .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>391cad	00 c6 45 00
>391cb1	00 11 15 f5 32 05 00 10		MIDI_INSTRUMENT_MELOTOM    .text $00, $11, $15, $F5, $32, $05, $00, $10, $00, $F4, $B4, $00
>391cb9	00 f4 b4 00
>391cbd	00 22 06 fa 99 09 00 01		MIDI_INSTRUMENT_SYNDRUM    .text $00, $22, $06, $FA, $99, $09, $00, $01, $00, $D5, $25, $00
>391cc5	00 d5 25 00
>391cc9	00 2e 00 ff 00 0f 02 0e		MIDI_INSTRUMENT_REVRSCYM   .text $00, $2E, $00, $FF, $00, $0F, $02, $0E, $0E, $21, $2D, $00
>391cd1	0e 21 2d 00
>391cd5	00 30 0b 56 e4 01 01 17		MIDI_INSTRUMENT_FRETNOIS   .text $00, $30, $0B, $56, $E4, $01, $01, $17, $00, $55, $87, $02
>391cdd	00 55 87 02
>391ce1	00 24 00 ff 03 0d 00 05		MIDI_INSTRUMENT_BRTHNOIS   .text $00, $24, $00, $FF, $03, $0D, $00, $05, $08, $98, $87, $01
>391ce9	08 98 87 01
>391ced	00 0e 00 f0 00 0f 02 0a		MIDI_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F0, $00, $0F, $02, $0A, $04, $17, $04, $03
>391cf5	04 17 04 03
>391cf9	00 20 08 f6 f7 01 00 0e		MIDI_INSTRUMENT_BIRDS      .text $00, $20, $08, $F6, $F7, $01, $00, $0E, $05, $77, $F9, $02
>391d01	05 77 f9 02
>391d05	00 20 14 f1 08 01 00 2e		MIDI_INSTRUMENT_TELEPHON   .text $00, $20, $14, $F1, $08, $01, $00, $2E, $02, $F4, $08, $00
>391d0d	02 f4 08 00
>391d11	00 20 04 f2 00 03 01 23		MIDI_INSTRUMENT_HELICOPT   .text $00, $20, $04, $F2, $00, $03, $01, $23, $00, $36, $05, $01
>391d19	00 36 05 01
>391d1d	00 2e 00 ff 02 0f 00 2a		MIDI_INSTRUMENT_APPLAUSE   .text $00, $2E, $00, $FF, $02, $0F, $00, $2A, $05, $32, $55, $03
>391d25	05 32 55 03
>391d29	00 20 00 a1 ef 0f 00 10		MIDI_INSTRUMENT_GUNSHOT    .text $00, $20, $00, $A1, $EF, $0F, $00, $10, $00, $F3, $DF, $00
>391d31	00 f3 df 00
>391d35	35 17 39 00 41 17 39 00		midiInstruments .dword MIDI_INSTRUMENT_PIANO1,   MIDI_INSTRUMENT_PIANO2,   MIDI_INSTRUMENT_PIANO3,   MIDI_INSTRUMENT_HONKTONK, MIDI_INSTRUMENT_EP1,      MIDI_INSTRUMENT_EP2
>391d3d	4d 17 39 00 59 17 39 00 65 17 39 00 71 17 39 00
>391d4d	7d 17 39 00 89 17 39 00		              	.dword MIDI_INSTRUMENT_HARPSIC,  MIDI_INSTRUMENT_CLAVIC,   MIDI_INSTRUMENT_CELESTA,  MIDI_INSTRUMENT_GLOCK,    MIDI_INSTRUMENT_MUSICBOX, MIDI_INSTRUMENT_VIBES
>391d55	95 17 39 00 a1 17 39 00 ad 17 39 00 b9 17 39 00
>391d65	c5 17 39 00 d1 17 39 00		              	.dword MIDI_INSTRUMENT_MARIMBA,  MIDI_INSTRUMENT_XYLO,     MIDI_INSTRUMENT_TUBEBELL, MIDI_INSTRUMENT_SANTUR,   MIDI_INSTRUMENT_ORGAN1,   MIDI_INSTRUMENT_ORGAN2
>391d6d	dd 17 39 00 e9 17 39 00 f5 17 39 00 01 18 39 00
>391d7d	0d 18 39 00 19 18 39 00		              	.dword MIDI_INSTRUMENT_ORGAN3,   MIDI_INSTRUMENT_PIPEORG,  MIDI_INSTRUMENT_REEDORG,  MIDI_INSTRUMENT_ACORDIAN, MIDI_INSTRUMENT_HARMONIC, MIDI_INSTRUMENT_BANDNEON
>391d85	25 18 39 00 31 18 39 00 3d 18 39 00 49 18 39 00
>391d95	55 18 39 00 61 18 39 00		              	.dword MIDI_INSTRUMENT_NYLONGT,  MIDI_INSTRUMENT_STEELGT,  MIDI_INSTRUMENT_JAZZGT,   MIDI_INSTRUMENT_CLEANGT,  MIDI_INSTRUMENT_MUTEGT,   MIDI_INSTRUMENT_OVERDGT
>391d9d	6d 18 39 00 79 18 39 00 85 18 39 00 91 18 39 00
>391dad	9d 18 39 00 a9 18 39 00		              	.dword MIDI_INSTRUMENT_DISTGT,   MIDI_INSTRUMENT_GTHARMS,  MIDI_INSTRUMENT_ACOUBASS, MIDI_INSTRUMENT_FINGBASS, MIDI_INSTRUMENT_PICKBASS, MIDI_INSTRUMENT_FRETLESS
>391db5	b5 18 39 00 c1 18 39 00 cd 18 39 00 d9 18 39 00
>391dc5	e5 18 39 00 f1 18 39 00		              	.dword MIDI_INSTRUMENT_SLAPBAS1, MIDI_INSTRUMENT_SLAPBAS2, MIDI_INSTRUMENT_SYNBASS1, MIDI_INSTRUMENT_SYNBASS2, MIDI_INSTRUMENT_VIOLIN,   MIDI_INSTRUMENT_VIOLA
>391dcd	fd 18 39 00 09 19 39 00 15 19 39 00 21 19 39 00
>391ddd	2d 19 39 00 39 19 39 00		              	.dword MIDI_INSTRUMENT_CELLO,    MIDI_INSTRUMENT_CONTRAB,  MIDI_INSTRUMENT_TREMSTR,  MIDI_INSTRUMENT_PIZZ,     MIDI_INSTRUMENT_HARP,     MIDI_INSTRUMENT_TIMPANI
>391de5	45 19 39 00 51 19 39 00 5d 19 39 00 69 19 39 00
>391df5	75 19 39 00 81 19 39 00		              	.dword MIDI_INSTRUMENT_STRINGS,  MIDI_INSTRUMENT_SLOWSTR,  MIDI_INSTRUMENT_SYNSTR1,  MIDI_INSTRUMENT_SYNSTR2,  MIDI_INSTRUMENT_CHOIR,    MIDI_INSTRUMENT_OOHS
>391dfd	8d 19 39 00 99 19 39 00 a5 19 39 00 b1 19 39 00
>391e0d	bd 19 39 00 c9 19 39 00		              	.dword MIDI_INSTRUMENT_SYNVOX,   MIDI_INSTRUMENT_ORCHIT,   MIDI_INSTRUMENT_TRUMPET,  MIDI_INSTRUMENT_TROMBONE, MIDI_INSTRUMENT_TUBA,     MIDI_INSTRUMENT_MUTETRP
>391e15	d5 19 39 00 e1 19 39 00 ed 19 39 00 f9 19 39 00
>391e25	05 1a 39 00 11 1a 39 00		              	.dword MIDI_INSTRUMENT_FRHORN,   MIDI_INSTRUMENT_BRASS1,   MIDI_INSTRUMENT_SYNBRAS1, MIDI_INSTRUMENT_SYNBRAS2, MIDI_INSTRUMENT_SOPSAX,   MIDI_INSTRUMENT_ALTOSAX
>391e2d	1d 1a 39 00 29 1a 39 00 35 1a 39 00 41 1a 39 00
>391e3d	4d 1a 39 00 59 1a 39 00		              	.dword MIDI_INSTRUMENT_TENSAX,   MIDI_INSTRUMENT_BARISAX,  MIDI_INSTRUMENT_OBOE,     MIDI_INSTRUMENT_ENGLHORN, MIDI_INSTRUMENT_BASSOON,  MIDI_INSTRUMENT_CLARINET
>391e45	65 1a 39 00 71 1a 39 00 7d 1a 39 00 89 1a 39 00
>391e55	95 1a 39 00 a1 1a 39 00		              	.dword MIDI_INSTRUMENT_PICCOLO,  MIDI_INSTRUMENT_FLUTE1,   MIDI_INSTRUMENT_RECORDER, MIDI_INSTRUMENT_PANFLUTE, MIDI_INSTRUMENT_BOTTLEB,  MIDI_INSTRUMENT_SHAKU
>391e5d	ad 1a 39 00 b9 1a 39 00 c5 1a 39 00 d1 1a 39 00
>391e6d	dd 1a 39 00 e9 1a 39 00		              	.dword MIDI_INSTRUMENT_WHISTLE,  MIDI_INSTRUMENT_OCARINA,  MIDI_INSTRUMENT_SQUARWAV, MIDI_INSTRUMENT_SAWWAV,   MIDI_INSTRUMENT_SYNCALLI, MIDI_INSTRUMENT_CHIFLEAD
>391e75	f5 1a 39 00 01 1b 39 00 0d 1b 39 00 19 1b 39 00
>391e85	25 1b 39 00 31 1b 39 00		              	.dword MIDI_INSTRUMENT_CHARANG,  MIDI_INSTRUMENT_SOLOVOX,  MIDI_INSTRUMENT_FIFTHSAW, MIDI_INSTRUMENT_BASSLEAD, MIDI_INSTRUMENT_FANTASIA, MIDI_INSTRUMENT_WARMPAD
>391e8d	3d 1b 39 00 49 1b 39 00 55 1b 39 00 61 1b 39 00
>391e9d	6d 1b 39 00 79 1b 39 00		              	.dword MIDI_INSTRUMENT_POLYSYN,  MIDI_INSTRUMENT_SPACEVOX, MIDI_INSTRUMENT_BOWEDGLS, MIDI_INSTRUMENT_METALPAD, MIDI_INSTRUMENT_HALOPAD,  MIDI_INSTRUMENT_SWEEPPAD
>391ea5	85 1b 39 00 91 1b 39 00 9d 1b 39 00 a9 1b 39 00
>391eb5	b5 1b 39 00 c1 1b 39 00		              	.dword MIDI_INSTRUMENT_ICERAIN,  MIDI_INSTRUMENT_SOUNDTRK, MIDI_INSTRUMENT_CRYSTAL,  MIDI_INSTRUMENT_ATMOSPH,  MIDI_INSTRUMENT_BRIGHT,   MIDI_INSTRUMENT_GOBLIN
>391ebd	cd 1b 39 00 d9 1b 39 00 e5 1b 39 00 f1 1b 39 00
>391ecd	fd 1b 39 00 09 1c 39 00		              	.dword MIDI_INSTRUMENT_ECHODROP, MIDI_INSTRUMENT_STARTHEM, MIDI_INSTRUMENT_SITAR,    MIDI_INSTRUMENT_BANJO,    MIDI_INSTRUMENT_SHAMISEN, MIDI_INSTRUMENT_KOTO
>391ed5	15 1c 39 00 21 1c 39 00 2d 1c 39 00 39 1c 39 00
>391ee5	45 1c 39 00 51 1c 39 00		              	.dword MIDI_INSTRUMENT_KALIMBA,  MIDI_INSTRUMENT_BAGPIPE,  MIDI_INSTRUMENT_FIDDLE,   MIDI_INSTRUMENT_SHANNAI,  MIDI_INSTRUMENT_TINKLBEL, MIDI_INSTRUMENT_AGOGO
>391eed	5d 1c 39 00 69 1c 39 00 75 1c 39 00 81 1c 39 00
>391efd	8d 1c 39 00 99 1c 39 00		              	.dword MIDI_INSTRUMENT_STEELDRM, MIDI_INSTRUMENT_WOODBLOK, MIDI_INSTRUMENT_TAIKO,    MIDI_INSTRUMENT_MELOTOM,  MIDI_INSTRUMENT_SYNDRUM,  MIDI_INSTRUMENT_REVRSCYM
>391f05	a5 1c 39 00 b1 1c 39 00 bd 1c 39 00 c9 1c 39 00
>391f15	d5 1c 39 00 e1 1c 39 00		              	.dword MIDI_INSTRUMENT_FRETNOIS, MIDI_INSTRUMENT_BRTHNOIS, MIDI_INSTRUMENT_SEASHORE, MIDI_INSTRUMENT_BIRDS,    MIDI_INSTRUMENT_TELEPHON, MIDI_INSTRUMENT_HELICOPT
>391f1d	ed 1c 39 00 f9 1c 39 00 05 1d 39 00 11 1d 39 00
>391f2d	1d 1d 39 00 29 1d 39 00		              	.dword MIDI_INSTRUMENT_APPLAUSE, MIDI_INSTRUMENT_GUNSHOT

;******  Return to file: src\OPL2_Library.asm


;******  Processing file: src\OPL2_Midi_Instruments_Win31.asm

>391f35	00 01 8f f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO1     .text $00, $01, $8F, $F2, $F4, $38, $00, $01, $0D, $F2, $F7, $00
>391f3d	0d f2 f7 00
>391f41	00 01 4b f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO2     .text $00, $01, $4B, $F2, $F4, $38, $00, $01, $07, $F2, $F7, $00
>391f49	07 f2 f7 00
>391f4d	00 01 49 f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO3     .text $00, $01, $49, $F2, $F4, $38, $00, $01, $07, $F2, $F6, $00
>391f55	07 f2 f6 00
>391f59	00 81 12 f2 f7 00 00 41		MIDIW31_INSTRUMENT_HONKTONK   .text $00, $81, $12, $F2, $F7, $00, $00, $41, $07, $F2, $F7, $00
>391f61	07 f2 f7 00
>391f65	00 01 57 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP1        .text $00, $01, $57, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>391f6d	07 f2 f7 00
>391f71	00 01 93 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP2        .text $00, $01, $93, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>391f79	07 f2 f7 00
>391f7d	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HARPSIC    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>391f85	00 00 00 00
>391f89	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLAVIC     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>391f91	00 00 00 00
>391f95	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELESTA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>391f9d	00 00 00 00
>391fa1	00 07 97 f3 f2 32 00 11		MIDIW31_INSTRUMENT_GLOCK      .text $00, $07, $97, $F3, $F2, $32, $00, $11, $87, $F2, $F1, $00
>391fa9	87 f2 f1 00
>391fad	00 17 21 54 f4 32 00 01		MIDIW31_INSTRUMENT_MUSICBOX   .text $00, $17, $21, $54, $F4, $32, $00, $01, $07, $F4, $F4, $00
>391fb5	07 f4 f4 00
>391fb9	00 98 62 f3 f6 30 00 81		MIDIW31_INSTRUMENT_VIBES      .text $00, $98, $62, $F3, $F6, $30, $00, $81, $07, $F2, $F6, $00
>391fc1	07 f2 f6 00
>391fc5	00 18 23 f6 f6 00 00 01		MIDIW31_INSTRUMENT_MARIMBA    .text $00, $18, $23, $F6, $F6, $00, $00, $01, $07, $E7, $F7, $00
>391fcd	07 e7 f7 00
>391fd1	00 15 91 f6 f6 00 00 01		MIDIW31_INSTRUMENT_XYLO       .text $00, $15, $91, $F6, $F6, $00, $00, $01, $07, $F6, $F6, $00
>391fd9	07 f6 f6 00
>391fdd	00 45 59 d3 f3 00 00 81		MIDIW31_INSTRUMENT_TUBEBELL   .text $00, $45, $59, $D3, $F3, $00, $00, $81, $87, $A3, $F3, $00
>391fe5	87 a3 f3 00
>391fe9	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SANTUR     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>391ff1	00 00 00 00
>391ff5	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>391ffd	00 00 00 00
>392001	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN2     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392009	00 00 00 00
>39200d	00 70 44 aa 18 34 00 b1		MIDIW31_INSTRUMENT_ORGAN3     .text $00, $70, $44, $AA, $18, $34, $00, $B1, $07, $8A, $08, $00
>392015	07 8a 08 00
>392019	00 23 93 97 23 34 01 b1		MIDIW31_INSTRUMENT_PIPEORG    .text $00, $23, $93, $97, $23, $34, $01, $B1, $07, $55, $14, $00
>392021	07 55 14 00
>392025	00 61 13 97 04 30 01 b1		MIDIW31_INSTRUMENT_REEDORG    .text $00, $61, $13, $97, $04, $30, $01, $B1, $87, $55, $04, $00
>39202d	87 55 04 00
>392031	00 24 48 98 2a 30 01 b1		MIDIW31_INSTRUMENT_ACORDIAN   .text $00, $24, $48, $98, $2A, $30, $01, $B1, $07, $46, $1A, $00
>392039	07 46 1a 00
>39203d	00 61 13 91 06 00 01 21		MIDIW31_INSTRUMENT_HARMONIC   .text $00, $61, $13, $91, $06, $00, $01, $21, $07, $61, $07, $00
>392045	07 61 07 00
>392049	00 21 13 71 06 00 00 a1		MIDIW31_INSTRUMENT_BANDNEON   .text $00, $21, $13, $71, $06, $00, $00, $A1, $90, $61, $07, $00
>392051	90 61 07 00
>392055	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_NYLONGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39205d	00 00 00 00
>392061	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392069	00 00 00 00
>39206d	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_JAZZGT     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392075	00 00 00 00
>392079	00 03 87 f6 22 36 01 21		MIDIW31_INSTRUMENT_CLEANGT    .text $00, $03, $87, $F6, $22, $36, $01, $21, $87, $F3, $F8, $00
>392081	87 f3 f8 00
>392085	00 03 47 f9 54 30 00 21		MIDIW31_INSTRUMENT_MUTEGT     .text $00, $03, $47, $F9, $54, $30, $00, $21, $07, $F6, $3A, $00
>39208d	07 f6 3a 00
>392091	00 23 4a 91 41 38 01 21		MIDIW31_INSTRUMENT_OVERDGT    .text $00, $23, $4A, $91, $41, $38, $01, $21, $0C, $84, $19, $00
>392099	0c 84 19 00
>39209d	00 23 4a 95 19 32 01 21		MIDIW31_INSTRUMENT_DISTGT     .text $00, $23, $4A, $95, $19, $32, $01, $21, $07, $94, $19, $00
>3920a5	07 94 19 00
>3920a9	00 09 a1 20 4f 00 00 84		MIDIW31_INSTRUMENT_GTHARMS    .text $00, $09, $A1, $20, $4F, $00, $00, $84, $87, $D1, $F8, $00
>3920b1	87 d1 f8 00
>3920b5	00 21 1e 94 06 00 00 a2		MIDIW31_INSTRUMENT_ACOUBASS   .text $00, $21, $1E, $94, $06, $00, $00, $A2, $07, $C3, $A6, $00
>3920bd	07 c3 a6 00
>3920c1	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FINGBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3920c9	00 00 00 00
>3920cd	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_PICKBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3920d5	00 00 00 00
>3920d9	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRETLESS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3920e1	00 00 00 00
>3920e5	00 01 8b a1 9a 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS1   .text $00, $01, $8B, $A1, $9A, $38, $00, $21, $47, $F2, $DF, $00
>3920ed	47 f2 df 00
>3920f1	00 21 8b a2 16 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS2   .text $00, $21, $8B, $A2, $16, $38, $00, $21, $0F, $A1, $DF, $00
>3920f9	0f a1 df 00
>3920fd	00 31 8b f4 e8 3a 00 31		MIDIW31_INSTRUMENT_SYNBASS1   .text $00, $31, $8B, $F4, $E8, $3A, $00, $31, $07, $F1, $78, $00
>392105	07 f1 78 00
>392109	00 31 12 f1 28 30 00 31		MIDIW31_INSTRUMENT_SYNBASS2   .text $00, $31, $12, $F1, $28, $30, $00, $31, $07, $F1, $18, $00
>392111	07 f1 18 00
>392115	00 31 15 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLIN     .text $00, $31, $15, $DD, $13, $00, $01, $21, $07, $56, $26, $00
>39211d	07 56 26 00
>392121	00 31 16 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLA      .text $00, $31, $16, $DD, $13, $00, $01, $21, $07, $66, $06, $00
>392129	07 66 06 00
>39212d	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELLO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392135	00 00 00 00
>392139	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CONTRAB    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392141	00 00 00 00
>392145	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TREMSTR    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39214d	00 00 00 00
>392151	00 02 1a f5 75 30 01 01		MIDIW31_INSTRUMENT_PIZZ       .text $00, $02, $1A, $F5, $75, $30, $01, $01, $87, $85, $35, $00
>392159	87 85 35 00
>39215d	00 02 1d f5 75 30 01 01		MIDIW31_INSTRUMENT_HARP       .text $00, $02, $1D, $F5, $75, $30, $01, $01, $87, $F3, $F4, $00
>392165	87 f3 f4 00
>392169	00 10 41 f5 05 32 01 11		MIDIW31_INSTRUMENT_TIMPANI    .text $00, $10, $41, $F5, $05, $32, $01, $11, $07, $F2, $C3, $00
>392171	07 f2 c3 00
>392175	00 21 9b b1 25 3c 01 a2		MIDIW31_INSTRUMENT_STRINGS    .text $00, $21, $9B, $B1, $25, $3C, $01, $A2, $08, $72, $08, $00
>39217d	08 72 08 00
>392181	00 a1 98 7f 03 00 01 21		MIDIW31_INSTRUMENT_SLOWSTR    .text $00, $A1, $98, $7F, $03, $00, $01, $21, $07, $3F, $07, $01
>392189	07 3f 07 01
>39218d	00 a1 93 c1 12 00 00 61		MIDIW31_INSTRUMENT_SYNSTR1    .text $00, $A1, $93, $C1, $12, $00, $00, $61, $07, $4F, $05, $00
>392195	07 4f 05 00
>392199	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNSTR2    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3921a1	00 00 00 00
>3921a5	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CHOIR      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3921ad	00 00 00 00
>3921b1	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OOHS       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3921b9	00 00 00 00
>3921bd	00 71 57 54 05 3c 00 72		MIDIW31_INSTRUMENT_SYNVOX     .text $00, $71, $57, $54, $05, $3C, $00, $72, $07, $7A, $05, $00
>3921c5	07 7a 05 00
>3921c9	00 90 00 54 63 38 00 41		MIDIW31_INSTRUMENT_ORCHIT     .text $00, $90, $00, $54, $63, $38, $00, $41, $07, $A5, $45, $00
>3921d1	07 a5 45 00
>3921d5	00 21 92 85 17 3c 00 21		MIDIW31_INSTRUMENT_TRUMPET    .text $00, $21, $92, $85, $17, $3C, $00, $21, $08, $8F, $09, $00
>3921dd	08 8f 09 00
>3921e1	00 21 94 75 17 32 00 21		MIDIW31_INSTRUMENT_TROMBONE   .text $00, $21, $94, $75, $17, $32, $00, $21, $0C, $8F, $09, $00
>3921e9	0c 8f 09 00
>3921ed	00 21 94 76 15 00 00 61		MIDIW31_INSTRUMENT_TUBA       .text $00, $21, $94, $76, $15, $00, $00, $61, $07, $82, $37, $00
>3921f5	07 82 37 00
>3921f9	00 31 43 9e 17 00 01 21		MIDIW31_INSTRUMENT_MUTETRP    .text $00, $31, $43, $9E, $17, $00, $01, $21, $07, $62, $2C, $01
>392201	07 62 2c 01
>392205	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRHORN     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39220d	00 00 00 00
>392211	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BRASS1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392219	00 00 00 00
>39221d	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNBRAS1   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392225	00 00 00 00
>392229	00 21 4d 54 3c 38 00 21		MIDIW31_INSTRUMENT_SYNBRAS2   .text $00, $21, $4D, $54, $3C, $38, $00, $21, $07, $A6, $1C, $00
>392231	07 a6 1c 00
>392235	00 31 8f 93 02 38 01 61		MIDIW31_INSTRUMENT_SOPSAX     .text $00, $31, $8F, $93, $02, $38, $01, $61, $07, $72, $0B, $00
>39223d	07 72 0b 00
>392241	00 31 8e 93 03 38 01 61		MIDIW31_INSTRUMENT_ALTOSAX    .text $00, $31, $8E, $93, $03, $38, $01, $61, $07, $72, $09, $00
>392249	07 72 09 00
>39224d	00 31 91 93 03 30 01 61		MIDIW31_INSTRUMENT_TENSAX     .text $00, $31, $91, $93, $03, $30, $01, $61, $07, $82, $09, $00
>392255	07 82 09 00
>392259	00 31 8e 93 0f 00 01 61		MIDIW31_INSTRUMENT_BARISAX    .text $00, $31, $8E, $93, $0F, $00, $01, $61, $07, $72, $0F, $00
>392261	07 72 0f 00
>392265	00 21 4b aa 16 00 01 21		MIDIW31_INSTRUMENT_OBOE       .text $00, $21, $4B, $AA, $16, $00, $01, $21, $07, $8F, $0A, $00
>39226d	07 8f 0a 00
>392271	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ENGLHORN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392279	00 00 00 00
>39227d	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSOON    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392285	00 00 00 00
>392289	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLARINET   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392291	00 00 00 00
>392295	00 e1 1f 85 5f 30 00 e1		MIDIW31_INSTRUMENT_PICCOLO    .text $00, $E1, $1F, $85, $5F, $30, $00, $E1, $07, $65, $1A, $00
>39229d	07 65 1a 00
>3922a1	00 e1 46 88 5f 30 00 e1		MIDIW31_INSTRUMENT_FLUTE1     .text $00, $E1, $46, $88, $5F, $30, $00, $E1, $07, $65, $1A, $00
>3922a9	07 65 1a 00
>3922ad	00 a1 9c 75 1f 32 00 21		MIDIW31_INSTRUMENT_RECORDER   .text $00, $A1, $9C, $75, $1F, $32, $00, $21, $07, $75, $0A, $00
>3922b5	07 75 0a 00
>3922b9	00 31 8b 84 58 30 00 21		MIDIW31_INSTRUMENT_PANFLUTE   .text $00, $31, $8B, $84, $58, $30, $00, $21, $07, $65, $1A, $00
>3922c1	07 65 1a 00
>3922c5	00 e1 4c 66 56 00 00 a1		MIDIW31_INSTRUMENT_BOTTLEB    .text $00, $E1, $4C, $66, $56, $00, $00, $A1, $07, $65, $26, $00
>3922cd	07 65 26 00
>3922d1	00 62 cb 76 46 00 00 a1		MIDIW31_INSTRUMENT_SHAKU      .text $00, $62, $CB, $76, $46, $00, $00, $A1, $07, $55, $36, $00
>3922d9	07 55 36 00
>3922dd	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WHISTLE    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3922e5	00 00 00 00
>3922e9	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OCARINA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3922f1	00 00 00 00
>3922f5	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SQUARWAV   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3922fd	00 00 00 00
>392301	00 21 0e ff 0f 30 01 21		MIDIW31_INSTRUMENT_SAWWAV     .text $00, $21, $0E, $FF, $0F, $30, $01, $21, $07, $FF, $0F, $01
>392309	07 ff 0f 01
>39230d	00 22 46 86 55 30 00 21		MIDIW31_INSTRUMENT_SYNCALLI   .text $00, $22, $46, $86, $55, $30, $00, $21, $87, $64, $18, $00
>392315	87 64 18 00
>392319	00 21 45 66 12 30 00 a1		MIDIW31_INSTRUMENT_CHIFLEAD   .text $00, $21, $45, $66, $12, $30, $00, $A1, $07, $96, $0A, $00
>392321	07 96 0a 00
>392325	00 21 8b 92 2a 34 01 22		MIDIW31_INSTRUMENT_CHARANG    .text $00, $21, $8B, $92, $2A, $34, $01, $22, $07, $91, $2A, $00
>39232d	07 91 2a 00
>392331	00 a2 9e df 05 00 00 61		MIDIW31_INSTRUMENT_SOLOVOX    .text $00, $A2, $9E, $DF, $05, $00, $00, $61, $47, $6F, $07, $00
>392339	47 6f 07 00
>39233d	00 20 1a ef 01 00 00 60		MIDIW31_INSTRUMENT_FIFTHSAW   .text $00, $20, $1A, $EF, $01, $00, $00, $60, $07, $8F, $06, $02
>392345	07 8f 06 02
>392349	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSLEAD   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392351	00 00 00 00
>392355	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FANTASIA   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39235d	00 00 00 00
>392361	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WARMPAD    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392369	00 00 00 00
>39236d	00 61 17 91 34 3c 00 61		MIDIW31_INSTRUMENT_POLYSYN    .text $00, $61, $17, $91, $34, $3C, $00, $61, $07, $55, $16, $00
>392375	07 55 16 00
>392379	00 71 5d 54 01 30 00 72		MIDIW31_INSTRUMENT_SPACEVOX   .text $00, $71, $5D, $54, $01, $30, $00, $72, $07, $6A, $03, $00
>392381	07 6a 03 00
>392385	00 21 97 21 43 38 00 a2		MIDIW31_INSTRUMENT_BOWEDGLS   .text $00, $21, $97, $21, $43, $38, $00, $A2, $07, $42, $35, $00
>39238d	07 42 35 00
>392391	00 a1 1c a1 77 30 01 21		MIDIW31_INSTRUMENT_METALPAD   .text $00, $A1, $1C, $A1, $77, $30, $01, $21, $07, $31, $47, $01
>392399	07 31 47 01
>39239d	00 21 89 11 33 00 00 61		MIDIW31_INSTRUMENT_HALOPAD    .text $00, $21, $89, $11, $33, $00, $00, $61, $0A, $42, $25, $00
>3923a5	0a 42 25 00
>3923a9	00 a1 15 11 47 00 01 21		MIDIW31_INSTRUMENT_SWEEPPAD   .text $00, $A1, $15, $11, $47, $00, $01, $21, $07, $CF, $07, $00
>3923b1	07 cf 07 00
>3923b5	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ICERAIN    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3923bd	00 00 00 00
>3923c1	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SOUNDTRK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3923c9	00 00 00 00
>3923cd	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CRYSTAL    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3923d5	00 00 00 00
>3923d9	00 22 92 b1 81 3c 00 61		MIDIW31_INSTRUMENT_ATMOSPH    .text $00, $22, $92, $B1, $81, $3C, $00, $61, $8A, $F2, $26, $00
>3923e1	8a f2 26 00
>3923e5	00 41 4d f1 51 30 01 42		MIDIW31_INSTRUMENT_BRIGHT     .text $00, $41, $4D, $F1, $51, $30, $01, $42, $07, $F2, $F5, $00
>3923ed	07 f2 f5 00
>3923f1	00 61 94 11 51 36 01 a3		MIDIW31_INSTRUMENT_GOBLIN     .text $00, $61, $94, $11, $51, $36, $01, $A3, $87, $11, $13, $00
>3923f9	87 11 13 00
>3923fd	00 61 8c 11 31 3a 00 a1		MIDIW31_INSTRUMENT_ECHODROP   .text $00, $61, $8C, $11, $31, $3A, $00, $A1, $87, $1D, $03, $00
>392405	87 1d 03 00
>392409	00 a4 4c f3 73 00 01 61		MIDIW31_INSTRUMENT_STARTHEM   .text $00, $A4, $4C, $F3, $73, $00, $01, $61, $07, $81, $23, $00
>392411	07 81 23 00
>392415	00 02 85 d2 53 00 00 07		MIDIW31_INSTRUMENT_SITAR      .text $00, $02, $85, $D2, $53, $00, $00, $07, $0A, $F2, $F6, $01
>39241d	0a f2 f6 01
>392421	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BANJO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392429	00 00 00 00
>39242d	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SHAMISEN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392435	00 00 00 00
>392439	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_KOTO       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392441	00 00 00 00
>392445	00 04 4f fa 56 3c 00 01		MIDIW31_INSTRUMENT_KALIMBA    .text $00, $04, $4F, $FA, $56, $3C, $00, $01, $07, $C2, $05, $00
>39244d	07 c2 05 00
>392451	00 21 49 7c 20 36 00 22		MIDIW31_INSTRUMENT_BAGPIPE    .text $00, $21, $49, $7C, $20, $36, $00, $22, $07, $6F, $0C, $01
>392459	07 6f 0c 01
>39245d	00 31 85 dd 33 3a 01 21		MIDIW31_INSTRUMENT_FIDDLE     .text $00, $31, $85, $DD, $33, $3A, $01, $21, $07, $56, $16, $00
>392465	07 56 16 00
>392469	00 20 04 da 05 30 02 21		MIDIW31_INSTRUMENT_SHANNAI    .text $00, $20, $04, $DA, $05, $30, $02, $21, $88, $8F, $0B, $00
>392471	88 8f 0b 00
>392475	00 05 6a f1 e5 00 00 03		MIDIW31_INSTRUMENT_TINKLBEL   .text $00, $05, $6A, $F1, $E5, $00, $00, $03, $87, $C3, $E5, $00
>39247d	87 c3 e5 00
>392481	00 07 15 ec 26 00 00 02		MIDIW31_INSTRUMENT_AGOGO      .text $00, $07, $15, $EC, $26, $00, $00, $02, $07, $F8, $16, $00
>392489	07 f8 16 00
>39248d	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELDRM   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392495	00 00 00 00
>392499	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WOODBLOK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3924a1	00 00 00 00
>3924a5	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TAIKO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3924ad	00 00 00 00
>3924b1	00 11 41 f8 47 34 02 10		MIDIW31_INSTRUMENT_MELOTOM    .text $00, $11, $41, $F8, $47, $34, $02, $10, $0A, $F3, $03, $00
>3924b9	0a f3 03 00
>3924bd	00 01 8e f1 06 3e 02 10		MIDIW31_INSTRUMENT_SYNDRUM    .text $00, $01, $8E, $F1, $06, $3E, $02, $10, $07, $F3, $02, $00
>3924c5	07 f3 02 00
>3924c9	00 0e 00 1f 00 3e 00 c0		MIDIW31_INSTRUMENT_REVRSCYM   .text $00, $0E, $00, $1F, $00, $3E, $00, $C0, $07, $1F, $FF, $03
>3924d1	07 1f ff 03
>3924d5	00 06 80 f8 24 38 00 03		MIDIW31_INSTRUMENT_FRETNOIS   .text $00, $06, $80, $F8, $24, $38, $00, $03, $8F, $56, $84, $02
>3924dd	8f 56 84 02
>3924e1	00 0e 00 f8 00 00 00 d0		MIDIW31_INSTRUMENT_BRTHNOIS   .text $00, $0E, $00, $F8, $00, $00, $00, $D0, $0C, $34, $04, $03
>3924e9	0c 34 04 03
>3924ed	00 0e 00 f6 00 00 00 c0		MIDIW31_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F6, $00, $00, $00, $C0, $07, $1F, $02, $03
>3924f5	07 1f 02 03
>3924f9	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BIRDS      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392501	00 00 00 00
>392505	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TELEPHON   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39250d	00 00 00 00
>392511	00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HELICOPT   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392519	00 00 00 00
>39251d	00 26 00 ff 01 3e 00 e4		MIDIW31_INSTRUMENT_APPLAUSE   .text $00, $26, $00, $FF, $01, $3E, $00, $E4, $07, $12, $16, $01
>392525	07 12 16 01
>392529	00 00 00 f3 f0 3e 00 00		MIDIW31_INSTRUMENT_GUNSHOT    .text $00, $00, $00, $F3, $F0, $3E, $00, $00, $07, $F6, $C9, $02
>392531	07 f6 c9 02
>392535	35 1f 39 00 41 1f 39 00		midiInstrumentsw31 .dword MIDIW31_INSTRUMENT_PIANO1,   MIDIW31_INSTRUMENT_PIANO2,   MIDIW31_INSTRUMENT_PIANO3,   MIDIW31_INSTRUMENT_HONKTONK, MIDIW31_INSTRUMENT_EP1, MIDIW31_INSTRUMENT_EP2
>39253d	4d 1f 39 00 59 1f 39 00 65 1f 39 00 71 1f 39 00
>39254d	7d 1f 39 00 89 1f 39 00		                   .dword MIDIW31_INSTRUMENT_HARPSIC,  MIDIW31_INSTRUMENT_CLAVIC,   MIDIW31_INSTRUMENT_CELESTA,  MIDIW31_INSTRUMENT_GLOCK,    MIDIW31_INSTRUMENT_MUSICBOX, MIDIW31_INSTRUMENT_VIBES
>392555	95 1f 39 00 a1 1f 39 00 ad 1f 39 00 b9 1f 39 00
>392565	c5 1f 39 00 d1 1f 39 00			                 .dword MIDIW31_INSTRUMENT_MARIMBA,  MIDIW31_INSTRUMENT_XYLO,     MIDIW31_INSTRUMENT_TUBEBELL, MIDIW31_INSTRUMENT_SANTUR,   MIDIW31_INSTRUMENT_ORGAN1,   MIDIW31_INSTRUMENT_ORGAN2
>39256d	dd 1f 39 00 e9 1f 39 00 f5 1f 39 00 01 20 39 00
>39257d	0d 20 39 00 19 20 39 00			                 .dword MIDIW31_INSTRUMENT_ORGAN3,   MIDIW31_INSTRUMENT_PIPEORG,  MIDIW31_INSTRUMENT_REEDORG,  MIDIW31_INSTRUMENT_ACORDIAN, MIDIW31_INSTRUMENT_HARMONIC, MIDIW31_INSTRUMENT_BANDNEON
>392585	25 20 39 00 31 20 39 00 3d 20 39 00 49 20 39 00
>392595	55 20 39 00 61 20 39 00		                     .dword MIDIW31_INSTRUMENT_NYLONGT,  MIDIW31_INSTRUMENT_STEELGT,  MIDIW31_INSTRUMENT_JAZZGT,   MIDIW31_INSTRUMENT_CLEANGT,  MIDIW31_INSTRUMENT_MUTEGT,   MIDIW31_INSTRUMENT_OVERDGT
>39259d	6d 20 39 00 79 20 39 00 85 20 39 00 91 20 39 00
>3925ad	9d 20 39 00 a9 20 39 00			                 .dword MIDIW31_INSTRUMENT_DISTGT,   MIDIW31_INSTRUMENT_GTHARMS,  MIDIW31_INSTRUMENT_ACOUBASS, MIDIW31_INSTRUMENT_FINGBASS, MIDIW31_INSTRUMENT_PICKBASS, MIDIW31_INSTRUMENT_FRETLESS
>3925b5	b5 20 39 00 c1 20 39 00 cd 20 39 00 d9 20 39 00
>3925c5	e5 20 39 00 f1 20 39 00			                 .dword MIDIW31_INSTRUMENT_SLAPBAS1, MIDIW31_INSTRUMENT_SLAPBAS2, MIDIW31_INSTRUMENT_SYNBASS1, MIDIW31_INSTRUMENT_SYNBASS2, MIDIW31_INSTRUMENT_VIOLIN,   MIDIW31_INSTRUMENT_VIOLA
>3925cd	fd 20 39 00 09 21 39 00 15 21 39 00 21 21 39 00
>3925dd	2d 21 39 00 39 21 39 00			                 .dword MIDIW31_INSTRUMENT_CELLO,    MIDIW31_INSTRUMENT_CONTRAB,  MIDIW31_INSTRUMENT_TREMSTR,  MIDIW31_INSTRUMENT_PIZZ,     MIDIW31_INSTRUMENT_HARP,     MIDIW31_INSTRUMENT_TIMPANI
>3925e5	45 21 39 00 51 21 39 00 5d 21 39 00 69 21 39 00
>3925f5	75 21 39 00 81 21 39 00			                 .dword MIDIW31_INSTRUMENT_STRINGS,  MIDIW31_INSTRUMENT_SLOWSTR,  MIDIW31_INSTRUMENT_SYNSTR1,  MIDIW31_INSTRUMENT_SYNSTR2,  MIDIW31_INSTRUMENT_CHOIR,    MIDIW31_INSTRUMENT_OOHS
>3925fd	8d 21 39 00 99 21 39 00 a5 21 39 00 b1 21 39 00
>39260d	bd 21 39 00 c9 21 39 00			                 .dword MIDIW31_INSTRUMENT_SYNVOX,   MIDIW31_INSTRUMENT_ORCHIT,   MIDIW31_INSTRUMENT_TRUMPET,  MIDIW31_INSTRUMENT_TROMBONE, MIDIW31_INSTRUMENT_TUBA,     MIDIW31_INSTRUMENT_MUTETRP
>392615	d5 21 39 00 e1 21 39 00 ed 21 39 00 f9 21 39 00
>392625	05 22 39 00 11 22 39 00			                 .dword MIDIW31_INSTRUMENT_FRHORN,   MIDIW31_INSTRUMENT_BRASS1,   MIDIW31_INSTRUMENT_SYNBRAS1, MIDIW31_INSTRUMENT_SYNBRAS2, MIDIW31_INSTRUMENT_SOPSAX,   MIDIW31_INSTRUMENT_ALTOSAX
>39262d	1d 22 39 00 29 22 39 00 35 22 39 00 41 22 39 00
>39263d	4d 22 39 00 59 22 39 00			                 .dword MIDIW31_INSTRUMENT_TENSAX,   MIDIW31_INSTRUMENT_BARISAX,  MIDIW31_INSTRUMENT_OBOE,     MIDIW31_INSTRUMENT_ENGLHORN, MIDIW31_INSTRUMENT_BASSOON,  MIDIW31_INSTRUMENT_CLARINET
>392645	65 22 39 00 71 22 39 00 7d 22 39 00 89 22 39 00
>392655	95 22 39 00 a1 22 39 00			                 .dword MIDIW31_INSTRUMENT_PICCOLO,  MIDIW31_INSTRUMENT_FLUTE1,   MIDIW31_INSTRUMENT_RECORDER, MIDIW31_INSTRUMENT_PANFLUTE, MIDIW31_INSTRUMENT_BOTTLEB,  MIDIW31_INSTRUMENT_SHAKU
>39265d	ad 22 39 00 b9 22 39 00 c5 22 39 00 d1 22 39 00
>39266d	dd 22 39 00 e9 22 39 00			                 .dword MIDIW31_INSTRUMENT_WHISTLE,  MIDIW31_INSTRUMENT_OCARINA,  MIDIW31_INSTRUMENT_SQUARWAV, MIDIW31_INSTRUMENT_SAWWAV,   MIDIW31_INSTRUMENT_SYNCALLI, MIDIW31_INSTRUMENT_CHIFLEAD
>392675	f5 22 39 00 01 23 39 00 0d 23 39 00 19 23 39 00
>392685	25 23 39 00 31 23 39 00			                 .dword MIDIW31_INSTRUMENT_CHARANG,  MIDIW31_INSTRUMENT_SOLOVOX,  MIDIW31_INSTRUMENT_FIFTHSAW, MIDIW31_INSTRUMENT_BASSLEAD, MIDIW31_INSTRUMENT_FANTASIA, MIDIW31_INSTRUMENT_WARMPAD
>39268d	3d 23 39 00 49 23 39 00 55 23 39 00 61 23 39 00
>39269d	6d 23 39 00 79 23 39 00			                 .dword MIDIW31_INSTRUMENT_POLYSYN,  MIDIW31_INSTRUMENT_SPACEVOX, MIDIW31_INSTRUMENT_BOWEDGLS, MIDIW31_INSTRUMENT_METALPAD, MIDIW31_INSTRUMENT_HALOPAD,  MIDIW31_INSTRUMENT_SWEEPPAD
>3926a5	85 23 39 00 91 23 39 00 9d 23 39 00 a9 23 39 00
>3926b5	b5 23 39 00 c1 23 39 00			                 .dword MIDIW31_INSTRUMENT_ICERAIN,  MIDIW31_INSTRUMENT_SOUNDTRK, MIDIW31_INSTRUMENT_CRYSTAL,  MIDIW31_INSTRUMENT_ATMOSPH,  MIDIW31_INSTRUMENT_BRIGHT,   MIDIW31_INSTRUMENT_GOBLIN
>3926bd	cd 23 39 00 d9 23 39 00 e5 23 39 00 f1 23 39 00
>3926cd	fd 23 39 00 09 24 39 00			                 .dword MIDIW31_INSTRUMENT_ECHODROP, MIDIW31_INSTRUMENT_STARTHEM, MIDIW31_INSTRUMENT_SITAR,    MIDIW31_INSTRUMENT_BANJO,    MIDIW31_INSTRUMENT_SHAMISEN, MIDIW31_INSTRUMENT_KOTO
>3926d5	15 24 39 00 21 24 39 00 2d 24 39 00 39 24 39 00
>3926e5	45 24 39 00 51 24 39 00			                 .dword MIDIW31_INSTRUMENT_KALIMBA,  MIDIW31_INSTRUMENT_BAGPIPE,  MIDIW31_INSTRUMENT_FIDDLE,   MIDIW31_INSTRUMENT_SHANNAI,  MIDIW31_INSTRUMENT_TINKLBEL, MIDIW31_INSTRUMENT_AGOGO
>3926ed	5d 24 39 00 69 24 39 00 75 24 39 00 81 24 39 00
>3926fd	8d 24 39 00 99 24 39 00			                 .dword MIDIW31_INSTRUMENT_STEELDRM, MIDIW31_INSTRUMENT_WOODBLOK, MIDIW31_INSTRUMENT_TAIKO,    MIDIW31_INSTRUMENT_MELOTOM,  MIDIW31_INSTRUMENT_SYNDRUM,  MIDIW31_INSTRUMENT_REVRSCYM
>392705	a5 24 39 00 b1 24 39 00 bd 24 39 00 c9 24 39 00
>392715	d5 24 39 00 e1 24 39 00			                 .dword MIDIW31_INSTRUMENT_FRETNOIS, MIDIW31_INSTRUMENT_BRTHNOIS, MIDIW31_INSTRUMENT_SEASHORE, MIDIW31_INSTRUMENT_BIRDS,    MIDIW31_INSTRUMENT_TELEPHON, MIDIW31_INSTRUMENT_HELICOPT
>39271d	ed 24 39 00 f9 24 39 00 05 25 39 00 11 25 39 00
>39272d	1d 25 39 00 29 25 39 00			                 .dword MIDIW31_INSTRUMENT_APPLAUSE, MIDIW31_INSTRUMENT_GUNSHOT

;******  Return to file: src\OPL2_Library.asm

>392735	3c 42 44 45 47 49 4b 4c		NOTE_INTRO  .byte  $3C, $42, $44, $45, $47, $49, $4B, $4C
.39273d					IOPL2_TONE_TEST
.39273d	e2 20		sep #$20	                SEP #$20        ; set A short
.39273f	c2 10		rep #$10	                REP #$10        ; set X long
.392741	a2 00 00	ldx #$0000	                LDX #0
.392744					OPL2_TONE_TESTING_L1
.392744	bd 35 27	lda $392735,x	                LDA NOTE_INTRO, X
.392747	29 0f		and #$0f	                AND #$F
.392749	85 30		sta $30		                STA OPL2_NOTE ; start at C
.39274b	bd 35 27	lda $392735,x	                LDA NOTE_INTRO, X
.39274e	29 70		and #$70	                AND #$70
.392750	4a		lsr a		                LSR A
.392751	4a		lsr a		                LSR A
.392752	4a		lsr a		                LSR A
.392753	4a		lsr a		                LSR A
.392754	85 31		sta $31		                STA OPL2_OCTAVE
.392756	8a		txa		                TXA
.392757	29 03		and #$03	                AND #$03        ; replace modulo 3 -  play each note on a different channel
.392759	85 27		sta $27		                STA OPL2_CHANNEL
.39275b	22 2b 29 39	jsl $39292b	                JSL OPL2_PLAYNOTE
.39275f	a0 00 00	ldy #$0000	                LDY #$0000
.392762					OPL2_TONE_TESTING_L2
.392762	ea		nop		                NOP
.392763	ea		nop		                NOP
.392764	ea		nop		                NOP
.392765	ea		nop		                NOP
.392766	c8		iny		                INY
.392767	c0 ff ff	cpy #$ffff	                CPY #$FFFF
.39276a	d0 f6		bne $392762	                BNE OPL2_TONE_TESTING_L2
.39276c	e8		inx		                INX
.39276d	e0 08 00	cpx #$0008	                CPX #8
.392770	d0 d2		bne $392744	                BNE OPL2_TONE_TESTING_L1
.392772	6b		rtl		                RTL
.392773					OPL2_INIT
.392773	c2 20		rep #$20	                REP #$20        ; set A long
.392775	a9 00 00	lda #$0000	                LDA #$0000
.392778	85 28		sta $28		                STA OPL2_REG_REGION
.39277a	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.39277c	85 30		sta $30		                STA OPL2_NOTE
.39277e	85 32		sta $32		                STA OPL2_PARAMETER0
.392780	85 34		sta $34		                STA OPL2_PARAMETER2
.392782	a9 ff 06	lda #$06ff	                LDA #<>INSTRUMENT_ACCORDN
.392785	85 50		sta $50		                STA RAD_ADDR
.392787	a9 39 00	lda #$0039	                LDA #<`INSTRUMENT_ACCORDN
.39278a	85 52		sta $52		                STA RAD_ADDR + 2
.39278c	e2 20		sep #$20	                SEP #$20        ; set A short
.39278e	6b		rtl		                RTL
.39278f					OPL2_Reset
.39278f	6b		rtl		                RTL
.392790					OPL2_Get_FrequencyBlock
.392790	6b		rtl		                RTL
.392791					OPL2_GET_REGISTER
.392791	48		pha		                PHA             ; begin setdp macro
.392792	08		php		                PHP
.392793	c2 20		rep #$20	                REP #$20        ; set A long
.392795	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.392798	5b		tcd		                TCD
.392799	28		plp		                PLP
.39279a	68		pla		                PLA             ; end setdp macro
.39279b	c2 20		rep #$20	                REP #$20        ; set A long
.39279d	18		clc		              CLC
.39279e	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.3927a1	65 32		adc $32		              ADC OPL2_PARAMETER0
.3927a3	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3927a5	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.3927a8	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3927aa	e2 20		sep #$20	                SEP #$20        ; set A short
.3927ac	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3927ae	6b		rtl		              RTL
.3927af					OPL2_GET_WAVEFORM_SELECT
.3927af	48		pha		                PHA             ; begin setdp macro
.3927b0	08		php		                PHP
.3927b1	c2 20		rep #$20	                REP #$20        ; set A long
.3927b3	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3927b6	5b		tcd		                TCD
.3927b7	28		plp		                PLP
.3927b8	68		pla		                PLA             ; end setdp macro
.3927b9	c2 20		rep #$20	                REP #$20        ; set A long
.3927bb	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.3927be	69 01 00	adc #$0001	              ADC #$0001
.3927c1	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3927c3	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.3927c6	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3927c8	e2 20		sep #$20	                SEP #$20        ; set A short
.3927ca	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3927cc	29 20		and #$20	              AND #$20
.3927ce	6b		rtl		              RTL
.3927cf					OPL2_GET_SCALINGLEVEL
.3927cf	48		pha		                PHA             ; begin setdp macro
.3927d0	08		php		                PHP
.3927d1	c2 20		rep #$20	                REP #$20        ; set A long
.3927d3	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3927d6	5b		tcd		                TCD
.3927d7	28		plp		                PLP
.3927d8	68		pla		                PLA             ; end setdp macro
.3927d9	c2 20		rep #$20	                REP #$20        ; set A long
.3927db	a9 40 00	lda #$0040	              LDA #$0040  ;
.3927de	85 28		sta $28		              STA OPL2_REG_REGION
.3927e0	20 92 30	jsr $393092	              JSR OPL2_GET_REG_OFFSET
.3927e3	e2 20		sep #$20	                SEP #$20        ; set A short
.3927e5	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3927e7	29 c0		and #$c0	              AND #$C0
.3927e9	4a		lsr a		              LSR A
.3927ea	4a		lsr a		              LSR A
.3927eb	4a		lsr a		              LSR A
.3927ec	4a		lsr a		              LSR A
.3927ed	4a		lsr a		              LSR A
.3927ee	4a		lsr a		              LSR A
.3927ef	6b		rtl		              RTL
.3927f0					OPL2_GET_BLOCK
.3927f0	48		pha		                PHA             ; begin setdp macro
.3927f1	08		php		                PHP
.3927f2	c2 20		rep #$20	                REP #$20        ; set A long
.3927f4	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3927f7	5b		tcd		                TCD
.3927f8	28		plp		                PLP
.3927f9	68		pla		                PLA             ; end setdp macro
.3927fa	e2 20		sep #$20	                SEP #$20        ; set A short
.3927fc	18		clc		              CLC
.3927fd	a5 27		lda $27		              LDA OPL2_CHANNEL
.3927ff	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.392801	69 b0		adc #$b0	              ADC #$B0
.392803	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.392805	a9 00		lda #$00	              LDA #$00
.392807	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.392809	c2 30		rep #$30	                REP #$30        ; set A&X long
.39280b	18		clc		              CLC
.39280c	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.39280f	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.392811	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.392813	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.392816	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.392818	e2 20		sep #$20	                SEP #$20        ; set A short
.39281a	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39281c	29 1c		and #$1c	              AND #$1C
.39281e	4a		lsr a		              LSR A
.39281f	4a		lsr a		              LSR A
.392820	6b		rtl		              RTL
.392821					OPL2_GET_KEYON
.392821	48		pha		                PHA             ; begin setdp macro
.392822	08		php		                PHP
.392823	c2 20		rep #$20	                REP #$20        ; set A long
.392825	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.392828	5b		tcd		                TCD
.392829	28		plp		                PLP
.39282a	68		pla		                PLA             ; end setdp macro
.39282b	e2 20		sep #$20	                SEP #$20        ; set A short
.39282d	18		clc		              CLC
.39282e	a5 27		lda $27		              LDA OPL2_CHANNEL
.392830	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.392832	69 b0		adc #$b0	              ADC #$B0
.392834	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.392836	a9 00		lda #$00	              LDA #$00
.392838	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.39283a	c2 30		rep #$30	                REP #$30        ; set A&X long
.39283c	18		clc		              CLC
.39283d	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.392840	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.392842	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.392844	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.392847	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.392849	e2 20		sep #$20	                SEP #$20        ; set A short
.39284b	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39284d	29 20		and #$20	              AND #$20
.39284f	6b		rtl		              RTL
.392850					OPL2_GET_FEEDBACK
.392850	48		pha		                PHA             ; begin setdp macro
.392851	08		php		                PHP
.392852	c2 20		rep #$20	                REP #$20        ; set A long
.392854	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.392857	5b		tcd		                TCD
.392858	28		plp		                PLP
.392859	68		pla		                PLA             ; end setdp macro
.39285a	e2 20		sep #$20	                SEP #$20        ; set A short
.39285c	18		clc		              CLC
.39285d	a5 27		lda $27		              LDA OPL2_CHANNEL
.39285f	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.392861	69 c0		adc #$c0	              ADC #$C0
.392863	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.392865	a9 00		lda #$00	              LDA #$00
.392867	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.392869	c2 30		rep #$30	                REP #$30        ; set A&X long
.39286b	18		clc		              CLC
.39286c	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.39286f	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.392871	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.392873	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.392876	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.392878	e2 20		sep #$20	                SEP #$20        ; set A short
.39287a	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39287c	29 e0		and #$e0	              AND #$E0
.39287e	4a		lsr a		              LSR
.39287f	6b		rtl		              RTL
.392880					OPL2_GET_SYNTHMODE
.392880	48		pha		                PHA             ; begin setdp macro
.392881	08		php		                PHP
.392882	c2 20		rep #$20	                REP #$20        ; set A long
.392884	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.392887	5b		tcd		                TCD
.392888	28		plp		                PLP
.392889	68		pla		                PLA             ; end setdp macro
.39288a	e2 20		sep #$20	                SEP #$20        ; set A short
.39288c	18		clc		              CLC
.39288d	a5 27		lda $27		              LDA OPL2_CHANNEL
.39288f	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.392891	69 c0		adc #$c0	              ADC #$C0
.392893	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.392895	a9 00		lda #$00	              LDA #$00
.392897	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.392899	c2 30		rep #$30	                REP #$30        ; set A&X long
.39289b	18		clc		              CLC
.39289c	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.39289f	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.3928a1	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3928a3	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.3928a6	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3928a8	e2 20		sep #$20	                SEP #$20        ; set A short
.3928aa	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3928ac	29 01		and #$01	              AND #$01
.3928ae	6b		rtl		              RTL
.3928af					OPL2_GET_DEEPTREMOLO
.3928af	48		pha		                PHA             ; begin setdp macro
.3928b0	08		php		                PHP
.3928b1	c2 20		rep #$20	                REP #$20        ; set A long
.3928b3	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3928b6	5b		tcd		                TCD
.3928b7	28		plp		                PLP
.3928b8	68		pla		                PLA             ; end setdp macro
.3928b9	c2 20		rep #$20	                REP #$20        ; set A long
.3928bb	a9 bd 00	lda #$00bd	              LDA #$00BD;
.3928be	85 28		sta $28		              STA OPL2_REG_REGION
.3928c0	20 92 30	jsr $393092	              JSR OPL2_GET_REG_OFFSET
.3928c3	e2 20		sep #$20	                SEP #$20        ; set A short
.3928c5	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3928c7	29 80		and #$80	              AND #$80
.3928c9	6b		rtl		              RTL
.3928ca					OPL2_GET_DEEPVIBRATO
.3928ca	48		pha		                PHA             ; begin setdp macro
.3928cb	08		php		                PHP
.3928cc	c2 20		rep #$20	                REP #$20        ; set A long
.3928ce	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3928d1	5b		tcd		                TCD
.3928d2	28		plp		                PLP
.3928d3	68		pla		                PLA             ; end setdp macro
.3928d4	c2 20		rep #$20	                REP #$20        ; set A long
.3928d6	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.3928d9	69 bd 00	adc #$00bd	              ADC #$00BD
.3928dc	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3928de	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.3928e1	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3928e3	e2 20		sep #$20	                SEP #$20        ; set A short
.3928e5	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3928e7	29 40		and #$40	              AND #$40
.3928e9	6b		rtl		              RTL
.3928ea					OPL2_GET_PERCUSSION
.3928ea	48		pha		                PHA             ; begin setdp macro
.3928eb	08		php		                PHP
.3928ec	c2 20		rep #$20	                REP #$20        ; set A long
.3928ee	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3928f1	5b		tcd		                TCD
.3928f2	28		plp		                PLP
.3928f3	68		pla		                PLA             ; end setdp macro
.3928f4	c2 20		rep #$20	                REP #$20        ; set A long
.3928f6	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.3928f9	69 bd 00	adc #$00bd	              ADC #$00BD
.3928fc	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3928fe	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.392901	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.392903	e2 20		sep #$20	                SEP #$20        ; set A short
.392905	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.392907	29 20		and #$20	              AND #$20
.392909	6b		rtl		              RTL
.39290a					OPL2_GET_DRUMS
.39290a	48		pha		                PHA             ; begin setdp macro
.39290b	08		php		                PHP
.39290c	c2 20		rep #$20	                REP #$20        ; set A long
.39290e	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.392911	5b		tcd		                TCD
.392912	28		plp		                PLP
.392913	68		pla		                PLA             ; end setdp macro
.392914	c2 20		rep #$20	                REP #$20        ; set A long
.392916	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.392919	69 bd 00	adc #$00bd	              ADC #$00BD
.39291c	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39291e	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.392921	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.392923	e2 20		sep #$20	                SEP #$20        ; set A short
.392925	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.392927	29 1f		and #$1f	              AND #$1F
.392929	6b		rtl		              RTL
.39292a					OPL2_Get_WaveForm
.39292a	6b		rtl		                RTL
.39292b					OPL2_PLAYNOTE
.39292b	48		pha		                PHA             ; begin setdp macro
.39292c	08		php		                PHP
.39292d	c2 20		rep #$20	                REP #$20        ; set A long
.39292f	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.392932	5b		tcd		                TCD
.392933	28		plp		                PLP
.392934	68		pla		                PLA             ; end setdp macro
.392935	e2 20		sep #$20	                SEP #$20        ; set A short
.392937	da		phx		                PHX
.392938	a9 00		lda #$00	                LDA #$00
.39293a	85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.39293c	20 13 2f	jsr $392f13	                JSR OPL2_SET_KEYON
.39293f	20 d8 2e	jsr $392ed8	                JSR OPL2_SET_BLOCK  ; OPL2_SET_BLOCK Already to OPL2_OCTAVE
.392942	e2 10		sep #$10	                SEP #$10        ; set X short
.392944	a5 30		lda $30		                LDA OPL2_NOTE
.392946	3a		dec a		                DEC A
.392947	0a		asl a		                ASL A
.392948	aa		tax		                TAX
.392949	bf c4 06 39	lda $3906c4,x	                LDA @lnoteFNumbers,X
.39294d	85 32		sta $32		                STA OPL2_PARAMETER0 ; Store the 8it in Param OPL2_PARAMETER0
.39294f	e8		inx		                INX
.392950	bf c4 06 39	lda $3906c4,x	                LDA @lnoteFNumbers,X
.392954	85 33		sta $33		                STA OPL2_PARAMETER1 ; Store the 8bit in Param OPL2_PARAMETER1
.392956	22 56 2e 39	jsl $392e56	                JSL OPL2_SET_FNUMBER
.39295a	a9 01		lda #$01	                LDA #$01
.39295c	85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.39295e	20 13 2f	jsr $392f13	                JSR OPL2_SET_KEYON
.392961	c2 10		rep #$10	                REP #$10        ; set X long
.392963	fa		plx		                PLX
.392964	6b		rtl		                RTL
.392965					OPL2_PLAYDRUM
.392965	6b		rtl		                RTL
.392966					OPL2_SET_INSTRUMENT
.392966	48		pha		                PHA             ; begin setdp macro
.392967	08		php		                PHP
.392968	c2 20		rep #$20	                REP #$20        ; set A long
.39296a	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39296d	5b		tcd		                TCD
.39296e	28		plp		                PLP
.39296f	68		pla		                PLA             ; end setdp macro
.392970	38		sec		              SEC ; Set the WaveFormSelect to True
.392971	22 54 2b 39	jsl $392b54	              JSL OPL2_SET_WAVEFORMSELECT;
.392975	e2 20		sep #$20	                SEP #$20        ; set A short
.392977	c2 10		rep #$10	                REP #$10        ; set X long
.392979	a0 00 00	ldy #$0000	              LDY #$0000
.39297c	a2 00 00	ldx #$0000	              LDX #$0000
.39297f	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO],Y ; Pointer Location 0 in Instrument Profile
.392981	85 35		sta $35		              STA OPL2_PARAMETER3
.392983	c8		iny		              INY
.392984	c9 06		cmp #$06	              CMP #$06
.392986	d0 03		bne $39298b	              BNE PERCUSSION_NEXT07
.392988	82 70 01	brl $392afb	              BRL Percussion_6
.39298b					PERCUSSION_NEXT07
.39298b	c9 07		cmp #$07	              CMP #$07
.39298d	d0 03		bne $392992	              BNE PERCUSSION_NEXT08
.39298f	82 44 01	brl $392ad6	              BRL Percussion_7
.392992					PERCUSSION_NEXT08
.392992	c9 08		cmp #$08	              CMP #$08
.392994	d0 03		bne $392999	              BNE PERCUSSION_NEXT09
.392996	82 18 01	brl $392ab1	              BRL Percussion_8
.392999					PERCUSSION_NEXT09
.392999	c9 09		cmp #$09	              CMP #$09
.39299b	d0 03		bne $3929a0	              BNE PERCUSSION_NEXT0A
.39299d	82 ec 00	brl $392a8c	              BRL Percussion_9
.3929a0					PERCUSSION_NEXT0A
.3929a0	c9 0a		cmp #$0a	              CMP #$0A
.3929a2	d0 03		bne $3929a7	              BNE Percussion_Default
.3929a4	82 c0 00	brl $392a67	              BRL Percussion_A
.3929a7					Percussion_Default
.3929a7	a9 00		lda #$00	              LDA #$00
.3929a9	85 26		sta $26		              STA OPL2_OPERATOR
.3929ab	c2 20		rep #$20	                REP #$20        ; set A long
.3929ad	a9 20 00	lda #$0020	              LDA #$0020;
.3929b0	85 28		sta $28		              STA OPL2_REG_REGION
.3929b2	20 92 30	jsr $393092	              JSR OPL2_GET_REG_OFFSET
.3929b5	e2 20		sep #$20	                SEP #$20        ; set A short
.3929b7	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.3929b9	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3929bb	c8		iny		              INY
.3929bc	c2 20		rep #$20	                REP #$20        ; set A long
.3929be	a9 40 00	lda #$0040	              LDA #$0040;
.3929c1	85 28		sta $28		              STA OPL2_REG_REGION
.3929c3	20 92 30	jsr $393092	              JSR OPL2_GET_REG_OFFSET
.3929c6	e2 20		sep #$20	                SEP #$20        ; set A short
.3929c8	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.3929ca	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3929cc	c8		iny		              INY
.3929cd	c2 20		rep #$20	                REP #$20        ; set A long
.3929cf	a9 60 00	lda #$0060	              LDA #$0060;
.3929d2	85 28		sta $28		              STA OPL2_REG_REGION
.3929d4	20 92 30	jsr $393092	              JSR OPL2_GET_REG_OFFSET
.3929d7	e2 20		sep #$20	                SEP #$20        ; set A short
.3929d9	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.3929db	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3929dd	c8		iny		              INY
.3929de	c2 20		rep #$20	                REP #$20        ; set A long
.3929e0	a9 80 00	lda #$0080	              LDA #$0080;
.3929e3	85 28		sta $28		              STA OPL2_REG_REGION
.3929e5	20 92 30	jsr $393092	              JSR OPL2_GET_REG_OFFSET
.3929e8	e2 20		sep #$20	                SEP #$20        ; set A short
.3929ea	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.3929ec	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3929ee	c8		iny		              INY
.3929ef	c2 20		rep #$20	                REP #$20        ; set A long
.3929f1	a9 e0 00	lda #$00e0	              LDA #$00E0;
.3929f4	85 28		sta $28		              STA OPL2_REG_REGION
.3929f6	20 92 30	jsr $393092	              JSR OPL2_GET_REG_OFFSET
.3929f9	e2 20		sep #$20	                SEP #$20        ; set A short
.3929fb	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.3929fd	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3929ff	c8		iny		              INY
.392a00	e2 10		sep #$10	                SEP #$10        ; set X short
.392a02	a5 27		lda $27		              LDA OPL2_CHANNEL
.392a04	29 0f		and #$0f	              AND #$0F
.392a06	aa		tax		              TAX
.392a07	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 6 in Instrument Profile
.392a09	9f c0 e7 af	sta $afe7c0,x	              STA @lOPL2_S_FEEDBACK,X
.392a0d	c8		iny		              INY
.392a0e	a9 01		lda #$01	              LDA #$01
.392a10	85 26		sta $26		              STA OPL2_OPERATOR
.392a12	c2 20		rep #$20	                REP #$20        ; set A long
.392a14	a9 20 00	lda #$0020	              LDA #$0020;
.392a17	85 28		sta $28		              STA OPL2_REG_REGION
.392a19	20 92 30	jsr $393092	              JSR OPL2_GET_REG_OFFSET
.392a1c	e2 20		sep #$20	                SEP #$20        ; set A short
.392a1e	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 7 in Instrument Profile
.392a20	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.392a22	c8		iny		              INY
.392a23	c2 20		rep #$20	                REP #$20        ; set A long
.392a25	a9 40 00	lda #$0040	              LDA #$0040;
.392a28	85 28		sta $28		              STA OPL2_REG_REGION
.392a2a	20 92 30	jsr $393092	              JSR OPL2_GET_REG_OFFSET
.392a2d	e2 20		sep #$20	                SEP #$20        ; set A short
.392a2f	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 8 in Instrument Profile
.392a31	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.392a33	c8		iny		              INY
.392a34	c2 20		rep #$20	                REP #$20        ; set A long
.392a36	a9 60 00	lda #$0060	              LDA #$0060;
.392a39	85 28		sta $28		              STA OPL2_REG_REGION
.392a3b	20 92 30	jsr $393092	              JSR OPL2_GET_REG_OFFSET
.392a3e	e2 20		sep #$20	                SEP #$20        ; set A short
.392a40	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 9 in Instrument Profile
.392a42	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.392a44	c8		iny		              INY
.392a45	c2 20		rep #$20	                REP #$20        ; set A long
.392a47	a9 80 00	lda #$0080	              LDA #$0080;
.392a4a	85 28		sta $28		              STA OPL2_REG_REGION
.392a4c	20 92 30	jsr $393092	              JSR OPL2_GET_REG_OFFSET
.392a4f	e2 20		sep #$20	                SEP #$20        ; set A short
.392a51	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location A in Instrument Profile
.392a53	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.392a55	c8		iny		              INY
.392a56	c2 20		rep #$20	                REP #$20        ; set A long
.392a58	a9 e0 00	lda #$00e0	              LDA #$00E0;
.392a5b	85 28		sta $28		              STA OPL2_REG_REGION
.392a5d	20 92 30	jsr $393092	              JSR OPL2_GET_REG_OFFSET
.392a60	e2 20		sep #$20	                SEP #$20        ; set A short
.392a62	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location B in Instrument Profile
.392a64	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.392a66	6b		rtl		                RTL
.392a67					Percussion_A
.392a67	e2 20		sep #$20	                SEP #$20        ; set A short
.392a69	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.392a6b	8f 31 e7 af	sta $afe731	              STA @lOPL2_S_AM_VID_EG_KSR_MULT + $11
.392a6f	c8		iny		              INY
.392a70	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.392a72	8f 51 e7 af	sta $afe751	              STA @lOPL2_S_KSL_TL + $11
.392a76	c8		iny		              INY
.392a77	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.392a79	8f 71 e7 af	sta $afe771	              STA @lOPL2_S_AR_DR + $11
.392a7d	c8		iny		              INY
.392a7e	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.392a80	8f 91 e7 af	sta $afe791	              STA @lOPL2_S_SL_RR + $11
.392a84	c8		iny		              INY
.392a85	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.392a87	8f f1 e7 af	sta $afe7f1	              STA @lOPL2_S_WAVE_SELECT + $11
.392a8b	6b		rtl		                RTL
.392a8c					Percussion_9
.392a8c	e2 20		sep #$20	                SEP #$20        ; set A short
.392a8e	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.392a90	8f 35 e7 af	sta $afe735	              STA @lOPL2_S_AM_VID_EG_KSR_MULT + $15
.392a94	c8		iny		              INY
.392a95	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.392a97	8f 55 e7 af	sta $afe755	              STA @lOPL2_S_KSL_TL + $15
.392a9b	c8		iny		              INY
.392a9c	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.392a9e	8f 75 e7 af	sta $afe775	              STA @lOPL2_S_AR_DR + $15
.392aa2	c8		iny		              INY
.392aa3	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.392aa5	8f 95 e7 af	sta $afe795	              STA @lOPL2_S_SL_RR + $15
.392aa9	c8		iny		              INY
.392aaa	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.392aac	8f f5 e7 af	sta $afe7f5	              STA @lOPL2_S_WAVE_SELECT + $15
.392ab0	6b		rtl		              RTL
.392ab1					Percussion_8
.392ab1	e2 20		sep #$20	                SEP #$20        ; set A short
.392ab3	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.392ab5	8f 32 e7 af	sta $afe732	              STA @lOPL2_S_AM_VID_EG_KSR_MULT + $12
.392ab9	c8		iny		              INY
.392aba	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.392abc	8f 52 e7 af	sta $afe752	              STA @lOPL2_S_KSL_TL + $12
.392ac0	c8		iny		              INY
.392ac1	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.392ac3	8f 72 e7 af	sta $afe772	              STA @lOPL2_S_AR_DR + $12
.392ac7	c8		iny		              INY
.392ac8	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.392aca	8f 92 e7 af	sta $afe792	              STA @lOPL2_S_SL_RR + $12
.392ace	c8		iny		              INY
.392acf	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.392ad1	8f f2 e7 af	sta $afe7f2	              STA @lOPL2_S_WAVE_SELECT + $12
.392ad5	6b		rtl		              RTL
.392ad6					Percussion_7
.392ad6	e2 20		sep #$20	                SEP #$20        ; set A short
.392ad8	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.392ada	8f 34 e7 af	sta $afe734	              STA @lOPL2_S_AM_VID_EG_KSR_MULT + $14
.392ade	c8		iny		              INY
.392adf	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.392ae1	8f 54 e7 af	sta $afe754	              STA @lOPL2_S_KSL_TL + $14
.392ae5	c8		iny		              INY
.392ae6	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.392ae8	8f 74 e7 af	sta $afe774	              STA @lOPL2_S_AR_DR + $14
.392aec	c8		iny		              INY
.392aed	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.392aef	8f 94 e7 af	sta $afe794	              STA @lOPL2_S_SL_RR + $14
.392af3	c8		iny		              INY
.392af4	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.392af6	8f f4 e7 af	sta $afe7f4	              STA @lOPL2_S_WAVE_SELECT + $14
.392afa	6b		rtl		              RTL
.392afb					Percussion_6
.392afb	e2 20		sep #$20	                SEP #$20        ; set A short
.392afd	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.392aff	8f 30 e7 af	sta $afe730	              STA @lOPL2_S_AM_VID_EG_KSR_MULT + $10
.392b03	8f 33 e7 af	sta $afe733	              STA @lOPL2_S_AM_VID_EG_KSR_MULT + $13
.392b07	c8		iny		              INY
.392b08	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.392b0a	8f 50 e7 af	sta $afe750	              STA @lOPL2_S_KSL_TL + $10
.392b0e	8f 53 e7 af	sta $afe753	              STA @lOPL2_S_KSL_TL + $13
.392b12	c8		iny		              INY
.392b13	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.392b15	8f 70 e7 af	sta $afe770	              STA @lOPL2_S_AR_DR + $10
.392b19	8f 73 e7 af	sta $afe773	              STA @lOPL2_S_AR_DR + $13
.392b1d	c8		iny		              INY
.392b1e	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.392b20	8f 90 e7 af	sta $afe790	              STA @lOPL2_S_SL_RR + $10
.392b24	8f 93 e7 af	sta $afe793	              STA @lOPL2_S_SL_RR + $13
.392b28	c8		iny		              INY
.392b29	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.392b2b	8f f0 e7 af	sta $afe7f0	              STA @lOPL2_S_WAVE_SELECT + $10
.392b2f	8f f3 e7 af	sta $afe7f3	              STA @lOPL2_S_WAVE_SELECT + $13
.392b33	6b		rtl		              RTL
.392b34					OPL2_SET_REGISTER
.392b34	48		pha		                PHA             ; begin setdp macro
.392b35	08		php		                PHP
.392b36	c2 20		rep #$20	                REP #$20        ; set A long
.392b38	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.392b3b	5b		tcd		                TCD
.392b3c	28		plp		                PLP
.392b3d	68		pla		                PLA             ; end setdp macro
.392b3e	c2 20		rep #$20	                REP #$20        ; set A long
.392b40	18		clc		              CLC
.392b41	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.392b44	65 32		adc $32		              ADC OPL2_PARAMETER0
.392b46	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.392b48	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.392b4b	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.392b4d	e2 20		sep #$20	                SEP #$20        ; set A short
.392b4f	a5 33		lda $33		              LDA OPL2_PARAMETER1
.392b51	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.392b53	6b		rtl		              RTL
.392b54					OPL2_SET_WAVEFORMSELECT
.392b54	48		pha		                PHA             ; begin setdp macro
.392b55	08		php		                PHP
.392b56	c2 20		rep #$20	                REP #$20        ; set A long
.392b58	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.392b5b	5b		tcd		                TCD
.392b5c	28		plp		                PLP
.392b5d	68		pla		                PLA             ; end setdp macro
.392b5e	c2 20		rep #$20	                REP #$20        ; set A long
.392b60	a9 01 e7	lda #$e701	              LDA #<>OPL2_S_BASE + $0001
.392b63	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.392b65	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.392b68	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.392b6a	e2 20		sep #$20	                SEP #$20        ; set A short
.392b6c	b0 07		bcs $392b75	              BCS OPL2_Set_WaveFormSelect_set
.392b6e	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.392b70	29 df		and #$df	              AND #$DF
.392b72	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.392b74	6b		rtl		              RTL
.392b75					OPL2_Set_WaveFormSelect_set
.392b75	48		pha		                PHA             ; begin setdp macro
.392b76	08		php		                PHP
.392b77	c2 20		rep #$20	                REP #$20        ; set A long
.392b79	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.392b7c	5b		tcd		                TCD
.392b7d	28		plp		                PLP
.392b7e	68		pla		                PLA             ; end setdp macro
.392b7f	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.392b81	09 20 00	ora #$0020	              ORA #$20
.392b84	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.392b86	6b		rtl		                RTL
.392b87					OPL2_SET_TREMOLO
.392b87	48		pha		                PHA             ; begin setdp macro
.392b88	08		php		                PHP
.392b89	c2 20		rep #$20	                REP #$20        ; set A long
.392b8b	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.392b8e	5b		tcd		                TCD
.392b8f	28		plp		                PLP
.392b90	68		pla		                PLA             ; end setdp macro
.392b91	08		php		                PHP ; Push the Carry
.392b92	c2 20		rep #$20	                REP #$20        ; set A long
.392b94	18		clc		                CLC
.392b95	a9 20 00	lda #$0020	                LDA #$0020 ;
.392b98	85 28		sta $28		                STA OPL2_REG_REGION
.392b9a	20 92 30	jsr $393092	                JSR OPL2_GET_REG_OFFSET
.392b9d	28		plp		                PLP ; Pull the Carry out
.392b9e	e2 20		sep #$20	                SEP #$20        ; set A short
.392ba0	b0 08		bcs $392baa	                BCS OPL2_Set_Tremolo_Set;
.392ba2	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.392ba4	29 7f		and #$7f	                AND #$7F
.392ba6	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.392ba8	80 06		bra $392bb0	                BRA OPL2_Set_Tremolo_Exit
.392baa					OPL2_Set_Tremolo_Set
.392baa	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.392bac	09 80		ora #$80	                ORA #$80
.392bae	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.392bb0					OPL2_Set_Tremolo_Exit
.392bb0	6b		rtl		                RTL
.392bb1					OPL2_GET_TREMOLO
.392bb1	48		pha		                PHA             ; begin setdp macro
.392bb2	08		php		                PHP
.392bb3	c2 20		rep #$20	                REP #$20        ; set A long
.392bb5	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.392bb8	5b		tcd		                TCD
.392bb9	28		plp		                PLP
.392bba	68		pla		                PLA             ; end setdp macro
.392bbb	c2 20		rep #$20	                REP #$20        ; set A long
.392bbd	a9 20 00	lda #$0020	                LDA #$0020;
.392bc0	85 28		sta $28		                STA OPL2_REG_REGION
.392bc2	20 92 30	jsr $393092	                JSR OPL2_GET_REG_OFFSET
.392bc5	e2 20		sep #$20	                SEP #$20        ; set A short
.392bc7	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.392bc9	29 80		and #$80	                AND #$80
.392bcb	6b		rtl		                RTL
.392bcc					OPL2_SET_VIBRATO
.392bcc	48		pha		                PHA             ; begin setdp macro
.392bcd	08		php		                PHP
.392bce	c2 20		rep #$20	                REP #$20        ; set A long
.392bd0	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.392bd3	5b		tcd		                TCD
.392bd4	28		plp		                PLP
.392bd5	68		pla		                PLA             ; end setdp macro
.392bd6	08		php		                PHP ; Push the Carry
.392bd7	c2 20		rep #$20	                REP #$20        ; set A long
.392bd9	18		clc		                CLC
.392bda	a9 20 00	lda #$0020	                LDA #$0020;
.392bdd	85 28		sta $28		                STA OPL2_REG_REGION
.392bdf	20 92 30	jsr $393092	                JSR OPL2_GET_REG_OFFSET
.392be2	28		plp		                PLP ; Pull the Carry out
.392be3	e2 20		sep #$20	                SEP #$20        ; set A short
.392be5	b0 08		bcs $392bef	                BCS OPL2_Set_Vibrato_Set;
.392be7	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.392be9	29 bf		and #$bf	                AND #$BF
.392beb	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.392bed	80 06		bra $392bf5	                BRA OPL2_Set_Vibrato_Exit
.392bef					OPL2_Set_Vibrato_Set
.392bef	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.392bf1	09 40		ora #$40	                ORA #$40
.392bf3	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.392bf5					OPL2_Set_Vibrato_Exit
.392bf5	6b		rtl		                RTL
.392bf6					OPL2_GET_VIBRATO
.392bf6	48		pha		                PHA             ; begin setdp macro
.392bf7	08		php		                PHP
.392bf8	c2 20		rep #$20	                REP #$20        ; set A long
.392bfa	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.392bfd	5b		tcd		                TCD
.392bfe	28		plp		                PLP
.392bff	68		pla		                PLA             ; end setdp macro
.392c00	c2 20		rep #$20	                REP #$20        ; set A long
.392c02	a9 20 00	lda #$0020	                LDA #$0020;
.392c05	85 28		sta $28		                STA OPL2_REG_REGION
.392c07	20 92 30	jsr $393092	                JSR OPL2_GET_REG_OFFSET
.392c0a	e2 20		sep #$20	                SEP #$20        ; set A short
.392c0c	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.392c0e	29 40		and #$40	                AND #$40
.392c10	6b		rtl		                RTL
.392c11					OPL2_SET_MAINTAINSUSTAIN
.392c11	48		pha		                PHA             ; begin setdp macro
.392c12	08		php		                PHP
.392c13	c2 20		rep #$20	                REP #$20        ; set A long
.392c15	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.392c18	5b		tcd		                TCD
.392c19	28		plp		                PLP
.392c1a	68		pla		                PLA             ; end setdp macro
.392c1b	08		php		              PHP ; Push the Carry
.392c1c	c2 20		rep #$20	                REP #$20        ; set A long
.392c1e	18		clc		              CLC
.392c1f	a9 20 00	lda #$0020	              LDA #$0020;
.392c22	85 28		sta $28		              STA OPL2_REG_REGION
.392c24	20 92 30	jsr $393092	              JSR OPL2_GET_REG_OFFSET
.392c27	28		plp		              PLP ; Pull the Carry out
.392c28	e2 20		sep #$20	                SEP #$20        ; set A short
.392c2a	b0 08		bcs $392c34	              BCS OPL2_Set_MaintainSustain_Set;
.392c2c	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.392c2e	29 df		and #$df	              AND #$DF
.392c30	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.392c32	80 06		bra $392c3a	              BRA OPL2_Set_MaintainSustain_Exit
.392c34					OPL2_Set_MaintainSustain_Set
.392c34	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.392c36	09 20		ora #$20	              ORA #$20
.392c38	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.392c3a					OPL2_Set_MaintainSustain_Exit
.392c3a	6b		rtl		                RTL
.392c3b					OPL2_GET_MAINTAINSUSTAIN
.392c3b	48		pha		                PHA             ; begin setdp macro
.392c3c	08		php		                PHP
.392c3d	c2 20		rep #$20	                REP #$20        ; set A long
.392c3f	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.392c42	5b		tcd		                TCD
.392c43	28		plp		                PLP
.392c44	68		pla		                PLA             ; end setdp macro
.392c45	c2 20		rep #$20	                REP #$20        ; set A long
.392c47	a9 20 00	lda #$0020	              LDA #$0020;
.392c4a	85 28		sta $28		              STA OPL2_REG_REGION
.392c4c	20 92 30	jsr $393092	              JSR OPL2_GET_REG_OFFSET
.392c4f	e2 20		sep #$20	                SEP #$20        ; set A short
.392c51	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.392c53	29 20		and #$20	              AND #$20
.392c55	6b		rtl		                RTL
.392c56					OPL2_SET_ENVELOPESCALING
.392c56	48		pha		                PHA             ; begin setdp macro
.392c57	08		php		                PHP
.392c58	c2 20		rep #$20	                REP #$20        ; set A long
.392c5a	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.392c5d	5b		tcd		                TCD
.392c5e	28		plp		                PLP
.392c5f	68		pla		                PLA             ; end setdp macro
.392c60	08		php		              PHP ; Push the Carry
.392c61	c2 20		rep #$20	                REP #$20        ; set A long
.392c63	18		clc		              CLC
.392c64	a9 20 00	lda #$0020	              LDA #$0020;
.392c67	85 28		sta $28		              STA OPL2_REG_REGION
.392c69	20 92 30	jsr $393092	              JSR OPL2_GET_REG_OFFSET
.392c6c	28		plp		              PLP ; Pull the Carry out
.392c6d	e2 20		sep #$20	                SEP #$20        ; set A short
.392c6f	b0 08		bcs $392c79	              BCS OPL2_Set_EnvelopeScaling_Set;
.392c71	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.392c73	29 ef		and #$ef	              AND #$EF
.392c75	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.392c77	80 06		bra $392c7f	              BRA OPL2_Set_EnvelopeScaling_Exit
.392c79					OPL2_Set_EnvelopeScaling_Set
.392c79	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.392c7b	09 10		ora #$10	              ORA #$10
.392c7d	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.392c7f					OPL2_Set_EnvelopeScaling_Exit
.392c7f	6b		rtl		                RTL
.392c80					OPL2_GET_ENVELOPESCALING
.392c80	48		pha		                PHA             ; begin setdp macro
.392c81	08		php		                PHP
.392c82	c2 20		rep #$20	                REP #$20        ; set A long
.392c84	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.392c87	5b		tcd		                TCD
.392c88	28		plp		                PLP
.392c89	68		pla		                PLA             ; end setdp macro
.392c8a	c2 20		rep #$20	                REP #$20        ; set A long
.392c8c	a9 20 00	lda #$0020	              LDA #$0020;
.392c8f	85 28		sta $28		              STA OPL2_REG_REGION
.392c91	20 92 30	jsr $393092	              JSR OPL2_GET_REG_OFFSET
.392c94	e2 20		sep #$20	                SEP #$20        ; set A short
.392c96	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.392c98	29 10		and #$10	              AND #$10
.392c9a	6b		rtl		                RTL
.392c9b					OPL2_GET_MODFREQMULTIPLE
.392c9b	48		pha		                PHA             ; begin setdp macro
.392c9c	08		php		                PHP
.392c9d	c2 20		rep #$20	                REP #$20        ; set A long
.392c9f	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.392ca2	5b		tcd		                TCD
.392ca3	28		plp		                PLP
.392ca4	68		pla		                PLA             ; end setdp macro
.392ca5	c2 20		rep #$20	                REP #$20        ; set A long
.392ca7	a9 20 00	lda #$0020	              LDA #$0020;
.392caa	85 28		sta $28		              STA OPL2_REG_REGION
.392cac	20 92 30	jsr $393092	              JSR OPL2_GET_REG_OFFSET
.392caf	e2 20		sep #$20	                SEP #$20        ; set A short
.392cb1	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.392cb3	29 0f		and #$0f	              AND #$0F
.392cb5	6b		rtl		              RTL
.392cb6					OPL2_SET_MODFREQMULTIPLE
.392cb6	48		pha		                PHA             ; begin setdp macro
.392cb7	08		php		                PHP
.392cb8	c2 20		rep #$20	                REP #$20        ; set A long
.392cba	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.392cbd	5b		tcd		                TCD
.392cbe	28		plp		                PLP
.392cbf	68		pla		                PLA             ; end setdp macro
.392cc0	c2 20		rep #$20	                REP #$20        ; set A long
.392cc2	a9 20 00	lda #$0020	                LDA #$0020;
.392cc5	85 28		sta $28		                STA OPL2_REG_REGION
.392cc7	20 92 30	jsr $393092	                JSR OPL2_GET_REG_OFFSET
.392cca	e2 20		sep #$20	                SEP #$20        ; set A short
.392ccc	a5 32		lda $32		                LDA OPL2_PARAMETER0
.392cce	29 0f		and #$0f	                AND #$0F
.392cd0	85 32		sta $32		                STA OPL2_PARAMETER0
.392cd2	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.392cd4	29 f0		and #$f0	                AND #$F0
.392cd6	05 32		ora $32		                ORA OPL2_PARAMETER0
.392cd8	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.392cda	6b		rtl		                RTL
.392cdb					OPL2_SET_SCALINGLEVEL
.392cdb	48		pha		                PHA             ; begin setdp macro
.392cdc	08		php		                PHP
.392cdd	c2 20		rep #$20	                REP #$20        ; set A long
.392cdf	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.392ce2	5b		tcd		                TCD
.392ce3	28		plp		                PLP
.392ce4	68		pla		                PLA             ; end setdp macro
.392ce5	c2 20		rep #$20	                REP #$20        ; set A long
.392ce7	a9 40 00	lda #$0040	                LDA #$0040;
.392cea	85 28		sta $28		                STA OPL2_REG_REGION
.392cec	20 92 30	jsr $393092	                JSR OPL2_GET_REG_OFFSET
.392cef	e2 20		sep #$20	                SEP #$20        ; set A short
.392cf1	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.392cf3	29 03		and #$03	                AND #$03
.392cf5	0a		asl a		                ASL
.392cf6	0a		asl a		                ASL
.392cf7	0a		asl a		                ASL
.392cf8	0a		asl a		                ASL
.392cf9	0a		asl a		                ASL
.392cfa	0a		asl a		                ASL
.392cfb	85 32		sta $32		                STA OPL2_PARAMETER0
.392cfd	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.392cff	29 3f		and #$3f	                AND #$3F
.392d01	05 32		ora $32		                ORA OPL2_PARAMETER0
.392d03	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.392d05	6b		rtl		                RTL
.392d06					OPL2_SET_VOLUME
.392d06	48		pha		                PHA             ; begin setdp macro
.392d07	08		php		                PHP
.392d08	c2 20		rep #$20	                REP #$20        ; set A long
.392d0a	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.392d0d	5b		tcd		                TCD
.392d0e	28		plp		                PLP
.392d0f	68		pla		                PLA             ; end setdp macro
.392d10	c2 20		rep #$20	                REP #$20        ; set A long
.392d12	a9 40 00	lda #$0040	                LDA #$0040  ;
.392d15	85 28		sta $28		                STA OPL2_REG_REGION
.392d17	20 92 30	jsr $393092	                JSR OPL2_GET_REG_OFFSET
.392d1a	e2 20		sep #$20	                SEP #$20        ; set A short
.392d1c	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Volume
.392d1e	29 3f		and #$3f	                AND #$3F
.392d20	85 32		sta $32		                STA OPL2_PARAMETER0
.392d22	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.392d24	29 c0		and #$c0	                AND #$C0
.392d26	05 32		ora $32		                ORA OPL2_PARAMETER0
.392d28	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.392d2a	6b		rtl		                RTL
.392d2b					OPL2_GET_VOLUME
.392d2b	48		pha		                PHA             ; begin setdp macro
.392d2c	08		php		                PHP
.392d2d	c2 20		rep #$20	                REP #$20        ; set A long
.392d2f	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.392d32	5b		tcd		                TCD
.392d33	28		plp		                PLP
.392d34	68		pla		                PLA             ; end setdp macro
.392d35	c2 20		rep #$20	                REP #$20        ; set A long
.392d37	a9 40 00	lda #$0040	                LDA #$0040  ;
.392d3a	85 28		sta $28		                STA OPL2_REG_REGION
.392d3c	20 92 30	jsr $393092	                JSR OPL2_GET_REG_OFFSET
.392d3f	e2 20		sep #$20	                SEP #$20        ; set A short
.392d41	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.392d43	29 3f		and #$3f	                AND #$3F
.392d45	6b		rtl		                RTL
.392d46					OPL2_SET_ATTACK
.392d46	48		pha		                PHA             ; begin setdp macro
.392d47	08		php		                PHP
.392d48	c2 20		rep #$20	                REP #$20        ; set A long
.392d4a	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.392d4d	5b		tcd		                TCD
.392d4e	28		plp		                PLP
.392d4f	68		pla		                PLA             ; end setdp macro
.392d50	c2 20		rep #$20	                REP #$20        ; set A long
.392d52	a9 60 00	lda #$0060	                LDA #$0060  ;
.392d55	85 28		sta $28		                STA OPL2_REG_REGION
.392d57	20 92 30	jsr $393092	                JSR OPL2_GET_REG_OFFSET
.392d5a	e2 20		sep #$20	                SEP #$20        ; set A short
.392d5c	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.392d5e	29 0f		and #$0f	                AND #$0F
.392d60	0a		asl a		                ASL
.392d61	0a		asl a		                ASL
.392d62	0a		asl a		                ASL
.392d63	0a		asl a		                ASL
.392d64	85 32		sta $32		                STA OPL2_PARAMETER0
.392d66	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.392d68	29 0f		and #$0f	                AND #$0F
.392d6a	05 32		ora $32		                ORA OPL2_PARAMETER0
.392d6c	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.392d6e	6b		rtl		                RTL
.392d6f					OPL2_GET_ATTACK
.392d6f	48		pha		                PHA             ; begin setdp macro
.392d70	08		php		                PHP
.392d71	c2 20		rep #$20	                REP #$20        ; set A long
.392d73	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.392d76	5b		tcd		                TCD
.392d77	28		plp		                PLP
.392d78	68		pla		                PLA             ; end setdp macro
.392d79	c2 20		rep #$20	                REP #$20        ; set A long
.392d7b	a9 60 00	lda #$0060	                LDA #$0060
.392d7e	85 28		sta $28		                STA OPL2_REG_REGION
.392d80	20 92 30	jsr $393092	                JSR OPL2_GET_REG_OFFSET
.392d83	e2 20		sep #$20	                SEP #$20        ; set A short
.392d85	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.392d87	29 f0		and #$f0	                AND #$F0
.392d89	4a		lsr a		                LSR
.392d8a	4a		lsr a		                LSR
.392d8b	4a		lsr a		                LSR
.392d8c	4a		lsr a		                LSR
.392d8d	6b		rtl		                RTL
.392d8e					OPL2_SET_DECAY
.392d8e	48		pha		                PHA             ; begin setdp macro
.392d8f	08		php		                PHP
.392d90	c2 20		rep #$20	                REP #$20        ; set A long
.392d92	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.392d95	5b		tcd		                TCD
.392d96	28		plp		                PLP
.392d97	68		pla		                PLA             ; end setdp macro
.392d98	c2 20		rep #$20	                REP #$20        ; set A long
.392d9a	a9 60 00	lda #$0060	                LDA #$0060;
.392d9d	85 28		sta $28		                STA OPL2_REG_REGION
.392d9f	20 92 30	jsr $393092	                JSR OPL2_GET_REG_OFFSET
.392da2	e2 20		sep #$20	                SEP #$20        ; set A short
.392da4	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.392da6	29 0f		and #$0f	                AND #$0F
.392da8	85 32		sta $32		                STA OPL2_PARAMETER0
.392daa	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.392dac	29 f0		and #$f0	                AND #$F0
.392dae	05 32		ora $32		                ORA OPL2_PARAMETER0
.392db0	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.392db2	6b		rtl		                RTL
.392db3					OPL2_GET_DECAY
.392db3	48		pha		                PHA             ; begin setdp macro
.392db4	08		php		                PHP
.392db5	c2 20		rep #$20	                REP #$20        ; set A long
.392db7	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.392dba	5b		tcd		                TCD
.392dbb	28		plp		                PLP
.392dbc	68		pla		                PLA             ; end setdp macro
.392dbd	c2 20		rep #$20	                REP #$20        ; set A long
.392dbf	a9 60 00	lda #$0060	                LDA #$0060
.392dc2	85 28		sta $28		                STA OPL2_REG_REGION
.392dc4	20 92 30	jsr $393092	                JSR OPL2_GET_REG_OFFSET
.392dc7	e2 20		sep #$20	                SEP #$20        ; set A short
.392dc9	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.392dcb	29 0f		and #$0f	                AND #$0F
.392dcd	6b		rtl		                RTL
.392dce					OPL2_SET_SUSTAIN
.392dce	48		pha		                PHA             ; begin setdp macro
.392dcf	08		php		                PHP
.392dd0	c2 20		rep #$20	                REP #$20        ; set A long
.392dd2	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.392dd5	5b		tcd		                TCD
.392dd6	28		plp		                PLP
.392dd7	68		pla		                PLA             ; end setdp macro
.392dd8	c2 20		rep #$20	                REP #$20        ; set A long
.392dda	a9 80 00	lda #$0080	                LDA #$0080;
.392ddd	85 28		sta $28		                STA OPL2_REG_REGION
.392ddf	20 92 30	jsr $393092	                JSR OPL2_GET_REG_OFFSET
.392de2	e2 20		sep #$20	                SEP #$20        ; set A short
.392de4	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.392de6	29 0f		and #$0f	                AND #$0F
.392de8	0a		asl a		                ASL
.392de9	0a		asl a		                ASL
.392dea	0a		asl a		                ASL
.392deb	0a		asl a		                ASL
.392dec	85 32		sta $32		                STA OPL2_PARAMETER0
.392dee	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.392df0	29 0f		and #$0f	                AND #$0F
.392df2	05 32		ora $32		                ORA OPL2_PARAMETER0
.392df4	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.392df6	6b		rtl		                RTL
.392df7					OPL2_GET_SUSTAIN
.392df7	48		pha		                PHA             ; begin setdp macro
.392df8	08		php		                PHP
.392df9	c2 20		rep #$20	                REP #$20        ; set A long
.392dfb	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.392dfe	5b		tcd		                TCD
.392dff	28		plp		                PLP
.392e00	68		pla		                PLA             ; end setdp macro
.392e01	c2 20		rep #$20	                REP #$20        ; set A long
.392e03	a9 80 00	lda #$0080	                LDA #$0080
.392e06	85 28		sta $28		                STA OPL2_REG_REGION
.392e08	20 92 30	jsr $393092	                JSR OPL2_GET_REG_OFFSET
.392e0b	e2 20		sep #$20	                SEP #$20        ; set A short
.392e0d	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.392e0f	29 f0		and #$f0	                AND #$F0
.392e11	4a		lsr a		                LSR
.392e12	4a		lsr a		                LSR
.392e13	4a		lsr a		                LSR
.392e14	4a		lsr a		                LSR
.392e15	6b		rtl		                RTL
.392e16					OPL2_SET_RELEASE
.392e16	48		pha		                PHA             ; begin setdp macro
.392e17	08		php		                PHP
.392e18	c2 20		rep #$20	                REP #$20        ; set A long
.392e1a	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.392e1d	5b		tcd		                TCD
.392e1e	28		plp		                PLP
.392e1f	68		pla		                PLA             ; end setdp macro
.392e20	c2 20		rep #$20	                REP #$20        ; set A long
.392e22	a9 80 00	lda #$0080	                LDA #$0080;
.392e25	85 28		sta $28		                STA OPL2_REG_REGION
.392e27	20 92 30	jsr $393092	                JSR OPL2_GET_REG_OFFSET
.392e2a	e2 20		sep #$20	                SEP #$20        ; set A short
.392e2c	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.392e2e	29 0f		and #$0f	                AND #$0F
.392e30	85 32		sta $32		                STA OPL2_PARAMETER0
.392e32	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.392e34	29 f0		and #$f0	                AND #$F0
.392e36	05 32		ora $32		                ORA OPL2_PARAMETER0
.392e38	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.392e3a	6b		rtl		                RTL
.392e3b					OPL2_GET_RELEASE
.392e3b	48		pha		                PHA             ; begin setdp macro
.392e3c	08		php		                PHP
.392e3d	c2 20		rep #$20	                REP #$20        ; set A long
.392e3f	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.392e42	5b		tcd		                TCD
.392e43	28		plp		                PLP
.392e44	68		pla		                PLA             ; end setdp macro
.392e45	c2 20		rep #$20	                REP #$20        ; set A long
.392e47	a9 80 00	lda #$0080	                LDA #$0080
.392e4a	85 28		sta $28		                STA OPL2_REG_REGION
.392e4c	20 92 30	jsr $393092	                JSR OPL2_GET_REG_OFFSET
.392e4f	e2 20		sep #$20	                SEP #$20        ; set A short
.392e51	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.392e53	29 0f		and #$0f	                AND #$0F
.392e55	6b		rtl		                RTL
.392e56					OPL2_SET_FNUMBER
.392e56	48		pha		                PHA             ; begin setdp macro
.392e57	08		php		                PHP
.392e58	c2 20		rep #$20	                REP #$20        ; set A long
.392e5a	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.392e5d	5b		tcd		                TCD
.392e5e	28		plp		                PLP
.392e5f	68		pla		                PLA             ; end setdp macro
.392e60	e2 20		sep #$20	                SEP #$20        ; set A short
.392e62	18		clc		                CLC
.392e63	a5 27		lda $27		                LDA OPL2_CHANNEL
.392e65	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.392e67	69 a0		adc #$a0	                ADC #$A0
.392e69	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.392e6b	a9 00		lda #$00	                LDA #$00
.392e6d	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.392e6f	c2 30		rep #$30	                REP #$30        ; set A&X long
.392e71	18		clc		                CLC
.392e72	a9 00 e7	lda #$e700	                LDA #<>OPL2_S_BASE
.392e75	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.392e77	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.392e79	a9 af 00	lda #$00af	                LDA #`OPL2_S_BASE
.392e7c	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.392e7e	e2 20		sep #$20	                SEP #$20        ; set A short
.392e80	a5 32		lda $32		                LDA OPL2_PARAMETER0     ; Load the first 8 Bits Value of FNumber
.392e82	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]  ; Load
.392e84	18		clc		                CLC
.392e85	a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.392e87	69 10		adc #$10	                ADC #$10
.392e89	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.392e8b	a5 33		lda $33		                LDA OPL2_PARAMETER1
.392e8d	29 03		and #$03	                AND #$03
.392e8f	85 33		sta $33		                STA OPL2_PARAMETER1
.392e91	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.392e93	29 fc		and #$fc	                AND #$FC
.392e95	05 33		ora $33		                ORA OPL2_PARAMETER1
.392e97	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.392e99	6b		rtl		                RTL
.392e9a					OPL2_GET_FNUMBER
.392e9a	48		pha		                PHA             ; begin setdp macro
.392e9b	08		php		                PHP
.392e9c	c2 20		rep #$20	                REP #$20        ; set A long
.392e9e	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.392ea1	5b		tcd		                TCD
.392ea2	28		plp		                PLP
.392ea3	68		pla		                PLA             ; end setdp macro
.392ea4	e2 20		sep #$20	                SEP #$20        ; set A short
.392ea6	18		clc		                CLC
.392ea7	a5 27		lda $27		                LDA OPL2_CHANNEL
.392ea9	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.392eab	69 a0		adc #$a0	                ADC #$A0
.392ead	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.392eaf	a9 00		lda #$00	                LDA #$00
.392eb1	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.392eb3	c2 30		rep #$30	                REP #$30        ; set A&X long
.392eb5	18		clc		                CLC
.392eb6	a9 00 e7	lda #$e700	                LDA #<>OPL2_S_BASE
.392eb9	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.392ebb	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.392ebd	a9 af 00	lda #$00af	                LDA #`OPL2_S_BASE
.392ec0	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.392ec2	e2 20		sep #$20	                SEP #$20        ; set A short
.392ec4	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.392ec6	85 32		sta $32		                STA OPL2_PARAMETER0
.392ec8	18		clc		                CLC
.392ec9	a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.392ecb	69 10		adc #$10	                ADC #$10
.392ecd	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.392ecf	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.392ed1	29 03		and #$03	                AND #$03
.392ed3	85 33		sta $33		                STA OPL2_PARAMETER1
.392ed5	6b		rtl		                RTL
.392ed6					OPL2_Set_Frequency
.392ed6	6b		rtl		                RTL
.392ed7					OPL2_Get_Frequency
.392ed7	6b		rtl		                RTL
.392ed8					OPL2_SET_BLOCK
.392ed8	48		pha		                PHA             ; begin setdp macro
.392ed9	08		php		                PHP
.392eda	c2 20		rep #$20	                REP #$20        ; set A long
.392edc	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.392edf	5b		tcd		                TCD
.392ee0	28		plp		                PLP
.392ee1	68		pla		                PLA             ; end setdp macro
.392ee2	e2 20		sep #$20	                SEP #$20        ; set A short
.392ee4	18		clc		                CLC
.392ee5	a5 27		lda $27		                LDA OPL2_CHANNEL
.392ee7	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.392ee9	69 b0		adc #$b0	                ADC #$B0
.392eeb	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.392eed	a9 00		lda #$00	                LDA #$00
.392eef	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.392ef1	c2 30		rep #$30	                REP #$30        ; set A&X long
.392ef3	18		clc		                CLC
.392ef4	a9 00 e7	lda #$e700	                LDA #<>OPL2_S_BASE
.392ef7	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.392ef9	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.392efb	a9 af 00	lda #$00af	                LDA #`OPL2_S_BASE
.392efe	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.392f00	e2 20		sep #$20	                SEP #$20        ; set A short
.392f02	a5 31		lda $31		                LDA OPL2_OCTAVE
.392f04	29 07		and #$07	                AND #$07
.392f06	0a		asl a		                ASL
.392f07	0a		asl a		                ASL
.392f08	85 31		sta $31		                STA OPL2_OCTAVE
.392f0a	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.392f0c	29 e3		and #$e3	                AND #$E3
.392f0e	05 31		ora $31		                ORA OPL2_OCTAVE
.392f10	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.392f12	60		rts		                RTS
.392f13					OPL2_SET_KEYON
.392f13	48		pha		                PHA             ; begin setdp macro
.392f14	08		php		                PHP
.392f15	c2 20		rep #$20	                REP #$20        ; set A long
.392f17	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.392f1a	5b		tcd		                TCD
.392f1b	28		plp		                PLP
.392f1c	68		pla		                PLA             ; end setdp macro
.392f1d	e2 20		sep #$20	                SEP #$20        ; set A short
.392f1f	18		clc		                CLC
.392f20	a5 27		lda $27		                LDA OPL2_CHANNEL
.392f22	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.392f24	69 b0		adc #$b0	                ADC #$B0
.392f26	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.392f28	a9 00		lda #$00	                LDA #$00
.392f2a	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.392f2c	c2 30		rep #$30	                REP #$30        ; set A&X long
.392f2e	18		clc		                CLC
.392f2f	a9 00 e7	lda #$e700	                LDA #<>OPL2_S_BASE
.392f32	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.392f34	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.392f36	a9 af 00	lda #$00af	                LDA #`OPL2_S_BASE
.392f39	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.392f3b	e2 20		sep #$20	                SEP #$20        ; set A short
.392f3d	a5 32		lda $32		                LDA OPL2_PARAMETER0
.392f3f	29 01		and #$01	                AND #$01
.392f41	f0 02		beq $392f45	                BEQ SET_KEYON_OFF
.392f43	a9 20		lda #$20	                LDA #$20
.392f45					    SET_KEYON_OFF
.392f45	85 32		sta $32		                STA OPL2_PARAMETER0
.392f47	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.392f49	29 df		and #$df	                AND #$DF
.392f4b	05 32		ora $32		                ORA OPL2_PARAMETER0
.392f4d	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.392f4f	60		rts		                RTS
.392f50					OPL2_SET_FEEDBACK
.392f50	48		pha		                PHA             ; begin setdp macro
.392f51	08		php		                PHP
.392f52	c2 20		rep #$20	                REP #$20        ; set A long
.392f54	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.392f57	5b		tcd		                TCD
.392f58	28		plp		                PLP
.392f59	68		pla		                PLA             ; end setdp macro
.392f5a	e2 20		sep #$20	                SEP #$20        ; set A short
.392f5c	18		clc		              CLC
.392f5d	a5 27		lda $27		              LDA OPL2_CHANNEL
.392f5f	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.392f61	69 c0		adc #$c0	              ADC #$C0
.392f63	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.392f65	a9 00		lda #$00	              LDA #$00
.392f67	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.392f69	c2 30		rep #$30	                REP #$30        ; set A&X long
.392f6b	18		clc		              CLC
.392f6c	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.392f6f	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.392f71	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.392f73	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.392f76	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.392f78	e2 20		sep #$20	                SEP #$20        ; set A short
.392f7a	a5 32		lda $32		              LDA OPL2_PARAMETER0
.392f7c	29 07		and #$07	              AND #$07
.392f7e	0a		asl a		              ASL
.392f7f	85 32		sta $32		              STA OPL2_PARAMETER0
.392f81	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.392f83	29 01		and #$01	              AND #$01
.392f85	05 32		ora $32		              ORA OPL2_PARAMETER0
.392f87	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.392f89	6b		rtl		                RTL
.392f8a					OPL2_SET_SYNTHMODE
.392f8a	48		pha		                PHA             ; begin setdp macro
.392f8b	08		php		                PHP
.392f8c	c2 20		rep #$20	                REP #$20        ; set A long
.392f8e	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.392f91	5b		tcd		                TCD
.392f92	28		plp		                PLP
.392f93	68		pla		                PLA             ; end setdp macro
.392f94	08		php		              PHP ; Push the Carry
.392f95	e2 20		sep #$20	                SEP #$20        ; set A short
.392f97	18		clc		              CLC
.392f98	a5 27		lda $27		              LDA OPL2_CHANNEL
.392f9a	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.392f9c	69 c0		adc #$c0	              ADC #$C0
.392f9e	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.392fa0	a9 00		lda #$00	              LDA #$00
.392fa2	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.392fa4	c2 30		rep #$30	                REP #$30        ; set A&X long
.392fa6	18		clc		              CLC
.392fa7	a9 00 e7	lda #$e700	              LDA #<>OPL2_S_BASE
.392faa	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.392fac	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.392fae	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.392fb1	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.392fb3	28		plp		              PLP ; Pull the Carry out
.392fb4	e2 20		sep #$20	                SEP #$20        ; set A short
.392fb6	b0 08		bcs $392fc0	              BCS OPL2_Set_Synthmode_Set;
.392fb8	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.392fba	29 fe		and #$fe	              AND #$FE
.392fbc	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.392fbe	80 06		bra $392fc6	              BRA OPL2_Set_Synthmode_Exit
.392fc0					OPL2_Set_Synthmode_Set
.392fc0	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.392fc2	09 01		ora #$01	              ORA #$01
.392fc4	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.392fc6					OPL2_Set_Synthmode_Exit
.392fc6	6b		rtl		                RTL
.392fc7					OPL2_SET_DEEPTREMOLO
.392fc7	48		pha		                PHA             ; begin setdp macro
.392fc8	08		php		                PHP
.392fc9	c2 20		rep #$20	                REP #$20        ; set A long
.392fcb	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.392fce	5b		tcd		                TCD
.392fcf	28		plp		                PLP
.392fd0	68		pla		                PLA             ; end setdp macro
.392fd1	c2 20		rep #$20	                REP #$20        ; set A long
.392fd3	a9 bd e7	lda #$e7bd	              LDA #<>OPL2_S_BASE + $00BD
.392fd6	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.392fd8	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.392fdb	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.392fdd	e2 20		sep #$20	                SEP #$20        ; set A short
.392fdf	b0 08		bcs $392fe9	              BCS OPL2_Set_DeepTremolo_Set;
.392fe1	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.392fe3	29 7f		and #$7f	              AND #$7F
.392fe5	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.392fe7	80 06		bra $392fef	              BRA OPL2_Set_DeepTremolo_Exit
.392fe9					OPL2_Set_DeepTremolo_Set
.392fe9	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.392feb	09 80		ora #$80	              ORA #$80
.392fed	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.392fef					OPL2_Set_DeepTremolo_Exit
.392fef	6b		rtl		                RTL
.392ff0					OPL2_SET_DEEPVIBRATO
.392ff0	48		pha		                PHA             ; begin setdp macro
.392ff1	08		php		                PHP
.392ff2	c2 20		rep #$20	                REP #$20        ; set A long
.392ff4	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.392ff7	5b		tcd		                TCD
.392ff8	28		plp		                PLP
.392ff9	68		pla		                PLA             ; end setdp macro
.392ffa	c2 20		rep #$20	                REP #$20        ; set A long
.392ffc	a9 bd e7	lda #$e7bd	              LDA #<>OPL2_S_BASE + $00BD
.392fff	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393001	a9 af 00	lda #$00af	              LDA #`OPL2_S_BASE
.393004	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393006	e2 20		sep #$20	                SEP #$20        ; set A short
.393008	b0 08		bcs $393012	              BCS OPL2_Set_DeepVibrato_Set;
.39300a	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39300c	29 bf		and #$bf	              AND #$BF
.39300e	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393010	80 06		bra $393018	              BRA OPL2_Set_DeepVibrato_Exit
.393012					OPL2_Set_DeepVibrato_Set
.393012	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393014	09 40		ora #$40	              ORA #$40
.393016	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393018					OPL2_Set_DeepVibrato_Exit
.393018	6b		rtl		                RTL
.393019					OPL2_SET_PERCUSSION
.393019	48		pha		                PHA             ; begin setdp macro
.39301a	08		php		                PHP
.39301b	c2 20		rep #$20	                REP #$20        ; set A long
.39301d	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393020	5b		tcd		                TCD
.393021	28		plp		                PLP
.393022	68		pla		                PLA             ; end setdp macro
.393023	c2 20		rep #$20	                REP #$20        ; set A long
.393025	a9 bd e7	lda #$e7bd	                LDA #<>OPL2_S_BASE + $00BD
.393028	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.39302a	a9 af 00	lda #$00af	                LDA #`OPL2_S_BASE
.39302d	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.39302f	e2 20		sep #$20	                SEP #$20        ; set A short
.393031	b0 08		bcs $39303b	                BCS OPL2_Set_Percussion_Set;
.393033	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393035	29 df		and #$df	                AND #$DF
.393037	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393039	80 06		bra $393041	                BRA OPL2_Set_Percussion_Exit
.39303b					OPL2_Set_Percussion_Set
.39303b	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39303d	09 20		ora #$20	                ORA #$20
.39303f	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393041					OPL2_Set_Percussion_Exit
.393041	6b		rtl		                RTL
.393042					OPL2_SET_DRUMS
.393042	48		pha		                PHA             ; begin setdp macro
.393043	08		php		                PHP
.393044	c2 20		rep #$20	                REP #$20        ; set A long
.393046	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393049	5b		tcd		                TCD
.39304a	28		plp		                PLP
.39304b	68		pla		                PLA             ; end setdp macro
.39304c	c2 20		rep #$20	                REP #$20        ; set A long
.39304e	a9 bd e7	lda #$e7bd	                LDA #<>OPL2_S_BASE + $00BD
.393051	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393053	a9 af 00	lda #$00af	                LDA #`OPL2_S_BASE
.393056	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393058	e2 20		sep #$20	                SEP #$20        ; set A short
.39305a	a5 32		lda $32		                LDA OPL2_PARAMETER0
.39305c	29 1f		and #$1f	                AND #$1F
.39305e	85 32		sta $32		                STA OPL2_PARAMETER0
.393060	49 ff		eor #$ff	                EOR #$FF
.393062	85 33		sta $33		                STA OPL2_PARAMETER1
.393064	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393066	25 33		and $33		                AND OPL2_PARAMETER1
.393068	05 32		ora $32		                ORA OPL2_PARAMETER0
.39306a	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.39306c	6b		rtl		                RTL
.39306d					OPL2_SET_WAVEFORM
.39306d	48		pha		                PHA             ; begin setdp macro
.39306e	08		php		                PHP
.39306f	c2 20		rep #$20	                REP #$20        ; set A long
.393071	a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393074	5b		tcd		                TCD
.393075	28		plp		                PLP
.393076	68		pla		                PLA             ; end setdp macro
.393077	c2 20		rep #$20	                REP #$20        ; set A long
.393079	a9 e0 00	lda #$00e0	                LDA #$00E0;
.39307c	85 28		sta $28		                STA OPL2_REG_REGION
.39307e	20 92 30	jsr $393092	                JSR OPL2_GET_REG_OFFSET
.393081	e2 20		sep #$20	                SEP #$20        ; set A short
.393083	a5 32		lda $32		                LDA OPL2_PARAMETER0
.393085	29 03		and #$03	                AND #$03
.393087	85 32		sta $32		                STA OPL2_PARAMETER0
.393089	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39308b	29 fc		and #$fc	                AND #$FC
.39308d	05 32		ora $32		                ORA OPL2_PARAMETER0
.39308f	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393091	6b		rtl		                RTL
.393092					OPL2_GET_REG_OFFSET
.393092	e2 30		sep #$30	                SEP #$30        ; set A&X short
.393094	a5 27		lda $27		                LDA OPL2_CHANNEL
.393096	29 0f		and #$0f	                AND #$0F
.393098	aa		tax		                TAX
.393099	a5 26		lda $26		                LDA OPL2_OPERATOR   ; 0 = operator 1, other = operator 2
.39309b	d0 06		bne $3930a3	                BNE OPL2_Get_Register_Offset_l0
.39309d	bf dc 06 39	lda $3906dc,x	                LDA @lregisterOffsets_operator0, X
.3930a1	80 04		bra $3930a7	                BRA OPL2_Get_Register_Offset_exit
.3930a3					OPL2_Get_Register_Offset_l0
.3930a3	bf e5 06 39	lda $3906e5,x	                LDA @lregisterOffsets_operator1, X
.3930a7					OPL2_Get_Register_Offset_exit
.3930a7	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.3930a9	a9 00		lda #$00	                LDA #$00
.3930ab	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.3930ad	c2 30		rep #$30	                REP #$30        ; set A&X long
.3930af	18		clc		                CLC
.3930b0	a9 00 e7	lda #$e700	                LDA #<>OPL2_S_BASE
.3930b3	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.3930b5	65 28		adc $28		                ADC OPL2_REG_REGION ; Ex: $20, or $40, $60, $80 (in 16bits)
.3930b7	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.3930b9	a9 af 00	lda #$00af	                LDA #`OPL2_S_BASE
.3930bc	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.3930be	60		rts		                RTS

;******  Return to file: src\kernel.asm


;******  Processing file: src\ide_library.asm

.0000					IDE_ID
>0000	00 00				General_Config        .word $0000
>0002	00 00				Obsolete0             .word $0000
>0004	00 00				Specific_Config       .word $0000
>0006	00 00				Obsolete1             .word $0000
>0008	00 00				Retired0              .word $0000
>000a	00 00				Retired1              .word $0000
>000c	00 00				Obsolete2             .word $0000
>000e	00 00				Reserved_CFlash0      .word $0000
>0010	00 00				Reserved_CFlash1      .word $0000
>0012	00 00				Retired2              .word $0000
>0014	00 00 00 00 00 00 00 00		Serial_Number_String  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>001c	00 00 00 00 00 00 00 00 00 00 00 00
>0028	00 00 00 00			Retired3              .word $0000, $0000
>002c	00 00				Obsolete3             .word $0000
>002e	00 00 00 00 00 00 00 00		Firmware_Rev_String   .byte $00, $00, $00, $00, $00, $00, $00, $00
>0036	00 00 00 00 00 00 00 00		Model_Number_String   .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>003e	00 00 00 00 00 00 00 00
>0046	00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>004e	00 00 00 00 00 00 00 00
>0056	00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00
>005e	00 00				Max_Number_Logic_Sec  .word $0000
>0060	00 00				Trusted_Comp_Feature  .word $0000
>0062	00 00 00 00			Capabilities          .word $0000, $0000
>0066	00 00 00 00			Obsolete4             .word $0000, $0000
>006a	00 00				Free_Fall_Control     .word $0000
>006c	00 00 00 00 00 00 00 00		Obsolete5             .word $0000, $0000, $0000, $0000, $0000
>0074	00 00
>0076	00 00				Reserved0             .word $0000
>0078	00 00 00 00			Total_Addy_Logic_Sec  .word $0000, $0000
>007c	00 00				Obsolete6             .word $0000
>007e	00 00 00 00			Reserved1             .word $0000, $0000
>0082	00 00				Min_Multiword_DMA_Trf .word $0000
>0084	00 00				Manu_Recommended_Mult .word $0000
>0086	00 00				Min_PIO_Trf           .word $0000      ; Word 67
>0088	00 00				Min_PIO_Trf_with_IORD .word $0000      ; Word 68
>008a	00 00 00 00			Reserved2             .word $0000, $0000
>008e	00 00 00 00 00 00 00 00		Reserved3             .word $0000, $0000, $0000, $0000
>0096	00 00				Queue_Dept            .word $0000
>0098	00 00				SATA_Capabilities     .word $0000
>009a	00 00				Reserved_SATA         .word $0000
>009c	00 00				Sup_Feat_SATA         .word $0000
>009e	00 00				Sup_Feat_SATA_Enabled .word $0000    ; Word 79
>00a0	00 00				Major_Version_Number  .word $0000    ; Word 80
>00a2	00 00				Minor_Version_Number  .word $0000    ; Word 81
>00a4	00 00 00 00 00 00 00 00		Cmd_And_Features_Sup  .word $0000, $0000, $0000, $0000, $0000, $0000
>00ac	00 00 00 00
>00b0	00 00				UDMA_Modes            .word $0000
>00b2	00 00 00 00			Reserved4             .word $0000, $0000 ; Word 89
>00b6	00 00				Current_APM_Level     .word $0000
>00b8	00 00				Master_Password_Ident .word $0000
>00ba	00 00				Hardware_Reset_Result .word $0000
>00bc	00 00				Current_AAM_Value     .word $0000  ; Word 94
>00be	00 00				Stream_Min_Req_Size   .word $0000  ; Word 95
>00c0	00 00				Stream_Trf_Time_DMA   .word $0000  ; Word 96
>00c2	00 00				Stream_Access_Lat     .word $0000
>00c4	00 00 00 00			Streaming_Perf_Gran   .word $0000, $0000
>00c8	00 00 00 00 00 00 00 00		Tot_Num_Add_Logic_Sec .word $0000, $0000, $0000, $0000
>00d0	00 00				Streaming_Trf_Time    .word $0000 ; Word 104
>00d2	00 00				Reserved5             .word $0000 ; Word 105
.3930bf					IDE_INIT
.3930bf	e2 20		sep #$20	                SEP #$20        ; set A short
.3930c1	20 e2 30	jsr $3930e2	              JSR IDE_DRIVE_BSY ; Check to see if drive is busy
.3930c4	a9 00		lda #$00	              LDA #$00
.3930c6	8f 35 e8 af	sta $afe835	              STA IDE_CLDR_HI
.3930ca	8f 34 e8 af	sta $afe834	              STA IDE_CLDR_LO
.3930ce	8f 32 e8 af	sta $afe832	              STA IDE_SECT_CNT
.3930d2	a9 01		lda #$01	              LDA #$01
.3930d4	8f 33 e8 af	sta $afe833	              STA IDE_SECT_SRT
.3930d8	a9 a0		lda #$a0	              LDA #$A0 ; HEAD 0 - Select Master Drive
.3930da	8f 36 e8 af	sta $afe836	              STA IDE_HEAD
.3930de	20 f8 30	jsr $3930f8	              JSR IDE_DRV_READY_NOTBUSY
.3930e1	6b		rtl		              RTL
.3930e2					IDE_DRIVE_BSY
.3930e2	af 37 e8 af	lda $afe837	              LDA IDE_CMD_STAT
.3930e6	29 80		and #$80	              AND #$80    ;; Check for RDY Bit, this needs to be 1'b1
.3930e8	c9 80		cmp #$80	              CMP #$80    ;; If not go read again
.3930ea	f0 f6		beq $3930e2	              BEQ IDE_DRIVE_BSY
.3930ec	60		rts		              RTS
.3930ed					IDE_DRIVE_READY
.3930ed	af 37 e8 af	lda $afe837	              LDA IDE_CMD_STAT
.3930f1	29 40		and #$40	              AND #$40    ;; Check to see if the Busy Signal is Cleared
.3930f3	c9 40		cmp #$40	              CMP #$40    ; if it is still one, then go back to read again.
.3930f5	d0 f6		bne $3930ed	              BNE IDE_DRIVE_READY
.3930f7	60		rts		              RTS
.3930f8					IDE_DRV_READY_NOTBUSY
.3930f8	af 37 e8 af	lda $afe837	              LDA IDE_CMD_STAT
.3930fc	29 40		and #$40	              AND #$40    ;; Check to see if the Busy Signal is Cleared
.3930fe	c9 40		cmp #$40	              CMP #$40    ; if it is still one, then go back to read again.
.393100	d0 f6		bne $3930f8	              BNE IDE_DRV_READY_NOTBUSY
.393102	af 37 e8 af	lda $afe837	              LDA IDE_CMD_STAT
.393106	29 80		and #$80	              AND #$80    ;; Check for RDY Bit, this needs to be 1'b1
.393108	c9 80		cmp #$80	              CMP #$80    ;; If not go read again
.39310a	f0 ec		beq $3930f8	              BEQ IDE_DRV_READY_NOTBUSY
.39310c	60		rts		              RTS
.39310d					IDE_NOT_DRQ
.39310d	af 37 e8 af	lda $afe837	              LDA IDE_CMD_STAT
.393111	29 08		and #$08	              AND #$08
.393113	c9 08		cmp #$08	              CMP #$08
.393115	d0 f6		bne $39310d	              BNE IDE_NOT_DRQ
.393117	60		rts		              RTS
.393118					IDE_GET_512BYTES
.393118	c2 30		rep #$30	                REP #$30        ; set A&X long
.39311a	af 38 e8 af	lda $afe838	              LDA IDE_DATA_LO
.39311e	a2 00 00	ldx #$0000	              LDX #$0000
.393121					IDE_GET_INFO_KEEP_FETCHING
.393121	af 38 e8 af	lda $afe838	              LDA IDE_DATA_LO
.393125	9f 00 04 00	sta $000400,x	              STA SDOS_BLK_BEGIN, X
.393129	e8		inx		              INX
.39312a	e8		inx		              INX
.39312b	e0 00 02	cpx #$0200	              CPX #$0200
.39312e	d0 f1		bne $393121	              BNE IDE_GET_INFO_KEEP_FETCHING
.393130	6b		rtl		              RTL
.393131					IDE_GET_INFO
.393131	e2 20		sep #$20	                SEP #$20        ; set A short
.393133	20 e2 30	jsr $3930e2	              JSR IDE_DRIVE_BSY
.393136	a9 ec		lda #$ec	              LDA #$EC              ; Send the Command #$EC to fetch the INFO about the HDD
.393138	8f 37 e8 af	sta $afe837	              STA IDE_CMD_STAT
.39313c	20 f8 30	jsr $3930f8	              JSR IDE_DRV_READY_NOTBUSY
.39313f	20 0d 31	jsr $39310d	              JSR IDE_NOT_DRQ       ; Wait for the Drive to let us know that the Data is ready
.393142	22 18 31 39	jsl $393118	              JSL IDE_GET_512BYTES
.393146	e2 20		sep #$20	                SEP #$20        ; set A short
.393148	c2 10		rep #$10	                REP #$10        ; set X long
.39314a	a2 00 00	ldx #$0000	              LDX #$0000
.39314d					GET_INFO_LOOP
.39314d	bf 37 04 00	lda $000437,x	              LDA SDOS_BLK_BEGIN+55, X    ; Model String
.393151	22 7e 06 39	jsl $39067e	              JSL IPUTC
.393155	bf 36 04 00	lda $000436,x	              LDA SDOS_BLK_BEGIN+54, X    ; Model String
.393159	22 7e 06 39	jsl $39067e	              JSL IPUTC
.39315d	e8		inx		              INX
.39315e	e8		inx		              INX
.39315f	e0 28 00	cpx #$0028	              CPX #40
.393162	d0 e9		bne $39314d	              BNE GET_INFO_LOOP
.393164	6b		rtl		              RTL
.393165					IDE_DISPLAY_INFO

;******  Return to file: src\kernel.asm


;******  Processing file: src\keyboard.asm

.393165					KEYBOARD_INTERRUPT
.393165	48		pha		                PHA             ; begin setdp macro
.393166	08		php		                PHP
.393167	c2 20		rep #$20	                REP #$20        ; set A long
.393169	a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.39316c	5b		tcd		                TCD
.39316d	28		plp		                PLP
.39316e	68		pla		                PLA             ; end setdp macro
.39316f	a2 00 00	ldx #$0000	                ldx #$0000
.393172	e2 10		sep #$10	                SEP #$10        ; set X short
.393174	e2 20		sep #$20	                SEP #$20        ; set A short
.393176	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.39317a	29 01		and #$01	                AND #FNX1_INT00_KBD
.39317c	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.393180					IRQ_HANDLER_FETCH
.393180	af 60 10 af	lda $af1060	                LDA @lKBD_INPT_BUF      ; Get Scan Code from KeyBoard
.393184	85 88		sta $0f88	                STA KEYBOARD_SC_TMP     ; Save Code Immediately
.393186	c9 2a		cmp #$2a	NOT_SCROLLLOCK  CMP #$2A                ; Left Shift Pressed
.393188	d0 03		bne $39318d	                BNE NOT_KB_SET_LSHIFT
.39318a	82 b2 00	brl $39323f	                BRL KB_SET_SHIFT
.39318d					NOT_KB_SET_LSHIFT
.39318d	c9 aa		cmp #$aa	                CMP #$AA                ; Left Shift Unpressed
.39318f	d0 03		bne $393194	                BNE NOT_KB_CLR_LSHIFT
.393191	82 b4 00	brl $393248	                BRL KB_CLR_SHIFT
.393194					NOT_KB_CLR_LSHIFT
.393194	c9 36		cmp #$36	                CMP #$36                ; Right Shift Pressed
.393196	d0 03		bne $39319b	                BNE NOT_KB_SET_RSHIFT
.393198	82 a4 00	brl $39323f	                BRL KB_SET_SHIFT
.39319b					NOT_KB_SET_RSHIFT
.39319b	c9 b6		cmp #$b6	                CMP #$B6                ; Right Shift Unpressed
.39319d	d0 03		bne $3931a2	                BNE NOT_KB_CLR_RSHIFT
.39319f	82 a6 00	brl $393248	                BRL KB_CLR_SHIFT
.3931a2					NOT_KB_CLR_RSHIFT
.3931a2	c9 1d		cmp #$1d	                CMP #$1D                ; Left CTRL pressed
.3931a4	d0 03		bne $3931a9	                BNE NOT_KB_SET_CTRL
.3931a6	82 a8 00	brl $393251	                BRL KB_SET_CTRL
.3931a9					NOT_KB_SET_CTRL
.3931a9	c9 9d		cmp #$9d	                CMP #$9D                ; Left CTRL Unpressed
.3931ab	d0 03		bne $3931b0	                BNE NOT_KB_CLR_CTRL
.3931ad	82 aa 00	brl $39325a	                BRL KB_CLR_CTRL
.3931b0					NOT_KB_CLR_CTRL
.3931b0	c9 38		cmp #$38	                CMP #$38                ; Left ALT Pressed
.3931b2	d0 03		bne $3931b7	                BNE NOT_KB_SET_ALT
.3931b4	82 ac 00	brl $393263	                BRL KB_SET_ALT
.3931b7					NOT_KB_SET_ALT
.3931b7	c9 b8		cmp #$b8	                CMP #$B8                ; Left ALT Unpressed
.3931b9	d0 03		bne $3931be	                BNE NOT_KB_CLR_ALT
.3931bb	82 ae 00	brl $39326c	                BRL KB_CLR_ALT
.3931be	c9 e0		cmp #$e0	NOT_KB_CLR_ALT  CMP #$E0                ; Prefixed scan code
.3931c0	d0 03		bne $3931c5	                BNE NOT_PREFIXED
.3931c2	82 b0 00	brl $393275	                BRL KB_SET_PREFIX
.3931c5	c9 45		cmp #$45	NOT_PREFIXED    CMP #$45                ; Numlock Pressed
.3931c7	d0 03		bne $3931cc	                BNE NOT_KB_SET_NUM
.3931c9	82 bb 00	brl $393287	                BRL KB_TOG_NUMLOCK
.3931cc	c9 46		cmp #$46	NOT_KB_SET_NUM  CMP #$46                ; Scroll Lock Pressed
.3931ce	d0 03		bne $3931d3	                BNE NOT_KB_SET_SCR
.3931d0	82 ab 00	brl $39327e	                BRL KB_TOG_SCRLOCK
.3931d3	c9 3a		cmp #$3a	NOT_KB_SET_SCR  CMP #$3A                ; Caps Lock Pressed
.3931d5	d0 03		bne $3931da	                BNE KB_UNPRESSED
.3931d7	82 b6 00	brl $393290	                BRL KB_TOG_CAPLOCK
.3931da	29 80		and #$80	KB_UNPRESSED    AND #$80                ; See if the Scan Code is press or Depressed
.3931dc	c9 80		cmp #$80	                CMP #$80                ; Depress Status - We will not do anything at this point
.3931de	d0 03		bne $3931e3	                BNE KB_NORM_SC
.3931e0	82 b3 00	brl $393296	                BRL KB_CHECK_B_DONE
.3931e3	a5 88		lda $0f88	KB_NORM_SC      LDA KEYBOARD_SC_TMP       ;
.3931e5	aa		tax		                TAX
.3931e6	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the SHIFT Key is being Pushed
.3931e8	29 10		and #$10	                AND #$10
.3931ea	c9 10		cmp #$10	                CMP #$10
.3931ec	f0 1f		beq $39320d	                BEQ SHIFT_KEY_ON
.3931ee	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the CTRL Key is being Pushed
.3931f0	29 20		and #$20	                AND #$20
.3931f2	c9 20		cmp #$20	                CMP #$20
.3931f4	f0 1e		beq $393214	                BEQ CTRL_KEY_ON
.3931f6	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the ALT Key is being Pushed
.3931f8	29 40		and #$40	                AND #$40
.3931fa	c9 40		cmp #$40	                CMP #$40
.3931fc	f0 1d		beq $39321b	                BEQ ALT_KEY_ON
.3931fe	a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the Prefix was picked up before
.393200	29 80		and #$80	                AND #$80
.393202	c9 80		cmp #$80	                CMP #$80
.393204	f0 1c		beq $393222	                BEQ PREFIX_ON
.393206	bf 00 18 39	lda $391800,x	                LDA @lScanCode_Press_Set1, x
.39320a	82 1f 00	brl $39322c	                BRL KB_WR_2_SCREEN
.39320d	bf 80 18 39	lda $391880,x	SHIFT_KEY_ON    LDA @lScanCode_Shift_Set1, x
.393211	82 18 00	brl $39322c	                BRL KB_WR_2_SCREEN
.393214	bf 00 19 39	lda $391900,x	CTRL_KEY_ON     LDA @lScanCode_Ctrl_Set1, x
.393218	82 11 00	brl $39322c	                BRL KB_WR_2_SCREEN
.39321b	bf 80 19 39	lda $391980,x	ALT_KEY_ON      LDA @lScanCode_Alt_Set1, x
.39321f	82 0a 00	brl $39322c	                BRL KB_WR_2_SCREEN
.393222	a5 87		lda $0f87	PREFIX_ON       LDA KEYBOARD_SC_FLG
.393224	29 7f		and #$7f	                AND #$7F
.393226	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.393228	bf 80 1a 39	lda $391a80,x	                LDA @lScanCode_Prefix_Set1, x
.39322c	c9 18		cmp #$18	KB_WR_2_SCREEN  CMP #$18                ; Is it SysRq?
.39322e	d0 03		bne $393233	                BNE savechar
.393230	4c a6 32	jmp $3932a6	                JMP programmerKey       ; Yes: trigger the programmer key
.393233	48		pha		savechar        PHA
.393234	c2 10		rep #$10	                REP #$10        ; set X long
.393236	20 b2 32	jsr $3932b2	                JSR SAVEKEY
.393239	e2 20		sep #$20	                SEP #$20        ; set A short
.39323b	68		pla		                PLA
.39323c	4c 96 32	jmp $393296	                JMP KB_CHECK_B_DONE
.39323f	a5 87		lda $0f87	KB_SET_SHIFT    LDA KEYBOARD_SC_FLG
.393241	09 10		ora #$10	                ORA #$10
.393243	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.393245	4c 96 32	jmp $393296	                JMP KB_CHECK_B_DONE
.393248	a5 87		lda $0f87	KB_CLR_SHIFT    LDA KEYBOARD_SC_FLG
.39324a	29 ef		and #$ef	                AND #$EF
.39324c	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.39324e	4c 96 32	jmp $393296	                JMP KB_CHECK_B_DONE
.393251	a5 87		lda $0f87	KB_SET_CTRL     LDA KEYBOARD_SC_FLG
.393253	09 20		ora #$20	                ORA #$20
.393255	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.393257	4c 96 32	jmp $393296	                JMP KB_CHECK_B_DONE
.39325a	a5 87		lda $0f87	KB_CLR_CTRL     LDA KEYBOARD_SC_FLG
.39325c	29 df		and #$df	                AND #$DF
.39325e	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.393260	4c 96 32	jmp $393296	                JMP KB_CHECK_B_DONE
.393263	a5 87		lda $0f87	KB_SET_ALT      LDA KEYBOARD_SC_FLG
.393265	09 40		ora #$40	                ORA #$40
.393267	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.393269	4c 96 32	jmp $393296	                JMP KB_CHECK_B_DONE
.39326c	a5 87		lda $0f87	KB_CLR_ALT      LDA KEYBOARD_SC_FLG
.39326e	29 bf		and #$bf	                AND #$BF
.393270	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.393272	4c 96 32	jmp $393296	                JMP KB_CHECK_B_DONE
.393275	a5 87		lda $0f87	KB_SET_PREFIX   LDA KEYBOARD_SC_FLG
.393277	09 80		ora #$80	                ORA #$80
.393279	85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.39327b	4c 96 32	jmp $393296	                JMP KB_CHECK_B_DONE
.39327e	a5 89		lda $0f89	KB_TOG_SCRLOCK  LDA KEYBOARD_LOCKS
.393280	49 01		eor #$01	                EOR #KB_SCROLL_LOCK         ; toggle the Scroll Lock flag
.393282	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.393284	4c 96 32	jmp $393296	                JMP KB_CHECK_B_DONE
.393287	a5 89		lda $0f89	KB_TOG_NUMLOCK  LDA KEYBOARD_LOCKS
.393289	49 02		eor #$02	                EOR #KB_NUM_LOCK            ; toggle the Num Lock flag
.39328b	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.39328d	4c 96 32	jmp $393296	                JMP KB_CHECK_B_DONE
.393290	a5 89		lda $0f89	KB_TOG_CAPLOCK  LDA KEYBOARD_LOCKS
.393292	49 04		eor #$04	                EOR #KB_CAPS_LOCK           ; toggle the Caps Lock flag
.393294	85 89		sta $0f89	                STA KEYBOARD_LOCKS
.393296					KB_CHECK_B_DONE
.393296	af 64 10 af	lda $af1064	                LDA STATUS_PORT
.39329a	29 01		and #$01	                AND #OUT_BUF_FULL           ; Test bit $01 (if 1, Full)
.39329c	c9 01		cmp #$01	                CMP #OUT_BUF_FULL           ; if Still Byte in the Buffer, fetch it out
.39329e	d0 03		bne $3932a3	                BNE SET_LED
.3932a0	4c 80 31	jmp $393180	                JMP IRQ_HANDLER_FETCH
.3932a3					SET_LED
.3932a3					KB_DONE
.3932a3	c2 30		rep #$30	                REP #$30        ; set A&X long
.3932a5	60		rts		                RTS
.3932a6					programmerKey
.3932a6	c2 30		rep #$30	                REP #$30        ; set A&X long
.3932a8	68		pla		                PLA                     ; Get and throw-away the return address to the interrupt handler
.3932a9	2b		pld		                PLD                     ; Restore the registers that were present when the handler was invoked
.3932aa	ab		plb		                PLB
.3932ab	7a		ply		                PLY
.3932ac	fa		plx		                PLX
.3932ad	68		pla		                PLA
.3932ae	5c 08 00 39	jmp $390008	                JML BREAK               ; And go to the BRK handler directly to open the monitor
.3932b2					SAVEKEY
.3932b2	e2 20		sep #$20	                SEP #$20        ; set A short
.3932b4	48		pha		                PHA                     ; Save the character
.3932b5	a5 89		lda $0f89	                LDA KEYBOARD_LOCKS      ; Check the keyboard lock flags
.3932b7	29 04		and #$04	                AND #KB_CAPS_LOCK       ; Is CAPS lock on?
.3932b9	f0 0d		beq $3932c8	                BEQ no_caps             ; No... just use the character as-is
.3932bb	68		pla		                PLA                     ; Get the character back
.3932bc	c9 61		cmp #$61	                CMP #'a'                ; Is it < 'a'
.3932be	90 09		bcc $3932c9	                BLT check_break         ; Yes: just use as-is
.3932c0	c9 7b		cmp #$7b	                CMP #'z'+1              ; Is it > 'z'
.3932c2	b0 05		bcs $3932c9	                BGE check_break         ; Yes: just us as-is
.3932c4	29 df		and #$df	                AND #%11011111          ; Conver to upper case
.3932c6	80 01		bra $3932c9	                BRA check_break
.3932c8	68		pla		no_caps         PLA                     ; Restore the character
.3932c9	c9 00		cmp #$00	check_break     CMP #0
.3932cb	f0 18		beq $3932e5	                BEQ done
.3932cd	c9 03		cmp #$03	                CMP #CHAR_CTRL_C        ; Is it CTRL-C?
.3932cf	f0 15		beq $3932e6	                BEQ flag_break          ; Yes: flag a break
.3932d1	a6 8d		ldx $0f8d	no_break        LDX KEY_BUFFER_WPOS     ; So the Receive Character is saved in the Buffer
.3932d3	e0 80 00	cpx #$0080	                CPX #KEY_BUFFER_SIZE    ; Make sure we haven't been overboard.
.3932d6	b0 0d		bcs $3932e5	                BCS done                ; Stop storing - An error should ensue here...
.3932d8	9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER,X
.3932dc	e8		inx		                INX
.3932dd	86 8d		stx $0f8d	                STX KEY_BUFFER_WPOS
.3932df	a9 00		lda #$00	                LDA #$00
.3932e1	9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER, X       ; Store a EOL in the following location for good measure
.3932e5	60		rts		done            RTS
.3932e6					flag_break
.3932e6	e2 20		sep #$20	                SEP #$20        ; set A short
.3932e8	a9 80		lda #$80	                LDA #$80                ; Flag that an interrupt key has been pressed
.3932ea	85 8a		sta $0f8a	                STA KEYFLAG             ; The interpreter should see this soon and throw a BREAK
.3932ec	60		rts		                RTS
.3932ed					KBD_GETC
.3932ed	da		phx		                PHX
.3932ee	0b		phd		                PHD
.3932ef	08		php		                PHP
.3932f0	48		pha		                PHA             ; begin setdp macro
.3932f1	08		php		                PHP
.3932f2	c2 20		rep #$20	                REP #$20        ; set A long
.3932f4	a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.3932f7	5b		tcd		                TCD
.3932f8	28		plp		                PLP
.3932f9	68		pla		                PLA             ; end setdp macro
.3932fa	e2 20		sep #$20	                SEP #$20        ; set A short
.3932fc	c2 10		rep #$10	                REP #$10        ; set X long
.3932fe	58		cli		                CLI                     ; Make sure interrupts can happen
.3932ff	a6 8b		ldx $0f8b	get_wait        LDX KEY_BUFFER_RPOS     ; Is KEY_BUFFER_RPOS < KEY_BUFFER_WPOS
.393301	e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS
.393303	90 02		bcc $393307	                BCC read_buff           ; Yes: a key is present, read it
.393305	80 f8		bra $3932ff	                BRA get_wait            ; Otherwise, keep waiting
.393307	78		sei		read_buff       SEI                     ; Don't interrupt me!
.393308	b5 00		lda $0f00,x	                LDA KEY_BUFFER,X        ; Get the key
.39330a	e8		inx		                INX                     ; And move to the next key
.39330b	e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS     ; Did we just read the last key?
.39330d	f0 07		beq $393316	                BEQ reset_indexes       ; Yes: return to 0 position
.39330f	86 8b		stx $0f8b	                STX KEY_BUFFER_RPOS     ; Otherwise: Update the read index
.393311	58		cli		                CLI
.393312	28		plp		done            PLP                     ; Restore status and interrupts
.393313	2b		pld		                PLD
.393314	fa		plx		                PLX
.393315	6b		rtl		                RTL
.393316	64 8b		stz $0f8b	reset_indexes   STZ KEY_BUFFER_RPOS     ; Reset read index to the beginning
.393318	64 8d		stz $0f8d	                STZ KEY_BUFFER_WPOS     ; Reset the write index to the beginning
.39331a	80 f6		bra $393312	                BRA done

;******  Return to file: src\kernel.asm


;******  Processing file: src\uart.asm

=$af13f8				UART1_BASE = $AF13F8        ; Base address for UART 1 (COM1)
=$af12f8				UART2_BASE = $AF12F8        ; Base address for UART 2 (COM2)
=$00					UART_TRHB = $00             ; Transmit/Receive Hold Buffer
=$00					UART_DLL = UART_TRHB        ; Divisor Latch Low Byte
=$01					UART_DLH = $01              ; Divisor Latch High Byte
=$01					UART_IER = UART_DLH         ; Interupt Enable Register
=$02					UART_FCR = $02              ; FIFO Control Register
=$02					UART_IIR = UART_FCR         ; Interupt Indentification Register
=$03					UART_LCR = $03              ; Line Control Register
=$04					UART_MCR = $04              ; Modem Control REgister
=$05					UART_LSR = $05              ; Line Status Register
=$06					UART_MSR = $06              ; Modem Status Register
=$07					UART_SR = $07               ; Scratch Register
=$20					UINT_LOW_POWER = $20        ; Enable Low Power Mode (16750)
=$10					UINT_SLEEP_MODE = $10       ; Enable Sleep Mode (16750)
=$08					UINT_MODEM_STATUS = $08     ; Enable Modem Status Interrupt
=$04					UINT_LINE_STATUS = $04      ; Enable Receiver Line Status Interupt
=$02					UINT_THR_EMPTY = $02        ; Enable Transmit Holding Register Empty interrupt
=$01					UINT_DATA_AVAIL = $01       ; Enable Recieve Data Available interupt
=$80					IIR_FIFO_ENABLED = $80      ; FIFO is enabled
=$40					IIR_FIFO_NONFUNC = $40      ; FIFO is not functioning
=$20					IIR_FIFO_64BYTE = $20       ; 64 byte FIFO enabled (16750)
=$00					IIR_MODEM_STATUS = $00      ; Modem Status Interrupt
=$02					IIR_THR_EMPTY = $02         ; Transmit Holding Register Empty Interrupt
=$04					IIR_DATA_AVAIL = $04        ; Data Available Interrupt
=$06					IIR_LINE_STATUS = $06       ; Line Status Interrupt
=$0c					IIR_TIMEOUT = $0C           ; Time-out Interrupt (16550 and later)
=$01					IIR_INTERRUPT_PENDING = $01 ; Interrupt Pending Flag
=$80					LCR_DLB = $80               ; Divisor Latch Access Bit
=$60					LCR_SBE = $60               ; Set Break Enable
=$00					LCR_PARITY_NONE = $00       ; Parity: None
=$08					LCR_PARITY_ODD = $08        ; Parity: Odd
=$18					LCR_PARITY_EVEN = $18       ; Parity: Even
=$28					LCR_PARITY_MARK = $28       ; Parity: Mark
=$38					LCR_PARITY_SPACE = $38      ; Parity: Space
=$00					LCR_STOPBIT_1 = $00         ; One Stop Bit
=$04					LCR_STOPBIT_2 = $04         ; 1.5 or 2 Stop Bits
=$00					LCR_DATABITS_5 = $00        ; Data Bits: 5
=$01					LCR_DATABITS_6 = $01        ; Data Bits: 6
=$02					LCR_DATABITS_7 = $02        ; Data Bits: 7
=$03					LCR_DATABITS_8 = $03        ; Data Bits: 8
=$80					LSR_ERR_RECIEVE = $80       ; Error in Received FIFO
=$40					LSR_XMIT_DONE = $40         ; All data has been transmitted
=$20					LSR_XMIT_EMPTY = $20        ; Empty transmit holding register
=$10					LSR_BREAK_INT = $10         ; Break interrupt
=$08					LSR_ERR_FRAME = $08         ; Framing error
=$04					LSR_ERR_PARITY = $04        ; Parity error
=$02					LSR_ERR_OVERRUN = $02       ; Overrun error
=$01					LSR_DATA_AVAIL = $01        ; Data is ready in the receive buffer
=384					UART_300 = 384              ; Code for 300 bps
=96					UART_1200 = 96              ; Code for 1200 bps
=48					UART_2400 = 48              ; Code for 2400 bps
=24					UART_4800 = 24              ; Code for 4800 bps
=12					UART_9600 = 12              ; Code for 9600 bps
=6					UART_19200 = 6              ; Code for 19200 bps
=3					UART_38400 = 3              ; Code for 28400 bps
=2					UART_57600 = 2              ; Code for 57600 bps
=1					UART_115200 = 1             ; Code for 115200 bps
.39331c					UART_SELECT
.39331c	08		php		            PHP
.39331d	c2 20		rep #$20	                REP #$20        ; set A long
.39331f	c9 02 00	cmp #$0002	            CMP #2
.393322	f0 07		beq $39332b	            BEQ is_COM2
.393324	c2 20		rep #$20	                REP #$20        ; set A long
.393326	a9 f8 13	lda #$13f8	            LDA #<>UART1_BASE
.393329	80 05		bra $393330	            BRA setaddr
.39332b					is_COM2
.39332b	c2 20		rep #$20	                REP #$20        ; set A long
.39332d	a9 f8 12	lda #$12f8	            LDA #<>UART2_BASE
.393330	8f 00 07 00	sta $000700	setaddr     STA @lCURRUART
.393334	e2 20		sep #$20	                SEP #$20        ; set A short
.393336	a9 af		lda #$af	            LDA #`UART1_BASE
.393338	8f 02 07 00	sta $000702	            STA @lCURRUART+2
.39333c	28		plp		            PLP
.39333d	6b		rtl		            RTL
.39333e					UART_SETBPS
.39333e	08		php		            PHP
.39333f	0b		phd		            PHD
.393340	48		pha		                PHA             ; begin setdp macro
.393341	08		php		                PHP
.393342	c2 20		rep #$20	                REP #$20        ; set A long
.393344	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.393347	5b		tcd		                TCD
.393348	28		plp		                PLP
.393349	68		pla		                PLA             ; end setdp macro
.39334a	c2 30		rep #$30	                REP #$30        ; set A&X long
.39334c	48		pha		            PHA
.39334d	e2 20		sep #$20	                SEP #$20        ; set A short
.39334f	a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Enable divisor latch
.393352	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.393354	09 80		ora #$80	            ORA #LCR_DLB
.393356	97 00		sta [$0700],y	            STA [CURRUART],Y
.393358	c2 20		rep #$20	                REP #$20        ; set A long
.39335a	68		pla		            PLA
.39335b	a0 00 00	ldy #$0000	            LDY #UART_DLL
.39335e	97 00		sta [$0700],y	            STA [CURRUART],Y    ; Save the divisor to the UART
.393360	e2 20		sep #$20	                SEP #$20        ; set A short
.393362	a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Disable divisor latch
.393365	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.393367	49 80		eor #$80	            EOR #LCR_DLB
.393369	97 00		sta [$0700],y	            STA [CURRUART],Y
.39336b	2b		pld		            PLD
.39336c	28		plp		            PLP
.39336d	6b		rtl		            RTL
.39336e					UART_SETLCR
.39336e	08		php		            PHP
.39336f	0b		phd		            PHD
.393370	48		pha		                PHA             ; begin setdp macro
.393371	08		php		                PHP
.393372	c2 20		rep #$20	                REP #$20        ; set A long
.393374	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.393377	5b		tcd		                TCD
.393378	28		plp		                PLP
.393379	68		pla		                PLA             ; end setdp macro
.39337a	e2 20		sep #$20	                SEP #$20        ; set A short
.39337c	c2 10		rep #$10	                REP #$10        ; set X long
.39337e	29 7f		and #$7f	            AND #$7F            ; We don't want to alter divisor latch
.393380	a0 03 00	ldy #$0003	            LDY #UART_LCR
.393383	97 00		sta [$0700],y	            STA [CURRUART],Y
.393385	2b		pld		            PLD
.393386	28		plp		            PLP
.393387	6b		rtl		            RTL
.393388					UART_INIT
.393388	08		php		            PHP
.393389	0b		phd		            PHD
.39338a	c2 30		rep #$30	                REP #$30        ; set A&X long
.39338c	48		pha		                PHA             ; begin setdp macro
.39338d	08		php		                PHP
.39338e	c2 20		rep #$20	                REP #$20        ; set A long
.393390	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.393393	5b		tcd		                TCD
.393394	28		plp		                PLP
.393395	68		pla		                PLA             ; end setdp macro
.393396	a9 01 00	lda #$0001	            LDA #UART_115200
.393399	22 3e 33 39	jsl $39333e	            JSL UART_SETBPS
.39339d	e2 20		sep #$20	                SEP #$20        ; set A short
.39339f	a9 03		lda #$03	            LDA #LCR_PARITY_NONE | LCR_STOPBIT_1 | LCR_DATABITS_8
.3933a1	22 6e 33 39	jsl $39336e	            JSL UART_SETLCR
.3933a5	a9 e1		lda #$e1	            LDA #%11100001
.3933a7	a0 02 00	ldy #$0002	            LDY #UART_FCR
.3933aa	97 00		sta [$0700],y	            STA [CURRUART],Y
.3933ac	2b		pld		            PLD
.3933ad	28		plp		            PLP
.3933ae	6b		rtl		            RTL
.3933af					UART_HASBYT
.3933af	08		php		            PHP
.3933b0	0b		phd		            PHD
.3933b1	c2 30		rep #$30	                REP #$30        ; set A&X long
.3933b3	48		pha		                PHA             ; begin setdp macro
.3933b4	08		php		                PHP
.3933b5	c2 20		rep #$20	                REP #$20        ; set A long
.3933b7	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.3933ba	5b		tcd		                TCD
.3933bb	28		plp		                PLP
.3933bc	68		pla		                PLA             ; end setdp macro
.3933bd	e2 20		sep #$20	                SEP #$20        ; set A short
.3933bf	a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.3933c2	b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.3933c4	29 01		and #$01	            AND #LSR_DATA_AVAIL
.3933c6	d0 04		bne $3933cc	            BNE ret_true            ; If flag is set, return true
.3933c8	2b		pld		ret_false   PLD                     ; Return false
.3933c9	28		plp		            PLP
.3933ca	18		clc		            CLC
.3933cb	6b		rtl		            RTL
.3933cc	2b		pld		ret_true    PLD                     ; Return true
.3933cd	28		plp		            PLP
.3933ce	38		sec		            SEC
.3933cf	6b		rtl		            RTL
.3933d0					UART_GETC
.3933d0	08		php		            PHP
.3933d1	0b		phd		            PHD
.3933d2	c2 30		rep #$30	                REP #$30        ; set A&X long
.3933d4	48		pha		                PHA             ; begin setdp macro
.3933d5	08		php		                PHP
.3933d6	c2 20		rep #$20	                REP #$20        ; set A long
.3933d8	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.3933db	5b		tcd		                TCD
.3933dc	28		plp		                PLP
.3933dd	68		pla		                PLA             ; end setdp macro
.3933de	e2 20		sep #$20	                SEP #$20        ; set A short
.3933e0	a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.3933e3	b7 00		lda [$0700],y	wait_getc   LDA [CURRUART],Y
.3933e5	29 01		and #$01	            AND #LSR_DATA_AVAIL
.3933e7	f0 fa		beq $3933e3	            BEQ wait_getc           ; If the flag is clear, wait
.3933e9	a0 00 00	ldy #$0000	            LDY #UART_TRHB          ; Get the byte from the receive FIFO
.3933ec	b7 00		lda [$0700],y	            LDA [CURRUART],Y
.3933ee	2b		pld		            PLD
.3933ef	28		plp		            PLP
.3933f0	6b		rtl		            RTL
.3933f1					UART_PUTC
.3933f1	08		php		            PHP
.3933f2	0b		phd		            PHD
.3933f3	c2 30		rep #$30	                REP #$30        ; set A&X long
.3933f5	48		pha		                PHA             ; begin setdp macro
.3933f6	08		php		                PHP
.3933f7	c2 20		rep #$20	                REP #$20        ; set A long
.3933f9	a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.3933fc	5b		tcd		                TCD
.3933fd	28		plp		                PLP
.3933fe	68		pla		                PLA             ; end setdp macro
.3933ff	e2 20		sep #$20	                SEP #$20        ; set A short
.393401	48		pha		            PHA                     ; Wait for the transmit FIFO to free up
.393402	a0 05 00	ldy #$0005	            LDY #UART_LSR
.393405	b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.393407	29 20		and #$20	            AND #LSR_XMIT_EMPTY
.393409	f0 fa		beq $393405	            BEQ wait_putc
.39340b	68		pla		            PLA
.39340c	a0 00 00	ldy #$0000	            LDY #UART_TRHB
.39340f	97 00		sta [$0700],y	            STA [CURRUART],Y
.393411	2b		pld		            PLD
.393412	28		plp		            PLP
.393413	6b		rtl		            RTL
.393414					UART_PUTS
.393414	08		php		            PHP
.393415	e2 20		sep #$20	                SEP #$20        ; set A short
.393417	bd 00 00	lda $390000,x	put_loop    LDA #0,B,X
.39341a	f0 07		beq $393423	            BEQ done
.39341c	22 f1 33 39	jsl $3933f1	            JSL UART_PUTC
.393420	e8		inx		            INX
.393421	80 f4		bra $393417	            BRA put_loop
.393423	28		plp		done        PLP
.393424	6b		rtl		            RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\joystick.asm

.393425					JOYSTICK_SET_NES_MODE
.393425	e2 20		sep #$20	                SEP #$20        ; set A short
.393427	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.39342b	29 fb		and #$fb	          AND #~NES_SNES_JOY  ; 0 = NES (8 bit shift)
.39342d	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.393431	6b		rtl		          RTL
.393432					JOYSTICK_SET_SNES_MODE
.393432	e2 20		sep #$20	                SEP #$20        ; set A short
.393434	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.393438	29 fb		and #$fb	          AND #~NES_SNES_JOY
.39343a	09 04		ora #$04	          ORA #NES_SNES_JOY   ; 1 = SNES (12 Bit Shift)
.39343c	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.393440	6b		rtl		          RTL
.393441					JOYSTICK_ENABLE_NES_SNES_PORT0
.393441	e2 20		sep #$20	                SEP #$20        ; set A short
.393443	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.393447	29 fe		and #$fe	          AND #~NES_SNES_EN0
.393449	09 01		ora #$01	          ORA #NES_SNES_EN0
.39344b	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.39344f	6b		rtl		          RTL
.393450					JOYSTICK_ENABLE_NES_SNES_PORT1
.393450	e2 20		sep #$20	                SEP #$20        ; set A short
.393452	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.393456	29 fd		and #$fd	          AND #~NES_SNES_EN1
.393458	09 02		ora #$02	          ORA #NES_SNES_EN1
.39345a	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.39345e	6b		rtl		          RTL
.39345f					JOYSTICK_DISABLE_NES_SNES_PORT0
.39345f	e2 20		sep #$20	                SEP #$20        ; set A short
.393461	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.393465	29 fe		and #$fe	          AND #~NES_SNES_EN0
.393467	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.39346b	6b		rtl		          RTL
.39346c					JOYSTICK_DISABLE_NES_SNES_PORT1
.39346c	e2 20		sep #$20	                SEP #$20        ; set A short
.39346e	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.393472	29 fd		and #$fd	          AND #~NES_SNES_EN1
.393474	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.393478	6b		rtl		          RTL
.393479					JOYSTICK_NES_SNES_TRIG_WITH_POLL
.393479	e2 20		sep #$20	                SEP #$20        ; set A short
.39347b	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.39347f	29 03		and #$03	          AND #(NES_SNES_EN0 | NES_SNES_EN1)
.393481	c9 00		cmp #$00	          CMP #$00
.393483	f0 14		beq $393499	          BEQ END_OF_JOYSTICK_POLL
.393485	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.393489	09 80		ora #$80	          ORA #NES_SNES_TRIG   ; Set to 1 (Will auto Clear)
.39348b	8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.39348f					JOYSTICK_POLLING_ISNOTOVER
.39348f	af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE ;
.393493	29 40		and #$40	          AND #NES_SNES_DONE
.393495	c9 40		cmp #$40	          CMP #NES_SNES_DONE
.393497	d0 f6		bne $39348f	          BNE JOYSTICK_POLLING_ISNOTOVER
.393499					END_OF_JOYSTICK_POLL
.393499	6b		rtl		          RTL

;******  Return to file: src\kernel.asm

.390400					IBOOT
.390400	18		clc		                CLC           ; clear the carry flag
.390401	fb		xce		                XCE           ; move carry to emulation flag.
.390402	78		sei		                SEI
.390403	c2 30		rep #$30	                REP #$30        ; set A&X long
.390405	a9 ff fe	lda #$feff	                LDA #STACK_END   ; initialize stack pointer
.390408	1b		tcs		                TAS
.390409	48		pha		                PHA             ; begin setdp macro
.39040a	08		php		                PHP
.39040b	c2 20		rep #$20	                REP #$20        ; set A long
.39040d	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390410	5b		tcd		                TCD
.390411	28		plp		                PLP
.390412	68		pla		                PLA             ; end setdp macro
.390413	e2 20		sep #$20	                SEP #$20        ; set A short
.390415	a2 00 00	ldx #$0000	                LDX #$0000
.390418	a9 00		lda #$00	                LDA #$00
.39041a					CLEAR_MEM_LOOP
.39041a	95 00		sta $00,x	                STA $0000, X
.39041c	e8		inx		                INX
.39041d	e0 00 01	cpx #$0100	                CPX #$0100
.390420	d0 f8		bne $39041a	                BNE CLEAR_MEM_LOOP
.390422	ea		nop		                NOP
.390423	a9 ff		lda #$ff	                LDA #$FF
.390425	8f 48 01 00	sta $000148	                STA @lINT_EDGE_REG0
.390429	8f 49 01 00	sta $000149	                STA @lINT_EDGE_REG1
.39042d	8f 4a 01 00	sta $00014a	                STA @lINT_EDGE_REG2
.390431	8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.390435	8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.390439	8f 4e 01 00	sta $00014e	                STA @lINT_MASK_REG2
.39043d	c2 30		rep #$30	                REP #$30        ; set A&X long
.39043f	a9 00 a0	lda #$a000	                LDA #<>SCREEN_PAGE0      ; store the initial screen buffer location
.390442	85 0c		sta $0c		                STA SCREENBEGIN
.390444	e2 20		sep #$20	                SEP #$20        ; set A short
.390446	a9 af		lda #$af	                LDA #`SCREEN_PAGE0
.390448	85 0e		sta $0e		                STA SCREENBEGIN+2
.39044a	c2 30		rep #$30	                REP #$30        ; set A&X long
.39044c	a9 00 a0	lda #$a000	                LDA #<>SCREEN_PAGE0      ; store the initial screen buffer location
.39044f	85 17		sta $17		                STA CURSORPOS
.390451	e2 20		sep #$20	                SEP #$20        ; set A short
.390453	a9 af		lda #$af	                LDA #`SCREEN_PAGE0
.390455	85 19		sta $19		                STA CURSORPOS+2
.390457	a9 00		lda #$00	                LDA #$00
.390459	8f 87 0f 00	sta $000f87	                STA KEYBOARD_SC_FLG     ; Clear the Keyboard Flag
.39045d	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.39045f	8f 00 f1 af	sta $aff100	                STA $AFF100
.390463	a9 bf		lda #$bf	                LDA #$BF ; Channel Two - No Atteniation
.390465	8f 00 f1 af	sta $aff100	                STA $AFF100
.390469	a9 df		lda #$df	                LDA #$DF ; Channel Two - No Atteniation
.39046b	8f 00 f1 af	sta $aff100	                STA $AFF100
.39046f	a9 ff		lda #$ff	                LDA #$FF ; Channel Two - No Atteniation
.390471	8f 00 f1 af	sta $aff100	                STA $AFF100
.390475	c2 30		rep #$30	                REP #$30        ; set A&X long
.390477	a2 48 00	ldx #$0048	                LDX #72
.39047a	86 0f		stx $0f		                STX COLS_VISIBLE
.39047c	a0 34 00	ldy #$0034	                LDY #52
.39047f	84 13		sty $13		                STY LINES_VISIBLE
.390481	a2 80 00	ldx #$0080	                LDX #128
.390484	86 11		stx $11		                STX COLS_PER_LINE
.390486	a0 40 00	ldy #$0040	                LDY #64
.390489	84 15		sty $15		                STY LINES_MAX
.39048b	22 dc 00 39	jsl $3900dc	                JSL INITCODEC
.39048f	22 b0 00 39	jsl $3900b0	                JSL INITSUPERIO
.390493	22 c4 00 39	jsl $3900c4	                JSL INITGAMMATABLE
.390497	22 c8 00 39	jsl $3900c8	                JSL INITALLLUT
.39049b	22 ac 00 39	jsl $3900ac	                JSL INITCHLUT
.39049f	22 63 0c 39	jsl $390c63	                JSL INITMOUSEPOINTER
.3904a3	22 bc 00 39	jsl $3900bc	                JSL INITCURSOR
.3904a7	22 cc 00 39	jsl $3900cc	                JSL INITVKYTXTMODE
.3904ab	22 38 0c 39	jsl $390c38	                JSL IINITFONTSET
.3904af	22 22 09 39	jsl $390922	                JSL ICLRSCREEN  ; Clear Screen and Set a standard color in Color Memory
.3904b3	a9 01 00	lda #$0001	                LDA #CHAN_COM1    ; Initialize COM1
.3904b6	22 1c 33 39	jsl $39331c	                JSL UART_SELECT
.3904ba	22 88 33 39	jsl $393388	                JSL UART_INIT
.3904be	a9 02 00	lda #$0002	                LDA #CHAN_COM2    ; Initialize COM2
.3904c1	22 1c 33 39	jsl $39331c	                JSL UART_SELECT
.3904c5	22 88 33 39	jsl $393388	                JSL UART_INIT
.3904c9	a9 00 00	lda #$0000	                LDA #0
.3904cc	22 38 00 39	jsl $390038	                JSL SETIN
.3904d0	22 3c 00 39	jsl $39003c	                JSL SETOUT
.3904d4	c2 20		rep #$20	                REP #$20        ; set A long
.3904d6	a2 00 00	ldx #$0000	                LDX #0
.3904d9	a0 00 00	ldy #$0000	                LDY #0
.3904dc	22 8a 08 39	jsl $39088a	                JSL ILOCATE
.3904e0	22 51 09 39	jsl $390951	                JSL ICOLORFLAG  ; This is to set the Color Memory for the Logo
.3904e4	e2 20		sep #$20	                SEP #$20        ; set A short
.3904e6	c2 30		rep #$30	                REP #$30        ; set A&X long
.3904e8					greet
.3904e8	48		pha		                PHA             ; begin setdbr macro
.3904e9	08		php		                PHP
.3904ea	e2 20		sep #$20	                SEP #$20        ; set A short
.3904ec	a9 39		lda #$39	                LDA #`greet_msg
.3904ee	48		pha		                PHA
.3904ef	ab		plb		                PLB
.3904f0	28		plp		                PLP
.3904f1	68		pla		                PLA             ; end setdbr macro
.3904f2	a2 fb 12	ldx #$12fb	                LDX #<>greet_msg
.3904f5	22 5e 06 39	jsl $39065e	                JSL IPRINT       ; print the first line
.3904f9	48		pha		                PHA             ; begin setdp macro
.3904fa	08		php		                PHP
.3904fb	c2 20		rep #$20	                REP #$20        ; set A long
.3904fd	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390500	5b		tcd		                TCD
.390501	28		plp		                PLP
.390502	68		pla		                PLA             ; end setdp macro
.390503	22 b4 00 39	jsl $3900b4	                JSL INITKEYBOARD ;
.390507	e2 20		sep #$20	                SEP #$20        ; set A short
.390509	c2 10		rep #$10	                REP #$10        ; set X long
.39050b	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.39050d	8f 00 f1 af	sta $aff100	                STA $AFF100
.390511	a9 bf		lda #$bf	                LDA #$BF ; Channel Two - No Atteniation
.390513	8f 00 f1 af	sta $aff100	                STA $AFF100
.390517	a9 df		lda #$df	                LDA #$DF ; Channel Two - No Atteniation
.390519	8f 00 f1 af	sta $aff100	                STA $AFF100
.39051d	a9 ff		lda #$ff	                LDA #$FF ; Channel Two - No Atteniation
.39051f	8f 00 f1 af	sta $aff100	                STA $AFF100
.390523	a9 83		lda #$83	                LDA #$83 ; Channel Zero - No Atteniation
.390525	8f 00 f1 af	sta $aff100	                STA $AFF100
.390529	a9 12		lda #$12	                LDA #$12 ; Channel Zero - No Atteniation
.39052b	8f 00 f1 af	sta $aff100	                STA $AFF100
.39052f	a9 90		lda #$90	                LDA #$90 ; Channel One - No Atteniation
.390531	8f 00 f1 af	sta $aff100	                STA $AFF100
.390535	a2 00 40	ldx #$4000	                LDX #16384      ; 400ms
.390538	22 d5 12 39	jsl $3912d5	          		 	JSL ILOOP_MS
.39053c	a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.39053e	8f 00 f1 af	sta $aff100	                STA $AFF100
.390542	a9 0f		lda #$0f	                LDA #$0F
.390544	8f 18 e4 af	sta $afe418	                STA SID0_MODE_VOL
.390548	a9 62		lda #$62	                LDA #$62
.39054a	8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.39054e	a9 08		lda #$08	                LDA #$08
.390550	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.390554	a9 00		lda #$00	                LDA #$00
.390556	8f 02 e4 af	sta $afe402	                STA SID0_V1_PW_LO
.39055a	a9 08		lda #$08	                LDA #$08
.39055c	8f 03 e4 af	sta $afe403	                STA SID0_V1_PW_HI
.390560	a9 08		lda #$08	                LDA #$08
.390562	8f 05 e4 af	sta $afe405	                STA SID0_V1_ATCK_DECY
.390566	a9 c6		lda #$c6	                LDA #198
.390568	8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.39056c	a9 11		lda #$11	                LDA #$11
.39056e	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL
.390572	a2 00 80	ldx #$8000	                LDX #32768      ; 100ms
.390575	22 d5 12 39	jsl $3912d5	    						JSL ILOOP_MS
.390579	a9 10		lda #$10	                LDA #$10
.39057b	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL
.39057f	a9 00		lda #$00	                LDA #$00
.390581	58		cli		                CLI                   ; Make sure no Interrupt will come and fuck up Init before this point.
.390582	e2 20		sep #$20	                SEP #$20        ; set A short
.390584	c2 10		rep #$10	                REP #$10        ; set X long
.390586	48		pha		                PHA             ; begin setdbr macro
.390587	08		php		                PHP
.390588	e2 20		sep #$20	                SEP #$20        ; set A short
.39058a	a9 39		lda #$39	                LDA #`greet_msg
.39058c	48		pha		                PHA
.39058d	ab		plb		                PLB
.39058e	28		plp		                PLP
.39058f	68		pla		                PLA             ; end setdbr macro
.390590	af 0e e8 af	lda $afe80e	                LDA @lDIP_BOOTMODE    ; {HD_INSTALLED, 5'b0_0000, BOOT_MODE[1], BOOT_MODE[0]}
.390594	29 03		and #$03	                AND #%00000011        ; Look at the mode bits
.390596	c9 00		cmp #$00	                CMP #DIP_BOOT_IDE     ; DIP set for IDE?
.390598	f0 11		beq $3905ab	                BEQ BOOTIDE           ; Yes: Boot from the IDE
.39059a	c9 01		cmp #$01	                CMP #DIP_BOOT_SDCARD  ; DIP set for SD card?
.39059c	f0 08		beq $3905a6	                BEQ BOOTSDC           ; Yes: try to boot from the SD card
.39059e	c9 02		cmp #$02	                CMP #DIP_BOOT_FLOPPY  ; DIP set for floppy?
.3905a0	f0 0e		beq $3905b0	                BEQ BOOTFLOPPY        ; Yes: try to boot from the floppy
.3905a2	5c 00 00 3a	jmp $3a0000	BOOTBASIC       JML BASIC             ; Cold start of the BASIC interpreter (or its replacement)
.3905a6					BOOTSDC
.3905a6	a2 a2 16	ldx #$16a2	                LDX #<>sdcard_notimpl ; Print a message saying SD card booting is not implemented
.3905a9	80 08		bra $3905b3	                BRA PR_BOOT_ERROR
.3905ab					BOOTIDE
.3905ab	a2 cf 16	ldx #$16cf	                LDX #<>ide_notimpl    ; Print a message saying SD card booting is not implemented
.3905ae	80 03		bra $3905b3	                BRA PR_BOOT_ERROR
.3905b0					BOOTFLOPPY
.3905b0	a2 fe 16	ldx #$16fe	                LDX #<>floppy_notimpl ; Print a message saying SD card booting is not implemented
.3905b3	22 5e 06 39	jsl $39065e	PR_BOOT_ERROR   JSL IPRINT
.3905b7	ea		nop		LOOP_FOREVER    NOP
.3905b8	80 fd		bra $3905b7	                BRA LOOP_FOREVER
.3905ba					IBREAK
.3905ba	48		pha		                PHA             ; begin setdp macro
.3905bb	08		php		                PHP
.3905bc	c2 20		rep #$20	                REP #$20        ; set A long
.3905be	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3905c1	5b		tcd		                TCD
.3905c2	28		plp		                PLP
.3905c3	68		pla		                PLA             ; end setdp macro
.3905c4	68		pla		                PLA             ; Pull .Y and stuff it in the CPUY variable
.3905c5	8f 48 02 00	sta $000248	                STA CPUY
.3905c9	68		pla		                PLA             ; Pull .X and stuff it in the CPUY variable
.3905ca	8f 46 02 00	sta $000246	                STA CPUX
.3905ce	68		pla		                PLA             ; Pull .A and stuff it in the CPUY variable
.3905cf	8f 44 02 00	sta $000244	                STA CPUA
.3905d3	68		pla		                PLA
.3905d4	8f 4c 02 00	sta $00024c	                STA CPUDP       ; Pull Direct page
.3905d8	e2 20		sep #$20	                SEP #$20        ; set A short
.3905da	68		pla		                PLA             ; Pull Data Bank (8 bits)
.3905db	8f 4e 02 00	sta $00024e	                STA CPUDBR
.3905df	68		pla		                PLA             ; Pull Flags (8 bits)
.3905e0	8f 4f 02 00	sta $00024f	                STA CPUFLAGS
.3905e4	c2 20		rep #$20	                REP #$20        ; set A long
.3905e6	68		pla		                PLA             ; Pull Program Counter (16 bits)
.3905e7	8f 40 02 00	sta $000240	                STA CPUPC
.3905eb	e2 20		sep #$20	                SEP #$20        ; set A short
.3905ed	68		pla		                PLA             ; Pull Program Bank (8 bits)
.3905ee	8f 42 02 00	sta $000242	                STA CPUPBR
.3905f2	c2 20		rep #$20	                REP #$20        ; set A long
.3905f4	3b		tsc		                TSA             ; Get the stack
.3905f5	8f 4a 02 00	sta $00024a	                STA CPUSTACK    ; Store the stack at immediately before the interrupt was asserted
.3905f9	a9 ff fe	lda #$feff	                LDA #<>STACK_END   ; initialize stack pointer back to the bootup value
.3905fc	1b		tcs		                TAS
.3905fd	5c 04 00 3a	jmp $3a0004	                JML MONITOR
.390601					IREADY
.390601	48		pha		                PHA             ; begin setdbr macro
.390602	08		php		                PHP
.390603	e2 20		sep #$20	                SEP #$20        ; set A short
.390605	a9 39		lda #$39	                LDA #`ready_msg
.390607	48		pha		                PHA
.390608	ab		plb		                PLB
.390609	28		plp		                PLP
.39060a	68		pla		                PLA             ; end setdbr macro
.39060b	e2 20		sep #$20	                SEP #$20        ; set A short
.39060d	a2 30 17	ldx #$1730	                LDX #<>ready_msg
.390610	22 5e 06 39	jsl $39065e	                JSL IPRINT
.390614					IREADYWAIT
.390614	22 2e 06 39	jsl $39062e	                JSL IGETCHE
.390618	80 fa		bra $390614	                BRA IREADYWAIT
.39061a	db		stp		IKEYDOWN        STP             ; Keyboard key pressed
.39061b	db		stp		IRETURN         STP
.39061c	08		php		ISETIN          PHP
.39061d	e2 20		sep #$20	                SEP #$20        ; set A short
.39061f	8f 04 07 00	sta $000704	                STA @lCHAN_IN   ; Save the channel number
.390623	28		plp		                PLP
.390624	6b		rtl		                RTL
.390625	08		php		ISETOUT         PHP
.390626	e2 20		sep #$20	                SEP #$20        ; set A short
.390628	8f 03 07 00	sta $000703	                STA @lCHAN_OUT  ; Save the channel number
.39062c	28		plp		                PLP
.39062d	6b		rtl		                RTL
.39062e	22 37 06 39	jsl $390637	IGETCHE         JSL IGETCHW
.390632	22 7e 06 39	jsl $39067e	                JSL IPUTC
.390636	6b		rtl		                RTL
.390637					IGETCHW
.390637	08		php		                PHP
.390638	e2 20		sep #$20	                SEP #$20        ; set A short
.39063a	af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.39063e	f0 17		beq $390657	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.390640	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.390642	f0 09		beq $39064d	                BEQ getc_uart       ; Yes: handle reading from the UART
.390644	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.390646	f0 05		beq $39064d	                BEQ getc_uart       ; Yes: handle reading from the UART
.390648	a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.39064a	28		plp		                PLP
.39064b	38		sec		                SEC                 ; And return carry set
.39064c	6b		rtl		                RTL
.39064d	22 1c 33 39	jsl $39331c	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.390651	22 d0 33 39	jsl $3933d0	                JSL UART_GETC       ; Get the charater from the COM port
.390655	80 04		bra $39065b	                BRA done
.390657	22 ed 32 39	jsl $3932ed	getc_keyboard   JSL KBD_GETC        ; Get the character from the keyboard
.39065b	28		plp		done            PLP
.39065c	18		clc		                CLC                 ; Return carry clear for valid data
.39065d	6b		rtl		                RTL
.39065e	22 67 06 39	jsl $390667	IPRINT          JSL IPUTS
.390662	22 a0 07 39	jsl $3907a0	                JSL IPRINTCR
.390666	6b		rtl		                RTL
.390667	48		pha		IPUTS           PHA
.390668	08		php		                PHP
.390669	e2 20		sep #$20	                SEP #$20        ; set A short
.39066b	c2 10		rep #$10	                REP #$10        ; set X long
.39066d	bd 00 00	lda $390000,x	iputs1          LDA $0,b,x      ; read from the string
.390670	f0 08		beq $39067a	                BEQ iputs_done
.390672	22 7e 06 39	jsl $39067e	iputs2          JSL IPUTC
.390676	e8		inx		iputs3          INX
.390677	4c 6d 06	jmp $39066d	                JMP iputs1
.39067a	e8		inx		iputs_done      INX
.39067b	28		plp		                PLP
.39067c	68		pla		                PLA
.39067d	6b		rtl		                RTL
.39067e					IPUTC
.39067e	da		phx		                PHX
.39067f	5a		phy		                PHY
.390680	0b		phd		                PHD
.390681	8b		phb		                PHB
.390682	08		php		                PHP                 ; stash the flags (we'll be changing M)
.390683	48		pha		                PHA             ; begin setdp macro
.390684	08		php		                PHP
.390685	c2 20		rep #$20	                REP #$20        ; set A long
.390687	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39068a	5b		tcd		                TCD
.39068b	28		plp		                PLP
.39068c	68		pla		                PLA             ; end setdp macro
.39068d	48		pha		                PHA             ; begin setdbr macro
.39068e	08		php		                PHP
.39068f	e2 20		sep #$20	                SEP #$20        ; set A short
.390691	a9 00		lda #$00	                LDA #0
.390693	48		pha		                PHA
.390694	ab		plb		                PLB
.390695	28		plp		                PLP
.390696	68		pla		                PLA             ; end setdbr macro
.390697	e2 20		sep #$20	                SEP #$20        ; set A short
.390699	c2 10		rep #$10	                REP #$10        ; set X long
.39069b	48		pha		                PHA                 ; Save the character to print
.39069c	af 03 07 00	lda $000703	                LDA @lCHAN_OUT      ; Check the output channel #
.3906a0	f0 16		beq $3906b8	                BEQ putc_screen     ; If it's 0: print to the screen
.3906a2	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.3906a4	f0 07		beq $3906ad	                BEQ putc_uart       ; Yes: handle printing to the UART
.3906a6	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.3906a8	f0 03		beq $3906ad	                BEQ putc_uart       ; Yes: handle printing to the UART
.3906aa	68		pla		                PLA                 ; Otherwise, just exit
.3906ab	80 4b		bra $3906f8	                BRA done
.3906ad	22 1c 33 39	jsl $39331c	putc_uart       JSL UART_SELECT     ; Point to the correct UART
.3906b1	68		pla		                PLA                 ; Recover the character to send
.3906b2	22 f1 33 39	jsl $3933f1	                JSL UART_PUTC       ; Send the character
.3906b6	80 40		bra $3906f8	                BRA done
.3906b8	68		pla		putc_screen     PLA                 ; Get the character to print
.3906b9	c9 0a		cmp #$0a	                CMP #CHAR_LF        ; Linefeed moves cursor down one line
.3906bb	f0 5d		beq $39071a	                BEQ go_down
.3906bd	c9 20		cmp #$20	                CMP #$20
.3906bf	90 19		bcc $3906da	                BCC check_ctrl0     ; [$00..$1F]: check for arrows
.3906c1	c9 7f		cmp #$7f	                CMP #$7F
.3906c3	f0 39		beq $3906fe	                BEQ do_del
.3906c5	b0 02		bcs $3906c9	                BCS check_A0        ; [$20..$7E]: print it
.3906c7	80 29		bra $3906f2	                BRA printc
.3906c9	c9 a0		cmp #$a0	check_A0        CMP #$A0
.3906cb	90 02		bcc $3906cf	                BCC check_ctrl1
.3906cd	80 23		bra $3906f2	                BRA printc          ; [$A0..$FF]: print it
.3906cf	c9 91		cmp #$91	check_ctrl1     CMP #CHAR_DOWN      ; If the down arrow key was pressed
.3906d1	f0 47		beq $39071a	                BEQ go_down         ; ... move the cursor down one row
.3906d3	c9 9d		cmp #$9d	                CMP #CHAR_LEFT      ; If the left arrow key was pressed
.3906d5	f0 55		beq $39072c	                BEQ go_left         ; ... move the cursor left one column
.3906d7	4c f8 06	jmp $3906f8	                JMP done
.3906da	c9 09		cmp #$09	check_ctrl0     CMP #CHAR_TAB       ; If it's a TAB...
.3906dc	f0 54		beq $390732	                BEQ do_TAB          ; ... move to the next TAB stop
.3906de	c9 08		cmp #$08	                CMP #CHAR_BS        ; If it's a backspace...
.3906e0	f0 28		beq $39070a	                BEQ backspace       ; ... move the cursor back and replace with a space
.3906e2	c9 0d		cmp #$0d	                CMP #CHAR_CR        ; If the carriage return was pressed
.3906e4	f0 2e		beq $390714	                BEQ do_cr           ; ... move cursor down and to the first column
.3906e6	c9 11		cmp #$11	                CMP #CHAR_UP        ; If the up arrow key was pressed
.3906e8	f0 36		beq $390720	                BEQ go_up           ; ... move the cursor up one row
.3906ea	c9 1d		cmp #$1d	                CMP #CHAR_RIGHT     ; If the right arrow key was pressed
.3906ec	f0 38		beq $390726	                BEQ go_right        ; ... move the cursor right one column
.3906ee	c9 0f		cmp #$0f	                CMP #CHAR_INS       ; If the insert key was pressed
.3906f0	f0 12		beq $390704	                BEQ do_ins          ; ... insert a space
.3906f2	87 17		sta [$17]	printc          STA [CURSORPOS]     ; Save the character on the screen
.3906f4	22 e6 07 39	jsl $3907e6	                JSL ICSRRIGHT
.3906f8	28		plp		done            PLP
.3906f9	ab		plb		                PLB
.3906fa	2b		pld		                PLD
.3906fb	7a		ply		                PLY
.3906fc	fa		plx		                PLX
.3906fd	6b		rtl		                RTL
.3906fe	22 59 07 39	jsl $390759	do_del          JSL SCRSHIFTLL      ; Shift the current line left one space into the cursor
.390702	80 f4		bra $3906f8	                BRA done
.390704	22 7c 07 39	jsl $39077c	do_ins          JSL SCRSHIFTLR      ; Shift the current line right one space from the cursor
.390708	80 ee		bra $3906f8	                BRA done
.39070a	22 19 08 39	jsl $390819	backspace       JSL ICSRLEFT
.39070e	22 59 07 39	jsl $390759	                JSL SCRSHIFTLL      ; Shift the current line left one space into the cursor
.390712	80 e4		bra $3906f8	                BRA done
.390714	22 a0 07 39	jsl $3907a0	do_cr           JSL IPRINTCR        ; Move the cursor to the beginning of the next line
.390718	80 de		bra $3906f8	                BRA done
.39071a	22 65 08 39	jsl $390865	go_down         JSL ICSRDOWN        ; Move the cursor down one row (might force a scroll)
.39071e	80 d8		bra $3906f8	                BRA done
.390720	22 3f 08 39	jsl $39083f	go_up           JSL ICSRUP          ; Move the cursor up one line
.390724	80 d2		bra $3906f8	                BRA done
.390726	22 e6 07 39	jsl $3907e6	go_right        JSL ICSRRIGHT       ; Move the cursor right one column
.39072a	80 cc		bra $3906f8	                BRA done
.39072c	22 19 08 39	jsl $390819	go_left         JSL ICSRLEFT        ; Move the cursor left one column
.390730	80 c6		bra $3906f8	                BRA done
.390732					do_TAB
.390732	c2 20		rep #$20	                REP #$20        ; set A long
.390734	a5 1a		lda $1a		                LDA CURSORX         ; Get the current column
.390736	29 f8 ff	and #$fff8	                AND #$FFF8          ; See which group of 8 it's in
.390739	18		clc		                CLC
.39073a	69 08 00	adc #$0008	                ADC #$0008          ; And move it to the next one
.39073d	aa		tax		                TAX
.39073e	a4 1c		ldy $1c		                LDY CURSORY
.390740	e2 20		sep #$20	                SEP #$20        ; set A short
.390742	e4 0f		cpx $0f		set_xy          CPX COLS_VISIBLE    ; Check if we're still on screen horizontally
.390744	90 04		bcc $39074a	                BCC check_row       ; Yes: check the row
.390746	a2 00 00	ldx #$0000	                LDX #0              ; No: move to the first column...
.390749	c8		iny		                INY                 ; ... and the next row
.39074a	c4 13		cpy $13		check_row       CPY LINES_VISIBLE   ; Check if we're still on the screen vertically
.39074c	90 05		bcc $390753	                BCC do_locate       ; Yes: reposition the cursor
.39074e	22 cc 08 39	jsl $3908cc	                JSL ISCROLLUP       ; No: scroll the screen
.390752	88		dey		                DEY                 ; And set the row to the last one
.390753	22 8a 08 39	jsl $39088a	do_locate       JSL ILOCATE         ; Set the cursor position
.390757	80 9f		bra $3906f8	                BRA done
.390759	da		phx		SCRSHIFTLL      PHX
.39075a	5a		phy		                PHY
.39075b	48		pha		                PHA
.39075c	08		php		                PHP
.39075d	48		pha		                PHA             ; begin setdp macro
.39075e	08		php		                PHP
.39075f	c2 20		rep #$20	                REP #$20        ; set A long
.390761	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390764	5b		tcd		                TCD
.390765	28		plp		                PLP
.390766	68		pla		                PLA             ; end setdp macro
.390767	c2 30		rep #$30	                REP #$30        ; set A&X long
.390769	a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.39076b	a8		tay		                TAY                 ; Set it as the destination
.39076c	aa		tax		                TAX
.39076d	e8		inx		                INX                 ; And set the next cell as the source
.39076e	38		sec		                SEC                 ; Calculate the length of the block to move
.39076f	a9 7f 00	lda #$007f	                LDA #127            ; as 127 - X
.390772	e5 1a		sbc $1a		                SBC CURSORX
.390774	54 af af	mvn $af,$af	                MVN $AF, $AF        ; And move the block
.390777	28		plp		                PLP
.390778	68		pla		                PLA
.390779	7a		ply		                PLY
.39077a	fa		plx		                PLX
.39077b	6b		rtl		                RTL
.39077c	da		phx		SCRSHIFTLR      PHX
.39077d	48		pha		                PHA
.39077e	08		php		                PHP
.39077f	c2 30		rep #$30	                REP #$30        ; set A&X long
.390781	a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.390783	29 80 ff	and #$ff80	                AND #$FF80          ; Mask off the column bits
.390786	09 7f 00	ora #$007f	                ORA #$007F          ; And compute the address of the last cell
.390789	a8		tay		                TAY                 ; And set that as the destination address
.39078a	3a		dec a		                DEC A               ; Compute the address of the character to the left
.39078b	aa		tax		                TAX                 ; And make it the source
.39078c	38		sec		                SEC                 ; Calculate the length of the block to move
.39078d	a9 7f 00	lda #$007f	                LDA #127            ; as 127 - X
.390790	e5 1a		sbc $1a		                SBC CURSORX
.390792	44 af af	mvp $af,$af	                MVP $AF, $AF        ; And move the block
.390795	e2 20		sep #$20	                SEP #$20        ; set A short
.390797	a9 20		lda #$20	                LDA #CHAR_SP        ; Put a blank space at the cursor position
.390799	87 17		sta [$17]	                STA [CURSORPOS]
.39079b	28		plp		                PLP
.39079c	68		pla		                PLA
.39079d	fa		plx		                PLX
.39079e	6b		rtl		                RTL
.39079f					IPUTB
.39079f	6b		rtl		                RTL
.3907a0					IPRINTCR
.3907a0	da		phx		                PHX
.3907a1	5a		phy		                PHY
.3907a2	08		php		                PHP
.3907a3	e2 20		sep #$20	                SEP #$20        ; set A short
.3907a5	af 03 07 00	lda $000703	                LDA @lCHAN_OUT
.3907a9	f0 1c		beq $3907c7	                BEQ scr_printcr
.3907ab	c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.3907ad	f0 06		beq $3907b5	                BEQ uart_printcr    ; Yes: handle printing to the UART
.3907af	c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.3907b1	f0 02		beq $3907b5	                BEQ uart_printcr    ; Yes: handle printing to the UART
.3907b3	80 1c		bra $3907d1	                BRA done
.3907b5	22 1c 33 39	jsl $39331c	uart_printcr    JSL UART_SELECT
.3907b9	a9 0d		lda #$0d	                LDA #CHAR_CR
.3907bb	22 7e 06 39	jsl $39067e	                JSL IPUTC
.3907bf	a9 0a		lda #$0a	                LDA #CHAR_LF
.3907c1	22 7e 06 39	jsl $39067e	                JSL IPUTC
.3907c5	80 0a		bra $3907d1	                BRA done
.3907c7	a2 00 00	ldx #$0000	scr_printcr     LDX #0
.3907ca	a4 1c		ldy $1c		                LDY CURSORY
.3907cc	c8		iny		                INY
.3907cd	22 8a 08 39	jsl $39088a	                JSL ILOCATE
.3907d1	28		plp		done            PLP
.3907d2	7a		ply		                PLY
.3907d3	fa		plx		                PLX
.3907d4	6b		rtl		                RTL
.3907d5	da		phx		ICSRHOME        PHX
.3907d6	5a		phy		                PHY
.3907d7	08		php		                PHP
.3907d8	a2 00 00	ldx #$0000	                LDX #0
.3907db	a0 00 00	ldy #$0000	                LDY #0
.3907de	22 8a 08 39	jsl $39088a	                JSL ILOCATE
.3907e2	28		plp		                PLP
.3907e3	7a		ply		                PLY
.3907e4	fa		plx		                PLX
.3907e5	6b		rtl		                RTL
.3907e6	da		phx		ICSRRIGHT       PHX
.3907e7	5a		phy		                PHY
.3907e8	48		pha		                PHA
.3907e9	0b		phd		                PHD
.3907ea	08		php		                PHP
.3907eb	c2 20		rep #$20	                REP #$20        ; set A long
.3907ed	c2 10		rep #$10	                REP #$10        ; set X long
.3907ef	48		pha		                PHA             ; begin setdp macro
.3907f0	08		php		                PHP
.3907f1	c2 20		rep #$20	                REP #$20        ; set A long
.3907f3	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.3907f6	5b		tcd		                TCD
.3907f7	28		plp		                PLP
.3907f8	68		pla		                PLA             ; end setdp macro
.3907f9	a6 1a		ldx $1a		                LDX CURSORX           ; Get the new column
.3907fb	e8		inx		                INX
.3907fc	a4 1c		ldy $1c		                LDY CURSORY           ; Get the current row
.3907fe	e4 0f		cpx $0f		                CPX COLS_VISIBLE      ; Are we off screen?
.390800	90 0d		bcc $39080f	                BCC icsrright_nowrap  ; No: just set the position
.390802	a2 00 00	ldx #$0000	                LDX #0                ; Yes: move to the first column
.390805	c8		iny		                INY                   ; And move to the next row
.390806	c4 13		cpy $13		                CPY LINES_VISIBLE     ; Are we still off screen?
.390808	90 05		bcc $39080f	                BCC icsrright_nowrap  ; No: just set the position
.39080a	88		dey		                DEY                   ; Yes: lock to the last row
.39080b	22 cc 08 39	jsl $3908cc	                JSL ISCROLLUP         ; But scroll the screen up
.39080f					icsrright_nowrap
.39080f	22 8a 08 39	jsl $39088a	                JSL ILOCATE           ; Set the cursor position
.390813	28		plp		                PLP
.390814	2b		pld		                PLD
.390815	68		pla		                PLA
.390816	7a		ply		                PLY
.390817	fa		plx		                PLX
.390818	6b		rtl		                RTL
.390819					ICSRLEFT
.390819	da		phx		                PHX
.39081a	5a		phy		                PHY
.39081b	48		pha		                PHA
.39081c	0b		phd		                PHD
.39081d	08		php		                PHP
.39081e	c2 30		rep #$30	                REP #$30        ; set A&X long
.390820	48		pha		                PHA             ; begin setdp macro
.390821	08		php		                PHP
.390822	c2 20		rep #$20	                REP #$20        ; set A long
.390824	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.390827	5b		tcd		                TCD
.390828	28		plp		                PLP
.390829	68		pla		                PLA             ; end setdp macro
.39082a	a5 1a		lda $1a		                LDA CURSORX
.39082c	f0 0b		beq $390839	                BEQ icsrleft_done_already_zero ; Check that we are not already @ Zero
.39082e	a6 1a		ldx $1a		                LDX CURSORX
.390830	ca		dex		                DEX
.390831	86 1a		stx $1a		                STX CURSORX
.390833	a4 1c		ldy $1c		                LDY CURSORY
.390835	22 8a 08 39	jsl $39088a	                JSL ILOCATE
.390839					icsrleft_done_already_zero
.390839	28		plp		                PLP
.39083a	2b		pld		                PLD
.39083b	68		pla		                PLA
.39083c	7a		ply		                PLY
.39083d	fa		plx		                PLX
.39083e	6b		rtl		                RTL
.39083f					ICSRUP
.39083f	da		phx		                PHX
.390840	5a		phy		                PHY
.390841	48		pha		                PHA
.390842	0b		phd		                PHD
.390843	08		php		                PHP
.390844	c2 30		rep #$30	                REP #$30        ; set A&X long
.390846	48		pha		                PHA             ; begin setdp macro
.390847	08		php		                PHP
.390848	c2 20		rep #$20	                REP #$20        ; set A long
.39084a	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.39084d	5b		tcd		                TCD
.39084e	28		plp		                PLP
.39084f	68		pla		                PLA             ; end setdp macro
.390850	a5 1c		lda $1c		                LDA CURSORY
.390852	f0 0b		beq $39085f	                BEQ isrup_done_already_zero ; Check if we are not already @ Zero
.390854	a4 1c		ldy $1c		                LDY CURSORY
.390856	88		dey		                DEY
.390857	84 1c		sty $1c		                STY CURSORY
.390859	a6 1a		ldx $1a		                LDX CURSORX
.39085b	22 8a 08 39	jsl $39088a	                JSL ILOCATE
.39085f					isrup_done_already_zero
.39085f	28		plp		                PLP
.390860	2b		pld		                PLD
.390861	68		pla		                PLA
.390862	7a		ply		                PLY
.390863	fa		plx		                PLX
.390864	6b		rtl		                RTL
.390865	da		phx		ICSRDOWN        PHX
.390866	5a		phy		                PHY
.390867	0b		phd		                PHD
.390868	c2 30		rep #$30	                REP #$30        ; set A&X long
.39086a	48		pha		                PHA             ; begin setdp macro
.39086b	08		php		                PHP
.39086c	c2 20		rep #$20	                REP #$20        ; set A long
.39086e	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.390871	5b		tcd		                TCD
.390872	28		plp		                PLP
.390873	68		pla		                PLA             ; end setdp macro
.390874	a6 1a		ldx $1a		                LDX CURSORX                 ; Get the current column
.390876	a4 1c		ldy $1c		                LDY CURSORY                 ; Get the new row
.390878	c8		iny		                INY
.390879	c4 13		cpy $13		                CPY LINES_VISIBLE           ; Check to see if we're off screen
.39087b	90 05		bcc $390882	                BCC icsrdown_noscroll       ; No: go ahead and set the position
.39087d	88		dey		                DEY                         ; Yes: go back to the last row
.39087e	22 cc 08 39	jsl $3908cc	                JSL ISCROLLUP               ; But scroll the screen up
.390882					icsrdown_noscroll
.390882	22 8a 08 39	jsl $39088a	                JSL ILOCATE                 ; And set the cursor position
.390886	2b		pld		                PLD
.390887	7a		ply		                PLY
.390888	fa		plx		                PLX
.390889	6b		rtl		                RTL
.39088a	48		pha		ILOCATE         PHA
.39088b	0b		phd		                PHD
.39088c	08		php		                PHP
.39088d	48		pha		                PHA             ; begin setdp macro
.39088e	08		php		                PHP
.39088f	c2 20		rep #$20	                REP #$20        ; set A long
.390891	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390894	5b		tcd		                TCD
.390895	28		plp		                PLP
.390896	68		pla		                PLA             ; end setdp macro
.390897	c2 30		rep #$30	                REP #$30        ; set A&X long
.390899					ilocate_scroll
.390899	c4 13		cpy $13		                CPY LINES_VISIBLE
.39089b	90 07		bcc $3908a4	                BCC ilocate_scrolldone
.39089d	22 cc 08 39	jsl $3908cc	                JSL ISCROLLUP
.3908a1	88		dey		                DEY
.3908a2	80 f5		bra $390899	                BRA ilocate_scroll
.3908a4					ilocate_scrolldone
.3908a4	86 1a		stx $1a		                STX CURSORX
.3908a6	84 1c		sty $1c		                STY CURSORY
.3908a8	a5 0c		lda $0c		                LDA SCREENBEGIN
.3908aa					ilocate_row
.3908aa	c0 00 00	cpy #$0000	                CPY #$0
.3908ad	f0 08		beq $3908b7	                BEQ ilocate_right
.3908af	18		clc		ilocate_down    CLC
.3908b0	65 11		adc $11		                ADC COLS_PER_LINE
.3908b2	88		dey		                DEY
.3908b3	f0 02		beq $3908b7	                BEQ ilocate_right
.3908b5	80 f8		bra $3908af	                BRA ilocate_down
.3908b7	18		clc		ilocate_right   CLC
.3908b8	65 1a		adc $1a		                ADC CURSORX             ; move the cursor right X columns
.3908ba	85 17		sta $17		                STA CURSORPOS
.3908bc	a4 1c		ldy $1c		                LDY CURSORY
.3908be	98		tya		                TYA
.3908bf	8f 16 00 af	sta $af0016	                STA @lVKY_TXT_CURSOR_Y_REG_L  ;Store in Vicky's registers
.3908c3	8a		txa		                TXA
.3908c4	8f 14 00 af	sta $af0014	                STA @lVKY_TXT_CURSOR_X_REG_L  ;Store in Vicky's register
.3908c8	28		plp		ilocate_done    PLP
.3908c9	2b		pld		                PLD
.3908ca	68		pla		                PLA
.3908cb	6b		rtl		                RTL
.3908cc					ISCROLLUP
.3908cc	48		pha		                PHA
.3908cd	da		phx		                PHX
.3908ce	5a		phy		                PHY
.3908cf	8b		phb		                PHB
.3908d0	08		php		                PHP
.3908d1	c2 30		rep #$30	                REP #$30        ; set A&X long
.3908d3	18		clc		                CLC
.3908d4	a0 00 a0	ldy #$a000	                LDY #$A000
.3908d7	a2 80 a0	ldx #$a080	                LDX #$A080
.3908da	a9 7f 1f	lda #$1f7f	                LDA #128 * 63 - 1
.3908dd	54 af af	mvn $af,$af	                MVN $AF,$AF
.3908e0	c2 30		rep #$30	                REP #$30        ; set A&X long
.3908e2	a0 00 c0	ldy #$c000	                LDY #$C000
.3908e5	a2 80 c0	ldx #$c080	                LDX #$C080
.3908e8	a9 7f 1f	lda #$1f7f	                LDA #128 * 63 - 1
.3908eb	54 af af	mvn $af,$af	                MVN $AF,$AF
.3908ee	28		plp		                PLP
.3908ef	ab		plb		                PLB
.3908f0	7a		ply		                PLY
.3908f1	fa		plx		                PLX
.3908f2	68		pla		                PLA
.3908f3	6b		rtl		                RTL
.3908f4	08		php		IPRINTH         PHP
.3908f5	48		pha		                PHA
.3908f6					iprinth1
.3908f6	e2 20		sep #$20	                SEP #$20        ; set A short
.3908f8	bd 00 00	lda $0000,x	                LDA #0,b,x      ; Read the value to be printed
.3908fb	4a		lsr a		                LSR
.3908fc	4a		lsr a		                LSR
.3908fd	4a		lsr a		                LSR
.3908fe	4a		lsr a		                LSR
.3908ff	22 11 09 39	jsl $390911	                JSL iprint_digit
.390903	bd 00 00	lda $0000,x	                LDA #0,b,x
.390906	22 11 09 39	jsl $390911	                JSL iprint_digit
.39090a	ca		dex		                DEX
.39090b	88		dey		                DEY
.39090c	d0 e8		bne $3908f6	                BNE iprinth1
.39090e	68		pla		                PLA
.39090f	28		plp		                PLP
.390910	6b		rtl		                RTL
.390911	da		phx		iprint_digit    PHX
.390912	c2 20		rep #$20	                REP #$20        ; set A long
.390914	29 0f 00	and #$000f	                AND #$0F
.390917	aa		tax		                TAX
.390918	bf 44 17 39	lda $391744,x	                LDA hex_digits,X
.39091c	22 7e 06 39	jsl $39067e	                JSL IPUTC       ; Print the digit
.390920	fa		plx		                PLX
.390921	6b		rtl		                RTL
.390922	0b		phd		ICLRSCREEN	    PHD
.390923	08		php		                PHP
.390924	48		pha		                PHA
.390925	da		phx		                PHX
.390926	e2 20		sep #$20	                SEP #$20        ; set A short
.390928	c2 10		rep #$10	                REP #$10        ; set X long
.39092a	a2 00 00	ldx #$0000	                LDX #$0000		; Only Use One Pointer
.39092d	a9 20		lda #$20	                LDA #$20		; Fill the Entire Screen with Space
.39092f	9f 00 a0 af	sta $afa000,x	iclearloop0	    STA CS_TEXT_MEM_PTR, x	;
.390933	e8		inx		                inx
.390934	e0 00 20	cpx #$2000	                cpx #$2000
.390937	d0 f6		bne $39092f	                bne iclearloop0
.390939	a2 00 00	ldx #$0000	                LDX	#$0000		; Only Use One Pointer
.39093c	a9 ed		lda #$ed	                LDA #$ED		; Fill the Color Memory with Foreground: 75% Purple, Background 12.5% White
.39093e	9f 00 c0 af	sta $afc000,x	iclearloop1	    STA CS_COLOR_MEM_PTR, x	;
.390942	e8		inx		                inx
.390943	e0 00 20	cpx #$2000	                cpx #$2000
.390946	d0 f6		bne $39093e	                bne iclearloop1
.390948	c2 10		rep #$10	                REP #$10        ; set X long
.39094a	c2 20		rep #$20	                REP #$20        ; set A long
.39094c	fa		plx		                PLX
.39094d	68		pla		                PLA
.39094e	28		plp		                PLP
.39094f	2b		pld		                PLD
.390950	6b		rtl		                RTL
.390951	48		pha		ICOLORFLAG      PHA
.390952	da		phx		                PHX
.390953	08		php		                PHP
.390954	e2 30		sep #$30	                SEP #$30        ; set A&X short
.390956	a2 00		ldx #$00	                LDX #$00
.390958	bf 2f 14 39	lda $39142f,x	iclearloop2	    LDA @lgreet_clr_line1,x
.39095c	9f 00 c0 af	sta $afc000,x	                STA CS_COLOR_MEM_PTR,x
.390960	bf 59 14 39	lda $391459,x	                LDA @lgreet_clr_line2,x
.390964	9f 80 c0 af	sta $afc080,x	                STA CS_COLOR_MEM_PTR + $80,x
.390968	bf 83 14 39	lda $391483,x	                LDA @lgreet_clr_line3,x
.39096c	9f 00 c1 af	sta $afc100,x	                STA CS_COLOR_MEM_PTR + $100,x
.390970	bf ad 14 39	lda $3914ad,x	                LDA @lgreet_clr_line4,x
.390974	9f 80 c1 af	sta $afc180,x	                STA CS_COLOR_MEM_PTR + $180,x
.390978	bf d7 14 39	lda $3914d7,x	                LDA @lgreet_clr_line5,x
.39097c	9f 00 c2 af	sta $afc200,x	                STA CS_COLOR_MEM_PTR + $200,x
.390980	e8		inx		                inx
.390981	e0 2a		cpx #$2a	                cpx #42
.390983	d0 d3		bne $390958	                bne iclearloop2
.390985	28		plp		                PLP
.390986	fa		plx		                PLX
.390987	68		pla		                PLA
.390988	6b		rtl		                RTL
.390989	0b		phd		IINITCHLUT		  PHD
.39098a	08		php		                PHP
.39098b	48		pha		                PHA
.39098c	da		phx		                PHX
.39098d	e2 20		sep #$20	                SEP #$20        ; set A short
.39098f	e2 10		sep #$10	                SEP #$10        ; set X short
.390991	a2 00		ldx #$00					        LDX	#$00
.390993	bf 01 15 39	lda $391501,x	lutinitloop0	  LDA @lfg_color_lut,x		; get Local Data
.390997	9f 40 1f af	sta $af1f40,x	                STA FG_CHAR_LUT_PTR,x	; Write in LUT Memory
.39099b	e8		inx		                inx
.39099c	e0 40		cpx #$40	                cpx #$40
.39099e	d0 f3		bne $390993	                bne lutinitloop0
.3909a0	a2 00		ldx #$00	                LDX	#$00
.3909a2	bf 41 15 39	lda $391541,x	lutinitloop1	  LDA @lbg_color_lut,x		; get Local Data
.3909a6	9f 80 1f af	sta $af1f80,x	                STA BG_CHAR_LUT_PTR,x	; Write in LUT Memory
.3909aa	e8		inx		                INX
.3909ab	e0 40		cpx #$40	                CPX #$40
.3909ad	d0 f3		bne $3909a2	                bne lutinitloop1
.3909af	c2 20		rep #$20	                REP #$20        ; set A long
.3909b1	c2 10		rep #$10	                REP #$10        ; set X long
.3909b3	fa		plx		                PLX
.3909b4	68		pla		                PLA
.3909b5	28		plp		                PLP
.3909b6	2b		pld		                PLD
.3909b7	6b		rtl		                RTL
.3909b8					IINITGAMMATABLE
.3909b8	e2 20		sep #$20	                SEP #$20        ; set A short
.3909ba	c2 10		rep #$10	                REP #$10        ; set X long
.3909bc	a2 00 00	ldx #$0000	                ldx #$0000
.3909bf	bf 00 1c 39	lda $391c00,x	initgammaloop   LDA GAMMA_1_8_Tbl, x
.3909c3	9f 00 40 af	sta $af4000,x	                STA GAMMA_B_LUT_PTR, x
.3909c7	9f 00 41 af	sta $af4100,x	                STA GAMMA_G_LUT_PTR, x
.3909cb	9f 00 42 af	sta $af4200,x	                STA GAMMA_R_LUT_PTR, x
.3909cf	e8		inx		                inx
.3909d0	e0 00 01	cpx #$0100	                cpx #$0100
.3909d3	d0 ea		bne $3909bf	                bne initgammaloop
.3909d5	c2 30		rep #$30	                REP #$30        ; set A&X long
.3909d7	6b		rtl		                RTL
.3909d8	48		pha		IINITALLLUT     PHA
.3909d9	da		phx		                PHX
.3909da	a2 00 00	ldx #$0000	                LDX #$0000
.3909dd	e2 20		sep #$20	                SEP #$20        ; set A short
.3909df	a9 00		lda #$00	                LDA #$00
.3909e1	85 0a		sta $0a		                STA $0A     ; Temp Location
.3909e3					iinit_lut_loop
.3909e3	86 02		stx $02		                STX $02
.3909e5	a6 0a		ldx $0a		                LDX $0A
.3909e7	bf 00 1b 39	lda $391b00,x	                LDA GAMMA_2_2_Tbl, x
.3909eb	49 55		eor #$55	                EOR  #$55
.3909ed	a6 02		ldx $02		                LDX $02
.3909ef	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.3909f3	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.3909f7	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.3909fb	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.3909ff	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390a03	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390a07	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390a0b	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390a0f	e8		inx		                inx
.390a10	86 02		stx $02		                STX $02
.390a12	a6 0a		ldx $0a		                LDX $0A
.390a14	bf 00 1d 39	lda $391d00,x	                LDA RANDOM_LUT_Tbl, x
.390a18	a6 02		ldx $02		                LDX $02
.390a1a	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390a1e	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390a22	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390a26	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390a2a	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390a2e	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390a32	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390a36	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390a3a	e8		inx		                inx
.390a3b	86 02		stx $02		                STX $02
.390a3d	a6 0a		ldx $0a		                LDX $0A
.390a3f	bf 00 1c 39	lda $391c00,x	                LDA GAMMA_1_8_Tbl, x
.390a43	49 aa		eor #$aa	                EOR  #$AA
.390a45	a6 02		ldx $02		                LDX $02
.390a47	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390a4b	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390a4f	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390a53	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390a57	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390a5b	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390a5f	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390a63	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390a67	e8		inx		                inx
.390a68	a9 ff		lda #$ff	                LDA #$FF
.390a6a	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390a6e	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390a72	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390a76	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390a7a	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390a7e	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390a82	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390a86	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390a8a	e6 0a		inc $0a		                inc $0A
.390a8c	e8		inx		                inx
.390a8d	e0 00 04	cpx #$0400	                cpx #$0400
.390a90	f0 03		beq $390a95	                beq iinit_lut_exit
.390a92	82 4e ff	brl $3909e3	                brl iinit_lut_loop
.390a95					iinit_lut_exit
.390a95	c2 30		rep #$30	                REP #$30        ; set A&X long
.390a97	fa		plx		                PLX
.390a98	68		pla		                PLA
.390a99	6b		rtl		                RTL
.390a9a	48		pha		IINITVKYTXTMODE PHA
.390a9b	e2 20		sep #$20	                SEP #$20        ; set A short
.390a9d	a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En      ;Okay, this Enables the Text Mode (Video Display)
.390a9f	8f 00 00 af	sta $af0000	                STA MASTER_CTRL_REG_L
.390aa3	a9 20		lda #$20	                LDA #$20
.390aa5	8f 05 00 af	sta $af0005	                STA BORDER_COLOR_B
.390aa9	8f 07 00 af	sta $af0007	                STA BORDER_COLOR_R
.390aad	a9 00		lda #$00	                LDA #$00
.390aaf	8f 06 00 af	sta $af0006	                STA BORDER_COLOR_G
.390ab3	a9 01		lda #$01	                LDA #Border_Ctrl_Enable   ; Enable the Border
.390ab5	8f 04 00 af	sta $af0004	                STA BORDER_CTRL_REG
.390ab9	a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En
.390abb	8f 00 00 af	sta $af0000	                STA MASTER_CTRL_REG_L
.390abf	c2 30		rep #$30	                REP #$30        ; set A&X long
.390ac1	68		pla		                PLA
.390ac2	6b		rtl		                RTL
.390ac3					IINITVKYGRPMODE
.390ac3	48		pha		                PHA
.390ac4	e2 20		sep #$20	                SEP #$20        ; set A short
.390ac6	a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.390ac8	8f 40 01 af	sta $af0140	                STA @lBM_CONTROL_REG
.390acc	a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.390ace	8f 41 01 af	sta $af0141	                STA @lBM_START_ADDY_L
.390ad2	a9 c0		lda #$c0	                LDA #$C0
.390ad4	8f 42 01 af	sta $af0142	                STA @lBM_START_ADDY_M
.390ad8	a9 00		lda #$00	                LDA #$00
.390ada	8f 43 01 af	sta $af0143	                STA @lBM_START_ADDY_H ; This address is always base from
.390ade	a9 80		lda #$80	                LDA #$80
.390ae0	8f 44 01 af	sta $af0144	                STA BM_X_SIZE_L
.390ae4	a9 02		lda #$02	                LDA #$02
.390ae6	8f 45 01 af	sta $af0145	                STA BM_X_SIZE_H         ; $0280 = 640
.390aea	a9 e0		lda #$e0	                LDA #$E0
.390aec	8f 46 01 af	sta $af0146	                STA BM_Y_SIZE_L
.390af0	a9 01		lda #$01	                LDA #$01
.390af2	8f 47 01 af	sta $af0147	                STA BM_Y_SIZE_H         ; $01E0 = 480
.390af6	c2 30		rep #$30	                REP #$30        ; set A&X long
.390af8	68		pla		                PLA
.390af9	6b		rtl		                RTL
.390afa					IINITTILEMODE
.390afa	6b		rtl		                RTL
.390afb	48		pha		IINITSPRITE     PHA
.390afc	e2 20		sep #$20	                SEP #$20        ; set A short
.390afe	a9 03		lda #$03	                LDA #$03    ; Enable 17 Sprites
.390b00	8f 00 02 af	sta $af0200	                STA SP00_CONTROL_REG
.390b04	8f 08 02 af	sta $af0208	                STA SP01_CONTROL_REG
.390b08	8f 10 02 af	sta $af0210	                STA SP02_CONTROL_REG
.390b0c	8f 18 02 af	sta $af0218	                STA SP03_CONTROL_REG
.390b10	8f 20 02 af	sta $af0220	                STA SP04_CONTROL_REG
.390b14	8f 28 02 af	sta $af0228	                STA SP05_CONTROL_REG
.390b18	8f 30 02 af	sta $af0230	                STA SP06_CONTROL_REG
.390b1c	8f 38 02 af	sta $af0238	                STA SP07_CONTROL_REG
.390b20	8f 40 02 af	sta $af0240	                STA SP08_CONTROL_REG
.390b24	8f 48 02 af	sta $af0248	                STA SP09_CONTROL_REG
.390b28	8f 50 02 af	sta $af0250	                STA SP10_CONTROL_REG
.390b2c	8f 58 02 af	sta $af0258	                STA SP11_CONTROL_REG
.390b30	8f 60 02 af	sta $af0260	                STA SP12_CONTROL_REG
.390b34	8f 68 02 af	sta $af0268	                STA SP13_CONTROL_REG
.390b38	8f 70 02 af	sta $af0270	                STA SP14_CONTROL_REG
.390b3c	8f 78 02 af	sta $af0278	                STA SP15_CONTROL_REG
.390b40	8f 80 02 af	sta $af0280	                STA SP16_CONTROL_REG
.390b44	a9 09		lda #$09	                LDA #$09
.390b46	8f 03 02 af	sta $af0203	                STA SP00_ADDY_PTR_H
.390b4a	8f 0b 02 af	sta $af020b	                STA SP01_ADDY_PTR_H
.390b4e	8f 13 02 af	sta $af0213	                STA SP02_ADDY_PTR_H
.390b52	8f 1b 02 af	sta $af021b	                STA SP03_ADDY_PTR_H
.390b56	8f 23 02 af	sta $af0223	                STA SP04_ADDY_PTR_H
.390b5a	8f 2b 02 af	sta $af022b	                STA SP05_ADDY_PTR_H
.390b5e	8f 33 02 af	sta $af0233	                STA SP06_ADDY_PTR_H
.390b62	8f 3b 02 af	sta $af023b	                STA SP07_ADDY_PTR_H
.390b66	8f 43 02 af	sta $af0243	                STA SP08_ADDY_PTR_H
.390b6a	8f 4b 02 af	sta $af024b	                STA SP09_ADDY_PTR_H
.390b6e	8f 53 02 af	sta $af0253	                STA SP10_ADDY_PTR_H
.390b72	8f 5b 02 af	sta $af025b	                STA SP11_ADDY_PTR_H
.390b76	8f 63 02 af	sta $af0263	                STA SP12_ADDY_PTR_H
.390b7a	8f 6b 02 af	sta $af026b	                STA SP13_ADDY_PTR_H
.390b7e	8f 73 02 af	sta $af0273	                STA SP14_ADDY_PTR_H
.390b82	8f 7b 02 af	sta $af027b	                STA SP15_ADDY_PTR_H
.390b86	8f 83 02 af	sta $af0283	                STA SP16_ADDY_PTR_H
.390b8a	a9 00		lda #$00	                LDA #$00
.390b8c	8f 02 02 af	sta $af0202	                STA SP00_ADDY_PTR_M
.390b90	a9 04		lda #$04	                LDA #$04
.390b92	8f 0a 02 af	sta $af020a	                STA SP01_ADDY_PTR_M
.390b96	a9 08		lda #$08	                LDA #$08
.390b98	8f 12 02 af	sta $af0212	                STA SP02_ADDY_PTR_M
.390b9c	a9 0c		lda #$0c	                LDA #$0C
.390b9e	8f 1a 02 af	sta $af021a	                STA SP03_ADDY_PTR_M
.390ba2	a9 10		lda #$10	                LDA #$10
.390ba4	8f 22 02 af	sta $af0222	                STA SP04_ADDY_PTR_M
.390ba8	a9 14		lda #$14	                LDA #$14
.390baa	8f 2a 02 af	sta $af022a	                STA SP05_ADDY_PTR_M
.390bae	a9 18		lda #$18	                LDA #$18
.390bb0	8f 32 02 af	sta $af0232	                STA SP06_ADDY_PTR_M
.390bb4	a9 1c		lda #$1c	                LDA #$1C
.390bb6	8f 3a 02 af	sta $af023a	                STA SP07_ADDY_PTR_M
.390bba	a9 20		lda #$20	                LDA #$20
.390bbc	8f 42 02 af	sta $af0242	                STA SP08_ADDY_PTR_M
.390bc0	a9 24		lda #$24	                LDA #$24
.390bc2	8f 4a 02 af	sta $af024a	                STA SP09_ADDY_PTR_M
.390bc6	a9 28		lda #$28	                LDA #$28
.390bc8	8f 52 02 af	sta $af0252	                STA SP10_ADDY_PTR_M
.390bcc	a9 2c		lda #$2c	                LDA #$2C
.390bce	8f 5a 02 af	sta $af025a	                STA SP11_ADDY_PTR_M
.390bd2	a9 30		lda #$30	                LDA #$30
.390bd4	8f 62 02 af	sta $af0262	                STA SP12_ADDY_PTR_M
.390bd8	a9 34		lda #$34	                LDA #$34
.390bda	8f 6a 02 af	sta $af026a	                STA SP13_ADDY_PTR_M
.390bde	a9 38		lda #$38	                LDA #$38
.390be0	8f 72 02 af	sta $af0272	                STA SP14_ADDY_PTR_M
.390be4	a9 3c		lda #$3c	                LDA #$3C
.390be6	8f 7a 02 af	sta $af027a	                STA SP15_ADDY_PTR_M
.390bea	a9 40		lda #$40	                LDA #$40
.390bec	8f 82 02 af	sta $af0282	                STA SP16_ADDY_PTR_M
.390bf0	a9 00		lda #$00	                LDA #$00
.390bf2	8f 01 02 af	sta $af0201	                STA SP00_ADDY_PTR_L
.390bf6	8f 09 02 af	sta $af0209	                STA SP01_ADDY_PTR_L
.390bfa	8f 11 02 af	sta $af0211	                STA SP02_ADDY_PTR_L
.390bfe	8f 19 02 af	sta $af0219	                STA SP03_ADDY_PTR_L
.390c02	8f 21 02 af	sta $af0221	                STA SP04_ADDY_PTR_L
.390c06	8f 29 02 af	sta $af0229	                STA SP05_ADDY_PTR_L
.390c0a	8f 31 02 af	sta $af0231	                STA SP06_ADDY_PTR_L
.390c0e	8f 39 02 af	sta $af0239	                STA SP07_ADDY_PTR_L
.390c12	8f 41 02 af	sta $af0241	                STA SP08_ADDY_PTR_L
.390c16	8f 49 02 af	sta $af0249	                STA SP09_ADDY_PTR_L
.390c1a	8f 51 02 af	sta $af0251	                STA SP10_ADDY_PTR_L
.390c1e	8f 59 02 af	sta $af0259	                STA SP11_ADDY_PTR_L
.390c22	8f 61 02 af	sta $af0261	                STA SP12_ADDY_PTR_L
.390c26	8f 69 02 af	sta $af0269	                STA SP13_ADDY_PTR_L
.390c2a	8f 71 02 af	sta $af0271	                STA SP14_ADDY_PTR_L
.390c2e	8f 79 02 af	sta $af0279	                STA SP15_ADDY_PTR_L
.390c32	8f 81 02 af	sta $af0281	                STA SP16_ADDY_PTR_L
.390c36	68		pla		                PLA
.390c37	6b		rtl		                RTL
.390c38					IINITFONTSET
.390c38	e2 20		sep #$20	                SEP #$20        ; set A short
.390c3a	c2 10		rep #$10	                REP #$10        ; set X long
.390c3c	a2 00 00	ldx #$0000	                LDX #$0000
.390c3f					initFontsetbranch0
.390c3f	bf 00 f0 3f	lda $3ff000,x	                LDA @lFONT_4_BANK0,X    ; RAM Content
.390c43	9f 00 80 af	sta $af8000,x	                STA @lFONT_MEMORY_BANK0,X ; Vicky FONT RAM Bank
.390c47	e8		inx		                INX
.390c48	e0 00 08	cpx #$0800	                CPX #$0800
.390c4b	d0 f2		bne $390c3f	                BNE initFontsetbranch0
.390c4d	ea		nop		                NOP
.390c4e	a2 00 00	ldx #$0000	                LDX #$0000
.390c51					initFontsetbranch1
.390c51	bf 00 f8 3f	lda $3ff800,x	                LDA @lFONT_4_BANK1,X
.390c55	9f 00 88 af	sta $af8800,x	                STA @lFONT_MEMORY_BANK1,X ; Vicky FONT RAM Bank
.390c59	e8		inx		                INX
.390c5a	e0 00 08	cpx #$0800	                CPX #$0800
.390c5d	d0 f2		bne $390c51	                BNE initFontsetbranch1
.390c5f	ea		nop		                NOP
.390c60	c2 30		rep #$30	                REP #$30        ; set A&X long
.390c62	6b		rtl		                RTL
.390c63					INITMOUSEPOINTER
.390c63	e2 20		sep #$20	                SEP #$20        ; set A short
.390c65	c2 10		rep #$10	                REP #$10        ; set X long
.390c67	a2 00 00	ldx #$0000	                LDX #$0000
.390c6a					FILL_MOUSE_MARKER
.390c6a	bf 00 1e 39	lda $391e00,x	                LDA @lMOUSE_POINTER_PTR,X
.390c6e	9f 00 05 af	sta $af0500,x	                STA @lMOUSE_PTR_GRAP0_START, X
.390c72	e8		inx		                INX
.390c73	e0 00 01	cpx #$0100	                CPX #$0100
.390c76	d0 f2		bne $390c6a	                BNE FILL_MOUSE_MARKER
.390c78	ea		nop		                nop
.390c79	a9 01		lda #$01	                LDA #$01
.390c7b	8f 00 07 af	sta $af0700	                STA @lMOUSE_PTR_CTRL_REG_L  ; Enable Mouse, Mouse Pointer Graphic Bank 0
.390c7f	c2 30		rep #$30	                REP #$30        ; set A&X long
.390c81	6b		rtl		                RTL
.390c82	48		pha		IINITCURSOR     PHA
.390c83	e2 20		sep #$20	                SEP #$20        ; set A short
.390c85	a9 b1		lda #$b1	                LDA #$B1      ;The Cursor Character will be a Fully Filled Block
.390c87	8f 12 00 af	sta $af0012	                STA VKY_TXT_CURSOR_CHAR_REG
.390c8b	a9 03		lda #$03	                LDA #$03      ;Set Cursor Enable And Flash Rate @1Hz
.390c8d	8f 10 00 af	sta $af0010	                STA VKY_TXT_CURSOR_CTRL_REG ;
.390c91	c2 30		rep #$30	                REP #$30        ; set A&X long
.390c93	a9 00 00	lda #$0000	                LDA #$0000;
.390c96	8f 14 00 af	sta $af0014	                STA VKY_TXT_CURSOR_X_REG_L; // Set the X to Position 1
.390c9a	a9 06 00	lda #$0006	                LDA #$0006;
.390c9d	8f 16 00 af	sta $af0016	                STA VKY_TXT_CURSOR_Y_REG_L; // Set the Y to Position 6 (Below)
.390ca1	68		pla		                PLA
.390ca2	6b		rtl		                RTL
.390ca3	0b		phd		IINITSUPERIO	  PHD
.390ca4	08		php		                PHP
.390ca5	48		pha		                PHA
.390ca6	e2 20		sep #$20	                SEP #$20        ; set A short
.390ca8	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390caa	8f 23 11 af	sta $af1123	                STA GP10_REG
.390cae	af 23 11 af	lda $af1123	                LDA GP10_REG
.390cb2	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390cb4	8f 24 11 af	sta $af1124	                STA GP11_REG
.390cb8	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390cba	8f 25 11 af	sta $af1125	                STA GP12_REG
.390cbe	a9 01		lda #$01	        				LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390cc0	8f 26 11 af	sta $af1126	        				STA GP13_REG
.390cc4	a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BX) Bit[0] = 1, Bit[2] = 1
.390cc6	8f 27 11 af	sta $af1127	        				STA GP14_REG
.390cca	a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BY) Bit[0] = 1, Bit[2] = 1
.390ccc	8f 28 11 af	sta $af1128	        				STA GP15_REG
.390cd0	a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BX) Bit[0] = 1, Bit[2] = 1
.390cd2	8f 29 11 af	sta $af1129	        				STA GP16_REG
.390cd6	a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BY) Bit[0] = 1, Bit[2] = 1
.390cd8	8f 2a 11 af	sta $af112a	        				STA GP17_REG
.390cdc	a9 00		lda #$00	        				LDA #$00		;(C256 - HEADPHONE MUTE) - Output GPIO - Push-Pull (1 - Headphone On, 0 - HeadPhone Off)
.390cde	8f 2b 11 af	sta $af112b	        				STA GP20_REG
.390ce2	a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390ce4	8f 2f 11 af	sta $af112f					        STA GP24_REG
.390ce8	a9 05		lda #$05					        LDA #$05		;(C256 - MIDI IN) Bit[0] = 1, Bit[2] = 1 (Page 132 Manual)
.390cea	8f 30 11 af	sta $af1130					        STA GP25_REG
.390cee	a9 84		lda #$84				        	LDA #$84		;(C256 - MIDI OUT) Bit[2] = 1, Bit[7] = 1 (Open Drain - To be Checked)
.390cf0	8f 31 11 af	sta $af1131					        STA GP26_REG
.390cf4	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 1) Setup as GPIO Input for now
.390cf6	8f 33 11 af	sta $af1133					        STA GP30_REG
.390cfa	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 4) Setup as GPIO Input for now
.390cfc	8f 34 11 af	sta $af1134					        STA GP31_REG
.390d00	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 3) Setup as GPIO Input for now
.390d02	8f 35 11 af	sta $af1135					        STA GP32_REG
.390d06	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 6) Setup as GPIO Input for now
.390d08	8f 36 11 af	sta $af1136					        STA GP33_REG
.390d0c	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 5) Setup as GPIO Input for now
.390d0e	8f 37 11 af	sta $af1137					        STA GP34_REG
.390d12	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 8) Setup as GPIO Input for now
.390d14	8f 38 11 af	sta $af1138					        STA GP35_REG
.390d18	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 7) Setup as GPIO Input for now
.390d1a	8f 39 11 af	sta $af1139					        STA GP36_REG
.390d1e	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 10) Setup as GPIO Input for now
.390d20	8f 3a 11 af	sta $af113a					        STA GP37_REG
.390d24	a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390d26	8f 3d 11 af	sta $af113d					        STA GP42_REG
.390d2a	a9 01		lda #$01				          LDA #$01		;(C256 - INPUT PLL CLK INTERRUPT) Default Value - Will keep it as an input for now, no real usage for now
.390d2c	8f 3e 11 af	sta $af113e					        STA GP43_REG
.390d30	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RI2) - Input - Set Secondary Function
.390d32	8f 3f 11 af	sta $af113f					        STA GP50_REG
.390d36	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DCD2) - Input - Set Secondary Function
.390d38	8f 40 11 af	sta $af1140					        STA GP51_REG
.390d3c	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RXD2) - Input - Set Secondary Function
.390d3e	8f 41 11 af	sta $af1141					        STA GP52_REG
.390d42	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - TXD2) - Output - Set Secondary Function
.390d44	8f 42 11 af	sta $af1142					        STA GP53_REG
.390d48	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DSR2) - Input - Set Secondary Function
.390d4a	8f 43 11 af	sta $af1143					        STA GP54_REG
.390d4e	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - RTS2) - Output - Set Secondary Function
.390d50	8f 44 11 af	sta $af1144					        STA GP55_REG
.390d54	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - CTS2) - Input - Set Secondary Function
.390d56	8f 45 11 af	sta $af1145					        STA GP56_REG
.390d5a	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - DTR2) - Output - Set Secondary Function
.390d5c	8f 46 11 af	sta $af1146					        STA GP57_REG
.390d60	a9 84		lda #$84					        LDA #$84		;(C256 - LED1) - Open Drain - Output
.390d62	8f 47 11 af	sta $af1147					        STA GP60_REG
.390d66	a9 84		lda #$84					        LDA #$84		;(C256 - LED2) - Open Drain - Output
.390d68	8f 48 11 af	sta $af1148					        STA GP61_REG
.390d6c	a9 00		lda #$00				        	LDA #$00		;GPIO Data Register (GP10..GP17) - Not Used
.390d6e	8f 4b 11 af	sta $af114b					        STA GP1_REG
.390d72	a9 01		lda #$01					        LDA #$01		;GPIO Data Register (GP20..GP27) - Bit[0] - Headphone Mute (Enabling it)
.390d74	8f 4c 11 af	sta $af114c					        STA GP2_REG
.390d78	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP30..GP37) - Since it is in Output mode, nothing to write here.
.390d7a	8f 4d 11 af	sta $af114d					        STA GP3_REG
.390d7e	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP40..GP47)  - Not Used
.390d80	8f 4e 11 af	sta $af114e					        STA GP4_REG
.390d84	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP50..GP57)  - Not Used
.390d86	8f 4f 11 af	sta $af114f					        STA GP5_REG
.390d8a	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP60..GP61)  - Not Used
.390d8c	8f 50 11 af	sta $af1150					        STA GP6_REG
.390d90	a9 01		lda #$01					        LDA #$01		;LED1 Output - Already setup by Vicky Init Phase, for now, I will leave it alone
.390d92	8f 5d 11 af	sta $af115d					        STA LED1_REG
.390d96	a9 02		lda #$02					        LDA #$02		;LED2 Output - However, I will setup this one, to make sure the Code works (Full On, when Code was ran)
.390d98	8f 5e 11 af	sta $af115e					        STA LED2_REG
.390d9c	c2 20		rep #$20	                REP #$20        ; set A long
.390d9e	68		pla		                PLA
.390d9f	28		plp						        PLP
.390da0	2b		pld					        	PLD
.390da1	6b		rtl		                RTL
.390da2	0b		phd		IINITKEYBOARD	  PHD
.390da3	08		php						        PHP
.390da4	48		pha						        PHA
.390da5	da		phx						        PHX
.390da6	e2 20		sep #$20	                SEP #$20        ; set A short
.390da8	c2 10		rep #$10	                REP #$10        ; set X long
.390daa	18		clc		                CLC
.390dab	20 5b 0e	jsr $390e5b	                JSR Poll_Inbuf ;
.390dae	a9 aa		lda #$aa					        LDA #$AA			;Send self test command
.390db0	8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.390db4	20 66 0e	jsr $390e66	                JSR Poll_Outbuf ;
.390db7	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Check self test result
.390dbb	c9 55		cmp #$55					        CMP #$55
.390dbd	f0 03		beq $390dc2					        BEQ	passAAtest
.390dbf	82 89 00	brl $390e4b	                BRL initkb_loop_out
.390dc2					passAAtest
.390dc2	a9 ab		lda #$ab					        LDA #$AB			;Send test Interface command
.390dc4	8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.390dc8	20 66 0e	jsr $390e66	                JSR Poll_Outbuf ;
.390dcb	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Display Interface test results
.390dcf	c9 00		cmp #$00					        CMP #$00			;Should be 00
.390dd1	f0 03		beq $390dd6					        BEQ	passABtest
.390dd3	82 75 00	brl $390e4b	                BRL initkb_loop_out
.390dd6					passABtest
.390dd6	a9 60		lda #$60	                LDA #$60            ; Send Command 0x60 so to Enable Interrupt
.390dd8	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390ddc	20 5b 0e	jsr $390e5b	                JSR Poll_Inbuf ;
.390ddf	a9 69		lda #$69	                LDA #%01101001      ; Enable Interrupt
.390de1	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.390de5	20 5b 0e	jsr $390e5b	                JSR Poll_Inbuf ;
.390de8	a9 ff		lda #$ff	                LDA #$FF      ; Send Keyboard Reset command
.390dea	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.390dee	a2 ff ff	ldx #$ffff	                LDX #$FFFF
.390df1	ca		dex		DLY_LOOP1       DEX
.390df2	ea		nop		                NOP
.390df3	ea		nop		                NOP
.390df4	ea		nop		                NOP
.390df5	ea		nop		                NOP
.390df6	ea		nop		                NOP
.390df7	ea		nop		                NOP
.390df8	ea		nop		                NOP
.390df9	ea		nop		                NOP
.390dfa	e0 00 00	cpx #$0000	                CPX #$0000
.390dfd	d0 f2		bne $390df1	                BNE DLY_LOOP1
.390dff	20 66 0e	jsr $390e66	                JSR Poll_Outbuf ;
.390e02	af 60 10 af	lda $af1060	                LDA KBD_OUT_BUF   ; Read Output Buffer
.390e06					DO_CMD_F4_AGAIN
.390e06	20 5b 0e	jsr $390e5b	                JSR Poll_Inbuf ;
.390e09	a9 f4		lda #$f4					        LDA #$F4			; Enable the Keyboard
.390e0b	8f 60 10 af	sta $af1060					        STA KBD_DATA_BUF
.390e0f	20 66 0e	jsr $390e66	                JSR Poll_Outbuf ;
.390e12	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		; Clear the Output buffer
.390e16	c9 fa		cmp #$fa	                CMP #$FA
.390e18	d0 ec		bne $390e06	                BNE DO_CMD_F4_AGAIN
.390e1a	20 71 0e	jsr $390e71	                JSR INIT_MOUSE
.390e1d	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0  ; Read the Pending Register &
.390e21	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.390e23	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0  ; Writing it back will clear the Active Bit
.390e27	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1  ; Read the Pending Register &
.390e2b	29 01		and #$01	                AND #FNX1_INT00_KBD
.390e2d	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1  ; Writing it back will clear the Active Bit
.390e31	af 4d 01 00	lda $00014d	                LDA @lINT_MASK_REG1
.390e35	29 fe		and #$fe	                AND #~FNX1_INT00_KBD
.390e37	8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.390e3b	af 4c 01 00	lda $00014c	                LDA @lINT_MASK_REG0
.390e3f	29 7f		and #$7f	                AND #~FNX0_INT07_MOUSE
.390e41	8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.390e45	a2 fd 15	ldx #$15fd	                LDX #<>Success_kb_init
.390e48	38		sec		                SEC
.390e49	b0 03		bcs $390e4e	                BCS InitSuccess
.390e4b	a2 0f 16	ldx #$160f	initkb_loop_out LDX #<>Failed_kb_init
.390e4e	22 5e 06 39	jsl $39065e	InitSuccess     JSL IPRINT       ; print Message
.390e52	c2 20		rep #$20	                REP #$20        ; set A long
.390e54	c2 10		rep #$10	                REP #$10        ; set X long
.390e56	fa		plx		                PLX
.390e57	68		pla		                PLA
.390e58	28		plp						        PLP
.390e59	2b		pld						        PLD
.390e5a	6b		rtl		                RTL
.390e5b					Poll_Inbuf
.390e5b	af 64 10 af	lda $af1064	                LDA STATUS_PORT		; Load Status Byte
.390e5f	29 02		and #$02					        AND	#<INPT_BUF_FULL	; Test bit $02 (if 0, Empty)
.390e61	c9 02		cmp #$02					        CMP #<INPT_BUF_FULL
.390e63	f0 f6		beq $390e5b					        BEQ Poll_Inbuf
.390e65	60		rts		                RTS
.390e66					Poll_Outbuf
.390e66	af 64 10 af	lda $af1064	                LDA STATUS_PORT
.390e6a	29 01		and #$01	                AND #OUT_BUF_FULL ; Test bit $01 (if 1, Full)
.390e6c	c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.390e6e	d0 f6		bne $390e66	                BNE Poll_Outbuf
.390e70	60		rts		                RTS
.390e71					INIT_MOUSE
.390e71	20 5b 0e	jsr $390e5b	                JSR Poll_Inbuf
.390e74	a9 a8		lda #$a8	                LDA #$A8          ; Enable the second PS2 Channel
.390e76	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390e7a					DO_CMD_A9_AGAIN
.390e7a	20 5b 0e	jsr $390e5b	                JSR Poll_Inbuf
.390e7d	a9 a9		lda #$a9	                LDA #$A9          ; Tests second PS2 Channel
.390e7f	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390e83	20 66 0e	jsr $390e66	                JSR Poll_Outbuf ;
.390e86	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		; Clear the Output buffer
.390e8a	c9 00		cmp #$00	                CMP #$00
.390e8c	d0 ec		bne $390e7a	                BNE DO_CMD_A9_AGAIN
.390e8e	20 5b 0e	jsr $390e5b	                JSR Poll_Inbuf
.390e91	a9 20		lda #$20	                LDA #$20
.390e93	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390e97	20 66 0e	jsr $390e66	                JSR Poll_Outbuf ;
.390e9a	af 60 10 af	lda $af1060	                LDA KBD_OUT_BUF
.390e9e	09 02		ora #$02	                ORA #$02
.390ea0	48		pha		                PHA
.390ea1	20 5b 0e	jsr $390e5b	                JSR Poll_Inbuf
.390ea4	a9 60		lda #$60	                LDA #$60
.390ea6	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390eaa	20 5b 0e	jsr $390e5b	                JSR Poll_Inbuf ;
.390ead	68		pla		                PLA
.390eae	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.390eb2	a9 f6		lda #$f6	                LDA #$F6        ;Tell the mouse to use default settings
.390eb4	20 d7 0e	jsr $390ed7	                JSR MOUSE_WRITE
.390eb7	20 ea 0e	jsr $390eea	                JSR MOUSE_READ
.390eba	a9 e8		lda #$e8	                LDA #$E8
.390ebc	20 d7 0e	jsr $390ed7	                JSR MOUSE_WRITE
.390ebf	20 ea 0e	jsr $390eea	                JSR MOUSE_READ
.390ec2	a9 00		lda #$00	                LDA #$00
.390ec4	20 d7 0e	jsr $390ed7	                JSR MOUSE_WRITE
.390ec7	20 ea 0e	jsr $390eea	                JSR MOUSE_READ
.390eca	a9 f4		lda #$f4	                LDA #$F4        ; Enable the Mouse
.390ecc	20 d7 0e	jsr $390ed7	                JSR MOUSE_WRITE
.390ecf	20 ea 0e	jsr $390eea	                JSR MOUSE_READ
.390ed2	a9 00		lda #$00	                LDA #$00
.390ed4	85 e0		sta $e0		                STA MOUSE_PTR
.390ed6	60		rts		                RTS
.390ed7					MOUSE_WRITE
.390ed7	48		pha		                PHA
.390ed8	20 5b 0e	jsr $390e5b	                JSR Poll_Inbuf
.390edb	a9 d4		lda #$d4	                LDA #$D4
.390edd	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.390ee1	20 5b 0e	jsr $390e5b	                JSR Poll_Inbuf
.390ee4	68		pla		                PLA
.390ee5	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.390ee9	60		rts		                RTS
.390eea					MOUSE_READ
.390eea	20 66 0e	jsr $390e66	                JSR Poll_Outbuf ;
.390eed	af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF
.390ef1	60		rts		                RTS
.390ef2	48		pha		INITRTC         PHA
.390ef3	e2 20		sep #$20	                SEP #$20        ; set A short
.390ef5	af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL
.390ef9	00		brk #		                BRK
.390efa	c2 20		rep #$20	                REP #$20        ; set A long
.390efc	68		pla		                PLA
.390efd	6b		rtl		                RTL
.390efe					ITESTSID
.390efe	a9 0f 00	lda #$000f	                LDA #$0F
.390f01	8f 18 e4 af	sta $afe418	                STA SID0_MODE_VOL
.390f05	a9 be 00	lda #$00be	                LDA #$BE
.390f08	8f 05 e4 af	sta $afe405	                STA SID0_V1_ATCK_DECY
.390f0c	a9 f8 00	lda #$00f8	                LDA #$F8
.390f0f	8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.390f13	a9 11 00	lda #$0011	                LDA #$11
.390f16	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.390f1a	a9 25 00	lda #$0025	                LDA #$25
.390f1d	8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.390f21	a9 11 00	lda #$0011	                LDA #$11
.390f24	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL
.390f28	a9 08 00	lda #$0008	                LDA #$08
.390f2b	8f 03 e4 af	sta $afe403	                STA SID0_V1_PW_HI   ;G1
.390f2f	a9 00 00	lda #$0000	                LDA #$00
.390f32	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.390f36	a9 c6 00	lda #$00c6	                LDA #$C6
.390f39	8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.390f3d	a9 08 00	lda #$0008	                LDA #$08
.390f40	8f 0a e4 af	sta $afe40a	                STA SID0_V2_PW_HI   ;G1
.390f44	a9 00 00	lda #$0000	                LDA #$00
.390f47	8f 08 e4 af	sta $afe408	                STA SID0_V2_FREQ_HI
.390f4b	a9 08 00	lda #$0008	                LDA #$08
.390f4e	8f 0c e4 af	sta $afe40c	                STA SID0_V2_ATCK_DECY
.390f52	a9 c6 00	lda #$00c6	                LDA #$C6
.390f55	8f 0d e4 af	sta $afe40d	                STA SID0_V2_SSTN_RLSE
.390f59	a9 08 00	lda #$0008	                LDA #$08
.390f5c	8f 11 e4 af	sta $afe411	                STA SID0_V3_PW_HI   ;G1
.390f60	a9 00 00	lda #$0000	                LDA #$00
.390f63	8f 0f e4 af	sta $afe40f	                STA SID0_V3_FREQ_HI
.390f67	a9 08 00	lda #$0008	                LDA #$08
.390f6a	8f 13 e4 af	sta $afe413	                STA SID0_V3_ATCK_DECY
.390f6e	a9 c6 00	lda #$00c6	                LDA #$C6
.390f71	8f 14 e4 af	sta $afe414	                STA SID0_V3_SSTN_RLSE
.390f75	a9 36 00	lda #$0036	                LDA #$36              ;Left Side (Rev A of Board)
.390f78	8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.390f7c	a9 01 00	lda #$0001	                LDA #$01
.390f7f	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI   ;G1
.390f83	a9 00 00	lda #$0000	                LDA #$00              ;Left Side (Rev A of Board)
.390f86	8f 02 e4 af	sta $afe402	                STA SID0_V1_PW_LO
.390f8a	a9 08 00	lda #$0008	                LDA #$08
.390f8d	8f 03 e4 af	sta $afe403	                STA SID0_V1_PW_HI   ;G1
.390f91	a9 08 00	lda #$0008	                LDA #$08
.390f94	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL    ; Reset
.390f98	a9 0c 00	lda #$000c	                LDA #$0C
.390f9b	8f 07 e4 af	sta $afe407	                STA SID0_V2_FREQ_LO
.390f9f	a9 04 00	lda #$0004	                LDA #$04
.390fa2	8f 08 e4 af	sta $afe408	                STA SID0_V2_FREQ_HI   ;B1
.390fa6	a9 00 00	lda #$0000	                LDA #$00              ;Left Side (Rev A of Board)
.390fa9	8f 09 e4 af	sta $afe409	                STA SID0_V2_PW_LO
.390fad	a9 08 00	lda #$0008	                LDA #$08
.390fb0	8f 0a e4 af	sta $afe40a	                STA SID0_V2_PW_HI   ;G1
.390fb4	a9 08 00	lda #$0008	                LDA #$08
.390fb7	8f 0b e4 af	sta $afe40b	                STA SID0_V2_CTRL    ; Reset
.390fbb	a9 00 00	lda #$0000	                LDA #$00
.390fbe	8f 0e e4 af	sta $afe40e	                STA SID0_V3_FREQ_LO
.390fc2	a9 08 00	lda #$0008	                LDA #$08
.390fc5	8f 0f e4 af	sta $afe40f	                STA SID0_V3_FREQ_HI   ;D
.390fc9	a9 00 00	lda #$0000	                LDA #$00              ;Left Side (Rev A of Board)
.390fcc	8f 10 e4 af	sta $afe410	                STA SID0_V3_PW_LO
.390fd0	a9 08 00	lda #$0008	                LDA #$08
.390fd3	8f 11 e4 af	sta $afe411	                STA SID0_V3_PW_HI   ;G1
.390fd7	a9 08 00	lda #$0008	                LDA #$08
.390fda	8f 12 e4 af	sta $afe412	                STA SID0_V3_CTRL    ; Reset
.390fde	a9 10 00	lda #$0010	                LDA #$10
.390fe1	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL    ; Triangle
.390fe5	8f 0b e4 af	sta $afe40b	                STA SID0_V2_CTRL    ; Triangle
.390fe9	8f 12 e4 af	sta $afe412	                STA SID0_V3_CTRL    ; Triangle
.390fed	6b		rtl		                RTL
.390fee	48		pha		IINITCODEC      PHA
.390fef	c2 20		rep #$20	                REP #$20        ; set A long
.390ff1	a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R13 - Turn On Headphones
.390ff4	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390ff8	a9 01 00	lda #$0001	                LDA #$0001
.390ffb	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390fff	20 7e 10	jsr $39107e	                JSR CODEC_TRF_FINISHED
.391002	a9 0f 2a	lda #$2a0f	                LDA #%0010101000001111       ;R21 - Enable All the Analog In
.391005	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391009	a9 01 00	lda #$0001	                LDA #$0001
.39100c	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391010	20 7e 10	jsr $39107e	                JSR CODEC_TRF_FINISHED
.391013	a9 01 23	lda #$2301	                LDA #%0010001100000001      ;R17 - Enable All the Analog In
.391016	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39101a	a9 01 00	lda #$0001	                LDA #$0001
.39101d	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391021	20 7e 10	jsr $39107e	                JSR CODEC_TRF_FINISHED
.391024	a9 07 2c	lda #$2c07	                LDA #%0010110000000111      ;R22 - Enable all Analog Out
.391027	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39102b	a9 01 00	lda #$0001	                LDA #$0001
.39102e	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391032	20 7e 10	jsr $39107e	                JSR CODEC_TRF_FINISHED
.391035	a9 02 14	lda #$1402	                LDA #%0001010000000010      ;R10 - DAC Interface Control
.391038	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39103c	a9 01 00	lda #$0001	                LDA #$0001
.39103f	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391043	20 7e 10	jsr $39107e	                JSR CODEC_TRF_FINISHED
.391046	a9 02 16	lda #$1602	                LDA #%0001011000000010      ;R11 - ADC Interface Control
.391049	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39104d	a9 01 00	lda #$0001	                LDA #$0001
.391050	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391054	20 7e 10	jsr $39107e	                JSR CODEC_TRF_FINISHED
.391057	a9 d5 19	lda #$19d5	                LDA #%0001100111010101      ;R12 - Master Mode Control
.39105a	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39105e	a9 01 00	lda #$0001	                LDA #$0001
.391061	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391065	20 7e 10	jsr $39107e	                JSR CODEC_TRF_FINISHED
.391068	68		pla		                PLA
.391069	6b		rtl		                RTL
.39106a					IRESETCODEC
.39106a	c2 20		rep #$20	                REP #$20        ; set A long
.39106c	a9 00 2e	lda #$2e00	                LDA #$2E00      ;R22 - Enable all Analog Out
.39106f	8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391073	a9 01 00	lda #$0001	                LDA #$0001
.391076	8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.39107a	20 7e 10	jsr $39107e	                JSR CODEC_TRF_FINISHED
.39107d	6b		rtl		                RTL
.39107e					CODEC_TRF_FINISHED
.39107e	e2 20		sep #$20	                SEP #$20        ; set A short
.391080	af 02 e9 af	lda $afe902	CODEC_LOOP      LDA CODEC_WR_CTRL
.391084	29 01		and #$01	                AND #$01
.391086	c9 01		cmp #$01	                CMP #$01
.391088	f0 f6		beq $391080	                BEQ CODEC_LOOP
.39108a	c2 20		rep #$20	                REP #$20        ; set A long
.39108c	60		rts		                RTS
.39108d					IBM_FILL_SCREEN
.39108d	c2 30		rep #$30	                REP #$30        ; set A&X long
.39108f	a9 00 00	lda #$0000	                LDA #$0000
.391092	a2 00 00	ldx #$0000	                LDX #$0000
.391095					BM_FILL_SCREEN_LOOPY
.391095	a0 00 00	ldy #$0000	                LDY #$0000
.391098	e2 20		sep #$20	                SEP #$20        ; set A short
.39109a					BM_FILL_SCREEN_LOOPX
.39109a	97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.39109c	c8		iny		                INY
.39109d	c4 40		cpy $40		                CPY BM_CLEAR_SCRN_X              ; Transfer the First line
.39109f	d0 f9		bne $39109a	                BNE BM_FILL_SCREEN_LOOPX
.3910a1	20 ac 10	jsr $3910ac	                JSR BM_FILL_COMPUTE_Y_DST
.3910a4	e8		inx		                INX
.3910a5	e4 42		cpx $42		                CPX BM_CLEAR_SCRN_Y
.3910a7	d0 ec		bne $391095	                BNE BM_FILL_SCREEN_LOOPY
.3910a9	c2 30		rep #$30	                REP #$30        ; set A&X long
.3910ab	6b		rtl		                RTL
.3910ac					BM_FILL_COMPUTE_Y_DST
.3910ac	c2 20		rep #$20	                REP #$20        ; set A long
.3910ae	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR        ; Right now it is set @ $020000 (128K) + File Size
.3910b0	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3910b4	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2      ; Right now it is set @ $020000 (128K)
.3910b6	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.3910ba	a9 80 02	lda #$0280	                LDA #$280        ; Right now it is set @ $020000 (128K) + File Size
.3910bd	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.3910c1	a9 00 00	lda #$0000	                LDA #$0000
.3910c4	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.3910c8	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.3910cc	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.3910ce	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.3910d2	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.3910d4	a9 00 00	lda #$0000	                LDA #$0000
.3910d7	60		rts		                RTS
.3910d8					IBMP_PARSER
.3910d8	c2 30		rep #$30	                REP #$30        ; set A&X long
.3910da	a0 00 00	ldy #$0000	                LDY #$0000
.3910dd	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y
.3910df	c9 42 4d	cmp #$4d42	                CMP #$4D42
.3910e2	f0 03		beq $3910e7	                BEQ IBMP_PARSER_CONT
.3910e4	82 04 01	brl $3911eb	                BRL BMP_PARSER_END_WITH_ERROR
.3910e7					IBMP_PARSER_CONT
.3910e7	a0 02 00	ldy #$0002	                LDY #$0002
.3910ea	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size Low Short
.3910ec	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.3910f0	a0 04 00	ldy #$0004	                LDY #$0004
.3910f3	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size High Short
.3910f5	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.3910f9	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Store -1 in Adder (B)
.3910fc	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.391100	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.391104	18		clc		                CLC
.391105	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.391109	85 50		sta $50		                STA BMP_FILE_SIZE
.39110b	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.39110f	85 52		sta $52		                STA BMP_FILE_SIZE+2
.391111	a0 12 00	ldy #$0012	                LDY #$0012
.391114	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.391116	85 40		sta $40		                STA BMP_X_SIZE
.391118	a0 16 00	ldy #$0016	                LDY #$0016
.39111b	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.39111d	85 42		sta $42		                STA BMP_Y_SIZE
.39111f	a0 2e 00	ldy #$002e	                LDY #$002E
.391122	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.391124	0a		asl a		                ASL A; Multiply by 2
.391125	0a		asl a		                ASL A; Multiply by 2
.391126	85 4c		sta $4c		                STA BMP_COLOR_PALET         ;
.391128	e0 00 00	cpx #$0000	                CPX #$0000
.39112b	d0 05		bne $391132	                BNE BMP_LUT1_PICK
.39112d	20 f3 11	jsr $3911f3	                JSR BMP_PARSER_UPDATE_LUT0   ; Go Upload the LUT0
.391130	80 08		bra $39113a	                BRA DONE_TRANSFER_LUT;
.391132					  BMP_LUT1_PICK
.391132	e0 01 00	cpx #$0001	                CPX #$0001
.391135	d0 03		bne $39113a	                BNE BMP_LUT2_PICK
.391137	20 23 12	jsr $391223	                JSR BMP_PARSER_UPDATE_LUT1   ; Go Upload the LUT1
.39113a					  BMP_LUT2_PICK
.39113a					  DONE_TRANSFER_LUT
.39113a	a5 56		lda $56		                LDA BMP_POSITION_Y
.39113c	8f 00 01 00	sta $000100	                STA @lM0_OPERAND_A
.391140	a5 4e		lda $4e		                LDA SCRN_X_STRIDE
.391142	8f 02 01 00	sta $000102	                STA @lM0_OPERAND_B
.391146	af 04 01 00	lda $000104	                LDA @lM0_RESULT
.39114a	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.39114e	af 06 01 00	lda $000106	                LDA @lM0_RESULT+2
.391152	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.391156	a5 54		lda $54		                LDA BMP_POSITION_X
.391158	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Put the X Position Adder (B)
.39115c	a9 00 00	lda #$0000	                LDA #$0000
.39115f	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.391163	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in TEMP
.391167	85 f0		sta $f0		                STA USER_TEMP
.391169	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in TEMP
.39116d	85 f2		sta $f2		                STA USER_TEMP+2
.39116f	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.391171	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.391175	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.391177	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.39117b	a5 f0		lda $f0		                LDA USER_TEMP
.39117d	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store in 32Bit Adder (B)
.391181	a5 f2		lda $f2		                LDA USER_TEMP+2
.391183	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in 32Bit Adder (B)
.391187	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in BMP_PRSE_DST_PTR
.39118b	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.39118d	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in BMP_PRSE_DST_PTR
.391191	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.391193	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K)
.391195	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.391199	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2        ; Right now it is set @ $020000 (128K)
.39119b	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.39119f	a5 50		lda $50		                LDA BMP_FILE_SIZE
.3911a1	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.3911a5	a5 52		lda $52		                LDA BMP_FILE_SIZE+2
.3911a7	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.3911ab	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.3911af	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.3911b1	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.3911b5	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.3911b7	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.3911b9	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3911bd	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.3911bf	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.3911c3	18		clc		                CLC
.3911c4	a5 40		lda $40		                LDA BMP_X_SIZE              ; Load The Size in X of the image and Make it negative
.3911c6	49 ff ff	eor #$ffff	                EOR #$FFFF                  ; Inverse all bit
.3911c9	69 01 00	adc #$0001	                ADC #$0001                  ; Add 0 ()
.3911cc	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store the Results in reg B of ADDER32
.3911d0	a9 ff ff	lda #$ffff	                LDA #$FFFF
.3911d3	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in the Reminder of the 32Bits B Register
.3911d7	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.3911db	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.3911dd	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.3911e1	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.3911e3	20 53 12	jsr $391253	                JSR BMP_PARSER_DMA_SHIT_OUT  ; We are going to start with the slow method
.3911e6	a2 4b 16	ldx #$164b	                LDX #<>bmp_parser_msg0
.3911e9	80 03		bra $3911ee	                BRA BMP_PARSER_END_NO_ERROR
.3911eb					BMP_PARSER_END_WITH_ERROR
.3911eb	a2 37 16	ldx #$1637	                LDX #<>bmp_parser_err0
.3911ee					BMP_PARSER_END_NO_ERROR
.3911ee	22 5e 06 39	jsl $39065e	                JSL IPRINT       ; print the first line
.3911f2	6b		rtl		                RTL
.3911f3					BMP_PARSER_UPDATE_LUT0
.3911f3	38		sec		                SEC
.3911f4	a0 7a 00	ldy #$007a	                LDY #$007A
.3911f7	a2 00 00	ldx #$0000	                LDX #$0000
.3911fa	e2 20		sep #$20	                SEP #$20        ; set A short
.3911fc					BMP_PARSER_UPDATE_LOOP
.3911fc	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.3911fe	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR+0, X      ; The look-up Table point to a pixel Blue
.391202	c8		iny		                INY
.391203	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.391205	9f 01 20 af	sta $af2001,x	                STA @lGRPH_LUT0_PTR+1, X      ; The look-up Table point to a pixel Blue
.391209	c8		iny		                INY
.39120a	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.39120c	9f 02 20 af	sta $af2002,x	                STA @lGRPH_LUT0_PTR+2, X      ; The look-up Table point to a pixel Blue
.391210	c8		iny		                INY
.391211	a9 80		lda #$80	                LDA #$80
.391213	9f 03 20 af	sta $af2003,x	                STA @lGRPH_LUT0_PTR+3, X      ; The look-up Table point to a pixel Blue
.391217	c8		iny		                INY ; For the Alpha Value, nobody cares
.391218	e8		inx		                INX
.391219	e8		inx		                INX
.39121a	e8		inx		                INX
.39121b	e8		inx		                INX
.39121c	e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.39121e	d0 dc		bne $3911fc	                BNE BMP_PARSER_UPDATE_LOOP
.391220	c2 20		rep #$20	                REP #$20        ; set A long
.391222	60		rts		                RTS
.391223					BMP_PARSER_UPDATE_LUT1
.391223	38		sec		                SEC
.391224	a0 36 00	ldy #$0036	                LDY #$0036
.391227	a2 00 00	ldx #$0000	                LDX #$0000
.39122a	e2 20		sep #$20	                SEP #$20        ; set A short
.39122c					PALETTE_LUT1_LOOP
.39122c	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.39122e	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR+0, X      ; The look-up Table point to a pixel Blue
.391232	c8		iny		                INY
.391233	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.391235	9f 01 24 af	sta $af2401,x	                STA @lGRPH_LUT1_PTR+1, X      ; The look-up Table point to a pixel Blue
.391239	c8		iny		                INY
.39123a	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.39123c	9f 02 24 af	sta $af2402,x	                STA @lGRPH_LUT1_PTR+2, X      ; The look-up Table point to a pixel Blue
.391240	c8		iny		                INY
.391241	a9 80		lda #$80	                LDA #$80
.391243	9f 03 24 af	sta $af2403,x	                STA @lGRPH_LUT1_PTR+3, X      ; The look-up Table point to a pixel Blue
.391247	c8		iny		                INY ; For the Alpha Value, nobody cares
.391248	e8		inx		                INX
.391249	e8		inx		                INX
.39124a	e8		inx		                INX
.39124b	e8		inx		                INX
.39124c	e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.39124e	d0 dc		bne $39122c	                BNE PALETTE_LUT1_LOOP
.391250	c2 20		rep #$20	                REP #$20        ; set A long
.391252	60		rts		                RTS
.391253					BMP_PARSER_DMA_SHIT_OUT
.391253	a2 00 00	ldx #$0000	                LDX #$0000
.391256					BMP_PARSER_LOOPY
.391256	a0 00 00	ldy #$0000	                LDY #$0000
.391259	e2 20		sep #$20	                SEP #$20        ; set A short
.39125b					BMP_PARSER_LOOPX
.39125b	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Load First Pixel Y (will be linear)
.39125d	97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.39125f	c8		iny		                INY
.391260	c4 40		cpy $40		                CPY BMP_X_SIZE              ; Transfer the First line
.391262	d0 f7		bne $39125b	                BNE BMP_PARSER_LOOPX
.391264	20 70 12	jsr $391270	                JSR BMP_PARSER_COMPUTE_Y_SRC
.391267	20 8b 12	jsr $39128b	                JSR BMP_PARSER_COMPUTE_Y_DST
.39126a	e8		inx		                INX
.39126b	e4 42		cpx $42		                CPX BMP_Y_SIZE
.39126d	d0 e7		bne $391256	                BNE BMP_PARSER_LOOPY
.39126f	60		rts		                RTS
.391270					BMP_PARSER_COMPUTE_Y_SRC
.391270	c2 20		rep #$20	                REP #$20        ; set A long
.391272	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.391274	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.391278	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.39127a	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.39127e	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.391282	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.391284	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.391288	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.39128a	60		rts		                RTS
.39128b					BMP_PARSER_COMPUTE_Y_DST
.39128b	c2 20		rep #$20	                REP #$20        ; set A long
.39128d	18		clc		                CLC
.39128e	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.391290	65 4e		adc $4e		                ADC SCRN_X_STRIDE        ; In Normal Circumstances, it is 640
.391292	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.391294	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.391296	69 00 00	adc #$0000	                ADC #$0000
.391299	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.39129b	60		rts		                RTS
.39129c	ea		nop		ILOOP           NOP
.39129d	ea		nop		                NOP
.39129e	ea		nop		                NOP
.39129f	ea		nop		                NOP
.3912a0	ea		nop		                NOP
.3912a1	ea		nop		                NOP
.3912a2	ea		nop		                NOP
.3912a3	ea		nop		                NOP
.3912a4	ea		nop		                NOP
.3912a5	ea		nop		                NOP
.3912a6	6b		rtl		                RTL
.3912a7	22 9c 12 39	jsl $39129c	ILOOP_1         JSL ILOOP
.3912ab	22 9c 12 39	jsl $39129c	                JSL ILOOP
.3912af	22 9c 12 39	jsl $39129c	                JSL ILOOP
.3912b3	22 9c 12 39	jsl $39129c	                JSL ILOOP
.3912b7	22 9c 12 39	jsl $39129c	                JSL ILOOP
.3912bb	22 9c 12 39	jsl $39129c	                JSL ILOOP
.3912bf	22 9c 12 39	jsl $39129c	                JSL ILOOP
.3912c3	22 9c 12 39	jsl $39129c	                JSL ILOOP
.3912c7	22 9c 12 39	jsl $39129c	                JSL ILOOP
.3912cb	22 9c 12 39	jsl $39129c	                JSL ILOOP
.3912cf	6b		rtl		                RTL
.3912d0	22 a7 12 39	jsl $3912a7	ILOOP_1MS       JSL ILOOP_1
.3912d4	6b		rtl		                RTL
.3912d5	e0 00 00	cpx #$0000	ILOOP_MS        CPX #0
.3912d8	f0 07		beq $3912e1	                BEQ LOOP_MS_END
.3912da	22 d0 12 39	jsl $3912d0	                JSL ILOOP_1MS
.3912de	ca		dex		                DEX
.3912df	80 f4		bra $3912d5	                BRA ILOOP_MS
.3912e1	6b		rtl		LOOP_MS_END     RTL
.3912e2	00		brk #		IRESTORE        BRK ; Warm boot routine
.3912e3	00		brk #		ISCINIT         BRK ;
.3912e4	00		brk #		IIOINIT         BRK ;
.3912e5	00		brk #		IPUTBLOCK       BRK ; Ouput a binary block to the currently selected channel
.3912e6	00		brk #		ISETLFS         BRK ; Obsolete (done in OPEN)
.3912e7	00		brk #		ISETNAM         BRK ; Obsolete (done in OPEN)
.3912e8	00		brk #		IOPEN           BRK ; Open a channel for reading and/or writing. Use SETLFS and SETNAM to set the channels and filename first.
.3912e9	00		brk #		ICLOSE          BRK ; Close a channel
.3912ea	00		brk #		IGETB           BRK ; Get a byte from input channel. Return 0 if no input. Carry is set if no input.
.3912eb	00		brk #		IGETBLOCK       BRK ; Get a X byes from input channel. If Carry is set, wait. If Carry is clear, do not wait.
.3912ec	00		brk #		IGETCH          BRK ; Get a character from the input channel. A=0 and Carry=1 if no data is wating
.3912ed	00		brk #		IGETS           BRK ; Get a string from the input channel. NULL terminates
.3912ee	00		brk #		IGETLINE        BRK ; Get a line of text from input channel. CR or NULL terminates.
.3912ef	00		brk #		IGETFIELD       BRK ; Get a field from the input channel. Value in A, CR, or NULL terminates
.3912f0	00		brk #		ITRIM           BRK ; Removes spaces at beginning and end of string.
.3912f1	00		brk #		IPRINTC         BRK ; Print character to screen. Handles terminal commands
.3912f2	00		brk #		IPRINTS         BRK ; Print string to screen. Handles terminal commands
.3912f3	00		brk #		IPRINTF         BRK ; Print a float value
.3912f4	00		brk #		IPRINTI         BRK ; Prints integer value in TEMP
.3912f5	00		brk #		IPRINTAI        BRK ; Prints integer value in A
.3912f6	00		brk #		IPRINTAH        BRK ; Prints hex value in A. Printed value is 2 wide if M flag is 1, 4 wide if M=0
.3912f7	00		brk #		IPUSHKEY        BRK ;
.3912f8	00		brk #		IPUSHKEYS       BRK ;
.3912f9	00		brk #		ISCRREADLINE    BRK ; Loads the MCMDADDR/BCMDADDR variable with the address of the current line on the screen. This is called when the RETURN key is pressed and is the first step in processing an immediate mode command.
.3912fa	00		brk #		ISCRGETWORD     BRK ; Read a current word on the screen. A word ends with a space, punctuation (except _), or any control character (value < 32). Loads the address into CMPTEXT_VAL and length into CMPTEXT_LEN variables.
.3912fb					KERNEL_DATA
>3912fb	20 20 20 20 0b 0c 0b 0c		greet_msg       .text $20, $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, " FFFFFFF MMMMMMMM XX    XXX " ,$0D
>391303	0b 0c 0b 0c 0b 0c 20 46 46 46 46 46 46 46 20 4d
>391313	4d 4d 4d 4d 4d 4d 4d 20 58 58 20 20 20 20 58 58
>391323	58 20 0d
>391326	20 20 20 0b 0c 0b 0c 0b		                .text $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM   XX XXX   ",$0D
>39132e	0c 0b 0c 0b 0c 20 46 46 20 20 20 20 20 20 4d 4d
>39133e	20 4d 4d 20 4d 4d 20 20 20 58 58 20 58 58 58 20
>39134e	20 20 0d
>391351	20 20 0b 0c 0b 0c 0b 0c		                .text $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FFFFF   MM MM MM    XXX      ",$0D
>391359	0b 0c 0b 0c 20 46 46 46 46 46 20 20 20 4d 4d 20
>391369	4d 4d 20 4d 4d 20 20 20 20 58 58 58 20 20 20 20
>391379	20 20 0d
>39137c	20 0b 0c 0b 0c 0b 0c 0b		                .text $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM  XXX  XX     ",$0D
>391384	0c 0b 0c 20 46 46 20 20 20 20 20 20 4d 4d 20 4d
>391394	4d 20 4d 4d 20 20 58 58 58 20 20 58 58 20 20 20
>3913a4	20 20 0d
>3913a7	0b 0c 0b 0c 0b 0c 0b 0c		                .text $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM XXX     XX    ",$0D
>3913af	0b 0c 20 46 46 20 20 20 20 20 20 4d 4d 20 4d 4d
>3913bf	20 4d 4d 20 58 58 58 20 20 20 20 20 58 58 20 20
>3913cf	20 20 0d
>3913d2	0d 43 32 35 36 20 46 4f		                .text $0D, "C256 FOENIX FMX -- 3,670,016 Bytes Free", $0D
>3913da	45 4e 49 58 20 46 4d 58 20 2d 2d 20 33 2c 36 37
>3913ea	30 2c 30 31 36 20 42 79 74 65 73 20 46 72 65 65
>3913fa	0d
>3913fb	77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com - Kernel Date: "
>391403	66 6f 65 6e 69 78 2e 63 6f 6d 20 2d 20 4b 65 72
>391413	6e 65 6c 20 44 61 74 65 3a 20

;******  Processing file: src\version.asm

>39141d	4a 61 6e 75 61 72 79 20		.text "January 03, 2020"
>391425	30 33 2c 20 32 30 32 30

;******  Return to file: src\kernel.asm

>39142d	0d 00				                .text $0D,$00
.39142f					old_pc_style_stat
>39142f	1d 1d 1d 1d 1d 1d 8d 8d		greet_clr_line1 .text $1D, $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>391437	4d 4d 2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd
>391447	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>391457	fd fd
>391459	1d 1d 1d 1d 1d 8d 8d 4d		greet_clr_line2 .text $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>391461	4d 2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd
>391471	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>391481	fd fd
>391483	1d 1d 1d 1d 8d 8d 4d 4d		greet_clr_line3 .text $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>39148b	2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd fd
>39149b	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3914ab	fd fd
>3914ad	1d 1d 1d 8d 8d 4d 4d 2d		greet_clr_line4 .text $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>3914b5	2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd fd fd
>3914c5	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3914d5	fd fd
>3914d7	1d 1d 8d 8d 4d 4d 2d 2d		greet_clr_line5 .text $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>3914df	5d 5d fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3914ef	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3914ff	fd fd
>391501	00 00 00 ff			fg_color_lut	  .text $00, $00, $00, $FF
>391505	00 00 80 ff			                .text $00, $00, $80, $FF
>391509	00 80 00 ff			                .text $00, $80, $00, $FF
>39150d	80 00 00 ff			                .text $80, $00, $00, $FF
>391511	00 80 80 ff			                .text $00, $80, $80, $FF
>391515	80 80 00 ff			                .text $80, $80, $00, $FF
>391519	80 00 80 ff			                .text $80, $00, $80, $FF
>39151d	80 80 80 ff			                .text $80, $80, $80, $FF
>391521	00 45 ff ff			                .text $00, $45, $FF, $FF
>391525	13 45 8b ff			                .text $13, $45, $8B, $FF
>391529	00 00 20 ff			                .text $00, $00, $20, $FF
>39152d	00 20 00 ff			                .text $00, $20, $00, $FF
>391531	20 00 00 ff			                .text $20, $00, $00, $FF
>391535	20 20 20 ff			                .text $20, $20, $20, $FF
>391539	40 40 40 ff			                .text $40, $40, $40, $FF
>39153d	ff ff ff ff			                .text $FF, $FF, $FF, $FF
>391541	00 00 00 ff			bg_color_lut	  .text $00, $00, $00, $FF
>391545	00 00 80 ff			                .text $00, $00, $80, $FF
>391549	00 80 00 ff			                .text $00, $80, $00, $FF
>39154d	80 00 00 ff			                .text $80, $00, $00, $FF
>391551	00 20 20 ff			                .text $00, $20, $20, $FF
>391555	20 20 00 ff			                .text $20, $20, $00, $FF
>391559	20 00 20 ff			                .text $20, $00, $20, $FF
>39155d	20 20 20 ff			                .text $20, $20, $20, $FF
>391561	1e 69 d2 ff			                .text $1E, $69, $D2, $FF
>391565	13 45 8b ff			                .text $13, $45, $8B, $FF
>391569	00 00 20 ff			                .text $00, $00, $20, $FF
>39156d	00 20 00 ff			                .text $00, $20, $00, $FF
>391571	40 00 00 ff			                .text $40, $00, $00, $FF
>391575	10 10 10 ff			                .text $10, $10, $10, $FF
>391579	40 40 40 ff			                .text $40, $40, $40, $FF
>39157d	ff ff ff ff			                .text $FF, $FF, $FF, $FF
>391581	43 6d 64 20 30 78 41 41		pass_tst0xAAmsg .text "Cmd 0xAA Test passed...", $0D, $00
>391589	20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>391599	00
>39159a	43 6d 64 20 30 78 41 42		pass_tst0xABmsg .text "Cmd 0xAB Test passed...", $0D, $00
>3915a2	20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>3915b2	00
>3915b3	43 6d 64 20 30 78 36 30		pass_cmd0x60msg .text "Cmd 0x60 Executed.", $0D, $00
>3915bb	20 45 78 65 63 75 74 65 64 2e 0d 00
>3915c7	43 6d 64 20 30 78 46 46		pass_cmd0xFFmsg .text "Cmd 0xFF (Reset) Done.", $0D, $00
>3915cf	20 28 52 65 73 65 74 29 20 44 6f 6e 65 2e 0d 00
>3915df	43 6d 64 20 30 78 45 45		pass_cmd0xEEmsg .text "Cmd 0xEE Echo Test passed...", $0D, $00
>3915e7	20 45 63 68 6f 20 54 65 73 74 20 70 61 73 73 65
>3915f7	64 2e 2e 2e 0d 00
>3915fd	4b 65 79 62 6f 61 72 64		Success_kb_init .text "Keyboard Present", $0D, $00
>391605	20 50 72 65 73 65 6e 74 0d 00
>39160f	4e 6f 20 4b 65 79 62 6f		Failed_kb_init  .text "No Keyboard Attached or Failed Init...", $0D, $00
>391617	61 72 64 20 41 74 74 61 63 68 65 64 20 6f 72 20
>391627	46 61 69 6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>391637	4e 4f 20 53 49 47 4e 41		bmp_parser_err0 .text "NO SIGNATURE FOUND.", $00
>39163f	54 55 52 45 20 46 4f 55 4e 44 2e 00
>39164b	42 4d 50 20 4c 4f 41 44		bmp_parser_msg0 .text "BMP LOADED.", $00
>391653	45 44 2e 00
>391657	45 58 45 43 55 54 49 4e		bmp_parser_msg1 .text "EXECUTING BMP PARSER", $00
>39165f	47 20 42 4d 50 20 50 41 52 53 45 52 00
>39166c	49 44 45 20 48 44 44 20		IDE_HDD_Present_msg0 .text "IDE HDD Present:", $00
>391674	50 72 65 73 65 6e 74 3a 00
>39167d	42 6f 6f 74 20 44 49 50		boot_invalid    .text "Boot DIP switch settings are invalid", $00
>391685	20 73 77 69 74 63 68 20 73 65 74 74 69 6e 67 73
>391695	20 61 72 65 20 69 6e 76 61 6c 69 64 00
>3916a2	42 6f 6f 74 69 6e 67 20		sdcard_notimpl  .text "Booting from SD card is not yet implemented.", $00
>3916aa	66 72 6f 6d 20 53 44 20 63 61 72 64 20 69 73 20
>3916ba	6e 6f 74 20 79 65 74 20 69 6d 70 6c 65 6d 65 6e
>3916ca	74 65 64 2e 00
>3916cf	42 6f 6f 74 69 6e 67 20		ide_notimpl     .text "Booting from IDE drive is not yet implemented.", $00
>3916d7	66 72 6f 6d 20 49 44 45 20 64 72 69 76 65 20 69
>3916e7	73 20 6e 6f 74 20 79 65 74 20 69 6d 70 6c 65 6d
>3916f7	65 6e 74 65 64 2e 00
>3916fe	42 6f 6f 74 69 6e 67 20		floppy_notimpl  .text "Booting from floppy drive is not yet implemented.", $00
>391706	66 72 6f 6d 20 66 6c 6f 70 70 79 20 64 72 69 76
>391716	65 20 69 73 20 6e 6f 74 20 79 65 74 20 69 6d 70
>391726	6c 65 6d 65 6e 74 65 64 2e 00
>391730	0d 52 45 41 44 59 2e 00		ready_msg       .null $0D,"READY."
>391738	41 42 4f 52 54 20 45 52		error_01        .null "ABORT ERROR"
>391740	52 4f 52 00
>391744	30 31 32 33 34 35 36 37		hex_digits      .text "0123456789ABCDEF",0
>39174c	38 39 41 42 43 44 45 46 00
>391755					.align 256
>391800	00 1b 31 32 33 34 35 36		ScanCode_Press_Set1   .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>391808	37 38 39 30 2d 3d 08 09
>391810	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>391818	6f 70 5b 5d 0d 00 61 73
>391820	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>391828	27 60 00 5c 7a 78 63 76
>391830	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>391838	00 20 00 00 00 00 00 00
>391840	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $11, $00, $00, $9D, $00, $1D, $00, $00    ; $40
>391848	11 00 00 9d 00 1d 00 00
>391850	91 00 00 00 00 00 00 00		                      .text $91, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>391858	00 00 00 00 00 00 00 00
>391860	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>391868	00 00 00 00 00 00 00 00
>391870	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>391878	00 00 00 00 00 00 00 00
>391880	00 00 21 40 23 24 25 5e		ScanCode_Shift_Set1   .text $00, $00, $21, $40, $23, $24, $25, $5E, $26, $2A, $28, $29, $5F, $2B, $08, $09    ; $00
>391888	26 2a 28 29 5f 2b 08 09
>391890	51 57 45 52 54 59 55 49		                      .text $51, $57, $45, $52, $54, $59, $55, $49, $4F, $50, $7B, $7D, $0D, $00, $41, $53    ; $10
>391898	4f 50 7b 7d 0d 00 41 53
>3918a0	44 46 47 48 4a 4b 4c 3a		                      .text $44, $46, $47, $48, $4A, $4B, $4C, $3A, $22, $7E, $00, $5C, $5A, $58, $43, $56    ; $20
>3918a8	22 7e 00 5c 5a 58 43 56
>3918b0	42 4e 4d 3c 3e 3f 00 18		                      .text $42, $4E, $4D, $3C, $3E, $3F, $00, $18, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>3918b8	00 20 00 00 00 00 00 00
>3918c0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>3918c8	00 00 00 00 00 00 00 00
>3918d0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3918d8	00 00 00 00 00 00 00 00
>3918e0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3918e8	00 00 00 00 00 00 00 00
>3918f0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3918f8	00 00 00 00 00 00 00 00
>391900	00 1b 31 32 33 34 35 36		ScanCode_Ctrl_Set1    .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>391908	37 38 39 30 2d 3d 08 09
>391910	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>391918	6f 70 5b 5d 0d 00 61 73
>391920	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $03, $76    ; $20
>391928	27 60 00 5c 7a 78 03 76
>391930	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>391938	00 20 00 00 00 00 00 00
>391940	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>391948	00 00 00 00 00 00 00 00
>391950	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>391958	00 00 00 00 00 00 00 00
>391960	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>391968	00 00 00 00 00 00 00 00
>391970	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>391978	00 00 00 00 00 00 00 00
>391980	00 1b 31 32 33 34 35 36		ScanCode_Alt_Set1     .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>391988	37 38 39 30 2d 3d 08 09
>391990	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>391998	6f 70 5b 5d 0d 00 61 73
>3919a0	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>3919a8	27 60 00 5c 7a 78 63 76
>3919b0	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>3919b8	00 20 00 00 00 00 00 00
>3919c0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>3919c8	00 00 00 00 00 00 00 00
>3919d0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3919d8	00 00 00 00 00 00 00 00
>3919e0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3919e8	00 00 00 00 00 00 00 00
>3919f0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3919f8	00 00 00 00 00 00 00 00
>391a00	00 1b 31 32 33 34 35 36		ScanCode_NumLock_Set1 .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>391a08	37 38 39 30 2d 3d 08 09
>391a10	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>391a18	6f 70 5b 5d 0d 00 61 73
>391a20	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>391a28	27 60 00 5c 7a 78 63 76
>391a30	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>391a38	00 20 00 00 00 00 00 00
>391a40	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>391a48	00 00 00 00 00 00 00 00
>391a50	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>391a58	00 00 00 00 00 00 00 00
>391a60	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>391a68	00 00 00 00 00 00 00 00
>391a70	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>391a78	00 00 00 00 00 00 00 00
>391a80	00 00 00 00 00 00 00 00		ScanCode_Prefix_Set1  .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $00
>391a88	00 00 00 00 00 00 00 00
>391a90	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $10
>391a98	00 00 00 00 00 00 00 00
>391aa0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $20
>391aa8	00 00 00 00 00 00 00 00
>391ab0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $30
>391ab8	00 00 00 00 00 00 00 00
>391ac0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $11, $00, $00, $9D, $00, $1D, $00, $00    ; $40
>391ac8	11 00 00 9d 00 1d 00 00
>391ad0	91 00 0f 7f 00 00 00 00		                      .text $91, $00, $0F, $7F, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>391ad8	00 00 00 00 00 00 00 00
>391ae0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>391ae8	00 00 00 00 00 00 00 00
>391af0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>391af8	00 00 00 00 00 00 00 00
>391b00					.align 256
>391b00	00 14 1c 21 26 2a 2e 31		GAMMA_2_2_Tbl         .text  $00, $14, $1c, $21, $26, $2a, $2e, $31, $34, $37, $3a, $3d, $3f, $41, $44, $46
>391b08	34 37 3a 3d 3f 41 44 46
>391b10	48 4a 4c 4e 50 51 53 55		                      .text  $48, $4a, $4c, $4e, $50, $51, $53, $55, $57, $58, $5a, $5b, $5d, $5e, $60, $61
>391b18	57 58 5a 5b 5d 5e 60 61
>391b20	63 64 66 67 68 6a 6b 6c		                      .text  $63, $64, $66, $67, $68, $6a, $6b, $6c, $6d, $6f, $70, $71, $72, $73, $75, $76
>391b28	6d 6f 70 71 72 73 75 76
>391b30	77 78 79 7a 7b 7c 7d 7e		                      .text  $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $80, $81, $82, $83, $84, $85, $86, $87
>391b38	80 81 82 83 84 85 86 87
>391b40	88 88 89 8a 8b 8c 8d 8e		                      .text  $88, $88, $89, $8a, $8b, $8c, $8d, $8e, $8f, $90, $91, $92, $93, $93, $94, $95
>391b48	8f 90 91 92 93 93 94 95
>391b50	96 97 98 99 99 9a 9b 9c		                      .text  $96, $97, $98, $99, $99, $9a, $9b, $9c, $9d, $9e, $9e, $9f, $a0, $a1, $a2, $a2
>391b58	9d 9e 9e 9f a0 a1 a2 a2
>391b60	a3 a4 a5 a5 a6 a7 a8 a8		                      .text  $a3, $a4, $a5, $a5, $a6, $a7, $a8, $a8, $a9, $aa, $ab, $ab, $ac, $ad, $ae, $ae
>391b68	a9 aa ab ab ac ad ae ae
>391b70	af b0 b0 b1 b2 b2 b3 b4		                      .text  $AF, $b0, $b0, $b1, $b2, $b2, $b3, $b4, $b5, $b5, $b6, $b7, $b7, $b8, $b9, $b9
>391b78	b5 b5 b6 b7 b7 b8 b9 b9
>391b80	ba bb bb bc bd bd be be		                      .text  $ba, $bb, $bb, $bc, $bd, $bd, $be, $be, $bf, $c0, $c0, $c1, $c2, $c2, $c3, $c4
>391b88	bf c0 c0 c1 c2 c2 c3 c4
>391b90	c4 c5 c5 c6 c7 c7 c8 c8		                      .text  $c4, $c5, $c5, $c6, $c7, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cb, $cc, $cd, $cd
>391b98	c9 ca ca cb cb cc cd cd
>391ba0	ce ce cf d0 d0 d1 d1 d2		                      .text  $ce, $ce, $cf, $d0, $d0, $d1, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d5, $d6, $d6
>391ba8	d2 d3 d4 d4 d5 d5 d6 d6
>391bb0	d7 d8 d8 d9 d9 da da db		                      .text  $d7, $d8, $d8, $d9, $d9, $da, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $df
>391bb8	db dc dc dd de de df df
>391bc0	e0 e0 e1 e1 e2 e2 e3 e3		                      .text  $e0, $e0, $e1, $e1, $e2, $e2, $e3, $e3, $e4, $e4, $e5, $e5, $e6, $e6, $e7, $e7
>391bc8	e4 e4 e5 e5 e6 e6 e7 e7
>391bd0	e8 e8 e9 e9 ea ea eb eb		                      .text  $e8, $e8, $e9, $e9, $ea, $ea, $eb, $eb, $ec, $ec, $ed, $ed, $ee, $ee, $ef, $ef
>391bd8	ec ec ed ed ee ee ef ef
>391be0	f0 f0 f1 f1 f2 f2 f3 f3		                      .text  $f0, $f0, $f1, $f1, $f2, $f2, $f3, $f3, $f4, $f4, $f5, $f5, $f6, $f6, $f7, $f7
>391be8	f4 f4 f5 f5 f6 f6 f7 f7
>391bf0	f8 f8 f9 f9 f9 fa fa fb		                      .text  $f8, $f8, $f9, $f9, $f9, $fa, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $fe, $ff
>391bf8	fb fc fc fd fd fe fe ff
>391c00					.align 256
>391c00	00 0b 11 15 19 1c 1f 22		GAMMA_1_8_Tbl         .text  $00, $0b, $11, $15, $19, $1c, $1f, $22, $25, $27, $2a, $2c, $2e, $30, $32, $34
>391c08	25 27 2a 2c 2e 30 32 34
>391c10	36 38 3a 3c 3d 3f 41 43		                      .text  $36, $38, $3a, $3c, $3d, $3f, $41, $43, $44, $46, $47, $49, $4a, $4c, $4d, $4f
>391c18	44 46 47 49 4a 4c 4d 4f
>391c20	50 51 53 54 55 57 58 59		                      .text  $50, $51, $53, $54, $55, $57, $58, $59, $5b, $5c, $5d, $5e, $60, $61, $62, $63
>391c28	5b 5c 5d 5e 60 61 62 63
>391c30	64 65 67 68 69 6a 6b 6c		                      .text  $64, $65, $67, $68, $69, $6a, $6b, $6c, $6d, $6e, $70, $71, $72, $73, $74, $75
>391c38	6d 6e 70 71 72 73 74 75
>391c40	76 77 78 79 7a 7b 7c 7d		                      .text  $76, $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $7f, $80, $81, $82, $83, $84, $84
>391c48	7e 7f 80 81 82 83 84 84
>391c50	85 86 87 88 89 8a 8b 8c		                      .text  $85, $86, $87, $88, $89, $8a, $8b, $8c, $8d, $8e, $8e, $8f, $90, $91, $92, $93
>391c58	8d 8e 8e 8f 90 91 92 93
>391c60	94 95 95 96 97 98 99 9a		                      .text  $94, $95, $95, $96, $97, $98, $99, $9a, $9a, $9b, $9c, $9d, $9e, $9f, $9f, $a0
>391c68	9a 9b 9c 9d 9e 9f 9f a0
>391c70	a1 a2 a3 a3 a4 a5 a6 a6		                      .text  $a1, $a2, $a3, $a3, $a4, $a5, $a6, $a6, $a7, $a8, $a9, $aa, $aa, $ab, $ac, $ad
>391c78	a7 a8 a9 aa aa ab ac ad
>391c80	ad ae af b0 b0 b1 b2 b3		                      .text  $ad, $ae, $af, $b0, $b0, $b1, $b2, $b3, $b3, $b4, $b5, $b6, $b6, $b7, $b8, $b8
>391c88	b3 b4 b5 b6 b6 b7 b8 b8
>391c90	b9 ba bb bb bc bd bd be		                      .text  $b9, $ba, $bb, $bb, $bc, $bd, $bd, $be, $bf, $bf, $c0, $c1, $c2, $c2, $c3, $c4
>391c98	bf bf c0 c1 c2 c2 c3 c4
>391ca0	c4 c5 c6 c6 c7 c8 c8 c9		                      .text  $c4, $c5, $c6, $c6, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cc, $cc, $cd, $ce, $ce
>391ca8	ca ca cb cc cc cd ce ce
>391cb0	cf d0 d0 d1 d2 d2 d3 d4		                      .text  $cf, $d0, $d0, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d6, $d6, $d7, $d7, $d8, $d9
>391cb8	d4 d5 d6 d6 d7 d7 d8 d9
>391cc0	d9 da db db dc dc dd de		                      .text  $d9, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $e0, $e0, $e1, $e1, $e2, $e3
>391cc8	de df e0 e0 e1 e1 e2 e3
>391cd0	e3 e4 e4 e5 e6 e6 e7 e7		                      .text  $e3, $e4, $e4, $e5, $e6, $e6, $e7, $e7, $e8, $e9, $e9, $ea, $ea, $eb, $ec, $ec
>391cd8	e8 e9 e9 ea ea eb ec ec
>391ce0	ed ed ee ef ef f0 f0 f1		                      .text  $ed, $ed, $ee, $ef, $ef, $f0, $f0, $f1, $f1, $f2, $f3, $f3, $f4, $f4, $f5, $f5
>391ce8	f1 f2 f3 f3 f4 f4 f5 f5
>391cf0	f6 f7 f7 f8 f8 f9 f9 fa		                      .text  $f6, $f7, $f7, $f8, $f8, $f9, $f9, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $ff
>391cf8	fb fb fc fc fd fd fe ff
>391d00					.align 256
>391d00	1d c8 a7 ac 10 d6 52 7c		RANDOM_LUT_Tbl		    .text  $1d, $c8, $a7, $ac, $10, $d6, $52, $7c, $83, $dd, $ce, $39, $cd, $c5, $3b, $15
>391d08	83 dd ce 39 cd c5 3b 15
>391d10	22 55 3b 94 e0 33 1f 38						              .text  $22, $55, $3b, $94, $e0, $33, $1f, $38, $87, $12, $31, $65, $89, $27, $88, $42
>391d18	87 12 31 65 89 27 88 42
>391d20	b2 32 72 84 b2 b2 31 52						              .text  $b2, $32, $72, $84, $b2, $b2, $31, $52, $94, $ce, $56, $ec, $fe, $da, $58, $c9
>391d28	94 ce 56 ec fe da 58 c9
>391d30	c8 5b 53 2a 08 3b 19 c1						              .text  $c8, $5b, $53, $2a, $08, $3b, $19, $c1, $d0, $10, $2c, $b2, $4b, $ea, $32, $61
>391d38	d0 10 2c b2 4b ea 32 61
>391d40	da 34 33 8f 2b da 49 89						              .text  $da, $34, $33, $8f, $2b, $da, $49, $89, $a1, $e6, $ca, $2d, $b3, $ce, $b0, $79
>391d48	a1 e6 ca 2d b3 ce b0 79
>391d50	44 aa 32 82 91 e9 29 16						              .text  $44, $aa, $32, $82, $91, $e9, $29, $16, $5f, $e3, $fb, $bd, $15, $2e, $be, $f5
>391d58	5f e3 fb bd 15 2e be f5
>391d60	e9 4a e4 2e 60 24 94 35						              .text  $e9, $4a, $e4, $2e, $60, $24, $94, $35, $8d, $8f, $2c, $80, $0a, $5e, $99, $36
>391d68	8d 8f 2c 80 0a 5e 99 36
>391d70	ac ab 21 26 42 7c 5e bc						              .text  $ac, $ab, $21, $26, $42, $7c, $5e, $bc, $13, $52, $44, $2f, $e3, $ef, $44, $a2
>391d78	13 52 44 2f e3 ef 44 a2
>391d80	86 c1 9c 47 5f 36 6d 02						              .text  $86, $c1, $9c, $47, $5f, $36, $6d, $02, $be, $23, $02, $58, $0a, $52, $5e, $b4
>391d88	be 23 02 58 0a 52 5e b4
>391d90	9f 06 08 c9 97 cb 9e dd						              .text  $9f, $06, $08, $c9, $97, $cb, $9e, $dd, $d5, $cf, $3e, $df, $c4, $9e, $da, $bb
>391d98	d5 cf 3e df c4 9e da bb
>391da0	9b 5d c9 f5 d9 c3 7e 87						              .text  $9b, $5d, $c9, $f5, $d9, $c3, $7e, $87, $77, $7d, $b1, $3b, $4a, $68, $35, $6e
>391da8	77 7d b1 3b 4a 68 35 6e
>391db0	ee 47 ad 8f fd 73 2e 46						              .text  $ee, $47, $ad, $8f, $fd, $73, $2e, $46, $b5, $8f, $44, $63, $55, $6f, $e1, $50
>391db8	b5 8f 44 63 55 6f e1 50
>391dc0	f4 b6 a3 4f 68 c4 a5 a4						              .text  $f4, $b6, $a3, $4f, $68, $c4, $a5, $a4, $57, $74, $b9, $bd, $05, $14, $50, $eb
>391dc8	57 74 b9 bd 05 14 50 eb
>391dd0	a5 5c 57 2f 99 dc 2e 8a						              .text  $a5, $5c, $57, $2f, $99, $dc, $2e, $8a, $44, $bc, $ec, $db, $22, $58, $fc, $be
>391dd8	44 bc ec db 22 58 fc be
>391de0	5f 3f 50 bd 2a 36 ab ae						              .text  $5f, $3f, $50, $bd, $2a, $36, $ab, $ae, $24, $aa, $82, $11, $5c, $9f, $43, $4d
>391de8	24 aa 82 11 5c 9f 43 4d
>391df0	8f 0c 20 00 91 b6 45 9e						              .text  $8f, $0c, $20, $00, $91, $b6, $45, $9e, $3e, $3d, $66, $7e, $0a, $1c, $6b, $74
>391df8	3e 3d 66 7e 0a 1c 6b 74
>391e00					.align 16
>391e00	00 01 01 00 00 00 00 00		MOUSE_POINTER_PTR     .text $00,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00
>391e08	01 01 01 00 00 00 00 00
>391e10	01 ff ff 01 00 00 01 01		                      .text $01,$FF,$FF,$01,$00,$00,$01,$01,$FF,$FF,$FF,$01,$00,$00,$00,$00
>391e18	ff ff ff 01 00 00 00 00
>391e20	01 ff ff ff 01 01 55 ff		                      .text $01,$FF,$FF,$FF,$01,$01,$55,$FF,$01,$55,$FF,$FF,$01,$00,$00,$00
>391e28	01 55 ff ff 01 00 00 00
>391e30	01 55 ff ff ff ff 01 55		                      .text $01,$55,$FF,$FF,$FF,$FF,$01,$55,$FF,$FF,$FF,$FF,$01,$00,$00,$00
>391e38	ff ff ff ff 01 00 00 00
>391e40	00 01 55 ff ff ff ff ff		                      .text $00,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$00,$00
>391e48	ff ff 01 ff ff 01 00 00
>391e50	00 00 01 55 ff ff ff ff		                      .text $00,$00,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$FF,$01,$00,$00
>391e58	01 ff ff 01 ff 01 00 00
>391e60	00 00 01 01 55 ff ff ff		                      .text $00,$00,$01,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$FF,$01,$00,$00
>391e68	ff 01 ff ff ff 01 00 00
>391e70	00 00 01 55 01 55 ff ff		                      .text $00,$00,$01,$55,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$01,$00
>391e78	ff ff ff ff ff 01 01 00
>391e80	00 00 01 55 55 55 ff ff		                      .text $00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01
>391e88	ff ff ff ff 01 ff ff 01
>391e90	00 00 00 01 55 55 55 ff		                      .text $00,$00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01
>391e98	ff ff ff ff ff ff ff 01
>391ea0	00 00 00 00 01 55 55 55		                      .text $00,$00,$00,$00,$01,$55,$55,$55,$55,$55,$01,$FF,$FF,$55,$01,$00
>391ea8	55 55 01 ff ff 55 01 00
>391eb0	00 00 00 00 00 01 01 01		                      .text $00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$55,$FF,$55,$01,$00,$00
>391eb8	01 01 55 ff 55 01 00 00
>391ec0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$55,$01,$00,$00,$00
>391ec8	01 55 55 55 01 00 00 00
>391ed0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$01,$00,$00,$00,$00
>391ed8	01 55 55 01 00 00 00 00
>391ee0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00
>391ee8	00 01 01 00 00 00 00 00
>391ef0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>391ef8	00 00 00 00 00 00 00 00
.3ff000					FONT_4_BANK0
>3ff000	00 00 00 00 00 00 00 00		.binary "FONT/Bm437_PhoenixEGA_8x8.bin", 0, 2048
>3ff008	7e 81 a5 81 bd 99 81 7e 3c 7e db ff c3 7e 3c 00
>3ff018	00 ee fe fe 7c 38 10 00 10 38 7c fe 7c 38 10 00
>3ff028	00 3c 18 ff ff 08 18 00 10 38 7c fe fe 10 38 00
>3ff038	00 00 18 3c 18 00 00 00 ff ff e7 c3 e7 ff ff ff
>3ff048	00 3c 42 81 81 42 3c 00 ff c3 bd 7e 7e bd c3 ff
>3ff058	01 03 07 0f 1f 3f 7f ff ff fe fc f8 f0 e0 c0 80
>3ff068	04 06 07 04 04 fc f8 00 0c 0a 0d 0b f9 f9 1f 1f
>3ff078	00 92 7c 44 c6 7c 92 00 00 00 60 78 7e 78 60 00
>3ff088	00 00 06 1e 7e 1e 06 00 18 7e 18 18 18 18 7e 18
>3ff098	66 66 66 66 66 00 66 00 ff b6 76 36 36 36 36 00
>3ff0a8	7e c1 dc 22 22 1f 83 7e 00 00 00 7e 7e 00 00 00
>3ff0b8	18 7e 18 18 7e 18 00 ff 18 7e 18 18 18 18 18 00
>3ff0c8	18 18 18 18 18 7e 18 00 00 04 06 ff 06 04 00 00
>3ff0d8	00 20 60 ff 60 20 00 00 00 00 00 c0 c0 c0 ff 00
>3ff0e8	00 24 66 ff 66 24 00 00 00 00 10 38 7c fe 00 00
>3ff0f8	00 00 00 fe 7c 38 10 00 00 00 00 00 00 00 00 00
>3ff108	30 30 30 30 30 00 30 00 66 66 00 00 00 00 00 00
>3ff118	6c 6c fe 6c fe 6c 6c 00 10 7c d2 7c 86 7c 10 00
>3ff128	f0 96 fc 18 3e 72 de 00 30 48 30 78 ce cc 78 00
>3ff138	0c 0c 18 00 00 00 00 00 10 60 c0 c0 c0 60 10 00
>3ff148	10 0c 06 06 06 0c 10 00 00 54 38 fe 38 54 00 00
>3ff158	00 18 18 7e 18 18 00 00 00 00 00 00 00 00 18 70
>3ff168	00 00 00 7e 00 00 00 00 00 00 00 00 00 00 18 00
>3ff178	02 06 0c 18 30 60 c0 00 7c ce de f6 e6 e6 7c 00
>3ff188	18 38 78 18 18 18 3c 00 7c c6 06 0c 30 60 fe 00
>3ff198	7c c6 06 3c 06 c6 7c 00 0e 1e 36 66 fe 06 06 00
>3ff1a8	fe c0 c0 fc 06 06 fc 00 7c c6 c0 fc c6 c6 7c 00
>3ff1b8	fe 06 0c 18 30 60 60 00 7c c6 c6 7c c6 c6 7c 00
>3ff1c8	7c c6 c6 7e 06 c6 7c 00 00 30 00 00 00 30 00 00
>3ff1d8	00 30 00 00 00 30 20 00 00 1c 30 60 30 1c 00 00
>3ff1e8	00 00 7e 00 7e 00 00 00 00 70 18 0c 18 70 00 00
>3ff1f8	7c c6 0c 18 30 00 30 00 7c 82 9a aa aa 9e 7c 00
>3ff208	7c c6 c6 fe c6 c6 c6 00 fc 66 66 7c 66 66 fc 00
>3ff218	7c c6 c0 c0 c0 c6 7c 00 fc 66 66 66 66 66 fc 00
>3ff228	fe 62 68 78 68 62 fe 00 fe 62 68 78 68 60 f0 00
>3ff238	7c c6 c6 c0 de c6 7c 00 c6 c6 c6 fe c6 c6 c6 00
>3ff248	3c 18 18 18 18 18 3c 00 1e 0c 0c 0c 0c cc 78 00
>3ff258	c6 cc d8 f0 d8 cc c6 00 f0 60 60 60 60 62 fe 00
>3ff268	c6 ee fe d6 c6 c6 c6 00 c6 e6 f6 de ce c6 c6 00
>3ff278	7c c6 c6 c6 c6 c6 7c 00 fc 66 66 7c 60 60 f0 00
>3ff288	7c c6 c6 c6 c6 c6 7c 0c fc 66 66 7c 66 66 e6 00
>3ff298	7c c6 c0 7c 06 c6 7c 00 7e 5a 18 18 18 18 3c 00
>3ff2a8	c6 c6 c6 c6 c6 c6 7c 00 c6 c6 c6 c6 c6 6c 38 00
>3ff2b8	c6 c6 c6 c6 d6 ee c6 00 c6 6c 38 38 38 6c c6 00
>3ff2c8	66 66 66 3c 18 18 3c 00 fe c6 0c 18 30 66 fe 00
>3ff2d8	1c 18 18 18 18 18 1c 00 c0 60 30 18 0c 06 02 00
>3ff2e8	70 30 30 30 30 30 70 00 00 00 10 38 6c c6 00 00
>3ff2f8	00 00 00 00 00 00 00 ff 30 30 18 00 00 00 00 00
>3ff308	00 00 7c 06 7e c6 7e 00 c0 c0 fc c6 c6 c6 fc 00
>3ff318	00 00 7c c6 c0 c6 7c 00 06 06 7e c6 c6 c6 7e 00
>3ff328	00 00 7c c6 fe c0 7c 00 3c 66 60 f0 60 60 60 00
>3ff338	00 00 7e c6 c6 7e 06 7c c0 c0 fc c6 c6 c6 c6 00
>3ff348	18 00 38 18 18 18 3c 00 00 0c 00 1c 0c 0c cc 78
>3ff358	c0 c0 c6 d8 f0 d8 c6 00 38 18 18 18 18 18 3c 00
>3ff368	00 00 ee fe d6 c6 c6 00 00 00 fc c6 c6 c6 c6 00
>3ff378	00 00 7c c6 c6 c6 7c 00 00 00 fc c6 c6 fc c0 c0
>3ff388	00 00 7e c6 c6 7e 06 06 00 00 de 76 60 60 60 00
>3ff398	00 00 7c c0 7c 06 7c 00 18 18 7e 18 18 18 1e 00
>3ff3a8	00 00 c6 c6 c6 c6 7e 00 00 00 c6 c6 c6 6c 38 00
>3ff3b8	00 00 c6 c6 d6 fe c6 00 00 00 c6 6c 38 6c c6 00
>3ff3c8	00 00 c6 c6 c6 7e 06 7c 00 00 fe 0c 18 60 fe 00
>3ff3d8	0e 18 18 70 18 18 0e 00 18 18 18 00 18 18 18 00
>3ff3e8	e0 30 30 1c 30 30 e0 00 00 00 70 9a 0e 00 00 00
>3ff3f8	00 00 18 3c 66 ff 00 00 7c c6 c0 c0 c6 7c 18 70
>3ff408	66 00 c6 c6 c6 c6 7e 00 0e 18 7c c6 fe c0 7c 00
>3ff418	18 24 7c 06 7e c6 7e 00 66 00 7c 06 7e c6 7e 00
>3ff428	38 0c 7c 06 7e c6 7e 00 18 00 7c 06 7e c6 7e 00
>3ff438	00 00 7c c0 c0 7c 18 70 18 24 7c c6 fe c0 7c 00
>3ff448	66 00 7c c6 fe c0 7c 00 70 18 7c c6 fe c0 7c 00
>3ff458	66 00 38 18 18 18 3c 00 18 24 38 18 18 18 3c 00
>3ff468	38 0c 38 18 18 18 3c 00 66 00 7c c6 fe c6 c6 00
>3ff478	18 00 7c c6 fe c6 c6 00 0e 18 fe 60 78 60 fe 00
>3ff488	00 00 7c 1a 7e d8 7e 00 7e d8 d8 de f8 d8 de 00
>3ff498	18 24 7c c6 c6 c6 7c 00 66 00 7c c6 c6 c6 7c 00
>3ff4a8	38 0c 7c c6 c6 c6 7c 00 18 24 c6 c6 c6 c6 7e 00
>3ff4b8	38 0c c6 c6 c6 c6 7e 00 66 00 c6 c6 c6 7e 06 7c
>3ff4c8	66 7c c6 c6 c6 c6 7c 00 c6 00 c6 c6 c6 c6 7c 00
>3ff4d8	18 7c c6 c0 c6 7c 18 00 1e 32 30 78 30 70 fe 00
>3ff4e8	66 3c 18 7e 18 3c 18 00 fc c6 fc c0 cc de cc 0e
>3ff4f8	00 1c 32 30 fc 30 f0 00 0e 18 7c 06 7e c6 7e 00
>3ff508	1a 30 38 18 18 18 3c 00 0e 18 7c c6 c6 c6 7c 00
>3ff518	0e 18 c6 c6 c6 c6 7e 00 66 98 fc c6 c6 c6 c6 00
>3ff528	66 98 e6 f6 de ce c6 00 7c 06 7e c6 7e 00 fe 00
>3ff538	7c c6 c6 c6 7c 00 fe 00 18 00 18 30 60 c6 7c 00
>3ff548	00 00 fe c0 c0 c0 c0 00 00 00 fe 06 06 06 06 00
>3ff558	c0 c0 c0 de 06 0c 1e 00 c0 c0 c0 cc 1c 3e 0c 00
>3ff568	30 00 30 30 30 30 30 00 00 36 6c d8 6c 36 00 00
>3ff578	00 d8 6c 36 6c d8 00 00 aa aa aa aa aa aa aa aa
>3ff588	aa 55 aa 55 aa 55 aa 55 44 22 44 22 44 22 44 22
>3ff598	18 18 18 18 18 18 18 18 18 18 18 f8 18 18 18 18
>3ff5a8	18 18 18 f8 18 f8 18 18 36 36 36 f6 36 36 36 36
>3ff5b8	00 00 00 fe 36 36 36 36 00 00 00 f8 18 f8 18 18
>3ff5c8	36 36 36 f6 06 f6 36 36 36 36 36 36 36 36 36 36
>3ff5d8	00 00 00 fe 06 f6 36 36 36 36 36 f6 06 fe 00 00
>3ff5e8	36 36 36 fe 00 00 00 00 18 18 18 f8 18 f8 00 00
>3ff5f8	00 00 00 f8 18 18 18 18 18 18 18 1f 00 00 00 00
>3ff608	18 18 18 ff 00 00 00 00 00 00 00 ff 18 18 18 18
>3ff618	18 18 18 1f 18 18 18 18 00 00 00 ff 00 00 00 00
>3ff628	18 18 18 ff 18 18 18 18 18 18 18 1f 18 1f 18 18
>3ff638	36 36 36 37 36 36 36 36 36 36 36 37 30 3f 00 00
>3ff648	00 00 00 3f 30 37 36 36 36 36 36 f7 00 ff 00 00
>3ff658	00 00 00 ff 00 f7 36 36 36 36 36 37 30 37 36 36
>3ff668	00 00 00 ff 00 ff 00 00 36 36 36 f7 00 f7 36 36
>3ff678	18 18 18 ff 00 ff 00 00 36 36 36 ff 00 00 00 00
>3ff688	00 00 00 ff 00 ff 18 18 00 00 00 ff 36 36 36 36
>3ff698	36 36 36 3f 00 00 00 00 18 18 18 1f 18 1f 00 00
>3ff6a8	00 00 00 1f 18 1f 18 18 00 00 00 3f 36 36 36 36
>3ff6b8	36 36 36 ff 36 36 36 36 18 18 18 ff 18 ff 18 18
>3ff6c8	18 18 18 f8 00 00 00 00 00 00 00 1f 18 18 18 18
>3ff6d8	ff ff ff ff ff ff ff ff 00 00 00 00 ff ff ff ff
>3ff6e8	f0 f0 f0 f0 f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f
>3ff6f8	ff ff ff ff 00 00 00 00 00 00 77 98 98 77 00 00
>3ff708	1c 36 66 fc c6 c6 fc c0 fe 62 60 60 60 60 60 00
>3ff718	00 00 ff 66 66 66 66 00 fe 62 30 18 30 62 fe 00
>3ff728	00 00 3f 66 c6 cc 78 00 00 00 33 33 33 3e 30 f0
>3ff738	00 00 ff 18 18 18 18 00 3c 18 3c 66 66 3c 18 3c
>3ff748	00 7c c6 fe c6 7c 00 00 00 7e c3 c3 c3 66 e7 00
>3ff758	1e 19 3c 66 c6 cc 78 00 00 00 66 99 99 66 00 00
>3ff768	00 03 7c ce e6 7c c0 00 00 3e c0 fe c0 3e 00 00
>3ff778	00 7e c3 c3 c3 c3 00 00 00 fe 00 fe 00 fe 00 00
>3ff788	18 18 7e 18 18 7e 00 00 70 18 0c 18 70 00 fe 00
>3ff798	1c 30 60 30 1c 00 fe 00 00 0e 1b 18 18 18 18 18
>3ff7a8	18 18 18 18 18 d8 70 00 00 18 00 7e 00 18 00 00
>3ff7b8	00 76 dc 00 76 dc 00 00 3c 66 3c 00 00 00 00 00
>3ff7c8	00 18 3c 18 00 00 00 00 00 00 00 00 18 00 00 00
>3ff7d8	0f 0c 0c 0c ec 6c 38 00 d8 ec cc cc 00 00 00 00
>3ff7e8	f0 30 c0 f0 00 00 00 00 00 00 00 3c 3c 3c 3c 00
>3ff7f8	00 00 00 00 00 00 00 00
.3ff800					FONT_4_BANK1
>3ff800	00 00 00 00 00 00 00 00		.binary "FONT/CBM-ASCII_8x8.bin", 0, 2048
>3ff808	7c 82 aa 82 ba 92 82 7c 7c fe d6 fe c6 ee fe 7c
>3ff818	ff fd fb f5 eb d5 ab ff ff e1 fd 85 85 87 87 ff
>3ff828	ff bd db e7 e7 db bd ff ff 81 81 bd bd bd 81 ff
>3ff838	ff ff ff ff ff 81 81 ff 00 08 10 20 10 08 00 00
>3ff848	00 24 14 0c 14 24 00 00 00 8e 88 8c 88 e8 00 00
>3ff858	00 00 00 00 00 00 00 00 00 ee 88 cc 88 88 00 00
>3ff868	00 00 04 14 3c 10 00 00 00 30 4c 4c 30 00 00 00
>3ff878	00 38 28 38 28 00 00 00 ff 81 bd bd bd bd 81 ff
>3ff888	ff 55 aa 55 aa 55 aa ff ab d5 ab d5 ab d5 ab d5
>3ff898	ff 81 81 81 81 81 81 ff ff f9 e1 81 81 e1 f9 ff
>3ff8a8	ff 9f 87 81 81 87 9f ff ff e7 e7 c3 c3 81 81 ff
>3ff8b8	ff 81 81 c3 c3 e7 e7 ff 00 26 54 04 04 04 06 00
>3ff8c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 3 times (48 bytes)...
>3ff908	10 10 10 10 00 10 00 00 24 24 24 00 00 00 00 00
>3ff918	24 7e 24 24 7e 24 00 00 10 3c 50 38 14 78 10 00
>3ff928	62 64 08 10 20 4c 8c 00 30 48 48 30 58 4c 4c 38
>3ff938	10 10 10 00 00 00 00 00 08 10 20 20 20 20 10 08
>3ff948	10 08 04 04 04 04 08 10 00 24 18 7e 18 24 00 00
>3ff958	00 10 10 7c 10 10 00 00 00 00 00 00 10 10 20 00
>3ff968	00 00 00 3c 00 00 00 00 00 00 00 00 18 18 00 00
>3ff978	04 04 08 08 10 10 20 20 3c 46 4a 52 62 42 3c 00
>3ff988	10 30 10 10 10 10 38 00 38 44 04 18 20 40 7c 00
>3ff998	38 44 04 18 04 44 38 00 08 18 28 48 7c 08 08 00
>3ff9a8	7c 40 78 04 04 44 38 00 38 44 40 78 44 44 38 00
>3ff9b8	7c 44 04 08 08 10 10 00 38 44 44 38 44 44 38 00
>3ff9c8	38 44 44 3c 04 44 38 00 00 00 18 00 00 18 00 00
>3ff9d8	00 00 18 00 00 18 18 30 00 08 10 20 10 08 00 00
>3ff9e8	00 00 3c 00 3c 00 00 00 00 10 08 04 08 10 00 00
>3ff9f8	38 44 04 08 10 00 10 00 38 44 4c 4c 40 44 38 00
>3ffa08	10 28 44 7c 44 44 00 00 78 44 78 44 44 78 00 00
>3ffa18	38 44 40 40 44 38 00 00 78 44 44 44 44 78 00 00
>3ffa28	7c 40 78 40 40 7c 00 00 7c 40 78 40 40 40 00 00
>3ffa38	38 44 40 4c 44 38 00 00 44 44 7c 44 44 44 00 00
>3ffa48	38 10 10 10 10 38 00 00 1c 08 08 08 48 30 00 00
>3ffa58	24 28 30 30 28 24 00 00 20 20 20 20 20 3c 00 00
>3ffa68	44 6c 7c 54 44 44 00 00 44 64 54 4c 44 44 00 00
>3ffa78	38 44 44 44 44 38 00 00 78 44 44 78 40 40 00 00
>3ffa88	38 44 44 44 44 38 0c 00 78 44 44 78 48 44 00 00
>3ffa98	3c 40 38 04 04 78 00 00 7c 10 10 10 10 10 00 00
>3ffaa8	44 44 44 44 44 38 00 00 44 44 44 44 28 10 00 00
>3ffab8	82 82 82 92 92 6c 00 00 42 24 18 18 24 42 00 00
>3ffac8	44 44 28 10 10 10 00 00 7c 08 10 20 40 7c 00 00
>3ffad8	38 20 20 20 20 20 38 00 20 20 10 10 08 08 04 04
>3ffae8	38 08 08 08 08 08 38 00 00 10 28 44 00 00 00 00
>3ffaf8	00 00 00 00 00 00 00 7e 40 20 10 00 00 00 00 00
>3ffb08	00 38 04 3c 64 3c 00 00 40 40 78 44 44 78 00 00
>3ffb18	00 00 38 40 40 38 00 00 04 04 3c 44 44 3c 00 00
>3ffb28	00 38 44 7c 40 3c 00 00 0c 10 3c 10 10 10 00 00
>3ffb38	00 00 3c 44 44 3c 04 78 40 40 78 44 44 44 00 00
>3ffb48	10 00 30 10 10 38 00 00 08 00 08 08 08 08 08 30
>3ffb58	20 20 24 38 28 24 00 00 30 10 10 10 10 10 00 00
>3ffb68	00 00 68 54 54 44 00 00 00 00 38 24 24 24 00 00
>3ffb78	00 00 38 44 44 38 00 00 00 00 78 44 44 78 40 40
>3ffb88	00 00 3c 44 44 3c 04 04 00 00 78 44 40 40 00 00
>3ffb98	00 00 1c 30 0c 38 00 00 00 10 7c 10 10 10 0c 00
>3ffba8	00 00 44 44 44 3c 00 00 00 00 42 42 24 18 00 00
>3ffbb8	00 00 82 82 92 6c 00 00 00 00 24 18 18 24 00 00
>3ffbc8	00 00 24 24 24 1c 04 38 00 00 7c 18 30 7c 00 00
>3ffbd8	0c 10 10 30 30 10 10 0c 18 18 18 00 18 18 18 00
>3ffbe8	30 08 08 0c 0c 08 08 30 00 00 32 7e 4c 00 00 00
>3ffbf8	00 00 10 28 38 00 00 00 00 00 3c 3c 3c 3c 00 00
>3ffc08	00 00 3c 24 24 3c 00 00 00 00 18 3c 3c 18 00 00
>3ffc18	00 00 18 24 24 18 00 00 18 24 24 18 00 00 00 00
>3ffc28	00 3c 42 42 66 24 66 00 00 18 00 18 0c 06 66 3c
>3ffc38	0c 12 30 7c 30 62 fc 00 1c 20 70 20 70 20 1c 00
>3ffc48	02 06 0c d8 f0 e0 c0 00 18 18 ff 00 00 ff 00 00
>3ffc58	00 00 ff 00 00 ff 18 18 24 24 24 e7 e7 24 24 24
>3ffc68	18 18 ff 00 00 ff 18 18 24 24 24 27 27 24 24 24
>3ffc78	24 24 24 e4 e4 24 24 24 00 00 00 ff ff ff ff ff
>3ffc88	00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>3ffc98	ff ff ff ff ff ff ff 00 ff ff ff ff ff ff 00 00
>3ffca8	ff ff ff ff ff 00 00 00 ff ff ff ff 00 00 00 00
>3ffcb8	f8 f8 f8 f8 f8 f8 f8 f8 fc fc fc fc fc fc fc fc
>3ffcc8	fe fe fe fe fe fe fe fe 7f 7f 7f 7f 7f 7f 7f 7f
>3ffcd8	3f 3f 3f 3f 3f 3f 3f 3f 1f 1f 1f 1f 1f 1f 1f 1f
>3ffce8	0f 0f 0f 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00
>3ffcf8	00 00 00 00 00 00 00 00 ff ff ff ff ff ff ff ff
>3ffd08	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 00 ff ff ff ff
>3ffd18	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>3ffd28	80 80 80 80 80 80 80 80 aa 55 aa 55 aa 55 aa 55
>3ffd38	01 01 01 01 01 01 01 01 00 00 00 00 aa 55 aa 55
>3ffd48	ff fe fc f8 f0 e0 c0 80 03 03 03 03 03 03 03 03
>3ffd58	18 18 18 1f 1f 18 18 18 00 00 00 00 0f 0f 0f 0f
>3ffd68	18 18 18 1f 1f 00 00 00 00 00 00 f8 f8 18 18 18
>3ffd78	00 00 00 00 00 00 ff ff 00 00 00 1f 1f 18 18 18
>3ffd88	18 18 18 ff ff 00 00 00 00 00 00 ff ff 18 18 18
>3ffd98	18 18 18 f8 f8 18 18 18 c0 c0 c0 c0 c0 c0 c0 c0
>3ffda8	e0 e0 e0 e0 e0 e0 e0 e0 07 07 07 07 07 07 07 07
>3ffdb8	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00
>3ffdc8	00 00 00 00 00 ff ff ff 03 03 03 03 03 03 ff ff
>3ffdd8	00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>3ffde8	18 18 18 f8 f8 00 00 00 f0 f0 f0 f0 00 00 00 00
>3ffdf8	f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 ff ff 00 00 00
>3ffe08	08 1c 3e 7f 7f 1c 3e 00 18 18 18 18 18 18 18 18
>3ffe18	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00
>3ffe28	00 ff ff 00 00 00 00 00 00 00 00 00 ff ff 00 00
>3ffe38	30 30 30 30 30 30 30 30 0c 0c 0c 0c 0c 0c 0c 0c
>3ffe48	00 00 00 e0 f0 38 18 18 18 18 1c 0f 07 00 00 00
>3ffe58	18 18 38 f0 e0 00 00 00 c0 c0 c0 c0 c0 c0 ff ff
>3ffe68	c0 e0 70 38 1c 0e 07 03 03 07 0e 1c 38 70 e0 c0
>3ffe78	ff ff c0 c0 c0 c0 c0 c0 ff ff 03 03 03 03 03 03
>3ffe88	00 3c 7e 7e 7e 7e 3c 00 00 00 00 00 00 ff ff 00
>3ffe98	36 7f 7f 7f 3e 1c 08 00 60 60 60 60 60 60 60 60
>3ffea8	00 00 00 07 0f 1c 18 18 c3 e7 7e 3c 3c 7e e7 c3
>3ffeb8	00 3c 7e 66 66 7e 3c 00 18 18 66 66 18 18 3c 00
>3ffec8	06 06 06 06 06 06 06 06 08 1c 3e 7f 3e 1c 08 00
>3ffed8	18 18 18 ff ff 18 18 18 c0 c0 30 30 c0 c0 30 30
>3ffee8	18 18 18 18 18 18 18 18 00 00 03 3e 76 36 36 00
>3ffef8	ff 7f 3f 1f 0f 07 03 01 24 24 24 24 24 24 24 24
>3fff08	00 00 ff 00 00 ff 00 00 00 00 3f 20 20 27 24 24
>3fff18	00 00 ff 00 00 e7 24 24 00 00 fc 04 04 e4 24 24
>3fff28	24 24 27 20 20 3f 00 00 24 24 e7 00 00 ff 00 00
>3fff38	24 24 e4 04 04 fc 00 00 24 24 27 20 20 27 24 24
>3fff48	24 24 e4 04 04 e4 24 24 24 24 e7 00 00 e7 24 24
>3fff58	0f 0f 0f 0f f0 f0 f0 f0 01 03 07 0f 1f 3f 7f ff
>3fff68	80 c0 e0 f0 f8 fc fe ff 33 99 cc 66 33 99 cc 66
>3fff78	cc 99 33 66 cc 99 33 66 f0 f0 f0 f0 ff ff ff ff
>3fff88	0f 0f 0f 0f ff ff ff ff ff ff ff ff f0 f0 f0 f0
>3fff98	ff ff ff ff 0f 0f 0f 0f 05 0a 05 0a 00 00 00 00
>3fffa8	00 00 00 00 0a 05 0a 05 a0 50 a0 50 00 00 00 00
>3fffb8	00 00 00 00 a0 50 a0 50 0a 05 0a 05 0a 05 0a 05
>3fffc8	aa 55 aa 55 00 00 00 00 00 18 3c 7e 18 18 18 18
>3fffd8	00 10 30 7f 7f 30 10 00 00 08 0c fe fe 0c 08 00
>3fffe8	18 18 18 18 7e 3c 18 00 00 00 36 49 36 00 00 00
>3ffff8	00 00 00 00 00 00 00 00
>3a0000	5c a3 57 3a 5c 7c 3f 3a		.binary "binaries/basic816.bin"
>3a0008	5c d5 1e 3a 5c 9a 01 3a 5c b2 00 3a 5c 30 01 3a
>3a0018	5c 69 03 3a 5c 3e 01 3a 5c 59 01 3a 5c 60 01 3a
>3a0028	da 08 c2 10 a2 00 00 e2 20 20 5d 00 90 15 f0 13
>3a0038	c9 0d f0 0f c9 0a f0 0b 9f 00 4f 00 c9 00 f0 03
>3a0048	e8 80 e6 a9 00 9f 00 4f 00 28 fa 60 c2 10 ae b1
>3a0058	08 ec af 08 60 5a 08 08 c2 20 48 a9 00 08 5b 68
>3a0068	28 e2 20 c2 10 a4 b1 c4 af 10 0d b7 ac c2 20 29
>3a0078	ff 00 e6 b1 28 7a 38 60 28 7a 18 60 8b e2 20 85
>3a0088	b4 08 c2 20 48 a9 00 08 5b 68 28 c2 20 a5 a5 d0
>3a0098	06 e2 20 a5 a7 f0 11 c2 10 a4 aa c4 a8 f0 09 e2
>3a00a8	20 a5 b4 97 a5 c8 84 aa ab 60 08 c2 10 e2 20 a9
>3a00b8	01 20 1c 00 a2 00 00 a9 00 9f 00 4c 00 e8 e0 00
>3a00c8	01 d0 f6 a2 00 00 20 14 00 c9 0d d0 03 4c 29 01
>3a00d8	c9 9d d0 08 e0 00 00 f0 ed ca 80 39 c9 1d d0 0e
>3a00e8	bf 00 4c 00 f0 e0 e0 4f 00 f0 db e8 80 27 c9 08
>3a00f8	d0 1a e0 00 00 f0 cf da bf 01 4c 00 9f 00 4c 00
>3a0108	f0 06 e8 e0 ff 00 d0 f0 fa ca 80 0e c9 20 90 b6
>3a0118	9f 00 4c 00 e8 20 18 00 80 ac a9 08 20 18 00 80
>3a0128	a5 a9 00 20 1c 00 28 60 22 4c 00 39 60 20 14 00
>3a0138	48 20 18 00 68 60 08 e2 20 c9 00 f0 08 af 10 00
>3a0148	af 09 01 80 06 af 10 00 af 29 fe 8f 10 00 af 28
>3a0158	60 08 22 84 00 39 28 60 48 da 5a 0b 08 e2 20 c2
>3a0168	10 a2 00 00 a9 20 9f 00 a0 af af 1e 00 00 9f 00
>3a0178	c0 af e8 e0 00 20 d0 ec 08 c2 20 48 a9 00 00 5b
>3a0188	68 28 a2 00 00 a0 00 00 22 84 00 39 28 2b 7a fa
>3a0198	68 60 da 5a 0b 08 08 c2 20 48 a9 00 08 5b 68 28
>3a01a8	c2 30 af 0c 00 00 85 08 e2 20 af 0e 00 00 c2 20
>3a01b8	29 ff 00 85 0a a9 80 00 8f 08 01 00 af 1c 00 00
>3a01c8	3a 8f 0a 01 00 18 a5 08 6f 0c 01 00 85 08 a5 0a
>3a01d8	69 00 00 85 0a e2 20 a0 00 00 a2 00 00 b7 08 9f
>3a01e8	00 4f 00 e8 c8 c0 80 00 d0 f3 ca bf 00 4f 00 c9
>3a01f8	20 d0 09 a9 00 9f 00 4f 00 ca 10 ef 28 2b 7a fa
>3a0208	60 08 08 c2 20 48 a9 00 08 5b 68 28 c2 10 e2 20
>3a0218	a2 00 00 bf 00 00 36 9f 00 71 3a e8 e0 18 00 d0
>3a0228	f2 28 60 08 08 c2 20 48 a9 00 08 5b 68 28 c2 30
>3a0238	a2 14 00 bf 00 00 36 85 08 e8 e8 bf 00 00 36 85
>3a0248	0a a5 08 d0 07 a5 0a d0 03 28 18 60 e2 20 a2 00
>3a0258	00 a0 00 00 b7 08 9f 00 71 3a e8 c8 e0 18 00 d0
>3a0268	f3 28 38 60 08 8b 08 e2 20 48 a9 3a 48 ab 68 28
>3a0278	20 09 02 e2 20 a0 00 00 a2 00 00 bd 00 71 f0 2c
>3a0288	d9 00 70 d0 2e e8 c8 e0 08 00 d0 ef c8 a2 08 00
>3a0298	bd 00 71 f0 10 d9 00 70 d0 19 e8 c8 e0 03 00 d0
>3a02a8	ef ab 28 38 60 b9 00 70 f0 f7 80 07 b9 00 70 c9
>3a02b8	2e f0 d9 20 2b 02 b0 bb ab 28 18 60 08 08 c2 20
>3a02c8	48 a9 00 08 5b 68 28 c2 30 20 6c 02 90 2a a2 10
>3a02d8	00 bf 00 71 3a 85 08 bf 02 71 3a 85 0a e2 20 a7
>3a02e8	08 87 58 f0 10 c2 20 e6 08 d0 02 e6 0a e6 58 d0
>3a02f8	ee e6 5a 80 ea 28 38 60 28 18 60 e2 20 a9 48 8f
>3a0308	0f 00 00 a9 34 8f 13 00 00 a9 20 8f 08 00 af 8f
>3a0318	09 00 af a2 00 00 a9 00 9f 28 71 3a e8 e0 12 00
>3a0328	d0 f6 a9 80 8f b3 08 00 a9 f0 8f 1e 00 00 e2 20
>3a0338	a9 00 8f 8a 0f 00 60 08 e2 20 48 22 18 00 39 af
>3a0348	8a 0f 00 29 01 d0 f8 68 28 60 08 c2 20 48 e2 20
>3a0358	a9 0d 20 18 00 c2 20 68 28 60 08 22 78 00 39 28
>3a0368	60 08 e2 20 c2 10 da 5a 8f b4 08 00 af b3 08 00
>3a0378	29 20 f0 07 af b4 08 00 20 84 00 af b3 08 00 29
>3a0388	80 f0 07 af b4 08 00 20 3f 03 7a fa 28 60 08 e2
>3a0398	20 bd 00 00 f0 06 20 18 00 e8 80 f5 28 60 08 c2
>3a03a8	20 48 48 4a 4a 4a 4a 4a 4a 4a 4a 20 c0 03 68 29
>3a03b8	ff 00 20 c0 03 68 28 60 08 c2 20 48 e2 20 48 4a
>3a03c8	4a 4a 4a 20 d7 03 68 20 d7 03 c2 20 68 28 60 08
>3a03d8	c2 30 da 29 0f 00 aa bf 00 60 3a 20 18 00 fa 28
>3a03e8	60 08 e2 20 c9 5b b0 04 c9 41 b0 0b c9 7b b0 04
>3a03f8	c9 61 b0 03 28 18 60 28 38 60 08 e2 20 c9 3a b0
>3a0408	04 c9 30 b0 03 28 18 60 28 38 60 08 e2 20 c9 3a
>3a0418	b0 04 c9 30 b0 13 c9 67 b0 04 c9 61 b0 0b c9 47
>3a0428	b0 04 c9 41 b0 03 28 18 60 28 38 60 08 e2 20 c9
>3a0438	3a b0 04 c9 30 b0 12 c9 67 b0 04 c9 61 b0 0f c9
>3a0448	47 b0 04 c9 41 b0 09 28 60 38 e9 30 80 f9 29 df
>3a0458	38 e9 37 80 f2 08 e2 20 c9 7b b0 06 c9 61 90 02
>3a0468	29 df 28 60 08 e2 20 c2 10 bd 00 00 f0 09 20 5d
>3a0478	04 9d 00 00 e8 80 f2 28 60 08 0b 08 c2 20 48 a9
>3a0488	00 08 5b 68 28 c2 20 48 06 21 26 23 a5 21 85 0c
>3a0498	a5 23 85 0e 06 0c 26 0e 06 0c 26 0e 18 a5 21 65
>3a04a8	0c 85 21 a5 23 65 0e 85 23 68 2b 28 60 08 0b 08
>3a04b8	c2 20 48 a9 00 08 5b 68 28 c2 20 a5 21 8f 12 01
>3a04c8	00 a9 0a 00 8f 10 01 00 af 14 01 00 85 21 64 23
>3a04d8	af 16 01 00 85 27 64 29 e2 20 a9 00 85 25 85 2b
>3a04e8	2b 28 60 08 c2 20 a5 21 d0 08 a5 23 d0 04 28 e2
>3a04f8	02 60 28 c2 02 60 08 e2 20 a5 25 c9 00 d0 02 28
>3a0508	60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f
>3a0518	d1 08 00 dc d2 08 08 e2 20 a5 25 c9 02 d0 02 28
>3a0528	60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f
>3a0538	d1 08 00 dc d2 08 08 e2 20 a5 25 c9 00 d0 08 c2
>3a0548	20 a5 23 d0 17 28 60 08 c2 20 48 a9 00 08 5b 68
>3a0558	28 e2 20 a9 04 8f d1 08 00 dc d2 08 08 c2 20 48
>3a0568	a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08 00 dc d2
>3a0578	08 08 e2 20 a5 25 c9 00 d0 0e a5 24 d0 1f a5 23
>3a0588	d0 1b a5 22 d0 17 28 60 08 c2 20 48 a9 00 08 5b
>3a0598	68 28 e2 20 a9 04 8f d1 08 00 dc d2 08 08 c2 20
>3a05a8	48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08 00 dc
>3a05b8	d2 08 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30
>3a05c8	64 21 64 23 e2 20 64 25 a7 00 c9 26 f0 3a e2 20
>3a05d8	a7 00 20 02 04 90 6c 20 81 04 38 e9 30 c2 20 29
>3a05e8	ff 00 18 65 21 85 21 a5 23 69 00 00 85 23 20 79
>3a05f8	19 80 db 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a0608	02 8f d1 08 00 dc d2 08 20 79 19 a7 00 c9 48 f0
>3a0618	04 c9 68 d0 de 20 79 19 e2 20 a7 00 20 13 04 90
>3a0628	22 20 34 04 c2 20 06 21 26 23 06 21 26 23 06 21
>3a0638	26 23 06 21 26 23 29 ff 00 18 65 21 85 21 20 79
>3a0648	19 80 d5 2b 28 60 08 c2 30 38 a5 04 e5 18 a8 e2
>3a0658	20 b7 18 f0 10 c9 20 f0 06 c9 09 f0 02 28 60 88
>3a0668	c0 ff ff d0 ec a9 00 60 08 0b 08 c2 20 48 a9 00
>3a0678	08 5b 68 28 c2 30 a5 18 85 00 e2 20 a5 1a 85 02
>3a0688	20 9a 19 a7 00 20 02 04 90 0c 20 ba 05 c2 20 a5
>3a0698	21 85 d5 20 9a 19 c2 20 a5 00 85 18 e2 20 a5 02
>3a06a8	85 1a 20 be 06 e2 20 20 2f 07 c9 00 f0 05 20 ae
>3a06b8	08 80 f4 2b 28 60 08 c2 20 a5 18 85 00 a5 1a 85
>3a06c8	02 a2 00 00 e2 20 a0 00 00 e0 00 00 f0 0d b7 00
>3a06d8	f0 53 c9 3a f0 04 c9 20 d0 33 c8 b7 00 f0 46 c9
>3a06e8	52 f0 10 c9 72 d0 26 b7 00 f0 3a c9 52 f0 04 c9
>3a06f8	72 d0 1a c8 b7 00 f0 2d c9 45 f0 04 c9 65 d0 0d
>3a0708	c8 b7 00 f0 20 c9 4d f0 0a c9 6d f0 06 e8 20 79
>3a0718	19 80 b3 a7 00 c9 3a d0 03 20 79 19 a9 03 85 1c
>3a0728	a9 8e 20 ae 08 28 60 08 0b 08 c2 20 48 a9 00 08
>3a0738	5b 68 28 e2 20 a9 7f 85 1c c2 10 20 63 08 a5 1c
>3a0748	d0 03 4c d2 07 c2 20 a5 18 85 00 e2 20 a5 1a 85
>3a0758	02 c2 20 64 04 64 06 e2 30 a0 00 b7 00 f0 da c9
>3a0768	8e f0 d6 c8 c4 1c 90 f3 c2 10 a7 00 c9 22 d0 05
>3a0778	20 ea 07 80 28 a5 1c c9 01 f0 19 c2 20 a5 00 c5
>3a0788	18 d0 08 e2 20 a5 02 c5 1a f0 09 e2 20 a7 04 20
>3a0798	d8 39 b0 09 e2 20 20 fa 07 c9 00 d0 11 c2 20 a5
>3a07a8	00 85 04 e2 20 a5 02 85 06 20 79 19 80 a9 c9 81
>3a07b8	d0 18 20 4e 06 c9 00 f0 14 89 80 10 0b 20 4f 09
>3a07c8	c9 30 f0 04 a9 af 80 02 a9 81 2b 28 60 08 c2 20
>3a07d8	48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 dc
>3a07e8	d2 08 08 e2 20 20 79 19 a7 00 f0 04 c9 22 d0 f5
>3a07f8	28 60 08 0b c2 30 da 5a 08 c2 20 48 a9 00 08 5b
>3a0808	68 28 a9 79 09 85 08 e2 20 a9 3a 85 0a a2 80 00
>3a0818	e2 20 a0 01 00 b7 08 f0 26 c5 1c d0 29 c2 30 a0
>3a0828	02 00 b7 08 85 0c e2 20 a9 3a 85 0e e2 10 a0 00
>3a0838	b7 00 20 5d 04 d7 0c d0 0d c8 c4 1c 90 f2 8a c2
>3a0848	10 7a fa 2b 28 60 c2 30 18 a5 08 69 08 00 85 08
>3a0858	e2 20 a5 0a 69 00 85 0a e8 80 b5 08 0b 8b 08 c2
>3a0868	20 48 a9 00 08 5b 68 28 c2 30 a9 79 09 85 08 a9
>3a0878	3a 00 85 0a 64 0c e2 20 a0 01 00 b7 08 f0 1d c5
>3a0888	1c b0 06 c5 0c 90 02 85 0c c2 20 18 a5 08 69 08
>3a0898	00 85 08 a5 0a 69 00 00 85 0a 80 da e2 20 a5 0c
>3a08a8	85 1c ab 2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b
>3a08b8	68 28 e2 20 87 00 c2 20 18 a5 00 69 01 00 85 08
>3a08c8	a5 02 69 00 00 85 0a e2 10 a4 1c 88 e2 20 b7 08
>3a08d8	87 08 f0 13 c2 20 18 a5 08 69 01 00 85 08 a5 0a
>3a08e8	69 00 00 85 0a 80 e5 2b 28 60 08 c2 30 29 7f 00
>3a08f8	0a 0a 0a 18 69 79 09 aa 28 60 08 8b 0b 08 c2 20
>3a0908	48 a9 00 08 5b 68 28 08 e2 20 48 a9 3a 48 ab 68
>3a0918	28 e2 20 c2 10 20 f2 08 bd 00 00 c2 20 29 0f 00
>3a0928	2b ab 28 60 08 8b 0b 08 c2 20 48 a9 00 08 5b 68
>3a0938	28 08 e2 20 48 a9 3a 48 ab 68 28 c2 30 20 f2 08
>3a0948	bd 04 00 2b ab 28 60 08 8b 0b 08 c2 20 48 a9 00
>3a0958	08 5b 68 28 08 e2 20 48 a9 3a 48 ab 68 28 e2 20
>3a0968	c2 10 20 f2 08 bd 00 00 c2 20 29 f0 00 2b ab 28
>3a0978	60 03 01 10 60 5e 1f 00 00 03 01 12 60 93 1f 00
>3a0988	00 02 01 14 60 a1 1f 00 00 02 01 16 60 ba 1f 00
>3a0998	00 02 03 18 60 cd 1f 00 00 00 01 1c 60 00 00 00
>3a09a8	00 04 01 1e 60 0f 20 00 00 04 01 20 60 45 20 00
>3a09b8	00 04 01 22 60 2a 20 00 00 05 03 24 60 fe 1f 00
>3a09c8	00 06 03 28 60 e0 1f 00 00 07 02 2c 60 ef 1f 00
>3a09d8	00 ff 01 2f 60 00 00 00 00 40 01 31 60 00 00 00
>3a09e8	00 20 03 33 60 a4 2c 00 00 20 05 37 60 3b 30 00
>3a09f8	00 20 03 3d 60 9a 2f 00 00 20 04 41 60 4e 2f 00
>3a0a08	00 20 03 46 60 45 2f 00 00 20 02 4a 60 f1 2e 00
>3a0a18	00 50 04 4d 60 00 00 00 00 50 04 52 60 00 00 00
>3a0a28	00 20 05 57 60 52 2e 00 00 20 06 5d 60 b7 2e 00
>3a0a38	00 20 03 64 60 bb 2c 00 00 50 02 68 60 00 00 00
>3a0a48	00 50 04 6b 60 00 00 00 00 20 04 70 60 9b 2d 00
>3a0a58	00 20 02 75 60 b5 2c 00 00 20 04 78 60 b8 2c 00
>3a0a68	00 50 05 7d 60 00 00 00 00 50 05 83 60 00 00 00
>3a0a78	00 20 04 89 60 b2 2c 00 00 20 03 8e 60 90 2f 00
>3a0a88	00 20 04 92 60 8f 2c 00 00 20 04 97 60 33 2c 00
>3a0a98	00 20 05 9c 60 dd 2b 00 00 20 05 a2 60 7e 2b 00
>3a0aa8	00 20 03 a8 60 7a 2b 00 00 20 04 ac 60 6f 2a 00
>3a0ab8	00 20 04 b1 60 6d 2b 00 00 20 07 b6 60 71 2b 00
>3a0ac8	00 20 03 be 60 d6 29 00 00 20 04 c2 60 4f 29 00
>3a0ad8	00 04 02 c7 60 98 20 00 00 04 02 ca 60 7b 20 00
>3a0ae8	00 04 02 cd 60 60 20 00 00 30 01 d0 60 b9 31 00
>3a0af8	00 30 03 d2 60 65 35 00 00 30 04 d6 60 ab 35 00
>3a0b08	00 30 05 db 60 28 36 00 00 30 05 e1 60 e4 35 00
>3a0b18	00 30 04 e7 60 5d 36 00 00 30 03 ec 60 a8 36 00
>3a0b28	00 30 03 f0 60 e3 36 00 00 30 03 f4 60 58 37 00
>3a0b38	00 30 03 f8 60 cd 37 00 00 30 03 fc 60 fd 37 00
>3a0b48	00 30 04 00 61 de 34 00 00 30 03 05 61 7d 34 00
>3a0b58	00 30 04 09 61 36 34 00 00 30 03 0e 61 ea 33 00
>3a0b68	00 30 05 12 61 3f 33 00 00 30 06 18 61 7c 32 00
>3a0b78	00 30 04 1f 61 db 31 00 00 10 03 24 61 81 38 00
>3a0b88	00 10 03 28 61 4c 38 00 00 10 04 2c 61 0e 39 00
>3a0b98	00 10 04 31 61 98 38 00 00 10 03 36 61 5e 39 00
>3a0ba8	00 10 07 3a 61 49 38 00 00 20 03 42 61 e5 28 00
>3a0bb8	00 20 05 46 61 2b 28 00 00 20 09 4c 61 f4 21 00
>3a0bc8	00 20 09 56 61 93 21 00 00 20 0a 60 61 bd 21 00
>3a0bd8	00 20 07 6b 61 25 21 00 00 30 08 73 61 ed 30 00
>3a0be8	00 20 07 7c 61 b7 20 00 00 30 08 84 61 53 31 00
>3a0bf8	00 20 08 8d 61 0b 23 00 00 20 08 96 61 71 22 00
>3a0c08	00 20 06 9f 61 4c 23 00 00 20 09 a6 61 0a 24 00
>3a0c18	00 20 04 b0 61 9d 25 00 00 20 04 b5 61 e3 25 00
>3a0c28	00 20 04 ba 61 49 26 00 00 20 06 bf 61 e5 26 00
>3a0c38	00 20 08 c6 61 68 27 00 00 20 0a cf 61 9c 27 00
>3a0c48	00 00 00 00 00 00 00 00 00 08 0b 08 c2 20 48 a9
>3a0c58	00 08 5b 68 28 c2 30 a9 ff ff 85 b8 e2 20 a9 35
>3a0c68	85 ba c2 20 64 b5 64 bb e2 20 64 b7 64 bd 2b 28
>3a0c78	60 5a 08 e2 20 85 e8 c2 10 86 8e c2 20 a5 0e 48
>3a0c88	a5 0c 48 a5 12 48 a5 10 48 20 29 0d b0 03 20 ad
>3a0c98	0c 20 b5 0e c2 20 68 85 10 68 85 12 68 85 0c 68
>3a0ca8	85 0e 28 7a 60 08 0b 08 c2 20 48 a9 00 08 5b 68
>3a0cb8	28 e2 20 a6 8e ca 86 0c e8 c2 30 38 a5 b8 e5 0c
>3a0cc8	85 be e2 20 a5 ba e9 00 85 c0 20 b5 0e e2 20 a5
>3a0cd8	e8 a0 00 00 97 c1 a9 00 a0 01 00 97 c1 a0 02 00
>3a0ce8	97 c1 c2 20 a9 00 00 97 c1 c2 20 18 a5 b8 69 01
>3a0cf8	00 a0 05 00 97 c1 e2 20 c8 c8 a5 ba 69 00 97 c1
>3a0d08	c2 20 a5 be 85 b5 e2 20 a5 c0 85 b7 c2 20 38 a5
>3a0d18	c1 e9 01 00 85 b8 e2 20 a5 c3 e9 00 85 ba 2b 28
>3a0d28	60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 c2
>3a0d38	20 a5 bb 85 c7 e2 20 a5 bd 85 c9 a5 c7 d0 17 e2
>3a0d48	20 a5 c9 d0 11 c2 20 a9 00 00 85 cd e2 20 a9 00
>3a0d58	85 cf 2b 28 18 60 c2 20 a0 05 00 b7 c7 85 ca e2
>3a0d68	20 c8 c8 b7 c7 85 cc c2 20 18 a5 c7 65 8e 85 0c
>3a0d78	e2 20 a5 c9 69 00 85 0e c2 20 18 a5 0c 69 08 00
>3a0d88	85 0c e2 20 a5 0e 69 00 85 0e c2 20 a5 0c c5 ca
>3a0d98	d0 28 e2 20 a5 0e c5 cc d0 20 c2 20 a5 cd d0 5d
>3a0da8	e2 20 a5 cf d0 57 c2 20 a0 02 00 b7 c7 85 bb e2
>3a0db8	20 c8 c8 b7 c7 85 bd 4c 66 0e c2 20 a5 0c 69 08
>3a0dc8	00 85 10 e2 20 a5 0e 69 00 85 12 e2 20 a5 c4 c5
>3a0dd8	10 b0 3e 90 08 c2 20 a5 c4 c5 10 b0 34 c2 20 a5
>3a0de8	c7 85 cd e2 20 a5 c9 85 cf c2 20 a0 02 00 b7 cd
>3a0df8	85 c7 e2 20 c8 c8 b7 cd 85 c9 4c 43 0d c2 20 a0
>3a0e08	02 00 b7 c7 97 cd e2 20 c8 c8 b7 c7 97 cd 4c 66
>3a0e18	0e c2 20 a0 05 00 b7 c7 97 0c e2 20 c8 c8 b7 c7
>3a0e28	97 0c c2 20 a0 02 00 b7 c7 97 0c e2 20 c8 c8 b7
>3a0e38	c7 97 0c c2 20 a5 cd d0 14 e2 20 a5 cd d0 0e c2
>3a0e48	20 a5 0c 85 bb e2 20 a5 0e 85 bd 80 11 c2 20 a0
>3a0e58	02 00 a5 0c 97 cd e2 20 c8 c8 a5 0e 97 cd c2 20
>3a0e68	a5 c7 85 c1 e2 20 a5 c9 85 c3 c2 20 a5 c1 85 b5
>3a0e78	e2 20 a5 c3 85 b7 c2 20 a0 05 00 a5 0c 97 c1 e2
>3a0e88	20 c8 c8 a5 0e 97 c1 c2 20 a0 02 00 a9 00 00 97
>3a0e98	c1 e2 20 c8 c8 97 c1 e2 20 a5 e8 e2 20 a0 00 00
>3a0ea8	97 c1 a0 01 00 a9 00 97 c1 2b 28 38 60 08 c2 20
>3a0eb8	38 a5 be e9 08 00 85 c1 e2 20 a5 c0 e9 00 85 c3
>3a0ec8	28 60 08 e2 20 a5 c3 f0 04 c9 17 b0 12 c2 20 a5
>3a0ed8	c1 f0 0c e2 20 a0 01 00 b7 c1 1a 97 c1 28 60 00
>3a0ee8	ea 08 e2 20 a5 c3 f0 04 c9 17 b0 17 c2 20 a5 c1
>3a0ef8	f0 11 e2 20 a0 01 00 b7 c1 3a 97 c1 d0 03 20 0d
>3a0f08	0f 28 60 00 ea 08 c2 20 a5 bb d0 21 e2 20 a5 bd
>3a0f18	d0 1b a5 c3 85 bd c2 20 a5 c1 85 bb a9 00 00 a0
>3a0f28	02 00 97 c1 c8 c8 e2 20 97 c1 4c f4 0f e2 20 a5
>3a0f38	bd c5 c3 90 28 c2 20 a5 bb c5 c1 90 20 c2 20 a5
>3a0f48	bb a0 02 00 97 c1 e2 20 c8 c8 a5 bd 97 c1 c2 20
>3a0f58	a5 c1 85 bb e2 20 a5 c3 85 bd 4c f4 0f c2 20 a5
>3a0f68	bb 85 08 e2 20 a5 bd 85 0a e2 20 a0 04 00 b7 08
>3a0f78	c5 c6 90 32 d0 0b c2 20 a0 02 00 b7 08 c5 c4 90
>3a0f88	25 c2 20 a0 02 00 b7 08 97 c1 e2 20 c8 c8 b7 08
>3a0f98	97 c1 c2 20 a5 c1 a0 02 00 97 08 e2 20 a5 c3 c8
>3a0fa8	c8 97 08 4c f4 0f c2 20 a0 02 00 b7 08 d0 08 e2
>3a0fb8	20 c8 c8 b7 08 f0 19 c2 20 a0 02 00 b7 08 85 0c
>3a0fc8	e2 20 c8 c8 b7 08 85 0a c2 20 a5 0c 85 08 80 99
>3a0fd8	c2 20 a5 c1 a0 02 00 97 08 e2 20 c8 c8 a5 c3 97
>3a0fe8	08 a9 00 97 c1 c2 20 a0 02 00 97 c1 20 f9 0f 28
>3a0ff8	60 08 c2 20 a5 bb 85 c1 e2 20 a5 bd 85 c3 c2 20
>3a1008	a5 c1 d0 09 e2 20 a5 c3 d0 03 4c 9c 10 c2 20 a0
>3a1018	02 00 b7 c1 85 0c e2 20 c8 c8 b7 c1 85 0e c2 20
>3a1028	a0 05 00 b7 c1 85 10 e2 20 c8 c8 b7 c1 85 12 c2
>3a1038	20 a5 0c c5 10 d0 08 e2 20 a5 0e c5 12 f0 1f c2
>3a1048	20 a0 02 00 b7 c1 85 0c e2 20 c8 c8 b7 c1 85 0e
>3a1058	c2 20 a5 0c 85 c1 e2 20 a5 0e 85 c3 80 a0 c2 20
>3a1068	a0 02 00 b7 c1 85 0c e2 20 c8 c8 b7 c1 85 0e c2
>3a1078	20 a0 02 00 b7 0c 97 c1 e2 20 c8 c8 b7 0c 97 c1
>3a1088	c2 20 a0 05 00 b7 0c 97 c1 e2 20 c8 c8 b7 0c 97
>3a1098	c1 4c 15 10 28 60 08 c2 10 e2 20 64 14 a5 e0 1a
>3a10a8	1a 85 15 e2 20 a5 e1 85 16 c5 ba 90 1f f0 08 c2
>3a10b8	20 a5 14 c5 b8 90 15 08 c2 20 48 a9 00 08 5b 68
>3a10c8	28 e2 20 a9 03 8f d1 08 00 dc d2 08 28 60 c9 00
>3a10d8	d0 05 c0 01 00 f0 05 09 30 97 14 c8 60 08 c2 30
>3a10e8	64 0c a5 23 10 1a 18 a5 21 49 ff ff 69 01 00 85
>3a10f8	21 a5 23 49 ff ff 69 00 00 85 23 a9 ff ff 85 0c
>3a1108	64 10 64 12 a2 1f 00 f8 06 21 26 23 a5 10 65 10
>3a1118	85 10 a5 12 65 12 85 12 ca 10 ed d8 e2 20 20 9e
>3a1128	10 a0 00 00 a5 0c f0 04 a9 2d 80 02 a9 20 97 14
>3a1138	c8 a2 03 00 b5 10 29 f0 4a 4a 4a 4a 20 d6 10 b5
>3a1148	10 29 0f 20 d6 10 ca 10 eb c0 01 00 d0 04 a9 30
>3a1158	87 14 a9 00 97 14 28 60 00 ea 08 e2 20 c2 10 a0
>3a1168	00 00 bd 00 00 f0 04 e8 c8 80 f7 28 60 08 0b 8b
>3a1178	08 c2 20 48 a9 00 08 5b 68 28 e2 20 c2 10 08 c2
>3a1188	20 48 e2 20 a5 23 48 ab c2 20 68 28 a6 21 20 62
>3a1198	11 84 0c 08 c2 20 48 e2 20 a5 29 48 ab c2 20 68
>3a11a8	28 a6 27 20 62 11 c2 20 98 38 65 0c aa e2 20 a9
>3a11b8	02 20 79 0c c2 20 a5 b5 85 08 e2 20 a5 b7 85 0a
>3a11c8	a0 00 00 08 c2 20 48 e2 20 a5 23 48 ab c2 20 68
>3a11d8	28 a6 21 bd 00 00 f0 06 97 08 e8 c8 80 f5 e2 20
>3a11e8	08 c2 20 48 e2 20 a5 29 48 ab c2 20 68 28 a6 27
>3a11f8	bd 00 00 97 08 f0 04 e8 c8 80 f5 c2 20 a5 08 85
>3a1208	21 e2 20 a5 0a 85 23 a9 02 85 25 ab 2b 28 60 08
>3a1218	0b 8b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 08 c2
>3a1228	20 48 e2 20 a5 23 48 ab c2 20 68 28 a6 21 20 62
>3a1238	11 98 aa e8 e2 20 a9 02 20 79 0c c2 20 a5 be 85
>3a1248	08 e2 20 a5 c0 85 0a a0 00 00 b7 21 97 08 f0 03
>3a1258	c8 80 f7 a5 08 85 21 a5 09 85 22 a5 0a 85 23 a9
>3a1268	00 85 24 ab 2b 28 60 08 e2 20 c2 10 a0 00 00 b7
>3a1278	21 f0 05 c8 80 f9 84 91 c2 30 c4 27 90 13 f0 11
>3a1288	a5 8e 30 0d f0 0b c4 8e b0 12 a5 27 d0 0e 4c f0
>3a1298	12 20 9e 10 e2 20 a9 00 87 14 80 39 20 9e 10 c2
>3a12a8	30 18 a5 21 65 27 85 21 a5 23 69 00 00 85 23 a0
>3a12b8	00 00 e2 20 a7 21 97 14 f0 1b c2 20 18 a5 21 69
>3a12c8	01 00 85 21 a5 23 69 00 00 85 23 c8 c4 8e d0 e2
>3a12d8	a9 00 00 97 14 c2 20 a5 14 85 21 a5 16 85 23 e2
>3a12e8	20 a9 02 85 25 20 17 12 28 60 48 5a 0b 08 08 c2
>3a12f8	20 48 a9 00 08 5b 68 28 c2 30 a9 00 00 85 00 85
>3a1308	18 a9 01 00 85 02 85 1a a5 36 30 20 a0 02 00 b7
>3a1318	18 f0 0f c5 54 90 10 c5 58 f0 02 b0 05 20 49 13
>3a1328	80 e6 28 2b 7a 68 60 20 42 1a 80 dc 08 c2 20 48
>3a1338	a9 00 08 5b 68 28 e2 20 a9 01 8f d1 08 00 dc d2
>3a1348	08 08 c2 30 85 21 64 23 20 e5 10 a5 14 1a 85 21
>3a1358	a5 16 85 23 20 9d 30 18 a5 18 69 04 00 85 00 a5
>3a1368	1a 69 00 00 85 02 e2 20 a9 20 20 18 00 c2 20 20
>3a1378	88 13 90 fb e2 20 a9 0d 20 18 00 20 42 1a 28 60
>3a1388	08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20
>3a1398	48 a9 00 48 ab 68 28 e2 20 c2 10 a7 00 f0 3a 30
>3a13a8	05 20 18 00 80 29 c2 20 29 7f 00 0a 0a 0a 18 69
>3a13b8	79 09 85 08 a9 3a 00 69 00 00 85 0a 08 e2 20 48
>3a13c8	a9 3a 48 ab 68 28 a0 02 00 b7 08 aa 20 96 03 c2
>3a13d8	20 20 79 19 ab 2b 28 18 60 ab 2b 28 38 60 08 c2
>3a13e8	20 a9 ff 6f 85 1d a9 ff 7f 85 1f a9 ff ff 85 21
>3a13f8	85 23 85 27 85 29 e2 20 85 25 85 2b 28 60 08 0b
>3a1408	8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9
>3a1418	00 48 ab 68 28 c2 30 5a a4 1d bd 00 00 99 00 00
>3a1428	bd 02 00 99 02 00 e2 20 bd 04 00 99 04 00 c2 20
>3a1438	38 98 e9 05 00 85 1d 7a ab 2b 28 60 08 0b 8b 08
>3a1448	c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48
>3a1458	ab 68 28 c2 30 5a 18 a5 1d 69 05 00 85 1d a8 b9
>3a1468	00 00 9d 00 00 b9 02 00 9d 02 00 e2 20 b9 04 00
>3a1478	9d 04 00 bd 00 00 7a ab 2b 28 60 08 0b 8b 08 c2
>3a1488	20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab
>3a1498	68 28 e2 20 c2 10 5a a4 1f 99 00 00 88 84 1f 7a
>3a14a8	ab 2b 28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68
>3a14b8	28 08 e2 20 48 a9 00 48 ab 68 28 e2 20 c2 10 5a
>3a14c8	a4 1f c8 84 1f b9 00 00 c2 20 29 ff 00 7a ab 2b
>3a14d8	28 60 08 e2 20 a9 01 20 83 14 28 60 5a 08 8b 08
>3a14e8	e2 20 48 a9 00 48 ab 68 28 e2 20 a4 1f b9 01 00
>3a14f8	c9 01 d0 08 c2 20 e6 1f ab 28 7a 60 08 c2 20 48
>3a1508	a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 dc d2
>3a1518	08 08 0b 8b c2 20 48 08 c2 20 48 a9 00 08 5b 68
>3a1528	28 08 e2 20 48 a9 00 48 ab 68 28 e2 20 c2 10 a4
>3a1538	1f c0 ff 7f f0 11 20 02 09 85 0c b9 01 00 20 02
>3a1548	09 c5 0c f0 02 90 08 c2 20 68 ab 2b 28 18 60 c2
>3a1558	20 68 ab 2b 28 38 60 4c ba 05 08 e2 20 a9 00 8f
>3a1568	00 4d 00 a2 01 00 20 e4 16 20 3e 05 c2 20 a5 21
>3a1578	9f 00 4d 00 e2 20 af 00 4d 00 1a 30 34 8f 00 4d
>3a1588	00 e8 e8 20 9a 19 e2 20 a7 00 c9 8d f0 09 c9 2c
>3a1598	d0 0a 20 79 19 80 cf 20 79 19 28 60 08 c2 20 48
>3a15a8	a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 dc d2
>3a15b8	08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f
>3a15c8	d1 08 00 dc d2 08 08 20 38 3c 90 23 e2 20 a5 e8
>3a15d8	29 80 d0 06 20 ac 3a 4c f5 15 e2 20 a9 8c 20 72
>3a15e8	1a 20 da 14 20 62 15 20 f7 3e 20 e4 14 28 60 08
>3a15f8	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08
>3a1608	00 dc d2 08 08 0b 08 c2 20 48 a9 00 08 5b 68 28
>3a1618	e2 20 c2 10 20 79 19 a0 00 00 b7 00 f0 24 c9 22
>3a1628	f0 03 c8 80 f5 84 0c e2 20 a9 02 a6 0c e8 20 79
>3a1638	0c a0 00 00 c4 0c f0 1f a7 00 97 be c8 20 79 19
>3a1648	80 f2 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>3a1658	8f d1 08 00 dc d2 08 a9 00 97 be c2 20 a5 be 85
>3a1668	21 e2 20 a5 c0 85 23 a9 02 85 25 20 79 19 2b 28
>3a1678	60 08 e2 20 a7 00 c2 20 29 ff 00 20 2c 09 85 2d
>3a1688	20 da 14 08 e2 20 48 a9 00 48 ab 68 28 20 9d 16
>3a1698	20 e4 14 28 60 20 79 19 6c 2d 08 08 0b 8b c2 20
>3a16a8	48 08 c2 20 48 a9 00 08 5b 68 28 c2 30 a2 27 08
>3a16b8	20 44 14 a2 21 08 20 44 14 20 ac 14 20 2c 09 85
>3a16c8	2d 08 e2 20 48 a9 00 48 ab 68 28 20 e1 16 a2 21
>3a16d8	08 20 06 14 68 ab 2b 28 60 6c 2d 08 08 08 c2 20
>3a16e8	48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68
>3a16f8	28 c2 10 da e2 20 a7 00 d0 03 4c a7 17 30 33 c9
>3a1708	20 d0 03 4c a1 17 c9 3a b0 04 c9 30 b0 56 c9 26
>3a1718	f0 52 c9 22 d0 03 4c ba 17 c9 5b b0 07 c9 41 90
>3a1728	03 4c c6 17 c9 7b b0 07 c9 61 90 03 4c c6 17 4c
>3a1738	a7 17 c9 8c f0 40 c9 8d f0 41 20 4f 09 c9 30 d0
>3a1748	0c 20 79 16 a2 21 08 20 06 14 4c fc 16 c9 00 d0
>3a1758	4e a7 00 a6 1f e0 ff 7f f0 05 20 19 15 b0 12 20
>3a1768	83 14 80 35 c2 20 20 5f 15 a2 21 08 20 06 14 80
>3a1778	83 20 a3 16 80 dd 20 83 14 80 1e e2 20 a4 1f c0
>3a1788	ff 7f f0 46 a4 1f b9 01 00 c9 01 f0 3d c9 8c f0
>3a1798	05 20 a3 16 80 ee 20 ac 14 20 79 19 4c fc 16 a6
>3a17a8	1f e0 ff 7f b0 24 bd 01 00 c9 01 f0 1d 20 a3 16
>3a17b8	80 ed 20 0c 16 a2 21 08 20 06 14 4c fc 16 20 ce
>3a17c8	15 a2 21 08 20 06 14 4c fc 16 a2 21 08 20 44 14
>3a17d8	fa 28 60 08 0b 8b 08 e2 20 48 a9 00 48 ab 68 28
>3a17e8	08 c2 20 48 a9 00 08 5b 68 28 c2 30 a9 fd 5f 85
>3a17f8	31 ab 2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68
>3a1808	28 c2 30 92 31 c6 31 c6 31 2b 28 60 08 c2 30 29
>3a1818	ff 00 20 fd 17 28 60 08 0b 08 c2 20 48 a9 00 08
>3a1828	5b 68 28 c2 30 e6 31 e6 31 b2 31 2b 28 60 e2 20
>3a1838	c2 10 20 52 03 af d1 08 00 0a c2 20 29 ff 00 a8
>3a1848	08 e2 20 48 a9 3a 48 ab 68 28 be 88 18 20 96 03
>3a1858	c2 20 a5 d5 f0 27 a2 9e 18 20 96 03 08 e2 20 48
>3a1868	a9 00 48 ab 68 28 c2 20 af d5 08 00 8f 21 08 00
>3a1878	a9 00 00 8f 23 08 00 20 bd 30 20 52 03 4c 1d 1f
>3a1888	a2 18 a5 18 ab 18 b8 18 c6 18 d4 18 e7 18 fd 18
>3a1898	0d 19 1c 19 29 19 20 61 74 00 4f 4b 00 42 72 65
>3a18a8	61 6b 00 53 79 6e 74 61 78 20 65 72 72 6f 72 00
>3a18b8	4f 75 74 20 6f 66 20 6d 65 6d 6f 72 79 00 54 79
>3a18c8	70 65 20 6d 69 73 6d 61 74 63 68 00 56 61 72 69
>3a18d8	61 62 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 00 4c
>3a18e8	69 6e 65 20 6e 75 6d 62 65 72 20 6e 6f 74 20 66
>3a18f8	6f 75 6e 64 00 53 74 61 63 6b 20 75 6e 64 65 72
>3a1908	66 6c 6f 77 00 53 74 61 63 6b 20 6f 76 65 72 66
>3a1918	6c 6f 77 00 4f 75 74 20 6f 66 20 72 61 6e 67 65
>3a1928	00 49 6c 6c 65 67 61 6c 20 61 72 67 75 6d 65 6e
>3a1938	74 00 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a1948	a9 00 85 d0 2b 28 60 0b 08 08 c2 20 48 a9 00 08
>3a1958	5b 68 28 08 c2 20 a9 36 18 8f d2 08 00 e2 20 a9
>3a1968	3a 8f d4 08 00 28 20 90 2f 20 71 2b 64 2f 28 2b
>3a1978	60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 20 18
>3a1988	a5 00 69 01 00 85 00 e2 20 a5 02 69 00 85 02 2b
>3a1998	28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a19a8	a7 00 f0 0f c9 20 f0 06 c9 09 f0 02 80 05 20 79
>3a19b8	19 80 ed 2b 28 60 08 e2 20 a7 00 f0 09 c9 3a f0
>3a19c8	05 20 79 19 80 f3 28 60 08 e2 20 64 34 a7 00 f0
>3a19d8	19 c5 35 f0 2c c9 98 f0 1e c9 9c f0 1a c9 9b f0
>3a19e8	1a c9 9d f0 16 20 79 19 80 e3 20 42 1a c2 20 a5
>3a19f8	d5 f0 1d e2 20 80 d6 e6 34 80 ea c6 34 30 26 80
>3a1a08	e4 a5 33 30 06 a5 34 f0 02 80 da 20 79 19 28 60
>3a1a18	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1
>3a1a28	08 00 dc d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a1a38	20 a9 02 8f d1 08 00 dc d2 08 08 c2 30 a0 00 00
>3a1a48	b7 18 85 0c 18 a5 18 65 0c 85 18 a5 1a 69 00 00
>3a1a58	85 1a a0 02 00 b7 18 85 d5 18 a5 18 69 04 00 85
>3a1a68	00 a5 1a 69 00 00 85 02 28 60 08 e2 20 48 20 9a
>3a1a78	19 68 e2 20 c7 00 d0 08 20 79 19 20 9a 19 28 60
>3a1a88	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1
>3a1a98	08 00 dc d2 08 08 e2 20 20 9a 19 e2 20 a7 00 f0
>3a1aa8	10 c9 3a f0 0c c5 35 f0 05 20 79 19 80 ef 28 38
>3a1ab8	60 28 18 60 5a 08 e2 20 a0 00 00 b7 00 f0 0d c9
>3a1ac8	3a f0 07 c9 20 d0 05 c8 80 f1 a9 00 28 7a 60 08
>3a1ad8	0b 8b 08 c2 20 48 a9 00 08 5b 68 28 20 e6 13 e2
>3a1ae8	20 a9 00 85 da a5 36 30 41 a7 00 c9 3a d0 03 20
>3a1af8	79 19 20 9a 19 a7 00 d0 03 4c 72 1b 20 e9 03 b0
>3a1b08	3e a7 00 10 10 20 4f 09 85 0c c9 20 d0 03 4c 60
>3a1b18	1b a5 d0 f0 3d 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a1b28	20 a9 02 8f d1 08 00 dc d2 08 08 c2 20 48 a9 00
>3a1b38	08 5b 68 28 e2 20 a9 01 8f d1 08 00 dc d2 08 20
>3a1b48	9a 2f 4c 72 1b 08 e2 20 48 a9 00 48 ab 68 28 6c
>3a1b58	2d 08 a5 0c c9 10 d0 bd a7 00 20 2c 09 c2 20 85
>3a1b68	2d 20 e6 13 20 79 19 20 4d 1b ab 2b 28 60 08 58
>3a1b78	20 3a 19 20 db 17 e2 20 64 36 c2 20 a5 18 85 00
>3a1b88	a5 1a 85 02 4c b3 1b 08 c2 20 a0 02 00 b7 18 85
>3a1b98	d5 e2 20 a5 da c9 03 f0 12 c2 20 18 a5 18 69 04
>3a1ba8	00 85 00 e2 20 a5 1a 69 00 85 02 c2 20 20 d7 1a
>3a1bb8	e2 20 a5 da c9 03 f0 f3 c9 00 d0 27 e2 20 20 9a
>3a1bc8	19 a7 00 f0 1e c9 3a f0 15 08 c2 20 48 a9 00 08
>3a1bd8	5b 68 28 e2 20 a9 02 8f d1 08 00 dc d2 08 20 79
>3a1be8	19 80 c8 28 60 08 58 e2 20 a9 80 85 d0 64 36 20
>3a1bf8	db 17 c2 30 64 2f a0 02 00 b7 18 f0 29 20 8f 1b
>3a1c08	e2 20 a5 da c9 01 f0 1e c9 02 f0 ea c9 03 f0 e6
>3a1c18	c2 20 a0 00 00 18 a5 18 77 18 85 18 e2 20 a5 1a
>3a1c28	69 00 85 1a 80 d0 e2 20 a9 00 85 d0 28 60 08 c2
>3a1c38	30 c2 20 a9 00 00 85 08 a9 01 00 85 0a c2 20 a0
>3a1c48	02 00 b7 08 f0 31 c5 21 f0 1e b0 2b c2 20 a0 00
>3a1c58	00 18 a5 08 77 08 85 0c e2 20 a5 0a 69 00 85 0a
>3a1c68	c2 20 a5 0c 85 08 80 d7 c2 20 a5 08 85 18 e2 20
>3a1c78	a5 0a 85 1a 28 38 60 28 18 60 08 e2 20 a7 0c 87
>3a1c88	08 c2 20 a5 0c c5 00 d0 08 e2 20 a5 0e c5 02 f0
>3a1c98	26 c2 20 18 a5 0c 69 01 00 85 0c e2 20 a5 0e 69
>3a1ca8	00 85 0e c2 20 18 a5 08 69 01 00 85 08 e2 20 a5
>3a1cb8	0a 69 00 85 0a 80 c4 28 60 08 e2 20 a7 0c 87 08
>3a1cc8	c2 20 a5 0c c5 00 d0 06 a5 0e c5 02 f0 26 c2 20
>3a1cd8	38 a5 0c e9 01 00 85 0c e2 20 a5 0e e9 00 85 0e
>3a1ce8	c2 20 38 a5 08 e9 01 00 85 08 e2 20 a5 0a e9 00
>3a1cf8	85 0a 80 c6 28 60 08 a0 00 00 c2 20 18 a5 08 77
>3a1d08	08 85 0c e2 20 a5 0a 69 00 85 0e c2 20 18 a5 d7
>3a1d18	69 04 00 85 00 e2 20 a5 d9 69 00 85 02 a0 00 00
>3a1d28	c2 20 38 a5 d7 f7 08 85 d7 e2 20 a5 d9 e9 00 85
>3a1d38	d9 20 82 1c 20 90 2f 28 60 08 08 c2 20 48 a9 00
>3a1d48	08 5b 68 28 c2 30 a0 02 00 97 d7 18 a5 d7 69 04
>3a1d58	00 85 08 e2 20 a5 d9 69 00 85 0a e2 20 a0 00 00
>3a1d68	b7 18 97 08 f0 03 c8 80 f7 c2 20 98 18 69 05 00
>3a1d78	85 0c c2 20 a0 00 00 a5 0c 97 d7 c2 20 18 a5 d7
>3a1d88	65 0c 85 0c e2 20 a5 d9 69 00 85 d9 c2 20 a5 0c
>3a1d98	85 d7 c2 20 a0 00 00 a9 00 00 97 d7 c8 c0 05 00
>3a1da8	d0 f8 20 90 2f 28 60 0b 08 08 c2 20 48 a9 00 08
>3a1db8	5b 68 28 c2 30 a9 00 00 85 08 a9 01 00 85 0a a0
>3a1dc8	02 00 b7 08 f0 1d c5 d5 f0 25 b0 1d a0 00 00 18
>3a1dd8	a5 08 77 08 85 0c a5 0a 69 00 00 85 0a a5 0c 85
>3a1de8	08 80 dc a9 00 00 28 2b 60 a9 01 00 28 2b 60 a9
>3a1df8	02 00 28 2b 60 08 c2 30 a9 05 00 85 10 a0 00 00
>3a1e08	e2 20 b7 18 f0 07 c2 20 e6 10 c8 80 f3 c2 20 a5
>3a1e18	08 85 00 a5 0a 85 02 18 a5 d7 69 04 00 85 0c a5
>3a1e28	d9 69 00 00 85 0e 18 a5 d7 65 10 85 d7 a5 d9 69
>3a1e38	00 00 85 d9 18 a5 d7 69 04 00 85 08 a5 d9 69 00
>3a1e48	00 85 0a 20 c1 1c c2 20 a5 10 a0 00 00 97 00 a5
>3a1e58	d5 a0 02 00 97 00 18 a5 00 69 04 00 85 00 a5 02
>3a1e68	69 00 00 85 02 a0 00 00 e2 20 b7 18 97 00 f0 03
>3a1e78	c8 80 f7 20 90 2f 28 60 08 c2 30 85 d5 20 af 1d
>3a1e88	c9 00 00 f0 2c c9 01 00 f0 22 c2 20 a5 08 48 a5
>3a1e98	0a 48 20 fe 1c 68 85 0a 68 85 08 a5 18 85 00 a5
>3a1ea8	1a 85 02 20 9a 19 e2 20 a7 00 f0 0a 20 fd 1d 80
>3a1eb8	05 a5 d5 20 41 1d 28 60 8b 08 08 e2 20 48 a9 3a
>3a1ec8	48 ab 68 28 a2 da 61 20 96 03 28 ab 60 08 e2 30
>3a1ed8	a9 01 20 1c 00 20 35 01 f0 06 c9 0d f0 02 80 f5
>3a1ee8	28 60 0b 08 08 c2 20 48 a9 00 08 5b 68 28 c2 30
>3a1ef8	64 d5 a9 00 4f 85 18 a9 00 00 85 1a 20 70 06 c2
>3a1f08	20 a5 d5 d0 05 20 76 1b 80 07 20 80 1e 28 2b 38
>3a1f18	60 28 2b 18 60 c2 30 a2 ff fe 9a 20 c0 1e 20 08
>3a1f28	00 20 0c 00 a9 00 00 20 1c 00 20 ea 1e b0 ef 80
>3a1f38	ea e2 20 a5 25 c5 2b d0 06 c2 20 29 ff 00 60 c2
>3a1f48	20 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f
>3a1f58	d1 08 00 dc d2 08 20 39 1f c2 20 c9 00 00 f0 1d
>3a1f68	c9 02 00 d0 03 4c 75 11 08 c2 20 48 a9 00 08 5b
>3a1f78	68 28 e2 20 a9 04 8f d1 08 00 dc d2 08 18 a5 21
>3a1f88	65 27 85 21 a5 23 65 29 85 23 60 38 a5 21 e5 27
>3a1f98	85 21 a5 23 e5 29 85 23 60 a5 21 8f 08 01 00 a5
>3a1fa8	27 8f 0a 01 00 af 0c 01 00 85 21 af 0e 01 00 85
>3a1fb8	23 60 a5 21 8f 12 01 00 a5 27 8f 10 01 00 af 14
>3a1fc8	01 00 85 21 60 a5 21 8f 12 01 00 a5 27 8f 10 01
>3a1fd8	00 af 16 01 00 85 21 60 c2 20 a5 21 25 27 85 21
>3a1fe8	a5 23 25 29 85 23 60 c2 20 a5 21 05 27 85 21 a5
>3a1ff8	23 05 29 85 23 60 c2 20 a5 21 49 ff ff 85 21 a5
>3a2008	23 49 ff ff 85 23 60 c2 20 a5 23 c5 29 90 0b a5
>3a2018	21 c5 27 90 05 64 21 64 23 60 a9 ff ff 85 21 85
>3a2028	23 60 c2 20 a5 29 c5 23 90 0b a5 27 c5 21 90 05
>3a2038	64 21 64 23 60 a9 ff ff 85 21 85 23 60 c2 20 a5
>3a2048	29 c5 23 d0 0e a5 27 c5 21 d0 08 a9 ff ff 85 21
>3a2058	85 23 60 64 21 64 23 60 c2 20 a5 29 c5 23 d0 0e
>3a2068	a5 27 c5 21 d0 08 a9 ff ff 85 21 85 23 60 64 21
>3a2078	64 23 60 c2 20 a5 23 c5 29 90 10 d0 06 a5 21 c5
>3a2088	27 90 08 a9 ff ff 85 21 85 23 60 64 21 64 23 60
>3a2098	c2 20 a5 23 c5 29 90 0f f0 05 64 21 64 23 60 a5
>3a20a8	21 c5 27 f0 02 b0 f3 a9 ff ff 85 21 85 23 60 08
>3a20b8	e2 20 20 e4 16 20 79 05 20 b5 04 a5 21 0a 0a 0a
>3a20c8	0a 05 27 85 0c a9 2c 20 72 1a 20 e4 16 20 79 05
>3a20d8	20 b5 04 a5 21 0a 0a 0a 0a 05 27 85 0d a9 2c 20
>3a20e8	72 1a 20 e4 16 20 79 05 20 b5 04 a5 21 0a 0a 0a
>3a20f8	0a 05 27 85 0e af 0e 08 af 09 08 8f 0e 08 af a5
>3a2108	0c 8f 04 08 af a5 0d 8f 02 08 af a5 0e 8f 00 08
>3a2118	af af 0e 08 af 29 f7 8f 0e 08 af 28 60 08 e2 20
>3a2128	20 e4 16 20 79 05 20 b5 04 a5 21 0a 0a 0a 0a 05
>3a2138	27 85 0c a9 2c 20 72 1a 20 e4 16 20 79 05 20 b5
>3a2148	04 a5 21 0a 0a 0a 0a 05 27 85 0d a9 2c 20 72 1a
>3a2158	20 e4 16 20 79 05 20 b5 04 a5 21 0a 0a 0a 0a 05
>3a2168	27 85 0e af 0e 08 af 09 08 8f 0e 08 af a5 0c 8f
>3a2178	06 08 af a5 0d 8f 09 08 af a5 0e 8f 0a 08 af af
>3a2188	0e 08 af 29 f7 8f 0e 08 af 28 60 08 20 e4 16 20
>3a2198	79 05 e2 20 a5 21 29 0f 0a 0a 0a 0a 85 0c a9 2c
>3a21a8	20 72 1a 20 e4 16 20 79 05 a5 21 29 0f 05 0c 8f
>3a21b8	1e 00 00 28 60 08 e2 20 20 e4 16 20 79 05 a5 21
>3a21c8	48 a9 2c 20 72 1a 20 e4 16 20 79 05 a5 21 48 a9
>3a21d8	2c 20 72 1a 20 e4 16 20 79 05 a5 21 8f 08 00 af
>3a21e8	68 8f 09 00 af 68 8f 0a 00 af 28 60 08 e2 20 20
>3a21f8	e4 16 20 fe 04 a5 21 f0 1e a9 01 8f 04 00 af a9
>3a2208	20 8f 08 00 af 8f 09 00 af a9 48 8f 0f 00 00 a9
>3a2218	34 8f 13 00 00 80 12 a9 00 8f 04 00 af a9 50 8f
>3a2228	0f 00 00 a9 3c 8f 13 00 00 a9 2c 85 35 20 9d 1a
>3a2238	90 35 20 79 19 20 e4 16 20 79 05 a5 21 48 a9 2c
>3a2248	20 72 1a 20 e4 16 20 79 05 a5 21 48 a9 2c 20 72
>3a2258	1a 20 e4 16 20 79 05 a5 21 8f 05 00 af 68 8f 06
>3a2268	00 af 68 8f 07 00 af 28 60 08 c2 20 20 e4 16 20
>3a2278	79 05 a9 af 00 85 9f a5 21 c9 0a 00 b0 5c 0a aa
>3a2288	bf f7 22 3a 85 9d a9 2c 00 20 72 1a 20 e4 16 20
>3a2298	79 05 a5 21 0a 0a 18 65 9d 85 9d a9 2c 00 20 72
>3a22a8	1a 20 e4 16 20 79 05 a0 02 00 a5 21 e2 20 97 9d
>3a22b8	a9 2c 20 72 1a 20 e4 16 20 79 05 a0 01 00 a5 21
>3a22c8	e2 20 97 9d a9 2c 20 72 1a 20 e4 16 20 79 05 a0
>3a22d8	00 00 a5 21 e2 20 97 9d 28 60 08 c2 20 48 a9 00
>3a22e8	08 5b 68 28 e2 20 a9 0a 8f d1 08 00 dc d2 08 00
>3a22f8	20 00 24 00 28 00 2c 00 30 00 34 00 38 00 3c 40
>3a2308	1f 80 1f 08 20 e4 16 20 79 05 a5 21 8f 00 00 af
>3a2318	c2 20 a9 80 02 8f 20 71 3a a9 e0 01 8f 22 71 3a
>3a2328	af 20 71 3a 8f 08 01 00 af 22 71 3a 8f 0a 01 00
>3a2338	af 0c 01 00 8f 24 71 3a e2 20 af 0e 01 00 8f 26
>3a2348	71 3a 28 60 08 c2 20 20 e4 16 20 79 05 c2 20 a5
>3a2358	21 85 54 a9 2c 00 20 72 1a 20 e4 16 20 79 05 e2
>3a2368	20 a5 54 d0 05 a5 21 0a 80 04 a5 21 38 2a 8f 40
>3a2378	01 af c2 20 a9 2c 00 85 35 20 9d 1a b0 18 c2 20
>3a2388	08 c2 20 a9 00 00 85 21 a9 b0 00 85 23 e2 20 a9
>3a2398	00 85 25 28 80 08 c2 20 20 79 19 20 e4 16 e2 20
>3a23a8	38 a5 23 8f 1a 71 3a e9 b0 30 42 8f 43 01 af 8f
>3a23b8	1e 71 3a a5 21 8f 18 71 3a 8f 41 01 af 8f 1c 71
>3a23c8	3a a5 22 8f 42 01 af 8f 1d 71 3a 8f 19 71 3a a9
>3a23d8	00 8f 1f 71 3a 8f 1b 71 3a c2 20 af 20 71 3a 8f
>3a23e8	44 01 af af 22 71 3a 8f 46 01 af 28 60 08 c2 20
>3a23f8	48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d1 08 00 dc
>3a2408	d2 08 08 c2 20 af 1c 71 3a 8f 05 04 af af 24 71
>3a2418	3a 8f 08 04 af e2 20 af 1e 71 3a 8f 07 04 af af
>3a2428	26 71 3a 8f 0a 04 af a9 00 8f 01 04 af a9 85 8f
>3a2438	00 04 af af 01 04 af 30 fa a9 00 8f 00 04 af 28
>3a2448	60 08 c2 20 a5 5c 8f 08 01 00 af 20 71 3a 8f 0a
>3a2458	01 00 18 af 0c 01 00 65 58 85 0c af 0e 01 00 69
>3a2468	00 00 85 0e 18 a5 0c 6f 18 71 3a 85 9d a5 0e 6f
>3a2478	1a 71 3a 85 9f e2 20 a5 54 87 9d 28 60 c2 20 a9
>3a2488	01 00 85 db 38 a5 60 e5 58 85 68 10 0b 49 ff ff
>3a2498	1a 85 68 a9 ff ff 85 db a9 01 00 85 dd 38 a5 64
>3a24a8	e5 5c 85 6c 10 0b 49 ff ff 1a 85 6c a9 ff ff 85
>3a24b8	dd a5 6c c5 68 b0 04 a5 68 80 06 a5 6c 49 ff ff
>3a24c8	1a 48 0a 68 6a 85 70 20 49 24 a5 58 c5 60 d0 06
>3a24d8	a5 5c c5 64 f0 36 a5 70 85 74 a5 68 49 ff ff 1a
>3a24e8	c5 74 10 10 f0 0e 38 a5 70 e5 6c 85 70 18 a5 58
>3a24f8	65 db 85 58 a5 74 c5 6c 10 cd f0 cb 18 a5 70 65
>3a2508	68 85 70 18 a5 5c 65 dd 85 5c 80 bb 60 08 a9 00
>3a2518	00 8f 00 04 af c2 20 a5 5c 8f 08 01 00 af 20 71
>3a2528	3a 8f 0a 01 00 18 af 0c 01 00 65 58 85 0c e2 20
>3a2538	af 0e 01 00 69 00 85 0e c2 20 18 af 1c 71 3a 65
>3a2548	0c 8f 05 04 af e2 20 af 1e 71 3a 65 0e 8f 07 04
>3a2558	af c2 20 38 a5 60 e5 58 85 0c 8f 08 04 af 38 af
>3a2568	20 71 3a 8f 0e 04 af 38 a5 64 e5 5c 8f 0a 04 af
>3a2578	a9 01 00 8f 0c 04 af e2 20 af 54 08 00 8f 01 04
>3a2588	af a9 87 8f 00 04 af af 01 04 af 30 fa a9 00 8f
>3a2598	00 04 af 28 60 08 08 c2 20 48 a9 00 08 5b 68 28
>3a25a8	08 e2 20 48 a9 00 48 ab 68 28 c2 30 20 e4 16 20
>3a25b8	fe 04 a5 21 85 54 a9 2c 00 20 72 1a 20 e4 16 20
>3a25c8	fe 04 a5 21 85 58 a9 2c 00 20 72 1a 20 e4 16 20
>3a25d8	79 05 a5 21 85 5c 20 49 24 28 60 08 08 c2 20 48
>3a25e8	a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28
>3a25f8	c2 30 20 e4 16 20 fe 04 a5 21 85 58 a9 2c 00 20
>3a2608	72 1a 20 e4 16 20 fe 04 a5 21 85 5c a9 2c 00 20
>3a2618	72 1a 20 e4 16 20 fe 04 a5 21 85 60 a9 2c 00 20
>3a2628	72 1a 20 e4 16 20 fe 04 a5 21 85 64 a9 2c 00 20
>3a2638	72 1a 20 e4 16 20 79 05 a5 21 85 54 20 85 24 28
>3a2648	60 08 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48
>3a2658	a9 00 48 ab 68 28 c2 30 20 e4 16 20 fe 04 a5 21
>3a2668	85 58 a9 2c 00 20 72 1a 20 e4 16 20 fe 04 a5 21
>3a2678	85 5c a9 2c 00 20 72 1a 20 e4 16 20 fe 04 a5 21
>3a2688	85 60 a9 2c 00 20 72 1a 20 e4 16 20 fe 04 a5 21
>3a2698	85 64 a9 2c 00 20 72 1a 20 e4 16 20 79 05 a5 21
>3a26a8	85 54 20 15 25 28 60 08 e2 20 a5 21 c9 12 b0 18
>3a26b8	0a 0a 0a 18 69 00 85 9d a9 02 69 00 85 9e a9 af
>3a26c8	69 00 85 9f 64 a0 28 60 08 c2 20 48 a9 00 08 5b
>3a26d8	68 28 e2 20 a9 09 8f d1 08 00 dc d2 08 08 e2 20
>3a26e8	20 e4 16 20 79 05 20 af 26 a5 21 8f 26 71 3a a9
>3a26f8	2c 20 72 1a 20 e4 16 20 79 05 a5 21 c9 08 b0 4b
>3a2708	48 a9 2c 20 72 1a 20 e4 16 20 fe 04 c2 20 38 a5
>3a2718	21 e9 00 00 85 21 a5 23 e9 b0 00 85 23 30 2c c2
>3a2728	20 a5 21 a0 01 00 97 9d e2 20 a5 23 c8 c8 97 9d
>3a2738	af 26 71 3a aa bf 28 71 3a 29 f1 85 0c 68 0a 29
>3a2748	0e 05 0c 87 9d 9f 28 71 3a 28 60 08 c2 20 48 a9
>3a2758	00 08 5b 68 28 e2 20 a9 09 8f d1 08 00 dc d2 08
>3a2768	08 c2 20 20 e4 16 20 79 05 20 af 26 a9 2c 00 20
>3a2778	72 1a 20 e4 16 20 fe 04 a5 21 a0 04 00 97 9d a9
>3a2788	2c 00 20 72 1a 20 e4 16 20 fe 04 a5 21 a0 06 00
>3a2798	97 9d 28 60 08 c2 20 20 e4 16 20 79 05 20 af 26
>3a27a8	a5 21 8f 26 71 3a a9 2c 00 20 72 1a 20 e4 16 20
>3a27b8	fe 04 a5 21 48 a9 2c 00 85 35 20 9d 1a b0 1c af
>3a27c8	26 71 3a aa bf 28 71 3a 29 fe 00 85 0c 68 29 01
>3a27d8	00 05 0c 9f 28 71 3a 87 9d 80 31 e2 20 20 79 19
>3a27e8	20 e4 16 20 79 05 a5 21 c9 08 b0 22 0a 0a 0a 0a
>3a27f8	85 0c 68 29 01 05 0c 85 0c af 26 71 3a aa bf 28
>3a2808	71 3a 29 8e 05 0c 87 9d 9f 28 71 3a 28 60 08 c2
>3a2818	20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08 00
>3a2828	dc d2 08 08 20 9a 19 e2 20 a7 00 d0 03 4c bf 28
>3a2838	c9 3a d0 03 4c bf 28 c9 22 d0 0b 20 0c 16 20 9d
>3a2848	30 a9 3b 20 72 1a 20 e9 03 90 37 20 38 3c 90 32
>3a2858	a9 3f 20 18 00 a9 20 20 18 00 20 10 00 e2 20 a5
>3a2868	e8 c9 02 f0 32 c9 00 f0 51 c9 01 f0 4c 08 c2 20
>3a2878	48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 dc
>3a2888	d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>3a2898	8f d1 08 00 dc d2 08 c2 20 a9 00 4c 85 21 a9 00
>3a28a8	00 85 23 e2 20 a9 02 85 25 20 17 12 c2 20 20 d5
>3a28b8	3b a9 0d 00 20 18 00 28 60 ea c2 20 a5 00 85 3f
>3a28c8	a5 02 85 41 a9 00 4c 85 00 a9 00 00 85 02 20 ba
>3a28d8	05 c2 20 a5 3f 85 00 a5 41 85 02 80 cf 08 20 9a
>3a28e8	19 e2 20 a7 00 f0 49 c9 3a f0 45 20 e9 03 90 42
>3a28f8	20 38 3c 90 3d 20 14 00 e2 20 8f 00 4e 00 a9 00
>3a2908	8f 01 4e 00 c2 20 a9 00 4e 85 21 a9 00 00 85 23
>3a2918	e2 20 a9 02 85 25 20 17 12 20 d5 3b 20 9a 19 a7
>3a2928	00 f0 0d c9 3a f0 09 c9 2c d0 07 20 79 19 80 ae
>3a2938	28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>3a2948	8f d1 08 00 dc d2 08 08 20 e4 16 20 fe 04 e2 20
>3a2958	a9 5c 85 a1 c2 20 a5 21 85 a2 e2 20 a5 23 85 a4
>3a2968	e2 20 a9 2c 85 35 20 9d 1a 90 41 20 79 19 20 e4
>3a2978	16 20 3e 05 c2 20 a5 21 85 54 e2 20 a9 2c 85 35
>3a2988	20 9d 1a 90 27 20 79 19 20 e4 16 20 3e 05 c2 20
>3a2998	a5 21 85 58 e2 20 a9 2c 85 35 20 9d 1a 90 0d 20
>3a29a8	79 19 20 e4 16 20 3e 05 c2 20 a4 21 a6 58 a5 54
>3a29b8	22 a1 08 00 20 be 19 28 60 08 c2 20 48 a9 00 08
>3a29c8	5b 68 28 e2 20 a9 04 8f d1 08 00 dc d2 08 08 e2
>3a29d8	20 20 9a 19 20 38 3c 90 64 a9 8c 20 72 1a a9 01
>3a29e8	20 83 14 a2 01 00 a9 00 8f 00 4d 00 20 e4 16 20
>3a29f8	3e 05 c2 20 a5 21 9f 00 4d 00 e2 20 af 00 4d 00
>3a2a08	1a 8f 00 4d 00 30 4b e8 e8 20 9a 19 a7 00 c9 2c
>3a2a18	f0 25 c9 8d d0 27 20 79 19 20 e6 3c c2 20 a5 be
>3a2a28	85 21 e2 20 a5 c0 85 23 64 24 a5 e8 09 80 85 e8
>3a2a38	85 25 20 d5 3b 28 60 20 79 19 4c f4 29 08 c2 20
>3a2a48	48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 dc
>3a2a58	d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a
>3a2a68	8f d1 08 00 dc d2 08 08 20 9a 19 e2 20 a7 00 f0
>3a2a78	28 c9 3a f0 24 20 e9 03 90 21 20 38 3c 90 1c 20
>3a2a88	b8 2a 20 d5 3b 20 9a 19 a7 00 f0 0d c9 3a f0 09
>3a2a98	c9 2c d0 07 20 79 19 80 cf 28 60 08 c2 20 48 a9
>3a2aa8	00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 dc d2 08
>3a2ab8	08 a5 02 85 41 a5 00 85 3f a5 1a 85 45 a5 18 85
>3a2ac8	43 c2 20 a5 39 d0 04 a5 37 f0 44 a5 37 85 00 a5
>3a2ad8	39 85 02 a5 3b 85 18 a5 3d 85 1a e2 20 a7 00 f0
>3a2ae8	49 c9 3a f0 45 c9 2c d0 03 20 79 19 20 9a 19 a7
>3a2af8	00 c9 22 f0 44 20 02 04 b0 44 08 c2 20 48 a9 00
>3a2b08	08 5b 68 28 e2 20 a9 02 8f d1 08 00 dc d2 08 c2
>3a2b18	20 a9 00 00 85 18 a9 01 00 85 1a 18 a5 18 69 04
>3a2b28	00 85 00 a5 1a 69 00 00 85 02 e2 20 a9 80 85 33
>3a2b38	a9 a8 85 35 20 d0 19 80 b3 20 0c 16 80 03 20 5f
>3a2b48	15 c2 20 a5 00 85 37 a5 02 85 39 a5 18 85 3b a5
>3a2b58	1a 85 3d a5 43 85 18 a5 45 85 1a a5 3f 85 00 a5
>3a2b68	41 85 02 28 60 20 be 19 60 64 37 64 39 64 3b 64
>3a2b78	3d 60 20 24 00 60 20 e4 16 c2 20 a5 23 48 a5 21
>3a2b88	48 e2 20 a7 00 c9 2c d0 22 20 79 19 20 e4 16 c2
>3a2b98	20 a5 24 d0 2b 68 85 08 68 85 0a c2 20 a5 21 87
>3a2ba8	08 e2 20 a0 02 00 a5 23 97 08 60 08 c2 20 48 a9
>3a2bb8	00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 dc d2 08
>3a2bc8	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1
>3a2bd8	08 00 dc d2 08 20 e4 16 c2 20 a5 23 48 a5 21 48
>3a2be8	e2 20 a7 00 c9 2c d0 19 20 79 19 20 e4 16 c2 20
>3a2bf8	a5 23 d0 22 68 85 08 68 85 0a c2 20 a5 21 87 08
>3a2c08	60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a2c18	d1 08 00 dc d2 08 08 c2 20 48 a9 00 08 5b 68 28
>3a2c28	e2 20 a9 09 8f d1 08 00 dc d2 08 20 e4 16 c2 20
>3a2c38	a5 23 48 a5 21 48 e2 20 a7 00 c9 2c d0 1f 20 79
>3a2c48	19 20 e4 16 e2 20 a5 22 d0 28 c2 20 a5 23 d0 22
>3a2c58	68 85 08 68 85 0a e2 20 a5 21 87 08 60 08 c2 20
>3a2c68	48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 dc
>3a2c78	d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09
>3a2c88	8f d1 08 00 dc d2 08 08 c2 20 48 a9 00 08 5b 68
>3a2c98	28 e2 20 a9 01 8f d1 08 00 dc d2 08 08 e2 20 a7
>3a2ca8	00 f0 05 20 79 19 80 f7 28 60 08 28 60 08 28 60
>3a2cb8	08 28 60 08 c2 20 a5 1a 20 fd 17 a5 18 20 fd 17
>3a2cc8	a5 02 48 a5 00 48 20 be 19 a5 02 20 fd 17 a5 00
>3a2cd8	20 fd 17 68 85 00 68 85 02 20 9a 19 20 38 3c b0
>3a2ce8	15 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 05 8f
>3a2cf8	d1 08 00 dc d2 08 e2 20 a5 e8 20 14 18 a5 e7 20
>3a2d08	14 18 c2 20 a5 e5 20 fd 17 20 9a 19 e2 20 a7 00
>3a2d18	c9 87 d0 6a a5 e8 c9 00 f0 04 c9 01 f0 00 20 79
>3a2d28	19 20 e4 16 20 d5 3b e2 20 a9 99 20 72 1a 20 e4
>3a2d38	16 c2 20 a5 25 20 fd 17 a5 23 20 fd 17 a5 21 20
>3a2d48	fd 17 e2 20 a9 9a 85 35 20 9d 1a 90 1b 20 79 19
>3a2d58	20 e4 16 e2 20 a5 25 20 fd 17 c2 20 a5 23 20 fd
>3a2d68	17 a5 21 20 fd 17 80 14 c2 20 a9 00 00 20 fd 17
>3a2d78	a9 00 00 20 fd 17 a9 01 00 20 fd 17 28 60 08 c2
>3a2d88	20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00
>3a2d98	dc d2 08 08 8b 08 e2 20 48 a9 00 48 ab 68 28 08
>3a2da8	c2 20 48 a9 00 08 5b 68 28 c2 30 a4 31 c8 c8 c2
>3a2db8	20 b9 0c 00 85 e5 b9 0e 00 e2 20 85 e7 b9 10 00
>3a2dc8	85 e8 c2 20 5a 20 ac 3a 7a c2 20 b9 00 00 85 27
>3a2dd8	b9 02 00 85 29 e2 20 b9 04 00 85 2b c2 20 5a 20
>3a2de8	5e 1f 20 d5 3b 7a c2 20 b9 06 00 85 27 b9 08 00
>3a2df8	85 29 e2 20 b9 0a 00 85 2b c2 20 b9 02 00 30 0a
>3a2e08	20 98 20 20 eb 04 f0 28 80 08 20 7b 20 20 eb 04
>3a2e18	f0 1e c2 20 b9 12 00 85 00 b9 14 00 85 02 b9 16
>3a2e28	00 85 18 b9 18 00 85 1a e2 20 a9 03 85 da 80 17
>3a2e38	a2 21 08 20 44 14 c2 20 18 a5 31 69 1a 00 85 31
>3a2e48	a5 33 69 00 00 85 33 ab 28 60 08 a5 18 48 a5 1a
>3a2e58	48 20 9a 19 20 ba 05 a5 21 f0 26 20 36 1c 90 38
>3a2e68	e2 20 a9 02 85 da 20 be 19 c2 20 68 20 fd 17 68
>3a2e78	20 fd 17 a5 02 20 fd 17 a5 00 20 fd 17 e6 2f 28
>3a2e88	60 68 68 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a2e98	02 8f d1 08 00 dc d2 08 68 68 08 c2 20 48 a9 00
>3a2ea8	08 5b 68 28 e2 20 a9 06 8f d1 08 00 dc d2 08 08
>3a2eb8	c2 30 a5 2f f0 1e 20 1f 18 85 00 20 1f 18 85 02
>3a2ec8	20 1f 18 85 18 20 1f 18 85 1a c6 2f e2 20 a9 03
>3a2ed8	85 da 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a2ee8	a9 07 8f d1 08 00 dc d2 08 08 20 e4 16 20 eb 04
>3a2ef8	f0 1c e2 20 a9 94 20 72 1a 20 ba 05 20 eb 04 f0
>3a2f08	12 20 36 1c 90 22 e2 20 a9 02 85 da 80 03 20 be
>3a2f18	19 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a2f28	02 8f d1 08 00 dc d2 08 08 c2 20 48 a9 00 08 5b
>3a2f38	68 28 e2 20 a9 06 8f d1 08 00 dc d2 08 08 e2 20
>3a2f48	a9 01 85 da 28 60 08 20 9a 19 20 ba 05 a5 21 f0
>3a2f58	0d 20 36 1c 90 1d e2 20 a9 02 85 da 28 60 08 c2
>3a2f68	20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00
>3a2f78	dc d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a2f88	06 8f d1 08 00 dc d2 08 20 e6 13 20 51 0c 20 ab
>3a2f98	39 60 08 a7 00 10 03 20 79 19 20 38 3c b0 03 4c
>3a2fa8	11 30 e2 20 20 bc 1a c9 8c d0 0e a9 8c 20 72 1a
>3a2fb8	a9 00 8f 00 4d 00 20 62 15 20 9a 19 e2 20 a7 00
>3a2fc8	c9 87 f0 03 4c 11 30 20 79 19 a5 e8 48 a5 e7 48
>3a2fd8	a5 e6 48 a5 e5 48 20 e4 16 68 85 e5 68 85 e6 68
>3a2fe8	85 e7 68 85 e8 29 80 f0 1b 20 1e 3a 90 30 c2 20
>3a2ff8	a0 09 00 b7 08 85 be e2 20 c8 c8 b7 08 85 c0 20
>3a3008	a9 3e 80 03 20 d5 3b 28 60 08 c2 20 48 a9 00 08
>3a3018	5b 68 28 e2 20 a9 02 8f d1 08 00 dc d2 08 08 c2
>3a3028	20 48 a9 00 08 5b 68 28 e2 20 a9 05 8f d1 08 00
>3a3038	dc d2 08 08 20 e4 16 e2 20 a5 25 c9 ff f0 14 c9
>3a3048	02 d0 05 20 9d 30 80 0b c9 00 d0 05 20 bd 30 80
>3a3058	02 80 40 20 9a 19 a7 00 f0 36 c9 3a f0 32 c9 2c
>3a3068	f0 19 c9 3b f0 1a 08 c2 20 48 a9 00 08 5b 68 28
>3a3078	e2 20 a9 02 8f d1 08 00 dc d2 08 a9 09 20 18 00
>3a3088	20 79 19 20 9a 19 a7 00 f0 09 c9 3a f0 05 80 a4
>3a3098	20 52 03 28 60 08 8b 08 c2 20 48 a9 00 08 5b 68
>3a30a8	28 e2 20 c2 10 a0 00 00 b7 21 f0 06 20 18 00 c8
>3a30b8	80 f6 ab 28 60 08 c2 20 20 e5 10 a5 14 85 21 a5
>3a30c8	16 85 23 20 9d 30 28 60 08 e2 20 85 b4 4a 4a 4a
>3a30d8	4a 29 0f 18 69 30 97 14 c8 a5 b4 29 0f 18 69 30
>3a30e8	97 14 c8 28 60 e2 20 a9 8c 20 72 1a 08 20 e4 16
>3a30f8	e2 20 c2 10 af 0e 08 af 09 08 8f 0e 08 af 20 9e
>3a3108	10 a0 00 00 af 06 08 af 20 d0 30 a9 2f 97 14 c8
>3a3118	af 09 08 af 20 d0 30 a9 2f 97 14 c8 af 0a 08 af
>3a3128	20 d0 30 a9 00 97 14 af 0e 08 af 29 f7 8f 0e 08
>3a3138	af c2 20 a5 14 85 21 a5 16 85 23 e2 20 a9 02 85
>3a3148	25 20 17 12 28 e2 20 20 79 19 60 e2 20 a9 8c 20
>3a3158	72 1a 08 20 e4 16 e2 20 c2 10 af 0e 08 af 09 08
>3a3168	8f 0e 08 af 20 9e 10 a0 00 00 af 04 08 af 20 d0
>3a3178	30 a9 3a 97 14 c8 af 02 08 af 20 d0 30 a9 3a 97
>3a3188	14 c8 af 00 08 af 20 d0 30 a9 00 97 14 af 0e 08
>3a3198	af 29 f7 8f 0e 08 af c2 20 a5 14 85 21 a5 16 85
>3a31a8	23 e2 20 a9 02 85 25 20 17 12 28 e2 20 20 79 19
>3a31b8	60 08 c2 20 20 e4 16 20 fe 04 c2 20 a5 21 49 ff
>3a31c8	ff 85 21 a5 23 49 ff ff 85 23 e6 21 d0 03 e6 23
>3a31d8	00 28 60 e2 20 a9 8c 20 72 1a 08 c2 30 20 e4 16
>3a31e8	20 1e 05 c2 20 a5 23 48 a5 21 48 20 9a 19 e2 20
>3a31f8	a7 00 c9 2c f0 03 4c 52 32 20 79 19 20 e4 16 20
>3a3208	3e 05 c2 20 a5 21 48 20 9a 19 e2 20 a7 00 c9 2c
>3a3218	f0 03 4c 52 32 20 79 19 20 e4 16 20 3e 05 c2 20
>3a3228	a5 21 85 8e e2 20 a5 23 85 90 c2 20 68 85 27 a9
>3a3238	00 00 85 29 68 85 21 68 85 23 e2 20 a9 02 85 25
>3a3248	20 6f 12 e2 20 20 79 19 28 60 08 c2 20 48 a9 00
>3a3258	08 5b 68 28 e2 20 a9 02 8f d1 08 00 dc d2 08 08
>3a3268	c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08
>3a3278	00 dc d2 08 e2 20 a9 8c 20 72 1a 08 c2 30 20 e4
>3a3288	16 e2 20 a5 25 c9 02 f0 03 4c 00 33 c2 20 a5 23
>3a3298	48 a5 21 48 20 9a 19 e2 20 a7 00 c9 2c f0 03 4c
>3a32a8	15 33 20 79 19 20 e4 16 e2 20 a5 25 c9 00 d0 48
>3a32b8	c2 20 a5 21 85 8e c2 20 68 85 21 68 85 23 e2 20
>3a32c8	a9 02 85 25 e2 20 a0 00 00 b7 21 f0 03 c8 80 f9
>3a32d8	c2 20 98 38 e5 8e 30 09 85 27 a9 00 00 85 29 80
>3a32e8	07 a9 00 00 85 27 85 29 e2 20 a9 00 85 2b 20 6f
>3a32f8	12 e2 20 20 79 19 28 60 08 c2 20 48 a9 00 08 5b
>3a3308	68 28 e2 20 a9 04 8f d1 08 00 dc d2 08 08 c2 20
>3a3318	48 a9 00 08 5b 68 28 e2 20 a9 02 8f d1 08 00 dc
>3a3328	d2 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09
>3a3338	8f d1 08 00 dc d2 08 e2 20 a9 8c 20 72 1a 08 c2
>3a3348	30 20 e4 16 e2 20 a5 25 c9 02 f0 03 4c ab 33 c2
>3a3358	20 a5 23 48 a5 21 48 20 9a 19 e2 20 a7 00 c9 2c
>3a3368	f0 03 4c c0 33 20 79 19 20 e4 16 e2 20 a5 25 c9
>3a3378	00 d0 30 c2 20 a5 21 85 8e c2 20 a9 00 00 85 27
>3a3388	a9 00 00 85 29 e2 20 a9 00 85 2b c2 20 68 85 21
>3a3398	68 85 23 e2 20 a9 02 85 25 20 6f 12 e2 20 20 79
>3a33a8	19 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a33b8	04 8f d1 08 00 dc d2 08 08 c2 20 48 a9 00 08 5b
>3a33c8	68 28 e2 20 a9 02 8f d1 08 00 dc d2 08 08 c2 20
>3a33d8	48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08 00 dc
>3a33e8	d2 08 e2 20 a9 8c 20 72 1a 20 e4 16 c2 10 e2 20
>3a33f8	a5 25 c9 02 d0 23 c2 20 a5 00 85 3f a5 02 85 41
>3a3408	a5 21 85 00 a5 23 85 02 20 ba 05 a5 3f 85 00 a5
>3a3418	41 85 02 e2 20 20 79 19 60 08 c2 20 48 a9 00 08
>3a3428	5b 68 28 e2 20 a9 04 8f d1 08 00 dc d2 08 e2 20
>3a3438	a9 8c 20 72 1a 08 20 e4 16 c2 10 e2 20 a5 25 c9
>3a3448	00 d0 1d 20 e5 10 c2 20 a5 14 85 21 a5 16 85 23
>3a3458	e2 20 a9 02 85 25 20 17 12 28 e2 20 20 79 19 60
>3a3468	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1
>3a3478	08 00 dc d2 08 e2 20 a9 8c 20 72 1a 08 20 e4 16
>3a3488	20 1e 05 c2 20 64 0c 64 0e e2 30 a0 00 b7 21 c9
>3a3498	20 f0 04 c9 24 d0 03 c8 80 f3 b7 21 20 13 04 90
>3a34a8	1e c2 20 06 0c 26 0e 06 0c 26 0e 06 0c 26 0e 06
>3a34b8	0c 26 0e e2 20 20 34 04 05 0c 85 0c c8 80 db c2
>3a34c8	20 a5 0c 85 21 a5 0e 85 23 e2 20 a9 00 85 25 28
>3a34d8	e2 20 20 79 19 60 e2 20 a9 8c 20 72 1a 08 20 e4
>3a34e8	16 20 fe 04 20 9e 10 e2 30 a0 ff a9 00 97 14 88
>3a34f8	a5 21 29 0f aa bf 00 60 3a 97 14 88 a5 21 29 f0
>3a3508	4a 4a 4a 4a aa bf 00 60 3a 97 14 88 a5 22 85 21
>3a3518	a5 23 85 22 a5 24 85 23 a9 00 85 24 a5 21 d0 d0
>3a3528	a5 22 d0 cc a5 23 d0 c8 98 38 65 14 85 21 a5 15
>3a3538	85 22 a5 16 85 23 a5 17 85 24 a9 02 85 25 20 17
>3a3548	12 28 e2 20 20 79 19 60 08 c2 20 48 a9 00 08 5b
>3a3558	68 28 e2 20 a9 04 8f d1 08 00 dc d2 08 e2 20 a9
>3a3568	8c 20 72 1a 20 e4 16 e2 20 a5 25 c9 02 d0 1f 8b
>3a3578	a5 23 48 ab c2 10 a6 21 20 62 11 ab 84 21 c2 20
>3a3588	64 23 e2 20 a9 00 85 25 e2 20 20 79 19 60 08 c2
>3a3598	20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00
>3a35a8	dc d2 08 e2 20 a9 8c 20 72 1a 20 e4 16 e2 20 a5
>3a35b8	25 c9 00 d0 12 e2 20 a7 21 85 21 64 22 64 23 64
>3a35c8	2e e2 20 20 79 19 60 08 c2 20 48 a9 00 08 5b 68
>3a35d8	28 e2 20 a9 04 8f d1 08 00 dc d2 08 e2 20 a9 8c
>3a35e8	20 72 1a 20 e4 16 e2 20 a5 25 c9 00 d0 1d c2 20
>3a35f8	a7 21 85 0c e2 20 a0 02 00 b7 21 85 23 64 24 c2
>3a3608	20 a5 0c 85 21 e2 20 20 79 19 60 08 c2 20 48 a9
>3a3618	00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 dc d2 08
>3a3628	e2 20 a9 8c 20 72 1a 20 e4 16 e2 20 a5 25 c9 00
>3a3638	d0 0e c2 20 a7 21 85 21 64 23 e2 20 20 79 19 60
>3a3648	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1
>3a3658	08 00 dc d2 08 e2 20 a9 8c 20 72 1a 20 e4 16 e2
>3a3668	20 a5 25 c9 00 d0 24 20 9e 10 a5 21 87 14 a9 00
>3a3678	a0 01 00 97 14 c2 20 a5 14 85 21 a5 16 85 23 e2
>3a3688	20 a9 02 85 25 e2 20 20 79 19 60 08 c2 20 48 a9
>3a3698	00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 dc d2 08
>3a36a8	e2 20 a9 8c 20 72 1a 20 e4 16 e2 20 a5 25 c9 02
>3a36b8	d0 14 a7 21 85 21 64 22 64 23 64 24 a9 00 85 25
>3a36c8	e2 20 20 79 19 60 08 c2 20 48 a9 00 08 5b 68 28
>3a36d8	e2 20 a9 04 8f d1 08 00 dc d2 08 e2 20 a9 8c 20
>3a36e8	72 1a 20 e4 16 e2 20 a5 25 c9 00 d0 39 e2 20 a5
>3a36f8	24 d0 48 a5 23 d0 44 a5 22 d0 40 c2 10 20 9e 10
>3a3708	a4 21 e2 20 a9 00 97 14 88 30 07 a9 20 97 14 88
>3a3718	10 fb a9 02 85 25 c2 20 a5 14 85 21 a5 16 85 23
>3a3728	e2 20 20 79 19 60 08 c2 20 48 a9 00 08 5b 68 28
>3a3738	e2 20 a9 04 8f d1 08 00 dc d2 08 08 c2 20 48 a9
>3a3748	00 08 5b 68 28 e2 20 a9 09 8f d1 08 00 dc d2 08
>3a3758	e2 20 a9 8c 20 72 1a 20 e4 16 e2 20 a5 25 c9 00
>3a3768	d0 39 e2 20 a5 24 d0 48 a5 23 d0 44 a5 22 d0 40
>3a3778	c2 10 20 9e 10 a4 21 e2 20 a9 00 97 14 88 30 07
>3a3788	a9 09 97 14 88 10 fb a9 02 85 25 c2 20 a5 14 85
>3a3798	21 a5 16 85 23 e2 20 20 79 19 60 08 c2 20 48 a9
>3a37a8	00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 dc d2 08
>3a37b8	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d1
>3a37c8	08 00 dc d2 08 e2 20 a9 8c 20 72 1a 20 e4 16 20
>3a37d8	fe 04 c2 20 a5 23 10 17 49 ff ff 85 23 a5 21 49
>3a37e8	ff ff 18 69 01 00 85 21 a5 23 69 00 00 85 23 e2
>3a37f8	20 20 79 19 60 e2 20 a9 8c 20 72 1a 20 e4 16 e2
>3a3808	20 a5 25 c9 00 d0 25 c2 20 a5 23 30 12 d0 04 a5
>3a3818	21 f0 13 a9 00 00 85 23 a9 01 00 85 21 80 07 a9
>3a3828	ff ff 85 23 85 21 e2 20 20 79 19 60 08 c2 20 48
>3a3838	a9 00 08 5b 68 28 e2 20 a9 04 8f d1 08 00 dc d2
>3a3848	08 00 ea 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28
>3a3858	c2 30 c2 20 a9 00 00 85 d7 e2 20 a9 01 85 d9 c2
>3a3868	30 a9 00 00 a0 00 00 97 d7 a0 02 00 97 d7 a0 04
>3a3878	00 97 d7 20 4f 19 2b 28 60 8b 08 c2 20 a9 00 00
>3a3888	85 18 a9 01 00 85 1a 20 4f 19 20 ed 1b 28 ab 60
>3a3898	08 c2 20 64 54 a9 ff 7f 85 58 20 52 03 20 bc 1a
>3a38a8	29 ff 00 c9 00 00 f0 2c c9 81 00 f0 1a 20 9a 19
>3a38b8	20 ba 05 a5 21 85 54 20 bc 1a 29 ff 00 c9 00 00
>3a38c8	f0 12 c9 81 00 d0 2a 20 72 1a 20 9a 19 20 ba 05
>3a38d8	a5 21 85 58 a5 1a 48 a5 18 48 a5 02 48 a5 00 48
>3a38e8	20 f2 12 68 85 00 68 85 02 68 85 18 68 85 1a 28
>3a38f8	60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a3908	d1 08 00 dc d2 08 08 20 e4 16 20 1e 05 e2 20 c2
>3a3918	10 a0 00 00 a2 00 00 b7 21 9f 00 70 3a f0 04 e8
>3a3928	c8 80 f4 c2 30 a9 00 00 85 ac 85 58 e2 20 a9 02
>3a3938	85 ae 85 5a 64 b1 20 4c 38 20 c4 02 c2 20 a2 0c
>3a3948	00 bf 00 71 3a 85 af 20 54 00 10 08 20 28 00 20
>3a3958	ea 1e 80 f3 28 60 08 e2 20 20 52 03 20 09 02 a2
>3a3968	00 00 bf 00 71 3a f0 09 20 18 00 e8 e0 08 00 d0
>3a3978	f1 a9 2e 20 18 00 a2 08 00 bf 00 71 3a f0 09 20
>3a3988	18 00 e8 e0 0b 00 d0 f1 20 52 03 a2 14 00 bf 00
>3a3998	71 3a d0 08 e8 e8 bf 00 71 3a f0 05 20 2b 02 b0
>3a39a8	be 28 60 08 08 c2 20 48 a9 00 08 5b 68 28 c2 20
>3a39b8	64 e2 64 e5 e2 20 64 e4 64 e7 64 e8 c2 20 38 a5
>3a39c8	d7 69 04 00 85 df e2 20 a5 d9 69 00 85 e1 28 60
>3a39d8	c9 5f f0 1a c9 3a b0 04 c9 30 b0 12 c9 5b b0 04
>3a39e8	c9 41 b0 0a c9 7b b0 04 c9 61 b0 02 18 60 38 60
>3a39f8	08 e2 20 c2 10 a0 00 00 b7 0c f0 0a d7 e5 d0 13
>3a3a08	c8 c0 08 00 d0 f2 b7 e5 20 5d 04 20 d8 39 b0 03
>3a3a18	28 38 60 28 18 60 08 e2 20 c2 10 a0 00 00 a2 00
>3a3a28	00 b7 e5 f0 0b 20 5d 04 9f 00 4e 00 c8 e8 80 f1
>3a3a38	a9 00 9f 00 4e 00 c2 20 a9 00 4e 85 e5 e2 20 a9
>3a3a48	00 85 e7 c2 20 a5 e2 85 08 d0 06 e2 20 a5 e4 f0
>3a3a58	4d e2 20 a5 e4 85 0a a5 e8 a0 00 00 d7 08 d0 17
>3a3a68	c2 20 18 a5 08 69 01 00 85 0c e2 20 a5 0a 69 00
>3a3a78	85 0e 20 f8 39 b0 2a a0 0d 00 c2 20 b7 08 85 0c
>3a3a88	c8 c8 e2 20 b7 08 85 0e d0 06 c2 20 a5 0c f0 0e
>3a3a98	c2 20 a5 0c 85 08 e2 20 a5 0e 85 0a 80 b9 28 18
>3a3aa8	60 28 38 60 08 20 1e 3a b0 15 08 c2 20 48 a9 00
>3a3ab8	08 5b 68 28 e2 20 a9 05 8f d1 08 00 dc d2 08 c2
>3a3ac8	30 a0 09 00 b7 08 85 21 c8 c8 b7 08 85 23 e2 20
>3a3ad8	a0 00 00 b7 08 85 25 28 60 08 c2 20 18 a5 df 69
>3a3ae8	10 00 85 08 e2 20 a5 e1 69 00 85 0a c5 ba 90 1d
>3a3af8	c2 20 a5 08 c5 b8 90 15 08 c2 20 48 a9 00 08 5b
>3a3b08	68 28 e2 20 a9 09 8f d1 08 00 dc d2 08 c2 20 a5
>3a3b18	df 85 be e2 20 a5 e1 85 c0 c2 20 a5 08 85 df e2
>3a3b28	20 a5 0a 85 e1 28 60 08 e2 20 a5 25 c5 e8 f0 15
>3a3b38	08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d1
>3a3b48	08 00 dc d2 08 c2 10 20 e1 3a c2 30 18 a5 be 69
>3a3b58	01 00 85 08 e2 20 a5 c0 69 00 85 0a a0 00 00 a9
>3a3b68	00 97 08 c8 c0 08 00 d0 f8 a0 00 00 b7 e5 f0 10
>3a3b78	20 5d 04 20 d8 39 90 08 97 08 c8 c0 08 00 d0 ec
>3a3b88	c2 20 a0 09 00 a5 21 97 be a5 23 c8 c8 97 be a5
>3a3b98	e2 a0 0d 00 97 be c8 c8 e2 20 a5 e4 97 be c2 20
>3a3ba8	a5 be 85 e2 e2 20 a5 c0 85 e4 e2 20 a0 00 00 a5
>3a3bb8	25 97 be c9 02 f0 02 28 60 c2 20 a5 21 85 be e2
>3a3bc8	20 a5 23 85 c0 20 b5 0e 20 ca 0e 80 ea 08 c2 30
>3a3bd8	a5 e2 d0 06 e2 20 a5 e4 f0 05 20 1e 3a b0 05 20
>3a3be8	2f 3b 80 17 e2 20 a5 25 c9 02 f0 11 c2 30 a0 09
>3a3bf8	00 a5 21 97 08 c8 c8 a5 23 97 08 28 60 a0 09 00
>3a3c08	b7 08 85 be c8 c8 e2 20 b7 08 85 c0 20 b5 0e 20
>3a3c18	e9 0e e2 20 a5 25 c9 02 f0 02 80 d0 c2 20 a5 21
>3a3c28	85 be e2 20 a5 23 85 c0 20 b5 0e 20 ca 0e 80 bc
>3a3c38	08 20 9a 19 e2 20 a7 00 20 e9 03 90 42 c2 20 a5
>3a3c48	00 85 e5 e2 20 a5 02 85 e7 20 79 19 a7 00 f0 0d
>3a3c58	c9 24 f0 14 c9 25 f0 09 20 d8 39 b0 ec a9 00 80
>3a3c68	0c 20 79 19 a9 00 80 05 20 79 19 a9 02 85 e8 20
>3a3c78	bc 1a c9 8c d0 06 a5 e8 09 80 85 e8 28 38 60 28
>3a3c88	18 60 08 c2 20 48 a9 00 08 5b 68 28 c2 20 a5 21
>3a3c98	85 0c a5 23 64 0e 64 21 64 23 e2 20 64 26 a9 01
>3a3ca8	85 25 c2 20 a5 0c f0 35 10 0e e2 20 a9 80 85 26
>3a3cb8	c2 20 49 ff ff 1a 85 0c e2 20 e6 24 c2 20 46 0e
>3a3cc8	66 0c e2 20 66 23 66 22 66 21 c2 20 a5 0c c9 01
>3a3cd8	00 d0 e5 e2 20 06 26 66 23 66 22 66 21 60 08 20
>3a3ce8	b5 0e c2 20 a9 01 00 85 21 a9 00 00 85 23 e2 20
>3a3cf8	af 00 4d 00 c2 20 29 ff 00 85 8e a8 a2 01 00 c2
>3a3d08	20 bf 00 4d 00 85 27 a9 00 00 85 29 20 a1 1f e8
>3a3d18	e8 88 d0 eb c2 20 a9 04 00 85 27 a9 00 00 85 29
>3a3d28	20 a1 1f e2 20 af 00 4d 00 85 0c a9 00 85 0d c2
>3a3d38	20 06 0c 38 a5 21 65 0c 85 21 a5 23 69 00 00 85
>3a3d48	23 d0 29 e2 20 a5 e8 09 80 a6 21 20 79 0c e2 20
>3a3d58	af 00 4d 00 87 be a0 01 00 a2 00 00 e2 20 bf 01
>3a3d68	4d 00 97 be e4 8e f0 19 e8 c8 80 f0 08 c2 20 48
>3a3d78	a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08 00 dc d2
>3a3d88	08 e2 20 38 a5 be 67 be 85 08 a5 bf 69 00 85 09
>3a3d98	a5 c0 69 00 85 0a 64 0b c2 20 a0 05 00 b7 c1 85
>3a3da8	0c e2 20 c8 c8 b7 c1 85 0e 64 0f e2 20 a9 00 87
>3a3db8	08 c2 20 18 a5 08 69 01 00 85 08 a5 0a 69 00 00
>3a3dc8	85 0a c5 0e d0 e5 a5 08 c5 0c d0 df 28 60 08 c2
>3a3dd8	20 64 08 64 0a e2 20 af 00 4d 00 85 8e 64 8f a2
>3a3de8	01 00 e2 20 a7 be c5 8e f0 15 08 c2 20 48 a9 00
>3a3df8	08 5b 68 28 e2 20 a9 0a 8f d1 08 00 dc d2 08 c9
>3a3e08	01 f0 3a a0 01 00 e2 20 bf 00 4d 00 85 21 64 22
>3a3e18	64 23 64 24 b7 be 85 27 64 28 64 29 64 2a a5 21
>3a3e28	c5 27 b0 68 20 a1 1f c2 20 18 a5 08 65 21 85 08
>3a3e38	a5 0a 65 23 85 0a e8 e8 c8 c4 8e d0 c9 e2 20 18
>3a3e48	bf 00 4d 00 85 8f 65 08 85 08 a5 09 69 00 85 09
>3a3e58	c2 20 a5 0a 69 00 00 85 0a c2 20 06 08 26 0a 06
>3a3e68	08 26 0a e2 20 38 a5 08 65 8e 85 08 a5 09 69 00
>3a3e78	85 09 c2 20 a5 0a 69 00 00 85 0a 18 a5 08 65 be
>3a3e88	85 08 e2 20 a5 0a 65 c0 85 0a 28 60 08 c2 20 48
>3a3e98	a9 00 08 5b 68 28 e2 20 a9 09 8f d1 08 00 dc d2
>3a3ea8	08 08 20 b5 0e e2 20 a0 00 00 b7 c1 29 7f c5 25
>3a3eb8	d0 28 a5 25 48 c2 20 a5 23 48 a5 21 48 20 d6 3d
>3a3ec8	68 85 21 68 85 23 e2 20 68 85 25 c2 20 a5 21 87
>3a3ed8	08 a0 02 00 a5 23 97 08 28 60 08 c2 20 48 a9 00
>3a3ee8	08 5b 68 28 e2 20 a9 04 8f d1 08 00 dc d2 08 08
>3a3ef8	20 b5 0e f4 00 00 f4 00 00 e2 20 48 20 d6 3d e2
>3a3f08	20 68 c2 20 68 68 c2 20 a7 08 85 21 a0 02 00 b7
>3a3f18	08 85 23 e2 20 a0 00 00 b7 c1 29 7f 85 25 28 60
>3a3f28	5c 49 57 3a 5c 87 56 3a 5c 4a 57 3a 5c 09 48 3a
>3a3f38	5c 66 48 3a 5c 99 47 3a 5c 1f 47 3a 5c 9c 4c 3a
>3a3f48	5c 93 43 3a 5c b7 46 3a 5c 72 46 3a 5c fc 45 3a
>3a3f58	5c 4c 57 3a 5c a1 44 3a 5c f7 42 3a 5c 4d 57 3a
>3a3f68	5c cf 43 3a 5c 4e 57 3a 5c 45 57 3a 5c b5 45 3a
>3a3f78	5c 4f 57 3a 18 fb c2 20 a9 ff fe 1b 58 5c 89 3f
>3a3f88	3a c2 30 22 f7 42 3a 20 08 00 20 0c 00 8b e2 20
>3a3f98	a9 00 48 ab a2 00 4f 20 6c 04 ab 22 2c 3f 3a 22
>3a3fa8	34 3f 3a 80 e2 08 8b e2 20 a9 3a 48 ab c2 10 a2
>3a3fb8	c0 3f 20 96 03 ab 28 6b 41 20 3c 73 74 61 72 74
>3a3fc8	3e 20 3c 61 73 73 65 6d 62 6c 79 3e 0d 20 20 41
>3a3fd8	73 73 65 6d 62 6c 65 20 61 20 70 72 6f 67 72 61
>3a3fe8	6d 0d 0d 43 20 3c 73 74 61 72 74 31 3e 20 3c 73
>3a3ff8	74 61 72 74 32 3e 20 5b 6c 65 6e 20 28 31 20 69
>3a4008	66 20 62 6c 61 6e 6b 29 5d 0d 20 20 43 6f 6d 70
>3a4018	61 72 65 20 74 6f 20 73 65 63 74 69 6f 6e 73 20
>3a4028	6f 66 20 6d 65 6d 6f 72 79 0d 0d 44 20 3c 73 74
>3a4038	61 72 74 3e 20 5b 65 6e 64 5d 0d 20 20 44 69 73
>3a4048	61 73 73 65 6d 62 6c 65 20 61 20 70 72 6f 67 72
>3a4058	61 6d 0d 0d 46 20 3c 73 74 61 72 74 3e 20 3c 65
>3a4068	6e 64 3e 20 3c 62 79 74 65 3e 0d 20 20 46 69 6c
>3a4078	6c 20 61 20 62 6c 6f 63 6b 20 6f 66 20 6d 65 6d
>3a4088	6f 72 79 20 77 69 74 68 20 61 20 62 79 74 65 0d
>3a4098	0d 47 20 5b 61 64 64 72 65 73 73 5d 0d 20 20 53
>3a40a8	74 61 72 74 20 65 78 65 63 75 74 69 6f 6e 20 61
>3a40b8	74 20 61 20 6c 6f 63 61 74 69 6f 6e 0d 0d 4a 20
>3a40c8	5b 61 64 64 72 65 73 73 5d 20 2d 20 4a 75 6d 70
>3a40d8	20 74 6f 20 61 20 6c 6f 63 61 74 69 6f 6e 20 69
>3a40e8	6e 20 6d 65 6d 6f 72 79 0d 20 20 4a 75 6d 70 20
>3a40f8	74 6f 20 61 20 6c 6f 63 61 74 69 6f 6e 20 69 6e
>3a4108	20 6d 65 6d 6f 72 79 0d 0d 48 20 3c 73 74 61 72
>3a4118	74 3e 20 3c 65 6e 64 3e 20 3c 62 79 74 65 3e 20
>3a4128	5b 62 79 74 65 5d 2e 2e 0d 20 20 48 75 6e 74 20
>3a4138	66 6f 72 20 76 61 6c 75 65 73 20 69 6e 20 6d 65
>3a4148	6d 6f 72 79 0d 0d 4d 20 3c 73 74 61 72 74 3e 20
>3a4158	5b 65 6e 64 5d 0d 20 20 44 75 6d 70 20 74 68 65
>3a4168	20 76 61 6c 75 65 20 69 6e 20 6d 65 6d 6f 72 79
>3a4178	0d 0d 52 20 2d 20 44 69 73 70 6c 61 79 20 74 68
>3a4188	65 20 76 61 6c 75 65 73 20 6f 66 20 74 68 65 20
>3a4198	72 65 67 69 73 74 65 72 73 0d 0d 3b 20 3c 50 43
>3a41a8	3e 20 3c 41 3e 20 3c 58 3e 20 3c 59 3e 20 3c 53
>3a41b8	50 3e 20 3c 44 42 52 3e 20 3c 44 50 3e 20 3c 4e
>3a41c8	56 4d 58 44 49 5a 43 3e 0d 20 20 43 68 61 6e 67
>3a41d8	65 20 74 68 65 20 63 6f 6e 74 65 6e 74 73 20 6f
>3a41e8	66 20 74 68 65 20 72 65 67 69 73 74 65 72 73 0d
>3a41f8	0d 54 20 3c 73 74 61 72 74 3e 20 3c 65 6e 64 3e
>3a4208	20 3c 64 65 73 74 69 6e 61 74 69 6f 6e 3e 0d 20
>3a4218	20 54 72 61 6e 73 66 65 72 20 28 63 6f 70 79 29
>3a4228	20 64 61 74 61 20 77 69 74 68 69 6e 20 6d 65 6d
>3a4238	6f 72 79 0d 0d 57 20 3c 62 79 74 65 3e 0d 20 20
>3a4248	53 65 74 20 74 68 65 20 72 65 67 69 73 74 65 72
>3a4258	20 77 69 64 74 68 20 66 6c 61 67 73 20 66 6f 72
>3a4268	20 74 68 65 20 64 69 73 61 73 73 65 6d 62 6c 65
>3a4278	72 0d 0d 58 20 2d 20 52 65 74 75 72 6e 20 74 6f
>3a4288	20 42 41 53 49 43 0d 0d 3e 20 3c 73 74 61 72 74
>3a4298	3e 20 3c 62 79 74 65 3e 20 5b 62 79 74 65 5d 2e
>3a42a8	2e 2e 0d 20 20 45 64 69 74 20 64 61 74 61 20 69
>3a42b8	6e 20 6d 65 6d 6f 72 79 0d 0d 3f 20 2d 20 44 69
>3a42c8	73 70 6c 61 79 20 61 20 73 68 6f 72 74 20 68 65
>3a42d8	6c 70 20 73 63 72 65 65 6e 0d 0d 00 08 08 c2 20
>3a42e8	48 a9 47 08 5b 68 28 e2 20 a5 0d 85 4e 28 6b 08
>3a42f8	e2 20 48 a9 3a 48 ab 68 28 a2 5f 57 20 96 03 e2
>3a4308	20 a9 3b 20 18 00 a9 20 20 18 00 c2 30 08 e2 20
>3a4318	48 a9 00 48 ab 68 28 a0 03 00 a2 42 02 20 62 03
>3a4328	c2 20 a9 20 00 20 18 00 af 44 02 00 20 a6 03 a9
>3a4338	20 00 20 18 00 af 46 02 00 20 a6 03 a9 20 00 20
>3a4348	18 00 af 48 02 00 20 a6 03 a9 20 00 20 18 00 af
>3a4358	4a 02 00 20 a6 03 a9 20 00 20 18 00 af 4e 02 00
>3a4368	20 c0 03 a9 20 00 20 18 00 20 18 00 af 4c 02 00
>3a4378	20 a6 03 a9 20 00 20 18 00 08 e2 20 ad 4f 02 22
>3a4388	dd 55 3a 28 20 52 03 20 52 03 6b 08 0b 08 c2 20
>3a4398	48 a9 47 08 5b 68 28 e2 20 a5 15 87 0d e2 20 a5
>3a43a8	0f c5 13 d0 0e c2 20 a5 0d c5 11 d0 06 20 52 03
>3a43b8	2b 28 6b c2 20 18 a5 0d 69 01 00 85 0d e2 20 a5
>3a43c8	0e 69 00 85 0e 80 d0 08 0b 08 c2 20 48 a9 47 08
>3a43d8	5b 68 28 e2 20 a5 0f c5 17 90 45 c2 20 a5 0d c5
>3a43e8	15 90 3d e2 20 a7 0d 87 15 a5 0f c5 13 d0 0b c2
>3a43f8	20 a5 0d c5 11 d0 03 4c 86 44 c2 20 18 a5 0d 69
>3a4408	01 00 85 0d e2 20 a5 0e 69 00 85 0e c2 20 18 a5
>3a4418	15 69 01 00 85 15 e2 20 a5 16 69 00 85 16 80 c3
>3a4428	c2 20 38 a5 11 e5 0d 85 19 e2 20 a5 13 e5 0f 85
>3a4438	1b c2 20 18 a5 19 65 15 85 15 e2 20 a5 1b 65 17
>3a4448	85 17 e2 20 a7 11 87 15 a5 13 c5 0f d0 0a c2 20
>3a4458	a5 11 c5 0d d0 02 80 26 c2 20 38 a5 11 e9 01 00
>3a4468	85 11 e2 20 a5 12 e9 00 85 12 c2 20 38 a5 15 e9
>3a4478	01 00 85 15 e2 20 a5 16 e9 00 85 16 80 c4 20 52
>3a4488	03 2b 28 6b 08 e2 20 c9 21 90 0b c9 7f 90 04 c9
>3a4498	a0 90 03 28 38 6b 28 18 6b 08 8b 0b 08 c2 20 48
>3a44a8	a9 47 08 5b 68 28 e2 20 a5 31 c9 02 b0 16 c9 01
>3a44b8	90 20 c2 20 18 a5 0d 69 00 01 85 11 e2 20 a5 0f
>3a44c8	69 00 85 13 c2 20 a5 0d 85 32 e2 20 a5 0f 85 34
>3a44d8	80 12 c2 20 18 a5 32 69 00 01 85 11 e2 20 a5 34
>3a44e8	69 00 85 13 e2 20 a0 00 00 c2 20 a5 32 85 19 e2
>3a44f8	20 a5 34 85 1b e2 20 a7 19 22 8c 44 3a b0 02 a9
>3a4508	3f 99 7d 08 c2 20 18 a5 19 69 01 00 85 19 e2 20
>3a4518	a5 1b 69 00 85 1b c8 c0 08 00 90 db a9 00 99 7d
>3a4528	08 a9 3e 20 18 00 a9 20 20 18 00 e2 20 a5 34 20
>3a4538	c0 03 a9 3a 20 18 00 c2 20 a5 32 20 a6 03 c2 20
>3a4548	a9 08 00 85 47 e2 20 a9 20 20 18 00 a7 32 20 c0
>3a4558	03 22 bc 55 3a e2 20 c6 47 d0 ea a9 20 20 18 00
>3a4568	a9 20 20 18 00 08 e2 20 48 a9 00 48 ab 68 28 a2
>3a4578	7d 08 20 96 03 20 52 03 a5 34 c5 13 90 0f c2 20
>3a4588	a5 32 c5 11 90 07 20 52 03 2b ab 28 6b 4c ec 44
>3a4598	08 8d 91 08 e2 20 bd 00 00 99 00 00 ad 91 08 f0
>3a45a8	0a c8 e8 e8 e8 e8 ce 91 08 80 eb 28 6b 08 0b 8b
>3a45b8	08 c2 20 48 a9 47 08 5b 68 28 08 e2 20 48 a9 00
>3a45c8	48 ab 68 28 c2 30 a5 0d 85 32 a5 0f 85 34 e2 20
>3a45d8	a5 31 3a 85 47 a2 58 08 a0 7d 08 22 98 45 3a a0
>3a45e8	00 00 b9 7d 08 87 32 22 bc 55 3a c8 c4 47 d0 f2
>3a45f8	ab 2b 28 6b 08 0b 8b 08 c2 20 48 a9 47 08 5b 68
>3a4608	28 08 e2 20 48 a9 00 48 ab 68 28 e2 20 c2 10 a5
>3a4618	31 3a 3a 85 47 a2 5c 08 a0 7d 08 22 98 45 3a c2
>3a4628	20 a5 0d 85 32 a5 0f 85 34 c2 20 a5 34 c5 13 d0
>3a4638	06 a5 32 c5 11 f0 2c e2 20 a0 00 00 b7 32 d9 7d
>3a4648	08 d0 1a c8 c4 47 d0 f4 c2 20 a5 32 85 4a a5 34
>3a4658	85 4c 22 66 50 3a e2 20 a9 20 20 18 00 22 bc 55
>3a4668	3a 80 c6 20 52 03 ab 2b 28 6b 08 c2 20 48 a9 47
>3a4678	08 5b 68 28 e2 20 a5 31 f0 0e c2 30 a5 0d 8f 40
>3a4688	02 00 a5 0f 8f 42 02 00 af 46 02 00 aa af 48 02
>3a4698	00 a8 af 4a 02 00 1b af 4c 02 00 5b e2 20 a9 3a
>3a46a8	48 a9 46 48 a9 b2 48 4c e9 46 ea 5c 04 00 3a 08
>3a46b8	c2 20 48 a9 47 08 5b 68 28 e2 20 a5 31 f0 c9 c2
>3a46c8	30 a5 0d 8f 40 02 00 a5 0f 8f 42 02 00 af 46 02
>3a46d8	00 aa af 48 02 00 a8 af 4a 02 00 1b af 4c 02 00
>3a46e8	5b e2 20 af 4e 02 00 48 ab a9 5c 8f a1 08 00 af
>3a46f8	42 02 00 8f a4 08 00 af 41 02 00 8f a3 08 00 af
>3a4708	40 02 00 8f a2 08 00 af 4f 02 00 48 c2 20 af 44
>3a4718	02 00 28 5c a1 08 00 08 0b 8b 08 e2 20 48 a9 3a
>3a4728	48 ab 68 28 08 c2 20 48 a9 47 08 5b 68 28 c2 10
>3a4738	e2 20 a5 31 c9 02 f0 0c c9 03 d0 11 c2 20 a5 15
>3a4748	85 47 80 11 c2 20 a9 01 00 85 47 80 08 a2 50 57
>3a4758	20 96 03 80 35 a5 0d 85 4a a5 0f 85 4c a0 00 00
>3a4768	e2 20 a7 4a d7 11 f0 09 22 66 50 3a a9 20 20 18
>3a4778	00 c2 20 18 a5 4a 69 01 00 85 4a a5 4c 69 00 00
>3a4788	85 4c c8 c4 47 d0 d9 20 52 03 20 52 03 ab 2b 28
>3a4798	6b 08 0b 8b 08 e2 20 48 a9 00 48 ab 68 28 08 c2
>3a47a8	20 48 a9 47 08 5b 68 28 e2 20 a5 31 f0 4f a6 0d
>3a47b8	8e 40 02 a6 0f 8e 42 02 c9 01 f0 41 a6 11 8e 44
>3a47c8	02 c9 02 f0 38 a6 15 8e 46 02 c9 03 f0 2f a6 19
>3a47d8	8e 48 02 c9 04 f0 26 a6 1d 8e 4a 02 c9 05 f0 1d
>3a47e8	e2 10 a6 21 8e 4e 02 c9 06 f0 12 c2 10 a6 25 8e
>3a47f8	4c 02 c9 07 f0 07 e2 10 a6 29 8e 4f 02 ab 2b 28
>3a4808	6b 08 0b 8b 08 c2 20 48 a9 47 08 5b 68 28 e2 20
>3a4818	c2 10 a2 00 00 bf 90 57 3a f0 18 c7 08 f0 03 e8
>3a4828	80 f3 c2 20 8a 0a aa bf 3f 48 3a 8f 2d 08 00 22
>3a4838	63 48 3a ab 2b 28 6b 38 3f 40 3f 44 3f 48 3f 4c
>3a4848	3f 50 3f 54 3f 58 3f 5c 3f 60 3f 3c 3f 64 3f 68
>3a4858	3f 6c 3f e4 42 70 3f 74 3f ad 3f 6c 2d 08 08 8b
>3a4868	0b 08 c2 20 48 a9 47 08 5b 68 28 e2 20 a5 31 c9
>3a4878	02 b0 03 4c 0c 4a c2 20 a5 0d 85 32 a5 0f 85 34
>3a4888	c2 20 22 0e 4c 3a c9 ff ff f0 10 85 54 e2 20 a5
>3a4898	31 c9 03 f0 36 a9 13 85 4f 80 4c 20 52 03 08 e2
>3a48a8	20 48 a9 3a 48 ab 68 28 c2 10 a2 43 4a 20 96 03
>3a48b8	4c 0c 4a 20 52 03 08 e2 20 48 a9 3a 48 ab 68 28
>3a48c8	c2 10 a2 52 4a 20 96 03 4c 0c 4a e2 20 22 44 4c
>3a48d8	3a c9 ff f0 de 85 4f c9 03 f0 62 c9 0b f0 5e c9
>3a48e8	13 f0 04 c9 08 f0 00 22 3c 4b 3a b0 03 4c d5 49
>3a48f8	87 32 22 bc 55 3a 08 e2 20 48 a9 00 48 ab 68 28
>3a4908	c2 20 a5 32 85 56 a5 34 85 58 e2 20 a5 4f c9 12
>3a4918	f0 6c c9 16 f0 68 c9 14 f0 7c 29 3f c9 02 d0 03
>3a4928	4c 03 4a c2 20 29 ff 00 aa e2 20 bf 02 55 3a c9
>3a4938	03 f0 57 c9 02 f0 5f c9 01 f0 67 80 71 c2 20 a5
>3a4948	54 c9 7a 51 f0 26 c9 de 51 f0 2a c9 5e 51 f0 1c
>3a4958	c9 62 51 f0 17 c9 6a 51 f0 12 c9 52 51 f0 0d c9
>3a4968	66 51 f0 08 c9 4e 51 f0 03 4c ef 48 e2 20 a9 12
>3a4978	85 4f 4c ef 48 e2 20 a9 16 85 4f 4c ef 48 22 7f
>3a4988	4a 3a 90 60 c9 02 f0 0e 80 18 a0 02 00 b9 97 08
>3a4998	97 56 22 bc 55 3a a0 01 00 b9 97 08 97 56 22 bc
>3a49a8	55 3a a0 00 00 b9 97 08 97 56 22 bc 55 3a e2 20
>3a49b8	a9 41 20 18 00 a9 20 20 18 00 a6 32 86 4a a6 34
>3a49c8	86 4c 22 66 50 3a a9 20 20 18 00 80 37 20 52 03
>3a49d8	08 e2 20 48 a9 3a 48 ab 68 28 c2 10 a2 10 4a 20
>3a49e8	96 03 80 20 20 52 03 08 e2 20 48 a9 3a 48 ab 68
>3a49f8	28 c2 10 a2 60 4a 20 96 03 80 09 a5 4f 29 c0 d0
>3a4a08	95 4c aa 49 2b ab 28 6b 41 64 64 72 65 73 73 69
>3a4a18	6e 67 20 6d 6f 64 65 20 6e 6f 74 20 64 65 66 69
>3a4a28	6e 65 64 20 66 6f 72 20 74 68 61 74 20 69 6e 73
>3a4a38	74 72 75 63 74 69 6f 6e 2e 0d 00 42 61 64 20 6d
>3a4a48	6e 65 6d 6f 6e 69 63 2e 0d 00 42 61 64 20 6f 70
>3a4a58	65 72 61 6e 64 2e 0d 00 52 65 6c 61 74 69 76 65
>3a4a68	20 6f 66 66 73 65 74 20 69 73 20 74 6f 6f 20 6c
>3a4a78	61 72 67 65 2e 0d 00 08 0b 08 c2 20 48 a9 47 08
>3a4a88	5b 68 28 e2 20 a5 4f c9 12 f0 0a c2 20 18 a5 32
>3a4a98	69 02 00 80 08 c2 20 18 a5 32 69 01 00 85 4a a5
>3a4aa8	34 69 00 00 85 4c 38 a5 50 e5 4a 85 50 a5 52 e5
>3a4ab8	4c 85 52 e2 20 a5 4f c9 16 f0 1e a5 50 30 0c a5
>3a4ac8	51 d0 2a a5 52 d0 26 a9 01 80 26 a5 51 c9 ff d0
>3a4ad8	1c a5 52 c9 ff d0 16 80 18 a5 51 30 06 a5 52 d0
>3a4ae8	0c 80 0e a5 52 c9 ff d0 04 a9 02 80 04 2b 28 18
>3a4af8	6b 2b 28 38 6b 08 0b c2 10 da 08 c2 20 48 a9 47
>3a4b08	08 5b 68 28 e2 20 a2 00 00 df 00 60 3a f0 08 e8
>3a4b18	e0 10 00 f0 1b 80 f2 c2 20 06 50 26 52 06 50 26
>3a4b28	52 06 50 26 52 06 50 26 52 e2 20 8a 05 50 85 50
>3a4b38	fa 2b 28 6b 0b 8b 08 c2 20 48 a9 47 08 5b 68 28
>3a4b48	08 e2 20 48 a9 3a 48 ab 68 28 e2 20 a5 4f 29 3f
>3a4b58	85 4a c2 30 a2 00 00 a0 00 00 bd 00 52 f0 1b c5
>3a4b68	54 d0 0d e2 20 b9 02 54 29 3f c5 4a f0 07 c2 20
>3a4b78	e8 e8 c8 80 e5 98 38 ab 2b 6b 18 ab 2b 6b 08 0b
>3a4b88	08 c2 20 48 a9 47 08 5b 68 28 e2 20 c2 10 a0 00
>3a4b98	00 64 50 64 52 b7 03 f0 11 c9 64 f0 19 48 b7 36
>3a4ba8	85 4a 68 c5 4a d0 0b c8 80 eb b7 36 d0 04 2b 28
>3a4bb8	38 6b 2b 28 18 6b e2 20 b7 36 c9 3a b0 04 c9 30
>3a4bc8	b0 14 c9 47 b0 04 c9 41 b0 0c c9 67 b0 e4 c9 61
>3a4bd8	b0 02 80 de 29 df 22 fd 4a 3a 80 cb 0b 08 c2 20
>3a4be8	48 a9 47 08 5b 68 28 a0 00 00 e2 20 b7 03 f0 03
>3a4bf8	c8 80 f9 c2 20 c8 5a 68 18 65 03 85 03 a5 05 69
>3a4c08	00 00 85 05 2b 6b 0b 08 c2 20 48 a9 47 08 5b 68
>3a4c18	28 c2 20 a5 11 85 36 a5 13 85 38 a9 8e 50 85 03
>3a4c28	a9 3a 00 85 05 22 86 4b 3a b0 0d 22 e4 4b 3a a7
>3a4c38	03 d0 f2 a9 ff ff 80 02 a5 03 2b 6b 08 0b 08 c2
>3a4c48	20 48 a9 47 08 5b 68 28 c2 30 a5 15 85 36 a5 17
>3a4c58	85 38 a9 1a 55 85 03 a9 3a 00 85 05 22 86 4b 3a
>3a4c68	b0 22 22 e4 4b 3a c2 20 18 a5 03 69 01 00 85 03
>3a4c78	a5 05 69 00 00 85 05 e2 20 a7 03 d0 df c2 20 a9
>3a4c88	ff ff 80 0d 22 e4 4b 3a e2 20 a7 03 c2 20 29 ff
>3a4c98	00 2b 28 6b 08 8b 0b 08 c2 20 48 a9 47 08 5b 68
>3a4ca8	28 e2 20 a5 31 c9 02 b0 16 c9 01 90 20 c2 20 18
>3a4cb8	a5 0d 69 00 01 85 11 e2 20 a5 0f 69 00 85 13 c2
>3a4cc8	20 a5 0d 85 32 e2 20 a5 0f 85 34 80 12 c2 20 18
>3a4cd8	a5 32 69 00 01 85 11 e2 20 a5 34 69 00 85 13 22
>3a4ce8	02 4d 3a e2 20 a5 34 c5 13 90 f4 c2 20 a5 32 c5
>3a4cf8	11 90 ec 20 52 03 2b ab 28 6b 08 0b e2 20 a9 41
>3a4d08	20 18 00 a9 20 20 18 00 08 c2 20 48 a9 79 08 5b
>3a4d18	68 28 c2 20 a5 00 85 18 e2 20 a5 02 85 1a 22 66
>3a4d28	50 3a a9 20 20 18 00 c2 20 18 a5 00 69 01 00 85
>3a4d38	18 e2 20 a5 02 69 00 85 1a e2 20 c2 10 a7 00 c9
>3a4d48	c2 d0 0b 48 a7 18 49 ff 2f 95 08 00 80 0b c9 e2
>3a4d58	d0 0c 48 a7 18 0f 95 08 00 8f 95 08 00 68 c2 20
>3a4d68	29 ff 00 0a aa bf 00 52 3a aa 22 e0 4f 3a e2 20
>3a4d78	a7 00 aa bf 02 54 3a 22 bc 55 3a 22 8d 4d 3a 20
>3a4d88	52 03 2b 28 6b 08 e2 20 48 29 3f 0a c2 10 aa 68
>3a4d98	7c 9b 4d cb 4d e6 4d ed 4d 12 4e 19 4e 34 4e 56
>3a4da8	4e 67 4e a4 4e ac 4e bd 4e ce 4e d5 4e fa 4e 27
>3a4db8	4f 93 4e 78 4e 45 4e 1a 4f 24 4f 38 4f 67 4f 15
>3a4dc8	4f 78 4f a9 28 20 18 00 22 8f 4f 3a a9 2c 20 18
>3a4dd8	00 a9 58 20 18 00 a9 29 20 18 00 4c 89 4f 22 8f
>3a4de8	4f 3a 4c 89 4f e2 20 48 a9 23 20 18 00 68 29 c0
>3a4df8	c9 00 f0 0f 4a 4a 2f 95 08 00 d0 07 22 99 4f 3a
>3a4e08	4c 89 4f 22 8f 4f 3a 4c 89 4f 22 99 4f 3a 4c 89
>3a4e18	4f a9 28 20 18 00 22 8f 4f 3a a9 29 20 18 00 a9
>3a4e28	2c 20 18 00 a9 59 20 18 00 4c 89 4f 22 8f 4f 3a
>3a4e38	a9 2c 20 18 00 a9 58 20 18 00 4c 89 4f 22 8f 4f
>3a4e48	3a a9 2c 20 18 00 a9 59 20 18 00 4c 89 4f 22 99
>3a4e58	4f 3a a9 2c 20 18 00 a9 59 20 18 00 4c 89 4f 22
>3a4e68	99 4f 3a a9 2c 20 18 00 a9 58 20 18 00 4c 89 4f
>3a4e78	a9 28 20 18 00 22 99 4f 3a a9 2c 20 18 00 a9 58
>3a4e88	20 18 00 a9 29 20 18 00 4c 89 4f a9 28 20 18 00
>3a4e98	22 8f 4f 3a a9 29 20 18 00 4c 89 4f a9 41 20 18
>3a4ea8	00 4c 8d 4f 22 8f 4f 3a a9 2c 20 18 00 a9 53 20
>3a4eb8	18 00 4c 89 4f a9 5b 20 18 00 22 8f 4f 3a a9 5d
>3a4ec8	20 18 00 4c 89 4f 22 a7 4f 3a 4c 8d 4f a9 28 20
>3a4ed8	18 00 22 8f 4f 3a a9 2c 20 18 00 a9 53 20 18 00
>3a4ee8	a9 29 20 18 00 a9 2c 20 18 00 a9 59 20 18 00 4c
>3a4ef8	89 4f a9 5b 20 18 00 22 8f 4f 3a a9 5d 20 18 00
>3a4f08	a9 2c 20 18 00 a9 59 20 18 00 4c 89 4f a0 02 00
>3a4f18	80 03 a0 01 00 22 0d 50 3a 4c 8d 4f 4c 8d 4f 22
>3a4f28	a7 4f 3a a9 2c 20 18 00 a9 58 20 18 00 4c 8d 4f
>3a4f38	a9 23 20 18 00 8b a5 02 48 ab a6 00 e8 a0 01 00
>3a4f48	22 62 03 3a a9 2c 20 18 00 a9 23 20 18 00 a6 00
>3a4f58	a0 01 00 22 62 03 3a ab 22 bc 55 3a 4c 89 4f a9
>3a4f68	28 20 18 00 22 99 4f 3a a9 29 20 18 00 4c 89 4f
>3a4f78	a9 5b 20 18 00 22 99 4f 3a a9 5d 20 18 00 4c 89
>3a4f88	4f 22 bc 55 3a 28 6b 08 e2 20 a7 00 20 c0 03 28
>3a4f98	6b 08 c2 30 a7 00 20 a6 03 22 bc 55 3a 28 6b 08
>3a4fa8	8b 0b c2 30 5a 08 c2 20 48 a9 79 08 5b 68 28 08
>3a4fb8	e2 20 48 a9 00 48 ab 68 28 e2 20 a0 00 00 a7 00
>3a4fc8	99 91 08 22 bc 55 3a c8 c0 03 00 d0 f1 22 66 50
>3a4fd8	3a c2 30 7a 2b ab 28 6b 08 8b e2 20 c2 10 08 e2
>3a4fe8	20 48 a9 3a 48 ab 68 28 bd 00 00 20 18 00 e8 bd
>3a4ff8	00 00 20 18 00 e8 bd 00 00 20 18 00 e8 a9 20 20
>3a5008	18 00 ab 28 6b 08 0b 08 c2 20 48 a9 79 08 5b 68
>3a5018	28 e2 20 c0 02 00 f0 14 a7 00 85 18 30 06 64 19
>3a5028	64 1a 80 1e a9 ff 85 19 85 1a 80 16 a7 00 85 18
>3a5038	22 bc 55 3a a7 00 85 19 30 04 64 1a 80 04 a9 ff
>3a5048	85 1a c2 20 38 a5 00 65 18 85 18 e2 20 a5 02 65
>3a5058	1a 85 1a 22 66 50 3a 22 bc 55 3a 2b 28 6b 08 0b
>3a5068	c2 20 48 08 c2 20 48 a9 47 08 5b 68 28 e2 20 a5
>3a5078	4c 20 c0 03 e2 20 a9 3a 20 18 00 c2 20 a5 4a 20
>3a5088	a6 03 68 2b 28 6b 4f 52 41 00 41 4e 44 00 45 4f
>3a5098	52 00 41 44 43 00 53 54 41 00 4c 44 41 00 43 4d
>3a50a8	50 00 53 42 43 00 41 53 4c 00 52 4f 4c 00 4c 53
>3a50b8	52 00 52 4f 52 00 53 54 58 00 4c 44 58 00 44 45
>3a50c8	43 00 49 4e 43 00 42 49 54 00 4a 4d 50 00 53 54
>3a50d8	59 00 4c 44 59 00 43 50 59 00 43 50 58 00 42 52
>3a50e8	4b 00 4a 53 52 00 52 54 49 00 52 54 53 00 50 48
>3a50f8	50 00 50 4c 50 00 50 48 41 00 50 4c 41 00 44 45
>3a5108	59 00 54 41 59 00 49 4e 59 00 49 4e 58 00 43 4c
>3a5118	43 00 53 45 43 00 43 4c 49 00 53 45 49 00 54 59
>3a5128	41 00 43 4c 56 00 43 4c 44 00 53 45 44 00 54 58
>3a5138	41 00 54 58 53 00 54 41 58 00 54 53 58 00 44 45
>3a5148	58 00 4e 4f 50 00 42 50 4c 00 42 4d 49 00 42 56
>3a5158	43 00 42 56 53 00 42 43 43 00 42 43 53 00 42 4e
>3a5168	45 00 42 45 51 00 54 53 42 00 54 52 42 00 53 54
>3a5178	5a 00 42 52 41 00 50 48 59 00 50 4c 59 00 50 48
>3a5188	58 00 50 4c 58 00 50 48 44 00 50 4c 44 00 50 48
>3a5198	4b 00 52 54 4c 00 50 48 42 00 50 4c 42 00 57 41
>3a51a8	49 00 58 42 41 00 54 43 53 00 54 53 43 00 54 43
>3a51b8	44 00 54 44 43 00 54 58 59 00 54 59 58 00 53 54
>3a51c8	50 00 58 43 45 00 43 4f 50 00 4a 53 4c 00 57 44
>3a51d8	4d 00 50 45 52 00 42 52 4c 00 52 45 50 00 53 45
>3a51e8	50 00 4d 56 50 00 4d 56 4e 00 50 45 49 00 50 45
>3a51f8	41 00 4a 4d 4c 00 00 00 e6 50 8e 50 ce 51 8e 50
>3a5208	6e 51 8e 50 ae 50 8e 50 f6 50 8e 50 ae 50 8e 51
>3a5218	6e 51 8e 50 ae 50 8e 50 4e 51 8e 50 8e 50 8e 50
>3a5228	72 51 8e 50 ae 50 8e 50 16 51 8e 50 ca 50 ae 51
>3a5238	72 51 8e 50 ae 50 8e 50 ea 50 92 50 d2 51 92 50
>3a5248	ce 50 92 50 b2 50 92 50 fa 50 92 50 b2 50 92 51
>3a5258	ce 50 92 50 b2 50 92 50 52 51 92 50 92 50 92 50
>3a5268	ce 50 92 50 b2 50 92 50 1a 51 92 50 c6 50 b2 51
>3a5278	ce 50 92 50 b2 50 92 50 ee 50 96 50 d6 51 96 50
>3a5288	ea 51 96 50 b6 50 96 50 fe 50 96 50 b6 50 96 51
>3a5298	d2 50 96 50 b6 50 96 50 56 51 96 50 96 50 96 50
>3a52a8	ee 51 96 50 b6 50 96 50 1e 51 96 50 7e 51 b6 51
>3a52b8	fa 51 96 50 b6 50 96 50 f2 50 9a 50 da 51 9a 50
>3a52c8	76 51 9a 50 ba 50 9a 50 02 51 9a 50 ba 50 9a 51
>3a52d8	d2 50 9a 50 ba 50 9a 50 5a 51 9a 50 9a 50 9a 50
>3a52e8	76 51 9a 50 ba 50 9a 50 22 51 9a 50 82 51 ba 51
>3a52f8	d2 50 9a 50 ba 50 9a 50 7a 51 9e 50 de 51 9e 50
>3a5308	d6 50 9e 50 be 50 9e 50 06 51 ce 50 36 51 9e 51
>3a5318	d6 50 9e 50 be 50 9e 50 5e 51 9e 50 9e 50 9e 50
>3a5328	d6 50 9e 50 be 50 9e 50 26 51 9e 50 3a 51 be 51
>3a5338	76 51 9e 50 76 51 9e 50 da 50 a2 50 c2 50 a2 50
>3a5348	da 50 a2 50 c2 50 a2 50 0a 51 a2 50 3e 51 a2 51
>3a5358	da 50 a2 50 c2 50 a2 50 62 51 a2 50 a2 50 a2 50
>3a5368	da 50 a2 50 c2 50 a2 50 2a 51 a2 50 42 51 c2 51
>3a5378	da 50 a2 50 c2 50 a2 50 de 50 a6 50 e2 51 a6 50
>3a5388	de 50 a6 50 c6 50 a6 50 0e 51 a6 50 46 51 a6 51
>3a5398	de 50 a6 50 c6 50 a6 50 66 51 a6 50 a6 50 a6 50
>3a53a8	f2 51 a6 50 c6 50 a6 50 2e 51 a6 50 86 51 c6 51
>3a53b8	fa 51 a6 50 c6 50 a6 50 e2 50 aa 50 e6 51 aa 50
>3a53c8	e2 50 aa 50 ca 50 aa 50 12 51 aa 50 4a 51 aa 51
>3a53d8	e2 50 aa 50 ca 50 aa 50 6a 51 aa 50 aa 50 aa 50
>3a53e8	f6 51 aa 50 ca 50 aa 50 32 51 aa 50 8a 51 ca 51
>3a53f8	ea 50 aa 50 ca 50 aa 50 00 00 13 00 02 09 01 01
>3a5408	01 0a 13 82 08 13 03 03 03 0b 12 04 0f 0c 01 05
>3a5418	05 0d 13 06 08 13 03 07 07 0e 03 00 0b 09 01 01
>3a5428	01 0a 13 82 08 13 03 03 03 0b 12 04 0f 0c 05 05
>3a5438	05 0d 13 06 08 13 07 07 07 0e 13 00 13 09 14 01
>3a5448	01 0a 13 82 08 13 03 03 03 0b 12 04 0f 0c 14 05
>3a5458	05 0d 13 06 13 13 0b 07 07 0b 13 00 16 09 01 01
>3a5468	01 0a 13 82 08 13 15 03 03 0b 12 04 0f 0c 05 05
>3a5478	05 0d 13 06 13 13 10 07 07 0e 12 00 16 09 01 01
>3a5488	01 0a 13 82 13 13 03 03 03 0b 12 04 0f 0c 05 05
>3a5498	11 0d 13 06 13 13 03 07 07 0e 82 00 42 09 01 01
>3a54a8	01 0a 13 82 13 13 03 03 03 0b 12 04 0f 0c 05 05
>3a54b8	11 0d 13 06 13 13 07 07 06 0e 42 00 02 09 01 01
>3a54c8	01 0a 13 82 13 13 03 03 03 0b 12 04 0f 0c 01 05
>3a54d8	05 0d 13 06 13 13 17 07 07 0e 42 00 02 09 01 01
>3a54e8	01 0f 13 82 13 13 03 03 03 0b 12 04 0f 0c 03 05
>3a54f8	05 0d 13 06 13 13 10 07 07 0e 01 01 01 02 01 01
>3a5508	02 02 00 01 01 03 01 01 03 01 02 01 01 00 02 02
>3a5518	02 02 41 00 08 64 64 3a 64 64 64 64 2c 58 00 0e
>3a5528	64 64 3a 64 64 64 64 00 0b 64 64 64 64 2c 58 00
>3a5538	07 64 64 64 64 2c 59 00 06 64 64 64 64 00 03 64
>3a5548	64 2c 58 00 05 64 64 2c 59 00 11 64 64 2c 53 00
>3a5558	09 64 64 00 01 23 64 64 64 64 00 c2 23 64 64 2c
>3a5568	23 64 64 00 14 23 64 64 00 02 28 64 64 2c 53 29
>3a5578	2c 59 00 0c 28 64 64 64 64 2c 58 29 00 10 28 64
>3a5588	64 64 64 29 00 10 28 64 64 2c 58 29 00 00 28 64
>3a5598	64 29 2c 59 00 04 28 64 64 29 00 0f 5b 64 64 64
>3a55a8	64 5d 00 17 5b 64 64 5d 2c 59 00 0d 5b 64 64 5d
>3a55b8	00 0a 00 00 08 c2 20 48 18 af 79 08 00 69 01 00
>3a55c8	8f 79 08 00 e2 20 af 7b 08 00 69 00 8f 7b 08 00
>3a55d8	c2 20 68 28 6b 08 c2 10 e2 20 da a2 08 00 0a b0
>3a55e8	08 48 a9 30 20 18 00 80 06 48 a9 31 20 18 00 68
>3a55f8	ca d0 eb fa 28 6b 08 c2 20 48 a9 47 08 5b 68 28
>3a5608	e2 20 a7 32 f0 0a c9 20 d0 06 22 bc 55 3a 80 f2
>3a5618	6b 08 c2 20 48 a9 47 08 5b 68 28 e2 20 64 4a c2
>3a5628	20 64 50 64 52 e2 20 a7 32 c9 3a f0 0d 20 13 04
>3a5638	90 0e 22 fd 4a 3a a9 01 85 4a 22 bc 55 3a 80 e5
>3a5648	a5 4a f0 16 a5 31 c2 20 29 ff 00 0a 0a aa a5 50
>3a5658	95 0d a5 52 95 0f e2 20 e6 31 6b e2 20 64 31 22
>3a5668	fe 55 3a a7 32 f0 17 22 19 56 3a a5 31 c9 09 b0
>3a5678	0d a7 32 f0 09 c9 20 f0 e6 20 13 04 b0 e1 6b 08
>3a5688	0b 08 c2 20 48 a9 47 08 5b 68 28 c2 10 e2 20 a2
>3a5698	31 00 74 00 ca d0 fb a9 00 85 02 85 34 c2 20 a9
>3a56a8	00 4f 85 00 85 32 e2 20 22 fe 55 3a c9 00 f0 38
>3a56b8	c2 20 a5 32 85 08 e2 20 a5 34 85 0a a2 01 00 22
>3a56c8	bc 55 3a a7 32 d0 06 86 0b 64 31 80 1b c9 20 f0
>3a56d8	03 e8 80 eb 86 0b a9 00 87 32 22 bc 55 3a a7 08
>3a56e8	c9 41 f0 07 22 63 56 3a 2b 28 6b 22 fe 55 3a a7
>3a56f8	32 f0 f5 22 19 56 3a 22 fe 55 3a a7 32 f0 e9 c2
>3a5708	20 a5 32 85 11 e2 20 a5 34 85 13 22 bc 55 3a a7
>3a5718	32 f0 26 c9 20 d0 f4 a9 00 87 32 e6 31 22 bc 55
>3a5728	3a 22 fe 55 3a a7 32 f0 bf c2 20 a5 32 85 15 e2
>3a5738	20 a5 34 85 17 e6 31 80 af e6 31 80 ab 5c 1d 1f
>3a5748	3a 6b 00 00 00 00 00 00 42 61 64 20 61 72 67 75
>3a5758	6d 65 6e 74 73 0d 00 0d 20 20 50 43 20 20 20 20
>3a5768	20 41 20 20 20 20 58 20 20 20 20 59 20 20 20 20
>3a5778	53 50 20 20 20 44 42 52 20 44 50 20 20 20 4e 56
>3a5788	4d 58 44 49 5a 43 0d 00 41 43 44 46 47 4a 48 4c
>3a5798	4d 52 3b 53 54 56 57 58 3e 3f 00 18 fb 08 c2 20
>3a57a8	48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68
>3a57b8	28 c2 30 20 e2 57 a9 ff fe 1b 08 e2 20 48 a9 3a
>3a57c8	48 ab 68 28 a2 e2 61 20 96 03 08 e2 20 48 a9 00
>3a57d8	48 ab 68 28 4c 1d 1f 4c df 57 08 20 03 03 20 4c
>3a57e8	38 28 60 00 00 00 00 00 00 00 00 00 00 00 00 00
>3a57f8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 127 times (2032 bytes)...
>3a5ff8	00 00 00 00 00 00 00 00 30 31 32 33 34 35 36 37
>3a6008	38 39 41 42 43 44 45 46 2b 00 2d 00 2a 00 2f 00
>3a6018	4d 4f 44 00 5e 00 3c 00 3d 00 3e 00 4e 4f 54 00
>3a6028	41 4e 44 00 4f 52 00 28 00 29 00 52 45 4d 00 50
>3a6038	52 49 4e 54 00 4c 45 54 00 47 4f 54 4f 00 45 4e
>3a6048	44 00 49 46 00 54 48 45 4e 00 45 4c 53 45 00 47
>3a6058	4f 53 55 42 00 52 45 54 55 52 4e 00 46 4f 52 00
>3a6068	54 4f 00 53 54 45 50 00 4e 45 58 54 00 44 4f 00
>3a6078	4c 4f 4f 50 00 57 48 49 4c 45 00 55 4e 54 49 4c
>3a6088	00 45 58 49 54 00 43 4c 52 00 53 54 4f 50 00 50
>3a6098	4f 4b 45 00 50 4f 4b 45 57 00 50 4f 4b 45 4c 00
>3a60a8	43 4c 53 00 52 45 41 44 00 44 41 54 41 00 52 45
>3a60b8	53 54 4f 52 45 00 44 49 4d 00 43 41 4c 4c 00 3c
>3a60c8	3d 00 3e 3d 00 3c 3e 00 2d 00 4c 45 4e 00 50 45
>3a60d8	45 4b 00 50 45 45 4b 57 00 50 45 45 4b 4c 00 43
>3a60e8	48 52 24 00 41 53 43 00 53 50 43 00 54 41 42 00
>3a60f8	41 42 53 00 53 47 4e 00 48 45 58 24 00 44 45 43
>3a6108	00 53 54 52 24 00 56 41 4c 00 4c 45 46 54 24 00
>3a6118	52 49 47 48 54 24 00 4d 49 44 24 00 52 55 4e 00
>3a6128	4e 45 57 00 4c 4f 41 44 00 4c 49 53 54 00 44 49
>3a6138	52 00 4d 4f 4e 49 54 4f 52 00 47 45 54 00 49 4e
>3a6148	50 55 54 00 53 45 54 42 4f 52 44 45 52 00 54 45
>3a6158	58 54 43 4f 4c 4f 52 00 53 45 54 42 47 43 4f 4c
>3a6168	4f 52 00 53 45 54 44 41 54 45 00 47 45 54 44 41
>3a6178	54 45 24 00 53 45 54 54 49 4d 45 00 47 45 54 54
>3a6188	49 4d 45 24 00 47 52 41 50 48 49 43 53 00 53 45
>3a6198	54 43 4f 4c 4f 52 00 50 49 58 4d 41 50 00 43 4c
>3a61a8	52 50 49 58 4d 41 50 00 50 4c 4f 54 00 4c 49 4e
>3a61b8	45 00 46 49 4c 4c 00 53 50 52 49 54 45 00 53 50
>3a61c8	52 49 54 45 41 54 00 53 50 52 49 54 45 53 48 4f
>3a61d8	57 00 0d 52 45 41 44 59 0d 00 43 32 35 36 20 46
>3a61e8	6f 65 6e 69 78 20 42 41 53 49 43 38 31 36 20 76
>3a61f8	30 30 2e 30 30 20 61 6c 70 68 61 20 28 32 30 32
>3a6208	30 2d 30 31 2d 30 31 29 0d 00

;******  End of listing
