
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -D TARGET=2 -D TARGET_SYS=3 --long-address --flat --intel-hex -o kernel_U_Plus.hex --list kernel_U_Plus_hex.lst --labels=kernel_U_Plus_hex.lbl src\kernel.asm
; Fri Apr 30 19:53:59 2021

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=2						TARGET=2
=3						TARGET_SYS=3

;******  Processing input file: src\kernel.asm

=0						TEST_KEYBOARD = 0 ; This is to enable the ScreenOutput
=1						SYS_C256_FMX = 1                            ; The target system is the C256 Foenix FMX
=2						SYS_C256_U = 2                              ; The target system is the C256 Foenix U With 2Megs of Code Memory
=3						SYS_C256_U_PLUS = 3                         ; The target system is the C256 Foenix U With 4Megs of Code Memory
=1						TARGET_FLASH = 1                            ; The code is being assembled for Flash
=2						TARGET_RAM = 2                              ; The code is being assembled for RAM
=0						START_OF_FLASH := 0
=0						START_OF_KERNEL := 0
=0						START_OF_BASIC := 0
=0						START_OF_CREDITS := 0
=0						START_OF_SPLASH := 0
=0						START_OF_FONT := 0
=$380000					  START_OF_FLASH := $380000                   ; The Foenix FMX Flash starts at $380000
=$390400					  START_OF_KERNEL := $390400                  ; The kernel itself starts at $390400
=$3a0000					  START_OF_BASIC := $3A0000                   ; The BASIC flash code starts at $3A0000
=$3b0000					  START_OF_CREDITS := $3B0000                 ; The credits screen starts at $3B0000
=$3e0000					  START_OF_SPLASH := $3E0000                  ; SplashScreen Code and Data $3E0000
=$3f0000					  START_OF_FONT := $3F0000                    ; The font starts at $3F0000

;******  Processing file: src\Includes/macros_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/characters.asm

=$01						CHAR_CTRL_A = $01   ; CTRL-A (move to start of line)
=$03						CHAR_CTRL_C = $03   ; CTRL-C
=$05						CHAR_CTRL_E = $05   ; CTRL-E (move to end of line)
=$08						CHAR_BS = $08       ; Backspace (delete character to the left of the cursor)
=$09						CHAR_TAB = $09      ; TAB (moves cursor to next tabulated column)
=$0a						CHAR_LF = $0A       ; Line feed
=$0d						CHAR_CR = $0D       ; Carriage return
=$0f						CHAR_INS = $0F      ; Insert a space at the cursor
=$11						CHAR_UP = $11       ; Up arrow
=$1b						CHAR_ESC = $1B      ; ESC
=$1d						CHAR_RIGHT = $1D    ; Right arrow
=$20						CHAR_SP = $20       ; Space
=$91						CHAR_DOWN = $91     ; Down arrow
=$9d						CHAR_LEFT = $9D     ; Left arrow
=$7f						CHAR_DEL = $7F      ; Delete key (delete the character at the cursor)
=$81						CHAR_F1 = $81       ; Function keys
=$82						CHAR_F2 = $82
=$83						CHAR_F3 = $83
=$84						CHAR_F4 = $84
=$85						CHAR_F5 = $85
=$86						CHAR_F6 = $86
=$87						CHAR_F7 = $87
=$88						CHAR_F8 = $88
=$89						CHAR_F9 = $89
=$8a						CHAR_F10 = $8A
=$8b						CHAR_F11 = $8B
=$8c						CHAR_F12 = $8C

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/simulator_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/page_00_inc.asm

=$000000					BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000					TMPPTR1          = $000000 ; 4 byte temporary pointer
=$000004					TMPPTR2          = $000004 ; 4 byte temporary pointer
=$000008					KRNL_BOOT_MENU_K = $000008 ; Keyboard Tap in Boot Menu
=$000008					OPL2_ADDY_PTR_LO = $000008 ; THis Points towards the Instruments Database
=$000009					OPL2_ADDY_PTR_MD = $000009
=$00000a					OPL2_ADDY_PTR_HI = $00000A ;
=$00000c					SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f					COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011					COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013					LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=25
=$000015					LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017					CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a					CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c					CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e					CURCOLOR         = $00001E ;1 Byte Color of next character to be printed to the screen.
=$00001f					COLORPOS         = $00001F ;3 Byte address of cursor's position in the color matrix
=$000022					COLORBEGIN       = $000022 ;3 Byte, address of the color screen
=$000022					STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024					STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$000026					OPL2_OPERATOR    = $000026 ;
=$000027					OPL2_CHANNEL     = $000027 ;
=$000028					OPL2_REG_REGION  = $000028 ; Offset to the Group of Registers
=$00002a					OPL2_REG_OFFSET  = $00002A ; 2 Bytes (16Bits)
=$00002c					OPL2_IND_ADDY_LL = $00002C ; 2 Bytes Reserved (Only need 3)
=$00002e					OPL2_IND_ADDY_HL = $00002E ; 2 Bytes Reserved (Only need 3)
=$000030					OPL2_NOTE        = $000030 ; 1 Byte
=$000031					OPL2_OCTAVE      = $000031 ; 1 Byte
=$000032					OPL2_PARAMETER0  = $000032 ; 1 Byte - Key On/Feedback
=$000033					OPL2_PARAMETER1  = $000033 ; 1 Byte
=$000034					OPL2_PARAMETER2  = $000034 ; 1 Byte
=$000035					OPL2_PARAMETER3  = $000035 ; 1 Byte
=$000036					OPL2_LOOP        = $000036 ;
=$000036					OPL2_BLOCK       = $000036
=$000038					SDCARD_FILE_PTR  = $000038 ; 3 Bytes Pointer to Filename to open
=$00003c					SDCARD_BYTE_NUM  = $00003C ; 2Bytes
=$00003f					SDCARD_PRSNT_MNT = $00003F ; 1 Byte, Indicate that the SDCard is Present and that it is Mounted
=$000040					BM_CLEAR_SCRN_X  = $000040
=$000042					BM_CLEAR_SCRN_Y  = $000042
=$000040					RAD_STARTLINE    = $000040 ; 1 Byte
=$000041					RAD_PATTERN_IDX  = $000041 ; 1 Byte
=$000042					RAD_LINE         = $000042 ; 1 Byte
=$000043					RAD_LINENUMBER   = $000043 ; 1 Byte
=$000044					RAD_CHANNEL_NUM  = $000044 ; 1 Byte
=$000045					RAD_ISLASTCHAN   = $000045 ; 1 Byte
=$000046					RAD_Y_POINTER    = $000046 ; 2 Bytes
=$000048					RAD_TICK         = $000048
=$00004a					RAD_CHANNEL_DATA = $00004A ; 2 Bytes
=$00004c					RAD_CHANNE_EFFCT = $00004C
=$00004d					RAD_TEMP         = $00004D
=$000050					RAD_ADDR         = $000050 ; 3 bytes to avoid OPL2 errors.
=$000053					RAD_PATTRN       = $000053 ; 1 bytes - offset to patter
=$000054					RAD_PTN_DEST     = $000054 ; 3 bytes - where to write the pattern data
=$000057					RAD_CHANNEL      = $000057 ; 2 bytes - 0 to 8
=$000059					RAD_LAST_NOTE    = $000059 ; 1 if this is the last note
=$00005a					RAD_LINE_PTR     = $00005A ; 2 bytes - offset to memory location
=$000040					BMP_X_SIZE       = $000040 ; 2 Bytes
=$000042					BMP_Y_SIZE       = $000042 ; 2 Bytes
=$000044					BMP_PRSE_SRC_PTR = $000044 ; 3 Bytes
=$000048					BMP_PRSE_DST_PTR = $000048 ; 3 Bytes
=$00004c					BMP_COLOR_PALET  = $00004C ; 2 Bytes
=$00004e					SCRN_X_STRIDE    = $00004E ; 2 Bytes, Basically How many Pixel Accross in Bitmap Mode
=$000050					BMP_FILE_SIZE    = $000050 ; 4 Bytes
=$000054					BMP_POSITION_X   = $000054 ; 2 Bytes Where, the BMP will be position on the X Axis
=$000056					BMP_POSITION_Y   = $000056 ; 2 Bytes Where, the BMP will be position on the Y Axis
=$000058					BMP_PALET_CHOICE = $000058 ;
=$000060					EVID_SCREENBEGIN      = $000060 ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$000063					EVID_COLS_VISIBLE     = $000063 ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000065					EVID_COLS_PER_LINE    = $000065 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000067					EVID_LINES_VISIBLE    = $000067 ;2 Bytes The number of rows visible on the screen. Default=25
=$000069					EVID_LINES_MAX        = $000069 ;2 Bytes The number of rows in memory for the screen. Default=64
=$00006b					EVID_CURSORPOS        = $00006B ;3 Bytes The next character written to the screen will be written in this location.
=$00006e					EVID_CURSORX          = $00006E ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$000070					EVID_CURSORY          = $000070 ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$000072					EVID_CURCOLOR         = $000072 ;1 Byte Color of next character to be printed to the screen.
=$000073					EVID_COLORBEGIN       = $000073 ;
=$000076					EVID_COLORPOS         = $000076 ;3 Byte address of cursor's position in the color matrix
=$000079					EVID_TMPPTR1          = $000079 ; 4 byte temporary pointer
=$00007d					EVID_PRESENT          = $00007D ;1 Byte: is the EVID present?
=$000098					TEXT_SRC_PTR_L   = $000098
=$00009a					TEXT_SRC_PTR_H   = $00009A
=$00009c					TEXT_DST_PTR_L   = $00009C
=$00009e					TEXT_DST_PTR_H   = $00009E
=$0000a0					TEXT_INDEX       = $0000A0
=$0000a0					MOD_SELECT_L     = $0000A0
=$0000a2					MOD_SELECT_H     = $0000A2
=$0000a2					TEXT_CURSOR_X    = $0000A2
=$0000a4					TEXT_CURSOR_Y    = $0000A4
=$0000a6					LINE_INDEX       = $0000A6
=$0000a8					COLOR_DST_PTR_L  = $0000A8
=$0000aa					COLOR_DST_PTR_H  = $0000AA
=$0000b0					MODEL            = $0000B0
=$0000e0					MOUSE_PTR        = $0000E0
=$0000e1					MOUSE_POS_X_LO   = $0000E1
=$0000e2					MOUSE_POS_X_HI   = $0000E2
=$0000e3					MOUSE_POS_Y_LO   = $0000E3
=$0000e4					MOUSE_POS_Y_HI   = $0000E4
=$0000f0					USER_TEMP        = $0000F0 ;32 Bytes Temp space for user programs
=$0000f0					INTERRUPT_STATE  = $0000F0      ; 1 byte: current state of the boot menu color cycler
=$0000f1					INTERRUPT_COUNT  = $0000F1      ; 1 byte: counter for the boot menu color cycler
=$0000f2					IRQ_COLOR_CHOICE = $0000F2      ; 1 byte: index of the color to cycle in the boot menu
=$000100					GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000140					INT_CONTROLLER   = $000140 ; $000140...$00015F Interrupt Controller
=$000160					TIMER_CONTROLLER = $000160 ; $000160...$00017F Timer0/Timer1/Timer2 Block
=$000160					TIMER_CTRL_REGLL = $000160 ;
=$000161					TIMER_CTRL_REGLH = $000161 ;
=$000162					TIMER_CTRL_REGHL = $000162 ;
=$000163					TIMER_CTRL_REGHH = $000163 ;
=$000240					CPU_REGISTERS    = $000240 ; Byte
=$000240					CPUPC            = $000240 ;2 Bytes Program Counter (PC)
=$000242					CPUPBR           = $000242 ;2 Bytes Program Bank Register (K)
=$000244					CPUA             = $000244 ;2 Bytes Accumulator (A)
=$000246					CPUX             = $000246 ;2 Bytes X Register (X)
=$000248					CPUY             = $000248 ;2 Bytes Y Register (Y)
=$00024a					CPUSTACK         = $00024A ;2 Bytes Stack Pointer (S)
=$00024c					CPUDP            = $00024C ;2 Bytes Direct Page Register (D)
=$00024e					CPUDBR           = $00024E ;1 Byte  Data Bank Register (B)
=$00024f					CPUFLAGS         = $00024F ;1 Byte  Flags (P)
=$000250					MONITOR_VARS     = $000250 ; Byte  MONITOR Variables. BASIC variables may overlap this space
=$000250					MCMDADDR         = $000250 ;3 Bytes Address of the current line of text being processed by the command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
=$000253					MCMP_TEXT        = $000253 ;3 Bytes Address of symbol being evaluated for COMPARE routine
=$000256					MCMP_LEN         = $000256 ;2 Bytes Length of symbol being evaluated for COMPARE routine
=$000258					MCMD             = $000258 ;3 Bytes Address of the current command/function string
=$00025b					MCMD_LEN         = $00025B ;2 Bytes Length of the current command/function string
=$00025d					MARG1            = $00025D ;4 Bytes First command argument. May be data or address, depending on command
=$000261					MARG2            = $000261 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000265					MARG3            = $000265 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000269					MARG4            = $000269 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$00026d					MARG5            = $00026D ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000271					MARG6            = $000271 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000275					MARG7            = $000275 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000279					MARG8            = $000279 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000300					LOADFILE_VARS    = $000300 ; Byte
=$000300					LOADFILE_NAME    = $000300 ;3 Bytes (addr) Name of file to load. Address in Data Page
=$000303					LOADFILE_LEN     = $000303 ;1 Byte  Length of filename. 0=Null Terminated
=$000304					LOADPBR          = $000304 ;1 Byte  First Program Bank of loaded file ($05 segment)
=$000305					LOADPC           = $000305 ;2 Bytes Start address of loaded file ($05 segment)
=$000307					LOADDBR          = $000307 ;1 Byte  First data bank of loaded file ($06 segment)
=$000308					LOADADDR         = $000308 ;2 Bytes FIrst data address of loaded file ($06 segment)
=$00030a					LOADFILE_TYPE    = $00030A ;3 Bytes (addr) File type string in loaded data file. Actual string data will be in Bank 1. Valid values are BIN, PRG, P16
=$00030d					BLOCK_LEN        = $00030D ;2 Bytes Length of block being loaded
=$00030f					BLOCK_ADDR       = $00030F ;2 Bytes (temp) Address of block being loaded
=$000311					BLOCK_BANK       = $000311 ;1 Byte  (temp) Bank of block being loaded
=$000312					BLOCK_COUNT      = $000312 ;2 Bytes (temp) Counter of bytes read as file is loaded
=$000300					FDC_DRIVE        = $000300 ;1 byte - The number of the selected drive
=$000301					FDC_HEAD         = $000301 ;1 byte - The head number (0 or 1)
=$000302					FDC_CYLINDER     = $000302 ;1 byte - The cylinder number
=$000303					FDC_SECTOR       = $000303 ;1 byte - The sector number
=$000304					FDC_SECTOR_SIZE  = $000304 ;1 byte - The sector size code (2 = 512)
=$000305					FDC_SECPERTRK    = $000305 ;1 byte - The number of sectors per track (18 for 1.44 MB floppy)
=$000306					FDC_ST0          = $000306 ;1 byte - Status Register 0
=$000307					FDC_ST1          = $000307 ;1 byte - Status Register 1
=$000308					FDC_ST2          = $000308 ;1 byte - Status Register 2
=$000309					FDC_ST3          = $000309 ;1 byte - Status Register 3
=$00030a					FDC_PCN          = $00030A ;1 byte - Present Cylinder Number
=$00030b					FDC_STATUS       = $00030B ;1 byte - Status of what we think is going on with the FDC:
=$00030c					DIVIDEND         = $00030C ;4 bytes - Dividend for 32-bit division
=$000310					DIVISOR          = $000310 ;4 bytes - Divisor for 32-bit division
=$000314					REMAINDER        = $000314 ;4 bytes - Remainder for 32-bit division
=$000320					SDOS_VARIABLES   = $000320
=$000320					BIOS_STATUS      = $000320      ; 1 byte - Status of any BIOS operation
=$000321					BIOS_DEV         = $000321      ; 1 byte - Block device number for block operations
=$000322					BIOS_LBA         = $000322      ; 4 bytes - Address of block to read/write (this is the physical block, w/o reference to partition)
=$000326					BIOS_BUFF_PTR    = $000326      ; 4 bytes - 24-bit pointer to memory for read/write operations
=$00032a					BIOS_FIFO_COUNT  = $00032A      ; 2 bytes - The number of bytes read on the last block read
=$00032c					BIOS_FLAGS       = $00032C      ; 1 byte - Flags for various BIOSy things:
=$00032d					BIOS_TIMER       = $00032D      ; 1 byte - the number of 1/60 ticks for a time out
=$00032e					DOS_STATUS       = $00032E      ; 1 byte - The error code describing any error with file access
=$000330					DOS_CLUS_ID      = $000330      ; 4 bytes - The cluster desired for a DOS operation
=$000338					DOS_DIR_PTR      = $000338      ; 4 bytes - Pointer to a directory entry (assumed to be within DOS_SECTOR)
=$00033c					DOS_BUFF_PTR     = $00033C      ; 4 bytes - A pointer for DOS cluster read/write operations
=$000340					DOS_FD_PTR       = $000340      ; 4 bytes - A pointer to a file descriptor
=$000344					DOS_FAT_LBA      = $000344      ; 4 bytes - The LBA for a sector of the FAT we need to read/write
=$000348					DOS_TEMP         = $000348      ; 4 bytes - Temporary storage for DOS operations
=$00034c					DOS_FILE_SIZE    = $00034C      ; 4 bytes - The size of a file
=$000350					DOS_SRC_PTR      = $000350      ; 4 bytes - Pointer for transferring data
=$000354					DOS_DST_PTR      = $000354      ; 4 bytes - Pointer for transferring data
=$000358					DOS_END_PTR      = $000358      ; 4 bytes - Pointer to the last byte to save
=$00035c					DOS_RUN_PTR      = $00035C      ; 4 bytes - Pointer for starting a loaded program
=$000360					DOS_RUN_PARAM    = $000360      ; 4 bytes - Pointer to the ASCIIZ string for arguments in loading a program
=$000364					DOS_STR1_PTR     = $000364      ; 4 bytes - pointer to a string
=$000368					DOS_STR2_PTR     = $000368      ; 4 bytes - pointer to a string
=$00036b					DOS_SCRATCH      = $00036B      ; 4 bytes - general purpose short term storage
=$000370					DOS_BLOCK_SIZE   = $000370      ; 4 bytes - the size of a block to load (in bytes)
=$000400					DOS_PATH_BUFF    = $000400      ; 256 bytes - A buffer for path names
=$000500					FDC_PARAMETERS   = $000500      ; 16 bytes - a buffer of parameter data for the FDC
=$000510					FDC_RESULTS      = $000510      ; 16 bytes - Buffer for results of FDC commands
=$000530					FDC_PARAM_NUM    = $000530      ; 1 byte - The number of parameters to send to the FDC (including command)
=$000532					FDC_RESULT_NUM   = $000532      ; 1 byte - The number of results expected
=$000533					FDC_EXPECT_DAT   = $000533      ; 1 byte - 0 = the command expects no data, otherwise expects data
=$000534					FDC_CMD_RETRY    = $000534      ; 1 byte - a retry counter for commands
=$000700					CURRUART         = $000700 ; 3-bytes: the base address of the current UART
=$000703					CHAN_OUT         = $000703 ; 1-byte: the number of the current output channel (for PUTC, etc.)
=$000704					CHAN_IN          = $000704 ; 1-byte: the number of the current input channel (for GETCH, etc.)
=$000705					TIMERFLAGS       = $000705 ; 1-byte: flags to indicate that one of the timer interupts has triggered
=$80						TIMER0TRIGGER    = $80
=$40						TIMER1TRIGGER    = $40
=$20						TIMER2TRIGGER    = $20
=$000f00					KEY_BUFFER       = $000F00 ; 64 Bytes keyboard buffer
=$0080						KEY_BUFFER_SIZE  = $0080   ;128 Bytes (constant) keyboard buffer length
=$000f7f					KEY_BUFFER_END   = $000F7F ;  1 Byte  Last byte of keyboard buffer
=$000f83					KEY_BUFFER_CMD   = $000F83 ;  1 Byte  Indicates the Command Process Status
=$000f84					COMMAND_SIZE_STR = $000F84 ;  1 Byte
=$000f86					COMMAND_COMP_TMP = $000F86 ;  2 Bytes
=$000f87					KEYBOARD_SC_FLG  = $000F87 ;  1 Bytes that indicate the Status of Left Shift, Left CTRL, Left ALT, Right Shift
=$000f88					KEYBOARD_SC_TMP  = $000F88 ;  1 Byte, Interrupt Save Scan Code while Processing
=$000f89					KEYBOARD_LOCKS   = $000F89 ;  1 Byte, the status of the various lock keys
=$000f8a					KEYFLAG          = $000F8A ;  1 Byte, flag to indicate if CTRL-C has been pressed
=$000f8b					KEY_BUFFER_RPOS  = $000F8B ;  2 Byte, position of the character to read from the KEY_BUFFER
=$000f8d					KEY_BUFFER_WPOS  = $000F8D ;  2 Byte, position of the character to write to the KEY_BUFFER
=$001000					KERNEL_JMP_BEGIN = $001000 ; Reserved for the Kernel jump table
=$001fff					KERNEL_JMP_END   = $001FFF
=$002000					TEST_BEGIN       = $002000 ;28672 Bytes Test/diagnostic code for prototype.
=$007fff					TEST_END         = $007FFF ;0 Byte
=$008000					STACK_BEGIN      = $008000 ;32512 Bytes The default beginning of stack space
=$00feff					STACK_END        = $00FEFF ;0 Byte  End of stack space. Everything below this is I/O space
=$00ff00					    ISR_BEGIN        = $00FF00 ; Byte  Beginning of CPU vectors in Direct page
=$00ff00					    HRESET           = $00FF00 ;16 Bytes Handle RESET asserted. Reboot computer and re-initialize the kernel.
=$00ff10					    HCOP             = $00FF10 ;16 Bytes Handle the COP instruction. Program use; not used by OS
=$00ff20					    HBRK             = $00FF20 ;16 Bytes Handle the BRK instruction. Returns to BASIC Ready prompt.
=$00ff30					    HABORT           = $00FF30 ;16 Bytes Handle ABORT asserted. Return to Ready prompt with an error message.
=$00ff40					    HNMI             = $00FF40 ;32 Bytes Handle NMI
=$00ff60					    HIRQ             = $00FF60 ;32 Bytes Handle IRQ
=$00ff80					    Unused_FF80      = $00FF80 ;End of direct page Interrrupt handlers
=$00ffe0					    VECTORS_BEGIN    = $00FFE0 ;0 Byte  Interrupt vectors
=$00ffe0					    JMP_READY        = $00FFE0 ;4 Bytes Jumps to ROM READY routine. Modified whenever alternate command interpreter is loaded.
=$00ffe4					    VECTOR_COP       = $00FFE4 ;2 Bytes Native COP Interrupt vector
=$00ffe6					    VECTOR_BRK       = $00FFE6 ;2 Bytes Native BRK Interrupt vector
=$00ffe8					    VECTOR_ABORT     = $00FFE8 ;2 Bytes Native ABORT Interrupt vector
=$00ffea					    VECTOR_NMI       = $00FFEA ;2 Bytes Native NMI Interrupt vector
=$00ffec					    VECTOR_RESET     = $00FFEC ;2 Bytes Unused (Native RESET vector)
=$00ffee					    VECTOR_IRQ       = $00FFEE ;2 Bytes Native IRQ Vector
=$00fff0					    RETURN           = $00FFF0 ;4 Bytes RETURN key handler. Points to BASIC or MONITOR subroutine to execute when RETURN is pressed.
=$00fff4					    VECTOR_ECOP      = $00FFF4 ;2 Bytes Emulation mode interrupt handler
=$00fff6					    VECTOR_EBRK      = $00FFF6 ;2 Bytes Emulation mode interrupt handler
=$00fff8					    VECTOR_EABORT    = $00FFF8 ;2 Bytes Emulation mode interrupt handler
=$00fffa					    VECTOR_ENMI      = $00FFFA ;2 Bytes Emulation mode interrupt handler
=$00fffc					    VECTOR_ERESET    = $00FFFC ;2 Bytes Emulation mode interrupt handler
=$00fffe					    VECTOR_EIRQ      = $00FFFE ;2 Bytes Emulation mode interrupt handler
=$010000					    VECTORS_END      = $010000 ;*End of vector space
=$00ffff					BANK0_END        = $00FFFF ;End of Bank 00 and Direct page

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/page_00_data.asm

>380000		00 a0 af			                .long $AFA000       ; SCREENBEGIN, 3 bytes, Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>380003		4c 00				                .word 76            ; COLS_VISIBLE, 2 bytes, Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>380005		64 00				                .word 100           ; COLS_PER_LINE, 2 bytes, Columns in memory per screen line. A virtual line can be this long. Default=128
>380007		38 00				                .word 56            ; LINES_VISIBLE, 2 bytes, The number of rows visible on the screen. Default=25
>380009		40 00				                .word 64            ; LINES_MAX, 2 bytes, The number of rows in memory for the screen. Default=64
>38000b		00 a0 af			                .long $AFA000       ; CURSORPOS, 3 bytes, The next character written to the screen will be written in this location.
>38000e		00 00				                .word 0             ; CURSORX, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380010		00 00				                .word 0             ; CURSORY, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380012		0f				                .byte $0F           ; CURCOLOR, 2 bytes, Color of next character to be printed to the screen.
>380013		00				                .byte $00           ; CURATTR, 2 bytes, Attribute of next character to be printed to the screen.
>380014		00 80				                .word STACK_BEGIN   ; STACKBOT, 2 bytes, Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
>380016		ff fe				                .word STACK_END     ; STACKTOP, 2 bytes, Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/page_00_code.asm

.ff00		18		clc		RHRESET         CLC
.ff01		fb		xce		                XCE
.ff02		5c 00 10 00	jmp $001000	                JML BOOT
.ff10						RHCOP
.ff10		c2 30		rep #$30	                REP #$30        ; set A&X long
.ff12		8b		phb		                PHB
.ff13		0b		phd		                PHD
.ff14		48		pha		                PHA
.ff15		da		phx		                PHX
.ff16		5a		phy		                PHY
.ff17		5c 08 10 00	jmp $001008	                JML BREAK
.ff20						RHBRK
.ff20		c2 30		rep #$30	                REP #$30        ; set A&X long
.ff22		8b		phb		                PHB
.ff23		0b		phd		                PHD
.ff24		48		pha		                PHA
.ff25		da		phx		                PHX
.ff26		5a		phy		                PHY
.ff27		5c 08 10 00	jmp $001008	                JML BREAK
.ff30						RHABORT
.ff30		c2 30		rep #$30	                REP #$30        ; set A&X long
.ff32		8b		phb		                PHB
.ff33		0b		phd		                PHD
.ff34		48		pha		                PHA
.ff35		da		phx		                PHX
.ff36		5a		phy		                PHY
.ff37		5c 08 10 00	jmp $001008	                JML BREAK
.ff40						 RHNMI
.ff40		c2 30		rep #$30	                REP #$30        ; set A&X long
.ff42		8b		phb		                PHB
.ff43		0b		phd		                PHD
.ff44		48		pha		                PHA
.ff45		da		phx		                PHX
.ff46		5a		phy		                PHY
.ff47		22 d5 18 38	jsl $3818d5	                JSL NMI_HANDLER
.ff4b		7a		ply		                PLY
.ff4c		fa		plx		                PLX
.ff4d		68		pla		                PLA
.ff4e		2b		pld		                PLD
.ff4f		ab		plb		                PLB
.ff50		40		rti		                RTI
.ff60						RHIRQ
.ff60		c2 30		rep #$30	                REP #$30        ; set A&X long
.ff62		8b		phb		                PHB
.ff63		0b		phd		                PHD
.ff64		48		pha		                PHA
.ff65		da		phx		                PHX
.ff66		5a		phy		                PHY
.ff67		22 14 17 38	jsl $381714	                JSL IRQ_HANDLER
.ff6b		7a		ply		                PLY
.ff6c		fa		plx		                PLX
.ff6d		68		pla		                PLA
.ff6e		2b		pld		                PLD
.ff6f		ab		plb		                PLB
.ff70		40		rti		                RTI
.ffe0		5c 04 00 3a	jmp $3a0004	JUMP_READY      JML MONITOR    ; Kernel READY routine. Rewrite this address to jump to a custom kernel.
>ffe4		10 ff				RVECTOR_COP     .addr HCOP     ; FFE4
>ffe6		20 ff				RVECTOR_BRK     .addr HBRK     ; FFE6
>ffe8		30 ff				RVECTOR_ABORT   .addr HABORT   ; FFE8
>ffea		40 ff				RVECTOR_NMI     .addr HNMI     ; FFEA
>ffec		00 00				                .word $0000    ; FFEC
>ffee		60 ff				RVECTOR_IRQ     .addr HIRQ    ; FFEE
.fff0		5c ba 06 39	jmp $3906ba	RRETURN         JML IRETURN
>fff4		10 ff				RVECTOR_ECOP    .addr HCOP     ; FFF4
>fff6		20 ff				RVECTOR_EBRK    .addr HBRK     ; FFF6
>fff8		30 ff				RVECTOR_EABORT  .addr HABORT   ; FFF8
>fffa		40 ff				RVECTOR_ENMI    .addr HNMI     ; FFFA
>fffc		00 ff				RVECTOR_ERESET  .addr HRESET   ; FFFC
>fffe		60 ff				RVECTOR_EIRQ    .addr HIRQ     ; FFFE

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/dram_inc.asm

=$afa000					SCREEN_PAGE0     = $AFA000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
=$afc000					SCREEN_PAGE1     = $AFC000 ;8192 Bytes Additional page of display RAM. This can be used for page flipping or to handle multiple edit buffers.
=$b00000					SCREEN_END       = $B00000 ;End of display memory

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/fdc_inc.asm

=$af13f0					SIO_FDC  = $AF13F0
=$af13f0					SIO_FDC_SRA = $AF13F0 ; Read Only - Status Register A (not used in AT mode)
=$af13f1					SIO_FDC_SRB = $AF13F1 ; Read Only - Status Register B (not used in AT mode)
=$af13f2					SIO_FDC_DOR = $AF13F2 ; Read/Write - Digital Output Register
=$01						FDC_DOR_DSEL0 = $01     ; Drive 0 Select
=$02						FDC_DOR_DSEL1 = $02     ; Drive 1 Select
=$04						FDC_DOR_NRESET = $04    ; Reset the FDC
=$08						FDC_DOR_DMAEN = $08     ; Enable DMA
=$10						FDC_DOR_MOT0  = $10     ; Turn on motor 0
=$20						FDC_DOR_MOT1  = $20     ; Turn on motor 1
=$40						FDC_DOR_MOT2  = $40     ; Turn on motor 2
=$80						FDC_DOR_MOT3  = $80     ; Turn on motor 3
=$af13f3					SIO_FDC_TSR = $AF13F3   ; Read/Write - Tape Drive Status (not used on the C256)
=$af13f4					SIO_FDC_MSR = $AF13F4   ; Read - Main Status Register
=$01						FDC_MSR_DRV0BSY = $01   ; Indicates if drive 0 is busy
=$02						FDC_MSR_DRV1BSY = $02   ; Indicates if drive 1 is busy
=$10						FDC_MSR_CMDBSY = $10    ; Indicates if a command is in progress
=$20						FDC_MSR_NONDMA = $20    ;
=$40						FDC_MSR_DIO = $40       ; Data direction: 1 = read, 0 = write
=$80						FDC_MSR_RQM = $80       ; 1 = host can transfer data, 0 = host must wait
=$af13f4					SIO_FDC_DSR = $AF13F4   ; Write - Data Select Register
=$40						FDC_DSR_LOPWR = $40     ; Turn on low power mode
=$80						FDC_DSR_RESET = $80     ; Software reset of the FDC
=$af13f5					SIO_FDC_DTA = $AF13F5   ; Read/Write - Data - FIFO
=$af13f6					SIO_FDC_RSV = $AF13F6   ; Reserved
=$af13f7					SIO_FDC_DIR = $AF13F7   ; Read - Digital Input Register
=$80						FDC_DIR_DSKCHG = $80    ; Indicates if the disk has changed
=$af13f7					SIO_FDC_CCR = $AF13F7   ; Write - Configuration Control Register
=$03						FDC_ST0_DRVSEL = $03    ; Mask for the current selected drive
=$04						FDC_ST0_HEAD = $04      ; Bit for the current selected head
=$08						FDC_ST0_EC = $08        ; Bit for EQUIPMENT CHECK, error in recalibrate or relative seek
=$10						FDC_ST0_SEEKEND = $10   ; The FDC completed a seek, relative seek, or recalibrate
=$c0						FDC_ST0_INTCODE = $C0   ; Mask for interrupt code:
=$01						FDC_ST1_MA = $01        ; Missing address mark
=$02						FDC_ST1_NW = $02        ; Not writable (disk is write protected)
=$04						FDC_ST1_ND = $04        ; No data
=$10						FDC_ST1_OR = $10        ; Overrun/underrun of the data
=$20						FDC_ST1_DE = $20        ; Data error... a CRC check failed
=$80						FDC_ST1_EN = $80        ; End of cylinder: tried to acess a sector not on the track
=$01						FDC_ST2_MD = $01        ; Missing address mark: FDC cannot detect a data address mark
=$02						FDC_ST2_BC = $02        ; Bad cylinder
=$10						FDC_ST2_WC = $10        ; Wrong cylinder: track is not the same as expected
=$20						FDC_ST2_DD = $20        ; Data error in field: CRC error
=$40						FDC_ST2_CM = $40        ; Control mark
=$03						FDC_ST3_DRVSEL = $03    ; Drive select mask
=$04						FDC_ST3_HEAD = $04      ; Head address bit
=$10						FDC_ST3_TRACK0 = $10    ; Track 0: Status of the TRK0 pin
=$40						FDC_ST3_WP = $40        ; Write Protect: status of the WP pin
=2						FDC_CMD_READ_TRACK          = 2
=3						FDC_CMD_SPECIFY             = 3
=4						FDC_CMD_SENSE_DRIVE_STATUS  = 4
=5						FDC_CMD_WRITE_DATA          = 5
=6						FDC_CMD_READ_DATA           = 6
=7						FDC_CMD_RECALIBRATE         = 7
=8						FDC_CMD_SENSE_INTERRUPT     = 8
=9						FDC_CMD_WRITE_DELETED_DATA  = 9
=10						FDC_CMD_READ_ID             = 10
=12						FDC_CMD_READ_DELETED_DATA   = 12
=13						FDC_CMD_FORMAT_TRACK        = 13
=14						FDC_CMD_DUMPREG             = 14
=15						FDC_CMD_SEEK                = 15
=16						FDC_CMD_VERSION             = 16
=17						FDC_CMD_SCAN_EQUAL          = 17
=18						FDC_CMD_PERPENDICULAR_MODE  = 18
=19						FDC_CMD_CONFIGURE           = 19
=20						FDC_CMD_LOCK                = 20
=22						FDC_CMD_VERIFY              = 22
=25						FDC_CMD_SCAN_LOW_OR_EQUAL   = 25
=29						FDC_CMD_SCAN_HIGH_OR_EQUAL  = 29
=$80						FDC_CMD_MT = $80                    ; Command bit to turn on multi-track
=$40						FDC_CMD_MFM = $40                   ; Command bit to operate in MFM format
=$20						FDC_CMD_SK = $20                    ; Command bit to skip deleted sectors
=$40						FDC_CMD_EIS = $40                   ; Command bit to turn on implied seek
=1						FDC_DEVCMD_MOTOR_ON         = 1     ; Device code to turn the motor on
=2						FDC_DEVCMD_MOTOR_OFF        = 2     ; Device code to turn the motor off
=3						FDC_DEVCMD_RECAL            = 3     ; Device code to recalibrate the drive

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/basic_inc.asm

=$3a0000					    BASIC = $3A0000
=3801092					    MONITOR = BASIC + 4

;******  Return to file: src\kernel.asm


;******  Processing file: src\kernel_jumptable.asm

.381000	1000	5c 00 04 39	jmp $390400	BOOT            JML IBOOT
.381004	1004	5c c5 05 39	jmp $3905c5	RESTORE         JML IRESTORE
.381008	1008	5c 59 06 39	jmp $390659	BREAK           JML IBREAK
.38100c	100c	5c a0 06 39	jmp $3906a0	READY           JML IREADY
.381010	1010	5c 1a 13 39	jmp $39131a	SCINIT          JML ISCINIT
.381014	1014	5c 1b 13 39	jmp $39131b	IOINIT          JML IIOINIT
.381018	1018	5c 5c 07 39	jmp $39075c	PUTC            JML IPUTC
.38101c	101c	5c 45 07 39	jmp $390745	PUTS            JML IPUTS
.381020	1020	5c ff 07 39	jmp $3907ff	PUTB            JML IPUTB
.381024	1024	5c ff 3d 39	jmp $393dff	PUTBLOCK        JML IPUTBLOCK
.381028	1028	5c 1c 13 39	jmp $39131c	SETLFS          JML ISETLFS
.38102c	102c	5c 1d 13 39	jmp $39131d	SETNAM          JML ISETNAM
.381030	1030	5c 1e 13 39	jmp $39131e	OPEN            JML IOPEN
.381034	1034	5c 1f 13 39	jmp $39131f	CLOSE           JML ICLOSE
.381038	1038	5c bb 06 39	jmp $3906bb	SETIN           JML ISETIN
.38103c	103c	5c c4 06 39	jmp $3906c4	SETOUT          JML ISETOUT
.381040	1040	5c 20 13 39	jmp $391320	GETB            JML IGETB
.381044	1044	5c 9c 3d 39	jmp $393d9c	GETBLOCK        JML IGETBLOCK
.381048	1048	5c 09 07 39	jmp $390709	GETCH           JML IGETCH
.38104c	104c	5c d6 06 39	jmp $3906d6	GETCHW          JML IGETCHW
.381050	1050	5c cd 06 39	jmp $3906cd	GETCHE          JML IGETCHE
.381054	1054	5c 21 13 39	jmp $391321	GETS            JML IGETS
.381058	1058	5c 22 13 39	jmp $391322	GETLINE         JML IGETLINE
.38105c	105c	5c 23 13 39	jmp $391323	GETFIELD        JML IGETFIELD
.381060	1060	5c 24 13 39	jmp $391324	TRIM            JML ITRIM
.381064	1064	5c 25 13 39	jmp $391325	PRINTC          JML IPRINTC
.381068	1068	5c 26 13 39	jmp $391326	PRINTS          JML IPRINTS
.38106c	106c	5c 00 08 39	jmp $390800	PRINTCR         JML IPRINTCR
.381070	1070	5c 27 13 39	jmp $391327	PRINTF          JML IPRINTF
.381074	1074	5c 28 13 39	jmp $391328	PRINTI          JML IPRINTI
.381078	1078	5c 0e 09 39	jmp $39090e	PRINTH          JML IPRINTH
.38107c	107c	5c 29 13 39	jmp $391329	PRINTAI         JML IPRINTAI
.381080	1080	5c 2b 09 39	jmp $39092b	PRINTAH         JML IPRINTAH
.381084	1084	5c 94 08 39	jmp $390894	LOCATE          JML ILOCATE
.381088	1088	5c 2a 13 39	jmp $39132a	PUSHKEY         JML IPUSHKEY
.38108c	108c	5c 2b 13 39	jmp $39132b	PUSHKEYS        JML IPUSHKEYS
.381090	1090	5c 60 08 39	jmp $390860	CSRRIGHT        JML ICSRRIGHT
.381094	1094	5c 6e 08 39	jmp $39086e	CSRLEFT         JML ICSRLEFT
.381098	1098	5c 7c 08 39	jmp $39087c	CSRUP           JML ICSRUP
.38109c	109c	5c 8a 08 39	jmp $39088a	CSRDOWN         JML ICSRDOWN
.3810a0	10a0	5c 4f 08 39	jmp $39084f	CSRHOME         JML ICSRHOME
.3810a4	10a4	5c 9e 08 39	jmp $39089e	SCROLLUP        JML ISCROLLUP
.3810a8	10a8	5c 79 09 39	jmp $390979	CLRSCREEN       JML ICLRSCREEN
.3810ac	10ac	5c 44 0a 39	jmp $390a44	INITCHLUT	    JML IINITCHLUT
.3810b0	10b0	5c f7 0c 39	jmp $390cf7	INITSUPERIO	    JML IINITSUPERIO
.3810b4	10b4	5c f6 0d 39	jmp $390df6	INITKEYBOARD    JML IINITKEYBOARD
.3810b8	10b8	5c ab 0e 39	jmp $390eab	INITMOUSE       JML IINITMOUSE
.3810bc	10bc	5c d8 0c 39	jmp $390cd8	INITCURSOR      JML IINITCURSOR
.3810c0	10c0	5c a0 0c 39	jmp $390ca0	INITFONTSET     JML IINITFONTSET
.3810c4	10c4	5c 50 0a 39	jmp $390a50	INITGAMMATABLE  JML IINITGAMMATABLE
.3810c8	10c8	5c 70 0a 39	jmp $390a70	INITALLLUT      JML IINITALLLUT
.3810cc	10cc	5c 36 0b 39	jmp $390b36	INITVKYTXTMODE  JML IINITVKYTXTMODE
.3810d0	10d0	5c 67 0c 39	jmp $390c67	INITVKYGRPMODE  JML IINITVKYGRPMODE
.3810d4	10d4	5c 9f 0c 39	jmp $390c9f	ISETDAC32KHZ    JML INOP            ; Depracated Routine Replaced by New Ones - To be Implemented
.3810d8	10d8	5c 9f 0c 39	jmp $390c9f	ISETDAC48KHZ    JML INOP            ; Depracated Routine Replaced by New Ones - To be Implemented
.3810dc	10dc	5c 68 0f 39	jmp $390f68	INITCODEC       JML IINITCODEC
.3810e0	10e0	5c f7 0f 39	jmp $390ff7	RESETCODEC      JML IRESETCODEC
.3810e4	10e4	5c 65 10 39	jmp $391065	BMP_PARSER      JML IBMP_PARSER
.3810e8	10e8	5c 1a 10 39	jmp $39101a	BM_FILL_SCREEN  JML IBM_FILL_SCREEN
.3810ec	10ec	5c a8 33 39	jmp $3933a8	OPL2_TONE_TEST  JML IOPL2_TONE_TEST
.3810f0	10f0	5c 82 50 39	jmp $395082	F_OPEN          JML IF_OPEN         ; open a file for reading/writing/creating
.3810f4	10f4	5c 15 51 39	jmp $395115	F_CREATE        JML IF_CREATE       ; create a new file
.3810f8	10f8	5c 4f 51 39	jmp $39514f	F_CLOSE         JML IF_CLOSE        ; close a file (make sure last cluster is written)
.3810fc	10fc	5c e8 51 39	jmp $3951e8	F_WRITE         JML IF_WRITE        ; write the current cluster to the file
.381100	1100	5c 83 51 39	jmp $395183	F_READ          JML IF_READ         ; read the next cluster from the file
.381104	1104	5c 92 52 39	jmp $395292	F_DELETE        JML IF_DELETE       ; delete a file / directory
.381108	1108	5c 54 52 39	jmp $395254	F_DIROPEN       JML IF_DIROPEN      ; open a directory and seek the first directory entry
.38110c	110c	5c 8e 52 39	jmp $39528e	F_DIRNEXT       JML IF_DIRNEXT      ; seek to the next directory of an open directory
.381110	1110	5c 2b 53 39	jmp $39532b	F_DIRREAD       JML IF_DIRREAD      ; Read the directory entry for the specified file
.381114	1114	5c 52 53 39	jmp $395352	F_DIRWRITE      JML IF_DIRWRITE     ; Write any changes in the current directory cluster back to the drive
.381118	1118	5c 56 53 39	jmp $395356	F_LOAD          JML IF_LOAD         ; load a binary file into memory, supports multiple file formats
.38111c	111c	5c b1 56 39	jmp $3956b1	F_SAVE          JML IF_SAVE         ; Save memory to a binary file
.381120	1120	5c 72 3d 39	jmp $393d72	CMDBLOCK        JML ICMDBLOCK       ; Send a command to a block device
.381124	1124	5c 4a 57 39	jmp $39574a	F_RUN           JML IF_RUN          ; Load an run a binary file
.381128	1128	5c 9d 41 39	jmp $39419d	F_MOUNT         JML DOS_MOUNT       ; Mount the designated block device
.38112c	112c	5c b4 0b 39	jmp $390bb4	SETSIZES        JML ISETSIZES
.381130	1130	5c 99 58 39	jmp $395899	F_COPY          JML IF_COPY         ; Copy a file
.381134	1134	5c e3 57 39	jmp $3957e3	F_ALLOCFD       JML IF_ALLOCFD      ; Allocate a file descriptor
.381138	1138	5c 37 58 39	jmp $395837	F_FREEFD        JML IF_FREEFD       ; Free a file descriptor
.381700	1700	5c 14 68 39	jmp $396814	VEC_INT00_SOF   JML FDC_TIME_HANDLE ; IRQ 0, 0 --- Start Of Frame interrupt
.381704	1704	5c 2e 13 39	jmp $39132e	VEC_INT01_SOL   JML IRQHANDLESTUB   ; IRQ 0, 1 --- Start Of Line interrupt
.381708	1708	5c 2e 13 39	jmp $39132e	VEC_INT02_TMR0  JML IRQHANDLESTUB   ; IRQ 0, 2 --- Timer 0 interrupt
.38170c	170c	5c 2e 13 39	jmp $39132e	VEC_INT03_TMR1  JML IRQHANDLESTUB   ; IRQ 0, 3 --- Timer 1 interrupt
.381710	1710	5c 2e 13 39	jmp $39132e	VEC_INT04_TMR2  JML IRQHANDLESTUB   ; IRQ 0, 4 --- Timer 2 interrupt

;******  Return to file: src\kernel.asm


;******  Processing file: src\Interrupt_Handler.asm

.381714						IRQ_HANDLER
.381714		e2 20		sep #$20	                SEP #$20        ; set A short
.381716		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.38171a		c9 00		cmp #$00	                CMP #$00
.38171c		f0 7d		beq $38179b	                BEQ CHECK_PENDING_REG1
.38171e		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381722		29 01		and #$01	                AND #FNX0_INT00_SOF
.381724		c9 01		cmp #$01	                CMP #FNX0_INT00_SOF
.381726		d0 09		bne $381731	                BNE SERVICE_NEXT_IRQ1
.381728		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.38172c		20 09 18	jsr $381809	                JSR SOF_INTERRUPT
.38172f		e2 20		sep #$20	                SEP #$20        ; set A short
.381731						SERVICE_NEXT_IRQ1
.381731		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381735		29 02		and #$02	                AND #FNX0_INT01_SOL
.381737		c9 02		cmp #$02	                CMP #FNX0_INT01_SOL
.381739		d0 07		bne $381742	                BNE SERVICE_NEXT_IRQ2
.38173b		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.38173f		20 1a 18	jsr $38181a	                JSR SOL_INTERRUPT
.381742						SERVICE_NEXT_IRQ2
.381742		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381746		29 04		and #$04	                AND #FNX0_INT02_TMR0
.381748		c9 04		cmp #$04	                CMP #FNX0_INT02_TMR0
.38174a		d0 07		bne $381753	                BNE SERVICE_NEXT_IRQ3
.38174c		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381750		20 2b 18	jsr $38182b	                JSR TIMER0_INTERRUPT
.381753						SERVICE_NEXT_IRQ3
.381753		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381757		29 08		and #$08	                AND #FNX0_INT03_TMR1
.381759		c9 08		cmp #$08	                CMP #FNX0_INT03_TMR1
.38175b		d0 07		bne $381764	                BNE SERVICE_NEXT_IRQ4
.38175d		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381761		20 3c 18	jsr $38183c	                JSR TIMER1_INTERRUPT
.381764						SERVICE_NEXT_IRQ4
.381764		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381768		29 10		and #$10	                AND #FNX0_INT04_TMR2
.38176a		c9 10		cmp #$10	                CMP #FNX0_INT04_TMR2
.38176c		d0 09		bne $381777	                BNE SERVICE_NEXT_IRQ6
.38176e		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381772		20 4d 18	jsr $38184d	                JSR TIMER2_INTERRUPT
.381775		e2 20		sep #$20	                SEP #$20        ; set A short
.381777						SERVICE_NEXT_IRQ6
.381777		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.38177b		29 40		and #$40	                AND #FNX0_INT06_FDC
.38177d		c9 40		cmp #$40	                CMP #FNX0_INT06_FDC
.38177f		d0 09		bne $38178a	                BNE SERVICE_NEXT_IRQ7
.381781		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381785		20 9e 18	jsr $38189e	                JSR FDC_INTERRUPT
.381788		e2 20		sep #$20	                SEP #$20        ; set A short
.38178a						SERVICE_NEXT_IRQ7
.38178a		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.38178e		29 80		and #$80	                AND #FNX0_INT07_MOUSE
.381790		c9 80		cmp #$80	                CMP #FNX0_INT07_MOUSE
.381792		d0 07		bne $38179b	                BNE CHECK_PENDING_REG1
.381794		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381798		20 5e 18	jsr $38185e	                JSR MOUSE_INTERRUPT
.38179b						CHECK_PENDING_REG1
.38179b		e2 20		sep #$20	                SEP #$20        ; set A short
.38179d		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3817a1		c9 00		cmp #$00	                CMP #$00
.3817a3		f0 61		beq $381806	                BEQ EXIT_IRQ_HANDLE
.3817a5						SERVICE_NEXT_IRQ8
.3817a5		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3817a9		29 01		and #$01	                AND #FNX1_INT00_KBD
.3817ab		c9 01		cmp #$01	                CMP #FNX1_INT00_KBD
.3817ad		d0 0d		bne $3817bc	                BNE SERVICE_NEXT_IRQ11
.3817af		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3817b3		8b		phb		                PHB
.3817b4		0b		phd		                PHD
.3817b5		20 d6 18	jsr $3818d6	                JSR KEYBOARD_INTERRUPT
.3817b8		2b		pld		                PLD
.3817b9		ab		plb		                PLB
.3817ba		e2 20		sep #$20	                SEP #$20        ; set A short
.3817bc						SERVICE_NEXT_IRQ11
.3817bc		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3817c0		29 08		and #$08	                AND #FNX1_INT03_COM2
.3817c2		c9 08		cmp #$08	                CMP #FNX1_INT03_COM2
.3817c4		d0 09		bne $3817cf	                BNE SERVICE_NEXT_IRQ12
.3817c6		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3817ca		20 a9 18	jsr $3818a9	                JSR COM2_INTERRUPT
.3817cd		e2 20		sep #$20	                SEP #$20        ; set A short
.3817cf						SERVICE_NEXT_IRQ12
.3817cf		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3817d3		29 10		and #$10	                AND #FNX1_INT04_COM1
.3817d5		c9 10		cmp #$10	                CMP #FNX1_INT04_COM1
.3817d7		d0 09		bne $3817e2	                BNE SERVICE_NEXT_IRQ13
.3817d9		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3817dd		20 b4 18	jsr $3818b4	                JSR COM1_INTERRUPT
.3817e0		e2 20		sep #$20	                SEP #$20        ; set A short
.3817e2						SERVICE_NEXT_IRQ13
.3817e2		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3817e6		29 20		and #$20	                AND #FNX1_INT05_MPU401
.3817e8		c9 20		cmp #$20	                CMP #FNX1_INT05_MPU401
.3817ea		d0 09		bne $3817f5	                BNE SERVICE_NEXT_IRQ14
.3817ec		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3817f0		20 bf 18	jsr $3818bf	                JSR MPU401_INTERRUPT
.3817f3		e2 20		sep #$20	                SEP #$20        ; set A short
.3817f5						SERVICE_NEXT_IRQ14
.3817f5		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3817f9		29 40		and #$40	                AND #FNX1_INT06_LPT
.3817fb		c9 40		cmp #$40	                CMP #FNX1_INT06_LPT
.3817fd		d0 07		bne $381806	                BNE EXIT_IRQ_HANDLE
.3817ff		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.381803		20 ca 18	jsr $3818ca	                JSR LPT1_INTERRUPT
.381806						EXIT_IRQ_HANDLE
.381806		c2 30		rep #$30	                REP #$30        ; set A&X long
.381808		6b		rtl		                RTL
.381809						SOF_INTERRUPT
.381809		e2 20		sep #$20	                SEP #$20        ; set A short
.38180b		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.38180f		29 01		and #$01	                AND #FNX0_INT00_SOF
.381811		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381815		22 00 17 00	jsl $001700	                JSL VEC_INT00_SOF
.381819		60		rts		                RTS
.38181a						SOL_INTERRUPT
.38181a		e2 20		sep #$20	                SEP #$20        ; set A short
.38181c		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381820		29 02		and #$02	                AND #FNX0_INT01_SOL
.381822		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381826		22 04 17 00	jsl $001704	                JSL VEC_INT01_SOL
.38182a		60		rts		                RTS
.38182b						TIMER0_INTERRUPT
.38182b		e2 20		sep #$20	                SEP #$20        ; set A short
.38182d		af 05 07 00	lda $000705	                LDA @l TIMERFLAGS               ; Flag that the interrupt has happened
.381831		09 80		ora #$80	                ORA #TIMER0TRIGGER
.381833		8f 05 07 00	sta $000705	                STA @l TIMERFLAGS
.381837		22 08 17 00	jsl $001708	                JSL VEC_INT02_TMR0
.38183b		60		rts		                RTS
.38183c						TIMER1_INTERRUPT
.38183c		e2 20		sep #$20	                SEP #$20        ; set A short
.38183e		af 05 07 00	lda $000705	                LDA @l TIMERFLAGS               ; Flag that the interrupt has happened
.381842		09 40		ora #$40	                ORA #TIMER1TRIGGER
.381844		8f 05 07 00	sta $000705	                STA @l TIMERFLAGS
.381848		22 0c 17 00	jsl $00170c	                JSL VEC_INT03_TMR1
.38184c		60		rts		                RTS
.38184d						TIMER2_INTERRUPT
.38184d		e2 20		sep #$20	                SEP #$20        ; set A short
.38184f		af 05 07 00	lda $000705	                LDA @l TIMERFLAGS               ; Flag that the interrupt has happened
.381853		09 20		ora #$20	                ORA #TIMER2TRIGGER
.381855		8f 05 07 00	sta $000705	                STA @l TIMERFLAGS
.381859		22 10 17 00	jsl $001710	                JSL VEC_INT04_TMR2
.38185d		60		rts		                RTS
.38185e						MOUSE_INTERRUPT
.38185e		e2 30		sep #$30	                SEP #$30        ; set A&X short
.381860		af e0 00 00	lda $0000e0	                LDA @l MOUSE_PTR
.381864		aa		tax		                TAX
.381865		af 03 18 af	lda $af1803	                LDA @l KBD_INPT_BUF
.381869		9f 06 07 af	sta $af0706,x	                STA @lMOUSE_PTR_BYTE0, X
.38186d		e8		inx		                INX
.38186e		e0 03		cpx #$03	                CPX #$03
.381870		d0 24		bne $381896	                BNE EXIT_FOR_NEXT_VALUE
.381872		af 02 07 af	lda $af0702	                LDA @l MOUSE_PTR_X_POS_L
.381876		8f e1 00 00	sta $0000e1	                STA @l MOUSE_POS_X_LO
.38187a		af 03 07 af	lda $af0703	                LDA @l MOUSE_PTR_X_POS_H
.38187e		8f e2 00 00	sta $0000e2	                STA @l MOUSE_POS_X_HI
.381882		af 04 07 af	lda $af0704	                LDA @l MOUSE_PTR_Y_POS_L
.381886		8f e3 00 00	sta $0000e3	                STA @l MOUSE_POS_Y_LO
.38188a		af 05 07 af	lda $af0705	                LDA @l MOUSE_PTR_Y_POS_H
.38188e		8f e4 00 00	sta $0000e4	                STA @l MOUSE_POS_Y_HI
.381892		e2 20		sep #$20	                SEP #$20        ; set A short
.381894		a2 00		ldx #$00	                LDX #$00
.381896						EXIT_FOR_NEXT_VALUE
.381896		8a		txa		                TXA
.381897		8f e0 00 00	sta $0000e0	                STA @l MOUSE_PTR
.38189b		c2 10		rep #$10	                REP #$10        ; set X long
.38189d		60		rts		                RTS
.38189e						FDC_INTERRUPT
.38189e		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.3818a2		29 40		and #$40	                AND #FNX0_INT06_FDC
.3818a4		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.3818a8		60		rts		                RTS
.3818a9						COM2_INTERRUPT
.3818a9		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3818ad		29 08		and #$08	                AND #FNX1_INT03_COM2
.3818af		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3818b3		60		rts		                RTS
.3818b4						COM1_INTERRUPT
.3818b4		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3818b8		29 10		and #$10	                AND #FNX1_INT04_COM1
.3818ba		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3818be		60		rts		                RTS
.3818bf						MPU401_INTERRUPT
.3818bf		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3818c3		29 20		and #$20	                AND #FNX1_INT05_MPU401
.3818c5		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3818c9		60		rts		                RTS
.3818ca						LPT1_INTERRUPT
.3818ca		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3818ce		29 40		and #$40	                AND #FNX1_INT06_LPT
.3818d0		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3818d4		60		rts		                RTS
.3818d5						NMI_HANDLER
.3818d5		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\keyboard.asm

.3818d6						KEYBOARD_INTERRUPT
.3818d6		48		pha		                PHA             ; begin setdp macro
.3818d7		08		php		                PHP
.3818d8		c2 20		rep #$20	                REP #$20        ; set A long
.3818da		a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.3818dd		5b		tcd		                TCD
.3818de		28		plp		                PLP
.3818df		68		pla		                PLA             ; end setdp macro
.3818e0		a2 00 00	ldx #$0000	                ldx #$0000
.3818e3		e2 10		sep #$10	                SEP #$10        ; set X short
.3818e5		e2 20		sep #$20	                SEP #$20        ; set A short
.3818e7		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3818eb		29 01		and #$01	                AND #FNX1_INT00_KBD
.3818ed		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3818f1						IRQ_HANDLER_FETCH
.3818f1		af 03 18 af	lda $af1803	                LDA @lKBD_INPT_BUF      ; Get Scan Code from KeyBoard
.3818f5		85 88		sta $0f88	                STA KEYBOARD_SC_TMP     ; Save Code Immediately
.3818f7		a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the Prefix was picked up before
.3818f9		29 80		and #$80	                AND #$80
.3818fb		c9 80		cmp #$80	                CMP #$80
.3818fd		d0 10		bne $38190f	                BNE CHK_LSHIFT          ; No: do normal scan-code checks
.3818ff		a5 87		lda $0f87	PREFIX_ON       LDA KEYBOARD_SC_FLG     ; Otherwise: clear prefix
.381901		29 7f		and #$7f	                AND #$7F
.381903		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.381905		a5 88		lda $0f88	                LDA KEYBOARD_SC_TMP     ; Get the prefixed scan-code's character
.381907		aa		tax		                TAX
.381908		bf 80 80 39	lda $398080,x	                LDA @lScanCode_Prefix_Set1, x
.38190c		4c b2 19	jmp $3819b2	                JMP KB_WR_2_SCREEN      ; And save it
.38190f		a5 88		lda $0f88	CHK_LSHIFT      LDA KEYBOARD_SC_TMP
.381911		c9 2a		cmp #$2a	                CMP #$2A                ; Left Shift Pressed
.381913		d0 03		bne $381918	                BNE NOT_KB_SET_LSHIFT
.381915		82 ad 00	brl $3819c5	                BRL KB_SET_SHIFT
.381918						NOT_KB_SET_LSHIFT
.381918		c9 aa		cmp #$aa	                CMP #$AA                ; Left Shift Unpressed
.38191a		d0 03		bne $38191f	                BNE NOT_KB_CLR_LSHIFT
.38191c		82 af 00	brl $3819ce	                BRL KB_CLR_SHIFT
.38191f						NOT_KB_CLR_LSHIFT
.38191f		c9 36		cmp #$36	                CMP #$36                ; Right Shift Pressed
.381921		d0 03		bne $381926	                BNE NOT_KB_SET_RSHIFT
.381923		82 9f 00	brl $3819c5	                BRL KB_SET_SHIFT
.381926						NOT_KB_SET_RSHIFT
.381926		c9 b6		cmp #$b6	                CMP #$B6                ; Right Shift Unpressed
.381928		d0 03		bne $38192d	                BNE NOT_KB_CLR_RSHIFT
.38192a		82 a1 00	brl $3819ce	                BRL KB_CLR_SHIFT
.38192d						NOT_KB_CLR_RSHIFT
.38192d		c9 1d		cmp #$1d	                CMP #$1D                ; Left CTRL pressed
.38192f		d0 03		bne $381934	                BNE NOT_KB_SET_CTRL
.381931		82 a3 00	brl $3819d7	                BRL KB_SET_CTRL
.381934						NOT_KB_SET_CTRL
.381934		c9 9d		cmp #$9d	                CMP #$9D                ; Left CTRL Unpressed
.381936		d0 03		bne $38193b	                BNE NOT_KB_CLR_CTRL
.381938		82 a5 00	brl $3819e0	                BRL KB_CLR_CTRL
.38193b						NOT_KB_CLR_CTRL
.38193b		c9 38		cmp #$38	                CMP #$38                ; Left ALT Pressed
.38193d		d0 03		bne $381942	                BNE NOT_KB_SET_ALT
.38193f		82 a7 00	brl $3819e9	                BRL KB_SET_ALT
.381942						NOT_KB_SET_ALT
.381942		c9 b8		cmp #$b8	                CMP #$B8                ; Left ALT Unpressed
.381944		d0 03		bne $381949	                BNE NOT_KB_CLR_ALT
.381946		82 a9 00	brl $3819f2	                BRL KB_CLR_ALT
.381949		c9 e0		cmp #$e0	NOT_KB_CLR_ALT  CMP #$E0                ; Prefixed scan code
.38194b		d0 03		bne $381950	                BNE NOT_PREFIXED
.38194d		82 ab 00	brl $3819fb	                BRL KB_SET_PREFIX
.381950		c9 45		cmp #$45	NOT_PREFIXED    CMP #$45                ; Numlock Pressed
.381952		d0 03		bne $381957	                BNE NOT_KB_SET_NUM
.381954		82 b6 00	brl $381a0d	                BRL KB_TOG_NUMLOCK
.381957		c9 46		cmp #$46	NOT_KB_SET_NUM  CMP #$46                ; Scroll Lock Pressed
.381959		d0 03		bne $38195e	                BNE NOT_KB_SET_SCR
.38195b		82 a6 00	brl $381a04	                BRL KB_TOG_SCRLOCK
.38195e		c9 3a		cmp #$3a	NOT_KB_SET_SCR  CMP #$3A                ; Caps Lock Pressed
.381960		d0 03		bne $381965	                BNE NOT_KB_CAPSLOCK
.381962		82 bc 00	brl $381a21	                BRL KB_TOG_CAPLOCK
.381965		c9 58		cmp #$58	NOT_KB_CAPSLOCK CMP #$58                ; F12 Pressed
.381967		d0 09		bne $381972	                BNE KB_UNPRESSED
.381969		a9 60		lda #$60	                LDA #KB_CREDITS         ; Yes: flag that the CREDITS key has been pressed
.38196b		8f 8a 0f 00	sta $000f8a	                STA @lKEYFLAG
.38196f		82 b5 00	brl $381a27	                BRL KB_CHECK_B_DONE
.381972		29 80		and #$80	KB_UNPRESSED    AND #$80                ; See if the Scan Code is press or Depressed
.381974		c9 80		cmp #$80	                CMP #$80                ; Depress Status - We will not do anything at this point
.381976		d0 03		bne $38197b	                BNE KB_NORM_SC
.381978		82 ac 00	brl $381a27	                BRL KB_CHECK_B_DONE
.38197b		a5 88		lda $0f88	KB_NORM_SC      LDA KEYBOARD_SC_TMP       ;
.38197d		aa		tax		                TAX
.38197e		a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the SHIFT Key is being Pushed
.381980		29 10		and #$10	                AND #$10
.381982		c9 10		cmp #$10	                CMP #$10
.381984		f0 17		beq $38199d	                BEQ SHIFT_KEY_ON
.381986		a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the CTRL Key is being Pushed
.381988		29 20		and #$20	                AND #$20
.38198a		c9 20		cmp #$20	                CMP #$20
.38198c		f0 16		beq $3819a4	                BEQ CTRL_KEY_ON
.38198e		a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the ALT Key is being Pushed
.381990		29 40		and #$40	                AND #$40
.381992		c9 40		cmp #$40	                CMP #$40
.381994		f0 15		beq $3819ab	                BEQ ALT_KEY_ON
.381996		bf 00 7e 39	lda $397e00,x	                LDA @lScanCode_Press_Set1, x
.38199a		82 15 00	brl $3819b2	                BRL KB_WR_2_SCREEN
.38199d		bf 80 7e 39	lda $397e80,x	SHIFT_KEY_ON    LDA @lScanCode_Shift_Set1, x
.3819a1		82 0e 00	brl $3819b2	                BRL KB_WR_2_SCREEN
.3819a4		bf 00 7f 39	lda $397f00,x	CTRL_KEY_ON     LDA @lScanCode_Ctrl_Set1, x
.3819a8		82 07 00	brl $3819b2	                BRL KB_WR_2_SCREEN
.3819ab		bf 80 7f 39	lda $397f80,x	ALT_KEY_ON      LDA @lScanCode_Alt_Set1, x
.3819af		82 00 00	brl $3819b2	                BRL KB_WR_2_SCREEN
.3819b2		c9 18		cmp #$18	KB_WR_2_SCREEN  CMP #$18                ; Is it SysRq?
.3819b4		d0 03		bne $3819b9	                BNE savechar
.3819b6		4c 37 1a	jmp $381a37	                JMP programmerKey       ; Yes: trigger the programmer key
.3819b9		48		pha		savechar        PHA
.3819ba		c2 10		rep #$10	                REP #$10        ; set X long
.3819bc		20 43 1a	jsr $381a43	                JSR SAVEKEY
.3819bf		e2 20		sep #$20	                SEP #$20        ; set A short
.3819c1		68		pla		                PLA
.3819c2		4c 27 1a	jmp $381a27	                JMP KB_CHECK_B_DONE
.3819c5		a5 87		lda $0f87	KB_SET_SHIFT    LDA KEYBOARD_SC_FLG
.3819c7		09 10		ora #$10	                ORA #$10
.3819c9		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3819cb		4c 27 1a	jmp $381a27	                JMP KB_CHECK_B_DONE
.3819ce		a5 87		lda $0f87	KB_CLR_SHIFT    LDA KEYBOARD_SC_FLG
.3819d0		29 ef		and #$ef	                AND #$EF
.3819d2		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3819d4		4c 27 1a	jmp $381a27	                JMP KB_CHECK_B_DONE
.3819d7		a5 87		lda $0f87	KB_SET_CTRL     LDA KEYBOARD_SC_FLG
.3819d9		09 20		ora #$20	                ORA #$20
.3819db		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3819dd		4c 27 1a	jmp $381a27	                JMP KB_CHECK_B_DONE
.3819e0		a5 87		lda $0f87	KB_CLR_CTRL     LDA KEYBOARD_SC_FLG
.3819e2		29 df		and #$df	                AND #$DF
.3819e4		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3819e6		4c 27 1a	jmp $381a27	                JMP KB_CHECK_B_DONE
.3819e9		a5 87		lda $0f87	KB_SET_ALT      LDA KEYBOARD_SC_FLG
.3819eb		09 40		ora #$40	                ORA #$40
.3819ed		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3819ef		4c 27 1a	jmp $381a27	                JMP KB_CHECK_B_DONE
.3819f2		a5 87		lda $0f87	KB_CLR_ALT      LDA KEYBOARD_SC_FLG
.3819f4		29 bf		and #$bf	                AND #$BF
.3819f6		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3819f8		4c 27 1a	jmp $381a27	                JMP KB_CHECK_B_DONE
.3819fb		a5 87		lda $0f87	KB_SET_PREFIX   LDA KEYBOARD_SC_FLG
.3819fd		09 80		ora #$80	                ORA #$80
.3819ff		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.381a01		4c 27 1a	jmp $381a27	                JMP KB_CHECK_B_DONE
.381a04		a5 89		lda $0f89	KB_TOG_SCRLOCK  LDA KEYBOARD_LOCKS
.381a06		49 01		eor #$01	                EOR #KB_SCROLL_LOCK         ; toggle the Scroll Lock flag
.381a08		85 89		sta $0f89	                STA KEYBOARD_LOCKS
.381a0a		4c 27 1a	jmp $381a27	                JMP KB_CHECK_B_DONE
.381a0d		a5 87		lda $0f87	KB_TOG_NUMLOCK  LDA KEYBOARD_SC_FLG         ; Check flags...
.381a0f		29 60		and #$60	                AND #$60                    ; ... is control-alt pressed?
.381a11		c9 60		cmp #$60	                CMP #$60
.381a13		d0 03		bne $381a18	                BNE KB_TOG_NUMLOC2
.381a15		82 63 ff	brl $38197b	                BRL KB_NORM_SC              ; No: treat as a BREAK key
.381a18		a5 89		lda $0f89	KB_TOG_NUMLOC2  LDA KEYBOARD_LOCKS
.381a1a		49 02		eor #$02	                EOR #KB_NUM_LOCK            ; toggle the Num Lock flag
.381a1c		85 89		sta $0f89	                STA KEYBOARD_LOCKS
.381a1e		4c 27 1a	jmp $381a27	                JMP KB_CHECK_B_DONE
.381a21		a5 89		lda $0f89	KB_TOG_CAPLOCK  LDA KEYBOARD_LOCKS
.381a23		49 04		eor #$04	                EOR #KB_CAPS_LOCK           ; toggle the Caps Lock flag
.381a25		85 89		sta $0f89	                STA KEYBOARD_LOCKS
.381a27						KB_CHECK_B_DONE
.381a27		af 07 18 af	lda $af1807	                LDA STATUS_PORT
.381a2b		29 01		and #$01	                AND #OUT_BUF_FULL           ; Test bit $01 (if 1, Full)
.381a2d		c9 01		cmp #$01	                CMP #OUT_BUF_FULL           ; if Still Byte in the Buffer, fetch it out
.381a2f		d0 03		bne $381a34	                BNE SET_LED
.381a31		4c f1 18	jmp $3818f1	                JMP IRQ_HANDLER_FETCH
.381a34						SET_LED
.381a34						KB_DONE
.381a34		c2 30		rep #$30	                REP #$30        ; set A&X long
.381a36		60		rts		                RTS
.381a37						programmerKey
.381a37		c2 30		rep #$30	                REP #$30        ; set A&X long
.381a39		68		pla		                PLA                     ; Get and throw-away the return address to the interrupt handler
.381a3a		2b		pld		                PLD                     ; Restore the registers that were present when the handler was invoked
.381a3b		ab		plb		                PLB
.381a3c		7a		ply		                PLY
.381a3d		fa		plx		                PLX
.381a3e		68		pla		                PLA
.381a3f		5c 08 10 00	jmp $001008	                JML BREAK               ; And go to the BRK handler directly to open the monitor
.381a43						SAVEKEY
.381a43		e2 20		sep #$20	                SEP #$20        ; set A short
.381a45		48		pha		                PHA                     ; Save the character
.381a46		a5 89		lda $0f89	                LDA KEYBOARD_LOCKS      ; Check the keyboard lock flags
.381a48		29 04		and #$04	                AND #KB_CAPS_LOCK       ; Is CAPS lock on?
.381a4a		f0 0d		beq $381a59	                BEQ no_caps             ; No... just use the character as-is
.381a4c		68		pla		                PLA                     ; Get the character back
.381a4d		c9 61		cmp #$61	                CMP #'a'                ; Is it < 'a'
.381a4f		90 09		bcc $381a5a	                BLT check_break         ; Yes: just use as-is
.381a51		c9 7b		cmp #$7b	                CMP #'z'+1              ; Is it > 'z'
.381a53		b0 05		bcs $381a5a	                BGE check_break         ; Yes: just us as-is
.381a55		29 df		and #$df	                AND #%11011111          ; Conver to upper case
.381a57		80 01		bra $381a5a	                BRA check_break
.381a59		68		pla		no_caps         PLA                     ; Restore the character
.381a5a		c9 00		cmp #$00	check_break     CMP #0
.381a5c		f0 18		beq $381a76	                BEQ done
.381a5e		c9 03		cmp #$03	                CMP #CHAR_CTRL_C        ; Is it CTRL-C?
.381a60		f0 15		beq $381a77	                BEQ flag_break          ; Yes: flag a break
.381a62		a6 8d		ldx $0f8d	no_break        LDX KEY_BUFFER_WPOS     ; So the Receive Character is saved in the Buffer
.381a64		e0 80 00	cpx #$0080	                CPX #KEY_BUFFER_SIZE    ; Make sure we haven't been overboard.
.381a67		b0 0d		bcs $381a76	                BCS done                ; Stop storing - An error should ensue here...
.381a69		9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER,X
.381a6d		e8		inx		                INX
.381a6e		86 8d		stx $0f8d	                STX KEY_BUFFER_WPOS
.381a70		a9 00		lda #$00	                LDA #$00
.381a72		9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER, X       ; Store a EOL in the following location for good measure
.381a76		60		rts		done            RTS
.381a77						flag_break
.381a77		e2 20		sep #$20	                SEP #$20        ; set A short
.381a79		a9 80		lda #$80	                LDA #KB_CTRL_C          ; Flag that an interrupt key has been pressed
.381a7b		85 8a		sta $0f8a	                STA KEYFLAG             ; The interpreter should see this soon and throw a BREAK
.381a7d		60		rts		                RTS
.381a7e						KBD_GETCW
.381a7e		da		phx		                PHX
.381a7f		0b		phd		                PHD
.381a80		08		php		                PHP
.381a81		48		pha		                PHA             ; begin setdp macro
.381a82		08		php		                PHP
.381a83		c2 20		rep #$20	                REP #$20        ; set A long
.381a85		a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.381a88		5b		tcd		                TCD
.381a89		28		plp		                PLP
.381a8a		68		pla		                PLA             ; end setdp macro
.381a8b		e2 20		sep #$20	                SEP #$20        ; set A short
.381a8d		c2 10		rep #$10	                REP #$10        ; set X long
.381a8f		58		cli		                CLI                     ; Make sure interrupts can happen
.381a90		af 8a 0f 00	lda $000f8a	get_wait        LDA @lKEYFLAG           ; Check the keyboard control flag
.381a94		29 60		and #$60	                AND #KB_CREDITS         ; Are the credits flagged?
.381a96		c9 60		cmp #$60	                CMP #KB_CREDITS
.381a98		d0 0a		bne $381aa4	                BNE check_buffer        ; No: check the key buffer
.381a9a		a9 00		lda #$00	                LDA #0                  ; Yes: clear the flags
.381a9c		8f 8a 0f 00	sta $000f8a	                STA @lKEYFLAG
.381aa0		22 d4 12 39	jsl $3912d4	                JSL SHOW_CREDITS        ; Then show the credits screen and wait for a key press
.381aa4		a6 8b		ldx $0f8b	check_buffer    LDX KEY_BUFFER_RPOS     ; Is KEY_BUFFER_RPOS < KEY_BUFFER_WPOS
.381aa6		e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS
.381aa8		90 02		bcc $381aac	                BCC read_buff           ; Yes: a key is present, read it
.381aaa		80 e4		bra $381a90	                BRA get_wait            ; Otherwise, keep waiting
.381aac		78		sei		read_buff       SEI                     ; Don't interrupt me!
.381aad		b5 00		lda $0f00,x	                LDA KEY_BUFFER,X        ; Get the key
.381aaf		e8		inx		                INX                     ; And move to the next key
.381ab0		e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS     ; Did we just read the last key?
.381ab2		f0 07		beq $381abb	                BEQ reset_indexes       ; Yes: return to 0 position
.381ab4		86 8b		stx $0f8b	                STX KEY_BUFFER_RPOS     ; Otherwise: Update the read index
.381ab6		58		cli		                CLI
.381ab7		28		plp		done            PLP                     ; Restore status and interrupts
.381ab8		2b		pld		                PLD
.381ab9		fa		plx		                PLX
.381aba		6b		rtl		                RTL
.381abb		64 8b		stz $0f8b	reset_indexes   STZ KEY_BUFFER_RPOS     ; Reset read index to the beginning
.381abd		64 8d		stz $0f8d	                STZ KEY_BUFFER_WPOS     ; Reset the write index to the beginning
.381abf		80 f6		bra $381ab7	                BRA done
.381ac1						KBD_GETC
.381ac1		da		phx		                PHX
.381ac2		0b		phd		                PHD
.381ac3		08		php		                PHP
.381ac4		48		pha		                PHA             ; begin setdp macro
.381ac5		08		php		                PHP
.381ac6		c2 20		rep #$20	                REP #$20        ; set A long
.381ac8		a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.381acb		5b		tcd		                TCD
.381acc		28		plp		                PLP
.381acd		68		pla		                PLA             ; end setdp macro
.381ace		e2 20		sep #$20	                SEP #$20        ; set A short
.381ad0		c2 10		rep #$10	                REP #$10        ; set X long
.381ad2		58		cli		                CLI                     ; Make sure interrupts can happen
.381ad3		a6 8b		ldx $0f8b	check_buffer    LDX KEY_BUFFER_RPOS     ; Is KEY_BUFFER_RPOS < KEY_BUFFER_WPOS
.381ad5		e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS
.381ad7		90 05		bcc $381ade	                BCC read_buff           ; Yes: a key is present, read it
.381ad9		a9 00		lda #$00	                LDA #0                  ; If no key, return zero and set carry bit
.381adb		38		sec		                SEC
.381adc		80 0b		bra $381ae9	                BRA done
.381ade		78		sei		read_buff       SEI                     ; Don't interrupt me!
.381adf		b5 00		lda $0f00,x	                LDA KEY_BUFFER,X        ; Get the key
.381ae1		e8		inx		                INX                     ; And move to the next key
.381ae2		e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS     ; Did we just read the last key?
.381ae4		f0 07		beq $381aed	                BEQ reset_indexes       ; Yes: return to 0 position
.381ae6		86 8b		stx $0f8b	                STX KEY_BUFFER_RPOS     ; Otherwise: Update the read index
.381ae8		58		cli		                CLI
.381ae9		28		plp		done            PLP                     ; Restore status and interrupts
.381aea		2b		pld		                PLD
.381aeb		fa		plx		                PLX
.381aec		6b		rtl		                RTL
.381aed		64 8b		stz $0f8b	reset_indexes   STZ KEY_BUFFER_RPOS     ; Reset read index to the beginning
.381aef		64 8d		stz $0f8d	                STZ KEY_BUFFER_WPOS     ; Reset the write index to the beginning
.381af1		80 f6		bra $381ae9	                BRA done

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/Math_def.asm

=$000100					UNSIGNED_MULT_A_LO  = $000100
=$000101					UNSIGNED_MULT_A_HI  = $000101
=$000102					UNSIGNED_MULT_B_LO  = $000102
=$000103					UNSIGNED_MULT_B_HI  = $000103
=$000104					UNSIGNED_MULT_AL_LO = $000104
=$000105					UNSIGNED_MULT_AL_HI = $000105
=$000106					UNSIGNED_MULT_AH_LO = $000106
=$000107					UNSIGNED_MULT_AH_HI = $000107
=$000108					SIGNED_MULT_A_LO    = $000108
=$000109					SIGNED_MULT_A_HI    = $000109
=$00010a					SIGNED_MULT_B_LO    = $00010A
=$00010b					SIGNED_MULT_B_HI    = $00010B
=$00010c					SIGNED_MULT_AL_LO   = $00010C
=$00010d					SIGNED_MULT_AL_HI   = $00010D
=$00010e					SIGNED_MULT_AH_LO   = $00010E
=$00010f					SIGNED_MULT_AH_HI   = $00010F
=$000110					UNSIGNED_DIV_DEM_LO = $000110
=$000111					UNSIGNED_DIV_DEM_HI = $000111
=$000112					UNSIGNED_DIV_NUM_LO = $000112
=$000113					UNSIGNED_DIV_NUM_HI = $000113
=$000114					UNSIGNED_DIV_QUO_LO = $000114
=$000115					UNSIGNED_DIV_QUO_HI = $000115
=$000116					UNSIGNED_DIV_REM_LO = $000116
=$000117					UNSIGNED_DIV_REM_HI = $000117
=$000118					SIGNED_DIV_DEM_LO   = $000118
=$000119					SIGNED_DIV_DEM_HI   = $000119
=$00011a					SIGNED_DIV_NUM_LO   = $00011A
=$00011b					SIGNED_DIV_NUM_HI   = $00011B
=$00011c					SIGNED_DIV_QUO_LO   = $00011C
=$00011d					SIGNED_DIV_QUO_HI   = $00011D
=$00011e					SIGNED_DIV_REM_LO   = $00011E
=$00011f					SIGNED_DIV_REM_HI   = $00011F
=$000120					ADDER32_A_LL        = $000120
=$000121					ADDER32_A_LH        = $000121
=$000122					ADDER32_A_HL        = $000122
=$000123					ADDER32_A_HH        = $000123
=$000124					ADDER32_B_LL        = $000124
=$000125					ADDER32_B_LH        = $000125
=$000126					ADDER32_B_HL        = $000126
=$000127					ADDER32_B_HH        = $000127
=$000128					ADDER32_R_LL        = $000128
=$000129					ADDER32_R_LH        = $000129
=$00012a					ADDER32_R_HL        = $00012A
=$00012b					ADDER32_R_HH        = $00012B

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/timer_def.asm

=$000160					TIMER0_CTRL_REG   = $000160 ; (Write - Control, Read Status)
=$01						TMR0_EN     = $01
=$02						TMR0_SCLR   = $02
=$04						TMR0_SLOAD  = $04 ; Use SLOAD is
=$08						TMR0_UPDWN  = $08
=$000161					TIMER0_CHARGE_L   = $000161 ; Use if you want to Precharge and countdown
=$000162					TIMER0_CHARGE_M   = $000162 ;
=$000163					TIMER0_CHARGE_H   = $000163 ;
=$000164					TIMER0_CMP_REG    = $000164 ;
=$01						TMR0_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02						TMR0_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$000165					TIMER0_CMP_L      = $000165 ; Load this Value for Countup
=$000166					TIMER0_CMP_M      = $000166 ;
=$000167					TIMER0_CMP_H      = $000167 ;
=$000168					TIMER1_CTRL_REG   = $000168 ;
=$01						TMR1_EN     = $01
=$02						TMR1_SCLR   = $02
=$04						TMR1_SLOAD  = $04
=$08						TMR1_UPDWN  = $08 ; 1 = Up, 0 = Down
=$000169					TIMER1_CHARGE_L   = $000169 ; Use if you want to Precharge and countdown
=$00016a					TIMER1_CHARGE_M   = $00016A ;
=$00016b					TIMER1_CHARGE_H   = $00016B ;
=$00016c					TIMER1_CMP_REG    = $00016C ;
=$01						TMR1_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02						TMR1_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$00016d					TIMER1_CMP_L      = $00016D ;
=$00016e					TIMER1_CMP_M      = $00016E ;
=$00016f					TIMER1_CMP_H      = $00016F ;

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/interrupt_def.asm

=$000140					INT_PENDING_REG0 = $000140 ;
=$000141					INT_PENDING_REG1 = $000141 ;
=$000142					INT_PENDING_REG2 = $000142 ;
=$000143					INT_PENDING_REG3 = $000143 ; FMX Model
=$000144					INT_POL_REG0     = $000144 ;
=$000145					INT_POL_REG1     = $000145 ;
=$000146					INT_POL_REG2     = $000146 ;
=$000147					INT_POL_REG7     = $000147 ; FMX Model
=$000148					INT_EDGE_REG0    = $000148 ;
=$000149					INT_EDGE_REG1    = $000149 ;
=$00014a					INT_EDGE_REG2    = $00014A ;
=$00014b					INT_EDGE_REG3    = $00014B ; FMX Model
=$00014c					INT_MASK_REG0    = $00014C ;
=$00014d					INT_MASK_REG1    = $00014D ;
=$00014e					INT_MASK_REG2    = $00014E ;
=$00014f					INT_MASK_REG3    = $00014F ; FMX Model
=$01						FNX0_INT00_SOF        = $01  ;Start of Frame @ 60FPS
=$02						FNX0_INT01_SOL        = $02  ;Start of Line (Programmable)
=$04						FNX0_INT02_TMR0       = $04  ;Timer 0 Interrupt
=$08						FNX0_INT03_TMR1       = $08  ;Timer 1 Interrupt
=$10						FNX0_INT04_TMR2       = $10  ;Timer 2 Interrupt
=$20						FNX0_INT05_RTC        = $20  ;Real-Time Clock Interrupt
=$40						FNX0_INT06_FDC        = $40  ;Floppy Disk Controller
=$80						FNX0_INT07_MOUSE      = $80  ; Mouse Interrupt (INT12 in SuperIO IOspace)
=$01						FNX1_INT00_KBD        = $01  ;Keyboard Interrupt
=$02						FNX1_INT01_COL0       = $02  ;VICKY_II (INT2) Sprite Collision
=$04						FNX1_INT02_COL1       = $04  ;VICKY_II (INT3) Bitmap Collision
=$08						FNX1_INT03_COM2       = $08  ;Serial Port 2
=$10						FNX1_INT04_COM1       = $10  ;Serial Port 1
=$20						FNX1_INT05_MPU401     = $20  ;Midi Controller Interrupt
=$40						FNX1_INT06_LPT        = $40  ;Parallel Port
=$80						FNX1_INT07_SDCARD     = $80  ;SD Card Controller Interrupt (CH376S)
=$01						FNX2_INT00_OPL3       = $01  ;OPl3
=$02						FNX2_INT01_GABE_INT0  = $02  ;GABE (INT0) - TBD
=$04						FNX2_INT02_GABE_INT1  = $04  ;GABE (INT1) - TBD
=$08						FNX2_INT03_VDMA       = $08  ;VICKY_II (INT4) - VDMA Interrupt
=$10						FNX2_INT04_COL2       = $10  ;VICKY_II (INT5) Tile Collision
=$20						FNX2_INT05_GABE_INT2  = $20  ;GABE (INT2) - TBD
=$40						FNX2_INT06_EXT        = $40  ;External Expansion
=$80						FNX2_INT07_SDCARD_INS = $80  ; SDCARD Insertion
=$01						FNX3_INT00_OPN2       = $01  ;OPN2
=$02						FNX3_INT01_OPM        = $02  ;OPM
=$04						FNX3_INT02_IDE        = $04  ;HDD IDE INTERRUPT
=$08						FNX3_INT03_TBD        = $08  ;TBD
=$10						FNX3_INT04_TBD        = $10  ;TBD
=$20						FNX3_INT05_TBD        = $20  ;GABE (INT2) - TBD
=$40						FNX3_INT06_TBD        = $40  ;External Expansion
=$80						FNX3_INT07_TBD        = $80  ; SDCARD Insertion

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/super_io_def.asm

=$af1100					PME_STS_REG     = $AF1100
=$af1102					PME_EN_REG		  = $AF1102
=$af1104					PME_STS1_REG		= $AF1104
=$af1105					PME_STS2_REG		= $AF1105
=$af1106					PME_STS3_REG		= $AF1106
=$af1107					PME_STS4_REG		= $AF1107
=$af1108					PME_STS5_REG		= $AF1108
=$af110a					PME_EN1_REG     = $AF110A
=$af110b					PME_EN2_REG     = $AF110B
=$af110c					PME_EN3_REG     = $AF110C
=$af110d					PME_EN4_REG     = $AF110D
=$af110e					PME_EN5_REG     = $AF110E
=$af1110					SMI_STS1_REG		= $AF1110
=$af1111					SMI_STS2_REG		= $AF1111
=$af1112					SMI_STS3_REG		= $AF1112
=$af1113					SMI_STS4_REG		= $AF1113
=$af1114					SMI_STS5_REG		= $AF1114
=$af1116					SMI_EN1_REG     = $AF1116
=$af1117					SMI_EN2_REG     = $AF1117
=$af1118					SMI_EN3_REG     = $AF1118
=$af1119					SMI_EN4_REG     = $AF1119
=$af111a					SMI_EN5_REG     = $AF111A
=$af111c					MSC_ST_REG      = $AF111C
=$af111e					FORCE_DISK_CHANGE       = $AF111E
=$af111f					FLOPPY_DATA_RATE        = $AF111F
=$af1120					UART1_FIFO_CTRL_SHDW    = $AF1120
=$af1121					UART2_FIFO_CTRL_SHDW    = $AF1121
=$af1122					DEV_DISABLE_REG         = $AF1122
=$af1123					GP10_REG    		= $AF1123
=$af1124					GP11_REG    		= $AF1124
=$af1125					GP12_REG    		= $AF1125
=$af1126					GP13_REG    		= $AF1126
=$af1127					GP14_REG    		= $AF1127
=$af1128					GP15_REG    		= $AF1128
=$af1129					GP16_REG    		= $AF1129
=$af112a					GP17_REG    		= $AF112A
=$af112b					GP20_REG    		= $AF112B
=$af112c					GP21_REG    		= $AF112C
=$af112d					GP22_REG		= $AF112D
=$af112f					GP24_REG		= $AF112F
=$af1130					GP25_REG		= $AF1130
=$af1131					GP26_REG		= $AF1131
=$af1132					GP27_REG		= $AF1132
=$af1133					GP30_REG		= $AF1133
=$af1134					GP31_REG		= $AF1134
=$af1135					GP32_REG		= $AF1135
=$af1136					GP33_REG		= $AF1136
=$af1137					GP34_REG		= $AF1137
=$af1138					GP35_REG		= $AF1138
=$af1139					GP36_REG		= $AF1139
=$af113a					GP37_REG		= $AF113A
=$af113b					GP40_REG		= $AF113B
=$af113c					GP41_REG		= $AF113C
=$af113d					GP42_REG		= $AF113D
=$af113e					GP43_REG		= $AF113E
=$af113f					GP50_REG		= $AF113F
=$af1140					GP51_REG		= $AF1140
=$af1141					GP52_REG		= $AF1141
=$af1142					GP53_REG		= $AF1142
=$af1143					GP54_REG		= $AF1143
=$af1144					GP55_REG		= $AF1144
=$af1145					GP56_REG		= $AF1145
=$af1146					GP57_REG		= $AF1146
=$af1147					GP60_REG		= $AF1147
=$af1148					GP61_REG		= $AF1148
=$af114b					GP1_REG			= $AF114B
=$af114c					GP2_REG			= $AF114C
=$af114d					GP3_REG			= $AF114D
=$af114e					GP4_REG			= $AF114E
=$af114f					GP5_REG			= $AF114F
=$af1150					GP6_REG			= $AF1150
=$af1156					FAN1_REG		        = $AF1156
=$af1157					FAN2_REG            = $AF1157
=$af1158					FAN_CTRL_REG  	    = $AF1158
=$af1159					FAN1_TACH_REG       = $AF1159
=$af115a					FAN2_TACH_REG       = $AF115A
=$af115b					FAN1_PRELOAD_REG    = $AF115B
=$af115c					FAN2_PRELOAD_REG    = $AF115C
=$af115d					LED1_REG    		    = $AF115D
=$af115e					LED2_REG    		    = $AF115E
=$af115f					KEYBOARD_SCAN_CODE	= $AF115F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/keyboard_def.asm

=$af1807					    STATUS_PORT 	= $AF1807
=$af1807					    KBD_CMD_BUF		= $AF1807
=$af1803					    KBD_OUT_BUF 	= $AF1803
=$af1803					    KBD_INPT_BUF	= $AF1803
=$af1803					    KBD_DATA_BUF	= $AF1803
=$af180a					    PORT_A		    = $AF180A   ;This is a Timing Register, the value is hard coded, so there is no need to use those
=$af180b					    PORT_B			= $AF180B   ;This is a Timing Register, the value is hard coded, so there is no need to use those
=$01						OUT_BUF_FULL    = $01
=$02						INPT_BUF_FULL	= $02
=$04						SYS_FLAG		= $04
=$08						CMD_DATA		= $08
=$10						KEYBD_INH       = $10
=$20						TRANS_TMOUT	    = $20
=$40						RCV_TMOUT		= $40
=$80						PARITY_EVEN		= $80
=$10						INH_KEYBOARD	= $10
=$ae						KBD_ENA			= $AE
=$ad						KBD_DIS			= $AD
=$f1						KB_MENU			= $F1
=$f4						KB_ENABLE		= $F4
=$f7						KB_MAKEBREAK    = $F7
=$fe						KB_ECHO			= $FE
=$ff						KB_RESET		= $FF
=$ed						KB_LED_CMD		= $ED
=$aa						KB_OK			= $AA
=$fa						KB_ACK			= $FA
=$ff						KB_OVERRUN		= $FF
=$fe						KB_RESEND		= $FE
=$f0						KB_BREAK		= $F0
=$10						KB_FA			= $10
=$20						KB_FE			= $20
=$40						KB_PR_LED		= $40
=$01						KB_SCROLL_LOCK  = $01
=$02						KB_NUM_LOCK     = $02
=$04						KB_CAPS_LOCK    = $04
=$80						KB_CTRL_C = $80             ; CTRL-C was pressed
=$60						KB_CREDITS = $60            ; Credits key was pressed

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/RTC_def.asm

=$af0800					RTC_SEC       = $AF0800 ;Seconds Register
=$af0801					RTC_SEC_ALARM = $AF0801 ;Seconds Alarm Register
=$af0802					RTC_MIN       = $AF0802 ;Minutes Register
=$af0803					RTC_MIN_ALARM = $AF0803 ;Minutes Alarm Register
=$af0804					RTC_HRS       = $AF0804 ;Hours Register
=$af0805					RTC_HRS_ALARM = $AF0805 ;Hours Alarm Register
=$af0806					RTC_DAY       = $AF0806 ;Day Register
=$af0807					RTC_DAY_ALARM = $AF0807 ;Day Alarm Register
=$af0808					RTC_DOW       = $AF0808 ;Day of Week Register
=$af0809					RTC_MONTH     = $AF0809 ;Month Register
=$af080a					RTC_YEAR      = $AF080A ;Year Register
=$af080b					RTC_RATES     = $AF080B ;Rates Register
=$af080c					RTC_ENABLE    = $AF080C ;Enables Register
=$af080d					RTC_FLAGS     = $AF080D ;Flags Register
=$af080e					RTC_CTRL      = $AF080E ;Control Register
=$af080f					RTC_CENTURY   = $AF080F ;Century Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/io_def.asm

=0						CHAN_CONSOLE  = 0           ; ID for screen and keyboard access
=1						CHAN_COM1     = 1           ; ID for serial access on COM1 (external port)
=2						CHAN_COM2     = 2           ; ID for serial access on COM2 (internal port)
=3						CHAN_LPT      = 3           ; ID for parallel port
=4						CHAN_EVID     = 4           ; ID for the second video port
=$afe810					SDCARD_DATA   = $AFE810     ;(R/W) SDCARD (CH376S) Data PORT_A (A0 = 0)
=$afe811					SDCARD_CMD    = $AFE811     ;(R/W) SDCARD (CH376S) CMD/STATUS Port (A0 = 1)
=$afe812					SDCARD_STAT   = $AFE812     ;(R) SDCARD (Bit[0] = CD, Bit[1] = WP)
=$01						SDC_DETECTED = $01          ; SD card has been detected (0 = card present, 1 = no card present)
=$02						SDC_WRITEPROT = $02         ; SD card is write protected (0 = card is writeable, 1 = card is write protected or missing)
=$afe900					CODEC_DATA_LO = $AFE900     ;(W) LSB of Add/Data Reg to Control CODEC See WM8776 Spec
=$afe901					CODEC_DATA_HI = $AFE901     ;(W) MSB od Add/Data Reg to Control CODEC See WM8776 Spec
=$afe902					CODEC_WR_CTRL = $AFE902     ;(W) Bit[0] = 1 -> Start Writing the CODEC Control Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/Trinity_CFP9301_def.asm

=$afe800					JOYSTICK0           = $AFE800   ;(R) Joystick 0 - J7 (next to SD Card)
=$afe801					JOYSTICK1           = $AFE801   ;(R) Joystick 1 - J8
=$afe802					JOYSTICK2           = $AFE802   ;(R) Joystick 2 - J9
=$afe803					JOYSTICK3           = $AFE803   ;(R) Joystick 3 - J10 (Next to Buzzer)
=$afe804					JOYSTICK_MODE       = $AFE804
=$01						NES_SNES_EN0        = $01       ; Enable the NES/SNES Mode on Port 0
=$02						NES_SNES_EN1        = $02       ; Enable the NES/SNES Mode on Port 1
=$04						NES_SNES_JOY        = $04       ; 0 = NES, 1 = SNES
=$40						NES_SNES_DONE       = $40       ; Poll to see if the Deserializer is done
=$80						NES_SNES_TRIG       = $80       ; Set to start the Serializer
=$afe805					REVOFPCB_C          = $AFE805   ; You should read the ASCCII for "C"
=$afe806					REVOFPCB_4          = $AFE806   ; You should read the ASCCII for "4"
=$afe807					REVOFPCB_A          = $AFE807   ; You should read the ASCCII for "A"
=$afe808					NES_SNES0_DAT_LO    = $AFE808   ; Contains the 8bits From NES and SNES
=$afe809					SNES0_DAT_HI0       = $AFE809   ; Contains the extra 4 bit from the SNES Controller
=$afe80a					NES_SNES1_DAT_LO    = $AFE80A
=$afe80b					SNES1_DAT_HI0       = $AFE80B
=$afe80c					CFP9301_REV         = $AFE80C   ; Hardware Revision of the CPLD Code
=$afe80d					DIP_USER            = $AFE80D   ; Dip Switch 3/4/5 can be user Defined
=$afe80e					DIP_BOOTMODE        = $AFE80E
=$01						BOOT_MODE0          = $01
=$02						BOOT_MODE1          = $02
=$80						HD_INSTALLED        = $80
=$00						DIP_BOOT_IDE        = $00
=$01						DIP_BOOT_SDCARD     = $01
=$02						DIP_BOOT_FLOPPY     = $02
=$03						DIP_BOOT_BASIC      = $03

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/Unity_CFP9307_def.asm

=$afe830					IDE_DATA      = $AFE830 ; 8-Bit Access here Only
=$afe831					IDE_ERROR     = $AFE831 ; Error Information register (only read when there is an error ) - Probably clears Error Bits
=$afe832					IDE_SECT_CNT  = $AFE832 ; Sector Count Register (also used to pass parameter for timeout for IDLE modus Command)
=$afe833					IDE_SECT_SRT  = $AFE833 ; Start Sector Register (0 = 256), so start @ 1
=$afe834					IDE_CLDR_LO   = $AFE834 ; Low Byte of Cylinder Numnber {7:0}
=$afe835					IDE_CLDR_HI   = $AFE835 ;  Hi Byte of Cylinder Number {9:8} (1023-0).
=$afe836					IDE_HEAD      = $AFE836 ; Head, device select, {3:0} HEad Number, 4 -> 0:Master, 1:Slave, {7:5} = 101 (legacy);
=$afe837					IDE_CMD_STAT  = $AFE837 ; Command/Status Register - Reading this will clear the Interrupt Registers
=$afe838					IDE_DATA_LO   = $AFE838 ; 16-bit access here
=$afe839					IDE_DATA_HI   = $AFE839 ;
=$01						IDE_ERR_AMNF = $01      ; Error: Address mark not found
=$02						IDE_ERR_TKZNF = $02     ; Error: Track 0 not found
=$04						IDE_ERR_ABRT = $04      ; Error: Aborted command
=$08						IDE_ERR_MCR = $08       ; Error: Media change request
=$10						IDE_ERR_IDNF = $10      ; Error: ID not found
=$20						IDE_ERR_MC = $20        ; Error: Media change
=$40						IDE_ERR_UNC = $40       ; Error: Uncorrectable data error
=$80						IDE_ERR_BBK = $80       ; Error: Bad block detected
=$80						IDE_STAT_BSY = $80      ; BSY (Busy) is set whenever the device has control of the command Block Registers.
=$40						IDE_STAT_DRDY = $40     ; DRDY (Device Ready) is set to indicate that the device is capable of accepting all command codes.
=$20						IDE_STAT_DF = $20       ; DF (Device Fault) indicates a device fault error has been detected.
=$10						IDE_STAT_DSC = $10      ; DSC (Device Seek Complete) indicates that the device heads are settled over a track.
=$08						IDE_STAT_DRQ = $08      ; DRQ (Data Request) indicates that the device is ready to transfer a word or byte of data between
=$04						IDE_STAT_CORR = $04     ; CORR (Corrected Data) is used to indicate a correctable data error.
=$02						IDE_STAT_IDX = $02      ; Vendor specific bit
=$01						IDE_STAT_ERR = $01      ; ERR (Error) indicates that an error occurred during execution of the previous command.
=$ec						IDE_CMD_IDENTIFY = $EC      ; Get device identification data
=$21						IDE_CMD_READ_SECTOR = $21   ; Read 1 or more sectors
=$30						IDE_CMD_WRITE_SECTOR = $30  ; Write 1 or more sectors

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/GABE_Control_Registers_def.asm

=$afe880					GABE_MSTR_CTRL      = $AFE880
=$01						GABE_CTRL_PWR_LED   = $01     ; Controls the LED in the Front of the case (Next to the reset button)
=$02						GABE_CTRL_SDC_LED   = $02     ; Controls the LED in the Front of the Case (Next to SDCard)
=$04						GABE_CTRL_STS_LED0  = $04     ; Control Status LED0 (General Use) - C256 Foenix U Only
=$08						GABE_CTRL_STS_LED1  = $08     ; Control Status LED0 (General Use) - C256 Foenix U Only
=$10						GABE_CTRL_BUZZER    = $10     ; Controls the Buzzer
=$80						GABE_CTRL_WRM_RST   = $80     ; Warm Reset (needs to Setup other registers)
=$afe881					GABE_LED_FLASH_CTRL = $AFE881  ; Flashing LED Control
=$01						GABE_LED0_FLASH_CTRL = $01     ; 0- Automatic Flash 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$02						GABE_LED1_FLASH_CTRL = $02     ; 0- Automatic Flash 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED1 to manually control)
=$10						GABE_LD0_FLASH_FRQ0   = $10     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$20						GABE_LD0_FLASH_FRQ1   = $20     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$40						GABE_LD1_FLASH_FRQ0   = $40     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$80						GABE_LD1_FLASH_FRQ1   = $80     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$afe882					GABE_RST_AUTH0      = $AFE882 ; Must Contain the BYTE $AD for Reset to Activate
=$afe883					GABE_RST_AUTH1      = $AFE883 ; Must Contain the BYTE $DE for Reset to Activate
=$afe884					GABE_RNG_DAT_LO     = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885					GABE_RNG_DAT_HI     = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe884					GABE_RNG_SEED_LO    = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885					GABE_RNG_SEED_HI    = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe886					GABE_RNG_STAT       = $AFE886 ;
=$80						GABE_RNG_LFSR_DONE  = $80     ; indicates that Output = SEED Database
=$afe886					GABE_RNG_CTRL       = $AFE886 ;
=$01						GABE_RNG_CTRL_EN    = $01     ; Enable the LFSR BLOCK_LEN
=$02						GABE_RNG_CTRL_DV    = $02     ; After Setting the Seed Value, Toggle that Bit for it be registered
=$afe887					GABE_SYS_STAT       = $AFE887 ;
=$01						GABE_SYS_STAT_MID0  = $01     ; Machine ID -- LSB
=$02						GABE_SYS_STAT_MID1  = $02     ; Machine ID --
=$04						GABE_SYS_STAT_MID2  = $04     ; Machine ID -- MSB
=$10						GABE_SYS_STAT_EXP   = $10     ; if Zero, there is an Expansion Card Preset
=$40						GABE_SYS_STAT_CPUA  = $40     ; Indicates the (8bit/16bit) Size of the Accumulator - Not Implemented
=$80						GABE_SYS_STAT_CPUX  = $80     ; Indicates the (8bit/16bit) Size of the Accumulator - Not Implemented
=$afe88a					GABE_SUBVERSION_LO  = $AFE88A
=$afe88b					GABE_SUBVERSION_HI  = $AFE88B
=$afe88c					GABE_VERSION_LO     = $AFE88C
=$afe88d					GABE_VERSION_HI     = $AFE88D
=$afe88e					GABE_MODEL_LO       = $AFE88E
=$afe88f					GABE_MODEL_HI       = $AFE88F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/SID_def.asm

=$afe400					SID0_V1_FREQ_LO    = $AFE400 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$afe401					SID0_V1_FREQ_HI    = $AFE401 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$afe402					SID0_V1_PW_LO      = $AFE402 ;SID - L - Voice 1 (Write Only) - PW LOW
=$afe403					SID0_V1_PW_HI      = $AFE403 ;SID - L - Voice 1 (Write Only) - PW HI
=$afe404					SID0_V1_CTRL       = $AFE404 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$afe405					SID0_V1_ATCK_DECY  = $AFE405 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$afe406					SID0_V1_SSTN_RLSE  = $AFE406 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$afe407					SID0_V2_FREQ_LO    = $AFE407 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$afe408					SID0_V2_FREQ_HI    = $AFE408 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$afe409					SID0_V2_PW_LO      = $AFE409 ;SID - L - Voice 2 (Write Only) - PW LOW
=$afe40a					SID0_V2_PW_HI      = $AFE40A ;SID - L - Voice 2 (Write Only) - PW HI
=$afe40b					SID0_V2_CTRL       = $AFE40B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$afe40c					SID0_V2_ATCK_DECY  = $AFE40C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$afe40d					SID0_V2_SSTN_RLSE  = $AFE40D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$afe40e					SID0_V3_FREQ_LO    = $AFE40E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$afe40f					SID0_V3_FREQ_HI    = $AFE40F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$afe410					SID0_V3_PW_LO      = $AFE410 ;SID - L - Voice 3 (Write Only) - PW LOW
=$afe411					SID0_V3_PW_HI      = $AFE411 ;SID - L - Voice 3 (Write Only) - PW HI
=$afe412					SID0_V3_CTRL       = $AFE412 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$afe413					SID0_V3_ATCK_DECY  = $AFE413 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$afe414					SID0_V3_SSTN_RLSE  = $AFE414 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$afe415					SID0_FC_LO         = $AFE415 ;SID - L - Filter (Write Only) - FC LOW
=$afe416					SID0_FC_HI         = $AFE416 ;SID - L - Filter (Write Only) - FC HI
=$afe417					SID0_RES_FILT      = $AFE417 ;SID - L - Filter (Write Only) - RES / FILT
=$afe418					SID0_MODE_VOL      = $AFE418 ;SID - L - Filter (Write Only) - MODE / VOL
=$afe419					SID0_POT_X         = $AFE419 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$afe41a					SID0_POT_Y         = $AFE41A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$afe41b					SID0_OSC3_RND      = $AFE41B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$afe41c					SID0_ENV3          = $AFE41C ;SID - L - Misc (Read Only)  - ENV3
=$afe41d					SID0_NOT_USED0     = $AFE41D ;SID - L - NOT USED
=$afe41e					SID0_NOT_USED1     = $AFE41E ;SID - L - NOT USED
=$afe41f					SID0_NOT_USED2     = $AFE41F ;SID - L - NOT USED

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_GENERAL_def.asm

=$af0000					MASTER_CTRL_REG_L	      = $AF0000
=$01						Mstr_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$02						Mstr_Ctrl_Text_Overlay  = $02       ; Enable the Overlay of the text mode on top of Graphic Mode (the Background Color is ignored)
=$04						Mstr_Ctrl_Graph_Mode_En = $04       ; Enable the Graphic Mode
=$08						Mstr_Ctrl_Bitmap_En     = $08       ; Enable the Bitmap Module In Vicky
=$10						Mstr_Ctrl_TileMap_En    = $10       ; Enable the Tile Module in Vicky
=$20						Mstr_Ctrl_Sprite_En     = $20       ; Enable the Sprite Module in Vicky
=$40						Mstr_Ctrl_GAMMA_En      = $40       ; this Enable the GAMMA correction - The Analog and DVI have different color value, the GAMMA is great to correct the difference
=$80						Mstr_Ctrl_Disable_Vid   = $80       ; This will disable the Scanning of the Video hence giving 100% bandwith to the CPU
=$af0001					MASTER_CTRL_REG_H       = $AF0001
=$01						Mstr_Ctrl_Video_Mode0   = $01       ; 0 - 640x480 (Clock @ 25.175Mhz), 1 - 800x600 (Clock @ 40Mhz)
=$02						Mstr_Ctrl_Video_Mode1   = $02       ; 0 - No Pixel Doubling, 1- Pixel Doubling (Reduce the Pixel Resolution by 2)
=$af0002					GAMMA_CTRL_REG          = $AF0002
=$01						GAMMA_Ctrl_Input        = $01 ; 0 = DipSwitch Chooses GAMMA on/off , 1- Software Control
=$02						GAMMA_Ctrl_Soft         = $02 ; 0 = GAMMA Table is not Applied, 1 = GAMMA Table is Applied
=$08						GAMMA_DP_SW_VAL         = $08 ; READ ONLY - Actual DIP Switch Value
=$10						HIRES_DP_SW_VAL         = $10 ; READ ONLY - 0 = Hi-Res on BOOT ON, 1 = Hi-Res on BOOT OFF
=$af0003					VKY_RESERVED_01         = $AF0003
=$01						Border_Ctrl_Enable      = $01
=$af0004					BORDER_CTRL_REG         = $AF0004 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$af0005					BORDER_COLOR_B          = $AF0005
=$af0006					BORDER_COLOR_G          = $AF0006
=$af0007					BORDER_COLOR_R          = $AF0007
=$af0008					BORDER_X_SIZE           = $AF0008; X-  Values: 0 - 32 (Default: 32)
=$af0009					BORDER_Y_SIZE           = $AF0009; Y- Values 0 -32 (Default: 32)
=$af000d					BACKGROUND_COLOR_B      = $AF000D ; When in Graphic Mode, if a pixel is "0" then the Background pixel is chosen
=$af000e					BACKGROUND_COLOR_G      = $AF000E
=$af000f					BACKGROUND_COLOR_R      = $AF000F ;
=$af0010					VKY_TXT_CURSOR_CTRL_REG = $AF0010   ;[0]  Enable Text Mode
=$01						Vky_Cursor_Enable       = $01
=$02						Vky_Cursor_Flash_Rate0  = $02       ; 00 - 1/Sec, 01 - 2/Sec, 10 - 4/Sec, 11 - 5/Sec
=$04						Vky_Cursor_Flash_Rate1  = $04
=$08						Vky_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10						Vky_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$af0011					VKY_TXT_START_ADD_PTR   = $AF0011   ; This is an offset to change the Starting address of the Text Mode Buffer (in x)
=$af0012					VKY_TXT_CURSOR_CHAR_REG = $AF0012
=$af0013					VKY_TXT_CURSOR_COLR_REG = $AF0013
=$af0014					VKY_TXT_CURSOR_X_REG_L  = $AF0014
=$af0015					VKY_TXT_CURSOR_X_REG_H  = $AF0015
=$af0016					VKY_TXT_CURSOR_Y_REG_L  = $AF0016
=$af0017					VKY_TXT_CURSOR_Y_REG_H  = $AF0017
=$af001b					VKY_LINE_IRQ_CTRL_REG   = $AF001B ;[0] - Enable Line 0, [1] -Enable Line 1
=$af001c					VKY_LINE0_CMP_VALUE_LO  = $AF001C ;Write Only [7:0]
=$af001d					VKY_LINE0_CMP_VALUE_HI  = $AF001D ;Write Only [3:0]
=$af001e					VKY_LINE1_CMP_VALUE_LO  = $AF001E ;Write Only [7:0]
=$af001f					VKY_LINE1_CMP_VALUE_HI  = $AF001F ;Write Only [3:0]
=$af001c					VKY_INFO_CHIP_NUM_L     = $AF001C   ; VErsion
=$af001d					VKY_INFO_CHIP_NUM_H     = $AF001D   ; Version
=$af001e					VKY_INFO_CHIP_VER_L     = $AF001E   ; Sub-Version
=$af001f					VKY_INFO_CHIP_VER_H     = $AF001F   ; Sub-Version
=$af0500					MOUSE_PTR_GRAP0_START    = $AF0500 ; 16 x 16 = 256 Pixels (Grey Scale) 0 = Transparent, 1 = Black , 255 = White
=$af05ff					MOUSE_PTR_GRAP0_END      = $AF05FF ; Pointer 0
=$af0600					MOUSE_PTR_GRAP1_START    = $AF0600 ;
=$af06ff					MOUSE_PTR_GRAP1_END      = $AF06FF ; Pointer 1
=$af0700					MOUSE_PTR_CTRL_REG_L    = $AF0700 ; Bit[0] Enable, Bit[1] = 0  ( 0 = Pointer0, 1 = Pointer1)
=$af0701					MOUSE_PTR_CTRL_REG_H    = $AF0701 ;
=$af0702					MOUSE_PTR_X_POS_L       = $AF0702 ; X Position (0 - 639) (Can only read now) Writing will have no effect
=$af0703					MOUSE_PTR_X_POS_H       = $AF0703 ;
=$af0704					MOUSE_PTR_Y_POS_L       = $AF0704 ; Y Position (0 - 479) (Can only read now) Writing will have no effect
=$af0705					MOUSE_PTR_Y_POS_H       = $AF0705 ;
=$af0706					MOUSE_PTR_BYTE0         = $AF0706 ; Byte 0 of Mouse Packet (you must write 3 Bytes)
=$af0707					MOUSE_PTR_BYTE1         = $AF0707 ; Byte 1 of Mouse Packet (if you don't, then )
=$af0708					MOUSE_PTR_BYTE2         = $AF0708 ; Byte 2 of Mouse Packet (state Machine will be jammed in 1 state)
=$af070b					C256F_MODEL_MAJOR       = $AF070B ;
=$af070c					C256F_MODEL_MINOR       = $AF070C ;
=$af070d					FPGA_DOR                = $AF070D ;
=$af070e					FPGA_MOR                = $AF070E ;
=$af070f					FPGA_YOR                = $AF070F ;
=$af0900					VMEM2CPU_CTRL_REG      = $AF0900  ;
=$01						VMEM2CPU_Clear_FIFO    = $01        ; Setting this to 1 will flush (Reset) the FIFO, clear it after to return to normal function
=$02						VMEM2CPU_Intterupt     = $02        ; This is not implemented because there is not enough Interrupt line on the FMX
=$af0901					VMEM2CPU_Data_Port     = $AF0901    ; This is a Byte Port of the data that you have requested. (Output of the FIFO)
=$af0902					VMEM2CPU_Fifo_Count_LO = $AF0902    ; FIFO Count Lo (number of byte in the FIFO) FIFO Count is 10bits, Count_Bit0 to Count_Bit7 of Count
=$af0903					VMEM2CPU_Fifo_Count_HI = $AF0903    ; FIFO Count Hi, Bit 0 = Count_Bit8, Bit 1 = Count_Bit9
=$80						VMEM2CPU_Fifo_Empty    = $80        ; Bit 7 of VMEM2CPU_Fifo_Count_HI, when 1, the FIFO is empty.
=$af1f40					FG_CHAR_LUT_PTR         = $AF1F40
=$af1f80					BG_CHAR_LUT_PTR		    = $AF1F80
=$af2000					GRPH_LUT0_PTR		    = $AF2000
=$af2400					GRPH_LUT1_PTR		    = $AF2400
=$af2800					GRPH_LUT2_PTR		    = $AF2800
=$af2c00					GRPH_LUT3_PTR		    = $AF2C00
=$af3000					GRPH_LUT4_PTR		    = $AF3000
=$af3400					GRPH_LUT5_PTR		    = $AF3400
=$af3800					GRPH_LUT6_PTR		    = $AF3800
=$af3c00					GRPH_LUT7_PTR		    = $AF3C00
=$af4000					GAMMA_B_LUT_PTR		    = $AF4000
=$af4100					GAMMA_G_LUT_PTR		    = $AF4100
=$af4200					GAMMA_R_LUT_PTR		    = $AF4200
=$af8000					FONT_MEMORY_BANK0       = $AF8000     ;$AF8000 - $AF87FF
=$afa000					CS_TEXT_MEM_PTR         = $AFA000
=$afc000					CS_COLOR_MEM_PTR        = $AFC000

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_SDMA_def.asm

=$af0420					SDMA_CTRL_REG0           = $AF0420
=$01						SDMA_CTRL0_Enable        = $01
=$02						SDMA_CTRL0_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04						SDMA_CTRL0_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08						SDMA_CTRL0_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10						SDMA_CTRL0_SysRAM_Src    = $10     ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20						SDMA_CTRL0_SysRAM_Dst    = $20     ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$40						SDMA_CTLR0_RSVD          = $40     ;
=$80						SDMA_CTRL0_Start_TRF     = $80     ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0421					SDMA_CTRL_REG1           = $AF0421 ; Write Only - Byte to Write in the Fill Function
=$01						SDMA_CTRL1_IO_Src			   = $01		 ; 1 = Source is an IO Address (ADC, SuperIO, IDE)
=$02						SDMA_CTRL1_IO_Src16		   = $02		 ; 0 = Src 8Bits Transfer / 1= 16Bits Transfer
=$04						SDMA_CTRL1_IO_Dst			   = $04		 ; 1 = Destination is an IO Address (DAC, SuperIO, IDE)
=$08						SDMA_CTRL1_IO_Dst16      = $08     ; 0 = Dst 8bits Transfer / 1= 16bits
=$af0422					SDMA_SRC_ADDY_L         = $AF0422 ; Pointer to the Source of the Data to be stransfered
=$af0423					SDMA_SRC_ADDY_M         = $AF0423 ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0424					SDMA_SRC_ADDY_H         = $AF0424
=$af0425					SDMA_DST_ADDY_L         = $AF0425 ; Destination Pointer within Vicky's video memory Range
=$af0426					SDMA_DST_ADDY_M         = $AF0426 ; ($00_0000 - $3F_0000)
=$af0427					SDMA_DST_ADDY_H         = $AF0427
=$af0428					SDMA_SIZE_L             = $AF0428 ; Maximum Value: $40:0000 (4Megs)
=$af0429					SDMA_SIZE_M             = $AF0429
=$af042a					SDMA_SIZE_H             = $AF042A
=$af042b					SDMA_IGNORED            = $AF042B
=$af0428					SDMA_X_SIZE_L           = $AF0428 ; Maximum Value: 65535
=$af0429					SDMA_X_SIZE_H           = $AF0429
=$af042a					SDMA_Y_SIZE_L           = $AF042A ; Maximum Value: 65535
=$af042b					SDMA_Y_SIZE_H           = $AF042B
=$af042c					SDMA_SRC_STRIDE_L       = $AF042C ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af042d					SDMA_SRC_STRIDE_H       = $AF042D ;
=$af042e					SDMA_DST_STRIDE_L       = $AF042E ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af042f					SDMA_DST_STRIDE_H       = $AF042F ;
=$af0430					SDMA_BYTE_2_WRITE       = $AF0430 ; Write Only - Byte to Write in the Fill Function
=$af0430					SDMA_STATUS_REG         = $AF0430 ; Read only
=$01						SDMA_STAT_Size_Err       = $01     ; If Set to 1, Overall Size is Invalid
=$02						SDMA_STAT_Dst_Add_Err    = $02     ; If Set to 1, Destination Address Invalid
=$04						SDMA_STAT_Src_Add_Err    = $04     ; If Set to 1, Source Address Invalid
=$08						SDMA_STAT_TimeOut_Err    = $08     ; will be set to 1 if a Timeout occur when transfering between data from and to VRAM

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_VDMA_def.asm

=$af0400					VDMA_CONTROL_REG        = $AF0400
=$01						VDMA_CTRL_Enable        = $01
=$02						VDMA_CTRL_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04						VDMA_CTRL_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08						VDMA_CTRL_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10						VDMA_CTRL_SysRAM_Src    = $10     ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20						VDMA_CTRL_SysRAM_Dst    = $20     ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$80						VDMA_CTRL_Start_TRF     = $80     ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0401					VDMA_BYTE_2_WRITE       = $AF0401 ; Write Only - Byte to Write in the Fill Function
=$af0401					VDMA_STATUS_REG         = $AF0401 ; Read only
=$01						VDMA_STAT_Size_Err      = $01     ; If Set to 1, Overall Size is Invalid
=$02						VDMA_STAT_Dst_Add_Err   = $02     ; If Set to 1, Destination Address Invalid
=$04						VDMA_STAT_Src_Add_Err   = $04     ; If Set to 1, Source Address Invalid
=$80						VDMA_STAT_VDMA_IPS      = $80     ; If Set to 1, VDMA Transfer in Progress (this Inhibit CPU Access to Mem)
=$af0402					VDMA_SRC_ADDY_L         = $AF0402 ; Pointer to the Source of the Data to be stransfered
=$af0403					VDMA_SRC_ADDY_M         = $AF0403 ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0404					VDMA_SRC_ADDY_H         = $AF0404
=$af0405					VDMA_DST_ADDY_L         = $AF0405 ; Destination Pointer within Vicky's video memory Range
=$af0406					VDMA_DST_ADDY_M         = $AF0406 ; ($00_0000 - $3F_0000)
=$af0407					VDMA_DST_ADDY_H         = $AF0407
=$af0408					VDMA_SIZE_L             = $AF0408 ; Maximum Value: $40:0000 (4Megs)
=$af0409					VDMA_SIZE_M             = $AF0409
=$af040a					VDMA_SIZE_H             = $AF040A
=$af040b					VDMA_IGNORED            = $AF040B
=$af0408					VDMA_X_SIZE_L           = $AF0408 ; Maximum Value: 65535
=$af0409					VDMA_X_SIZE_H           = $AF0409
=$af040a					VDMA_Y_SIZE_L           = $AF040A ; Maximum Value: 65535
=$af040b					VDMA_Y_SIZE_H           = $AF040B
=$af040c					VDMA_SRC_STRIDE_L       = $AF040C ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040d					VDMA_SRC_STRIDE_H       = $AF040D ;
=$af040e					VDMA_DST_STRIDE_L       = $AF040E ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040f					VDMA_DST_STRIDE_H       = $AF040F ;

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_BITMAP_def.asm

=$01						BM_Enable             = $01
=$00						BM_LUT0               = $00 ;
=$02						BM_LUT1               = $02 ;
=$04						BM_LUT2               = $04 ;
=$06						BM_LUT3               = $06 ;
=$08						BM_LUT4               = $08 ;
=$0a						BM_LUT5               = $0A ;
=$0c						BM_LUT6               = $0C ;
=$0e						BM_LUT7               = $0E ;
=$40						BM_Collision_On       = $40 ;
=$af0100					BM0_CONTROL_REG     = $AF0100
=$af0101					BM0_START_ADDY_L    = $AF0101
=$af0102					BM0_START_ADDY_M    = $AF0102
=$af0103					BM0_START_ADDY_H    = $AF0103
=$af0104					BM0_X_OFFSET        = $AF0104   ; Not Implemented
=$af0105					BM0_Y_OFFSET        = $AF0105   ; Not Implemented
=$af0106					BM0_RESERVED_6      = $AF0106
=$af0107					BM0_RESERVED_7      = $AF0107
=$af0108					BM1_CONTROL_REG     = $AF0108
=$af0109					BM1_START_ADDY_L    = $AF0109
=$af010a					BM1_START_ADDY_M    = $AF010A
=$af010b					BM1_START_ADDY_H    = $AF010B
=$af010c					BM1_X_OFFSET        = $AF010C   ; Not Implemented
=$af010d					BM1_Y_OFFSET        = $AF010D   ; Not Implemented
=$af010e					BM1_RESERVED_6      = $AF010E
=$af010f					BM1_RESERVED_7      = $AF010F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_TILEMAP_def.asm

=$01						TILE_Enable             = $01
=$40						TILE_Collision_On       = $40           ; Enable
=$af0200					TL0_CONTROL_REG         = $AF0200       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0201					TL0_START_ADDY_L        = $AF0201       ; Not USed right now - Starting Address to where is the MAP
=$af0202					TL0_START_ADDY_M        = $AF0202
=$af0203					TL0_START_ADDY_H        = $AF0203
=$af0204					TL0_TOTAL_X_SIZE_L      = $AF0204       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0205					TL0_TOTAL_X_SIZE_H      = $AF0205
=$af0206					TL0_TOTAL_Y_SIZE_L      = $AF0206       ; Size of the Map in Y Tile Count [9:0]
=$af0207					TL0_TOTAL_Y_SIZE_H      = $AF0207
=$af0208					TL0_WINDOW_X_POS_L      = $AF0208       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0209					TL0_WINDOW_X_POS_H      = $AF0209       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af020a					TL0_WINDOW_Y_POS_L      = $AF020A       ; Top Left Corner Position of the TileMAp Window in Y
=$af020b					TL0_WINDOW_Y_POS_H      = $AF020B       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af020c					TL1_CONTROL_REG         = $AF020C       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af020d					TL1_START_ADDY_L        = $AF020D       ; Not USed right now - Starting Address to where is the MAP
=$af020e					TL1_START_ADDY_M        = $AF020E
=$af020f					TL1_START_ADDY_H        = $AF020F
=$af0210					TL1_TOTAL_X_SIZE_L      = $AF0210       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0211					TL1_TOTAL_X_SIZE_H      = $AF0211
=$af0212					TL1_TOTAL_Y_SIZE_L      = $AF0212       ; Size of the Map in Y Tile Count [9:0]
=$af0213					TL1_TOTAL_Y_SIZE_H      = $AF0213
=$af0214					TL1_WINDOW_X_POS_L      = $AF0214       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0215					TL1_WINDOW_X_POS_H      = $AF0215       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0216					TL1_WINDOW_Y_POS_L      = $AF0216       ; Top Left Corner Position of the TileMAp Window in Y
=$af0217					TL1_WINDOW_Y_POS_H      = $AF0217       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0218					TL2_CONTROL_REG         = $AF0218       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0219					TL2_START_ADDY_L        = $AF0219       ; Not USed right now - Starting Address to where is the MAP
=$af021a					TL2_START_ADDY_M        = $AF021A
=$af021b					TL2_START_ADDY_H        = $AF021B
=$af021c					TL2_TOTAL_X_SIZE_L      = $AF021C       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af021d					TL2_TOTAL_X_SIZE_H      = $AF021D
=$af021e					TL2_TOTAL_Y_SIZE_L      = $AF021E       ; Size of the Map in Y Tile Count [9:0]
=$af021f					TL2_TOTAL_Y_SIZE_H      = $AF021F
=$af0220					TL2_WINDOW_X_POS_L      = $AF0220       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0221					TL2_WINDOW_X_POS_H      = $AF0221       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0222					TL2_WINDOW_Y_POS_L      = $AF0222       ; Top Left Corner Position of the TileMAp Window in Y
=$af0223					TL2_WINDOW_Y_POS_H      = $AF0223       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0224					TL3_CONTROL_REG         = $AF0224       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0225					TL3_START_ADDY_L        = $AF0225       ; Not USed right now - Starting Address to where is the MAP
=$af0226					TL3_START_ADDY_M        = $AF0226
=$af0227					TL3_START_ADDY_H        = $AF0227
=$af0228					TL3_TOTAL_X_SIZE_L      = $AF0228       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0229					TL3_TOTAL_X_SIZE_H      = $AF0229
=$af022a					TL3_TOTAL_Y_SIZE_L      = $AF022A       ; Size of the Map in Y Tile Count [9:0]
=$af022b					TL3_TOTAL_Y_SIZE_H      = $AF022B
=$af022c					TL3_WINDOW_X_POS_L      = $AF022C       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af022d					TL3_WINDOW_X_POS_H      = $AF022D       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af022e					TL3_WINDOW_Y_POS_L      = $AF022E       ; Top Left Corner Position of the TileMAp Window in Y
=$af022f					TL3_WINDOW_Y_POS_H      = $AF022F       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0280					TILESET0_ADDY_L         = $AF0280   ; Pointer to Tileset 0 [21:0]
=$af0281					TILESET0_ADDY_M         = $AF0281
=$af0282					TILESET0_ADDY_H         = $AF0282
=$af0283					TILESET0_ADDY_CFG       = $AF0283   ; [3] - TileStride256x256
=$af0284					TILESET1_ADDY_L         = $AF0284
=$af0285					TILESET1_ADDY_M         = $AF0285
=$af0286					TILESET1_ADDY_H         = $AF0286
=$af0287					TILESET1_ADDY_CFG       = $AF0287
=$af0288					TILESET2_ADDY_L         = $AF0288
=$af0289					TILESET2_ADDY_M         = $AF0289
=$af028a					TILESET2_ADDY_H         = $AF028A
=$af028b					TILESET2_ADDY_CFG       = $AF028B
=$af028c					TILESET3_ADDY_L         = $AF028C
=$af028d					TILESET3_ADDY_M         = $AF028D
=$af028e					TILESET3_ADDY_H         = $AF028E
=$af028f					TILESET3_ADDY_CFG       = $AF028F
=$af0290					TILESET4_ADDY_L         = $AF0290
=$af0291					TILESET4_ADDY_M         = $AF0291
=$af0292					TILESET4_ADDY_H         = $AF0292
=$af0293					TILESET4_ADDY_CFG       = $AF0293
=$af0294					TILESET5_ADDY_L         = $AF0294
=$af0295					TILESET5_ADDY_M         = $AF0295
=$af0296					TILESET5_ADDY_H         = $AF0296
=$af0297					TILESET5_ADDY_CFG       = $AF0297
=$af0298					TILESET6_ADDY_L         = $AF0298
=$af0299					TILESET6_ADDY_M         = $AF0299
=$af029a					TILESET6_ADDY_H         = $AF029A
=$af029b					TILESET6_ADDY_CFG       = $AF029B
=$af029c					TILESET7_ADDY_L         = $AF029C
=$af029d					TILESET7_ADDY_M         = $AF029D
=$af029e					TILESET7_ADDY_H         = $AF029E
=$af029f					TILESET7_ADDY_CFG       = $AF029F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_SPRITE_def.asm

=$01						SPRITE_Enable             = $01
=$00						SPRITE_LUT0               = $00 ; This is the LUT that the Sprite will use
=$02						SPRITE_LUT1               = $02
=$04						SPRITE_LUT2               = $04
=$06						SPRITE_LUT3               = $06
=$08						SPRITE_LUT4               = $08
=$0a						SPRITE_LUT5               = $0A
=$0c						SPRITE_LUT6               = $0C
=$0e						SPRITE_LUT7               = $0E
=$00						SPRITE_DEPTH0             = $00
=$10						SPRITE_DEPTH1             = $10
=$20						SPRITE_DEPTH2             = $20
=$30						SPRITE_DEPTH3             = $30
=$40						SPRITE_DEPTH4             = $40
=$50						SPRITE_DEPTH5             = $50
=$60						SPRITE_DEPTH6             = $60
=$80						SPRITE_Collision_On       = $80 ; Enable the Collision Detection
=$af0c00					SP00_CONTROL_REG        = $AF0C00
=$af0c01					SP00_ADDY_PTR_L         = $AF0C01
=$af0c02					SP00_ADDY_PTR_M         = $AF0C02
=$af0c03					SP00_ADDY_PTR_H         = $AF0C03
=$af0c04					SP00_X_POS_L            = $AF0C04
=$af0c05					SP00_X_POS_H            = $AF0C05
=$af0c06					SP00_Y_POS_L            = $AF0C06
=$af0c07					SP00_Y_POS_H            = $AF0C07
=$af0c08					SP01_CONTROL_REG        = $AF0C08
=$af0c09					SP01_ADDY_PTR_L         = $AF0C09
=$af0c0a					SP01_ADDY_PTR_M         = $AF0C0A
=$af0c0b					SP01_ADDY_PTR_H         = $AF0C0B
=$af0c0c					SP01_X_POS_L            = $AF0C0C
=$af0c0d					SP01_X_POS_H            = $AF0C0D
=$af0c0e					SP01_Y_POS_L            = $AF0C0E
=$af0c0f					SP01_Y_POS_H            = $AF0C0F
=$af0c10					SP02_CONTROL_REG        = $AF0C10
=$af0c11					SP02_ADDY_PTR_L         = $AF0C11
=$af0c12					SP02_ADDY_PTR_M         = $AF0C12
=$af0c13					SP02_ADDY_PTR_H         = $AF0C13
=$af0c14					SP02_X_POS_L            = $AF0C14
=$af0c15					SP02_X_POS_H            = $AF0C15
=$af0c16					SP02_Y_POS_L            = $AF0C16
=$af0c17					SP02_Y_POS_H            = $AF0C17
=$af0c18					SP03_CONTROL_REG        = $AF0C18
=$af0c19					SP03_ADDY_PTR_L         = $AF0C19
=$af0c1a					SP03_ADDY_PTR_M         = $AF0C1A
=$af0c1b					SP03_ADDY_PTR_H         = $AF0C1B
=$af0c1c					SP03_X_POS_L            = $AF0C1C
=$af0c1d					SP03_X_POS_H            = $AF0C1D
=$af0c1e					SP03_Y_POS_L            = $AF0C1E
=$af0c1f					SP03_Y_POS_H            = $AF0C1F
=$af0c20					SP04_CONTROL_REG        = $AF0C20
=$af0c21					SP04_ADDY_PTR_L         = $AF0C21
=$af0c22					SP04_ADDY_PTR_M         = $AF0C22
=$af0c23					SP04_ADDY_PTR_H         = $AF0C23
=$af0c24					SP04_X_POS_L            = $AF0C24
=$af0c25					SP04_X_POS_H            = $AF0C25
=$af0c26					SP04_Y_POS_L            = $AF0C26
=$af0c27					SP04_Y_POS_H            = $AF0C27
=$af0c28					SP05_CONTROL_REG        = $AF0C28
=$af0c29					SP05_ADDY_PTR_L         = $AF0C29
=$af0c2a					SP05_ADDY_PTR_M         = $AF0C2A
=$af0c2b					SP05_ADDY_PTR_H         = $AF0C2B
=$af0c2c					SP05_X_POS_L            = $AF0C2C
=$af0c2d					SP05_X_POS_H            = $AF0C2D
=$af0c2e					SP05_Y_POS_L            = $AF0C2E
=$af0c2f					SP05_Y_POS_H            = $AF0C2F
=$af0c30					SP06_CONTROL_REG        = $AF0C30
=$af0c31					SP06_ADDY_PTR_L         = $AF0C31
=$af0c32					SP06_ADDY_PTR_M         = $AF0C32
=$af0c33					SP06_ADDY_PTR_H         = $AF0C33
=$af0c34					SP06_X_POS_L            = $AF0C34
=$af0c35					SP06_X_POS_H            = $AF0C35
=$af0c36					SP06_Y_POS_L            = $AF0C36
=$af0c37					SP06_Y_POS_H            = $AF0C37
=$af0c38					SP07_CONTROL_REG        = $AF0C38
=$af0c39					SP07_ADDY_PTR_L         = $AF0C39
=$af0c3a					SP07_ADDY_PTR_M         = $AF0C3A
=$af0c3b					SP07_ADDY_PTR_H         = $AF0C3B
=$af0c3c					SP07_X_POS_L            = $AF0C3C
=$af0c3d					SP07_X_POS_H            = $AF0C3D
=$af0c3e					SP07_Y_POS_L            = $AF0C3E
=$af0c3f					SP07_Y_POS_H            = $AF0C3F
=$af0c40					SP08_CONTROL_REG        = $AF0C40
=$af0c41					SP08_ADDY_PTR_L         = $AF0C41
=$af0c42					SP08_ADDY_PTR_M         = $AF0C42
=$af0c43					SP08_ADDY_PTR_H         = $AF0C43
=$af0c44					SP08_X_POS_L            = $AF0C44
=$af0c45					SP08_X_POS_H            = $AF0C45
=$af0c46					SP08_Y_POS_L            = $AF0C46
=$af0c47					SP08_Y_POS_H            = $AF0C47
=$af0c48					SP09_CONTROL_REG        = $AF0C48
=$af0c49					SP09_ADDY_PTR_L         = $AF0C49
=$af0c4a					SP09_ADDY_PTR_M         = $AF0C4A
=$af0c4b					SP09_ADDY_PTR_H         = $AF0C4B
=$af0c4c					SP09_X_POS_L            = $AF0C4C
=$af0c4d					SP09_X_POS_H            = $AF0C4D
=$af0c4e					SP09_Y_POS_L            = $AF0C4E
=$af0c4f					SP09_Y_POS_H            = $AF0C4F
=$af0c50					SP10_CONTROL_REG        = $AF0C50
=$af0c51					SP10_ADDY_PTR_L         = $AF0C51
=$af0c52					SP10_ADDY_PTR_M         = $AF0C52
=$af0c53					SP10_ADDY_PTR_H         = $AF0C53
=$af0c54					SP10_X_POS_L            = $AF0C54
=$af0c55					SP10_X_POS_H            = $AF0C55
=$af0c56					SP10_Y_POS_L            = $AF0C56
=$af0c57					SP10_Y_POS_H            = $AF0C57
=$af0c58					SP11_CONTROL_REG        = $AF0C58
=$af0c59					SP11_ADDY_PTR_L         = $AF0C59
=$af0c5a					SP11_ADDY_PTR_M         = $AF0C5A
=$af0c5b					SP11_ADDY_PTR_H         = $AF0C5B
=$af0c5c					SP11_X_POS_L            = $AF0C5C
=$af0c5d					SP11_X_POS_H            = $AF0C5D
=$af0c5e					SP11_Y_POS_L            = $AF0C5E
=$af0c5f					SP11_Y_POS_H            = $AF0C5F
=$af0c60					SP12_CONTROL_REG        = $AF0C60
=$af0c61					SP12_ADDY_PTR_L         = $AF0C61
=$af0c62					SP12_ADDY_PTR_M         = $AF0C62
=$af0c63					SP12_ADDY_PTR_H         = $AF0C63
=$af0c64					SP12_X_POS_L            = $AF0C64
=$af0c65					SP12_X_POS_H            = $AF0C65
=$af0c66					SP12_Y_POS_L            = $AF0C66
=$af0c67					SP12_Y_POS_H            = $AF0C67
=$af0c68					SP13_CONTROL_REG        = $AF0C68
=$af0c69					SP13_ADDY_PTR_L         = $AF0C69
=$af0c6a					SP13_ADDY_PTR_M         = $AF0C6A
=$af0c6b					SP13_ADDY_PTR_H         = $AF0C6B
=$af0c6c					SP13_X_POS_L            = $AF0C6C
=$af0c6d					SP13_X_POS_H            = $AF0C6D
=$af0c6e					SP13_Y_POS_L            = $AF0C6E
=$af0c6f					SP13_Y_POS_H            = $AF0C6F
=$af0c70					SP14_CONTROL_REG        = $AF0C70
=$af0c71					SP14_ADDY_PTR_L         = $AF0C71
=$af0c72					SP14_ADDY_PTR_M         = $AF0C72
=$af0c73					SP14_ADDY_PTR_H         = $AF0C73
=$af0c74					SP14_X_POS_L            = $AF0C74
=$af0c75					SP14_X_POS_H            = $AF0C75
=$af0c76					SP14_Y_POS_L            = $AF0C76
=$af0c77					SP14_Y_POS_H            = $AF0C77
=$af0c78					SP15_CONTROL_REG        = $AF0C78
=$af0c79					SP15_ADDY_PTR_L         = $AF0C79
=$af0c7a					SP15_ADDY_PTR_M         = $AF0C7A
=$af0c7b					SP15_ADDY_PTR_H         = $AF0C7B
=$af0c7c					SP15_X_POS_L            = $AF0C7C
=$af0c7d					SP15_X_POS_H            = $AF0C7D
=$af0c7e					SP15_Y_POS_L            = $AF0C7E
=$af0c7f					SP15_Y_POS_H            = $AF0C7F
=$af0c80					SP16_CONTROL_REG        = $AF0C80
=$af0c81					SP16_ADDY_PTR_L         = $AF0C81
=$af0c82					SP16_ADDY_PTR_M         = $AF0C82
=$af0c83					SP16_ADDY_PTR_H         = $AF0C83
=$af0c84					SP16_X_POS_L            = $AF0C84
=$af0c85					SP16_X_POS_H            = $AF0C85
=$af0c86					SP16_Y_POS_L            = $AF0C86
=$af0c87					SP16_Y_POS_H            = $AF0C87
=$af0c88					SP17_CONTROL_REG        = $AF0C88
=$af0c89					SP17_ADDY_PTR_L         = $AF0C89
=$af0c8a					SP17_ADDY_PTR_M         = $AF0C8A
=$af0c8b					SP17_ADDY_PTR_H         = $AF0C8B
=$af0c8c					SP17_X_POS_L            = $AF0C8C
=$af0c8d					SP17_X_POS_H            = $AF0C8D
=$af0c8e					SP17_Y_POS_L            = $AF0C8E
=$af0c8f					SP17_Y_POS_H            = $AF0C8F
=$af0c90					SP18_CONTROL_REG        = $AF0C90
=$af0c91					SP18_ADDY_PTR_L         = $AF0C91
=$af0c92					SP18_ADDY_PTR_M         = $AF0C92
=$af0c93					SP18_ADDY_PTR_H         = $AF0C93
=$af0c94					SP18_X_POS_L            = $AF0C94
=$af0c95					SP18_X_POS_H            = $AF0C95
=$af0c96					SP18_Y_POS_L            = $AF0C96
=$af0c97					SP18_Y_POS_H            = $AF0C97
=$af0c98					SP19_CONTROL_REG        = $AF0C98
=$af0c99					SP19_ADDY_PTR_L         = $AF0C99
=$af0c9a					SP19_ADDY_PTR_M         = $AF0C9A
=$af0c9b					SP19_ADDY_PTR_H         = $AF0C9B
=$af0c9c					SP19_X_POS_L            = $AF0C9C
=$af0c9d					SP19_X_POS_H            = $AF0C9D
=$af0c9e					SP19_Y_POS_L            = $AF0C9E
=$af0c9f					SP19_Y_POS_H            = $AF0C9F
=$af0ca0					SP20_CONTROL_REG        = $AF0CA0
=$af0ca1					SP20_ADDY_PTR_L         = $AF0CA1
=$af0ca2					SP20_ADDY_PTR_M         = $AF0CA2
=$af0ca3					SP20_ADDY_PTR_H         = $AF0CA3
=$af0ca4					SP20_X_POS_L            = $AF0CA4
=$af0ca5					SP20_X_POS_H            = $AF0CA5
=$af0ca6					SP20_Y_POS_L            = $AF0CA6
=$af0ca7					SP20_Y_POS_H            = $AF0CA7
=$af0ca8					SP21_CONTROL_REG        = $AF0CA8
=$af0ca9					SP21_ADDY_PTR_L         = $AF0CA9
=$af0caa					SP21_ADDY_PTR_M         = $AF0CAA
=$af0cab					SP21_ADDY_PTR_H         = $AF0CAB
=$af0cac					SP21_X_POS_L            = $AF0CAC
=$af0cad					SP21_X_POS_H            = $AF0CAD
=$af0cae					SP21_Y_POS_L            = $AF0CAE
=$af0caf					SP21_Y_POS_H            = $AF0CAF
=$af0cb0					SP22_CONTROL_REG        = $AF0CB0
=$af0cb1					SP22_ADDY_PTR_L         = $AF0CB1
=$af0cb2					SP22_ADDY_PTR_M         = $AF0CB2
=$af0cb3					SP22_ADDY_PTR_H         = $AF0CB3
=$af0cb4					SP22_X_POS_L            = $AF0CB4
=$af0cb5					SP22_X_POS_H            = $AF0CB5
=$af0cb6					SP22_Y_POS_L            = $AF0CB6
=$af0cb7					SP22_Y_POS_H            = $AF0CB7
=$af0cb8					SP23_CONTROL_REG        = $AF0CB8
=$af0cb9					SP23_ADDY_PTR_L         = $AF0CB9
=$af0cba					SP23_ADDY_PTR_M         = $AF0CBA
=$af0cbb					SP23_ADDY_PTR_H         = $AF0CBB
=$af0cbc					SP23_X_POS_L            = $AF0CBC
=$af0cbd					SP23_X_POS_H            = $AF0CBD
=$af0cbe					SP23_Y_POS_L            = $AF0CBE
=$af0cbf					SP23_Y_POS_H            = $AF0CBF
=$af0cc0					SP24_CONTROL_REG        = $AF0CC0
=$af0cc1					SP24_ADDY_PTR_L         = $AF0CC1
=$af0cc2					SP24_ADDY_PTR_M         = $AF0CC2
=$af0cc3					SP24_ADDY_PTR_H         = $AF0CC3
=$af0cc4					SP24_X_POS_L            = $AF0CC4
=$af0cc5					SP24_X_POS_H            = $AF0CC5
=$af0cc6					SP24_Y_POS_L            = $AF0CC6
=$af0cc7					SP24_Y_POS_H            = $AF0CC7
=$af0cc8					SP25_CONTROL_REG        = $AF0CC8
=$af0cc9					SP25_ADDY_PTR_L         = $AF0CC9
=$af0cca					SP25_ADDY_PTR_M         = $AF0CCA
=$af0ccb					SP25_ADDY_PTR_H         = $AF0CCB
=$af0ccc					SP25_X_POS_L            = $AF0CCC
=$af0ccd					SP25_X_POS_H            = $AF0CCD
=$af0cce					SP25_Y_POS_L            = $AF0CCE
=$af0ccf					SP25_Y_POS_H            = $AF0CCF
=$af0cd0					SP26_CONTROL_REG        = $AF0CD0
=$af0cd1					SP26_ADDY_PTR_L         = $AF0CD1
=$af0cd2					SP26_ADDY_PTR_M         = $AF0CD2
=$af0cd3					SP26_ADDY_PTR_H         = $AF0CD3
=$af0cd4					SP26_X_POS_L            = $AF0CD4
=$af0cd5					SP26_X_POS_H            = $AF0CD5
=$af0cd6					SP26_Y_POS_L            = $AF0CD6
=$af0cd7					SP26_Y_POS_H            = $AF0CD7
=$af0cd8					SP27_CONTROL_REG        = $AF0CD8
=$af0cd9					SP27_ADDY_PTR_L         = $AF0CD9
=$af0cda					SP27_ADDY_PTR_M         = $AF0CDA
=$af0cdb					SP27_ADDY_PTR_H         = $AF0CDB
=$af0cdc					SP27_X_POS_L            = $AF0CDC
=$af0cdd					SP27_X_POS_H            = $AF0CDD
=$af0cde					SP27_Y_POS_L            = $AF0CDE
=$af0cdf					SP27_Y_POS_H            = $AF0CDF
=$af0ce0					SP28_CONTROL_REG        = $AF0CE0
=$af0ce1					SP28_ADDY_PTR_L         = $AF0CE1
=$af0ce2					SP28_ADDY_PTR_M         = $AF0CE2
=$af0ce3					SP28_ADDY_PTR_H         = $AF0CE3
=$af0ce4					SP28_X_POS_L            = $AF0CE4
=$af0ce5					SP28_X_POS_H            = $AF0CE5
=$af0ce6					SP28_Y_POS_L            = $AF0CE6
=$af0ce7					SP28_Y_POS_H            = $AF0CE7
=$af0ce8					SP29_CONTROL_REG        = $AF0CE8
=$af0ce9					SP29_ADDY_PTR_L         = $AF0CE9
=$af0cea					SP29_ADDY_PTR_M         = $AF0CEA
=$af0ceb					SP29_ADDY_PTR_H         = $AF0CEB
=$af0cec					SP29_X_POS_L            = $AF0CEC
=$af0ced					SP29_X_POS_H            = $AF0CED
=$af0cee					SP29_Y_POS_L            = $AF0CEE
=$af0cef					SP29_Y_POS_H            = $AF0CEF
=$af0cf0					SP30_CONTROL_REG        = $AF0CF0
=$af0cf1					SP30_ADDY_PTR_L         = $AF0CF1
=$af0cf2					SP30_ADDY_PTR_M         = $AF0CF2
=$af0cf3					SP30_ADDY_PTR_H         = $AF0CF3
=$af0cf4					SP30_X_POS_L            = $AF0CF4
=$af0cf5					SP30_X_POS_H            = $AF0CF5
=$af0cf6					SP30_Y_POS_L            = $AF0CF6
=$af0cf7					SP30_Y_POS_H            = $AF0CF7
=$af0cf8					SP31_CONTROL_REG        = $AF0CF8
=$af0cf9					SP31_ADDY_PTR_L         = $AF0CF9
=$af0cfa					SP31_ADDY_PTR_M         = $AF0CFA
=$af0cfb					SP31_ADDY_PTR_H         = $AF0CFB
=$af0cfc					SP31_X_POS_L            = $AF0CFC
=$af0cfd					SP31_X_POS_H            = $AF0CFD
=$af0cfe					SP31_Y_POS_L            = $AF0CFE
=$af0cff					SP31_Y_POS_H            = $AF0CFF
=$af0d00					SP32_CONTROL_REG        = $AF0D00
=$af0d01					SP32_ADDY_PTR_L         = $AF0D01
=$af0d02					SP32_ADDY_PTR_M         = $AF0D02
=$af0d03					SP32_ADDY_PTR_H         = $AF0D03
=$af0d04					SP32_X_POS_L            = $AF0D04
=$af0d05					SP32_X_POS_H            = $AF0D05
=$af0d06					SP32_Y_POS_L            = $AF0D06
=$af0d07					SP32_Y_POS_H            = $AF0D07
=$af0d08					SP33_CONTROL_REG        = $AF0D08
=$af0d09					SP33_ADDY_PTR_L         = $AF0D09
=$af0d0a					SP33_ADDY_PTR_M         = $AF0D0A
=$af0d0b					SP33_ADDY_PTR_H         = $AF0D0B
=$af0d0c					SP33_X_POS_L            = $AF0D0C
=$af0d0d					SP33_X_POS_H            = $AF0D0D
=$af0d0e					SP33_Y_POS_L            = $AF0D0E
=$af0d0f					SP33_Y_POS_H            = $AF0D0F
=$af0d10					SP34_CONTROL_REG        = $AF0D10
=$af0d11					SP34_ADDY_PTR_L         = $AF0D11
=$af0d12					SP34_ADDY_PTR_M         = $AF0D12
=$af0d13					SP34_ADDY_PTR_H         = $AF0D13
=$af0d14					SP34_X_POS_L            = $AF0D14
=$af0d15					SP34_X_POS_H            = $AF0D15
=$af0d16					SP34_Y_POS_L            = $AF0D16
=$af0d17					SP34_Y_POS_H            = $AF0D17
=$af0d18					SP35_CONTROL_REG        = $AF0D18
=$af0d19					SP35_ADDY_PTR_L         = $AF0D19
=$af0d1a					SP35_ADDY_PTR_M         = $AF0D1A
=$af0d1b					SP35_ADDY_PTR_H         = $AF0D1B
=$af0d1c					SP35_X_POS_L            = $AF0D1C
=$af0d1d					SP35_X_POS_H            = $AF0D1D
=$af0d1e					SP35_Y_POS_L            = $AF0D1E
=$af0d1f					SP35_Y_POS_H            = $AF0D1F
=$af0d20					SP36_CONTROL_REG        = $AF0D20
=$af0d21					SP36_ADDY_PTR_L         = $AF0D21
=$af0d22					SP36_ADDY_PTR_M         = $AF0D22
=$af0d23					SP36_ADDY_PTR_H         = $AF0D23
=$af0d24					SP36_X_POS_L            = $AF0D24
=$af0d25					SP36_X_POS_H            = $AF0D25
=$af0d26					SP36_Y_POS_L            = $AF0D26
=$af0d27					SP36_Y_POS_H            = $AF0D27
=$af0d28					SP37_CONTROL_REG        = $AF0D28
=$af0d29					SP37_ADDY_PTR_L         = $AF0D29
=$af0d2a					SP37_ADDY_PTR_M         = $AF0D2A
=$af0d2b					SP37_ADDY_PTR_H         = $AF0D2B
=$af0d2c					SP37_X_POS_L            = $AF0D2C
=$af0d2d					SP37_X_POS_H            = $AF0D2D
=$af0d2e					SP37_Y_POS_L            = $AF0D2E
=$af0d2f					SP37_Y_POS_H            = $AF0D2F
=$af0d30					SP38_CONTROL_REG        = $AF0D30
=$af0d31					SP38_ADDY_PTR_L         = $AF0D31
=$af0d32					SP38_ADDY_PTR_M         = $AF0D32
=$af0d33					SP38_ADDY_PTR_H         = $AF0D33
=$af0d34					SP38_X_POS_L            = $AF0D34
=$af0d35					SP38_X_POS_H            = $AF0D35
=$af0d36					SP38_Y_POS_L            = $AF0D36
=$af0d37					SP38_Y_POS_H            = $AF0D37
=$af0d38					SP39_CONTROL_REG        = $AF0D38
=$af0d39					SP39_ADDY_PTR_L         = $AF0D39
=$af0d3a					SP39_ADDY_PTR_M         = $AF0D3A
=$af0d3b					SP39_ADDY_PTR_H         = $AF0D3B
=$af0d3c					SP39_X_POS_L            = $AF0D3C
=$af0d3d					SP39_X_POS_H            = $AF0D3D
=$af0d3e					SP39_Y_POS_L            = $AF0D3E
=$af0d3f					SP39_Y_POS_H            = $AF0D3F
=$af0d40					SP40_CONTROL_REG        = $AF0D40
=$af0d41					SP40_ADDY_PTR_L         = $AF0D41
=$af0d42					SP40_ADDY_PTR_M         = $AF0D42
=$af0d43					SP40_ADDY_PTR_H         = $AF0D43
=$af0d44					SP40_X_POS_L            = $AF0D44
=$af0d45					SP40_X_POS_H            = $AF0D45
=$af0d46					SP40_Y_POS_L            = $AF0D46
=$af0d47					SP40_Y_POS_H            = $AF0D47
=$af0d48					SP41_CONTROL_REG        = $AF0D48
=$af0d49					SP41_ADDY_PTR_L         = $AF0D49
=$af0d4a					SP41_ADDY_PTR_M         = $AF0D4A
=$af0d4b					SP41_ADDY_PTR_H         = $AF0D4B
=$af0d4c					SP41_X_POS_L            = $AF0D4C
=$af0d4d					SP41_X_POS_H            = $AF0D4D
=$af0d4e					SP41_Y_POS_L            = $AF0D4E
=$af0d4f					SP41_Y_POS_H            = $AF0D4F
=$af0d50					SP42_CONTROL_REG        = $AF0D50
=$af0d51					SP42_ADDY_PTR_L         = $AF0D51
=$af0d52					SP42_ADDY_PTR_M         = $AF0D52
=$af0d53					SP42_ADDY_PTR_H         = $AF0D53
=$af0d54					SP42_X_POS_L            = $AF0D54
=$af0d55					SP42_X_POS_H            = $AF0D55
=$af0d56					SP42_Y_POS_L            = $AF0D56
=$af0d57					SP42_Y_POS_H            = $AF0D57
=$af0d58					SP43_CONTROL_REG        = $AF0D58
=$af0d59					SP43_ADDY_PTR_L         = $AF0D59
=$af0d5a					SP43_ADDY_PTR_M         = $AF0D5A
=$af0d5b					SP43_ADDY_PTR_H         = $AF0D5B
=$af0d5c					SP43_X_POS_L            = $AF0D5C
=$af0d5d					SP43_X_POS_H            = $AF0D5D
=$af0d5e					SP43_Y_POS_L            = $AF0D5E
=$af0d5f					SP43_Y_POS_H            = $AF0D5F
=$af0d60					SP44_CONTROL_REG        = $AF0D60
=$af0d61					SP44_ADDY_PTR_L         = $AF0D61
=$af0d62					SP44_ADDY_PTR_M         = $AF0D62
=$af0d63					SP44_ADDY_PTR_H         = $AF0D63
=$af0d64					SP44_X_POS_L            = $AF0D64
=$af0d65					SP44_X_POS_H            = $AF0D65
=$af0d66					SP44_Y_POS_L            = $AF0D66
=$af0d67					SP44_Y_POS_H            = $AF0D67
=$af0d68					SP45_CONTROL_REG        = $AF0D68
=$af0d69					SP45_ADDY_PTR_L         = $AF0D69
=$af0d6a					SP45_ADDY_PTR_M         = $AF0D6A
=$af0d6b					SP45_ADDY_PTR_H         = $AF0D6B
=$af0d6c					SP45_X_POS_L            = $AF0D6C
=$af0d6d					SP45_X_POS_H            = $AF0D6D
=$af0d6e					SP45_Y_POS_L            = $AF0D6E
=$af0d6f					SP45_Y_POS_H            = $AF0D6F
=$af0d70					SP46_CONTROL_REG        = $AF0D70
=$af0d71					SP46_ADDY_PTR_L         = $AF0D71
=$af0d72					SP46_ADDY_PTR_M         = $AF0D72
=$af0d73					SP46_ADDY_PTR_H         = $AF0D73
=$af0d74					SP46_X_POS_L            = $AF0D74
=$af0d75					SP46_X_POS_H            = $AF0D75
=$af0d76					SP46_Y_POS_L            = $AF0D76
=$af0d77					SP46_Y_POS_H            = $AF0D77
=$af0d78					SP47_CONTROL_REG        = $AF0D78
=$af0d79					SP47_ADDY_PTR_L         = $AF0D79
=$af0d7a					SP47_ADDY_PTR_M         = $AF0D7A
=$af0d7b					SP47_ADDY_PTR_H         = $AF0D7B
=$af0d7c					SP47_X_POS_L            = $AF0D7C
=$af0d7d					SP47_X_POS_H            = $AF0D7D
=$af0d7e					SP47_Y_POS_L            = $AF0D7E
=$af0d7f					SP47_Y_POS_H            = $AF0D7F
=$af0d80					SP48_CONTROL_REG        = $AF0D80
=$af0d81					SP48_ADDY_PTR_L         = $AF0D81
=$af0d82					SP48_ADDY_PTR_M         = $AF0D82
=$af0d83					SP48_ADDY_PTR_H         = $AF0D83
=$af0d84					SP48_X_POS_L            = $AF0D84
=$af0d85					SP48_X_POS_H            = $AF0D85
=$af0d86					SP48_Y_POS_L            = $AF0D86
=$af0d87					SP48_Y_POS_H            = $AF0D87
=$af0d88					SP49_CONTROL_REG        = $AF0D88
=$af0d89					SP49_ADDY_PTR_L         = $AF0D89
=$af0d8a					SP49_ADDY_PTR_M         = $AF0D8A
=$af0d8b					SP49_ADDY_PTR_H         = $AF0D8B
=$af0d8c					SP49_X_POS_L            = $AF0D8C
=$af0d8d					SP49_X_POS_H            = $AF0D8D
=$af0d8e					SP49_Y_POS_L            = $AF0D8E
=$af0d8f					SP49_Y_POS_H            = $AF0D8F
=$af0d90					SP50_CONTROL_REG        = $AF0D90
=$af0d91					SP50_ADDY_PTR_L         = $AF0D91
=$af0d92					SP50_ADDY_PTR_M         = $AF0D92
=$af0d93					SP50_ADDY_PTR_H         = $AF0D93
=$af0d94					SP50_X_POS_L            = $AF0D94
=$af0d95					SP50_X_POS_H            = $AF0D95
=$af0d96					SP50_Y_POS_L            = $AF0D96
=$af0d97					SP50_Y_POS_H            = $AF0D97
=$af0d98					SP51_CONTROL_REG        = $AF0D98
=$af0d99					SP51_ADDY_PTR_L         = $AF0D99
=$af0d9a					SP51_ADDY_PTR_M         = $AF0D9A
=$af0d9b					SP51_ADDY_PTR_H         = $AF0D9B
=$af0d9c					SP51_X_POS_L            = $AF0D9C
=$af0d9d					SP51_X_POS_H            = $AF0D9D
=$af0d9e					SP51_Y_POS_L            = $AF0D9E
=$af0d9f					SP51_Y_POS_H            = $AF0D9F
=$af0da0					SP52_CONTROL_REG        = $AF0DA0
=$af0da1					SP52_ADDY_PTR_L         = $AF0DA1
=$af0da2					SP52_ADDY_PTR_M         = $AF0DA2
=$af0da3					SP52_ADDY_PTR_H         = $AF0DA3
=$af0da4					SP52_X_POS_L            = $AF0DA4
=$af0da5					SP52_X_POS_H            = $AF0DA5
=$af0da6					SP52_Y_POS_L            = $AF0DA6
=$af0da7					SP52_Y_POS_H            = $AF0DA7
=$af0da8					SP53_CONTROL_REG        = $AF0DA8
=$af0da9					SP53_ADDY_PTR_L         = $AF0DA9
=$af0daa					SP53_ADDY_PTR_M         = $AF0DAA
=$af0dab					SP53_ADDY_PTR_H         = $AF0DAB
=$af0dac					SP53_X_POS_L            = $AF0DAC
=$af0dad					SP53_X_POS_H            = $AF0DAD
=$af0dae					SP53_Y_POS_L            = $AF0DAE
=$af0daf					SP53_Y_POS_H            = $AF0DAF
=$af0db0					SP54_CONTROL_REG        = $AF0DB0
=$af0db1					SP54_ADDY_PTR_L         = $AF0DB1
=$af0db2					SP54_ADDY_PTR_M         = $AF0DB2
=$af0db3					SP54_ADDY_PTR_H         = $AF0DB3
=$af0db4					SP54_X_POS_L            = $AF0DB4
=$af0db5					SP54_X_POS_H            = $AF0DB5
=$af0db6					SP54_Y_POS_L            = $AF0DB6
=$af0db7					SP54_Y_POS_H            = $AF0DB7
=$af0db8					SP55_CONTROL_REG        = $AF0DB8
=$af0db9					SP55_ADDY_PTR_L         = $AF0DB9
=$af0dba					SP55_ADDY_PTR_M         = $AF0DBA
=$af0dbb					SP55_ADDY_PTR_H         = $AF0DBB
=$af0dbc					SP55_X_POS_L            = $AF0DBC
=$af0dbd					SP55_X_POS_H            = $AF0DBD
=$af0dbe					SP55_Y_POS_L            = $AF0DBE
=$af0dbf					SP55_Y_POS_H            = $AF0DBF
=$af0dc0					SP56_CONTROL_REG        = $AF0DC0
=$af0dc1					SP56_ADDY_PTR_L         = $AF0DC1
=$af0dc2					SP56_ADDY_PTR_M         = $AF0DC2
=$af0dc3					SP56_ADDY_PTR_H         = $AF0DC3
=$af0dc4					SP56_X_POS_L            = $AF0DC4
=$af0dc5					SP56_X_POS_H            = $AF0DC5
=$af0dc6					SP56_Y_POS_L            = $AF0DC6
=$af0dc7					SP56_Y_POS_H            = $AF0DC7
=$af0dc8					SP57_CONTROL_REG        = $AF0DC8
=$af0dc9					SP57_ADDY_PTR_L         = $AF0DC9
=$af0dca					SP57_ADDY_PTR_M         = $AF0DCA
=$af0dcb					SP57_ADDY_PTR_H         = $AF0DCB
=$af0dcc					SP57_X_POS_L            = $AF0DCC
=$af0dcd					SP57_X_POS_H            = $AF0DCD
=$af0dce					SP57_Y_POS_L            = $AF0DCE
=$af0dcf					SP57_Y_POS_H            = $AF0DCF
=$af0dd0					SP58_CONTROL_REG        = $AF0DD0
=$af0dd1					SP58_ADDY_PTR_L         = $AF0DD1
=$af0dd2					SP58_ADDY_PTR_M         = $AF0DD2
=$af0dd3					SP58_ADDY_PTR_H         = $AF0DD3
=$af0dd4					SP58_X_POS_L            = $AF0DD4
=$af0dd5					SP58_X_POS_H            = $AF0DD5
=$af0dd6					SP58_Y_POS_L            = $AF0DD6
=$af0dd7					SP58_Y_POS_H            = $AF0DD7
=$af0dd8					SP59_CONTROL_REG        = $AF0DD8
=$af0dd9					SP59_ADDY_PTR_L         = $AF0DD9
=$af0dda					SP59_ADDY_PTR_M         = $AF0DDA
=$af0ddb					SP59_ADDY_PTR_H         = $AF0DDB
=$af0ddc					SP59_X_POS_L            = $AF0DDC
=$af0ddd					SP59_X_POS_H            = $AF0DDD
=$af0dde					SP59_Y_POS_L            = $AF0DDE
=$af0ddf					SP59_Y_POS_H            = $AF0DDF
=$af0de0					SP60_CONTROL_REG        = $AF0DE0
=$af0de1					SP60_ADDY_PTR_L         = $AF0DE1
=$af0de2					SP60_ADDY_PTR_M         = $AF0DE2
=$af0de3					SP60_ADDY_PTR_H         = $AF0DE3
=$af0de4					SP60_X_POS_L            = $AF0DE4
=$af0de5					SP60_X_POS_H            = $AF0DE5
=$af0de6					SP60_Y_POS_L            = $AF0DE6
=$af0de7					SP60_Y_POS_H            = $AF0DE7
=$af0de8					SP61_CONTROL_REG        = $AF0DE8
=$af0de9					SP61_ADDY_PTR_L         = $AF0DE9
=$af0dea					SP61_ADDY_PTR_M         = $AF0DEA
=$af0deb					SP61_ADDY_PTR_H         = $AF0DEB
=$af0dec					SP61_X_POS_L            = $AF0DEC
=$af0ded					SP61_X_POS_H            = $AF0DED
=$af0dee					SP61_Y_POS_L            = $AF0DEE
=$af0def					SP61_Y_POS_H            = $AF0DEF
=$af0df0					SP62_CONTROL_REG        = $AF0DF0
=$af0df1					SP62_ADDY_PTR_L         = $AF0DF1
=$af0df2					SP62_ADDY_PTR_M         = $AF0DF2
=$af0df3					SP62_ADDY_PTR_H         = $AF0DF3
=$af0df4					SP62_X_POS_L            = $AF0DF4
=$af0df5					SP62_X_POS_H            = $AF0DF5
=$af0df6					SP62_Y_POS_L            = $AF0DF6
=$af0df7					SP62_Y_POS_H            = $AF0DF7
=$af0df8					SP63_CONTROL_REG        = $AF0DF8
=$af0df9					SP63_ADDY_PTR_L         = $AF0DF9
=$af0dfa					SP63_ADDY_PTR_M         = $AF0DFA
=$af0dfb					SP63_ADDY_PTR_H         = $AF0DFB
=$af0dfc					SP63_X_POS_L            = $AF0DFC
=$af0dfd					SP63_X_POS_H            = $AF0DFD
=$af0dfe					SP63_Y_POS_L            = $AF0DFE
=$af0dff					SP63_Y_POS_H            = $AF0DFF

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_COLLISION_def.asm

=$0001						COL_STAT_SP0 = $0001
=$0002						COL_STAT_SP1 = $0002
=$0004						COL_STAT_SP2 = $0004
=$0008						COL_STAT_SP3 = $0008
=$0010						COL_STAT_SP4 = $0010
=$0020						COL_STAT_SP5 = $0020
=$0040						COL_STAT_SP6 = $0040
=$0080						COL_STAT_BM0 = $0080
=$0100						COL_STAT_BM1 = $0100
=$0200						COL_STAT_COL = $0200
=$0400						COL_STAT_TL0 = $0400
=$0800						COL_STAT_TL1 = $0800
=$1000						COL_STAT_TL2 = $1000
=$2000						COL_STAT_TL3 = $2000
=$4000						COL_RESERVE0 = $4000    ; Reserved
=$8000						COL_RESERVE1 = $8000    ; Reserved
=$af0300					COLLISION_SPRITE_L0_L   = $AF0300
=$af0301					COLLISION_SPRITE_L0_H   = $AF0301
=$af0302					COLLISION_SPRITE_L1_L   = $AF0302
=$af0303					COLLISION_SPRITE_L1_H   = $AF0303
=$af0304					COLLISION_SPRITE_L2_L   = $AF0304
=$af0305					COLLISION_SPRITE_L2_H   = $AF0305
=$af0306					COLLISION_SPRITE_L3_L   = $AF0306
=$af0307					COLLISION_SPRITE_L3_H   = $AF0307
=$af0308					COLLISION_SPRITE_L4_L   = $AF0308
=$af0309					COLLISION_SPRITE_L4_H   = $AF0309
=$af030a					COLLISION_SPRITE_L5_L   = $AF030A
=$af030b					COLLISION_SPRITE_L5_H   = $AF030B
=$af030c					COLLISION_SPRITE_L6_L   = $AF030C
=$af030d					COLLISION_SPRITE_L6_H   = $AF030D
=$af030e					COLLISION_BITMAP_L0_L   = $AF030E
=$af030f					COLLISION_BITMAP_L0_H   = $AF030F
=$af0310					COLLISION_BITMAP_L1_L   = $AF0310
=$af0311					COLLISION_BITMAP_L1_H   = $AF0311
=$af0312					COLLISION_COLMAP_L0_L   = $AF0312 ; Collision Bitmap - Not Implemented yet
=$af0313					COLLISION_COLMAP_L0_H   = $AF0313
=$af0314					COLLISION_TILEMAP_L0_L  = $AF0314
=$af0315					COLLISION_TILEMAP_L0_H  = $AF0315
=$af0316					COLLISION_TILEMAP_L1_L  = $AF0316
=$af0317					COLLISION_TILEMAP_L1_H  = $AF0317
=$af0318					COLLISION_TILEMAP_L2_L  = $AF0318
=$af0319					COLLISION_TILEMAP_L2_H  = $AF0319
=$af031a					COLLISION_TILEMAP_L3_L  = $AF031A
=$af031b					COLLISION_TILEMAP_L3_H  = $AF031B
=$af031c					COLLISION_PXL_VALUE_SP  = $AF031C
=$af031d					COLLISION_SPRITE_NUMBER = $AF031D
=$af031e					COLLISION_PXL_VALUE_BM0 = $AF031E
=$af031f					COLLISION_PXL_VALUE_BM1 = $AF031F
=$af0320					COLLISION_PXL_VALUE_COL = $AF0320
=$af0321					COLLISION_PXL_VALUE_TL0 = $AF0321
=$af0322					COLLISION_PXL_VALUE_TL1 = $AF0322
=$af0323					COLLISION_PXL_VALUE_TL2 = $AF0323
=$af0324					COLLISION_PXL_VALUE_TL3 = $AF0324
=$af0326					COLLISION_SPRITE_COORD_X_LO = $AF0326
=$af0327					COLLISION_SPRITE_COORD_X_HI = $AF0327
=$af0328					COLLISION_BITMAP_COORD_X_LO = $AF0328
=$af0329					COLLISION_BITMAP_COORD_X_HI = $AF0329
=$af032a					COLLISION_TILES_COORD_X_LO  = $AF032A
=$af032b					COLLISION_TILES_COORD_X_HI  = $AF032B
=$af032c					COLLISION_COORD_Y_LO        = $AF032C
=$af032d					COLLISION_COORD_Y_HI        = $AF032D

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/EXP_C100_ESID_def.asm

=$ae0000					ESID_EXP_CARD_INFO      = $AE0000    ; Read Only (32 Bytes Card ID - READ ONLY)
=$ae0000					ESID_ID_NAME_ASCII      = $AE0000    ; 15 Characters + $00
=$ae0010					ESID_ID_VENDOR_ID_Lo    = $AE0010    ; Foenix Project Reserved ID: $F0E1
=$ae0011					ESID_ID_VENDOR_ID_Hi    = $AE0011
=$ae0012					ESID_ID_CARD_ID_Lo      = $AE0012    ; $9172 - C100-ESID
=$ae0013					ESID_ID_CARD_ID_Hi      = $AE0013
=$ae0014					ESID_ID_CARD_CLASS_Lo   = $AE0014    ; TBD
=$ae0015					ESID_ID_CARD_CLASS_Hi   = $AE0015    ; TBD
=$ae0016					ESID_ID_CARD_SUBCLSS_Lo = $AE0016    ; TBD
=$ae0017					ESID_ID_CARD_SUBCLSS_Hi = $AE0017    ; TBD
=$ae0018					ESID_ID_CARD_UNDEFINED0 = $AE0018    ; TBD
=$ae0019					ESID_ID_CARD_UNDEFINED1 = $AE0019    ; TBD
=$ae001a					ESID_ID_CARD_HW_Rev     = $AE001A    ; 00 - in Hex
=$ae001b					ESID_ID_CARD_FPGA_Rev   = $AE001B    ; 00 - in Hex
=$ae001c					ESID_ID_CARD_UNDEFINED2 = $AE001C    ; TBD
=$ae001d					ESID_ID_CARD_UNDEFINED3 = $AE001D    ; TBD
=$ae001e					ESID_ID_CARD_CHKSUM0    = $AE001E    ; Not Supported Yet
=$ae001f					ESID_ID_CARD_CHKSUM1    = $AE001F    ; Not Supported Yet
=$aed000					ESID_SIDL_V1_FREQ_LO    = $AED000 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$aed001					ESID_SIDL_V1_FREQ_HI    = $AED001 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$aed002					ESID_SIDL_V1_PW_LO      = $AED002 ;SID - L - Voice 1 (Write Only) - PW LOW
=$aed003					ESID_SIDL_V1_PW_HI      = $AED003 ;SID - L - Voice 1 (Write Only) - PW HI
=$aed004					ESID_SIDL_V1_CTRL       = $AED004 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$aed005					ESID_SIDL_V1_ATCK_DECY  = $AED005 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$aed006					ESID_SIDL_V1_SSTN_RLSE  = $AED006 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$aed007					ESID_SIDL_V2_FREQ_LO    = $AED007 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$aed008					ESID_SIDL_V2_FREQ_HI    = $AED008 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$aed009					ESID_SIDL_V2_PW_LO      = $AED009 ;SID - L - Voice 2 (Write Only) - PW LOW
=$aed00a					ESID_SIDL_V2_PW_HI      = $AED00A ;SID - L - Voice 2 (Write Only) - PW HI
=$aed00b					ESID_SIDL_V2_CTRL       = $AED00B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$aed00c					ESID_SIDL_V2_ATCK_DECY  = $AED00C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$aed00d					ESID_SIDL_V2_SSTN_RLSE  = $AED00D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$aed00e					ESID_SIDL_V3_FREQ_LO    = $AED00E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$aed00f					ESID_SIDL_V3_FREQ_HI    = $AED00F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$aed010					ESID_SIDL_V3_PW_LO      = $AED010 ;SID - L - Voice 3 (Write Only) - PW LOW
=$aed011					ESID_SIDL_V3_PW_HI      = $AED011 ;SID - L - Voice 3 (Write Only) - PW HI
=$aed012					ESID_SIDL_V3_CTRL       = $AED012 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$aed013					ESID_SIDL_V3_ATCK_DECY  = $AED013 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$aed014					ESID_SIDL_V3_SSTN_RLSE  = $AED014 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$aed015					ESID_SIDL_FC_LO         = $AED015 ;SID - L - Filter (Write Only) - FC LOW
=$aed016					ESID_SIDL_FC_HI         = $AED016 ;SID - L - Filter (Write Only) - FC HI
=$aed017					ESID_SIDL_RES_FILT      = $AED017 ;SID - L - Filter (Write Only) - RES / FILT
=$aed018					ESID_SIDL_MODE_VOL      = $AED018 ;SID - L - Filter (Write Only) - MODE / VOL
=$aed019					ESID_SIDL_POT_X         = $AED019 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$aed01a					ESID_SIDL_POT_Y         = $AED01A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$aed01b					ESID_SIDL_OSC3_RND      = $AED01B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$aed01c					ESID_SIDL_ENV3          = $AED01C ;SID - L - Misc (Read Only)  - ENV3
=$aed01d					ESID_SIDL_NOT_USED0     = $AED01D ;SID - L - NOT USED
=$aed01e					ESID_SIDL_NOT_USED1     = $AED01E ;SID - L - NOT USED
=$aed01f					ESID_SIDL_NOT_USED2     = $AED01F ;SID - L - NOT USED
=$aed100					ESID_SIDR_V1_FREQ_LO    = $AED100 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$aed101					ESID_SIDR_V1_FREQ_HI    = $AED101 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$aed102					ESID_SIDR_V1_PW_LO      = $AED102 ;SID - L - Voice 1 (Write Only) - PW LOW
=$aed103					ESID_SIDR_V1_PW_HI      = $AED103 ;SID - L - Voice 1 (Write Only) - PW HI
=$aed104					ESID_SIDR_V1_CTRL       = $AED104 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$aed105					ESID_SIDR_V1_ATCK_DECY  = $AED105 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$aed106					ESID_SIDR_V1_SSTN_RLSE  = $AED106 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$aed107					ESID_SIDR_V2_FREQ_LO    = $AED107 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$aed108					ESID_SIDR_V2_FREQ_HI    = $AED108 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$aed109					ESID_SIDR_V2_PW_LO      = $AED109 ;SID - L - Voice 2 (Write Only) - PW LOW
=$aed10a					ESID_SIDR_V2_PW_HI      = $AED10A ;SID - L - Voice 2 (Write Only) - PW HI
=$aed10b					ESID_SIDR_V2_CTRL       = $AED10B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$aed10c					ESID_SIDR_V2_ATCK_DECY  = $AED10C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$aed10d					ESID_SIDR_V2_SSTN_RLSE  = $AED10D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$aed10e					ESID_SIDR_V3_FREQ_LO    = $AED10E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$aed10f					ESID_SIDR_V3_FREQ_HI    = $AED10F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$aed110					ESID_SIDR_V3_PW_LO      = $AED110 ;SID - L - Voice 3 (Write Only) - PW LOW
=$aed111					ESID_SIDR_V3_PW_HI      = $AED111 ;SID - L - Voice 3 (Write Only) - PW HI
=$aed112					ESID_SIDR_V3_CTRL       = $AED112 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$aed113					ESID_SIDR_V3_ATCK_DECY  = $AED113 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$aed114					ESID_SIDR_V3_SSTN_RLSE  = $AED114 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$aed115					ESID_SIDR_FC_LO         = $AED115 ;SID - L - Filter (Write Only) - FC LOW
=$aed116					ESID_SIDR_FC_HI         = $AED116 ;SID - L - Filter (Write Only) - FC HI
=$aed117					ESID_SIDR_RES_FILT      = $AED117 ;SID - L - Filter (Write Only) - RES / FILT
=$aed118					ESID_SIDR_MODE_VOL      = $AED118 ;SID - L - Filter (Write Only) - MODE / VOL
=$aed119					ESID_SIDR_POT_X         = $AED119 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$aed11a					ESID_SIDR_POT_Y         = $AED11A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$aed11b					ESID_SIDR_OSC3_RND      = $AED11B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$aed11c					ESID_SIDR_ENV3          = $AED11C ;SID - L - Misc (Read Only)  - ENV3
=$aed11d					ESID_SIDR_NOT_USED0     = $AED11D ;SID - L - NOT USED
=$aed11e					ESID_SIDR_NOT_USED1     = $AED11E ;SID - L - NOT USED
=$aed11f					ESID_SIDR_NOT_USED2     = $AED11F ;SID - L - NOT USED
=$aee000					ESID_ETHERNET_REG       = $AEE000

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/EXP_C200_EVID_def.asm

=$ae0000					EVID_EXP_CARD_INFO      = $AE0000    ; Read Only (32 Bytes Card ID - READ ONLY)
=$ae0000					EVID_ID_NAME_ASCII      = $AE0000    ; 15 Characters + $00
=$ae0010					EVID_ID_VENDOR_ID_Lo    = $AE0010    ; Foenix Project Reserved ID: $F0E1
=$ae0011					EVID_ID_VENDOR_ID_Hi    = $AE0011
=$ae0012					EVID_ID_CARD_ID_Lo      = $AE0012      ; $9236 - C200-EVID
=$ae0013					EVID_ID_CARD_ID_Hi      = $AE0013
=$ae0014					EVID_ID_CARD_CLASS_Lo   = $AE0014    ; TBD
=$ae0015					EVID_ID_CARD_CLASS_Hi   = $AE0015    ; TBD
=$ae0016					EVID_ID_CARD_SUBCLSS_Lo = $AE0016    ; TBD
=$ae0017					EVID_ID_CARD_SUBCLSS_Hi = $AE0017    ; TBD
=$ae0018					EVID_ID_CARD_UNDEFINED0 = $AE0018    ; TBD
=$ae0019					EVID_ID_CARD_UNDEFINED1 = $AE0019    ; TBD
=$ae001a					EVID_ID_CARD_HW_Rev     = $AE001A    ; 00 - in Hex
=$ae001b					EVID_ID_CARD_FPGA_Rev   = $AE001B    ; 00 - in Hex
=$ae001c					EVID_ID_CARD_UNDEFINED2 = $AE001C    ; TBD
=$ae001d					EVID_ID_CARD_UNDEFINED3 = $AE001D    ; TBD
=$ae001e					EVID_ID_CARD_CHKSUM0    = $AE001E    ; Not Supported Yet
=$ae001f					EVID_ID_CARD_CHKSUM1    = $AE001F    ; Not Supported Yet
=$ae1000					EVID_FONT_MEM      = $AE1000
=$ae1b00					EVID_FG_LUT        = $AE1B00
=$ae1b40					EVID_BG_LUT        = $AE1B40
=$ae1e00					EVID_MSTR_CTRL_REG_L	= $AE1E00
=$01						EVID_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$ae1e01					EVID_MSTR_CTRL_REG_H    = $AE1E01
=$01						EVID_800x600ModeEnable   = $01       ; 0 - 640x480 (Clock @ 25.175Mhz), 1 - 800x600 (Clock @ 40Mhz)
=$01						EVID_Border_Ctrl_Enable = $01
=$ae1e04					EVID_BORDER_CTRL_REG    = $AE1E04 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$ae1e05					EVID_BORDER_COLOR_B     = $AE1E05
=$ae1e06					EVID_BORDER_COLOR_G     = $AE1E06
=$ae1e07					EVID_BORDER_COLOR_R     = $AE1E07
=$ae1e08					EVID_BORDER_X_SIZE      = $AE1E08; X-  Values: 0 - 32 (Default: 32)
=$ae1e09					EVID_BORDER_Y_SIZE      = $AE1E09; Y- Values 0 -32 (Default: 32)
=$ae1e10					EVID_TXT_CURSOR_CTRL_REG = $AE1E10   ;[0]  Enable Text Mode
=$01						EVID_Cursor_Enable       = $01
=$02						EVID_Cursor_Flash_Rate0  = $02       ; 00 - 1/Sec, 01 - 2/Sec, 10 - 4/Sec, 11 - 5/Sec
=$04						EVID_Cursor_Flash_Rate1  = $04
=$08						EVID_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10						EVID_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$ae1e12					EVID_TXT_CURSOR_CHAR_REG = $AE1E12
=$ae1e13					EVID_TXT_CURSOR_COLR_REG = $AE1E13
=$ae1e14					EVID_TXT_CURSOR_X_REG_L  = $AE1E14
=$ae1e15					EVID_TXT_CURSOR_X_REG_H  = $AE1E15
=$ae1e16					EVID_TXT_CURSOR_Y_REG_L  = $AE1E16
=$ae1e17					EVID_TXT_CURSOR_Y_REG_H  = $AE1E17
=$ae1e1c					EVID_INFO_CHIP_NUM_L     = $AE1E1C
=$ae1e1d					EVID_INFO_CHIP_NUM_H     = $AE1E1D
=$ae1e1e					EVID_INFO_CHIP_VER_L     = $AE1E1E
=$ae1e1f					EVID_INFO_CHIP_VER_H     = $AE1E1F
=$ae2000					EVID_TEXT_MEM            = $AE2000
=$ae4000					EVID_COLOR_MEM           = $AE4000
=$aee000					EVID_ETHERNET_REG        = $AEE000

;******  Return to file: src\kernel.asm

.390400						IBOOT
.390400		18		clc		                CLC               ; clear the carry flag
.390401		fb		xce		                XCE               ; move carry to emulation flag.
.390402		78		sei		                SEI               ; Disable interrupts
.390403		c2 30		rep #$30	                REP #$30        ; set A&X long
.390405		a9 ff fe	lda #$feff	                LDA #STACK_END    ; initialize stack pointer
.390408		1b		tcs		                TAS
.390409		a2 00 10	ldx #$1000	                LDX #<>BOOT       ; Copy the kernel jump table to bank 0
.39040c		a0 00 10	ldy #$1000	                LDY #<>BOOT       ; Ordinarily, this is done by GAVIN, but
.39040f		a9 00 20	lda #$2000	                LDA #$2000        ; this is ensures it can be reloaded in case of errors
.390412		54 00 38	mvn $38,$00	                MVN $38,$00       ; Or during soft loading of the kernel from the debug port
.390415		48		pha		                PHA             ; begin setdp macro
.390416		08		php		                PHP
.390417		c2 20		rep #$20	                REP #$20        ; set A long
.390419		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39041c		5b		tcd		                TCD
.39041d		28		plp		                PLP
.39041e		68		pla		                PLA             ; end setdp macro
.39041f		e2 20		sep #$20	                SEP #$20        ; set A short
.390421		a2 00 00	ldx #$0000	                LDX #$0000
.390424		a9 00		lda #$00	                LDA #$00
.390426						CLEAR_MEM_LOOP
.390426		95 00		sta $00,x	                STA $0000, X
.390428		e8		inx		                INX
.390429		e0 00 01	cpx #$0100	                CPX #$0100
.39042c		d0 f8		bne $390426	                BNE CLEAR_MEM_LOOP
.39042e		ea		nop		                NOP
.39042f		a9 ff		lda #$ff	                LDA #$FF
.390431		8f 48 01 00	sta $000148	                STA @lINT_EDGE_REG0
.390435		8f 49 01 00	sta $000149	                STA @lINT_EDGE_REG1
.390439		8f 4a 01 00	sta $00014a	                STA @lINT_EDGE_REG2
.39043d		8f 4b 01 00	sta $00014b	                STA @lINT_EDGE_REG3
.390441		8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.390445		8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.390449		8f 4e 01 00	sta $00014e	                STA @lINT_MASK_REG2
.39044d		8f 4f 01 00	sta $00014f	                STA @lINT_MASK_REG3
.390451		22 4d 0f 39	jsl $390f4d	                JSL INITRTC               ; Initialize the RTC
.390455		20 92 71	jsr $397192	                JSR ANSI_INIT             ; Initialize the ANSI screen driver
.390458		e2 20		sep #$20	                SEP #$20        ; set A short
.39045a		af 87 e8 af	lda $afe887	                LDA @L GABE_SYS_STAT      ; Let's check the Presence of an Expansion Card here
.39045e		29 10		and #$10	                AND #GABE_SYS_STAT_EXP    ; When there is a Card the Value is 1
.390460		c9 10		cmp #$10	                CMP #GABE_SYS_STAT_EXP
.390462		d0 1e		bne $390482	                BNE SkipInitExpC100C200
.390464		c2 20		rep #$20	                REP #$20        ; set A long
.390466		af 12 00 ae	lda $ae0012	                LDA @L ESID_ID_CARD_ID_Lo    ; Load the Card ID and check for C100 or C200
.39046a		c9 64 00	cmp #$0064	                CMP #$0064
.39046d		f0 0f		beq $39047e	                BEQ InitC100ESID
.39046f		c9 c8 00	cmp #$00c8	                CMP #$00C8
.390472		d0 0e		bne $390482	                BNE SkipInitExpC100C200
.390474		22 26 6c 39	jsl $396c26	                JSL SIMPLE_INIT_ETHERNET_CTRL
.390478		22 31 70 39	jsl $397031	                JSL INIT_EVID_VID_MODE
.39047c		80 04		bra $390482	                BRA SkipInitExpC100C200
.39047e						InitC100ESID:
.39047e		22 26 6c 39	jsl $396c26	                JSL SIMPLE_INIT_ETHERNET_CTRL
.390482						SkipInitExpC100C200:
.390482		c2 30		rep #$30	                REP #$30        ; set A&X long
.390484		a9 00 00	lda #$0000	                LDA #$00
.390487		8d 87 0f	sta $0f87	                STA KEYBOARD_SC_FLG       ; Clear the Keyboard Flag
.39048a		a9 9f 00	lda #$009f	                LDA #$9F                  ; Channel Two - No Atteniation
.39048d		8f 00 f1 af	sta $aff100	                STA $AFF100
.390491		a9 bf 00	lda #$00bf	                LDA #$BF                  ; Channel Two - No Atteniation
.390494		8f 00 f1 af	sta $aff100	                STA $AFF100
.390498		a9 df 00	lda #$00df	                LDA #$DF                  ; Channel Two - No Atteniation
.39049b		8f 00 f1 af	sta $aff100	                STA $AFF100
.39049f		a9 ff 00	lda #$00ff	                LDA #$FF                  ; Channel Two - No Atteniation
.3904a2		8f 00 f1 af	sta $aff100	                STA $AFF100
.3904a6		a9 70 00	lda #$0070	                LDA #$70                  ; Set the default text color to dim white on black
.3904a9		85 1e		sta $1e		                STA CURCOLOR
.3904ab		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.3904af		29 01 00	and #$0001	                AND #$01
.3904b2		c9 01 00	cmp #$0001	                CMP #$01
.3904b5		d0 16		bne $3904cd	                BNE Alreadyin640480Mode
.3904b7		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.3904bb		29 fc 00	and #$00fc	                AND #$FC
.3904be		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.3904c2		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.3904c6		09 01 00	ora #$0001	                ORA #$01
.3904c9		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.3904cd						Alreadyin640480Mode
.3904cd		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.3904d1		29 fc 00	and #$00fc	                AND #$FC
.3904d4		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H ; Set it to 640x480 for real
.3904d8		22 dc 10 00	jsl $0010dc	                JSL INITCODEC
.3904dc		22 c4 10 00	jsl $0010c4	                JSL INITGAMMATABLE
.3904e0		22 c8 10 00	jsl $0010c8	                JSL INITALLLUT
.3904e4		22 ac 10 00	jsl $0010ac	                JSL INITCHLUT
.3904e8		22 b9 0c 39	jsl $390cb9	                JSL INITMOUSEPOINTER
.3904ec		22 bc 10 00	jsl $0010bc	                JSL INITCURSOR
.3904f0		a9 00 00	lda #$0000	                LDA #0
.3904f3		22 38 10 00	jsl $001038	                JSL SETIN
.3904f7		22 3c 10 00	jsl $00103c	                JSL SETOUT
.3904fb		c2 20		rep #$20	                REP #$20        ; set A long
.3904fd		48		pha		                PHA             ; begin setdp macro
.3904fe		08		php		                PHP
.3904ff		c2 20		rep #$20	                REP #$20        ; set A long
.390501		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390504		5b		tcd		                TCD
.390505		28		plp		                PLP
.390506		68		pla		                PLA             ; end setdp macro
.390507		22 b4 10 00	jsl $0010b4	                JSL INITKEYBOARD
.39050b		22 b8 10 00	jsl $0010b8	                JSL INITMOUSE
.39050f		e2 20		sep #$20	                SEP #$20        ; set A short
.390511		c2 10		rep #$10	                REP #$10        ; set X long
.390513		a9 9f		lda #$9f	                LDA #$9F              ; Channel Two - No Atteniation
.390515		8f 00 f1 af	sta $aff100	                STA $AFF100
.390519		a9 bf		lda #$bf	                LDA #$BF              ; Channel Two - No Atteniation
.39051b		8f 00 f1 af	sta $aff100	                STA $AFF100
.39051f		a9 df		lda #$df	                LDA #$DF              ; Channel Two - No Atteniation
.390521		8f 00 f1 af	sta $aff100	                STA $AFF100
.390525		a9 ff		lda #$ff	                LDA #$FF              ; Channel Two - No Atteniation
.390527		8f 00 f1 af	sta $aff100	                STA $AFF100
.39052b		a9 83		lda #$83	                LDA #$83              ; Channel Zero - No Atteniation
.39052d		8f 00 f1 af	sta $aff100	                STA $AFF100
.390531		a9 12		lda #$12	                LDA #$12              ; Channel Zero - No Atteniation
.390533		8f 00 f1 af	sta $aff100	                STA $AFF100
.390537		a9 90		lda #$90	                LDA #$90              ; Channel One - No Atteniation
.390539		8f 00 f1 af	sta $aff100	                STA $AFF100
.39053d		a2 00 40	ldx #$4000	                LDX #16384            ; 400ms
.390540		22 62 12 39	jsl $391262	                JSL ILOOP_MS
.390544		a9 9f		lda #$9f	                LDA #$9F              ; Channel Two - No Atteniation
.390546		8f 00 f1 af	sta $aff100	                STA $AFF100
.39054a		58		cli		                CLI                   ; Make sure no Interrupt will come and fuck up Init before this point.
.39054b		e2 20		sep #$20	                SEP #$20        ; set A short
.39054d		c2 10		rep #$10	                REP #$10        ; set X long
.39054f		48		pha		                PHA             ; begin setdbr macro
.390550		08		php		                PHP
.390551		e2 20		sep #$20	                SEP #$20        ; set A short
.390553		a9 39		lda #$39	                LDA #`greet_msg
.390555		48		pha		                PHA
.390556		ab		plb		                PLB
.390557		28		plp		                PLP
.390558		68		pla		                PLA             ; end setdbr macro
.390559		a2 00 00	ldx #$0000	                LDX #0
.39055c		bf 00 10 00	lda $001000,x	jmpcopy         LDA @l BOOT,X
.390560		9f 00 10 00	sta $001000,x	                STA @l $001000,X
.390564		e8		inx		                INX
.390565		e0 00 10	cpx #$1000	                CPX #$1000
.390568		d0 f2		bne $39055c	                BNE jmpcopy
.39056a						retry_boot
.39056a		22 cb 40 39	jsl $3940cb	                JSL DOS_INIT            ; Initialize the "disc operating system"
.39056e		22 00 00 3e	jsl $3e0000	                JSL BOOT_MENU           ; Show the splash screen / boot menu and wait for key presses
.390572		22 a8 10 00	jsl $0010a8	                JSL CLRSCREEN           ; Clear Screen and Set a standard color in Color Memory
.390576		c2 30		rep #$30	                REP #$30        ; set A&X long
.390578		22 a0 10 00	jsl $0010a0	                JSL CSRHOME             ; Move to the home position
.39057c						greet
.39057c		48		pha		                PHA             ; begin setdbr macro
.39057d		08		php		                PHP
.39057e		e2 20		sep #$20	                SEP #$20        ; set A short
.390580		a9 39		lda #$39	                LDA #`greet_msg
.390582		48		pha		                PHA
.390583		ab		plb		                PLB
.390584		28		plp		                PLP
.390585		68		pla		                PLA             ; end setdbr macro
.390586		a2 c1 78	ldx #$78c1	                LDX #<>greet_msg
.390589		22 3c 07 39	jsl $39073c	                JSL IPRINT              ; print the first line
.39058d		22 c4 09 39	jsl $3909c4	                JSL ICOLORFLAG          ; This is to set the color memory for the text logo
.390591		c2 30		rep #$30	                REP #$30        ; set A&X long
.390593		a9 ff fe	lda #$feff	                LDA #STACK_END          ; We are the root, let's make sure from now on, that we start clean
.390596		1b		tcs		                TAS
.390597		e2 20		sep #$20	                SEP #$20        ; set A short
.390599		c2 10		rep #$10	                REP #$10        ; set X long
.39059b		af 08 00 00	lda $000008	                LDA @l KRNL_BOOT_MENU_K ; Get the Value of the Keyboard Boot Choice
.39059f		c9 20		cmp #$20	                CMP #CHAR_SP          ; Did the user press SPACE?
.3905a1		f0 10		beq $3905b3	                BEQ BOOT_DIP          ; Yes: boot via the DIP switches
.3905a3		c9 0d		cmp #$0d	                CMP #CHAR_CR          ; Did the user press RETURN?
.3905a5		f0 1e		beq $3905c5	                BEQ BOOTBASIC         ; Yes: go straight to BASIC
.3905a7		c9 81		cmp #$81	                CMP #CHAR_F1          ; Did the user press F1?
.3905a9		f0 62		beq $39060d	                BEQ BOOTFLOPPY        ; Yes: boot via the floppy
.3905ab		c9 82		cmp #$82	                CMP #CHAR_F2          ; Did the user press F2?
.3905ad		f0 1d		beq $3905cc	                BEQ BOOTSDC           ; Yes: boot via the SDC
.3905af		c9 83		cmp #$83	                CMP #CHAR_F3          ; Did the user press F3?
.3905b1		f0 39		beq $3905ec	                BEQ BOOTIDE           ; Yes: boot via the IDE
.3905b3		af 0e e8 af	lda $afe80e	BOOT_DIP        LDA @lDIP_BOOTMODE    ; {HD_INSTALLED, 5'b0_0000, BOOT_MODE[1], BOOT_MODE[0]}
.3905b7		29 03		and #$03	                AND #%00000011        ; Look at the mode bits
.3905b9		c9 00		cmp #$00	                CMP #DIP_BOOT_IDE     ; DIP set for IDE?
.3905bb		f0 2f		beq $3905ec	                BEQ BOOTIDE           ; Yes: Boot from the IDE
.3905bd		c9 01		cmp #$01	                CMP #DIP_BOOT_SDCARD  ; DIP set for SD card?
.3905bf		f0 0b		beq $3905cc	                BEQ BOOTSDC           ; Yes: try to boot from the SD card
.3905c1		c9 02		cmp #$02	                CMP #DIP_BOOT_FLOPPY  ; DIP set for floppy?
.3905c3		f0 48		beq $39060d	                BEQ BOOTFLOPPY        ; Yes: try to boot from the floppy
.3905c5						IRESTORE
.3905c5		5c 00 00 3a	jmp $3a0000	BOOTBASIC       JML BASIC             ; Cold start of the BASIC interpreter (or its replacement)
.3905c9		ea		nop		CREDIT_LOCK     NOP
.3905ca		80 fd		bra $3905c9	                BRA CREDIT_LOCK
.3905cc		a2 1d 7d	ldx #$7d1d	BOOTSDC         LDX #<>sdc_boot
.3905cf		22 3c 07 39	jsl $39073c	                JSL IPRINT
.3905d3		e2 20		sep #$20	                SEP #$20        ; set A short
.3905d5		a9 02		lda #$02	                LDA #BIOS_DEV_SD
.3905d7		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3905db		22 9d 41 39	jsl $39419d	                JSL DOS_MOUNT         ; Mount the SDC
.3905df		90 06		bcc $3905e7	                BCC sdc_error         ; Print an error message if couldn't get anything
.3905e1		22 58 43 39	jsl $394358	                JSL DOS_TESTBOOT      ; Try to boot from the SDC's MBR
.3905e5		80 de		bra $3905c5	                BRA BOOTBASIC         ; If we couldn't fall, into BASIC
.3905e7		a2 a1 7c	ldx #$7ca1	sdc_error       LDX #<>sdc_err_boot   ; Print a message saying SD card booting is not implemented
.3905ea		80 40		bra $39062c	                BRA PR_BOOT_ERROR
.3905ec		a2 34 7d	ldx #$7d34	BOOTIDE         LDX #<>ide_boot
.3905ef		22 3c 07 39	jsl $39073c	                JSL IPRINT
.3905f3		e2 20		sep #$20	                SEP #$20        ; set A short
.3905f5		a9 06		lda #$06	                LDA #BIOS_DEV_HD0
.3905f7		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3905fb		22 9d 41 39	jsl $39419d	                JSL DOS_MOUNT         ; Mount the IDE drive
.3905ff		90 07		bcc $390608	                BCC hdc_error         ; Print an error message if couldn't get anything
.390601		22 58 43 39	jsl $394358	                JSL DOS_TESTBOOT      ; Try to boot from the IDE's MBR
.390605		82 bd ff	brl $3905c5	                BRL BOOTBASIC         ; If we couldn't fall, into BASIC
.390608		a2 bd 7c	ldx #$7cbd	hdc_error       LDX #<>ide_err_boot   ; Print a message saying SD card booting is not implemented
.39060b		80 1f		bra $39062c	                BRA PR_BOOT_ERROR
.39060d		a2 06 7d	ldx #$7d06	BOOTFLOPPY      LDX #<>fdc_boot
.390610		22 3c 07 39	jsl $39073c	                JSL IPRINT
.390614		e2 20		sep #$20	                SEP #$20        ; set A short
.390616		a9 00		lda #$00	                LDA #BIOS_DEV_FDC
.390618		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.39061c		22 ad 65 39	jsl $3965ad	                JSL FDC_MOUNT         ; Mount the floppy drive
.390620		90 07		bcc $390629	                BCC fdc_error         ; Print an error message if couldn't get anything
.390622		22 58 43 39	jsl $394358	                JSL DOS_TESTBOOT      ; Try to boot from the FDC's MBR
.390626		82 9c ff	brl $3905c5	                BRL BOOTBASIC         ; If we couldn't, fall into BASIC
.390629		a2 e0 7c	ldx #$7ce0	fdc_error       LDX #<>fdc_err_boot   ; Print a message saying SD card booting is not implemented
.39062c		22 3c 07 39	jsl $39073c	PR_BOOT_ERROR   JSL IPRINT            ; Print the error message in X
.390630		a2 7c 7c	ldx #$7c7c	                LDX #<>boot_retry     ; Print the boot retry prompt
.390633		22 3c 07 39	jsl $39073c	                JSL IPRINT
.390637		22 d6 06 39	jsl $3906d6	boot_wait_key   JSL IGETCHW           ; Wait for a keypress
.39063b		c9 52		cmp #$52	                CMP #'R'              ; Was "R" pressed?
.39063d		d0 03		bne $390642	                BNE chk_r_lc
.39063f		82 28 ff	brl $39056a	                BRL retry_boot        ; Yes: retry the boot sequence
.390642		c9 72		cmp #$72	chk_r_lc        CMP #'r'
.390644		d0 03		bne $390649	                BNE chk_b_lc
.390646		82 21 ff	brl $39056a	                BRL retry_boot
.390649		c9 62		cmp #$62	chk_b_lc        CMP #'b'              ; Was "B" pressed?
.39064b		d0 03		bne $390650	                BNE chk_b_lc_not         ; Yes: try going to BASIC
.39064d		82 75 ff	brl $3905c5	                BRL BOOTBASIC
.390650						chk_b_lc_not:
.390650		c9 42		cmp #$42	                CMP #'B'
.390652		d0 03		bne $390657	                BNE chk_b_lc_not0
.390654		82 6e ff	brl $3905c5	                BRL BOOTBASIC
.390657						chk_b_lc_not0:
.390657		80 de		bra $390637	                BRA boot_wait_key     ; No: keep waiting
.390659						IBREAK
.390659		48		pha		                PHA             ; begin setdp macro
.39065a		08		php		                PHP
.39065b		c2 20		rep #$20	                REP #$20        ; set A long
.39065d		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390660		5b		tcd		                TCD
.390661		28		plp		                PLP
.390662		68		pla		                PLA             ; end setdp macro
.390663		68		pla		                PLA             ; Pull .Y and stuff it in the CPUY variable
.390664		8f 48 02 00	sta $000248	                STA CPUY
.390668		68		pla		                PLA             ; Pull .X and stuff it in the CPUY variable
.390669		8f 46 02 00	sta $000246	                STA CPUX
.39066d		68		pla		                PLA             ; Pull .A and stuff it in the CPUY variable
.39066e		8f 44 02 00	sta $000244	                STA CPUA
.390672		68		pla		                PLA
.390673		8f 4c 02 00	sta $00024c	                STA CPUDP       ; Pull Direct page
.390677		e2 20		sep #$20	                SEP #$20        ; set A short
.390679		68		pla		                PLA             ; Pull Data Bank (8 bits)
.39067a		8f 4e 02 00	sta $00024e	                STA CPUDBR
.39067e		68		pla		                PLA             ; Pull Flags (8 bits)
.39067f		8f 4f 02 00	sta $00024f	                STA CPUFLAGS
.390683		c2 20		rep #$20	                REP #$20        ; set A long
.390685		68		pla		                PLA             ; Pull Program Counter (16 bits)
.390686		8f 40 02 00	sta $000240	                STA CPUPC
.39068a		e2 20		sep #$20	                SEP #$20        ; set A short
.39068c		68		pla		                PLA             ; Pull Program Bank (8 bits)
.39068d		8f 42 02 00	sta $000242	                STA CPUPBR
.390691		c2 20		rep #$20	                REP #$20        ; set A long
.390693		3b		tsc		                TSA             ; Get the stack
.390694		8f 4a 02 00	sta $00024a	                STA CPUSTACK    ; Store the stack at immediately before the interrupt was asserted
.390698		a9 ff fe	lda #$feff	                LDA #<>STACK_END   ; initialize stack pointer back to the bootup value
.39069b		1b		tcs		                TAS
.39069c		5c 04 00 3a	jmp $3a0004	                JML MONITOR
.3906a0						IREADY
.3906a0		48		pha		                PHA             ; begin setdbr macro
.3906a1		08		php		                PHP
.3906a2		e2 20		sep #$20	                SEP #$20        ; set A short
.3906a4		a9 39		lda #$39	                LDA #`ready_msg
.3906a6		48		pha		                PHA
.3906a7		ab		plb		                PLB
.3906a8		28		plp		                PLP
.3906a9		68		pla		                PLA             ; end setdbr macro
.3906aa		e2 20		sep #$20	                SEP #$20        ; set A short
.3906ac		a2 4f 7d	ldx #$7d4f	                LDX #<>ready_msg
.3906af		22 3c 07 39	jsl $39073c	                JSL IPRINT
.3906b3						IREADYWAIT
.3906b3		22 cd 06 39	jsl $3906cd	                JSL IGETCHE
.3906b7		80 fa		bra $3906b3	                BRA IREADYWAIT
.3906b9		db		stp		IKEYDOWN        STP             ; Keyboard key pressed
.3906ba		db		stp		IRETURN         STP
.3906bb		08		php		ISETIN          PHP
.3906bc		e2 20		sep #$20	                SEP #$20        ; set A short
.3906be		8f 04 07 00	sta $000704	                STA @lCHAN_IN   ; Save the channel number
.3906c2		28		plp		                PLP
.3906c3		6b		rtl		                RTL
.3906c4		08		php		ISETOUT         PHP
.3906c5		e2 20		sep #$20	                SEP #$20        ; set A short
.3906c7		8f 03 07 00	sta $000703	                STA @lCHAN_OUT  ; Save the channel number
.3906cb		28		plp		                PLP
.3906cc		6b		rtl		                RTL
.3906cd		22 4c 10 00	jsl $00104c	IGETCHE         JSL GETCHW
.3906d1		22 18 10 00	jsl $001018	                JSL PUTC
.3906d5		6b		rtl		                RTL
.3906d6						IGETCHW
.3906d6		da		phx		                PHX
.3906d7		5a		phy		                PHY
.3906d8		8b		phb		                PHB
.3906d9		0b		phd		                PHD
.3906da		08		php		                PHP
.3906db		e2 20		sep #$20	                SEP #$20        ; set A short
.3906dd		af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.3906e1		f0 1b		beq $3906fe	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.3906e3		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.3906e5		f0 0d		beq $3906f4	                BEQ getc_uart       ; Yes: handle reading from the UART
.3906e7		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.3906e9		f0 09		beq $3906f4	                BEQ getc_uart       ; Yes: handle reading from the UART
.3906eb		a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.3906ed		28		plp		                PLP
.3906ee		38		sec		                SEC                 ; And return carry set
.3906ef		2b		pld		                PLD
.3906f0		ab		plb		                PLB
.3906f1		7a		ply		                PLY
.3906f2		fa		plx		                PLX
.3906f3		6b		rtl		                RTL
.3906f4		22 b1 59 39	jsl $3959b1	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.3906f8		22 65 5a 39	jsl $395a65	                JSL UART_GETC       ; Get the charater from the COM port
.3906fc		80 04		bra $390702	                BRA done
.3906fe		22 7e 1a 38	jsl $381a7e	getc_keyboard   JSL KBD_GETCW       ; Get the character from the keyboard
.390702		28		plp		done            PLP
.390703		18		clc		                CLC                 ; Return carry clear for valid data
.390704		2b		pld		                PLD
.390705		ab		plb		                PLB
.390706		7a		ply		                PLY
.390707		fa		plx		                PLX
.390708		6b		rtl		                RTL
.390709						IGETCH
.390709		da		phx		                PHX
.39070a		5a		phy		                PHY
.39070b		8b		phb		                PHB
.39070c		0b		phd		                PHD
.39070d		08		php		                PHP
.39070e		e2 20		sep #$20	                SEP #$20        ; set A short
.390710		af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.390714		f0 1b		beq $390731	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.390716		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.390718		f0 0d		beq $390727	                BEQ getc_uart       ; Yes: handle reading from the UART
.39071a		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.39071c		f0 09		beq $390727	                BEQ getc_uart       ; Yes: handle reading from the UART
.39071e		a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.390720		28		plp		                PLP
.390721		38		sec		                SEC                 ; And return carry set
.390722		2b		pld		                PLD
.390723		ab		plb		                PLB
.390724		7a		ply		                PLY
.390725		fa		plx		                PLX
.390726		6b		rtl		                RTL
.390727		22 b1 59 39	jsl $3959b1	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.39072b		22 65 5a 39	jsl $395a65	                JSL UART_GETC       ; Get the charater from the COM port
.39072f		80 04		bra $390735	                BRA done
.390731		22 c1 1a 38	jsl $381ac1	getc_keyboard   JSL KBD_GETC        ; Get the character from the keyboard
.390735		28		plp		done            PLP
.390736		18		clc		                CLC                 ; Return carry clear for valid data
.390737		2b		pld		                PLD
.390738		ab		plb		                PLB
.390739		7a		ply		                PLY
.39073a		fa		plx		                PLX
.39073b		6b		rtl		                RTL
.39073c		22 1c 10 00	jsl $00101c	IPRINT          JSL PUTS
.390740		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.390744		6b		rtl		                RTL
.390745		48		pha		IPUTS           PHA
.390746		08		php		                PHP
.390747		e2 20		sep #$20	                SEP #$20        ; set A short
.390749		c2 10		rep #$10	                REP #$10        ; set X long
.39074b		bd 00 00	lda $390000,x	iputs1          LDA $0,b,x      ; read from the string
.39074e		f0 08		beq $390758	                BEQ iputs_done
.390750		22 18 10 00	jsl $001018	iputs2          JSL PUTC
.390754		e8		inx		iputs3          INX
.390755		4c 4b 07	jmp $39074b	                JMP iputs1
.390758		e8		inx		iputs_done      INX
.390759		28		plp		                PLP
.39075a		68		pla		                PLA
.39075b		6b		rtl		                RTL
.39075c						IPUTC
.39075c		da		phx		                PHX
.39075d		5a		phy		                PHY
.39075e		0b		phd		                PHD
.39075f		8b		phb		                PHB
.390760		08		php		                PHP                 ; stash the flags (we'll be changing M)
.390761		48		pha		                PHA             ; begin setdp macro
.390762		08		php		                PHP
.390763		c2 20		rep #$20	                REP #$20        ; set A long
.390765		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390768		5b		tcd		                TCD
.390769		28		plp		                PLP
.39076a		68		pla		                PLA             ; end setdp macro
.39076b		48		pha		                PHA             ; begin setdbr macro
.39076c		08		php		                PHP
.39076d		e2 20		sep #$20	                SEP #$20        ; set A short
.39076f		a9 00		lda #$00	                LDA #0
.390771		48		pha		                PHA
.390772		ab		plb		                PLB
.390773		28		plp		                PLP
.390774		68		pla		                PLA             ; end setdbr macro
.390775		e2 20		sep #$20	                SEP #$20        ; set A short
.390777		c2 10		rep #$10	                REP #$10        ; set X long
.390779		48		pha		                PHA                 ; Save the character to print
.39077a		af 03 07 00	lda $000703	                LDA @lCHAN_OUT      ; Check the output channel #
.39077e		f0 1a		beq $39079a	                BEQ putc_ansi       ; If it's 0: print to the screen
.390780		c9 04		cmp #$04	                CMP #CHAN_EVID      ; Check to see if it's the second video port
.390782		f0 16		beq $39079a	                BEQ putc_ansi       ; Yes: handle printing to the second video port
.390784		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.390786		f0 07		beq $39078f	                BEQ putc_uart       ; Yes: handle printing to the UART
.390788		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.39078a		f0 03		beq $39078f	                BEQ putc_uart       ; Yes: handle printing to the UART
.39078c		68		pla		                PLA                 ; Otherwise, just exit
.39078d		80 0f		bra $39079e	                BRA done
.39078f		22 b1 59 39	jsl $3959b1	putc_uart       JSL UART_SELECT     ; Point to the correct UART
.390793		68		pla		                PLA                 ; Recover the character to send
.390794		22 86 5a 39	jsl $395a86	                JSL UART_PUTC       ; Send the character
.390798		80 04		bra $39079e	                BRA done
.39079a		68		pla		putc_ansi       PLA                 ; Recover the character to send
.39079b		20 bd 73	jsr $3973bd	                JSR ANSI_PUTC       ; Print to the current selected ANSI screen
.39079e		28		plp		done            PLP
.39079f		ab		plb		                PLB
.3907a0		2b		pld		                PLD
.3907a1		7a		ply		                PLY
.3907a2		fa		plx		                PLX
.3907a3		6b		rtl		                RTL
.3907a4		da		phx		SCRSHIFTLL      PHX
.3907a5		5a		phy		                PHY
.3907a6		48		pha		                PHA
.3907a7		0b		phd		                PHD
.3907a8		08		php		                PHP
.3907a9		48		pha		                PHA             ; begin setdp macro
.3907aa		08		php		                PHP
.3907ab		c2 20		rep #$20	                REP #$20        ; set A long
.3907ad		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3907b0		5b		tcd		                TCD
.3907b1		28		plp		                PLP
.3907b2		68		pla		                PLA             ; end setdp macro
.3907b3		c2 30		rep #$30	                REP #$30        ; set A&X long
.3907b5		a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.3907b7		a8		tay		                TAY                 ; Set it as the destination
.3907b8		aa		tax		                TAX
.3907b9		e8		inx		                INX                 ; And set the next cell as the source
.3907ba		18		clc		                CLC                 ; Calculate the length of the block to move
.3907bb		a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.3907bd		e5 1a		sbc $1a		                SBC CURSORX
.3907bf		54 af af	mvn $af,$af	                MVN $AF, $AF        ; And move the block
.3907c2		28		plp		                PLP
.3907c3		2b		pld		                PLD
.3907c4		68		pla		                PLA
.3907c5		7a		ply		                PLY
.3907c6		fa		plx		                PLX
.3907c7		6b		rtl		                RTL
.3907c8		da		phx		SCRSHIFTLR      PHX
.3907c9		48		pha		                PHA
.3907ca		0b		phd		                PHD
.3907cb		08		php		                PHP
.3907cc		48		pha		                PHA             ; begin setdp macro
.3907cd		08		php		                PHP
.3907ce		c2 20		rep #$20	                REP #$20        ; set A long
.3907d0		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3907d3		5b		tcd		                TCD
.3907d4		28		plp		                PLP
.3907d5		68		pla		                PLA             ; end setdp macro
.3907d6		c2 30		rep #$30	                REP #$30        ; set A&X long
.3907d8		a5 1a		lda $1a		                LDA CURSORX         ; What column are we on
.3907da		1a		inc a		                INC A
.3907db		c5 0f		cmp $0f		                CMP COLS_VISIBLE    ; >= the # visible?
.3907dd		b0 1b		bcs $3907fa	                BGE done            ; Yes: just skip the whole thing
.3907df		38		sec		                SEC                 ; Calculate the length of the block to move
.3907e0		a5 0f		lda $0f		                LDA COLS_VISIBLE
.3907e2		e5 1a		sbc $1a		                SBC CURSORX
.3907e4		1a		inc a		                INC A
.3907e5		18		clc		                CLC
.3907e6		65 17		adc $17		                ADC CURSORPOS       ; Add the current cursor position
.3907e8		3a		dec a		                DEC A
.3907e9		a8		tay		                TAY                 ; Make it the destination
.3907ea		3a		dec a		                DEC A               ; Move to the previous column
.3907eb		aa		tax		                TAX                 ; Make it the source
.3907ec		38		sec		                SEC                 ; Calculate the length of the block to move
.3907ed		a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.3907ef		e5 1a		sbc $1a		                SBC CURSORX
.3907f1		44 af af	mvp $af,$af	                MVP $AF, $AF        ; And move the block
.3907f4		e2 20		sep #$20	                SEP #$20        ; set A short
.3907f6		a9 20		lda #$20	                LDA #CHAR_SP        ; Put a blank space at the cursor position
.3907f8		87 17		sta [$17]	                STA [CURSORPOS]
.3907fa		28		plp		done            PLP
.3907fb		2b		pld		                PLD
.3907fc		68		pla		                PLA
.3907fd		fa		plx		                PLX
.3907fe		6b		rtl		                RTL
.3907ff						IPUTB
.3907ff		6b		rtl		                RTL
.390800						IPRINTCR
.390800		da		phx		                PHX
.390801		5a		phy		                PHY
.390802		8b		phb		                PHB
.390803		0b		phd		                PHD
.390804		08		php		                PHP
.390805		48		pha		                PHA             ; begin setdbr macro
.390806		08		php		                PHP
.390807		e2 20		sep #$20	                SEP #$20        ; set A short
.390809		a9 00		lda #$00	                LDA #0
.39080b		48		pha		                PHA
.39080c		ab		plb		                PLB
.39080d		28		plp		                PLP
.39080e		68		pla		                PLA             ; end setdbr macro
.39080f		48		pha		                PHA             ; begin setdp macro
.390810		08		php		                PHP
.390811		c2 20		rep #$20	                REP #$20        ; set A long
.390813		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390816		5b		tcd		                TCD
.390817		28		plp		                PLP
.390818		68		pla		                PLA             ; end setdp macro
.390819		e2 20		sep #$20	                SEP #$20        ; set A short
.39081b		c2 10		rep #$10	                REP #$10        ; set X long
.39081d		af 03 07 00	lda $000703	                LDA @lCHAN_OUT
.390821		f0 1c		beq $39083f	                BEQ scr_printcr
.390823		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.390825		f0 06		beq $39082d	                BEQ uart_printcr    ; Yes: handle printing to the UART
.390827		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.390829		f0 02		beq $39082d	                BEQ uart_printcr    ; Yes: handle printing to the UART
.39082b		80 1c		bra $390849	                BRA done
.39082d		22 b1 59 39	jsl $3959b1	uart_printcr    JSL UART_SELECT
.390831		a9 0d		lda #$0d	                LDA #CHAR_CR
.390833		22 18 10 00	jsl $001018	                JSL PUTC
.390837		a9 0a		lda #$0a	                LDA #CHAR_LF
.390839		22 18 10 00	jsl $001018	                JSL PUTC
.39083d		80 0a		bra $390849	                BRA done
.39083f		a2 00 00	ldx #$0000	scr_printcr     LDX #0
.390842		a4 1c		ldy $1c		                LDY CURSORY
.390844		c8		iny		                INY
.390845		22 84 10 00	jsl $001084	                JSL LOCATE
.390849		28		plp		done            PLP
.39084a		2b		pld		                PLD
.39084b		ab		plb		                PLB
.39084c		7a		ply		                PLY
.39084d		fa		plx		                PLX
.39084e		6b		rtl		                RTL
.39084f		da		phx		ICSRHOME        PHX
.390850		5a		phy		                PHY
.390851		08		php		                PHP
.390852		a2 00 00	ldx #$0000	                LDX #0
.390855		a0 00 00	ldy #$0000	                LDY #0
.390858		22 84 10 00	jsl $001084	                JSL LOCATE
.39085c		28		plp		                PLP
.39085d		7a		ply		                PLY
.39085e		fa		plx		                PLX
.39085f		6b		rtl		                RTL
.390860		da		phx		ICSRRIGHT       PHX
.390861		5a		phy		                PHY
.390862		48		pha		                PHA
.390863		0b		phd		                PHD
.390864		08		php		                PHP
.390865		20 1f 77	jsr $39771f	                JSR ANSI_CSRRIGHT
.390868		28		plp		                PLP
.390869		2b		pld		                PLD
.39086a		68		pla		                PLA
.39086b		7a		ply		                PLY
.39086c		fa		plx		                PLX
.39086d		6b		rtl		                RTL
.39086e						ICSRLEFT
.39086e		da		phx		                PHX
.39086f		5a		phy		                PHY
.390870		48		pha		                PHA
.390871		0b		phd		                PHD
.390872		08		php		                PHP
.390873		20 47 77	jsr $397747	                JSR ANSI_CSRLEFT
.390876		28		plp		                PLP
.390877		2b		pld		                PLD
.390878		68		pla		                PLA
.390879		7a		ply		                PLY
.39087a		fa		plx		                PLX
.39087b		6b		rtl		                RTL
.39087c						ICSRUP
.39087c		da		phx		                PHX
.39087d		5a		phy		                PHY
.39087e		48		pha		                PHA
.39087f		0b		phd		                PHD
.390880		08		php		                PHP
.390881		20 63 77	jsr $397763	                JSR ANSI_CSRUP
.390884		28		plp		                PLP
.390885		2b		pld		                PLD
.390886		68		pla		                PLA
.390887		7a		ply		                PLY
.390888		fa		plx		                PLX
.390889		6b		rtl		                RTL
.39088a		da		phx		ICSRDOWN        PHX
.39088b		5a		phy		                PHY
.39088c		0b		phd		                PHD
.39088d		20 7f 77	jsr $39777f	                JSR ANSI_CSRDOWN
.390890		2b		pld		                PLD
.390891		7a		ply		                PLY
.390892		fa		plx		                PLX
.390893		6b		rtl		                RTL
.390894		48		pha		ILOCATE         PHA
.390895		0b		phd		                PHD
.390896		08		php		                PHP
.390897		20 9f 77	jsr $39779f	                JSR ANSI_LOCATE
.39089a		28		plp		ilocate_done    PLP
.39089b		2b		pld		                PLD
.39089c		68		pla		                PLA
.39089d		6b		rtl		                RTL
.39089e						ISCROLLUP
.39089e		48		pha		                PHA
.39089f		da		phx		                PHX
.3908a0		5a		phy		                PHY
.3908a1		8b		phb		                PHB
.3908a2		0b		phd		                PHD
.3908a3		08		php		                PHP
.3908a4		48		pha		                PHA             ; begin setdp macro
.3908a5		08		php		                PHP
.3908a6		c2 20		rep #$20	                REP #$20        ; set A long
.3908a8		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3908ab		5b		tcd		                TCD
.3908ac		28		plp		                PLP
.3908ad		68		pla		                PLA             ; end setdp macro
.3908ae		c2 30		rep #$30	                REP #$30        ; set A&X long
.3908b0		a5 11		lda $11		                LDA COLS_PER_LINE
.3908b2		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.3908b6		a5 13		lda $13		                LDA LINES_VISIBLE
.3908b8		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.3908bc		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.3908c0		85 00		sta $00		                STA TMPPTR1
.3908c2		18		clc		                CLC
.3908c3		a9 00 a0	lda #$a000	                LDA #$A000
.3908c6		a8		tay		                TAY
.3908c7		65 11		adc $11		                ADC COLS_PER_LINE
.3908c9		aa		tax		                TAX
.3908ca		a5 00		lda $00		                LDA TMPPTR1
.3908cc		54 af af	mvn $af,$af	                MVN $AF,$AF
.3908cf		c2 30		rep #$30	                REP #$30        ; set A&X long
.3908d1		18		clc		                CLC
.3908d2		a9 00 c0	lda #$c000	                LDA #$C000
.3908d5		a8		tay		                TAY
.3908d6		65 11		adc $11		                ADC COLS_PER_LINE
.3908d8		aa		tax		                TAX
.3908d9		a5 00		lda $00		                LDA TMPPTR1
.3908db		54 af af	mvn $af,$af	                MVN $AF,$AF
.3908de		a5 00		lda $00		                LDA TMPPTR1
.3908e0		48		pha		                PHA
.3908e1		18		clc		                CLC
.3908e2		69 00 a0	adc #$a000	                ADC #<>CS_TEXT_MEM_PTR
.3908e5		85 00		sta $00		                STA TMPPTR1
.3908e7		a0 00 00	ldy #$0000	                LDY #0
.3908ea		a9 20 00	lda #$0020	                LDA #' '
.3908ed		97 00		sta [$00],y	clr_text        STA [TMPPTR1],Y
.3908ef		c8		iny		                INY
.3908f0		c4 0f		cpy $0f		                CPY COLS_VISIBLE
.3908f2		d0 f9		bne $3908ed	                BNE clr_text
.3908f4		68		pla		                PLA
.3908f5		18		clc		                CLC
.3908f6		69 00 c0	adc #$c000	                ADC #<>CS_COLOR_MEM_PTR
.3908f9		85 00		sta $00		                STA TMPPTR1
.3908fb		a0 00 00	ldy #$0000	                LDY #0
.3908fe		a5 1e		lda $1e		                LDA CURCOLOR
.390900		97 00		sta [$00],y	clr_color       STA [TMPPTR1],Y
.390902		c8		iny		                INY
.390903		c4 0f		cpy $0f		                CPY COLS_VISIBLE
.390905		d0 f9		bne $390900	                BNE clr_color
.390907		28		plp		                PLP
.390908		2b		pld		                PLD
.390909		ab		plb		                PLB
.39090a		7a		ply		                PLY
.39090b		fa		plx		                PLX
.39090c		68		pla		                PLA
.39090d		6b		rtl		                RTL
.39090e		08		php		IPRINTH         PHP
.39090f		48		pha		                PHA
.390910						iprinth1
.390910		e2 20		sep #$20	                SEP #$20        ; set A short
.390912		bd 00 00	lda $0000,x	                LDA #0,b,x      ; Read the value to be printed
.390915		4a		lsr a		                LSR
.390916		4a		lsr a		                LSR
.390917		4a		lsr a		                LSR
.390918		4a		lsr a		                LSR
.390919		22 68 09 39	jsl $390968	                JSL iprint_digit
.39091d		bd 00 00	lda $0000,x	                LDA #0,b,x
.390920		22 68 09 39	jsl $390968	                JSL iprint_digit
.390924		ca		dex		                DEX
.390925		88		dey		                DEY
.390926		d0 e8		bne $390910	                BNE iprinth1
.390928		68		pla		                PLA
.390929		28		plp		                PLP
.39092a		6b		rtl		                RTL
.39092b						IPRINTAH
.39092b		48		pha		                PHA
.39092c		08		php		                PHP
.39092d		8f 44 02 00	sta $000244	                STA @lCPUA            ; Save A where we can use it multiple times
.390931		08		php		                PHP                   ; Get the processor status into A
.390932		e2 20		sep #$20	                SEP #$20        ; set A short
.390934		c2 10		rep #$10	                REP #$10        ; set X long
.390936		68		pla		                PLA
.390937		29 20		and #$20	                AND #%00100000        ; Is M = 1?
.390939		c9 20		cmp #$20	                CMP #%00100000
.39093b		f0 14		beq $390951	                BEQ eight_bit
.39093d		af 45 02 00	lda $000245	                LDA @lCPUA+1          ; Get nibble [15..12]
.390941		4a		lsr a		                LSR A
.390942		4a		lsr a		                LSR A
.390943		4a		lsr a		                LSR A
.390944		4a		lsr a		                LSR A
.390945		22 68 09 39	jsl $390968	                JSL iprint_digit      ; And print it
.390949		af 45 02 00	lda $000245	                LDA @lCPUA+1          ; Get nibble [11..8]
.39094d		22 68 09 39	jsl $390968	                JSL iprint_digit      ; And print it
.390951		af 44 02 00	lda $000244	eight_bit       LDA @lCPUA            ; Get nibble [7..4]
.390955		4a		lsr a		                LSR A
.390956		4a		lsr a		                LSR A
.390957		4a		lsr a		                LSR A
.390958		4a		lsr a		                LSR A
.390959		22 68 09 39	jsl $390968	                JSL iprint_digit      ; And print it
.39095d		af 44 02 00	lda $000244	                LDA @lCPUA            ; Get nibble [3..0]
.390961		22 68 09 39	jsl $390968	                JSL iprint_digit      ; And print it
.390965		28		plp		                PLP
.390966		68		pla		                PLA
.390967		6b		rtl		                RTL
.390968		da		phx		iprint_digit    PHX
.390969		c2 20		rep #$20	                REP #$20        ; set A long
.39096b		29 0f 00	and #$000f	                AND #$0F
.39096e		aa		tax		                TAX
.39096f		bf 63 7d 39	lda $397d63,x	                LDA hex_digits,X
.390973		22 5c 07 39	jsl $39075c	                JSL IPUTC       ; Print the digit
.390977		fa		plx		                PLX
.390978		6b		rtl		                RTL
.390979		48		pha		ICLRSCREEN	    PHA
.39097a		da		phx		                PHX
.39097b		08		php		                PHP
.39097c		e2 20		sep #$20	                SEP #$20        ; set A short
.39097e		c2 10		rep #$10	                REP #$10        ; set X long
.390980		a2 00 00	ldx #$0000	                LDX #$0000		          ; Only Use One Pointer
.390983		a9 20		lda #$20	                LDA #$20		            ; Fill the Entire Screen with Space
.390985		9f 00 a0 af	sta $afa000,x	iclearloop0	STA CS_TEXT_MEM_PTR, x	;
.390989		e8		inx		                inx
.39098a		e0 00 20	cpx #$2000	                cpx #$2000
.39098d		d0 f6		bne $390985	                bne iclearloop0
.39098f		a2 00 00	ldx #$0000	                LDX	#$0000		          ; Only Use One Pointer
.390992		af 1e 00 00	lda $00001e	                LDA @lCURCOLOR          ; Fill the Color Memory with the current color
.390996		9f 00 c0 af	sta $afc000,x	iclearloop1     STA CS_COLOR_MEM_PTR, x	;
.39099a		e8		inx		                inx
.39099b		e0 00 20	cpx #$2000	                cpx #$2000
.39099e		d0 f6		bne $390996	                bne iclearloop1
.3909a0		28		plp		                PLP
.3909a1		fa		plx		                PLX
.3909a2		68		pla		                PLA
.3909a3		6b		rtl		                RTL
.3909a4						COPYBYTES42
.3909a4		08		php		                PHP
.3909a5		0b		phd		                PHD
.3909a6		48		pha		                PHA             ; begin setdp macro
.3909a7		08		php		                PHP
.3909a8		c2 20		rep #$20	                REP #$20        ; set A long
.3909aa		a9 00 00	lda #$0000	                LDA #TMPPTR1         ; set DP to page 0
.3909ad		5b		tcd		                TCD
.3909ae		28		plp		                PLP
.3909af		68		pla		                PLA             ; end setdp macro
.3909b0		e2 20		sep #$20	                SEP #$20        ; set A short
.3909b2		c2 10		rep #$10	                REP #$10        ; set X long
.3909b4		a0 00 00	ldy #$0000	                LDY #0
.3909b7		b7 00		lda [$00],y	copy_loop       LDA [TMPPTR1],Y
.3909b9		97 04		sta [$04],y	                STA [TMPPTR2],Y
.3909bb		c8		iny		                INY
.3909bc		c0 2a 00	cpy #$002a	                CPY #42
.3909bf		d0 f6		bne $3909b7	                BNE copy_loop
.3909c1		2b		pld		                PLD
.3909c2		28		plp		                PLP
.3909c3		60		rts		                RTS
.3909c4						ICOLORFLAG
.3909c4		48		pha		                PHA
.3909c5		da		phx		                PHX
.3909c6		5a		phy		                PHY
.3909c7		08		php		                PHP
.3909c8		8b		phb		                PHB
.3909c9		0b		phd		                PHD
.3909ca		48		pha		                PHA             ; begin setdp macro
.3909cb		08		php		                PHP
.3909cc		c2 20		rep #$20	                REP #$20        ; set A long
.3909ce		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3909d1		5b		tcd		                TCD
.3909d2		28		plp		                PLP
.3909d3		68		pla		                PLA             ; end setdp macro
.3909d4		c2 30		rep #$30	                REP #$30        ; set A&X long
.3909d6		a9 00 c0	lda #$c000	                LDA #<>CS_COLOR_MEM_PTR
.3909d9		85 04		sta $04		                STA TMPPTR2
.3909db		a9 af 00	lda #$00af	                LDA #`CS_COLOR_MEM_PTR
.3909de		85 06		sta $06		                STA TMPPTR2+2
.3909e0		a9 c0 79	lda #$79c0	                LDA #<>greet_clr_line1
.3909e3		85 00		sta $00		                STA TMPPTR1
.3909e5		a9 39 00	lda #$0039	                LDA #`greet_clr_line1
.3909e8		85 02		sta $02		                STA TMPPTR1+2
.3909ea		20 a4 09	jsr $3909a4	                JSR COPYBYTES42
.3909ed		18		clc		                CLC
.3909ee		a5 04		lda $04		                LDA TMPPTR2
.3909f0		65 11		adc $11		                ADC COLS_PER_LINE
.3909f2		85 04		sta $04		                STA TMPPTR2
.3909f4		a9 ea 79	lda #$79ea	                LDA #<>greet_clr_line2
.3909f7		85 00		sta $00		                STA TMPPTR1
.3909f9		a9 39 00	lda #$0039	                LDA #`greet_clr_line2
.3909fc		85 02		sta $02		                STA TMPPTR1+2
.3909fe		20 a4 09	jsr $3909a4	                JSR COPYBYTES42
.390a01		18		clc		                CLC
.390a02		a5 04		lda $04		                LDA TMPPTR2
.390a04		65 11		adc $11		                ADC COLS_PER_LINE
.390a06		85 04		sta $04		                STA TMPPTR2
.390a08		a9 14 7a	lda #$7a14	                LDA #<>greet_clr_line3
.390a0b		85 00		sta $00		                STA TMPPTR1
.390a0d		a9 39 00	lda #$0039	                LDA #`greet_clr_line3
.390a10		85 02		sta $02		                STA TMPPTR1+2
.390a12		20 a4 09	jsr $3909a4	                JSR COPYBYTES42
.390a15		18		clc		                CLC
.390a16		a5 04		lda $04		                LDA TMPPTR2
.390a18		65 11		adc $11		                ADC COLS_PER_LINE
.390a1a		85 04		sta $04		                STA TMPPTR2
.390a1c		a9 3e 7a	lda #$7a3e	                LDA #<>greet_clr_line4
.390a1f		85 00		sta $00		                STA TMPPTR1
.390a21		a9 39 00	lda #$0039	                LDA #`greet_clr_line4
.390a24		85 02		sta $02		                STA TMPPTR1+2
.390a26		20 a4 09	jsr $3909a4	                JSR COPYBYTES42
.390a29		18		clc		                CLC
.390a2a		a5 04		lda $04		                LDA TMPPTR2
.390a2c		65 11		adc $11		                ADC COLS_PER_LINE
.390a2e		85 04		sta $04		                STA TMPPTR2
.390a30		a9 68 7a	lda #$7a68	                LDA #<>greet_clr_line5
.390a33		85 00		sta $00		                STA TMPPTR1
.390a35		a9 39 00	lda #$0039	                LDA #`greet_clr_line5
.390a38		85 02		sta $02		                STA TMPPTR1+2
.390a3a		20 a4 09	jsr $3909a4	                JSR COPYBYTES42
.390a3d		2b		pld		                PLD
.390a3e		ab		plb		                PLB
.390a3f		28		plp		                PLP
.390a40		7a		ply		                PLY
.390a41		fa		plx		                PLX
.390a42		68		pla		                PLA
.390a43		6b		rtl		                RTL
.390a44		0b		phd		IINITCHLUT		  PHD
.390a45		08		php		                PHP
.390a46		48		pha		                PHA
.390a47		da		phx		                PHX
.390a48		20 d4 71	jsr $3971d4	                JSR ANSI_INIT_LUTS
.390a4b		fa		plx		                PLX
.390a4c		68		pla		                PLA
.390a4d		28		plp		                PLP
.390a4e		2b		pld		                PLD
.390a4f		6b		rtl		                RTL
.390a50						IINITGAMMATABLE
.390a50		e2 20		sep #$20	                SEP #$20        ; set A short
.390a52		c2 10		rep #$10	                REP #$10        ; set X long
.390a54		a2 00 00	ldx #$0000	                ldx #$0000
.390a57		bf 00 82 39	lda $398200,x	initgammaloop   LDA GAMMA_1_8_Tbl, x
.390a5b		9f 00 40 af	sta $af4000,x	                STA GAMMA_B_LUT_PTR, x
.390a5f		9f 00 41 af	sta $af4100,x	                STA GAMMA_G_LUT_PTR, x
.390a63		9f 00 42 af	sta $af4200,x	                STA GAMMA_R_LUT_PTR, x
.390a67		e8		inx		                inx
.390a68		e0 00 01	cpx #$0100	                cpx #$0100
.390a6b		d0 ea		bne $390a57	                bne initgammaloop
.390a6d		c2 30		rep #$30	                REP #$30        ; set A&X long
.390a6f		6b		rtl		                RTL
.390a70		48		pha		IINITALLLUT     PHA
.390a71		da		phx		                PHX
.390a72		a2 00 00	ldx #$0000	                LDX #$0000
.390a75		e2 20		sep #$20	                SEP #$20        ; set A short
.390a77		a9 00		lda #$00	                LDA #$00
.390a79		85 0a		sta $0a		                STA $0A     ; Temp Location
.390a7b						iinit_lut_loop
.390a7b		86 02		stx $02		                STX $02
.390a7d		a6 0a		ldx $0a		                LDX $0A
.390a7f		bf 00 81 39	lda $398100,x	                LDA GAMMA_2_2_Tbl, x
.390a83		49 55		eor #$55	                EOR  #$55
.390a85		a6 02		ldx $02		                LDX $02
.390a87		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390a8b		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390a8f		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390a93		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390a97		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390a9b		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390a9f		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390aa3		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390aa7		e8		inx		                inx
.390aa8		86 02		stx $02		                STX $02
.390aaa		a6 0a		ldx $0a		                LDX $0A
.390aac		bf 00 83 39	lda $398300,x	                LDA RANDOM_LUT_Tbl, x
.390ab0		a6 02		ldx $02		                LDX $02
.390ab2		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390ab6		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390aba		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390abe		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390ac2		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390ac6		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390aca		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390ace		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390ad2		e8		inx		                inx
.390ad3		86 02		stx $02		                STX $02
.390ad5		a6 0a		ldx $0a		                LDX $0A
.390ad7		bf 00 82 39	lda $398200,x	                LDA GAMMA_1_8_Tbl, x
.390adb		49 aa		eor #$aa	                EOR  #$AA
.390add		a6 02		ldx $02		                LDX $02
.390adf		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390ae3		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390ae7		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390aeb		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390aef		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390af3		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390af7		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390afb		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390aff		e8		inx		                inx
.390b00		a9 ff		lda #$ff	                LDA #$FF
.390b02		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390b06		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390b0a		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390b0e		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390b12		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390b16		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390b1a		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390b1e		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390b22		e6 0a		inc $0a		                inc $0A
.390b24		e8		inx		                inx
.390b25		e0 00 04	cpx #$0400	                cpx #$0400
.390b28		f0 03		beq $390b2d	                beq iinit_lut_exit
.390b2a		82 4e ff	brl $390a7b	                brl iinit_lut_loop
.390b2d						iinit_lut_exit
.390b2d		c2 30		rep #$30	                REP #$30        ; set A&X long
.390b2f		fa		plx		                PLX
.390b30		68		pla		                PLA
.390b31		6b		rtl		                RTL
.390b32						INITVKYTXTMODE_BYPASS_DPSW
.390b32		48		pha		                PHA
.390b33		08		php		                PHP
.390b34		80 24		bra $390b5a	                BRA WeNeed640480Here
.390b36						IINITVKYTXTMODE
.390b36		48		pha		                PHA
.390b37		08		php		                PHP
.390b38		e2 20		sep #$20	                SEP #$20        ; set A short
.390b3a		af 02 00 af	lda $af0002	                LDA @l GAMMA_CTRL_REG   ; Go Read the Hi-Res DIP Switch Value
.390b3e		29 10		and #$10	                AND #HIRES_DP_SW_VAL    ; Isolate the Hi-Res Bit ($10) when 1 = 640x480, 0 = 800x600
.390b40		c9 10		cmp #$10	                CMP #HIRES_DP_SW_VAL    ; When the Switch is off, the Returned value is 1 (The Pullup is there)
.390b42		f0 16		beq $390b5a	                BEQ WeNeed640480Here
.390b44		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.390b48		29 01		and #$01	                AND #Mstr_Ctrl_Video_Mode0
.390b4a		c9 01		cmp #$01	                CMP #Mstr_Ctrl_Video_Mode0
.390b4c		f0 33		beq $390b81	                BEQ INITVICKYMODEHIRES       ; if we are already in 800x600 Skip to the rest of the Init
.390b4e		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.390b52		09 01		ora #$01	                ORA #Mstr_Ctrl_Video_Mode0
.390b54		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.390b58		80 27		bra $390b81	                BRA INITVICKYMODEHIRES
.390b5a						WeNeed640480Here:
.390b5a		e2 20		sep #$20	                SEP #$20        ; set A short
.390b5c		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.390b60		29 01		and #$01	                AND #$01
.390b62		c9 01		cmp #$01	                CMP #$01
.390b64		d0 15		bne $390b7b	                BNE INITVICKYMODE
.390b66		a9 00		lda #$00	                LDA #$00
.390b68		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.390b6c		ea		nop		                NOP
.390b6d		ea		nop		                NOP
.390b6e		ea		nop		                NOP
.390b6f		ea		nop		                NOP
.390b70		ea		nop		                NOP
.390b71		a9 01		lda #$01	                LDA #$01
.390b73		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.390b77		ea		nop		                NOP
.390b78		ea		nop		                NOP
.390b79		ea		nop		                NOP
.390b7a		ea		nop		                NOP
.390b7b						INITVICKYMODE
.390b7b		a9 00		lda #$00	                LDA #$00
.390b7d		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H ; Set it to 640x480 for real
.390b81						INITVICKYMODEHIRES
.390b81		a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En
.390b83		8f 00 00 af	sta $af0000	                STA @L MASTER_CTRL_REG_L
.390b87		e2 20		sep #$20	                SEP #$20        ; set A short
.390b89		a9 00		lda #$00	                LDA #$00
.390b8b		8f 07 00 af	sta $af0007	                STA BORDER_COLOR_R
.390b8f		a9 54		lda #$54	                LDA #$54
.390b91		8f 06 00 af	sta $af0006	                STA BORDER_COLOR_G
.390b95		a9 54		lda #$54	                LDA #$54
.390b97		8f 05 00 af	sta $af0005	                STA BORDER_COLOR_B
.390b9b		a9 01		lda #$01	                LDA #Border_Ctrl_Enable           ; Enable the Border
.390b9d		8f 04 00 af	sta $af0004	                STA BORDER_CTRL_REG
.390ba1		a9 20		lda #$20	                LDA #32                           ; Set the border to the standard 32 pixels
.390ba3		8f 08 00 af	sta $af0008	                STA BORDER_X_SIZE
.390ba7		8f 09 00 af	sta $af0009	                STA BORDER_Y_SIZE
.390bab		c2 30		rep #$30	                REP #$30        ; set A&X long
.390bad		22 2c 11 00	jsl $00112c	                JSL SETSIZES                      ; Calculate the size of the text screen
.390bb1		28		plp		                PLP
.390bb2		68		pla		                PLA
.390bb3		6b		rtl		                RTL
.390bb4						ISETSIZES
.390bb4		48		pha		                PHA
.390bb5		da		phx		                PHX
.390bb6		5a		phy		                PHY
.390bb7		8b		phb		                PHB
.390bb8		0b		phd		                PHD
.390bb9		08		php		                PHP
.390bba		48		pha		                PHA             ; begin setdp macro
.390bbb		08		php		                PHP
.390bbc		c2 20		rep #$20	                REP #$20        ; set A long
.390bbe		a9 00 00	lda #$0000	                LDA #<>BANK0_BEGIN         ; set DP to page 0
.390bc1		5b		tcd		                TCD
.390bc2		28		plp		                PLP
.390bc3		68		pla		                PLA             ; end setdp macro
.390bc4		48		pha		                PHA             ; begin setdbr macro
.390bc5		08		php		                PHP
.390bc6		e2 20		sep #$20	                SEP #$20        ; set A short
.390bc8		a9 00		lda #$00	                LDA #0
.390bca		48		pha		                PHA
.390bcb		ab		plb		                PLB
.390bcc		28		plp		                PLP
.390bcd		68		pla		                PLA             ; end setdbr macro
.390bce		e2 30		sep #$30	                SEP #$30        ; set A&X short
.390bd0		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.390bd4		29 03		and #$03	                AND #$03                    ; Mask off the resolution bits
.390bd6		0a		asl a		                ASL A
.390bd7		aa		tax		                TAX                         ; Index to the col/line count in X
.390bd8		c2 20		rep #$20	                REP #$20        ; set A long
.390bda		bf 57 0c 39	lda $390c57,x	                LDA cols_by_res,X           ; Get the number of columns
.390bde		85 11		sta $11		                STA COLS_PER_LINE           ; This is how many columns there are per line in the memory
.390be0		85 0f		sta $0f		                STA COLS_VISIBLE            ; This is how many would be visible with no border
.390be2		bf 5f 0c 39	lda $390c5f,x	                LDA lines_by_res,X          ; Get the number of lines
.390be6		85 15		sta $15		                STA LINES_MAX               ; This is the total number of lines in memory
.390be8		85 13		sta $13		                STA LINES_VISIBLE           ; This is how many lines would be visible with no border
.390bea		e2 20		sep #$20	                SEP #$20        ; set A short
.390bec		af 04 00 af	lda $af0004	                LDA @l BORDER_CTRL_REG      ; Check to see if we have a border
.390bf0		89 01		bit #$01	                BIT #Border_Ctrl_Enable
.390bf2		f0 5c		beq $390c50	                BEQ done                    ; No border... the sizes are correct now
.390bf4		af 08 00 af	lda $af0008	                LDA @l BORDER_X_SIZE        ; Get the horizontal border width
.390bf8		29 3f		and #$3f	                AND #$3F
.390bfa		89 03		bit #$03	                BIT #$03                    ; Check the lower two bits... indicates a partial column is eaten
.390bfc		d0 04		bne $390c02	                BNE frac_width
.390bfe		4a		lsr a		                LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.390bff		4a		lsr a		                LSR A
.390c00		80 03		bra $390c05	                BRA store_width
.390c02		4a		lsr a		frac_width      LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.390c03		4a		lsr a		                LSR A                       ; because a column is partially hidden
.390c04		1a		inc a		                INC A
.390c05		85 00		sta $00		store_width     STA TMPPTR1
.390c07		64 01		stz $01		                STZ TMPPTR1+1
.390c09		e2 20		sep #$20	                SEP #$20        ; set A short
.390c0b		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H    ; Check if we're pixel doubling
.390c0f		89 02		bit #$02	                BIT #Mstr_Ctrl_Video_Mode1
.390c11		f0 04		beq $390c17	                BEQ adjust_width            ; No... just adjust the width of the screen
.390c13		c2 20		rep #$20	                REP #$20        ; set A long
.390c15		46 00		lsr $00		                LSR TMPPTR1                 ; Yes... cut the adjustment in half
.390c17						adjust_width
.390c17		c2 20		rep #$20	                REP #$20        ; set A long
.390c19		38		sec		                SEC
.390c1a		a5 11		lda $11		                LDA COLS_PER_LINE
.390c1c		e5 00		sbc $00		                SBC TMPPTR1
.390c1e		85 0f		sta $0f		                STA COLS_VISIBLE
.390c20		af 09 00 af	lda $af0009	                LDA @l BORDER_Y_SIZE        ; Get the horizontal border width
.390c24		29 3f 00	and #$003f	                AND #$3F
.390c27		89 03 00	bit #$0003	                BIT #$03                    ; Check the lower two bits... indicates a partial column is eaten
.390c2a		d0 04		bne $390c30	                BNE frac_height
.390c2c		4a		lsr a		                LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.390c2d		4a		lsr a		                LSR A
.390c2e		80 03		bra $390c33	                BRA store_height
.390c30		4a		lsr a		frac_height     LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.390c31		4a		lsr a		                LSR A                       ; because a column is partially hidden
.390c32		1a		inc a		                INC A
.390c33		85 00		sta $00		store_height    STA TMPPTR1
.390c35		64 01		stz $01		                STZ TMPPTR1+1
.390c37		e2 20		sep #$20	                SEP #$20        ; set A short
.390c39		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H    ; Check if we're pixel doubling
.390c3d		89 02		bit #$02	                BIT #Mstr_Ctrl_Video_Mode1
.390c3f		f0 04		beq $390c45	                BEQ adjust_height           ; No... just adjust the height of the screen
.390c41		c2 20		rep #$20	                REP #$20        ; set A long
.390c43		46 00		lsr $00		                LSR TMPPTR1                 ; Yes... cut the adjustment in half
.390c45						adjust_height
.390c45		c2 20		rep #$20	                REP #$20        ; set A long
.390c47		38		sec		                SEC
.390c48		a5 15		lda $15		                LDA LINES_MAX
.390c4a		e5 00		sbc $00		                SBC TMPPTR1
.390c4c		85 13		sta $13		                STA LINES_VISIBLE
.390c4e		c2 30		rep #$30	                REP #$30        ; set A&X long
.390c50		28		plp		done            PLP
.390c51		2b		pld		                PLD
.390c52		ab		plb		                PLB
.390c53		7a		ply		                PLY
.390c54		fa		plx		                PLX
.390c55		68		pla		                PLA
.390c56		6b		rtl		                RTL
>390c57		50 00 64 00 28 00 32 00		cols_by_res     .word 80,100,40,50
>390c5f		3c 00 4b 00 1e 00 25 00		lines_by_res    .word 60,75,30,37
.390c67						IINITVKYGRPMODE
.390c67		48		pha		                PHA
.390c68		e2 20		sep #$20	                SEP #$20        ; set A short
.390c6a		a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.390c6c		8f 00 01 af	sta $af0100	                STA @lBM0_CONTROL_REG
.390c70		a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.390c72		8f 01 01 af	sta $af0101	                STA @lBM0_START_ADDY_L
.390c76		a9 c0		lda #$c0	                LDA #$C0
.390c78		8f 02 01 af	sta $af0102	                STA @lBM0_START_ADDY_M
.390c7c		a9 00		lda #$00	                LDA #$00
.390c7e		8f 03 01 af	sta $af0103	                STA @lBM0_START_ADDY_H ; This address is always base from
.390c82		a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.390c84		8f 08 01 af	sta $af0108	                STA @lBM1_CONTROL_REG
.390c88		a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.390c8a		8f 09 01 af	sta $af0109	                STA @lBM1_START_ADDY_L
.390c8e		a9 c0		lda #$c0	                LDA #$C0
.390c90		8f 0a 01 af	sta $af010a	                STA @lBM1_START_ADDY_M
.390c94		a9 00		lda #$00	                LDA #$00
.390c96		8f 0b 01 af	sta $af010b	                STA @lBM1_START_ADDY_H ; This address is always base from
.390c9a		c2 30		rep #$30	                REP #$30        ; set A&X long
.390c9c		68		pla		                PLA
.390c9d		6b		rtl		                RTL
.390c9e						IINITTILEMODE
.390c9e		6b		rtl		                RTL
.390c9f		6b		rtl		INOP            RTL
.390ca0						IINITFONTSET
.390ca0		48		pha		                PHA
.390ca1		da		phx		                PHX
.390ca2		5a		phy		                PHY
.390ca3		8b		phb		                PHB
.390ca4		08		php		                PHP
.390ca5		c2 30		rep #$30	                REP #$30        ; set A&X long
.390ca7		a2 00 00	ldx #$0000	                LDX #<>FONT_4_BANK0         ; Font data to load
.390caa		a0 00 80	ldy #$8000	                LDY #<>FONT_MEMORY_BANK0    ; Location to load the font data
.390cad		a9 00 08	lda #$0800	                LDA #8 * 256                ; Size of a FONT in bytes
.390cb0		54 af 3f	mvn $3f,$af	                MVN #`FONT_4_BANK0, #`FONT_MEMORY_BANK0
.390cb3		28		plp		                PLP
.390cb4		ab		plb		                PLB
.390cb5		7a		ply		                PLY
.390cb6		fa		plx		                PLX
.390cb7		68		pla		                PLA
.390cb8		6b		rtl		                RTL
.390cb9						INITMOUSEPOINTER
.390cb9		e2 20		sep #$20	                SEP #$20        ; set A short
.390cbb		c2 10		rep #$10	                REP #$10        ; set X long
.390cbd		a2 00 00	ldx #$0000	                LDX #$0000
.390cc0						FILL_MOUSE_MARKER
.390cc0		bf 00 84 39	lda $398400,x	                LDA @lMOUSE_POINTER_PTR,X
.390cc4		9f 00 05 af	sta $af0500,x	                STA @lMOUSE_PTR_GRAP0_START, X
.390cc8		e8		inx		                INX
.390cc9		e0 00 01	cpx #$0100	                CPX #$0100
.390ccc		d0 f2		bne $390cc0	                BNE FILL_MOUSE_MARKER
.390cce		ea		nop		                nop
.390ccf		a9 01		lda #$01	                LDA #$01
.390cd1		8f 00 07 af	sta $af0700	                STA @lMOUSE_PTR_CTRL_REG_L  ; Enable Mouse, Mouse Pointer Graphic Bank 0
.390cd5		c2 30		rep #$30	                REP #$30        ; set A&X long
.390cd7		6b		rtl		                RTL
.390cd8						IINITCURSOR
.390cd8		e2 20		sep #$20	                SEP #$20        ; set A short
.390cda		a9 b1		lda #$b1	                LDA #$B1      ;The Cursor Character will be a Fully Filled Block
.390cdc		8f 12 00 af	sta $af0012	                STA VKY_TXT_CURSOR_CHAR_REG
.390ce0		a9 03		lda #$03	                LDA #$03      ;Set Cursor Enable And Flash Rate @1Hz
.390ce2		8f 10 00 af	sta $af0010	                STA VKY_TXT_CURSOR_CTRL_REG ;
.390ce6		c2 30		rep #$30	                REP #$30        ; set A&X long
.390ce8		a9 00 00	lda #$0000	                LDA #$0000;
.390ceb		8f 14 00 af	sta $af0014	                STA VKY_TXT_CURSOR_X_REG_L; // Set the X to Position 1
.390cef		a9 06 00	lda #$0006	                LDA #$0006;
.390cf2		8f 16 00 af	sta $af0016	                STA VKY_TXT_CURSOR_Y_REG_L; // Set the Y to Position 6 (Below)
.390cf6		6b		rtl		                RTL
.390cf7		0b		phd		IINITSUPERIO	  PHD
.390cf8		08		php		                PHP
.390cf9		48		pha		                PHA
.390cfa		e2 20		sep #$20	                SEP #$20        ; set A short
.390cfc		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390cfe		8f 23 11 af	sta $af1123	                STA GP10_REG
.390d02		af 23 11 af	lda $af1123	                LDA GP10_REG
.390d06		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390d08		8f 24 11 af	sta $af1124	                STA GP11_REG
.390d0c		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390d0e		8f 25 11 af	sta $af1125	                STA GP12_REG
.390d12		a9 01		lda #$01	        	LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390d14		8f 26 11 af	sta $af1126	        	STA GP13_REG
.390d18		a9 05		lda #$05	        	LDA #$05		;(C256 - POT A Analog BX) Bit[0] = 1, Bit[2] = 1
.390d1a		8f 27 11 af	sta $af1127	        	STA GP14_REG
.390d1e		a9 05		lda #$05	        	LDA #$05		;(C256 - POT A Analog BY) Bit[0] = 1, Bit[2] = 1
.390d20		8f 28 11 af	sta $af1128	        	STA GP15_REG
.390d24		a9 05		lda #$05	        	LDA #$05		;(C256 - POT B Analog BX) Bit[0] = 1, Bit[2] = 1
.390d26		8f 29 11 af	sta $af1129	        	STA GP16_REG
.390d2a		a9 05		lda #$05	        	LDA #$05		;(C256 - POT B Analog BY) Bit[0] = 1, Bit[2] = 1
.390d2c		8f 2a 11 af	sta $af112a	        	STA GP17_REG
.390d30		a9 00		lda #$00	        	LDA #$00		;(C256 - HEADPHONE MUTE) - Output GPIO - Push-Pull (1 - Headphone On, 0 - HeadPhone Off)
.390d32		8f 2b 11 af	sta $af112b	        	STA GP20_REG
.390d36		a9 01		lda #$01			LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390d38		8f 2f 11 af	sta $af112f			STA GP24_REG
.390d3c		a9 05		lda #$05			LDA #$05		;(C256 - MIDI IN) Bit[0] = 1, Bit[2] = 1 (Page 132 Manual)
.390d3e		8f 30 11 af	sta $af1130			STA GP25_REG
.390d42		a9 84		lda #$84			LDA #$84		;(C256 - MIDI OUT) Bit[2] = 1, Bit[7] = 1 (Open Drain - To be Checked)
.390d44		8f 31 11 af	sta $af1131			STA GP26_REG
.390d48		a9 01		lda #$01			LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 1) Setup as GPIO Input for now
.390d4a		8f 33 11 af	sta $af1133			STA GP30_REG
.390d4e		a9 01		lda #$01			LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 4) Setup as GPIO Input for now
.390d50		8f 34 11 af	sta $af1134			STA GP31_REG
.390d54		a9 01		lda #$01			LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 3) Setup as GPIO Input for now
.390d56		8f 35 11 af	sta $af1135			STA GP32_REG
.390d5a		a9 01		lda #$01			LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 6) Setup as GPIO Input for now
.390d5c		8f 36 11 af	sta $af1136			STA GP33_REG
.390d60		a9 01		lda #$01			LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 5) Setup as GPIO Input for now
.390d62		8f 37 11 af	sta $af1137			STA GP34_REG
.390d66		a9 01		lda #$01			LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 8) Setup as GPIO Input for now
.390d68		8f 38 11 af	sta $af1138			STA GP35_REG
.390d6c		a9 01		lda #$01			LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 7) Setup as GPIO Input for now
.390d6e		8f 39 11 af	sta $af1139			STA GP36_REG
.390d72		a9 01		lda #$01			LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 10) Setup as GPIO Input for now
.390d74		8f 3a 11 af	sta $af113a			STA GP37_REG
.390d78		a9 01		lda #$01			LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390d7a		8f 3d 11 af	sta $af113d			STA GP42_REG
.390d7e		a9 01		lda #$01			LDA #$01		;(C256 - INPUT PLL CLK INTERRUPT) Default Value - Will keep it as an input for now, no real usage for now
.390d80		8f 3e 11 af	sta $af113e			STA GP43_REG
.390d84		a9 05		lda #$05			LDA #$05		;(C256 - UART2 - RI2) - Input - Set Secondary Function
.390d86		8f 3f 11 af	sta $af113f			STA GP50_REG
.390d8a		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - DCD2) - Input - Set Secondary Function
.390d8c		8f 40 11 af	sta $af1140	                STA GP51_REG
.390d90		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - RXD2) - Input - Set Secondary Function
.390d92		8f 41 11 af	sta $af1141	                STA GP52_REG
.390d96		a9 04		lda #$04	                LDA #$04		;(C256 - UART2 - TXD2) - Output - Set Secondary Function
.390d98		8f 42 11 af	sta $af1142	                STA GP53_REG
.390d9c		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - DSR2) - Input - Set Secondary Function
.390d9e		8f 43 11 af	sta $af1143	                STA GP54_REG
.390da2		a9 04		lda #$04	                LDA #$04		;(C256 - UART2 - RTS2) - Output - Set Secondary Function
.390da4		8f 44 11 af	sta $af1144	                STA GP55_REG
.390da8		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - CTS2) - Input - Set Secondary Function
.390daa		8f 45 11 af	sta $af1145	                STA GP56_REG
.390dae		a9 04		lda #$04	                LDA #$04		;(C256 - UART2 - DTR2) - Output - Set Secondary Function
.390db0		8f 46 11 af	sta $af1146	                STA GP57_REG
.390db4		a9 84		lda #$84	                LDA #$84		;(C256 - LED1) - Open Drain - Output
.390db6		8f 47 11 af	sta $af1147	                STA GP60_REG
.390dba		a9 84		lda #$84	                LDA #$84		;(C256 - LED2) - Open Drain - Output
.390dbc		8f 48 11 af	sta $af1148	                STA GP61_REG
.390dc0		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP10..GP17) - Not Used
.390dc2		8f 4b 11 af	sta $af114b	                STA GP1_REG
.390dc6		a9 01		lda #$01	                LDA #$01		;GPIO Data Register (GP20..GP27) - Bit[0] - Headphone Mute (Enabling it)
.390dc8		8f 4c 11 af	sta $af114c	                STA GP2_REG
.390dcc		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP30..GP37) - Since it is in Output mode, nothing to write here.
.390dce		8f 4d 11 af	sta $af114d	                STA GP3_REG
.390dd2		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP40..GP47)  - Not Used
.390dd4		8f 4e 11 af	sta $af114e	                STA GP4_REG
.390dd8		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP50..GP57)  - Not Used
.390dda		8f 4f 11 af	sta $af114f	                STA GP5_REG
.390dde		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP60..GP61)  - Not Used
.390de0		8f 50 11 af	sta $af1150	                STA GP6_REG
.390de4		a9 01		lda #$01	                LDA #$01		;LED1 Output - Already setup by Vicky Init Phase, for now, I will leave it alone
.390de6		8f 5d 11 af	sta $af115d	                STA LED1_REG
.390dea		a9 02		lda #$02	                LDA #$02		;LED2 Output - However, I will setup this one, to make sure the Code works (Full On, when Code was ran)
.390dec		8f 5e 11 af	sta $af115e	                STA LED2_REG
.390df0		c2 20		rep #$20	                REP #$20        ; set A long
.390df2		68		pla		                PLA
.390df3		28		plp			        PLP
.390df4		2b		pld				PLD
.390df5		6b		rtl		                RTL
.390df6		0b		phd		IINITKEYBOARD	PHD
.390df7		08		php				PHP
.390df8		48		pha				PHA
.390df9		da		phx				PHX
.390dfa		e2 20		sep #$20	                SEP #$20        ; set A short
.390dfc		c2 10		rep #$10	                REP #$10        ; set X long
.390dfe		18		clc		                CLC
.390dff		20 95 0e	jsr $390e95	                JSR Poll_Inbuf ;
.390e02		a9 aa		lda #$aa			LDA #$AA			;Send self test command
.390e04		8f 07 18 af	sta $af1807			STA KBD_CMD_BUF
.390e08		20 a0 0e	jsr $390ea0	                JSR Poll_Outbuf ;
.390e0b		af 03 18 af	lda $af1803	                LDA KBD_OUT_BUF		;Check self test result
.390e0f		c9 55		cmp #$55	                CMP #$55
.390e11		f0 03		beq $390e16	                BEQ	passAAtest
.390e13		82 72 00	brl $390e88	                BRL initkb_loop_out
.390e16						passAAtest
.390e16		a9 ab		lda #$ab			LDA #$AB			;Send test Interface command
.390e18		8f 07 18 af	sta $af1807	                STA KBD_CMD_BUF
.390e1c		20 a0 0e	jsr $390ea0	                JSR Poll_Outbuf ;
.390e1f		af 03 18 af	lda $af1803			LDA KBD_OUT_BUF		;Display Interface test results
.390e23		c9 00		cmp #$00			CMP #$00			;Should be 00
.390e25		f0 03		beq $390e2a			BEQ	passABtest
.390e27		82 5e 00	brl $390e88	                BRL initkb_loop_out
.390e2a						passABtest
.390e2a		a9 60		lda #$60	                LDA #$60            ; Send Command 0x60 so to Enable Interrupt
.390e2c		8f 07 18 af	sta $af1807	                STA KBD_CMD_BUF
.390e30		20 95 0e	jsr $390e95	                JSR Poll_Inbuf ;
.390e33		a9 43		lda #$43	                LDA #%01000011      ; Enable Interrupt - Translation from CODE 2 to CODE 1 Scan code is enable
.390e35		8f 03 18 af	sta $af1803	                STA KBD_DATA_BUF
.390e39		20 95 0e	jsr $390e95	                JSR Poll_Inbuf ;
.390e3c		a9 ff		lda #$ff	                LDA #$FF      ; Send Keyboard Reset command
.390e3e		8f 03 18 af	sta $af1803	                STA KBD_DATA_BUF
.390e42		a2 ff ff	ldx #$ffff	                LDX #$FFFF
.390e45		ca		dex		DLY_LOOP1       DEX
.390e46		ea		nop		                NOP
.390e47		ea		nop		                NOP
.390e48		ea		nop		                NOP
.390e49		ea		nop		                NOP
.390e4a		ea		nop		                NOP
.390e4b		ea		nop		                NOP
.390e4c		ea		nop		                NOP
.390e4d		ea		nop		                NOP
.390e4e		e0 00 00	cpx #$0000	                CPX #$0000
.390e51		d0 f2		bne $390e45	                BNE DLY_LOOP1
.390e53		20 a0 0e	jsr $390ea0	                JSR Poll_Outbuf ;
.390e56		af 03 18 af	lda $af1803	                LDA KBD_OUT_BUF   ; Read Output Buffer
.390e5a						DO_CMD_F4_AGAIN
.390e5a		20 95 0e	jsr $390e95	                JSR Poll_Inbuf ;
.390e5d		a9 f4		lda #$f4					        LDA #$F4			; Enable the Keyboard
.390e5f		8f 03 18 af	sta $af1803					        STA KBD_DATA_BUF
.390e63		20 a0 0e	jsr $390ea0	                JSR Poll_Outbuf ;
.390e66		af 03 18 af	lda $af1803					        LDA KBD_OUT_BUF		; Clear the Output buffer
.390e6a		c9 fa		cmp #$fa	                CMP #$FA
.390e6c		d0 ec		bne $390e5a	                BNE DO_CMD_F4_AGAIN
.390e6e		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1  ; Read the Pending Register &
.390e72		29 01		and #$01	                AND #FNX1_INT00_KBD
.390e74		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1  ; Writing it back will clear the Active Bit
.390e78		af 4d 01 00	lda $00014d	                LDA @lINT_MASK_REG1
.390e7c		29 fe		and #$fe	                AND #~FNX1_INT00_KBD
.390e7e		8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.390e82		a2 8e 7b	ldx #$7b8e	                LDX #<>Success_kb_init
.390e85		38		sec		                SEC
.390e86		b0 00		bcs $390e88	                BCS InitKbSuccess
.390e88						initkb_loop_out
.390e88		22 3c 07 39	jsl $39073c	InitKbSuccess   JSL IPRINT       ; print Message
.390e8c		c2 20		rep #$20	                REP #$20        ; set A long
.390e8e		c2 10		rep #$10	                REP #$10        ; set X long
.390e90		fa		plx		                PLX
.390e91		68		pla		                PLA
.390e92		28		plp						        PLP
.390e93		2b		pld						        PLD
.390e94		6b		rtl		                RTL
.390e95						Poll_Inbuf
.390e95		af 07 18 af	lda $af1807	                LDA STATUS_PORT		; Load Status Byte
.390e99		29 02		and #$02					        AND	#<INPT_BUF_FULL	; Test bit $02 (if 0, Empty)
.390e9b		c9 02		cmp #$02					        CMP #<INPT_BUF_FULL
.390e9d		f0 f6		beq $390e95					        BEQ Poll_Inbuf
.390e9f		60		rts		                RTS
.390ea0						Poll_Outbuf
.390ea0		af 07 18 af	lda $af1807	                LDA STATUS_PORT
.390ea4		29 01		and #$01	                AND #OUT_BUF_FULL ; Test bit $01 (if 1, Full)
.390ea6		c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.390ea8		d0 f6		bne $390ea0	                BNE Poll_Outbuf
.390eaa		60		rts		                RTS
.390eab		0b		phd		IINITMOUSE      PHD
.390eac		08		php						        PHP
.390ead		48		pha						        PHA
.390eae		da		phx						        PHX
.390eaf		e2 20		sep #$20	                SEP #$20        ; set A short
.390eb1		c2 10		rep #$10	                REP #$10        ; set X long
.390eb3		18		clc		                CLC
.390eb4		a2 ff ff	ldx #$ffff	                LDX #$FFFF
.390eb7						DO_CMD_A9_AGAIN
.390eb7		20 95 0e	jsr $390e95	                JSR Poll_Inbuf
.390eba		a9 a9		lda #$a9	                LDA #$A9          ; Tests second PS2 Channel
.390ebc		8f 07 18 af	sta $af1807	                STA KBD_CMD_BUF
.390ec0		20 3a 0f	jsr $390f3a	                JSR Poll_Outbuf_Mouse_TimeOut ;
.390ec3		af 03 18 af	lda $af1803					        LDA KBD_OUT_BUF		; Clear the Output buffer
.390ec7		c9 00		cmp #$00	                CMP #$00
.390ec9		d0 ec		bne $390eb7	                BNE DO_CMD_A9_AGAIN
.390ecb		a9 f6		lda #$f6	                LDA #$F6        ;Tell the mouse to use default settings
.390ecd		20 14 0f	jsr $390f14	                JSR MOUSE_WRITE
.390ed0		20 27 0f	jsr $390f27	                JSR MOUSE_READ ;***
.390ed3		a9 e8		lda #$e8	                LDA #$E8
.390ed5		20 14 0f	jsr $390f14	                JSR MOUSE_WRITE
.390ed8		20 27 0f	jsr $390f27	                JSR MOUSE_READ ;***
.390edb		a9 00		lda #$00	                LDA #$00
.390edd		20 14 0f	jsr $390f14	                JSR MOUSE_WRITE
.390ee0		20 27 0f	jsr $390f27	                JSR MOUSE_READ ;***
.390ee3		a9 f4		lda #$f4	                LDA #$F4        ; Enable the Mouse
.390ee5		20 14 0f	jsr $390f14	                JSR MOUSE_WRITE
.390ee8		20 27 0f	jsr $390f27	                JSR MOUSE_READ ;***
.390eeb		a9 00		lda #$00	                LDA #$00
.390eed		85 e0		sta $e0		                STA MOUSE_PTR
.390eef		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0  ; Read the Pending Register &
.390ef3		29 80		and #$80	                AND #FNX0_INT07_MOUSE
.390ef5		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0  ; Writing it back will clear the Active Bit
.390ef9		af 4c 01 00	lda $00014c	                LDA @lINT_MASK_REG0
.390efd		29 7f		and #$7f	                AND #~FNX0_INT07_MOUSE
.390eff		8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.390f03		c2 10		rep #$10	                REP #$10        ; set X long
.390f05		a2 a0 7b	ldx #$7ba0	                LDX #<>Success_ms_init
.390f08		80 03		bra $390f0d	                BRA InitMsSuccess
.390f0a		a2 d7 7b	ldx #$7bd7	initms_loop_out LDX #<>Failed_ms_init
.390f0d						InitMsSuccess
.390f0d		c2 20		rep #$20	                REP #$20        ; set A long
.390f0f		fa		plx		                PLX
.390f10		68		pla		                PLA
.390f11		28		plp				PLP
.390f12		2b		pld				PLD
.390f13		6b		rtl		                RTL
.390f14						MOUSE_WRITE
.390f14		48		pha		                PHA
.390f15		20 95 0e	jsr $390e95	                JSR Poll_Inbuf    ; Test bit $01 (if 2, Full)
.390f18		a9 d4		lda #$d4	                LDA #$D4
.390f1a		8f 07 18 af	sta $af1807	                STA KBD_CMD_BUF   ; KBD_CMD_BUF		= $AF1064
.390f1e		20 95 0e	jsr $390e95	                JSR Poll_Inbuf
.390f21		68		pla		                PLA
.390f22		8f 03 18 af	sta $af1803	                STA KBD_DATA_BUF  ; KBD_DATA_BUF	= $AF1060
.390f26		60		rts		                RTS
.390f27						MOUSE_READ
.390f27		20 2f 0f	jsr $390f2f	                JSR Poll_Outbuf_Mouse   ; Test bit $01 (if 1, Full)
.390f2a		af 03 18 af	lda $af1803	                LDA KBD_INPT_BUF  ; KBD_INPT_BUF	= $AF1060
.390f2e		60		rts		                RTS
.390f2f						Poll_Outbuf_Mouse
.390f2f		af 07 18 af	lda $af1807	                LDA STATUS_PORT
.390f33		29 01		and #$01	                AND #OUT_BUF_FULL ; Test bit $01 (if 1, Full)
.390f35		c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.390f37		d0 f6		bne $390f2f	                BNE Poll_Outbuf_Mouse
.390f39		60		rts		                RTS
.390f3a						Poll_Outbuf_Mouse_TimeOut
.390f3a		af 07 18 af	lda $af1807	                LDA STATUS_PORT
.390f3e		29 01		and #$01	                AND #OUT_BUF_FULL ; Test bit $01 (if 1, Full)
.390f40		c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.390f42		f0 08		beq $390f4c	                BEQ Poll_OutbufWeAreDone
.390f44		ca		dex		                DEX
.390f45		e0 00 00	cpx #$0000	                CPX #$0000
.390f48		d0 f0		bne $390f3a	                BNE Poll_Outbuf_Mouse_TimeOut
.390f4a		80 be		bra $390f0a	                BRA initms_loop_out
.390f4c						Poll_OutbufWeAreDone:
.390f4c		60		rts		                RTS
.390f4d		48		pha		INITRTC         PHA
.390f4e		08		php		                PHP
.390f4f		e2 20		sep #$20	                SEP #$20        ; set A short
.390f51		a9 00		lda #$00	                LDA #0
.390f53		8f 0b 08 af	sta $af080b	                STA @l RTC_RATES    ; Set watch dog timer and periodic interrupt rates to 0
.390f57		8f 0c 08 af	sta $af080c	                STA @l RTC_ENABLE   ; Disable all the alarms and interrupts
.390f5b		af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL      ; Make sure the RTC will continue to tick in battery mode
.390f5f		09 04		ora #$04	                ORA #%00000100
.390f61		8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.390f65		28		plp		                PLP
.390f66		68		pla		                PLA
.390f67		6b		rtl		                RTL
.390f68		48		pha		IINITCODEC      PHA
.390f69		08		php		                PHP
.390f6a		c2 20		rep #$20	                REP #$20        ; set A long
.390f6c		a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R10 - Programming the DAC
.390f6f		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390f73		a9 01 00	lda #$0001	                LDA #$0001
.390f76		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390f7a		20 0b 10	jsr $39100b	                JSR CODEC_TRF_FINISHED
.390f7d		a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R13 - Turn On Headphones
.390f80		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390f84		a9 01 00	lda #$0001	                LDA #$0001
.390f87		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390f8b		20 0b 10	jsr $39100b	                JSR CODEC_TRF_FINISHED
.390f8e		a9 1e 2a	lda #$2a1e	                LDA #%0010101000011110       ;R21 - Enable All the Analog In
.390f91		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390f95		a9 01 00	lda #$0001	                LDA #$0001
.390f98		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390f9c		20 0b 10	jsr $39100b	                JSR CODEC_TRF_FINISHED
.390f9f		a9 01 23	lda #$2301	                LDA #%0010001100000001      ;R17 - Enable All the Analog In
.390fa2		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390fa6		a9 01 00	lda #$0001	                LDA #$0001
.390fa9		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390fad		20 0b 10	jsr $39100b	                JSR CODEC_TRF_FINISHED
.390fb0		a9 07 2c	lda #$2c07	                LDA #%0010110000000111      ;R22 - Enable all Analog Out
.390fb3		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390fb7		a9 01 00	lda #$0001	                LDA #$0001
.390fba		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390fbe		20 0b 10	jsr $39100b	                JSR CODEC_TRF_FINISHED
.390fc1		a9 02 14	lda #$1402	                LDA #%0001010000000010      ;R10 - DAC Interface Control
.390fc4		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390fc8		a9 01 00	lda #$0001	                LDA #$0001
.390fcb		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390fcf		20 0b 10	jsr $39100b	                JSR CODEC_TRF_FINISHED
.390fd2		a9 02 16	lda #$1602	                LDA #%0001011000000010      ;R11 - ADC Interface Control
.390fd5		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390fd9		a9 01 00	lda #$0001	                LDA #$0001
.390fdc		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390fe0		20 0b 10	jsr $39100b	                JSR CODEC_TRF_FINISHED
.390fe3		a9 45 18	lda #$1845	                LDA #%0001100_001000101      ;R12 - Master Mode Control
.390fe6		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390fea		a9 01 00	lda #$0001	                LDA #$0001
.390fed		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390ff1		20 0b 10	jsr $39100b	                JSR CODEC_TRF_FINISHED
.390ff4		28		plp		                PLP
.390ff5		68		pla		                PLA
.390ff6		6b		rtl		                RTL
.390ff7						IRESETCODEC
.390ff7		c2 20		rep #$20	                REP #$20        ; set A long
.390ff9		a9 00 2e	lda #$2e00	                LDA #$2E00      ;R22 - Enable all Analog Out
.390ffc		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.391000		a9 01 00	lda #$0001	                LDA #$0001
.391003		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391007		20 0b 10	jsr $39100b	                JSR CODEC_TRF_FINISHED
.39100a		6b		rtl		                RTL
.39100b						CODEC_TRF_FINISHED
.39100b		e2 20		sep #$20	                SEP #$20        ; set A short
.39100d		af 02 e9 af	lda $afe902	CODEC_LOOP      LDA CODEC_WR_CTRL
.391011		29 01		and #$01	                AND #$01
.391013		c9 01		cmp #$01	                CMP #$01
.391015		f0 f6		beq $39100d	                BEQ CODEC_LOOP
.391017		c2 20		rep #$20	                REP #$20        ; set A long
.391019		60		rts		                RTS
.39101a						IBM_FILL_SCREEN
.39101a		c2 30		rep #$30	                REP #$30        ; set A&X long
.39101c		a9 00 00	lda #$0000	                LDA #$0000
.39101f		a2 00 00	ldx #$0000	                LDX #$0000
.391022						BM_FILL_SCREEN_LOOPY
.391022		a0 00 00	ldy #$0000	                LDY #$0000
.391025		e2 20		sep #$20	                SEP #$20        ; set A short
.391027						BM_FILL_SCREEN_LOOPX
.391027		97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.391029		c8		iny		                INY
.39102a		c4 40		cpy $40		                CPY BM_CLEAR_SCRN_X              ; Transfer the First line
.39102c		d0 f9		bne $391027	                BNE BM_FILL_SCREEN_LOOPX
.39102e		20 39 10	jsr $391039	                JSR BM_FILL_COMPUTE_Y_DST
.391031		e8		inx		                INX
.391032		e4 42		cpx $42		                CPX BM_CLEAR_SCRN_Y
.391034		d0 ec		bne $391022	                BNE BM_FILL_SCREEN_LOOPY
.391036		c2 30		rep #$30	                REP #$30        ; set A&X long
.391038		6b		rtl		                RTL
.391039						BM_FILL_COMPUTE_Y_DST
.391039		c2 20		rep #$20	                REP #$20        ; set A long
.39103b		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR        ; Right now it is set @ $020000 (128K) + File Size
.39103d		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.391041		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2      ; Right now it is set @ $020000 (128K)
.391043		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.391047		a9 80 02	lda #$0280	                LDA #$280        ; Right now it is set @ $020000 (128K) + File Size
.39104a		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.39104e		a9 00 00	lda #$0000	                LDA #$0000
.391051		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.391055		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.391059		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.39105b		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.39105f		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.391061		a9 00 00	lda #$0000	                LDA #$0000
.391064		60		rts		                RTS
.391065						IBMP_PARSER
.391065		c2 30		rep #$30	                REP #$30        ; set A&X long
.391067		a0 00 00	ldy #$0000	                LDY #$0000
.39106a		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y
.39106c		c9 42 4d	cmp #$4d42	                CMP #$4D42
.39106f		f0 03		beq $391074	                BEQ IBMP_PARSER_CONT
.391071		82 04 01	brl $391178	                BRL BMP_PARSER_END_WITH_ERROR
.391074						IBMP_PARSER_CONT
.391074		a0 02 00	ldy #$0002	                LDY #$0002
.391077		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size Low Short
.391079		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.39107d		a0 04 00	ldy #$0004	                LDY #$0004
.391080		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size High Short
.391082		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.391086		a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Store -1 in Adder (B)
.391089		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.39108d		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.391091		18		clc		                CLC
.391092		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.391096		85 50		sta $50		                STA BMP_FILE_SIZE
.391098		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.39109c		85 52		sta $52		                STA BMP_FILE_SIZE+2
.39109e		a0 12 00	ldy #$0012	                LDY #$0012
.3910a1		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.3910a3		85 40		sta $40		                STA BMP_X_SIZE
.3910a5		a0 16 00	ldy #$0016	                LDY #$0016
.3910a8		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.3910aa		85 42		sta $42		                STA BMP_Y_SIZE
.3910ac		a0 2e 00	ldy #$002e	                LDY #$002E
.3910af		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.3910b1		0a		asl a		                ASL A; Multiply by 2
.3910b2		0a		asl a		                ASL A; Multiply by 2
.3910b3		85 4c		sta $4c		                STA BMP_COLOR_PALET         ;
.3910b5		e0 00 00	cpx #$0000	                CPX #$0000
.3910b8		d0 05		bne $3910bf	                BNE BMP_LUT1_PICK
.3910ba		20 80 11	jsr $391180	                JSR BMP_PARSER_UPDATE_LUT0   ; Go Upload the LUT0
.3910bd		80 08		bra $3910c7	                BRA DONE_TRANSFER_LUT;
.3910bf						  BMP_LUT1_PICK
.3910bf		e0 01 00	cpx #$0001	                CPX #$0001
.3910c2		d0 03		bne $3910c7	                BNE BMP_LUT2_PICK
.3910c4		20 b0 11	jsr $3911b0	                JSR BMP_PARSER_UPDATE_LUT1   ; Go Upload the LUT1
.3910c7						  BMP_LUT2_PICK
.3910c7						  DONE_TRANSFER_LUT
.3910c7		a5 56		lda $56		                LDA BMP_POSITION_Y
.3910c9		8f 00 01 00	sta $000100	                STA @lUNSIGNED_MULT_A_LO
.3910cd		a5 4e		lda $4e		                LDA SCRN_X_STRIDE
.3910cf		8f 02 01 00	sta $000102	                STA @lUNSIGNED_MULT_B_LO
.3910d3		af 04 01 00	lda $000104	                LDA @lUNSIGNED_MULT_AL_LO
.3910d7		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.3910db		af 06 01 00	lda $000106	                LDA @lUNSIGNED_MULT_AL_LO+2
.3910df		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.3910e3		a5 54		lda $54		                LDA BMP_POSITION_X
.3910e5		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Put the X Position Adder (B)
.3910e9		a9 00 00	lda #$0000	                LDA #$0000
.3910ec		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.3910f0		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in TEMP
.3910f4		85 f0		sta $f0		                STA USER_TEMP
.3910f6		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in TEMP
.3910fa		85 f2		sta $f2		                STA USER_TEMP+2
.3910fc		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.3910fe		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.391102		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.391104		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.391108		a5 f0		lda $f0		                LDA USER_TEMP
.39110a		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store in 32Bit Adder (B)
.39110e		a5 f2		lda $f2		                LDA USER_TEMP+2
.391110		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in 32Bit Adder (B)
.391114		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in BMP_PRSE_DST_PTR
.391118		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.39111a		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in BMP_PRSE_DST_PTR
.39111e		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.391120		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K)
.391122		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.391126		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2        ; Right now it is set @ $020000 (128K)
.391128		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.39112c		a5 50		lda $50		                LDA BMP_FILE_SIZE
.39112e		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.391132		a5 52		lda $52		                LDA BMP_FILE_SIZE+2
.391134		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.391138		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.39113c		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.39113e		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.391142		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.391144		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.391146		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.39114a		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.39114c		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.391150		18		clc		                CLC
.391151		a5 40		lda $40		                LDA BMP_X_SIZE              ; Load The Size in X of the image and Make it negative
.391153		49 ff ff	eor #$ffff	                EOR #$FFFF                  ; Inverse all bit
.391156		69 01 00	adc #$0001	                ADC #$0001                  ; Add 0 ()
.391159		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store the Results in reg B of ADDER32
.39115d		a9 ff ff	lda #$ffff	                LDA #$FFFF
.391160		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in the Reminder of the 32Bits B Register
.391164		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.391168		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.39116a		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.39116e		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.391170		20 e0 11	jsr $3911e0	                JSR BMP_PARSER_DMA_SHIT_OUT  ; We are going to start with the slow method
.391173		a2 24 7c	ldx #$7c24	                LDX #<>bmp_parser_msg0
.391176		80 03		bra $39117b	                BRA BMP_PARSER_END_NO_ERROR
.391178						BMP_PARSER_END_WITH_ERROR
.391178		a2 10 7c	ldx #$7c10	                LDX #<>bmp_parser_err0
.39117b						BMP_PARSER_END_NO_ERROR
.39117b		22 3c 07 39	jsl $39073c	                JSL IPRINT       ; print the first line
.39117f		6b		rtl		                RTL
.391180						BMP_PARSER_UPDATE_LUT0
.391180		38		sec		                SEC
.391181		a0 7a 00	ldy #$007a	                LDY #$007A
.391184		a2 00 00	ldx #$0000	                LDX #$0000
.391187		e2 20		sep #$20	                SEP #$20        ; set A short
.391189						BMP_PARSER_UPDATE_LOOP
.391189		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.39118b		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR+0, X      ; The look-up Table point to a pixel Blue
.39118f		c8		iny		                INY
.391190		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.391192		9f 01 20 af	sta $af2001,x	                STA @lGRPH_LUT0_PTR+1, X      ; The look-up Table point to a pixel Blue
.391196		c8		iny		                INY
.391197		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.391199		9f 02 20 af	sta $af2002,x	                STA @lGRPH_LUT0_PTR+2, X      ; The look-up Table point to a pixel Blue
.39119d		c8		iny		                INY
.39119e		a9 80		lda #$80	                LDA #$80
.3911a0		9f 03 20 af	sta $af2003,x	                STA @lGRPH_LUT0_PTR+3, X      ; The look-up Table point to a pixel Blue
.3911a4		c8		iny		                INY ; For the Alpha Value, nobody cares
.3911a5		e8		inx		                INX
.3911a6		e8		inx		                INX
.3911a7		e8		inx		                INX
.3911a8		e8		inx		                INX
.3911a9		e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.3911ab		d0 dc		bne $391189	                BNE BMP_PARSER_UPDATE_LOOP
.3911ad		c2 20		rep #$20	                REP #$20        ; set A long
.3911af		60		rts		                RTS
.3911b0						BMP_PARSER_UPDATE_LUT1
.3911b0		38		sec		                SEC
.3911b1		a0 36 00	ldy #$0036	                LDY #$0036
.3911b4		a2 00 00	ldx #$0000	                LDX #$0000
.3911b7		e2 20		sep #$20	                SEP #$20        ; set A short
.3911b9						PALETTE_LUT1_LOOP
.3911b9		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.3911bb		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR+0, X      ; The look-up Table point to a pixel Blue
.3911bf		c8		iny		                INY
.3911c0		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.3911c2		9f 01 24 af	sta $af2401,x	                STA @lGRPH_LUT1_PTR+1, X      ; The look-up Table point to a pixel Blue
.3911c6		c8		iny		                INY
.3911c7		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.3911c9		9f 02 24 af	sta $af2402,x	                STA @lGRPH_LUT1_PTR+2, X      ; The look-up Table point to a pixel Blue
.3911cd		c8		iny		                INY
.3911ce		a9 80		lda #$80	                LDA #$80
.3911d0		9f 03 24 af	sta $af2403,x	                STA @lGRPH_LUT1_PTR+3, X      ; The look-up Table point to a pixel Blue
.3911d4		c8		iny		                INY ; For the Alpha Value, nobody cares
.3911d5		e8		inx		                INX
.3911d6		e8		inx		                INX
.3911d7		e8		inx		                INX
.3911d8		e8		inx		                INX
.3911d9		e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.3911db		d0 dc		bne $3911b9	                BNE PALETTE_LUT1_LOOP
.3911dd		c2 20		rep #$20	                REP #$20        ; set A long
.3911df		60		rts		                RTS
.3911e0						BMP_PARSER_DMA_SHIT_OUT
.3911e0		a2 00 00	ldx #$0000	                LDX #$0000
.3911e3						BMP_PARSER_LOOPY
.3911e3		a0 00 00	ldy #$0000	                LDY #$0000
.3911e6		e2 20		sep #$20	                SEP #$20        ; set A short
.3911e8						BMP_PARSER_LOOPX
.3911e8		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Load First Pixel Y (will be linear)
.3911ea		97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.3911ec		c8		iny		                INY
.3911ed		c4 40		cpy $40		                CPY BMP_X_SIZE              ; Transfer the First line
.3911ef		d0 f7		bne $3911e8	                BNE BMP_PARSER_LOOPX
.3911f1		20 fd 11	jsr $3911fd	                JSR BMP_PARSER_COMPUTE_Y_SRC
.3911f4		20 18 12	jsr $391218	                JSR BMP_PARSER_COMPUTE_Y_DST
.3911f7		e8		inx		                INX
.3911f8		e4 42		cpx $42		                CPX BMP_Y_SIZE
.3911fa		d0 e7		bne $3911e3	                BNE BMP_PARSER_LOOPY
.3911fc		60		rts		                RTS
.3911fd						BMP_PARSER_COMPUTE_Y_SRC
.3911fd		c2 20		rep #$20	                REP #$20        ; set A long
.3911ff		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.391201		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.391205		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.391207		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.39120b		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.39120f		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.391211		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.391215		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.391217		60		rts		                RTS
.391218						BMP_PARSER_COMPUTE_Y_DST
.391218		c2 20		rep #$20	                REP #$20        ; set A long
.39121a		18		clc		                CLC
.39121b		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.39121d		65 4e		adc $4e		                ADC SCRN_X_STRIDE        ; In Normal Circumstances, it is 640
.39121f		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.391221		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.391223		69 00 00	adc #$0000	                ADC #$0000
.391226		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.391228		60		rts		                RTS
.391229		ea		nop		ILOOP           NOP
.39122a		ea		nop		                NOP
.39122b		ea		nop		                NOP
.39122c		ea		nop		                NOP
.39122d		ea		nop		                NOP
.39122e		ea		nop		                NOP
.39122f		ea		nop		                NOP
.391230		ea		nop		                NOP
.391231		ea		nop		                NOP
.391232		ea		nop		                NOP
.391233		6b		rtl		                RTL
.391234		22 29 12 39	jsl $391229	ILOOP_1         JSL ILOOP
.391238		22 29 12 39	jsl $391229	                JSL ILOOP
.39123c		22 29 12 39	jsl $391229	                JSL ILOOP
.391240		22 29 12 39	jsl $391229	                JSL ILOOP
.391244		22 29 12 39	jsl $391229	                JSL ILOOP
.391248		22 29 12 39	jsl $391229	                JSL ILOOP
.39124c		22 29 12 39	jsl $391229	                JSL ILOOP
.391250		22 29 12 39	jsl $391229	                JSL ILOOP
.391254		22 29 12 39	jsl $391229	                JSL ILOOP
.391258		22 29 12 39	jsl $391229	                JSL ILOOP
.39125c		6b		rtl		                RTL
.39125d		22 34 12 39	jsl $391234	ILOOP_1MS       JSL ILOOP_1
.391261		6b		rtl		                RTL
.391262		e0 00 00	cpx #$0000	ILOOP_MS        CPX #0
.391265		f0 07		beq $39126e	                BEQ LOOP_MS_END
.391267		22 5d 12 39	jsl $39125d	                JSL ILOOP_1MS
.39126b		ca		dex		                DEX
.39126c		80 f4		bra $391262	                BRA ILOOP_MS
.39126e		6b		rtl		LOOP_MS_END     RTL
.39126f						IDELAY
.39126f		8b		phb		                PHB
.391270		08		php		                PHP
.391271		48		pha		                PHA             ; begin setdbr macro
.391272		08		php		                PHP
.391273		e2 20		sep #$20	                SEP #$20        ; set A short
.391275		a9 00		lda #$00	                LDA #0
.391277		48		pha		                PHA
.391278		ab		plb		                PLB
.391279		28		plp		                PLP
.39127a		68		pla		                PLA             ; end setdbr macro
.39127b		e2 20		sep #$20	                SEP #$20        ; set A short
.39127d		a9 00		lda #$00	                LDA #0                      ; Stop the timer if it's running
.39127f		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.391283		af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Enable Timer 0 Interrupts
.391287		29 fb		and #$fb	                AND #~FNX0_INT02_TMR0
.391289		8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.39128d		a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.39128f		8d 05 07	sta $0705	                STA @w TIMERFLAGS
.391292		a9 00		lda #$00	                LDA #0
.391294		8f 61 01 00	sta $000161	                STA @l TIMER0_CHARGE_L      ; Clear the comparator for count-down
.391298		8f 62 01 00	sta $000162	                STA @l TIMER0_CHARGE_M
.39129c		8f 63 01 00	sta $000163	                STA @l TIMER0_CHARGE_H
.3912a0		c2 30		rep #$30	                REP #$30        ; set A&X long
.3912a2		8a		txa		                TXA
.3912a3		8f 65 01 00	sta $000165	                STA @l TIMER0_CMP_L         ; Set the number of ticks
.3912a7		98		tya		                TYA
.3912a8		e2 20		sep #$20	                SEP #$20        ; set A short
.3912aa		8f 67 01 00	sta $000167	                STA @l TIMER0_CMP_H
.3912ae		a9 09		lda #$09	                LDA #TMR0_EN | TMR0_UPDWN   ; Enable the timer to count up
.3912b0		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.3912b4		a9 80		lda #$80	                LDA #TIMER0TRIGGER          ; Timer zero's trigger flag
.3912b6		cb		wai		loop            WAI                         ; Wait for an interrupt
.3912b7		1c 05 07	trb $0705	                TRB @w TIMERFLAGS           ; Check for the flag
.3912ba		f0 fa		beq $3912b6	                BEQ loop                    ; Keep checking until it's set
.3912bc		a9 00		lda #$00	                LDA #0                      ; Stop the timer
.3912be		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.3912c2		a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.3912c4		8d 05 07	sta $0705	                STA @w TIMERFLAGS
.3912c7		af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Disable Timer 0 Interrupts
.3912cb		09 04		ora #$04	                ORA #FNX0_INT02_TMR0
.3912cd		8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.3912d1		28		plp		                PLP
.3912d2		ab		plb		                PLB
.3912d3		6b		rtl		                RTL
.3912d4						SHOW_CREDITS
.3912d4		48		pha		                PHA
.3912d5		da		phx		                PHX
.3912d6		5a		phy		                PHY
.3912d7		08		php		                PHP
.3912d8		e2 20		sep #$20	                SEP #$20        ; set A short
.3912da		c2 10		rep #$10	                REP #$10        ; set X long
.3912dc		af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Disable the cursor
.3912e0		29 fe		and #$fe	                AND #~Vky_Cursor_Enable
.3912e2		8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.3912e6		a2 00 00	ldx #$0000	                LDX #0
.3912e9		bf 00 00 3b	lda $3b0000,x	credit_loop     LDA @lCREDITS_TEXT,X            ; Copy a byte of text
.3912ed		9f 00 a0 af	sta $afa000,x	                STA @lCS_TEXT_MEM_PTR,X
.3912f1		bf 00 18 3b	lda $3b1800,x	                LDA @lCREDITS_COLOR,X           ; Copy a byte of color
.3912f5		9f 00 c0 af	sta $afc000,x	                STA @lCS_COLOR_MEM_PTR,X
.3912f9		e8		inx		                INX
.3912fa		e0 00 20	cpx #$2000	                CPX #128 * 64
.3912fd		d0 ea		bne $3912e9	                BNE credit_loop
.3912ff		22 d6 06 39	jsl $3906d6	                JSL IGETCHW                     ; Wait for a keypress
.391303		22 79 09 39	jsl $390979	                JSL ICLRSCREEN                  ; Then clear the screen and return
.391307		22 4f 08 39	jsl $39084f	                JSL ICSRHOME                    ; Move cursor to the home position
.39130b		af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Enable the cursor
.39130f		09 01		ora #$01	                ORA #Vky_Cursor_Enable
.391311		8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.391315		28		plp		                PLP
.391316		7a		ply		                PLY
.391317		fa		plx		                PLX
.391318		68		pla		                PLA
.391319		6b		rtl		                RTL
.39131a		00		brk #		ISCINIT         BRK ;
.39131b		00		brk #		IIOINIT         BRK ;
.39131c		00		brk #		ISETLFS         BRK ; Obsolete (done in OPEN)
.39131d		00		brk #		ISETNAM         BRK ; Obsolete (done in OPEN)
.39131e		00		brk #		IOPEN           BRK ; Open a channel for reading and/or writing. Use SETLFS and SETNAM to set the channels and filename first.
.39131f		00		brk #		ICLOSE          BRK ; Close a channel
.391320		00		brk #		IGETB           BRK ; Get a byte from input channel. Return 0 if no input. Carry is set if no input.
.391321		00		brk #		IGETS           BRK ; Get a string from the input channel. NULL terminates
.391322		00		brk #		IGETLINE        BRK ; Get a line of text from input channel. CR or NULL terminates.
.391323		00		brk #		IGETFIELD       BRK ; Get a field from the input channel. Value in A, CR, or NULL terminates
.391324		00		brk #		ITRIM           BRK ; Removes spaces at beginning and end of string.
.391325		00		brk #		IPRINTC         BRK ; Print character to screen. Handles terminal commands
.391326		00		brk #		IPRINTS         BRK ; Print string to screen. Handles terminal commands
.391327		00		brk #		IPRINTF         BRK ; Print a float value
.391328		00		brk #		IPRINTI         BRK ; Prints integer value in TEMP
.391329		00		brk #		IPRINTAI        BRK ; Prints integer value in A
.39132a		00		brk #		IPUSHKEY        BRK ;
.39132b		00		brk #		IPUSHKEYS       BRK ;
.39132c		00		brk #		ISCRREADLINE    BRK ; Loads the MCMDADDR/BCMDADDR variable with the address of the current line on the screen. This is called when the RETURN key is pressed and is the first step in processing an immediate mode command.
.39132d		00		brk #		ISCRGETWORD     BRK ; Read a current word on the screen. A word ends with a space, punctuation (except _), or any control character (value < 32). Loads the address into CMPTEXT_VAL and length into CMPTEXT_LEN variables.
.39132e		6b		rtl		IRQHANDLESTUB   RTL

;******  Processing file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/../Defines/OPL3_def.asm

=$afe600					OPL3_R_BASE               = $AFE600
=$e600						OPL3_R_BASE_LL            = $E600
=$00af						OPL3_R_BASE_HL            = $00AF
=$afe601					OPL3_R_TEST               = $AFE601 ; TEST
=$afe602					OPL3_R_TIMER1             = $AFE602 ; TIMER-1
=$afe603					OPL3_R_TIMER2             = $AFE603 ; TIMER-2
=$afe604					OPL3_R_IRQ                = $AFE604 ;
=$afe605					OPL3_R_OPL3_MODE          = $AFE605 ; Set bit 0 to 1 if you want to use in OPL3 Mode
=$afe608					OPL3_R_CSM                = $AFE608 ;
=$afe620					OPL3_R_AM_VID_EG_KSR_MULT = $AFE620 ; $40..$35 (21 Registers)
=$afe640					OPL3_R_KSL_TL             = $AFE640;  $40..$55 (21 Registers)
=$afe660					OPL3_R_AR_DR              = $AFE660;  $60..$75 (21 Registers)
=$afe680					OPL3_R_SL_RR              = $AFE680;  $80..$95 (21 Registers)
=$afe6a0					OPL3_R_FNumber            = $AFE6A0;  $A0..$A8
=$afe6b0					OPL3_R_KON_BLOCK_FNumber  = $AFE6B0;  $B0..$B9
=$afe6bd					OPL3_R_DPTH_RHYTM         = $AFE6BD;  $BD
=$afe6c0					OPL3_R_FEEDBACK           = $AFE6C0;  $C0..$C9
=$afe6e0					OPL3_R_WAVE_SELECT        = $AFE6E0;  $E0..$F5
=$afe700					OPL3_L_BASE               = $AFE700
=$e700						OPL3_L_BASE_LL            = $E700
=$00af						OPL3_L_BASE_HL            = $00AF
=$afe701					OPL3_L_TEST               = $AFE701 ; TEST
=$afe702					OPL3_L_TIMER1             = $AFE702 ; TIMER-1
=$afe703					OPL3_L_TIMER2             = $AFE703 ; TIMER-2
=$afe704					OPL3_L_IRQ                = $AFE704 ;
=$afe708					OPL3_L_CSM                = $AFE708 ;
=$afe720					OPL3_L_AM_VID_EG_KSR_MULT = $AFE720 ; $40..$35 (21 Registers)
=$afe740					OPL3_L_KSL_TL             = $AFE740;  $40..$55 (21 Registers)
=$afe760					OPL3_L_AR_DR              = $AFE760;  $60..$75 (21 Registers)
=$afe780					OPL3_L_SL_RR              = $AFE780;  $80..$95 (21 Registers)
=$afe7a0					OPL3_L_FNumber            = $AFE7A0;  $A0..$A8
=$afe7b0					OPL3_L_KON_BLOCK_FNumber  = $AFE7B0;  $B0..$B9
=$afe7bd					OPL3_L_DPTH_RHYTM         = $AFE7BD;  $BD
=$afe7c0					OPL3_L_FEEDBACK           = $AFE7C0;  $C0..$C9
=$afe7e0					OPL3_L_WAVE_SELECT        = $AFE7E0;  $E0..$F5
=$80						TREMOLO    = $80
=$40						VIBRATO    = $40
=$20						SUSTAINING = $20
=$10						KSR        = $10
=$0f						MULTIPLIER = $0F
=$c0						KEY_SCALE  = $C0
=$3f						OP_LEVEL   = $3F
=$f0						ATTACK_RT  = $F0
=$0f						DECAY_RT   = $0F
=$f0						SUSTAIN_RT = $F0
=$0f						RELEASE_RT = $0F
=$0e						FEEDBACK   = $0E
=$01						ALGORITHM  = $01
=9						OPL2_NUM_CHANNELS = 9
=0						OPERATOR1 = 0
=1						OPERATOR2 = 1
=0						MODULATOR = 0
=1						CARRIER = 1
=0						FREQ_MODULATION = 0
=1						ADDITIVE_SYNTH  = 1
=$10						DRUM_BASS   = $10
=$08						DRUM_SNARE  = $08
=$04						DRUM_TOM    = $04
=$02						DRUM_CYMBAL = $02
=$01						DRUM_HI_HAT = $01
=1						NOTE_CS =   1
=2						NOTE_D =    2
=3						NOTE_DS =   3
=4						NOTE_E =    4
=5						NOTE_F =    5
=6						NOTE_FS =   6
=7						NOTE_G =    7
=8						NOTE_GS =   8
=9						NOTE_A =    9
=10						NOTE_AS =  10
=11						NOTE_B =   11
=12						NOTE_C =   12
>39132f		6b 01 81 01 98 01 b0 01		noteFNumbers    .word  $016B, $0181, $0198, $01B0, $01CA, $01E5, $0202, $0220, $0241, $0263, $0287, $02AE
>391337		ca 01 e5 01 02 02 20 02 41 02 63 02 87 02 ae 02
>391347		00 01 02 08 09 0a 10 11		registerOffsets_operator0 .byte $00, $01, $02, $08, $09, $0A, $10, $11, $12 ;initializers for operator 1 */
>39134f		12
>391350		03 04 05 0b 0c 0d 13 14		registerOffsets_operator1 .byte $03, $04, $05, $0B, $0C, $0D, $13, $14, $15 ;initializers for operator 2 */
>391358		15
>391359		10 13 14 12 15 11		drumOffsets               .byte $10, $13, $14, $12, $15, $11
>39135f		10 08 04 02 01			drumBits                  .byte $10, $08, $04, $02, $01
>391364		20 40 60 80 e0 c0		instrumentBaseRegs        .byte $20, $40, $60, $80, $E0, $C0

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Instruments.asm

>39136a		00 24 4f f2 0b 00 0e 31		INSTRUMENT_ACCORDN    .text $00, $24, $4F, $F2, $0B, $00, $0E, $31, $00, $52, $0B, $00, 'ACCORDN   '
>391372		00 52 0b 00 41 43 43 4f 52 44 4e 20 20 20
>391380		00 31 43 6e 17 01 02 22		INSTRUMENT_BAGPIPE1   .text $00, $31, $43, $6E, $17, $01, $02, $22, $05, $8B, $0C, $02, 'BAGPIPE1  '
>391388		05 8b 0c 02 42 41 47 50 49 50 45 31 20 20
>391396		00 30 00 ff a0 03 00 a3		INSTRUMENT_BAGPIPE2   .text $00, $30, $00, $FF, $A0, $03, $00, $A3, $00, $65, $0B, $02, 'BAGPIPE2  '
>39139e		00 65 0b 02 42 41 47 50 49 50 45 32 20 20
>3913ac		00 31 87 a1 11 00 08 16		INSTRUMENT_BANJO1     .text $00, $31, $87, $A1, $11, $00, $08, $16, $80, $7D, $43, $00, 'BANJO1    '
>3913b4		80 7d 43 00 42 41 4e 4a 4f 31 20 20 20 20
>3913c2		00 01 15 25 2f 00 0a 21		INSTRUMENT_BASS1      .text $00, $01, $15, $25, $2F, $00, $0A, $21, $80, $65, $6C, $00, 'BASS1     '
>3913ca		80 65 6c 00 42 41 53 53 31 20 20 20 20 20
>3913d8		00 01 1d f2 ef 00 0a 01		INSTRUMENT_BASS2      .text $00, $01, $1D, $F2, $EF, $00, $0A, $01, $00, $F5, $78, $00, 'BASS2     '
>3913e0		00 f5 78 00 42 41 53 53 32 20 20 20 20 20
>3913ee		00 c0 6d f9 01 01 0e 41		INSTRUMENT_BASSHARP   .text $00, $C0, $6D, $F9, $01, $01, $0E, $41, $00, $F2, $73, $00, 'BASSHARP  '
>3913f6		00 f2 73 00 42 41 53 53 48 41 52 50 20 20
>391404		00 30 c8 d5 19 00 0c 71		INSTRUMENT_BASSOON1   .text $00, $30, $C8, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'BASSOON1  '
>39140c		80 61 1b 00 42 41 53 53 4f 4f 4e 31 20 20
>39141a		00 c1 4f b1 53 03 06 e0		INSTRUMENT_BASSTRLG   .text $00, $C1, $4F, $B1, $53, $03, $06, $E0, $00, $12, $74, $03, 'BASSTRLG  '
>391422		00 12 74 03 42 41 53 53 54 52 4c 47 20 20
>391430		06 00 0b a8 4c 00 00 00		INSTRUMENT_BDRUM1     .text $06, $00, $0B, $A8, $4C, $00, $00, $00, $00, $00, $00, $00, 'BDRUM1    '
>391438		00 00 00 00 42 44 52 55 4d 31 20 20 20 20
>391446		00 64 db ff 01 00 04 3e		INSTRUMENT_BELLONG    .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F3, $62, $00, 'BELLONG   '
>39144e		c0 f3 62 00 42 45 4c 4c 4f 4e 47 20 20 20
>39145c		00 07 4f f2 60 00 08 12		INSTRUMENT_BELLS      .text $00, $07, $4F, $F2, $60, $00, $08, $12, $00, $F2, $72, $00, 'BELLS     '
>391464		00 f2 72 00 42 45 4c 4c 53 20 20 20 20 20
>391472		00 64 db ff 01 00 04 3e		INSTRUMENT_BELSHORT   .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F5, $F3, $00, 'BELSHORT  '
>39147a		c0 f5 f3 00 42 45 4c 53 48 4f 52 54 20 20
>391488		00 20 4b 7b 04 01 0e 21		INSTRUMENT_BNCEBASS   .text $00, $20, $4B, $7B, $04, $01, $0E, $21, $00, $F5, $72, $00, 'BNCEBASS  '
>391490		00 f5 72 00 42 4e 43 45 42 41 53 53 20 20
>39149e		00 21 16 71 ae 00 0e 21		INSTRUMENT_BRASS1     .text $00, $21, $16, $71, $AE, $00, $0E, $21, $00, $81, $9E, $00, 'BRASS1    '
>3914a6		00 81 9e 00 42 52 41 53 53 31 20 20 20 20
>3914b4		00 30 c5 52 11 00 00 31		INSTRUMENT_CBASSOON   .text $00, $30, $C5, $52, $11, $00, $00, $31, $80, $31, $2E, $00, 'CBASSOON  '
>3914bc		80 31 2e 00 43 42 41 53 53 4f 4f 4e 20 20
>3914ca		00 33 87 01 10 00 08 14		INSTRUMENT_CELESTA    .text $00, $33, $87, $01, $10, $00, $08, $14, $80, $7D, $33, $00, 'CELESTA   '
>3914d2		80 7d 33 00 43 45 4c 45 53 54 41 20 20 20
>3914e0		00 32 16 73 24 00 0e 21		INSTRUMENT_CLAR1      .text $00, $32, $16, $73, $24, $00, $0E, $21, $80, $75, $57, $00, 'CLAR1     '
>3914e8		80 75 57 00 43 4c 41 52 31 20 20 20 20 20
>3914f6		00 31 1c 41 1b 00 0c 60		INSTRUMENT_CLAR2      .text $00, $31, $1C, $41, $1B, $00, $0C, $60, $80, $42, $3B, $00, 'CLAR2     '
>3914fe		80 42 3b 00 43 4c 41 52 32 20 20 20 20 20
>39150c		00 32 9a 51 1b 00 0c 61		INSTRUMENT_CLARINET   .text $00, $32, $9A, $51, $1B, $00, $0C, $61, $82, $A2, $3B, $00, 'CLARINET  '
>391514		82 a2 3b 00 43 4c 41 52 49 4e 45 54 20 20
>391522		00 11 0d f2 01 00 0a 15		INSTRUMENT_CLAVECIN   .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'CLAVECIN  '
>39152a		0d f2 b1 00 43 4c 41 56 45 43 49 4e 20 20
>391538		00 00 02 f0 ff 00 06 11		INSTRUMENT_CROMORNE   .text $00, $00, $02, $F0, $FF, $00, $06, $11, $80, $F0, $FF, $00, 'CROMORNE  '
>391540		80 f0 ff 00 43 52 4f 4d 4f 52 4e 45 20 20
>39154e		09 01 00 f5 b5 00 00 00		INSTRUMENT_CYMBAL1    .text $09, $01, $00, $F5, $B5, $00, $00, $00, $00, $00, $00, $00, 'CYMBAL1   '
>391556		00 00 00 00 43 59 4d 42 41 4c 31 20 20 20
>391564		00 05 8a f0 7b 00 08 01		INSTRUMENT_ELCLAV1    .text $00, $05, $8A, $F0, $7B, $00, $08, $01, $80, $F4, $7B, $00, 'ELCLAV1   '
>39156c		80 f4 7b 00 45 4c 43 4c 41 56 31 20 20 20
>39157a		00 01 49 f1 53 01 06 11		INSTRUMENT_ELCLAV2    .text $00, $01, $49, $F1, $53, $01, $06, $11, $00, $F1, $74, $02, 'ELCLAV2   '
>391582		00 f1 74 02 45 4c 43 4c 41 56 32 20 20 20
>391590		00 e0 6d 57 04 01 0e 61		INSTRUMENT_ELECFL     .text $00, $E0, $6D, $57, $04, $01, $0E, $61, $00, $67, $7D, $00, 'ELECFL    '
>391598		00 67 7d 00 45 4c 45 43 46 4c 20 20 20 20
>3915a6		00 13 97 9a 12 02 0e 91		INSTRUMENT_ELECVIBE   .text $00, $13, $97, $9A, $12, $02, $0E, $91, $80, $9B, $11, $00, 'ELECVIBE  '
>3915ae		80 9b 11 00 45 4c 45 43 56 49 42 45 20 20
>3915bc		00 f1 01 97 17 00 08 21		INSTRUMENT_ELGUIT1    .text $00, $F1, $01, $97, $17, $00, $08, $21, $0D, $F1, $18, $00, 'ELGUIT1   '
>3915c4		0d f1 18 00 45 4c 47 55 49 54 31 20 20 20
>3915d2		00 13 96 ff 21 00 0a 11		INSTRUMENT_ELGUIT2    .text $00, $13, $96, $FF, $21, $00, $0A, $11, $80, $FF, $03, $00, 'ELGUIT2   '
>3915da		80 ff 03 00 45 4c 47 55 49 54 32 20 20 20
>3915e8		00 07 8f 82 7d 00 0c 14		INSTRUMENT_ELGUIT3    .text $00, $07, $8F, $82, $7D, $00, $0C, $14, $80, $82, $7D, $00, 'ELGUIT3   '
>3915f0		80 82 7d 00 45 4c 47 55 49 54 33 20 20 20
>3915fe		00 05 8f da 15 00 0a 01		INSTRUMENT_ELGUIT4    .text $00, $05, $8F, $DA, $15, $00, $0A, $01, $80, $F9, $14, $02, 'ELGUIT4   '
>391606		80 f9 14 02 45 4c 47 55 49 54 34 20 20 20
>391614		00 b2 cd 91 2a 02 09 b1		INSTRUMENT_ELORGAN1   .text $00, $B2, $CD, $91, $2A, $02, $09, $B1, $80, $91, $2A, $01, 'ELORGAN1  '
>39161c		80 91 2a 01 45 4c 4f 52 47 41 4e 31 20 20
>39162a		00 01 4f f1 50 00 06 01		INSTRUMENT_ELPIANO1   .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'ELPIANO1  '
>391632		04 d2 7c 00 45 4c 50 49 41 4e 4f 31 20 20
>391640		00 02 22 f2 13 00 0e 02		INSTRUMENT_ELPIANO2   .text $00, $02, $22, $F2, $13, $00, $0E, $02, $00, $F5, $43, $00, 'ELPIANO2  '
>391648		00 f5 43 00 45 4c 50 49 41 4e 4f 32 20 20
>391656		00 81 63 f3 58 00 00 01		INSTRUMENT_EPIANO1A   .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'EPIANO1A  '
>39165e		80 f2 58 00 45 50 49 41 4e 4f 31 41 20 20
>39166c		00 07 1f f5 fa 00 0e 01		INSTRUMENT_EPIANO1B   .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'EPIANO1B  '
>391674		57 f5 fa 00 45 50 49 41 4e 4f 31 42 20 20
>391682		00 21 83 74 17 00 07 a2		INSTRUMENT_FLUTE      .text $00, $21, $83, $74, $17, $00, $07, $A2, $8D, $65, $17, $00, 'FLUTE     '
>39168a		8d 65 17 00 46 4c 55 54 45 20 20 20 20 20
>391698		00 a1 27 74 8f 00 02 a1		INSTRUMENT_FLUTE1     .text $00, $A1, $27, $74, $8F, $00, $02, $A1, $80, $65, $2A, $00, 'FLUTE1    '
>3916a0		80 65 2a 00 46 4c 55 54 45 31 20 20 20 20
>3916ae		00 e0 ec 6e 8f 00 0e 61		INSTRUMENT_FLUTE2     .text $00, $E0, $EC, $6E, $8F, $00, $0E, $61, $00, $65, $2A, $00, 'FLUTE2    '
>3916b6		00 65 2a 00 46 4c 55 54 45 32 20 20 20 20
>3916c4		00 21 9f 53 5a 00 0c 21		INSTRUMENT_FRHORN1    .text $00, $21, $9F, $53, $5A, $00, $0C, $21, $80, $AA, $1A, $00, 'FRHORN1   '
>3916cc		80 aa 1a 00 46 52 48 4f 52 4e 31 20 20 20
>3916da		00 20 8e a5 8f 02 06 21		INSTRUMENT_FRHORN2    .text $00, $20, $8E, $A5, $8F, $02, $06, $21, $00, $36, $3D, $00, 'FRHORN2   '
>3916e2		00 36 3d 00 46 52 48 4f 52 4e 32 20 20 20
>3916f0		00 f0 18 55 ef 02 00 e0		INSTRUMENT_FSTRP1     .text $00, $F0, $18, $55, $EF, $02, $00, $E0, $80, $87, $1E, $03, 'FSTRP1    '
>3916f8		80 87 1e 03 46 53 54 52 50 31 20 20 20 20
>391706		00 70 16 55 2f 02 0c e0		INSTRUMENT_FSTRP2     .text $00, $70, $16, $55, $2F, $02, $0C, $E0, $80, $87, $1E, $03, 'FSTRP2    '
>39170e		80 87 1e 03 46 53 54 52 50 32 20 20 20 20
>39171c		00 f1 00 97 13 00 0a 25		INSTRUMENT_FUZGUIT1   .text $00, $F1, $00, $97, $13, $00, $0A, $25, $0D, $F1, $18, $01, 'FUZGUIT1  '
>391724		0d f1 18 01 46 55 5a 47 55 49 54 31 20 20
>391732		00 31 48 f1 53 00 06 32		INSTRUMENT_FUZGUIT2   .text $00, $31, $48, $F1, $53, $00, $06, $32, $00, $F2, $27, $02, 'FUZGUIT2  '
>39173a		00 f2 27 02 46 55 5a 47 55 49 54 32 20 20
>391748		00 01 11 f2 1f 00 0a 01		INSTRUMENT_GUITAR1    .text $00, $01, $11, $F2, $1F, $00, $0A, $01, $00, $F5, $88, $00, 'GUITAR1   '
>391750		00 f5 88 00 47 55 49 54 41 52 31 20 20 20
>39175e		00 02 29 f5 75 00 00 01		INSTRUMENT_HARP1      .text $00, $02, $29, $F5, $75, $00, $00, $01, $83, $F2, $F3, $00, 'HARP1     '
>391766		83 f2 f3 00 48 41 52 50 31 20 20 20 20 20
>391774		00 02 99 f5 55 00 00 01		INSTRUMENT_HARP2      .text $00, $02, $99, $F5, $55, $00, $00, $01, $80, $F6, $53, $00, 'HARP2     '
>39177c		80 f6 53 00 48 41 52 50 32 20 20 20 20 20
>39178a		00 02 57 f5 56 00 00 01		INSTRUMENT_HARP3      .text $00, $02, $57, $F5, $56, $00, $00, $01, $80, $F6, $54, $00, 'HARP3     '
>391792		80 f6 54 00 48 41 52 50 33 20 20 20 20 20
>3917a0		00 02 29 f5 75 00 00 01		INSTRUMENT_HARPE1     .text $00, $02, $29, $F5, $75, $00, $00, $01, $03, $F2, $F3, $00, 'HARPE1    '
>3917a8		03 f2 f3 00 48 41 52 50 45 31 20 20 20 20
>3917b6		00 32 87 a1 10 00 08 16		INSTRUMENT_HARPSI1    .text $00, $32, $87, $A1, $10, $00, $08, $16, $80, $7D, $33, $00, 'HARPSI1   '
>3917be		80 7d 33 00 48 41 52 50 53 49 31 20 20 20
>3917cc		00 33 87 a1 10 00 06 15		INSTRUMENT_HARPSI2    .text $00, $33, $87, $A1, $10, $00, $06, $15, $80, $7D, $43, $00, 'HARPSI2   '
>3917d4		80 7d 43 00 48 41 52 50 53 49 32 20 20 20
>3917e2		00 35 84 a8 10 00 08 18		INSTRUMENT_HARPSI3    .text $00, $35, $84, $A8, $10, $00, $08, $18, $80, $7D, $33, $00, 'HARPSI3   '
>3917ea		80 7d 33 00 48 41 52 50 53 49 33 20 20 20
>3917f8		00 11 0d f2 01 00 0a 15		INSTRUMENT_HARPSI4    .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'HARPSI4   '
>391800		0d f2 b1 00 48 41 52 50 53 49 34 20 20 20
>39180e		00 36 87 8a 00 00 08 1a		INSTRUMENT_HARPSI5    .text $00, $36, $87, $8A, $00, $00, $08, $1A, $80, $7F, $33, $00, 'HARPSI5   '
>391816		80 7f 33 00 48 41 52 50 53 49 35 20 20 20
>391824		00 f0 00 1e 11 01 08 e2		INSTRUMENT_HELICPTR   .text $00, $F0, $00, $1E, $11, $01, $08, $E2, $C0, $11, $11, $01, 'HELICPTR  '
>39182c		c0 11 11 01 48 45 4c 49 43 50 54 52 20 20
>39183a		0a 01 00 f7 b5 00 00 00		INSTRUMENT_HIHAT1     .text $0A, $01, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'HIHAT1    '
>391842		00 00 00 00 48 49 48 41 54 31 20 20 20 20
>391850		0a 01 03 da 18 00 00 00		INSTRUMENT_HIHAT2     .text $0A, $01, $03, $DA, $18, $00, $00, $00, $00, $00, $00, $00, 'HIHAT2    '
>391858		00 00 00 00 48 49 48 41 54 32 20 20 20 20
>391866		00 87 4d 78 42 00 0a 94		INSTRUMENT_JAVAICAN   .text $00, $87, $4D, $78, $42, $00, $0A, $94, $00, $85, $54, $00, 'JAVAICAN  '
>39186e		00 85 54 00 4a 41 56 41 49 43 41 4e 20 20
>39187c		00 03 5e 85 51 01 0e 11		INSTRUMENT_JAZZGUIT   .text $00, $03, $5E, $85, $51, $01, $0E, $11, $00, $D2, $71, $00, 'JAZZGUIT  '
>391884		00 d2 71 00 4a 41 5a 5a 47 55 49 54 20 20
>391892		00 00 50 f2 70 00 0e 13		INSTRUMENT_JEWSHARP   .text $00, $00, $50, $F2, $70, $00, $0E, $13, $00, $F2, $72, $00, 'JEWSHARP  '
>39189a		00 f2 72 00 4a 45 57 53 48 41 52 50 20 20
>3918a8		00 00 02 f0 fa 01 06 11		INSTRUMENT_KEYBRD1    .text $00, $00, $02, $F0, $FA, $01, $06, $11, $80, $F2, $FA, $01, 'KEYBRD1   '
>3918b0		80 f2 fa 01 4b 45 59 42 52 44 31 20 20 20
>3918be		00 01 8f f2 bd 00 08 14		INSTRUMENT_KEYBRD2    .text $00, $01, $8F, $F2, $BD, $00, $08, $14, $80, $82, $BD, $00, 'KEYBRD2   '
>3918c6		80 82 bd 00 4b 45 59 42 52 44 32 20 20 20
>3918d4		00 01 00 f0 f0 00 00 e4		INSTRUMENT_KEYBRD3    .text $00, $01, $00, $F0, $F0, $00, $00, $E4, $03, $F3, $36, $00, 'KEYBRD3   '
>3918dc		03 f3 36 00 4b 45 59 42 52 44 33 20 20 20
>3918ea		09 e6 00 25 b5 00 00 00		INSTRUMENT_LASER      .text $09, $E6, $00, $25, $B5, $00, $00, $00, $00, $00, $00, $00, 'LASER     '
>3918f2		00 00 00 00 4c 41 53 45 52 20 20 20 20 20
>391900		00 32 44 f8 ff 00 0e 11		INSTRUMENT_LOGDRUM1   .text $00, $32, $44, $F8, $FF, $00, $0E, $11, $00, $F5, $7F, $00, 'LOGDRUM1  '
>391908		00 f5 7f 00 4c 4f 47 44 52 55 4d 31 20 20
>391916		00 05 4e da 25 00 0a 01		INSTRUMENT_MARIMBA1   .text $00, $05, $4E, $DA, $25, $00, $0A, $01, $00, $F9, $15, $00, 'MARIMBA1  '
>39191e		00 f9 15 00 4d 41 52 49 4d 42 41 31 20 20
>39192c		00 85 4e da 15 00 0a 81		INSTRUMENT_MARIMBA2   .text $00, $85, $4E, $DA, $15, $00, $0A, $81, $80, $F9, $13, $00, 'MARIMBA2  '
>391934		80 f9 13 00 4d 41 52 49 4d 42 41 32 20 20
>391942		00 30 00 fe 11 01 08 ae		INSTRUMENT_MDRNPHON   .text $00, $30, $00, $FE, $11, $01, $08, $AE, $C0, $F1, $19, $01, 'MDRNPHON  '
>39194a		c0 f1 19 01 4d 44 52 4e 50 48 4f 4e 20 20
>391958		07 0c 00 c8 b6 01 00 00		INSTRUMENT_MLTRDRUM   .text $07, $0C, $00, $C8, $B6, $01, $00, $00, $00, $00, $00, $00, 'MLTRDRUM  '
>391960		00 00 00 00 4d 4c 54 52 44 52 55 4d 20 20
>39196e		00 20 90 f5 9e 02 0c 11		INSTRUMENT_MOOGSYNT   .text $00, $20, $90, $F5, $9E, $02, $0C, $11, $00, $F4, $5B, $03, 'MOOGSYNT  '
>391976		00 f4 5b 03 4d 4f 4f 47 53 59 4e 54 20 20
>391984		00 0e 40 d1 53 00 0e 0e		INSTRUMENT_NOISE1     .text $00, $0E, $40, $D1, $53, $00, $0E, $0E, $00, $F2, $7F, $03, 'NOISE1    '
>39198c		00 f2 7f 03 4e 4f 49 53 45 31 20 20 20 20
>39199a		00 b1 c5 6e 17 00 02 22		INSTRUMENT_OBOE1      .text $00, $B1, $C5, $6E, $17, $00, $02, $22, $05, $8B, $0E, $00, 'OBOE1     '
>3919a2		05 8b 0e 00 4f 42 4f 45 31 20 20 20 20 20
>3919b0		00 65 d2 81 03 00 02 71		INSTRUMENT_ORGAN1     .text $00, $65, $D2, $81, $03, $00, $02, $71, $80, $F1, $05, $00, 'ORGAN1    '
>3919b8		80 f1 05 00 4f 52 47 41 4e 31 20 20 20 20
>3919c6		00 24 80 ff 0f 00 01 21		INSTRUMENT_ORGAN2     .text $00, $24, $80, $FF, $0F, $00, $01, $21, $80, $FF, $0F, $00, 'ORGAN2    '
>3919ce		80 ff 0f 00 4f 52 47 41 4e 32 20 20 20 20
>3919dc		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3     .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $80, $F0, $1F, $00, 'ORGAN3    '
>3919e4		80 f0 1f 00 4f 52 47 41 4e 33 20 20 20 20
>3919f2		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3A    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $8D, $F0, $13, $00, 'ORGAN3A   '
>3919fa		8d f0 13 00 4f 52 47 41 4e 33 41 20 20 20
>391a08		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3B    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $92, $F0, $12, $00, 'ORGAN3B   '
>391a10		92 f0 12 00 4f 52 47 41 4e 33 42 20 20 20
>391a1e		00 0c 00 f8 b5 00 01 00		INSTRUMENT_ORGNPERC   .text $00, $0C, $00, $F8, $B5, $00, $01, $00, $00, $D6, $4F, $00, 'ORGNPERC  '
>391a26		00 d6 4f 00 4f 52 47 4e 50 45 52 43 20 20
>391a34		00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE1     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F1, $B2, $00, 'PHONE1    '
>391a3c		08 f1 b2 00 50 48 4f 4e 45 31 20 20 20 20
>391a4a		00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE2     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $0A, $F1, $B4, $00, 'PHONE2    '
>391a52		0a f1 b4 00 50 48 4f 4e 45 32 20 20 20 20
>391a60		00 81 63 f3 58 00 00 01		INSTRUMENT_PIAN1A     .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'PIAN1A    '
>391a68		80 f2 58 00 50 49 41 4e 31 41 20 20 20 20
>391a76		00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1B     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $26, $F5, $FA, $00, 'PIAN1B    '
>391a7e		26 f5 fa 00 50 49 41 4e 31 42 20 20 20 20
>391a8c		00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1C     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'PIAN1C    '
>391a94		57 f5 fa 00 50 49 41 4e 31 43 20 20 20 20
>391aa2		00 03 4f f1 53 00 06 17		INSTRUMENT_PIANO      .text $00, $03, $4F, $F1, $53, $00, $06, $17, $00, $F2, $74, $00, 'PIANO     '
>391aaa		00 f2 74 00 50 49 41 4e 4f 20 20 20 20 20
>391ab8		00 01 4f f1 53 00 06 11		INSTRUMENT_PIANO1     .text $00, $01, $4F, $F1, $53, $00, $06, $11, $00, $D2, $74, $00, 'PIANO1    '
>391ac0		00 d2 74 00 50 49 41 4e 4f 31 20 20 20 20
>391ace		00 41 9d f2 51 00 06 13		INSTRUMENT_PIANO2     .text $00, $41, $9D, $F2, $51, $00, $06, $13, $00, $F2, $F1, $00, 'PIANO2    '
>391ad6		00 f2 f1 00 50 49 41 4e 4f 32 20 20 20 20
>391ae4		00 01 4f f1 50 00 06 01		INSTRUMENT_PIANO3     .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'PIANO3    '
>391aec		04 d2 7c 00 50 49 41 4e 4f 33 20 20 20 20
>391afa		00 01 4d f1 60 00 08 11		INSTRUMENT_PIANO4     .text $00, $01, $4D, $F1, $60, $00, $08, $11, $00, $D2, $7B, $00, 'PIANO4    '
>391b02		00 d2 7b 00 50 49 41 4e 4f 34 20 20 20 20
>391b10		00 03 4f f1 53 00 06 17		INSTRUMENT_PIANOBEL   .text $00, $03, $4F, $F1, $53, $00, $06, $17, $03, $F2, $74, $00, 'PIANOBEL  '
>391b18		03 f2 74 00 50 49 41 4e 4f 42 45 4c 20 20
>391b26		00 01 cf f1 53 00 02 12		INSTRUMENT_PIANOF     .text $00, $01, $CF, $F1, $53, $00, $02, $12, $00, $F2, $83, $00, 'PIANOF    '
>391b2e		00 f2 83 00 50 49 41 4e 4f 46 20 20 20 20
>391b3c		00 10 00 75 93 01 00 01		INSTRUMENT_POPBASS1   .text $00, $10, $00, $75, $93, $01, $00, $01, $00, $F5, $82, $01, 'POPBASS1  '
>391b44		00 f5 82 01 50 4f 50 42 41 53 53 31 20 20
>391b52		07 0c 00 c7 b4 00 00 00		INSTRUMENT_RKSNARE1   .text $07, $0C, $00, $C7, $B4, $00, $00, $00, $00, $00, $00, $00, 'RKSNARE1  '
>391b5a		00 00 00 00 52 4b 53 4e 41 52 45 31 20 20
>391b68		00 01 4f 71 53 00 0a 12		INSTRUMENT_SAX1       .text $00, $01, $4F, $71, $53, $00, $0A, $12, $00, $52, $7C, $00, 'SAX1      '
>391b70		00 52 7c 00 53 41 58 31 20 20 20 20 20 20
>391b7e		00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH    .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH   '
>391b86		00 5c dc 00 53 43 52 41 54 43 48 20 20 20
>391b94		00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH4   .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH4  '
>391b9c		00 5c dc 00 53 43 52 41 54 43 48 34 20 20
>391baa		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SDRUM2     .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SDRUM2    '
>391bb2		00 f6 b4 00 53 44 52 55 4d 32 20 20 20 20
>391bc0		00 e4 0e ff 3f 01 00 c0		INSTRUMENT_SHRTVIBE   .text $00, $E4, $0E, $FF, $3F, $01, $00, $C0, $00, $F3, $07, $00, 'SHRTVIBE  '
>391bc8		00 f3 07 00 53 48 52 54 56 49 42 45 20 20
>391bd6		00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR1     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $00, 'SITAR1    '
>391bde		40 f1 53 00 53 49 54 41 52 31 20 20 20 20
>391bec		00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR2     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $01, 'SITAR2    '
>391bf4		40 f1 53 01 53 49 54 41 52 32 20 20 20 20
>391c02		00 61 0c 81 03 00 08 71		INSTRUMENT_SNAKEFL    .text $00, $61, $0C, $81, $03, $00, $08, $71, $80, $61, $0C, $00, 'SNAKEFL   '
>391c0a		80 61 0c 00 53 4e 41 4b 45 46 4c 20 20 20
>391c18		07 0c 00 f8 b5 00 00 00		INSTRUMENT_SNARE1     .text $07, $0C, $00, $F8, $B5, $00, $00, $00, $00, $00, $00, $00, 'SNARE1    '
>391c20		00 00 00 00 53 4e 41 52 45 31 20 20 20 20
>391c2e		00 06 00 f0 f0 00 0e c4		INSTRUMENT_SNRSUST    .text $00, $06, $00, $F0, $F0, $00, $0E, $C4, $03, $C4, $34, $00, 'SNRSUST   '
>391c36		03 c4 34 00 53 4e 52 53 55 53 54 20 20 20
>391c44		00 70 1c 51 03 02 0e 20		INSTRUMENT_SOLOVLN    .text $00, $70, $1C, $51, $03, $02, $0E, $20, $00, $54, $67, $02, 'SOLOVLN   '
>391c4c		00 54 67 02 53 4f 4c 4f 56 4c 4e 20 20 20
>391c5a		00 01 46 f1 83 00 06 61		INSTRUMENT_STEELGT1   .text $00, $01, $46, $F1, $83, $00, $06, $61, $03, $31, $86, $00, 'STEELGT1  '
>391c62		03 31 86 00 53 54 45 45 4c 47 54 31 20 20
>391c70		00 01 47 f1 83 00 06 61		INSTRUMENT_STEELGT2   .text $00, $01, $47, $F1, $83, $00, $06, $61, $03, $91, $86, $00, 'STEELGT2  '
>391c78		03 91 86 00 53 54 45 45 4c 47 54 32 20 20
>391c86		00 b1 8b 71 11 00 06 61		INSTRUMENT_STRINGS1   .text $00, $B1, $8B, $71, $11, $00, $06, $61, $40, $42, $15, $01, 'STRINGS1  '
>391c8e		40 42 15 01 53 54 52 49 4e 47 53 31 20 20
>391c9c		00 e1 4f b1 d3 03 06 21		INSTRUMENT_STRNLONG   .text $00, $E1, $4F, $B1, $D3, $03, $06, $21, $00, $12, $74, $01, 'STRNLONG  '
>391ca4		00 12 74 01 53 54 52 4e 4c 4f 4e 47 20 20
>391cb2		00 55 97 2a 02 00 00 12		INSTRUMENT_SYN1       .text $00, $55, $97, $2A, $02, $00, $00, $12, $80, $42, $F3, $00, 'SYN1      '
>391cba		80 42 f3 00 53 59 4e 31 20 20 20 20 20 20
>391cc8		00 13 97 9a 12 00 0e 11		INSTRUMENT_SYN2       .text $00, $13, $97, $9A, $12, $00, $0E, $11, $80, $9B, $14, $00, 'SYN2      '
>391cd0		80 9b 14 00 53 59 4e 32 20 20 20 20 20 20
>391cde		00 11 8a f1 11 00 06 01		INSTRUMENT_SYN3       .text $00, $11, $8A, $F1, $11, $00, $06, $01, $40, $F1, $B3, $00, 'SYN3      '
>391ce6		40 f1 b3 00 53 59 4e 33 20 20 20 20 20 20
>391cf4		00 21 0d e9 3a 00 0a 22		INSTRUMENT_SYN4       .text $00, $21, $0D, $E9, $3A, $00, $0A, $22, $80, $65, $6C, $00, 'SYN4      '
>391cfc		80 65 6c 00 53 59 4e 34 20 20 20 20 20 20
>391d0a		00 01 4f 71 53 00 06 19		INSTRUMENT_SYN5       .text $00, $01, $4F, $71, $53, $00, $06, $19, $00, $52, $7C, $00, 'SYN5      '
>391d12		00 52 7c 00 53 59 4e 35 20 20 20 20 20 20
>391d20		00 24 0f 41 7e 00 0a 21		INSTRUMENT_SYN6       .text $00, $24, $0F, $41, $7E, $00, $0A, $21, $00, $F1, $5E, $00, 'SYN6      '
>391d28		00 f1 5e 00 53 59 4e 36 20 20 20 20 20 20
>391d36		00 07 87 f0 05 00 04 01		INSTRUMENT_SYN9       .text $00, $07, $87, $F0, $05, $00, $04, $01, $80, $F0, $05, $00, 'SYN9      '
>391d3e		80 f0 05 00 53 59 4e 39 20 20 20 20 20 20
>391d4c		00 26 03 e0 f0 00 08 1e		INSTRUMENT_SYNBAL1    .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'SYNBAL1   '
>391d54		00 ff 31 00 53 59 4e 42 41 4c 31 20 20 20
>391d62		00 28 03 e0 f0 00 04 13		INSTRUMENT_SYNBAL2    .text $00, $28, $03, $E0, $F0, $00, $04, $13, $00, $E8, $11, $00, 'SYNBAL2   '
>391d6a		00 e8 11 00 53 59 4e 42 41 4c 32 20 20 20
>391d78		00 30 88 d5 19 00 0c 71		INSTRUMENT_SYNBASS1   .text $00, $30, $88, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'SYNBASS1  '
>391d80		80 61 1b 00 53 59 4e 42 41 53 53 31 20 20
>391d8e		00 81 86 65 01 00 0c 11		INSTRUMENT_SYNBASS2   .text $00, $81, $86, $65, $01, $00, $0C, $11, $00, $32, $74, $00, 'SYNBASS2  '
>391d96		00 32 74 00 53 59 4e 42 41 53 53 32 20 20
>391da4		00 81 83 65 05 00 0a 51		INSTRUMENT_SYNBASS4   .text $00, $81, $83, $65, $05, $00, $0A, $51, $00, $32, $74, $00, 'SYNBASS4  '
>391dac		00 32 74 00 53 59 4e 42 41 53 53 34 20 20
>391dba		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR1    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F8, $B6, $00, 'SYNSNR1   '
>391dc2		00 f8 b6 00 53 59 4e 53 4e 52 31 20 20 20
>391dd0		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR2    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SYNSNR2   '
>391dd8		00 f6 b4 00 53 59 4e 53 4e 52 32 20 20 20
>391de6		00 8f 81 ef 01 00 04 01		INSTRUMENT_TINCAN1    .text $00, $8F, $81, $EF, $01, $00, $04, $01, $00, $98, $F1, $00, 'TINCAN1   '
>391dee		00 98 f1 00 54 49 4e 43 41 4e 31 20 20 20
>391dfc		08 04 00 f7 b5 00 00 00		INSTRUMENT_TOM1       .text $08, $04, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'TOM1      '
>391e04		00 00 00 00 54 4f 4d 31 20 20 20 20 20 20
>391e12		08 02 00 c8 97 00 00 00		INSTRUMENT_TOM2       .text $08, $02, $00, $C8, $97, $00, $00, $00, $00, $00, $00, $00, 'TOM2      '
>391e1a		00 00 00 00 54 4f 4d 32 20 20 20 20 20 20
>391e28		00 17 4f f2 61 00 08 12		INSTRUMENT_TRAINBEL   .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F2, $74, $00, 'TRAINBEL  '
>391e30		08 f2 74 00 54 52 41 49 4e 42 45 4c 20 20
>391e3e		00 26 03 e0 f0 00 08 1e		INSTRUMENT_TRIANGLE   .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'TRIANGLE  '
>391e46		00 ff 31 00 54 52 49 41 4e 47 4c 45 20 20
>391e54		00 b1 1c 41 1f 00 0e 61		INSTRUMENT_TROMB1     .text $00, $B1, $1C, $41, $1F, $00, $0E, $61, $80, $92, $3B, $00, 'TROMB1    '
>391e5c		80 92 3b 00 54 52 4f 4d 42 31 20 20 20 20
>391e6a		00 21 1c 53 1d 00 0c 61		INSTRUMENT_TROMB2     .text $00, $21, $1C, $53, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TROMB2    '
>391e72		80 52 3b 00 54 52 4f 4d 42 32 20 20 20 20
>391e80		00 31 1c 41 0b 00 0e 61		INSTRUMENT_TRUMPET1   .text $00, $31, $1C, $41, $0B, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET1  '
>391e88		80 92 3b 00 54 52 55 4d 50 45 54 31 20 20
>391e96		00 31 1c 23 1d 00 0c 61		INSTRUMENT_TRUMPET2   .text $00, $31, $1C, $23, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TRUMPET2  '
>391e9e		80 52 3b 00 54 52 55 4d 50 45 54 32 20 20
>391eac		00 31 1c 41 01 00 0e 61		INSTRUMENT_TRUMPET3   .text $00, $31, $1C, $41, $01, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET3  '
>391eb4		80 92 3b 00 54 52 55 4d 50 45 54 33 20 20
>391ec2		00 31 1c 41 0b 00 0c 61		INSTRUMENT_TRUMPET4   .text $00, $31, $1C, $41, $0B, $00, $0C, $61, $80, $92, $3B, $00, 'TRUMPET4  '
>391eca		80 92 3b 00 54 52 55 4d 50 45 54 34 20 20
>391ed8		00 21 19 43 8c 00 0c 21		INSTRUMENT_TUBA1      .text $00, $21, $19, $43, $8C, $00, $0C, $21, $80, $85, $2F, $00, 'TUBA1     '
>391ee0		80 85 2f 00 54 55 42 41 31 20 20 20 20 20
>391eee		00 84 53 f5 33 00 06 a0		INSTRUMENT_VIBRA1     .text $00, $84, $53, $F5, $33, $00, $06, $A0, $80, $FD, $25, $00, 'VIBRA1    '
>391ef6		80 fd 25 00 56 49 42 52 41 31 20 20 20 20
>391f04		00 06 73 f6 54 00 00 81		INSTRUMENT_VIBRA2     .text $00, $06, $73, $F6, $54, $00, $00, $81, $03, $F2, $B3, $00, 'VIBRA2    '
>391f0c		03 f2 b3 00 56 49 42 52 41 32 20 20 20 20
>391f1a		00 93 97 aa 12 02 0e 91		INSTRUMENT_VIBRA3     .text $00, $93, $97, $AA, $12, $02, $0E, $91, $80, $AC, $21, $00, 'VIBRA3    '
>391f22		80 ac 21 00 56 49 42 52 41 33 20 20 20 20
>391f30		00 31 1c 51 03 00 0e 61		INSTRUMENT_VIOLIN1    .text $00, $31, $1C, $51, $03, $00, $0E, $61, $80, $54, $67, $00, 'VIOLIN1   '
>391f38		80 54 67 00 56 49 4f 4c 49 4e 31 20 20 20
>391f46		00 e1 88 62 29 00 0c 22		INSTRUMENT_VIOLIN2    .text $00, $E1, $88, $62, $29, $00, $0C, $22, $80, $53, $2C, $00, 'VIOLIN2   '
>391f4e		80 53 2c 00 56 49 4f 4c 49 4e 32 20 20 20
>391f5c		00 e1 88 64 29 00 06 22		INSTRUMENT_VIOLIN3    .text $00, $E1, $88, $64, $29, $00, $06, $22, $83, $53, $2C, $00, 'VIOLIN3   '
>391f64		83 53 2c 00 56 49 4f 4c 49 4e 33 20 20 20
>391f72		00 31 9c f1 f9 00 0e 31		INSTRUMENT_VLNPIZZ1   .text $00, $31, $9C, $F1, $F9, $00, $0E, $31, $80, $F7, $E6, $00, 'VLNPIZZ1  '
>391f7a		80 f7 e6 00 56 4c 4e 50 49 5a 5a 31 20 20
>391f88		00 00 02 00 f0 00 0e 14		INSTRUMENT_WAVE       .text $00, $00, $02, $00, $F0, $00, $0E, $14, $80, $1B, $A2, $00, 'WAVE      '
>391f90		80 1b a2 00 57 41 56 45 20 20 20 20 20 20
>391f9e		00 11 2d c8 2f 00 0c 31		INSTRUMENT_XYLO1      .text $00, $11, $2D, $C8, $2F, $00, $0C, $31, $00, $F5, $F5, $00, 'XYLO1     '
>391fa6		00 f5 f5 00 58 59 4c 4f 31 20 20 20 20 20
>391fb4		06 2e 00 ff 0f 00 00 00		INSTRUMENT_XYLO2      .text $06, $2E, $00, $FF, $0F, $00, $00, $00, $00, $00, $00, $00, 'XYLO2     '
>391fbc		00 00 00 00 58 59 4c 4f 32 20 20 20 20 20
>391fca		00 06 00 ff f0 00 0e c4		INSTRUMENT_XYLO3      .text $00, $06, $00, $FF, $F0, $00, $0E, $C4, $00, $F8, $B5, $00, 'XYLO3     '
>391fd2		00 f8 b5 00 58 59 4c 4f 33 20 20 20 20 20

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Midi_Drums.asm

>391fe0		00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP2         .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>391fe8		00 87 fa 00
>391fec		00 01 00 78 97 09 00 02		DRUMINS_SCRATCH1      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>391ff4		00 88 98 03
>391ff8		00 01 00 78 97 09 00 02		DRUMINS_SCRATCH2      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>392000		00 88 98 03
>392004		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT2      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>39200c		00 f9 69 00
>392010		00 00 00 f8 6c 01 00 0e		DRUMINS_HIQ           .text $00, $00, $00, $F8, $6C, $01, $00, $0E, $80, $E8, $4A, $00
>392018		80 e8 4a 00
>39201c		00 25 1b fa f2 01 00 12		DRUMINS_WOODBLOK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>392024		00 f6 9a 00
>392028		00 06 03 f4 44 00 01 01		DRUMINS_GLOCK         .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>392030		1b f2 34 00
>392034		00 00 00 f9 f3 05 00 01		DRUMINS_BASS_DR2      .text $00, $00, $00, $F9, $F3, $05, $00, $01, $00, $F7, $8A, $00
>39203c		00 f7 8a 00
>392040		00 01 07 fa fd 05 00 01		DRUMINS_BASS_DR1      .text $00, $01, $07, $FA, $FD, $05, $00, $01, $00, $F6, $47, $00
>392048		00 f6 47 00
>39204c		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT       .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>392054		00 f9 69 00
>392058		00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_AC      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>392060		00 f7 a9 00
>392064		00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP          .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>39206c		00 87 fa 00
>392070		00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_EL      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>392078		00 f7 a9 00
>39207c		00 06 0a fa 1f 0c 00 11		DRUMINS_LO_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>392084		00 f5 f5 00
>392088		00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_CL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>392090		06 b8 d8 03
>392094		00 06 0a fa 1f 0c 00 11		DRUMINS_HI_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>39209c		00 f5 f5 00
>3920a0		00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_PL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>3920a8		06 b8 d8 03
>3920ac		00 06 0a fa 1f 0c 00 11		DRUMINS_LOW_TOM       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>3920b4		00 f5 f5 00
>3920b8		00 2e 00 82 f6 05 00 04		DRUMINS_HIHAT_OP      .text $00, $2E, $00, $82, $F6, $05, $00, $04, $10, $74, $F8, $03
>3920c0		10 74 f8 03
>3920c4		00 06 0a fa 1f 0c 00 11		DRUMINS_LTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>3920cc		00 f5 f5 00
>3920d0		00 06 0a fa 1f 0c 00 11		DRUMINS_HTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>3920d8		00 f5 f5 00
>3920dc		00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH         .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>3920e4		05 c5 d4 03
>3920e8		00 06 0a fa 1f 0c 00 11		DRUMINS_TOM_HIGH      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>3920f0		00 f5 f5 00
>3920f4		00 29 10 94 00 0f 00 04		DRUMINS_RIDE_CY       .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>3920fc		04 f9 44 03
>392100		00 2c 00 9f 00 0f 02 0e		DRUMINS_TAMBOUR       .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>392108		05 c5 d4 03
>39210c		00 29 10 94 00 0f 00 04		DRUMINS_CYMBAL        .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>392114		04 f9 44 03
>392118		00 2e 09 f5 f1 01 00 06		DRUMINS_TAMBOU2       .text $00, $2E, $09, $F5, $F1, $01, $00, $06, $03, $87, $F7, $03
>392120		03 87 f7 03
>392124		00 2c 00 9f 00 0f 02 0e		DRUMINS_SPLASH        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>39212c		05 c5 d4 03
>392130		00 37 14 f7 a1 09 01 03		DRUMINS_COWBELL       .text $00, $37, $14, $F7, $A1, $09, $01, $03, $00, $F6, $28, $00
>392138		00 f6 28 00
>39213c		00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH2        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>392144		05 c5 d4 03
>392148		00 80 00 ff 00 0d 01 00		DRUMINS_VIBRASLA      .text $00, $80, $00, $FF, $00, $0D, $01, $00, $00, $F5, $F7, $01
>392150		00 f5 f7 01
>392154		00 29 10 94 00 0f 00 04		DRUMINS_RIDE2         .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>39215c		04 f9 44 03
>392160		00 25 c4 fa fa 01 00 03		DRUMINS_HI_BONGO      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>392168		00 99 f9 00
>39216c		00 21 03 fb fa 01 01 02		DRUMINS_LO_BONGO      .text $00, $21, $03, $FB, $FA, $01, $01, $02, $00, $A8, $F7, $00
>392174		00 a8 f7 00
>392178		00 25 c4 fa fa 01 00 03		DRUMINS_MUTECONG      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>392180		00 99 f9 00
>392184		00 24 18 f9 fa 0f 02 03		DRUMINS_OPENCONG      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>39218c		00 a6 f6 00
>392190		00 24 18 f9 fa 0f 02 03		DRUMINS_LOWCONGA      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>392198		00 a6 f6 00
>39219c		00 05 14 f5 f5 07 02 03		DRUMINS_HI_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>3921a4		00 f6 36 02
>3921a8		00 05 14 f5 f5 07 02 03		DRUMINS_LO_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>3921b0		00 f6 36 02
>3921b4		00 1c 0c f9 31 0f 01 15		DRUMINS_HI_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>3921bc		00 96 e8 01
>3921c0		00 1c 0c f9 31 0f 01 15		DRUMINS_LO_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>3921c8		00 96 e8 01
>3921cc		00 0e 00 ff 01 0f 00 0e		DRUMINS_CABASA        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>3921d4		02 79 77 03
>3921d8		00 0e 00 ff 01 0f 00 0e		DRUMINS_MARACAS       .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>3921e0		02 79 77 03
>3921e4		00 20 15 af 07 05 01 0e		DRUMINS_S_WHISTL      .text $00, $20, $15, $AF, $07, $05, $01, $0E, $00, $A5, $2B, $02
>3921ec		00 a5 2b 02
>3921f0		00 20 18 bf 07 01 01 0e		DRUMINS_L_WHISTL      .text $00, $20, $18, $BF, $07, $01, $01, $0E, $00, $93, $3B, $02
>3921f8		00 93 3b 02
>3921fc		00 20 00 f0 f7 0b 00 08		DRUMINS_S_GUIRO       .text $00, $20, $00, $F0, $F7, $0B, $00, $08, $01, $89, $3B, $03
>392204		01 89 3b 03
>392208		00 20 00 f3 fa 09 00 08		DRUMINS_L_GUIRO       .text $00, $20, $00, $F3, $FA, $09, $00, $08, $0A, $53, $2B, $02
>392210		0a 53 2b 02
>392214		00 15 21 f8 9a 09 01 13		DRUMINS_CLAVES        .text $00, $15, $21, $F8, $9A, $09, $01, $13, $00, $F6, $89, $00
>39221c		00 f6 89 00
>392220		00 25 1b fa f2 01 00 12		DRUMINS_HI_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>392228		00 f6 9a 00
>39222c		00 25 1b fa f2 01 00 12		DRUMINS_LO_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>392234		00 f6 9a 00
>392238		00 20 01 5f 07 01 00 08		DRUMINS_MU_CUICA      .text $00, $20, $01, $5F, $07, $01, $00, $08, $00, $87, $4B, $01
>392240		00 87 4b 01
>392244		00 25 12 57 f7 01 01 03		DRUMINS_OP_CUICA      .text $00, $25, $12, $57, $F7, $01, $01, $03, $00, $78, $67, $01
>39224c		00 78 67 01
>392250		00 22 2f f1 f0 07 00 27		DRUMINS_MU_TRNGL      .text $00, $22, $2F, $F1, $F0, $07, $00, $27, $02, $F8, $FC, $00
>392258		02 f8 fc 00
>39225c		00 26 44 f1 f0 07 00 27		DRUMINS_OP_TRNGL      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>392264		40 f5 f5 00
>392268		00 0e 00 ff 01 0f 00 0e		DRUMINS_SHAKER        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>392270		02 79 77 03
>392274		00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL1      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>39227c		40 f5 f5 00
>392280		00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL2      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>392288		40 f5 f5 00
>39228c		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT3      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>392294		00 f9 69 00
>392298		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT4      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>3922a0		00 f9 69 00
>3922a4		00 02 1d f5 93 01 00 00		DRUMINS_TAIKO         .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>3922ac		00 c6 45 00
=27						DRUM_NOTE_BASE = 27;
=60						NUM_MIDI_DRUMS = 60;
>3922b0		e0 1f 39 00 ec 1f 39 00		midiDrums     .dword DRUMINS_CLAP2, DRUMINS_SCRATCH1, DRUMINS_SCRATCH2, DRUMINS_RIMSHOT2
>3922b8		f8 1f 39 00 04 20 39 00
>3922c0		10 20 39 00 1c 20 39 00		              .dword DRUMINS_HIQ, DRUMINS_WOODBLOK, DRUMINS_GLOCK, DRUMINS_BASS_DR2
>3922c8		28 20 39 00 34 20 39 00
>3922d0		40 20 39 00 4c 20 39 00		              .dword DRUMINS_BASS_DR1, DRUMINS_RIMSHOT,  DRUMINS_SNARE_AC, DRUMINS_CLAP
>3922d8		58 20 39 00 64 20 39 00
>3922e0		70 20 39 00 7c 20 39 00		              .dword DRUMINS_SNARE_EL, DRUMINS_LO_TOMS,  DRUMINS_HIHAT_CL, DRUMINS_HI_TOMS
>3922e8		88 20 39 00 94 20 39 00
>3922f0		a0 20 39 00 ac 20 39 00		              .dword DRUMINS_HIHAT_PL, DRUMINS_LOW_TOM,	DRUMINS_HIHAT_OP, DRUMINS_LTOM_MID
>3922f8		b8 20 39 00 c4 20 39 00
>392300		d0 20 39 00 dc 20 39 00		              .dword DRUMINS_HTOM_MID, DRUMINS_CRASH,    DRUMINS_TOM_HIGH, DRUMINS_RIDE_CY
>392308		e8 20 39 00 f4 20 39 00
>392310		00 21 39 00 0c 21 39 00		              .dword DRUMINS_TAMBOUR,  DRUMINS_CYMBAL,   DRUMINS_TAMBOU2,  DRUMINS_SPLASH
>392318		18 21 39 00 24 21 39 00
>392320		30 21 39 00 3c 21 39 00		              .dword DRUMINS_COWBELL,  DRUMINS_CRASH2, 	DRUMINS_VIBRASLA, DRUMINS_RIDE2
>392328		48 21 39 00 54 21 39 00
>392330		60 21 39 00 6c 21 39 00		              .dword DRUMINS_HI_BONGO, DRUMINS_LO_BONGO, DRUMINS_MUTECONG, DRUMINS_OPENCONG
>392338		78 21 39 00 84 21 39 00
>392340		90 21 39 00 9c 21 39 00		              .dword DRUMINS_LOWCONGA, DRUMINS_HI_TIMBA, DRUMINS_LO_TIMBA, DRUMINS_HI_AGOGO
>392348		a8 21 39 00 b4 21 39 00
>392350		c0 21 39 00 cc 21 39 00		              .dword DRUMINS_LO_AGOGO, DRUMINS_CABASA, DRUMINS_MARACAS,  DRUMINS_S_WHISTL
>392358		d8 21 39 00 e4 21 39 00
>392360		f0 21 39 00 fc 21 39 00		              .dword DRUMINS_L_WHISTL, DRUMINS_S_GUIRO,  DRUMINS_L_GUIRO,  DRUMINS_CLAVES
>392368		08 22 39 00 14 22 39 00
>392370		20 22 39 00 2c 22 39 00		              .dword DRUMINS_HI_WDBLK, DRUMINS_LO_WDBLK, DRUMINS_MU_CUICA, DRUMINS_OP_CUICA
>392378		38 22 39 00 44 22 39 00
>392380		50 22 39 00 5c 22 39 00		              .dword DRUMINS_MU_TRNGL, DRUMINS_OP_TRNGL, DRUMINS_SHAKER, DRUMINS_TRIANGL1
>392388		68 22 39 00 74 22 39 00
>392390		80 22 39 00 8c 22 39 00		              .dword DRUMINS_TRIANGL2, DRUMINS_RIMSHOT3, DRUMINS_RIMSHOT4, DRUMINS_TAIKO
>392398		98 22 39 00 a4 22 39 00

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Midi_Instruments.asm

>3923a0		00 33 5a b2 50 01 00 31		MIDI_INSTRUMENT_PIANO1     .text $00, $33, $5A, $B2, $50, $01, $00, $31, $00, $B1, $F5, $01
>3923a8		00 b1 f5 01
>3923ac		00 31 49 f2 53 07 01 11		MIDI_INSTRUMENT_PIANO2     .text $00, $31, $49, $F2, $53, $07, $01, $11, $03, $F1, $F5, $00
>3923b4		03 f1 f5 00
>3923b8		00 31 95 d1 83 0d 01 32		MIDI_INSTRUMENT_PIANO3     .text $00, $31, $95, $D1, $83, $0D, $01, $32, $03, $C1, $F5, $00
>3923c0		03 c1 f5 00
>3923c4		00 34 9b f3 63 01 01 11		MIDI_INSTRUMENT_HONKTONK   .text $00, $34, $9B, $F3, $63, $01, $01, $11, $00, $92, $F5, $01
>3923cc		00 92 f5 01
>3923d0		00 27 28 f8 b7 01 02 91		MIDI_INSTRUMENT_EP1        .text $00, $27, $28, $F8, $B7, $01, $02, $91, $00, $F1, $F9, $00
>3923d8		00 f1 f9 00
>3923dc		00 1a 2d f3 ee 01 01 11		MIDI_INSTRUMENT_EP2        .text $00, $1A, $2D, $F3, $EE, $01, $01, $11, $00, $F1, $F5, $00
>3923e4		00 f1 f5 00
>3923e8		00 35 95 f2 58 0f 01 32		MIDI_INSTRUMENT_HARPSIC    .text $00, $35, $95, $F2, $58, $0F, $01, $32, $02, $81, $F6, $01
>3923f0		02 81 f6 01
>3923f4		00 31 85 c9 40 01 00 35		MIDI_INSTRUMENT_CLAVIC     .text $00, $31, $85, $C9, $40, $01, $00, $35, $00, $C2, $B9, $01
>3923fc		00 c2 b9 01
>392400		00 09 15 c7 64 08 00 01		MIDI_INSTRUMENT_CELESTA    .text $00, $09, $15, $C7, $64, $08, $00, $01, $05, $B2, $35, $00
>392408		05 b2 35 00
>39240c		00 06 03 f4 44 00 01 01		MIDI_INSTRUMENT_GLOCK      .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>392414		1b f2 34 00
>392418		00 04 06 a9 24 0a 01 01		MIDI_INSTRUMENT_MUSICBOX   .text $00, $04, $06, $A9, $24, $0A, $01, $01, $01, $F5, $74, $00
>392420		01 f5 74 00
>392424		00 d4 00 f6 33 00 00 f1		MIDI_INSTRUMENT_VIBES      .text $00, $D4, $00, $F6, $33, $00, $00, $F1, $00, $61, $E3, $00
>39242c		00 61 e3 00
>392430		00 d4 00 f7 e8 04 00 d1		MIDI_INSTRUMENT_MARIMBA    .text $00, $D4, $00, $F7, $E8, $04, $00, $D1, $00, $A4, $64, $00
>392438		00 a4 64 00
>39243c		00 36 16 f7 f7 01 00 31		MIDI_INSTRUMENT_XYLO       .text $00, $36, $16, $F7, $F7, $01, $00, $31, $07, $B5, $F5, $00
>392444		07 b5 f5 00
>392448		00 03 1b a2 43 0b 00 00		MIDI_INSTRUMENT_TUBEBELL   .text $00, $03, $1B, $A2, $43, $0B, $00, $00, $00, $F3, $74, $00
>392450		00 f3 74 00
>392454		00 c3 8e f8 35 01 01 11		MIDI_INSTRUMENT_SANTUR     .text $00, $C3, $8E, $F8, $35, $01, $01, $11, $00, $C3, $94, $01
>39245c		00 c3 94 01
>392460		00 e2 07 f4 1b 06 01 e0		MIDI_INSTRUMENT_ORGAN1     .text $00, $E2, $07, $F4, $1B, $06, $01, $E0, $00, $F4, $0D, $01
>392468		00 f4 0d 01
>39246c		00 f2 00 f6 2c 04 00 f0		MIDI_INSTRUMENT_ORGAN2     .text $00, $F2, $00, $F6, $2C, $04, $00, $F0, $00, $F5, $0B, $01
>392474		00 f5 0b 01
>392478		00 f1 06 b6 15 0a 00 f0		MIDI_INSTRUMENT_ORGAN3     .text $00, $F1, $06, $B6, $15, $0A, $00, $F0, $00, $BF, $07, $00
>392480		00 bf 07 00
>392484		00 22 03 79 16 08 01 e0		MIDI_INSTRUMENT_PIPEORG    .text $00, $22, $03, $79, $16, $08, $01, $E0, $00, $6D, $08, $01
>39248c		00 6d 08 01
>392490		00 31 27 63 06 01 00 72		MIDI_INSTRUMENT_REEDORG    .text $00, $31, $27, $63, $06, $01, $00, $72, $00, $51, $17, $01
>392498		00 51 17 01
>39249c		00 b4 1d 53 16 0f 01 71		MIDI_INSTRUMENT_ACORDIAN   .text $00, $B4, $1D, $53, $16, $0F, $01, $71, $00, $51, $17, $01
>3924a4		00 51 17 01
>3924a8		00 25 29 97 15 01 00 32		MIDI_INSTRUMENT_HARMONIC   .text $00, $25, $29, $97, $15, $01, $00, $32, $00, $53, $08, $01
>3924b0		00 53 08 01
>3924b4		00 24 9e 67 15 0f 00 31		MIDI_INSTRUMENT_BANDNEON   .text $00, $24, $9E, $67, $15, $0F, $00, $31, $00, $53, $06, $01
>3924bc		00 53 06 01
>3924c0		00 13 27 a3 b4 05 01 31		MIDI_INSTRUMENT_NYLONGT    .text $00, $13, $27, $A3, $B4, $05, $01, $31, $00, $D2, $F8, $00
>3924c8		00 d2 f8 00
>3924cc		00 17 a3 f3 32 01 00 11		MIDI_INSTRUMENT_STEELGT    .text $00, $17, $A3, $F3, $32, $01, $00, $11, $00, $E2, $C7, $01
>3924d4		00 e2 c7 01
>3924d8		00 33 24 d2 c1 0f 01 31		MIDI_INSTRUMENT_JAZZGT     .text $00, $33, $24, $D2, $C1, $0F, $01, $31, $00, $F1, $9C, $00
>3924e0		00 f1 9c 00
>3924e4		00 31 05 f8 44 01 00 32		MIDI_INSTRUMENT_CLEANGT    .text $00, $31, $05, $F8, $44, $01, $00, $32, $02, $F2, $C9, $01
>3924ec		02 f2 c9 01
>3924f0		00 21 09 9c 7b 07 00 02		MIDI_INSTRUMENT_MUTEGT     .text $00, $21, $09, $9C, $7B, $07, $00, $02, $03, $95, $FB, $00
>3924f8		03 95 fb 00
>3924fc		00 21 84 81 98 07 01 21		MIDI_INSTRUMENT_OVERDGT    .text $00, $21, $84, $81, $98, $07, $01, $21, $04, $A1, $59, $00
>392504		04 a1 59 00
>392508		00 b1 0c 78 43 01 00 22		MIDI_INSTRUMENT_DISTGT     .text $00, $B1, $0C, $78, $43, $01, $00, $22, $03, $91, $FC, $03
>392510		03 91 fc 03
>392514		00 00 0a 82 8c 09 00 08		MIDI_INSTRUMENT_GTHARMS    .text $00, $00, $0A, $82, $8C, $09, $00, $08, $02, $B4, $EC, $00
>39251c		02 b4 ec 00
>392520		00 21 13 ab 46 01 00 21		MIDI_INSTRUMENT_ACOUBASS   .text $00, $21, $13, $AB, $46, $01, $00, $21, $00, $93, $F7, $00
>392528		00 93 f7 00
>39252c		00 01 0a f9 32 01 00 22		MIDI_INSTRUMENT_FINGBASS   .text $00, $01, $0A, $F9, $32, $01, $00, $22, $04, $C1, $58, $00
>392534		04 c1 58 00
>392538		00 21 07 fa 77 0b 00 22		MIDI_INSTRUMENT_PICKBASS   .text $00, $21, $07, $FA, $77, $0B, $00, $22, $02, $C3, $6A, $00
>392540		02 c3 6a 00
>392544		00 21 17 71 57 0b 00 21		MIDI_INSTRUMENT_FRETLESS   .text $00, $21, $17, $71, $57, $0B, $00, $21, $00, $62, $87, $00
>39254c		00 62 87 00
>392550		00 25 01 fa 78 07 01 12		MIDI_INSTRUMENT_SLAPBAS1   .text $00, $25, $01, $FA, $78, $07, $01, $12, $00, $F3, $97, $00
>392558		00 f3 97 00
>39255c		00 21 03 fa 88 0d 00 13		MIDI_INSTRUMENT_SLAPBAS2   .text $00, $21, $03, $FA, $88, $0D, $00, $13, $00, $B3, $97, $00
>392564		00 b3 97 00
>392568		00 21 09 f5 7f 09 01 23		MIDI_INSTRUMENT_SYNBASS1   .text $00, $21, $09, $F5, $7F, $09, $01, $23, $04, $F3, $CC, $00
>392570		04 f3 cc 00
>392574		00 01 10 a3 9b 09 00 01		MIDI_INSTRUMENT_SYNBASS2   .text $00, $01, $10, $A3, $9B, $09, $00, $01, $00, $93, $AA, $00
>39257c		00 93 aa 00
>392580		00 e2 19 f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLIN     .text $00, $E2, $19, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>392588		00 78 08 01
>39258c		00 e2 1c f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLA      .text $00, $E2, $1C, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>392594		00 78 08 01
>392598		00 61 19 69 16 0b 01 61		MIDI_INSTRUMENT_CELLO      .text $00, $61, $19, $69, $16, $0B, $01, $61, $00, $54, $27, $01
>3925a0		00 54 27 01
>3925a4		00 71 18 82 31 0d 01 32		MIDI_INSTRUMENT_CONTRAB    .text $00, $71, $18, $82, $31, $0D, $01, $32, $00, $61, $56, $00
>3925ac		00 61 56 00
>3925b0		00 e2 23 70 06 0d 01 e1		MIDI_INSTRUMENT_TREMSTR    .text $00, $E2, $23, $70, $06, $0D, $01, $E1, $00, $75, $16, $01
>3925b8		00 75 16 01
>3925bc		00 02 00 88 e6 08 00 61		MIDI_INSTRUMENT_PIZZ       .text $00, $02, $00, $88, $E6, $08, $00, $61, $00, $F5, $F6, $01
>3925c4		00 f5 f6 01
>3925c8		00 12 20 f6 d5 0f 01 11		MIDI_INSTRUMENT_HARP       .text $00, $12, $20, $F6, $D5, $0F, $01, $11, $80, $F3, $E3, $00
>3925d0		80 f3 e3 00
>3925d4		00 61 0e f4 f4 01 01 00		MIDI_INSTRUMENT_TIMPANI    .text $00, $61, $0E, $F4, $F4, $01, $01, $00, $00, $B5, $F5, $00
>3925dc		00 b5 f5 00
>3925e0		00 61 1e 9c 04 0f 01 21		MIDI_INSTRUMENT_STRINGS    .text $00, $61, $1E, $9C, $04, $0F, $01, $21, $80, $71, $16, $00
>3925e8		80 71 16 00
>3925ec		00 a2 2a c0 d6 0f 02 21		MIDI_INSTRUMENT_SLOWSTR    .text $00, $A2, $2A, $C0, $D6, $0F, $02, $21, $00, $30, $55, $01
>3925f4		00 30 55 01
>3925f8		00 61 21 72 35 0f 01 61		MIDI_INSTRUMENT_SYNSTR1    .text $00, $61, $21, $72, $35, $0F, $01, $61, $00, $62, $36, $01
>392600		00 62 36 01
>392604		00 21 1a 72 23 0f 01 21		MIDI_INSTRUMENT_SYNSTR2    .text $00, $21, $1A, $72, $23, $0F, $01, $21, $02, $51, $07, $00
>39260c		02 51 07 00
>392610		00 e1 16 97 31 09 00 61		MIDI_INSTRUMENT_CHOIR      .text $00, $E1, $16, $97, $31, $09, $00, $61, $00, $62, $39, $00
>392618		00 62 39 00
>39261c		00 22 c3 79 45 01 00 21		MIDI_INSTRUMENT_OOHS       .text $00, $22, $C3, $79, $45, $01, $00, $21, $00, $66, $27, $00
>392624		00 66 27 00
>392628		00 21 de 63 55 01 01 21		MIDI_INSTRUMENT_SYNVOX     .text $00, $21, $DE, $63, $55, $01, $01, $21, $00, $73, $46, $00
>392630		00 73 46 00
>392634		00 42 05 86 f7 0a 00 50		MIDI_INSTRUMENT_ORCHIT     .text $00, $42, $05, $86, $F7, $0A, $00, $50, $00, $74, $76, $01
>39263c		00 74 76 01
>392640		00 31 1c 61 02 0f 00 61		MIDI_INSTRUMENT_TRUMPET    .text $00, $31, $1C, $61, $02, $0F, $00, $61, $81, $92, $38, $00
>392648		81 92 38 00
>39264c		00 71 1e 52 23 0f 00 61		MIDI_INSTRUMENT_TROMBONE   .text $00, $71, $1E, $52, $23, $0F, $00, $61, $02, $71, $19, $00
>392654		02 71 19 00
>392658		00 21 1a 76 16 0f 00 21		MIDI_INSTRUMENT_TUBA       .text $00, $21, $1A, $76, $16, $0F, $00, $21, $01, $81, $09, $00
>392660		01 81 09 00
>392664		00 25 28 89 2c 07 02 20		MIDI_INSTRUMENT_MUTETRP    .text $00, $25, $28, $89, $2C, $07, $02, $20, $00, $83, $4B, $02
>39266c		00 83 4b 02
>392670		00 21 1f 79 16 09 00 a2		MIDI_INSTRUMENT_FRHORN     .text $00, $21, $1F, $79, $16, $09, $00, $A2, $05, $71, $59, $00
>392678		05 71 59 00
>39267c		00 21 19 87 16 0f 00 21		MIDI_INSTRUMENT_BRASS1     .text $00, $21, $19, $87, $16, $0F, $00, $21, $03, $82, $39, $00
>392684		03 82 39 00
>392688		00 21 17 75 35 0f 00 22		MIDI_INSTRUMENT_SYNBRAS1   .text $00, $21, $17, $75, $35, $0F, $00, $22, $82, $84, $17, $00
>392690		82 84 17 00
>392694		00 21 22 62 58 0f 00 21		MIDI_INSTRUMENT_SYNBRAS2   .text $00, $21, $22, $62, $58, $0F, $00, $21, $02, $72, $16, $00
>39269c		02 72 16 00
>3926a0		00 b1 1b 59 07 01 01 a1		MIDI_INSTRUMENT_SOPSAX     .text $00, $B1, $1B, $59, $07, $01, $01, $A1, $00, $7B, $0A, $00
>3926a8		00 7b 0a 00
>3926ac		00 21 16 9f 04 0b 00 21		MIDI_INSTRUMENT_ALTOSAX    .text $00, $21, $16, $9F, $04, $0B, $00, $21, $00, $85, $0C, $01
>3926b4		00 85 0c 01
>3926b8		00 21 0f a8 20 0d 00 23		MIDI_INSTRUMENT_TENSAX     .text $00, $21, $0F, $A8, $20, $0D, $00, $23, $00, $7B, $0A, $01
>3926c0		00 7b 0a 01
>3926c4		00 21 0f 88 04 09 00 26		MIDI_INSTRUMENT_BARISAX    .text $00, $21, $0F, $88, $04, $09, $00, $26, $00, $79, $18, $01
>3926cc		00 79 18 01
>3926d0		00 31 18 8f 05 01 00 32		MIDI_INSTRUMENT_OBOE       .text $00, $31, $18, $8F, $05, $01, $00, $32, $01, $73, $08, $00
>3926d8		01 73 08 00
>3926dc		00 a1 0a 8c 37 01 01 24		MIDI_INSTRUMENT_ENGLHORN   .text $00, $A1, $0A, $8C, $37, $01, $01, $24, $04, $77, $0A, $00
>3926e4		04 77 0a 00
>3926e8		00 31 04 a8 67 0b 00 75		MIDI_INSTRUMENT_BASSOON    .text $00, $31, $04, $A8, $67, $0B, $00, $75, $00, $51, $19, $00
>3926f0		00 51 19 00
>3926f4		00 a2 1f 77 26 01 01 21		MIDI_INSTRUMENT_CLARINET   .text $00, $A2, $1F, $77, $26, $01, $01, $21, $01, $74, $09, $00
>3926fc		01 74 09 00
>392700		00 e1 07 b8 94 01 01 21		MIDI_INSTRUMENT_PICCOLO    .text $00, $E1, $07, $B8, $94, $01, $01, $21, $01, $63, $28, $00
>392708		01 63 28 00
>39270c		00 a1 93 87 59 01 00 e1		MIDI_INSTRUMENT_FLUTE1     .text $00, $A1, $93, $87, $59, $01, $00, $E1, $00, $65, $0A, $00
>392714		00 65 0a 00
>392718		00 22 10 9f 38 01 00 61		MIDI_INSTRUMENT_RECORDER   .text $00, $22, $10, $9F, $38, $01, $00, $61, $00, $67, $29, $00
>392720		00 67 29 00
>392724		00 e2 0d 88 9a 01 01 21		MIDI_INSTRUMENT_PANFLUTE   .text $00, $E2, $0D, $88, $9A, $01, $01, $21, $00, $67, $09, $00
>39272c		00 67 09 00
>392730		00 a2 10 98 94 0f 00 21		MIDI_INSTRUMENT_BOTTLEB    .text $00, $A2, $10, $98, $94, $0F, $00, $21, $01, $6A, $28, $00
>392738		01 6a 28 00
>39273c		00 f1 1c 86 26 0f 00 f1		MIDI_INSTRUMENT_SHAKU      .text $00, $F1, $1C, $86, $26, $0F, $00, $F1, $00, $55, $27, $00
>392744		00 55 27 00
>392748		00 e1 3f 9f 09 00 00 e1		MIDI_INSTRUMENT_WHISTLE    .text $00, $E1, $3F, $9F, $09, $00, $00, $E1, $00, $6F, $08, $00
>392750		00 6f 08 00
>392754		00 e2 3b f7 19 01 00 21		MIDI_INSTRUMENT_OCARINA    .text $00, $E2, $3B, $F7, $19, $01, $00, $21, $00, $7A, $07, $00
>39275c		00 7a 07 00
>392760		00 22 1e 92 0c 0f 00 61		MIDI_INSTRUMENT_SQUARWAV   .text $00, $22, $1E, $92, $0C, $0F, $00, $61, $06, $A2, $0D, $00
>392768		06 a2 0d 00
>39276c		00 21 15 f4 22 0f 01 21		MIDI_INSTRUMENT_SAWWAV     .text $00, $21, $15, $F4, $22, $0F, $01, $21, $00, $A3, $5F, $00
>392774		00 a3 5f 00
>392778		00 f2 20 47 66 03 01 f1		MIDI_INSTRUMENT_SYNCALLI   .text $00, $F2, $20, $47, $66, $03, $01, $F1, $00, $42, $27, $00
>392780		00 42 27 00
>392784		00 61 19 88 28 0f 00 61		MIDI_INSTRUMENT_CHIFLEAD   .text $00, $61, $19, $88, $28, $0F, $00, $61, $05, $B2, $49, $00
>39278c		05 b2 49 00
>392790		00 21 16 82 1b 01 00 23		MIDI_INSTRUMENT_CHARANG    .text $00, $21, $16, $82, $1B, $01, $00, $23, $00, $B2, $79, $01
>392798		00 b2 79 01
>39279c		00 21 00 ca 93 01 00 22		MIDI_INSTRUMENT_SOLOVOX    .text $00, $21, $00, $CA, $93, $01, $00, $22, $00, $7A, $1A, $00
>3927a4		00 7a 1a 00
>3927a8		00 23 00 92 c9 08 01 22		MIDI_INSTRUMENT_FIFTHSAW   .text $00, $23, $00, $92, $C9, $08, $01, $22, $00, $82, $28, $01
>3927b0		00 82 28 01
>3927b4		00 21 1d f3 7b 0f 00 22		MIDI_INSTRUMENT_BASSLEAD   .text $00, $21, $1D, $F3, $7B, $0F, $00, $22, $02, $C3, $5F, $00
>3927bc		02 c3 5f 00
>3927c0		00 e1 00 81 25 00 01 a6		MIDI_INSTRUMENT_FANTASIA   .text $00, $E1, $00, $81, $25, $00, $01, $A6, $86, $C4, $95, $01
>3927c8		86 c4 95 01
>3927cc		00 21 27 31 01 0f 00 21		MIDI_INSTRUMENT_WARMPAD    .text $00, $21, $27, $31, $01, $0F, $00, $21, $00, $44, $15, $00
>3927d4		00 44 15 00
>3927d8		00 60 14 83 35 0d 02 61		MIDI_INSTRUMENT_POLYSYN    .text $00, $60, $14, $83, $35, $0D, $02, $61, $00, $D1, $06, $00
>3927e0		00 d1 06 00
>3927e4		00 e1 5c d3 01 01 01 62		MIDI_INSTRUMENT_SPACEVOX   .text $00, $E1, $5C, $D3, $01, $01, $01, $62, $00, $82, $37, $00
>3927ec		00 82 37 00
>3927f0		00 28 38 34 86 01 02 21		MIDI_INSTRUMENT_BOWEDGLS   .text $00, $28, $38, $34, $86, $01, $02, $21, $00, $41, $35, $00
>3927f8		00 41 35 00
>3927fc		00 24 12 52 f3 05 01 23		MIDI_INSTRUMENT_METALPAD   .text $00, $24, $12, $52, $F3, $05, $01, $23, $02, $32, $F5, $01
>392804		02 32 f5 01
>392808		00 61 1d 62 a6 0b 00 a1		MIDI_INSTRUMENT_HALOPAD    .text $00, $61, $1D, $62, $A6, $0B, $00, $A1, $00, $61, $26, $00
>392810		00 61 26 00
>392814		00 22 0f 22 d5 0b 01 21		MIDI_INSTRUMENT_SWEEPPAD   .text $00, $22, $0F, $22, $D5, $0B, $01, $21, $84, $3F, $05, $01
>39281c		84 3f 05 01
>392820		00 e3 1f f9 24 01 00 31		MIDI_INSTRUMENT_ICERAIN    .text $00, $E3, $1F, $F9, $24, $01, $00, $31, $01, $D1, $F6, $00
>392828		01 d1 f6 00
>39282c		00 63 00 41 55 06 01 a2		MIDI_INSTRUMENT_SOUNDTRK   .text $00, $63, $00, $41, $55, $06, $01, $A2, $00, $41, $05, $01
>392834		00 41 05 01
>392838		00 c7 25 a7 65 01 01 c1		MIDI_INSTRUMENT_CRYSTAL    .text $00, $C7, $25, $A7, $65, $01, $01, $C1, $05, $F3, $E4, $00
>392840		05 f3 e4 00
>392844		00 e3 19 f7 b7 01 01 61		MIDI_INSTRUMENT_ATMOSPH    .text $00, $E3, $19, $F7, $B7, $01, $01, $61, $00, $92, $F5, $01
>39284c		00 92 f5 01
>392850		00 66 9b a8 44 0f 00 41		MIDI_INSTRUMENT_BRIGHT     .text $00, $66, $9B, $A8, $44, $0F, $00, $41, $04, $F2, $E4, $01
>392858		04 f2 e4 01
>39285c		00 61 20 22 75 0d 00 61		MIDI_INSTRUMENT_GOBLIN     .text $00, $61, $20, $22, $75, $0D, $00, $61, $00, $45, $25, $00
>392864		00 45 25 00
>392868		00 e1 21 f6 84 0f 00 e1		MIDI_INSTRUMENT_ECHODROP   .text $00, $E1, $21, $F6, $84, $0F, $00, $E1, $01, $A3, $36, $00
>392870		01 a3 36 00
>392874		00 e2 14 73 64 0b 01 e1		MIDI_INSTRUMENT_STARTHEM   .text $00, $E2, $14, $73, $64, $0B, $01, $E1, $01, $98, $05, $01
>39287c		01 98 05 01
>392880		00 21 0b 72 34 09 00 24		MIDI_INSTRUMENT_SITAR      .text $00, $21, $0B, $72, $34, $09, $00, $24, $02, $A3, $F6, $01
>392888		02 a3 f6 01
>39288c		00 21 16 f4 53 0d 00 04		MIDI_INSTRUMENT_BANJO      .text $00, $21, $16, $F4, $53, $0D, $00, $04, $00, $F6, $F8, $00
>392894		00 f6 f8 00
>392898		00 21 18 da 02 0d 00 35		MIDI_INSTRUMENT_SHAMISEN   .text $00, $21, $18, $DA, $02, $0D, $00, $35, $00, $F3, $F5, $00
>3928a0		00 f3 f5 00
>3928a4		00 25 0f fa 63 09 00 02		MIDI_INSTRUMENT_KOTO       .text $00, $25, $0F, $FA, $63, $09, $00, $02, $00, $94, $E5, $01
>3928ac		00 94 e5 01
>3928b0		00 32 07 f9 96 01 00 11		MIDI_INSTRUMENT_KALIMBA    .text $00, $32, $07, $F9, $96, $01, $00, $11, $00, $84, $44, $00
>3928b8		00 84 44 00
>3928bc		00 20 0e 97 18 09 02 25		MIDI_INSTRUMENT_BAGPIPE    .text $00, $20, $0E, $97, $18, $09, $02, $25, $03, $83, $18, $01
>3928c4		03 83 18 01
>3928c8		00 61 18 f6 29 01 00 62		MIDI_INSTRUMENT_FIDDLE     .text $00, $61, $18, $F6, $29, $01, $00, $62, $01, $78, $08, $01
>3928d0		01 78 08 01
>3928d4		00 e6 21 76 19 0b 00 61		MIDI_INSTRUMENT_SHANNAI    .text $00, $E6, $21, $76, $19, $0B, $00, $61, $03, $8E, $08, $01
>3928dc		03 8e 08 01
>3928e0		00 27 23 f0 d4 01 00 05		MIDI_INSTRUMENT_TINKLBEL   .text $00, $27, $23, $F0, $D4, $01, $00, $05, $09, $F2, $46, $00
>3928e8		09 f2 46 00
>3928ec		00 1c 0c f9 31 0f 01 15		MIDI_INSTRUMENT_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>3928f4		00 96 e8 01
>3928f8		00 02 00 75 16 06 02 01		MIDI_INSTRUMENT_STEELDRM   .text $00, $02, $00, $75, $16, $06, $02, $01, $00, $F6, $F6, $01
>392900		00 f6 f6 01
>392904		00 25 1b fa f2 01 00 12		MIDI_INSTRUMENT_WOODBLOK   .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>39290c		00 f6 9a 00
>392910		00 02 1d f5 93 01 00 00		MIDI_INSTRUMENT_TAIKO      .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>392918		00 c6 45 00
>39291c		00 11 15 f5 32 05 00 10		MIDI_INSTRUMENT_MELOTOM    .text $00, $11, $15, $F5, $32, $05, $00, $10, $00, $F4, $B4, $00
>392924		00 f4 b4 00
>392928		00 22 06 fa 99 09 00 01		MIDI_INSTRUMENT_SYNDRUM    .text $00, $22, $06, $FA, $99, $09, $00, $01, $00, $D5, $25, $00
>392930		00 d5 25 00
>392934		00 2e 00 ff 00 0f 02 0e		MIDI_INSTRUMENT_REVRSCYM   .text $00, $2E, $00, $FF, $00, $0F, $02, $0E, $0E, $21, $2D, $00
>39293c		0e 21 2d 00
>392940		00 30 0b 56 e4 01 01 17		MIDI_INSTRUMENT_FRETNOIS   .text $00, $30, $0B, $56, $E4, $01, $01, $17, $00, $55, $87, $02
>392948		00 55 87 02
>39294c		00 24 00 ff 03 0d 00 05		MIDI_INSTRUMENT_BRTHNOIS   .text $00, $24, $00, $FF, $03, $0D, $00, $05, $08, $98, $87, $01
>392954		08 98 87 01
>392958		00 0e 00 f0 00 0f 02 0a		MIDI_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F0, $00, $0F, $02, $0A, $04, $17, $04, $03
>392960		04 17 04 03
>392964		00 20 08 f6 f7 01 00 0e		MIDI_INSTRUMENT_BIRDS      .text $00, $20, $08, $F6, $F7, $01, $00, $0E, $05, $77, $F9, $02
>39296c		05 77 f9 02
>392970		00 20 14 f1 08 01 00 2e		MIDI_INSTRUMENT_TELEPHON   .text $00, $20, $14, $F1, $08, $01, $00, $2E, $02, $F4, $08, $00
>392978		02 f4 08 00
>39297c		00 20 04 f2 00 03 01 23		MIDI_INSTRUMENT_HELICOPT   .text $00, $20, $04, $F2, $00, $03, $01, $23, $00, $36, $05, $01
>392984		00 36 05 01
>392988		00 2e 00 ff 02 0f 00 2a		MIDI_INSTRUMENT_APPLAUSE   .text $00, $2E, $00, $FF, $02, $0F, $00, $2A, $05, $32, $55, $03
>392990		05 32 55 03
>392994		00 20 00 a1 ef 0f 00 10		MIDI_INSTRUMENT_GUNSHOT    .text $00, $20, $00, $A1, $EF, $0F, $00, $10, $00, $F3, $DF, $00
>39299c		00 f3 df 00
>3929a0		a0 23 39 00 ac 23 39 00		midiInstruments .dword MIDI_INSTRUMENT_PIANO1,   MIDI_INSTRUMENT_PIANO2,   MIDI_INSTRUMENT_PIANO3,   MIDI_INSTRUMENT_HONKTONK, MIDI_INSTRUMENT_EP1,      MIDI_INSTRUMENT_EP2
>3929a8		b8 23 39 00 c4 23 39 00 d0 23 39 00 dc 23 39 00
>3929b8		e8 23 39 00 f4 23 39 00		              	.dword MIDI_INSTRUMENT_HARPSIC,  MIDI_INSTRUMENT_CLAVIC,   MIDI_INSTRUMENT_CELESTA,  MIDI_INSTRUMENT_GLOCK,    MIDI_INSTRUMENT_MUSICBOX, MIDI_INSTRUMENT_VIBES
>3929c0		00 24 39 00 0c 24 39 00 18 24 39 00 24 24 39 00
>3929d0		30 24 39 00 3c 24 39 00		              	.dword MIDI_INSTRUMENT_MARIMBA,  MIDI_INSTRUMENT_XYLO,     MIDI_INSTRUMENT_TUBEBELL, MIDI_INSTRUMENT_SANTUR,   MIDI_INSTRUMENT_ORGAN1,   MIDI_INSTRUMENT_ORGAN2
>3929d8		48 24 39 00 54 24 39 00 60 24 39 00 6c 24 39 00
>3929e8		78 24 39 00 84 24 39 00		              	.dword MIDI_INSTRUMENT_ORGAN3,   MIDI_INSTRUMENT_PIPEORG,  MIDI_INSTRUMENT_REEDORG,  MIDI_INSTRUMENT_ACORDIAN, MIDI_INSTRUMENT_HARMONIC, MIDI_INSTRUMENT_BANDNEON
>3929f0		90 24 39 00 9c 24 39 00 a8 24 39 00 b4 24 39 00
>392a00		c0 24 39 00 cc 24 39 00		              	.dword MIDI_INSTRUMENT_NYLONGT,  MIDI_INSTRUMENT_STEELGT,  MIDI_INSTRUMENT_JAZZGT,   MIDI_INSTRUMENT_CLEANGT,  MIDI_INSTRUMENT_MUTEGT,   MIDI_INSTRUMENT_OVERDGT
>392a08		d8 24 39 00 e4 24 39 00 f0 24 39 00 fc 24 39 00
>392a18		08 25 39 00 14 25 39 00		              	.dword MIDI_INSTRUMENT_DISTGT,   MIDI_INSTRUMENT_GTHARMS,  MIDI_INSTRUMENT_ACOUBASS, MIDI_INSTRUMENT_FINGBASS, MIDI_INSTRUMENT_PICKBASS, MIDI_INSTRUMENT_FRETLESS
>392a20		20 25 39 00 2c 25 39 00 38 25 39 00 44 25 39 00
>392a30		50 25 39 00 5c 25 39 00		              	.dword MIDI_INSTRUMENT_SLAPBAS1, MIDI_INSTRUMENT_SLAPBAS2, MIDI_INSTRUMENT_SYNBASS1, MIDI_INSTRUMENT_SYNBASS2, MIDI_INSTRUMENT_VIOLIN,   MIDI_INSTRUMENT_VIOLA
>392a38		68 25 39 00 74 25 39 00 80 25 39 00 8c 25 39 00
>392a48		98 25 39 00 a4 25 39 00		              	.dword MIDI_INSTRUMENT_CELLO,    MIDI_INSTRUMENT_CONTRAB,  MIDI_INSTRUMENT_TREMSTR,  MIDI_INSTRUMENT_PIZZ,     MIDI_INSTRUMENT_HARP,     MIDI_INSTRUMENT_TIMPANI
>392a50		b0 25 39 00 bc 25 39 00 c8 25 39 00 d4 25 39 00
>392a60		e0 25 39 00 ec 25 39 00		              	.dword MIDI_INSTRUMENT_STRINGS,  MIDI_INSTRUMENT_SLOWSTR,  MIDI_INSTRUMENT_SYNSTR1,  MIDI_INSTRUMENT_SYNSTR2,  MIDI_INSTRUMENT_CHOIR,    MIDI_INSTRUMENT_OOHS
>392a68		f8 25 39 00 04 26 39 00 10 26 39 00 1c 26 39 00
>392a78		28 26 39 00 34 26 39 00		              	.dword MIDI_INSTRUMENT_SYNVOX,   MIDI_INSTRUMENT_ORCHIT,   MIDI_INSTRUMENT_TRUMPET,  MIDI_INSTRUMENT_TROMBONE, MIDI_INSTRUMENT_TUBA,     MIDI_INSTRUMENT_MUTETRP
>392a80		40 26 39 00 4c 26 39 00 58 26 39 00 64 26 39 00
>392a90		70 26 39 00 7c 26 39 00		              	.dword MIDI_INSTRUMENT_FRHORN,   MIDI_INSTRUMENT_BRASS1,   MIDI_INSTRUMENT_SYNBRAS1, MIDI_INSTRUMENT_SYNBRAS2, MIDI_INSTRUMENT_SOPSAX,   MIDI_INSTRUMENT_ALTOSAX
>392a98		88 26 39 00 94 26 39 00 a0 26 39 00 ac 26 39 00
>392aa8		b8 26 39 00 c4 26 39 00		              	.dword MIDI_INSTRUMENT_TENSAX,   MIDI_INSTRUMENT_BARISAX,  MIDI_INSTRUMENT_OBOE,     MIDI_INSTRUMENT_ENGLHORN, MIDI_INSTRUMENT_BASSOON,  MIDI_INSTRUMENT_CLARINET
>392ab0		d0 26 39 00 dc 26 39 00 e8 26 39 00 f4 26 39 00
>392ac0		00 27 39 00 0c 27 39 00		              	.dword MIDI_INSTRUMENT_PICCOLO,  MIDI_INSTRUMENT_FLUTE1,   MIDI_INSTRUMENT_RECORDER, MIDI_INSTRUMENT_PANFLUTE, MIDI_INSTRUMENT_BOTTLEB,  MIDI_INSTRUMENT_SHAKU
>392ac8		18 27 39 00 24 27 39 00 30 27 39 00 3c 27 39 00
>392ad8		48 27 39 00 54 27 39 00		              	.dword MIDI_INSTRUMENT_WHISTLE,  MIDI_INSTRUMENT_OCARINA,  MIDI_INSTRUMENT_SQUARWAV, MIDI_INSTRUMENT_SAWWAV,   MIDI_INSTRUMENT_SYNCALLI, MIDI_INSTRUMENT_CHIFLEAD
>392ae0		60 27 39 00 6c 27 39 00 78 27 39 00 84 27 39 00
>392af0		90 27 39 00 9c 27 39 00		              	.dword MIDI_INSTRUMENT_CHARANG,  MIDI_INSTRUMENT_SOLOVOX,  MIDI_INSTRUMENT_FIFTHSAW, MIDI_INSTRUMENT_BASSLEAD, MIDI_INSTRUMENT_FANTASIA, MIDI_INSTRUMENT_WARMPAD
>392af8		a8 27 39 00 b4 27 39 00 c0 27 39 00 cc 27 39 00
>392b08		d8 27 39 00 e4 27 39 00		              	.dword MIDI_INSTRUMENT_POLYSYN,  MIDI_INSTRUMENT_SPACEVOX, MIDI_INSTRUMENT_BOWEDGLS, MIDI_INSTRUMENT_METALPAD, MIDI_INSTRUMENT_HALOPAD,  MIDI_INSTRUMENT_SWEEPPAD
>392b10		f0 27 39 00 fc 27 39 00 08 28 39 00 14 28 39 00
>392b20		20 28 39 00 2c 28 39 00		              	.dword MIDI_INSTRUMENT_ICERAIN,  MIDI_INSTRUMENT_SOUNDTRK, MIDI_INSTRUMENT_CRYSTAL,  MIDI_INSTRUMENT_ATMOSPH,  MIDI_INSTRUMENT_BRIGHT,   MIDI_INSTRUMENT_GOBLIN
>392b28		38 28 39 00 44 28 39 00 50 28 39 00 5c 28 39 00
>392b38		68 28 39 00 74 28 39 00		              	.dword MIDI_INSTRUMENT_ECHODROP, MIDI_INSTRUMENT_STARTHEM, MIDI_INSTRUMENT_SITAR,    MIDI_INSTRUMENT_BANJO,    MIDI_INSTRUMENT_SHAMISEN, MIDI_INSTRUMENT_KOTO
>392b40		80 28 39 00 8c 28 39 00 98 28 39 00 a4 28 39 00
>392b50		b0 28 39 00 bc 28 39 00		              	.dword MIDI_INSTRUMENT_KALIMBA,  MIDI_INSTRUMENT_BAGPIPE,  MIDI_INSTRUMENT_FIDDLE,   MIDI_INSTRUMENT_SHANNAI,  MIDI_INSTRUMENT_TINKLBEL, MIDI_INSTRUMENT_AGOGO
>392b58		c8 28 39 00 d4 28 39 00 e0 28 39 00 ec 28 39 00
>392b68		f8 28 39 00 04 29 39 00		              	.dword MIDI_INSTRUMENT_STEELDRM, MIDI_INSTRUMENT_WOODBLOK, MIDI_INSTRUMENT_TAIKO,    MIDI_INSTRUMENT_MELOTOM,  MIDI_INSTRUMENT_SYNDRUM,  MIDI_INSTRUMENT_REVRSCYM
>392b70		10 29 39 00 1c 29 39 00 28 29 39 00 34 29 39 00
>392b80		40 29 39 00 4c 29 39 00		              	.dword MIDI_INSTRUMENT_FRETNOIS, MIDI_INSTRUMENT_BRTHNOIS, MIDI_INSTRUMENT_SEASHORE, MIDI_INSTRUMENT_BIRDS,    MIDI_INSTRUMENT_TELEPHON, MIDI_INSTRUMENT_HELICOPT
>392b88		58 29 39 00 64 29 39 00 70 29 39 00 7c 29 39 00
>392b98		88 29 39 00 94 29 39 00		              	.dword MIDI_INSTRUMENT_APPLAUSE, MIDI_INSTRUMENT_GUNSHOT

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Midi_Instruments_Win31.asm

>392ba0		00 01 8f f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO1     .text $00, $01, $8F, $F2, $F4, $38, $00, $01, $0D, $F2, $F7, $00
>392ba8		0d f2 f7 00
>392bac		00 01 4b f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO2     .text $00, $01, $4B, $F2, $F4, $38, $00, $01, $07, $F2, $F7, $00
>392bb4		07 f2 f7 00
>392bb8		00 01 49 f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO3     .text $00, $01, $49, $F2, $F4, $38, $00, $01, $07, $F2, $F6, $00
>392bc0		07 f2 f6 00
>392bc4		00 81 12 f2 f7 00 00 41		MIDIW31_INSTRUMENT_HONKTONK   .text $00, $81, $12, $F2, $F7, $00, $00, $41, $07, $F2, $F7, $00
>392bcc		07 f2 f7 00
>392bd0		00 01 57 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP1        .text $00, $01, $57, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>392bd8		07 f2 f7 00
>392bdc		00 01 93 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP2        .text $00, $01, $93, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>392be4		07 f2 f7 00
>392be8		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HARPSIC    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392bf0		00 00 00 00
>392bf4		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLAVIC     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392bfc		00 00 00 00
>392c00		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELESTA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392c08		00 00 00 00
>392c0c		00 07 97 f3 f2 32 00 11		MIDIW31_INSTRUMENT_GLOCK      .text $00, $07, $97, $F3, $F2, $32, $00, $11, $87, $F2, $F1, $00
>392c14		87 f2 f1 00
>392c18		00 17 21 54 f4 32 00 01		MIDIW31_INSTRUMENT_MUSICBOX   .text $00, $17, $21, $54, $F4, $32, $00, $01, $07, $F4, $F4, $00
>392c20		07 f4 f4 00
>392c24		00 98 62 f3 f6 30 00 81		MIDIW31_INSTRUMENT_VIBES      .text $00, $98, $62, $F3, $F6, $30, $00, $81, $07, $F2, $F6, $00
>392c2c		07 f2 f6 00
>392c30		00 18 23 f6 f6 00 00 01		MIDIW31_INSTRUMENT_MARIMBA    .text $00, $18, $23, $F6, $F6, $00, $00, $01, $07, $E7, $F7, $00
>392c38		07 e7 f7 00
>392c3c		00 15 91 f6 f6 00 00 01		MIDIW31_INSTRUMENT_XYLO       .text $00, $15, $91, $F6, $F6, $00, $00, $01, $07, $F6, $F6, $00
>392c44		07 f6 f6 00
>392c48		00 45 59 d3 f3 00 00 81		MIDIW31_INSTRUMENT_TUBEBELL   .text $00, $45, $59, $D3, $F3, $00, $00, $81, $87, $A3, $F3, $00
>392c50		87 a3 f3 00
>392c54		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SANTUR     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392c5c		00 00 00 00
>392c60		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392c68		00 00 00 00
>392c6c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN2     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392c74		00 00 00 00
>392c78		00 70 44 aa 18 34 00 b1		MIDIW31_INSTRUMENT_ORGAN3     .text $00, $70, $44, $AA, $18, $34, $00, $B1, $07, $8A, $08, $00
>392c80		07 8a 08 00
>392c84		00 23 93 97 23 34 01 b1		MIDIW31_INSTRUMENT_PIPEORG    .text $00, $23, $93, $97, $23, $34, $01, $B1, $07, $55, $14, $00
>392c8c		07 55 14 00
>392c90		00 61 13 97 04 30 01 b1		MIDIW31_INSTRUMENT_REEDORG    .text $00, $61, $13, $97, $04, $30, $01, $B1, $87, $55, $04, $00
>392c98		87 55 04 00
>392c9c		00 24 48 98 2a 30 01 b1		MIDIW31_INSTRUMENT_ACORDIAN   .text $00, $24, $48, $98, $2A, $30, $01, $B1, $07, $46, $1A, $00
>392ca4		07 46 1a 00
>392ca8		00 61 13 91 06 00 01 21		MIDIW31_INSTRUMENT_HARMONIC   .text $00, $61, $13, $91, $06, $00, $01, $21, $07, $61, $07, $00
>392cb0		07 61 07 00
>392cb4		00 21 13 71 06 00 00 a1		MIDIW31_INSTRUMENT_BANDNEON   .text $00, $21, $13, $71, $06, $00, $00, $A1, $90, $61, $07, $00
>392cbc		90 61 07 00
>392cc0		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_NYLONGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392cc8		00 00 00 00
>392ccc		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392cd4		00 00 00 00
>392cd8		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_JAZZGT     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392ce0		00 00 00 00
>392ce4		00 03 87 f6 22 36 01 21		MIDIW31_INSTRUMENT_CLEANGT    .text $00, $03, $87, $F6, $22, $36, $01, $21, $87, $F3, $F8, $00
>392cec		87 f3 f8 00
>392cf0		00 03 47 f9 54 30 00 21		MIDIW31_INSTRUMENT_MUTEGT     .text $00, $03, $47, $F9, $54, $30, $00, $21, $07, $F6, $3A, $00
>392cf8		07 f6 3a 00
>392cfc		00 23 4a 91 41 38 01 21		MIDIW31_INSTRUMENT_OVERDGT    .text $00, $23, $4A, $91, $41, $38, $01, $21, $0C, $84, $19, $00
>392d04		0c 84 19 00
>392d08		00 23 4a 95 19 32 01 21		MIDIW31_INSTRUMENT_DISTGT     .text $00, $23, $4A, $95, $19, $32, $01, $21, $07, $94, $19, $00
>392d10		07 94 19 00
>392d14		00 09 a1 20 4f 00 00 84		MIDIW31_INSTRUMENT_GTHARMS    .text $00, $09, $A1, $20, $4F, $00, $00, $84, $87, $D1, $F8, $00
>392d1c		87 d1 f8 00
>392d20		00 21 1e 94 06 00 00 a2		MIDIW31_INSTRUMENT_ACOUBASS   .text $00, $21, $1E, $94, $06, $00, $00, $A2, $07, $C3, $A6, $00
>392d28		07 c3 a6 00
>392d2c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FINGBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392d34		00 00 00 00
>392d38		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_PICKBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392d40		00 00 00 00
>392d44		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRETLESS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392d4c		00 00 00 00
>392d50		00 01 8b a1 9a 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS1   .text $00, $01, $8B, $A1, $9A, $38, $00, $21, $47, $F2, $DF, $00
>392d58		47 f2 df 00
>392d5c		00 21 8b a2 16 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS2   .text $00, $21, $8B, $A2, $16, $38, $00, $21, $0F, $A1, $DF, $00
>392d64		0f a1 df 00
>392d68		00 31 8b f4 e8 3a 00 31		MIDIW31_INSTRUMENT_SYNBASS1   .text $00, $31, $8B, $F4, $E8, $3A, $00, $31, $07, $F1, $78, $00
>392d70		07 f1 78 00
>392d74		00 31 12 f1 28 30 00 31		MIDIW31_INSTRUMENT_SYNBASS2   .text $00, $31, $12, $F1, $28, $30, $00, $31, $07, $F1, $18, $00
>392d7c		07 f1 18 00
>392d80		00 31 15 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLIN     .text $00, $31, $15, $DD, $13, $00, $01, $21, $07, $56, $26, $00
>392d88		07 56 26 00
>392d8c		00 31 16 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLA      .text $00, $31, $16, $DD, $13, $00, $01, $21, $07, $66, $06, $00
>392d94		07 66 06 00
>392d98		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELLO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392da0		00 00 00 00
>392da4		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CONTRAB    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392dac		00 00 00 00
>392db0		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TREMSTR    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392db8		00 00 00 00
>392dbc		00 02 1a f5 75 30 01 01		MIDIW31_INSTRUMENT_PIZZ       .text $00, $02, $1A, $F5, $75, $30, $01, $01, $87, $85, $35, $00
>392dc4		87 85 35 00
>392dc8		00 02 1d f5 75 30 01 01		MIDIW31_INSTRUMENT_HARP       .text $00, $02, $1D, $F5, $75, $30, $01, $01, $87, $F3, $F4, $00
>392dd0		87 f3 f4 00
>392dd4		00 10 41 f5 05 32 01 11		MIDIW31_INSTRUMENT_TIMPANI    .text $00, $10, $41, $F5, $05, $32, $01, $11, $07, $F2, $C3, $00
>392ddc		07 f2 c3 00
>392de0		00 21 9b b1 25 3c 01 a2		MIDIW31_INSTRUMENT_STRINGS    .text $00, $21, $9B, $B1, $25, $3C, $01, $A2, $08, $72, $08, $00
>392de8		08 72 08 00
>392dec		00 a1 98 7f 03 00 01 21		MIDIW31_INSTRUMENT_SLOWSTR    .text $00, $A1, $98, $7F, $03, $00, $01, $21, $07, $3F, $07, $01
>392df4		07 3f 07 01
>392df8		00 a1 93 c1 12 00 00 61		MIDIW31_INSTRUMENT_SYNSTR1    .text $00, $A1, $93, $C1, $12, $00, $00, $61, $07, $4F, $05, $00
>392e00		07 4f 05 00
>392e04		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNSTR2    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392e0c		00 00 00 00
>392e10		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CHOIR      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392e18		00 00 00 00
>392e1c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OOHS       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392e24		00 00 00 00
>392e28		00 71 57 54 05 3c 00 72		MIDIW31_INSTRUMENT_SYNVOX     .text $00, $71, $57, $54, $05, $3C, $00, $72, $07, $7A, $05, $00
>392e30		07 7a 05 00
>392e34		00 90 00 54 63 38 00 41		MIDIW31_INSTRUMENT_ORCHIT     .text $00, $90, $00, $54, $63, $38, $00, $41, $07, $A5, $45, $00
>392e3c		07 a5 45 00
>392e40		00 21 92 85 17 3c 00 21		MIDIW31_INSTRUMENT_TRUMPET    .text $00, $21, $92, $85, $17, $3C, $00, $21, $08, $8F, $09, $00
>392e48		08 8f 09 00
>392e4c		00 21 94 75 17 32 00 21		MIDIW31_INSTRUMENT_TROMBONE   .text $00, $21, $94, $75, $17, $32, $00, $21, $0C, $8F, $09, $00
>392e54		0c 8f 09 00
>392e58		00 21 94 76 15 00 00 61		MIDIW31_INSTRUMENT_TUBA       .text $00, $21, $94, $76, $15, $00, $00, $61, $07, $82, $37, $00
>392e60		07 82 37 00
>392e64		00 31 43 9e 17 00 01 21		MIDIW31_INSTRUMENT_MUTETRP    .text $00, $31, $43, $9E, $17, $00, $01, $21, $07, $62, $2C, $01
>392e6c		07 62 2c 01
>392e70		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRHORN     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392e78		00 00 00 00
>392e7c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BRASS1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392e84		00 00 00 00
>392e88		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNBRAS1   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392e90		00 00 00 00
>392e94		00 21 4d 54 3c 38 00 21		MIDIW31_INSTRUMENT_SYNBRAS2   .text $00, $21, $4D, $54, $3C, $38, $00, $21, $07, $A6, $1C, $00
>392e9c		07 a6 1c 00
>392ea0		00 31 8f 93 02 38 01 61		MIDIW31_INSTRUMENT_SOPSAX     .text $00, $31, $8F, $93, $02, $38, $01, $61, $07, $72, $0B, $00
>392ea8		07 72 0b 00
>392eac		00 31 8e 93 03 38 01 61		MIDIW31_INSTRUMENT_ALTOSAX    .text $00, $31, $8E, $93, $03, $38, $01, $61, $07, $72, $09, $00
>392eb4		07 72 09 00
>392eb8		00 31 91 93 03 30 01 61		MIDIW31_INSTRUMENT_TENSAX     .text $00, $31, $91, $93, $03, $30, $01, $61, $07, $82, $09, $00
>392ec0		07 82 09 00
>392ec4		00 31 8e 93 0f 00 01 61		MIDIW31_INSTRUMENT_BARISAX    .text $00, $31, $8E, $93, $0F, $00, $01, $61, $07, $72, $0F, $00
>392ecc		07 72 0f 00
>392ed0		00 21 4b aa 16 00 01 21		MIDIW31_INSTRUMENT_OBOE       .text $00, $21, $4B, $AA, $16, $00, $01, $21, $07, $8F, $0A, $00
>392ed8		07 8f 0a 00
>392edc		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ENGLHORN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392ee4		00 00 00 00
>392ee8		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSOON    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392ef0		00 00 00 00
>392ef4		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLARINET   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392efc		00 00 00 00
>392f00		00 e1 1f 85 5f 30 00 e1		MIDIW31_INSTRUMENT_PICCOLO    .text $00, $E1, $1F, $85, $5F, $30, $00, $E1, $07, $65, $1A, $00
>392f08		07 65 1a 00
>392f0c		00 e1 46 88 5f 30 00 e1		MIDIW31_INSTRUMENT_FLUTE1     .text $00, $E1, $46, $88, $5F, $30, $00, $E1, $07, $65, $1A, $00
>392f14		07 65 1a 00
>392f18		00 a1 9c 75 1f 32 00 21		MIDIW31_INSTRUMENT_RECORDER   .text $00, $A1, $9C, $75, $1F, $32, $00, $21, $07, $75, $0A, $00
>392f20		07 75 0a 00
>392f24		00 31 8b 84 58 30 00 21		MIDIW31_INSTRUMENT_PANFLUTE   .text $00, $31, $8B, $84, $58, $30, $00, $21, $07, $65, $1A, $00
>392f2c		07 65 1a 00
>392f30		00 e1 4c 66 56 00 00 a1		MIDIW31_INSTRUMENT_BOTTLEB    .text $00, $E1, $4C, $66, $56, $00, $00, $A1, $07, $65, $26, $00
>392f38		07 65 26 00
>392f3c		00 62 cb 76 46 00 00 a1		MIDIW31_INSTRUMENT_SHAKU      .text $00, $62, $CB, $76, $46, $00, $00, $A1, $07, $55, $36, $00
>392f44		07 55 36 00
>392f48		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WHISTLE    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f50		00 00 00 00
>392f54		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OCARINA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f5c		00 00 00 00
>392f60		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SQUARWAV   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f68		00 00 00 00
>392f6c		00 21 0e ff 0f 30 01 21		MIDIW31_INSTRUMENT_SAWWAV     .text $00, $21, $0E, $FF, $0F, $30, $01, $21, $07, $FF, $0F, $01
>392f74		07 ff 0f 01
>392f78		00 22 46 86 55 30 00 21		MIDIW31_INSTRUMENT_SYNCALLI   .text $00, $22, $46, $86, $55, $30, $00, $21, $87, $64, $18, $00
>392f80		87 64 18 00
>392f84		00 21 45 66 12 30 00 a1		MIDIW31_INSTRUMENT_CHIFLEAD   .text $00, $21, $45, $66, $12, $30, $00, $A1, $07, $96, $0A, $00
>392f8c		07 96 0a 00
>392f90		00 21 8b 92 2a 34 01 22		MIDIW31_INSTRUMENT_CHARANG    .text $00, $21, $8B, $92, $2A, $34, $01, $22, $07, $91, $2A, $00
>392f98		07 91 2a 00
>392f9c		00 a2 9e df 05 00 00 61		MIDIW31_INSTRUMENT_SOLOVOX    .text $00, $A2, $9E, $DF, $05, $00, $00, $61, $47, $6F, $07, $00
>392fa4		47 6f 07 00
>392fa8		00 20 1a ef 01 00 00 60		MIDIW31_INSTRUMENT_FIFTHSAW   .text $00, $20, $1A, $EF, $01, $00, $00, $60, $07, $8F, $06, $02
>392fb0		07 8f 06 02
>392fb4		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSLEAD   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392fbc		00 00 00 00
>392fc0		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FANTASIA   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392fc8		00 00 00 00
>392fcc		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WARMPAD    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392fd4		00 00 00 00
>392fd8		00 61 17 91 34 3c 00 61		MIDIW31_INSTRUMENT_POLYSYN    .text $00, $61, $17, $91, $34, $3C, $00, $61, $07, $55, $16, $00
>392fe0		07 55 16 00
>392fe4		00 71 5d 54 01 30 00 72		MIDIW31_INSTRUMENT_SPACEVOX   .text $00, $71, $5D, $54, $01, $30, $00, $72, $07, $6A, $03, $00
>392fec		07 6a 03 00
>392ff0		00 21 97 21 43 38 00 a2		MIDIW31_INSTRUMENT_BOWEDGLS   .text $00, $21, $97, $21, $43, $38, $00, $A2, $07, $42, $35, $00
>392ff8		07 42 35 00
>392ffc		00 a1 1c a1 77 30 01 21		MIDIW31_INSTRUMENT_METALPAD   .text $00, $A1, $1C, $A1, $77, $30, $01, $21, $07, $31, $47, $01
>393004		07 31 47 01
>393008		00 21 89 11 33 00 00 61		MIDIW31_INSTRUMENT_HALOPAD    .text $00, $21, $89, $11, $33, $00, $00, $61, $0A, $42, $25, $00
>393010		0a 42 25 00
>393014		00 a1 15 11 47 00 01 21		MIDIW31_INSTRUMENT_SWEEPPAD   .text $00, $A1, $15, $11, $47, $00, $01, $21, $07, $CF, $07, $00
>39301c		07 cf 07 00
>393020		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ICERAIN    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393028		00 00 00 00
>39302c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SOUNDTRK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393034		00 00 00 00
>393038		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CRYSTAL    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393040		00 00 00 00
>393044		00 22 92 b1 81 3c 00 61		MIDIW31_INSTRUMENT_ATMOSPH    .text $00, $22, $92, $B1, $81, $3C, $00, $61, $8A, $F2, $26, $00
>39304c		8a f2 26 00
>393050		00 41 4d f1 51 30 01 42		MIDIW31_INSTRUMENT_BRIGHT     .text $00, $41, $4D, $F1, $51, $30, $01, $42, $07, $F2, $F5, $00
>393058		07 f2 f5 00
>39305c		00 61 94 11 51 36 01 a3		MIDIW31_INSTRUMENT_GOBLIN     .text $00, $61, $94, $11, $51, $36, $01, $A3, $87, $11, $13, $00
>393064		87 11 13 00
>393068		00 61 8c 11 31 3a 00 a1		MIDIW31_INSTRUMENT_ECHODROP   .text $00, $61, $8C, $11, $31, $3A, $00, $A1, $87, $1D, $03, $00
>393070		87 1d 03 00
>393074		00 a4 4c f3 73 00 01 61		MIDIW31_INSTRUMENT_STARTHEM   .text $00, $A4, $4C, $F3, $73, $00, $01, $61, $07, $81, $23, $00
>39307c		07 81 23 00
>393080		00 02 85 d2 53 00 00 07		MIDIW31_INSTRUMENT_SITAR      .text $00, $02, $85, $D2, $53, $00, $00, $07, $0A, $F2, $F6, $01
>393088		0a f2 f6 01
>39308c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BANJO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393094		00 00 00 00
>393098		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SHAMISEN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3930a0		00 00 00 00
>3930a4		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_KOTO       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3930ac		00 00 00 00
>3930b0		00 04 4f fa 56 3c 00 01		MIDIW31_INSTRUMENT_KALIMBA    .text $00, $04, $4F, $FA, $56, $3C, $00, $01, $07, $C2, $05, $00
>3930b8		07 c2 05 00
>3930bc		00 21 49 7c 20 36 00 22		MIDIW31_INSTRUMENT_BAGPIPE    .text $00, $21, $49, $7C, $20, $36, $00, $22, $07, $6F, $0C, $01
>3930c4		07 6f 0c 01
>3930c8		00 31 85 dd 33 3a 01 21		MIDIW31_INSTRUMENT_FIDDLE     .text $00, $31, $85, $DD, $33, $3A, $01, $21, $07, $56, $16, $00
>3930d0		07 56 16 00
>3930d4		00 20 04 da 05 30 02 21		MIDIW31_INSTRUMENT_SHANNAI    .text $00, $20, $04, $DA, $05, $30, $02, $21, $88, $8F, $0B, $00
>3930dc		88 8f 0b 00
>3930e0		00 05 6a f1 e5 00 00 03		MIDIW31_INSTRUMENT_TINKLBEL   .text $00, $05, $6A, $F1, $E5, $00, $00, $03, $87, $C3, $E5, $00
>3930e8		87 c3 e5 00
>3930ec		00 07 15 ec 26 00 00 02		MIDIW31_INSTRUMENT_AGOGO      .text $00, $07, $15, $EC, $26, $00, $00, $02, $07, $F8, $16, $00
>3930f4		07 f8 16 00
>3930f8		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELDRM   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393100		00 00 00 00
>393104		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WOODBLOK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39310c		00 00 00 00
>393110		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TAIKO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393118		00 00 00 00
>39311c		00 11 41 f8 47 34 02 10		MIDIW31_INSTRUMENT_MELOTOM    .text $00, $11, $41, $F8, $47, $34, $02, $10, $0A, $F3, $03, $00
>393124		0a f3 03 00
>393128		00 01 8e f1 06 3e 02 10		MIDIW31_INSTRUMENT_SYNDRUM    .text $00, $01, $8E, $F1, $06, $3E, $02, $10, $07, $F3, $02, $00
>393130		07 f3 02 00
>393134		00 0e 00 1f 00 3e 00 c0		MIDIW31_INSTRUMENT_REVRSCYM   .text $00, $0E, $00, $1F, $00, $3E, $00, $C0, $07, $1F, $FF, $03
>39313c		07 1f ff 03
>393140		00 06 80 f8 24 38 00 03		MIDIW31_INSTRUMENT_FRETNOIS   .text $00, $06, $80, $F8, $24, $38, $00, $03, $8F, $56, $84, $02
>393148		8f 56 84 02
>39314c		00 0e 00 f8 00 00 00 d0		MIDIW31_INSTRUMENT_BRTHNOIS   .text $00, $0E, $00, $F8, $00, $00, $00, $D0, $0C, $34, $04, $03
>393154		0c 34 04 03
>393158		00 0e 00 f6 00 00 00 c0		MIDIW31_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F6, $00, $00, $00, $C0, $07, $1F, $02, $03
>393160		07 1f 02 03
>393164		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BIRDS      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39316c		00 00 00 00
>393170		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TELEPHON   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393178		00 00 00 00
>39317c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HELICOPT   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393184		00 00 00 00
>393188		00 26 00 ff 01 3e 00 e4		MIDIW31_INSTRUMENT_APPLAUSE   .text $00, $26, $00, $FF, $01, $3E, $00, $E4, $07, $12, $16, $01
>393190		07 12 16 01
>393194		00 00 00 f3 f0 3e 00 00		MIDIW31_INSTRUMENT_GUNSHOT    .text $00, $00, $00, $F3, $F0, $3E, $00, $00, $07, $F6, $C9, $02
>39319c		07 f6 c9 02
>3931a0		a0 2b 39 00 ac 2b 39 00		midiInstrumentsw31 .dword MIDIW31_INSTRUMENT_PIANO1,   MIDIW31_INSTRUMENT_PIANO2,   MIDIW31_INSTRUMENT_PIANO3,   MIDIW31_INSTRUMENT_HONKTONK, MIDIW31_INSTRUMENT_EP1, MIDIW31_INSTRUMENT_EP2
>3931a8		b8 2b 39 00 c4 2b 39 00 d0 2b 39 00 dc 2b 39 00
>3931b8		e8 2b 39 00 f4 2b 39 00		                   .dword MIDIW31_INSTRUMENT_HARPSIC,  MIDIW31_INSTRUMENT_CLAVIC,   MIDIW31_INSTRUMENT_CELESTA,  MIDIW31_INSTRUMENT_GLOCK,    MIDIW31_INSTRUMENT_MUSICBOX, MIDIW31_INSTRUMENT_VIBES
>3931c0		00 2c 39 00 0c 2c 39 00 18 2c 39 00 24 2c 39 00
>3931d0		30 2c 39 00 3c 2c 39 00			                 .dword MIDIW31_INSTRUMENT_MARIMBA,  MIDIW31_INSTRUMENT_XYLO,     MIDIW31_INSTRUMENT_TUBEBELL, MIDIW31_INSTRUMENT_SANTUR,   MIDIW31_INSTRUMENT_ORGAN1,   MIDIW31_INSTRUMENT_ORGAN2
>3931d8		48 2c 39 00 54 2c 39 00 60 2c 39 00 6c 2c 39 00
>3931e8		78 2c 39 00 84 2c 39 00			                 .dword MIDIW31_INSTRUMENT_ORGAN3,   MIDIW31_INSTRUMENT_PIPEORG,  MIDIW31_INSTRUMENT_REEDORG,  MIDIW31_INSTRUMENT_ACORDIAN, MIDIW31_INSTRUMENT_HARMONIC, MIDIW31_INSTRUMENT_BANDNEON
>3931f0		90 2c 39 00 9c 2c 39 00 a8 2c 39 00 b4 2c 39 00
>393200		c0 2c 39 00 cc 2c 39 00		                     .dword MIDIW31_INSTRUMENT_NYLONGT,  MIDIW31_INSTRUMENT_STEELGT,  MIDIW31_INSTRUMENT_JAZZGT,   MIDIW31_INSTRUMENT_CLEANGT,  MIDIW31_INSTRUMENT_MUTEGT,   MIDIW31_INSTRUMENT_OVERDGT
>393208		d8 2c 39 00 e4 2c 39 00 f0 2c 39 00 fc 2c 39 00
>393218		08 2d 39 00 14 2d 39 00			                 .dword MIDIW31_INSTRUMENT_DISTGT,   MIDIW31_INSTRUMENT_GTHARMS,  MIDIW31_INSTRUMENT_ACOUBASS, MIDIW31_INSTRUMENT_FINGBASS, MIDIW31_INSTRUMENT_PICKBASS, MIDIW31_INSTRUMENT_FRETLESS
>393220		20 2d 39 00 2c 2d 39 00 38 2d 39 00 44 2d 39 00
>393230		50 2d 39 00 5c 2d 39 00			                 .dword MIDIW31_INSTRUMENT_SLAPBAS1, MIDIW31_INSTRUMENT_SLAPBAS2, MIDIW31_INSTRUMENT_SYNBASS1, MIDIW31_INSTRUMENT_SYNBASS2, MIDIW31_INSTRUMENT_VIOLIN,   MIDIW31_INSTRUMENT_VIOLA
>393238		68 2d 39 00 74 2d 39 00 80 2d 39 00 8c 2d 39 00
>393248		98 2d 39 00 a4 2d 39 00			                 .dword MIDIW31_INSTRUMENT_CELLO,    MIDIW31_INSTRUMENT_CONTRAB,  MIDIW31_INSTRUMENT_TREMSTR,  MIDIW31_INSTRUMENT_PIZZ,     MIDIW31_INSTRUMENT_HARP,     MIDIW31_INSTRUMENT_TIMPANI
>393250		b0 2d 39 00 bc 2d 39 00 c8 2d 39 00 d4 2d 39 00
>393260		e0 2d 39 00 ec 2d 39 00			                 .dword MIDIW31_INSTRUMENT_STRINGS,  MIDIW31_INSTRUMENT_SLOWSTR,  MIDIW31_INSTRUMENT_SYNSTR1,  MIDIW31_INSTRUMENT_SYNSTR2,  MIDIW31_INSTRUMENT_CHOIR,    MIDIW31_INSTRUMENT_OOHS
>393268		f8 2d 39 00 04 2e 39 00 10 2e 39 00 1c 2e 39 00
>393278		28 2e 39 00 34 2e 39 00			                 .dword MIDIW31_INSTRUMENT_SYNVOX,   MIDIW31_INSTRUMENT_ORCHIT,   MIDIW31_INSTRUMENT_TRUMPET,  MIDIW31_INSTRUMENT_TROMBONE, MIDIW31_INSTRUMENT_TUBA,     MIDIW31_INSTRUMENT_MUTETRP
>393280		40 2e 39 00 4c 2e 39 00 58 2e 39 00 64 2e 39 00
>393290		70 2e 39 00 7c 2e 39 00			                 .dword MIDIW31_INSTRUMENT_FRHORN,   MIDIW31_INSTRUMENT_BRASS1,   MIDIW31_INSTRUMENT_SYNBRAS1, MIDIW31_INSTRUMENT_SYNBRAS2, MIDIW31_INSTRUMENT_SOPSAX,   MIDIW31_INSTRUMENT_ALTOSAX
>393298		88 2e 39 00 94 2e 39 00 a0 2e 39 00 ac 2e 39 00
>3932a8		b8 2e 39 00 c4 2e 39 00			                 .dword MIDIW31_INSTRUMENT_TENSAX,   MIDIW31_INSTRUMENT_BARISAX,  MIDIW31_INSTRUMENT_OBOE,     MIDIW31_INSTRUMENT_ENGLHORN, MIDIW31_INSTRUMENT_BASSOON,  MIDIW31_INSTRUMENT_CLARINET
>3932b0		d0 2e 39 00 dc 2e 39 00 e8 2e 39 00 f4 2e 39 00
>3932c0		00 2f 39 00 0c 2f 39 00			                 .dword MIDIW31_INSTRUMENT_PICCOLO,  MIDIW31_INSTRUMENT_FLUTE1,   MIDIW31_INSTRUMENT_RECORDER, MIDIW31_INSTRUMENT_PANFLUTE, MIDIW31_INSTRUMENT_BOTTLEB,  MIDIW31_INSTRUMENT_SHAKU
>3932c8		18 2f 39 00 24 2f 39 00 30 2f 39 00 3c 2f 39 00
>3932d8		48 2f 39 00 54 2f 39 00			                 .dword MIDIW31_INSTRUMENT_WHISTLE,  MIDIW31_INSTRUMENT_OCARINA,  MIDIW31_INSTRUMENT_SQUARWAV, MIDIW31_INSTRUMENT_SAWWAV,   MIDIW31_INSTRUMENT_SYNCALLI, MIDIW31_INSTRUMENT_CHIFLEAD
>3932e0		60 2f 39 00 6c 2f 39 00 78 2f 39 00 84 2f 39 00
>3932f0		90 2f 39 00 9c 2f 39 00			                 .dword MIDIW31_INSTRUMENT_CHARANG,  MIDIW31_INSTRUMENT_SOLOVOX,  MIDIW31_INSTRUMENT_FIFTHSAW, MIDIW31_INSTRUMENT_BASSLEAD, MIDIW31_INSTRUMENT_FANTASIA, MIDIW31_INSTRUMENT_WARMPAD
>3932f8		a8 2f 39 00 b4 2f 39 00 c0 2f 39 00 cc 2f 39 00
>393308		d8 2f 39 00 e4 2f 39 00			                 .dword MIDIW31_INSTRUMENT_POLYSYN,  MIDIW31_INSTRUMENT_SPACEVOX, MIDIW31_INSTRUMENT_BOWEDGLS, MIDIW31_INSTRUMENT_METALPAD, MIDIW31_INSTRUMENT_HALOPAD,  MIDIW31_INSTRUMENT_SWEEPPAD
>393310		f0 2f 39 00 fc 2f 39 00 08 30 39 00 14 30 39 00
>393320		20 30 39 00 2c 30 39 00			                 .dword MIDIW31_INSTRUMENT_ICERAIN,  MIDIW31_INSTRUMENT_SOUNDTRK, MIDIW31_INSTRUMENT_CRYSTAL,  MIDIW31_INSTRUMENT_ATMOSPH,  MIDIW31_INSTRUMENT_BRIGHT,   MIDIW31_INSTRUMENT_GOBLIN
>393328		38 30 39 00 44 30 39 00 50 30 39 00 5c 30 39 00
>393338		68 30 39 00 74 30 39 00			                 .dword MIDIW31_INSTRUMENT_ECHODROP, MIDIW31_INSTRUMENT_STARTHEM, MIDIW31_INSTRUMENT_SITAR,    MIDIW31_INSTRUMENT_BANJO,    MIDIW31_INSTRUMENT_SHAMISEN, MIDIW31_INSTRUMENT_KOTO
>393340		80 30 39 00 8c 30 39 00 98 30 39 00 a4 30 39 00
>393350		b0 30 39 00 bc 30 39 00			                 .dword MIDIW31_INSTRUMENT_KALIMBA,  MIDIW31_INSTRUMENT_BAGPIPE,  MIDIW31_INSTRUMENT_FIDDLE,   MIDIW31_INSTRUMENT_SHANNAI,  MIDIW31_INSTRUMENT_TINKLBEL, MIDIW31_INSTRUMENT_AGOGO
>393358		c8 30 39 00 d4 30 39 00 e0 30 39 00 ec 30 39 00
>393368		f8 30 39 00 04 31 39 00			                 .dword MIDIW31_INSTRUMENT_STEELDRM, MIDIW31_INSTRUMENT_WOODBLOK, MIDIW31_INSTRUMENT_TAIKO,    MIDIW31_INSTRUMENT_MELOTOM,  MIDIW31_INSTRUMENT_SYNDRUM,  MIDIW31_INSTRUMENT_REVRSCYM
>393370		10 31 39 00 1c 31 39 00 28 31 39 00 34 31 39 00
>393380		40 31 39 00 4c 31 39 00			                 .dword MIDIW31_INSTRUMENT_FRETNOIS, MIDIW31_INSTRUMENT_BRTHNOIS, MIDIW31_INSTRUMENT_SEASHORE, MIDIW31_INSTRUMENT_BIRDS,    MIDIW31_INSTRUMENT_TELEPHON, MIDIW31_INSTRUMENT_HELICOPT
>393388		58 31 39 00 64 31 39 00 70 31 39 00 7c 31 39 00
>393398		88 31 39 00 94 31 39 00			                 .dword MIDIW31_INSTRUMENT_APPLAUSE, MIDIW31_INSTRUMENT_GUNSHOT

;******  Return to file: src\Libraries/OPL2_Library.asm

>3933a0		3c 42 44 45 47 49 4b 4c		NOTE_INTRO  .byte  $3C, $42, $44, $45, $47, $49, $4B, $4C
.3933a8						IOPL2_TONE_TEST
.3933a8		e2 20		sep #$20	                SEP #$20        ; set A short
.3933aa		c2 10		rep #$10	                REP #$10        ; set X long
.3933ac		a2 00 00	ldx #$0000	                LDX #0
.3933af						OPL2_TONE_TESTING_L1
.3933af		bf a0 33 39	lda $3933a0,x	                LDA NOTE_INTRO, X
.3933b3		29 0f		and #$0f	                AND #$F
.3933b5		85 30		sta $30		                STA OPL2_NOTE ; start at C
.3933b7		bf a0 33 39	lda $3933a0,x	                LDA NOTE_INTRO, X
.3933bb		29 70		and #$70	                AND #$70
.3933bd		4a		lsr a		                LSR A
.3933be		4a		lsr a		                LSR A
.3933bf		4a		lsr a		                LSR A
.3933c0		4a		lsr a		                LSR A
.3933c1		85 31		sta $31		                STA OPL2_OCTAVE
.3933c3		8a		txa		                TXA
.3933c4		29 03		and #$03	                AND #$03        ; replace modulo 3 -  play each note on a different channel
.3933c6		85 27		sta $27		                STA OPL2_CHANNEL
.3933c8		22 98 35 39	jsl $393598	                JSL OPL2_PLAYNOTE
.3933cc		a0 00 00	ldy #$0000	                LDY #$0000
.3933cf						OPL2_TONE_TESTING_L2
.3933cf		ea		nop		                NOP
.3933d0		ea		nop		                NOP
.3933d1		ea		nop		                NOP
.3933d2		ea		nop		                NOP
.3933d3		c8		iny		                INY
.3933d4		c0 ff ff	cpy #$ffff	                CPY #$FFFF
.3933d7		d0 f6		bne $3933cf	                BNE OPL2_TONE_TESTING_L2
.3933d9		e8		inx		                INX
.3933da		e0 08 00	cpx #$0008	                CPX #8
.3933dd		d0 d0		bne $3933af	                BNE OPL2_TONE_TESTING_L1
.3933df		6b		rtl		                RTL
.3933e0						OPL2_INIT
.3933e0		c2 20		rep #$20	                REP #$20        ; set A long
.3933e2		a9 00 00	lda #$0000	                LDA #$0000
.3933e5		85 28		sta $28		                STA OPL2_REG_REGION
.3933e7		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.3933e9		85 30		sta $30		                STA OPL2_NOTE
.3933eb		85 32		sta $32		                STA OPL2_PARAMETER0
.3933ed		85 34		sta $34		                STA OPL2_PARAMETER2
.3933ef		a9 6a 13	lda #$136a	                LDA #<>INSTRUMENT_ACCORDN
.3933f2		85 50		sta $50		                STA RAD_ADDR
.3933f4		a9 39 00	lda #$0039	                LDA #<`INSTRUMENT_ACCORDN
.3933f7		85 52		sta $52		                STA RAD_ADDR + 2
.3933f9		e2 20		sep #$20	                SEP #$20        ; set A short
.3933fb		6b		rtl		                RTL
.3933fc						OPL2_Reset
.3933fc		6b		rtl		                RTL
.3933fd						OPL2_Get_FrequencyBlock
.3933fd		6b		rtl		                RTL
.3933fe						OPL2_GET_REGISTER
.3933fe		48		pha		                PHA             ; begin setdp macro
.3933ff		08		php		                PHP
.393400		c2 20		rep #$20	                REP #$20        ; set A long
.393402		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393405		5b		tcd		                TCD
.393406		28		plp		                PLP
.393407		68		pla		                PLA             ; end setdp macro
.393408		c2 20		rep #$20	                REP #$20        ; set A long
.39340a		18		clc		              CLC
.39340b		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39340e		65 32		adc $32		              ADC OPL2_PARAMETER0
.393410		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393412		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393415		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393417		e2 20		sep #$20	                SEP #$20        ; set A short
.393419		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39341b		6b		rtl		              RTL
.39341c						OPL2_GET_WAVEFORM_SELECT
.39341c		48		pha		                PHA             ; begin setdp macro
.39341d		08		php		                PHP
.39341e		c2 20		rep #$20	                REP #$20        ; set A long
.393420		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393423		5b		tcd		                TCD
.393424		28		plp		                PLP
.393425		68		pla		                PLA             ; end setdp macro
.393426		c2 20		rep #$20	                REP #$20        ; set A long
.393428		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39342b		69 01 00	adc #$0001	              ADC #$0001
.39342e		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393430		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393433		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393435		e2 20		sep #$20	                SEP #$20        ; set A short
.393437		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393439		29 20		and #$20	              AND #$20
.39343b		6b		rtl		              RTL
.39343c						OPL2_GET_SCALINGLEVEL
.39343c		48		pha		                PHA             ; begin setdp macro
.39343d		08		php		                PHP
.39343e		c2 20		rep #$20	                REP #$20        ; set A long
.393440		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393443		5b		tcd		                TCD
.393444		28		plp		                PLP
.393445		68		pla		                PLA             ; end setdp macro
.393446		c2 20		rep #$20	                REP #$20        ; set A long
.393448		a9 40 00	lda #$0040	              LDA #$0040  ;
.39344b		85 28		sta $28		              STA OPL2_REG_REGION
.39344d		20 ff 3c	jsr $393cff	              JSR OPL2_GET_REG_OFFSET
.393450		e2 20		sep #$20	                SEP #$20        ; set A short
.393452		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393454		29 c0		and #$c0	              AND #$C0
.393456		4a		lsr a		              LSR A
.393457		4a		lsr a		              LSR A
.393458		4a		lsr a		              LSR A
.393459		4a		lsr a		              LSR A
.39345a		4a		lsr a		              LSR A
.39345b		4a		lsr a		              LSR A
.39345c		6b		rtl		              RTL
.39345d						OPL2_GET_BLOCK
.39345d		48		pha		                PHA             ; begin setdp macro
.39345e		08		php		                PHP
.39345f		c2 20		rep #$20	                REP #$20        ; set A long
.393461		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393464		5b		tcd		                TCD
.393465		28		plp		                PLP
.393466		68		pla		                PLA             ; end setdp macro
.393467		e2 20		sep #$20	                SEP #$20        ; set A short
.393469		18		clc		              CLC
.39346a		a5 27		lda $27		              LDA OPL2_CHANNEL
.39346c		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.39346e		69 b0		adc #$b0	              ADC #$B0
.393470		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393472		a9 00		lda #$00	              LDA #$00
.393474		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393476		c2 30		rep #$30	                REP #$30        ; set A&X long
.393478		18		clc		              CLC
.393479		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39347c		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.39347e		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393480		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393483		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393485		e2 20		sep #$20	                SEP #$20        ; set A short
.393487		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393489		29 1c		and #$1c	              AND #$1C
.39348b		4a		lsr a		              LSR A
.39348c		4a		lsr a		              LSR A
.39348d		6b		rtl		              RTL
.39348e						OPL2_GET_KEYON
.39348e		48		pha		                PHA             ; begin setdp macro
.39348f		08		php		                PHP
.393490		c2 20		rep #$20	                REP #$20        ; set A long
.393492		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393495		5b		tcd		                TCD
.393496		28		plp		                PLP
.393497		68		pla		                PLA             ; end setdp macro
.393498		e2 20		sep #$20	                SEP #$20        ; set A short
.39349a		18		clc		              CLC
.39349b		a5 27		lda $27		              LDA OPL2_CHANNEL
.39349d		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.39349f		69 b0		adc #$b0	              ADC #$B0
.3934a1		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.3934a3		a9 00		lda #$00	              LDA #$00
.3934a5		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.3934a7		c2 30		rep #$30	                REP #$30        ; set A&X long
.3934a9		18		clc		              CLC
.3934aa		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3934ad		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.3934af		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3934b1		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3934b4		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3934b6		e2 20		sep #$20	                SEP #$20        ; set A short
.3934b8		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3934ba		29 20		and #$20	              AND #$20
.3934bc		6b		rtl		              RTL
.3934bd						OPL2_GET_FEEDBACK
.3934bd		48		pha		                PHA             ; begin setdp macro
.3934be		08		php		                PHP
.3934bf		c2 20		rep #$20	                REP #$20        ; set A long
.3934c1		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3934c4		5b		tcd		                TCD
.3934c5		28		plp		                PLP
.3934c6		68		pla		                PLA             ; end setdp macro
.3934c7		e2 20		sep #$20	                SEP #$20        ; set A short
.3934c9		18		clc		              CLC
.3934ca		a5 27		lda $27		              LDA OPL2_CHANNEL
.3934cc		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.3934ce		69 c0		adc #$c0	              ADC #$C0
.3934d0		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.3934d2		a9 00		lda #$00	              LDA #$00
.3934d4		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.3934d6		c2 30		rep #$30	                REP #$30        ; set A&X long
.3934d8		18		clc		              CLC
.3934d9		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3934dc		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.3934de		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3934e0		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3934e3		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3934e5		e2 20		sep #$20	                SEP #$20        ; set A short
.3934e7		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3934e9		29 e0		and #$e0	              AND #$E0
.3934eb		4a		lsr a		              LSR
.3934ec		6b		rtl		              RTL
.3934ed						OPL2_GET_SYNTHMODE
.3934ed		48		pha		                PHA             ; begin setdp macro
.3934ee		08		php		                PHP
.3934ef		c2 20		rep #$20	                REP #$20        ; set A long
.3934f1		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3934f4		5b		tcd		                TCD
.3934f5		28		plp		                PLP
.3934f6		68		pla		                PLA             ; end setdp macro
.3934f7		e2 20		sep #$20	                SEP #$20        ; set A short
.3934f9		18		clc		              CLC
.3934fa		a5 27		lda $27		              LDA OPL2_CHANNEL
.3934fc		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.3934fe		69 c0		adc #$c0	              ADC #$C0
.393500		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393502		a9 00		lda #$00	              LDA #$00
.393504		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393506		c2 30		rep #$30	                REP #$30        ; set A&X long
.393508		18		clc		              CLC
.393509		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39350c		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.39350e		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393510		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393513		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393515		e2 20		sep #$20	                SEP #$20        ; set A short
.393517		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393519		29 01		and #$01	              AND #$01
.39351b		6b		rtl		              RTL
.39351c						OPL2_GET_DEEPTREMOLO
.39351c		48		pha		                PHA             ; begin setdp macro
.39351d		08		php		                PHP
.39351e		c2 20		rep #$20	                REP #$20        ; set A long
.393520		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393523		5b		tcd		                TCD
.393524		28		plp		                PLP
.393525		68		pla		                PLA             ; end setdp macro
.393526		c2 20		rep #$20	                REP #$20        ; set A long
.393528		a9 bd 00	lda #$00bd	              LDA #$00BD;
.39352b		85 28		sta $28		              STA OPL2_REG_REGION
.39352d		20 ff 3c	jsr $393cff	              JSR OPL2_GET_REG_OFFSET
.393530		e2 20		sep #$20	                SEP #$20        ; set A short
.393532		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393534		29 80		and #$80	              AND #$80
.393536		6b		rtl		              RTL
.393537						OPL2_GET_DEEPVIBRATO
.393537		48		pha		                PHA             ; begin setdp macro
.393538		08		php		                PHP
.393539		c2 20		rep #$20	                REP #$20        ; set A long
.39353b		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39353e		5b		tcd		                TCD
.39353f		28		plp		                PLP
.393540		68		pla		                PLA             ; end setdp macro
.393541		c2 20		rep #$20	                REP #$20        ; set A long
.393543		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393546		69 bd 00	adc #$00bd	              ADC #$00BD
.393549		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39354b		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.39354e		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393550		e2 20		sep #$20	                SEP #$20        ; set A short
.393552		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393554		29 40		and #$40	              AND #$40
.393556		6b		rtl		              RTL
.393557						OPL2_GET_PERCUSSION
.393557		48		pha		                PHA             ; begin setdp macro
.393558		08		php		                PHP
.393559		c2 20		rep #$20	                REP #$20        ; set A long
.39355b		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39355e		5b		tcd		                TCD
.39355f		28		plp		                PLP
.393560		68		pla		                PLA             ; end setdp macro
.393561		c2 20		rep #$20	                REP #$20        ; set A long
.393563		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393566		69 bd 00	adc #$00bd	              ADC #$00BD
.393569		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39356b		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.39356e		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393570		e2 20		sep #$20	                SEP #$20        ; set A short
.393572		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393574		29 20		and #$20	              AND #$20
.393576		6b		rtl		              RTL
.393577						OPL2_GET_DRUMS
.393577		48		pha		                PHA             ; begin setdp macro
.393578		08		php		                PHP
.393579		c2 20		rep #$20	                REP #$20        ; set A long
.39357b		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39357e		5b		tcd		                TCD
.39357f		28		plp		                PLP
.393580		68		pla		                PLA             ; end setdp macro
.393581		c2 20		rep #$20	                REP #$20        ; set A long
.393583		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393586		69 bd 00	adc #$00bd	              ADC #$00BD
.393589		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39358b		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.39358e		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393590		e2 20		sep #$20	                SEP #$20        ; set A short
.393592		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393594		29 1f		and #$1f	              AND #$1F
.393596		6b		rtl		              RTL
.393597						OPL2_Get_WaveForm
.393597		6b		rtl		                RTL
.393598						OPL2_PLAYNOTE
.393598		48		pha		                PHA             ; begin setdp macro
.393599		08		php		                PHP
.39359a		c2 20		rep #$20	                REP #$20        ; set A long
.39359c		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39359f		5b		tcd		                TCD
.3935a0		28		plp		                PLP
.3935a1		68		pla		                PLA             ; end setdp macro
.3935a2		e2 20		sep #$20	                SEP #$20        ; set A short
.3935a4		da		phx		                PHX
.3935a5		a9 00		lda #$00	                LDA #$00
.3935a7		85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.3935a9		20 80 3b	jsr $393b80	                JSR OPL2_SET_KEYON
.3935ac		20 45 3b	jsr $393b45	                JSR OPL2_SET_BLOCK  ; OPL2_SET_BLOCK Already to OPL2_OCTAVE
.3935af		e2 10		sep #$10	                SEP #$10        ; set X short
.3935b1		a5 30		lda $30		                LDA OPL2_NOTE
.3935b3		3a		dec a		                DEC A
.3935b4		0a		asl a		                ASL A
.3935b5		aa		tax		                TAX
.3935b6		bf 2f 13 39	lda $39132f,x	                LDA @lnoteFNumbers,X
.3935ba		85 32		sta $32		                STA OPL2_PARAMETER0 ; Store the 8it in Param OPL2_PARAMETER0
.3935bc		e8		inx		                INX
.3935bd		bf 2f 13 39	lda $39132f,x	                LDA @lnoteFNumbers,X
.3935c1		85 33		sta $33		                STA OPL2_PARAMETER1 ; Store the 8bit in Param OPL2_PARAMETER1
.3935c3		22 c3 3a 39	jsl $393ac3	                JSL OPL2_SET_FNUMBER
.3935c7		a9 01		lda #$01	                LDA #$01
.3935c9		85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.3935cb		20 80 3b	jsr $393b80	                JSR OPL2_SET_KEYON
.3935ce		c2 10		rep #$10	                REP #$10        ; set X long
.3935d0		fa		plx		                PLX
.3935d1		6b		rtl		                RTL
.3935d2						OPL2_PLAYDRUM
.3935d2		6b		rtl		                RTL
.3935d3						OPL2_SET_INSTRUMENT
.3935d3		48		pha		                PHA             ; begin setdp macro
.3935d4		08		php		                PHP
.3935d5		c2 20		rep #$20	                REP #$20        ; set A long
.3935d7		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3935da		5b		tcd		                TCD
.3935db		28		plp		                PLP
.3935dc		68		pla		                PLA             ; end setdp macro
.3935dd		38		sec		              SEC ; Set the WaveFormSelect to True
.3935de		22 c1 37 39	jsl $3937c1	              JSL OPL2_SET_WAVEFORMSELECT;
.3935e2		e2 20		sep #$20	                SEP #$20        ; set A short
.3935e4		c2 10		rep #$10	                REP #$10        ; set X long
.3935e6		a0 00 00	ldy #$0000	              LDY #$0000
.3935e9		a2 00 00	ldx #$0000	              LDX #$0000
.3935ec		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO],Y ; Pointer Location 0 in Instrument Profile
.3935ee		85 35		sta $35		              STA OPL2_PARAMETER3
.3935f0		c8		iny		              INY
.3935f1		c9 06		cmp #$06	              CMP #$06
.3935f3		d0 03		bne $3935f8	              BNE PERCUSSION_NEXT07
.3935f5		82 70 01	brl $393768	              BRL Percussion_6
.3935f8						PERCUSSION_NEXT07
.3935f8		c9 07		cmp #$07	              CMP #$07
.3935fa		d0 03		bne $3935ff	              BNE PERCUSSION_NEXT08
.3935fc		82 44 01	brl $393743	              BRL Percussion_7
.3935ff						PERCUSSION_NEXT08
.3935ff		c9 08		cmp #$08	              CMP #$08
.393601		d0 03		bne $393606	              BNE PERCUSSION_NEXT09
.393603		82 18 01	brl $39371e	              BRL Percussion_8
.393606						PERCUSSION_NEXT09
.393606		c9 09		cmp #$09	              CMP #$09
.393608		d0 03		bne $39360d	              BNE PERCUSSION_NEXT0A
.39360a		82 ec 00	brl $3936f9	              BRL Percussion_9
.39360d						PERCUSSION_NEXT0A
.39360d		c9 0a		cmp #$0a	              CMP #$0A
.39360f		d0 03		bne $393614	              BNE Percussion_Default
.393611		82 c0 00	brl $3936d4	              BRL Percussion_A
.393614						Percussion_Default
.393614		a9 00		lda #$00	              LDA #$00
.393616		85 26		sta $26		              STA OPL2_OPERATOR
.393618		c2 20		rep #$20	                REP #$20        ; set A long
.39361a		a9 20 00	lda #$0020	              LDA #$0020;
.39361d		85 28		sta $28		              STA OPL2_REG_REGION
.39361f		20 ff 3c	jsr $393cff	              JSR OPL2_GET_REG_OFFSET
.393622		e2 20		sep #$20	                SEP #$20        ; set A short
.393624		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393626		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393628		c8		iny		              INY
.393629		c2 20		rep #$20	                REP #$20        ; set A long
.39362b		a9 40 00	lda #$0040	              LDA #$0040;
.39362e		85 28		sta $28		              STA OPL2_REG_REGION
.393630		20 ff 3c	jsr $393cff	              JSR OPL2_GET_REG_OFFSET
.393633		e2 20		sep #$20	                SEP #$20        ; set A short
.393635		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393637		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393639		c8		iny		              INY
.39363a		c2 20		rep #$20	                REP #$20        ; set A long
.39363c		a9 60 00	lda #$0060	              LDA #$0060;
.39363f		85 28		sta $28		              STA OPL2_REG_REGION
.393641		20 ff 3c	jsr $393cff	              JSR OPL2_GET_REG_OFFSET
.393644		e2 20		sep #$20	                SEP #$20        ; set A short
.393646		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393648		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39364a		c8		iny		              INY
.39364b		c2 20		rep #$20	                REP #$20        ; set A long
.39364d		a9 80 00	lda #$0080	              LDA #$0080;
.393650		85 28		sta $28		              STA OPL2_REG_REGION
.393652		20 ff 3c	jsr $393cff	              JSR OPL2_GET_REG_OFFSET
.393655		e2 20		sep #$20	                SEP #$20        ; set A short
.393657		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393659		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39365b		c8		iny		              INY
.39365c		c2 20		rep #$20	                REP #$20        ; set A long
.39365e		a9 e0 00	lda #$00e0	              LDA #$00E0;
.393661		85 28		sta $28		              STA OPL2_REG_REGION
.393663		20 ff 3c	jsr $393cff	              JSR OPL2_GET_REG_OFFSET
.393666		e2 20		sep #$20	                SEP #$20        ; set A short
.393668		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.39366a		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39366c		c8		iny		              INY
.39366d		e2 10		sep #$10	                SEP #$10        ; set X short
.39366f		a5 27		lda $27		              LDA OPL2_CHANNEL
.393671		29 0f		and #$0f	              AND #$0F
.393673		aa		tax		              TAX
.393674		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 6 in Instrument Profile
.393676		9f c0 e6 af	sta $afe6c0,x	              STA @lOPL3_R_FEEDBACK,X
.39367a		c8		iny		              INY
.39367b		a9 01		lda #$01	              LDA #$01
.39367d		85 26		sta $26		              STA OPL2_OPERATOR
.39367f		c2 20		rep #$20	                REP #$20        ; set A long
.393681		a9 20 00	lda #$0020	              LDA #$0020;
.393684		85 28		sta $28		              STA OPL2_REG_REGION
.393686		20 ff 3c	jsr $393cff	              JSR OPL2_GET_REG_OFFSET
.393689		e2 20		sep #$20	                SEP #$20        ; set A short
.39368b		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 7 in Instrument Profile
.39368d		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39368f		c8		iny		              INY
.393690		c2 20		rep #$20	                REP #$20        ; set A long
.393692		a9 40 00	lda #$0040	              LDA #$0040;
.393695		85 28		sta $28		              STA OPL2_REG_REGION
.393697		20 ff 3c	jsr $393cff	              JSR OPL2_GET_REG_OFFSET
.39369a		e2 20		sep #$20	                SEP #$20        ; set A short
.39369c		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 8 in Instrument Profile
.39369e		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3936a0		c8		iny		              INY
.3936a1		c2 20		rep #$20	                REP #$20        ; set A long
.3936a3		a9 60 00	lda #$0060	              LDA #$0060;
.3936a6		85 28		sta $28		              STA OPL2_REG_REGION
.3936a8		20 ff 3c	jsr $393cff	              JSR OPL2_GET_REG_OFFSET
.3936ab		e2 20		sep #$20	                SEP #$20        ; set A short
.3936ad		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 9 in Instrument Profile
.3936af		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3936b1		c8		iny		              INY
.3936b2		c2 20		rep #$20	                REP #$20        ; set A long
.3936b4		a9 80 00	lda #$0080	              LDA #$0080;
.3936b7		85 28		sta $28		              STA OPL2_REG_REGION
.3936b9		20 ff 3c	jsr $393cff	              JSR OPL2_GET_REG_OFFSET
.3936bc		e2 20		sep #$20	                SEP #$20        ; set A short
.3936be		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location A in Instrument Profile
.3936c0		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3936c2		c8		iny		              INY
.3936c3		c2 20		rep #$20	                REP #$20        ; set A long
.3936c5		a9 e0 00	lda #$00e0	              LDA #$00E0;
.3936c8		85 28		sta $28		              STA OPL2_REG_REGION
.3936ca		20 ff 3c	jsr $393cff	              JSR OPL2_GET_REG_OFFSET
.3936cd		e2 20		sep #$20	                SEP #$20        ; set A short
.3936cf		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location B in Instrument Profile
.3936d1		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3936d3		6b		rtl		                RTL
.3936d4						Percussion_A
.3936d4		e2 20		sep #$20	                SEP #$20        ; set A short
.3936d6		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.3936d8		8f 31 e6 af	sta $afe631	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $11
.3936dc		c8		iny		              INY
.3936dd		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.3936df		8f 51 e6 af	sta $afe651	              STA @lOPL3_R_KSL_TL + $11
.3936e3		c8		iny		              INY
.3936e4		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.3936e6		8f 71 e6 af	sta $afe671	              STA @lOPL3_R_AR_DR + $11
.3936ea		c8		iny		              INY
.3936eb		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.3936ed		8f 91 e6 af	sta $afe691	              STA @lOPL3_R_SL_RR + $11
.3936f1		c8		iny		              INY
.3936f2		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.3936f4		8f f1 e6 af	sta $afe6f1	              STA @lOPL3_R_WAVE_SELECT + $11
.3936f8		6b		rtl		                RTL
.3936f9						Percussion_9
.3936f9		e2 20		sep #$20	                SEP #$20        ; set A short
.3936fb		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.3936fd		8f 35 e6 af	sta $afe635	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $15
.393701		c8		iny		              INY
.393702		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393704		8f 55 e6 af	sta $afe655	              STA @lOPL3_R_KSL_TL + $15
.393708		c8		iny		              INY
.393709		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.39370b		8f 75 e6 af	sta $afe675	              STA @lOPL3_R_AR_DR + $15
.39370f		c8		iny		              INY
.393710		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393712		8f 95 e6 af	sta $afe695	              STA @lOPL3_R_SL_RR + $15
.393716		c8		iny		              INY
.393717		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393719		8f f5 e6 af	sta $afe6f5	              STA @lOPL3_R_WAVE_SELECT + $15
.39371d		6b		rtl		              RTL
.39371e						Percussion_8
.39371e		e2 20		sep #$20	                SEP #$20        ; set A short
.393720		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393722		8f 32 e6 af	sta $afe632	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $12
.393726		c8		iny		              INY
.393727		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393729		8f 52 e6 af	sta $afe652	              STA @lOPL3_R_KSL_TL + $12
.39372d		c8		iny		              INY
.39372e		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393730		8f 72 e6 af	sta $afe672	              STA @lOPL3_R_AR_DR + $12
.393734		c8		iny		              INY
.393735		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393737		8f 92 e6 af	sta $afe692	              STA @lOPL3_R_SL_RR + $12
.39373b		c8		iny		              INY
.39373c		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.39373e		8f f2 e6 af	sta $afe6f2	              STA @lOPL3_R_WAVE_SELECT + $12
.393742		6b		rtl		              RTL
.393743						Percussion_7
.393743		e2 20		sep #$20	                SEP #$20        ; set A short
.393745		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393747		8f 34 e6 af	sta $afe634	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $14
.39374b		c8		iny		              INY
.39374c		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.39374e		8f 54 e6 af	sta $afe654	              STA @lOPL3_R_KSL_TL + $14
.393752		c8		iny		              INY
.393753		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393755		8f 74 e6 af	sta $afe674	              STA @lOPL3_R_AR_DR + $14
.393759		c8		iny		              INY
.39375a		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.39375c		8f 94 e6 af	sta $afe694	              STA @lOPL3_R_SL_RR + $14
.393760		c8		iny		              INY
.393761		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393763		8f f4 e6 af	sta $afe6f4	              STA @lOPL3_R_WAVE_SELECT + $14
.393767		6b		rtl		              RTL
.393768						Percussion_6
.393768		e2 20		sep #$20	                SEP #$20        ; set A short
.39376a		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.39376c		8f 30 e6 af	sta $afe630	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $10
.393770		8f 33 e6 af	sta $afe633	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $13
.393774		c8		iny		              INY
.393775		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393777		8f 50 e6 af	sta $afe650	              STA @lOPL3_R_KSL_TL + $10
.39377b		8f 53 e6 af	sta $afe653	              STA @lOPL3_R_KSL_TL + $13
.39377f		c8		iny		              INY
.393780		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393782		8f 70 e6 af	sta $afe670	              STA @lOPL3_R_AR_DR + $10
.393786		8f 73 e6 af	sta $afe673	              STA @lOPL3_R_AR_DR + $13
.39378a		c8		iny		              INY
.39378b		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.39378d		8f 90 e6 af	sta $afe690	              STA @lOPL3_R_SL_RR + $10
.393791		8f 93 e6 af	sta $afe693	              STA @lOPL3_R_SL_RR + $13
.393795		c8		iny		              INY
.393796		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393798		8f f0 e6 af	sta $afe6f0	              STA @lOPL3_R_WAVE_SELECT + $10
.39379c		8f f3 e6 af	sta $afe6f3	              STA @lOPL3_R_WAVE_SELECT + $13
.3937a0		6b		rtl		              RTL
.3937a1						OPL2_SET_REGISTER
.3937a1		48		pha		                PHA             ; begin setdp macro
.3937a2		08		php		                PHP
.3937a3		c2 20		rep #$20	                REP #$20        ; set A long
.3937a5		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3937a8		5b		tcd		                TCD
.3937a9		28		plp		                PLP
.3937aa		68		pla		                PLA             ; end setdp macro
.3937ab		c2 20		rep #$20	                REP #$20        ; set A long
.3937ad		18		clc		              CLC
.3937ae		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3937b1		65 32		adc $32		              ADC OPL2_PARAMETER0
.3937b3		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3937b5		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3937b8		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3937ba		e2 20		sep #$20	                SEP #$20        ; set A short
.3937bc		a5 33		lda $33		              LDA OPL2_PARAMETER1
.3937be		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3937c0		6b		rtl		              RTL
.3937c1						OPL2_SET_WAVEFORMSELECT
.3937c1		48		pha		                PHA             ; begin setdp macro
.3937c2		08		php		                PHP
.3937c3		c2 20		rep #$20	                REP #$20        ; set A long
.3937c5		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3937c8		5b		tcd		                TCD
.3937c9		28		plp		                PLP
.3937ca		68		pla		                PLA             ; end setdp macro
.3937cb		c2 20		rep #$20	                REP #$20        ; set A long
.3937cd		a9 01 e6	lda #$e601	              LDA #<>OPL3_R_BASE + $0001
.3937d0		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3937d2		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3937d5		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3937d7		e2 20		sep #$20	                SEP #$20        ; set A short
.3937d9		b0 07		bcs $3937e2	              BCS OPL2_Set_WaveFormSelect_set
.3937db		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3937dd		29 df		and #$df	              AND #$DF
.3937df		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3937e1		6b		rtl		              RTL
.3937e2						OPL2_Set_WaveFormSelect_set
.3937e2		48		pha		                PHA             ; begin setdp macro
.3937e3		08		php		                PHP
.3937e4		c2 20		rep #$20	                REP #$20        ; set A long
.3937e6		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3937e9		5b		tcd		                TCD
.3937ea		28		plp		                PLP
.3937eb		68		pla		                PLA             ; end setdp macro
.3937ec		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3937ee		09 20 00	ora #$0020	              ORA #$20
.3937f1		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3937f3		6b		rtl		                RTL
.3937f4						OPL2_SET_TREMOLO
.3937f4		48		pha		                PHA             ; begin setdp macro
.3937f5		08		php		                PHP
.3937f6		c2 20		rep #$20	                REP #$20        ; set A long
.3937f8		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3937fb		5b		tcd		                TCD
.3937fc		28		plp		                PLP
.3937fd		68		pla		                PLA             ; end setdp macro
.3937fe		08		php		                PHP ; Push the Carry
.3937ff		c2 20		rep #$20	                REP #$20        ; set A long
.393801		18		clc		                CLC
.393802		a9 20 00	lda #$0020	                LDA #$0020 ;
.393805		85 28		sta $28		                STA OPL2_REG_REGION
.393807		20 ff 3c	jsr $393cff	                JSR OPL2_GET_REG_OFFSET
.39380a		28		plp		                PLP ; Pull the Carry out
.39380b		e2 20		sep #$20	                SEP #$20        ; set A short
.39380d		b0 08		bcs $393817	                BCS OPL2_Set_Tremolo_Set;
.39380f		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393811		29 7f		and #$7f	                AND #$7F
.393813		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393815		80 06		bra $39381d	                BRA OPL2_Set_Tremolo_Exit
.393817						OPL2_Set_Tremolo_Set
.393817		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393819		09 80		ora #$80	                ORA #$80
.39381b		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.39381d						OPL2_Set_Tremolo_Exit
.39381d		6b		rtl		                RTL
.39381e						OPL2_GET_TREMOLO
.39381e		48		pha		                PHA             ; begin setdp macro
.39381f		08		php		                PHP
.393820		c2 20		rep #$20	                REP #$20        ; set A long
.393822		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393825		5b		tcd		                TCD
.393826		28		plp		                PLP
.393827		68		pla		                PLA             ; end setdp macro
.393828		c2 20		rep #$20	                REP #$20        ; set A long
.39382a		a9 20 00	lda #$0020	                LDA #$0020;
.39382d		85 28		sta $28		                STA OPL2_REG_REGION
.39382f		20 ff 3c	jsr $393cff	                JSR OPL2_GET_REG_OFFSET
.393832		e2 20		sep #$20	                SEP #$20        ; set A short
.393834		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393836		29 80		and #$80	                AND #$80
.393838		6b		rtl		                RTL
.393839						OPL2_SET_VIBRATO
.393839		48		pha		                PHA             ; begin setdp macro
.39383a		08		php		                PHP
.39383b		c2 20		rep #$20	                REP #$20        ; set A long
.39383d		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393840		5b		tcd		                TCD
.393841		28		plp		                PLP
.393842		68		pla		                PLA             ; end setdp macro
.393843		08		php		                PHP ; Push the Carry
.393844		c2 20		rep #$20	                REP #$20        ; set A long
.393846		18		clc		                CLC
.393847		a9 20 00	lda #$0020	                LDA #$0020;
.39384a		85 28		sta $28		                STA OPL2_REG_REGION
.39384c		20 ff 3c	jsr $393cff	                JSR OPL2_GET_REG_OFFSET
.39384f		28		plp		                PLP ; Pull the Carry out
.393850		e2 20		sep #$20	                SEP #$20        ; set A short
.393852		b0 08		bcs $39385c	                BCS OPL2_Set_Vibrato_Set;
.393854		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393856		29 bf		and #$bf	                AND #$BF
.393858		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.39385a		80 06		bra $393862	                BRA OPL2_Set_Vibrato_Exit
.39385c						OPL2_Set_Vibrato_Set
.39385c		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39385e		09 40		ora #$40	                ORA #$40
.393860		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393862						OPL2_Set_Vibrato_Exit
.393862		6b		rtl		                RTL
.393863						OPL2_GET_VIBRATO
.393863		48		pha		                PHA             ; begin setdp macro
.393864		08		php		                PHP
.393865		c2 20		rep #$20	                REP #$20        ; set A long
.393867		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39386a		5b		tcd		                TCD
.39386b		28		plp		                PLP
.39386c		68		pla		                PLA             ; end setdp macro
.39386d		c2 20		rep #$20	                REP #$20        ; set A long
.39386f		a9 20 00	lda #$0020	                LDA #$0020;
.393872		85 28		sta $28		                STA OPL2_REG_REGION
.393874		20 ff 3c	jsr $393cff	                JSR OPL2_GET_REG_OFFSET
.393877		e2 20		sep #$20	                SEP #$20        ; set A short
.393879		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39387b		29 40		and #$40	                AND #$40
.39387d		6b		rtl		                RTL
.39387e						OPL2_SET_MAINTAINSUSTAIN
.39387e		48		pha		                PHA             ; begin setdp macro
.39387f		08		php		                PHP
.393880		c2 20		rep #$20	                REP #$20        ; set A long
.393882		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393885		5b		tcd		                TCD
.393886		28		plp		                PLP
.393887		68		pla		                PLA             ; end setdp macro
.393888		08		php		              PHP ; Push the Carry
.393889		c2 20		rep #$20	                REP #$20        ; set A long
.39388b		18		clc		              CLC
.39388c		a9 20 00	lda #$0020	              LDA #$0020;
.39388f		85 28		sta $28		              STA OPL2_REG_REGION
.393891		20 ff 3c	jsr $393cff	              JSR OPL2_GET_REG_OFFSET
.393894		28		plp		              PLP ; Pull the Carry out
.393895		e2 20		sep #$20	                SEP #$20        ; set A short
.393897		b0 08		bcs $3938a1	              BCS OPL2_Set_MaintainSustain_Set;
.393899		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39389b		29 df		and #$df	              AND #$DF
.39389d		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39389f		80 06		bra $3938a7	              BRA OPL2_Set_MaintainSustain_Exit
.3938a1						OPL2_Set_MaintainSustain_Set
.3938a1		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3938a3		09 20		ora #$20	              ORA #$20
.3938a5		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3938a7						OPL2_Set_MaintainSustain_Exit
.3938a7		6b		rtl		                RTL
.3938a8						OPL2_GET_MAINTAINSUSTAIN
.3938a8		48		pha		                PHA             ; begin setdp macro
.3938a9		08		php		                PHP
.3938aa		c2 20		rep #$20	                REP #$20        ; set A long
.3938ac		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3938af		5b		tcd		                TCD
.3938b0		28		plp		                PLP
.3938b1		68		pla		                PLA             ; end setdp macro
.3938b2		c2 20		rep #$20	                REP #$20        ; set A long
.3938b4		a9 20 00	lda #$0020	              LDA #$0020;
.3938b7		85 28		sta $28		              STA OPL2_REG_REGION
.3938b9		20 ff 3c	jsr $393cff	              JSR OPL2_GET_REG_OFFSET
.3938bc		e2 20		sep #$20	                SEP #$20        ; set A short
.3938be		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3938c0		29 20		and #$20	              AND #$20
.3938c2		6b		rtl		                RTL
.3938c3						OPL2_SET_ENVELOPESCALING
.3938c3		48		pha		                PHA             ; begin setdp macro
.3938c4		08		php		                PHP
.3938c5		c2 20		rep #$20	                REP #$20        ; set A long
.3938c7		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3938ca		5b		tcd		                TCD
.3938cb		28		plp		                PLP
.3938cc		68		pla		                PLA             ; end setdp macro
.3938cd		08		php		              PHP ; Push the Carry
.3938ce		c2 20		rep #$20	                REP #$20        ; set A long
.3938d0		18		clc		              CLC
.3938d1		a9 20 00	lda #$0020	              LDA #$0020;
.3938d4		85 28		sta $28		              STA OPL2_REG_REGION
.3938d6		20 ff 3c	jsr $393cff	              JSR OPL2_GET_REG_OFFSET
.3938d9		28		plp		              PLP ; Pull the Carry out
.3938da		e2 20		sep #$20	                SEP #$20        ; set A short
.3938dc		b0 08		bcs $3938e6	              BCS OPL2_Set_EnvelopeScaling_Set;
.3938de		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3938e0		29 ef		and #$ef	              AND #$EF
.3938e2		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3938e4		80 06		bra $3938ec	              BRA OPL2_Set_EnvelopeScaling_Exit
.3938e6						OPL2_Set_EnvelopeScaling_Set
.3938e6		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3938e8		09 10		ora #$10	              ORA #$10
.3938ea		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3938ec						OPL2_Set_EnvelopeScaling_Exit
.3938ec		6b		rtl		                RTL
.3938ed						OPL2_GET_ENVELOPESCALING
.3938ed		48		pha		                PHA             ; begin setdp macro
.3938ee		08		php		                PHP
.3938ef		c2 20		rep #$20	                REP #$20        ; set A long
.3938f1		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3938f4		5b		tcd		                TCD
.3938f5		28		plp		                PLP
.3938f6		68		pla		                PLA             ; end setdp macro
.3938f7		c2 20		rep #$20	                REP #$20        ; set A long
.3938f9		a9 20 00	lda #$0020	              LDA #$0020;
.3938fc		85 28		sta $28		              STA OPL2_REG_REGION
.3938fe		20 ff 3c	jsr $393cff	              JSR OPL2_GET_REG_OFFSET
.393901		e2 20		sep #$20	                SEP #$20        ; set A short
.393903		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393905		29 10		and #$10	              AND #$10
.393907		6b		rtl		                RTL
.393908						OPL2_GET_MODFREQMULTIPLE
.393908		48		pha		                PHA             ; begin setdp macro
.393909		08		php		                PHP
.39390a		c2 20		rep #$20	                REP #$20        ; set A long
.39390c		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39390f		5b		tcd		                TCD
.393910		28		plp		                PLP
.393911		68		pla		                PLA             ; end setdp macro
.393912		c2 20		rep #$20	                REP #$20        ; set A long
.393914		a9 20 00	lda #$0020	              LDA #$0020;
.393917		85 28		sta $28		              STA OPL2_REG_REGION
.393919		20 ff 3c	jsr $393cff	              JSR OPL2_GET_REG_OFFSET
.39391c		e2 20		sep #$20	                SEP #$20        ; set A short
.39391e		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393920		29 0f		and #$0f	              AND #$0F
.393922		6b		rtl		              RTL
.393923						OPL2_SET_MODFREQMULTIPLE
.393923		48		pha		                PHA             ; begin setdp macro
.393924		08		php		                PHP
.393925		c2 20		rep #$20	                REP #$20        ; set A long
.393927		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39392a		5b		tcd		                TCD
.39392b		28		plp		                PLP
.39392c		68		pla		                PLA             ; end setdp macro
.39392d		c2 20		rep #$20	                REP #$20        ; set A long
.39392f		a9 20 00	lda #$0020	                LDA #$0020;
.393932		85 28		sta $28		                STA OPL2_REG_REGION
.393934		20 ff 3c	jsr $393cff	                JSR OPL2_GET_REG_OFFSET
.393937		e2 20		sep #$20	                SEP #$20        ; set A short
.393939		a5 32		lda $32		                LDA OPL2_PARAMETER0
.39393b		29 0f		and #$0f	                AND #$0F
.39393d		85 32		sta $32		                STA OPL2_PARAMETER0
.39393f		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393941		29 f0		and #$f0	                AND #$F0
.393943		05 32		ora $32		                ORA OPL2_PARAMETER0
.393945		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393947		6b		rtl		                RTL
.393948						OPL2_SET_SCALINGLEVEL
.393948		48		pha		                PHA             ; begin setdp macro
.393949		08		php		                PHP
.39394a		c2 20		rep #$20	                REP #$20        ; set A long
.39394c		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39394f		5b		tcd		                TCD
.393950		28		plp		                PLP
.393951		68		pla		                PLA             ; end setdp macro
.393952		c2 20		rep #$20	                REP #$20        ; set A long
.393954		a9 40 00	lda #$0040	                LDA #$0040;
.393957		85 28		sta $28		                STA OPL2_REG_REGION
.393959		20 ff 3c	jsr $393cff	                JSR OPL2_GET_REG_OFFSET
.39395c		e2 20		sep #$20	                SEP #$20        ; set A short
.39395e		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393960		29 03		and #$03	                AND #$03
.393962		0a		asl a		                ASL
.393963		0a		asl a		                ASL
.393964		0a		asl a		                ASL
.393965		0a		asl a		                ASL
.393966		0a		asl a		                ASL
.393967		0a		asl a		                ASL
.393968		85 32		sta $32		                STA OPL2_PARAMETER0
.39396a		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39396c		29 3f		and #$3f	                AND #$3F
.39396e		05 32		ora $32		                ORA OPL2_PARAMETER0
.393970		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393972		6b		rtl		                RTL
.393973						OPL2_SET_VOLUME
.393973		48		pha		                PHA             ; begin setdp macro
.393974		08		php		                PHP
.393975		c2 20		rep #$20	                REP #$20        ; set A long
.393977		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39397a		5b		tcd		                TCD
.39397b		28		plp		                PLP
.39397c		68		pla		                PLA             ; end setdp macro
.39397d		c2 20		rep #$20	                REP #$20        ; set A long
.39397f		a9 40 00	lda #$0040	                LDA #$0040  ;
.393982		85 28		sta $28		                STA OPL2_REG_REGION
.393984		20 ff 3c	jsr $393cff	                JSR OPL2_GET_REG_OFFSET
.393987		e2 20		sep #$20	                SEP #$20        ; set A short
.393989		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Volume
.39398b		29 3f		and #$3f	                AND #$3F
.39398d		85 32		sta $32		                STA OPL2_PARAMETER0
.39398f		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393991		29 c0		and #$c0	                AND #$C0
.393993		05 32		ora $32		                ORA OPL2_PARAMETER0
.393995		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393997		6b		rtl		                RTL
.393998						OPL2_GET_VOLUME
.393998		48		pha		                PHA             ; begin setdp macro
.393999		08		php		                PHP
.39399a		c2 20		rep #$20	                REP #$20        ; set A long
.39399c		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39399f		5b		tcd		                TCD
.3939a0		28		plp		                PLP
.3939a1		68		pla		                PLA             ; end setdp macro
.3939a2		c2 20		rep #$20	                REP #$20        ; set A long
.3939a4		a9 40 00	lda #$0040	                LDA #$0040  ;
.3939a7		85 28		sta $28		                STA OPL2_REG_REGION
.3939a9		20 ff 3c	jsr $393cff	                JSR OPL2_GET_REG_OFFSET
.3939ac		e2 20		sep #$20	                SEP #$20        ; set A short
.3939ae		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3939b0		29 3f		and #$3f	                AND #$3F
.3939b2		6b		rtl		                RTL
.3939b3						OPL2_SET_ATTACK
.3939b3		48		pha		                PHA             ; begin setdp macro
.3939b4		08		php		                PHP
.3939b5		c2 20		rep #$20	                REP #$20        ; set A long
.3939b7		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3939ba		5b		tcd		                TCD
.3939bb		28		plp		                PLP
.3939bc		68		pla		                PLA             ; end setdp macro
.3939bd		c2 20		rep #$20	                REP #$20        ; set A long
.3939bf		a9 60 00	lda #$0060	                LDA #$0060  ;
.3939c2		85 28		sta $28		                STA OPL2_REG_REGION
.3939c4		20 ff 3c	jsr $393cff	                JSR OPL2_GET_REG_OFFSET
.3939c7		e2 20		sep #$20	                SEP #$20        ; set A short
.3939c9		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.3939cb		29 0f		and #$0f	                AND #$0F
.3939cd		0a		asl a		                ASL
.3939ce		0a		asl a		                ASL
.3939cf		0a		asl a		                ASL
.3939d0		0a		asl a		                ASL
.3939d1		85 32		sta $32		                STA OPL2_PARAMETER0
.3939d3		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3939d5		29 0f		and #$0f	                AND #$0F
.3939d7		05 32		ora $32		                ORA OPL2_PARAMETER0
.3939d9		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3939db		6b		rtl		                RTL
.3939dc						OPL2_GET_ATTACK
.3939dc		48		pha		                PHA             ; begin setdp macro
.3939dd		08		php		                PHP
.3939de		c2 20		rep #$20	                REP #$20        ; set A long
.3939e0		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3939e3		5b		tcd		                TCD
.3939e4		28		plp		                PLP
.3939e5		68		pla		                PLA             ; end setdp macro
.3939e6		c2 20		rep #$20	                REP #$20        ; set A long
.3939e8		a9 60 00	lda #$0060	                LDA #$0060
.3939eb		85 28		sta $28		                STA OPL2_REG_REGION
.3939ed		20 ff 3c	jsr $393cff	                JSR OPL2_GET_REG_OFFSET
.3939f0		e2 20		sep #$20	                SEP #$20        ; set A short
.3939f2		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3939f4		29 f0		and #$f0	                AND #$F0
.3939f6		4a		lsr a		                LSR
.3939f7		4a		lsr a		                LSR
.3939f8		4a		lsr a		                LSR
.3939f9		4a		lsr a		                LSR
.3939fa		6b		rtl		                RTL
.3939fb						OPL2_SET_DECAY
.3939fb		48		pha		                PHA             ; begin setdp macro
.3939fc		08		php		                PHP
.3939fd		c2 20		rep #$20	                REP #$20        ; set A long
.3939ff		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393a02		5b		tcd		                TCD
.393a03		28		plp		                PLP
.393a04		68		pla		                PLA             ; end setdp macro
.393a05		c2 20		rep #$20	                REP #$20        ; set A long
.393a07		a9 60 00	lda #$0060	                LDA #$0060;
.393a0a		85 28		sta $28		                STA OPL2_REG_REGION
.393a0c		20 ff 3c	jsr $393cff	                JSR OPL2_GET_REG_OFFSET
.393a0f		e2 20		sep #$20	                SEP #$20        ; set A short
.393a11		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393a13		29 0f		and #$0f	                AND #$0F
.393a15		85 32		sta $32		                STA OPL2_PARAMETER0
.393a17		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393a19		29 f0		and #$f0	                AND #$F0
.393a1b		05 32		ora $32		                ORA OPL2_PARAMETER0
.393a1d		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393a1f		6b		rtl		                RTL
.393a20						OPL2_GET_DECAY
.393a20		48		pha		                PHA             ; begin setdp macro
.393a21		08		php		                PHP
.393a22		c2 20		rep #$20	                REP #$20        ; set A long
.393a24		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393a27		5b		tcd		                TCD
.393a28		28		plp		                PLP
.393a29		68		pla		                PLA             ; end setdp macro
.393a2a		c2 20		rep #$20	                REP #$20        ; set A long
.393a2c		a9 60 00	lda #$0060	                LDA #$0060
.393a2f		85 28		sta $28		                STA OPL2_REG_REGION
.393a31		20 ff 3c	jsr $393cff	                JSR OPL2_GET_REG_OFFSET
.393a34		e2 20		sep #$20	                SEP #$20        ; set A short
.393a36		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393a38		29 0f		and #$0f	                AND #$0F
.393a3a		6b		rtl		                RTL
.393a3b						OPL2_SET_SUSTAIN
.393a3b		48		pha		                PHA             ; begin setdp macro
.393a3c		08		php		                PHP
.393a3d		c2 20		rep #$20	                REP #$20        ; set A long
.393a3f		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393a42		5b		tcd		                TCD
.393a43		28		plp		                PLP
.393a44		68		pla		                PLA             ; end setdp macro
.393a45		c2 20		rep #$20	                REP #$20        ; set A long
.393a47		a9 80 00	lda #$0080	                LDA #$0080;
.393a4a		85 28		sta $28		                STA OPL2_REG_REGION
.393a4c		20 ff 3c	jsr $393cff	                JSR OPL2_GET_REG_OFFSET
.393a4f		e2 20		sep #$20	                SEP #$20        ; set A short
.393a51		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393a53		29 0f		and #$0f	                AND #$0F
.393a55		0a		asl a		                ASL
.393a56		0a		asl a		                ASL
.393a57		0a		asl a		                ASL
.393a58		0a		asl a		                ASL
.393a59		85 32		sta $32		                STA OPL2_PARAMETER0
.393a5b		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393a5d		29 0f		and #$0f	                AND #$0F
.393a5f		05 32		ora $32		                ORA OPL2_PARAMETER0
.393a61		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393a63		6b		rtl		                RTL
.393a64						OPL2_GET_SUSTAIN
.393a64		48		pha		                PHA             ; begin setdp macro
.393a65		08		php		                PHP
.393a66		c2 20		rep #$20	                REP #$20        ; set A long
.393a68		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393a6b		5b		tcd		                TCD
.393a6c		28		plp		                PLP
.393a6d		68		pla		                PLA             ; end setdp macro
.393a6e		c2 20		rep #$20	                REP #$20        ; set A long
.393a70		a9 80 00	lda #$0080	                LDA #$0080
.393a73		85 28		sta $28		                STA OPL2_REG_REGION
.393a75		20 ff 3c	jsr $393cff	                JSR OPL2_GET_REG_OFFSET
.393a78		e2 20		sep #$20	                SEP #$20        ; set A short
.393a7a		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393a7c		29 f0		and #$f0	                AND #$F0
.393a7e		4a		lsr a		                LSR
.393a7f		4a		lsr a		                LSR
.393a80		4a		lsr a		                LSR
.393a81		4a		lsr a		                LSR
.393a82		6b		rtl		                RTL
.393a83						OPL2_SET_RELEASE
.393a83		48		pha		                PHA             ; begin setdp macro
.393a84		08		php		                PHP
.393a85		c2 20		rep #$20	                REP #$20        ; set A long
.393a87		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393a8a		5b		tcd		                TCD
.393a8b		28		plp		                PLP
.393a8c		68		pla		                PLA             ; end setdp macro
.393a8d		c2 20		rep #$20	                REP #$20        ; set A long
.393a8f		a9 80 00	lda #$0080	                LDA #$0080;
.393a92		85 28		sta $28		                STA OPL2_REG_REGION
.393a94		20 ff 3c	jsr $393cff	                JSR OPL2_GET_REG_OFFSET
.393a97		e2 20		sep #$20	                SEP #$20        ; set A short
.393a99		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393a9b		29 0f		and #$0f	                AND #$0F
.393a9d		85 32		sta $32		                STA OPL2_PARAMETER0
.393a9f		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393aa1		29 f0		and #$f0	                AND #$F0
.393aa3		05 32		ora $32		                ORA OPL2_PARAMETER0
.393aa5		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393aa7		6b		rtl		                RTL
.393aa8						OPL2_GET_RELEASE
.393aa8		48		pha		                PHA             ; begin setdp macro
.393aa9		08		php		                PHP
.393aaa		c2 20		rep #$20	                REP #$20        ; set A long
.393aac		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393aaf		5b		tcd		                TCD
.393ab0		28		plp		                PLP
.393ab1		68		pla		                PLA             ; end setdp macro
.393ab2		c2 20		rep #$20	                REP #$20        ; set A long
.393ab4		a9 80 00	lda #$0080	                LDA #$0080
.393ab7		85 28		sta $28		                STA OPL2_REG_REGION
.393ab9		20 ff 3c	jsr $393cff	                JSR OPL2_GET_REG_OFFSET
.393abc		e2 20		sep #$20	                SEP #$20        ; set A short
.393abe		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393ac0		29 0f		and #$0f	                AND #$0F
.393ac2		6b		rtl		                RTL
.393ac3						OPL2_SET_FNUMBER
.393ac3		48		pha		                PHA             ; begin setdp macro
.393ac4		08		php		                PHP
.393ac5		c2 20		rep #$20	                REP #$20        ; set A long
.393ac7		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393aca		5b		tcd		                TCD
.393acb		28		plp		                PLP
.393acc		68		pla		                PLA             ; end setdp macro
.393acd		e2 20		sep #$20	                SEP #$20        ; set A short
.393acf		18		clc		                CLC
.393ad0		a5 27		lda $27		                LDA OPL2_CHANNEL
.393ad2		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393ad4		69 a0		adc #$a0	                ADC #$A0
.393ad6		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393ad8		a9 00		lda #$00	                LDA #$00
.393ada		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393adc		c2 30		rep #$30	                REP #$30        ; set A&X long
.393ade		18		clc		                CLC
.393adf		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393ae2		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393ae4		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393ae6		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393ae9		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393aeb		e2 20		sep #$20	                SEP #$20        ; set A short
.393aed		a5 32		lda $32		                LDA OPL2_PARAMETER0     ; Load the first 8 Bits Value of FNumber
.393aef		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]  ; Load
.393af1		18		clc		                CLC
.393af2		a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.393af4		69 10		adc #$10	                ADC #$10
.393af6		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393af8		a5 33		lda $33		                LDA OPL2_PARAMETER1
.393afa		29 03		and #$03	                AND #$03
.393afc		85 33		sta $33		                STA OPL2_PARAMETER1
.393afe		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393b00		29 fc		and #$fc	                AND #$FC
.393b02		05 33		ora $33		                ORA OPL2_PARAMETER1
.393b04		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393b06		6b		rtl		                RTL
.393b07						OPL2_GET_FNUMBER
.393b07		48		pha		                PHA             ; begin setdp macro
.393b08		08		php		                PHP
.393b09		c2 20		rep #$20	                REP #$20        ; set A long
.393b0b		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b0e		5b		tcd		                TCD
.393b0f		28		plp		                PLP
.393b10		68		pla		                PLA             ; end setdp macro
.393b11		e2 20		sep #$20	                SEP #$20        ; set A short
.393b13		18		clc		                CLC
.393b14		a5 27		lda $27		                LDA OPL2_CHANNEL
.393b16		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393b18		69 a0		adc #$a0	                ADC #$A0
.393b1a		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393b1c		a9 00		lda #$00	                LDA #$00
.393b1e		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393b20		c2 30		rep #$30	                REP #$30        ; set A&X long
.393b22		18		clc		                CLC
.393b23		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393b26		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393b28		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393b2a		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393b2d		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393b2f		e2 20		sep #$20	                SEP #$20        ; set A short
.393b31		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393b33		85 32		sta $32		                STA OPL2_PARAMETER0
.393b35		18		clc		                CLC
.393b36		a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.393b38		69 10		adc #$10	                ADC #$10
.393b3a		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393b3c		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393b3e		29 03		and #$03	                AND #$03
.393b40		85 33		sta $33		                STA OPL2_PARAMETER1
.393b42		6b		rtl		                RTL
.393b43						OPL2_Set_Frequency
.393b43		6b		rtl		                RTL
.393b44						OPL2_Get_Frequency
.393b44		6b		rtl		                RTL
.393b45						OPL2_SET_BLOCK
.393b45		48		pha		                PHA             ; begin setdp macro
.393b46		08		php		                PHP
.393b47		c2 20		rep #$20	                REP #$20        ; set A long
.393b49		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b4c		5b		tcd		                TCD
.393b4d		28		plp		                PLP
.393b4e		68		pla		                PLA             ; end setdp macro
.393b4f		e2 20		sep #$20	                SEP #$20        ; set A short
.393b51		18		clc		                CLC
.393b52		a5 27		lda $27		                LDA OPL2_CHANNEL
.393b54		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393b56		69 b0		adc #$b0	                ADC #$B0
.393b58		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393b5a		a9 00		lda #$00	                LDA #$00
.393b5c		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393b5e		c2 30		rep #$30	                REP #$30        ; set A&X long
.393b60		18		clc		                CLC
.393b61		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393b64		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393b66		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393b68		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393b6b		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393b6d		e2 20		sep #$20	                SEP #$20        ; set A short
.393b6f		a5 31		lda $31		                LDA OPL2_OCTAVE
.393b71		29 07		and #$07	                AND #$07
.393b73		0a		asl a		                ASL
.393b74		0a		asl a		                ASL
.393b75		85 31		sta $31		                STA OPL2_OCTAVE
.393b77		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393b79		29 e3		and #$e3	                AND #$E3
.393b7b		05 31		ora $31		                ORA OPL2_OCTAVE
.393b7d		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393b7f		60		rts		                RTS
.393b80						OPL2_SET_KEYON
.393b80		48		pha		                PHA             ; begin setdp macro
.393b81		08		php		                PHP
.393b82		c2 20		rep #$20	                REP #$20        ; set A long
.393b84		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b87		5b		tcd		                TCD
.393b88		28		plp		                PLP
.393b89		68		pla		                PLA             ; end setdp macro
.393b8a		e2 20		sep #$20	                SEP #$20        ; set A short
.393b8c		18		clc		                CLC
.393b8d		a5 27		lda $27		                LDA OPL2_CHANNEL
.393b8f		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393b91		69 b0		adc #$b0	                ADC #$B0
.393b93		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393b95		a9 00		lda #$00	                LDA #$00
.393b97		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393b99		c2 30		rep #$30	                REP #$30        ; set A&X long
.393b9b		18		clc		                CLC
.393b9c		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393b9f		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393ba1		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393ba3		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393ba6		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393ba8		e2 20		sep #$20	                SEP #$20        ; set A short
.393baa		a5 32		lda $32		                LDA OPL2_PARAMETER0
.393bac		29 01		and #$01	                AND #$01
.393bae		f0 02		beq $393bb2	                BEQ SET_KEYON_OFF
.393bb0		a9 20		lda #$20	                LDA #$20
.393bb2						    SET_KEYON_OFF
.393bb2		85 32		sta $32		                STA OPL2_PARAMETER0
.393bb4		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393bb6		29 df		and #$df	                AND #$DF
.393bb8		05 32		ora $32		                ORA OPL2_PARAMETER0
.393bba		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393bbc		60		rts		                RTS
.393bbd						OPL2_SET_FEEDBACK
.393bbd		48		pha		                PHA             ; begin setdp macro
.393bbe		08		php		                PHP
.393bbf		c2 20		rep #$20	                REP #$20        ; set A long
.393bc1		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393bc4		5b		tcd		                TCD
.393bc5		28		plp		                PLP
.393bc6		68		pla		                PLA             ; end setdp macro
.393bc7		e2 20		sep #$20	                SEP #$20        ; set A short
.393bc9		18		clc		              CLC
.393bca		a5 27		lda $27		              LDA OPL2_CHANNEL
.393bcc		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393bce		69 c0		adc #$c0	              ADC #$C0
.393bd0		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393bd2		a9 00		lda #$00	              LDA #$00
.393bd4		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393bd6		c2 30		rep #$30	                REP #$30        ; set A&X long
.393bd8		18		clc		              CLC
.393bd9		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393bdc		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393bde		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393be0		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393be3		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393be5		e2 20		sep #$20	                SEP #$20        ; set A short
.393be7		a5 32		lda $32		              LDA OPL2_PARAMETER0
.393be9		29 07		and #$07	              AND #$07
.393beb		0a		asl a		              ASL
.393bec		85 32		sta $32		              STA OPL2_PARAMETER0
.393bee		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393bf0		29 01		and #$01	              AND #$01
.393bf2		05 32		ora $32		              ORA OPL2_PARAMETER0
.393bf4		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393bf6		6b		rtl		                RTL
.393bf7						OPL2_SET_SYNTHMODE
.393bf7		48		pha		                PHA             ; begin setdp macro
.393bf8		08		php		                PHP
.393bf9		c2 20		rep #$20	                REP #$20        ; set A long
.393bfb		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393bfe		5b		tcd		                TCD
.393bff		28		plp		                PLP
.393c00		68		pla		                PLA             ; end setdp macro
.393c01		08		php		              PHP ; Push the Carry
.393c02		e2 20		sep #$20	                SEP #$20        ; set A short
.393c04		18		clc		              CLC
.393c05		a5 27		lda $27		              LDA OPL2_CHANNEL
.393c07		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393c09		69 c0		adc #$c0	              ADC #$C0
.393c0b		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393c0d		a9 00		lda #$00	              LDA #$00
.393c0f		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393c11		c2 30		rep #$30	                REP #$30        ; set A&X long
.393c13		18		clc		              CLC
.393c14		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393c17		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393c19		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393c1b		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393c1e		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393c20		28		plp		              PLP ; Pull the Carry out
.393c21		e2 20		sep #$20	                SEP #$20        ; set A short
.393c23		b0 08		bcs $393c2d	              BCS OPL2_Set_Synthmode_Set;
.393c25		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393c27		29 fe		and #$fe	              AND #$FE
.393c29		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393c2b		80 06		bra $393c33	              BRA OPL2_Set_Synthmode_Exit
.393c2d						OPL2_Set_Synthmode_Set
.393c2d		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393c2f		09 01		ora #$01	              ORA #$01
.393c31		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393c33						OPL2_Set_Synthmode_Exit
.393c33		6b		rtl		                RTL
.393c34						OPL2_SET_DEEPTREMOLO
.393c34		48		pha		                PHA             ; begin setdp macro
.393c35		08		php		                PHP
.393c36		c2 20		rep #$20	                REP #$20        ; set A long
.393c38		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c3b		5b		tcd		                TCD
.393c3c		28		plp		                PLP
.393c3d		68		pla		                PLA             ; end setdp macro
.393c3e		c2 20		rep #$20	                REP #$20        ; set A long
.393c40		a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.393c43		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393c45		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393c48		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393c4a		e2 20		sep #$20	                SEP #$20        ; set A short
.393c4c		b0 08		bcs $393c56	              BCS OPL2_Set_DeepTremolo_Set;
.393c4e		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393c50		29 7f		and #$7f	              AND #$7F
.393c52		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393c54		80 06		bra $393c5c	              BRA OPL2_Set_DeepTremolo_Exit
.393c56						OPL2_Set_DeepTremolo_Set
.393c56		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393c58		09 80		ora #$80	              ORA #$80
.393c5a		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393c5c						OPL2_Set_DeepTremolo_Exit
.393c5c		6b		rtl		                RTL
.393c5d						OPL2_SET_DEEPVIBRATO
.393c5d		48		pha		                PHA             ; begin setdp macro
.393c5e		08		php		                PHP
.393c5f		c2 20		rep #$20	                REP #$20        ; set A long
.393c61		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c64		5b		tcd		                TCD
.393c65		28		plp		                PLP
.393c66		68		pla		                PLA             ; end setdp macro
.393c67		c2 20		rep #$20	                REP #$20        ; set A long
.393c69		a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.393c6c		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393c6e		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393c71		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393c73		e2 20		sep #$20	                SEP #$20        ; set A short
.393c75		b0 08		bcs $393c7f	              BCS OPL2_Set_DeepVibrato_Set;
.393c77		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393c79		29 bf		and #$bf	              AND #$BF
.393c7b		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393c7d		80 06		bra $393c85	              BRA OPL2_Set_DeepVibrato_Exit
.393c7f						OPL2_Set_DeepVibrato_Set
.393c7f		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393c81		09 40		ora #$40	              ORA #$40
.393c83		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393c85						OPL2_Set_DeepVibrato_Exit
.393c85		6b		rtl		                RTL
.393c86						OPL2_SET_PERCUSSION
.393c86		48		pha		                PHA             ; begin setdp macro
.393c87		08		php		                PHP
.393c88		c2 20		rep #$20	                REP #$20        ; set A long
.393c8a		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c8d		5b		tcd		                TCD
.393c8e		28		plp		                PLP
.393c8f		68		pla		                PLA             ; end setdp macro
.393c90		c2 20		rep #$20	                REP #$20        ; set A long
.393c92		a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.393c95		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393c97		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393c9a		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393c9c		e2 20		sep #$20	                SEP #$20        ; set A short
.393c9e		b0 08		bcs $393ca8	                BCS OPL2_Set_Percussion_Set;
.393ca0		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393ca2		29 df		and #$df	                AND #$DF
.393ca4		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393ca6		80 06		bra $393cae	                BRA OPL2_Set_Percussion_Exit
.393ca8						OPL2_Set_Percussion_Set
.393ca8		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393caa		09 20		ora #$20	                ORA #$20
.393cac		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393cae						OPL2_Set_Percussion_Exit
.393cae		6b		rtl		                RTL
.393caf						OPL2_SET_DRUMS
.393caf		48		pha		                PHA             ; begin setdp macro
.393cb0		08		php		                PHP
.393cb1		c2 20		rep #$20	                REP #$20        ; set A long
.393cb3		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393cb6		5b		tcd		                TCD
.393cb7		28		plp		                PLP
.393cb8		68		pla		                PLA             ; end setdp macro
.393cb9		c2 20		rep #$20	                REP #$20        ; set A long
.393cbb		a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.393cbe		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393cc0		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393cc3		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393cc5		e2 20		sep #$20	                SEP #$20        ; set A short
.393cc7		a5 32		lda $32		                LDA OPL2_PARAMETER0
.393cc9		29 1f		and #$1f	                AND #$1F
.393ccb		85 32		sta $32		                STA OPL2_PARAMETER0
.393ccd		49 ff		eor #$ff	                EOR #$FF
.393ccf		85 33		sta $33		                STA OPL2_PARAMETER1
.393cd1		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393cd3		25 33		and $33		                AND OPL2_PARAMETER1
.393cd5		05 32		ora $32		                ORA OPL2_PARAMETER0
.393cd7		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393cd9		6b		rtl		                RTL
.393cda						OPL2_SET_WAVEFORM
.393cda		48		pha		                PHA             ; begin setdp macro
.393cdb		08		php		                PHP
.393cdc		c2 20		rep #$20	                REP #$20        ; set A long
.393cde		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393ce1		5b		tcd		                TCD
.393ce2		28		plp		                PLP
.393ce3		68		pla		                PLA             ; end setdp macro
.393ce4		c2 20		rep #$20	                REP #$20        ; set A long
.393ce6		a9 e0 00	lda #$00e0	                LDA #$00E0;
.393ce9		85 28		sta $28		                STA OPL2_REG_REGION
.393ceb		20 ff 3c	jsr $393cff	                JSR OPL2_GET_REG_OFFSET
.393cee		e2 20		sep #$20	                SEP #$20        ; set A short
.393cf0		a5 32		lda $32		                LDA OPL2_PARAMETER0
.393cf2		29 03		and #$03	                AND #$03
.393cf4		85 32		sta $32		                STA OPL2_PARAMETER0
.393cf6		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393cf8		29 fc		and #$fc	                AND #$FC
.393cfa		05 32		ora $32		                ORA OPL2_PARAMETER0
.393cfc		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393cfe		6b		rtl		                RTL
.393cff						OPL2_GET_REG_OFFSET
.393cff		e2 30		sep #$30	                SEP #$30        ; set A&X short
.393d01		a5 27		lda $27		                LDA OPL2_CHANNEL
.393d03		29 0f		and #$0f	                AND #$0F
.393d05		aa		tax		                TAX
.393d06		a5 26		lda $26		                LDA OPL2_OPERATOR   ; 0 = operator 1, other = operator 2
.393d08		d0 06		bne $393d10	                BNE OPL2_Get_Register_Offset_l0
.393d0a		bf 47 13 39	lda $391347,x	                LDA @lregisterOffsets_operator0, X
.393d0e		80 04		bra $393d14	                BRA OPL2_Get_Register_Offset_exit
.393d10						OPL2_Get_Register_Offset_l0
.393d10		bf 50 13 39	lda $391350,x	                LDA @lregisterOffsets_operator1, X
.393d14						OPL2_Get_Register_Offset_exit
.393d14		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393d16		a9 00		lda #$00	                LDA #$00
.393d18		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393d1a		c2 30		rep #$30	                REP #$30        ; set A&X long
.393d1c		18		clc		                CLC
.393d1d		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393d20		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393d22		65 28		adc $28		                ADC OPL2_REG_REGION ; Ex: $20, or $40, $60, $80 (in 16bits)
.393d24		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393d26		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393d29		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393d2b		60		rts		                RTS

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/sdcard_controller_def.asm

=$afea00					SDC_VERSION_REG         = $AFEA00    ; Ought to read 12
=$afea01					SDC_CONTROL_REG         = $AFEA01    ; Bit0 1 = Reset core logic, and registers. Self clearing
=$afea02					SDC_TRANS_TYPE_REG      = $AFEA02  ; Bit[1:0]
=$00						SDC_TRANS_DIRECT      = $00   ; 00 = Direct Access
=$01						SDC_TRANS_INIT_SD     = $01   ; 01 = Init SD
=$02						SDC_TRANS_READ_BLK    = $02   ; 10 = RW_READ_BLOCK (512 Bytes)
=$03						SDC_TRANS_WRITE_BLK   = $03   ; 11 = RW_WRITE_SD_BLOCK
=$afea03					SDC_TRANS_CONTROL_REG   = $AFEA03
=$01						SDC_TRANS_START         = $01
=$afea04					SDC_TRANS_STATUS_REG    = $AFEA04
=$01						SDC_TRANS_BUSY          = $01     ;  1= Transaction Busy
=$afea05					SDC_TRANS_ERROR_REG     = $AFEA05
=$00						SDC_TRANS_INIT_NO_ERR   = $00   ; Init Error Report [1:0]
=$01						SDC_TRANS_INIT_CMD0_ERR = $01
=$02						SDC_TRANS_INIT_CMD1_ERR = $02
=$00						SDC_TRANS_RD_NO_ERR     = $00   ; Read Error Report [3:2]
=$04						SDC_TRANS_RD_CMD_ERR    = $04
=$08						SDC_TRANS_RD_TOKEN_ERR  = $08
=$00						SDC_TRANS_WR_NO_ERR     = $00   ; Write Report Error  [5:4]
=$10						SDC_TRANS_WR_CMD_ERR    = $10   ;
=$20						SDC_TRANS_WR_DATA_ERR   = $20
=$30						SDC_TRANS_WR_BUSY_ERR   = $30
=$afea06					SDC_DIRECT_ACCESS_REG   = $AFEA06 ; SPI Direct Read and Write - Set DATA before initiating direct Access Transaction
=$afea07					SDC_SD_ADDR_7_0_REG     = $AFEA07 ; Set the ADDR before a block read or block write
=$afea08					SDC_SD_ADDR_15_8_REG    = $AFEA08 ; Addr0 [8:0] Always should be 0, since each block is 512Bytes
=$afea09					SDC_SD_ADDR_23_16_REG   = $AFEA09
=$afea0a					SDC_SD_ADDR_31_24_REG   = $AFEA0A
=$afea0b					SDC_SPI_CLK_DEL_REG     = $AFEA0B
=$afea10					SDC_RX_FIFO_DATA_REG    = $AFEA10 ; Data from the Block Read
=$afea12					SDC_RX_FIFO_DATA_CNT_HI = $AFEA12 ; How many Bytes in the FIFO HI
=$afea13					SDC_RX_FIFO_DATA_CNT_LO = $AFEA13 ; How many Bytes in the FIFO LO
=$afea14					SDC_RX_FIFO_CTRL_REG    = $AFEA14 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)
=$afea20					SDC_TX_FIFO_DATA_REG    = $AFEA20 ; Write Data Block here
=$afea24					SDC_TX_FIFO_CTRL_REG    = $AFEA24 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)

;******  Return to file: src\kernel.asm


;******  Processing file: src\sdos.asm


;******  Processing file: src\sdos_fat.asm


;******  Processing file: src\sdos_bios.asm

=$80						BIOS_TIMEOUT = $80              ; Flag to indicate if a time out has occurred (see ISETTIMEOUT)
=0						BIOS_DEV_FDC = 0                ; Floppy 0
=1						BIOS_DEV_FD1 = 1                ; Future support: Floppy 1 (not likely to be attached)
=2						BIOS_DEV_SD = 2                 ; SD card, partition 0
=3						BIOS_DEV_SD1 = 3                ; Future support: SD card, partition 1
=4						BIOS_DEV_SD2 = 4                ; Future support: SD card, partition 2
=5						BIOS_DEV_SD3 = 5                ; Future support: SD card, partition 3
=6						BIOS_DEV_HD0 = 6                ; Future support: IDE Drive 0, partition 0
=7						BIOS_DEV_HD1 = 7                ; Future support: IDE Drive 0, partition 1
=8						BIOS_DEV_HD2 = 8                ; Future support: IDE Drive 0, partition 2
=9						BIOS_DEV_HD3 = 9                ; Future support: IDE Drive 0, partition 3
=$80						BIOS_ERR_BADDEV = $80           ; BIOS bad device # error
=$81						BIOS_ERR_MOUNT = $81            ; BIOS failed to mount the device
=$82						BIOS_ERR_READ = $82             ; BIOS failed to read from a device
=$83						BIOS_ERR_WRITE = $83            ; BIOS failed to write to a device
=$84						BIOS_ERR_TRACK = $84            ; BIOS failed to seek to the correct track
=$85						BIOS_ERR_CMD = $85              ; A general block device command error
=$86						BIOS_ERR_WRITEPROT = $86        ; The media was write-protected
=$87						BIOS_ERR_NOMEDIA = $87          ; No media detected... unable to read/write in time
=$88						BIOS_ERR_RESULT = $88           ; Couldn't get the result bytes for some reason
=$89						BIOS_ERR_OOS = $89              ; FDC state is somehow out of sync with the driver.
=$8a						BIOS_ERR_NOTATA = $8A           ; IDE drive is not ATA
=$8b						BIOS_ERR_NOTINIT = $8B          ; Could not initilize the device
=$8c						BIOS_ERR_TIMEOUT = $8C          ; Timeout error
.393d2c						ITRACE
.393d2c		08		php		                PHP
.393d2d		c2 30		rep #$30	                REP #$30        ; set A&X long
.393d2f		8b		phb		                PHB                 ; Print the text
.393d30		a3 06		lda $06,s	                LDA #6,S            ; Get bits[15..0] of string pointer
.393d32		aa		tax		                TAX                 ; ... into X
.393d33		e2 20		sep #$20	                SEP #$20        ; set A short
.393d35		a3 08		lda $08,s	                LDA #8,S            ; Get bits[23..16] of string pointer
.393d37		48		pha		                PHA
.393d38		ab		plb		                PLB                 ; ... into B
.393d39		22 45 07 39	jsl $390745	                JSL IPUTS           ; Print the string
.393d3d		c2 20		rep #$20	                REP #$20        ; set A long
.393d3f		a3 04		lda $04,s	                LDA #4,S            ; Move P and return address down over the string pointer
.393d41		83 08		sta $08,s	                STA #8,S
.393d43		a3 02		lda $02,s	                LDA #2,S
.393d45		83 06		sta $06,s	                STA #6,S
.393d47		ab		plb		                PLB
.393d48		68		pla		                PLA                 ; Clean up the stack
.393d49		68		pla		                PLA
.393d4a		28		plp		                PLP
.393d4b		6b		rtl		                RTL
.393d4c						ISETTIMEOUT
.393d4c		8b		phb		                PHB
.393d4d		0b		phd		                PHD
.393d4e		08		php		                PHP
.393d4f		48		pha		                PHA             ; begin setdbr macro
.393d50		08		php		                PHP
.393d51		e2 20		sep #$20	                SEP #$20        ; set A short
.393d53		a9 00		lda #$00	                LDA #0
.393d55		48		pha		                PHA
.393d56		ab		plb		                PLB
.393d57		28		plp		                PLP
.393d58		68		pla		                PLA             ; end setdbr macro
.393d59		48		pha		                PHA             ; begin setdp macro
.393d5a		08		php		                PHP
.393d5b		c2 20		rep #$20	                REP #$20        ; set A long
.393d5d		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393d60		5b		tcd		                TCD
.393d61		28		plp		                PLP
.393d62		68		pla		                PLA             ; end setdp macro
.393d63		78		sei		                SEI                             ; We don't want to be interrupted
.393d64		e2 20		sep #$20	                SEP #$20        ; set A short
.393d66		85 0d		sta $032d	                STA @b BIOS_TIMER               ; Set the number of ticks to wait
.393d68		a5 0c		lda $032c	                LDA @b BIOS_FLAGS               ; Clear the BIOS_TIMEOUT flag
.393d6a		29 7f		and #$7f	                AND #~BIOS_TIMEOUT
.393d6c		85 0c		sta $032c	                STA @b BIOS_FLAGS
.393d6e		28		plp		done            PLP
.393d6f		2b		pld		                PLD
.393d70		ab		plb		                PLB
.393d71		6b		rtl		                RTL
.393d72						ICMDBLOCK
.393d72		0b		phd		                PHD
.393d73		08		php		                PHP
.393d74		48		pha		                PHA             ; begin setdp macro
.393d75		08		php		                PHP
.393d76		c2 20		rep #$20	                REP #$20        ; set A long
.393d78		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393d7b		5b		tcd		                TCD
.393d7c		28		plp		                PLP
.393d7d		68		pla		                PLA             ; end setdp macro
.393d7e		e2 20		sep #$20	                SEP #$20        ; set A short
.393d80		a5 01		lda $0321	                LDA BIOS_DEV                ; Get the device number
.393d82		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Check to see if we're sending to the floppy
.393d84		d0 06		bne $393d8c	                BNE ret_success             ; No: just return
.393d86		22 d7 66 39	jsl $3966d7	                JSL FDC_CMDBLOCK            ; Yes: call upon the floppy code
.393d8a		90 0c		bcc $393d98	                BCC pass_failure
.393d8c						ret_success
.393d8c		e2 20		sep #$20	                SEP #$20        ; set A short
.393d8e		64 00		stz $0320	                STZ BIOS_STATUS
.393d90		28		plp		                PLP
.393d91		2b		pld		                PLD
.393d92		38		sec		                SEC
.393d93		6b		rtl		                RTL
.393d94						ret_failure
.393d94		e2 20		sep #$20	                SEP #$20        ; set A short
.393d96		85 00		sta $0320	                STA BIOS_STATUS
.393d98		28		plp		pass_failure    PLP
.393d99		2b		pld		                PLD
.393d9a		18		clc		                CLC
.393d9b		6b		rtl		                RTL
.393d9c						IGETBLOCK
.393d9c		5a		phy		                PHY
.393d9d		0b		phd		                PHD
.393d9e		8b		phb		                PHB
.393d9f		08		php		                PHP
.393da0		48		pha		                PHA             ; begin setdbr macro
.393da1		08		php		                PHP
.393da2		e2 20		sep #$20	                SEP #$20        ; set A short
.393da4		a9 00		lda #$00	                LDA #0
.393da6		48		pha		                PHA
.393da7		ab		plb		                PLB
.393da8		28		plp		                PLP
.393da9		68		pla		                PLA             ; end setdbr macro
.393daa		48		pha		                PHA             ; begin setdp macro
.393dab		08		php		                PHP
.393dac		c2 20		rep #$20	                REP #$20        ; set A long
.393dae		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393db1		5b		tcd		                TCD
.393db2		28		plp		                PLP
.393db3		68		pla		                PLA             ; end setdp macro
.393db4		e2 20		sep #$20	                SEP #$20        ; set A short
.393db6		a0 00 00	ldy #$0000	                LDY #0
.393db9		a9 5a		lda #$5a	                LDA #$5A                            ; Fill the buffer with a pattern we can recognize
.393dbb		97 06		sta [$0326],y	clr_loop        STA [BIOS_BUFF_PTR],Y               ; To make errors loading obvious
.393dbd		c8		iny		                INY
.393dbe		c0 00 02	cpy #$0200	                CPY #512
.393dc1		d0 f8		bne $393dbb	                BNE clr_loop
.393dc3		a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.393dc5		c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.393dc7		f0 14		beq $393ddd	                BEQ sd_getblock                     ; Yes: go to the SDC GETBLOCK routine
.393dc9		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the floppy drive?
.393dcb		f0 18		beq $393de5	                BEQ fd_getblock                     ; Yes: go to the FDC GETBLOCK routine
.393dcd		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.393dcf		f0 1c		beq $393ded	                BEQ hd_getblock
.393dd1		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.393dd3						ret_failure
.393dd3		e2 20		sep #$20	                SEP #$20        ; set A short
.393dd5		85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.393dd7		28		plp		                PLP
.393dd8		ab		plb		                PLB
.393dd9		2b		pld		                PLD
.393dda		7a		ply		                PLY
.393ddb		38		sec		                SEC                                 ; Return failure
.393ddc		6b		rtl		                RTL
.393ddd		22 e3 5b 39	jsl $395be3	sd_getblock     JSL SDC_GETBLOCK                    ; Call the SDC GETBLOCK routine
.393de1		b0 12		bcs $393df5	                BCS ret_success
.393de3		80 ee		bra $393dd3	                BRA ret_failure
.393de5		22 dc 64 39	jsl $3964dc	fd_getblock     JSL FDC_GETBLOCK                    ; Call the FDC GETBLOCK routine
.393de9		b0 0a		bcs $393df5	                BCS ret_success
.393deb		80 e6		bra $393dd3	                BRA ret_failure
.393ded		22 f0 6a 39	jsl $396af0	hd_getblock     JSL IDE_GETBLOCK                    ; Call the IDE GETBLOCK routine
.393df1		b0 02		bcs $393df5	                BCS ret_success
.393df3		80 de		bra $393dd3	                BRA ret_failure
.393df5						ret_success
.393df5		e2 20		sep #$20	                SEP #$20        ; set A short
.393df7		64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.393df9		28		plp		                PLP
.393dfa		ab		plb		                PLB
.393dfb		2b		pld		                PLD
.393dfc		7a		ply		                PLY
.393dfd		38		sec		                SEC                                 ; Return success
.393dfe		6b		rtl		                RTL
.393dff						IPUTBLOCK
.393dff		0b		phd		                PHD
.393e00		8b		phb		                PHB
.393e01		08		php		                PHP
.393e02		48		pha		                PHA             ; begin setdbr macro
.393e03		08		php		                PHP
.393e04		e2 20		sep #$20	                SEP #$20        ; set A short
.393e06		a9 00		lda #$00	                LDA #0
.393e08		48		pha		                PHA
.393e09		ab		plb		                PLB
.393e0a		28		plp		                PLP
.393e0b		68		pla		                PLA             ; end setdbr macro
.393e0c		48		pha		                PHA             ; begin setdp macro
.393e0d		08		php		                PHP
.393e0e		c2 20		rep #$20	                REP #$20        ; set A long
.393e10		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393e13		5b		tcd		                TCD
.393e14		28		plp		                PLP
.393e15		68		pla		                PLA             ; end setdp macro
.393e16		e2 20		sep #$20	                SEP #$20        ; set A short
.393e18		a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.393e1a		c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.393e1c		f0 13		beq $393e31	                BEQ sd_putblock                     ; Yes: go to the SDC PUTBLOCK routine
.393e1e		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the FDC?
.393e20		f0 17		beq $393e39	                BEQ fd_putblock                     ; Yes: go to the FDC PUTBLOCK routine
.393e22		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.393e24		f0 1b		beq $393e41	                BEQ hd_putblock
.393e26		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.393e28						ret_failure
.393e28		e2 20		sep #$20	                SEP #$20        ; set A short
.393e2a		85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.393e2c		28		plp		                PLP
.393e2d		ab		plb		                PLB
.393e2e		2b		pld		                PLD
.393e2f		18		clc		                CLC                                 ; Return failure
.393e30		6b		rtl		                RTL
.393e31		22 8a 5c 39	jsl $395c8a	sd_putblock     JSL SDC_PUTBLOCK                    ; Call the SDC PUTBLOCK routine
.393e35		90 f1		bcc $393e28	                BCC ret_failure
.393e37		80 10		bra $393e49	                BRA ret_success
.393e39		22 41 65 39	jsl $396541	fd_putblock     JSL FDC_PUTBLOCK                    ; Call the FDC PUTBLOCK routine
.393e3d		90 e9		bcc $393e28	                BCC ret_failure
.393e3f		80 08		bra $393e49	                BRA ret_success
.393e41		22 7b 6b 39	jsl $396b7b	hd_putblock     JSL IDE_PUTBLOCK                    ; Call the IDE PUTBLOCK routine
.393e45		90 e1		bcc $393e28	                BCC ret_failure
.393e47		80 00		bra $393e49	                BRA ret_success
.393e49						ret_success
.393e49		e2 20		sep #$20	                SEP #$20        ; set A short
.393e4b		64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.393e4d		28		plp		                PLP
.393e4e		ab		plb		                PLB
.393e4f		2b		pld		                PLD
.393e50		38		sec		                SEC                                 ; Return success
.393e51		6b		rtl		                RTL

;******  Return to file: src\sdos_fat.asm


;******  Processing file: src\sdos_dir.asm

.393e52						DOS_DIROPEN
.393e52		da		phx		                PHX
.393e53		5a		phy		                PHY
.393e54		0b		phd		                PHD
.393e55		8b		phb		                PHB
.393e56		08		php		                PHP
.393e57		48		pha		                PHA             ; begin setdbr macro
.393e58		08		php		                PHP
.393e59		e2 20		sep #$20	                SEP #$20        ; set A short
.393e5b		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.393e5d		48		pha		                PHA
.393e5e		ab		plb		                PLB
.393e5f		28		plp		                PLP
.393e60		68		pla		                PLA             ; end setdbr macro
.393e61		48		pha		                PHA             ; begin setdp macro
.393e62		08		php		                PHP
.393e63		c2 20		rep #$20	                REP #$20        ; set A long
.393e65		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393e68		5b		tcd		                TCD
.393e69		28		plp		                PLP
.393e6a		68		pla		                PLA             ; end setdp macro
.393e6b		ad 20 a0	lda $38a020	                LDA ROOT_DIR_FIRST_CLUSTER  ; Set the cluster (or sector for FAT12)
.393e6e		8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID        ; to that of the root directory's start
.393e71		ad 22 a0	lda $38a022	                LDA ROOT_DIR_FIRST_CLUSTER+2
.393e74		8d 34 a0	sta $38a034	                STA DOS_DIR_BLOCK_ID+2
.393e77		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Point to the directory cluster buffer for loading
.393e7a		85 1c		sta $033c	                STA DOS_BUFF_PTR
.393e7c		85 18		sta $0338	                STA DOS_DIR_PTR
.393e7e		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.393e81		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.393e83		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.393e85		e2 20		sep #$20	                SEP #$20        ; set A short
.393e87		ad 01 a0	lda $38a001	                LDA FILE_SYSTEM             ; Check the file system
.393e8a		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12        ; Is it FAT12?
.393e8c		d0 24		bne $393eb2	                BNE fetch_fat32             ; No: handle processing the diretory as FAT32
.393e8e						fetch_fat12
.393e8e		e2 20		sep #$20	                SEP #$20        ; set A short
.393e90		a9 00		lda #$00	                LDA #DOS_DIR_TYPE_FAT12ROOT ; Set the directory type to FAT12 root directory
.393e92		8d 45 a0	sta $38a045	                STA DOS_DIR_TYPE
.393e95		c2 20		rep #$20	                REP #$20        ; set A long
.393e97		a5 18		lda $0338	                LDA DOS_DIR_PTR             ; Set the BIOS buffer pointer
.393e99		85 06		sta $0326	                STA BIOS_BUFF_PTR
.393e9b		a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.393e9d		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.393e9f		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA of the sector
.393ea2		85 02		sta $0322	                STA BIOS_LBA
.393ea4		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.393ea7		85 04		sta $0324	                STA BIOS_LBA+2
.393ea9		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Get the sector from the FAT12 device
.393ead		b0 1f		bcs $393ece	                BCS do_success              ; If sucessful, set the directory cursor
.393eaf		82 84 18	brl $395736	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.393eb2						fetch_fat32
.393eb2		e2 20		sep #$20	                SEP #$20        ; set A short
.393eb4		a9 01		lda #$01	                LDA #DOS_DIR_TYPE_FILE      ; Set the directory type to file type (all FAT32, any FAT12 subdirectory)
.393eb6		8d 45 a0	sta $38a045	                STA DOS_DIR_TYPE
.393eb9		c2 20		rep #$20	                REP #$20        ; set A long
.393ebb		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID
.393ebe		85 10		sta $0330	                STA DOS_CLUS_ID
.393ec0		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.393ec3		85 12		sta $0332	                STA DOS_CLUS_ID+2
.393ec5		22 35 44 39	jsl $394435	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.393ec9		b0 03		bcs $393ece	                BCS do_success              ; If successful: set the directory cursor
.393ecb		82 68 18	brl $395736	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.393ece		82 6c 18	brl $39573d	do_success      BRL IF_SUCCESS
.393ed1						DOS_DIRFIRST
.393ed1		0b		phd		                PHD
.393ed2		08		php		                PHP
.393ed3		48		pha		                PHA             ; begin setdp macro
.393ed4		08		php		                PHP
.393ed5		c2 20		rep #$20	                REP #$20        ; set A long
.393ed7		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393eda		5b		tcd		                TCD
.393edb		28		plp		                PLP
.393edc		68		pla		                PLA             ; end setdp macro
.393edd		c2 20		rep #$20	                REP #$20        ; set A long
.393edf		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER
.393ee2		85 18		sta $0338	                STA DOS_DIR_PTR
.393ee4		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.393ee7		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.393ee9		28		plp		                PLP
.393eea		2b		pld		                PLD
.393eeb		6b		rtl		                RTL
.393eec						DOS_DIRNEXT
.393eec		da		phx		                PHX
.393eed		5a		phy		                PHY
.393eee		0b		phd		                PHD
.393eef		8b		phb		                PHB
.393ef0		08		php		                PHP
.393ef1		48		pha		                PHA             ; begin setdbr macro
.393ef2		08		php		                PHP
.393ef3		e2 20		sep #$20	                SEP #$20        ; set A short
.393ef5		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.393ef7		48		pha		                PHA
.393ef8		ab		plb		                PLB
.393ef9		28		plp		                PLP
.393efa		68		pla		                PLA             ; end setdbr macro
.393efb		48		pha		                PHA             ; begin setdp macro
.393efc		08		php		                PHP
.393efd		c2 20		rep #$20	                REP #$20        ; set A long
.393eff		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393f02		5b		tcd		                TCD
.393f03		28		plp		                PLP
.393f04		68		pla		                PLA             ; end setdp macro
.393f05		c2 20		rep #$20	                REP #$20        ; set A long
.393f07		18		clc		                CLC                         ; Advance the directory entry pointer to the next entry
.393f08		a5 18		lda $0338	                LDA DOS_DIR_PTR
.393f0a		69 20 00	adc #$0020	                ADC #DOS_DIR_ENTRY_SIZE
.393f0d		85 18		sta $0338	                STA DOS_DIR_PTR
.393f0f		a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.393f11		69 00 00	adc #$0000	                ADC #0
.393f14		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.393f16		38		sec		                SEC                         ; Check to see if we've reached the end of the sector buffer
.393f17		a9 00 a3	lda #$a300	                LDA #<>DOS_DIR_CLUSTER_END
.393f1a		e5 18		sbc $0338	                SBC DOS_DIR_PTR
.393f1c		85 28		sta $0348	                STA DOS_TEMP
.393f1e		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER_END
.393f21		e5 1a		sbc $033a	                SBC DOS_DIR_PTR+2
.393f23		85 2a		sta $034a	                STA DOS_TEMP+2
.393f25		30 0c		bmi $393f33	                BMI get_next_block          ; Yes: try to fetch the next directory entry
.393f27		f0 03		beq $393f2c	                BEQ check_lower
.393f29		82 11 18	brl $39573d	                BRL IF_SUCCESS
.393f2c		a5 28		lda $0348	check_lower     LDA DOS_TEMP
.393f2e		f0 03		beq $393f33	                BEQ get_next_block
.393f30		82 0a 18	brl $39573d	                BRL IF_SUCCESS
.393f33						get_next_block
.393f33		e2 20		sep #$20	                SEP #$20        ; set A short
.393f35		ad 45 a0	lda $38a045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.393f38		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE
.393f3a		f0 38		beq $393f74	                BEQ next_cluster            ; FILE TYPE: it's cluster based (FAT32, or FAT12 non-root)
.393f3c						next_sector
.393f3c		c2 20		rep #$20	                REP #$20        ; set A long
.393f3e		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID
.393f41		1a		inc a		                INC A
.393f42		8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID        ; Increment the sector number (FAT12 root directory is sector based)
.393f45		c9 0a 00	cmp #$000a	                CMP #10                     ; See if we're at the end (TODO: calculate this)
.393f48		d0 07		bne $393f51	                BNE read_sector
.393f4a		e2 20		sep #$20	                SEP #$20        ; set A short
.393f4c		a9 00		lda #$00	                LDA #0
.393f4e		82 e1 17	brl $395732	                BRL IF_FAILURE
.393f51						read_sector
.393f51		c2 20		rep #$20	                REP #$20        ; set A long
.393f53		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA to the sector #
.393f56		85 02		sta $0322	                STA BIOS_LBA
.393f58		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.393f5b		85 04		sta $0324	                STA BIOS_LBA+2
.393f5d		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointers to the buffer
.393f60		85 06		sta $0326	                STA BIOS_BUFF_PTR
.393f62		85 18		sta $0338	                STA DOS_DIR_PTR
.393f64		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.393f67		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.393f69		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.393f6b		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Attempt to read the sector from the FAT12 device
.393f6f		b0 39		bcs $393faa	                BCS do_success              ; If successful: set the directory cursor
.393f71		82 c2 17	brl $395736	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.393f74						next_cluster
.393f74		c2 20		rep #$20	                REP #$20        ; set A long
.393f76		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Get the current block (cluster) ID
.393f79		85 10		sta $0330	                STA DOS_CLUS_ID
.393f7b		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.393f7e		85 12		sta $0332	                STA DOS_CLUS_ID+2
.393f80		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER
.393f83		85 1c		sta $033c	                STA DOS_BUFF_PTR
.393f85		85 18		sta $0338	                STA DOS_DIR_PTR
.393f87		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.393f8a		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.393f8c		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.393f8e		22 49 48 39	jsl $394849	                JSL NEXTCLUSTER             ; Try to find the next cluster
.393f92		b0 03		bcs $393f97	                BCS set_next
.393f94		82 9f 17	brl $395736	                BRL IF_PASSFAILURE          ; If error: pass it up the chain
.393f97		a5 10		lda $0330	set_next        LDA DOS_CLUS_ID             ; Save the cluster as the current directory cluster
.393f99		8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID
.393f9c		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.393f9e		8d 34 a0	sta $38a034	                STA DOS_DIR_BLOCK_ID+2
.393fa1		22 35 44 39	jsl $394435	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.393fa5		b0 03		bcs $393faa	                BCS do_success              ; If successful: set the directory cursor
.393fa7		82 8c 17	brl $395736	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.393faa		82 90 17	brl $39573d	do_success      BRL IF_SUCCESS
.393fad						DOS_DIRFINDFREE
.393fad		da		phx		                PHX
.393fae		5a		phy		                PHY
.393faf		0b		phd		                PHD
.393fb0		8b		phb		                PHB
.393fb1		08		php		                PHP
.393fb2		48		pha		                PHA             ; begin setdbr macro
.393fb3		08		php		                PHP
.393fb4		e2 20		sep #$20	                SEP #$20        ; set A short
.393fb6		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.393fb8		48		pha		                PHA
.393fb9		ab		plb		                PLB
.393fba		28		plp		                PLP
.393fbb		68		pla		                PLA             ; end setdbr macro
.393fbc		48		pha		                PHA             ; begin setdp macro
.393fbd		08		php		                PHP
.393fbe		c2 20		rep #$20	                REP #$20        ; set A long
.393fc0		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393fc3		5b		tcd		                TCD
.393fc4		28		plp		                PLP
.393fc5		68		pla		                PLA             ; end setdp macro
.393fc6		22 54 52 39	jsl $395254	                JSL IF_DIROPEN
.393fca		b0 06		bcs $393fd2	                BCS start_walk
.393fcc		a9 08 00	lda #$0008	                LDA #DOS_ERR_NODIR          ; Return that we could not read the directory
.393fcf		82 28 00	brl $393ffa	                BRL ret_failure
.393fd2		a0 00 00	ldy #$0000	start_walk      LDY #0                      ; We check the first character of the entry
.393fd5						chk_entry
.393fd5		e2 20		sep #$20	                SEP #$20        ; set A short
.393fd7		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the first byte of the directory entry
.393fd9		f0 1c		beq $393ff7	                BEQ ret_success             ; If 0: we have a blank... return it
.393fdb		c9 e5		cmp #$e5	                CMP #DOS_DIR_ENT_UNUSED     ; Is it an unused (deleted) entry?
.393fdd		f0 18		beq $393ff7	                BEQ ret_success             ; Yes: return it
.393fdf		22 8e 52 39	jsl $39528e	                JSL IF_DIRNEXT              ; Go to the next directory entry
.393fe3		b0 ed		bcs $393fd2	                BCS start_walk              ; If we got one, start walking it
.393fe5		22 fd 3f 39	jsl $393ffd	                JSL DOS_DIRAPPEND           ; If there isn't one, create a blank cluster
.393fe9		90 0f		bcc $393ffa	                BCC ret_failure             ; If that didn't work, return the failure
.393feb		c2 20		rep #$20	                REP #$20        ; set A long
.393fed		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Return the first entry
.393ff0		85 18		sta $0338	                STA DOS_DIR_PTR
.393ff2		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.393ff5		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.393ff7		82 43 17	brl $39573d	ret_success     BRL IF_SUCCESS
.393ffa		82 35 17	brl $395732	ret_failure     BRL IF_FAILURE
.393ffd						DOS_DIRAPPEND
.393ffd		da		phx		                PHX
.393ffe		8b		phb		                PHB
.393fff		0b		phd		                PHD
.394000		08		php		                PHP
.394001		48		pha		                PHA             ; begin setdbr macro
.394002		08		php		                PHP
.394003		e2 20		sep #$20	                SEP #$20        ; set A short
.394005		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394007		48		pha		                PHA
.394008		ab		plb		                PLB
.394009		28		plp		                PLP
.39400a		68		pla		                PLA             ; end setdbr macro
.39400b		48		pha		                PHA             ; begin setdp macro
.39400c		08		php		                PHP
.39400d		c2 20		rep #$20	                REP #$20        ; set A long
.39400f		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394012		5b		tcd		                TCD
.394013		28		plp		                PLP
.394014		68		pla		                PLA             ; end setdp macro
.394015		e2 20		sep #$20	                SEP #$20        ; set A short
.394017		ad 45 a0	lda $38a045	                LDA DOS_DIR_TYPE
.39401a		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE          ; Are we looking at a file type directory
.39401c		f0 09		beq $394027	                BEQ clr_sector                  ; Yes: clear out the directory data
.39401e						ret_failure
.39401e		e2 20		sep #$20	                SEP #$20        ; set A short
.394020		a9 15		lda #$15	                LDA #DOS_ERR_DIRFULL            ; No: return a directory-full error
.394022		85 0e		sta $032e	                STA DOS_STATUS
.394024		82 3e 00	brl $394065	                BRL pass_failure
.394027						clr_sector
.394027		c2 20		rep #$20	                REP #$20        ; set A long
.394029		a9 00 00	lda #$0000	                LDA #0
.39402c		a2 00 00	ldx #$0000	                LDX #0
.39402f		9d 00 a1	sta $38a100,x	clr_loop        STA DOS_DIR_CLUSTER,X           ; Clear the directory cluster
.394032		e8		inx		                INX
.394033		e8		inx		                INX
.394034		e0 00 02	cpx #$0200	                CPX #512
.394037		d0 f6		bne $39402f	                BNE clr_loop
.394039		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER          ; Point to the new, blank directory data
.39403c		85 1c		sta $033c	                STA DOS_BUFF_PTR
.39403e		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.394041		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394043		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID            ; We want to append it to the current directory
.394046		85 10		sta $0330	                STA DOS_CLUS_ID
.394048		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.39404b		85 12		sta $0332	                STA DOS_CLUS_ID+2
.39404d		22 6a 4c 39	jsl $394c6a	                JSL DOS_APPENDCLUS              ; Attempt to append the blank data as a new cluster
.394051		90 12		bcc $394065	                BCC pass_failure                ; If there was an error, pass it up the chain
.394053		ad 36 a0	lda $38a036	                LDA DOS_NEW_CLUSTER             ; Set the block ID of the new directory cluster
.394056		8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID
.394059		ad 38 a0	lda $38a038	                LDA DOS_NEW_CLUSTER+2
.39405c		8d 34 a0	sta $38a034	                STA DOS_DIR_BLOCK_ID+2
.39405f		28		plp		ret_success     PLP
.394060		2b		pld		                PLD
.394061		ab		plb		                PLB
.394062		fa		plx		                PLX
.394063		38		sec		                SEC
.394064		6b		rtl		                RTL
.394065		28		plp		pass_failure    PLP
.394066		2b		pld		                PLD
.394067		ab		plb		                PLB
.394068		fa		plx		                PLX
.394069		18		clc		                CLC
.39406a		6b		rtl		                RTL
.39406b						DOS_DIRWRITE
.39406b		da		phx		                PHX
.39406c		5a		phy		                PHY
.39406d		0b		phd		                PHD
.39406e		8b		phb		                PHB
.39406f		08		php		                PHP
.394070		48		pha		                PHA             ; begin setdbr macro
.394071		08		php		                PHP
.394072		e2 20		sep #$20	                SEP #$20        ; set A short
.394074		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394076		48		pha		                PHA
.394077		ab		plb		                PLB
.394078		28		plp		                PLP
.394079		68		pla		                PLA             ; end setdbr macro
.39407a		48		pha		                PHA             ; begin setdp macro
.39407b		08		php		                PHP
.39407c		c2 20		rep #$20	                REP #$20        ; set A long
.39407e		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394081		5b		tcd		                TCD
.394082		28		plp		                PLP
.394083		68		pla		                PLA             ; end setdp macro
.394084		e2 20		sep #$20	                SEP #$20        ; set A short
.394086		ad 45 a0	lda $38a045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.394089		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE      ; Is it a file type directory (FAT32 or FAT12 non-root?)
.39408b		f0 1f		beq $3940ac	                BEQ write_cluster           ; Yes: write it back using a cluster ID
.39408d						write_sector
.39408d		c2 20		rep #$20	                REP #$20        ; set A long
.39408f		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the BIOS_LBA to the LBA of the sector
.394092		85 02		sta $0322	                STA BIOS_LBA
.394094		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.394097		85 04		sta $0324	                STA BIOS_LBA+2
.394099		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.39409c		85 06		sta $0326	                STA BIOS_BUFF_PTR
.39409e		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.3940a1		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3940a3		22 24 10 00	jsl $001024	                JSL PUTBLOCK                ; Try to write the sector to disk
.3940a7		b0 1f		bcs $3940c8	                BCS ret_success
.3940a9		82 86 16	brl $395732	ret_failure     BRL IF_FAILURE
.3940ac						write_cluster
.3940ac		c2 20		rep #$20	                REP #$20        ; set A long
.3940ae		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the DOS_CLUS_ID to the ID of the cluster
.3940b1		85 10		sta $0330	                STA DOS_CLUS_ID
.3940b3		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.3940b6		85 12		sta $0332	                STA DOS_CLUS_ID+2
.3940b8		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.3940bb		85 1c		sta $033c	                STA DOS_BUFF_PTR
.3940bd		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.3940c0		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3940c2		22 72 44 39	jsl $394472	                JSL DOS_PUTCLUSTER          ; Try to write the cluster to disk
.3940c6		90 e1		bcc $3940a9	                BCC ret_failure
.3940c8		82 72 16	brl $39573d	ret_success     BRL IF_SUCCESS

;******  Return to file: src\sdos_fat.asm

.0000						DEVICE_DESC
>0000						DEVNAME         .dword ?            ; A pointer to the ASCIIZ name of the device
>0004						DEVNUMBER       .byte ?           ; The BIOS_DEV number for the device
>0005						NEXT            .dword ?            ; A pointer to the next device descriptor
.0000						DIRENTRY
>0000						SHORTNAME               .fill 11        ; $00 - The short name of the file (8 name, 3 extension)
>000b						ATTRIBUTE               .byte ?         ; $0B - The attribute bits
>000c						IGNORED1                .word ?         ; $0C - Unused (by us) bytes
>000e						CREATE_TIME             .word ?         ; $0E - Creation time
>0010						CREATE_DATE             .word ?         ; $10 - Creation date
>0012						ACCESS_DATE             .word ?         ; $12 - Last access date
>0014						CLUSTER_H               .word ?         ; $14 - High word of the first cluster #
>0016						MODIFIED_TIME           .word ?         ; $16 - Last modified time
>0018						MODIFIED_DATE           .word ?         ; $18 - Last modified date
>001a						CLUSTER_L               .word ?         ; $1A - Low word of the first cluster #
>001c						SIZE                    .dword ?        ; $1C - The size of the file (in bytes)
=$01						DOS_ATTR_RO = $01                       ; File is read-only
=$02						DOS_ATTR_HIDDEN = $02                   ; File is hidden
=$04						DOS_ATTR_SYSTEM = $04                   ; File is a system file
=$08						DOS_ATTR_VOLUME = $08                   ; Entry is the volume label
=$10						DOS_ATTR_DIR = $10                      ; Entry is a directory
=$20						DOS_ATTR_ARCH = $20                     ; Entry has changed since last backup
=$0f						DOS_ATTR_LONGNAME = $0F                 ; Entry is the long file name
.0000						FILEDESC
>0000						STATUS              .byte ?             ; The status flags of the file descriptor (open, closed, error, EOF, etc.)
>0001						DEV                 .byte ?             ; The ID of the device holding the file
>0002						PATH                .dword ?            ; Pointer to a NULL terminated path string
>0006						CLUSTER             .dword ?            ; The current cluster of the file.
>000a						FIRST_CLUSTER       .dword ?            ; The ID of the first cluster in the file
>000e						BUFFER              .dword ?            ; Pointer to a cluster-sized buffer
>0012						SIZE                .dword ?            ; The size of the file
>0016						CREATE_DATE         .word ?             ; The creation date of the file
>0018						CREATE_TIME         .word ?             ; The creation time of the file
>001a						MODIFIED_DATE       .word ?             ; The modification date of the file
>001c						MODIFIED_TIME       .word ?             ; The modification time of the file
>001e						RESERVED            .word ?             ; Two reserved bytes to bring the descriptor up to 32 bytes
=$01						FD_STAT_READ = $01                      ; The file is readable
=$02						FD_STAT_WRITE = $02                     ; The file is writable
=$10						FD_STAT_ALLOC = $10                     ; The file descriptor has been allocated
=$20						FD_STAT_OPEN = $20                      ; The file is open
=$40						FD_STAT_ERROR = $40                     ; The file is in an error condition
=$80						FD_STAT_EOF = $80                       ; The file cursor is at the end of the file
=$0fffffff					FAT_LAST_CLUSTER = $0FFFFFFF            ; Code to mark the last cluster of a file
=1						VOLUMEMAX = 1                           ; The maximum number of mounted volumes we support
=32						DOS_DIR_ENTRY_SIZE = 32                 ; The size of a directory entry
=512						DOS_SECTOR_SIZE = 512                   ; The size of a sector
=$e5						DOS_DIR_ENT_UNUSED = $E5                ; Marker for an unused directory entry
=$00						PART_TYPE_FAT12 = $00                   ; "Partition" type: FAT12, used for floppy disks
=$0c						PART_TYPE_FAT32_LBA = $0C               ; Patition type: FAT32 with LBA addressing
=$29						BPB_EXTENDED_RECORD = $29               ; If SIGNATUREB of the BPB has this byte, the volume label is valid
=0						DOS_DIR_TYPE_FAT12ROOT = 0              ; Directory is a FAT12 root directory
=1						DOS_DIR_TYPE_FILE = 1                   ; Directory is a file type directory
=8						DOS_FD_MAX = 8                          ; The maximum number of open file descriptors
=1						DOS_ERR_READ = 1                        ; We could not read a sector, check BIOS_STATUS for details
=2						DOS_ERR_NOTMBR = 2                      ; We could not find the MBR
=3						DOS_ERR_NOFAT32 = 3                     ; We could not find a FAT32 parition using LBA
=4						DOS_ERR_NOINIT = 4                      ; We could not INIT the block device
=5						DOS_ERR_VOLID = 5                       ; Volume ID sector could not be loaded
=6						DOS_ERR_FAT = 6                         ; Can't scan the FAT for some reason
=7						DOS_ERR_BADPATH = 7                     ; The path was badly formatted
=8						DOS_ERR_NODIR = 8                       ; Could not read the directory
=9						DOS_ERR_NOTFOUND = 9                    ; File/directory requested was not found
=10						DOS_ERR_NOCLUSTER = 10                  ; There are no more clusters
=11						DOS_ERR_FILEEXISTS = 11                 ; There is already a file of that name
=12						DOS_ERR_NOTOPEN = 12                    ; File has not been open
=13						DOS_ERR_NOTREAD = 13                    ; File is not open for reading
=14						DOS_ERR_NOTWRITE = 14                   ; File is not open for writing
=15						DOS_ERR_OPEN = 15                       ; File is already open
=16						DOS_ERR_PGXSIG = 16                     ; File does not have the PGX signature
=17						DOS_ERR_NOEXEC = 17                     ; File does is not an executable format
=18						DOS_ERR_MEDIAFULL = 18                  ; There are no more free clusters on the drive
=19						DOS_ERR_WRITEPROT = 19                  ; The medium is write-protected
=20						DOS_ERR_FATUPDATE = 20                  ; Can't update the FAT
=21						DOS_ERR_DIRFULL = 21                    ; The directory is full
=22						DOS_ERR_NOFD = 22                       ; No file descriptors are available for allocation
=23						DOS_ERR_NOMEDIA = 23                    ; No media was present
=24						DOS_ERR_EOF = 24                        ; At end of file
=25						DOS_ERR_PGZSIG = 25                     ; File does not have the PGZ signature
=446						PART0_OFF = 446                         ; Offset to the first partition in the MBR
=4						PART_TYPE_OFF = 4                       ; Offset to the partition's type
=8						PART_LBA_OFF = 8                        ; Offset to the LBA of the first sector of the partition
=13						PART_SECT_COUNT_OFF = 13                ; Offset to the sector count of the partition
=510						MBR_SIGNATURE = 510                     ; The offset to the MBR signature bytes
=11						BPB_BYTEPERSEC_OFF = 11                 ; Offset in the BPB sector to the Bytes Per Sector
=13						BPB_SECPERCLUS_OFF = 13                 ; Offset in the BPB sector to the Sectors Per Cluster
=14						BPB_RSRVCLUS_OFF = 14                   ; Offset in the BPB sector to the Number of Reserved Clusters
=16						BPB_NUMFAT_OFF = 16                     ; Offset in the BPB sector to the Number of FATs
=17						BPB_ROOT_MAX_ENTRY_OFF = 17             ; Offset in the BPB sector to the Maximum # of entries in the root directory (FAT12)
=19						BPB_TOTAL_SECTORS = 19                  ; Offset in the BPB sector to the number of sectors on the partition or disk (FAT12)
=$24						BPB_SECPERFAT_OFF = $24                 ; Offset in the BPB sector to the Sectors Per FAT
=38						BPB_SIGNATUREB = 38                     ; Offset in the BPB sector to the second signature byte
=39						BPB_VOLUMEID = 39                       ; Offset in the BPB sector to the volume ID
=$2c						BPB_ROOTCLUS_OFF = $2C                  ; Offset in the BPB sector to the Root Cluster Number
=510						BPB_SIGNATURE = 510                     ; The offset to the MBR signature bytes

;******  Processing file: src\Includes/sdos_fat_vars_user_inc.asm

=$38a000					    DOS_HIGH_VARIABLES      = $38A000
=$38a000					    DEVICE                  = $38A000       ; 1 byte - The number of the block device
=$38a001					    FILE_SYSTEM             = $38A001       ; 1 byte - The type of filesystem (FAT12, FAT32, etc.)
=$38a002					    PARTITION               = $38A002       ; 1 byte - The number of the partitions on the device
=$38a003					    SECTORS_PER_CLUSTER     = $38A003       ; 1 byte - The number of sectors in a cluster
=$38a004					    FIRSTSECTOR             = $38A004       ; 4 bytes - The LBA of the first sector on the volume
=$38a008					    SECTORCOUNT             = $38A008       ; 4 bytes - The number of sectors in the volume
=$38a00c					    NUM_RSRV_SEC            = $38A00C       ; 2 bytes - The number of hidden or reserved sectors
=$38a00e					    CLUSTER_SIZE            = $38A00E       ; 2 bytes - The size of a cluster in bytes
=$38a010					    SEC_PER_FAT             = $38A010       ; 4 bytes - The number of sectors per FAT
=$38a014					    FAT_BEGIN_LBA           = $38A014       ; 4 bytes - The LBA of the first sector of FAT #1
=$38a018					    FAT2_BEGIN_LBA          = $38A018       ; 4 bytes - The LBA of the first sector of FAT #2
=$38a01c					    CLUSTER_BEGIN_LBA       = $38A01C       ; 4 bytes - The LBA of the first cluster in the storage area
=$38a020					    ROOT_DIR_FIRST_CLUSTER  = $38A020       ; 4 bytes - The number of the first cluster in the root directory
=$38a024					    ROOT_DIR_MAX_ENTRY      = $38A024       ; 2 bytes - The maximum number of entries in the root directory (0 = no limit)
=$38a026					    VOLUME_ID               = $38A026       ; 4 bytes - The ID of the volume
=$38a02a					    DOS_CURR_CLUS           = $38A02A       ; 4 bytes - The current cluster (for delete)
=$38a02e					    DOS_NEXT_CLUS           = $38A02E       ; 4 bytes - The next cluster in a file (for delete)
=$38a032					    DOS_DIR_BLOCK_ID        = $38A032       ; 4 bytes - The ID of the current directory block
=$38a036					    DOS_NEW_CLUSTER         = $38A036       ; 4 bytes - Space to store a newly written cluster ID
=$38a03a					    DOS_SHORT_NAME          = $38A03A       ; 11 bytes - The short name for a desired file
=$38a045					    DOS_DIR_TYPE            = $38A045       ; 1 byte - a code indicating the type of the current directory (0 = cluster based, $80 = sector based)
=$38a046					    DOS_CURR_DIR_ID         = $38A046       ; 4 byte - the ID of the first sector or cluster of the current directory
=$38a04a					    DOS_DEV_NAMES           = $38A04A       ; 4 byte - pointer to the linked list of device names
=$38a04e					    FDC_MOTOR_TIMER         = $38A04E       ; 2 bytes - count-down timer to automatically turn off the FDC spindle motor
=$38a050					    DOS_MOUNT_DEV           = $38A050       ; 1 byte - the device code of the currently mounted device
=$38a100					    DOS_DIR_CLUSTER         = $38A100       ; 512 bytes - A buffer for directory entries
=$38a300					    DOS_DIR_CLUSTER_END     = $38A300       ; The byte just past the end of the directory cluster buffer
=$38a300					    DOS_SECTOR              = $38A300       ; 512 bytes - A buffer for block device read/write
=$38a500					    DOS_SECTOR_END          = $38A500       ; The byte just past the end of the cluster buffer
=$38a500					    DOS_FAT_SECTORS         = $38A500       ; 1024 bytes - two sectors worth of the FAT
=$38a900					    DOS_FAT_SECTORS_END     = $38A900       ; The byte just past the end of the FAT buffers
=$38a900					    DOS_BOOT_SECTOR         = $38A900       ; A sector for holding the boot sector
=$38ab00					    DOS_BOOT_SECTOR_END     = $38AB00
=$38ab00					    DOS_SPARE_SECTOR        = $38AB00       ; A spare 512 byte buffer for loading sectors
=$38ad00					    DOS_SPARE_SECTOR_END    = $38AD00
=$38ad00					    DOS_SPARE_FD            = $38AD00       ; A spare file descriptor buffer
=3714336					DOS_SPARE_FD_END        = DOS_SPARE_FD + SIZE(FILEDESC)
=3714336					DOS_FILE_DESCS          = DOS_SPARE_FD_END
=3714592					DOS_FILE_DESCS_END      = DOS_FILE_DESCS + SIZE(FILEDESC) * DOS_FD_MAX
=$38b000					    DOS_FILE_BUFFS          = $38B000
=3719168					    DOS_FILE_BUFFS_END      = DOS_FILE_BUFFS + DOS_SECTOR_SIZE * DOS_FD_MAX

;******  Return to file: src\sdos_fat.asm

.3940cb						DOS_INIT
.3940cb		8b		phb		                PHB
.3940cc		0b		phd		                PHD
.3940cd		08		php		                PHP
.3940ce		48		pha		                PHA             ; begin setdbr macro
.3940cf		08		php		                PHP
.3940d0		e2 20		sep #$20	                SEP #$20        ; set A short
.3940d2		a9 00		lda #$00	                LDA #0
.3940d4		48		pha		                PHA
.3940d5		ab		plb		                PLB
.3940d6		28		plp		                PLP
.3940d7		68		pla		                PLA             ; end setdbr macro
.3940d8		48		pha		                PHA             ; begin setdp macro
.3940d9		08		php		                PHP
.3940da		c2 20		rep #$20	                REP #$20        ; set A long
.3940dc		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3940df		5b		tcd		                TCD
.3940e0		28		plp		                PLP
.3940e1		68		pla		                PLA             ; end setdp macro
.3940e2		e2 20		sep #$20	                SEP #$20        ; set A short
.3940e4		c2 10		rep #$10	                REP #$10        ; set X long
.3940e6		a2 00 00	ldx #$0000	                LDX #0                  ; Zero out all the bank 0 variables
.3940e9		a9 00		lda #$00	                LDA #0
.3940eb		9d 20 03	sta $0320,x	b0_clr_loop     STA @w SDOS_VARIABLES,X
.3940ee		e8		inx		                INX
.3940ef		e0 15 02	cpx #$0215	                CPX #<>(FDC_CMD_RETRY - SDOS_VARIABLES + 1)
.3940f2		d0 f7		bne $3940eb	                BNE b0_clr_loop
.3940f4		48		pha		                PHA             ; begin setdbr macro
.3940f5		08		php		                PHP
.3940f6		e2 20		sep #$20	                SEP #$20        ; set A short
.3940f8		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3940fa		48		pha		                PHA
.3940fb		ab		plb		                PLB
.3940fc		28		plp		                PLP
.3940fd		68		pla		                PLA             ; end setdbr macro
.3940fe		48		pha		                PHA             ; begin setdp macro
.3940ff		08		php		                PHP
.394100		c2 20		rep #$20	                REP #$20        ; set A long
.394102		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394105		5b		tcd		                TCD
.394106		28		plp		                PLP
.394107		68		pla		                PLA             ; end setdp macro
.394108		e2 20		sep #$20	                SEP #$20        ; set A short
.39410a		c2 10		rep #$10	                REP #$10        ; set X long
.39410c		a2 00 00	ldx #$0000	                LDX #0                  ; Zero out all the bank $38 variables
.39410f		a9 00		lda #$00	                LDA #0
.394111		9d 00 a0	sta $38a000,x	b38_clr_loop    STA @w DOS_HIGH_VARIABLES,X
.394114		e8		inx		                INX
.394115		e0 01 20	cpx #$2001	                CPX #<>(DOS_FILE_BUFFS_END - DOS_HIGH_VARIABLES + 1)
.394118		d0 f7		bne $394111	                BNE b38_clr_loop
.39411a		c2 20		rep #$20	                REP #$20        ; set A long
.39411c		a9 ca 44	lda #$44ca	                LDA #<>DOS_HD_DESC      ; Initialize the device names list
.39411f		8f 4a a0 38	sta $38a04a	                STA @l DOS_DEV_NAMES
.394123		a9 39 00	lda #$0039	                LDA #`DOS_HD_DESC
.394126		8f 4c a0 38	sta $38a04c	                STA @l DOS_DEV_NAMES+2
.39412a		e2 20		sep #$20	                SEP #$20        ; set A short
.39412c		a9 02		lda #$02	                LDA #BIOS_DEV_SD        ; Default to the SD card
.39412e		85 01		sta $0321	                STA BIOS_DEV
.394130		a9 ff		lda #$ff	                LDA #$FF                ; Set the mounted device to a sentinel value
.394132		8f 50 a0 38	sta $38a050	                STA @l DOS_MOUNT_DEV
.394136		a9 00		lda #$00	                LDA #0
.394138		a2 00 00	ldx #$0000	                LDX #0
.39413b		9d 20 ad	sta $38ad20,x	fd_zero_loop    STA @w DOS_FILE_DESCS,X
.39413e		e8		inx		                INX
.39413f		e0 00 01	cpx #$0100	                CPX #(DOS_FILE_DESCS_END - DOS_FILE_DESCS)
.394142		d0 f7		bne $39413b	                BNE fd_zero_loop
.394144		a9 00		lda #$00	                LDA #0
.394146		a2 00 00	ldx #$0000	                LDX #0
.394149		9d 00 b0	sta $38b000,x	sect_zero_loop  STA @w DOS_FILE_BUFFS,X
.39414c		e8		inx		                INX
.39414d		e0 00 10	cpx #$1000	                CPX #(DOS_FILE_BUFFS_END - DOS_FILE_BUFFS)
.394150		d0 f7		bne $394149	                BNE sect_zero_loop
.394152		c2 20		rep #$20	                REP #$20        ; set A long
.394154		a9 20 ad	lda #$ad20	                LDA #<>DOS_FILE_DESCS   ; Initialize a pointer to the file descriptors
.394157		85 20		sta $0340	                STA @b DOS_FD_PTR
.394159		a9 38 00	lda #$0038	                LDA #`DOS_FILE_DESCS
.39415c		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.39415e		a9 00 b0	lda #$b000	                LDA #<>DOS_FILE_BUFFS   ; Initialize a pointer to the sector buffers
.394161		85 28		sta $0348	                STA @b DOS_TEMP
.394163		a9 38 00	lda #$0038	                LDA #`DOS_FILE_BUFFS
.394166		85 2a		sta $034a	                STA @b DOS_TEMP+2
.394168		a2 08 00	ldx #$0008	                LDX #DOS_FD_MAX         ; Set how many file descriptors to update
.39416b		a0 0e 00	ldy #$000e	fd_buff_loop    LDY #FILEDESC.BUFFER    ; Set the file descriptor's buffer pointer
.39416e		a5 28		lda $0348	                LDA @b DOS_TEMP
.394170		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394172		c8		iny		                INY
.394173		c8		iny		                INY
.394174		a5 2a		lda $034a	                LDA @b DOS_TEMP+2
.394176		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394178		18		clc		                CLC                     ; Advance the file descriptor pointer to the next file descriptor
.394179		a5 20		lda $0340	                LDA @b DOS_FD_PTR
.39417b		69 20 00	adc #$0020	                ADC #SIZE(FILEDESC)
.39417e		85 20		sta $0340	                STA @b DOS_FD_PTR
.394180		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.394182		69 00 00	adc #$0000	                ADC #0
.394185		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.394187		18		clc		                CLC                     ; Advance the sector buffer pointer to the next buffer
.394188		a5 28		lda $0348	                LDA @b DOS_TEMP
.39418a		69 00 02	adc #$0200	                ADC #DOS_SECTOR_SIZE
.39418d		85 28		sta $0348	                STA @b DOS_TEMP
.39418f		a5 2a		lda $034a	                LDA @b DOS_TEMP+2
.394191		69 00 00	adc #$0000	                ADC #0
.394194		85 2a		sta $034a	                STA @b DOS_TEMP+2
.394196		ca		dex		                DEX                     ; Count down the descriptors...
.394197		d0 d2		bne $39416b	                BNE fd_buff_loop        ; If not zero, keep setting the buffer pointers
.394199		28		plp		                PLP
.39419a		2b		pld		                PLD
.39419b		ab		plb		                PLB
.39419c		6b		rtl		                RTL
.39419d						DOS_MOUNT
.39419d		8b		phb		                PHB
.39419e		0b		phd		                PHD
.39419f		08		php		                PHP
.3941a0		48		pha		                PHA             ; begin setdbr macro
.3941a1		08		php		                PHP
.3941a2		e2 20		sep #$20	                SEP #$20        ; set A short
.3941a4		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3941a6		48		pha		                PHA
.3941a7		ab		plb		                PLB
.3941a8		28		plp		                PLP
.3941a9		68		pla		                PLA             ; end setdbr macro
.3941aa		48		pha		                PHA             ; begin setdp macro
.3941ab		08		php		                PHP
.3941ac		c2 20		rep #$20	                REP #$20        ; set A long
.3941ae		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3941b1		5b		tcd		                TCD
.3941b2		28		plp		                PLP
.3941b3		68		pla		                PLA             ; end setdp macro
.3941b4		e2 20		sep #$20	                SEP #$20        ; set A short
.3941b6		a5 01		lda $0321	                LDA BIOS_DEV            ; Get the device to moount
.3941b8		8f 50 a0 38	sta $38a050	try_mount       STA @l DOS_MOUNT_DEV    ; Save the device we're going to try to mount
.3941bc		c9 02		cmp #$02	                CMP #BIOS_DEV_SD        ; Is it the SDC?
.3941be		f0 1f		beq $3941df	                BEQ do_sdc_mount        ; Yes: attempt to mount it
.3941c0		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0       ; Is it HD0?
.3941c2		f0 26		beq $3941ea	                BEQ do_ide_mount        ; Yes: attempt to mount the IDE drive
.3941c4		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC       ; Is it the FDC?
.3941c6		f0 0b		beq $3941d3	                BEQ do_fdc_mount        ; Yes: attempt to mount it
.3941c8		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return a bad device error
.3941ca		85 0e		sta $032e	                STA DOS_STATUS
.3941cc		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV
.3941ce		85 00		sta $0320	                STA BIOS_STATUS
.3941d0		82 7c 01	brl $39434f	                BRL ret_failure
.3941d3		22 ad 65 39	jsl $3965ad	do_fdc_mount    JSL FDC_MOUNT           ; Attempt to mount the floppy disk
.3941d7		b0 03		bcs $3941dc	                BCS fdc_success
.3941d9		82 73 01	brl $39434f	                BRL ret_failure
.3941dc		82 67 01	brl $394346	fdc_success     BRL ret_success
.3941df		22 95 5b 39	jsl $395b95	do_sdc_mount    JSL SDC_INIT            ; Yes: Initialize access to the SDC
.3941e3		b0 10		bcs $3941f5	                BCS get_mbr             ; Continue if success
.3941e5		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.3941e7		82 65 01	brl $39434f	                BRL ret_failure
.3941ea		22 f5 69 39	jsl $3969f5	do_ide_mount    JSL IDE_INIT            ; Yes: Initialize access to the IDE drive
.3941ee		b0 05		bcs $3941f5	                BCS get_mbr             ; Continue if success
.3941f0		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.3941f2		82 5a 01	brl $39434f	                BRL ret_failure
.3941f5						get_mbr
.3941f5		c2 30		rep #$30	                REP #$30        ; set A&X long
.3941f7		64 02		stz $0322	                STZ BIOS_LBA            ; Get the MBR
.3941f9		64 04		stz $0324	                STZ BIOS_LBA+2
.3941fb		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR       ; Into DOS_SECTOR
.3941fe		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394200		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.394203		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394205		22 44 10 00	jsl $001044	                JSL GETBLOCK            ; Try to read the MBR
.394209		b0 07		bcs $394212	                BCS chk_signature       ; If success, check the signature bytes
.39420b		e2 20		sep #$20	                SEP #$20        ; set A short
.39420d		a9 01		lda #$01	                LDA #DOS_ERR_READ       ; Otherwise: report we couldn't read the first sector
.39420f		82 3d 01	brl $39434f	                BRL ret_failure
.394212						chk_signature
.394212		e2 20		sep #$20	                SEP #$20        ; set A short
.394214		ad fe a4	lda $38a4fe	                LDA DOS_SECTOR+MBR_SIGNATURE
.394217		c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.394219		d0 07		bne $394222	                BNE not_mbr             ; No: signal we could find the MBR
.39421b		ad ff a4	lda $38a4ff	                LDA DOS_SECTOR+MBR_SIGNATURE+1
.39421e		c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.394220		f0 05		beq $394227	                BEQ chk_part_type       ; Yes: we have an MBR
.394222		a9 02		lda #$02	not_mbr         LDA #DOS_ERR_NOTMBR     ; Return that we didn't find the MBR
.394224		82 28 01	brl $39434f	                BRL ret_failure
.394227		ad c2 a4	lda $38a4c2	chk_part_type   LDA DOS_SECTOR+PART0_OFF+PART_TYPE_OFF
.39422a		c9 0c		cmp #$0c	                CMP #PART_TYPE_FAT32_LBA
.39422c		f0 05		beq $394233	                BEQ get_LBA             ; Is FAT32 with LBA?
.39422e		a9 03		lda #$03	                LDA #DOS_ERR_NOFAT32    ; No: return No FAT32 found error
.394230		82 1c 01	brl $39434f	                BRL ret_failure
.394233		8d 01 a0	sta $38a001	get_LBA         STA FILE_SYSTEM         ; Save the file system of the partition
.394236		c2 20		rep #$20	                REP #$20        ; set A long
.394238		ad c6 a4	lda $38a4c6	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF
.39423b		8d 04 a0	sta $38a004	                STA FIRSTSECTOR
.39423e		ad c8 a4	lda $38a4c8	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF+2
.394241		8d 06 a0	sta $38a006	                STA FIRSTSECTOR+2
.394244		ad cb a4	lda $38a4cb	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF
.394247		8d 08 a0	sta $38a008	                STA SECTORCOUNT
.39424a		ad cd a4	lda $38a4cd	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF+2
.39424d		8d 0a a0	sta $38a00a	                STA SECTORCOUNT+2
.394250		e2 20		sep #$20	                SEP #$20        ; set A short
.394252		a5 01		lda $0321	                LDA BIOS_DEV            ; Save the device number
.394254		8d 00 a0	sta $38a000	                STA DEVICE
.394257		a9 00		lda #$00	                LDA #0
.394259		8d 02 a0	sta $38a002	                STA PARTITION           ; For the moment, we only support the first partition
.39425c		c2 20		rep #$20	                REP #$20        ; set A long
.39425e		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.394261		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394263		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.394266		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394268		ad 04 a0	lda $38a004	                LDA FIRSTSECTOR
.39426b		85 02		sta $0322	                STA BIOS_LBA
.39426d		ad 06 a0	lda $38a006	                LDA FIRSTSECTOR+2
.394270		85 04		sta $0324	                STA BIOS_LBA+2
.394272		22 44 10 00	jsl $001044	                JSL GETBLOCK            ; Attempt to load the volume ID
.394276		b0 1c		bcs $394294	                BCS get_first_sec       ; Got it? Start parsing it
.394278		e2 20		sep #$20	                SEP #$20        ; set A short
.39427a		a9 05		lda #$05	                LDA #DOS_ERR_VOLID      ; Otherwise: return an error
.39427c		82 d0 00	brl $39434f	                BRL ret_failure
.39427f						chk_bpb_sig
.39427f		e2 20		sep #$20	                SEP #$20        ; set A short
.394281		ad fe a4	lda $38a4fe	                LDA DOS_SECTOR+BPB_SIGNATURE
.394284		c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.394286		d0 07		bne $39428f	                BNE not_bpb             ; No: signal we could find the volume ID
.394288		ad ff a4	lda $38a4ff	                LDA DOS_SECTOR+BPB_SIGNATURE+1
.39428b		c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.39428d		f0 05		beq $394294	                BEQ get_first_sec       ; Yes: we have an volume ID
.39428f		a9 05		lda #$05	not_bpb         LDA #DOS_ERR_VOLID      ; Return that we didn't find the Volume ID (BPB)
.394291		82 bb 00	brl $39434f	                BRL ret_failure
.394294						get_first_sec
.394294		c2 20		rep #$20	                REP #$20        ; set A long
.394296		ad 2c a3	lda $38a32c	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF
.394299		8d 20 a0	sta $38a020	                STA ROOT_DIR_FIRST_CLUSTER
.39429c		ad 2e a3	lda $38a32e	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF+2
.39429f		8d 22 a0	sta $38a022	                STA ROOT_DIR_FIRST_CLUSTER+2
.3942a2		ad 0e a3	lda $38a30e	                LDA DOS_SECTOR+BPB_RSRVCLUS_OFF
.3942a5		8d 0c a0	sta $38a00c	                STA NUM_RSRV_SEC
.3942a8		18		clc		                CLC                     ; fat_begin_lba := FirstSector + Number_of_Reserved_Sectors
.3942a9		ad 04 a0	lda $38a004	                LDA FIRSTSECTOR
.3942ac		6d 0c a0	adc $38a00c	                ADC NUM_RSRV_SEC
.3942af		8d 14 a0	sta $38a014	                STA FAT_BEGIN_LBA
.3942b2		ad 06 a0	lda $38a006	                LDA FIRSTSECTOR+2
.3942b5		69 00 00	adc #$0000	                ADC #0
.3942b8		8d 16 a0	sta $38a016	                STA FAT_BEGIN_LBA+2
.3942bb		e2 20		sep #$20	                SEP #$20        ; set A short
.3942bd		a2 00 00	ldx #$0000	                LDX #0
.3942c0		bf 24 a3 38	lda $38a324,x	cpy_secperfat   LDA @l DOS_SECTOR+BPB_SECPERFAT_OFF,X
.3942c4		9f 10 a0 38	sta $38a010,x	                STA @l SEC_PER_FAT,X
.3942c8		e8		inx		                INX
.3942c9		e0 04 00	cpx #$0004	                CPX #4
.3942cc		d0 f2		bne $3942c0	                BNE cpy_secperfat
.3942ce		ad 10 a0	lda $38a010	                LDA SEC_PER_FAT
.3942d1		0a		asl a		                ASL A
.3942d2		8d 1c a0	sta $38a01c	                STA CLUSTER_BEGIN_LBA
.3942d5		ad 11 a0	lda $38a011	                LDA SEC_PER_FAT+1
.3942d8		2a		rol a		                ROL A
.3942d9		8d 1d a0	sta $38a01d	                STA CLUSTER_BEGIN_LBA+1
.3942dc		ad 12 a0	lda $38a012	                LDA SEC_PER_FAT+2
.3942df		2a		rol a		                ROL A
.3942e0		8d 1e a0	sta $38a01e	                STA CLUSTER_BEGIN_LBA+2
.3942e3		ad 13 a0	lda $38a013	                LDA SEC_PER_FAT+3
.3942e6		2a		rol a		                ROL A
.3942e7		8d 1f a0	sta $38a01f	                STA CLUSTER_BEGIN_LBA+3
.3942ea		18		clc		                CLC
.3942eb		ad 1c a0	lda $38a01c	                LDA CLUSTER_BEGIN_LBA
.3942ee		6d 14 a0	adc $38a014	                ADC FAT_BEGIN_LBA
.3942f1		8d 1c a0	sta $38a01c	                STA CLUSTER_BEGIN_LBA
.3942f4		ad 1d a0	lda $38a01d	                LDA CLUSTER_BEGIN_LBA+1
.3942f7		6d 15 a0	adc $38a015	                ADC FAT_BEGIN_LBA+1
.3942fa		8d 1d a0	sta $38a01d	                STA CLUSTER_BEGIN_LBA+1
.3942fd		ad 1e a0	lda $38a01e	                LDA CLUSTER_BEGIN_LBA+2
.394300		6d 16 a0	adc $38a016	                ADC FAT_BEGIN_LBA+2
.394303		8d 1e a0	sta $38a01e	                STA CLUSTER_BEGIN_LBA+2
.394306		ad 1f a0	lda $38a01f	                LDA CLUSTER_BEGIN_LBA+3
.394309		6d 17 a0	adc $38a017	                ADC FAT_BEGIN_LBA+3
.39430c		8d 1f a0	sta $38a01f	                STA CLUSTER_BEGIN_LBA+3
.39430f		e2 20		sep #$20	                SEP #$20        ; set A short
.394311		ad 0d a3	lda $38a30d	                LDA DOS_SECTOR+BPB_SECPERCLUS_OFF
.394314		8d 03 a0	sta $38a003	                STA SECTORS_PER_CLUSTER
.394317		18		clc		                CLC
.394318		ad 14 a0	lda $38a014	                LDA FAT_BEGIN_LBA                       ; Compute the address of the first sector of
.39431b		6d 10 a0	adc $38a010	                ADC SEC_PER_FAT                         ; the second copy of the FAT
.39431e		8d 18 a0	sta $38a018	                STA FAT2_BEGIN_LBA
.394321		ad 15 a0	lda $38a015	                LDA FAT_BEGIN_LBA+1
.394324		6d 11 a0	adc $38a011	                ADC SEC_PER_FAT+1
.394327		8d 19 a0	sta $38a019	                STA FAT2_BEGIN_LBA+1
.39432a		ad 16 a0	lda $38a016	                LDA FAT_BEGIN_LBA+2
.39432d		6d 12 a0	adc $38a012	                ADC SEC_PER_FAT+2
.394330		8d 1a a0	sta $38a01a	                STA FAT2_BEGIN_LBA+2
.394333		ad 17 a0	lda $38a017	                LDA FAT_BEGIN_LBA+3
.394336		6d 13 a0	adc $38a013	                ADC SEC_PER_FAT+3
.394339		8d 1b a0	sta $38a01b	                STA FAT2_BEGIN_LBA+3
.39433c		a9 00		lda #$00	                LDA #<DOS_SECTOR_SIZE                   ; Default to one sector's worth of bytes
.39433e		8d 0e a0	sta $38a00e	                STA CLUSTER_SIZE
.394341		a9 02		lda #$02	                LDA #>DOS_SECTOR_SIZE
.394343		8d 0f a0	sta $38a00f	                STA CLUSTER_SIZE+1
.394346						ret_success
.394346		e2 20		sep #$20	                SEP #$20        ; set A short
.394348		64 0e		stz $032e	                STZ DOS_STATUS          ; Set status code to 0
.39434a		28		plp		                PLP
.39434b		2b		pld		                PLD
.39434c		ab		plb		                PLB
.39434d		38		sec		                SEC
.39434e		6b		rtl		                RTL
.39434f						ret_failure
.39434f		e2 20		sep #$20	                SEP #$20        ; set A short
.394351		85 0e		sta $032e	                STA DOS_STATUS          ; Save the status code
.394353		28		plp		                PLP
.394354		2b		pld		                PLD
.394355		ab		plb		                PLB
.394356		18		clc		                CLC
.394357		6b		rtl		                RTL
.394358						DOS_TESTBOOT
.394358		8b		phb		                PHB
.394359		0b		phd		                PHD
.39435a		da		phx		                PHX
.39435b		08		php		                PHP
.39435c		48		pha		                PHA             ; begin setdbr macro
.39435d		08		php		                PHP
.39435e		e2 20		sep #$20	                SEP #$20        ; set A short
.394360		a9 00		lda #$00	                LDA #0
.394362		48		pha		                PHA
.394363		ab		plb		                PLB
.394364		28		plp		                PLP
.394365		68		pla		                PLA             ; end setdbr macro
.394366		48		pha		                PHA             ; begin setdp macro
.394367		08		php		                PHP
.394368		c2 20		rep #$20	                REP #$20        ; set A long
.39436a		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39436d		5b		tcd		                TCD
.39436e		28		plp		                PLP
.39436f		68		pla		                PLA             ; end setdp macro
.394370		c2 10		rep #$10	                REP #$10        ; set X long
.394372						chk_dev
.394372		e2 20		sep #$20	                SEP #$20        ; set A short
.394374		a5 01		lda $0321	                LDA @b BIOS_DEV             ; Look at the device #
.394376		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Is it the floppy drive?
.394378		f0 24		beq $39439e	                BEQ chk_vbr_brl             ; Yes: check if BRL is in the right place in the VBR
.39437a		c2 30		rep #$30	                REP #$30        ; set A&X long
.39437c		a9 00 00	lda #$0000	                LDA #0                      ; Point to the MBR
.39437f		85 02		sta $0322	                STA @b BIOS_LBA
.394381		85 04		sta $0324	                STA @b BIOS_LBA+2
.394383		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR           ; And the buffer
.394386		85 06		sta $0326	                STA @b BIOS_BUFF_PTR
.394388		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.39438b		85 08		sta $0328	                STA @b BIOS_BUFF_PTR+2
.39438d		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Try to load the MBR
.394391		b0 03		bcs $394396	                BCS chk_mbr_brl
.394393		82 47 00	brl $3943dd	                BRL done                    ; If failed... just return
.394396						chk_mbr_brl
.394396		e2 20		sep #$20	                SEP #$20        ; set A short
.394398		af 00 a3 38	lda $38a300	                LDA @l DOS_SECTOR           ; Check the first byte of the MBR
.39439c		80 04		bra $3943a2	                BRA chk_brl
.39439e		af 3e a3 38	lda $38a33e	chk_vbr_brl     LDA @l DOS_SECTOR+FDC_BOOT_START
.3943a2		c9 80		cmp #$80	chk_brl         CMP #$80                    ; Is the first byte a BRL/BRA instruction?
.3943a4		f0 06		beq $3943ac	                BEQ chk_magic               ; Yes: check for the magic text
.3943a6		c9 82		cmp #$82	                CMP #$82
.3943a8		f0 02		beq $3943ac	                BEQ chk_magic
.3943aa		80 31		bra $3943dd	                BRA done                    ; No: just return
.3943ac		a2 00 00	ldx #$0000	chk_magic       LDX #0
.3943af		bf 03 a3 38	lda $38a303,x	magic_loop      LDA @l DOS_SECTOR+3,X       ; Check the "vendor" byte
.3943b3		df e2 43 39	cmp $3943e2,x	                CMP DOS_BOOT_MAGIC,X        ; Compare it against our boot magic code
.3943b7		d0 24		bne $3943dd	                BNE done                    ; If it's not equal, just return
.3943b9		e8		inx		                INX                         ; Otherwise, check the next one
.3943ba		e0 08 00	cpx #$0008	                CPX #8
.3943bd		d0 f0		bne $3943af	                BNE magic_loop              ; Until we've checked all 8 bytes
.3943bf		c2 30		rep #$30	                REP #$30        ; set A&X long
.3943c1		a9 00 02	lda #$0200	                LDA #DOS_SECTOR_SIZE
.3943c4		a2 00 a5	ldx #$a500	                LDX #<>(DOS_SECTOR+DOS_SECTOR_SIZE)
.3943c7		a0 00 ab	ldy #$ab00	                LDY #<>(DOS_BOOT_SECTOR+DOS_SECTOR_SIZE)
.3943ca		44 38 38	mvp $38,$38	                MVP #`DOS_SECTOR, #`DOS_BOOT_SECTOR
.3943cd		e2 20		sep #$20	                SEP #$20        ; set A short
.3943cf		a5 01		lda $0321	                LDA @b BIOS_DEV             ; Check the device
.3943d1		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Is it the FDC?
.3943d3		f0 04		beq $3943d9	                BEQ jmp_fdc_start           ; Yes: jump to the start of the VBR code
.3943d5		5c 00 a9 38	jmp $38a900	                JML DOS_BOOT_SECTOR         ; No: it's an MBR, start at the first byte
.3943d9		5c 3e a9 38	jmp $38a93e	jmp_fdc_start   JML DOS_BOOT_SECTOR+FDC_BOOT_START
.3943dd		28		plp		done            PLP
.3943de		2b		pld		                PLD
.3943df		ab		plb		                PLB
.3943e0		fa		plx		                PLX
.3943e1		6b		rtl		                RTL
>3943e2		43 32 35 36 44 4f 53 20		DOS_BOOT_MAGIC  .text "C256DOS "
.3943ea						DOS_CALC_LBA
.3943ea		8b		phb		                PHB
.3943eb		0b		phd		                PHD
.3943ec		08		php		                PHP
.3943ed		48		pha		                PHA             ; begin setdbr macro
.3943ee		08		php		                PHP
.3943ef		e2 20		sep #$20	                SEP #$20        ; set A short
.3943f1		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3943f3		48		pha		                PHA
.3943f4		ab		plb		                PLB
.3943f5		28		plp		                PLP
.3943f6		68		pla		                PLA             ; end setdbr macro
.3943f7		48		pha		                PHA             ; begin setdp macro
.3943f8		08		php		                PHP
.3943f9		c2 20		rep #$20	                REP #$20        ; set A long
.3943fb		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3943fe		5b		tcd		                TCD
.3943ff		28		plp		                PLP
.394400		68		pla		                PLA             ; end setdp macro
.394401		c2 20		rep #$20	                REP #$20        ; set A long
.394403		38		sec		                SEC
.394404		a5 10		lda $0330	                LDA DOS_CLUS_ID                     ; cluster - 2
.394406		e9 02 00	sbc #$0002	                SBC #2
.394409		85 28		sta $0348	                STA DOS_TEMP
.39440b		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.39440d		e9 00 00	sbc #$0000	                SBC #0
.394410		85 2a		sta $034a	                STA DOS_TEMP+2
.394412		e2 10		sep #$10	                SEP #$10        ; set X short
.394414		ae 03 a0	ldx $38a003	                LDX SECTORS_PER_CLUSTER
.394417		e0 01		cpx #$01	mult_loop       CPX #1
.394419		f0 07		beq $394422	                BEQ add_offset
.39441b		06 28		asl $0348	                ASL DOS_TEMP
.39441d		26 28		rol $0348	                ROL DOS_TEMP
.39441f		ca		dex		                DEX
.394420		80 f5		bra $394417	                BRA mult_loop
.394422		18		clc		add_offset      CLC
.394423		a5 28		lda $0348	                LDA DOS_TEMP                        ; cluster_being_lba + (cluster - 2) * SECTORS_PER_CLUSTER
.394425		6d 1c a0	adc $38a01c	                ADC CLUSTER_BEGIN_LBA
.394428		85 02		sta $0322	                STA BIOS_LBA
.39442a		a5 2a		lda $034a	                LDA DOS_TEMP+2
.39442c		6d 1e a0	adc $38a01e	                ADC CLUSTER_BEGIN_LBA+2
.39442f		85 04		sta $0324	                STA BIOS_LBA+2
.394431		28		plp		                PLP
.394432		2b		pld		                PLD
.394433		ab		plb		                PLB
.394434		6b		rtl		                RTL
.394435						DOS_GETCLUSTER
.394435		8b		phb		                PHB
.394436		0b		phd		                PHD
.394437		08		php		                PHP
.394438		48		pha		                PHA             ; begin setdbr macro
.394439		08		php		                PHP
.39443a		e2 20		sep #$20	                SEP #$20        ; set A short
.39443c		a9 00		lda #$00	                LDA #0
.39443e		48		pha		                PHA
.39443f		ab		plb		                PLB
.394440		28		plp		                PLP
.394441		68		pla		                PLA             ; end setdbr macro
.394442		48		pha		                PHA             ; begin setdp macro
.394443		08		php		                PHP
.394444		c2 20		rep #$20	                REP #$20        ; set A long
.394446		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394449		5b		tcd		                TCD
.39444a		28		plp		                PLP
.39444b		68		pla		                PLA             ; end setdp macro
.39444c		c2 20		rep #$20	                REP #$20        ; set A long
.39444e		a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.394450		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394452		a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.394454		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394456		22 ea 43 39	jsl $3943ea	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.39445a		22 44 10 00	jsl $001044	                JSL GETBLOCK                        ; Get the first block of the cluster
.39445e		90 09		bcc $394469	                BCC ret_failure
.394460						ret_success
.394460		e2 20		sep #$20	                SEP #$20        ; set A short
.394462		64 0e		stz $032e	                STZ DOS_STATUS
.394464		28		plp		                PLP
.394465		2b		pld		                PLD
.394466		ab		plb		                PLB
.394467		38		sec		                SEC
.394468		6b		rtl		                RTL
.394469						ret_failure
.394469		e2 20		sep #$20	                SEP #$20        ; set A short
.39446b		85 0e		sta $032e	                STA DOS_STATUS
.39446d		28		plp		                PLP
.39446e		2b		pld		                PLD
.39446f		ab		plb		                PLB
.394470		18		clc		                CLC
.394471		6b		rtl		                RTL
.394472						DOS_PUTCLUSTER
.394472		8b		phb		                PHB
.394473		0b		phd		                PHD
.394474		08		php		                PHP
.394475		48		pha		                PHA             ; begin setdbr macro
.394476		08		php		                PHP
.394477		e2 20		sep #$20	                SEP #$20        ; set A short
.394479		a9 00		lda #$00	                LDA #0
.39447b		48		pha		                PHA
.39447c		ab		plb		                PLB
.39447d		28		plp		                PLP
.39447e		68		pla		                PLA             ; end setdbr macro
.39447f		48		pha		                PHA             ; begin setdp macro
.394480		08		php		                PHP
.394481		c2 20		rep #$20	                REP #$20        ; set A long
.394483		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394486		5b		tcd		                TCD
.394487		28		plp		                PLP
.394488		68		pla		                PLA             ; end setdp macro
.394489		c2 20		rep #$20	                REP #$20        ; set A long
.39448b		a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.39448d		85 06		sta $0326	                STA BIOS_BUFF_PTR
.39448f		a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.394491		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394493		22 ea 43 39	jsl $3943ea	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.394497		22 24 10 00	jsl $001024	                JSL PUTBLOCK                        ; PUT the first block of the cluster
.39449b		90 09		bcc $3944a6	                BCC ret_failure
.39449d						ret_success
.39449d		e2 20		sep #$20	                SEP #$20        ; set A short
.39449f		64 0e		stz $032e	                STZ DOS_STATUS
.3944a1		28		plp		                PLP
.3944a2		2b		pld		                PLD
.3944a3		ab		plb		                PLB
.3944a4		38		sec		                SEC
.3944a5		6b		rtl		                RTL
.3944a6						ret_failure
.3944a6		e2 20		sep #$20	                SEP #$20        ; set A short
.3944a8		85 0e		sta $032e	                STA DOS_STATUS
.3944aa		28		plp		                PLP
.3944ab		2b		pld		                PLD
.3944ac		ab		plb		                PLB
.3944ad		18		clc		                CLC
.3944ae		6b		rtl		                RTL
>3944af		40 46 00			DOS_FDC_NAME    .null "@F"
.3944b2						DOS_FDC_DESC
>3944b2		af 44 39 00			DEVNAME         .dword DOS_FDC_NAME            ; A pointer to the ASCIIZ name of the device
>3944b6		00				DEVNUMBER       .byte BIOS_DEV_FDC           ; The BIOS_DEV number for the device
>3944b7		00 00 00 00			NEXT            .dword 0            ; A pointer to the next device descriptor
>3944bb		40 53 00			DOS_SDC_NAME    .null "@S"
.3944be						DOS_SDC_DESC
>3944be		bb 44 39 00			DEVNAME         .dword DOS_SDC_NAME            ; A pointer to the ASCIIZ name of the device
>3944c2		02				DEVNUMBER       .byte BIOS_DEV_SD           ; The BIOS_DEV number for the device
>3944c3		b2 44 39 00			NEXT            .dword DOS_FDC_DESC            ; A pointer to the next device descriptor
>3944c7		40 48 00			DOS_HDC_NAME    .null "@H"
.3944ca						DOS_HD_DESC
>3944ca		c7 44 39 00			DEVNAME         .dword DOS_HDC_NAME            ; A pointer to the ASCIIZ name of the device
>3944ce		06				DEVNUMBER       .byte BIOS_DEV_HD0           ; The BIOS_DEV number for the device
>3944cf		be 44 39 00			NEXT            .dword DOS_SDC_DESC            ; A pointer to the next device descriptor
.3944d3						DOS_PARSE_DEV
.3944d3		8b		phb		                PHB
.3944d4		0b		phd		                PHD
.3944d5		08		php		                PHP
.3944d6		48		pha		                PHA             ; begin setdbr macro
.3944d7		08		php		                PHP
.3944d8		e2 20		sep #$20	                SEP #$20        ; set A short
.3944da		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3944dc		48		pha		                PHA
.3944dd		ab		plb		                PLB
.3944de		28		plp		                PLP
.3944df		68		pla		                PLA             ; end setdbr macro
.3944e0		48		pha		                PHA             ; begin setdp macro
.3944e1		08		php		                PHP
.3944e2		c2 20		rep #$20	                REP #$20        ; set A long
.3944e4		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3944e7		5b		tcd		                TCD
.3944e8		28		plp		                PLP
.3944e9		68		pla		                PLA             ; end setdp macro
.3944ea		c2 30		rep #$30	                REP #$30        ; set A&X long
.3944ec		af 4a a0 38	lda $38a04a	                LDA @l DOS_DEV_NAMES        ; Point to the first device name to check
.3944f0		85 28		sta $0348	                STA DOS_TEMP
.3944f2		af 4c a0 38	lda $38a04c	                LDA @l DOS_DEV_NAMES+2
.3944f6		85 2a		sta $034a	                STA DOS_TEMP+2
.3944f8		a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF        ; Make DOS_STR2_PTR point to the path to check
.3944fb		85 48		sta $0368	                STA DOS_STR2_PTR
.3944fd		a9 00 00	lda #$0000	                LDA #`DOS_PATH_BUFF
.394500		85 4a		sta $036a	                STA DOS_STR2_PTR+2
.394502		a0 00 00	ldy #$0000	dev_loop        LDY #DEVICE_DESC.DEVNAME    ; Get the name of the current device into DOS_STR1_PTR
.394505		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.394507		85 44		sta $0364	                STA DOS_STR1_PTR
.394509		c8		iny		                INY
.39450a		c8		iny		                INY
.39450b		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.39450d		85 46		sta $0366	                STA DOS_STR1_PTR+2
.39450f		e2 20		sep #$20	                SEP #$20        ; set A short
.394511		a0 00 00	ldy #$0000	                LDY #0
.394514		b7 44		lda [$0364],y	cmp_loop        LDA [DOS_STR1_PTR],Y        ; Get the Yth character of the device name
.394516		f0 24		beq $39453c	                BEQ found                   ; If it's NULL, we found a match
.394518		d7 48		cmp [$0368],y	                CMP [DOS_STR2_PTR],Y        ; Compare it to the Yth character of the path
.39451a		d0 03		bne $39451f	                BNE next_device             ; If no match, try to load the next device
.39451c		c8		iny		                INY                         ; Go to the next character
.39451d		80 f5		bra $394514	                BRA cmp_loop
.39451f						next_device
.39451f		c2 20		rep #$20	                REP #$20        ; set A long
.394521		a0 05 00	ldy #$0005	                LDY #DEVICE_DESC.NEXT       ; DOS_TEMP := DOS_TEMP->NEXT
.394524		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.394526		48		pha		                PHA
.394527		c8		iny		                INY
.394528		c8		iny		                INY
.394529		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.39452b		85 2a		sta $034a	                STA DOS_TEMP+2
.39452d		68		pla		                PLA
.39452e		85 28		sta $0348	                STA DOS_TEMP
.394530		a5 28		lda $0348	                LDA DOS_TEMP                ; Is DOS_TEMP = NULL?
.394532		d0 ce		bne $394502	                BNE dev_loop                ; No: check this device
.394534		a5 2a		lda $034a	                LDA DOS_TEMP+2
.394536		d0 ca		bne $394502	                BNE dev_loop
.394538		28		plp		done            PLP                         ; Otherwise, return having not found a match
.394539		2b		pld		                PLD
.39453a		ab		plb		                PLB
.39453b		6b		rtl		                RTL
.39453c		22 4d 45 39	jsl $39454d	found           JSL DOS_ADJUSTPATH          ; Remove the device name from the buffer
.394540		e2 20		sep #$20	                SEP #$20        ; set A short
.394542		a0 04 00	ldy #$0004	                LDY #DEVICE_DESC.DEVNUMBER  ; Set the BIOS device number from the found device
.394545		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.394547		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.39454b		80 eb		bra $394538	                BRA done
.39454d						DOS_ADJUSTPATH
.39454d		da		phx		                PHX
.39454e		5a		phy		                PHY
.39454f		8b		phb		                PHB
.394550		0b		phd		                PHD
.394551		08		php		                PHP
.394552		48		pha		                PHA             ; begin setdbr macro
.394553		08		php		                PHP
.394554		e2 20		sep #$20	                SEP #$20        ; set A short
.394556		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394558		48		pha		                PHA
.394559		ab		plb		                PLB
.39455a		28		plp		                PLP
.39455b		68		pla		                PLA             ; end setdbr macro
.39455c		48		pha		                PHA             ; begin setdp macro
.39455d		08		php		                PHP
.39455e		c2 20		rep #$20	                REP #$20        ; set A long
.394560		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394563		5b		tcd		                TCD
.394564		28		plp		                PLP
.394565		68		pla		                PLA             ; end setdp macro
.394566		c2 30		rep #$30	                REP #$30        ; set A&X long
.394568		84 4b		sty $036b	                STY DOS_SCRATCH                 ; Save the index to later compute the size
.39456a		98		tya		                TYA                             ; Compute the address of the first source byte
.39456b		18		clc		                CLC
.39456c		69 00 04	adc #$0400	                ADC #<>DOS_PATH_BUFF
.39456f		aa		tax		                TAX
.394570		a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF            ; Compute the destination address for the source byte
.394573		a8		tay		                TAY
.394574		38		sec		                SEC                             ; Compute the number of bytes to copy
.394575		a9 00 01	lda #$0100	                LDA #256
.394578		e5 4b		sbc $036b	                SBC DOS_SCRATCH
.39457a		54 00 00	mvn $00,$00	                MVN #`DOS_PATH_BUFF, #`DOS_PATH_BUFF
.39457d		28		plp		                PLP
.39457e		2b		pld		                PLD
.39457f		ab		plb		                PLB
.394580		7a		ply		                PLY
.394581		fa		plx		                PLX
.394582		6b		rtl		                RTL
.394583						DOS_PARSE_PATH
.394583		8b		phb		                PHB
.394584		0b		phd		                PHD
.394585		08		php		                PHP
.394586		48		pha		                PHA             ; begin setdbr macro
.394587		08		php		                PHP
.394588		e2 20		sep #$20	                SEP #$20        ; set A short
.39458a		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39458c		48		pha		                PHA
.39458d		ab		plb		                PLB
.39458e		28		plp		                PLP
.39458f		68		pla		                PLA             ; end setdbr macro
.394590		48		pha		                PHA             ; begin setdp macro
.394591		08		php		                PHP
.394592		c2 20		rep #$20	                REP #$20        ; set A long
.394594		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394597		5b		tcd		                TCD
.394598		28		plp		                PLP
.394599		68		pla		                PLA             ; end setdp macro
.39459a		c2 10		rep #$10	                REP #$10        ; set X long
.39459c		e2 20		sep #$20	                SEP #$20        ; set A short
.39459e		a2 00 00	ldx #$0000	                LDX #0
.3945a1		b5 e0		lda $0400,x	upcase_loop     LDA DOS_PATH_BUFF,X     ; Get the character
.3945a3		f0 1b		beq $3945c0	                BEQ parse_dev           ; If it's NULL, the path is upper case, attempt to parse the device
.3945a5		c9 20		cmp #$20	                CMP #' '                ; Is a control character?
.3945a7		b0 05		bcs $3945ae	                BGE check_case          ; No: check the case
.3945a9		a9 07		lda #$07	                LDA #DOS_ERR_BADPATH    ; Yes: return a bad path error
.3945ab		82 64 00	brl $394612	                BRL ret_failure
.3945ae		c9 61		cmp #$61	check_case      CMP #'a'                ; Is the character lower case?
.3945b0		90 08		bcc $3945ba	                BLT next_char
.3945b2		c9 7b		cmp #$7b	                CMP #'z'+1
.3945b4		b0 04		bcs $3945ba	                BGE next_char
.3945b6		29 5f		and #$5f	                AND #%01011111          ; Yes: Convert to uppercase
.3945b8		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.3945ba		e8		inx		next_char       INX                     ; Move to the next character
.3945bb		e0 00 01	cpx #$0100	                CPX #$100
.3945be		d0 e1		bne $3945a1	                BNE upcase_loop
.3945c0		22 d3 44 39	jsl $3944d3	parse_dev       JSL DOS_PARSE_DEV       ; Parse and extract a device specifier ":xxx:"
.3945c4		a5 e0		lda $0400	                LDA DOS_PATH_BUFF       ; Check the first character of the path
.3945c6		c9 3a		cmp #$3a	                CMP #':'
.3945c8		d0 07		bne $3945d1	                BNE clr_name            ; If not colon, treat it as a file name
.3945ca		a0 01 00	ldy #$0001	                LDY #1                  ; Otherwise...
.3945cd		22 4d 45 39	jsl $39454d	                JSL DOS_ADJUSTPATH      ; For now, just remove the leading ":"
.3945d1		a0 00 00	ldy #$0000	clr_name        LDY #0                  ; Set the short name to blanks
.3945d4		a9 20		lda #$20	                LDA #' '
.3945d6		99 3a a0	sta $38a03a,y	clr_loop        STA DOS_SHORT_NAME,Y
.3945d9		c8		iny		                INY
.3945da		c0 0b 00	cpy #$000b	                CPY #11
.3945dd		d0 f7		bne $3945d6	                BNE clr_loop
.3945df		a2 00 00	ldx #$0000	                LDX #0
.3945e2		a0 00 00	ldy #$0000	                LDY #0
.3945e5		b5 e0		lda $0400,x	cpy_name_loop   LDA DOS_PATH_BUFF,X     ; Get the character of the name
.3945e7		f0 20		beq $394609	                BEQ ret_success         ; If NULL: we've finished parsing the path
.3945e9		c9 2e		cmp #$2e	                CMP #'.'                ; If it's a dot, we've finished the name part
.3945eb		f0 0a		beq $3945f7	                BEQ cpy_ext             ; And move to the extension
.3945ed		99 3a a0	sta $38a03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, store it to the name portion
.3945f0		e8		inx		                INX
.3945f1		c8		iny		                INY                     ; Move to the next character
.3945f2		c0 08 00	cpy #$0008	                CPY #8                  ; Have we processed 8?
.3945f5		d0 ee		bne $3945e5	                BNE cpy_name_loop       ; No: process this one
.3945f7		e8		inx		cpy_ext         INX                     ; Skip the dot
.3945f8		a0 08 00	ldy #$0008	                LDY #8
.3945fb		b5 e0		lda $0400,x	cpy_ext_loop    LDA DOS_PATH_BUFF,X     ; Get the character of the extension
.3945fd		f0 0a		beq $394609	                BEQ ret_success         ; If it's NULL, we've finished
.3945ff		99 3a a0	sta $38a03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, copy it to the short name
.394602		e8		inx		                INX
.394603		c8		iny		                INY                     ; Move to the next character
.394604		c0 0b 00	cpy #$000b	                CPY #11                 ; Have we processed the three ext characters?
.394607		d0 f2		bne $3945fb	                BNE cpy_ext_loop        ; No: process this one
.394609						ret_success
.394609		e2 20		sep #$20	                SEP #$20        ; set A short
.39460b		64 0e		stz $032e	                STZ DOS_STATUS
.39460d		28		plp		                PLP
.39460e		2b		pld		                PLD
.39460f		ab		plb		                PLB
.394610		38		sec		                SEC
.394611		6b		rtl		                RTL
.394612						ret_failure
.394612		e2 20		sep #$20	                SEP #$20        ; set A short
.394614		85 0e		sta $032e	                STA DOS_STATUS
.394616		28		plp		                PLP
.394617		2b		pld		                PLD
.394618		ab		plb		                PLB
.394619		18		clc		                CLC
.39461a		6b		rtl		                RTL
.39461b						DOS_FINDFILE
.39461b		8b		phb		                PHB
.39461c		0b		phd		                PHD
.39461d		08		php		                PHP
.39461e		48		pha		                PHA             ; begin setdbr macro
.39461f		08		php		                PHP
.394620		e2 20		sep #$20	                SEP #$20        ; set A short
.394622		a9 00		lda #$00	                LDA #0
.394624		48		pha		                PHA
.394625		ab		plb		                PLB
.394626		28		plp		                PLP
.394627		68		pla		                PLA             ; end setdbr macro
.394628		48		pha		                PHA             ; begin setdp macro
.394629		08		php		                PHP
.39462a		c2 20		rep #$20	                REP #$20        ; set A long
.39462c		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39462f		5b		tcd		                TCD
.394630		28		plp		                PLP
.394631		68		pla		                PLA             ; end setdp macro
.394632		c2 30		rep #$30	                REP #$30        ; set A&X long
.394634		22 83 45 39	jsl $394583	                JSL DOS_PARSE_PATH              ; Break out the path into its components
.394638		b0 05		bcs $39463f	                BCS mount                       ; If success: try to open the directory
.39463a		28		plp		pass_failure    PLP                             ; If failure, just pass the failure back up
.39463b		2b		pld		                PLD
.39463c		ab		plb		                PLB
.39463d		18		clc		                CLC
.39463e		6b		rtl		                RTL
.39463f		22 9d 41 39	jsl $39419d	mount           JSL DOS_MOUNT                   ; Try to mount the drive
.394643		b0 07		bcs $39464c	                BCS get_directory
.394645		e2 20		sep #$20	                SEP #$20        ; set A short
.394647		a9 17		lda #$17	                LDA #DOS_ERR_NOMEDIA            ; If failure: Report that we couldn't access the media
.394649		82 56 00	brl $3946a2	                BRL ret_failure
.39464c						get_directory
.39464c		c2 20		rep #$20	                REP #$20        ; set A long
.39464e		22 52 3e 39	jsl $393e52	                JSL DOS_DIROPEN                 ; Get the directory
.394652		b0 07		bcs $39465b	                BCS scan_entries                ; If success: start scanning the directory entries
.394654		e2 20		sep #$20	                SEP #$20        ; set A short
.394656		a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Otherwise: return a no directory error
.394658		82 47 00	brl $3946a2	                BRL ret_failure
.39465b		22 d1 3e 39	jsl $393ed1	scan_entries    JSL DOS_DIRFIRST                ; Move the DIR pointer to the beginning of the sector
.39465f						scan_loop
.39465f		e2 20		sep #$20	                SEP #$20        ; set A short
.394661		a0 00 00	ldy #$0000	                LDY #0
.394664		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y             ; Check the directory entry
.394666		d0 05		bne $39466d	                BNE chk_unused                  ; If there's an entry, check to see if it's unused
.394668		a9 09		lda #$09	                LDA #DOS_ERR_NOTFOUND           ; If end-of-directory, we couldn't find a match
.39466a		82 35 00	brl $3946a2	                BRL ret_failure
.39466d		c9 e5		cmp #$e5	chk_unused      CMP #DOS_DIR_ENT_UNUSED         ; If it's unused...
.39466f		f0 26		beq $394697	                BEQ next_entry                  ; Go to the next entry
.394671		a0 0b 00	ldy #$000b	                LDY #DIRENTRY.ATTRIBUTE         ; Check the entry's attributes
.394674		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.394676		89 08		bit #$08	                BIT #DOS_ATTR_VOLUME            ; Is it a volume name?
.394678		d0 1d		bne $394697	                BNE next_entry                  ; Yes: skip it!
.39467a		29 0f		and #$0f	                AND #DOS_ATTR_LONGNAME
.39467c		c9 0f		cmp #$0f	                CMP #DOS_ATTR_LONGNAME          ; Is it a long name field?
.39467e		f0 17		beq $394697	                BEQ next_entry                  ; Yes: skip it!
.394680		a2 00 00	ldx #$0000	                LDX #0
.394683		a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME
.394686		b7 18		lda [$0338],y	scan_cmp_loop   LDA [DOS_DIR_PTR],Y             ; Get the X'th character of the entry
.394688		df 3a a0 38	cmp $38a03a,x	                CMP DOS_SHORT_NAME,X            ; And compare to the X'th character of the name we want
.39468c		d0 09		bne $394697	                BNE next_entry                  ; If not equal: try the next entry
.39468e		c8		iny		                INY                             ; Advance to the next character
.39468f		e8		inx		                INX
.394690		e0 0b 00	cpx #$000b	                CPX #11                         ; Did we reach the end of the names?
.394693		f0 16		beq $3946ab	                BEQ match                       ; Yes: we have a match!
.394695		80 ef		bra $394686	                BRA scan_cmp_loop               ; No: keep checking
.394697		22 ec 3e 39	jsl $393eec	next_entry      JSL DOS_DIRNEXT                 ; Try to get the next directory entry
.39469b		90 05		bcc $3946a2	                BCC ret_failure                 ; If we're at the end of the directory, return a failure.
.39469d		82 bf ff	brl $39465f	                BRL scan_loop                   ; If found: keep scanning
.3946a0		a9 08		lda #$08	bad_dir         LDA #DOS_ERR_NODIR              ; Otherwise: fail with a NODIR error (maybe something else is better)
.3946a2						ret_failure
.3946a2		e2 20		sep #$20	                SEP #$20        ; set A short
.3946a4		85 0e		sta $032e	                STA DOS_STATUS
.3946a6		28		plp		                PLP
.3946a7		2b		pld		                PLD
.3946a8		ab		plb		                PLB
.3946a9		18		clc		                CLC
.3946aa		6b		rtl		                RTL
.3946ab						match
.3946ab		c2 20		rep #$20	                REP #$20        ; set A long
.3946ad		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L         ; Copy the cluster number from the directory entry
.3946b0		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3946b2		85 10		sta $0330	                STA DOS_CLUS_ID                 ; To DOS_CLUS_ID
.3946b4		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.3946b7		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3946b9		85 12		sta $0332	                STA DOS_CLUS_ID+2
.3946bb						ret_success
.3946bb		e2 20		sep #$20	                SEP #$20        ; set A short
.3946bd		64 0e		stz $032e	                STZ DOS_STATUS
.3946bf		28		plp		                PLP
.3946c0		2b		pld		                PLD
.3946c1		ab		plb		                PLB
.3946c2		38		sec		                SEC
.3946c3		6b		rtl		                RTL
.3946c4						DOS_READFILE
.3946c4		8b		phb		                PHB
.3946c5		0b		phd		                PHD
.3946c6		08		php		                PHP
.3946c7		48		pha		                PHA             ; begin setdbr macro
.3946c8		08		php		                PHP
.3946c9		e2 20		sep #$20	                SEP #$20        ; set A short
.3946cb		a9 00		lda #$00	                LDA #0
.3946cd		48		pha		                PHA
.3946ce		ab		plb		                PLB
.3946cf		28		plp		                PLP
.3946d0		68		pla		                PLA             ; end setdbr macro
.3946d1		48		pha		                PHA             ; begin setdp macro
.3946d2		08		php		                PHP
.3946d3		c2 20		rep #$20	                REP #$20        ; set A long
.3946d5		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3946d8		5b		tcd		                TCD
.3946d9		28		plp		                PLP
.3946da		68		pla		                PLA             ; end setdp macro
.3946db		c2 30		rep #$30	                REP #$30        ; set A&X long
.3946dd		a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.3946df		48		pha		                PHA
.3946e0		a5 1c		lda $033c	                LDA DOS_BUFF_PTR
.3946e2		48		pha		                PHA
.3946e3		22 1b 46 39	jsl $39461b	                JSL DOS_FINDFILE                    ; Attempt to find the file's directory entry
.3946e7		68		pla		                PLA
.3946e8		85 1c		sta $033c	                STA DOS_BUFF_PTR
.3946ea		68		pla		                PLA
.3946eb		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3946ed		90 0f		bcc $3946fe	                BCC pass_failure                    ; If found: try to load the cluster
.3946ef		22 35 44 39	jsl $394435	load_cluster    JSL DOS_GETCLUSTER                  ; Get the first block of the cluster
.3946f3		90 09		bcc $3946fe	                BCC pass_failure                    ; If there's an error... pass it up the chain
.3946f5						ret_success
.3946f5		e2 20		sep #$20	                SEP #$20        ; set A short
.3946f7		64 0e		stz $032e	                STZ DOS_STATUS
.3946f9		28		plp		                PLP
.3946fa		2b		pld		                PLD
.3946fb		ab		plb		                PLB
.3946fc		38		sec		                SEC
.3946fd		6b		rtl		                RTL
.3946fe		28		plp		pass_failure    PLP                                 ; Otherwise: pass any error up the chain
.3946ff		2b		pld		                PLD
.394700		ab		plb		                PLB
.394701		18		clc		                CLC
.394702		6b		rtl		                RTL
.394703						ENTRYFORCLUS12
.394703		8b		phb		                PHB
.394704		0b		phd		                PHD
.394705		08		php		                PHP
.394706		48		pha		                PHA             ; begin setdbr macro
.394707		08		php		                PHP
.394708		e2 20		sep #$20	                SEP #$20        ; set A short
.39470a		a9 00		lda #$00	                LDA #0
.39470c		48		pha		                PHA
.39470d		ab		plb		                PLB
.39470e		28		plp		                PLP
.39470f		68		pla		                PLA             ; end setdbr macro
.394710		48		pha		                PHA             ; begin setdp macro
.394711		08		php		                PHP
.394712		c2 20		rep #$20	                REP #$20        ; set A long
.394714		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394717		5b		tcd		                TCD
.394718		28		plp		                PLP
.394719		68		pla		                PLA             ; end setdp macro
.39471a		c2 30		rep #$30	                REP #$30        ; set A&X long
.39471c		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; DOS_TEMP := DOS_CLUS_ID * 3
.39471e		0a		asl a		                ASL A
.39471f		85 28		sta $0348	                STA DOS_TEMP
.394721		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394723		2a		rol a		                ROL A
.394724		85 2a		sta $034a	                STA DOS_TEMP+2
.394726		18		clc		                CLC
.394727		a5 10		lda $0330	                LDA DOS_CLUS_ID
.394729		65 28		adc $0348	                ADC DOS_TEMP
.39472b		85 28		sta $0348	                STA DOS_TEMP
.39472d		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.39472f		65 2a		adc $034a	                ADC DOS_TEMP+2
.394731		85 2a		sta $034a	                STA DOS_TEMP+2
.394733		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := (DOS_CLUS_ID * 3) / 2
.394735		66 28		ror $0348	                ROR DOS_TEMP                    ; DOS_TEMP is now the offset to the cluster's entry in the FAT
.394737		a5 28		lda $0348	                LDA DOS_TEMP                    ; X should be the offset within the FAT buffer
.394739		29 ff 03	and #$03ff	                AND #$003FF
.39473c		aa		tax		                TAX
.39473d		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.39473f		66 28		ror $0348	                ROR DOS_TEMP
.394741		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394743		66 28		ror $0348	                ROR DOS_TEMP
.394745		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394747		66 28		ror $0348	                ROR DOS_TEMP
.394749		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.39474b		66 28		ror $0348	                ROR DOS_TEMP
.39474d		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.39474f		66 28		ror $0348	                ROR DOS_TEMP
.394751		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394753		66 28		ror $0348	                ROR DOS_TEMP
.394755		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394757		66 28		ror $0348	                ROR DOS_TEMP
.394759		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.39475b		66 28		ror $0348	                ROR DOS_TEMP
.39475d		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.39475f		66 28		ror $0348	                ROR DOS_TEMP
.394761		18		clc		                CLC                             ; DOS_FAT_LBA should be the LBA of the first FAT sector we need
.394762		af 14 a0 38	lda $38a014	                LDA FAT_BEGIN_LBA
.394766		65 28		adc $0348	                ADC DOS_TEMP
.394768		85 24		sta $0344	                STA DOS_FAT_LBA
.39476a		af 16 a0 38	lda $38a016	                LDA FAT_BEGIN_LBA+2
.39476e		65 2a		adc $034a	                ADC DOS_TEMP+2
.394770		85 26		sta $0346	                STA DOS_FAT_LBA+2
.394772		28		plp		                PLP
.394773		2b		pld		                PLD
.394774		ab		plb		                PLB
.394775		6b		rtl		                RTL
.394776						FATFORCLUSTER12
.394776		8b		phb		                PHB
.394777		0b		phd		                PHD
.394778		08		php		                PHP
.394779		48		pha		                PHA             ; begin setdbr macro
.39477a		08		php		                PHP
.39477b		e2 20		sep #$20	                SEP #$20        ; set A short
.39477d		a9 00		lda #$00	                LDA #0
.39477f		48		pha		                PHA
.394780		ab		plb		                PLB
.394781		28		plp		                PLP
.394782		68		pla		                PLA             ; end setdbr macro
.394783		48		pha		                PHA             ; begin setdp macro
.394784		08		php		                PHP
.394785		c2 20		rep #$20	                REP #$20        ; set A long
.394787		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39478a		5b		tcd		                TCD
.39478b		28		plp		                PLP
.39478c		68		pla		                PLA             ; end setdp macro
.39478d		c2 30		rep #$30	                REP #$30        ; set A&X long
.39478f		a2 00 00	ldx #$0000	                LDX #0
.394792		a9 5a 5a	lda #$5a5a	                LDA #$5A5A
.394795		8f 00 a5 38	sta $38a500	clr_loop        STA DOS_FAT_SECTORS
.394799		e8		inx		                INX
.39479a		e8		inx		                INX
.39479b		e0 00 04	cpx #$0400	                CPX #1024
.39479e		d0 f5		bne $394795	                BNE clr_loop
.3947a0		22 03 47 39	jsl $394703	                JSL ENTRYFORCLUS12              ; Calculate the LBA
.3947a4		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Point to the desired sector in the FAT
.3947a6		85 02		sta $0322	                STA BIOS_LBA
.3947a8		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.3947aa		85 04		sta $0324	                STA BIOS_LBA+2
.3947ac		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first 512 bytes of the FAT buffer
.3947af		85 06		sta $0326	                STA BIOS_BUFF_PTR
.3947b1		a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.3947b4		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3947b6		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.3947ba		90 17		bcc $3947d3	                BCC error
.3947bc		e6 02		inc $0322	                INC BIOS_LBA                    ; Move to the next sector
.3947be		a9 00 a7	lda #$a700	                LDA #<>DOS_FAT_SECTORS+512      ; And point to the second 512 bytes of teh FAT buffer
.3947c1		85 06		sta $0326	                STA BIOS_BUFF_PTR
.3947c3		a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.3947c6		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3947c8		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.3947cc		90 05		bcc $3947d3	                BCC error
.3947ce		28		plp		                PLP
.3947cf		2b		pld		                PLD
.3947d0		ab		plb		                PLB
.3947d1		38		sec		                SEC
.3947d2		6b		rtl		                RTL
.3947d3						error
.3947d3		e2 20		sep #$20	                SEP #$20        ; set A short
.3947d5		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.3947d7		85 0e		sta $032e	                STA DOS_STATUS
.3947d9		28		plp		                PLP
.3947da		2b		pld		                PLD
.3947db		ab		plb		                PLB
.3947dc		18		clc		                CLC
.3947dd		6b		rtl		                RTL
.3947de						FATFORCLUSTER32
.3947de		8b		phb		                PHB
.3947df		0b		phd		                PHD
.3947e0		48		pha		                PHA             ; begin setdbr macro
.3947e1		08		php		                PHP
.3947e2		e2 20		sep #$20	                SEP #$20        ; set A short
.3947e4		a9 00		lda #$00	                LDA #0
.3947e6		48		pha		                PHA
.3947e7		ab		plb		                PLB
.3947e8		28		plp		                PLP
.3947e9		68		pla		                PLA             ; end setdbr macro
.3947ea		48		pha		                PHA             ; begin setdp macro
.3947eb		08		php		                PHP
.3947ec		c2 20		rep #$20	                REP #$20        ; set A long
.3947ee		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3947f1		5b		tcd		                TCD
.3947f2		28		plp		                PLP
.3947f3		68		pla		                PLA             ; end setdp macro
.3947f4		c2 30		rep #$30	                REP #$30        ; set A&X long
.3947f6		a5 10		lda $0330	                LDA DOS_CLUS_ID
.3947f8		85 24		sta $0344	                STA DOS_FAT_LBA
.3947fa		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3947fc		85 26		sta $0346	                STA DOS_FAT_LBA+2
.3947fe		a2 07 00	ldx #$0007	                LDX #7
.394801		46 26		lsr $0346	div_loop        LSR DOS_FAT_LBA+2
.394803		66 24		ror $0344	                ROR DOS_FAT_LBA
.394805		ca		dex		                DEX
.394806		d0 f9		bne $394801	                BNE div_loop
.394808		18		clc		                CLC
.394809		a5 24		lda $0344	                LDA DOS_FAT_LBA
.39480b		6f 14 a0 38	adc $38a014	                ADC FAT_BEGIN_LBA
.39480f		85 24		sta $0344	                STA DOS_FAT_LBA
.394811		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394813		6f 16 a0 38	adc $38a016	                ADC FAT_BEGIN_LBA+2
.394817		85 26		sta $0346	                STA DOS_FAT_LBA+2
.394819		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; We want to load the FAT sector
.39481b		85 02		sta $0322	                STA BIOS_LBA
.39481d		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.39481f		85 04		sta $0324	                STA BIOS_LBA+2
.394821		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; We want to load the FAT sector in DOS_FAT_SECTORS
.394824		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394826		a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394829		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.39482b		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Load the FAT entry
.39482f		b0 06		bcs $394837	                BCS find_entry
.394831		e2 20		sep #$20	                SEP #$20        ; set A short
.394833		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394835		80 0e		bra $394845	                BRA ret_failure
.394837						find_entry
.394837		c2 20		rep #$20	                REP #$20        ; set A long
.394839		a5 10		lda $0330	                LDA DOS_CLUS_ID
.39483b		0a		asl a		                ASL A
.39483c		0a		asl a		                ASL A                           ; * 4
.39483d		29 ff 01	and #$01ff	                AND #$1FF                       ; DOS_CLUS_ID MOD 512
.394840		aa		tax		                TAX                             ; X should be the offset within the sector
.394841		2b		pld		ret_success     PLD
.394842		ab		plb		                PLB
.394843		38		sec		                SEC                             ; return success
.394844		6b		rtl		                RTL
.394845		2b		pld		ret_failure     PLD
.394846		ab		plb		                PLB
.394847		18		clc		                CLC                             ; Return failure
.394848		6b		rtl		                RTL
.394849						NEXTCLUSTER
.394849		08		php		                PHP
.39484a		e2 20		sep #$20	                SEP #$20        ; set A short
.39484c		af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394850		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394852		d0 08		bne $39485c	                BNE fat32                       ; No: assume it's FAT32
.394854		22 6a 48 39	jsl $39486a	fat12           JSL NEXTCLUSTER12               ; Lookup the next cluster from FAT12
.394858		90 0d		bcc $394867	                BCC pass_failure                ; If there was an error, pass it up the chain
.39485a		80 06		bra $394862	                BRA ret_success
.39485c		22 d2 48 39	jsl $3948d2	fat32           JSL NEXTCLUSTER32               ; Lookup the next cluster from FAT32
.394860		90 05		bcc $394867	                BCC pass_failure                ; If there was an error, pass it up the chain
.394862		64 0e		stz $032e	ret_success     STZ DOS_STATUS
.394864		28		plp		                PLP
.394865		38		sec		                SEC
.394866		6b		rtl		                RTL
.394867		28		plp		pass_failure    PLP
.394868		18		clc		                CLC
.394869		6b		rtl		                RTL
.39486a						NEXTCLUSTER12
.39486a		8b		phb		                    PHB
.39486b		0b		phd		                    PHD
.39486c		08		php		                    PHP
.39486d		48		pha		                PHA             ; begin setdbr macro
.39486e		08		php		                PHP
.39486f		e2 20		sep #$20	                SEP #$20        ; set A short
.394871		a9 00		lda #$00	                LDA #0
.394873		48		pha		                PHA
.394874		ab		plb		                PLB
.394875		28		plp		                PLP
.394876		68		pla		                PLA             ; end setdbr macro
.394877		48		pha		                PHA             ; begin setdp macro
.394878		08		php		                PHP
.394879		c2 20		rep #$20	                REP #$20        ; set A long
.39487b		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39487e		5b		tcd		                TCD
.39487f		28		plp		                PLP
.394880		68		pla		                PLA             ; end setdp macro
.394881		c2 30		rep #$30	                REP #$30        ; set A&X long
.394883		22 76 47 39	jsl $394776	                    JSL FATFORCLUSTER12             ; Attempt to load the FAT entries
.394887		b0 03		bcs $39488c	                    BCS chk_clus_id
.394889		82 41 00	brl $3948cd	                    BRL pass_failure
.39488c		a5 10		lda $0330	chk_clus_id         LDA DOS_CLUS_ID                 ; Check the cluster ID...
.39488e		89 01 00	bit #$0001	                    BIT #1                          ; Is it odd?
.394891		d0 0d		bne $3948a0	                    BNE is_odd                      ; Yes: calculate the next cluster for odd
.394893						is_even
.394893		c2 20		rep #$20	                REP #$20        ; set A long
.394895		bf 00 a5 38	lda $38a500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] & $0FFF
.394899		29 ff 0f	and #$0fff	                    AND #$0FFF
.39489c		85 28		sta $0348	                    STA DOS_TEMP
.39489e		80 0c		bra $3948ac	                    BRA check_id
.3948a0						is_odd
.3948a0		c2 20		rep #$20	                REP #$20        ; set A long
.3948a2		bf 00 a5 38	lda $38a500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] >> 4
.3948a6		4a		lsr a		                    LSR A
.3948a7		4a		lsr a		                    LSR A
.3948a8		4a		lsr a		                    LSR A
.3948a9		4a		lsr a		                    LSR A
.3948aa		85 28		sta $0348	                    STA DOS_TEMP
.3948ac						check_id
.3948ac		c2 20		rep #$20	                REP #$20        ; set A long
.3948ae		a5 28		lda $0348	                    LDA DOS_TEMP                    ; Check the new cluster ID we got
.3948b0		29 f0 0f	and #$0ff0	                    AND #$0FF0                      ; Is it in the range $0FF0 -- $0FFF?
.3948b3		c9 f0 0f	cmp #$0ff0	                    CMP #$0FF0
.3948b6		f0 0f		beq $3948c7	                    BEQ no_more                     ; Yes: return that we've reached the end of the chain
.3948b8		a5 28		lda $0348	                    LDA DOS_TEMP                    ; Restore the "current" cluster ID
.3948ba		85 10		sta $0330	                    STA DOS_CLUS_ID
.3948bc		64 12		stz $0332	                    STZ DOS_CLUS_ID+2
.3948be						ret_success
.3948be		e2 20		sep #$20	                SEP #$20        ; set A short
.3948c0		64 0e		stz $032e	                    STZ DOS_STATUS
.3948c2		28		plp		                    PLP
.3948c3		2b		pld		                    PLD
.3948c4		ab		plb		                    PLB
.3948c5		38		sec		                    SEC
.3948c6		6b		rtl		                    RTL
.3948c7						no_more
.3948c7		e2 20		sep #$20	                SEP #$20        ; set A short
.3948c9		a9 0a		lda #$0a	                    LDA #DOS_ERR_NOCLUSTER
.3948cb		85 0e		sta $032e	                    STA DOS_STATUS
.3948cd		28		plp		pass_failure        PLP
.3948ce		2b		pld		                    PLD
.3948cf		ab		plb		                    PLB
.3948d0		18		clc		                    CLC
.3948d1		6b		rtl		                    RTL
.3948d2						NEXTCLUSTER32
.3948d2		8b		phb		                PHB
.3948d3		0b		phd		                PHD
.3948d4		08		php		                PHP
.3948d5		48		pha		                PHA             ; begin setdbr macro
.3948d6		08		php		                PHP
.3948d7		e2 20		sep #$20	                SEP #$20        ; set A short
.3948d9		a9 00		lda #$00	                LDA #0
.3948db		48		pha		                PHA
.3948dc		ab		plb		                PLB
.3948dd		28		plp		                PLP
.3948de		68		pla		                PLA             ; end setdbr macro
.3948df		48		pha		                PHA             ; begin setdp macro
.3948e0		08		php		                PHP
.3948e1		c2 20		rep #$20	                REP #$20        ; set A long
.3948e3		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3948e6		5b		tcd		                TCD
.3948e7		28		plp		                PLP
.3948e8		68		pla		                PLA             ; end setdp macro
.3948e9		c2 30		rep #$30	                REP #$30        ; set A&X long
.3948eb		22 de 47 39	jsl $3947de	                JSL FATFORCLUSTER32             ; Get the FAT entry for this cluster
.3948ef		90 53		bcc $394944	                BCC ret_failure                 ; If it did not work, return the error
.3948f1		e2 20		sep #$20	                SEP #$20        ; set A short
.3948f3		bf 00 a5 38	lda $38a500,x	                LDA @l DOS_FAT_SECTORS,X        ; Get the entry and copy it to DOS_TEMP
.3948f7		85 28		sta $0348	                STA DOS_TEMP
.3948f9		bf 01 a5 38	lda $38a501,x	                LDA @l DOS_FAT_SECTORS+1,X
.3948fd		85 29		sta $0349	                STA DOS_TEMP+1
.3948ff		bf 02 a5 38	lda $38a502,x	                LDA @l DOS_FAT_SECTORS+2,X
.394903		85 2a		sta $034a	                STA DOS_TEMP+2
.394905		bf 03 a5 38	lda $38a503,x	                LDA @l DOS_FAT_SECTORS+3,X
.394909		85 2b		sta $034b	                STA DOS_TEMP+3
.39490b		a5 28		lda $0348	xxxx            LDA DOS_TEMP                    ; Is DOS_TEMP = $FFFFFFFF?
.39490d		c9 ff		cmp #$ff	                CMP #$FF
.39490f		d0 18		bne $394929	                BNE found_next
.394911		a5 29		lda $0349	                LDA DOS_TEMP+1
.394913		c9 ff		cmp #$ff	                CMP #$FF
.394915		d0 12		bne $394929	                BNE found_next
.394917		a5 2a		lda $034a	                LDA DOS_TEMP+2
.394919		c9 ff		cmp #$ff	                CMP #$FF
.39491b		d0 0c		bne $394929	                BNE found_next
.39491d		a5 2b		lda $034b	                LDA DOS_TEMP+3
.39491f		c9 0f		cmp #$0f	                CMP #$0F
.394921		d0 06		bne $394929	                BNE found_next                  ; No: return this cluster as the next
.394923		e2 20		sep #$20	                SEP #$20        ; set A short
.394925		a9 0a		lda #$0a	                LDA #DOS_ERR_NOCLUSTER          ; Yes: return that there are no more clusters
.394927		80 1b		bra $394944	                BRA ret_failure
.394929						found_next
.394929		e2 20		sep #$20	                SEP #$20        ; set A short
.39492b		a5 28		lda $0348	                LDA DOS_TEMP                    ; No: return DOS_TEMP as the new DOS_CLUS_ID
.39492d		85 10		sta $0330	                STA DOS_CLUS_ID
.39492f		a5 29		lda $0349	                LDA DOS_TEMP+1
.394931		85 11		sta $0331	                STA DOS_CLUS_ID+1
.394933		a5 2a		lda $034a	                LDA DOS_TEMP+2
.394935		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394937		a5 2b		lda $034b	                LDA DOS_TEMP+3
.394939		85 13		sta $0333	                STA DOS_CLUS_ID+3
.39493b						ret_success
.39493b		e2 20		sep #$20	                SEP #$20        ; set A short
.39493d		64 0e		stz $032e	                STZ DOS_STATUS                  ; Record success
.39493f		28		plp		                PLP
.394940		2b		pld		                PLD
.394941		ab		plb		                PLB
.394942		38		sec		                SEC
.394943		6b		rtl		                RTL
.394944						ret_failure
.394944		e2 20		sep #$20	                SEP #$20        ; set A short
.394946		85 0e		sta $032e	                STA DOS_STATUS                  ; Record the error condition
.394948		28		plp		                PLP
.394949		2b		pld		                PLD
.39494a		ab		plb		                PLB
.39494b		18		clc		                CLC
.39494c		6b		rtl		                RTL
.39494d						DOS_READNEXT
.39494d		08		php		                PHP
.39494e		c2 30		rep #$30	                REP #$30        ; set A&X long
.394950		22 49 48 39	jsl $394849	                JSL NEXTCLUSTER                 ; Attempt to find the next cluster in the FAT
.394954		90 09		bcc $39495f	                BCC pass_failure                ; If nothing found: pass the failure up the chain
.394956		22 35 44 39	jsl $394435	                JSL DOS_GETCLUSTER              ; Otherwise: attempt to read the cluster
.39495a		90 03		bcc $39495f	                BCC pass_failure                ; If nothing read: pass the failure up the chain
.39495c		28		plp		ret_success     PLP
.39495d		38		sec		                SEC
.39495e		6b		rtl		                RTL
.39495f		28		plp		pass_failure    PLP
.394960		18		clc		                CLC
.394961		6b		rtl		                RTL
.394962						DOS_FREECLUS
.394962		08		php		                PHP
.394963		48		pha		                PHA             ; begin setdp macro
.394964		08		php		                PHP
.394965		c2 20		rep #$20	                REP #$20        ; set A long
.394967		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39496a		5b		tcd		                TCD
.39496b		28		plp		                PLP
.39496c		68		pla		                PLA             ; end setdp macro
.39496d		e2 20		sep #$20	                SEP #$20        ; set A short
.39496f		af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394973		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394975		d0 08		bne $39497f	                BNE fat32                       ; No: assume it's FAT32
.394977		22 f3 49 39	jsl $3949f3	fat12           JSL DOS_FREECLUS12              ; Find the next free cluster from FAT12
.39497b		90 0d		bcc $39498a	                BCC pass_failure                ; If there was an error, pass it up the chain
.39497d		80 06		bra $394985	                BRA ret_success
.39497f		22 cb 4a 39	jsl $394acb	fat32           JSL DOS_FREECLUS32              ; Find the next free cluster from FAT32
.394983		90 05		bcc $39498a	                BCC pass_failure                ; If there was an error, pass it up the chain
.394985		64 0e		stz $032e	ret_success     STZ DOS_STATUS
.394987		28		plp		                PLP
.394988		38		sec		                SEC
.394989		6b		rtl		                RTL
.39498a		28		plp		pass_failure    PLP
.39498b		18		clc		                CLC
.39498c		6b		rtl		                RTL
.39498d						FDC_READ2FAT12
.39498d		8b		phb		                    PHB
.39498e		0b		phd		                    PHD
.39498f		08		php		                    PHP
.394990		48		pha		                PHA             ; begin setdbr macro
.394991		08		php		                PHP
.394992		e2 20		sep #$20	                SEP #$20        ; set A short
.394994		a9 00		lda #$00	                LDA #0
.394996		48		pha		                PHA
.394997		ab		plb		                PLB
.394998		28		plp		                PLP
.394999		68		pla		                PLA             ; end setdbr macro
.39499a		48		pha		                PHA             ; begin setdp macro
.39499b		08		php		                PHP
.39499c		c2 20		rep #$20	                REP #$20        ; set A long
.39499e		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3949a1		5b		tcd		                TCD
.3949a2		28		plp		                PLP
.3949a3		68		pla		                PLA             ; end setdp macro
.3949a4		c2 30		rep #$30	                REP #$30        ; set A&X long
.3949a6		a9 00 a5	lda #$a500	                    LDA #<>DOS_FAT_SECTORS          ; Set the location to store the sector
.3949a9		85 06		sta $0326	                    STA BIOS_BUFF_PTR
.3949ab		a9 38 00	lda #$0038	                    LDA #`DOS_FAT_SECTORS
.3949ae		85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.3949b0		a5 24		lda $0344	                    LDA DOS_FAT_LBA
.3949b2		85 02		sta $0322	                    STA BIOS_LBA
.3949b4		a5 26		lda $0346	                    LDA DOS_FAT_LBA+2
.3949b6		85 04		sta $0324	                    STA BIOS_LBA+2
.3949b8		22 44 10 00	jsl $001044	                    JSL GETBLOCK                    ; Read the first sector
.3949bc		b0 07		bcs $3949c5	                    BCS inc_sect2                   ; If success: start getting the second sector
.3949be		e2 20		sep #$20	                SEP #$20        ; set A short
.3949c0		a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.3949c2		82 1c 00	brl $3949e1	                    BRL ret_failure
.3949c5						inc_sect2
.3949c5		c2 20		rep #$20	                REP #$20        ; set A long
.3949c7		e6 02		inc $0322	                    INC BIOS_LBA                    ; Move to the next sector
.3949c9		d0 02		bne $3949cd	                    BNE inc_buff_ptr
.3949cb		e6 04		inc $0324	                    INC BIOS_LBA+2
.3949cd		a9 00 a7	lda #$a700	inc_buff_ptr        LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.3949d0		85 06		sta $0326	                    STA BIOS_BUFF_PTR
.3949d2		a9 38 00	lda #$0038	                    LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.3949d5		85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.3949d7		22 44 10 00	jsl $001044	                    JSL GETBLOCK                    ; Read the second sector
.3949db		b0 0d		bcs $3949ea	                    BCS ret_success                 ; If success, return success
.3949dd		e2 20		sep #$20	                SEP #$20        ; set A short
.3949df		a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.3949e1						ret_failure
.3949e1		e2 20		sep #$20	                SEP #$20        ; set A short
.3949e3		85 00		sta $0320	                    STA BIOS_STATUS
.3949e5		28		plp		                    PLP
.3949e6		2b		pld		                    PLD
.3949e7		ab		plb		                    PLB
.3949e8		18		clc		                    CLC
.3949e9		6b		rtl		                    RTL
.3949ea						ret_success
.3949ea		e2 20		sep #$20	                SEP #$20        ; set A short
.3949ec		64 00		stz $0320	                    STZ BIOS_STATUS
.3949ee		28		plp		                    PLP
.3949ef		2b		pld		                    PLD
.3949f0		ab		plb		                    PLB
.3949f1		38		sec		                    SEC
.3949f2		6b		rtl		                    RTL
.3949f3						DOS_FREECLUS12
.3949f3		da		phx		                PHX
.3949f4		8b		phb		                PHB
.3949f5		0b		phd		                PHD
.3949f6		08		php		                PHP
.3949f7		48		pha		                PHA             ; begin setdbr macro
.3949f8		08		php		                PHP
.3949f9		e2 20		sep #$20	                SEP #$20        ; set A short
.3949fb		a9 00		lda #$00	                LDA #0
.3949fd		48		pha		                PHA
.3949fe		ab		plb		                PLB
.3949ff		28		plp		                PLP
.394a00		68		pla		                PLA             ; end setdbr macro
.394a01		48		pha		                PHA             ; begin setdp macro
.394a02		08		php		                PHP
.394a03		c2 20		rep #$20	                REP #$20        ; set A long
.394a05		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394a08		5b		tcd		                TCD
.394a09		28		plp		                PLP
.394a0a		68		pla		                PLA             ; end setdp macro
.394a0b		c2 30		rep #$30	                REP #$30        ; set A&X long
.394a0d		a9 02 00	lda #$0002	                LDA #2                          ; Cluster ID is 2 to start with
.394a10		85 10		sta $0330	                STA DOS_CLUS_ID
.394a12		a9 00 00	lda #$0000	                LDA #0
.394a15		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394a17		22 03 47 39	jsl $394703	                JSL ENTRYFORCLUS12              ; Calculate the LBA and buffer offset for the cluster
.394a1b		22 8d 49 39	jsl $39498d	                JSL FDC_READ2FAT12              ; Read the first two sectors of the FAT
.394a1f		b0 07		bcs $394a28	                BCS start_of_fat                ; If success, move X to the start of the FAT
.394a21		e2 20		sep #$20	                SEP #$20        ; set A short
.394a23		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394a25		82 99 00	brl $394ac1	                BRL ret_failure
.394a28						start_of_fat
.394a28		c2 30		rep #$30	                REP #$30        ; set A&X long
.394a2a		a5 10		lda $0330	chk_cluster     LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.394a2c		89 01 00	bit #$0001	                BIT #1
.394a2f		d0 09		bne $394a3a	                BNE is_odd
.394a31		bf 00 a5 38	lda $38a500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an even numbered cluster
.394a35		29 ff 0f	and #$0fff	                AND #$0FFF
.394a38		80 08		bra $394a42	                BRA chk_available
.394a3a		bf 00 a5 38	lda $38a500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an odd numbered cluster
.394a3e		4a		lsr a		                LSR A
.394a3f		4a		lsr a		                LSR A
.394a40		4a		lsr a		                LSR A
.394a41		4a		lsr a		                LSR A
.394a42						chk_available
.394a42		85 28		sta $0348	                STA DOS_TEMP
.394a44		c9 00 00	cmp #$0000	                CMP #0                          ; Is it available?
.394a47		f0 03		beq $394a4c	                BEQ chk_found
.394a49		82 39 00	brl $394a85	                BRL next_cluster                ; No: advance to the next cluster
.394a4c		8a		txa		chk_found       TXA
.394a4d		85 2a		sta $034a	                STA DOS_TEMP+2
.394a4f		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.394a51		89 01 00	bit #$0001	                BIT #1
.394a54		d0 0d		bne $394a63	                BNE is_odd2
.394a56						is_even2
.394a56		bf 00 a5 38	lda $38a500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, even offset case
.394a5a		09 ff 0f	ora #$0fff	                ORA #$0FFF
.394a5d		9f 00 a5 38	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.394a61		80 0b		bra $394a6e	                BRA write_fat
.394a63						is_odd2
.394a63		bf 00 a5 38	lda $38a500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, odd offset case
.394a67		09 f0 ff	ora #$fff0	                ORA #$FFF0
.394a6a		9f 00 a5 38	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.394a6e		22 95 4b 39	jsl $394b95	write_fat       JSL WRITEFAT12                  ; Write the two FAT sectors back to disk
.394a72		b0 07		bcs $394a7b	                BCS ret_success                 ; If success: return success
.394a74		e2 20		sep #$20	                SEP #$20        ; set A short
.394a76		a9 14		lda #$14	                LDA #DOS_ERR_FATUPDATE          ; Flag an error trying to write the FAT back
.394a78		82 46 00	brl $394ac1	                BRL ret_failure
.394a7b						ret_success
.394a7b		e2 20		sep #$20	                SEP #$20        ; set A short
.394a7d		64 0e		stz $032e	                STZ DOS_STATUS
.394a7f		28		plp		                PLP
.394a80		2b		pld		                PLD
.394a81		ab		plb		                PLB
.394a82		fa		plx		                PLX
.394a83		38		sec		                SEC
.394a84		6b		rtl		                RTL
.394a85						next_cluster
.394a85		e6 10		inc $0330	                INC DOS_CLUS_ID                 ; And advance the cluster ID
.394a87		d0 02		bne $394a8b	                BNE calc_entry
.394a89		e6 12		inc $0332	                INC DOS_CLUS_ID+2
.394a8b		22 03 47 39	jsl $394703	calc_entry      JSL ENTRYFORCLUS12              ; Calculate the LBA and offset into the buffer for the cluster
.394a8f		e0 00 00	cpx #$0000	                CPX #0                          ; Did we wrap around?
.394a92		f0 03		beq $394a97	                BEQ chk_end_of_fat
.394a94		82 93 ff	brl $394a2a	                BRL chk_cluster                 ; No: go back and check it too
.394a97						chk_end_of_fat
.394a97		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Are we at the end of the FAT?
.394a99		cf 18 a0 38	cmp $38a018	                CMP FAT2_BEGIN_LBA              ; NOTE: we use the start sector of the second FAT as our sentinel
.394a9d		d0 0f		bne $394aae	                BNE next_2
.394a9f		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394aa1		cf 1a a0 38	cmp $38a01a	                CMP FAT2_BEGIN_LBA+2
.394aa5		d0 07		bne $394aae	                BNE next_2                      ; No: get the next to sectors
.394aa7		e2 20		sep #$20	                SEP #$20        ; set A short
.394aa9		a9 12		lda #$12	                LDA #DOS_ERR_MEDIAFULL          ; Yes: return media full
.394aab		82 13 00	brl $394ac1	                BRL ret_failure
.394aae						next_2
.394aae		22 8d 49 39	jsl $39498d	                JSL FDC_READ2FAT12              ; Read the next two sectors of the FAT
.394ab2		90 06		bcc $394aba	                BCC fat_fail                    ; If failed: return error
.394ab4		a2 00 00	ldx #$0000	                LDX #0                          ; If success: Start scanning at the beginning of the sectors
.394ab7		82 70 ff	brl $394a2a	                BRL chk_cluster                 ; And start checking from there
.394aba						fat_fail
.394aba		e2 20		sep #$20	                SEP #$20        ; set A short
.394abc		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394abe		82 00 00	brl $394ac1	                BRL ret_failure
.394ac1						ret_failure
.394ac1		e2 20		sep #$20	                SEP #$20        ; set A short
.394ac3		85 0e		sta $032e	                STA DOS_STATUS
.394ac5		28		plp		                PLP
.394ac6		2b		pld		                PLD
.394ac7		ab		plb		                PLB
.394ac8		fa		plx		                PLX
.394ac9		18		clc		                CLC
.394aca		6b		rtl		                RTL
.394acb						DOS_FREECLUS32
.394acb		8b		phb		                PHB
.394acc		0b		phd		                PHD
.394acd		08		php		                PHP
.394ace		48		pha		                PHA             ; begin setdbr macro
.394acf		08		php		                PHP
.394ad0		e2 20		sep #$20	                SEP #$20        ; set A short
.394ad2		a9 00		lda #$00	                LDA #0
.394ad4		48		pha		                PHA
.394ad5		ab		plb		                PLB
.394ad6		28		plp		                PLP
.394ad7		68		pla		                PLA             ; end setdbr macro
.394ad8		48		pha		                PHA             ; begin setdp macro
.394ad9		08		php		                PHP
.394ada		c2 20		rep #$20	                REP #$20        ; set A long
.394adc		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394adf		5b		tcd		                TCD
.394ae0		28		plp		                PLP
.394ae1		68		pla		                PLA             ; end setdp macro
.394ae2		c2 30		rep #$30	                REP #$30        ; set A&X long
.394ae4		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR               ; Set the location to store the sector
.394ae7		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394ae9		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.394aec		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394aee		af 14 a0 38	lda $38a014	                LDA FAT_BEGIN_LBA               ; Set the LBA to that of the first FAT sector
.394af2		85 02		sta $0322	                STA BIOS_LBA
.394af4		af 16 a0 38	lda $38a016	                LDA FAT_BEGIN_LBA+2
.394af8		85 04		sta $0324	                STA BIOS_LBA+2
.394afa		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Load the sector into memory
.394afe		b0 07		bcs $394b07	                BCS initial_entry               ; If OK: set the initial entry to check
.394b00		e2 20		sep #$20	                SEP #$20        ; set A short
.394b02		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Return a NOFAT error
.394b04		82 6b 00	brl $394b72	                BRL ret_failure
.394b07						initial_entry
.394b07		c2 20		rep #$20	                REP #$20        ; set A long
.394b09		a9 02 00	lda #$0002	                LDA #2                          ; Set DOS_CLUS_ID to 2
.394b0c		85 10		sta $0330	                STA DOS_CLUS_ID
.394b0e		a9 00 00	lda #$0000	                LDA #0
.394b11		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394b13		a2 08 00	ldx #$0008	                LDX #8                          ; Set the offset to DOS_CLUS_ID * 4
.394b16		bf 00 a3 38	lda $38a300,x	chk_entry       LDA DOS_SECTOR,X                ; Is the cluster entry == $00000000?
.394b1a		d0 06		bne $394b22	                BNE next_entry                  ; No: move to the next entry
.394b1c		bf 02 a3 38	lda $38a302,x	                LDA DOS_SECTOR+2,X
.394b20		f0 36		beq $394b58	                BEQ found_free                  ; Yes: go to allocate and return it
.394b22		e6 10		inc $0330	next_entry      INC DOS_CLUS_ID                 ; Move to the next cluster
.394b24		d0 02		bne $394b28	                BNE inc_ptr
.394b26		e6 12		inc $0332	                INC DOS_CLUS_ID+2
.394b28		e8		inx		inc_ptr         INX                             ; Update the index to the entry
.394b29		e8		inx		                INX
.394b2a		e8		inx		                INX
.394b2b		e8		inx		                INX
.394b2c		e0 00 02	cpx #$0200	                CPX #DOS_SECTOR_SIZE            ; Are we outside the sector?
.394b2f		90 e5		bcc $394b16	                BLT chk_entry                   ; No: check this entry
.394b31		e6 02		inc $0322	                INC BIOS_LBA                    ; Point to the next sector in the FAT
.394b33		d0 18		bne $394b4d	                BNE get_block
.394b35		e6 04		inc $0324	                INC BIOS_LBA+2
.394b37		a5 04		lda $0324	                LDA BIOS_LBA+2
.394b39		cf 1a a0 38	cmp $38a01a	                CMP FAT2_BEGIN_LBA+2
.394b3d		90 0e		bcc $394b4d	                BLT get_block
.394b3f		a5 02		lda $0322	                LDA BIOS_LBA
.394b41		cf 18 a0 38	cmp $38a018	                CMP FAT2_BEGIN_LBA
.394b45		90 06		bcc $394b4d	                BLT get_block
.394b47		e2 20		sep #$20	                SEP #$20        ; set A short
.394b49		a9 12		lda #$12	                LDA #DOS_ERR_MEDIAFULL          ; No: throw a media full error
.394b4b		80 25		bra $394b72	                BRA ret_failure
.394b4d		22 44 10 00	jsl $001044	get_block       JSL GETBLOCK                    ; Attempt to read the block
.394b51		90 1b		bcc $394b6e	                BCC ret_fat_error               ; If error: throw a FAT error
.394b53		a2 00 00	ldx #$0000	set_ptr         LDX #0                          ; Set index pointer to the first entry
.394b56		80 be		bra $394b16	                BRA chk_entry                   ; Check this entry
.394b58						found_free
.394b58		c2 20		rep #$20	                REP #$20        ; set A long
.394b5a		a9 ff ff	lda #$ffff	                LDA #<>FAT_LAST_CLUSTER         ; Set the entry to $0FFFFFFF to make it the last entry in its chain
.394b5d		9f 00 a3 38	sta $38a300,x	                STA DOS_SECTOR,X
.394b61		a9 ff 0f	lda #$0fff	                LDA #(FAT_LAST_CLUSTER >> 16)
.394b64		9f 02 a3 38	sta $38a302,x	                STA DOS_SECTOR+2,X
.394b68		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.394b6c		b0 0d		bcs $394b7b	                BCS ret_success                 ; If OK: return success
.394b6e						ret_fat_error
.394b6e		e2 20		sep #$20	                SEP #$20        ; set A short
.394b70		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Otherwise: return NOFAT error
.394b72						ret_failure
.394b72		e2 20		sep #$20	                SEP #$20        ; set A short
.394b74		85 0e		sta $032e	                STA DOS_STATUS
.394b76		28		plp		                PLP
.394b77		2b		pld		                PLD
.394b78		ab		plb		                PLB
.394b79		18		clc		                CLC
.394b7a		6b		rtl		                RTL
.394b7b						ret_success
.394b7b		e2 20		sep #$20	                SEP #$20        ; set A short
.394b7d		64 0e		stz $032e	                STZ DOS_STATUS
.394b7f		28		plp		                PLP
.394b80		2b		pld		                PLD
.394b81		ab		plb		                PLB
.394b82		38		sec		                SEC
.394b83		6b		rtl		                RTL
.394b84						DELCLUSTER
.394b84		e2 20		sep #$20	                SEP #$20        ; set A short
.394b86		af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394b8a		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394b8c		d0 04		bne $394b92	                BNE fat32                       ; No: assume it's FAT32
.394b8e		5c dc 4b 39	jmp $394bdc	fat12           JML DELCLUSTER12
.394b92		4c 2a 4c	jmp $394c2a	fat32           JMP DELCLUSTER32
.394b95						WRITEFAT12
.394b95		8b		phb		                PHB
.394b96		0b		phd		                PHD
.394b97		48		pha		                PHA             ; begin setdbr macro
.394b98		08		php		                PHP
.394b99		e2 20		sep #$20	                SEP #$20        ; set A short
.394b9b		a9 00		lda #$00	                LDA #0
.394b9d		48		pha		                PHA
.394b9e		ab		plb		                PLB
.394b9f		28		plp		                PLP
.394ba0		68		pla		                PLA             ; end setdbr macro
.394ba1		48		pha		                PHA             ; begin setdp macro
.394ba2		08		php		                PHP
.394ba3		c2 20		rep #$20	                REP #$20        ; set A long
.394ba5		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394ba8		5b		tcd		                TCD
.394ba9		28		plp		                PLP
.394baa		68		pla		                PLA             ; end setdp macro
.394bab		c2 30		rep #$30	                REP #$30        ; set A&X long
.394bad		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first FAT sector in memory
.394bb0		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394bb2		a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394bb5		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394bb7		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Set the LBA to that of the first sector's
.394bb9		85 02		sta $0322	                STA BIOS_LBA
.394bbb		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394bbd		85 04		sta $0324	                STA BIOS_LBA+2
.394bbf		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the first sector back to the block device
.394bc3		90 14		bcc $394bd9	                BCC done
.394bc5		a9 00 a7	lda #$a700	                LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394bc8		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394bca		a9 38 00	lda #$0038	                LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394bcd		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394bcf		e6 02		inc $0322	                INC BIOS_LBA                    ; Point to the next sector in the FAT
.394bd1		d0 02		bne $394bd5	                BNE put_second
.394bd3		e6 04		inc $0324	                INC BIOS_LBA+2
.394bd5		22 24 10 00	jsl $001024	put_second      JSL PUTBLOCK                    ; Write the second sector back to the block device
.394bd9		2b		pld		done            PLD
.394bda		ab		plb		                PLB
.394bdb		6b		rtl		                RTL
.394bdc						DELCLUSTER12
.394bdc		8b		phb		                PHB
.394bdd		0b		phd		                PHD
.394bde		08		php		                PHP
.394bdf		48		pha		                PHA             ; begin setdbr macro
.394be0		08		php		                PHP
.394be1		e2 20		sep #$20	                SEP #$20        ; set A short
.394be3		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394be5		48		pha		                PHA
.394be6		ab		plb		                PLB
.394be7		28		plp		                PLP
.394be8		68		pla		                PLA             ; end setdbr macro
.394be9		48		pha		                PHA             ; begin setdp macro
.394bea		08		php		                PHP
.394beb		c2 20		rep #$20	                REP #$20        ; set A long
.394bed		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394bf0		5b		tcd		                TCD
.394bf1		28		plp		                PLP
.394bf2		68		pla		                PLA             ; end setdp macro
.394bf3		c2 30		rep #$30	                REP #$30        ; set A&X long
.394bf5		22 76 47 39	jsl $394776	                JSL FATFORCLUSTER12
.394bf9		8a		txa		                TXA                             ; Check to see if the index is odd or even
.394bfa		89 01 00	bit #$0001	                BIT #1
.394bfd		d0 08		bne $394c07	                BNE is_odd
.394bff		bd 00 a5	lda $38a500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.394c02		29 00 f0	and #$f000	                AND #$F000                      ; Mask out the lower 12 bits
.394c05		80 06		bra $394c0d	                BRA save_update
.394c07		bd 00 a5	lda $38a500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.394c0a		29 0f 00	and #$000f	                AND #$000F                      ; Mask out the upper 12 bits
.394c0d		9d 00 a5	sta $38a500,x	save_update     STA DOS_FAT_SECTORS,X           ; And write it back
.394c10		22 95 4b 39	jsl $394b95	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.394c14		b0 0b		bcs $394c21	                BCS ret_success
.394c16						ret_failure
.394c16		e2 20		sep #$20	                SEP #$20        ; set A short
.394c18		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394c1a		85 0e		sta $032e	                STA DOS_STATUS
.394c1c		28		plp		                PLP
.394c1d		2b		pld		                PLD
.394c1e		ab		plb		                PLB
.394c1f		18		clc		                CLC
.394c20		6b		rtl		                RTL
.394c21						ret_success
.394c21		e2 20		sep #$20	                SEP #$20        ; set A short
.394c23		64 0e		stz $032e	                STZ DOS_STATUS
.394c25		28		plp		                PLP
.394c26		2b		pld		                PLD
.394c27		ab		plb		                PLB
.394c28		38		sec		                SEC
.394c29		6b		rtl		                RTL
.394c2a						DELCLUSTER32
.394c2a		8b		phb		                PHB
.394c2b		0b		phd		                PHD
.394c2c		08		php		                PHP
.394c2d		c2 30		rep #$30	                REP #$30        ; set A&X long
.394c2f		48		pha		                PHA             ; begin setdbr macro
.394c30		08		php		                PHP
.394c31		e2 20		sep #$20	                SEP #$20        ; set A short
.394c33		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394c35		48		pha		                PHA
.394c36		ab		plb		                PLB
.394c37		28		plp		                PLP
.394c38		68		pla		                PLA             ; end setdbr macro
.394c39		48		pha		                PHA             ; begin setdp macro
.394c3a		08		php		                PHP
.394c3b		c2 20		rep #$20	                REP #$20        ; set A long
.394c3d		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394c40		5b		tcd		                TCD
.394c41		28		plp		                PLP
.394c42		68		pla		                PLA             ; end setdp macro
.394c43		22 de 47 39	jsl $3947de	                JSL FATFORCLUSTER32
.394c47		a9 00 00	lda #$0000	                LDA #0
.394c4a		9d 00 a5	sta $38a500,x	                STA DOS_FAT_SECTORS,X           ; Set the cluster entry to 0
.394c4d		9d 02 a5	sta $38a502,x	                STA DOS_FAT_SECTORS+2,X
.394c50		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.394c54		b0 0b		bcs $394c61	                BCS ret_success
.394c56						ret_failure
.394c56		e2 20		sep #$20	                SEP #$20        ; set A short
.394c58		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394c5a		85 0e		sta $032e	                STA DOS_STATUS
.394c5c		28		plp		                PLP
.394c5d		2b		pld		                PLD
.394c5e		ab		plb		                PLB
.394c5f		18		clc		                CLC
.394c60		6b		rtl		                RTL
.394c61						ret_success
.394c61		e2 20		sep #$20	                SEP #$20        ; set A short
.394c63		64 0e		stz $032e	                STZ DOS_STATUS
.394c65		28		plp		                PLP
.394c66		2b		pld		                PLD
.394c67		ab		plb		                PLB
.394c68		38		sec		                SEC
.394c69		6b		rtl		                RTL
.394c6a						DOS_APPENDCLUS
.394c6a		8b		phb		                PHB
.394c6b		0b		phd		                PHD
.394c6c		08		php		                PHP
.394c6d		48		pha		                PHA             ; begin setdbr macro
.394c6e		08		php		                PHP
.394c6f		e2 20		sep #$20	                SEP #$20        ; set A short
.394c71		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394c73		48		pha		                PHA
.394c74		ab		plb		                PLB
.394c75		28		plp		                PLP
.394c76		68		pla		                PLA             ; end setdbr macro
.394c77		48		pha		                PHA             ; begin setdp macro
.394c78		08		php		                PHP
.394c79		c2 20		rep #$20	                REP #$20        ; set A long
.394c7b		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394c7e		5b		tcd		                TCD
.394c7f		28		plp		                PLP
.394c80		68		pla		                PLA             ; end setdp macro
.394c81		c2 30		rep #$30	                REP #$30        ; set A&X long
.394c83		a5 12		lda $0332	                LDA DOS_CLUS_ID+2               ; Save the cluster number for later
.394c85		48		pha		                PHA
.394c86		a5 10		lda $0330	                LDA DOS_CLUS_ID
.394c88		48		pha		                PHA
.394c89		22 62 49 39	jsl $394962	                JSL DOS_FREECLUS                ; Find a free cluster on the block device
.394c8d		b0 09		bcs $394c98	                BCS save_cluster                ; If we got a cluster, write the data to it
.394c8f		68		pla		fail_cleanup    PLA                             ; Restore the cluster of the file
.394c90		85 10		sta $0330	                STA DOS_CLUS_ID
.394c92		68		pla		                PLA
.394c93		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394c95		82 7d 00	brl $394d15	                BRL pass_failure                ; Pass the failure back up the chain
.394c98		a5 10		lda $0330	save_cluster    LDA DOS_CLUS_ID
.394c9a		8d 36 a0	sta $38a036	                STA DOS_NEW_CLUSTER
.394c9d		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394c9f		8d 38 a0	sta $38a038	                STA DOS_NEW_CLUSTER+2
.394ca2		22 72 44 39	jsl $394472	                JSL DOS_PUTCLUSTER              ; Write the data to the free cluster
.394ca6		90 e7		bcc $394c8f	                BCC fail_cleanup                ; If failure: clean up stack and pass the failure up
.394ca8		68		pla		                PLA                             ; Restore the cluster of the file
.394ca9		85 10		sta $0330	                STA DOS_CLUS_ID
.394cab		68		pla		                PLA
.394cac		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394cae		22 49 48 39	jsl $394849	walk_loop       JSL NEXTCLUSTER                 ; Try to get the next cluster in the chain
.394cb2		b0 fa		bcs $394cae	                BCS walk_loop                   ; If found a cluster, keep walking the chain
.394cb4		e2 20		sep #$20	                SEP #$20        ; set A short
.394cb6		af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394cba		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394cbc		d0 3d		bne $394cfb	                BNE fat32                       ; No: assume it's FAT32
.394cbe						fat12
.394cbe		c2 20		rep #$20	                REP #$20        ; set A long
.394cc0		22 03 47 39	jsl $394703	                JSL ENTRYFORCLUS12              ; Make sure we have the right offset for the cluster
.394cc4		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if the last cluster ID is even or odd
.394cc6		89 01 00	bit #$0001	                BIT #1
.394cc9		d0 11		bne $394cdc	                BNE is_odd
.394ccb		ad 36 a0	lda $38a036	is_even         LDA DOS_NEW_CLUSTER             ; Handle the even case (change the lower 12 bits)
.394cce		29 ff 0f	and #$0fff	                AND #$0FFF
.394cd1		8d 36 a0	sta $38a036	                STA DOS_NEW_CLUSTER
.394cd4		bd 00 a5	lda $38a500,x	                LDA DOS_FAT_SECTORS,X
.394cd7		29 00 f0	and #$f000	                AND #$F000
.394cda		80 10		bra $394cec	                BRA update_fat12
.394cdc		ad 36 a0	lda $38a036	is_odd          LDA DOS_NEW_CLUSTER             ; Handle the odd case (change the upper 12 bits)
.394cdf		0a		asl a		                ASL A
.394ce0		0a		asl a		                ASL A
.394ce1		0a		asl a		                ASL A
.394ce2		0a		asl a		                ASL A
.394ce3		8d 36 a0	sta $38a036	                STA DOS_NEW_CLUSTER
.394ce6		bd 00 a5	lda $38a500,x	                LDA DOS_FAT_SECTORS,X
.394ce9		29 0f 00	and #$000f	                AND #$000F
.394cec		0d 36 a0	ora $38a036	update_fat12    ORA DOS_NEW_CLUSTER
.394cef		9d 00 a5	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.394cf2		22 95 4b 39	jsl $394b95	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.394cf6		b0 22		bcs $394d1a	                BCS ret_success
.394cf8		82 1a 00	brl $394d15	                BRL pass_failure
.394cfb						fat32
.394cfb		c2 20		rep #$20	                REP #$20        ; set A long
.394cfd		ad 36 a0	lda $38a036	                LDA DOS_NEW_CLUSTER             ; Write the ID of the new cluster to the end of the chain
.394d00		9d 00 a5	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.394d03		ad 38 a0	lda $38a038	                LDA DOS_NEW_CLUSTER+2
.394d06		9d 02 a5	sta $38a502,x	                STA DOS_FAT_SECTORS+2,X
.394d09		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the FAT sector back (assumes BIOS_LBA and BIOS_BUFF_PTR haven't changed)
.394d0d		b0 0b		bcs $394d1a	                BCS ret_success
.394d0f		e2 20		sep #$20	                SEP #$20        ; set A short
.394d11		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Problem working with the FAT
.394d13		85 0e		sta $032e	                STA DOS_STATUS
.394d15		28		plp		pass_failure    PLP
.394d16		2b		pld		                PLD
.394d17		ab		plb		                PLB
.394d18		18		clc		                CLC
.394d19		6b		rtl		                RTL
.394d1a						ret_success
.394d1a		e2 20		sep #$20	                SEP #$20        ; set A short
.394d1c		64 0e		stz $032e	                STZ DOS_STATUS
.394d1e		28		plp		                PLP
.394d1f		2b		pld		                PLD
.394d20		ab		plb		                PLB
.394d21		38		sec		                SEC
.394d22		6b		rtl		                RTL
.394d23						BCD2BIN
.394d23		8b		phb		                PHB
.394d24		0b		phd		                PHD
.394d25		08		php		                PHP
.394d26		48		pha		                PHA             ; begin setdbr macro
.394d27		08		php		                PHP
.394d28		e2 20		sep #$20	                SEP #$20        ; set A short
.394d2a		a9 00		lda #$00	                LDA #0
.394d2c		48		pha		                PHA
.394d2d		ab		plb		                PLB
.394d2e		28		plp		                PLP
.394d2f		68		pla		                PLA             ; end setdbr macro
.394d30		48		pha		                PHA             ; begin setdp macro
.394d31		08		php		                PHP
.394d32		c2 20		rep #$20	                REP #$20        ; set A long
.394d34		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394d37		5b		tcd		                TCD
.394d38		28		plp		                PLP
.394d39		68		pla		                PLA             ; end setdp macro
.394d3a		c2 30		rep #$30	                REP #$30        ; set A&X long
.394d3c		85 28		sta $0348	                STA DOS_TEMP
.394d3e		29 0f 00	and #$000f	                AND #$000F
.394d41		85 2a		sta $034a	                STA DOS_TEMP+2
.394d43		a5 28		lda $0348	                LDA DOS_TEMP
.394d45		4a		lsr a		                LSR A
.394d46		4a		lsr a		                LSR A
.394d47		4a		lsr a		                LSR A
.394d48		4a		lsr a		                LSR A
.394d49		85 28		sta $0348	                STA DOS_TEMP
.394d4b		29 0f 00	and #$000f	                AND #$000F
.394d4e		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.394d52		a9 0a 00	lda #$000a	                LDA #10
.394d55		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.394d59		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.394d5d		18		clc		                CLC
.394d5e		65 2a		adc $034a	                ADC DOS_TEMP+2
.394d60		85 2a		sta $034a	                STA DOS_TEMP+2
.394d62		a5 28		lda $0348	                LDA DOS_TEMP
.394d64		4a		lsr a		                LSR A
.394d65		4a		lsr a		                LSR A
.394d66		4a		lsr a		                LSR A
.394d67		4a		lsr a		                LSR A
.394d68		85 28		sta $0348	                STA DOS_TEMP
.394d6a		29 0f 00	and #$000f	                AND #$000F
.394d6d		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.394d71		a9 64 00	lda #$0064	                LDA #100
.394d74		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.394d78		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.394d7c		18		clc		                CLC
.394d7d		65 2a		adc $034a	                ADC DOS_TEMP+2
.394d7f		85 2a		sta $034a	                STA DOS_TEMP+2
.394d81		a5 28		lda $0348	                LDA DOS_TEMP
.394d83		4a		lsr a		                LSR A
.394d84		4a		lsr a		                LSR A
.394d85		4a		lsr a		                LSR A
.394d86		4a		lsr a		                LSR A
.394d87		29 0f 00	and #$000f	                AND #$000F
.394d8a		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.394d8e		a9 e8 03	lda #$03e8	                LDA #1000
.394d91		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.394d95		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.394d99		18		clc		                CLC
.394d9a		65 2a		adc $034a	                ADC DOS_TEMP+2
.394d9c		28		plp		                PLP
.394d9d		2b		pld		                PLD
.394d9e		ab		plb		                PLB
.394d9f		6b		rtl		                RTL
.394da0						DOS_RTCCREATE
.394da0		8b		phb		                PHB
.394da1		0b		phd		                PHD
.394da2		08		php		                PHP
.394da3		48		pha		                PHA             ; begin setdbr macro
.394da4		08		php		                PHP
.394da5		e2 20		sep #$20	                SEP #$20        ; set A short
.394da7		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394da9		48		pha		                PHA
.394daa		ab		plb		                PLB
.394dab		28		plp		                PLP
.394dac		68		pla		                PLA             ; end setdbr macro
.394dad		48		pha		                PHA             ; begin setdp macro
.394dae		08		php		                PHP
.394daf		c2 20		rep #$20	                REP #$20        ; set A long
.394db1		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394db4		5b		tcd		                TCD
.394db5		28		plp		                PLP
.394db6		68		pla		                PLA             ; end setdp macro
.394db7		c2 10		rep #$10	                REP #$10        ; set X long
.394db9		e2 20		sep #$20	                SEP #$20        ; set A short
.394dbb		af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn off the updates to the clock
.394dbf		09 08		ora #$08	                ORA #%00001000
.394dc1		8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.394dc5		af 0f 08 af	lda $af080f	                LDA @l RTC_CENTURY
.394dc9		85 29		sta $0349	                STA DOS_TEMP+1
.394dcb		af 0a 08 af	lda $af080a	                LDA @l RTC_YEAR             ; Get the year
.394dcf		85 28		sta $0348	                STA DOS_TEMP
.394dd1		c2 20		rep #$20	                REP #$20        ; set A long
.394dd3		a5 28		lda $0348	                LDA DOS_TEMP
.394dd5		22 23 4d 39	jsl $394d23	                JSL BCD2BIN                 ; Convert it to binary
.394dd9		85 28		sta $0348	                STA DOS_TEMP
.394ddb		38		sec		                SEC                         ; Year is relative to 1980
.394ddc		e9 bc 07	sbc #$07bc	                SBC #1980
.394ddf		c2 20		rep #$20	                REP #$20        ; set A long
.394de1		0a		asl a		                ASL A
.394de2		0a		asl a		                ASL A
.394de3		0a		asl a		                ASL A
.394de4		0a		asl a		                ASL A
.394de5		0a		asl a		                ASL A
.394de6		0a		asl a		                ASL A
.394de7		0a		asl a		                ASL A
.394de8		0a		asl a		                ASL A
.394de9		0a		asl a		                ASL A
.394dea		29 00 fe	and #$fe00	                AND #$FE00
.394ded		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.394df0		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394df2		e2 20		sep #$20	                SEP #$20        ; set A short
.394df4		af 09 08 af	lda $af0809	                LDA @l RTC_MONTH            ; Get the month
.394df8		c2 20		rep #$20	                REP #$20        ; set A long
.394dfa		29 ff 00	and #$00ff	                AND #$00FF
.394dfd		22 23 4d 39	jsl $394d23	                JSL BCD2BIN                 ; Convert it to binary
.394e01		29 ff 00	and #$00ff	                AND #$00FF                  ; Move the year to bits 15 - 9
.394e04		0a		asl a		                ASL A
.394e05		0a		asl a		                ASL A
.394e06		0a		asl a		                ASL A
.394e07		0a		asl a		                ASL A
.394e08		0a		asl a		                ASL A
.394e09		29 e0 01	and #$01e0	                AND #$01E0                  ; Make sure only the month is covered
.394e0c		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.394e0f		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.394e11		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394e13		e2 20		sep #$20	                SEP #$20        ; set A short
.394e15		af 06 08 af	lda $af0806	                LDA @l RTC_DAY              ; Get the day
.394e19		c2 20		rep #$20	                REP #$20        ; set A long
.394e1b		29 ff 00	and #$00ff	                AND #$00FF
.394e1e		22 23 4d 39	jsl $394d23	                JSL BCD2BIN                 ; Convert it to binary
.394e22		29 1f 00	and #$001f	                AND #$001F                  ; Make sure only the day is covered
.394e25		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.394e28		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.394e2a		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394e2c		e2 20		sep #$20	                SEP #$20        ; set A short
.394e2e		af 04 08 af	lda $af0804	                LDA @l RTC_HRS              ; Get the hour
.394e32		29 1f		and #$1f	                AND #$1F                    ; Trim AM/PM bit
.394e34		c2 20		rep #$20	                REP #$20        ; set A long
.394e36		29 ff 00	and #$00ff	                AND #$00FF
.394e39		22 23 4d 39	jsl $394d23	                JSL BCD2BIN                 ; Convert it to binary
.394e3d		c2 20		rep #$20	                REP #$20        ; set A long
.394e3f		0a		asl a		                ASL A
.394e40		0a		asl a		                ASL A
.394e41		0a		asl a		                ASL A
.394e42		0a		asl a		                ASL A
.394e43		0a		asl a		                ASL A
.394e44		0a		asl a		                ASL A
.394e45		0a		asl a		                ASL A
.394e46		0a		asl a		                ASL A
.394e47		0a		asl a		                ASL A
.394e48		0a		asl a		                ASL A
.394e49		0a		asl a		                ASL A
.394e4a		29 00 f8	and #$f800	                AND #$F800
.394e4d		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.394e50		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394e52		e2 20		sep #$20	                SEP #$20        ; set A short
.394e54		af 02 08 af	lda $af0802	                LDA @l RTC_MIN              ; Get the minute
.394e58		c2 20		rep #$20	                REP #$20        ; set A long
.394e5a		29 ff 00	and #$00ff	                AND #$00FF
.394e5d		22 23 4d 39	jsl $394d23	                JSL BCD2BIN                 ; Convert it to binary
.394e61		c2 20		rep #$20	                REP #$20        ; set A long
.394e63		0a		asl a		                ASL A
.394e64		0a		asl a		                ASL A
.394e65		0a		asl a		                ASL A
.394e66		0a		asl a		                ASL A
.394e67		0a		asl a		                ASL A
.394e68		29 e0 07	and #$07e0	                AND #$07E0
.394e6b		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.394e6e		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.394e70		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394e72		e2 20		sep #$20	                SEP #$20        ; set A short
.394e74		af 00 08 af	lda $af0800	                LDA @l RTC_SEC              ; Get the second
.394e78		c2 20		rep #$20	                REP #$20        ; set A long
.394e7a		29 ff 00	and #$00ff	                AND #$00FF
.394e7d		22 23 4d 39	jsl $394d23	                JSL BCD2BIN                 ; Convert it to binary
.394e81		c2 20		rep #$20	                REP #$20        ; set A long
.394e83		29 1f 00	and #$001f	                AND #$001F
.394e86		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.394e89		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.394e8b		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394e8d		af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn on the updates again
.394e91		29 f7 00	and #$00f7	                AND #%11110111
.394e94		8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.394e98		28		plp		                PLP
.394e99		2b		pld		                PLD
.394e9a		ab		plb		                PLB
.394e9b		6b		rtl		                RTL
.394e9c						DOS_CREATE
.394e9c		8b		phb		                PHB
.394e9d		0b		phd		                PHD
.394e9e		08		php		                PHP
.394e9f		48		pha		                PHA             ; begin setdbr macro
.394ea0		08		php		                PHP
.394ea1		e2 20		sep #$20	                SEP #$20        ; set A short
.394ea3		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394ea5		48		pha		                PHA
.394ea6		ab		plb		                PLB
.394ea7		28		plp		                PLP
.394ea8		68		pla		                PLA             ; end setdbr macro
.394ea9		48		pha		                PHA             ; begin setdp macro
.394eaa		08		php		                PHP
.394eab		c2 20		rep #$20	                REP #$20        ; set A long
.394ead		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394eb0		5b		tcd		                TCD
.394eb1		28		plp		                PLP
.394eb2		68		pla		                PLA             ; end setdp macro
.394eb3		c2 30		rep #$30	                REP #$30        ; set A&X long
.394eb5		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; DOS_TEMP := DOS_FD_PTR->PATH
.394eb8		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394eba		85 28		sta $0348	                STA DOS_TEMP
.394ebc		c8		iny		                INY
.394ebd		c8		iny		                INY
.394ebe		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394ec0		85 2a		sta $034a	                STA DOS_TEMP+2
.394ec2		e2 20		sep #$20	                SEP #$20        ; set A short
.394ec4		a0 00 00	ldy #$0000	                LDY #0
.394ec7		a2 00 00	ldx #$0000	                LDX #0
.394eca		b7 28		lda [$0348],y	path_loop       LDA [DOS_TEMP],Y                ; Get a byte of the path
.394ecc		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X             ; ... save it to the path buffer
.394ece		f0 04		beq $394ed4	                BEQ find_file                   ; If it's NULL, we're done
.394ed0		e8		inx		                INX
.394ed1		c8		iny		                INY
.394ed2		80 f6		bra $394eca	                BRA path_loop
.394ed4		22 83 45 39	jsl $394583	find_file       JSL DOS_PARSE_PATH
.394ed8		22 1b 46 39	jsl $39461b	                JSL DOS_FINDFILE
.394edc		90 07		bcc $394ee5	                BCC set_device
.394ede		e2 20		sep #$20	                SEP #$20        ; set A short
.394ee0		a9 0b		lda #$0b	                LDA #DOS_ERR_FILEEXISTS
.394ee2		82 d2 00	brl $394fb7	                BRL ret_failure
.394ee5						set_device
.394ee5		e2 20		sep #$20	                SEP #$20        ; set A short
.394ee7		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.394eea		a5 01		lda $0321	                LDA BIOS_DEV
.394eec		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394eee						validate_name
.394eee		22 62 49 39	jsl $394962	                JSL DOS_FREECLUS
.394ef2		b0 03		bcs $394ef7	                BCS save_data
.394ef4		82 c4 00	brl $394fbb	                BRL pass_failure
.394ef7						save_data
.394ef7		c2 20		rep #$20	                REP #$20        ; set A long
.394ef9		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER
.394efc		a5 10		lda $0330	                LDA DOS_CLUS_ID             ; DOS_FD_PTR->FIRST_CLUSTER := DOS_CLUS_ID
.394efe		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394f00		c8		iny		                INY
.394f01		c8		iny		                INY
.394f02		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394f04		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394f06		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; DOS_BUFF_PTR := DOS_FD_PTR->BUFFER
.394f09		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394f0b		85 1c		sta $033c	                STA DOS_BUFF_PTR
.394f0d		c8		iny		                INY
.394f0e		c8		iny		                INY
.394f0f		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394f11		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394f13		22 72 44 39	jsl $394472	                JSL DOS_PUTCLUSTER
.394f17		b0 00		bcs $394f19	                BCS find_dir
.394f19						find_dir
.394f19		c2 20		rep #$20	                REP #$20        ; set A long
.394f1b		22 ad 3f 39	jsl $393fad	                JSL DOS_DIRFINDFREE
.394f1f		b0 1a		bcs $394f3b	                BCS set_entry
.394f21		c2 20		rep #$20	                REP #$20        ; set A long
.394f23		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Failed to get the directory entry...
.394f26		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y              ; DOS_CLUS_ID := DOS_FD_PTR->FIRST_CLUSTER
.394f28		85 10		sta $0330	                STA DOS_CLUS_ID
.394f2a		c8		iny		                INY
.394f2b		c8		iny		                INY
.394f2c		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394f2e		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394f30		22 2a 4c 39	jsl $394c2a	                JSL DELCLUSTER32                ; Delete the cluster
.394f34		e2 20		sep #$20	                SEP #$20        ; set A short
.394f36		a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Return that we couldn't read the directory
.394f38		82 7c 00	brl $394fb7	                BRL ret_failure
.394f3b						set_entry
.394f3b		e2 20		sep #$20	                SEP #$20        ; set A short
.394f3d		a0 00 00	ldy #$0000	                LDY #0
.394f40		a9 00		lda #$00	                LDA #0                          ; NULL
.394f42		97 18		sta [$0338],y	copy_dir_loop   STA [DOS_DIR_PTR],Y             ; Save it to the directory cluster
.394f44		c8		iny		                INY
.394f45		c0 20 00	cpy #$0020	                CPY #SIZE(DIRENTRY)
.394f48		d0 f8		bne $394f42	                BNE copy_dir_loop
.394f4a		a0 00 00	ldy #$0000	                LDY #0
.394f4d		b9 3a a0	lda $38a03a,y	name_loop       LDA DOS_SHORT_NAME,Y            ; Copy the name over
.394f50		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394f52		c8		iny		                INY
.394f53		c0 0b 00	cpy #$000b	                CPY #11
.394f56		d0 f5		bne $394f4d	                BNE name_loop
.394f58		c2 20		rep #$20	                REP #$20        ; set A long
.394f5a		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; DOS_DIR_PTR->CLUSTER_L := DOS_FD_PTR->FIRST_CLUSTER[15..0]
.394f5d		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394f5f		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.394f62		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394f64		a0 0c 00	ldy #$000c	                LDY #FILEDESC.FIRST_CLUSTER+2   ; DOS_DIR_PTR->CLUSTER_H := DOS_FD_PTR->FIRST_CLUSTER[31..16]
.394f67		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394f69		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.394f6c		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394f6e		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE              ; DOS_DIR_PTR->SIZE := DOS_FD_PTR->SIZE
.394f71		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394f73		a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE
.394f76		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394f78		a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.394f7b		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394f7d		a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.394f80		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394f82		a9 00 00	lda #$0000	                LDA #0                          ; Force create date-time to 0
.394f85		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; TODO: restore the RTC integration when that is working better.
.394f88		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394f8a		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME
.394f8d		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394f8f		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; DOS_DIR_PTR->CREATE_DATE := DOS_FD_PTR->CREATE_DATE
.394f92		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394f94		a0 10 00	ldy #$0010	                LDY #DIRENTRY.CREATE_DATE
.394f97		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394f99		a0 18 00	ldy #$0018	                LDY #DIRENTRY.MODIFIED_DATE     ; And DOS_DIR_PTR->MODIFIED_DATE
.394f9c		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394f9e		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME       ; DOS_DIR_PTR->CREATE_TIME := DOS_FD_PTR->CREATE_TIME
.394fa1		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394fa3		a0 0e 00	ldy #$000e	                LDY #DIRENTRY.CREATE_TIME
.394fa6		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394fa8		a0 16 00	ldy #$0016	                LDY #DIRENTRY.MODIFIED_TIME     ; And DOS_DIR_PTR->MODIFIED_TIME
.394fab		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394fad		c2 20		rep #$20	                REP #$20        ; set A long
.394faf		22 6b 40 39	jsl $39406b	                JSL DOS_DIRWRITE
.394fb3		b0 0b		bcs $394fc0	                BCS ret_success
.394fb5		80 04		bra $394fbb	                BRA pass_failure
.394fb7						ret_failure
.394fb7		e2 20		sep #$20	                SEP #$20        ; set A short
.394fb9		85 0e		sta $032e	                STA DOS_STATUS
.394fbb		28		plp		pass_failure    PLP
.394fbc		2b		pld		                PLD
.394fbd		ab		plb		                PLB
.394fbe		18		clc		                CLC
.394fbf		6b		rtl		                RTL
.394fc0						ret_success
.394fc0		e2 20		sep #$20	                SEP #$20        ; set A short
.394fc2		64 0e		stz $032e	                STZ DOS_STATUS
.394fc4		28		plp		                PLP
.394fc5		2b		pld		                PLD
.394fc6		ab		plb		                PLB
.394fc7		38		sec		                SEC
.394fc8		6b		rtl		                RTL
.394fc9						DOS_COPYPATH
.394fc9		da		phx		                PHX
.394fca		5a		phy		                PHY
.394fcb		8b		phb		                PHB
.394fcc		0b		phd		                PHD
.394fcd		08		php		                PHP
.394fce		48		pha		                PHA             ; begin setdbr macro
.394fcf		08		php		                PHP
.394fd0		e2 20		sep #$20	                SEP #$20        ; set A short
.394fd2		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394fd4		48		pha		                PHA
.394fd5		ab		plb		                PLB
.394fd6		28		plp		                PLP
.394fd7		68		pla		                PLA             ; end setdbr macro
.394fd8		48		pha		                PHA             ; begin setdp macro
.394fd9		08		php		                PHP
.394fda		c2 20		rep #$20	                REP #$20        ; set A long
.394fdc		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394fdf		5b		tcd		                TCD
.394fe0		28		plp		                PLP
.394fe1		68		pla		                PLA             ; end setdp macro
.394fe2		c2 30		rep #$30	                REP #$30        ; set A&X long
.394fe4		a9 00 00	lda #$0000	                LDA #0                  ; Set the DOS_PATH_BUFF to all zeros
.394fe7		a2 00 00	ldx #$0000	                LDX #0
.394fea		95 e0		sta $0400,x	clr_loop        STA DOS_PATH_BUFF,X
.394fec		e8		inx		                INX
.394fed		e8		inx		                INX
.394fee		e0 00 01	cpx #$0100	                CPX #256
.394ff1		d0 f7		bne $394fea	                BNE clr_loop
.394ff3		a5 20		lda $0340	                LDA DOS_FD_PTR          ; Is the DOS_FD_PTR null?
.394ff5		d0 04		bne $394ffb	                BNE get_path            ; No: attempt to fetch the path
.394ff7		a5 22		lda $0342	                LDA DOS_FD_PTR+2
.394ff9		f0 27		beq $395022	                BEQ done                ; Yes: return an empty buffer
.394ffb		a0 02 00	ldy #$0002	get_path        LDY #FILEDESC.PATH      ; Get the path buffer
.394ffe		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395000		85 28		sta $0348	                STA DOS_TEMP
.395002		c8		iny		                INY
.395003		c8		iny		                INY
.395004		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395006		85 2a		sta $034a	                STA DOS_TEMP+2
.395008		a5 28		lda $0348	                LDA DOS_TEMP            ; Is the path pointer NULL?
.39500a		d0 04		bne $395010	                BNE start_copy          ; No: start copying it
.39500c		a5 2a		lda $034a	                LDA DOS_TEMP+2
.39500e		f0 12		beq $395022	                BEQ done                ; Yes: return an empty buffer
.395010						start_copy
.395010		e2 20		sep #$20	                SEP #$20        ; set A short
.395012		a2 00 00	ldx #$0000	                LDX #0
.395015		a0 00 00	ldy #$0000	                LDY #0
.395018		b7 28		lda [$0348],y	loop            LDA [DOS_TEMP],Y
.39501a		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.39501c		f0 04		beq $395022	                BEQ done
.39501e		e8		inx		                INX
.39501f		c8		iny		                INY
.395020		d0 f6		bne $395018	                BNE loop
.395022		28		plp		done            PLP
.395023		2b		pld		                PLD
.395024		ab		plb		                PLB
.395025		7a		ply		                PLY
.395026		fa		plx		                PLX
.395027		6b		rtl		                RTL

;******  Return to file: src\sdos.asm

.395028						DOS_TEST
.395028		8b		phb		                PHB
.395029		0b		phd		                PHD
.39502a		08		php		                PHP
.39502b		48		pha		                PHA             ; begin setdbr macro
.39502c		08		php		                PHP
.39502d		e2 20		sep #$20	                SEP #$20        ; set A short
.39502f		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395031		48		pha		                PHA
.395032		ab		plb		                PLB
.395033		28		plp		                PLP
.395034		68		pla		                PLA             ; end setdbr macro
.395035		48		pha		                PHA             ; begin setdp macro
.395036		08		php		                PHP
.395037		c2 20		rep #$20	                REP #$20        ; set A long
.395039		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39503c		5b		tcd		                TCD
.39503d		28		plp		                PLP
.39503e		68		pla		                PLA             ; end setdp macro
.39503f		c2 30		rep #$30	                REP #$30        ; set A&X long
.395041		a9 67 50	lda #$5067	                LDA #<>src_file
.395044		8f 64 03 00	sta $000364	                STA @l DOS_STR1_PTR
.395048		a9 39 00	lda #$0039	                LDA #`src_file
.39504b		8f 66 03 00	sta $000366	                STA @l DOS_STR1_PTR+2
.39504f		a9 74 50	lda #$5074	                LDA #<>dst_file
.395052		8f 68 03 00	sta $000368	                STA @l DOS_STR2_PTR
.395056		a9 39 00	lda #$0039	                LDA #`dst_file
.395059		8f 6a 03 00	sta $00036a	                STA @l DOS_STR2_PTR+2
.39505d		22 99 58 39	jsl $395899	                JSL IF_COPY
.395061		b0 00		bcs $395063	                BCS done
.395063		28		plp		done            PLP
.395064		2b		pld		                PLD
.395065		ab		plb		                PLB
.395066		6b		rtl		                RTL
>395067		40 73 3a 68 65 6c 6c 6f		src_file        .null "@s:hello.bas"
>39506f		2e 62 61 73 00
>395074		40 73 3a 68 65 6c 6c 6f		dst_file        .null "@s:hello2.bas"
>39507c		32 2e 62 61 73 00
.395082						IF_OPEN
.395082		da		phx		                PHX
.395083		5a		phy		                PHY
.395084		0b		phd		                PHD
.395085		8b		phb		                PHB
.395086		08		php		                PHP
.395087		48		pha		                PHA             ; begin setdbr macro
.395088		08		php		                PHP
.395089		e2 20		sep #$20	                SEP #$20        ; set A short
.39508b		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39508d		48		pha		                PHA
.39508e		ab		plb		                PLB
.39508f		28		plp		                PLP
.395090		68		pla		                PLA             ; end setdbr macro
.395091		48		pha		                PHA             ; begin setdp macro
.395092		08		php		                PHP
.395093		c2 20		rep #$20	                REP #$20        ; set A long
.395095		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395098		5b		tcd		                TCD
.395099		28		plp		                PLP
.39509a		68		pla		                PLA             ; end setdp macro
.39509b		e2 20		sep #$20	                SEP #$20        ; set A short
.39509d		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Get the status to make sure a open is ok
.3950a0		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3950a2		89 20		bit #$20	                BIT #FD_STAT_OPEN
.3950a4		f0 05		beq $3950ab	                BEQ ok_to_open
.3950a6		a9 0f		lda #$0f	                LDA #DOS_ERR_OPEN               ; If already open: throw an error
.3950a8		82 87 06	brl $395732	                BRL IF_FAILURE
.3950ab		22 c9 4f 39	jsl $394fc9	ok_to_open      JSL DOS_COPYPATH                ; Copy the path to the path buffer
.3950af		22 1b 46 39	jsl $39461b	                JSL DOS_FINDFILE                ; Attempt to find the file
.3950b3		b0 03		bcs $3950b8	                BCS is_found                    ; If OK: we found the file
.3950b5		82 7e 06	brl $395736	                BRL IF_PASSFAILURE              ; Otherwise: pass the failure up the chain
.3950b8						is_found
.3950b8		e2 20		sep #$20	                SEP #$20        ; set A short
.3950ba		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.3950bd		a5 01		lda $0321	                LDA BIOS_DEV
.3950bf		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3950c1		c2 20		rep #$20	                REP #$20        ; set A long
.3950c3		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Set the buffer point to the one provided in the file
.3950c6		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3950c8		85 1c		sta $033c	                STA DOS_BUFF_PTR
.3950ca		c8		iny		                INY
.3950cb		c8		iny		                INY
.3950cc		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3950ce		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3950d0		22 35 44 39	jsl $394435	                JSL DOS_GETCLUSTER              ; Attempt to load the cluster
.3950d4		b0 03		bcs $3950d9	                BCS read_cluster
.3950d6		82 5d 06	brl $395736	                BRL IF_PASSFAILURE
.3950d9		a0 0a 00	ldy #$000a	read_cluster    LDY #FILEDESC.FIRST_CLUSTER     ; Set the first cluster in the file descriptor
.3950dc		a5 10		lda $0330	                LDA DOS_CLUS_ID
.3950de		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3950e0		c8		iny		                INY
.3950e1		c8		iny		                INY
.3950e2		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3950e4		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3950e6		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Set the current cluster in the file descriptor
.3950e9		a5 10		lda $0330	                LDA DOS_CLUS_ID
.3950eb		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3950ed		c8		iny		                INY
.3950ee		c8		iny		                INY
.3950ef		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3950f1		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3950f3		a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE              ; Copy the filesize from the directory entry to the file descriptor
.3950f6		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3950f8		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE
.3950fb		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3950fd		a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.395100		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.395102		a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.395105		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395107		e2 20		sep #$20	                SEP #$20        ; set A short
.395109		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Mark file as open and readable
.39510c		a9 21		lda #$21	                LDA #FD_STAT_OPEN | FD_STAT_READ
.39510e		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.395110		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395112		82 28 06	brl $39573d	                BRL IF_SUCCESS
.395115						IF_CREATE
.395115		da		phx		                PHX
.395116		5a		phy		                PHY
.395117		0b		phd		                PHD
.395118		8b		phb		                PHB
.395119		08		php		                PHP
.39511a		48		pha		                PHA             ; begin setdbr macro
.39511b		08		php		                PHP
.39511c		e2 20		sep #$20	                SEP #$20        ; set A short
.39511e		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395120		48		pha		                PHA
.395121		ab		plb		                PLB
.395122		28		plp		                PLP
.395123		68		pla		                PLA             ; end setdbr macro
.395124		48		pha		                PHA             ; begin setdp macro
.395125		08		php		                PHP
.395126		c2 20		rep #$20	                REP #$20        ; set A long
.395128		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39512b		5b		tcd		                TCD
.39512c		28		plp		                PLP
.39512d		68		pla		                PLA             ; end setdp macro
.39512e		22 9c 4e 39	jsl $394e9c	                JSL DOS_CREATE                  ; Attempt to create the file
.395132		90 18		bcc $39514c	                BCC pass_failure                ; If it fails: pass the failure up the chain
.395134		c2 30		rep #$30	                REP #$30        ; set A&X long
.395136		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Sets the current cluster to 0 to make sure the next write appends
.395139		a9 00 00	lda #$0000	                LDA #0
.39513c		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39513e		c8		iny		                INY
.39513f		c8		iny		                INY
.395140		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395142		e2 20		sep #$20	                SEP #$20        ; set A short
.395144		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS
.395147		a9 22		lda #$22	                LDA #FD_STAT_OPEN | FD_STAT_WRITE   ; Set the file to open and APPEND only
.395149		82 f1 05	brl $39573d	                BRL IF_SUCCESS
.39514c		82 e3 05	brl $395732	pass_failure    BRL IF_FAILURE
.39514f						IF_CLOSE
.39514f		da		phx		                PHX
.395150		5a		phy		                PHY
.395151		0b		phd		                PHD
.395152		8b		phb		                PHB
.395153		08		php		                PHP
.395154		48		pha		                PHA             ; begin setdbr macro
.395155		08		php		                PHP
.395156		e2 20		sep #$20	                SEP #$20        ; set A short
.395158		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39515a		48		pha		                PHA
.39515b		ab		plb		                PLB
.39515c		28		plp		                PLP
.39515d		68		pla		                PLA             ; end setdbr macro
.39515e		48		pha		                PHA             ; begin setdp macro
.39515f		08		php		                PHP
.395160		c2 20		rep #$20	                REP #$20        ; set A long
.395162		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395165		5b		tcd		                TCD
.395166		28		plp		                PLP
.395167		68		pla		                PLA             ; end setdp macro
.395168		e2 20		sep #$20	                SEP #$20        ; set A short
.39516a		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Check to see if we were writing the file
.39516d		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39516f		89 02		bit #$02	                BIT #FD_STAT_WRITE
.395171		f0 09		beq $39517c	                BEQ set_flag                    ; No, just mark it closed
.395173		22 e8 51 39	jsl $3951e8	                JSL IF_WRITE                    ; Attempt to write the cluster
.395177		b0 03		bcs $39517c	                BCS set_flag
.395179		82 ba 05	brl $395736	                BRL IF_PASSFAILURE              ; If there was a problem, pass it up the chain
.39517c		22 37 58 39	jsl $395837	set_flag        JSL IF_FREEFD                   ; Free the file descriptor as well
.395180		82 ba 05	brl $39573d	                BRL IF_SUCCESS
.395183						IF_READ
.395183		da		phx		                PHX
.395184		5a		phy		                PHY
.395185		0b		phd		                PHD
.395186		8b		phb		                PHB
.395187		08		php		                PHP
.395188		48		pha		                PHA             ; begin setdbr macro
.395189		08		php		                PHP
.39518a		e2 20		sep #$20	                SEP #$20        ; set A short
.39518c		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39518e		48		pha		                PHA
.39518f		ab		plb		                PLB
.395190		28		plp		                PLP
.395191		68		pla		                PLA             ; end setdbr macro
.395192		48		pha		                PHA             ; begin setdp macro
.395193		08		php		                PHP
.395194		c2 20		rep #$20	                REP #$20        ; set A long
.395196		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395199		5b		tcd		                TCD
.39519a		28		plp		                PLP
.39519b		68		pla		                PLA             ; end setdp macro
.39519c		c2 10		rep #$10	                REP #$10        ; set X long
.39519e		e2 20		sep #$20	                SEP #$20        ; set A short
.3951a0						get_dev
.3951a0		e2 20		sep #$20	                SEP #$20        ; set A short
.3951a2		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.3951a5		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3951a7		85 01		sta $0321	                STA BIOS_DEV
.3951a9		22 9d 41 39	jsl $39419d	                JSL DOS_MOUNT                   ; Make sure the device is mounted (if needed)
.3951ad		c2 20		rep #$20	                REP #$20        ; set A long
.3951af		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.3951b2		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3951b4		85 10		sta $0330	                STA DOS_CLUS_ID
.3951b6		c8		iny		                INY
.3951b7		c8		iny		                INY
.3951b8		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3951ba		85 12		sta $0332	                STA DOS_CLUS_ID+2
.3951bc		22 49 48 39	jsl $394849	                JSL NEXTCLUSTER                 ; Find the next cluster of the file
.3951c0		90 13		bcc $3951d5	                BCC pass_failure                ; If not OK: pass the failure up the chain
.3951c2		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.3951c5		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3951c7		85 1c		sta $033c	                STA DOS_BUFF_PTR
.3951c9		c8		iny		                INY
.3951ca		c8		iny		                INY
.3951cb		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3951cd		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3951cf		22 35 44 39	jsl $394435	                JSL DOS_GETCLUSTER              ; Get the cluster
.3951d3		b0 03		bcs $3951d8	                BCS ret_success                 ; If ok: return success
.3951d5						pass_failure
.3951d5		82 5e 05	brl $395736	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.3951d8		a0 06 00	ldy #$0006	ret_success     LDY #FILEDESC.CLUSTER           ; Save the new cluster as the file's current cluster
.3951db		a5 10		lda $0330	                LDA DOS_CLUS_ID
.3951dd		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3951df		c8		iny		                INY
.3951e0		c8		iny		                INY
.3951e1		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3951e3		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3951e5		82 55 05	brl $39573d	                BRL IF_SUCCESS
.3951e8						IF_WRITE
.3951e8		da		phx		                PHX
.3951e9		5a		phy		                PHY
.3951ea		0b		phd		                PHD
.3951eb		8b		phb		                PHB
.3951ec		08		php		                PHP
.3951ed		48		pha		                PHA             ; begin setdbr macro
.3951ee		08		php		                PHP
.3951ef		e2 20		sep #$20	                SEP #$20        ; set A short
.3951f1		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3951f3		48		pha		                PHA
.3951f4		ab		plb		                PLB
.3951f5		28		plp		                PLP
.3951f6		68		pla		                PLA             ; end setdbr macro
.3951f7		48		pha		                PHA             ; begin setdp macro
.3951f8		08		php		                PHP
.3951f9		c2 20		rep #$20	                REP #$20        ; set A long
.3951fb		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3951fe		5b		tcd		                TCD
.3951ff		28		plp		                PLP
.395200		68		pla		                PLA             ; end setdp macro
.395201		c2 10		rep #$10	                REP #$10        ; set X long
.395203		e2 20		sep #$20	                SEP #$20        ; set A short
.395205		a0 01 00	ldy #$0001	get_dev         LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.395208		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39520a		85 01		sta $0321	                STA BIOS_DEV
.39520c		22 9d 41 39	jsl $39419d	                JSL DOS_MOUNT                   ; Make sure the device is mounted (if needed)
.395210		c2 20		rep #$20	                REP #$20        ; set A long
.395212		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.395215		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395217		85 1c		sta $033c	                STA DOS_BUFF_PTR
.395219		c8		iny		                INY
.39521a		c8		iny		                INY
.39521b		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39521d		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.39521f		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.395222		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395224		85 10		sta $0330	                STA DOS_CLUS_ID
.395226		c8		iny		                INY
.395227		c8		iny		                INY
.395228		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39522a		85 12		sta $0332	                STA DOS_CLUS_ID+2
.39522c		d0 1a		bne $395248	                BNE rewrite_cluster             ; If the cluster ID <> 0, overwrite it
.39522e		a5 10		lda $0330	                LDA DOS_CLUS_ID
.395230		d0 16		bne $395248	                BNE rewrite_cluster
.395232		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Get the file's first cluster
.395235		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395237		85 10		sta $0330	                STA DOS_CLUS_ID
.395239		c8		iny		                INY
.39523a		c8		iny		                INY
.39523b		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39523d		85 12		sta $0332	                STA DOS_CLUS_ID+2
.39523f		22 6a 4c 39	jsl $394c6a	                JSL DOS_APPENDCLUS              ; Append the cluster
.395243		b0 0c		bcs $395251	                BCS ret_success                 ; If OK: return success
.395245		82 ee 04	brl $395736	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.395248		22 72 44 39	jsl $394472	rewrite_cluster JSL DOS_PUTCLUSTER              ; Over-write the cluster
.39524c		b0 03		bcs $395251	                BCS ret_success                 ; If ok: return success
.39524e		82 e5 04	brl $395736	pass_failure    BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.395251		82 e9 04	brl $39573d	ret_success     BRL IF_SUCCESS
.395254						IF_DIROPEN
.395254		da		phx		                PHX
.395255		5a		phy		                PHY
.395256		0b		phd		                PHD
.395257		8b		phb		                PHB
.395258		08		php		                PHP
.395259		48		pha		                PHA             ; begin setdbr macro
.39525a		08		php		                PHP
.39525b		e2 20		sep #$20	                SEP #$20        ; set A short
.39525d		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39525f		48		pha		                PHA
.395260		ab		plb		                PLB
.395261		28		plp		                PLP
.395262		68		pla		                PLA             ; end setdbr macro
.395263		48		pha		                PHA             ; begin setdp macro
.395264		08		php		                PHP
.395265		c2 20		rep #$20	                REP #$20        ; set A long
.395267		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39526a		5b		tcd		                TCD
.39526b		28		plp		                PLP
.39526c		68		pla		                PLA             ; end setdp macro
.39526d		c2 30		rep #$30	                REP #$30        ; set A&X long
.39526f		22 c9 4f 39	jsl $394fc9	                JSL DOS_COPYPATH            ; Copy the path from the file descriptor to the path buffer
.395273		22 83 45 39	jsl $394583	                JSL DOS_PARSE_PATH          ; Parse the path
.395277		22 9d 41 39	jsl $39419d	                JSL DOS_MOUNT               ; Make sure we've mounted the SDC.
.39527b		b0 03		bcs $395280	                BCS get_root_dir            ; If successful: get the root directory
.39527d		82 b6 04	brl $395736	                BRL IF_PASSFAILURE          ; Otherwise: pass the error up the chain
.395280						get_root_dir
.395280		c2 30		rep #$30	                REP #$30        ; set A&X long
.395282		22 52 3e 39	jsl $393e52	                JSL DOS_DIROPEN
.395286		b0 03		bcs $39528b	                BCS success
.395288		82 ab 04	brl $395736	                BRL IF_PASSFAILURE
.39528b		82 af 04	brl $39573d	success         BRL IF_SUCCESS
.39528e						IF_DIRNEXT
.39528e		5c ec 3e 39	jmp $393eec	                JML DOS_DIRNEXT
.395292						IF_DELETE
.395292		da		phx		                PHX
.395293		5a		phy		                PHY
.395294		0b		phd		                PHD
.395295		8b		phb		                PHB
.395296		08		php		                PHP
.395297		48		pha		                PHA             ; begin setdbr macro
.395298		08		php		                PHP
.395299		e2 20		sep #$20	                SEP #$20        ; set A short
.39529b		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39529d		48		pha		                PHA
.39529e		ab		plb		                PLB
.39529f		28		plp		                PLP
.3952a0		68		pla		                PLA             ; end setdbr macro
.3952a1		48		pha		                PHA             ; begin setdp macro
.3952a2		08		php		                PHP
.3952a3		c2 20		rep #$20	                REP #$20        ; set A long
.3952a5		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3952a8		5b		tcd		                TCD
.3952a9		28		plp		                PLP
.3952aa		68		pla		                PLA             ; end setdp macro
.3952ab		c2 30		rep #$30	                REP #$30        ; set A&X long
.3952ad		22 1b 46 39	jsl $39461b	                JSL DOS_FINDFILE
.3952b1		b0 03		bcs $3952b6	                BCS get_first_clus
.3952b3		82 80 04	brl $395736	                BRL IF_PASSFAILURE
.3952b6						get_first_clus
.3952b6		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.3952b9		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3952bb		85 10		sta $0330	                STA DOS_CLUS_ID
.3952bd		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.3952c0		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3952c2		85 12		sta $0332	                STA DOS_CLUS_ID+2
.3952c4		a5 10		lda $0330	                LDA DOS_CLUS_ID
.3952c6		8d 2a a0	sta $38a02a	                STA DOS_CURR_CLUS
.3952c9		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3952cb		8d 2c a0	sta $38a02c	                STA DOS_CURR_CLUS+2
.3952ce		22 49 48 39	jsl $394849	del_loop        JSL NEXTCLUSTER
.3952d2		90 2f		bcc $395303	                BCC del_one
.3952d4		a5 10		lda $0330	                LDA DOS_CLUS_ID
.3952d6		8d 2e a0	sta $38a02e	                STA DOS_NEXT_CLUS
.3952d9		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3952db		8d 30 a0	sta $38a030	                STA DOS_NEXT_CLUS+2
.3952de		ad 2a a0	lda $38a02a	                LDA DOS_CURR_CLUS
.3952e1		85 10		sta $0330	                STA DOS_CLUS_ID
.3952e3		ad 2c a0	lda $38a02c	                LDA DOS_CURR_CLUS+2
.3952e6		85 12		sta $0332	                STA DOS_CLUS_ID+2
.3952e8		22 2a 4c 39	jsl $394c2a	                JSL DELCLUSTER32
.3952ec		b0 03		bcs $3952f1	                BCS go_next
.3952ee		82 45 04	brl $395736	                BRL IF_PASSFAILURE
.3952f1						go_next
.3952f1		ad 2e a0	lda $38a02e	                LDA DOS_NEXT_CLUS
.3952f4		85 10		sta $0330	                STA DOS_CLUS_ID
.3952f6		8d 2a a0	sta $38a02a	                STA DOS_CURR_CLUS
.3952f9		ad 30 a0	lda $38a030	                LDA DOS_NEXT_CLUS+2
.3952fc		85 12		sta $0332	                STA DOS_CLUS_ID+2
.3952fe		8d 2c a0	sta $38a02c	                STA DOS_CURR_CLUS+2
.395301		80 cb		bra $3952ce	                BRA del_loop
.395303						del_one
.395303		ad 2a a0	lda $38a02a	                LDA DOS_CURR_CLUS
.395306		85 10		sta $0330	                STA DOS_CLUS_ID
.395308		ad 2c a0	lda $38a02c	                LDA DOS_CURR_CLUS+2
.39530b		85 12		sta $0332	                STA DOS_CLUS_ID+2
.39530d		22 84 4b 39	jsl $394b84	                JSL DELCLUSTER
.395311		b0 03		bcs $395316	                BCS free_dir_entry
.395313		82 20 04	brl $395736	                BRL IF_PASSFAILURE
.395316						free_dir_entry
.395316		e2 20		sep #$20	                SEP #$20        ; set A short
.395318		a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME         ; Flag the directory entry as deleted
.39531b		a9 e5		lda #$e5	                LDA #DOS_DIR_ENT_UNUSED
.39531d		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.39531f		22 6b 40 39	jsl $39406b	                JSL DOS_DIRWRITE                ; Write the directory entry back
.395323		b0 03		bcs $395328	                BCS ret_success
.395325		82 0e 04	brl $395736	                BRL IF_PASSFAILURE
.395328		82 12 04	brl $39573d	ret_success     BRL IF_SUCCESS
.39532b						IF_DIRREAD
.39532b		da		phx		                PHX
.39532c		5a		phy		                PHY
.39532d		0b		phd		                PHD
.39532e		8b		phb		                PHB
.39532f		08		php		                PHP
.395330		48		pha		                PHA             ; begin setdbr macro
.395331		08		php		                PHP
.395332		e2 20		sep #$20	                SEP #$20        ; set A short
.395334		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395336		48		pha		                PHA
.395337		ab		plb		                PLB
.395338		28		plp		                PLP
.395339		68		pla		                PLA             ; end setdbr macro
.39533a		48		pha		                PHA             ; begin setdp macro
.39533b		08		php		                PHP
.39533c		c2 20		rep #$20	                REP #$20        ; set A long
.39533e		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395341		5b		tcd		                TCD
.395342		28		plp		                PLP
.395343		68		pla		                PLA             ; end setdp macro
.395344		c2 30		rep #$30	                REP #$30        ; set A&X long
.395346		22 1b 46 39	jsl $39461b	                JSL DOS_FINDFILE
.39534a		b0 03		bcs $39534f	                BCS success
.39534c		82 e3 03	brl $395732	                BRL IF_FAILURE
.39534f		82 eb 03	brl $39573d	success         BRL IF_SUCCESS
.395352						IF_DIRWRITE
.395352		5c 6b 40 39	jmp $39406b	                JML DOS_DIRWRITE
.395356						IF_LOAD
.395356		da		phx		                PHX
.395357		5a		phy		                PHY
.395358		0b		phd		                PHD
.395359		8b		phb		                PHB
.39535a		08		php		                PHP
.39535b		48		pha		                PHA             ; begin setdbr macro
.39535c		08		php		                PHP
.39535d		e2 20		sep #$20	                SEP #$20        ; set A short
.39535f		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395361		48		pha		                PHA
.395362		ab		plb		                PLB
.395363		28		plp		                PLP
.395364		68		pla		                PLA             ; end setdbr macro
.395365		48		pha		                PHA             ; begin setdp macro
.395366		08		php		                PHP
.395367		c2 20		rep #$20	                REP #$20        ; set A long
.395369		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39536c		5b		tcd		                TCD
.39536d		28		plp		                PLP
.39536e		68		pla		                PLA             ; end setdp macro
.39536f		c2 30		rep #$30	                REP #$30        ; set A&X long
.395371		22 82 50 39	jsl $395082	                JSL IF_OPEN
.395375		b0 03		bcs $39537a	                BCS setup                   ; If success: start setting things up
.395377		82 bc 03	brl $395736	                BRL IF_PASSFAILURE          ; Otherwise: pass the failure up the chain
.39537a						setup
.39537a		c2 20		rep #$20	                REP #$20        ; set A long
.39537c		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE          ; Record the size of the file in DOS_FILE_SIZE
.39537f		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395381		85 2c		sta $034c	                STA DOS_FILE_SIZE
.395383		c8		iny		                INY
.395384		c8		iny		                INY
.395385		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395387		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.395389		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; Set up the source pointer
.39538c		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39538e		85 30		sta $0350	                STA DOS_SRC_PTR
.395390		c8		iny		                INY
.395391		c8		iny		                INY
.395392		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395394		85 32		sta $0352	                STA DOS_SRC_PTR+2
.395396		a5 36		lda $0356	                LDA DOS_DST_PTR+2           ; Is there a destination address in RAM?
.395398		c9 40 00	cmp #$0040	                CMP #$0040
.39539b		b0 04		bcs $3953a1	                BGE load_by_type            ; No: try to load it by type
.39539d		5c e7 55 39	jmp $3955e7	                JML IF_LOADRAW              ; Otherwise, load it to the supplied destination
.3953a1		a0 08 00	ldy #$0008	load_by_type    LDY #8                      ; Point to the first extension byte
.3953a4		a2 00 00	ldx #$0000	                LDX #0                      ; and the first byte of the table
.3953a7						type_loop
.3953a7		e2 20		sep #$20	                SEP #$20        ; set A short
.3953a9		bf ed 53 39	lda $3953ed,x	                LDA LOAD_TYPE_TABLE,X       ; Get 1st extension character of the entry
.3953ad		f0 37		beq $3953e6	                BEQ no_match                ; If NULL... we didn't get a match
.3953af		d9 3a a0	cmp $38a03a,y	                CMP DOS_SHORT_NAME,Y        ; Get the character of the extension
.3953b2		d0 28		bne $3953dc	                BNE next_entry              ; If they don't match, try the next entry
.3953b4		bf ee 53 39	lda $3953ee,x	                LDA LOAD_TYPE_TABLE+1,X     ; Get 2nd extension character of the entry
.3953b8		d9 3b a0	cmp $38a03b,y	                CMP DOS_SHORT_NAME+1,Y      ; Get the 2nd character of the extension
.3953bb		d0 1f		bne $3953dc	                BNE next_entry              ; If they don't match, try the next entry
.3953bd		bf ef 53 39	lda $3953ef,x	                LDA LOAD_TYPE_TABLE+2,X     ; Get 3rd extension character of the entry
.3953c1		d9 3c a0	cmp $38a03c,y	                CMP DOS_SHORT_NAME+2,Y      ; Get the 3rd character of the extension
.3953c4		d0 16		bne $3953dc	                BNE next_entry              ; If they don't match, try the next entry
.3953c6		c2 20		rep #$20	                REP #$20        ; set A long
.3953c8		bf f0 53 39	lda $3953f0,x	                LDA LOAD_TYPE_TABLE+3,X     ; Get the low word of the address
.3953cc		85 28		sta $0348	                STA DOS_TEMP                ; Save it to the jump vector
.3953ce		e2 20		sep #$20	                SEP #$20        ; set A short
.3953d0		bf f2 53 39	lda $3953f2,x	                LDA LOAD_TYPE_TABLE+5,X     ; Get the high byte of the address
.3953d4		85 2a		sta $034a	                STA DOS_TEMP+2              ; Save it to the jump vector
.3953d6		a2 00 00	ldx #$0000	                LDX #0
.3953d9		dc 48 03	jmp [$0348]	                JML [DOS_TEMP]              ; Jump to the loading routine
.3953dc						next_entry
.3953dc		c2 30		rep #$30	                REP #$30        ; set A&X long
.3953de		8a		txa		                TXA
.3953df		18		clc		                CLC
.3953e0		69 06 00	adc #$0006	                ADC #6
.3953e3		aa		tax		                TAX
.3953e4		80 c1		bra $3953a7	                BRA type_loop               ; And check it against the file
.3953e6						no_match
.3953e6		e2 20		sep #$20	                SEP #$20        ; set A short
.3953e8		a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC         ; Return an not-executable error
.3953ea		82 45 03	brl $395732	                BRL IF_FAILURE
>3953ed		50 47 58			LOAD_TYPE_TABLE .text "PGX"                 ; "PGX" --> IF_LOADPGX
>3953f0		fa 53				                .word <>IF_LOADPGX
>3953f2		39				                .byte `IF_LOADPGX
>3953f3		50 47 5a			                .text "PGZ"                 ; "PGZ" --> IF_LOADPGZ
>3953f6		82 54				                .word <>IF_LOADPGZ
>3953f8		39				                .byte `IF_LOADPGZ
>3953f9		00				                .byte 0
.3953fa						IF_LOADPGX
.3953fa		c2 10		rep #$10	                REP #$10        ; set X long
.3953fc		e2 20		sep #$20	                SEP #$20        ; set A short
.3953fe		a0 00 00	ldy #$0000	                LDY #0
.395401		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Check for "PGX" signature
.395403		c9 50		cmp #$50	                CMP #'P'
.395405		d0 15		bne $39541c	                BNE fail_sig                        ; If not found, fail
.395407		c8		iny		                INY
.395408		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.39540a		c9 47		cmp #$47	                CMP #'G'
.39540c		d0 0e		bne $39541c	                BNE fail_sig
.39540e		c8		iny		                INY
.39540f		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.395411		c9 58		cmp #$58	                CMP #'X'
.395413		d0 07		bne $39541c	                BNE fail_sig
.395415		c8		iny		                INY                                 ; Check for CPU and version code ($01 for 65816)
.395416		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.395418		c9 01		cmp #$01	                CMP #$01
.39541a		f0 17		beq $395433	                BEQ get_dest                        ; All passes: go to get the destination address
.39541c		a9 10		lda #$10	fail_sig        LDA #DOS_ERR_PGXSIG                 ; Fail with a PGXSIG error code
.39541e		22 32 57 39	jsl $395732	                JSL IF_FAILURE
.395422						adjust_size
.395422		c2 20		rep #$20	                REP #$20        ; set A long
.395424		38		sec		                SEC                                 ; Subtract the 8 bytes of the header from the file size
.395425		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.395427		e9 08 00	sbc #$0008	                SBC #8
.39542a		85 2c		sta $034c	                STA DOS_FILE_SIZE
.39542c		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.39542e		e9 00 00	sbc #$0000	                SBC #0
.395431		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.395433						get_dest
.395433		c2 20		rep #$20	                REP #$20        ; set A long
.395435		c8		iny		                INY
.395436		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get low word of destination address
.395438		85 34		sta $0354	                STA DOS_DST_PTR                     ; And save it to the destination pointer
.39543a		85 3c		sta $035c	                STA DOS_RUN_PTR                     ; And save it to the RUN pointer
.39543c		c8		iny		                INY
.39543d		c8		iny		                INY
.39543e		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get high word of destination address
.395440		85 36		sta $0356	                STA DOS_DST_PTR+2
.395442		85 3e		sta $035e	                STA DOS_RUN_PTR+2
.395444		c8		iny		                INY                                 ; Point to the first data byte
.395445		c8		iny		                INY
.395446						copy_loop
.395446		e2 20		sep #$20	                SEP #$20        ; set A short
.395448		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Read a byte from the file
.39544a		87 34		sta [$0354]	                STA [DOS_DST_PTR]                   ; Write it to the destination
.39544c		c2 20		rep #$20	                REP #$20        ; set A long
.39544e		e6 34		inc $0354	                INC DOS_DST_PTR                     ; Move to the next destination location
.395450		d0 02		bne $395454	                BNE dec_file_size
.395452		e6 36		inc $0356	                INC DOS_DST_PTR+2
.395454		38		sec		dec_file_size   SEC                                 ; Count down the number of bytes to read
.395455		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.395457		e9 01 00	sbc #$0001	                SBC #1
.39545a		85 2c		sta $034c	                STA DOS_FILE_SIZE
.39545c		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.39545e		e9 00 00	sbc #$0000	                SBC #0
.395461		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.395463		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Are we at the end of the file?
.395465		d0 04		bne $39546b	                BNE next_byte
.395467		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.395469		f0 14		beq $39547f	                BEQ done                            ; Yes: we're done
.39546b		c8		iny		next_byte       INY                                 ; Otherwise, move to the next source location
.39546c		cc 0e a0	cpy $38a00e	                CPY CLUSTER_SIZE                    ; Are we at the end of the cluster?
.39546f		d0 d5		bne $395446	                BNE copy_loop                       ; No: keep copying
.395471		22 4d 49 39	jsl $39494d	                JSL DOS_READNEXT                    ; Yes: Load the next cluster
.395475		b0 03		bcs $39547a	                BCS next_cluster
.395477		82 bc 02	brl $395736	                BRL IF_PASSFAILURE                  ; If failed: pass that up the chain
.39547a		a0 00 00	ldy #$0000	next_cluster    LDY #0
.39547d		80 c7		bra $395446	                BRA copy_loop                       ; Go back to copying
.39547f		82 bb 02	brl $39573d	done            BRL IF_SUCCESS
.395482						IF_LOADPGZ
.395482		48		pha		                PHA             ; begin setdbr macro
.395483		08		php		                PHP
.395484		e2 20		sep #$20	                SEP #$20        ; set A short
.395486		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395488		48		pha		                PHA
.395489		ab		plb		                PLB
.39548a		28		plp		                PLP
.39548b		68		pla		                PLA             ; end setdbr macro
.39548c		48		pha		                PHA             ; begin setdp macro
.39548d		08		php		                PHP
.39548e		c2 20		rep #$20	                REP #$20        ; set A long
.395490		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395493		5b		tcd		                TCD
.395494		28		plp		                PLP
.395495		68		pla		                PLA             ; end setdp macro
.395496		c2 30		rep #$30	                REP #$30        ; set A&X long
.395498		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE                  ; Get the file size
.39549b		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39549d		85 2c		sta $034c	                STA DOS_FILE_SIZE                   ; And save it to DOS_FILE_SIZE
.39549f		c8		iny		                INY
.3954a0		c8		iny		                INY
.3954a1		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3954a3		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.3954a5		e2 20		sep #$20	                SEP #$20        ; set A short
.3954a7		a0 00 00	ldy #$0000	                LDY #0                              ; Starting at the beginning of the file
.3954aa		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Check for "Z" signature
.3954ac		c9 5a		cmp #$5a	                CMP #'Z'
.3954ae		f0 06		beq $3954b6	                BEQ start_block                     ; If found, get the starting address
.3954b0		a9 19		lda #$19	fail_sig        LDA #DOS_ERR_PGZSIG                 ; Fail with a PGZSIG error code
.3954b2		22 32 57 39	jsl $395732	                JSL IF_FAILURE
.3954b6		c8		iny		start_block     INY
.3954b7						get_addr
.3954b7		e2 20		sep #$20	                SEP #$20        ; set A short
.3954b9		22 3c 55 39	jsl $39553c	                JSL IF_FILE_EOF                     ; Check if EOF
.3954bd		90 03		bcc $3954c2	                BCC get_addr_lo
.3954bf		82 7b 02	brl $39573d	done            BRL IF_SUCCESS                      ; If so: we're done
.3954c2		22 7a 55 39	jsl $39557a	get_addr_lo     JSL IF_READ_NEXT                    ; Get the next byte
.3954c6		90 47		bcc $39550f	                BCC ret_failure                     ; Got an error: pass it on
.3954c8		85 34		sta $0354	                STA DOS_DST_PTR                     ; Save it as the low byte of the destination address
.3954ca		22 7a 55 39	jsl $39557a	                JSL IF_READ_NEXT                    ; Get the next byte
.3954ce		90 3f		bcc $39550f	                BCC ret_failure                     ; Got an error: pass it on
.3954d0		85 35		sta $0355	                STA DOS_DST_PTR+1                   ; Save it as the middle byte of the destination address
.3954d2		22 7a 55 39	jsl $39557a	                JSL IF_READ_NEXT                    ; Get the next byte
.3954d6		90 37		bcc $39550f	                BCC ret_failure                     ; Got an error: pass it on
.3954d8		85 36		sta $0356	                STA DOS_DST_PTR+2                   ; Save it as the high byte of the destination address
.3954da		22 7a 55 39	jsl $39557a	                JSL IF_READ_NEXT                    ; Get the next byte
.3954de		90 2f		bcc $39550f	                BCC ret_failure                     ; Got an error: pass it on
.3954e0		85 50		sta $0370	                STA DOS_BLOCK_SIZE                  ; Save it as the low byte of the block size
.3954e2		22 7a 55 39	jsl $39557a	                JSL IF_READ_NEXT                    ; Get the next byte
.3954e6		90 27		bcc $39550f	                BCC ret_failure                     ; Got an error: pass it on
.3954e8		85 51		sta $0371	                STA DOS_BLOCK_SIZE+1                ; Save it as the middle byte of the block size
.3954ea		22 7a 55 39	jsl $39557a	                JSL IF_READ_NEXT                    ; Get the next byte
.3954ee		90 1f		bcc $39550f	                BCC ret_failure                     ; Got an error: pass it on
.3954f0		85 52		sta $0372	                STA DOS_BLOCK_SIZE+2                ; Save it as the high byte of the block size
.3954f2		64 53		stz $0373	                STZ DOS_BLOCK_SIZE+3                ; And MSB is 0
.3954f4		a5 50		lda $0370	                LDA DOS_BLOCK_SIZE                  ; If DOS_BLOCK_SIZE <> 0, we have data to load
.3954f6		d0 1a		bne $395512	                BNE read_data
.3954f8		a5 51		lda $0371	                LDA DOS_BLOCK_SIZE+1
.3954fa		d0 16		bne $395512	                BNE read_data
.3954fc		a5 52		lda $0372	                LDA DOS_BLOCK_SIZE+2
.3954fe		d0 12		bne $395512	                BNE read_data
.395500		a5 34		lda $0354	                LDA DOS_DST_PTR                     ; If DOS_BLOCK_SIZE = 0, we have the run address
.395502		85 3c		sta $035c	                STA DOS_RUN_PTR
.395504		a5 35		lda $0355	                LDA DOS_DST_PTR+1
.395506		85 3d		sta $035d	                STA DOS_RUN_PTR+1
.395508		a5 36		lda $0356	                LDA DOS_DST_PTR+2
.39550a		85 3e		sta $035e	                STA DOS_RUN_PTR+2
.39550c		82 2e 02	brl $39573d	                BRL IF_SUCCESS                      ; And finish
.39550f		82 20 02	brl $395732	ret_failure     BRL IF_FAILURE                      ; If there was an error, pass it up to the caller
.395512						read_data
.395512		e2 20		sep #$20	                SEP #$20        ; set A short
.395514		22 7a 55 39	jsl $39557a	                JSL IF_READ_NEXT                    ; Get the next byte
.395518		90 f5		bcc $39550f	                BCC ret_failure
.39551a		87 34		sta [$0354]	                STA [DOS_DST_PTR]                   ; Save it to the destination address
.39551c		c2 20		rep #$20	                REP #$20        ; set A long
.39551e		e6 34		inc $0354	                INC DOS_DST_PTR                     ; Increment the destination pointer
.395520		d0 02		bne $395524	                BNE dec_block_size
.395522		e6 36		inc $0356	                INC DOS_DST_PTR+2
.395524		38		sec		dec_block_size  SEC
.395525		a5 50		lda $0370	                LDA DOS_BLOCK_SIZE
.395527		e9 01 00	sbc #$0001	                SBC #1
.39552a		85 50		sta $0370	                STA DOS_BLOCK_SIZE
.39552c		a5 52		lda $0372	                LDA DOS_BLOCK_SIZE+2
.39552e		e9 00 00	sbc #$0000	                SBC #0
.395531		85 52		sta $0372	                STA DOS_BLOCK_SIZE+2
.395533		d0 dd		bne $395512	                BNE read_data
.395535		a5 50		lda $0370	                LDA DOS_BLOCK_SIZE                  ; Is block size = 0?
.395537		d0 d9		bne $395512	                BNE read_data                       ; No: keep reading data
.395539		82 7b ff	brl $3954b7	                BRL get_addr                        ; Yes: check for another block
.39553c						IF_FILE_EOF
.39553c		48		pha		                PHA
.39553d		5a		phy		                PHY
.39553e		8b		phb		                PHB
.39553f		0b		phd		                PHD
.395540		08		php		                PHP
.395541		48		pha		                PHA             ; begin setdbr macro
.395542		08		php		                PHP
.395543		e2 20		sep #$20	                SEP #$20        ; set A short
.395545		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395547		48		pha		                PHA
.395548		ab		plb		                PLB
.395549		28		plp		                PLP
.39554a		68		pla		                PLA             ; end setdbr macro
.39554b		48		pha		                PHA             ; begin setdp macro
.39554c		08		php		                PHP
.39554d		c2 20		rep #$20	                REP #$20        ; set A long
.39554f		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395552		5b		tcd		                TCD
.395553		28		plp		                PLP
.395554		68		pla		                PLA             ; end setdp macro
.395555		e2 20		sep #$20	                SEP #$20        ; set A short
.395557		c2 10		rep #$10	                REP #$10        ; set X long
.395559		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS                ; Get the file's status
.39555c		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y                  ; Restore the index
.39555e		89 80		bit #$80	                BIT #FD_STAT_EOF                    ; Check if the file is EOF
.395560		f0 07		beq $395569	                BEQ chk_file_size                   ; If not: check the file size
.395562		28		plp		ret_true        PLP                                 ; Return true
.395563		2b		pld		                PLD
.395564		ab		plb		                PLB
.395565		7a		ply		                PLY
.395566		68		pla		                PLA
.395567		38		sec		                SEC
.395568		6b		rtl		                RTL
.395569						chk_file_size
.395569		c2 20		rep #$20	                REP #$20        ; set A long
.39556b		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; if DOS_FILE_SIZE = 0
.39556d		d0 04		bne $395573	                BNE ret_false
.39556f		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.395571		f0 ef		beq $395562	                BEQ ret_true
.395573		28		plp		ret_false       PLP                                 ; Return false
.395574		2b		pld		                PLD
.395575		ab		plb		                PLB
.395576		7a		ply		                PLY
.395577		68		pla		                PLA
.395578		18		clc		                CLC
.395579		6b		rtl		                RTL
.39557a						IF_READ_NEXT
.39557a		8b		phb		                PHB
.39557b		0b		phd		                PHD
.39557c		08		php		                PHP
.39557d		48		pha		                PHA             ; begin setdbr macro
.39557e		08		php		                PHP
.39557f		e2 20		sep #$20	                SEP #$20        ; set A short
.395581		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395583		48		pha		                PHA
.395584		ab		plb		                PLB
.395585		28		plp		                PLP
.395586		68		pla		                PLA             ; end setdbr macro
.395587		48		pha		                PHA             ; begin setdp macro
.395588		08		php		                PHP
.395589		c2 20		rep #$20	                REP #$20        ; set A long
.39558b		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39558e		5b		tcd		                TCD
.39558f		28		plp		                PLP
.395590		68		pla		                PLA             ; end setdp macro
.395591		e2 20		sep #$20	                SEP #$20        ; set A short
.395593		c2 10		rep #$10	                REP #$10        ; set X long
.395595		22 3c 55 39	jsl $39553c	                JSL IF_FILE_EOF                     ; Check if the file is EOF
.395599		90 06		bcc $3955a1	                BCC get_byte                        ; If not: get the next byte
.39559b		a9 18		lda #$18	                LDA #DOS_ERR_EOF                    ; If so: return an EOF error
.39559d		85 0e		sta $032e	                STA DOS_STATUS
.39559f		80 3f		bra $3955e0	                BRA ret_failure
.3955a1		b7 30		lda [$0350],y	get_byte        LDA [DOS_SRC_PTR],Y                 ; Read the byte...
.3955a3		48		pha		                PHA                                 ; And save it for the moment
.3955a4		c2 20		rep #$20	                REP #$20        ; set A long
.3955a6		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Decrement the file size...
.3955a8		d0 02		bne $3955ac	                BNE dec_low
.3955aa		c6 2e		dec $034e	                DEC DOS_FILE_SIZE+2
.3955ac		c6 2c		dec $034c	dec_low         DEC DOS_FILE_SIZE
.3955ae		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Are we at the end of the file?
.3955b0		d0 04		bne $3955b6	                BNE next_byte
.3955b2		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.3955b4		f0 1b		beq $3955d1	                BEQ ret_eof                         ; Yes: mark the file as EOF
.3955b6						next_byte
.3955b6		e2 20		sep #$20	                SEP #$20        ; set A short
.3955b8		c8		iny		                INY                                 ; Move to the next byte
.3955b9		c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE                ; Have we reached the end of the sector?
.3955bc		90 0b		bcc $3955c9	                BLT ret_success                     ; No: just return the byte
.3955be		22 4d 49 39	jsl $39494d	                JSL DOS_READNEXT                    ; Yes: read the next sector
.3955c2		b0 02		bcs $3955c6	                BCS reset_index
.3955c4		80 1a		bra $3955e0	                BRA ret_failure                     ; If failure: pass the error up the chain
.3955c6		a0 00 00	ldy #$0000	reset_index     LDY #0                              ; Reset the index
.3955c9						ret_success
.3955c9		e2 20		sep #$20	                SEP #$20        ; set A short
.3955cb		68		pla		                PLA                                 ; Return the byte retrieved
.3955cc		28		plp		                PLP
.3955cd		2b		pld		                PLD
.3955ce		ab		plb		                PLB
.3955cf		38		sec		                SEC
.3955d0		6b		rtl		                RTL
.3955d1						ret_eof
.3955d1		e2 20		sep #$20	                SEP #$20        ; set A short
.3955d3		5a		phy		                PHY                                 ; Save the index
.3955d4		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS                ; Get the file's status
.3955d7		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3955d9		09 80		ora #$80	                ORA #FD_STAT_EOF                    ; Mark it EOF
.3955db		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y                  ; And update the status
.3955dd		7a		ply		                PLY                                 ; Restore the index
.3955de		80 e9		bra $3955c9	                BRA ret_success
.3955e0						ret_failure
.3955e0		e2 20		sep #$20	                SEP #$20        ; set A short
.3955e2		28		plp		                PLP
.3955e3		2b		pld		                PLD
.3955e4		ab		plb		                PLB
.3955e5		18		clc		                CLC
.3955e6		6b		rtl		                RTL
.3955e7						IF_LOADRAW
.3955e7		c2 30		rep #$30	                REP #$30        ; set A&X long
.3955e9		a0 00 00	ldy #$0000	copy_cluster    LDY #0
.3955ec						copy_loop
.3955ec		e2 20		sep #$20	                SEP #$20        ; set A short
.3955ee		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y         ; Copy byte from cluster to destination
.3955f0		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.3955f2		c2 20		rep #$20	                REP #$20        ; set A long
.3955f4		38		sec		                SEC                         ; Count down the number of bytes left
.3955f5		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.3955f7		e9 01 00	sbc #$0001	                SBC #1
.3955fa		85 2c		sta $034c	                STA DOS_FILE_SIZE
.3955fc		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.3955fe		e9 00 00	sbc #$0000	                SBC #0
.395601		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.395603		d0 04		bne $395609	                BNE continue
.395605		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.395607		f0 1b		beq $395624	                BEQ close_file              ; If not: we're done
.395609		c8		iny		continue        INY
.39560a		cc 0e a0	cpy $38a00e	                CPY CLUSTER_SIZE            ; Are we done with the cluster?
.39560d		d0 dd		bne $3955ec	                BNE copy_loop               ; No: keep processing the bytes
.39560f		18		clc		                CLC                         ; Advance the destination pointer to the next chunk of memory
.395610		a5 34		lda $0354	                LDA DOS_DST_PTR
.395612		6d 0e a0	adc $38a00e	                ADC CLUSTER_SIZE
.395615		85 34		sta $0354	                STA DOS_DST_PTR
.395617		a5 36		lda $0356	                LDA DOS_DST_PTR+2
.395619		69 00 00	adc #$0000	                ADC #0
.39561c		85 36		sta $0356	                STA DOS_DST_PTR+2
.39561e		22 83 51 39	jsl $395183	                JSL IF_READ                 ; Yes: load the next cluster
.395622		b0 c5		bcs $3955e9	                BCS copy_cluster            ; And start copying it
.395624						close_file
.395624		82 16 01	brl $39573d	ret_success     BRL IF_SUCCESS
.395627						IF_NULLBUFFER
.395627		5a		phy		                PHY
.395628		8b		phb		                PHB
.395629		0b		phd		                PHD
.39562a		08		php		                PHP
.39562b		48		pha		                PHA             ; begin setdbr macro
.39562c		08		php		                PHP
.39562d		e2 20		sep #$20	                SEP #$20        ; set A short
.39562f		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395631		48		pha		                PHA
.395632		ab		plb		                PLB
.395633		28		plp		                PLP
.395634		68		pla		                PLA             ; end setdbr macro
.395635		48		pha		                PHA             ; begin setdp macro
.395636		08		php		                PHP
.395637		c2 20		rep #$20	                REP #$20        ; set A long
.395639		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39563c		5b		tcd		                TCD
.39563d		28		plp		                PLP
.39563e		68		pla		                PLA             ; end setdp macro
.39563f		c2 30		rep #$30	                REP #$30        ; set A&X long
.395641		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.395644		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395646		85 28		sta $0348	                STA DOS_TEMP
.395648		c8		iny		                INY
.395649		c8		iny		                INY
.39564a		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39564c		85 2a		sta $034a	                STA DOS_TEMP+2
.39564e		a0 00 00	ldy #$0000	                LDY #0
.395651		a9 00 00	lda #$0000	                LDA #0
.395654		97 28		sta [$0348],y	loop            STA [DOS_TEMP],Y
.395656		c8		iny		                INY
.395657		c8		iny		                INY
.395658		c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE
.39565b		d0 f7		bne $395654	                BNE loop
.39565d		28		plp		                PLP
.39565e		2b		pld		                PLD
.39565f		ab		plb		                PLB
.395660		7a		ply		                PLY
.395661		6b		rtl		                RTL
.395662						IF_COPY2BUFF
.395662		5a		phy		                PHY
.395663		8b		phb		                PHB
.395664		0b		phd		                PHD
.395665		08		php		                PHP
.395666		48		pha		                PHA             ; begin setdbr macro
.395667		08		php		                PHP
.395668		e2 20		sep #$20	                SEP #$20        ; set A short
.39566a		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39566c		48		pha		                PHA
.39566d		ab		plb		                PLB
.39566e		28		plp		                PLP
.39566f		68		pla		                PLA             ; end setdbr macro
.395670		48		pha		                PHA             ; begin setdp macro
.395671		08		php		                PHP
.395672		c2 20		rep #$20	                REP #$20        ; set A long
.395674		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395677		5b		tcd		                TCD
.395678		28		plp		                PLP
.395679		68		pla		                PLA             ; end setdp macro
.39567a		c2 30		rep #$30	                REP #$30        ; set A&X long
.39567c		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.39567f		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395681		85 28		sta $0348	                STA DOS_TEMP
.395683		c8		iny		                INY
.395684		c8		iny		                INY
.395685		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395687		85 2a		sta $034a	                STA DOS_TEMP+2
.395689		a0 00 00	ldy #$0000	                LDY #0
.39568c						copy_loop
.39568c		e2 20		sep #$20	                SEP #$20        ; set A short
.39568e		a7 30		lda [$0350]	                LDA [DOS_SRC_PTR]           ; Copy a byte
.395690		97 28		sta [$0348],y	                STA [DOS_TEMP],Y
.395692		c2 20		rep #$20	                REP #$20        ; set A long
.395694		e6 30		inc $0350	                INC DOS_SRC_PTR             ; Advance the source pointer
.395696		d0 02		bne $39569a	                BNE adv_dest
.395698		e6 32		inc $0352	                INC DOS_SRC_PTR+2
.39569a		c8		iny		adv_dest        INY                         ; Count it
.39569b		c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE        ; Have we reached the limit?
.39569e		f0 0c		beq $3956ac	                BEQ done                    ; Yes: we're done
.3956a0		a5 30		lda $0350	                LDA DOS_SRC_PTR             ; Check if we copied the last byte
.3956a2		c5 38		cmp $0358	                CMP DOS_END_PTR
.3956a4		d0 e6		bne $39568c	                BNE copy_loop               ; No: keep copying
.3956a6		a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.3956a8		c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.3956aa		d0 e0		bne $39568c	                BNE copy_loop
.3956ac		28		plp		done            PLP
.3956ad		2b		pld		                PLD
.3956ae		ab		plb		                PLB
.3956af		7a		ply		                PLY
.3956b0		6b		rtl		                RTL
.3956b1						IF_SAVE
.3956b1		da		phx		                PHX
.3956b2		5a		phy		                PHY
.3956b3		0b		phd		                PHD
.3956b4		8b		phb		                PHB
.3956b5		08		php		                PHP
.3956b6		48		pha		                PHA             ; begin setdbr macro
.3956b7		08		php		                PHP
.3956b8		e2 20		sep #$20	                SEP #$20        ; set A short
.3956ba		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3956bc		48		pha		                PHA
.3956bd		ab		plb		                PLB
.3956be		28		plp		                PLP
.3956bf		68		pla		                PLA             ; end setdbr macro
.3956c0		48		pha		                PHA             ; begin setdp macro
.3956c1		08		php		                PHP
.3956c2		c2 20		rep #$20	                REP #$20        ; set A long
.3956c4		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3956c7		5b		tcd		                TCD
.3956c8		28		plp		                PLP
.3956c9		68		pla		                PLA             ; end setdp macro
.3956ca		c2 30		rep #$30	                REP #$30        ; set A&X long
.3956cc		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE := DOS_END_PTR - DOS_SRC_PTR
.3956cf		38		sec		                SEC
.3956d0		a5 38		lda $0358	                LDA DOS_END_PTR
.3956d2		e5 30		sbc $0350	                SBC DOS_SRC_PTR
.3956d4		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3956d6		c8		iny		                INY
.3956d7		c8		iny		                INY
.3956d8		a5 3a		lda $035a	                LDA DOS_END_PTR+2
.3956da		e5 32		sbc $0352	                SBC DOS_SRC_PTR+2
.3956dc		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3956de		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE++
.3956e1		18		clc		                CLC
.3956e2		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3956e4		69 01 00	adc #$0001	                ADC #1
.3956e7		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3956e9		90 09		bcc $3956f4	                BCC first_block
.3956eb		c8		iny		                INY
.3956ec		c8		iny		                INY
.3956ed		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3956ef		69 00 00	adc #$0000	                ADC #0
.3956f2		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3956f4		22 27 56 39	jsl $395627	first_block     JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.3956f8		22 62 56 39	jsl $395662	                JSL IF_COPY2BUFF        ; Copy first (at most) 512 bytes of data to FD buffer
.3956fc		22 15 51 39	jsl $395115	                JSL IF_CREATE           ; Create file.
.395700		b0 03		bcs $395705	                BCS check_for_end
.395702		82 31 00	brl $395736	                BRL IF_PASSFAILURE      ; If we couldn't create the file, pass the failure up
.395705		a5 30		lda $0350	check_for_end   LDA DOS_SRC_PTR         ; Check if we copied the last byte
.395707		c5 38		cmp $0358	                CMP DOS_END_PTR
.395709		d0 06		bne $395711	                BNE next_block
.39570b		a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.39570d		c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.39570f		f0 1d		beq $39572e	                BEQ done                ; Yes: we're done
.395711		22 27 56 39	jsl $395627	next_block      JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.395715		22 62 56 39	jsl $395662	                JSL IF_COPY2BUFF        ; Copy next (at most) 512 bytes of data to FD buffer
.395719		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER   ; Make sure the CLUSTER is 0 to force an append
.39571c		a9 00 00	lda #$0000	                LDA #0
.39571f		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395721		c8		iny		                INY
.395722		c8		iny		                INY
.395723		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395725		22 e8 51 39	jsl $3951e8	                JSL IF_WRITE            ; Append to the file
.395729		b0 da		bcs $395705	                BCS check_for_end       ; And try again
.39572b		82 08 00	brl $395736	                BRL IF_PASSFAILURE      ; If we couldn't update the file, pass the failure up
.39572e		5c 3d 57 39	jmp $39573d	done            JML IF_SUCCESS
.395732						IF_FAILURE
.395732		e2 20		sep #$20	                SEP #$20        ; set A short
.395734		85 0e		sta $032e	                STA DOS_STATUS
.395736		28		plp		IF_PASSFAILURE  PLP
.395737		18		clc		                CLC
.395738		ab		plb		                PLB
.395739		2b		pld		                PLD
.39573a		7a		ply		                PLY
.39573b		fa		plx		                PLX
.39573c		6b		rtl		                RTL
.39573d						IF_SUCCESS
.39573d		e2 20		sep #$20	                SEP #$20        ; set A short
.39573f		64 00		stz $0320	                STZ BIOS_STATUS
.395741		64 0e		stz $032e	                STZ DOS_STATUS
.395743		28		plp		                PLP
.395744		38		sec		                SEC
.395745		ab		plb		                PLB
.395746		2b		pld		                PLD
.395747		7a		ply		                PLY
.395748		fa		plx		                PLX
.395749		6b		rtl		                RTL
.39574a						IF_RUN
.39574a		da		phx		                PHX
.39574b		5a		phy		                PHY
.39574c		0b		phd		                PHD
.39574d		8b		phb		                PHB
.39574e		08		php		                PHP
.39574f		48		pha		                PHA             ; begin setdbr macro
.395750		08		php		                PHP
.395751		e2 20		sep #$20	                SEP #$20        ; set A short
.395753		a9 00		lda #$00	                LDA #0
.395755		48		pha		                PHA
.395756		ab		plb		                PLB
.395757		28		plp		                PLP
.395758		68		pla		                PLA             ; end setdbr macro
.395759		48		pha		                PHA             ; begin setdp macro
.39575a		08		php		                PHP
.39575b		c2 20		rep #$20	                REP #$20        ; set A long
.39575d		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395760		5b		tcd		                TCD
.395761		28		plp		                PLP
.395762		68		pla		                PLA             ; end setdp macro
.395763		e2 20		sep #$20	                SEP #$20        ; set A short
.395765		c2 10		rep #$10	                REP #$10        ; set X long
.395767		a9 00		lda #$00	                LDA #0                                  ; Zero out the file descriptor
.395769		a2 00 00	ldx #$0000	                LDX #0
.39576c		9f 00 ad 38	sta $38ad00,x	clr_fd_loop     STA @l DOS_SPARE_FD,X
.395770		e8		inx		                INX
.395771		e0 20 00	cpx #$0020	                CPX #SIZE(FILEDESC)
.395774		d0 f6		bne $39576c	                BNE clr_fd_loop
.395776		c2 20		rep #$20	                REP #$20        ; set A long
.395778		a9 00 ab	lda #$ab00	                LDA #<>DOS_SPARE_SECTOR                 ; Set the buffer for the file descriptor
.39577b		8f 0e ad 38	sta $38ad0e	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER
.39577f		a9 38 00	lda #$0038	                LDA #`DOS_SPARE_SECTOR
.395782		8f 10 ad 38	sta $38ad10	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER+2
.395786		a5 40		lda $0360	                LDA DOS_RUN_PARAM                        ; Set the path for the file descriptor
.395788		8f 02 ad 38	sta $38ad02	                STA @l DOS_SPARE_FD+FILEDESC.PATH
.39578c		a5 42		lda $0362	                LDA DOS_RUN_PARAM+2
.39578e		8f 04 ad 38	sta $38ad04	                STA @l DOS_SPARE_FD+FILEDESC.PATH+2
.395792		a9 00 00	lda #$0000	                LDA #0                                  ; Clear the run pointer
.395795		85 3c		sta $035c	                STA DOS_RUN_PTR                         ; This is used to check that we loaded an executable binary
.395797		85 3e		sta $035e	                STA DOS_RUN_PTR+2
.395799		a9 00 ad	lda #$ad00	                LDA #<>DOS_SPARE_FD
.39579c		85 20		sta $0340	                STA DOS_FD_PTR
.39579e		a9 38 00	lda #$0038	                LDA #`DOS_SPARE_FD
.3957a1		85 22		sta $0342	                STA DOS_FD_PTR+2
.3957a3		a9 ff ff	lda #$ffff	                LDA #$FFFF                              ; We want to load to the address provided by the file
.3957a6		8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.3957aa		8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.3957ae		22 18 11 00	jsl $001118	                JSL F_LOAD                              ; Try to load the file
.3957b2		b0 03		bcs $3957b7	                BCS chk_execute
.3957b4		82 7f ff	brl $395736	                BRL IF_PASSFAILURE                      ; On error: pass failure up the chain
.3957b7						chk_execute
.3957b7		c2 20		rep #$20	                REP #$20        ; set A long
.3957b9		a5 3c		lda $035c	                LDA DOS_RUN_PTR                         ; Check to see if we got a startup address back
.3957bb		d0 0b		bne $3957c8	                BNE try_execute                         ; If so: call it
.3957bd		a5 3e		lda $035e	                LDA DOS_RUN_PTR+2
.3957bf		d0 07		bne $3957c8	                BNE try_execute
.3957c1		e2 20		sep #$20	                SEP #$20        ; set A short
.3957c3		a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC                     ; If not: return an error that it's not executable
.3957c5		82 6a ff	brl $395732	                BRL IF_FAILURE
.3957c8						try_execute
.3957c8		e2 20		sep #$20	                SEP #$20        ; set A short
.3957ca		a5 42		lda $0362	                LDA DOS_RUN_PARAM+2
.3957cc		48		pha		                PHA
.3957cd		a5 41		lda $0361	                LDA DOS_RUN_PARAM+1
.3957cf		48		pha		                PHA
.3957d0		a5 40		lda $0360	                LDA DOS_RUN_PARAM
.3957d2		48		pha		                PHA
.3957d3		a9 5c		lda #$5c	                LDA #$5C                                ; Write a JML opcode
.3957d5		85 3b		sta $035b	                STA DOS_RUN_PTR-1
.3957d7		22 5b 03 00	jsl $00035b	                JSL DOS_RUN_PTR-1                       ; And call to it
.3957db		e2 20		sep #$20	                SEP #$20        ; set A short
.3957dd		68		pla		                PLA                                     ; Remove the path and parameters string from the stack
.3957de		68		pla		                PLA
.3957df		68		pla		                PLA
.3957e0		82 5a ff	brl $39573d	                BRL IF_SUCCESS                          ; Return success
.3957e3						IF_ALLOCFD
.3957e3		da		phx		                PHX
.3957e4		5a		phy		                PHY
.3957e5		0b		phd		                PHD
.3957e6		8b		phb		                PHB
.3957e7		08		php		                PHP
.3957e8		48		pha		                PHA             ; begin setdbr macro
.3957e9		08		php		                PHP
.3957ea		e2 20		sep #$20	                SEP #$20        ; set A short
.3957ec		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3957ee		48		pha		                PHA
.3957ef		ab		plb		                PLB
.3957f0		28		plp		                PLP
.3957f1		68		pla		                PLA             ; end setdbr macro
.3957f2		48		pha		                PHA             ; begin setdp macro
.3957f3		08		php		                PHP
.3957f4		c2 20		rep #$20	                REP #$20        ; set A long
.3957f6		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3957f9		5b		tcd		                TCD
.3957fa		28		plp		                PLP
.3957fb		68		pla		                PLA             ; end setdp macro
.3957fc		c2 10		rep #$10	                REP #$10        ; set X long
.3957fe		a2 00 00	ldx #$0000	                LDX #0                              ; Point to the first file descriptor
.395801						chk_fd
.395801		e2 20		sep #$20	                SEP #$20        ; set A short
.395803		bd 20 ad	lda $38ad20,x	                LDA @w DOS_FILE_DESCS,X             ; Check the file descriptor's status
.395806		89 10		bit #$10	                BIT #FD_STAT_ALLOC                  ; Is the file descriptor allocated?
.395808		f0 14		beq $39581e	                BEQ found                           ; No: flag and return the found descriptor
.39580a						next_fd
.39580a		c2 20		rep #$20	                REP #$20        ; set A long
.39580c		8a		txa		                TXA                                 ; Yes: Move to the next file descriptor
.39580d		18		clc		                CLC
.39580e		69 20 00	adc #$0020	                ADC #SIZE(FILEDESC)
.395811		aa		tax		                TAX
.395812		e0 00 01	cpx #$0100	                CPX #SIZE(FILEDESC) * DOS_FD_MAX    ; Are we out of file descriptors?
.395815		90 ea		bcc $395801	                BLT chk_fd                          ; No: check this new file descriptor
.395817		e2 20		sep #$20	                SEP #$20        ; set A short
.395819		a9 16		lda #$16	                LDA #DOS_ERR_NOFD                   ; Yes: Return failure (no file descriptors available)
.39581b		82 14 ff	brl $395732	                BRL IF_FAILURE
.39581e		a9 10		lda #$10	found           LDA #FD_STAT_ALLOC                  ; No: Set the ALLOC bit
.395820		9d 20 ad	sta $38ad20,x	                STA @w DOS_FILE_DESCS,X             ; And store it in the file descriptor's status
.395823		c2 20		rep #$20	                REP #$20        ; set A long
.395825		8a		txa		                TXA
.395826		18		clc		                CLC
.395827		69 20 ad	adc #$ad20	                ADC #<>DOS_FILE_DESCS
.39582a		85 20		sta $0340	                STA @b DOS_FD_PTR
.39582c		a9 38 00	lda #$0038	                LDA #`DOS_FILE_DESCS
.39582f		69 00 00	adc #$0000	                ADC #0
.395832		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395834		82 06 ff	brl $39573d	                BRL IF_SUCCESS                      ; Return this file descriptor
.395837						IF_FREEFD
.395837		da		phx		                PHX
.395838		5a		phy		                PHY
.395839		0b		phd		                PHD
.39583a		8b		phb		                PHB
.39583b		08		php		                PHP
.39583c		48		pha		                PHA             ; begin setdbr macro
.39583d		08		php		                PHP
.39583e		e2 20		sep #$20	                SEP #$20        ; set A short
.395840		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395842		48		pha		                PHA
.395843		ab		plb		                PLB
.395844		28		plp		                PLP
.395845		68		pla		                PLA             ; end setdbr macro
.395846		48		pha		                PHA             ; begin setdp macro
.395847		08		php		                PHP
.395848		c2 20		rep #$20	                REP #$20        ; set A long
.39584a		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39584d		5b		tcd		                TCD
.39584e		28		plp		                PLP
.39584f		68		pla		                PLA             ; end setdp macro
.395850		e2 20		sep #$20	                SEP #$20        ; set A short
.395852		c2 10		rep #$10	                REP #$10        ; set X long
.395854		a9 00		lda #$00	                LDA #0
.395856		87 20		sta [$0340]	                STA [DOS_FD_PTR]
.395858		82 e2 fe	brl $39573d	                BRL IF_SUCCESS
.39585b						DOS_SRC2DST
.39585b		da		phx		                PHX
.39585c		5a		phy		                PHY
.39585d		0b		phd		                PHD
.39585e		8b		phb		                PHB
.39585f		08		php		                PHP
.395860		48		pha		                PHA             ; begin setdp macro
.395861		08		php		                PHP
.395862		c2 20		rep #$20	                REP #$20        ; set A long
.395864		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395867		5b		tcd		                TCD
.395868		28		plp		                PLP
.395869		68		pla		                PLA             ; end setdp macro
.39586a		c2 30		rep #$30	                REP #$30        ; set A&X long
.39586c		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.39586f		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.395871		aa		tax		                TAX                                     ; X := source buffer address
.395872		b7 34		lda [$0354],y	                LDA [DOS_DST_PTR],Y
.395874		a8		tay		                TAY                                     ; Y := destination buffer address
.395875		e2 20		sep #$20	                SEP #$20        ; set A short
.395877		a9 38		lda #$38	                LDA #`DOS_FILE_BUFFS
.395879		48		pha		                PHA
.39587a		ab		plb		                PLB
.39587b		c2 20		rep #$20	                REP #$20        ; set A long
.39587d		a9 00 02	lda #$0200	                LDA #DOS_SECTOR_SIZE                    ; A := the size of the buffers
.395880		f0 11		beq $395893	loop            BEQ done
.395882		48		pha		                PHA
.395883		e2 20		sep #$20	                SEP #$20        ; set A short
.395885		bd 00 00	lda $380000,x	                LDA #0,B,X
.395888		99 00 00	sta $380000,y	                STA #0,B,Y
.39588b		c2 20		rep #$20	                REP #$20        ; set A long
.39588d		68		pla		                PLA
.39588e		3a		dec a		                DEC A
.39588f		e8		inx		                INX
.395890		c8		iny		                INY
.395891		80 ed		bra $395880	                BRA loop
.395893		28		plp		done            PLP
.395894		ab		plb		                PLB
.395895		2b		pld		                PLD
.395896		7a		ply		                PLY
.395897		fa		plx		                PLX
.395898		6b		rtl		                RTL
.395899						IF_COPY
.395899		da		phx		                PHX
.39589a		5a		phy		                PHY
.39589b		0b		phd		                PHD
.39589c		8b		phb		                PHB
.39589d		08		php		                PHP
.39589e		48		pha		                PHA             ; begin setdbr macro
.39589f		08		php		                PHP
.3958a0		e2 20		sep #$20	                SEP #$20        ; set A short
.3958a2		a9 00		lda #$00	                LDA #0
.3958a4		48		pha		                PHA
.3958a5		ab		plb		                PLB
.3958a6		28		plp		                PLP
.3958a7		68		pla		                PLA             ; end setdbr macro
.3958a8		48		pha		                PHA             ; begin setdp macro
.3958a9		08		php		                PHP
.3958aa		c2 20		rep #$20	                REP #$20        ; set A long
.3958ac		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3958af		5b		tcd		                TCD
.3958b0		28		plp		                PLP
.3958b1		68		pla		                PLA             ; end setdp macro
.3958b2		22 e3 57 39	jsl $3957e3	                JSL IF_ALLOCFD                  ; Allocate an FD for the source
.3958b6		b0 03		bcs $3958bb	                BCS set_src_path
.3958b8		82 7b fe	brl $395736	                BRL IF_PASSFAILURE              ; If failed: pass the failure up the chain
.3958bb						set_src_path
.3958bb		c2 30		rep #$30	                REP #$30        ; set A&X long
.3958bd		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; Set the source path
.3958c0		a5 44		lda $0364	                LDA @b DOS_STR1_PTR
.3958c2		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3958c4		c8		iny		                INY
.3958c5		c8		iny		                INY
.3958c6		a5 46		lda $0366	                LDA @b DOS_STR1_PTR+2
.3958c8		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3958ca						alloc_dest
.3958ca		c2 30		rep #$30	                REP #$30        ; set A&X long
.3958cc		a5 20		lda $0340	                LDA @b DOS_FD_PTR               ; set DOS_SRC_PTR to the file descriptor pointer
.3958ce		85 30		sta $0350	                STA @b DOS_SRC_PTR
.3958d0		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.3958d2		85 32		sta $0352	                STA @b DOS_SRC_PTR+2
.3958d4		22 e3 57 39	jsl $3957e3	                JSL IF_ALLOCFD                  ; Allocate an FD for the destination
.3958d8		b0 0f		bcs $3958e9	                BCS set_paths                   ; If everything is ok... start setting the paths
.3958da		a5 30		lda $0350	err_free_src_fd LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.3958dc		85 20		sta $0340	                STA @b DOS_FD_PTR
.3958de		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.3958e0		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.3958e2		22 37 58 39	jsl $395837	                JSL IF_FREEFD                   ; And free it
.3958e6		82 4d fe	brl $395736	                BRL IF_PASSFAILURE              ; Pass the failure up the chain
.3958e9						set_paths
.3958e9		c2 30		rep #$30	                REP #$30        ; set A&X long
.3958eb		a5 20		lda $0340	                LDA @b DOS_FD_PTR               ; Set DOS_DST_PTR to the file descriptor pointer for the destination
.3958ed		85 34		sta $0354	                STA @b DOS_DST_PTR
.3958ef		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.3958f1		85 36		sta $0356	                STA @b DOS_DST_PTR+2
.3958f3		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; Set the destination path
.3958f6		a5 48		lda $0368	                LDA @b DOS_STR2_PTR
.3958f8		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.3958fa		c8		iny		                INY
.3958fb		c8		iny		                INY
.3958fc		a5 4a		lda $036a	                LDA @b DOS_STR2_PTR+2
.3958fe		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395900		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395902		85 20		sta $0340	                STA @b DOS_FD_PTR
.395904		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395906		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395908		22 f0 10 00	jsl $0010f0	                JSL F_OPEN                      ; Try to open the file
.39590c		b0 10		bcs $39591e	                BCS src_open                    ; If success, work with the openned file
.39590e		00		brk #		                BRK
.39590f		a5 34		lda $0354	err_free_dst_fd LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395911		85 20		sta $0340	                STA @b DOS_FD_PTR
.395913		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395915		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395917		22 37 58 39	jsl $395837	                JSL IF_FREEFD                   ; And free it
.39591b		82 bc ff	brl $3958da	                BRL err_free_src_fd             ; Free the source file descriptor
.39591e		a0 12 00	ldy #$0012	src_open        LDY #FILEDESC.SIZE              ; destination file size := source file size
.395921		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.395923		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395925		c8		iny		                INY
.395926		c8		iny		                INY
.395927		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.395929		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.39592b		22 5b 58 39	jsl $39585b	                JSL DOS_SRC2DST                 ; Copy the first sector's worth of data
.39592f		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395931		85 20		sta $0340	                STA @b DOS_FD_PTR
.395933		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395935		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395937		22 f4 10 00	jsl $0010f4	                JSL F_CREATE                    ; Attempt to create the file
.39593b		b0 0f		bcs $39594c	                BCS read_next                   ; If sucessful, try to get the next cluster
.39593d		a5 30		lda $0350	err_src_close   LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.39593f		85 20		sta $0340	                STA @b DOS_FD_PTR
.395941		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395943		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395945		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the source file (maybe not really necessary)
.395949		82 c3 ff	brl $39590f	                BRL err_free_dst_fd             ; Free the file descriptors and return an error
.39594c						read_next
.39594c		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.39594e		85 20		sta $0340	                STA @b DOS_FD_PTR
.395950		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395952		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395954		22 00 11 00	jsl $001100	                JSL F_READ                      ; Attempt to read the next sector of the source
.395958		b0 19		bcs $395973	                BCS copy2dest                   ; If successful, copy the sector
.39595a		e2 20		sep #$20	                SEP #$20        ; set A short
.39595c		a5 0e		lda $032e	                LDA @b DOS_STATUS
.39595e		c9 0a		cmp #$0a	                CMP #DOS_ERR_NOCLUSTER          ; Are there no more clusters in the source file?
.395960		f0 32		beq $395994	                BEQ file_copied                 ; Yes: we're done copying
.395962						err_dest_close
.395962		c2 20		rep #$20	                REP #$20        ; set A long
.395964		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395966		85 20		sta $0340	                STA @b DOS_FD_PTR
.395968		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.39596a		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.39596c		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Attempt to close the destination
.395970		82 ca ff	brl $39593d	                BRL err_src_close               ; Close the source and throw an error
.395973						copy2dest
.395973		22 5b 58 39	jsl $39585b	                JSL DOS_SRC2DST                 ; Copy the source sector to the destination sector
.395977		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; destination sector cluster ID := 0 to append
.39597a		a9 00 00	lda #$0000	                LDA #0
.39597d		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.39597f		c8		iny		                INY
.395980		c8		iny		                INY
.395981		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395983		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395985		85 20		sta $0340	                STA @b DOS_FD_PTR
.395987		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395989		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.39598b		22 fc 10 00	jsl $0010fc	                JSL F_WRITE                     ; Attempt to write the destionation sector to the disk
.39598f		90 d1		bcc $395962	                BCC err_dest_close              ; If error: close all files and throw the error
.395991		82 b8 ff	brl $39594c	                BRL read_next                   ; Otherwise: repeat the loop
.395994						file_copied
.395994		c2 20		rep #$20	                REP #$20        ; set A long
.395996		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395998		85 20		sta $0340	                STA @b DOS_FD_PTR
.39599a		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.39599c		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.39599e		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the destination
.3959a2		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.3959a4		85 20		sta $0340	                STA @b DOS_FD_PTR
.3959a6		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.3959a8		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.3959aa		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the source
.3959ae		82 8c fd	brl $39573d	                BRL IF_SUCCESS

;******  Return to file: src\kernel.asm


;******  Processing file: src\uart.asm

=$af18f8					    UART1_BASE = $AF18F8        ; Base address for UART 1 (COM1) in the C256 Foenix U (only 1 Serial port)
=$af18f8					    UART2_BASE = $AF18F8
=$00						UART_TRHB = $00             ; Transmit/Receive Hold Buffer
=$00						UART_DLL = UART_TRHB        ; Divisor Latch Low Byte
=$01						UART_DLH = $01              ; Divisor Latch High Byte
=$01						UART_IER = UART_DLH         ; Interupt Enable Register
=$02						UART_FCR = $02              ; FIFO Control Register
=$02						UART_IIR = UART_FCR         ; Interupt Indentification Register
=$03						UART_LCR = $03              ; Line Control Register
=$04						UART_MCR = $04              ; Modem Control REgister
=$05						UART_LSR = $05              ; Line Status Register
=$06						UART_MSR = $06              ; Modem Status Register
=$07						UART_SR = $07               ; Scratch Register
=$20						UINT_LOW_POWER = $20        ; Enable Low Power Mode (16750)
=$10						UINT_SLEEP_MODE = $10       ; Enable Sleep Mode (16750)
=$08						UINT_MODEM_STATUS = $08     ; Enable Modem Status Interrupt
=$04						UINT_LINE_STATUS = $04      ; Enable Receiver Line Status Interupt
=$02						UINT_THR_EMPTY = $02        ; Enable Transmit Holding Register Empty interrupt
=$01						UINT_DATA_AVAIL = $01       ; Enable Recieve Data Available interupt
=$80						IIR_FIFO_ENABLED = $80      ; FIFO is enabled
=$40						IIR_FIFO_NONFUNC = $40      ; FIFO is not functioning
=$20						IIR_FIFO_64BYTE = $20       ; 64 byte FIFO enabled (16750)
=$00						IIR_MODEM_STATUS = $00      ; Modem Status Interrupt
=$02						IIR_THR_EMPTY = $02         ; Transmit Holding Register Empty Interrupt
=$04						IIR_DATA_AVAIL = $04        ; Data Available Interrupt
=$06						IIR_LINE_STATUS = $06       ; Line Status Interrupt
=$0c						IIR_TIMEOUT = $0C           ; Time-out Interrupt (16550 and later)
=$01						IIR_INTERRUPT_PENDING = $01 ; Interrupt Pending Flag
=$80						LCR_DLB = $80               ; Divisor Latch Access Bit
=$60						LCR_SBE = $60               ; Set Break Enable
=$00						LCR_PARITY_NONE = $00       ; Parity: None
=$08						LCR_PARITY_ODD = $08        ; Parity: Odd
=$18						LCR_PARITY_EVEN = $18       ; Parity: Even
=$28						LCR_PARITY_MARK = $28       ; Parity: Mark
=$38						LCR_PARITY_SPACE = $38      ; Parity: Space
=$00						LCR_STOPBIT_1 = $00         ; One Stop Bit
=$04						LCR_STOPBIT_2 = $04         ; 1.5 or 2 Stop Bits
=$00						LCR_DATABITS_5 = $00        ; Data Bits: 5
=$01						LCR_DATABITS_6 = $01        ; Data Bits: 6
=$02						LCR_DATABITS_7 = $02        ; Data Bits: 7
=$03						LCR_DATABITS_8 = $03        ; Data Bits: 8
=$80						LSR_ERR_RECIEVE = $80       ; Error in Received FIFO
=$40						LSR_XMIT_DONE = $40         ; All data has been transmitted
=$20						LSR_XMIT_EMPTY = $20        ; Empty transmit holding register
=$10						LSR_BREAK_INT = $10         ; Break interrupt
=$08						LSR_ERR_FRAME = $08         ; Framing error
=$04						LSR_ERR_PARITY = $04        ; Parity error
=$02						LSR_ERR_OVERRUN = $02       ; Overrun error
=$01						LSR_DATA_AVAIL = $01        ; Data is ready in the receive buffer
=384						UART_300 = 384              ; Code for 300 bps
=96						UART_1200 = 96              ; Code for 1200 bps
=48						UART_2400 = 48              ; Code for 2400 bps
=24						UART_4800 = 24              ; Code for 4800 bps
=12						UART_9600 = 12              ; Code for 9600 bps
=6						UART_19200 = 6              ; Code for 19200 bps
=3						UART_38400 = 3              ; Code for 28400 bps
=2						UART_57600 = 2              ; Code for 57600 bps
=1						UART_115200 = 1             ; Code for 115200 bps
.3959b1						UART_SELECT
.3959b1		08		php		            PHP
.3959b2		c2 20		rep #$20	                REP #$20        ; set A long
.3959b4		c9 02 00	cmp #$0002	            CMP #2
.3959b7		f0 07		beq $3959c0	            BEQ is_COM2
.3959b9		c2 20		rep #$20	                REP #$20        ; set A long
.3959bb		a9 f8 18	lda #$18f8	            LDA #<>UART1_BASE
.3959be		80 05		bra $3959c5	            BRA setaddr
.3959c0						is_COM2
.3959c0		c2 20		rep #$20	                REP #$20        ; set A long
.3959c2		a9 f8 18	lda #$18f8	            LDA #<>UART2_BASE
.3959c5		8f 00 07 00	sta $000700	setaddr     STA @lCURRUART
.3959c9		e2 20		sep #$20	                SEP #$20        ; set A short
.3959cb		a9 af		lda #$af	            LDA #`UART1_BASE
.3959cd		8f 02 07 00	sta $000702	            STA @lCURRUART+2
.3959d1		28		plp		            PLP
.3959d2		6b		rtl		            RTL
.3959d3						UART_SETBPS
.3959d3		08		php		            PHP
.3959d4		0b		phd		            PHD
.3959d5		48		pha		                PHA             ; begin setdp macro
.3959d6		08		php		                PHP
.3959d7		c2 20		rep #$20	                REP #$20        ; set A long
.3959d9		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.3959dc		5b		tcd		                TCD
.3959dd		28		plp		                PLP
.3959de		68		pla		                PLA             ; end setdp macro
.3959df		c2 30		rep #$30	                REP #$30        ; set A&X long
.3959e1		48		pha		            PHA
.3959e2		e2 20		sep #$20	                SEP #$20        ; set A short
.3959e4		a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Enable divisor latch
.3959e7		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.3959e9		09 80		ora #$80	            ORA #LCR_DLB
.3959eb		97 00		sta [$0700],y	            STA [CURRUART],Y
.3959ed		c2 20		rep #$20	                REP #$20        ; set A long
.3959ef		68		pla		            PLA
.3959f0		a0 00 00	ldy #$0000	            LDY #UART_DLL
.3959f3		97 00		sta [$0700],y	            STA [CURRUART],Y    ; Save the divisor to the UART
.3959f5		e2 20		sep #$20	                SEP #$20        ; set A short
.3959f7		a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Disable divisor latch
.3959fa		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.3959fc		49 80		eor #$80	            EOR #LCR_DLB
.3959fe		97 00		sta [$0700],y	            STA [CURRUART],Y
.395a00		2b		pld		            PLD
.395a01		28		plp		            PLP
.395a02		6b		rtl		            RTL
.395a03						UART_SETLCR
.395a03		08		php		            PHP
.395a04		0b		phd		            PHD
.395a05		48		pha		                PHA             ; begin setdp macro
.395a06		08		php		                PHP
.395a07		c2 20		rep #$20	                REP #$20        ; set A long
.395a09		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395a0c		5b		tcd		                TCD
.395a0d		28		plp		                PLP
.395a0e		68		pla		                PLA             ; end setdp macro
.395a0f		e2 20		sep #$20	                SEP #$20        ; set A short
.395a11		c2 10		rep #$10	                REP #$10        ; set X long
.395a13		29 7f		and #$7f	            AND #$7F            ; We don't want to alter divisor latch
.395a15		a0 03 00	ldy #$0003	            LDY #UART_LCR
.395a18		97 00		sta [$0700],y	            STA [CURRUART],Y
.395a1a		2b		pld		            PLD
.395a1b		28		plp		            PLP
.395a1c		6b		rtl		            RTL
.395a1d						UART_INIT
.395a1d		08		php		            PHP
.395a1e		0b		phd		            PHD
.395a1f		c2 30		rep #$30	                REP #$30        ; set A&X long
.395a21		48		pha		                PHA             ; begin setdp macro
.395a22		08		php		                PHP
.395a23		c2 20		rep #$20	                REP #$20        ; set A long
.395a25		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395a28		5b		tcd		                TCD
.395a29		28		plp		                PLP
.395a2a		68		pla		                PLA             ; end setdp macro
.395a2b		a9 01 00	lda #$0001	            LDA #UART_115200
.395a2e		22 d3 59 39	jsl $3959d3	            JSL UART_SETBPS
.395a32		e2 20		sep #$20	                SEP #$20        ; set A short
.395a34		a9 03		lda #$03	            LDA #LCR_PARITY_NONE | LCR_STOPBIT_1 | LCR_DATABITS_8
.395a36		22 03 5a 39	jsl $395a03	            JSL UART_SETLCR
.395a3a		a9 e1		lda #$e1	            LDA #%11100001
.395a3c		a0 02 00	ldy #$0002	            LDY #UART_FCR
.395a3f		97 00		sta [$0700],y	            STA [CURRUART],Y
.395a41		2b		pld		            PLD
.395a42		28		plp		            PLP
.395a43		6b		rtl		            RTL
.395a44						UART_HASBYT
.395a44		08		php		            PHP
.395a45		0b		phd		            PHD
.395a46		c2 30		rep #$30	                REP #$30        ; set A&X long
.395a48		48		pha		                PHA             ; begin setdp macro
.395a49		08		php		                PHP
.395a4a		c2 20		rep #$20	                REP #$20        ; set A long
.395a4c		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395a4f		5b		tcd		                TCD
.395a50		28		plp		                PLP
.395a51		68		pla		                PLA             ; end setdp macro
.395a52		e2 20		sep #$20	                SEP #$20        ; set A short
.395a54		a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.395a57		b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.395a59		29 01		and #$01	            AND #LSR_DATA_AVAIL
.395a5b		d0 04		bne $395a61	            BNE ret_true            ; If flag is set, return true
.395a5d		2b		pld		ret_false   PLD                     ; Return false
.395a5e		28		plp		            PLP
.395a5f		18		clc		            CLC
.395a60		6b		rtl		            RTL
.395a61		2b		pld		ret_true    PLD                     ; Return true
.395a62		28		plp		            PLP
.395a63		38		sec		            SEC
.395a64		6b		rtl		            RTL
.395a65						UART_GETC
.395a65		08		php		            PHP
.395a66		0b		phd		            PHD
.395a67		c2 30		rep #$30	                REP #$30        ; set A&X long
.395a69		48		pha		                PHA             ; begin setdp macro
.395a6a		08		php		                PHP
.395a6b		c2 20		rep #$20	                REP #$20        ; set A long
.395a6d		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395a70		5b		tcd		                TCD
.395a71		28		plp		                PLP
.395a72		68		pla		                PLA             ; end setdp macro
.395a73		e2 20		sep #$20	                SEP #$20        ; set A short
.395a75		a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.395a78		b7 00		lda [$0700],y	wait_getc   LDA [CURRUART],Y
.395a7a		29 01		and #$01	            AND #LSR_DATA_AVAIL
.395a7c		f0 fa		beq $395a78	            BEQ wait_getc           ; If the flag is clear, wait
.395a7e		a0 00 00	ldy #$0000	            LDY #UART_TRHB          ; Get the byte from the receive FIFO
.395a81		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.395a83		2b		pld		            PLD
.395a84		28		plp		            PLP
.395a85		6b		rtl		            RTL
.395a86						UART_PUTC
.395a86		08		php		            PHP
.395a87		0b		phd		            PHD
.395a88		c2 30		rep #$30	                REP #$30        ; set A&X long
.395a8a		48		pha		                PHA             ; begin setdp macro
.395a8b		08		php		                PHP
.395a8c		c2 20		rep #$20	                REP #$20        ; set A long
.395a8e		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395a91		5b		tcd		                TCD
.395a92		28		plp		                PLP
.395a93		68		pla		                PLA             ; end setdp macro
.395a94		e2 20		sep #$20	                SEP #$20        ; set A short
.395a96		48		pha		            PHA                     ; Wait for the transmit FIFO to free up
.395a97		a0 05 00	ldy #$0005	            LDY #UART_LSR
.395a9a		b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.395a9c		29 20		and #$20	            AND #LSR_XMIT_EMPTY
.395a9e		f0 fa		beq $395a9a	            BEQ wait_putc
.395aa0		68		pla		            PLA
.395aa1		a0 00 00	ldy #$0000	            LDY #UART_TRHB
.395aa4		97 00		sta [$0700],y	            STA [CURRUART],Y
.395aa6		2b		pld		            PLD
.395aa7		28		plp		            PLP
.395aa8		6b		rtl		            RTL
.395aa9						UART_PUTS
.395aa9		08		php		            PHP
.395aaa		e2 20		sep #$20	                SEP #$20        ; set A short
.395aac		bd 00 00	lda $0000,x	put_loop    LDA #0,B,X
.395aaf		f0 07		beq $395ab8	            BEQ done
.395ab1		22 86 5a 39	jsl $395a86	            JSL UART_PUTC
.395ab5		e8		inx		            INX
.395ab6		80 f4		bra $395aac	            BRA put_loop
.395ab8		28		plp		done        PLP
.395ab9		6b		rtl		            RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\joystick.asm

.395aba						JOYSTICK_SET_NES_MODE
.395aba		e2 20		sep #$20	                SEP #$20        ; set A short
.395abc		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395ac0		29 fb		and #$fb	          AND #~NES_SNES_JOY  ; 0 = NES (8 bit shift)
.395ac2		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395ac6		6b		rtl		          RTL
.395ac7						JOYSTICK_SET_SNES_MODE
.395ac7		e2 20		sep #$20	                SEP #$20        ; set A short
.395ac9		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395acd		29 fb		and #$fb	          AND #~NES_SNES_JOY
.395acf		09 04		ora #$04	          ORA #NES_SNES_JOY   ; 1 = SNES (12 Bit Shift)
.395ad1		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395ad5		6b		rtl		          RTL
.395ad6						JOYSTICK_ENABLE_NES_SNES_PORT0
.395ad6		e2 20		sep #$20	                SEP #$20        ; set A short
.395ad8		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395adc		29 fe		and #$fe	          AND #~NES_SNES_EN0
.395ade		09 01		ora #$01	          ORA #NES_SNES_EN0
.395ae0		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395ae4		6b		rtl		          RTL
.395ae5						JOYSTICK_ENABLE_NES_SNES_PORT1
.395ae5		e2 20		sep #$20	                SEP #$20        ; set A short
.395ae7		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395aeb		29 fd		and #$fd	          AND #~NES_SNES_EN1
.395aed		09 02		ora #$02	          ORA #NES_SNES_EN1
.395aef		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395af3		6b		rtl		          RTL
.395af4						JOYSTICK_DISABLE_NES_SNES_PORT0
.395af4		e2 20		sep #$20	                SEP #$20        ; set A short
.395af6		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395afa		29 fe		and #$fe	          AND #~NES_SNES_EN0
.395afc		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395b00		6b		rtl		          RTL
.395b01						JOYSTICK_DISABLE_NES_SNES_PORT1
.395b01		e2 20		sep #$20	                SEP #$20        ; set A short
.395b03		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395b07		29 fd		and #$fd	          AND #~NES_SNES_EN1
.395b09		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395b0d		6b		rtl		          RTL
.395b0e						JOYSTICK_NES_SNES_TRIG_WITH_POLL
.395b0e		e2 20		sep #$20	                SEP #$20        ; set A short
.395b10		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395b14		29 03		and #$03	          AND #(NES_SNES_EN0 | NES_SNES_EN1)
.395b16		c9 00		cmp #$00	          CMP #$00
.395b18		f0 14		beq $395b2e	          BEQ END_OF_JOYSTICK_POLL
.395b1a		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395b1e		09 80		ora #$80	          ORA #NES_SNES_TRIG   ; Set to 1 (Will auto Clear)
.395b20		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395b24						JOYSTICK_POLLING_ISNOTOVER
.395b24		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE ;
.395b28		29 40		and #$40	          AND #NES_SNES_DONE
.395b2a		c9 40		cmp #$40	          CMP #NES_SNES_DONE
.395b2c		d0 f6		bne $395b24	          BNE JOYSTICK_POLLING_ISNOTOVER
.395b2e						END_OF_JOYSTICK_POLL
.395b2e		6b		rtl		          RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/sdc_library.asm

.395b2f						SDC_TEST
.395b2f		8b		phb		                PHB
.395b30		0b		phd		                PHD
.395b31		08		php		                PHP
.395b32		48		pha		                PHA             ; begin setdbr macro
.395b33		08		php		                PHP
.395b34		e2 20		sep #$20	                SEP #$20        ; set A short
.395b36		a9 00		lda #$00	                LDA #0
.395b38		48		pha		                PHA
.395b39		ab		plb		                PLB
.395b3a		28		plp		                PLP
.395b3b		68		pla		                PLA             ; end setdbr macro
.395b3c		48		pha		                PHA             ; begin setdp macro
.395b3d		08		php		                PHP
.395b3e		c2 20		rep #$20	                REP #$20        ; set A long
.395b40		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395b43		5b		tcd		                TCD
.395b44		28		plp		                PLP
.395b45		68		pla		                PLA             ; end setdp macro
.395b46		e2 20		sep #$20	                SEP #$20        ; set A short
.395b48		a9 f0		lda #$f0	                LDA #$F0                            ; Set white on black background
.395b4a		8d 1e 00	sta $001e	                STA @w CURCOLOR
.395b4d		22 a8 10 00	jsl $0010a8	                JSL CLRSCREEN
.395b51		22 a0 10 00	jsl $0010a0	                JSL CSRHOME
.395b55		22 95 5b 39	jsl $395b95	                JSL SDC_INIT                        ; Attempt to initilize the SDC interface
.395b59		b0 03		bcs $395b5e	                BCS init_ok
.395b5b		82 15 00	brl $395b73	                BRL done
.395b5e		a9 02		lda #$02	init_ok         LDA #BIOS_DEV_SD
.395b60		85 01		sta $0321	                STA BIOS_DEV
.395b62		22 9d 41 39	jsl $39419d	                JSL DOS_MOUNT                       ; Attempt to mount the SDC
.395b66		b0 03		bcs $395b6b	                BCS mount_ok
.395b68		82 08 00	brl $395b73	                BRL done
.395b6b		22 54 52 39	jsl $395254	mount_ok        JSL IF_DIROPEN
.395b6f		b0 02		bcs $395b73	                BCS all_ok
.395b71		80 00		bra $395b73	                BRA done
.395b73						all_ok
.395b73		22 6c 10 00	jsl $00106c	done            JSL PRINTCR
.395b77		28		plp		                PLP
.395b78		2b		pld		                PLD
.395b79		ab		plb		                PLB
.395b7a		6b		rtl		                RTL
.395b7b						SDC_WAITBUSY
.395b7b		08		php		                PHP
.395b7c		e2 20		sep #$20	                SEP #$20        ; set A short
.395b7e		af 04 ea af	lda $afea04	wait_xact       LDA @l SDC_TRANS_STATUS_REG         ; Wait for the transaction to complete
.395b82		29 01		and #$01	                AND #SDC_TRANS_BUSY
.395b84		c9 01		cmp #$01	                CMP #SDC_TRANS_BUSY
.395b86		f0 f6		beq $395b7e	                BEQ wait_xact
.395b88		28		plp		                PLP
.395b89		6b		rtl		                RTL
.395b8a						SDC_RESET
.395b8a		08		php		                PHP
.395b8b		e2 20		sep #$20	                SEP #$20        ; set A short
.395b8d		a9 01		lda #$01	                LDA #1
.395b8f		8f 01 ea af	sta $afea01	                STA @l SDC_CONTROL_REG
.395b93		28		plp		                PLP
.395b94		6b		rtl		                RTL
.395b95						SDC_INIT
.395b95		0b		phd		                PHD
.395b96		8b		phb		                PHB
.395b97		08		php		                PHP
.395b98		48		pha		                PHA             ; begin setdbr macro
.395b99		08		php		                PHP
.395b9a		e2 20		sep #$20	                SEP #$20        ; set A short
.395b9c		a9 00		lda #$00	                LDA #0
.395b9e		48		pha		                PHA
.395b9f		ab		plb		                PLB
.395ba0		28		plp		                PLP
.395ba1		68		pla		                PLA             ; end setdbr macro
.395ba2		48		pha		                PHA             ; begin setdp macro
.395ba3		08		php		                PHP
.395ba4		c2 20		rep #$20	                REP #$20        ; set A long
.395ba6		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395ba9		5b		tcd		                TCD
.395baa		28		plp		                PLP
.395bab		68		pla		                PLA             ; end setdp macro
.395bac		e2 20		sep #$20	                SEP #$20        ; set A short
.395bae		af 12 e8 af	lda $afe812	                LDA @l SDCARD_STAT                  ; Check the SDC status
.395bb2		89 01		bit #$01	                BIT #SDC_DETECTED                   ; Is a card present
.395bb4		f0 04		beq $395bba	                BEQ start_trans                     ; Yes: start the transaction
.395bb6		a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA               ; No: return a NO MEDIA error
.395bb8		80 22		bra $395bdc	                BRA set_error
.395bba		a9 01		lda #$01	start_trans     LDA #SDC_TRANS_INIT_SD
.395bbc		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG           ; Set Init SD
.395bc0		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.395bc2		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.395bc6		22 7b 5b 39	jsl $395b7b	                JSL SDC_WAITBUSY                    ; Wait for initialization to complete
.395bca		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395bce		d0 07		bne $395bd7	                BNE ret_error                       ; Is there one? Process the error
.395bd0		64 00		stz $0320	ret_success     STZ BIOS_STATUS
.395bd2		28		plp		                PLP
.395bd3		ab		plb		                PLB
.395bd4		2b		pld		                PLD
.395bd5		38		sec		                SEC
.395bd6		6b		rtl		                RTL
.395bd7		8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.395bda		a9 8b		lda #$8b	                LDA #BIOS_ERR_NOTINIT
.395bdc		85 00		sta $0320	set_error       STA BIOS_STATUS
.395bde		28		plp		                PLP
.395bdf		ab		plb		                PLB
.395be0		2b		pld		                PLD
.395be1		18		clc		                CLC
.395be2		6b		rtl		                RTL
.395be3						SDC_GETBLOCK
.395be3		0b		phd		                PHD
.395be4		8b		phb		                PHB
.395be5		08		php		                PHP
.395be6		48		pha		                PHA             ; begin setdbr macro
.395be7		08		php		                PHP
.395be8		e2 20		sep #$20	                SEP #$20        ; set A short
.395bea		a9 00		lda #$00	                LDA #0
.395bec		48		pha		                PHA
.395bed		ab		plb		                PLB
.395bee		28		plp		                PLP
.395bef		68		pla		                PLA             ; end setdbr macro
.395bf0		48		pha		                PHA             ; begin setdp macro
.395bf1		08		php		                PHP
.395bf2		c2 20		rep #$20	                REP #$20        ; set A long
.395bf4		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395bf7		5b		tcd		                TCD
.395bf8		28		plp		                PLP
.395bf9		68		pla		                PLA             ; end setdp macro
.395bfa		e2 20		sep #$20	                SEP #$20        ; set A short
.395bfc		af 12 e8 af	lda $afe812	                LDA @l SDCARD_STAT                  ; Check the SDC status
.395c00		89 01		bit #$01	                BIT #SDC_DETECTED                   ; Is a card present
.395c02		f0 04		beq $395c08	                BEQ led_on                          ; Yes: turn on the LED
.395c04		a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA               ; No: return a NO MEDIA error
.395c06		80 71		bra $395c79	                BRA ret_error
.395c08		af 80 e8 af	lda $afe880	led_on          LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.395c0c		09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.395c0e		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395c12		a9 00		lda #$00	                LDA #0
.395c14		8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.395c18		a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to read
.395c1a		0a		asl a		                ASL A
.395c1b		8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.395c1f		a5 03		lda $0323	                LDA BIOS_LBA+1
.395c21		2a		rol a		                ROL A
.395c22		8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.395c26		a5 04		lda $0324	                LDA BIOS_LBA+2
.395c28		2a		rol a		                ROL A
.395c29		8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.395c2d		a9 02		lda #$02	                LDA #SDC_TRANS_READ_BLK             ; Set the transaction to READ
.395c2f		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.395c33		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.395c35		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.395c39		22 7b 5b 39	jsl $395b7b	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.395c3d		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395c41		d0 36		bne $395c79	                BNE ret_error                       ; Is there one? Process the error
.395c43		e2 20		sep #$20	                SEP #$20        ; set A short
.395c45		af 13 ea af	lda $afea13	                LDA @l SDC_RX_FIFO_DATA_CNT_LO      ; Record the number of bytes read
.395c49		85 0a		sta $032a	                STA BIOS_FIFO_COUNT
.395c4b		af 12 ea af	lda $afea12	                LDA @l SDC_RX_FIFO_DATA_CNT_HI
.395c4f		85 0b		sta $032b	                STA BIOS_FIFO_COUNT+1
.395c51		c2 10		rep #$10	                REP #$10        ; set X long
.395c53		a0 00 00	ldy #$0000	                LDY #0
.395c56		af 10 ea af	lda $afea10	loop_rd         LDA @l SDC_RX_FIFO_DATA_REG         ; Get the byte...
.395c5a		97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y               ; Save it to the buffer
.395c5c		c8		iny		                INY                                 ; Advance to the next byte
.395c5d		c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.395c60		d0 f4		bne $395c56	                BNE loop_rd                         ; No: keep reading
.395c62		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395c66		d0 11		bne $395c79	                BNE ret_error                       ; Is there one? Process the error
.395c68		64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.395c6a		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395c6e		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395c70		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395c74		28		plp		                PLP
.395c75		ab		plb		                PLB
.395c76		2b		pld		                PLD
.395c77		38		sec		                SEC
.395c78		6b		rtl		                RTL
.395c79		85 00		sta $0320	ret_error       STA BIOS_STATUS
.395c7b		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395c7f		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395c81		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395c85		28		plp		                PLP
.395c86		ab		plb		                PLB
.395c87		2b		pld		                PLD
.395c88		18		clc		                CLC
.395c89		6b		rtl		                RTL
.395c8a						SDC_PUTBLOCK
.395c8a		0b		phd		                PHD
.395c8b		8b		phb		                PHB
.395c8c		08		php		                PHP
.395c8d		48		pha		                PHA             ; begin setdbr macro
.395c8e		08		php		                PHP
.395c8f		e2 20		sep #$20	                SEP #$20        ; set A short
.395c91		a9 00		lda #$00	                LDA #0
.395c93		48		pha		                PHA
.395c94		ab		plb		                PLB
.395c95		28		plp		                PLP
.395c96		68		pla		                PLA             ; end setdbr macro
.395c97		48		pha		                PHA             ; begin setdp macro
.395c98		08		php		                PHP
.395c99		c2 20		rep #$20	                REP #$20        ; set A long
.395c9b		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395c9e		5b		tcd		                TCD
.395c9f		28		plp		                PLP
.395ca0		68		pla		                PLA             ; end setdp macro
.395ca1		e2 20		sep #$20	                SEP #$20        ; set A short
.395ca3		af 12 e8 af	lda $afe812	                LDA @l SDCARD_STAT                  ; Check the SDC status
.395ca7		89 01		bit #$01	                BIT #SDC_DETECTED                   ; Is a card present
.395ca9		f0 04		beq $395caf	                BEQ check_wp                        ; Yes: check for write protect
.395cab		a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA               ; No: return a NO MEDIA error
.395cad		80 65		bra $395d14	                BRA ret_error
.395caf		89 02		bit #$02	check_wp        BIT #SDC_WRITEPROT                  ; Is card writable?
.395cb1		f0 04		beq $395cb7	                BEQ led_on                          ; Yes: start the transaction
.395cb3		a9 86		lda #$86	                LDA #BIOS_ERR_WRITEPROT             ; No: return a WRITE PROTECT error
.395cb5		80 5d		bra $395d14	                BRA ret_error
.395cb7		af 80 e8 af	lda $afe880	led_on          LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.395cbb		09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.395cbd		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395cc1		c2 10		rep #$10	                REP #$10        ; set X long
.395cc3		a0 00 00	ldy #$0000	                LDY #0
.395cc6		b7 06		lda [$0326],y	loop_wr         LDA [BIOS_BUFF_PTR],Y               ; Get the byte...
.395cc8		8f 20 ea af	sta $afea20	                STA @l SDC_TX_FIFO_DATA_REG         ; Save it to the SDC
.395ccc		c8		iny		                INY                                 ; Advance to the next byte
.395ccd		c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.395cd0		d0 f4		bne $395cc6	                BNE loop_wr                         ; No: keep writing
.395cd2		a9 00		lda #$00	                LDA #0
.395cd4		8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.395cd8		a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to write
.395cda		0a		asl a		                ASL A
.395cdb		8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.395cdf		a5 03		lda $0323	                LDA BIOS_LBA+1
.395ce1		2a		rol a		                ROL A
.395ce2		8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.395ce6		a5 04		lda $0324	                LDA BIOS_LBA+2
.395ce8		2a		rol a		                ROL A
.395ce9		8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.395ced		a9 03		lda #$03	                LDA #SDC_TRANS_WRITE_BLK            ; Set the transaction to WRITE
.395cef		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.395cf3		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.395cf5		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.395cf9		22 7b 5b 39	jsl $395b7b	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.395cfd		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395d01		d0 11		bne $395d14	                BNE ret_error                       ; Is there one? Process the error
.395d03		64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.395d05		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395d09		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395d0b		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395d0f		28		plp		                PLP
.395d10		ab		plb		                PLB
.395d11		2b		pld		                PLD
.395d12		38		sec		                SEC
.395d13		6b		rtl		                RTL
.395d14		85 00		sta $0320	ret_error       STA BIOS_STATUS
.395d16		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395d1a		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395d1c		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395d20		28		plp		                PLP
.395d21		ab		plb		                PLB
.395d22		2b		pld		                PLD
.395d23		18		clc		                CLC
.395d24		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/fdc_library.asm

=4295454					FDC_MOTOR_TIME = 4295454        ; Time to wait for the motor to come on: 300ms
=2147727					FDC_SEEK_TIME = 2147727         ; Time to wait for a seek to happen: 150ms
=900						FDC_MOTOR_ON_TIME = 60*15       ; Time (in SOF interrupt counts) for the motor to stay on: ~15s?
=30						FDC_WAIT_TIME = 30              ; Time (in SOF interrupt counts) to allow for a waiting loop to continue
=13						BPB_SECPERCLUS12_OFF = 13       ; Offset to sectors per cluster in a FAT12 boot sector
=17						BPB_ROOT_MAX_ENTRY12_OFF = 17   ; Offset to the maximum number of entries in the root directory in FAT12 boot sector
=22						BPB_SECPERFAT12_OFF = 22        ; Offset to sectors per FAT on a FAT12 boot sector
.395d25						FDC_TEST
.395d25		8b		phb		                    PHB
.395d26		0b		phd		                    PHD
.395d27		08		php		                    PHP
.395d28		48		pha		                PHA             ; begin setdbr macro
.395d29		08		php		                PHP
.395d2a		e2 20		sep #$20	                SEP #$20        ; set A short
.395d2c		a9 00		lda #$00	                LDA #0
.395d2e		48		pha		                PHA
.395d2f		ab		plb		                PLB
.395d30		28		plp		                PLP
.395d31		68		pla		                PLA             ; end setdbr macro
.395d32		48		pha		                PHA             ; begin setdp macro
.395d33		08		php		                PHP
.395d34		c2 20		rep #$20	                REP #$20        ; set A long
.395d36		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395d39		5b		tcd		                TCD
.395d3a		28		plp		                PLP
.395d3b		68		pla		                PLA             ; end setdp macro
.395d3c		e2 20		sep #$20	                SEP #$20        ; set A short
.395d3e		a9 f0		lda #$f0	                    LDA #$F0
.395d40		8d 1e 00	sta $001e	                    STA @w CURCOLOR
.395d43		22 a8 10 00	jsl $0010a8	                    JSL CLRSCREEN
.395d47		22 a0 10 00	jsl $0010a0	                    JSL CSRHOME
.395d4b		c2 30		rep #$30	                REP #$30        ; set A&X long
.395d4d		22 1b 60 39	jsl $39601b	                    JSL FDC_Init
.395d51		b0 03		bcs $395d56	                    BCS init_ok
.395d53		82 20 00	brl $395d76	                    BRL motor_off
.395d56		22 1a 67 39	jsl $39671a	init_ok             JSL FDC_CHK_MEDIA
.395d5a		90 03		bcc $395d5f	                    BCC no_media
.395d5c		82 03 00	brl $395d62	                    BRL is_ok1
.395d5f						no_media
.395d5f		82 14 00	brl $395d76	                    BRL motor_off
.395d62		22 ad 65 39	jsl $3965ad	is_ok1              JSL FDC_MOUNT
.395d66		90 03		bcc $395d6b	                    BCC mount_err
.395d68		82 03 00	brl $395d6e	                    BRL is_ok2
.395d6b						mount_err
.395d6b		82 08 00	brl $395d76	                    BRL motor_off
.395d6e		22 82 5d 39	jsl $395d82	is_ok2              JSL FDC_TEST_PUTBLOCK
.395d72		b0 02		bcs $395d76	                    BCS all_ok
.395d74		80 00		bra $395d76	                    BRA motor_off
.395d76						all_ok
.395d76		22 6c 10 00	jsl $00106c	motor_off           JSL PRINTCR
.395d7a		22 cb 60 39	jsl $3960cb	                    JSL FDC_Motor_Off
.395d7e		28		plp		                    PLP
.395d7f		2b		pld		                    PLD
.395d80		ab		plb		                    PLB
.395d81		6b		rtl		                    RTL
.395d82						FDC_TEST_PUTBLOCK
.395d82		e2 20		sep #$20	                SEP #$20        ; set A short
.395d84		a9 00		lda #$00	                    LDA #0                          ; Initialize the data to write to the drive
.395d86		a2 00 00	ldx #$0000	                    LDX #0
.395d89		9f 00 00 03	sta $030000,x	init_loop           STA @l TEST_BUFFER,X
.395d8d		1a		inc a		                    INC A
.395d8e		e8		inx		                    INX
.395d8f		e0 00 02	cpx #$0200	                    CPX #512
.395d92		d0 f5		bne $395d89	                    BNE init_loop
.395d94		c2 20		rep #$20	                REP #$20        ; set A long
.395d96		a9 00 00	lda #$0000	                    LDA #<>TEST_BUFFER              ; Set BIOS_BUFF_PTR
.395d99		8f 26 03 00	sta $000326	                    STA @l BIOS_BUFF_PTR
.395d9d		a9 03 00	lda #$0003	                    LDA #`TEST_BUFFER
.395da0		8f 28 03 00	sta $000328	                    STA @l BIOS_BUFF_PTR+2
.395da4		a9 64 00	lda #$0064	                    LDA #100                        ; Set LBA = 100
.395da7		8f 22 03 00	sta $000322	                    STA @l BIOS_LBA
.395dab		a9 00 00	lda #$0000	                    LDA #0
.395dae		8f 24 03 00	sta $000324	                    STA @l BIOS_LBA+2
.395db2		22 41 65 39	jsl $396541	                    JSL FDC_PUTBLOCK                ; Try to write the data
.395db6		6b		rtl		                    RTL
>395db7		40 46 3a 53 41 4d 50 4c		BOOT_FILE           .null "@F:SAMPLE.PGX Hello, world!"
>395dbf		45 2e 50 47 58 20 48 65 6c 6c 6f 2c 20 77 6f 72
>395dcf		6c 64 21 00
=$020000					TEST_LOCATION = $020000                     ; Location to try to load it
=$030000					TEST_BUFFER = $030000                       ; Temporary location for a cluster buffer
.395dd3						FDC_Check_RQM
.395dd3		0b		phd		                    PHD
.395dd4		08		php		                    PHP
.395dd5		48		pha		                PHA             ; begin setdp macro
.395dd6		08		php		                PHP
.395dd7		c2 20		rep #$20	                REP #$20        ; set A long
.395dd9		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395ddc		5b		tcd		                TCD
.395ddd		28		plp		                PLP
.395dde		68		pla		                PLA             ; end setdp macro
.395ddf		e2 20		sep #$20	                SEP #$20        ; set A short
.395de1		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395de3		22 4c 3d 39	jsl $393d4c	                    JSL ISETTIMEOUT
.395de7		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395de9		30 12		bmi $395dfd	                    BMI time_out            ; If so: signal a time out
.395deb		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395def		89 80		bit #$80	                    BIT #FDC_MSR_RQM
.395df1		f0 f4		beq $395de7	                    BEQ loop
.395df3		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395df5		22 4c 3d 39	jsl $393d4c	                    JSL ISETTIMEOUT
.395df9		28		plp		                    PLP
.395dfa		2b		pld		                    PLD
.395dfb		38		sec		                    SEC
.395dfc		60		rts		                    RTS
.395dfd		28		plp		time_out            PLP
.395dfe		2b		pld		                    PLD
.395dff		18		clc		                    CLC
.395e00		60		rts		                    RTS
.395e01						FDC_Check_DRV0_BSY
.395e01		0b		phd		                    PHD
.395e02		08		php		                    PHP
.395e03		48		pha		                PHA             ; begin setdp macro
.395e04		08		php		                PHP
.395e05		c2 20		rep #$20	                REP #$20        ; set A long
.395e07		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395e0a		5b		tcd		                TCD
.395e0b		28		plp		                PLP
.395e0c		68		pla		                PLA             ; end setdp macro
.395e0d		e2 20		sep #$20	                SEP #$20        ; set A short
.395e0f		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395e11		22 4c 3d 39	jsl $393d4c	                    JSL ISETTIMEOUT
.395e15		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395e17		30 12		bmi $395e2b	                    BMI time_out            ; If so: signal a time out
.395e19		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395e1d		89 01		bit #$01	                    BIT #FDC_MSR_DRV0BSY
.395e1f		d0 f4		bne $395e15	                    BNE loop
.395e21		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395e23		22 4c 3d 39	jsl $393d4c	                    JSL ISETTIMEOUT
.395e27		28		plp		                    PLP
.395e28		2b		pld		                    PLD
.395e29		38		sec		                    SEC
.395e2a		60		rts		                    RTS
.395e2b		28		plp		time_out            PLP
.395e2c		2b		pld		                    PLD
.395e2d		18		clc		                    CLC
.395e2e		60		rts		                    RTS
.395e2f						FDC_Check_CMD_BSY
.395e2f		0b		phd		                    PHD
.395e30		08		php		                    PHP
.395e31		48		pha		                PHA             ; begin setdp macro
.395e32		08		php		                PHP
.395e33		c2 20		rep #$20	                REP #$20        ; set A long
.395e35		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395e38		5b		tcd		                TCD
.395e39		28		plp		                PLP
.395e3a		68		pla		                PLA             ; end setdp macro
.395e3b		e2 20		sep #$20	                SEP #$20        ; set A short
.395e3d		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395e3f		22 4c 3d 39	jsl $393d4c	                    JSL ISETTIMEOUT
.395e43		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395e45		30 12		bmi $395e59	                    BMI time_out            ; If so: signal a time out
.395e47		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395e4b		89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.395e4d		d0 f4		bne $395e43	                    BNE loop
.395e4f		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395e51		22 4c 3d 39	jsl $393d4c	                    JSL ISETTIMEOUT
.395e55		28		plp		                    PLP
.395e56		2b		pld		                    PLD
.395e57		38		sec		                    SEC
.395e58		60		rts		                    RTS
.395e59		28		plp		time_out            PLP
.395e5a		2b		pld		                    PLD
.395e5b		18		clc		                    CLC
.395e5c		60		rts		                    RTS
.395e5d						FDC_Can_Read_Data
.395e5d		0b		phd		                    PHD
.395e5e		08		php		                    PHP
.395e5f		48		pha		                PHA             ; begin setdp macro
.395e60		08		php		                PHP
.395e61		c2 20		rep #$20	                REP #$20        ; set A long
.395e63		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395e66		5b		tcd		                TCD
.395e67		28		plp		                PLP
.395e68		68		pla		                PLA             ; end setdp macro
.395e69		e2 20		sep #$20	                SEP #$20        ; set A short
.395e6b		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395e6d		22 4c 3d 39	jsl $393d4c	                    JSL ISETTIMEOUT
.395e71		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395e73		30 14		bmi $395e89	                    BMI time_out            ; If so: signal a time out
.395e75		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395e79		29 40		and #$40	                    AND #FDC_MSR_DIO
.395e7b		c9 40		cmp #$40	                    CMP #FDC_MSR_DIO
.395e7d		d0 f2		bne $395e71	                    BNE loop
.395e7f		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395e81		22 4c 3d 39	jsl $393d4c	                    JSL ISETTIMEOUT
.395e85		28		plp		                    PLP
.395e86		2b		pld		                    PLD
.395e87		38		sec		                    SEC
.395e88		60		rts		                    RTS
.395e89		28		plp		time_out            PLP
.395e8a		2b		pld		                    PLD
.395e8b		18		clc		                    CLC
.395e8c		60		rts		                    RTS
.395e8d						FDC_CAN_WRITE
.395e8d		0b		phd		                    PHD
.395e8e		08		php		                    PHP
.395e8f		48		pha		                PHA             ; begin setdp macro
.395e90		08		php		                PHP
.395e91		c2 20		rep #$20	                REP #$20        ; set A long
.395e93		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395e96		5b		tcd		                TCD
.395e97		28		plp		                PLP
.395e98		68		pla		                PLA             ; end setdp macro
.395e99		e2 20		sep #$20	                SEP #$20        ; set A short
.395e9b		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395e9d		22 4c 3d 39	jsl $393d4c	                    JSL ISETTIMEOUT
.395ea1		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395ea3		30 14		bmi $395eb9	                    BMI time_out            ; If so: signal a time out
.395ea5		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395ea9		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.395eab		c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.395ead		d0 f2		bne $395ea1	                    BNE loop
.395eaf		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395eb1		22 4c 3d 39	jsl $393d4c	                    JSL ISETTIMEOUT
.395eb5		28		plp		                    PLP
.395eb6		2b		pld		                    PLD
.395eb7		38		sec		                    SEC
.395eb8		60		rts		                    RTS
.395eb9		28		plp		time_out            PLP
.395eba		2b		pld		                    PLD
.395ebb		18		clc		                    CLC
.395ebc		60		rts		                    RTS
.395ebd						FDC_DELAY_10MS
.395ebd		da		phx		                    PHX
.395ebe		08		php		                    PHP
.395ebf		c2 10		rep #$10	                REP #$10        ; set X long
.395ec1		a2 80 3e	ldx #$3e80	                    LDX #16000          ; Wait for around 10ms
.395ec4		ea		nop		loop                NOP                 ; Each iteration should take 9 cycles
.395ec5		ca		dex		                    DEX
.395ec6		e0 00 00	cpx #$0000	                    CPX #0
.395ec9		d0 f9		bne $395ec4	                    BNE loop
.395ecb		28		plp		                    PLP
.395ecc		fa		plx		                    PLX
.395ecd		6b		rtl		                    RTL
.395ece						FDC_COMMAND
.395ece		da		phx		                    PHX
.395ecf		8b		phb		                    PHB
.395ed0		0b		phd		                    PHD
.395ed1		08		php		                    PHP
.395ed2		48		pha		                PHA             ; begin setdbr macro
.395ed3		08		php		                PHP
.395ed4		e2 20		sep #$20	                SEP #$20        ; set A short
.395ed6		a9 00		lda #$00	                LDA #0
.395ed8		48		pha		                PHA
.395ed9		ab		plb		                PLB
.395eda		28		plp		                PLP
.395edb		68		pla		                PLA             ; end setdbr macro
.395edc		48		pha		                PHA             ; begin setdp macro
.395edd		08		php		                PHP
.395ede		c2 20		rep #$20	                REP #$20        ; set A long
.395ee0		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395ee3		5b		tcd		                TCD
.395ee4		28		plp		                PLP
.395ee5		68		pla		                PLA             ; end setdp macro
.395ee6		22 bd 5e 39	jsl $395ebd	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms
.395eea		e2 30		sep #$30	                SEP #$30        ; set A&X short
.395eec		a2 00		ldx #$00	                    LDX #0
.395eee		a9 00		lda #$00	                    LDA #0
.395ef0		9d 10 05	sta $0510,x	clr_results         STA FDC_RESULTS,X                       ; Clear the result buffer
.395ef3		e8		inx		                    INX
.395ef4		e0 10		cpx #$10	                    CPX #16
.395ef6		d0 f8		bne $395ef0	                    BNE clr_results
.395ef8		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Validate we can send a command
.395efc		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.395efe		c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.395f00		f0 04		beq $395f06	                    BEQ start_send                          ; If so, start sending
.395f02		22 1b 60 39	jsl $39601b	fdc_reset           JSL FDC_INIT                            ; Reset the FDC
.395f06						start_send
.395f06		e2 10		sep #$10	                SEP #$10        ; set X short
.395f08		a2 00		ldx #$00	                    LDX #0
.395f0a		20 d3 5d	jsr $395dd3	send_loop           JSR FDC_Check_RQM                       ; Wait until we can write
.395f0d		b0 03		bcs $395f12	                    BCS send_param
.395f0f		82 5e 00	brl $395f70	                    BRL time_out                            ; If there was a timeout, flag the time out
.395f12		bd 00 05	lda $0500,x	send_param          LDA FDC_PARAMETERS,X                    ; Get the parameter/command byte to write
.395f15		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; Send it
.395f19		22 bd 5e 39	jsl $395ebd	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms for things to settle
.395f1d		e8		inx		                    INX                                     ; Advance to the next byte
.395f1e		ec 30 05	cpx $0530	                    CPX FDC_PARAM_NUM
.395f21		d0 e7		bne $395f0a	                    BNE send_loop                           ; Keep sending until we've sent them all
.395f23		ad 33 05	lda $0533	                    LDA FDC_EXPECT_DAT                      ; Check the data expectation byte
.395f26		d0 03		bne $395f2b	                    BNE chk_data_dir
.395f28		82 80 00	brl $395fab	                    BRL result_phase                        ; If 0: we just want a result
.395f2b		10 3c		bpl $395f69	chk_data_dir        BPL rd_data                             ; If >0: we want to read data
.395f2d						wr_data
.395f2d		a5 0b		lda $030b	wr_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.395f2f		30 03		bmi $395f34	                    BMI wr_chk_rqm
.395f31		82 3c 00	brl $395f70	                    BRL time_out                            ; If not, raise an error
.395f34		af f4 13 af	lda $af13f4	wr_chk_rqm          LDA @l SIO_FDC_MSR                      ; Wait for ready to write
.395f38		89 80		bit #$80	                    BIT #FDC_MSR_RQM
.395f3a		f0 f1		beq $395f2d	                    BEQ wr_data_rdy
.395f3c		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA                     ; Check if in execution mode
.395f3e		d0 03		bne $395f43	                    BNE wr_data_phase                       ; If so: transfer the data
.395f40		82 68 00	brl $395fab	                    BRL result_phase                          ; If not: it's an error
.395f43						wr_data_phase
.395f43		c2 10		rep #$10	                REP #$10        ; set X long
.395f45		a0 00 00	ldy #$0000	                    LDY #0
.395f48		a5 0b		lda $030b	wr_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.395f4a		30 03		bmi $395f4f	                    BMI wr_chk_nondma
.395f4c		82 21 00	brl $395f70	                    BRL time_out                            ; If not, raise an error
.395f4f		af f4 13 af	lda $af13f4	wr_chk_nondma       LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.395f53		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.395f55		f0 54		beq $395fab	                    BEQ result_phase                        ; If not: break out to result phase
.395f57		89 80		bit #$80	                    BIT #FDC_MSR_RQM                        ; Check if we can read data
.395f59		f0 ed		beq $395f48	                    BEQ wr_data_loop                        ; No: keep waiting
.395f5b		b7 26		lda [$0326],y	                    LDA [BIOS_BUFF_PTR],Y                   ; Get the data byte
.395f5d		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; And save it to the buffer
.395f61		c8		iny		                    INY                                     ; Move to the next position
.395f62		c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.395f65		d0 e1		bne $395f48	                    BNE wr_data_loop                        ; If not at the end, keep fetching
.395f67		80 42		bra $395fab	                    BRA result_phase                        ; ready for the result phase
.395f69		20 5d 5e	jsr $395e5d	rd_data             JSR FDC_Can_Read_Data
.395f6c		a5 0b		lda $030b	rd_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.395f6e		30 07		bmi $395f77	                    BMI chk_rd_rdy                          ; If so, check to see if the data is ready
.395f70						time_out
.395f70		e2 20		sep #$20	                SEP #$20        ; set A short
.395f72		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT                   ; Otherwise: throw a BIOS_ERR_TIMEOUT error
.395f74		82 9c 00	brl $396013	                    BRL pass_error
.395f77		af f4 13 af	lda $af13f4	chk_rd_rdy          LDA @l SIO_FDC_MSR                      ; Wait for data to be ready
.395f7b		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.395f7d		c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.395f7f		d0 eb		bne $395f6c	                    BNE rd_data_rdy
.395f81		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.395f85		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.395f87		d0 03		bne $395f8c	                    BNE rd_data_phase                       ; If so: transfer the data
.395f89		82 83 00	brl $39600f	                    BRL error                               ; If not: it's an error
.395f8c						rd_data_phase
.395f8c		c2 10		rep #$10	                REP #$10        ; set X long
.395f8e		a0 00 00	ldy #$0000	                    LDY #0
.395f91		a5 0b		lda $030b	rd_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.395f93		10 db		bpl $395f70	                    BPL time_out                            ; If not: throw a timeout error
.395f95		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Wait for the next byte to be ready
.395f99		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.395f9b		c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.395f9d		d0 f2		bne $395f91	                    BNE rd_data_loop
.395f9f		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Get the data byte
.395fa3		97 26		sta [$0326],y	                    STA [BIOS_BUFF_PTR],Y                   ; And save it to the buffer
.395fa5		c8		iny		                    INY                                     ; Move to the next position
.395fa6		c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.395fa9		d0 e6		bne $395f91	                    BNE rd_data_loop                        ; If not at the end, keep fetching
.395fab		ad 32 05	lda $0532	result_phase        LDA FDC_RESULT_NUM                      ; If no results are expected...
.395fae		f0 34		beq $395fe4	                    BEQ chk_busy                            ; Then we're done
.395fb0		e2 10		sep #$10	                SEP #$10        ; set X short
.395fb2		a2 00		ldx #$00	                    LDX #0
.395fb4		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME                      ; Set the watchdog timer
.395fb6		22 4c 3d 39	jsl $393d4c	                    JSL ISETTIMEOUT
.395fba		20 5d 5e	jsr $395e5d	result_loop         JSR FDC_Can_Read_Data                   ; Wait until we can read
.395fbd		90 b1		bcc $395f70	                    BCC time_out                            ; If there was a time out, raise an error
.395fbf		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Yes: get the data
.395fc3		20 5d 5e	jsr $395e5d	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.395fc6		90 a8		bcc $395f70	                    BCC time_out                            ; If there was a time out, raise an error
.395fc8		af f5 13 af	lda $af13f5	read_result         LDA @l SIO_FDC_DTA                      ; Yes: get the data
.395fcc		9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X                       ; Save it to the result buffer
.395fcf		20 d3 5d	jsr $395dd3	                    JSR FDC_Check_RQM
.395fd2		90 9c		bcc $395f70	                    BCC time_out                            ; If there was a time out, flag the error
.395fd4		af f4 13 af	lda $af13f4	rd_chk_1            LDA @l SIO_FDC_MSR
.395fd8		29 50		and #$50	                    AND #FDC_MSR_DIO | FDC_MSR_CMDBSY
.395fda		c9 50		cmp #$50	                    CMP #FDC_MSR_DIO | FDC_MSR_CMDBSY
.395fdc		d0 06		bne $395fe4	                    BNE chk_busy
.395fde		e8		inx		                    INX                                     ; Move to the next result positions
.395fdf		ec 32 05	cpx $0532	                    CPX FDC_RESULT_NUM
.395fe2		d0 e4		bne $395fc8	                    BNE read_result                         ; And keep looping until we've read all
.395fe4						chk_busy
.395fe4		c2 10		rep #$10	                REP #$10        ; set X long
.395fe6		a2 0a 00	ldx #$000a	                    LDX #10                                 ; Wait 10ms (I guess?)
.395fe9		22 62 12 39	jsl $391262	                    JSL ILOOP_MS
.395fed		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check the command busy bit
.395ff1		89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.395ff3		f0 12		beq $396007	                    BEQ done                                ; If not set: we're done
.395ff5		20 5d 5e	jsr $395e5d	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.395ff8		b0 03		bcs $395ffd	                    BCS get_result_byte
.395ffa		82 73 ff	brl $395f70	                    BRL time_out                            ; If there was a time out, flag the error
.395ffd		af f5 13 af	lda $af13f5	get_result_byte     LDA @l SIO_FDC_DTA                      ; Read the data
.396001		9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X
.396004		e8		inx		                    INX
.396005		80 dd		bra $395fe4	                    BRA chk_busy                            ; And keep checking
.396007						done
.396007		64 20		stz $0320	                    STZ BIOS_STATUS
.396009		28		plp		                    PLP
.39600a		2b		pld		                    PLD
.39600b		ab		plb		                    PLB
.39600c		fa		plx		                    PLX
.39600d		38		sec		                    SEC
.39600e		6b		rtl		                    RTL
.39600f						error
.39600f		e2 20		sep #$20	                SEP #$20        ; set A short
.396011		a9 85		lda #$85	                    LDA #BIOS_ERR_CMD
.396013		85 20		sta $0320	pass_error          STA BIOS_STATUS
.396015		28		plp		                    PLP
.396016		2b		pld		                    PLD
.396017		ab		plb		                    PLB
.396018		fa		plx		                    PLX
.396019		18		clc		                    CLC
.39601a		6b		rtl		                    RTL
.39601b						FDC_Init
.39601b		08		php		                    PHP
.39601c		c2 10		rep #$10	                REP #$10        ; set X long
.39601e		e2 20		sep #$20	                SEP #$20        ; set A short
.396020		a9 00		lda #$00	                    LDA #0
.396022		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.396026		a2 e8 03	ldx #$03e8	                    LDX #1000                   ; Wait
.396029		a0 00 00	ldy #$0000	                    LDY #0
.39602c		22 6f 12 39	jsl $39126f	                    JSL IDELAY
.396030		a9 04		lda #$04	                    LDA #FDC_DOR_NRESET         ; Reset the FDC
.396032		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.396036		ea		nop		                    NOP
.396037		ea		nop		                    NOP
.396038		ea		nop		                    NOP
.396039		ea		nop		                    NOP
.39603a		a9 00		lda #$00	                    LDA #$00                    ; Make sure the Speed and Compensation has been set
.39603c		8f f4 13 af	sta $af13f4	                    STA @l SIO_FDC_DSR
.396040		a9 00		lda #$00	                    LDA #$00                    ; Precompensation set to 0
.396042		8f f7 13 af	sta $af13f7	                    STA @l SIO_FDC_CCR
.396046		a2 8f c5	ldx #$c58f	                    LDX #<>FDC_SEEK_TIME
.396049		a0 20 00	ldy #$0020	                    LDY #`FDC_SEEK_TIME
.39604c		22 6f 12 39	jsl $39126f	                    JSL IDELAY
.396050		22 2b 61 39	jsl $39612b	                    JSL FDC_Sense_Int_Status
.396054		90 25		bcc $39607b	                    BCC pass_failure
.396056		22 2b 61 39	jsl $39612b	                    JSL FDC_Sense_Int_Status
.39605a		90 1f		bcc $39607b	                    BCC pass_failure
.39605c		22 2b 61 39	jsl $39612b	                    JSL FDC_Sense_Int_Status
.396060		90 19		bcc $39607b	                    BCC pass_failure
.396062		22 2b 61 39	jsl $39612b	                    JSL FDC_Sense_Int_Status
.396066		90 13		bcc $39607b	                    BCC pass_failure
.396068		22 ed 61 39	jsl $3961ed	                    JSL FDC_Configure_Command
.39606c		90 0d		bcc $39607b	                    BCC pass_failure
.39606e		22 94 61 39	jsl $396194	                    JSL FDC_Specify_Command
.396072		90 07		bcc $39607b	                    BCC pass_failure
.396074		22 97 60 39	jsl $396097	                    JSL FDC_Motor_On
.396078		28		plp		                    PLP
.396079		38		sec		                    SEC
.39607a		6b		rtl		                    RTL
.39607b		28		plp		pass_failure        PLP
.39607c		18		clc		                    CLC
.39607d		6b		rtl		                    RTL
.39607e						FDC_MOTOR_NEEDED
.39607e		08		php		                    PHP
.39607f		c2 20		rep #$20	                REP #$20        ; set A long
.396081		78		sei		                    SEI                         ; Turn off interrupts
.396082		a9 84 03	lda #$0384	                    LDA #FDC_MOTOR_ON_TIME      ; Reset the FDC timeout clock
.396085		8f 4e a0 38	sta $38a04e	                    STA @l FDC_MOTOR_TIMER
.396089		e2 20		sep #$20	                SEP #$20        ; set A short
.39608b		af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.39608f		29 fe		and #$fe	                    AND #~FNX0_INT00_SOF        ; Enable the SOF interrupt
.396091		8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.396095		28		plp		                    PLP
.396096		6b		rtl		                    RTL
.396097						FDC_Motor_On
.396097		08		php		                    PHP
.396098		22 7e 60 39	jsl $39607e	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.39609c		e2 20		sep #$20	                SEP #$20        ; set A short
.39609e		af f2 13 af	lda $af13f2	                    LDA @l SIO_FDC_DOR          ; Check to see if the motor is already on
.3960a2		89 10		bit #$10	                    BIT #FDC_DOR_MOT0
.3960a4		d0 1f		bne $3960c5	                    BNE done                    ; If so: skip
.3960a6		a9 14		lda #$14	                    LDA #FDC_DOR_MOT0 | FDC_DOR_NRESET
.3960a8		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.3960ac		20 d3 5d	jsr $395dd3	                    JSR FDC_Check_RQM           ; Make sure we can leave knowing that everything set properly
.3960af		90 17		bcc $3960c8	                    BCC time_out
.3960b1		a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.3960b4		a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.3960b7		22 6f 12 39	jsl $39126f	                    JSL IDELAY
.3960bb		af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.3960bf		09 80		ora #$80	                    ORA #$80                    ; Flag that the motor should be on
.3960c1		8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.3960c5		28		plp		done                PLP
.3960c6		38		sec		                    SEC
.3960c7		6b		rtl		                    RTL
.3960c8		28		plp		time_out            PLP                         ; Return a timeout error
.3960c9		18		clc		                    CLC
.3960ca		6b		rtl		                    RTL
.3960cb						FDC_Motor_Off
.3960cb		08		php		                    PHP
.3960cc		e2 20		sep #$20	                SEP #$20        ; set A short
.3960ce		a9 04		lda #$04	                    LDA #FDC_DOR_NRESET
.3960d0		8f f2 13 af	sta $af13f2	                    STA @L SIO_FDC_DOR
.3960d4		c2 20		rep #$20	                REP #$20        ; set A long
.3960d6		78		sei		                    SEI                         ; Turn off interrupts
.3960d7		a9 00 00	lda #$0000	                    LDA #0                      ; Set FDC motor timeout counter to 0 to disable it
.3960da		8f 4e a0 38	sta $38a04e	                    STA @l FDC_MOTOR_TIMER
.3960de		e2 20		sep #$20	                SEP #$20        ; set A short
.3960e0		af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.3960e4		09 01		ora #$01	                    ORA #FNX0_INT00_SOF         ; Disable the SOF interrupt
.3960e6		8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.3960ea		af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.3960ee		29 7f		and #$7f	                    AND #$7F                    ; Flag that the motor should be off
.3960f0		8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.3960f4		28		plp		                    PLP
.3960f5		6b		rtl		                    RTL
.3960f6						FDC_Recalibrate_Command
.3960f6		0b		phd		                    PHD
.3960f7		08		php		                    PHP
.3960f8		48		pha		                PHA             ; begin setdp macro
.3960f9		08		php		                PHP
.3960fa		c2 20		rep #$20	                REP #$20        ; set A long
.3960fc		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3960ff		5b		tcd		                TCD
.396100		28		plp		                PLP
.396101		68		pla		                PLA             ; end setdp macro
.396102		22 7e 60 39	jsl $39607e	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.396106		e2 20		sep #$20	                SEP #$20        ; set A short
.396108		a9 07		lda #$07	                    LDA #FDC_CMD_RECALIBRATE    ; RECALIBRATE Command
.39610a		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.39610d		a5 00		lda $0300	                    LDA FDC_DRIVE
.39610f		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.396112		a9 02		lda #$02	                    LDA #2
.396114		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM           ; 2 parameters
.396117		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT          ; 0 data
.39611a		9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM          ; 0 results
.39611d		22 ce 5e 39	jsl $395ece	                    JSL FDC_COMMAND             ; Issue the command
.396121		90 04		bcc $396127	                    BCC pass_failure            ; If failure, pass the failure up
.396123		28		plp		                    PLP
.396124		2b		pld		                    PLD
.396125		38		sec		                    SEC
.396126		6b		rtl		                    RTL
.396127		28		plp		pass_failure        PLP
.396128		2b		pld		                    PLD
.396129		18		clc		                    CLC
.39612a		6b		rtl		                    RTL
.39612b						FDC_Sense_Int_Status
.39612b		8b		phb		                    PHB
.39612c		0b		phd		                    PHD
.39612d		08		php		                    PHP
.39612e		48		pha		                PHA             ; begin setdbr macro
.39612f		08		php		                PHP
.396130		e2 20		sep #$20	                SEP #$20        ; set A short
.396132		a9 00		lda #$00	                LDA #0
.396134		48		pha		                PHA
.396135		ab		plb		                PLB
.396136		28		plp		                PLP
.396137		68		pla		                PLA             ; end setdbr macro
.396138		48		pha		                PHA             ; begin setdp macro
.396139		08		php		                PHP
.39613a		c2 20		rep #$20	                REP #$20        ; set A long
.39613c		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39613f		5b		tcd		                TCD
.396140		28		plp		                PLP
.396141		68		pla		                PLA             ; end setdp macro
.396142		c2 30		rep #$30	                REP #$30        ; set A&X long
.396144		a2 0a 00	ldx #$000a	                    LDX #10                            ; Wait for 10ms
.396147		22 62 12 39	jsl $391262	                    JSL ILOOP_MS
.39614b		e2 20		sep #$20	                SEP #$20        ; set A short
.39614d		64 06		stz $0306	                    STZ FDC_ST0                         ; Clear ST0
.39614f		a9 ff		lda #$ff	                    LDA #$FF
.396151		85 0a		sta $030a	                    STA FDC_PCN                         ; Set PCN to some obviously bad value
.396153		20 2f 5e	jsr $395e2f	                    JSR FDC_Check_CMD_BSY               ; Check I can send a command
.396156		90 30		bcc $396188	                    BCC time_out                        ; If there was a time out, raise an error
.396158		20 d3 5d	jsr $395dd3	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.39615b		90 2b		bcc $396188	                    BCC time_out                        ; If there was a time out, raise an error
.39615d		a9 08		lda #$08	                    LDA #FDC_CMD_SENSE_INTERRUPT
.39615f		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.396163		20 5d 5e	jsr $395e5d	                    JSR FDC_Can_Read_Data
.396166		90 20		bcc $396188	                    BCC time_out                        ; If there was a time out, raise an error
.396168		20 d3 5d	jsr $395dd3	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.39616b		90 1b		bcc $396188	                    BCC time_out                        ; If there was a time out, raise an error
.39616d		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.396171		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.396173		20 d3 5d	jsr $395dd3	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.396176		90 10		bcc $396188	                    BCC time_out                        ; If there was a time out, raise an error
.396178		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.39617c		85 0a		sta $030a	                    STA FDC_PCN                         ; --- Cylinder ---
.39617e		e2 20		sep #$20	                SEP #$20        ; set A short
.396180		9c 20 03	stz $0320	                    STZ @w BIOS_STATUS
.396183		28		plp		                    PLP
.396184		2b		pld		                    PLD
.396185		ab		plb		                    PLB
.396186		38		sec		                    SEC
.396187		6b		rtl		                    RTL
.396188						time_out
.396188		e2 20		sep #$20	                SEP #$20        ; set A short
.39618a		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT               ; Return a time out error
.39618c		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.39618f		28		plp		                    PLP
.396190		2b		pld		                    PLD
.396191		ab		plb		                    PLB
.396192		18		clc		                    CLC
.396193		6b		rtl		                    RTL
.396194						FDC_Specify_Command
.396194		8b		phb		                    PHB
.396195		0b		phd		                    PHD
.396196		08		php		                    PHP
.396197		48		pha		                PHA             ; begin setdbr macro
.396198		08		php		                PHP
.396199		e2 20		sep #$20	                SEP #$20        ; set A short
.39619b		a9 00		lda #$00	                LDA #0
.39619d		48		pha		                PHA
.39619e		ab		plb		                PLB
.39619f		28		plp		                PLP
.3961a0		68		pla		                PLA             ; end setdbr macro
.3961a1		48		pha		                PHA             ; begin setdp macro
.3961a2		08		php		                PHP
.3961a3		c2 20		rep #$20	                REP #$20        ; set A long
.3961a5		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3961a8		5b		tcd		                TCD
.3961a9		28		plp		                PLP
.3961aa		68		pla		                PLA             ; end setdp macro
.3961ab		c2 30		rep #$30	                REP #$30        ; set A&X long
.3961ad		a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.3961b0		22 62 12 39	jsl $391262	                    JSL ILOOP_MS
.3961b4		e2 20		sep #$20	                SEP #$20        ; set A short
.3961b6		20 2f 5e	jsr $395e2f	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.3961b9		90 26		bcc $3961e1	                    BCC time_out            ; If there was a time out, raise an error
.3961bb		20 d3 5d	jsr $395dd3	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.3961be		90 21		bcc $3961e1	                    BCC time_out            ; If there was a time out, raise an error
.3961c0		a9 03		lda #$03	                    LDA #FDC_CMD_SPECIFY    ; Specify Command
.3961c2		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.3961c6		20 d3 5d	jsr $395dd3	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.3961c9		90 16		bcc $3961e1	                    BCC time_out            ; If there was a time out, raise an error
.3961cb		a9 cf		lda #$cf	                    LDA #$CF
.3961cd		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.3961d1		20 d3 5d	jsr $395dd3	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.3961d4		90 0b		bcc $3961e1	                    BCC time_out            ; If there was a time out, raise an error
.3961d6		a9 01		lda #$01	                    LDA #$01                ; 1 = Non-DMA
.3961d8		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.3961dc		28		plp		                    PLP
.3961dd		2b		pld		                    PLD
.3961de		ab		plb		                    PLB
.3961df		38		sec		                    SEC
.3961e0		6b		rtl		                    RTL
.3961e1						time_out
.3961e1		e2 20		sep #$20	                SEP #$20        ; set A short
.3961e3		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.3961e5		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.3961e8		28		plp		                    PLP
.3961e9		2b		pld		                    PLD
.3961ea		ab		plb		                    PLB
.3961eb		18		clc		                    CLC
.3961ec		6b		rtl		                    RTL
.3961ed						FDC_Configure_Command
.3961ed		8b		phb		                    PHB
.3961ee		0b		phd		                    PHD
.3961ef		08		php		                    PHP
.3961f0		48		pha		                PHA             ; begin setdbr macro
.3961f1		08		php		                PHP
.3961f2		e2 20		sep #$20	                SEP #$20        ; set A short
.3961f4		a9 00		lda #$00	                LDA #0
.3961f6		48		pha		                PHA
.3961f7		ab		plb		                PLB
.3961f8		28		plp		                PLP
.3961f9		68		pla		                PLA             ; end setdbr macro
.3961fa		48		pha		                PHA             ; begin setdp macro
.3961fb		08		php		                PHP
.3961fc		c2 20		rep #$20	                REP #$20        ; set A long
.3961fe		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396201		5b		tcd		                TCD
.396202		28		plp		                PLP
.396203		68		pla		                PLA             ; end setdp macro
.396204		c2 30		rep #$30	                REP #$30        ; set A&X long
.396206		a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.396209		22 62 12 39	jsl $391262	                    JSL ILOOP_MS
.39620d		e2 20		sep #$20	                SEP #$20        ; set A short
.39620f		20 2f 5e	jsr $395e2f	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.396212		90 36		bcc $39624a	                    BCC time_out            ; If there was a time out, raise an error
.396214		20 d3 5d	jsr $395dd3	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.396217		90 31		bcc $39624a	                    BCC time_out            ; If there was a time out, raise an error
.396219		a9 13		lda #$13	                    LDA #FDC_CMD_CONFIGURE  ; Specify Command
.39621b		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.39621f		20 d3 5d	jsr $395dd3	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.396222		90 26		bcc $39624a	                    BCC time_out            ; If there was a time out, raise an error
.396224		a9 00		lda #$00	                    LDA #$00
.396226		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.39622a		20 d3 5d	jsr $395dd3	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.39622d		90 1b		bcc $39624a	                    BCC time_out            ; If there was a time out, raise an error
.39622f		a9 44		lda #$44	                    LDA #$44                ; Implied Seek, FIFOTHR = 4 byte
.396231		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.396235		20 d3 5d	jsr $395dd3	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.396238		90 10		bcc $39624a	                    BCC time_out            ; If there was a time out, raise an error
.39623a		a9 00		lda #$00	                    LDA #$00
.39623c		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.396240		20 2f 5e	jsr $395e2f	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.396243		90 05		bcc $39624a	                    BCC time_out            ; If there was a time out, raise an error
.396245		28		plp		                    PLP
.396246		2b		pld		                    PLD
.396247		ab		plb		                    PLB
.396248		38		sec		                    SEC
.396249		6b		rtl		                    RTL
.39624a						time_out
.39624a		e2 20		sep #$20	                SEP #$20        ; set A short
.39624c		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.39624e		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.396251		28		plp		                    PLP
.396252		2b		pld		                    PLD
.396253		ab		plb		                    PLB
.396254		18		clc		                    CLC
.396255		6b		rtl		                    RTL
.396256						FDC_Read_ID_Command
.396256		8b		phb		                    PHB
.396257		0b		phd		                    PHD
.396258		08		php		                    PHP
.396259		48		pha		                PHA             ; begin setdbr macro
.39625a		08		php		                PHP
.39625b		e2 20		sep #$20	                SEP #$20        ; set A short
.39625d		a9 00		lda #$00	                LDA #0
.39625f		48		pha		                PHA
.396260		ab		plb		                PLB
.396261		28		plp		                PLP
.396262		68		pla		                PLA             ; end setdbr macro
.396263		48		pha		                PHA             ; begin setdp macro
.396264		08		php		                PHP
.396265		c2 20		rep #$20	                REP #$20        ; set A long
.396267		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39626a		5b		tcd		                TCD
.39626b		28		plp		                PLP
.39626c		68		pla		                PLA             ; end setdp macro
.39626d		e2 20		sep #$20	                SEP #$20        ; set A short
.39626f		a9 0a		lda #$0a	                    LDA #FDC_CMD_READ_ID                ; READID Command
.396271		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.396274		a9 01		lda #$01	                    LDA #1
.396276		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.396279		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.39627c		a9 07		lda #$07	                    LDA #7
.39627e		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.396281		22 ce 5e 39	jsl $395ece	                    JSL FDC_COMMAND                     ; Issue the command
.396285		90 27		bcc $3962ae	                    BCC pass_failure
.396287		ad 10 05	lda $0510	                    LDA FDC_RESULTS
.39628a		85 06		sta $0306	                    STA FDC_ST0                         ; Get ST0
.39628c		ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.39628f		85 07		sta $0307	                    STA FDC_ST1                         ; Get ST1
.396291		ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.396294		85 08		sta $0308	                    STA FDC_ST2                         ; Get ST2
.396296		ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.396299		85 02		sta $0302	                    STA FDC_CYLINDER                    ; Get the cylinder
.39629b		ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.39629e		85 01		sta $0301	                    STA FDC_HEAD                        ; Get the head
.3962a0		ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.3962a3		85 0a		sta $030a	                    STA FDC_PCN                         ; Get the sector
.3962a5		ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.3962a8		85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; Get the sector size code
.3962aa		28		plp		                    PLP
.3962ab		2b		pld		                    PLD
.3962ac		ab		plb		                    PLB
.3962ad		6b		rtl		                    RTL
.3962ae		28		plp		pass_failure        PLP
.3962af		2b		pld		                    PLD
.3962b0		ab		plb		                    PLB
.3962b1		18		clc		                    CLC
.3962b2		6b		rtl		                    RTL
.3962b3						FDC_DumpReg_Command
.3962b3		0b		phd		                    PHD
.3962b4		08		php		                    PHP
.3962b5		e2 20		sep #$20	                SEP #$20        ; set A short
.3962b7		a9 0e		lda #$0e	                    LDA #FDC_CMD_DUMPREG                ; DUMPREG Command
.3962b9		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.3962bc		a9 01		lda #$01	                    LDA #1
.3962be		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.3962c1		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.3962c4		a9 0a		lda #$0a	                    LDA #10
.3962c6		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 10 results
.3962c9		22 ce 5e 39	jsl $395ece	                    JSL FDC_COMMAND                     ; Issue the command
.3962cd		90 03		bcc $3962d2	                    BCC pass_failure
.3962cf		28		plp		                    PLP
.3962d0		2b		pld		                    PLD
.3962d1		6b		rtl		                    RTL
.3962d2		28		plp		pass_failure        PLP
.3962d3		2b		pld		                    PLD
.3962d4		18		clc		                    CLC
.3962d5		6b		rtl		                    RTL
.3962d6						FDC_Seek_Track
.3962d6		8b		phb		                    PHB
.3962d7		0b		phd		                    PHD
.3962d8		08		php		                    PHP
.3962d9		48		pha		                PHA             ; begin setdbr macro
.3962da		08		php		                PHP
.3962db		e2 20		sep #$20	                SEP #$20        ; set A short
.3962dd		a9 00		lda #$00	                LDA #0
.3962df		48		pha		                PHA
.3962e0		ab		plb		                PLB
.3962e1		28		plp		                PLP
.3962e2		68		pla		                PLA             ; end setdbr macro
.3962e3		48		pha		                PHA             ; begin setdp macro
.3962e4		08		php		                PHP
.3962e5		c2 20		rep #$20	                REP #$20        ; set A long
.3962e7		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3962ea		5b		tcd		                TCD
.3962eb		28		plp		                PLP
.3962ec		68		pla		                PLA             ; end setdp macro
.3962ed		22 7e 60 39	jsl $39607e	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.3962f1		e2 20		sep #$20	                SEP #$20        ; set A short
.3962f3		a9 0f		lda #$0f	                    LDA #FDC_CMD_SEEK                   ; Seek Command
.3962f5		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.3962f8		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.3962fa		29 01		and #$01	                    AND #$01
.3962fc		0a		asl a		                    ASL A
.3962fd		0a		asl a		                    ASL A
.3962fe		05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.396300		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.396303		a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; And the track
.396305		8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.396308		a9 03		lda #$03	                    LDA #3
.39630a		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 3 parameter (the command)
.39630d		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.396310		9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM                  ; 0 results
.396313		22 ce 5e 39	jsl $395ece	                    JSL FDC_COMMAND                     ; Issue the command
.396317		90 05		bcc $39631e	                    BCC pass_failure
.396319		28		plp		                    PLP
.39631a		2b		pld		                    PLD
.39631b		ab		plb		                    PLB
.39631c		38		sec		                    SEC
.39631d		6b		rtl		                    RTL
.39631e		28		plp		pass_failure        PLP
.39631f		2b		pld		                    PLD
.396320		ab		plb		                    PLB
.396321		18		clc		                    CLC
.396322		6b		rtl		                    RTL
.396323						FDC_Read_Sector
.396323		8b		phb		                    PHB
.396324		0b		phd		                    PHD
.396325		08		php		                    PHP
.396326		48		pha		                PHA             ; begin setdbr macro
.396327		08		php		                PHP
.396328		e2 20		sep #$20	                SEP #$20        ; set A short
.39632a		a9 00		lda #$00	                LDA #0
.39632c		48		pha		                PHA
.39632d		ab		plb		                PLB
.39632e		28		plp		                PLP
.39632f		68		pla		                PLA             ; end setdbr macro
.396330		48		pha		                PHA             ; begin setdp macro
.396331		08		php		                PHP
.396332		c2 20		rep #$20	                REP #$20        ; set A long
.396334		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396337		5b		tcd		                TCD
.396338		28		plp		                PLP
.396339		68		pla		                PLA             ; end setdp macro
.39633a		22 7e 60 39	jsl $39607e	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.39633e		e2 20		sep #$20	                SEP #$20        ; set A short
.396340		a9 06		lda #$06	                    LDA #FDC_CMD_READ_DATA              ; The READ_DATA command
.396342		09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.396344		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.396347		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.396349		29 01		and #$01	                    AND #$01
.39634b		0a		asl a		                    ASL A
.39634c		0a		asl a		                    ASL A
.39634d		05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.39634f		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.396352		a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.396354		8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.396357		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.396359		8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.39635c		a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.39635e		8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.396361		a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.396363		8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.396366		a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.396368		8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.39636b		a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.39636d		8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.396370		a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.396372		8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.396375		a9 09		lda #$09	                    LDA #9
.396377		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.39637a		a9 01		lda #$01	                    LDA #1
.39637c		8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect data
.39637f		a9 07		lda #$07	                    LDA #7
.396381		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.396384		22 ce 5e 39	jsl $395ece	command             JSL FDC_COMMAND                     ; Issue the command
.396388		08		php		                    PHP
.396389		ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.39638c		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ----
.39638e		ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.396391		85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ----
.396393		ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.396396		85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ----
.396398		ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.39639b		85 02		sta $0302	                    STA FDC_CYLINDER                    ; -- C ---
.39639d		ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.3963a0		85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.3963a2		ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.3963a5		85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.3963a7		ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.3963aa		85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.3963ac		28		plp		                    PLP
.3963ad		90 04		bcc $3963b3	                    BCC pass_failure
.3963af		28		plp		done                PLP
.3963b0		2b		pld		                    PLD
.3963b1		ab		plb		                    PLB
.3963b2		6b		rtl		                    RTL
.3963b3		28		plp		pass_failure        PLP
.3963b4		2b		pld		                    PLD
.3963b5		ab		plb		                    PLB
.3963b6		18		clc		                    CLC
.3963b7		6b		rtl		                    RTL
.3963b8						FDC_Write_Sector
.3963b8		8b		phb		                    PHB
.3963b9		0b		phd		                    PHD
.3963ba		08		php		                    PHP
.3963bb		48		pha		                PHA             ; begin setdbr macro
.3963bc		08		php		                PHP
.3963bd		e2 20		sep #$20	                SEP #$20        ; set A short
.3963bf		a9 00		lda #$00	                LDA #0
.3963c1		48		pha		                PHA
.3963c2		ab		plb		                PLB
.3963c3		28		plp		                PLP
.3963c4		68		pla		                PLA             ; end setdbr macro
.3963c5		48		pha		                PHA             ; begin setdp macro
.3963c6		08		php		                PHP
.3963c7		c2 20		rep #$20	                REP #$20        ; set A long
.3963c9		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3963cc		5b		tcd		                TCD
.3963cd		28		plp		                PLP
.3963ce		68		pla		                PLA             ; end setdp macro
.3963cf		e2 20		sep #$20	                SEP #$20        ; set A short
.3963d1		22 7e 60 39	jsl $39607e	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.3963d5		a9 05		lda #$05	                    LDA #FDC_CMD_WRITE_DATA             ; The WRITE_DATA command
.3963d7		09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.3963d9		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.3963dc		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.3963de		29 01		and #$01	                    AND #$01
.3963e0		0a		asl a		                    ASL A
.3963e1		0a		asl a		                    ASL A
.3963e2		05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.3963e4		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.3963e7		a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.3963e9		8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.3963ec		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.3963ee		8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.3963f1		a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.3963f3		8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.3963f6		a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.3963f8		8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.3963fb		a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.3963fd		8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.396400		a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.396402		8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.396405		a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.396407		8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.39640a		a9 09		lda #$09	                    LDA #9
.39640c		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.39640f		a9 ff		lda #$ff	                    LDA #$FF
.396411		8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect to write data
.396414		a9 07		lda #$07	                    LDA #7
.396416		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.396419		22 ce 5e 39	jsl $395ece	command             JSL FDC_COMMAND                     ; Issue the command
.39641d		08		php		                    PHP
.39641e		ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.396421		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.396423		ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.396426		85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ---
.396428		ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.39642b		85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ---
.39642d		ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.396430		85 02		sta $0302	                    STA FDC_CYLINDER                    ; --- C ---
.396432		ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.396435		85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.396437		ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.39643a		85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.39643c		ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.39643f		85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.396441		28		plp		check_status        PLP
.396442		90 04		bcc $396448	                    BCC pass_failure
.396444		28		plp		done                PLP
.396445		2b		pld		                    PLD
.396446		ab		plb		                    PLB
.396447		6b		rtl		                    RTL
.396448		28		plp		pass_failure        PLP
.396449		2b		pld		                    PLD
.39644a		ab		plb		                    PLB
.39644b		18		clc		                    CLC
.39644c		6b		rtl		                    RTL
.39644d						DIVIDE32
.39644d		da		phx		                    PHX
.39644e		5a		phy		                    PHY
.39644f		0b		phd		                    PHD
.396450		08		php		                    PHP
.396451		48		pha		                PHA             ; begin setdp macro
.396452		08		php		                PHP
.396453		c2 20		rep #$20	                REP #$20        ; set A long
.396455		a9 0c 03	lda #$030c	                LDA #DIVIDEND         ; set DP to page 0
.396458		5b		tcd		                TCD
.396459		28		plp		                PLP
.39645a		68		pla		                PLA             ; end setdp macro
.39645b		c2 30		rep #$30	                REP #$30        ; set A&X long
.39645d		64 08		stz $0314	                    STZ REMAINDER           ; Initialize the remainder
.39645f		64 0a		stz $0316	                    STZ REMAINDER+2
.396461		a2 20 00	ldx #$0020	                    LDX #32                 ; Set the number of bits to process
.396464		06 00		asl $030c	loop                ASL DIVIDEND
.396466		26 02		rol $030e	                    ROL DIVIDEND+2
.396468		26 08		rol $0314	                    ROL REMAINDER
.39646a		26 0a		rol $0316	                    ROL REMAINDER+2
.39646c		a5 08		lda $0314	                    LDA REMAINDER
.39646e		38		sec		                    SEC
.39646f		e5 04		sbc $0310	                    SBC DIVISOR
.396471		a8		tay		                    TAY
.396472		a5 0a		lda $0316	                    LDA REMAINDER+2
.396474		e5 06		sbc $0312	                    SBC DIVISOR+2
.396476		90 06		bcc $39647e	                    BCC skip
.396478		85 0a		sta $0316	                    STA REMAINDER+2
.39647a		84 08		sty $0314	                    STY REMAINDER
.39647c		e6 00		inc $030c	                    INC DIVIDEND
.39647e		ca		dex		skip                DEX
.39647f		d0 e3		bne $396464	                    BNE loop
.396481		28		plp		                    PLP
.396482		2b		pld		                    PLD
.396483		7a		ply		                    PLY
.396484		fa		plx		                    PLX
.396485		60		rts		                    RTS
.396486						LBA2CHS
.396486		8b		phb		                    PHB
.396487		0b		phd		                    PHD
.396488		08		php		                    PHP
.396489		48		pha		                PHA             ; begin setdbr macro
.39648a		08		php		                PHP
.39648b		e2 20		sep #$20	                SEP #$20        ; set A short
.39648d		a9 00		lda #$00	                LDA #0
.39648f		48		pha		                PHA
.396490		ab		plb		                PLB
.396491		28		plp		                PLP
.396492		68		pla		                PLA             ; end setdbr macro
.396493		48		pha		                PHA             ; begin setdp macro
.396494		08		php		                PHP
.396495		c2 20		rep #$20	                REP #$20        ; set A long
.396497		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39649a		5b		tcd		                TCD
.39649b		28		plp		                PLP
.39649c		68		pla		                PLA             ; end setdp macro
.39649d		c2 30		rep #$30	                REP #$30        ; set A&X long
.39649f		a5 22		lda $0322	                    LDA BIOS_LBA
.3964a1		85 0c		sta $030c	                    STA DIVIDEND
.3964a3		a5 24		lda $0324	                    LDA BIOS_LBA+2
.3964a5		85 0e		sta $030e	                    STA DIVIDEND+2
.3964a7		a9 24 00	lda #$0024	                    LDA #36
.3964aa		85 10		sta $0310	                    STA DIVISOR
.3964ac		64 12		stz $0312	                    STZ DIVISOR+2
.3964ae		20 4d 64	jsr $39644d	                    JSR DIVIDE32
.3964b1		e2 20		sep #$20	                SEP #$20        ; set A short
.3964b3		a5 0c		lda $030c	                    LDA DIVIDEND
.3964b5		85 02		sta $0302	                    STA FDC_CYLINDER
.3964b7		c2 20		rep #$20	                REP #$20        ; set A long
.3964b9		a5 14		lda $0314	                    LDA REMAINDER
.3964bb		85 0c		sta $030c	                    STA DIVIDEND
.3964bd		a5 16		lda $0316	                    LDA REMAINDER+2
.3964bf		85 0e		sta $030e	                    STA DIVIDEND+2
.3964c1		a9 12 00	lda #$0012	                    LDA #18
.3964c4		85 10		sta $0310	                    STA DIVISOR
.3964c6		64 12		stz $0312	                    STZ DIVISOR+2
.3964c8		20 4d 64	jsr $39644d	                    JSR DIVIDE32
.3964cb		e2 20		sep #$20	                SEP #$20        ; set A short
.3964cd		a5 0c		lda $030c	                    LDA DIVIDEND
.3964cf		29 01		and #$01	                    AND #$01
.3964d1		85 01		sta $0301	                    STA FDC_HEAD
.3964d3		a5 14		lda $0314	                    LDA REMAINDER
.3964d5		1a		inc a		                    INC A
.3964d6		85 03		sta $0303	                    STA FDC_SECTOR
.3964d8		28		plp		                    PLP
.3964d9		2b		pld		                    PLD
.3964da		ab		plb		                    PLB
.3964db		6b		rtl		                    RTL
.3964dc						FDC_GETBLOCK
.3964dc		8b		phb		                    PHB
.3964dd		0b		phd		                    PHD
.3964de		08		php		                    PHP
.3964df		48		pha		                PHA             ; begin setdbr macro
.3964e0		08		php		                PHP
.3964e1		e2 20		sep #$20	                SEP #$20        ; set A short
.3964e3		a9 00		lda #$00	                LDA #0
.3964e5		48		pha		                PHA
.3964e6		ab		plb		                PLB
.3964e7		28		plp		                PLP
.3964e8		68		pla		                PLA             ; end setdbr macro
.3964e9		48		pha		                PHA             ; begin setdp macro
.3964ea		08		php		                PHP
.3964eb		c2 20		rep #$20	                REP #$20        ; set A long
.3964ed		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3964f0		5b		tcd		                TCD
.3964f1		28		plp		                PLP
.3964f2		68		pla		                PLA             ; end setdp macro
.3964f3		e2 20		sep #$20	                SEP #$20        ; set A short
.3964f5		a9 03		lda #$03	                    LDA #3                      ; We can retry 3 times
.3964f7		8d 34 05	sta $0534	                    STA FDC_CMD_RETRY
.3964fa		c2 30		rep #$30	                REP #$30        ; set A&X long
.3964fc		22 86 64 39	jsl $396486	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.396500		e2 20		sep #$20	                SEP #$20        ; set A short
.396502		a5 03		lda $0303	                    LDA FDC_SECTOR              ; Just make sure the sector is ok
.396504		f0 29		beq $39652f	                    BEQ read_failure
.396506						try_read
.396506		c2 20		rep #$20	                REP #$20        ; set A long
.396508		22 23 63 39	jsl $396323	                    JSL FDC_Read_Sector         ; Read the sector
.39650c		90 14		bcc $396522	                    BCC retry
.39650e		e2 20		sep #$20	                SEP #$20        ; set A short
.396510		a5 06		lda $0306	                    LDA FDC_ST0
.396512		29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.396514		d0 19		bne $39652f	                    BNE read_failure
.396516						ret_success
.396516		e2 20		sep #$20	                SEP #$20        ; set A short
.396518		a9 00		lda #$00	                    LDA #0
.39651a		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.39651d		28		plp		                    PLP
.39651e		2b		pld		                    PLD
.39651f		ab		plb		                    PLB
.396520		38		sec		                    SEC
.396521		6b		rtl		                    RTL
.396522						retry
.396522		e2 20		sep #$20	                SEP #$20        ; set A short
.396524		ce 34 05	dec $0534	                    DEC FDC_CMD_RETRY           ; Decrement the retry counter
.396527		30 13		bmi $39653c	                    BMI pass_failure            ; If it's gone negative, we should quit with an error
.396529		22 1b 60 39	jsl $39601b	                    JSL FDC_INIT                ; Otherwise, reinitialize the FDC
.39652d		80 d7		bra $396506	                    BRA try_read                ; And try the read again
.39652f						read_failure
.39652f		e2 20		sep #$20	                SEP #$20        ; set A short
.396531		a9 82		lda #$82	                    LDA #BIOS_ERR_READ
.396533		80 04		bra $396539	                    BRA ret_failure
.396535						seek_failure
.396535		e2 20		sep #$20	                SEP #$20        ; set A short
.396537		a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.396539		8d 20 03	sta $0320	ret_failure         STA @w BIOS_STATUS
.39653c		28		plp		pass_failure        PLP
.39653d		2b		pld		                    PLD
.39653e		ab		plb		                    PLB
.39653f		18		clc		                    CLC
.396540		6b		rtl		                    RTL
.396541						FDC_PUTBLOCK
.396541		8b		phb		                    PHB
.396542		0b		phd		                    PHD
.396543		08		php		                    PHP
.396544		48		pha		                PHA             ; begin setdbr macro
.396545		08		php		                PHP
.396546		e2 20		sep #$20	                SEP #$20        ; set A short
.396548		a9 00		lda #$00	                LDA #0
.39654a		48		pha		                PHA
.39654b		ab		plb		                PLB
.39654c		28		plp		                PLP
.39654d		68		pla		                PLA             ; end setdbr macro
.39654e		48		pha		                PHA             ; begin setdp macro
.39654f		08		php		                PHP
.396550		c2 20		rep #$20	                REP #$20        ; set A long
.396552		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396555		5b		tcd		                TCD
.396556		28		plp		                PLP
.396557		68		pla		                PLA             ; end setdp macro
.396558		e2 20		sep #$20	                SEP #$20        ; set A short
.39655a		a9 03		lda #$03	                    LDA #3                      ; Set the number of retries we're willing to do
.39655c		8d 34 05	sta $0534	                    STA @w FDC_CMD_RETRY
.39655f		c2 30		rep #$30	                REP #$30        ; set A&X long
.396561		22 86 64 39	jsl $396486	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.396565		22 b8 63 39	jsl $3963b8	retry               JSL FDC_Write_Sector        ; Write the sector
.396569		b0 03		bcs $39656e	                    BCS chk_st0
.39656b		82 28 00	brl $396596	                    BRL attempt_retry
.39656e						chk_st0
.39656e		e2 20		sep #$20	                SEP #$20        ; set A short
.396570		a5 06		lda $0306	                    LDA FDC_ST0
.396572		29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.396574		d0 0c		bne $396582	                    BNE write_failure
.396576						ret_success
.396576		e2 20		sep #$20	                SEP #$20        ; set A short
.396578		a9 00		lda #$00	                    LDA #0
.39657a		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.39657d		28		plp		                    PLP
.39657e		2b		pld		                    PLD
.39657f		ab		plb		                    PLB
.396580		38		sec		                    SEC
.396581		6b		rtl		                    RTL
.396582						write_failure
.396582		e2 20		sep #$20	                SEP #$20        ; set A short
.396584		a5 07		lda $0307	                    LDA FDC_ST1                         ; Check ST1 for write protect
.396586		89 02		bit #$02	                    BIT #FDC_ST1_NW
.396588		f0 04		beq $39658e	                    BEQ generic_err
.39658a		a9 86		lda #$86	                    LDA #BIOS_ERR_WRITEPROT             ; Yes: return a write-protect error
.39658c		80 17		bra $3965a5	                    BRA ret_failure
.39658e		89 10		bit #$10	generic_err         BIT #FDC_ST1_OR                     ; TODO: properly handle over/under run errors
.396590		d0 e4		bne $396576	                    BNE ret_success
.396592		89 80		bit #$80	                    BIT #FDC_ST1_EN                     ; TODO: properly handle end-of-track
.396594		d0 e0		bne $396576	                    BNE ret_success
.396596						attempt_retry
.396596		e2 20		sep #$20	                SEP #$20        ; set A short
.396598		ce 34 05	dec $0534	                    DEC @w FDC_CMD_RETRY                ; Count down the retries
.39659b		d0 c8		bne $396565	                    BNE retry                           ; And retry unless we have none left
.39659d		a9 83		lda #$83	                    LDA #BIOS_ERR_WRITE                 ; Otherwise: return a generic write error
.39659f		80 04		bra $3965a5	                    BRA ret_failure
.3965a1						seek_failure
.3965a1		e2 20		sep #$20	                SEP #$20        ; set A short
.3965a3		a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.3965a5						ret_failure
.3965a5		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.3965a8		28		plp		pass_failure        PLP
.3965a9		2b		pld		                    PLD
.3965aa		ab		plb		                    PLB
.3965ab		18		clc		                    CLC
.3965ac		6b		rtl		                    RTL
.3965ad						FDC_MOUNT
.3965ad		8b		phb		                    PHB
.3965ae		0b		phd		                    PHD
.3965af		08		php		                    PHP
.3965b0		48		pha		                PHA             ; begin setdbr macro
.3965b1		08		php		                PHP
.3965b2		e2 20		sep #$20	                SEP #$20        ; set A short
.3965b4		a9 00		lda #$00	                LDA #0
.3965b6		48		pha		                PHA
.3965b7		ab		plb		                PLB
.3965b8		28		plp		                PLP
.3965b9		68		pla		                PLA             ; end setdbr macro
.3965ba		48		pha		                PHA             ; begin setdp macro
.3965bb		08		php		                PHP
.3965bc		c2 20		rep #$20	                REP #$20        ; set A long
.3965be		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3965c1		5b		tcd		                TCD
.3965c2		28		plp		                PLP
.3965c3		68		pla		                PLA             ; end setdp macro
.3965c4		22 1b 60 39	jsl $39601b	                    JSL FDC_INIT
.3965c8		e2 20		sep #$20	                SEP #$20        ; set A short
.3965ca		c2 10		rep #$10	                REP #$10        ; set X long
.3965cc		a9 00		lda #$00	                    LDA #0
.3965ce		a2 00 00	ldx #$0000	                    LDX #0
.3965d1		9f 00 a3 38	sta $38a300,x	zero_loop           STA DOS_SECTOR,X
.3965d5		e8		inx		                    INX
.3965d6		e0 00 02	cpx #$0200	                    CPX #512
.3965d9		d0 f6		bne $3965d1	                    BNE zero_loop
.3965db		a9 00		lda #$00	                    LDA #0                                  ; We only support drive 0
.3965dd		85 00		sta $0300	                    STA FDC_DRIVE
.3965df		22 97 60 39	jsl $396097	                    JSL FDC_Motor_On                        ; Turn the motor on
.3965e3		c2 30		rep #$30	                REP #$30        ; set A&X long
.3965e5		a9 00 00	lda #$0000	                    LDA #0                                  ; We want sector 0
.3965e8		85 22		sta $0322	                    STA BIOS_LBA
.3965ea		85 24		sta $0324	                    STA BIOS_LBA+2
.3965ec		a9 00 a3	lda #$a300	                    LDA #<>DOS_SECTOR                       ; And load it into DOS_SECTOR
.3965ef		85 26		sta $0326	                    STA BIOS_BUFF_PTR
.3965f1		a9 38 00	lda #$0038	                    LDA #`DOS_SECTOR
.3965f4		85 28		sta $0328	                    STA BIOS_BUFF_PTR+2
.3965f6		22 dc 64 39	jsl $3964dc	                    JSL FDC_GETBLOCK                        ; Attempt to read the data
.3965fa		b0 03		bcs $3965ff	                    BCS parse_boot                          ; If ok: start parsing the boot record
.3965fc		82 d3 00	brl $3966d2	                    BRL pass_failure                        ; Pass the error up the chain
.3965ff						parse_boot
.3965ff		e2 20		sep #$20	                SEP #$20        ; set A short
.396601		a9 00		lda #$00	                    LDA #PART_TYPE_FAT12                    ; Set the file system to FAT12
.396603		8f 01 a0 38	sta $38a001	                    STA @l FILE_SYSTEM
.396607		a9 00		lda #$00	                    LDA #0                                  ; There are no partitions on the disk
.396609		8f 02 a0 38	sta $38a002	                    STA @l PARTITION
.39660d		e2 20		sep #$20	                SEP #$20        ; set A short
.39660f		af 0d a3 38	lda $38a30d	                    LDA DOS_SECTOR+BPB_SECPERCLUS12_OFF     ; Get the # of sectors per cluster (usually 1)
.396613		8f 03 a0 38	sta $38a003	                    STA @l SECTORS_PER_CLUSTER
.396617		c2 20		rep #$20	                REP #$20        ; set A long
.396619		a9 00 00	lda #$0000	                    LDA #0                                  ; First sector of the "partition" is 0
.39661c		8f 04 a0 38	sta $38a004	                    STA @l FIRSTSECTOR
.396620		8f 06 a0 38	sta $38a006	                    STA @l FIRSTSECTOR+2
.396624		af 16 a3 38	lda $38a316	                    LDA DOS_SECTOR+BPB_SECPERFAT12_OFF      ; Get the number of sectors per FAT
.396628		8f 10 a0 38	sta $38a010	                    STA @l SEC_PER_FAT
.39662c		a9 00 00	lda #$0000	                    LDA #0
.39662f		8f 12 a0 38	sta $38a012	                    STA @l SEC_PER_FAT+2
.396633		a9 01 00	lda #$0001	                    LDA #1                                  ; FAT#1 begins at sector 1
.396636		8f 14 a0 38	sta $38a014	                    STA @l FAT_BEGIN_LBA
.39663a		18		clc		                    CLC
.39663b		6f 10 a0 38	adc $38a010	                    ADC @l SEC_PER_FAT
.39663f		8f 18 a0 38	sta $38a018	                    STA @l FAT2_BEGIN_LBA                   ; FAT#2 begins SEC_PER_FAT sectors later
.396643		a9 00 00	lda #$0000	                    LDA #0
.396646		8f 16 a0 38	sta $38a016	                    STA @l FAT_BEGIN_LBA+2
.39664a		8f 1a a0 38	sta $38a01a	                    STA @L FAT2_BEGIN_LBA+2
.39664e		18		clc		                    CLC                                     ; Calculate the root directory's starting sector
.39664f		af 18 a0 38	lda $38a018	                    LDA @l FAT2_BEGIN_LBA
.396653		6f 10 a0 38	adc $38a010	                    ADC @l SEC_PER_FAT
.396657		8f 20 a0 38	sta $38a020	                    STA @l ROOT_DIR_FIRST_CLUSTER           ; ROOT_DIR_FIRST_CLUSTER will be a sector LBA for FAT12!
.39665b		a9 00 00	lda #$0000	                    LDA #0
.39665e		8f 22 a0 38	sta $38a022	                    STA @l ROOT_DIR_FIRST_CLUSTER+2
.396662		af 11 a3 38	lda $38a311	                    LDA DOS_SECTOR+BPB_ROOT_MAX_ENTRY12_OFF ; Get the maximum number of directory entries for the root dir
.396666		8f 24 a0 38	sta $38a024	                    STA @l ROOT_DIR_MAX_ENTRY
.39666a		4a		lsr a		                    LSR A                                   ; 16 entries per sector
.39666b		4a		lsr a		                    LSR A
.39666c		4a		lsr a		                    LSR A
.39666d		4a		lsr a		                    LSR A                                   ; So now A is the number of sectors in the root directory
.39666e		18		clc		                    CLC
.39666f		6f 20 a0 38	adc $38a020	                    ADC @L ROOT_DIR_FIRST_CLUSTER           ; Add that to the first sector LBA for the root directory
.396673		8f 1c a0 38	sta $38a01c	                    STA @l CLUSTER_BEGIN_LBA                ; And that is the LBA for the first cluster
.396677		a9 00 00	lda #$0000	                    LDA #0
.39667a		8f 1e a0 38	sta $38a01e	                    STA @l CLUSTER_BEGIN_LBA+2
.39667e		af 13 a3 38	lda $38a313	                    LDA DOS_SECTOR+BPB_TOTAL_SECTORS        ; Set the sector limit
.396682		8f 08 a0 38	sta $38a008	                    STA @l SECTORCOUNT
.396686		a9 00 00	lda #$0000	                    LDA #0
.396689		8f 0a a0 38	sta $38a00a	                    STA @l SECTORCOUNT+2
.39668d		af 0e a3 38	lda $38a30e	                    LDA DOS_SECTOR+BPB_RSRVCLUS_OFF         ; Get the number of reserved clusters
.396691		8f 0c a0 38	sta $38a00c	                    STA @l NUM_RSRV_SEC
.396695		a9 00 02	lda #$0200	                    LDA #DOS_SECTOR_SIZE                    ; Set the size of a FAT12 cluster
.396698		8f 0e a0 38	sta $38a00e	                    STA @l CLUSTER_SIZE
.39669c		e2 20		sep #$20	                SEP #$20        ; set A short
.39669e		af 26 a3 38	lda $38a326	                    LDA DOS_SECTOR+BPB_SIGNATUREB           ; Is signature B $29?
.3966a2		c9 29		cmp #$29	                    CMP #BPB_EXTENDED_RECORD
.3966a4		80 14		bra $3966ba	                    BRA no_volume_id                        ; No: there is no volume ID
.3966a6						is_extended
.3966a6		c2 20		rep #$20	                REP #$20        ; set A long
.3966a8		af 27 a3 38	lda $38a327	                    LDA DOS_SECTOR+BPB_VOLUMEID             ; Yes: set the volume ID
.3966ac		8f 26 a0 38	sta $38a026	                    STA @l VOLUME_ID
.3966b0		af 29 a3 38	lda $38a329	                    LDA DOS_SECTOR+BPB_VOLUMEID+2
.3966b4		8f 28 a0 38	sta $38a028	                    STA @l VOLUME_ID+2
.3966b8		80 0d		bra $3966c7	                    BRA ret_success
.3966ba						no_volume_id
.3966ba		c2 20		rep #$20	                REP #$20        ; set A long
.3966bc		a9 00 00	lda #$0000	                    LDA #0                                  ; No: blank the Volume ID
.3966bf		8f 26 a0 38	sta $38a026	                    STA @l VOLUME_ID
.3966c3		8f 28 a0 38	sta $38a028	                    STA @L VOLUME_ID+2
.3966c7						ret_success
.3966c7		e2 20		sep #$20	                SEP #$20        ; set A short
.3966c9		a9 00		lda #$00	                    LDA #0
.3966cb		85 20		sta $0320	                    STA BIOS_STATUS
.3966cd		28		plp		                    PLP
.3966ce		2b		pld		                    PLD
.3966cf		ab		plb		                    PLB
.3966d0		38		sec		                    SEC
.3966d1		6b		rtl		                    RTL
.3966d2		28		plp		pass_failure        PLP
.3966d3		2b		pld		                    PLD
.3966d4		ab		plb		                    PLB
.3966d5		18		clc		                    CLC
.3966d6		6b		rtl		                    RTL
.3966d7						FDC_CMDBLOCK
.3966d7		8b		phb		                    PHB
.3966d8		0b		phd		                    PHD
.3966d9		08		php		                    PHP
.3966da		48		pha		                PHA             ; begin setdbr macro
.3966db		08		php		                PHP
.3966dc		e2 20		sep #$20	                SEP #$20        ; set A short
.3966de		a9 00		lda #$00	                LDA #0
.3966e0		48		pha		                PHA
.3966e1		ab		plb		                PLB
.3966e2		28		plp		                PLP
.3966e3		68		pla		                PLA             ; end setdbr macro
.3966e4		48		pha		                PHA             ; begin setdp macro
.3966e5		08		php		                PHP
.3966e6		c2 20		rep #$20	                REP #$20        ; set A long
.3966e8		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3966eb		5b		tcd		                TCD
.3966ec		28		plp		                PLP
.3966ed		68		pla		                PLA             ; end setdp macro
.3966ee		e2 30		sep #$30	                SEP #$30        ; set A&X short
.3966f0		e0 01		cpx #$01	                    CPX #FDC_DEVCMD_MOTOR_ON
.3966f2		f0 0f		beq $396703	                    BEQ motor_on
.3966f4		e0 02		cpx #$02	                    CPX #FDC_DEVCMD_MOTOR_OFF
.3966f6		f0 11		beq $396709	                    BEQ motor_off
.3966f8		e0 03		cpx #$03	                    CPX #FDC_DEVCMD_RECAL
.3966fa		f0 13		beq $39670f	                    BEQ recalibrate
.3966fc		64 20		stz $0320	ret_success         STZ BIOS_STATUS
.3966fe		28		plp		                    PLP
.3966ff		2b		pld		                    PLD
.396700		ab		plb		                    PLB
.396701		38		sec		                    SEC
.396702		6b		rtl		                    RTL
.396703		22 97 60 39	jsl $396097	motor_on            JSL FDC_Motor_On
.396707		80 f3		bra $3966fc	                    BRA ret_success
.396709		22 cb 60 39	jsl $3960cb	motor_off           JSL FDC_Motor_Off
.39670d		80 ed		bra $3966fc	                    BRA ret_success
.39670f		22 f6 60 39	jsl $3960f6	recalibrate         JSL FDC_Recalibrate_Command
.396713		b0 e7		bcs $3966fc	                    BCS ret_success
.396715		28		plp		pass_failure        PLP
.396716		2b		pld		                    PLD
.396717		ab		plb		                    PLB
.396718		18		clc		                    CLC
.396719		6b		rtl		                    RTL
.39671a						FDC_CHK_MEDIA
.39671a		0b		phd		                    PHD
.39671b		08		php		                    PHP
.39671c		48		pha		                PHA             ; begin setdp macro
.39671d		08		php		                PHP
.39671e		c2 20		rep #$20	                REP #$20        ; set A long
.396720		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396723		5b		tcd		                TCD
.396724		28		plp		                PLP
.396725		68		pla		                PLA             ; end setdp macro
.396726		22 97 60 39	jsl $396097	                    JSL FDC_Motor_On                ; Turn on the motor
.39672a		e2 20		sep #$20	                SEP #$20        ; set A short
.39672c		af f7 13 af	lda $af13f7	                    LDA @l SIO_FDC_DIR              ; Check if the DSKCHG bit is set
.396730		89 80		bit #$80	                    BIT #FDC_DIR_DSKCHG
.396732		f0 42		beq $396776	                    BEQ ret_true                    ; If not: assume the disk is present
.396734		a9 00		lda #$00	                    LDA #0
.396736		85 00		sta $0300	                    STA FDC_DRIVE
.396738		a9 00		lda #$00	                    LDA #0
.39673a		85 01		sta $0301	                    STA FDC_HEAD
.39673c		a9 50		lda #$50	                    LDA #80
.39673e		85 02		sta $0302	                    STA FDC_CYLINDER
.396740		22 d6 62 39	jsl $3962d6	                    JSL FDC_Seek_Track              ; Attempt to seek to track 80
.396744		90 34		bcc $39677a	                    BCC ret_false                   ; If fail: return false
.396746		c2 10		rep #$10	                REP #$10        ; set X long
.396748		a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.39674b		a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.39674e		22 6f 12 39	jsl $39126f	                    JSL IDELAY
.396752		22 2b 61 39	jsl $39612b	                    JSL FDC_Sense_Int_Status
.396756		a5 06		lda $0306	                    LDA FDC_ST0
.396758		29 d0		and #$d0	                    AND #%11010000
.39675a		d0 1e		bne $39677a	                    BNE ret_false
.39675c		22 f6 60 39	jsl $3960f6	                    JSL FDC_Recalibrate_Command     ; Attempt to recalibrate
.396760		90 18		bcc $39677a	                    BCC ret_false                   ; If fail: return false
.396762		a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.396765		a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.396768		22 6f 12 39	jsl $39126f	                    JSL IDELAY
.39676c		22 2b 61 39	jsl $39612b	                    JSL FDC_Sense_Int_Status
.396770		a5 06		lda $0306	                    LDA FDC_ST0
.396772		29 d0		and #$d0	                    AND #%11010000
.396774		d0 04		bne $39677a	                    BNE ret_false
.396776						ret_true
.396776		28		plp		                    PLP
.396777		2b		pld		                    PLD
.396778		38		sec		                    SEC
.396779		6b		rtl		                    RTL
.39677a						ret_false
.39677a		28		plp		                    PLP
.39677b		2b		pld		                    PLD
.39677c		18		clc		                    CLC
.39677d		6b		rtl		                    RTL
.39677e						FDC_WRITEVBR
.39677e		8b		phb		                    PHB
.39677f		0b		phd		                    PHD
.396780		08		php		                    PHP
.396781		48		pha		                PHA             ; begin setdbr macro
.396782		08		php		                PHP
.396783		e2 20		sep #$20	                SEP #$20        ; set A short
.396785		a9 00		lda #$00	                LDA #0
.396787		48		pha		                PHA
.396788		ab		plb		                PLB
.396789		28		plp		                PLP
.39678a		68		pla		                PLA             ; end setdbr macro
.39678b		48		pha		                PHA             ; begin setdp macro
.39678c		08		php		                PHP
.39678d		c2 20		rep #$20	                REP #$20        ; set A long
.39678f		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.396792		5b		tcd		                TCD
.396793		28		plp		                PLP
.396794		68		pla		                PLA             ; end setdp macro
.396795		22 ad 65 39	jsl $3965ad	                    JSL FDC_MOUNT               ; Mount the floppy disk
.396799		c2 30		rep #$30	                REP #$30        ; set A&X long
.39679b		a9 00 00	lda #$0000	                    LDA #0                      ; Clear the sector buffer
.39679e		a2 00 00	ldx #$0000	                    LDX #0
.3967a1		9f 00 a3 38	sta $38a300,x	clr_loop            STA DOS_SECTOR,X
.3967a5		e8		inx		                    INX
.3967a6		e8		inx		                    INX
.3967a7		e0 00 02	cpx #$0200	                    CPX #512
.3967aa		d0 f5		bne $3967a1	                    BNE clr_loop
.3967ac		e2 20		sep #$20	                SEP #$20        ; set A short
.3967ae		a2 00 00	ldx #$0000	                    LDX #0                      ; Copy the prototype VBR to the sector buffer
.3967b1		bf 66 68 39	lda $396866,x	copy_loop           LDA FDC_VBR_BEGIN,X
.3967b5		9f 00 a3 38	sta $38a300,x	                    STA DOS_SECTOR,X
.3967b9		e8		inx		                    INX
.3967ba		e0 c9 00	cpx #$00c9	                    CPX #<>(FDC_VBR_END - FDC_VBR_BEGIN + 1)
.3967bd		d0 f2		bne $3967b1	                    BNE copy_loop
.3967bf		a0 00 00	ldy #$0000	                    LDY #0                      ; Copy the boot binary path to the VBR
.3967c2		a2 40 00	ldx #$0040	                    LDX #FDC_VBR_PATH
.3967c5		b7 3c		lda [$035c],y	path_copy_loop      LDA [DOS_RUN_PTR],Y
.3967c7		9f 00 a3 38	sta $38a300,x	                    STA DOS_SECTOR,X
.3967cb		f0 07		beq $3967d4	                    BEQ path_copy_done
.3967cd		e8		inx		                    INX
.3967ce		c8		iny		                    INY
.3967cf		c0 80 00	cpy #$0080	                    CPY #128
.3967d2		d0 f1		bne $3967c5	                    BNE path_copy_loop
.3967d4						path_copy_done
.3967d4		c2 20		rep #$20	                REP #$20        ; set A long
.3967d6		a9 55 aa	lda #$aa55	                    LDA #$AA55                  ; Set the VBR signature bytes at the end
.3967d9		8f fe a4 38	sta $38a4fe	                    STA DOS_SECTOR+BPB_SIGNATURE
.3967dd		c2 20		rep #$20	                REP #$20        ; set A long
.3967df		a9 00 a3	lda #$a300	                    LDA #<>DOS_SECTOR           ; Point to the BIOS buffer
.3967e2		85 06		sta $0326	                    STA BIOS_BUFF_PTR
.3967e4		a9 38 00	lda #$0038	                    LDA #`DOS_SECTOR
.3967e7		85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.3967e9		a9 00 00	lda #$0000	                    LDA #0                      ; Set the sector to #0 (boot record)
.3967ec		85 02		sta $0322	                    STA BIOS_LBA
.3967ee		85 04		sta $0324	                    STA BIOS_LBA+2
.3967f0		e2 20		sep #$20	                SEP #$20        ; set A short
.3967f2		a9 00		lda #$00	                    LDA #BIOS_DEV_FDC
.3967f4		85 01		sta $0321	                    STA BIOS_DEV
.3967f6		22 24 10 00	jsl $001024	                    JSL PUTBLOCK                ; Attempt to write the boot record
.3967fa		b0 09		bcs $396805	                    BCS ret_success
.3967fc		22 cb 60 39	jsl $3960cb	                    JSL FDC_Motor_Off
.396800		28		plp		                    PLP                         ; Return the failure
.396801		2b		pld		                    PLD
.396802		ab		plb		                    PLB
.396803		18		clc		                    CLC
.396804		6b		rtl		                    RTL
.396805		22 cb 60 39	jsl $3960cb	ret_success         JSL FDC_Motor_Off
.396809		e2 20		sep #$20	                SEP #$20        ; set A short
.39680b		a9 00		lda #$00	                    LDA #0
.39680d		85 00		sta $0320	                    STA BIOS_STATUS
.39680f		28		plp		                    PLP
.396810		2b		pld		                    PLD
.396811		ab		plb		                    PLB
.396812		38		sec		                    SEC
.396813		6b		rtl		                    RTL
.396814						FDC_TIME_HANDLE
.396814		08		php		                    PHP
.396815		e2 20		sep #$20	                SEP #$20        ; set A short
.396817		af 4e a0 38	lda $38a04e	                    LDA @l FDC_MOTOR_TIMER          ; Check the FDC motor count-down timer
.39681b		d0 06		bne $396823	                    BNE dec_motor                   ; If not zero: decrement the timer
.39681d		af 4f a0 38	lda $38a04f	                    LDA @l FDC_MOTOR_TIMER+1        ; Check the high byte
.396821		f0 28		beq $39684b	                    BEQ sof_timeout                 ; If zero: move on to the next timer
.396823		af 4e a0 38	lda $38a04e	dec_motor           LDA @l FDC_MOTOR_TIMER          ; Decrement the low byte
.396827		3a		dec a		                    DEC A
.396828		8f 4e a0 38	sta $38a04e	                    STA @l FDC_MOTOR_TIMER
.39682c		c9 ff		cmp #$ff	                    CMP #$FF                        ; Did it roll over?
.39682e		d0 0b		bne $39683b	                    BNE chk_motor_end               ; No: check to see if we're a the end
.396830		af 4f a0 38	lda $38a04f	                    LDA @l FDC_MOTOR_TIMER+1        ; Decrement the high byte
.396834		3a		dec a		                    DEC A
.396835		8f 4f a0 38	sta $38a04f	                    STA @l FDC_MOTOR_TIMER+1
.396839		80 10		bra $39684b	                    BRA sof_timeout                 ; And move on to the next timer
.39683b		af 4e a0 38	lda $38a04e	chk_motor_end       LDA @l FDC_MOTOR_TIMER          ; Check timer
.39683f		d0 0a		bne $39684b	                    BNE sof_timeout                 ; if it's <>0, move on to the next timer
.396841		af 4f a0 38	lda $38a04f	                    LDA @l FDC_MOTOR_TIMER+1
.396845		d0 04		bne $39684b	                    BNE sof_timeout
.396847		22 cb 60 39	jsl $3960cb	                    JSL FDC_Motor_Off               ; Otherwise, turn off the motor
.39684b						sof_timeout
.39684b		e2 20		sep #$20	                SEP #$20        ; set A short
.39684d		af 2d 03 00	lda $00032d	                    LDA @l BIOS_TIMER               ; Check the BIOS_TIMER
.396851		f0 11		beq $396864	                    BEQ sof_int_done                ; If it's 0, we don't do anything
.396853		3a		dec a		                    DEC A                           ; Count down one tick
.396854		8f 2d 03 00	sta $00032d	                    STA @l BIOS_TIMER
.396858		d0 0a		bne $396864	                    BNE sof_int_done                ; If not 0, we're done
.39685a		af 2c 03 00	lda $00032c	                    LDA @l BIOS_FLAGS               ; Otherwise: flag a time out event
.39685e		09 80		ora #$80	                    ORA #BIOS_TIMEOUT
.396860		8f 2c 03 00	sta $00032c	                    STA @l BIOS_FLAGS
.396864		28		plp		sof_int_done        PLP
.396865		6b		rtl		                    RTL
=62						FDC_BOOT_START = 62                         ; Entry point to the boot code
=64						FDC_VBR_PATH = 64                           ; Offset to the path in the VBR
.396866						FDC_VBR_BEGIN
>396866		eb 00 90			start               .byte $EB, $00, $90     ; Entry point
>396869		43 32 35 36 44 4f 53 20		magic               .text "C256DOS "        ; OEM name / magic text for booting
>396871		00 02				bytes_per_sec       .word 512               ; How many bytes per sector
>396873		01				sec_per_cluster     .byte 1                 ; How many sectors per cluster
>396874		01 00				rsrv_sectors        .word 1                 ; Number of reserved sectors
>396876		02				num_fat             .byte 2                 ; Number of FATs
>396877		e0 00				max_dir_entry       .word (32-18)*16        ; Total number of root dir entries
>396879		40 0b				total_sectors       .word 2880              ; Total sectors
>39687b		f0				media_descriptor    .byte $F0               ; 3.5" 1.44 MB floppy 80 tracks, 18 tracks per sector
>39687c		09 00				sec_per_fat         .word 9                 ; Sectors per FAT
>39687e		12 00				sec_per_track       .word 18                ; Sectors per track
>396880		02 00				num_head            .word 2                 ; Number of heads
>396882		00 00 00 00			ignore2             .dword 0
>396886		00 00 00 00			fat32_sector        .dword 0                ; # of sectors in FAT32
>39688a		00 00				ignore3             .word 0
>39688c		29				boot_signature      .byte $29
>39688d		78 56 34 12			volume_id           .dword $12345678        ; Replaced by code
>396891		55 4e 54 49 54 4c 45 44		volume_name         .text "UNTITLED   "     ; Replace by code
>396899		20 20 20
>39689c		46 41 54 31 32 20 20 20		fs_type             .text "FAT12   "
.3968a4		80 40		bra $3968e6	                    BRA vbr_start
>3968a6						file_path           .fill 64                ; Reserve 64 bytes for a path and any options
.3968e6						vbr_start
.3968e6		c2 20		rep #$20	                REP #$20        ; set A long
.3968e8		a9 40 a3	lda #$a340	                    LDA #<>(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.3968eb		8f 60 03 00	sta $000360	                    STA @l DOS_RUN_PARAM
.3968ef		a9 38 00	lda #$0038	                    LDA #`(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.3968f2		8f 62 03 00	sta $000362	                    STA @l DOS_RUN_PARAM+2
.3968f6		22 24 11 00	jsl $001124	                    JSL F_RUN               ; And try to execute the binary file
.3968fa		b0 0c		bcs $396908	                    BCS lock                ; If it returned success... lock up... I guess?
.3968fc						error
.3968fc		e2 20		sep #$20	                SEP #$20        ; set A short
.3968fe		4b		phk		                    PHK                     ; Otherwise, print an error message
.3968ff		ab		plb		                    PLB
.396900		62 08 00	per $39690b	                    PER message
.396903		fa		plx		                    PLX
.396904		22 1c 10 00	jsl $00101c	                    JSL PUTS
.396908		ea		nop		lock                NOP                     ; And lock up
.396909		80 fd		bra $396908	                    BRA lock
>39690b		43 6f 75 6c 64 20 6e 6f		message             .null "Could not find a bootable binary.",13
>396913		74 20 66 69 6e 64 20 61 20 62 6f 6f 74 61 62 6c
>396923		65 20 62 69 6e 61 72 79 2e 0d 00
.39692e						FDC_VBR_END

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/ide_library.asm

.0000						IDE_ID
>0000		00 00				General_Config        .word $0000
>0002		00 00				Obsolete0             .word $0000
>0004		00 00				Specific_Config       .word $0000
>0006		00 00				Obsolete1             .word $0000
>0008		00 00				Retired0              .word $0000
>000a		00 00				Retired1              .word $0000
>000c		00 00				Obsolete2             .word $0000
>000e		00 00				Reserved_CFlash0      .word $0000
>0010		00 00				Reserved_CFlash1      .word $0000
>0012		00 00				Retired2              .word $0000
>0014		00 00 00 00 00 00 00 00		Serial_Number_String  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>001c		00 00 00 00 00 00 00 00 00 00 00 00
>0028		00 00 00 00			Retired3              .word $0000, $0000
>002c		00 00				Obsolete3             .word $0000
>002e		00 00 00 00 00 00 00 00		Firmware_Rev_String   .byte $00, $00, $00, $00, $00, $00, $00, $00
>0036		00 00 00 00 00 00 00 00		Model_Number_String   .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>003e		00 00 00 00 00 00 00 00
>0046		00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>004e		00 00 00 00 00 00 00 00
>0056		00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00
>005e		00 00				Max_Number_Logic_Sec  .word $0000
>0060		00 00				Trusted_Comp_Feature  .word $0000
>0062		00 00 00 00			Capabilities          .word $0000, $0000
>0066		00 00 00 00			Obsolete4             .word $0000, $0000
>006a		00 00				Free_Fall_Control     .word $0000
>006c		00 00 00 00 00 00 00 00		Obsolete5             .word $0000, $0000, $0000, $0000, $0000
>0074		00 00
>0076		00 00				Reserved0             .word $0000
>0078		00 00 00 00			Total_Addy_Logic_Sec  .word $0000, $0000
>007c		00 00				Obsolete6             .word $0000
>007e		00 00 00 00			Reserved1             .word $0000, $0000
>0082		00 00				Min_Multiword_DMA_Trf .word $0000
>0084		00 00				Manu_Recommended_Mult .word $0000
>0086		00 00				Min_PIO_Trf           .word $0000      ; Word 67
>0088		00 00				Min_PIO_Trf_with_IORD .word $0000      ; Word 68
>008a		00 00 00 00			Reserved2             .word $0000, $0000
>008e		00 00 00 00 00 00 00 00		Reserved3             .word $0000, $0000, $0000, $0000
>0096		00 00				Queue_Dept            .word $0000
>0098		00 00				SATA_Capabilities     .word $0000
>009a		00 00				Reserved_SATA         .word $0000
>009c		00 00				Sup_Feat_SATA         .word $0000
>009e		00 00				Sup_Feat_SATA_Enabled .word $0000    ; Word 79
>00a0		00 00				Major_Version_Number  .word $0000    ; Word 80
>00a2		00 00				Minor_Version_Number  .word $0000    ; Word 81
>00a4		00 00 00 00 00 00 00 00		Cmd_And_Features_Sup  .word $0000, $0000, $0000, $0000, $0000, $0000
>00ac		00 00 00 00
>00b0		00 00				UDMA_Modes            .word $0000
>00b2		00 00 00 00			Reserved4             .word $0000, $0000 ; Word 89
>00b6		00 00				Current_APM_Level     .word $0000
>00b8		00 00				Master_Password_Ident .word $0000
>00ba		00 00				Hardware_Reset_Result .word $0000
>00bc		00 00				Current_AAM_Value     .word $0000  ; Word 94
>00be		00 00				Stream_Min_Req_Size   .word $0000  ; Word 95
>00c0		00 00				Stream_Trf_Time_DMA   .word $0000  ; Word 96
>00c2		00 00				Stream_Access_Lat     .word $0000
>00c4		00 00 00 00			Streaming_Perf_Gran   .word $0000, $0000
>00c8		00 00 00 00 00 00 00 00		Tot_Num_Add_Logic_Sec .word $0000, $0000, $0000, $0000
>00d0		00 00				Streaming_Trf_Time    .word $0000 ; Word 104
>00d2		00 00				Reserved5             .word $0000 ; Word 105
.39692e						IDE_TEST
.39692e		08		php		                PHP
.39692f		c2 20		rep #$20	                REP #$20        ; set A long
.396931		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.396934		8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.396938		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.39693b		8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.39693f		22 62 6a 39	jsl $396a62	                JSL IDE_IDENTIFY
.396943		b0 03		bcs $396948	                BCS id_ok
.396945		82 ab 00	brl $3969f3	                BRL done
.396948						id_ok
.396948		c2 10		rep #$10	                REP #$10        ; set X long
.39694a		e2 20		sep #$20	                SEP #$20        ; set A short
.39694c		a0 28 00	ldy #$0028	                LDY #40
.39694f		a2 36 00	ldx #$0036	                LDX #27*2
.396952		bf 01 a3 38	lda $38a301,x	pr_model        LDA DOS_SECTOR+1,X
.396956		22 18 10 00	jsl $001018	                JSL PUTC
.39695a		bf 00 a3 38	lda $38a300,x	                LDA DOS_SECTOR,X
.39695e		22 18 10 00	jsl $001018	                JSL PUTC
.396962		e8		inx		                INX
.396963		e8		inx		                INX
.396964		88		dey		                DEY
.396965		88		dey		                DEY
.396966		d0 ea		bne $396952	                BNE pr_model
.396968		c2 10		rep #$10	                REP #$10        ; set X long
.39696a		e2 20		sep #$20	                SEP #$20        ; set A short
.39696c		a0 14 00	ldy #$0014	                LDY #20
.39696f		a2 14 00	ldx #$0014	                LDX #10*2
.396972		bf 01 a3 38	lda $38a301,x	pr_serial       LDA DOS_SECTOR+1,X
.396976		22 18 10 00	jsl $001018	                JSL PUTC
.39697a		bf 00 a3 38	lda $38a300,x	                LDA DOS_SECTOR,X
.39697e		22 18 10 00	jsl $001018	                JSL PUTC
.396982		e8		inx		                INX
.396983		e8		inx		                INX
.396984		88		dey		                DEY
.396985		88		dey		                DEY
.396986		d0 ea		bne $396972	                BNE pr_serial
.396988		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.39698c		c2 30		rep #$30	                REP #$30        ; set A&X long
.39698e		a9 01 00	lda #$0001	                LDA #1                 ; Set LBA = 1
.396991		8f 22 03 00	sta $000322	                STA @l BIOS_LBA
.396995		a9 00 00	lda #$0000	                LDA #0
.396998		8f 24 03 00	sta $000324	                STA @l BIOS_LBA+2
.39699c		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.39699f		8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.3969a3		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.3969a6		8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.3969aa		a2 00 00	ldx #$0000	                LDX #0                  ; Initialize the block to some recognizable data
.3969ad		a9 a5 5a	lda #$5aa5	                LDA #$5AA5
.3969b0		9f 00 a3 38	sta $38a300,x	init_loop       STA DOS_SECTOR,X
.3969b4		e8		inx		                INX
.3969b5		e8		inx		                INX
.3969b6		e0 00 02	cpx #$0200	                CPX #512
.3969b9		d0 f5		bne $3969b0	                BNE init_loop
.3969bb		22 7b 6b 39	jsl $396b7b	                JSL IDE_PUTBLOCK        ; Attempt to write the block
.3969bf		b0 06		bcs $3969c7	                BCS read_sect1
.3969c1		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.3969c5		80 2c		bra $3969f3	                BRA done
.3969c7		a9 01 00	lda #$0001	read_sect1      LDA #1                 ; Set LBA = 1
.3969ca		8f 22 03 00	sta $000322	                STA @l BIOS_LBA
.3969ce		a9 00 00	lda #$0000	                LDA #0
.3969d1		8f 24 03 00	sta $000324	                STA @l BIOS_LBA+2
.3969d5		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS
.3969d8		8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.3969dc		a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.3969df		8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.3969e3		22 f0 6a 39	jsl $396af0	                JSL IDE_GETBLOCK        ; Attempt to read the block
.3969e7		b0 06		bcs $3969ef	                BCS all_ok
.3969e9		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.3969ed		80 04		bra $3969f3	                BRA done
.3969ef						all_ok
.3969ef		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.3969f3		28		plp		done            PLP
.3969f4		6b		rtl		                RTL
.3969f5						IDE_INIT
.3969f5		e2 20		sep #$20	                SEP #$20        ; set A short
.3969f7		a9 00		lda #$00	              LDA #$00
.3969f9		8f 37 e8 af	sta $afe837	              STA IDE_CMD_STAT
.3969fd		20 1e 6a	jsr $396a1e	              JSR IDE_DRIVE_BSY ; Check to see if drive is busy
.396a00		a9 e0		lda #$e0	              LDA #$E0 ; HEAD 0 - Select Master Drive
.396a02		8f 36 e8 af	sta $afe836	              STA IDE_HEAD
.396a06		a9 01		lda #$01	              LDA #$01
.396a08		8f 32 e8 af	sta $afe832	              STA IDE_SECT_CNT
.396a0c		a9 00		lda #$00	              LDA #$00
.396a0e		8f 33 e8 af	sta $afe833	              STA IDE_SECT_SRT
.396a12		8f 34 e8 af	sta $afe834	              STA IDE_CLDR_LO
.396a16		8f 35 e8 af	sta $afe835	              STA IDE_CLDR_HI
.396a1a		20 3c 6a	jsr $396a3c	              JSR IDE_DRV_READY_NOTBUSY
.396a1d		6b		rtl		              RTL
.396a1e						IDE_DRIVE_BSY
.396a1e		08		php		                PHP
.396a1f		e2 20		sep #$20	                SEP #$20        ; set A short
.396a21		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.396a25		29 80		and #$80	                AND #IDE_STAT_BSY         ; Check for RDY Bit, this needs to be 1'b1
.396a27		c9 80		cmp #$80	                CMP #IDE_STAT_BSY         ; If not go read again
.396a29		f0 f6		beq $396a21	                BEQ loop
.396a2b		28		plp		                PLP
.396a2c		60		rts		                RTS
.396a2d						IDE_DRIVE_READY
.396a2d		08		php		                PHP
.396a2e		e2 20		sep #$20	                SEP #$20        ; set A short
.396a30		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.396a34		29 40		and #$40	                AND #IDE_STAT_DRDY          ; Check to see if the Busy Signal is Cleared
.396a36		c9 40		cmp #$40	                CMP #IDE_STAT_DRDY          ; if it is still one, then go back to read again.
.396a38		d0 f6		bne $396a30	                BNE loop
.396a3a		28		plp		                PLP
.396a3b		60		rts		                RTS
.396a3c						IDE_DRV_READY_NOTBUSY
.396a3c		08		php		                PHP
.396a3d		e2 20		sep #$20	                SEP #$20        ; set A short
.396a3f		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT                 ; Check the status
.396a43		29 c0		and #$c0	                AND #IDE_STAT_BSY | IDE_STAT_DRDY
.396a45		c9 40		cmp #$40	                CMP #IDE_STAT_DRDY                  ; Is it READY but not BUSY?
.396a47		d0 f6		bne $396a3f	                BNE loop                            ; No: keep waiting
.396a49		28		plp		ret_success     PLP                                 ; Return success
.396a4a		38		sec		                SEC
.396a4b		60		rts		                RTS
.396a4c		8f 07 03 00	sta $000307	ret_failure     STA @l FDC_ST1                      ; Save the status code to FDC_ST1
.396a50		28		plp		                PLP                                 ; Return failure
.396a51		18		clc		                CLC
.396a52		60		rts		                RTS
.396a53						IDE_NOT_DRQ
.396a53		08		php		                PHP
.396a54		e2 20		sep #$20	                SEP #$20        ; set A short
.396a56		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT     ; Get the status
.396a5a		29 08		and #$08	                AND #IDE_STAT_DRQ
.396a5c		c9 08		cmp #$08	                CMP #IDE_STAT_DRQ       ; Is the DRQ bit set?
.396a5e		d0 f6		bne $396a56	                BNE loop                ; No: keep waiting
.396a60		28		plp		                PLP
.396a61		60		rts		                RTS
.396a62						IDE_IDENTIFY
.396a62		5a		phy		                PHY
.396a63		8b		phb		                PHB
.396a64		0b		phd		                PHD
.396a65		08		php		                PHP
.396a66		48		pha		                PHA             ; begin setdbr macro
.396a67		08		php		                PHP
.396a68		e2 20		sep #$20	                SEP #$20        ; set A short
.396a6a		a9 00		lda #$00	                LDA #0
.396a6c		48		pha		                PHA
.396a6d		ab		plb		                PLB
.396a6e		28		plp		                PLP
.396a6f		68		pla		                PLA             ; end setdbr macro
.396a70		48		pha		                PHA             ; begin setdp macro
.396a71		08		php		                PHP
.396a72		c2 20		rep #$20	                REP #$20        ; set A long
.396a74		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.396a77		5b		tcd		                TCD
.396a78		28		plp		                PLP
.396a79		68		pla		                PLA             ; end setdp macro
.396a7a		e2 20		sep #$20	                SEP #$20        ; set A short
.396a7c		20 3c 6a	jsr $396a3c	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.396a7f		a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.396a81		29 07		and #$07	                AND #$07
.396a83		09 a0		ora #$a0	                ORA #%10100000                  ; Select DEV=0 and LBA mode = 1
.396a85		8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.396a89		20 3c 6a	jsr $396a3c	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.396a8c		e2 20		sep #$20	                SEP #$20        ; set A short
.396a8e		a9 00		lda #$00	                LDA #0                          ; Clear sector count and LBA
.396a90		8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.396a94		8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.396a98		8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.396a9c		8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.396aa0		a9 ec		lda #$ec	                LDA #IDE_CMD_IDENTIFY           ; The IDENTIFY command
.396aa2		8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT             ; Check the status
.396aa6		f0 29		beq $396ad1	                BEQ no_media                    ; If 0: there is no drive
.396aa8		20 1e 6a	jsr $396a1e	                JSR IDE_DRIVE_BSY               ; Othewise: wait for drive to not be busy
.396aab		20 3c 6a	jsr $396a3c	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396aae		90 2d		bcc $396add	                BCC ret_failure                 ; If an error occurred, return it
.396ab0		c2 30		rep #$30	                REP #$30        ; set A&X long
.396ab2		a0 00 00	ldy #$0000	                LDY #0
.396ab5		af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.396ab9		97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.396abb		c8		iny		                INY                             ; Move to the next position
.396abc		c8		iny		                INY
.396abd		c0 00 02	cpy #$0200	                CPY #512
.396ac0		d0 f3		bne $396ab5	                BNE read_loop
.396ac2						ret_success
.396ac2		e2 20		sep #$20	                SEP #$20        ; set A short
.396ac4		a9 00		lda #$00	                LDA #0
.396ac6		85 00		sta $0320	                STA BIOS_STATUS
.396ac8		8d 06 03	sta $0306	                STA @w FDC_ST0
.396acb		28		plp		                PLP                             ; Return success
.396acc		2b		pld		                PLD
.396acd		ab		plb		                PLB
.396ace		7a		ply		                PLY
.396acf		38		sec		                SEC
.396ad0		6b		rtl		                RTL
.396ad1						no_media
.396ad1		e2 20		sep #$20	                SEP #$20        ; set A short
.396ad3		a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA
.396ad5		80 0a		bra $396ae1	                BRA pass_failure
.396ad7						not_ata
.396ad7		e2 20		sep #$20	                SEP #$20        ; set A short
.396ad9		a9 8a		lda #$8a	                LDA #BIOS_ERR_NOTATA
.396adb		80 04		bra $396ae1	                BRA pass_failure
.396add						ret_failure
.396add		e2 20		sep #$20	                SEP #$20        ; set A short
.396adf		a9 82		lda #$82	                LDA #BIOS_ERR_READ
.396ae1		85 00		sta $0320	pass_failure    STA BIOS_STATUS
.396ae3		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.396ae7		8d 06 03	sta $0306	                STA @w FDC_ST0
.396aea		28		plp		                PLP
.396aeb		2b		pld		                PLD
.396aec		ab		plb		                PLB
.396aed		7a		ply		                PLY
.396aee		18		clc		                CLC
.396aef		6b		rtl		                RTL
.396af0						IDE_GETBLOCK
.396af0		5a		phy		                PHY
.396af1		8b		phb		                PHB
.396af2		0b		phd		                PHD
.396af3		08		php		                PHP
.396af4		48		pha		                PHA             ; begin setdbr macro
.396af5		08		php		                PHP
.396af6		e2 20		sep #$20	                SEP #$20        ; set A short
.396af8		a9 00		lda #$00	                LDA #0
.396afa		48		pha		                PHA
.396afb		ab		plb		                PLB
.396afc		28		plp		                PLP
.396afd		68		pla		                PLA             ; end setdbr macro
.396afe		48		pha		                PHA             ; begin setdp macro
.396aff		08		php		                PHP
.396b00		c2 20		rep #$20	                REP #$20        ; set A long
.396b02		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.396b05		5b		tcd		                TCD
.396b06		28		plp		                PLP
.396b07		68		pla		                PLA             ; end setdp macro
.396b08		e2 20		sep #$20	                SEP #$20        ; set A short
.396b0a		20 3c 6a	jsr $396a3c	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.396b0d		a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.396b0f		29 07		and #$07	                AND #$07
.396b11		09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.396b13		8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.396b17		20 3c 6a	jsr $396a3c	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.396b1a		e2 20		sep #$20	                SEP #$20        ; set A short
.396b1c		a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.396b1e		8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.396b22		a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.396b24		8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.396b28		a5 03		lda $0323	                LDA BIOS_LBA+1
.396b2a		8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.396b2e		a5 04		lda $0324	                LDA BIOS_LBA+2
.396b30		8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.396b34		a9 21		lda #$21	                LDA #IDE_CMD_READ_SECTOR        ; The READ SECTOR command
.396b36		8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.396b3a		ea		nop		                NOP                             ; Wait about 500ns
.396b3b		ea		nop		                NOP
.396b3c		ea		nop		                NOP
.396b3d		ea		nop		                NOP
.396b3e		20 3c 6a	jsr $396a3c	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396b41		90 25		bcc $396b68	                BCC ret_failure                 ; If an error occurred, return it
.396b43		a0 00 00	ldy #$0000	                LDY #0
.396b46		c2 20		rep #$20	                REP #$20        ; set A long
.396b48		af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.396b4c		97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.396b4e		c8		iny		                INY                             ; Move to the next position
.396b4f		c8		iny		                INY
.396b50		c0 00 02	cpy #$0200	                CPY #512
.396b53		d0 f3		bne $396b48	                BNE read_loop
.396b55		ea		nop		                NOP                             ; Wait about 500ns
.396b56		ea		nop		                NOP
.396b57		ea		nop		                NOP
.396b58		ea		nop		                NOP
.396b59						ret_success
.396b59		e2 20		sep #$20	                SEP #$20        ; set A short
.396b5b		a9 00		lda #$00	                LDA #0
.396b5d		85 00		sta $0320	                STA BIOS_STATUS
.396b5f		8d 06 03	sta $0306	                STA @w FDC_ST0
.396b62		28		plp		                PLP                             ; Return success
.396b63		2b		pld		                PLD
.396b64		ab		plb		                PLB
.396b65		7a		ply		                PLY
.396b66		38		sec		                SEC
.396b67		6b		rtl		                RTL
.396b68						ret_failure
.396b68		e2 20		sep #$20	                SEP #$20        ; set A short
.396b6a		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.396b6e		8d 06 03	sta $0306	                STA @w FDC_ST0
.396b71		a9 82		lda #$82	                LDA #BIOS_ERR_READ
.396b73		85 00		sta $0320	                STA BIOS_STATUS
.396b75		28		plp		                PLP
.396b76		2b		pld		                PLD
.396b77		ab		plb		                PLB
.396b78		7a		ply		                PLY
.396b79		18		clc		                CLC
.396b7a		6b		rtl		                RTL
.396b7b						IDE_PUTBLOCK
.396b7b		5a		phy		                PHY
.396b7c		8b		phb		                PHB
.396b7d		0b		phd		                PHD
.396b7e		08		php		                PHP
.396b7f		48		pha		                PHA             ; begin setdbr macro
.396b80		08		php		                PHP
.396b81		e2 20		sep #$20	                SEP #$20        ; set A short
.396b83		a9 00		lda #$00	                LDA #0
.396b85		48		pha		                PHA
.396b86		ab		plb		                PLB
.396b87		28		plp		                PLP
.396b88		68		pla		                PLA             ; end setdbr macro
.396b89		48		pha		                PHA             ; begin setdp macro
.396b8a		08		php		                PHP
.396b8b		c2 20		rep #$20	                REP #$20        ; set A long
.396b8d		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.396b90		5b		tcd		                TCD
.396b91		28		plp		                PLP
.396b92		68		pla		                PLA             ; end setdp macro
.396b93		e2 20		sep #$20	                SEP #$20        ; set A short
.396b95		20 3c 6a	jsr $396a3c	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.396b98		a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.396b9a		29 07		and #$07	                AND #$07
.396b9c		09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.396b9e		8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.396ba2		20 3c 6a	jsr $396a3c	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.396ba5		e2 20		sep #$20	                SEP #$20        ; set A short
.396ba7		a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.396ba9		8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.396bad		a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.396baf		8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.396bb3		a5 03		lda $0323	                LDA BIOS_LBA+1
.396bb5		8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.396bb9		a5 04		lda $0324	                LDA BIOS_LBA+2
.396bbb		8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.396bbf		a9 30		lda #$30	                LDA #IDE_CMD_WRITE_SECTOR       ; The READ SECTOR command
.396bc1		8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.396bc5		ea		nop		                NOP                             ; Wait about 500ns
.396bc6		ea		nop		                NOP
.396bc7		ea		nop		                NOP
.396bc8		ea		nop		                NOP
.396bc9		20 3c 6a	jsr $396a3c	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396bcc		90 37		bcc $396c05	                BCC ret_failure                 ; If an error occurred, return it
.396bce		c2 30		rep #$30	                REP #$30        ; set A&X long
.396bd0		a0 00 00	ldy #$0000	                LDY #0
.396bd3		b7 06		lda [$0326],y	read_loop       LDA [BIOS_BUFF_PTR],Y           ; Get the word from the buffer
.396bd5		8f 38 e8 af	sta $afe838	                STA @l IDE_DATA_LO              ; Save the word to the device
.396bd9		c8		iny		                INY                             ; Move to the next position
.396bda		c8		iny		                INY
.396bdb		c0 00 02	cpy #$0200	                CPY #512
.396bde		d0 f3		bne $396bd3	                BNE read_loop
.396be0		ea		nop		                NOP                             ; Wait about 500ns
.396be1		ea		nop		                NOP
.396be2		ea		nop		                NOP
.396be3		ea		nop		                NOP
.396be4		20 3c 6a	jsr $396a3c	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396be7		90 1c		bcc $396c05	                BCC ret_failure                 ; If an error occurred, return it
.396be9		ea		nop		                NOP                             ; Wait about 500ns
.396bea		ea		nop		                NOP
.396beb		ea		nop		                NOP
.396bec		ea		nop		                NOP
.396bed		af 37 e8 af	lda $afe837	                LDA @l IDE_CMD_STAT             ; Check the status
.396bf1		89 21 00	bit #$0021	                BIT #IDE_STAT_ERR | IDE_STAT_DF
.396bf4		d0 0f		bne $396c05	                BNE ret_failure                 ; If error: return failure
.396bf6						ret_success
.396bf6		e2 20		sep #$20	                SEP #$20        ; set A short
.396bf8		a9 00		lda #$00	                LDA #0
.396bfa		85 00		sta $0320	                STA BIOS_STATUS
.396bfc		8d 06 03	sta $0306	                STA @w FDC_ST0
.396bff		28		plp		                PLP                             ; Return success
.396c00		2b		pld		                PLD
.396c01		ab		plb		                PLB
.396c02		7a		ply		                PLY
.396c03		38		sec		                SEC
.396c04		6b		rtl		                RTL
.396c05		ea		nop		ret_failure     NOP                             ; Wait about 500ns
.396c06		ea		nop		                NOP
.396c07		ea		nop		                NOP
.396c08		ea		nop		                NOP
.396c09		e2 20		sep #$20	                SEP #$20        ; set A short
.396c0b		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.396c0f		80 08		bra $396c19	                BRA save_error
.396c11		ea		nop		                NOP
.396c12		ea		nop		                NOP
.396c13		ea		nop		                NOP
.396c14		ea		nop		                NOP
.396c15		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.396c19		8d 06 03	sta $0306	save_error      STA @w FDC_ST0
.396c1c		a9 83		lda #$83	                LDA #BIOS_ERR_WRITE
.396c1e		85 00		sta $0320	                STA BIOS_STATUS
.396c20		28		plp		                PLP
.396c21		2b		pld		                PLD
.396c22		ab		plb		                PLB
.396c23		7a		ply		                PLY
.396c24		18		clc		                CLC
.396c25		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/Ethernet_Init_library.asm

.396c26						SIMPLE_INIT_ETHERNET_CTRL
.396c26						WaitforittobeReady:
.396c26		af 84 e0 ae	lda $aee084	                LDA @l ESID_ETHERNET_REG + $84
.396c2a		29 01 00	and #$0001	                AND #$0001
.396c2d		c9 01 00	cmp #$0001	                CMP #$0001 ; This is to check that the Controller is ready to roll
.396c30		d0 f4		bne $396c26	                BNE WaitforittobeReady
.396c32		af 52 e0 ae	lda $aee052	                LDA @l ESID_ETHERNET_REG + $52 ;Chip ID (0x9221)
.396c36		af 50 e0 ae	lda $aee050	                LDA @l ESID_ETHERNET_REG + $50 ;Chip Revision
.396c3a		af 64 e0 ae	lda $aee064	                LDA @l ESID_ETHERNET_REG + $64
.396c3e		af 66 e0 ae	lda $aee066	                LDA @l ESID_ETHERNET_REG + $66
.396c42		a9 00 00	lda #$0000	                LDA #$0000
.396c45		8f 88 e0 ae	sta $aee088	                STA @l ESID_ETHERNET_REG + $88
.396c49		a9 00 70	lda #$7000	                LDA #$7000
.396c4c		8f 8a e0 ae	sta $aee08a	                STA @l ESID_ETHERNET_REG + $8A
.396c50		a9 02 00	lda #$0002	                LDA #$0002 ; Accessing CSR INDEX 2 MAC Address (High)
.396c53		8f a4 e0 ae	sta $aee0a4	                STA @l ESID_ETHERNET_REG + $A4
.396c57		a9 0b 00	lda #$000b	                LDA #$000B
.396c5a		8f a8 e0 ae	sta $aee0a8	                STA @l ESID_ETHERNET_REG + $A8
.396c5e		a9 00 00	lda #$0000	                LDA #$0000
.396c61		8f aa e0 ae	sta $aee0aa	                STA @l ESID_ETHERNET_REG + $AA
.396c65		20 99 6c	jsr $396c99	                JSR MAC_ACCESS_WAIT_FOR_COMPLETION
.396c68		a9 03 00	lda #$0003	                LDA #$0003 ; Accessing CSR INDEX 3 MAC Address (low)
.396c6b		8f a4 e0 ae	sta $aee0a4	                STA @l ESID_ETHERNET_REG + $A4
.396c6f		a9 7f dc	lda #$dc7f	                LDA #$DC7F
.396c72		8f a8 e0 ae	sta $aee0a8	                STA @l ESID_ETHERNET_REG + $A8
.396c76		a9 d7 ab	lda #$abd7	                LDA #$ABD7
.396c79		8f aa e0 ae	sta $aee0aa	                STA @l ESID_ETHERNET_REG + $AA
.396c7d		20 99 6c	jsr $396c99	                JSR MAC_ACCESS_WAIT_FOR_COMPLETION
.396c80		a9 01 00	lda #$0001	                LDA #$0001 ; Accessing CSR INDEX 2 MAC Address (High)
.396c83		8f a4 e0 ae	sta $aee0a4	                STA @l ESID_ETHERNET_REG + $A4
.396c87		a9 0c 00	lda #$000c	                LDA #$000C
.396c8a		8f a8 e0 ae	sta $aee0a8	                STA @l ESID_ETHERNET_REG + $A8
.396c8e		a9 04 00	lda #$0004	                LDA #$0004
.396c91		8f aa e0 ae	sta $aee0aa	                STA @l ESID_ETHERNET_REG + $AA
.396c95		20 99 6c	jsr $396c99	                JSR MAC_ACCESS_WAIT_FOR_COMPLETION
.396c98		6b		rtl		                RTL
.396c99						MAC_ACCESS_WAIT_FOR_COMPLETION
.396c99		a9 00 80	lda #$8000	                LDA #$8000 ; CsR busy bit is a status but also the Command Execution bit
.396c9c		8f a6 e0 ae	sta $aee0a6	                STA @l ESID_ETHERNET_REG + $A6
.396ca0						WaitForCompletion:
.396ca0		af a6 e0 ae	lda $aee0a6	                LDA @l ESID_ETHERNET_REG + $A6
.396ca4		29 00 80	and #$8000	                AND #$8000
.396ca7		c9 00 80	cmp #$8000	                CMP #$8000
.396caa		f0 f4		beq $396ca0	                BEQ WaitForCompletion
.396cac		60		rts		                RTS

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/EXP-C200_EVID_Library.asm

=$ae2000					EVID_SCREEN_PAGE      = $AE2000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
.396cad						EVID_IPRINT
.396cad		22 b6 6c 39	jsl $396cb6	                JSL EVID_IPUTS
.396cb1		22 28 6e 39	jsl $396e28	                JSL EVID_IPRINTCR
.396cb5		6b		rtl		                RTL
.396cb6						EVID_IPUTS
.396cb6		48		pha		                PHA
.396cb7		08		php		                PHP
.396cb8		e2 20		sep #$20	                SEP #$20        ; set A short
.396cba		c2 10		rep #$10	                REP #$10        ; set X long
.396cbc		bd 00 00	lda $0000,x	iputs1          LDA $0,b,x      ; read from the string
.396cbf		f0 08		beq $396cc9	                BEQ iputs_done
.396cc1		22 cd 6c 39	jsl $396ccd	iputs2          JSL EVID_IPUTC
.396cc5		e8		inx		iputs3          INX
.396cc6		4c bc 6c	jmp $396cbc	                JMP iputs1
.396cc9		e8		inx		iputs_done      INX
.396cca		28		plp		                PLP
.396ccb		68		pla		                PLA
.396ccc		6b		rtl		                RTL
.396ccd						EVID_IPUTC
.396ccd		da		phx		                PHX
.396cce		5a		phy		                PHY
.396ccf		0b		phd		                PHD
.396cd0		8b		phb		                PHB
.396cd1		08		php		                PHP                 ; stash the flags (we'll be changing M)
.396cd2		48		pha		                PHA             ; begin setdp macro
.396cd3		08		php		                PHP
.396cd4		c2 20		rep #$20	                REP #$20        ; set A long
.396cd6		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.396cd9		5b		tcd		                TCD
.396cda		28		plp		                PLP
.396cdb		68		pla		                PLA             ; end setdp macro
.396cdc		48		pha		                PHA             ; begin setdbr macro
.396cdd		08		php		                PHP
.396cde		e2 20		sep #$20	                SEP #$20        ; set A short
.396ce0		a9 00		lda #$00	                LDA #0
.396ce2		48		pha		                PHA
.396ce3		ab		plb		                PLB
.396ce4		28		plp		                PLP
.396ce5		68		pla		                PLA             ; end setdbr macro
.396ce6		e2 20		sep #$20	                SEP #$20        ; set A short
.396ce8		c2 10		rep #$10	                REP #$10        ; set X long
.396cea		c9 0a		cmp #$0a	                CMP #CHAR_LF        ; Linefeed moves cursor down one line
.396cec		f0 69		beq $396d57	                BEQ go_down
.396cee		c9 20		cmp #$20	                CMP #$20
.396cf0		90 19		bcc $396d0b	                BCC check_ctrl0     ; [$00..$1F]: check for arrows
.396cf2		c9 7f		cmp #$7f	                CMP #$7F
.396cf4		f0 45		beq $396d3b	                BEQ do_del
.396cf6		b0 02		bcs $396cfa	                BCS check_A0        ; [$20..$7E]: print it
.396cf8		80 31		bra $396d2b	                BRA printc
.396cfa		c9 a0		cmp #$a0	check_A0        CMP #$A0
.396cfc		90 02		bcc $396d00	                BCC check_ctrl1
.396cfe		80 2b		bra $396d2b	                BRA printc          ; [$A0..$FF]: print it
.396d00		c9 91		cmp #$91	check_ctrl1     CMP #CHAR_DOWN      ; If the down arrow key was pressed
.396d02		f0 53		beq $396d57	                BEQ go_down         ; ... move the cursor down one row
.396d04		c9 9d		cmp #$9d	                CMP #CHAR_LEFT      ; If the left arrow key was pressed
.396d06		f0 61		beq $396d69	                BEQ go_left         ; ... move the cursor left one column
.396d08		4c 35 6d	jmp $396d35	                JMP done
.396d0b		c9 09		cmp #$09	check_ctrl0     CMP #CHAR_TAB       ; If it's a TAB...
.396d0d		f0 69		beq $396d78	                BEQ do_TAB          ; ... move to the next TAB stop
.396d0f		c9 08		cmp #$08	                CMP #CHAR_BS        ; If it's a backspace...
.396d11		f0 34		beq $396d47	                BEQ backspace       ; ... move the cursor back and replace with a space
.396d13		c9 0d		cmp #$0d	                CMP #CHAR_CR        ; If the carriage return was pressed
.396d15		f0 3a		beq $396d51	                BEQ do_cr           ; ... move cursor down and to the first column
.396d17		c9 11		cmp #$11	                CMP #CHAR_UP        ; If the up arrow key was pressed
.396d19		f0 42		beq $396d5d	                BEQ go_up           ; ... move the cursor up one row
.396d1b		c9 1d		cmp #$1d	                CMP #CHAR_RIGHT     ; If the right arrow key was pressed
.396d1d		f0 44		beq $396d63	                BEQ go_right        ; ... move the cursor right one column
.396d1f		c9 0f		cmp #$0f	                CMP #CHAR_INS       ; If the insert key was pressed
.396d21		f0 1e		beq $396d41	                BEQ do_ins          ; ... insert a space
.396d23		c9 01		cmp #$01	                CMP #CHAR_CTRL_A    ; Check for CTRL-A (start of line)
.396d25		f0 48		beq $396d6f	                BEQ go_sol          ; ... move the cursor to the start of the line
.396d27		c9 05		cmp #$05	                CMP #CHAR_CTRL_E    ; Check for CTRL-E (end of line)
.396d29		f0 74		beq $396d9f	                BEQ go_eol          ; ... move the cursor to the end of the line
.396d2b		87 6b		sta [$6b]	printc          STA [EVID_CURSORPOS]     ; Save the character on the screen
.396d2d		a5 72		lda $72		                LDA EVID_CURCOLOR        ; Set the color based on CURCOLOR
.396d2f		87 76		sta [$76]	                STA [EVID_COLORPOS]
.396d31		22 66 6e 39	jsl $396e66	                JSL EVID_ICSRRIGHT       ; And advance the cursor
.396d35		28		plp		done            PLP
.396d36		ab		plb		                PLB
.396d37		2b		pld		                PLD
.396d38		7a		ply		                PLY
.396d39		fa		plx		                PLX
.396d3a		6b		rtl		                RTL
.396d3b		22 cc 6d 39	jsl $396dcc	do_del          JSL EVID_SCRSHIFTLL      ; Shift the current line left one space into the cursor
.396d3f		80 f4		bra $396d35	                BRA done
.396d41		22 f0 6d 39	jsl $396df0	do_ins          JSL EVID_SCRSHIFTLR      ; Shift the current line right one space from the cursor
.396d45		80 ee		bra $396d35	                BRA done
.396d47		22 99 6e 39	jsl $396e99	backspace       JSL EVID_ICSRLEFT
.396d4b		22 cc 6d 39	jsl $396dcc	                JSL EVID_SCRSHIFTLL      ; Shift the current line left one space into the cursor
.396d4f		80 e4		bra $396d35	                BRA done
.396d51		22 28 6e 39	jsl $396e28	do_cr           JSL EVID_IPRINTCR        ; Move the cursor to the beginning of the next line
.396d55		80 de		bra $396d35	                BRA done
.396d57		22 e5 6e 39	jsl $396ee5	go_down         JSL EVID_ICSRDOWN        ; Move the cursor down one row (might force a scroll)
.396d5b		80 d8		bra $396d35	                BRA done
.396d5d		22 bf 6e 39	jsl $396ebf	go_up           JSL EVID_ICSRUP          ; Move the cursor up one line
.396d61		80 d2		bra $396d35	                BRA done
.396d63		22 66 6e 39	jsl $396e66	go_right        JSL EVID_ICSRRIGHT       ; Move the cursor right one column
.396d67		80 cc		bra $396d35	                BRA done
.396d69		22 99 6e 39	jsl $396e99	go_left         JSL EVID_ICSRLEFT        ; Move the cursor left one column
.396d6d		80 c6		bra $396d35	                BRA done
.396d6f						go_sol
.396d6f		c2 20		rep #$20	                REP #$20        ; set A long
.396d71		a2 00 00	ldx #$0000	                LDX #0
.396d74		a4 70		ldy $70		                LDY EVID_CURSORY
.396d76		80 21		bra $396d99	                BRA do_locate
.396d78						do_TAB
.396d78		c2 20		rep #$20	                REP #$20        ; set A long
.396d7a		a5 6e		lda $6e		                LDA EVID_CURSORX         ; Get the current column
.396d7c		29 f8 ff	and #$fff8	                AND #$FFF8          ; See which group of 8 it's in
.396d7f		18		clc		                CLC
.396d80		69 08 00	adc #$0008	                ADC #$0008          ; And move it to the next one
.396d83		aa		tax		                TAX
.396d84		a4 70		ldy $70		                LDY EVID_CURSORY
.396d86		e2 20		sep #$20	                SEP #$20        ; set A short
.396d88		e4 63		cpx $63		set_xy          CPX EVID_COLS_VISIBLE    ; Check if we're still on screen horizontally
.396d8a		90 04		bcc $396d90	                BCC check_row       ; Yes: check the row
.396d8c		a2 00 00	ldx #$0000	                LDX #0              ; No: move to the first column...
.396d8f		c8		iny		                INY                 ; ... and the next row
.396d90		c4 67		cpy $67		check_row       CPY EVID_LINES_VISIBLE   ; Check if we're still on the screen vertically
.396d92		90 05		bcc $396d99	                BCC do_locate       ; Yes: reposition the cursor
.396d94		22 56 6f 39	jsl $396f56	                JSL EVID_ISCROLLUP       ; No: scroll the screen
.396d98		88		dey		                DEY                 ; And set the row to the last one
.396d99		22 0a 6f 39	jsl $396f0a	do_locate       JSL EVID_ILOCATE         ; Set the cursor position
.396d9d		80 96		bra $396d35	                BRA done
.396d9f		a6 63		ldx $63		go_eol          LDX EVID_COLS_VISIBLE    ; Move the cursor to the right most column
.396da1		ca		dex		                DEX
.396da2		a4 70		ldy $70		                LDY EVID_CURSORY
.396da4		22 0a 6f 39	jsl $396f0a	                JSL EVID_ILOCATE
.396da8		e2 20		sep #$20	                SEP #$20        ; set A short
.396daa		a7 6b		lda [$6b]	eol_loop        LDA [EVID_CURSORPOS]     ; Get the character under the cursor
.396dac		c9 20		cmp #$20	                CMP #CHAR_SP        ; Is it blank?
.396dae		d0 0b		bne $396dbb	                BNE eol_done        ; No: exit the loop
.396db0		22 99 6e 39	jsl $396e99	                JSL EVID_ICSRLEFT        ; Yes: move to the left
.396db4		a6 6e		ldx $6e		                LDX EVID_CURSORX         ; Are we at column 0?
.396db6		d0 f2		bne $396daa	                BNE eol_loop        ; No: try again
.396db8		82 7a ff	brl $396d35	                BRL done            ; Yes: we're done
.396dbb		a6 6e		ldx $6e		eol_done        LDX EVID_CURSORX         ; Check the column
.396dbd		e8		inx		                INX
.396dbe		e4 63		cpx $63		                CPX EVID_COLS_VISIBLE    ; Is it the right most?
.396dc0		d0 03		bne $396dc5	                BNE eol_right
.396dc2		82 70 ff	brl $396d35	                BRL done            ; Yes: we're done
.396dc5		22 66 6e 39	jsl $396e66	eol_right       JSL EVID_ICSRRIGHT       ; No: move right one column
.396dc9		82 69 ff	brl $396d35	                BRL done
.396dcc						EVID_SCRSHIFTLL
.396dcc		da		phx		                PHX
.396dcd		5a		phy		                PHY
.396dce		48		pha		                PHA
.396dcf		0b		phd		                PHD
.396dd0		08		php		                PHP
.396dd1		48		pha		                PHA             ; begin setdp macro
.396dd2		08		php		                PHP
.396dd3		c2 20		rep #$20	                REP #$20        ; set A long
.396dd5		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.396dd8		5b		tcd		                TCD
.396dd9		28		plp		                PLP
.396dda		68		pla		                PLA             ; end setdp macro
.396ddb		c2 30		rep #$30	                REP #$30        ; set A&X long
.396ddd		a5 6b		lda $6b		                LDA EVID_CURSORPOS       ; Get the current cursor position
.396ddf		a8		tay		                TAY                 ; Set it as the destination
.396de0		aa		tax		                TAX
.396de1		e8		inx		                INX                 ; And set the next cell as the source
.396de2		18		clc		                CLC                 ; Calculate the length of the block to move
.396de3		a5 63		lda $63		                LDA EVID_COLS_VISIBLE    ; as columns visible - X
.396de5		e5 6e		sbc $6e		                SBC EVID_CURSORX
.396de7		54 ae ae	mvn $ae,$ae	                MVN $AE, $AE        ; And move the block
.396dea		28		plp		                PLP
.396deb		2b		pld		                PLD
.396dec		68		pla		                PLA
.396ded		7a		ply		                PLY
.396dee		fa		plx		                PLX
.396def		6b		rtl		                RTL
.396df0						EVID_SCRSHIFTLR
.396df0		da		phx		                PHX
.396df1		48		pha		                PHA
.396df2		0b		phd		                PHD
.396df3		08		php		                PHP
.396df4		48		pha		                PHA             ; begin setdp macro
.396df5		08		php		                PHP
.396df6		c2 20		rep #$20	                REP #$20        ; set A long
.396df8		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.396dfb		5b		tcd		                TCD
.396dfc		28		plp		                PLP
.396dfd		68		pla		                PLA             ; end setdp macro
.396dfe		c2 30		rep #$30	                REP #$30        ; set A&X long
.396e00		a5 6e		lda $6e		                LDA EVID_CURSORX         ; What column are we on
.396e02		1a		inc a		                INC A
.396e03		c5 63		cmp $63		                CMP EVID_COLS_VISIBLE    ; >= the # visible?
.396e05		b0 1b		bcs $396e22	                BGE done            ; Yes: just skip the whole thing
.396e07		38		sec		                SEC                 ; Calculate the length of the block to move
.396e08		a5 63		lda $63		                LDA EVID_COLS_VISIBLE
.396e0a		e5 6e		sbc $6e		                SBC EVID_CURSORX
.396e0c		1a		inc a		                INC A
.396e0d		18		clc		                CLC
.396e0e		65 6b		adc $6b		                ADC EVID_CURSORPOS       ; Add the current cursor position
.396e10		3a		dec a		                DEC A
.396e11		a8		tay		                TAY                 ; Make it the destination
.396e12		3a		dec a		                DEC A               ; Move to the previous column
.396e13		aa		tax		                TAX                 ; Make it the source
.396e14		38		sec		                SEC                 ; Calculate the length of the block to move
.396e15		a5 63		lda $63		                LDA EVID_COLS_VISIBLE    ; as columns visible - X
.396e17		e5 6e		sbc $6e		                SBC EVID_CURSORX
.396e19		44 ae ae	mvp $ae,$ae	                MVP $AE, $AE        ; And move the block
.396e1c		e2 20		sep #$20	                SEP #$20        ; set A short
.396e1e		a9 20		lda #$20	                LDA #CHAR_SP        ; Put a blank space at the cursor position
.396e20		87 6b		sta [$6b]	                STA [EVID_CURSORPOS]
.396e22		28		plp		done            PLP
.396e23		2b		pld		                PLD
.396e24		68		pla		                PLA
.396e25		fa		plx		                PLX
.396e26		6b		rtl		                RTL
.396e27						EVID_IPUTB
.396e27		6b		rtl		                RTL
.396e28						EVID_IPRINTCR
.396e28		da		phx		                PHX
.396e29		5a		phy		                PHY
.396e2a		8b		phb		                PHB
.396e2b		0b		phd		                PHD
.396e2c		08		php		                PHP
.396e2d		48		pha		                PHA             ; begin setdbr macro
.396e2e		08		php		                PHP
.396e2f		e2 20		sep #$20	                SEP #$20        ; set A short
.396e31		a9 00		lda #$00	                LDA #0
.396e33		48		pha		                PHA
.396e34		ab		plb		                PLB
.396e35		28		plp		                PLP
.396e36		68		pla		                PLA             ; end setdbr macro
.396e37		48		pha		                PHA             ; begin setdp macro
.396e38		08		php		                PHP
.396e39		c2 20		rep #$20	                REP #$20        ; set A long
.396e3b		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.396e3e		5b		tcd		                TCD
.396e3f		28		plp		                PLP
.396e40		68		pla		                PLA             ; end setdp macro
.396e41		e2 20		sep #$20	                SEP #$20        ; set A short
.396e43		c2 10		rep #$10	                REP #$10        ; set X long
.396e45		a2 00 00	ldx #$0000	scr_printcr     LDX #0
.396e48		a4 70		ldy $70		                LDY EVID_CURSORY
.396e4a		c8		iny		                INY
.396e4b		22 0a 6f 39	jsl $396f0a	                JSL EVID_ILOCATE
.396e4f		28		plp		done            PLP
.396e50		2b		pld		                PLD
.396e51		ab		plb		                PLB
.396e52		7a		ply		                PLY
.396e53		fa		plx		                PLX
.396e54		6b		rtl		                RTL
.396e55						EVID_ICSRHOME
.396e55		da		phx		                PHX
.396e56		5a		phy		                PHY
.396e57		08		php		                PHP
.396e58		a2 00 00	ldx #$0000	                LDX #0
.396e5b		a0 00 00	ldy #$0000	                LDY #0
.396e5e		22 0a 6f 39	jsl $396f0a	                JSL EVID_ILOCATE
.396e62		28		plp		                PLP
.396e63		7a		ply		                PLY
.396e64		fa		plx		                PLX
.396e65		6b		rtl		                RTL
.396e66						EVID_ICSRRIGHT
.396e66		da		phx		                PHX
.396e67		5a		phy		                PHY
.396e68		48		pha		                PHA
.396e69		0b		phd		                PHD
.396e6a		08		php		                PHP
.396e6b		c2 20		rep #$20	                REP #$20        ; set A long
.396e6d		c2 10		rep #$10	                REP #$10        ; set X long
.396e6f		48		pha		                PHA             ; begin setdp macro
.396e70		08		php		                PHP
.396e71		c2 20		rep #$20	                REP #$20        ; set A long
.396e73		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.396e76		5b		tcd		                TCD
.396e77		28		plp		                PLP
.396e78		68		pla		                PLA             ; end setdp macro
.396e79		a6 6e		ldx $6e		                LDX EVID_CURSORX           ; Get the new column
.396e7b		e8		inx		                INX
.396e7c		a4 70		ldy $70		                LDY EVID_CURSORY           ; Get the current row
.396e7e		e4 63		cpx $63		                CPX EVID_COLS_VISIBLE      ; Are we off screen?
.396e80		90 0d		bcc $396e8f	                BCC icsrright_nowrap  ; No: just set the position
.396e82		a2 00 00	ldx #$0000	                LDX #0                ; Yes: move to the first column
.396e85		c8		iny		                INY                   ; And move to the next row
.396e86		c4 67		cpy $67		                CPY EVID_LINES_VISIBLE     ; Are we still off screen?
.396e88		90 05		bcc $396e8f	                BCC icsrright_nowrap  ; No: just set the position
.396e8a		88		dey		                DEY                   ; Yes: lock to the last row
.396e8b		22 56 6f 39	jsl $396f56	                JSL EVID_ISCROLLUP         ; But scroll the screen up
.396e8f						icsrright_nowrap
.396e8f		22 0a 6f 39	jsl $396f0a	                JSL EVID_ILOCATE           ; Set the cursor position
.396e93		28		plp		                PLP
.396e94		2b		pld		                PLD
.396e95		68		pla		                PLA
.396e96		7a		ply		                PLY
.396e97		fa		plx		                PLX
.396e98		6b		rtl		                RTL
.396e99						EVID_ICSRLEFT
.396e99		da		phx		                PHX
.396e9a		5a		phy		                PHY
.396e9b		48		pha		                PHA
.396e9c		0b		phd		                PHD
.396e9d		08		php		                PHP
.396e9e		c2 30		rep #$30	                REP #$30        ; set A&X long
.396ea0		48		pha		                PHA             ; begin setdp macro
.396ea1		08		php		                PHP
.396ea2		c2 20		rep #$20	                REP #$20        ; set A long
.396ea4		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.396ea7		5b		tcd		                TCD
.396ea8		28		plp		                PLP
.396ea9		68		pla		                PLA             ; end setdp macro
.396eaa		a5 6e		lda $6e		                LDA EVID_CURSORX
.396eac		f0 0b		beq $396eb9	                BEQ icsrleft_done_already_zero ; Check that we are not already @ Zero
.396eae		a6 6e		ldx $6e		                LDX EVID_CURSORX
.396eb0		ca		dex		                DEX
.396eb1		86 6e		stx $6e		                STX EVID_CURSORX
.396eb3		a4 70		ldy $70		                LDY EVID_CURSORY
.396eb5		22 0a 6f 39	jsl $396f0a	                JSL EVID_ILOCATE
.396eb9						icsrleft_done_already_zero
.396eb9		28		plp		                PLP
.396eba		2b		pld		                PLD
.396ebb		68		pla		                PLA
.396ebc		7a		ply		                PLY
.396ebd		fa		plx		                PLX
.396ebe		6b		rtl		                RTL
.396ebf						EVID_ICSRUP
.396ebf		da		phx		                PHX
.396ec0		5a		phy		                PHY
.396ec1		48		pha		                PHA
.396ec2		0b		phd		                PHD
.396ec3		08		php		                PHP
.396ec4		c2 30		rep #$30	                REP #$30        ; set A&X long
.396ec6		48		pha		                PHA             ; begin setdp macro
.396ec7		08		php		                PHP
.396ec8		c2 20		rep #$20	                REP #$20        ; set A long
.396eca		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.396ecd		5b		tcd		                TCD
.396ece		28		plp		                PLP
.396ecf		68		pla		                PLA             ; end setdp macro
.396ed0		a5 70		lda $70		                LDA EVID_CURSORY
.396ed2		f0 0b		beq $396edf	                BEQ isrup_done_already_zero ; Check if we are not already @ Zero
.396ed4		a4 70		ldy $70		                LDY EVID_CURSORY
.396ed6		88		dey		                DEY
.396ed7		84 70		sty $70		                STY EVID_CURSORY
.396ed9		a6 6e		ldx $6e		                LDX EVID_CURSORX
.396edb		22 0a 6f 39	jsl $396f0a	                JSL EVID_ILOCATE
.396edf						isrup_done_already_zero
.396edf		28		plp		                PLP
.396ee0		2b		pld		                PLD
.396ee1		68		pla		                PLA
.396ee2		7a		ply		                PLY
.396ee3		fa		plx		                PLX
.396ee4		6b		rtl		                RTL
.396ee5						EVID_ICSRDOWN
.396ee5		da		phx		                PHX
.396ee6		5a		phy		                PHY
.396ee7		0b		phd		                PHD
.396ee8		c2 30		rep #$30	                REP #$30        ; set A&X long
.396eea		48		pha		                PHA             ; begin setdp macro
.396eeb		08		php		                PHP
.396eec		c2 20		rep #$20	                REP #$20        ; set A long
.396eee		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.396ef1		5b		tcd		                TCD
.396ef2		28		plp		                PLP
.396ef3		68		pla		                PLA             ; end setdp macro
.396ef4		a6 6e		ldx $6e		                LDX EVID_CURSORX                 ; Get the current column
.396ef6		a4 70		ldy $70		                LDY EVID_CURSORY                 ; Get the new row
.396ef8		c8		iny		                INY
.396ef9		c4 67		cpy $67		                CPY EVID_LINES_VISIBLE           ; Check to see if we're off screen
.396efb		90 05		bcc $396f02	                BCC icsrdown_noscroll       ; No: go ahead and set the position
.396efd		88		dey		                DEY                         ; Yes: go back to the last row
.396efe		22 56 6f 39	jsl $396f56	                JSL EVID_ISCROLLUP               ; But scroll the screen up
.396f02						icsrdown_noscroll
.396f02		22 0a 6f 39	jsl $396f0a	                JSL EVID_ILOCATE                 ; And set the cursor position
.396f06		2b		pld		                PLD
.396f07		7a		ply		                PLY
.396f08		fa		plx		                PLX
.396f09		6b		rtl		                RTL
.396f0a						EVID_ILOCATE
.396f0a		48		pha		                PHA
.396f0b		0b		phd		                PHD
.396f0c		08		php		                PHP
.396f0d		48		pha		                PHA             ; begin setdp macro
.396f0e		08		php		                PHP
.396f0f		c2 20		rep #$20	                REP #$20        ; set A long
.396f11		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.396f14		5b		tcd		                TCD
.396f15		28		plp		                PLP
.396f16		68		pla		                PLA             ; end setdp macro
.396f17		c2 30		rep #$30	                REP #$30        ; set A&X long
.396f19						ilocate_scroll
.396f19		c4 67		cpy $67		                CPY EVID_LINES_VISIBLE
.396f1b		90 07		bcc $396f24	                BCC ilocate_scrolldone
.396f1d		22 56 6f 39	jsl $396f56	                JSL EVID_ISCROLLUP
.396f21		88		dey		                DEY
.396f22		80 f5		bra $396f19	                BRA ilocate_scroll
.396f24						ilocate_scrolldone
.396f24		86 6e		stx $6e		                STX EVID_CURSORX
.396f26		84 70		sty $70		                STY EVID_CURSORY
.396f28		a5 60		lda $60		                LDA EVID_SCREENBEGIN
.396f2a						ilocate_row
.396f2a		c0 00 00	cpy #$0000	                CPY #$0
.396f2d		f0 08		beq $396f37	                BEQ ilocate_right
.396f2f		18		clc		ilocate_down    CLC
.396f30		65 65		adc $65		                ADC EVID_COLS_PER_LINE
.396f32		88		dey		                DEY
.396f33		f0 02		beq $396f37	                BEQ ilocate_right
.396f35		80 f8		bra $396f2f	                BRA ilocate_down
.396f37		18		clc		ilocate_right   CLC
.396f38		65 6e		adc $6e		                ADC EVID_CURSORX             ; move the cursor right X columns
.396f3a		85 6b		sta $6b		                STA EVID_CURSORPOS
.396f3c		a4 70		ldy $70		                LDY EVID_CURSORY
.396f3e		98		tya		                TYA
.396f3f		8f 16 1e ae	sta $ae1e16	                STA @lEVID_TXT_CURSOR_Y_REG_L  ;Store in Vicky's registers
.396f43		8a		txa		                TXA
.396f44		8f 14 1e ae	sta $ae1e14	                STA @lEVID_TXT_CURSOR_X_REG_L  ;Store in Vicky's register
.396f48		c2 20		rep #$20	                REP #$20        ; set A long
.396f4a		18		clc		                CLC
.396f4b		a5 6b		lda $6b		                LDA EVID_CURSORPOS
.396f4d		69 00 20	adc #$2000	                ADC #<>(EVID_COLOR_MEM - EVID_TEXT_MEM)
.396f50		85 76		sta $76		                STA EVID_COLORPOS
.396f52		28		plp		ilocate_done    PLP
.396f53		2b		pld		                PLD
.396f54		68		pla		                PLA
.396f55		6b		rtl		                RTL
.396f56						EVID_ISCROLLUP
.396f56		48		pha		                PHA
.396f57		da		phx		                PHX
.396f58		5a		phy		                PHY
.396f59		8b		phb		                PHB
.396f5a		0b		phd		                PHD
.396f5b		08		php		                PHP
.396f5c		48		pha		                PHA             ; begin setdp macro
.396f5d		08		php		                PHP
.396f5e		c2 20		rep #$20	                REP #$20        ; set A long
.396f60		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.396f63		5b		tcd		                TCD
.396f64		28		plp		                PLP
.396f65		68		pla		                PLA             ; end setdp macro
.396f66		c2 30		rep #$30	                REP #$30        ; set A&X long
.396f68		a5 65		lda $65		                LDA EVID_COLS_PER_LINE
.396f6a		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.396f6e		a5 67		lda $67		                LDA EVID_LINES_VISIBLE
.396f70		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.396f74		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.396f78		85 79		sta $79		                STA EVID_TMPPTR1
.396f7a		18		clc		                CLC
.396f7b		a9 00 20	lda #$2000	                LDA #$2000
.396f7e		a8		tay		                TAY
.396f7f		65 65		adc $65		                ADC EVID_COLS_PER_LINE
.396f81		aa		tax		                TAX
.396f82		a5 79		lda $79		                LDA EVID_TMPPTR1
.396f84		54 ae ae	mvn $ae,$ae	                MVN $AE,$AE
.396f87		c2 30		rep #$30	                REP #$30        ; set A&X long
.396f89		18		clc		                CLC
.396f8a		a9 00 40	lda #$4000	                LDA #$4000
.396f8d		a8		tay		                TAY
.396f8e		65 65		adc $65		                ADC EVID_COLS_PER_LINE
.396f90		aa		tax		                TAX
.396f91		a5 79		lda $79		                LDA EVID_TMPPTR1
.396f93		54 ae ae	mvn $ae,$ae	                MVN $AE,$AE
.396f96		a5 79		lda $79		                LDA EVID_TMPPTR1
.396f98		48		pha		                PHA
.396f99		18		clc		                CLC
.396f9a		69 00 20	adc #$2000	                ADC #<>EVID_TEXT_MEM
.396f9d		85 79		sta $79		                STA EVID_TMPPTR1
.396f9f		a0 00 00	ldy #$0000	                LDY #0
.396fa2		a9 20 00	lda #$0020	                LDA #' '
.396fa5		97 79		sta [$79],y	clr_text        STA [EVID_TMPPTR1],Y
.396fa7		c8		iny		                INY
.396fa8		c4 63		cpy $63		                CPY EVID_COLS_VISIBLE
.396faa		d0 f9		bne $396fa5	                BNE clr_text
.396fac		68		pla		                PLA
.396fad		18		clc		                CLC
.396fae		69 00 40	adc #$4000	                ADC #<>EVID_COLOR_MEM
.396fb1		85 79		sta $79		                STA EVID_TMPPTR1
.396fb3		a0 00 00	ldy #$0000	                LDY #0
.396fb6		a5 72		lda $72		                LDA EVID_CURCOLOR
.396fb8		97 79		sta [$79],y	clr_color       STA [EVID_TMPPTR1],Y
.396fba		c8		iny		                INY
.396fbb		c4 63		cpy $63		                CPY EVID_COLS_VISIBLE
.396fbd		d0 f9		bne $396fb8	                BNE clr_color
.396fbf		28		plp		                PLP
.396fc0		2b		pld		                PLD
.396fc1		ab		plb		                PLB
.396fc2		7a		ply		                PLY
.396fc3		fa		plx		                PLX
.396fc4		68		pla		                PLA
.396fc5		6b		rtl		                RTL
.396fc6						EVID_IPRINTH
.396fc6		08		php		                PHP
.396fc7		48		pha		                PHA
.396fc8						iprinth1
.396fc8		e2 20		sep #$20	                SEP #$20        ; set A short
.396fca		bd 00 00	lda $0000,x	                LDA #0,b,x      ; Read the value to be printed
.396fcd		4a		lsr a		                LSR
.396fce		4a		lsr a		                LSR
.396fcf		4a		lsr a		                LSR
.396fd0		4a		lsr a		                LSR
.396fd1		22 20 70 39	jsl $397020	                JSL EVID_iprint_digit
.396fd5		bd 00 00	lda $0000,x	                LDA #0,b,x
.396fd8		22 20 70 39	jsl $397020	                JSL EVID_iprint_digit
.396fdc		ca		dex		                DEX
.396fdd		88		dey		                DEY
.396fde		d0 e8		bne $396fc8	                BNE iprinth1
.396fe0		68		pla		                PLA
.396fe1		28		plp		                PLP
.396fe2		6b		rtl		                RTL
.396fe3						EVID_IPRINTAH
.396fe3		48		pha		                PHA
.396fe4		08		php		                PHP
.396fe5		8f 44 02 00	sta $000244	                STA @lCPUA              ; Save A where we can use it multiple times
.396fe9		08		php		                PHP                     ; Get the processor status into A
.396fea		e2 20		sep #$20	                SEP #$20        ; set A short
.396fec		c2 10		rep #$10	                REP #$10        ; set X long
.396fee		68		pla		                PLA
.396fef		29 20		and #$20	                AND #%00100000          ; Is M = 1?
.396ff1		c9 20		cmp #$20	                CMP #%00100000
.396ff3		f0 14		beq $397009	                BEQ eight_bit
.396ff5		af 45 02 00	lda $000245	                LDA @lCPUA+1            ; Get nibble [15..12]
.396ff9		4a		lsr a		                LSR A
.396ffa		4a		lsr a		                LSR A
.396ffb		4a		lsr a		                LSR A
.396ffc		4a		lsr a		                LSR A
.396ffd		22 20 70 39	jsl $397020	                JSL EVID_iprint_digit   ; And print it
.397001		af 45 02 00	lda $000245	                LDA @lCPUA+1            ; Get nibble [11..8]
.397005		22 20 70 39	jsl $397020	                JSL EVID_iprint_digit   ; And print it
.397009		af 44 02 00	lda $000244	eight_bit       LDA @lCPUA              ; Get nibble [7..4]
.39700d		4a		lsr a		                LSR A
.39700e		4a		lsr a		                LSR A
.39700f		4a		lsr a		                LSR A
.397010		4a		lsr a		                LSR A
.397011		22 20 70 39	jsl $397020	                JSL EVID_iprint_digit   ; And print it
.397015		af 44 02 00	lda $000244	                LDA @lCPUA              ; Get nibble [3..0]
.397019		22 20 70 39	jsl $397020	                JSL EVID_iprint_digit   ; And print it
.39701d		28		plp		                PLP
.39701e		68		pla		                PLA
.39701f		6b		rtl		                RTL
.397020						EVID_iprint_digit
.397020		da		phx		                PHX
.397021		c2 20		rep #$20	                REP #$20        ; set A long
.397023		29 0f 00	and #$000f	                AND #$0F
.397026		aa		tax		                TAX
.397027		bf 63 7d 39	lda $397d63,x	                LDA hex_digits,X
.39702b		22 cd 6c 39	jsl $396ccd	                JSL EVID_IPUTC       ; Print the digit
.39702f		fa		plx		                PLX
.397030		6b		rtl		                RTL
.397031						INIT_EVID_VID_MODE
.397031		e2 20		sep #$20	                SEP #$20        ; set A short
.397033		a9 01		lda #$01	                LDA #EVID_800x600ModeEnable          ; 0 - 80x60, 1- 100x75
.397035		8f 01 1e ae	sta $ae1e01	                STA @l EVID_MSTR_CTRL_REG_H
.397039		a9 01		lda #$01	                LDA #EVID_Border_Ctrl_Enable           ; Enable the Border
.39703b		8f 04 1e ae	sta $ae1e04	                STA EVID_BORDER_CTRL_REG
.39703f		a9 08		lda #$08	                LDA #8                           ; Set the border to the standard 8 pixels
.397041		8f 08 1e ae	sta $ae1e08	                STA EVID_BORDER_X_SIZE          ; Let's use maximum space
.397045		8f 09 1e ae	sta $ae1e09	                STA EVID_BORDER_Y_SIZE
.397049		a9 20		lda #$20	                LDA #$20
.39704b		8f 07 1e ae	sta $ae1e07	                STA EVID_BORDER_COLOR_R        ; R
.39704f		a9 00		lda #$00	                LDA #$00
.397051		8f 06 1e ae	sta $ae1e06	                STA EVID_BORDER_COLOR_G        ; G
.397055		a9 20		lda #$20	                LDA #$20
.397057		8f 05 1e ae	sta $ae1e05	                STA EVID_BORDER_COLOR_B        ; B
.39705b		22 2d 71 39	jsl $39712d	                JSL INIT_EVID_EVID_LUT
.39705f		22 16 71 39	jsl $397116	                JSL INIT_EVID_EVID_FONTSET
.397063		22 51 71 39	jsl $397151	                JSL INIT_EVID_EVID_CURSOR
.397067		c2 30		rep #$30	                REP #$30        ; set A&X long
.397069		a2 62 00	ldx #$0062	                LDX #(100-2)
.39706c		86 63		stx $63		                STX EVID_COLS_VISIBLE
.39706e		a0 49 00	ldy #$0049	                LDY #(75-2)
.397071		84 67		sty $67		                STY EVID_LINES_VISIBLE
.397073		a2 64 00	ldx #$0064	                LDX #100
.397076		86 65		stx $65		                STX EVID_COLS_PER_LINE
.397078		a0 4b 00	ldy #$004b	                LDY #75
.39707b		84 69		sty $69		                STY EVID_LINES_MAX
.39707d		a9 70 00	lda #$0070	                LDA #$70                  ; Set the default text color to light gray on dark gray
.397080		85 72		sta $72		                STA EVID_CURCOLOR
.397082		c2 30		rep #$30	                REP #$30        ; set A&X long
.397084		a9 00 20	lda #$2000	                LDA #<>EVID_TEXT_MEM      ; store the initial screen buffer location
.397087		85 60		sta $60		                STA EVID_SCREENBEGIN
.397089		85 6b		sta $6b		                STA EVID_CURSORPOS
.39708b		a9 00 40	lda #$4000	                LDA #<>EVID_COLOR_MEM   ; Set the initial COLOR cursor position
.39708e		85 76		sta $76		                STA EVID_COLORPOS
.397090		e2 20		sep #$20	                SEP #$20        ; set A short
.397092		a9 ae		lda #$ae	                LDA #`EVID_TEXT_MEM
.397094		85 0e		sta $0e		                STA SCREENBEGIN + 2
.397096		85 6d		sta $6d		                STA EVID_CURSORPOS+2
.397098		a9 ae		lda #$ae	                LDA #`EVID_COLOR_MEM    ; Set the initial COLOR cursor position
.39709a		85 78		sta $78		                STA EVID_COLORPOS + 2
.39709c		22 6f 71 39	jsl $39716f	                JSL INIT_EVID_EVID_CLRSCREEN
.3970a0		c2 10		rep #$10	                REP #$10        ; set X long
.3970a2		0b		phd		                PHD
.3970a3		48		pha		                PHA             ; begin setdbr macro
.3970a4		08		php		                PHP
.3970a5		e2 20		sep #$20	                SEP #$20        ; set A short
.3970a7		a9 39		lda #$39	                LDA #`EVID_DEV_RDY0
.3970a9		48		pha		                PHA
.3970aa		ab		plb		                PLB
.3970ab		28		plp		                PLP
.3970ac		68		pla		                PLA             ; end setdbr macro
.3970ad		a2 ce 70	ldx #$70ce	                LDX #<>EVID_DEV_RDY0
.3970b0		22 ad 6c 39	jsl $396cad	                JSL EVID_IPRINT
.3970b4		a2 fe 70	ldx #$70fe	                LDX #<>EVID_DEV_RDY1
.3970b7		22 ad 6c 39	jsl $396cad	                JSL EVID_IPRINT
.3970bb		2b		pld		                PLD
.3970bc		a2 00 00	ldx #$0000	                LDX #$0000
.3970bf						LifeIsFullOfColors:
.3970bf		bf f4 70 39	lda $3970f4,x	                LDA @l EVID_DEV_RDY0_CLR, X
.3970c3		9f 00 40 ae	sta $ae4000,x	                STA @l EVID_COLOR_MEM, X
.3970c7		e8		inx		                INX
.3970c8		e0 0a 00	cpx #$000a	                CPX #10
.3970cb		d0 f2		bne $3970bf	                BNE LifeIsFullOfColors
.3970cd		6b		rtl		                RTL
>3970ce		0b 0c 0b 0c 0b 0c 0b 0c		EVID_DEV_RDY0  .null $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "C256 Foenix EXP-C200-EVID", $0D
>3970d6		0b 0c 20 43 32 35 36 20 46 6f 65 6e 69 78 20 45
>3970e6		58 50 2d 43 32 30 30 2d 45 56 49 44 0d 00
>3970f4		1d 1d 8d 8d 4d 4d 2d 2d		EVID_DEV_RDY0_CLR .text $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D
>3970fc		5d 5d
>3970fe		59 6f 75 72 20 44 65 76		EVID_DEV_RDY1  .null "Your Device is Ready..."
>397106		69 63 65 20 69 73 20 52 65 61 64 79 2e 2e 2e 00
=100						TXTLINESIZE = 100
.397116						INIT_EVID_EVID_FONTSET
.397116		e2 20		sep #$20	                SEP #$20        ; set A short
.397118		c2 10		rep #$10	                REP #$10        ; set X long
.39711a		a2 00 00	ldx #$0000	                LDX #$0000
.39711d						initFontsetbranch0
.39711d		bf 00 00 3f	lda $3f0000,x	                LDA @lFONT_4_BANK0,X    ; RAM Content
.397121		9f 00 10 ae	sta $ae1000,x	                STA @lEVID_FONT_MEM,X ; Vicky FONT RAM Bank
.397125		e8		inx		                INX
.397126		e0 00 08	cpx #$0800	                CPX #$0800
.397129		d0 f2		bne $39711d	                BNE initFontsetbranch0
.39712b		ea		nop		                NOP
.39712c		6b		rtl		                RTL
.39712d						INIT_EVID_EVID_LUT
.39712d		e2 20		sep #$20	                SEP #$20        ; set A short
.39712f		e2 10		sep #$10	                SEP #$10        ; set X short
.397131		a2 00		ldx #$00					        LDX	#$00
.397133		bf 92 7a 39	lda $397a92,x	lutinitloop0	LDA @lfg_color_lut,x		; get Local Data c64_character_Color_LUT_4_Txt
.397137		9f 00 1b ae	sta $ae1b00,x	                STA @lEVID_FG_LUT,x	; Write in LUT Memory
.39713b		e8		inx		                inx
.39713c		e0 40		cpx #$40	                cpx #$40
.39713e		d0 f3		bne $397133	                bne lutinitloop0
.397140		a2 00		ldx #$00	                LDX	#$00
.397142		bf d2 7a 39	lda $397ad2,x	lutinitloop1	LDA @lbg_color_lut,x		; get Local Data
.397146		9f 40 1b ae	sta $ae1b40,x	                STA @lEVID_BG_LUT,x	; Write in LUT Memory
.39714a		e8		inx		                INX
.39714b		e0 40		cpx #$40	                CPX #$40
.39714d		d0 f3		bne $397142	                bne lutinitloop1
.39714f		ea		nop		                NOP
.397150		6b		rtl		                RTL
.397151						INIT_EVID_EVID_CURSOR
.397151		e2 20		sep #$20	                SEP #$20        ; set A short
.397153		a9 b1		lda #$b1	                LDA #$B1      ;The Cursor Character will be a Fully Filled Block
.397155		8f 12 1e ae	sta $ae1e12	                STA @lEVID_TXT_CURSOR_CHAR_REG
.397159		a9 03		lda #$03	                LDA #(EVID_Cursor_Enable | EVID_Cursor_Flash_Rate0)      ;Set Cursor Enable And Flash Rate @1Hz
.39715b		8f 10 1e ae	sta $ae1e10	                STA @lEVID_TXT_CURSOR_CTRL_REG ;
.39715f		c2 30		rep #$30	                REP #$30        ; set A&X long
.397161		a9 00 00	lda #$0000	                LDA #$0000;
.397164		8f 14 1e ae	sta $ae1e14	                STA @lEVID_TXT_CURSOR_X_REG_L ;; // Set the X to Position 1
.397168		8f 16 1e ae	sta $ae1e16	                STA @lEVID_TXT_CURSOR_Y_REG_L ; // Set the Y to Position 6 (Below)
.39716c		e2 20		sep #$20	                SEP #$20        ; set A short
.39716e		6b		rtl		                RTL
.39716f						INIT_EVID_EVID_CLRSCREEN
.39716f		e2 20		sep #$20	                SEP #$20        ; set A short
.397171		c2 10		rep #$10	                REP #$10        ; set X long
.397173		a2 00 00	ldx #$0000	                LDX #$0000		; Only Use One Pointer
.397176		a9 20		lda #$20	                LDA #$20		; Fill the Entire Screen with Space
.397178		9f 00 20 ae	sta $ae2000,x	iclearloop0	    STA EVID_TEXT_MEM, x	;
.39717c		e8		inx		                inx
.39717d		e0 00 20	cpx #$2000	                cpx #$2000
.397180		d0 f6		bne $397178	                bne iclearloop0
.397182		a2 00 00	ldx #$0000	                LDX	#$0000		; Only Use One Pointer
.397185		a9 f0		lda #$f0	                LDA #$F0		; Fill the Color Memory with Foreground: 75% Purple, Background 12.5% White
.397187		9f 00 40 ae	sta $ae4000,x	iclearloop1	    STA EVID_COLOR_MEM, x	;
.39718b		e8		inx		                inx
.39718c		e0 00 20	cpx #$2000	                cpx #$2000
.39718f		d0 f6		bne $397187	                bne iclearloop1
.397191		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\ansi_screens.asm

.0000						S_ANSI_VARS
>0000						SCREENBEGIN         .long ?     ; Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>0003						COLS_VISIBLE        .word ?     ; Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>0005						COLS_PER_LINE       .word ?     ; Columns in memory per screen line. A virtual line can be this long. Default=128
>0007						LINES_VISIBLE       .word ?     ; The number of rows visible on the screen. Default=25
>0009						LINES_MAX           .word ?     ; The number of rows in memory for the screen. Default=64
>000b						CURSORPOS           .long ?     ; The next character written to the screen will be written in this location.
>000e						CURSORX             .word ?     ; This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>0010						CURSORY             .word ?     ; This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>0012						CURCOLOR            .byte ?     ; Color of next character to be printed to the screen.
>0013						COLORPOS            .long ?     ; Address of cursor's position in the color matrix
>0016						COLORBEGIN          .long ?     ; Address of the first byte of the color matrix for this screen
>0019						TMPPTR1             .dword ?    ; Temporary pointer
>001d						STATE               .byte ?     ; State of the escape code parser
>001e						CONTROL             .byte ?     ; Control bit
>001f						ARGC                .byte ?     ; The number of arguments provided by the escape sequence (max 2)
>0020						ARG0                .byte ?     ; First ANSI code argument
>0021						ARG1                .byte ?     ; Second ANSI code argument
=0						ST_INIT = 0             ; Starting state for the ANSI code parser. Most characters just print
=1						ST_ESCAPE = 1           ; ESC has been seen
=2						ST_CSI = 2              ; Full CSI has been seen "ESC ["
=2						ANSI_MAX_ARG = 2        ; We'll limit ourselves to two arguments
=$70						ANSI_DEF_COLOR = $70    ; Default color (dim white on dim black)
=$80						CONTROL_INVERT = $80    ; Control bit: Colors are inverted
=$40						CONTROL_BOLD = $40      ; Control bit: Colors should be intense
.397192						ANSI_INIT
.397192		da		phx		                    PHX
.397193		5a		phy		                    PHY
.397194		8b		phb		                    PHB
.397195		0b		phd		                    PHD
.397196		08		php		                    PHP
.397197		c2 30		rep #$30	                REP #$30        ; set A&X long
.397199		a0 00 00	ldy #$0000	                    LDY #0
.39719c		20 43 72	jsr $397243	                    JSR INIT_SCREEN_Y               ; Set up the main screen
.39719f		e2 20		sep #$20	                SEP #$20        ; set A short
.3971a1		af 87 e8 af	lda $afe887	                    LDA @l GABE_SYS_STAT            ; Let's check the Presence of an Expansion Card here
.3971a5		29 10		and #$10	                    AND #GABE_SYS_STAT_EXP          ; When there is a Card the Value is 1
.3971a7		c9 10		cmp #$10	                    CMP #GABE_SYS_STAT_EXP
.3971a9		d0 1b		bne $3971c6	                    BNE no_evid
.3971ab		c2 20		rep #$20	                REP #$20        ; set A long
.3971ad		af 12 00 ae	lda $ae0012	                    LDA @l ESID_ID_CARD_ID_Lo       ; Load the Card ID and check for C100 or C200
.3971b1		c9 c8 00	cmp #$00c8	                    CMP #$00C8                      ; Is it the EVID card?
.3971b4		d0 10		bne $3971c6	                    BNE no_evid                     ; No: mark the EVID screen as not present
.3971b6		e2 20		sep #$20	                SEP #$20        ; set A short
.3971b8		a9 01		lda #$01	                    LDA #1                          ; Otherwise: Mark that there is an EVID present
.3971ba		8f 7d 00 00	sta $00007d	                    STA @l EVID_PRESENT
.3971be		a0 01 00	ldy #$0001	                    LDY #1
.3971c1		20 43 72	jsr $397243	                    JSR INIT_SCREEN_Y               ; Initialize the EVID screen variables
.3971c4		80 08		bra $3971ce	                    BRA done
.3971c6						no_evid
.3971c6		e2 20		sep #$20	                SEP #$20        ; set A short
.3971c8		a9 00		lda #$00	                    LDA #0                          ; Mark that there is no EVID present
.3971ca		8f 7d 00 00	sta $00007d	                    STA @l EVID_PRESENT
.3971ce		28		plp		done                PLP
.3971cf		2b		pld		                    PLD
.3971d0		ab		plb		                    PLB
.3971d1		7a		ply		                    PLY
.3971d2		fa		plx		                    PLX
.3971d3		60		rts		                    RTS
.3971d4						ANSI_INIT_LUTS
.3971d4		08		php		                    PHP
.3971d5		e2 30		sep #$30	                SEP #$30        ; set A&X short
.3971d7		a2 00		ldx #$00	                    LDX #0
.3971d9		bd 03 72	lda $397203,x	vicky_loop          LDA ANSI_TEXT_LUT,X             ; Get the Xth LUT byte
.3971dc		9f 40 1f af	sta $af1f40,x	                    STA @l FG_CHAR_LUT_PTR,X        ; Set the corresponding foreground color component on Vicky
.3971e0		9f 80 1f af	sta $af1f80,x	                    STA @l BG_CHAR_LUT_PTR,X        ; Set the corresponding background color component on Vicky
.3971e4		e8		inx		                    INX
.3971e5		e0 40		cpx #$40	                    CPX #4*16
.3971e7		d0 f0		bne $3971d9	                    BNE vicky_loop
.3971e9		af 7d 00 00	lda $00007d	                    LDA @l EVID_PRESENT             ; Check to see if EVID is present
.3971ed		f0 12		beq $397201	                    BEQ done                        ; If not, we're done
.3971ef		a2 00		ldx #$00	                    LDX #0
.3971f1		bd 03 72	lda $397203,x	evid_loop           LDA ANSI_TEXT_LUT,X             ; Get the Xth LUT byte
.3971f4		9f 00 1b ae	sta $ae1b00,x	                    STA @l EVID_FG_LUT,X            ; Set the corresponding foreground color component on the EVID card
.3971f8		9f 40 1b ae	sta $ae1b40,x	                    STA @l EVID_BG_LUT,X            ; Set the corresponding background color component on the EVID card
.3971fc		e8		inx		                    INX
.3971fd		e0 40		cpx #$40	                    CPX #4*16
.3971ff		d0 f0		bne $3971f1	                    BNE evid_loop
.397201		28		plp		done                PLP
.397202		60		rts		                    RTS
.397203						ANSI_TEXT_LUT
>397203		00 00 00 00			                    .byte 0, 0, 0, 0
>397207		00 00 80 00			                    .byte 0, 0, 128, 0
>39720b		00 80 00 00			                    .byte 0, 128, 0, 0
>39720f		00 80 80 00			                    .byte 0, 128, 128, 0
>397213		80 00 00 00			                    .byte 128, 0, 0, 0
>397217		80 00 80 00			                    .byte 128, 0, 128, 0
>39721b		80 80 00 00			                    .byte 128, 128, 0, 0
>39721f		c0 c0 c0 00			                    .byte 192, 192, 192, 0
>397223		80 80 80 00			                    .byte 128, 128, 128, 0
>397227		00 00 ff 00			                    .byte 0, 0, 255, 0
>39722b		00 ff 00 00			                    .byte 0, 255, 0, 0
>39722f		00 ff ff 00			                    .byte 0, 255, 255, 0
>397233		ff 00 00 00			                    .byte 255, 0, 0, 0
>397237		00 7f fc 00			                    .byte 0, 127, 252, 0
>39723b		ff ff 00 00			                    .byte 255, 255, 0, 0
>39723f		ff ff ff 00			                    .byte 255, 255, 255, 0
.397243						INIT_SCREEN_Y
.397243		c2 30		rep #$30	                REP #$30        ; set A&X long
.397245		c0 00 00	cpy #$0000	                    CPY #0
.397248		f0 06		beq $397250	                    BEQ setdp_0
.39724a		a9 60 00	lda #$0060	setdp_1             LDA #<>EVID_SCREENBEGIN         ; Set DP to the EVID variable block
.39724d		5b		tcd		                    TCD
.39724e		80 04		bra $397254	                    BRA set_addresses
.397250		a9 0c 00	lda #$000c	setdp_0             LDA #<>SCREENBEGIN              ; Set DP to the main screen variable block
.397253		5b		tcd		                    TCD
.397254		98		tya		set_addresses       TYA                             ; Compute offset to screen Y's addresses
.397255		0a		asl a		                    ASL A
.397256		0a		asl a		                    ASL A
.397257		aa		tax		                    TAX
.397258		bf 92 72 39	lda $397292,x	                    LDA @l text_address,X
.39725c		85 00		sta $00		                    STA #S_ANSI_VARS.SCREENBEGIN,D  ; Set the address of the text matrix
.39725e		85 0b		sta $0b		                    STA #S_ANSI_VARS.CURSORPOS,D    ; And the cursor pointer
.397260		e2 20		sep #$20	                SEP #$20        ; set A short
.397262		bf 94 72 39	lda $397294,x	                    LDA @l text_address+2,X
.397266		85 02		sta $02		                    STA #S_ANSI_VARS.SCREENBEGIN+2,D
.397268		85 0d		sta $0d		                    STA #S_ANSI_VARS.CURSORPOS+2,D
.39726a		c2 20		rep #$20	                REP #$20        ; set A long
.39726c		bf 9a 72 39	lda $39729a,x	                    LDA @l color_address,X
.397270		85 16		sta $16		                    STA #S_ANSI_VARS.COLORBEGIN,D   ; Set the address of the color matrix
.397272		85 13		sta $13		                    STA #S_ANSI_VARS.COLORPOS,D     ; And the color cursor pointer
.397274		e2 20		sep #$20	                SEP #$20        ; set A short
.397276		bf 9c 72 39	lda $39729c,x	                    LDA @l color_address+2,X
.39727a		85 18		sta $18		                    STA #S_ANSI_VARS.COLORBEGIN+2,D
.39727c		85 15		sta $15		                    STA #S_ANSI_VARS.COLORPOS+2,D
.39727e		c2 20		rep #$20	                REP #$20        ; set A long
.397280		64 0e		stz $0e		                    STZ #S_ANSI_VARS.CURSORX,D      ; Set the cursor position to 0, 0
.397282		64 10		stz $10		                    STZ #S_ANSI_VARS.CURSORY,D
.397284		e2 20		sep #$20	                SEP #$20        ; set A short
.397286		64 1d		stz $1d		                    STZ #S_ANSI_VARS.STATE,D        ; Set the state of the ANSI parser to S0
.397288		64 1e		stz $1e		                    STZ #S_ANSI_VARS.CONTROL,D      ; Set the control bits to 0 (default)
.39728a		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR
.39728c		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D     ; Set the current color to the default
.39728e		20 cf 72	jsr $3972cf	                    JSR ANSI_SETSIZE_Y              ; Set the size variables for the main screen
.397291		60		rts		                    RTS
>397292		00 a0 af 00 00 20 ae 00		text_address        .dword CS_TEXT_MEM_PTR, EVID_TEXT_MEM
>39729a		00 c0 af 00 00 40 ae 00		color_address       .dword CS_COLOR_MEM_PTR, EVID_COLOR_MEM
.3972a2						ANSI_SETSIZES
.3972a2		0b		phd		                    PHD
.3972a3						                    setasx
.3972a3		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                 ; Save the current output channel
.3972a7		48		pha		                    PHA
.3972a8		a9 00		lda #$00	                    LDA #CHAN_CONSOLE               ; Set the sizes for the main screen
.3972aa		8f 03 07 00	sta $000703	                    STA @l CHAN_OUT
.3972ae		20 90 73	jsr $397390	                    JSR ANSI_SETDEVICE              ; Set the DP to the device's record
.3972b1		a0 00 00	ldy #$0000	                    LDY #CHAN_CONSOLE
.3972b4		20 cf 72	jsr $3972cf	                    JSR ANSI_SETSIZE_Y              ; Set the sizes for that device
.3972b7		a9 04		lda #$04	                    LDA #CHAN_EVID                  ; Set the sizes for the EVID screen
.3972b9		8f 03 07 00	sta $000703	                    STA @l CHAN_OUT
.3972bd		20 90 73	jsr $397390	                    JSR ANSI_SETDEVICE              ; Set the DP to the device's record
.3972c0		b0 06		bcs $3972c8	                    BCS done                        ; Not present, just return
.3972c2		a0 04 00	ldy #$0004	                    LDY #CHAN_EVID
.3972c5		20 cf 72	jsr $3972cf	                    JSR ANSI_SETSIZE_Y              ; Set the sizes for that device
.3972c8		68		pla		done                PLA
.3972c9		8f 03 07 00	sta $000703	                    STA @l CHAN_OUT                 ; Restore the output channel
.3972cd		2b		pld		                    PLD
.3972ce		60		rts		                    RTS
.3972cf						ANSI_SETSIZE_Y
.3972cf		08		php		                    PHP
.3972d0		e2 30		sep #$30	                SEP #$30        ; set A&X short
.3972d2		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.3972d4		f0 06		beq $3972dc	                    BEQ vky_master                      ; Yes: get the resolution from Vicky
.3972d6		af 01 1e ae	lda $ae1e01	                    LDA @l EVID_MSTR_CTRL_REG_H         ; No: get the resolution from EVID
.3972da		80 04		bra $3972e0	                    BRA resolution
.3972dc		af 01 00 af	lda $af0001	vky_master          LDA @l MASTER_CTRL_REG_H
.3972e0		29 03		and #$03	resolution          AND #$03                            ; Mask off the resolution bits
.3972e2		0a		asl a		                    ASL A
.3972e3		aa		tax		                    TAX                                 ; Index to the col/line count in X
.3972e4		c2 20		rep #$20	                REP #$20        ; set A long
.3972e6		bd 80 73	lda $397380,x	                    LDA cols_by_res,X                   ; Get the number of columns
.3972e9		85 05		sta $05		                    STA #S_ANSI_VARS.COLS_PER_LINE,D    ; This is how many columns there are per line in the memory
.3972eb		85 03		sta $03		                    STA #S_ANSI_VARS.COLS_VISIBLE,D     ; This is how many would be visible with no border
.3972ed		bd 88 73	lda $397388,x	                    LDA lines_by_res,X                  ; Get the number of lines
.3972f0		85 09		sta $09		                    STA #S_ANSI_VARS.LINES_MAX,D        ; This is the total number of lines in memory
.3972f2		85 07		sta $07		                    STA #S_ANSI_VARS.LINES_VISIBLE,D    ; This is how many lines would be visible with no border
.3972f4		e2 20		sep #$20	                SEP #$20        ; set A short
.3972f6		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.3972f8		f0 06		beq $397300	                    BEQ vky_border                      ; Yes: get the border from Vicky
.3972fa		af 04 1e ae	lda $ae1e04	                    LDA @l EVID_BORDER_CTRL_REG         ; No: Check EVID to see if we have a border
.3972fe		80 04		bra $397304	                    BRA border
.397300		af 04 00 af	lda $af0004	vky_border          LDA @l BORDER_CTRL_REG              ; Check Vicky to see if we have a border
.397304		89 01		bit #$01	border              BIT #Border_Ctrl_Enable
.397306		f0 76		beq $39737e	                    BEQ done                            ; No border... the sizes are correct now
.397308		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.39730a		f0 06		beq $397312	                    BEQ vky_border_size                 ; Yes: get the border size from Vicky
.39730c		af 08 1e ae	lda $ae1e08	                    LDA @l EVID_BORDER_X_SIZE           ; No: Get the horizontal border width from EVID
.397310		80 04		bra $397316	                    BRA border_size
.397312		af 08 00 af	lda $af0008	vky_border_size     LDA @l BORDER_X_SIZE                ; Get the horizontal border width from Vicky
.397316		29 3f		and #$3f	border_size         AND #$3F
.397318		89 03		bit #$03	                    BIT #$03                            ; Check the lower two bits... indicates a partial column is eaten
.39731a		d0 04		bne $397320	                    BNE frac_width
.39731c		4a		lsr a		                    LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.39731d		4a		lsr a		                    LSR A
.39731e		80 03		bra $397323	                    BRA store_width
.397320		4a		lsr a		frac_width          LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.397321		4a		lsr a		                    LSR A                               ; because a column is partially hidden
.397322		1a		inc a		                    INC A
.397323		85 19		sta $19		store_width         STA #S_ANSI_VARS.TMPPTR1,D
.397325		64 1a		stz $1a		                    STZ #S_ANSI_VARS.TMPPTR1+1,D
.397327		e2 20		sep #$20	                SEP #$20        ; set A short
.397329		c0 01		cpy #$01	                    CPY #1                              ; Are we setting the EVID?
.39732b		f0 0c		beq $397339	                    BEQ adjust_width                    ; Yes: skip the pixel doubling check
.39732d		af 01 00 af	lda $af0001	                    LDA @l MASTER_CTRL_REG_H            ; Check Vucky if we're pixel doubling
.397331		89 02		bit #$02	                    BIT #Mstr_Ctrl_Video_Mode1
.397333		f0 04		beq $397339	                    BEQ adjust_width                    ; No... just adjust the width of the screen
.397335		c2 20		rep #$20	                REP #$20        ; set A long
.397337		46 19		lsr $19		                    LSR #S_ANSI_VARS.TMPPTR1,D          ; Yes... cut the adjustment in half
.397339						adjust_width
.397339		c2 20		rep #$20	                REP #$20        ; set A long
.39733b		38		sec		                    SEC
.39733c		a5 05		lda $05		                    LDA #S_ANSI_VARS.COLS_PER_LINE,D
.39733e		e5 19		sbc $19		                    SBC #S_ANSI_VARS.TMPPTR1,D
.397340		85 03		sta $03		                    STA #S_ANSI_VARS.COLS_VISIBLE,D
.397342		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.397344		f0 06		beq $39734c	                    BEQ vky_border_y_size               ; Yes: get the border Y size from Vicky
.397346		af 08 1e ae	lda $ae1e08	                    LDA @l EVID_BORDER_X_SIZE           ; No: Get the vertical border width from EVID
.39734a		80 04		bra $397350	                    BRA border_y_size
.39734c		af 50 73 39	lda $397350	vky_border_y_size   LDA @l BORDER_Y_SIZE                ; Get the vertical border width from Vicky
.397350		29 3f 00	and #$003f	border_y_size       AND #$3F
.397353		89 03 00	bit #$0003	                    BIT #$03                            ; Check the lower two bits... indicates a partial column is eaten
.397356		d0 04		bne $39735c	                    BNE frac_height
.397358		4a		lsr a		                    LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.397359		4a		lsr a		                    LSR A
.39735a		80 03		bra $39735f	                    BRA store_height
.39735c		4a		lsr a		frac_height         LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.39735d		4a		lsr a		                    LSR A                               ; because a column is partially hidden
.39735e		1a		inc a		                    INC A
.39735f		85 19		sta $19		store_height        STA #S_ANSI_VARS.TMPPTR1,D
.397361		64 1a		stz $1a		                    STZ #S_ANSI_VARS.TMPPTR1+1,D
.397363		e2 20		sep #$20	                SEP #$20        ; set A short
.397365		c0 01		cpy #$01	                    CPY #1                              ; Are we setting the EVID?
.397367		f0 0c		beq $397375	                    BEQ adjust_height                   ; Yes: skip the pixel doubling check
.397369		af 01 00 af	lda $af0001	                    LDA @l MASTER_CTRL_REG_H            ; Check if we're pixel doubling
.39736d		89 02		bit #$02	                    BIT #Mstr_Ctrl_Video_Mode1
.39736f		f0 04		beq $397375	                    BEQ adjust_height                   ; No... just adjust the height of the screen
.397371		c2 20		rep #$20	                REP #$20        ; set A long
.397373		46 19		lsr $19		                    LSR #S_ANSI_VARS.TMPPTR1,D          ; Yes... cut the adjustment in half
.397375						adjust_height
.397375		c2 20		rep #$20	                REP #$20        ; set A long
.397377		38		sec		                    SEC
.397378		a5 09		lda $09		                    LDA #S_ANSI_VARS.LINES_MAX,D
.39737a		e5 19		sbc $19		                    SBC #S_ANSI_VARS.TMPPTR1,D
.39737c		85 07		sta $07		                    STA #S_ANSI_VARS.LINES_VISIBLE,D
.39737e		28		plp		done                PLP
.39737f		60		rts		                    RTS
>397380		50 00 64 00 28 00 32 00		cols_by_res         .word 80,100,40,50
>397388		3c 00 4b 00 1e 00 25 00		lines_by_res        .word 60,75,30,37
.397390						ANSI_SETDEVICE
.397390		48		pha		                    PHA
.397391		08		php		                    PHP
.397392		e2 20		sep #$20	                SEP #$20        ; set A short
.397394		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                 ; Check the current output channel
.397398		c9 00		cmp #$00	                    CMP #CHAN_CONSOLE               ; Is it the console?
.39739a		f0 08		beq $3973a4	                    BEQ console                     ; Yes: point to the console
.39739c		c9 04		cmp #$04	                    CMP #CHAN_EVID                  ; Is it the EVID?
.39739e		f0 0b		beq $3973ab	                    BEQ evid                        ; Check to see if the EVID is present
.3973a0		28		plp		bad_device          PLP
.3973a1		68		pla		                    PLA
.3973a2		38		sec		                    SEC
.3973a3		60		rts		                    RTS
.3973a4						console
.3973a4		c2 20		rep #$20	                REP #$20        ; set A long
.3973a6		a9 0c 00	lda #$000c	                    LDA #<>SCREENBEGIN              ; Point to the the main screen's variables
.3973a9		80 0d		bra $3973b8	                    BRA set_dp
.3973ab						evid
.3973ab		e2 20		sep #$20	                SEP #$20        ; set A short
.3973ad		af 7d 00 00	lda $00007d	                    LDA @l EVID_PRESENT             ; Is the EVID present?
.3973b1		f0 ed		beq $3973a0	                    BEQ bad_device                  ; No: return that the device is bad
.3973b3		c2 20		rep #$20	                REP #$20        ; set A long
.3973b5		a9 60 00	lda #$0060	                    LDA #<>EVID_SCREENBEGIN         ; Yes: point to the EVID's variables
.3973b8		5b		tcd		set_dp              TCD
.3973b9		28		plp		                    PLP
.3973ba		68		pla		                    PLA
.3973bb		18		clc		                    CLC
.3973bc		60		rts		                    RTS
.3973bd						ANSI_PUTC
.3973bd		da		phx		                    PHX
.3973be		5a		phy		                    PHY
.3973bf		0b		phd		                    PHD
.3973c0		08		php		                    PHP
.3973c1		e2 30		sep #$30	                SEP #$30        ; set A&X short
.3973c3		20 90 73	jsr $397390	                    JSR ANSI_SETDEVICE          ; Look at the current output channel and point
.3973c6		90 03		bcc $3973cb	                    BCC get_state               ; If valid, check the current state
.3973c8		82 86 00	brl $397451	                    BRL done                    ; If invalid, just return
.3973cb		a6 1d		ldx $1d		get_state           LDX #S_ANSI_VARS.STATE,D    ; Get the current state
.3973cd		f0 0c		beq $3973db	                    BEQ do_st_init              ; Dispatch to the correct code for the state
.3973cf		e0 01		cpx #$01	                    CPX #ST_ESCAPE
.3973d1		f0 1e		beq $3973f1	                    BEQ do_st_escape
.3973d3		e0 02		cpx #$02	                    CPX #ST_CSI
.3973d5		f0 2a		beq $397401	                    BEQ do_st_csi
.3973d7		64 1d		stz $1d		pr_and_reset        STZ #S_ANSI_VARS.STATE,D    ; If invalid, reset to 0 and print the character
.3973d9		80 06		bra $3973e1	                    BRA print_raw
.3973db		c9 1b		cmp #$1b	do_st_init          CMP #CHAR_ESC               ; Is it ESC?
.3973dd		f0 07		beq $3973e6	                    BEQ go_escape               ; Yes, handle the ESC
.3973df		90 0b		bcc $3973ec	                    BLT do_control              ; If less than, handle as a control code
.3973e1		20 2c 75	jsr $39752c	print_raw           JSR ANSI_PUTRAWC            ; Otherwise: Just print the raw character
.3973e4		80 6b		bra $397451	                    BRA done
.3973e6		a9 01		lda #$01	go_escape           LDA #ST_ESCAPE
.3973e8		85 1d		sta $1d		                    STA #S_ANSI_VARS.STATE,D    ; Move to the ESCAPE state
.3973ea		80 65		bra $397451	                    BRA done
.3973ec		20 e8 74	jsr $3974e8	do_control          JSR ANSI_PR_CONTROL         ; Hand a single byte control code
.3973ef		80 60		bra $397451	                    BRA done
.3973f1		c9 5b		cmp #$5b	do_st_escape        CMP #'['                    ; Have we gotten 'ESC['?
.3973f3		d0 e2		bne $3973d7	                    BNE pr_and_reset            ; No: print this and return to ST_INIT
.3973f5		64 20		stz $20		                    STZ #S_ANSI_VARS.ARG0,D     ; Clear the arguments
.3973f7		64 21		stz $21		                    STZ #S_ANSI_VARS.ARG1,D
.3973f9		64 1f		stz $1f		                    STZ #S_ANSI_VARS.ARGC,D
.3973fb		a9 02		lda #$02	                    LDA #ST_CSI
.3973fd		85 1d		sta $1d		                    STA #S_ANSI_VARS.STATE,D    ; Move to the CSI state
.3973ff		80 50		bra $397451	                    BRA done
.397401		c9 30		cmp #$30	do_st_csi           CMP #'0'                    ; Do we have a digit?
.397403		90 1d		bcc $397422	                    BLT csi_not_digit
.397405		c9 3a		cmp #$3a	                    CMP #'9'+1
.397407		b0 19		bcs $397422	                    BGE csi_not_digit
.397409		38		sec		                    SEC                         ; Have digit... convert to a number
.39740a		e9 30		sbc #$30	                    SBC #'0'
.39740c		48		pha		                    PHA                         ; Save it
.39740d		a6 1f		ldx $1f		                    LDX #S_ANSI_VARS.ARGC,D
.39740f		16 20		asl $20,x	                    ASL #S_ANSI_VARS.ARG0,D,X   ; arg := arg * 2
.397411		b5 20		lda $20,x	                    LDA #S_ANSI_VARS.ARG0,D,X
.397413		0a		asl a		                    ASL A                       ; A := arg * 4
.397414		0a		asl a		                    ASL A                       ; A := arg * 8
.397415		18		clc		                    CLC
.397416		75 20		adc $20,x	                    ADC #S_ANSI_VARS.ARG0,D,X   ; A := arg * 10
.397418		95 20		sta $20,x	                    STA #S_ANSI_VARS.ARG0,D,X   ; arg := A
.39741a		18		clc		                    CLC
.39741b		68		pla		                    PLA                         ; Get the digit back
.39741c		75 20		adc $20,x	                    ADC #S_ANSI_VARS.ARG0,D,X   ; A := arg * 10 + digit
.39741e		95 20		sta $20,x	                    STA #S_ANSI_VARS.ARG0,D,X   ; arg := arg * 10 + digit
.397420		80 2f		bra $397451	                    BRA done                    ; And we're done with this particular character
.397422		c9 3b		cmp #$3b	csi_not_digit       CMP #';'                    ; Is it an argument separator?
.397424		d0 0e		bne $397434	                    BNE csi_not_sep
.397426		a5 1f		lda $1f		                    LDA #S_ANSI_VARS.ARGC,D     ; Get the argument count
.397428		c9 02		cmp #$02	                    CMP #ANSI_MAX_ARG           ; Are we at the maximum argument count?
.39742a		d0 03		bne $39742f	                    BNE csi_next_arg            ; No: move to the next argument
.39742c		82 a8 ff	brl $3973d7	                    BRL pr_and_reset            ; Yes: print and reset state
.39742f		1a		inc a		csi_next_arg        INC A
.397430		85 1f		sta $1f		                    STA #S_ANSI_VARS.ARGC,D     ; Set the new argument count
.397432		80 1d		bra $397451	                    BRA done                    ; And we're done with this character
.397434		c9 41		cmp #$41	csi_not_sep         CMP #'A'
.397436		90 09		bcc $397441	                    BLT csi_not_upper
.397438		c9 5b		cmp #$5b	                    CMP #'Z'+1
.39743a		b0 05		bcs $397441	                    BGE csi_not_upper
.39743c		20 60 74	jsr $397460	                    JSR ANSI_ANSI_UPPER         ; Process an ANSI upper case code
.39743f		80 10		bra $397451	                    BRA done
.397441		c9 61		cmp #$61	csi_not_upper       CMP #'a'
.397443		90 09		bcc $39744e	                    BLT csi_not_lower
.397445		c9 7b		cmp #$7b	                    CMP #'z'+1
.397447		b0 05		bcs $39744e	                    BGE csi_not_lower
.397449		20 a5 74	jsr $3974a5	                    JSR ANSI_ANSI_LOWER         ; Process an ANSI lower case code
.39744c		80 03		bra $397451	                    BRA done
.39744e		82 86 ff	brl $3973d7	csi_not_lower       BRL pr_and_reset            ; Invalid sequence: print it and reset
.397451		28		plp		done                PLP
.397452		2b		pld		                    PLD
.397453		7a		ply		                    PLY
.397454		fa		plx		                    PLX
.397455		60		rts		                    RTS
.397456						ANSI_INVALID
.397456		08		php		                    PHP
.397457		e2 20		sep #$20	                SEP #$20        ; set A short
.397459		64 1d		stz $1d		                    STZ #S_ANSI_VARS.STATE,D    ; If invalid, reset to 0 and print the character
.39745b		20 2c 75	jsr $39752c	                    JSR ANSI_PUTRAWC            ; Print the character
.39745e		28		plp		                    PLP
.39745f		60		rts		                    RTS
.397460						ANSI_ANSI_UPPER
.397460		08		php		                    PHP
.397461		e2 30		sep #$30	                SEP #$30        ; set A&X short
.397463		64 1d		stz $1d		                    STZ #S_ANSI_VARS.STATE,D    ; We'll always reset to the initial state
.397465		38		sec		                    SEC
.397466		e9 40		sbc #$40	                    SBC #'@'
.397468		0a		asl a		                    ASL A
.397469		aa		tax		                    TAX
.39746a		fc 6f 74	jsr ($39746f,x)	                    JSR (ansi_table,X)
.39746d		28		plp		                    PLP
.39746e		60		rts		                    RTS
>39746f		56 74				ansi_table          .word <>ANSI_INVALID    ; '@' -- ICH -- Insert Character
>397471		45 75				                    .word <>ANSI_CUU        ; 'A' -- CUU -- Cursor Up
>397473		57 75				                    .word <>ANSI_CUD        ; 'B' -- CUD -- Cursor Down
>397475		67 75				                    .word <>ANSI_CUF        ; 'C' -- CUF -- Cursor Forward
>397477		77 75				                    .word <>ANSI_CUB        ; 'D' -- CUB -- Cursor Back
>397479		56 74				                    .word <>ANSI_INVALID    ; 'E' -- CNL -- Cursor Next Line
>39747b		56 74				                    .word <>ANSI_INVALID    ; 'F' -- CPL -- Cursor Previous Line
>39747d		56 74				                    .word <>ANSI_INVALID    ; 'G' -- CHA -- Cursor Horizontal Absolute
>39747f		87 75				                    .word <>ANSI_CUP        ; 'H' -- CUP -- Cursor Position
>397481		56 74				                    .word <>ANSI_INVALID    ; 'I'
>397483		8b 76				                    .word <>ANSI_ED         ; 'J' -- ED -- Erase In Display
>397485		ce 76				                    .word <>ANSI_EL         ; 'K' -- EL -- Erase In Line
>397487		56 74				                    .word <>ANSI_INVALID    ; 'L'
>397489		56 74				                    .word <>ANSI_INVALID    ; 'M'
>39748b		56 74				                    .word <>ANSI_INVALID    ; 'N'
>39748d		56 74				                    .word <>ANSI_INVALID    ; 'O'
>39748f		56 74				                    .word <>ANSI_INVALID    ; 'P' -- DCH -- Delete Character
>397491		56 74				                    .word <>ANSI_INVALID    ; 'Q'
>397493		56 74				                    .word <>ANSI_INVALID    ; 'R'
>397495		56 74				                    .word <>ANSI_INVALID    ; 'S' -- SU -- Scroll Up
>397497		56 74				                    .word <>ANSI_INVALID    ; 'T' -- SD -- Scroll Down
>397499		56 74				                    .word <>ANSI_INVALID    ; 'U'
>39749b		56 74				                    .word <>ANSI_INVALID    ; 'V'
>39749d		56 74				                    .word <>ANSI_INVALID    ; 'W'
>39749f		56 74				                    .word <>ANSI_INVALID    ; 'X'
>3974a1		56 74				                    .word <>ANSI_INVALID    ; 'Y'
>3974a3		56 74				                    .word <>ANSI_INVALID    ; 'Z'
.3974a5						ANSI_ANSI_LOWER
.3974a5		08		php		                    PHP
.3974a6		e2 30		sep #$30	                SEP #$30        ; set A&X short
.3974a8		64 1d		stz $1d		                    STZ #S_ANSI_VARS.STATE,D    ; We'll always reset to the initial state
.3974aa		38		sec		                    SEC
.3974ab		e9 61		sbc #$61	                    SBC #'a'
.3974ad		0a		asl a		                    ASL A
.3974ae		aa		tax		                    TAX
.3974af		fc b4 74	jsr ($3974b4,x)	                    JSR (ansi_table,X)
.3974b2		28		plp		                    PLP
.3974b3		60		rts		                    RTS
>3974b4		56 74				ansi_table          .word <>ANSI_INVALID    ; 'a'
>3974b6		56 74				                    .word <>ANSI_INVALID    ; 'b'
>3974b8		56 74				                    .word <>ANSI_INVALID    ; 'c'
>3974ba		56 74				                    .word <>ANSI_INVALID    ; 'd'
>3974bc		56 74				                    .word <>ANSI_INVALID    ; 'e'
>3974be		56 74				                    .word <>ANSI_INVALID    ; 'f' -- HVP -- Horizontal Vertical Position
>3974c0		56 74				                    .word <>ANSI_INVALID    ; 'g'
>3974c2		56 74				                    .word <>ANSI_INVALID    ; 'h'
>3974c4		56 74				                    .word <>ANSI_INVALID    ; 'i'
>3974c6		56 74				                    .word <>ANSI_INVALID    ; 'j'
>3974c8		56 74				                    .word <>ANSI_INVALID    ; 'k'
>3974ca		56 74				                    .word <>ANSI_INVALID    ; 'l'
>3974cc		9f 75				                    .word <>ANSI_SGR        ; 'm' -- SGR -- Select Graphics Rendition
>3974ce		56 74				                    .word <>ANSI_INVALID    ; 'n'
>3974d0		56 74				                    .word <>ANSI_INVALID    ; 'o'
>3974d2		56 74				                    .word <>ANSI_INVALID    ; 'p'
>3974d4		56 74				                    .word <>ANSI_INVALID    ; 'q'
>3974d6		56 74				                    .word <>ANSI_INVALID    ; 'r'
>3974d8		56 74				                    .word <>ANSI_INVALID    ; 's'
>3974da		56 74				                    .word <>ANSI_INVALID    ; 't'
>3974dc		56 74				                    .word <>ANSI_INVALID    ; 'u'
>3974de		56 74				                    .word <>ANSI_INVALID    ; 'v'
>3974e0		56 74				                    .word <>ANSI_INVALID    ; 'w'
>3974e2		56 74				                    .word <>ANSI_INVALID    ; 'x'
>3974e4		56 74				                    .word <>ANSI_INVALID    ; 'y'
>3974e6		56 74				                    .word <>ANSI_INVALID    ; 'z'
.3974e8						ANSI_PR_CONTROL
.3974e8		08		php		                    PHP
.3974e9		e2 20		sep #$20	                SEP #$20        ; set A short
.3974eb		c2 10		rep #$10	                REP #$10        ; set X long
.3974ed		c9 0d		cmp #$0d	                    CMP #CHAR_CR                ; Handle carriage return
.3974ef		f0 11		beq $397502	                    BEQ do_cr
.3974f1		c9 0a		cmp #$0a	                    CMP #CHAR_LF                ; Handle line feed
.3974f3		f0 18		beq $39750d	                    BEQ do_lf
.3974f5		c9 08		cmp #$08	                    CMP #CHAR_BS                ; Handle back space
.3974f7		f0 19		beq $397512	                    BEQ do_bs
.3974f9		c9 09		cmp #$09	                    CMP #CHAR_TAB               ; Handle TAB
.3974fb		f0 1a		beq $397517	                    BEQ do_tab
.3974fd		20 2c 75	jsr $39752c	                    JSR ANSI_PUTRAWC            ; Otherwise, just print it raw and wriggling!
.397500		80 28		bra $39752a	                    BRA done
.397502		a2 00 00	ldx #$0000	do_cr               LDX #0                      ; Move to the beginning of the next line
.397505		a4 10		ldy $10		                    LDY #S_ANSI_VARS.CURSORY,D
.397507		c8		iny		                    INY
.397508		20 9f 77	jsr $39779f	                    JSR ANSI_LOCATE
.39750b		80 1d		bra $39752a	                    BRA done
.39750d		20 7f 77	jsr $39777f	do_lf               JSR ANSI_CSRDOWN            ; Move the cursor down a line
.397510		80 18		bra $39752a	                    BRA done
.397512		20 47 77	jsr $397747	do_bs               JSR ANSI_CSRLEFT            ; Move the cursor to the left (TODO: delete to the left?)
.397515		80 13		bra $39752a	                    BRA done
.397517						do_tab
.397517		c2 20		rep #$20	                REP #$20        ; set A long
.397519		a5 0e		lda $0e		                    LDA #S_ANSI_VARS.CURSORX,D  ; Move to the next power 8th column
.39751b		29 f7 ff	and #$fff7	                    AND #$FFF7
.39751e		18		clc		                    CLC
.39751f		69 08 00	adc #$0008	                    ADC #$0008
.397522		aa		tax		                    TAX
.397523		e2 20		sep #$20	                SEP #$20        ; set A short
.397525		a4 10		ldy $10		                    LDY #S_ANSI_VARS.CURSORY,D
.397527		20 9f 77	jsr $39779f	                    JSR ANSI_LOCATE
.39752a		28		plp		done                PLP
.39752b		60		rts		                    RTS
.39752c						ANSI_PUTRAWC
.39752c		da		phx		                    PHX
.39752d		5a		phy		                    PHY
.39752e		0b		phd		                    PHD
.39752f		08		php		                    PHP
.397530		e2 20		sep #$20	                SEP #$20        ; set A short
.397532		20 90 73	jsr $397390	                    JSR ANSI_SETDEVICE              ; Look at the current output channel and point
.397535		b0 09		bcs $397540	                    BCS done                        ; If invalid, just return
.397537		87 0b		sta [$0b]	                    STA [#S_ANSI_VARS.CURSORPOS,D]  ; Save the character on the screen
.397539		a5 12		lda $12		                    LDA #S_ANSI_VARS.CURCOLOR,D     ; Set the color based on CURCOLOR
.39753b		87 13		sta [$13]	                    STA [#S_ANSI_VARS.COLORPOS,D]
.39753d		20 1f 77	jsr $39771f	                    JSR ANSI_CSRRIGHT              ; And advance the cursor
.397540		28		plp		done                PLP
.397541		2b		pld		                    PLD
.397542		7a		ply		                    PLY
.397543		fa		plx		                    PLX
.397544		60		rts		                    RTS
.397545						ANSI_CUU
.397545		08		php		                    PHP
.397546		e2 20		sep #$20	                SEP #$20        ; set A short
.397548		a5 20		lda $20		                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.39754a		1a		inc a		                    INC A
.39754b		a9 01		lda #$01	default             LDA #1                          ; Otherwise: treat it as 1
.39754d		48		pha		loop                PHA                             ; Save the count
.39754e		20 63 77	jsr $397763	                    JSR ANSI_CSRUP                  ; Cursor Up
.397551		68		pla		                    PLA                             ; Restore the count
.397552		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.397553		d0 f8		bne $39754d	                    BNE loop
.397555		28		plp		                    PLP
.397556		60		rts		                    RTS
.397557						ANSI_CUD
.397557		08		php		                    PHP
.397558		e2 20		sep #$20	                SEP #$20        ; set A short
.39755a		a5 20		lda $20		                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.39755c		1a		inc a		                    INC A
.39755d		48		pha		loop                PHA                             ; Save the count
.39755e		20 7f 77	jsr $39777f	                    JSR ANSI_CSRDOWN                ; Cursor Down
.397561		68		pla		                    PLA                             ; Restore the count
.397562		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.397563		d0 f8		bne $39755d	                    BNE loop
.397565		28		plp		                    PLP
.397566		60		rts		                    RTS
.397567						ANSI_CUF
.397567		08		php		                    PHP
.397568		e2 20		sep #$20	                SEP #$20        ; set A short
.39756a		a5 20		lda $20		                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.39756c		1a		inc a		                    INC A
.39756d		48		pha		loop                PHA                             ; Save the count
.39756e		20 1f 77	jsr $39771f	                    JSR ANSI_CSRRIGHT               ; Cursor right
.397571		68		pla		                    PLA                             ; Restore the count
.397572		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.397573		d0 f8		bne $39756d	                    BNE loop
.397575		28		plp		                    PLP
.397576		60		rts		                    RTS
.397577						ANSI_CUB
.397577		08		php		                    PHP
.397578		e2 20		sep #$20	                SEP #$20        ; set A short
.39757a		a5 20		lda $20		                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.39757c		1a		inc a		                    INC A
.39757d		48		pha		loop                PHA                             ; Save the count
.39757e		20 47 77	jsr $397747	                    JSR ANSI_CSRLEFT                ; Cursor left
.397581		68		pla		                    PLA                             ; Restore the count
.397582		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.397583		d0 f8		bne $39757d	                    BNE loop
.397585		28		plp		                    PLP
.397586		60		rts		                    RTS
.397587						ANSI_CUP
.397587		08		php		                    PHP
.397588		e2 30		sep #$30	                SEP #$30        ; set A&X short
.39758a		a6 20		ldx $20		                    LDX #S_ANSI_VARS.ARG0,D         ; Get the first argument
.39758c		d0 02		bne $397590	                    BNE get_row
.39758e		a2 01		ldx #$01	                    LDX #1                          ; Default to 1
.397590		a4 21		ldy $21		get_row             LDY #S_ANSI_VARS.ARG1,D         ; Get the second argument
.397592		d0 02		bne $397596	                    BNE adjust_coords
.397594		a0 01		ldy #$01	                    LDY #1                          ; Default to 1
.397596		ca		dex		adjust_coords       DEX                             ; Translate from base 1 to base 0 coordinates
.397597		88		dey		                    DEY
.397598		c2 30		rep #$30	                REP #$30        ; set A&X long
.39759a		20 9f 77	jsr $39779f	                    JSR ANSI_LOCATE                 ; Set the cursor position
.39759d		28		plp		                    PLP
.39759e		60		rts		                    RTS
.39759f						ANSI_SGR
.39759f		08		php		                    PHP
.3975a0		e2 30		sep #$30	                SEP #$30        ; set A&X short
.3975a2		a5 20		lda $20		                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.3975a4		d0 0d		bne $3975b3	                    BNE chk_1
.3975a6		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR             ; 0 ==> Return to the default colors
.3975a8		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.3975aa		a5 1e		lda $1e		                    LDA #S_ANSI_VARS.CONTROL,D      ; Switch off inversion
.3975ac		29 3f		and #$3f	                    AND #~(CONTROL_INVERT | CONTROL_BOLD)
.3975ae		85 1e		sta $1e		                    STA #S_ANSI_VARS.CONTROL,D
.3975b0		82 d6 00	brl $397689	                    BRL done
.3975b3		c9 01		cmp #$01	chk_1               CMP #1
.3975b5		d0 0f		bne $3975c6	                    BNE chk_2
.3975b7		a5 12		lda $12		                    LDA #S_ANSI_VARS.CURCOLOR,D     ; Make the current color bold
.3975b9		09 80		ora #$80	                    ORA #$80
.3975bb		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.3975bd		a5 1e		lda $1e		                    LDA #S_ANSI_VARS.CONTROL,D      ; Flag that text should be bold
.3975bf		09 40		ora #$40	                    ORA #CONTROL_BOLD
.3975c1		85 1e		sta $1e		                    STA #S_ANSI_VARS.CONTROL,D
.3975c3		82 c3 00	brl $397689	                    BRL done
.3975c6		c9 02		cmp #$02	chk_2               CMP #2
.3975c8		f0 04		beq $3975ce	                    BEQ normal_intensity
.3975ca		c9 16		cmp #$16	chk_22              CMP #22
.3975cc		d0 0f		bne $3975dd	                    BNE chk_7
.3975ce		a5 12		lda $12		normal_intensity    LDA #S_ANSI_VARS.CURCOLOR,D     ; 2 ==> Set the foreground to normal intensity
.3975d0		29 7f		and #$7f	                    AND #~$80
.3975d2		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.3975d4		a5 1e		lda $1e		                    LDA #S_ANSI_VARS.CONTROL,D      ; Flag that text should be normal
.3975d6		29 bf		and #$bf	                    AND #~CONTROL_BOLD
.3975d8		85 1e		sta $1e		                    STA #S_ANSI_VARS.CONTROL,D
.3975da		82 ac 00	brl $397689	                    BRL done
.3975dd		c9 07		cmp #$07	chk_7               CMP #7
.3975df		d0 2c		bne $39760d	                    BNE chk_27
.3975e1		a5 1e		lda $1e		                    LDA #S_ANSI_VARS.CONTROL,D      ; Are the colors already inverted?
.3975e3		89 80		bit #$80	                    BIT #CONTROL_INVERT
.3975e5		f0 03		beq $3975ea	                    BEQ invert_on
.3975e7		82 9f 00	brl $397689	                    BRL done                        ; Yes: just finish
.3975ea		09 80		ora #$80	invert_on           ORA #CONTROL_INVERT             ; No: Mark that the colors are inverted
.3975ec		85 1e		sta $1e		                    STA #S_ANSI_VARS.CONTROL,D
.3975ee		a5 12		lda $12		swap_colors         LDA #S_ANSI_VARS.CURCOLOR,D     ; Exchange the upper and lower nibbles
.3975f0		0a		asl a		                    ASL  A
.3975f1		69 80		adc #$80	                    ADC  #$80
.3975f3		2a		rol a		                    ROL  A
.3975f4		0a		asl a		                    ASL  A
.3975f5		69 80		adc #$80	                    ADC  #$80
.3975f7		2a		rol a		                    ROL  A
.3975f8		29 f7		and #$f7	                    AND #%11110111                  ; Make sure the background is not bolded
.3975fa		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.3975fc		a5 1e		lda $1e		                    LDA #S_ANSI_VARS.CONTROL,D      ; Should the color be bold?
.3975fe		89 40		bit #$40	                    BIT #CONTROL_BOLD
.397600		d0 03		bne $397605	                    BNE bold_on
.397602		82 84 00	brl $397689	                    BRL done                        ; No: we're done
.397605		a5 12		lda $12		bold_on             LDA #S_ANSI_VARS.CURCOLOR,D     ; Yes: make the foreground bold
.397607		09 80		ora #$80	                    ORA #$80
.397609		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.39760b		80 7c		bra $397689	                    BRA done
.39760d		c9 1b		cmp #$1b	chk_27              CMP #27
.39760f		d0 0c		bne $39761d	                    BNE chk_39
.397611		a5 1e		lda $1e		                    LDA #S_ANSI_VARS.CONTROL,D      ; Are the colors inverted?
.397613		89 80		bit #$80	                    BIT #CONTROL_INVERT
.397615		f0 72		beq $397689	                    BEQ done                        ; No: just finish
.397617		29 7f		and #$7f	                    AND #~CONTROL_INVERT            ; Yes: Mark that the colors are back to normal
.397619		85 1e		sta $1e		                    STA #S_ANSI_VARS.CONTROL,D
.39761b		80 d1		bra $3975ee	                    BRA swap_colors                 ; And go swap the colors
.39761d		c9 27		cmp #$27	chk_39              CMP #39
.39761f		d0 10		bne $397631	                    BNE chk_49
.397621		a5 12		lda $12		                    LDA #S_ANSI_VARS.CURCOLOR,D
.397623		29 0f		and #$0f	                    AND #$0F
.397625		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.397627		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR
.397629		29 f0		and #$f0	                    AND #$F0
.39762b		05 12		ora $12		                    ORA #S_ANSI_VARS.CURCOLOR,D
.39762d		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.39762f		80 58		bra $397689	                    BRA done
.397631		c9 31		cmp #$31	chk_49              CMP #49
.397633		d0 10		bne $397645	                    BNE chk_foreground
.397635		a5 12		lda $12		                    LDA #S_ANSI_VARS.CURCOLOR,D
.397637		29 f0		and #$f0	                    AND #$F0
.397639		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.39763b		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR
.39763d		29 0f		and #$0f	                    AND #$0F
.39763f		05 12		ora $12		                    ORA #S_ANSI_VARS.CURCOLOR,D
.397641		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.397643		80 44		bra $397689	                    BRA done
.397645		c9 1e		cmp #$1e	chk_foreground      CMP #30                         ; If [30..37], set the foreground color
.397647		90 29		bcc $397672	                    BLT chk_background
.397649		c9 26		cmp #$26	                    CMP #38
.39764b		b0 25		bcs $397672	                    BGE chk_background
.39764d		a5 12		lda $12		                    LDA #S_ANSI_VARS.CURCOLOR,D
.39764f		29 0f		and #$0f	                    AND #$0F
.397651		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.397653		a5 20		lda $20		                    LDA #S_ANSI_VARS.ARG0,D
.397655		38		sec		                    SEC
.397656		e9 1e		sbc #$1e	                    SBC #30
.397658		0a		asl a		                    ASL A
.397659		0a		asl a		                    ASL A
.39765a		0a		asl a		                    ASL A
.39765b		0a		asl a		                    ASL A
.39765c		05 12		ora $12		                    ORA #S_ANSI_VARS.CURCOLOR,D
.39765e		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.397660		a5 1e		lda $1e		                    LDA #S_ANSI_VARS.CONTROL,D      ; Should the color be bold?
.397662		89 40		bit #$40	                    BIT #CONTROL_BOLD
.397664		d0 03		bne $397669	                    BNE bold_fore                   ; No: we're done
.397666		82 20 00	brl $397689	                    BRL done
.397669		a5 12		lda $12		bold_fore           LDA #S_ANSI_VARS.CURCOLOR,D     ; Yes: make the foreground bold
.39766b		09 80		ora #$80	                    ORA #$80
.39766d		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.39766f		82 17 00	brl $397689	                    BRL done
.397672		c9 28		cmp #$28	chk_background      CMP #40                         ; If [40..47], set the background color
.397674		90 13		bcc $397689	                    BLT done
.397676		c9 30		cmp #$30	                    CMP #48
.397678		b0 0f		bcs $397689	                    BGE done
.39767a		a5 12		lda $12		                    LDA #S_ANSI_VARS.CURCOLOR,D
.39767c		29 f0		and #$f0	                    AND #$F0
.39767e		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.397680		a5 20		lda $20		                    LDA #S_ANSI_VARS.ARG0,D
.397682		38		sec		                    SEC
.397683		e9 28		sbc #$28	                    SBC #40
.397685		05 12		ora $12		                    ORA #S_ANSI_VARS.CURCOLOR,D
.397687		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.397689		28		plp		done                PLP
.39768a		60		rts		                    RTS
.39768b						ANSI_ED
.39768b		5a		phy		                    PHY
.39768c		08		php		                    PHP
.39768d		e2 20		sep #$20	                SEP #$20        ; set A short
.39768f		c2 10		rep #$10	                REP #$10        ; set X long
.397691		a5 20		lda $20		                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.397693		d0 0f		bne $3976a4	                    BNE not_0                       ; Is the code 0?
.397695						code_0
.397695		a9 20		lda #$20	                    LDA #' '
.397697		a4 17		ldy $17		                    LDY #CURSORPOS,D                ; Start with the cursor's position
.397699		97 0c		sta [$0c],y	code_0_loop         STA [#SCREENBEGIN,D],Y          ; Clear the text cell
.39769b		c8		iny		                    INY                             ; Go to the next position
.39769c		c0 00 20	cpy #$2000	                    CPY #$2000                      ; Have we reached the end?
.39769f		d0 f8		bne $397699	                    BNE code_0_loop                 ; No: keep going
.3976a1		82 27 00	brl $3976cb	                    BRL done
.3976a4		c9 01		cmp #$01	not_0               CMP #1                          ; Is the code 1?
.3976a6		d0 0e		bne $3976b6	                    BNE not_1
.3976a8						code_1
.3976a8		a9 20		lda #$20	                    LDA #' '
.3976aa		a4 17		ldy $17		                    LDY #CURSORPOS,D                ; Start with the cursor's position
.3976ac		97 0c		sta [$0c],y	code_1_loop         STA [#SCREENBEGIN,D],Y          ; Clear the text cell
.3976ae		88		dey		                    DEY                             ; Go to the previous position
.3976af		d0 fb		bne $3976ac	                    BNE code_1_loop
.3976b1		97 0c		sta [$0c],y	                    STA [#SCREENBEGIN,D],Y          ; Clear the first cell
.3976b3		82 15 00	brl $3976cb	                    BRL done
.3976b6		c9 02		cmp #$02	not_1               CMP #2                          ; Is the code 2 or 3?
.3976b8		f0 04		beq $3976be	                    BEQ code_2_3
.3976ba		c9 03		cmp #$03	                    CMP #3
.3976bc		d0 0d		bne $3976cb	                    BNE done                        ; No: just ignore the sequence
.3976be						code_2_3
.3976be		a9 20		lda #$20	                    LDA #' '
.3976c0		a0 00 00	ldy #$0000	                    LDY #0                          ; Start with the cursor's position
.3976c3		97 0c		sta [$0c],y	code_2_3_loop       STA [#SCREENBEGIN,D],Y          ; Clear the text cell
.3976c5		c8		iny		                    INY                             ; Go to the next position
.3976c6		c0 00 20	cpy #$2000	                    CPY #$2000                      ; Have we reached the end?
.3976c9		d0 ce		bne $397699	                    BNE code_0_loop                 ; No: keep going
.3976cb		28		plp		done                PLP
.3976cc		7a		ply		                    PLY
.3976cd		60		rts		                    RTS
.3976ce						ANSI_EL
.3976ce		da		phx		                    PHX
.3976cf		5a		phy		                    PHY
.3976d0		08		php		                    PHP
.3976d1		c2 30		rep #$30	                REP #$30        ; set A&X long
.3976d3		38		sec		                    SEC
.3976d4		a5 0b		lda $0b		                    LDA #S_ANSI_VARS.CURSORPOS,D        ; Compute the address of the first character of the line
.3976d6		e5 0e		sbc $0e		                    SBC #S_ANSI_VARS.CURSORX,D
.3976d8		85 19		sta $19		                    STA #S_ANSI_VARS.TMPPTR1,D
.3976da		e2 20		sep #$20	                SEP #$20        ; set A short
.3976dc		a5 02		lda $02		                    LDA #S_ANSI_VARS.SCREENBEGIN+2,D    ; Get the bank of the screen
.3976de		85 1b		sta $1b		                    STA #S_ANSI_VARS.TMPPTR1+2,D        ; And put it in the TMPPTR1
.3976e0		a5 20		lda $20		                    LDA #S_ANSI_VARS.ARG0,D             ; Get the first argument
.3976e2		d0 0e		bne $3976f2	                    BNE not_0                           ; Is the code 0?
.3976e4						code_0
.3976e4		a9 20		lda #$20	                    LDA #' '
.3976e6		a4 0e		ldy $0e		                    LDY #S_ANSI_VARS.CURSORX,D          ; Start at the cursor position
.3976e8		97 19		sta [$19],y	code_0_loop         STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; Clear the text cell
.3976ea		c8		iny		                    INY
.3976eb		c4 05		cpy $05		                    CPY #S_ANSI_VARS.COLS_PER_LINE,D    ; Have we reached the end of the line?
.3976ed		d0 f9		bne $3976e8	                    BNE code_0_loop                     ; No: keep looping
.3976ef		82 29 00	brl $39771b	                    BRL done
.3976f2		c9 01		cmp #$01	not_0               CMP #1                              ; Is the code 1?
.3976f4		d0 11		bne $397707	                    BNE not_1
.3976f6						code_1
.3976f6		a9 20		lda #$20	                    LDA #' '
.3976f8		a0 00 00	ldy #$0000	                    LDY #0
.3976fb		97 19		sta [$19],y	code_1_loop         STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; Clear the text cell
.3976fd		c8		iny		                    INY
.3976fe		c4 0e		cpy $0e		                    CPY #S_ANSI_VARS.CURSORX,D          ; Have we reached the cursor?
.397700		d0 f9		bne $3976fb	                    BNE code_1_loop                     ; No: keep looping
.397702		97 19		sta [$19],y	                    STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; And clear under the cursor
.397704		82 14 00	brl $39771b	                    BRL done
.397707		c9 02		cmp #$02	not_1               CMP #2                              ; Is the code 2 or 3?
.397709		f0 04		beq $39770f	                    BEQ code_2_3
.39770b		c9 03		cmp #$03	                    CMP #3
.39770d		d0 0c		bne $39771b	                    BNE done                            ; No: just ignore the sequence
.39770f						code_2_3
.39770f		a9 20		lda #$20	                    LDA #' '
.397711		a0 00 00	ldy #$0000	                    LDY #0
.397714		97 19		sta [$19],y	code_2_3_loop       STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; Clear the text cell
.397716		c8		iny		                    INY
.397717		c4 05		cpy $05		                    CPY #S_ANSI_VARS.COLS_PER_LINE,D    ; Have we reached the end of the line?
.397719		d0 f9		bne $397714	                    BNE code_2_3_loop                   ; No: keep looping
.39771b		28		plp		done                PLP
.39771c		7a		ply		                    PLY
.39771d		fa		plx		                    PLX
.39771e		60		rts		                    RTS
.39771f						ANSI_CSRRIGHT
.39771f		da		phx		                    PHX
.397720		5a		phy		                    PHY
.397721		0b		phd		                    PHD
.397722		08		php		                    PHP
.397723		c2 30		rep #$30	                REP #$30        ; set A&X long
.397725		20 90 73	jsr $397390	                    JSR ANSI_SETDEVICE                  ; Look at the current output channel and point
.397728		b0 18		bcs $397742	                    BCS done                            ; If invalid, just return
.39772a		a6 0e		ldx $0e		                    LDX #S_ANSI_VARS.CURSORX,D          ; Get the new column
.39772c		e8		inx		                    INX
.39772d		a4 10		ldy $10		                    LDY #S_ANSI_VARS.CURSORY,D          ; Get the current row
.39772f		e4 03		cpx $03		                    CPX #S_ANSI_VARS.COLS_VISIBLE,D     ; Are we off screen?
.397731		90 0c		bcc $39773f	                    BCC nowrap                          ; No: just set the position
.397733		a2 00 00	ldx #$0000	                    LDX #0                              ; Yes: move to the first column
.397736		c8		iny		                    INY                                 ; And move to the next row
.397737		c4 07		cpy $07		                    CPY #S_ANSI_VARS.LINES_VISIBLE,D    ; Are we still off screen?
.397739		90 04		bcc $39773f	                    BCC nowrap                          ; No: just set the position
.39773b		88		dey		                    DEY                                 ; Yes: lock to the last row
.39773c		20 01 78	jsr $397801	                    JSR ANSI_SCROLLUP                   ; But scroll the screen up
.39773f		20 9f 77	jsr $39779f	nowrap              JSR ANSI_LOCATE                     ; Set the cursor position
.397742		28		plp		done                PLP
.397743		2b		pld		                    PLD
.397744		7a		ply		                    PLY
.397745		fa		plx		                    PLX
.397746		60		rts		                    RTS
.397747						ANSI_CSRLEFT
.397747		da		phx		                    PHX
.397748		5a		phy		                    PHY
.397749		0b		phd		                    PHD
.39774a		08		php		                    PHP
.39774b		c2 30		rep #$30	                REP #$30        ; set A&X long
.39774d		20 90 73	jsr $397390	                    JSR ANSI_SETDEVICE          ; Look at the current output channel and point
.397750		b0 0c		bcs $39775e	                    BCS done                    ; If invalid, just return
.397752		a6 0e		ldx $0e		                    LDX #S_ANSI_VARS.CURSORX,D  ; Check that we are not already @ Zero
.397754		f0 08		beq $39775e	                    BEQ done                    ; If so, just ignore this call
.397756		ca		dex		                    DEX
.397757		86 0e		stx $0e		                    STX #S_ANSI_VARS.CURSORX,D
.397759		a4 10		ldy $10		                    LDY #S_ANSI_VARS.CURSORY,D
.39775b		20 9f 77	jsr $39779f	                    JSR ANSI_LOCATE
.39775e		28		plp		done                PLP
.39775f		2b		pld		                    PLD
.397760		7a		ply		                    PLY
.397761		fa		plx		                    PLX
.397762		60		rts		                    RTS
.397763						ANSI_CSRUP
.397763		da		phx		                    PHX
.397764		5a		phy		                    PHY
.397765		0b		phd		                    PHD
.397766		08		php		                    PHP
.397767		c2 30		rep #$30	                REP #$30        ; set A&X long
.397769		20 90 73	jsr $397390	                    JSR ANSI_SETDEVICE          ; Look at the current output channel and point
.39776c		b0 0c		bcs $39777a	                    BCS done                    ; If invalid, just return
.39776e		a4 10		ldy $10		                    LDY #S_ANSI_VARS.CURSORY,D  ; Check if we are not already @ Zero
.397770		f0 08		beq $39777a	                    BEQ done                    ; If we are, just ignore the call
.397772		88		dey		                    DEY
.397773		84 10		sty $10		                    STY #S_ANSI_VARS.CURSORY,D
.397775		a6 0e		ldx $0e		                    LDX #S_ANSI_VARS.CURSORX,D
.397777		20 9f 77	jsr $39779f	                    JSR ANSI_LOCATE
.39777a		28		plp		done                PLP
.39777b		2b		pld		                    PLD
.39777c		7a		ply		                    PLY
.39777d		fa		plx		                    PLX
.39777e		60		rts		                    RTS
.39777f						ANSI_CSRDOWN
.39777f		da		phx		                    PHX
.397780		5a		phy		                    PHY
.397781		0b		phd		                    PHD
.397782		08		php		                    PHP
.397783		c2 30		rep #$30	                REP #$30        ; set A&X long
.397785		20 90 73	jsr $397390	                    JSR ANSI_SETDEVICE                  ; Look at the current output channel and point
.397788		b0 10		bcs $39779a	                    BCS done                            ; If invalid, just return
.39778a		a6 0e		ldx $0e		                    LDX #S_ANSI_VARS.CURSORX,D          ; Get the current column
.39778c		a4 10		ldy $10		                    LDY #S_ANSI_VARS.CURSORY,D          ; Get the new row
.39778e		c8		iny		                    INY
.39778f		c4 07		cpy $07		                    CPY #S_ANSI_VARS.LINES_VISIBLE,D    ; Check to see if we're off screen
.397791		90 04		bcc $397797	                    BCC noscroll                        ; No: go ahead and set the position
.397793		88		dey		                    DEY                                 ; Yes: go back to the last row
.397794		20 01 78	jsr $397801	                    JSR ANSI_SCROLLUP                   ; But scroll the screen up
.397797		20 9f 77	jsr $39779f	noscroll            JSR ANSI_LOCATE                     ; And set the cursor position
.39779a		28		plp		done                PLP
.39779b		2b		pld		                    PLD
.39779c		7a		ply		                    PLY
.39779d		fa		plx		                    PLX
.39779e		60		rts		                    RTS
.39779f						ANSI_LOCATE
.39779f		da		phx		                    PHX
.3977a0		5a		phy		                    PHY
.3977a1		0b		phd		                    PHD
.3977a2		08		php		                    PHP
.3977a3		20 90 73	jsr $397390	                    JSR ANSI_SETDEVICE          ; Look at the current output channel and point
.3977a6		b0 54		bcs $3977fc	                    BCS done                    ; If invalid, just return
.3977a8		c2 30		rep #$30	                REP #$30        ; set A&X long
.3977aa						locate_scroll
.3977aa		c4 07		cpy $07		                    CPY #S_ANSI_VARS.LINES_VISIBLE,D
.3977ac		90 06		bcc $3977b4	                    BCC locate_scrolldone
.3977ae		20 01 78	jsr $397801	                    JSR ANSI_SCROLLUP
.3977b1		88		dey		                    DEY
.3977b2		80 f6		bra $3977aa	                    BRA locate_scroll
.3977b4						locate_scrolldone
.3977b4		86 0e		stx $0e		                    STX #S_ANSI_VARS.CURSORX,D
.3977b6		84 10		sty $10		                    STY #S_ANSI_VARS.CURSORY,D
.3977b8		a5 00		lda $00		                    LDA #S_ANSI_VARS.SCREENBEGIN,D
.3977ba						locate_row
.3977ba		c0 00 00	cpy #$0000	                    CPY #$0
.3977bd		f0 08		beq $3977c7	                    BEQ locate_right
.3977bf		18		clc		locate_down         CLC
.3977c0		65 05		adc $05		                    ADC #S_ANSI_VARS.COLS_PER_LINE,D
.3977c2		88		dey		                    DEY
.3977c3		f0 02		beq $3977c7	                    BEQ locate_right
.3977c5		80 f8		bra $3977bf	                    BRA locate_down
.3977c7		18		clc		locate_right        CLC
.3977c8		65 0e		adc $0e		                    ADC #S_ANSI_VARS.CURSORX,D      ; move the cursor right X columns
.3977ca		85 0b		sta $0b		                    STA #S_ANSI_VARS.CURSORPOS,D
.3977cc		a4 10		ldy $10		                    LDY #S_ANSI_VARS.CURSORY,D
.3977ce		e2 20		sep #$20	                SEP #$20        ; set A short
.3977d0		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT
.3977d4		c9 04		cmp #$04	                    CMP #CHAN_EVID
.3977d6		f0 0e		beq $3977e6	                    beq locate_evid
.3977d8		c2 20		rep #$20	                REP #$20        ; set A long
.3977da		98		tya		                    TYA
.3977db		8f 16 00 af	sta $af0016	                    STA @l VKY_TXT_CURSOR_Y_REG_L
.3977df		8a		txa		                    TXA
.3977e0		8f 14 00 af	sta $af0014	                    STA @l VKY_TXT_CURSOR_X_REG_L
.3977e4		80 0c		bra $3977f2	                    BRA update_colorpos
.3977e6						locate_evid
.3977e6		c2 20		rep #$20	                REP #$20        ; set A long
.3977e8		98		tya		                    TYA
.3977e9		8f 16 1e ae	sta $ae1e16	                    STA @l EVID_TXT_CURSOR_Y_REG_L
.3977ed		8a		txa		                    TXA
.3977ee		8f 14 1e ae	sta $ae1e14	                    STA @l EVID_TXT_CURSOR_X_REG_L
.3977f2						update_colorpos
.3977f2		c2 20		rep #$20	                REP #$20        ; set A long
.3977f4		18		clc		                    CLC
.3977f5		a5 0b		lda $0b		                    LDA #S_ANSI_VARS.CURSORPOS,D
.3977f7		69 00 20	adc #$2000	                    ADC #<>(CS_COLOR_MEM_PTR - CS_TEXT_MEM_PTR)
.3977fa		85 13		sta $13		                    STA #S_ANSI_VARS.COLORPOS,D
.3977fc		28		plp		done                PLP
.3977fd		2b		pld		                    PLD
.3977fe		7a		ply		                    PLY
.3977ff		fa		plx		                    PLX
.397800		60		rts		                    RTS
.397801						ANSI_SCROLLUP
.397801		da		phx		                    PHX
.397802		5a		phy		                    PHY
.397803		8b		phb		                    PHB
.397804		0b		phd		                    PHD
.397805		08		php		                    PHP
.397806		20 90 73	jsr $397390	                    JSR ANSI_SETDEVICE          ; Look at the current output channel and point
.397809		90 03		bcc $39780e	                    BCC calc_size
.39780b		82 81 00	brl $39788f	                    BRL done                    ; If invalid, just return
.39780e						calc_size
.39780e		c2 30		rep #$30	                REP #$30        ; set A&X long
.397810		a5 05		lda $05		                    LDA #S_ANSI_VARS.COLS_PER_LINE,D
.397812		8f 00 01 00	sta $000100	                    STA @l UNSIGNED_MULT_A_LO
.397816		a5 07		lda $07		                    LDA #S_ANSI_VARS.LINES_VISIBLE,D
.397818		8f 02 01 00	sta $000102	                    STA @l UNSIGNED_MULT_B_LO
.39781c		af 04 01 00	lda $000104	                    LDA @l UNSIGNED_MULT_AL_LO
.397820		85 19		sta $19		                    STA #S_ANSI_VARS.TMPPTR1,D
.397822		18		clc		                    CLC
.397823		a5 00		lda $00		                    LDA #S_ANSI_VARS.SCREENBEGIN,D
.397825		a8		tay		                    TAY
.397826		65 05		adc $05		                    ADC #S_ANSI_VARS.COLS_PER_LINE,D
.397828		aa		tax		                    TAX
.397829		e2 20		sep #$20	                SEP #$20        ; set A short
.39782b		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                             ; Are we scrolling the EVID
.39782f		c9 04		cmp #$04	                    CMP #CHAN_EVID
.397831		f0 09		beq $39783c	                    BEQ move_text_1                             ; Yes: do the move on the EVID memory
.397833						move_text_0
.397833		c2 20		rep #$20	                REP #$20        ; set A long
.397835		a5 19		lda $19		                    LDA #S_ANSI_VARS.TMPPTR1,D
.397837		54 af af	mvn $af,$af	                    MVN `CS_TEXT_MEM_PTR,`CS_TEXT_MEM_PTR       ; Move the data on the main screen
.39783a		80 07		bra $397843	                    BRA scroll_color
.39783c						move_text_1
.39783c		c2 20		rep #$20	                REP #$20        ; set A long
.39783e		a5 19		lda $19		                    LDA #S_ANSI_VARS.TMPPTR1,D
.397840		54 ae ae	mvn $ae,$ae	                    MVN `EVID_TEXT_MEM,`EVID_TEXT_MEM           ; Move the data on the EVID screen
.397843						scroll_color
.397843		c2 30		rep #$30	                REP #$30        ; set A&X long
.397845		18		clc		                    CLC
.397846		a5 16		lda $16		                    LDA #S_ANSI_VARS.COLORBEGIN,D
.397848		a8		tay		                    TAY
.397849		65 05		adc $05		                    ADC #S_ANSI_VARS.COLS_PER_LINE,D
.39784b		aa		tax		                    TAX
.39784c		e2 20		sep #$20	                SEP #$20        ; set A short
.39784e		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                             ; Are we scrolling the EVID?
.397852		c9 04		cmp #$04	                    CMP #CHAN_EVID
.397854		f0 09		beq $39785f	                    BEQ move_color_1                            ; Yes: scroll the EVID color matrix
.397856						move_color_0
.397856		c2 20		rep #$20	                REP #$20        ; set A long
.397858		a5 19		lda $19		                    LDA #S_ANSI_VARS.TMPPTR1,D
.39785a		54 af af	mvn $af,$af	                    MVN `CS_COLOR_MEM_PTR,`CS_COLOR_MEM_PTR     ; Move the data on the main screen
.39785d		80 07		bra $397866	                    BRA vicky_lastline
.39785f						move_color_1
.39785f		c2 20		rep #$20	                REP #$20        ; set A long
.397861		a5 19		lda $19		                    LDA #S_ANSI_VARS.TMPPTR1,D
.397863		54 ae ae	mvn $ae,$ae	                    MVN `EVID_COLOR_MEM,`EVID_COLOR_MEM         ; Move the data on the EVID screen
.397866						vicky_lastline
.397866		c2 20		rep #$20	                REP #$20        ; set A long
.397868		a5 19		lda $19		                    LDA #S_ANSI_VARS.TMPPTR1,D
.39786a		48		pha		                    PHA
.39786b		18		clc		                    CLC
.39786c		65 00		adc $00		                    ADC #S_ANSI_VARS.SCREENBEGIN,D
.39786e		85 19		sta $19		                    STA #S_ANSI_VARS.TMPPTR1,D
.397870		a0 00 00	ldy #$0000	start_clear         LDY #0
.397873		a9 20 00	lda #$0020	                    LDA #' '
.397876		97 19		sta [$19],y	clr_text            STA [#S_ANSI_VARS.TMPPTR1,D],Y
.397878		c8		iny		                    INY
.397879		c4 0f		cpy $0f		                    CPY #COLS_VISIBLE,D
.39787b		d0 f9		bne $397876	                    BNE clr_text
.39787d		68		pla		vicky_lastcolor     PLA
.39787e		18		clc		                    CLC
.39787f		65 16		adc $16		                    ADC #S_ANSI_VARS.COLORBEGIN,D
.397881		85 19		sta $19		                    STA #S_ANSI_VARS.TMPPTR1,D
.397883		a0 00 00	ldy #$0000	start_color         LDY #0
.397886		a5 12		lda $12		                    LDA #S_ANSI_VARS.CURCOLOR,D
.397888		97 19		sta [$19],y	clr_color           STA [#S_ANSI_VARS.TMPPTR1,D],Y
.39788a		c8		iny		                    INY
.39788b		c4 05		cpy $05		                    CPY #S_ANSI_VARS.COLS_PER_LINE,D
.39788d		d0 f9		bne $397888	                    BNE clr_color
.39788f		28		plp		done                PLP
.397890		2b		pld		                    PLD
.397891		ab		plb		                    PLB
.397892		7a		ply		                    PLY
.397893		fa		plx		                    PLX
.397894		60		rts		                    RTS
.397895						ANSI_CLRSCREEN
.397895		da		phx		                    PHX
.397896		5a		phy		                    PHY
.397897		0b		phd		                    PHD
.397898		08		php		                    PHP
.397899		20 90 73	jsr $397390	                    JSR ANSI_SETDEVICE          ; Look at the current output channel and point
.39789c		b0 1e		bcs $3978bc	                    BCS done                    ; If invalid, just return
.39789e		e2 20		sep #$20	                SEP #$20        ; set A short
.3978a0		c2 10		rep #$10	                REP #$10        ; set X long
.3978a2		a0 00 00	ldy #$0000	                    LDY #0
.3978a5		a9 20		lda #$20	                    LDA #$20		            ; Fill the Entire Screen with Space
.3978a7		97 00		sta [$00],y	iclearloop0	        STA [#S_ANSI_VARS.SCREENBEGIN,D],Y
.3978a9		c8		iny		                    INY
.3978aa		c0 00 20	cpy #$2000	                    CPY #$2000
.3978ad		d0 f8		bne $3978a7	                    BNE iclearloop0
.3978af		a0 00 00	ldy #$0000	                    LDY	#0
.3978b2		a5 1e		lda $1e		                    LDA #CURCOLOR,D             ; Fill the current color
.3978b4		97 16		sta [$16],y	evid_clearloop1     STA [#S_ANSI_VARS.COLORBEGIN,D],Y
.3978b6		c8		iny		                    INY
.3978b7		c0 00 20	cpy #$2000	                    CPY #$2000
.3978ba		d0 f8		bne $3978b4	                    BNE evid_clearloop1
.3978bc		28		plp		done                PLP
.3978bd		2b		pld		                    PLD
.3978be		7a		ply		                    PLY
.3978bf		fa		plx		                    PLX
.3978c0		60		rts		                    RTS

;******  Return to file: src\kernel.asm

.3978c1						    KERNEL_DATA
>3978c1		20 20 20 20 0b 0c 0b 0c		    greet_msg   .text $20, $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, " UU    UU   +" ,$0D
>3978c9		0b 0c 0b 0c 0b 0c 20 55 55 20 20 20 20 55 55 20
>3978d9		20 20 2b 0d
>3978dd		20 20 20 0b 0c 0b 0c 0b		                .text $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "UU    UU   +",$0D
>3978e5		0c 0b 0c 0b 0c 20 55 55 20 20 20 20 55 55 20 20
>3978f5		20 2b 0d
>3978f8		20 20 0b 0c 0b 0c 0b 0c		                .text $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "UU    UU +++++",$0D
>397900		0b 0c 0b 0c 20 55 55 20 20 20 20 55 55 20 2b 2b
>397910		2b 2b 2b 0d
>397914		20 0b 0c 0b 0c 0b 0c 0b		                .text $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "UU    UU   +",$0D
>39791c		0c 0b 0c 20 55 55 20 20 20 20 55 55 20 20 20 2b
>39792c		0d
>39792d		0b 0c 0b 0c 0b 0c 0b 0c		                .text $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "UUUUUUUU   +",$0D
>397935		0b 0c 20 55 55 55 55 55 55 55 55 20 20 20 2b 0d
>397945		0d 43 32 35 36 20 46 4f		                .text $0D, "C256 FOENIX U+ -- 3,670,016 Bytes Free", $0D
>39794d		45 4e 49 58 20 55 2b 20 2d 2d 20 33 2c 36 37 30
>39795d		2c 30 31 36 20 42 79 74 65 73 20 46 72 65 65 0d
>39796d		77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com - Kernel Date: March 13th, 2021",$0D
>397975		66 6f 65 6e 69 78 2e 63 6f 6d 20 2d 20 4b 65 72
>397985		6e 65 6c 20 44 61 74 65 3a 20 4d 61 72 63 68 20
>397995		31 33 74 68 2c 20 32 30 32 31 0d

;******  Processing file: src\version.asm

>3979a0		76 30 2e 33 2e 30 2d 61		.text "v0.3.0-alpha+1677 (2021-04-30)"
>3979a8		6c 70 68 61 2b 31 36 37 37 20 28 32 30 32 31 2d
>3979b8		30 34 2d 33 30 29

;******  Return to file: src\kernel.asm

>3979be		0d 00				                .text $0D,$00
>3979c0		90 90 90 90 90 90 d0 d0		  greet_clr_line1 .text $90, $90, $90, $90, $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>3979c8		b0 b0 a0 a0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>3979d8		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>3979e8		f0 f0
>3979ea		90 90 90 90 90 d0 d0 b0		  greet_clr_line2 .text $90, $90, $90, $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>3979f2		b0 a0 a0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>397a02		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>397a12		f0 f0
>397a14		90 90 90 90 d0 d0 b0 b0		  greet_clr_line3 .text $90, $90, $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>397a1c		a0 a0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>397a2c		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>397a3c		f0 f0
>397a3e		90 90 90 d0 d0 b0 b0 a0		  greet_clr_line4 .text $90, $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>397a46		a0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>397a56		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>397a66		f0 f0
>397a68		90 90 d0 d0 b0 b0 a0 a0		  greet_clr_line5 .text $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>397a70		e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>397a80		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>397a90		f0 f0
>397a92		00 00 00 ff			fg_color_lut	  .text $00, $00, $00, $FF
>397a96		00 00 80 ff			                .text $00, $00, $80, $FF
>397a9a		00 80 00 ff			                .text $00, $80, $00, $FF
>397a9e		80 00 00 ff			                .text $80, $00, $00, $FF
>397aa2		00 80 80 ff			                .text $00, $80, $80, $FF
>397aa6		80 80 00 ff			                .text $80, $80, $00, $FF
>397aaa		80 00 80 ff			                .text $80, $00, $80, $FF
>397aae		80 80 80 ff			                .text $80, $80, $80, $FF
>397ab2		00 45 ff ff			                .text $00, $45, $FF, $FF
>397ab6		13 45 8b ff			                .text $13, $45, $8B, $FF
>397aba		00 00 20 ff			                .text $00, $00, $20, $FF
>397abe		00 20 00 ff			                .text $00, $20, $00, $FF
>397ac2		20 00 00 ff			                .text $20, $00, $00, $FF
>397ac6		20 20 20 ff			                .text $20, $20, $20, $FF
>397aca		40 40 40 ff			                .text $40, $40, $40, $FF
>397ace		ff ff ff ff			                .text $FF, $FF, $FF, $FF
>397ad2		00 00 00 ff			bg_color_lut	  .text $00, $00, $00, $FF
>397ad6		00 00 80 ff			                .text $00, $00, $80, $FF
>397ada		00 80 00 ff			                .text $00, $80, $00, $FF
>397ade		80 00 00 ff			                .text $80, $00, $00, $FF
>397ae2		00 20 20 ff			                .text $00, $20, $20, $FF
>397ae6		20 20 00 ff			                .text $20, $20, $00, $FF
>397aea		20 00 20 ff			                .text $20, $00, $20, $FF
>397aee		20 20 20 ff			                .text $20, $20, $20, $FF
>397af2		1e 69 d2 ff			                .text $1E, $69, $D2, $FF
>397af6		13 45 8b ff			                .text $13, $45, $8B, $FF
>397afa		00 00 20 ff			                .text $00, $00, $20, $FF
>397afe		00 20 00 ff			                .text $00, $20, $00, $FF
>397b02		40 00 00 ff			                .text $40, $00, $00, $FF
>397b06		10 10 10 ff			                .text $10, $10, $10, $FF
>397b0a		40 40 40 ff			                .text $40, $40, $40, $FF
>397b0e		ff ff ff ff			                .text $FF, $FF, $FF, $FF
>397b12		43 6d 64 20 30 78 41 41		pass_tst0xAAmsg .text "Cmd 0xAA Test passed...", $0D, $00
>397b1a		20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>397b2a		00
>397b2b		43 6d 64 20 30 78 41 42		pass_tst0xABmsg .text "Cmd 0xAB Test passed...", $0D, $00
>397b33		20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>397b43		00
>397b44		43 6d 64 20 30 78 36 30		pass_cmd0x60msg .text "Cmd 0x60 Executed.", $0D, $00
>397b4c		20 45 78 65 63 75 74 65 64 2e 0d 00
>397b58		43 6d 64 20 30 78 46 46		pass_cmd0xFFmsg .text "Cmd 0xFF (Reset) Done.", $0D, $00
>397b60		20 28 52 65 73 65 74 29 20 44 6f 6e 65 2e 0d 00
>397b70		43 6d 64 20 30 78 45 45		pass_cmd0xEEmsg .text "Cmd 0xEE Echo Test passed...", $0D, $00
>397b78		20 45 63 68 6f 20 54 65 73 74 20 70 61 73 73 65
>397b88		64 2e 2e 2e 0d 00
>397b8e		4b 65 79 62 6f 61 72 64		Success_kb_init .text "Keyboard Present", $0D, $00
>397b96		20 50 72 65 73 65 6e 74 0d 00
>397ba0		4d 6f 75 73 65 20 50 72		Success_ms_init .text "Mouse Present", $0D, $00
>397ba8		65 73 65 6e 74 0d 00
>397baf		4e 6f 20 4b 65 79 62 6f		Failed_kb_init  .text "No Keyboard Attached or Failed Init...", $0D, $00
>397bb7		61 72 64 20 41 74 74 61 63 68 65 64 20 6f 72 20
>397bc7		46 61 69 6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>397bd7		4e 6f 20 4d 6f 75 73 65		Failed_ms_init  .text "No Mouse Attached or Failed Init...", $0D, $00
>397bdf		20 41 74 74 61 63 68 65 64 20 6f 72 20 46 61 69
>397bef		6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>397bfc		49 20 61 6d 20 73 74 75		IamStuckHeremsg .text "I am stuck here...", $0D, $00
>397c04		63 6b 20 68 65 72 65 2e 2e 2e 0d 00
>397c10		4e 4f 20 53 49 47 4e 41		bmp_parser_err0 .text "NO SIGNATURE FOUND.", $00
>397c18		54 55 52 45 20 46 4f 55 4e 44 2e 00
>397c24		42 4d 50 20 4c 4f 41 44		bmp_parser_msg0 .text "BMP LOADED.", $00
>397c2c		45 44 2e 00
>397c30		45 58 45 43 55 54 49 4e		bmp_parser_msg1 .text "EXECUTING BMP PARSER", $00
>397c38		47 20 42 4d 50 20 50 41 52 53 45 52 00
>397c45		49 44 45 20 48 44 44 20		IDE_HDD_Present_msg0 .text "IDE HDD Present:", $00
>397c4d		50 72 65 73 65 6e 74 3a 00
>397c56		42 6f 6f 74 20 44 49 50		boot_invalid    .null "Boot DIP switch settings are invalid."
>397c5e		20 73 77 69 74 63 68 20 73 65 74 74 69 6e 67 73
>397c6e		20 61 72 65 20 69 6e 76 61 6c 69 64 2e 00
>397c7c		50 72 65 73 73 20 52 20		boot_retry      .null "Press R to retry, B to go to BASIC.", 13
>397c84		74 6f 20 72 65 74 72 79 2c 20 42 20 74 6f 20 67
>397c94		6f 20 74 6f 20 42 41 53 49 43 2e 0d 00
>397ca1		55 6e 61 62 6c 65 20 74		sdc_err_boot    .null "Unable to read the SD card."
>397ca9		6f 20 72 65 61 64 20 74 68 65 20 53 44 20 63 61
>397cb9		72 64 2e 00
>397cbd		55 6e 61 62 6c 65 20 74		ide_err_boot    .null "Unable to read from the IDE drive."
>397cc5		6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>397cd5		49 44 45 20 64 72 69 76 65 2e 00
>397ce0		55 6e 61 62 6c 65 20 74		fdc_err_boot    .null "Unable to read from the floppy drive."
>397ce8		6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>397cf8		66 6c 6f 70 70 79 20 64 72 69 76 65 2e 00
>397d06		42 6f 6f 74 69 6e 67 20		fdc_boot        .null "Booting from floppy..."
>397d0e		66 72 6f 6d 20 66 6c 6f 70 70 79 2e 2e 2e 00
>397d1d		42 6f 6f 74 69 6e 67 20		sdc_boot        .null "Booting from SDCard..."
>397d25		66 72 6f 6d 20 53 44 43 61 72 64 2e 2e 2e 00
>397d34		42 6f 6f 74 69 6e 67 20		ide_boot        .null "Booting from Hard Drive..."
>397d3c		66 72 6f 6d 20 48 61 72 64 20 44 72 69 76 65 2e
>397d4c		2e 2e 00
>397d4f		0d 52 45 41 44 59 2e 00		ready_msg       .null $0D,"READY."
>397d57		41 42 4f 52 54 20 45 52		error_01        .null "ABORT ERROR"
>397d5f		52 4f 52 00
>397d63		30 31 32 33 34 35 36 37		hex_digits      .text "0123456789ABCDEF",0
>397d6b		38 39 41 42 43 44 45 46 00
>397d74						.align 256
>397e00		00 1b 31 32 33 34 35 36		ScanCode_Press_Set1   .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>397e08		37 38 39 30 2d 3d 08 09
>397e10		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>397e18		6f 70 5b 5d 0d 00 61 73
>397e20		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>397e28		27 60 00 5c 7a 78 63 76
>397e30		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $81, $82, $83, $84, $85    ; $30
>397e38		00 20 00 81 82 83 84 85
>397e40		86 87 88 89 8a 00 00 00		                      .text $86, $87, $88, $89, $8A, $00, $00, $00, $11, $00, $00, $9D, $00, $1D, $00, $00    ; $40
>397e48		11 00 00 9d 00 1d 00 00
>397e50		91 00 00 00 00 00 00 8b		                      .text $91, $00, $00, $00, $00, $00, $00, $8B, $8C, $00, $00, $00, $00, $00, $00, $00    ; $50
>397e58		8c 00 00 00 00 00 00 00
>397e60		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>397e68		00 00 00 00 00 00 00 00
>397e70		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>397e78		00 00 00 00 00 00 00 00
>397e80		00 00 21 40 23 24 25 5e		ScanCode_Shift_Set1   .text $00, $00, $21, $40, $23, $24, $25, $5E, $26, $2A, $28, $29, $5F, $2B, $08, $09    ; $00
>397e88		26 2a 28 29 5f 2b 08 09
>397e90		51 57 45 52 54 59 55 49		                      .text $51, $57, $45, $52, $54, $59, $55, $49, $4F, $50, $7B, $7D, $0D, $00, $41, $53    ; $10
>397e98		4f 50 7b 7d 0d 00 41 53
>397ea0		44 46 47 48 4a 4b 4c 3a		                      .text $44, $46, $47, $48, $4A, $4B, $4C, $3A, $22, $7E, $00, $7C, $5A, $58, $43, $56    ; $20
>397ea8		22 7e 00 7c 5a 58 43 56
>397eb0		42 4e 4d 3c 3e 3f 00 00		                      .text $42, $4E, $4D, $3C, $3E, $3F, $00, $00, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>397eb8		00 20 00 00 00 00 00 00
>397ec0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>397ec8		00 00 00 00 00 00 00 00
>397ed0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>397ed8		00 00 00 00 00 00 00 00
>397ee0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>397ee8		00 00 00 00 00 00 00 00
>397ef0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>397ef8		00 00 00 00 00 00 00 00
>397f00		00 1b 31 32 33 34 35 36		ScanCode_Ctrl_Set1    .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>397f08		37 38 39 30 2d 3d 08 09
>397f10		11 17 05 12 14 19 15 09		                      .text $11, $17, $05, $12, $14, $19, $15, $09, $0F, $10, $5B, $5D, $0D, $00, $01, $13    ; $10
>397f18		0f 10 5b 5d 0d 00 01 13
>397f20		04 06 07 08 0a 0b 0c 3b		                      .text $04, $06, $07, $08, $0A, $0B, $0C, $3B, $27, $00, $00, $5C, $1A, $18, $03, $16    ; $20
>397f28		27 00 00 5c 1a 18 03 16
>397f30		02 0e 0d 2c 2e 2f 00 2a		                      .text $02, $0E, $0D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>397f38		00 20 00 00 00 00 00 00
>397f40		00 00 00 00 00 18 00 00		                      .text $00, $00, $00, $00, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>397f48		00 00 00 00 00 00 00 00
>397f50		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>397f58		00 00 00 00 00 00 00 00
>397f60		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>397f68		00 00 00 00 00 00 00 00
>397f70		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>397f78		00 00 00 00 00 00 00 00
>397f80		00 1b 31 32 33 34 35 36		ScanCode_Alt_Set1     .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>397f88		37 38 39 30 2d 3d 08 09
>397f90		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>397f98		6f 70 5b 5d 0d 00 61 73
>397fa0		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>397fa8		27 60 00 5c 7a 78 63 76
>397fb0		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>397fb8		00 20 00 00 00 00 00 00
>397fc0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>397fc8		00 00 00 00 00 00 00 00
>397fd0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>397fd8		00 00 00 00 00 00 00 00
>397fe0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>397fe8		00 00 00 00 00 00 00 00
>397ff0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>397ff8		00 00 00 00 00 00 00 00
>398000		00 1b 31 32 33 34 35 36		ScanCode_NumLock_Set1 .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>398008		37 38 39 30 2d 3d 08 09
>398010		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>398018		6f 70 5b 5d 0d 00 61 73
>398020		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>398028		27 60 00 5c 7a 78 63 76
>398030		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>398038		00 20 00 00 00 00 00 00
>398040		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>398048		00 00 00 00 00 00 00 00
>398050		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>398058		00 00 00 00 00 00 00 00
>398060		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>398068		00 00 00 00 00 00 00 00
>398070		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>398078		00 00 00 00 00 00 00 00
>398080		00 00 00 00 00 00 00 00		ScanCode_Prefix_Set1  .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $00
>398088		00 00 00 00 00 00 00 00
>398090		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $10
>398098		00 00 00 00 00 00 00 00
>3980a0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $20
>3980a8		00 00 00 00 00 00 00 00
>3980b0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $30
>3980b8		00 00 00 00 00 00 00 00
>3980c0		00 00 00 00 00 00 00 01		                      .text $00, $00, $00, $00, $00, $00, $00, $01, $11, $00, $00, $9D, $00, $1D, $00, $05    ; $40
>3980c8		11 00 00 9d 00 1d 00 05
>3980d0		91 00 0f 7f 00 00 00 00		                      .text $91, $00, $0F, $7F, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3980d8		00 00 00 00 00 00 00 00
>3980e0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3980e8		00 00 00 00 00 00 00 00
>3980f0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3980f8		00 00 00 00 00 00 00 00
>398100						.align 256
>398100		00 14 1c 21 26 2a 2e 31		GAMMA_2_2_Tbl         .text  $00, $14, $1c, $21, $26, $2a, $2e, $31, $34, $37, $3a, $3d, $3f, $41, $44, $46
>398108		34 37 3a 3d 3f 41 44 46
>398110		48 4a 4c 4e 50 51 53 55		                      .text  $48, $4a, $4c, $4e, $50, $51, $53, $55, $57, $58, $5a, $5b, $5d, $5e, $60, $61
>398118		57 58 5a 5b 5d 5e 60 61
>398120		63 64 66 67 68 6a 6b 6c		                      .text  $63, $64, $66, $67, $68, $6a, $6b, $6c, $6d, $6f, $70, $71, $72, $73, $75, $76
>398128		6d 6f 70 71 72 73 75 76
>398130		77 78 79 7a 7b 7c 7d 7e		                      .text  $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $80, $81, $82, $83, $84, $85, $86, $87
>398138		80 81 82 83 84 85 86 87
>398140		88 88 89 8a 8b 8c 8d 8e		                      .text  $88, $88, $89, $8a, $8b, $8c, $8d, $8e, $8f, $90, $91, $92, $93, $93, $94, $95
>398148		8f 90 91 92 93 93 94 95
>398150		96 97 98 99 99 9a 9b 9c		                      .text  $96, $97, $98, $99, $99, $9a, $9b, $9c, $9d, $9e, $9e, $9f, $a0, $a1, $a2, $a2
>398158		9d 9e 9e 9f a0 a1 a2 a2
>398160		a3 a4 a5 a5 a6 a7 a8 a8		                      .text  $a3, $a4, $a5, $a5, $a6, $a7, $a8, $a8, $a9, $aa, $ab, $ab, $ac, $ad, $ae, $ae
>398168		a9 aa ab ab ac ad ae ae
>398170		af b0 b0 b1 b2 b2 b3 b4		                      .text  $AF, $b0, $b0, $b1, $b2, $b2, $b3, $b4, $b5, $b5, $b6, $b7, $b7, $b8, $b9, $b9
>398178		b5 b5 b6 b7 b7 b8 b9 b9
>398180		ba bb bb bc bd bd be be		                      .text  $ba, $bb, $bb, $bc, $bd, $bd, $be, $be, $bf, $c0, $c0, $c1, $c2, $c2, $c3, $c4
>398188		bf c0 c0 c1 c2 c2 c3 c4
>398190		c4 c5 c5 c6 c7 c7 c8 c8		                      .text  $c4, $c5, $c5, $c6, $c7, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cb, $cc, $cd, $cd
>398198		c9 ca ca cb cb cc cd cd
>3981a0		ce ce cf d0 d0 d1 d1 d2		                      .text  $ce, $ce, $cf, $d0, $d0, $d1, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d5, $d6, $d6
>3981a8		d2 d3 d4 d4 d5 d5 d6 d6
>3981b0		d7 d8 d8 d9 d9 da da db		                      .text  $d7, $d8, $d8, $d9, $d9, $da, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $df
>3981b8		db dc dc dd de de df df
>3981c0		e0 e0 e1 e1 e2 e2 e3 e3		                      .text  $e0, $e0, $e1, $e1, $e2, $e2, $e3, $e3, $e4, $e4, $e5, $e5, $e6, $e6, $e7, $e7
>3981c8		e4 e4 e5 e5 e6 e6 e7 e7
>3981d0		e8 e8 e9 e9 ea ea eb eb		                      .text  $e8, $e8, $e9, $e9, $ea, $ea, $eb, $eb, $ec, $ec, $ed, $ed, $ee, $ee, $ef, $ef
>3981d8		ec ec ed ed ee ee ef ef
>3981e0		f0 f0 f1 f1 f2 f2 f3 f3		                      .text  $f0, $f0, $f1, $f1, $f2, $f2, $f3, $f3, $f4, $f4, $f5, $f5, $f6, $f6, $f7, $f7
>3981e8		f4 f4 f5 f5 f6 f6 f7 f7
>3981f0		f8 f8 f9 f9 f9 fa fa fb		                      .text  $f8, $f8, $f9, $f9, $f9, $fa, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $fe, $ff
>3981f8		fb fc fc fd fd fe fe ff
>398200						.align 256
>398200		00 0b 11 15 19 1c 1f 22		GAMMA_1_8_Tbl         .text  $00, $0b, $11, $15, $19, $1c, $1f, $22, $25, $27, $2a, $2c, $2e, $30, $32, $34
>398208		25 27 2a 2c 2e 30 32 34
>398210		36 38 3a 3c 3d 3f 41 43		                      .text  $36, $38, $3a, $3c, $3d, $3f, $41, $43, $44, $46, $47, $49, $4a, $4c, $4d, $4f
>398218		44 46 47 49 4a 4c 4d 4f
>398220		50 51 53 54 55 57 58 59		                      .text  $50, $51, $53, $54, $55, $57, $58, $59, $5b, $5c, $5d, $5e, $60, $61, $62, $63
>398228		5b 5c 5d 5e 60 61 62 63
>398230		64 65 67 68 69 6a 6b 6c		                      .text  $64, $65, $67, $68, $69, $6a, $6b, $6c, $6d, $6e, $70, $71, $72, $73, $74, $75
>398238		6d 6e 70 71 72 73 74 75
>398240		76 77 78 79 7a 7b 7c 7d		                      .text  $76, $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $7f, $80, $81, $82, $83, $84, $84
>398248		7e 7f 80 81 82 83 84 84
>398250		85 86 87 88 89 8a 8b 8c		                      .text  $85, $86, $87, $88, $89, $8a, $8b, $8c, $8d, $8e, $8e, $8f, $90, $91, $92, $93
>398258		8d 8e 8e 8f 90 91 92 93
>398260		94 95 95 96 97 98 99 9a		                      .text  $94, $95, $95, $96, $97, $98, $99, $9a, $9a, $9b, $9c, $9d, $9e, $9f, $9f, $a0
>398268		9a 9b 9c 9d 9e 9f 9f a0
>398270		a1 a2 a3 a3 a4 a5 a6 a6		                      .text  $a1, $a2, $a3, $a3, $a4, $a5, $a6, $a6, $a7, $a8, $a9, $aa, $aa, $ab, $ac, $ad
>398278		a7 a8 a9 aa aa ab ac ad
>398280		ad ae af b0 b0 b1 b2 b3		                      .text  $ad, $ae, $af, $b0, $b0, $b1, $b2, $b3, $b3, $b4, $b5, $b6, $b6, $b7, $b8, $b8
>398288		b3 b4 b5 b6 b6 b7 b8 b8
>398290		b9 ba bb bb bc bd bd be		                      .text  $b9, $ba, $bb, $bb, $bc, $bd, $bd, $be, $bf, $bf, $c0, $c1, $c2, $c2, $c3, $c4
>398298		bf bf c0 c1 c2 c2 c3 c4
>3982a0		c4 c5 c6 c6 c7 c8 c8 c9		                      .text  $c4, $c5, $c6, $c6, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cc, $cc, $cd, $ce, $ce
>3982a8		ca ca cb cc cc cd ce ce
>3982b0		cf d0 d0 d1 d2 d2 d3 d4		                      .text  $cf, $d0, $d0, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d6, $d6, $d7, $d7, $d8, $d9
>3982b8		d4 d5 d6 d6 d7 d7 d8 d9
>3982c0		d9 da db db dc dc dd de		                      .text  $d9, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $e0, $e0, $e1, $e1, $e2, $e3
>3982c8		de df e0 e0 e1 e1 e2 e3
>3982d0		e3 e4 e4 e5 e6 e6 e7 e7		                      .text  $e3, $e4, $e4, $e5, $e6, $e6, $e7, $e7, $e8, $e9, $e9, $ea, $ea, $eb, $ec, $ec
>3982d8		e8 e9 e9 ea ea eb ec ec
>3982e0		ed ed ee ef ef f0 f0 f1		                      .text  $ed, $ed, $ee, $ef, $ef, $f0, $f0, $f1, $f1, $f2, $f3, $f3, $f4, $f4, $f5, $f5
>3982e8		f1 f2 f3 f3 f4 f4 f5 f5
>3982f0		f6 f7 f7 f8 f8 f9 f9 fa		                      .text  $f6, $f7, $f7, $f8, $f8, $f9, $f9, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $ff
>3982f8		fb fb fc fc fd fd fe ff
>398300						.align 256
>398300		1d c8 a7 ac 10 d6 52 7c		RANDOM_LUT_Tbl		    .text  $1d, $c8, $a7, $ac, $10, $d6, $52, $7c, $83, $dd, $ce, $39, $cd, $c5, $3b, $15
>398308		83 dd ce 39 cd c5 3b 15
>398310		22 55 3b 94 e0 33 1f 38						              .text  $22, $55, $3b, $94, $e0, $33, $1f, $38, $87, $12, $31, $65, $89, $27, $88, $42
>398318		87 12 31 65 89 27 88 42
>398320		b2 32 72 84 b2 b2 31 52						              .text  $b2, $32, $72, $84, $b2, $b2, $31, $52, $94, $ce, $56, $ec, $fe, $da, $58, $c9
>398328		94 ce 56 ec fe da 58 c9
>398330		c8 5b 53 2a 08 3b 19 c1						              .text  $c8, $5b, $53, $2a, $08, $3b, $19, $c1, $d0, $10, $2c, $b2, $4b, $ea, $32, $61
>398338		d0 10 2c b2 4b ea 32 61
>398340		da 34 33 8f 2b da 49 89						              .text  $da, $34, $33, $8f, $2b, $da, $49, $89, $a1, $e6, $ca, $2d, $b3, $ce, $b0, $79
>398348		a1 e6 ca 2d b3 ce b0 79
>398350		44 aa 32 82 91 e9 29 16						              .text  $44, $aa, $32, $82, $91, $e9, $29, $16, $5f, $e3, $fb, $bd, $15, $2e, $be, $f5
>398358		5f e3 fb bd 15 2e be f5
>398360		e9 4a e4 2e 60 24 94 35						              .text  $e9, $4a, $e4, $2e, $60, $24, $94, $35, $8d, $8f, $2c, $80, $0a, $5e, $99, $36
>398368		8d 8f 2c 80 0a 5e 99 36
>398370		ac ab 21 26 42 7c 5e bc						              .text  $ac, $ab, $21, $26, $42, $7c, $5e, $bc, $13, $52, $44, $2f, $e3, $ef, $44, $a2
>398378		13 52 44 2f e3 ef 44 a2
>398380		86 c1 9c 47 5f 36 6d 02						              .text  $86, $c1, $9c, $47, $5f, $36, $6d, $02, $be, $23, $02, $58, $0a, $52, $5e, $b4
>398388		be 23 02 58 0a 52 5e b4
>398390		9f 06 08 c9 97 cb 9e dd						              .text  $9f, $06, $08, $c9, $97, $cb, $9e, $dd, $d5, $cf, $3e, $df, $c4, $9e, $da, $bb
>398398		d5 cf 3e df c4 9e da bb
>3983a0		9b 5d c9 f5 d9 c3 7e 87						              .text  $9b, $5d, $c9, $f5, $d9, $c3, $7e, $87, $77, $7d, $b1, $3b, $4a, $68, $35, $6e
>3983a8		77 7d b1 3b 4a 68 35 6e
>3983b0		ee 47 ad 8f fd 73 2e 46						              .text  $ee, $47, $ad, $8f, $fd, $73, $2e, $46, $b5, $8f, $44, $63, $55, $6f, $e1, $50
>3983b8		b5 8f 44 63 55 6f e1 50
>3983c0		f4 b6 a3 4f 68 c4 a5 a4						              .text  $f4, $b6, $a3, $4f, $68, $c4, $a5, $a4, $57, $74, $b9, $bd, $05, $14, $50, $eb
>3983c8		57 74 b9 bd 05 14 50 eb
>3983d0		a5 5c 57 2f 99 dc 2e 8a						              .text  $a5, $5c, $57, $2f, $99, $dc, $2e, $8a, $44, $bc, $ec, $db, $22, $58, $fc, $be
>3983d8		44 bc ec db 22 58 fc be
>3983e0		5f 3f 50 bd 2a 36 ab ae						              .text  $5f, $3f, $50, $bd, $2a, $36, $ab, $ae, $24, $aa, $82, $11, $5c, $9f, $43, $4d
>3983e8		24 aa 82 11 5c 9f 43 4d
>3983f0		8f 0c 20 00 91 b6 45 9e						              .text  $8f, $0c, $20, $00, $91, $b6, $45, $9e, $3e, $3d, $66, $7e, $0a, $1c, $6b, $74
>3983f8		3e 3d 66 7e 0a 1c 6b 74
>398400						.align 16
>398400		00 01 01 00 00 00 00 00		MOUSE_POINTER_PTR     .text $00,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00
>398408		01 01 01 00 00 00 00 00
>398410		01 ff ff 01 00 00 01 01		                      .text $01,$FF,$FF,$01,$00,$00,$01,$01,$FF,$FF,$FF,$01,$00,$00,$00,$00
>398418		ff ff ff 01 00 00 00 00
>398420		01 ff ff ff 01 01 55 ff		                      .text $01,$FF,$FF,$FF,$01,$01,$55,$FF,$01,$55,$FF,$FF,$01,$00,$00,$00
>398428		01 55 ff ff 01 00 00 00
>398430		01 55 ff ff ff ff 01 55		                      .text $01,$55,$FF,$FF,$FF,$FF,$01,$55,$FF,$FF,$FF,$FF,$01,$00,$00,$00
>398438		ff ff ff ff 01 00 00 00
>398440		00 01 55 ff ff ff ff ff		                      .text $00,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$00,$00
>398448		ff ff 01 ff ff 01 00 00
>398450		00 00 01 55 ff ff ff ff		                      .text $00,$00,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$FF,$01,$00,$00
>398458		01 ff ff 01 ff 01 00 00
>398460		00 00 01 01 55 ff ff ff		                      .text $00,$00,$01,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$FF,$01,$00,$00
>398468		ff 01 ff ff ff 01 00 00
>398470		00 00 01 55 01 55 ff ff		                      .text $00,$00,$01,$55,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$01,$00
>398478		ff ff ff ff ff 01 01 00
>398480		00 00 01 55 55 55 ff ff		                      .text $00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01
>398488		ff ff ff ff 01 ff ff 01
>398490		00 00 00 01 55 55 55 ff		                      .text $00,$00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01
>398498		ff ff ff ff ff ff ff 01
>3984a0		00 00 00 00 01 55 55 55		                      .text $00,$00,$00,$00,$01,$55,$55,$55,$55,$55,$01,$FF,$FF,$55,$01,$00
>3984a8		55 55 01 ff ff 55 01 00
>3984b0		00 00 00 00 00 01 01 01		                      .text $00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$55,$FF,$55,$01,$00,$00
>3984b8		01 01 55 ff 55 01 00 00
>3984c0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$55,$01,$00,$00,$00
>3984c8		01 55 55 55 01 00 00 00
>3984d0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$01,$00,$00,$00,$00
>3984d8		01 55 55 01 00 00 00 00
>3984e0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00
>3984e8		00 01 01 00 00 00 00 00
>3984f0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>3984f8		00 00 00 00 00 00 00 00
>3a0000		5c f8 87 3a 5c 07 6e 3a		        .binary "binaries/basic816_3A0000.bin"
>3a0008		5c ef 25 3a 5c 94 01 3a 5c 58 00 3a 5c d6 00 3a
>3a0018		5c fa 02 3a 5c 38 01 3a 5c 53 01 3a 5c 5a 01 3a
>3a0028		0b 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 85 b5
>3a0038		c2 20 a5 a6 d0 06 e2 20 a5 a8 f0 11 c2 10 a4 ab
>3a0048		c4 a9 f0 09 e2 20 a5 b5 97 a6 c8 84 ab 28 2b 60
>3a0058		08 c2 10 e2 20 a9 01 20 1c 00 a2 00 00 a9 00 9f
>3a0068		00 4c 00 e8 e0 00 01 d0 f6 a2 00 00 20 14 00 c9
>3a0078		0d d0 03 4c cf 00 c9 9d d0 08 e0 00 00 f0 ed ca
>3a0088		80 39 c9 1d d0 0e bf 00 4c 00 f0 e0 e0 4f 00 f0
>3a0098		db e8 80 27 c9 08 d0 1a e0 00 00 f0 cf da bf 01
>3a00a8		4c 00 9f 00 4c 00 f0 06 e8 e0 ff 00 d0 f0 fa ca
>3a00b8		80 0e c9 20 90 b6 9f 00 4c 00 e8 20 18 00 80 ac
>3a00c8		a9 08 20 18 00 80 a5 a9 00 20 1c 00 28 60 22 4c
>3a00d8		10 00 60 08 e2 20 20 14 00 c9 11 f0 17 c9 91 f0
>3a00e8		17 c9 9d f0 1b c9 1d f0 13 c9 80 b0 e9 48 20 18
>3a00f8		00 68 28 60 a9 41 80 0a a9 42 80 06 a9 43 80 02
>3a0108		a9 44 48 a9 1b 20 18 00 a9 5b 20 18 00 68 20 18
>3a0118		00 a9 00 80 dd 08 e2 20 af 00 00 af 89 3c f0 08
>3a0128		09 03 8f 00 00 af 80 06 09 01 8f 00 00 af 28 60
>3a0138		08 e2 20 c9 00 f0 08 af 10 00 af 09 01 80 06 af
>3a0148		10 00 af 29 fe 8f 10 00 af 28 60 08 22 84 10 00
>3a0158		28 60 48 da 5a 0b 08 e2 20 c2 10 a2 00 00 a9 20
>3a0168		9f 00 a0 af af 1e 00 00 9f 00 c0 af e8 e0 00 20
>3a0178		d0 ec 08 c2 20 48 a9 00 00 5b 68 28 a2 00 00 a0
>3a0188		00 00 22 84 10 00 28 2b 7a fa 68 60 da 5a 0b 08
>3a0198		08 c2 20 48 a9 00 08 5b 68 28 c2 30 af 0c 00 00
>3a01a8		85 08 e2 20 af 0e 00 00 c2 20 29 ff 00 85 0a af
>3a01b8		11 00 00 8f 08 01 00 af 1c 00 00 3a 8f 0a 01 00
>3a01c8		18 a5 08 6f 0c 01 00 85 08 a5 0a 69 00 00 85 0a
>3a01d8		e2 20 af 0f 00 00 85 8f a0 00 00 a2 00 00 b7 08
>3a01e8		9f 00 4f 00 e8 c8 c4 8f d0 f4 ca bf 00 4f 00 c9
>3a01f8		20 d0 09 a9 00 9f 00 4f 00 ca 10 ef 28 2b 7a fa
>3a0208		60 e2 20 20 54 02 a9 48 8f 0f 00 00 a9 34 8f 13
>3a0218		00 00 a9 20 8f 08 00 af 8f 09 00 af a2 00 00 a9
>3a0228		00 9f 18 f0 3a e8 e0 40 00 d0 f6 a9 80 8f b4 08
>3a0238		00 e2 20 a9 00 8f 89 0f 00 a9 00 8f 00 02 af 8f
>3a0248		0c 02 af 8f 18 02 af 8f 24 02 af 60 08 e2 20 af
>3a0258		0e 08 af 09 08 8f 0e 08 af af 00 08 af 8f 84 e8
>3a0268		af af 02 08 af 8f 85 e8 af a9 03 8f 86 e8 af af
>3a0278		0e 08 af 29 f7 8f 0e 08 af ea ea ea a9 01 8f 86
>3a0288		e8 af 28 60 08 e2 20 48 48 a9 00 22 3c 10 00 68
>3a0298		22 18 10 00 af 89 0f 00 29 01 d0 f8 68 28 60 08
>3a02a8		e2 20 48 48 a9 01 22 3c 10 00 68 22 18 10 00 af
>3a02b8		89 0f 00 29 01 d0 f8 68 28 60 08 c2 20 48 e2 20
>3a02c8		a9 0d 20 18 00 c2 20 68 28 60 08 22 78 10 00 28
>3a02d8		60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a5
>3a02e8		b6 1a 85 b6 cf 13 00 00 90 05 20 14 00 64 b6 2b
>3a02f8		28 60 da 5a 0b 08 08 c2 20 48 a9 00 08 5b 68 28
>3a0308		e2 20 c2 10 8f b5 08 00 af b4 08 00 29 20 f0 07
>3a0318		af b5 08 00 20 28 00 af b4 08 00 29 80 f0 07 af
>3a0328		b5 08 00 20 8c 02 af b4 08 00 29 40 f0 14 af b5
>3a0338		08 00 20 a7 02 af b5 08 00 c9 0d d0 05 a9 0a 20
>3a0348		a7 02 28 2b 7a fa 60 08 e2 20 bd 00 00 f0 06 20
>3a0358		18 00 e8 80 f5 28 60 08 c2 20 48 48 4a 4a 4a 4a
>3a0368		4a 4a 4a 4a 20 79 03 68 29 ff 00 20 79 03 68 28
>3a0378		60 08 c2 20 48 e2 20 48 4a 4a 4a 4a 20 90 03 68
>3a0388		20 90 03 c2 20 68 28 60 08 c2 30 da 29 0f 00 aa
>3a0398		bf 00 d0 3a 20 18 00 fa 28 60 08 c2 30 48 da 5a
>3a03a8		8b 0b c2 30 a3 0b 18 69 03 00 aa e2 20 a9 3a 48
>3a03b8		ab bd 00 00 f0 06 20 8c 02 e8 80 f5 c2 30 2b ab
>3a03c8		7a fa 68 28 60 08 e2 20 c9 5b b0 04 c9 41 b0 0b
>3a03d8		c9 7b b0 04 c9 61 b0 03 28 18 60 28 38 60 08 e2
>3a03e8		20 c9 3a b0 04 c9 30 b0 03 28 18 60 28 38 60 08
>3a03f8		e2 20 c9 3a b0 04 c9 30 b0 13 c9 67 b0 04 c9 61
>3a0408		b0 0b c9 47 b0 04 c9 41 b0 03 28 18 60 28 38 60
>3a0418		08 e2 20 c9 3a b0 04 c9 30 b0 12 c9 67 b0 04 c9
>3a0428		61 b0 0f c9 47 b0 04 c9 41 b0 09 28 60 38 e9 30
>3a0438		80 f9 29 df 38 e9 37 80 f2 08 e2 20 c9 7b b0 06
>3a0448		c9 61 90 02 29 df 28 60 08 e2 20 c2 10 bd 00 00
>3a0458		f0 09 20 41 04 9d 00 00 e8 80 f2 28 60 08 0b 08
>3a0468		c2 20 48 a9 00 08 5b 68 28 c2 20 48 06 23 26 25
>3a0478		a5 23 85 0c a5 25 85 0e 06 0c 26 0e 06 0c 26 0e
>3a0488		18 a5 23 65 0c 85 23 a5 25 65 0e 85 25 68 2b 28
>3a0498		60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 20 a5
>3a04a8		23 8f 1a 01 00 a9 0a 00 8f 18 01 00 af 1c 01 00
>3a04b8		85 23 64 25 af 1e 01 00 85 29 64 2b e2 20 a9 00
>3a04c8		85 27 85 2d 2b 28 60 08 0b 08 c2 20 48 a9 00 08
>3a04d8		5b 68 28 c2 20 a5 23 8f 1a 01 00 a9 64 00 8f 18
>3a04e8		01 00 af 1c 01 00 85 23 64 25 af 1e 01 00 85 29
>3a04f8		64 2b e2 20 a9 00 85 27 85 2d 2b 28 60 08 c2 20
>3a0508		a5 23 d0 08 a5 25 d0 04 28 e2 02 60 28 c2 02 60
>3a0518		08 c2 30 a9 ff ff 85 23 85 25 e2 20 a9 00 85 27
>3a0528		28 60 08 c2 30 a9 00 00 85 23 85 25 e2 20 a9 00
>3a0538		85 27 28 60 08 e2 20 a5 27 c9 00 f0 07 c9 01 d0
>3a0548		05 20 b0 59 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a0558		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 d8 1c
>3a0568		e2 20 dc d4 08 08 e2 20 a5 2d c9 00 f0 37 c9 01
>3a0578		d0 35 c2 20 a5 25 48 a5 23 48 c2 20 a5 29 85 23
>3a0588		a5 2b 85 25 e2 20 a9 01 85 27 20 b0 59 c2 20 a5
>3a0598		23 85 29 a5 25 85 2b e2 20 a9 00 85 2d c2 20 68
>3a05a8		85 23 68 85 25 28 60 08 c2 20 48 a9 00 08 5b 68
>3a05b8		28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 d8
>3a05c8		1c e2 20 dc d4 08 08 e2 20 a5 27 c9 02 d0 02 28
>3a05d8		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f
>3a05e8		d3 08 00 c2 20 29 ff 00 20 d8 1c e2 20 dc d4 08
>3a05f8		08 e2 20 a5 27 c9 00 f0 07 c9 01 d0 0b 20 b0 59
>3a0608		c2 20 a5 25 d0 21 28 60 08 c2 20 48 a9 00 08 5b
>3a0618		68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20
>3a0628		d8 1c e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68
>3a0638		28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 d8
>3a0648		1c e2 20 dc d4 08 08 e2 20 a5 27 c9 00 f0 07 c9
>3a0658		01 d0 11 20 b0 59 a5 26 d0 29 a5 25 d0 25 a5 24
>3a0668		d0 21 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a0678		a9 04 8f d3 08 00 c2 20 29 ff 00 20 d8 1c e2 20
>3a0688		dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a0698		09 8f d3 08 00 c2 20 29 ff 00 20 d8 1c e2 20 dc
>3a06a8		d4 08 08 e2 20 a5 27 c9 01 f0 26 c9 00 f0 1f 08
>3a06b8		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08
>3a06c8		00 c2 20 29 ff 00 20 d8 1c e2 20 dc d4 08 20 aa
>3a06d8		59 28 60 08 e2 20 a5 2d c9 01 f0 26 c9 00 f0 1f
>3a06e8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3
>3a06f8		08 00 c2 20 29 ff 00 20 d8 1c e2 20 dc d4 08 20
>3a0708		0c 07 28 60 c2 20 a5 25 48 a5 23 48 c2 20 a5 29
>3a0718		85 23 a5 2b 85 25 e2 20 a9 00 85 27 20 aa 59 c2
>3a0728		20 a5 23 85 29 a5 25 85 2b e2 20 a9 01 85 2d c2
>3a0738		20 68 85 23 68 85 25 60 08 e2 20 a5 27 c9 00 f0
>3a0748		23 c9 01 f0 2e 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a0758		20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 d8 1c e2
>3a0768		20 dc d4 08 a5 2d c9 00 f0 16 c9 01 d0 d7 20 aa
>3a0778		59 80 0d a5 2d c9 01 f0 07 c9 00 d0 c8 20 0c 07
>3a0788		e2 20 a5 27 28 60 08 e2 20 a5 27 c9 02 d0 25 a5
>3a0798		2d c9 02 f0 24 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a07a8		20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 d8 1c e2
>3a07b8		20 dc d4 08 20 40 07 a5 27 28 60 08 0b 08 c2 20
>3a07c8		48 a9 00 08 5b 68 28 c2 30 64 23 64 25 e2 20 64
>3a07d8		27 a7 00 c9 26 f0 44 e2 20 a7 00 20 e6 03 90 76
>3a07e8		20 65 04 38 e9 30 c2 20 29 ff 00 18 65 23 85 23
>3a07f8		a5 25 69 00 00 85 25 20 97 1f 80 db 08 c2 20 48
>3a0808		a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20
>3a0818		29 ff 00 20 d8 1c e2 20 dc d4 08 20 97 1f a7 00
>3a0828		c9 48 f0 04 c9 68 d0 d4 20 97 1f e2 20 a7 00 20
>3a0838		f7 03 90 22 20 18 04 c2 20 06 23 26 25 06 23 26
>3a0848		25 06 23 26 25 06 23 26 25 29 ff 00 18 65 23 85
>3a0858		23 20 97 1f 80 d5 2b 28 60 08 c2 30 a5 04 f0 1c
>3a0868		38 a5 04 e5 1a a8 e2 20 b7 1a f0 10 c9 20 f0 06
>3a0878		c9 09 f0 02 28 60 88 c0 ff ff d0 ec a9 00 60 08
>3a0888		0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 a5 1a 85
>3a0898		00 e2 20 a5 1c 85 02 20 b8 1f a7 00 20 e6 03 90
>3a08a8		0c 20 c3 07 c2 20 a5 23 85 d7 20 b8 1f c2 20 a5
>3a08b8		00 85 1a e2 20 a5 02 85 1c 20 d5 08 e2 20 20 46
>3a08c8		09 c9 00 f0 05 20 f4 0a 80 f4 2b 28 60 08 c2 20
>3a08d8		a5 1a 85 00 a5 1c 85 02 a2 00 00 e2 20 a0 00 00
>3a08e8		e0 00 00 f0 0d b7 00 f0 53 c9 3a f0 04 c9 20 d0
>3a08f8		33 c8 b7 00 f0 46 c9 52 f0 10 c9 72 d0 26 b7 00
>3a0908		f0 3a c9 52 f0 04 c9 72 d0 1a c8 b7 00 f0 2d c9
>3a0918		45 f0 04 c9 65 d0 0d c8 b7 00 f0 20 c9 4d f0 0a
>3a0928		c9 6d f0 06 e8 20 97 1f 80 b3 a7 00 c9 3a d0 03
>3a0938		20 97 1f a9 03 85 1e a9 91 20 f4 0a 28 60 08 0b
>3a0948		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 7f 85 1e
>3a0958		c2 10 20 a9 0a a5 1e d0 03 4c e9 09 c2 20 a5 1a
>3a0968		85 00 e2 20 a5 1c 85 02 c2 20 64 04 64 06 e2 30
>3a0978		a0 00 b7 00 f0 da c9 91 f0 d6 c8 c4 1e 90 f3 c2
>3a0988		10 a7 00 c9 22 d0 05 20 0b 0a 80 28 a5 1e c9 03
>3a0998		90 19 c2 20 a5 00 c5 1a d0 08 e2 20 a5 02 c5 1c
>3a09a8		f0 09 e2 20 a7 04 20 f3 4e b0 09 e2 20 20 1b 0a
>3a09b8		c9 00 d0 11 c2 20 a5 00 85 04 e2 20 a5 02 85 06
>3a09c8		20 97 1f 80 a9 c9 81 d0 18 20 61 08 c9 00 f0 14
>3a09d8		89 80 10 0b 20 95 0b c9 30 f0 04 a9 af 80 02 a9
>3a09e8		81 2b 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a09f8		a9 02 8f d3 08 00 c2 20 29 ff 00 20 d8 1c e2 20
>3a0a08		dc d4 08 08 e2 20 20 97 1f a7 00 f0 04 c9 22 d0
>3a0a18		f5 28 60 da 5a 08 0b 08 c2 20 48 a9 00 08 5b 68
>3a0a28		28 c2 20 a5 04 d0 0a e2 20 a5 04 d0 04 a9 00 80
>3a0a38		0a e2 20 a7 04 20 f3 4e a9 00 2a 85 28 c2 30 a9
>3a0a48		e9 0b 85 08 e2 20 a9 3a 85 0a a2 80 00 e2 20 a0
>3a0a58		01 00 b7 08 f0 31 c5 1e d0 32 c2 30 a0 02 00 b7
>3a0a68		08 85 0c e2 20 a9 3a 85 0e a5 28 f0 07 a7 0c 20
>3a0a78		f3 4e b0 18 e2 10 a0 00 b7 00 20 41 04 d7 0c d0
>3a0a88		0b c8 c4 1e 90 f2 8a 2b 28 7a fa 60 c2 30 18 a5
>3a0a98		08 69 08 00 85 08 e2 20 a5 0a 69 00 85 0a e8 80
>3a0aa8		ac 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 c2 30
>3a0ab8		a9 e9 0b 85 08 a9 3a 00 85 0a 64 0c e2 20 a0 01
>3a0ac8		00 b7 08 f0 1d c5 1e b0 06 c5 0c 90 02 85 0c c2
>3a0ad8		20 18 a5 08 69 08 00 85 08 a5 0a 69 00 00 85 0a
>3a0ae8		80 da e2 20 a5 0c 85 1e ab 2b 28 60 08 0b 08 c2
>3a0af8		20 48 a9 00 08 5b 68 28 e2 20 87 00 c2 20 18 a5
>3a0b08		00 69 01 00 85 08 a5 02 69 00 00 85 0a e2 10 a4
>3a0b18		1e 88 e2 20 b7 08 87 08 f0 13 c2 20 18 a5 08 69
>3a0b28		01 00 85 08 a5 0a 69 00 00 85 0a 80 e5 2b 28 60
>3a0b38		08 c2 30 29 7f 00 0a 0a 0a 18 69 e9 0b aa 28 60
>3a0b48		08 8b 0b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20
>3a0b58		48 a9 3a 48 ab 68 28 e2 20 c2 10 20 38 0b bd 00
>3a0b68		00 c2 20 29 0f 00 2b ab 28 60 08 8b 0b 08 c2 20
>3a0b78		48 a9 00 08 5b 68 28 08 e2 20 48 a9 3a 48 ab 68
>3a0b88		28 c2 30 20 38 0b bd 04 00 2b ab 28 60 08 8b 0b
>3a0b98		08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 3a
>3a0ba8		48 ab 68 28 e2 20 c2 10 20 38 0b bd 00 00 c2 20
>3a0bb8		29 f0 00 2b ab 28 60 08 8b 0b 08 c2 20 48 a9 00
>3a0bc8		08 5b 68 28 08 e2 20 48 a9 3a 48 ab 68 28 e2 20
>3a0bd8		c2 10 20 38 0b bd 06 00 c2 20 29 ff 00 2b ab 28
>3a0be8		60 03 01 10 d0 56 26 02 00 03 01 12 d0 96 26 02
>3a0bf8		00 02 01 14 d0 cd 26 02 00 02 01 16 d0 04 27 02
>3a0c08		00 02 03 18 d0 0e 27 02 00 00 01 1c d0 21 27 02
>3a0c18		00 04 02 1e d0 df 28 02 00 04 02 21 d0 9f 28 02
>3a0c28		00 04 02 24 d0 5f 28 02 00 04 01 27 d0 9f 27 02
>3a0c38		00 04 01 29 d0 1f 28 02 00 04 01 2b d0 df 27 02
>3a0c48		00 05 03 2d d0 89 27 01 00 06 03 31 d0 5b 27 02
>3a0c58		00 07 02 35 d0 72 27 02 00 ff 01 38 d0 00 00 00
>3a0c68		00 40 01 3a d0 00 00 00 00 20 03 3c d0 9f 3f 00
>3a0c78		00 20 05 40 d0 a4 43 00 00 20 03 46 d0 ef 42 00
>3a0c88		00 20 04 4a d0 8f 42 00 00 20 03 4f d0 86 42 00
>3a0c98		00 20 02 53 d0 1e 42 00 00 50 04 56 d0 00 00 00
>3a0ca8		00 50 04 5b d0 00 00 00 00 20 05 60 d0 61 41 00
>3a0cb8		00 20 06 66 d0 da 41 00 00 20 03 6d d0 b6 3f 00
>3a0cc8		00 50 02 71 d0 00 00 00 00 50 04 74 d0 00 00 00
>3a0cd8		00 20 04 79 d0 aa 40 00 00 20 02 7e d0 b0 3f 00
>3a0ce8		00 20 04 81 d0 b3 3f 00 00 50 05 86 d0 00 00 00
>3a0cf8		00 50 05 8c d0 00 00 00 00 20 04 92 d0 ad 3f 00
>3a0d08		00 20 03 97 d0 e5 42 00 00 20 04 9b d0 80 3f 00
>3a0d18		00 20 04 a0 d0 10 3f 00 00 20 05 a5 d0 a6 3e 00
>3a0d28		00 20 05 ab d0 33 3e 00 00 20 03 b1 d0 2f 3e 00
>3a0d38		00 20 04 b5 d0 10 3d 00 00 20 04 ba d0 22 3e 00
>3a0d48		00 20 07 bf d0 26 3e 00 00 20 03 c7 d0 63 3c 00
>3a0d58		00 20 04 cb d0 cc 3b 00 00 00 01 d0 d0 1f 29 01
>3a0d68		00 30 03 d2 d0 9a 49 00 00 30 04 d6 d0 ea 49 00
>3a0d78		00 30 05 db d0 7b 4a 00 00 30 05 e1 d0 2d 4a 00
>3a0d88		00 30 04 e7 d0 ba 4a 00 00 30 03 ec d0 0f 4b 00
>3a0d98		00 30 03 f0 d0 54 4b 00 00 30 03 f4 d0 dd 4b 00
>3a0da8		00 30 03 f8 d0 66 4c 00 00 30 03 fc d0 c8 4c 00
>3a0db8		00 30 04 00 d1 0c 49 00 00 30 03 05 d1 ab 48 00
>3a0dc8		00 30 04 09 d1 5d 48 00 00 30 03 0e d1 07 48 00
>3a0dd8		00 30 05 12 d1 3e 47 00 00 30 06 18 d1 5d 46 00
>3a0de8		00 30 04 1f d1 a8 45 00 00 10 03 24 d1 2f 4e 00
>3a0df8		00 10 03 28 d1 fa 4d 00 00 10 04 2c d1 e0 69 00
>3a0e08		00 10 04 31 d1 46 4e 00 00 10 03 36 d1 07 67 00
>3a0e18		00 20 05 3a d1 b2 68 00 00 10 04 40 d1 8d 69 00
>3a0e28		00 20 05 45 d1 99 6a 00 00 20 03 4b d1 b8 6b 00
>3a0e38		00 10 04 4f d1 25 6b 00 00 20 06 54 d1 2e 6c 00
>3a0e48		00 20 04 5b d1 52 6d 00 00 10 07 60 d1 f7 4d 00
>3a0e58		00 20 03 68 d1 5a 3b 00 00 20 05 6c d1 6a 3a 00
>3a0e68		00 20 09 72 d1 de 2a 00 00 20 09 7c d1 6b 2a 00
>3a0e78		00 20 0a 86 d1 9b 2a 00 00 20 07 91 d1 d8 29 00
>3a0e88		00 30 08 99 d1 83 44 00 00 20 07 a2 d1 6d 29 00
>3a0e98		00 30 08 aa d1 ed 44 00 00 20 08 b3 d1 23 2c 00
>3a0ea8		00 20 08 bc d1 57 2b 00 00 20 06 c5 d1 5d 2d 00
>3a0eb8		00 20 09 cc d1 65 2e 00 00 20 04 d6 d1 75 2f 00
>3a0ec8		00 20 04 db d1 e6 2f 00 00 20 04 e0 d1 7f 30 00
>3a0ed8		00 20 06 e5 d1 bb 31 00 00 20 08 ec d1 57 32 00
>3a0ee8		00 20 0a f5 d1 a3 32 00 00 20 07 00 d2 d8 33 00
>3a0ef8		00 20 07 08 d2 56 34 00 00 20 08 10 d2 c8 34 00
>3a0f08		00 20 06 19 d2 05 35 00 00 20 07 20 d2 35 38 00
>3a0f18		00 50 06 28 d2 00 00 00 00 50 04 2f d2 00 00 00
>3a0f28		00 20 06 34 d2 4a 3a 00 00 30 03 3b d2 1e 4d 00
>3a0f38		00 30 03 3f d2 52 45 00 00 30 03 43 d2 31 4d 00
>3a0f48		00 30 03 47 d2 47 4d 00 00 30 03 4b d2 5d 4d 00
>3a0f58		00 30 02 4f d2 73 4d 00 00 30 04 52 d2 89 4d 00
>3a0f68		00 30 04 57 d2 9f 4d 00 00 30 04 5c d2 b5 4d 00
>3a0f78		00 30 03 61 d2 cb 4d 00 00 30 03 65 d2 e1 4d 00
>3a0f88		00 00 00 00 00 00 00 00 00 08 0b 08 c2 20 48 a9
>3a0f98		00 08 5b 68 28 c2 30 a9 ff ff 85 ba e2 20 a9 37
>3a0fa8		85 bc c2 20 64 b7 64 bd e2 20 64 b9 64 bf 2b 28
>3a0fb8		60 5a 08 e2 20 85 ea c2 10 86 8f c2 20 a5 0e 48
>3a0fc8		a5 0c 48 a5 12 48 a5 10 48 20 69 10 b0 03 20 ed
>3a0fd8		0f 20 f5 11 c2 20 68 85 10 68 85 12 68 85 0c 68
>3a0fe8		85 0e 28 7a 60 08 0b 08 c2 20 48 a9 00 08 5b 68
>3a0ff8		28 e2 20 a6 8f ca 86 0c e8 c2 30 38 a5 ba e5 0c
>3a1008		85 c0 e2 20 a5 bc e9 00 85 c2 20 f5 11 e2 20 a5
>3a1018		ea a0 00 00 97 c3 a9 00 a0 01 00 97 c3 a0 02 00
>3a1028		97 c3 c2 20 a9 00 00 97 c3 c2 20 18 a5 ba 69 01
>3a1038		00 a0 05 00 97 c3 e2 20 c8 c8 a5 bc 69 00 97 c3
>3a1048		c2 20 a5 c0 85 b7 e2 20 a5 c2 85 b9 c2 20 38 a5
>3a1058		c3 e9 01 00 85 ba e2 20 a5 c5 e9 00 85 bc 2b 28
>3a1068		60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 c2
>3a1078		20 a5 bd 85 c9 e2 20 a5 bf 85 cb a5 c9 d0 17 e2
>3a1088		20 a5 cb d0 11 c2 20 a9 00 00 85 cf e2 20 a9 00
>3a1098		85 d1 2b 28 18 60 c2 20 a0 05 00 b7 c9 85 cc e2
>3a10a8		20 c8 c8 b7 c9 85 ce c2 20 18 a5 c9 65 8f 85 0c
>3a10b8		e2 20 a5 cb 69 00 85 0e c2 20 18 a5 0c 69 08 00
>3a10c8		85 0c e2 20 a5 0e 69 00 85 0e c2 20 a5 0c c5 cc
>3a10d8		d0 28 e2 20 a5 0e c5 ce d0 20 c2 20 a5 cf d0 5d
>3a10e8		e2 20 a5 d1 d0 57 c2 20 a0 02 00 b7 c9 85 bd e2
>3a10f8		20 c8 c8 b7 c9 85 bf 4c a6 11 c2 20 a5 0c 69 08
>3a1108		00 85 10 e2 20 a5 0e 69 00 85 12 e2 20 a5 c6 c5
>3a1118		10 b0 3e 90 08 c2 20 a5 c6 c5 10 b0 34 c2 20 a5
>3a1128		c9 85 cf e2 20 a5 cb 85 d1 c2 20 a0 02 00 b7 cf
>3a1138		85 c9 e2 20 c8 c8 b7 cf 85 cb 4c 83 10 c2 20 a0
>3a1148		02 00 b7 c9 97 cf e2 20 c8 c8 b7 c9 97 cf 4c a6
>3a1158		11 c2 20 a0 05 00 b7 c9 97 0c e2 20 c8 c8 b7 c9
>3a1168		97 0c c2 20 a0 02 00 b7 c9 97 0c e2 20 c8 c8 b7
>3a1178		c9 97 0c c2 20 a5 cf d0 14 e2 20 a5 cf d0 0e c2
>3a1188		20 a5 0c 85 bd e2 20 a5 0e 85 bf 80 11 c2 20 a0
>3a1198		02 00 a5 0c 97 cf e2 20 c8 c8 a5 0e 97 cf c2 20
>3a11a8		a5 c9 85 c3 e2 20 a5 cb 85 c5 c2 20 a5 c3 85 b7
>3a11b8		e2 20 a5 c5 85 b9 c2 20 a0 05 00 a5 0c 97 c3 e2
>3a11c8		20 c8 c8 a5 0e 97 c3 c2 20 a0 02 00 a9 00 00 97
>3a11d8		c3 e2 20 c8 c8 97 c3 e2 20 a5 ea e2 20 a0 00 00
>3a11e8		97 c3 a0 01 00 a9 00 97 c3 2b 28 38 60 08 c2 20
>3a11f8		38 a5 c0 e9 08 00 85 c3 e2 20 a5 c2 e9 00 85 c5
>3a1208		28 60 08 e2 20 a5 c5 f0 04 c9 38 b0 12 c2 20 a5
>3a1218		c3 f0 0c e2 20 a0 01 00 b7 c3 1a 97 c3 28 60 00
>3a1228		ea 08 e2 20 a5 c5 f0 04 c9 38 b0 17 c2 20 a5 c3
>3a1238		f0 11 e2 20 a0 01 00 b7 c3 3a 97 c3 d0 03 20 4d
>3a1248		12 28 60 00 ea 08 c2 20 a5 bd d0 21 e2 20 a5 bf
>3a1258		d0 1b a5 c5 85 bf c2 20 a5 c3 85 bd a9 00 00 a0
>3a1268		02 00 97 c3 c8 c8 e2 20 97 c3 4c 34 13 e2 20 a5
>3a1278		bf c5 c5 90 28 c2 20 a5 bd c5 c3 90 20 c2 20 a5
>3a1288		bd a0 02 00 97 c3 e2 20 c8 c8 a5 bf 97 c3 c2 20
>3a1298		a5 c3 85 bd e2 20 a5 c5 85 bf 4c 34 13 c2 20 a5
>3a12a8		bd 85 08 e2 20 a5 bf 85 0a e2 20 a0 04 00 b7 08
>3a12b8		c5 c8 90 32 d0 0b c2 20 a0 02 00 b7 08 c5 c6 90
>3a12c8		25 c2 20 a0 02 00 b7 08 97 c3 e2 20 c8 c8 b7 08
>3a12d8		97 c3 c2 20 a5 c3 a0 02 00 97 08 e2 20 a5 c5 c8
>3a12e8		c8 97 08 4c 34 13 c2 20 a0 02 00 b7 08 d0 08 e2
>3a12f8		20 c8 c8 b7 08 f0 19 c2 20 a0 02 00 b7 08 85 0c
>3a1308		e2 20 c8 c8 b7 08 85 0a c2 20 a5 0c 85 08 80 99
>3a1318		c2 20 a5 c3 a0 02 00 97 08 e2 20 c8 c8 a5 c5 97
>3a1328		08 a9 00 97 c3 c2 20 a0 02 00 97 c3 20 39 13 28
>3a1338		60 08 c2 20 a5 bd 85 c3 e2 20 a5 bf 85 c5 c2 20
>3a1348		a5 c3 d0 09 e2 20 a5 c5 d0 03 4c dc 13 c2 20 a0
>3a1358		02 00 b7 c3 85 0c e2 20 c8 c8 b7 c3 85 0e c2 20
>3a1368		a0 05 00 b7 c3 85 10 e2 20 c8 c8 b7 c3 85 12 c2
>3a1378		20 a5 0c c5 10 d0 08 e2 20 a5 0e c5 12 f0 1f c2
>3a1388		20 a0 02 00 b7 c3 85 0c e2 20 c8 c8 b7 c3 85 0e
>3a1398		c2 20 a5 0c 85 c3 e2 20 a5 0e 85 c5 80 a0 c2 20
>3a13a8		a0 02 00 b7 c3 85 0c e2 20 c8 c8 b7 c3 85 0e c2
>3a13b8		20 a0 02 00 b7 0c 97 c3 e2 20 c8 c8 b7 0c 97 c3
>3a13c8		c2 20 a0 05 00 b7 0c 97 c3 e2 20 c8 c8 b7 0c 97
>3a13d8		c3 4c 55 13 28 60 08 c2 20 64 16 64 18 28 60 08
>3a13e8		c2 30 a5 16 d0 16 a5 18 d0 12 e2 20 64 16 a5 e2
>3a13f8		1a 1a 85 17 a5 e3 85 18 64 19 80 07 c2 20 a5 17
>3a1408		1a 85 17 c2 20 a5 bb 3a c5 17 f0 02 b0 1f 08 c2
>3a1418		20 48 a9 00 08 5b 68 28 e2 20 a9 03 8f d3 08 00
>3a1428		c2 20 29 ff 00 20 d8 1c e2 20 dc d4 08 28 60 c9
>3a1438		00 d0 05 c0 01 00 f0 05 09 30 97 16 c8 60 08 c2
>3a1448		30 64 0c a5 25 10 1a 18 a5 23 49 ff ff 69 01 00
>3a1458		85 23 a5 25 49 ff ff 69 00 00 85 25 a9 ff ff 85
>3a1468		0c 64 10 64 12 64 14 a2 1f 00 f8 06 23 26 25 a5
>3a1478		10 65 10 85 10 a5 12 65 12 85 12 a5 14 65 14 85
>3a1488		14 ca 10 e7 d8 e2 20 20 e7 13 a0 00 00 a5 0c f0
>3a1498		04 a9 2d 80 02 a9 20 97 16 c8 a2 05 00 b5 10 29
>3a14a8		f0 4a 4a 4a 4a 20 37 14 b5 10 29 0f 20 37 14 ca
>3a14b8		10 eb c0 01 00 d0 0c a9 20 87 16 a0 01 00 a9 30
>3a14c8		97 16 c8 a9 00 97 16 28 60 00 ea 08 e2 20 c2 10
>3a14d8		a0 00 00 bd 00 00 f0 04 e8 c8 80 f7 28 60 08 0b
>3a14e8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 c2 10 a0 00
>3a14f8		00 b7 23 d0 04 b7 29 f0 25 b7 23 d7 29 90 12 d0
>3a1508		03 c8 80 ed c2 20 a9 01 00 85 23 e2 20 64 25 80
>3a1518		15 c2 20 a9 ff ff 85 23 e2 20 85 25 80 08 c2 20
>3a1528		64 23 e2 20 64 25 e2 20 a9 00 85 27 2b 28 60 08
>3a1538		0b 8b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 c2 10
>3a1548		08 c2 20 48 e2 20 a5 25 48 ab c2 20 68 28 a6 23
>3a1558		20 d3 14 84 0c 08 c2 20 48 e2 20 a5 2b 48 ab c2
>3a1568		20 68 28 a6 29 20 d3 14 c2 20 98 38 65 0c aa e2
>3a1578		20 a9 02 20 b9 0f c2 20 a5 b7 85 08 e2 20 a5 b9
>3a1588		85 0a a0 00 00 08 c2 20 48 e2 20 a5 25 48 ab c2
>3a1598		20 68 28 a6 23 bd 00 00 f0 06 97 08 e8 c8 80 f5
>3a15a8		e2 20 08 c2 20 48 e2 20 a5 2b 48 ab c2 20 68 28
>3a15b8		a6 29 bd 00 00 97 08 f0 04 e8 c8 80 f5 c2 20 a5
>3a15c8		08 85 23 e2 20 a5 0a 85 25 a9 02 85 27 ab 2b 28
>3a15d8		60 da 5a 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28
>3a15e8		c2 20 a5 0a 48 a5 08 48 c2 30 08 c2 20 48 e2 20
>3a15f8		a5 25 48 ab c2 20 68 28 a6 23 20 d3 14 98 aa e8
>3a1608		e2 20 a9 02 20 b9 0f c2 20 a5 c0 85 08 a5 c2 85
>3a1618		0a a0 00 00 e2 20 b7 23 97 08 f0 03 c8 80 f7 c2
>3a1628		20 a5 08 85 23 a5 0a 85 25 c2 20 68 85 08 68 85
>3a1638		0a ab 2b 28 7a fa 60 08 e2 20 c2 10 a0 00 00 b7
>3a1648		23 f0 05 c8 80 f9 84 92 c2 30 c4 29 90 13 f0 11
>3a1658		a5 8f 30 0d f0 0b c4 8f b0 12 a5 29 d0 0e 4c bd
>3a1668		16 20 e7 13 e2 20 a9 00 87 16 80 39 20 e7 13 c2
>3a1678		30 18 a5 23 65 29 85 23 a5 25 69 00 00 85 25 a0
>3a1688		00 00 e2 20 a7 23 97 16 f0 1b c2 20 18 a5 23 69
>3a1698		01 00 85 23 a5 25 69 00 00 85 25 c8 c4 8f d0 e2
>3a16a8		a9 00 00 97 16 c2 20 a5 16 85 23 a5 18 85 25 e2
>3a16b8		20 a9 02 85 27 28 60 08 c2 30 20 e6 14 a5 23 c9
>3a16c8		ff ff d0 05 20 18 05 80 03 20 2a 05 28 60 08 c2
>3a16d8		30 20 e6 14 a5 23 c9 01 00 d0 05 20 18 05 80 03
>3a16e8		20 2a 05 28 60 08 c2 30 20 e6 14 a5 23 c9 00 00
>3a16f8		d0 05 20 18 05 80 03 20 2a 05 28 60 08 c2 30 20
>3a1708		e6 14 a5 23 c9 00 00 f0 05 20 18 05 80 03 20 2a
>3a1718		05 28 60 08 c2 30 20 e6 14 a5 23 c9 ff ff f0 05
>3a1728		20 18 05 80 03 20 2a 05 28 60 08 c2 30 20 e6 14
>3a1738		a5 23 c9 01 00 f0 05 20 18 05 80 03 20 2a 05 28
>3a1748		60 48 5a 0b 08 08 c2 20 48 a9 00 08 5b 68 28 c2
>3a1758		30 a9 00 00 85 00 85 1a a9 36 00 85 02 85 1c ad
>3a1768		8a 0f 30 20 a0 02 00 b7 1a f0 0f c5 55 90 10 c5
>3a1778		59 f0 02 b0 05 20 ab 17 80 e5 28 2b 7a 68 60 20
>3a1788		74 20 80 db 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a1798		a9 01 8f d3 08 00 c2 20 29 ff 00 20 d8 1c e2 20
>3a17a8		dc d4 08 08 c2 30 85 23 64 25 20 46 14 a5 16 1a
>3a17b8		85 23 a5 18 85 25 20 20 44 18 a5 1a 69 04 00 85
>3a17c8		00 a5 1c 69 00 00 85 02 e2 20 a9 20 20 18 00 c2
>3a17d8		20 20 ea 17 90 fb e2 20 a9 0d 20 18 00 20 74 20
>3a17e8		28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08
>3a17f8		e2 20 48 a9 00 48 ab 68 28 e2 20 c2 10 a7 00 f0
>3a1808		3a 30 05 20 18 00 80 29 c2 20 29 7f 00 0a 0a 0a
>3a1818		18 69 e9 0b 85 08 a9 3a 00 69 00 00 85 0a 08 e2
>3a1828		20 48 a9 3a 48 ab 68 28 a0 02 00 b7 08 aa 20 4f
>3a1838		03 c2 20 20 97 1f ab 2b 28 18 60 ab 2b 28 38 60
>3a1848		08 c2 20 a9 ff 6f 85 1f a9 ff 7f 85 21 a9 ff ff
>3a1858		85 23 85 25 85 29 85 2b e2 20 85 27 85 2d 28 60
>3a1868		08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20
>3a1878		48 a9 00 48 ab 68 28 c2 30 5a a4 1f bd 00 00 99
>3a1888		00 00 bd 02 00 99 02 00 e2 20 bd 04 00 99 04 00
>3a1898		c2 20 38 98 e9 05 00 85 1f 7a ab 2b 28 60 08 0b
>3a18a8		8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9
>3a18b8		00 48 ab 68 28 c2 30 5a 18 a5 1f 69 05 00 85 1f
>3a18c8		a8 b9 00 00 9d 00 00 b9 02 00 9d 02 00 e2 20 b9
>3a18d8		04 00 9d 04 00 bd 00 00 7a ab 2b 28 60 08 0b 8b
>3a18e8		08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00
>3a18f8		48 ab 68 28 e2 20 c2 10 5a a4 21 99 00 00 88 84
>3a1908		21 7a ab 2b 28 60 08 0b 8b 08 c2 20 48 a9 00 08
>3a1918		5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 e2 20 c2
>3a1928		10 5a a4 21 c8 84 21 b9 00 00 c2 20 29 ff 00 7a
>3a1938		ab 2b 28 60 08 e2 20 a9 01 20 e5 18 28 60 5a 08
>3a1948		8b 08 e2 20 48 a9 00 48 ab 68 28 e2 20 a4 21 b9
>3a1958		01 00 c9 01 d0 08 c2 20 e6 21 ab 28 7a 60 08 c2
>3a1968		20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00
>3a1978		c2 20 29 ff 00 20 d8 1c e2 20 dc d4 08 48 08 0b
>3a1988		8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9
>3a1998		00 48 ab 68 28 e2 20 a4 21 c0 ff 7f f0 11 20 48
>3a19a8		0b 85 0c b9 01 00 20 48 0b c5 0c f0 02 90 08 c2
>3a19b8		20 ab 2b 28 68 18 60 c2 20 ab 2b 28 68 38 60 4c
>3a19c8		c3 07 08 e2 20 a9 00 8f 00 4d 00 a2 01 00 20 86
>3a19d8		1b 20 f8 05 c2 20 a5 23 9f 00 4d 00 e2 20 af 00
>3a19e8		4d 00 1a 30 3e 8f 00 4d 00 e8 e8 20 b8 1f e2 20
>3a19f8		a7 00 c9 90 f0 09 c9 2c d0 0a 20 97 1f 80 cf 20
>3a1a08		97 1f 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a1a18		a9 02 8f d3 08 00 c2 20 29 ff 00 20 d8 1c e2 20
>3a1a28		dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a1a38		0a 8f d3 08 00 c2 20 29 ff 00 20 d8 1c e2 20 dc
>3a1a48		d4 08 08 20 c6 51 90 23 e2 20 a5 ea 29 80 d0 06
>3a1a58		20 c7 4f 4c 71 1a e2 20 a9 8f 20 a4 20 20 3c 19
>3a1a68		20 ca 19 20 7d 66 20 46 19 28 60 08 c2 20 48 a9
>3a1a78		00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29
>3a1a88		ff 00 20 d8 1c e2 20 dc d4 08 08 0b 08 c2 20 48
>3a1a98		a9 00 08 5b 68 28 e2 20 c2 10 20 97 1f a0 00 00
>3a1aa8		b7 00 f0 24 c9 22 f0 03 c8 80 f5 84 0c e2 20 a9
>3a1ab8		02 a6 0c e8 20 e7 13 a0 00 00 c4 0c f0 29 a7 00
>3a1ac8		97 16 c8 20 97 1f 80 f2 08 c2 20 48 a9 00 08 5b
>3a1ad8		68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20
>3a1ae8		d8 1c e2 20 dc d4 08 a9 00 97 16 c2 20 a5 16 85
>3a1af8		23 a5 18 85 25 a9 02 00 85 27 20 97 1f 2b 28 60
>3a1b08		08 e2 20 a7 00 c2 20 29 ff 00 20 72 0b 85 2f 20
>3a1b18		3c 19 08 e2 20 48 a9 00 48 ab 68 28 20 2c 1b 20
>3a1b28		46 19 28 60 20 97 1f 6c 2f 08 48 08 0b 8b 08 c2
>3a1b38		20 48 a9 00 08 5b 68 28 c2 30 20 0e 19 89 80 00
>3a1b48		f0 37 48 20 72 0b 85 2f 68 20 bf 0b c9 01 00 f0
>3a1b58		08 c2 30 a2 29 08 20 a6 18 c2 30 a2 23 08 20 a6
>3a1b68		18 08 e2 20 48 a9 00 48 ab 68 28 20 83 1b a2 23
>3a1b78		08 20 68 18 ab 2b 28 68 60 00 ea 6c 2f 08 08 08
>3a1b88		c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48
>3a1b98		ab 68 28 c2 10 da e2 20 a7 00 d0 03 4c 49 1c 30
>3a1ba8		33 c9 20 d0 03 4c 43 1c c9 3a b0 04 c9 30 b0 56
>3a1bb8		c9 26 f0 52 c9 22 d0 03 4c 5c 1c c9 5b b0 07 c9
>3a1bc8		41 90 03 4c 68 1c c9 7b b0 07 c9 61 90 03 4c 68
>3a1bd8		1c 4c 49 1c c9 8f f0 40 c9 90 f0 41 20 95 0b c9
>3a1be8		30 d0 0c 20 08 1b a2 23 08 20 68 18 4c 9e 1b c9
>3a1bf8		00 d0 4e a7 00 a6 21 e0 ff 7f f0 05 20 85 19 b0
>3a1c08		12 20 e5 18 80 35 c2 20 20 e8 57 a2 23 08 20 68
>3a1c18		18 80 83 20 32 1b 80 dd 20 e5 18 80 1e e2 20 a4
>3a1c28		21 c0 ff 7f f0 46 a4 21 b9 01 00 c9 01 f0 3d c9
>3a1c38		8f f0 05 20 32 1b 80 ee 20 0e 19 20 97 1f 4c 9e
>3a1c48		1b a6 21 e0 ff 7f b0 24 bd 01 00 c9 01 f0 1d 20
>3a1c58		32 1b 80 ed 20 92 1a a2 23 08 20 68 18 4c 9e 1b
>3a1c68		20 4a 1a a2 23 08 20 68 18 4c 9e 1b a2 23 08 20
>3a1c78		a6 18 fa 28 60 08 0b 8b 08 e2 20 48 a9 00 48 ab
>3a1c88		68 28 08 c2 20 48 a9 00 08 5b 68 28 c2 30 a9 fd
>3a1c98		5f 85 33 ab 2b 28 60 08 0b 08 c2 20 48 a9 00 08
>3a1ca8		5b 68 28 c2 30 92 33 c6 33 c6 33 2b 28 60 08 c2
>3a1cb8		30 29 ff 00 20 9f 1c 28 60 08 0b 08 c2 20 48 a9
>3a1cc8		00 08 5b 68 28 c2 30 e6 33 e6 33 b2 33 2b 28 60
>3a1cd8		8b 0b 08 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20
>3a1ce8		48 a9 00 48 ab 68 28 c2 20 85 23 a9 00 00 85 25
>3a1cf8		e2 20 a9 00 85 27 85 ea a9 3a 85 e9 c2 20 a9 32
>3a1d08		1d 85 e7 20 29 51 c2 20 a5 d7 85 23 a5 d9 85 25
>3a1d18		e2 20 a9 00 85 27 85 ea a9 3a 85 e9 c2 20 a9 36
>3a1d28		1d 85 e7 20 29 51 28 2b ab 60 45 52 52 00 45 52
>3a1d38		4c 00 e2 20 c2 10 20 c2 02 af d3 08 00 0a c2 20
>3a1d48		29 ff 00 a8 08 e2 20 48 a9 3a 48 ab 68 28 be 8c
>3a1d58		1d 20 4f 03 c2 20 a5 d7 f0 27 a2 bc 1d 20 4f 03
>3a1d68		08 e2 20 48 a9 00 48 ab 68 28 c2 20 af d7 08 00
>3a1d78		8f 23 08 00 a9 00 00 8f 25 08 00 20 40 44 20 c2
>3a1d88		02 4c 37 26 c0 1d c3 1d c9 1d d6 1d e4 1d f2 1d
>3a1d98		05 1e 1b 1e 2b 1e 3a 1e 47 1e 58 1e 67 1e 74 1e
>3a1da8		82 1e 91 1e a2 1e bb 1e cf 1e e3 1e f9 1e 0d 1f
>3a1db8		28 1f 40 1f 20 61 74 00 4f 4b 00 42 72 65 61 6b
>3a1dc8		00 53 79 6e 74 61 78 20 65 72 72 6f 72 00 4f 75
>3a1dd8		74 20 6f 66 20 6d 65 6d 6f 72 79 00 54 79 70 65
>3a1de8		20 6d 69 73 6d 61 74 63 68 00 56 61 72 69 61 62
>3a1df8		6c 65 20 6e 6f 74 20 66 6f 75 6e 64 00 4c 69 6e
>3a1e08		65 20 6e 75 6d 62 65 72 20 6e 6f 74 20 66 6f 75
>3a1e18		6e 64 00 53 74 61 63 6b 20 75 6e 64 65 72 66 6c
>3a1e28		6f 77 00 53 74 61 63 6b 20 6f 76 65 72 66 6c 6f
>3a1e38		77 00 4f 75 74 20 6f 66 20 72 61 6e 67 65 00 49
>3a1e48		6c 6c 65 67 61 6c 20 61 72 67 75 6d 65 6e 74 00
>3a1e58		46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 00 4e
>3a1e68		6f 74 20 61 20 6e 75 6d 62 65 72 00 4d 61 74 68
>3a1e78		20 6f 76 65 72 66 6c 6f 77 00 4d 61 74 68 20 75
>3a1e88		6e 64 65 72 66 6c 6f 77 00 44 69 76 69 73 69 6f
>3a1e98		6e 20 62 79 20 7a 65 72 6f 00 55 6e 61 62 6c 65
>3a1ea8		20 74 6f 20 72 65 61 64 20 64 69 72 65 63 74 6f
>3a1eb8		72 79 00 55 6e 61 62 6c 65 20 74 6f 20 6c 6f 61
>3a1ec8		64 20 66 69 6c 65 00 55 6e 61 62 6c 65 20 74 6f
>3a1ed8		20 73 61 76 65 20 66 69 6c 65 00 55 6e 61 62 6c
>3a1ee8		65 20 74 6f 20 64 65 6c 65 74 65 20 66 69 6c 65
>3a1ef8		00 43 6f 75 6c 64 20 6e 6f 74 20 66 69 6e 64 20
>3a1f08		66 69 6c 65 00 43 6f 75 6c 64 20 6e 6f 74 20 75
>3a1f18		70 64 61 74 65 20 64 69 72 65 63 74 6f 72 79 00
>3a1f28		43 6f 75 6c 64 20 6e 6f 74 20 63 6f 70 79 20 74
>3a1f38		68 65 20 66 69 6c 65 00 41 72 67 75 6d 65 6e 74
>3a1f48		20 6f 75 74 73 69 64 65 20 64 6f 6d 61 69 6e 00
>3a1f58		08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 00
>3a1f68		85 d2 2b 28 60 0b 08 08 c2 20 48 a9 00 08 5b 68
>3a1f78		28 08 c2 20 a9 3a 1d 8f d4 08 00 e2 20 a9 3a 8f
>3a1f88		d6 08 00 28 20 e5 42 20 26 3e 64 31 28 2b 60 08
>3a1f98		0b 08 c2 20 48 a9 00 08 5b 68 28 c2 20 18 a5 00
>3a1fa8		69 01 00 85 00 e2 20 a5 02 69 00 85 02 2b 28 60
>3a1fb8		08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a7 00
>3a1fc8		f0 0f c9 20 f0 06 c9 09 f0 02 80 05 20 97 1f 80
>3a1fd8		ed 2b 28 60 08 e2 20 a7 00 f0 09 c9 3a f0 05 20
>3a1fe8		97 1f 80 f3 28 60 08 e2 20 64 36 a7 00 f0 19 c5
>3a1ff8		37 f0 2c c9 9b f0 1e c9 9f f0 1a c9 9e f0 1a c9
>3a2008		a0 f0 16 20 97 1f 80 e3 20 74 20 c2 20 a5 d7 f0
>3a2018		1d e2 20 80 d6 e6 36 80 ea c6 36 30 30 80 e4 a5
>3a2028		35 30 06 a5 36 f0 02 80 da 20 97 1f 28 60 08 c2
>3a2038		20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00
>3a2048		c2 20 29 ff 00 20 d8 1c e2 20 dc d4 08 08 c2 20
>3a2058		48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2
>3a2068		20 29 ff 00 20 d8 1c e2 20 dc d4 08 08 c2 30 a0
>3a2078		00 00 b7 1a 85 0c 18 a5 1a 65 0c 85 1a a5 1c 69
>3a2088		00 00 85 1c a0 02 00 b7 1a 85 d7 18 a5 1a 69 04
>3a2098		00 85 00 a5 1c 69 00 00 85 02 28 60 08 e2 20 48
>3a20a8		20 b8 1f 68 e2 20 c7 00 d0 08 20 97 1f 20 b8 1f
>3a20b8		28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>3a20c8		8f d3 08 00 c2 20 29 ff 00 20 d8 1c e2 20 dc d4
>3a20d8		08 08 e2 20 20 b8 1f e2 20 a7 00 f0 10 c9 3a f0
>3a20e8		0c c5 37 f0 05 20 97 1f 80 ef 28 38 60 28 18 60
>3a20f8		5a 08 e2 20 a0 00 00 b7 00 f0 0d c9 3a f0 07 c9
>3a2108		20 d0 05 c8 80 f1 a9 00 28 7a 60 08 0b 8b 08 c2
>3a2118		20 48 a9 00 08 5b 68 28 20 48 18 e2 20 a9 00 85
>3a2128		dc ad 8a 0f 30 4b a7 00 c9 3a d0 03 20 97 1f 20
>3a2138		b8 1f a7 00 d0 03 4c c3 21 20 cd 03 b0 52 a7 00
>3a2148		10 10 20 95 0b 85 0c c9 20 d0 03 4c b1 21 a5 d2
>3a2158		f0 51 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>3a2168		8f d3 08 00 c2 20 29 ff 00 20 d8 1c e2 20 dc d4
>3a2178		08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 01 8f
>3a2188		d3 08 00 c2 20 29 ff 00 20 d8 1c e2 20 dc d4 08
>3a2198		20 ef 42 4c c3 21 08 e2 20 48 a9 00 48 ab 68 28
>3a21a8		6c 2f 08 a5 0c c9 10 d0 a9 a7 00 20 72 0b c2 20
>3a21b8		85 2f 20 48 18 20 97 1f 20 9e 21 ab 2b 28 60 08
>3a21c8		58 20 58 1f 20 7d 1c e2 20 9c 8a 0f c2 20 a5 1a
>3a21d8		85 00 a5 1c 85 02 4c 08 22 08 c2 20 a0 02 00 b7
>3a21e8		1a 85 d7 20 de 13 e2 20 a5 dc c9 03 f0 12 c2 20
>3a21f8		18 a5 1a 69 04 00 85 00 e2 20 a5 1c 69 00 85 02
>3a2208		c2 20 20 13 21 e2 20 a5 dc c9 03 f0 f3 c9 00 d0
>3a2218		31 e2 20 20 b8 1f a7 00 f0 28 c9 3a f0 1f 08 c2
>3a2228		20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00
>3a2238		c2 20 29 ff 00 20 d8 1c e2 20 dc d4 08 20 97 1f
>3a2248		80 be 28 60 08 58 e2 20 a9 80 85 d2 9c 8a 0f 20
>3a2258		7d 1c c2 30 64 31 a0 02 00 b7 1a f0 29 20 e1 21
>3a2268		e2 20 a5 dc c9 01 f0 1e c9 02 f0 ea c9 03 f0 e6
>3a2278		c2 20 a0 00 00 18 a5 1a 77 1a 85 1a e2 20 a5 1c
>3a2288		69 00 85 1c 80 d0 e2 20 a9 00 85 d2 28 60 08 c2
>3a2298		30 c2 20 a9 00 00 85 08 a9 36 00 85 0a c2 20 a0
>3a22a8		02 00 b7 08 f0 31 c5 23 f0 1e b0 2b c2 20 a0 00
>3a22b8		00 18 a5 08 77 08 85 0c e2 20 a5 0a 69 00 85 0a
>3a22c8		c2 20 a5 0c 85 08 80 d7 c2 20 a5 08 85 1a e2 20
>3a22d8		a5 0a 85 1c 28 38 60 28 18 60 08 e2 20 a7 0c 87
>3a22e8		08 c2 20 a5 0c c5 00 d0 08 e2 20 a5 0e c5 02 f0
>3a22f8		26 c2 20 18 a5 0c 69 01 00 85 0c e2 20 a5 0e 69
>3a2308		00 85 0e c2 20 18 a5 08 69 01 00 85 08 e2 20 a5
>3a2318		0a 69 00 85 0a 80 c4 28 60 08 e2 20 a7 0c 87 08
>3a2328		c2 20 a5 0c c5 00 d0 06 a5 0e c5 02 f0 26 c2 20
>3a2338		38 a5 0c e9 01 00 85 0c e2 20 a5 0e e9 00 85 0e
>3a2348		c2 20 38 a5 08 e9 01 00 85 08 e2 20 a5 0a e9 00
>3a2358		85 0a 80 c6 28 60 08 a0 00 00 c2 20 18 a5 08 77
>3a2368		08 85 0c e2 20 a5 0a 69 00 85 0e c2 20 18 a5 d9
>3a2378		69 04 00 85 00 e2 20 a5 db 69 00 85 02 a0 00 00
>3a2388		c2 20 38 a5 d9 f7 08 85 d9 e2 20 a5 db e9 00 85
>3a2398		db 20 e2 22 20 e5 42 28 60 08 08 c2 20 48 a9 00
>3a23a8		08 5b 68 28 c2 30 a0 02 00 97 d9 18 a5 d9 69 04
>3a23b8		00 85 08 e2 20 a5 db 69 00 85 0a e2 20 a0 00 00
>3a23c8		b7 1a 97 08 f0 03 c8 80 f7 c2 20 98 18 69 05 00
>3a23d8		85 0c c2 20 a0 00 00 a5 0c 97 d9 c2 20 18 a5 d9
>3a23e8		65 0c 85 0c e2 20 a5 db 69 00 85 db c2 20 a5 0c
>3a23f8		85 d9 c2 20 a0 00 00 a9 00 00 97 d9 c8 c0 05 00
>3a2408		d0 f8 20 e5 42 28 60 0b 08 08 c2 20 48 a9 00 08
>3a2418		5b 68 28 c2 30 a9 00 00 85 08 a9 36 00 85 0a a0
>3a2428		02 00 b7 08 f0 1d c5 d7 f0 25 b0 1d a0 00 00 18
>3a2438		a5 08 77 08 85 0c a5 0a 69 00 00 85 0a a5 0c 85
>3a2448		08 80 dc a9 00 00 28 2b 60 a9 01 00 28 2b 60 a9
>3a2458		02 00 28 2b 60 08 c2 30 a9 05 00 85 10 a0 00 00
>3a2468		e2 20 b7 1a f0 07 c2 20 e6 10 c8 80 f3 c2 20 a5
>3a2478		08 85 00 a5 0a 85 02 18 a5 d9 69 04 00 85 0c a5
>3a2488		db 69 00 00 85 0e 18 a5 d9 65 10 85 d9 a5 db 69
>3a2498		00 00 85 db 18 a5 d9 69 04 00 85 08 a5 db 69 00
>3a24a8		00 85 0a 20 21 23 c2 20 a5 10 a0 00 00 97 00 a5
>3a24b8		d7 a0 02 00 97 00 18 a5 00 69 04 00 85 00 a5 02
>3a24c8		69 00 00 85 02 a0 00 00 e2 20 b7 1a 97 00 f0 03
>3a24d8		c8 80 f7 20 e5 42 28 60 08 c2 30 85 d7 20 0f 24
>3a24e8		c9 00 00 f0 2c c9 01 00 f0 22 c2 20 a5 08 48 a5
>3a24f8		0a 48 20 5e 23 68 85 0a 68 85 08 a5 1a 85 00 a5
>3a2508		1c 85 02 20 b8 1f e2 20 a7 00 f0 0a 20 5d 24 80
>3a2518		05 a5 d7 20 a1 23 28 60 0b 08 08 c2 20 48 a9 00
>3a2528		08 5b 68 28 e2 20 c2 10 a2 00 00 bd 00 4f f0 03
>3a2538		e8 80 f8 86 0c c2 30 8a c9 02 00 90 12 3a 18 69
>3a2548		00 4f aa 18 65 8f a8 a5 0c 3a 8b 44 00 00 ab c2
>3a2558		20 a6 55 a0 00 4f a5 8f 8b 54 00 3a ab e2 20 a5
>3a2568		0c c9 02 90 18 a6 8f a9 22 9d 00 4f e8 bd 00 4f
>3a2578		d0 fa a9 22 9d 00 4f a9 00 e8 9d 00 4f 28 2b 60
>3a2588		da 5a 8b 0b 08 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a2598		20 c2 10 ad 00 4f c9 23 f0 0a c9 7c f0 17 28 2b
>3a25a8		ab 7a fa 60 c2 20 a9 03 00 85 8f a9 ce 25 85 55
>3a25b8		20 20 25 80 e9 c2 20 a9 04 00 85 8f a9 d2 25 85
>3a25c8		55 20 20 25 80 d8 44 49 52 00 42 52 55 4e 00 8b
>3a25d8		08 20 1d 01 08 e2 20 48 a9 3a 48 ab 68 28 a2 69
>3a25e8		d2 20 4f 03 28 ab 60 08 e2 30 a9 01 20 1c 00 20
>3a25f8		db 00 f0 06 c9 0d f0 02 80 f5 28 60 0b 08 08 c2
>3a2608		20 48 a9 00 08 5b 68 28 c2 30 64 d7 a9 00 4f 85
>3a2618		1a a9 00 00 85 1c 20 87 08 c2 20 a5 d7 d0 05 20
>3a2628		c7 21 80 07 20 e0 24 28 2b 38 60 28 2b 18 60 c2
>3a2638		30 a2 ff fe 9a 20 d7 25 20 08 00 20 0c 00 a9 00
>3a2648		00 20 1c 00 20 88 25 20 04 26 b0 ec 80 e7 08 e2
>3a2658		20 20 8e 07 c9 00 f0 2c c9 01 f0 2d c9 02 f0 1f
>3a2668		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3
>3a2678		08 00 c2 20 29 ff 00 20 d8 1c e2 20 dc d4 08 20
>3a2688		37 15 80 08 20 18 52 80 03 20 87 54 28 60 08 e2
>3a2698		20 20 40 07 c9 00 f0 23 c9 01 f0 24 08 c2 20 48
>3a26a8		a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20
>3a26b8		29 ff 00 20 d8 1c e2 20 dc d4 08 20 2a 52 80 03
>3a26c8		20 7c 54 28 60 08 e2 20 20 40 07 c9 00 f0 23 c9
>3a26d8		01 f0 24 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a26e8		04 8f d3 08 00 c2 20 29 ff 00 20 d8 1c e2 20 dc
>3a26f8		d4 08 20 3c 52 80 03 20 1d 55 28 60 20 aa 06 20
>3a2708		db 06 20 d2 54 60 a5 23 8f 1a 01 00 a5 29 8f 18
>3a2718		01 00 af 1e 01 00 85 23 60 08 c2 30 48 20 aa 06
>3a2728		a5 2d c9 00 00 d0 0d a5 2b d0 09 da a6 29 20 f0
>3a2738		61 fa 80 1c 20 db 06 c2 20 a5 2b 48 a5 29 48 20
>3a2748		7b 60 c2 20 68 85 29 68 85 2b 20 1d 55 20 5a 62
>3a2758		68 28 60 08 20 3c 05 20 6d 05 c2 20 a5 23 25 29
>3a2768		85 23 a5 25 25 2b 85 25 28 60 08 20 3c 05 20 6d
>3a2778		05 c2 20 a5 23 05 29 85 23 a5 25 05 2b 85 25 28
>3a2788		60 08 20 3c 05 c2 20 a5 23 49 ff ff 85 23 a5 25
>3a2798		49 ff ff 85 25 28 60 08 e2 20 20 8e 07 c9 00 f0
>3a27a8		2c c9 01 f0 2d c9 02 f0 1f 08 c2 20 48 a9 00 08
>3a27b8		5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00
>3a27c8		20 d8 1c e2 20 dc d4 08 20 bf 16 80 08 20 3d 53
>3a27d8		80 03 20 b2 5a 28 60 08 e2 20 20 8e 07 c9 00 f0
>3a27e8		2c c9 01 f0 2d c9 02 f0 1f 08 c2 20 48 a9 00 08
>3a27f8		5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00
>3a2808		20 d8 1c e2 20 dc d4 08 20 d6 16 80 08 20 5e 53
>3a2818		80 03 20 c7 5a 28 60 08 e2 20 20 8e 07 c9 00 f0
>3a2828		2c c9 01 f0 2d c9 02 f0 1f 08 c2 20 48 a9 00 08
>3a2838		5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00
>3a2848		20 d8 1c e2 20 dc d4 08 20 ed 16 80 08 20 8b 53
>3a2858		80 03 20 dc 5a 28 60 08 e2 20 20 8e 07 c9 00 f0
>3a2868		2c c9 01 f0 2d c9 02 f0 1f 08 c2 20 48 a9 00 08
>3a2878		5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00
>3a2888		20 d8 1c e2 20 dc d4 08 20 04 17 80 08 20 a9 53
>3a2898		80 03 20 1b 5b 28 60 08 e2 20 20 8e 07 c9 00 f0
>3a28a8		2c c9 01 f0 2d c9 02 f0 1f 08 c2 20 48 a9 00 08
>3a28b8		5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00
>3a28c8		20 d8 1c e2 20 dc d4 08 20 1b 17 80 08 20 c7 53
>3a28d8		80 03 20 06 5b 28 60 08 e2 20 20 8e 07 c9 00 f0
>3a28e8		2c c9 01 f0 2d c9 02 f0 1f 08 c2 20 48 a9 00 08
>3a28f8		5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00
>3a2908		20 d8 1c e2 20 dc d4 08 20 32 17 80 08 20 f4 53
>3a2918		80 03 20 f1 5a 28 60 08 e2 20 a5 27 c9 00 f0 2d
>3a2928		c9 01 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a2938		a9 04 8f d3 08 00 c2 20 29 ff 00 20 d8 1c e2 20
>3a2948		dc d4 08 e2 20 a5 26 49 80 85 26 80 16 c2 20 a5
>3a2958		23 49 ff ff 85 23 a5 25 49 ff ff 85 25 e6 23 d0
>3a2968		02 e6 25 28 60 08 e2 20 20 86 1b 20 4e 06 20 99
>3a2978		04 a5 23 0a 0a 0a 0a 05 29 48 a9 2c 20 a4 20 20
>3a2988		86 1b 20 4e 06 20 99 04 a5 23 0a 0a 0a 0a 05 29
>3a2998		48 a9 2c 20 a4 20 20 86 1b 20 4e 06 20 99 04 a5
>3a29a8		23 0a 0a 0a 0a 05 29 48 af 0e 08 af 09 0c 8f 0e
>3a29b8		08 af 68 8f 00 08 af 68 8f 02 08 af 68 8f 04 08
>3a29c8		af af 0e 08 af 29 f7 8f 0e 08 af 20 dc 1f 28 60
>3a29d8		08 e2 20 20 86 1b 20 4e 06 20 99 04 a5 23 0a 0a
>3a29e8		0a 0a 05 29 48 a9 2c 20 a4 20 20 86 1b 20 4e 06
>3a29f8		20 99 04 a5 23 0a 0a 0a 0a 05 29 48 a9 2c 20 a4
>3a2a08		20 20 86 1b 20 3c 05 20 cf 04 c2 20 a5 23 85 92
>3a2a18		a5 29 85 23 20 99 04 e2 20 a5 23 0a 0a 0a 0a 05
>3a2a28		29 48 c2 20 a5 92 85 23 20 99 04 e2 20 a5 23 0a
>3a2a38		0a 0a 0a 05 29 48 af 0e 08 af 09 0c 8f 0e 08 af
>3a2a48		68 8f 0f 08 af 68 8f 0a 08 af 68 8f 09 08 af 68
>3a2a58		8f 06 08 af af 0e 08 af 29 f7 8f 0e 08 af 20 dc
>3a2a68		1f 28 60 08 e2 20 48 20 86 1b 20 4e 06 e2 20 a5
>3a2a78		23 29 0f 0a 0a 0a 0a 83 01 a9 2c 20 a4 20 20 86
>3a2a88		1b 20 4e 06 a5 23 29 0f 03 01 8f 1e 00 00 e2 20
>3a2a98		68 28 60 08 c2 20 f4 00 00 e2 20 20 86 1b 20 4e
>3a2aa8		06 a5 23 83 01 a9 2c 20 a4 20 20 86 1b 20 4e 06
>3a2ab8		a5 23 83 02 a9 2c 20 a4 20 20 86 1b 20 4e 06 a5
>3a2ac8		23 8f 0d 00 af a3 02 8f 0e 00 af a3 01 8f 0f 00
>3a2ad8		af c2 20 68 28 60 08 c2 20 f4 00 00 e2 20 20 86
>3a2ae8		1b 20 3c 05 a5 23 f0 16 a9 01 8f 04 00 af a9 20
>3a2af8		8f 08 00 af 8f 09 00 af 22 2c 11 00 80 0a a9 00
>3a2b08		8f 04 00 af 22 2c 11 00 a9 2c 85 37 20 d9 20 90
>3a2b18		39 20 97 1f 20 86 1b 20 4e 06 a5 23 83 01 a9 2c
>3a2b28		20 a4 20 20 86 1b 20 4e 06 a5 23 83 02 a9 2c 20
>3a2b38		a4 20 20 86 1b 20 4e 06 a5 23 8f 05 00 af a3 02
>3a2b48		8f 06 00 af a3 01 8f 07 00 af c2 20 68 28 60 08
>3a2b58		c2 20 3b 38 e9 05 00 1b e2 20 20 86 1b 20 4e 06
>3a2b68		a5 23 c9 0a 90 1f 08 c2 20 48 a9 00 08 5b 68 28
>3a2b78		e2 20 a9 0a 8f d3 08 00 c2 20 29 ff 00 20 d8 1c
>3a2b88		e2 20 dc d4 08 83 01 a9 2c 20 a4 20 20 86 1b 20
>3a2b98		4e 06 a5 23 83 02 a9 2c 20 a4 20 20 86 1b 20 4e
>3a2ba8		06 a5 23 83 03 a9 2c 20 a4 20 20 86 1b 20 4e 06
>3a2bb8		a5 23 83 04 a9 2c 20 a4 20 20 86 1b 20 4e 06 a5
>3a2bc8		23 83 05 a9 af 85 a0 a3 01 0a c2 20 29 ff 00 aa
>3a2bd8		bf 0f 2c 3a 85 9e e2 20 a3 02 c2 20 29 ff 00 0a
>3a2be8		0a 18 65 9e 85 9e e2 20 a0 02 00 a3 03 97 9e a0
>3a2bf8		01 00 a3 04 97 9e a0 00 00 a3 05 97 9e c2 20 3b
>3a2c08		18 69 05 00 1b 28 60 00 20 00 24 00 28 00 2c 00
>3a2c18		30 00 34 00 38 00 3c 40 1f 80 1f da 5a 08 20 86
>3a2c28		1b 20 3c 05 c2 20 a5 23 89 00 01 d0 17 af 00 00
>3a2c38		af 89 00 01 f0 0e e2 20 a9 00 8f 01 00 af a9 01
>3a2c48		8f 01 00 af c2 20 a5 23 8f 00 00 af e2 20 a5 24
>3a2c58		c2 20 29 03 00 0a aa c2 20 bf aa 2c 3a 8f 10 f0
>3a2c68		3a bf b2 2c 3a 8f 12 f0 3a af 10 f0 3a 8f 08 01
>3a2c78		00 af 12 f0 3a 8f 0a 01 00 af 0c 01 00 8f 14 f0
>3a2c88		3a e2 20 af 0e 01 00 8f 16 f0 3a 22 2c 11 00 c2
>3a2c98		20 af 1a 00 00 aa af 1c 00 00 a8 20 20 00 28 7a
>3a2ca8		fa 60 80 02 20 03 40 01 90 01 e0 01 58 02 f0 00
>3a2cb8		2c 01 50 00 64 00 28 00 32 00 3c 00 4b 00 1e 00
>3a2cc8		32 00 48 00 5c 00 20 00 2a 00 34 00 43 00 16 00
>3a2cd8		34 00 da 08 c2 30 c9 02 00 b0 1c 0a 0a aa bf 00
>3a2ce8		f0 3a 85 9e bf 02 f0 3a 85 a0 c9 f0 00 b0 08 c9
>3a2cf8		b0 00 90 03 28 fa 60 08 c2 20 48 a9 00 08 5b 68
>3a2d08		28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 d8
>3a2d18		1c e2 20 dc d4 08 da 08 c2 30 c9 02 00 b0 17 0a
>3a2d28		0a aa bf 08 f0 3a 85 9e bf 0a f0 3a 85 a0 c9 40
>3a2d38		00 b0 03 28 fa 60 08 c2 20 48 a9 00 08 5b 68 28
>3a2d48		e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 d8 1c
>3a2d58		e2 20 dc d4 08 08 c2 30 3b 38 e9 07 00 1b 20 86
>3a2d68		1b 20 4e 06 c2 20 a5 23 c9 02 00 b0 59 83 01 e2
>3a2d78		20 a9 2c 20 a4 20 20 86 1b 20 4e 06 a5 23 83 03
>3a2d88		a9 2c 20 a4 20 20 86 1b 20 4e 06 a3 01 0a 0a 0a
>3a2d98		aa a3 03 d0 05 a5 23 0a 80 04 a5 23 38 2a 9f 00
>3a2da8		01 af c2 20 a9 2c 00 85 37 20 d9 20 b0 37 c2 20
>3a2db8		08 c2 20 a9 00 00 85 23 a9 b0 00 85 25 e2 20 a9
>3a2dc8		00 85 27 28 80 27 08 c2 20 48 a9 00 08 5b 68 28
>3a2dd8		e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 d8 1c
>3a2de8		e2 20 dc d4 08 c2 20 20 97 1f 20 86 1b c2 20 a3
>3a2df8		01 0a 0a aa a5 23 9f 00 f0 3a 9f 08 f0 3a 83 04
>3a2e08		a5 25 9f 02 f0 3a 38 e9 b0 00 9f 0a f0 3a 83 06
>3a2e18		a3 01 0a 0a 0a aa e2 20 a3 04 9f 01 01 af a3 05
>3a2e28		9f 02 01 af a3 06 9f 03 01 af a9 00 9f 04 01 af
>3a2e38		9f 05 01 af c2 30 3b 18 69 07 00 1b 28 60 08 c2
>3a2e48		20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d3 08 00
>3a2e58		c2 20 29 ff 00 20 d8 1c e2 20 dc d4 08 08 c2 20
>3a2e68		20 86 1b 20 4e 06 a5 23 20 1e 2d c2 20 a5 9e 8f
>3a2e78		05 04 af af 14 f0 3a 8f 08 04 af e2 20 a5 a0 8f
>3a2e88		07 04 af af 16 f0 3a 8f 0a 04 af a9 00 8f 01 04
>3a2e98		af a9 85 8f 00 04 af af 01 04 af 30 fa a9 00 8f
>3a2ea8		00 04 af 28 60 08 c2 20 a5 5d 8f 08 01 00 af 10
>3a2eb8		f0 3a 8f 0a 01 00 18 af 0c 01 00 65 59 85 0c af
>3a2ec8		0e 01 00 69 00 00 85 0e 18 a5 0c 65 9e 85 0c a5
>3a2ed8		0e 65 a0 85 0e e2 20 a5 55 87 0c 28 60 c2 20 a9
>3a2ee8		01 00 85 dd 38 a5 61 e5 59 85 69 10 0b 49 ff ff
>3a2ef8		1a 85 69 a9 ff ff 85 dd a9 01 00 85 df 38 a5 65
>3a2f08		e5 5d 85 6d 10 0b 49 ff ff 1a 85 6d a9 ff ff 85
>3a2f18		df a5 6d c5 69 b0 04 a5 69 80 06 a5 6d 49 ff ff
>3a2f28		1a 48 0a 68 6a 85 71 20 ad 2e a5 59 c5 61 d0 06
>3a2f38		a5 5d c5 65 f0 36 a5 71 85 75 a5 69 49 ff ff 1a
>3a2f48		c5 75 10 10 f0 0e 38 a5 71 e5 6d 85 71 18 a5 59
>3a2f58		65 dd 85 59 a5 75 c5 6d 10 cd f0 cb 18 a5 71 65
>3a2f68		69 85 71 18 a5 5d 65 df 85 5d 80 bb 60 08 c2 20
>3a2f78		3b 38 e9 06 00 1b 08 c2 20 48 a9 00 08 5b 68 28
>3a2f88		08 e2 20 48 a9 00 48 ab 68 28 c2 30 20 86 1b 20
>3a2f98		4e 06 83 01 a9 2c 00 20 a4 20 20 86 1b 20 3c 05
>3a2fa8		a5 23 83 03 a9 2c 00 20 a4 20 20 86 1b 20 3c 05
>3a2fb8		a5 23 83 05 a9 2c 00 20 a4 20 20 86 1b 20 4e 06
>3a2fc8		a5 23 85 55 a3 03 85 59 a3 05 85 5d a3 01 20 da
>3a2fd8		2c 20 ad 2e c2 20 3b 18 69 06 00 1b 28 60 08 c2
>3a2fe8		20 3b 38 e9 0a 00 1b 08 c2 20 48 a9 00 08 5b 68
>3a2ff8		28 08 e2 20 48 a9 00 48 ab 68 28 c2 30 20 86 1b
>3a3008		20 4e 06 83 01 a9 2c 00 20 a4 20 20 86 1b 20 3c
>3a3018		05 a5 23 83 03 a9 2c 00 20 a4 20 20 86 1b 20 3c
>3a3028		05 a5 23 83 05 a9 2c 00 20 a4 20 20 86 1b 20 3c
>3a3038		05 a5 23 83 07 a9 2c 00 20 a4 20 20 86 1b 20 3c
>3a3048		05 a5 23 83 09 a9 2c 00 20 a4 20 20 86 1b 20 4e
>3a3058		06 a5 23 85 55 a3 03 85 59 a3 05 85 5d a3 07 85
>3a3068		61 a3 09 85 65 a3 01 20 da 2c 20 e5 2e c2 20 3b
>3a3078		18 69 0a 00 1b 28 60 08 c2 20 3b 38 e9 0c 00 1b
>3a3088		08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00
>3a3098		48 ab 68 28 c2 30 20 86 1b 20 4e 06 83 01 a9 2c
>3a30a8		00 20 a4 20 20 86 1b 20 3c 05 a5 23 83 03 a9 2c
>3a30b8		00 20 a4 20 20 86 1b 20 3c 05 a5 23 83 05 a9 2c
>3a30c8		00 20 a4 20 20 86 1b 20 3c 05 a5 23 83 07 a9 2c
>3a30d8		00 20 a4 20 20 86 1b 20 3c 05 a5 23 83 09 a9 2c
>3a30e8		00 20 a4 20 20 86 1b 20 4e 06 a5 23 83 0b a3 01
>3a30f8		20 1e 2d a9 07 00 8f 00 04 af c2 20 a3 05 8f 00
>3a3108		01 00 af 10 f0 3a 8f 02 01 00 18 af 04 01 00 63
>3a3118		03 85 0c e2 20 af 06 01 00 69 00 85 0e c2 20 18
>3a3128		a5 9e 65 0c 8f 05 04 af e2 20 a5 a0 65 0e 8f 07
>3a3138		04 af c2 20 38 a3 07 e3 03 85 0c 8f 08 04 af 38
>3a3148		af 10 f0 3a 8f 0e 04 af 38 a3 09 e3 05 8f 0a 04
>3a3158		af e2 20 a3 0b 8f 01 04 af af 00 04 af 09 80 8f
>3a3168		00 04 af af 01 04 af 30 fa a9 00 8f 00 04 af c2
>3a3178		20 3b 18 69 0c 00 1b 28 60 08 c2 20 c9 40 00 b0
>3a3188		13 0a 0a 0a 18 69 00 0c 85 9e a9 af 00 69 00 00
>3a3198		85 a0 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a31a8		a9 09 8f d3 08 00 c2 20 29 ff 00 20 d8 1c e2 20
>3a31b8		dc d4 08 08 c2 20 3b 38 e9 03 00 1b c2 30 20 86
>3a31c8		1b 20 4e 06 83 01 a9 2c 00 20 a4 20 e2 20 20 86
>3a31d8		1b 20 4e 06 a5 23 c9 08 b0 56 83 03 a9 2c 20 a4
>3a31e8		20 20 86 1b 20 3c 05 c2 20 38 a5 23 e9 00 00 85
>3a31f8		23 a5 25 e9 b0 00 85 25 30 36 c2 20 a3 01 aa 20
>3a3208		81 31 a5 23 a0 01 00 97 9e e2 20 a5 25 c8 c8 97
>3a3218		9e bf 18 f0 3a 29 f1 85 0c a3 03 0a 29 0e 05 0c
>3a3228		87 9e 9f 18 f0 3a c2 20 3b 18 69 03 00 1b 28 60
>3a3238		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3
>3a3248		08 00 c2 20 29 ff 00 20 d8 1c e2 20 dc d4 08 08
>3a3258		c2 20 3b 38 e9 04 00 1b c2 30 20 86 1b 20 4e 06
>3a3268		83 01 a9 2c 00 20 a4 20 20 86 1b 20 3c 05 a5 23
>3a3278		83 03 a9 2c 00 20 a4 20 20 86 1b 20 3c 05 a3 01
>3a3288		20 81 31 a3 03 a0 04 00 97 9e a5 23 a0 06 00 97
>3a3298		9e c2 20 3b 18 69 04 00 1b 28 60 08 c2 20 3b 38
>3a32a8		e9 03 00 1b c2 30 20 86 1b 20 4e 06 83 01 a9 2c
>3a32b8		00 20 a4 20 e2 20 20 86 1b 20 3c 05 a5 23 d0 04
>3a32c8		83 03 80 04 a9 01 83 03 a9 2c 85 37 20 d9 20 b0
>3a32d8		20 c2 30 a3 01 aa 20 81 31 e2 20 bf 18 f0 3a 29
>3a32e8		fe 85 0c a3 03 29 01 05 0c 9f 18 f0 3a 87 9e 80
>3a32f8		36 c2 30 20 97 1f 20 86 1b 20 4e 06 a5 23 c9 08
>3a3308		00 b0 2e 0a 0a 0a 0a 85 0c a3 01 aa 20 81 31 e2
>3a3318		20 a3 03 29 01 05 0c 85 0c bf 18 f0 3a 29 8e 05
>3a3328		0c 87 9e 9f 18 f0 3a c2 20 3b 18 69 03 00 1b 28
>3a3338		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>3a3348		d3 08 00 c2 20 29 ff 00 20 d8 1c e2 20 dc d4 08
>3a3358		08 c2 20 c9 04 00 b0 19 8d 00 01 a9 04 00 8d 02
>3a3368		01 18 ad 04 01 69 80 02 85 9e a9 af 00 85 a0 28
>3a3378		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>3a3388		d3 08 00 c2 20 29 ff 00 20 d8 1c e2 20 dc d4 08
>3a3398		08 c2 20 c9 04 00 b0 19 8d 00 01 a9 0c 00 8d 02
>3a33a8		01 18 ad 04 01 69 00 02 85 9e a9 af 00 85 a0 28
>3a33b8		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>3a33c8		d3 08 00 c2 20 29 ff 00 20 d8 1c e2 20 dc d4 08
>3a33d8		08 c2 20 3b 38 e9 06 00 1b c2 20 20 86 1b 20 4e
>3a33e8		06 a5 23 83 01 a9 2c 00 20 a4 20 20 86 1b 20 4e
>3a33f8		06 a5 23 83 03 a9 2c 00 20 a4 20 20 86 1b 20 4e
>3a3408		06 a5 23 83 05 a9 2c 00 20 a4 20 20 86 1b 20 3c
>3a3418		05 a3 01 20 58 33 a5 23 87 9e e2 20 38 a5 25 e9
>3a3428		b0 a0 02 00 97 9e a3 05 d0 0d e2 20 a3 03 29 07
>3a3438		a0 03 00 97 9e 80 0d e2 20 a3 03 29 07 09 08 a0
>3a3448		03 00 97 9e c2 20 3b 18 69 06 00 1b 28 60 08 c2
>3a3458		20 3b 38 e9 06 00 1b c2 20 20 86 1b 20 4e 06 a5
>3a3468		23 83 01 a9 2c 00 20 a4 20 20 86 1b 20 3c 05 a5
>3a3478		23 83 03 a9 2c 00 20 a4 20 20 86 1b 20 3c 05 a5
>3a3488		23 83 05 a9 2c 00 20 a4 20 20 86 1b 20 3c 05 a3
>3a3498		01 20 98 33 a5 23 a0 01 00 97 9e e2 20 38 a5 25
>3a34a8		e9 b0 c8 c8 97 9e c2 20 a3 03 a0 04 00 97 9e a3
>3a34b8		05 a0 06 00 97 9e c2 20 3b 18 69 06 00 1b 28 60
>3a34c8		08 c2 20 f4 00 00 c2 20 20 86 1b 20 4e 06 a5 23
>3a34d8		83 01 a9 2c 00 20 a4 20 20 86 1b 20 3c 05 a3 01
>3a34e8		20 98 33 a5 23 d0 06 e2 20 a9 00 80 04 e2 20 a9
>3a34f8		01 e2 20 a0 00 00 97 9e c2 20 68 28 60 08 c2 20
>3a3508		3b 38 e9 04 00 1b c2 20 20 86 1b 20 4e 06 a5 23
>3a3518		83 01 a9 2c 00 20 a4 20 20 86 1b 20 3c 05 a5 23
>3a3528		83 03 a9 2c 00 20 a4 20 20 86 1b 20 3c 05 a3 01
>3a3538		20 98 33 a5 23 a0 0a 00 97 9e a3 03 a0 08 00 97
>3a3548		9e c2 20 3b 18 69 04 00 1b 28 60 0b 08 08 c2 20
>3a3558		48 a9 00 08 5b 68 28 e2 20 a9 00 8f 58 f0 3a af
>3a3568		5c f0 3a c9 b0 b0 1c 8f 24 04 af af 5b f0 3a 8f
>3a3578		23 04 af af 5a f0 3a 8f 22 04 af a9 10 8f 58 f0
>3a3588		3a 80 17 38 e9 b0 8f 04 04 af af 5b f0 3a 8f 03
>3a3598		04 af af 5a f0 3a 8f 02 04 af af 59 f0 3a d0 3c
>3a35a8		af 58 f0 3a f0 1b af 5d f0 3a 8f 28 04 af af 5e
>3a35b8		f0 3a 8f 29 04 af af 5f f0 3a 8f 2a 04 af 82 8b
>3a35c8		00 af 5d f0 3a 8f 08 04 af af 5e f0 3a 8f 09 04
>3a35d8		af af 5f f0 3a 8f 0a 04 af 82 70 00 af 58 f0 3a
>3a35e8		09 01 8f 58 f0 3a 89 10 f0 32 af 60 f0 3a 8f 28
>3a35f8		04 af af 61 f0 3a 8f 29 04 af af 62 f0 3a 8f 2a
>3a3608		04 af af 63 f0 3a 8f 2b 04 af af 64 f0 3a 8f 2c
>3a3618		04 af af 65 f0 3a 8f 2d 04 af 80 30 af 60 f0 3a
>3a3628		8f 08 04 af af 61 f0 3a 8f 09 04 af af 62 f0 3a
>3a3638		8f 0a 04 af af 63 f0 3a 8f 0b 04 af af 64 f0 3a
>3a3648		8f 0c 04 af af 65 f0 3a 8f 0d 04 af e2 20 af 69
>3a3658		f0 3a c9 b0 b0 20 8f 27 04 af af 68 f0 3a 8f 26
>3a3668		04 af af 67 f0 3a 8f 25 04 af af 58 f0 3a 09 20
>3a3678		8f 58 f0 3a 80 17 38 e9 b0 8f 07 04 af af 68 f0
>3a3688		3a 8f 06 04 af af 67 f0 3a 8f 05 04 af af 66 f0
>3a3698		3a d0 3e af 58 f0 3a 89 20 f0 1b af 6a f0 3a 8f
>3a36a8		28 04 af af 6b f0 3a 8f 29 04 af af 6c f0 3a 8f
>3a36b8		2a 04 af 82 8b 00 af 6a f0 3a 8f 08 04 af af 6b
>3a36c8		f0 3a 8f 09 04 af af 6c f0 3a 8f 0a 04 af 82 70
>3a36d8		00 af 58 f0 3a 09 02 8f 58 f0 3a 89 20 f0 32 af
>3a36e8		6d f0 3a 8f 28 04 af af 6e f0 3a 8f 29 04 af af
>3a36f8		6f f0 3a 8f 2a 04 af af 70 f0 3a 8f 2b 04 af af
>3a3708		71 f0 3a 8f 2e 04 af af 72 f0 3a 8f 2f 04 af 80
>3a3718		30 af 6d f0 3a 8f 08 04 af af 6e f0 3a 8f 09 04
>3a3728		af af 6f f0 3a 8f 0a 04 af af 70 f0 3a 8f 0b 04
>3a3738		af af 71 f0 3a 8f 0e 04 af af 72 f0 3a 8f 0f 04
>3a3748		af af 58 f0 3a 29 30 f0 43 c9 10 f0 76 c9 20 d0
>3a3758		03 82 8a 00 af 58 f0 3a 29 03 f0 23 c9 03 f0 23
>3a3768		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d3
>3a3778		08 00 c2 20 29 ff 00 20 d8 1c e2 20 dc d4 08 a9
>3a3788		01 80 02 a9 03 8f 20 04 af 82 7d 00 af 58 f0 3a
>3a3798		29 03 f0 23 c9 03 f0 23 08 c2 20 48 a9 00 08 5b
>3a37a8		68 28 e2 20 a9 0a 8f d3 08 00 c2 20 29 ff 00 20
>3a37b8		d8 1c e2 20 dc d4 08 a9 01 80 02 a9 03 8f 00 04
>3a37c8		af 80 34 af 58 f0 3a 29 01 0a 09 11 8f 20 04 af
>3a37d8		af 58 f0 3a 29 02 09 11 8f 00 04 af 80 19 af 58
>3a37e8		f0 3a 29 02 09 21 8f 20 04 af af 58 f0 3a 29 01
>3a37f8		0a 09 21 8f 00 04 af af 00 04 af 09 80 8f 00 04
>3a3808		af af 58 f0 3a 29 30 f0 0f af 20 04 af 09 80 8f
>3a3818		20 04 af ea ea ea ea ea af 01 04 af 89 80 d0 f8
>3a3828		a9 00 8f 20 04 af 8f 00 04 af 28 2b 60 0b 08 e2
>3a3838		20 c2 10 a9 00 a2 00 00 8f 59 f0 3a e8 e0 1a 00
>3a3848		d0 f6 20 f8 20 c9 e6 f0 23 c9 e7 f0 5e 08 c2 20
>3a3858		48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2
>3a3868		20 29 ff 00 20 d8 1c e2 20 dc d4 08 20 a4 20 20
>3a3878		86 1b 20 3c 05 c2 20 a5 23 8f 5a f0 3a e2 20 a5
>3a3888		25 8f 5c f0 3a a9 2c 20 a4 20 20 86 1b 20 3c 05
>3a3898		c2 20 a5 23 8f 5d f0 3a e2 20 a5 25 8f 5f f0 3a
>3a38a8		e2 20 a9 00 8f 59 f0 3a 82 74 00 20 a4 20 20 86
>3a38b8		1b 20 3c 05 c2 20 a5 23 8f 5a f0 3a e2 20 a5 25
>3a38c8		8f 5c f0 3a a9 2c 20 a4 20 20 86 1b 20 f8 05 c2
>3a38d8		20 a5 23 8f 60 f0 3a 8d 00 01 a9 2c 00 20 a4 20
>3a38e8		20 86 1b 20 f8 05 c2 20 a5 23 8f 62 f0 3a 8d 02
>3a38f8		01 a9 2c 00 20 a4 20 20 86 1b 20 f8 05 c2 20 a5
>3a3908		23 8f 64 f0 3a c2 20 ad 04 01 8f 5d f0 3a e2 20
>3a3918		ad 06 01 8f 5f f0 3a e2 20 a9 01 8f 59 f0 3a e2
>3a3928		20 a9 9c 20 a4 20 20 f8 20 c9 e6 f0 23 c9 e7 f0
>3a3938		5e 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a3948		d3 08 00 c2 20 29 ff 00 20 d8 1c e2 20 dc d4 08
>3a3958		20 a4 20 20 86 1b 20 3c 05 c2 20 a5 23 8f 67 f0
>3a3968		3a e2 20 a5 25 8f 69 f0 3a a9 2c 20 a4 20 20 86
>3a3978		1b 20 3c 05 c2 20 a5 23 8f 6a f0 3a e2 20 a5 25
>3a3988		8f 6c f0 3a e2 20 a9 00 8f 66 f0 3a 82 74 00 20
>3a3998		a4 20 20 86 1b 20 3c 05 c2 20 a5 23 8f 67 f0 3a
>3a39a8		e2 20 a5 25 8f 69 f0 3a a9 2c 20 a4 20 20 86 1b
>3a39b8		20 f8 05 c2 20 a5 23 8f 6d f0 3a 8d 00 01 a9 2c
>3a39c8		00 20 a4 20 20 86 1b 20 f8 05 c2 20 a5 23 8f 6f
>3a39d8		f0 3a 8d 02 01 a9 2c 00 20 a4 20 20 86 1b 20 f8
>3a39e8		05 c2 20 a5 23 8f 71 f0 3a c2 20 ad 04 01 8f 6a
>3a39f8		f0 3a e2 20 ad 06 01 8f 6c f0 3a e2 20 a9 01 8f
>3a3a08		66 f0 3a c2 20 af 5d f0 3a cf 6a f0 3a d0 14 e2
>3a3a18		20 af 5f f0 3a cf 6c f0 3a d0 08 c2 20 20 53 35
>3a3a28		28 2b 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a3a38		0a 8f d3 08 00 c2 20 29 ff 00 20 d8 1c e2 20 dc
>3a3a48		d4 08 08 c2 30 20 86 1b 20 4e 06 a5 23 48 a9 2c
>3a3a58		00 20 a4 20 20 86 1b 20 4e 06 a4 23 fa 20 20 00
>3a3a68		28 60 08 20 b8 1f e2 20 a7 00 d0 03 4c 12 3b c9
>3a3a78		3a d0 03 4c 12 3b c9 22 d0 0b 20 92 1a 20 20 44
>3a3a88		a9 3b 20 a4 20 20 cd 03 90 44 20 c6 51 90 3f a9
>3a3a98		3f 20 18 00 a9 20 20 18 00 20 10 00 e2 20 a5 ea
>3a3aa8		c9 02 f0 49 c9 00 d0 03 82 84 00 c9 01 f0 5d 08
>3a3ab8		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08
>3a3ac8		00 c2 20 29 ff 00 20 d8 1c e2 20 dc d4 08 08 c2
>3a3ad8		20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00
>3a3ae8		c2 20 29 ff 00 20 d8 1c e2 20 dc d4 08 c2 20 a9
>3a3af8		00 4c 85 23 a9 00 00 85 25 e2 20 a9 02 85 27 c2
>3a3b08		20 20 29 51 a9 0d 00 20 18 00 28 60 c2 20 a5 00
>3a3b18		85 40 a5 02 85 42 a9 00 4c 85 00 a9 00 00 85 02
>3a3b28		20 e8 57 c2 20 a5 40 85 00 a5 42 85 02 80 d0 c2
>3a3b38		20 a5 00 85 40 a5 02 85 42 a9 00 4c 85 00 a9 00
>3a3b48		00 85 02 20 c3 07 c2 20 a5 40 85 00 a5 42 85 02
>3a3b58		80 ad 08 20 b8 1f e2 20 a7 00 f0 47 c9 3a f0 43
>3a3b68		20 cd 03 90 40 20 c6 51 90 3b 20 e7 13 20 14 00
>3a3b78		e2 20 a0 00 00 97 16 a9 00 c8 97 16 c2 20 a5 16
>3a3b88		85 23 a5 18 85 25 e2 20 a9 02 85 27 20 29 51 20
>3a3b98		b8 1f a7 00 f0 0d c9 3a f0 09 c9 2c d0 07 20 97
>3a3ba8		1f 80 b0 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a3bb8		20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 d8 1c e2
>3a3bc8		20 dc d4 08 08 20 86 1b 20 3c 05 e2 20 a9 5c 85
>3a3bd8		a2 c2 20 a5 23 85 a3 e2 20 a5 25 85 a5 e2 20 a9
>3a3be8		2c 85 37 20 d9 20 90 41 20 97 1f 20 86 1b 20 f8
>3a3bf8		05 c2 20 a5 23 85 55 e2 20 a9 2c 85 37 20 d9 20
>3a3c08		90 27 20 97 1f 20 86 1b 20 f8 05 c2 20 a5 23 85
>3a3c18		59 e2 20 a9 2c 85 37 20 d9 20 90 0d 20 97 1f 20
>3a3c28		86 1b 20 f8 05 c2 20 a4 23 a6 59 a5 55 0b 8b 08
>3a3c38		22 a2 08 00 28 ab 2b 20 dc 1f 28 60 08 c2 20 48
>3a3c48		a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20
>3a3c58		29 ff 00 20 d8 1c e2 20 dc d4 08 08 e2 20 20 b8
>3a3c68		1f 20 c6 51 90 64 a9 8f 20 a4 20 a9 01 20 e5 18
>3a3c78		a2 01 00 a9 00 8f 00 4d 00 20 86 1b 20 f8 05 c2
>3a3c88		20 a5 23 9f 00 4d 00 e2 20 af 00 4d 00 1a 8f 00
>3a3c98		4d 00 30 55 e8 e8 20 b8 1f a7 00 c9 2c f0 25 c9
>3a3ca8		90 d0 27 20 97 1f 20 44 64 c2 20 a5 c0 85 23 e2
>3a3cb8		20 a5 c2 85 25 64 26 a5 ea 09 80 85 ea 85 27 20
>3a3cc8		29 51 28 60 20 97 1f 4c 81 3c 08 c2 20 48 a9 00
>3a3cd8		08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff
>3a3ce8		00 20 d8 1c e2 20 dc d4 08 08 c2 20 48 a9 00 08
>3a3cf8		5b 68 28 e2 20 a9 0a 8f d3 08 00 c2 20 29 ff 00
>3a3d08		20 d8 1c e2 20 dc d4 08 08 20 b8 1f e2 20 a7 00
>3a3d18		f0 28 c9 3a f0 24 20 cd 03 90 21 20 c6 51 90 1c
>3a3d28		20 63 3d 20 29 51 20 b8 1f a7 00 f0 0d c9 3a f0
>3a3d38		09 c9 2c d0 07 20 97 1f 80 cf 28 60 08 c2 20 48
>3a3d48		a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20
>3a3d58		29 ff 00 20 d8 1c e2 20 dc d4 08 08 a5 02 85 42
>3a3d68		a5 00 85 40 a5 1c 85 46 a5 1a 85 44 c2 20 a5 3a
>3a3d78		d0 04 a5 38 f0 4e a5 38 85 00 a5 3a 85 02 a5 3c
>3a3d88		85 1a a5 3e 85 1c e2 20 a7 00 f0 53 c9 3a f0 4f
>3a3d98		c9 2c d0 03 20 97 1f 20 b8 1f a7 00 c9 22 f0 4e
>3a3da8		20 e6 03 b0 4e 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a3db8		20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 d8 1c e2
>3a3dc8		20 dc d4 08 c2 20 a9 00 00 85 1a a9 36 00 85 1c
>3a3dd8		18 a5 1a 69 04 00 85 00 a5 1c 69 00 00 85 02 e2
>3a3de8		20 a9 80 85 35 a9 ab 85 37 20 ee 1f 80 a9 20 92
>3a3df8		1a 80 03 20 c7 19 c2 20 a5 00 85 38 a5 02 85 3a
>3a3e08		a5 1a 85 3c a5 1c 85 3e a5 44 85 1a a5 46 85 1c
>3a3e18		a5 40 85 00 a5 42 85 02 28 60 20 dc 1f 60 64 38
>3a3e28		64 3a 64 3c 64 3e 60 20 24 00 60 20 86 1b c2 20
>3a3e38		a5 25 48 a5 23 48 e2 20 a7 00 c9 2c d0 22 20 97
>3a3e48		1f 20 86 1b c2 20 a5 26 d0 35 68 85 08 68 85 0a
>3a3e58		c2 20 a5 23 87 08 e2 20 a0 02 00 a5 25 97 08 60
>3a3e68		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3
>3a3e78		08 00 c2 20 29 ff 00 20 d8 1c e2 20 dc d4 08 08
>3a3e88		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08
>3a3e98		00 c2 20 29 ff 00 20 d8 1c e2 20 dc d4 08 20 86
>3a3ea8		1b c2 20 a5 25 48 a5 23 48 e2 20 a7 00 c9 2c d0
>3a3eb8		19 20 97 1f 20 86 1b c2 20 a5 25 d0 2c 68 85 08
>3a3ec8		68 85 0a c2 20 a5 23 87 08 60 08 c2 20 48 a9 00
>3a3ed8		08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff
>3a3ee8		00 20 d8 1c e2 20 dc d4 08 08 c2 20 48 a9 00 08
>3a3ef8		5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00
>3a3f08		20 d8 1c e2 20 dc d4 08 20 86 1b c2 20 a5 25 48
>3a3f18		a5 23 48 e2 20 a7 00 c9 2c d0 1f 20 97 1f 20 86
>3a3f28		1b e2 20 a5 24 d0 32 c2 20 a5 25 d0 2c 68 85 08
>3a3f38		68 85 0a e2 20 a5 23 87 08 60 08 c2 20 48 a9 00
>3a3f48		08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff
>3a3f58		00 20 d8 1c e2 20 dc d4 08 08 c2 20 48 a9 00 08
>3a3f68		5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00
>3a3f78		20 d8 1c e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b
>3a3f88		68 28 e2 20 a9 01 8f d3 08 00 c2 20 29 ff 00 20
>3a3f98		d8 1c e2 20 dc d4 08 08 e2 20 a7 00 f0 05 20 97
>3a3fa8		1f 80 f7 28 60 08 28 60 08 28 60 08 28 60 08 c2
>3a3fb8		20 a5 1c 20 9f 1c a5 1a 20 9f 1c a5 02 48 a5 00
>3a3fc8		48 20 dc 1f a5 02 20 9f 1c a5 00 20 9f 1c 68 85
>3a3fd8		00 68 85 02 20 b8 1f 20 c6 51 b0 1f 08 c2 20 48
>3a3fe8		a9 00 08 5b 68 28 e2 20 a9 05 8f d3 08 00 c2 20
>3a3ff8		29 ff 00 20 d8 1c e2 20 dc d4 08 e2 20 a5 ea 20
>3a4008		b6 1c a5 e9 20 b6 1c c2 20 a5 e7 20 9f 1c 20 b8
>3a4018		1f e2 20 a7 00 c9 8a d0 6a a5 ea c9 00 f0 04 c9
>3a4028		01 f0 00 20 97 1f 20 86 1b 20 29 51 e2 20 a9 9c
>3a4038		20 a4 20 20 86 1b c2 20 a5 27 20 9f 1c a5 25 20
>3a4048		9f 1c a5 23 20 9f 1c e2 20 a9 9d 85 37 20 d9 20
>3a4058		90 1b 20 97 1f 20 86 1b e2 20 a5 27 20 9f 1c c2
>3a4068		20 a5 25 20 9f 1c a5 23 20 9f 1c 80 14 c2 20 a9
>3a4078		00 00 20 9f 1c a9 00 00 20 9f 1c a9 01 00 20 9f
>3a4088		1c 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a4098		02 8f d3 08 00 c2 20 29 ff 00 20 d8 1c e2 20 dc
>3a40a8		d4 08 08 8b 08 e2 20 48 a9 00 48 ab 68 28 08 c2
>3a40b8		20 48 a9 00 08 5b 68 28 c2 30 a4 33 c8 c8 c2 20
>3a40c8		b9 0c 00 85 e7 b9 0e 00 e2 20 85 e9 b9 10 00 85
>3a40d8		ea c2 20 5a 20 c7 4f 7a c2 20 b9 00 00 85 29 b9
>3a40e8		02 00 85 2b e2 20 b9 04 00 85 2d c2 20 5a 20 56
>3a40f8		26 20 29 51 7a c2 20 b9 06 00 85 29 b9 08 00 85
>3a4108		2b e2 20 b9 0a 00 85 2d c2 20 b9 02 00 30 0a 20
>3a4118		df 28 20 05 05 f0 28 80 08 20 9f 28 20 05 05 f0
>3a4128		1e c2 20 b9 12 00 85 00 b9 14 00 85 02 b9 16 00
>3a4138		85 1a b9 18 00 85 1c e2 20 a9 03 85 dc 80 17 a2
>3a4148		23 08 20 a6 18 c2 20 18 a5 33 69 1a 00 85 33 a5
>3a4158		35 69 00 00 85 35 ab 28 60 08 a5 1a 48 a5 1c 48
>3a4168		20 b8 1f 20 c3 07 a5 23 f0 26 20 96 22 90 42 e2
>3a4178		20 a9 02 85 dc 20 dc 1f c2 20 68 20 9f 1c 68 20
>3a4188		9f 1c a5 02 20 9f 1c a5 00 20 9f 1c e6 31 28 60
>3a4198		68 68 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>3a41a8		8f d3 08 00 c2 20 29 ff 00 20 d8 1c e2 20 dc d4
>3a41b8		08 68 68 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a41c8		06 8f d3 08 00 c2 20 29 ff 00 20 d8 1c e2 20 dc
>3a41d8		d4 08 08 c2 30 a5 31 f0 1e 20 c1 1c 85 00 20 c1
>3a41e8		1c 85 02 20 c1 1c 85 1a 20 c1 1c 85 1c c6 31 e2
>3a41f8		20 a9 03 85 dc 28 60 08 c2 20 48 a9 00 08 5b 68
>3a4208		28 e2 20 a9 07 8f d3 08 00 c2 20 29 ff 00 20 d8
>3a4218		1c e2 20 dc d4 08 08 20 86 1b 20 05 05 f0 1c e2
>3a4228		20 a9 97 20 a4 20 20 c3 07 20 05 05 f0 12 20 96
>3a4238		22 90 2c e2 20 a9 02 85 dc 80 03 20 dc 1f 28 60
>3a4248		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3
>3a4258		08 00 c2 20 29 ff 00 20 d8 1c e2 20 dc d4 08 08
>3a4268		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 06 8f d3 08
>3a4278		00 c2 20 29 ff 00 20 d8 1c e2 20 dc d4 08 08 e2
>3a4288		20 a9 01 85 dc 28 60 08 20 b8 1f 20 c3 07 a5 23
>3a4298		f0 0d 20 96 22 90 27 e2 20 a9 02 85 dc 28 60 08
>3a42a8		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>3a42b8		00 c2 20 29 ff 00 20 d8 1c e2 20 dc d4 08 08 c2
>3a42c8		20 48 a9 00 08 5b 68 28 e2 20 a9 06 8f d3 08 00
>3a42d8		c2 20 29 ff 00 20 d8 1c e2 20 dc d4 08 20 48 18
>3a42e8		20 91 0f 20 c6 4e 60 08 a7 00 10 03 20 97 1f 20
>3a42f8		c6 51 b0 03 4c 66 43 e2 20 20 f8 20 c9 8f d0 0e
>3a4308		a9 8f 20 a4 20 a9 00 8f 00 4d 00 20 ca 19 20 b8
>3a4318		1f e2 20 a7 00 c9 8a f0 03 4c 66 43 20 97 1f a5
>3a4328		ea 48 a5 e9 48 a5 e8 48 a5 e7 48 20 86 1b 68 85
>3a4338		e7 68 85 e8 68 85 e9 68 85 ea 29 80 f0 1b 20 39
>3a4348		4f 90 3a c2 20 a0 09 00 b7 08 85 c0 e2 20 c8 c8
>3a4358		b7 08 85 c2 20 25 66 80 03 20 29 51 28 60 08 c2
>3a4368		20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00
>3a4378		c2 20 29 ff 00 20 d8 1c e2 20 dc d4 08 08 c2 20
>3a4388		48 a9 00 08 5b 68 28 e2 20 a9 05 8f d3 08 00 c2
>3a4398		20 29 ff 00 20 d8 1c e2 20 dc d4 08 08 e2 20 20
>3a43a8		f8 20 c9 00 f0 6d 20 86 1b e2 20 a5 27 c9 ff f0
>3a43b8		1b c9 02 d0 05 20 20 44 80 12 c9 00 d0 05 20 40
>3a43c8		44 80 09 c9 01 d0 4f 20 53 44 80 00 20 b8 1f a7
>3a43d8		00 f0 40 c9 3a f0 3c c9 2c f0 23 c9 3b f0 24 08
>3a43e8		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>3a43f8		00 c2 20 29 ff 00 20 d8 1c e2 20 dc d4 08 a9 09
>3a4408		20 18 00 20 97 1f 20 b8 1f a7 00 f0 09 c9 3a f0
>3a4418		05 80 93 20 c2 02 28 60 08 8b 08 c2 20 48 a9 00
>3a4428		08 5b 68 28 e2 20 c2 10 a0 00 00 b7 23 f0 06 20
>3a4438		18 00 c8 80 f6 ab 28 60 08 c2 20 20 46 14 a5 16
>3a4448		85 23 a5 18 85 25 20 20 44 28 60 08 20 8f 5b c2
>3a4458		20 a5 16 85 23 a5 18 85 25 20 20 44 28 60 08 e2
>3a4468		20 85 b5 4a 4a 4a 4a 29 0f 18 69 30 97 16 c8 a5
>3a4478		b5 29 0f 18 69 30 97 16 c8 28 60 e2 20 a9 8f 20
>3a4488		a4 20 08 20 86 1b e2 20 c2 10 af 0e 08 af 09 08
>3a4498		8f 0e 08 af 20 e7 13 a0 00 00 af 06 08 af 20 66
>3a44a8		44 a9 2f 97 16 c8 af 09 08 af 20 66 44 a9 2f 97
>3a44b8		16 c8 af 0f 08 af 20 66 44 af 0a 08 af 20 66 44
>3a44c8		a9 00 97 16 af 0e 08 af 29 f7 8f 0e 08 af c2 20
>3a44d8		a5 16 85 23 a5 18 85 25 e2 20 a9 02 85 27 28 e2
>3a44e8		20 20 97 1f 60 e2 20 a9 8f 20 a4 20 08 20 86 1b
>3a44f8		e2 20 c2 10 af 0e 08 af 09 08 8f 0e 08 af 20 e7
>3a4508		13 a0 00 00 af 04 08 af 29 7f 20 66 44 a9 3a 97
>3a4518		16 c8 af 02 08 af 20 66 44 a9 3a 97 16 c8 af 00
>3a4528		08 af 20 66 44 a9 00 97 16 af 0e 08 af 29 f7 8f
>3a4538		0e 08 af c2 20 a5 16 85 23 a5 18 85 25 e2 20 a9
>3a4548		02 85 27 28 e2 20 20 97 1f 60 e2 20 a9 8f 20 a4
>3a4558		20 08 20 86 1b e2 20 a9 01 85 27 a9 03 8f 00 e2
>3a4568		af a9 01 8f 01 e2 af c2 30 af 84 e8 af 8f 08 e2
>3a4578		af af 84 e8 af 29 ff 7f 8f 0a e2 af a9 ff ff 8f
>3a4588		0c e2 af a9 ff 7f 8f 0e e2 af ea ea ea af 08 e2
>3a4598		af 85 23 af 0a e2 af 85 25 28 e2 20 20 97 1f 60
>3a45a8		e2 20 a9 8f 20 a4 20 08 c2 30 20 86 1b 20 ce 05
>3a45b8		c2 20 a5 25 48 a5 23 48 20 b8 1f e2 20 a7 00 c9
>3a45c8		2c f0 03 4c 1f 46 20 97 1f 20 86 1b 20 f8 05 c2
>3a45d8		20 a5 23 48 20 b8 1f e2 20 a7 00 c9 2c f0 03 4c
>3a45e8		1f 46 20 97 1f 20 86 1b 20 f8 05 c2 20 a5 23 85
>3a45f8		8f e2 20 a5 25 85 91 c2 20 68 85 29 a9 00 00 85
>3a4608		2b 68 85 23 68 85 25 e2 20 a9 02 85 27 20 3f 16
>3a4618		e2 20 20 97 1f 28 60 08 c2 20 48 a9 00 08 5b 68
>3a4628		28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 d8
>3a4638		1c e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28
>3a4648		e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 d8 1c
>3a4658		e2 20 dc d4 08 e2 20 a9 8f 20 a4 20 08 c2 30 20
>3a4668		86 1b e2 20 a5 27 c9 02 f0 03 4c e1 46 c2 20 a5
>3a4678		25 48 a5 23 48 20 b8 1f e2 20 a7 00 c9 2c f0 03
>3a4688		4c 00 47 20 97 1f 20 86 1b e2 20 a5 27 c9 00 d0
>3a4698		48 c2 20 a5 23 85 8f c2 20 68 85 23 68 85 25 e2
>3a46a8		20 a9 02 85 27 e2 20 a0 00 00 b7 23 f0 03 c8 80
>3a46b8		f9 c2 20 98 38 e5 8f 30 09 85 29 a9 00 00 85 2b
>3a46c8		80 07 a9 00 00 85 29 85 2b e2 20 a9 00 85 2d 20
>3a46d8		3f 16 e2 20 20 97 1f 28 60 08 c2 20 48 a9 00 08
>3a46e8		5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00
>3a46f8		20 d8 1c e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b
>3a4708		68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20
>3a4718		d8 1c e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68
>3a4728		28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 d8
>3a4738		1c e2 20 dc d4 08 e2 20 a9 8f 20 a4 20 08 c2 30
>3a4748		20 86 1b e2 20 a5 27 c9 02 f0 03 4c aa 47 c2 20
>3a4758		a5 25 48 a5 23 48 20 b8 1f e2 20 a7 00 c9 2c f0
>3a4768		03 4c c9 47 20 97 1f 20 86 1b e2 20 a5 27 c9 00
>3a4778		d0 30 c2 20 a5 23 85 8f c2 20 a9 00 00 85 29 a9
>3a4788		00 00 85 2b e2 20 a9 00 85 2d c2 20 68 85 23 68
>3a4798		85 25 e2 20 a9 02 85 27 20 3f 16 e2 20 20 97 1f
>3a47a8		28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>3a47b8		8f d3 08 00 c2 20 29 ff 00 20 d8 1c e2 20 dc d4
>3a47c8		08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a47d8		d3 08 00 c2 20 29 ff 00 20 d8 1c e2 20 dc d4 08
>3a47e8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3
>3a47f8		08 00 c2 20 29 ff 00 20 d8 1c e2 20 dc d4 08 e2
>3a4808		20 a9 8f 20 a4 20 20 86 1b c2 10 e2 20 a5 27 c9
>3a4818		02 d0 23 c2 20 a5 00 85 40 a5 02 85 42 a5 23 85
>3a4828		00 a5 25 85 02 20 c3 07 a5 40 85 00 a5 42 85 02
>3a4838		e2 20 20 97 1f 60 08 c2 20 48 a9 00 08 5b 68 28
>3a4848		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 d8 1c
>3a4858		e2 20 dc d4 08 e2 20 a9 8f 20 a4 20 08 20 86 1b
>3a4868		c2 10 e2 20 a5 27 c9 00 d0 1a 20 46 14 c2 20 a5
>3a4878		16 85 23 a5 18 85 25 e2 20 a9 02 85 27 28 e2 20
>3a4888		20 97 1f 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a4898		a9 04 8f d3 08 00 c2 20 29 ff 00 20 d8 1c e2 20
>3a48a8		dc d4 08 e2 20 a9 8f 20 a4 20 08 20 86 1b 20 ce
>3a48b8		05 c2 20 64 0c 64 0e e2 30 a0 00 b7 23 c9 20 f0
>3a48c8		04 c9 24 d0 03 c8 80 f3 b7 23 20 f7 03 90 1e c2
>3a48d8		20 06 0c 26 0e 06 0c 26 0e 06 0c 26 0e 06 0c 26
>3a48e8		0e e2 20 20 18 04 05 0c 85 0c c8 80 db c2 20 a5
>3a48f8		0c 85 23 a5 0e 85 25 e2 20 a9 00 85 27 28 e2 20
>3a4908		20 97 1f 60 e2 20 a9 8f 20 a4 20 08 20 86 1b 20
>3a4918		3c 05 20 e7 13 e2 30 a0 ff a9 00 97 16 88 a5 23
>3a4928		29 0f aa bf 00 d0 3a 97 16 88 a5 23 29 f0 4a 4a
>3a4938		4a 4a aa bf 00 d0 3a 97 16 88 a5 24 85 23 a5 25
>3a4948		85 24 a5 26 85 25 a9 00 85 26 a5 23 d0 d0 a5 24
>3a4958		d0 cc a5 25 d0 c8 98 38 65 16 85 23 a5 17 85 24
>3a4968		a5 18 85 25 a5 19 85 26 a9 02 85 27 28 e2 20 20
>3a4978		97 1f 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a4988		04 8f d3 08 00 c2 20 29 ff 00 20 d8 1c e2 20 dc
>3a4998		d4 08 e2 20 a9 8f 20 a4 20 20 86 1b e2 20 a5 27
>3a49a8		c9 02 d0 1f 8b a5 25 48 ab c2 10 a6 23 20 d3 14
>3a49b8		ab 84 23 c2 20 64 25 e2 20 a9 00 85 27 e2 20 20
>3a49c8		97 1f 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a49d8		04 8f d3 08 00 c2 20 29 ff 00 20 d8 1c e2 20 dc
>3a49e8		d4 08 e2 20 a9 8f 20 a4 20 20 86 1b e2 20 a5 27
>3a49f8		c9 00 d0 12 e2 20 a7 23 85 23 64 24 64 25 64 30
>3a4a08		e2 20 20 97 1f 60 08 c2 20 48 a9 00 08 5b 68 28
>3a4a18		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 d8 1c
>3a4a28		e2 20 dc d4 08 e2 20 a9 8f 20 a4 20 20 86 1b e2
>3a4a38		20 a5 27 c9 00 d0 1d c2 20 a7 23 85 0c e2 20 a0
>3a4a48		02 00 b7 23 85 25 64 26 c2 20 a5 0c 85 23 e2 20
>3a4a58		20 97 1f 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a4a68		a9 04 8f d3 08 00 c2 20 29 ff 00 20 d8 1c e2 20
>3a4a78		dc d4 08 e2 20 a9 8f 20 a4 20 20 86 1b e2 20 a5
>3a4a88		27 c9 00 d0 0e c2 20 a7 23 85 23 64 25 e2 20 20
>3a4a98		97 1f 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a4aa8		04 8f d3 08 00 c2 20 29 ff 00 20 d8 1c e2 20 dc
>3a4ab8		d4 08 e2 20 a9 8f 20 a4 20 20 86 1b e2 20 a5 27
>3a4ac8		c9 00 d0 24 20 e7 13 a5 23 87 16 a9 00 a0 01 00
>3a4ad8		97 16 c2 20 a5 16 85 23 a5 18 85 25 e2 20 a9 02
>3a4ae8		85 27 e2 20 20 97 1f 60 08 c2 20 48 a9 00 08 5b
>3a4af8		68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20
>3a4b08		d8 1c e2 20 dc d4 08 e2 20 a9 8f 20 a4 20 20 86
>3a4b18		1b e2 20 a5 27 c9 02 d0 14 a7 23 85 23 64 24 64
>3a4b28		25 64 26 a9 00 85 27 e2 20 20 97 1f 60 08 c2 20
>3a4b38		48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2
>3a4b48		20 29 ff 00 20 d8 1c e2 20 dc d4 08 e2 20 a9 8f
>3a4b58		20 a4 20 20 86 1b e2 20 a5 27 c9 00 d0 39 e2 20
>3a4b68		a5 26 d0 52 a5 25 d0 4e a5 24 d0 4a c2 10 20 e7
>3a4b78		13 a4 23 e2 20 a9 00 97 16 88 30 07 a9 20 97 16
>3a4b88		88 10 fb a9 02 85 27 c2 20 a5 16 85 23 a5 18 85
>3a4b98		25 e2 20 20 97 1f 60 08 c2 20 48 a9 00 08 5b 68
>3a4ba8		28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 d8
>3a4bb8		1c e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28
>3a4bc8		e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 d8 1c
>3a4bd8		e2 20 dc d4 08 e2 20 a9 8f 20 a4 20 20 86 1b e2
>3a4be8		20 a5 27 c9 00 d0 39 e2 20 a5 26 d0 52 a5 25 d0
>3a4bf8		4e a5 24 d0 4a c2 10 20 e7 13 a4 23 e2 20 a9 00
>3a4c08		97 16 88 30 07 a9 09 97 16 88 10 fb a9 02 85 27
>3a4c18		c2 20 a5 16 85 23 a5 18 85 25 e2 20 20 97 1f 60
>3a4c28		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3
>3a4c38		08 00 c2 20 29 ff 00 20 d8 1c e2 20 dc d4 08 08
>3a4c48		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08
>3a4c58		00 c2 20 29 ff 00 20 d8 1c e2 20 dc d4 08 e2 20
>3a4c68		a9 8f 20 a4 20 20 86 1b e2 20 a5 27 c9 00 f0 23
>3a4c78		c9 01 f0 3e 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a4c88		a9 04 8f d3 08 00 c2 20 29 ff 00 20 d8 1c e2 20
>3a4c98		dc d4 08 c2 20 a5 25 10 21 49 ff ff 85 25 a5 23
>3a4ca8		49 ff ff 18 69 01 00 85 23 a5 25 69 00 00 85 25
>3a4cb8		80 08 e2 20 a5 26 29 7f 85 26 e2 20 20 97 1f 60
>3a4cc8		e2 20 a9 8f 20 a4 20 20 86 1b e2 20 a5 27 c9 00
>3a4cd8		d0 25 c2 20 a5 25 30 12 d0 04 a5 23 f0 13 a9 00
>3a4ce8		00 85 25 a9 01 00 85 23 80 07 a9 ff ff 85 25 85
>3a4cf8		23 e2 20 20 97 1f 60 08 c2 20 48 a9 00 08 5b 68
>3a4d08		28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 d8
>3a4d18		1c e2 20 dc d4 08 e2 20 a9 8f 20 a4 20 20 86 1b
>3a4d28		20 3c 05 e2 20 20 97 1f 60 e2 20 a9 8f 20 a4 20
>3a4d38		20 86 1b 20 aa 06 20 ef 5f e2 20 20 97 1f 60 e2
>3a4d48		20 a9 8f 20 a4 20 20 86 1b 20 aa 06 20 1e 60 e2
>3a4d58		20 20 97 1f 60 e2 20 a9 8f 20 a4 20 20 86 1b 20
>3a4d68		aa 06 20 4d 60 e2 20 20 97 1f 60 e2 20 a9 8f 20
>3a4d78		a4 20 20 86 1b 20 aa 06 20 7b 60 e2 20 20 97 1f
>3a4d88		60 e2 20 a9 8f 20 a4 20 20 86 1b 20 aa 06 20 a4
>3a4d98		61 e2 20 20 97 1f 60 e2 20 a9 8f 20 a4 20 20 86
>3a4da8		1b 20 aa 06 20 7a 61 e2 20 20 97 1f 60 e2 20 a9
>3a4db8		8f 20 a4 20 20 86 1b 20 aa 06 20 c6 61 e2 20 20
>3a4dc8		97 1f 60 e2 20 a9 8f 20 a4 20 20 86 1b 20 aa 06
>3a4dd8		20 5a 62 e2 20 20 97 1f 60 e2 20 a9 8f 20 a4 20
>3a4de8		20 86 1b 20 aa 06 20 dc 62 e2 20 20 97 1f 60 00
>3a4df8		ea 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30
>3a4e08		c2 20 a9 00 00 85 d9 e2 20 a9 36 85 db c2 30 a9
>3a4e18		00 00 a0 00 00 97 d9 a0 02 00 97 d9 a0 04 00 97
>3a4e28		d9 20 6d 1f 2b 28 60 8b 08 c2 20 a9 00 00 85 1a
>3a4e38		a9 36 00 85 1c 20 6d 1f 20 4c 22 28 ab 60 08 c2
>3a4e48		20 64 55 a9 ff 7f 85 59 20 c2 02 20 f8 20 29 ff
>3a4e58		00 c9 00 00 f0 2c c9 81 00 f0 1a 20 b8 1f 20 c3
>3a4e68		07 a5 23 85 55 20 f8 20 29 ff 00 c9 00 00 f0 12
>3a4e78		c9 81 00 d0 2a 20 a4 20 20 b8 1f 20 c3 07 a5 23
>3a4e88		85 59 a5 1c 48 a5 1a 48 a5 02 48 a5 00 48 20 49
>3a4e98		17 68 85 00 68 85 02 68 85 1a 68 85 1c 28 60 08
>3a4ea8		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>3a4eb8		00 c2 20 29 ff 00 20 d8 1c e2 20 dc d4 08 08 08
>3a4ec8		c2 20 48 a9 00 08 5b 68 28 c2 20 64 e4 64 e7 e2
>3a4ed8		20 64 e6 64 e9 64 ea c2 20 38 a5 d9 69 04 00 85
>3a4ee8		e1 e2 20 a5 db 69 00 85 e3 28 60 c9 5f f0 1a c9
>3a4ef8		3a b0 04 c9 30 b0 12 c9 5b b0 04 c9 41 b0 0a c9
>3a4f08		7b b0 04 c9 61 b0 02 18 60 38 60 08 e2 20 c2 10
>3a4f18		a0 00 00 b7 0c f0 0a d7 e7 d0 13 c8 c0 08 00 d0
>3a4f28		f2 b7 e7 20 41 04 20 f3 4e b0 03 28 38 60 28 18
>3a4f38		60 08 e2 20 c2 10 a0 00 00 a2 00 00 b7 e7 f0 0b
>3a4f48		20 41 04 9f 00 4e 00 c8 e8 80 f1 a9 00 9f 00 4e
>3a4f58		00 c2 20 a9 00 4e 85 e7 e2 20 a9 00 85 e9 c2 20
>3a4f68		a5 e4 85 08 d0 06 e2 20 a5 e6 f0 4d e2 20 a5 e6
>3a4f78		85 0a a5 ea a0 00 00 d7 08 d0 17 c2 20 18 a5 08
>3a4f88		69 01 00 85 0c e2 20 a5 0a 69 00 85 0e 20 13 4f
>3a4f98		b0 2a a0 0d 00 c2 20 b7 08 85 0c c8 c8 e2 20 b7
>3a4fa8		08 85 0e d0 06 c2 20 a5 0c f0 0e c2 20 a5 0c 85
>3a4fb8		08 e2 20 a5 0e 85 0a 80 b9 28 18 60 28 38 60 08
>3a4fc8		20 39 4f b0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a4fd8		20 a9 05 8f d3 08 00 c2 20 29 ff 00 20 d8 1c e2
>3a4fe8		20 dc d4 08 c2 30 a0 09 00 b7 08 85 23 c8 c8 b7
>3a4ff8		08 85 25 e2 20 a0 00 00 b7 08 85 27 28 60 08 c2
>3a5008		20 18 a5 e1 69 10 00 85 08 e2 20 a5 e3 69 00 85
>3a5018		0a c5 bc 90 27 c2 20 a5 08 c5 ba 90 1f 08 c2 20
>3a5028		48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2
>3a5038		20 29 ff 00 20 d8 1c e2 20 dc d4 08 c2 20 a5 e1
>3a5048		85 c0 e2 20 a5 e3 85 c2 c2 20 a5 08 85 e1 e2 20
>3a5058		a5 0a 85 e3 28 60 08 e2 20 a5 27 c5 ea f0 33 a5
>3a5068		ea c9 00 d0 05 20 3c 05 80 2f c9 01 d0 05 20 aa
>3a5078		06 80 26 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a5088		04 8f d3 08 00 c2 20 29 ff 00 20 d8 1c e2 20 dc
>3a5098		d4 08 c9 02 d0 03 20 d9 15 c2 10 20 06 50 c2 30
>3a50a8		18 a5 c0 69 01 00 85 08 e2 20 a5 c2 69 00 85 0a
>3a50b8		a0 00 00 a9 00 97 08 c8 c0 08 00 d0 f8 a0 00 00
>3a50c8		b7 e7 f0 10 20 41 04 20 f3 4e 90 08 97 08 c8 c0
>3a50d8		08 00 d0 ec c2 20 a0 09 00 a5 23 97 c0 a5 25 c8
>3a50e8		c8 97 c0 a5 e4 a0 0d 00 97 c0 c8 c8 e2 20 a5 e6
>3a50f8		97 c0 c2 20 a5 c0 85 e4 e2 20 a5 c2 85 e6 e2 20
>3a5108		a0 00 00 a5 27 97 c0 c9 02 f0 02 28 60 c2 20 a5
>3a5118		23 85 c0 e2 20 a5 25 85 c2 20 f5 11 20 0a 12 80
>3a5128		ea 08 c2 30 a5 e4 d0 06 e2 20 a5 e6 f0 05 20 39
>3a5138		4f b0 05 20 5e 50 80 4e e2 20 a5 27 c5 ea f0 33
>3a5148		a5 ea c9 00 d0 05 20 3c 05 80 2c c9 01 d0 05 20
>3a5158		aa 06 80 23 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a5168		a9 04 8f d3 08 00 c2 20 29 ff 00 20 d8 1c e2 20
>3a5178		dc d4 08 c9 02 f0 11 c2 30 a0 09 00 a5 23 97 08
>3a5188		c8 c8 a5 25 97 08 28 60 20 d9 15 a0 09 00 b7 08
>3a5198		85 c0 c8 c8 e2 20 b7 08 85 c2 20 f5 11 20 29 12
>3a51a8		e2 20 a5 27 c9 02 f0 02 80 cd c2 20 a5 23 85 c0
>3a51b8		e2 20 a5 25 85 c2 20 f5 11 20 0a 12 80 b9 08 20
>3a51c8		b8 1f e2 20 a7 00 20 cd 03 90 42 c2 20 a5 00 85
>3a51d8		e7 e2 20 a5 02 85 e9 20 97 1f a7 00 f0 0d c9 24
>3a51e8		f0 14 c9 25 f0 09 20 f3 4e b0 ec a9 01 80 0c 20
>3a51f8		97 1f a9 00 80 05 20 97 1f a9 02 85 ea 20 f8 20
>3a5208		c9 8f d0 06 a5 ea 09 80 85 ea 28 38 60 28 18 60
>3a5218		08 c2 20 18 a5 23 65 29 85 23 a5 25 65 2b 85 25
>3a5228		28 60 08 c2 20 38 a5 23 e5 29 85 23 a5 25 e5 2b
>3a5238		85 25 28 60 08 c2 20 3b 38 e9 0a 00 1b c2 30 a9
>3a5248		00 00 83 01 83 03 83 05 83 07 83 09 a5 25 10 18
>3a5258		a9 00 80 83 01 a5 25 49 ff ff 85 25 a5 23 49 ff
>3a5268		ff 1a 85 23 d0 02 e6 25 a5 2b 10 1a a3 01 49 00
>3a5278		80 83 01 a5 2b 49 ff ff 85 2b a5 29 49 ff ff 1a
>3a5288		85 29 d0 02 e6 2b a5 25 f0 04 a5 2b d0 5a a5 23
>3a5298		8f 00 01 00 a5 29 8f 02 01 00 af 04 01 00 83 03
>3a52a8		af 06 01 00 83 05 a5 25 8f 00 01 00 a5 29 8f 02
>3a52b8		01 00 18 af 04 01 00 63 05 83 05 af 06 01 00 63
>3a52c8		07 83 07 a5 23 8f 00 01 00 a5 2b 8f 02 01 00 18
>3a52d8		af 04 01 00 63 05 83 05 af 06 01 00 63 07 83 07
>3a52e8		a3 07 f0 23 a3 09 f0 1f 08 c2 20 48 a9 00 08 5b
>3a52f8		68 28 e2 20 a9 0d 8f d3 08 00 c2 20 29 ff 00 20
>3a5308		d8 1c e2 20 dc d4 08 c2 30 a3 01 10 16 a3 05 49
>3a5318		ff ff 83 05 a3 03 49 ff ff 1a 83 03 d0 05 a3 05
>3a5328		1a 83 05 a3 03 85 23 a3 05 85 25 c2 20 3b 18 69
>3a5338		0a 00 1b 28 60 08 c2 20 a5 23 c5 29 a5 25 e5 2b
>3a5348		50 03 49 00 80 30 06 64 23 64 25 80 07 a9 ff ff
>3a5358		85 23 85 25 28 60 08 c2 20 a5 23 c5 29 d0 0c a5
>3a5368		25 c5 2b d0 06 64 23 64 25 80 16 a5 29 c5 23 a5
>3a5378		2b e5 25 50 03 49 00 80 10 eb a9 ff ff 85 23 85
>3a5388		25 28 60 08 c2 20 a5 2b c5 25 d0 0f a5 29 c5 23
>3a5398		d0 09 a9 ff ff 85 23 85 25 80 04 64 23 64 25 28
>3a53a8		60 08 c2 20 a5 2b c5 25 d0 0c a5 29 c5 23 d0 06
>3a53b8		64 23 64 25 80 07 a9 ff ff 85 23 85 25 28 60 08
>3a53c8		c2 20 a5 23 c5 29 d0 0f a5 25 c5 2b d0 09 a9 ff
>3a53d8		ff 85 23 85 25 80 13 a5 29 c5 23 a5 2b e5 25 50
>3a53e8		03 49 00 80 30 e8 64 23 64 25 28 60 08 c2 20 a5
>3a53f8		23 c5 29 d0 0f a5 25 c5 2b d0 09 a9 ff ff 85 23
>3a5408		85 25 80 13 a5 23 c5 29 a5 25 e5 2b 50 03 49 00
>3a5418		80 30 e8 64 23 64 25 28 60 08 c2 20 8f 12 01 00
>3a5428		8a 8f 10 01 00 af 16 01 00 aa af 14 01 00 28 60
>3a5438		08 e2 20 a9 03 8f 00 e2 af a9 00 8f 01 e2 af c2
>3a5448		20 a5 23 8f 08 e2 af a5 25 8f 0a e2 af a9 00 00
>3a5458		8f 0c e2 af a9 00 01 8f 0e e2 af ea ea ea ea ea
>3a5468		ea af 08 e2 af 85 23 af 0a e2 af 85 25 a9 01 00
>3a5478		85 27 28 60 08 e2 20 a9 40 8f 00 e2 af 80 09 08
>3a5488		e2 20 a9 48 8f 00 e2 af a9 02 8f 01 e2 af c2 20
>3a5498		a5 23 8f 08 e2 af a5 25 8f 0a e2 af a5 29 8f 0c
>3a54a8		e2 af a5 2b 8f 0e e2 af ea ea ea e2 20 af 06 e2
>3a54b8		af 29 07 d0 10 c2 20 af 08 e2 af 85 23 af 0a e2
>3a54c8		af 85 25 28 60 20 68 55 80 f9 08 e2 20 a9 01 8f
>3a54d8		01 e2 af a9 00 8f 00 e2 af c2 20 a5 23 8f 08 e2
>3a54e8		af a5 25 8f 0a e2 af a5 29 8f 0c e2 af a5 2b 8f
>3a54f8		0e e2 af ea ea ea e2 20 af 05 e2 af 29 17 d0 10
>3a5508		c2 20 af 08 e2 af 85 23 af 0a e2 af 85 25 28 60
>3a5518		20 68 55 80 f9 08 e2 20 a9 00 8f 01 e2 af a9 00
>3a5528		8f 00 e2 af c2 20 a5 23 8f 08 e2 af a5 25 8f 0a
>3a5538		e2 af a5 29 8f 0c e2 af a5 2b 8f 0e e2 af ea ea
>3a5548		ea e2 20 af 04 e2 af 29 07 d0 10 c2 20 af 08 e2
>3a5558		af 85 23 af 0a e2 af 85 25 28 60 20 68 55 80 f9
>3a5568		e2 20 89 01 f0 20 00 08 c2 20 48 a9 00 08 5b 68
>3a5578		28 e2 20 a9 0c 8f d3 08 00 c2 20 29 ff 00 20 d8
>3a5588		1c e2 20 dc d4 08 89 02 f0 1f 08 c2 20 48 a9 00
>3a5598		08 5b 68 28 e2 20 a9 0d 8f d3 08 00 c2 20 29 ff
>3a55a8		00 20 d8 1c e2 20 dc d4 08 89 04 f0 1f 08 c2 20
>3a55b8		48 a9 00 08 5b 68 28 e2 20 a9 0e 8f d3 08 00 c2
>3a55c8		20 29 ff 00 20 d8 1c e2 20 dc d4 08 60 08 e2 20
>3a55d8		a9 00 8f 01 e2 af a9 02 8f 00 e2 af c2 20 a9 00
>3a55e8		a0 8f 0c e2 af a9 00 00 8f 0e e2 af a5 23 8f 08
>3a55f8		e2 af a5 25 8f 0a e2 af ea ea ea e2 20 af 04 e2
>3a5608		af 89 07 f0 01 00 c2 20 af 08 e2 af 85 23 af 0a
>3a5618		e2 af 85 25 28 60 08 e2 20 a9 01 8f 01 e2 af a9
>3a5628		02 8f 00 e2 af c2 20 a9 00 a0 8f 0c e2 af a9 00
>3a5638		00 8f 0e e2 af a5 23 8f 08 e2 af a5 25 8f 0a e2
>3a5648		af ea ea ea af 08 e2 af 85 23 af 0a e2 af 85 25
>3a5658		28 60 08 c2 20 a5 23 d0 0a a5 25 29 ff 7f d0 03
>3a5668		28 38 60 28 18 60 08 e2 20 38 e9 30 20 65 04 c2
>3a5678		20 29 ff 00 18 65 23 85 23 a5 25 69 00 00 85 25
>3a5688		28 60 08 e2 20 c9 30 90 04 c9 3a 90 1c c9 61 90
>3a5698		04 c9 67 90 0a c9 41 90 04 c9 47 90 07 80 31 38
>3a56a8		e9 57 80 08 38 e9 37 80 03 38 e9 30 06 23 26 24
>3a56b8		26 25 26 26 06 23 26 24 26 25 26 26 06 23 26 24
>3a56c8		26 25 26 26 06 23 26 24 26 25 26 26 05 23 85 23
>3a56d8		28 60 08 e2 20 c9 30 f0 06 c9 31 f0 0a 80 0f c2
>3a56e8		20 06 23 26 25 80 07 c2 20 38 26 23 26 25 28 60
>3a56f8		08 e2 30 a5 61 f0 0d aa a5 69 d0 15 a9 00 8f 01
>3a5708		e2 af 80 15 e2 20 a9 03 8f 01 e2 af ea ea ea 80
>3a5718		62 e2 20 a9 01 8f 01 e2 af e2 20 a9 43 8f 00 e2
>3a5728		af c2 20 a9 00 10 8f 08 e2 af a9 00 00 8f 0a e2
>3a5738		af c2 20 a9 00 a0 8f 0c e2 af a9 00 00 8f 0e e2
>3a5748		af ea ea ea ca f0 2c af 08 e2 af 8f 0c 08 00 af
>3a5758		0a e2 af 8f 0e 08 00 e2 20 a9 42 8f 00 e2 af c2
>3a5768		20 af 0c 08 00 8f 08 e2 af af 0e 08 00 8f 0a e2
>3a5778		af 80 be c2 20 af 08 e2 af 85 23 af 0a e2 af 85
>3a5788		25 e2 20 a9 01 85 27 28 60 08 c2 20 a5 5d 85 23
>3a5798		a5 5f 85 25 20 aa 59 c2 20 a5 23 85 29 a5 25 85
>3a57a8		2b c2 20 a5 59 85 23 a5 5b 85 25 20 d2 54 c2 20
>3a57b8		a5 55 85 29 a5 57 85 2b 20 87 54 c2 20 a5 23 85
>3a57c8		29 a5 25 85 2b 20 f8 56 20 1d 55 c2 20 a5 65 f0
>3a57d8		07 a5 25 09 00 80 85 25 e2 20 a9 01 85 27 28 60
>3a57e8		5a 08 c2 30 64 23 64 25 64 55 64 57 64 65 64 59
>3a57f8		64 5b a9 01 00 85 5d 64 5f 64 61 64 63 64 69 e2
>3a5808		20 a0 00 00 b7 00 c9 2b f0 33 c9 2d f0 2b c9 26
>3a5818		f0 3a 20 e6 03 90 03 82 ac 00 08 c2 20 48 a9 00
>3a5828		08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff
>3a5838		00 20 d8 1c e2 20 dc d4 08 a9 01 85 65 c8 b7 00
>3a5848		c9 26 f0 08 20 e6 03 90 d1 82 7a 00 c8 b7 00 c9
>3a5858		68 f0 0e c9 48 f0 0a c9 62 f0 4c c9 42 f0 48 80
>3a5868		b9 c8 b7 00 20 f7 03 b0 02 80 af 20 8a 56 c8 b7
>3a5878		00 20 f7 03 b0 f5 e2 20 a5 65 f0 11 c2 20 38 a9
>3a5888		00 00 e5 23 85 23 a9 00 00 e5 25 85 25 e2 20 a9
>3a5898		00 85 27 c2 20 18 98 65 00 85 00 a5 02 69 00 00
>3a58a8		85 02 e2 20 28 7a 60 c8 b7 00 c9 30 f0 07 c9 31
>3a58b8		f0 03 82 65 ff 20 da 56 c8 b7 00 c9 30 f0 f6 c9
>3a58c8		31 f0 f2 82 b0 ff 20 6e 56 c8 b7 00 c9 2e f0 08
>3a58d8		20 e6 03 b0 f1 82 9e ff c2 20 20 aa 59 c2 20 a5
>3a58e8		23 85 55 a5 25 85 57 64 23 64 25 e2 20 80 36 20
>3a58f8		6e 56 c2 20 a5 5f 8f 00 01 00 a9 0a 00 8f 02 01
>3a5908		00 af 04 01 00 85 5f a5 5d 8f 00 01 00 a9 0a 00
>3a5918		8f 02 01 00 af 04 01 00 85 5d af 06 01 00 18 65
>3a5928		5f 85 5f e2 20 c8 b7 00 c9 65 f0 24 c9 45 f0 20
>3a5938		20 e6 03 b0 ba c2 20 20 aa 59 c2 20 a5 23 85 59
>3a5948		a5 25 85 5b 64 23 64 25 20 91 57 e2 20 82 43 ff
>3a5958		c2 20 20 aa 59 c2 20 a5 23 85 59 a5 25 85 5b 64
>3a5968		23 64 25 e2 20 c8 b7 00 c9 2b f0 10 c9 2d f0 08
>3a5978		20 e6 03 b0 12 82 a2 fe a9 01 85 69 c8 b7 00 20
>3a5988		e6 03 b0 03 82 93 fe 20 6e 56 c8 b7 00 20 e6 03
>3a5998		b0 f5 c2 20 a5 23 85 61 a5 25 85 63 20 91 57 82
>3a59a8		f1 fe 08 20 38 54 28 60 08 c2 20 a9 a7 5c 85 29
>3a59b8		a9 3a 00 85 2b e2 20 a9 01 85 2d c2 20 20 83 5a
>3a59c8		c9 ff ff d0 0c a9 00 00 8d 23 08 8d 25 08 82 a1
>3a59d8		00 f4 00 00 f4 00 00 f4 00 00 e2 20 ad 26 08 29
>3a59e8		80 83 01 ad 25 08 2a ad 26 08 2a 83 02 a9 00 83
>3a59f8		06 ad 25 08 09 80 83 05 ad 24 08 83 04 ad 23 08
>3a5a08		83 03 a3 02 c9 96 f0 3a 90 1f 08 c2 20 48 a9 00
>3a5a18		08 5b 68 28 e2 20 a9 0d 8f d3 08 00 c2 20 29 ff
>3a5a28		00 20 d8 1c e2 20 dc d4 08 c2 20 a3 05 4a 83 05
>3a5a38		a3 03 6a 83 03 e2 20 a3 02 1a 83 02 c9 96 f0 02
>3a5a48		80 e7 a3 01 f0 1b c2 20 a3 03 49 ff ff 18 69 01
>3a5a58		00 8d 23 08 a3 05 49 ff ff 69 00 00 8d 25 08 80
>3a5a68		0c c2 20 a3 03 8d 23 08 a3 05 8d 25 08 c2 20 68
>3a5a78		68 68 e2 20 a9 00 8d 27 08 28 60 da 08 c2 20 a5
>3a5a88		25 48 a5 23 48 20 7c 54 20 5a 56 b0 11 a5 25 89
>3a5a98		00 80 d0 05 a9 01 00 80 08 a9 ff ff 80 03 a9 00
>3a5aa8		00 fa 86 23 fa 86 25 28 fa 60 08 c2 30 20 83 5a
>3a5ab8		c9 ff ff d0 05 20 18 05 80 03 20 2a 05 28 60 08
>3a5ac8		c2 30 20 83 5a c9 01 00 d0 05 20 18 05 80 03 20
>3a5ad8		2a 05 28 60 08 c2 30 20 83 5a c9 00 00 d0 05 20
>3a5ae8		18 05 80 03 20 2a 05 28 60 08 c2 30 20 83 5a c9
>3a5af8		01 00 f0 05 20 18 05 80 03 20 2a 05 28 60 08 c2
>3a5b08		30 20 83 5a c9 ff ff f0 05 20 18 05 80 03 20 2a
>3a5b18		05 28 60 08 c2 30 20 83 5a c9 00 00 f0 05 20 18
>3a5b28		05 80 03 20 2a 05 28 60 08 e2 20 97 23 c8 a9 00
>3a5b38		97 23 28 60 da 08 e2 20 c9 80 90 0a 48 a9 2d 20
>3a5b48		30 5b 68 49 ff 1a c2 30 29 ff 00 c9 64 00 90 0e
>3a5b58		a2 64 00 20 21 54 18 69 30 00 20 30 5b 8a a2 0a
>3a5b68		00 20 21 54 18 69 30 00 20 30 5b 8a 18 69 30 00
>3a5b78		20 30 5b 28 fa 60 08 e2 20 c2 10 a0 00 00 b7 23
>3a5b88		f0 03 c8 80 f9 28 60 08 e2 20 c2 10 f4 00 00 f4
>3a5b98		00 00 f4 00 00 20 5a 56 90 19 20 e7 13 e2 20 a0
>3a5ba8		00 00 a9 20 97 16 c8 a9 30 97 16 c8 a9 00 97 16
>3a5bb8		82 ce 00 e2 20 a5 26 10 08 29 7f 85 26 a9 01 83
>3a5bc8		01 c2 20 a9 00 00 83 03 c2 20 af a3 5c 3a 85 29
>3a5bd8		af a5 5c 3a 85 2b 20 83 5a 89 00 80 d0 12 20 1e
>3a5be8		56 a3 03 1a 83 03 20 83 5a c9 ff ff f0 12 80 ee
>3a5bf8		20 d5 55 a3 03 3a 83 03 20 83 5a c9 ff ff f0 f0
>3a5c08		e2 30 a5 25 0a a5 26 2a 83 05 38 a9 96 e3 05 aa
>3a5c18		f0 0f a5 25 09 80 85 25 46 25 66 24 66 23 ca d0
>3a5c28		f7 c2 10 e2 20 64 26 a9 00 85 27 a3 01 f0 11 c2
>3a5c38		20 38 a9 00 00 e5 23 85 23 a9 00 00 e5 25 85 25
>3a5c48		20 46 14 c2 20 a5 16 85 23 a5 18 85 25 20 7e 5b
>3a5c58		e2 20 c8 a9 00 97 23 88 88 b7 23 c8 97 23 c0 02
>3a5c68		00 d0 f4 a9 2e 97 23 e2 20 18 a3 03 69 05 83 06
>3a5c78		f0 19 20 7e 5b a9 45 20 30 5b a3 06 20 3c 5b 80
>3a5c88		0a c2 20 a5 16 85 23 a5 18 85 25 e2 20 a9 02 85
>3a5c98		27 c2 20 3b 18 69 06 00 1b 28 60 00 50 c3 47 00
>3a5ca8		00 80 3f f3 04 b5 3f f3 04 35 3f e2 20 a9 48 8f
>3a5cb8		00 e2 af c2 20 bd 00 00 8f 08 e2 af bd 02 00 8f
>3a5cc8		0a e2 af 88 e8 e8 e8 e8 e2 20 a9 00 8f 01 e2 af
>3a5cd8		c2 20 af 23 08 00 8f 0c e2 af af 25 08 00 8f 0e
>3a5ce8		e2 af ea ea ea af 08 e2 af 48 af 0a e2 af 8f 0a
>3a5cf8		e2 af 68 8f 08 e2 af e2 20 a9 02 8f 01 e2 af c2
>3a5d08		20 bd 00 00 8f 0c e2 af bd 02 00 8f 0e e2 af ea
>3a5d18		ea ea 88 f0 14 af 08 e2 af 48 af 0a e2 af 8f 0a
>3a5d28		e2 af 68 8f 08 e2 af 80 9b af 08 e2 af 8f 23 08
>3a5d38		00 af 0a e2 af 8f 25 08 00 60 e2 20 a9 00 8f 00
>3a5d48		e2 af a9 00 8f 01 e2 af c2 20 a5 23 8f 08 e2 af
>3a5d58		8f 0c e2 af af 25 08 00 8f 0a e2 af 8f 0e e2 af
>3a5d68		ea ea ea af 08 e2 af 85 23 af 0a e2 af 85 25 60
>3a5d78		e2 20 a9 00 8f 00 e2 af a9 01 8f 01 e2 af c2 20
>3a5d88		a5 23 8f 0c e2 af af 25 08 00 8f 0e e2 af af cc
>3a5d98		63 3a 8f 08 e2 af af ce 63 3a 8f 0a e2 af ea ea
>3a5da8		ea af 08 e2 af 85 23 af 0a e2 af 85 25 60 a2 00
>3a5db8		00 a5 23 c5 29 a5 25 e5 2b 90 1e a5 23 8f 08 e2
>3a5dc8		af a5 25 8f 0a e2 af ea ea ea af 08 e2 af 85 23
>3a5dd8		af 0a e2 af 85 25 e8 80 d8 60 e2 20 a5 26 10 09
>3a5de8		29 7f 85 26 a9 01 48 80 03 a9 00 48 a9 40 8f 00
>3a5df8		e2 af a9 02 8f 01 e2 af c2 30 af 34 64 3a 85 29
>3a5e08		8f 0c e2 af af 36 64 3a 85 2b 8f 0e e2 af 20 b6
>3a5e18		5d e2 20 68 c2 20 f0 1e a5 23 8f 08 e2 af a5 25
>3a5e28		8f 0a e2 af ea ea ea af 08 e2 af 85 23 af 0a e2
>3a5e38		af 29 ff 7f 85 25 60 5a a2 00 00 a0 00 00 a5 23
>3a5e48		df 38 64 3a a5 25 ff 3a 64 3a 90 2c bf 34 64 3a
>3a5e58		8f 08 e2 af bf 36 64 3a 8f 0a e2 af a5 23 8f 0c
>3a5e68		e2 af a5 25 8f 0e e2 af ea ea ea af 08 e2 af 85
>3a5e78		23 af 0a e2 af 85 25 38 98 2a a8 e8 e8 e8 e8 e0
>3a5e88		0c 00 d0 ba 98 aa 7a 60 08 c2 30 48 da 20 42 5d
>3a5e98		8b e2 20 a9 3a 48 ab c2 20 a2 74 63 5a a0 05 00
>3a5ea8		20 b3 5c 7a a9 01 00 8f 27 08 00 ab fa 68 28 60
>3a5eb8		08 c2 30 48 da a5 23 85 29 a5 25 85 2b 20 42 5d
>3a5ec8		8b e2 20 a9 3a 48 ab c2 20 a2 88 63 5a a0 05 00
>3a5ed8		20 b3 5c 7a ab 20 1d 55 fa 68 28 60 08 c2 30 48
>3a5ee8		da a5 23 85 29 a5 25 85 2b 20 42 5d 8b e2 20 a9
>3a5ef8		3a 48 ab c2 20 a2 9c 63 5a a0 05 00 20 b3 5c 7a
>3a5f08		ab 20 1d 55 fa 68 28 60 08 c2 30 48 da e2 20 a9
>3a5f18		40 8f 00 e2 af a9 02 8f 01 e2 af c2 20 a5 23 8f
>3a5f28		08 e2 af a5 25 8f 0a e2 af af cc 63 3a 8f 0c e2
>3a5f38		af af ce 63 3a 8f 0e e2 af ea ea ea af 08 e2 af
>3a5f48		85 0c af 0a e2 af 85 0e e2 20 a9 48 8f 00 e2 af
>3a5f58		c2 20 ea ea ea af 08 e2 af 85 10 af 0a e2 af 85
>3a5f68		12 e2 20 a9 01 8f 01 e2 af c2 20 a5 0c 8f 08 e2
>3a5f78		af a5 0e 8f 0a e2 af a5 10 8f 0c e2 af a5 12 8f
>3a5f88		0e e2 af ea ea ea af 08 e2 af 85 23 af 0a e2 af
>3a5f98		85 25 e2 20 a9 08 8f 00 e2 af a9 02 8f 01 e2 af
>3a5fa8		c2 20 a5 23 8f 08 e2 af a5 25 8f 0a e2 af ea ea
>3a5fb8		ea af 08 e2 af 85 29 af 0a e2 af 85 2b 20 42 5d
>3a5fc8		8b e2 20 a9 3a 48 ab c2 20 a2 b0 63 5a a0 08 00
>3a5fd8		20 b3 5c 7a a9 01 00 8f 27 08 00 8f 2d 08 00 20
>3a5fe8		1d 55 ab fa 68 28 60 08 c2 30 48 da 20 e2 5d 20
>3a5ff8		3f 5e da 8a 29 01 00 d0 05 20 b8 5e 80 03 20 90
>3a6008		5e fa 8a 29 04 00 f0 0a e2 20 a5 26 09 80 85 26
>3a6018		c2 20 fa 68 28 60 08 c2 30 48 da 20 e2 5d 20 3f
>3a6028		5e da 8a 29 01 00 d0 05 20 90 5e 80 03 20 b8 5e
>3a6038		fa 8a 29 02 00 f0 0a e2 20 a5 26 09 80 85 26 c2
>3a6048		20 fa 68 28 60 08 c2 30 48 da 20 e2 5d 20 3f 5e
>3a6058		20 e4 5e 8a 29 01 00 f0 03 20 78 5d 8a e2 20 4a
>3a6068		4a 69 00 29 01 f0 06 a5 26 09 80 85 26 c2 20 fa
>3a6078		68 28 60 08 c2 30 48 da 5a a5 25 10 1f 08 c2 20
>3a6088		48 a9 00 08 5b 68 28 e2 20 a9 17 8f d3 08 00 c2
>3a6098		20 29 ff 00 20 d8 1c e2 20 dc d4 08 c2 30 a5 23
>3a60a8		cf cc 63 3a a5 25 cf ce 63 3a b0 04 20 78 5d 18
>3a60b8		a9 00 00 a8 2a 48 e2 20 a9 00 8f 00 e2 af a9 01
>3a60c8		8f 01 e2 af c2 20 af 24 64 3a 85 29 8f 0c e2 af
>3a60d8		af 26 64 3a 85 2b 8f 0e e2 af 20 b6 5d 8a f0 07
>3a60e8		0a 0a 0a 0a 0a 0a a8 af 28 64 3a 85 29 8f 0c e2
>3a60f8		af af 2a 64 3a 85 2b 8f 0e e2 af 20 b6 5d 8a f0
>3a6108		0b 0a 0a 0a 0a 85 29 18 98 65 29 a8 af 2c 64 3a
>3a6118		85 29 8f 0c e2 af af 2e 64 3a 85 2b 8f 0e e2 af
>3a6128		20 b6 5d 8a f0 09 0a 0a 85 29 18 98 65 29 a8 af
>3a6138		30 64 3a 85 29 8f 0c e2 af af 32 64 3a 85 2b 8f
>3a6148		0e e2 af 20 b6 5d 86 29 18 98 65 29 a8 20 10 5f
>3a6158		a5 23 85 29 a5 25 85 2b 98 85 23 64 25 20 aa 59
>3a6168		20 87 54 68 d0 07 a5 25 09 00 80 85 25 7a fa 68
>3a6178		28 60 08 c2 30 48 da a5 23 85 29 a5 25 85 2b 20
>3a6188		42 5d 8b e2 20 a9 3a 48 ab c2 20 a2 d4 63 a0 05
>3a6198		00 20 b3 5c ab 20 1d 55 fa 68 28 60 08 c2 30 48
>3a61a8		da 20 7a 61 af 3c 64 3a 85 29 af 3e 64 3a 85 2b
>3a61b8		20 7c 54 a5 25 49 00 80 85 25 fa 68 28 60 08 c2
>3a61c8		30 48 da a5 23 85 29 a5 25 85 2b 20 42 5d 8b e2
>3a61d8		20 a9 3a 48 ab c2 20 a2 e8 63 a0 05 00 20 b3 5c
>3a61e8		ab 20 1d 55 fa 68 28 60 c2 20 a5 23 85 29 a5 25
>3a61f8		85 2b c2 20 af cc 63 3a 85 23 af ce 63 3a 85 25
>3a6208		8a f0 30 4a aa 90 03 20 1d 55 c2 20 a5 25 48 a5
>3a6218		23 48 c2 20 a5 29 85 23 a5 2b 85 25 20 42 5d c2
>3a6228		20 a5 23 85 29 a5 25 85 2b c2 20 68 85 23 68 85
>3a6238		25 80 cd 60 08 c2 30 48 da 8b e2 20 a9 3a 48 ab
>3a6248		c2 20 a2 fc 63 5a a0 0a 00 20 b3 5c 7a ab fa 68
>3a6258		28 60 08 c2 30 48 da 5a a5 23 05 25 d0 10 c2 20
>3a6268		af cc 63 3a 85 23 af ce 63 3a 85 25 80 61 a5 25
>3a6278		29 00 80 a8 f0 07 a5 25 29 ff 7f 85 25 c2 20 a5
>3a6288		25 48 a5 23 48 20 3c 05 a6 23 20 aa 06 c2 20 a5
>3a6298		23 85 29 a5 25 85 2b c2 20 68 85 23 68 85 25 20
>3a62a8		7c 54 20 3c 62 c2 20 a5 25 48 a5 23 48 c2 20 af
>3a62b8		30 64 3a 85 23 af 32 64 3a 85 25 20 f0 61 c2 20
>3a62c8		68 85 29 68 85 2b 20 1d 55 98 f0 03 20 78 5d 7a
>3a62d8		fa 68 28 60 08 c2 30 48 a5 25 10 1f 08 c2 20 48
>3a62e8		a9 00 08 5b 68 28 e2 20 a9 17 8f d3 08 00 c2 20
>3a62f8		29 ff 00 20 d8 1c e2 20 dc d4 08 c2 30 05 23 f0
>3a6308		68 c2 20 af d0 63 3a 85 29 af d2 63 3a 85 2b e2
>3a6318		20 a9 01 85 2d c2 20 c2 20 a5 25 48 a5 23 48 20
>3a6328		d2 54 a5 25 c5 2b d0 09 a5 23 45 29 29 f8 ff f0
>3a6338		30 20 87 54 c2 20 af d0 63 3a 85 29 af d2 63 3a
>3a6348		85 2b 20 d2 54 c2 20 a5 23 85 29 a5 25 85 2b c2
>3a6358		20 68 85 23 68 85 25 c2 20 a5 25 48 a5 23 48 80
>3a6368		be c2 20 68 85 29 68 85 2b 68 28 60 01 0d d0 37
>3a6378		61 0b b6 ba ab aa 2a 3d 00 00 00 bf 00 00 80 3f
>3a6388		1d ef 38 36 01 0d 50 b9 89 88 08 3c ab aa 2a be
>3a6398		00 00 80 3f a4 27 b3 3c d1 0d 5d 3d 89 88 08 3e
>3a63a8		ab aa aa 3e 00 00 80 3f 89 88 88 3d d9 89 9d 3d
>3a63b8		8c 2e ba 3d 39 8e e3 3d 25 49 12 3e cd cc 4c 3e
>3a63c8		ab aa aa 3e 00 00 80 3f 00 00 00 40 8e e3 f8 3c
>3a63d8		6e db 36 3d 9a 99 99 3d ab aa 2a 3e 00 00 80 3f
>3a63e8		39 8e e3 3d 25 49 12 be cd cc 4c 3e ab aa aa be
>3a63f8		00 00 80 3f 1d ef 38 36 01 0d d0 37 01 0d 50 39
>3a6408		61 0b b6 3a 89 88 08 3c ab aa 2a 3d ab aa 2a 3e
>3a6418		00 00 00 3f 00 00 80 3f 00 00 80 3f c1 2c a1 6d
>3a6428		5f 97 07 4b 81 64 5a 42 54 f8 2d 40 db 0f c9 40
>3a6438		db 0f 49 40 db 0f c9 3f db 0f 49 3f 08 20 f5 11
>3a6448		c2 20 a9 01 00 85 23 a9 00 00 85 25 e2 20 af 00
>3a6458		4d 00 c2 20 29 ff 00 85 8f a8 a2 01 00 c2 20 bf
>3a6468		00 4d 00 85 29 a9 00 00 85 2b 20 cd 26 e8 e8 88
>3a6478		d0 eb c2 20 a9 04 00 85 29 a9 00 00 85 2b 20 cd
>3a6488		26 e2 20 af 00 4d 00 85 0c a9 00 85 0d c2 20 06
>3a6498		0c 38 a5 23 65 0c 85 23 a5 25 69 00 00 85 25 d0
>3a64a8		29 e2 20 a5 ea 09 80 a6 23 20 b9 0f e2 20 af 00
>3a64b8		4d 00 87 c0 a0 01 00 a2 00 00 e2 20 bf 01 4d 00
>3a64c8		97 c0 e4 8f f0 23 e8 c8 80 f0 08 c2 20 48 a9 00
>3a64d8		08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff
>3a64e8		00 20 d8 1c e2 20 dc d4 08 e2 20 38 a5 c0 67 c0
>3a64f8		85 08 a5 c1 69 00 85 09 a5 c2 69 00 85 0a 64 0b
>3a6508		c2 20 a0 05 00 b7 c3 85 0c e2 20 c8 c8 b7 c3 85
>3a6518		0e 64 0f e2 20 a9 00 87 08 c2 20 18 a5 08 69 01
>3a6528		00 85 08 a5 0a 69 00 00 85 0a c5 0e d0 e5 a5 08
>3a6538		c5 0c d0 df 28 60 08 c2 20 64 08 64 0a e2 20 af
>3a6548		00 4d 00 85 8f 64 90 a2 01 00 e2 20 a7 c0 c5 8f
>3a6558		f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a
>3a6568		8f d3 08 00 c2 20 29 ff 00 20 d8 1c e2 20 dc d4
>3a6578		08 c9 01 f0 3a a0 01 00 e2 20 bf 00 4d 00 85 23
>3a6588		64 24 64 25 64 26 b7 c0 85 29 64 2a 64 2b 64 2c
>3a6598		a5 23 c5 29 b0 68 20 cd 26 c2 20 18 a5 08 65 23
>3a65a8		85 08 a5 0a 65 25 85 0a e8 e8 c8 c4 8f d0 c9 e2
>3a65b8		20 18 bf 00 4d 00 85 90 65 08 85 08 a5 09 69 00
>3a65c8		85 09 c2 20 a5 0a 69 00 00 85 0a c2 20 06 08 26
>3a65d8		0a 06 08 26 0a e2 20 38 a5 08 65 8f 85 08 a5 09
>3a65e8		69 00 85 09 c2 20 a5 0a 69 00 00 85 0a 18 a5 08
>3a65f8		65 c0 85 08 e2 20 a5 0a 65 c2 85 0a 28 60 08 c2
>3a6608		20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00
>3a6618		c2 20 29 ff 00 20 d8 1c e2 20 dc d4 08 08 20 f5
>3a6628		11 e2 20 a0 00 00 b7 c3 29 7f c5 27 d0 28 a5 27
>3a6638		48 c2 20 a5 25 48 a5 23 48 20 3e 65 68 85 23 68
>3a6648		85 25 e2 20 68 85 27 c2 20 a5 23 87 08 a0 02 00
>3a6658		a5 25 97 08 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a6668		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 d8 1c
>3a6678		e2 20 dc d4 08 08 20 f5 11 f4 00 00 f4 00 00 e2
>3a6688		20 48 20 3e 65 e2 20 68 c2 20 68 68 c2 20 a7 08
>3a6698		85 23 a0 02 00 b7 08 85 25 e2 20 a0 00 00 b7 c3
>3a66a8		29 7f 85 27 28 60 da 0b 08 08 c2 20 48 a9 00 08
>3a66b8		5b 68 28 c2 30 a5 25 89 f0 ff d0 29 89 0f 00 d0
>3a66c8		0c a5 23 89 00 fc d0 05 20 40 44 80 2e a2 0a 00
>3a66d8		46 25 66 23 ca d0 f9 20 40 44 e2 20 a9 4b 20 18
>3a66e8		00 c2 20 80 16 a2 14 00 46 25 66 23 ca d0 f9 20
>3a66f8		40 44 e2 20 a9 4d 20 18 00 c2 20 28 2b fa 60 0b
>3a6708		08 c2 30 a9 00 00 8f b6 08 00 8f b8 08 00 e2 20
>3a6718		20 f8 20 c9 00 f0 08 20 86 1b 20 ce 05 80 11 c2
>3a6728		20 a9 00 00 85 23 85 25 e2 20 a9 02 85 27 c2 20
>3a6738		20 68 68 22 08 11 00 b0 22 20 19 69 08 c2 20 48
>3a6748		a9 00 08 5b 68 28 e2 20 a9 10 8f d3 08 00 c2 20
>3a6758		29 ff 00 20 d8 1c e2 20 dc d4 08 20 c2 02 08 c2
>3a6768		20 48 a9 20 03 5b 68 28 e2 20 a0 00 00 b7 18 d0
>3a6778		03 82 a9 00 c9 e5 d0 03 82 96 00 a0 0b 00 b7 18
>3a6788		89 08 f0 03 82 a9 00 89 02 f0 03 82 83 00 29 0f
>3a6798		c9 0f d0 03 82 7a 00 a0 00 00 b7 18 20 18 00 c8
>3a67a8		c0 08 00 d0 f5 a9 20 20 18 00 a0 08 00 b7 18 20
>3a67b8		18 00 c8 c0 0b 00 d0 f5 a9 09 20 18 00 a0 0b 00
>3a67c8		b7 18 89 10 d0 1e c2 20 a0 1c 00 b7 18 8f 23 08
>3a67d8		00 c8 c8 b7 18 8f 25 08 00 e2 20 a9 00 8f 27 08
>3a67e8		00 20 ae 66 a9 09 20 18 00 a0 0b 00 b7 18 89 08
>3a67f8		d0 1c 89 01 f0 05 a9 52 20 18 00 89 04 f0 05 a9
>3a6808		53 20 18 00 89 10 f0 05 a9 44 20 18 00 ea 20 c2
>3a6818		02 20 d9 02 22 0c 11 00 90 03 82 41 ff 20 19 69
>3a6828		08 c2 20 48 a9 00 08 5b 68 28 20 dc 1f 28 2b 60
>3a6838		08 c2 20 48 a9 20 03 5b 68 28 e2 20 29 0f c9 0f
>3a6848		f0 cf a9 5b 20 18 00 a0 00 00 b7 18 c9 20 f0 09
>3a6858		20 18 00 c8 c0 08 00 d0 f1 a9 5d 20 18 00 80 ae
>3a6868		0b 08 08 c2 20 48 a9 20 03 5b 68 28 c2 30 a9 73
>3a6878		f2 85 20 a9 3a 00 85 22 a0 00 00 e2 20 a9 00 97
>3a6888		20 c8 c0 1e 00 d0 f8 c2 20 a9 73 f0 8f 81 f2 3a
>3a6898		a9 3a 00 8f 83 f2 3a af 23 08 00 8f 75 f2 3a af
>3a68a8		25 08 00 8f 77 f2 3a 28 2b 60 08 c2 30 20 b8 1f
>3a68b8		20 86 1b 20 ce 05 20 68 68 e2 20 a9 2c 85 37 20
>3a68c8		d9 20 b0 0f c2 20 a9 ff ff 8f 54 03 00 8f 56 03
>3a68d8		00 80 17 20 97 1f 20 86 1b 20 3c 05 c2 20 a5 23
>3a68e8		8f 54 03 00 a5 25 8f 56 03 00 22 18 11 00 b0 1f
>3a68f8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 11 8f d3
>3a6908		08 00 c2 20 29 ff 00 20 d8 1c e2 20 dc d4 08 28
>3a6918		60 8b 0b 08 08 c2 20 48 a9 00 08 5b 68 28 08 e2
>3a6928		20 48 a9 00 48 ab 68 28 e2 20 af 2e 03 00 85 23
>3a6938		a9 00 85 24 85 25 85 26 a9 00 85 27 85 ea a9 3a
>3a6948		85 e9 c2 20 a9 7c 69 85 e7 20 29 51 e2 20 af 20
>3a6958		03 00 85 23 a9 00 85 24 85 25 85 26 a9 00 85 27
>3a6968		85 ea a9 3a 85 e9 c2 20 a9 84 69 85 e7 20 29 51
>3a6978		28 2b ab 60 44 4f 53 53 54 41 54 00 42 49 4f 53
>3a6988		53 54 41 54 00 08 c2 30 20 b8 1f 20 86 1b 20 ce
>3a6998		05 a5 23 8f 60 03 00 a5 25 8f 62 03 00 a9 ff ff
>3a69a8		8f 54 03 00 8f 56 03 00 22 24 11 00 b0 25 20 d8
>3a69b8		1c 20 19 69 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a69c8		a9 11 8f d3 08 00 c2 20 29 ff 00 20 d8 1c e2 20
>3a69d8		dc d4 08 20 d8 1c 28 60 08 c2 30 20 b8 1f 20 86
>3a69e8		1b 20 ce 05 20 68 68 a9 00 00 8f 54 03 00 a9 01
>3a69f8		00 8f 56 03 00 20 fa 4d 22 18 11 00 b0 22 20 19
>3a6a08		69 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 11 8f
>3a6a18		d3 08 00 c2 20 29 ff 00 20 d8 1c e2 20 dc d4 08
>3a6a28		20 19 69 c2 20 a2 12 00 18 bf 73 f2 3a 69 00 00
>3a6a38		85 92 bf 75 f2 3a 69 01 00 85 94 e2 20 a9 00 87
>3a6a48		92 c2 20 a9 00 00 85 7a a9 01 00 85 7c a2 00 00
>3a6a58		e2 20 a7 7a f0 2a c9 0d f0 12 c9 0a f0 04 9d 00
>3a6a68		4f e8 c2 20 e6 7a d0 e8 e6 7c 80 e4 e2 20 a9 00
>3a6a78		9d 00 4f 20 04 26 c2 20 e6 7a d0 d1 e6 7c 80 cd
>3a6a88		e0 00 00 f0 0a e2 20 a9 00 9d 00 4f 20 04 26 28
>3a6a98		60 08 c2 30 20 b8 1f 20 86 1b 20 ce 05 20 68 68
>3a6aa8		e2 20 a9 2c 20 a4 20 c2 20 20 86 1b 20 3c 05 a5
>3a6ab8		23 8f 50 03 00 a5 25 8f 52 03 00 e2 20 a9 2c c2
>3a6ac8		20 20 a4 20 20 86 1b 20 3c 05 a5 23 8f 58 03 00
>3a6ad8		a5 25 8f 5a 03 00 22 1c 11 00 b0 22 20 19 69 08
>3a6ae8		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 12 8f d3 08
>3a6af8		00 c2 20 29 ff 00 20 d8 1c e2 20 dc d4 08 20 19
>3a6b08		69 28 60 da 5a 08 a2 00 00 a0 00 00 e2 20 b7 23
>3a6b18		9d 00 04 f0 04 e8 c8 80 f5 28 7a fa 60 08 c2 30
>3a6b28		20 b8 1f 20 86 1b 20 ce 05 20 68 68 a9 00 00 85
>3a6b38		a6 e2 20 a9 01 85 a8 a9 20 85 b4 c2 20 a9 00 00
>3a6b48		85 ab a9 ff ff 85 a9 c2 20 a9 00 00 85 55 85 57
>3a6b58		a9 ff ff 85 59 a9 ff 7f 85 5b 20 49 17 e2 20 a9
>3a6b68		80 85 b4 c2 20 c6 ab 18 a9 00 00 8f 50 03 00 65
>3a6b78		ab 8f 58 03 00 a9 01 00 8f 52 03 00 69 00 00 8f
>3a6b88		5a 03 00 22 1c 11 00 b0 22 20 19 69 08 c2 20 48
>3a6b98		a9 00 08 5b 68 28 e2 20 a9 12 8f d3 08 00 c2 20
>3a6ba8		29 ff 00 20 d8 1c e2 20 dc d4 08 20 19 69 28 60
>3a6bb8		08 c2 30 20 b8 1f 20 86 1b 20 ce 05 20 0b 6b 22
>3a6bc8		04 11 00 b0 22 20 19 69 08 c2 20 48 a9 00 08 5b
>3a6bd8		68 28 e2 20 a9 13 8f d3 08 00 c2 20 29 ff 00 20
>3a6be8		d8 1c e2 20 dc d4 08 20 19 69 28 60 da 08 e2 20
>3a6bf8		c9 61 90 08 c9 7b b0 04 29 df 80 13 c9 20 90 13
>3a6c08		a2 00 00 df 1f 6c 3a f0 0a e8 e0 0f 00 d0 f4 28
>3a6c18		38 fa 6b 28 18 fa 6b 2a 2b 2c 2f 3a 3b 3c 3d 3e
>3a6c28		3f 5c 5b 5d 7c 22 08 08 c2 20 48 a9 00 08 5b 68
>3a6c38		28 c2 30 20 86 1b 20 ce 05 20 0b 6b 22 10 11 00
>3a6c48		b0 22 20 19 69 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a6c58		20 a9 14 8f d3 08 00 c2 20 29 ff 00 20 d8 1c e2
>3a6c68		20 dc d4 08 e2 20 a9 2c 20 a4 20 c2 20 20 86 1b
>3a6c78		20 ce 05 ad 38 03 85 08 ad 3a 03 85 0a e2 20 a2
>3a6c88		00 00 a9 20 95 7e e8 e0 0b 00 d0 f8 a2 00 00 a0
>3a6c98		00 00 b7 23 f0 76 c9 2e f0 39 22 f4 6b 3a b0 1f
>3a6ca8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d3
>3a6cb8		08 00 c2 20 29 ff 00 20 d8 1c e2 20 dc d4 08 95
>3a6cc8		7e c8 e8 c0 08 00 d0 ca b7 23 f0 40 c9 2e f0 03
>3a6cd8		c8 80 f5 c8 a2 08 00 b7 23 f0 31 22 f4 6b 3a b0
>3a6ce8		22 20 19 69 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a6cf8		a9 0a 8f d3 08 00 c2 20 29 ff 00 20 d8 1c e2 20
>3a6d08		dc d4 08 95 7e c8 e8 c0 0c 00 d0 cb a2 00 00 a0
>3a6d18		00 00 b5 7e 97 08 e8 c8 c0 0b 00 d0 f5 22 14 11
>3a6d28		00 b0 22 20 19 69 08 c2 20 48 a9 00 08 5b 68 28
>3a6d38		e2 20 a9 15 8f d3 08 00 c2 20 29 ff 00 20 d8 1c
>3a6d48		e2 20 dc d4 08 20 19 69 28 60 08 08 c2 20 48 a9
>3a6d58		00 08 5b 68 28 c2 30 20 86 1b 20 ce 05 a5 23 8f
>3a6d68		64 03 00 a5 25 8f 66 03 00 e2 20 a9 2c 20 a4 20
>3a6d78		c2 20 20 86 1b 20 ce 05 a5 23 8f 68 03 00 a5 25
>3a6d88		8f 6a 03 00 22 30 11 00 b0 1f 08 c2 20 48 a9 00
>3a6d98		08 5b 68 28 e2 20 a9 16 8f d3 08 00 c2 20 29 ff
>3a6da8		00 20 d8 1c e2 20 dc d4 08 28 60 5c 73 87 3a 5c
>3a6db8		c4 85 3a 5c 74 87 3a 5c f0 76 3a 5c 4d 77 3a 5c
>3a6dc8		80 76 3a 5c 06 76 3a 5c 83 7b 3a 5c 71 72 3a 5c
>3a6dd8		9e 75 3a 5c 59 75 3a 5c e3 74 3a 5c 82 86 3a 5c
>3a6de8		7f 73 3a 5c d2 71 3a 5c fd 86 3a 5c ad 72 3a 5c
>3a6df8		76 87 3a 5c 6f 87 3a 5c 9c 74 3a 5c 77 87 3a 18
>3a6e08		fb c2 20 a9 ff fe 1b 58 5c 14 6e 3a c2 30 22 d2
>3a6e18		71 3a 20 08 00 20 0c 00 8b e2 20 a9 00 48 ab a2
>3a6e28		00 4f 20 50 04 ab 22 b7 6d 3a 22 bf 6d 3a 80 e2
>3a6e38		08 8b e2 20 a9 3a 48 ab c2 10 a2 4b 6e 20 4f 03
>3a6e48		ab 28 6b 41 20 3c 73 74 61 72 74 3e 20 3c 61 73
>3a6e58		73 65 6d 62 6c 79 3e 0d 20 20 41 73 73 65 6d 62
>3a6e68		6c 65 20 61 20 70 72 6f 67 72 61 6d 0d 0d 43 20
>3a6e78		3c 73 74 61 72 74 31 3e 20 3c 73 74 61 72 74 32
>3a6e88		3e 20 5b 6c 65 6e 20 28 31 20 69 66 20 62 6c 61
>3a6e98		6e 6b 29 5d 0d 20 20 43 6f 6d 70 61 72 65 20 74
>3a6ea8		6f 20 73 65 63 74 69 6f 6e 73 20 6f 66 20 6d 65
>3a6eb8		6d 6f 72 79 0d 0d 44 20 3c 73 74 61 72 74 3e 20
>3a6ec8		5b 65 6e 64 5d 0d 20 20 44 69 73 61 73 73 65 6d
>3a6ed8		62 6c 65 20 61 20 70 72 6f 67 72 61 6d 0d 0d 46
>3a6ee8		20 3c 73 74 61 72 74 3e 20 3c 65 6e 64 3e 20 3c
>3a6ef8		62 79 74 65 3e 0d 20 20 46 69 6c 6c 20 61 20 62
>3a6f08		6c 6f 63 6b 20 6f 66 20 6d 65 6d 6f 72 79 20 77
>3a6f18		69 74 68 20 61 20 62 79 74 65 0d 0d 47 20 5b 61
>3a6f28		64 64 72 65 73 73 5d 0d 20 20 53 74 61 72 74 20
>3a6f38		65 78 65 63 75 74 69 6f 6e 20 61 74 20 61 20 6c
>3a6f48		6f 63 61 74 69 6f 6e 0d 0d 4a 20 5b 61 64 64 72
>3a6f58		65 73 73 5d 20 2d 20 4a 75 6d 70 20 74 6f 20 61
>3a6f68		20 6c 6f 63 61 74 69 6f 6e 20 69 6e 20 6d 65 6d
>3a6f78		6f 72 79 0d 20 20 4a 75 6d 70 20 74 6f 20 61 20
>3a6f88		6c 6f 63 61 74 69 6f 6e 20 69 6e 20 6d 65 6d 6f
>3a6f98		72 79 0d 0d 48 20 3c 73 74 61 72 74 3e 20 3c 65
>3a6fa8		6e 64 3e 20 3c 62 79 74 65 3e 20 5b 62 79 74 65
>3a6fb8		5d 2e 2e 0d 20 20 48 75 6e 74 20 66 6f 72 20 76
>3a6fc8		61 6c 75 65 73 20 69 6e 20 6d 65 6d 6f 72 79 0d
>3a6fd8		0d 4c 20 20 20 20 20 4c 4f 41 44 20 20 20 20 20
>3a6fe8		20 20 20 20 22 46 69 6c 65 22 20 5b 64 65 73 74
>3a6ff8		69 6e 61 74 69 6f 6e 5d 0d 4d 20 3c 73 74 61 72
>3a7008		74 3e 20 5b 65 6e 64 5d 0d 20 20 44 75 6d 70 20
>3a7018		74 68 65 20 76 61 6c 75 65 20 69 6e 20 6d 65 6d
>3a7028		6f 72 79 0d 0d 52 20 2d 20 44 69 73 70 6c 61 79
>3a7038		20 74 68 65 20 76 61 6c 75 65 73 20 6f 66 20 74
>3a7048		68 65 20 72 65 67 69 73 74 65 72 73 0d 0d 3b 20
>3a7058		3c 50 43 3e 20 3c 41 3e 20 3c 58 3e 20 3c 59 3e
>3a7068		20 3c 53 50 3e 20 3c 44 42 52 3e 20 3c 44 50 3e
>3a7078		20 3c 4e 56 4d 58 44 49 5a 43 3e 0d 20 20 43 68
>3a7088		61 6e 67 65 20 74 68 65 20 63 6f 6e 74 65 6e 74
>3a7098		73 20 6f 66 20 74 68 65 20 72 65 67 69 73 74 65
>3a70a8		72 73 0d 0d 53 20 20 20 20 20 53 41 56 45 20 20
>3a70b8		20 20 20 20 20 20 20 22 46 69 6c 65 22 20 3c 73
>3a70c8		74 61 72 74 3e 20 3c 65 6e 64 3e 0d 54 20 3c 73
>3a70d8		74 61 72 74 3e 20 3c 65 6e 64 3e 20 3c 64 65 73
>3a70e8		74 69 6e 61 74 69 6f 6e 3e 0d 20 20 54 72 61 6e
>3a70f8		73 66 65 72 20 28 63 6f 70 79 29 20 64 61 74 61
>3a7108		20 77 69 74 68 69 6e 20 6d 65 6d 6f 72 79 0d 0d
>3a7118		57 20 3c 62 79 74 65 3e 0d 20 20 53 65 74 20 74
>3a7128		68 65 20 72 65 67 69 73 74 65 72 20 77 69 64 74
>3a7138		68 20 66 6c 61 67 73 20 66 6f 72 20 74 68 65 20
>3a7148		64 69 73 61 73 73 65 6d 62 6c 65 72 0d 0d 58 20
>3a7158		2d 20 52 65 74 75 72 6e 20 74 6f 20 42 41 53 49
>3a7168		43 0d 0d 3e 20 3c 73 74 61 72 74 3e 20 3c 62 79
>3a7178		74 65 3e 20 5b 62 79 74 65 5d 2e 2e 2e 0d 20 20
>3a7188		45 64 69 74 20 64 61 74 61 20 69 6e 20 6d 65 6d
>3a7198		6f 72 79 0d 0d 3f 20 2d 20 44 69 73 70 6c 61 79
>3a71a8		20 61 20 73 68 6f 72 74 20 68 65 6c 70 20 73 63
>3a71b8		72 65 65 6e 0d 0d 00 08 08 c2 20 48 a9 48 08 5b
>3a71c8		68 28 e2 20 a5 0d 85 4e 28 6b 20 1d 01 08 e2 20
>3a71d8		48 a9 3a 48 ab 68 28 a2 b4 87 20 4f 03 e2 20 a9
>3a71e8		3b 20 18 00 a9 20 20 18 00 c2 30 08 e2 20 48 a9
>3a71f8		00 48 ab 68 28 a0 03 00 a2 42 02 20 d2 02 c2 20
>3a7208		a9 20 00 20 18 00 af 44 02 00 20 5f 03 a9 20 00
>3a7218		20 18 00 af 46 02 00 20 5f 03 a9 20 00 20 18 00
>3a7228		af 48 02 00 20 5f 03 a9 20 00 20 18 00 af 4a 02
>3a7238		00 20 5f 03 a9 20 00 20 18 00 af 4e 02 00 20 79
>3a7248		03 a9 20 00 20 18 00 20 18 00 af 4c 02 00 20 5f
>3a7258		03 a9 20 00 20 18 00 08 e2 20 ad 4f 02 22 cd 84
>3a7268		3a 28 20 c2 02 20 c2 02 6b 08 0b 08 c2 20 48 a9
>3a7278		48 08 5b 68 28 e2 20 a5 15 87 0d e2 20 a5 0f c5
>3a7288		13 d0 0e c2 20 a5 0d c5 11 d0 06 20 c2 02 2b 28
>3a7298		6b c2 20 18 a5 0d 69 01 00 85 0d e2 20 a5 0e 69
>3a72a8		00 85 0e 80 d0 08 0b 08 c2 20 48 a9 48 08 5b 68
>3a72b8		28 e2 20 a5 0f c5 17 90 45 c2 20 a5 0d c5 15 90
>3a72c8		3d e2 20 a7 0d 87 15 a5 0f c5 13 d0 0b c2 20 a5
>3a72d8		0d c5 11 d0 03 4c 64 73 c2 20 18 a5 0d 69 01 00
>3a72e8		85 0d e2 20 a5 0e 69 00 85 0e c2 20 18 a5 15 69
>3a72f8		01 00 85 15 e2 20 a5 16 69 00 85 16 80 c3 c2 20
>3a7308		38 a5 11 e5 0d 85 19 e2 20 a5 13 e5 0f 85 1b c2
>3a7318		20 18 a5 19 65 15 85 15 e2 20 a5 1b 65 17 85 17
>3a7328		e2 20 a7 11 87 15 a5 13 c5 0f d0 0a c2 20 a5 11
>3a7338		c5 0d d0 02 80 26 c2 20 38 a5 11 e9 01 00 85 11
>3a7348		e2 20 a5 12 e9 00 85 12 c2 20 38 a5 15 e9 01 00
>3a7358		85 15 e2 20 a5 16 e9 00 85 16 80 c4 20 c2 02 2b
>3a7368		28 6b 08 e2 20 c9 21 90 0b c9 7f 90 04 c9 a0 90
>3a7378		03 28 38 6b 28 18 6b 08 8b 0b 08 c2 20 48 a9 48
>3a7388		08 5b 68 28 e2 20 a9 00 8f b6 08 00 a5 31 c9 02
>3a7398		b0 16 c9 01 90 20 c2 20 18 a5 0d 69 00 01 85 11
>3a73a8		e2 20 a5 0f 69 00 85 13 c2 20 a5 0d 85 32 e2 20
>3a73b8		a5 0f 85 34 80 12 c2 20 18 a5 32 69 00 01 85 11
>3a73c8		e2 20 a5 34 69 00 85 13 e2 20 a0 00 00 c2 20 a5
>3a73d8		32 85 19 e2 20 a5 34 85 1b e2 20 a7 19 22 6a 73
>3a73e8		3a b0 02 a9 3f 99 7e 08 c2 20 18 a5 19 69 01 00
>3a73f8		85 19 e2 20 a5 1b 69 00 85 1b c8 c0 08 00 90 db
>3a7408		a9 00 99 7e 08 a9 3e 20 18 00 a9 20 20 18 00 e2
>3a7418		20 a5 34 20 79 03 a9 3a 20 18 00 c2 20 a5 32 20
>3a7428		5f 03 c2 20 a9 08 00 85 47 e2 20 a9 20 20 18 00
>3a7438		a7 32 20 79 03 22 ac 84 3a e2 20 c6 47 d0 ea a9
>3a7448		20 20 18 00 a9 20 20 18 00 08 e2 20 48 a9 00 48
>3a7458		ab 68 28 a2 7e 08 20 4f 03 20 c2 02 20 d9 02 a5
>3a7468		34 c5 13 90 0f c2 20 a5 32 c5 11 90 07 20 c2 02
>3a7478		2b ab 28 6b 4c d0 73 08 8d 92 08 e2 20 bd 00 00
>3a7488		99 00 00 ad 92 08 f0 0a c8 e8 e8 e8 e8 ce 92 08
>3a7498		80 eb 28 6b 08 0b 8b 08 c2 20 48 a9 48 08 5b 68
>3a74a8		28 08 e2 20 48 a9 00 48 ab 68 28 c2 30 a5 0d 85
>3a74b8		32 a5 0f 85 34 e2 20 a5 31 3a 85 47 a2 59 08 a0
>3a74c8		7e 08 22 7f 74 3a a0 00 00 b9 7e 08 87 32 22 ac
>3a74d8		84 3a c8 c4 47 d0 f2 ab 2b 28 6b 08 0b 8b 08 c2
>3a74e8		20 48 a9 48 08 5b 68 28 08 e2 20 48 a9 00 48 ab
>3a74f8		68 28 e2 20 c2 10 a5 31 3a 3a 85 47 a2 5d 08 a0
>3a7508		7e 08 22 7f 74 3a c2 20 a5 0d 85 32 a5 0f 85 34
>3a7518		c2 20 a5 34 c5 13 d0 06 a5 32 c5 11 f0 2c e2 20
>3a7528		a0 00 00 b7 32 d9 7e 08 d0 1a c8 c4 47 d0 f4 c2
>3a7538		20 a5 32 85 4a a5 34 85 4c 22 56 7f 3a e2 20 a9
>3a7548		20 20 18 00 22 ac 84 3a 80 c6 20 c2 02 ab 2b 28
>3a7558		6b 08 c2 20 48 a9 48 08 5b 68 28 e2 20 a5 31 f0
>3a7568		0e c2 30 a5 0d 8f 40 02 00 a5 0f 8f 42 02 00 af
>3a7578		46 02 00 aa af 48 02 00 a8 af 4a 02 00 1b af 4c
>3a7588		02 00 5b e2 20 a9 3a 48 a9 75 48 a9 99 48 4c d0
>3a7598		75 ea 5c 04 00 3a 08 c2 20 48 a9 48 08 5b 68 28
>3a75a8		e2 20 a5 31 f0 c9 c2 30 a5 0d 8f 40 02 00 a5 0f
>3a75b8		8f 42 02 00 af 46 02 00 aa af 48 02 00 a8 af 4a
>3a75c8		02 00 1b af 4c 02 00 5b e2 20 af 4e 02 00 48 ab
>3a75d8		a9 5c 8f a2 08 00 af 42 02 00 8f a5 08 00 af 41
>3a75e8		02 00 8f a4 08 00 af 40 02 00 8f a3 08 00 af 4f
>3a75f8		02 00 48 c2 20 af 44 02 00 28 5c a2 08 00 08 0b
>3a7608		8b 08 e2 20 48 a9 3a 48 ab 68 28 08 c2 20 48 a9
>3a7618		48 08 5b 68 28 c2 10 e2 20 a5 31 c9 02 f0 0c c9
>3a7628		03 d0 11 c2 20 a5 15 85 47 80 11 c2 20 a9 01 00
>3a7638		85 47 80 08 a2 78 87 20 4f 03 80 35 a5 0d 85 4a
>3a7648		a5 0f 85 4c a0 00 00 e2 20 a7 4a d7 11 f0 09 22
>3a7658		56 7f 3a a9 20 20 18 00 c2 20 18 a5 4a 69 01 00
>3a7668		85 4a a5 4c 69 00 00 85 4c c8 c4 47 d0 d9 20 c2
>3a7678		02 20 c2 02 ab 2b 28 6b 08 0b 8b 08 e2 20 48 a9
>3a7688		00 48 ab 68 28 08 c2 20 48 a9 48 08 5b 68 28 e2
>3a7698		20 a5 31 f0 4f a6 0d 8e 40 02 a6 0f 8e 42 02 c9
>3a76a8		01 f0 41 a6 11 8e 44 02 c9 02 f0 38 a6 15 8e 46
>3a76b8		02 c9 03 f0 2f a6 19 8e 48 02 c9 04 f0 26 a6 1d
>3a76c8		8e 4a 02 c9 05 f0 1d e2 10 a6 21 8e 4e 02 c9 06
>3a76d8		f0 12 c2 10 a6 25 8e 4c 02 c9 07 f0 07 e2 10 a6
>3a76e8		29 8e 4f 02 ab 2b 28 6b 08 0b 8b 08 c2 20 48 a9
>3a76f8		48 08 5b 68 28 e2 20 c2 10 a2 00 00 bf e5 87 3a
>3a7708		f0 18 c7 08 f0 03 e8 80 f3 c2 20 8a 0a aa bf 26
>3a7718		77 3a 8f 2f 08 00 22 4a 77 3a ab 2b 28 6b c3 6d
>3a7728		cb 6d cf 6d d3 6d d7 6d db 6d df 6d e3 6d e7 6d
>3a7738		eb 6d c7 6d ef 6d f3 6d f7 6d bf 71 fb 6d ff 6d
>3a7748		38 6e 6c 2f 08 08 8b 0b 08 c2 20 48 a9 48 08 5b
>3a7758		68 28 e2 20 a5 31 c9 02 b0 03 4c f3 78 c2 20 a5
>3a7768		0d 85 32 a5 0f 85 34 c2 20 22 f5 7a 3a c9 ff ff
>3a7778		f0 10 85 54 e2 20 a5 31 c9 03 f0 36 a9 13 85 4f
>3a7788		80 4c 20 c2 02 08 e2 20 48 a9 3a 48 ab 68 28 c2
>3a7798		10 a2 2a 79 20 4f 03 4c f3 78 20 c2 02 08 e2 20
>3a77a8		48 a9 3a 48 ab 68 28 c2 10 a2 39 79 20 4f 03 4c
>3a77b8		f3 78 e2 20 22 2b 7b 3a c9 ff f0 de 85 4f c9 03
>3a77c8		f0 62 c9 0b f0 5e c9 13 f0 04 c9 08 f0 00 22 23
>3a77d8		7a 3a b0 03 4c bc 78 87 32 22 ac 84 3a 08 e2 20
>3a77e8		48 a9 00 48 ab 68 28 c2 20 a5 32 85 56 a5 34 85
>3a77f8		58 e2 20 a5 4f c9 12 f0 6c c9 16 f0 68 c9 14 f0
>3a7808		7c 29 3f c9 02 d0 03 4c ea 78 c2 20 29 ff 00 aa
>3a7818		e2 20 bf f2 83 3a c9 03 f0 57 c9 02 f0 5f c9 01
>3a7828		f0 67 80 71 c2 20 a5 54 c9 6a 80 f0 26 c9 ce 80
>3a7838		f0 2a c9 4e 80 f0 1c c9 52 80 f0 17 c9 5a 80 f0
>3a7848		12 c9 42 80 f0 0d c9 56 80 f0 08 c9 3e 80 f0 03
>3a7858		4c d6 77 e2 20 a9 12 85 4f 4c d6 77 e2 20 a9 16
>3a7868		85 4f 4c d6 77 22 66 79 3a 90 60 c9 02 f0 0e 80
>3a7878		18 a0 02 00 b9 98 08 97 56 22 ac 84 3a a0 01 00
>3a7888		b9 98 08 97 56 22 ac 84 3a a0 00 00 b9 98 08 97
>3a7898		56 22 ac 84 3a e2 20 a9 41 20 18 00 a9 20 20 18
>3a78a8		00 a6 32 86 4a a6 34 86 4c 22 56 7f 3a a9 20 20
>3a78b8		18 00 80 37 20 c2 02 08 e2 20 48 a9 3a 48 ab 68
>3a78c8		28 c2 10 a2 f7 78 20 4f 03 80 20 20 c2 02 08 e2
>3a78d8		20 48 a9 3a 48 ab 68 28 c2 10 a2 47 79 20 4f 03
>3a78e8		80 09 a5 4f 29 c0 d0 95 4c 91 78 2b ab 28 6b 41
>3a78f8		64 64 72 65 73 73 69 6e 67 20 6d 6f 64 65 20 6e
>3a7908		6f 74 20 64 65 66 69 6e 65 64 20 66 6f 72 20 74
>3a7918		68 61 74 20 69 6e 73 74 72 75 63 74 69 6f 6e 2e
>3a7928		0d 00 42 61 64 20 6d 6e 65 6d 6f 6e 69 63 2e 0d
>3a7938		00 42 61 64 20 6f 70 65 72 61 6e 64 2e 0d 00 52
>3a7948		65 6c 61 74 69 76 65 20 6f 66 66 73 65 74 20 69
>3a7958		73 20 74 6f 6f 20 6c 61 72 67 65 2e 0d 00 08 0b
>3a7968		08 c2 20 48 a9 48 08 5b 68 28 e2 20 a5 4f c9 12
>3a7978		f0 0a c2 20 18 a5 32 69 02 00 80 08 c2 20 18 a5
>3a7988		32 69 01 00 85 4a a5 34 69 00 00 85 4c 38 a5 50
>3a7998		e5 4a 85 50 a5 52 e5 4c 85 52 e2 20 a5 4f c9 16
>3a79a8		f0 1e a5 50 30 0c a5 51 d0 2a a5 52 d0 26 a9 01
>3a79b8		80 26 a5 51 c9 ff d0 1c a5 52 c9 ff d0 16 80 18
>3a79c8		a5 51 30 06 a5 52 d0 0c 80 0e a5 52 c9 ff d0 04
>3a79d8		a9 02 80 04 2b 28 18 6b 2b 28 38 6b 08 0b c2 10
>3a79e8		da 08 c2 20 48 a9 48 08 5b 68 28 e2 20 a2 00 00
>3a79f8		df 00 d0 3a f0 08 e8 e0 10 00 f0 1b 80 f2 c2 20
>3a7a08		06 50 26 52 06 50 26 52 06 50 26 52 06 50 26 52
>3a7a18		e2 20 8a 05 50 85 50 fa 2b 28 6b 0b 8b 08 c2 20
>3a7a28		48 a9 48 08 5b 68 28 08 e2 20 48 a9 3a 48 ab 68
>3a7a38		28 e2 20 a5 4f 29 3f 85 4a c2 30 a2 00 00 a0 00
>3a7a48		00 bd f0 80 f0 1b c5 54 d0 0d e2 20 b9 f2 82 29
>3a7a58		3f c5 4a f0 07 c2 20 e8 e8 c8 80 e5 98 38 ab 2b
>3a7a68		6b 18 ab 2b 6b 08 0b 08 c2 20 48 a9 48 08 5b 68
>3a7a78		28 e2 20 c2 10 a0 00 00 64 50 64 52 b7 03 f0 11
>3a7a88		c9 64 f0 19 48 b7 36 85 4a 68 c5 4a d0 0b c8 80
>3a7a98		eb b7 36 d0 04 2b 28 38 6b 2b 28 18 6b e2 20 b7
>3a7aa8		36 c9 3a b0 04 c9 30 b0 14 c9 47 b0 04 c9 41 b0
>3a7ab8		0c c9 67 b0 e4 c9 61 b0 02 80 de 29 df 22 e4 79
>3a7ac8		3a 80 cb 0b 08 c2 20 48 a9 48 08 5b 68 28 a0 00
>3a7ad8		00 e2 20 b7 03 f0 03 c8 80 f9 c2 20 c8 5a 68 18
>3a7ae8		65 03 85 03 a5 05 69 00 00 85 05 2b 6b 0b 08 c2
>3a7af8		20 48 a9 48 08 5b 68 28 c2 20 a5 11 85 36 a5 13
>3a7b08		85 38 a9 7e 7f 85 03 a9 3a 00 85 05 22 6d 7a 3a
>3a7b18		b0 0d 22 cb 7a 3a a7 03 d0 f2 a9 ff ff 80 02 a5
>3a7b28		03 2b 6b 08 0b 08 c2 20 48 a9 48 08 5b 68 28 c2
>3a7b38		30 a5 15 85 36 a5 17 85 38 a9 0a 84 85 03 a9 3a
>3a7b48		00 85 05 22 6d 7a 3a b0 22 22 cb 7a 3a c2 20 18
>3a7b58		a5 03 69 01 00 85 03 a5 05 69 00 00 85 05 e2 20
>3a7b68		a7 03 d0 df c2 20 a9 ff ff 80 0d 22 cb 7a 3a e2
>3a7b78		20 a7 03 c2 20 29 ff 00 2b 28 6b 08 8b 0b 08 c2
>3a7b88		20 48 a9 48 08 5b 68 28 e2 20 a9 00 8f b6 08 00
>3a7b98		a5 31 c9 02 b0 16 c9 01 90 20 c2 20 18 a5 0d 69
>3a7ba8		00 01 85 11 e2 20 a5 0f 69 00 85 13 c2 20 a5 0d
>3a7bb8		85 32 e2 20 a5 0f 85 34 80 12 c2 20 18 a5 32 69
>3a7bc8		00 01 85 11 e2 20 a5 34 69 00 85 13 22 ef 7b 3a
>3a7bd8		e2 20 a5 34 c5 13 90 f4 c2 20 a5 32 c5 11 90 ec
>3a7be8		20 c2 02 2b ab 28 6b 08 0b e2 20 a9 41 20 18 00
>3a7bf8		a9 20 20 18 00 08 c2 20 48 a9 7a 08 5b 68 28 c2
>3a7c08		20 a5 00 85 18 e2 20 a5 02 85 1a 22 56 7f 3a a9
>3a7c18		20 20 18 00 c2 20 18 a5 00 69 01 00 85 18 e2 20
>3a7c28		a5 02 69 00 85 1a e2 20 c2 10 a7 00 c9 c2 d0 0b
>3a7c38		48 a7 18 49 ff 2f 96 08 00 80 0b c9 e2 d0 0c 48
>3a7c48		a7 18 0f 96 08 00 8f 96 08 00 68 c2 20 29 ff 00
>3a7c58		0a aa bf f0 80 3a aa 22 d0 7e 3a e2 20 a7 00 aa
>3a7c68		bf f2 82 3a 22 ac 84 3a 22 7d 7c 3a 20 c2 02 20
>3a7c78		d9 02 2b 28 6b 08 e2 20 48 29 3f 0a c2 10 aa 68
>3a7c88		7c 8b 7c bb 7c d6 7c dd 7c 02 7d 09 7d 24 7d 46
>3a7c98		7d 57 7d 94 7d 9c 7d ad 7d be 7d c5 7d ea 7d 17
>3a7ca8		7e 83 7d 68 7d 35 7d 0a 7e 14 7e 28 7e 57 7e 05
>3a7cb8		7e 68 7e a9 28 20 18 00 22 7f 7e 3a a9 2c 20 18
>3a7cc8		00 a9 58 20 18 00 a9 29 20 18 00 4c 79 7e 22 7f
>3a7cd8		7e 3a 4c 79 7e e2 20 48 a9 23 20 18 00 68 29 c0
>3a7ce8		c9 00 f0 0f 4a 4a 2f 96 08 00 d0 07 22 89 7e 3a
>3a7cf8		4c 79 7e 22 7f 7e 3a 4c 79 7e 22 89 7e 3a 4c 79
>3a7d08		7e a9 28 20 18 00 22 7f 7e 3a a9 29 20 18 00 a9
>3a7d18		2c 20 18 00 a9 59 20 18 00 4c 79 7e 22 7f 7e 3a
>3a7d28		a9 2c 20 18 00 a9 58 20 18 00 4c 79 7e 22 7f 7e
>3a7d38		3a a9 2c 20 18 00 a9 59 20 18 00 4c 79 7e 22 89
>3a7d48		7e 3a a9 2c 20 18 00 a9 59 20 18 00 4c 79 7e 22
>3a7d58		89 7e 3a a9 2c 20 18 00 a9 58 20 18 00 4c 79 7e
>3a7d68		a9 28 20 18 00 22 89 7e 3a a9 2c 20 18 00 a9 58
>3a7d78		20 18 00 a9 29 20 18 00 4c 79 7e a9 28 20 18 00
>3a7d88		22 7f 7e 3a a9 29 20 18 00 4c 79 7e a9 41 20 18
>3a7d98		00 4c 7d 7e 22 7f 7e 3a a9 2c 20 18 00 a9 53 20
>3a7da8		18 00 4c 79 7e a9 5b 20 18 00 22 7f 7e 3a a9 5d
>3a7db8		20 18 00 4c 79 7e 22 97 7e 3a 4c 7d 7e a9 28 20
>3a7dc8		18 00 22 7f 7e 3a a9 2c 20 18 00 a9 53 20 18 00
>3a7dd8		a9 29 20 18 00 a9 2c 20 18 00 a9 59 20 18 00 4c
>3a7de8		79 7e a9 5b 20 18 00 22 7f 7e 3a a9 5d 20 18 00
>3a7df8		a9 2c 20 18 00 a9 59 20 18 00 4c 79 7e a0 02 00
>3a7e08		80 03 a0 01 00 22 fd 7e 3a 4c 7d 7e 4c 7d 7e 22
>3a7e18		97 7e 3a a9 2c 20 18 00 a9 58 20 18 00 4c 7d 7e
>3a7e28		a9 23 20 18 00 8b a5 02 48 ab a6 00 e8 a0 01 00
>3a7e38		22 d2 02 3a a9 2c 20 18 00 a9 23 20 18 00 a6 00
>3a7e48		a0 01 00 22 d2 02 3a ab 22 ac 84 3a 4c 79 7e a9
>3a7e58		28 20 18 00 22 89 7e 3a a9 29 20 18 00 4c 79 7e
>3a7e68		a9 5b 20 18 00 22 89 7e 3a a9 5d 20 18 00 4c 79
>3a7e78		7e 22 ac 84 3a 28 6b 08 e2 20 a7 00 20 79 03 28
>3a7e88		6b 08 c2 30 a7 00 20 5f 03 22 ac 84 3a 28 6b 08
>3a7e98		8b 0b c2 30 5a 08 c2 20 48 a9 7a 08 5b 68 28 08
>3a7ea8		e2 20 48 a9 00 48 ab 68 28 e2 20 a0 00 00 a7 00
>3a7eb8		99 92 08 22 ac 84 3a c8 c0 03 00 d0 f1 22 56 7f
>3a7ec8		3a c2 30 7a 2b ab 28 6b 08 8b e2 20 c2 10 08 e2
>3a7ed8		20 48 a9 3a 48 ab 68 28 bd 00 00 20 18 00 e8 bd
>3a7ee8		00 00 20 18 00 e8 bd 00 00 20 18 00 e8 a9 20 20
>3a7ef8		18 00 ab 28 6b 08 0b 08 c2 20 48 a9 7a 08 5b 68
>3a7f08		28 e2 20 c0 02 00 f0 14 a7 00 85 18 30 06 64 19
>3a7f18		64 1a 80 1e a9 ff 85 19 85 1a 80 16 a7 00 85 18
>3a7f28		22 ac 84 3a a7 00 85 19 30 04 64 1a 80 04 a9 ff
>3a7f38		85 1a c2 20 38 a5 00 65 18 85 18 e2 20 a5 02 65
>3a7f48		1a 85 1a 22 56 7f 3a 22 ac 84 3a 2b 28 6b 08 0b
>3a7f58		c2 20 48 08 c2 20 48 a9 48 08 5b 68 28 e2 20 a5
>3a7f68		4c 20 79 03 e2 20 a9 3a 20 18 00 c2 20 a5 4a 20
>3a7f78		5f 03 68 2b 28 6b 4f 52 41 00 41 4e 44 00 45 4f
>3a7f88		52 00 41 44 43 00 53 54 41 00 4c 44 41 00 43 4d
>3a7f98		50 00 53 42 43 00 41 53 4c 00 52 4f 4c 00 4c 53
>3a7fa8		52 00 52 4f 52 00 53 54 58 00 4c 44 58 00 44 45
>3a7fb8		43 00 49 4e 43 00 42 49 54 00 4a 4d 50 00 53 54
>3a7fc8		59 00 4c 44 59 00 43 50 59 00 43 50 58 00 42 52
>3a7fd8		4b 00 4a 53 52 00 52 54 49 00 52 54 53 00 50 48
>3a7fe8		50 00 50 4c 50 00 50 48 41 00 50 4c 41 00 44 45
>3a7ff8		59 00 54 41 59 00 49 4e 59 00 49 4e 58 00 43 4c
>3a8008		43 00 53 45 43 00 43 4c 49 00 53 45 49 00 54 59
>3a8018		41 00 43 4c 56 00 43 4c 44 00 53 45 44 00 54 58
>3a8028		41 00 54 58 53 00 54 41 58 00 54 53 58 00 44 45
>3a8038		58 00 4e 4f 50 00 42 50 4c 00 42 4d 49 00 42 56
>3a8048		43 00 42 56 53 00 42 43 43 00 42 43 53 00 42 4e
>3a8058		45 00 42 45 51 00 54 53 42 00 54 52 42 00 53 54
>3a8068		5a 00 42 52 41 00 50 48 59 00 50 4c 59 00 50 48
>3a8078		58 00 50 4c 58 00 50 48 44 00 50 4c 44 00 50 48
>3a8088		4b 00 52 54 4c 00 50 48 42 00 50 4c 42 00 57 41
>3a8098		49 00 58 42 41 00 54 43 53 00 54 53 43 00 54 43
>3a80a8		44 00 54 44 43 00 54 58 59 00 54 59 58 00 53 54
>3a80b8		50 00 58 43 45 00 43 4f 50 00 4a 53 4c 00 57 44
>3a80c8		4d 00 50 45 52 00 42 52 4c 00 52 45 50 00 53 45
>3a80d8		50 00 4d 56 50 00 4d 56 4e 00 50 45 49 00 50 45
>3a80e8		41 00 4a 4d 4c 00 00 00 d6 7f 7e 7f be 80 7e 7f
>3a80f8		5e 80 7e 7f 9e 7f 7e 7f e6 7f 7e 7f 9e 7f 7e 80
>3a8108		5e 80 7e 7f 9e 7f 7e 7f 3e 80 7e 7f 7e 7f 7e 7f
>3a8118		62 80 7e 7f 9e 7f 7e 7f 06 80 7e 7f ba 7f 9e 80
>3a8128		62 80 7e 7f 9e 7f 7e 7f da 7f 82 7f c2 80 82 7f
>3a8138		be 7f 82 7f a2 7f 82 7f ea 7f 82 7f a2 7f 82 80
>3a8148		be 7f 82 7f a2 7f 82 7f 42 80 82 7f 82 7f 82 7f
>3a8158		be 7f 82 7f a2 7f 82 7f 0a 80 82 7f b6 7f a2 80
>3a8168		be 7f 82 7f a2 7f 82 7f de 7f 86 7f c6 80 86 7f
>3a8178		da 80 86 7f a6 7f 86 7f ee 7f 86 7f a6 7f 86 80
>3a8188		c2 7f 86 7f a6 7f 86 7f 46 80 86 7f 86 7f 86 7f
>3a8198		de 80 86 7f a6 7f 86 7f 0e 80 86 7f 6e 80 a6 80
>3a81a8		ea 80 86 7f a6 7f 86 7f e2 7f 8a 7f ca 80 8a 7f
>3a81b8		66 80 8a 7f aa 7f 8a 7f f2 7f 8a 7f aa 7f 8a 80
>3a81c8		c2 7f 8a 7f aa 7f 8a 7f 4a 80 8a 7f 8a 7f 8a 7f
>3a81d8		66 80 8a 7f aa 7f 8a 7f 12 80 8a 7f 72 80 aa 80
>3a81e8		c2 7f 8a 7f aa 7f 8a 7f 6a 80 8e 7f ce 80 8e 7f
>3a81f8		c6 7f 8e 7f ae 7f 8e 7f f6 7f be 7f 26 80 8e 80
>3a8208		c6 7f 8e 7f ae 7f 8e 7f 4e 80 8e 7f 8e 7f 8e 7f
>3a8218		c6 7f 8e 7f ae 7f 8e 7f 16 80 8e 7f 2a 80 ae 80
>3a8228		66 80 8e 7f 66 80 8e 7f ca 7f 92 7f b2 7f 92 7f
>3a8238		ca 7f 92 7f b2 7f 92 7f fa 7f 92 7f 2e 80 92 80
>3a8248		ca 7f 92 7f b2 7f 92 7f 52 80 92 7f 92 7f 92 7f
>3a8258		ca 7f 92 7f b2 7f 92 7f 1a 80 92 7f 32 80 b2 80
>3a8268		ca 7f 92 7f b2 7f 92 7f ce 7f 96 7f d2 80 96 7f
>3a8278		ce 7f 96 7f b6 7f 96 7f fe 7f 96 7f 36 80 96 80
>3a8288		ce 7f 96 7f b6 7f 96 7f 56 80 96 7f 96 7f 96 7f
>3a8298		e2 80 96 7f b6 7f 96 7f 1e 80 96 7f 76 80 b6 80
>3a82a8		ea 80 96 7f b6 7f 96 7f d2 7f 9a 7f d6 80 9a 7f
>3a82b8		d2 7f 9a 7f ba 7f 9a 7f 02 80 9a 7f 3a 80 9a 80
>3a82c8		d2 7f 9a 7f ba 7f 9a 7f 5a 80 9a 7f 9a 7f 9a 7f
>3a82d8		e6 80 9a 7f ba 7f 9a 7f 22 80 9a 7f 7a 80 ba 80
>3a82e8		da 7f 9a 7f ba 7f 9a 7f 00 00 13 00 02 09 01 01
>3a82f8		01 0a 13 82 08 13 03 03 03 0b 12 04 0f 0c 01 05
>3a8308		05 0d 13 06 08 13 03 07 07 0e 03 00 0b 09 01 01
>3a8318		01 0a 13 82 08 13 03 03 03 0b 12 04 0f 0c 05 05
>3a8328		05 0d 13 06 08 13 07 07 07 0e 13 00 13 09 14 01
>3a8338		01 0a 13 82 08 13 03 03 03 0b 12 04 0f 0c 14 05
>3a8348		05 0d 13 06 13 13 0b 07 07 0b 13 00 16 09 01 01
>3a8358		01 0a 13 82 08 13 15 03 03 0b 12 04 0f 0c 05 05
>3a8368		05 0d 13 06 13 13 10 07 07 0e 12 00 16 09 01 01
>3a8378		01 0a 13 82 13 13 03 03 03 0b 12 04 0f 0c 05 05
>3a8388		11 0d 13 06 13 13 03 07 07 0e 82 00 42 09 01 01
>3a8398		01 0a 13 82 13 13 03 03 03 0b 12 04 0f 0c 05 05
>3a83a8		11 0d 13 06 13 13 07 07 06 0e 42 00 02 09 01 01
>3a83b8		01 0a 13 82 13 13 03 03 03 0b 12 04 0f 0c 01 05
>3a83c8		05 0d 13 06 13 13 17 07 07 0e 42 00 02 09 01 01
>3a83d8		01 0f 13 82 13 13 03 03 03 0b 12 04 0f 0c 03 05
>3a83e8		05 0d 13 06 13 13 10 07 07 0e 01 01 01 02 01 01
>3a83f8		02 02 00 01 01 03 01 01 03 01 02 01 01 00 02 02
>3a8408		02 02 41 00 08 64 64 3a 64 64 64 64 2c 58 00 0e
>3a8418		64 64 3a 64 64 64 64 00 0b 64 64 64 64 2c 58 00
>3a8428		07 64 64 64 64 2c 59 00 06 64 64 64 64 00 03 64
>3a8438		64 2c 58 00 05 64 64 2c 59 00 11 64 64 2c 53 00
>3a8448		09 64 64 00 01 23 64 64 64 64 00 c2 23 64 64 2c
>3a8458		23 64 64 00 14 23 64 64 00 02 28 64 64 2c 53 29
>3a8468		2c 59 00 0c 28 64 64 64 64 2c 58 29 00 10 28 64
>3a8478		64 64 64 29 00 10 28 64 64 2c 58 29 00 00 28 64
>3a8488		64 29 2c 59 00 04 28 64 64 29 00 0f 5b 64 64 64
>3a8498		64 5d 00 17 5b 64 64 5d 2c 59 00 0d 5b 64 64 5d
>3a84a8		00 0a 00 00 08 c2 20 48 18 af 7a 08 00 69 01 00
>3a84b8		8f 7a 08 00 e2 20 af 7c 08 00 69 00 8f 7c 08 00
>3a84c8		c2 20 68 28 6b 08 c2 10 e2 20 da a2 08 00 0a b0
>3a84d8		08 48 a9 30 20 18 00 80 06 48 a9 31 20 18 00 68
>3a84e8		ca d0 eb fa 28 6b 08 c2 20 48 a9 48 08 5b 68 28
>3a84f8		e2 20 a7 32 f0 0a c9 20 d0 06 22 ac 84 3a 80 f2
>3a8508		6b 08 08 c2 20 48 a9 48 08 5b 68 28 22 ac 84 3a
>3a8518		22 ee 84 3a c2 30 a5 31 c2 20 29 ff 00 0a 0a aa
>3a8528		a5 32 95 0d a5 34 95 0f e2 20 a7 32 f0 14 c9 22
>3a8538		f0 06 22 ac 84 3a 80 f2 a9 00 87 32 22 ac 84 3a
>3a8548		e6 31 28 6b 08 c2 20 48 a9 48 08 5b 68 28 e2 20
>3a8558		64 4a c2 20 64 50 64 52 e2 20 a7 32 c9 3a f0 0d
>3a8568		20 f7 03 90 0e 22 e4 79 3a a9 01 85 4a 22 ac 84
>3a8578		3a 80 e5 a5 4a f0 16 a5 31 c2 20 29 ff 00 0a 0a
>3a8588		aa a5 50 95 0d a5 52 95 0f e2 20 e6 31 6b e2 20
>3a8598		64 31 22 ee 84 3a a7 32 f0 21 c9 22 d0 06 22 09
>3a85a8		85 3a 80 0a 22 4c 85 3a a5 31 c9 09 b0 0d a7 32
>3a85b8		f0 09 c9 20 f0 dc 20 f7 03 b0 d7 6b 08 0b 08 c2
>3a85c8		20 48 a9 48 08 5b 68 28 c2 10 e2 20 a2 31 00 74
>3a85d8		00 ca d0 fb a9 00 85 02 85 34 c2 20 a9 00 4f 85
>3a85e8		00 85 32 e2 20 22 ee 84 3a c9 00 f0 38 c2 20 a5
>3a85f8		32 85 08 e2 20 a5 34 85 0a a2 01 00 22 ac 84 3a
>3a8608		a7 32 d0 06 86 0b 64 31 80 1b c9 20 f0 03 e8 80
>3a8618		eb 86 0b a9 00 87 32 22 ac 84 3a a7 08 c9 41 f0
>3a8628		07 22 96 85 3a 2b 28 6b 22 ee 84 3a a7 32 f0 f5
>3a8638		22 4c 85 3a 22 ee 84 3a a7 32 f0 e9 c2 20 a5 32
>3a8648		85 11 e2 20 a5 34 85 13 22 ac 84 3a a7 32 f0 26
>3a8658		c9 20 d0 f4 a9 00 87 32 e6 31 22 ac 84 3a 22 ee
>3a8668		84 3a a7 32 f0 bf c2 20 a5 32 85 15 e2 20 a5 34
>3a8678		85 17 e6 31 80 af e6 31 80 ab 08 c2 10 e2 20 a5
>3a8688		31 d0 0f a2 78 87 a9 3a 48 ab 20 4f 03 20 c2 02
>3a8698		80 61 c2 20 a5 0d 8f 23 08 00 a5 0f 8f 25 08 00
>3a86a8		20 68 68 e2 20 a5 31 c9 01 d0 0f c2 20 a9 ff ff
>3a86b8		8f 54 03 00 8f 56 03 00 80 0e c2 20 a5 11 8f 54
>3a86c8		03 00 a5 13 8f 56 03 00 22 18 11 00 b0 25 e2 20
>3a86d8		a2 9e 87 a9 3a 48 ab 20 4f 03 af 2e 03 00 20 79
>3a86e8		03 a9 20 20 18 00 af 20 03 00 20 79 03 20 c2 02
>3a86f8		20 c2 02 28 6b 8b 08 c2 10 e2 20 a5 31 c9 03 f0
>3a8708		0f a2 78 87 a9 3a 48 ab 20 4f 03 20 c2 02 80 54
>3a8718		c2 20 a5 0d 8f 23 08 00 a5 0f 8f 25 08 00 20 68
>3a8728		68 a5 11 8f 50 03 00 a5 13 8f 52 03 00 a5 15 8f
>3a8738		58 03 00 a5 17 8f 5a 03 00 22 1c 11 00 b0 25 e2
>3a8748		20 a2 88 87 a9 3a 48 ab 20 4f 03 af 2e 03 00 20
>3a8758		79 03 a9 20 20 18 00 af 20 03 00 20 79 03 20 c2
>3a8768		02 20 c2 02 28 ab 6b 5c 37 26 3a 6b 00 00 00 00
>3a8778		42 61 64 20 61 72 67 75 6d 65 6e 74 73 0d 0d 00
>3a8788		55 6e 61 62 6c 65 20 74 6f 20 73 61 76 65 20 66
>3a8798		69 6c 65 3a 20 00 55 6e 61 62 6c 65 20 74 6f 20
>3a87a8		6c 6f 61 64 20 66 69 6c 65 3a 20 00 0d 20 20 50
>3a87b8		43 20 20 20 20 20 41 20 20 20 20 58 20 20 20 20
>3a87c8		59 20 20 20 20 53 50 20 20 20 44 42 52 20 44 50
>3a87d8		20 20 20 4e 56 4d 58 44 49 5a 43 0d 00 41 43 44
>3a87e8		46 47 4a 48 4c 4d 52 3b 53 54 56 57 58 3e 3f 00
>3a87f8		18 fb 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48
>3a8808		a9 00 48 ab 68 28 c2 30 20 37 88 a9 ff fe 1b 08
>3a8818		e2 20 48 a9 3a 48 ab 68 28 a2 71 d2 20 4f 03 08
>3a8828		e2 20 48 a9 00 48 ab 68 28 4c 37 26 4c 34 88 08
>3a8838		20 09 02 20 fa 4d 28 60 00 00 00 00 00 00 00 00
>3a8848		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 1146 times (18336 bytes)...
>3acff8		00 00 00 00 00 00 00 00 30 31 32 33 34 35 36 37
>3ad008		38 39 41 42 43 44 45 46 2b 00 2d 00 2a 00 2f 00
>3ad018		4d 4f 44 00 5e 00 3c 3d 00 3e 3d 00 3c 3e 00 3c
>3ad028		00 3d 00 3e 00 4e 4f 54 00 41 4e 44 00 4f 52 00
>3ad038		28 00 29 00 52 45 4d 00 50 52 49 4e 54 00 4c 45
>3ad048		54 00 47 4f 54 4f 00 45 4e 44 00 49 46 00 54 48
>3ad058		45 4e 00 45 4c 53 45 00 47 4f 53 55 42 00 52 45
>3ad068		54 55 52 4e 00 46 4f 52 00 54 4f 00 53 54 45 50
>3ad078		00 4e 45 58 54 00 44 4f 00 4c 4f 4f 50 00 57 48
>3ad088		49 4c 45 00 55 4e 54 49 4c 00 45 58 49 54 00 43
>3ad098		4c 52 00 53 54 4f 50 00 50 4f 4b 45 00 50 4f 4b
>3ad0a8		45 57 00 50 4f 4b 45 4c 00 43 4c 53 00 52 45 41
>3ad0b8		44 00 44 41 54 41 00 52 45 53 54 4f 52 45 00 44
>3ad0c8		49 4d 00 43 41 4c 4c 00 2d 00 4c 45 4e 00 50 45
>3ad0d8		45 4b 00 50 45 45 4b 57 00 50 45 45 4b 4c 00 43
>3ad0e8		48 52 24 00 41 53 43 00 53 50 43 00 54 41 42 00
>3ad0f8		41 42 53 00 53 47 4e 00 48 45 58 24 00 44 45 43
>3ad108		00 53 54 52 24 00 56 41 4c 00 4c 45 46 54 24 00
>3ad118		52 49 47 48 54 24 00 4d 49 44 24 00 52 55 4e 00
>3ad128		4e 45 57 00 4c 4f 41 44 00 4c 49 53 54 00 44 49
>3ad138		52 00 42 4c 4f 41 44 00 42 52 55 4e 00 42 53 41
>3ad148		56 45 00 44 45 4c 00 53 41 56 45 00 52 45 4e 41
>3ad158		4d 45 00 43 4f 50 59 00 4d 4f 4e 49 54 4f 52 00
>3ad168		47 45 54 00 49 4e 50 55 54 00 53 45 54 42 4f 52
>3ad178		44 45 52 00 54 45 58 54 43 4f 4c 4f 52 00 53 45
>3ad188		54 42 47 43 4f 4c 4f 52 00 53 45 54 44 41 54 45
>3ad198		00 47 45 54 44 41 54 45 24 00 53 45 54 54 49 4d
>3ad1a8		45 00 47 45 54 54 49 4d 45 24 00 47 52 41 50 48
>3ad1b8		49 43 53 00 53 45 54 43 4f 4c 4f 52 00 42 49 54
>3ad1c8		4d 41 50 00 43 4c 52 42 49 54 4d 41 50 00 50 4c
>3ad1d8		4f 54 00 4c 49 4e 45 00 46 49 4c 4c 00 53 50 52
>3ad1e8		49 54 45 00 53 50 52 49 54 45 41 54 00 53 50 52
>3ad1f8		49 54 45 53 48 4f 57 00 54 49 4c 45 53 45 54 00
>3ad208		54 49 4c 45 4d 41 50 00 54 49 4c 45 53 48 4f 57
>3ad218		00 54 49 4c 45 41 54 00 4d 45 4d 43 4f 50 59 00
>3ad228		4c 49 4e 45 41 52 00 52 45 43 54 00 4c 4f 43 41
>3ad238		54 45 00 49 4e 54 00 52 4e 44 00 53 49 4e 00 43
>3ad248		4f 53 00 54 41 4e 00 4c 4e 00 41 43 4f 53 00 41
>3ad258		53 49 4e 00 41 54 41 4e 00 45 58 50 00 53 51 52
>3ad268		00 0d 52 45 41 44 59 0d 00 43 32 35 36 20 46 6f
>3ad278		65 6e 69 78 20 42 41 53 49 43 38 31 36 20 76 30
>3ad288		2e 32 2e 30 2d 61 6c 70 68 61 2b 32 37 33 0d 00
>3b0000						.align 256
.3b0000						CREDITS_TEXT
>3b0000		20 20 20 20 20 20 20 20		                .text "                              CREDITS                                  "
>3b0008		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0018		20 20 20 20 20 20 43 52 45 44 49 54 53 20 20 20
>3b0028		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0038		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0047		20 20 20 20 20 20 20 20		                .fill 80 - len("                              CREDITS                                  "), $20
>3b004f		20
>3b0050		20 20 20 20 20 20 20 20		                .text "                       The C256 Foenix Project                         "
>3b0058		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 54
>3b0068		68 65 20 43 32 35 36 20 46 6f 65 6e 69 78 20 50
>3b0078		72 6f 6a 65 63 74 20 20 20 20 20 20 20 20 20 20
>3b0088		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0097		20 20 20 20 20 20 20 20		                .fill 80 - len("                       The C256 Foenix Project                         "), $20
>3b009f		20
>3b00a0		20 20 20 20 20 20 20 20		                .text "                                                                       "
>3b00a8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b00d8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b00e7		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>3b00ef		20
>3b00f0		20 20 20 20 20 20 20 20		                .text "                                                                       "
>3b00f8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b0128		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0137		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>3b013f		20
>3b0140		50 72 6f 6a 65 63 74 20		                .text "Project Creator & Hardware Design: Stefany Allaire"
>3b0148		43 72 65 61 74 6f 72 20 26 20 48 61 72 64 77 61
>3b0158		72 65 20 44 65 73 69 67 6e 3a 20 53 74 65 66 61
>3b0168		6e 79 20 41 6c 6c 61 69 72 65
>3b0172		20 20 20 20 20 20 20 20		                .fill 80 - len("Project Creator & Hardware Design: Stefany Allaire"), $20
>3b017a		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b018a		20 20 20 20 20 20
>3b0190		77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com"
>3b0198		66 6f 65 6e 69 78 2e 63 6f 6d
>3b01a2		20 20 20 20 20 20 20 20		                .fill 80 - len("www.c256foenix.com"), $20
>3b01aa		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b01da		20 20 20 20 20 20
>3b01e0		20				                .text " "
>3b01e1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b01e9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b0229		20 20 20 20 20 20 20
>3b0230		20				                .text " "
>3b0231		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b0239		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b0279		20 20 20 20 20 20 20
>3b0280		45 41 52 4c 59 20 41 4c		                .text "EARLY ALPHA & KEY PLAYERS:"
>3b0288		50 48 41 20 26 20 4b 45 59 20 50 4c 41 59 45 52
>3b0298		53 3a
>3b029a		20 20 20 20 20 20 20 20		                .fill 80 - len("EARLY ALPHA & KEY PLAYERS:"), $20
>3b02a2		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b02b2		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b02c2		20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b02d0		20 20 46 6f 65 6e 69 78		                .text "  Foenix IDE Design : Daniel Tremblay"
>3b02d8		20 49 44 45 20 44 65 73 69 67 6e 20 3a 20 44 61
>3b02e8		6e 69 65 6c 20 54 72 65 6d 62 6c 61 79
>3b02f5		20 20 20 20 20 20 20 20		                .fill 80 - len("  Foenix IDE Design : Daniel Tremblay"), $20
>3b02fd		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b030d		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b031d		20 20 20
>3b0320		20 20 4b 65 72 6e 65 6c		                .text "  Kernel Design, BASIC816 Creator: Peter J. Weingartner "
>3b0328		20 44 65 73 69 67 6e 2c 20 42 41 53 49 43 38 31
>3b0338		36 20 43 72 65 61 74 6f 72 3a 20 50 65 74 65 72
>3b0348		20 4a 2e 20 57 65 69 6e 67 61 72 74 6e 65 72 20
>3b0358		20 20 20 20 20 20 20 20		                .fill 80 - len("  Kernel Design, BASIC816 Creator: Peter J. Weingartner "), $20
>3b0360		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0370		20 20 46 58 2f 4f 53 20		                .text "  FX/OS (GUI Environment) Design: Mike Bush"
>3b0378		28 47 55 49 20 45 6e 76 69 72 6f 6e 6d 65 6e 74
>3b0388		29 20 44 65 73 69 67 6e 3a 20 4d 69 6b 65 20 42
>3b0398		75 73 68
>3b039b		20 20 20 20 20 20 20 20		                .fill 80 - len("  FX/OS (GUI Environment) Design: Mike Bush"), $20
>3b03a3		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b03b3		20 20 20 20 20 20 20 20 20 20 20 20 20
>3b03c0		53 70 65 63 69 61 6c 20		                .text "Special Thanks:"
>3b03c8		54 68 61 6e 6b 73 3a
>3b03cf		20 20 20 20 20 20 20 20		                .fill 80 - len("Special Thanks:"), $20
>3b03d7		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b0407		20 20 20 20 20 20 20 20 20
>3b0410		20 20 45 61 72 6c 79 20		                .text "  Early Creator for the Foenix IDE & Kernel: Tom Wilson"
>3b0418		43 72 65 61 74 6f 72 20 66 6f 72 20 74 68 65 20
>3b0428		46 6f 65 6e 69 78 20 49 44 45 20 26 20 4b 65 72
>3b0438		6e 65 6c 3a 20 54 6f 6d 20 57 69 6c 73 6f 6e
>3b0447		20 20 20 20 20 20 20 20		                .fill 80 - len("  Early Creator for the Foenix IDE & Kernel: Tom Wilson"), $20
>3b044f		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b045f		20
>3b0460		20				                .text " "
>3b0461		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b0469		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b04a9		20 20 20 20 20 20 20
>3b04b0		20				                .text " "
>3b04b1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b04b9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b04f9		20 20 20 20 20 20 20
>3b0500		46 50 47 41 20 43 4f 52		                .text "FPGA CORES AUTHORS:"
>3b0508		45 53 20 41 55 54 48 4f 52 53 3a
>3b0513		20 20 20 20 20 20 20 20		                .fill 80 - len("FPGA CORES AUTHORS:"), $20
>3b051b		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b054b		20 20 20 20 20
>3b0550		20 20 4c 50 43 20 43 6f		                .text "  LPC Core: Howard M. Harte, hharte@opencores.org"
>3b0558		72 65 3a 20 48 6f 77 61 72 64 20 4d 2e 20 48 61
>3b0568		72 74 65 2c 20 68 68 61 72 74 65 40 6f 70 65 6e
>3b0578		63 6f 72 65 73 2e 6f 72 67
>3b0581		20 20 20 20 20 20 20 20		                .fill 80 - len("  LPC Core: Howard M. Harte, hharte@opencores.org"), $20
>3b0589		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0599		20 20 20 20 20 20 20
>3b05a0		20 20 53 44 43 61 72 64		                .text "  SDCard Core: Steve Fielding, sfielding@base2designs.com"
>3b05a8		20 43 6f 72 65 3a 20 53 74 65 76 65 20 46 69 65
>3b05b8		6c 64 69 6e 67 2c 20 73 66 69 65 6c 64 69 6e 67
>3b05c8		40 62 61 73 65 32 64 65 73 69 67 6e 73 2e 63 6f
>3b05d8		6d
>3b05d9		20 20 20 20 20 20 20 20		                .fill 80 - len("  SDCard Core: Steve Fielding, sfielding@base2designs.com"), $20
>3b05e1		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b05f0		20 20 50 53 32 20 43 6f		                .text "  PS2 Controller (C256 Foenix U): Miha Dolenc, mihad@opencores.org "
>3b05f8		6e 74 72 6f 6c 6c 65 72 20 28 43 32 35 36 20 46
>3b0608		6f 65 6e 69 78 20 55 29 3a 20 4d 69 68 61 20 44
>3b0618		6f 6c 65 6e 63 2c 20 6d 69 68 61 64 40 6f 70 65
>3b0628		6e 63 6f 72 65 73 2e 6f 72 67 20
>3b0633		20 20 20 20 20 20 20 20		                .fill 80 - len("  PS2 Controller (C256 Foenix U): Miha Dolenc, mihad@opencores.org "), $20
>3b063b		20 20 20 20 20
>3b0640		20 20 53 4e 37 36 34 38		                .text "  SN76489 (JT89) (C256 Foenix U): Jose Tejada Gomez"
>3b0648		39 20 28 4a 54 38 39 29 20 28 43 32 35 36 20 46
>3b0658		6f 65 6e 69 78 20 55 29 3a 20 4a 6f 73 65 20 54
>3b0668		65 6a 61 64 61 20 47 6f 6d 65 7a
>3b0673		20 20 20 20 20 20 20 20		                .fill 80 - len("  SN76489 (JT89) (C256 Foenix U): Jose Tejada Gomez"), $20
>3b067b		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b068b		20 20 20 20 20
>3b0690		20 20 59 4d 32 36 31 32		                .text "  YM2612 (JT12): Jose Tejada Gomez"
>3b0698		20 28 4a 54 31 32 29 3a 20 4a 6f 73 65 20 54 65
>3b06a8		6a 61 64 61 20 47 6f 6d 65 7a
>3b06b2		20 20 20 20 20 20 20 20		                .fill 80 - len("  YM2612 (JT12): Jose Tejada Gomez"), $20
>3b06ba		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b06ca		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b06da		20 20 20 20 20 20
>3b06e0		20 20 59 4d 32 31 35 31		                .text "  YM2151 (JT51) (C256 Foenix U): Jose Tejada Gomez"
>3b06e8		20 28 4a 54 35 31 29 20 28 43 32 35 36 20 46 6f
>3b06f8		65 6e 69 78 20 55 29 3a 20 4a 6f 73 65 20 54 65
>3b0708		6a 61 64 61 20 47 6f 6d 65 7a
>3b0712		20 20 20 20 20 20 20 20		                .fill 80 - len("  YM2151 (JT51) (C256 Foenix U): Jose Tejada Gomez"), $20
>3b071a		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b072a		20 20 20 20 20 20
>3b0730		20 20 53 49 44 20 28 36		                .text "  SID (6581): Gideon Zweijtzer, gideon.zweijtzer@gmail.com"
>3b0738		35 38 31 29 3a 20 47 69 64 65 6f 6e 20 5a 77 65
>3b0748		69 6a 74 7a 65 72 2c 20 67 69 64 65 6f 6e 2e 7a
>3b0758		77 65 69 6a 74 7a 65 72 40 67 6d 61 69 6c 2e 63
>3b0768		6f 6d
>3b076a		20 20 20 20 20 20 20 20		                .fill 80 - len("  SID (6581): Gideon Zweijtzer, gideon.zweijtzer@gmail.com"), $20
>3b0772		20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0780		20 20 55 41 52 54 20 28		                .text "  UART (16550) (C256 Foenix U): TBD"
>3b0788		31 36 35 35 30 29 20 28 43 32 35 36 20 46 6f 65
>3b0798		6e 69 78 20 55 29 3a 20 54 42 44
>3b07a3		20 20 20 20 20 20 20 20		                .fill 80 - len("  UART (16550) (C256 Foenix U): TBD"), $20
>3b07ab		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b07bb		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b07cb		20 20 20 20 20
>3b07d0		20				                .text " "
>3b07d1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b07d9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b0819		20 20 20 20 20 20 20
>3b0820		20				                .text " "
>3b0821		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b0829		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b0869		20 20 20 20 20 20 20
>3b0870		53 50 45 43 49 41 4c 20		                .text "SPECIAL THANKS:"
>3b0878		54 48 41 4e 4b 53 3a
>3b087f		20 20 20 20 20 20 20 20		                .fill 80 - len("SPECIAL THANKS:"), $20
>3b0887		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b08b7		20 20 20 20 20 20 20 20 20
>3b08c0		20 20 4a 6f 65 72 69 20		                .text "  Joeri Vanharen"
>3b08c8		56 61 6e 68 61 72 65 6e
>3b08d0		20 20 20 20 20 20 20 20		                .fill 80 - len("  Joeri Vanharen"), $20
>3b08d8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b0908		20 20 20 20 20 20 20 20
>3b0910		20 20 4a 69 6d 20 44 72		                .text "  Jim Drew"
>3b0918		65 77
>3b091a		20 20 20 20 20 20 20 20		                .fill 80 - len("  Jim Drew"), $20
>3b0922		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b0952		20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0960		20 20 41 69 64 61 6e 20		                .text "  Aidan Lawrence (Sound Chip Schematic references)"
>3b0968		4c 61 77 72 65 6e 63 65 20 28 53 6f 75 6e 64 20
>3b0978		43 68 69 70 20 53 63 68 65 6d 61 74 69 63 20 72
>3b0988		65 66 65 72 65 6e 63 65 73 29
>3b0992		20 20 20 20 20 20 20 20		                .fill 80 - len("  Aidan Lawrence (Sound Chip Schematic references)"), $20
>3b099a		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b09aa		20 20 20 20 20 20
>3b09b0		20				                .text " "
>3b09b1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b09b9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b09f9		20 20 20 20 20 20 20
>3b0a00		20				                .text " "
>3b0a01		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b0a09		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b0a49		20 20 20 20 20 20 20
>3b0a50		20 20 20 20 20 20 20 20		                .text "                                                                       "
>3b0a58		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b0a88		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0a97		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>3b0a9f		20
>3b0aa0		20 20 20 20 20 20 20 20		                .text "                     I would like to say a big thanks               "
>3b0aa8		20 20 20 20 20 20 20 20 20 20 20 20 20 49 20 77
>3b0ab8		6f 75 6c 64 20 6c 69 6b 65 20 74 6f 20 73 61 79
>3b0ac8		20 61 20 62 69 67 20 74 68 61 6e 6b 73 20 20 20
>3b0ad8		20 20 20 20 20 20 20 20 20 20 20 20
>3b0ae4		20 20 20 20 20 20 20 20		                .fill 80 - len("                     I would like to say a big thanks               "), $20
>3b0aec		20 20 20 20
>3b0af0		20 20 20 20 20 20 20 20		                .text "                  from the bottom of my heart for all of            "
>3b0af8		20 20 20 20 20 20 20 20 20 20 66 72 6f 6d 20 74
>3b0b08		68 65 20 62 6f 74 74 6f 6d 20 6f 66 20 6d 79 20
>3b0b18		68 65 61 72 74 20 66 6f 72 20 61 6c 6c 20 6f 66
>3b0b28		20 20 20 20 20 20 20 20 20 20 20 20
>3b0b34		20 20 20 20 20 20 20 20		                .fill 80 - len("                  from the bottom of my heart for all of            "), $20
>3b0b3c		20 20 20 20
>3b0b40		20 20 20 20 20 20 20 20		                .text "              those who have believed in this project since          "
>3b0b48		20 20 20 20 20 20 74 68 6f 73 65 20 77 68 6f 20
>3b0b58		68 61 76 65 20 62 65 6c 69 65 76 65 64 20 69 6e
>3b0b68		20 74 68 69 73 20 70 72 6f 6a 65 63 74 20 73 69
>3b0b78		6e 63 65 20 20 20 20 20 20 20 20 20 20
>3b0b85		20 20 20 20 20 20 20 20		                .fill 80 - len("              those who have believed in this project since          "), $20
>3b0b8d		20 20 20
>3b0b90		20 20 20 20 20 20 20 20		                .text "                the very beginning and have been there to            "
>3b0b98		20 20 20 20 20 20 20 20 74 68 65 20 76 65 72 79
>3b0ba8		20 62 65 67 69 6e 6e 69 6e 67 20 61 6e 64 20 68
>3b0bb8		61 76 65 20 62 65 65 6e 20 74 68 65 72 65 20 74
>3b0bc8		6f 20 20 20 20 20 20 20 20 20 20 20 20
>3b0bd5		20 20 20 20 20 20 20 20		                .fill 80 - len("                the very beginning and have been there to            "), $20
>3b0bdd		20 20 20
>3b0be0		20 20 20 20 20 20 20 20		                .text "                        make it what it is today!!!                  "
>3b0be8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0bf8		6d 61 6b 65 20 69 74 20 77 68 61 74 20 69 74 20
>3b0c08		69 73 20 74 6f 64 61 79 21 21 21 20 20 20 20 20
>3b0c18		20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0c25		20 20 20 20 20 20 20 20		                .fill 80 - len("                        make it what it is today!!!                  "), $20
>3b0c2d		20 20 20
>3b0c30		20 20 20 20 20 20 20 20		                .text "                                                                       "
>3b0c38		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b0c68		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0c77		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>3b0c7f		20
>3b0c80		20 20 20 20 20 20 20 20		                .text "                        Stefany"
>3b0c88		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0c98		53 74 65 66 61 6e 79
>3b0c9f		20 20 20 20 20 20 20 20		                .fill 80 - len("                        Stefany"), $20
>3b0ca7		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0cb7		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0cc7		20 20 20 20 20 20 20 20 20
>3b0cd0		20 20 20 20 20 20 20 20		                .fill 80 * (60 - 26),$20
>3b0cd8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 168 times (2688 bytes)...
>3b1768		20 20 20 20 20 20 20 20
>3b1770						.align 256
>3b1800		f3 f3 f3 f3 f3 f3 f3 f3		CREDITS_COLOR   .fill 80 * 60, $F3
>3b1808		f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3
;		...repeated 298 times (4768 bytes)...
>3b2ab8		f3 f3 f3 f3 f3 f3 f3 f3
.3e0000						BOOT_MENU
.3e0000						SplashScreenMain:
.3e0000		48		pha		                PHA             ; begin setdp macro
.3e0001		08		php		                PHP
.3e0002		c2 20		rep #$20	                REP #$20        ; set A long
.3e0004		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3e0007		5b		tcd		                TCD
.3e0008		28		plp		                PLP
.3e0009		68		pla		                PLA             ; end setdp macro
.3e000a		c2 10		rep #$10	                REP #$10        ; set X long
.3e000c		e2 20		sep #$20	                SEP #$20        ; set A short
.3e000e		22 ac 10 00	jsl $0010ac	                JSL INITCHLUT ; The Software does change one of the CH LUT, so, let's Init again
.3e0012		a9 00		lda #$00	                LDA #$00
.3e0014		85 f0		sta $f0		                STA INTERRUPT_STATE
.3e0016		85 f1		sta $f1		                STA INTERRUPT_COUNT
.3e0018		85 f2		sta $f2		                STA IRQ_COLOR_CHOICE
.3e001a		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0  ; Read the Pending Register &
.3e001e		29 04		and #$04	                AND #FNX0_INT02_TMR0
.3e0020		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0  ; Writing it back will clear the Active Bit
.3e0024		20 ea 00	jsr $3e00ea	                JSR Splash_Get_Machine_ID
.3e0027		20 1d 01	jsr $3e011d	                JSR Splash_Clear_Screen
.3e002a		20 07 01	jsr $3e0107	                JSR Splash_Load_FontSet
.3e002d		22 08 03 3e	jsl $3e0308	                JSL Splashscreen_BitMapSetup
.3e0031		20 1b 06	jsr $3e061b	                JSR Model_Update_Info_Field
.3e0034		20 fc 05	jsr $3e05fc	                JSR Set_Text_Color
.3e0037		a9 00		lda #$00	                LDA #$00
.3e0039		85 a6		sta $a6		                STA LINE_INDEX  ; Point to the first line to be displayed
.3e003b		85 a7		sta $a7		                STA LINE_INDEX + 1
.3e003d		20 a3 08	jsr $3e08a3	                JSR Line_Setup_Before_Display   ; Assign and Compute the Pointer
.3e0040						HAVE_FUN:
.3e0040		22 37 01 3e	jsl $3e0137	                JSL Splash_Moniker_Color_Rolling  ; Go Move The Colors on the Logo
.3e0044		a6 a6		ldx $a6		                LDX LINE_INDEX
.3e0046		e0 17 00	cpx #$0017	                CPX #NumberOfEntry
.3e0049		f0 08		beq $3e0053	                BEQ ByPassCharDisplay           ; If Equal all Lines have been displayed
.3e004b		20 e0 08	jsr $3e08e0	                JSR Line_Display_1_Character    ; Go move the cursor one stop
.3e004e		90 21		bcc $3e0071	                BCC Still_Displaying_Char
.3e0050		20 a3 08	jsr $3e08a3	                JSR Line_Setup_Before_Display   ; Assign and Compute the Pointer
.3e0053						ByPassCharDisplay:
.3e0053		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0055		22 48 10 00	jsl $001048	                JSL GETCH               ; Try to get a character
.3e0059		c9 00		cmp #$00	                CMP #0                  ; Did we get anything
.3e005b		f0 14		beq $3e0071	                BEQ Still_Displaying_Char            ; No: keep waiting until timeout
.3e005d		c9 81		cmp #$81	                CMP #CHAR_F1            ; Did the user press F1?
.3e005f		f0 1f		beq $3e0080	                BEQ return              ; Yes: return it
.3e0061		c9 82		cmp #$82	                CMP #CHAR_F2            ; Did the user press F2?
.3e0063		f0 1b		beq $3e0080	                BEQ return              ; Yes: return it
.3e0065		c9 83		cmp #$83	                CMP #CHAR_F3            ; Did the user press F3?
.3e0067		f0 17		beq $3e0080	                BEQ return              ; Yes: return it
.3e0069		c9 0d		cmp #$0d	                CMP #CHAR_CR            ; Did the user press CR?
.3e006b		f0 13		beq $3e0080	                BEQ return              ; Yes: return it
.3e006d		c9 20		cmp #$20	                CMP #CHAR_SP            ; Did the user press SPACE?
.3e006f		f0 0d		beq $3e007e	                BEQ exitshere
.3e0071						Still_Displaying_Char:
.3e0071						WaitForNextSOF:
.3e0071		af 40 01 00	lda $000140	                LDA @l INT_PENDING_REG0
.3e0075		29 01		and #$01	                AND #FNX0_INT00_SOF
.3e0077		c9 01		cmp #$01	                CMP #FNX0_INT00_SOF
.3e0079		d0 f6		bne $3e0071	                BNE WaitForNextSOF;
.3e007b		4c 40 00	jmp $3e0040	                JMP HAVE_FUN
.3e007e						exitshere:
.3e007e						timeout
.3e007e		a9 00		lda #$00	                LDA #0                  ; Return 0 for a timeout / SPACE
.3e0080						return
.3e0080		8f 08 00 00	sta $000008	                STA @l KRNL_BOOT_MENU_K          ; Store ther Keyboard Value
.3e0084		a9 00		lda #$00	                LDA #$00
.3e0086		8f 00 00 af	sta $af0000	                STA @l MASTER_CTRL_REG_L         ; Disable Everything
.3e008a		22 3c 05 3e	jsl $3e053c	                JSL SS_VDMA_CLEAR_MEMORY_640_480 ; Clear the Bitmap Screen
.3e008e		20 a3 00	jsr $3e00a3	                JSR VickyII_Registers_Clear      ; Reset All Vicky Registers
.3e0091		22 c0 10 00	jsl $0010c0	                JSL INITFONTSET ; Reload the Official FONT set
.3e0095		22 bc 10 00	jsl $0010bc	                JSL INITCURSOR ; Reset the Cursor to its origin
.3e0099		22 ac 10 00	jsl $0010ac	                JSL INITCHLUT ; The Software does change one of the CH LUT, so, let's Init again
.3e009d		22 cc 10 00	jsl $0010cc	                JSL INITVKYTXTMODE  ; Init VICKY TextMode now contains Hi-Res Dipswitch read and Automatic Text Size Parameter adjust
.3e00a1		ea		nop		                NOP
.3e00a2		6b		rtl		                RTL
.3e00a3						VickyII_Registers_Clear:
.3e00a3		e2 20		sep #$20	                SEP #$20        ; set A short
.3e00a5		c2 10		rep #$10	                REP #$10        ; set X long
.3e00a7		a2 00 00	ldx #$0000	                LDX #$0000
.3e00aa		a9 00		lda #$00	                LDA #$00
.3e00ac						ClearSpriteRegisters:
.3e00ac		9f 00 0c af	sta $af0c00,x	                STA @l SP00_CONTROL_REG, X
.3e00b0		e8		inx		                INX
.3e00b1		e0 00 02	cpx #$0200	                CPX #$0200
.3e00b4		d0 f6		bne $3e00ac	                BNE ClearSpriteRegisters
.3e00b6		a2 00 00	ldx #$0000	                LDX #$0000
.3e00b9		a9 00		lda #$00	                LDA #$00
.3e00bb						ClearTiles0Registers:
.3e00bb		9f 00 02 af	sta $af0200,x	                STA @l TL0_CONTROL_REG, X
.3e00bf		e8		inx		                INX
.3e00c0		e0 30 00	cpx #$0030	                CPX #$0030
.3e00c3		d0 f6		bne $3e00bb	                BNE ClearTiles0Registers
.3e00c5		ea		nop		                NOP
.3e00c6		a2 00 00	ldx #$0000	                LDX #$0000
.3e00c9		a9 00		lda #$00	                LDA #$00
.3e00cb						ClearTiles1Registers:
.3e00cb		9f 80 02 af	sta $af0280,x	                STA @l TILESET0_ADDY_L, X
.3e00cf		e8		inx		                INX
.3e00d0		e0 20 00	cpx #$0020	                CPX #$0020
.3e00d3		d0 f6		bne $3e00cb	                BNE ClearTiles1Registers
.3e00d5		ea		nop		                NOP
.3e00d6		a2 00 00	ldx #$0000	                LDX #$0000
.3e00d9		a9 00		lda #$00	                LDA #$00
.3e00db						ClearBitmapRegisters:
.3e00db		9f 00 01 af	sta $af0100,x	                STA @l BM0_CONTROL_REG, X
.3e00df		9f 08 01 af	sta $af0108,x	                STA @l BM1_CONTROL_REG, X
.3e00e3		e8		inx		                INX
.3e00e4		e0 10 00	cpx #$0010	                CPX #$0010
.3e00e7		d0 f2		bne $3e00db	                BNE ClearBitmapRegisters
.3e00e9		60		rts		                RTS
.3e00ea						Splash_Get_Machine_ID
.3e00ea		e2 20		sep #$20	                SEP #$20        ; set A short
.3e00ec		af 87 e8 af	lda $afe887	                LDA @lGABE_SYS_STAT
.3e00f0		29 03		and #$03	                AND #$03        ; Isolate the first 2 bits to know if it is a U or FMX
.3e00f2		85 b0		sta $b0		                STA MODEL
.3e00f4		c9 00		cmp #$00	                CMP #$00
.3e00f6		f0 0e		beq $3e0106	                BEQ DONE
.3e00f8		af 87 e8 af	lda $afe887	                LDA @lGABE_SYS_STAT
.3e00fc		29 04		and #$04	                AND #GABE_SYS_STAT_MID2 ; High 4Meg, Low - 2Megs
.3e00fe		c9 04		cmp #$04	                CMP #GABE_SYS_STAT_MID2
.3e0100		f0 04		beq $3e0106	                BEQ DONE
.3e0102		a9 02		lda #$02	                LDA #$02
.3e0104		85 b0		sta $b0		                STA MODEL       ; In this Scheme 00 - FMX, 01 - U+, 02 - U
.3e0106						DONE:
.3e0106		60		rts		                RTS
.3e0107						Splash_Load_FontSet
.3e0107		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0109		c2 10		rep #$10	                REP #$10        ; set X long
.3e010b		a2 00 00	ldx #$0000	                LDX #$0000
.3e010e						DONE_LOADING_FONT:
.3e010e		bf 00 08 3f	lda $3f0800,x	                LDA @l FONT_4_SPLASH, X
.3e0112		9f 00 80 af	sta $af8000,x	                STA @l FONT_MEMORY_BANK0, X
.3e0116		e8		inx		                INX
.3e0117		e0 00 08	cpx #$0800	                CPX #2048
.3e011a		d0 f2		bne $3e010e	                BNE DONE_LOADING_FONT
.3e011c		60		rts		                RTS
.3e011d						Splash_Clear_Screen
.3e011d		e2 20		sep #$20	                SEP #$20        ; set A short
.3e011f		c2 10		rep #$10	                REP #$10        ; set X long
.3e0121		a2 00 00	ldx #$0000	                LDX #$0000
.3e0124						Branch_Clear:
.3e0124		a9 20		lda #$20	                LDA #$20
.3e0126		9f 00 a0 af	sta $afa000,x	                STA @l CS_TEXT_MEM_PTR,X
.3e012a		a9 f0		lda #$f0	                LDA #$F0
.3e012c		9f 00 c0 af	sta $afc000,x	                STA @l CS_COLOR_MEM_PTR,X
.3e0130		e8		inx		                INX
.3e0131		e0 00 20	cpx #$2000	                CPX #$2000
.3e0134		d0 ee		bne $3e0124	                BNE Branch_Clear
.3e0136		60		rts		                RTS
=$00						IRQ_SOF_ST0 = $00
=$01						IRQ_SOF_ST1 = $01
=$02						IRQ_SOF_ST2 = $02
.3e0137						Splash_Moniker_Color_Rolling
.3e0137		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0139		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.3e013d		29 01		and #$01	                AND #FNX0_INT00_SOF
.3e013f		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.3e0143		a5 f0		lda $f0		                LDA INTERRUPT_STATE
.3e0145		c9 00		cmp #$00	                CMP #IRQ_SOF_ST0
.3e0147		f0 0c		beq $3e0155	                BEQ SERVE_STATE0
.3e0149		c9 01		cmp #$01	                CMP #IRQ_SOF_ST1
.3e014b		f0 1a		beq $3e0167	                BEQ SERVE_STATE1
.3e014d		c9 02		cmp #$02	                CMP #IRQ_SOF_ST2
.3e014f		d0 03		bne $3e0154	                BNE NOT_SERVE_STATE2
.3e0151		82 39 01	brl $3e028d	                BRL SERVE_STATE2
.3e0154						NOT_SERVE_STATE2
.3e0154		6b		rtl		                RTL
.3e0155						SERVE_STATE0
.3e0155		a5 f1		lda $f1		                LDA INTERRUPT_COUNT
.3e0157		c9 04		cmp #$04	                CMP #$04
.3e0159		f0 03		beq $3e015e	                BEQ SERVE_NEXT_STATE
.3e015b		e6 f1		inc $f1		                INC INTERRUPT_COUNT
.3e015d		6b		rtl		                RTL
.3e015e						SERVE_NEXT_STATE
.3e015e		a9 00		lda #$00	                LDA #$00
.3e0160		85 f1		sta $f1		                STA INTERRUPT_COUNT
.3e0162		a9 01		lda #$01	                LDA #IRQ_SOF_ST1
.3e0164		85 f0		sta $f0		                STA INTERRUPT_STATE
.3e0166		6b		rtl		                RTL
.3e0167						SERVE_STATE1
.3e0167		c2 30		rep #$30	                REP #$30        ; set A&X long
.3e0169		a9 00 00	lda #$0000	                LDA #$0000
.3e016c		a2 00 00	ldx #$0000	                LDX #$0000
.3e016f		e2 30		sep #$30	                SEP #$30        ; set A&X short
.3e0171		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.3e0173		bf c0 02 3e	lda $3e02c0,x	                LDA @lCOLOR_POINTER+0, X
.3e0177		aa		tax		                TAX
.3e0178		bf a0 02 3e	lda $3e02a0,x	                LDA @lCOLOR_CHART, X
.3e017c		8f e0 3f af	sta $af3fe0	                STA @lGRPH_LUT7_PTR+992
.3e0180		bf a1 02 3e	lda $3e02a1,x	                LDA @lCOLOR_CHART+1, X
.3e0184		8f e1 3f af	sta $af3fe1	                STA @lGRPH_LUT7_PTR+993
.3e0188		bf a2 02 3e	lda $3e02a2,x	                LDA @lCOLOR_CHART+2, X
.3e018c		8f e2 3f af	sta $af3fe2	                STA @lGRPH_LUT7_PTR+994
.3e0190		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.3e0192		bf c1 02 3e	lda $3e02c1,x	                LDA @lCOLOR_POINTER+1, X
.3e0196		aa		tax		                TAX
.3e0197		bf a0 02 3e	lda $3e02a0,x	                LDA @lCOLOR_CHART, X
.3e019b		8f e4 3f af	sta $af3fe4	                STA @lGRPH_LUT7_PTR+996
.3e019f		bf a1 02 3e	lda $3e02a1,x	                LDA @lCOLOR_CHART+1, X
.3e01a3		8f e5 3f af	sta $af3fe5	                STA @lGRPH_LUT7_PTR+997
.3e01a7		bf a2 02 3e	lda $3e02a2,x	                LDA @lCOLOR_CHART+2, X
.3e01ab		8f e6 3f af	sta $af3fe6	                STA @lGRPH_LUT7_PTR+998
.3e01af		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.3e01b1		bf c2 02 3e	lda $3e02c2,x	                LDA @lCOLOR_POINTER+2, X
.3e01b5		aa		tax		                TAX
.3e01b6		bf a0 02 3e	lda $3e02a0,x	                LDA @lCOLOR_CHART, X
.3e01ba		8f e8 3f af	sta $af3fe8	                STA @lGRPH_LUT7_PTR+1000
.3e01be		bf a1 02 3e	lda $3e02a1,x	                LDA @lCOLOR_CHART+1, X
.3e01c2		8f e9 3f af	sta $af3fe9	                STA @lGRPH_LUT7_PTR+1001
.3e01c6		bf a2 02 3e	lda $3e02a2,x	                LDA @lCOLOR_CHART+2, X
.3e01ca		8f ea 3f af	sta $af3fea	                STA @lGRPH_LUT7_PTR+1002
.3e01ce		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.3e01d0		bf c3 02 3e	lda $3e02c3,x	                LDA @lCOLOR_POINTER+3, X
.3e01d4		aa		tax		                TAX
.3e01d5		bf a0 02 3e	lda $3e02a0,x	                LDA @lCOLOR_CHART, X
.3e01d9		8f ec 3f af	sta $af3fec	                STA @lGRPH_LUT7_PTR+1004
.3e01dd		bf a1 02 3e	lda $3e02a1,x	                LDA @lCOLOR_CHART+1, X
.3e01e1		8f ed 3f af	sta $af3fed	                STA @lGRPH_LUT7_PTR+1005
.3e01e5		bf a2 02 3e	lda $3e02a2,x	                LDA @lCOLOR_CHART+2, X
.3e01e9		8f ee 3f af	sta $af3fee	                STA @lGRPH_LUT7_PTR+1006
.3e01ed		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.3e01ef		bf c4 02 3e	lda $3e02c4,x	                LDA @lCOLOR_POINTER+4, X
.3e01f3		aa		tax		                TAX
.3e01f4		bf a0 02 3e	lda $3e02a0,x	                LDA @lCOLOR_CHART, X
.3e01f8		8f f0 3f af	sta $af3ff0	                STA @lGRPH_LUT7_PTR+1008
.3e01fc		bf a1 02 3e	lda $3e02a1,x	                LDA @lCOLOR_CHART+1, X
.3e0200		8f f1 3f af	sta $af3ff1	                STA @lGRPH_LUT7_PTR+1009
.3e0204		bf a2 02 3e	lda $3e02a2,x	                LDA @lCOLOR_CHART+2, X
.3e0208		8f f2 3f af	sta $af3ff2	                STA @lGRPH_LUT7_PTR+1010
.3e020c		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.3e020e		bf c5 02 3e	lda $3e02c5,x	                LDA @lCOLOR_POINTER+5, X
.3e0212		aa		tax		                TAX
.3e0213		bf a0 02 3e	lda $3e02a0,x	                LDA @lCOLOR_CHART, X
.3e0217		8f f4 3f af	sta $af3ff4	                STA @lGRPH_LUT7_PTR+1012
.3e021b		bf a1 02 3e	lda $3e02a1,x	                LDA @lCOLOR_CHART+1, X
.3e021f		8f f5 3f af	sta $af3ff5	                STA @lGRPH_LUT7_PTR+1013
.3e0223		bf a2 02 3e	lda $3e02a2,x	                LDA @lCOLOR_CHART+2, X
.3e0227		8f f6 3f af	sta $af3ff6	                STA @lGRPH_LUT7_PTR+1014
.3e022b		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.3e022d		bf c6 02 3e	lda $3e02c6,x	                LDA @lCOLOR_POINTER+6, X
.3e0231		aa		tax		                TAX
.3e0232		bf a0 02 3e	lda $3e02a0,x	                LDA @lCOLOR_CHART, X
.3e0236		8f f8 3f af	sta $af3ff8	                STA @lGRPH_LUT7_PTR+1016
.3e023a		bf a1 02 3e	lda $3e02a1,x	                LDA @lCOLOR_CHART+1, X
.3e023e		8f f9 3f af	sta $af3ff9	                STA @lGRPH_LUT7_PTR+1017
.3e0242		bf a2 02 3e	lda $3e02a2,x	                LDA @lCOLOR_CHART+2, X
.3e0246		8f fa 3f af	sta $af3ffa	                STA @lGRPH_LUT7_PTR+1018
.3e024a		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.3e024c		bf c7 02 3e	lda $3e02c7,x	                LDA @lCOLOR_POINTER+7, X
.3e0250		aa		tax		                TAX
.3e0251		bf a0 02 3e	lda $3e02a0,x	                LDA @lCOLOR_CHART, X
.3e0255		8f fc 3f af	sta $af3ffc	                STA @lGRPH_LUT7_PTR+1020
.3e0259		8f 50 1f af	sta $af1f50	                STA @lFG_CHAR_LUT_PTR + $10           ;
.3e025d		bf a1 02 3e	lda $3e02a1,x	                LDA @lCOLOR_CHART+1, X
.3e0261		8f fd 3f af	sta $af3ffd	                STA @lGRPH_LUT7_PTR+1021
.3e0265		8f 51 1f af	sta $af1f51	                STA @lFG_CHAR_LUT_PTR + $11            ;
.3e0269		bf a2 02 3e	lda $3e02a2,x	                LDA @lCOLOR_CHART+2, X
.3e026d		8f fe 3f af	sta $af3ffe	                STA @lGRPH_LUT7_PTR+1022
.3e0271		8f 52 1f af	sta $af1f52	                STA @lFG_CHAR_LUT_PTR + $12            ;
.3e0275						HERE
.3e0275		18		clc		                CLC
.3e0276		a5 f2		lda $f2		                LDA IRQ_COLOR_CHOICE
.3e0278		69 09		adc #$09	                ADC #$09
.3e027a		85 f2		sta $f2		                STA IRQ_COLOR_CHOICE
.3e027c		a5 f2		lda $f2		                LDA IRQ_COLOR_CHOICE
.3e027e		c9 48		cmp #$48	                CMP #$48
.3e0280		d0 04		bne $3e0286	                BNE EXIT_COLOR_CHANGE
.3e0282		a9 00		lda #$00	                LDA #$00
.3e0284		85 f2		sta $f2		                STA IRQ_COLOR_CHOICE
.3e0286						EXIT_COLOR_CHANGE
.3e0286		c2 10		rep #$10	                REP #$10        ; set X long
.3e0288		a9 00		lda #$00	                LDA #IRQ_SOF_ST0
.3e028a		85 f0		sta $f0		                STA INTERRUPT_STATE
.3e028c		6b		rtl		                RTL
.3e028d						SERVE_STATE2
.3e028d		a9 00		lda #$00	                LDA #IRQ_SOF_ST0
.3e028f		85 f0		sta $f0		                STA INTERRUPT_STATE
.3e0291		6b		rtl		                RTL
>3e0292						.align 16
>3e02a0		2e 2e a4 00			COLOR_CHART     .text 46, 46, 164, 00     ;248
>3e02a4		25 67 c1 00			                .text 37, 103, 193, 00    ;249
>3e02a8		20 9d a4 00			                .text 32, 157, 164, 00    ;250
>3e02ac		2c 9c 37 00			                .text 44, 156 , 55, 00    ;251
>3e02b0		94 8e 2c 00			                .text 148, 142, 44, 00    ;252
>3e02b4		91 4b 2b 00			                .text 145, 75, 43, 00     ;253
>3e02b8		8e 2f 61 00			                .text 142, 47, 97, 00     ;254
>3e02bc		21 50 7f 00			                .text 33, 80, 127, 00     ;255
>3e02c0		00 04 08 0c 10 14 18 1c		COLOR_POINTER   .text 0,4,8,12,16,20,24,28,0
>3e02c8		00
>3e02c9		04 08 0c 10 14 18 1c 00		                .text 4,8,12,16,20,24,28,0,0
>3e02d1		00
>3e02d2		08 0c 10 14 18 1c 00 04		                .text 8,12,16,20,24,28,0,4,0
>3e02da		00
>3e02db		0c 10 14 18 1c 00 04 08		                .text 12,16,20,24,28,0,4,8,0
>3e02e3		00
>3e02e4		10 14 18 1c 00 04 08 0c		                .text 16,20,24,28,0,4,8,12,0
>3e02ec		00
>3e02ed		14 18 1c 00 04 08 0c 10		                .text 20,24,28,0,4,8,12,16,0
>3e02f5		00
>3e02f6		18 1c 00 04 08 0c 10 14		                .text 24,28,0,4,8,12,16,20,0
>3e02fe		00
>3e02ff		1c 00 04 08 0c 10 14 18		                .text 28,0,4,8,12,16,20,24,0
>3e0307		00

;******  Processing file: src\SplashScreenCode/Splashscreen_Bitmap_Setup.asm

=320						C256Moniker_SizeX = 320
=64						C256Moniker_SizeY = 64
=160						C256Moniker_PosX = 160
=48						C256Moniker_PosY = 48
=160						FMXMoniker_SizeX = 160
=80						FMXMoniker_SizeY = 80
=240						FMXMoniker_PosX = 240
=110						FMXMoniker_PosY = 110
=96						UPlusMoniker_SizeX = 96
=64						UPlusMoniker_SizeY = 64
=272						UPlusMoniker_PosX = 272
=110						UPlusMoniker_PosY = 110
=64						UMoniker_SizeX = 64
=64						UMoniker_SizeY = 64
=288						UMoniker_PosX = 288
=110						UMoniker_PosY = 110
=640						Bitmap_X_Size  = 640
=480						Bitmap_Y_Size  = 480
.3e0308						Splashscreen_BitMapSetup
.3e0308		e2 20		sep #$20	                SEP #$20        ; set A short
.3e030a		c2 10		rep #$10	                REP #$10        ; set X long
.3e030c		a9 0f		lda #$0f	        LDA #( Mstr_Ctrl_Graph_Mode_En | Mstr_Ctrl_Bitmap_En | Mstr_Ctrl_Text_Mode_En | Mstr_Ctrl_Text_Overlay );
.3e030e		8f 00 00 af	sta $af0000	        STA @l MASTER_CTRL_REG_L
.3e0312		a9 00		lda #$00	        LDA #$00
.3e0314		8f 01 00 af	sta $af0001	        STA @l MASTER_CTRL_REG_H
.3e0318		a9 00		lda #$00	        LDA #$00
.3e031a		8f 00 01 af	sta $af0100	        STA @l BM0_CONTROL_REG
.3e031e		a9 0f		lda #$0f	        LDA #( BM_Enable | BM_LUT7)
.3e0320		8f 08 01 af	sta $af0108	        STA @l BM1_CONTROL_REG
.3e0324		a9 00		lda #$00	        LDA #$00
.3e0326		8f 09 01 af	sta $af0109	        STA @l BM1_START_ADDY_L
.3e032a		a9 00		lda #$00	        LDA #$00
.3e032c		8f 0a 01 af	sta $af010a	        STA @l BM1_START_ADDY_M
.3e0330		8f 0b 01 af	sta $af010b	        STA @l BM1_START_ADDY_H
.3e0334		a9 01		lda #$01	        LDA #$01
.3e0336		8f 04 00 af	sta $af0004	        STA BORDER_CTRL_REG
.3e033a		a9 08		lda #$08	        LDA #$08
.3e033c		8f 08 00 af	sta $af0008	        STA BORDER_X_SIZE
.3e0340		8f 09 00 af	sta $af0009	        STA BORDER_Y_SIZE
.3e0344		a9 80		lda #$80	        LDA #$80
.3e0346		8f 06 00 af	sta $af0006	        STA BORDER_COLOR_G
.3e034a		a9 00		lda #$00	        LDA #$00
.3e034c		8f 05 00 af	sta $af0005	        STA BORDER_COLOR_B
.3e0350		8f 07 00 af	sta $af0007	        STA BORDER_COLOR_R
.3e0354		a9 a0		lda #$a0	        LDA #$A0
.3e0356		8f 12 00 af	sta $af0012	        STA @l VKY_TXT_CURSOR_CHAR_REG
.3e035a		a9 10		lda #$10	        LDA #$10
.3e035c		8f 0e 00 af	sta $af000e	        STA @l BACKGROUND_COLOR_G
.3e0360		a9 10		lda #$10	        LDA #$10
.3e0362		8f 0f 00 af	sta $af000f	        STA @l BACKGROUND_COLOR_R
.3e0366		8f 0d 00 af	sta $af000d	        STA @l BACKGROUND_COLOR_B
.3e036a		e2 20		sep #$20	                SEP #$20        ; set A short
.3e036c		c2 10		rep #$10	                REP #$10        ; set X long
.3e036e		a2 00 00	ldx #$0000	        LDX #$0000
.3e0371						SS_LUT_BRANCH:
.3e0371		bf 00 0e 3e	lda $3e0e00,x	        LDA @l SS_MONIKER_LUT, X
.3e0375		ea		nop		        NOP
.3e0376		9f 00 3c af	sta $af3c00,x	        STA @l GRPH_LUT7_PTR, X
.3e037a		e8		inx		        INX
.3e037b		e0 00 04	cpx #$0400	        CPX #1024
.3e037e		d0 f1		bne $3e0371	        BNE SS_LUT_BRANCH
.3e0380		a9 00		lda #$00	        LDA #$00
.3e0382		8f 04 3c af	sta $af3c04	        STA @l GRPH_LUT7_PTR + 4
.3e0386		8f 05 3c af	sta $af3c05	        STA @l GRPH_LUT7_PTR + 5
.3e038a		8f 06 3c af	sta $af3c06	        STA @l GRPH_LUT7_PTR + 6
.3e038e		22 3c 05 3e	jsl $3e053c	        JSL SS_VDMA_CLEAR_MEMORY_640_480;
.3e0392		c2 20		rep #$20	                REP #$20        ; set A long
.3e0394		a9 00 12	lda #$1200	        LDA #<>SS_MONIKER      ; Set up the Source
.3e0397		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.3e039b		a9 00 50	lda #$5000	        LDA #<>( C256Moniker_SizeX * C256Moniker_SizeY )
.3e039e		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.3e03a2		a9 00 00	lda #$0000	        LDA #$0000
.3e03a5		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.3e03a9		a9 a0 78	lda #$78a0	        LDA #<>( C256Moniker_PosY * Bitmap_X_Size + C256Moniker_PosX)    ; Set up the Source
.3e03ac		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.3e03b0		a9 40 01	lda #$0140	        LDA #C256Moniker_SizeX
.3e03b3		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.3e03b7		a9 40 00	lda #$0040	        LDA #C256Moniker_SizeY
.3e03ba		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.3e03be		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.3e03c1		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.3e03c5		e2 20		sep #$20	                SEP #$20        ; set A short
.3e03c7		a9 3e		lda #$3e	        LDA #`SS_MONIKER
.3e03c9		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.3e03cd		a9 00		lda #$00	        LDA #`( C256Moniker_SizeX * C256Moniker_SizeY )
.3e03cf		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.3e03d3		a9 00		lda #$00	        LDA #$00
.3e03d5		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.3e03d9		a9 00		lda #$00	        LDA #`( C256Moniker_PosY * Bitmap_X_Size + C256Moniker_PosX)
.3e03db		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.3e03df		22 f7 04 3e	jsl $3e04f7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.3e03e3		e2 20		sep #$20	                SEP #$20        ; set A short
.3e03e5		af b0 00 00	lda $0000b0	        LDA @lMODEL
.3e03e9		29 03		and #$03	        AND #$03
.3e03eb		c9 00		cmp #$00	        CMP #$00
.3e03ed		f0 0b		beq $3e03fa	        BEQ DMA_FMX_Moniker
.3e03ef		c9 01		cmp #$01	        CMP #$01
.3e03f1		f0 5b		beq $3e044e	        BEQ DMA_UPlus_Moniker
.3e03f3		c9 02		cmp #$02	        CMP #$02
.3e03f5		d0 03		bne $3e03fa	        BNE BAD_MODEL_NUMBER
.3e03f7		82 a8 00	brl $3e04a2	        BRL DMA_U_Moniker
.3e03fa						 BAD_MODEL_NUMBER:
.3e03fa						DMA_FMX_Moniker:
.3e03fa		c2 20		rep #$20	                REP #$20        ; set A long
.3e03fc		a9 00 62	lda #$6200	        LDA #<>SS_FMX_TXT      ; Set up the Source
.3e03ff		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.3e0403		a9 00 32	lda #$3200	        LDA #<>( FMXMoniker_SizeX * FMXMoniker_SizeY )
.3e0406		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.3e040a		a9 00 00	lda #$0000	        LDA #$0000
.3e040d		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.3e0411		a9 f0 13	lda #$13f0	        LDA #<>( FMXMoniker_PosY * Bitmap_X_Size + FMXMoniker_PosX)    ; Set up the Source
.3e0414		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.3e0418		a9 a0 00	lda #$00a0	        LDA #FMXMoniker_SizeX
.3e041b		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.3e041f		a9 50 00	lda #$0050	        LDA #FMXMoniker_SizeY
.3e0422		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.3e0426		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.3e0429		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.3e042d		e2 20		sep #$20	                SEP #$20        ; set A short
.3e042f		a9 3e		lda #$3e	        LDA #`SS_FMX_TXT
.3e0431		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.3e0435		a9 00		lda #$00	        LDA #`( FMXMoniker_SizeX * FMXMoniker_SizeY )
.3e0437		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.3e043b		a9 00		lda #$00	        LDA #$00
.3e043d		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.3e0441		a9 01		lda #$01	        LDA #`( FMXMoniker_PosY * Bitmap_X_Size + FMXMoniker_PosX)
.3e0443		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.3e0447		22 f7 04 3e	jsl $3e04f7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.3e044b		4c f6 04	jmp $3e04f6	        JMP Done_DMA_Model_Moniker
.3e044e						DMA_UPlus_Moniker:
.3e044e		c2 20		rep #$20	                REP #$20        ; set A long
.3e0450		a9 00 94	lda #$9400	        LDA #<>SS_UPlus_TXT      ; Set up the Source
.3e0453		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.3e0457		a9 00 18	lda #$1800	        LDA #<>( UPlusMoniker_SizeX * UPlusMoniker_SizeY )
.3e045a		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.3e045e		a9 00 00	lda #$0000	        LDA #$0000
.3e0461		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.3e0465		a9 10 14	lda #$1410	        LDA #<>( UPlusMoniker_PosY * Bitmap_X_Size + UPlusMoniker_PosX)    ; Set up the Source
.3e0468		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.3e046c		a9 60 00	lda #$0060	        LDA #UPlusMoniker_SizeX
.3e046f		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.3e0473		a9 40 00	lda #$0040	        LDA #UPlusMoniker_SizeY
.3e0476		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.3e047a		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.3e047d		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.3e0481		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0483		a9 3e		lda #$3e	        LDA #`SS_UPlus_TXT
.3e0485		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.3e0489		a9 00		lda #$00	        LDA #`( UPlusMoniker_SizeX * UPlusMoniker_SizeY )
.3e048b		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.3e048f		a9 00		lda #$00	        LDA #$00
.3e0491		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.3e0495		a9 01		lda #$01	        LDA #`( UPlusMoniker_PosY * Bitmap_X_Size + UPlusMoniker_PosX)
.3e0497		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.3e049b		22 f7 04 3e	jsl $3e04f7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.3e049f		4c f6 04	jmp $3e04f6	        JMP Done_DMA_Model_Moniker
.3e04a2						DMA_U_Moniker:
.3e04a2		c2 20		rep #$20	                REP #$20        ; set A long
.3e04a4		a9 00 ac	lda #$ac00	        LDA #<>SS_U_TXT      ; Set up the Source
.3e04a7		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.3e04ab		a9 00 10	lda #$1000	        LDA #<>( UMoniker_SizeX *UMoniker_SizeY )
.3e04ae		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.3e04b2		a9 00 00	lda #$0000	        LDA #$0000
.3e04b5		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.3e04b9		a9 20 14	lda #$1420	        LDA #<>( UMoniker_PosY * Bitmap_X_Size + UMoniker_PosX)    ; Set up the Source
.3e04bc		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.3e04c0		a9 40 00	lda #$0040	        LDA #UMoniker_SizeX
.3e04c3		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.3e04c7		a9 40 00	lda #$0040	        LDA #UMoniker_SizeY
.3e04ca		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.3e04ce		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.3e04d1		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.3e04d5		e2 20		sep #$20	                SEP #$20        ; set A short
.3e04d7		a9 3e		lda #$3e	        LDA #`SS_U_TXT
.3e04d9		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.3e04dd		a9 00		lda #$00	        LDA #`( UMoniker_SizeX * UMoniker_SizeY )
.3e04df		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.3e04e3		a9 00		lda #$00	        LDA #$00
.3e04e5		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.3e04e9		a9 01		lda #$01	        LDA #`( UMoniker_PosY * Bitmap_X_Size + UMoniker_PosX)
.3e04eb		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.3e04ef		22 f7 04 3e	jsl $3e04f7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.3e04f3		4c f6 04	jmp $3e04f6	        JMP Done_DMA_Model_Moniker
.3e04f6						Done_DMA_Model_Moniker
.3e04f6		6b		rtl		        RTL
.3e04f7						SS_VDMA_SETUP_2_TRANSFER_IMAGE
.3e04f7		e2 20		sep #$20	                SEP #$20        ; set A short
.3e04f9		a9 11		lda #$11	        LDA #( SDMA_CTRL0_Enable | SDMA_CTRL0_SysRAM_Src )
.3e04fb		8f 20 04 af	sta $af0420	        STA @l SDMA_CTRL_REG0
.3e04ff		a9 13		lda #$13	        LDA #( VDMA_CTRL_Enable |  VDMA_CTRL_SysRAM_Src | VDMA_CTRL_1D_2D )
.3e0501		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e0505		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0507		af 00 04 af	lda $af0400	        LDA @l VDMA_CONTROL_REG
.3e050b		09 80		ora #$80	        ORA #VDMA_CTRL_Start_TRF
.3e050d		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e0511		af 20 04 af	lda $af0420	        LDA @l SDMA_CTRL_REG0
.3e0515		09 80		ora #$80	        ORA #SDMA_CTRL0_Start_TRF
.3e0517		8f 20 04 af	sta $af0420	        STA @l SDMA_CTRL_REG0
.3e051b		ea		nop		        NOP ; When the transfer is started the CPU will be put on Hold (RDYn)...
.3e051c		ea		nop		        NOP ; Before it actually gets to stop it will execute a couple more instructions
.3e051d		ea		nop		        NOP ; From that point on, the CPU is halted (keep that in mind) No IRQ will be processed either during that time
.3e051e		ea		nop		        NOP
.3e051f		ea		nop		        NOP
.3e0520		ea		nop		        NOP
.3e0521		ea		nop		        NOP
.3e0522		ea		nop		        NOP
.3e0523		ea		nop		        NOP
.3e0524		ea		nop		        NOP
.3e0525		a9 00		lda #$00	        LDA #$00
.3e0527		8f 20 04 af	sta $af0420	        STA @l SDMA_CTRL_REG0
.3e052b						NOTFINISHED:
.3e052b		af 01 04 af	lda $af0401	        LDA @l VDMA_STATUS_REG
.3e052f		29 80		and #$80	        AND #$80
.3e0531		c9 80		cmp #$80	        CMP #$80
.3e0533		f0 f6		beq $3e052b	        BEQ NOTFINISHED
.3e0535		a9 00		lda #$00	        LDA #$00
.3e0537		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e053b		6b		rtl		        RTL
.3e053c						SS_VDMA_CLEAR_MEMORY_640_480
.3e053c		e2 20		sep #$20	                SEP #$20        ; set A short
.3e053e		a9 05		lda #$05	        LDA #( VDMA_CTRL_Enable | VDMA_CTRL_TRF_Fill )
.3e0540		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e0544		a9 00		lda #$00	        LDA #$00
.3e0546		8f 01 04 af	sta $af0401	        STA @l VDMA_BYTE_2_WRITE
.3e054a		c2 20		rep #$20	                REP #$20        ; set A long
.3e054c		a9 00 00	lda #$0000	        LDA #$0000      ; Set up the Source
.3e054f		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.3e0553		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0555		a9 00		lda #$00	        LDA #$00
.3e0557		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.3e055b		c2 20		rep #$20	                REP #$20        ; set A long
.3e055d		a9 00 b0	lda #$b000	        LDA #<>(640*480)
.3e0560		8f 08 04 af	sta $af0408	        STA @l VDMA_SIZE_L
.3e0564		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0566		a9 04		lda #$04	        LDA #`(640*480)
.3e0568		8f 0a 04 af	sta $af040a	        STA @l VDMA_SIZE_H
.3e056c		a9 00		lda #$00	        LDA #$00
.3e056e		8f 0b 04 af	sta $af040b	        STA @l VDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.3e0572		af 00 04 af	lda $af0400	        LDA VDMA_CONTROL_REG
.3e0576		09 80		ora #$80	        ORA #VDMA_CTRL_Start_TRF
.3e0578		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e057c		ea		nop		         NOP ; When the transfer is started the CPU will be put on Hold (RDYn)...
.3e057d		ea		nop		        NOP ; Before it actually gets to stop it will execute a couple more instructions
.3e057e		ea		nop		        NOP ; From that point on, the CPU is halted (keep that in mind) No IRQ will be processed either during that time
.3e057f		ea		nop		        NOP
.3e0580		ea		nop		        NOP
.3e0581		ea		nop		        NOP
.3e0582		ea		nop		        NOP
.3e0583		ea		nop		        NOP
.3e0584						SS_VDMA_CLR_LOOPA:
.3e0584		af 01 04 af	lda $af0401	        LDA @l VDMA_STATUS_REG
.3e0588		29 80		and #$80	        AND #$80
.3e058a		c9 80		cmp #$80	        CMP #$80  ; Check if bit $80 is cleared to indicate that the VDMA is done.
.3e058c		f0 f6		beq $3e0584	        BEQ SS_VDMA_CLR_LOOPA
.3e058e		ea		nop		        NOP
.3e058f		a9 00		lda #$00	        LDA #$00
.3e0591		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e0595		6b		rtl		        RTL
.3e0596						SS_VDMA_TRANSFER_VRAM_2_VRAM
.3e0596		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0598		a9 01		lda #$01	        LDA #( VDMA_CTRL_Enable )
.3e059a		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e059e		a9 00		lda #$00	        LDA #$00
.3e05a0		8f 01 04 af	sta $af0401	        STA @l VDMA_BYTE_2_WRITE
.3e05a4		c2 20		rep #$20	                REP #$20        ; set A long
.3e05a6		a9 00 96	lda #$9600	        LDA #$9600      ; Set up the Source
.3e05a9		8f 02 04 af	sta $af0402	        STA @l VDMA_SRC_ADDY_L
.3e05ad		e2 20		sep #$20	                SEP #$20        ; set A short
.3e05af		a9 00		lda #$00	        LDA #$00
.3e05b1		8f 04 04 af	sta $af0404	        STA @l VDMA_SRC_ADDY_H
.3e05b5		c2 20		rep #$20	                REP #$20        ; set A long
.3e05b7		a9 00 00	lda #$0000	        LDA #$0000      ; Set up the Source
.3e05ba		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.3e05be		e2 20		sep #$20	                SEP #$20        ; set A short
.3e05c0		a9 00		lda #$00	        LDA #$00
.3e05c2		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.3e05c6		c2 20		rep #$20	                REP #$20        ; set A long
.3e05c8		a9 00 14	lda #$1400	        LDA #<>(320*16)
.3e05cb		8f 08 04 af	sta $af0408	        STA @l VDMA_SIZE_L
.3e05cf		e2 20		sep #$20	                SEP #$20        ; set A short
.3e05d1		a9 00		lda #$00	        LDA #`(320*16)
.3e05d3		8f 0a 04 af	sta $af040a	        STA @l VDMA_SIZE_H
.3e05d7		a9 00		lda #$00	        LDA #$00
.3e05d9		8f 0b 04 af	sta $af040b	        STA @l VDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.3e05dd		af 00 04 af	lda $af0400	        LDA VDMA_CONTROL_REG
.3e05e1		09 80		ora #$80	        ORA #VDMA_CTRL_Start_TRF
.3e05e3		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e05e7		ea		nop		        NOP
.3e05e8		ea		nop		        NOP
.3e05e9		ea		nop		        NOP
.3e05ea						SS_VDMA_CLR_LOOPB:
.3e05ea		af 01 04 af	lda $af0401	        LDA @l VDMA_STATUS_REG
.3e05ee		29 80		and #$80	        AND #$80
.3e05f0		c9 80		cmp #$80	        CMP #$80  ; Check if bit $80 is cleared to indicate that the VDMA is done.
.3e05f2		f0 f6		beq $3e05ea	        BEQ SS_VDMA_CLR_LOOPB
.3e05f4		ea		nop		        NOP
.3e05f5		a9 00		lda #$00	        LDA #$00
.3e05f7		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e05fb		6b		rtl		        RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\SplashScreenCode/Splashscreen_Text_Display.asm

=23						NumberOfEntry = size( TEXT_POSX ) / 2; (1 more then the actual number)
.3e05fc						Set_Text_Color:
.3e05fc		c2 30		rep #$30	                REP #$30        ; set A&X long
.3e05fe		a9 00 00	lda #$0000	            LDA #00
.3e0601		85 a2		sta $a2		            STA TEXT_CURSOR_X
.3e0603		a9 30 00	lda #$0030	            LDA #48
.3e0606		85 a4		sta $a4		            STA TEXT_CURSOR_Y
.3e0608		20 fc 08	jsr $3e08fc	            JSR Line_Display_Compute_Pointer
.3e060b		a0 00 00	ldy #$0000	            LDY #$0000
.3e060e		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0610		a9 40		lda #$40	            LDA #$40
.3e0612						SetColorBranch:
.3e0612		97 a8		sta [$a8],y	            STA [COLOR_DST_PTR_L],Y
.3e0614		c8		iny		            INY
.3e0615		c0 50 00	cpy #$0050	            CPY #80
.3e0618		d0 f8		bne $3e0612	            BNE SetColorBranch
.3e061a		60		rts		            RTS
.3e061b						Model_Update_Info_Field:
.3e061b		c2 30		rep #$30	                REP #$30        ; set A&X long
.3e061d		a9 00 00	lda #$0000	            LDA #$0000
.3e0620		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0622		a5 b0		lda $b0		            LDA MODEL
.3e0624		0a		asl a		            ASL
.3e0625		0a		asl a		            ASL
.3e0626		aa		tax		            TAX
.3e0627		c2 20		rep #$20	                REP #$20        ; set A long
.3e0629		bf af 0c 3e	lda $3e0caf,x	            LDA MODEL_TABLE, X
.3e062d		85 a0		sta $a0		            STA MOD_SELECT_L
.3e062f		bf b1 0c 3e	lda $3e0cb1,x	            LDA MODEL_TABLE + 2, X
.3e0633		85 a2		sta $a2		            STA MOD_SELECT_H
.3e0635		a0 00 00	ldy #$0000	            LDY #$0000
.3e0638		84 a6		sty $a6		            STY LINE_INDEX
.3e063a						Next_Change_Here:
.3e063a		c2 20		rep #$20	                REP #$20        ; set A long
.3e063c		a4 a6		ldy $a6		            LDY LINE_INDEX
.3e063e		bb		tyx		            TYX
.3e063f		b7 a0		lda [$a0],y	            LDA [MOD_SELECT_L], Y
.3e0641		85 98		sta $98		            STA TEXT_SRC_PTR_L
.3e0643		bf ff 0c 3e	lda $3e0cff,x	            LDA LINE_MOD, X
.3e0647		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.3e0649		c8		iny		            INY
.3e064a		c8		iny		            INY
.3e064b		bb		tyx		            TYX
.3e064c		b7 a0		lda [$a0],y	            LDA [MOD_SELECT_L], Y
.3e064e		85 9a		sta $9a		            STA TEXT_SRC_PTR_H
.3e0650		bf ff 0c 3e	lda $3e0cff,x	            LDA LINE_MOD, X
.3e0654		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.3e0656		c8		iny		            INY
.3e0657		c8		iny		            INY
.3e0658		84 a6		sty $a6		            STY LINE_INDEX
.3e065a		c0 10 00	cpy #$0010	            CPY #16
.3e065d		f0 10		beq $3e066f	            BEQ LetsMoveOn
.3e065f		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0661		a0 00 00	ldy #$0000	            LDY #$0000
.3e0664						nextchar:
.3e0664		b7 98		lda [$98],y	            LDA [TEXT_SRC_PTR_L], Y
.3e0666		c9 00		cmp #$00	            CMP #$00
.3e0668		f0 d0		beq $3e063a	            BEQ Next_Change_Here
.3e066a		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e066c		c8		iny		            INY
.3e066d		80 f5		bra $3e0664	            BRA nextchar
.3e066f						LetsMoveOn:
.3e066f		af 0b 0d 3e	lda $3e0d0b	            LDA LINE_MOD + 12
.3e0673		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.3e0675		a0 00 00	ldy #$0000	            LDY #$0000
.3e0678		e2 20		sep #$20	                SEP #$20        ; set A short
.3e067a		af 05 e8 af	lda $afe805	            LDA @lREVOFPCB_C
.3e067e		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e0680		c8		iny		            INY
.3e0681		af 06 e8 af	lda $afe806	            LDA @lREVOFPCB_4
.3e0685		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e0687		c8		iny		            INY
.3e0688		af 07 e8 af	lda $afe807	            LDA @lREVOFPCB_A
.3e068c		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e068e		18		clc		            CLC
.3e068f		af 0d 07 af	lda $af070d	            LDA @lFPGA_DOR   ; it is in BCD
.3e0693		20 f6 07	jsr $3e07f6	            JSR HighNibblerBCD
.3e0696		8f da 0a 3e	sta $3e0ada	            STA @lLINE8 + 56    ; FAT VICKY in U/U+ Model
.3e069a		8f 13 0b 3e	sta $3e0b13	            STA @lLINE9 + 47    ; GABE in FMX
.3e069e		8f 59 0b 3e	sta $3e0b59	            STA @lLINE10 + 51   ; VICKY II in FMX
.3e06a2		af 0d 07 af	lda $af070d	            LDA @lFPGA_DOR
.3e06a6		29 0f		and #$0f	            AND #$0F
.3e06a8		69 30		adc #$30	            ADC #$30
.3e06aa		8f db 0a 3e	sta $3e0adb	            STA @lLINE8 + 57    ; FAT VICKY in U/U+ Model
.3e06ae		8f 14 0b 3e	sta $3e0b14	            STA @lLINE9 + 48    ; GABE in FMX
.3e06b2		8f 5a 0b 3e	sta $3e0b5a	            STA @lLINE10 + 52   ; VICKY II in FMX
.3e06b6		af 0e 07 af	lda $af070e	            LDA @lFPGA_MOR   ; it is in BCD
.3e06ba		20 f6 07	jsr $3e07f6	            JSR HighNibblerBCD
.3e06bd		8f dd 0a 3e	sta $3e0add	            STA @lLINE8 + 59    ; FAT VICKY in U/U+ Model
.3e06c1		8f 16 0b 3e	sta $3e0b16	            STA @lLINE9 + 50    ; GABE in FMX
.3e06c5		8f 5c 0b 3e	sta $3e0b5c	            STA @lLINE10 + 54   ; VICKY II in FMX
.3e06c9		af 0e 07 af	lda $af070e	            LDA @lFPGA_MOR
.3e06cd		29 0f		and #$0f	            AND #$0F
.3e06cf		69 30		adc #$30	            ADC #$30
.3e06d1		8f de 0a 3e	sta $3e0ade	            STA @lLINE8 + 60    ; FAT VICKY in U/U+ Model
.3e06d5		8f 17 0b 3e	sta $3e0b17	            STA @lLINE9 + 51    ; GABE in FMX
.3e06d9		8f 5d 0b 3e	sta $3e0b5d	            STA @lLINE10 + 55   ; VICKY II in FMX
.3e06dd		af 0f 07 af	lda $af070f	            LDA @lFPGA_YOR   ; it is in BCD
.3e06e1		20 f6 07	jsr $3e07f6	            JSR HighNibblerBCD
.3e06e4		8f e0 0a 3e	sta $3e0ae0	            STA @lLINE8 + 62    ; FAT VICKY in U/U+ Model
.3e06e8		8f 19 0b 3e	sta $3e0b19	            STA @lLINE9 + 53    ; GABE in FMX
.3e06ec		8f 5f 0b 3e	sta $3e0b5f	            STA @lLINE10 + 57   ; VICKY II in FMX
.3e06f0		af 0f 07 af	lda $af070f	            LDA @lFPGA_YOR
.3e06f4		29 0f		and #$0f	            AND #$0F
.3e06f6		69 30		adc #$30	            ADC #$30
.3e06f8		8f e1 0a 3e	sta $3e0ae1	            STA @lLINE8 + 63    ; FAT VICKY in U/U+ Model
.3e06fc		8f 1a 0b 3e	sta $3e0b1a	            STA @lLINE9 + 54    ; GABE in FMX
.3e0700		8f 60 0b 3e	sta $3e0b60	            STA @lLINE10 + 58   ; VICKY II in FMX
.3e0704		af 8b e8 af	lda $afe88b	            LDA @l GABE_SUBVERSION_HI
.3e0708		20 f6 07	jsr $3e07f6	            JSR HighNibblerBCD
.3e070b		8f d0 0a 3e	sta $3e0ad0	            STA @lLINE8 + 46    ; U/U+
.3e070f		8f 09 0b 3e	sta $3e0b09	            STA @lLINE9 + 37    ; When FMX, this is the Info for GABE
.3e0713		af 8b e8 af	lda $afe88b	            LDA @l GABE_SUBVERSION_HI
.3e0717		29 0f		and #$0f	            AND #$0F
.3e0719		69 30		adc #$30	            ADC #$30
.3e071b		8f d1 0a 3e	sta $3e0ad1	            STA @lLINE8 + 47
.3e071f		8f 0a 0b 3e	sta $3e0b0a	            STA @lLINE9 + 38    ; When FMX, this is the Info for GABE
.3e0723		af 1f 00 af	lda $af001f	            LDA @l VKY_INFO_CHIP_VER_H
.3e0727		20 f6 07	jsr $3e07f6	            JSR HighNibblerBCD
.3e072a		8f 4f 0b 3e	sta $3e0b4f	            STA @lLINE10 + 41    ; When FMX, this is the Info for GABE
.3e072e		af 1f 00 af	lda $af001f	            LDA @l VKY_INFO_CHIP_VER_H
.3e0732		29 0f		and #$0f	            AND #$0F
.3e0734		69 30		adc #$30	            ADC #$30
.3e0736		8f 50 0b 3e	sta $3e0b50	            STA @lLINE10 + 42    ; When FMX, this is the Info for GABE
.3e073a		af 8a e8 af	lda $afe88a	            LDA @l GABE_SUBVERSION_LO
.3e073e		20 f6 07	jsr $3e07f6	            JSR HighNibblerBCD
.3e0741		8f d2 0a 3e	sta $3e0ad2	            STA @lLINE8 + 48
.3e0745		8f 0b 0b 3e	sta $3e0b0b	            STA @lLINE9 + 39    ; When FMX, this is the Info for GABE
.3e0749		af 8a e8 af	lda $afe88a	            LDA @l GABE_SUBVERSION_LO
.3e074d		29 0f		and #$0f	            AND #$0F
.3e074f		69 30		adc #$30	            ADC #$30
.3e0751		8f d3 0a 3e	sta $3e0ad3	            STA @lLINE8 + 49
.3e0755		8f 0c 0b 3e	sta $3e0b0c	            STA @lLINE9 + 40    ; When FMX, this is the Info for GABE
.3e0759		af 1e 00 af	lda $af001e	            LDA @l VKY_INFO_CHIP_VER_L
.3e075d		20 f6 07	jsr $3e07f6	            JSR HighNibblerBCD
.3e0760		8f 51 0b 3e	sta $3e0b51	            STA @lLINE10 + 43    ; When FMX, this is the Info for GABE
.3e0764		af 1e 00 af	lda $af001e	            LDA @l VKY_INFO_CHIP_VER_L
.3e0768		29 0f		and #$0f	            AND #$0F
.3e076a		69 30		adc #$30	            ADC #$30
.3e076c		8f 52 0b 3e	sta $3e0b52	            STA @lLINE10 + 44    ; When FMX, this is the Info for GABE
.3e0770		af 8d e8 af	lda $afe88d	            LDA @l GABE_VERSION_HI
.3e0774		20 f6 07	jsr $3e07f6	            JSR HighNibblerBCD
.3e0777		8f c4 0a 3e	sta $3e0ac4	            STA @lLINE8 + 34
.3e077b		8f fd 0a 3e	sta $3e0afd	            STA @lLINE9 + 25    ; When FMX, this is the Info for GABE
.3e077f		af 8d e8 af	lda $afe88d	            LDA @l GABE_VERSION_HI
.3e0783		29 0f		and #$0f	            AND #$0F
.3e0785		69 30		adc #$30	            ADC #$30
.3e0787		8f c5 0a 3e	sta $3e0ac5	            STA @lLINE8 + 35
.3e078b		8f fe 0a 3e	sta $3e0afe	            STA @lLINE9 + 26    ; When FMX, this is the Info for GABE
.3e078f		af 1d 00 af	lda $af001d	            LDA @l VKY_INFO_CHIP_NUM_H
.3e0793		20 f6 07	jsr $3e07f6	            JSR HighNibblerBCD
.3e0796		8f 44 0b 3e	sta $3e0b44	            STA @lLINE10 + 30    ; When FMX, this is the Info for GABE
.3e079a		af 1d 00 af	lda $af001d	            LDA @l VKY_INFO_CHIP_NUM_H
.3e079e		29 0f		and #$0f	            AND #$0F
.3e07a0		69 30		adc #$30	            ADC #$30
.3e07a2		8f 45 0b 3e	sta $3e0b45	            STA @lLINE10 + 31    ; When FMX, this is the Info for GABE
.3e07a6		af 8c e8 af	lda $afe88c	            LDA @l GABE_VERSION_LO
.3e07aa		20 f6 07	jsr $3e07f6	            JSR HighNibblerBCD
.3e07ad		8f c6 0a 3e	sta $3e0ac6	            STA @lLINE8 + 36
.3e07b1		8f ff 0a 3e	sta $3e0aff	            STA @lLINE9 + 27    ; When FMX, this is the Info for GABE
.3e07b5		af 8c e8 af	lda $afe88c	            LDA @l GABE_VERSION_LO
.3e07b9		29 0f		and #$0f	            AND #$0F
.3e07bb		69 30		adc #$30	            ADC #$30
.3e07bd		8f c7 0a 3e	sta $3e0ac7	            STA @lLINE8 + 37
.3e07c1		8f 00 0b 3e	sta $3e0b00	            STA @lLINE9 + 28    ; When FMX, this is the Info for GABE
.3e07c5		af 1c 00 af	lda $af001c	            LDA @l VKY_INFO_CHIP_NUM_L
.3e07c9		20 f6 07	jsr $3e07f6	            JSR HighNibblerBCD
.3e07cc		8f 46 0b 3e	sta $3e0b46	            STA @lLINE10 + 32    ; When FMX, this is the Info for GABE
.3e07d0		af 1c 00 af	lda $af001c	            LDA @l VKY_INFO_CHIP_NUM_L
.3e07d4		29 0f		and #$0f	            AND #$0F
.3e07d6		69 30		adc #$30	            ADC #$30
.3e07d8		8f 46 0b 3e	sta $3e0b46	            STA @lLINE10 + 32    ; When FMX, this is the Info for GABE
.3e07dc		20 4f 08	jsr $3e084f	            JSR GODETECTHIRES ; Dip-Switch and Change Text
.3e07df		20 70 08	jsr $3e0870	            JSR GODETECTHDD   ; Dip-Switch and Change Text
.3e07e2		20 71 08	jsr $3e0871	            JSR GODETECTEXP   ; Go Check if there is a Card Change Text
.3e07e5		a5 b0		lda $b0		            LDA MODEL
.3e07e7		29 03		and #$03	            AND #$03
.3e07e9		c9 00		cmp #$00	            CMP #$00
.3e07eb		f0 12		beq $3e07ff	            BEQ Erase_FATVicky_Line;
.3e07ed		c9 01		cmp #$01	            CMP #$01
.3e07ef		f0 29		beq $3e081a	            BEQ Erase_2Lines;
.3e07f1		c9 02		cmp #$02	            CMP #$02
.3e07f3		f0 25		beq $3e081a	            BEQ Erase_2Lines;
.3e07f5		60		rts		            RTS
.3e07f6						HighNibblerBCD:
.3e07f6		29 f0		and #$f0	            AND #$F0
.3e07f8		4a		lsr a		            LSR A
.3e07f9		4a		lsr a		            LSR A
.3e07fa		4a		lsr a		            LSR A
.3e07fb		4a		lsr a		            LSR A
.3e07fc		69 30		adc #$30	            ADC #$30
.3e07fe		60		rts		            RTS
.3e07ff						Erase_FATVicky_Line:
.3e07ff		c2 20		rep #$20	                REP #$20        ; set A long
.3e0801		a9 a2 0a	lda #$0aa2	            LDA #<>LINE8
.3e0804		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.3e0806		a9 3e 00	lda #$003e	            LDA #`LINE8
.3e0809		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.3e080b		e2 20		sep #$20	                SEP #$20        ; set A short
.3e080d		a0 00 00	ldy #$0000	            LDY #$0000
.3e0810		a9 20		lda #$20	            LDA #$20    ; Put One Space
.3e0812		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e0814		c8		iny		            INY
.3e0815		a9 00		lda #$00	            LDA #$00    ; Terminate the Line
.3e0817		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e0819		60		rts		            RTS
.3e081a						Erase_2Lines
.3e081a		c2 20		rep #$20	                REP #$20        ; set A long
.3e081c		a9 e4 0a	lda #$0ae4	            LDA #<>LINE9
.3e081f		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.3e0821		a9 3e 00	lda #$003e	            LDA #`LINE9
.3e0824		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.3e0826		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0828		a0 00 00	ldy #$0000	            LDY #$0000
.3e082b		a9 20		lda #$20	            LDA #$20    ; Put One Space
.3e082d		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e082f		c8		iny		            INY
.3e0830		a9 00		lda #$00	            LDA #$00    ; Terminate the Line
.3e0832		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e0834		c2 20		rep #$20	                REP #$20        ; set A long
.3e0836		a9 26 0b	lda #$0b26	            LDA #<>LINE10
.3e0839		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.3e083b		a9 3e 00	lda #$003e	            LDA #`LINE10
.3e083e		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.3e0840		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0842		a0 00 00	ldy #$0000	            LDY #$0000
.3e0845		a9 20		lda #$20	            LDA #$20    ; Put One Space
.3e0847		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e0849		c8		iny		            INY
.3e084a		a9 00		lda #$00	            LDA #$00    ; Terminate the Line
.3e084c		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e084e		60		rts		            RTS
.3e084f						GODETECTHIRES
.3e084f		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0851		af 02 00 af	lda $af0002	            LDA @l GAMMA_CTRL_REG   ; Go Read the Hi-Res DIP Switch Value
.3e0855		29 10		and #$10	            AND #HIRES_DP_SW_VAL    ; Isolate the Hi-Res Bit ($10) when 1 = 640x480, 0 = 800x600
.3e0857		c9 10		cmp #$10	            CMP #HIRES_DP_SW_VAL    ; When the Switch is off, the Returned value is 1 (The Pullup is there)
.3e0859		f0 14		beq $3e086f	            BEQ WeAreDone
.3e085b		c2 10		rep #$10	                REP #$10        ; set X long
.3e085d		a2 00 00	ldx #$0000	            LDX #$0000
.3e0860						ChangeNextChar
.3e0860		bf 5f 0d 3e	lda $3e0d5f,x	            LDA @l ON_TEXT, X
.3e0864		c9 00		cmp #$00	            CMP #$00
.3e0866		f0 07		beq $3e086f	            BEQ WeAreDone
.3e0868		9f 53 0c 3e	sta $3e0c53,x	            STA @l LINE17 +13, X
.3e086c		e8		inx		            INX
.3e086d		d0 f1		bne $3e0860	            BNE ChangeNextChar
.3e086f						WeAreDone
.3e086f						NoExpansionCardPresent
.3e086f		60		rts		            RTS
.3e0870						GODETECTHDD
.3e0870		60		rts		            RTS
.3e0871						GODETECTEXP
.3e0871		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0873		af 87 e8 af	lda $afe887	            LDA @L GABE_SYS_STAT      ; Let's check the Presence of an Expansion Card here
.3e0877		29 10		and #$10	            AND #GABE_SYS_STAT_EXP    ; When there is a Card the Value is 1
.3e0879		c9 10		cmp #$10	            CMP #GABE_SYS_STAT_EXP
.3e087b		d0 25		bne $3e08a2	            BNE NoExpansionCardPresent
.3e087d		c2 10		rep #$10	                REP #$10        ; set X long
.3e087f		a2 00 00	ldx #$0000	            LDX #$0000
.3e0882						ChangeNextChar
.3e0882		bf 63 0d 3e	lda $3e0d63,x	            LDA @l YES_TEXT, X
.3e0886		c9 00		cmp #$00	            CMP #$00
.3e0888		f0 07		beq $3e0891	            BEQ WeAreDone
.3e088a		9f 85 0c 3e	sta $3e0c85,x	            STA @l LINE19 +26, X
.3e088e		e8		inx		            INX
.3e088f		d0 f1		bne $3e0882	            BNE ChangeNextChar
.3e0891						WeAreDone
.3e0891		a2 00 00	ldx #$0000	            LDX #$0000
.3e0894						AddCardName
.3e0894		bf 00 00 ae	lda $ae0000,x	            LDA @l EVID_ID_NAME_ASCII, X
.3e0898		9f 89 0c 3e	sta $3e0c89,x	            STA @l LINE20, X
.3e089c		e8		inx		            INX
.3e089d		e0 10 00	cpx #$0010	            CPX #$10
.3e08a0		d0 f2		bne $3e0894	            BNE AddCardName
.3e08a2						NoExpansionCardPresent
.3e08a2		60		rts		            RTS
.3e08a3						Line_Setup_Before_Display
.3e08a3		c2 30		rep #$30	                REP #$30        ; set A&X long
.3e08a5		a5 a6		lda $a6		            LDA LINE_INDEX
.3e08a7		c9 17 00	cmp #$0017	            CMP #NumberOfEntry
.3e08aa		f0 33		beq $3e08df	            BEQ DONE
.3e08ac		a5 a6		lda $a6		            LDA LINE_INDEX
.3e08ae		0a		asl a		            ASL A
.3e08af		0a		asl a		            ASL A
.3e08b0		aa		tax		            TAX
.3e08b1		bf 24 09 3e	lda $3e0924,x	            LDA TEXT_TABLE, X
.3e08b5		85 98		sta $98		            STA TEXT_SRC_PTR_L
.3e08b7		bf 26 09 3e	lda $3e0926,x	            LDA TEXT_TABLE + 2, X
.3e08bb		85 9a		sta $9a		            STA TEXT_SRC_PTR_H
.3e08bd		a5 a6		lda $a6		            LDA LINE_INDEX
.3e08bf		0a		asl a		            ASL A
.3e08c0		aa		tax		            TAX
.3e08c1		bf 80 09 3e	lda $3e0980,x	            LDA TEXT_POSX, X
.3e08c5		85 a2		sta $a2		            STA TEXT_CURSOR_X
.3e08c7		8f 14 00 af	sta $af0014	            STA @l VKY_TXT_CURSOR_X_REG_L
.3e08cb		bf ae 09 3e	lda $3e09ae,x	            LDA TEXT_POSY, X
.3e08cf		85 a4		sta $a4		            STA TEXT_CURSOR_Y
.3e08d1		8f 16 00 af	sta $af0016	            STA @l VKY_TXT_CURSOR_Y_REG_L
.3e08d5		20 fc 08	jsr $3e08fc	            JSR Line_Display_Compute_Pointer
.3e08d8		a9 00 00	lda #$0000	            LDA #$0000
.3e08db		85 a0		sta $a0		            STA TEXT_INDEX
.3e08dd		e6 a6		inc $a6		            INC LINE_INDEX
.3e08df						DONE:
.3e08df		60		rts		            RTS
.3e08e0						Line_Display_1_Character
.3e08e0		c2 30		rep #$30	                REP #$30        ; set A&X long
.3e08e2		e6 a2		inc $a2		            INC TEXT_CURSOR_X       ; Always put the Cursor In Front of the "To be displayed Char"
.3e08e4		a5 a2		lda $a2		            LDA TEXT_CURSOR_X
.3e08e6		8f 14 00 af	sta $af0014	            STA @l VKY_TXT_CURSOR_X_REG_L
.3e08ea		e2 20		sep #$20	                SEP #$20        ; set A short
.3e08ec		38		sec		            SEC
.3e08ed		a4 a0		ldy $a0		            LDY TEXT_INDEX
.3e08ef		b7 98		lda [$98],y	            LDA [TEXT_SRC_PTR_L], Y
.3e08f1		c9 00		cmp #$00	            CMP #$00
.3e08f3		f0 06		beq $3e08fb	            BEQ WE_ARE_DONE;
.3e08f5		18		clc		            CLC
.3e08f6		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e08f8		c8		iny		            INY
.3e08f9		84 a0		sty $a0		            STY TEXT_INDEX
.3e08fb						WE_ARE_DONE:
.3e08fb		60		rts		            RTS
.3e08fc						Line_Display_Compute_Pointer
.3e08fc		c2 30		rep #$30	                REP #$30        ; set A&X long
.3e08fe		a5 a4		lda $a4		            LDA TEXT_CURSOR_Y
.3e0900		8f 00 01 00	sta $000100	            STA @lUNSIGNED_MULT_A_LO
.3e0904		a9 50 00	lda #$0050	            LDA #80
.3e0907		8f 02 01 00	sta $000102	            STA @lUNSIGNED_MULT_B_LO
.3e090b		18		clc		            CLC
.3e090c		af 04 01 00	lda $000104	            LDA @lUNSIGNED_MULT_AL_LO
.3e0910		65 a2		adc $a2		            ADC TEXT_CURSOR_X
.3e0912		69 00 a0	adc #$a000	            ADC #$A000
.3e0915		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.3e0917		69 00 20	adc #$2000	            ADC #$2000
.3e091a		85 a8		sta $a8		            STA COLOR_DST_PTR_L
.3e091c		a9 af 00	lda #$00af	            LDA #$00AF
.3e091f		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.3e0921		85 aa		sta $aa		            STA COLOR_DST_PTR_H
.3e0923		60		rts		            RTS
>3e0924		dc 09 3e 00 fd 09 3e 00		TEXT_TABLE  .dword LINE0, LINE1, LINE2, LINE3, LINE4, LINE5, LINE6, LINE7
>3e092c		13 0a 3e 00 21 0a 3e 00 39 0a 3e 00 5c 0a 3e 00
>3e093c		80 0a 3e 00 95 0a 3e 00
>3e0944		a2 0a 3e 00 e4 0a 3e 00		            .dword LINE8, LINE9, LINE10, LINE11, LINE12, LINE13, LINE14, LINE15
>3e094c		26 0b 3e 00 68 0b 3e 00 72 0b 3e 00 9b 0b 3e 00
>3e095c		d2 0b 3e 00 f5 0b 3e 00
>3e0964		07 0c 3e 00 46 0c 3e 00		            .dword LINE16, LINE17, LINE18, LINE19, LINE20, LINE21, LINE22
>3e096c		58 0c 3e 00 6b 0c 3e 00 89 0c 3e 00 9a 0c 3e 00
>3e097c		ad 0c 3e 00
>3e0980		06 00 06 00 06 00 06 00		TEXT_POSX  .word  leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, 31, leftAlign, 5, 25, 45, 45, 30, 72                     ;
>3e0988		06 00 06 00 06 00 06 00 06 00 06 00 06 00 06 00
>3e0998		06 00 06 00 06 00 1f 00 06 00 05 00 19 00 2d 00
>3e09a8		2d 00 1e 00 48 00
>3e09ae		19 00 1a 00 1b 00 1c 00		TEXT_POSY  .word  25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 46, 48, 52, 52, 52, 53, 57, 57
>3e09b6		1d 00 1e 00 1f 00 20 00 21 00 22 00 23 00 25 00
>3e09c6		26 00 27 00 28 00 2e 00 30 00 34 00 34 00 34 00
>3e09d6		35 00 39 00 39 00
=6						leftAlign = 6
>3e09dc		43 4f 4d 50 55 54 45 52		LINE0  .text "COMPUTER MODEL:                 ", $00 ; Offset $10
>3e09e4		20 4d 4f 44 45 4c 3a 20 20 20 20 20 20 20 20 20
>3e09f4		20 20 20 20 20 20 20 20 00
>3e09fd		20 20 20 20 20 20 20 20		LINE1  .text "                     ", $00
>3e0a05		20 20 20 20 20 20 20 20 20 20 20 20 20 00
>3e0a13		53 59 53 54 45 4d 20 49		LINE2  .text "SYSTEM INFO: ", $00
>3e0a1b		4e 46 4f 3a 20 00
>3e0a21		43 50 55 3a 20 57 44 43		LINE3  .text "CPU: WDC65C816 @ 14MHZ ", $00
>3e0a29		36 35 43 38 31 36 20 40 20 31 34 4d 48 5a 20 00
>3e0a39		43 4f 44 45 20 4d 45 4d		LINE4  .text "CODE MEMORY SIZE:                 ", $00 ; Offset 17
>3e0a41		4f 52 59 20 53 49 5a 45 3a 20 20 20 20 20 20 20
>3e0a51		20 20 20 20 20 20 20 20 20 20 00
>3e0a5c		56 49 44 45 4f 20 4d 45		LINE5  .text "VIDEO MEMORY SIZE:                 ", $00 ; Offset
>3e0a64		4d 4f 52 59 20 53 49 5a 45 3a 20 20 20 20 20 20
>3e0a74		20 20 20 20 20 20 20 20 20 20 20 00
>3e0a80		50 43 42 20 52 45 56 49		LINE6  .text "PCB REVISION:       ", $00
>3e0a88		53 49 4f 4e 3a 20 20 20 20 20 20 20 00
>3e0a95		43 48 49 50 53 45 54 28		LINE7  .text "CHIPSET(S): ", $00
>3e0a9d		53 29 3a 20 00
>3e0aa2		50 4e 3a 20 43 46 50 39		LINE8  .text "PN: CFP95169 - FAT VICKY II - REV:0000 SUBREV:0000 DATE:00/00/00 ", $00
>3e0aaa		35 31 36 39 20 2d 20 46 41 54 20 56 49 43 4b 59
>3e0aba		20 49 49 20 2d 20 52 45 56 3a 30 30 30 30 20 53
>3e0aca		55 42 52 45 56 3a 30 30 30 30 20 44 41 54 45 3a
>3e0ada		30 30 2f 30 30 2f 30 30 20 00
>3e0ae4		50 4e 3a 20 43 46 50 39		LINE9  .text "PN: CFP9533 - GABE - REV:0000 SUBREV:0000 DATE:00/00/00          ", $00
>3e0aec		35 33 33 20 2d 20 47 41 42 45 20 2d 20 52 45 56
>3e0afc		3a 30 30 30 30 20 53 55 42 52 45 56 3a 30 30 30
>3e0b0c		30 20 44 41 54 45 3a 30 30 2f 30 30 2f 30 30 20
>3e0b1c		20 20 20 20 20 20 20 20 20 00
>3e0b26		50 4e 3a 20 43 46 50 39		LINE10 .text "PN: CFP9551 - VICKY II - REV:0000 SUBREV:0000 DATE:00/00/00      ", $00
>3e0b2e		35 35 31 20 2d 20 56 49 43 4b 59 20 49 49 20 2d
>3e0b3e		20 52 45 56 3a 30 30 30 30 20 53 55 42 52 45 56
>3e0b4e		3a 30 30 30 30 20 44 41 54 45 3a 30 30 2f 30 30
>3e0b5e		2f 30 30 20 20 20 20 20 20 00
>3e0b68		43 52 45 44 49 54 53 3a		LINE11 .text "CREDITS: ", $00
>3e0b70		20 00
>3e0b72		43 4f 4e 43 45 50 54 20		LINE12 .text "CONCEPT & SYSTEM DESIGN: STEFANY ALLAIRE", $00
>3e0b7a		26 20 53 59 53 54 45 4d 20 44 45 53 49 47 4e 3a
>3e0b8a		20 53 54 45 46 41 4e 59 20 41 4c 4c 41 49 52 45
>3e0b9a		00
>3e0b9b		4b 45 52 4e 45 4c 20 44		LINE13 .text "KERNEL DESIGN / BASIC816 CREATOR: PETER J. WEINGARTNER", $00
>3e0ba3		45 53 49 47 4e 20 2f 20 42 41 53 49 43 38 31 36
>3e0bb3		20 43 52 45 41 54 4f 52 3a 20 50 45 54 45 52 20
>3e0bc3		4a 2e 20 57 45 49 4e 47 41 52 54 4e 45 52 00
>3e0bd2		46 4f 45 4e 49 58 20 49		LINE14 .text "FOENIX IDE DESIGN: DANIEL TREMBLAY", $00
>3e0bda		44 45 20 44 45 53 49 47 4e 3a 20 44 41 4e 49 45
>3e0bea		4c 20 54 52 45 4d 42 4c 41 59 00
>3e0bf5		2d 2d 2d 2d 42 4f 4f 54		LINE15 .text "----BOOT MENU----", $00
>3e0bfd		20 4d 45 4e 55 2d 2d 2d 2d 00
>3e0c07		20 50 52 45 53 53 20 46		LINE16 .text " PRESS F2 = SDCARD, F3 = HDD, RETURN = BASIC, SPACE = DEFAULT ", $00
>3e0c0f		32 20 3d 20 53 44 43 41 52 44 2c 20 46 33 20 3d
>3e0c1f		20 48 44 44 2c 20 52 45 54 55 52 4e 20 3d 20 42
>3e0c2f		41 53 49 43 2c 20 53 50 41 43 45 20 3d 20 44 45
>3e0c3f		46 41 55 4c 54 20 00
>3e0c46		48 49 2d 52 45 53 20 4d		LINE17 .text "HI-RES MODE: OFF ", $00
>3e0c4e		4f 44 45 3a 20 4f 46 46 20 00
>3e0c58		48 44 44 20 49 4e 53 54		LINE18 .text "HDD INSTALLED: -- ", $00
>3e0c60		41 4c 4c 45 44 3a 20 2d 2d 20 00
>3e0c6b		45 58 50 41 4e 53 49 4f		LINE19 .text "EXPANSION CARD INSTALLED: NO ", $00
>3e0c73		4e 20 43 41 52 44 20 49 4e 53 54 41 4c 4c 45 44
>3e0c83		3a 20 4e 4f 20 00
>3e0c89		20 20 20 20 00 00 00 00		LINE20 .text $20, $20, $20, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3e0c91		00 00 00 00 00 00 00 00 00
>3e0c9a		57 57 57 2e 43 32 35 36		LINE21 .text "WWW.C256FOENIX.COM", $00
>3e0ca2		46 4f 45 4e 49 58 2e 43 4f 4d 00
>3e0cad		20 00				LINE22 .text " ", $00
>3e0caf		bf 0c 3e 00 cf 0c 3e 00		MODEL_TABLE .dword MODEL_00, MODEL_01, MODEL_02, MODEL_03
>3e0cb7		df 0c 3e 00 ef 0c 3e 00
>3e0cbf		0f 0d 3e 00 4f 0d 3e 00		MODEL_00   .dword FIELD_MOD0, FIELD_MEM1, FIELD_MEM1, $00000000 ; FMX
>3e0cc7		4f 0d 3e 00 00 00 00 00
>3e0ccf		1f 0d 3e 00 4f 0d 3e 00		MODEL_01   .dword FIELD_MOD1, FIELD_MEM1, FIELD_MEM0, $00000000 ; U+
>3e0cd7		3f 0d 3e 00 00 00 00 00
>3e0cdf		2f 0d 3e 00 3f 0d 3e 00		MODEL_02   .dword FIELD_MOD2, FIELD_MEM0, FIELD_MEM0, $00000000 ; U
>3e0ce7		3f 0d 3e 00 00 00 00 00
>3e0cef		00 00 00 00 00 00 00 00		MODEL_03   .dword  $00000000,  $00000000, $00000000, $00000000  ; TBD
>3e0cf7		00 00 00 00 00 00 00 00
>3e0cff		ec 09 3e 00 4b 0a 3e 00		LINE_MOD   .dword LINE0 + $10, LINE4 + $12, LINE5 + $13, LINE6 + $0E
>3e0d07		6f 0a 3e 00 8e 0a 3e 00
>3e0d0f		43 32 35 36 20 46 4f 45		FIELD_MOD0 .text "C256 FOENIX FMX", $00 ; 15 Characters
>3e0d17		4e 49 58 20 46 4d 58 00
>3e0d1f		43 32 35 36 20 46 4f 45		FIELD_MOD1 .text "C256 FOENIX U+ ", $00
>3e0d27		4e 49 58 20 55 2b 20 00
>3e0d2f		43 32 35 36 20 46 4f 45		FIELD_MOD2 .text "C256 FOENIX U  ", $00
>3e0d37		4e 49 58 20 55 20 20 00
>3e0d3f		32 2c 30 39 37 2c 31 35		FIELD_MEM0 .text "2,097,152 BYTES", $00
>3e0d47		32 20 42 59 54 45 53 00
>3e0d4f		34 2c 31 39 34 2c 33 30		FIELD_MEM1 .text "4,194,304 BYTES", $00
>3e0d57		34 20 42 59 54 45 53 00
>3e0d5f		4f 4e 20 00			ON_TEXT    .text "ON ", $00
>3e0d63		59 45 53 00			YES_TEXT   .text "YES", $00

;******  Return to file: src\kernel.asm

>3e0d67						.align 256
.3e0e00						SS_MONIKER_LUT
>3e0e00		00 00 00 00 aa aa 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_C256Foenix.data.pal"
>3e0e08		00 aa 00 00 aa aa 00 00 00 00 aa 00 aa 00 aa 00
>3e0e18		00 55 aa 00 aa aa aa 00 55 55 55 00 ff 55 55 00
>3e0e28		55 ff 55 00 ff ff 55 00 55 55 ff 00 ff 55 ff 00
>3e0e38		55 ff ff 00 ff ff ff 00 00 00 00 00 10 10 10 00
>3e0e48		20 20 20 00 35 35 35 00 45 45 45 00 55 55 55 00
>3e0e58		65 65 65 00 75 75 75 00 8a 8a 8a 00 9a 9a 9a 00
>3e0e68		aa aa aa 00 ba ba ba 00 ca ca ca 00 df df df 00
>3e0e78		ef ef ef 00 ff ff ff 00 ff 00 00 00 ff 00 41 00
>3e0e88		ff 00 82 00 ff 00 be 00 ff 00 ff 00 be 00 ff 00
>3e0e98		82 00 ff 00 41 00 ff 00 00 00 ff 00 00 41 ff 00
>3e0ea8		00 82 ff 00 00 be ff 00 00 ff ff 00 00 ff be 00
>3e0eb8		00 ff 82 00 00 ff 41 00 00 ff 00 00 41 ff 00 00
>3e0ec8		82 ff 00 00 be ff 00 00 ff ff 00 00 ff be 00 00
>3e0ed8		ff 82 00 00 ff 41 00 00 ff 82 82 00 ff 82 9e 00
>3e0ee8		ff 82 be 00 ff 82 df 00 ff 82 ff 00 df 82 ff 00
>3e0ef8		be 82 ff 00 9e 82 ff 00 82 82 ff 00 82 9e ff 00
>3e0f08		82 be ff 00 82 df ff 00 82 ff ff 00 82 ff df 00
>3e0f18		82 ff be 00 82 ff 9e 00 82 ff 82 00 9e ff 82 00
>3e0f28		be ff 82 00 df ff 82 00 ff ff 82 00 ff df 82 00
>3e0f38		ff be 82 00 ff 9e 82 00 ff ba ba 00 ff ba ca 00
>3e0f48		ff ba df 00 ff ba ef 00 ff ba ff 00 ef ba ff 00
>3e0f58		df ba ff 00 ca ba ff 00 ba ba ff 00 ba ca ff 00
>3e0f68		ba df ff 00 ba ef ff 00 ba ff ff 00 ba ff ef 00
>3e0f78		ba ff df 00 ba ff ca 00 ba ff ba 00 ca ff ba 00
>3e0f88		df ff ba 00 ef ff ba 00 ff ff ba 00 ff ef ba 00
>3e0f98		ff df ba 00 ff ca ba 00 71 00 00 00 71 00 1c 00
>3e0fa8		71 00 39 00 71 00 55 00 71 00 71 00 55 00 71 00
>3e0fb8		39 00 71 00 1c 00 71 00 00 00 71 00 00 1c 71 00
>3e0fc8		00 39 71 00 00 55 71 00 00 71 71 00 00 71 55 00
>3e0fd8		00 71 39 00 00 71 1c 00 00 71 00 00 1c 71 00 00
>3e0fe8		39 71 00 00 55 71 00 00 71 71 00 00 71 55 00 00
>3e0ff8		71 39 00 00 71 1c 00 00 71 39 39 00 71 39 45 00
>3e1008		71 39 55 00 71 39 61 00 71 39 71 00 61 39 71 00
>3e1018		55 39 71 00 45 39 71 00 39 39 71 00 39 45 71 00
>3e1028		39 55 71 00 39 61 71 00 39 71 71 00 39 71 61 00
>3e1038		39 71 55 00 39 71 45 00 39 71 39 00 45 71 39 00
>3e1048		55 71 39 00 61 71 39 00 71 71 39 00 71 61 39 00
>3e1058		71 55 39 00 71 45 39 00 71 51 51 00 71 51 59 00
>3e1068		71 51 61 00 71 51 69 00 71 51 71 00 69 51 71 00
>3e1078		61 51 71 00 59 51 71 00 51 51 71 00 51 59 71 00
>3e1088		51 61 71 00 51 69 71 00 51 71 71 00 51 71 69 00
>3e1098		51 71 61 00 51 71 59 00 51 71 51 00 59 71 51 00
>3e10a8		61 71 51 00 69 71 51 00 71 71 51 00 71 69 51 00
>3e10b8		71 61 51 00 71 59 51 00 41 00 00 00 41 00 10 00
>3e10c8		41 00 20 00 41 00 31 00 41 00 41 00 31 00 41 00
>3e10d8		20 00 41 00 10 00 41 00 00 00 41 00 00 10 41 00
>3e10e8		00 20 41 00 00 31 41 00 00 41 41 00 00 41 31 00
>3e10f8		00 41 20 00 00 41 10 00 00 41 00 00 10 41 00 00
>3e1108		20 41 00 00 31 41 00 00 41 41 00 00 41 31 00 00
>3e1118		41 20 00 00 41 10 00 00 41 20 20 00 41 20 28 00
>3e1128		41 20 31 00 41 20 39 00 41 20 41 00 39 20 41 00
>3e1138		31 20 41 00 28 20 41 00 20 20 41 00 20 28 41 00
>3e1148		20 31 41 00 20 39 41 00 20 41 41 00 20 41 39 00
>3e1158		20 41 31 00 20 41 28 00 20 41 20 00 28 41 20 00
>3e1168		31 41 20 00 39 41 20 00 41 41 20 00 41 39 20 00
>3e1178		41 31 20 00 41 28 20 00 41 2d 2d 00 41 2d 31 00
>3e1188		41 2d 35 00 41 2d 3d 00 41 2d 41 00 3d 2d 41 00
>3e1198		35 2d 41 00 31 2d 41 00 2d 2d 41 00 2d 31 41 00
>3e11a8		2d 35 41 00 2d 3d 41 00 2d 41 41 00 2d 41 3d 00
>3e11b8		2d 41 35 00 2d 41 31 00 2d 41 2d 00 31 41 2d 00
>3e11c8		35 41 2d 00 3d 41 2d 00 41 41 2d 00 41 3d 2d 00
>3e11d8		41 35 2d 00 41 31 2d 00 18 18 e7 00 00 ff ff 00
>3e11e8		00 ff 00 00 ff 00 00 00 ff 00 ff 00 ff ff 00 00
>3e11f8		ff ff ff 00 e5 80 80 00
.3e1200						SS_MONIKER
>3e1200		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_C256Foenix.data"
>3e1208		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 95 times (1520 bytes)...
>3e1808		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e1818		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e1828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e1948		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff
>3e1958		ff 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e1968		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e1a88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff
>3e1a98		ff ff ff ff 01 01 00 00 00 00 00 00 00 00 00 00
>3e1aa8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e1bc8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff
>3e1bd8		ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00
>3e1be8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e1d08		00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff
>3e1d18		ff ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00
>3e1d28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e1e48		00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff
>3e1e58		ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00
>3e1e68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e1f88		00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff
>3e1f98		ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00
>3e1fa8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e20c8		00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff
>3e20d8		ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00
>3e20e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e2128		00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00
>3e2138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 12 times (192 bytes)...
>3e2208		00 01 00 00 00 00 00 00 00 00 00 00 01 01 ff ff
>3e2218		ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00
>3e2228		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e2268		00 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00
>3e2278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 12 times (192 bytes)...
>3e2348		01 01 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e2358		01 01 fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>3e2368		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e23a8		00 00 01 fe 01 00 00 00 00 00 00 00 00 00 00 00
>3e23b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 11 times (176 bytes)...
>3e2478		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e2488		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2498		00 01 fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>3e24a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e24e8		00 01 fe 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e24f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 11 times (176 bytes)...
>3e25b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e25c8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e25d8		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e25e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e2628		01 fe fe 01 00 01 00 00 00 00 00 00 00 00 00 00
>3e2638		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2648		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2658		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e2668		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2678		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 7 times (112 bytes)...
>3e26f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe
>3e2708		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2718		00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2728		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e2738		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2748		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2758		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e2768		fe fe fe fe 01 01 00 00 00 00 00 00 00 00 00 00
>3e2778		00 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00
>3e2788		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2798		00 00 00 00 00 00 00 00 00 01 01 01 01 01 01 01
>3e27a8		01 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>3e27b8		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e27c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e27d8		00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00
>3e27e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e2838		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe fe
>3e2848		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2868		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 01
>3e2878		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2888		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe
>3e28a8		fe fe fe fe fe 01 00 00 00 00 00 00 00 00 01 01
>3e28b8		01 fe fe fe fe fe fe fe 01 01 00 00 00 00 00 00
>3e28c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e28d8		00 00 01 01 01 01 01 01 01 fe 01 01 01 00 00 00
>3e28e8		00 00 00 00 00 00 00 00 00 00 00 01 fe 01 fe 01
>3e28f8		01 01 fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>3e2908		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2918		00 00 00 00 00 01 01 00 00 00 00 00 00 00 00 01
>3e2928		01 01 01 01 01 01 01 01 01 01 00 00 00 00 00 00
>3e2938		00 00 00 01 01 01 01 01 01 00 00 00 00 00 00 00
>3e2948		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2958		00 00 00 00 01 01 01 01 01 01 01 01 01 01 00 00
>3e2968		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2978		00 00 00 00 00 00 00 00 00 00 00 00 01 fe fe 01
>3e2988		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2998		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e29a8		00 00 00 00 00 00 00 00 00 00 00 01 01 fe 01 00
>3e29b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e29c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e29d8		00 00 00 00 00 00 00 00 01 01 01 01 01 01 fd fd
>3e29e8		fd fd fd fd 01 00 00 00 00 00 00 00 01 01 fd fd
>3e29f8		fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00 00
>3e2a08		00 00 00 00 00 00 01 01 01 01 01 01 01 01 01 01
>3e2a18		01 01 fd fd fd fd fd fd fd 01 00 00 00 00 00 00
>3e2a28		00 00 00 00 00 00 00 00 00 01 01 fd fd fd 01 fd
>3e2a38		fd fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00
>3e2a48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2a58		00 00 01 01 01 fd fd 01 01 01 01 01 01 01 01 fd
>3e2a68		fd fd fd fd fd fd fd fd 01 01 01 01 00 00 00 01
>3e2a78		01 01 01 fd fd fd fd fd fd 01 01 01 01 00 00 00
>3e2a88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 01
>3e2a98		01 01 01 01 fd fd fd fd fd fd fd fd fd fd 01 01
>3e2aa8		01 01 01 01 00 00 00 00 00 00 00 00 01 01 01 01
>3e2ab8		00 00 00 00 00 00 00 00 00 00 00 00 01 fd fd 01
>3e2ac8		00 00 00 00 00 00 00 00 00 00 01 01 01 01 01 01
>3e2ad8		01 00 00 00 00 00 01 01 01 00 00 00 00 00 00 00
>3e2ae8		00 00 00 00 00 00 00 00 00 00 01 fd fd 01 00 00
>3e2af8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2b08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2b18		00 00 00 01 01 01 01 01 fd fd fd fd fd fd fd fd
>3e2b28		fd fd fd 01 00 00 00 00 00 00 01 01 fd fd fd fd
>3e2b38		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>3e2b48		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e2b58		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>3e2b68		00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e2b78		fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e2b88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 01
>3e2b98		01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2ba8		fd fd fd fd fd fd fd 01 00 00 00 01 01 01 01 fd
>3e2bb8		fd fd fd fd fd fd fd fd fd fd fd fd fd 01 01 00
>3e2bc8		00 00 00 00 00 00 00 01 01 01 01 01 01 fd fd fd
>3e2bd8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2be8		fd fd fd fd 01 01 00 00 00 00 00 01 fd fd fd fd
>3e2bf8		01 00 00 00 00 00 00 00 00 00 00 01 fd fd fd fd
>3e2c08		01 01 00 00 00 00 00 00 00 01 fd fd fd fd fd fd
>3e2c18		01 00 00 00 01 01 fd fd 01 00 00 00 00 00 00 00
>3e2c28		00 00 00 00 00 00 00 00 01 01 fd fd 01 00 01 01
>3e2c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2c48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2c58		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2c68		fd fd fd 01 00 00 00 00 00 01 fd fd fd fd fd fd
>3e2c78		fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3e2c88		00 00 00 00 01 01 fd fd fd fd fd fd fd fd fd fd
>3e2c98		fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00
>3e2ca8		00 00 00 00 00 00 01 01 fd fd fd fd fd fd fd fd
>3e2cb8		fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e2cc8		00 00 00 00 00 00 01 01 01 01 01 01 01 fd fd fd
>3e2cd8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2ce8		fd fd fd fd fd fd 01 00 01 01 01 fd fd fd fd fd
>3e2cf8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>3e2d08		00 00 01 01 01 01 01 fd fd fd fd fd fd fd fd fd
>3e2d18		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2d28		fd fd 01 01 01 00 00 00 00 01 01 fd fd fd fd fd
>3e2d38		fd 01 00 00 00 00 00 00 00 00 00 01 fd fd fd fd
>3e2d48		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e2d58		01 00 00 01 fd fd fd fd fd 01 01 00 00 00 00 00
>3e2d68		00 00 00 00 00 00 01 01 fd fd fd fd fd 01 01 00
>3e2d78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2d88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e2d98		01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2da8		fd fd 01 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e2db8		fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3e2dc8		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>3e2dd8		fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00
>3e2de8		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e2df8		fd fd 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e2e08		01 01 01 01 01 01 fd fd fd fd fd fd fd fd fd fd
>3e2e18		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2e28		fd fd fd fd fd fd fd 01 fd fd fd fd fd fd fd fd
>3e2e38		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2e48		01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2e58		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2e68		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e2e78		fd fd 01 00 00 00 00 00 00 00 01 fd fd fd fd fd
>3e2e88		01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>3e2e98		01 00 00 01 fd fd fd fd fd fd fd 01 00 00 00 00
>3e2ea8		00 00 00 00 00 01 fd fd fd fd fd fd fd 01 00 00
>3e2eb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2ec8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fd
>3e2ed8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2ee8		fd 01 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>3e2ef8		fd fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00
>3e2f08		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2f18		fd fd fd fd fd fd fd 01 00 01 01 00 00 00 00 00
>3e2f28		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd
>3e2f38		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2f48		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2f58		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
;		...repeated 2 times (32 bytes)...
>3e2f88		fd fd 01 01 01 fd fd fd fd fd fd fd fd fd fd fd
>3e2f98		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2fa8		fd fd 01 01 01 01 01 01 fd fd fd fd fd fd fd fd
>3e2fb8		fd fd 01 00 00 00 00 00 00 01 01 fd fd fd fd fd
>3e2fc8		fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e2fd8		01 00 00 01 fd fd fd fd fd fd fd 01 00 00 00 00
>3e2fe8		00 00 00 00 01 fd fd fd fd fd fd fd fd 01 00 00
>3e2ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3008		00 00 00 00 00 00 00 00 00 00 00 00 01 01 fd fd
>3e3018		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e3028		fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e3038		fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3e3048		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e3058		fd fd fd fd fd 01 01 01 01 00 00 00 00 00 00 00
>3e3068		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd 01
>3e3078		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3088		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>3e3098		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e30a8		fd fd fd fd fd fd 01 01 01 01 01 fd fd fd fd fd
>3e30b8		fd fd fd fd fd fd 01 01 fd fd fd fd fd fd fd fd
>3e30c8		fd 01 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e30d8		fd fd fd fd fd fd fd fd fd fd fd fd 01 01 01 01
>3e30e8		01 01 01 01 01 00 00 01 fd fd fd fd fd fd fd fd
>3e30f8		fd fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd
>3e3108		fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd 01
>3e3118		00 00 00 00 01 fd fd fd fd fd fd 01 00 00 00 00
>3e3128		00 00 01 01 fd fd fd fd fd fd fd fd fd 01 00 00
>3e3138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3148		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>3e3158		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e3168		fc 01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>3e3178		01 01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e3188		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>3e3198		fc fc 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e31a8		00 01 01 fc fc fc fc fc fc fc fc fc fc 01 01 00
>3e31b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e31c8		00 00 00 01 01 01 fc fc fc fc fc fc fc fc fc fc
>3e31d8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 01 01
>3e31e8		01 01 01 01 01 01 00 00 00 00 00 01 fc fc fc fc
>3e31f8		fc fc fc fc fc 01 00 00 01 01 fc fc fc fc fc fc
>3e3208		fc 01 00 00 00 01 01 fc fc fc fc fc fc fc fc fc
>3e3218		fc fc fc fc fc fc 01 01 01 01 01 01 00 00 00 00
>3e3228		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>3e3238		fc fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc
>3e3248		fc 01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>3e3258		00 00 00 00 01 fc fc fc fc fc fc 01 00 00 00 00
>3e3268		00 01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e3278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3288		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3e3298		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e32a8		01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00
>3e32b8		00 00 01 fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e32c8		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 01
>3e32d8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e32e8		01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e32f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3308		00 00 00 00 00 00 01 01 01 01 fc 01 01 01 fc fc
>3e3318		fc fc fc fc fc fc fc fc fc 01 01 01 01 00 00 00
>3e3328		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3e3338		fc fc fc fc 01 00 00 00 00 00 01 fc fc fc fc fc
>3e3348		fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e3358		fc 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00
>3e3368		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>3e3378		fc fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc
>3e3388		01 00 00 00 00 01 fc fc fc fc fc fc fc fc 01 00
>3e3398		00 00 00 00 01 fc fc fc fc fc fc fc 01 00 00 01
>3e33a8		01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>3e33b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e33c8		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>3e33d8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e33e8		01 00 00 00 01 fc fc fc fc fc fc 01 01 01 00 00
>3e33f8		00 01 fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>3e3408		00 00 01 fc fc fc fc fc fc fc 01 01 01 01 00 00
>3e3418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3428		01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>3e3438		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3448		00 00 00 00 00 00 00 00 00 00 01 00 00 00 01 fc
>3e3458		fc fc fc fc fc fc fc 01 01 00 00 00 00 00 00 00
>3e3468		00 00 00 00 00 00 00 00 01 01 fc fc fc fc fc fc
>3e3478		fc fc fc 01 01 00 00 00 00 00 00 01 fc fc fc fc
>3e3488		fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e3498		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e34a8		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e34b8		fc fc 01 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e34c8		01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00
>3e34d8		00 00 00 00 01 fc fc fc fc fc fc fc 01 00 01 fc
>3e34e8		fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>3e34f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3508		00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc
>3e3518		fc fc fc fc fc fc 01 01 fc fc fc fc fc fc fc 01
>3e3528		00 00 00 01 fc fc fc fc fc 01 01 00 00 00 00 00
>3e3538		01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>3e3548		00 01 fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>3e3558		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e3568		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e3578		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3588		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>3e3598		fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00
>3e35a8		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e35b8		fc 01 01 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3e35c8		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc fc 01
>3e35d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e35e8		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e35f8		fc fc 01 00 00 00 00 01 fc fc fc fc fc fc fc 01
>3e3608		00 00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00
>3e3618		00 00 00 00 01 fc fc fc fc fc fc fc fc 01 fc fc
>3e3628		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e3638		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3648		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e3658		fc fc fc fc 01 01 00 00 01 fc fc fc fc fc fc 01
>3e3668		00 00 00 01 fc fc fc 01 01 00 00 00 00 00 00 01
>3e3678		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e3688		00 01 fc fc fc fc fc fc fc fc 01 01 01 01 01 01
>3e3698		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc
>3e36a8		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>3e36b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e36c8		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>3e36d8		fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00 00
>3e36e8		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>3e36f8		01 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3e3708		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc 01 00
>3e3718		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3728		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>3e3738		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc fc 01
>3e3748		00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00 00
>3e3758		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>3e3768		fc fc fc fc fc fc fc fc 01 01 00 00 00 00 00 00
>3e3778		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3788		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>3e3798		fc fc fc 01 00 00 00 00 01 fc fc fc fc fc 01 00
>3e37a8		00 00 00 01 fc 01 01 00 00 00 00 00 00 00 01 fc
>3e37b8		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e37c8		01 fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e37d8		fc 01 01 00 00 00 00 00 00 00 00 00 00 01 fc fc
>3e37e8		fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00 00
>3e37f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3808		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>3e3818		fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00 00
>3e3828		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>3e3838		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3e3848		fc 01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>3e3858		01 01 01 01 01 01 01 01 01 00 00 00 00 00 00 00
>3e3868		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>3e3878		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc 01 00
>3e3888		00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00 00
>3e3898		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e38a8		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3e38b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e38c8		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3e38d8		fb 01 01 00 00 00 00 00 01 01 fb fb 01 01 00 00
>3e38e8		00 00 01 fb 01 00 00 00 00 00 00 00 00 01 fb fb
>3e38f8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3e3908		01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3918		fb fb fb 01 00 00 00 00 00 00 00 00 01 fb fb fb
>3e3928		fb fb fb fb fb fb fb fb fb fb fb fb 01 01 01 01
>3e3938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3948		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e3958		fb fb fb fb fb fb 01 01 01 01 01 01 01 00 00 00
>3e3968		00 00 00 00 00 01 fb fb fb fb fb fb fb fb 01 00
>3e3978		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>3e3988		fb 01 00 01 01 fb fb fb fb fb fb fb fb fb fb fb
>3e3998		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>3e39a8		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>3e39b8		fb fb 01 00 00 01 fb fb fb fb fb fb fb 01 00 00
>3e39c8		00 00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00
>3e39d8		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3e39e8		fb fb fb fb fb 01 01 00 00 00 00 00 00 00 00 00
>3e39f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3a08		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>3e3a18		01 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>3e3a28		00 00 01 01 00 00 00 00 00 00 00 00 01 fb fb fb
>3e3a38		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 01
>3e3a48		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3a58		fb fb fb fb 01 00 00 00 00 00 00 00 01 fb fb fb
>3e3a68		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3a78		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3a88		00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb
>3e3a98		fb fb fb fb fb fb fb fb fb fb fb fb fb 01 01 00
>3e3aa8		00 00 00 01 01 fb fb fb fb fb fb fb fb 01 00 00
>3e3ab8		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>3e3ac8		fb fb 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3ad8		fb fb fb fb fb fb fb fb 01 01 01 01 01 01 00 00
>3e3ae8		00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3af8		fb fb 01 00 01 fb fb fb fb fb fb fb fb 01 00 00
>3e3b08		00 00 01 fb fb fb fb fb fb fb fb fb 01 00 00 00
>3e3b18		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3e3b28		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>3e3b38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3b48		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb 01
>3e3b58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3b68		00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb
>3e3b78		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 01
>3e3b88		01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3b98		fb fb fb fb 01 00 00 00 00 00 00 01 fb fb fb fb
>3e3ba8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3bb8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3bc8		00 00 00 00 00 00 00 01 01 01 01 fb fb fb fb fb
>3e3bd8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb 01 00
>3e3be8		00 00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00
>3e3bf8		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3e3c08		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3c18		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e3c28		00 00 01 fb fb fb fb fb fb fb fb 01 fb fb fb fb
>3e3c38		fb fb 01 00 01 fb fb fb fb fb fb fb 01 01 00 00
>3e3c48		00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e3c58		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3e3c68		fb fb fb 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e3c78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3c88		00 00 00 01 fb fb fb fb fb fb fb fb fb fb 01 00
>3e3c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3ca8		00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb
>3e3cb8		fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00
>3e3cc8		00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3cd8		fb fb fb fb fb 01 00 00 00 00 01 fb fb fb fb fb
>3e3ce8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3cf8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3d08		00 00 00 01 01 01 01 fb fb fb fb fb fb fb fb fb
>3e3d18		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb 01
>3e3d28		01 01 01 fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e3d38		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3e3d48		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3d58		fb fb fb fb fb fb fb fb 01 01 01 01 00 00 00 00
>3e3d68		00 01 fb fb fb fb fb fb fb fb 01 00 01 fb fb fb
>3e3d78		fb fb 01 00 01 fb fb fb fb fb fb 01 00 00 00 00
>3e3d88		00 01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e3d98		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3e3da8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3dc8		00 00 01 fb fb fb fb fb fb fb fb fb 01 01 00 00
>3e3dd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3de8		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>3e3df8		fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00
>3e3e08		00 01 01 fb fb fb 01 01 01 01 01 fb fb fb fb fb
>3e3e18		fb fb fb fb fb 01 00 00 00 00 01 fb fb fb fb fb
>3e3e28		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3e38		fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e3e48		01 01 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3e58		fb fb fb fb fb fb fb fb fb fb fb fb fb 01 01 01
>3e3e68		01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e3e78		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>3e3e88		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3e98		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>3e3ea8		01 fb fb fb fb fb fb fb fb fb 01 00 01 fb fb fb
>3e3eb8		fb fb fb 01 fb fb fb fb fb fb fb fb 01 00 00 00
>3e3ec8		00 01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e3ed8		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>3e3ee8		fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3ef8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3f08		00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e3f18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3f28		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3e3f38		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>3e3f48		00 00 00 01 01 01 00 00 00 00 00 01 fb fb fb fb
>3e3f58		fb fb fb fb fb 01 00 00 00 01 fb fb fb fb fb fb
>3e3f68		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3f78		fb fb fb 01 00 00 00 00 00 00 00 00 01 01 01 01
>3e3f88		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3f98		fb fb fb fb fb fb fb fb fb fb 01 01 01 00 00 00
>3e3fa8		00 01 fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3e3fb8		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>3e3fc8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3fd8		fb fb fb fb 01 01 01 00 00 00 00 00 00 00 00 00
>3e3fe8		01 fb fb fb fb fb fb fb fb 01 00 00 01 fb fb fb
>3e3ff8		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e4008		01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e4018		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>3e4028		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4038		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4048		00 01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3e4058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4068		00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa
>3e4078		fa fa fa 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e4088		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3e4098		fa fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa
>3e40a8		fa fa fa 01 01 01 01 01 01 01 01 fa fa fa fa fa
>3e40b8		fa fa fa 01 00 00 00 00 00 00 01 01 01 00 00 01
>3e40c8		01 01 01 01 fa fa fa fa fa fa fa fa fa fa fa fa
>3e40d8		fa fa fa 01 01 01 01 01 01 01 00 00 00 00 00 00
>3e40e8		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e40f8		00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa 01
>3e4108		01 fa fa fa fa fa fa fa fa fa fa fa 01 01 01 01
>3e4118		01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e4128		01 fa fa fa fa fa fa fa fa 01 00 00 01 fa fa fa
>3e4138		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3e4148		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e4158		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa 01
>3e4168		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4178		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4188		00 01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3e4198		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e41a8		00 00 00 01 01 00 01 fa fa fa fa fa fa fa fa fa
>3e41b8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e41c8		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e41d8		fa fa fa fa fa fa 01 01 fa fa fa fa fa fa fa fa
>3e41e8		fa 01 01 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e41f8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4208		00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>3e4218		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4228		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e4238		00 00 00 00 00 01 fa fa fa fa fa fa fa fa 01 00
>3e4248		00 01 fa fa fa fa fa fa fa fa 01 01 00 00 00 00
>3e4258		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4268		fa fa fa fa fa fa fa fa 01 00 00 01 fa fa fa fa
>3e4278		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 01
>3e4288		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e4298		00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e42a8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e42b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e42c8		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e42d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e42e8		00 01 01 00 00 01 fa fa fa fa fa fa fa fa fa fa
>3e42f8		fa 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4308		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e4318		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e4328		01 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e4338		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4348		00 01 01 01 fa fa fa fa fa fa fa fa fa fa fa fa
>3e4358		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4368		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e4378		00 00 00 01 01 fa fa fa fa fa fa fa fa 01 00 00
>3e4388		00 01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e4398		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>3e43a8		fa fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa
>3e43b8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01
>3e43c8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e43d8		01 fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e43e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e43f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4408		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e4418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e4428		01 01 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>3e4438		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4448		00 00 00 00 00 00 00 00 00 01 01 fa fa fa fa fa
>3e4458		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>3e4468		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e4478		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e4488		01 01 01 01 01 01 fa fa fa fa fa fa fa fa fa fa
>3e4498		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e44a8		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e44b8		00 00 01 fa fa fa fa fa fa fa fa fa 01 00 00 00
>3e44c8		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e44d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>3e44e8		fa fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa
>3e44f8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01
>3e4508		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 01
>3e4518		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e4528		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4538		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4548		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e4558		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3e4568		fa fa 01 01 fa fa fa fa fa fa fa fa fa fa fa 01
>3e4578		00 00 00 00 00 00 00 01 01 01 01 01 01 01 01 01
>3e4588		01 01 01 01 00 00 00 00 01 fa fa fa fa fa fa fa
>3e4598		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>3e45a8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e45b8		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e45c8		00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa fa
>3e45d8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e45e8		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>3e45f8		01 01 fa fa fa fa fa fa fa fa fa fa 01 00 00 00
>3e4608		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e4618		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3e4628		fa fa fa fa fa fa 01 00 00 00 00 00 01 fa fa fa
>3e4638		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 01 fa
>3e4648		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01 fa
>3e4658		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e4668		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4678		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4688		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e4698		00 00 00 00 00 00 00 00 00 00 00 01 01 fa fa fa
>3e46a8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e46b8		01 01 01 01 01 01 01 fa fa fa fa 01 01 01 01 01
>3e46c8		01 01 00 00 00 00 00 01 fa fa fa fa fa fa fa fa
>3e46d8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>3e46e8		00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa
>3e46f8		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4708		00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa fa
>3e4718		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4728		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01 01
>3e4738		fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00 01
>3e4748		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 01
>3e4758		01 01 01 01 01 01 01 01 00 00 00 00 00 01 fa fa
>3e4768		fa fa fa fa fa fa 01 00 00 00 00 00 01 fa fa fa
>3e4778		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01 fa
>3e4788		fa fa fa fa fa fa fa 01 00 00 00 00 00 01 fa fa
>3e4798		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e47a8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e47b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e47c8		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>3e47d8		00 00 00 00 00 00 00 00 01 01 01 f9 f9 f9 f9 f9
>3e47e8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e47f8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00
>3e4808		00 00 00 00 00 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4818		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>3e4828		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>3e4838		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4848		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e4858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4868		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 01 01 f9 f9
>3e4878		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 01 f9
>3e4888		f9 f9 f9 f9 f9 f9 f9 01 00 00 01 01 01 01 01 f9
>3e4898		f9 f9 f9 f9 f9 f9 f9 f9 01 01 00 00 00 01 f9 f9
>3e48a8		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9 f9
>3e48b8		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 01 f9 f9
>3e48c8		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9
>3e48d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9 f9 f9
>3e48e8		f9 f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e48f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4908		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>3e4918		00 00 00 00 00 00 01 01 f9 f9 f9 f9 f9 f9 f9 f9
>3e4928		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4938		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>3e4948		00 00 01 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4958		f9 f9 01 f9 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>3e4968		00 00 00 00 00 01 01 f9 f9 f9 f9 f9 f9 f9 01 01
>3e4978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4988		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e4998		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e49a8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 f9 f9 f9 f9
>3e49b8		f9 f9 f9 f9 f9 f9 f9 f9 01 01 00 00 00 00 01 f9
>3e49c8		f9 f9 f9 f9 f9 f9 f9 f9 01 01 f9 f9 f9 f9 f9 f9
>3e49d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 01 f9 f9 f9
>3e49e8		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9 f9
>3e49f8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9
>3e4a08		f9 f9 f9 f9 f9 f9 01 00 00 00 00 01 f9 f9 f9 f9
>3e4a18		f9 f9 f9 f9 f9 f9 f9 f9 01 00 01 f9 f9 f9 f9 f9
>3e4a28		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e4a38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4a48		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>3e4a58		00 00 00 01 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4a68		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4a78		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 01
>3e4a88		01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4a98		f9 01 00 01 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e4aa8		00 00 01 01 01 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>3e4ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4ac8		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>3e4ad8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4ae8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4af8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9
>3e4b08		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4b18		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4b28		f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9 f9 f9
>3e4b38		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9
>3e4b48		f9 f9 f9 f9 f9 f9 01 00 00 00 01 f9 f9 f9 f9 f9
>3e4b58		f9 f9 f9 f9 f9 f9 01 01 00 00 01 f9 f9 f9 f9 f9
>3e4b68		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e4b78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4b88		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>3e4b98		00 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4ba8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
;		...repeated 2 times (32 bytes)...
>3e4bd8		01 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4be8		01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>3e4bf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4c08		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 00 00
>3e4c18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4c28		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4c38		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9
>3e4c48		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4c58		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4c68		f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9 f9 f9
>3e4c78		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9
>3e4c88		f9 f9 f9 f9 f9 01 00 00 00 01 f9 f9 f9 f9 f9 f9
>3e4c98		f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9 f9
>3e4ca8		f9 01 f9 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e4cb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4cc8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 01 01
>3e4cd8		01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4ce8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4cf8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4d08		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e4d18		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4d28		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>3e4d38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4d48		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>3e4d58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4d68		01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4d78		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9 f9
>3e4d88		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4d98		f9 f9 f9 f9 f9 f9 f9 01 01 01 f9 f9 f9 f9 f9 f9
>3e4da8		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 01 f9 f9
>3e4db8		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9
>3e4dc8		f9 f9 f9 f9 01 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>3e4dd8		f9 f9 f9 f9 01 01 00 00 00 00 00 01 f9 f9 f9 f9
>3e4de8		01 00 01 f9 01 00 00 00 00 00 00 00 00 00 00 00
>3e4df8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4e08		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 01 01 f9 f9
>3e4e18		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9
>3e4e28		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4e38		f9 f9 f9 01 f9 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4e48		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 00
>3e4e58		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4e68		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 00 00 00
>3e4e78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4e88		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>3e4e98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4ea8		00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4eb8		f9 f9 f9 01 01 00 00 00 00 00 00 00 00 01 f9 f9
>3e4ec8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4ed8		f9 f9 f9 01 01 01 01 00 00 00 01 f9 f9 f9 f9 f9
>3e4ee8		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 01 f9 f9
>3e4ef8		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9 f9
>3e4f08		f9 f9 f9 01 01 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>3e4f18		f9 f9 f9 01 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3e4f28		f9 01 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e4f38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4f48		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e4f58		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 00 01 f8 f8 f8
>3e4f68		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e4f78		f8 f8 01 00 01 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>3e4f88		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 01 00 00 00
>3e4f98		00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>3e4fa8		f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 00 00 00 00 00
>3e4fb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4fc8		00 00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00
>3e4fd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4fe8		00 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e4ff8		f8 01 01 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3e5008		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01
>3e5018		01 01 01 00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8
>3e5028		01 01 01 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>3e5038		f8 f8 f8 f8 f8 01 00 00 00 00 00 01 f8 f8 f8 f8
>3e5048		f8 f8 01 00 01 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>3e5058		f8 f8 01 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3e5068		f8 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00
>3e5078		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5088		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e5098		f8 f8 f8 f8 f8 f8 f8 f8 01 01 00 01 01 f8 f8 f8
>3e50a8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 01
>3e50b8		01 f8 f8 01 f8 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e50c8		f8 f8 f8 f8 f8 01 f8 f8 01 01 00 00 00 00 00 00
>3e50d8		00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>3e50e8		f8 f8 f8 f8 f8 f8 f8 01 01 00 00 00 00 00 00 00
>3e50f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5108		00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00
>3e5118		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5128		00 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01
>3e5138		01 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3e5148		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 01 01 00
>3e5158		00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8 01
>3e5168		00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 f8
>3e5178		f8 f8 f8 f8 01 00 00 00 00 00 00 01 f8 01 f8 01
>3e5188		01 01 00 00 00 00 00 01 f8 f8 01 f8 f8 01 f8 f8
>3e5198		f8 01 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>3e51a8		f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e51b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e51c8		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e51d8		f8 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00 01 f8 f8
>3e51e8		f8 f8 f8 f8 f8 f8 f8 f8 01 01 01 01 01 00 00 00
>3e51f8		00 01 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e5208		f8 f8 f8 f8 01 00 01 01 00 00 00 00 00 00 00 00
>3e5218		00 00 00 00 00 00 00 00 01 01 f8 f8 f8 f8 f8 f8
>3e5228		f8 f8 f8 01 01 01 01 00 00 00 00 00 00 00 00 00
>3e5238		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5248		00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00
>3e5258		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5268		00 00 00 00 01 01 01 01 f8 f8 01 01 01 01 01 00
>3e5278		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>3e5288		f8 f8 f8 f8 f8 f8 f8 01 01 01 01 00 00 00 00 00
>3e5298		00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8 01
>3e52a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e52b8		f8 f8 f8 f8 01 00 00 00 00 00 01 f8 01 00 01 00
>3e52c8		00 00 00 00 00 00 01 f8 f8 01 00 01 01 00 01 f8
>3e52d8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>3e52e8		f8 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e52f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5308		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e5318		f8 f8 f8 f8 01 01 01 00 00 00 00 00 00 00 01 01
>3e5328		01 f8 f8 f8 f8 01 01 01 00 00 00 00 00 00 00 00
>3e5338		00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 01
>3e5348		01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e5358		00 00 00 00 00 00 00 00 00 00 01 01 01 01 f8 01
>3e5368		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5378		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5388		00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00 00
>3e5398		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e53a8		00 00 00 00 00 00 00 00 01 01 00 00 00 00 00 00
>3e53b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e53c8		f8 f8 f8 01 01 01 01 00 00 00 00 00 00 00 00 00
>3e53d8		00 00 00 00 00 00 00 00 00 01 f8 f8 01 f8 01 00
>3e53e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e53f8		01 01 01 01 00 00 00 00 00 00 01 01 00 00 01 00
>3e5408		00 00 00 00 00 00 01 f8 01 00 00 00 00 00 01 01
>3e5418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>3e5428		01 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5438		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5448		00 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e5458		f8 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e5468		00 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e5478		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5488		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5498		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00
>3e54a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e54b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e54c8		00 00 01 f8 f8 f8 f8 f8 01 00 00 00 00 00 00 00
>3e54d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e5508		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5518		00 00 00 00 00 00 00 00 00 01 f8 01 00 01 00 00
>3e5528		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5538		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>3e5548		00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00
>3e5558		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e5568		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5578		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5588		00 00 00 01 01 01 f8 f8 f8 f8 f8 f8 f8 f8 01 01
>3e5598		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e55a8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e55b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e5608		00 00 01 f8 f8 01 f8 01 00 00 00 00 00 00 00 00
>3e5618		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e5658		00 00 00 00 00 00 00 00 01 f8 01 00 00 01 00 00
>3e5668		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5678		00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 00
>3e5688		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5698		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e56a8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e56b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e56c8		00 00 00 00 00 01 01 01 01 01 01 01 01 01 00 00
>3e56d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 6 times (96 bytes)...
>3e5748		00 01 f8 f8 01 00 01 01 00 00 00 00 00 00 00 00
>3e5758		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e5798		00 00 00 00 00 00 00 00 01 01 00 00 00 00 00 00
>3e57a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e57b8		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>3e57c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e57d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e57e8		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e57f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e5888		00 01 f8 01 01 00 01 00 00 00 00 00 00 00 00 00
>3e5898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e58d8		00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00
>3e58e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e5928		00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e59c8		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e59d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e5a18		00 00 00 00 00 00 00 01 01 00 00 00 00 00 00 00
>3e5a28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 13 times (208 bytes)...
>3e5b08		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5b18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 18 times (288 bytes)...
>3e5c48		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5c58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 89 times (1424 bytes)...
>3e61f8		00 00 00 00 00 00 00 00
.3e6200						SS_FMX_TXT
>3e6200		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_FMX.data"
>3e6208		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 42 times (672 bytes)...
>3e64b8		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>3e64c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e6558		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>3e6568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e65f8		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>3e6608		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e6698		00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 00
>3e66a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e66f8		00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00
>3e6708		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e6738		00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 00
>3e6748		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e6798		00 00 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e67a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e67d8		00 00 00 00 00 00 00 00 00 00 01 01 00 01 01 00
>3e67e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e67f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e6828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e6838		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6848		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e6878		00 00 00 00 00 00 00 00 00 00 01 01 00 01 01 00
>3e6888		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e68c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff
>3e68d8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e68e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e6918		00 00 00 00 00 00 00 00 00 00 01 ff 01 ff ff 01
>3e6928		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e6968		00 00 00 00 00 00 00 00 00 00 00 00 01 01 ff 01
>3e6978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e69b8		00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff
>3e69c8		01 ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e69d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e6a08		00 00 00 00 00 00 00 00 00 00 01 01 ff ff ff 01
>3e6a18		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6a28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6a38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6a48		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6a58		00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff
>3e6a68		ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6a78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e6aa8		00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff ff
>3e6ab8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6ac8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6ad8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6ae8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6af8		00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff
>3e6b08		ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b28		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b48		00 00 00 00 00 00 00 00 01 ff ff ff ff ff ff ff
>3e6b58		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b88		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b98		00 00 01 01 01 01 01 01 01 01 00 01 ff ff ff ff
>3e6ba8		ff ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e6bb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e6bc8		ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6bd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6be8		00 00 00 00 00 00 01 01 ff ff ff ff ff ff ff 01
>3e6bf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6c08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6c18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e6c28		ff ff 01 01 01 01 01 01 01 00 00 01 01 01 01 01
>3e6c38		01 01 ff ff ff ff ff ff ff ff 01 ff ff ff ff ff
>3e6c48		ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00 00
>3e6c58		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 ff
>3e6c68		ff ff 01 00 00 00 00 00 00 00 00 00 01 00 00 00
>3e6c78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6c88		00 00 00 00 00 01 ff ff ff ff ff ff ff ff ff 01
>3e6c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6ca8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6cb8		00 00 00 00 00 00 00 00 00 00 01 01 01 01 ff ff
>3e6cc8		ff ff ff ff ff ff ff ff ff 01 01 ff ff ff ff ff
>3e6cd8		ff ff ff ff ff ff ff ff 01 01 01 ff ff ff ff ff
>3e6ce8		ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00
>3e6cf8		00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff
>3e6d08		ff ff ff 01 00 00 00 00 00 00 01 01 01 01 00 00
>3e6d18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6d28		00 00 00 01 01 ff ff ff ff ff ff ff ff ff ff 01
>3e6d38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6d48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6d58		00 00 00 01 01 01 01 01 01 01 fe fe fe fe fe fe
>3e6d68		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6d78		fe fe fe fe fe fe fe 01 00 00 00 01 fe fe fe fe
>3e6d88		fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>3e6d98		00 00 00 00 00 00 00 00 00 00 00 00 01 fe fe fe
>3e6da8		fe fe fe fe 01 00 00 01 01 01 fe fe fe 01 00 00
>3e6db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6dc8		00 00 01 fe fe fe fe fe fe fe fe fe fe fe 01 00
>3e6dd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6de8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>3e6df8		01 01 01 fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6e08		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6e18		fe fe fe fe fe fe fe 01 00 00 00 01 fe fe fe fe
>3e6e28		fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>3e6e38		00 00 00 00 00 00 00 00 00 00 01 01 fe fe fe fe
>3e6e48		fe fe fe fe 01 00 00 01 fe fe fe fe fe fe 01 01
>3e6e58		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6e68		01 01 fe fe fe fe fe fe fe fe fe fe fe 01 00 00
>3e6e78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6e88		00 00 00 00 00 01 01 01 01 01 01 01 fe fe fe fe
>3e6e98		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6ea8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6eb8		fe fe fe fe fe fe 01 00 00 00 00 00 01 fe fe fe
>3e6ec8		fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00
>3e6ed8		00 00 00 00 00 00 00 00 00 01 fe fe fe fe fe fe
>3e6ee8		fe fe fe fe fe 01 00 01 fe fe fe fe fe fe fe fe
>3e6ef8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e6f08		fe fe fe fe fe fe fe fe fe fe fe fe fe 01 00 00
>3e6f18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6f28		00 00 00 01 01 fe fe fe fe fe fe fe fe fe fe fe
>3e6f38		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6f48		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6f58		fe fe fe fe fe fe fe 01 01 01 01 01 fe fe fe fe
>3e6f68		fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00
>3e6f78		00 00 00 00 00 00 00 00 01 fe fe fe fe fe fe fe
>3e6f88		fe fe fe fe fe 01 00 01 fe fe fe fe fe fe fe fe
>3e6f98		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe
>3e6fa8		fe fe fe fe fe fe fe fe fe fe fe fe 01 00 00 00
>3e6fb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6fc8		00 00 00 00 01 01 01 fe fe fe fe fe fe fe fe fe
>3e6fd8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6fe8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6ff8		fe fe fe fe fe fe fe fe 01 01 01 fe fe fe fe fe
>3e7008		fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00
>3e7018		00 00 00 00 00 00 00 01 fe fe fe fe fe fe fe fe
>3e7028		fe fe fe fe fe 01 00 01 fe fe fe fe fe fe fe fe
>3e7038		fe 01 00 00 00 00 00 00 00 00 00 00 00 01 fe fe
>3e7048		fe fe fe fe fe fe fe fe fe fe 01 01 00 00 00 00
>3e7058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7068		00 00 00 00 00 00 00 01 01 01 01 fe fe fe fe fe
>3e7078		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e7088		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e7098		fe fe fe fe fe fe 01 01 00 00 01 fe fe fe fe fe
>3e70a8		fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00
>3e70b8		00 00 00 00 00 00 01 fe fe fe fe fe fe fe fe fe
>3e70c8		fe fe fe fe 01 00 00 01 fe fe fe fe fe fe fe fe
>3e70d8		fe 01 00 00 00 00 00 00 00 00 00 01 01 fe fe fe
>3e70e8		fe fe fe fe fe fe fe fe fe 01 00 00 00 00 00 00
>3e70f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7108		00 00 00 00 00 00 00 00 00 00 01 fe fe fe fe fe
>3e7118		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e7128		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 01
>3e7138		01 01 01 01 01 01 00 00 00 01 fe fe fe fe fe fe
>3e7148		fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00
>3e7158		00 00 00 00 00 01 fe fe fe fe fe fe fe fe fe fe
>3e7168		fe fe fe fe 01 00 00 01 fe fe fe fe fe fe fe fe
>3e7178		fe 01 00 00 00 00 00 00 00 01 01 fe fe fe fe fe
>3e7188		fe fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00
>3e7198		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e71a8		00 00 00 00 00 00 00 01 01 01 01 01 fe fe fe fe
>3e71b8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e71c8		fe fe fe fe fe fe fe fe 01 01 01 01 01 01 01 00
>3e71d8		00 00 00 00 00 00 00 00 00 01 fe fe fe fe fe fe
>3e71e8		fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00
>3e71f8		00 00 00 00 01 fe fe fe fe fe fe fe fe fe fe fe
>3e7208		fe fe fe 01 00 00 00 01 fe fe fe fe fe fe fe fe
>3e7218		fe fe 01 00 00 00 00 00 01 fe fe fe fe fe fe fe
>3e7228		fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00
>3e7238		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7248		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>3e7258		fd fd fd 01 01 01 fd fd fd fd fd fd fd fd fd fd
>3e7268		fd fd fd fd fd 01 01 01 00 00 00 00 00 00 00 00
>3e7278		00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e7288		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>3e7298		00 00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd
>3e72a8		fd fd fd 01 00 00 00 01 fd fd fd fd fd fd fd fd
>3e72b8		fd fd 01 00 00 00 01 01 fd fd fd fd fd fd fd fd
>3e72c8		fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00
>3e72d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e72e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e72f8		01 01 01 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e7308		fd fd 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e7318		00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>3e7328		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>3e7338		00 01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e7348		fd fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd
>3e7358		fd fd 01 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e7368		fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00
>3e7378		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7388		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7398		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e73a8		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e73b8		00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>3e73c8		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>3e73d8		01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e73e8		fd fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd
>3e73f8		fd fd 01 00 01 fd fd fd fd fd fd fd fd fd fd fd
>3e7408		fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00 00
>3e7418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7428		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7438		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e7448		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7458		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e7468		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 01 01
>3e7478		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e7488		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e7498		fd fd fd 01 fd fd fd fd fd fd fd fd fd fd fd fd
>3e74a8		fd fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00
>3e74b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e74c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e74d8		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd
>3e74e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e74f8		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e7508		fd fd fd fd fd fd fd fd 01 01 00 00 00 01 fd fd
>3e7518		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e7528		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e7538		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e7548		fd fd 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e7558		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7578		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd 01
>3e7588		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7598		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e75a8		fd fd fd fd fd fd fd 01 00 01 01 01 01 fd fd fd
>3e75b8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e75c8		01 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e75d8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e75e8		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e75f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7608		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7618		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>3e7628		01 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00
>3e7638		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e7648		fd fd fd fd fd fd fd fd 01 fd fd fd fd fd fd fd
>3e7658		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>3e7668		00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e7678		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e7688		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7698		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e76a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e76b8		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>3e76c8		fd fd fd fd fd fd fd fd 01 01 01 01 00 00 00 00
>3e76d8		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd
>3e76e8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e76f8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>3e7708		00 00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd
>3e7718		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>3e7728		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7738		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7748		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7758		00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7768		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e7778		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>3e7788		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7798		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>3e77a8		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>3e77b8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 01 00
>3e77c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e77d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e77e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e77f8		01 01 fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7808		fc fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00
>3e7818		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>3e7828		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7838		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>3e7848		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>3e7858		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e7868		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7878		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7888		00 00 00 00 00 00 00 00 00 00 01 01 01 01 fc fc
>3e7898		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e78a8		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e78b8		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>3e78c8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e78d8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>3e78e8		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3e78f8		fc fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00
>3e7908		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7918		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7928		00 00 00 00 00 00 01 01 01 01 fc fc fc fc fc fc
>3e7938		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7948		fc fc fc fc fc fc fc fc fc fc fc 01 01 01 01 01
>3e7958		01 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 fc
>3e7968		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7978		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>3e7988		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>3e7998		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e79a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e79b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e79c8		00 00 00 01 01 01 fc fc fc fc fc fc fc fc fc fc
>3e79d8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e79e8		fc fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00
>3e79f8		00 00 01 fc fc fc fc fc fc fc fc fc fc 01 00 01
>3e7a08		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7a18		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>3e7a28		00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc
>3e7a38		fc fc fc fc fc fc fc fc 01 01 00 00 00 00 00 00
>3e7a48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7a58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e7a68		01 01 01 fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7a78		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7a88		fc fc fc fc fc fc fc fc 01 01 01 00 00 00 00 00
>3e7a98		00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00 01
>3e7aa8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7ab8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>3e7ac8		00 00 00 00 00 00 01 01 fc fc fc fc fc fc fc fc
>3e7ad8		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3e7ae8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7af8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>3e7b08		01 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>3e7b18		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7b28		fc fc 01 01 01 01 01 01 00 00 00 00 00 00 00 00
>3e7b38		00 01 fc fc fc fc fc fc fc fc fc fc 01 00 00 01
>3e7b48		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 fc
>3e7b58		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e7b68		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>3e7b78		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3e7b88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7b98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7ba8		00 00 00 01 01 01 01 01 fc fc fc fc fc fc fc fc
>3e7bb8		fc fc fc fc fc fc fc fc fc fc fc fc 01 01 01 01
>3e7bc8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7bd8		01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00 01
>3e7be8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00 01
>3e7bf8		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e7c08		00 00 00 00 00 01 01 fc fc fc fc fc fc fc fc fc
>3e7c18		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3e7c28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7c48		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3e7c58		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e7c68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e7c78		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e7c88		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 01
>3e7c98		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e7ca8		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>3e7cb8		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>3e7cc8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7cd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7ce8		00 00 00 00 00 01 01 01 fb fb fb fb fb fb fb fb
>3e7cf8		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e7d08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e7d18		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e7d28		01 fb fb fb fb fb fb fb fb fb fb 01 00 00 00 01
>3e7d38		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e7d48		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>3e7d58		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>3e7d68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7d78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7d88		00 00 00 01 01 fb fb 01 01 01 01 fb fb fb fb fb
>3e7d98		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e7da8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e7db8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e7dc8		00 01 fb fb fb fb fb fb fb 01 01 00 00 00 01 fb
>3e7dd8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e7de8		00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e7df8		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>3e7e08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7e18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7e28		00 01 01 00 01 01 01 00 00 00 00 01 fb fb fb fb
>3e7e38		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3e7e48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>3e7e58		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e7e68		00 01 01 fb fb fb fb fb 01 00 00 00 00 00 01 fb
>3e7e78		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e7e88		00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e7e98		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3e7ea8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7eb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7ec8		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e7ed8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3e7ee8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>3e7ef8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3e7f08		00 00 00 01 01 01 01 01 00 00 00 00 00 01 fb fb
>3e7f18		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 01
>3e7f28		01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e7f38		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e7f48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7f58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7f68		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e7f78		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>3e7f88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb
>3e7f98		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>3e7fa8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb
>3e7fb8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 01
>3e7fc8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e7fd8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e7fe8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8008		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e8018		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>3e8028		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb
>3e8038		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>3e8048		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e8058		fb fb fb fb fb fb fb fb 01 00 00 00 00 01 01 fb
>3e8068		fb fb fb fb fb fb fb fb fb fb fb 01 fb fb fb fb
>3e8078		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e8088		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8098		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e80a8		00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb
>3e80b8		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>3e80c8		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e80d8		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>3e80e8		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e80f8		fb fb fb fb fb fb fb 01 00 00 00 00 01 fb fb fb
>3e8108		fb fb fb fb fb fb fb fb fb fb 01 00 01 01 01 fb
>3e8118		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e8128		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8148		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e8158		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>3e8168		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3e8178		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>3e8188		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3e8198		fa fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa
>3e81a8		fa fa fa fa fa fa fa fa fa fa fa 01 01 00 00 01
>3e81b8		fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00
>3e81c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e81d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e81e8		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e81f8		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>3e8208		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e8218		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>3e8228		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e8238		fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa fa
>3e8248		fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00
>3e8258		01 fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00
>3e8268		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8288		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e8298		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>3e82a8		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e82b8		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>3e82c8		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e82d8		fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa fa
>3e82e8		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3e82f8		01 fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00
>3e8308		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8318		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8328		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e8338		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>3e8348		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e8358		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>3e8368		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e8378		fa fa fa fa fa fa 01 00 00 01 fa fa fa fa fa fa
>3e8388		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e8398		00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>3e83a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e83b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e83c8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e83d8		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>3e83e8		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e83f8		fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00 00
>3e8408		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e8418		fa fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa
>3e8428		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e8438		00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>3e8448		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8458		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8468		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e8478		fa fa fa 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e8488		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e8498		fa fa fa 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e84a8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e84b8		fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa fa
>3e84c8		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>3e84d8		00 00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00
>3e84e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e84f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8508		00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa
>3e8518		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8528		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e8538		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8548		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e8558		fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa fa
>3e8568		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>3e8578		00 00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00
>3e8588		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8598		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e85a8		00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa
>3e85b8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e85c8		00 00 00 00 00 00 00 00 00 01 01 fa fa fa fa fa
>3e85d8		01 fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e85e8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e85f8		fa fa fa 01 00 00 01 fa fa fa fa fa fa fa fa fa
>3e8608		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>3e8618		00 00 00 01 fa fa fa fa fa fa fa fa fa fa 01 00
>3e8628		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8638		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8648		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>3e8658		f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8668		00 00 00 00 00 00 00 00 00 01 00 01 f9 f9 f9 01
>3e8678		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8688		00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9
>3e8698		f9 f9 f9 01 00 01 f9 f9 f9 f9 01 01 f9 01 01 01
>3e86a8		f9 f9 f9 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e86b8		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e86c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e86d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e86e8		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>3e86f8		f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8708		00 00 00 00 00 00 00 00 01 01 00 01 01 01 01 00
>3e8718		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8728		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>3e8738		f9 f9 01 00 00 01 01 01 01 01 00 00 01 00 00 00
>3e8748		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8758		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e8768		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8778		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8788		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>3e8798		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e87a8		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>3e87b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e87c8		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>3e87d8		f9 01 00 00 00 00 01 01 01 00 00 00 00 00 00 01
>3e87e8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e87f8		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 f9 f9
>3e8808		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8818		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8828		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e8838		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8848		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>3e8858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8868		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>3e8878		f9 01 00 00 00 01 01 01 00 00 00 00 00 00 00 01
>3e8888		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8898		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 00 01 f9
>3e88a8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e88b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e88c8		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 00
>3e88d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e88e8		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>3e88f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8908		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>3e8918		01 00 00 00 00 01 01 00 00 00 00 00 00 00 00 00
>3e8928		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8938		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 01 f9
>3e8948		f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8958		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8968		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 00 00
>3e8978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e89a8		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e89b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e89c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e89d8		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 01 00 01
>3e89e8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e89f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8a08		00 00 00 00 00 01 f9 f9 f9 f9 01 00 01 01 00 00
>3e8a18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e8a48		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e8a58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8a68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8a78		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 01 00 00
>3e8a88		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8a98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8aa8		00 00 00 00 00 01 f9 f9 f9 01 00 01 01 00 00 00
>3e8ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e8ae8		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 01 00
>3e8af8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8b08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8b18		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 01 00 00
>3e8b28		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8b38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8b48		00 00 00 00 00 01 f8 01 01 00 00 01 00 00 00 00
>3e8b58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e8b88		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 00 00 00
>3e8b98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8ba8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8bb8		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 01 00
>3e8bc8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8bd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8be8		00 00 00 00 01 f8 01 00 00 00 00 01 00 00 00 00
>3e8bf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e8c28		00 00 00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00
>3e8c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8c48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8c58		00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8 01 00
>3e8c68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8c78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8c88		00 00 00 00 01 f8 01 00 00 00 01 00 00 00 00 00
>3e8c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e8cc8		00 00 00 00 00 01 f8 f8 f8 f8 f8 01 00 00 00 00
>3e8cd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8ce8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8cf8		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 01 01
>3e8d08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8d18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8d28		00 00 00 00 01 01 00 00 00 00 00 00 00 00 00 00
>3e8d38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e8d68		00 00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00
>3e8d78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8d88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8d98		00 00 00 00 00 00 00 00 00 00 01 f8 01 00 00 01
>3e8da8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8dc8		00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e8dd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e8e08		00 00 00 00 01 f8 f8 f8 f8 f8 01 00 00 00 00 00
>3e8e18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8e28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8e38		00 00 00 00 00 00 00 00 00 00 00 01 f8 01 00 00
>3e8e48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>3e8ea8		00 00 00 00 01 f8 f8 f8 01 01 00 00 00 00 00 00
>3e8eb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8ec8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8ed8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 00 00
>3e8ee8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>3e8f48		00 00 00 00 01 f8 f8 01 00 01 00 00 00 00 00 00
>3e8f58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8f68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8f78		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 00
>3e8f88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>3e8fe8		00 00 00 01 f8 f8 01 01 00 00 00 00 00 00 00 00
>3e8ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9008		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9018		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e9028		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>3e9088		00 00 00 01 f8 01 00 00 00 00 00 00 00 00 00 00
>3e9098		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e90a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e90b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e90c8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e90d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e9128		00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e9138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e91c8		00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e91d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e9268		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e9278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 23 times (368 bytes)...
>3e93f8		00 00 00 00 00 00 00 00
.3e9400						SS_UPlus_TXT
>3e9400		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_UPlus.data"
>3e9408		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 14 times (224 bytes)...
>3e94f8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9508		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e9558		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e95b8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e95c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e9608		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e9618		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9628		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e9668		00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 01
>3e9678		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9688		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e96c8		00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 01
>3e96d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e9728		00 00 00 00 00 01 01 00 00 00 01 01 01 01 fe 01
>3e9738		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e9788		00 00 00 00 01 fe 01 00 00 00 01 fe fe fe fe 01
>3e9798		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e97e8		00 00 00 00 01 fe 01 00 00 01 fe fe fe fe 01 00
>3e97f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e9848		00 00 00 01 fd fd 01 00 01 fd fd fd fd fd 01 00
>3e9858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e98a8		00 00 01 fd fd fd fd 01 fd fd fd fd fd fd 01 00
>3e98b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e98e8		00 00 00 00 00 00 00 00 00 00 00 01 01 01 00 00
>3e98f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9908		00 00 01 fd fd fd fd fd fd fd fd fd fd 01 00 00
>3e9918		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e9948		00 00 00 00 00 00 00 00 00 00 01 fd fd fd 01 00
>3e9958		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9968		00 01 fd fd fd fd fd fd fd fd fd fd fd 01 00 00
>3e9978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e99a8		00 00 00 00 00 00 00 00 00 01 fd fd fd fd fd 01
>3e99b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e99c8		00 01 fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3e99d8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00
>3e99e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e99f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9a08		00 00 00 00 00 00 00 01 01 fd fd fd fd fd fd fd
>3e9a18		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9a28		01 fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3e9a38		00 00 00 00 00 00 00 00 00 00 00 00 01 01 00 00
>3e9a48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9a58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9a68		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e9a78		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e9a88		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>3e9a98		00 00 00 00 00 00 00 00 00 00 00 01 fd 01 00 00
>3e9aa8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9ac8		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e9ad8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e9ae8		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>3e9af8		00 00 00 00 00 00 00 00 00 00 01 fd fd fd 01 01
>3e9b08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9b18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9b28		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e9b38		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc
>3e9b48		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e9b58		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>3e9b68		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9b78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9b88		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e9b98		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc
>3e9ba8		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e9bb8		00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc
>3e9bc8		fc 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9bd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9be8		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>3e9bf8		01 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>3e9c08		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>3e9c18		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e9c28		fc 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9c48		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01
>3e9c58		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>3e9c68		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>3e9c78		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e9c88		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9ca8		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01
>3e9cb8		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>3e9cc8		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>3e9cd8		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc 01
>3e9ce8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9cf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9d08		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01
>3e9d18		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>3e9d28		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>3e9d38		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>3e9d48		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9d58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9d68		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>3e9d78		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>3e9d88		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3e9d98		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e9da8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9dc8		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>3e9dd8		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>3e9de8		fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00
>3e9df8		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e9e08		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9e18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9e28		00 01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00
>3e9e38		00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb
>3e9e48		fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00
>3e9e58		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb 01
>3e9e68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9e78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9e88		00 01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00
>3e9e98		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>3e9ea8		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>3e9eb8		00 00 00 00 01 fb fb fb fb fb fb fb fb fb 01 00
>3e9ec8		00 00 00 00 00 00 01 01 01 01 00 00 00 00 00 00
>3e9ed8		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e9ee8		00 01 fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>3e9ef8		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3e9f08		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>3e9f18		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb 01
>3e9f28		01 01 01 01 01 01 01 fb fb fb 01 01 01 01 01 01
>3e9f38		01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e9f48		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>3e9f58		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3e9f68		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>3e9f78		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>3e9f88		fb fb fb fb fb fb fb fb fb 01 01 01 01 01 00 00
>3e9f98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9fa8		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>3e9fb8		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>3e9fc8		fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e9fd8		00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e9fe8		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>3e9ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3ea008		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3ea018		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>3ea028		fb fb fb 01 00 00 00 00 00 00 00 00 00 01 01 01
>3ea038		01 01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3ea048		fb fb fb fb fb fb fb fb fb 01 01 01 01 01 01 01
>3ea058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3ea068		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3ea078		00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb
>3ea088		fb fb 01 00 00 00 00 00 00 01 01 01 01 fb fb fb
>3ea098		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3ea0a8		fb fb fb fb fb fb fb fb fb fb 01 01 00 00 00 00
>3ea0b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3ea0c8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3ea0d8		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3ea0e8		fb fb 01 00 00 00 01 01 01 fb fb fb fb fb fb fb
>3ea0f8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3ea108		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3ea118		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>3ea128		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3ea138		00 00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa
>3ea148		fa 01 00 00 01 01 fa fa fa fa fa fa fa fa fa fa
>3ea158		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3ea168		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3ea178		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>3ea188		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3ea198		00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>3ea1a8		01 00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa
>3ea1b8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3ea1c8		fa fa fa fa fa fa fa fa 01 01 00 00 00 00 00 00
>3ea1d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>3ea1e8		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3ea1f8		00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa
>3ea208		01 00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa
>3ea218		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3ea228		fa fa fa fa fa 01 01 01 00 00 00 00 00 00 00 00
>3ea238		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3ea248		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3ea258		00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa
>3ea268		01 00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa
>3ea278		fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01 01
>3ea288		01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>3ea298		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3ea2a8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3ea2b8		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa
>3ea2c8		01 00 00 01 01 01 fa fa fa fa fa fa fa fa fa fa
>3ea2d8		fa fa fa fa fa fa fa fa fa fa fa fa 01 01 00 01
>3ea2e8		01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>3ea2f8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3ea308		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3ea318		00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>3ea328		00 00 00 00 00 00 01 01 fa fa fa fa fa fa fa fa
>3ea338		fa fa fa fa fa fa fa fa fa fa 01 01 00 00 00 00
>3ea348		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea358		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3ea368		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3ea378		01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>3ea388		00 00 00 00 00 00 00 00 01 01 01 01 01 fa fa fa
>3ea398		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3ea3a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea3b8		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3ea3c8		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 01
>3ea3d8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>3ea3e8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3ea3f8		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3ea408		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea418		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea428		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9
>3ea438		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>3ea448		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9
>3ea458		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>3ea468		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea478		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea488		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9
>3ea498		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>3ea4a8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9
>3ea4b8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>3ea4c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea4d8		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea4e8		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 01 01 f9 f9
>3ea4f8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>3ea508		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea518		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>3ea528		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea538		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea548		f9 f9 f9 f9 f9 f9 f9 f9 01 00 01 01 f9 f9 f9 f9
>3ea558		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00
>3ea568		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea578		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00 00
>3ea588		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea598		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea5a8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9 f9 f9
>3ea5b8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00
>3ea5c8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>3ea5d8		01 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00 00
>3ea5e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea5f8		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea608		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3ea618		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00
>3ea628		00 00 00 00 00 00 00 00 00 00 00 01 01 01 01 01
>3ea638		00 01 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00 00
>3ea648		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea658		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea668		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3ea678		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>3ea688		00 00 00 00 00 00 00 00 00 00 00 01 01 01 01 01
>3ea698		00 01 f9 f9 f9 01 00 00 00 00 00 00 00 00 00 00
>3ea6a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea6b8		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea6c8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3ea6d8		f9 f9 f9 f9 f9 f9 01 01 00 00 00 00 00 00 00 00
>3ea6e8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 01 00
>3ea6f8		01 f9 01 f9 f9 01 00 00 00 00 00 00 00 00 00 00
>3ea708		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea718		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3ea728		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3ea738		f8 f8 f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00
>3ea748		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 00 00
>3ea758		01 01 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>3ea768		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea778		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3ea788		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3ea798		f8 f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00
>3ea7a8		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 00 00
>3ea7b8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea7c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea7d8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>3ea7e8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3ea7f8		f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00 00
>3ea808		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 00 00
>3ea818		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea838		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>3ea848		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3ea858		f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea868		00 00 00 00 00 00 00 00 00 00 01 f8 01 00 00 01
>3ea878		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea888		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>3ea8a8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3ea8b8		f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea8c8		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 01
>3ea8d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea8e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea8f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3ea908		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3ea918		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea928		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>3ea938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3ea968		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 f8 f8 01 01 01
>3ea978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea988		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>3ea998		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3ea9c8		00 01 01 01 f8 f8 f8 01 01 01 00 01 01 00 00 00
>3ea9d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea9e8		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>3ea9f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eaa28		00 00 00 00 01 01 01 00 00 00 00 00 00 00 00 00
>3eaa38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 27 times (432 bytes)...
>3eabf8		00 00 00 00 00 00 00 00
.3eac00						SS_U_TXT
>3eac00		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_U.data"
>3eac08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 10 times (160 bytes)...
>3eacb8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eacc8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eacf8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ead08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ead18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ead28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3ead38		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ead48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ead58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ead68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3ead78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eada8		00 00 00 00 00 01 01 00 00 00 00 00 00 00 01 01
>3eadb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eade8		00 00 00 00 00 01 00 00 00 00 00 00 00 01 01 00
>3eadf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eae28		00 00 00 00 01 01 00 00 00 01 01 01 01 fe 01 00
>3eae38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eae68		00 00 00 01 fe 01 00 00 00 01 fe fe fe fe 01 00
>3eae78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eaea8		00 00 00 01 fe 01 00 00 01 fe fe fe fe 01 00 00
>3eaeb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eaee8		00 00 01 fd fd 01 00 01 fd fd fd fd fd 01 00 00
>3eaef8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eaf28		00 01 fd fd fd fd 01 fd fd fd fd fd fd 01 00 00
>3eaf38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eaf48		00 00 00 00 00 00 00 00 00 00 01 01 01 00 00 00
>3eaf58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eaf68		00 01 fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3eaf78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eaf88		00 00 00 00 00 00 00 00 00 01 fd fd fd 01 00 00
>3eaf98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eafa8		01 fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3eafb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eafc8		00 00 00 00 00 00 00 00 01 fd fd fd fd fd 01 00
>3eafd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eafe8		01 fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>3eaff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb008		00 00 00 00 00 00 01 01 fd fd fd fd fd fd fd 01
>3eb018		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3eb028		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>3eb038		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb048		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd 01
>3eb058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fd
>3eb068		fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00 00
>3eb078		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb088		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd 01
>3eb098		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fd
>3eb0a8		fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00 00
>3eb0b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb0c8		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01
>3eb0d8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>3eb0e8		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>3eb0f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb108		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01
>3eb118		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>3eb128		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>3eb138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb148		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01
>3eb158		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>3eb168		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>3eb178		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb188		00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01 00
>3eb198		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>3eb1a8		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>3eb1b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb1c8		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>3eb1d8		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>3eb1e8		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3eb1f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb208		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>3eb218		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>3eb228		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3eb238		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb248		00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>3eb258		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3eb268		fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00
>3eb278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb288		00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>3eb298		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3eb2a8		fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00 00
>3eb2b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb2c8		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>3eb2d8		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>3eb2e8		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>3eb2f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb308		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>3eb318		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3eb328		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>3eb338		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb348		01 fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3eb358		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>3eb368		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>3eb378		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3eb388		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3eb398		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>3eb3a8		fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00
>3eb3b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3eb3c8		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3eb3d8		00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb
>3eb3e8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb3f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>3eb408		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3eb418		00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb
>3eb428		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb438		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>3eb448		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3eb458		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3eb468		fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb478		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>3eb488		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3eb498		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>3eb4a8		fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb4b8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3eb4c8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3eb4d8		00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>3eb4e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb4f8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3eb508		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3eb518		00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa 01
>3eb528		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb538		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3eb548		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3eb558		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa 01
>3eb568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb578		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3eb588		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3eb598		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa 01
>3eb5a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb5b8		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3eb5c8		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3eb5d8		00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>3eb5e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb5f8		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3eb608		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>3eb618		01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>3eb628		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb638		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3eb648		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 01
>3eb658		fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>3eb668		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb678		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3eb688		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 01 fa
>3eb698		fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>3eb6a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb6b8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb6c8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9
>3eb6d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>3eb6e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb6f8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb708		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9
>3eb718		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>3eb728		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb738		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb748		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 01 01 f9 f9 f9
>3eb758		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00
>3eb768		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb778		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb788		f9 f9 f9 f9 f9 f9 f9 01 00 01 01 f9 f9 f9 f9 f9
>3eb798		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00
>3eb7a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb7b8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb7c8		f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9 f9 f9 f9
>3eb7d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00
>3eb7e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb7f8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb808		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3eb818		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>3eb828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb838		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb848		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3eb858		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>3eb868		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb878		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb888		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3eb898		f9 f9 f9 f9 f9 01 01 00 00 00 00 00 00 00 00 00
>3eb8a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb8b8		00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8
>3eb8c8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3eb8d8		f8 f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00
>3eb8e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb8f8		00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8
>3eb908		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3eb918		f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00 00
>3eb928		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb938		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3eb948		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3eb958		f8 f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb968		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb978		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3eb988		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3eb998		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb9a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb9b8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>3eb9c8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3eb9d8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb9e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb9f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>3eba08		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01
>3eba18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eba28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eba38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3eba48		f8 f8 f8 f8 f8 f8 f8 f8 f8 01 f8 f8 01 01 01 00
>3eba58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eba88		01 01 01 f8 f8 f8 01 01 01 00 01 01 00 00 00 00
>3eba98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3ebac8		00 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00
>3ebad8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3ebbf8		00 00 00 00 00 00 00 00
.3f0000						FONT_4_BANK0
>3f0000		00 00 00 00 00 00 00 00		.binary "FONT/Bm437_PhoenixEGA_8x8.bin", 0, 2048
>3f0008		7e 81 a5 81 bd 99 81 7e 3c 7e db ff c3 7e 3c 00
>3f0018		00 ee fe fe 7c 38 10 00 10 38 7c fe 7c 38 10 00
>3f0028		00 3c 18 ff ff 08 18 00 10 38 7c fe fe 10 38 00
>3f0038		00 00 18 3c 18 00 00 00 ff ff e7 c3 e7 ff ff ff
>3f0048		00 3c 42 81 81 42 3c 00 ff c3 bd 7e 7e bd c3 ff
>3f0058		01 03 07 0f 1f 3f 7f ff ff fe fc f8 f0 e0 c0 80
>3f0068		04 06 07 04 04 fc f8 00 0c 0a 0d 0b f9 f9 1f 1f
>3f0078		00 92 7c 44 c6 7c 92 00 00 00 60 78 7e 78 60 00
>3f0088		00 00 06 1e 7e 1e 06 00 18 7e 18 18 18 18 7e 18
>3f0098		66 66 66 66 66 00 66 00 ff b6 76 36 36 36 36 00
>3f00a8		7e c1 dc 22 22 1f 83 7e 00 00 00 7e 7e 00 00 00
>3f00b8		18 7e 18 18 7e 18 00 ff 18 7e 18 18 18 18 18 00
>3f00c8		18 18 18 18 18 7e 18 00 00 04 06 ff 06 04 00 00
>3f00d8		00 20 60 ff 60 20 00 00 00 00 00 c0 c0 c0 ff 00
>3f00e8		00 24 66 ff 66 24 00 00 00 00 10 38 7c fe 00 00
>3f00f8		00 00 00 fe 7c 38 10 00 00 00 00 00 00 00 00 00
>3f0108		30 30 30 30 30 00 30 00 66 66 00 00 00 00 00 00
>3f0118		6c 6c fe 6c fe 6c 6c 00 10 7c d2 7c 86 7c 10 00
>3f0128		f0 96 fc 18 3e 72 de 00 30 48 30 78 ce cc 78 00
>3f0138		0c 0c 18 00 00 00 00 00 10 60 c0 c0 c0 60 10 00
>3f0148		10 0c 06 06 06 0c 10 00 00 54 38 fe 38 54 00 00
>3f0158		00 18 18 7e 18 18 00 00 00 00 00 00 00 00 18 70
>3f0168		00 00 00 7e 00 00 00 00 00 00 00 00 00 00 18 00
>3f0178		02 06 0c 18 30 60 c0 00 7c ce de f6 e6 e6 7c 00
>3f0188		18 38 78 18 18 18 3c 00 7c c6 06 0c 30 60 fe 00
>3f0198		7c c6 06 3c 06 c6 7c 00 0e 1e 36 66 fe 06 06 00
>3f01a8		fe c0 c0 fc 06 06 fc 00 7c c6 c0 fc c6 c6 7c 00
>3f01b8		fe 06 0c 18 30 60 60 00 7c c6 c6 7c c6 c6 7c 00
>3f01c8		7c c6 c6 7e 06 c6 7c 00 00 30 00 00 00 30 00 00
>3f01d8		00 30 00 00 00 30 20 00 00 1c 30 60 30 1c 00 00
>3f01e8		00 00 7e 00 7e 00 00 00 00 70 18 0c 18 70 00 00
>3f01f8		7c c6 0c 18 30 00 30 00 7c 82 9a aa aa 9e 7c 00
>3f0208		7c c6 c6 fe c6 c6 c6 00 fc 66 66 7c 66 66 fc 00
>3f0218		7c c6 c0 c0 c0 c6 7c 00 fc 66 66 66 66 66 fc 00
>3f0228		fe 62 68 78 68 62 fe 00 fe 62 68 78 68 60 f0 00
>3f0238		7c c6 c6 c0 de c6 7c 00 c6 c6 c6 fe c6 c6 c6 00
>3f0248		3c 18 18 18 18 18 3c 00 1e 0c 0c 0c 0c cc 78 00
>3f0258		c6 cc d8 f0 d8 cc c6 00 f0 60 60 60 60 62 fe 00
>3f0268		c6 ee fe d6 c6 c6 c6 00 c6 e6 f6 de ce c6 c6 00
>3f0278		7c c6 c6 c6 c6 c6 7c 00 fc 66 66 7c 60 60 f0 00
>3f0288		7c c6 c6 c6 c6 c6 7c 0c fc 66 66 7c 66 66 e6 00
>3f0298		7c c6 c0 7c 06 c6 7c 00 7e 5a 18 18 18 18 3c 00
>3f02a8		c6 c6 c6 c6 c6 c6 7c 00 c6 c6 c6 c6 c6 6c 38 00
>3f02b8		c6 c6 c6 c6 d6 ee c6 00 c6 6c 38 38 38 6c c6 00
>3f02c8		66 66 66 3c 18 18 3c 00 fe c6 0c 18 30 66 fe 00
>3f02d8		1c 18 18 18 18 18 1c 00 c0 60 30 18 0c 06 02 00
>3f02e8		70 30 30 30 30 30 70 00 00 00 10 38 6c c6 00 00
>3f02f8		00 00 00 00 00 00 00 ff 30 30 18 00 00 00 00 00
>3f0308		00 00 7c 06 7e c6 7e 00 c0 c0 fc c6 c6 c6 fc 00
>3f0318		00 00 7c c6 c0 c6 7c 00 06 06 7e c6 c6 c6 7e 00
>3f0328		00 00 7c c6 fe c0 7c 00 3c 66 60 f0 60 60 60 00
>3f0338		00 00 7e c6 c6 7e 06 7c c0 c0 fc c6 c6 c6 c6 00
>3f0348		18 00 38 18 18 18 3c 00 00 0c 00 1c 0c 0c cc 78
>3f0358		c0 c0 c6 d8 f0 d8 c6 00 38 18 18 18 18 18 3c 00
>3f0368		00 00 ee fe d6 c6 c6 00 00 00 fc c6 c6 c6 c6 00
>3f0378		00 00 7c c6 c6 c6 7c 00 00 00 fc c6 c6 fc c0 c0
>3f0388		00 00 7e c6 c6 7e 06 06 00 00 de 76 60 60 60 00
>3f0398		00 00 7c c0 7c 06 7c 00 18 18 7e 18 18 18 1e 00
>3f03a8		00 00 c6 c6 c6 c6 7e 00 00 00 c6 c6 c6 6c 38 00
>3f03b8		00 00 c6 c6 d6 fe c6 00 00 00 c6 6c 38 6c c6 00
>3f03c8		00 00 c6 c6 c6 7e 06 7c 00 00 fe 0c 18 60 fe 00
>3f03d8		0e 18 18 70 18 18 0e 00 18 18 18 00 18 18 18 00
>3f03e8		e0 30 30 1c 30 30 e0 00 00 00 70 9a 0e 00 00 00
>3f03f8		00 00 18 3c 66 ff 00 00 7c c6 c0 c0 c6 7c 18 70
>3f0408		66 00 c6 c6 c6 c6 7e 00 0e 18 7c c6 fe c0 7c 00
>3f0418		18 24 7c 06 7e c6 7e 00 66 00 7c 06 7e c6 7e 00
>3f0428		38 0c 7c 06 7e c6 7e 00 18 00 7c 06 7e c6 7e 00
>3f0438		00 00 7c c0 c0 7c 18 70 18 24 7c c6 fe c0 7c 00
>3f0448		66 00 7c c6 fe c0 7c 00 70 18 7c c6 fe c0 7c 00
>3f0458		66 00 38 18 18 18 3c 00 18 24 38 18 18 18 3c 00
>3f0468		38 0c 38 18 18 18 3c 00 66 00 7c c6 fe c6 c6 00
>3f0478		18 00 7c c6 fe c6 c6 00 0e 18 fe 60 78 60 fe 00
>3f0488		00 00 7c 1a 7e d8 7e 00 7e d8 d8 de f8 d8 de 00
>3f0498		18 24 7c c6 c6 c6 7c 00 66 00 7c c6 c6 c6 7c 00
>3f04a8		38 0c 7c c6 c6 c6 7c 00 18 24 c6 c6 c6 c6 7e 00
>3f04b8		38 0c c6 c6 c6 c6 7e 00 66 00 c6 c6 c6 7e 06 7c
>3f04c8		66 7c c6 c6 c6 c6 7c 00 c6 00 c6 c6 c6 c6 7c 00
>3f04d8		18 7c c6 c0 c6 7c 18 00 1e 32 30 78 30 70 fe 00
>3f04e8		66 3c 18 7e 18 3c 18 00 fc c6 fc c0 cc de cc 0e
>3f04f8		00 1c 32 30 fc 30 f0 00 0e 18 7c 06 7e c6 7e 00
>3f0508		1a 30 38 18 18 18 3c 00 0e 18 7c c6 c6 c6 7c 00
>3f0518		0e 18 c6 c6 c6 c6 7e 00 66 98 fc c6 c6 c6 c6 00
>3f0528		66 98 e6 f6 de ce c6 00 7c 06 7e c6 7e 00 fe 00
>3f0538		7c c6 c6 c6 7c 00 fe 00 18 00 18 30 60 c6 7c 00
>3f0548		00 00 fe c0 c0 c0 c0 00 00 00 fe 06 06 06 06 00
>3f0558		c0 c0 c0 de 06 0c 1e 00 c0 c0 c0 cc 1c 3e 0c 00
>3f0568		30 00 30 30 30 30 30 00 00 36 6c d8 6c 36 00 00
>3f0578		00 d8 6c 36 6c d8 00 00 aa aa aa aa aa aa aa aa
>3f0588		aa 55 aa 55 aa 55 aa 55 44 22 44 22 44 22 44 22
>3f0598		18 18 18 18 18 18 18 18 18 18 18 f8 18 18 18 18
>3f05a8		18 18 18 f8 18 f8 18 18 36 36 36 f6 36 36 36 36
>3f05b8		00 00 00 fe 36 36 36 36 00 00 00 f8 18 f8 18 18
>3f05c8		36 36 36 f6 06 f6 36 36 36 36 36 36 36 36 36 36
>3f05d8		00 00 00 fe 06 f6 36 36 36 36 36 f6 06 fe 00 00
>3f05e8		36 36 36 fe 00 00 00 00 18 18 18 f8 18 f8 00 00
>3f05f8		00 00 00 f8 18 18 18 18 18 18 18 1f 00 00 00 00
>3f0608		18 18 18 ff 00 00 00 00 00 00 00 ff 18 18 18 18
>3f0618		18 18 18 1f 18 18 18 18 00 00 00 ff 00 00 00 00
>3f0628		18 18 18 ff 18 18 18 18 18 18 18 1f 18 1f 18 18
>3f0638		36 36 36 37 36 36 36 36 36 36 36 37 30 3f 00 00
>3f0648		00 00 00 3f 30 37 36 36 36 36 36 f7 00 ff 00 00
>3f0658		00 00 00 ff 00 f7 36 36 36 36 36 37 30 37 36 36
>3f0668		00 00 00 ff 00 ff 00 00 36 36 36 f7 00 f7 36 36
>3f0678		18 18 18 ff 00 ff 00 00 36 36 36 ff 00 00 00 00
>3f0688		00 00 00 ff 00 ff 18 18 00 00 00 ff 36 36 36 36
>3f0698		36 36 36 3f 00 00 00 00 18 18 18 1f 18 1f 00 00
>3f06a8		00 00 00 1f 18 1f 18 18 00 00 00 3f 36 36 36 36
>3f06b8		36 36 36 ff 36 36 36 36 18 18 18 ff 18 ff 18 18
>3f06c8		18 18 18 f8 00 00 00 00 00 00 00 1f 18 18 18 18
>3f06d8		ff ff ff ff ff ff ff ff 00 00 00 00 ff ff ff ff
>3f06e8		f0 f0 f0 f0 f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f
>3f06f8		ff ff ff ff 00 00 00 00 00 00 77 98 98 77 00 00
>3f0708		1c 36 66 fc c6 c6 fc c0 fe 62 60 60 60 60 60 00
>3f0718		00 00 ff 66 66 66 66 00 fe 62 30 18 30 62 fe 00
>3f0728		00 00 3f 66 c6 cc 78 00 00 00 33 33 33 3e 30 f0
>3f0738		00 00 ff 18 18 18 18 00 3c 18 3c 66 66 3c 18 3c
>3f0748		00 7c c6 fe c6 7c 00 00 00 7e c3 c3 c3 66 e7 00
>3f0758		1e 19 3c 66 c6 cc 78 00 00 00 66 99 99 66 00 00
>3f0768		00 03 7c ce e6 7c c0 00 00 3e c0 fe c0 3e 00 00
>3f0778		00 7e c3 c3 c3 c3 00 00 00 fe 00 fe 00 fe 00 00
>3f0788		18 18 7e 18 18 7e 00 00 70 18 0c 18 70 00 fe 00
>3f0798		1c 30 60 30 1c 00 fe 00 00 0e 1b 18 18 18 18 18
>3f07a8		18 18 18 18 18 d8 70 00 00 18 00 7e 00 18 00 00
>3f07b8		00 76 dc 00 76 dc 00 00 3c 66 3c 00 00 00 00 00
>3f07c8		00 18 3c 18 00 00 00 00 00 00 00 00 18 00 00 00
>3f07d8		0f 0c 0c 0c ec 6c 38 00 d8 ec cc cc 00 00 00 00
>3f07e8		f0 30 c0 f0 00 00 00 00 00 00 00 3c 3c 3c 3c 00
>3f07f8		00 00 00 00 00 00 00 00
.3f0800						FONT_4_SPLASH
>3f0800		7e 42 5a 52 5e 40 7e 00		.binary "FONT/quadrotextFONT.bin"
>3f0808		00 00 7e 02 7e 42 7e 00 40 40 7e 42 42 42 7e 00
>3f0818		00 00 7e 40 40 40 7e 00 02 02 7e 42 42 42 7e 00
>3f0828		00 00 7e 42 7e 40 7e 00 1c 10 10 7c 10 10 10 00
>3f0838		00 00 7e 42 42 7e 02 7e 40 40 7e 42 42 42 42 00
>3f0848		08 00 18 08 08 08 08 00 04 00 04 04 04 04 44 7c
>3f0858		40 40 44 48 50 68 44 00 18 08 08 08 08 08 08 00
>3f0868		00 00 7f 49 49 49 49 00 00 00 7e 42 42 42 42 00
>3f0878		00 00 7e 42 42 42 7e 00 00 00 7e 42 42 7e 40 40
>3f0888		00 00 7e 42 42 7e 02 02 00 00 7e 42 40 40 40 00
>3f0898		00 00 7e 40 7e 02 7e 00 10 10 7c 10 10 10 1c 00
>3f08a8		00 00 42 42 42 42 7e 00 00 00 42 42 42 24 18 00
>3f08b8		00 00 41 49 49 49 7f 00 00 00 42 24 18 24 42 00
>3f08c8		00 00 42 42 42 7e 02 7e 00 00 7e 04 18 20 7e 00
>3f08d8		24 00 7e 02 7e 42 7e 00 24 00 7e 42 42 42 7e 00
>3f08e8		24 00 42 42 42 42 7e 00 7c 44 44 4c 44 44 5c 40
>3f08f8		18 18 7e 02 7e 42 7e 00 00 00 00 00 00 00 00 00
>3f0908		08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>3f0918		24 24 7e 24 7e 24 24 00 08 3e 28 3e 0a 3e 08 00
>3f0928		00 62 64 08 10 26 46 00 78 48 48 30 4a 44 7a 00
>3f0938		04 08 10 00 00 00 00 00 04 08 10 10 10 08 04 00
>3f0948		20 10 08 08 08 10 20 00 08 2a 1c 3e 1c 2a 08 00
>3f0958		00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>3f0968		00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>3f0978		00 02 04 08 10 20 40 00 3e 22 22 22 22 22 3e 00
>3f0988		04 0c 14 04 04 04 04 00 3e 02 02 3e 20 20 3e 00
>3f0998		3e 02 02 3e 02 02 3e 00 22 22 22 3e 02 02 02 00
>3f09a8		3e 20 20 3e 02 02 3e 00 3e 20 20 3e 22 22 3e 00
>3f09b8		3e 02 02 04 08 08 08 00 3e 22 22 3e 22 22 3e 00
>3f09c8		3e 22 22 3e 02 02 3e 00 00 00 08 00 00 08 00 00
>3f09d8		00 00 08 00 00 08 08 10 0e 18 30 60 30 18 0e 00
>3f09e8		00 00 7e 00 7e 00 00 00 70 18 0c 06 0c 18 70 00
>3f09f8		7e 42 02 1e 10 00 10 00 00 00 00 00 ff 00 00 00
>3f0a08		7e 42 42 7e 42 42 42 00 7c 42 42 7c 42 42 7c 00
>3f0a18		7e 42 40 40 40 42 7e 00 78 44 42 42 42 44 78 00
>3f0a28		7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>3f0a38		7e 42 40 4e 42 42 7e 00 42 42 42 7e 42 42 42 00
>3f0a48		1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 7c 00
>3f0a58		42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>3f0a68		42 66 5a 5a 42 42 42 00 42 62 52 4a 46 42 42 00
>3f0a78		7e 42 42 42 42 42 7e 00 7e 42 42 7e 40 40 40 00
>3f0a88		7e 42 42 42 4a 46 7e 00 7e 42 42 7e 48 44 42 00
>3f0a98		7e 42 40 7e 02 42 7e 00 3e 08 08 08 08 08 08 00
>3f0aa8		42 42 42 42 42 42 7e 00 42 42 42 42 42 24 18 00
>3f0ab8		42 42 42 5a 5a 66 42 00 42 42 24 18 24 42 42 00
>3f0ac8		22 22 22 14 08 08 08 00 7e 02 04 18 20 40 7e 00
>3f0ad8		24 7e 42 42 7e 42 42 00 24 7e 42 42 42 42 7e 00
>3f0ae8		24 42 42 42 42 42 7e 00 00 00 00 7f 54 14 14 00
>3f0af8		40 c0 40 40 40 00 00 00 00 00 00 00 00 00 00 00
>3f0b08		08 08 08 08 08 08 08 08 e0 a0 a0 a0 e0 00 00 00
>3f0b18		ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>3f0b28		80 80 80 80 80 80 80 80 00 00 44 44 44 44 7a 40
>3f0b38		01 01 01 01 01 01 01 01 7e 42 20 10 20 42 7e 00
>3f0b48		1e 12 10 10 10 10 90 f0 3e 22 38 24 24 1c 44 7c
>3f0b58		01 03 05 09 11 21 7f 00 00 00 00 00 0f 0f 0f 0f
>3f0b68		00 00 7a 44 44 44 7a 00 00 00 41 22 14 08 14 1c
>3f0b78		e0 20 e0 80 e0 00 00 00 00 00 00 e0 a0 a0 a0 e0
>3f0b88		00 00 00 40 c0 40 40 40 00 00 00 e0 20 e0 80 e0
>3f0b98		00 00 00 e0 20 e0 20 e0 00 00 00 a0 a0 e0 20 20
>3f0ba8		00 00 00 e0 80 e0 20 e0 00 00 00 e0 80 e0 a0 e0
>3f0bb8		00 00 00 e0 20 40 40 40 00 00 00 e0 a0 e0 a0 e0
>3f0bc8		00 00 00 e0 a0 e0 20 e0 e0 20 e0 20 e0 00 00 00
>3f0bd8		00 00 00 00 f0 f0 f0 f0 08 10 20 00 00 00 00 00
>3f0be8		1e 12 10 78 10 12 7e 00 10 08 04 00 00 00 00 00
>3f0bf8		f0 f0 f0 f0 0f 0f 0f 0f 81 bd a5 ad a1 bf 81 ff
>3f0c08		ff ff 81 fd 81 bd 81 ff bf bf 81 bd bd bd 81 ff
>3f0c18		ff ff 81 bf bf bf 81 ff fd fd 81 bd bd bd 81 ff
>3f0c28		ff ff 81 bd 81 bf 81 ff e3 ef ef 83 ef ef ef ff
>3f0c38		ff ff 81 bd bd 81 fd 81 bf bf 81 bd bd bd bd ff
>3f0c48		f7 ff e7 f7 f7 f7 f7 ff fb ff fb fb fb fb bb 83
>3f0c58		bf bf bb b7 af 97 bb ff e7 f7 f7 f7 f7 f7 f7 ff
>3f0c68		ff ff 80 b6 b6 b6 b6 ff ff ff 81 bd bd bd bd ff
>3f0c78		ff ff 81 bd bd bd 81 ff ff ff 81 bd bd 81 bf bf
>3f0c88		ff ff 81 bd bd 81 fd fd ff ff 81 bd bf bf bf ff
>3f0c98		ff ff 81 bf 81 fd 81 ff ef ef 83 ef ef ef e3 ff
>3f0ca8		ff ff bd bd bd bd 81 ff ff ff bd bd bd db e7 ff
>3f0cb8		ff ff be b6 b6 b6 80 ff ff ff bd db e7 db bd ff
>3f0cc8		ff ff bd bd bd 81 fd 81 ff ff 81 fb e7 df 81 ff
>3f0cd8		db ff 81 fd 81 bd 81 ff db ff 81 bd bd bd 81 ff
>3f0ce8		db ff bd bd bd bd 81 ff 83 bb bb b3 bb bb a3 bf
>3f0cf8		e7 e7 81 fd 81 bd 81 ff ff ff ff ff ff ff ff ff
>3f0d08		f7 f7 f7 f7 ff ff f7 ff db db db ff ff ff ff ff
>3f0d18		db db 81 db 81 db db ff f7 c1 d7 c1 f5 c1 f7 ff
>3f0d28		ff 9d 9b f7 ef d9 b9 ff 87 b7 b7 cf b5 bb 85 ff
>3f0d38		fb f7 ef ff ff ff ff ff fb f7 ef ef ef f7 fb ff
>3f0d48		df ef f7 f7 f7 ef df ff f7 d5 e3 c1 e3 d5 f7 ff
>3f0d58		ff f7 f7 c1 f7 f7 ff ff ff ff ff ff ff f7 f7 ef
>3f0d68		ff ff ff 81 ff ff ff ff ff ff ff ff ff e7 e7 ff
>3f0d78		ff fd fb f7 ef df bf ff c1 dd dd dd dd dd c1 ff
>3f0d88		fb f3 eb fb fb fb fb ff c1 fd fd c1 df df c1 ff
>3f0d98		c1 fd fd c1 fd fd c1 ff dd dd dd c1 fd fd fd ff
>3f0da8		c1 df df c1 fd fd c1 ff c1 df df c1 dd dd c1 ff
>3f0db8		c1 fd fd fb f7 f7 f7 ff c1 dd dd c1 dd dd c1 ff
>3f0dc8		c1 dd dd c1 fd fd c1 ff ff ff f7 ff ff f7 ff ff
>3f0dd8		ff ff f7 ff ff f7 f7 ef f1 e7 cf 9f cf e7 f1 ff
>3f0de8		ff ff 81 ff 81 ff ff ff 8f e7 f3 f9 f3 e7 8f ff
>3f0df8		81 bd fd e1 ef ff ef ff ff ff ff ff 00 ff ff ff
>3f0e08		81 bd bd 81 bd bd bd ff 83 bd bd 83 bd bd 83 ff
>3f0e18		81 bd bf bf bf bd 81 ff 87 bb bd bd bd bb 87 ff
>3f0e28		81 bf bf 87 bf bf 81 ff 81 bf bf 87 bf bf bf ff
>3f0e38		81 bd bf b1 bd bd 81 ff bd bd bd 81 bd bd bd ff
>3f0e48		e3 f7 f7 f7 f7 f7 e3 ff f1 fb fb fb fb bb 83 ff
>3f0e58		bd bb b7 8f b7 bb bd ff bf bf bf bf bf bf 81 ff
>3f0e68		bd 99 a5 a5 bd bd bd ff bd 9d ad b5 b9 bd bd ff
>3f0e78		81 bd bd bd bd bd 81 ff 81 bd bd 81 bf bf bf ff
>3f0e88		81 bd bd bd b5 b9 81 ff 81 bd bd 81 b7 bb bd ff
>3f0e98		81 bd bf 81 fd bd 81 ff c1 f7 f7 f7 f7 f7 f7 ff
>3f0ea8		bd bd bd bd bd bd 81 ff bd bd bd bd bd db e7 ff
>3f0eb8		bd bd bd a5 a5 99 bd ff bd bd db e7 db bd bd ff
>3f0ec8		dd dd dd eb f7 f7 f7 ff 81 fd fb e7 df bf 81 ff
>3f0ed8		db 81 bd bd 81 bd bd ff db 81 bd bd bd bd 81 ff
>3f0ee8		db bd bd bd bd bd 81 ff ff ff ff 80 ab eb eb ff
>3f0ef8		bf 3f bf bf bf ff ff ff ff ff ff ff ff ff ff ff
>3f0f08		f7 f7 f7 f7 f7 f7 f7 f7 1f 5f 5f 5f 1f ff ff ff
>3f0f18		00 ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00
>3f0f28		7f 7f 7f 7f 7f 7f 7f 7f ff ff bb bb bb bb 85 bf
>3f0f38		fe fe fe fe fe fe fe fe 81 bd df ef df bd 81 ff
>3f0f48		e1 ed ef ef ef ef 6f 0f c1 dd c7 db db e3 bb 83
>3f0f58		fe fc fa f6 ee de 80 ff ff ff ff ff f0 f0 f0 f0
>3f0f68		ff ff 85 bb bb bb 85 ff ff ff be dd eb f7 eb e3
>3f0f78		1f df 1f 7f 1f ff ff ff ff ff ff 1f 5f 5f 5f 1f
>3f0f88		ff ff ff bf 3f bf bf bf ff ff ff 1f df 1f 7f 1f
>3f0f98		ff ff ff 1f df 1f df 1f ff ff ff 5f 5f 1f df df
>3f0fa8		ff ff ff 1f 7f 1f df 1f ff ff ff 1f 7f 1f 5f 1f
>3f0fb8		ff ff ff 1f df bf bf bf ff ff ff 1f 5f 1f 5f 1f
>3f0fc8		ff ff ff 1f 5f 1f df 1f 1f df 1f df 1f ff ff ff
>3f0fd8		ff ff ff ff 0f 0f 0f 0f f7 ef df ff ff ff ff ff
>3f0fe8		e1 ed ef 87 ef ed 81 ff ef f7 fb ff ff ff ff ff
>3f0ff8		0f 0f 0f 0f f0 f0 f0 00
>3fffff		ff				                .byte $FF               ; Last byte of flash data

;******  End of listing
